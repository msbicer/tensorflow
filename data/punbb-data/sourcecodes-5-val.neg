<?php/** * Loads the reserved strings used to transform problematic strings in URLs. * These are matched against the whole string after all other transformations. * * @copyright (C) 2008-2011 PunBB, partially based on code (C) 2008-2009 FluxBB.org * @license http://www.gnu.org/licenses/gpl.html GPL version 2 or higher * @package PunBB */$forum_reserved_strings = array(	''				=>	'view',	'newpost'		=>	'view',	'newposts'		=>	'view',	'new-post'		=>	'view',	'new-posts'		=>	'view',	'lastpost'		=>	'view',	'lastposts'		=>	'view',	'last-post'		=>	'view',	'last-posts'	=>	'view',);
<?php// {{{ license/* vim: set expandtab tabstop=4 shiftwidth=4 softtabstop=4 foldmethod=marker: *///// +----------------------------------------------------------------------+// | This library is free software; you can redistribute it and/or modify |// | it under the terms of the GNU Lesser General Public License as       |// | published by the Free Software Foundation; either version 2.1 of the |// | License, or (at your option) any later version.                      |// |                                                                      |// | This library is distributed in the hope that it will be useful, but  |// | WITHOUT ANY WARRANTY; without even the implied warranty of           |// | MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU    |// | Lesser General Public License for more details.                      |// |                                                                      |// | You should have received a copy of the GNU Lesser General Public     |// | License along with this library; if not, write to the Free Software  |// | Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307 |// | USA.                                                                 |// +----------------------------------------------------------------------+//// }}}/** * Encode/decode Internationalized Domain Names. * * The class allows to convert internationalized domain names * (see RFC 3490 for details) as they can be used with various registries worldwide * to be translated between their original (localized) form and their encoded form * as it will be used in the DNS (Domain Name System). * * The class provides two public methods, encode() and decode(), which do exactly * what you would expect them to do. You are allowed to use complete domain names, * simple strings and complete email addresses as well. That means, that you might * use any of the following notations: * * - www.nrgler.com * - xn--nrgler-wxa * - xn--brse-5qa.xn--knrz-1ra.info * * Unicode input might be given as either UTF-8 string, UCS-4 string or UCS-4 array. * Unicode output is available in the same formats. * You can select your preferred format via {@link set_paramter()}. * * ACE input and output is always expected to be ASCII. * * @author  Matthias Sommerfeld <mso@phlylabs.de> * @copyright 2004-2011 phlyLabs Berlin, http://phlylabs.de * @version 0.8.0 2011-03-11 */class idna_convert{    // NP See below    // Internal settings, do not mess with them    protected $_punycode_prefix = 'xn--';    protected $_invalid_ucs = 0x80000000;    protected $_max_ucs = 0x10FFFF;    protected $_base = 36;    protected $_tmin = 1;    protected $_tmax = 26;    protected $_skew = 38;    protected $_damp = 700;    protected $_initial_bias = 72;    protected $_initial_n = 0x80;    protected $_sbase = 0xAC00;    protected $_lbase = 0x1100;    protected $_vbase = 0x1161;    protected $_tbase = 0x11A7;    protected $_lcount = 19;    protected $_vcount = 21;    protected $_tcount = 28;    protected $_ncount = 588;   // _vcount * _tcount    protected $_scount = 11172; // _lcount * _tcount * _vcount    protected $_error = false;    protected static $_mb_string_overload = null;    // See {@link set_paramter()} for details of how to change the following    // settings from within your script / application    protected $_api_encoding = 'utf8';   // Default input charset is UTF-8    protected $_allow_overlong = false;  // Overlong UTF-8 encodings are forbidden    protected $_strict_mode = false;     // Behave strict or not    protected $_idn_version = 2003;      // Can be either 2003 (old, default) or 2008    /**     * the constructor     *     * @param array $options     * @return boolean     * @since 0.5.2     */    public function __construct($options = false)    {        $this->slast = $this->_sbase + $this->_lcount * $this->_vcount * $this->_tcount;        // If parameters are given, pass these to the respective method        if (is_array($options)) {            $this->set_parameter($options);        }        // populate mbstring overloading cache if not set        if (self::$_mb_string_overload === null) {            self::$_mb_string_overload = (extension_loaded('mbstring')                && (ini_get('mbstring.func_overload') & 0x02) === 0x02);        }    }    /**     * Sets a new option value. Available options and values:     * [encoding - Use either UTF-8, UCS4 as array or UCS4 as string as input ('utf8' for UTF-8,     *         'ucs4_string' and 'ucs4_array' respectively for UCS4); The output is always UTF-8]     * [overlong - Unicode does not allow unnecessarily long encodings of chars,     *             to allow this, set this parameter to true, else to false;     *             default is false.]     * [strict - true: strict mode, good for registration purposes - Causes errors     *           on failures; false: loose mode, ideal for "wildlife" applications     *           by silently ignoring errors and returning the original input instead     *     * @param    mixed     Parameter to set (string: single parameter; array of Parameter => Value pairs)     * @param    string    Value to use (if parameter 1 is a string)     * @return   boolean   true on success, false otherwise     */    public function set_parameter($option, $value = false)    {        if (!is_array($option)) {            $option = array($option => $value);        }        foreach ($option as $k => $v) {            switch ($k) {            case 'encoding':                switch ($v) {                case 'utf8':                case 'ucs4_string':                case 'ucs4_array':                    $this->_api_encoding = $v;                    break;                default:                    $this->_error('Set Parameter: Unknown parameter '.$v.' for option '.$k);                    return false;                }                break;            case 'overlong':                $this->_allow_overlong = ($v) ? true : false;                break;            case 'strict':                $this->_strict_mode = ($v) ? true : false;                break;            case 'idn_version':                if (in_array($v, array('2003', '2008'))) {                    $this->_idn_version = $v;                } else {                    $this->_error('Set Parameter: Unknown parameter '.$v.' for option '.$k);                }                break;            case 'encode_german_sz': // Deprecated                if (!$v) {                    self::$NP['replacemaps'][0xDF] = array(0x73, 0x73);                } else {                    unset(self::$NP['replacemaps'][0xDF]);                }                break;            default:                $this->_error('Set Parameter: Unknown option '.$k);                return false;            }        }        return true;    }    /**     * Decode a given ACE domain name     * @param    string   Domain name (ACE string)     * [@param    string   Desired output encoding, see {@link set_parameter}]     * @return   string   Decoded Domain name (UTF-8 or UCS-4)     */    public function decode($input, $one_time_encoding = false)    {        // Optionally set        if ($one_time_encoding) {            switch ($one_time_encoding) {            case 'utf8':            case 'ucs4_string':            case 'ucs4_array':                break;            default:                $this->_error('Unknown encoding '.$one_time_encoding);                return false;            }        }        // Make sure to drop any newline characters around        $input = trim($input);        // Negotiate input and try to determine, whether it is a plain string,        // an email address or something like a complete URL        if (strpos($input, '@')) { // Maybe it is an email address            // No no in strict mode            if ($this->_strict_mode) {                $this->_error('Only simple domain name parts can be handled in strict mode');                return false;            }            list ($email_pref, $input) = explode('@', $input, 2);            $arr = explode('.', $input);            foreach ($arr as $k => $v) {                if (preg_match('!^'.preg_quote($this->_punycode_prefix, '!').'!', $v)) {                    $conv = $this->_decode($v);                    if ($conv) $arr[$k] = $conv;                }            }            $input = join('.', $arr);            $arr = explode('.', $email_pref);            foreach ($arr as $k => $v) {                if (preg_match('!^'.preg_quote($this->_punycode_prefix, '!').'!', $v)) {                    $conv = $this->_decode($v);                    if ($conv) $arr[$k] = $conv;                }            }            $email_pref = join('.', $arr);            $return = $email_pref . '@' . $input;        } elseif (preg_match('![:\./]!', $input)) { // Or a complete domain name (with or without paths / parameters)            // No no in strict mode            if ($this->_strict_mode) {                $this->_error('Only simple domain name parts can be handled in strict mode');                return false;            }            $parsed = parse_url($input);            if (isset($parsed['host'])) {                $arr = explode('.', $parsed['host']);                foreach ($arr as $k => $v) {                    $conv = $this->_decode($v);                    if ($conv) $arr[$k] = $conv;                }                $parsed['host'] = join('.', $arr);                $return =                        (empty($parsed['scheme']) ? '' : $parsed['scheme'].(strtolower($parsed['scheme']) == 'mailto' ? ':' : '://'))                        .(empty($parsed['user']) ? '' : $parsed['user'].(empty($parsed['pass']) ? '' : ':'.$parsed['pass']).'@')                        .$parsed['host']                        .(empty($parsed['port']) ? '' : ':'.$parsed['port'])                        .(empty($parsed['path']) ? '' : $parsed['path'])                        .(empty($parsed['query']) ? '' : '?'.$parsed['query'])                        .(empty($parsed['fragment']) ? '' : '#'.$parsed['fragment']);            } else { // parse_url seems to have failed, try without it                $arr = explode('.', $input);                foreach ($arr as $k => $v) {                    $conv = $this->_decode($v);                    $arr[$k] = ($conv) ? $conv : $v;                }                $return = join('.', $arr);            }        } else { // Otherwise we consider it being a pure domain name string            $return = $this->_decode($input);            if (!$return) $return = $input;        }        // The output is UTF-8 by default, other output formats need conversion here        // If one time encoding is given, use this, else the objects property        switch (($one_time_encoding) ? $one_time_encoding : $this->_api_encoding) {        case 'utf8':            return $return;            break;        case 'ucs4_string':           return $this->_ucs4_to_ucs4_string($this->_utf8_to_ucs4($return));           break;        case 'ucs4_array':            return $this->_utf8_to_ucs4($return);            break;        default:            $this->_error('Unsupported output format');            return false;        }    }    /**     * Encode a given UTF-8 domain name     * @param    string   Domain name (UTF-8 or UCS-4)     * [@param    string   Desired input encoding, see {@link set_parameter}]     * @return   string   Encoded Domain name (ACE string)     */    public function encode($decoded, $one_time_encoding = false)    {        // Forcing conversion of input to UCS4 array        // If one time encoding is given, use this, else the objects property        switch ($one_time_encoding ? $one_time_encoding : $this->_api_encoding) {        case 'utf8':            $decoded = $this->_utf8_to_ucs4($decoded);            break;        case 'ucs4_string':           $decoded = $this->_ucs4_string_to_ucs4($decoded);        case 'ucs4_array':           break;        default:            $this->_error('Unsupported input format: '.($one_time_encoding ? $one_time_encoding : $this->_api_encoding));            return false;        }        // No input, no output, what else did you expect?        if (empty($decoded)) return '';        // Anchors for iteration        $last_begin = 0;        // Output string        $output = '';        foreach ($decoded as $k => $v) {            // Make sure to use just the plain dot            switch($v) {            case 0x3002:            case 0xFF0E:            case 0xFF61:                $decoded[$k] = 0x2E;                // Right, no break here, the above are converted to dots anyway            // Stumbling across an anchoring character            case 0x2E:            case 0x2F:            case 0x3A:            case 0x3F:            case 0x40:                // Neither email addresses nor URLs allowed in strict mode                if ($this->_strict_mode) {                   $this->_error('Neither email addresses nor URLs are allowed in strict mode.');                   return false;                } else {                    // Skip first char                    if ($k) {                        $encoded = '';                        $encoded = $this->_encode(array_slice($decoded, $last_begin, (($k)-$last_begin)));                        if ($encoded) {                            $output .= $encoded;                        } else {                            $output .= $this->_ucs4_to_utf8(array_slice($decoded, $last_begin, (($k)-$last_begin)));                        }                        $output .= chr($decoded[$k]);                    }                    $last_begin = $k + 1;                }            }        }        // Catch the rest of the string        if ($last_begin) {            $inp_len = sizeof($decoded);            $encoded = '';            $encoded = $this->_encode(array_slice($decoded, $last_begin, (($inp_len)-$last_begin)));            if ($encoded) {                $output .= $encoded;            } else {                $output .= $this->_ucs4_to_utf8(array_slice($decoded, $last_begin, (($inp_len)-$last_begin)));            }            return $output;        } else {            if ($output = $this->_encode($decoded)) {                return $output;            } else {                return $this->_ucs4_to_utf8($decoded);            }        }    }    /**     * Removes a weakness of encode(), which cannot properly handle URIs but instead encodes their     * path or query components, too.     * @param string  $uri  Expects the URI as a UTF-8 (or ASCII) string     * @return  string  The URI encoded to Punycode, everything but the host component is left alone     * @since 0.6.4     */    public function encode_uri($uri)    {        $parsed = parse_url($uri);        if (!isset($parsed['host'])) {            $this->_error('The given string does not look like a URI');            return false;        }        $arr = explode('.', $parsed['host']);        foreach ($arr as $k => $v) {            $conv = $this->encode($v, 'utf8');            if ($conv) $arr[$k] = $conv;        }        $parsed['host'] = join('.', $arr);        $return =                (empty($parsed['scheme']) ? '' : $parsed['scheme'].(strtolower($parsed['scheme']) == 'mailto' ? ':' : '://'))                .(empty($parsed['user']) ? '' : $parsed['user'].(empty($parsed['pass']) ? '' : ':'.$parsed['pass']).'@')                .$parsed['host']                .(empty($parsed['port']) ? '' : ':'.$parsed['port'])                .(empty($parsed['path']) ? '' : $parsed['path'])                .(empty($parsed['query']) ? '' : '?'.$parsed['query'])                .(empty($parsed['fragment']) ? '' : '#'.$parsed['fragment']);        return $return;    }    /**     * Use this method to get the last error ocurred     * @param    void     * @return   string   The last error, that occured     */    public function get_last_error()    {        return $this->_error;    }    /**     * The actual decoding algorithm     * @param string     * @return mixed     */    protected function _decode($encoded)    {        $decoded = array();        // find the Punycode prefix        if (!preg_match('!^'.preg_quote($this->_punycode_prefix, '!').'!', $encoded)) {            $this->_error('This is not a punycode string');            return false;        }        $encode_test = preg_replace('!^'.preg_quote($this->_punycode_prefix, '!').'!', '', $encoded);        // If nothing left after removing the prefix, it is hopeless        if (!$encode_test) {            $this->_error('The given encoded string was empty');            return false;        }        // Find last occurence of the delimiter        $delim_pos = strrpos($encoded, '-');        if ($delim_pos > self::byteLength($this->_punycode_prefix)) {            for ($k = self::byteLength($this->_punycode_prefix); $k < $delim_pos; ++$k) {                $decoded[] = ord($encoded{$k});            }        }        $deco_len = count($decoded);        $enco_len = self::byteLength($encoded);        // Wandering through the strings; init        $is_first = true;        $bias = $this->_initial_bias;        $idx = 0;        $char = $this->_initial_n;        for ($enco_idx = ($delim_pos) ? ($delim_pos + 1) : 0; $enco_idx < $enco_len; ++$deco_len) {            for ($old_idx = $idx, $w = 1, $k = $this->_base; 1 ; $k += $this->_base) {                $digit = $this->_decode_digit($encoded{$enco_idx++});                $idx += $digit * $w;                $t = ($k <= $bias) ? $this->_tmin :                        (($k >= $bias + $this->_tmax) ? $this->_tmax : ($k - $bias));                if ($digit < $t) break;                $w = (int) ($w * ($this->_base - $t));            }            $bias = $this->_adapt($idx - $old_idx, $deco_len + 1, $is_first);            $is_first = false;            $char += (int) ($idx / ($deco_len + 1));            $idx %= ($deco_len + 1);            if ($deco_len > 0) {                // Make room for the decoded char                for ($i = $deco_len; $i > $idx; $i--) $decoded[$i] = $decoded[($i - 1)];            }            $decoded[$idx++] = $char;        }        return $this->_ucs4_to_utf8($decoded);    }    /**     * The actual encoding algorithm     * @param  string     * @return mixed     */    protected function _encode($decoded)    {        // We cannot encode a domain name containing the Punycode prefix        $extract = self::byteLength($this->_punycode_prefix);        $check_pref = $this->_utf8_to_ucs4($this->_punycode_prefix);        $check_deco = array_slice($decoded, 0, $extract);        if ($check_pref == $check_deco) {            $this->_error('This is already a punycode string');            return false;        }        // We will not try to encode strings consisting of basic code points only        $encodable = false;        foreach ($decoded as $k => $v) {            if ($v > 0x7a) {                $encodable = true;                break;            }        }        if (!$encodable) {            $this->_error('The given string does not contain encodable chars');            return false;        }        // Do NAMEPREP        $decoded = $this->_nameprep($decoded);        if (!$decoded || !is_array($decoded)) return false; // NAMEPREP failed        $deco_len  = count($decoded);        if (!$deco_len) return false; // Empty array        $codecount = 0; // How many chars have been consumed        $encoded = '';        // Copy all basic code points to output        for ($i = 0; $i < $deco_len; ++$i) {            $test = $decoded[$i];            // Will match [-0-9a-zA-Z]            if ((0x2F < $test && $test < 0x40) || (0x40 < $test && $test < 0x5B)                    || (0x60 < $test && $test <= 0x7B) || (0x2D == $test)) {                $encoded .= chr($decoded[$i]);                $codecount++;            }        }        if ($codecount == $deco_len) return $encoded; // All codepoints were basic ones        // Start with the prefix; copy it to output        $encoded = $this->_punycode_prefix.$encoded;        // If we have basic code points in output, add an hyphen to the end        if ($codecount) $encoded .= '-';        // Now find and encode all non-basic code points        $is_first = true;        $cur_code = $this->_initial_n;        $bias = $this->_initial_bias;        $delta = 0;        while ($codecount < $deco_len) {            // Find the smallest code point >= the current code point and            // remember the last ouccrence of it in the input            for ($i = 0, $next_code = $this->_max_ucs; $i < $deco_len; $i++) {                if ($decoded[$i] >= $cur_code && $decoded[$i] <= $next_code) {                    $next_code = $decoded[$i];                }            }            $delta += ($next_code - $cur_code) * ($codecount + 1);            $cur_code = $next_code;            // Scan input again and encode all characters whose code point is $cur_code            for ($i = 0; $i < $deco_len; $i++) {                if ($decoded[$i] < $cur_code) {                    $delta++;                } elseif ($decoded[$i] == $cur_code) {                    for ($q = $delta, $k = $this->_base; 1; $k += $this->_base) {                        $t = ($k <= $bias) ? $this->_tmin :                                (($k >= $bias + $this->_tmax) ? $this->_tmax : $k - $bias);                        if ($q < $t) break;                        $encoded .= $this->_encode_digit(intval($t + (($q - $t) % ($this->_base - $t)))); //v0.4.5 Changed from ceil() to intval()                        $q = (int) (($q - $t) / ($this->_base - $t));                    }                    $encoded .= $this->_encode_digit($q);                    $bias = $this->_adapt($delta, $codecount+1, $is_first);                    $codecount++;                    $delta = 0;                    $is_first = false;                }            }            $delta++;            $cur_code++;        }        return $encoded;    }    /**     * Adapt the bias according to the current code point and position     * @param int $delta     * @param int $npoints     * @param int $is_first     * @return int     */    protected function _adapt($delta, $npoints, $is_first)    {        $delta = intval($is_first ? ($delta / $this->_damp) : ($delta / 2));        $delta += intval($delta / $npoints);        for ($k = 0; $delta > (($this->_base - $this->_tmin) * $this->_tmax) / 2; $k += $this->_base) {            $delta = intval($delta / ($this->_base - $this->_tmin));        }        return intval($k + ($this->_base - $this->_tmin + 1) * $delta / ($delta + $this->_skew));    }    /**     * Encoding a certain digit     * @param    int $d     * @return string     */    protected function _encode_digit($d)    {        return chr($d + 22 + 75 * ($d < 26));    }    /**     * Decode a certain digit     * @param    int $cp     * @return int     */    protected function _decode_digit($cp)    {        $cp = ord($cp);        return ($cp - 48 < 10) ? $cp - 22 : (($cp - 65 < 26) ? $cp - 65 : (($cp - 97 < 26) ? $cp - 97 : $this->_base));    }    /**     * Internal error handling method     * @param  string $error     */    protected function _error($error = '')    {        $this->_error = $error;    }    /**     * Do Nameprep according to RFC3491 and RFC3454     * @param    array    Unicode Characters     * @return   string   Unicode Characters, Nameprep'd     */    protected function _nameprep($input)    {        $output = array();        $error = false;        //        // Mapping        // Walking through the input array, performing the required steps on each of        // the input chars and putting the result into the output array        // While mapping required chars we apply the cannonical ordering        foreach ($input as $v) {            // Map to nothing == skip that code point            if (in_array($v, self::$NP['map_nothing'])) continue;            // Try to find prohibited input            if (in_array($v, self::$NP['prohibit']) || in_array($v, self::$NP['general_prohibited'])) {                $this->_error('NAMEPREP: Prohibited input U+'.sprintf('%08X', $v));                return false;            }            foreach (self::$NP['prohibit_ranges'] as $range) {                if ($range[0] <= $v && $v <= $range[1]) {                    $this->_error('NAMEPREP: Prohibited input U+'.sprintf('%08X', $v));                    return false;                }            }            if (0xAC00 <= $v && $v <= 0xD7AF) {                // Hangul syllable decomposition                foreach ($this->_hangul_decompose($v) as $out) {                    $output[] = (int) $out;                }            } elseif (($this->_idn_version == '2003') && isset(self::$NP['replacemaps'][$v])) {                // There's a decomposition mapping for that code point                // Decompositions only in version 2003 (original) of IDNA                foreach ($this->_apply_cannonical_ordering(self::$NP['replacemaps'][$v]) as $out) {                    $output[] = (int) $out;                }            } else {                $output[] = (int) $v;            }        }        // Before applying any Combining, try to rearrange any Hangul syllables        $output = $this->_hangul_compose($output);        //        // Combine code points        //        $last_class = 0;        $last_starter = 0;        $out_len = count($output);        for ($i = 0; $i < $out_len; ++$i) {            $class = $this->_get_combining_class($output[$i]);            if ((!$last_class || $last_class > $class) && $class) {                // Try to match                $seq_len = $i - $last_starter;                $out = $this->_combine(array_slice($output, $last_starter, $seq_len));                // On match: Replace the last starter with the composed character and remove                // the now redundant non-starter(s)                if ($out) {                    $output[$last_starter] = $out;                    if (count($out) != $seq_len) {                        for ($j = $i+1; $j < $out_len; ++$j) $output[$j-1] = $output[$j];                        unset($output[$out_len]);                    }                    // Rewind the for loop by one, since there can be more possible compositions                    $i--;                    $out_len--;                    $last_class = ($i == $last_starter) ? 0 : $this->_get_combining_class($output[$i-1]);                    continue;                }            }            // The current class is 0            if (!$class) $last_starter = $i;            $last_class = $class;        }        return $output;    }    /**     * Decomposes a Hangul syllable     * (see http://www.unicode.org/unicode/reports/tr15/#Hangul     * @param    integer  32bit UCS4 code point     * @return   array    Either Hangul Syllable decomposed or original 32bit value as one value array     */    protected function _hangul_decompose($char)    {        $sindex = (int) $char - $this->_sbase;        if ($sindex < 0 || $sindex >= $this->_scount) return array($char);        $result = array();        $result[] = (int) $this->_lbase + $sindex / $this->_ncount;        $result[] = (int) $this->_vbase + ($sindex % $this->_ncount) / $this->_tcount;        $T = intval($this->_tbase + $sindex % $this->_tcount);        if ($T != $this->_tbase) $result[] = $T;        return $result;    }    /**     * Ccomposes a Hangul syllable     * (see http://www.unicode.org/unicode/reports/tr15/#Hangul     * @param    array    Decomposed UCS4 sequence     * @return   array    UCS4 sequence with syllables composed     */    protected function _hangul_compose($input)    {        $inp_len = count($input);        if (!$inp_len) return array();        $result = array();        $last = (int) $input[0];        $result[] = $last; // copy first char from input to output        for ($i = 1; $i < $inp_len; ++$i) {            $char = (int) $input[$i];            $sindex = $last - $this->_sbase;            $lindex = $last - $this->_lbase;            $vindex = $char - $this->_vbase;            $tindex = $char - $this->_tbase;            // Find out, whether two current characters are LV and T            if (0 <= $sindex && $sindex < $this->_scount && ($sindex % $this->_tcount == 0)                    && 0 <= $tindex && $tindex <= $this->_tcount) {                // create syllable of form LVT                $last += $tindex;                $result[(count($result) - 1)] = $last; // reset last                continue; // discard char            }            // Find out, whether two current characters form L and V            if (0 <= $lindex && $lindex < $this->_lcount && 0 <= $vindex && $vindex < $this->_vcount) {                // create syllable of form LV                $last = (int) $this->_sbase + ($lindex * $this->_vcount + $vindex) * $this->_tcount;                $result[(count($result) - 1)] = $last; // reset last                continue; // discard char            }            // if neither case was true, just add the character            $last = $char;            $result[] = $char;        }        return $result;    }    /**     * Returns the combining class of a certain wide char     * @param    integer    Wide char to check (32bit integer)     * @return   integer    Combining class if found, else 0     */    protected function _get_combining_class($char)    {        return isset(self::$NP['norm_combcls'][$char]) ? self::$NP['norm_combcls'][$char] : 0;    }    /**     * Applies the cannonical ordering of a decomposed UCS4 sequence     * @param    array      Decomposed UCS4 sequence     * @return   array      Ordered USC4 sequence     */    protected function _apply_cannonical_ordering($input)    {        $swap = true;        $size = count($input);        while ($swap) {            $swap = false;            $last = $this->_get_combining_class(intval($input[0]));            for ($i = 0; $i < $size-1; ++$i) {                $next = $this->_get_combining_class(intval($input[$i+1]));                if ($next != 0 && $last > $next) {                    // Move item leftward until it fits                    for ($j = $i + 1; $j > 0; --$j) {                        if ($this->_get_combining_class(intval($input[$j-1])) <= $next) break;                        $t = intval($input[$j]);                        $input[$j] = intval($input[$j-1]);                        $input[$j-1] = $t;                        $swap = true;                    }                    // Reentering the loop looking at the old character again                    $next = $last;                }                $last = $next;            }        }        return $input;    }    /**     * Do composition of a sequence of starter and non-starter     * @param    array      UCS4 Decomposed sequence     * @return   array      Ordered USC4 sequence     */    protected function _combine($input)    {        $inp_len = count($input);        foreach (self::$NP['replacemaps'] as $np_src => $np_target) {            if ($np_target[0] != $input[0]) continue;            if (count($np_target) != $inp_len) continue;            $hit = false;            foreach ($input as $k2 => $v2) {                if ($v2 == $np_target[$k2]) {                    $hit = true;                } else {                    $hit = false;                    break;                }            }            if ($hit) return $np_src;        }        return false;    }    /**     * This converts an UTF-8 encoded string to its UCS-4 representation     * By talking about UCS-4 "strings" we mean arrays of 32bit integers representing     * each of the "chars". This is due to PHP not being able to handle strings with     * bit depth different from 8. This apllies to the reverse method _ucs4_to_utf8(), too.     * The following UTF-8 encodings are supported:     * bytes bits  representation     * 1        7  0xxxxxxx     * 2       11  110xxxxx 10xxxxxx     * 3       16  1110xxxx 10xxxxxx 10xxxxxx     * 4       21  11110xxx 10xxxxxx 10xxxxxx 10xxxxxx     * 5       26  111110xx 10xxxxxx 10xxxxxx 10xxxxxx 10xxxxxx     * 6       31  1111110x 10xxxxxx 10xxxxxx 10xxxxxx 10xxxxxx 10xxxxxx     * Each x represents a bit that can be used to store character data.     * The five and six byte sequences are part of Annex D of ISO/IEC 10646-1:2000     * @param string $input     * @return string     */    protected function _utf8_to_ucs4($input)    {        $output = array();        $out_len = 0;        $inp_len = self::byteLength($input);        $mode = 'next';        $test = 'none';        for ($k = 0; $k < $inp_len; ++$k) {            $v = ord($input{$k}); // Extract byte from input string            if ($v < 128) { // We found an ASCII char - put into stirng as is                $output[$out_len] = $v;                ++$out_len;                if ('add' == $mode) {                    $this->_error('Conversion from UTF-8 to UCS-4 failed: malformed input at byte '.$k);                    return false;                }                continue;            }            if ('next' == $mode) { // Try to find the next start byte; determine the width of the Unicode char                $start_byte = $v;                $mode = 'add';                $test = 'range';                if ($v >> 5 == 6) { // &110xxxxx 10xxxxx                    $next_byte = 0; // Tells, how many times subsequent bitmasks must rotate 6bits to the left                    $v = ($v - 192) << 6;                } elseif ($v >> 4 == 14) { // &1110xxxx 10xxxxxx 10xxxxxx                    $next_byte = 1;                    $v = ($v - 224) << 12;                } elseif ($v >> 3 == 30) { // &11110xxx 10xxxxxx 10xxxxxx 10xxxxxx                    $next_byte = 2;                    $v = ($v - 240) << 18;                } elseif ($v >> 2 == 62) { // &111110xx 10xxxxxx 10xxxxxx 10xxxxxx 10xxxxxx                    $next_byte = 3;                    $v = ($v - 248) << 24;                } elseif ($v >> 1 == 126) { // &1111110x 10xxxxxx 10xxxxxx 10xxxxxx 10xxxxxx 10xxxxxx                    $next_byte = 4;                    $v = ($v - 252) << 30;                } else {                    $this->_error('This might be UTF-8, but I don\'t understand it at byte '.$k);                    return false;                }                if ('add' == $mode) {                    $output[$out_len] = (int) $v;                    ++$out_len;                    continue;                }            }            if ('add' == $mode) {                if (!$this->_allow_overlong && $test == 'range') {                    $test = 'none';                    if (($v < 0xA0 && $start_byte == 0xE0) || ($v < 0x90 && $start_byte == 0xF0) || ($v > 0x8F && $start_byte == 0xF4)) {                        $this->_error('Bogus UTF-8 character detected (out of legal range) at byte '.$k);                        return false;                    }                }                if ($v >> 6 == 2) { // Bit mask must be 10xxxxxx                    $v = ($v - 128) << ($next_byte * 6);                    $output[($out_len - 1)] += $v;                    --$next_byte;                } else {                    $this->_error('Conversion from UTF-8 to UCS-4 failed: malformed input at byte '.$k);                    return false;                }                if ($next_byte < 0) {                    $mode = 'next';                }            }        } // for        return $output;    }    /**     * Convert UCS-4 string into UTF-8 string     * See _utf8_to_ucs4() for details     * @param string  $input     * @return string     */    protected function _ucs4_to_utf8($input)    {        $output = '';        foreach ($input as $k => $v) {            if ($v < 128) { // 7bit are transferred literally                $output .= chr($v);            } elseif ($v < (1 << 11)) { // 2 bytes                $output .= chr(192+($v >> 6)).chr(128+($v & 63));            } elseif ($v < (1 << 16)) { // 3 bytes                $output .= chr(224+($v >> 12)).chr(128+(($v >> 6) & 63)).chr(128+($v & 63));            } elseif ($v < (1 << 21)) { // 4 bytes                $output .= chr(240+($v >> 18)).chr(128+(($v >> 12) & 63)).chr(128+(($v >> 6) & 63)).chr(128+($v & 63));            } elseif (self::$safe_mode) {                $output .= self::$safe_char;            } else {                $this->_error('Conversion from UCS-4 to UTF-8 failed: malformed input at byte '.$k);                return false;            }        }        return $output;    }    /**     * Convert UCS-4 array into UCS-4 string     *     * @param array $input     * @return string     */    protected function _ucs4_to_ucs4_string($input)    {        $output = '';        // Take array values and split output to 4 bytes per value        // The bit mask is 255, which reads &11111111        foreach ($input as $v) {            $output .= chr(($v >> 24) & 255).chr(($v >> 16) & 255).chr(($v >> 8) & 255).chr($v & 255);        }        return $output;    }    /**     * Convert UCS-4 strin into UCS-4 garray     *     * @param  string $input     * @return array     */    protected function _ucs4_string_to_ucs4($input)    {        $output = array();        $inp_len = self::byteLength($input);        // Input length must be dividable by 4        if ($inp_len % 4) {            $this->_error('Input UCS4 string is broken');            return false;        }        // Empty input - return empty output        if (!$inp_len) return $output;        for ($i = 0, $out_len = -1; $i < $inp_len; ++$i) {            // Increment output position every 4 input bytes            if (!($i % 4)) {                $out_len++;                $output[$out_len] = 0;            }            $output[$out_len] += ord($input{$i}) << (8 * (3 - ($i % 4) ) );        }        return $output;    }    /**     * Gets the length of a string in bytes even if mbstring function     * overloading is turned on     *     * @param string $string the string for which to get the length.     * @return integer the length of the string in bytes.     */    protected static function byteLength($string)    {        if (self::$_mb_string_overload) {            return mb_strlen($string, '8bit');        }        return strlen(/*(binary)*/ $string);    }    /**     * Attempts to return a concrete IDNA instance.     *     * @param array $params Set of paramaters     * @return idna_convert     * @access public     */    public function getInstance($params = array())    {        return new idna_convert($params);    }    /**     * Attempts to return a concrete IDNA instance for either php4 or php5,     * only creating a new instance if no IDNA instance with the same     * parameters currently exists.     *     * @param array $params Set of paramaters     *     * @return object idna_convert     * @access public     */    public function singleton($params = array())    {        static $instances;        if (!isset($instances)) {            $instances = array();        }        $signature = serialize($params);        if (!isset($instances[$signature])) {            $instances[$signature] = idna_convert::getInstance($params);        }        return $instances[$signature];    }    /**     * Holds all relevant mapping tables     * See RFC3454 for details     *     * @private array     * @since 0.5.2     */    protected static $NP = array            ('map_nothing' => array(0xAD, 0x34F, 0x1806, 0x180B, 0x180C, 0x180D, 0x200B, 0x200C                    ,0x200D, 0x2060, 0xFE00, 0xFE01, 0xFE02, 0xFE03, 0xFE04, 0xFE05, 0xFE06, 0xFE07                    ,0xFE08, 0xFE09, 0xFE0A, 0xFE0B, 0xFE0C, 0xFE0D, 0xFE0E, 0xFE0F, 0xFEFF                    )            ,'general_prohibited' => array(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19                    ,20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32 ,33, 34, 35, 36, 37, 38, 39, 40, 41, 42                    ,43, 44, 47, 59, 60, 61, 62, 63, 64, 91, 92, 93, 94, 95, 96, 123, 124, 125, 126, 127, 0x3002                    )            ,'prohibit' => array(0xA0, 0x340, 0x341, 0x6DD, 0x70F, 0x1680, 0x180E, 0x2000, 0x2001, 0x2002, 0x2003                    ,0x2004, 0x2005, 0x2006, 0x2007, 0x2008, 0x2009, 0x200A, 0x200B, 0x200C, 0x200D, 0x200E, 0x200F                    ,0x2028, 0x2029, 0x202A, 0x202B, 0x202C, 0x202D, 0x202E, 0x202F, 0x205F, 0x206A, 0x206B, 0x206C                    ,0x206D, 0x206E, 0x206F, 0x3000, 0xFEFF, 0xFFF9, 0xFFFA, 0xFFFB, 0xFFFC, 0xFFFD, 0xFFFE, 0xFFFF                    ,0x1FFFE, 0x1FFFF, 0x2FFFE, 0x2FFFF, 0x3FFFE, 0x3FFFF, 0x4FFFE, 0x4FFFF, 0x5FFFE, 0x5FFFF, 0x6FFFE                    ,0x6FFFF, 0x7FFFE, 0x7FFFF, 0x8FFFE, 0x8FFFF, 0x9FFFE, 0x9FFFF, 0xAFFFE, 0xAFFFF, 0xBFFFE, 0xBFFFF                    ,0xCFFFE, 0xCFFFF, 0xDFFFE, 0xDFFFF, 0xE0001, 0xEFFFE, 0xEFFFF, 0xFFFFE, 0xFFFFF, 0x10FFFE, 0x10FFFF                    )            ,'prohibit_ranges' => array(array(0x80, 0x9F), array(0x2060, 0x206F), array(0x1D173, 0x1D17A)                    ,array(0xE000, 0xF8FF) ,array(0xF0000, 0xFFFFD), array(0x100000, 0x10FFFD)                    ,array(0xFDD0, 0xFDEF), array(0xD800, 0xDFFF), array(0x2FF0, 0x2FFB), array(0xE0020, 0xE007F)                    )            ,'replacemaps' => array(0x41 => array(0x61), 0x42 => array(0x62), 0x43 => array(0x63)                    ,0x44 => array(0x64), 0x45 => array(0x65), 0x46 => array(0x66), 0x47 => array(0x67)                    ,0x48 => array(0x68), 0x49 => array(0x69), 0x4A => array(0x6A), 0x4B => array(0x6B)                    ,0x4C => array(0x6C), 0x4D => array(0x6D), 0x4E => array(0x6E), 0x4F => array(0x6F)                    ,0x50 => array(0x70), 0x51 => array(0x71), 0x52 => array(0x72), 0x53 => array(0x73)                    ,0x54 => array(0x74), 0x55 => array(0x75), 0x56 => array(0x76), 0x57 => array(0x77)                    ,0x58 => array(0x78), 0x59 => array(0x79), 0x5A => array(0x7A), 0xB5 => array(0x3BC)                    ,0xC0 => array(0xE0), 0xC1 => array(0xE1), 0xC2 => array(0xE2), 0xC3 => array(0xE3)                    ,0xC4 => array(0xE4), 0xC5 => array(0xE5), 0xC6 => array(0xE6), 0xC7 => array(0xE7)                    ,0xC8 => array(0xE8), 0xC9 => array(0xE9), 0xCA => array(0xEA), 0xCB => array(0xEB)                    ,0xCC => array(0xEC), 0xCD => array(0xED), 0xCE => array(0xEE), 0xCF => array(0xEF)                    ,0xD0 => array(0xF0), 0xD1 => array(0xF1), 0xD2 => array(0xF2), 0xD3 => array(0xF3)                    ,0xD4 => array(0xF4), 0xD5 => array(0xF5), 0xD6 => array(0xF6), 0xD8 => array(0xF8)                    ,0xD9 => array(0xF9), 0xDA => array(0xFA), 0xDB => array(0xFB), 0xDC => array(0xFC)                    ,0xDD => array(0xFD), 0xDE => array(0xFE), 0xDF => array(0x73, 0x73)                    ,0x100 => array(0x101), 0x102 => array(0x103), 0x104 => array(0x105)                    ,0x106 => array(0x107), 0x108 => array(0x109), 0x10A => array(0x10B)                    ,0x10C => array(0x10D), 0x10E => array(0x10F), 0x110 => array(0x111)                    ,0x112 => array(0x113), 0x114 => array(0x115), 0x116 => array(0x117)                    ,0x118 => array(0x119), 0x11A => array(0x11B), 0x11C => array(0x11D)                    ,0x11E => array(0x11F), 0x120 => array(0x121), 0x122 => array(0x123)                    ,0x124 => array(0x125), 0x126 => array(0x127), 0x128 => array(0x129)                    ,0x12A => array(0x12B), 0x12C => array(0x12D), 0x12E => array(0x12F)                    ,0x130 => array(0x69, 0x307), 0x132 => array(0x133), 0x134 => array(0x135)                    ,0x136 => array(0x137), 0x139 => array(0x13A), 0x13B => array(0x13C)                    ,0x13D => array(0x13E), 0x13F => array(0x140), 0x141 => array(0x142)                    ,0x143 => array(0x144), 0x145 => array(0x146), 0x147 => array(0x148)                    ,0x149 => array(0x2BC, 0x6E), 0x14A => array(0x14B), 0x14C => array(0x14D)                    ,0x14E => array(0x14F), 0x150 => array(0x151), 0x152 => array(0x153)                    ,0x154 => array(0x155), 0x156 => array(0x157), 0x158 => array(0x159)                    ,0x15A => array(0x15B), 0x15C => array(0x15D), 0x15E => array(0x15F)                    ,0x160 => array(0x161), 0x162 => array(0x163), 0x164 => array(0x165)                    ,0x166 => array(0x167), 0x168 => array(0x169), 0x16A => array(0x16B)                    ,0x16C => array(0x16D), 0x16E => array(0x16F), 0x170 => array(0x171)                    ,0x172 => array(0x173), 0x174 => array(0x175), 0x176 => array(0x177)                    ,0x178 => array(0xFF), 0x179 => array(0x17A), 0x17B => array(0x17C)                    ,0x17D => array(0x17E), 0x17F => array(0x73), 0x181 => array(0x253)                    ,0x182 => array(0x183), 0x184 => array(0x185), 0x186 => array(0x254)                    ,0x187 => array(0x188), 0x189 => array(0x256), 0x18A => array(0x257)                    ,0x18B => array(0x18C), 0x18E => array(0x1DD), 0x18F => array(0x259)                    ,0x190 => array(0x25B), 0x191 => array(0x192), 0x193 => array(0x260)                    ,0x194 => array(0x263), 0x196 => array(0x269), 0x197 => array(0x268)                    ,0x198 => array(0x199), 0x19C => array(0x26F), 0x19D => array(0x272)                    ,0x19F => array(0x275), 0x1A0 => array(0x1A1), 0x1A2 => array(0x1A3)                    ,0x1A4 => array(0x1A5), 0x1A6 => array(0x280), 0x1A7 => array(0x1A8)                    ,0x1A9 => array(0x283), 0x1AC => array(0x1AD), 0x1AE => array(0x288)                    ,0x1AF => array(0x1B0), 0x1B1 => array(0x28A), 0x1B2 => array(0x28B)                    ,0x1B3 => array(0x1B4), 0x1B5 => array(0x1B6), 0x1B7 => array(0x292)                    ,0x1B8 => array(0x1B9), 0x1BC => array(0x1BD), 0x1C4 => array(0x1C6)                    ,0x1C5 => array(0x1C6), 0x1C7 => array(0x1C9), 0x1C8 => array(0x1C9)                    ,0x1CA => array(0x1CC), 0x1CB => array(0x1CC), 0x1CD => array(0x1CE)                    ,0x1CF => array(0x1D0), 0x1D1   => array(0x1D2), 0x1D3   => array(0x1D4)                    ,0x1D5   => array(0x1D6), 0x1D7   => array(0x1D8), 0x1D9   => array(0x1DA)                    ,0x1DB   => array(0x1DC), 0x1DE   => array(0x1DF), 0x1E0   => array(0x1E1)                    ,0x1E2   => array(0x1E3), 0x1E4   => array(0x1E5), 0x1E6   => array(0x1E7)                    ,0x1E8   => array(0x1E9), 0x1EA   => array(0x1EB), 0x1EC   => array(0x1ED)                    ,0x1EE   => array(0x1EF), 0x1F0   => array(0x6A, 0x30C), 0x1F1   => array(0x1F3)                    ,0x1F2   => array(0x1F3), 0x1F4   => array(0x1F5), 0x1F6   => array(0x195)                    ,0x1F7   => array(0x1BF), 0x1F8   => array(0x1F9), 0x1FA   => array(0x1FB)                    ,0x1FC   => array(0x1FD), 0x1FE   => array(0x1FF), 0x200   => array(0x201)                    ,0x202   => array(0x203), 0x204   => array(0x205), 0x206   => array(0x207)                    ,0x208   => array(0x209), 0x20A   => array(0x20B), 0x20C   => array(0x20D)                    ,0x20E   => array(0x20F), 0x210   => array(0x211), 0x212   => array(0x213)                    ,0x214   => array(0x215), 0x216   => array(0x217), 0x218   => array(0x219)                    ,0x21A   => array(0x21B), 0x21C   => array(0x21D), 0x21E   => array(0x21F)                    ,0x220   => array(0x19E), 0x222   => array(0x223), 0x224   => array(0x225)                    ,0x226   => array(0x227), 0x228   => array(0x229), 0x22A   => array(0x22B)                    ,0x22C   => array(0x22D), 0x22E   => array(0x22F), 0x230   => array(0x231)                    ,0x232   => array(0x233), 0x345   => array(0x3B9), 0x37A   => array(0x20, 0x3B9)                    ,0x386   => array(0x3AC), 0x388   => array(0x3AD), 0x389   => array(0x3AE)                    ,0x38A   => array(0x3AF), 0x38C   => array(0x3CC), 0x38E   => array(0x3CD)                    ,0x38F   => array(0x3CE), 0x390   => array(0x3B9, 0x308, 0x301)                    ,0x391   => array(0x3B1), 0x392   => array(0x3B2), 0x393   => array(0x3B3)                    ,0x394   => array(0x3B4), 0x395   => array(0x3B5), 0x396   => array(0x3B6)                    ,0x397   => array(0x3B7), 0x398   => array(0x3B8), 0x399   => array(0x3B9)                    ,0x39A   => array(0x3BA), 0x39B   => array(0x3BB), 0x39C   => array(0x3BC)                    ,0x39D   => array(0x3BD), 0x39E   => array(0x3BE), 0x39F   => array(0x3BF)                    ,0x3A0   => array(0x3C0), 0x3A1   => array(0x3C1), 0x3A3   => array(0x3C3)                    ,0x3A4   => array(0x3C4), 0x3A5   => array(0x3C5), 0x3A6   => array(0x3C6)                    ,0x3A7   => array(0x3C7), 0x3A8   => array(0x3C8), 0x3A9   => array(0x3C9)                    ,0x3AA   => array(0x3CA), 0x3AB   => array(0x3CB), 0x3B0   => array(0x3C5, 0x308, 0x301)                    ,0x3C2   => array(0x3C3), 0x3D0   => array(0x3B2), 0x3D1   => array(0x3B8)                    ,0x3D2   => array(0x3C5), 0x3D3   => array(0x3CD), 0x3D4   => array(0x3CB)                    ,0x3D5   => array(0x3C6), 0x3D6   => array(0x3C0), 0x3D8   => array(0x3D9)                    ,0x3DA   => array(0x3DB), 0x3DC   => array(0x3DD), 0x3DE   => array(0x3DF)                    ,0x3E0   => array(0x3E1), 0x3E2   => array(0x3E3), 0x3E4   => array(0x3E5)                    ,0x3E6   => array(0x3E7), 0x3E8   => array(0x3E9), 0x3EA   => array(0x3EB)                    ,0x3EC   => array(0x3ED), 0x3EE   => array(0x3EF), 0x3F0   => array(0x3BA)                    ,0x3F1   => array(0x3C1), 0x3F2   => array(0x3C3), 0x3F4   => array(0x3B8)                    ,0x3F5   => array(0x3B5), 0x400   => array(0x450), 0x401   => array(0x451)                    ,0x402   => array(0x452), 0x403   => array(0x453), 0x404   => array(0x454)                    ,0x405   => array(0x455), 0x406   => array(0x456), 0x407   => array(0x457)                    ,0x408   => array(0x458), 0x409   => array(0x459), 0x40A   => array(0x45A)                    ,0x40B   => array(0x45B), 0x40C   => array(0x45C), 0x40D   => array(0x45D)                    ,0x40E   => array(0x45E), 0x40F   => array(0x45F), 0x410   => array(0x430)                    ,0x411   => array(0x431), 0x412   => array(0x432), 0x413   => array(0x433)                    ,0x414   => array(0x434), 0x415   => array(0x435), 0x416   => array(0x436)                    ,0x417   => array(0x437), 0x418   => array(0x438), 0x419   => array(0x439)                    ,0x41A   => array(0x43A), 0x41B   => array(0x43B), 0x41C   => array(0x43C)                    ,0x41D   => array(0x43D), 0x41E   => array(0x43E), 0x41F   => array(0x43F)                    ,0x420   => array(0x440), 0x421   => array(0x441), 0x422   => array(0x442)                    ,0x423   => array(0x443), 0x424   => array(0x444), 0x425   => array(0x445)                    ,0x426   => array(0x446), 0x427   => array(0x447), 0x428   => array(0x448)                    ,0x429   => array(0x449), 0x42A   => array(0x44A), 0x42B   => array(0x44B)                    ,0x42C   => array(0x44C), 0x42D   => array(0x44D), 0x42E   => array(0x44E)                    ,0x42F   => array(0x44F), 0x460   => array(0x461), 0x462   => array(0x463)                    ,0x464   => array(0x465), 0x466   => array(0x467), 0x468   => array(0x469)                    ,0x46A   => array(0x46B), 0x46C   => array(0x46D), 0x46E   => array(0x46F)                    ,0x470   => array(0x471), 0x472   => array(0x473), 0x474   => array(0x475)                    ,0x476   => array(0x477), 0x478   => array(0x479), 0x47A   => array(0x47B)                    ,0x47C   => array(0x47D), 0x47E   => array(0x47F), 0x480   => array(0x481)                    ,0x48A   => array(0x48B), 0x48C   => array(0x48D), 0x48E   => array(0x48F)                    ,0x490   => array(0x491), 0x492   => array(0x493), 0x494   => array(0x495)                    ,0x496   => array(0x497), 0x498   => array(0x499), 0x49A   => array(0x49B)                    ,0x49C   => array(0x49D), 0x49E   => array(0x49F), 0x4A0   => array(0x4A1)                    ,0x4A2   => array(0x4A3), 0x4A4   => array(0x4A5), 0x4A6   => array(0x4A7)                    ,0x4A8   => array(0x4A9), 0x4AA   => array(0x4AB), 0x4AC   => array(0x4AD)                    ,0x4AE   => array(0x4AF), 0x4B0   => array(0x4B1), 0x4B2   => array(0x4B3)                    ,0x4B4   => array(0x4B5), 0x4B6   => array(0x4B7), 0x4B8   => array(0x4B9)                    ,0x4BA   => array(0x4BB), 0x4BC   => array(0x4BD), 0x4BE   => array(0x4BF)                    ,0x4C1   => array(0x4C2), 0x4C3   => array(0x4C4), 0x4C5   => array(0x4C6)                    ,0x4C7   => array(0x4C8), 0x4C9   => array(0x4CA), 0x4CB   => array(0x4CC)                    ,0x4CD   => array(0x4CE), 0x4D0   => array(0x4D1), 0x4D2   => array(0x4D3)                    ,0x4D4   => array(0x4D5), 0x4D6   => array(0x4D7), 0x4D8   => array(0x4D9)                    ,0x4DA   => array(0x4DB), 0x4DC   => array(0x4DD), 0x4DE   => array(0x4DF)                    ,0x4E0   => array(0x4E1), 0x4E2   => array(0x4E3), 0x4E4   => array(0x4E5)                    ,0x4E6   => array(0x4E7), 0x4E8   => array(0x4E9), 0x4EA   => array(0x4EB)                    ,0x4EC   => array(0x4ED), 0x4EE   => array(0x4EF), 0x4F0   => array(0x4F1)                    ,0x4F2   => array(0x4F3), 0x4F4   => array(0x4F5), 0x4F8   => array(0x4F9)                    ,0x500   => array(0x501), 0x502   => array(0x503), 0x504   => array(0x505)                    ,0x506   => array(0x507), 0x508   => array(0x509), 0x50A   => array(0x50B)                    ,0x50C   => array(0x50D), 0x50E   => array(0x50F), 0x531   => array(0x561)                    ,0x532   => array(0x562), 0x533   => array(0x563), 0x534   => array(0x564)                    ,0x535   => array(0x565), 0x536   => array(0x566), 0x537   => array(0x567)                    ,0x538   => array(0x568), 0x539   => array(0x569), 0x53A   => array(0x56A)                    ,0x53B   => array(0x56B), 0x53C   => array(0x56C), 0x53D   => array(0x56D)                    ,0x53E   => array(0x56E), 0x53F   => array(0x56F), 0x540   => array(0x570)                    ,0x541   => array(0x571), 0x542   => array(0x572), 0x543   => array(0x573)                    ,0x544   => array(0x574), 0x545   => array(0x575), 0x546   => array(0x576)                    ,0x547   => array(0x577), 0x548   => array(0x578), 0x549   => array(0x579)                    ,0x54A   => array(0x57A), 0x54B   => array(0x57B), 0x54C   => array(0x57C)                    ,0x54D   => array(0x57D), 0x54E   => array(0x57E), 0x54F   => array(0x57F)                    ,0x550   => array(0x580), 0x551   => array(0x581), 0x552   => array(0x582)                    ,0x553   => array(0x583), 0x554   => array(0x584), 0x555   => array(0x585)                    ,0x556 => array(0x586), 0x587 => array(0x565, 0x582), 0xE33 => array(0xE4D, 0xE32)                    ,0x1E00  => array(0x1E01), 0x1E02  => array(0x1E03), 0x1E04  => array(0x1E05)                    ,0x1E06  => array(0x1E07), 0x1E08  => array(0x1E09), 0x1E0A  => array(0x1E0B)                    ,0x1E0C  => array(0x1E0D), 0x1E0E  => array(0x1E0F), 0x1E10  => array(0x1E11)                    ,0x1E12  => array(0x1E13), 0x1E14  => array(0x1E15), 0x1E16  => array(0x1E17)                    ,0x1E18  => array(0x1E19), 0x1E1A  => array(0x1E1B), 0x1E1C  => array(0x1E1D)                    ,0x1E1E  => array(0x1E1F), 0x1E20  => array(0x1E21), 0x1E22  => array(0x1E23)                    ,0x1E24  => array(0x1E25), 0x1E26  => array(0x1E27), 0x1E28  => array(0x1E29)                    ,0x1E2A  => array(0x1E2B), 0x1E2C  => array(0x1E2D), 0x1E2E  => array(0x1E2F)                    ,0x1E30  => array(0x1E31), 0x1E32  => array(0x1E33), 0x1E34  => array(0x1E35)                    ,0x1E36  => array(0x1E37), 0x1E38  => array(0x1E39), 0x1E3A  => array(0x1E3B)                    ,0x1E3C  => array(0x1E3D), 0x1E3E  => array(0x1E3F), 0x1E40  => array(0x1E41)                    ,0x1E42  => array(0x1E43), 0x1E44  => array(0x1E45), 0x1E46  => array(0x1E47)                    ,0x1E48  => array(0x1E49), 0x1E4A  => array(0x1E4B), 0x1E4C  => array(0x1E4D)                    ,0x1E4E  => array(0x1E4F), 0x1E50  => array(0x1E51), 0x1E52  => array(0x1E53)                    ,0x1E54  => array(0x1E55), 0x1E56  => array(0x1E57), 0x1E58  => array(0x1E59)                    ,0x1E5A  => array(0x1E5B), 0x1E5C  => array(0x1E5D), 0x1E5E  => array(0x1E5F)                    ,0x1E60  => array(0x1E61), 0x1E62  => array(0x1E63), 0x1E64  => array(0x1E65)                    ,0x1E66  => array(0x1E67), 0x1E68  => array(0x1E69), 0x1E6A  => array(0x1E6B)                    ,0x1E6C  => array(0x1E6D), 0x1E6E  => array(0x1E6F), 0x1E70  => array(0x1E71)                    ,0x1E72  => array(0x1E73), 0x1E74  => array(0x1E75), 0x1E76  => array(0x1E77)                    ,0x1E78  => array(0x1E79), 0x1E7A  => array(0x1E7B), 0x1E7C  => array(0x1E7D)                    ,0x1E7E  => array(0x1E7F), 0x1E80  => array(0x1E81), 0x1E82  => array(0x1E83)                    ,0x1E84  => array(0x1E85), 0x1E86  => array(0x1E87), 0x1E88  => array(0x1E89)                    ,0x1E8A  => array(0x1E8B), 0x1E8C  => array(0x1E8D), 0x1E8E  => array(0x1E8F)                    ,0x1E90  => array(0x1E91), 0x1E92  => array(0x1E93), 0x1E94  => array(0x1E95)                    ,0x1E96  => array(0x68, 0x331), 0x1E97  => array(0x74, 0x308), 0x1E98  => array(0x77, 0x30A)                    ,0x1E99  => array(0x79, 0x30A), 0x1E9A  => array(0x61, 0x2BE), 0x1E9B  => array(0x1E61)                    ,0x1EA0  => array(0x1EA1), 0x1EA2  => array(0x1EA3), 0x1EA4  => array(0x1EA5)                    ,0x1EA6  => array(0x1EA7), 0x1EA8  => array(0x1EA9), 0x1EAA  => array(0x1EAB)                    ,0x1EAC  => array(0x1EAD), 0x1EAE  => array(0x1EAF), 0x1EB0  => array(0x1EB1)                    ,0x1EB2  => array(0x1EB3), 0x1EB4  => array(0x1EB5), 0x1EB6  => array(0x1EB7)                    ,0x1EB8  => array(0x1EB9), 0x1EBA  => array(0x1EBB), 0x1EBC  => array(0x1EBD)                    ,0x1EBE  => array(0x1EBF), 0x1EC0  => array(0x1EC1), 0x1EC2  => array(0x1EC3)                    ,0x1EC4  => array(0x1EC5), 0x1EC6  => array(0x1EC7), 0x1EC8  => array(0x1EC9)                    ,0x1ECA  => array(0x1ECB), 0x1ECC  => array(0x1ECD), 0x1ECE  => array(0x1ECF)                    ,0x1ED0  => array(0x1ED1), 0x1ED2  => array(0x1ED3), 0x1ED4  => array(0x1ED5)                    ,0x1ED6  => array(0x1ED7), 0x1ED8  => array(0x1ED9), 0x1EDA  => array(0x1EDB)                    ,0x1EDC  => array(0x1EDD), 0x1EDE  => array(0x1EDF), 0x1EE0  => array(0x1EE1)                    ,0x1EE2  => array(0x1EE3), 0x1EE4  => array(0x1EE5), 0x1EE6  => array(0x1EE7)                    ,0x1EE8  => array(0x1EE9), 0x1EEA  => array(0x1EEB), 0x1EEC  => array(0x1EED)                    ,0x1EEE  => array(0x1EEF), 0x1EF0  => array(0x1EF1), 0x1EF2  => array(0x1EF3)                    ,0x1EF4  => array(0x1EF5), 0x1EF6  => array(0x1EF7), 0x1EF8  => array(0x1EF9)                    ,0x1F08  => array(0x1F00), 0x1F09  => array(0x1F01), 0x1F0A  => array(0x1F02)                    ,0x1F0B  => array(0x1F03), 0x1F0C  => array(0x1F04), 0x1F0D  => array(0x1F05)                    ,0x1F0E  => array(0x1F06), 0x1F0F  => array(0x1F07), 0x1F18  => array(0x1F10)                    ,0x1F19  => array(0x1F11), 0x1F1A  => array(0x1F12), 0x1F1B  => array(0x1F13)                    ,0x1F1C  => array(0x1F14), 0x1F1D  => array(0x1F15), 0x1F28  => array(0x1F20)                    ,0x1F29  => array(0x1F21), 0x1F2A  => array(0x1F22), 0x1F2B  => array(0x1F23)                    ,0x1F2C  => array(0x1F24), 0x1F2D  => array(0x1F25), 0x1F2E  => array(0x1F26)                    ,0x1F2F  => array(0x1F27), 0x1F38  => array(0x1F30), 0x1F39  => array(0x1F31)                    ,0x1F3A  => array(0x1F32), 0x1F3B  => array(0x1F33), 0x1F3C  => array(0x1F34)                    ,0x1F3D  => array(0x1F35), 0x1F3E  => array(0x1F36), 0x1F3F  => array(0x1F37)                    ,0x1F48  => array(0x1F40), 0x1F49  => array(0x1F41), 0x1F4A  => array(0x1F42)                    ,0x1F4B  => array(0x1F43), 0x1F4C  => array(0x1F44), 0x1F4D  => array(0x1F45)                    ,0x1F50  => array(0x3C5, 0x313), 0x1F52  => array(0x3C5, 0x313, 0x300)                    ,0x1F54  => array(0x3C5, 0x313, 0x301), 0x1F56  => array(0x3C5, 0x313, 0x342)                    ,0x1F59  => array(0x1F51), 0x1F5B  => array(0x1F53), 0x1F5D  => array(0x1F55)                    ,0x1F5F  => array(0x1F57), 0x1F68  => array(0x1F60), 0x1F69  => array(0x1F61)                    ,0x1F6A  => array(0x1F62), 0x1F6B  => array(0x1F63), 0x1F6C  => array(0x1F64)                    ,0x1F6D  => array(0x1F65), 0x1F6E  => array(0x1F66), 0x1F6F  => array(0x1F67)                    ,0x1F80  => array(0x1F00, 0x3B9), 0x1F81  => array(0x1F01, 0x3B9)                    ,0x1F82  => array(0x1F02, 0x3B9), 0x1F83  => array(0x1F03, 0x3B9)                    ,0x1F84  => array(0x1F04, 0x3B9), 0x1F85  => array(0x1F05, 0x3B9)                    ,0x1F86  => array(0x1F06, 0x3B9), 0x1F87  => array(0x1F07, 0x3B9)                    ,0x1F88  => array(0x1F00, 0x3B9), 0x1F89  => array(0x1F01, 0x3B9)                    ,0x1F8A  => array(0x1F02, 0x3B9), 0x1F8B  => array(0x1F03, 0x3B9)                    ,0x1F8C  => array(0x1F04, 0x3B9), 0x1F8D  => array(0x1F05, 0x3B9)                    ,0x1F8E  => array(0x1F06, 0x3B9), 0x1F8F  => array(0x1F07, 0x3B9)                    ,0x1F90  => array(0x1F20, 0x3B9), 0x1F91  => array(0x1F21, 0x3B9)                    ,0x1F92  => array(0x1F22, 0x3B9), 0x1F93  => array(0x1F23, 0x3B9)                    ,0x1F94  => array(0x1F24, 0x3B9), 0x1F95  => array(0x1F25, 0x3B9)                    ,0x1F96  => array(0x1F26, 0x3B9), 0x1F97  => array(0x1F27, 0x3B9)                    ,0x1F98  => array(0x1F20, 0x3B9), 0x1F99  => array(0x1F21, 0x3B9)                    ,0x1F9A  => array(0x1F22, 0x3B9), 0x1F9B  => array(0x1F23, 0x3B9)                    ,0x1F9C  => array(0x1F24, 0x3B9), 0x1F9D  => array(0x1F25, 0x3B9)                    ,0x1F9E  => array(0x1F26, 0x3B9), 0x1F9F  => array(0x1F27, 0x3B9)                    ,0x1FA0  => array(0x1F60, 0x3B9), 0x1FA1  => array(0x1F61, 0x3B9)                    ,0x1FA2  => array(0x1F62, 0x3B9), 0x1FA3  => array(0x1F63, 0x3B9)                    ,0x1FA4  => array(0x1F64, 0x3B9), 0x1FA5  => array(0x1F65, 0x3B9)                    ,0x1FA6  => array(0x1F66, 0x3B9), 0x1FA7  => array(0x1F67, 0x3B9)                    ,0x1FA8  => array(0x1F60, 0x3B9), 0x1FA9  => array(0x1F61, 0x3B9)                    ,0x1FAA  => array(0x1F62, 0x3B9), 0x1FAB  => array(0x1F63, 0x3B9)                    ,0x1FAC  => array(0x1F64, 0x3B9), 0x1FAD  => array(0x1F65, 0x3B9)                    ,0x1FAE  => array(0x1F66, 0x3B9), 0x1FAF  => array(0x1F67, 0x3B9)                    ,0x1FB2  => array(0x1F70, 0x3B9), 0x1FB3  => array(0x3B1, 0x3B9)                    ,0x1FB4  => array(0x3AC, 0x3B9), 0x1FB6  => array(0x3B1, 0x342)                    ,0x1FB7  => array(0x3B1, 0x342, 0x3B9), 0x1FB8  => array(0x1FB0)                    ,0x1FB9  => array(0x1FB1), 0x1FBA  => array(0x1F70), 0x1FBB  => array(0x1F71)                    ,0x1FBC  => array(0x3B1, 0x3B9), 0x1FBE  => array(0x3B9)                    ,0x1FC2  => array(0x1F74, 0x3B9), 0x1FC3  => array(0x3B7, 0x3B9)                    ,0x1FC4  => array(0x3AE, 0x3B9), 0x1FC6  => array(0x3B7, 0x342)                    ,0x1FC7  => array(0x3B7, 0x342, 0x3B9), 0x1FC8  => array(0x1F72)                    ,0x1FC9  => array(0x1F73), 0x1FCA  => array(0x1F74), 0x1FCB  => array(0x1F75)                    ,0x1FCC  => array(0x3B7, 0x3B9), 0x1FD2  => array(0x3B9, 0x308, 0x300)                    ,0x1FD3  => array(0x3B9, 0x308, 0x301), 0x1FD6  => array(0x3B9, 0x342)                    ,0x1FD7  => array(0x3B9, 0x308, 0x342), 0x1FD8  => array(0x1FD0)                    ,0x1FD9  => array(0x1FD1), 0x1FDA  => array(0x1F76)                    ,0x1FDB  => array(0x1F77), 0x1FE2  => array(0x3C5, 0x308, 0x300)                    ,0x1FE3  => array(0x3C5, 0x308, 0x301), 0x1FE4  => array(0x3C1, 0x313)                    ,0x1FE6  => array(0x3C5, 0x342), 0x1FE7  => array(0x3C5, 0x308, 0x342)                    ,0x1FE8  => array(0x1FE0), 0x1FE9  => array(0x1FE1)                    ,0x1FEA  => array(0x1F7A), 0x1FEB  => array(0x1F7B)                    ,0x1FEC  => array(0x1FE5), 0x1FF2  => array(0x1F7C, 0x3B9)                    ,0x1FF3  => array(0x3C9, 0x3B9), 0x1FF4  => array(0x3CE, 0x3B9)                    ,0x1FF6  => array(0x3C9, 0x342), 0x1FF7  => array(0x3C9, 0x342, 0x3B9)                    ,0x1FF8  => array(0x1F78), 0x1FF9  => array(0x1F79), 0x1FFA  => array(0x1F7C)                    ,0x1FFB  => array(0x1F7D), 0x1FFC  => array(0x3C9, 0x3B9)                    ,0x20A8  => array(0x72, 0x73), 0x2102  => array(0x63), 0x2103  => array(0xB0, 0x63)                    ,0x2107  => array(0x25B), 0x2109  => array(0xB0, 0x66), 0x210B  => array(0x68)                    ,0x210C  => array(0x68), 0x210D  => array(0x68), 0x2110  => array(0x69)                    ,0x2111  => array(0x69), 0x2112  => array(0x6C), 0x2115  => array(0x6E)                    ,0x2116  => array(0x6E, 0x6F), 0x2119  => array(0x70), 0x211A  => array(0x71)                    ,0x211B  => array(0x72), 0x211C  => array(0x72), 0x211D  => array(0x72)                    ,0x2120  => array(0x73, 0x6D), 0x2121  => array(0x74, 0x65, 0x6C)                    ,0x2122  => array(0x74, 0x6D), 0x2124  => array(0x7A), 0x2126  => array(0x3C9)                    ,0x2128  => array(0x7A), 0x212A  => array(0x6B), 0x212B  => array(0xE5)                    ,0x212C  => array(0x62), 0x212D  => array(0x63), 0x2130  => array(0x65)                    ,0x2131  => array(0x66), 0x2133  => array(0x6D), 0x213E  => array(0x3B3)                    ,0x213F  => array(0x3C0), 0x2145  => array(0x64) ,0x2160  => array(0x2170)                    ,0x2161  => array(0x2171), 0x2162  => array(0x2172), 0x2163  => array(0x2173)                    ,0x2164  => array(0x2174), 0x2165  => array(0x2175), 0x2166  => array(0x2176)                    ,0x2167  => array(0x2177), 0x2168  => array(0x2178), 0x2169  => array(0x2179)                    ,0x216A  => array(0x217A), 0x216B  => array(0x217B), 0x216C  => array(0x217C)                    ,0x216D  => array(0x217D), 0x216E  => array(0x217E), 0x216F  => array(0x217F)                    ,0x24B6  => array(0x24D0), 0x24B7  => array(0x24D1), 0x24B8  => array(0x24D2)                    ,0x24B9  => array(0x24D3), 0x24BA  => array(0x24D4), 0x24BB  => array(0x24D5)                    ,0x24BC  => array(0x24D6), 0x24BD  => array(0x24D7), 0x24BE  => array(0x24D8)                    ,0x24BF  => array(0x24D9), 0x24C0  => array(0x24DA), 0x24C1  => array(0x24DB)                    ,0x24C2  => array(0x24DC), 0x24C3  => array(0x24DD), 0x24C4  => array(0x24DE)                    ,0x24C5  => array(0x24DF), 0x24C6  => array(0x24E0), 0x24C7  => array(0x24E1)                    ,0x24C8  => array(0x24E2), 0x24C9  => array(0x24E3), 0x24CA  => array(0x24E4)                    ,0x24CB  => array(0x24E5), 0x24CC  => array(0x24E6), 0x24CD  => array(0x24E7)                    ,0x24CE  => array(0x24E8), 0x24CF  => array(0x24E9), 0x3371  => array(0x68, 0x70, 0x61)                    ,0x3373  => array(0x61, 0x75), 0x3375  => array(0x6F, 0x76)                    ,0x3380  => array(0x70, 0x61), 0x3381  => array(0x6E, 0x61)                    ,0x3382  => array(0x3BC, 0x61), 0x3383  => array(0x6D, 0x61)                    ,0x3384  => array(0x6B, 0x61), 0x3385  => array(0x6B, 0x62)                    ,0x3386  => array(0x6D, 0x62), 0x3387  => array(0x67, 0x62)                    ,0x338A  => array(0x70, 0x66), 0x338B  => array(0x6E, 0x66)                    ,0x338C  => array(0x3BC, 0x66), 0x3390  => array(0x68, 0x7A)                    ,0x3391  => array(0x6B, 0x68, 0x7A), 0x3392  => array(0x6D, 0x68, 0x7A)                    ,0x3393  => array(0x67, 0x68, 0x7A), 0x3394  => array(0x74, 0x68, 0x7A)                    ,0x33A9  => array(0x70, 0x61), 0x33AA  => array(0x6B, 0x70, 0x61)                    ,0x33AB  => array(0x6D, 0x70, 0x61), 0x33AC  => array(0x67, 0x70, 0x61)                    ,0x33B4  => array(0x70, 0x76), 0x33B5  => array(0x6E, 0x76)                    ,0x33B6  => array(0x3BC, 0x76), 0x33B7  => array(0x6D, 0x76)                    ,0x33B8  => array(0x6B, 0x76), 0x33B9  => array(0x6D, 0x76)                    ,0x33BA  => array(0x70, 0x77), 0x33BB  => array(0x6E, 0x77)                    ,0x33BC  => array(0x3BC, 0x77), 0x33BD  => array(0x6D, 0x77)                    ,0x33BE  => array(0x6B, 0x77), 0x33BF  => array(0x6D, 0x77)                    ,0x33C0  => array(0x6B, 0x3C9), 0x33C1  => array(0x6D, 0x3C9) /*                    ,0x33C2  => array(0x61, 0x2E, 0x6D, 0x2E) */                    ,0x33C3  => array(0x62, 0x71), 0x33C6  => array(0x63, 0x2215, 0x6B, 0x67)                    ,0x33C7  => array(0x63, 0x6F, 0x2E), 0x33C8  => array(0x64, 0x62)                    ,0x33C9  => array(0x67, 0x79), 0x33CB  => array(0x68, 0x70)                    ,0x33CD  => array(0x6B, 0x6B), 0x33CE  => array(0x6B, 0x6D)                    ,0x33D7  => array(0x70, 0x68), 0x33D9  => array(0x70, 0x70, 0x6D)                    ,0x33DA  => array(0x70, 0x72), 0x33DC  => array(0x73, 0x76)                    ,0x33DD  => array(0x77, 0x62), 0xFB00  => array(0x66, 0x66)                    ,0xFB01  => array(0x66, 0x69), 0xFB02  => array(0x66, 0x6C)                    ,0xFB03  => array(0x66, 0x66, 0x69), 0xFB04  => array(0x66, 0x66, 0x6C)                    ,0xFB05  => array(0x73, 0x74), 0xFB06  => array(0x73, 0x74)                    ,0xFB13  => array(0x574, 0x576), 0xFB14  => array(0x574, 0x565)                    ,0xFB15  => array(0x574, 0x56B), 0xFB16  => array(0x57E, 0x576)                    ,0xFB17  => array(0x574, 0x56D), 0xFF21  => array(0xFF41)                    ,0xFF22  => array(0xFF42), 0xFF23  => array(0xFF43), 0xFF24  => array(0xFF44)                    ,0xFF25  => array(0xFF45), 0xFF26  => array(0xFF46), 0xFF27  => array(0xFF47)                    ,0xFF28  => array(0xFF48), 0xFF29  => array(0xFF49), 0xFF2A  => array(0xFF4A)                    ,0xFF2B  => array(0xFF4B), 0xFF2C  => array(0xFF4C), 0xFF2D  => array(0xFF4D)                    ,0xFF2E  => array(0xFF4E), 0xFF2F  => array(0xFF4F), 0xFF30  => array(0xFF50)                    ,0xFF31  => array(0xFF51), 0xFF32  => array(0xFF52), 0xFF33  => array(0xFF53)                    ,0xFF34  => array(0xFF54), 0xFF35  => array(0xFF55), 0xFF36  => array(0xFF56)                    ,0xFF37  => array(0xFF57), 0xFF38  => array(0xFF58), 0xFF39  => array(0xFF59)                    ,0xFF3A  => array(0xFF5A), 0x10400 => array(0x10428), 0x10401 => array(0x10429)                    ,0x10402 => array(0x1042A), 0x10403 => array(0x1042B), 0x10404 => array(0x1042C)                    ,0x10405 => array(0x1042D), 0x10406 => array(0x1042E), 0x10407 => array(0x1042F)                    ,0x10408 => array(0x10430), 0x10409 => array(0x10431), 0x1040A => array(0x10432)                    ,0x1040B => array(0x10433), 0x1040C => array(0x10434), 0x1040D => array(0x10435)                    ,0x1040E => array(0x10436), 0x1040F => array(0x10437), 0x10410 => array(0x10438)                    ,0x10411 => array(0x10439), 0x10412 => array(0x1043A), 0x10413 => array(0x1043B)                    ,0x10414 => array(0x1043C), 0x10415 => array(0x1043D), 0x10416 => array(0x1043E)                    ,0x10417 => array(0x1043F), 0x10418 => array(0x10440), 0x10419 => array(0x10441)                    ,0x1041A => array(0x10442), 0x1041B => array(0x10443), 0x1041C => array(0x10444)                    ,0x1041D => array(0x10445), 0x1041E => array(0x10446), 0x1041F => array(0x10447)                    ,0x10420 => array(0x10448), 0x10421 => array(0x10449), 0x10422 => array(0x1044A)                    ,0x10423 => array(0x1044B), 0x10424 => array(0x1044C), 0x10425 => array(0x1044D)                    ,0x1D400 => array(0x61), 0x1D401 => array(0x62), 0x1D402 => array(0x63)                    ,0x1D403 => array(0x64), 0x1D404 => array(0x65), 0x1D405 => array(0x66)                    ,0x1D406 => array(0x67), 0x1D407 => array(0x68), 0x1D408 => array(0x69)                    ,0x1D409 => array(0x6A), 0x1D40A => array(0x6B), 0x1D40B => array(0x6C)                    ,0x1D40C => array(0x6D), 0x1D40D => array(0x6E), 0x1D40E => array(0x6F)                    ,0x1D40F => array(0x70), 0x1D410 => array(0x71), 0x1D411 => array(0x72)                    ,0x1D412 => array(0x73), 0x1D413 => array(0x74), 0x1D414 => array(0x75)                    ,0x1D415 => array(0x76), 0x1D416 => array(0x77), 0x1D417 => array(0x78)                    ,0x1D418 => array(0x79), 0x1D419 => array(0x7A), 0x1D434 => array(0x61)                    ,0x1D435 => array(0x62), 0x1D436 => array(0x63), 0x1D437 => array(0x64)                    ,0x1D438 => array(0x65), 0x1D439 => array(0x66), 0x1D43A => array(0x67)                    ,0x1D43B => array(0x68), 0x1D43C => array(0x69), 0x1D43D => array(0x6A)                    ,0x1D43E => array(0x6B), 0x1D43F => array(0x6C), 0x1D440 => array(0x6D)                    ,0x1D441 => array(0x6E), 0x1D442 => array(0x6F), 0x1D443 => array(0x70)                    ,0x1D444 => array(0x71), 0x1D445 => array(0x72), 0x1D446 => array(0x73)                    ,0x1D447 => array(0x74), 0x1D448 => array(0x75), 0x1D449 => array(0x76)                    ,0x1D44A => array(0x77), 0x1D44B => array(0x78), 0x1D44C => array(0x79)                    ,0x1D44D => array(0x7A), 0x1D468 => array(0x61), 0x1D469 => array(0x62)                    ,0x1D46A => array(0x63), 0x1D46B => array(0x64), 0x1D46C => array(0x65)                    ,0x1D46D => array(0x66), 0x1D46E => array(0x67), 0x1D46F => array(0x68)                    ,0x1D470 => array(0x69), 0x1D471 => array(0x6A), 0x1D472 => array(0x6B)                    ,0x1D473 => array(0x6C), 0x1D474 => array(0x6D), 0x1D475 => array(0x6E)                    ,0x1D476 => array(0x6F), 0x1D477 => array(0x70), 0x1D478 => array(0x71)                    ,0x1D479 => array(0x72), 0x1D47A => array(0x73), 0x1D47B => array(0x74)                    ,0x1D47C => array(0x75), 0x1D47D => array(0x76), 0x1D47E => array(0x77)                    ,0x1D47F => array(0x78), 0x1D480 => array(0x79), 0x1D481 => array(0x7A)                    ,0x1D49C => array(0x61), 0x1D49E => array(0x63), 0x1D49F => array(0x64)                    ,0x1D4A2 => array(0x67), 0x1D4A5 => array(0x6A), 0x1D4A6 => array(0x6B)                    ,0x1D4A9 => array(0x6E), 0x1D4AA => array(0x6F), 0x1D4AB => array(0x70)                    ,0x1D4AC => array(0x71), 0x1D4AE => array(0x73), 0x1D4AF => array(0x74)                    ,0x1D4B0 => array(0x75), 0x1D4B1 => array(0x76), 0x1D4B2 => array(0x77)                    ,0x1D4B3 => array(0x78), 0x1D4B4 => array(0x79), 0x1D4B5 => array(0x7A)                    ,0x1D4D0 => array(0x61), 0x1D4D1 => array(0x62), 0x1D4D2 => array(0x63)                    ,0x1D4D3 => array(0x64), 0x1D4D4 => array(0x65), 0x1D4D5 => array(0x66)                    ,0x1D4D6 => array(0x67), 0x1D4D7 => array(0x68), 0x1D4D8 => array(0x69)                    ,0x1D4D9 => array(0x6A), 0x1D4DA => array(0x6B), 0x1D4DB => array(0x6C)                    ,0x1D4DC => array(0x6D), 0x1D4DD => array(0x6E), 0x1D4DE => array(0x6F)                    ,0x1D4DF => array(0x70), 0x1D4E0 => array(0x71), 0x1D4E1 => array(0x72)                    ,0x1D4E2 => array(0x73), 0x1D4E3 => array(0x74), 0x1D4E4 => array(0x75)                    ,0x1D4E5 => array(0x76), 0x1D4E6 => array(0x77), 0x1D4E7 => array(0x78)                    ,0x1D4E8 => array(0x79), 0x1D4E9 => array(0x7A), 0x1D504 => array(0x61)                    ,0x1D505 => array(0x62), 0x1D507 => array(0x64), 0x1D508 => array(0x65)                    ,0x1D509 => array(0x66), 0x1D50A => array(0x67), 0x1D50D => array(0x6A)                    ,0x1D50E => array(0x6B), 0x1D50F => array(0x6C), 0x1D510 => array(0x6D)                    ,0x1D511 => array(0x6E), 0x1D512 => array(0x6F), 0x1D513 => array(0x70)                    ,0x1D514 => array(0x71), 0x1D516 => array(0x73), 0x1D517 => array(0x74)                    ,0x1D518 => array(0x75), 0x1D519 => array(0x76), 0x1D51A => array(0x77)                    ,0x1D51B => array(0x78), 0x1D51C => array(0x79), 0x1D538 => array(0x61)                    ,0x1D539 => array(0x62), 0x1D53B => array(0x64), 0x1D53C => array(0x65)                    ,0x1D53D => array(0x66), 0x1D53E => array(0x67), 0x1D540 => array(0x69)                    ,0x1D541 => array(0x6A), 0x1D542 => array(0x6B), 0x1D543 => array(0x6C)                    ,0x1D544 => array(0x6D), 0x1D546 => array(0x6F), 0x1D54A => array(0x73)                    ,0x1D54B => array(0x74), 0x1D54C => array(0x75), 0x1D54D => array(0x76)                    ,0x1D54E => array(0x77), 0x1D54F => array(0x78), 0x1D550 => array(0x79)                    ,0x1D56C => array(0x61), 0x1D56D => array(0x62), 0x1D56E => array(0x63)                    ,0x1D56F => array(0x64), 0x1D570 => array(0x65), 0x1D571 => array(0x66)                    ,0x1D572 => array(0x67), 0x1D573 => array(0x68), 0x1D574 => array(0x69)                    ,0x1D575 => array(0x6A), 0x1D576 => array(0x6B), 0x1D577 => array(0x6C)                    ,0x1D578 => array(0x6D), 0x1D579 => array(0x6E), 0x1D57A => array(0x6F)                    ,0x1D57B => array(0x70), 0x1D57C => array(0x71), 0x1D57D => array(0x72)                    ,0x1D57E => array(0x73), 0x1D57F => array(0x74), 0x1D580 => array(0x75)                    ,0x1D581 => array(0x76), 0x1D582 => array(0x77), 0x1D583 => array(0x78)                    ,0x1D584 => array(0x79), 0x1D585 => array(0x7A), 0x1D5A0 => array(0x61)                    ,0x1D5A1 => array(0x62), 0x1D5A2 => array(0x63), 0x1D5A3 => array(0x64)                    ,0x1D5A4 => array(0x65), 0x1D5A5 => array(0x66), 0x1D5A6 => array(0x67)                    ,0x1D5A7 => array(0x68), 0x1D5A8 => array(0x69), 0x1D5A9 => array(0x6A)                    ,0x1D5AA => array(0x6B), 0x1D5AB => array(0x6C), 0x1D5AC => array(0x6D)                    ,0x1D5AD => array(0x6E), 0x1D5AE => array(0x6F), 0x1D5AF => array(0x70)                    ,0x1D5B0 => array(0x71), 0x1D5B1 => array(0x72), 0x1D5B2 => array(0x73)                    ,0x1D5B3 => array(0x74), 0x1D5B4 => array(0x75), 0x1D5B5 => array(0x76)                    ,0x1D5B6 => array(0x77), 0x1D5B7 => array(0x78), 0x1D5B8 => array(0x79)                    ,0x1D5B9 => array(0x7A), 0x1D5D4 => array(0x61), 0x1D5D5 => array(0x62)                    ,0x1D5D6 => array(0x63), 0x1D5D7 => array(0x64), 0x1D5D8 => array(0x65)                    ,0x1D5D9 => array(0x66), 0x1D5DA => array(0x67), 0x1D5DB => array(0x68)                    ,0x1D5DC => array(0x69), 0x1D5DD => array(0x6A), 0x1D5DE => array(0x6B)                    ,0x1D5DF => array(0x6C), 0x1D5E0 => array(0x6D), 0x1D5E1 => array(0x6E)                    ,0x1D5E2 => array(0x6F), 0x1D5E3 => array(0x70), 0x1D5E4 => array(0x71)                    ,0x1D5E5 => array(0x72), 0x1D5E6 => array(0x73), 0x1D5E7 => array(0x74)                    ,0x1D5E8 => array(0x75), 0x1D5E9 => array(0x76), 0x1D5EA => array(0x77)                    ,0x1D5EB => array(0x78), 0x1D5EC => array(0x79), 0x1D5ED => array(0x7A)                    ,0x1D608 => array(0x61), 0x1D609 => array(0x62) ,0x1D60A => array(0x63)                    ,0x1D60B => array(0x64), 0x1D60C => array(0x65), 0x1D60D => array(0x66)                    ,0x1D60E => array(0x67), 0x1D60F => array(0x68), 0x1D610 => array(0x69)                    ,0x1D611 => array(0x6A), 0x1D612 => array(0x6B), 0x1D613 => array(0x6C)                    ,0x1D614 => array(0x6D), 0x1D615 => array(0x6E), 0x1D616 => array(0x6F)                    ,0x1D617 => array(0x70), 0x1D618 => array(0x71), 0x1D619 => array(0x72)                    ,0x1D61A => array(0x73), 0x1D61B => array(0x74), 0x1D61C => array(0x75)                    ,0x1D61D => array(0x76), 0x1D61E => array(0x77), 0x1D61F => array(0x78)                    ,0x1D620 => array(0x79), 0x1D621 => array(0x7A), 0x1D63C => array(0x61)                    ,0x1D63D => array(0x62), 0x1D63E => array(0x63), 0x1D63F => array(0x64)                    ,0x1D640 => array(0x65), 0x1D641 => array(0x66), 0x1D642 => array(0x67)                    ,0x1D643 => array(0x68), 0x1D644 => array(0x69), 0x1D645 => array(0x6A)                    ,0x1D646 => array(0x6B), 0x1D647 => array(0x6C), 0x1D648 => array(0x6D)                    ,0x1D649 => array(0x6E), 0x1D64A => array(0x6F), 0x1D64B => array(0x70)                    ,0x1D64C => array(0x71), 0x1D64D => array(0x72), 0x1D64E => array(0x73)                    ,0x1D64F => array(0x74), 0x1D650 => array(0x75), 0x1D651 => array(0x76)                    ,0x1D652 => array(0x77), 0x1D653 => array(0x78), 0x1D654 => array(0x79)                    ,0x1D655 => array(0x7A), 0x1D670 => array(0x61), 0x1D671 => array(0x62)                    ,0x1D672 => array(0x63), 0x1D673 => array(0x64), 0x1D674 => array(0x65)                    ,0x1D675 => array(0x66), 0x1D676 => array(0x67), 0x1D677 => array(0x68)                    ,0x1D678 => array(0x69), 0x1D679 => array(0x6A), 0x1D67A => array(0x6B)                    ,0x1D67B => array(0x6C), 0x1D67C => array(0x6D), 0x1D67D => array(0x6E)                    ,0x1D67E => array(0x6F), 0x1D67F => array(0x70), 0x1D680 => array(0x71)                    ,0x1D681 => array(0x72), 0x1D682 => array(0x73), 0x1D683 => array(0x74)                    ,0x1D684 => array(0x75), 0x1D685 => array(0x76), 0x1D686 => array(0x77)                    ,0x1D687 => array(0x78), 0x1D688 => array(0x79), 0x1D689 => array(0x7A)                    ,0x1D6A8 => array(0x3B1), 0x1D6A9 => array(0x3B2), 0x1D6AA => array(0x3B3)                    ,0x1D6AB => array(0x3B4), 0x1D6AC => array(0x3B5), 0x1D6AD => array(0x3B6)                    ,0x1D6AE => array(0x3B7), 0x1D6AF => array(0x3B8), 0x1D6B0 => array(0x3B9)                    ,0x1D6B1 => array(0x3BA), 0x1D6B2 => array(0x3BB), 0x1D6B3 => array(0x3BC)                    ,0x1D6B4 => array(0x3BD), 0x1D6B5 => array(0x3BE), 0x1D6B6 => array(0x3BF)                    ,0x1D6B7 => array(0x3C0), 0x1D6B8 => array(0x3C1), 0x1D6B9 => array(0x3B8)                    ,0x1D6BA => array(0x3C3), 0x1D6BB => array(0x3C4), 0x1D6BC => array(0x3C5)                    ,0x1D6BD => array(0x3C6), 0x1D6BE => array(0x3C7), 0x1D6BF => array(0x3C8)                    ,0x1D6C0 => array(0x3C9), 0x1D6D3 => array(0x3C3), 0x1D6E2 => array(0x3B1)                    ,0x1D6E3 => array(0x3B2), 0x1D6E4 => array(0x3B3), 0x1D6E5 => array(0x3B4)                    ,0x1D6E6 => array(0x3B5), 0x1D6E7 => array(0x3B6), 0x1D6E8 => array(0x3B7)                    ,0x1D6E9 => array(0x3B8), 0x1D6EA => array(0x3B9), 0x1D6EB => array(0x3BA)                    ,0x1D6EC => array(0x3BB), 0x1D6ED => array(0x3BC), 0x1D6EE => array(0x3BD)                    ,0x1D6EF => array(0x3BE), 0x1D6F0 => array(0x3BF), 0x1D6F1 => array(0x3C0)                    ,0x1D6F2 => array(0x3C1), 0x1D6F3 => array(0x3B8) ,0x1D6F4 => array(0x3C3)                    ,0x1D6F5 => array(0x3C4), 0x1D6F6 => array(0x3C5), 0x1D6F7 => array(0x3C6)                    ,0x1D6F8 => array(0x3C7), 0x1D6F9 => array(0x3C8) ,0x1D6FA => array(0x3C9)                    ,0x1D70D => array(0x3C3), 0x1D71C => array(0x3B1), 0x1D71D => array(0x3B2)                    ,0x1D71E => array(0x3B3), 0x1D71F => array(0x3B4), 0x1D720 => array(0x3B5)                    ,0x1D721 => array(0x3B6), 0x1D722 => array(0x3B7), 0x1D723 => array(0x3B8)                    ,0x1D724 => array(0x3B9), 0x1D725 => array(0x3BA), 0x1D726 => array(0x3BB)                    ,0x1D727 => array(0x3BC), 0x1D728 => array(0x3BD), 0x1D729 => array(0x3BE)                    ,0x1D72A => array(0x3BF), 0x1D72B => array(0x3C0), 0x1D72C => array(0x3C1)                    ,0x1D72D => array(0x3B8), 0x1D72E => array(0x3C3), 0x1D72F => array(0x3C4)                    ,0x1D730 => array(0x3C5), 0x1D731 => array(0x3C6), 0x1D732 => array(0x3C7)                    ,0x1D733 => array(0x3C8), 0x1D734 => array(0x3C9), 0x1D747 => array(0x3C3)                    ,0x1D756 => array(0x3B1), 0x1D757 => array(0x3B2), 0x1D758 => array(0x3B3)                    ,0x1D759 => array(0x3B4), 0x1D75A => array(0x3B5), 0x1D75B => array(0x3B6)                    ,0x1D75C => array(0x3B7), 0x1D75D => array(0x3B8), 0x1D75E => array(0x3B9)                    ,0x1D75F => array(0x3BA), 0x1D760 => array(0x3BB), 0x1D761 => array(0x3BC)                    ,0x1D762 => array(0x3BD), 0x1D763 => array(0x3BE), 0x1D764 => array(0x3BF)                    ,0x1D765 => array(0x3C0), 0x1D766 => array(0x3C1), 0x1D767 => array(0x3B8)                    ,0x1D768 => array(0x3C3), 0x1D769 => array(0x3C4), 0x1D76A => array(0x3C5)                    ,0x1D76B => array(0x3C6), 0x1D76C => array(0x3C7), 0x1D76D => array(0x3C8)                    ,0x1D76E => array(0x3C9), 0x1D781 => array(0x3C3), 0x1D790 => array(0x3B1)                    ,0x1D791 => array(0x3B2), 0x1D792 => array(0x3B3), 0x1D793 => array(0x3B4)                    ,0x1D794 => array(0x3B5), 0x1D795 => array(0x3B6), 0x1D796 => array(0x3B7)                    ,0x1D797 => array(0x3B8), 0x1D798 => array(0x3B9), 0x1D799 => array(0x3BA)                    ,0x1D79A => array(0x3BB), 0x1D79B => array(0x3BC), 0x1D79C => array(0x3BD)                    ,0x1D79D => array(0x3BE), 0x1D79E => array(0x3BF), 0x1D79F => array(0x3C0)                    ,0x1D7A0 => array(0x3C1), 0x1D7A1 => array(0x3B8), 0x1D7A2 => array(0x3C3)                    ,0x1D7A3 => array(0x3C4), 0x1D7A4 => array(0x3C5), 0x1D7A5 => array(0x3C6)                    ,0x1D7A6 => array(0x3C7), 0x1D7A7 => array(0x3C8), 0x1D7A8 => array(0x3C9)                    ,0x1D7BB => array(0x3C3), 0x3F9   => array(0x3C3), 0x1D2C  => array(0x61)                    ,0x1D2D  => array(0xE6), 0x1D2E  => array(0x62), 0x1D30  => array(0x64)                    ,0x1D31  => array(0x65), 0x1D32  => array(0x1DD), 0x1D33  => array(0x67)                    ,0x1D34  => array(0x68), 0x1D35  => array(0x69), 0x1D36  => array(0x6A)                    ,0x1D37  => array(0x6B), 0x1D38  => array(0x6C), 0x1D39  => array(0x6D)                    ,0x1D3A  => array(0x6E), 0x1D3C  => array(0x6F), 0x1D3D  => array(0x223)                    ,0x1D3E  => array(0x70), 0x1D3F  => array(0x72), 0x1D40  => array(0x74)                    ,0x1D41  => array(0x75), 0x1D42  => array(0x77), 0x213B  => array(0x66, 0x61, 0x78)                    ,0x3250  => array(0x70, 0x74, 0x65), 0x32CC  => array(0x68, 0x67)                    ,0x32CE  => array(0x65, 0x76), 0x32CF  => array(0x6C, 0x74, 0x64)                    ,0x337A  => array(0x69, 0x75), 0x33DE  => array(0x76, 0x2215, 0x6D)                    ,0x33DF  => array(0x61, 0x2215, 0x6D)                    )            ,'norm_combcls' => array(0x334   => 1,   0x335   => 1,   0x336   => 1,   0x337   => 1                    ,0x338   => 1,   0x93C   => 7,   0x9BC   => 7,   0xA3C   => 7,   0xABC   => 7                    ,0xB3C   => 7,   0xCBC   => 7,   0x1037  => 7,   0x3099  => 8,   0x309A  => 8                    ,0x94D   => 9,   0x9CD   => 9,   0xA4D   => 9,   0xACD   => 9,   0xB4D   => 9                    ,0xBCD   => 9,   0xC4D   => 9,   0xCCD   => 9,   0xD4D   => 9,   0xDCA   => 9                    ,0xE3A   => 9,   0xF84   => 9,   0x1039  => 9,   0x1714  => 9,   0x1734  => 9                    ,0x17D2  => 9,   0x5B0   => 10,  0x5B1   => 11,  0x5B2   => 12,  0x5B3   => 13                    ,0x5B4   => 14,  0x5B5   => 15,  0x5B6   => 16,  0x5B7   => 17,  0x5B8   => 18                    ,0x5B9   => 19,  0x5BB   => 20,  0x5Bc   => 21,  0x5BD   => 22,  0x5BF   => 23                    ,0x5C1   => 24,  0x5C2   => 25,  0xFB1E  => 26,  0x64B   => 27,  0x64C   => 28                    ,0x64D   => 29,  0x64E   => 30,  0x64F   => 31,  0x650   => 32,  0x651   => 33                    ,0x652   => 34,  0x670   => 35,  0x711   => 36,  0xC55   => 84,  0xC56   => 91                    ,0xE38   => 103, 0xE39   => 103, 0xE48   => 107, 0xE49   => 107, 0xE4A   => 107                    ,0xE4B   => 107, 0xEB8   => 118, 0xEB9   => 118, 0xEC8   => 122, 0xEC9   => 122                    ,0xECA   => 122, 0xECB   => 122, 0xF71   => 129, 0xF72   => 130, 0xF7A   => 130                    ,0xF7B   => 130, 0xF7C   => 130, 0xF7D   => 130, 0xF80   => 130, 0xF74   => 132                    ,0x321   => 202, 0x322   => 202, 0x327   => 202, 0x328   => 202, 0x31B   => 216                    ,0xF39   => 216, 0x1D165 => 216, 0x1D166 => 216, 0x1D16E => 216, 0x1D16F => 216                    ,0x1D170 => 216, 0x1D171 => 216, 0x1D172 => 216, 0x302A  => 218, 0x316   => 220                    ,0x317   => 220, 0x318   => 220, 0x319   => 220, 0x31C   => 220, 0x31D   => 220                    ,0x31E   => 220, 0x31F   => 220, 0x320   => 220, 0x323   => 220, 0x324   => 220                    ,0x325   => 220, 0x326   => 220, 0x329   => 220, 0x32A   => 220, 0x32B   => 220                    ,0x32C   => 220, 0x32D   => 220, 0x32E   => 220, 0x32F   => 220, 0x330   => 220                    ,0x331   => 220, 0x332   => 220, 0x333   => 220, 0x339   => 220, 0x33A   => 220                    ,0x33B   => 220, 0x33C   => 220, 0x347   => 220, 0x348   => 220, 0x349   => 220                    ,0x34D   => 220, 0x34E   => 220, 0x353   => 220, 0x354   => 220, 0x355   => 220                    ,0x356   => 220, 0x591   => 220, 0x596   => 220, 0x59B   => 220, 0x5A3   => 220                    ,0x5A4   => 220, 0x5A5   => 220, 0x5A6   => 220, 0x5A7   => 220, 0x5AA   => 220                    ,0x655   => 220, 0x656   => 220, 0x6E3   => 220, 0x6EA   => 220, 0x6ED   => 220                    ,0x731   => 220, 0x734   => 220, 0x737   => 220, 0x738   => 220, 0x739   => 220                    ,0x73B   => 220, 0x73C   => 220, 0x73E   => 220, 0x742   => 220, 0x744   => 220                    ,0x746   => 220, 0x748   => 220, 0x952   => 220, 0xF18   => 220, 0xF19   => 220                    ,0xF35   => 220, 0xF37   => 220, 0xFC6   => 220, 0x193B  => 220, 0x20E8  => 220                    ,0x1D17B => 220, 0x1D17C => 220, 0x1D17D => 220, 0x1D17E => 220, 0x1D17F => 220                    ,0x1D180 => 220, 0x1D181 => 220, 0x1D182 => 220, 0x1D18A => 220, 0x1D18B => 220                    ,0x59A   => 222, 0x5AD   => 222, 0x1929  => 222, 0x302D  => 222, 0x302E  => 224                    ,0x302F  => 224, 0x1D16D => 226, 0x5AE   => 228, 0x18A9  => 228, 0x302B  => 228                    ,0x300   => 230, 0x301   => 230, 0x302   => 230, 0x303   => 230, 0x304   => 230                    ,0x305   => 230, 0x306   => 230, 0x307   => 230, 0x308   => 230, 0x309   => 230                    ,0x30A   => 230, 0x30B   => 230, 0x30C   => 230, 0x30D   => 230, 0x30E   => 230                    ,0x30F   => 230, 0x310   => 230, 0x311   => 230, 0x312   => 230, 0x313   => 230                    ,0x314   => 230, 0x33D   => 230, 0x33E   => 230, 0x33F   => 230, 0x340   => 230                    ,0x341   => 230, 0x342   => 230, 0x343   => 230, 0x344   => 230, 0x346   => 230                    ,0x34A   => 230, 0x34B   => 230, 0x34C   => 230, 0x350   => 230, 0x351   => 230                    ,0x352   => 230, 0x357   => 230, 0x363   => 230, 0x364   => 230, 0x365   => 230                    ,0x366   => 230, 0x367   => 230, 0x368   => 230, 0x369   => 230, 0x36A   => 230                    ,0x36B   => 230, 0x36C   => 230, 0x36D   => 230, 0x36E   => 230, 0x36F   => 230                    ,0x483   => 230, 0x484   => 230, 0x485   => 230, 0x486   => 230, 0x592   => 230                    ,0x593   => 230, 0x594   => 230, 0x595   => 230, 0x597   => 230, 0x598   => 230                    ,0x599   => 230, 0x59C   => 230, 0x59D   => 230, 0x59E   => 230, 0x59F   => 230                    ,0x5A0   => 230, 0x5A1   => 230, 0x5A8   => 230, 0x5A9   => 230, 0x5AB   => 230                    ,0x5AC   => 230, 0x5AF   => 230, 0x5C4   => 230, 0x610   => 230, 0x611   => 230                    ,0x612   => 230, 0x613   => 230, 0x614   => 230, 0x615   => 230, 0x653   => 230                    ,0x654   => 230, 0x657   => 230, 0x658   => 230, 0x6D6   => 230, 0x6D7   => 230                    ,0x6D8   => 230, 0x6D9   => 230, 0x6DA   => 230, 0x6DB   => 230, 0x6DC   => 230                    ,0x6DF   => 230, 0x6E0   => 230, 0x6E1   => 230, 0x6E2   => 230, 0x6E4   => 230                    ,0x6E7   => 230, 0x6E8   => 230, 0x6EB   => 230, 0x6EC   => 230, 0x730   => 230                    ,0x732   => 230, 0x733   => 230, 0x735   => 230, 0x736   => 230, 0x73A   => 230                    ,0x73D   => 230, 0x73F   => 230, 0x740   => 230, 0x741   => 230, 0x743   => 230                    ,0x745   => 230, 0x747   => 230, 0x749   => 230, 0x74A   => 230, 0x951   => 230                    ,0x953   => 230, 0x954   => 230, 0xF82   => 230, 0xF83   => 230, 0xF86   => 230                    ,0xF87   => 230, 0x170D  => 230, 0x193A  => 230, 0x20D0  => 230, 0x20D1  => 230                    ,0x20D4  => 230, 0x20D5  => 230, 0x20D6  => 230, 0x20D7  => 230, 0x20DB  => 230                    ,0x20DC  => 230, 0x20E1  => 230, 0x20E7  => 230, 0x20E9  => 230, 0xFE20  => 230                    ,0xFE21  => 230, 0xFE22  => 230, 0xFE23  => 230, 0x1D185 => 230, 0x1D186 => 230                    ,0x1D187 => 230, 0x1D189 => 230, 0x1D188 => 230, 0x1D1AA => 230, 0x1D1AB => 230                    ,0x1D1AC => 230, 0x1D1AD => 230, 0x315   => 232, 0x31A   => 232, 0x302C  => 232                    ,0x35F   => 233, 0x362   => 233, 0x35D   => 234, 0x35E   => 234, 0x360   => 234                    ,0x361   => 234, 0x345   => 240                    )            );}?>
<?php/** * Loader class for inject CSS and JS files. * * @copyright (C) 2008-2011 PunBB, partially based on code (C) 2008-2009 FluxBB.org * @license http://www.gnu.org/licenses/gpl.html GPL version 2 or higher * @package PunBB */// JS groupsdefine('FORUM_JS_GROUP_SYSTEM', -100);define('FORUM_JS_GROUP_DEFAULT', 0);define('FORUM_JS_GROUP_COUNTER', 100);// CSS groupsdefine('FORUM_CSS_GROUP_SYSTEM', -100);define('FORUM_CSS_GROUP_DEFAULT', 0);class Loader{	private $libs;	// Class instance    private static $instance;	// Start of life	private function __construct() {		$this->libs = array();		$this->libs['js'] = array();		$this->libs['css'] = array();	}	// The end	public function __destruct() {		unset($this->libs);	}	// Singleton    public static function singleton() {        if (!isset(self::$instance)) {            $c = __CLASS__;            self::$instance = new $c;        }        return self::$instance;    }    // Clone forbiden    public function __clone() {        trigger_error('Clone is forbiden.', E_USER_ERROR);    }	// Add JS url or file to load	public function add_js($data = NULL, $options = NULL)	{		$return = ($hook = get_hook('ld_fn_add_js_start')) ? eval($hook) : null;		if ($return != null)			return $return;		if (is_null($options) || !is_array($options))		{			$options = array();		}		// Default options		$default_options = array(			// external, inline, file			'type'		=> array(				'default'	=> 'external',			),			//			'async'			=> array(				'default'	=> false,			),			//			'weight'		=> array(				'default'	=> 100,			),			//			'group'			=> array(				'default'	=> FORUM_JS_GROUP_DEFAULT,			),			//			'every_page'	=> array(				'default'	=> false,			),			//			'defer'			=> array(				'default'	=> false,			),			//			'preprocess'	=> array(				'default'	=> true,			)		);		$length = count($default_options);		$keys = array_keys($default_options);		for ($i = 0; $i < $length; $i++)		{			$key = $keys[$i];			if (!isset($options[$key]))			{				$default_options[$keys[$i]] = $default_options[$keys[$i]]['default'];				continue;			}			$default_options[$keys[$i]] = $options[$key];		}		// Check data  url or inline code		$default_options['data'] = forum_trim($data);		if (empty($default_options['data']) || utf8_strlen($default_options['data']) < 1)		{			return FALSE;		}		// Check type		if ($default_options['type'] == 'file')		{			$default_options['data'] = $this->create_url_from_file(forum_trim($data));		}		// Tweak weight		$default_options['weight'] += count($this->libs['js']) / 1000;		($hook = get_hook('ld_fn_add_js_pre_merge')) ? eval($hook) : null;		// Add to libs		if ($default_options['type'] != 'inline')		{			$this->libs['js'][$default_options['data']] = $default_options;		}		else		{			$this->libs['js'][] = $default_options;		}		($hook = get_hook('ld_fn_add_js_end')) ? eval($hook) : null;		return $this->libs['js'];	}	//	public function render_js()	{		$output = '';		$return = ($hook = get_hook('ld_fn_render_js_start')) ? eval($hook) : null;		if ($return != null)			return $return;		if (empty($this->libs['js']))			return $output;		// Sorts the scripts into correct order		uasort($this->libs['js'], array('Loader', 'sort_libs'));		return $this->render_js_labjs();	}	// Add CSS url or file to load	public function add_css($data = NULL, $options = NULL)	{		$return = ($hook = get_hook('ld_fn_add_css_start')) ? eval($hook) : null;		if ($return != null)			return $return;		if (is_null($options) || !is_array($options))		{			$options = array();		}		// Default options		$default_options = array(			//			'type'		=> array(				'default'	=> 'external',			),			//			'weight'		=> array(				'default'	=> 100,			),			//			'group'			=> array(				'default'	=> FORUM_CSS_GROUP_DEFAULT,			),			// screen, all, print			'media'			=> array(				'default'	=> 'all',			),			//			'every_page'	=> array(				'default'	=> false,			),			//			'preprocess'	=> array(				'default'	=> true,			),			'browsers'		=> array(				'default'	=> array(),			),		);		$length = count($default_options);		$keys = array_keys($default_options);		for ($i = 0; $i < $length; $i++)		{			$key = $keys[$i];			if (!isset($options[$key]))			{				$default_options[$keys[$i]] = $default_options[$keys[$i]]['default'];				continue;			}			$default_options[$keys[$i]] = $options[$key];		}		// Check data  url or inline code		$default_options['data'] = forum_trim($data);		if (empty($default_options['data']) || utf8_strlen($default_options['data']) < 1)		{			return FALSE;		}		// Check type		if ($default_options['type'] == 'file')		{			$default_options['data'] = $this->create_url_from_file(forum_trim($data));		}		// Tweak weight		$default_options['weight'] += count($this->libs['css']) / 1000;		($hook = get_hook('ld_fn_add_css_pre_merge')) ? eval($hook) : null;		// Add to libs		if ($default_options['type'] != 'inline')		{			$this->libs['css'][$default_options['data']] = $default_options;		}		else		{			$this->libs['css'][] = $default_options;		}		($hook = get_hook('ld_fn_add_css_end')) ? eval($hook) : null;		return $this->libs['css'];	}	// Render CSS libs	public function render_css()	{		$output = '';		$return = ($hook = get_hook('ld_fn_render_css_start')) ? eval($hook) : null;		if ($return != null)			return $return;		if (empty($this->libs['css']))			return $output;		// Sorts the scripts into correct order		uasort($this->libs['css'], array('Loader', 'sort_libs'));		return $this->render_css_simple();	}	// Render for CSS  use link tags method	private function render_css_simple()	{		$output = '';		$libs = $this->libs['css'];		$return = ($hook = get_hook('ld_fn_render_css_simple_start')) ? eval($hook) : null;		if ($return != null)			return $return;		foreach ($libs as $key => $lib)		{			if ($lib['type'] == 'inline')			{				$output .= forum_trim($this->check_conditional_comments($lib, '<style>'.$lib['data'].'</style>'))."\n";				unset($libs[$key]);				continue;			}			else if ($lib['type'] == 'external' || $lib['type'] == 'file')			{				$output .= forum_trim($this->check_conditional_comments($lib, '<link rel="stylesheet" type="text/css" media="'.$lib['media'].'" href="'.$lib['data'].'" />'))."\n";				unset($libs[$key]);				continue;			}		}		($hook = get_hook('ld_fn_render_css_simple_end')) ? eval($hook) : null;		return $output;	}	// Render for JS  use default script tags method	private function render_js_simple()	{		$output = '';		$libs = $this->libs['js'];		$return = ($hook = get_hook('ld_fn_render_js_simple_start')) ? eval($hook) : null;		if ($return != null)			return $return;		foreach ($libs as $key => $lib)		{			if ($lib['type'] == 'inline')			{				$output .= '<script>'.$lib['data'].'</script>'."\n";				unset($libs[$key]);				continue;			}			else if ($lib['type'] == 'external' || $lib['type'] == 'file')			{				$output .= '<script'.(($lib['async']) ? " async" : "").(($lib['defer']) ? " defer=\"true\"" : "").' src="'.$lib['data'].'"></script>'."\n";				unset($libs[$key]);				continue;			}		}		($hook = get_hook('ld_fn_render_js_simple_end')) ? eval($hook) : null;		return $output;	}	// Render for JS  use LABjs method	private function render_js_labjs()	{		$output_system = $output_counter = $output_default = '';		$libs = $this->libs['js'];		$return = ($hook = get_hook('ld_fn_render_js_labjs_start')) ? eval($hook) : null;		if ($return != null)			return $return;		foreach ($libs as $key => $lib)		{			if ($lib['data'] === FALSE)			{				continue;			}			if ($lib['type'] == 'inline')			{				if ($lib['group'] == FORUM_JS_GROUP_SYSTEM)				{					$output_system .= '<script>'.$lib['data'].'</script>'."\n";				}				else if ($lib['group'] == FORUM_JS_GROUP_COUNTER)				{					$output_counter .= '<script>'.$lib['data'].'</script>'."\n";				}				else				{					$output_default .= "\n\t".'.wait(function () { '.$lib['data'].' })';				}				unset($libs[$key]);				continue;			}			else if ($lib['type'] == 'external' || $lib['type'] == 'file')			{				if ($lib['group'] == FORUM_JS_GROUP_SYSTEM)				{					$output_system .= '<script src="'.$lib['data'].'"'.(($lib['async']) ? " async" : "").(($lib['defer']) ? " defer=\"true\"" : "").'></script>'."\n";				}				else if ($lib['group'] == FORUM_JS_GROUP_COUNTER)				{					$output_counter .= '<script src="'.$lib['data'].'"'.(($lib['async']) ? " async" : "").(($lib['defer']) ? " defer=\"true\"" : "").'></script>'."\n";				}				else				{					$output_default .= "\n\t".'.script("'.$lib['data'].'")';				}				unset($libs[$key]);				continue;			}		}		// Wrap default to LABjs parameters		if ($output_default != '')		{			$output_default = '<script>'."\n\t".'$LAB.setOptions({AlwaysPreserveOrder:true})'.$output_default.';'."\n".'</script>';		}		($hook = get_hook('ld_fn_render_js_labjs_end')) ? eval($hook) : null;		return $output_system.$output_default.$output_counter;	}	// Sort libs	private static function sort_libs($a, $b)	{		$return = ($hook = get_hook('ld_fn_sort_libs_start')) ? eval($hook) : null;		if ($return != null)			return $return;		// 1. Sort by group  system first		if ($a['group'] < $b['group'])		{			return -1;		}		elseif ($a['group'] > $b['group'])		{			return 1;		}		// 2. Within a group, order all infrequently needed, page-specific files after		// common files needed throughout the website. Separating this way allows for		// the aggregate file generated for all of the common files to be reused		// across a site visit without being cut by a page using a less common file.		elseif ($a['every_page'] && !$b['every_page'])		{			return -1;		}		elseif (!$a['every_page'] && $b['every_page'])		{			return 1;		}		// 3. Sort by weight		elseif ($a['weight'] < $b['weight'])		{			return -1;		}		elseif ($a['weight'] > $b['weight'])		{		    return 1;		}		else		{			return 0;		}	}	// Try a get uri scheme (based on Drupal)	private function get_file_uri_scheme($uri)	{		$position = strpos($uri, '://');		return $position ? substr($uri, 0, $position) : FALSE;	}	//	private function encode_path($path)	{		return str_replace('%2F', '/', rawurlencode($path));	}	// Creates a web-accessible URL for local file. (based on Drupal)	private function create_url_from_file($uri)	{		global $base_url;		$scheme = $this->get_file_uri_scheme($uri);		if (!$scheme)		{		    // Allow for:		    // - root-relative URIs (e.g. /foo.jpg in http://example.com/foo.jpg)		    // - protocol-relative URIs (e.g. //bar.jpg, which is expanded to		    //   http://example.com/bar.jpg by the browser when viewing a page over		    //   HTTP and to https://example.com/bar.jpg when viewing a HTTPS page)		    // Both types of relative URIs are characterized by a leading slash, hence		    // we can use a single check.		    if (utf8_substr($uri, 0, 1) == '/')		    {				return $uri;		    }		    else		    {				// If this is not a properly formatted stream, then it is a shipped file.				// Therefore, return the urlencoded URI with the base URL prepended.				return $base_url.'/'.$this->encode_path($uri);		    }		}		else if ($scheme == 'http' || $scheme == 'https')		{			// Check for http so that we don't have to implement getExternalUrl() for			// the http wrapper.			return $uri;		}		else		{			return FALSE;		}	}	// Helper func for render_*  wrap lib in IE-conditional comments	private function check_conditional_comments($element, $data)	{		$return = ($hook = get_hook('ld_fn_check_conditional_comments_start')) ? eval($hook) : null;		if ($return != null)			return $return;		$browsers = (isset($element['browsers']) && is_array($element['browsers'])) ? $element['browsers'] : array();		$browsers += array('IE' => TRUE, '!IE' => TRUE);		// If rendering in all browsers, no need for conditional comments.		if ($browsers['IE'] === true && $browsers['!IE'])		{			return $data;		}		// Determine the conditional comment expression for Internet Explorer to evaluate.		if ($browsers['IE'] === TRUE)		{			$expression = 'IE';		}		elseif ($browsers['IE'] === FALSE)		{			$expression = '!IE';		}		else		{			$expression = $browsers['IE'];		}		if (!$browsers['!IE'])		{			// "downlevel-hidden".			$data = "\n<!--[if $expression]>".$data."<![endif]-->";		}		else		{		    // "downlevel-revealed".		    $data = "\n<!--[if $expression]><!-->".$data."<!--<![endif]-->";		}		return $data;	}}// Create the loader adapter object$forum_loader = Loader::singleton();?>
<?php/** * Regular URL scheme. * * @copyright (C) 2008-2011 PunBB, partially based on code (C) 2008-2009 FluxBB.org * @license http://www.gnu.org/licenses/gpl.html GPL version 2 or higher * @package PunBB */// Make sure no one attempts to run this script "directly"if (!defined('FORUM'))	exit;// These are the regular, "non-SEF" URLs (you probably don't want to edit these)$forum_url = array(	'change_email'					=>	'profile.php?action=change_email&amp;id=$1',	'change_email_key'				=>	'profile.php?action=change_email&amp;id=$1&amp;key=$2',	'change_password'				=>	'profile.php?action=change_pass&amp;id=$1',	'change_password_key'			=>	'profile.php?action=change_pass&amp;id=$1&amp;key=$2',	'delete_user'					=>	'profile.php?action=delete_user&amp;id=$1',	'delete'						=>	'delete.php?id=$1',	'delete_avatar'					=>	'profile.php?action=delete_avatar&amp;id=$1&amp;csrf_token=$2',	'edit'							=>	'edit.php?id=$1',	'email'							=>	'misc.php?email=$1',	'forum'							=>	'viewforum.php?id=$1',	'forum_rss'						=>	'extern.php?action=feed&amp;fid=$1&amp;type=rss',	'forum_atom'					=>	'extern.php?action=feed&amp;fid=$1&amp;type=atom',	'help'							=>	'help.php?section=$1',	'index'							=>	'index.php',	'index_rss'						=>	'extern.php?action=feed&amp;type=rss',	'index_atom'					=>	'extern.php?action=feed&amp;type=atom',	'login'							=>	'login.php',	'logout'						=>	'login.php?action=out&amp;id=$1&amp;csrf_token=$2',	'mark_read'						=>	'misc.php?action=markread&amp;csrf_token=$1',	'mark_forum_read'				=>	'misc.php?action=markforumread&amp;fid=$1&amp;csrf_token=$2',	'new_topic'						=>	'post.php?fid=$1',	'new_reply'						=>	'post.php?tid=$1',	'post'							=>	'viewtopic.php?pid=$1#p$1',	'profile_about'					=>	'profile.php?section=about&amp;id=$1',	'profile_identity'				=>	'profile.php?section=identity&amp;id=$1',	'profile_settings'				=>	'profile.php?section=settings&amp;id=$1',	'profile_avatar'				=>	'profile.php?section=avatar&amp;id=$1',	'profile_signature'				=>	'profile.php?section=signature&amp;id=$1',	'profile_admin'					=>	'profile.php?section=admin&amp;id=$1',	'quote'							=>	'post.php?tid=$1&amp;qid=$2',	'register'						=>	'register.php',	'report'						=>	'misc.php?report=$1',	'request_password'				=>	'login.php?action=forget',	'rules'							=>	'misc.php?action=rules',	'search'						=>	'search.php',	'search_advanced'				=>	'search.php?advanced=1',	'search_resultft'				=>	'search.php?action=search&amp;keywords=$1&amp;author=$3&amp;forum=$2&amp;search_in=$4&amp;sort_by=$5&amp;sort_dir=$6&amp;show_as=$7',	'search_results'				=>	'search.php?search_id=$1',	'search_new'					=>	'search.php?action=show_new',	'search_new_results'			=>	'search.php?action=show_new&amp;forum=$1',	'search_recent'					=>	'search.php?action=show_recent',	'search_recent_results'			=>	'search.php?action=show_recent&amp;value=$1',	'search_unanswered'				=>	'search.php?action=show_unanswered',	'search_subscriptions'			=>	'search.php?action=show_subscriptions&amp;user_id=$1',	'search_user_posts'				=>	'search.php?action=show_user_posts&amp;user_id=$1',	'search_user_topics'			=>	'search.php?action=show_user_topics&amp;user_id=$1',	'subscribe'						=>	'misc.php?subscribe=$1&amp;csrf_token=$2',	'topic'							=>	'viewtopic.php?id=$1',	'topic_rss'						=>	'extern.php?action=feed&amp;tid=$1&amp;type=rss',	'topic_atom'					=>	'extern.php?action=feed&amp;tid=$1&amp;type=atom',	'topic_new_posts'				=>	'viewtopic.php?id=$1&amp;action=new',	'topic_last_post'				=>	'viewtopic.php?id=$1&amp;action=last',	'unsubscribe'					=>	'misc.php?unsubscribe=$1&amp;csrf_token=$2',	'user'							=>	'profile.php?id=$1',	'users'							=>	'userlist.php',	'users_browse'					=>	'userlist.php?show_group=$1&amp;sort_by=$2&amp;sort_dir=$3&amp;username=$4',	'page'							=>	'&amp;p=$1',	'moderate_forum'				=>	'moderate.php?fid=$1',	'get_host'						=>	'moderate.php?get_host=$1',	'move'							=>	'moderate.php?fid=$1&amp;move_topics=$2',	'open'							=>	'moderate.php?fid=$1&amp;open=$2&amp;csrf_token=$3',	'close'							=>	'moderate.php?fid=$1&amp;close=$2&amp;csrf_token=$3',	'stick'							=>	'moderate.php?fid=$1&amp;stick=$2&amp;csrf_token=$3',	'unstick'						=>	'moderate.php?fid=$1&amp;unstick=$2&amp;csrf_token=$3',	'moderate_topic'				=>	'moderate.php?fid=$1&amp;tid=$2',	'admin_index'					=>	'admin/index.php',	'admin_bans'					=>	'admin/bans.php?sort_by=1',	'admin_categories'				=>	'admin/categories.php',	'admin_censoring'				=>	'admin/censoring.php',	'admin_extensions_manage'		=>	'admin/extensions.php?section=manage',	'admin_extensions_hotfixes'		=>	'admin/extensions.php?section=hotfixes',	'admin_forums'					=>	'admin/forums.php',	'admin_groups'					=>	'admin/groups.php',	'admin_loader'					=>	'admin/loader.php',	'admin_reindex'					=>	'admin/reindex.php',	'admin_settings_setup'			=>	'admin/settings.php?section=setup',	'admin_settings_features'		=>	'admin/settings.php?section=features',	'admin_settings_content'		=>	'admin/settings.php?section=content',	'admin_settings_email'			=>	'admin/settings.php?section=email',	'admin_settings_announcements'	=>	'admin/settings.php?section=announcements',	'admin_settings_registration'	=>	'admin/settings.php?section=registration',	'admin_settings_communications'	=>	'admin/settings.php?section=communications',	'admin_settings_maintenance'	=>	'admin/settings.php?section=maintenance',	'admin_prune'					=>	'admin/prune.php',	'admin_ranks'					=>	'admin/ranks.php',	'admin_reports'					=>	'admin/reports.php',	'admin_users'					=>	'admin/users.php');
<?php// Language definitions used in all admin files$lang_admin_prune = array('Prune settings head'			=>	'Prune topics according to age of latest post and forum','Prune legend'					=>	'Select posts to prune','Confirm prune heading'			=>	'Confirm prune topics','Prune details head'			=>	'Confirm prune topics from: %s','Prune topics info 1'			=>	'<strong>WARNING!</strong> Pruning will permanently delete <em>%s</em> topics%s.','Prune topics info 2'			=>	'The topics being deleted do not contain posts newer than <em>%s</em> days old.','All forums'					=>	'All forums','Include sticky'				=>	'including sticky topics','Days old'						=>	'Days old','Prune topics'					=>	'Prune topics','Number of topics'				=>	'Number of topics','Prune caution'					=>	'<strong>IMPORTANT!</strong> Use this feature with caution. Pruned posts can <em>NEVER</em> be recovered. For best performance you should put the forum in maintenance mode during pruning.','Prune intro'					=>	'You may prune topics from all forums or from one particular forum. Topics will be pruned according to the value you specify for "Days old". E.g. if you were to enter 30, every topic that didn\'t contain a post dated less than 30 days old would be deleted.','Prune sticky'					=>	'Prune sticky topics','Prune sticky enable'			=>	'Enable pruning of sticky topics.','Prune from'					=>	'Prune from forum','Days to prune message'			=>	'Days to prune must be a positive integer.','No days old message'			=>	'There are no topics that are as old as you have specified. Please decrease the value of "Days old" and try again.','Prune done'					=>	'Posts pruned.',);
<?php/** * Administration panel index page. * * Gives an overview of some statistics to administrators and moderators. * * @copyright (C) 2008-2011 PunBB, partially based on code (C) 2008-2009 FluxBB.org * @license http://www.gnu.org/licenses/gpl.html GPL version 2 or higher * @package PunBB */if (!defined('FORUM_ROOT'))	define('FORUM_ROOT', '../');require FORUM_ROOT.'include/common.php';require FORUM_ROOT.'include/common_admin.php';($hook = get_hook('ain_start')) ? eval($hook) : null;if (!$forum_user['is_admmod'])	message($lang_common['No permission']);// Load the admin.php language filesrequire FORUM_ROOT.'lang/'.$forum_user['language'].'/admin_common.php';require FORUM_ROOT.'lang/'.$forum_user['language'].'/admin_index.php';// Show phpinfo() outputif (isset($_GET['action']) && $_GET['action'] == 'phpinfo' && $forum_user['g_id'] == FORUM_ADMIN){	($hook = get_hook('ain_phpinfo_selected')) ? eval($hook) : null;	// Is phpinfo() a disabled function?	if (strpos(strtolower((string)@ini_get('disable_functions')), 'phpinfo') !== false)		message($lang_admin_index['phpinfo disabled']);	phpinfo();	exit;}// Generate check for updates text blockif ($forum_user['g_id'] == FORUM_ADMIN){	if ($forum_config['o_check_for_updates'] == '1')		$punbb_updates = $lang_admin_index['Check for updates enabled'];	else	{		// Get a list of installed hotfix extensions		$query = array(			'SELECT'	=> 'e.id',			'FROM'		=> 'extensions AS e',			'WHERE'		=> 'e.id LIKE \'hotfix_%\''		);		($hook = get_hook('ain_update_check_qr_get_hotfixes')) ? eval($hook) : null;		$result = $forum_db->query_build($query) or error(__FILE__, __LINE__);		$hotfixes = array();		while ($row = $forum_db->fetch_row($result))		{			$hotfixes[] = urlencode($row[0]);		}		$punbb_updates = '<a href="http://punbb.informer.com/update/?version='.urlencode($forum_config['o_cur_version']).'&amp;hotfixes='.implode(',', $hotfixes).'">'.$lang_admin_index['Check for updates manual'].'</a>';	}}// Get the server load averages (if possible)if (function_exists('sys_getloadavg') && is_array(sys_getloadavg())){	$load_averages = sys_getloadavg();	array_walk($load_averages, create_function('&$v', '$v = round($v, 3);'));	$server_load = $load_averages[0].' '.$load_averages[1].' '.$load_averages[2];}else if (@is_readable('/proc/loadavg')){	// We use @ just in case	$fh = @fopen('/proc/loadavg', 'r');	$load_averages = @fread($fh, 64);	@fclose($fh);	$load_averages = empty($load_averages) ? array() : explode(' ', $load_averages);	$server_load = isset($load_averages[2]) ? $load_averages[0].' '.$load_averages[1].' '.$load_averages[2] : 'Not available';}else if (!in_array(PHP_OS, array('WINNT', 'WIN32')) && preg_match('/averages?: ([0-9\.]+),[\s]+([0-9\.]+),[\s]+([0-9\.]+)/i', @exec('uptime'), $load_averages))	$server_load = $load_averages[1].' '.$load_averages[2].' '.$load_averages[3];else	$server_load = $lang_admin_index['Not available'];// Get number of current visitors$query = array(	'SELECT'	=> 'COUNT(o.user_id)',	'FROM'		=> 'online AS o',	'WHERE'		=> 'o.idle=0');($hook = get_hook('ain_qr_get_users_online')) ? eval($hook) : null;$result = $forum_db->query_build($query) or error(__FILE__, __LINE__);$num_online = $forum_db->result($result);// Get the database system version$db_version = $forum_db->get_version();// Collect some additional info about MySQLif (in_array($db_type, array('mysql', 'mysqli', 'mysql_innodb', 'mysqli_innodb'))){	$db_version = 'MySQL '.$db_version;	// Calculate total db size/row count	$result = $forum_db->query('SHOW TABLE STATUS FROM `'.$db_name.'` LIKE \''.$db_prefix.'%\'') or error(__FILE__, __LINE__);	$total_records = $total_size = 0;	while ($status = $forum_db->fetch_assoc($result))	{		$total_records += $status['Rows'];		$total_size += $status['Data_length'] + $status['Index_length'];	}	$total_size = $total_size / 1024;	if ($total_size > 1024)		$total_size = forum_number_format($total_size / 1024, 2).' MB';	else		$total_size = forum_number_format($total_size, 2).' KB';}// Check for the existance of various PHP opcode caches/optimizersif (function_exists('mmcache'))	$php_accelerator = '<a href="http://turck-mmcache.sourceforge.net/">Turck MMCache</a>';else if (isset($_PHPA))	$php_accelerator = '<a href="http://www.php-accelerator.co.uk/">ionCube PHP Accelerator</a>';else if (ini_get('apc.enabled'))	$php_accelerator ='<a href="http://www.php.net/apc/">Alternative PHP Cache (APC)</a>';else if (ini_get('zend_optimizer.optimization_level'))	$php_accelerator = '<a href="http://www.zend.com/products/zend_optimizer/">Zend Optimizer</a>';else if (ini_get('eaccelerator.enable'))	$php_accelerator = '<a href="http://eaccelerator.net/">eAccelerator</a>';else if (ini_get('xcache.cacher'))	$php_accelerator = '<a href="http://xcache.lighttpd.net/">XCache</a>';else	$php_accelerator = $lang_admin_index['Not applicable'];// Setup breadcrumbs$forum_page['crumbs'] = array(	array($forum_config['o_board_title'], forum_link($forum_url['index'])),	array($lang_admin_common['Forum administration'], forum_link($forum_url['admin_index'])));if ($forum_user['g_id'] == FORUM_ADMIN)	$forum_page['crumbs'][] = array($lang_admin_common['Start'], forum_link($forum_url['admin_index']));$forum_page['crumbs'][] = array($lang_admin_common['Information'], forum_link($forum_url['admin_index']));($hook = get_hook('ain_pre_header_load')) ? eval($hook) : null;define('FORUM_PAGE_SECTION', 'start');define('FORUM_PAGE', 'admin-information');require FORUM_ROOT.'header.php';$forum_page['item_count'] = 0;// START SUBST - <!-- forum_main -->ob_start();($hook = get_hook('ain_main_output_start')) ? eval($hook) : null;?>	<div class="main-subhead">		<h2 class="hn"><span><?php echo $lang_admin_index['Information head'] ?></span></h2>	</div>	<div class="main-content main-frm"><?php if (!empty($alert_items)): ?>		<div id="admin-alerts" class="ct-set warn-set">			<div class="ct-box warn-box">				<h3 class="ct-legend hn warn"><span><?php echo $lang_admin_index['Alerts'] ?></span></h3>				<?php echo implode(' ', $alert_items)."\n" ?>			</div>		</div><?php endif; ?>		<div class="ct-group"><?php ($hook = get_hook('ain_pre_version')) ? eval($hook) : null; ?>			<div class="ct-set group-item<?php echo ++$forum_page['item_count'] ?>">				<div class="ct-box">					<h3 class="ct-legend hn"><span><?php echo $lang_admin_index['PunBB version'] ?></span></h3>					<ul class="data-list">						<li><span>PunBB <?php echo $forum_config['o_cur_version'] ?></span></li>						<li><span><?php echo $lang_admin_index['Copyright message'] ?></span></li><?php if (isset($punbb_updates)): ?>						<li><span><?php echo $punbb_updates ?></span></li><?php endif; ?>					</ul>				</div>			</div><?php ($hook = get_hook('ain_pre_community')) ? eval($hook) : null; ?>			<div class="ct-set group-item<?php echo ++$forum_page['item_count'] ?>">				<div class="ct-box">					<h3 class="ct-legend hn"><span><?php echo $lang_admin_index['PunBB community'] ?></span></h3>					<ul class="data-list">						<li><span><?php echo $lang_admin_index['Forums'] ?>: <a href="http://punbb.informer.com/forums/">Forums</a></span></li>						<li><span><?php echo $lang_admin_index['Twitter'] ?>: <a href="https://twitter.com/punbb_forum">@punbb_forum</a></span></li>						<li><span><?php echo $lang_admin_index['Development'] ?>: <a href="https://github.com/punbb/punbb">https://github.com/punbb</a></span></li>					</ul>				</div>			</div><?php ($hook = get_hook('ain_pre_server_load')) ? eval($hook) : null; ?>			<div class="ct-set group-item<?php echo ++$forum_page['item_count'] ?>">				<div class="ct-box">					<h3 class="ct-legend hn"><span><?php echo $lang_admin_index['Server load'] ?></span></h3>					<p><span><?php echo $server_load ?> (<?php echo $num_online.' '.$lang_admin_index['users online']?>)</span></p>				</div>			</div><?php ($hook = get_hook('ain_pre_environment')) ? eval($hook) : null; if ($forum_user['g_id'] == FORUM_ADMIN): ?>			<div class="ct-set group-item<?php echo ++$forum_page['item_count'] ?>">				<div class="ct-box">					<h3 class="ct-legend hn"><span><?php echo $lang_admin_index['Environment'] ?></span></h3>					<ul class="data-list">						<li><span><?php echo $lang_admin_index['Operating system'] ?>: <?php echo PHP_OS ?></span></li>						<li><span>PHP: <?php echo PHP_VERSION ?> - <a href="<?php echo forum_link($forum_url['admin_index']) ?>?action=phpinfo"><?php echo $lang_admin_index['Show info'] ?></a></span></li>						<li><span><?php echo $lang_admin_index['Accelerator'] ?>: <?php echo $php_accelerator ?></span></li>					</ul>				</div>			</div><?php ($hook = get_hook('ain_pre_database')) ? eval($hook) : null; ?>			<div class="ct-set group-item<?php echo ++$forum_page['item_count'] ?>">				<div class="ct-box">					<h3 class="ct-legend hn"><span><?php echo $lang_admin_index['Database'] ?></span></h3>					<ul class="data-list">						<li><span><?php echo implode(' ', $forum_db->get_version()) ?></span></li><?php if (isset($total_records) && isset($total_size)): ?>						<li><span><?php echo $lang_admin_index['Rows'] ?>: <?php echo forum_number_format($total_records) ?></span></li>						<li><span><?php echo $lang_admin_index['Size'] ?>: <?php echo $total_size ?></span></li><?php endif; ?>					</ul>				</div>			</div><?php endif; ($hook = get_hook('ain_items_end')) ? eval($hook) : null; ?>		</div>	</div><?php($hook = get_hook('ain_end')) ? eval($hook) : null;$tpl_temp = forum_trim(ob_get_contents());$tpl_main = str_replace('<!-- forum_main -->', $tpl_temp, $tpl_main);ob_end_clean();// END SUBST - <!-- forum_main -->require FORUM_ROOT.'footer.php';
<?php/*** @version $Id: core.php,v 1.9 2007/08/12 01:11:33 harryf Exp $* @package utf8* @subpackage strings*//*** Define UTF8_CORE as required*/if ( !defined('UTF8_CORE') ) {    define('UTF8_CORE',TRUE);}//--------------------------------------------------------------------/*** Unicode aware replacement for strlen(). Returns the number* of characters in the string (not the number of bytes), replacing* multibyte characters with a single byte equivalent* utf8_decode() converts characters that are not in ISO-8859-1* to '?', which, for the purpose of counting, is alright - It's* much faster than iconv_strlen* Note: this function does not count bad UTF-8 bytes in the string* - these are simply ignored* @author <chernyshevsky at hotmail dot com>* @link   http://www.php.net/manual/en/function.strlen.php* @link   http://www.php.net/manual/en/function.utf8-decode.php* @param string UTF-8 string* @return int number of UTF-8 characters in string* @package utf8* @subpackage strings*/function utf8_strlen($str){    return strlen(utf8_decode($str));}//--------------------------------------------------------------------/*** UTF-8 aware alternative to strpos* Find position of first occurrence of a string* Note: This will get alot slower if offset is used* Note: requires utf8_strlen and utf8_substr to be loaded* @param string haystack* @param string needle (you should validate this with utf8_is_valid)* @param integer offset in characters (from left)* @return mixed integer position or FALSE on failure* @see http://www.php.net/strpos* @see utf8_strlen* @see utf8_substr* @package utf8* @subpackage strings*/function utf8_strpos($str, $needle, $offset = NULL) {    if ( is_null($offset) ) {        $ar = explode($needle, $str, 2);        if ( count($ar) > 1 ) {            return utf8_strlen($ar[0]);        }        return FALSE;    } else {        if ( !is_int($offset) ) {            trigger_error('utf8_strpos: Offset must be an integer',E_USER_ERROR);            return FALSE;        }        $str = utf8_substr($str, $offset);        if ( FALSE !== ( $pos = utf8_strpos($str, $needle) ) ) {            return $pos + $offset;        }        return FALSE;    }}//--------------------------------------------------------------------/*** UTF-8 aware alternative to strrpos* Find position of last occurrence of a char in a string* Note: This will get alot slower if offset is used* Note: requires utf8_substr and utf8_strlen to be loaded* @param string haystack* @param string needle (you should validate this with utf8_is_valid)* @param integer (optional) offset (from left)* @return mixed integer position or FALSE on failure* @see http://www.php.net/strrpos* @see utf8_substr* @see utf8_strlen* @package utf8* @subpackage strings*/function utf8_strrpos($str, $needle, $offset = NULL) {    if ( is_null($offset) ) {        $ar = explode($needle, $str);        if ( count($ar) > 1 ) {            // Pop off the end of the string where the last match was made            array_pop($ar);            $str = join($needle,$ar);            return utf8_strlen($str);        }        return FALSE;    } else {        if ( !is_int($offset) ) {            trigger_error('utf8_strrpos expects parameter 3 to be long',E_USER_WARNING);            return FALSE;        }        $str = utf8_substr($str, $offset);        if ( FALSE !== ( $pos = utf8_strrpos($str, $needle) ) ) {            return $pos + $offset;        }        return FALSE;    }}//--------------------------------------------------------------------/*** UTF-8 aware alternative to substr* Return part of a string given character offset (and optionally length)** Note arguments: comparied to substr - if offset or length are* not integers, this version will not complain but rather massages them* into an integer.** Note on returned values: substr documentation states false can be* returned in some cases (e.g. offset > string length)* mb_substr never returns false, it will return an empty string instead.* This adopts the mb_substr approach** Note on implementation: PCRE only supports repetitions of less than* 65536, in order to accept up to MAXINT values for offset and length,* we'll repeat a group of 65535 characters when needed.** Note on implementation: calculating the number of characters in the* string is a relatively expensive operation, so we only carry it out when* necessary. It isn't necessary for +ve offsets and no specified length** @author Chris Smith<chris@jalakai.co.uk>* @param string* @param integer number of UTF-8 characters offset (from left)* @param integer (optional) length in UTF-8 characters from offset* @return mixed string or FALSE if failure* @package utf8* @subpackage strings*/function utf8_substr($str, $offset, $length = NULL) {    // generates E_NOTICE    // for PHP4 objects, but not PHP5 objects    $str = (string)$str;    $offset = (int)$offset;    if (!is_null($length)) $length = (int)$length;    // handle trivial cases    if ($length === 0) return '';    if ($offset < 0 && $length < 0 && $length < $offset)        return '';    // normalise negative offsets (we could use a tail    // anchored pattern, but they are horribly slow!)    if ($offset < 0) {        // see notes        $strlen = strlen(utf8_decode($str));        $offset = $strlen + $offset;        if ($offset < 0) $offset = 0;    }    $Op = '';    $Lp = '';    // establish a pattern for offset, a    // non-captured group equal in length to offset    if ($offset > 0) {        $Ox = (int)($offset/65535);        $Oy = $offset%65535;        if ($Ox) {            $Op = '(?:.{65535}){'.$Ox.'}';        }        $Op = '^(?:'.$Op.'.{'.$Oy.'})';    } else {        // offset == 0; just anchor the pattern        $Op = '^';    }    // establish a pattern for length    if (is_null($length)) {        // the rest of the string        $Lp = '(.*)$';    } else {        if (!isset($strlen)) {            // see notes            $strlen = strlen(utf8_decode($str));        }        // another trivial case        if ($offset > $strlen) return '';        if ($length > 0) {            // reduce any length that would            // go passed the end of the string            $length = min($strlen-$offset, $length);            $Lx = (int)( $length / 65535 );            $Ly = $length % 65535;            // negative length requires a captured group            // of length characters            if ($Lx) $Lp = '(?:.{65535}){'.$Lx.'}';            $Lp = '('.$Lp.'.{'.$Ly.'})';        } else if ($length < 0) {            if ( $length < ($offset - $strlen) ) {                return '';            }            $Lx = (int)((-$length)/65535);            $Ly = (-$length)%65535;            // negative length requires ... capture everything            // except a group of  -length characters            // anchored at the tail-end of the string            if ($Lx) $Lp = '(?:.{65535}){'.$Lx.'}';            $Lp = '(.*)(?:'.$Lp.'.{'.$Ly.'})$';        }    }    if (!preg_match( '#'.$Op.$Lp.'#us',$str, $match )) {        return '';    }    return $match[1];}//---------------------------------------------------------------/*** UTF-8 aware alternative to strtolower* Make a string lowercase* Note: The concept of a characters "case" only exists is some alphabets* such as Latin, Greek, Cyrillic, Armenian and archaic Georgian - it does* not exist in the Chinese alphabet, for example. See Unicode Standard* Annex #21: Case Mappings* Note: requires utf8_to_unicode and utf8_from_unicode* @author Andreas Gohr <andi@splitbrain.org>* @param string* @return mixed either string in lowercase or FALSE is UTF-8 invalid* @see http://www.php.net/strtolower* @see utf8_to_unicode* @see utf8_from_unicode* @see http://www.unicode.org/reports/tr21/tr21-5.html* @see http://dev.splitbrain.org/view/darcs/dokuwiki/inc/utf8.php* @package utf8* @subpackage strings*/function utf8_strtolower($string){    static $UTF8_UPPER_TO_LOWER = NULL;    if ( is_null($UTF8_UPPER_TO_LOWER) ) {        $UTF8_UPPER_TO_LOWER = array(    0x0041=>0x0061, 0x03A6=>0x03C6, 0x0162=>0x0163, 0x00C5=>0x00E5, 0x0042=>0x0062,    0x0139=>0x013A, 0x00C1=>0x00E1, 0x0141=>0x0142, 0x038E=>0x03CD, 0x0100=>0x0101,    0x0490=>0x0491, 0x0394=>0x03B4, 0x015A=>0x015B, 0x0044=>0x0064, 0x0393=>0x03B3,    0x00D4=>0x00F4, 0x042A=>0x044A, 0x0419=>0x0439, 0x0112=>0x0113, 0x041C=>0x043C,    0x015E=>0x015F, 0x0143=>0x0144, 0x00CE=>0x00EE, 0x040E=>0x045E, 0x042F=>0x044F,    0x039A=>0x03BA, 0x0154=>0x0155, 0x0049=>0x0069, 0x0053=>0x0073, 0x1E1E=>0x1E1F,    0x0134=>0x0135, 0x0427=>0x0447, 0x03A0=>0x03C0, 0x0418=>0x0438, 0x00D3=>0x00F3,    0x0420=>0x0440, 0x0404=>0x0454, 0x0415=>0x0435, 0x0429=>0x0449, 0x014A=>0x014B,    0x0411=>0x0431, 0x0409=>0x0459, 0x1E02=>0x1E03, 0x00D6=>0x00F6, 0x00D9=>0x00F9,    0x004E=>0x006E, 0x0401=>0x0451, 0x03A4=>0x03C4, 0x0423=>0x0443, 0x015C=>0x015D,    0x0403=>0x0453, 0x03A8=>0x03C8, 0x0158=>0x0159, 0x0047=>0x0067, 0x00C4=>0x00E4,    0x0386=>0x03AC, 0x0389=>0x03AE, 0x0166=>0x0167, 0x039E=>0x03BE, 0x0164=>0x0165,    0x0116=>0x0117, 0x0108=>0x0109, 0x0056=>0x0076, 0x00DE=>0x00FE, 0x0156=>0x0157,    0x00DA=>0x00FA, 0x1E60=>0x1E61, 0x1E82=>0x1E83, 0x00C2=>0x00E2, 0x0118=>0x0119,    0x0145=>0x0146, 0x0050=>0x0070, 0x0150=>0x0151, 0x042E=>0x044E, 0x0128=>0x0129,    0x03A7=>0x03C7, 0x013D=>0x013E, 0x0422=>0x0442, 0x005A=>0x007A, 0x0428=>0x0448,    0x03A1=>0x03C1, 0x1E80=>0x1E81, 0x016C=>0x016D, 0x00D5=>0x00F5, 0x0055=>0x0075,    0x0176=>0x0177, 0x00DC=>0x00FC, 0x1E56=>0x1E57, 0x03A3=>0x03C3, 0x041A=>0x043A,    0x004D=>0x006D, 0x016A=>0x016B, 0x0170=>0x0171, 0x0424=>0x0444, 0x00CC=>0x00EC,    0x0168=>0x0169, 0x039F=>0x03BF, 0x004B=>0x006B, 0x00D2=>0x00F2, 0x00C0=>0x00E0,    0x0414=>0x0434, 0x03A9=>0x03C9, 0x1E6A=>0x1E6B, 0x00C3=>0x00E3, 0x042D=>0x044D,    0x0416=>0x0436, 0x01A0=>0x01A1, 0x010C=>0x010D, 0x011C=>0x011D, 0x00D0=>0x00F0,    0x013B=>0x013C, 0x040F=>0x045F, 0x040A=>0x045A, 0x00C8=>0x00E8, 0x03A5=>0x03C5,    0x0046=>0x0066, 0x00DD=>0x00FD, 0x0043=>0x0063, 0x021A=>0x021B, 0x00CA=>0x00EA,    0x0399=>0x03B9, 0x0179=>0x017A, 0x00CF=>0x00EF, 0x01AF=>0x01B0, 0x0045=>0x0065,    0x039B=>0x03BB, 0x0398=>0x03B8, 0x039C=>0x03BC, 0x040C=>0x045C, 0x041F=>0x043F,    0x042C=>0x044C, 0x00DE=>0x00FE, 0x00D0=>0x00F0, 0x1EF2=>0x1EF3, 0x0048=>0x0068,    0x00CB=>0x00EB, 0x0110=>0x0111, 0x0413=>0x0433, 0x012E=>0x012F, 0x00C6=>0x00E6,    0x0058=>0x0078, 0x0160=>0x0161, 0x016E=>0x016F, 0x0391=>0x03B1, 0x0407=>0x0457,    0x0172=>0x0173, 0x0178=>0x00FF, 0x004F=>0x006F, 0x041B=>0x043B, 0x0395=>0x03B5,    0x0425=>0x0445, 0x0120=>0x0121, 0x017D=>0x017E, 0x017B=>0x017C, 0x0396=>0x03B6,    0x0392=>0x03B2, 0x0388=>0x03AD, 0x1E84=>0x1E85, 0x0174=>0x0175, 0x0051=>0x0071,    0x0417=>0x0437, 0x1E0A=>0x1E0B, 0x0147=>0x0148, 0x0104=>0x0105, 0x0408=>0x0458,    0x014C=>0x014D, 0x00CD=>0x00ED, 0x0059=>0x0079, 0x010A=>0x010B, 0x038F=>0x03CE,    0x0052=>0x0072, 0x0410=>0x0430, 0x0405=>0x0455, 0x0402=>0x0452, 0x0126=>0x0127,    0x0136=>0x0137, 0x012A=>0x012B, 0x038A=>0x03AF, 0x042B=>0x044B, 0x004C=>0x006C,    0x0397=>0x03B7, 0x0124=>0x0125, 0x0218=>0x0219, 0x00DB=>0x00FB, 0x011E=>0x011F,    0x041E=>0x043E, 0x1E40=>0x1E41, 0x039D=>0x03BD, 0x0106=>0x0107, 0x03AB=>0x03CB,    0x0426=>0x0446, 0x00DE=>0x00FE, 0x00C7=>0x00E7, 0x03AA=>0x03CA, 0x0421=>0x0441,    0x0412=>0x0432, 0x010E=>0x010F, 0x00D8=>0x00F8, 0x0057=>0x0077, 0x011A=>0x011B,    0x0054=>0x0074, 0x004A=>0x006A, 0x040B=>0x045B, 0x0406=>0x0456, 0x0102=>0x0103,    0x039B=>0x03BB, 0x00D1=>0x00F1, 0x041D=>0x043D, 0x038C=>0x03CC, 0x00C9=>0x00E9,    0x00D0=>0x00F0, 0x0407=>0x0457, 0x0122=>0x0123,            );    }    $uni = utf8_to_unicode($string);    if ( !$uni ) {        return FALSE;    }    $cnt = count($uni);    for ($i=0; $i < $cnt; $i++){        if ( isset($UTF8_UPPER_TO_LOWER[$uni[$i]]) ) {            $uni[$i] = $UTF8_UPPER_TO_LOWER[$uni[$i]];        }    }    return utf8_from_unicode($uni);}//---------------------------------------------------------------/*** UTF-8 aware alternative to strtoupper* Make a string uppercase* Note: The concept of a characters "case" only exists is some alphabets* such as Latin, Greek, Cyrillic, Armenian and archaic Georgian - it does* not exist in the Chinese alphabet, for example. See Unicode Standard* Annex #21: Case Mappings* Note: requires utf8_to_unicode and utf8_from_unicode* @author Andreas Gohr <andi@splitbrain.org>* @param string* @return mixed either string in lowercase or FALSE is UTF-8 invalid* @see http://www.php.net/strtoupper* @see utf8_to_unicode* @see utf8_from_unicode* @see http://www.unicode.org/reports/tr21/tr21-5.html* @see http://dev.splitbrain.org/view/darcs/dokuwiki/inc/utf8.php* @package utf8* @subpackage strings*/function utf8_strtoupper($string){    static $UTF8_LOWER_TO_UPPER = NULL;    if ( is_null($UTF8_LOWER_TO_UPPER) ) {        $UTF8_LOWER_TO_UPPER = array(    0x0061=>0x0041, 0x03C6=>0x03A6, 0x0163=>0x0162, 0x00E5=>0x00C5, 0x0062=>0x0042,    0x013A=>0x0139, 0x00E1=>0x00C1, 0x0142=>0x0141, 0x03CD=>0x038E, 0x0101=>0x0100,    0x0491=>0x0490, 0x03B4=>0x0394, 0x015B=>0x015A, 0x0064=>0x0044, 0x03B3=>0x0393,    0x00F4=>0x00D4, 0x044A=>0x042A, 0x0439=>0x0419, 0x0113=>0x0112, 0x043C=>0x041C,    0x015F=>0x015E, 0x0144=>0x0143, 0x00EE=>0x00CE, 0x045E=>0x040E, 0x044F=>0x042F,    0x03BA=>0x039A, 0x0155=>0x0154, 0x0069=>0x0049, 0x0073=>0x0053, 0x1E1F=>0x1E1E,    0x0135=>0x0134, 0x0447=>0x0427, 0x03C0=>0x03A0, 0x0438=>0x0418, 0x00F3=>0x00D3,    0x0440=>0x0420, 0x0454=>0x0404, 0x0435=>0x0415, 0x0449=>0x0429, 0x014B=>0x014A,    0x0431=>0x0411, 0x0459=>0x0409, 0x1E03=>0x1E02, 0x00F6=>0x00D6, 0x00F9=>0x00D9,    0x006E=>0x004E, 0x0451=>0x0401, 0x03C4=>0x03A4, 0x0443=>0x0423, 0x015D=>0x015C,    0x0453=>0x0403, 0x03C8=>0x03A8, 0x0159=>0x0158, 0x0067=>0x0047, 0x00E4=>0x00C4,    0x03AC=>0x0386, 0x03AE=>0x0389, 0x0167=>0x0166, 0x03BE=>0x039E, 0x0165=>0x0164,    0x0117=>0x0116, 0x0109=>0x0108, 0x0076=>0x0056, 0x00FE=>0x00DE, 0x0157=>0x0156,    0x00FA=>0x00DA, 0x1E61=>0x1E60, 0x1E83=>0x1E82, 0x00E2=>0x00C2, 0x0119=>0x0118,    0x0146=>0x0145, 0x0070=>0x0050, 0x0151=>0x0150, 0x044E=>0x042E, 0x0129=>0x0128,    0x03C7=>0x03A7, 0x013E=>0x013D, 0x0442=>0x0422, 0x007A=>0x005A, 0x0448=>0x0428,    0x03C1=>0x03A1, 0x1E81=>0x1E80, 0x016D=>0x016C, 0x00F5=>0x00D5, 0x0075=>0x0055,    0x0177=>0x0176, 0x00FC=>0x00DC, 0x1E57=>0x1E56, 0x03C3=>0x03A3, 0x043A=>0x041A,    0x006D=>0x004D, 0x016B=>0x016A, 0x0171=>0x0170, 0x0444=>0x0424, 0x00EC=>0x00CC,    0x0169=>0x0168, 0x03BF=>0x039F, 0x006B=>0x004B, 0x00F2=>0x00D2, 0x00E0=>0x00C0,    0x0434=>0x0414, 0x03C9=>0x03A9, 0x1E6B=>0x1E6A, 0x00E3=>0x00C3, 0x044D=>0x042D,    0x0436=>0x0416, 0x01A1=>0x01A0, 0x010D=>0x010C, 0x011D=>0x011C, 0x00F0=>0x00D0,    0x013C=>0x013B, 0x045F=>0x040F, 0x045A=>0x040A, 0x00E8=>0x00C8, 0x03C5=>0x03A5,    0x0066=>0x0046, 0x00FD=>0x00DD, 0x0063=>0x0043, 0x021B=>0x021A, 0x00EA=>0x00CA,    0x03B9=>0x0399, 0x017A=>0x0179, 0x00EF=>0x00CF, 0x01B0=>0x01AF, 0x0065=>0x0045,    0x03BB=>0x039B, 0x03B8=>0x0398, 0x03BC=>0x039C, 0x045C=>0x040C, 0x043F=>0x041F,    0x044C=>0x042C, 0x00FE=>0x00DE, 0x00F0=>0x00D0, 0x1EF3=>0x1EF2, 0x0068=>0x0048,    0x00EB=>0x00CB, 0x0111=>0x0110, 0x0433=>0x0413, 0x012F=>0x012E, 0x00E6=>0x00C6,    0x0078=>0x0058, 0x0161=>0x0160, 0x016F=>0x016E, 0x03B1=>0x0391, 0x0457=>0x0407,    0x0173=>0x0172, 0x00FF=>0x0178, 0x006F=>0x004F, 0x043B=>0x041B, 0x03B5=>0x0395,    0x0445=>0x0425, 0x0121=>0x0120, 0x017E=>0x017D, 0x017C=>0x017B, 0x03B6=>0x0396,    0x03B2=>0x0392, 0x03AD=>0x0388, 0x1E85=>0x1E84, 0x0175=>0x0174, 0x0071=>0x0051,    0x0437=>0x0417, 0x1E0B=>0x1E0A, 0x0148=>0x0147, 0x0105=>0x0104, 0x0458=>0x0408,    0x014D=>0x014C, 0x00ED=>0x00CD, 0x0079=>0x0059, 0x010B=>0x010A, 0x03CE=>0x038F,    0x0072=>0x0052, 0x0430=>0x0410, 0x0455=>0x0405, 0x0452=>0x0402, 0x0127=>0x0126,    0x0137=>0x0136, 0x012B=>0x012A, 0x03AF=>0x038A, 0x044B=>0x042B, 0x006C=>0x004C,    0x03B7=>0x0397, 0x0125=>0x0124, 0x0219=>0x0218, 0x00FB=>0x00DB, 0x011F=>0x011E,    0x043E=>0x041E, 0x1E41=>0x1E40, 0x03BD=>0x039D, 0x0107=>0x0106, 0x03CB=>0x03AB,    0x0446=>0x0426, 0x00FE=>0x00DE, 0x00E7=>0x00C7, 0x03CA=>0x03AA, 0x0441=>0x0421,    0x0432=>0x0412, 0x010F=>0x010E, 0x00F8=>0x00D8, 0x0077=>0x0057, 0x011B=>0x011A,    0x0074=>0x0054, 0x006A=>0x004A, 0x045B=>0x040B, 0x0456=>0x0406, 0x0103=>0x0102,    0x03BB=>0x039B, 0x00F1=>0x00D1, 0x043D=>0x041D, 0x03CC=>0x038C, 0x00E9=>0x00C9,    0x00F0=>0x00D0, 0x0457=>0x0407, 0x0123=>0x0122,            );    }    $uni = utf8_to_unicode($string);    if ( !$uni ) {        return FALSE;    }    $cnt = count($uni);    for ($i=0; $i < $cnt; $i++){        if( isset($UTF8_LOWER_TO_UPPER[$uni[$i]]) ) {            $uni[$i] = $UTF8_LOWER_TO_UPPER[$uni[$i]];        }    }    return utf8_from_unicode($uni);}
<?php/*** @version $Id: validation.php,v 1.2 2006/02/26 13:20:44 harryf Exp $* Tools for validing a UTF-8 string is well formed.* The Original Code is Mozilla Communicator client code.* The Initial Developer of the Original Code is* Netscape Communications Corporation.* Portions created by the Initial Developer are Copyright (C) 1998* the Initial Developer. All Rights Reserved.* Ported to PHP by Henri Sivonen (http://hsivonen.iki.fi)* Slight modifications to fit with phputf8 library by Harry Fuecks (hfuecks gmail com)* @see http://lxr.mozilla.org/seamonkey/source/intl/uconv/src/nsUTF8ToUnicode.cpp* @see http://lxr.mozilla.org/seamonkey/source/intl/uconv/src/nsUnicodeToUTF8.cpp* @see http://hsivonen.iki.fi/php-utf8/* @package utf8* @subpackage validation*///--------------------------------------------------------------------/*** Tests a string as to whether it's valid UTF-8 and supported by the* Unicode standard* Note: this function has been modified to simple return true or false* @author <hsivonen@iki.fi>* @param string UTF-8 encoded string* @return boolean true if valid* @see http://hsivonen.iki.fi/php-utf8/* @see utf8_compliant* @package utf8* @subpackage validation*/function utf8_is_valid($str) {    $mState = 0;     // cached expected number of octets after the current octet                     // until the beginning of the next UTF8 character sequence    $mUcs4  = 0;     // cached Unicode character    $mBytes = 1;     // cached expected number of octets in the current sequence    $len = strlen($str);    for($i = 0; $i < $len; $i++) {        $in = ord($str{$i});        if ( $mState == 0) {            // When mState is zero we expect either a US-ASCII character or a            // multi-octet sequence.            if (0 == (0x80 & ($in))) {                // US-ASCII, pass straight through.                $mBytes = 1;            } else if (0xC0 == (0xE0 & ($in))) {                // First octet of 2 octet sequence                $mUcs4 = ($in);                $mUcs4 = ($mUcs4 & 0x1F) << 6;                $mState = 1;                $mBytes = 2;            } else if (0xE0 == (0xF0 & ($in))) {                // First octet of 3 octet sequence                $mUcs4 = ($in);                $mUcs4 = ($mUcs4 & 0x0F) << 12;                $mState = 2;                $mBytes = 3;            } else if (0xF0 == (0xF8 & ($in))) {                // First octet of 4 octet sequence                $mUcs4 = ($in);                $mUcs4 = ($mUcs4 & 0x07) << 18;                $mState = 3;                $mBytes = 4;            } else if (0xF8 == (0xFC & ($in))) {                /* First octet of 5 octet sequence.                *                * This is illegal because the encoded codepoint must be either                * (a) not the shortest form or                * (b) outside the Unicode range of 0-0x10FFFF.                * Rather than trying to resynchronize, we will carry on until the end                * of the sequence and let the later error handling code catch it.                */                $mUcs4 = ($in);                $mUcs4 = ($mUcs4 & 0x03) << 24;                $mState = 4;                $mBytes = 5;            } else if (0xFC == (0xFE & ($in))) {                // First octet of 6 octet sequence, see comments for 5 octet sequence.                $mUcs4 = ($in);                $mUcs4 = ($mUcs4 & 1) << 30;                $mState = 5;                $mBytes = 6;            } else {                /* Current octet is neither in the US-ASCII range nor a legal first                 * octet of a multi-octet sequence.                 */                return FALSE;            }        } else {            // When mState is non-zero, we expect a continuation of the multi-octet            // sequence            if (0x80 == (0xC0 & ($in))) {                // Legal continuation.                $shift = ($mState - 1) * 6;                $tmp = $in;                $tmp = ($tmp & 0x0000003F) << $shift;                $mUcs4 |= $tmp;                /**                * End of the multi-octet sequence. mUcs4 now contains the final                * Unicode codepoint to be output                */                if (0 == --$mState) {                    /*                    * Check for illegal sequences and codepoints.                    */                    // From Unicode 3.1, non-shortest form is illegal                    if (((2 == $mBytes) && ($mUcs4 < 0x0080)) ||                        ((3 == $mBytes) && ($mUcs4 < 0x0800)) ||                        ((4 == $mBytes) && ($mUcs4 < 0x10000)) ||                        (4 < $mBytes) ||                        // From Unicode 3.2, surrogate characters are illegal                        (($mUcs4 & 0xFFFFF800) == 0xD800) ||                        // Codepoints outside the Unicode range are illegal                        ($mUcs4 > 0x10FFFF)) {                        return FALSE;                    }                    //initialize UTF8 cache                    $mState = 0;                    $mUcs4  = 0;                    $mBytes = 1;                }            } else {                /**                *((0xC0 & (*in) != 0x80) && (mState != 0))                * Incomplete multi-octet sequence.                */                return FALSE;            }        }    }    return TRUE;}//--------------------------------------------------------------------/*** Tests whether a string complies as UTF-8. This will be much* faster than utf8_is_valid but will pass five and six octet* UTF-8 sequences, which are not supported by Unicode and* so cannot be displayed correctly in a browser. In other words* it is not as strict as utf8_is_valid but it's faster. If you use* is to validate user input, you place yourself at the risk that* attackers will be able to inject 5 and 6 byte sequences (which* may or may not be a significant risk, depending on what you are* are doing)* @see utf8_is_valid* @see http://www.php.net/manual/en/reference.pcre.pattern.modifiers.php#54805* @param string UTF-8 string to check* @return boolean TRUE if string is valid UTF-8* @package utf8* @subpackage validation*/function utf8_compliant($str) {    if ( strlen($str) == 0 ) {        return TRUE;    }    // If even just the first character can be matched, when the /u    // modifier is used, then it's valid UTF-8. If the UTF-8 is somehow    // invalid, nothing at all will match, even if the string contains    // some valid sequences    return (preg_match('/^.{1}/us',$str,$ar) == 1);}
<?php/*** Tools to help with ASCII in UTF-8* @version $Id: ascii.php,v 1.5 2006/10/16 20:38:12 harryf Exp $* @package utf8* @subpackage ascii*///--------------------------------------------------------------------/*** Tests whether a string contains only 7bit ASCII bytes.* You might use this to conditionally check whether a string* needs handling as UTF-8 or not, potentially offering performance* benefits by using the native PHP equivalent if it's just ASCII e.g.;** <code>* if ( utf8_is_ascii($someString) ) {*     // It's just ASCII - use the native PHP version*     $someString = strtolower($someString);* } else {*     $someString = utf8_strtolower($someString);* }* </code>* * @param string* @return boolean TRUE if it's all ASCII* @package utf8* @subpackage ascii* @see utf8_is_ascii_ctrl*/function utf8_is_ascii($str) {    // Search for any bytes which are outside the ASCII range...    return (preg_match('/(?:[^\x00-\x7F])/',$str) !== 1);}//--------------------------------------------------------------------/*** Tests whether a string contains only 7bit ASCII bytes with device* control codes omitted. The device control codes can be found on the* second table here: http://www.w3schools.com/tags/ref_ascii.asp* * @param string* @return boolean TRUE if it's all ASCII without device control codes* @package utf8* @subpackage ascii* @see utf8_is_ascii*/function utf8_is_ascii_ctrl($str) {    if ( strlen($str) > 0 ) {        // Search for any bytes which are outside the ASCII range,        // or are device control codes        return (preg_match('/[^\x09\x0A\x0D\x20-\x7E]/',$str) !== 1);    }    return FALSE;}//--------------------------------------------------------------------/*** Strip out all non-7bit ASCII bytes* If you need to transmit a string to system which you know can only* support 7bit ASCII, you could use this function.* @param string* @return string with non ASCII bytes removed* @package utf8* @subpackage ascii* @see utf8_strip_non_ascii_ctrl*/function utf8_strip_non_ascii($str) {    ob_start();    while ( preg_match(        '/^([\x00-\x7F]+)|([^\x00-\x7F]+)/S',            $str, $matches) ) {        if ( !isset($matches[2]) ) {            echo $matches[0];        }        $str = substr($str, strlen($matches[0]));    }    $result = ob_get_contents();    ob_end_clean();    return $result;}//--------------------------------------------------------------------/*** Strip out device control codes in the ASCII range* which are not permitted in XML. Note that this leaves* multi-byte characters untouched - it only removes device* control codes* @see http://hsivonen.iki.fi/producing-xml/#controlchar* @param string* @return string control codes removed*/function utf8_strip_ascii_ctrl($str) {    ob_start();    while ( preg_match(        '/^([^\x00-\x08\x0B\x0C\x0E-\x1F\x7F]+)|([\x00-\x08\x0B\x0C\x0E-\x1F\x7F]+)/S',            $str, $matches) ) {        if ( !isset($matches[2]) ) {            echo $matches[0];        }        $str = substr($str, strlen($matches[0]));    }    $result = ob_get_contents();    ob_end_clean();    return $result;}//--------------------------------------------------------------------/*** Strip out all non 7bit ASCII bytes and ASCII device control codes.* For a list of ASCII device control codes see the 2nd table here:* http://www.w3schools.com/tags/ref_ascii.asp* * @param string* @return boolean TRUE if it's all ASCII* @package utf8* @subpackage ascii*/function utf8_strip_non_ascii_ctrl($str) {    ob_start();    while ( preg_match(        '/^([\x09\x0A\x0D\x20-\x7E]+)|([^\x09\x0A\x0D\x20-\x7E]+)/S',            $str, $matches) ) {        if ( !isset($matches[2]) ) {            echo $matches[0];        }        $str = substr($str, strlen($matches[0]));    }    $result = ob_get_contents();    ob_end_clean();    return $result;}//---------------------------------------------------------------/*** Replace accented UTF-8 characters by unaccented ASCII-7 "equivalents".* The purpose of this function is to replace characters commonly found in Latin* alphabets with something more or less equivalent from the ASCII range. This can* be useful for converting a UTF-8 to something ready for a filename, for example.* Following the use of this function, you would probably also pass the string* through utf8_strip_non_ascii to clean out any other non-ASCII chars* Use the optional parameter to just deaccent lower ($case = -1) or upper ($case = 1)* letters. Default is to deaccent both cases ($case = 0)** For a more complete implementation of transliteration, see the utf8_to_ascii package* available from the phputf8 project downloads:* http://prdownloads.sourceforge.net/phputf8** @param string UTF-8 string* @param int (optional) -1 lowercase only, +1 uppercase only, 1 both cases* @param string UTF-8 with accented characters replaced by ASCII chars* @return string accented chars replaced with ascii equivalents* @author Andreas Gohr <andi@splitbrain.org>* @package utf8* @subpackage ascii*/function utf8_accents_to_ascii( $str, $case=0 ){    static $UTF8_LOWER_ACCENTS = NULL;    static $UTF8_UPPER_ACCENTS = NULL;    if($case <= 0){        if ( is_null($UTF8_LOWER_ACCENTS) ) {            $UTF8_LOWER_ACCENTS = array(  '' => 'a', '' => 'o', '' => 'd', '' => 'f', '' => 'e', '' => 's', '' => 'o',  '' => 'ss', '' => 'a', '' => 'r', '' => 't', '' => 'n', '' => 'a', '' => 'k',  '' => 's', '' => 'y', '' => 'n', '' => 'l', '' => 'h', '' => 'p', '' => 'o',  '' => 'u', '' => 'e', '' => 'e', '' => 'c', '' => 'w', '' => 'c', '' => 'o',  '' => 's', '' => 'o', '' => 'g', '' => 't', '' => 's', '' => 'e', '' => 'c',  '' => 's', '' => 'i', '' => 'u', '' => 'c', '' => 'e', '' => 'w', '' => 't',  '' => 'u', '' => 'c', '' => 'oe', '' => 'e', '' => 'y', '' => 'a', '' => 'l',  '' => 'u', '' => 'u', '' => 's', '' => 'g', '' => 'l', '' => 'f', '' => 'z',  '' => 'w', '' => 'b', '' => 'a', '' => 'i', '' => 'i', '' => 'd', '' => 't',  '' => 'r', '' => 'ae', '' => 'i', '' => 'r', '' => 'e', '' => 'ue', '' => 'o',  '' => 'e', '' => 'n', '' => 'n', '' => 'h', '' => 'g', '' => 'd', '' => 'j',  '' => 'y', '' => 'u', '' => 'u', '' => 'u', '' => 't', '' => 'y', '' => 'o',  '' => 'a', '' => 'l', '' => 'w', '' => 'z', '' => 'i', '' => 'a', '' => 'g',  '' => 'm', '' => 'o', '' => 'i', '' => 'u', '' => 'i', '' => 'z', '' => 'a',  '' => 'u', '' => 'th', '' => 'dh', '' => 'ae', '' => 'u', '' => 'e',             );        }        $str = str_replace(                array_keys($UTF8_LOWER_ACCENTS),                array_values($UTF8_LOWER_ACCENTS),                $str            );    }    if($case >= 0){        if ( is_null($UTF8_UPPER_ACCENTS) ) {            $UTF8_UPPER_ACCENTS = array(  '' => 'A', '' => 'O', '' => 'D', '' => 'F', '' => 'E', '' => 'S', '' => 'O',  '' => 'A', '' => 'R', '' => 'T', '' => 'N', '' => 'A', '' => 'K',  '' => 'S', '' => 'Y', '' => 'N', '' => 'L', '' => 'H', '' => 'P', '' => 'O',  '' => 'U', '' => 'E', '' => 'E', '' => 'C', '' => 'W', '' => 'C', '' => 'O',  '' => 'S', '' => 'O', '' => 'G', '' => 'T', '' => 'S', '' => 'E', '' => 'C',  '' => 'S', '' => 'I', '' => 'U', '' => 'C', '' => 'E', '' => 'W', '' => 'T',  '' => 'U', '' => 'C', '' => 'Oe', '' => 'E', '' => 'Y', '' => 'A', '' => 'L',  '' => 'U', '' => 'U', '' => 'S', '' => 'G', '' => 'L', '' => 'F', '' => 'Z',  '' => 'W', '' => 'B', '' => 'A', '' => 'I', '' => 'I', '' => 'D', '' => 'T',  '' => 'R', '' => 'Ae', '' => 'I', '' => 'R', '' => 'E', '' => 'Ue', '' => 'O',  '' => 'E', '' => 'N', '' => 'N', '' => 'H', '' => 'G', '' => 'D', '' => 'J',  '' => 'Y', '' => 'U', '' => 'U', '' => 'U', '' => 'T', '' => 'Y', '' => 'O',  '' => 'A', '' => 'L', '' => 'W', '' => 'Z', '' => 'I', '' => 'A', '' => 'G',  '' => 'M', '' => 'O', '' => 'I', '' => 'U', '' => 'I', '' => 'Z', '' => 'A',  '' => 'U', '' => 'Th', '' => 'Dh', '' => 'Ae', '' => 'E',            );        }        $str = str_replace(                array_keys($UTF8_UPPER_ACCENTS),                array_values($UTF8_UPPER_ACCENTS),                $str            );    }    return $str;}
<?php/** * Loads the regular expressions used to match SEF URL requests to their proper URLs. * * @copyright (C) 2008-2011 PunBB, partially based on code (C) 2008-2009 FluxBB.org * @license http://www.gnu.org/licenses/gpl.html GPL version 2 or higher * @package PunBB */$forum_rewrite_rules = array(	'/^topic[\/_-]?([0-9]+).*(new|last)[\/_-]?(posts?)(\.html?|\/)?$/i'														=>	'viewtopic.php?id=$1&action=$2',	'/^post[\/_-]?([0-9]+)(\.html?|\/)?$/i'																					=>	'viewtopic.php?pid=$1',	'/^(forum|topic)[\/_-]?([0-9]+).*[\/_-]p(age)?[\/_-]?([0-9]+)(\.html?|\/)?$/i'											=>	'view$1.php?id=$2&p=$4',	'/^feed[\/_-]?(rss|atom)[\/_-]?(f|t)(orum|opic)[\/_-]?([0-9]+)[\/_-]?(\.xml?|\/)?$/i'									=>	'extern.php?action=feed&$2id=$4&type=$1',	'/^(forum|topic)[\/_-]?([0-9]+).*(\.html?|\/)?$/i'																		=>	'view$1.php?id=$2',	'/^new[\/_-]?reply[\/_-]?([0-9]+)(\.html?|\/)?$/i'																		=>	'post.php?tid=$1',	'/^new[\/_-]?reply[\/_-]?([0-9]+)[\/_-]?quote[\/_-]?([0-9]+)(\.html?|\/)?$/i'											=>	'post.php?tid=$1&qid=$2',	'/^new[\/_-]?topic[\/_-]?([0-9]+)(\.html?|\/)?$/i'																		=>	'post.php?fid=$1',	'/^(delete|edit)[\/_-]?([0-9]+)(\.html?|\/)?$/i'																		=>	'$1.php?id=$2',	'/^(login|search|register)(\.html?|\/)?$/i'																				=>	'$1.php',	'/^logout[\/_-]?([0-9]+)[\/_-]([a-z0-9]+)(\.html?|\/)?$/i'																=>	'login.php?action=out&id=$1&csrf_token=$2',	'/^request[\/_-]?password(\.html?|\/)?$/i'																				=>	'login.php?action=forget',	'/^user[\/_-]?([0-9]+)(\.html?|\/)?$/i'																					=>	'profile.php?id=$1',	'/^user[\/_-]?([0-9]+)[\/_-]?([a-z]+)(\.html?|\/)?$/i'																	=>	'profile.php?section=$2&id=$1',	'/^(delete)[\/_-]?(avatar|user)?[\/_-]?([0-9]+)[\/_-]?([a-z0-9]+)?(\.html?|\/)?$/i'										=>	'profile.php?action=$1_$2&id=$3&csrf_token=$4',	'/^change[\/_-]?(email|pass)(word)?[\/_-]?([0-9]+)[\/_-]([a-zA-Z0-9]+)(\.html?|\/)?$/i'									=>	'profile.php?action=change_$1&id=$3&key=$4',	'/^change[\/_-]?(email|pass)(word)?[\/_-]?([0-9]+)(\.html?|\/)?$/i'														=>	'profile.php?action=change_$1&id=$3',	'/^search[\/_-]?advanced(\.html?|\/)?$/i'																				=>	'search.php?advanced=1',	'/^search[\/_-]?(new)[\/_-]([0-9-]+)(\.html?|\/)?$/i'																	=>	'search.php?action=show_new&forum=$2',	'/^search[\/_-]?(new)[\/_-]([0-9-]+)[\/_-]p(age)?[\/_-]?([0-9]+)(\.html?|\/)?$/i'										=>	'search.php?action=show_new&forum=$2&p=$4',	'/^search[\/_-]?(recent)[\/_-]([0-9]+)(\.html?|\/)?$/i'																	=>	'search.php?action=show_recent&value=$2',	'/^search[\/_-]?(recent)[\/_-]([0-9]+)[\/_-]p(age)?[\/_-]?([0-9]+)(\.html?|\/)?$/i'										=>	'search.php?action=show_recent&value=$2&p=$4',	'/^search[\/_-]?(new|recent|unanswered)(\.html?|\/)?$/i'																=>	'search.php?action=show_$1',	'/^search[\/_-]?(new|recent|unanswered)[\/_-]p(age)?[\/_-]?([0-9]+)(\.html?|\/)?$/i'									=>	'search.php?action=show_$1&p=$3',	'/^search[\/_-]?subscriptions[\/_-]?([0-9]+)(\.html?|\/)?$/i'															=>	'search.php?action=show_subscriptions&user_id=$1',	'/^search[\/_-]?subscriptions[\/_-]?([0-9]+)[\/_-]p(age)?[\/_-]?([0-9]+)(\.html?|\/)?$/i'								=>	'search.php?action=show_subscriptions&user_id=$1&p=$3',	'/^search[\/_-]?([0-9]+)(\.html?|\/)?$/i'																				=>	'search.php?search_id=$1',	'/^search[\/_-]?([0-9]+)[\/_-]?p(age)?[\/_-]?([0-9]+)(\.html?|\/)?$/i'													=>	'search.php?search_id=$1&p=$3',	'/^search[\/_-]?(posts|topics)[\/_-]?user[\/_-]?([0-9]+)(\.html?|\/)?$/i'												=>	'search.php?action=show_user_$1&user_id=$2',	'/^search[\/_-]?(posts|topics)[\/_-]?user[\/_-]?([0-9]+)[\/_-]?p(age)?[\/_-]?([0-9]+)(\.html?|\/)?$/i'					=>	'search.php?action=show_user_$1&user_id=$2&p=$4',	'/^search\/k(.*)\/([0-9-]+)\/a(.*)\/(message|subject|all)\/([0-9]+)\/(ASC|DESC)\/(posts|topics)\/?$/i'					=>	'search.php?action=search&keywords=$1&author=$3&forum=$2&search_in=$4&sort_by=$5&sort_dir=$6&show_as=$7',	'/^search\/k(.*)\/([0-9-]+)\/a(.*)\/(message|subject|all)\/([0-9]+)\/(ASC|DESC)\/(posts|topics)\/page\/([0-9]+)\/?$/i'	=>	'search.php?action=search&keywords=$1&author=$3&forum=$2&search_in=$4&sort_by=$5&sort_dir=$6&show_as=$7&p=$8',	'/^search-k(.*)-([0-9-]+)-a(.*)-(message|subject|all)-([0-9]+)-(ASC|DESC)-(posts|topics).html?$/i'						=>	'search.php?action=search&keywords=$1&author=$3&forum=$2&search_in=$4&sort_by=$5&sort_dir=$6&show_as=$7',	'/^search-k(.*)-(message|subject|all)-a(.*)-([0-9]+)-(ASC|DESC)-([0-9-]+)-(posts|topics)-p([0-9]+).html?$/i'			=>	'search.php?action=search&keywords=$1&author=$3&forum=$6&search_in=$2&sort_by=$4&sort_dir=$5&show_as=$7&p=$8',	'/^users(\.html?|\/)?$/i'																								=>	'userlist.php',	'/^users\/(.*)\/([0-9-]+)\/?([a-z_]+)[\/_-]([a-zA-Z]+)[\/_-]p(age)?[\/_-]?([0-9]+)(\.html?|\/)?$/i'						=>	'userlist.php?username=$1&show_group=$2&sort_by=$3&sort_dir=$4&p=$6',	'/^users\/(.*)\/([0-9-]+)\/?([a-z_]+)[\/_-]([a-zA-Z]+)(\.html?|\/)?$/i'													=>	'userlist.php?username=$1&show_group=$2&sort_by=$3&sort_dir=$4',	'/^(email|report|subscribe|unsubscribe)[\/_-]?([0-9]+)[\/_-]?([a-z0-9]+)?(\.html?|\/)?$/i'								=>	'misc.php?$1=$2&csrf_token=$3',	'/^(mark|rules)[\/_-]?(read)?[\/_-]?([a-z0-9]+)?(\.html?|\/)?$/i'														=>	'misc.php?action=$1$2&csrf_token=$3',	'/^mark[\/_-](forum)[\/_-]?([0-9]+)[\/_-](read)[\/_-]([a-z0-9]+)(\.html?|\/)?$/i'										=>	'misc.php?action=markforumread&fid=$2&csrf_token=$4',	'/^help[\/_-]([a-z]+)(\.html?|\/)?$/i'																					=>	'help.php?section=$1',	'/^moderate[\/_-]?([0-9]+)(\.html?|\/)?$/i'																				=>	'moderate.php?fid=$1',	'/^move_topics[\/_-]?([0-9]+)[\/_-]([0-9]+)(\.html?|\/)?$/i'															=>	'moderate.php?fid=$1&move_topics=$2',	'/^(open|close|stick|unstick)[\/_-]?([0-9]+)[\/_-]([0-9]+)[\/_-]([a-z0-9]+)(\.html?|\/)?$/i'							=>	'moderate.php?fid=$2&$1=$3&csrf_token=$4',	'/^moderate[\/_-]?([0-9]+)[\/_-]?p(age)?[\/_-]?([0-9]+)(\.html?|\/)?$/i'												=>	'moderate.php?fid=$1&p=$3',	'/^moderate[\/_-]?([0-9]+)[\/_-]([0-9]+)(\.html?|\/)?$/i'																=>	'moderate.php?fid=$1&tid=$2',	'/^moderate[\/_-]?([0-9]+)[\/_-]([0-9]+)[\/_-]?p(age)?[\/_-]?([0-9]+)(\.html?|\/)?$/i'									=>	'moderate.php?fid=$1&tid=$2&p=$4',	'/^get_host[\/_-]?([0-9]+|[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3})(\.html?|\/)?$/i'								=>	'moderate.php?get_host=$1',	'/^feed[\/_-]?(rss|atom)(\.xml?|\/)?$/i'																				=>	'extern.php?action=feed&type=$1');
<?php/*** Locate a byte index given a UTF-8 character index* @version $Id: position.php,v 1.1 2006/10/01 00:01:31 harryf Exp $* @package utf8* @subpackage position*///--------------------------------------------------------------------/*** Given a string and a character index in the string, in* terms of the UTF-8 character position, returns the byte* index of that character. Can be useful when you want to* PHP's native string functions but we warned, locating* the byte can be expensive* Takes variable number of parameters - first must be* the search string then 1 to n UTF-8 character positions* to obtain byte indexes for - it is more efficient to search* the string for multiple characters at once, than make* repeated calls to this function** @author Chris Smith<chris@jalakai.co.uk>* @param string string to locate index in* @param int (n times)* @return mixed - int if only one input int, array if more* @return boolean TRUE if it's all ASCII* @package utf8* @subpackage position*/function utf8_byte_position() {    $args = func_get_args();    $str =& array_shift($args);    if (!is_string($str)) return false;    $result = array();    // trivial byte index, character offset pair    $prev = array(0,0);    // use a short piece of str to estimate bytes per character    // $i (& $j) -> byte indexes into $str    $i = utf8_locate_next_chr($str, 300);    // $c -> character offset into $str    $c = strlen(utf8_decode(substr($str,0,$i)));    // deal with arguments from lowest to highest    sort($args);    foreach ($args as $offset) {        // sanity checks FIXME        // 0 is an easy check        if ($offset == 0) { $result[] = 0; continue; }        // ensure no endless looping        $safety_valve = 50;        do {            if ( ($c - $prev[1]) == 0 ) {                // Hack: gone past end of string                $error = 0;                $i = strlen($str);                break;            }            $j = $i + (int)(($offset-$c) * ($i - $prev[0]) / ($c - $prev[1]));            // correct to utf8 character boundary            $j = utf8_locate_next_chr($str, $j);            // save the index, offset for use next iteration            $prev = array($i,$c);            if ($j > $i) {                // determine new character offset                $c += strlen(utf8_decode(substr($str,$i,$j-$i)));            } else {                // ditto                $c -= strlen(utf8_decode(substr($str,$j,$i-$j)));            }            $error = abs($c-$offset);            // ready for next time around            $i = $j;        // from 7 it is faster to iterate over the string        } while ( ($error > 7) && --$safety_valve) ;        if ($error && $error <= 7) {            if ($c < $offset) {                // move up                while ($error--) { $i = utf8_locate_next_chr($str,++$i); }            } else {                // move down                while ($error--) { $i = utf8_locate_current_chr($str,--$i); }            }            // ready for next arg            $c = $offset;        }        $result[] = $i;    }    if ( count($result) == 1 ) {        return $result[0];    }    return $result;}//--------------------------------------------------------------------/*** Given a string and any byte index, returns the byte index* of the start of the current UTF-8 character, relative to supplied* position. If the current character begins at the same place as the* supplied byte index, that byte index will be returned. Otherwise* this function will step backwards, looking for the index where* curent UTF-8 character begins* @author Chris Smith<chris@jalakai.co.uk>* @param string* @param int byte index in the string* @return int byte index of start of next UTF-8 character* @package utf8* @subpackage position*/function utf8_locate_current_chr( &$str, $idx ) {    if ($idx <= 0) return 0;    $limit = strlen($str);    if ($idx >= $limit) return $limit;    // Binary value for any byte after the first in a multi-byte UTF-8 character    // will be like 10xxxxxx so & 0xC0 can be used to detect this kind    // of byte - assuming well formed UTF-8    while ($idx && ((ord($str[$idx]) & 0xC0) == 0x80)) $idx--;    return $idx;}//--------------------------------------------------------------------/*** Given a string and any byte index, returns the byte index* of the start of the next UTF-8 character, relative to supplied* position. If the next character begins at the same place as the* supplied byte index, that byte index will be returned.* @author Chris Smith<chris@jalakai.co.uk>* @param string* @param int byte index in the string* @return int byte index of start of next UTF-8 character* @package utf8* @subpackage position*/function utf8_locate_next_chr( &$str, $idx ) {    if ($idx <= 0) return 0;    $limit = strlen($str);    if ($idx >= $limit) return $limit;    // Binary value for any byte after the first in a multi-byte UTF-8 character    // will be like 10xxxxxx so & 0xC0 can be used to detect this kind    // of byte - assuming well formed UTF-8    while (($idx < $limit) && ((ord($str[$idx]) & 0xC0) == 0x80)) $idx++;    return $idx;}
<?php// Language definitions used in the index page of the admin panel$lang_admin_index = array('Information head'				=>	'Welcome to PunBB administration control panel','Alerts'						=>	'Administrator Alerts','Check for updates enabled'		=>	'This board is setup to automatically check for updates and hotfixes against the punbb.informer.com updates service.','Check for updates manual'		=>	'Check for updates',	// Link text'Copyright message'				=>	'&copy; 2008-2011 <a href="http://punbb.informer.com/">PunBB</a>, partially based on code &copy; 2008-2009 <a href="http://fluxbb.org/">FluxBB</a>','PunBB version'					=>	'PunBB version','PunBB community'				=>	'Community','Forums'						=>	'Forums','Twitter'						=>	'Twitter','Development'					=>	'Development','Not available'					=>	'Not available','Not applicable'				=>	'N/A','Server load'					=>	'Server load','users online'					=>	'users online','Environment'					=>	'Environment','Operating system'				=>	'Operating system','Show info'						=>	'Show info','Accelerator'					=>	'Accelerator','Database'						=>	'Database','Rows'							=>	'Rows','Size'							=>	'Size','phpinfo disabled'				=>	'The PHP function phpinfo() has been disabled on this server.',);
<?php// Language definitions used in admin-categories$lang_admin_categories = array('Add category head'				=>	'Add category (create a new category at the specified position)','Add category info'				=>	'Your new category will not appear on the board index page until at least one forum is added to it. To create a new forum in this category or to move an existing forum to it go to the %s page.','Add category info link text'	=>	'forums','Add category legend'			=>	'Add new category','Add category'					=>	'Add category','New category label'			=>	'New category name','Category name label'			=>	'Category name','Position label'				=>	'Position','Del category head'				=>	'Delete category (together with all forums and posts it contains)','Delete category'				=>	'Delete category',// submit button'Select category label'			=>	'Select category','Confirm delete cat'			=>	'You are deleting the category "%s"','Delete category warning'		=>	'<strong>WARNING!</strong> Deleting a category will delete all forums and posts (if any) in that category!','Edit categories head'			=>	'Edit categories (change category names and/or positions)','Edit categories legend'		=>	'Edit categories','Edit category legend'			=>	'Edit category%s','Update all categories'			=>	'Update all categories','Categories updated'			=>	'Categories updated.','Category added'				=>	'Category added.','Category deleted'				=>	'Category deleted.','Must name category'			=>	'You must enter a name for the category','Must be integer'				=>	'Position must be a positive integer value',);
<?php/** * Allows the creation of new user accounts. * * @copyright (C) 2008-2011 PunBB, partially based on code (C) 2008-2009 FluxBB.org * @license http://www.gnu.org/licenses/gpl.html GPL version 2 or higher * @package PunBB */if (!defined('FORUM_ROOT'))	define('FORUM_ROOT', './');require FORUM_ROOT.'include/common.php';($hook = get_hook('rg_start')) ? eval($hook) : null;// If we are logged in, we shouldn't be hereif (!$forum_user['is_guest']){	header('Location: '.forum_link($forum_url['index']));	exit;}// Load the profile.php language filerequire FORUM_ROOT.'lang/'.$forum_user['language'].'/profile.php';if ($forum_config['o_regs_allow'] == '0')	message($lang_profile['No new regs']);$errors = array();// User pressed the cancel buttonif (isset($_GET['cancel']))	redirect(forum_link($forum_url['index']), $lang_profile['Reg cancel redirect']);// User pressed agree but failed to tick checkboxelse if (isset($_GET['agree']) && !isset($_GET['req_agreement']))	redirect(forum_link($forum_url['index']), $lang_profile['Reg cancel redirect']);// Show the ruleselse if ($forum_config['o_rules'] == '1' && !isset($_GET['agree']) && !isset($_POST['form_sent'])){	// Setup form	$forum_page['group_count'] = $forum_page['item_count'] = $forum_page['fld_count'] = 0;	// Setup breadcrumbs	$forum_page['crumbs'] = array(		array($forum_config['o_board_title'], forum_link($forum_url['index'])),		array($lang_common['Register'], forum_link($forum_url['register'])),		$lang_common['Rules']	);	($hook = get_hook('rg_rules_pre_header_load')) ? eval($hook) : null;	define('FORUM_PAGE', 'rules');	require FORUM_ROOT.'header.php';	// START SUBST - <!-- forum_main -->	ob_start();	($hook = get_hook('rg_rules_output_start')) ? eval($hook) : null;	$forum_page['set_count'] = $forum_page['fld_count'] = 0;?>	<div class="main-head">		<h2 class="hn"><span><?php echo sprintf($lang_profile['Register at'], $forum_config['o_board_title']) ?></span></h2>	</div>	<div class="main-subhead">		<h2 class="hn"><span><?php echo $lang_profile['Reg rules head'] ?></span></h2>	</div>	<div class="main-content main-frm">		<div class="ct-box user-box">			<?php echo $forum_config['o_rules_message'] ?>		</div>		<form class="frm-form" method="get" accept-charset="utf-8" action="<?php echo forum_link($forum_url['register']) ?>"><?php ($hook = get_hook('rg_rules_pre_group')) ? eval($hook) : null; ?>			<div class="frm-group group<?php echo ++$forum_page['group_count'] ?>"><?php ($hook = get_hook('rg_rules_pre_agree_checkbox')) ? eval($hook) : null; ?>				<div class="sf-set set<?php echo ++$forum_page['item_count'] ?>">					<div class="sf-box checkbox">						<span class="fld-input"><input type="checkbox" id="fld<?php echo ++$forum_page['fld_count'] ?>" name="req_agreement" value="1" /></span>						<label for="fld<?php echo $forum_page['fld_count'] ?>"><span><?php echo $lang_profile['Agreement'] ?></span> <?php echo $lang_profile['Agreement label'] ?></label>					</div>				</div><?php ($hook = get_hook('rg_rules_pre_group_end')) ? eval($hook) : null; ?>			</div><?php ($hook = get_hook('rg_rules_group_end')) ? eval($hook) : null; ?>			<div class="frm-buttons">				<span class="submit primary"><input type="submit" name="agree" value="<?php echo $lang_profile['Agree'] ?>" /></span>				<span class="cancel"><input type="submit" name="cancel" value="<?php echo $lang_common['Cancel'] ?>" formnovalidate /></span>			</div>		</form>	</div><?php	($hook = get_hook('rg_rules_end')) ? eval($hook) : null;	$tpl_temp = forum_trim(ob_get_contents());	$tpl_main = str_replace('<!-- forum_main -->', $tpl_temp, $tpl_main);	ob_end_clean();	// END SUBST - <!-- forum_main -->	require FORUM_ROOT.'footer.php';}else if (isset($_POST['form_sent'])){	($hook = get_hook('rg_register_form_submitted')) ? eval($hook) : null;	// Check that someone from this IP didn't register a user within the last hour (DoS prevention)	$query = array(		'SELECT'	=> 'COUNT(u.id)',		'FROM'		=> 'users AS u',		'WHERE'		=> 'u.registration_ip=\''.$forum_db->escape(get_remote_address()).'\' AND u.registered>'.(time() - 3600)	);	($hook = get_hook('rg_register_qr_check_register_flood')) ? eval($hook) : null;	$result = $forum_db->query_build($query) or error(__FILE__, __LINE__);	if ($forum_db->result($result) > 0)	{		$errors[] = $lang_profile['Registration flood'];	}	// Did everything go according to plan so far?	if (empty($errors))	{		$username = forum_trim($_POST['req_username']);		$email1 = strtolower(forum_trim($_POST['req_email1']));		if ($forum_config['o_regs_verify'] == '1')		{			$password1 = random_key(8, true);			$password2 = $password1;		}		else		{			$password1 = forum_trim($_POST['req_password1']);			$password2 = forum_trim($_POST['req_password2']);		}		// Validate the username		$errors = array_merge($errors, validate_username($username));		// ... and the password		if (utf8_strlen($password1) < 4)			$errors[] = $lang_profile['Pass too short'];		else if ($password1 != $password2)			$errors[] = $lang_profile['Pass not match'];		// ... and the e-mail address		if (!defined('FORUM_EMAIL_FUNCTIONS_LOADED'))			require FORUM_ROOT.'include/email.php';		if (!is_valid_email($email1))			$errors[] = $lang_profile['Invalid e-mail'];		// Check if it's a banned e-mail address		$banned_email = is_banned_email($email1);		if ($banned_email && $forum_config['p_allow_banned_email'] == '0')			$errors[] = $lang_profile['Banned e-mail'];		// Clean old unverified registrators - delete older than 72 hours		$query = array(			'DELETE'	=> 'users',			'WHERE'		=> 'group_id='.FORUM_UNVERIFIED.' AND activate_key IS NOT NULL AND registered < '.(time() - 259200)		);		($hook = get_hook('rg_register_qr_delete_unverified')) ? eval($hook) : null;		$forum_db->query_build($query) or error(__FILE__, __LINE__);		// Check if someone else already has registered with that e-mail address		$dupe_list = array();		$query = array(			'SELECT'	=> 'u.username',			'FROM'		=> 'users AS u',			'WHERE'		=> 'u.email=\''.$forum_db->escape($email1).'\''		);		($hook = get_hook('rg_register_qr_check_email_dupe')) ? eval($hook) : null;		$result = $forum_db->query_build($query) or error(__FILE__, __LINE__);		while ($cur_dupe = $forum_db->fetch_assoc($result))		{			$dupe_list[] = $cur_dupe['username'];		}		if (!empty($dupe_list) && empty($errors))		{			if ($forum_config['p_allow_dupe_email'] == '0')				$errors[] = $lang_profile['Dupe e-mail'];		}		($hook = get_hook('rg_register_end_validation')) ? eval($hook) : null;		// Did everything go according to plan so far?		if (empty($errors))		{			// Make sure we got a valid language string			if (isset($_POST['language']))			{				$language = preg_replace('#[\.\\\/]#', '', $_POST['language']);				if (!file_exists(FORUM_ROOT.'lang/'.$language.'/common.php'))					message($lang_common['Bad request']);			}			else				$language = $forum_config['o_default_lang'];			$initial_group_id = ($forum_config['o_regs_verify'] == '0') ? $forum_config['o_default_user_group'] : FORUM_UNVERIFIED;			$salt = random_key(12);			$password_hash = forum_hash($password1, $salt);			// Validate timezone and DST			$timezone = (isset($_POST['timezone'])) ? floatval($_POST['timezone']) : $forum_config['o_default_timezone'];			// Validate timezone  on error use default value			if (($timezone > 14.0) || ($timezone < -12.0)) {				$timezone = $forum_config['o_default_timezone'];			}			// DST			$dst = (isset($_POST['dst']) && intval($_POST['dst']) === 1) ? 1 : $forum_config['o_default_dst'];			// Insert the new user into the database. We do this now to get the last inserted id for later use.			$user_info = array(				'username'				=>	$username,				'group_id'				=>	$initial_group_id,				'salt'					=>	$salt,				'password'				=>	$password1,				'password_hash'			=>	$password_hash,				'email'					=>	$email1,				'email_setting'			=>	$forum_config['o_default_email_setting'],				'timezone'				=>	$timezone,				'dst'					=>	$dst,				'language'				=>	$language,				'style'					=>	$forum_config['o_default_style'],				'registered'			=>	time(),				'registration_ip'		=>	get_remote_address(),				'activate_key'			=>	($forum_config['o_regs_verify'] == '1') ? '\''.random_key(8, true).'\'' : 'NULL',				'require_verification'	=>	($forum_config['o_regs_verify'] == '1'),				'notify_admins'			=>	($forum_config['o_regs_report'] == '1')			);			($hook = get_hook('rg_register_pre_add_user')) ? eval($hook) : null;			add_user($user_info, $new_uid);			// If we previously found out that the e-mail was banned			if ($banned_email && $forum_config['o_mailing_list'] != '')			{				$mail_subject = 'Alert - Banned e-mail detected';				$mail_message = 'User \''.$username.'\' registered with banned e-mail address: '.$email1."\n\n".'User profile: '.forum_link($forum_url['user'], $new_uid)."\n\n".'-- '."\n".'Forum Mailer'."\n".'(Do not reply to this message)';				($hook = get_hook('rg_register_banned_email')) ? eval($hook) : null;				forum_mail($forum_config['o_mailing_list'], $mail_subject, $mail_message);			}			// If we previously found out that the e-mail was a dupe			if (!empty($dupe_list) && $forum_config['o_mailing_list'] != '')			{				$mail_subject = 'Alert - Duplicate e-mail detected';				$mail_message = 'User \''.$username.'\' registered with an e-mail address that also belongs to: '.implode(', ', $dupe_list)."\n\n".'User profile: '.forum_link($forum_url['user'], $new_uid)."\n\n".'-- '."\n".'Forum Mailer'."\n".'(Do not reply to this message)';				($hook = get_hook('rg_register_dupe_email')) ? eval($hook) : null;				forum_mail($forum_config['o_mailing_list'], $mail_subject, $mail_message);			}			($hook = get_hook('rg_register_pre_login_redirect')) ? eval($hook) : null;			// Must the user verify the registration or do we log him/her in right now?			if ($forum_config['o_regs_verify'] == '1')				message(sprintf($lang_profile['Reg e-mail'], '<a href="mailto:'.forum_htmlencode($forum_config['o_admin_email']).'">'.forum_htmlencode($forum_config['o_admin_email']).'</a>'));			$expire = time() + $forum_config['o_timeout_visit'];			forum_setcookie($cookie_name, base64_encode($new_uid.'|'.$password_hash.'|'.$expire.'|'.sha1($salt.$password_hash.forum_hash($expire, $salt))), $expire);			redirect(forum_link($forum_url['index']), $lang_profile['Reg complete']);		}	}}// Setup form$forum_page['group_count'] = $forum_page['item_count'] = $forum_page['fld_count'] = 0;$forum_page['form_action'] = forum_link($forum_url['register']).'?action=register';// Setup form information$forum_page['frm_info'] = array();if ($forum_config['o_regs_verify'] != '0')	$forum_page['frm_info']['email'] = '<p class="warn">'.$lang_profile['Reg e-mail info'].'</p>';// Setup breadcrumbs$forum_page['crumbs'] = array(	array($forum_config['o_board_title'], forum_link($forum_url['index'])),	array(sprintf($lang_profile['Register at'], $forum_config['o_board_title']), forum_link($forum_url['register'])),);// Load JS for timezone detection$forum_loader->add_js('include/js/min/detect_timezone.min.js', array('type' => 'file'));$forum_loader->add_js('FORUM.detect_timezone.detect_on_register_form();', array('type' => 'inline'));($hook = get_hook('rg_register_pre_header_load')) ? eval($hook) : null;define('FORUM_PAGE', 'register');require FORUM_ROOT.'header.php';// START SUBST - <!-- forum_main -->ob_start();($hook = get_hook('rg_register_output_start')) ? eval($hook) : null;?>	<div class="main-head">		<h2 class="hn"><span><?php echo sprintf($lang_profile['Register at'], $forum_config['o_board_title']) ?></span></h2>	</div>	<div class="main-content main-frm"><?php	if (!empty($forum_page['frm_info'])):?>		<div class="ct-box info-box">			<?php echo implode("\n\t\t\t", $forum_page['frm_info'])."\n" ?>		</div><?php	endif;	// If there were any errors, show them	if (!empty($errors))	{		$forum_page['errors'] = array();		foreach ($errors as $cur_error)			$forum_page['errors'][] = '<li class="warn"><span>'.$cur_error.'</span></li>';		($hook = get_hook('rg_pre_register_errors')) ? eval($hook) : null;?>		<div class="ct-box error-box">			<h2 class="warn hn"><span><?php echo $lang_profile['Register errors'] ?></span></h2>			<ul class="error-list">				<?php echo implode("\n\t\t\t\t", $forum_page['errors'])."\n" ?>			</ul>		</div><?php	}?>		<div id="req-msg" class="req-warn ct-box error-box">			<p class="important"><?php printf($lang_common['Required warn'], '<em>'.$lang_common['Required'].'</em>') ?></p>		</div>		<form class="frm-form" id="afocus" method="post" accept-charset="utf-8" action="<?php echo $forum_page['form_action'] ?>" autocomplete="off">			<div class="hidden">				<input type="hidden" name="form_sent" value="1" />				<input type="hidden" name="csrf_token" value="<?php echo generate_form_token($forum_page['form_action']) ?>" />				<input type="hidden" name="timezone" id="register_timezone" value="<?php echo forum_htmlencode($forum_config['o_default_timezone']) ?>" />				<input type="hidden" name="dst" id="register_dst" value="<?php echo forum_htmlencode($forum_config['o_default_dst']) ?>" />			</div><?php ($hook = get_hook('rg_register_pre_group')) ? eval($hook) : null; ?>			<div class="frm-group group<?php echo ++$forum_page['group_count'] ?>"><?php ($hook = get_hook('rg_register_pre_username')) ? eval($hook) : null; ?>				<div class="sf-set set<?php echo ++$forum_page['item_count'] ?>">					<div class="sf-box text required">						<label for="fld<?php echo ++$forum_page['fld_count'] ?>"><span><?php echo $lang_profile['Username'] ?></span> <small><?php echo $lang_profile['Username help'] ?></small></label><br />						<span class="fld-input"><input type="text" id="fld<?php echo $forum_page['fld_count'] ?>" name="req_username" value="<?php echo(isset($_POST['req_username']) ? forum_htmlencode($_POST['req_username']) : '') ?>" size="35" maxlength="25" required /></span>					</div>				</div><?php ($hook = get_hook('rg_register_pre_password')) ? eval($hook) : null; ?><?php if ($forum_config['o_regs_verify'] == '0'): ?>				<div class="sf-set set<?php echo ++$forum_page['item_count'] ?>">					<div class="sf-box text required">						<label for="fld<?php echo ++$forum_page['fld_count'] ?>"><span><?php echo $lang_profile['Password'] ?></span> <small><?php echo $lang_profile['Password help'] ?></small></label><br />						<span class="fld-input"><input type="password" id="fld<?php echo $forum_page['fld_count'] ?>" name="req_password1" size="35" required /></span>					</div>				</div><?php ($hook = get_hook('rg_register_pre_confirm_password')) ? eval($hook) : null; ?>				<div class="sf-set set<?php echo ++$forum_page['item_count'] ?>">					<div class="sf-box text required">						<label for="fld<?php echo ++$forum_page['fld_count'] ?>"><span><?php echo $lang_profile['Confirm password'] ?></span> <small><?php echo $lang_profile['Confirm password help'] ?></small></label><br />						<span class="fld-input"><input type="password" id="fld<?php echo $forum_page['fld_count'] ?>" name="req_password2" size="35" required /></span>					</div>				</div><?php endif; ($hook = get_hook('rg_register_pre_email')) ? eval($hook) : null; ?>				<div class="sf-set set<?php echo ++$forum_page['item_count'] ?>">					<div class="sf-box text required">						<label for="fld<?php echo ++$forum_page['fld_count'] ?>"><span><?php echo $lang_profile['E-mail'] ?></span> <small><?php echo $lang_profile['E-mail help'] ?></small></label><br />						<span class="fld-input"><input type="email" id="fld<?php echo $forum_page['fld_count'] ?>" name="req_email1" value="<?php echo(isset($_POST['req_email1']) ? forum_htmlencode($_POST['req_email1']) : '') ?>" size="35" maxlength="80" required /></span>					</div>				</div><?php ($hook = get_hook('rg_register_pre_email_confirm')) ? eval($hook) : null;		$languages = array();		$d = dir(FORUM_ROOT.'lang');		while (($entry = $d->read()) !== false)		{			if ($entry != '.' && $entry != '..' && is_dir(FORUM_ROOT.'lang/'.$entry) && file_exists(FORUM_ROOT.'lang/'.$entry.'/common.php'))				$languages[] = $entry;		}		$d->close();		($hook = get_hook('rg_register_pre_language')) ? eval($hook) : null;		// Only display the language selection box if there's more than one language available		if (count($languages) > 1)		{			natcasesort($languages);?>				<div class="sf-set set<?php echo ++$forum_page['item_count'] ?>">					<div class="sf-box select">						<label for="fld<?php echo ++$forum_page['fld_count'] ?>"><span><?php echo $lang_profile['Language'] ?></span></label><br />						<span class="fld-input"><select id="fld<?php echo $forum_page['fld_count'] ?>" name="language"><?php			$select_lang = isset($_POST['language']) ? $_POST['language'] : $forum_config['o_default_lang'];			foreach ($languages as $lang)			{				if ($select_lang == $lang)					echo "\t\t\t\t\t\t".'<option value="'.$lang.'" selected="selected">'.$lang.'</option>'."\n";				else					echo "\t\t\t\t\t\t".'<option value="'.$lang.'">'.$lang.'</option>'."\n";			}?>						</select></span>					</div>				</div><?php		}		($hook = get_hook('rg_register_pre_group_end')) ? eval($hook) : null;?>			</div><?php ($hook = get_hook('rg_register_group_end')) ? eval($hook) : null; ?>			<div class="frm-buttons">				<span class="submit"><input type="submit" name="register" value="<?php echo $lang_profile['Register'] ?>" /></span>			</div>		</form>	</div><?php($hook = get_hook('rg_end')) ? eval($hook) : null;$tpl_temp = forum_trim(ob_get_contents());$tpl_main = str_replace('<!-- forum_main -->', $tpl_temp, $tpl_main);ob_end_clean();// END SUBST - <!-- forum_main -->require FORUM_ROOT.'footer.php';
<?php/** * SEF URLs that use a folder-like layout. * * @copyright (C) 2008-2011 PunBB, partially based on code (C) 2008-2009 FluxBB.org * @license http://www.gnu.org/licenses/gpl.html GPL version 2 or higher * @package PunBB */// Make sure no one attempts to run this script "directly"if (!defined('FORUM'))	exit;// These are the simple folder based SEF URLs$forum_url = array(	'change_email'					=>	'change/email/$1/',	'change_email_key'				=>	'change/email/$1/$2/',	'change_password'				=>	'change/password/$1/',	'change_password_key'			=>	'change/password/$1/$2/',	'delete'						=>	'delete/$1/',	'delete_avatar'					=>	'delete/avatar/$1/$2/',	'delete_user'					=>	'delete/user/$1/',	'edit'							=>	'edit/$1/',	'email'							=>	'email/$1/',	'forum'							=>	'forum/$1/',	'forum_rss'						=>	'feed/rss/forum/$1/',	'forum_atom'					=>	'feed/atom/forum/$1/',	'help'							=>	'help/$1/',	'index'							=>	'',	'index_rss'						=>	'feed/rss/',	'index_atom'					=>	'feed/atom/',	'login'							=>	'login/',	'logout'						=>	'logout/$1/$2/',	'mark_read'						=>	'mark/read/$1/',	'mark_forum_read'				=>	'mark/forum/$1/read/$2/',	'new_topic'						=>	'new/topic/$1/',	'new_reply'						=>	'new/reply/$1/',	'post'							=>	'post/$1/#p$1',	'profile_about'					=>	'user/$1/about/',	'profile_identity'				=>	'user/$1/identity/',	'profile_settings'				=>	'user/$1/settings/',	'profile_avatar'				=>	'user/$1/avatar/',	'profile_signature'				=>	'user/$1/signature/',	'profile_admin'					=>	'user/$1/admin/',	'quote'							=>	'new/reply/$1/quote/$2/',	'register'						=>	'register/',	'report'						=>	'report/$1/',	'request_password'				=>	'request/password/',	'rules'							=>	'rules/',	'search'						=>	'search/',	'search_advanced'				=>	'search/advanced/',	'search_resultft'				=>	'search/k$1/$2/a$3/$4/$5/$6/$7/',	'search_results'				=>	'search/$1/',	'search_new'					=>	'search/new/',	'search_new_results'			=>	'search/new/$1/',	'search_recent'					=>	'search/recent/',	'search_recent_results'			=>	'search/recent/$1/',	'search_unanswered'				=>	'search/unanswered/',	'search_subscriptions'			=>	'search/subscriptions/$1/',	'search_user_posts'				=>	'search/posts/user/$1/',	'search_user_topics'			=>	'search/topics/user/$1/',	'subscribe'						=>	'subscribe/$1/$2/',	'topic'							=>	'topic/$1/',	'topic_rss'						=>	'feed/rss/topic/$1/',	'topic_atom'					=>	'feed/atom/topic/$1/',	'topic_new_posts'				=>	'topic/$1/new/posts/',	'topic_last_post'				=>	'topic/$1/last/post/',	'unsubscribe'					=>	'unsubscribe/$1/$2/',	'user'							=>	'user/$1/',	'users'							=>	'users/',	'users_browse'					=>	'users/$4/$1/$2/$3/',	'page'							=>	'page/$1/',	'moderate_forum'				=>	'moderate/$1/',	'get_host'						=>	'get_host/$1/',	'move'							=>	'move_topics/$1/$2/',	'open'							=>	'open/$1/$2/$3/',	'close'							=>	'close/$1/$2/$3/',	'stick'							=>	'stick/$1/$2/$3/',	'unstick'						=>	'unstick/$1/$2/$3/',	'moderate_topic'				=>	'moderate/$1/$2/',	'admin_index'					=>	'admin/index.php',	'admin_bans'					=>	'admin/bans.php?sort_by=1',	'admin_categories'				=>	'admin/categories.php',	'admin_censoring'				=>	'admin/censoring.php',	'admin_extensions_manage'		=>	'admin/extensions.php?section=manage',	'admin_extensions_hotfixes'		=>	'admin/extensions.php?section=hotfixes',	'admin_forums'					=>	'admin/forums.php',	'admin_groups'					=>	'admin/groups.php',	'admin_loader'					=>	'admin/loader.php',	'admin_reindex'					=>	'admin/reindex.php',	'admin_settings_setup'			=>	'admin/settings.php?section=setup',	'admin_settings_features'		=>	'admin/settings.php?section=features',	'admin_settings_content'		=>	'admin/settings.php?section=content',	'admin_settings_email'			=>	'admin/settings.php?section=email',	'admin_settings_announcements'	=>	'admin/settings.php?section=announcements',	'admin_settings_registration'	=>	'admin/settings.php?section=registration',	'admin_settings_communications'	=>	'admin/settings.php?section=communications',	'admin_settings_maintenance'	=>	'admin/settings.php?section=maintenance',	'admin_prune'					=>	'admin/prune.php',	'admin_ranks'					=>	'admin/ranks.php',	'admin_reports'					=>	'admin/reports.php',	'admin_users'					=>	'admin/users.php');
<?php// Language definitions used in help.php$lang_help = array('Help'					=>	'Help','Help with'				=>	'Help with %s','produces'				=>	'produces','BBCode info'			=>	'Administrators have the ability to enable or disable BBCode. If BBCode is enabled a link to BBCode help will appear when you compose/edit a post or your signature. BBCode is a collection of formatting tags that are used to change the look of text in this forum. BBCode is based on the same principal as, and is very similar to, HTML. Below is a list of all the available BBCodes and instructions on how to use them.','Image info'			=>	'Administrators have the ability to enable or disable the display of images in posts and/or signatures. If image display is enabled a link to Image help will appear when you compose/edit a post or your signature. Images are inserted using the BBCode [img] tag. The text appearing after the "=" sign in the opening tag is used for the alt attribute and should be included whenever possible.','Text style'			=>	'Text appearance can be changed with the following tags which can be nested.','Bold text'				=>	'Bold text','Underlined text'		=>	'Underlined text','Italic text'			=>	'Italic text','Red text'				=>	'Red text','Blue text'				=>	'Blue text','Heading text'			=>	'Heading text','Links info'			=>	'You can create links to other documents or to email addresses using the following tags:','My e-mail address'		=>	'My email address','Quotes info'			=>	'To quote someone use the quote tag. You can use the quote tag without specifying a name.','Quote text'			=>	'This is the text I want to quote.','produces named'		=>	'produces a quote box citing the person being quoted.','produces unnamed'		=>	'produces a bare quote box.','Code info'				=>	'When displaying source code you should make sure that you use the code tag. Text displayed with the code tag will use a monospaced font and will not be affected by other tags. Long items of code will cause the text to scroll.','Code text'				=>	'This is some code.','Code text long'		=>	'This is a long piece of code. This is a long piece of code. This is a long piece of code. This is a long piece of code. This is a long piece of code.','produces code box'		=>	'produces a code box.','produces scroll box'	=>	'produces a scrolling code box.','List info'				=>	'To create a list you can use the list tag. You can create 3 types of lists using the list tag.','List text 1'			=>	'Example list item 1.','List text 2'			=>	'Example list item 2.','List text 3'			=>	'Example list item 3.','produces list'			=>	'produces a bulleted list.','produces decimal list'	=>	'produces a numbered list.','produces alpha list'	=>	'produces an alphabetically labelled list.','Bold, underlined text'	=>	'Bold, underlined text','Smilies info'			=>	'If you like (and if it is enabled), the forum can convert a selection of smilies to image representations of those smilies. This forum recognizes the smilies listed below and replaces them with images.');
<?php/*** @version $Id: strcasecmp.php,v 1.1 2006/02/25 13:50:17 harryf Exp $* @package utf8* @subpackage strings*///---------------------------------------------------------------/*** UTF-8 aware alternative to strcasecmp* A case insensivite string comparison* Note: requires utf8_strtolower* @param string* @param string* @return int* @see http://www.php.net/strcasecmp* @see utf8_strtolower* @package utf8* @subpackage strings*/function utf8_strcasecmp($strX, $strY) {    $strX = utf8_strtolower($strX);    $strY = utf8_strtolower($strY);    return strcmp($strX, $strY);}
<?php/** * Loads the flash messenger class. * * @copyright (C) 2008-2011 PunBB, partially based on code (C) 2008-2009 FluxBB.org * @license http://www.gnu.org/licenses/gpl.html GPL version 2 or higher * @package PunBB */class FlashMessenger{	const TEMPLATE_MSG_BLOCK = '%s';	const TEMPLATE_MSG = '<span class="%s">%s</span>';	//	const MSG_TYPE_ERROR = 'message_error';	const MSG_TYPE_WARNING = 'message_warning';	const MSG_TYPE_INFO = 'message_info';	//	private $messages;	public function __construct()	{		session_cache_limiter('private_no_expire');		$result = session_start();		$this->messages = $this->get_messages();	}	// Add error message	public function add_error($msg)	{		$this->add_message($msg, self::MSG_TYPE_ERROR);	}	// Add warning message	public function add_warning($msg)	{		$this->add_message($msg, self::MSG_TYPE_WARNING);	}	// Add info message	public function add_info($msg)	{		$this->add_message($msg, self::MSG_TYPE_INFO);	}	//	public function show($just_return = false)	{		if (empty($this->messages))			return;		$messages_list = array();		foreach ($this->messages as $msg)		{			$messages_list[] = sprintf(self::TEMPLATE_MSG, $msg[1], $msg[0]);		}		if (!empty($messages_list))		{			$m = sprintf(self::TEMPLATE_MSG_BLOCK, implode('', $messages_list));			if ($just_return) {				$this->clear();				return $m;			}			echo $m;		}		$this->clear();	}	//	private function clear()	{		$this->messages = array();		$this->save_messages();	}	//	private function add_message($message, $type)	{		array_push($this->messages, array($message, $type));		$this->save_messages();	}	private function save_messages()	{		 $_SESSION['forum_flash'] = serialize($this->messages);	}	private function get_messages()	{		$messages = array();		if (isset($_SESSION['forum_flash'])) {			$tmp_messages = unserialize($_SESSION['forum_flash']);			if (is_array($tmp_messages))				$messages = $tmp_messages;		}		return $messages;	}}// Create the flash messenger adapter object$forum_flash = new FlashMessenger();
<?php// Language definitions used in index.php$lang_index = array('Moderated by'				=>  'Moderated by %s','Link to'					=>	'Link to %s',	// As in "Link to http://punbb.informer.com/"'Category subtitle'			=>	'%1$s in this category with details of %2$s','Forums'					=>	'Forums','Topics'					=>	'Topics','Posts'						=>	'Posts','Last post'					=>	'Last post:','last post'					=>	'last post','topics'					=>	'topics','topic'						=>	'topic','post'						=>	'post','posts'						=>	'posts','No topic info'				=>	'No topic information','No post info'				=>	'No post information','No lastpost info'			=>	'No last post information','Forum is empty'			=>	'This forum is empty','First post nag'			=>	'Be the first to post','Last poster'				=>	'by %s','Empty board'				=>	'Board is empty','Newest user'				=>	'Newest registered user: %s','No of users'				=>	'Total number of registered users: %s','No of topics'				=>	'Total number of topics: %s','No of posts'				=>	'Total number of posts: %s','Guests plural'				=>	'<strong>%s</strong> guests','Guests single'				=>	'<strong>1</strong> guest','Guests none'				=>	'<strong>0</strong> guests','Users plural'				=>	'<strong>%s</strong> registered users','Users single'				=>	'<strong>1</strong> registered user','Users none'				=>	'<strong>0</strong> registered users','Currently online'			=>	'Currently online ( %s )','Online stats separator'	=>	', ','Online list separator'		=>	', ','Statistics'				=>	'Forum statistics','External forum'			=>	'(This forum is located on an external site)','Forum has new'				=>	'( %s )','Forum new posts'			=>	'New posts','New posts title'			=>	'This forum contain posts made since your last visit.','Board options'				=>	'Board options','RSS active feed'			=>	'RSS active topics feed','Guests online'				=>	'Guests online','Users online'				=>	'Users online');
<?php/** * Loads the reserved strings used to transform problematic strings in URLs. * These are matched against the whole string after all other transformations. * * @copyright (C) 2008-2011 PunBB, partially based on code (C) 2008-2009 FluxBB.org * @license http://www.gnu.org/licenses/gpl.html GPL version 2 or higher * @package PunBB */$forum_reserved_strings = array(	''				=>	'view',	'newpost'		=>	'view',	'newposts'		=>	'view',	'new-post'		=>	'view',	'new-posts'		=>	'view',	'lastpost'		=>	'view',	'lastposts'		=>	'view',	'last-post'		=>	'view',	'last-posts'	=>	'view',);
<?php/** * Loads common functions used in the administration panel. * * @copyright (C) 2008-2011 PunBB, partially based on code (C) 2008-2009 FluxBB.org * @license http://www.gnu.org/licenses/gpl.html GPL version 2 or higher * @package PunBB */// Make sure no one attempts to run this script "directly"if (!defined('FORUM'))	exit;//// Display the admin navigation menu//function generate_admin_menu($submenu){	global $forum_config, $forum_url, $forum_user, $lang_admin_common, $db_type;	$return = ($hook = get_hook('ca_fn_generate_admin_menu_start')) ? eval($hook) : null;	if ($return != null)		return $return;	if ($submenu)	{		$forum_page['admin_submenu'] = array();		if ($forum_user['g_id'] != FORUM_ADMIN)		{			$forum_page['admin_submenu']['index'] = '<li class="'.((FORUM_PAGE == 'admin-information') ? 'active' : 'normal').((empty($forum_page['admin_submenu'])) ? ' first-item' : '').'"><a href="'.forum_link($forum_url['admin_index']).'">'.$lang_admin_common['Information'].'</span></a></li>';			$forum_page['admin_submenu']['users'] = '<li class="'.((FORUM_PAGE == 'admin-users') ? 'active' : 'normal').((empty($forum_page['admin_submenu'])) ? ' first-item' : '').'"><a href="'.forum_link($forum_url['admin_users']).'">'.$lang_admin_common['Searches'].'</a></li>';			if ($forum_config['o_censoring'] == '1')				$forum_page['admin_submenu']['censoring'] = '<li class="'.((FORUM_PAGE == 'admin-censoring') ? 'active' : 'normal').((empty($forum_page['admin_submenu'])) ? ' first-item' : '').'"><a href="'.forum_link($forum_url['admin_censoring']).'">'.$lang_admin_common['Censoring'].'</a></li>';			$forum_page['admin_submenu']['reports'] = '<li class="'.((FORUM_PAGE == 'admin-reports') ? 'active' : 'normal').((empty($forum_page['admin_submenu'])) ? ' first-item' : '').'"><a href="'.forum_link($forum_url['admin_reports']).'">'.$lang_admin_common['Reports'].'</a></li>';			if ($forum_user['g_mod_ban_users'] == '1')				$forum_page['admin_submenu']['bans'] = '<li class="'.((FORUM_PAGE == 'admin-bans') ? 'active' : 'normal').((empty($forum_page['admin_submenu'])) ? ' first-item' : '').'"><a href="'.forum_link($forum_url['admin_bans']).'">'.$lang_admin_common['Bans'].'</a></li>';		}		else		{			if (FORUM_PAGE_SECTION == 'start')			{				$forum_page['admin_submenu']['index'] = '<li class="'.((FORUM_PAGE == 'admin-information') ? 'active' : 'normal').((empty($forum_page['admin_submenu'])) ? ' first-item' : '').'"><a href="'.forum_link($forum_url['admin_index']).'">'.$lang_admin_common['Information'].'</a></li>';				$forum_page['admin_submenu']['categories'] = '<li class="'.((FORUM_PAGE == 'admin-categories') ? 'active' : 'normal').((empty($forum_page['admin_submenu'])) ? ' first-item' : '').'"><a href="'.forum_link($forum_url['admin_categories']).'">'.$lang_admin_common['Categories'].'</a></li>';				$forum_page['admin_submenu']['forums'] = '<li class="'.((FORUM_PAGE == 'admin-forums') ? 'active' : 'normal').((empty($forum_page['admin_submenu'])) ? ' first-item' : '').'"><a href="'.forum_link($forum_url['admin_forums']).'">'.$lang_admin_common['Forums'].'</a></li>';			}			else if (FORUM_PAGE_SECTION == 'users')			{				$forum_page['admin_submenu']['users'] = '<li class="'.((FORUM_PAGE == 'admin-users' || FORUM_PAGE == 'admin-uresults' || FORUM_PAGE == 'admin-iresults') ? 'active' : 'normal').((empty($forum_page['admin_submenu'])) ? ' first-item' : '').'"><a href="'.forum_link($forum_url['admin_users']).'">'.$lang_admin_common['Searches'].'</a></li>';				$forum_page['admin_submenu']['groups'] = '<li class="'.((FORUM_PAGE == 'admin-groups') ? 'active' : 'normal').((empty($forum_page['admin_submenu'])) ? ' first-item' : '').'"><a href="'.forum_link($forum_url['admin_groups']).'">'.$lang_admin_common['Groups'].'</a></li>';				$forum_page['admin_submenu']['ranks'] = '<li class="'.((FORUM_PAGE == 'admin-ranks') ? 'active' : 'normal').((empty($forum_page['admin_submenu'])) ? ' first-item' : '').'"><a href="'.forum_link($forum_url['admin_ranks']).'">'.$lang_admin_common['Ranks'].'</a></li>';				$forum_page['admin_submenu']['bans'] = '<li class="'.((FORUM_PAGE == 'admin-bans') ? 'active' : 'normal').((empty($forum_page['admin_submenu'])) ? ' first-item' : '').'"><a href="'.forum_link($forum_url['admin_bans']).'">'.$lang_admin_common['Bans'].'</a></li>';			}			else if (FORUM_PAGE_SECTION == 'settings')			{				$forum_page['admin_submenu']['settings_setup'] = '<li class="'.((FORUM_PAGE == 'admin-settings-setup') ? 'active' : 'normal').((empty($forum_page['admin_submenu'])) ? ' first-item' : '').'"><a href="'.forum_link($forum_url['admin_settings_setup']).'">'.$lang_admin_common['Setup'].'</a></li>';				$forum_page['admin_submenu']['settings_features'] = '<li class="'.((FORUM_PAGE == 'admin-settings-features') ? 'active' : 'normal').((empty($forum_page['admin_submenu'])) ? ' first-item' : '').'"><a href="'.forum_link($forum_url['admin_settings_features']).'">'.$lang_admin_common['Features'].'</a></li>';				$forum_page['admin_submenu']['settings-announcements'] = '<li class="'.((FORUM_PAGE == 'admin-settings-announcements') ? 'active' : 'normal').((empty($forum_page['admin_submenu'])) ? ' first-item' : '').'"><a href="'.forum_link($forum_url['admin_settings_announcements']).'">'.$lang_admin_common['Announcements'].'</a></li>';				$forum_page['admin_submenu']['settings-email'] = '<li class="'.((FORUM_PAGE == 'admin-settings-email') ? 'active' : 'normal').((empty($forum_page['admin_submenu'])) ? ' first-item' : '').'"><a href="'.forum_link($forum_url['admin_settings_email']).'">'.$lang_admin_common['E-mail'].'</a></li>';				$forum_page['admin_submenu']['settings-registration'] = '<li class="'.((FORUM_PAGE == 'admin-settings-registration') ? 'active' : 'normal').((empty($forum_page['admin_submenu'])) ? ' first-item' : '').'"><a href="'.forum_link($forum_url['admin_settings_registration']).'">'.$lang_admin_common['Registration'].'</a></li>';				$forum_page['admin_submenu']['censoring'] = '<li class="'.((FORUM_PAGE == 'admin-censoring') ? 'active' : 'normal').((empty($forum_page['admin_submenu'])) ? ' first-item' : '').'"><a href="'.forum_link($forum_url['admin_censoring']).'">'.$lang_admin_common['Censoring'].'</a></li>';			}			else if (FORUM_PAGE_SECTION == 'management')			{				$forum_page['admin_submenu']['reports'] = '<li class="'.((FORUM_PAGE == 'admin-reports') ? 'active' : 'normal').((empty($forum_page['admin_submenu'])) ? ' first-item' : '').'"><a href="'.forum_link($forum_url['admin_reports']).'">'.$lang_admin_common['Reports'].'</a></li>';				$forum_page['admin_submenu']['prune'] = '<li class="'.((FORUM_PAGE == 'admin-prune') ? 'active' : 'normal').((empty($forum_page['admin_submenu'])) ? ' first-item' : '').'"><a href="'.forum_link($forum_url['admin_prune']).'">'.$lang_admin_common['Prune topics'].'</a></li>';				$forum_page['admin_submenu']['reindex'] = '<li class="'.((FORUM_PAGE == 'admin-reindex') ? 'active' : 'normal').((empty($forum_page['admin_submenu'])) ? ' first-item' : '').'"><a href="'.forum_link($forum_url['admin_reindex']).'">'.$lang_admin_common['Rebuild index'].'</a></li>';				$forum_page['admin_submenu']['options-maintenance'] = '<li class="'.((FORUM_PAGE == 'admin-settings-maintenance') ? 'active' : 'normal').((empty($forum_page['admin_submenu'])) ? ' first-item' : '').'"><a href="'.forum_link($forum_url['admin_settings_maintenance']).'">'.$lang_admin_common['Maintenance mode'].'</a></li>';			}			else if (FORUM_PAGE_SECTION == 'extensions')			{				$forum_page['admin_submenu']['extensions-manage'] = '<li class="'.((FORUM_PAGE == 'admin-extensions-manage') ? 'active' : 'normal').((empty($forum_page['admin_submenu'])) ? ' first-item' : '').'"><a href="'.forum_link($forum_url['admin_extensions_manage']).'">'.$lang_admin_common['Manage extensions'].'</a></li>';				$forum_page['admin_submenu']['extensions-hotfixes'] = '<li class="'.((FORUM_PAGE == 'admin-extensions-hotfixes') ? 'active' : 'normal').((empty($forum_page['admin_submenu'])) ? ' first-item' : '').'"><a href="'.forum_link($forum_url['admin_extensions_hotfixes']).'">'.$lang_admin_common['Manage hotfixes'].'</a></li>';			}		}		($hook = get_hook('ca_fn_generate_admin_menu_new_sublink')) ? eval($hook) : null;		return (!empty($forum_page['admin_submenu'])) ? implode("\n\t\t", $forum_page['admin_submenu']) : '';	}	else	{		if ($forum_user['g_id'] != FORUM_ADMIN)			$forum_page['admin_menu']['index'] = '<li class="active first-item"><a href="'.forum_link($forum_url['admin_index']).'"><span>'.$lang_admin_common['Moderate'].'</span></a></li>';		else		{			$forum_page['admin_menu']['index'] = '<li class="'.((FORUM_PAGE_SECTION == 'start') ? 'active' : 'normal').((empty($forum_page['admin_menu'])) ? ' first-item' : '').'"><a href="'.forum_link($forum_url['admin_index']).'"><span>'.$lang_admin_common['Start'].'</span></a></li>';			$forum_page['admin_menu']['settings_setup'] = '<li class="'.((FORUM_PAGE_SECTION == 'settings') ? 'active' : 'normal').((empty($forum_page['admin_menu'])) ? ' first-item' : '').'"><a href="'.forum_link($forum_url['admin_settings_setup']).'"><span>'.$lang_admin_common['Settings'].'</span></a></li>';			$forum_page['admin_menu']['users'] = '<li class="'.((FORUM_PAGE_SECTION == 'users') ? 'active' : 'normal').((empty($forum_page['admin_menu'])) ? ' first-item' : '').'"><a href="'.forum_link($forum_url['admin_users']).'"><span>'.$lang_admin_common['Users'].'</span></a></li>';			$forum_page['admin_menu']['reports'] = '<li class="'.((FORUM_PAGE_SECTION == 'management') ? 'active' : 'normal').((empty($forum_page['admin_menu'])) ? ' first-item' : '').'"><a href="'.forum_link($forum_url['admin_reports']).'"><span>'.$lang_admin_common['Management'].'</span></a></li>';			$forum_page['admin_menu']['extensions_manage'] = '<li class="'.((FORUM_PAGE_SECTION == 'extensions') ? 'active' : 'normal').((empty($forum_page['admin_menu'])) ? ' first-item' : '').'"><a href="'.forum_link($forum_url['admin_extensions_manage']).'"><span>'.$lang_admin_common['Extensions'].'</span></a></li>';		}		($hook = get_hook('ca_fn_generate_admin_menu_new_link')) ? eval($hook) : null;		return implode("\n\t\t", $forum_page['admin_menu']);	}}//// Delete topics from $forum_id that are "older than" $prune_date (if $prune_sticky is 1, sticky topics will also be deleted)//function prune($forum_id, $prune_sticky, $prune_date){	global $forum_db, $db_type;	$return = ($hook = get_hook('ca_fn_prune_start')) ? eval($hook) : null;	if ($return != null)		return;	// Fetch topics to prune	$query = array(		'SELECT'	=> 't.id',		'FROM'		=> 'topics AS t',		'WHERE'		=> 't.forum_id='.$forum_id	);	if ($prune_date != -1)		$query['WHERE'] .= ' AND last_post<'.$prune_date;	if (!$prune_sticky)		$query['WHERE'] .= ' AND sticky=\'0\'';	($hook = get_hook('ca_fn_prune_qr_get_topics_to_prune')) ? eval($hook) : null;	$result = $forum_db->query_build($query) or error(__FILE__, __LINE__);	$topic_ids = array();	while ($row = $forum_db->fetch_row($result))		$topic_ids[] = $row[0];	if (!empty($topic_ids))	{		$topic_ids = implode(',', $topic_ids);		// Fetch posts to prune (used lated for updating the search index)		$query = array(			'SELECT'	=> 'p.id',			'FROM'		=> 'posts AS p',			'WHERE'		=> 'p.topic_id IN('.$topic_ids.')'		);		($hook = get_hook('ca_fn_prune_qr_get_posts_to_prune')) ? eval($hook) : null;		$result = $forum_db->query_build($query) or error(__FILE__, __LINE__);		$post_ids = array();		while ($row = $forum_db->fetch_row($result))			$post_ids[] = $row[0];		// Delete topics		$query = array(			'DELETE'	=> 'topics',			'WHERE'		=> 'id IN('.$topic_ids.')'		);		($hook = get_hook('ca_fn_prune_qr_prune_topics')) ? eval($hook) : null;		$forum_db->query_build($query) or error(__FILE__, __LINE__);		// Delete posts		$query = array(			'DELETE'	=> 'posts',			'WHERE'		=> 'topic_id IN('.$topic_ids.')'		);		($hook = get_hook('ca_fn_prune_qr_prune_posts')) ? eval($hook) : null;		$forum_db->query_build($query) or error(__FILE__, __LINE__);		// Delete subscriptions		$query = array(			'DELETE'	=> 'subscriptions',			'WHERE'		=> 'topic_id IN('.$topic_ids.')'		);		($hook = get_hook('ca_fn_prune_qr_prune_subscriptions')) ? eval($hook) : null;		$forum_db->query_build($query) or error(__FILE__, __LINE__);		// We removed a bunch of posts, so now we have to update the search index		if (!defined('FORUM_SEARCH_IDX_FUNCTIONS_LOADED'))			require FORUM_ROOT.'include/search_idx.php';		strip_search_index($post_ids);	}}// Add config value to forum config table// Warning!// This function dont refresh config cache - use "forum_clear_cache()" if// call this function outside install/uninstall extension manifest sectionfunction forum_config_add($name, $value){	global $forum_db, $forum_config;	if (!empty($name) && !isset($forum_config[$name]))	{		$query = array(			'INSERT'	=> 'conf_name, conf_value',			'INTO'		=> 'config',			'VALUES'	=> '\''.$name.'\', \''.$value.'\''		);		$forum_db->query_build($query) or error(__FILE__, __LINE__);	}}// Remove config value from forum config table// Warning!// This function dont refresh config cache - use "forum_clear_cache()" if// call this function outside install/uninstall extension manifest sectionfunction forum_config_remove($name){	global $forum_db;	if (!empty($name))	{		$query = array(			'DELETE'	=> 'config',			'WHERE'		=> 'conf_name=\''.$name.'\''		);		$forum_db->query_build($query) or error(__FILE__, __LINE__);	}}($hook = get_hook('ca_new_function')) ? eval($hook) : null;
<?php/** * SEF URLs that use a folder-like layout and include topic name and forum name * where applicable. * * @copyright (C) 2008-2011 PunBB, partially based on code (C) 2008-2009 FluxBB.org * @license http://www.gnu.org/licenses/gpl.html GPL version 2 or higher * @package PunBB */// Make sure no one attempts to run this script "directly"if (!defined('FORUM'))	exit;// These are the "fancy" folder based SEF URLs$forum_url = array(	'change_email'					=>	'change/email/$1/',	'change_email_key'				=>	'change/email/$1/$2/',	'change_password'				=>	'change/password/$1/',	'change_password_key'			=>	'change/password/$1/$2/',	'delete'						=>	'delete/$1/',	'delete_avatar'					=>	'delete/avatar/$1/$2/',	'delete_user'					=>	'delete/user/$1/',	'edit'							=>	'edit/$1/',	'email'							=>	'email/$1/',	'forum'							=>	'forum/$1/$2/',	'forum_rss'						=>	'feed/rss/forum/$1/',	'forum_atom'					=>	'feed/atom/forum/$1/',	'help'							=>	'help/$1/',	'index'							=>	'',	'index_rss'						=>	'feed/rss/',	'index_atom'					=>	'feed/atom/',	'login'							=>	'login/',	'logout'						=>	'logout/$1/$2/',	'mark_read'						=>	'mark/read/$1/',	'mark_forum_read'				=>	'mark/forum/$1/read/$2/',	'new_topic'						=>	'new/topic/$1/',	'new_reply'						=>	'new/reply/$1/',	'post'							=>	'post/$1/#p$1',	'profile_about'					=>	'user/$1/about/',	'profile_identity'				=>	'user/$1/identity/',	'profile_settings'				=>	'user/$1/settings/',	'profile_avatar'				=>	'user/$1/avatar/',	'profile_signature'				=>	'user/$1/signature/',	'profile_admin'					=>	'user/$1/admin/',	'quote'							=>	'new/reply/$1/quote/$2/',	'register'						=>	'register/',	'report'						=>	'report/$1/',	'request_password'				=>	'request/password/',	'rules'							=>	'rules/',	'search'						=>	'search/',	'search_advanced'				=>	'search/advanced/',	'search_resultft'				=>	'search/k$1/$2/a$3/$4/$5/$6/$7/',	'search_results'				=>	'search/$1/',	'search_new'					=>	'search/new/',	'search_new_results'			=>	'search/new/$1/',	'search_recent'					=>	'search/recent/',	'search_recent_results'			=>	'search/recent/$1/',	'search_unanswered'				=>	'search/unanswered/',	'search_subscriptions'			=>	'search/subscriptions/$1/',	'search_user_posts'				=>	'search/posts/user/$1/',	'search_user_topics'			=>	'search/topics/user/$1/',	'subscribe'						=>	'subscribe/$1/$2/',	'topic'							=>	'topic/$1/$2/',	'topic_rss'						=>	'feed/rss/topic/$1/',	'topic_atom'					=>	'feed/atom/topic/$1/',	'topic_new_posts'				=>	'topic/$1/$2/new/posts/',	'topic_last_post'				=>	'topic/$1/last/post/',	'unsubscribe'					=>	'unsubscribe/$1/$2/',	'user'							=>	'user/$1/',	'users'							=>	'users/',	'users_browse'					=>	'users/$4/$1/$2/$3/',	'page'							=>	'page/$1/',	'moderate_forum'				=>	'moderate/$1/',	'get_host'						=>	'get_host/$1/',	'move'							=>	'move_topics/$1/$2/',	'open'							=>	'open/$1/$2/$3/',	'close'							=>	'close/$1/$2/$3/',	'stick'							=>	'stick/$1/$2/$3/',	'unstick'						=>	'unstick/$1/$2/$3/',	'moderate_topic'				=>	'moderate/$1/$2/',	'admin_index'					=>	'admin/index.php',	'admin_bans'					=>	'admin/bans.php?sort_by=1',	'admin_categories'				=>	'admin/categories.php',	'admin_censoring'				=>	'admin/censoring.php',	'admin_extensions_manage'		=>	'admin/extensions.php?section=manage',	'admin_extensions_hotfixes'		=>	'admin/extensions.php?section=hotfixes',	'admin_forums'					=>	'admin/forums.php',	'admin_groups'					=>	'admin/groups.php',	'admin_loader'					=>	'admin/loader.php',	'admin_reindex'					=>	'admin/reindex.php',	'admin_settings_setup'			=>	'admin/settings.php?section=setup',	'admin_settings_features'		=>	'admin/settings.php?section=features',	'admin_settings_content'		=>	'admin/settings.php?section=content',	'admin_settings_email'			=>	'admin/settings.php?section=email',	'admin_settings_announcements'	=>	'admin/settings.php?section=announcements',	'admin_settings_registration'	=>	'admin/settings.php?section=registration',	'admin_settings_communications'	=>	'admin/settings.php?section=communications',	'admin_settings_maintenance'	=>	'admin/settings.php?section=maintenance',	'admin_prune'					=>	'admin/prune.php',	'admin_ranks'					=>	'admin/ranks.php',	'admin_reports'					=>	'admin/reports.php',	'admin_users'					=>	'admin/users.php');
<?php// Language definitions used in all admin files$lang_admin_users = array(// admin_users'Search head'					=>	'Find users','User search head'				=>	'Enter one or more criteria. Use wildcard character <strong>*</strong> for partial matches.','Searches personal legend'		=>	'Personal details','Username label'				=>	'Username','Title label'					=>	'Title','Real name label'				=>	'Real name','Location label'				=>	'Location','Signature label'				=>	'Signature','Admin note label'				=>	'Admin note','Searches contact legend'		=>	'Contact details','E-mail address label'			=>	'Email address','Website label'					=>	'Website','Searches activity legend'		=>	'User activity','More posts label'				=>	'More posts than','Less posts label'				=>	'Less posts than','Number of posts help'			=>	'(Number of posts)','Last post after label'			=>	'Last post is after','Last post before label'		=>	'Last post is before','Registered after label'		=>	'Registered after','Registered before label'		=>	'Registered before','Date format help'				=>	'[ yyyy-mm-dd hh:mm:ss ]','Jabber label'					=>	'Jabber','ICQ label'						=>	'ICQ','MSN Messenger label'			=>	'MSN Messenger','AOL IM label'					=>	'AOL IM','Yahoo Messenger label'			=>	'Yahoo! Messenger','User results head'				=>	'Sort user search results','User results legend'			=>	'Search results','Order by label'				=>	'Order by','Sort order label'				=>	'Sort order','User group label'				=>	'User group','IP search head'				=>	'Find a specific IP address in the post database','IP search legend'				=>	'Enter IP to search for','IP address label'				=>	'IP address','User information'				=>	'User information','IP address'					=>	'IP address','Username'						=>	'Username','E-mail'						=>	'Email','Admin note'					=>	'Admin note','Invalid IP address'			=>	'The IP address you entered is not correctly formatted.','Users matching criteria'		=>	'Results matching user search criteria','User IP stats'					=>	'IP statistics for user','IP matching criteria'			=>	'Results matching IP address','Users found'					=>	'Users found [ %s ]','IP addresses found'			=>	'IP addresses found [ %s ]','Moderate users'				=>	'Moderate users','Submit search'					=>	'Submit search','Not verified'					=>	'Not verified','Registered'					=>	'Registered','Last post'						=>	'Last post','Ascending'						=>	'Ascending','Descending'					=>	'Descending','All groups'					=>	'All groups','Unverified users'				=>	'Unverified users','Non numeric value message'		=>	'You entered a non-numeric value into a numeric only column.','Invalid date/time message'		=>	'You entered an invalid date/time.','No search terms message'		=>	'You didn\'t enter any search terms.','Delete users'					=>	'Delete users','Delete warning'				=>	'<strong>WARNING!</strong> Deleted users and/or posts cannot be restored. If you choose not to delete the posts made by these users, the posts can only be deleted manually at a later time.','Delete posts legend'			=>	'You may choose to delete posts these users have made','Confirm delete'				=>	'Confirm delete','Delete posts'					=>	'Delete posts','Delete posts label'			=>	'Enable to delete all posts and topics these users have made.','Users deleted'					=>	'Users deleted.','Ban'							=>	'Ban','Ban users'						=>	'Ban users','Change group'					=>	'Change group','Delete admin message'			=>	'Administrators cannot be deleted. In order to delete an administrator, you must first move him/her to a different user group.','Ban admin message'				=>	'One of the selected users is an administrator and can\'t be banned. If you want to ban an administrator, you must first move him/her to any other user group.','Users banned'					=>	'Users banned.','Mass ban info'					=>	'You may set a message to be displayed to the banned users and set the date their bans are to expire.','Ban settings legend'			=> 	'Ban users','Change group head'				=>	'Move the selected users to a new group','User groups updated'			=>	'User groups updated.','Move users legend'				=>	'Move users','No users selected'				=>	'No users selected.','Move users to label'			=>	'Move users to group',// admin_users tables'Username column'				=>	'Username  Email  Admin notes','Title column'					=>	'Title  Status','Posts'							=>	'Posts','Actions'						=>	'Action(s)','View IP stats'					=>	'View IP stats','Show posts'					=>	'Show posts','Last used'						=>	'Last used','Times found'					=>	'Times found','Find more users'				=>	'Find more users for this IP','No posts by user'				=>	'There are currently no posts by that user in the forum.','Guest'							=>	'Guest','Cannot find IP'				=>	'The supplied IP address could not be found in the database.','Not verified'					=>	'Not verified','No match'						=>	'No match','User search results'			=>	'User search results');
<?php/*** This is the dynamic loader for the library. It checks whether you have* the mbstring extension available and includes relevant files* on that basis, falling back to the native (as in written in PHP) version* if mbstring is unavailabe.** It's probably easiest to use this, if you don't want to understand* the dependencies involved, in conjunction with PHP versions etc. At* the same time, you might get better performance by managing loading* yourself. The smartest way to do this, bearing in mind performance,* is probably to "load on demand" - i.e. just before you use these* functions in your code, load the version you need.** It makes sure the the following functions are available;* utf8_strlen, utf8_strpos, utf8_strrpos, utf8_substr,* utf8_strtolower, utf8_strtoupper* Other functions in the ./native directory depend on these* six functions being available* * @license http://www.gnu.org/copyleft/lesser.html LGPL* @see http://sourceforge.net/projects/phputf8* @package utf8*//*** Put the current directory in this constant*/if ( !defined('UTF8') ) {    define('UTF8',dirname(__FILE__));}/*** If string overloading is active, it will break many of the* native implementations. mbstring.func_overload must be set* to 0, 1 or 4 in php.ini (string overloading disabled).* Also need to check we have the correct internal mbstring* encoding*/if ( extension_loaded('mbstring')) {    if ( ini_get('mbstring.func_overload') & MB_OVERLOAD_STRING ) {        trigger_error('String functions are overloaded by mbstring',E_USER_ERROR);    }    mb_internal_encoding('UTF-8');}/*** Check whether PCRE has been compiled with UTF-8 support*/$UTF8_ar = array();if ( preg_match('/^.{1}$/u',"",$UTF8_ar) != 1 ) {    trigger_error('PCRE is not compiled with UTF-8 support',E_USER_ERROR);}unset($UTF8_ar);/*** Load the smartest implementations of utf8_strpos, utf8_strrpos* and utf8_substr*/if ( !defined('UTF8_CORE') ) {    if ( function_exists('mb_substr') ) {        require_once UTF8 . '/mbstring/core.php';    } else {        require_once UTF8 . '/utils/unicode.php';        require_once UTF8 . '/native/core.php';    }}/*** Load the native implementation of utf8_substr_replace*/require_once UTF8 . '/substr_replace.php';/*** You should now be able to use all the other utf_* string functions*/
<?php// Language definitions used in all admin files$lang_admin_ranks = array('Rank head'						=>	'Add, edit or remove ranks','Rank'							=>	'Rank','Rank added'					=>	'Rank added.','Title message'					=>	'You must enter a rank title.','Min posts message'				=>	'Minimum posts must be a positive integer value.','Min posts occupied message'	=>	'There is already a rank with a minimum posts value of %s.','Rank updated'					=>	'Rank updated.','Rank removed'					=>	'Rank removed.','Add rank intro'				=>	'Enter a rank and the minimum number of posts that a user has to have to acquire the rank. Different ranks cannot have the same value for minimum posts. If a title is set for a user, the title will be displayed instead of any rank. For this to have any effect "<strong>User ranks</strong>" must be enabled in %s.','Add rank'						=>	'Add rank','Add rank legend'				=>	'New rank details','Rank title label'				=>	'Rank title','Min posts label'				=>	'Minimum posts','Existing ranks legend'			=>	'Edit or remove existing user ranks','No ranks'						=>	'No ranks in list.','Update'						=>	'Update','Remove'						=>	'Remove','New rank'						=>	'Add new rank','Existing rank'					=>	'Existing rank',);
<?php// Language definitions used in userlist.php$lang_ul = array('Users'					=>	'Users','Users found'			=>	'Users found matching your criteria','No users found'		=>	'No users were found matching your criteria','User search head'		=>	'Search for users by username or by predefined criteria','User results all'		=>	'All currently registered users','User results matching'	=>	'Currently registered users matching your criteria','User find legend'		=>	'Find users','Username'				=>	'Username','Search for username'	=>	'Username to search for','Username help'			=>	'May be left blank. Use wildcard character <strong>*</strong> for partial matches.','User group'			=>	'Show users from group','Sort users by'			=>	'Sort user list by','User sort order'		=>	'User list sort order','No of posts'			=>	'Number of posts','Registered'			=>	'Registration date','Ascending'				=>	'Ascending','Descending'			=>	'Descending','All users'				=>	'All users','Perform new search'	=>	'Perform new user search','Table summary'			=>	'List of users filtered and sorted according to the criteria (if any) you have chosen.','Submit user search'	=>	'Submit user criteria','Title'					=>	'Title','Posts'					=>	'Posts');
<?php// Language definitions used in viewtopic.php$lang_topic = array('Topic byline'			=>	'<span>Topic by </span>%s','Reply byline'			=>	'<span>Reply by </span>%s','Search replies'		=>	'(%s replies, posted in %s)','Post reply'			=>	'Post reply','Topic closed'			=>	'[ Closed ]','Topic closed info'		=>	'This topic is closed','No permission'			=>	'Sorry! no permission to post a reply','Topic title'			=>	'Topic: %s','Reply title'			=>	'Re: %s','Login to post'			=>	'You must %1$s or %2$s to post a reply','From'					=>	'From:', // User location'Registered'			=>	'Registered:','Note'					=>	'Note:', // Admin note'IP'					=>	'IP:','Posts'					=>	'Posts','Posts info'			=>	'Posts:','User possessive'		=>	'%s\'s', // As in "Author's Website"'Visit website'			=>	'%s Website','E-mail'				=>	'Email','Online'				=>	'Online','Offline'				=>	'Offline','Last edited'			=>	'Last edited by %1$s (%2$s)','Report'				=>	'Report','Delete'				=>	'Delete','Delete topic'			=>	'Delete topic','Edit'					=>	'Edit','Quote'					=>	'Quote','Unsubscribe'			=>	'Unsubscribe','Subscribe'				=>	'Subscribe','Subscribe info'		=>	'Receive email notification of new posts.','RSS topic feed'		=>	'RSS topic feed','Quick post'			=>	'Quick reply to this topic','Post'					=>	'Post','Permalink post'		=>	'Permanent link to this post','Permalink topic'		=>	'Permanent link to this topic','Go to profile'			=>	'Go to %s\'s profile','Move'					=>	'Move topic','Topic options'			=>	'Topic options','Open'					=>	'Open topic','Close'					=>	'Close topic','Unstick'				=>	'Unstick topic','Stick'					=>	'Stick topic','Moderate topic'		=>	'Moderate topic','Required warn'			=>	'You cannot submit or preview an empty message.',);
<?php/** * Post deletion page. * * Deletes the specified post (and, if necessary, the topic it is in). * * @copyright (C) 2008-2011 PunBB, partially based on code (C) 2008-2009 FluxBB.org * @license http://www.gnu.org/licenses/gpl.html GPL version 2 or higher * @package PunBB */if (!defined('FORUM_ROOT'))	define('FORUM_ROOT', './');require FORUM_ROOT.'include/common.php';($hook = get_hook('dl_start')) ? eval($hook) : null;if ($forum_user['g_read_board'] == '0')	message($lang_common['No view']);// Load the delete.php language filerequire FORUM_ROOT.'lang/'.$forum_user['language'].'/delete.php';$id = isset($_GET['id']) ? intval($_GET['id']) : 0;if ($id < 1)	message($lang_common['Bad request']);// Fetch some info about the post, the topic and the forum$query = array(	'SELECT'	=> 'f.id AS fid, f.forum_name, f.moderators, f.redirect_url, fp.post_replies, fp.post_topics, t.id AS tid, t.subject, t.first_post_id, t.closed, p.poster, p.poster_id, p.message, p.hide_smilies, p.posted',	'FROM'		=> 'posts AS p',	'JOINS'		=> array(		array(			'INNER JOIN'	=> 'topics AS t',			'ON'			=> 't.id=p.topic_id'		),		array(			'INNER JOIN'	=> 'forums AS f',			'ON'			=> 'f.id=t.forum_id'		),		array(			'LEFT JOIN'		=> 'forum_perms AS fp',			'ON'			=> '(fp.forum_id=f.id AND fp.group_id='.$forum_user['g_id'].')'		)	),	'WHERE'		=> '(fp.read_forum IS NULL OR fp.read_forum=1) AND p.id='.$id);($hook = get_hook('dl_qr_get_post_info')) ? eval($hook) : null;$result = $forum_db->query_build($query) or error(__FILE__, __LINE__);$cur_post = $forum_db->fetch_assoc($result);if (!$cur_post)	message($lang_common['Bad request']);// Sort out who the moderators are and if we are currently a moderator (or an admin)$mods_array = ($cur_post['moderators'] != '') ? unserialize($cur_post['moderators']) : array();$forum_page['is_admmod'] = ($forum_user['g_id'] == FORUM_ADMIN || ($forum_user['g_moderator'] == '1' && array_key_exists($forum_user['username'], $mods_array))) ? true : false;$cur_post['is_topic'] = ($id == $cur_post['first_post_id']) ? true : false;($hook = get_hook('dl_pre_permission_check')) ? eval($hook) : null;// Do we have permission to delete this post?if ((($forum_user['g_delete_posts'] == '0' && !$cur_post['is_topic']) ||	($forum_user['g_delete_topics'] == '0' && $cur_post['is_topic']) ||	$cur_post['poster_id'] != $forum_user['id'] ||	$cur_post['closed'] == '1') &&	!$forum_page['is_admmod'])	message($lang_common['No permission']);($hook = get_hook('dl_post_selected')) ? eval($hook) : null;// User pressed the cancel buttonif (isset($_POST['cancel']))	redirect(forum_link($forum_url['post'], $id), $lang_common['Cancel redirect']);// User pressed the delete buttonelse if (isset($_POST['delete'])){	($hook = get_hook('dl_form_submitted')) ? eval($hook) : null;	if (!isset($_POST['req_confirm']))		redirect(forum_link($forum_url['post'], $id), $lang_common['No confirm redirect']);	if ($cur_post['is_topic'])	{		// Delete the topic and all of it's posts		delete_topic($cur_post['tid'], $cur_post['fid']);		$forum_flash->add_info($lang_delete['Topic del redirect']);		($hook = get_hook('dl_topic_deleted_pre_redirect')) ? eval($hook) : null;		redirect(forum_link($forum_url['forum'], array($cur_post['fid'], sef_friendly($cur_post['forum_name']))), $lang_delete['Topic del redirect']);	}	else	{		// Delete just this one post		delete_post($id, $cur_post['tid'], $cur_post['fid']);		$forum_flash->add_info($lang_delete['Post del redirect']);		($hook = get_hook('dl_post_deleted_pre_redirect')) ? eval($hook) : null;		redirect(forum_link($forum_url['topic'], array($cur_post['tid'], sef_friendly($cur_post['subject']))), $lang_delete['Post del redirect']);	}}// Run the post through the parserif (!defined('FORUM_PARSER_LOADED'))	require FORUM_ROOT.'include/parser.php';$cur_post['message'] = parse_message($cur_post['message'], $cur_post['hide_smilies']);// Setup form$forum_page['group_count'] = $forum_page['item_count'] = $forum_page['fld_count'] = 0;$forum_page['form_action'] = forum_link($forum_url['delete'], $id);$forum_page['hidden_fields'] = array(	'form_sent'		=> '<input type="hidden" name="form_sent" value="1" />',	'csrf_token'	=> '<input type="hidden" name="csrf_token" value="'.generate_form_token($forum_page['form_action']).'" />');// Setup form information$forum_page['frm_info'] = array(	'<li><span>'.$lang_delete['Forum'].':<strong> '.forum_htmlencode($cur_post['forum_name']).'</strong></span></li>',	'<li><span>'.$lang_delete['Topic'].':<strong> '.forum_htmlencode($cur_post['subject']).'</strong></span></li>',	'<li><span>'.sprintf((($cur_post['is_topic']) ? $lang_delete['Delete topic info'] : $lang_delete['Delete post info']), forum_htmlencode($cur_post['poster']), format_time($cur_post['posted'])).'</span></li>');// Generate the post heading$forum_page['post_ident'] = array();$forum_page['post_ident']['byline'] = '<span class="post-byline">'.sprintf((($cur_post['is_topic']) ? $lang_delete['Topic byline'] : $lang_delete['Reply byline']), '<strong>'.forum_htmlencode($cur_post['poster']).'</strong>').'</span>';$forum_page['post_ident']['link'] = '<span class="post-link"><a class="permalink" href="'.forum_link($forum_url['post'], $cur_post['tid']).'">'.format_time($cur_post['posted']).'</a></span>';($hook = get_hook('dl_pre_item_ident_merge')) ? eval($hook) : null;// Generate the post titleif ($cur_post['is_topic'])	$forum_page['item_subject'] = sprintf($lang_delete['Topic title'], $cur_post['subject']);else	$forum_page['item_subject'] = sprintf($lang_delete['Reply title'], $cur_post['subject']);$forum_page['item_subject'] = forum_htmlencode($forum_page['item_subject']);// Setup breadcrumbs$forum_page['crumbs'] = array(	array($forum_config['o_board_title'], forum_link($forum_url['index'])),	array($cur_post['forum_name'], forum_link($forum_url['forum'], array($cur_post['fid'], sef_friendly($cur_post['forum_name'])))),	array($cur_post['subject'], forum_link($forum_url['topic'], array($cur_post['tid'], sef_friendly($cur_post['subject'])))),	(($cur_post['is_topic']) ? $lang_delete['Delete topic'] : $lang_delete['Delete post']));($hook = get_hook('dl_pre_header_load')) ? eval($hook) : null;define ('FORUM_PAGE', 'postdelete');require FORUM_ROOT.'header.php';// START SUBST - <!-- forum_main -->ob_start();($hook = get_hook('dl_main_output_start')) ? eval($hook) : null;?>	<div class="main-content main-frm">		<div class="ct-box info-box">			<ul class="info-list">				<?php echo implode("\n\t\t\t\t", $forum_page['frm_info'])."\n" ?>			</ul>		</div><?php ($hook = get_hook('dl_pre_post_display')) ? eval($hook) : null; ?>		<div class="post singlepost">			<div class="posthead">				<h3 class="hn post-ident"><?php echo implode(' ', $forum_page['post_ident']) ?></h3><?php ($hook = get_hook('dl_new_post_head_option')) ? eval($hook) : null; ?>			</div>			<div class="postbody">				<div class="post-entry">					<h4 class="entry-title hn"><?php echo $forum_page['item_subject'] ?></h4>					<div class="entry-content">						<?php echo $cur_post['message']."\n" ?>					</div><?php ($hook = get_hook('dl_new_post_entry_data')) ? eval($hook) : null; ?>				</div>			</div>		</div>		<form class="frm-form" method="post" accept-charset="utf-8" action="<?php echo $forum_page['form_action'] ?>">			<div class="hidden">				<?php echo implode("\n\t\t\t\t", $forum_page['hidden_fields'])."\n" ?>			</div><?php ($hook = get_hook('dl_pre_confirm_delete_fieldset')) ? eval($hook) : null; ?>			<fieldset class="frm-group group<?php echo ++$forum_page['group_count'] ?>">				<legend class="group-legend"><strong><?php echo ($cur_post['is_topic']) ? $lang_delete['Delete topic'] : $lang_delete['Delete post'] ?></strong></legend><?php ($hook = get_hook('dl_pre_confirm_delete_checkbox')) ? eval($hook) : null; ?>				<div class="sf-set set<?php echo ++$forum_page['item_count'] ?>">					<div class="sf-box checkbox">						<span class="fld-input"><input type="checkbox" id="fld<?php echo ++$forum_page['fld_count'] ?>" name="req_confirm" value="1" checked="checked" /></span>						<label for="fld<?php echo $forum_page['fld_count'] ?>"><span><?php echo $lang_delete['Please confirm'] ?></span> <?php printf(((($cur_post['is_topic'])) ? $lang_delete['Delete topic label'] : $lang_delete['Delete post label']), forum_htmlencode($cur_post['poster']), format_time($cur_post['posted'])) ?></label>					</div>				</div><?php ($hook = get_hook('dl_pre_confirm_delete_fieldset_end')) ? eval($hook) : null; ?>			</fieldset><?php ($hook = get_hook('dl_confirm_delete_fieldset_end')) ? eval($hook) : null; ?>			<div class="frm-buttons">				<span class="submit primary"><input type="submit" name="delete" value="<?php echo ($cur_post['is_topic']) ? $lang_delete['Delete topic'] : $lang_delete['Delete post'] ?>" /></span>				<span class="cancel"><input type="submit" name="cancel" value="<?php echo $lang_common['Cancel'] ?>" formnovalidate /></span>			</div>		</form>	</div><?php$forum_id = $cur_post['fid'];($hook = get_hook('dl_end')) ? eval($hook) : null;$tpl_temp = forum_trim(ob_get_contents());$tpl_main = str_replace('<!-- forum_main -->', $tpl_temp, $tpl_main);ob_end_clean();// END SUBST - <!-- forum_main -->require FORUM_ROOT.'footer.php';
<?php/** * Loads the regular expressions used to match SEF URL requests to their proper URLs. * * @copyright (C) 2008-2011 PunBB, partially based on code (C) 2008-2009 FluxBB.org * @license http://www.gnu.org/licenses/gpl.html GPL version 2 or higher * @package PunBB */$forum_rewrite_rules = array(	'/^topic[\/_-]?([0-9]+).*(new|last)[\/_-]?(posts?)(\.html?|\/)?$/i'														=>	'viewtopic.php?id=$1&action=$2',	'/^post[\/_-]?([0-9]+)(\.html?|\/)?$/i'																					=>	'viewtopic.php?pid=$1',	'/^(forum|topic)[\/_-]?([0-9]+).*[\/_-]p(age)?[\/_-]?([0-9]+)(\.html?|\/)?$/i'											=>	'view$1.php?id=$2&p=$4',	'/^feed[\/_-]?(rss|atom)[\/_-]?(f|t)(orum|opic)[\/_-]?([0-9]+)[\/_-]?(\.xml?|\/)?$/i'									=>	'extern.php?action=feed&$2id=$4&type=$1',	'/^(forum|topic)[\/_-]?([0-9]+).*(\.html?|\/)?$/i'																		=>	'view$1.php?id=$2',	'/^new[\/_-]?reply[\/_-]?([0-9]+)(\.html?|\/)?$/i'																		=>	'post.php?tid=$1',	'/^new[\/_-]?reply[\/_-]?([0-9]+)[\/_-]?quote[\/_-]?([0-9]+)(\.html?|\/)?$/i'											=>	'post.php?tid=$1&qid=$2',	'/^new[\/_-]?topic[\/_-]?([0-9]+)(\.html?|\/)?$/i'																		=>	'post.php?fid=$1',	'/^(delete|edit)[\/_-]?([0-9]+)(\.html?|\/)?$/i'																		=>	'$1.php?id=$2',	'/^(login|search|register)(\.html?|\/)?$/i'																				=>	'$1.php',	'/^logout[\/_-]?([0-9]+)[\/_-]([a-z0-9]+)(\.html?|\/)?$/i'																=>	'login.php?action=out&id=$1&csrf_token=$2',	'/^request[\/_-]?password(\.html?|\/)?$/i'																				=>	'login.php?action=forget',	'/^user[\/_-]?([0-9]+)(\.html?|\/)?$/i'																					=>	'profile.php?id=$1',	'/^user[\/_-]?([0-9]+)[\/_-]?([a-z]+)(\.html?|\/)?$/i'																	=>	'profile.php?section=$2&id=$1',	'/^(delete)[\/_-]?(avatar|user)?[\/_-]?([0-9]+)[\/_-]?([a-z0-9]+)?(\.html?|\/)?$/i'										=>	'profile.php?action=$1_$2&id=$3&csrf_token=$4',	'/^change[\/_-]?(email|pass)(word)?[\/_-]?([0-9]+)[\/_-]([a-zA-Z0-9]+)(\.html?|\/)?$/i'									=>	'profile.php?action=change_$1&id=$3&key=$4',	'/^change[\/_-]?(email|pass)(word)?[\/_-]?([0-9]+)(\.html?|\/)?$/i'														=>	'profile.php?action=change_$1&id=$3',	'/^search[\/_-]?(new)[\/_-]([0-9-]+)(\.html?|\/)?$/i'																	=>	'search.php?action=show_new&forum=$2',	'/^search[\/_-]?(new)[\/_-]([0-9-]+)[\/_-]p(age)?[\/_-]?([0-9]+)(\.html?|\/)?$/i'										=>	'search.php?action=show_new&forum=$2&p=$4',	'/^search[\/_-]?(recent)[\/_-]([0-9]+)(\.html?|\/)?$/i'																	=>	'search.php?action=show_recent&value=$2',	'/^search[\/_-]?(recent)[\/_-]([0-9]+)[\/_-]p(age)?[\/_-]?([0-9]+)(\.html?|\/)?$/i'										=>	'search.php?action=show_recent&value=$2&p=$4',	'/^search[\/_-]?(new|recent|unanswered)(\.html?|\/)?$/i'																=>	'search.php?action=show_$1',	'/^search[\/_-]?(new|recent|unanswered)[\/_-]p(age)?[\/_-]?([0-9]+)(\.html?|\/)?$/i'									=>	'search.php?action=show_$1&p=$3',	'/^search[\/_-]?subscriptions[\/_-]?([0-9]+)(\.html?|\/)?$/i'															=>	'search.php?action=show_subscriptions&user_id=$1',	'/^search[\/_-]?subscriptions[\/_-]?([0-9]+)[\/_-]p(age)?[\/_-]?([0-9]+)(\.html?|\/)?$/i'								=>	'search.php?action=show_subscriptions&user_id=$1&p=$3',	'/^search[\/_-]?([0-9]+)(\.html?|\/)?$/i'																				=>	'search.php?search_id=$1',	'/^search[\/_-]?([0-9]+)[\/_-]?p(age)?[\/_-]?([0-9]+)(\.html?|\/)?$/i'													=>	'search.php?search_id=$1&p=$3',	'/^search[\/_-]?(posts|topics)[\/_-]?user[\/_-]?([0-9]+)(\.html?|\/)?$/i'												=>	'search.php?action=show_user_$1&user_id=$2',	'/^search[\/_-]?(posts|topics)[\/_-]?user[\/_-]?([0-9]+)[\/_-]?p(age)?[\/_-]?([0-9]+)(\.html?|\/)?$/i'					=>	'search.php?action=show_user_$1&user_id=$2&p=$4',	'/^search\/k(.*)\/([0-9-]+)\/a(.*)\/(message|subject|all)\/([0-9]+)\/(ASC|DESC)\/(posts|topics)\/?$/i'					=>	'search.php?action=search&keywords=$1&author=$3&forum=$2&search_in=$4&sort_by=$5&sort_dir=$6&show_as=$7',	'/^search\/k(.*)\/([0-9-]+)\/a(.*)\/(message|subject|all)\/([0-9]+)\/(ASC|DESC)\/(posts|topics)\/page\/([0-9]+)\/?$/i'	=>	'search.php?action=search&keywords=$1&author=$3&forum=$2&search_in=$4&sort_by=$5&sort_dir=$6&show_as=$7&p=$8',	'/^search-k(.*)-([0-9-]+)-a(.*)-(message|subject|all)-([0-9]+)-(ASC|DESC)-(posts|topics).html?$/i'						=>	'search.php?action=search&keywords=$1&author=$3&forum=$2&search_in=$4&sort_by=$5&sort_dir=$6&show_as=$7',	'/^search-k(.*)-(message|subject|all)-a(.*)-([0-9]+)-(ASC|DESC)-([0-9-]+)-(posts|topics)-p([0-9]+).html?$/i'			=>	'search.php?action=search&keywords=$1&author=$3&forum=$6&search_in=$2&sort_by=$4&sort_dir=$5&show_as=$7&p=$8',	'/^users(\.html?|\/)?$/i'																								=>	'userlist.php',	'/^users\/(.*)\/([0-9-]+)\/?([a-z_]+)[\/_-]([a-zA-Z]+)[\/_-]p(age)?[\/_-]?([0-9]+)(\.html?|\/)?$/i'						=>	'userlist.php?username=$1&show_group=$2&sort_by=$3&sort_dir=$4&p=$6',	'/^users\/(.*)\/([0-9-]+)\/?([a-z_]+)[\/_-]([a-zA-Z]+)(\.html?|\/)?$/i'													=>	'userlist.php?username=$1&show_group=$2&sort_by=$3&sort_dir=$4',	'/^(email|report|subscribe|unsubscribe)[\/_-]?([0-9]+)[\/_-]?([a-z0-9]+)?(\.html?|\/)?$/i'								=>	'misc.php?$1=$2&csrf_token=$3',	'/^(mark|rules)[\/_-]?(read)?[\/_-]?([a-z0-9]+)?(\.html?|\/)?$/i'														=>	'misc.php?action=$1$2&csrf_token=$3',	'/^mark[\/_-](forum)[\/_-]?([0-9]+)[\/_-](read)[\/_-]([a-z0-9]+)(\.html?|\/)?$/i'										=>	'misc.php?action=markforumread&fid=$2&csrf_token=$4',	'/^help[\/_-]([a-z]+)(\.html?|\/)?$/i'																					=>	'help.php?section=$1',	'/^moderate[\/_-]?([0-9]+)(\.html?|\/)?$/i'																				=>	'moderate.php?fid=$1',	'/^move_topics[\/_-]?([0-9]+)[\/_-]([0-9]+)(\.html?|\/)?$/i'															=>	'moderate.php?fid=$1&move_topics=$2',	'/^(open|close|stick|unstick)[\/_-]?([0-9]+)[\/_-]([0-9]+)[\/_-]([a-z0-9]+)(\.html?|\/)?$/i'							=>	'moderate.php?fid=$2&$1=$3&csrf_token=$4',	'/^moderate[\/_-]?([0-9]+)[\/_-]?p(age)?[\/_-]?([0-9]+)(\.html?|\/)?$/i'												=>	'moderate.php?fid=$1&p=$3',	'/^moderate[\/_-]?([0-9]+)[\/_-]([0-9]+)(\.html?|\/)?$/i'																=>	'moderate.php?fid=$1&tid=$2',	'/^moderate[\/_-]?([0-9]+)[\/_-]([0-9]+)[\/_-]?p(age)?[\/_-]?([0-9]+)(\.html?|\/)?$/i'									=>	'moderate.php?fid=$1&tid=$2&p=$4',	'/^get_host[\/_-]?([0-9]+|[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3})(\.html?|\/)?$/i'								=>	'moderate.php?get_host=$1',	'/^feed[\/_-]?(rss|atom)(\.xml?|\/)?$/i'																				=>	'extern.php?action=feed&type=$1');
