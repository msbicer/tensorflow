<?php/** * A database layer class that relies on the MySQLi PHP extension. * * @copyright (C) 2008-2011 PunBB, partially based on code (C) 2008-2009 FluxBB.org * @license http://www.gnu.org/licenses/gpl.html GPL version 2 or higher * @package PunBB */// Make sure we have built in support for MySQLif (!function_exists('mysqli_connect'))	exit('This PHP environment doesn\'t have Improved MySQL (mysqli) support built in. Improved MySQL support is required if you want to use a MySQL 4.1 (or later) database to run this forum. Consult the PHP documentation for further assistance.');class DBLayer{	var $prefix;	var $link_id;	var $query_result;	var $saved_queries = array();	var $num_queries = 0;	var $datatype_transformations = array(		'/^SERIAL$/'	=>	'INT(10) UNSIGNED AUTO_INCREMENT'	);	function DBLayer($db_host, $db_username, $db_password, $db_name, $db_prefix, $foo)	{		$this->prefix = $db_prefix;		// Was a custom port supplied with $db_host?		if (strpos($db_host, ':') !== false)			list($db_host, $db_port) = explode(':', $db_host);		if (isset($db_port))			$this->link_id = @mysqli_connect($db_host, $db_username, $db_password, $db_name, $db_port);		else			$this->link_id = @mysqli_connect($db_host, $db_username, $db_password, $db_name);		if (!$this->link_id)			error('Unable to connect to MySQL and select database.<br/>MySQL reported: '.mysqli_connect_error(), __FILE__, __LINE__);		// Setup the client-server character set (UTF-8)		if (!defined('FORUM_NO_SET_NAMES'))			$this->set_names('utf8');		return $this->link_id;	}	function start_transaction()	{		return;	}	function end_transaction()	{		return;	}	function query($sql, $unbuffered = false)	{		if (strlen($sql) > 140000)			exit('Insane query. Aborting.');		if (defined('FORUM_SHOW_QUERIES'))			$q_start = forum_microtime();		$this->query_result = @mysqli_query($this->link_id, $sql);		if ($this->query_result)		{			if (defined('FORUM_SHOW_QUERIES'))				$this->saved_queries[] = array($sql, sprintf('%.5f', forum_microtime() - $q_start));			++$this->num_queries;			return $this->query_result;		}		else		{			if (defined('FORUM_SHOW_QUERIES'))				$this->saved_queries[] = array($sql, 0);			return false;		}	}	function query_build($query, $return_query_string = false, $unbuffered = false)	{		$sql = '';		if (isset($query['SELECT']))		{			$sql = 'SELECT '.$query['SELECT'].' FROM '.(isset($query['PARAMS']['NO_PREFIX']) ? '' : $this->prefix).$query['FROM'];			if (isset($query['JOINS']))			{				foreach ($query['JOINS'] as $cur_join)					$sql .= ' '.key($cur_join).' '.(isset($query['PARAMS']['NO_PREFIX']) ? '' : $this->prefix).current($cur_join).' ON '.$cur_join['ON'];			}			if (!empty($query['WHERE']))				$sql .= ' WHERE '.$query['WHERE'];			if (!empty($query['GROUP BY']))				$sql .= ' GROUP BY '.$query['GROUP BY'];			if (!empty($query['HAVING']))				$sql .= ' HAVING '.$query['HAVING'];			if (!empty($query['ORDER BY']))				$sql .= ' ORDER BY '.$query['ORDER BY'];			if (!empty($query['LIMIT']))				$sql .= ' LIMIT '.$query['LIMIT'];		}		else if (isset($query['INSERT']))		{			$sql = 'INSERT INTO '.(isset($query['PARAMS']['NO_PREFIX']) ? '' : $this->prefix).$query['INTO'];			if (!empty($query['INSERT']))				$sql .= ' ('.$query['INSERT'].')';			if (is_array($query['VALUES']))				$sql .= ' VALUES('.implode('),(', $query['VALUES']).')';			else				$sql .= ' VALUES('.$query['VALUES'].')';		}		else if (isset($query['UPDATE']))		{			$query['UPDATE'] = (isset($query['PARAMS']['NO_PREFIX']) ? '' : $this->prefix).$query['UPDATE'];			$sql = 'UPDATE '.$query['UPDATE'].' SET '.$query['SET'];			if (!empty($query['WHERE']))				$sql .= ' WHERE '.$query['WHERE'];		}		else if (isset($query['DELETE']))		{			$sql = 'DELETE FROM '.(isset($query['PARAMS']['NO_PREFIX']) ? '' : $this->prefix).$query['DELETE'];			if (!empty($query['WHERE']))				$sql .= ' WHERE '.$query['WHERE'];		}		else if (isset($query['REPLACE']))		{			$sql = 'REPLACE INTO '.(isset($query['PARAMS']['NO_PREFIX']) ? '' : $this->prefix).$query['INTO'];			if (!empty($query['REPLACE']))				$sql .= ' ('.$query['REPLACE'].')';			$sql .= ' VALUES('.$query['VALUES'].')';		}		return ($return_query_string) ? $sql : $this->query($sql, $unbuffered);	}	function result($query_id = 0, $row = 0, $col = 0)	{		if ($query_id)		{			if ($row)				@mysqli_data_seek($query_id, $row);			$cur_row = @mysqli_fetch_row($query_id);			return $cur_row[$col];		}		else			return false;	}	function fetch_assoc($query_id = 0)	{		return ($query_id) ? @mysqli_fetch_assoc($query_id) : false;	}	function fetch_row($query_id = 0)	{		return ($query_id) ? @mysqli_fetch_row($query_id) : false;	}	function num_rows($query_id = 0)	{		return ($query_id) ? @mysqli_num_rows($query_id) : false;	}	function affected_rows()	{		return ($this->link_id) ? @mysqli_affected_rows($this->link_id) : false;	}	function insert_id()	{		return ($this->link_id) ? @mysqli_insert_id($this->link_id) : false;	}	function get_num_queries()	{		return $this->num_queries;	}	function get_saved_queries()	{		return $this->saved_queries;	}	function free_result($query_id = false)	{		return ($query_id) ? @mysqli_free_result($query_id) : false;	}	function escape($str)	{		return is_array($str) ? '' : mysqli_real_escape_string($this->link_id, $str);	}	function error()	{		$result['error_sql'] = @current(@end($this->saved_queries));		$result['error_no'] = @mysqli_errno($this->link_id);		$result['error_msg'] = @mysqli_error($this->link_id);		return $result;	}	function close()	{		if ($this->link_id)		{			if ($this->query_result)				@mysqli_free_result($this->query_result);			return @mysqli_close($this->link_id);		}		else			return false;	}	function set_names($names)	{		return $this->query('SET NAMES \''.$this->escape($names).'\'');	}	function get_version()	{		$result = $this->query('SELECT VERSION()');		return array(			'name'		=> 'MySQL Improved',			'version'	=> preg_replace('/^([^-]+).*$/', '\\1', $this->result($result))		);	}	function table_exists($table_name, $no_prefix = false)	{		$result = $this->query('SHOW TABLES LIKE \''.($no_prefix ? '' : $this->prefix).$this->escape($table_name).'\'');		return $this->num_rows($result) > 0;	}	function field_exists($table_name, $field_name, $no_prefix = false)	{		$result = $this->query('SHOW COLUMNS FROM '.($no_prefix ? '' : $this->prefix).$table_name.' LIKE \''.$this->escape($field_name).'\'');		return $this->num_rows($result) > 0;	}	function index_exists($table_name, $index_name, $no_prefix = false)	{		$exists = false;		$result = $this->query('SHOW INDEX FROM '.($no_prefix ? '' : $this->prefix).$table_name);		while ($cur_index = $this->fetch_assoc($result))		{			if ($cur_index['Key_name'] == ($no_prefix ? '' : $this->prefix).$table_name.'_'.$index_name)			{				$exists = true;				break;			}		}		return $exists;	}	function create_table($table_name, $schema, $no_prefix = false)	{		if ($this->table_exists($table_name, $no_prefix))			return;		$query = 'CREATE TABLE '.($no_prefix ? '' : $this->prefix).$table_name." (\n";		// Go through every schema element and add it to the query		foreach ($schema['FIELDS'] as $field_name => $field_data)		{			$field_data['datatype'] = preg_replace(array_keys($this->datatype_transformations), array_values($this->datatype_transformations), $field_data['datatype']);			$query .= $field_name.' '.$field_data['datatype'];			if (isset($field_data['collation']))				$query .= 'CHARACTER SET utf8 COLLATE utf8_'.$field_data['collation'];			if (!$field_data['allow_null'])				$query .= ' NOT NULL';			if (isset($field_data['default']))				$query .= ' DEFAULT '.$field_data['default'];			$query .= ",\n";		}		// If we have a primary key, add it		if (isset($schema['PRIMARY KEY']))			$query .= 'PRIMARY KEY ('.implode(',', $schema['PRIMARY KEY']).'),'."\n";		// Add unique keys		if (isset($schema['UNIQUE KEYS']))		{			foreach ($schema['UNIQUE KEYS'] as $key_name => $key_fields)				$query .= 'UNIQUE KEY '.($no_prefix ? '' : $this->prefix).$table_name.'_'.$key_name.'('.implode(',', $key_fields).'),'."\n";		}		// Add indexes		if (isset($schema['INDEXES']))		{			foreach ($schema['INDEXES'] as $index_name => $index_fields)				$query .= 'KEY '.($no_prefix ? '' : $this->prefix).$table_name.'_'.$index_name.'('.implode(',', $index_fields).'),'."\n";		}		// We remove the last two characters (a newline and a comma) and add on the ending		$query = substr($query, 0, strlen($query) - 2)."\n".') ENGINE = '.(isset($schema['ENGINE']) ? $schema['ENGINE'] : 'MyISAM').' CHARACTER SET utf8';		$this->query($query) or error(__FILE__, __LINE__);	}	function drop_table($table_name, $no_prefix = false)	{		if (!$this->table_exists($table_name, $no_prefix))			return;		$this->query('DROP TABLE '.($no_prefix ? '' : $this->prefix).$table_name) or error(__FILE__, __LINE__);	}	function add_field($table_name, $field_name, $field_type, $allow_null, $default_value = null, $after_field = null, $no_prefix = false)	{		if ($this->field_exists($table_name, $field_name, $no_prefix))			return;		$field_type = preg_replace(array_keys($this->datatype_transformations), array_values($this->datatype_transformations), $field_type);		if ($default_value !== null && !is_int($default_value) && !is_float($default_value))			$default_value = '\''.$this->escape($default_value).'\'';		$this->query('ALTER TABLE '.($no_prefix ? '' : $this->prefix).$table_name.' ADD '.$field_name.' '.$field_type.($allow_null ? ' ' : ' NOT NULL').($default_value !== null ? ' DEFAULT '.$default_value : ' ').($after_field != null ? ' AFTER '.$after_field : '')) or error(__FILE__, __LINE__);	}	function alter_field($table_name, $field_name, $field_type, $allow_null, $default_value = null, $after_field = null, $no_prefix = false)	{		if (!$this->field_exists($table_name, $field_name, $no_prefix))			return;		$field_type = preg_replace(array_keys($this->datatype_transformations), array_values($this->datatype_transformations), $field_type);		if ($default_value !== null && !is_int($default_value) && !is_float($default_value))			$default_value = '\''.$this->escape($default_value).'\'';		$this->query('ALTER TABLE '.($no_prefix ? '' : $this->prefix).$table_name.' MODIFY '.$field_name.' '.$field_type.($allow_null ? ' ' : ' NOT NULL').($default_value !== null ? ' DEFAULT '.$default_value : ' ').($after_field != null ? ' AFTER '.$after_field : '')) or error(__FILE__, __LINE__);	}	function drop_field($table_name, $field_name, $no_prefix = false)	{		if (!$this->field_exists($table_name, $field_name, $no_prefix))			return;		$this->query('ALTER TABLE '.($no_prefix ? '' : $this->prefix).$table_name.' DROP '.$field_name) or error(__FILE__, __LINE__);	}	function add_index($table_name, $index_name, $index_fields, $unique = false, $no_prefix = false)	{		if ($this->index_exists($table_name, $index_name, $no_prefix))			return;		$this->query('ALTER TABLE '.($no_prefix ? '' : $this->prefix).$table_name.' ADD '.($unique ? 'UNIQUE ' : '').'INDEX '.($no_prefix ? '' : $this->prefix).$table_name.'_'.$index_name.' ('.implode(',', $index_fields).')') or error(__FILE__, __LINE__);	}	function drop_index($table_name, $index_name, $no_prefix = false)	{		if (!$this->index_exists($table_name, $index_name, $no_prefix))			return;		$this->query('ALTER TABLE '.($no_prefix ? '' : $this->prefix).$table_name.' DROP INDEX '.($no_prefix ? '' : $this->prefix).$table_name.'_'.$index_name) or error(__FILE__, __LINE__);	}}
<?php/** * Installation script. * * Used to actually install PunBB. * * @copyright (C) 2008-2011 PunBB, partially based on code (C) 2008-2009 FluxBB.org * @license http://www.gnu.org/licenses/gpl.html GPL version 2 or higher * @package PunBB */define('FORUM_VERSION', '1.4b1');define('FORUM_DB_REVISION', 5);define('MIN_PHP_VERSION', '5.0.0');define('MIN_MYSQL_VERSION', '4.1.2');define('FORUM_ROOT', '../');define('FORUM', 1);define('FORUM_DEBUG', 1);define('FORUM_SEARCH_MIN_WORD', 3);define('FORUM_SEARCH_MAX_WORD', 20);if (file_exists(FORUM_ROOT.'config.php'))	exit('The file \'config.php\' already exists which would mean that PunBB is already installed. You should go <a href="'.FORUM_ROOT.'index.php">here</a> instead.');// Make sure we are running at least MIN_PHP_VERSIONif (!function_exists('version_compare') || version_compare(PHP_VERSION, MIN_PHP_VERSION, '<'))	exit('You are running PHP version '.PHP_VERSION.'. PunBB requires at least PHP '.MIN_PHP_VERSION.' to run properly. You must upgrade your PHP installation before you can continue.');// Disable error reporting for uninitialized variableserror_reporting(E_ALL);// Turn off PHP time limit@set_time_limit(0);// We need some stuff from functions.phprequire FORUM_ROOT.'include/functions.php';// Load UTF-8 functionsrequire FORUM_ROOT.'include/utf8/utf8.php';require FORUM_ROOT.'include/utf8/ucwords.php';require FORUM_ROOT.'include/utf8/trim.php';// Strip out "bad" UTF-8 charactersforum_remove_bad_characters();//// Generate output to be used for config.php//function generate_config_file(){	global $db_type, $db_host, $db_name, $db_username, $db_password, $db_prefix, $base_url, $cookie_name;	$config_body = '<?php'."\n\n".'$db_type = \''.$db_type."';\n".'$db_host = \''.$db_host."';\n".'$db_name = \''.addslashes($db_name)."';\n".'$db_username = \''.addslashes($db_username)."';\n".'$db_password = \''.addslashes($db_password)."';\n".'$db_prefix = \''.addslashes($db_prefix)."';\n".'$p_connect = false;'."\n\n".'$base_url = \''.$base_url.'\';'."\n\n".'$cookie_name = '."'".$cookie_name."';\n".'$cookie_domain = '."'';\n".'$cookie_path = '."'/';\n".'$cookie_secure = 0;'."\n\ndefine('FORUM', 1);";	// Add forum options	$config_body .= "\n\n// Enable DEBUG mode by removing // from the following line\n//define('FORUM_DEBUG', 1);";	$config_body .= "\n\n// Enable show DB Queries mode by removing // from the following line\n//define('FORUM_SHOW_QUERIES', 1);";	$config_body .= "\n\n// Disable forum CSRF checking by removing // from the following line\n//define('FORUM_DISABLE_CSRF_CONFIRM', 1);";	$config_body .= "\n\n// Disable forum hooks (extensions) by removing // from the following line\n//define('FORUM_DISABLE_HOOKS', 1);";	$config_body .= "\n\n// Disable forum output buffering by removing // from the following line\n//define('FORUM_DISABLE_BUFFERING', 1);";	return $config_body;}$language = isset($_GET['lang']) ? $_GET['lang'] : (isset($_POST['req_language']) ? forum_trim($_POST['req_language']) : 'English');$language = preg_replace('#[\.\\\/]#', '', $language);if (!file_exists(FORUM_ROOT.'lang/'.$language.'/install.php'))	exit('The language pack you have chosen doesn\'t seem to exist or is corrupt. Please recheck and try again.');// Load the language filesrequire FORUM_ROOT.'lang/'.$language.'/install.php';require FORUM_ROOT.'lang/'.$language.'/admin_settings.php';if (isset($_POST['generate_config'])){	header('Content-Type: text/x-delimtext; name="config.php"');	header('Content-disposition: attachment; filename=config.php');	$db_type = $_POST['db_type'];	$db_host = $_POST['db_host'];	$db_name = $_POST['db_name'];	$db_username = $_POST['db_username'];	$db_password = $_POST['db_password'];	$db_prefix = $_POST['db_prefix'];	$base_url = $_POST['base_url'];	$cookie_name = $_POST['cookie_name'];	echo generate_config_file();	exit;}header('Content-Type: text/html; charset=utf-8');header('Cache-Control: cache-control: no-store', false);if (!isset($_POST['form_sent'])){	// Determine available database extensions	$db_extensions = array();	if (function_exists('mysqli_connect'))	{		$db_extensions[] = array('mysqli', 'MySQL Improved');		$db_extensions[] = array('mysqli_innodb', 'MySQL Improved (InnoDB)');	}	if (function_exists('mysql_connect'))	{		$db_extensions[] = array('mysql', 'MySQL Standard');		$db_extensions[] = array('mysql_innodb', 'MySQL Standard (InnoDB)');	}	if (function_exists('sqlite_open'))		$db_extensions[] = array('sqlite', 'SQLite');	/* Disabled in 1.4.0 becouse a many non-compability extensions	if (class_exists('SQLite3'))		$db_extensions[] = array('sqlite3', 'SQLite3');	*/	if (function_exists('pg_connect'))		$db_extensions[] = array('pgsql', 'PostgreSQL');	if (empty($db_extensions))		error($lang_install['No database support']);	// Make an educated guess regarding base_url	$base_url_guess = ((isset($_SERVER['HTTPS']) && $_SERVER['HTTPS'] == 'on') ? 'https://' : 'http://').preg_replace('/:80$/', '', $_SERVER['HTTP_HOST']).substr(str_replace('\\', '/', dirname($_SERVER['SCRIPT_NAME'])), 0, -6);	if (substr($base_url_guess, -1) == '/')		$base_url_guess = substr($base_url_guess, 0, -1);	// Check for available language packs	$languages = get_language_packs();?><!DOCTYPE html><html lang="en" dir="ltr"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8" /><title>PunBB Installation</title><link rel="stylesheet" type="text/css" href="<?php echo FORUM_ROOT ?>style/Oxygen/Oxygen.css" /><link rel="stylesheet" type="text/css" href="<?php echo FORUM_ROOT ?>style/Oxygen/Oxygen_cs.css" /><!--[if lte IE 6]><link rel="stylesheet" type="text/css" href="<?php echo FORUM_ROOT ?>style/Oxygen/Oxygen_ie6.css" /><![endif]--><!--[if IE 7]><link rel="stylesheet" type="text/css" href="<?php echo FORUM_ROOT ?>style/Oxygen/Oxygen_ie7.css" /><![endif]--></head><body><div id="brd-install" class="brd-page"><div id="brd-wrap" class="brd"><div id="brd-head" class="gen-content">	<p id="brd-title"><strong><?php printf($lang_install['Install PunBB'], FORUM_VERSION) ?></strong></p>	<p id="brd-desc"><?php echo $lang_install['Install intro'] ?></p></div><div id="brd-main" class="main">	<div class="main-head">		<h1 class="hn"><span><?php printf($lang_install['Install PunBB'], FORUM_VERSION) ?></span></h1>	</div><?php	if (count($languages) > 1)	{?>	<form class="frm-form" method="get" accept-charset="utf-8" action="install.php">	<div class="main-subhead">		<h2 class="hn"><span><?php echo $lang_install['Choose language'] ?></span></h2>	</div>	<div class="main-content main-frm">		<fieldset class="frm-group group1">			<legend class="group-legend"><strong><?php echo $lang_install['Choose language legend'] ?></strong></legend>			<div class="sf-set set1">				<div class="sf-box text">					<label for="fld0"><span><?php echo $lang_install['Installer language'] ?></span> <small><?php echo $lang_install['Choose language help'] ?></small></label><br />					<span class="fld-input"><select id="fld0" name="lang"><?php		foreach ($languages as $lang)			echo "\t\t\t\t\t".'<option value="'.$lang.'"'.($language == $lang ? ' selected="selected"' : '').'>'.$lang.'</option>'."\n";?>					</select></span>				</div>			</div>		</fieldset>		<div class="frm-buttons">			<span class="submit"><input type="submit" name="changelang" value="<?php echo $lang_install['Choose language'] ?>" /></span>		</div>	</div>	</form><?php	}?>	<form class="frm-form" method="post" accept-charset="utf-8" action="install.php">	<div class="hidden">		<input type="hidden" name="form_sent" value="1" />	</div>	<div class="main-subhead">		<h2 class="hn"><span><?php echo $lang_install['Part1'] ?></span></h2>	</div>	<div class="main-content main-frm">		<div class="ct-box info-box">			<p><?php echo $lang_install['Part1 intro'] ?></p>			<ul class="spaced list-clean">				<li><span><strong><?php echo $lang_install['Database type'] ?></strong> <?php echo $lang_install['Database type info']; if (count($db_extensions) > 1) echo ' '.$lang_install['Mysql type info'] ?></span></li>				<li><span><strong><?php echo $lang_install['Database server'] ?></strong> <?php echo $lang_install['Database server info'] ?></span></li>				<li><span><strong><?php echo $lang_install['Database name'] ?></strong> <?php echo $lang_install['Database name info'] ?></span></li>				<li><span><strong><?php echo $lang_install['Database user pass'] ?></strong> <?php echo $lang_install['Database username info'] ?></span></li>				<li><span><strong><?php echo $lang_install['Table prefix'] ?></strong> <?php echo $lang_install['Table prefix info'] ?></span></li>			</ul>		</div>		<div id="req-msg" class="req-warn ct-box error-box">			<p class="important"><?php printf($lang_install['Required warn'], '<em>'.$lang_install['Required'].'</em>') ?></p>		</div>		<fieldset class="frm-group group1">			<legend class="group-legend"><strong><?php echo $lang_install['Part1 legend'] ?></strong></legend>			<div class="sf-set set1">				<div class="sf-box select required">					<label for="req_db_type"><span><?php echo $lang_install['Database type'] ?></span> <small><?php echo $lang_install['Database type help'] ?></small></label><br />					<span class="fld-input"><select id="req_db_type" name="req_db_type"><?php	foreach ($db_extensions as $db_type)		echo "\t\t\t\t\t".'<option value="'.$db_type[0].'">'.$db_type[1].'</option>'."\n";?>					</select></span>				</div>			</div>			<div class="sf-set set1">				<div class="sf-box text required">					<label for="fld2"><span><?php echo $lang_install['Database server'] ?></span> <small><?php echo $lang_install['Database server help'] ?></small></label><br />					<span class="fld-input"><input id="fld2" type="text" name="req_db_host" value="localhost" size="35" maxlength="100" required /></span>				</div>			</div>			<div class="sf-set set2">				<div class="sf-box text required">					<label for="fld3"><span><?php echo $lang_install['Database name'] ?></span> <small><?php echo $lang_install['Database name help'] ?></small></label><br />					<span class="fld-input"><input id="fld3" type="text" name="req_db_name" size="35" maxlength="50" required /></span>				</div>			</div>			<div class="sf-set set3" id="db_username_block">				<div class="sf-box text">					<label for="fld4"><span><?php echo $lang_install['Database username'] ?></span> <small><?php echo $lang_install['Database username help'] ?></small></label><br />					<span class="fld-input"><input id="fld4" type="text" name="db_username" size="35" maxlength="50" /></span>				</div>			</div>			<div class="sf-set set4" id="db_password_block">				<div class="sf-box text">					<label for="fld5"><span><?php echo $lang_install['Database password'] ?></span> <small><?php echo $lang_install['Database password help'] ?></small></label><br />					<span class="fld-input"><input id="fld5" type="password" name="db_password" size="35" /></span>				</div>			</div>			<div class="sf-set set5">				<div class="sf-box text">					<label for="fld6"><span><?php echo $lang_install['Table prefix'] ?></span> <small><?php echo $lang_install['Table prefix help'] ?></small></label><br />					<span class="fld-input"><input id="fld6" type="text" name="db_prefix" size="35" maxlength="30" /></span>				</div>			</div>		</fieldset>	</div>	<div class="main-subhead">		<h2 class="hn"><span><?php echo $lang_install['Part2'] ?></span></h2>	</div>	<div class="main-content main-frm">		<div class="ct-box info-box">			<p><?php echo $lang_install['Part2 intro'] ?></p>		</div>		<fieldset class="frm-group group1">			<legend class="group-legend"><strong><?php echo $lang_install['Part2 legend'] ?></strong></legend>			<div class="sf-set set1">				<div class="sf-box text required">					<label for="fld7"><span><?php echo $lang_install['Admin username'] ?></span> <small><?php echo $lang_install['Username help'] ?></small></label><br />					<span class="fld-input"><input id="fld7" type="text" name="req_username" size="35" maxlength="25" required /></span>				</div>			</div>			<div class="sf-set set2">				<div class="sf-box text required">					<label for="fld8"><span><?php echo $lang_install['Admin password'] ?></span> <small><?php echo $lang_install['Password help'] ?></small></label><br />					<span class="fld-input"><input id="fld8" type="password" name="req_password1" size="35" required /></span>				</div>			</div>			<div class="sf-set set3">				<div class="sf-box text required">					<label for="fld9"><span><?php echo $lang_install['Admin confirm password'] ?></span> <small><?php echo $lang_install['Confirm password help'] ?></small></label><br />					<span class="fld-input"><input id="fld9" type="password" name="req_password2" size="35" required /></span>				</div>			</div>			<div class="sf-set set4">				<div class="sf-box text required">					<label for="fld10"><span><?php echo $lang_install['Admin e-mail'] ?></span> <small><?php echo $lang_install['E-mail address help'] ?></small></label><br />					<span class="fld-input"><input id="fld10" type="email" name="req_email" size="35" maxlength="80" required /></span>				</div>			</div>		</fieldset>	</div>	<div class="main-subhead">		<h2 class="hn"><span><?php echo $lang_install['Part3'] ?></span></h2>	</div>	<div class="main-content main-frm">		<div class="ct-box info-box">			<p><?php echo $lang_install['Part3 intro'] ?></p>			<ul class="spaced list-clean">				<li><span><strong><?php echo $lang_install['Board title and desc'] ?></strong> <?php echo $lang_install['Board title info'] ?></span></li>				<li><span><strong><?php echo $lang_install['Base URL'] ?></strong> <?php echo $lang_install['Base URL info'] ?></span></li>			</ul>		</div>		<fieldset class="frm-group group1">			<legend class="group-legend"><strong><?php echo $lang_install['Part3 legend'] ?></strong></legend>			<div class="sf-set set1">				<div class="sf-box text">					<label for="fld11"><span><?php echo $lang_install['Board title'] ?></span></label><br />					<span class="fld-input"><input id="fld11" type="text" name="board_title" size="35" maxlength="255" /></span>				</div>			</div>			<div class="sf-set set2">				<div class="sf-box text">					<label for="fld12"><span><?php echo $lang_install['Board description'] ?></span></label><br />					<span class="fld-input"><input id="fld12" type="text" name="board_descrip" size="35" maxlength="255" /></span>				</div>			</div>			<div class="sf-set set3">				<div class="sf-box text required">					<label for="fld13"><span><?php echo $lang_install['Base URL'] ?></span> <small><?php echo $lang_install['Base URL help'] ?></small></label><br />					<span class="fld-input"><input id="fld13" type="url" name="req_base_url" value="<?php echo $base_url_guess ?>" size="35" maxlength="100" required /></span>				</div>			</div><?php	if (count($languages) > 1)	{?>			<div class="sf-set set4">				<div class="sf-box text">					<label for="fld14"><span><?php echo $lang_install['Default language'] ?></span> <small><?php echo $lang_install['Default language help'] ?></small></label><br />					<span class="fld-input"><select id="fld14" name="req_language"><?php		foreach ($languages as $lang)			echo "\t\t\t\t\t".'<option value="'.$lang.'"'.($language == $lang ? ' selected="selected"' : '').'>'.$lang.'</option>'."\n";?>					</select></span>				</div>			</div><?php	}	else	{?>			<div class="hidden">				<input type="hidden" name="req_language" value="<?php echo $languages[0]; ?>" />			</div><?php	}	if (file_exists(FORUM_ROOT.'extensions/pun_repository/manifest.xml'))	{?>			<div class="sf-set set5">				<div class="sf-box checkbox">					<span class="fld-input"><input id="fld15" type="checkbox" name="install_pun_repository" value="1" checked="checked" /></span>					<label for="fld15"><span><?php echo $lang_install['Pun repository'] ?></span> <?php echo $lang_install['Pun repository help'] ?></label><br />				</div>			</div><?php	}?>		</fieldset>		<div class="frm-buttons">			<span class="submit primary"><input type="submit" name="start" value="<?php echo $lang_install['Start install'] ?>" /></span>		</div>	</div>	</form></div></div></div>	<script src="<?php echo FORUM_ROOT ?>include/js/punbb.common.js"></script>	<script src="<?php echo FORUM_ROOT ?>include/js/punbb.install.js"></script></body></html><?php}else{	//	// Strip slashes only if magic_quotes_gpc is on.	//	function unescape($str)	{		return (get_magic_quotes_gpc() == 1) ? stripslashes($str) : $str;	}	$db_type = $_POST['req_db_type'];	$db_host = forum_trim($_POST['req_db_host']);	$db_name = forum_trim($_POST['req_db_name']);	$db_username = unescape(forum_trim($_POST['db_username']));	$db_password = unescape(forum_trim($_POST['db_password']));	$db_prefix = forum_trim($_POST['db_prefix']);	$username = unescape(forum_trim($_POST['req_username']));	$email = unescape(strtolower(forum_trim($_POST['req_email'])));	$password1 = unescape(forum_trim($_POST['req_password1']));	$password2 = unescape(forum_trim($_POST['req_password2']));	$board_title = unescape(forum_trim($_POST['board_title']));	$board_descrip = unescape(forum_trim($_POST['board_descrip']));	$default_lang = preg_replace('#[\.\\\/]#', '', unescape(forum_trim($_POST['req_language'])));	$install_pun_repository = !empty($_POST['install_pun_repository']);	// Make sure base_url doesn't end with a slash	if (substr($_POST['req_base_url'], -1) == '/')		$base_url = substr($_POST['req_base_url'], 0, -1);	else		$base_url = $_POST['req_base_url'];	// Validate form	if (utf8_strlen($db_name) == 0)		error($lang_install['Missing database name']);	if (utf8_strlen($username) < 2)		error($lang_install['Username too short']);	if (utf8_strlen($username) > 25)		error($lang_install['Username too long']);	if (utf8_strlen($password1) < 8)		error($lang_install['Pass too short']);	if ($password1 != $password2)		error($lang_install['Pass not match']);	if (strtolower($username) == 'guest')		error($lang_install['Username guest']);	if (preg_match('/[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}/', $username) || preg_match('/((([0-9A-Fa-f]{1,4}:){7}[0-9A-Fa-f]{1,4})|(([0-9A-Fa-f]{1,4}:){6}:[0-9A-Fa-f]{1,4})|(([0-9A-Fa-f]{1,4}:){5}:([0-9A-Fa-f]{1,4}:)?[0-9A-Fa-f]{1,4})|(([0-9A-Fa-f]{1,4}:){4}:([0-9A-Fa-f]{1,4}:){0,2}[0-9A-Fa-f]{1,4})|(([0-9A-Fa-f]{1,4}:){3}:([0-9A-Fa-f]{1,4}:){0,3}[0-9A-Fa-f]{1,4})|(([0-9A-Fa-f]{1,4}:){2}:([0-9A-Fa-f]{1,4}:){0,4}[0-9A-Fa-f]{1,4})|(([0-9A-Fa-f]{1,4}:){6}((\b((25[0-5])|(1\d{2})|(2[0-4]\d)|(\d{1,2}))\b)\.){3}(\b((25[0-5])|(1\d{2})|(2[0-4]\d)|(\d{1,2}))\b))|(([0-9A-Fa-f]{1,4}:){0,5}:((\b((25[0-5])|(1\d{2})|(2[0-4]\d)|(\d{1,2}))\b)\.){3}(\b((25[0-5])|(1\d{2})|(2[0-4]\d)|(\d{1,2}))\b))|(::([0-9A-Fa-f]{1,4}:){0,5}((\b((25[0-5])|(1\d{2})|(2[0-4]\d)|(\d{1,2}))\b)\.){3}(\b((25[0-5])|(1\d{2})|(2[0-4]\d)|(\d{1,2}))\b))|([0-9A-Fa-f]{1,4}::([0-9A-Fa-f]{1,4}:){0,5}[0-9A-Fa-f]{1,4})|(::([0-9A-Fa-f]{1,4}:){0,6}[0-9A-Fa-f]{1,4})|(([0-9A-Fa-f]{1,4}:){1,7}:))/', $username))		error($lang_install['Username IP']);	if ((strpos($username, '[') !== false || strpos($username, ']') !== false) && strpos($username, '\'') !== false && strpos($username, '"') !== false)		error($lang_install['Username reserved chars']);	if (preg_match('/(?:\[\/?(?:b|u|i|h|colou?r|quote|code|img|url|email|list)\]|\[(?:code|quote|list)=)/i', $username))		error($lang_install['Username BBCode']);	// Validate email	if (!defined('FORUM_EMAIL_FUNCTIONS_LOADED'))		require FORUM_ROOT.'include/email.php';	if (!is_valid_email($email))		error($lang_install['Invalid email']);	// Make sure board title and description aren't left blank	if ($board_title == '')		$board_title = 'My PunBB forum';	if ($board_descrip == '')		$board_descrip = 'Unfortunately no one can be told what PunBB is  you have to see it for yourself';	if (utf8_strlen($base_url) == 0)		error($lang_install['Missing base url']);	if (!file_exists(FORUM_ROOT.'lang/'.$default_lang.'/common.php'))		error($lang_install['Invalid language']);	// Load the appropriate DB layer class	switch ($db_type)	{		case 'mysql':			require FORUM_ROOT.'include/dblayer/mysql.php';			break;		case 'mysql_innodb':			require FORUM_ROOT.'include/dblayer/mysql_innodb.php';			break;		case 'mysqli':			require FORUM_ROOT.'include/dblayer/mysqli.php';			break;		case 'mysqli_innodb':			require FORUM_ROOT.'include/dblayer/mysqli_innodb.php';			break;		case 'pgsql':			require FORUM_ROOT.'include/dblayer/pgsql.php';			break;		case 'sqlite':			require FORUM_ROOT.'include/dblayer/sqlite.php';			break;		case 'sqlite3':			require FORUM_ROOT.'include/dblayer/sqlite3.php';			break;		default:			error(sprintf($lang_install['No such database type'], forum_htmlencode($db_type)));	}	// Create the database object (and connect/select db)	$forum_db = new DBLayer($db_host, $db_username, $db_password, $db_name, $db_prefix, false);	// If MySQL, make sure it's at least 4.1.2	if (in_array($db_type, array('mysql', 'mysqli', 'mysql_innodb', 'mysqli_innodb')))	{		$mysql_info = $forum_db->get_version();		if (version_compare($mysql_info['version'], MIN_MYSQL_VERSION, '<'))			error(sprintf($lang_install['Invalid MySQL version'], forum_htmlencode($mysql_info['version']), MIN_MYSQL_VERSION));		// Check InnoDB support in DB		if (in_array($db_type, array('mysql_innodb', 'mysqli_innodb')))		{			$result = $forum_db->query('SHOW VARIABLES LIKE \'have_innodb\'');			$row = $forum_db->fetch_assoc($result);			if (!$row || !isset($row['Value']) || strtolower($row['Value']) != 'yes')			{				error($lang_install['MySQL InnoDB Not Supported']);			}		}	}	// Validate prefix	if (strlen($db_prefix) > 0 && (!preg_match('/^[a-zA-Z_][a-zA-Z0-9_]*$/', $db_prefix) || strlen($db_prefix) > 40))		error(sprintf($lang_install['Invalid table prefix'], $db_prefix));	// Check SQLite prefix collision	if (in_array($db_type, array('sqlite', 'sqlite3')) && strtolower($db_prefix) == 'sqlite_')		error($lang_install['SQLite prefix collision']);	// Make sure PunBB isn't already installed	if ($forum_db->table_exists('users'))	{		$query = array(			'SELECT'	=> 'COUNT(id)',			'FROM'		=> 'users',			'WHERE'		=> 'id=1'		);		$result = $forum_db->query_build($query);		if ($forum_db->result($result))			error(sprintf($lang_install['PunBB already installed'], $db_prefix, $db_name));	}	// Start a transaction	$forum_db->start_transaction();	// Create all tables	$schema = array(		'FIELDS'		=> array(			'id'			=> array(				'datatype'		=> 'SERIAL',				'allow_null'	=> false			),			'username'		=> array(				'datatype'		=> 'VARCHAR(200)',				'allow_null'	=> true			),			'ip'			=> array(				'datatype'		=> 'VARCHAR(255)',				'allow_null'	=> true			),			'email'			=> array(				'datatype'		=> 'VARCHAR(80)',				'allow_null'	=> true			),			'message'		=> array(				'datatype'		=> 'VARCHAR(255)',				'allow_null'	=> true			),			'expire'		=> array(				'datatype'		=> 'INT(10) UNSIGNED',				'allow_null'	=> true			),			'ban_creator'	=> array(				'datatype'		=> 'INT(10) UNSIGNED',				'allow_null'	=> false,				'default'		=> '0'			)		),		'PRIMARY KEY'	=> array('id')	);	$forum_db->create_table('bans', $schema);	$schema = array(		'FIELDS'		=> array(			'id'			=> array(				'datatype'		=> 'SERIAL',				'allow_null'	=> false			),			'cat_name'		=> array(				'datatype'		=> 'VARCHAR(80)',				'allow_null'	=> false,				'default'		=> '\'New Category\''			),			'disp_position'	=> array(				'datatype'		=> 'INT(10)',				'allow_null'	=> false,				'default'		=> '0'			)		),		'PRIMARY KEY'	=> array('id')	);	$forum_db->create_table('categories', $schema);	$schema = array(		'FIELDS'		=> array(			'id'			=> array(				'datatype'		=> 'SERIAL',				'allow_null'	=> false			),			'search_for'	=> array(				'datatype'		=> 'VARCHAR(60)',				'allow_null'	=> false,				'default'		=> '\'\''			),			'replace_with'	=> array(				'datatype'		=> 'VARCHAR(60)',				'allow_null'	=> false,				'default'		=> '\'\''			)		),		'PRIMARY KEY'	=> array('id')	);	$forum_db->create_table('censoring', $schema);	$schema = array(		'FIELDS'		=> array(			'conf_name'		=> array(				'datatype'		=> 'VARCHAR(255)',				'allow_null'	=> false,				'default'		=> '\'\''			),			'conf_value'	=> array(				'datatype'		=> 'TEXT',				'allow_null'	=> true			)		),		'PRIMARY KEY'	=> array('conf_name')	);	$forum_db->create_table('config', $schema);	$schema = array(		'FIELDS'		=> array(			'id'				=> array(				'datatype'		=> 'VARCHAR(150)',				'allow_null'	=> false,				'default'		=> '\'\''			),			'title'				=> array(				'datatype'		=> 'VARCHAR(255)',				'allow_null'	=> false,				'default'		=> '\'\''			),			'version'			=> array(				'datatype'		=> 'VARCHAR(25)',				'allow_null'	=> false,				'default'		=> '\'\''			),			'description'		=> array(				'datatype'		=> 'TEXT',				'allow_null'	=> true			),			'author'			=> array(				'datatype'		=> 'VARCHAR(50)',				'allow_null'	=> false,				'default'		=> '\'\''			),			'uninstall'			=> array(				'datatype'		=> 'TEXT',				'allow_null'	=> true			),			'uninstall_note'	=> array(				'datatype'		=> 'TEXT',				'allow_null'	=> true			),			'disabled'			=> array(				'datatype'		=> 'TINYINT(1)',				'allow_null'	=> false,				'default'		=> '0'			),			'dependencies'		=> array(				'datatype'		=> 'VARCHAR(255)',				'allow_null'	=> false,				'default'		=> '\'\''			)		),		'PRIMARY KEY'	=> array('id')	);	$forum_db->create_table('extensions', $schema);	$schema = array(		'FIELDS'		=> array(			'id'			=> array(				'datatype'		=> 'VARCHAR(150)',				'allow_null'	=> false,				'default'		=> '\'\''			),			'extension_id'	=> array(				'datatype'		=> 'VARCHAR(50)',				'allow_null'	=> false,				'default'		=> '\'\''			),			'code'			=> array(				'datatype'		=> 'TEXT',				'allow_null'	=> true			),			'installed'		=> array(				'datatype'		=> 'INT(10) UNSIGNED',				'allow_null'	=> false,				'default'		=> '0'			),			'priority'		=> array(				'datatype'		=> 'TINYINT(1) UNSIGNED',				'allow_null'	=> false,				'default'		=> '5'			)		),		'PRIMARY KEY'	=> array('id', 'extension_id')	);	$forum_db->create_table('extension_hooks', $schema);	$schema = array(		'FIELDS'		=> array(			'group_id'		=> array(				'datatype'		=> 'INT(10)',				'allow_null'	=> false,				'default'		=> '0'			),			'forum_id'		=> array(				'datatype'		=> 'INT(10)',				'allow_null'	=> false,				'default'		=> '0'			),			'read_forum'	=> array(				'datatype'		=> 'TINYINT(1)',				'allow_null'	=> false,				'default'		=> '1'			),			'post_replies'	=> array(				'datatype'		=> 'TINYINT(1)',				'allow_null'	=> false,				'default'		=> '1'			),			'post_topics'	=> array(				'datatype'		=> 'TINYINT(1)',				'allow_null'	=> false,				'default'		=> '1'			)		),		'PRIMARY KEY'	=> array('group_id', 'forum_id')	);	$forum_db->create_table('forum_perms', $schema);	$schema = array(		'FIELDS'		=> array(			'id'			=> array(				'datatype'		=> 'SERIAL',				'allow_null'	=> false			),			'forum_name'	=> array(				'datatype'		=> 'VARCHAR(80)',				'allow_null'	=> false,				'default'		=> '\'New forum\''			),			'forum_desc'	=> array(				'datatype'		=> 'TEXT',				'allow_null'	=> true			),			'redirect_url'	=> array(				'datatype'		=> 'VARCHAR(100)',				'allow_null'	=> true			),			'moderators'	=> array(				'datatype'		=> 'TEXT',				'allow_null'	=> true			),			'num_topics'	=> array(				'datatype'		=> 'MEDIUMINT(8) UNSIGNED',				'allow_null'	=> false,				'default'		=> '0'			),			'num_posts'		=> array(				'datatype'		=> 'MEDIUMINT(8) UNSIGNED',				'allow_null'	=> false,				'default'		=> '0'			),			'last_post'		=> array(				'datatype'		=> 'INT(10) UNSIGNED',				'allow_null'	=> true			),			'last_post_id'	=> array(				'datatype'		=> 'INT(10) UNSIGNED',				'allow_null'	=> true			),			'last_poster'	=> array(				'datatype'		=> 'VARCHAR(200)',				'allow_null'	=> true			),			'sort_by'		=> array(				'datatype'		=> 'TINYINT(1)',				'allow_null'	=> false,				'default'		=> '0'			),			'disp_position'	=> array(				'datatype'		=> 'INT(10)',				'allow_null'	=> false,				'default'		=>	'0'			),			'cat_id'		=> array(				'datatype'		=> 'INT(10) UNSIGNED',				'allow_null'	=> false,				'default'		=>	'0'			)		),		'PRIMARY KEY'	=> array('id')	);	$forum_db->create_table('forums', $schema);	$schema = array(		'FIELDS'		=> array(			'g_id'						=> array(				'datatype'		=> 'SERIAL',				'allow_null'	=> false			),			'g_title'					=> array(				'datatype'		=> 'VARCHAR(50)',				'allow_null'	=> false,				'default'		=> '\'\''			),			'g_user_title'				=> array(				'datatype'		=> 'VARCHAR(50)',				'allow_null'	=> true			),			'g_moderator'				=> array(				'datatype'		=> 'TINYINT(1)',				'allow_null'	=> false,				'default'		=> '0'			),			'g_mod_edit_users'			=> array(				'datatype'		=> 'TINYINT(1)',				'allow_null'	=> false,				'default'		=> '0'			),			'g_mod_rename_users'		=> array(				'datatype'		=> 'TINYINT(1)',				'allow_null'	=> false,				'default'		=> '0'			),			'g_mod_change_passwords'	=> array(				'datatype'		=> 'TINYINT(1)',				'allow_null'	=> false,				'default'		=> '0'			),			'g_mod_ban_users'			=> array(				'datatype'		=> 'TINYINT(1)',				'allow_null'	=> false,				'default'		=> '0'			),			'g_read_board'				=> array(				'datatype'		=> 'TINYINT(1)',				'allow_null'	=> false,				'default'		=> '1'			),			'g_view_users'				=> array(				'datatype'		=> 'TINYINT(1)',				'allow_null'	=> false,				'default'		=> '1'			),			'g_post_replies'			=> array(				'datatype'		=> 'TINYINT(1)',				'allow_null'	=> false,				'default'		=> '1'			),			'g_post_topics'				=> array(				'datatype'		=> 'TINYINT(1)',				'allow_null'	=> false,				'default'		=> '1'			),			'g_edit_posts'				=> array(				'datatype'		=> 'TINYINT(1)',				'allow_null'	=> false,				'default'		=> '1'			),			'g_delete_posts'			=> array(				'datatype'		=> 'TINYINT(1)',				'allow_null'	=> false,				'default'		=> '1'			),			'g_delete_topics'			=> array(				'datatype'		=> 'TINYINT(1)',				'allow_null'	=> false,				'default'		=> '1'			),			'g_set_title'				=> array(				'datatype'		=> 'TINYINT(1)',				'allow_null'	=> false,				'default'		=> '1'			),			'g_search'					=> array(				'datatype'		=> 'TINYINT(1)',				'allow_null'	=> false,				'default'		=> '1'			),			'g_search_users'			=> array(				'datatype'		=> 'TINYINT(1)',				'allow_null'	=> false,				'default'		=> '1'			),			'g_send_email'				=> array(				'datatype'		=> 'TINYINT(1)',				'allow_null'	=> false,				'default'		=> '1'			),			'g_post_flood'				=> array(				'datatype'		=> 'SMALLINT(6)',				'allow_null'	=> false,				'default'		=> '30'			),			'g_search_flood'			=> array(				'datatype'		=> 'SMALLINT(6)',				'allow_null'	=> false,				'default'		=> '30'			),			'g_email_flood'				=> array(				'datatype'		=> 'SMALLINT(6)',				'allow_null'	=> false,				'default'		=> '60'			)		),		'PRIMARY KEY'	=> array('g_id')	);	$forum_db->create_table('groups', $schema);	$schema = array(		'FIELDS'		=> array(			'user_id'		=> array(				'datatype'		=> 'INT(10) UNSIGNED',				'allow_null'	=> false,				'default'		=> '1'			),			'ident'			=> array(				'datatype'		=> 'VARCHAR(200)',				'allow_null'	=> false,				'default'		=> '\'\''			),			'logged'		=> array(				'datatype'		=> 'INT(10) UNSIGNED',				'allow_null'	=> false,				'default'		=> '0'			),			'idle'			=> array(				'datatype'		=> 'TINYINT(1)',				'allow_null'	=> false,				'default'		=> '0'			),			'csrf_token'	=> array(				'datatype'		=> 'VARCHAR(40)',				'allow_null'	=> false,				'default'		=> '\'\''			),			'prev_url'		=> array(				'datatype'		=> 'VARCHAR(255)',				'allow_null'	=> true			),			'last_post'			=> array(				'datatype'		=> 'INT(10) UNSIGNED',				'allow_null'	=> true			),			'last_search'		=> array(				'datatype'		=> 'INT(10) UNSIGNED',				'allow_null'	=> true			),		),		'UNIQUE KEYS'	=> array(			'user_id_ident_idx'	=> array('user_id', 'ident')		),		'INDEXES'		=> array(			'ident_idx'		=> array('ident'),			'logged_idx'	=> array('logged')		),		'ENGINE'		=> 'HEAP'	);	if (in_array($db_type, array('mysql', 'mysqli', 'mysql_innodb', 'mysqli_innodb')))	{		$schema['UNIQUE KEYS']['user_id_ident_idx'] = array('user_id', 'ident(25)');		$schema['INDEXES']['ident_idx'] = array('ident(25)');	}	$forum_db->create_table('online', $schema);	$schema = array(		'FIELDS'		=> array(			'id'			=> array(				'datatype'		=> 'SERIAL',				'allow_null'	=> false			),			'poster'		=> array(				'datatype'		=> 'VARCHAR(200)',				'allow_null'	=> false,				'default'		=> '\'\''			),			'poster_id'		=> array(				'datatype'		=> 'INT(10) UNSIGNED',				'allow_null'	=> false,				'default'		=> '1'			),			'poster_ip'		=> array(				'datatype'		=> 'VARCHAR(39)',				'allow_null'	=> true			),			'poster_email'	=> array(				'datatype'		=> 'VARCHAR(80)',				'allow_null'	=> true			),			'message'		=> array(				'datatype'		=> 'TEXT',				'allow_null'	=> true			),			'hide_smilies'	=> array(				'datatype'		=> 'TINYINT(1)',				'allow_null'	=> false,				'default'		=> '0'			),			'posted'		=> array(				'datatype'		=> 'INT(10) UNSIGNED',				'allow_null'	=> false,				'default'		=> '0'			),			'edited'		=> array(				'datatype'		=> 'INT(10) UNSIGNED',				'allow_null'	=> true			),			'edited_by'		=> array(				'datatype'		=> 'VARCHAR(200)',				'allow_null'	=> true			),			'topic_id'		=> array(				'datatype'		=> 'INT(10) UNSIGNED',				'allow_null'	=> false,				'default'		=> '0'			)		),		'PRIMARY KEY'	=> array('id'),		'INDEXES'		=> array(			'topic_id_idx'	=> array('topic_id'),			'multi_idx'		=> array('poster_id', 'topic_id'),			'posted_idx'	=> array('posted')		)	);	$forum_db->create_table('posts', $schema);	$schema = array(		'FIELDS'		=> array(			'id'			=> array(				'datatype'		=> 'SERIAL',				'allow_null'	=> false			),			'rank'			=> array(				'datatype'		=> 'VARCHAR(50)',				'allow_null'	=> false,				'default'		=> '\'\''			),			'min_posts'		=> array(				'datatype'		=> 'MEDIUMINT(8) UNSIGNED',				'allow_null'	=> false,				'default'		=> '0'			)		),		'PRIMARY KEY'	=> array('id')	);	$forum_db->create_table('ranks', $schema);	$schema = array(		'FIELDS'		=> array(			'id'			=> array(				'datatype'		=> 'SERIAL',				'allow_null'	=> false			),			'post_id'		=> array(				'datatype'		=> 'INT(10) UNSIGNED',				'allow_null'	=> false,				'default'		=> '0'			),			'topic_id'		=> array(				'datatype'		=> 'INT(10) UNSIGNED',				'allow_null'	=> false,				'default'		=> '0'			),			'forum_id'		=> array(				'datatype'		=> 'INT(10) UNSIGNED',				'allow_null'	=> false,				'default'		=> '0'			),			'reported_by'	=> array(				'datatype'		=> 'INT(10) UNSIGNED',				'allow_null'	=> false,				'default'		=> '0'			),			'created'		=> array(				'datatype'		=> 'INT(10) UNSIGNED',				'allow_null'	=> false,				'default'		=> '0'			),			'message'		=> array(				'datatype'		=> 'TEXT',				'allow_null'	=> true			),			'zapped'		=> array(				'datatype'		=> 'INT(10) UNSIGNED',				'allow_null'	=> true			),			'zapped_by'		=> array(				'datatype'		=> 'INT(10) UNSIGNED',				'allow_null'	=> true			)		),		'PRIMARY KEY'	=> array('id'),		'INDEXES'		=> array(			'zapped_idx'	=> array('zapped')		)	);	$forum_db->create_table('reports', $schema);	$schema = array(		'FIELDS'		=> array(			'id'			=> array(				'datatype'		=> 'INT(10) UNSIGNED',				'allow_null'	=> false,				'default'		=> '0'			),			'ident'			=> array(				'datatype'		=> 'VARCHAR(200)',				'allow_null'	=> false,				'default'		=> '\'\''			),			'search_data'	=> array(				'datatype'		=> 'TEXT',				'allow_null'	=> true			)		),		'PRIMARY KEY'	=> array('id'),		'INDEXES'		=> array(			'ident_idx'	=> array('ident')		)	);	if (in_array($db_type, array('mysql', 'mysqli', 'mysql_innodb', 'mysqli_innodb')))		$schema['INDEXES']['ident_idx'] = array('ident(8)');	$forum_db->create_table('search_cache', $schema);	$schema = array(		'FIELDS'		=> array(			'post_id'		=> array(				'datatype'		=> 'INT(10) UNSIGNED',				'allow_null'	=> false,				'default'		=> '0'			),			'word_id'		=> array(				'datatype'		=> 'INT(10) UNSIGNED',				'allow_null'	=> false,				'default'		=> '0'			),			'subject_match'	=> array(				'datatype'		=> 'TINYINT(1)',				'allow_null'	=> false,				'default'		=> '0'			)		),		'INDEXES'		=> array(			'word_id_idx'	=> array('word_id'),			'post_id_idx'	=> array('post_id')		)	);	$forum_db->create_table('search_matches', $schema);	$schema = array(		'FIELDS'		=> array(			'id'			=> array(				'datatype'		=> 'SERIAL',				'allow_null'	=> false			),			'word'			=> array(				'datatype'		=> 'VARCHAR(20)',				'allow_null'	=> false,				'default'		=> '\'\'',				'collation'		=> 'bin'			)		),		'PRIMARY KEY'	=> array('word'),		'INDEXES'		=> array(			'id_idx'	=> array('id')		)	);	if ($db_type == 'sqlite' || $db_type == 'sqlite3')	{		$schema['PRIMARY KEY'] = array('id');		$schema['UNIQUE KEYS'] = array('word_idx'	=> array('word'));	}	$forum_db->create_table('search_words', $schema);	$schema = array(		'FIELDS'		=> array(			'user_id'		=> array(				'datatype'		=> 'INT(10) UNSIGNED',				'allow_null'	=> false,				'default'		=> '0'			),			'topic_id'		=> array(				'datatype'		=> 'INT(10) UNSIGNED',				'allow_null'	=> false,				'default'		=> '0'			)		),		'PRIMARY KEY'	=> array('user_id', 'topic_id')	);	$forum_db->create_table('subscriptions', $schema);	$schema = array(		'FIELDS'		=> array(			'id'			=> array(				'datatype'		=> 'SERIAL',				'allow_null'	=> false			),			'poster'		=> array(				'datatype'		=> 'VARCHAR(200)',				'allow_null'	=> false,				'default'		=> '\'\''			),			'subject'		=> array(				'datatype'		=> 'VARCHAR(255)',				'allow_null'	=> false,				'default'		=> '\'\''			),			'posted'		=> array(				'datatype'		=> 'INT(10) UNSIGNED',				'allow_null'	=> false,				'default'		=> '0'			),			'first_post_id'	=> array(				'datatype'		=> 'INT(10) UNSIGNED',				'allow_null'	=> false,				'default'		=> '0'			),			'last_post'		=> array(				'datatype'		=> 'INT(10) UNSIGNED',				'allow_null'	=> false,				'default'		=> '0'			),			'last_post_id'	=> array(				'datatype'		=> 'INT(10) UNSIGNED',				'allow_null'	=> false,				'default'		=> '0'			),			'last_poster'	=> array(				'datatype'		=> 'VARCHAR(200)',				'allow_null'	=> true			),			'num_views'		=> array(				'datatype'		=> 'MEDIUMINT(8) UNSIGNED',				'allow_null'	=> false,				'default'		=> '0'			),			'num_replies'	=> array(				'datatype'		=> 'MEDIUMINT(8) UNSIGNED',				'allow_null'	=> false,				'default'		=> '0'			),			'closed'		=> array(				'datatype'		=> 'TINYINT(1)',				'allow_null'	=> false,				'default'		=> '0'			),			'sticky'		=> array(				'datatype'		=> 'TINYINT(1)',				'allow_null'	=> false,				'default'		=> '0'			),			'moved_to'		=> array(				'datatype'		=> 'INT(10) UNSIGNED',				'allow_null'	=> true			),			'forum_id'		=> array(				'datatype'		=> 'INT(10) UNSIGNED',				'allow_null'	=> false,				'default'		=> '0'			)		),		'PRIMARY KEY'	=> array('id'),		'INDEXES'		=> array(			'forum_id_idx'		=> array('forum_id'),			'moved_to_idx'		=> array('moved_to'),			'last_post_idx'		=> array('last_post'),			'first_post_id_idx'	=> array('first_post_id')		)	);	$forum_db->create_table('topics', $schema);	$schema = array(		'FIELDS'		=> array(			'id'				=> array(				'datatype'		=> 'SERIAL',				'allow_null'	=> false			),			'group_id'			=> array(				'datatype'		=> 'INT(10) UNSIGNED',				'allow_null'	=> false,				'default'		=> '3'			),			'username'			=> array(				'datatype'		=> 'VARCHAR(200)',				'allow_null'	=> false,				'default'		=> '\'\''			),			'password'			=> array(				'datatype'		=> 'VARCHAR(40)',				'allow_null'	=> false,				'default'		=> '\'\''			),			'salt'				=> array(				'datatype'		=> 'VARCHAR(12)',				'allow_null'	=> true			),			'email'				=> array(				'datatype'		=> 'VARCHAR(80)',				'allow_null'	=> false,				'default'		=> '\'\''			),			'title'				=> array(				'datatype'		=> 'VARCHAR(50)',				'allow_null'	=> true			),			'realname'			=> array(				'datatype'		=> 'VARCHAR(40)',				'allow_null'	=> true			),			'url'				=> array(				'datatype'		=> 'VARCHAR(100)',				'allow_null'	=> true			),			'facebook'			=> array(				'datatype'		=> 'VARCHAR(100)',				'allow_null'	=> true			),			'twitter'			=> array(				'datatype'		=> 'VARCHAR(100)',				'allow_null'	=> true			),			'linkedin'			=> array(				'datatype'		=> 'VARCHAR(100)',				'allow_null'	=> true			),			'skype'			=> array(				'datatype'		=> 'VARCHAR(100)',				'allow_null'	=> true			),			'jabber'			=> array(				'datatype'		=> 'VARCHAR(80)',				'allow_null'	=> true			),			'icq'				=> array(				'datatype'		=> 'VARCHAR(12)',				'allow_null'	=> true			),			'msn'				=> array(				'datatype'		=> 'VARCHAR(80)',				'allow_null'	=> true			),			'aim'				=> array(				'datatype'		=> 'VARCHAR(30)',				'allow_null'	=> true			),			'yahoo'				=> array(				'datatype'		=> 'VARCHAR(30)',				'allow_null'	=> true			),			'location'			=> array(				'datatype'		=> 'VARCHAR(30)',				'allow_null'	=> true			),			'signature'			=> array(				'datatype'		=> 'TEXT',				'allow_null'	=> true			),			'disp_topics'		=> array(				'datatype'		=> 'TINYINT(3) UNSIGNED',				'allow_null'	=> true			),			'disp_posts'		=> array(				'datatype'		=> 'TINYINT(3) UNSIGNED',				'allow_null'	=> true			),			'email_setting'		=> array(				'datatype'		=> 'TINYINT(1)',				'allow_null'	=> false,				'default'		=> '1'			),			'notify_with_post'	=> array(				'datatype'		=> 'TINYINT(1)',				'allow_null'	=> false,				'default'		=> '0'			),			'auto_notify'		=> array(				'datatype'		=> 'TINYINT(1)',				'allow_null'	=> false,				'default'		=> '0'			),			'show_smilies'		=> array(				'datatype'		=> 'TINYINT(1)',				'allow_null'	=> false,				'default'		=> '1'			),			'show_img'			=> array(				'datatype'		=> 'TINYINT(1)',				'allow_null'	=> false,				'default'		=> '1'			),			'show_img_sig'		=> array(				'datatype'		=> 'TINYINT(1)',				'allow_null'	=> false,				'default'		=> '1'			),			'show_avatars'		=> array(				'datatype'		=> 'TINYINT(1)',				'allow_null'	=> false,				'default'		=> '1'			),			'show_sig'			=> array(				'datatype'		=> 'TINYINT(1)',				'allow_null'	=> false,				'default'		=> '1'			),			'access_keys'		=> array(				'datatype'		=> 'TINYINT(1)',				'allow_null'	=> false,				'default'		=> '0'			),			'timezone'			=> array(				'datatype'		=> 'FLOAT',				'allow_null'	=> false,				'default'		=> '0'			),			'dst'				=> array(				'datatype'		=> 'TINYINT(1)',				'allow_null'	=> false,				'default'		=> '0'			),			'time_format'		=> array(				'datatype'		=> 'INT(10) UNSIGNED',				'allow_null'	=> false,				'default'		=> '0'			),			'date_format'		=> array(				'datatype'		=> 'INT(10) UNSIGNED',				'allow_null'	=> false,				'default'		=> '0'			),			'language'			=> array(				'datatype'		=> 'VARCHAR(25)',				'allow_null'	=> false,				'default'		=> '\'English\''			),			'style'				=> array(				'datatype'		=> 'VARCHAR(25)',				'allow_null'	=> false,				'default'		=> '\'Oxygen\''			),			'num_posts'			=> array(				'datatype'		=> 'INT(10) UNSIGNED',				'allow_null'	=> false,				'default'		=> '0'			),			'last_post'			=> array(				'datatype'		=> 'INT(10) UNSIGNED',				'allow_null'	=> true			),			'last_search'		=> array(				'datatype'		=> 'INT(10) UNSIGNED',				'allow_null'	=> true			),			'last_email_sent'	=> array(				'datatype'		=> 'INT(10) UNSIGNED',				'allow_null'	=> true			),			'registered'		=> array(				'datatype'		=> 'INT(10) UNSIGNED',				'allow_null'	=> false,				'default'		=> '0'			),			'registration_ip'	=> array(				'datatype'		=> 'VARCHAR(39)',				'allow_null'	=> false,				'default'		=> '\'0.0.0.0\''			),			'last_visit'		=> array(				'datatype'		=> 'INT(10) UNSIGNED',				'allow_null'	=> false,				'default'		=> '0'			),			'admin_note'		=> array(				'datatype'		=> 'VARCHAR(30)',				'allow_null'	=> true			),			'activate_string'	=> array(				'datatype'		=> 'VARCHAR(80)',				'allow_null'	=> true			),			'activate_key'		=> array(				'datatype'		=> 'VARCHAR(8)',				'allow_null'	=> true			),			'avatar'			=> array(				'datatype'		=> 'TINYINT(3) UNSIGNED',				'allow_null'	=> false,				'default'		=> 0,			),			'avatar_width'		=> array(				'datatype'		=> 'TINYINT(3) UNSIGNED',				'allow_null'	=> false,				'default'		=> 0,			),			'avatar_height'		=> array(				'datatype'		=> 'TINYINT(3) UNSIGNED',				'allow_null'	=> false,				'default'		=> 0,			),		),		'PRIMARY KEY'	=> array('id'),		'INDEXES'		=> array(			'registered_idx'	=> array('registered'),			'username_idx'		=> array('username')		)	);	if (in_array($db_type, array('mysql', 'mysqli', 'mysql_innodb', 'mysqli_innodb')))		$schema['INDEXES']['username_idx'] = array('username(8)');	$forum_db->create_table('users', $schema);	$now = time();	// Insert the four preset groups	$query = array(		'INSERT'	=> 'g_title, g_user_title, g_moderator, g_mod_edit_users, g_mod_rename_users, g_mod_change_passwords, g_mod_ban_users, g_read_board, g_view_users, g_post_replies, g_post_topics, g_edit_posts, g_delete_posts, g_delete_topics, g_set_title, g_search, g_search_users, g_send_email, g_post_flood, g_search_flood, g_email_flood',		'INTO'		=> 'groups',		'VALUES'	=> '\'Administrators\', \'Administrator\', 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0'	);	if ($db_type != 'pgsql')	{		$query['INSERT'] .= ', g_id';		$query['VALUES'] .= ', 1';	}	$forum_db->query_build($query) or error(__FILE__, __LINE__);	$query = array(		'INSERT'	=> 'g_title, g_user_title, g_moderator, g_mod_edit_users, g_mod_rename_users, g_mod_change_passwords, g_mod_ban_users, g_read_board, g_view_users, g_post_replies, g_post_topics, g_edit_posts, g_delete_posts, g_delete_topics, g_set_title, g_search, g_search_users, g_send_email, g_post_flood, g_search_flood, g_email_flood',		'INTO'		=> 'groups',		'VALUES'	=> '\'Guest\', NULL, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 60, 30, 0'	);	if ($db_type != 'pgsql')	{		$query['INSERT'] .= ', g_id';		$query['VALUES'] .= ', 2';	}	$forum_db->query_build($query) or error(__FILE__, __LINE__);	$query = array(		'INSERT'	=> 'g_title, g_user_title, g_moderator, g_mod_edit_users, g_mod_rename_users, g_mod_change_passwords, g_mod_ban_users, g_read_board, g_view_users, g_post_replies, g_post_topics, g_edit_posts, g_delete_posts, g_delete_topics, g_set_title, g_search, g_search_users, g_send_email, g_post_flood, g_search_flood, g_email_flood',		'INTO'		=> 'groups',		'VALUES'	=> '\'Members\', NULL, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 60, 30, 60'	);	if ($db_type != 'pgsql')	{		$query['INSERT'] .= ', g_id';		$query['VALUES'] .= ', 3';	}	$forum_db->query_build($query) or error(__FILE__, __LINE__);	$query = array(		'INSERT'	=> 'g_title, g_user_title, g_moderator, g_mod_edit_users, g_mod_rename_users, g_mod_change_passwords, g_mod_ban_users, g_read_board, g_view_users, g_post_replies, g_post_topics, g_edit_posts, g_delete_posts, g_delete_topics, g_set_title, g_search, g_search_users, g_send_email, g_post_flood, g_search_flood, g_email_flood',		'INTO'		=> 'groups',		'VALUES'	=> '\'Moderators\', \'Moderator\', 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0'	);	if ($db_type != 'pgsql')	{		$query['INSERT'] .= ', g_id';		$query['VALUES'] .= ', 4';	}	$forum_db->query_build($query) or error(__FILE__, __LINE__);	// Insert guest and first admin user	$query = array(		'INSERT'	=> 'group_id, username, password, email',		'INTO'		=> 'users',		'VALUES'	=> '2, \'Guest\', \'Guest\', \'Guest\''	);	if ($db_type != 'pgsql')	{		$query['INSERT'] .= ', id';		$query['VALUES'] .= ', 1';	}	$forum_db->query_build($query) or error(__FILE__, __LINE__);	$salt = random_key(12);	$query = array(		'INSERT'	=> 'group_id, username, password, email, language, num_posts, last_post, registered, registration_ip, last_visit, salt',		'INTO'		=> 'users',		'VALUES'	=> '1, \''.$forum_db->escape($username).'\', \''.forum_hash($password1, $salt).'\', \''.$forum_db->escape($email).'\', \''.$forum_db->escape($default_lang).'\', 1, '.$now.', '.$now.', \'127.0.0.1\', '.$now.', \''.$forum_db->escape($salt).'\''	);	$forum_db->query_build($query) or error(__FILE__, __LINE__);	$new_uid = $forum_db->insert_id();	// Enable/disable avatars depending on file_uploads setting in PHP configuration	$avatars = in_array(strtolower(@ini_get('file_uploads')), array('on', 'true', '1')) ? 1 : 0;	// Enable/disable automatic check for updates depending on PHP environment (require cURL, fsockopen or allow_url_fopen)	$check_for_updates = (function_exists('curl_init') || function_exists('fsockopen') || in_array(strtolower(@ini_get('allow_url_fopen')), array('on', 'true', '1'))) ? 1 : 0;	// Insert config data	$config = array(		'o_cur_version'				=> "'".FORUM_VERSION."'",		'o_database_revision'		=> "'".FORUM_DB_REVISION."'",		'o_board_title'				=> "'".$forum_db->escape($board_title)."'",		'o_board_desc'				=> "'".$forum_db->escape($board_descrip)."'",		'o_default_timezone'		=> "'0'",		'o_time_format'				=> "'H:i:s'",		'o_date_format'				=> "'Y-m-d'",		'o_check_for_updates'		=> "'$check_for_updates'",		'o_check_for_versions'		=> "'$check_for_updates'",		'o_timeout_visit'			=> "'5400'",		'o_timeout_online'			=> "'300'",		'o_redirect_delay'			=> "'0'",		'o_show_version'			=> "'0'",		'o_show_user_info'			=> "'1'",		'o_show_post_count'			=> "'1'",		'o_signatures'				=> "'1'",		'o_smilies'					=> "'1'",		'o_smilies_sig'				=> "'1'",		'o_make_links'				=> "'1'",		'o_default_lang'			=> "'".$forum_db->escape($default_lang)."'",		'o_default_style'			=> "'Oxygen'",		'o_default_user_group'		=> "'3'",		'o_topic_review'			=> "'15'",		'o_disp_topics_default'		=> "'30'",		'o_disp_posts_default'		=> "'25'",		'o_indent_num_spaces'		=> "'4'",		'o_quote_depth'				=> "'3'",		'o_quickpost'				=> "'1'",		'o_users_online'			=> "'1'",		'o_censoring'				=> "'0'",		'o_ranks'					=> "'1'",		'o_show_dot'				=> "'0'",		'o_topic_views'				=> "'1'",		'o_quickjump'				=> "'1'",		'o_gzip'					=> "'0'",		'o_additional_navlinks'		=> "''",		'o_report_method'			=> "'0'",		'o_regs_report'				=> "'0'",		'o_default_email_setting'	=> "'1'",		'o_mailing_list'			=> "'".$forum_db->escape($email)."'",		'o_avatars'					=> "'$avatars'",		'o_avatars_dir'				=> "'img/avatars'",		'o_avatars_width'			=> "'60'",		'o_avatars_height'			=> "'60'",		'o_avatars_size'			=> "'15360'",		'o_search_all_forums'		=> "'1'",		'o_sef'						=> "'Default'",		'o_admin_email'				=> "'".$forum_db->escape($email)."'",		'o_webmaster_email'			=> "'".$forum_db->escape($email)."'",		'o_subscriptions'			=> "'1'",		'o_smtp_host'				=> "NULL",		'o_smtp_user'				=> "NULL",		'o_smtp_pass'				=> "NULL",		'o_smtp_ssl'				=> "'0'",		'o_regs_allow'				=> "'1'",		'o_regs_verify'				=> "'0'",		'o_announcement'			=> "'0'",		'o_announcement_heading'	=> "'".$lang_install['Default announce heading']."'",		'o_announcement_message'	=> "'".$lang_install['Default announce message']."'",		'o_rules'					=> "'0'",		'o_rules_message'			=> "'".$lang_install['Default rules']."'",		'o_maintenance'				=> "'0'",		'o_maintenance_message'		=> "'".$lang_admin_settings['Maintenance message default']."'",		'o_default_dst'				=> "'0'",		'p_message_bbcode'			=> "'1'",		'p_message_img_tag'			=> "'1'",		'p_message_all_caps'		=> "'1'",		'p_subject_all_caps'		=> "'1'",		'p_sig_all_caps'			=> "'1'",		'p_sig_bbcode'				=> "'1'",		'p_sig_img_tag'				=> "'0'",		'p_sig_length'				=> "'400'",		'p_sig_lines'				=> "'4'",		'p_allow_banned_email'		=> "'1'",		'p_allow_dupe_email'		=> "'0'",		'p_force_guest_email'		=> "'1'",		'o_show_moderators'			=> "'0'"	);	foreach ($config as $conf_name => $conf_value)	{		$query = array(			'INSERT'	=> 'conf_name, conf_value',			'INTO'		=> 'config',			'VALUES'	=> '\''.$conf_name.'\', '.$conf_value.''		);		$forum_db->query_build($query) or error(__FILE__, __LINE__);	}	// Insert some other default data	$query = array(		'INSERT'	=> 'cat_name, disp_position',		'INTO'		=> 'categories',		'VALUES'	=> '\''.$lang_install['Default category name'].'\', 1'	);	$forum_db->query_build($query) or error(__FILE__, __LINE__);	$query = array(		'INSERT'	=> 'forum_name, forum_desc, num_topics, num_posts, last_post, last_post_id, last_poster, disp_position, cat_id',		'INTO'		=> 'forums',		'VALUES'	=> '\''.$lang_install['Default forum name'].'\', \''.$lang_install['Default forum descrip'].'\', 1, 1, '.$now.', 1, \''.$forum_db->escape($username).'\', 1, '.$forum_db->insert_id().''	);	$forum_db->query_build($query) or error(__FILE__, __LINE__);	$query = array(		'INSERT'	=> 'poster, subject, posted, first_post_id, last_post, last_post_id, last_poster, forum_id',		'INTO'		=> 'topics',		'VALUES'	=> '\''.$forum_db->escape($username).'\', \''.$lang_install['Default topic subject'].'\', '.$now.', 1, '.$now.', 1, \''.$forum_db->escape($username).'\', '.$forum_db->insert_id().''	);	$forum_db->query_build($query) or error(__FILE__, __LINE__);	$query = array(		'INSERT'	=> 'poster, poster_id, poster_ip, message, posted, topic_id',		'INTO'		=> 'posts',		'VALUES'	=> '\''.$forum_db->escape($username).'\', '.$new_uid.', \'127.0.0.1\', \''.$lang_install['Default post contents'].'\', '.$now.', '.$forum_db->insert_id().''	);	if ($db_type != 'pgsql')	{		$query['INSERT'] .= ', id';		$query['VALUES'] .= ', 1';	}	$forum_db->query_build($query) or error(__FILE__, __LINE__);	// Add new post to search table	require FORUM_ROOT.'include/search_idx.php';	update_search_index('post', $forum_db->insert_id(), $lang_install['Default post contents'], $lang_install['Default topic subject']);	// Insert the default ranks	$query = array(		'INSERT'	=> 'rank, min_posts',		'INTO'		=> 'ranks',		'VALUES'	=> '\''.$lang_install['Default rank 1'].'\', 0'	);	$forum_db->query_build($query) or error(__FILE__, __LINE__);	$query = array(		'INSERT'	=> 'rank, min_posts',		'INTO'		=> 'ranks',		'VALUES'	=> '\''.$lang_install['Default rank 2'].'\', 10'	);	$forum_db->query_build($query) or error(__FILE__, __LINE__);	$forum_db->end_transaction();	$alerts = array();	// Check if the cache directory is writable	if (!is_writable(FORUM_ROOT.'cache/'))		$alerts[] = '<li><span>'.$lang_install['No cache write'].'</span></li>';	// Check if default avatar directory is writable	if (!is_writable(FORUM_ROOT.'img/avatars/'))		$alerts[] = '<li><span>'.$lang_install['No avatar write'].'</span></li>';	// Check if we disabled uploading avatars because file_uploads was disabled	if ($avatars == '0')		$alerts[] = '<li><span>'.$lang_install['File upload alert'].'</span></li>';	// Add some random bytes at the end of the cookie name to prevent collisions	$cookie_name = 'forum_cookie_'.random_key(6, false, true);	/// Generate the config.php file data	$config = generate_config_file();	// Attempt to write config.php and serve it up for download if writing fails	$written = false;	if (is_writable(FORUM_ROOT))	{		$fh = @fopen(FORUM_ROOT.'config.php', 'wb');		if ($fh)		{			fwrite($fh, $config);			fclose($fh);			$written = true;		}	}	if ($install_pun_repository && is_readable(FORUM_ROOT.'extensions/pun_repository/manifest.xml'))	{		require FORUM_ROOT.'include/xml.php';		$ext_data = xml_to_array(file_get_contents(FORUM_ROOT.'extensions/pun_repository/manifest.xml'));		if (!empty($ext_data))		{			$query = array(				'INSERT'	=> 'id, title, version, description, author, uninstall, uninstall_note, dependencies',				'INTO'		=> 'extensions',				'VALUES'	=> '\'pun_repository\', \''.$forum_db->escape($ext_data['extension']['title']).'\', \''.$forum_db->escape($ext_data['extension']['version']).'\', \''.$forum_db->escape($ext_data['extension']['description']).'\', \''.$forum_db->escape($ext_data['extension']['author']).'\', NULL, NULL, \'||\'',			);			$forum_db->query_build($query) or error(__FILE__, __LINE__);			if (isset($ext_data['extension']['hooks']['hook']))			{				foreach ($ext_data['extension']['hooks']['hook'] as $ext_hook)				{					$cur_hooks = explode(',', $ext_hook['attributes']['id']);					foreach ($cur_hooks as $cur_hook)					{						$query = array(							'INSERT'	=> 'id, extension_id, code, installed, priority',							'INTO'		=> 'extension_hooks',							'VALUES'	=> '\''.$forum_db->escape(forum_trim($cur_hook)).'\', \'pun_repository\', \''.$forum_db->escape(forum_trim($ext_hook['content'])).'\', '.time().', '.(isset($ext_hook['attributes']['priority']) ? $ext_hook['attributes']['priority'] : 5)						);						$forum_db->query_build($query) or error(__FILE__, __LINE__);					}				}			}		}	}?><!DOCTYPE html><html lang="en" dir="ltr"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8" /><title>PunBB Installation</title><link rel="stylesheet" type="text/css" href="<?php echo FORUM_ROOT ?>style/Oxygen/Oxygen.css" /><link rel="stylesheet" type="text/css" href="<?php echo FORUM_ROOT ?>style/Oxygen/Oxygen_cs.css" /><!--[if lte IE 6]><link rel="stylesheet" type="text/css" href="<?php echo FORUM_ROOT ?>style/Oxygen/Oxygen_ie6.css" /><![endif]--><!--[if IE 7]><link rel="stylesheet" type="text/css" href="<?php echo FORUM_ROOT ?>style/Oxygen/Oxygen_ie7.css" /><![endif]--></head><body><div id="brd-install" class="brd-page"><div id="brd-wrap" class="brd"><div id="brd-head" class="gen-content">	<p id="brd-title"><strong><?php printf($lang_install['Install PunBB'], FORUM_VERSION) ?></strong></p>	<p id="brd-desc"><?php printf($lang_install['Success description'], FORUM_VERSION) ?></p></div><div id="brd-visit" class="gen-content">	<p><?php echo $lang_install['Success welcome'] ?></p></div><div id="brd-main" class="main basic">	<div class="main-head">		<h1 class="hn"><span><?php echo $lang_install['Final instructions'] ?></span></h1>	</div>	<div class="main-content main-frm"><?php if (!empty($alerts)): ?>		<div class="ct-box error-box">			<p class="warn"><strong><?php echo $lang_install['Warning'] ?></strong></p>			<ul>				<?php echo implode("\n\t\t\t\t", $alerts)."\n" ?>			</ul>		</div><?php endif;if (!$written){?>		<div class="ct-box info-box">			<p class="warn"><?php echo $lang_install['No write info 1'] ?></p>			<p class="warn"><?php printf($lang_install['No write info 2'], '<a href="'.FORUM_ROOT.'index.php">'.$lang_install['Go to index'].'</a>') ?></p>		</div>		<form class="frm-form" method="post" accept-charset="utf-8" action="install.php">			<div class="hidden">			<input type="hidden" name="generate_config" value="1" />			<input type="hidden" name="db_type" value="<?php echo $db_type; ?>" />			<input type="hidden" name="db_host" value="<?php echo $db_host; ?>" />			<input type="hidden" name="db_name" value="<?php echo forum_htmlencode($db_name); ?>" />			<input type="hidden" name="db_username" value="<?php echo forum_htmlencode($db_username); ?>" />			<input type="hidden" name="db_password" value="<?php echo forum_htmlencode($db_password); ?>" />			<input type="hidden" name="db_prefix" value="<?php echo forum_htmlencode($db_prefix); ?>" />			<input type="hidden" name="base_url" value="<?php echo forum_htmlencode($base_url); ?>" />			<input type="hidden" name="cookie_name" value="<?php echo forum_htmlencode($cookie_name); ?>" />			</div>			<div class="frm-buttons">				<span class="submit"><input type="submit" value="<?php echo $lang_install['Download config'] ?>" /></span>			</div>		</form><?php}else{?>		<div class="ct-box info-box">			<p class="warn"><?php printf($lang_install['Write info'], '<a href="'.FORUM_ROOT.'index.php">'.$lang_install['Go to index'].'</a>') ?></p>		</div><?php}?>	</div></div></div></div></body></html><?php}
<?php/** * Forum management page. * * Allows administrators to add, modify, and remove forums. * * @copyright (C) 2008-2011 PunBB, partially based on code (C) 2008-2009 FluxBB.org * @license http://www.gnu.org/licenses/gpl.html GPL version 2 or higher * @package PunBB */if (!defined('FORUM_ROOT'))	define('FORUM_ROOT', '../');require FORUM_ROOT.'include/common.php';require FORUM_ROOT.'include/common_admin.php';($hook = get_hook('afo_start')) ? eval($hook) : null;if ($forum_user['g_id'] != FORUM_ADMIN)	message($lang_common['No permission']);// Load the admin.php language filerequire FORUM_ROOT.'lang/'.$forum_user['language'].'/admin_common.php';require FORUM_ROOT.'lang/'.$forum_user['language'].'/admin_forums.php';// Add a "default" forumif (isset($_POST['add_forum'])){	$add_to_cat = isset($_POST['add_to_cat']) ? intval($_POST['add_to_cat']) : 0;	if ($add_to_cat < 1)		message($lang_common['Bad request']);	$forum_name = forum_trim($_POST['forum_name']);	$position = intval($_POST['position']);	($hook = get_hook('afo_add_forum_form_submitted')) ? eval($hook) : null;	if ($forum_name == '')		message($lang_admin_forums['Must enter forum message']);	// Make sure the category we're adding to exists	$query = array(		'SELECT'	=> 'COUNT(c.id)',		'FROM'		=> 'categories AS c',		'WHERE'		=> 'c.id='.$add_to_cat	);	($hook = get_hook('afo_add_forum_qr_validate_category_id')) ? eval($hook) : null;	$result = $forum_db->query_build($query) or error(__FILE__, __LINE__);	if ($forum_db->result($result) != 1)		message($lang_common['Bad request']);	$query = array(		'INSERT'	=> 'forum_name, disp_position, cat_id',		'INTO'		=> 'forums',		'VALUES'	=> '\''.$forum_db->escape($forum_name).'\', '.$position.', '.$add_to_cat	);	($hook = get_hook('afo_add_forum_qr_add_forum')) ? eval($hook) : null;	$forum_db->query_build($query) or error(__FILE__, __LINE__);	// Regenerate the quickjump cache	if (!defined('FORUM_CACHE_FUNCTIONS_LOADED'))		require FORUM_ROOT.'include/cache.php';	generate_quickjump_cache();	// Add flash message	$forum_flash->add_info($lang_admin_forums['Forum added']);	($hook = get_hook('afo_add_forum_pre_redirect')) ? eval($hook) : null;	redirect(forum_link($forum_url['admin_forums']), $lang_admin_forums['Forum added']);}// Delete a forumelse if (isset($_GET['del_forum'])){	$forum_to_delete = intval($_GET['del_forum']);	if ($forum_to_delete < 1)		message($lang_common['Bad request']);	// User pressed the cancel button	if (isset($_POST['del_forum_cancel']))		redirect(forum_link($forum_url['admin_forums']), $lang_admin_common['Cancel redirect']);	($hook = get_hook('afo_del_forum_form_submitted')) ? eval($hook) : null;	if (isset($_POST['del_forum_comply']))	// Delete a forum with all posts	{		@set_time_limit(0);		// Prune all posts and topics		prune($forum_to_delete, 1, -1);		delete_orphans();		// Delete the forum and any forum specific group permissions		$query = array(			'DELETE'	=> 'forums',			'WHERE'		=> 'id='.$forum_to_delete		);		($hook = get_hook('afo_del_forum_qr_delete_forum')) ? eval($hook) : null;		$forum_db->query_build($query) or error(__FILE__, __LINE__);		$query = array(			'DELETE'	=> 'forum_perms',			'WHERE'		=> 'forum_id='.$forum_to_delete		);		($hook = get_hook('afo_del_forum_qr_delete_forum_perms')) ? eval($hook) : null;		$forum_db->query_build($query) or error(__FILE__, __LINE__);		// Regenerate the quickjump cache		if (!defined('FORUM_CACHE_FUNCTIONS_LOADED'))			require FORUM_ROOT.'include/cache.php';		generate_quickjump_cache();		// Add flash message		$forum_flash->add_info($lang_admin_forums['Forum deleted']);		($hook = get_hook('afo_del_forum_pre_redirect')) ? eval($hook) : null;		redirect(forum_link($forum_url['admin_forums']), $lang_admin_forums['Forum deleted']);	}	else	// If the user hasn't confirmed the delete	{		$query = array(			'SELECT'	=> 'f.forum_name',			'FROM'		=> 'forums AS f',			'WHERE'		=> 'f.id='.$forum_to_delete		);		($hook = get_hook('afo_del_forum_qr_get_forum_name')) ? eval($hook) : null;		$result = $forum_db->query_build($query) or error(__FILE__, __LINE__);		$forum_name = $forum_db->result($result);		if (is_null($forum_name) || $forum_name === false)			message($lang_common['Bad request']);		// Setup breadcrumbs		$forum_page['crumbs'] = array(			array($forum_config['o_board_title'], forum_link($forum_url['index'])),			array($lang_admin_common['Forum administration'], forum_link($forum_url['admin_index'])),			array($lang_admin_common['Start'], forum_link($forum_url['admin_index'])),			array($lang_admin_common['Forums'], forum_link($forum_url['admin_forums'])),			$lang_admin_forums['Delete forum']		);		($hook = get_hook('afo_del_forum_pre_header_load')) ? eval($hook) : null;		define('FORUM_PAGE_SECTION', 'start');		define('FORUM_PAGE', 'admin-forums');		require FORUM_ROOT.'header.php';		// START SUBST - <!-- forum_main -->		ob_start();		($hook = get_hook('afo_del_forum_output_start')) ? eval($hook) : null;?>	<div class="main-subhead">		<h2 class="hn"><span><?php printf($lang_admin_forums['Confirm delete forum'], forum_htmlencode($forum_name)) ?></span></h2>	</div>	<div class="main-content main-frm">		<form class="frm-form" method="post" accept-charset="utf-8" action="<?php echo forum_link($forum_url['admin_forums']) ?>?del_forum=<?php echo $forum_to_delete ?>">			<div class="hidden">				<input type="hidden" name="csrf_token" value="<?php echo generate_form_token(forum_link($forum_url['admin_forums']).'?del_forum='.$forum_to_delete) ?>" />			</div>			<div class="ct-box warn-box">				<p class="warn"><?php echo $lang_admin_forums['Delete forum warning'] ?></p>			</div>			<div class="frm-buttons">				<span class="submit"><input type="submit" name="del_forum_comply" value="<?php echo $lang_admin_forums['Delete forum'] ?>" /></span>				<span class="cancel"><input type="submit" name="del_forum_cancel" value="<?php echo $lang_admin_common['Cancel'] ?>" /></span>			</div>		</form>	</div><?php		($hook = get_hook('afo_del_forum_end')) ? eval($hook) : null;		$tpl_temp = forum_trim(ob_get_contents());		$tpl_main = str_replace('<!-- forum_main -->', $tpl_temp, $tpl_main);		ob_end_clean();		// END SUBST - <!-- forum_main -->		require FORUM_ROOT.'footer.php';	}}// Update forum positionselse if (isset($_POST['update_positions'])){	$positions = array_map('intval', $_POST['position']);	($hook = get_hook('afo_update_positions_form_submitted')) ? eval($hook) : null;	$query = array(		'SELECT'	=> 'f.id, f.disp_position',		'FROM'		=> 'categories AS c',		'JOINS'		=> array(			array(				'INNER JOIN'	=> 'forums AS f',				'ON'			=> 'c.id=f.cat_id'			)		),		'ORDER BY'	=> 'c.disp_position, c.id, f.disp_position'	);	($hook = get_hook('afo_update_positions_qr_get_forums')) ? eval($hook) : null;	$result = $forum_db->query_build($query) or error(__FILE__, __LINE__);	while ($cur_forum = $forum_db->fetch_assoc($result))	{		// If these aren't set, we're looking at a forum that was added after		// the admin started editing: we don't want to mess with it		if (isset($positions[$cur_forum['id']]))		{			$new_disp_position = $positions[$cur_forum['id']];			if ($new_disp_position < 0)				message($lang_admin_forums['Must be integer']);			// We only want to update if we changed the position			if ($cur_forum['disp_position'] != $new_disp_position)			{				$query = array(					'UPDATE'	=> 'forums',					'SET'		=> 'disp_position='.$new_disp_position,					'WHERE'		=> 'id='.$cur_forum['id']				);				($hook = get_hook('afo_update_positions_qr_update_forum_position')) ? eval($hook) : null;				$forum_db->query_build($query) or error(__FILE__, __LINE__);			}		}	}	// Regenerate the quickjump cache	require_once FORUM_ROOT.'include/cache.php';	generate_quickjump_cache();	// Add flash message	$forum_flash->add_info($lang_admin_forums['Forums updated']);	($hook = get_hook('afo_update_positions_pre_redirect')) ? eval($hook) : null;	redirect(forum_link($forum_url['admin_forums']), $lang_admin_forums['Forums updated']);}else if (isset($_GET['edit_forum'])){	$forum_id = intval($_GET['edit_forum']);	if ($forum_id < 1)		message($lang_common['Bad request']);	($hook = get_hook('afo_edit_forum_selected')) ? eval($hook) : null;	// Fetch forum info	$query = array(		'SELECT'	=> 'f.id, f.forum_name, f.forum_desc, f.redirect_url, f.num_topics, f.sort_by, f.cat_id',		'FROM'		=> 'forums AS f',		'WHERE'		=> 'f.id='.$forum_id	);	($hook = get_hook('afo_edit_forum_qr_get_forum_details')) ? eval($hook) : null;	$result = $forum_db->query_build($query) or error(__FILE__, __LINE__);	$cur_forum = $forum_db->fetch_assoc($result);	if (is_null($cur_forum) || $cur_forum === false)		message($lang_common['Bad request']);	// Update group permissions for $forum_id	if (isset($_POST['save']))	{		($hook = get_hook('afo_save_forum_form_submitted')) ? eval($hook) : null;		// Start with the forum details		$forum_name = forum_trim($_POST['forum_name']);		$forum_desc = forum_linebreaks(forum_trim($_POST['forum_desc']));		$cat_id = intval($_POST['cat_id']);		$sort_by = intval($_POST['sort_by']);		$redirect_url = isset($_POST['redirect_url']) && $cur_forum['num_topics'] == 0 ? forum_trim($_POST['redirect_url']) : null;		if ($forum_name == '')			message($lang_admin_forums['Must enter forum message']);		if ($cat_id < 1)			message($lang_common['Bad request']);		$forum_desc = ($forum_desc != '') ? '\''.$forum_db->escape($forum_desc).'\'' : 'NULL';		$redirect_url = ($redirect_url != '') ? '\''.$forum_db->escape($redirect_url).'\'' : 'NULL';		$query = array(			'UPDATE'	=> 'forums',			'SET'		=> 'forum_name=\''.$forum_db->escape($forum_name).'\', forum_desc='.$forum_desc.', redirect_url='.$redirect_url.', sort_by='.$sort_by.', cat_id='.$cat_id,			'WHERE'		=> 'id='.$forum_id		);		($hook = get_hook('afo_save_forum_qr_update_forum')) ? eval($hook) : null;		$forum_db->query_build($query) or error(__FILE__, __LINE__);		// Now let's deal with the permissions		if (isset($_POST['read_forum_old']))		{			$query = array(				'SELECT'	=> 'g.g_id, g.g_read_board, g.g_post_replies, g.g_post_topics',				'FROM'		=> 'groups AS g',				'WHERE'		=> 'g_id!='.FORUM_ADMIN			);			($hook = get_hook('afo_save_forum_qr_get_groups')) ? eval($hook) : null;			$result = $forum_db->query_build($query) or error(__FILE__, __LINE__);			while ($cur_group = $forum_db->fetch_assoc($result))			{				// The default permissions for this group				$perms_default = array(					'read_forum'	=>	$cur_group['g_read_board'],					'post_replies'	=>	$cur_group['g_post_replies'],					'post_topics'	=>	$cur_group['g_post_topics']				);				// The old permissions for this group				$perms_old = array(					'read_forum'	=>	$_POST['read_forum_old'][$cur_group['g_id']],					'post_replies'	=>	$_POST['post_replies_old'][$cur_group['g_id']],					'post_topics'	=>	$_POST['post_topics_old'][$cur_group['g_id']]				);				// The new permissions for this group				$perms_new = array(					'read_forum'	=>	($cur_group['g_read_board'] == '1') ? isset($_POST['read_forum_new'][$cur_group['g_id']]) ? '1' : '0' : intval($_POST['read_forum_old'][$cur_group['g_id']]),					'post_replies'	=>	isset($_POST['post_replies_new'][$cur_group['g_id']]) ? '1' : '0',					'post_topics'	=>	isset($_POST['post_topics_new'][$cur_group['g_id']]) ? '1' : '0'				);				($hook = get_hook('afo_save_forum_pre_perms_compare')) ? eval($hook) : null;				// Force all permissions values to integers				$perms_default = array_map('intval', $perms_default);				$perms_old = array_map('intval', $perms_old);				$perms_new = array_map('intval', $perms_new);				// Check if the new permissions differ from the old				if ($perms_new !== $perms_old)				{					// If the new permissions are identical to the default permissions for this group, delete its row in forum_perms					if ($perms_new === $perms_default)					{						$query = array(							'DELETE'	=> 'forum_perms',							'WHERE'		=> 'group_id='.$cur_group['g_id'].' AND forum_id='.$forum_id						);						($hook = get_hook('afo_save_forum_qr_delete_group_forum_perms')) ? eval($hook) : null;						$forum_db->query_build($query) or error(__FILE__, __LINE__);					}					else					{						// Run an UPDATE and see if it affected a row, if not, INSERT						$query = array(							'UPDATE'	=> 'forum_perms',							'WHERE'		=> 'group_id='.$cur_group['g_id'].' AND forum_id='.$forum_id						);						$perms_new_values = array();						foreach ($perms_new as $key => $value)							$perms_new_values[] = $key.'='.$value;						$query['SET'] = implode(', ', $perms_new_values);						($hook = get_hook('afo_save_forum_qr_update_forum_perms')) ? eval($hook) : null;						$forum_db->query_build($query) or error(__FILE__, __LINE__);						if (!$forum_db->affected_rows())						{							$query = array(								'INSERT'	=> 'group_id, forum_id',								'INTO'		=> 'forum_perms',								'VALUES'	=> $cur_group['g_id'].', '.$forum_id							);							$query['INSERT'] .= ', '.implode(', ', array_keys($perms_new));							$query['VALUES'] .= ', '.implode(', ', $perms_new);							($hook = get_hook('afo_save_forum_qr_add_forum_perms')) ? eval($hook) : null;							$forum_db->query_build($query) or error(__FILE__, __LINE__);						}					}				}			}		}		// Regenerate the quickjump cache		if (!defined('FORUM_CACHE_FUNCTIONS_LOADED'))			require FORUM_ROOT.'include/cache.php';		generate_quickjump_cache();		// Add flash message		$forum_flash->add_info($lang_admin_forums['Forum updated']);		($hook = get_hook('afo_save_forum_pre_redirect')) ? eval($hook) : null;		redirect(forum_link($forum_url['admin_forums']), $lang_admin_forums['Forum updated']);	}	else if (isset($_POST['revert_perms']))	{		($hook = get_hook('afo_revert_perms_form_submitted')) ? eval($hook) : null;		$query = array(			'DELETE'	=> 'forum_perms',			'WHERE'		=> 'forum_id='.$forum_id		);		($hook = get_hook('afo_revert_perms_qr_revert_forum_perms')) ? eval($hook) : null;		$forum_db->query_build($query) or error(__FILE__, __LINE__);		// Regenerate the quickjump cache		if (!defined('FORUM_CACHE_FUNCTIONS_LOADED'))			require FORUM_ROOT.'include/cache.php';		generate_quickjump_cache();		($hook = get_hook('afo_revert_perms_pre_redirect')) ? eval($hook) : null;		redirect(forum_link($forum_url['admin_forums']).'?edit_forum='.$forum_id, $lang_admin_forums['Permissions reverted']);	}	$forum_page['form_info'] = array();	if ($cur_forum['redirect_url'])		$forum_page['form_info'][] = '<li><span>'.$lang_admin_forums['Forum perms redirect info'].'</span></li>';	$forum_page['form_info']['read'] = '<li><span>'.$lang_admin_forums['Forum perms read info'].'</span></li>';	$forum_page['form_info']['restore'] = '<li><span>'.$lang_admin_forums['Forum perms restore info'].'</span></li>';	$forum_page['form_info']['groups'] = '<li><span>'. sprintf($lang_admin_forums['Forum perms groups info'], '<a href="'.forum_link($forum_url['admin_groups']).'">'.$lang_admin_forums['User groups'].'</a>').'</span></li>';	$forum_page['form_info']['admins'] = '<li><span>'.$lang_admin_forums['Forum perms admins info'].'</span></li>';	// Setup the form	$forum_page['item_count'] = $forum_page['group_count'] = $forum_page['fld_count'] = 0;	// Setup breadcrumbs	$forum_page['crumbs'] = array(		array($forum_config['o_board_title'], forum_link($forum_url['index'])),		array($lang_admin_common['Forum administration'], forum_link($forum_url['admin_index'])),		array($lang_admin_common['Start'], forum_link($forum_url['admin_index'])),		array($lang_admin_common['Forums'], forum_link($forum_url['admin_forums'])),		$lang_admin_forums['Edit forum']	);	($hook = get_hook('afo_edit_forum_pre_header_load')) ? eval($hook) : null;	define('FORUM_PAGE_SECTION', 'start');	define('FORUM_PAGE', 'admin-forums');	require FORUM_ROOT.'header.php';	// START SUBST - <!-- forum_main -->	ob_start();	($hook = get_hook('afo_edit_forum_output_start')) ? eval($hook) : null;?>	<div class="main-subhead">		<h2 class="hn"><span><?php printf($lang_admin_forums['Edit forum head'], forum_htmlencode($cur_forum['forum_name'])) ?></span></h2>	</div>	<div class="main-content main-frm">		<form method="post" class="frm-form" accept-charset="utf-8" action="<?php echo forum_link($forum_url['admin_forums']) ?>?edit_forum=<?php echo $forum_id ?>">			<div class="hidden">				<input type="hidden" name="csrf_token" value="<?php echo generate_form_token(forum_link($forum_url['admin_forums']).'?edit_forum='.$forum_id) ?>" />			</div>			<div class="content-head">				<h3 class="hn"><span><?php echo $lang_admin_forums['Edit forum details head'] ?></span></h3>			</div><?php ($hook = get_hook('afo_edit_forum_pre_details_fieldset')) ? eval($hook) : null; ?>			<fieldset class="frm-group group<?php echo ++$forum_page['group_count'] ?>">				<legend class="group-legend"><strong><?php echo $lang_admin_forums['Edit forum details legend'] ?></strong></legend><?php ($hook = get_hook('afo_edit_forum_pre_forum_name')) ? eval($hook) : null; ?>				<div class="sf-set set<?php echo ++$forum_page['item_count'] ?>">					<div class="sf-box text">						<label for="fld<?php echo ++$forum_page['fld_count'] ?>"><span><?php echo $lang_admin_forums['Forum name'] ?></span></label><br />						<span class="fld-input"><input type="text" id="fld<?php echo $forum_page['fld_count'] ?>" name="forum_name" size="35" maxlength="80" value="<?php echo forum_htmlencode($cur_forum['forum_name']) ?>" required /></span>					</div>				</div><?php ($hook = get_hook('afo_edit_forum_pre_forum_descrip')) ? eval($hook) : null; ?>				<div class="txt-set set<?php echo ++$forum_page['item_count'] ?>">					<div class="txt-box textarea">						<label for="fld<?php echo ++$forum_page['fld_count'] ?>"><span><?php echo $lang_admin_forums['Forum description'] ?></span> <small><?php echo $lang_admin_forums['Forum description help'] ?></small></label><br />						<div class="txt-input"><span class="fld-input"><textarea id="fld<?php echo $forum_page['fld_count'] ?>" name="forum_desc" rows="3" cols="50"><?php echo forum_htmlencode($cur_forum['forum_desc']) ?></textarea></span></div>					</div>				</div><?php ($hook = get_hook('afo_edit_forum_pre_forum_cat')) ? eval($hook) : null; ?>				<div class="sf-set set<?php echo ++$forum_page['item_count'] ?>">					<div class="sf-box select">						<label for="fld<?php echo ++$forum_page['fld_count'] ?>"><span><?php echo $lang_admin_forums['Category assignment'] ?></span></label><br />						<span class="fld-input"><select id="fld<?php echo $forum_page['fld_count'] ?>" name="cat_id"><?php	$query = array(		'SELECT'	=> 'c.id, c.cat_name',		'FROM'		=> 'categories AS c',		'ORDER BY'	=> 'c.disp_position'	);	($hook = get_hook('afo_edit_forum_qr_get_categories')) ? eval($hook) : null;	$result = $forum_db->query_build($query) or error(__FILE__, __LINE__);	while ($cur_cat = $forum_db->fetch_assoc($result))	{		$selected = ($cur_cat['id'] == $cur_forum['cat_id']) ? ' selected="selected"' : '';		echo "\t\t\t\t\t\t\t\t".'<option value="'.$cur_cat['id'].'"'.$selected.'>'.forum_htmlencode($cur_cat['cat_name']).'</option>'."\n";	}?>						</select></span>					</div>				</div><?php ($hook = get_hook('afo_edit_forum_pre_forum_sort_by')) ? eval($hook) : null; ?>				<div class="sf-set set<?php echo ++$forum_page['item_count'] ?>">					<div class="sf-box select">						<label for="fld<?php echo ++$forum_page['fld_count'] ?>"><span><?php echo $lang_admin_forums['Sort topics by'] ?></span></label><br />						<span class="fld-input"><select id="fld<?php echo $forum_page['fld_count'] ?>" name="sort_by">							<option value="0"<?php if ($cur_forum['sort_by'] == '0') echo ' selected="selected"' ?>><?php echo $lang_admin_forums['Sort last post'] ?></option>							<option value="1"<?php if ($cur_forum['sort_by'] == '1') echo ' selected="selected"' ?>><?php echo $lang_admin_forums['Sort topic start'] ?></option><?php ($hook = get_hook('afo_edit_forum_modify_sort_by')) ? eval($hook) : null; ?>						</select></span>					</div>				</div><?php ($hook = get_hook('afo_edit_forum_pre_forum_redirect_url')) ? eval($hook) : null; ?>				<div class="sf-set set<?php echo ++$forum_page['item_count'] ?>">					<div class="sf-box text">						<label for="fld<?php echo ++$forum_page['fld_count'] ?>"><span><?php echo $lang_admin_forums['Redirect URL'] ?></span></label><br />						<span class="fld-input"><?php echo ($cur_forum['num_topics']) ? '<input type="url" id="fld'.$forum_page['fld_count'].'" name="redirect_url" size="45" maxlength="100" value="'.$lang_admin_forums['Only for empty forums'].'" disabled="disabled" />' : '<input type="text" id="fld'.$forum_page['fld_count'].'" name="redirect_url" size="45" maxlength="100" value="'.forum_htmlencode($cur_forum['redirect_url']).'" />'; ?></span>					</div>				</div><?php ($hook = get_hook('afo_edit_forum_pre_details_fieldset_end')) ? eval($hook) : null; ?>			</fieldset><?php($hook = get_hook('afo_edit_forum_details_fieldset_end')) ? eval($hook) : null;// Reset fieldset counter$forum_page['group_count'] = $forum_page['item_count'] = 0;($hook = get_hook('afo_edit_forum_pre_permissions_part')) ? eval($hook) : null;?>			<div class="content-head">				<h3 class="hn"><span><?php echo $lang_admin_forums['Edit forum perms head'] ?></span></h3>			</div>			<div class="ct-box">				<ul>					<?php echo implode("\n\t\t\t\t\t", $forum_page['form_info'])."\n" ?>				</ul>			</div>			<fieldset class="frm-group group<?php echo ++$forum_page['group_count'] ?>">				<legend class="group-legend"><strong><?php echo $lang_admin_forums['Edit forum perms legend'] ?></strong></legend><?php	$i = 2;	$query = array(		'SELECT'	=> 'g.g_id, g.g_title, g.g_read_board, g.g_post_replies, g.g_post_topics, fp.read_forum, fp.post_replies, fp.post_topics',		'FROM'		=> 'groups AS g',		'JOINS'		=> array(			array(				'LEFT JOIN'		=> 'forum_perms AS fp',				'ON'			=> 'g.g_id=fp.group_id AND fp.forum_id='.$forum_id			)		),		'WHERE'		=> 'g.g_id!='.FORUM_ADMIN,		'ORDER BY'	=> 'g.g_id'	);	($hook = get_hook('afo_qr_get_forum_perms')) ? eval($hook) : null;	$result = $forum_db->query_build($query) or error(__FILE__, __LINE__);	while ($cur_perm = $forum_db->fetch_assoc($result))	{		$read_forum = ($cur_perm['read_forum'] != '0') ? true : false;		$post_replies = (($cur_perm['g_post_replies'] == '0' && $cur_perm['post_replies'] == '1') || ($cur_perm['g_post_replies'] == '1' && $cur_perm['post_replies'] != '0')) ? true : false;		$post_topics = (($cur_perm['g_post_topics'] == '0' && $cur_perm['post_topics'] == '1') || ($cur_perm['g_post_topics'] == '1' && $cur_perm['post_topics'] != '0')) ? true : false;		// Determine if the current sittings differ from the default or not		$read_forum_def = ($cur_perm['read_forum'] == '0') ? false : true;		$post_replies_def = (($post_replies && $cur_perm['g_post_replies'] == '0') || (!$post_replies && ($cur_perm['g_post_replies'] == '' || $cur_perm['g_post_replies'] == '1'))) ? false : true;		$post_topics_def = (($post_topics && $cur_perm['g_post_topics'] == '0') || (!$post_topics && ($cur_perm['g_post_topics'] == '' || $cur_perm['g_post_topics'] == '1'))) ? false : true;($hook = get_hook('afo_edit_forum_pre_cur_group_permissions_fieldset')) ? eval($hook) : null;?>				<fieldset class="mf-set set<?php echo ++$forum_page['item_count'] ?>">					<legend><span><?php echo forum_htmlencode($cur_perm['g_title']) ?></span></legend>					<div class="mf-box mf-yesno"><?php ($hook = get_hook('afo_edit_forum_pre_cur_group_read_forum_permission')) ? eval($hook) : null; ?>						<div class="mf-item">							<input type="hidden" name="read_forum_old[<?php echo $cur_perm['g_id'] ?>]" value="<?php echo ($read_forum) ? '1' : '0'; ?>" />							<span class="fld-input"><input type="checkbox" id="fld<?php echo ++$forum_page['fld_count'] ?>" name="read_forum_new[<?php echo $cur_perm['g_id'] ?>]" value="1"<?php if ($read_forum) echo ' checked="checked"'; echo ($cur_perm['g_read_board'] == '0') ? ' disabled="disabled"' : ''; ?> /></span>							<label for="fld<?php echo $forum_page['fld_count'] ?>"<?php if (!$read_forum_def) echo ' class="warn"' ?>><?php echo $lang_admin_forums['Read forum'] ?> <?php if (!$read_forum_def) echo $lang_admin_forums['Not default']  ?></label>						</div><?php ($hook = get_hook('afo_edit_forum_pre_cur_group_post_replies_permission')) ? eval($hook) : null; ?>						<div class="mf-item">							<input type="hidden" name="post_replies_old[<?php echo $cur_perm['g_id'] ?>]" value="<?php echo ($post_replies) ? '1' : '0'; ?>" />							<span class="fld-input"><input type="checkbox" id="fld<?php echo ++$forum_page['fld_count'] ?>" name="post_replies_new[<?php echo $cur_perm['g_id'] ?>]" value="1"<?php if ($post_replies) echo ' checked="checked"'; echo ($cur_forum['redirect_url'] != '') ? ' disabled="disabled"' : ''; ?> /></span>							<label for="fld<?php echo $forum_page['fld_count'] ?>"<?php if (!$post_replies_def) echo ' class="warn"'; ?>><?php echo $lang_admin_forums['Post replies'] ?> <?php if (!$post_replies_def) echo $lang_admin_forums['Not default'] ?></label>						</div><?php ($hook = get_hook('afo_edit_forum_pre_cur_group_post_topics_permission')) ? eval($hook) : null; ?>						<div class="mf-item">							<input type="hidden" name="post_topics_old[<?php echo $cur_perm['g_id'] ?>]" value="<?php echo ($post_topics) ? '1' : '0'; ?>" />							<span class="fld-input"><input type="checkbox" id="fld<?php echo ++$forum_page['fld_count'] ?>" name="post_topics_new[<?php echo $cur_perm['g_id'] ?>]" value="1"<?php if ($post_topics) echo ' checked="checked"'; echo ($cur_forum['redirect_url'] != '') ? ' disabled="disabled"' : ''; ?> /></span>							<label for="fld<?php echo $forum_page['fld_count'] ?>"<?php if (!$post_topics_def) echo ' class="warn"'; ?>><?php echo $lang_admin_forums['Post topics'] ?> <?php if (!$post_topics_def) echo $lang_admin_forums['Not default'] ?></label>						</div><?php ($hook = get_hook('afo_edit_forum_post_cur_group_post_topics_permission')) ? eval($hook) : null; ?>					</div><?php ($hook = get_hook('afo_edit_forum_pre_cur_group_permissions_fieldset_end')) ? eval($hook) : null; ?>				</fieldset><?php		($hook = get_hook('afo_edit_forum_cur_group_permissions_fieldset_end')) ? eval($hook) : null;		++$i;	}?>			</fieldset>			<div class="frm-buttons">				<span class="submit primary"><input type="submit" name="save" value="<?php echo $lang_admin_common['Save changes'] ?>" /></span>				<span class="submit"><input type="submit" name="revert_perms" value="<?php echo $lang_admin_forums['Restore defaults'] ?>" formnovalidate /></span>			</div>		</form>	</div><?php	($hook = get_hook('afo_edit_forum_end')) ? eval($hook) : null;	$tpl_temp = forum_trim(ob_get_contents());	$tpl_main = str_replace('<!-- forum_main -->', $tpl_temp, $tpl_main);	ob_end_clean();	// END SUBST - <!-- forum_main -->	require FORUM_ROOT.'footer.php';}// Setup the form$forum_page['fld_count'] = $forum_page['group_count'] = $forum_page['item_count'] = 0;// Setup breadcrumbs$forum_page['crumbs'] = array(	array($forum_config['o_board_title'], forum_link($forum_url['index'])),	array($lang_admin_common['Forum administration'], forum_link($forum_url['admin_index'])),	array($lang_admin_common['Start'], forum_link($forum_url['admin_index'])),	array($lang_admin_common['Forums'], forum_link($forum_url['admin_forums'])));($hook = get_hook('afo_pre_header_load')) ? eval($hook) : null;define('FORUM_PAGE_SECTION', 'start');define('FORUM_PAGE', 'admin-forums');require FORUM_ROOT.'header.php';// START SUBST - <!-- forum_main -->ob_start();($hook = get_hook('afo_main_output_start')) ? eval($hook) : null;?>	<div class="main-subhead">		<h2 class="hn"><span><?php echo $lang_admin_forums['Add forum head'] ?></span></h2>	</div>	<div class="main-content main-frm">		<form class="frm-form" method="post" accept-charset="utf-8" action="<?php echo forum_link($forum_url['admin_forums']) ?>?action=adddel">			<div class="hidden">				<input type="hidden" name="csrf_token" value="<?php echo generate_form_token(forum_link($forum_url['admin_forums']).'?action=adddel') ?>" />			</div><?php ($hook = get_hook('afo_pre_add_forum_fieldset')) ? eval($hook) : null; ?>			<fieldset class="frm-group group<?php echo ++$forum_page['group_count'] ?>">				<legend class="group-legend"><strong><?php echo $lang_admin_forums['Add forum legend'] ?></strong></legend><?php ($hook = get_hook('afo_pre_new_forum_name')) ? eval($hook) : null; ?>				<div class="sf-set set<?php echo ++$forum_page['item_count'] ?>">					<div class="sf-box text">						<label for="fld<?php echo ++$forum_page['fld_count'] ?>"><span><?php echo $lang_admin_forums['Forum name label'] ?></span></label><br />						<span class="fld-input"><input type="text" id="fld<?php echo $forum_page['fld_count'] ?>" name="forum_name" size="35" maxlength="80" required /></span>					</div>				</div><?php ($hook = get_hook('afo_pre_new_forum_position')) ? eval($hook) : null; ?>				<div class="sf-set set<?php echo ++$forum_page['item_count'] ?>">					<div class="sf-box text">						<label for="fld<?php echo ++$forum_page['fld_count'] ?>"><span><?php echo $lang_admin_forums['Position label'] ?></span></label><br />						<span class="fld-input"><input type="number" id="fld<?php echo $forum_page['fld_count'] ?>" name="position" size="3" maxlength="3" /></span>					</div>				</div><?php ($hook = get_hook('afo_pre_new_forum_cat')) ? eval($hook) : null; ?>				<div class="sf-set set<?php echo ++$forum_page['item_count'] ?>">					<div class="sf-box select">						<label for="fld<?php echo ++$forum_page['fld_count'] ?>"><span><?php echo $lang_admin_forums['Add to category label'] ?></span></label><br />						<span class="fld-input"><select id="fld<?php echo $forum_page['fld_count'] ?>" name="add_to_cat"><?php	$query = array(		'SELECT'	=> 'c.id, c.cat_name',		'FROM'		=> 'categories AS c',		'ORDER BY'	=> 'c.disp_position'	);	($hook = get_hook('afo_qr_get_categories')) ? eval($hook) : null;	$result = $forum_db->query_build($query) or error(__FILE__, __LINE__);	while ($cur_cat = $forum_db->fetch_assoc($result))		echo "\t\t\t\t\t\t\t".'<option value="'.$cur_cat['id'].'">'.forum_htmlencode($cur_cat['cat_name']).'</option>'."\n";?>						</select></span>					</div>				</div><?php ($hook = get_hook('afo_pre_add_forum_fieldset_end')) ? eval($hook) : null; ?>			</fieldset><?php ($hook = get_hook('afo_add_forum_fieldset_end')) ? eval($hook) : null; ?>			<div class="frm-buttons">				<span class="submit"><input type="submit" name="add_forum" value=" <?php echo $lang_admin_forums['Add forum'] ?> " /></span>			</div>		</form>	</div><?php// Display all the categories and forums$query = array(	'SELECT'	=> 'c.id AS cid, c.cat_name, f.id AS fid, f.forum_name, f.disp_position',	'FROM'		=> 'categories AS c',	'JOINS'		=> array(		array(			'INNER JOIN'	=> 'forums AS f',			'ON'			=> 'c.id=f.cat_id'		)	),	'ORDER BY'	=> 'c.disp_position, c.id, f.disp_position');($hook = get_hook('afo_qr_get_cats_and_forums')) ? eval($hook) : null;$result = $forum_db->query_build($query) or error(__FILE__, __LINE__);$forums = array();while ($cur_forum = $forum_db->fetch_assoc($result)){	$forums[] = $cur_forum;}if (!empty($forums)){	// Reset fieldset counter	$forum_page['set_count'] = 0;?>	<div class="main-subhead">		<h2 class="hn"><span><?php echo $lang_admin_forums['Edit forums head'] ?></span></h2>	</div>	<div class="main-content main-frm">		<form class="frm-form" method="post" accept-charset="utf-8" action="<?php echo forum_link($forum_url['admin_forums']) ?>?action=edit">			<div class="hidden">				<input type="hidden" name="csrf_token" value="<?php echo generate_form_token(forum_link($forum_url['admin_forums']).'?action=edit') ?>" />			</div><?php	$cur_category = 0;	$i = 2;	$forum_page['item_count'] = 0;	foreach ($forums as $cur_forum)	{		if ($cur_forum['cid'] != $cur_category)	// A new category since last iteration?		{			if ($i > 2) echo "\t\t\t".'</div>'."\n";			$forum_page['group_count'] = $forum_page['item_count'] = 0;?>			<div class="content-head">				<h3 class="hn"><span><?php printf($lang_admin_forums['Forums in category'], forum_htmlencode($cur_forum['cat_name'])) ?></span></h3>			</div>			<div class="frm-group frm-hdgroup group<?php echo ++$forum_page['group_count'] ?>"><?php			$cur_category = $cur_forum['cid'];		}($hook = get_hook('afo_pre_edit_cur_forum_fieldset')) ? eval($hook) : null;?>				<fieldset class="mf-set set<?php echo ++$forum_page['item_count'] ?><?php echo ($forum_page['item_count'] == 1) ? ' mf-head' : ' mf-extra' ?>">					<legend><span><?php printf($lang_admin_forums['Edit or delete'], '<a href="'.forum_link($forum_url['admin_forums']).'?edit_forum='.$cur_forum['fid'].'">'.$lang_admin_forums['Edit'].'</a>', '<a href="'.forum_link($forum_url['admin_forums']).'?del_forum='.$cur_forum['fid'].'">'.$lang_admin_forums['Delete'].'</a>') ?></span></legend>					<div class="mf-box"><?php ($hook = get_hook('afo_pre_edit_cur_forum_name')) ? eval($hook) : null; ?>						<div class="mf-field mf-field1 forum-field">							<span class="aslabel"><?php echo $lang_admin_forums['Forum name'] ?></span>							<span class="fld-input"><?php echo forum_htmlencode($cur_forum['forum_name']) ?></span>						</div><?php ($hook = get_hook('afo_pre_edit_cur_forum_position')) ? eval($hook) : null; ?>						<div class="mf-field">							<label for="fld<?php echo ++$forum_page['fld_count'] ?>"><span><?php echo $lang_admin_forums['Position label'] ?></span></label><br />							<span class="fld-input"><input type="number" id="fld<?php echo $forum_page['fld_count'] ?>" name="position[<?php echo $cur_forum['fid'] ?>]" size="3" maxlength="3" value="<?php echo $cur_forum['disp_position'] ?>" /></span>						</div>					</div><?php ($hook = get_hook('afo_pre_edit_cur_forum_fieldset_end')) ? eval($hook) : null; ?>				</fieldset><?php		($hook = get_hook('afo_edit_cur_forum_fieldset_end')) ? eval($hook) : null;		++$i;	}?>			</div>			<div class="frm-buttons">				<span class="submit"><input type="submit" name="update_positions" value="<?php echo $lang_admin_forums['Update positions'] ?>" /></span>			</div>		</form>	</div><?php}($hook = get_hook('afo_end')) ? eval($hook) : null;$tpl_temp = forum_trim(ob_get_contents());$tpl_main = str_replace('<!-- forum_main -->', $tpl_temp, $tpl_main);ob_end_clean();// END SUBST - <!-- forum_main -->require FORUM_ROOT.'footer.php';
<?php/** * External syndication script * * Allows forum content to be syndicated outside of the site in various formats * (ie: RSS, Atom, XML, HTML). * * @copyright (C) 2008-2011 PunBB, partially based on code (C) 2008-2009 FluxBB.org * @license http://www.gnu.org/licenses/gpl.html GPL version 2 or higher * @package PunBB *//***********************************************************************  INSTRUCTIONS  This script is used to include information about your board from  pages outside the forums and to syndicate news about recent  discussions via RSS/Atom/XML. The script can display a list of  recent discussions, a list of active users or a collection of  general board statistics. The script can be called directly via  an URL, from a PHP include command or through the use of Server  Side Includes (SSI).  The scripts behaviour is controlled via variables supplied in the  URL to the script. The different variables are: action (what to  do), show (how many items to display), fid (the ID or ID's of  the forum(s) to poll for topics), nfid (the ID or ID's of forums  that should be excluded), tid (the ID of the topic from which to  display posts) and type (output as HTML or RSS). The only  mandatory variable is action. Possible/default values are:    action: feed - show most recent topics/posts (HTML or RSS)            online - show users online (HTML)            online_full - as above, but includes a full list (HTML)            stats - show board statistics (HTML)    type:   rss - output as RSS 2.0            atom - output as Atom 1.0            xml - output as XML            html - output as HTML (<li>'s)    fid:    One or more forum ID's (comma-separated). If ignored,            topics from all readable forums will be pulled.    nfid:   One or more forum ID's (comma-separated) that are to be            excluded. E.g. the ID of a a test forum.    tid:    A topic ID from which to show posts. If a tid is supplied,            fid and nfid are ignored.    show:   Any integer value between 1 and 50. The default is 15./***********************************************************************/define('FORUM_QUIET_VISIT', 1);if (!defined('FORUM_ROOT'))	define('FORUM_ROOT', './');require FORUM_ROOT.'include/common.php';($hook = get_hook('ex_start')) ? eval($hook) : null;// The length at which topic subjects will be truncated (for HTML output)if (!defined('FORUM_EXTERN_MAX_SUBJECT_LENGTH'))    define('FORUM_EXTERN_MAX_SUBJECT_LENGTH', 30);// If we're a guest and we've sent a username/pass, we can try to authenticate using those detailsif ($forum_user['is_guest'] && isset($_SERVER['PHP_AUTH_USER']))	authenticate_user($_SERVER['PHP_AUTH_USER'], $_SERVER['PHP_AUTH_PW']);if ($forum_user['g_read_board'] == '0'){	http_authenticate_user();	exit($lang_common['No view']);}$action = isset($_GET['action']) ? $_GET['action'] : 'feed';//// Sends the proper headers for Basic HTTP Authentication//function http_authenticate_user(){	global $forum_config, $forum_user;	if (!$forum_user['is_guest'])		return;	header('WWW-Authenticate: Basic realm="'.$forum_config['o_board_title'].' External Syndication"');	header('HTTP/1.0 401 Unauthorized');}//// Output $feed as RSS 2.0//function output_rss($feed){	global $lang_common, $forum_config;	// Send XML/no cache headers	header('Content-Type: text/xml; charset=utf-8');	header('Expires: '.gmdate('D, d M Y H:i:s').' GMT');	header('Cache-Control: must-revalidate, post-check=0, pre-check=0');	header('Pragma: public');	echo '<?xml version="1.0" encoding="utf-8"?>'."\n";	echo '<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">'."\n";	echo "\t".'<channel>'."\n";	echo "\t\t".'<title><![CDATA['.escape_cdata($feed['title']).']]></title>'."\n";	echo "\t\t".'<link>'.$feed['link'].'</link>'."\n";	echo "\t\t".'<atom:link href="'.forum_htmlencode(get_current_url()).'" rel="self" type="application/rss+xml" />'."\n";	echo "\t\t".'<description><![CDATA['.escape_cdata($feed['description']).']]></description>'."\n";	echo "\t\t".'<lastBuildDate>'.gmdate('r', count($feed['items']) ? $feed['items'][0]['pubdate'] : time()).'</lastBuildDate>'."\n";	if ($forum_config['o_show_version'] == '1')		echo "\t\t".'<generator>PunBB '.$forum_config['o_cur_version'].'</generator>'."\n";	else		echo "\t\t".'<generator>PunBB</generator>'."\n";	($hook = get_hook('ex_add_new_rss_info')) ? eval($hook) : null;	foreach ($feed['items'] as $item)	{		echo "\t\t".'<item>'."\n";		echo "\t\t\t".'<title><![CDATA['.escape_cdata($item['title']).']]></title>'."\n";		echo "\t\t\t".'<link>'.$item['link'].'</link>'."\n";		echo "\t\t\t".'<description><![CDATA['.escape_cdata($item['description']).']]></description>'."\n";		echo "\t\t\t".'<author><![CDATA['.(isset($item['author']['email']) ? escape_cdata($item['author']['email']) : 'null@example.com').' ('.escape_cdata($item['author']['name']).')]]></author>'."\n";		echo "\t\t\t".'<pubDate>'.gmdate('r', $item['pubdate']).'</pubDate>'."\n";		echo "\t\t\t".'<guid>'.$item['link'].'</guid>'."\n";		($hook = get_hook('ex_add_new_rss_item_info')) ? eval($hook) : null;		echo "\t\t".'</item>'."\n";	}	echo "\t".'</channel>'."\n";	echo '</rss>'."\n";}//// Output $feed as Atom 1.0//function output_atom($feed){	global $lang_common, $forum_config;	// Send XML/no cache headers	header('Content-Type: text/xml; charset=utf-8');	header('Expires: '.gmdate('D, d M Y H:i:s').' GMT');	header('Cache-Control: must-revalidate, post-check=0, pre-check=0');	header('Pragma: public');	echo '<?xml version="1.0" encoding="utf-8"?>'."\n";	echo '<feed xmlns="http://www.w3.org/2005/Atom">'."\n";	echo "\t".'<title type="html"><![CDATA['.escape_cdata($feed['title']).']]></title>'."\n";	echo "\t".'<link rel="self" href="'.forum_htmlencode(get_current_url()).'"/>'."\n";	echo "\t".'<updated>'.gmdate('Y-m-d\TH:i:s\Z', count($feed['items']) ? $feed['items'][0]['pubdate'] : time()).'</updated>'."\n";	if ($forum_config['o_show_version'] == '1')		echo "\t".'<generator version="'.$forum_config['o_cur_version'].'">PunBB</generator>'."\n";	else		echo "\t".'<generator>PunBB</generator>'."\n";	($hook = get_hook('ex_add_new_atom_info')) ? eval($hook) : null;	echo "\t".'<id>'.$feed['link'].'</id>'."\n";	$content_tag = ($feed['type'] == 'posts') ? 'content' : 'summary';	foreach ($feed['items'] as $item)	{		echo "\t\t".'<entry>'."\n";		echo "\t\t\t".'<title type="html"><![CDATA['.escape_cdata($item['title']).']]></title>'."\n";		echo "\t\t\t".'<link rel="alternate" href="'.$item['link'].'"/>'."\n";		echo "\t\t\t".'<'.$content_tag.' type="html"><![CDATA['.escape_cdata($item['description']).']]></'.$content_tag.'>'."\n";		echo "\t\t\t".'<author>'."\n";		echo "\t\t\t\t".'<name><![CDATA['.escape_cdata($item['author']['name']).']]></name>'."\n";		if (isset($item['author']['email']))			echo "\t\t\t\t".'<email><![CDATA['.escape_cdata($item['author']['email']).']]></email>'."\n";		if (isset($item['author']['uri']))			echo "\t\t\t\t".'<uri>'.$item['author']['uri'].'</uri>'."\n";		echo "\t\t\t".'</author>'."\n";		echo "\t\t\t".'<updated>'.gmdate('Y-m-d\TH:i:s\Z', $item['pubdate']).'</updated>'."\n";		($hook = get_hook('ex_add_new_atom_item_info')) ? eval($hook) : null;		echo "\t\t\t".'<id>'.$item['link'].'</id>'."\n";		echo "\t\t".'</entry>'."\n";	}	echo '</feed>'."\n";}//// Output $feed as XML//function output_xml($feed){	global $lang_common, $forum_config;	// Send XML/no cache headers	header('Content-Type: application/xml; charset=utf-8');	header('Expires: '.gmdate('D, d M Y H:i:s').' GMT');	header('Cache-Control: must-revalidate, post-check=0, pre-check=0');	header('Pragma: public');	echo '<?xml version="1.0" encoding="utf-8"?>'."\n";	echo '<source>'."\n";	echo "\t".'<url>'.$feed['link'].'</url>'."\n";	($hook = get_hook('ex_add_new_xml_info')) ? eval($hook) : null;	$forum_tag = ($feed['type'] == 'posts') ? 'post' : 'topic';	foreach ($feed['items'] as $item)	{		echo "\t".'<'.$forum_tag.' id="'.$item['id'].'">'."\n";		echo "\t\t".'<title><![CDATA['.escape_cdata($item['title']).']]></title>'."\n";		echo "\t\t".'<link>'.$item['link'].'</link>'."\n";		echo "\t\t".'<content><![CDATA['.escape_cdata($item['description']).']]></content>'."\n";		echo "\t\t".'<author>'."\n";		echo "\t\t\t".'<name><![CDATA['.escape_cdata($item['author']['name']).']]></name>'."\n";		if (isset($item['author']['email']))			echo "\t\t\t".'<email><![CDATA['.escape_cdata($item['author']['email']).']]></email>'."\n";		if (isset($item['author']['uri']))			echo "\t\t\t".'<uri>'.$item['author']['uri'].'</uri>'."\n";		echo "\t\t".'</author>'."\n";		echo "\t\t".'<posted>'.gmdate('r', $item['pubdate']).'</posted>'."\n";		($hook = get_hook('ex_add_new_xml_item_info')) ? eval($hook) : null;		echo "\t".'</'.$forum_tag.'>'."\n";	}	echo '</source>'."\n";}//// Output $feed as HTML (using <li> tags)//function output_html($feed){	// Send the Content-type header in case the web server is setup to send something else	header('Content-type: text/html; charset=utf-8');	header('Expires: '.gmdate('D, d M Y H:i:s').' GMT');	header('Cache-Control: must-revalidate, post-check=0, pre-check=0');	header('Pragma: public');	foreach ($feed['items'] as $item)	{		if (utf8_strlen($item['title']) > FORUM_EXTERN_MAX_SUBJECT_LENGTH)			$subject_truncated = forum_htmlencode(forum_trim(utf8_substr($item['title'], 0, (FORUM_EXTERN_MAX_SUBJECT_LENGTH - 5)))).'';		else			$subject_truncated = forum_htmlencode($item['title']);		echo '<li><a href="'.$item['link'].'" title="'.forum_htmlencode($item['title']).'">'.$subject_truncated.'</a></li>'."\n";	}}// Show recent discussionsif ($action == 'feed'){	// Determine what type of feed to output	$type = isset($_GET['type']) && in_array($_GET['type'], array('html', 'rss', 'atom', 'xml')) ? $_GET['type'] : 'html';	$show = isset($_GET['show']) ? intval($_GET['show']) : 15;	if ($show < 1 || $show > 50)		$show = 15;	($hook = get_hook('ex_set_syndication_type')) ? eval($hook) : null;	// Was a topic ID supplied?	if (isset($_GET['tid']))	{		$tid = intval($_GET['tid']);		// Fetch topic subject		$query = array(			'SELECT'	=> 't.subject, t.first_post_id',			'FROM'		=> 'topics AS t',			'JOINS'		=> array(				array(					'LEFT JOIN'		=> 'forum_perms AS fp',					'ON'			=> '(fp.forum_id=t.forum_id AND fp.group_id='.$forum_user['g_id'].')'				)			),			'WHERE'		=> '(fp.read_forum IS NULL OR fp.read_forum=1) AND t.moved_to IS NULL and t.id='.$tid		);		($hook = get_hook('ex_qr_get_topic_data')) ? eval($hook) : null;		$result = $forum_db->query_build($query) or error(__FILE__, __LINE__);		$cur_topic = $forum_db->fetch_assoc($result);		if (!$cur_topic)		{			http_authenticate_user();			exit($lang_common['Bad request']);		}		if (!defined('FORUM_PARSER_LOADED'))			require FORUM_ROOT.'include/parser.php';		if ($forum_config['o_censoring'] == '1')			$cur_topic['subject'] = censor_words($cur_topic['subject']);		// Setup the feed		$feed = array(			'title' 		=>	$forum_config['o_board_title'].$lang_common['Title separator'].$cur_topic['subject'],			'link'			=>	forum_link($forum_url['topic'], array($tid, sef_friendly($cur_topic['subject']))),			'description'	=>	sprintf($lang_common['RSS description topic'], $cur_topic['subject']),			'items'			=>	array(),			'type'			=>	'posts'		);		// Fetch $show posts		$query = array(			'SELECT'	=> 'p.id, p.poster, p.message, p.hide_smilies, p.posted, p.poster_id, u.email_setting, u.email, p.poster_email',			'FROM'		=> 'posts AS p',			'JOINS'		=> array(				array(					'INNER JOIN'	=> 'users AS u',					'ON'			=> 'u.id = p.poster_id'				)			),			'WHERE'		=> 'p.topic_id='.$tid,			'ORDER BY'	=> 'p.posted DESC',			'LIMIT'		=> $show		);		($hook = get_hook('ex_qr_get_posts')) ? eval($hook) : null;		$result = $forum_db->query_build($query) or error(__FILE__, __LINE__);		while ($cur_post = $forum_db->fetch_assoc($result))		{			if ($forum_config['o_censoring'] == '1')				$cur_post['message'] = censor_words($cur_post['message']);			$cur_post['message'] = parse_message($cur_post['message'], $cur_post['hide_smilies']);			$item = array(				'id'			=>	$cur_post['id'],				'title'			=>	$cur_topic['first_post_id'] == $cur_post['id'] ? $cur_topic['subject'] : $lang_common['RSS reply'].$cur_topic['subject'],				'link'			=>	forum_link($forum_url['post'], $cur_post['id']),				'description'	=>	$cur_post['message'],				'author'		=>	array(					'name'	=> $cur_post['poster'],				),				'pubdate'		=>	$cur_post['posted']			);			if ($cur_post['poster_id'] > 1)			{				if ($cur_post['email_setting'] == '0' && !$forum_user['is_guest'])					$item['author']['email'] = $cur_post['email'];				$item['author']['uri'] = forum_link($forum_url['user'], $cur_post['poster_id']);			}			else if ($cur_post['poster_email'] != '' && !$forum_user['is_guest'])				$item['author']['email'] = $cur_post['poster_email'];			$feed['items'][] = $item;			($hook = get_hook('ex_modify_cur_post_item')) ? eval($hook) : null;		}		($hook = get_hook('ex_pre_topic_output')) ? eval($hook) : null;		$output_func = 'output_'.$type;		$output_func($feed);	}	else	{		$forum_name = '';		if (!defined('FORUM_PARSER_LOADED'))			require FORUM_ROOT.'include/parser.php';		// Were any forum ID's supplied?		if (isset($_GET['fid']) && is_scalar($_GET['fid']) && $_GET['fid'] != '')		{			$fids = explode(',', forum_trim($_GET['fid']));			$fids = array_map('intval', $fids);			if (!empty($fids))				$forum_sql = ' AND t.forum_id IN('.implode(',', $fids).')';			if (count($fids) == 1)			{				// Fetch forum name				$query = array(					'SELECT'	=> 'f.forum_name',					'FROM'		=> 'forums AS f',					'JOINS'		=> array(						array(							'LEFT JOIN'		=> 'forum_perms AS fp',							'ON'			=> '(fp.forum_id=f.id AND fp.group_id='.$forum_user['g_id'].')'						)					),					'WHERE'		=> '(fp.read_forum IS NULL OR fp.read_forum=1) AND f.id='.$fids[0]				);				$result = $forum_db->query_build($query) or error(__FILE__, __LINE__);				$forum_name_in_db = $forum_db->result($result);				if ($forum_name_in_db !== false)					$forum_name = $lang_common['Title separator'].$forum_name_in_db;			}		}		// Any forum ID's to exclude?		if (isset($_GET['nfid']) && is_scalar($_GET['nfid']) && $_GET['nfid'] != '')		{			$nfids = explode(',', forum_trim($_GET['nfid']));			$nfids = array_map('intval', $nfids);			if (!empty($nfids))				$forum_sql = ' AND t.forum_id NOT IN('.implode(',', $nfids).')';		}		// Setup the feed		$feed = array(			'title' 		=>	$forum_config['o_board_title'].$forum_name,			'link'			=>	forum_link($forum_url['index']),			'description'	=>	sprintf($lang_common['RSS description'], $forum_config['o_board_title']),			'items'			=>	array(),			'type'			=>	'topics'		);		// Fetch $show topics		$query = array(			'SELECT'	=> 't.id, t.poster, t.posted, t.subject, p.message, p.hide_smilies, u.email_setting, u.email, p.poster_id, p.poster_email',			'FROM'		=> 'topics AS t',			'JOINS'		=> array(				array(					'INNER JOIN'	=> 'posts AS p',					'ON'			=> 'p.id = t.first_post_id'				),				array(					'INNER JOIN'	=> 'users AS u',					'ON'			=> 'u.id = p.poster_id'				),				array(					'LEFT JOIN'		=> 'forum_perms AS fp',					'ON'			=> '(fp.forum_id = t.forum_id AND fp.group_id = '.$forum_user['g_id'].')'				)			),			'WHERE'		=> '(fp.read_forum IS NULL OR fp.read_forum = 1) AND t.moved_to IS NULL',			'ORDER BY'	=> 't.posted DESC',			'LIMIT'		=> $show		);		if (isset($forum_sql))			$query['WHERE'] .= $forum_sql;		($hook = get_hook('ex_qr_get_topics')) ? eval($hook) : null;		$result = $forum_db->query_build($query) or error(__FILE__, __LINE__);		while ($cur_topic = $forum_db->fetch_assoc($result))		{			if ($forum_config['o_censoring'] == '1')			{				$cur_topic['subject'] = censor_words($cur_topic['subject']);				$cur_topic['message'] = censor_words($cur_topic['message']);			}			$cur_topic['message'] = parse_message($cur_topic['message'], $cur_topic['hide_smilies']);			$item = array(				'id'			=>	$cur_topic['id'],				'title'			=>	$cur_topic['subject'],				'link'			=>	forum_link($forum_url['topic_new_posts'], array($cur_topic['id'], sef_friendly($cur_topic['subject']))),				'description'	=>	$cur_topic['message'],				'author'		=>	array(					'name'			=> $cur_topic['poster']				),				'pubdate'		=>	$cur_topic['posted']			);			if ($cur_topic['poster_id'] > 1)			{				if ($cur_topic['email_setting'] == '0' && !$forum_user['is_guest'])					$item['author']['email'] = $cur_topic['email'];				$item['author']['uri'] = forum_link($forum_url['user'], $cur_topic['poster_id']);			}			else if ($cur_topic['poster_email'] != '' && !$forum_user['is_guest'])				$item['author']['email'] = $cur_topic['poster_email'];			$feed['items'][] = $item;			($hook = get_hook('ex_modify_cur_topic_item')) ? eval($hook) : null;		}		($hook = get_hook('ex_pre_forum_output')) ? eval($hook) : null;		$output_func = 'output_'.$type;		$output_func($feed);	}	exit;}// Show users onlineelse if ($action == 'online' || $action == 'online_full'){	// Load the index.php language file	require FORUM_ROOT.'lang/'.$forum_config['o_default_lang'].'/index.php';	// Fetch users online info and generate strings for output	$num_guests = $num_users = 0;	$users = array();	$query = array(		'SELECT'	=> 'o.user_id, o.ident',		'FROM'		=> 'online AS o',		'WHERE'		=> 'o.idle=0',		'ORDER BY'	=> 'o.ident'	);	($hook = get_hook('ex_qr_get_users_online')) ? eval($hook) : null;	$result = $forum_db->query_build($query) or error(__FILE__, __LINE__);	while ($forum_user_online = $forum_db->fetch_assoc($result))	{		if ($forum_user_online['user_id'] > 1)		{			$users[] = $forum_user['g_view_users'] == '1' ?'<a href="'.forum_link($forum_url['user'], $forum_user_online['user_id']).'">'.forum_htmlencode($forum_user_online['ident']).'</a>' : forum_htmlencode($forum_user_online['ident']);			++$num_users;		}		else			++$num_guests;	}	($hook = get_hook('ex_pre_online_output')) ? eval($hook) : null;	// Send the Content-type header in case the web server is setup to send something else	header('Content-type: text/html; charset=utf-8');	header('Expires: '.gmdate('D, d M Y H:i:s').' GMT');	header('Cache-Control: must-revalidate, post-check=0, pre-check=0');	header('Pragma: public');	echo $lang_index['Guests online'].': '.forum_number_format($num_guests).'<br />'."\n";	if ($_GET['action'] == 'online_full' && !empty($users))		echo $lang_index['Users online'].': '.implode($lang_index['Online list separator'], $users).'<br />'."\n";	else		echo $lang_index['Users online'].': '.forum_number_format($num_users).'<br />'."\n";	exit;}// Show board statisticselse if ($action == 'stats'){	// Load the index.php language file	require FORUM_ROOT.'lang/'.$forum_config['o_default_lang'].'/index.php';	// Collect some statistics from the database	$query = array(		'SELECT'	=> 'COUNT(u.id) - 1',		'FROM'		=> 'users AS u',		'WHERE'		=> 'u.group_id != '.FORUM_UNVERIFIED	);	($hook = get_hook('ex_qr_get_user_count')) ? eval($hook) : null;	$result = $forum_db->query_build($query) or error(__FILE__, __LINE__);	$stats['total_users'] = $forum_db->result($result);	$query = array(		'SELECT'	=> 'u.id, u.username',		'FROM'		=> 'users AS u',		'WHERE'		=> 'u.group_id != '.FORUM_UNVERIFIED,		'ORDER BY'	=> 'u.registered DESC',		'LIMIT'		=> '1'	);	($hook = get_hook('ex_qr_get_newest_user')) ? eval($hook) : null;	$result = $forum_db->query_build($query) or error(__FILE__, __LINE__);	$stats['last_user'] = $forum_db->fetch_assoc($result);	$query = array(		'SELECT'	=> 'SUM(f.num_topics), SUM(f.num_posts)',		'FROM'		=> 'forums AS f'	);	($hook = get_hook('ex_qr_get_post_stats')) ? eval($hook) : null;	$result = $forum_db->query_build($query) or error(__FILE__, __LINE__);	list($stats['total_topics'], $stats['total_posts']) = $forum_db->fetch_row($result);	// Send the Content-type header in case the web server is setup to send something else	header('Content-type: text/html; charset=utf-8');	header('Expires: '.gmdate('D, d M Y H:i:s').' GMT');	header('Cache-Control: must-revalidate, post-check=0, pre-check=0');	header('Pragma: public');	($hook = get_hook('ex_pre_stats_output')) ? eval($hook) : null;	echo sprintf($lang_index['No of users'], forum_number_format($stats['total_users'])).'<br />'."\n";	echo sprintf($lang_index['Newest user'], '<a href="'.forum_link($forum_url['user'], $stats['last_user']['id']).'">'.forum_htmlencode($stats['last_user']['username']).'</a>').'<br />'."\n";	echo sprintf($lang_index['No of topics'], forum_number_format($stats['total_topics'])).'<br />'."\n";	echo sprintf($lang_index['No of posts'], forum_number_format($stats['total_posts'])).'<br />'."\n";	exit;}($hook = get_hook('ex_new_action')) ? eval($hook) : null;// If we end up here, the script was called with some wacky parametersexit($lang_common['Bad request']);
<?php// Language definitions used in search.php$lang_search = array(// The search form'No search permission'		=>	'You do not have permission to use the search feature.','Search heading'			=>	'Search forums using your criteria','Search flood'				=>	'At least %s seconds have to pass between searches. Please wait a while and try searching again.','Search legend'				=>	'Search criteria','Results legend'			=>	'Search results','Keywords info'				=>	'You may search for a single keyword or for multiple keywords separated by spaces.','Refine info'				=>	'You may use <strong>AND</strong>, <strong>OR</strong> and <strong>NOT</strong> to refine your searches by keyword.','Wildcard info'				=>	'Use the wildcard character <strong>*</strong> for partial keyword or username matches.','Forum default info'		=>	'By default all forums are searched. You may narrow your search by selecting one or more forums to search.','Forum require info'		=>	'You may choose to search one or more forums. You <strong>must</strong> select at least one forum to search.','Keyword search'			=>	'Keyword or words','Author search'				=>	'Author\'s username','Forum search'				=>	'Select forums to search','Forum search default'		=>	'If no forums are selected then all forums will be searched.','Forum search require'		=>	'You must select at least one forum to search.','Sort by'					=>	'Sort results by','Sort order'				=>	'Results sort order','Sort by post time'			=>	'Post time','Sort by author'			=>	'Author','Sort by subject'			=>	'Subject','Sort by forum'				=>	'Forum','Ascending'					=>	'Ascending','Descending'				=>	'Descending','Display results'			=>	'Display results','Show as topics'			=>	'As topics','Show as posts'				=>	'As posts','Submit search'				=>	'Submit','User defined search'		=>	'User defined search','Advanced search'			=>	'Advanced search','Search in'					=>	'Search in','Message and subject'		=>	'Message text and topic subject','Message only'				=>	'Message text only','Topic only'				=>	'Topic subject only',// Results'Search results'			=>	'Search results','Topics with new'			=>	'Topics with new posts','All Topics'				=>	'Show all topics','Recently active topics'	=>	'Recently active topics','Unanswered topics'			=>	'Unanswered topics','Subscriptions'				=>	'Subscriptions','Topics found'				=>	'Topics found','Posts found'				=>	'Posts found','Topics by'					=>	'Topics by %s','Posts by'					=>	'Posts by %s','Topics by user'			=>	'Topics by this user','Posts by user'				=>	'Posts by this user','Perform new search'		=>	'Perform new search','Search options'			=>	'Search options','Posted in'					=>	'Posted in ','No terms'					=>	'You have to enter at least one keyword and/or an author to search for.','No hits'					=>	'Your search returned no hits.','No user posts'				=>	'There are no posts by this user in this forum.','No user topics'			=>	'There are no topics by this user in this forum.','No subscriptions'			=>	'There are no topics which have been subscribed to.','No new posts'				=>	'There are no topics with new posts since your last visit.','No recent posts'			=>	'No posts have been made recently.','No unanswered'				=>	'There are no unanswered posts in this forum.','Go to post'				=>	'Go to post','Go to forum'				=>	'Go to forum','Go to topic'				=>	'Go to topic','Go to profile'				=>	'Go to %s\'s profile');
<?php/** * Handles logins, logouts, and password reset requests. * * @copyright (C) 2008-2011 PunBB, partially based on code (C) 2008-2009 FluxBB.org * @license http://www.gnu.org/licenses/gpl.html GPL version 2 or higher * @package PunBB */if (isset($_GET['action']))	define('FORUM_QUIET_VISIT', 1);if (!defined('FORUM_ROOT'))	define('FORUM_ROOT', './');require FORUM_ROOT.'include/common.php';($hook = get_hook('li_start')) ? eval($hook) : null;// Load the login.php language filerequire FORUM_ROOT.'lang/'.$forum_user['language'].'/login.php';$action = isset($_GET['action']) ? $_GET['action'] : null;$errors = array();// Loginif (isset($_POST['form_sent']) && empty($action)){	$form_username = forum_trim($_POST['req_username']);	$form_password = forum_trim($_POST['req_password']);	$save_pass = isset($_POST['save_pass']);	($hook = get_hook('li_login_form_submitted')) ? eval($hook) : null;	// Get user info matching login attempt	$query = array(		'SELECT'	=> 'u.id, u.group_id, u.password, u.salt',		'FROM'		=> 'users AS u'	);	if (in_array($db_type, array('mysql', 'mysqli', 'mysql_innodb', 'mysqli_innodb')))		$query['WHERE'] = 'username=\''.$forum_db->escape($form_username).'\'';	else		$query['WHERE'] = 'LOWER(username)=LOWER(\''.$forum_db->escape($form_username).'\')';	($hook = get_hook('li_login_qr_get_login_data')) ? eval($hook) : null;	$result = $forum_db->query_build($query) or error(__FILE__, __LINE__);	list($user_id, $group_id, $db_password_hash, $salt) = $forum_db->fetch_row($result);	$authorized = false;	if (!empty($db_password_hash))	{		$sha1_in_db = (strlen($db_password_hash) == 40) ? true : false;		$form_password_hash = forum_hash($form_password, $salt);		if ($sha1_in_db && $db_password_hash == $form_password_hash)			$authorized = true;		else if ((!$sha1_in_db && $db_password_hash == md5($form_password)) || ($sha1_in_db && $db_password_hash == sha1($form_password)))		{			$authorized = true;			$salt = random_key(12);			$form_password_hash = forum_hash($form_password, $salt);			// There's an old MD5 hash or an unsalted SHA1 hash in the database, so we replace it			// with a randomly generated salt and a new, salted SHA1 hash			$query = array(				'UPDATE'	=> 'users',				'SET'		=> 'password=\''.$form_password_hash.'\', salt=\''.$forum_db->escape($salt).'\'',				'WHERE'		=> 'id='.$user_id			);			($hook = get_hook('li_login_qr_update_user_hash')) ? eval($hook) : null;			$forum_db->query_build($query) or error(__FILE__, __LINE__);		}	}	($hook = get_hook('li_login_pre_auth_message')) ? eval($hook) : null;	if (!$authorized)		$errors[] = sprintf($lang_login['Wrong user/pass']);	// Did everything go according to plan?	if (empty($errors))	{		// Update the status if this is the first time the user logged in		if ($group_id == FORUM_UNVERIFIED)		{			$query = array(				'UPDATE'	=> 'users',				'SET'		=> 'group_id='.$forum_config['o_default_user_group'],				'WHERE'		=> 'id='.$user_id			);			($hook = get_hook('li_login_qr_update_user_group')) ? eval($hook) : null;			$forum_db->query_build($query) or error(__FILE__, __LINE__);		}		// Remove this user's guest entry from the online list		$query = array(			'DELETE'	=> 'online',			'WHERE'		=> 'ident=\''.$forum_db->escape(get_remote_address()).'\''		);		($hook = get_hook('li_login_qr_delete_online_user')) ? eval($hook) : null;		$forum_db->query_build($query) or error(__FILE__, __LINE__);		$expire = ($save_pass) ? time() + 1209600 : time() + $forum_config['o_timeout_visit'];		forum_setcookie($cookie_name, base64_encode($user_id.'|'.$form_password_hash.'|'.$expire.'|'.sha1($salt.$form_password_hash.forum_hash($expire, $salt))), $expire);		($hook = get_hook('li_login_pre_redirect')) ? eval($hook) : null;		redirect(forum_htmlencode($_POST['redirect_url']).((substr_count($_POST['redirect_url'], '?') == 1) ? '&amp;' : '?').'login=1', $lang_login['Login redirect']);	}}// Logoutelse if ($action == 'out'){	if ($forum_user['is_guest'] || !isset($_GET['id']) || $_GET['id'] != $forum_user['id'])	{		header('Location: '.forum_link($forum_url['index']));		exit;	}	// We validate the CSRF token. If it's set in POST and we're at this point, the token is valid.	// If it's in GET, we need to make sure it's valid.	if (!isset($_POST['csrf_token']) && (!isset($_GET['csrf_token']) || $_GET['csrf_token'] !== generate_form_token('logout'.$forum_user['id'])))		csrf_confirm_form();	($hook = get_hook('li_logout_selected')) ? eval($hook) : null;	// Remove user from "users online" list.	$query = array(		'DELETE'	=> 'online',		'WHERE'		=> 'user_id='.$forum_user['id']	);	($hook = get_hook('li_logout_qr_delete_online_user')) ? eval($hook) : null;	$forum_db->query_build($query) or error(__FILE__, __LINE__);	// Update last_visit (make sure there's something to update it with)	if (isset($forum_user['logged']))	{		$query = array(			'UPDATE'	=> 'users',			'SET'		=> 'last_visit='.$forum_user['logged'],			'WHERE'		=> 'id='.$forum_user['id']		);		($hook = get_hook('li_logout_qr_update_last_visit')) ? eval($hook) : null;		$forum_db->query_build($query) or error(__FILE__, __LINE__);	}	$expire = time() + 1209600;	forum_setcookie($cookie_name, base64_encode('1|'.random_key(8, false, true).'|'.$expire.'|'.random_key(8, false, true)), $expire);	// Reset tracked topics	set_tracked_topics(null);	($hook = get_hook('li_logout_pre_redirect')) ? eval($hook) : null;	redirect(forum_link($forum_url['index']), $lang_login['Logout redirect']);}// New passwordelse if ($action == 'forget' || $action == 'forget_2'){	if (!$forum_user['is_guest'])		header('Location: '.forum_link($forum_url['index']));	($hook = get_hook('li_forgot_pass_selected')) ? eval($hook) : null;	if (isset($_POST['form_sent']))	{		// User pressed the cancel button		if (isset($_POST['cancel']))			redirect(forum_link($forum_url['index']), $lang_login['New password cancel redirect']);		if (!defined('FORUM_EMAIL_FUNCTIONS_LOADED'))			require FORUM_ROOT.'include/email.php';		// Validate the email-address		$email = strtolower(forum_trim($_POST['req_email']));		if (!is_valid_email($email))			$errors[] = $lang_login['Invalid e-mail'];		($hook = get_hook('li_forgot_pass_end_validation')) ? eval($hook) : null;		// Did everything go according to plan?		if (empty($errors))		{			$users_with_email = array();			// Fetch user matching $email			$query = array(				'SELECT'	=> 'u.id, u.username, u.salt, u.last_email_sent',				'FROM'		=> 'users AS u',				'WHERE'		=> 'u.email=\''.$forum_db->escape($email).'\''			);			($hook = get_hook('li_forgot_pass_qr_get_user_data')) ? eval($hook) : null;			$result = $forum_db->query_build($query) or error(__FILE__, __LINE__);			while ($cur_user = $forum_db->fetch_assoc($result))			{				$users_with_email[] = $cur_user;			}			if (!empty($users_with_email))			{				($hook = get_hook('li_forgot_pass_pre_email')) ? eval($hook) : null;				// Load the "activate password" template				$mail_tpl = forum_trim(file_get_contents(FORUM_ROOT.'lang/'.$forum_user['language'].'/mail_templates/activate_password.tpl'));				// The first row contains the subject				$first_crlf = strpos($mail_tpl, "\n");				$mail_subject = forum_trim(substr($mail_tpl, 8, $first_crlf-8));				$mail_message = forum_trim(substr($mail_tpl, $first_crlf));				// Do the generic replacements first (they apply to all e-mails sent out here)				$mail_message = str_replace('<base_url>', $base_url.'/', $mail_message);				$mail_message = str_replace('<board_mailer>', sprintf($lang_common['Forum mailer'], $forum_config['o_board_title']), $mail_message);				($hook = get_hook('li_forgot_pass_new_general_replace_data')) ? eval($hook) : null;				// Loop through users we found				foreach ($users_with_email as $cur_hit)				{					$forgot_pass_timeout = 3600;					($hook = get_hook('li_forgot_pass_pre_flood_check')) ? eval($hook) : null;					if ($cur_hit['last_email_sent'] != '' && (time() - $cur_hit['last_email_sent']) < $forgot_pass_timeout && (time() - $cur_hit['last_email_sent']) >= 0)						message(sprintf($lang_login['Email flood'], $forgot_pass_timeout));					// Generate a new password activation key					$new_password_key = random_key(8, true);					$query = array(						'UPDATE'	=> 'users',						'SET'		=> 'activate_key=\''.$new_password_key.'\', last_email_sent = '.time(),						'WHERE'		=> 'id='.$cur_hit['id']					);					($hook = get_hook('li_forgot_pass_qr_set_activate_key')) ? eval($hook) : null;					$forum_db->query_build($query) or error(__FILE__, __LINE__);					// Do the user specific replacements to the template					$cur_mail_message = str_replace('<username>', $cur_hit['username'], $mail_message);					$cur_mail_message = str_replace('<activation_url>', str_replace('&amp;', '&', forum_link($forum_url['change_password_key'], array($cur_hit['id'], $new_password_key))), $cur_mail_message);					($hook = get_hook('li_forgot_pass_new_user_replace_data')) ? eval($hook) : null;					forum_mail($email, $mail_subject, $cur_mail_message);				}				message(sprintf($lang_login['Forget mail'], '<a href="mailto:'.forum_htmlencode($forum_config['o_admin_email']).'">'.forum_htmlencode($forum_config['o_admin_email']).'</a>'));			}			else				$errors[] = sprintf($lang_login['No e-mail match'], forum_htmlencode($email));		}	}	// Setup form	$forum_page['group_count'] = $forum_page['item_count'] = $forum_page['fld_count'] = 0;	$forum_page['form_action'] = forum_link($forum_url['request_password']);	// Setup breadcrumbs	$forum_page['crumbs'] = array(		array($forum_config['o_board_title'], forum_link($forum_url['index'])),		array($lang_login['New password request'], forum_link($forum_url['request_password']))	);	($hook = get_hook('li_forgot_pass_pre_header_load')) ? eval($hook) : null;	define ('FORUM_PAGE', 'reqpass');	require FORUM_ROOT.'header.php';	// START SUBST - <!-- forum_main -->	ob_start();	($hook = get_hook('li_forgot_pass_output_start')) ? eval($hook) : null;?>	<div class="main-head">		<h2 class="hn"><span><?php echo $lang_login['New password request'] ?></span></h2>	</div>	<div class="main-content main-frm">		<div class="ct-box info-box">			<p class="important"><?php echo $lang_login['New password info'] ?></p>		</div><?php	// If there were any errors, show them	if (!empty($errors))	{		$forum_page['errors'] = array();		foreach ($errors as $cur_error)			$forum_page['errors'][] = '<li class="warn"><span>'.$cur_error.'</span></li>';		($hook = get_hook('li_forgot_pass_pre_new_password_errors')) ? eval($hook) : null;?>		<div class="ct-box error-box">			<h2 class="warn hn"><?php echo $lang_login['New password errors'] ?></h2>			<ul class="error-list">				<?php echo implode("\n\t\t\t\t", $forum_page['errors'])."\n" ?>			</ul>		</div><?php	}?>		<div id="req-msg" class="req-warn ct-box error-box">			<p class="important"><?php printf($lang_common['Required warn'], '<em>'.$lang_common['Required'].'</em>') ?></p>		</div>		<form id="afocus" class="frm-form" method="post" accept-charset="utf-8" action="<?php echo $forum_page['form_action'] ?>">			<div class="hidden">				<input type="hidden" name="form_sent" value="1" />				<input type="hidden" name="csrf_token" value="<?php echo generate_form_token($forum_page['form_action']) ?>" />			</div><?php ($hook = get_hook('li_forgot_pass_pre_group')) ? eval($hook) : null; ?>			<div class="frm-group group<?php echo ++$forum_page['group_count'] ?>"><?php ($hook = get_hook('li_forgot_pass_pre_email')) ? eval($hook) : null; ?>				<div class="sf-set set<?php echo ++$forum_page['item_count'] ?>">					<div class="sf-box text required">						<label for="fld<?php echo ++$forum_page['fld_count'] ?>"><span><?php echo $lang_login['E-mail address'] ?></span> <small><?php echo $lang_login['E-mail address help'] ?></small></label><br />						<span class="fld-input"><input id="fld<?php echo $forum_page['fld_count'] ?>" type="email" name="req_email" value="<?php echo isset($_POST['req_email']) ? forum_htmlencode($_POST['req_email']) : '' ?>" size="35" maxlength="80" required /></span>					</div>				</div><?php ($hook = get_hook('li_forgot_pass_pre_group_end')) ? eval($hook) : null; ?>			</div><?php ($hook = get_hook('li_forgot_pass_group_end')) ? eval($hook) : null; ?>			<div class="frm-buttons">				<span class="submit primary"><input type="submit" name="request_pass" value="<?php echo $lang_login['Submit password request'] ?>" /></span>				<span class="cancel"><input type="submit" name="cancel" value="<?php echo $lang_common['Cancel'] ?>" formnovalidate /></span>			</div>		</form>	</div><?php	($hook = get_hook('li_forgot_pass_end')) ? eval($hook) : null;	$tpl_temp = forum_trim(ob_get_contents());	$tpl_main = str_replace('<!-- forum_main -->', $tpl_temp, $tpl_main);	ob_end_clean();	// END SUBST - <!-- forum_main -->	require FORUM_ROOT.'footer.php';}if (!$forum_user['is_guest'])	header('Location: '.forum_link($forum_url['index']));// Setup form$forum_page['group_count'] = $forum_page['item_count'] = $forum_page['fld_count'] = 0;$forum_page['form_action'] = forum_link($forum_url['login']);$forum_page['hidden_fields'] = array(	'form_sent'		=> '<input type="hidden" name="form_sent" value="1" />',	'redirect_url'	=> '<input type="hidden" name="redirect_url" value="'.forum_htmlencode($forum_user['prev_url']).'" />',	'csrf_token'	=> '<input type="hidden" name="csrf_token" value="'.generate_form_token($forum_page['form_action']).'" />');// Setup breadcrumbs$forum_page['crumbs'] = array(	array($forum_config['o_board_title'], forum_link($forum_url['index'])),	array(sprintf($lang_login['Login info'], $forum_config['o_board_title']), forum_link($forum_url['login'])));($hook = get_hook('li_login_pre_header_load')) ? eval($hook) : null;define('FORUM_PAGE', 'login');require FORUM_ROOT.'header.php';// START SUBST - <!-- forum_main -->ob_start();($hook = get_hook('li_login_output_start')) ? eval($hook) : null;?>	<div class="main-head">		<h2 class="hn"><span><?php echo sprintf($lang_login['Login info'], $forum_config['o_board_title']) ?></span></h2>	</div>	<div class="main-content main-frm">		<div class="content-head">			<p class="hn"><?php printf($lang_login['Login options'], '<a href="'.forum_link($forum_url['register']).'">'.$lang_login['register'].'</a>', '<a href="'.forum_link($forum_url['request_password']).'">'.$lang_login['Obtain pass'].'</a>') ?></p>		</div><?php	// If there were any errors, show them	if (!empty($errors))	{		$forum_page['errors'] = array();	foreach ($errors as $cur_error)			$forum_page['errors'][] = '<li class="warn"><span>'.$cur_error.'</span></li>';		($hook = get_hook('li_pre_login_errors')) ? eval($hook) : null;?>		<div class="ct-box error-box">			<h2 class="warn hn"><?php echo $lang_login['Login errors'] ?></h2>			<ul class="error-list">				<?php echo implode("\n\t\t\t\t", $forum_page['errors'])."\n" ?>			</ul>		</div><?php	}?>		<div id="req-msg" class="req-warn ct-box error-box">			<p class="important"><?php printf($lang_common['Required warn'], '<em>'.$lang_common['Required'].'</em>') ?></p>		</div>		<form id="afocus" class="frm-form" method="post" accept-charset="utf-8" action="<?php echo $forum_page['form_action'] ?>">			<div class="hidden">				<?php echo implode("\n\t\t\t\t", $forum_page['hidden_fields'])."\n" ?>			</div><?php ($hook = get_hook('li_login_pre_login_group')) ? eval($hook) : null; ?>			<div class="frm-group group<?php echo ++$forum_page['group_count'] ?>"><?php ($hook = get_hook('li_login_pre_username')) ? eval($hook) : null; ?>				<div class="sf-set set<?php echo ++$forum_page['item_count'] ?>">					<div class="sf-box text required">						<label for="fld<?php echo ++$forum_page['fld_count'] ?>"><span><?php echo $lang_login['Username'] ?></span></label><br />						<span class="fld-input"><input type="text" id="fld<?php echo $forum_page['fld_count'] ?>" name="req_username" value="<?php echo isset($_POST['req_username']) ? forum_htmlencode($_POST['req_username']) : '' ?>" size="35" maxlength="25" required /></span>					</div>				</div><?php ($hook = get_hook('li_login_pre_pass')) ? eval($hook) : null; ?>				<div class="sf-set set<?php echo ++$forum_page['item_count'] ?>">					<div class="sf-box text required">						<label for="fld<?php echo ++$forum_page['fld_count'] ?>"><span><?php echo $lang_login['Password'] ?></span></label><br />						<span class="fld-input"><input type="password" id="fld<?php echo $forum_page['fld_count'] ?>" name="req_password" value="<?php echo isset($_POST['req_password']) ? forum_htmlencode($_POST['req_password']) : '' ?>" size="35" required /></span>					</div>				</div><?php ($hook = get_hook('li_login_pre_remember_me_checkbox')) ? eval($hook) : null; ?>				<div class="sf-set set<?php echo ++$forum_page['item_count'] ?>">					<div class="sf-box checkbox">						<span class="fld-input"><input type="checkbox" id="fld<?php echo ++$forum_page['fld_count'] ?>" name="save_pass" value="1" <?php echo isset($_POST['save_pass']) ? 'checked="checked" ' : '' ?>/></span>						<label for="fld<?php echo $forum_page['fld_count'] ?>"><?php echo $lang_login['Remember me'] ?></label>					</div>				</div><?php ($hook = get_hook('li_login_pre_group_end')) ? eval($hook) : null; ?>			</div><?php ($hook = get_hook('li_login_group_end')) ? eval($hook) : null; ?>			<div class="frm-buttons">				<span class="submit primary"><input type="submit" name="login" value="<?php echo $lang_login['Login'] ?>" /></span>			</div>		</form>	</div><?php($hook = get_hook('li_end')) ? eval($hook) : null;$tpl_temp = forum_trim(ob_get_contents());$tpl_main = str_replace('<!-- forum_main -->', $tpl_temp, $tpl_main);ob_end_clean();// END SUBST - <!-- forum_main -->require FORUM_ROOT.'footer.php';
<?php/** * Loads various functions that are used for searching the forum. * * @copyright (C) 2008-2011 PunBB, partially based on code (C) 2008-2009 FluxBB.org * @license http://www.gnu.org/licenses/gpl.html GPL version 2 or higher * @package PunBB */if (!defined('FORUM_SEARCH_MIN_WORD'))	define('FORUM_SEARCH_MIN_WORD', 3);if (!defined('FORUM_SEARCH_MAX_WORD'))	define('FORUM_SEARCH_MAX_WORD', 20);//// Cache the results of a search and redirect the user to the results page//function create_search_cache($keywords, $author, $search_in = false, $forum = array(-1), $show_as = 'topics', $sort_by = null, $sort_dir = 'DESC'){	global $forum_db, $forum_user, $forum_config, $forum_url, $lang_search, $lang_common, $db_type;	$return = ($hook = get_hook('sf_fn_create_search_cache_start')) ? eval($hook) : null;	if ($return != null)		return;	if (utf8_strlen(str_replace(array('*', '%'), '', $author)) < 2)		$author = '';	if (utf8_strlen(str_replace(array('*', '%'), '', $keywords)) < FORUM_SEARCH_MIN_WORD)		$keywords = '';	if (!$keywords && !$author)		message($lang_search['No terms']);	$keywords = utf8_strtolower($keywords);	$author = utf8_strtolower($author);	// Flood protection	if ($forum_user['last_search'] && (time() - $forum_user['last_search']) < $forum_user['g_search_flood'] && (time() - $forum_user['last_search']) >= 0)		message(sprintf($lang_search['Search flood'], $forum_user['g_search_flood']));	if ($forum_user['is_guest'])	{		$query = array(			'UPDATE'	=> 'online',			'SET'		=> 'last_search='.time(),			'WHERE'		=> 'ident=\''.$forum_db->escape(get_remote_address()).'\''		);	}	else	{		$query = array(			'UPDATE'	=> 'users',			'SET'		=> 'last_search='.time(),			'WHERE'		=> 'id='.$forum_user['id'],		);	}	($hook = get_hook('sf_fn_create_search_cache_qr_update_last_search_time')) ? eval($hook) : null;	$forum_db->query_build($query) or error(__FILE__, __LINE__);	// We need to grab results, insert them into the cache and reload with a search id before showing them	$keyword_results = $author_results = array();	// If it's a search for keywords	if ($keywords)	{		// Remove any apostrophes which aren't part of words		$keywords = substr(preg_replace('((?<=\W)\'|\'(?=\W))', '', ' '.$keywords.' '), 1, -1);		// Remove symbols and multiple whitespace		$keywords = preg_replace('/[\^\$&\(\)<>`"\|,@_\?%~\+\[\]{}:=\/#\\\\;!\.\s]+/', ' ', $keywords);		// Fill an array with all the words		$keywords_array = array_unique(explode(' ', $keywords));		// Remove any words that are not indexed		$keywords_array = array_filter($keywords_array, 'validate_search_word');  		if (empty($keywords_array))			no_search_results();		$word_count = 0;		$match_type = 'and';		$result_list = array();		foreach ($keywords_array as $cur_word)		{			switch ($cur_word)			{				case 'and':				case 'or':				case 'not':					$match_type = $cur_word;					break;				default:				{					$query = array(						'SELECT'	=> 'm.post_id',						'FROM'		=> 'search_words AS w',						'JOINS'		=> array(							array(								'INNER JOIN'	=> 'search_matches AS m',								'ON'			=> 'm.word_id=w.id'							)						),						'WHERE'		=> 'w.word LIKE \''.$forum_db->escape(str_replace('*', '%', $cur_word)).'\''					);					// Search in what?					if ($search_in)						$query['WHERE'] .= ($search_in > 0 ? ' AND m.subject_match=0' : ' AND m.subject_match=1');					($hook = get_hook('sf_fn_create_search_cache_qr_get_keyword_hits')) ? eval($hook) : null;					$result = $forum_db->query_build($query) or error(__FILE__, __LINE__);					$row = array();					while (list($post_id) = $forum_db->fetch_row($result))					{						$row[$post_id] = 1;						if (!$word_count)							$result_list[$post_id] = 1;						else if ($match_type == 'or')							$result_list[$post_id] = 1;						else if ($match_type == 'not')							$result_list[$post_id] = 0;					}					if ($match_type == 'and' && $word_count)					{						foreach (array_keys($result_list) as $post_id)						{							if (!isset($row[$post_id]))								$result_list[$post_id] = 0;						}					}					++$word_count;					$forum_db->free_result($result);					break;				}			}		}		foreach ($result_list as $post_id => $matches)		{			if ($matches)				$keyword_results[] = $post_id;		}		unset($result_list);	}	// If it's a search for author name (and that author name isn't Guest)	if ($author && $author != 'guest' && $author != utf8_strtolower($lang_common['Guest']))	{		$query = array(			'SELECT'	=> 'u.id',			'FROM'		=> 'users AS u',			'WHERE'		=> 'u.username '.($db_type == 'pgsql' ? 'ILIKE' : 'LIKE').' \''.$forum_db->escape(str_replace('*', '%', $author)).'\''		);		($hook = get_hook('sf_fn_create_search_cache_qr_get_author')) ? eval($hook) : null;		$result = $forum_db->query_build($query) or error(__FILE__, __LINE__);		$user_ids = array();		while ($row = $forum_db->fetch_row($result))		{			$user_ids[] = $row[0];		}		if (!empty($user_ids))		{			$query = array(				'SELECT'	=> 'p.id',				'FROM'		=> 'posts AS p',				'WHERE'		=> 'p.poster_id IN('.implode(',', $user_ids).')'			);			($hook = get_hook('sf_fn_create_search_cache_qr_get_author_hits')) ? eval($hook) : null;			$result = $forum_db->query_build($query) or error(__FILE__, __LINE__);			$search_ids = array();			while ($row = $forum_db->fetch_row($result))				$author_results[] = $row[0];			$forum_db->free_result($result);		}	}	if ($author && $keywords)	{		// If we searched for both keywords and author name we want the intersection between the results		$search_ids = array_intersect($keyword_results, $author_results);		unset($keyword_results, $author_results);	}	else if ($keywords)		$search_ids = $keyword_results;	else		$search_ids = $author_results;	if (count($search_ids) == 0)		no_search_results();	// Setup the default show_as topics search	$query = array(		'SELECT'	=> 't.id',		'FROM'		=> 'posts AS p',		'JOINS'		=> array(			array(				'INNER JOIN'	=> 'topics AS t',				'ON'			=> 't.id=p.topic_id'			),			array(				'LEFT JOIN'		=> 'forum_perms AS fp',				'ON'			=> '(fp.forum_id=t.forum_id AND fp.group_id='.$forum_user['g_id'].')'			)		),		'WHERE'		=> '(fp.read_forum IS NULL OR fp.read_forum=1) AND p.id IN('.implode(',', $search_ids).')',		'GROUP BY'	=> 't.id'	);	// Search a specific forum?	if (!in_array(-1, $forum) || ($forum_config['o_search_all_forums'] == '0' && !$forum_user['is_admmod']))		$query['WHERE'] .= ' AND t.forum_id IN('.implode(',', $forum).')';	// Adjust the query if show_as posts	if ($show_as == 'posts')	{		$query['SELECT'] = 'p.id';		unset($query['GROUP BY']);	}	($hook = get_hook('sf_fn_create_search_cache_qr_get_hits')) ? eval($hook) : null;	$result = $forum_db->query_build($query) or error(__FILE__, __LINE__);	$search_ids = array();	while ($row = $forum_db->fetch_row($result))		$search_ids[] = $row[0];	// Prune "old" search results	$query = array(		'SELECT'	=> 'o.ident',		'FROM'		=> 'online AS o'	);	($hook = get_hook('sf_fn_create_search_cache_qr_get_online_idents')) ? eval($hook) : null;	$result = $forum_db->query_build($query) or error(__FILE__, __LINE__);	$online_idents = array();	while ($row = $forum_db->fetch_row($result))	{		$online_idents[] = '\''.$forum_db->escape($row[0]).'\'';	}	if (!empty($online_idents))	{		$query = array(			'DELETE'	=> 'search_cache',			'WHERE'		=> 'ident NOT IN('.implode(',', $online_idents).')'		);		($hook = get_hook('sf_fn_create_search_cache_qr_delete_old_cached_searches')) ? eval($hook) : null;		$forum_db->query_build($query) or error(__FILE__, __LINE__);	}	// Final search results	$search_results = implode(',', $search_ids);	// Fill an array with our results and search properties	$search_data = serialize(compact('search_results', 'sort_by', 'sort_dir', 'show_as'));	$search_id = mt_rand(1, 2147483647);	$ident = ($forum_user['is_guest']) ? get_remote_address() : $forum_user['username'];	$query = array(		'INSERT'	=> 'id, ident, search_data',		'INTO'		=> 'search_cache',		'VALUES'	=> $search_id.', \''.$forum_db->escape($ident).'\', \''.$forum_db->escape($search_data).'\''	);	($hook = get_hook('sf_fn_create_search_cache_qr_cache_search')) ? eval($hook) : null;	$forum_db->query_build($query) or error(__FILE__, __LINE__);	$return = ($hook = get_hook('sf_fn_create_search_cache_end')) ? eval($hook) : null;	if ($return != null)		return;	$forum_db->end_transaction();	$forum_db->close();	// Redirect the user to the cached result page	header('Location: '.str_replace('&amp;', '&', forum_link($forum_url['search_results'], $search_id)));	exit;}//// Generate query to grab the results for a cached search//function generate_cached_search_query($search_id, &$show_as){	global $forum_db, $db_type, $forum_user, $forum_config;	$return = ($hook = get_hook('sf_fn_generate_cached_search_query_start')) ? eval($hook) : null;	if ($return != null)		return $return;	$ident = ($forum_user['is_guest']) ? get_remote_address() : $forum_user['username'];	$query = array(		'SELECT'	=> 'sc.search_data',		'FROM'		=> 'search_cache AS sc',		'WHERE'		=> 'sc.id='.$search_id.' AND sc.ident=\''.$forum_db->escape($ident).'\''	);	($hook = get_hook('sf_fn_generate_cached_search_query_qr_get_cached_search_data')) ? eval($hook) : null;	$result = $forum_db->query_build($query) or error(__FILE__, __LINE__);	if ($row = $forum_db->fetch_assoc($result))	{		$search_data = unserialize($row['search_data']);		$search_results = $search_data['search_results'];		$sort_by = $search_data['sort_by'];		$sort_dir = $search_data['sort_dir'];		$show_as = $search_data['show_as'];		unset($search_data);	}	else		return false;	// If there are no posts, we don't need to execute the query	if (empty($search_results))		return false;	switch ($sort_by)	{		case 1:			$sort_by_sql = ($show_as == 'topics') ? 't.poster' : 'p.poster';			break;		case 2:			$sort_by_sql = 't.subject';			break;		case 3:			$sort_by_sql = 't.forum_id';			break;		default:			$sort_by_sql = ($show_as == 'topics') ? 't.posted' : 'p.posted';			($hook = get_hook('sf_fn_generate_cached_search_query_qr_cached_sort_by')) ? eval($hook) : null;			break;	}	if ($show_as == 'posts')	{		$query = array(			'SELECT'	=> 'p.id AS pid, p.poster AS pposter, p.posted AS pposted, p.poster_id, p.message, p.hide_smilies, t.id AS tid, t.poster, t.subject, t.first_post_id, t.posted, t.last_post, t.last_post_id, t.last_poster, t.num_replies, t.forum_id, f.forum_name',			'FROM'		=> 'posts AS p',			'JOINS'		=> array(				array(					'INNER JOIN'	=> 'topics AS t',					'ON'			=> 't.id=p.topic_id'				),				array(					'INNER JOIN'	=> 'forums AS f',					'ON'			=> 'f.id=t.forum_id'				)			),			'WHERE'		=> 'p.id IN('.$search_results.')',			'ORDER BY'	=> $sort_by_sql . ' ' . $sort_dir		);		($hook = get_hook('sf_fn_generate_cached_search_query_qr_get_cached_hits_as_posts')) ? eval($hook) : null;	}	else	{		$query = array(			'SELECT'	=> 't.id AS tid, t.poster, t.subject, t.first_post_id, t.posted, t.last_post, t.last_post_id, t.last_poster, t.num_replies, t.closed, t.sticky, t.forum_id, f.forum_name',			'FROM'		=> 'topics AS t',			'JOINS'		=> array(				array(					'INNER JOIN'	=> 'forums AS f',					'ON'			=> 'f.id=t.forum_id'				)			),			'WHERE'		=> 't.id IN('.$search_results.')',			'ORDER BY'	=> $sort_by_sql . ' ' . $sort_dir		);		// With "has posted" indication		if (!$forum_user['is_guest'] && $forum_config['o_show_dot'] == '1')		{			$query['SELECT'] .= ', COALESCE(p.id, 0) AS has_posted';			$query['JOINS'][]	= array(				'LEFT JOIN'		=> 'posts AS p',				'ON'			=> '(p.poster_id='.$forum_user['id'].' AND p.topic_id=t.id)'			);			// Must have same columns as in prev SELECT			$query['GROUP BY'] = 'p.id, t.id, t.poster, t.subject, t.first_post_id, t.posted, t.last_post, t.last_post_id, t.last_poster, t.num_replies, t.closed, t.sticky, t.forum_id, f.forum_name';			($hook = get_hook('sf_fn_generate_cached_search_query_qr_get_has_posted')) ? eval($hook) : null;		}		($hook = get_hook('sf_fn_generate_cached_search_query_qr_get_cached_hits_as_topics')) ? eval($hook) : null;	}	($hook = get_hook('sf_fn_generate_cached_search_query_end')) ? eval($hook) : null;	return $query;}//// Generate query to grab the results for an action search (i.e. quicksearch)//function generate_action_search_query($action, $value, &$search_id, &$url_type, &$show_as){	global $forum_db, $forum_user, $forum_config, $lang_common, $forum_url, $db_type;	$return = ($hook = get_hook('sf_fn_generate_action_search_query_start')) ? eval($hook) : null;	if ($return != null)		return $return;	switch ($action)	{		case 'show_new':			if ($forum_user['is_guest'])				message($lang_common['No permission']);			$query = array(				'SELECT'	=> 't.id AS tid, t.poster, t.subject, t.first_post_id, t.posted, t.last_post, t.last_post_id, t.last_poster, t.num_replies, t.closed, t.sticky, t.forum_id, f.forum_name',				'FROM'		=> 'topics AS t',				'JOINS'		=> array(					array(						'INNER JOIN'	=> 'forums AS f',						'ON'			=> 'f.id=t.forum_id'					),					array(						'LEFT JOIN'		=> 'forum_perms AS fp',						'ON'			=> '(fp.forum_id=f.id AND fp.group_id='.$forum_user['g_id'].')'					)				),				'WHERE'		=> '(fp.read_forum IS NULL OR fp.read_forum=1) AND t.last_post>'.$forum_user['last_visit'].' AND t.moved_to IS NULL',				'ORDER BY'	=> 't.last_post DESC'			);			if ($value != -1)				$query['WHERE'] .= ' AND f.id='.$value;			// With "has posted" indication			if (!$forum_user['is_guest'] && $forum_config['o_show_dot'] == '1')			{				$subquery = array(					'SELECT'	=> 'COUNT(p.id)',					'FROM'		=> 'posts AS p',					'WHERE'		=> 'p.poster_id='.$forum_user['id'].' AND p.topic_id=t.id'				);				($hook = get_hook('sf_fn_generate_action_search_query_qr_get_new_topics_has_posted')) ? eval($hook) : null;				$query['SELECT'] .= ', ('.$forum_db->query_build($subquery, true).') AS has_posted';			}			$url_type = $forum_url['search_new_results'];			$search_id = $value;			($hook = get_hook('sf_fn_generate_action_search_query_qr_get_new')) ? eval($hook) : null;			break;		case 'show_recent':			$query = array(				'SELECT'	=> 't.id AS tid, t.poster, t.subject, t.first_post_id, t.posted, t.last_post, t.last_post_id, t.last_poster, t.num_replies, t.closed, t.sticky, t.forum_id, f.forum_name',				'FROM'		=> 'topics AS t',				'JOINS'		=> array(					array(						'INNER JOIN'	=> 'forums AS f',						'ON'			=> 'f.id=t.forum_id'					),					array(						'LEFT JOIN'		=> 'forum_perms AS fp',						'ON'			=> '(fp.forum_id=f.id AND fp.group_id='.$forum_user['g_id'].')'					)				),				'WHERE'		=> '(fp.read_forum IS NULL OR fp.read_forum=1) AND t.last_post>'.(time() - $value).' AND t.moved_to IS NULL',				'ORDER BY'	=> 't.last_post DESC'			);			// With "has posted" indication			if (!$forum_user['is_guest'] && $forum_config['o_show_dot'] == '1')			{				$subquery = array(					'SELECT'	=> 'COUNT(p.id)',					'FROM'		=> 'posts AS p',					'WHERE'		=> 'p.poster_id='.$forum_user['id'].' AND p.topic_id=t.id'				);				($hook = get_hook('sf_fn_generate_action_search_query_qr_get_recent_topics_has_posted')) ? eval($hook) : null;				$query['SELECT'] .= ', ('.$forum_db->query_build($subquery, true).') AS has_posted';			}			$url_type = $forum_url['search_recent_results'];			$search_id = $value;			($hook = get_hook('sf_fn_generate_action_search_query_qr_get_recent')) ? eval($hook) : null;			break;		case 'show_user_posts':			$query = array(				'SELECT'	=> 'p.id AS pid, p.poster AS pposter, p.posted AS pposted, p.poster_id, p.message, p.hide_smilies, t.id AS tid, t.poster, t.subject, t.first_post_id, t.posted, t.last_post, t.last_post_id, t.last_poster, t.num_replies, t.forum_id, f.forum_name',				'FROM'		=> 'posts AS p',				'JOINS'		=> array(					array(						'INNER JOIN'	=> 'topics AS t',						'ON'			=> 't.id=p.topic_id'					),					array(						'INNER JOIN'	=> 'forums AS f',						'ON'			=> 'f.id=t.forum_id'					),					array(						'LEFT JOIN'		=> 'forum_perms AS fp',						'ON'			=> '(fp.forum_id=f.id AND fp.group_id='.$forum_user['g_id'].')'					)				),				'WHERE'		=> '(fp.read_forum IS NULL OR fp.read_forum=1) AND p.poster_id='.$value,				'ORDER BY'	=> 'pposted DESC'			);			$url_type = $forum_url['search_user_posts'];			$search_id = $value;			$show_as = 'posts';			($hook = get_hook('sf_fn_generate_action_search_query_qr_get_user_posts')) ? eval($hook) : null;			break;		case 'show_user_topics':			$query = array(				'SELECT'	=> 't.id AS tid, t.poster, t.subject, t.first_post_id, t.posted, t.last_post, t.last_post_id, t.last_poster, t.num_replies, t.closed, t.sticky, t.forum_id, f.forum_name',				'FROM'		=> 'topics AS t',				'JOINS'		=> array(					array(						'INNER JOIN'	=> 'posts AS p',						'ON'			=> 't.first_post_id=p.id'					),					array(						'INNER JOIN'	=> 'forums AS f',						'ON'			=> 'f.id=t.forum_id'					),					array(						'LEFT JOIN'		=> 'forum_perms AS fp',						'ON'			=> '(fp.forum_id=f.id AND fp.group_id='.$forum_user['g_id'].')'					)				),				'WHERE'		=> '(fp.read_forum IS NULL OR fp.read_forum=1) AND p.poster_id='.$value,				'ORDER BY'	=> 't.last_post DESC'			);			// With "has posted" indication			if (!$forum_user['is_guest'] && $forum_config['o_show_dot'] == '1')			{				$subquery = array(					'SELECT'	=> 'COUNT(p.id)',					'FROM'		=> 'posts AS p',					'WHERE'		=> 'p.poster_id='.$forum_user['id'].' AND p.topic_id=t.id'				);				($hook = get_hook('sf_fn_generate_action_search_query_qr_get_user_topics_has_posted')) ? eval($hook) : null;				$query['SELECT'] .= ', ('.$forum_db->query_build($subquery, true).') AS has_posted';			}			$url_type = $forum_url['search_user_topics'];			$search_id = $value;			($hook = get_hook('sf_fn_generate_action_search_query_qr_get_user_topics')) ? eval($hook) : null;			break;		case 'show_subscriptions':			if ($forum_user['is_guest'])				message($lang_common['Bad request']);			// Check we're allowed to see the subscriptions we're trying to look at			if ($forum_user['g_id'] != FORUM_ADMIN && $forum_user['id'] != $value)				message($lang_common['Bad request']);			$query = array(				'SELECT'	=> 't.id AS tid, t.poster, t.subject, t.first_post_id, t.posted, t.last_post, t.last_post_id, t.last_poster, t.num_replies, t.closed, t.sticky, t.forum_id, f.forum_name',				'FROM'		=> 'topics AS t',				'JOINS'		=> array(					array(						'INNER JOIN'	=> 'subscriptions AS s',						'ON'			=> '(t.id=s.topic_id AND s.user_id='.$value.')'					),					array(						'INNER JOIN'	=> 'forums AS f',						'ON'			=> 'f.id=t.forum_id'					),					array(						'LEFT JOIN'		=> 'forum_perms AS fp',						'ON'			=> '(fp.forum_id=f.id AND fp.group_id='.$forum_user['g_id'].')'					)				),				'WHERE'		=> '(fp.read_forum IS NULL OR fp.read_forum=1)',				'ORDER BY'	=> 't.last_post DESC'			);			// With "has posted" indication			if (!$forum_user['is_guest'] && $forum_config['o_show_dot'] == '1')			{				$subquery = array(					'SELECT'	=> 'COUNT(p.id)',					'FROM'		=> 'posts AS p',					'WHERE'		=> 'p.poster_id='.$forum_user['id'].' AND p.topic_id=t.id'				);				($hook = get_hook('sf_fn_generate_action_search_query_qr_get_subscriptions_has_posted')) ? eval($hook) : null;				$query['SELECT'] .= ', ('.$forum_db->query_build($subquery, true).') AS has_posted';			}			$url_type = $forum_url['search_subscriptions'];			$search_id = $value;			($hook = get_hook('sf_fn_generate_action_search_query_qr_get_subscriptions')) ? eval($hook) : null;			break;		case 'show_unanswered':			$query = array(				'SELECT'	=> 't.id AS tid, t.poster, t.subject, t.first_post_id, t.posted, t.last_post, t.last_post_id, t.last_poster, t.num_replies, t.closed, t.sticky, t.forum_id, f.forum_name',				'FROM'		=> 'topics AS t',				'JOINS'		=> array(					array(						'INNER JOIN'	=> 'forums AS f',						'ON'			=> 'f.id=t.forum_id'					),					array(						'LEFT JOIN'		=> 'forum_perms AS fp',						'ON'			=> '(fp.forum_id=f.id AND fp.group_id='.$forum_user['g_id'].')'					)				),				'WHERE'		=> '(fp.read_forum IS NULL OR fp.read_forum=1) AND t.num_replies=0 AND t.moved_to IS NULL',				'ORDER BY'	=> 't.last_post DESC'			);			// With "has posted" indication			if (!$forum_user['is_guest'] && $forum_config['o_show_dot'] == '1')			{				$subquery = array(					'SELECT'	=> 'COUNT(p.id)',					'FROM'		=> 'posts AS p',					'WHERE'		=> 'p.poster_id='.$forum_user['id'].' AND p.topic_id=t.id'				);				($hook = get_hook('sf_fn_generate_action_search_query_qr_get_unanswered_topics_has_posted')) ? eval($hook) : null;				$query['SELECT'] .= ', ('.$forum_db->query_build($subquery, true).') AS has_posted';			}			$url_type = $forum_url['search_unanswered'];			($hook = get_hook('sf_fn_generate_action_search_query_qr_get_unanswered')) ? eval($hook) : null;			break;	}	($hook = get_hook('sf_fn_generate_action_search_query_end')) ? eval($hook) : null;	return $query;}//// Get search results for a specified query, returns number of results//function get_search_results($query, &$search_set){	global $forum_db, $forum_user, $forum_page, $lang_common;	$return = ($hook = get_hook('sf_fn_get_search_results_start')) ? eval($hook) : null;	if ($return != null)		return $return;	$result = $forum_db->query_build($query) or error(__FILE__, __LINE__);	$search_results = array();	while ($row = $forum_db->fetch_assoc($result))	{		$search_results[] = $row;	}	// Make sure we actually have some results	$num_hits = count($search_results);	if ($num_hits == 0)		return 0;	// Work out the settings for pagination	$forum_page['num_pages'] = ceil($num_hits / $forum_page['per_page']);	$forum_page['page'] = (!isset($_GET['p']) || !is_numeric($_GET['p']) || $_GET['p'] <= 1 || $_GET['p'] > $forum_page['num_pages']) ? 1 : $_GET['p'];	// Determine the topic or post offset (based on $forum_page['page'])	$forum_page['start_from'] = $forum_page['per_page'] * ($forum_page['page'] - 1);	$forum_page['finish_at'] = min(($forum_page['start_from'] + $forum_page['per_page']), $num_hits);	// Fill $search_set with out search hits	$search_set = array();	$row_num = 0;	foreach ($search_results as $row)	{		if ($forum_page['start_from'] <= $row_num && $forum_page['finish_at'] > $row_num)			$search_set[] = $row;		++$row_num;	}	$forum_db->free_result($result);	$return = ($hook = get_hook('sf_fn_get_search_results_end')) ? eval($hook) : null;	if ($return != null)		return $return;	return $num_hits;}//// Output a message if there are no results//function no_search_results($action = 'search'){	global $forum_page, $lang_search, $forum_url;	$forum_page['search_again'] = '<a href="'.forum_link($forum_url['search']).'">'.$lang_search['Perform new search'].'</a>';	$return = ($hook = get_hook('sf_fn_no_search_results_start')) ? eval($hook) : null;	if ($return != null)		return;	switch ($action)	{		case 'show_new':			message($lang_search['No new posts'], $forum_page['search_again'], $lang_search['Topics with new']);			break;		case 'show_recent':			message($lang_search['No recent posts'], $forum_page['search_again'], $lang_search['Recently active topics']);			break;		case 'show_user_posts':			message($lang_search['No user posts'], $forum_page['search_again'], $lang_search['Posts by user']);			break;		case 'show_user_topics':			message($lang_search['No user topics'], $forum_page['search_again'], $lang_search['Topics by user']);			break;		case 'show_subscriptions':			message($lang_search['No subscriptions'], $forum_page['search_again'], $lang_search['Subscriptions']);			break;		case 'show_unanswered':			message($lang_search['No unanswered'], $forum_page['search_again'], $lang_search['Unanswered topics']);			break;		default:			message($lang_search['No hits'], $forum_page['search_again'], $lang_search['Search results']);			break;	}}//// Generate search breadcrumbs//function generate_search_crumbs($action = null){	global $forum_page, $lang_common, $lang_search, $forum_url, $forum_user, $num_hits, $search_set, $search_id, $show_as;	$return = ($hook = get_hook('sf_fn_generate_search_crumbs_start')) ? eval($hook) : null;	if ($return != null)		return;	switch ($action)	{		case 'show_new':			$forum_page['crumbs'][] = $lang_search['Topics with new'];			$forum_page['items_info'] = generate_items_info($lang_search['Topics found'], ($forum_page['start_from'] + 1), $num_hits);			$forum_page['main_head_options']['defined_search'] = '<span'.(empty($forum_page['main_head_options']) ? ' class="first-item"' : '').'><a href="'.forum_link($forum_url['search']).'">'.$lang_search['User defined search'].'</a></span>';			$forum_page['main_foot_options']['mark_all'] = '<span'.(empty($forum_page['main_foot_options']) ? ' class="first-item"' : '').'><a href="'.forum_link($forum_url['mark_read'], generate_form_token('markread'.$forum_user['id'])).'">'.$lang_common['Mark all as read'].'</a></span>';			// Add link for show all topics, not only new (updated)			$forum_page['main_head_options']['show_all'] = '<span'.(empty($forum_page['main_head_options']) ? ' class="first-item"' : '').'><a href="'.forum_link($forum_url['forum'], $search_set[0]['forum_id']).'">'.$lang_search['All Topics'].'</a></span>';			break;		case 'show_recent':			$forum_page['crumbs'][] = $lang_search['Recently active topics'];			$forum_page['items_info'] = generate_items_info($lang_search['Topics found'], ($forum_page['start_from'] + 1), $num_hits);			$forum_page['main_head_options']['defined_search'] = '<span'.(empty($forum_page['main_head_options']) ? ' class="first-item"' : '').'><a href="'.forum_link($forum_url['search']).'">'.$lang_search['User defined search'].'</a></span>';			break;		case 'show_unanswered':			$forum_page['crumbs'][] = $lang_search['Unanswered topics'];			$forum_page['items_info'] = generate_items_info($lang_search['Topics found'], ($forum_page['start_from'] + 1), $num_hits);			$forum_page['main_head_options']['defined_search'] = '<span'.(empty($forum_page['main_head_options']) ? ' class="first-item"' : '').'><a href="'.forum_link($forum_url['search']).'">'.$lang_search['User defined search'].'</a></span>';			break;		case 'show_user_posts':			$forum_page['crumbs'][] = sprintf($lang_search['Posts by'], $search_set[0]['pposter'], ($forum_page['start_from'] + 1), $num_hits);			$forum_page['items_info'] = generate_items_info($lang_search['Posts found'], ($forum_page['start_from'] + 1), $num_hits);			$forum_page['main_head_options']['user_topics'] = '<span'.(empty($forum_page['main_head_options']) ? ' class="first-item"' : '').'><a href="'.forum_link($forum_url['search_user_topics'], $search_id).'">'.sprintf($lang_search['Topics by'], forum_htmlencode($search_set[0]['pposter'])).'</a></span>';			$forum_page['main_head_options']['defined_search'] = '<span'.(empty($forum_page['main_head_options']) ? ' class="first-item"' : '').'><a href="'.forum_link($forum_url['search']).'">'.$lang_search['User defined search'].'</a></span>';			break;		case 'show_user_topics':			$forum_page['crumbs'][] = sprintf($lang_search['Topics by'], $search_set[0]['poster']);			$forum_page['items_info'] = generate_items_info($lang_search['Topics found'], ($forum_page['start_from'] + 1), $num_hits);			$forum_page['main_head_options']['user_posts'] =  '<span'.(empty($forum_page['main_head_options']) ? ' class="first-item"' : '').'><a href="'.forum_link($forum_url['search_user_posts'], $search_id).'">'.sprintf($lang_search['Posts by'], forum_htmlencode($search_set[0]['poster'])).'</a></span>';			$forum_page['main_head_options']['defined_search'] = '<span'.(empty($forum_page['main_head_options']) ? ' class="first-item"' : '').'><a href="'.forum_link($forum_url['search']).'">'.$lang_search['User defined search'].'</a></span>';			break;		case 'show_subscriptions':			$forum_page['crumbs'][] = $lang_search['Subscriptions'];			$forum_page['items_info'] = generate_items_info($lang_search['Topics found'], ($forum_page['start_from'] + 1), $num_hits);			$forum_page['main_head_options']['defined_search'] = '<span'.(empty($forum_page['main_head_options']) ? ' class="first-item"' : '').'><a href="'.forum_link($forum_url['search']).'">'.$lang_search['User defined search'].'</a></span>';			break;		default:			$forum_page['crumbs'][] = $lang_search['Search results'];			$forum_page['items_info'] = generate_items_info((($show_as == 'topics') ? $lang_search['Topics found'] : $lang_search['Posts found']), ($forum_page['start_from'] + 1), $num_hits);			$forum_page['main_head_options']['new_search'] = '<span'.(empty($forum_page['main_head_options']) ? ' class="first-item"' : '').'><a href="'.forum_link($forum_url['search']).'">'.$lang_search['Perform new search'].'</a></span>';			break;	}}//// Checks to see if an action is valid//function validate_search_action($action){	// A list of valid actions (extensions can add their own actions to the array)	$valid_actions = array('search', 'show_new', 'show_recent', 'show_user_posts', 'show_user_topics', 'show_subscriptions', 'show_unanswered');	$return = ($hook = get_hook('sf_fn_validate_actions_start')) ? eval($hook) : null;	if ($return != null)		return $return;	return in_array($action, $valid_actions);}
<?php/** * Provides various features for forum users (ie: display rules, send emails through the forum, mark a forum as read, etc). * * @copyright (C) 2008-2011 PunBB, partially based on code (C) 2008-2009 FluxBB.org * @license http://www.gnu.org/licenses/gpl.html GPL version 2 or higher * @package PunBB */if (isset($_GET['action']))	define('FORUM_QUIET_VISIT', 1);if (!defined('FORUM_ROOT'))	define('FORUM_ROOT', './');require FORUM_ROOT.'include/common.php';($hook = get_hook('mi_start')) ? eval($hook) : null;// Load the misc.php language filerequire FORUM_ROOT.'lang/'.$forum_user['language'].'/misc.php';$action = isset($_GET['action']) ? $_GET['action'] : null;$errors = array();// Show the forum rules?if ($action == 'rules'){	if ($forum_config['o_rules'] == '0' || ($forum_user['is_guest'] && $forum_user['g_read_board'] == '0' && $forum_config['o_regs_allow'] == '0'))		message($lang_common['Bad request']);	// Setup breadcrumbs	$forum_page['crumbs'] = array(		array($forum_config['o_board_title'], forum_link($forum_url['index'])),		array($lang_common['Rules'], forum_link($forum_url['rules']))	);	($hook = get_hook('mi_rules_pre_header_load')) ? eval($hook) : null;	define('FORUM_PAGE', 'rules');	require FORUM_ROOT.'header.php';	// START SUBST - <!-- forum_main -->	ob_start();	($hook = get_hook('mi_rules_output_start')) ? eval($hook) : null;?>	<div class="main-head">		<h2 class="hn"><span><?php echo $lang_common['Rules'] ?></span></h2>	</div>	<div class="main-content main-frm">		<div class="ct-box user-box">			<?php echo $forum_config['o_rules_message']."\n" ?>		</div>	</div><?php	($hook = get_hook('mi_rules_end')) ? eval($hook) : null;	$tpl_temp = forum_trim(ob_get_contents());	$tpl_main = str_replace('<!-- forum_main -->', $tpl_temp, $tpl_main);	ob_end_clean();	// END SUBST - <!-- forum_main -->	require FORUM_ROOT.'footer.php';}// Mark all topics/posts as read?else if ($action == 'markread'){	if ($forum_user['is_guest'])		message($lang_common['No permission']);	// We validate the CSRF token. If it's set in POST and we're at this point, the token is valid.	// If it's in GET, we need to make sure it's valid.	if (!isset($_POST['csrf_token']) && (!isset($_GET['csrf_token']) || $_GET['csrf_token'] !== generate_form_token('markread'.$forum_user['id'])))		csrf_confirm_form();	($hook = get_hook('mi_markread_selected')) ? eval($hook) : null;	$query = array(		'UPDATE'	=> 'users',		'SET'		=> 'last_visit='.$forum_user['logged'],		'WHERE'		=> 'id='.$forum_user['id']	);	($hook = get_hook('mi_markread_qr_update_last_visit')) ? eval($hook) : null;	$forum_db->query_build($query) or error(__FILE__, __LINE__);	// Reset tracked topics	set_tracked_topics(null);	$forum_flash->add_info($lang_misc['Mark read redirect']);	($hook = get_hook('mi_markread_pre_redirect')) ? eval($hook) : null;	redirect(forum_link($forum_url['index']), $lang_misc['Mark read redirect']);}// Mark the topics/posts in a forum as read?else if ($action == 'markforumread'){	if ($forum_user['is_guest'])		message($lang_common['No permission']);	$fid = isset($_GET['fid']) ? intval($_GET['fid']) : 0;	if ($fid < 1)		message($lang_common['Bad request']);	// We validate the CSRF token. If it's set in POST and we're at this point, the token is valid.	// If it's in GET, we need to make sure it's valid.	if (!isset($_POST['csrf_token']) && (!isset($_GET['csrf_token']) || $_GET['csrf_token'] !== generate_form_token('markforumread'.$fid.$forum_user['id'])))		csrf_confirm_form();	($hook = get_hook('mi_markforumread_selected')) ? eval($hook) : null;	// Fetch some info about the forum	$query = array(		'SELECT'	=> 'f.forum_name',		'FROM'		=> 'forums AS f',		'JOINS'		=> array(			array(				'LEFT JOIN'		=> 'forum_perms AS fp',				'ON'			=> '(fp.forum_id=f.id AND fp.group_id='.$forum_user['g_id'].')'			)		),		'WHERE'		=> '(fp.read_forum IS NULL OR fp.read_forum=1) AND f.id='.$fid	);	($hook = get_hook('mi_markforumread_qr_get_forum_info')) ? eval($hook) : null;	$result = $forum_db->query_build($query) or error(__FILE__, __LINE__);	$forum_name = $forum_db->result($result);	if (!$forum_name)	{		message($lang_common['Bad request']);	}	$tracked_topics = get_tracked_topics();	$tracked_topics['forums'][$fid] = time();	set_tracked_topics($tracked_topics);	$forum_flash->add_info($lang_misc['Mark forum read redirect']);	($hook = get_hook('mi_markforumread_pre_redirect')) ? eval($hook) : null;	redirect(forum_link($forum_url['forum'], array($fid, sef_friendly($forum_name))), $lang_misc['Mark forum read redirect']);}// Send form e-mail?else if (isset($_GET['email'])){	if ($forum_user['is_guest'] || $forum_user['g_send_email'] == '0')		message($lang_common['No permission']);	$recipient_id = intval($_GET['email']);	if ($recipient_id < 2)		message($lang_common['Bad request']);	($hook = get_hook('mi_email_selected')) ? eval($hook) : null;	// User pressed the cancel button	if (isset($_POST['cancel']))		redirect(forum_htmlencode($_POST['redirect_url']), $lang_common['Cancel redirect']);	$query = array(		'SELECT'	=> 'u.username, u.email, u.email_setting',		'FROM'		=> 'users AS u',		'WHERE'		=> 'u.id='.$recipient_id	);	($hook = get_hook('mi_email_qr_get_form_email_data')) ? eval($hook) : null;	$result = $forum_db->query_build($query) or error(__FILE__, __LINE__);	$recipient_info = $forum_db->fetch_row($result);	if (!$recipient_info)	{		message($lang_common['Bad request']);	}	list($recipient, $recipient_email, $email_setting) = $recipient_info;	if ($email_setting == 2 && !$forum_user['is_admmod'])		message($lang_misc['Form e-mail disabled']);	if ($recipient_email == '')		message($lang_common['Bad request']);	if (isset($_POST['form_sent']))	{		($hook = get_hook('mi_email_form_submitted')) ? eval($hook) : null;		// Clean up message and subject from POST		$subject = forum_trim($_POST['req_subject']);		$message = forum_trim($_POST['req_message']);		if ($subject == '')			$errors[] = $lang_misc['No e-mail subject'];		if ($message == '')			$errors[] = $lang_misc['No e-mail message'];		else if (strlen($message) > FORUM_MAX_POSTSIZE_BYTES)			$errors[] = sprintf($lang_misc['Too long e-mail message'], forum_number_format(strlen($message)), forum_number_format(FORUM_MAX_POSTSIZE_BYTES));		if ($forum_user['last_email_sent'] != '' && (time() - $forum_user['last_email_sent']) < $forum_user['g_email_flood'] && (time() - $forum_user['last_email_sent']) >= 0)			$errors[] = sprintf($lang_misc['Email flood'], $forum_user['g_email_flood']);		($hook = get_hook('mi_email_end_validation')) ? eval($hook) : null;		// Did everything go according to plan?		if (empty($errors))		{			// Load the "form e-mail" template			$mail_tpl = forum_trim(file_get_contents(FORUM_ROOT.'lang/'.$forum_user['language'].'/mail_templates/form_email.tpl'));			// The first row contains the subject			$first_crlf = strpos($mail_tpl, "\n");			$mail_subject = forum_trim(substr($mail_tpl, 8, $first_crlf-8));			$mail_message = forum_trim(substr($mail_tpl, $first_crlf));			$mail_subject = str_replace('<mail_subject>', $subject, $mail_subject);			$mail_message = str_replace('<sender>', $forum_user['username'], $mail_message);			$mail_message = str_replace('<board_title>', $forum_config['o_board_title'], $mail_message);			$mail_message = str_replace('<mail_message>', $message, $mail_message);			$mail_message = str_replace('<board_mailer>', sprintf($lang_common['Forum mailer'], $forum_config['o_board_title']), $mail_message);			($hook = get_hook('mi_email_new_replace_data')) ? eval($hook) : null;			if (!defined('FORUM_EMAIL_FUNCTIONS_LOADED'))				require FORUM_ROOT.'include/email.php';			forum_mail($recipient_email, $mail_subject, $mail_message, $forum_user['email'], $forum_user['username']);			// Set the user's last_email_sent time			$query = array(				'UPDATE'	=> 'users',				'SET'		=> 'last_email_sent='.time(),				'WHERE'		=> 'id='.$forum_user['id'],			);			($hook = get_hook('mi_email_qr_update_last_email_sent')) ? eval($hook) : null;			$forum_db->query_build($query) or error(__FILE__, __LINE__);			$forum_flash->add_info($lang_misc['E-mail sent redirect']);			($hook = get_hook('mi_email_pre_redirect')) ? eval($hook) : null;			redirect(forum_htmlencode($_POST['redirect_url']), $lang_misc['E-mail sent redirect']);		}	}	// Setup form	$forum_page['group_count'] = $forum_page['item_count'] = $forum_page['fld_count'] = 0;	$forum_page['form_action'] = forum_link($forum_url['email'], $recipient_id);	$forum_page['hidden_fields'] = array(		'form_sent'		=> '<input type="hidden" name="form_sent" value="1" />',		'redirect_url'	=> '<input type="hidden" name="redirect_url" value="'.forum_htmlencode($forum_user['prev_url']).'" />',		'csrf_token'	=> '<input type="hidden" name="csrf_token" value="'.generate_form_token($forum_page['form_action']).'" />'	);	// Setup main heading	$forum_page['main_head'] = sprintf($lang_misc['Send forum e-mail'], forum_htmlencode($recipient));	// Setup breadcrumbs	$forum_page['crumbs'] = array(		array($forum_config['o_board_title'], forum_link($forum_url['index'])),		sprintf($lang_misc['Send forum e-mail'], forum_htmlencode($recipient))	);	($hook = get_hook('mi_email_pre_header_load')) ? eval($hook) : null;	define('FORUM_PAGE', 'formemail');	require FORUM_ROOT.'header.php';	// START SUBST - <!-- forum_main -->	ob_start();	($hook = get_hook('mi_email_output_start')) ? eval($hook) : null;?>	<div class="main-head">		<h2 class="hn"><span><?php echo $forum_page['main_head'] ?></span></h2>	</div>	<div class="main-content main-frm">		<div class="ct-box warn-box">			<p class="important"><?php echo $lang_misc['E-mail disclosure note'] ?></p>		</div><?php	// If there were any errors, show them	if (!empty($errors))	{		$forum_page['errors'] = array();		foreach ($errors as $cur_error)			$forum_page['errors'][] = '<li class="warn"><span>'.$cur_error.'</span></li>';		($hook = get_hook('mi_pre_email_errors')) ? eval($hook) : null;?>		<div class="ct-box error-box">			<h2 class="warn hn"><?php echo $lang_misc['Form e-mail errors'] ?></h2>			<ul class="error-list">				<?php echo implode("\n\t\t\t\t", $forum_page['errors'])."\n" ?>			</ul>		</div><?php	}?>		<div id="req-msg" class="req-warn ct-box error-box">			<p class="important"><?php printf($lang_common['Required warn'], '<em>'.$lang_common['Required'].'</em>') ?></p>		</div>		<form id="afocus" class="frm-form" method="post" accept-charset="utf-8" action="<?php echo $forum_page['form_action'] ?>">			<div class="hidden">				<?php echo implode("\n\t\t\t\t", $forum_page['hidden_fields'])."\n" ?>			</div><?php ($hook = get_hook('mi_email_pre_fieldset')) ? eval($hook) : null; ?>			<fieldset class="frm-group group<?php echo ++$forum_page['group_count'] ?>">				<legend class="group-legend"><strong><?php echo $lang_misc['Write e-mail'] ?></strong></legend><?php ($hook = get_hook('mi_email_pre_subject')) ? eval($hook) : null; ?>				<div class="sf-set set<?php echo ++$forum_page['item_count'] ?>">					<div class="sf-box text required longtext">						<label for="fld<?php echo ++$forum_page['fld_count'] ?>"><span><?php echo $lang_misc['E-mail subject'] ?></span></label><br />						<span class="fld-input"><input type="text" id="fld<?php echo $forum_page['fld_count'] ?>" name="req_subject" value="<?php echo(isset($_POST['req_subject']) ? forum_htmlencode($_POST['req_subject']) : '') ?>" size="75" maxlength="70" required /></span>					</div>				</div><?php ($hook = get_hook('mi_email_pre_message_contents')) ? eval($hook) : null; ?>				<div class="txt-set set<?php echo ++$forum_page['item_count'] ?>">					<div class="txt-box textarea required">						<label for="fld<?php echo ++$forum_page['fld_count'] ?>"><span><?php echo $lang_misc['E-mail message'] ?></span></label>						<div class="txt-input"><span class="fld-input"><textarea id="fld<?php echo $forum_page['fld_count'] ?>" name="req_message" rows="10" cols="95" required><?php echo(isset($_POST['req_message']) ? forum_htmlencode($_POST['req_message']) : '') ?></textarea></span></div>					</div>				</div><?php ($hook = get_hook('mi_email_pre_fieldset_end')) ? eval($hook) : null; ?>			</fieldset><?php ($hook = get_hook('mi_email_fieldset_end')) ? eval($hook) : null; ?>			<div class="frm-buttons">				<span class="submit primary"><input type="submit" name="submit" value="<?php echo $lang_common['Submit'] ?>" /></span>				<span class="cancel"><input type="submit" name="cancel" value="<?php echo $lang_common['Cancel'] ?>" formnovalidate /></span>			</div>		</form>	</div><?php	($hook = get_hook('mi_email_end')) ? eval($hook) : null;	$tpl_temp = forum_trim(ob_get_contents());	$tpl_main = str_replace('<!-- forum_main -->', $tpl_temp, $tpl_main);	ob_end_clean();	// END SUBST - <!-- forum_main -->	require FORUM_ROOT.'footer.php';}// Report a post?else if (isset($_GET['report'])){	if ($forum_user['is_guest'])		message($lang_common['No permission']);	$post_id = intval($_GET['report']);	if ($post_id < 1)		message($lang_common['Bad request']);	($hook = get_hook('mi_report_selected')) ? eval($hook) : null;	// User pressed the cancel button	if (isset($_POST['cancel']))		redirect(forum_link($forum_url['post'], $post_id), $lang_common['Cancel redirect']);	if (isset($_POST['form_sent']))	{		($hook = get_hook('mi_report_form_submitted')) ? eval($hook) : null;		// Start with a clean slate		$errors = array();		// Flood protection		if ($forum_user['last_email_sent'] != '' && (time() - $forum_user['last_email_sent']) < $forum_user['g_email_flood'] && (time() - $forum_user['last_email_sent']) >= 0)			message(sprintf($lang_misc['Report flood'], $forum_user['g_email_flood']));		// Clean up reason from POST		$reason = forum_linebreaks(forum_trim($_POST['req_reason']));		if ($reason == '')			message($lang_misc['No reason']);		if (strlen($reason) > FORUM_MAX_POSTSIZE_BYTES)		{			$errors[] = sprintf($lang_misc['Too long reason'], forum_number_format(strlen($reason)), forum_number_format(FORUM_MAX_POSTSIZE_BYTES));		}		if (empty($errors)) {			// Get some info about the topic we're reporting			$query = array(				'SELECT'	=> 't.id, t.subject, t.forum_id',				'FROM'		=> 'posts AS p',				'JOINS'		=> array(					array(						'INNER JOIN'	=> 'topics AS t',						'ON'			=> 't.id=p.topic_id'					)				),				'WHERE'		=> 'p.id='.$post_id			);			($hook = get_hook('mi_report_qr_get_topic_data')) ? eval($hook) : null;			$result = $forum_db->query_build($query) or error(__FILE__, __LINE__);			$topic_info = $forum_db->fetch_row($result);			if (!$topic_info)			{				message($lang_common['Bad request']);			}			list($topic_id, $subject, $forum_id) = $topic_info;			($hook = get_hook('mi_report_pre_reports_sent')) ? eval($hook) : null;			// Should we use the internal report handling?			if ($forum_config['o_report_method'] == 0 || $forum_config['o_report_method'] == 2)			{				$query = array(					'INSERT'	=> 'post_id, topic_id, forum_id, reported_by, created, message',					'INTO'		=> 'reports',					'VALUES'	=> $post_id.', '.$topic_id.', '.$forum_id.', '.$forum_user['id'].', '.time().', \''.$forum_db->escape($reason).'\''				);				($hook = get_hook('mi_report_add_report')) ? eval($hook) : null;				$forum_db->query_build($query) or error(__FILE__, __LINE__);			}			// Should we e-mail the report?			if ($forum_config['o_report_method'] == 1 || $forum_config['o_report_method'] == 2)			{				// We send it to the complete mailing-list in one swoop				if ($forum_config['o_mailing_list'] != '')				{					$mail_subject = 'Report('.$forum_id.') - \''.$subject.'\'';					$mail_message = 'User \''.$forum_user['username'].'\' has reported the following message:'."\n".forum_link($forum_url['post'], $post_id)."\n\n".'Reason:'."\n".$reason;					if (!defined('FORUM_EMAIL_FUNCTIONS_LOADED'))						require FORUM_ROOT.'include/email.php';					($hook = get_hook('mi_report_modify_message')) ? eval($hook) : null;					forum_mail($forum_config['o_mailing_list'], $mail_subject, $mail_message);				}			}			// Set last_email_sent time to prevent flooding			$query = array(				'UPDATE'	=> 'users',				'SET'		=> 'last_email_sent='.time(),				'WHERE'		=> 'id='.$forum_user['id']			);			($hook = get_hook('mi_report_qr_update_last_email_sent')) ? eval($hook) : null;			$forum_db->query_build($query) or error(__FILE__, __LINE__);			$forum_flash->add_info($lang_misc['Report redirect']);			($hook = get_hook('mi_report_pre_redirect')) ? eval($hook) : null;			redirect(forum_link($forum_url['post'], $post_id), $lang_misc['Report redirect']);		}	}	// Setup form	$forum_page['group_count'] = $forum_page['item_count'] = $forum_page['fld_count'] = 0;	$forum_page['form_action'] = forum_link($forum_url['report'], $post_id);	$forum_page['hidden_fields'] = array(		'form_sent'		=> '<input type="hidden" name="form_sent" value="1" />',		'csrf_token'	=> '<input type="hidden" name="csrf_token" value="'.generate_form_token($forum_page['form_action']).'" />'	);	// Setup breadcrumbs	$forum_page['crumbs'] = array(		array($forum_config['o_board_title'], forum_link($forum_url['index'])),		$lang_misc['Report post']	);	// Setup main heading	$forum_page['main_head'] = end($forum_page['crumbs']);	($hook = get_hook('mi_report_pre_header_load')) ? eval($hook) : null;	define('FORUM_PAGE', 'report');	require FORUM_ROOT.'header.php';	// START SUBST - <!-- forum_main -->	ob_start();	($hook = get_hook('mi_report_output_start')) ? eval($hook) : null;?>	<div class="main-head">		<h2 class="hn"><span><?php echo $forum_page['main_head'] ?></span></h2>	</div>	<div class="main-content main-frm">		<div id="req-msg" class="req-warn ct-box error-box">			<p class="important"><?php printf($lang_common['Required warn'], '<em>'.$lang_common['Required'].'</em>') ?></p>		</div><?php		// If there were any errors, show them		if (!empty($errors)) {			$forum_page['errors'] = array();			foreach ($errors as $cur_error) {				$forum_page['errors'][] = '<li class="warn"><span>'.$cur_error.'</span></li>';			}			($hook = get_hook('mi_pre_report_errors')) ? eval($hook) : null;?>		<div class="ct-box error-box">			<h2 class="warn hn"><?php echo $lang_misc['Report errors'] ?></h2>			<ul class="error-list">				<?php echo implode("\n\t\t\t\t", $forum_page['errors'])."\n" ?>			</ul>		</div><?php		}?>		<form id="afocus" class="frm-form" method="post" accept-charset="utf-8" action="<?php echo $forum_page['form_action'] ?>">			<div class="hidden">				<?php echo implode("\n\t\t\t\t", $forum_page['hidden_fields'])."\n" ?>			</div><?php ($hook = get_hook('mi_report_pre_fieldset')) ? eval($hook) : null; ?>			<fieldset class="frm-group group<?php echo ++$forum_page['group_count'] ?>">				<legend class="group-legend"><strong><?php echo $lang_common['Required information'] ?></strong></legend><?php ($hook = get_hook('mi_report_pre_reason')) ? eval($hook) : null; ?>				<div class="txt-set set<?php echo ++$forum_page['item_count'] ?>">					<div class="txt-box textarea required">						<label for="fld<?php echo ++$forum_page['fld_count'] ?>"><span><?php echo $lang_misc['Reason'] ?></span> <small><?php echo $lang_misc['Reason help'] ?></small></label><br />						<div class="txt-input"><span class="fld-input"><textarea id="fld<?php echo $forum_page['fld_count'] ?>" name="req_reason" rows="5" cols="60" required></textarea></span></div>					</div>				</div><?php ($hook = get_hook('mi_report_pre_fieldset_end')) ? eval($hook) : null; ?>			</fieldset><?php ($hook = get_hook('mi_report_fieldset_end')) ? eval($hook) : null; ?>			<div class="frm-buttons">				<span class="submit primary"><input type="submit" name="submit" value="<?php echo $lang_common['Submit'] ?>" /></span>				<span class="cancel"><input type="submit" name="cancel" value="<?php echo $lang_common['Cancel'] ?>" formnovalidate /></span>			</div>		</form>	</div><?php	($hook = get_hook('mi_report_end')) ? eval($hook) : null;	$tpl_temp = forum_trim(ob_get_contents());	$tpl_main = str_replace('<!-- forum_main -->', $tpl_temp, $tpl_main);	ob_end_clean();	// END SUBST - <!-- forum_main -->	require FORUM_ROOT.'footer.php';}// Subscribe to a topic?else if (isset($_GET['subscribe'])){	if ($forum_user['is_guest'] || $forum_config['o_subscriptions'] != '1')		message($lang_common['No permission']);	$topic_id = intval($_GET['subscribe']);	if ($topic_id < 1)		message($lang_common['Bad request']);	// We validate the CSRF token. If it's set in POST and we're at this point, the token is valid.	// If it's in GET, we need to make sure it's valid.	if (!isset($_POST['csrf_token']) && (!isset($_GET['csrf_token']) || $_GET['csrf_token'] !== generate_form_token('subscribe'.$topic_id.$forum_user['id'])))		csrf_confirm_form();	($hook = get_hook('mi_subscribe_selected')) ? eval($hook) : null;	// Make sure the user can view the topic	$query = array(		'SELECT'	=> 'subject',		'FROM'		=> 'topics AS t',		'JOINS'		=> array(			array(				'LEFT JOIN'		=> 'forum_perms AS fp',				'ON'			=> '(fp.forum_id=t.forum_id AND fp.group_id='.$forum_user['g_id'].')'			)		),		'WHERE'		=> '(fp.read_forum IS NULL OR fp.read_forum=1) AND t.id='.$topic_id.' AND t.moved_to IS NULL'	);	($hook = get_hook('mi_subscribe_qr_topic_exists')) ? eval($hook) : null;	$result = $forum_db->query_build($query) or error(__FILE__, __LINE__);	$subject = $forum_db->result($result);	if (!$subject)	{		message($lang_common['Bad request']);	}	$query = array(		'SELECT'	=> 'COUNT(s.user_id)',		'FROM'		=> 'subscriptions AS s',		'WHERE'		=> 'user_id='.$forum_user['id'].' AND topic_id='.$topic_id	);	($hook = get_hook('mi_subscribe_qr_check_subscribed')) ? eval($hook) : null;	$result = $forum_db->query_build($query) or error(__FILE__, __LINE__);	if ($forum_db->result($result) > 0)	{		message($lang_misc['Already subscribed']);	}	$query = array(		'INSERT'	=> 'user_id, topic_id',		'INTO'		=> 'subscriptions',		'VALUES'	=> $forum_user['id'].' ,'.$topic_id	);	($hook = get_hook('mi_subscribe_add_subscription')) ? eval($hook) : null;	$forum_db->query_build($query) or error(__FILE__, __LINE__);	$forum_flash->add_info($lang_misc['Subscribe redirect']);	($hook = get_hook('mi_subscribe_pre_redirect')) ? eval($hook) : null;	redirect(forum_link($forum_url['topic'], array($topic_id, sef_friendly($subject))), $lang_misc['Subscribe redirect']);}// Unsubscribe from a topic?else if (isset($_GET['unsubscribe'])){	if ($forum_user['is_guest'] || $forum_config['o_subscriptions'] != '1')		message($lang_common['No permission']);	$topic_id = intval($_GET['unsubscribe']);	if ($topic_id < 1)		message($lang_common['Bad request']);	// We validate the CSRF token. If it's set in POST and we're at this point, the token is valid.	// If it's in GET, we need to make sure it's valid.	if (!isset($_POST['csrf_token']) && (!isset($_GET['csrf_token']) || $_GET['csrf_token'] !== generate_form_token('unsubscribe'.$topic_id.$forum_user['id'])))		csrf_confirm_form();	($hook = get_hook('mi_unsubscribe_selected')) ? eval($hook) : null;	$query = array(		'SELECT'	=> 't.subject',		'FROM'		=> 'topics AS t',		'JOINS'		=> array(			array(				'INNER JOIN'	=> 'subscriptions AS s',				'ON'			=> 's.user_id='.$forum_user['id'].' AND s.topic_id=t.id'			)		),		'WHERE'		=> 't.id='.$topic_id	);	($hook = get_hook('mi_unsubscribe_qr_check_subscribed')) ? eval($hook) : null;	$result = $forum_db->query_build($query) or error(__FILE__, __LINE__);	$subject = $forum_db->result($result);	if (!$subject)	{		message($lang_misc['Not subscribed']);	}	$query = array(		'DELETE'	=> 'subscriptions',		'WHERE'		=> 'user_id='.$forum_user['id'].' AND topic_id='.$topic_id	);	($hook = get_hook('mi_unsubscribe_qr_delete_subscription')) ? eval($hook) : null;	$result = $forum_db->query_build($query) or error(__FILE__, __LINE__);	$forum_flash->add_info($lang_misc['Unsubscribe redirect']);	($hook = get_hook('mi_unsubscribe_pre_redirect')) ? eval($hook) : null;	redirect(forum_link($forum_url['topic'], array($topic_id, sef_friendly($subject))), $lang_misc['Unsubscribe redirect']);}($hook = get_hook('mi_new_action')) ? eval($hook) : null;message($lang_common['Bad request']);
<?php/** * Loads various functions used to parse posts. * * @copyright (C) 2008-2011 PunBB, partially based on code (C) 2008-2009 FluxBB.org * @license http://www.gnu.org/licenses/gpl.html GPL version 2 or higher * @package PunBB */// Make sure no one attempts to run this script "directly"if (!defined('FORUM'))	exit;// Load the IDNA class for international url handlingrequire FORUM_ROOT.'include/idna/idna_convert.class.php';// Here you can add additional smilies if you like (please note that you must escape singlequote and backslash)$smilies = array(':)' => 'smile.png', '=)' => 'smile.png', ':|' => 'neutral.png', '=|' => 'neutral.png', ':(' => 'sad.png', '=(' => 'sad.png', ':D' => 'big_smile.png', '=D' => 'big_smile.png', ':o' => 'yikes.png', ':O' => 'yikes.png', ';)' => 'wink.png', ':/' => 'hmm.png', ':P' => 'tongue.png', ':p' => 'tongue.png', ':lol:' => 'lol.png', ':mad:' => 'mad.png', ':rolleyes:' => 'roll.png', ':cool:' => 'cool.png');($hook = get_hook('ps_start')) ? eval($hook) : null;//// Make sure all BBCodes are lower case and do a little cleanup//function preparse_bbcode($text, &$errors, $is_signature = false){	global $forum_config;	$return = ($hook = get_hook('ps_preparse_bbcode_start')) ? eval($hook) : null;	if ($return != null)		return $return;	if ($is_signature)	{		global $lang_profile;		if (preg_match('#\[quote(=(&quot;|"|\'|)(.*)\\1)?\]|\[/quote\]|\[code\]|\[/code\]|\[list(=([1a\*]))?\]|\[/list\]#i', $text))			$errors[] = $lang_profile['Signature quote/code/list'];	}	if ($forum_config['p_sig_bbcode'] == '1' && $is_signature || $forum_config['p_message_bbcode'] == '1' && !$is_signature)	{		// If the message contains a code tag we have to split it up (text within [code][/code] shouldn't be touched)		if (strpos($text, '[code]') !== false && strpos($text, '[/code]') !== false)		{			list($inside, $outside) = split_text($text, '[code]', '[/code]', $errors);			$text = implode("\xc1", $outside);		}		// Tidy up lists		$pattern = array('%\[list(?:=([1a*]))?+\]((?:(?>.*?(?=\[list(?:=[1a*])?+\]|\[/list\]))|(?R))*)\[/list\]%ise');		$replace = array('preparse_list_tag(\'$2\', \'$1\', $errors)');		$text = preg_replace($pattern, $replace, $text);		$text = str_replace('*'."\0".']', '*]', $text);		if ($forum_config['o_make_links'] == '1')		{			// Check Unicode support			$unicode = defined('FORUM_SUPPORT_PCRE_UNICODE');			$text = do_clickable($text, $unicode);		}		// If we split up the message before we have to concatenate it together again (code tags)		if (isset($inside))		{			$outside = explode("\xc1", $text);			$text = '';			$num_tokens = count($outside);			for ($i = 0; $i < $num_tokens; ++$i)			{				$text .= $outside[$i];				if (isset($inside[$i]))					$text .= '[code]'.$inside[$i].'[/code]';			}		}		$temp_text = false;		if (empty($errors))			$temp_text = preparse_tags($text, $errors, $is_signature);		if ($temp_text !== false)			$text = $temp_text;		// Remove empty tags		while ($new_text = preg_replace('/\[(b|u|i|h|colou?r|quote|code|img|url|email|list)(?:\=[^\]]*)?\]\[\/\1\]/', '', $text))		{			if ($new_text != $text)				$text = $new_text;			else				break;		}	}	$return = ($hook = get_hook('ps_preparse_bbcode_end')) ? eval($hook) : null;	if ($return != null)		return $return;	return forum_trim($text);}//// Check the structure of bbcode tags and fix simple mistakes where possible//function preparse_tags($text, &$errors, $is_signature = false){	global $lang_common, $forum_config;	// Start off by making some arrays of bbcode tags and what we need to do with each one	// List of all the tags	$tags = array('quote', 'code', 'b', 'i', 'u', 'color', 'colour', 'url', 'email', 'img', 'list', '*', 'h');	// List of tags that we need to check are open (You could not put b,i,u in here then illegal nesting like [b][i][/b][/i] would be allowed)	$tags_opened = $tags;	// and tags we need to check are closed (the same as above, added it just in case)	$tags_closed = $tags;	// Tags we can nest and the depth they can be nested to (only quotes )	$tags_nested = array('quote' => $forum_config['o_quote_depth'], 'list' => 5, '*' => 5);	// Tags to ignore the contents of completely (just code)	$tags_ignore = array('code');	// Block tags, block tags can only go within another block tag, they cannot be in a normal tag	$tags_block = array('quote', 'code', 'list', 'h', '*');	// Inline tags, we do not allow new lines in these	$tags_inline = array('b', 'i', 'u', 'color', 'colour', 'h');	// Tags we trim interior space	$tags_trim = array('img');	// Tags we remove quotes from the argument	$tags_quotes = array('url', 'email', 'img');	// Tags we limit bbcode in	$tags_limit_bbcode = array(		'*' 	=> array('b', 'i', 'u', 'color', 'colour', 'url', 'email', 'list', 'img'),		'list' 	=> array('*'),		'url' 	=> array('b', 'i', 'u', 'color', 'colour', 'img'),		'email' => array('b', 'i', 'u', 'color', 'colour', 'img'),		'img' 	=> array()	);	// Tags we can automatically fix bad nesting	$tags_fix = array('quote', 'b', 'i', 'u', 'color', 'colour', 'url', 'email', 'h');	$return = ($hook = get_hook('ps_preparse_tags_start')) ? eval($hook) : null;	if ($return != null)		return $return;	$split_text = preg_split("/(\[[\*a-zA-Z0-9-\/]*?(?:=.*?)?\])/", $text, -1, PREG_SPLIT_DELIM_CAPTURE|PREG_SPLIT_NO_EMPTY);	$open_tags = array('post');	$open_args = array('');	$opened_tag = 0;	$new_text = '';	$current_ignore = '';	$current_nest = '';	$current_depth = array();	$limit_bbcode = $tags;	foreach ($split_text as $current)	{		if ($current == '')			continue;		// Are we dealing with a tag?		if (substr($current, 0, 1) != '[' || substr($current, -1, 1) != ']')		{			// Its not a bbcode tag so we put it on the end and continue			// If we are nested too deeply don't add to the end			if ($current_nest)				continue;			$current = str_replace("\r\n", "\n", $current);			$current = str_replace("\r", "\n", $current);			if (in_array($open_tags[$opened_tag], $tags_inline) && strpos($current, "\n") !== false)			{				// Deal with new lines				$split_current = preg_split("/(\n\n+)/", $current, -1, PREG_SPLIT_DELIM_CAPTURE|PREG_SPLIT_NO_EMPTY);				$current = '';				if (!forum_trim($split_current[0], "\n")) // the first part is a linebreak so we need to handle any open tags first					array_unshift($split_current, '');				for ($i = 1; $i < count($split_current); $i += 2)				{					$temp_opened = array();					$temp_opened_arg = array();					$temp = $split_current[$i - 1];					while (!empty($open_tags))					{						$temp_tag = array_pop($open_tags);						$temp_arg = array_pop($open_args);						if (in_array($temp_tag , $tags_inline))						{							array_push($temp_opened, $temp_tag);							array_push($temp_opened_arg, $temp_arg);							$temp .= '[/'.$temp_tag.']';						}						else						{							array_push($open_tags, $temp_tag);							array_push($open_args, $temp_arg);							break;						}					}					$current .= $temp.$split_current[$i];					$temp = '';					while (!empty($temp_opened))					{						$temp_tag = array_pop($temp_opened);						$temp_arg = array_pop($temp_opened_arg);						if (empty($temp_arg))							$temp .= '['.$temp_tag.']';						else							$temp .= '['.$temp_tag.'='.$temp_arg.']';						array_push($open_tags, $temp_tag);						array_push($open_args, $temp_arg);					}					$current .= $temp;				}				if (array_key_exists($i - 1, $split_current))					$current .= $split_current[$i - 1];			}			if (in_array($open_tags[$opened_tag], $tags_trim))				$new_text .= forum_trim($current);			else				$new_text .= $current;			continue;		}		// Get the name of the tag		$current_arg = '';		if (strpos($current, '/') === 1)		{			$current_tag = substr($current, 2, -1);		}		else if (strpos($current, '=') === false)		{			$current_tag = substr($current, 1, -1);		}		else		{			$current_tag = substr($current, 1, strpos($current, '=')-1);			$current_arg = substr($current, strpos($current, '=')+1, -1);		}		$current_tag = strtolower($current_tag);		// Is the tag defined?		if (!in_array($current_tag, $tags))		{			// Its not a bbcode tag so we put it on the end and continue			if (!$current_nest)				$new_text .= $current;			continue;		}		// We definitely have a bbcode tag.		// Make the tag string lower case		if ($equalpos = strpos($current,'='))		{			// We have an argument for the tag which we don't want to make lowercase			if (strlen(substr($current, $equalpos)) == 2)			{				// Empty tag argument				$errors[] = sprintf($lang_common['BBCode error 6'], $current_tag);				return false;			}			$current = strtolower(substr($current, 0, $equalpos)).substr($current, $equalpos);		}		else			$current = strtolower($current);		//This is if we are currently in a tag which escapes other bbcode such as code		if ($current_ignore)		{			if ('[/'.$current_ignore.']' == $current)			{				// We've finished the ignored section				$current = '[/'.$current_tag.']';				$current_ignore = '';			}			$new_text .= $current;			continue;		}		if ($current_nest)		{			// We are currently too deeply nested so lets see if we are closing the tag or not.			if ($current_tag != $current_nest)				continue;			if (substr($current, 1, 1) == '/')				$current_depth[$current_nest]--;			else				$current_depth[$current_nest]++;			if ($current_depth[$current_nest] <= $tags_nested[$current_nest])				$current_nest = '';			continue;		}		// Check the current tag is allowed here		if (!in_array($current_tag, $limit_bbcode) && $current_tag != $open_tags[$opened_tag])		{			$errors[] = sprintf($lang_common['BBCode error 3'], $current_tag, $open_tags[$opened_tag]);			return false;		}		if (substr($current, 1, 1) == '/')		{			//This is if we are closing a tag			if ($opened_tag == 0 || !in_array($current_tag, $open_tags))			{				//We tried to close a tag which is not open				if (in_array($current_tag, $tags_opened))				{					$errors[] = sprintf($lang_common['BBCode error 1'], $current_tag);					return false;				}			}			else			{				// Check nesting				while (true)				{					// Nesting is ok					if ($open_tags[$opened_tag] == $current_tag)					{						array_pop($open_tags);						array_pop($open_args);						$opened_tag--;						break;					}					// Nesting isn't ok, try to fix it					if (in_array($open_tags[$opened_tag], $tags_closed) && in_array($current_tag, $tags_closed))					{						if (in_array($current_tag, $open_tags))						{							$temp_opened = array();							$temp_opened_arg = array();							$temp = '';							while (!empty($open_tags))							{								$temp_tag = array_pop($open_tags);								$temp_arg = array_pop($open_args);								if (!in_array($temp_tag, $tags_fix))								{									// We couldn't fix nesting									$errors[] = sprintf($lang_common['BBCode error 5'], array_pop($temp_opened));									return false;								}								array_push($temp_opened, $temp_tag);								array_push($temp_opened_arg, $temp_arg);								if ($temp_tag == $current_tag)									break;								else									$temp .= '[/'.$temp_tag.']';							}							$current = $temp.$current;							$temp = '';							array_pop($temp_opened);							array_pop($temp_opened_arg);							while (!empty($temp_opened))							{								$temp_tag = array_pop($temp_opened);								$temp_arg = array_pop($temp_opened_arg);								if (empty($temp_arg))									$temp .= '['.$temp_tag.']';								else									$temp .= '['.$temp_tag.'='.$temp_arg.']';								array_push($open_tags, $temp_tag);								array_push($open_args, $temp_arg);							}							$current .= $temp;							$opened_tag--;							break;						}						else						{							// We couldn't fix nesting							$errors[] = sprintf($lang_common['BBCode error 1'], $current_tag);							return false;						}					}					else if (in_array($open_tags[$opened_tag], $tags_closed))						break;					else					{						array_pop($open_tags);						array_pop($open_args);						$opened_tag--;					}				}			}			if (in_array($current_tag, array_keys($tags_nested)))			{				if (isset($current_depth[$current_tag]))					$current_depth[$current_tag]--;			}			if (in_array($open_tags[$opened_tag], array_keys($tags_limit_bbcode)))				$limit_bbcode = $tags_limit_bbcode[$open_tags[$opened_tag]];			else				$limit_bbcode = $tags;			$new_text .= $current;			continue;		}		else		{			// We are opening a tag			if (in_array($current_tag, array_keys($tags_limit_bbcode)))				$limit_bbcode = $tags_limit_bbcode[$current_tag];			else				$limit_bbcode = $tags;			if (in_array($current_tag, $tags_block) && !in_array($open_tags[$opened_tag], $tags_block) && $opened_tag != 0)			{				// We tried to open a block tag within a non-block tag				$errors[] = sprintf($lang_common['BBCode error 3'], $current_tag, $open_tags[$opened_tag]);				return false;			}			if (in_array($current_tag, $tags_ignore))			{				// Its an ignore tag so we don't need to worry about whats inside it,				$current_ignore = $current_tag;				$new_text .= $current;				continue;			}			// Deal with nested tags			if (in_array($current_tag, $open_tags) && !in_array($current_tag, array_keys($tags_nested)))			{				// We nested a tag we shouldn't				$errors[] = sprintf($lang_common['BBCode error 4'], $current_tag);				return false;			}			else if (in_array($current_tag, array_keys($tags_nested)))			{				// We are allowed to nest this tag				if (isset($current_depth[$current_tag]))					$current_depth[$current_tag]++;				else					$current_depth[$current_tag] = 1;				// See if we are nested too deep				if ($current_depth[$current_tag] > $tags_nested[$current_tag])				{					$current_nest = $current_tag;					continue;				}			}			// Remove quotes from arguments for certain tags			if (strpos($current, '=') !== false && in_array($current_tag, $tags_quotes))			{				$current = preg_replace('#\['.$current_tag.'=("|\'|)(.*?)\\1\]\s*#i', '['.$current_tag.'=$2]', $current);			}			if (in_array($current_tag, array_keys($tags_limit_bbcode)))				$limit_bbcode = $tags_limit_bbcode[$current_tag];			$open_tags[] = $current_tag;			$open_args[] = $current_arg;			$opened_tag++;			$new_text .= $current;			continue;		}	}	// Check we closed all the tags we needed to	foreach ($tags_closed as $check)	{		if (in_array($check, $open_tags))		{			// We left an important tag open			$errors[] = sprintf($lang_common['BBCode error 5'], $check);			return false;		}	}	if ($current_ignore)	{		// We left an ignore tag open		$errors[] = sprintf($lang_common['BBCode error 5'], $current_ignore);		return false;	}	$return = ($hook = get_hook('ps_preparse_tags_end')) ? eval($hook) : null;	if ($return != null)		return $return;	return $new_text;}//// Preparse the contents of [list] bbcode//function preparse_list_tag($content, $type = '*', &$errors){	global $lang_common;	if (strlen($type) != 1)		$type = '*';	if (strpos($content,'[list') !== false)	{		$pattern = array('%\[list(?:=([1a*]))?+\]((?:(?>.*?(?=\[list(?:=[1a*])?+\]|\[/list\]))|(?R))*)\[/list\]%ise');		$replace = array('preparse_list_tag(\'$2\', \'$1\', $errors)');		$content = preg_replace($pattern, $replace, $content);	}	$items = explode('[*]', str_replace('\"', '"', $content));	$content = '';	foreach ($items as $item)	{		if (forum_trim($item) != '')			$content .= '[*'."\0".']'.str_replace('[/*]', '', forum_trim($item)).'[/*'."\0".']'."\n";	}	return '[list='.$type.']'."\n".$content.'[/list]';}//// Split text into chunks ($inside contains all text inside $start and $end, and $outside contains all text outside)//function split_text($text, $start, $end, &$errors, $retab = true){	global $forum_config, $lang_common;	$tokens = explode($start, $text);	$outside[] = $tokens[0];	$num_tokens = count($tokens);	for ($i = 1; $i < $num_tokens; ++$i)	{		$temp = explode($end, $tokens[$i]);		if (count($temp) != 2)		{			$errors[] = $lang_common['BBCode code problem'];			return array(null, array($text));		}		$inside[] = $temp[0];		$outside[] = $temp[1];	}	if ($forum_config['o_indent_num_spaces'] != 8 && $retab)	{		$spaces = str_repeat(' ', $forum_config['o_indent_num_spaces']);		$inside = str_replace("\t", $spaces, $inside);	}	return array($inside, $outside);}//// Truncate URL if longer than 55 characters (add http:// or ftp:// if missing)//function handle_url_tag($url, $link = '', $bbcode = false){	$return = ($hook = get_hook('ps_handle_url_tag_start')) ? eval($hook) : null;	if ($return != null)		return $return;	$full_url = str_replace(array(' ', '\'', '`', '"'), array('%20', '', '', ''), $url);	if (strpos($url, 'www.') === 0)			// If it starts with www, we add http://		$full_url = 'http://'.$full_url;	else if (strpos($url, 'ftp.') === 0)	// Else if it starts with ftp, we add ftp://		$full_url = 'ftp://'.$full_url;	else if (!preg_match('#^([a-z0-9]{3,6})://#', $url)) 	// Else if it doesn't start with abcdef://, we add http://		$full_url = 'http://'.$full_url;	if (defined('FORUM_SUPPORT_PCRE_UNICODE'))	{		$idn = new idna_convert();		$idn->set_parameter('encoding', 'utf8');		$idn->set_parameter('strict', false);		$full_url = $idn->encode($full_url);	}	// Ok, not very pretty :-)	if (!$bbcode)	{		if (defined('FORUM_SUPPORT_PCRE_UNICODE'))		{			$link_name = ($link == '' || $link == $url) ? $url : $link;			if (preg_match('!^(https?|ftp|news){1}'.preg_quote('://xn--', '!').'!', $link_name))			{				$link = $idn->decode($link_name);			}		}		$link = ($link == '' || $link == $url) ? ((utf8_strlen($url) > 55) ? utf8_substr($url, 0 , 39).'  '.utf8_substr($url, -10) : $url) : stripslashes($link);	}	$return = ($hook = get_hook('ps_handle_url_tag_end')) ? eval($hook) : null;	if ($return != null)		return $return;	if ($bbcode)	{		if (defined('FORUM_SUPPORT_PCRE_UNICODE'))		{			if (preg_match('!^(https?|ftp|news){1}'.preg_quote('://xn--', '!').'!', $link))			{				$link = $idn->decode($link);			}		}		if ($full_url == $link)			return '[url]'.$link.'[/url]';		else			return '[url='.$full_url.']'.$link.'[/url]';	}	else		return '<a href="'.$full_url.'">'.$link.'</a>';}//// Turns an URL from the [img] tag into an <img> tag or a <a href...> tag//function handle_img_tag($url, $is_signature = false, $alt = null){	global $lang_common, $forum_user;	$return = ($hook = get_hook('ps_handle_img_tag_start')) ? eval($hook) : null;	if ($return != null)		return $return;	if ($alt == null)		$alt = $url;	$img_tag = '<a href="'.$url.'">&lt;'.$lang_common['Image link'].'&gt;</a>';	if ($is_signature && $forum_user['show_img_sig'] != '0')		$img_tag = '<img class="sigimage" src="'.$url.'" alt="'.forum_htmlencode($alt).'" />';	else if (!$is_signature && $forum_user['show_img'] != '0')		$img_tag = '<span class="postimg"><img src="'.$url.'" alt="'.forum_htmlencode($alt).'" /></span>';	$return = ($hook = get_hook('ps_handle_img_tag_end')) ? eval($hook) : null;	if ($return != null)		return $return;	return $img_tag;}//// Parse the contents of [list] bbcode//function handle_list_tag($content, $type = '*'){	if (strlen($type) != 1)		$type = '*';	if (strpos($content,'[list') !== false)	{		$pattern = array('%\[list(?:=([1a*]))?+\]((?:(?>.*?(?=\[list(?:=[1a*])?+\]|\[/list\]))|(?R))*)\[/list\]%ise');		$replace = array('handle_list_tag(\'$2\', \'$1\')');		$content = preg_replace($pattern, $replace, $content);	}	$content = preg_replace('#\s*\[\*\](.*?)\[/\*\]\s*#s', '<li><p>$1</p></li>', forum_trim($content));	if ($type == '*')		$content = '<ul>'.$content.'</ul>';	else		if ($type == 'a')			$content = '<ol class="alpha">'.$content.'</ol>';		else			$content = '<ol class="decimal">'.$content.'</ol>';	return '</p>'.$content.'<p>';}//// Convert BBCodes to their HTML equivalent//function do_bbcode($text, $is_signature = false){	global $lang_common, $forum_user, $forum_config;	$return = ($hook = get_hook('ps_do_bbcode_start')) ? eval($hook) : null;	if ($return != null)		return $return;	if (strpos($text, '[quote') !== false)	{		$text = preg_replace('#\[quote=(&\#039;|&quot;|"|\'|)(.*?)\\1\]#e', '"</p><div class=\"quotebox\"><cite>".str_replace(array(\'[\', \'\\"\'), array(\'&#91;\', \'"\'), \'$2\')." ".$lang_common[\'wrote\'].":</cite><blockquote><p>"', $text);		$text = preg_replace('#\[quote\]\s*#', '</p><div class="quotebox"><blockquote><p>', $text);		$text = preg_replace('#\s*\[\/quote\]#S', '</p></blockquote></div><p>', $text);	}	if (!$is_signature)	{		$pattern[] = '%\[list(?:=([1a*]))?+\]((?:(?>.*?(?=\[list(?:=[1a*])?+\]|\[/list\]))|(?R))*)\[/list\]%ise';		$replace[] = 'handle_list_tag(\'$2\', \'$1\')';	}	$pattern[] = '#\[b\](.*?)\[/b\]#ms';	$pattern[] = '#\[i\](.*?)\[/i\]#ms';	$pattern[] = '#\[u\](.*?)\[/u\]#ms';	$pattern[] = '#\[colou?r=([a-zA-Z]{3,20}|\#[0-9a-fA-F]{6}|\#[0-9a-fA-F]{3})](.*?)\[/colou?r\]#ms';	$pattern[] = '#\[h\](.*?)\[/h\]#ms';	$replace[] = '<strong>$1</strong>';	$replace[] = '<em>$1</em>';	$replace[] = '<span class="bbu">$1</span>';	$replace[] = '<span style="color: $1">$2</span>';	$replace[] = '</p><h5>$1</h5><p>';	if (($is_signature && $forum_config['p_sig_img_tag'] == '1') || (!$is_signature && $forum_config['p_message_img_tag'] == '1'))	{		$pattern[] = '#\[img\]((ht|f)tps?://)([^\s<"]*?)\[/img\]#e';		$pattern[] = '#\[img=([^\[]*?)\]((ht|f)tps?://)([^\s<"]*?)\[/img\]#e';		if ($is_signature)		{			$replace[] = 'handle_img_tag(\'$1$3\', true)';			$replace[] = 'handle_img_tag(\'$2$4\', true, \'$1\')';		}		else		{			$replace[] = 'handle_img_tag(\'$1$3\', false)';			$replace[] = 'handle_img_tag(\'$2$4\', false, \'$1\')';		}	}	$pattern[] = '#\[url\]([^\[]*?)\[/url\]#e';	$pattern[] = '#\[url=([^\[]+?)\](.*?)\[/url\]#e';	$pattern[] = '#\[email\]([^\[]*?)\[/email\]#';	$pattern[] = '#\[email=([^\[]+?)\](.*?)\[/email\]#';	$replace[] = 'handle_url_tag(\'$1\')';	$replace[] = 'handle_url_tag(\'$1\', \'$2\')';	$replace[] = '<a href="mailto:$1">$1</a>';	$replace[] = '<a href="mailto:$1">$2</a>';	$return = ($hook = get_hook('ps_do_bbcode_replace')) ? eval($hook) : null;	if ($return != null)		return $return;	// This thing takes a while! :)	$text = preg_replace($pattern, $replace, $text);	$return = ($hook = get_hook('ps_do_bbcode_end')) ? eval($hook) : null;	if ($return != null)		return $return;	return $text;}//// Make hyperlinks clickable//function do_clickable($text, $unicode = FALSE){	$text = ' '.$text;	if ($unicode)	{		$text = preg_replace('#(?<=[\s\]\)])(<)?(\[)?(\()?([\'"]?)(https?|ftp|news){1}://([\p{Nd}\p{L}\-]+\.([\p{Nd}\p{L}\-]+\.)*[\p{Nd}\p{L}\-]+(:[0-9]+)?(/[^\s\[]*[^\s.,?!\[;:-])?)\4(?(3)(\)))(?(2)(\]))(?(1)(>))(?![^\s]*\[/(?:url|img)\])#ieu', 'stripslashes(\'$1$2$3$4\').handle_url_tag(\'$5://$6\', \'$5://$6\', true).stripslashes(\'$4$10$11$12\')', $text);		$text = preg_replace('#(?<=[\s\]\)])(<)?(\[)?(\()?([\'"]?)(www|ftp)\.(([\p{Nd}\p{L}\-]+\.)*[\p{Nd}\p{L}\-]+(:[0-9]+)?(/[^\s\[]*[^\s.,?!\[;:-])?)\4(?(3)(\)))(?(2)(\]))(?(1)(>))(?![^\s]*\[/(?:url|img)\])#ieu', 'stripslashes(\'$1$2$3$4\').handle_url_tag(\'$5.$6\', \'$5.$6\', true).stripslashes(\'$4$10$11$12\')', $text);	}	else	{		$text = preg_replace('#(?<=[\s\]\)])(<)?(\[)?(\()?([\'"]?)(https?|ftp|news){1}://([\w\-]+\.([\w\-]+\.)*[\w]+(:[0-9]+)?(/[^\s\[]*[^\s.,?!\[;:-]?)?)\4(?(3)(\)))(?(2)(\]))(?(1)(>))(?![^\s]*\[/(?:url|img)\])#ie', 'stripslashes(\'$1$2$3$4\').handle_url_tag(\'$5://$6\', \'$5://$6\', true).stripslashes(\'$4$10$11$12\')', $text);		$text = preg_replace('#(?<=[\s\]\)])(<)?(\[)?(\()?([\'"]?)(www|ftp)\.(([\w\-]+\.)*[\w]+(:[0-9]+)?(/[^\s\[]*[^\s.,?!\[;:-])?)\4(?(3)(\)))(?(2)(\]))(?(1)(>))(?![^\s]*\[/(?:url|img)\])#ie', 'stripslashes(\'$1$2$3$4\').handle_url_tag(\'$5.$6\', \'$5.$6\', true).stripslashes(\'$4$10$11$12\')', $text);	}	return substr($text, 1);}//// Convert a series of smilies to images//function do_smilies($text){	global $forum_config, $base_url, $smilies;	$return = ($hook = get_hook('ps_do_smilies_start')) ? eval($hook) : null;	if ($return != null)		return $return;	$text = ' '.$text.' ';	foreach ($smilies as $smiley_text => $smiley_img)	{		if (strpos($text, $smiley_text) !== false)			$text = preg_replace("#(?<=[>\s])".preg_quote($smiley_text, '#')."(?=\W)#m", '<img src="'.$base_url.'/img/smilies/'.$smiley_img.'" width="15" height="15" alt="'.substr($smiley_img, 0, strrpos($smiley_img, '.')).'" />', $text);	}	$return = ($hook = get_hook('ps_do_smilies_end')) ? eval($hook) : null;	return substr($text, 1, -1);}//// Parse message text//function parse_message($text, $hide_smilies){	global $forum_config, $lang_common, $forum_user;	$return = ($hook = get_hook('ps_parse_message_start')) ? eval($hook) : null;	if ($return != null)		return $return;	if ($forum_config['o_censoring'] == '1')		$text = censor_words($text);	$return = ($hook = get_hook('ps_parse_message_post_censor')) ? eval($hook) : null;	if ($return != null)		return $return;	// Convert applicable characters to HTML entities	$text = forum_htmlencode($text);	$return = ($hook = get_hook('ps_parse_message_pre_split')) ? eval($hook) : null;	if ($return != null)		return $return;	// If the message contains a code tag we have to split it up (text within [code][/code] shouldn't be touched)	if (strpos($text, '[code]') !== false && strpos($text, '[/code]') !== false)	{		list($inside, $outside) = split_text($text, '[code]', '[/code]', $errors);		$text = implode("\xc1", $outside);	}	$return = ($hook = get_hook('ps_parse_message_post_split')) ? eval($hook) : null;	if ($return != null)		return $return;	if ($forum_config['p_message_bbcode'] == '1' && strpos($text, '[') !== false && strpos($text, ']') !== false)		$text = do_bbcode($text);	if ($forum_config['o_smilies'] == '1' && $forum_user['show_smilies'] == '1' && $hide_smilies == '0')		$text = do_smilies($text);	$return = ($hook = get_hook('ps_parse_message_bbcode')) ? eval($hook) : null;	if ($return != null)		return $return;	// Deal with newlines, tabs and multiple spaces	$pattern = array("\n", "\t", '  ', '  ');	$replace = array('<br />', '&nbsp; &nbsp; ', '&nbsp; ', ' &nbsp;');	$text = str_replace($pattern, $replace, $text);	$return = ($hook = get_hook('ps_parse_message_pre_merge')) ? eval($hook) : null;	if ($return != null)		return $return;	// If we split up the message before we have to concatenate it together again (code tags)	if (isset($inside))	{		$outside = explode("\xc1", $text);		$text = '';		$num_tokens = count($outside);		for ($i = 0; $i < $num_tokens; ++$i)		{			$text .= $outside[$i];			if (isset($inside[$i]))				$text .= '</p><div class="codebox"><pre><code>'.forum_trim($inside[$i], "\n\r").'</code></pre></div><p>';		}	}	$return = ($hook = get_hook('ps_parse_message_post_merge')) ? eval($hook) : null;	if ($return != null)		return $return;	// Add paragraph tag around post, but make sure there are no empty paragraphs	$text = preg_replace('#<br />\s*?<br />((\s*<br />)*)#i', "</p>$1<p>", $text);	$text = str_replace('<p><br />', '<p>', $text);	$text = str_replace('<p></p>', '', '<p>'.$text.'</p>');	$return = ($hook = get_hook('ps_parse_message_end')) ? eval($hook) : null;	if ($return != null)		return $return;	return $text;}//// Parse signature text//function parse_signature($text){	global $forum_config, $lang_common, $forum_user;	$return = ($hook = get_hook('ps_parse_signature_start')) ? eval($hook) : null;	if ($return != null)		return $return;	if ($forum_config['o_censoring'] == '1')		$text = censor_words($text);	$return = ($hook = get_hook('ps_parse_signature_post_censor')) ? eval($hook) : null;	if ($return != null)		return $return;	// Convert applicable characters to HTML entities	$text = forum_htmlencode($text);	$return = ($hook = get_hook('ps_parse_signature_pre_bbcode')) ? eval($hook) : null;	if ($return != null)		return $return;	if ($forum_config['p_sig_bbcode'] == '1' && strpos($text, '[') !== false && strpos($text, ']') !== false)		$text = do_bbcode($text, true);	if ($forum_config['o_smilies_sig'] == '1' && $forum_user['show_smilies'] == '1')		$text = do_smilies($text);	$return = ($hook = get_hook('ps_parse_signature_post_bbcode')) ? eval($hook) : null;	if ($return != null)		return $return;	// Deal with newlines, tabs and multiple spaces	$pattern = array("\n", "\t", '  ', '  ');	$replace = array('<br />', '&nbsp; &nbsp; ', '&nbsp; ', ' &nbsp;');	$text = str_replace($pattern, $replace, $text);	$return = ($hook = get_hook('ps_parse_signature_end')) ? eval($hook) : null;	if ($return != null)		return $return;	return $text;}define('FORUM_PARSER_LOADED', 1);
