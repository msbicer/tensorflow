<?php/** * Displays a list of the categories/forums that the current user can see, along with some statistics. * * @copyright (C) 2008-2011 PunBB, partially based on code (C) 2008-2009 FluxBB.org * @license http://www.gnu.org/licenses/gpl.html GPL version 2 or higher * @package PunBB */if (!defined('FORUM_ROOT'))	define('FORUM_ROOT', './');require FORUM_ROOT.'include/common.php';($hook = get_hook('in_start')) ? eval($hook) : null;if ($forum_user['g_read_board'] == '0')	message($lang_common['No view']);// Load the index.php language filerequire FORUM_ROOT.'lang/'.$forum_user['language'].'/index.php';// Get list of forums and topics with new posts since last visitif (!$forum_user['is_guest']){	$query = array(		'SELECT'	=> 't.forum_id, t.id, t.last_post',		'FROM'		=> 'topics AS t',		'JOINS'		=> array(			array(				'INNER JOIN'	=> 'forums AS f',				'ON'			=> 'f.id=t.forum_id'			),			array(				'LEFT JOIN'		=> 'forum_perms AS fp',				'ON'			=> '(fp.forum_id=f.id AND fp.group_id='.$forum_user['g_id'].')'			)		),		'WHERE'		=> '(fp.read_forum IS NULL OR fp.read_forum=1) AND t.last_post>'.$forum_user['last_visit'].' AND t.moved_to IS NULL'	);	($hook = get_hook('in_qr_get_new_topics')) ? eval($hook) : null;	$result = $forum_db->query_build($query) or error(__FILE__, __LINE__);	$new_topics = array();	while ($cur_topic = $forum_db->fetch_assoc($result))		$new_topics[$cur_topic['forum_id']][$cur_topic['id']] = $cur_topic['last_post'];	$tracked_topics = get_tracked_topics();}// Setup main heading$forum_page['main_title'] = forum_htmlencode($forum_config['o_board_title']);($hook = get_hook('in_pre_header_load')) ? eval($hook) : null;define('FORUM_ALLOW_INDEX', 1);define('FORUM_PAGE', 'index');require FORUM_ROOT.'header.php';// START SUBST - <!-- forum_main -->ob_start();($hook = get_hook('in_main_output_start')) ? eval($hook) : null;// Print the categories and forums$query = array(	'SELECT'	=> 'c.id AS cid, c.cat_name, f.id AS fid, f.forum_name, f.forum_desc, f.redirect_url, f.moderators, f.num_topics, f.num_posts, f.last_post, f.last_post_id, f.last_poster',	'FROM'		=> 'categories AS c',	'JOINS'		=> array(		array(			'INNER JOIN'	=> 'forums AS f',			'ON'			=> 'c.id=f.cat_id'		),		array(			'LEFT JOIN'		=> 'forum_perms AS fp',			'ON'			=> '(fp.forum_id=f.id AND fp.group_id='.$forum_user['g_id'].')'		)	),	'WHERE'		=> 'fp.read_forum IS NULL OR fp.read_forum=1',	'ORDER BY'	=> 'c.disp_position, c.id, f.disp_position');($hook = get_hook('in_qr_get_cats_and_forums')) ? eval($hook) : null;$result = $forum_db->query_build($query) or error(__FILE__, __LINE__);$forum_page['cur_category'] = $forum_page['cat_count'] = $forum_page['item_count'] = 0;while ($cur_forum = $forum_db->fetch_assoc($result)){	($hook = get_hook('in_forum_loop_start')) ? eval($hook) : null;	++$forum_page['item_count'];	if ($cur_forum['cid'] != $forum_page['cur_category'])	// A new category since last iteration?	{		if ($forum_page['cur_category'] != 0)			echo "\t".'</div>'."\n";		++$forum_page['cat_count'];		$forum_page['item_count'] = 1;		$forum_page['item_header'] = array();		$forum_page['item_header']['subject']['title'] = '<strong class="subject-title">'.$lang_index['Forums'].'</strong>';		$forum_page['item_header']['info']['topics'] = '<strong class="info-topics">'.$lang_index['topics'].'</strong>';		$forum_page['item_header']['info']['post'] = '<strong class="info-posts">'.$lang_index['posts'].'</strong>';		$forum_page['item_header']['info']['lastpost'] = '<strong class="info-lastpost">'.$lang_index['last post'].'</strong>';		($hook = get_hook('in_forum_pre_cat_head')) ? eval($hook) : null;		$forum_page['cur_category'] = $cur_forum['cid'];?>	<div class="main-head">		<h2 class="hn"><span><?php echo forum_htmlencode($cur_forum['cat_name']) ?></span></h2>	</div>	<div class="main-subhead">		<p class="item-summary"><span><?php printf($lang_index['Category subtitle'], implode(' ', $forum_page['item_header']['subject']), implode(', ', $forum_page['item_header']['info'])) ?></span></p>	</div>	<div id="category<?php echo $forum_page['cat_count'] ?>" class="main-content main-category"><?php	}	// Reset arrays and globals for each forum	$forum_page['item_status'] = $forum_page['item_subject'] = $forum_page['item_body'] = $forum_page['item_title'] = array();	// Is this a redirect forum?	if ($cur_forum['redirect_url'] != '')	{		$forum_page['item_body']['subject']['title'] = '<h3 class="hn"><a class="external" href="'.forum_htmlencode($cur_forum['redirect_url']).'" title="'.sprintf($lang_index['Link to'], forum_htmlencode($cur_forum['redirect_url'])).'"><span>'.forum_htmlencode($cur_forum['forum_name']).'</span></a></h3>';		$forum_page['item_status']['redirect'] = 'redirect';		if ($cur_forum['forum_desc'] != '')			$forum_page['item_subject']['desc'] = $cur_forum['forum_desc'];		$forum_page['item_subject']['redirect'] = '<span>'.$lang_index['External forum'].'</span>';		($hook = get_hook('in_redirect_row_pre_item_subject_merge')) ? eval($hook) : null;		if (!empty($forum_page['item_subject']))			$forum_page['item_body']['subject']['desc'] = '<p>'.implode(' ', $forum_page['item_subject']).'</p>';		// Forum topic and post count		$forum_page['item_body']['info']['topics'] = '<li class="info-topics"><span class="label">'.$lang_index['No topic info'].'</span></li>';		$forum_page['item_body']['info']['posts'] = '<li class="info-posts"><span class="label">'.$lang_index['No post info'].'</span></li>';		$forum_page['item_body']['info']['lastpost'] = '<li class="info-lastpost"><span class="label">'.$lang_index['No lastpost info'].'</span></li>';		($hook = get_hook('in_redirect_row_pre_display')) ? eval($hook) : null;	}	else	{		// Setup the title and link to the forum		$forum_page['item_title']['title'] = '<a href="'.forum_link($forum_url['forum'], array($cur_forum['fid'], sef_friendly($cur_forum['forum_name']))).'"><span>'.forum_htmlencode($cur_forum['forum_name']).'</span></a>';		// Are there new posts since our last visit?		if (!$forum_user['is_guest'] && $cur_forum['last_post'] > $forum_user['last_visit'] && (empty($tracked_topics['forums'][$cur_forum['fid']]) || $cur_forum['last_post'] > $tracked_topics['forums'][$cur_forum['fid']]))		{			// There are new posts in this forum, but have we read all of them already?			foreach ($new_topics[$cur_forum['fid']] as $check_topic_id => $check_last_post)			{				if ((empty($tracked_topics['topics'][$check_topic_id]) || $tracked_topics['topics'][$check_topic_id] < $check_last_post) && (empty($tracked_topics['forums'][$cur_forum['fid']]) || $tracked_topics['forums'][$cur_forum['fid']] < $check_last_post))				{					$forum_page['item_status']['new'] = 'new';					$forum_page['item_title']['status'] = '<small>'.sprintf($lang_index['Forum has new'], '<a href="'.forum_link($forum_url['search_new_results'], $cur_forum['fid']).'" title="'.$lang_index['New posts title'].'">'.$lang_index['Forum new posts'].'</a>').'</small>';					break;				}			}		}		($hook = get_hook('in_normal_row_pre_item_title_merge')) ? eval($hook) : null;		$forum_page['item_body']['subject']['title'] = '<h3 class="hn">'.implode(' ', $forum_page['item_title']).'</h3>';		// Setup the forum description and mod list		if ($cur_forum['forum_desc'] != '')			$forum_page['item_subject']['desc'] = $cur_forum['forum_desc'];		if ($forum_config['o_show_moderators'] == '1' && $cur_forum['moderators'] != '')		{			$forum_page['mods_array'] = unserialize($cur_forum['moderators']);			$forum_page['item_mods'] = array();			foreach ($forum_page['mods_array'] as $mod_username => $mod_id)				$forum_page['item_mods'][] = ($forum_user['g_view_users'] == '1') ? '<a href="'.forum_link($forum_url['user'], $mod_id).'">'.forum_htmlencode($mod_username).'</a>' : forum_htmlencode($mod_username);			($hook = get_hook('in_row_modify_modlist')) ? eval($hook) : null;			$forum_page['item_subject']['modlist'] = '<span class="modlist">'.sprintf($lang_index['Moderated by'], implode(', ', $forum_page['item_mods'])).'</span>';		}		($hook = get_hook('in_normal_row_pre_item_subject_merge')) ? eval($hook) : null;		if (!empty($forum_page['item_subject']))			$forum_page['item_body']['subject']['desc'] = '<p>'.implode(' ', $forum_page['item_subject']).'</p>';		// Setup forum topics, post count and last post		$forum_page['item_body']['info']['topics'] = '<li class="info-topics"><strong>'.forum_number_format($cur_forum['num_topics']).'</strong> <span class="label">'.(($cur_forum['num_topics'] == 1) ? $lang_index['topic'] : $lang_index['topics']).'</span></li>';		$forum_page['item_body']['info']['posts'] = '<li class="info-posts"><strong>'.forum_number_format($cur_forum['num_posts']).'</strong> <span class="label">'.(($cur_forum['num_posts'] == 1) ? $lang_index['post'] : $lang_index['posts']).'</span></li>';		if ($cur_forum['last_post'] != '')			$forum_page['item_body']['info']['lastpost'] = '<li class="info-lastpost"><span class="label">'.$lang_index['Last post'].'</span> <strong><a href="'.forum_link($forum_url['post'], $cur_forum['last_post_id']).'">'.format_time($cur_forum['last_post']).'</a></strong> <cite>'.sprintf($lang_index['Last poster'], forum_htmlencode($cur_forum['last_poster'])).'</cite></li>';		else			$forum_page['item_body']['info']['lastpost'] = '<li class="info-lastpost"><strong>'.$lang_common['Never'].'</strong></li>';		($hook = get_hook('in_normal_row_pre_display')) ? eval($hook) : null;	}	// Generate classes for this forum depending on its status	$forum_page['item_style'] = (($forum_page['item_count'] % 2 != 0) ? ' odd' : ' even').(($forum_page['item_count'] == 1) ? ' main-first-item' : '').((!empty($forum_page['item_status'])) ? ' '.implode(' ', $forum_page['item_status']) : '');	($hook = get_hook('in_row_pre_display')) ? eval($hook) : null;?>		<div id="forum<?php echo $cur_forum['fid'] ?>" class="main-item<?php echo $forum_page['item_style'] ?>">			<span class="icon <?php echo implode(' ', $forum_page['item_status']) ?>"><!-- --></span>			<div class="item-subject">				<?php echo implode("\n\t\t\t\t", $forum_page['item_body']['subject'])."\n" ?>			</div>			<ul class="item-info">				<?php echo implode("\n\t\t\t\t", $forum_page['item_body']['info'])."\n" ?>			</ul>		</div><?php}// Did we output any categories and forums?if ($forum_page['cur_category'] > 0){?>	</div><?php}else{?>	<div class="main-head">		<h2 class="hn"><span><?php echo $lang_common['Forum message']?></span></h2>	</div>	<div class="main-content main-message">		<p><?php echo $lang_index['Empty board'] ?></p>	</div><?php}($hook = get_hook('in_end')) ? eval($hook) : null;$tpl_temp = forum_trim(ob_get_contents());$tpl_main = str_replace('<!-- forum_main -->', $tpl_temp, $tpl_main);ob_end_clean();// END SUBST - <!-- forum_main -->// START SUBST - <!-- forum_info -->ob_start();($hook = get_hook('in_info_output_start')) ? eval($hook) : null;if (file_exists(FORUM_CACHE_DIR.'cache_stats.php'))	include FORUM_CACHE_DIR.'cache_stats.php';// Regenerate cache only if the cache is more than 30 minutes oldif (!defined('FORUM_STATS_LOADED') || $forum_stats['cached'] < (time() - 1800)){	if (!defined('FORUM_CACHE_FUNCTIONS_LOADED'))		require FORUM_ROOT.'include/cache.php';	generate_stats_cache();	require FORUM_CACHE_DIR.'cache_stats.php';}$stats_list['no_of_users'] = '<li class="st-users"><span>'.sprintf($lang_index['No of users'], '<strong>'.forum_number_format($forum_stats['total_users']).'</strong>').'</span></li>';$stats_list['newest_user'] = '<li class="st-users"><span>'.sprintf($lang_index['Newest user'], '<strong>'.($forum_user['g_view_users'] == '1' ? '<a href="'.forum_link($forum_url['user'], $forum_stats['last_user']['id']).'">'.forum_htmlencode($forum_stats['last_user']['username']).'</a>' : forum_htmlencode($forum_stats['last_user']['username'])).'</strong>').'</span></li>';$stats_list['no_of_topics'] = '<li class="st-activity"><span>'.sprintf($lang_index['No of topics'], '<strong>'.forum_number_format($forum_stats['total_topics']).'</strong>').'</span></li>';$stats_list['no_of_posts'] = '<li class="st-activity"><span>'.sprintf($lang_index['No of posts'], '<strong>'.forum_number_format($forum_stats['total_posts']).'</strong>').'</span></li>';($hook = get_hook('in_stats_pre_info_output')) ? eval($hook) : null;?><div id="brd-stats" class="gen-content">	<h2 class="hn"><span><?php echo $lang_index['Statistics'] ?></span></h2>	<ul>		<?php echo implode("\n\t\t", $stats_list)."\n" ?>	</ul></div><?php($hook = get_hook('in_stats_end')) ? eval($hook) : null;($hook = get_hook('in_users_online_start')) ? eval($hook) : null;if ($forum_config['o_users_online'] == '1'){	// Fetch users online info and generate strings for output	$query = array(		'SELECT'	=> 'o.user_id, o.ident',		'FROM'		=> 'online AS o',		'WHERE'		=> 'o.idle=0',		'ORDER BY'	=> 'o.ident'	);	($hook = get_hook('in_users_online_qr_get_online_info')) ? eval($hook) : null;	$result = $forum_db->query_build($query) or error(__FILE__, __LINE__);	$forum_page['num_guests'] = $forum_page['num_users'] = 0;	$users = array();	while ($forum_user_online = $forum_db->fetch_assoc($result))	{		($hook = get_hook('in_users_online_add_online_user_loop')) ? eval($hook) : null;		if ($forum_user_online['user_id'] > 1)		{			$users[] = ($forum_user['g_view_users'] == '1') ? '<a href="'.forum_link($forum_url['user'], $forum_user_online['user_id']).'">'.forum_htmlencode($forum_user_online['ident']).'</a>' : forum_htmlencode($forum_user_online['ident']);			++$forum_page['num_users'];		}		else			++$forum_page['num_guests'];	}	$forum_page['online_info'] = array();	$forum_page['online_info']['guests'] = ($forum_page['num_guests'] == 0) ? $lang_index['Guests none'] : sprintf((($forum_page['num_guests'] == 1) ? $lang_index['Guests single'] : $lang_index['Guests plural']), forum_number_format($forum_page['num_guests']));	$forum_page['online_info']['users'] = ($forum_page['num_users'] == 0) ? $lang_index['Users none'] : sprintf((($forum_page['num_users'] == 1) ? $lang_index['Users single'] : $lang_index['Users plural']), forum_number_format($forum_page['num_users']));	($hook = get_hook('in_users_online_pre_online_info_output')) ? eval($hook) : null;?><div id="brd-online" class="gen-content">	<h3 class="hn"><span><?php printf($lang_index['Currently online'], implode($lang_index['Online stats separator'], $forum_page['online_info'])) ?></span></h3><?php if (!empty($users)): ?>	<p><?php echo implode($lang_index['Online list separator'], $users) ?></p><?php endif; ($hook = get_hook('in_new_online_data')) ? eval($hook) : null; ?></div><?php	($hook = get_hook('in_users_online_end')) ? eval($hook) : null;}($hook = get_hook('in_info_end')) ? eval($hook) : null;$tpl_temp = forum_trim(ob_get_contents());$tpl_main = str_replace('<!-- forum_info -->', $tpl_temp, $tpl_main);ob_end_clean();// END SUBST - <!-- forum_info -->require FORUM_ROOT.'footer.php';
<?php/*** @version $Id: unicode.php,v 1.2 2006/02/26 13:20:44 harryf Exp $* Tools for conversion between UTF-8 and unicode* The Original Code is Mozilla Communicator client code.* The Initial Developer of the Original Code is* Netscape Communications Corporation.* Portions created by the Initial Developer are Copyright (C) 1998* the Initial Developer. All Rights Reserved.* Ported to PHP by Henri Sivonen (http://hsivonen.iki.fi)* Slight modifications to fit with phputf8 library by Harry Fuecks (hfuecks gmail com)* @see http://lxr.mozilla.org/seamonkey/source/intl/uconv/src/nsUTF8ToUnicode.cpp* @see http://lxr.mozilla.org/seamonkey/source/intl/uconv/src/nsUnicodeToUTF8.cpp* @see http://hsivonen.iki.fi/php-utf8/* @package utf8* @subpackage unicode*///--------------------------------------------------------------------/*** Takes an UTF-8 string and returns an array of ints representing the * Unicode characters. Astral planes are supported ie. the ints in the* output can be > 0xFFFF. Occurrances of the BOM are ignored. Surrogates* are not allowed.* Returns false if the input string isn't a valid UTF-8 octet sequence* and raises a PHP error at level E_USER_WARNING* Note: this function has been modified slightly in this library to* trigger errors on encountering bad bytes* @author <hsivonen@iki.fi>* @param string UTF-8 encoded string* @return mixed array of unicode code points or FALSE if UTF-8 invalid* @see utf8_from_unicode* @see http://hsivonen.iki.fi/php-utf8/* @package utf8* @subpackage unicode*/function utf8_to_unicode($str) {    $mState = 0;     // cached expected number of octets after the current octet                     // until the beginning of the next UTF8 character sequence    $mUcs4  = 0;     // cached Unicode character    $mBytes = 1;     // cached expected number of octets in the current sequence    $out = array();    $len = strlen($str);    for($i = 0; $i < $len; $i++) {        $in = ord($str{$i});        if ( $mState == 0) {            // When mState is zero we expect either a US-ASCII character or a            // multi-octet sequence.            if (0 == (0x80 & ($in))) {                // US-ASCII, pass straight through.                $out[] = $in;                $mBytes = 1;            } else if (0xC0 == (0xE0 & ($in))) {                // First octet of 2 octet sequence                $mUcs4 = ($in);                $mUcs4 = ($mUcs4 & 0x1F) << 6;                $mState = 1;                $mBytes = 2;            } else if (0xE0 == (0xF0 & ($in))) {                // First octet of 3 octet sequence                $mUcs4 = ($in);                $mUcs4 = ($mUcs4 & 0x0F) << 12;                $mState = 2;                $mBytes = 3;            } else if (0xF0 == (0xF8 & ($in))) {                // First octet of 4 octet sequence                $mUcs4 = ($in);                $mUcs4 = ($mUcs4 & 0x07) << 18;                $mState = 3;                $mBytes = 4;            } else if (0xF8 == (0xFC & ($in))) {                /* First octet of 5 octet sequence.                *                * This is illegal because the encoded codepoint must be either                * (a) not the shortest form or                * (b) outside the Unicode range of 0-0x10FFFF.                * Rather than trying to resynchronize, we will carry on until the end                * of the sequence and let the later error handling code catch it.                */                $mUcs4 = ($in);                $mUcs4 = ($mUcs4 & 0x03) << 24;                $mState = 4;                $mBytes = 5;            } else if (0xFC == (0xFE & ($in))) {                // First octet of 6 octet sequence, see comments for 5 octet sequence.                $mUcs4 = ($in);                $mUcs4 = ($mUcs4 & 1) << 30;                $mState = 5;                $mBytes = 6;            } else {                /* Current octet is neither in the US-ASCII range nor a legal first                 * octet of a multi-octet sequence.                 */                trigger_error(                        'utf8_to_unicode: Illegal sequence identifier '.                            'in UTF-8 at byte '.$i,                        E_USER_WARNING                    );                return FALSE;            }        } else {            // When mState is non-zero, we expect a continuation of the multi-octet            // sequence            if (0x80 == (0xC0 & ($in))) {                // Legal continuation.                $shift = ($mState - 1) * 6;                $tmp = $in;                $tmp = ($tmp & 0x0000003F) << $shift;                $mUcs4 |= $tmp;                /**                * End of the multi-octet sequence. mUcs4 now contains the final                * Unicode codepoint to be output                */                if (0 == --$mState) {                    /*                    * Check for illegal sequences and codepoints.                    */                    // From Unicode 3.1, non-shortest form is illegal                    if (((2 == $mBytes) && ($mUcs4 < 0x0080)) ||                        ((3 == $mBytes) && ($mUcs4 < 0x0800)) ||                        ((4 == $mBytes) && ($mUcs4 < 0x10000)) ||                        (4 < $mBytes) ||                        // From Unicode 3.2, surrogate characters are illegal                        (($mUcs4 & 0xFFFFF800) == 0xD800) ||                        // Codepoints outside the Unicode range are illegal                        ($mUcs4 > 0x10FFFF)) {                        trigger_error(                                'utf8_to_unicode: Illegal sequence or codepoint '.                                    'in UTF-8 at byte '.$i,                                E_USER_WARNING                            );                        return FALSE;                    }                    if (0xFEFF != $mUcs4) {                        // BOM is legal but we don't want to output it                        $out[] = $mUcs4;                    }                    //initialize UTF8 cache                    $mState = 0;                    $mUcs4  = 0;                    $mBytes = 1;                }            } else {                /**                *((0xC0 & (*in) != 0x80) && (mState != 0))                * Incomplete multi-octet sequence.                */                trigger_error(                        'utf8_to_unicode: Incomplete multi-octet '.                        '   sequence in UTF-8 at byte '.$i,                        E_USER_WARNING                    );                return FALSE;            }        }    }    return $out;}//--------------------------------------------------------------------/*** Takes an array of ints representing the Unicode characters and returns * a UTF-8 string. Astral planes are supported ie. the ints in the* input can be > 0xFFFF. Occurrances of the BOM are ignored. Surrogates* are not allowed.* Returns false if the input array contains ints that represent * surrogates or are outside the Unicode range* and raises a PHP error at level E_USER_WARNING* Note: this function has been modified slightly in this library to use* output buffering to concatenate the UTF-8 string (faster) as well as* reference the array by it's keys* @param array of unicode code points representing a string* @return mixed UTF-8 string or FALSE if array contains invalid code points* @author <hsivonen@iki.fi>* @see utf8_to_unicode* @see http://hsivonen.iki.fi/php-utf8/* @package utf8* @subpackage unicode*/function utf8_from_unicode($arr) {    ob_start();    foreach (array_keys($arr) as $k) {        # ASCII range (including control chars)        if ( ($arr[$k] >= 0) && ($arr[$k] <= 0x007f) ) {            echo chr($arr[$k]);        # 2 byte sequence        } else if ($arr[$k] <= 0x07ff) {            echo chr(0xc0 | ($arr[$k] >> 6));            echo chr(0x80 | ($arr[$k] & 0x003f));        # Byte order mark (skip)        } else if($arr[$k] == 0xFEFF) {            // nop -- zap the BOM        # Test for illegal surrogates        } else if ($arr[$k] >= 0xD800 && $arr[$k] <= 0xDFFF) {            // found a surrogate            trigger_error(                'utf8_from_unicode: Illegal surrogate '.                    'at index: '.$k.', value: '.$arr[$k],                E_USER_WARNING                );            return FALSE;        # 3 byte sequence        } else if ($arr[$k] <= 0xffff) {            echo chr(0xe0 | ($arr[$k] >> 12));            echo chr(0x80 | (($arr[$k] >> 6) & 0x003f));            echo chr(0x80 | ($arr[$k] & 0x003f));        # 4 byte sequence        } else if ($arr[$k] <= 0x10ffff) {            echo chr(0xf0 | ($arr[$k] >> 18));            echo chr(0x80 | (($arr[$k] >> 12) & 0x3f));            echo chr(0x80 | (($arr[$k] >> 6) & 0x3f));            echo chr(0x80 | ($arr[$k] & 0x3f));        } else {            trigger_error(                'utf8_from_unicode: Codepoint out of Unicode range '.                    'at index: '.$k.', value: '.$arr[$k],                E_USER_WARNING                );            // out of range            return FALSE;        }    }    $result = ob_get_contents();    ob_end_clean();    return $result;}
<?php/*** @version $Id: strcspn.php,v 1.1 2006/02/25 13:50:17 harryf Exp $* @package utf8* @subpackage strings*///---------------------------------------------------------------/*** UTF-8 aware alternative to strcspn* Find length of initial segment not matching mask* Note: requires utf8_strlen and utf8_substr (if start, length are used)* @param string* @return int* @see http://www.php.net/strcspn* @see utf8_strlen* @package utf8* @subpackage strings*/function utf8_strcspn($str, $mask, $start = NULL, $length = NULL) {    if ( empty($mask) || strlen($mask) == 0 ) {        return NULL;    }    $mask = preg_replace('!([\\\\\\-\\]\\[/^])!','\\\${1}',$mask);    if ( $start !== NULL || $length !== NULL ) {        $str = utf8_substr($str, $start, $length);    }    preg_match('/^[^'.$mask.']+/u',$str, $matches);    if ( isset($matches[0]) ) {        return utf8_strlen($matches[0]);    }    return 0;}
<?php// {{{ license/* vim: set expandtab tabstop=4 shiftwidth=4 softtabstop=4 foldmethod=marker: *///// +----------------------------------------------------------------------+// | This library is free software; you can redistribute it and/or modify |// | it under the terms of the GNU Lesser General Public License as       |// | published by the Free Software Foundation; either version 2.1 of the |// | License, or (at your option) any later version.                      |// |                                                                      |// | This library is distributed in the hope that it will be useful, but  |// | WITHOUT ANY WARRANTY; without even the implied warranty of           |// | MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU    |// | Lesser General Public License for more details.                      |// |                                                                      |// | You should have received a copy of the GNU Lesser General Public     |// | License along with this library; if not, write to the Free Software  |// | Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307 |// | USA.                                                                 |// +----------------------------------------------------------------------+//// }}}/** * Encode/decode Internationalized Domain Names. * * The class allows to convert internationalized domain names * (see RFC 3490 for details) as they can be used with various registries worldwide * to be translated between their original (localized) form and their encoded form * as it will be used in the DNS (Domain Name System). * * The class provides two public methods, encode() and decode(), which do exactly * what you would expect them to do. You are allowed to use complete domain names, * simple strings and complete email addresses as well. That means, that you might * use any of the following notations: * * - www.nrgler.com * - xn--nrgler-wxa * - xn--brse-5qa.xn--knrz-1ra.info * * Unicode input might be given as either UTF-8 string, UCS-4 string or UCS-4 array. * Unicode output is available in the same formats. * You can select your preferred format via {@link set_paramter()}. * * ACE input and output is always expected to be ASCII. * * @author  Matthias Sommerfeld <mso@phlylabs.de> * @copyright 2004-2011 phlyLabs Berlin, http://phlylabs.de * @version 0.8.0 2011-03-11 */class idna_convert{    // NP See below    // Internal settings, do not mess with them    protected $_punycode_prefix = 'xn--';    protected $_invalid_ucs = 0x80000000;    protected $_max_ucs = 0x10FFFF;    protected $_base = 36;    protected $_tmin = 1;    protected $_tmax = 26;    protected $_skew = 38;    protected $_damp = 700;    protected $_initial_bias = 72;    protected $_initial_n = 0x80;    protected $_sbase = 0xAC00;    protected $_lbase = 0x1100;    protected $_vbase = 0x1161;    protected $_tbase = 0x11A7;    protected $_lcount = 19;    protected $_vcount = 21;    protected $_tcount = 28;    protected $_ncount = 588;   // _vcount * _tcount    protected $_scount = 11172; // _lcount * _tcount * _vcount    protected $_error = false;    protected static $_mb_string_overload = null;    // See {@link set_paramter()} for details of how to change the following    // settings from within your script / application    protected $_api_encoding = 'utf8';   // Default input charset is UTF-8    protected $_allow_overlong = false;  // Overlong UTF-8 encodings are forbidden    protected $_strict_mode = false;     // Behave strict or not    protected $_idn_version = 2003;      // Can be either 2003 (old, default) or 2008    /**     * the constructor     *     * @param array $options     * @return boolean     * @since 0.5.2     */    public function __construct($options = false)    {        $this->slast = $this->_sbase + $this->_lcount * $this->_vcount * $this->_tcount;        // If parameters are given, pass these to the respective method        if (is_array($options)) {            $this->set_parameter($options);        }        // populate mbstring overloading cache if not set        if (self::$_mb_string_overload === null) {            self::$_mb_string_overload = (extension_loaded('mbstring')                && (ini_get('mbstring.func_overload') & 0x02) === 0x02);        }    }    /**     * Sets a new option value. Available options and values:     * [encoding - Use either UTF-8, UCS4 as array or UCS4 as string as input ('utf8' for UTF-8,     *         'ucs4_string' and 'ucs4_array' respectively for UCS4); The output is always UTF-8]     * [overlong - Unicode does not allow unnecessarily long encodings of chars,     *             to allow this, set this parameter to true, else to false;     *             default is false.]     * [strict - true: strict mode, good for registration purposes - Causes errors     *           on failures; false: loose mode, ideal for "wildlife" applications     *           by silently ignoring errors and returning the original input instead     *     * @param    mixed     Parameter to set (string: single parameter; array of Parameter => Value pairs)     * @param    string    Value to use (if parameter 1 is a string)     * @return   boolean   true on success, false otherwise     */    public function set_parameter($option, $value = false)    {        if (!is_array($option)) {            $option = array($option => $value);        }        foreach ($option as $k => $v) {            switch ($k) {            case 'encoding':                switch ($v) {                case 'utf8':                case 'ucs4_string':                case 'ucs4_array':                    $this->_api_encoding = $v;                    break;                default:                    $this->_error('Set Parameter: Unknown parameter '.$v.' for option '.$k);                    return false;                }                break;            case 'overlong':                $this->_allow_overlong = ($v) ? true : false;                break;            case 'strict':                $this->_strict_mode = ($v) ? true : false;                break;            case 'idn_version':                if (in_array($v, array('2003', '2008'))) {                    $this->_idn_version = $v;                } else {                    $this->_error('Set Parameter: Unknown parameter '.$v.' for option '.$k);                }                break;            case 'encode_german_sz': // Deprecated                if (!$v) {                    self::$NP['replacemaps'][0xDF] = array(0x73, 0x73);                } else {                    unset(self::$NP['replacemaps'][0xDF]);                }                break;            default:                $this->_error('Set Parameter: Unknown option '.$k);                return false;            }        }        return true;    }    /**     * Decode a given ACE domain name     * @param    string   Domain name (ACE string)     * [@param    string   Desired output encoding, see {@link set_parameter}]     * @return   string   Decoded Domain name (UTF-8 or UCS-4)     */    public function decode($input, $one_time_encoding = false)    {        // Optionally set        if ($one_time_encoding) {            switch ($one_time_encoding) {            case 'utf8':            case 'ucs4_string':            case 'ucs4_array':                break;            default:                $this->_error('Unknown encoding '.$one_time_encoding);                return false;            }        }        // Make sure to drop any newline characters around        $input = trim($input);        // Negotiate input and try to determine, whether it is a plain string,        // an email address or something like a complete URL        if (strpos($input, '@')) { // Maybe it is an email address            // No no in strict mode            if ($this->_strict_mode) {                $this->_error('Only simple domain name parts can be handled in strict mode');                return false;            }            list ($email_pref, $input) = explode('@', $input, 2);            $arr = explode('.', $input);            foreach ($arr as $k => $v) {                if (preg_match('!^'.preg_quote($this->_punycode_prefix, '!').'!', $v)) {                    $conv = $this->_decode($v);                    if ($conv) $arr[$k] = $conv;                }            }            $input = join('.', $arr);            $arr = explode('.', $email_pref);            foreach ($arr as $k => $v) {                if (preg_match('!^'.preg_quote($this->_punycode_prefix, '!').'!', $v)) {                    $conv = $this->_decode($v);                    if ($conv) $arr[$k] = $conv;                }            }            $email_pref = join('.', $arr);            $return = $email_pref . '@' . $input;        } elseif (preg_match('![:\./]!', $input)) { // Or a complete domain name (with or without paths / parameters)            // No no in strict mode            if ($this->_strict_mode) {                $this->_error('Only simple domain name parts can be handled in strict mode');                return false;            }            $parsed = parse_url($input);            if (isset($parsed['host'])) {                $arr = explode('.', $parsed['host']);                foreach ($arr as $k => $v) {                    $conv = $this->_decode($v);                    if ($conv) $arr[$k] = $conv;                }                $parsed['host'] = join('.', $arr);                $return =                        (empty($parsed['scheme']) ? '' : $parsed['scheme'].(strtolower($parsed['scheme']) == 'mailto' ? ':' : '://'))                        .(empty($parsed['user']) ? '' : $parsed['user'].(empty($parsed['pass']) ? '' : ':'.$parsed['pass']).'@')                        .$parsed['host']                        .(empty($parsed['port']) ? '' : ':'.$parsed['port'])                        .(empty($parsed['path']) ? '' : $parsed['path'])                        .(empty($parsed['query']) ? '' : '?'.$parsed['query'])                        .(empty($parsed['fragment']) ? '' : '#'.$parsed['fragment']);            } else { // parse_url seems to have failed, try without it                $arr = explode('.', $input);                foreach ($arr as $k => $v) {                    $conv = $this->_decode($v);                    $arr[$k] = ($conv) ? $conv : $v;                }                $return = join('.', $arr);            }        } else { // Otherwise we consider it being a pure domain name string            $return = $this->_decode($input);            if (!$return) $return = $input;        }        // The output is UTF-8 by default, other output formats need conversion here        // If one time encoding is given, use this, else the objects property        switch (($one_time_encoding) ? $one_time_encoding : $this->_api_encoding) {        case 'utf8':            return $return;            break;        case 'ucs4_string':           return $this->_ucs4_to_ucs4_string($this->_utf8_to_ucs4($return));           break;        case 'ucs4_array':            return $this->_utf8_to_ucs4($return);            break;        default:            $this->_error('Unsupported output format');            return false;        }    }    /**     * Encode a given UTF-8 domain name     * @param    string   Domain name (UTF-8 or UCS-4)     * [@param    string   Desired input encoding, see {@link set_parameter}]     * @return   string   Encoded Domain name (ACE string)     */    public function encode($decoded, $one_time_encoding = false)    {        // Forcing conversion of input to UCS4 array        // If one time encoding is given, use this, else the objects property        switch ($one_time_encoding ? $one_time_encoding : $this->_api_encoding) {        case 'utf8':            $decoded = $this->_utf8_to_ucs4($decoded);            break;        case 'ucs4_string':           $decoded = $this->_ucs4_string_to_ucs4($decoded);        case 'ucs4_array':           break;        default:            $this->_error('Unsupported input format: '.($one_time_encoding ? $one_time_encoding : $this->_api_encoding));            return false;        }        // No input, no output, what else did you expect?        if (empty($decoded)) return '';        // Anchors for iteration        $last_begin = 0;        // Output string        $output = '';        foreach ($decoded as $k => $v) {            // Make sure to use just the plain dot            switch($v) {            case 0x3002:            case 0xFF0E:            case 0xFF61:                $decoded[$k] = 0x2E;                // Right, no break here, the above are converted to dots anyway            // Stumbling across an anchoring character            case 0x2E:            case 0x2F:            case 0x3A:            case 0x3F:            case 0x40:                // Neither email addresses nor URLs allowed in strict mode                if ($this->_strict_mode) {                   $this->_error('Neither email addresses nor URLs are allowed in strict mode.');                   return false;                } else {                    // Skip first char                    if ($k) {                        $encoded = '';                        $encoded = $this->_encode(array_slice($decoded, $last_begin, (($k)-$last_begin)));                        if ($encoded) {                            $output .= $encoded;                        } else {                            $output .= $this->_ucs4_to_utf8(array_slice($decoded, $last_begin, (($k)-$last_begin)));                        }                        $output .= chr($decoded[$k]);                    }                    $last_begin = $k + 1;                }            }        }        // Catch the rest of the string        if ($last_begin) {            $inp_len = sizeof($decoded);            $encoded = '';            $encoded = $this->_encode(array_slice($decoded, $last_begin, (($inp_len)-$last_begin)));            if ($encoded) {                $output .= $encoded;            } else {                $output .= $this->_ucs4_to_utf8(array_slice($decoded, $last_begin, (($inp_len)-$last_begin)));            }            return $output;        } else {            if ($output = $this->_encode($decoded)) {                return $output;            } else {                return $this->_ucs4_to_utf8($decoded);            }        }    }    /**     * Removes a weakness of encode(), which cannot properly handle URIs but instead encodes their     * path or query components, too.     * @param string  $uri  Expects the URI as a UTF-8 (or ASCII) string     * @return  string  The URI encoded to Punycode, everything but the host component is left alone     * @since 0.6.4     */    public function encode_uri($uri)    {        $parsed = parse_url($uri);        if (!isset($parsed['host'])) {            $this->_error('The given string does not look like a URI');            return false;        }        $arr = explode('.', $parsed['host']);        foreach ($arr as $k => $v) {            $conv = $this->encode($v, 'utf8');            if ($conv) $arr[$k] = $conv;        }        $parsed['host'] = join('.', $arr);        $return =                (empty($parsed['scheme']) ? '' : $parsed['scheme'].(strtolower($parsed['scheme']) == 'mailto' ? ':' : '://'))                .(empty($parsed['user']) ? '' : $parsed['user'].(empty($parsed['pass']) ? '' : ':'.$parsed['pass']).'@')                .$parsed['host']                .(empty($parsed['port']) ? '' : ':'.$parsed['port'])                .(empty($parsed['path']) ? '' : $parsed['path'])                .(empty($parsed['query']) ? '' : '?'.$parsed['query'])                .(empty($parsed['fragment']) ? '' : '#'.$parsed['fragment']);        return $return;    }    /**     * Use this method to get the last error ocurred     * @param    void     * @return   string   The last error, that occured     */    public function get_last_error()    {        return $this->_error;    }    /**     * The actual decoding algorithm     * @param string     * @return mixed     */    protected function _decode($encoded)    {        $decoded = array();        // find the Punycode prefix        if (!preg_match('!^'.preg_quote($this->_punycode_prefix, '!').'!', $encoded)) {            $this->_error('This is not a punycode string');            return false;        }        $encode_test = preg_replace('!^'.preg_quote($this->_punycode_prefix, '!').'!', '', $encoded);        // If nothing left after removing the prefix, it is hopeless        if (!$encode_test) {            $this->_error('The given encoded string was empty');            return false;        }        // Find last occurence of the delimiter        $delim_pos = strrpos($encoded, '-');        if ($delim_pos > self::byteLength($this->_punycode_prefix)) {            for ($k = self::byteLength($this->_punycode_prefix); $k < $delim_pos; ++$k) {                $decoded[] = ord($encoded{$k});            }        }        $deco_len = count($decoded);        $enco_len = self::byteLength($encoded);        // Wandering through the strings; init        $is_first = true;        $bias = $this->_initial_bias;        $idx = 0;        $char = $this->_initial_n;        for ($enco_idx = ($delim_pos) ? ($delim_pos + 1) : 0; $enco_idx < $enco_len; ++$deco_len) {            for ($old_idx = $idx, $w = 1, $k = $this->_base; 1 ; $k += $this->_base) {                $digit = $this->_decode_digit($encoded{$enco_idx++});                $idx += $digit * $w;                $t = ($k <= $bias) ? $this->_tmin :                        (($k >= $bias + $this->_tmax) ? $this->_tmax : ($k - $bias));                if ($digit < $t) break;                $w = (int) ($w * ($this->_base - $t));            }            $bias = $this->_adapt($idx - $old_idx, $deco_len + 1, $is_first);            $is_first = false;            $char += (int) ($idx / ($deco_len + 1));            $idx %= ($deco_len + 1);            if ($deco_len > 0) {                // Make room for the decoded char                for ($i = $deco_len; $i > $idx; $i--) $decoded[$i] = $decoded[($i - 1)];            }            $decoded[$idx++] = $char;        }        return $this->_ucs4_to_utf8($decoded);    }    /**     * The actual encoding algorithm     * @param  string     * @return mixed     */    protected function _encode($decoded)    {        // We cannot encode a domain name containing the Punycode prefix        $extract = self::byteLength($this->_punycode_prefix);        $check_pref = $this->_utf8_to_ucs4($this->_punycode_prefix);        $check_deco = array_slice($decoded, 0, $extract);        if ($check_pref == $check_deco) {            $this->_error('This is already a punycode string');            return false;        }        // We will not try to encode strings consisting of basic code points only        $encodable = false;        foreach ($decoded as $k => $v) {            if ($v > 0x7a) {                $encodable = true;                break;            }        }        if (!$encodable) {            $this->_error('The given string does not contain encodable chars');            return false;        }        // Do NAMEPREP        $decoded = $this->_nameprep($decoded);        if (!$decoded || !is_array($decoded)) return false; // NAMEPREP failed        $deco_len  = count($decoded);        if (!$deco_len) return false; // Empty array        $codecount = 0; // How many chars have been consumed        $encoded = '';        // Copy all basic code points to output        for ($i = 0; $i < $deco_len; ++$i) {            $test = $decoded[$i];            // Will match [-0-9a-zA-Z]            if ((0x2F < $test && $test < 0x40) || (0x40 < $test && $test < 0x5B)                    || (0x60 < $test && $test <= 0x7B) || (0x2D == $test)) {                $encoded .= chr($decoded[$i]);                $codecount++;            }        }        if ($codecount == $deco_len) return $encoded; // All codepoints were basic ones        // Start with the prefix; copy it to output        $encoded = $this->_punycode_prefix.$encoded;        // If we have basic code points in output, add an hyphen to the end        if ($codecount) $encoded .= '-';        // Now find and encode all non-basic code points        $is_first = true;        $cur_code = $this->_initial_n;        $bias = $this->_initial_bias;        $delta = 0;        while ($codecount < $deco_len) {            // Find the smallest code point >= the current code point and            // remember the last ouccrence of it in the input            for ($i = 0, $next_code = $this->_max_ucs; $i < $deco_len; $i++) {                if ($decoded[$i] >= $cur_code && $decoded[$i] <= $next_code) {                    $next_code = $decoded[$i];                }            }            $delta += ($next_code - $cur_code) * ($codecount + 1);            $cur_code = $next_code;            // Scan input again and encode all characters whose code point is $cur_code            for ($i = 0; $i < $deco_len; $i++) {                if ($decoded[$i] < $cur_code) {                    $delta++;                } elseif ($decoded[$i] == $cur_code) {                    for ($q = $delta, $k = $this->_base; 1; $k += $this->_base) {                        $t = ($k <= $bias) ? $this->_tmin :                                (($k >= $bias + $this->_tmax) ? $this->_tmax : $k - $bias);                        if ($q < $t) break;                        $encoded .= $this->_encode_digit(intval($t + (($q - $t) % ($this->_base - $t)))); //v0.4.5 Changed from ceil() to intval()                        $q = (int) (($q - $t) / ($this->_base - $t));                    }                    $encoded .= $this->_encode_digit($q);                    $bias = $this->_adapt($delta, $codecount+1, $is_first);                    $codecount++;                    $delta = 0;                    $is_first = false;                }            }            $delta++;            $cur_code++;        }        return $encoded;    }    /**     * Adapt the bias according to the current code point and position     * @param int $delta     * @param int $npoints     * @param int $is_first     * @return int     */    protected function _adapt($delta, $npoints, $is_first)    {        $delta = intval($is_first ? ($delta / $this->_damp) : ($delta / 2));        $delta += intval($delta / $npoints);        for ($k = 0; $delta > (($this->_base - $this->_tmin) * $this->_tmax) / 2; $k += $this->_base) {            $delta = intval($delta / ($this->_base - $this->_tmin));        }        return intval($k + ($this->_base - $this->_tmin + 1) * $delta / ($delta + $this->_skew));    }    /**     * Encoding a certain digit     * @param    int $d     * @return string     */    protected function _encode_digit($d)    {        return chr($d + 22 + 75 * ($d < 26));    }    /**     * Decode a certain digit     * @param    int $cp     * @return int     */    protected function _decode_digit($cp)    {        $cp = ord($cp);        return ($cp - 48 < 10) ? $cp - 22 : (($cp - 65 < 26) ? $cp - 65 : (($cp - 97 < 26) ? $cp - 97 : $this->_base));    }    /**     * Internal error handling method     * @param  string $error     */    protected function _error($error = '')    {        $this->_error = $error;    }    /**     * Do Nameprep according to RFC3491 and RFC3454     * @param    array    Unicode Characters     * @return   string   Unicode Characters, Nameprep'd     */    protected function _nameprep($input)    {        $output = array();        $error = false;        //        // Mapping        // Walking through the input array, performing the required steps on each of        // the input chars and putting the result into the output array        // While mapping required chars we apply the cannonical ordering        foreach ($input as $v) {            // Map to nothing == skip that code point            if (in_array($v, self::$NP['map_nothing'])) continue;            // Try to find prohibited input            if (in_array($v, self::$NP['prohibit']) || in_array($v, self::$NP['general_prohibited'])) {                $this->_error('NAMEPREP: Prohibited input U+'.sprintf('%08X', $v));                return false;            }            foreach (self::$NP['prohibit_ranges'] as $range) {                if ($range[0] <= $v && $v <= $range[1]) {                    $this->_error('NAMEPREP: Prohibited input U+'.sprintf('%08X', $v));                    return false;                }            }            if (0xAC00 <= $v && $v <= 0xD7AF) {                // Hangul syllable decomposition                foreach ($this->_hangul_decompose($v) as $out) {                    $output[] = (int) $out;                }            } elseif (($this->_idn_version == '2003') && isset(self::$NP['replacemaps'][$v])) {                // There's a decomposition mapping for that code point                // Decompositions only in version 2003 (original) of IDNA                foreach ($this->_apply_cannonical_ordering(self::$NP['replacemaps'][$v]) as $out) {                    $output[] = (int) $out;                }            } else {                $output[] = (int) $v;            }        }        // Before applying any Combining, try to rearrange any Hangul syllables        $output = $this->_hangul_compose($output);        //        // Combine code points        //        $last_class = 0;        $last_starter = 0;        $out_len = count($output);        for ($i = 0; $i < $out_len; ++$i) {            $class = $this->_get_combining_class($output[$i]);            if ((!$last_class || $last_class > $class) && $class) {                // Try to match                $seq_len = $i - $last_starter;                $out = $this->_combine(array_slice($output, $last_starter, $seq_len));                // On match: Replace the last starter with the composed character and remove                // the now redundant non-starter(s)                if ($out) {                    $output[$last_starter] = $out;                    if (count($out) != $seq_len) {                        for ($j = $i+1; $j < $out_len; ++$j) $output[$j-1] = $output[$j];                        unset($output[$out_len]);                    }                    // Rewind the for loop by one, since there can be more possible compositions                    $i--;                    $out_len--;                    $last_class = ($i == $last_starter) ? 0 : $this->_get_combining_class($output[$i-1]);                    continue;                }            }            // The current class is 0            if (!$class) $last_starter = $i;            $last_class = $class;        }        return $output;    }    /**     * Decomposes a Hangul syllable     * (see http://www.unicode.org/unicode/reports/tr15/#Hangul     * @param    integer  32bit UCS4 code point     * @return   array    Either Hangul Syllable decomposed or original 32bit value as one value array     */    protected function _hangul_decompose($char)    {        $sindex = (int) $char - $this->_sbase;        if ($sindex < 0 || $sindex >= $this->_scount) return array($char);        $result = array();        $result[] = (int) $this->_lbase + $sindex / $this->_ncount;        $result[] = (int) $this->_vbase + ($sindex % $this->_ncount) / $this->_tcount;        $T = intval($this->_tbase + $sindex % $this->_tcount);        if ($T != $this->_tbase) $result[] = $T;        return $result;    }    /**     * Ccomposes a Hangul syllable     * (see http://www.unicode.org/unicode/reports/tr15/#Hangul     * @param    array    Decomposed UCS4 sequence     * @return   array    UCS4 sequence with syllables composed     */    protected function _hangul_compose($input)    {        $inp_len = count($input);        if (!$inp_len) return array();        $result = array();        $last = (int) $input[0];        $result[] = $last; // copy first char from input to output        for ($i = 1; $i < $inp_len; ++$i) {            $char = (int) $input[$i];            $sindex = $last - $this->_sbase;            $lindex = $last - $this->_lbase;            $vindex = $char - $this->_vbase;            $tindex = $char - $this->_tbase;            // Find out, whether two current characters are LV and T            if (0 <= $sindex && $sindex < $this->_scount && ($sindex % $this->_tcount == 0)                    && 0 <= $tindex && $tindex <= $this->_tcount) {                // create syllable of form LVT                $last += $tindex;                $result[(count($result) - 1)] = $last; // reset last                continue; // discard char            }            // Find out, whether two current characters form L and V            if (0 <= $lindex && $lindex < $this->_lcount && 0 <= $vindex && $vindex < $this->_vcount) {                // create syllable of form LV                $last = (int) $this->_sbase + ($lindex * $this->_vcount + $vindex) * $this->_tcount;                $result[(count($result) - 1)] = $last; // reset last                continue; // discard char            }            // if neither case was true, just add the character            $last = $char;            $result[] = $char;        }        return $result;    }    /**     * Returns the combining class of a certain wide char     * @param    integer    Wide char to check (32bit integer)     * @return   integer    Combining class if found, else 0     */    protected function _get_combining_class($char)    {        return isset(self::$NP['norm_combcls'][$char]) ? self::$NP['norm_combcls'][$char] : 0;    }    /**     * Applies the cannonical ordering of a decomposed UCS4 sequence     * @param    array      Decomposed UCS4 sequence     * @return   array      Ordered USC4 sequence     */    protected function _apply_cannonical_ordering($input)    {        $swap = true;        $size = count($input);        while ($swap) {            $swap = false;            $last = $this->_get_combining_class(intval($input[0]));            for ($i = 0; $i < $size-1; ++$i) {                $next = $this->_get_combining_class(intval($input[$i+1]));                if ($next != 0 && $last > $next) {                    // Move item leftward until it fits                    for ($j = $i + 1; $j > 0; --$j) {                        if ($this->_get_combining_class(intval($input[$j-1])) <= $next) break;                        $t = intval($input[$j]);                        $input[$j] = intval($input[$j-1]);                        $input[$j-1] = $t;                        $swap = true;                    }                    // Reentering the loop looking at the old character again                    $next = $last;                }                $last = $next;            }        }        return $input;    }    /**     * Do composition of a sequence of starter and non-starter     * @param    array      UCS4 Decomposed sequence     * @return   array      Ordered USC4 sequence     */    protected function _combine($input)    {        $inp_len = count($input);        foreach (self::$NP['replacemaps'] as $np_src => $np_target) {            if ($np_target[0] != $input[0]) continue;            if (count($np_target) != $inp_len) continue;            $hit = false;            foreach ($input as $k2 => $v2) {                if ($v2 == $np_target[$k2]) {                    $hit = true;                } else {                    $hit = false;                    break;                }            }            if ($hit) return $np_src;        }        return false;    }    /**     * This converts an UTF-8 encoded string to its UCS-4 representation     * By talking about UCS-4 "strings" we mean arrays of 32bit integers representing     * each of the "chars". This is due to PHP not being able to handle strings with     * bit depth different from 8. This apllies to the reverse method _ucs4_to_utf8(), too.     * The following UTF-8 encodings are supported:     * bytes bits  representation     * 1        7  0xxxxxxx     * 2       11  110xxxxx 10xxxxxx     * 3       16  1110xxxx 10xxxxxx 10xxxxxx     * 4       21  11110xxx 10xxxxxx 10xxxxxx 10xxxxxx     * 5       26  111110xx 10xxxxxx 10xxxxxx 10xxxxxx 10xxxxxx     * 6       31  1111110x 10xxxxxx 10xxxxxx 10xxxxxx 10xxxxxx 10xxxxxx     * Each x represents a bit that can be used to store character data.     * The five and six byte sequences are part of Annex D of ISO/IEC 10646-1:2000     * @param string $input     * @return string     */    protected function _utf8_to_ucs4($input)    {        $output = array();        $out_len = 0;        $inp_len = self::byteLength($input);        $mode = 'next';        $test = 'none';        for ($k = 0; $k < $inp_len; ++$k) {            $v = ord($input{$k}); // Extract byte from input string            if ($v < 128) { // We found an ASCII char - put into stirng as is                $output[$out_len] = $v;                ++$out_len;                if ('add' == $mode) {                    $this->_error('Conversion from UTF-8 to UCS-4 failed: malformed input at byte '.$k);                    return false;                }                continue;            }            if ('next' == $mode) { // Try to find the next start byte; determine the width of the Unicode char                $start_byte = $v;                $mode = 'add';                $test = 'range';                if ($v >> 5 == 6) { // &110xxxxx 10xxxxx                    $next_byte = 0; // Tells, how many times subsequent bitmasks must rotate 6bits to the left                    $v = ($v - 192) << 6;                } elseif ($v >> 4 == 14) { // &1110xxxx 10xxxxxx 10xxxxxx                    $next_byte = 1;                    $v = ($v - 224) << 12;                } elseif ($v >> 3 == 30) { // &11110xxx 10xxxxxx 10xxxxxx 10xxxxxx                    $next_byte = 2;                    $v = ($v - 240) << 18;                } elseif ($v >> 2 == 62) { // &111110xx 10xxxxxx 10xxxxxx 10xxxxxx 10xxxxxx                    $next_byte = 3;                    $v = ($v - 248) << 24;                } elseif ($v >> 1 == 126) { // &1111110x 10xxxxxx 10xxxxxx 10xxxxxx 10xxxxxx 10xxxxxx                    $next_byte = 4;                    $v = ($v - 252) << 30;                } else {                    $this->_error('This might be UTF-8, but I don\'t understand it at byte '.$k);                    return false;                }                if ('add' == $mode) {                    $output[$out_len] = (int) $v;                    ++$out_len;                    continue;                }            }            if ('add' == $mode) {                if (!$this->_allow_overlong && $test == 'range') {                    $test = 'none';                    if (($v < 0xA0 && $start_byte == 0xE0) || ($v < 0x90 && $start_byte == 0xF0) || ($v > 0x8F && $start_byte == 0xF4)) {                        $this->_error('Bogus UTF-8 character detected (out of legal range) at byte '.$k);                        return false;                    }                }                if ($v >> 6 == 2) { // Bit mask must be 10xxxxxx                    $v = ($v - 128) << ($next_byte * 6);                    $output[($out_len - 1)] += $v;                    --$next_byte;                } else {                    $this->_error('Conversion from UTF-8 to UCS-4 failed: malformed input at byte '.$k);                    return false;                }                if ($next_byte < 0) {                    $mode = 'next';                }            }        } // for        return $output;    }    /**     * Convert UCS-4 string into UTF-8 string     * See _utf8_to_ucs4() for details     * @param string  $input     * @return string     */    protected function _ucs4_to_utf8($input)    {        $output = '';        foreach ($input as $k => $v) {            if ($v < 128) { // 7bit are transferred literally                $output .= chr($v);            } elseif ($v < (1 << 11)) { // 2 bytes                $output .= chr(192+($v >> 6)).chr(128+($v & 63));            } elseif ($v < (1 << 16)) { // 3 bytes                $output .= chr(224+($v >> 12)).chr(128+(($v >> 6) & 63)).chr(128+($v & 63));            } elseif ($v < (1 << 21)) { // 4 bytes                $output .= chr(240+($v >> 18)).chr(128+(($v >> 12) & 63)).chr(128+(($v >> 6) & 63)).chr(128+($v & 63));            } elseif (self::$safe_mode) {                $output .= self::$safe_char;            } else {                $this->_error('Conversion from UCS-4 to UTF-8 failed: malformed input at byte '.$k);                return false;            }        }        return $output;    }    /**     * Convert UCS-4 array into UCS-4 string     *     * @param array $input     * @return string     */    protected function _ucs4_to_ucs4_string($input)    {        $output = '';        // Take array values and split output to 4 bytes per value        // The bit mask is 255, which reads &11111111        foreach ($input as $v) {            $output .= chr(($v >> 24) & 255).chr(($v >> 16) & 255).chr(($v >> 8) & 255).chr($v & 255);        }        return $output;    }    /**     * Convert UCS-4 strin into UCS-4 garray     *     * @param  string $input     * @return array     */    protected function _ucs4_string_to_ucs4($input)    {        $output = array();        $inp_len = self::byteLength($input);        // Input length must be dividable by 4        if ($inp_len % 4) {            $this->_error('Input UCS4 string is broken');            return false;        }        // Empty input - return empty output        if (!$inp_len) return $output;        for ($i = 0, $out_len = -1; $i < $inp_len; ++$i) {            // Increment output position every 4 input bytes            if (!($i % 4)) {                $out_len++;                $output[$out_len] = 0;            }            $output[$out_len] += ord($input{$i}) << (8 * (3 - ($i % 4) ) );        }        return $output;    }    /**     * Gets the length of a string in bytes even if mbstring function     * overloading is turned on     *     * @param string $string the string for which to get the length.     * @return integer the length of the string in bytes.     */    protected static function byteLength($string)    {        if (self::$_mb_string_overload) {            return mb_strlen($string, '8bit');        }        return strlen(/*(binary)*/ $string);    }    /**     * Attempts to return a concrete IDNA instance.     *     * @param array $params Set of paramaters     * @return idna_convert     * @access public     */    public function getInstance($params = array())    {        return new idna_convert($params);    }    /**     * Attempts to return a concrete IDNA instance for either php4 or php5,     * only creating a new instance if no IDNA instance with the same     * parameters currently exists.     *     * @param array $params Set of paramaters     *     * @return object idna_convert     * @access public     */    public function singleton($params = array())    {        static $instances;        if (!isset($instances)) {            $instances = array();        }        $signature = serialize($params);        if (!isset($instances[$signature])) {            $instances[$signature] = idna_convert::getInstance($params);        }        return $instances[$signature];    }    /**     * Holds all relevant mapping tables     * See RFC3454 for details     *     * @private array     * @since 0.5.2     */    protected static $NP = array            ('map_nothing' => array(0xAD, 0x34F, 0x1806, 0x180B, 0x180C, 0x180D, 0x200B, 0x200C                    ,0x200D, 0x2060, 0xFE00, 0xFE01, 0xFE02, 0xFE03, 0xFE04, 0xFE05, 0xFE06, 0xFE07                    ,0xFE08, 0xFE09, 0xFE0A, 0xFE0B, 0xFE0C, 0xFE0D, 0xFE0E, 0xFE0F, 0xFEFF                    )            ,'general_prohibited' => array(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19                    ,20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32 ,33, 34, 35, 36, 37, 38, 39, 40, 41, 42                    ,43, 44, 47, 59, 60, 61, 62, 63, 64, 91, 92, 93, 94, 95, 96, 123, 124, 125, 126, 127, 0x3002                    )            ,'prohibit' => array(0xA0, 0x340, 0x341, 0x6DD, 0x70F, 0x1680, 0x180E, 0x2000, 0x2001, 0x2002, 0x2003                    ,0x2004, 0x2005, 0x2006, 0x2007, 0x2008, 0x2009, 0x200A, 0x200B, 0x200C, 0x200D, 0x200E, 0x200F                    ,0x2028, 0x2029, 0x202A, 0x202B, 0x202C, 0x202D, 0x202E, 0x202F, 0x205F, 0x206A, 0x206B, 0x206C                    ,0x206D, 0x206E, 0x206F, 0x3000, 0xFEFF, 0xFFF9, 0xFFFA, 0xFFFB, 0xFFFC, 0xFFFD, 0xFFFE, 0xFFFF                    ,0x1FFFE, 0x1FFFF, 0x2FFFE, 0x2FFFF, 0x3FFFE, 0x3FFFF, 0x4FFFE, 0x4FFFF, 0x5FFFE, 0x5FFFF, 0x6FFFE                    ,0x6FFFF, 0x7FFFE, 0x7FFFF, 0x8FFFE, 0x8FFFF, 0x9FFFE, 0x9FFFF, 0xAFFFE, 0xAFFFF, 0xBFFFE, 0xBFFFF                    ,0xCFFFE, 0xCFFFF, 0xDFFFE, 0xDFFFF, 0xE0001, 0xEFFFE, 0xEFFFF, 0xFFFFE, 0xFFFFF, 0x10FFFE, 0x10FFFF                    )            ,'prohibit_ranges' => array(array(0x80, 0x9F), array(0x2060, 0x206F), array(0x1D173, 0x1D17A)                    ,array(0xE000, 0xF8FF) ,array(0xF0000, 0xFFFFD), array(0x100000, 0x10FFFD)                    ,array(0xFDD0, 0xFDEF), array(0xD800, 0xDFFF), array(0x2FF0, 0x2FFB), array(0xE0020, 0xE007F)                    )            ,'replacemaps' => array(0x41 => array(0x61), 0x42 => array(0x62), 0x43 => array(0x63)                    ,0x44 => array(0x64), 0x45 => array(0x65), 0x46 => array(0x66), 0x47 => array(0x67)                    ,0x48 => array(0x68), 0x49 => array(0x69), 0x4A => array(0x6A), 0x4B => array(0x6B)                    ,0x4C => array(0x6C), 0x4D => array(0x6D), 0x4E => array(0x6E), 0x4F => array(0x6F)                    ,0x50 => array(0x70), 0x51 => array(0x71), 0x52 => array(0x72), 0x53 => array(0x73)                    ,0x54 => array(0x74), 0x55 => array(0x75), 0x56 => array(0x76), 0x57 => array(0x77)                    ,0x58 => array(0x78), 0x59 => array(0x79), 0x5A => array(0x7A), 0xB5 => array(0x3BC)                    ,0xC0 => array(0xE0), 0xC1 => array(0xE1), 0xC2 => array(0xE2), 0xC3 => array(0xE3)                    ,0xC4 => array(0xE4), 0xC5 => array(0xE5), 0xC6 => array(0xE6), 0xC7 => array(0xE7)                    ,0xC8 => array(0xE8), 0xC9 => array(0xE9), 0xCA => array(0xEA), 0xCB => array(0xEB)                    ,0xCC => array(0xEC), 0xCD => array(0xED), 0xCE => array(0xEE), 0xCF => array(0xEF)                    ,0xD0 => array(0xF0), 0xD1 => array(0xF1), 0xD2 => array(0xF2), 0xD3 => array(0xF3)                    ,0xD4 => array(0xF4), 0xD5 => array(0xF5), 0xD6 => array(0xF6), 0xD8 => array(0xF8)                    ,0xD9 => array(0xF9), 0xDA => array(0xFA), 0xDB => array(0xFB), 0xDC => array(0xFC)                    ,0xDD => array(0xFD), 0xDE => array(0xFE), 0xDF => array(0x73, 0x73)                    ,0x100 => array(0x101), 0x102 => array(0x103), 0x104 => array(0x105)                    ,0x106 => array(0x107), 0x108 => array(0x109), 0x10A => array(0x10B)                    ,0x10C => array(0x10D), 0x10E => array(0x10F), 0x110 => array(0x111)                    ,0x112 => array(0x113), 0x114 => array(0x115), 0x116 => array(0x117)                    ,0x118 => array(0x119), 0x11A => array(0x11B), 0x11C => array(0x11D)                    ,0x11E => array(0x11F), 0x120 => array(0x121), 0x122 => array(0x123)                    ,0x124 => array(0x125), 0x126 => array(0x127), 0x128 => array(0x129)                    ,0x12A => array(0x12B), 0x12C => array(0x12D), 0x12E => array(0x12F)                    ,0x130 => array(0x69, 0x307), 0x132 => array(0x133), 0x134 => array(0x135)                    ,0x136 => array(0x137), 0x139 => array(0x13A), 0x13B => array(0x13C)                    ,0x13D => array(0x13E), 0x13F => array(0x140), 0x141 => array(0x142)                    ,0x143 => array(0x144), 0x145 => array(0x146), 0x147 => array(0x148)                    ,0x149 => array(0x2BC, 0x6E), 0x14A => array(0x14B), 0x14C => array(0x14D)                    ,0x14E => array(0x14F), 0x150 => array(0x151), 0x152 => array(0x153)                    ,0x154 => array(0x155), 0x156 => array(0x157), 0x158 => array(0x159)                    ,0x15A => array(0x15B), 0x15C => array(0x15D), 0x15E => array(0x15F)                    ,0x160 => array(0x161), 0x162 => array(0x163), 0x164 => array(0x165)                    ,0x166 => array(0x167), 0x168 => array(0x169), 0x16A => array(0x16B)                    ,0x16C => array(0x16D), 0x16E => array(0x16F), 0x170 => array(0x171)                    ,0x172 => array(0x173), 0x174 => array(0x175), 0x176 => array(0x177)                    ,0x178 => array(0xFF), 0x179 => array(0x17A), 0x17B => array(0x17C)                    ,0x17D => array(0x17E), 0x17F => array(0x73), 0x181 => array(0x253)                    ,0x182 => array(0x183), 0x184 => array(0x185), 0x186 => array(0x254)                    ,0x187 => array(0x188), 0x189 => array(0x256), 0x18A => array(0x257)                    ,0x18B => array(0x18C), 0x18E => array(0x1DD), 0x18F => array(0x259)                    ,0x190 => array(0x25B), 0x191 => array(0x192), 0x193 => array(0x260)                    ,0x194 => array(0x263), 0x196 => array(0x269), 0x197 => array(0x268)                    ,0x198 => array(0x199), 0x19C => array(0x26F), 0x19D => array(0x272)                    ,0x19F => array(0x275), 0x1A0 => array(0x1A1), 0x1A2 => array(0x1A3)                    ,0x1A4 => array(0x1A5), 0x1A6 => array(0x280), 0x1A7 => array(0x1A8)                    ,0x1A9 => array(0x283), 0x1AC => array(0x1AD), 0x1AE => array(0x288)                    ,0x1AF => array(0x1B0), 0x1B1 => array(0x28A), 0x1B2 => array(0x28B)                    ,0x1B3 => array(0x1B4), 0x1B5 => array(0x1B6), 0x1B7 => array(0x292)                    ,0x1B8 => array(0x1B9), 0x1BC => array(0x1BD), 0x1C4 => array(0x1C6)                    ,0x1C5 => array(0x1C6), 0x1C7 => array(0x1C9), 0x1C8 => array(0x1C9)                    ,0x1CA => array(0x1CC), 0x1CB => array(0x1CC), 0x1CD => array(0x1CE)                    ,0x1CF => array(0x1D0), 0x1D1   => array(0x1D2), 0x1D3   => array(0x1D4)                    ,0x1D5   => array(0x1D6), 0x1D7   => array(0x1D8), 0x1D9   => array(0x1DA)                    ,0x1DB   => array(0x1DC), 0x1DE   => array(0x1DF), 0x1E0   => array(0x1E1)                    ,0x1E2   => array(0x1E3), 0x1E4   => array(0x1E5), 0x1E6   => array(0x1E7)                    ,0x1E8   => array(0x1E9), 0x1EA   => array(0x1EB), 0x1EC   => array(0x1ED)                    ,0x1EE   => array(0x1EF), 0x1F0   => array(0x6A, 0x30C), 0x1F1   => array(0x1F3)                    ,0x1F2   => array(0x1F3), 0x1F4   => array(0x1F5), 0x1F6   => array(0x195)                    ,0x1F7   => array(0x1BF), 0x1F8   => array(0x1F9), 0x1FA   => array(0x1FB)                    ,0x1FC   => array(0x1FD), 0x1FE   => array(0x1FF), 0x200   => array(0x201)                    ,0x202   => array(0x203), 0x204   => array(0x205), 0x206   => array(0x207)                    ,0x208   => array(0x209), 0x20A   => array(0x20B), 0x20C   => array(0x20D)                    ,0x20E   => array(0x20F), 0x210   => array(0x211), 0x212   => array(0x213)                    ,0x214   => array(0x215), 0x216   => array(0x217), 0x218   => array(0x219)                    ,0x21A   => array(0x21B), 0x21C   => array(0x21D), 0x21E   => array(0x21F)                    ,0x220   => array(0x19E), 0x222   => array(0x223), 0x224   => array(0x225)                    ,0x226   => array(0x227), 0x228   => array(0x229), 0x22A   => array(0x22B)                    ,0x22C   => array(0x22D), 0x22E   => array(0x22F), 0x230   => array(0x231)                    ,0x232   => array(0x233), 0x345   => array(0x3B9), 0x37A   => array(0x20, 0x3B9)                    ,0x386   => array(0x3AC), 0x388   => array(0x3AD), 0x389   => array(0x3AE)                    ,0x38A   => array(0x3AF), 0x38C   => array(0x3CC), 0x38E   => array(0x3CD)                    ,0x38F   => array(0x3CE), 0x390   => array(0x3B9, 0x308, 0x301)                    ,0x391   => array(0x3B1), 0x392   => array(0x3B2), 0x393   => array(0x3B3)                    ,0x394   => array(0x3B4), 0x395   => array(0x3B5), 0x396   => array(0x3B6)                    ,0x397   => array(0x3B7), 0x398   => array(0x3B8), 0x399   => array(0x3B9)                    ,0x39A   => array(0x3BA), 0x39B   => array(0x3BB), 0x39C   => array(0x3BC)                    ,0x39D   => array(0x3BD), 0x39E   => array(0x3BE), 0x39F   => array(0x3BF)                    ,0x3A0   => array(0x3C0), 0x3A1   => array(0x3C1), 0x3A3   => array(0x3C3)                    ,0x3A4   => array(0x3C4), 0x3A5   => array(0x3C5), 0x3A6   => array(0x3C6)                    ,0x3A7   => array(0x3C7), 0x3A8   => array(0x3C8), 0x3A9   => array(0x3C9)                    ,0x3AA   => array(0x3CA), 0x3AB   => array(0x3CB), 0x3B0   => array(0x3C5, 0x308, 0x301)                    ,0x3C2   => array(0x3C3), 0x3D0   => array(0x3B2), 0x3D1   => array(0x3B8)                    ,0x3D2   => array(0x3C5), 0x3D3   => array(0x3CD), 0x3D4   => array(0x3CB)                    ,0x3D5   => array(0x3C6), 0x3D6   => array(0x3C0), 0x3D8   => array(0x3D9)                    ,0x3DA   => array(0x3DB), 0x3DC   => array(0x3DD), 0x3DE   => array(0x3DF)                    ,0x3E0   => array(0x3E1), 0x3E2   => array(0x3E3), 0x3E4   => array(0x3E5)                    ,0x3E6   => array(0x3E7), 0x3E8   => array(0x3E9), 0x3EA   => array(0x3EB)                    ,0x3EC   => array(0x3ED), 0x3EE   => array(0x3EF), 0x3F0   => array(0x3BA)                    ,0x3F1   => array(0x3C1), 0x3F2   => array(0x3C3), 0x3F4   => array(0x3B8)                    ,0x3F5   => array(0x3B5), 0x400   => array(0x450), 0x401   => array(0x451)                    ,0x402   => array(0x452), 0x403   => array(0x453), 0x404   => array(0x454)                    ,0x405   => array(0x455), 0x406   => array(0x456), 0x407   => array(0x457)                    ,0x408   => array(0x458), 0x409   => array(0x459), 0x40A   => array(0x45A)                    ,0x40B   => array(0x45B), 0x40C   => array(0x45C), 0x40D   => array(0x45D)                    ,0x40E   => array(0x45E), 0x40F   => array(0x45F), 0x410   => array(0x430)                    ,0x411   => array(0x431), 0x412   => array(0x432), 0x413   => array(0x433)                    ,0x414   => array(0x434), 0x415   => array(0x435), 0x416   => array(0x436)                    ,0x417   => array(0x437), 0x418   => array(0x438), 0x419   => array(0x439)                    ,0x41A   => array(0x43A), 0x41B   => array(0x43B), 0x41C   => array(0x43C)                    ,0x41D   => array(0x43D), 0x41E   => array(0x43E), 0x41F   => array(0x43F)                    ,0x420   => array(0x440), 0x421   => array(0x441), 0x422   => array(0x442)                    ,0x423   => array(0x443), 0x424   => array(0x444), 0x425   => array(0x445)                    ,0x426   => array(0x446), 0x427   => array(0x447), 0x428   => array(0x448)                    ,0x429   => array(0x449), 0x42A   => array(0x44A), 0x42B   => array(0x44B)                    ,0x42C   => array(0x44C), 0x42D   => array(0x44D), 0x42E   => array(0x44E)                    ,0x42F   => array(0x44F), 0x460   => array(0x461), 0x462   => array(0x463)                    ,0x464   => array(0x465), 0x466   => array(0x467), 0x468   => array(0x469)                    ,0x46A   => array(0x46B), 0x46C   => array(0x46D), 0x46E   => array(0x46F)                    ,0x470   => array(0x471), 0x472   => array(0x473), 0x474   => array(0x475)                    ,0x476   => array(0x477), 0x478   => array(0x479), 0x47A   => array(0x47B)                    ,0x47C   => array(0x47D), 0x47E   => array(0x47F), 0x480   => array(0x481)                    ,0x48A   => array(0x48B), 0x48C   => array(0x48D), 0x48E   => array(0x48F)                    ,0x490   => array(0x491), 0x492   => array(0x493), 0x494   => array(0x495)                    ,0x496   => array(0x497), 0x498   => array(0x499), 0x49A   => array(0x49B)                    ,0x49C   => array(0x49D), 0x49E   => array(0x49F), 0x4A0   => array(0x4A1)                    ,0x4A2   => array(0x4A3), 0x4A4   => array(0x4A5), 0x4A6   => array(0x4A7)                    ,0x4A8   => array(0x4A9), 0x4AA   => array(0x4AB), 0x4AC   => array(0x4AD)                    ,0x4AE   => array(0x4AF), 0x4B0   => array(0x4B1), 0x4B2   => array(0x4B3)                    ,0x4B4   => array(0x4B5), 0x4B6   => array(0x4B7), 0x4B8   => array(0x4B9)                    ,0x4BA   => array(0x4BB), 0x4BC   => array(0x4BD), 0x4BE   => array(0x4BF)                    ,0x4C1   => array(0x4C2), 0x4C3   => array(0x4C4), 0x4C5   => array(0x4C6)                    ,0x4C7   => array(0x4C8), 0x4C9   => array(0x4CA), 0x4CB   => array(0x4CC)                    ,0x4CD   => array(0x4CE), 0x4D0   => array(0x4D1), 0x4D2   => array(0x4D3)                    ,0x4D4   => array(0x4D5), 0x4D6   => array(0x4D7), 0x4D8   => array(0x4D9)                    ,0x4DA   => array(0x4DB), 0x4DC   => array(0x4DD), 0x4DE   => array(0x4DF)                    ,0x4E0   => array(0x4E1), 0x4E2   => array(0x4E3), 0x4E4   => array(0x4E5)                    ,0x4E6   => array(0x4E7), 0x4E8   => array(0x4E9), 0x4EA   => array(0x4EB)                    ,0x4EC   => array(0x4ED), 0x4EE   => array(0x4EF), 0x4F0   => array(0x4F1)                    ,0x4F2   => array(0x4F3), 0x4F4   => array(0x4F5), 0x4F8   => array(0x4F9)                    ,0x500   => array(0x501), 0x502   => array(0x503), 0x504   => array(0x505)                    ,0x506   => array(0x507), 0x508   => array(0x509), 0x50A   => array(0x50B)                    ,0x50C   => array(0x50D), 0x50E   => array(0x50F), 0x531   => array(0x561)                    ,0x532   => array(0x562), 0x533   => array(0x563), 0x534   => array(0x564)                    ,0x535   => array(0x565), 0x536   => array(0x566), 0x537   => array(0x567)                    ,0x538   => array(0x568), 0x539   => array(0x569), 0x53A   => array(0x56A)                    ,0x53B   => array(0x56B), 0x53C   => array(0x56C), 0x53D   => array(0x56D)                    ,0x53E   => array(0x56E), 0x53F   => array(0x56F), 0x540   => array(0x570)                    ,0x541   => array(0x571), 0x542   => array(0x572), 0x543   => array(0x573)                    ,0x544   => array(0x574), 0x545   => array(0x575), 0x546   => array(0x576)                    ,0x547   => array(0x577), 0x548   => array(0x578), 0x549   => array(0x579)                    ,0x54A   => array(0x57A), 0x54B   => array(0x57B), 0x54C   => array(0x57C)                    ,0x54D   => array(0x57D), 0x54E   => array(0x57E), 0x54F   => array(0x57F)                    ,0x550   => array(0x580), 0x551   => array(0x581), 0x552   => array(0x582)                    ,0x553   => array(0x583), 0x554   => array(0x584), 0x555   => array(0x585)                    ,0x556 => array(0x586), 0x587 => array(0x565, 0x582), 0xE33 => array(0xE4D, 0xE32)                    ,0x1E00  => array(0x1E01), 0x1E02  => array(0x1E03), 0x1E04  => array(0x1E05)                    ,0x1E06  => array(0x1E07), 0x1E08  => array(0x1E09), 0x1E0A  => array(0x1E0B)                    ,0x1E0C  => array(0x1E0D), 0x1E0E  => array(0x1E0F), 0x1E10  => array(0x1E11)                    ,0x1E12  => array(0x1E13), 0x1E14  => array(0x1E15), 0x1E16  => array(0x1E17)                    ,0x1E18  => array(0x1E19), 0x1E1A  => array(0x1E1B), 0x1E1C  => array(0x1E1D)                    ,0x1E1E  => array(0x1E1F), 0x1E20  => array(0x1E21), 0x1E22  => array(0x1E23)                    ,0x1E24  => array(0x1E25), 0x1E26  => array(0x1E27), 0x1E28  => array(0x1E29)                    ,0x1E2A  => array(0x1E2B), 0x1E2C  => array(0x1E2D), 0x1E2E  => array(0x1E2F)                    ,0x1E30  => array(0x1E31), 0x1E32  => array(0x1E33), 0x1E34  => array(0x1E35)                    ,0x1E36  => array(0x1E37), 0x1E38  => array(0x1E39), 0x1E3A  => array(0x1E3B)                    ,0x1E3C  => array(0x1E3D), 0x1E3E  => array(0x1E3F), 0x1E40  => array(0x1E41)                    ,0x1E42  => array(0x1E43), 0x1E44  => array(0x1E45), 0x1E46  => array(0x1E47)                    ,0x1E48  => array(0x1E49), 0x1E4A  => array(0x1E4B), 0x1E4C  => array(0x1E4D)                    ,0x1E4E  => array(0x1E4F), 0x1E50  => array(0x1E51), 0x1E52  => array(0x1E53)                    ,0x1E54  => array(0x1E55), 0x1E56  => array(0x1E57), 0x1E58  => array(0x1E59)                    ,0x1E5A  => array(0x1E5B), 0x1E5C  => array(0x1E5D), 0x1E5E  => array(0x1E5F)                    ,0x1E60  => array(0x1E61), 0x1E62  => array(0x1E63), 0x1E64  => array(0x1E65)                    ,0x1E66  => array(0x1E67), 0x1E68  => array(0x1E69), 0x1E6A  => array(0x1E6B)                    ,0x1E6C  => array(0x1E6D), 0x1E6E  => array(0x1E6F), 0x1E70  => array(0x1E71)                    ,0x1E72  => array(0x1E73), 0x1E74  => array(0x1E75), 0x1E76  => array(0x1E77)                    ,0x1E78  => array(0x1E79), 0x1E7A  => array(0x1E7B), 0x1E7C  => array(0x1E7D)                    ,0x1E7E  => array(0x1E7F), 0x1E80  => array(0x1E81), 0x1E82  => array(0x1E83)                    ,0x1E84  => array(0x1E85), 0x1E86  => array(0x1E87), 0x1E88  => array(0x1E89)                    ,0x1E8A  => array(0x1E8B), 0x1E8C  => array(0x1E8D), 0x1E8E  => array(0x1E8F)                    ,0x1E90  => array(0x1E91), 0x1E92  => array(0x1E93), 0x1E94  => array(0x1E95)                    ,0x1E96  => array(0x68, 0x331), 0x1E97  => array(0x74, 0x308), 0x1E98  => array(0x77, 0x30A)                    ,0x1E99  => array(0x79, 0x30A), 0x1E9A  => array(0x61, 0x2BE), 0x1E9B  => array(0x1E61)                    ,0x1EA0  => array(0x1EA1), 0x1EA2  => array(0x1EA3), 0x1EA4  => array(0x1EA5)                    ,0x1EA6  => array(0x1EA7), 0x1EA8  => array(0x1EA9), 0x1EAA  => array(0x1EAB)                    ,0x1EAC  => array(0x1EAD), 0x1EAE  => array(0x1EAF), 0x1EB0  => array(0x1EB1)                    ,0x1EB2  => array(0x1EB3), 0x1EB4  => array(0x1EB5), 0x1EB6  => array(0x1EB7)                    ,0x1EB8  => array(0x1EB9), 0x1EBA  => array(0x1EBB), 0x1EBC  => array(0x1EBD)                    ,0x1EBE  => array(0x1EBF), 0x1EC0  => array(0x1EC1), 0x1EC2  => array(0x1EC3)                    ,0x1EC4  => array(0x1EC5), 0x1EC6  => array(0x1EC7), 0x1EC8  => array(0x1EC9)                    ,0x1ECA  => array(0x1ECB), 0x1ECC  => array(0x1ECD), 0x1ECE  => array(0x1ECF)                    ,0x1ED0  => array(0x1ED1), 0x1ED2  => array(0x1ED3), 0x1ED4  => array(0x1ED5)                    ,0x1ED6  => array(0x1ED7), 0x1ED8  => array(0x1ED9), 0x1EDA  => array(0x1EDB)                    ,0x1EDC  => array(0x1EDD), 0x1EDE  => array(0x1EDF), 0x1EE0  => array(0x1EE1)                    ,0x1EE2  => array(0x1EE3), 0x1EE4  => array(0x1EE5), 0x1EE6  => array(0x1EE7)                    ,0x1EE8  => array(0x1EE9), 0x1EEA  => array(0x1EEB), 0x1EEC  => array(0x1EED)                    ,0x1EEE  => array(0x1EEF), 0x1EF0  => array(0x1EF1), 0x1EF2  => array(0x1EF3)                    ,0x1EF4  => array(0x1EF5), 0x1EF6  => array(0x1EF7), 0x1EF8  => array(0x1EF9)                    ,0x1F08  => array(0x1F00), 0x1F09  => array(0x1F01), 0x1F0A  => array(0x1F02)                    ,0x1F0B  => array(0x1F03), 0x1F0C  => array(0x1F04), 0x1F0D  => array(0x1F05)                    ,0x1F0E  => array(0x1F06), 0x1F0F  => array(0x1F07), 0x1F18  => array(0x1F10)                    ,0x1F19  => array(0x1F11), 0x1F1A  => array(0x1F12), 0x1F1B  => array(0x1F13)                    ,0x1F1C  => array(0x1F14), 0x1F1D  => array(0x1F15), 0x1F28  => array(0x1F20)                    ,0x1F29  => array(0x1F21), 0x1F2A  => array(0x1F22), 0x1F2B  => array(0x1F23)                    ,0x1F2C  => array(0x1F24), 0x1F2D  => array(0x1F25), 0x1F2E  => array(0x1F26)                    ,0x1F2F  => array(0x1F27), 0x1F38  => array(0x1F30), 0x1F39  => array(0x1F31)                    ,0x1F3A  => array(0x1F32), 0x1F3B  => array(0x1F33), 0x1F3C  => array(0x1F34)                    ,0x1F3D  => array(0x1F35), 0x1F3E  => array(0x1F36), 0x1F3F  => array(0x1F37)                    ,0x1F48  => array(0x1F40), 0x1F49  => array(0x1F41), 0x1F4A  => array(0x1F42)                    ,0x1F4B  => array(0x1F43), 0x1F4C  => array(0x1F44), 0x1F4D  => array(0x1F45)                    ,0x1F50  => array(0x3C5, 0x313), 0x1F52  => array(0x3C5, 0x313, 0x300)                    ,0x1F54  => array(0x3C5, 0x313, 0x301), 0x1F56  => array(0x3C5, 0x313, 0x342)                    ,0x1F59  => array(0x1F51), 0x1F5B  => array(0x1F53), 0x1F5D  => array(0x1F55)                    ,0x1F5F  => array(0x1F57), 0x1F68  => array(0x1F60), 0x1F69  => array(0x1F61)                    ,0x1F6A  => array(0x1F62), 0x1F6B  => array(0x1F63), 0x1F6C  => array(0x1F64)                    ,0x1F6D  => array(0x1F65), 0x1F6E  => array(0x1F66), 0x1F6F  => array(0x1F67)                    ,0x1F80  => array(0x1F00, 0x3B9), 0x1F81  => array(0x1F01, 0x3B9)                    ,0x1F82  => array(0x1F02, 0x3B9), 0x1F83  => array(0x1F03, 0x3B9)                    ,0x1F84  => array(0x1F04, 0x3B9), 0x1F85  => array(0x1F05, 0x3B9)                    ,0x1F86  => array(0x1F06, 0x3B9), 0x1F87  => array(0x1F07, 0x3B9)                    ,0x1F88  => array(0x1F00, 0x3B9), 0x1F89  => array(0x1F01, 0x3B9)                    ,0x1F8A  => array(0x1F02, 0x3B9), 0x1F8B  => array(0x1F03, 0x3B9)                    ,0x1F8C  => array(0x1F04, 0x3B9), 0x1F8D  => array(0x1F05, 0x3B9)                    ,0x1F8E  => array(0x1F06, 0x3B9), 0x1F8F  => array(0x1F07, 0x3B9)                    ,0x1F90  => array(0x1F20, 0x3B9), 0x1F91  => array(0x1F21, 0x3B9)                    ,0x1F92  => array(0x1F22, 0x3B9), 0x1F93  => array(0x1F23, 0x3B9)                    ,0x1F94  => array(0x1F24, 0x3B9), 0x1F95  => array(0x1F25, 0x3B9)                    ,0x1F96  => array(0x1F26, 0x3B9), 0x1F97  => array(0x1F27, 0x3B9)                    ,0x1F98  => array(0x1F20, 0x3B9), 0x1F99  => array(0x1F21, 0x3B9)                    ,0x1F9A  => array(0x1F22, 0x3B9), 0x1F9B  => array(0x1F23, 0x3B9)                    ,0x1F9C  => array(0x1F24, 0x3B9), 0x1F9D  => array(0x1F25, 0x3B9)                    ,0x1F9E  => array(0x1F26, 0x3B9), 0x1F9F  => array(0x1F27, 0x3B9)                    ,0x1FA0  => array(0x1F60, 0x3B9), 0x1FA1  => array(0x1F61, 0x3B9)                    ,0x1FA2  => array(0x1F62, 0x3B9), 0x1FA3  => array(0x1F63, 0x3B9)                    ,0x1FA4  => array(0x1F64, 0x3B9), 0x1FA5  => array(0x1F65, 0x3B9)                    ,0x1FA6  => array(0x1F66, 0x3B9), 0x1FA7  => array(0x1F67, 0x3B9)                    ,0x1FA8  => array(0x1F60, 0x3B9), 0x1FA9  => array(0x1F61, 0x3B9)                    ,0x1FAA  => array(0x1F62, 0x3B9), 0x1FAB  => array(0x1F63, 0x3B9)                    ,0x1FAC  => array(0x1F64, 0x3B9), 0x1FAD  => array(0x1F65, 0x3B9)                    ,0x1FAE  => array(0x1F66, 0x3B9), 0x1FAF  => array(0x1F67, 0x3B9)                    ,0x1FB2  => array(0x1F70, 0x3B9), 0x1FB3  => array(0x3B1, 0x3B9)                    ,0x1FB4  => array(0x3AC, 0x3B9), 0x1FB6  => array(0x3B1, 0x342)                    ,0x1FB7  => array(0x3B1, 0x342, 0x3B9), 0x1FB8  => array(0x1FB0)                    ,0x1FB9  => array(0x1FB1), 0x1FBA  => array(0x1F70), 0x1FBB  => array(0x1F71)                    ,0x1FBC  => array(0x3B1, 0x3B9), 0x1FBE  => array(0x3B9)                    ,0x1FC2  => array(0x1F74, 0x3B9), 0x1FC3  => array(0x3B7, 0x3B9)                    ,0x1FC4  => array(0x3AE, 0x3B9), 0x1FC6  => array(0x3B7, 0x342)                    ,0x1FC7  => array(0x3B7, 0x342, 0x3B9), 0x1FC8  => array(0x1F72)                    ,0x1FC9  => array(0x1F73), 0x1FCA  => array(0x1F74), 0x1FCB  => array(0x1F75)                    ,0x1FCC  => array(0x3B7, 0x3B9), 0x1FD2  => array(0x3B9, 0x308, 0x300)                    ,0x1FD3  => array(0x3B9, 0x308, 0x301), 0x1FD6  => array(0x3B9, 0x342)                    ,0x1FD7  => array(0x3B9, 0x308, 0x342), 0x1FD8  => array(0x1FD0)                    ,0x1FD9  => array(0x1FD1), 0x1FDA  => array(0x1F76)                    ,0x1FDB  => array(0x1F77), 0x1FE2  => array(0x3C5, 0x308, 0x300)                    ,0x1FE3  => array(0x3C5, 0x308, 0x301), 0x1FE4  => array(0x3C1, 0x313)                    ,0x1FE6  => array(0x3C5, 0x342), 0x1FE7  => array(0x3C5, 0x308, 0x342)                    ,0x1FE8  => array(0x1FE0), 0x1FE9  => array(0x1FE1)                    ,0x1FEA  => array(0x1F7A), 0x1FEB  => array(0x1F7B)                    ,0x1FEC  => array(0x1FE5), 0x1FF2  => array(0x1F7C, 0x3B9)                    ,0x1FF3  => array(0x3C9, 0x3B9), 0x1FF4  => array(0x3CE, 0x3B9)                    ,0x1FF6  => array(0x3C9, 0x342), 0x1FF7  => array(0x3C9, 0x342, 0x3B9)                    ,0x1FF8  => array(0x1F78), 0x1FF9  => array(0x1F79), 0x1FFA  => array(0x1F7C)                    ,0x1FFB  => array(0x1F7D), 0x1FFC  => array(0x3C9, 0x3B9)                    ,0x20A8  => array(0x72, 0x73), 0x2102  => array(0x63), 0x2103  => array(0xB0, 0x63)                    ,0x2107  => array(0x25B), 0x2109  => array(0xB0, 0x66), 0x210B  => array(0x68)                    ,0x210C  => array(0x68), 0x210D  => array(0x68), 0x2110  => array(0x69)                    ,0x2111  => array(0x69), 0x2112  => array(0x6C), 0x2115  => array(0x6E)                    ,0x2116  => array(0x6E, 0x6F), 0x2119  => array(0x70), 0x211A  => array(0x71)                    ,0x211B  => array(0x72), 0x211C  => array(0x72), 0x211D  => array(0x72)                    ,0x2120  => array(0x73, 0x6D), 0x2121  => array(0x74, 0x65, 0x6C)                    ,0x2122  => array(0x74, 0x6D), 0x2124  => array(0x7A), 0x2126  => array(0x3C9)                    ,0x2128  => array(0x7A), 0x212A  => array(0x6B), 0x212B  => array(0xE5)                    ,0x212C  => array(0x62), 0x212D  => array(0x63), 0x2130  => array(0x65)                    ,0x2131  => array(0x66), 0x2133  => array(0x6D), 0x213E  => array(0x3B3)                    ,0x213F  => array(0x3C0), 0x2145  => array(0x64) ,0x2160  => array(0x2170)                    ,0x2161  => array(0x2171), 0x2162  => array(0x2172), 0x2163  => array(0x2173)                    ,0x2164  => array(0x2174), 0x2165  => array(0x2175), 0x2166  => array(0x2176)                    ,0x2167  => array(0x2177), 0x2168  => array(0x2178), 0x2169  => array(0x2179)                    ,0x216A  => array(0x217A), 0x216B  => array(0x217B), 0x216C  => array(0x217C)                    ,0x216D  => array(0x217D), 0x216E  => array(0x217E), 0x216F  => array(0x217F)                    ,0x24B6  => array(0x24D0), 0x24B7  => array(0x24D1), 0x24B8  => array(0x24D2)                    ,0x24B9  => array(0x24D3), 0x24BA  => array(0x24D4), 0x24BB  => array(0x24D5)                    ,0x24BC  => array(0x24D6), 0x24BD  => array(0x24D7), 0x24BE  => array(0x24D8)                    ,0x24BF  => array(0x24D9), 0x24C0  => array(0x24DA), 0x24C1  => array(0x24DB)                    ,0x24C2  => array(0x24DC), 0x24C3  => array(0x24DD), 0x24C4  => array(0x24DE)                    ,0x24C5  => array(0x24DF), 0x24C6  => array(0x24E0), 0x24C7  => array(0x24E1)                    ,0x24C8  => array(0x24E2), 0x24C9  => array(0x24E3), 0x24CA  => array(0x24E4)                    ,0x24CB  => array(0x24E5), 0x24CC  => array(0x24E6), 0x24CD  => array(0x24E7)                    ,0x24CE  => array(0x24E8), 0x24CF  => array(0x24E9), 0x3371  => array(0x68, 0x70, 0x61)                    ,0x3373  => array(0x61, 0x75), 0x3375  => array(0x6F, 0x76)                    ,0x3380  => array(0x70, 0x61), 0x3381  => array(0x6E, 0x61)                    ,0x3382  => array(0x3BC, 0x61), 0x3383  => array(0x6D, 0x61)                    ,0x3384  => array(0x6B, 0x61), 0x3385  => array(0x6B, 0x62)                    ,0x3386  => array(0x6D, 0x62), 0x3387  => array(0x67, 0x62)                    ,0x338A  => array(0x70, 0x66), 0x338B  => array(0x6E, 0x66)                    ,0x338C  => array(0x3BC, 0x66), 0x3390  => array(0x68, 0x7A)                    ,0x3391  => array(0x6B, 0x68, 0x7A), 0x3392  => array(0x6D, 0x68, 0x7A)                    ,0x3393  => array(0x67, 0x68, 0x7A), 0x3394  => array(0x74, 0x68, 0x7A)                    ,0x33A9  => array(0x70, 0x61), 0x33AA  => array(0x6B, 0x70, 0x61)                    ,0x33AB  => array(0x6D, 0x70, 0x61), 0x33AC  => array(0x67, 0x70, 0x61)                    ,0x33B4  => array(0x70, 0x76), 0x33B5  => array(0x6E, 0x76)                    ,0x33B6  => array(0x3BC, 0x76), 0x33B7  => array(0x6D, 0x76)                    ,0x33B8  => array(0x6B, 0x76), 0x33B9  => array(0x6D, 0x76)                    ,0x33BA  => array(0x70, 0x77), 0x33BB  => array(0x6E, 0x77)                    ,0x33BC  => array(0x3BC, 0x77), 0x33BD  => array(0x6D, 0x77)                    ,0x33BE  => array(0x6B, 0x77), 0x33BF  => array(0x6D, 0x77)                    ,0x33C0  => array(0x6B, 0x3C9), 0x33C1  => array(0x6D, 0x3C9) /*                    ,0x33C2  => array(0x61, 0x2E, 0x6D, 0x2E) */                    ,0x33C3  => array(0x62, 0x71), 0x33C6  => array(0x63, 0x2215, 0x6B, 0x67)                    ,0x33C7  => array(0x63, 0x6F, 0x2E), 0x33C8  => array(0x64, 0x62)                    ,0x33C9  => array(0x67, 0x79), 0x33CB  => array(0x68, 0x70)                    ,0x33CD  => array(0x6B, 0x6B), 0x33CE  => array(0x6B, 0x6D)                    ,0x33D7  => array(0x70, 0x68), 0x33D9  => array(0x70, 0x70, 0x6D)                    ,0x33DA  => array(0x70, 0x72), 0x33DC  => array(0x73, 0x76)                    ,0x33DD  => array(0x77, 0x62), 0xFB00  => array(0x66, 0x66)                    ,0xFB01  => array(0x66, 0x69), 0xFB02  => array(0x66, 0x6C)                    ,0xFB03  => array(0x66, 0x66, 0x69), 0xFB04  => array(0x66, 0x66, 0x6C)                    ,0xFB05  => array(0x73, 0x74), 0xFB06  => array(0x73, 0x74)                    ,0xFB13  => array(0x574, 0x576), 0xFB14  => array(0x574, 0x565)                    ,0xFB15  => array(0x574, 0x56B), 0xFB16  => array(0x57E, 0x576)                    ,0xFB17  => array(0x574, 0x56D), 0xFF21  => array(0xFF41)                    ,0xFF22  => array(0xFF42), 0xFF23  => array(0xFF43), 0xFF24  => array(0xFF44)                    ,0xFF25  => array(0xFF45), 0xFF26  => array(0xFF46), 0xFF27  => array(0xFF47)                    ,0xFF28  => array(0xFF48), 0xFF29  => array(0xFF49), 0xFF2A  => array(0xFF4A)                    ,0xFF2B  => array(0xFF4B), 0xFF2C  => array(0xFF4C), 0xFF2D  => array(0xFF4D)                    ,0xFF2E  => array(0xFF4E), 0xFF2F  => array(0xFF4F), 0xFF30  => array(0xFF50)                    ,0xFF31  => array(0xFF51), 0xFF32  => array(0xFF52), 0xFF33  => array(0xFF53)                    ,0xFF34  => array(0xFF54), 0xFF35  => array(0xFF55), 0xFF36  => array(0xFF56)                    ,0xFF37  => array(0xFF57), 0xFF38  => array(0xFF58), 0xFF39  => array(0xFF59)                    ,0xFF3A  => array(0xFF5A), 0x10400 => array(0x10428), 0x10401 => array(0x10429)                    ,0x10402 => array(0x1042A), 0x10403 => array(0x1042B), 0x10404 => array(0x1042C)                    ,0x10405 => array(0x1042D), 0x10406 => array(0x1042E), 0x10407 => array(0x1042F)                    ,0x10408 => array(0x10430), 0x10409 => array(0x10431), 0x1040A => array(0x10432)                    ,0x1040B => array(0x10433), 0x1040C => array(0x10434), 0x1040D => array(0x10435)                    ,0x1040E => array(0x10436), 0x1040F => array(0x10437), 0x10410 => array(0x10438)                    ,0x10411 => array(0x10439), 0x10412 => array(0x1043A), 0x10413 => array(0x1043B)                    ,0x10414 => array(0x1043C), 0x10415 => array(0x1043D), 0x10416 => array(0x1043E)                    ,0x10417 => array(0x1043F), 0x10418 => array(0x10440), 0x10419 => array(0x10441)                    ,0x1041A => array(0x10442), 0x1041B => array(0x10443), 0x1041C => array(0x10444)                    ,0x1041D => array(0x10445), 0x1041E => array(0x10446), 0x1041F => array(0x10447)                    ,0x10420 => array(0x10448), 0x10421 => array(0x10449), 0x10422 => array(0x1044A)                    ,0x10423 => array(0x1044B), 0x10424 => array(0x1044C), 0x10425 => array(0x1044D)                    ,0x1D400 => array(0x61), 0x1D401 => array(0x62), 0x1D402 => array(0x63)                    ,0x1D403 => array(0x64), 0x1D404 => array(0x65), 0x1D405 => array(0x66)                    ,0x1D406 => array(0x67), 0x1D407 => array(0x68), 0x1D408 => array(0x69)                    ,0x1D409 => array(0x6A), 0x1D40A => array(0x6B), 0x1D40B => array(0x6C)                    ,0x1D40C => array(0x6D), 0x1D40D => array(0x6E), 0x1D40E => array(0x6F)                    ,0x1D40F => array(0x70), 0x1D410 => array(0x71), 0x1D411 => array(0x72)                    ,0x1D412 => array(0x73), 0x1D413 => array(0x74), 0x1D414 => array(0x75)                    ,0x1D415 => array(0x76), 0x1D416 => array(0x77), 0x1D417 => array(0x78)                    ,0x1D418 => array(0x79), 0x1D419 => array(0x7A), 0x1D434 => array(0x61)                    ,0x1D435 => array(0x62), 0x1D436 => array(0x63), 0x1D437 => array(0x64)                    ,0x1D438 => array(0x65), 0x1D439 => array(0x66), 0x1D43A => array(0x67)                    ,0x1D43B => array(0x68), 0x1D43C => array(0x69), 0x1D43D => array(0x6A)                    ,0x1D43E => array(0x6B), 0x1D43F => array(0x6C), 0x1D440 => array(0x6D)                    ,0x1D441 => array(0x6E), 0x1D442 => array(0x6F), 0x1D443 => array(0x70)                    ,0x1D444 => array(0x71), 0x1D445 => array(0x72), 0x1D446 => array(0x73)                    ,0x1D447 => array(0x74), 0x1D448 => array(0x75), 0x1D449 => array(0x76)                    ,0x1D44A => array(0x77), 0x1D44B => array(0x78), 0x1D44C => array(0x79)                    ,0x1D44D => array(0x7A), 0x1D468 => array(0x61), 0x1D469 => array(0x62)                    ,0x1D46A => array(0x63), 0x1D46B => array(0x64), 0x1D46C => array(0x65)                    ,0x1D46D => array(0x66), 0x1D46E => array(0x67), 0x1D46F => array(0x68)                    ,0x1D470 => array(0x69), 0x1D471 => array(0x6A), 0x1D472 => array(0x6B)                    ,0x1D473 => array(0x6C), 0x1D474 => array(0x6D), 0x1D475 => array(0x6E)                    ,0x1D476 => array(0x6F), 0x1D477 => array(0x70), 0x1D478 => array(0x71)                    ,0x1D479 => array(0x72), 0x1D47A => array(0x73), 0x1D47B => array(0x74)                    ,0x1D47C => array(0x75), 0x1D47D => array(0x76), 0x1D47E => array(0x77)                    ,0x1D47F => array(0x78), 0x1D480 => array(0x79), 0x1D481 => array(0x7A)                    ,0x1D49C => array(0x61), 0x1D49E => array(0x63), 0x1D49F => array(0x64)                    ,0x1D4A2 => array(0x67), 0x1D4A5 => array(0x6A), 0x1D4A6 => array(0x6B)                    ,0x1D4A9 => array(0x6E), 0x1D4AA => array(0x6F), 0x1D4AB => array(0x70)                    ,0x1D4AC => array(0x71), 0x1D4AE => array(0x73), 0x1D4AF => array(0x74)                    ,0x1D4B0 => array(0x75), 0x1D4B1 => array(0x76), 0x1D4B2 => array(0x77)                    ,0x1D4B3 => array(0x78), 0x1D4B4 => array(0x79), 0x1D4B5 => array(0x7A)                    ,0x1D4D0 => array(0x61), 0x1D4D1 => array(0x62), 0x1D4D2 => array(0x63)                    ,0x1D4D3 => array(0x64), 0x1D4D4 => array(0x65), 0x1D4D5 => array(0x66)                    ,0x1D4D6 => array(0x67), 0x1D4D7 => array(0x68), 0x1D4D8 => array(0x69)                    ,0x1D4D9 => array(0x6A), 0x1D4DA => array(0x6B), 0x1D4DB => array(0x6C)                    ,0x1D4DC => array(0x6D), 0x1D4DD => array(0x6E), 0x1D4DE => array(0x6F)                    ,0x1D4DF => array(0x70), 0x1D4E0 => array(0x71), 0x1D4E1 => array(0x72)                    ,0x1D4E2 => array(0x73), 0x1D4E3 => array(0x74), 0x1D4E4 => array(0x75)                    ,0x1D4E5 => array(0x76), 0x1D4E6 => array(0x77), 0x1D4E7 => array(0x78)                    ,0x1D4E8 => array(0x79), 0x1D4E9 => array(0x7A), 0x1D504 => array(0x61)                    ,0x1D505 => array(0x62), 0x1D507 => array(0x64), 0x1D508 => array(0x65)                    ,0x1D509 => array(0x66), 0x1D50A => array(0x67), 0x1D50D => array(0x6A)                    ,0x1D50E => array(0x6B), 0x1D50F => array(0x6C), 0x1D510 => array(0x6D)                    ,0x1D511 => array(0x6E), 0x1D512 => array(0x6F), 0x1D513 => array(0x70)                    ,0x1D514 => array(0x71), 0x1D516 => array(0x73), 0x1D517 => array(0x74)                    ,0x1D518 => array(0x75), 0x1D519 => array(0x76), 0x1D51A => array(0x77)                    ,0x1D51B => array(0x78), 0x1D51C => array(0x79), 0x1D538 => array(0x61)                    ,0x1D539 => array(0x62), 0x1D53B => array(0x64), 0x1D53C => array(0x65)                    ,0x1D53D => array(0x66), 0x1D53E => array(0x67), 0x1D540 => array(0x69)                    ,0x1D541 => array(0x6A), 0x1D542 => array(0x6B), 0x1D543 => array(0x6C)                    ,0x1D544 => array(0x6D), 0x1D546 => array(0x6F), 0x1D54A => array(0x73)                    ,0x1D54B => array(0x74), 0x1D54C => array(0x75), 0x1D54D => array(0x76)                    ,0x1D54E => array(0x77), 0x1D54F => array(0x78), 0x1D550 => array(0x79)                    ,0x1D56C => array(0x61), 0x1D56D => array(0x62), 0x1D56E => array(0x63)                    ,0x1D56F => array(0x64), 0x1D570 => array(0x65), 0x1D571 => array(0x66)                    ,0x1D572 => array(0x67), 0x1D573 => array(0x68), 0x1D574 => array(0x69)                    ,0x1D575 => array(0x6A), 0x1D576 => array(0x6B), 0x1D577 => array(0x6C)                    ,0x1D578 => array(0x6D), 0x1D579 => array(0x6E), 0x1D57A => array(0x6F)                    ,0x1D57B => array(0x70), 0x1D57C => array(0x71), 0x1D57D => array(0x72)                    ,0x1D57E => array(0x73), 0x1D57F => array(0x74), 0x1D580 => array(0x75)                    ,0x1D581 => array(0x76), 0x1D582 => array(0x77), 0x1D583 => array(0x78)                    ,0x1D584 => array(0x79), 0x1D585 => array(0x7A), 0x1D5A0 => array(0x61)                    ,0x1D5A1 => array(0x62), 0x1D5A2 => array(0x63), 0x1D5A3 => array(0x64)                    ,0x1D5A4 => array(0x65), 0x1D5A5 => array(0x66), 0x1D5A6 => array(0x67)                    ,0x1D5A7 => array(0x68), 0x1D5A8 => array(0x69), 0x1D5A9 => array(0x6A)                    ,0x1D5AA => array(0x6B), 0x1D5AB => array(0x6C), 0x1D5AC => array(0x6D)                    ,0x1D5AD => array(0x6E), 0x1D5AE => array(0x6F), 0x1D5AF => array(0x70)                    ,0x1D5B0 => array(0x71), 0x1D5B1 => array(0x72), 0x1D5B2 => array(0x73)                    ,0x1D5B3 => array(0x74), 0x1D5B4 => array(0x75), 0x1D5B5 => array(0x76)                    ,0x1D5B6 => array(0x77), 0x1D5B7 => array(0x78), 0x1D5B8 => array(0x79)                    ,0x1D5B9 => array(0x7A), 0x1D5D4 => array(0x61), 0x1D5D5 => array(0x62)                    ,0x1D5D6 => array(0x63), 0x1D5D7 => array(0x64), 0x1D5D8 => array(0x65)                    ,0x1D5D9 => array(0x66), 0x1D5DA => array(0x67), 0x1D5DB => array(0x68)                    ,0x1D5DC => array(0x69), 0x1D5DD => array(0x6A), 0x1D5DE => array(0x6B)                    ,0x1D5DF => array(0x6C), 0x1D5E0 => array(0x6D), 0x1D5E1 => array(0x6E)                    ,0x1D5E2 => array(0x6F), 0x1D5E3 => array(0x70), 0x1D5E4 => array(0x71)                    ,0x1D5E5 => array(0x72), 0x1D5E6 => array(0x73), 0x1D5E7 => array(0x74)                    ,0x1D5E8 => array(0x75), 0x1D5E9 => array(0x76), 0x1D5EA => array(0x77)                    ,0x1D5EB => array(0x78), 0x1D5EC => array(0x79), 0x1D5ED => array(0x7A)                    ,0x1D608 => array(0x61), 0x1D609 => array(0x62) ,0x1D60A => array(0x63)                    ,0x1D60B => array(0x64), 0x1D60C => array(0x65), 0x1D60D => array(0x66)                    ,0x1D60E => array(0x67), 0x1D60F => array(0x68), 0x1D610 => array(0x69)                    ,0x1D611 => array(0x6A), 0x1D612 => array(0x6B), 0x1D613 => array(0x6C)                    ,0x1D614 => array(0x6D), 0x1D615 => array(0x6E), 0x1D616 => array(0x6F)                    ,0x1D617 => array(0x70), 0x1D618 => array(0x71), 0x1D619 => array(0x72)                    ,0x1D61A => array(0x73), 0x1D61B => array(0x74), 0x1D61C => array(0x75)                    ,0x1D61D => array(0x76), 0x1D61E => array(0x77), 0x1D61F => array(0x78)                    ,0x1D620 => array(0x79), 0x1D621 => array(0x7A), 0x1D63C => array(0x61)                    ,0x1D63D => array(0x62), 0x1D63E => array(0x63), 0x1D63F => array(0x64)                    ,0x1D640 => array(0x65), 0x1D641 => array(0x66), 0x1D642 => array(0x67)                    ,0x1D643 => array(0x68), 0x1D644 => array(0x69), 0x1D645 => array(0x6A)                    ,0x1D646 => array(0x6B), 0x1D647 => array(0x6C), 0x1D648 => array(0x6D)                    ,0x1D649 => array(0x6E), 0x1D64A => array(0x6F), 0x1D64B => array(0x70)                    ,0x1D64C => array(0x71), 0x1D64D => array(0x72), 0x1D64E => array(0x73)                    ,0x1D64F => array(0x74), 0x1D650 => array(0x75), 0x1D651 => array(0x76)                    ,0x1D652 => array(0x77), 0x1D653 => array(0x78), 0x1D654 => array(0x79)                    ,0x1D655 => array(0x7A), 0x1D670 => array(0x61), 0x1D671 => array(0x62)                    ,0x1D672 => array(0x63), 0x1D673 => array(0x64), 0x1D674 => array(0x65)                    ,0x1D675 => array(0x66), 0x1D676 => array(0x67), 0x1D677 => array(0x68)                    ,0x1D678 => array(0x69), 0x1D679 => array(0x6A), 0x1D67A => array(0x6B)                    ,0x1D67B => array(0x6C), 0x1D67C => array(0x6D), 0x1D67D => array(0x6E)                    ,0x1D67E => array(0x6F), 0x1D67F => array(0x70), 0x1D680 => array(0x71)                    ,0x1D681 => array(0x72), 0x1D682 => array(0x73), 0x1D683 => array(0x74)                    ,0x1D684 => array(0x75), 0x1D685 => array(0x76), 0x1D686 => array(0x77)                    ,0x1D687 => array(0x78), 0x1D688 => array(0x79), 0x1D689 => array(0x7A)                    ,0x1D6A8 => array(0x3B1), 0x1D6A9 => array(0x3B2), 0x1D6AA => array(0x3B3)                    ,0x1D6AB => array(0x3B4), 0x1D6AC => array(0x3B5), 0x1D6AD => array(0x3B6)                    ,0x1D6AE => array(0x3B7), 0x1D6AF => array(0x3B8), 0x1D6B0 => array(0x3B9)                    ,0x1D6B1 => array(0x3BA), 0x1D6B2 => array(0x3BB), 0x1D6B3 => array(0x3BC)                    ,0x1D6B4 => array(0x3BD), 0x1D6B5 => array(0x3BE), 0x1D6B6 => array(0x3BF)                    ,0x1D6B7 => array(0x3C0), 0x1D6B8 => array(0x3C1), 0x1D6B9 => array(0x3B8)                    ,0x1D6BA => array(0x3C3), 0x1D6BB => array(0x3C4), 0x1D6BC => array(0x3C5)                    ,0x1D6BD => array(0x3C6), 0x1D6BE => array(0x3C7), 0x1D6BF => array(0x3C8)                    ,0x1D6C0 => array(0x3C9), 0x1D6D3 => array(0x3C3), 0x1D6E2 => array(0x3B1)                    ,0x1D6E3 => array(0x3B2), 0x1D6E4 => array(0x3B3), 0x1D6E5 => array(0x3B4)                    ,0x1D6E6 => array(0x3B5), 0x1D6E7 => array(0x3B6), 0x1D6E8 => array(0x3B7)                    ,0x1D6E9 => array(0x3B8), 0x1D6EA => array(0x3B9), 0x1D6EB => array(0x3BA)                    ,0x1D6EC => array(0x3BB), 0x1D6ED => array(0x3BC), 0x1D6EE => array(0x3BD)                    ,0x1D6EF => array(0x3BE), 0x1D6F0 => array(0x3BF), 0x1D6F1 => array(0x3C0)                    ,0x1D6F2 => array(0x3C1), 0x1D6F3 => array(0x3B8) ,0x1D6F4 => array(0x3C3)                    ,0x1D6F5 => array(0x3C4), 0x1D6F6 => array(0x3C5), 0x1D6F7 => array(0x3C6)                    ,0x1D6F8 => array(0x3C7), 0x1D6F9 => array(0x3C8) ,0x1D6FA => array(0x3C9)                    ,0x1D70D => array(0x3C3), 0x1D71C => array(0x3B1), 0x1D71D => array(0x3B2)                    ,0x1D71E => array(0x3B3), 0x1D71F => array(0x3B4), 0x1D720 => array(0x3B5)                    ,0x1D721 => array(0x3B6), 0x1D722 => array(0x3B7), 0x1D723 => array(0x3B8)                    ,0x1D724 => array(0x3B9), 0x1D725 => array(0x3BA), 0x1D726 => array(0x3BB)                    ,0x1D727 => array(0x3BC), 0x1D728 => array(0x3BD), 0x1D729 => array(0x3BE)                    ,0x1D72A => array(0x3BF), 0x1D72B => array(0x3C0), 0x1D72C => array(0x3C1)                    ,0x1D72D => array(0x3B8), 0x1D72E => array(0x3C3), 0x1D72F => array(0x3C4)                    ,0x1D730 => array(0x3C5), 0x1D731 => array(0x3C6), 0x1D732 => array(0x3C7)                    ,0x1D733 => array(0x3C8), 0x1D734 => array(0x3C9), 0x1D747 => array(0x3C3)                    ,0x1D756 => array(0x3B1), 0x1D757 => array(0x3B2), 0x1D758 => array(0x3B3)                    ,0x1D759 => array(0x3B4), 0x1D75A => array(0x3B5), 0x1D75B => array(0x3B6)                    ,0x1D75C => array(0x3B7), 0x1D75D => array(0x3B8), 0x1D75E => array(0x3B9)                    ,0x1D75F => array(0x3BA), 0x1D760 => array(0x3BB), 0x1D761 => array(0x3BC)                    ,0x1D762 => array(0x3BD), 0x1D763 => array(0x3BE), 0x1D764 => array(0x3BF)                    ,0x1D765 => array(0x3C0), 0x1D766 => array(0x3C1), 0x1D767 => array(0x3B8)                    ,0x1D768 => array(0x3C3), 0x1D769 => array(0x3C4), 0x1D76A => array(0x3C5)                    ,0x1D76B => array(0x3C6), 0x1D76C => array(0x3C7), 0x1D76D => array(0x3C8)                    ,0x1D76E => array(0x3C9), 0x1D781 => array(0x3C3), 0x1D790 => array(0x3B1)                    ,0x1D791 => array(0x3B2), 0x1D792 => array(0x3B3), 0x1D793 => array(0x3B4)                    ,0x1D794 => array(0x3B5), 0x1D795 => array(0x3B6), 0x1D796 => array(0x3B7)                    ,0x1D797 => array(0x3B8), 0x1D798 => array(0x3B9), 0x1D799 => array(0x3BA)                    ,0x1D79A => array(0x3BB), 0x1D79B => array(0x3BC), 0x1D79C => array(0x3BD)                    ,0x1D79D => array(0x3BE), 0x1D79E => array(0x3BF), 0x1D79F => array(0x3C0)                    ,0x1D7A0 => array(0x3C1), 0x1D7A1 => array(0x3B8), 0x1D7A2 => array(0x3C3)                    ,0x1D7A3 => array(0x3C4), 0x1D7A4 => array(0x3C5), 0x1D7A5 => array(0x3C6)                    ,0x1D7A6 => array(0x3C7), 0x1D7A7 => array(0x3C8), 0x1D7A8 => array(0x3C9)                    ,0x1D7BB => array(0x3C3), 0x3F9   => array(0x3C3), 0x1D2C  => array(0x61)                    ,0x1D2D  => array(0xE6), 0x1D2E  => array(0x62), 0x1D30  => array(0x64)                    ,0x1D31  => array(0x65), 0x1D32  => array(0x1DD), 0x1D33  => array(0x67)                    ,0x1D34  => array(0x68), 0x1D35  => array(0x69), 0x1D36  => array(0x6A)                    ,0x1D37  => array(0x6B), 0x1D38  => array(0x6C), 0x1D39  => array(0x6D)                    ,0x1D3A  => array(0x6E), 0x1D3C  => array(0x6F), 0x1D3D  => array(0x223)                    ,0x1D3E  => array(0x70), 0x1D3F  => array(0x72), 0x1D40  => array(0x74)                    ,0x1D41  => array(0x75), 0x1D42  => array(0x77), 0x213B  => array(0x66, 0x61, 0x78)                    ,0x3250  => array(0x70, 0x74, 0x65), 0x32CC  => array(0x68, 0x67)                    ,0x32CE  => array(0x65, 0x76), 0x32CF  => array(0x6C, 0x74, 0x64)                    ,0x337A  => array(0x69, 0x75), 0x33DE  => array(0x76, 0x2215, 0x6D)                    ,0x33DF  => array(0x61, 0x2215, 0x6D)                    )            ,'norm_combcls' => array(0x334   => 1,   0x335   => 1,   0x336   => 1,   0x337   => 1                    ,0x338   => 1,   0x93C   => 7,   0x9BC   => 7,   0xA3C   => 7,   0xABC   => 7                    ,0xB3C   => 7,   0xCBC   => 7,   0x1037  => 7,   0x3099  => 8,   0x309A  => 8                    ,0x94D   => 9,   0x9CD   => 9,   0xA4D   => 9,   0xACD   => 9,   0xB4D   => 9                    ,0xBCD   => 9,   0xC4D   => 9,   0xCCD   => 9,   0xD4D   => 9,   0xDCA   => 9                    ,0xE3A   => 9,   0xF84   => 9,   0x1039  => 9,   0x1714  => 9,   0x1734  => 9                    ,0x17D2  => 9,   0x5B0   => 10,  0x5B1   => 11,  0x5B2   => 12,  0x5B3   => 13                    ,0x5B4   => 14,  0x5B5   => 15,  0x5B6   => 16,  0x5B7   => 17,  0x5B8   => 18                    ,0x5B9   => 19,  0x5BB   => 20,  0x5Bc   => 21,  0x5BD   => 22,  0x5BF   => 23                    ,0x5C1   => 24,  0x5C2   => 25,  0xFB1E  => 26,  0x64B   => 27,  0x64C   => 28                    ,0x64D   => 29,  0x64E   => 30,  0x64F   => 31,  0x650   => 32,  0x651   => 33                    ,0x652   => 34,  0x670   => 35,  0x711   => 36,  0xC55   => 84,  0xC56   => 91                    ,0xE38   => 103, 0xE39   => 103, 0xE48   => 107, 0xE49   => 107, 0xE4A   => 107                    ,0xE4B   => 107, 0xEB8   => 118, 0xEB9   => 118, 0xEC8   => 122, 0xEC9   => 122                    ,0xECA   => 122, 0xECB   => 122, 0xF71   => 129, 0xF72   => 130, 0xF7A   => 130                    ,0xF7B   => 130, 0xF7C   => 130, 0xF7D   => 130, 0xF80   => 130, 0xF74   => 132                    ,0x321   => 202, 0x322   => 202, 0x327   => 202, 0x328   => 202, 0x31B   => 216                    ,0xF39   => 216, 0x1D165 => 216, 0x1D166 => 216, 0x1D16E => 216, 0x1D16F => 216                    ,0x1D170 => 216, 0x1D171 => 216, 0x1D172 => 216, 0x302A  => 218, 0x316   => 220                    ,0x317   => 220, 0x318   => 220, 0x319   => 220, 0x31C   => 220, 0x31D   => 220                    ,0x31E   => 220, 0x31F   => 220, 0x320   => 220, 0x323   => 220, 0x324   => 220                    ,0x325   => 220, 0x326   => 220, 0x329   => 220, 0x32A   => 220, 0x32B   => 220                    ,0x32C   => 220, 0x32D   => 220, 0x32E   => 220, 0x32F   => 220, 0x330   => 220                    ,0x331   => 220, 0x332   => 220, 0x333   => 220, 0x339   => 220, 0x33A   => 220                    ,0x33B   => 220, 0x33C   => 220, 0x347   => 220, 0x348   => 220, 0x349   => 220                    ,0x34D   => 220, 0x34E   => 220, 0x353   => 220, 0x354   => 220, 0x355   => 220                    ,0x356   => 220, 0x591   => 220, 0x596   => 220, 0x59B   => 220, 0x5A3   => 220                    ,0x5A4   => 220, 0x5A5   => 220, 0x5A6   => 220, 0x5A7   => 220, 0x5AA   => 220                    ,0x655   => 220, 0x656   => 220, 0x6E3   => 220, 0x6EA   => 220, 0x6ED   => 220                    ,0x731   => 220, 0x734   => 220, 0x737   => 220, 0x738   => 220, 0x739   => 220                    ,0x73B   => 220, 0x73C   => 220, 0x73E   => 220, 0x742   => 220, 0x744   => 220                    ,0x746   => 220, 0x748   => 220, 0x952   => 220, 0xF18   => 220, 0xF19   => 220                    ,0xF35   => 220, 0xF37   => 220, 0xFC6   => 220, 0x193B  => 220, 0x20E8  => 220                    ,0x1D17B => 220, 0x1D17C => 220, 0x1D17D => 220, 0x1D17E => 220, 0x1D17F => 220                    ,0x1D180 => 220, 0x1D181 => 220, 0x1D182 => 220, 0x1D18A => 220, 0x1D18B => 220                    ,0x59A   => 222, 0x5AD   => 222, 0x1929  => 222, 0x302D  => 222, 0x302E  => 224                    ,0x302F  => 224, 0x1D16D => 226, 0x5AE   => 228, 0x18A9  => 228, 0x302B  => 228                    ,0x300   => 230, 0x301   => 230, 0x302   => 230, 0x303   => 230, 0x304   => 230                    ,0x305   => 230, 0x306   => 230, 0x307   => 230, 0x308   => 230, 0x309   => 230                    ,0x30A   => 230, 0x30B   => 230, 0x30C   => 230, 0x30D   => 230, 0x30E   => 230                    ,0x30F   => 230, 0x310   => 230, 0x311   => 230, 0x312   => 230, 0x313   => 230                    ,0x314   => 230, 0x33D   => 230, 0x33E   => 230, 0x33F   => 230, 0x340   => 230                    ,0x341   => 230, 0x342   => 230, 0x343   => 230, 0x344   => 230, 0x346   => 230                    ,0x34A   => 230, 0x34B   => 230, 0x34C   => 230, 0x350   => 230, 0x351   => 230                    ,0x352   => 230, 0x357   => 230, 0x363   => 230, 0x364   => 230, 0x365   => 230                    ,0x366   => 230, 0x367   => 230, 0x368   => 230, 0x369   => 230, 0x36A   => 230                    ,0x36B   => 230, 0x36C   => 230, 0x36D   => 230, 0x36E   => 230, 0x36F   => 230                    ,0x483   => 230, 0x484   => 230, 0x485   => 230, 0x486   => 230, 0x592   => 230                    ,0x593   => 230, 0x594   => 230, 0x595   => 230, 0x597   => 230, 0x598   => 230                    ,0x599   => 230, 0x59C   => 230, 0x59D   => 230, 0x59E   => 230, 0x59F   => 230                    ,0x5A0   => 230, 0x5A1   => 230, 0x5A8   => 230, 0x5A9   => 230, 0x5AB   => 230                    ,0x5AC   => 230, 0x5AF   => 230, 0x5C4   => 230, 0x610   => 230, 0x611   => 230                    ,0x612   => 230, 0x613   => 230, 0x614   => 230, 0x615   => 230, 0x653   => 230                    ,0x654   => 230, 0x657   => 230, 0x658   => 230, 0x6D6   => 230, 0x6D7   => 230                    ,0x6D8   => 230, 0x6D9   => 230, 0x6DA   => 230, 0x6DB   => 230, 0x6DC   => 230                    ,0x6DF   => 230, 0x6E0   => 230, 0x6E1   => 230, 0x6E2   => 230, 0x6E4   => 230                    ,0x6E7   => 230, 0x6E8   => 230, 0x6EB   => 230, 0x6EC   => 230, 0x730   => 230                    ,0x732   => 230, 0x733   => 230, 0x735   => 230, 0x736   => 230, 0x73A   => 230                    ,0x73D   => 230, 0x73F   => 230, 0x740   => 230, 0x741   => 230, 0x743   => 230                    ,0x745   => 230, 0x747   => 230, 0x749   => 230, 0x74A   => 230, 0x951   => 230                    ,0x953   => 230, 0x954   => 230, 0xF82   => 230, 0xF83   => 230, 0xF86   => 230                    ,0xF87   => 230, 0x170D  => 230, 0x193A  => 230, 0x20D0  => 230, 0x20D1  => 230                    ,0x20D4  => 230, 0x20D5  => 230, 0x20D6  => 230, 0x20D7  => 230, 0x20DB  => 230                    ,0x20DC  => 230, 0x20E1  => 230, 0x20E7  => 230, 0x20E9  => 230, 0xFE20  => 230                    ,0xFE21  => 230, 0xFE22  => 230, 0xFE23  => 230, 0x1D185 => 230, 0x1D186 => 230                    ,0x1D187 => 230, 0x1D189 => 230, 0x1D188 => 230, 0x1D1AA => 230, 0x1D1AB => 230                    ,0x1D1AC => 230, 0x1D1AD => 230, 0x315   => 232, 0x31A   => 232, 0x302C  => 232                    ,0x35F   => 233, 0x362   => 233, 0x35D   => 234, 0x35E   => 234, 0x360   => 234                    ,0x361   => 234, 0x345   => 240                    )            );}?>
<?php/** * Loads the reserved strings used to transform problematic strings in URLs. * These are matched against the whole string after all other transformations. * * @copyright (C) 2008-2011 PunBB, partially based on code (C) 2008-2009 FluxBB.org * @license http://www.gnu.org/licenses/gpl.html GPL version 2 or higher * @package PunBB */$forum_reserved_strings = array(	''				=>	'view',	'newpost'		=>	'view',	'newposts'		=>	'view',	'new-post'		=>	'view',	'new-posts'		=>	'view',	'lastpost'		=>	'view',	'lastposts'		=>	'view',	'last-post'		=>	'view',	'last-posts'	=>	'view',);
<?php// Language definitions for frequently used strings$lang_common = array(// Text orientation and encoding'lang_direction'			=>	'ltr',	// ltr (Left-To-Right) or rtl (Right-To-Left)'lang_identifier'			=>	'en',// Number formatting'lang_decimal_point'		=>	'.','lang_thousands_sep'		=>	',',// Notices'Bad request'				=>	'Bad request. The link you followed is incorrect or outdated.','No view'					=>	'You do not have permission to view these forums.','No permission'				=>	'You do not have permission to access this page.','CSRF token mismatch'		=>	'Unable to confirm security token. A likely cause for this is that some time passed between when you first entered the page and when you submitted a form or clicked a link. If that is the case and you would like to continue with your action, please click the Confirm button. Otherwise, you should click the Cancel button to return to where you were.','No cookie'					=>	'You appear to have logged in successfully, however a cookie has not been set. Please check your settings and if applicable, enable cookies for this website.',// Miscellaneous'Forum index'				=>	'Forum index','Submit'					=>	'Submit',	// "name" of submit buttons'Cancel'					=>	'Cancel', // "name" of cancel buttons'Preview'					=>	'Preview',	// submit button to preview message'Delete'					=>	'Delete','Split'						=>	'Split','Ban message'				=>	'You are banned from this forum.','Ban message 2'				=>	'The ban expires at the end of %s.','Ban message 3'				=>	'The administrator or moderator that banned you left the following message:','Ban message 4'				=>	'Please direct any inquiries to the forum administrator at %s.','Never'						=>	'Never','Today'						=>	'Today','Yesterday'					=>	'Yesterday','Forum message'				=>	'Forum message','Maintenance warning'		=>	'<strong>WARNING! %s Enabled.</strong> DO NOT LOGOUT as you will be unable to login again.','Maintenance mode'			=>	'Maintenance Mode','Redirecting'				=>	' Redirecting', // With space!'Forwarding info'			=>	'You should automatically be forwarded to a new page in %s %s.','second'					=>	'second',	// singular'seconds'					=>	'seconds',	// plural'Click redirect'			=>	'Click here if you do not want to wait any longer (or if your browser does not automatically forward you)','Invalid e-mail'			=>	'The email address you entered is invalid.','New posts'					=>	'New posts',	// the link that leads to the first new post'New posts title'			=>	'Find topics containing posts made since your last visit.',	// the popup text for new posts links'Active topics'				=>	'Active topics','Active topics title'		=>	'Find topics which contain recent posts.','Unanswered topics'			=>	'Unanswered topics','Unanswered topics title'	=>	'Find topics which have not been replied to.','Username'					=>	'Username','Registered'				=>	'Registered','Write message'				=>	'Write message','Forum'						=>	'Forum','Posts'						=>	'Posts','Pages'						=>	'Pages','Page'						=>	'Page','BBCode'					=>	'BBCode',	// You probably shouldn't change this'Smilies'					=>	'Smilies','Images'					=>	'Images','You may use'				=>	'You may use: %s','and'						=>	'and','Image link'				=>	'image',	// This is displayed (i.e. <image>) instead of images when "Show images" is disabled in the profile'wrote'						=>	'wrote',	// For [quote]'s (e.g., User wrote:)'Code'						=>	'Code',		// For [code]'s'Forum mailer'				=>	'%s Mailer',	// As in "MyForums Mailer" in the signature of outgoing e-mails'Write message legend'		=>	'Compose your post','Required information'		=>	'Required information','Reqmark'					=>	'*','Required'					=>	'(Required)','Required warn'				=>	'All fields labelled %s must be completed before the form is submitted.','Crumb separator'			=>	' &rarr;&#160;', // The character or text that separates links in breadcrumbs'Title separator'			=>	'  ','Page separator'			=>	'&#160;', //The character or text that separates page numbers'Spacer'					=>	'', // Ellipsis for paginate'Paging separator'			=>	' ', //The character or text that separates page numbers for page navigation generally'Previous'					=>	'Previous','Next'						=>	'Next','Cancel redirect'			=>	'Operation cancelled.','No confirm redirect'		=>	'No confirmation provided. Operation cancelled.','Please confirm'			=>	'Please confirm:','Help page'					=>	'Help with: %s','Re'						=>	'Re:','Page info'					=>	'(Page %1$s of %2$s)','Item info single'			=>	'%s: %s','Item info plural'			=>	'%s: %s to %s of %s', // e.g. Topics [ 10 to 20 of 30 ]'Info separator'			=>	' ', // e.g. 1 Page | 10 Topics'Powered by'				=>	'Powered by %s, supported by %s.','Maintenance'				=>	'Maintenance','Installed extension'		=>	'The %s official extension is installed. Copyright &copy; 2003&ndash;2011 <a href="http://punbb.informer.com/">PunBB</a>.','Installed extensions'		=>	'Currently installed <span id="extensions-used" title="%s">%s official extensions</span>. Copyright &copy; 2003&ndash;2011 <a href="http://punbb.informer.com/">PunBB</a>.',// CSRF confirmation form'Confirm'					=>	'Confirm',	// Button'Confirm action'			=>	'Confirm action','Confirm action head'		=>	'Please confirm or cancel your last action',// Title'Title'						=>	'Title','Member'					=>	'Member',	// Default title'Moderator'					=>	'Moderator','Administrator'				=>	'Administrator','Banned'					=>	'Banned','Guest'						=>	'Guest',// Stuff for include/parser.php'BBCode error 1'			=>	'[/%1$s] was found without a matching [%1$s]','BBCode error 2'			=>	'[%s] tag is empty','BBCode error 3'			=>	'[%1$s] was opened within [%2$s], this is not allowed','BBCode error 4'			=>	'[%s] was opened within itself, this is not allowed','BBCode error 5'			=>	'[%1$s] was found without a matching [/%1$s]','BBCode error 6'			=>	'[%s] tag had an empty attribute section','BBCode nested list'		=>	'[list] tags cannot be nested','BBCode code problem'		=>	'There is a problem with your [code] tags',// Stuff for the navigator (top of every page)'Index'						=>	'Index','User list'					=>	'User list','Rules'						=>  'Rules','Search'					=>  'Search','Register'					=>  'Register','register'					=>	'register','Login'						=>  'Login','login'						=>	'login','Not logged in'				=>  'You are not logged in.','Profile'					=>	'Profile','Logout'					=>	'Logout','Logged in as'				=>	'Logged in as %s.','Admin'						=>	'Administration','Last visit'				=>	'Last visit %s','Mark all as read'			=>	'Mark all topics as read','Login nag'					=>	'Please login or register.','New reports'				=>	'New reports',// Alerts'New alerts'				=>	'New Alerts','Maintenance alert'			=>	'<strong>WARNING! Maintenance mode enabled.</strong> This board is currently in maintenance mode. <em>DO NOT</em> logout, if you do you will not be able to login again.','Updates'					=>	'PunBB updates:','Updates failed'			=>	'The latest attempt at checking for updates against the punbb.informer.com updates service failed. This probably just means that the service is temporarily overloaded or out of order. However, if this alert does not disappear within a day or two, you should disable the automatic check for updates and check for updates manually in the future.','Updates version n hf'		=>	'A newer version of PunBB, version %s, is available for download at <a href="http://punbb.informer.com/">punbb.informer.com</a>. Furthermore, one or more hotfixes are available for install on the <a href="%s">Manage hotfixes</a> tab of the admin interface.','Updates version'			=>	'A newer version of PunBB, version %s, is available for download at <a href="http://punbb.informer.com/">punbb.informer.com</a>.','Updates hf'				=>	'One or more hotfixes are available for install on the <a href="%s">Manage hotfixes</a> tab of the admin interface.','Database mismatch'			=>	'Database version mismatch','Database mismatch alert'	=>	'Your PunBB database is meant to be used in conjunction with a newer version of the PunBB code. This mismatch can lead to your forum not working properly. It is suggested that you upgrade your forum to the newest version of PunBB.',// Stuff for Jump Menu'Go'						=>	'Go',		// submit button in forum jump'Jump to'					=>	'Jump to forum:',// For extern.php RSS feed'RSS description'			=>	'The most recent topics at %s.','RSS description topic'		=>	'The most recent posts in %s.','RSS reply'					=>	'Re: ',	// The topic subject will be appended to this string (to signify a reply)// Accessibility'Skip to content'			=>	'Skip to forum content',// Debug information'Querytime'					=>	'Generated in %1$s seconds, %2$s queries executed','Debug table'				=>	'Debug information','Debug summary'				=>	'Database query performance information','Query times'				=>	'Time (s)','Query'						=>	'Query','Total query time'			=>	'Total query time',);
<?php/*** @version $Id: core.php,v 1.5 2006/02/28 22:12:25 harryf Exp $* @package utf8* @subpackage strings*//*** Define UTF8_CORE as required*/if ( !defined('UTF8_CORE') ) {    define('UTF8_CORE',TRUE);}//--------------------------------------------------------------------/*** Wrapper round mb_strlen* Assumes you have mb_internal_encoding to UTF-8 already* Note: this function does not count bad bytes in the string - these* are simply ignored* @param string UTF-8 string* @return int number of UTF-8 characters in string* @package utf8* @subpackage strings*/function utf8_strlen($str){    return mb_strlen($str);}//--------------------------------------------------------------------/*** Assumes mbstring internal encoding is set to UTF-8* Wrapper around mb_strpos* Find position of first occurrence of a string* @param string haystack* @param string needle (you should validate this with utf8_is_valid)* @param integer offset in characters (from left)* @return mixed integer position or FALSE on failure* @package utf8* @subpackage strings*/function utf8_strpos($str, $search, $offset = FALSE){    if ( $offset === FALSE ) {        return mb_strpos($str, $search);    } else {        return mb_strpos($str, $search, $offset);    }}//--------------------------------------------------------------------/*** Assumes mbstring internal encoding is set to UTF-8* Wrapper around mb_strrpos* Find position of last occurrence of a char in a string* @param string haystack* @param string needle (you should validate this with utf8_is_valid)* @param integer (optional) offset (from left)* @return mixed integer position or FALSE on failure* @package utf8* @subpackage strings*/function utf8_strrpos($str, $search, $offset = FALSE){    if ( $offset === FALSE ) {        # Emulate behaviour of strrpos rather than raising warning        if ( empty($str) ) {            return FALSE;        }        return mb_strrpos($str, $search);    } else {        if ( !is_int($offset) ) {            trigger_error('utf8_strrpos expects parameter 3 to be long',E_USER_WARNING);            return FALSE;        }        $str = mb_substr($str, $offset);        if ( FALSE !== ( $pos = mb_strrpos($str, $search) ) ) {            return $pos + $offset;        }        return FALSE;    }}//--------------------------------------------------------------------/*** Assumes mbstring internal encoding is set to UTF-8* Wrapper around mb_substr* Return part of a string given character offset (and optionally length)* @param string* @param integer number of UTF-8 characters offset (from left)* @param integer (optional) length in UTF-8 characters from offset* @return mixed string or FALSE if failure* @package utf8* @subpackage strings*/function utf8_substr($str, $offset, $length = FALSE){    if ( $length === FALSE ) {        return mb_substr($str, $offset);    } else {        return mb_substr($str, $offset, $length);    }}//--------------------------------------------------------------------/*** Assumes mbstring internal encoding is set to UTF-8* Wrapper around mb_strtolower* Make a string lowercase* Note: The concept of a characters "case" only exists is some alphabets* such as Latin, Greek, Cyrillic, Armenian and archaic Georgian - it does* not exist in the Chinese alphabet, for example. See Unicode Standard* Annex #21: Case Mappings* @param string* @return mixed either string in lowercase or FALSE is UTF-8 invalid* @package utf8* @subpackage strings*/function utf8_strtolower($str){    return mb_strtolower($str);}//--------------------------------------------------------------------/*** Assumes mbstring internal encoding is set to UTF-8* Wrapper around mb_strtoupper* Make a string uppercase* Note: The concept of a characters "case" only exists is some alphabets* such as Latin, Greek, Cyrillic, Armenian and archaic Georgian - it does* not exist in the Chinese alphabet, for example. See Unicode Standard* Annex #21: Case Mappings* @param string* @return mixed either string in lowercase or FALSE is UTF-8 invalid* @package utf8* @subpackage strings*/function utf8_strtoupper($str){    return mb_strtoupper($str);}
<?php/** * Regular URL scheme. * * @copyright (C) 2008-2011 PunBB, partially based on code (C) 2008-2009 FluxBB.org * @license http://www.gnu.org/licenses/gpl.html GPL version 2 or higher * @package PunBB */// Make sure no one attempts to run this script "directly"if (!defined('FORUM'))	exit;// These are the regular, "non-SEF" URLs (you probably don't want to edit these)$forum_url = array(	'change_email'					=>	'profile.php?action=change_email&amp;id=$1',	'change_email_key'				=>	'profile.php?action=change_email&amp;id=$1&amp;key=$2',	'change_password'				=>	'profile.php?action=change_pass&amp;id=$1',	'change_password_key'			=>	'profile.php?action=change_pass&amp;id=$1&amp;key=$2',	'delete_user'					=>	'profile.php?action=delete_user&amp;id=$1',	'delete'						=>	'delete.php?id=$1',	'delete_avatar'					=>	'profile.php?action=delete_avatar&amp;id=$1&amp;csrf_token=$2',	'edit'							=>	'edit.php?id=$1',	'email'							=>	'misc.php?email=$1',	'forum'							=>	'viewforum.php?id=$1',	'forum_rss'						=>	'extern.php?action=feed&amp;fid=$1&amp;type=rss',	'forum_atom'					=>	'extern.php?action=feed&amp;fid=$1&amp;type=atom',	'help'							=>	'help.php?section=$1',	'index'							=>	'index.php',	'index_rss'						=>	'extern.php?action=feed&amp;type=rss',	'index_atom'					=>	'extern.php?action=feed&amp;type=atom',	'login'							=>	'login.php',	'logout'						=>	'login.php?action=out&amp;id=$1&amp;csrf_token=$2',	'mark_read'						=>	'misc.php?action=markread&amp;csrf_token=$1',	'mark_forum_read'				=>	'misc.php?action=markforumread&amp;fid=$1&amp;csrf_token=$2',	'new_topic'						=>	'post.php?fid=$1',	'new_reply'						=>	'post.php?tid=$1',	'post'							=>	'viewtopic.php?pid=$1#p$1',	'profile_about'					=>	'profile.php?section=about&amp;id=$1',	'profile_identity'				=>	'profile.php?section=identity&amp;id=$1',	'profile_settings'				=>	'profile.php?section=settings&amp;id=$1',	'profile_avatar'				=>	'profile.php?section=avatar&amp;id=$1',	'profile_signature'				=>	'profile.php?section=signature&amp;id=$1',	'profile_admin'					=>	'profile.php?section=admin&amp;id=$1',	'quote'							=>	'post.php?tid=$1&amp;qid=$2',	'register'						=>	'register.php',	'report'						=>	'misc.php?report=$1',	'request_password'				=>	'login.php?action=forget',	'rules'							=>	'misc.php?action=rules',	'search'						=>	'search.php',	'search_advanced'				=>	'search.php?advanced=1',	'search_resultft'				=>	'search.php?action=search&amp;keywords=$1&amp;author=$3&amp;forum=$2&amp;search_in=$4&amp;sort_by=$5&amp;sort_dir=$6&amp;show_as=$7',	'search_results'				=>	'search.php?search_id=$1',	'search_new'					=>	'search.php?action=show_new',	'search_new_results'			=>	'search.php?action=show_new&amp;forum=$1',	'search_recent'					=>	'search.php?action=show_recent',	'search_recent_results'			=>	'search.php?action=show_recent&amp;value=$1',	'search_unanswered'				=>	'search.php?action=show_unanswered',	'search_subscriptions'			=>	'search.php?action=show_subscriptions&amp;user_id=$1',	'search_user_posts'				=>	'search.php?action=show_user_posts&amp;user_id=$1',	'search_user_topics'			=>	'search.php?action=show_user_topics&amp;user_id=$1',	'subscribe'						=>	'misc.php?subscribe=$1&amp;csrf_token=$2',	'topic'							=>	'viewtopic.php?id=$1',	'topic_rss'						=>	'extern.php?action=feed&amp;tid=$1&amp;type=rss',	'topic_atom'					=>	'extern.php?action=feed&amp;tid=$1&amp;type=atom',	'topic_new_posts'				=>	'viewtopic.php?id=$1&amp;action=new',	'topic_last_post'				=>	'viewtopic.php?id=$1&amp;action=last',	'unsubscribe'					=>	'misc.php?unsubscribe=$1&amp;csrf_token=$2',	'user'							=>	'profile.php?id=$1',	'users'							=>	'userlist.php',	'users_browse'					=>	'userlist.php?show_group=$1&amp;sort_by=$2&amp;sort_dir=$3&amp;username=$4',	'page'							=>	'&amp;p=$1',	'moderate_forum'				=>	'moderate.php?fid=$1',	'get_host'						=>	'moderate.php?get_host=$1',	'move'							=>	'moderate.php?fid=$1&amp;move_topics=$2',	'open'							=>	'moderate.php?fid=$1&amp;open=$2&amp;csrf_token=$3',	'close'							=>	'moderate.php?fid=$1&amp;close=$2&amp;csrf_token=$3',	'stick'							=>	'moderate.php?fid=$1&amp;stick=$2&amp;csrf_token=$3',	'unstick'						=>	'moderate.php?fid=$1&amp;unstick=$2&amp;csrf_token=$3',	'moderate_topic'				=>	'moderate.php?fid=$1&amp;tid=$2',	'admin_index'					=>	'admin/index.php',	'admin_bans'					=>	'admin/bans.php?sort_by=1',	'admin_categories'				=>	'admin/categories.php',	'admin_censoring'				=>	'admin/censoring.php',	'admin_extensions_manage'		=>	'admin/extensions.php?section=manage',	'admin_extensions_hotfixes'		=>	'admin/extensions.php?section=hotfixes',	'admin_forums'					=>	'admin/forums.php',	'admin_groups'					=>	'admin/groups.php',	'admin_loader'					=>	'admin/loader.php',	'admin_reindex'					=>	'admin/reindex.php',	'admin_settings_setup'			=>	'admin/settings.php?section=setup',	'admin_settings_features'		=>	'admin/settings.php?section=features',	'admin_settings_content'		=>	'admin/settings.php?section=content',	'admin_settings_email'			=>	'admin/settings.php?section=email',	'admin_settings_announcements'	=>	'admin/settings.php?section=announcements',	'admin_settings_registration'	=>	'admin/settings.php?section=registration',	'admin_settings_communications'	=>	'admin/settings.php?section=communications',	'admin_settings_maintenance'	=>	'admin/settings.php?section=maintenance',	'admin_prune'					=>	'admin/prune.php',	'admin_ranks'					=>	'admin/ranks.php',	'admin_reports'					=>	'admin/reports.php',	'admin_users'					=>	'admin/users.php');
<?php/** * Loads the reserved strings used to transform problematic strings in URLs. * These are matched against the whole string after all other transformations. * * @copyright (C) 2008-2011 PunBB, partially based on code (C) 2008-2009 FluxBB.org * @license http://www.gnu.org/licenses/gpl.html GPL version 2 or higher * @package PunBB */$forum_reserved_strings = array(	''				=>	'view',	'newpost'		=>	'view',	'newposts'		=>	'view',	'new-post'		=>	'view',	'new-posts'		=>	'view',	'lastpost'		=>	'view',	'lastposts'		=>	'view',	'last-post'		=>	'view',	'last-posts'	=>	'view',);
<?php// Language definitions used in all admin files$lang_admin_users = array(// admin_users'Search head'					=>	'Find users','User search head'				=>	'Enter one or more criteria. Use wildcard character <strong>*</strong> for partial matches.','Searches personal legend'		=>	'Personal details','Username label'				=>	'Username','Title label'					=>	'Title','Real name label'				=>	'Real name','Location label'				=>	'Location','Signature label'				=>	'Signature','Admin note label'				=>	'Admin note','Searches contact legend'		=>	'Contact details','E-mail address label'			=>	'Email address','Website label'					=>	'Website','Searches activity legend'		=>	'User activity','More posts label'				=>	'More posts than','Less posts label'				=>	'Less posts than','Number of posts help'			=>	'(Number of posts)','Last post after label'			=>	'Last post is after','Last post before label'		=>	'Last post is before','Registered after label'		=>	'Registered after','Registered before label'		=>	'Registered before','Date format help'				=>	'[ yyyy-mm-dd hh:mm:ss ]','Jabber label'					=>	'Jabber','ICQ label'						=>	'ICQ','MSN Messenger label'			=>	'MSN Messenger','AOL IM label'					=>	'AOL IM','Yahoo Messenger label'			=>	'Yahoo! Messenger','User results head'				=>	'Sort user search results','User results legend'			=>	'Search results','Order by label'				=>	'Order by','Sort order label'				=>	'Sort order','User group label'				=>	'User group','IP search head'				=>	'Find a specific IP address in the post database','IP search legend'				=>	'Enter IP to search for','IP address label'				=>	'IP address','User information'				=>	'User information','IP address'					=>	'IP address','Username'						=>	'Username','E-mail'						=>	'Email','Admin note'					=>	'Admin note','Invalid IP address'			=>	'The IP address you entered is not correctly formatted.','Users matching criteria'		=>	'Results matching user search criteria','User IP stats'					=>	'IP statistics for user','IP matching criteria'			=>	'Results matching IP address','Users found'					=>	'Users found [ %s ]','IP addresses found'			=>	'IP addresses found [ %s ]','Moderate users'				=>	'Moderate users','Submit search'					=>	'Submit search','Not verified'					=>	'Not verified','Registered'					=>	'Registered','Last post'						=>	'Last post','Ascending'						=>	'Ascending','Descending'					=>	'Descending','All groups'					=>	'All groups','Unverified users'				=>	'Unverified users','Non numeric value message'		=>	'You entered a non-numeric value into a numeric only column.','Invalid date/time message'		=>	'You entered an invalid date/time.','No search terms message'		=>	'You didn\'t enter any search terms.','Delete users'					=>	'Delete users','Delete warning'				=>	'<strong>WARNING!</strong> Deleted users and/or posts cannot be restored. If you choose not to delete the posts made by these users, the posts can only be deleted manually at a later time.','Delete posts legend'			=>	'You may choose to delete posts these users have made','Confirm delete'				=>	'Confirm delete','Delete posts'					=>	'Delete posts','Delete posts label'			=>	'Enable to delete all posts and topics these users have made.','Users deleted'					=>	'Users deleted.','Ban'							=>	'Ban','Ban users'						=>	'Ban users','Change group'					=>	'Change group','Delete admin message'			=>	'Administrators cannot be deleted. In order to delete an administrator, you must first move him/her to a different user group.','Ban admin message'				=>	'One of the selected users is an administrator and can\'t be banned. If you want to ban an administrator, you must first move him/her to any other user group.','Users banned'					=>	'Users banned.','Mass ban info'					=>	'You may set a message to be displayed to the banned users and set the date their bans are to expire.','Ban settings legend'			=> 	'Ban users','Change group head'				=>	'Move the selected users to a new group','User groups updated'			=>	'User groups updated.','Move users legend'				=>	'Move users','No users selected'				=>	'No users selected.','Move users to label'			=>	'Move users to group',// admin_users tables'Username column'				=>	'Username  Email  Admin notes','Title column'					=>	'Title  Status','Posts'							=>	'Posts','Actions'						=>	'Action(s)','View IP stats'					=>	'View IP stats','Show posts'					=>	'Show posts','Last used'						=>	'Last used','Times found'					=>	'Times found','Find more users'				=>	'Find more users for this IP','No posts by user'				=>	'There are currently no posts by that user in the forum.','Guest'							=>	'Guest','Cannot find IP'				=>	'The supplied IP address could not be found in the database.','Not verified'					=>	'Not verified','No match'						=>	'No match','User search results'			=>	'User search results');
<?php/** * SEF URLs that use a folder-like layout and include topic name and forum name * where applicable. * * @copyright (C) 2008-2011 PunBB, partially based on code (C) 2008-2009 FluxBB.org * @license http://www.gnu.org/licenses/gpl.html GPL version 2 or higher * @package PunBB */// Make sure no one attempts to run this script "directly"if (!defined('FORUM'))	exit;// These are the "fancy" folder based SEF URLs$forum_url = array(	'change_email'					=>	'change/email/$1/',	'change_email_key'				=>	'change/email/$1/$2/',	'change_password'				=>	'change/password/$1/',	'change_password_key'			=>	'change/password/$1/$2/',	'delete'						=>	'delete/$1/',	'delete_avatar'					=>	'delete/avatar/$1/$2/',	'delete_user'					=>	'delete/user/$1/',	'edit'							=>	'edit/$1/',	'email'							=>	'email/$1/',	'forum'							=>	'forum/$1/$2/',	'forum_rss'						=>	'feed/rss/forum/$1/',	'forum_atom'					=>	'feed/atom/forum/$1/',	'help'							=>	'help/$1/',	'index'							=>	'',	'index_rss'						=>	'feed/rss/',	'index_atom'					=>	'feed/atom/',	'login'							=>	'login/',	'logout'						=>	'logout/$1/$2/',	'mark_read'						=>	'mark/read/$1/',	'mark_forum_read'				=>	'mark/forum/$1/read/$2/',	'new_topic'						=>	'new/topic/$1/',	'new_reply'						=>	'new/reply/$1/',	'post'							=>	'post/$1/#p$1',	'profile_about'					=>	'user/$1/about/',	'profile_identity'				=>	'user/$1/identity/',	'profile_settings'				=>	'user/$1/settings/',	'profile_avatar'				=>	'user/$1/avatar/',	'profile_signature'				=>	'user/$1/signature/',	'profile_admin'					=>	'user/$1/admin/',	'quote'							=>	'new/reply/$1/quote/$2/',	'register'						=>	'register/',	'report'						=>	'report/$1/',	'request_password'				=>	'request/password/',	'rules'							=>	'rules/',	'search'						=>	'search/',	'search_advanced'				=>	'search/advanced/',	'search_resultft'				=>	'search/k$1/$2/a$3/$4/$5/$6/$7/',	'search_results'				=>	'search/$1/',	'search_new'					=>	'search/new/',	'search_new_results'			=>	'search/new/$1/',	'search_recent'					=>	'search/recent/',	'search_recent_results'			=>	'search/recent/$1/',	'search_unanswered'				=>	'search/unanswered/',	'search_subscriptions'			=>	'search/subscriptions/$1/',	'search_user_posts'				=>	'search/posts/user/$1/',	'search_user_topics'			=>	'search/topics/user/$1/',	'subscribe'						=>	'subscribe/$1/$2/',	'topic'							=>	'topic/$1/$2/',	'topic_rss'						=>	'feed/rss/topic/$1/',	'topic_atom'					=>	'feed/atom/topic/$1/',	'topic_new_posts'				=>	'topic/$1/$2/new/posts/',	'topic_last_post'				=>	'topic/$1/last/post/',	'unsubscribe'					=>	'unsubscribe/$1/$2/',	'user'							=>	'user/$1/',	'users'							=>	'users/',	'users_browse'					=>	'users/$4/$1/$2/$3/',	'page'							=>	'page/$1/',	'moderate_forum'				=>	'moderate/$1/',	'get_host'						=>	'get_host/$1/',	'move'							=>	'move_topics/$1/$2/',	'open'							=>	'open/$1/$2/$3/',	'close'							=>	'close/$1/$2/$3/',	'stick'							=>	'stick/$1/$2/$3/',	'unstick'						=>	'unstick/$1/$2/$3/',	'moderate_topic'				=>	'moderate/$1/$2/',	'admin_index'					=>	'admin/index.php',	'admin_bans'					=>	'admin/bans.php?sort_by=1',	'admin_categories'				=>	'admin/categories.php',	'admin_censoring'				=>	'admin/censoring.php',	'admin_extensions_manage'		=>	'admin/extensions.php?section=manage',	'admin_extensions_hotfixes'		=>	'admin/extensions.php?section=hotfixes',	'admin_forums'					=>	'admin/forums.php',	'admin_groups'					=>	'admin/groups.php',	'admin_loader'					=>	'admin/loader.php',	'admin_reindex'					=>	'admin/reindex.php',	'admin_settings_setup'			=>	'admin/settings.php?section=setup',	'admin_settings_features'		=>	'admin/settings.php?section=features',	'admin_settings_content'		=>	'admin/settings.php?section=content',	'admin_settings_email'			=>	'admin/settings.php?section=email',	'admin_settings_announcements'	=>	'admin/settings.php?section=announcements',	'admin_settings_registration'	=>	'admin/settings.php?section=registration',	'admin_settings_communications'	=>	'admin/settings.php?section=communications',	'admin_settings_maintenance'	=>	'admin/settings.php?section=maintenance',	'admin_prune'					=>	'admin/prune.php',	'admin_ranks'					=>	'admin/ranks.php',	'admin_reports'					=>	'admin/reports.php',	'admin_users'					=>	'admin/users.php');
<?php/** * Post deletion page. * * Deletes the specified post (and, if necessary, the topic it is in). * * @copyright (C) 2008-2011 PunBB, partially based on code (C) 2008-2009 FluxBB.org * @license http://www.gnu.org/licenses/gpl.html GPL version 2 or higher * @package PunBB */if (!defined('FORUM_ROOT'))	define('FORUM_ROOT', './');require FORUM_ROOT.'include/common.php';($hook = get_hook('dl_start')) ? eval($hook) : null;if ($forum_user['g_read_board'] == '0')	message($lang_common['No view']);// Load the delete.php language filerequire FORUM_ROOT.'lang/'.$forum_user['language'].'/delete.php';$id = isset($_GET['id']) ? intval($_GET['id']) : 0;if ($id < 1)	message($lang_common['Bad request']);// Fetch some info about the post, the topic and the forum$query = array(	'SELECT'	=> 'f.id AS fid, f.forum_name, f.moderators, f.redirect_url, fp.post_replies, fp.post_topics, t.id AS tid, t.subject, t.first_post_id, t.closed, p.poster, p.poster_id, p.message, p.hide_smilies, p.posted',	'FROM'		=> 'posts AS p',	'JOINS'		=> array(		array(			'INNER JOIN'	=> 'topics AS t',			'ON'			=> 't.id=p.topic_id'		),		array(			'INNER JOIN'	=> 'forums AS f',			'ON'			=> 'f.id=t.forum_id'		),		array(			'LEFT JOIN'		=> 'forum_perms AS fp',			'ON'			=> '(fp.forum_id=f.id AND fp.group_id='.$forum_user['g_id'].')'		)	),	'WHERE'		=> '(fp.read_forum IS NULL OR fp.read_forum=1) AND p.id='.$id);($hook = get_hook('dl_qr_get_post_info')) ? eval($hook) : null;$result = $forum_db->query_build($query) or error(__FILE__, __LINE__);$cur_post = $forum_db->fetch_assoc($result);if (!$cur_post)	message($lang_common['Bad request']);// Sort out who the moderators are and if we are currently a moderator (or an admin)$mods_array = ($cur_post['moderators'] != '') ? unserialize($cur_post['moderators']) : array();$forum_page['is_admmod'] = ($forum_user['g_id'] == FORUM_ADMIN || ($forum_user['g_moderator'] == '1' && array_key_exists($forum_user['username'], $mods_array))) ? true : false;$cur_post['is_topic'] = ($id == $cur_post['first_post_id']) ? true : false;($hook = get_hook('dl_pre_permission_check')) ? eval($hook) : null;// Do we have permission to delete this post?if ((($forum_user['g_delete_posts'] == '0' && !$cur_post['is_topic']) ||	($forum_user['g_delete_topics'] == '0' && $cur_post['is_topic']) ||	$cur_post['poster_id'] != $forum_user['id'] ||	$cur_post['closed'] == '1') &&	!$forum_page['is_admmod'])	message($lang_common['No permission']);($hook = get_hook('dl_post_selected')) ? eval($hook) : null;// User pressed the cancel buttonif (isset($_POST['cancel']))	redirect(forum_link($forum_url['post'], $id), $lang_common['Cancel redirect']);// User pressed the delete buttonelse if (isset($_POST['delete'])){	($hook = get_hook('dl_form_submitted')) ? eval($hook) : null;	if (!isset($_POST['req_confirm']))		redirect(forum_link($forum_url['post'], $id), $lang_common['No confirm redirect']);	if ($cur_post['is_topic'])	{		// Delete the topic and all of it's posts		delete_topic($cur_post['tid'], $cur_post['fid']);		$forum_flash->add_info($lang_delete['Topic del redirect']);		($hook = get_hook('dl_topic_deleted_pre_redirect')) ? eval($hook) : null;		redirect(forum_link($forum_url['forum'], array($cur_post['fid'], sef_friendly($cur_post['forum_name']))), $lang_delete['Topic del redirect']);	}	else	{		// Delete just this one post		delete_post($id, $cur_post['tid'], $cur_post['fid']);		$forum_flash->add_info($lang_delete['Post del redirect']);		($hook = get_hook('dl_post_deleted_pre_redirect')) ? eval($hook) : null;		redirect(forum_link($forum_url['topic'], array($cur_post['tid'], sef_friendly($cur_post['subject']))), $lang_delete['Post del redirect']);	}}// Run the post through the parserif (!defined('FORUM_PARSER_LOADED'))	require FORUM_ROOT.'include/parser.php';$cur_post['message'] = parse_message($cur_post['message'], $cur_post['hide_smilies']);// Setup form$forum_page['group_count'] = $forum_page['item_count'] = $forum_page['fld_count'] = 0;$forum_page['form_action'] = forum_link($forum_url['delete'], $id);$forum_page['hidden_fields'] = array(	'form_sent'		=> '<input type="hidden" name="form_sent" value="1" />',	'csrf_token'	=> '<input type="hidden" name="csrf_token" value="'.generate_form_token($forum_page['form_action']).'" />');// Setup form information$forum_page['frm_info'] = array(	'<li><span>'.$lang_delete['Forum'].':<strong> '.forum_htmlencode($cur_post['forum_name']).'</strong></span></li>',	'<li><span>'.$lang_delete['Topic'].':<strong> '.forum_htmlencode($cur_post['subject']).'</strong></span></li>',	'<li><span>'.sprintf((($cur_post['is_topic']) ? $lang_delete['Delete topic info'] : $lang_delete['Delete post info']), forum_htmlencode($cur_post['poster']), format_time($cur_post['posted'])).'</span></li>');// Generate the post heading$forum_page['post_ident'] = array();$forum_page['post_ident']['byline'] = '<span class="post-byline">'.sprintf((($cur_post['is_topic']) ? $lang_delete['Topic byline'] : $lang_delete['Reply byline']), '<strong>'.forum_htmlencode($cur_post['poster']).'</strong>').'</span>';$forum_page['post_ident']['link'] = '<span class="post-link"><a class="permalink" href="'.forum_link($forum_url['post'], $cur_post['tid']).'">'.format_time($cur_post['posted']).'</a></span>';($hook = get_hook('dl_pre_item_ident_merge')) ? eval($hook) : null;// Generate the post titleif ($cur_post['is_topic'])	$forum_page['item_subject'] = sprintf($lang_delete['Topic title'], $cur_post['subject']);else	$forum_page['item_subject'] = sprintf($lang_delete['Reply title'], $cur_post['subject']);$forum_page['item_subject'] = forum_htmlencode($forum_page['item_subject']);// Setup breadcrumbs$forum_page['crumbs'] = array(	array($forum_config['o_board_title'], forum_link($forum_url['index'])),	array($cur_post['forum_name'], forum_link($forum_url['forum'], array($cur_post['fid'], sef_friendly($cur_post['forum_name'])))),	array($cur_post['subject'], forum_link($forum_url['topic'], array($cur_post['tid'], sef_friendly($cur_post['subject'])))),	(($cur_post['is_topic']) ? $lang_delete['Delete topic'] : $lang_delete['Delete post']));($hook = get_hook('dl_pre_header_load')) ? eval($hook) : null;define ('FORUM_PAGE', 'postdelete');require FORUM_ROOT.'header.php';// START SUBST - <!-- forum_main -->ob_start();($hook = get_hook('dl_main_output_start')) ? eval($hook) : null;?>	<div class="main-content main-frm">		<div class="ct-box info-box">			<ul class="info-list">				<?php echo implode("\n\t\t\t\t", $forum_page['frm_info'])."\n" ?>			</ul>		</div><?php ($hook = get_hook('dl_pre_post_display')) ? eval($hook) : null; ?>		<div class="post singlepost">			<div class="posthead">				<h3 class="hn post-ident"><?php echo implode(' ', $forum_page['post_ident']) ?></h3><?php ($hook = get_hook('dl_new_post_head_option')) ? eval($hook) : null; ?>			</div>			<div class="postbody">				<div class="post-entry">					<h4 class="entry-title hn"><?php echo $forum_page['item_subject'] ?></h4>					<div class="entry-content">						<?php echo $cur_post['message']."\n" ?>					</div><?php ($hook = get_hook('dl_new_post_entry_data')) ? eval($hook) : null; ?>				</div>			</div>		</div>		<form class="frm-form" method="post" accept-charset="utf-8" action="<?php echo $forum_page['form_action'] ?>">			<div class="hidden">				<?php echo implode("\n\t\t\t\t", $forum_page['hidden_fields'])."\n" ?>			</div><?php ($hook = get_hook('dl_pre_confirm_delete_fieldset')) ? eval($hook) : null; ?>			<fieldset class="frm-group group<?php echo ++$forum_page['group_count'] ?>">				<legend class="group-legend"><strong><?php echo ($cur_post['is_topic']) ? $lang_delete['Delete topic'] : $lang_delete['Delete post'] ?></strong></legend><?php ($hook = get_hook('dl_pre_confirm_delete_checkbox')) ? eval($hook) : null; ?>				<div class="sf-set set<?php echo ++$forum_page['item_count'] ?>">					<div class="sf-box checkbox">						<span class="fld-input"><input type="checkbox" id="fld<?php echo ++$forum_page['fld_count'] ?>" name="req_confirm" value="1" checked="checked" /></span>						<label for="fld<?php echo $forum_page['fld_count'] ?>"><span><?php echo $lang_delete['Please confirm'] ?></span> <?php printf(((($cur_post['is_topic'])) ? $lang_delete['Delete topic label'] : $lang_delete['Delete post label']), forum_htmlencode($cur_post['poster']), format_time($cur_post['posted'])) ?></label>					</div>				</div><?php ($hook = get_hook('dl_pre_confirm_delete_fieldset_end')) ? eval($hook) : null; ?>			</fieldset><?php ($hook = get_hook('dl_confirm_delete_fieldset_end')) ? eval($hook) : null; ?>			<div class="frm-buttons">				<span class="submit primary"><input type="submit" name="delete" value="<?php echo ($cur_post['is_topic']) ? $lang_delete['Delete topic'] : $lang_delete['Delete post'] ?>" /></span>				<span class="cancel"><input type="submit" name="cancel" value="<?php echo $lang_common['Cancel'] ?>" formnovalidate /></span>			</div>		</form>	</div><?php$forum_id = $cur_post['fid'];($hook = get_hook('dl_end')) ? eval($hook) : null;$tpl_temp = forum_trim(ob_get_contents());$tpl_main = str_replace('<!-- forum_main -->', $tpl_temp, $tpl_main);ob_end_clean();// END SUBST - <!-- forum_main -->require FORUM_ROOT.'footer.php';
<?php/** * SEF URLs that use a folder-like layout. * * @copyright (C) 2008-2011 PunBB, partially based on code (C) 2008-2009 FluxBB.org * @license http://www.gnu.org/licenses/gpl.html GPL version 2 or higher * @package PunBB */// Make sure no one attempts to run this script "directly"if (!defined('FORUM'))	exit;// These are the simple folder based SEF URLs$forum_url = array(	'change_email'					=>	'change/email/$1/',	'change_email_key'				=>	'change/email/$1/$2/',	'change_password'				=>	'change/password/$1/',	'change_password_key'			=>	'change/password/$1/$2/',	'delete'						=>	'delete/$1/',	'delete_avatar'					=>	'delete/avatar/$1/$2/',	'delete_user'					=>	'delete/user/$1/',	'edit'							=>	'edit/$1/',	'email'							=>	'email/$1/',	'forum'							=>	'forum/$1/',	'forum_rss'						=>	'feed/rss/forum/$1/',	'forum_atom'					=>	'feed/atom/forum/$1/',	'help'							=>	'help/$1/',	'index'							=>	'',	'index_rss'						=>	'feed/rss/',	'index_atom'					=>	'feed/atom/',	'login'							=>	'login/',	'logout'						=>	'logout/$1/$2/',	'mark_read'						=>	'mark/read/$1/',	'mark_forum_read'				=>	'mark/forum/$1/read/$2/',	'new_topic'						=>	'new/topic/$1/',	'new_reply'						=>	'new/reply/$1/',	'post'							=>	'post/$1/#p$1',	'profile_about'					=>	'user/$1/about/',	'profile_identity'				=>	'user/$1/identity/',	'profile_settings'				=>	'user/$1/settings/',	'profile_avatar'				=>	'user/$1/avatar/',	'profile_signature'				=>	'user/$1/signature/',	'profile_admin'					=>	'user/$1/admin/',	'quote'							=>	'new/reply/$1/quote/$2/',	'register'						=>	'register/',	'report'						=>	'report/$1/',	'request_password'				=>	'request/password/',	'rules'							=>	'rules/',	'search'						=>	'search/',	'search_advanced'				=>	'search/advanced/',	'search_resultft'				=>	'search/k$1/$2/a$3/$4/$5/$6/$7/',	'search_results'				=>	'search/$1/',	'search_new'					=>	'search/new/',	'search_new_results'			=>	'search/new/$1/',	'search_recent'					=>	'search/recent/',	'search_recent_results'			=>	'search/recent/$1/',	'search_unanswered'				=>	'search/unanswered/',	'search_subscriptions'			=>	'search/subscriptions/$1/',	'search_user_posts'				=>	'search/posts/user/$1/',	'search_user_topics'			=>	'search/topics/user/$1/',	'subscribe'						=>	'subscribe/$1/$2/',	'topic'							=>	'topic/$1/',	'topic_rss'						=>	'feed/rss/topic/$1/',	'topic_atom'					=>	'feed/atom/topic/$1/',	'topic_new_posts'				=>	'topic/$1/new/posts/',	'topic_last_post'				=>	'topic/$1/last/post/',	'unsubscribe'					=>	'unsubscribe/$1/$2/',	'user'							=>	'user/$1/',	'users'							=>	'users/',	'users_browse'					=>	'users/$4/$1/$2/$3/',	'page'							=>	'page/$1/',	'moderate_forum'				=>	'moderate/$1/',	'get_host'						=>	'get_host/$1/',	'move'							=>	'move_topics/$1/$2/',	'open'							=>	'open/$1/$2/$3/',	'close'							=>	'close/$1/$2/$3/',	'stick'							=>	'stick/$1/$2/$3/',	'unstick'						=>	'unstick/$1/$2/$3/',	'moderate_topic'				=>	'moderate/$1/$2/',	'admin_index'					=>	'admin/index.php',	'admin_bans'					=>	'admin/bans.php?sort_by=1',	'admin_categories'				=>	'admin/categories.php',	'admin_censoring'				=>	'admin/censoring.php',	'admin_extensions_manage'		=>	'admin/extensions.php?section=manage',	'admin_extensions_hotfixes'		=>	'admin/extensions.php?section=hotfixes',	'admin_forums'					=>	'admin/forums.php',	'admin_groups'					=>	'admin/groups.php',	'admin_loader'					=>	'admin/loader.php',	'admin_reindex'					=>	'admin/reindex.php',	'admin_settings_setup'			=>	'admin/settings.php?section=setup',	'admin_settings_features'		=>	'admin/settings.php?section=features',	'admin_settings_content'		=>	'admin/settings.php?section=content',	'admin_settings_email'			=>	'admin/settings.php?section=email',	'admin_settings_announcements'	=>	'admin/settings.php?section=announcements',	'admin_settings_registration'	=>	'admin/settings.php?section=registration',	'admin_settings_communications'	=>	'admin/settings.php?section=communications',	'admin_settings_maintenance'	=>	'admin/settings.php?section=maintenance',	'admin_prune'					=>	'admin/prune.php',	'admin_ranks'					=>	'admin/ranks.php',	'admin_reports'					=>	'admin/reports.php',	'admin_users'					=>	'admin/users.php');
<?php/*** Utilities for processing "special" characters in UTF-8. "Special" largely means anything which would* be regarded as a non-word character, like ASCII control characters and punctuation. This has a "Roman"* bias - it would be unaware of modern Chinese "punctuation" characters for example.* Note: requires utils/unicode.php to be loaded* @version $Id: specials.php,v 1.2 2006/10/16 21:13:59 harryf Exp $* @package utf8* @subpackage utils* @see utf8_is_valid*///--------------------------------------------------------------------/*** Used internally. Builds a PCRE pattern from the $UTF8_SPECIAL_CHARS * array defined in this file* The $UTF8_SPECIAL_CHARS should contain all special characters (non-letter/non-digit)* defined in the various local charsets - it's not a complete list of* non-alphanum characters in UTF-8. It's not perfect but should match most* cases of special chars.* This function adds the control chars 0x00 to 0x19 to the array of* special chars (they are not included in $UTF8_SPECIAL_CHARS)* @package utf8* @subpackage utils* @return string* @see utf8_from_unicode* @see utf8_is_word_chars* @see utf8_strip_specials*/function utf8_specials_pattern() {    static $pattern = NULL;    if ( !$pattern ) {        $UTF8_SPECIAL_CHARS = array(    0x001a, 0x001b, 0x001c, 0x001d, 0x001e, 0x001f, 0x0020, 0x0021, 0x0022, 0x0023,    0x0024, 0x0025, 0x0026, 0x0027, 0x0028, 0x0029, 0x002a, 0x002b, 0x002c,    0x002f,         0x003b, 0x003c, 0x003d, 0x003e, 0x003f, 0x0040, 0x005b,    0x005c, 0x005d, 0x005e,         0x0060, 0x007b, 0x007c, 0x007d, 0x007e,    0x007f, 0x0080, 0x0081, 0x0082, 0x0083, 0x0084, 0x0085, 0x0086, 0x0087, 0x0088,    0x0089, 0x008a, 0x008b, 0x008c, 0x008d, 0x008e, 0x008f, 0x0090, 0x0091, 0x0092,    0x0093, 0x0094, 0x0095, 0x0096, 0x0097, 0x0098, 0x0099, 0x009a, 0x009b, 0x009c,    0x009d, 0x009e, 0x009f, 0x00a0, 0x00a1, 0x00a2, 0x00a3, 0x00a4, 0x00a5, 0x00a6,    0x00a7, 0x00a8, 0x00a9, 0x00aa, 0x00ab, 0x00ac, 0x00ad, 0x00ae, 0x00af, 0x00b0,    0x00b1, 0x00b2, 0x00b3, 0x00b4, 0x00b5, 0x00b6, 0x00b7, 0x00b8, 0x00b9, 0x00ba,    0x00bb, 0x00bc, 0x00bd, 0x00be, 0x00bf, 0x00d7, 0x00f7, 0x02c7, 0x02d8, 0x02d9,    0x02da, 0x02db, 0x02dc, 0x02dd, 0x0300, 0x0301, 0x0303, 0x0309, 0x0323, 0x0384,    0x0385, 0x0387, 0x03b2, 0x03c6, 0x03d1, 0x03d2, 0x03d5, 0x03d6, 0x05b0, 0x05b1,    0x05b2, 0x05b3, 0x05b4, 0x05b5, 0x05b6, 0x05b7, 0x05b8, 0x05b9, 0x05bb, 0x05bc,    0x05bd, 0x05be, 0x05bf, 0x05c0, 0x05c1, 0x05c2, 0x05c3, 0x05f3, 0x05f4, 0x060c,    0x061b, 0x061f, 0x0640, 0x064b, 0x064c, 0x064d, 0x064e, 0x064f, 0x0650, 0x0651,    0x0652, 0x066a, 0x0e3f, 0x200c, 0x200d, 0x200e, 0x200f, 0x2013, 0x2014, 0x2015,    0x2017, 0x2018, 0x2019, 0x201a, 0x201c, 0x201d, 0x201e, 0x2020, 0x2021, 0x2022,    0x2026, 0x2030, 0x2032, 0x2033, 0x2039, 0x203a, 0x2044, 0x20a7, 0x20aa, 0x20ab,    0x20ac, 0x2116, 0x2118, 0x2122, 0x2126, 0x2135, 0x2190, 0x2191, 0x2192, 0x2193,    0x2194, 0x2195, 0x21b5, 0x21d0, 0x21d1, 0x21d2, 0x21d3, 0x21d4, 0x2200, 0x2202,    0x2203, 0x2205, 0x2206, 0x2207, 0x2208, 0x2209, 0x220b, 0x220f, 0x2211, 0x2212,    0x2215, 0x2217, 0x2219, 0x221a, 0x221d, 0x221e, 0x2220, 0x2227, 0x2228, 0x2229,    0x222a, 0x222b, 0x2234, 0x223c, 0x2245, 0x2248, 0x2260, 0x2261, 0x2264, 0x2265,    0x2282, 0x2283, 0x2284, 0x2286, 0x2287, 0x2295, 0x2297, 0x22a5, 0x22c5, 0x2310,    0x2320, 0x2321, 0x2329, 0x232a, 0x2469, 0x2500, 0x2502, 0x250c, 0x2510, 0x2514,    0x2518, 0x251c, 0x2524, 0x252c, 0x2534, 0x253c, 0x2550, 0x2551, 0x2552, 0x2553,    0x2554, 0x2555, 0x2556, 0x2557, 0x2558, 0x2559, 0x255a, 0x255b, 0x255c, 0x255d,    0x255e, 0x255f, 0x2560, 0x2561, 0x2562, 0x2563, 0x2564, 0x2565, 0x2566, 0x2567,    0x2568, 0x2569, 0x256a, 0x256b, 0x256c, 0x2580, 0x2584, 0x2588, 0x258c, 0x2590,    0x2591, 0x2592, 0x2593, 0x25a0, 0x25b2, 0x25bc, 0x25c6, 0x25ca, 0x25cf, 0x25d7,    0x2605, 0x260e, 0x261b, 0x261e, 0x2660, 0x2663, 0x2665, 0x2666, 0x2701, 0x2702,    0x2703, 0x2704, 0x2706, 0x2707, 0x2708, 0x2709, 0x270c, 0x270d, 0x270e, 0x270f,    0x2710, 0x2711, 0x2712, 0x2713, 0x2714, 0x2715, 0x2716, 0x2717, 0x2718, 0x2719,    0x271a, 0x271b, 0x271c, 0x271d, 0x271e, 0x271f, 0x2720, 0x2721, 0x2722, 0x2723,    0x2724, 0x2725, 0x2726, 0x2727, 0x2729, 0x272a, 0x272b, 0x272c, 0x272d, 0x272e,    0x272f, 0x2730, 0x2731, 0x2732, 0x2733, 0x2734, 0x2735, 0x2736, 0x2737, 0x2738,    0x2739, 0x273a, 0x273b, 0x273c, 0x273d, 0x273e, 0x273f, 0x2740, 0x2741, 0x2742,    0x2743, 0x2744, 0x2745, 0x2746, 0x2747, 0x2748, 0x2749, 0x274a, 0x274b, 0x274d,    0x274f, 0x2750, 0x2751, 0x2752, 0x2756, 0x2758, 0x2759, 0x275a, 0x275b, 0x275c,    0x275d, 0x275e, 0x2761, 0x2762, 0x2763, 0x2764, 0x2765, 0x2766, 0x2767, 0x277f,    0x2789, 0x2793, 0x2794, 0x2798, 0x2799, 0x279a, 0x279b, 0x279c, 0x279d, 0x279e,    0x279f, 0x27a0, 0x27a1, 0x27a2, 0x27a3, 0x27a4, 0x27a5, 0x27a6, 0x27a7, 0x27a8,    0x27a9, 0x27aa, 0x27ab, 0x27ac, 0x27ad, 0x27ae, 0x27af, 0x27b1, 0x27b2, 0x27b3,    0x27b4, 0x27b5, 0x27b6, 0x27b7, 0x27b8, 0x27b9, 0x27ba, 0x27bb, 0x27bc, 0x27bd,    0x27be, 0xf6d9, 0xf6da, 0xf6db, 0xf8d7, 0xf8d8, 0xf8d9, 0xf8da, 0xf8db, 0xf8dc,    0xf8dd, 0xf8de, 0xf8df, 0xf8e0, 0xf8e1, 0xf8e2, 0xf8e3, 0xf8e4, 0xf8e5, 0xf8e6,    0xf8e7, 0xf8e8, 0xf8e9, 0xf8ea, 0xf8eb, 0xf8ec, 0xf8ed, 0xf8ee, 0xf8ef, 0xf8f0,    0xf8f1, 0xf8f2, 0xf8f3, 0xf8f4, 0xf8f5, 0xf8f6, 0xf8f7, 0xf8f8, 0xf8f9, 0xf8fa,    0xf8fb, 0xf8fc, 0xf8fd, 0xf8fe, 0xfe7c, 0xfe7d,            );        $pattern = preg_quote(utf8_from_unicode($UTF8_SPECIAL_CHARS), '/');        $pattern = '/[\x00-\x19'.$pattern.']/u';    }    return $pattern;}//--------------------------------------------------------------------/*** Checks a string for whether it contains only word characters. This* is logically equivalent to the \w PCRE meta character. Note that* this is not a 100% guarantee that the string only contains alpha /* numeric characters but just that common non-alphanumeric are not* in the string, including ASCII device control characters.* @package utf8* @subpackage utils* @param string to check* @return boolean TRUE if the string only contains word characters* @see utf8_specials_pattern*/function utf8_is_word_chars($str) {    return !(bool)preg_match(utf8_specials_pattern(),$str);}//--------------------------------------------------------------------/*** Removes special characters (nonalphanumeric) from a UTF-8 string* * This can be useful as a helper for sanitizing a string for use as* something like a file name or a unique identifier. Be warned though* it does not handle all possible non-alphanumeric characters and is* not intended is some kind of security / injection filter.** @package utf8* @subpackage utils* @author Andreas Gohr <andi@splitbrain.org>* @param string $string The UTF8 string to strip of special chars* @param string (optional) $repl   Replace special with this string* @return string with common non-alphanumeric characters removed* @see utf8_specials_pattern*/function utf8_strip_specials($string, $repl=''){    return preg_replace(utf8_specials_pattern(), $repl, $string);}
<?php/** * Allows the creation of new user accounts. * * @copyright (C) 2008-2011 PunBB, partially based on code (C) 2008-2009 FluxBB.org * @license http://www.gnu.org/licenses/gpl.html GPL version 2 or higher * @package PunBB */if (!defined('FORUM_ROOT'))	define('FORUM_ROOT', './');require FORUM_ROOT.'include/common.php';($hook = get_hook('rg_start')) ? eval($hook) : null;// If we are logged in, we shouldn't be hereif (!$forum_user['is_guest']){	header('Location: '.forum_link($forum_url['index']));	exit;}// Load the profile.php language filerequire FORUM_ROOT.'lang/'.$forum_user['language'].'/profile.php';if ($forum_config['o_regs_allow'] == '0')	message($lang_profile['No new regs']);$errors = array();// User pressed the cancel buttonif (isset($_GET['cancel']))	redirect(forum_link($forum_url['index']), $lang_profile['Reg cancel redirect']);// User pressed agree but failed to tick checkboxelse if (isset($_GET['agree']) && !isset($_GET['req_agreement']))	redirect(forum_link($forum_url['index']), $lang_profile['Reg cancel redirect']);// Show the ruleselse if ($forum_config['o_rules'] == '1' && !isset($_GET['agree']) && !isset($_POST['form_sent'])){	// Setup form	$forum_page['group_count'] = $forum_page['item_count'] = $forum_page['fld_count'] = 0;	// Setup breadcrumbs	$forum_page['crumbs'] = array(		array($forum_config['o_board_title'], forum_link($forum_url['index'])),		array($lang_common['Register'], forum_link($forum_url['register'])),		$lang_common['Rules']	);	($hook = get_hook('rg_rules_pre_header_load')) ? eval($hook) : null;	define('FORUM_PAGE', 'rules');	require FORUM_ROOT.'header.php';	// START SUBST - <!-- forum_main -->	ob_start();	($hook = get_hook('rg_rules_output_start')) ? eval($hook) : null;	$forum_page['set_count'] = $forum_page['fld_count'] = 0;?>	<div class="main-head">		<h2 class="hn"><span><?php echo sprintf($lang_profile['Register at'], $forum_config['o_board_title']) ?></span></h2>	</div>	<div class="main-subhead">		<h2 class="hn"><span><?php echo $lang_profile['Reg rules head'] ?></span></h2>	</div>	<div class="main-content main-frm">		<div class="ct-box user-box">			<?php echo $forum_config['o_rules_message'] ?>		</div>		<form class="frm-form" method="get" accept-charset="utf-8" action="<?php echo forum_link($forum_url['register']) ?>"><?php ($hook = get_hook('rg_rules_pre_group')) ? eval($hook) : null; ?>			<div class="frm-group group<?php echo ++$forum_page['group_count'] ?>"><?php ($hook = get_hook('rg_rules_pre_agree_checkbox')) ? eval($hook) : null; ?>				<div class="sf-set set<?php echo ++$forum_page['item_count'] ?>">					<div class="sf-box checkbox">						<span class="fld-input"><input type="checkbox" id="fld<?php echo ++$forum_page['fld_count'] ?>" name="req_agreement" value="1" /></span>						<label for="fld<?php echo $forum_page['fld_count'] ?>"><span><?php echo $lang_profile['Agreement'] ?></span> <?php echo $lang_profile['Agreement label'] ?></label>					</div>				</div><?php ($hook = get_hook('rg_rules_pre_group_end')) ? eval($hook) : null; ?>			</div><?php ($hook = get_hook('rg_rules_group_end')) ? eval($hook) : null; ?>			<div class="frm-buttons">				<span class="submit primary"><input type="submit" name="agree" value="<?php echo $lang_profile['Agree'] ?>" /></span>				<span class="cancel"><input type="submit" name="cancel" value="<?php echo $lang_common['Cancel'] ?>" formnovalidate /></span>			</div>		</form>	</div><?php	($hook = get_hook('rg_rules_end')) ? eval($hook) : null;	$tpl_temp = forum_trim(ob_get_contents());	$tpl_main = str_replace('<!-- forum_main -->', $tpl_temp, $tpl_main);	ob_end_clean();	// END SUBST - <!-- forum_main -->	require FORUM_ROOT.'footer.php';}else if (isset($_POST['form_sent'])){	($hook = get_hook('rg_register_form_submitted')) ? eval($hook) : null;	// Check that someone from this IP didn't register a user within the last hour (DoS prevention)	$query = array(		'SELECT'	=> 'COUNT(u.id)',		'FROM'		=> 'users AS u',		'WHERE'		=> 'u.registration_ip=\''.$forum_db->escape(get_remote_address()).'\' AND u.registered>'.(time() - 3600)	);	($hook = get_hook('rg_register_qr_check_register_flood')) ? eval($hook) : null;	$result = $forum_db->query_build($query) or error(__FILE__, __LINE__);	if ($forum_db->result($result) > 0)	{		$errors[] = $lang_profile['Registration flood'];	}	// Did everything go according to plan so far?	if (empty($errors))	{		$username = forum_trim($_POST['req_username']);		$email1 = strtolower(forum_trim($_POST['req_email1']));		if ($forum_config['o_regs_verify'] == '1')		{			$password1 = random_key(8, true);			$password2 = $password1;		}		else		{			$password1 = forum_trim($_POST['req_password1']);			$password2 = forum_trim($_POST['req_password2']);		}		// Validate the username		$errors = array_merge($errors, validate_username($username));		// ... and the password		if (utf8_strlen($password1) < 4)			$errors[] = $lang_profile['Pass too short'];		else if ($password1 != $password2)			$errors[] = $lang_profile['Pass not match'];		// ... and the e-mail address		if (!defined('FORUM_EMAIL_FUNCTIONS_LOADED'))			require FORUM_ROOT.'include/email.php';		if (!is_valid_email($email1))			$errors[] = $lang_profile['Invalid e-mail'];		// Check if it's a banned e-mail address		$banned_email = is_banned_email($email1);		if ($banned_email && $forum_config['p_allow_banned_email'] == '0')			$errors[] = $lang_profile['Banned e-mail'];		// Clean old unverified registrators - delete older than 72 hours		$query = array(			'DELETE'	=> 'users',			'WHERE'		=> 'group_id='.FORUM_UNVERIFIED.' AND activate_key IS NOT NULL AND registered < '.(time() - 259200)		);		($hook = get_hook('rg_register_qr_delete_unverified')) ? eval($hook) : null;		$forum_db->query_build($query) or error(__FILE__, __LINE__);		// Check if someone else already has registered with that e-mail address		$dupe_list = array();		$query = array(			'SELECT'	=> 'u.username',			'FROM'		=> 'users AS u',			'WHERE'		=> 'u.email=\''.$forum_db->escape($email1).'\''		);		($hook = get_hook('rg_register_qr_check_email_dupe')) ? eval($hook) : null;		$result = $forum_db->query_build($query) or error(__FILE__, __LINE__);		while ($cur_dupe = $forum_db->fetch_assoc($result))		{			$dupe_list[] = $cur_dupe['username'];		}		if (!empty($dupe_list) && empty($errors))		{			if ($forum_config['p_allow_dupe_email'] == '0')				$errors[] = $lang_profile['Dupe e-mail'];		}		($hook = get_hook('rg_register_end_validation')) ? eval($hook) : null;		// Did everything go according to plan so far?		if (empty($errors))		{			// Make sure we got a valid language string			if (isset($_POST['language']))			{				$language = preg_replace('#[\.\\\/]#', '', $_POST['language']);				if (!file_exists(FORUM_ROOT.'lang/'.$language.'/common.php'))					message($lang_common['Bad request']);			}			else				$language = $forum_config['o_default_lang'];			$initial_group_id = ($forum_config['o_regs_verify'] == '0') ? $forum_config['o_default_user_group'] : FORUM_UNVERIFIED;			$salt = random_key(12);			$password_hash = forum_hash($password1, $salt);			// Validate timezone and DST			$timezone = (isset($_POST['timezone'])) ? floatval($_POST['timezone']) : $forum_config['o_default_timezone'];			// Validate timezone  on error use default value			if (($timezone > 14.0) || ($timezone < -12.0)) {				$timezone = $forum_config['o_default_timezone'];			}			// DST			$dst = (isset($_POST['dst']) && intval($_POST['dst']) === 1) ? 1 : $forum_config['o_default_dst'];			// Insert the new user into the database. We do this now to get the last inserted id for later use.			$user_info = array(				'username'				=>	$username,				'group_id'				=>	$initial_group_id,				'salt'					=>	$salt,				'password'				=>	$password1,				'password_hash'			=>	$password_hash,				'email'					=>	$email1,				'email_setting'			=>	$forum_config['o_default_email_setting'],				'timezone'				=>	$timezone,				'dst'					=>	$dst,				'language'				=>	$language,				'style'					=>	$forum_config['o_default_style'],				'registered'			=>	time(),				'registration_ip'		=>	get_remote_address(),				'activate_key'			=>	($forum_config['o_regs_verify'] == '1') ? '\''.random_key(8, true).'\'' : 'NULL',				'require_verification'	=>	($forum_config['o_regs_verify'] == '1'),				'notify_admins'			=>	($forum_config['o_regs_report'] == '1')			);			($hook = get_hook('rg_register_pre_add_user')) ? eval($hook) : null;			add_user($user_info, $new_uid);			// If we previously found out that the e-mail was banned			if ($banned_email && $forum_config['o_mailing_list'] != '')			{				$mail_subject = 'Alert - Banned e-mail detected';				$mail_message = 'User \''.$username.'\' registered with banned e-mail address: '.$email1."\n\n".'User profile: '.forum_link($forum_url['user'], $new_uid)."\n\n".'-- '."\n".'Forum Mailer'."\n".'(Do not reply to this message)';				($hook = get_hook('rg_register_banned_email')) ? eval($hook) : null;				forum_mail($forum_config['o_mailing_list'], $mail_subject, $mail_message);			}			// If we previously found out that the e-mail was a dupe			if (!empty($dupe_list) && $forum_config['o_mailing_list'] != '')			{				$mail_subject = 'Alert - Duplicate e-mail detected';				$mail_message = 'User \''.$username.'\' registered with an e-mail address that also belongs to: '.implode(', ', $dupe_list)."\n\n".'User profile: '.forum_link($forum_url['user'], $new_uid)."\n\n".'-- '."\n".'Forum Mailer'."\n".'(Do not reply to this message)';				($hook = get_hook('rg_register_dupe_email')) ? eval($hook) : null;				forum_mail($forum_config['o_mailing_list'], $mail_subject, $mail_message);			}			($hook = get_hook('rg_register_pre_login_redirect')) ? eval($hook) : null;			// Must the user verify the registration or do we log him/her in right now?			if ($forum_config['o_regs_verify'] == '1')				message(sprintf($lang_profile['Reg e-mail'], '<a href="mailto:'.forum_htmlencode($forum_config['o_admin_email']).'">'.forum_htmlencode($forum_config['o_admin_email']).'</a>'));			$expire = time() + $forum_config['o_timeout_visit'];			forum_setcookie($cookie_name, base64_encode($new_uid.'|'.$password_hash.'|'.$expire.'|'.sha1($salt.$password_hash.forum_hash($expire, $salt))), $expire);			redirect(forum_link($forum_url['index']), $lang_profile['Reg complete']);		}	}}// Setup form$forum_page['group_count'] = $forum_page['item_count'] = $forum_page['fld_count'] = 0;$forum_page['form_action'] = forum_link($forum_url['register']).'?action=register';// Setup form information$forum_page['frm_info'] = array();if ($forum_config['o_regs_verify'] != '0')	$forum_page['frm_info']['email'] = '<p class="warn">'.$lang_profile['Reg e-mail info'].'</p>';// Setup breadcrumbs$forum_page['crumbs'] = array(	array($forum_config['o_board_title'], forum_link($forum_url['index'])),	array(sprintf($lang_profile['Register at'], $forum_config['o_board_title']), forum_link($forum_url['register'])),);// Load JS for timezone detection$forum_loader->add_js('include/js/min/detect_timezone.min.js', array('type' => 'file'));$forum_loader->add_js('FORUM.detect_timezone.detect_on_register_form();', array('type' => 'inline'));($hook = get_hook('rg_register_pre_header_load')) ? eval($hook) : null;define('FORUM_PAGE', 'register');require FORUM_ROOT.'header.php';// START SUBST - <!-- forum_main -->ob_start();($hook = get_hook('rg_register_output_start')) ? eval($hook) : null;?>	<div class="main-head">		<h2 class="hn"><span><?php echo sprintf($lang_profile['Register at'], $forum_config['o_board_title']) ?></span></h2>	</div>	<div class="main-content main-frm"><?php	if (!empty($forum_page['frm_info'])):?>		<div class="ct-box info-box">			<?php echo implode("\n\t\t\t", $forum_page['frm_info'])."\n" ?>		</div><?php	endif;	// If there were any errors, show them	if (!empty($errors))	{		$forum_page['errors'] = array();		foreach ($errors as $cur_error)			$forum_page['errors'][] = '<li class="warn"><span>'.$cur_error.'</span></li>';		($hook = get_hook('rg_pre_register_errors')) ? eval($hook) : null;?>		<div class="ct-box error-box">			<h2 class="warn hn"><span><?php echo $lang_profile['Register errors'] ?></span></h2>			<ul class="error-list">				<?php echo implode("\n\t\t\t\t", $forum_page['errors'])."\n" ?>			</ul>		</div><?php	}?>		<div id="req-msg" class="req-warn ct-box error-box">			<p class="important"><?php printf($lang_common['Required warn'], '<em>'.$lang_common['Required'].'</em>') ?></p>		</div>		<form class="frm-form" id="afocus" method="post" accept-charset="utf-8" action="<?php echo $forum_page['form_action'] ?>" autocomplete="off">			<div class="hidden">				<input type="hidden" name="form_sent" value="1" />				<input type="hidden" name="csrf_token" value="<?php echo generate_form_token($forum_page['form_action']) ?>" />				<input type="hidden" name="timezone" id="register_timezone" value="<?php echo forum_htmlencode($forum_config['o_default_timezone']) ?>" />				<input type="hidden" name="dst" id="register_dst" value="<?php echo forum_htmlencode($forum_config['o_default_dst']) ?>" />			</div><?php ($hook = get_hook('rg_register_pre_group')) ? eval($hook) : null; ?>			<div class="frm-group group<?php echo ++$forum_page['group_count'] ?>"><?php ($hook = get_hook('rg_register_pre_username')) ? eval($hook) : null; ?>				<div class="sf-set set<?php echo ++$forum_page['item_count'] ?>">					<div class="sf-box text required">						<label for="fld<?php echo ++$forum_page['fld_count'] ?>"><span><?php echo $lang_profile['Username'] ?></span> <small><?php echo $lang_profile['Username help'] ?></small></label><br />						<span class="fld-input"><input type="text" id="fld<?php echo $forum_page['fld_count'] ?>" name="req_username" value="<?php echo(isset($_POST['req_username']) ? forum_htmlencode($_POST['req_username']) : '') ?>" size="35" maxlength="25" required /></span>					</div>				</div><?php ($hook = get_hook('rg_register_pre_password')) ? eval($hook) : null; ?><?php if ($forum_config['o_regs_verify'] == '0'): ?>				<div class="sf-set set<?php echo ++$forum_page['item_count'] ?>">					<div class="sf-box text required">						<label for="fld<?php echo ++$forum_page['fld_count'] ?>"><span><?php echo $lang_profile['Password'] ?></span> <small><?php echo $lang_profile['Password help'] ?></small></label><br />						<span class="fld-input"><input type="password" id="fld<?php echo $forum_page['fld_count'] ?>" name="req_password1" size="35" required /></span>					</div>				</div><?php ($hook = get_hook('rg_register_pre_confirm_password')) ? eval($hook) : null; ?>				<div class="sf-set set<?php echo ++$forum_page['item_count'] ?>">					<div class="sf-box text required">						<label for="fld<?php echo ++$forum_page['fld_count'] ?>"><span><?php echo $lang_profile['Confirm password'] ?></span> <small><?php echo $lang_profile['Confirm password help'] ?></small></label><br />						<span class="fld-input"><input type="password" id="fld<?php echo $forum_page['fld_count'] ?>" name="req_password2" size="35" required /></span>					</div>				</div><?php endif; ($hook = get_hook('rg_register_pre_email')) ? eval($hook) : null; ?>				<div class="sf-set set<?php echo ++$forum_page['item_count'] ?>">					<div class="sf-box text required">						<label for="fld<?php echo ++$forum_page['fld_count'] ?>"><span><?php echo $lang_profile['E-mail'] ?></span> <small><?php echo $lang_profile['E-mail help'] ?></small></label><br />						<span class="fld-input"><input type="email" id="fld<?php echo $forum_page['fld_count'] ?>" name="req_email1" value="<?php echo(isset($_POST['req_email1']) ? forum_htmlencode($_POST['req_email1']) : '') ?>" size="35" maxlength="80" required /></span>					</div>				</div><?php ($hook = get_hook('rg_register_pre_email_confirm')) ? eval($hook) : null;		$languages = array();		$d = dir(FORUM_ROOT.'lang');		while (($entry = $d->read()) !== false)		{			if ($entry != '.' && $entry != '..' && is_dir(FORUM_ROOT.'lang/'.$entry) && file_exists(FORUM_ROOT.'lang/'.$entry.'/common.php'))				$languages[] = $entry;		}		$d->close();		($hook = get_hook('rg_register_pre_language')) ? eval($hook) : null;		// Only display the language selection box if there's more than one language available		if (count($languages) > 1)		{			natcasesort($languages);?>				<div class="sf-set set<?php echo ++$forum_page['item_count'] ?>">					<div class="sf-box select">						<label for="fld<?php echo ++$forum_page['fld_count'] ?>"><span><?php echo $lang_profile['Language'] ?></span></label><br />						<span class="fld-input"><select id="fld<?php echo $forum_page['fld_count'] ?>" name="language"><?php			$select_lang = isset($_POST['language']) ? $_POST['language'] : $forum_config['o_default_lang'];			foreach ($languages as $lang)			{				if ($select_lang == $lang)					echo "\t\t\t\t\t\t".'<option value="'.$lang.'" selected="selected">'.$lang.'</option>'."\n";				else					echo "\t\t\t\t\t\t".'<option value="'.$lang.'">'.$lang.'</option>'."\n";			}?>						</select></span>					</div>				</div><?php		}		($hook = get_hook('rg_register_pre_group_end')) ? eval($hook) : null;?>			</div><?php ($hook = get_hook('rg_register_group_end')) ? eval($hook) : null; ?>			<div class="frm-buttons">				<span class="submit"><input type="submit" name="register" value="<?php echo $lang_profile['Register'] ?>" /></span>			</div>		</form>	</div><?php($hook = get_hook('rg_end')) ? eval($hook) : null;$tpl_temp = forum_trim(ob_get_contents());$tpl_main = str_replace('<!-- forum_main -->', $tpl_temp, $tpl_main);ob_end_clean();// END SUBST - <!-- forum_main -->require FORUM_ROOT.'footer.php';
<?php/*** @version $Id: strcasecmp.php,v 1.1 2006/02/25 13:50:17 harryf Exp $* @package utf8* @subpackage strings*///---------------------------------------------------------------/*** UTF-8 aware alternative to strcasecmp* A case insensivite string comparison* Note: requires utf8_strtolower* @param string* @param string* @return int* @see http://www.php.net/strcasecmp* @see utf8_strtolower* @package utf8* @subpackage strings*/function utf8_strcasecmp($strX, $strY) {    $strX = utf8_strtolower($strX);    $strY = utf8_strtolower($strY);    return strcmp($strX, $strY);}
<?php/** * A database layer class that relies on the SQLite PHP extension. * * @copyright (C) 2008-2011 PunBB, partially based on code (C) 2008-2009 FluxBB.org * @license http://www.gnu.org/licenses/gpl.html GPL version 2 or higher * @package PunBB */// Make sure we have built in support for SQLiteif (!function_exists('sqlite_open'))	exit('This PHP environment doesn\'t have SQLite support built in. SQLite support is required if you want to use a SQLite database to run this forum. Consult the PHP documentation for further assistance.');class DBLayer{	var $prefix;	var $link_id;	var $query_result;	var $in_transaction = 0;	var $saved_queries = array();	var $num_queries = 0;	var $error_no = false;	var $error_msg = 'Unknown';	var $datatype_transformations = array(		'/^SERIAL$/'															=>	'INTEGER',		'/^(TINY|SMALL|MEDIUM|BIG)?INT( )?(\\([0-9]+\\))?( )?(UNSIGNED)?$/i'	=>	'INTEGER',		'/^(TINY|MEDIUM|LONG)?TEXT$/i'											=>	'TEXT'	);	function DBLayer($db_host, $db_username, $db_password, $db_name, $db_prefix, $p_connect)	{		// Prepend $db_name with the path to the forum root directory		$db_name = FORUM_ROOT.$db_name;		$this->prefix = $db_prefix;		if (!file_exists($db_name))		{			@touch($db_name);			@chmod($db_name, 0666);			if (!file_exists($db_name))				error('Unable to create new database \''.$db_name.'\'. Permission denied.', __FILE__, __LINE__);		}		if (!is_readable($db_name))			error('Unable to open database \''.$db_name.'\' for reading. Permission denied.', __FILE__, __LINE__);		if (!is_writable($db_name))			error('Unable to open database \''.$db_name.'\' for writing. Permission denied.', __FILE__, __LINE__);		if ($p_connect)			$this->link_id = @sqlite_popen($db_name, 0666, $sqlite_error);		else			$this->link_id = @sqlite_open($db_name, 0666, $sqlite_error);		if (!$this->link_id)			error('Unable to open database \''.$db_name.'\'. SQLite reported: '.$sqlite_error, __FILE__, __LINE__);		else			return $this->link_id;	}	function start_transaction()	{		++$this->in_transaction;		return (@sqlite_query($this->link_id, 'BEGIN')) ? true : false;	}	function end_transaction()	{		--$this->in_transaction;		if (@sqlite_query($this->link_id, 'COMMIT'))			return true;		else		{			@sqlite_query($this->link_id, 'ROLLBACK');			return false;		}	}	function query($sql, $unbuffered = false)	{		if (strlen($sql) > 140000)			exit('Insane query. Aborting.');		if (defined('FORUM_SHOW_QUERIES'))			$q_start = forum_microtime();		if ($unbuffered)			$this->query_result = @sqlite_unbuffered_query($this->link_id, $sql);		else			$this->query_result = @sqlite_query($this->link_id, $sql);		if ($this->query_result)		{			if (defined('FORUM_SHOW_QUERIES'))				$this->saved_queries[] = array($sql, sprintf('%.5f', forum_microtime() - $q_start));			++$this->num_queries;			return $this->query_result;		}		else		{			if (defined('FORUM_SHOW_QUERIES'))				$this->saved_queries[] = array($sql, 0);			$this->error_no = @sqlite_last_error($this->link_id);			$this->error_msg = @sqlite_error_string($this->error_no);			if ($this->in_transaction)				@sqlite_query($this->link_id, 'ROLLBACK');			--$this->in_transaction;			return false;		}	}	function query_build($query, $return_query_string = false, $unbuffered = false)	{		$sql = '';		if (isset($query['SELECT']))		{			$sql = 'SELECT '.$query['SELECT'].' FROM '.(isset($query['PARAMS']['NO_PREFIX']) ? '' : $this->prefix).$query['FROM'];			if (isset($query['JOINS']))			{				foreach ($query['JOINS'] as $cur_join)					$sql .= ' '.key($cur_join).' '.(isset($query['PARAMS']['NO_PREFIX']) ? '' : $this->prefix).current($cur_join).' ON '.$cur_join['ON'];			}			if (!empty($query['WHERE']))				$sql .= ' WHERE '.$query['WHERE'];			if (!empty($query['GROUP BY']))				$sql .= ' GROUP BY '.$query['GROUP BY'];			if (!empty($query['HAVING']))				$sql .= ' HAVING '.$query['HAVING'];			if (!empty($query['ORDER BY']))				$sql .= ' ORDER BY '.$query['ORDER BY'];			if (!empty($query['LIMIT']))				$sql .= ' LIMIT '.$query['LIMIT'];		}		else if (isset($query['INSERT']))		{			$sql = 'INSERT INTO '.(isset($query['PARAMS']['NO_PREFIX']) ? '' : $this->prefix).$query['INTO'];			if (!empty($query['INSERT']))				$sql .= ' ('.$query['INSERT'].')';			if (is_array($query['VALUES']))			{				$new_query = $query;				if ($return_query_string)				{					$query_set = array();					foreach ($query['VALUES'] as $cur_values)					{						$new_query['VALUES'] = $cur_values;						$query_set[] = $this->query_build($new_query, true, $unbuffered);					}					$sql = implode('; ', $query_set);				}				else				{					$result_set = null;					foreach ($query['VALUES'] as $cur_values)					{						$new_query['VALUES'] = $cur_values;						$result_set = $this->query_build($new_query, false, $unbuffered);					}					return $result_set;				}			}			else				$sql .= ' VALUES('.$query['VALUES'].')';		}		else if (isset($query['UPDATE']))		{			$query['UPDATE'] = (isset($query['PARAMS']['NO_PREFIX']) ? '' : $this->prefix).$query['UPDATE'];			$sql = 'UPDATE '.$query['UPDATE'].' SET '.$query['SET'];			if (!empty($query['WHERE']))				$sql .= ' WHERE '.$query['WHERE'];		}		else if (isset($query['DELETE']))		{			$sql = 'DELETE FROM '.(isset($query['PARAMS']['NO_PREFIX']) ? '' : $this->prefix).$query['DELETE'];			if (!empty($query['WHERE']))				$sql .= ' WHERE '.$query['WHERE'];		}		else if (isset($query['REPLACE']))		{			$sql = 'REPLACE INTO '.(isset($query['PARAMS']['NO_PREFIX']) ? '' : $this->prefix).$query['INTO'];			if (!empty($query['REPLACE']))				$sql .= ' ('.$query['REPLACE'].')';			$sql .= ' VALUES('.$query['VALUES'].')';		}		return ($return_query_string) ? $sql : $this->query($sql, $unbuffered);	}	function result($query_id = 0, $row = 0, $col = 0)	{		if ($query_id)		{			if ($row != 0)				@sqlite_seek($query_id, $row);			$cur_row = @sqlite_current($query_id);			return $cur_row[$col];		}		else			return false;	}	function fetch_assoc($query_id = 0)	{		if ($query_id)		{			$cur_row = @sqlite_fetch_array($query_id, SQLITE_ASSOC);			if ($cur_row)			{				// Horrible hack to get rid of table names and table aliases from the array keys				foreach ($cur_row as $key => $value)				{					$dot_spot = strpos($key, '.');					if ($dot_spot !== false)					{						unset($cur_row[$key]);						$key = substr($key, $dot_spot+1);						$cur_row[$key] = $value;					}				}			}			return $cur_row;		}		else			return false;	}	function fetch_row($query_id = 0)	{		return ($query_id) ? @sqlite_fetch_array($query_id, SQLITE_NUM) : false;	}	function num_rows($query_id = 0)	{		return ($query_id) ? @sqlite_num_rows($query_id) : false;	}	function affected_rows()	{		return ($this->query_result) ? @sqlite_changes($this->link_id) : false;	}	function insert_id()	{		return ($this->link_id) ? @sqlite_last_insert_rowid($this->link_id) : false;	}	function get_num_queries()	{		return $this->num_queries;	}	function get_saved_queries()	{		return $this->saved_queries;	}	function free_result($query_id = false)	{		return true;	}	function escape($str)	{		return is_array($str) ? '' : sqlite_escape_string($str);	}	function error()	{		$result['error_sql'] = @current(@end($this->saved_queries));		$result['error_no'] = $this->error_no;		$result['error_msg'] = $this->error_msg;		return $result;	}	function close()	{		if ($this->link_id)		{			if ($this->in_transaction)			{				if (defined('FORUM_SHOW_QUERIES'))					$this->saved_queries[] = array('COMMIT', 0);				@sqlite_query($this->link_id, 'COMMIT');			}			return @sqlite_close($this->link_id);		}		else			return false;	}	function set_names($names)	{		return;	}	function get_version()	{		return array(			'name'		=> 'SQLite',			'version'	=> sqlite_libversion()		);	}	function table_exists($table_name, $no_prefix = false)	{		$result = $this->query('SELECT 1 FROM sqlite_master WHERE name = \''.($no_prefix ? '' : $this->prefix).$this->escape($table_name).'\' AND type=\'table\'');		return $this->num_rows($result) > 0;	}	function field_exists($table_name, $field_name, $no_prefix = false)	{		$result = $this->query('SELECT sql FROM sqlite_master WHERE name = \''.($no_prefix ? '' : $this->prefix).$this->escape($table_name).'\' AND type=\'table\'');		if (!$this->num_rows($result))			return false;		return preg_match('/[\r\n]'.preg_quote($field_name).' /', $this->result($result));	}	function index_exists($table_name, $index_name, $no_prefix = false)	{		$result = $this->query('SELECT 1 FROM sqlite_master WHERE tbl_name = \''.($no_prefix ? '' : $this->prefix).$this->escape($table_name).'\' AND name = \''.($no_prefix ? '' : $this->prefix).$this->escape($table_name).'_'.$this->escape($index_name).'\' AND type=\'index\'');		return $this->num_rows($result) > 0;	}	function create_table($table_name, $schema, $no_prefix = false)	{		if ($this->table_exists($table_name, $no_prefix))			return;		$query = 'CREATE TABLE '.($no_prefix ? '' : $this->prefix).$table_name." (\n";		// Go through every schema element and add it to the query		foreach ($schema['FIELDS'] as $field_name => $field_data)		{			$field_data['datatype'] = preg_replace(array_keys($this->datatype_transformations), array_values($this->datatype_transformations), $field_data['datatype']);			$query .= $field_name.' '.$field_data['datatype'];			if (!$field_data['allow_null'])				$query .= ' NOT NULL';			if (isset($field_data['default']))				$query .= ' DEFAULT '.$field_data['default'];			$query .= ",\n";		}		// If we have a primary key, add it		if (isset($schema['PRIMARY KEY']))			$query .= 'PRIMARY KEY ('.implode(',', $schema['PRIMARY KEY']).'),'."\n";		// Add unique keys		if (isset($schema['UNIQUE KEYS']))		{			foreach ($schema['UNIQUE KEYS'] as $key_name => $key_fields)				$query .= 'UNIQUE ('.implode(',', $key_fields).'),'."\n";		}		// We remove the last two characters (a newline and a comma) and add on the ending		$query = substr($query, 0, strlen($query) - 2)."\n".')';		$this->query($query) or error(__FILE__, __LINE__);		// Add indexes		if (isset($schema['INDEXES']))		{			foreach ($schema['INDEXES'] as $index_name => $index_fields)				$this->add_index($table_name, $index_name, $index_fields, false, $no_prefix);		}	}	function drop_table($table_name, $no_prefix = false)	{		if (!$this->table_exists($table_name, $no_prefix))			return;		$this->query('DROP TABLE '.($no_prefix ? '' : $this->prefix).$table_name) or error(__FILE__, __LINE__);	}	function get_table_info($table_name, $no_prefix = false)	{		// Grab table info		$result = $this->query('SELECT sql FROM sqlite_master WHERE tbl_name = \''.($no_prefix ? '' : $this->prefix).$this->escape($table_name).'\' ORDER BY type DESC') or error(__FILE__, __LINE__);		$num_rows = $this->num_rows($result);		if ($num_rows == 0)			return;		$table = array();		$table['indices'] = array();		while ($cur_index = $this->fetch_assoc($result))		{			if (!isset($table['sql']))				$table['sql'] = $cur_index['sql'];			else				$table['indices'][] = $cur_index['sql'];		}		// Work out the columns in the table currently		$table_lines = explode("\n", $table['sql']);		$table['columns'] = array();		foreach ($table_lines as $table_line)		{			$table_line = forum_trim($table_line);			if (substr($table_line, 0, 12) == 'CREATE TABLE')				continue;			else if (substr($table_line, 0, 11) == 'PRIMARY KEY')				$table['primary_key'] = $table_line;			else if (substr($table_line, 0, 6) == 'UNIQUE')				$table['unique'] = $table_line;			else if (substr($table_line, 0, strpos($table_line, ' ')) != '')				$table['columns'][substr($table_line, 0, strpos($table_line, ' '))] = forum_trim(substr($table_line, strpos($table_line, ' ')));		}		return $table;	}	function add_field($table_name, $field_name, $field_type, $allow_null, $default_value = null, $after_field = 0, $no_prefix = false)	{		if ($this->field_exists($table_name, $field_name, $no_prefix))			return;		$table = $this->get_table_info($table_name, $no_prefix);		// Create temp table		$now = time();		$tmptable = str_replace('CREATE TABLE '.($no_prefix ? '' : $this->prefix).$this->escape($table_name).' (', 'CREATE TABLE '.($no_prefix ? '' : $this->prefix).$this->escape($table_name).'_t'.$now.' (', $table['sql']);		$this->query($tmptable) or error(__FILE__, __LINE__);		$this->query('INSERT INTO '.($no_prefix ? '' : $this->prefix).$this->escape($table_name).'_t'.$now.' SELECT * FROM '.($no_prefix ? '' : $this->prefix).$this->escape($table_name)) or error(__FILE__, __LINE__);		// Create new table sql		$field_type = preg_replace(array_keys($this->datatype_transformations), array_values($this->datatype_transformations), $field_type);		$query = $field_type;		if (!$allow_null)			$query .= ' NOT NULL';		if ($default_value === null || $default_value === '')			$default_value = '\'\'';		$query .= ' DEFAULT '.$default_value;		$old_columns = array_keys($table['columns']);		array_insert($table['columns'], $after_field, $query.',', $field_name);		$new_table = 'CREATE TABLE '.($no_prefix ? '' : $this->prefix).$this->escape($table_name).' (';		foreach ($table['columns'] as $cur_column => $column_details)			$new_table .= "\n".$cur_column.' '.$column_details;		if (isset($table['unique']))			$new_table .= "\n".$table['unique'].',';		if (isset($table['primary_key']))			$new_table .= "\n".$table['primary_key'];		$new_table = trim($new_table, ',')."\n".');';		// Drop old table		$this->drop_table($table_name, $no_prefix);		// Create new table		$this->query($new_table) or error(__FILE__, __LINE__);		// Recreate indexes		if (!empty($table['indices']))		{			foreach ($table['indices'] as $cur_index)				$this->query($cur_index) or error(__FILE__, __LINE__);		}		//Copy content back		$this->query('INSERT INTO '.($no_prefix ? '' : $this->prefix).$this->escape($table_name).' ('.implode(', ', $old_columns).') SELECT * FROM '.($no_prefix ? '' : $this->prefix).$this->escape($table_name).'_t'.$now) or error(__FILE__, __LINE__);		// Drop temp table		$this->drop_table($table_name.'_t'.$now, $no_prefix);	}	function alter_field($table_name, $field_name, $field_type, $allow_null, $default_value = null, $after_field = 0, $no_prefix = false)	{		return;	}	function drop_field($table_name, $field_name, $no_prefix = false)	{		if (!$this->field_exists($table_name, $field_name, $no_prefix))			return;		$table = $this->get_table_info($table_name, $no_prefix);		// Create temp table		$now = time();		$tmptable = str_replace('CREATE TABLE '.($no_prefix ? '' : $this->prefix).$this->escape($table_name).' (', 'CREATE TABLE '.($no_prefix ? '' : $this->prefix).$this->escape($table_name).'_t'.$now.' (', $table['sql']);		$this->query($tmptable) or error(__FILE__, __LINE__);		$this->query('INSERT INTO '.($no_prefix ? '' : $this->prefix).$this->escape($table_name).'_t'.$now.' SELECT * FROM '.($no_prefix ? '' : $this->prefix).$this->escape($table_name)) or error(__FILE__, __LINE__);		// Work out the columns we need to keep and the sql for the new table		unset($table['columns'][$field_name]);		$new_columns = array_keys($table['columns']);		$new_table = 'CREATE TABLE '.($no_prefix ? '' : $this->prefix).$this->escape($table_name).' (';		foreach ($table['columns'] as $cur_column => $column_details)			$new_table .= "\n".$cur_column.' '.$column_details;		if (isset($table['unique']))			$new_table .= "\n".$table['unique'].',';		if (isset($table['primary_key']))			$new_table .= "\n".$table['primary_key'];		$new_table = trim($new_table, ',')."\n".');';		// Drop old table		$this->drop_table($table_name, $no_prefix);		// Create new table		$this->query($new_table) or error(__FILE__, __LINE__);		// Recreate indexes		if (!empty($table['indices']))		{			foreach ($table['indices'] as $cur_index)				if (!preg_match('#\(.*'.$field_name.'.*\)#', $cur_index))					$this->query($cur_index) or error(__FILE__, __LINE__);		}		//Copy content back		$this->query('INSERT INTO '.($no_prefix ? '' : $this->prefix).$this->escape($table_name).' SELECT '.implode(', ', $new_columns).' FROM '.($no_prefix ? '' : $this->prefix).$this->escape($table_name).'_t'.$now) or error(__FILE__, __LINE__);		// Drop temp table		$this->drop_table($table_name.'_t'.$now, $no_prefix);	}	function add_index($table_name, $index_name, $index_fields, $unique = false, $no_prefix = false)	{		if ($this->index_exists($table_name, $index_name, $no_prefix))			return;		$this->query('CREATE '.($unique ? 'UNIQUE ' : '').'INDEX '.($no_prefix ? '' : $this->prefix).$table_name.'_'.$index_name.' ON '.($no_prefix ? '' : $this->prefix).$table_name.'('.implode(',', $index_fields).')') or error(__FILE__, __LINE__);	}	function drop_index($table_name, $index_name, $no_prefix = false)	{		if (!$this->index_exists($table_name, $index_name, $no_prefix))			return;		$this->query('DROP INDEX '.($no_prefix ? '' : $this->prefix).$table_name.'_'.$index_name) or error(__FILE__, __LINE__);	}}
<?php/** * Administration panel index page. * * Gives an overview of some statistics to administrators and moderators. * * @copyright (C) 2008-2011 PunBB, partially based on code (C) 2008-2009 FluxBB.org * @license http://www.gnu.org/licenses/gpl.html GPL version 2 or higher * @package PunBB */if (!defined('FORUM_ROOT'))	define('FORUM_ROOT', '../');require FORUM_ROOT.'include/common.php';require FORUM_ROOT.'include/common_admin.php';($hook = get_hook('ain_start')) ? eval($hook) : null;if (!$forum_user['is_admmod'])	message($lang_common['No permission']);// Load the admin.php language filesrequire FORUM_ROOT.'lang/'.$forum_user['language'].'/admin_common.php';require FORUM_ROOT.'lang/'.$forum_user['language'].'/admin_index.php';// Show phpinfo() outputif (isset($_GET['action']) && $_GET['action'] == 'phpinfo' && $forum_user['g_id'] == FORUM_ADMIN){	($hook = get_hook('ain_phpinfo_selected')) ? eval($hook) : null;	// Is phpinfo() a disabled function?	if (strpos(strtolower((string)@ini_get('disable_functions')), 'phpinfo') !== false)		message($lang_admin_index['phpinfo disabled']);	phpinfo();	exit;}// Generate check for updates text blockif ($forum_user['g_id'] == FORUM_ADMIN){	if ($forum_config['o_check_for_updates'] == '1')		$punbb_updates = $lang_admin_index['Check for updates enabled'];	else	{		// Get a list of installed hotfix extensions		$query = array(			'SELECT'	=> 'e.id',			'FROM'		=> 'extensions AS e',			'WHERE'		=> 'e.id LIKE \'hotfix_%\''		);		($hook = get_hook('ain_update_check_qr_get_hotfixes')) ? eval($hook) : null;		$result = $forum_db->query_build($query) or error(__FILE__, __LINE__);		$hotfixes = array();		while ($row = $forum_db->fetch_row($result))		{			$hotfixes[] = urlencode($row[0]);		}		$punbb_updates = '<a href="http://punbb.informer.com/update/?version='.urlencode($forum_config['o_cur_version']).'&amp;hotfixes='.implode(',', $hotfixes).'">'.$lang_admin_index['Check for updates manual'].'</a>';	}}// Get the server load averages (if possible)if (function_exists('sys_getloadavg') && is_array(sys_getloadavg())){	$load_averages = sys_getloadavg();	array_walk($load_averages, create_function('&$v', '$v = round($v, 3);'));	$server_load = $load_averages[0].' '.$load_averages[1].' '.$load_averages[2];}else if (@is_readable('/proc/loadavg')){	// We use @ just in case	$fh = @fopen('/proc/loadavg', 'r');	$load_averages = @fread($fh, 64);	@fclose($fh);	$load_averages = empty($load_averages) ? array() : explode(' ', $load_averages);	$server_load = isset($load_averages[2]) ? $load_averages[0].' '.$load_averages[1].' '.$load_averages[2] : 'Not available';}else if (!in_array(PHP_OS, array('WINNT', 'WIN32')) && preg_match('/averages?: ([0-9\.]+),[\s]+([0-9\.]+),[\s]+([0-9\.]+)/i', @exec('uptime'), $load_averages))	$server_load = $load_averages[1].' '.$load_averages[2].' '.$load_averages[3];else	$server_load = $lang_admin_index['Not available'];// Get number of current visitors$query = array(	'SELECT'	=> 'COUNT(o.user_id)',	'FROM'		=> 'online AS o',	'WHERE'		=> 'o.idle=0');($hook = get_hook('ain_qr_get_users_online')) ? eval($hook) : null;$result = $forum_db->query_build($query) or error(__FILE__, __LINE__);$num_online = $forum_db->result($result);// Get the database system version$db_version = $forum_db->get_version();// Collect some additional info about MySQLif (in_array($db_type, array('mysql', 'mysqli', 'mysql_innodb', 'mysqli_innodb'))){	$db_version = 'MySQL '.$db_version;	// Calculate total db size/row count	$result = $forum_db->query('SHOW TABLE STATUS FROM `'.$db_name.'` LIKE \''.$db_prefix.'%\'') or error(__FILE__, __LINE__);	$total_records = $total_size = 0;	while ($status = $forum_db->fetch_assoc($result))	{		$total_records += $status['Rows'];		$total_size += $status['Data_length'] + $status['Index_length'];	}	$total_size = $total_size / 1024;	if ($total_size > 1024)		$total_size = forum_number_format($total_size / 1024, 2).' MB';	else		$total_size = forum_number_format($total_size, 2).' KB';}// Check for the existance of various PHP opcode caches/optimizersif (function_exists('mmcache'))	$php_accelerator = '<a href="http://turck-mmcache.sourceforge.net/">Turck MMCache</a>';else if (isset($_PHPA))	$php_accelerator = '<a href="http://www.php-accelerator.co.uk/">ionCube PHP Accelerator</a>';else if (ini_get('apc.enabled'))	$php_accelerator ='<a href="http://www.php.net/apc/">Alternative PHP Cache (APC)</a>';else if (ini_get('zend_optimizer.optimization_level'))	$php_accelerator = '<a href="http://www.zend.com/products/zend_optimizer/">Zend Optimizer</a>';else if (ini_get('eaccelerator.enable'))	$php_accelerator = '<a href="http://eaccelerator.net/">eAccelerator</a>';else if (ini_get('xcache.cacher'))	$php_accelerator = '<a href="http://xcache.lighttpd.net/">XCache</a>';else	$php_accelerator = $lang_admin_index['Not applicable'];// Setup breadcrumbs$forum_page['crumbs'] = array(	array($forum_config['o_board_title'], forum_link($forum_url['index'])),	array($lang_admin_common['Forum administration'], forum_link($forum_url['admin_index'])));if ($forum_user['g_id'] == FORUM_ADMIN)	$forum_page['crumbs'][] = array($lang_admin_common['Start'], forum_link($forum_url['admin_index']));$forum_page['crumbs'][] = array($lang_admin_common['Information'], forum_link($forum_url['admin_index']));($hook = get_hook('ain_pre_header_load')) ? eval($hook) : null;define('FORUM_PAGE_SECTION', 'start');define('FORUM_PAGE', 'admin-information');require FORUM_ROOT.'header.php';$forum_page['item_count'] = 0;// START SUBST - <!-- forum_main -->ob_start();($hook = get_hook('ain_main_output_start')) ? eval($hook) : null;?>	<div class="main-subhead">		<h2 class="hn"><span><?php echo $lang_admin_index['Information head'] ?></span></h2>	</div>	<div class="main-content main-frm"><?php if (!empty($alert_items)): ?>		<div id="admin-alerts" class="ct-set warn-set">			<div class="ct-box warn-box">				<h3 class="ct-legend hn warn"><span><?php echo $lang_admin_index['Alerts'] ?></span></h3>				<?php echo implode(' ', $alert_items)."\n" ?>			</div>		</div><?php endif; ?>		<div class="ct-group"><?php ($hook = get_hook('ain_pre_version')) ? eval($hook) : null; ?>			<div class="ct-set group-item<?php echo ++$forum_page['item_count'] ?>">				<div class="ct-box">					<h3 class="ct-legend hn"><span><?php echo $lang_admin_index['PunBB version'] ?></span></h3>					<ul class="data-list">						<li><span>PunBB <?php echo $forum_config['o_cur_version'] ?></span></li>						<li><span><?php echo $lang_admin_index['Copyright message'] ?></span></li><?php if (isset($punbb_updates)): ?>						<li><span><?php echo $punbb_updates ?></span></li><?php endif; ?>					</ul>				</div>			</div><?php ($hook = get_hook('ain_pre_community')) ? eval($hook) : null; ?>			<div class="ct-set group-item<?php echo ++$forum_page['item_count'] ?>">				<div class="ct-box">					<h3 class="ct-legend hn"><span><?php echo $lang_admin_index['PunBB community'] ?></span></h3>					<ul class="data-list">						<li><span><?php echo $lang_admin_index['Forums'] ?>: <a href="http://punbb.informer.com/forums/">Forums</a></span></li>						<li><span><?php echo $lang_admin_index['Twitter'] ?>: <a href="https://twitter.com/punbb_forum">@punbb_forum</a></span></li>						<li><span><?php echo $lang_admin_index['Development'] ?>: <a href="https://github.com/punbb/punbb">https://github.com/punbb</a></span></li>					</ul>				</div>			</div><?php ($hook = get_hook('ain_pre_server_load')) ? eval($hook) : null; ?>			<div class="ct-set group-item<?php echo ++$forum_page['item_count'] ?>">				<div class="ct-box">					<h3 class="ct-legend hn"><span><?php echo $lang_admin_index['Server load'] ?></span></h3>					<p><span><?php echo $server_load ?> (<?php echo $num_online.' '.$lang_admin_index['users online']?>)</span></p>				</div>			</div><?php ($hook = get_hook('ain_pre_environment')) ? eval($hook) : null; if ($forum_user['g_id'] == FORUM_ADMIN): ?>			<div class="ct-set group-item<?php echo ++$forum_page['item_count'] ?>">				<div class="ct-box">					<h3 class="ct-legend hn"><span><?php echo $lang_admin_index['Environment'] ?></span></h3>					<ul class="data-list">						<li><span><?php echo $lang_admin_index['Operating system'] ?>: <?php echo PHP_OS ?></span></li>						<li><span>PHP: <?php echo PHP_VERSION ?> - <a href="<?php echo forum_link($forum_url['admin_index']) ?>?action=phpinfo"><?php echo $lang_admin_index['Show info'] ?></a></span></li>						<li><span><?php echo $lang_admin_index['Accelerator'] ?>: <?php echo $php_accelerator ?></span></li>					</ul>				</div>			</div><?php ($hook = get_hook('ain_pre_database')) ? eval($hook) : null; ?>			<div class="ct-set group-item<?php echo ++$forum_page['item_count'] ?>">				<div class="ct-box">					<h3 class="ct-legend hn"><span><?php echo $lang_admin_index['Database'] ?></span></h3>					<ul class="data-list">						<li><span><?php echo implode(' ', $forum_db->get_version()) ?></span></li><?php if (isset($total_records) && isset($total_size)): ?>						<li><span><?php echo $lang_admin_index['Rows'] ?>: <?php echo forum_number_format($total_records) ?></span></li>						<li><span><?php echo $lang_admin_index['Size'] ?>: <?php echo $total_size ?></span></li><?php endif; ?>					</ul>				</div>			</div><?php endif; ($hook = get_hook('ain_items_end')) ? eval($hook) : null; ?>		</div>	</div><?php($hook = get_hook('ain_end')) ? eval($hook) : null;$tpl_temp = forum_trim(ob_get_contents());$tpl_main = str_replace('<!-- forum_main -->', $tpl_temp, $tpl_main);ob_end_clean();// END SUBST - <!-- forum_main -->require FORUM_ROOT.'footer.php';
<?php// Language definitions used in all admin files$lang_admin_bans = array('Ban advanced'					=>	'Ban advanced settings','Ban advanced heading'			=>	'Ban by username with IP and email or just ban by IP, by email or both','Ban criteria legend'			=>	'Ban criteria','Ban settings legend'			=>	'Ban settings','Ban IP warning'				=>	'<strong>Warning!</strong> You should be very careful when banning an IP-range because of the possibility of multiple users matching the same partial IP.','Current ban head'				=>	'Banned by %s','Username'						=>	'Username:','Username to ban label'			=>	'Username to ban','Ban creator'					=>	'Ban creator','IP-addresses to ban label'		=>	'IP-addresses to ban','IP-addresses help'				=>	'The IP or IP-ranges you wish to ban (e.g. 150.11.110.1 or 150.11.110). Separate addresses with spaces. If an IP is entered already it is the last known IP of this user in the database.','IP-addresses help stats'		=>	'Click the following link to see IP statistics for this user: ','IP-addresses help link'		=>	'User IP statistics','E-mail/domain to ban label'	=>	'Email or domain to ban','E-mail/domain help'			=>	'The email or email domain you wish to ban (e.g. someone@example.com or example.com). See "Allow registration with banned email addresses" in Settings/Registration for more info.','Ban message label'				=>	'Ban message','Ban message help'				=>	'Displayed to the banned user when he/she visits the forums','Expire date label'				=>	'Ban expiry date','Expire date help'				=>	'The date when this ban should be automatically removed (format: YYYY-MM-DD). Leave blank to remove manually.','Expires'						=>	'Expires:','Message'						=>	'Message:','New ban heading'				=>	'Ban specified username','New ban legend'				=>	'New ban','Advanced ban info'				=>	'The next page will let you enter a custom IP and email. If you just want to ban a specific IP/IP-range or email just leave the username on this page blank.','Existing bans heading'			=>	'Edit or remove existing bans','Add ban'						=>	'Add ban','Save ban'						=>	'Save ban','E-mail'						=>	'Email:','IP-ranges'						=>	'IP/IP-ranges:','Reason'						=>	'Reason','No bans'						=>	'No bans in list.','Edit ban'						=>	'Edit ban','Remove ban'					=>	'Remove ban','Edit or remove'				=>	'%s or %s','Ban removed'					=>	'Ban removed.','Ban added'						=>	'Ban added.','Ban edited'					=>	'Ban edited.','No user id message'			=>	'No user by that ID registered.','No user username message'		=>	'No user by that username registered. If you want to add a ban not tied to a specific username just leave the username blank.','User is admin message'			=>	'The user is an administrator and can\'t be banned. If you want to ban an administrator, you must first move him/her to any other user group.','Must enter message'			=>	'You must enter at least one of the following pieces of information: a username, an IP address or an email address.','Invalid IP message'			=>	'You entered an invalid IP/IP-range.','Can\'t ban guest user'			=>	'The guest user cannot be banned.','Invalid e-mail message'		=>	'The email address (e.g. user@example.com) or partial email address domain (e.g. example.com) you entered is invalid.','Invalid expire message'		=>	'You entered an invalid expire date. The format should be YYYY-MM-DD and the date must be at least one day in the future.',);
<?php/** * A database layer class that relies on the MySQLi PHP extension. * * @copyright (C) 2008-2011 PunBB, partially based on code (C) 2008-2009 FluxBB.org * @license http://www.gnu.org/licenses/gpl.html GPL version 2 or higher * @package PunBB */// Make sure we have built in support for MySQLif (!function_exists('mysqli_connect'))	exit('This PHP environment doesn\'t have Improved MySQL (mysqli) support built in. Improved MySQL support is required if you want to use a MySQL 4.1 (or later) database to run this forum. Consult the PHP documentation for further assistance.');class DBLayer{	var $prefix;	var $link_id;	var $query_result;	var $in_transaction = 0;	var $saved_queries = array();	var $num_queries = 0;	var $datatype_transformations = array(		'/^SERIAL$/'	=>	'INT(10) UNSIGNED AUTO_INCREMENT'	);	function DBLayer($db_host, $db_username, $db_password, $db_name, $db_prefix, $foo)	{		$this->prefix = $db_prefix;		// Was a custom port supplied with $db_host?		if (strpos($db_host, ':') !== false)			list($db_host, $db_port) = explode(':', $db_host);		if (isset($db_port))			$this->link_id = @mysqli_connect($db_host, $db_username, $db_password, $db_name, $db_port);		else			$this->link_id = @mysqli_connect($db_host, $db_username, $db_password, $db_name);		if (!$this->link_id)			error('Unable to connect to MySQL and select database. MySQL reported: '.mysqli_connect_error(), __FILE__, __LINE__);		// Setup the client-server character set (UTF-8)		if (!defined('FORUM_NO_SET_NAMES'))			$this->set_names('utf8');		return $this->link_id;	}	function start_transaction()	{		++$this->in_transaction;		return mysqli_query($this->link_id, 'START TRANSACTION');	}	function end_transaction()	{		--$this->in_transaction;		if (mysqli_query($this->link_id, 'COMMIT'))			return true;		else		{			mysqli_query($this->link_id, 'ROLLBACK');			return false;		}	}	function query($sql, $unbuffered = false)	{		if (strlen($sql) > 140000)			exit('Insane query. Aborting.');		if (defined('FORUM_SHOW_QUERIES'))			$q_start = forum_microtime();		$this->query_result = mysqli_query($this->link_id, $sql);		if ($this->query_result)		{			if (defined('FORUM_SHOW_QUERIES'))				$this->saved_queries[] = array($sql, sprintf('%.5f', forum_microtime() - $q_start));			++$this->num_queries;			return $this->query_result;		}		else		{			if (defined('FORUM_SHOW_QUERIES'))				$this->saved_queries[] = array($sql, 0);			if ($this->in_transaction)				mysqli_query($this->link_id, 'ROLLBACK');			--$this->in_transaction;			return false;		}	}	function query_build($query, $return_query_string = false, $unbuffered = false)	{		$sql = '';		if (isset($query['SELECT']))		{			$sql = 'SELECT '.$query['SELECT'].' FROM '.(isset($query['PARAMS']['NO_PREFIX']) ? '' : $this->prefix).$query['FROM'];			if (isset($query['JOINS']))			{				foreach ($query['JOINS'] as $cur_join)					$sql .= ' '.key($cur_join).' '.(isset($query['PARAMS']['NO_PREFIX']) ? '' : $this->prefix).current($cur_join).' ON '.$cur_join['ON'];			}			if (!empty($query['WHERE']))				$sql .= ' WHERE '.$query['WHERE'];			if (!empty($query['GROUP BY']))				$sql .= ' GROUP BY '.$query['GROUP BY'];			if (!empty($query['HAVING']))				$sql .= ' HAVING '.$query['HAVING'];			if (!empty($query['ORDER BY']))				$sql .= ' ORDER BY '.$query['ORDER BY'];			if (!empty($query['LIMIT']))				$sql .= ' LIMIT '.$query['LIMIT'];		}		else if (isset($query['INSERT']))		{			$sql = 'INSERT INTO '.(isset($query['PARAMS']['NO_PREFIX']) ? '' : $this->prefix).$query['INTO'];			if (!empty($query['INSERT']))				$sql .= ' ('.$query['INSERT'].')';			if (is_array($query['VALUES']))				$sql .= ' VALUES('.implode('),(', $query['VALUES']).')';			else				$sql .= ' VALUES('.$query['VALUES'].')';		}		else if (isset($query['UPDATE']))		{			$query['UPDATE'] = (isset($query['PARAMS']['NO_PREFIX']) ? '' : $this->prefix).$query['UPDATE'];			$sql = 'UPDATE '.$query['UPDATE'].' SET '.$query['SET'];			if (!empty($query['WHERE']))				$sql .= ' WHERE '.$query['WHERE'];		}		else if (isset($query['DELETE']))		{			$sql = 'DELETE FROM '.(isset($query['PARAMS']['NO_PREFIX']) ? '' : $this->prefix).$query['DELETE'];			if (!empty($query['WHERE']))				$sql .= ' WHERE '.$query['WHERE'];		}		else if (isset($query['REPLACE']))		{			$sql = 'REPLACE INTO '.(isset($query['PARAMS']['NO_PREFIX']) ? '' : $this->prefix).$query['INTO'];			if (!empty($query['REPLACE']))				$sql .= ' ('.$query['REPLACE'].')';			$sql .= ' VALUES('.$query['VALUES'].')';		}		return ($return_query_string) ? $sql : $this->query($sql, $unbuffered);	}	function result($query_id = 0, $row = 0, $col = 0)	{		if ($query_id)		{			if ($row)				@mysqli_data_seek($query_id, $row);			$cur_row = @mysqli_fetch_row($query_id);			return $cur_row[$col];		}		else			return false;	}	function fetch_assoc($query_id = 0)	{		return ($query_id) ? @mysqli_fetch_assoc($query_id) : false;	}	function fetch_row($query_id = 0)	{		return ($query_id) ? @mysqli_fetch_row($query_id) : false;	}	function num_rows($query_id = 0)	{		return ($query_id) ? @mysqli_num_rows($query_id) : false;	}	function affected_rows()	{		return ($this->link_id) ? @mysqli_affected_rows($this->link_id) : false;	}	function insert_id()	{		return ($this->link_id) ? @mysqli_insert_id($this->link_id) : false;	}	function get_num_queries()	{		return $this->num_queries;	}	function get_saved_queries()	{		return $this->saved_queries;	}	function free_result($query_id = false)	{		return ($query_id) ? @mysqli_free_result($query_id) : false;	}	function escape($str)	{		return is_array($str) ? '' : mysqli_real_escape_string($this->link_id, $str);	}	function error()	{		$result['error_sql'] = @current(@end($this->saved_queries));		$result['error_no'] = @mysqli_errno($this->link_id);		$result['error_msg'] = @mysqli_error($this->link_id);		return $result;	}	function close()	{		if ($this->link_id)		{			if ($this->query_result)				@mysqli_free_result($this->query_result);			return @mysqli_close($this->link_id);		}		else			return false;	}	function set_names($names)	{		return $this->query('SET NAMES \''.$this->escape($names).'\'');	}	function get_version()	{		$result = $this->query('SELECT VERSION()');		return array(			'name'		=> 'MySQL Improved (InnoDB)',			'version'	=> preg_replace('/^([^-]+).*$/', '\\1', $this->result($result))		);	}	function table_exists($table_name, $no_prefix = false)	{		$result = $this->query('SHOW TABLES LIKE \''.($no_prefix ? '' : $this->prefix).$this->escape($table_name).'\'');		return $this->num_rows($result) > 0;	}	function field_exists($table_name, $field_name, $no_prefix = false)	{		$result = $this->query('SHOW COLUMNS FROM '.($no_prefix ? '' : $this->prefix).$table_name.' LIKE \''.$this->escape($field_name).'\'');		return $this->num_rows($result) > 0;	}	function index_exists($table_name, $index_name, $no_prefix = false)	{		$exists = false;		$result = $this->query('SHOW INDEX FROM '.($no_prefix ? '' : $this->prefix).$table_name);		while ($cur_index = $this->fetch_assoc($result))		{			if ($cur_index['Key_name'] == ($no_prefix ? '' : $this->prefix).$table_name.'_'.$index_name)			{				$exists = true;				break;			}		}		return $exists;	}	function create_table($table_name, $schema, $no_prefix = false)	{		if ($this->table_exists($table_name, $no_prefix))			return;		$query = 'CREATE TABLE '.($no_prefix ? '' : $this->prefix).$table_name." (\n";		// Go through every schema element and add it to the query		foreach ($schema['FIELDS'] as $field_name => $field_data)		{			$field_data['datatype'] = preg_replace(array_keys($this->datatype_transformations), array_values($this->datatype_transformations), $field_data['datatype']);			$query .= $field_name.' '.$field_data['datatype'];			if (isset($field_data['collation']))				$query .= 'CHARACTER SET utf8 COLLATE utf8_'.$field_data['collation'];			if (!$field_data['allow_null'])				$query .= ' NOT NULL';			if (isset($field_data['default']))				$query .= ' DEFAULT '.$field_data['default'];			$query .= ",\n";		}		// If we have a primary key, add it		if (isset($schema['PRIMARY KEY']))			$query .= 'PRIMARY KEY ('.implode(',', $schema['PRIMARY KEY']).'),'."\n";		// Add unique keys		if (isset($schema['UNIQUE KEYS']))		{			foreach ($schema['UNIQUE KEYS'] as $key_name => $key_fields)				$query .= 'UNIQUE KEY '.($no_prefix ? '' : $this->prefix).$table_name.'_'.$key_name.'('.implode(',', $key_fields).'),'."\n";		}		// Add indexes		if (isset($schema['INDEXES']))		{			foreach ($schema['INDEXES'] as $index_name => $index_fields)				$query .= 'KEY '.($no_prefix ? '' : $this->prefix).$table_name.'_'.$index_name.'('.implode(',', $index_fields).'),'."\n";		}		// We remove the last two characters (a newline and a comma) and add on the ending		$query = substr($query, 0, strlen($query) - 2)."\n".') ENGINE = '.(isset($schema['ENGINE']) ? $schema['ENGINE'] : 'InnoDB').' CHARACTER SET utf8';		$this->query($query) or error(__FILE__, __LINE__);	}	function drop_table($table_name, $no_prefix = false)	{		if (!$this->table_exists($table_name, $no_prefix))			return;		$this->query('DROP TABLE '.($no_prefix ? '' : $this->prefix).$table_name) or error(__FILE__, __LINE__);	}	function add_field($table_name, $field_name, $field_type, $allow_null, $default_value = null, $after_field = null, $no_prefix = false)	{		if ($this->field_exists($table_name, $field_name, $no_prefix))			return;		$field_type = preg_replace(array_keys($this->datatype_transformations), array_values($this->datatype_transformations), $field_type);		if ($default_value !== null && !is_int($default_value) && !is_float($default_value))			$default_value = '\''.$this->escape($default_value).'\'';		$this->query('ALTER TABLE '.($no_prefix ? '' : $this->prefix).$table_name.' ADD '.$field_name.' '.$field_type.($allow_null ? ' ' : ' NOT NULL').($default_value !== null ? ' DEFAULT '.$default_value : ' ').($after_field != null ? ' AFTER '.$after_field : '')) or error(__FILE__, __LINE__);	}	function alter_field($table_name, $field_name, $field_type, $allow_null, $default_value = null, $after_field = null, $no_prefix = false)	{		if (!$this->field_exists($table_name, $field_name, $no_prefix))			return;		$field_type = preg_replace(array_keys($this->datatype_transformations), array_values($this->datatype_transformations), $field_type);		if ($default_value !== null && !is_int($default_value) && !is_float($default_value))			$default_value = '\''.$this->escape($default_value).'\'';		$this->query('ALTER TABLE '.($no_prefix ? '' : $this->prefix).$table_name.' MODIFY '.$field_name.' '.$field_type.($allow_null ? ' ' : ' NOT NULL').($default_value !== null ? ' DEFAULT '.$default_value : ' ').($after_field != null ? ' AFTER '.$after_field : '')) or error(__FILE__, __LINE__);	}	function drop_field($table_name, $field_name, $no_prefix = false)	{		if (!$this->field_exists($table_name, $field_name, $no_prefix))			return;		$this->query('ALTER TABLE '.($no_prefix ? '' : $this->prefix).$table_name.' DROP '.$field_name) or error(__FILE__, __LINE__);	}	function add_index($table_name, $index_name, $index_fields, $unique = false, $no_prefix = false)	{		if ($this->index_exists($table_name, $index_name, $no_prefix))			return;		$this->query('ALTER TABLE '.($no_prefix ? '' : $this->prefix).$table_name.' ADD '.($unique ? 'UNIQUE ' : '').'INDEX '.($no_prefix ? '' : $this->prefix).$table_name.'_'.$index_name.' ('.implode(',', $index_fields).')') or error(__FILE__, __LINE__);	}	function drop_index($table_name, $index_name, $no_prefix = false)	{		if (!$this->index_exists($table_name, $index_name, $no_prefix))			return;		$this->query('ALTER TABLE '.($no_prefix ? '' : $this->prefix).$table_name.' DROP INDEX '.($no_prefix ? '' : $this->prefix).$table_name.'_'.$index_name) or error(__FILE__, __LINE__);	}}
<?php/** * Loads the reserved strings used to transform problematic strings in URLs. * These are matched against the whole string after all other transformations. * * @copyright (C) 2008-2011 PunBB, partially based on code (C) 2008-2009 FluxBB.org * @license http://www.gnu.org/licenses/gpl.html GPL version 2 or higher * @package PunBB */$forum_reserved_strings = array(	''				=>	'view',	'newpost'		=>	'view',	'newposts'		=>	'view',	'new-post'		=>	'view',	'new-posts'		=>	'view',	'lastpost'		=>	'view',	'lastposts'		=>	'view',	'last-post'		=>	'view',	'last-posts'	=>	'view',);
<?php$forum_loader->add_css('style/Oxygen/min/Oxygen.min.css', array('type' => 'file', 'group' => FORUM_CSS_GROUP_SYSTEM, 'media' => 'screen'));//$forum_loader->add_css('style/Oxygen/Oxygen.css', array('type' => 'file', 'group' => FORUM_CSS_GROUP_SYSTEM, 'media' => 'screen'));//$forum_loader->add_css('style/Oxygen/Oxygen_mobile.css', array('type' => 'file', 'group' => FORUM_CSS_GROUP_SYSTEM, 'media' => 'screen'));//$forum_loader->add_css('style/Oxygen/Oxygen_cs.css', array('type' => 'file', 'group' => FORUM_CSS_GROUP_SYSTEM, 'media' => 'screen'));// IE$forum_loader->add_css('style/Oxygen/min/Oxygen_ie6.min.css', array('type' => 'file', 'group' => FORUM_CSS_GROUP_SYSTEM, 'media' => 'screen', 'browsers' => array('IE' => 'lte IE 6', '!IE' => false)));$forum_loader->add_css('style/Oxygen/min/Oxygen_ie7.min.css', array('type' => 'file', 'group' => FORUM_CSS_GROUP_SYSTEM, 'media' => 'screen', 'browsers' => array('IE' => 'IE 7', '!IE' => false)));$forum_loader->add_css('style/Oxygen/min/Oxygen_ie8.min.css', array('type' => 'file', 'group' => FORUM_CSS_GROUP_SYSTEM, 'media' => 'screen', 'browsers' => array('IE' => 'IE 8', '!IE' => false)));?>
<?php// Language definitions used in delete.php$lang_delete = array('Delete post'			=>	'Delete post','Delete topic'			=>	'Delete topic','Delete post label'		=>	'Delete post by %1$s posted %2$s','Delete topic label'	=>	'Delete topic by %1$s (including replies) created %2$s','Delete topic info'		=>	'Created by %1$s %2$s.','Topic byline'			=>	'<span>Topic by </span>%s','Reply byline'			=>	'<span>Reply by </span>%s','Delete post info'		=>	'Post by %1$s %2$s','Topic'					=>	'Topic','Forum'					=>	'Forum','Topic title'			=>	'Topic: %s','Reply title'			=>	'Reply to: %s','Please confirm'		=>	'Please confirm:','Post del redirect'		=>	'Post deleted.','Topic del redirect'	=>	'Topic deleted.',);
<?php/** * Loads the regular expressions used to match SEF URL requests to their proper URLs. * * @copyright (C) 2008-2011 PunBB, partially based on code (C) 2008-2009 FluxBB.org * @license http://www.gnu.org/licenses/gpl.html GPL version 2 or higher * @package PunBB */$forum_rewrite_rules = array(	'/^topic[\/_-]?([0-9]+).*(new|last)[\/_-]?(posts?)(\.html?|\/)?$/i'														=>	'viewtopic.php?id=$1&action=$2',	'/^post[\/_-]?([0-9]+)(\.html?|\/)?$/i'																					=>	'viewtopic.php?pid=$1',	'/^(forum|topic)[\/_-]?([0-9]+).*[\/_-]p(age)?[\/_-]?([0-9]+)(\.html?|\/)?$/i'											=>	'view$1.php?id=$2&p=$4',	'/^feed[\/_-]?(rss|atom)[\/_-]?(f|t)(orum|opic)[\/_-]?([0-9]+)[\/_-]?(\.xml?|\/)?$/i'									=>	'extern.php?action=feed&$2id=$4&type=$1',	'/^(forum|topic)[\/_-]?([0-9]+).*(\.html?|\/)?$/i'																		=>	'view$1.php?id=$2',	'/^new[\/_-]?reply[\/_-]?([0-9]+)(\.html?|\/)?$/i'																		=>	'post.php?tid=$1',	'/^new[\/_-]?reply[\/_-]?([0-9]+)[\/_-]?quote[\/_-]?([0-9]+)(\.html?|\/)?$/i'											=>	'post.php?tid=$1&qid=$2',	'/^new[\/_-]?topic[\/_-]?([0-9]+)(\.html?|\/)?$/i'																		=>	'post.php?fid=$1',	'/^(delete|edit)[\/_-]?([0-9]+)(\.html?|\/)?$/i'																		=>	'$1.php?id=$2',	'/^(login|search|register)(\.html?|\/)?$/i'																				=>	'$1.php',	'/^logout[\/_-]?([0-9]+)[\/_-]([a-z0-9]+)(\.html?|\/)?$/i'																=>	'login.php?action=out&id=$1&csrf_token=$2',	'/^request[\/_-]?password(\.html?|\/)?$/i'																				=>	'login.php?action=forget',	'/^user[\/_-]?([0-9]+)(\.html?|\/)?$/i'																					=>	'profile.php?id=$1',	'/^user[\/_-]?([0-9]+)[\/_-]?([a-z]+)(\.html?|\/)?$/i'																	=>	'profile.php?section=$2&id=$1',	'/^(delete)[\/_-]?(avatar|user)?[\/_-]?([0-9]+)[\/_-]?([a-z0-9]+)?(\.html?|\/)?$/i'										=>	'profile.php?action=$1_$2&id=$3&csrf_token=$4',	'/^change[\/_-]?(email|pass)(word)?[\/_-]?([0-9]+)[\/_-]([a-zA-Z0-9]+)(\.html?|\/)?$/i'									=>	'profile.php?action=change_$1&id=$3&key=$4',	'/^change[\/_-]?(email|pass)(word)?[\/_-]?([0-9]+)(\.html?|\/)?$/i'														=>	'profile.php?action=change_$1&id=$3',	'/^search[\/_-]?(new)[\/_-]([0-9-]+)(\.html?|\/)?$/i'																	=>	'search.php?action=show_new&forum=$2',	'/^search[\/_-]?(new)[\/_-]([0-9-]+)[\/_-]p(age)?[\/_-]?([0-9]+)(\.html?|\/)?$/i'										=>	'search.php?action=show_new&forum=$2&p=$4',	'/^search[\/_-]?(recent)[\/_-]([0-9]+)(\.html?|\/)?$/i'																	=>	'search.php?action=show_recent&value=$2',	'/^search[\/_-]?(recent)[\/_-]([0-9]+)[\/_-]p(age)?[\/_-]?([0-9]+)(\.html?|\/)?$/i'										=>	'search.php?action=show_recent&value=$2&p=$4',	'/^search[\/_-]?(new|recent|unanswered)(\.html?|\/)?$/i'																=>	'search.php?action=show_$1',	'/^search[\/_-]?(new|recent|unanswered)[\/_-]p(age)?[\/_-]?([0-9]+)(\.html?|\/)?$/i'									=>	'search.php?action=show_$1&p=$3',	'/^search[\/_-]?subscriptions[\/_-]?([0-9]+)(\.html?|\/)?$/i'															=>	'search.php?action=show_subscriptions&user_id=$1',	'/^search[\/_-]?subscriptions[\/_-]?([0-9]+)[\/_-]p(age)?[\/_-]?([0-9]+)(\.html?|\/)?$/i'								=>	'search.php?action=show_subscriptions&user_id=$1&p=$3',	'/^search[\/_-]?([0-9]+)(\.html?|\/)?$/i'																				=>	'search.php?search_id=$1',	'/^search[\/_-]?([0-9]+)[\/_-]?p(age)?[\/_-]?([0-9]+)(\.html?|\/)?$/i'													=>	'search.php?search_id=$1&p=$3',	'/^search[\/_-]?(posts|topics)[\/_-]?user[\/_-]?([0-9]+)(\.html?|\/)?$/i'												=>	'search.php?action=show_user_$1&user_id=$2',	'/^search[\/_-]?(posts|topics)[\/_-]?user[\/_-]?([0-9]+)[\/_-]?p(age)?[\/_-]?([0-9]+)(\.html?|\/)?$/i'					=>	'search.php?action=show_user_$1&user_id=$2&p=$4',	'/^search\/k(.*)\/([0-9-]+)\/a(.*)\/(message|subject|all)\/([0-9]+)\/(ASC|DESC)\/(posts|topics)\/?$/i'					=>	'search.php?action=search&keywords=$1&author=$3&forum=$2&search_in=$4&sort_by=$5&sort_dir=$6&show_as=$7',	'/^search\/k(.*)\/([0-9-]+)\/a(.*)\/(message|subject|all)\/([0-9]+)\/(ASC|DESC)\/(posts|topics)\/page\/([0-9]+)\/?$/i'	=>	'search.php?action=search&keywords=$1&author=$3&forum=$2&search_in=$4&sort_by=$5&sort_dir=$6&show_as=$7&p=$8',	'/^search-k(.*)-([0-9-]+)-a(.*)-(message|subject|all)-([0-9]+)-(ASC|DESC)-(posts|topics).html?$/i'						=>	'search.php?action=search&keywords=$1&author=$3&forum=$2&search_in=$4&sort_by=$5&sort_dir=$6&show_as=$7',	'/^search-k(.*)-(message|subject|all)-a(.*)-([0-9]+)-(ASC|DESC)-([0-9-]+)-(posts|topics)-p([0-9]+).html?$/i'			=>	'search.php?action=search&keywords=$1&author=$3&forum=$6&search_in=$2&sort_by=$4&sort_dir=$5&show_as=$7&p=$8',	'/^users(\.html?|\/)?$/i'																								=>	'userlist.php',	'/^users\/(.*)\/([0-9-]+)\/?([a-z_]+)[\/_-]([a-zA-Z]+)[\/_-]p(age)?[\/_-]?([0-9]+)(\.html?|\/)?$/i'						=>	'userlist.php?username=$1&show_group=$2&sort_by=$3&sort_dir=$4&p=$6',	'/^users\/(.*)\/([0-9-]+)\/?([a-z_]+)[\/_-]([a-zA-Z]+)(\.html?|\/)?$/i'													=>	'userlist.php?username=$1&show_group=$2&sort_by=$3&sort_dir=$4',	'/^(email|report|subscribe|unsubscribe)[\/_-]?([0-9]+)[\/_-]?([a-z0-9]+)?(\.html?|\/)?$/i'								=>	'misc.php?$1=$2&csrf_token=$3',	'/^(mark|rules)[\/_-]?(read)?[\/_-]?([a-z0-9]+)?(\.html?|\/)?$/i'														=>	'misc.php?action=$1$2&csrf_token=$3',	'/^mark[\/_-](forum)[\/_-]?([0-9]+)[\/_-](read)[\/_-]([a-z0-9]+)(\.html?|\/)?$/i'										=>	'misc.php?action=markforumread&fid=$2&csrf_token=$4',	'/^help[\/_-]([a-z]+)(\.html?|\/)?$/i'																					=>	'help.php?section=$1',	'/^moderate[\/_-]?([0-9]+)(\.html?|\/)?$/i'																				=>	'moderate.php?fid=$1',	'/^move_topics[\/_-]?([0-9]+)[\/_-]([0-9]+)(\.html?|\/)?$/i'															=>	'moderate.php?fid=$1&move_topics=$2',	'/^(open|close|stick|unstick)[\/_-]?([0-9]+)[\/_-]([0-9]+)[\/_-]([a-z0-9]+)(\.html?|\/)?$/i'							=>	'moderate.php?fid=$2&$1=$3&csrf_token=$4',	'/^moderate[\/_-]?([0-9]+)[\/_-]?p(age)?[\/_-]?([0-9]+)(\.html?|\/)?$/i'												=>	'moderate.php?fid=$1&p=$3',	'/^moderate[\/_-]?([0-9]+)[\/_-]([0-9]+)(\.html?|\/)?$/i'																=>	'moderate.php?fid=$1&tid=$2',	'/^moderate[\/_-]?([0-9]+)[\/_-]([0-9]+)[\/_-]?p(age)?[\/_-]?([0-9]+)(\.html?|\/)?$/i'									=>	'moderate.php?fid=$1&tid=$2&p=$4',	'/^get_host[\/_-]?([0-9]+|[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3})(\.html?|\/)?$/i'								=>	'moderate.php?get_host=$1',	'/^feed[\/_-]?(rss|atom)(\.xml?|\/)?$/i'																				=>	'extern.php?action=feed&type=$1');
<?php// Language definitions used in all admin files$lang_admin_ext = array('Install extension'				=>	'Install extension','Upgrade extension'				=>	'Upgrade extension','Extensions available'			=>	'Extensions available for install','Hotfixes available'			=>	'Hotfixes available for install','Installed extensions'			=>	'Installed extensions','Version'						=>	'Version %s','Hotfix'						=>	'Hotfix','Installed hotfixes'			=>	'Installed hotfixes','Installed extensions warn'		=>	'<strong>WARNING!</strong> If you uninstall an extension, any data associated with that extension will be permanently deleted from the database and cannot be restored by re-installing the extension. If you wish to retain the data then you should disable the extension instead.','Uninstall extension'			=>	'Uninstall extension','Uninstall hotfix'				=>	'Uninstall hotfix','Uninstall'						=>	'Uninstall','Uninstall extension confirm'	=>	'Are you sure you want to uninstall the extension "%s"?','Enable'						=>	'Enable','Disable'						=>	'Disable','Extension error'				=>	'Error','Extension loading error'		=>	'Loading of extension "%s" failed.','Illegal ID'					=>	'The ID must contain only lowercase alphanumeric characters (a-z and 0-9) and the underscore character (_).','Maxtestedon warning'			=>	'This extension has not been explicitly tested on your PunBB version and might therefore not be compatible with your current setup.','Missing manifest'				=>	'Missing manifest.xml.','Failed parse manifest'			=>	'Unable to parse manifest.xml.','extension root error'			=>	'Root element extension is malformed or missing.','extension/engine error'		=>	'Root element engine attribute is malformed or missing.','extension/engine error2'		=>	'Extension format version is unsupported.','extension/id error'			=>	'Element extension/id is malformed or missing.','extension/id error2'			=>	'Element extension/id does not match the extension folder name.','extension/title error'			=>	'Element extension/title is malformed or missing.','extension/version error'		=>	'Element extension/version is malformed or missing.','extension/description error'	=>	'Element extension/description is malformed or missing.','extension/author error'		=>	'Element extension/author is malformed or missing.','extension/minversion error'	=>	'Element extension/minversion is malformed or missing.','extension/minversion error2'	=>	'This extension requires PunBB %s or later.','extension/maxtestedon error'	=>	'Element extension/maxtestedon is malformed or missing.','extension/note error'			=>	'Element extension/note is malformed.','extension/note error2'			=>	'Element extension/note has malformed or missing attribute "type".','extension/hooks/hook error'	=>	'Element extension/hooks/hook is malformed or missing.','extension/hooks/hook error2'	=>	'Element extension/hooks/hook is missing attribute "id".','extension/hooks/hook error3'	=>	'Element extension/hooks/hook has an out of bounds value in attribute "priority".','extension/hooks/hook error4'	=>	'Element extension/hooks/hook has content which does not end in PHP mode.','No XML support'				=>	'This PHP environment doesn\'t have XML support built in. XML support is required if you want to use PunBB extensions. Consult the PHP documentation for further assistance.','No installed extensions'		=>	'There are no installed extensions.','No installed hotfixes'			=>	'There are no installed hotfixes.','No available extensions'		=>	'There are no extensions available for install or upgrade.','No available hotfixes'			=>	'There are no hotfixes available for install.','Invalid extensions'			=>	'<strong>IMPORTANT!</strong> The extensions listed below were found in the extensions folder but are not available for install or upgrade because the errors displayed below were detected.','Extension installed'			=>	'Extension installed.','Hotfix installed'				=>	'Hotfix installed.','Extension installed info'		=>	'The extension was successfully installed, but reported the following notices.','Extension uninstalled'			=>	'Extension uninstalled.','Hotfix uninstalled'			=>	'Hotfix uninstalled.','Extension uninstalled info'	=>	'The extension was successfully uninstalled, but reported the following notices.','Install note'					=>	'Please read before installing','Uninstall note'				=>	'Please read before uninstalling','Hotfix download failed'		=>	'Download and install of a hotfix extension failed. Please wait a while and try again.','Extension disabled'			=>	'Extension disabled.','Extension enabled'				=>	'Extension enabled.','Hotfix disabled'				=>	'Hotfix disabled.','Hotfix enabled'				=>	'Hotfix enabled.','Extension by'					=>	'Created by %s','Hotfix description'			=>	'This hotfix for your PunBB installation was detected by automatic update.','Install hotfix'				=>	'Install hotfix','Missing dependency'			=>	'This extension cannot be installed unless "%s" is installed and enabled','Uninstall dependency'			=>	'This extension cannot be uninstall while "%s" is installed.','Disable dependency'			=>	'This extension cannot be disabled while "%s" is enabled.','Disabled dependency'			=>	'This extension cannot be enabled while "%s" is disabled.','Download latest version'		=>	'Download latest version',);
<?php/*** @version $Id: validation.php,v 1.2 2006/02/26 13:20:44 harryf Exp $* Tools for validing a UTF-8 string is well formed.* The Original Code is Mozilla Communicator client code.* The Initial Developer of the Original Code is* Netscape Communications Corporation.* Portions created by the Initial Developer are Copyright (C) 1998* the Initial Developer. All Rights Reserved.* Ported to PHP by Henri Sivonen (http://hsivonen.iki.fi)* Slight modifications to fit with phputf8 library by Harry Fuecks (hfuecks gmail com)* @see http://lxr.mozilla.org/seamonkey/source/intl/uconv/src/nsUTF8ToUnicode.cpp* @see http://lxr.mozilla.org/seamonkey/source/intl/uconv/src/nsUnicodeToUTF8.cpp* @see http://hsivonen.iki.fi/php-utf8/* @package utf8* @subpackage validation*///--------------------------------------------------------------------/*** Tests a string as to whether it's valid UTF-8 and supported by the* Unicode standard* Note: this function has been modified to simple return true or false* @author <hsivonen@iki.fi>* @param string UTF-8 encoded string* @return boolean true if valid* @see http://hsivonen.iki.fi/php-utf8/* @see utf8_compliant* @package utf8* @subpackage validation*/function utf8_is_valid($str) {    $mState = 0;     // cached expected number of octets after the current octet                     // until the beginning of the next UTF8 character sequence    $mUcs4  = 0;     // cached Unicode character    $mBytes = 1;     // cached expected number of octets in the current sequence    $len = strlen($str);    for($i = 0; $i < $len; $i++) {        $in = ord($str{$i});        if ( $mState == 0) {            // When mState is zero we expect either a US-ASCII character or a            // multi-octet sequence.            if (0 == (0x80 & ($in))) {                // US-ASCII, pass straight through.                $mBytes = 1;            } else if (0xC0 == (0xE0 & ($in))) {                // First octet of 2 octet sequence                $mUcs4 = ($in);                $mUcs4 = ($mUcs4 & 0x1F) << 6;                $mState = 1;                $mBytes = 2;            } else if (0xE0 == (0xF0 & ($in))) {                // First octet of 3 octet sequence                $mUcs4 = ($in);                $mUcs4 = ($mUcs4 & 0x0F) << 12;                $mState = 2;                $mBytes = 3;            } else if (0xF0 == (0xF8 & ($in))) {                // First octet of 4 octet sequence                $mUcs4 = ($in);                $mUcs4 = ($mUcs4 & 0x07) << 18;                $mState = 3;                $mBytes = 4;            } else if (0xF8 == (0xFC & ($in))) {                /* First octet of 5 octet sequence.                *                * This is illegal because the encoded codepoint must be either                * (a) not the shortest form or                * (b) outside the Unicode range of 0-0x10FFFF.                * Rather than trying to resynchronize, we will carry on until the end                * of the sequence and let the later error handling code catch it.                */                $mUcs4 = ($in);                $mUcs4 = ($mUcs4 & 0x03) << 24;                $mState = 4;                $mBytes = 5;            } else if (0xFC == (0xFE & ($in))) {                // First octet of 6 octet sequence, see comments for 5 octet sequence.                $mUcs4 = ($in);                $mUcs4 = ($mUcs4 & 1) << 30;                $mState = 5;                $mBytes = 6;            } else {                /* Current octet is neither in the US-ASCII range nor a legal first                 * octet of a multi-octet sequence.                 */                return FALSE;            }        } else {            // When mState is non-zero, we expect a continuation of the multi-octet            // sequence            if (0x80 == (0xC0 & ($in))) {                // Legal continuation.                $shift = ($mState - 1) * 6;                $tmp = $in;                $tmp = ($tmp & 0x0000003F) << $shift;                $mUcs4 |= $tmp;                /**                * End of the multi-octet sequence. mUcs4 now contains the final                * Unicode codepoint to be output                */                if (0 == --$mState) {                    /*                    * Check for illegal sequences and codepoints.                    */                    // From Unicode 3.1, non-shortest form is illegal                    if (((2 == $mBytes) && ($mUcs4 < 0x0080)) ||                        ((3 == $mBytes) && ($mUcs4 < 0x0800)) ||                        ((4 == $mBytes) && ($mUcs4 < 0x10000)) ||                        (4 < $mBytes) ||                        // From Unicode 3.2, surrogate characters are illegal                        (($mUcs4 & 0xFFFFF800) == 0xD800) ||                        // Codepoints outside the Unicode range are illegal                        ($mUcs4 > 0x10FFFF)) {                        return FALSE;                    }                    //initialize UTF8 cache                    $mState = 0;                    $mUcs4  = 0;                    $mBytes = 1;                }            } else {                /**                *((0xC0 & (*in) != 0x80) && (mState != 0))                * Incomplete multi-octet sequence.                */                return FALSE;            }        }    }    return TRUE;}//--------------------------------------------------------------------/*** Tests whether a string complies as UTF-8. This will be much* faster than utf8_is_valid but will pass five and six octet* UTF-8 sequences, which are not supported by Unicode and* so cannot be displayed correctly in a browser. In other words* it is not as strict as utf8_is_valid but it's faster. If you use* is to validate user input, you place yourself at the risk that* attackers will be able to inject 5 and 6 byte sequences (which* may or may not be a significant risk, depending on what you are* are doing)* @see utf8_is_valid* @see http://www.php.net/manual/en/reference.pcre.pattern.modifiers.php#54805* @param string UTF-8 string to check* @return boolean TRUE if string is valid UTF-8* @package utf8* @subpackage validation*/function utf8_compliant($str) {    if ( strlen($str) == 0 ) {        return TRUE;    }    // If even just the first character can be matched, when the /u    // modifier is used, then it's valid UTF-8. If the UTF-8 is somehow    // invalid, nothing at all will match, even if the string contains    // some valid sequences    return (preg_match('/^.{1}/us',$str,$ar) == 1);}
<?php/*** This is the dynamic loader for the library. It checks whether you have* the mbstring extension available and includes relevant files* on that basis, falling back to the native (as in written in PHP) version* if mbstring is unavailabe.** It's probably easiest to use this, if you don't want to understand* the dependencies involved, in conjunction with PHP versions etc. At* the same time, you might get better performance by managing loading* yourself. The smartest way to do this, bearing in mind performance,* is probably to "load on demand" - i.e. just before you use these* functions in your code, load the version you need.** It makes sure the the following functions are available;* utf8_strlen, utf8_strpos, utf8_strrpos, utf8_substr,* utf8_strtolower, utf8_strtoupper* Other functions in the ./native directory depend on these* six functions being available* * @license http://www.gnu.org/copyleft/lesser.html LGPL* @see http://sourceforge.net/projects/phputf8* @package utf8*//*** Put the current directory in this constant*/if ( !defined('UTF8') ) {    define('UTF8',dirname(__FILE__));}/*** If string overloading is active, it will break many of the* native implementations. mbstring.func_overload must be set* to 0, 1 or 4 in php.ini (string overloading disabled).* Also need to check we have the correct internal mbstring* encoding*/if ( extension_loaded('mbstring')) {    if ( ini_get('mbstring.func_overload') & MB_OVERLOAD_STRING ) {        trigger_error('String functions are overloaded by mbstring',E_USER_ERROR);    }    mb_internal_encoding('UTF-8');}/*** Check whether PCRE has been compiled with UTF-8 support*/$UTF8_ar = array();if ( preg_match('/^.{1}$/u',"",$UTF8_ar) != 1 ) {    trigger_error('PCRE is not compiled with UTF-8 support',E_USER_ERROR);}unset($UTF8_ar);/*** Load the smartest implementations of utf8_strpos, utf8_strrpos* and utf8_substr*/if ( !defined('UTF8_CORE') ) {    if ( function_exists('mb_substr') ) {        require_once UTF8 . '/mbstring/core.php';    } else {        require_once UTF8 . '/utils/unicode.php';        require_once UTF8 . '/native/core.php';    }}/*** Load the native implementation of utf8_substr_replace*/require_once UTF8 . '/substr_replace.php';/*** You should now be able to use all the other utf_* string functions*/
<?php/** * A database layer class that relies on the MySQL PHP extension. * * @copyright (C) 2008-2011 PunBB, partially based on code (C) 2008-2009 FluxBB.org * @license http://www.gnu.org/licenses/gpl.html GPL version 2 or higher * @package PunBB */// Make sure we have built in support for MySQLif (!function_exists('mysql_connect'))	exit('This PHP environment doesn\'t have MySQL support built in. MySQL support is required if you want to use a MySQL database to run this forum. Consult the PHP documentation for further assistance.');class DBLayer{	var $prefix;	var $link_id;	var $query_result;	var $in_transaction = 0;	var $saved_queries = array();	var $num_queries = 0;	var $datatype_transformations = array(		'/^SERIAL$/'	=>	'INT(10) UNSIGNED AUTO_INCREMENT'	);	function DBLayer($db_host, $db_username, $db_password, $db_name, $db_prefix, $p_connect)	{		$this->prefix = $db_prefix;		if ($p_connect)			$this->link_id = @mysql_pconnect($db_host, $db_username, $db_password);		else			$this->link_id = @mysql_connect($db_host, $db_username, $db_password);		if ($this->link_id)		{			if (!@mysql_select_db($db_name, $this->link_id))				error('Unable to select database. MySQL reported: '.mysql_error(), __FILE__, __LINE__);		}		else			error('Unable to connect to MySQL server. MySQL reported: '.mysql_error(), __FILE__, __LINE__);		// Setup the client-server character set (UTF-8)		if (!defined('FORUM_NO_SET_NAMES'))			$this->set_names('utf8');		return $this->link_id;	}	function start_transaction()	{		++$this->in_transaction;		return mysql_query('START TRANSACTION', $this->link_id);	}	function end_transaction()	{		--$this->in_transaction;		if (mysql_query('COMMIT', $this->link_id))			return true;		else		{			mysql_query('ROLLBACK', $this->link_id);			return false;		}	}	function query($sql, $unbuffered = false)	{		if (strlen($sql) > 140000)			exit('Insane query. Aborting.');		if (defined('FORUM_SHOW_QUERIES'))			$q_start = forum_microtime();		if ($unbuffered)			$this->query_result = @mysql_unbuffered_query($sql, $this->link_id);		else			$this->query_result = @mysql_query($sql, $this->link_id);		if ($this->query_result)		{			if (defined('FORUM_SHOW_QUERIES'))				$this->saved_queries[] = array($sql, sprintf('%.5f', forum_microtime() - $q_start));			++$this->num_queries;			return $this->query_result;		}		else		{			if (defined('FORUM_SHOW_QUERIES'))				$this->saved_queries[] = array($sql, 0);			if ($this->in_transaction)				mysql_query('ROLLBACK', $this->link_id);			--$this->in_transaction;			return false;		}	}	function query_build($query, $return_query_string = false, $unbuffered = false)	{		$sql = '';		if (isset($query['SELECT']))		{			$sql = 'SELECT '.$query['SELECT'].' FROM '.(isset($query['PARAMS']['NO_PREFIX']) ? '' : $this->prefix).$query['FROM'];			if (isset($query['JOINS']))			{				foreach ($query['JOINS'] as $cur_join)					$sql .= ' '.key($cur_join).' '.(isset($query['PARAMS']['NO_PREFIX']) ? '' : $this->prefix).current($cur_join).' ON '.$cur_join['ON'];			}			if (!empty($query['WHERE']))				$sql .= ' WHERE '.$query['WHERE'];			if (!empty($query['GROUP BY']))				$sql .= ' GROUP BY '.$query['GROUP BY'];			if (!empty($query['HAVING']))				$sql .= ' HAVING '.$query['HAVING'];			if (!empty($query['ORDER BY']))				$sql .= ' ORDER BY '.$query['ORDER BY'];			if (!empty($query['LIMIT']))				$sql .= ' LIMIT '.$query['LIMIT'];		}		else if (isset($query['INSERT']))		{			$sql = 'INSERT INTO '.(isset($query['PARAMS']['NO_PREFIX']) ? '' : $this->prefix).$query['INTO'];			if (!empty($query['INSERT']))				$sql .= ' ('.$query['INSERT'].')';			if (is_array($query['VALUES']))				$sql .= ' VALUES('.implode('),(', $query['VALUES']).')';			else				$sql .= ' VALUES('.$query['VALUES'].')';		}		else if (isset($query['UPDATE']))		{			$query['UPDATE'] = (isset($query['PARAMS']['NO_PREFIX']) ? '' : $this->prefix).$query['UPDATE'];			$sql = 'UPDATE '.$query['UPDATE'].' SET '.$query['SET'];			if (!empty($query['WHERE']))				$sql .= ' WHERE '.$query['WHERE'];		}		else if (isset($query['DELETE']))		{			$sql = 'DELETE FROM '.(isset($query['PARAMS']['NO_PREFIX']) ? '' : $this->prefix).$query['DELETE'];			if (!empty($query['WHERE']))				$sql .= ' WHERE '.$query['WHERE'];		}		else if (isset($query['REPLACE']))		{			$sql = 'REPLACE INTO '.(isset($query['PARAMS']['NO_PREFIX']) ? '' : $this->prefix).$query['INTO'];			if (!empty($query['REPLACE']))				$sql .= ' ('.$query['REPLACE'].')';			$sql .= ' VALUES('.$query['VALUES'].')';		}		return ($return_query_string) ? $sql : $this->query($sql, $unbuffered);	}	function result($query_id = 0, $row = 0, $col = 0)	{		return ($query_id) ? @mysql_result($query_id, $row, $col) : false;	}	function fetch_assoc($query_id = 0)	{		return ($query_id) ? @mysql_fetch_assoc($query_id) : false;	}	function fetch_row($query_id = 0)	{		return ($query_id) ? @mysql_fetch_row($query_id) : false;	}	function num_rows($query_id = 0)	{		return ($query_id) ? @mysql_num_rows($query_id) : false;	}	function affected_rows()	{		return ($this->link_id) ? @mysql_affected_rows($this->link_id) : false;	}	function insert_id()	{		return ($this->link_id) ? @mysql_insert_id($this->link_id) : false;	}	function get_num_queries()	{		return $this->num_queries;	}	function get_saved_queries()	{		return $this->saved_queries;	}	function free_result($query_id = false)	{		return ($query_id) ? @mysql_free_result($query_id) : false;	}	function escape($str)	{		if (is_array($str))			return '';		else if (function_exists('mysql_real_escape_string'))			return mysql_real_escape_string($str, $this->link_id);		else			return mysql_escape_string($str);	}	function error()	{		$result['error_sql'] = @current(@end($this->saved_queries));		$result['error_no'] = @mysql_errno($this->link_id);		$result['error_msg'] = @mysql_error($this->link_id);		return $result;	}	function close()	{		if ($this->link_id)		{			if ($this->query_result)				@mysql_free_result($this->query_result);			return @mysql_close($this->link_id);		}		else			return false;	}	function set_names($names)	{		return $this->query('SET NAMES \''.$this->escape($names).'\'');	}	function get_version()	{		$result = $this->query('SELECT VERSION()');		return array(			'name'		=> 'MySQL Standard (InnoDB)',			'version'	=> preg_replace('/^([^-]+).*$/', '\\1', $this->result($result))		);	}	function table_exists($table_name, $no_prefix = false)	{		$result = $this->query('SHOW TABLES LIKE \''.($no_prefix ? '' : $this->prefix).$this->escape($table_name).'\'');		return $this->num_rows($result) > 0;	}	function field_exists($table_name, $field_name, $no_prefix = false)	{		$result = $this->query('SHOW COLUMNS FROM '.($no_prefix ? '' : $this->prefix).$table_name.' LIKE \''.$this->escape($field_name).'\'');		return $this->num_rows($result) > 0;	}	function index_exists($table_name, $index_name, $no_prefix = false)	{		$exists = false;		$result = $this->query('SHOW INDEX FROM '.($no_prefix ? '' : $this->prefix).$table_name);		while ($cur_index = $this->fetch_assoc($result))		{			if ($cur_index['Key_name'] == ($no_prefix ? '' : $this->prefix).$table_name.'_'.$index_name)			{				$exists = true;				break;			}		}		return $exists;	}	function create_table($table_name, $schema, $no_prefix = false)	{		if ($this->table_exists($table_name, $no_prefix))			return;		$query = 'CREATE TABLE '.($no_prefix ? '' : $this->prefix).$table_name." (\n";		// Go through every schema element and add it to the query		foreach ($schema['FIELDS'] as $field_name => $field_data)		{			$field_data['datatype'] = preg_replace(array_keys($this->datatype_transformations), array_values($this->datatype_transformations), $field_data['datatype']);			$query .= $field_name.' '.$field_data['datatype'];			if (isset($field_data['collation']))				$query .= 'CHARACTER SET utf8 COLLATE utf8_'.$field_data['collation'];			if (!$field_data['allow_null'])				$query .= ' NOT NULL';			if (isset($field_data['default']))				$query .= ' DEFAULT '.$field_data['default'];			$query .= ",\n";		}		// If we have a primary key, add it		if (isset($schema['PRIMARY KEY']))			$query .= 'PRIMARY KEY ('.implode(',', $schema['PRIMARY KEY']).'),'."\n";		// Add unique keys		if (isset($schema['UNIQUE KEYS']))		{			foreach ($schema['UNIQUE KEYS'] as $key_name => $key_fields)				$query .= 'UNIQUE KEY '.($no_prefix ? '' : $this->prefix).$table_name.'_'.$key_name.'('.implode(',', $key_fields).'),'."\n";		}		// Add indexes		if (isset($schema['INDEXES']))		{			foreach ($schema['INDEXES'] as $index_name => $index_fields)				$query .= 'KEY '.($no_prefix ? '' : $this->prefix).$table_name.'_'.$index_name.'('.implode(',', $index_fields).'),'."\n";		}		// We remove the last two characters (a newline and a comma) and add on the ending		$query = substr($query, 0, strlen($query) - 2)."\n".') ENGINE = '.(isset($schema['ENGINE']) ? $schema['ENGINE'] : 'InnoDB').' CHARACTER SET utf8';		$this->query($query) or error(__FILE__, __LINE__);	}	function drop_table($table_name, $no_prefix = false)	{		if (!$this->table_exists($table_name, $no_prefix))			return;		$this->query('DROP TABLE '.($no_prefix ? '' : $this->prefix).$table_name) or error(__FILE__, __LINE__);	}	function add_field($table_name, $field_name, $field_type, $allow_null, $default_value = null, $after_field = null, $no_prefix = false)	{		if ($this->field_exists($table_name, $field_name, $no_prefix))			return;		$field_type = preg_replace(array_keys($this->datatype_transformations), array_values($this->datatype_transformations), $field_type);		if ($default_value !== null && !is_int($default_value) && !is_float($default_value))			$default_value = '\''.$this->escape($default_value).'\'';		$this->query('ALTER TABLE '.($no_prefix ? '' : $this->prefix).$table_name.' ADD '.$field_name.' '.$field_type.($allow_null ? ' ' : ' NOT NULL').($default_value !== null ? ' DEFAULT '.$default_value : ' ').($after_field != null ? ' AFTER '.$after_field : '')) or error(__FILE__, __LINE__);	}	function alter_field($table_name, $field_name, $field_type, $allow_null, $default_value = null, $after_field = null, $no_prefix = false)	{		if (!$this->field_exists($table_name, $field_name, $no_prefix))			return;		$field_type = preg_replace(array_keys($this->datatype_transformations), array_values($this->datatype_transformations), $field_type);		if ($default_value !== null && !is_int($default_value) && !is_float($default_value))			$default_value = '\''.$this->escape($default_value).'\'';		$this->query('ALTER TABLE '.($no_prefix ? '' : $this->prefix).$table_name.' MODIFY '.$field_name.' '.$field_type.($allow_null ? ' ' : ' NOT NULL').($default_value !== null ? ' DEFAULT '.$default_value : ' ').($after_field != null ? ' AFTER '.$after_field : '')) or error(__FILE__, __LINE__);	}	function drop_field($table_name, $field_name, $no_prefix = false)	{		if (!$this->field_exists($table_name, $field_name, $no_prefix))			return;		$this->query('ALTER TABLE '.($no_prefix ? '' : $this->prefix).$table_name.' DROP '.$field_name) or error(__FILE__, __LINE__);	}	function add_index($table_name, $index_name, $index_fields, $unique = false, $no_prefix = false)	{		if ($this->index_exists($table_name, $index_name, $no_prefix))			return;		$this->query('ALTER TABLE '.($no_prefix ? '' : $this->prefix).$table_name.' ADD '.($unique ? 'UNIQUE ' : '').'INDEX '.($no_prefix ? '' : $this->prefix).$table_name.'_'.$index_name.' ('.implode(',', $index_fields).')') or error(__FILE__, __LINE__);	}	function drop_index($table_name, $index_name, $no_prefix = false)	{		if (!$this->index_exists($table_name, $index_name, $no_prefix))			return;		$this->query('ALTER TABLE '.($no_prefix ? '' : $this->prefix).$table_name.' DROP INDEX '.($no_prefix ? '' : $this->prefix).$table_name.'_'.$index_name) or error(__FILE__, __LINE__);	}}
<?php// Language definitions used in all admin files$lang_admin_ranks = array('Rank head'						=>	'Add, edit or remove ranks','Rank'							=>	'Rank','Rank added'					=>	'Rank added.','Title message'					=>	'You must enter a rank title.','Min posts message'				=>	'Minimum posts must be a positive integer value.','Min posts occupied message'	=>	'There is already a rank with a minimum posts value of %s.','Rank updated'					=>	'Rank updated.','Rank removed'					=>	'Rank removed.','Add rank intro'				=>	'Enter a rank and the minimum number of posts that a user has to have to acquire the rank. Different ranks cannot have the same value for minimum posts. If a title is set for a user, the title will be displayed instead of any rank. For this to have any effect "<strong>User ranks</strong>" must be enabled in %s.','Add rank'						=>	'Add rank','Add rank legend'				=>	'New rank details','Rank title label'				=>	'Rank title','Min posts label'				=>	'Minimum posts','Existing ranks legend'			=>	'Edit or remove existing user ranks','No ranks'						=>	'No ranks in list.','Update'						=>	'Update','Remove'						=>	'Remove','New rank'						=>	'Add new rank','Existing rank'					=>	'Existing rank',);
