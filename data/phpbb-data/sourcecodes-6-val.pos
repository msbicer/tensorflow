<?php/**** @package install* @version $Id$* @copyright (c) 2006 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @ignore*/if (!defined('IN_PHPBB')){	exit;}/*** Determine if we are able to load a specified PHP module and do so if possible*/function can_load_dll($dll){	// SQLite2 is a tricky thing, from 5.0.0 it requires PDO; if PDO is not loaded we must state that SQLite is unavailable	// as the installer doesn't understand that the extension has a prerequisite.	//	// On top of this sometimes the SQLite extension is compiled for a different version of PDO	// by some Linux distributions which causes phpBB to bomb out with a blank page.	//	// Net result we'll disable automatic inclusion of SQLite support	//	// See: r9618 and #56105	if ($dll == 'sqlite')	{		return false;	}	return ((@ini_get('enable_dl') || strtolower(@ini_get('enable_dl')) == 'on') && (!@ini_get('safe_mode') || strtolower(@ini_get('safe_mode')) == 'off') && function_exists('dl') && @dl($dll . '.' . PHP_SHLIB_SUFFIX)) ? true : false;}/*** Returns an array of available DBMS with some data, if a DBMS is specified it will only* return data for that DBMS and will load its extension if necessary.*/function get_available_dbms($dbms = false, $return_unavailable = false, $only_20x_options = false){	global $lang;	$available_dbms = array(		'firebird'	=> array(			'LABEL'			=> 'FireBird',			'SCHEMA'		=> 'firebird',			'MODULE'		=> 'interbase',			'DELIM'			=> ';;',			'COMMENTS'		=> 'remove_remarks',			'DRIVER'		=> 'firebird',			'AVAILABLE'		=> true,			'2.0.x'			=> false,		),		'mysqli'	=> array(			'LABEL'			=> 'MySQL with MySQLi Extension',			'SCHEMA'		=> 'mysql_41',			'MODULE'		=> 'mysqli',			'DELIM'			=> ';',			'COMMENTS'		=> 'remove_remarks',			'DRIVER'		=> 'mysqli',			'AVAILABLE'		=> true,			'2.0.x'			=> true,		),		'mysql'		=> array(			'LABEL'			=> 'MySQL',			'SCHEMA'		=> 'mysql',			'MODULE'		=> 'mysql',			'DELIM'			=> ';',			'COMMENTS'		=> 'remove_remarks',			'DRIVER'		=> 'mysql',			'AVAILABLE'		=> true,			'2.0.x'			=> true,		),		'mssql'		=> array(			'LABEL'			=> 'MS SQL Server 2000+',			'SCHEMA'		=> 'mssql',			'MODULE'		=> 'mssql',			'DELIM'			=> 'GO',			'COMMENTS'		=> 'remove_comments',			'DRIVER'		=> 'mssql',			'AVAILABLE'		=> true,			'2.0.x'			=> true,		),		'mssql_odbc'=>	array(			'LABEL'			=> 'MS SQL Server [ ODBC ]',			'SCHEMA'		=> 'mssql',			'MODULE'		=> 'odbc',			'DELIM'			=> 'GO',			'COMMENTS'		=> 'remove_comments',			'DRIVER'		=> 'mssql_odbc',			'AVAILABLE'		=> true,			'2.0.x'			=> true,		),		'mssqlnative'		=> array(			'LABEL'			=> 'MS SQL Server 2005+ [ Native ]',			'SCHEMA'		=> 'mssql',			'MODULE'		=> 'sqlsrv',			'DELIM'			=> 'GO',			'COMMENTS'		=> 'remove_comments',			'DRIVER'		=> 'mssqlnative',			'AVAILABLE'		=> true,			'2.0.x'			=> false,		),					'oracle'	=>	array(			'LABEL'			=> 'Oracle',			'SCHEMA'		=> 'oracle',			'MODULE'		=> 'oci8',			'DELIM'			=> '/',			'COMMENTS'		=> 'remove_comments',			'DRIVER'		=> 'oracle',			'AVAILABLE'		=> true,			'2.0.x'			=> false,		),		'postgres' => array(			'LABEL'			=> 'PostgreSQL 7.x/8.x',			'SCHEMA'		=> 'postgres',			'MODULE'		=> 'pgsql',			'DELIM'			=> ';',			'COMMENTS'		=> 'remove_comments',			'DRIVER'		=> 'postgres',			'AVAILABLE'		=> true,			'2.0.x'			=> true,		),		'sqlite'		=> array(			'LABEL'			=> 'SQLite',			'SCHEMA'		=> 'sqlite',			'MODULE'		=> 'sqlite',			'DELIM'			=> ';',			'COMMENTS'		=> 'remove_remarks',			'DRIVER'		=> 'sqlite',			'AVAILABLE'		=> true,			'2.0.x'			=> false,		),	);	if ($dbms)	{		if (isset($available_dbms[$dbms]))		{			$available_dbms = array($dbms => $available_dbms[$dbms]);		}		else		{			return array();		}	}	// now perform some checks whether they are really available	foreach ($available_dbms as $db_name => $db_ary)	{		if ($only_20x_options && !$db_ary['2.0.x'])		{			if ($return_unavailable)			{				$available_dbms[$db_name]['AVAILABLE'] = false;			}			else			{				unset($available_dbms[$db_name]);			}			continue;		}		$dll = $db_ary['MODULE'];		if (!@extension_loaded($dll))		{			if (!can_load_dll($dll))			{				if ($return_unavailable)				{					$available_dbms[$db_name]['AVAILABLE'] = false;				}				else				{					unset($available_dbms[$db_name]);				}				continue;			}		}		$any_db_support = true;	}	if ($return_unavailable)	{		$available_dbms['ANY_DB_SUPPORT'] = $any_db_support;	}	return $available_dbms;}/*** Generate the drop down of available database options*/function dbms_select($default = '', $only_20x_options = false){	global $lang;	$available_dbms = get_available_dbms(false, false, $only_20x_options);	$dbms_options = '';	foreach ($available_dbms as $dbms_name => $details)	{		$selected = ($dbms_name == $default) ? ' selected="selected"' : '';		$dbms_options .= '<option value="' . $dbms_name . '"' . $selected .'>' . $lang['DLL_' . strtoupper($dbms_name)] . '</option>';	}	return $dbms_options;}/*** Get tables of a database** @deprecated*/function get_tables(&$db){	if (!class_exists('phpbb_db_tools'))	{		global $phpbb_root_path, $phpEx;		require($phpbb_root_path . 'includes/db/db_tools.' . $phpEx);	}	$db_tools = new phpbb_db_tools($db);	return $db_tools->sql_list_tables();}/*** Used to test whether we are able to connect to the database the user has specified* and identify any problems (eg there are already tables with the names we want to use* @param	array	$dbms should be of the format of an element of the array returned by {@link get_available_dbms get_available_dbms()}*					necessary extensions should be loaded already*/function connect_check_db($error_connect, &$error, $dbms_details, $table_prefix, $dbhost, $dbuser, $dbpasswd, $dbname, $dbport, $prefix_may_exist = false, $load_dbal = true, $unicode_check = true){	global $phpbb_root_path, $phpEx, $config, $lang;	$dbms = $dbms_details['DRIVER'];	if ($load_dbal)	{		// Include the DB layer		include($phpbb_root_path . 'includes/db/' . $dbms . '.' . $phpEx);	}	// Instantiate it and set return on error true	$sql_db = 'dbal_' . $dbms;	$db = new $sql_db();	$db->sql_return_on_error(true);	// Check that we actually have a database name before going any further.....	if ($dbms_details['DRIVER'] != 'sqlite' && $dbms_details['DRIVER'] != 'oracle' && $dbname === '')	{		$error[] = $lang['INST_ERR_DB_NO_NAME'];		return false;	}	// Make sure we don't have a daft user who thinks having the SQLite database in the forum directory is a good idea	if ($dbms_details['DRIVER'] == 'sqlite' && stripos(phpbb_realpath($dbhost), phpbb_realpath('../')) === 0)	{		$error[] = $lang['INST_ERR_DB_FORUM_PATH'];		return false;	}	// Check the prefix length to ensure that index names are not too long and does not contain invalid characters	switch ($dbms_details['DRIVER'])	{		case 'mysql':		case 'mysqli':			if (strspn($table_prefix, '-./\\') !== 0)			{				$error[] = $lang['INST_ERR_PREFIX_INVALID'];				return false;			}		// no break;		case 'postgres':			$prefix_length = 36;		break;		case 'mssql':		case 'mssql_odbc':		case 'mssqlnative':			$prefix_length = 90;		break;		case 'sqlite':			$prefix_length = 200;		break;		case 'firebird':		case 'oracle':			$prefix_length = 6;		break;	}	if (strlen($table_prefix) > $prefix_length)	{		$error[] = sprintf($lang['INST_ERR_PREFIX_TOO_LONG'], $prefix_length);		return false;	}	// Try and connect ...	if (is_array($db->sql_connect($dbhost, $dbuser, $dbpasswd, $dbname, $dbport, false, true)))	{		$db_error = $db->sql_error();		$error[] = $lang['INST_ERR_DB_CONNECT'] . '<br />' . (($db_error['message']) ? $db_error['message'] : $lang['INST_ERR_DB_NO_ERROR']);	}	else	{		// Likely matches for an existing phpBB installation		if (!$prefix_may_exist)		{			$temp_prefix = strtolower($table_prefix);			$table_ary = array($temp_prefix . 'attachments', $temp_prefix . 'config', $temp_prefix . 'sessions', $temp_prefix . 'topics', $temp_prefix . 'users');			$tables = get_tables($db);			$tables = array_map('strtolower', $tables);			$table_intersect = array_intersect($tables, $table_ary);			if (sizeof($table_intersect))			{				$error[] = $lang['INST_ERR_PREFIX'];			}		}		// Make sure that the user has selected a sensible DBAL for the DBMS actually installed		switch ($dbms_details['DRIVER'])		{			case 'mysqli':				if (version_compare(mysqli_get_server_info($db->db_connect_id), '4.1.3', '<'))				{					$error[] = $lang['INST_ERR_DB_NO_MYSQLI'];				}			break;			case 'sqlite':				if (version_compare(sqlite_libversion(), '2.8.2', '<'))				{					$error[] = $lang['INST_ERR_DB_NO_SQLITE'];				}			break;			case 'firebird':				// check the version of FB, use some hackery if we can't get access to the server info				if ($db->service_handle !== false && function_exists('ibase_server_info'))				{					$val = @ibase_server_info($db->service_handle, IBASE_SVC_SERVER_VERSION);					preg_match('#V([\d.]+)#', $val, $match);					if ($match[1] < 2)					{						$error[] = $lang['INST_ERR_DB_NO_FIREBIRD'];					}					$db_info = @ibase_db_info($db->service_handle, $dbname, IBASE_STS_HDR_PAGES);					preg_match('/^\\s*Page size\\s*(\\d+)/m', $db_info, $regs);					$page_size = intval($regs[1]);					if ($page_size < 8192)					{						$error[] = $lang['INST_ERR_DB_NO_FIREBIRD_PS'];					}				}				else				{					$sql = "SELECT *						FROM RDB$FUNCTIONS						WHERE RDB$SYSTEM_FLAG IS NULL							AND RDB$FUNCTION_NAME = 'CHAR_LENGTH'";					$result = $db->sql_query($sql);					$row = $db->sql_fetchrow($result);					$db->sql_freeresult($result);					// if its a UDF, its too old					if ($row)					{						$error[] = $lang['INST_ERR_DB_NO_FIREBIRD'];					}					else					{						$sql = 'SELECT 1 FROM RDB$DATABASE							WHERE BIN_AND(10, 1) = 0';						$result = $db->sql_query($sql);						if (!$result) // This can only fail if BIN_AND is not defined						{							$error[] = $lang['INST_ERR_DB_NO_FIREBIRD'];						}						$db->sql_freeresult($result);					}					// Setup the stuff for our random table					$char_array = array_merge(range('A', 'Z'), range('0', '9'));					$char_len = mt_rand(7, 9);					$char_array_len = sizeof($char_array) - 1;					$final = '';					for ($i = 0; $i < $char_len; $i++)					{						$final .= $char_array[mt_rand(0, $char_array_len)];					}					// Create some random table					$sql = 'CREATE TABLE ' . $final . " (						FIELD1 VARCHAR(255) CHARACTER SET UTF8 DEFAULT '' NOT NULL COLLATE UNICODE,						FIELD2 INTEGER DEFAULT 0 NOT NULL);";					$db->sql_query($sql);					// Create an index that should fail if the page size is less than 8192					$sql = 'CREATE INDEX ' . $final . ' ON ' . $final . '(FIELD1, FIELD2);';					$db->sql_query($sql);					if (ibase_errmsg() !== false)					{						$error[] = $lang['INST_ERR_DB_NO_FIREBIRD_PS'];					}					else					{						// Kill the old table						$db->sql_query('DROP TABLE ' . $final . ';');					}					unset($final);				}			break;			case 'oracle':				if ($unicode_check)				{					$sql = "SELECT *						FROM NLS_DATABASE_PARAMETERS						WHERE PARAMETER = 'NLS_RDBMS_VERSION'							OR PARAMETER = 'NLS_CHARACTERSET'";					$result = $db->sql_query($sql);					while ($row = $db->sql_fetchrow($result))					{						$stats[$row['parameter']] = $row['value'];					}					$db->sql_freeresult($result);					if (version_compare($stats['NLS_RDBMS_VERSION'], '9.2', '<') && $stats['NLS_CHARACTERSET'] !== 'UTF8')					{						$error[] = $lang['INST_ERR_DB_NO_ORACLE'];					}				}			break;			case 'postgres':				if ($unicode_check)				{					$sql = "SHOW server_encoding;";					$result = $db->sql_query($sql);					$row = $db->sql_fetchrow($result);					$db->sql_freeresult($result);					if ($row['server_encoding'] !== 'UNICODE' && $row['server_encoding'] !== 'UTF8')					{						$error[] = $lang['INST_ERR_DB_NO_POSTGRES'];					}				}			break;		}	}	if ($error_connect && (!isset($error) || !sizeof($error)))	{		return true;	}	return false;}/*** remove_remarks will strip the sql comment lines out of an uploaded sql file*/function remove_remarks(&$sql){	$sql = preg_replace('/\n{2,}/', "\n", preg_replace('/^#.*$/m', "\n", $sql));}/*** split_sql_file will split an uploaded sql file into single sql statements.* Note: expects trim() to have already been run on $sql.*/function split_sql_file($sql, $delimiter){	$sql = str_replace("\r" , '', $sql);	$data = preg_split('/' . preg_quote($delimiter, '/') . '$/m', $sql);	$data = array_map('trim', $data);	// The empty case	$end_data = end($data);	if (empty($end_data))	{		unset($data[key($data)]);	}	return $data;}/*** For replacing {L_*} strings with preg_replace_callback*/function adjust_language_keys_callback($matches){	if (!empty($matches[1]))	{		global $lang, $db;		return (!empty($lang[$matches[1]])) ? $db->sql_escape($lang[$matches[1]]) : $db->sql_escape($matches[1]);	}}?>
<?php/**** @package phpBB3* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @ignore*/if (!defined('IN_PHPBB')){	exit;}/*** Fill smiley templates (or just the variables) with smilies, either in a window or inline*/function generate_smilies($mode, $forum_id){	global $auth, $db, $user, $config, $template;	global $phpEx, $phpbb_root_path;	$start = request_var('start', 0);	if ($mode == 'window')	{		if ($forum_id)		{			$sql = 'SELECT forum_style				FROM ' . FORUMS_TABLE . "				WHERE forum_id = $forum_id";			$result = $db->sql_query_limit($sql, 1);			$row = $db->sql_fetchrow($result);			$db->sql_freeresult($result);			$user->setup('posting', (int) $row['forum_style']);		}		else		{			$user->setup('posting');		}		page_header($user->lang['SMILIES']);		$sql = 'SELECT COUNT(smiley_id) AS item_count			FROM ' . SMILIES_TABLE . '			GROUP BY smiley_url';		$result = $db->sql_query($sql, 3600);		$smiley_count = 0;		while ($row = $db->sql_fetchrow($result))		{			++$smiley_count;		}		$db->sql_freeresult($result);		$template->set_filenames(array(			'body' => 'posting_smilies.html')		);		$template->assign_var('PAGINATION',			generate_pagination(append_sid("{$phpbb_root_path}posting.$phpEx", 'mode=smilies&amp;f=' . $forum_id),				$smiley_count, $config['smilies_per_page'], $start, true)		);	}	$display_link = false;	if ($mode == 'inline')	{		$sql = 'SELECT smiley_id			FROM ' . SMILIES_TABLE . '			WHERE display_on_posting = 0';		$result = $db->sql_query_limit($sql, 1, 0, 3600);		if ($row = $db->sql_fetchrow($result))		{			$display_link = true;		}		$db->sql_freeresult($result);	}	if ($mode == 'window')	{		$sql = 'SELECT smiley_url, MIN(emotion) as emotion, MIN(code) AS code, smiley_width, smiley_height, MIN(smiley_order) AS min_smiley_order			FROM ' . SMILIES_TABLE . '			GROUP BY smiley_url, smiley_width, smiley_height			ORDER BY min_smiley_order';		$result = $db->sql_query_limit($sql, $config['smilies_per_page'], $start, 3600);	}	else	{		$sql = 'SELECT *			FROM ' . SMILIES_TABLE . '			WHERE display_on_posting = 1			ORDER BY smiley_order';		$result = $db->sql_query($sql, 3600);	}	$smilies = array();	while ($row = $db->sql_fetchrow($result))	{		if (empty($smilies[$row['smiley_url']]))		{			$smilies[$row['smiley_url']] = $row;		}	}	$db->sql_freeresult($result);	if (sizeof($smilies))	{		$root_path = (defined('PHPBB_USE_BOARD_URL_PATH') && PHPBB_USE_BOARD_URL_PATH) ? generate_board_url() . '/' : $phpbb_root_path;		foreach ($smilies as $row)		{			$template->assign_block_vars('smiley', array(				'SMILEY_CODE'	=> $row['code'],				'A_SMILEY_CODE'	=> addslashes($row['code']),				'SMILEY_IMG'	=> $root_path . $config['smilies_path'] . '/' . $row['smiley_url'],				'SMILEY_WIDTH'	=> $row['smiley_width'],				'SMILEY_HEIGHT'	=> $row['smiley_height'],				'SMILEY_DESC'	=> $row['emotion'])			);		}	}	if ($mode == 'inline' && $display_link)	{		$template->assign_vars(array(			'S_SHOW_SMILEY_LINK' 	=> true,			'U_MORE_SMILIES' 		=> append_sid("{$phpbb_root_path}posting.$phpEx", 'mode=smilies&amp;f=' . $forum_id))		);	}	if ($mode == 'window')	{		page_footer();	}}/*** Update last post information* Should be used instead of sync() if only the last post information are out of sync... faster** @param	string	$type				Can be forum|topic* @param	mixed	$ids				topic/forum ids* @param	bool	$return_update_sql	true: SQL query shall be returned, false: execute SQL*/function update_post_information($type, $ids, $return_update_sql = false){	global $db;	if (empty($ids))	{		return;	}	if (!is_array($ids))	{		$ids = array($ids);	}	$update_sql = $empty_forums = $not_empty_forums = array();	if ($type != 'topic')	{		$topic_join = ', ' . TOPICS_TABLE . ' t';		$topic_condition = 'AND t.topic_id = p.topic_id AND t.topic_approved = 1';	}	else	{		$topic_join = '';		$topic_condition = '';	}	if (sizeof($ids) == 1)	{		$sql = 'SELECT MAX(p.post_id) as last_post_id			FROM ' . POSTS_TABLE . " p $topic_join			WHERE " . $db->sql_in_set('p.' . $type . '_id', $ids) . "				$topic_condition				AND p.post_approved = 1";	}	else	{		$sql = 'SELECT p.' . $type . '_id, MAX(p.post_id) as last_post_id			FROM ' . POSTS_TABLE . " p $topic_join			WHERE " . $db->sql_in_set('p.' . $type . '_id', $ids) . "				$topic_condition				AND p.post_approved = 1			GROUP BY p.{$type}_id";	}	$result = $db->sql_query($sql);	$last_post_ids = array();	while ($row = $db->sql_fetchrow($result))	{		if (sizeof($ids) == 1)		{			$row[$type . '_id'] = $ids[0];		}		if ($type == 'forum')		{			$not_empty_forums[] = $row['forum_id'];			if (empty($row['last_post_id']))			{				$empty_forums[] = $row['forum_id'];			}		}		$last_post_ids[] = $row['last_post_id'];	}	$db->sql_freeresult($result);	if ($type == 'forum')	{		$empty_forums = array_merge($empty_forums, array_diff($ids, $not_empty_forums));		foreach ($empty_forums as $void => $forum_id)		{			$update_sql[$forum_id][] = 'forum_last_post_id = 0';			$update_sql[$forum_id][] = "forum_last_post_subject = ''";			$update_sql[$forum_id][] = 'forum_last_post_time = 0';			$update_sql[$forum_id][] = 'forum_last_poster_id = 0';			$update_sql[$forum_id][] = "forum_last_poster_name = ''";			$update_sql[$forum_id][] = "forum_last_poster_colour = ''";		}	}	if (sizeof($last_post_ids))	{		$sql = 'SELECT p.' . $type . '_id, p.post_id, p.post_subject, p.post_time, p.poster_id, p.post_username, u.user_id, u.username, u.user_colour			FROM ' . POSTS_TABLE . ' p, ' . USERS_TABLE . ' u			WHERE p.poster_id = u.user_id				AND ' . $db->sql_in_set('p.post_id', $last_post_ids);		$result = $db->sql_query($sql);		while ($row = $db->sql_fetchrow($result))		{			$update_sql[$row["{$type}_id"]][] = $type . '_last_post_id = ' . (int) $row['post_id'];			$update_sql[$row["{$type}_id"]][] = "{$type}_last_post_subject = '" . $db->sql_escape($row['post_subject']) . "'";			$update_sql[$row["{$type}_id"]][] = $type . '_last_post_time = ' . (int) $row['post_time'];			$update_sql[$row["{$type}_id"]][] = $type . '_last_poster_id = ' . (int) $row['poster_id'];			$update_sql[$row["{$type}_id"]][] = "{$type}_last_poster_colour = '" . $db->sql_escape($row['user_colour']) . "'";			$update_sql[$row["{$type}_id"]][] = "{$type}_last_poster_name = '" . (($row['poster_id'] == ANONYMOUS) ? $db->sql_escape($row['post_username']) : $db->sql_escape($row['username'])) . "'";		}		$db->sql_freeresult($result);	}	unset($empty_forums, $ids, $last_post_ids);	if ($return_update_sql || !sizeof($update_sql))	{		return $update_sql;	}	$table = ($type == 'forum') ? FORUMS_TABLE : TOPICS_TABLE;	foreach ($update_sql as $update_id => $update_sql_ary)	{		$sql = "UPDATE $table			SET " . implode(', ', $update_sql_ary) . "			WHERE {$type}_id = $update_id";		$db->sql_query($sql);	}	return;}/*** Generate Topic Icons for display*/function posting_gen_topic_icons($mode, $icon_id){	global $phpbb_root_path, $config, $template, $cache;	// Grab icons	$icons = $cache->obtain_icons();	if (!$icon_id)	{		$template->assign_var('S_NO_ICON_CHECKED', ' checked="checked"');	}	if (sizeof($icons))	{		foreach ($icons as $id => $data)		{			if ($data['display'])			{				$template->assign_block_vars('topic_icon', array(					'ICON_ID'		=> $id,					'ICON_IMG'		=> $phpbb_root_path . $config['icons_path'] . '/' . $data['img'],					'ICON_WIDTH'	=> $data['width'],					'ICON_HEIGHT'	=> $data['height'],					'S_CHECKED'			=> ($id == $icon_id) ? true : false,					'S_ICON_CHECKED'	=> ($id == $icon_id) ? ' checked="checked"' : '')				);			}		}		return true;	}	return false;}/*** Build topic types able to be selected*/function posting_gen_topic_types($forum_id, $cur_topic_type = POST_NORMAL){	global $auth, $user, $template, $topic_type;	$toggle = false;	$topic_types = array(		'sticky'	=> array('const' => POST_STICKY, 'lang' => 'POST_STICKY'),		'announce'	=> array('const' => POST_ANNOUNCE, 'lang' => 'POST_ANNOUNCEMENT'),		'global'	=> array('const' => POST_GLOBAL, 'lang' => 'POST_GLOBAL')	);	$topic_type_array = array();	foreach ($topic_types as $auth_key => $topic_value)	{		// We do not have a special post global announcement permission		$auth_key = ($auth_key == 'global') ? 'announce' : $auth_key;		if ($auth->acl_get('f_' . $auth_key, $forum_id))		{			$toggle = true;			$topic_type_array[] = array(				'VALUE'			=> $topic_value['const'],				'S_CHECKED'		=> ($cur_topic_type == $topic_value['const'] || ($forum_id == 0 && $topic_value['const'] == POST_GLOBAL)) ? ' checked="checked"' : '',				'L_TOPIC_TYPE'	=> $user->lang[$topic_value['lang']]			);		}	}	if ($toggle)	{		$topic_type_array = array_merge(array(0 => array(			'VALUE'			=> POST_NORMAL,			'S_CHECKED'		=> ($cur_topic_type == POST_NORMAL) ? ' checked="checked"' : '',			'L_TOPIC_TYPE'	=> $user->lang['POST_NORMAL'])),			$topic_type_array		);		foreach ($topic_type_array as $array)		{			$template->assign_block_vars('topic_type', $array);		}		$template->assign_vars(array(			'S_TOPIC_TYPE_STICKY'	=> ($auth->acl_get('f_sticky', $forum_id)),			'S_TOPIC_TYPE_ANNOUNCE'	=> ($auth->acl_get('f_announce', $forum_id)))		);	}	return $toggle;}//// Attachment related functions///*** Upload Attachment - filedata is generated here* Uses upload class*/function upload_attachment($form_name, $forum_id, $local = false, $local_storage = '', $is_message = false, $local_filedata = false){	global $auth, $user, $config, $db, $cache;	global $phpbb_root_path, $phpEx;	$filedata = array(		'error'	=> array()	);	include_once($phpbb_root_path . 'includes/functions_upload.' . $phpEx);	$upload = new fileupload();	if ($config['check_attachment_content'] && isset($config['mime_triggers']))	{		$upload->set_disallowed_content(explode('|', $config['mime_triggers']));	}	if (!$local)	{		$filedata['post_attach'] = ($upload->is_valid($form_name)) ? true : false;	}	else	{		$filedata['post_attach'] = true;	}	if (!$filedata['post_attach'])	{		$filedata['error'][] = $user->lang['NO_UPLOAD_FORM_FOUND'];		return $filedata;	}	$extensions = $cache->obtain_attach_extensions((($is_message) ? false : (int) $forum_id));	$upload->set_allowed_extensions(array_keys($extensions['_allowed_']));	$file = ($local) ? $upload->local_upload($local_storage, $local_filedata) : $upload->form_upload($form_name);	if ($file->init_error)	{		$filedata['post_attach'] = false;		return $filedata;	}	$cat_id = (isset($extensions[$file->get('extension')]['display_cat'])) ? $extensions[$file->get('extension')]['display_cat'] : ATTACHMENT_CATEGORY_NONE;	// Make sure the image category only holds valid images...	if ($cat_id == ATTACHMENT_CATEGORY_IMAGE && !$file->is_image())	{		$file->remove();		// If this error occurs a user tried to exploit an IE Bug by renaming extensions		// Since the image category is displaying content inline we need to catch this.		trigger_error($user->lang['ATTACHED_IMAGE_NOT_IMAGE']);	}	// Do we have to create a thumbnail?	$filedata['thumbnail'] = ($cat_id == ATTACHMENT_CATEGORY_IMAGE && $config['img_create_thumbnail']) ? 1 : 0;	// Check Image Size, if it is an image	if (!$auth->acl_get('a_') && !$auth->acl_get('m_', $forum_id) && $cat_id == ATTACHMENT_CATEGORY_IMAGE)	{		$file->upload->set_allowed_dimensions(0, 0, $config['img_max_width'], $config['img_max_height']);	}	// Admins and mods are allowed to exceed the allowed filesize	if (!$auth->acl_get('a_') && !$auth->acl_get('m_', $forum_id))	{		if (!empty($extensions[$file->get('extension')]['max_filesize']))		{			$allowed_filesize = $extensions[$file->get('extension')]['max_filesize'];		}		else		{			$allowed_filesize = ($is_message) ? $config['max_filesize_pm'] : $config['max_filesize'];		}		$file->upload->set_max_filesize($allowed_filesize);	}	$file->clean_filename('unique', $user->data['user_id'] . '_');	// Are we uploading an image *and* this image being within the image category? Only then perform additional image checks.	$no_image = ($cat_id == ATTACHMENT_CATEGORY_IMAGE) ? false : true;	$file->move_file($config['upload_path'], false, $no_image);	if (sizeof($file->error))	{		$file->remove();		$filedata['error'] = array_merge($filedata['error'], $file->error);		$filedata['post_attach'] = false;		return $filedata;	}	$filedata['filesize'] = $file->get('filesize');	$filedata['mimetype'] = $file->get('mimetype');	$filedata['extension'] = $file->get('extension');	$filedata['physical_filename'] = $file->get('realname');	$filedata['real_filename'] = $file->get('uploadname');	$filedata['filetime'] = time();	// Check our complete quota	if ($config['attachment_quota'])	{		if ($config['upload_dir_size'] + $file->get('filesize') > $config['attachment_quota'])		{			$filedata['error'][] = $user->lang['ATTACH_QUOTA_REACHED'];			$filedata['post_attach'] = false;			$file->remove();			return $filedata;		}	}	// Check free disk space	if ($free_space = @disk_free_space($phpbb_root_path . $config['upload_path']))	{		if ($free_space <= $file->get('filesize'))		{			$filedata['error'][] = $user->lang['ATTACH_QUOTA_REACHED'];			$filedata['post_attach'] = false;			$file->remove();			return $filedata;		}	}	// Create Thumbnail	if ($filedata['thumbnail'])	{		$source = $file->get('destination_file');		$destination = $file->get('destination_path') . '/thumb_' . $file->get('realname');		if (!create_thumbnail($source, $destination, $file->get('mimetype')))		{			$filedata['thumbnail'] = 0;		}	}	return $filedata;}/*** Calculate the needed size for Thumbnail*/function get_img_size_format($width, $height){	global $config;	// Maximum Width the Image can take	$max_width = ($config['img_max_thumb_width']) ? $config['img_max_thumb_width'] : 400;	if ($width > $height)	{		return array(			round($width * ($max_width / $width)),			round($height * ($max_width / $width))		);	}	else	{		return array(			round($width * ($max_width / $height)),			round($height * ($max_width / $height))		);	}}/*** Return supported image types*/function get_supported_image_types($type = false){	if (@extension_loaded('gd'))	{		$format = imagetypes();		$new_type = 0;		if ($type !== false)		{			// Type is one of the IMAGETYPE constants - it is fetched from getimagesize()			// We do not use the constants here, because some were not available in PHP 4.3.x			switch ($type)			{				// GIF				case 1:					$new_type = ($format & IMG_GIF) ? IMG_GIF : false;				break;				// JPG, JPC, JP2				case 2:				case 9:				case 10:				case 11:				case 12:					$new_type = ($format & IMG_JPG) ? IMG_JPG : false;				break;				// PNG				case 3:					$new_type = ($format & IMG_PNG) ? IMG_PNG : false;				break;				// WBMP				case 15:					$new_type = ($format & IMG_WBMP) ? IMG_WBMP : false;				break;			}		}		else		{			$new_type = array();			$go_through_types = array(IMG_GIF, IMG_JPG, IMG_PNG, IMG_WBMP);			foreach ($go_through_types as $check_type)			{				if ($format & $check_type)				{					$new_type[] = $check_type;				}			}		}		return array(			'gd'		=> ($new_type) ? true : false,			'format'	=> $new_type,			'version'	=> (function_exists('imagecreatetruecolor')) ? 2 : 1		);	}	return array('gd' => false);}/*** Create Thumbnail*/function create_thumbnail($source, $destination, $mimetype){	global $config;	$min_filesize = (int) $config['img_min_thumb_filesize'];	$img_filesize = (file_exists($source)) ? @filesize($source) : false;	if (!$img_filesize || $img_filesize <= $min_filesize)	{		return false;	}	$dimension = @getimagesize($source);	if ($dimension === false)	{		return false;	}	list($width, $height, $type, ) = $dimension;	if (empty($width) || empty($height))	{		return false;	}	list($new_width, $new_height) = get_img_size_format($width, $height);	// Do not create a thumbnail if the resulting width/height is bigger than the original one	if ($new_width >= $width && $new_height >= $height)	{		return false;	}	$used_imagick = false;	// Only use imagemagick if defined and the passthru function not disabled	if ($config['img_imagick'] && function_exists('passthru'))	{		if (substr($config['img_imagick'], -1) !== '/')		{			$config['img_imagick'] .= '/';		}		@passthru(escapeshellcmd($config['img_imagick']) . 'convert' . ((defined('PHP_OS') && preg_match('#^win#i', PHP_OS)) ? '.exe' : '') . ' -quality 85 -geometry ' . $new_width . 'x' . $new_height . ' "' . str_replace('\\', '/', $source) . '" "' . str_replace('\\', '/', $destination) . '"');		if (file_exists($destination))		{			$used_imagick = true;		}	}	if (!$used_imagick)	{		$type = get_supported_image_types($type);		if ($type['gd'])		{			// If the type is not supported, we are not able to create a thumbnail			if ($type['format'] === false)			{				return false;			}			switch ($type['format'])			{				case IMG_GIF:					$image = @imagecreatefromgif($source);				break;				case IMG_JPG:					@ini_set('gd.jpeg_ignore_warning', 1);					$image = @imagecreatefromjpeg($source);				break;				case IMG_PNG:					$image = @imagecreatefrompng($source);				break;				case IMG_WBMP:					$image = @imagecreatefromwbmp($source);				break;			}			if (empty($image))			{				return false;			}			if ($type['version'] == 1)			{				$new_image = imagecreate($new_width, $new_height);				if ($new_image === false)				{					return false;				}				imagecopyresized($new_image, $image, 0, 0, 0, 0, $new_width, $new_height, $width, $height);			}			else			{				$new_image = imagecreatetruecolor($new_width, $new_height);				if ($new_image === false)				{					return false;				}				// Preserve alpha transparency (png for example)				@imagealphablending($new_image, false);				@imagesavealpha($new_image, true);				imagecopyresampled($new_image, $image, 0, 0, 0, 0, $new_width, $new_height, $width, $height);			}			// If we are in safe mode create the destination file prior to using the gd functions to circumvent a PHP bug			if (@ini_get('safe_mode') || @strtolower(ini_get('safe_mode')) == 'on')			{				@touch($destination);			}			switch ($type['format'])			{				case IMG_GIF:					imagegif($new_image, $destination);				break;				case IMG_JPG:					imagejpeg($new_image, $destination, 90);				break;				case IMG_PNG:					imagepng($new_image, $destination);				break;				case IMG_WBMP:					imagewbmp($new_image, $destination);				break;			}			imagedestroy($new_image);		}		else		{			return false;		}	}	if (!file_exists($destination))	{		return false;	}	phpbb_chmod($destination, CHMOD_READ | CHMOD_WRITE);	return true;}/*** Assign Inline attachments (build option fields)*/function posting_gen_inline_attachments(&$attachment_data){	global $template;	if (sizeof($attachment_data))	{		$s_inline_attachment_options = '';		foreach ($attachment_data as $i => $attachment)		{			$s_inline_attachment_options .= '<option value="' . $i . '">' . utf8_basename($attachment['real_filename']) . '</option>';		}		$template->assign_var('S_INLINE_ATTACHMENT_OPTIONS', $s_inline_attachment_options);		return true;	}	return false;}/*** Generate inline attachment entry*/function posting_gen_attachment_entry($attachment_data, &$filename_data, $show_attach_box = true){	global $template, $config, $phpbb_root_path, $phpEx, $user, $auth;	// Some default template variables	$template->assign_vars(array(		'S_SHOW_ATTACH_BOX'	=> $show_attach_box,		'S_HAS_ATTACHMENTS'	=> sizeof($attachment_data),		'FILESIZE'			=> $config['max_filesize'],		'FILE_COMMENT'		=> (isset($filename_data['filecomment'])) ? $filename_data['filecomment'] : '',	));	if (sizeof($attachment_data))	{		// We display the posted attachments within the desired order.		($config['display_order']) ? krsort($attachment_data) : ksort($attachment_data);		foreach ($attachment_data as $count => $attach_row)		{			$hidden = '';			$attach_row['real_filename'] = utf8_basename($attach_row['real_filename']);			foreach ($attach_row as $key => $value)			{				$hidden .= '<input type="hidden" name="attachment_data[' . $count . '][' . $key . ']" value="' . $value . '" />';			}			$download_link = append_sid("{$phpbb_root_path}download/file.$phpEx", 'mode=view&amp;id=' . (int) $attach_row['attach_id'], true, ($attach_row['is_orphan']) ? $user->session_id : false);			$template->assign_block_vars('attach_row', array(				'FILENAME'			=> utf8_basename($attach_row['real_filename']),				'A_FILENAME'		=> addslashes(utf8_basename($attach_row['real_filename'])),				'FILE_COMMENT'		=> $attach_row['attach_comment'],				'ATTACH_ID'			=> $attach_row['attach_id'],				'S_IS_ORPHAN'		=> $attach_row['is_orphan'],				'ASSOC_INDEX'		=> $count,				'U_VIEW_ATTACHMENT'	=> $download_link,				'S_HIDDEN'			=> $hidden)			);		}	}	return sizeof($attachment_data);}//// General Post functions///*** Load Drafts*/function load_drafts($topic_id = 0, $forum_id = 0, $id = 0, $pm_action = '', $msg_id = 0){	global $user, $db, $template, $auth;	global $phpbb_root_path, $phpEx;	$topic_ids = $forum_ids = $draft_rows = array();	// Load those drafts not connected to forums/topics	// If forum_id == 0 AND topic_id == 0 then this is a PM draft	if (!$topic_id && !$forum_id)	{		$sql_and = ' AND d.forum_id = 0 AND d.topic_id = 0';	}	else	{		$sql_and = '';		$sql_and .= ($forum_id) ? ' AND d.forum_id = ' . (int) $forum_id : '';		$sql_and .= ($topic_id) ? ' AND d.topic_id = ' . (int) $topic_id : '';	}	$sql = 'SELECT d.*, f.forum_id, f.forum_name		FROM ' . DRAFTS_TABLE . ' d		LEFT JOIN ' . FORUMS_TABLE . ' f ON (f.forum_id = d.forum_id)			WHERE d.user_id = ' . $user->data['user_id'] . "			$sql_and		ORDER BY d.save_time DESC";	$result = $db->sql_query($sql);	while ($row = $db->sql_fetchrow($result))	{		if ($row['topic_id'])		{			$topic_ids[] = (int) $row['topic_id'];		}		$draft_rows[] = $row;	}	$db->sql_freeresult($result);	if (!sizeof($draft_rows))	{		return;	}	$topic_rows = array();	if (sizeof($topic_ids))	{		$sql = 'SELECT topic_id, forum_id, topic_title			FROM ' . TOPICS_TABLE . '			WHERE ' . $db->sql_in_set('topic_id', array_unique($topic_ids));		$result = $db->sql_query($sql);		while ($row = $db->sql_fetchrow($result))		{			$topic_rows[$row['topic_id']] = $row;		}		$db->sql_freeresult($result);	}	unset($topic_ids);	$template->assign_var('S_SHOW_DRAFTS', true);	foreach ($draft_rows as $draft)	{		$link_topic = $link_forum = $link_pm = false;		$insert_url = $view_url = $title = '';		if (isset($topic_rows[$draft['topic_id']])			&& (				($topic_rows[$draft['topic_id']]['forum_id'] && $auth->acl_get('f_read', $topic_rows[$draft['topic_id']]['forum_id']))				||				(!$topic_rows[$draft['topic_id']]['forum_id'] && $auth->acl_getf_global('f_read'))			))		{			$topic_forum_id = ($topic_rows[$draft['topic_id']]['forum_id']) ? $topic_rows[$draft['topic_id']]['forum_id'] : $forum_id;			$link_topic = true;			$view_url = append_sid("{$phpbb_root_path}viewtopic.$phpEx", 'f=' . $topic_forum_id . '&amp;t=' . $draft['topic_id']);			$title = $topic_rows[$draft['topic_id']]['topic_title'];			$insert_url = append_sid("{$phpbb_root_path}posting.$phpEx", 'f=' . $topic_forum_id . '&amp;t=' . $draft['topic_id'] . '&amp;mode=reply&amp;d=' . $draft['draft_id']);		}		else if ($draft['forum_id'] && $auth->acl_get('f_read', $draft['forum_id']))		{			$link_forum = true;			$view_url = append_sid("{$phpbb_root_path}viewforum.$phpEx", 'f=' . $draft['forum_id']);			$title = $draft['forum_name'];			$insert_url = append_sid("{$phpbb_root_path}posting.$phpEx", 'f=' . $draft['forum_id'] . '&amp;mode=post&amp;d=' . $draft['draft_id']);		}		else		{			// Either display as PM draft if forum_id and topic_id are empty or if access to the forums has been denied afterwards...			$link_pm = true;			$insert_url = append_sid("{$phpbb_root_path}ucp.$phpEx", "i=$id&amp;mode=compose&amp;d={$draft['draft_id']}" . (($pm_action) ? "&amp;action=$pm_action" : '') . (($msg_id) ? "&amp;p=$msg_id" : ''));		}		$template->assign_block_vars('draftrow', array(			'DRAFT_ID'		=> $draft['draft_id'],			'DATE'			=> $user->format_date($draft['save_time']),			'DRAFT_SUBJECT'	=> $draft['draft_subject'],			'TITLE'			=> $title,			'U_VIEW'		=> $view_url,			'U_INSERT'		=> $insert_url,			'S_LINK_PM'		=> $link_pm,			'S_LINK_TOPIC'	=> $link_topic,			'S_LINK_FORUM'	=> $link_forum)		);	}}/*** Topic Review*/function topic_review($topic_id, $forum_id, $mode = 'topic_review', $cur_post_id = 0, $show_quote_button = true){	global $user, $auth, $db, $template, $bbcode, $cache;	global $config, $phpbb_root_path, $phpEx;	// Go ahead and pull all data for this topic	$sql = 'SELECT p.post_id		FROM ' . POSTS_TABLE . ' p' . "		WHERE p.topic_id = $topic_id			" . ((!$auth->acl_get('m_approve', $forum_id)) ? 'AND p.post_approved = 1' : '') . '			' . (($mode == 'post_review') ? " AND p.post_id > $cur_post_id" : '') . '			' . (($mode == 'post_review_edit') ? " AND p.post_id = $cur_post_id" : '') . '		ORDER BY p.post_time ';	$sql .= ($mode == 'post_review') ? 'ASC' : 'DESC';	$result = $db->sql_query_limit($sql, $config['posts_per_page']);	$post_list = array();	while ($row = $db->sql_fetchrow($result))	{		$post_list[] = $row['post_id'];	}	$db->sql_freeresult($result);	if (!sizeof($post_list))	{		return false;	}	// Handle 'post_review_edit' like 'post_review' from now on	if ($mode == 'post_review_edit')	{		$mode = 'post_review';	}	$sql = $db->sql_build_query('SELECT', array(		'SELECT'	=> 'u.username, u.user_id, u.user_colour, p.*, z.friend, z.foe',		'FROM'		=> array(			USERS_TABLE		=> 'u',			POSTS_TABLE		=> 'p',		),		'LEFT_JOIN'	=> array(			array(				'FROM'	=> array(ZEBRA_TABLE => 'z'),				'ON'	=> 'z.user_id = ' . $user->data['user_id'] . ' AND z.zebra_id = p.poster_id'			)		),		'WHERE'		=> $db->sql_in_set('p.post_id', $post_list) . '			AND u.user_id = p.poster_id'	));	$result = $db->sql_query($sql);	$bbcode_bitfield = '';	$rowset = array();	$has_attachments = false;	while ($row = $db->sql_fetchrow($result))	{		$rowset[$row['post_id']] = $row;		$bbcode_bitfield = $bbcode_bitfield | base64_decode($row['bbcode_bitfield']);		if ($row['post_attachment'])		{			$has_attachments = true;		}	}	$db->sql_freeresult($result);	// Instantiate BBCode class	if (!isset($bbcode) && $bbcode_bitfield !== '')	{		include_once($phpbb_root_path . 'includes/bbcode.' . $phpEx);		$bbcode = new bbcode(base64_encode($bbcode_bitfield));	}	// Grab extensions	$extensions = $attachments = array();	if ($has_attachments && $auth->acl_get('u_download') && $auth->acl_get('f_download', $forum_id))	{		$extensions = $cache->obtain_attach_extensions($forum_id);		// Get attachments...		$sql = 'SELECT *			FROM ' . ATTACHMENTS_TABLE . '			WHERE ' . $db->sql_in_set('post_msg_id', $post_list) . '				AND in_message = 0			ORDER BY filetime DESC, post_msg_id ASC';		$result = $db->sql_query($sql);		while ($row = $db->sql_fetchrow($result))		{			$attachments[$row['post_msg_id']][] = $row;		}		$db->sql_freeresult($result);	}	for ($i = 0, $end = sizeof($post_list); $i < $end; ++$i)	{		// A non-existing rowset only happens if there was no user present for the entered poster_id		// This could be a broken posts table.		if (!isset($rowset[$post_list[$i]]))		{			continue;		}		$row =& $rowset[$post_list[$i]];		$poster_id		= $row['user_id'];		$post_subject	= $row['post_subject'];		$message		= censor_text($row['post_text']);		$decoded_message = false;		if ($show_quote_button && $auth->acl_get('f_reply', $forum_id))		{			$decoded_message = $message;			decode_message($decoded_message, $row['bbcode_uid']);			$decoded_message = bbcode_nl2br($decoded_message);		}		if ($row['bbcode_bitfield'])		{			$bbcode->bbcode_second_pass($message, $row['bbcode_uid'], $row['bbcode_bitfield']);		}		$message = bbcode_nl2br($message);		$message = smiley_text($message, !$row['enable_smilies']);		if (!empty($attachments[$row['post_id']]))		{			$update_count = array();			parse_attachments($forum_id, $message, $attachments[$row['post_id']], $update_count);		}		$post_subject = censor_text($post_subject);		$post_anchor = ($mode == 'post_review') ? 'ppr' . $row['post_id'] : 'pr' . $row['post_id'];		$u_show_post = append_sid($phpbb_root_path . 'viewtopic.' . $phpEx, "f=$forum_id&amp;t=$topic_id&amp;p={$row['post_id']}&amp;view=show#p{$row['post_id']}");		$template->assign_block_vars($mode . '_row', array(			'POST_AUTHOR_FULL'		=> get_username_string('full', $poster_id, $row['username'], $row['user_colour'], $row['post_username']),			'POST_AUTHOR_COLOUR'	=> get_username_string('colour', $poster_id, $row['username'], $row['user_colour'], $row['post_username']),			'POST_AUTHOR'			=> get_username_string('username', $poster_id, $row['username'], $row['user_colour'], $row['post_username']),			'U_POST_AUTHOR'			=> get_username_string('profile', $poster_id, $row['username'], $row['user_colour'], $row['post_username']),			'S_HAS_ATTACHMENTS'	=> (!empty($attachments[$row['post_id']])) ? true : false,			'S_FRIEND'			=> ($row['friend']) ? true : false,			'S_IGNORE_POST'		=> ($row['foe']) ? true : false,			'L_IGNORE_POST'		=> ($row['foe']) ? sprintf($user->lang['POST_BY_FOE'], get_username_string('full', $poster_id, $row['username'], $row['user_colour'], $row['post_username']), "<a href=\"{$u_show_post}\" onclick=\"dE('{$post_anchor}', 1); return false;\">", '</a>') : '',			'POST_SUBJECT'		=> $post_subject,			'MINI_POST_IMG'		=> $user->img('icon_post_target', $user->lang['POST']),			'POST_DATE'			=> $user->format_date($row['post_time']),			'MESSAGE'			=> $message,			'DECODED_MESSAGE'	=> $decoded_message,			'POST_ID'			=> $row['post_id'],			'U_MINI_POST'		=> append_sid("{$phpbb_root_path}viewtopic.$phpEx", 'p=' . $row['post_id']) . '#p' . $row['post_id'],			'U_MCP_DETAILS'		=> ($auth->acl_get('m_info', $forum_id)) ? append_sid("{$phpbb_root_path}mcp.$phpEx", 'i=main&amp;mode=post_details&amp;f=' . $forum_id . '&amp;p=' . $row['post_id'], true, $user->session_id) : '',			'POSTER_QUOTE'		=> ($show_quote_button && $auth->acl_get('f_reply', $forum_id)) ? addslashes(get_username_string('username', $poster_id, $row['username'], $row['user_colour'], $row['post_username'])) : '')		);		// Display not already displayed Attachments for this post, we already parsed them. ;)		if (!empty($attachments[$row['post_id']]))		{			foreach ($attachments[$row['post_id']] as $attachment)			{				$template->assign_block_vars($mode . '_row.attachment', array(					'DISPLAY_ATTACHMENT'	=> $attachment)				);			}		}		unset($rowset[$post_list[$i]]);	}	if ($mode == 'topic_review')	{		$template->assign_var('QUOTE_IMG', $user->img('icon_post_quote', $user->lang['REPLY_WITH_QUOTE']));	}	return true;}/*** User Notification*/function user_notification($mode, $subject, $topic_title, $forum_name, $forum_id, $topic_id, $post_id){	global $db, $user, $config, $phpbb_root_path, $phpEx, $auth;	$topic_notification = ($mode == 'reply' || $mode == 'quote') ? true : false;	$forum_notification = ($mode == 'post') ? true : false;	if (!$topic_notification && !$forum_notification)	{		trigger_error('NO_MODE');	}	if (($topic_notification && !$config['allow_topic_notify']) || ($forum_notification && !$config['allow_forum_notify']))	{		return;	}	$topic_title = ($topic_notification) ? $topic_title : $subject;	$topic_title = censor_text($topic_title);	// Get banned User ID's	$sql = 'SELECT ban_userid		FROM ' . BANLIST_TABLE . '		WHERE ban_userid <> 0			AND ban_exclude <> 1';	$result = $db->sql_query($sql);	$sql_ignore_users = ANONYMOUS . ', ' . $user->data['user_id'];	while ($row = $db->sql_fetchrow($result))	{		$sql_ignore_users .= ', ' . (int) $row['ban_userid'];	}	$db->sql_freeresult($result);	$notify_rows = array();	// -- get forum_userids	|| topic_userids	$sql = 'SELECT u.user_id, u.username, u.user_email, u.user_lang, u.user_notify_type, u.user_jabber		FROM ' . (($topic_notification) ? TOPICS_WATCH_TABLE : FORUMS_WATCH_TABLE) . ' w, ' . USERS_TABLE . ' u		WHERE w.' . (($topic_notification) ? 'topic_id' : 'forum_id') . ' = ' . (($topic_notification) ? $topic_id : $forum_id) . "			AND w.user_id NOT IN ($sql_ignore_users)			AND w.notify_status = " . NOTIFY_YES . '			AND u.user_type IN (' . USER_NORMAL . ', ' . USER_FOUNDER . ')			AND u.user_id = w.user_id';	$result = $db->sql_query($sql);	while ($row = $db->sql_fetchrow($result))	{		$notify_rows[$row['user_id']] = array(			'user_id'		=> $row['user_id'],			'username'		=> $row['username'],			'user_email'	=> $row['user_email'],			'user_jabber'	=> $row['user_jabber'],			'user_lang'		=> $row['user_lang'],			'notify_type'	=> ($topic_notification) ? 'topic' : 'forum',			'template'		=> ($topic_notification) ? 'topic_notify' : 'newtopic_notify',			'method'		=> $row['user_notify_type'],			'allowed'		=> false		);	}	$db->sql_freeresult($result);	// forum notification is sent to those not already receiving topic notifications	if ($topic_notification)	{		if (sizeof($notify_rows))		{			$sql_ignore_users .= ', ' . implode(', ', array_keys($notify_rows));		}		$sql = 'SELECT u.user_id, u.username, u.user_email, u.user_lang, u.user_notify_type, u.user_jabber			FROM ' . FORUMS_WATCH_TABLE . ' fw, ' . USERS_TABLE . " u			WHERE fw.forum_id = $forum_id				AND fw.user_id NOT IN ($sql_ignore_users)				AND fw.notify_status = " . NOTIFY_YES . '				AND u.user_type IN (' . USER_NORMAL . ', ' . USER_FOUNDER . ')				AND u.user_id = fw.user_id';		$result = $db->sql_query($sql);		while ($row = $db->sql_fetchrow($result))		{			$notify_rows[$row['user_id']] = array(				'user_id'		=> $row['user_id'],				'username'		=> $row['username'],				'user_email'	=> $row['user_email'],				'user_jabber'	=> $row['user_jabber'],				'user_lang'		=> $row['user_lang'],				'notify_type'	=> 'forum',				'template'		=> 'forum_notify',				'method'		=> $row['user_notify_type'],				'allowed'		=> false			);		}		$db->sql_freeresult($result);	}	if (!sizeof($notify_rows))	{		return;	}	// Make sure users are allowed to read the forum	foreach ($auth->acl_get_list(array_keys($notify_rows), 'f_read', $forum_id) as $forum_id => $forum_ary)	{		foreach ($forum_ary as $auth_option => $user_ary)		{			foreach ($user_ary as $user_id)			{				$notify_rows[$user_id]['allowed'] = true;			}		}	}	// Now, we have to do a little step before really sending, we need to distinguish our users a little bit. ;)	$msg_users = $delete_ids = $update_notification = array();	foreach ($notify_rows as $user_id => $row)	{		if (!$row['allowed'] || !trim($row['user_email']))		{			$delete_ids[$row['notify_type']][] = $row['user_id'];		}		else		{			$msg_users[] = $row;			$update_notification[$row['notify_type']][] = $row['user_id'];		}	}	unset($notify_rows);	// Now, we are able to really send out notifications	if (sizeof($msg_users))	{		include_once($phpbb_root_path . 'includes/functions_messenger.' . $phpEx);		$messenger = new messenger();		$msg_list_ary = array();		foreach ($msg_users as $row)		{			$pos = (!isset($msg_list_ary[$row['template']])) ? 0 : sizeof($msg_list_ary[$row['template']]);			$msg_list_ary[$row['template']][$pos]['method']	= $row['method'];			$msg_list_ary[$row['template']][$pos]['email']	= $row['user_email'];			$msg_list_ary[$row['template']][$pos]['jabber']	= $row['user_jabber'];			$msg_list_ary[$row['template']][$pos]['name']	= $row['username'];			$msg_list_ary[$row['template']][$pos]['lang']	= $row['user_lang'];			$msg_list_ary[$row['template']][$pos]['user_id']= $row['user_id'];		}		unset($msg_users);		foreach ($msg_list_ary as $email_template => $email_list)		{			foreach ($email_list as $addr)			{				$messenger->template($email_template, $addr['lang']);				$messenger->to($addr['email'], $addr['name']);				$messenger->im($addr['jabber'], $addr['name']);				$messenger->assign_vars(array(					'USERNAME'		=> htmlspecialchars_decode($addr['name']),					'TOPIC_TITLE'	=> htmlspecialchars_decode($topic_title),					'FORUM_NAME'	=> htmlspecialchars_decode($forum_name),					'U_FORUM'				=> generate_board_url() . "/viewforum.$phpEx?f=$forum_id",					'U_TOPIC'				=> generate_board_url() . "/viewtopic.$phpEx?f=$forum_id&t=$topic_id",					'U_NEWEST_POST'			=> generate_board_url() . "/viewtopic.$phpEx?f=$forum_id&t=$topic_id&p=$post_id&e=$post_id",					'U_STOP_WATCHING_TOPIC'	=> generate_board_url() . "/viewtopic.$phpEx?uid={$addr['user_id']}&f=$forum_id&t=$topic_id&unwatch=topic",					'U_STOP_WATCHING_FORUM'	=> generate_board_url() . "/viewforum.$phpEx?uid={$addr['user_id']}&f=$forum_id&unwatch=forum",				));				$messenger->send($addr['method']);			}		}		unset($msg_list_ary);		$messenger->save_queue();	}	// Handle the DB updates	$db->sql_transaction('begin');	if (!empty($update_notification['topic']))	{		$sql = 'UPDATE ' . TOPICS_WATCH_TABLE . '			SET notify_status = ' . NOTIFY_NO . "			WHERE topic_id = $topic_id				AND " . $db->sql_in_set('user_id', $update_notification['topic']);		$db->sql_query($sql);	}	if (!empty($update_notification['forum']))	{		$sql = 'UPDATE ' . FORUMS_WATCH_TABLE . '			SET notify_status = ' . NOTIFY_NO . "			WHERE forum_id = $forum_id				AND " . $db->sql_in_set('user_id', $update_notification['forum']);		$db->sql_query($sql);	}	// Now delete the user_ids not authorised to receive notifications on this topic/forum	if (!empty($delete_ids['topic']))	{		$sql = 'DELETE FROM ' . TOPICS_WATCH_TABLE . "			WHERE topic_id = $topic_id				AND " . $db->sql_in_set('user_id', $delete_ids['topic']);		$db->sql_query($sql);	}	if (!empty($delete_ids['forum']))	{		$sql = 'DELETE FROM ' . FORUMS_WATCH_TABLE . "			WHERE forum_id = $forum_id				AND " . $db->sql_in_set('user_id', $delete_ids['forum']);		$db->sql_query($sql);	}	$db->sql_transaction('commit');}//// Post handling functions///*** Delete Post*/function delete_post($forum_id, $topic_id, $post_id, &$data){	global $db, $user, $auth;	global $config, $phpEx, $phpbb_root_path;	// Specify our post mode	$post_mode = 'delete';	if (($data['topic_first_post_id'] === $data['topic_last_post_id']) && $data['topic_replies_real'] == 0)	{		$post_mode = 'delete_topic';	}	else if ($data['topic_first_post_id'] == $post_id)	{		$post_mode = 'delete_first_post';	}	else if ($data['topic_last_post_id'] == $post_id)	{		$post_mode = 'delete_last_post';	}	$sql_data = array();	$next_post_id = false;	include_once($phpbb_root_path . 'includes/functions_admin.' . $phpEx);	$db->sql_transaction('begin');	// we must make sure to update forums that contain the shadow'd topic	if ($post_mode == 'delete_topic')	{		$shadow_forum_ids = array();		$sql = 'SELECT forum_id			FROM ' . TOPICS_TABLE . '			WHERE ' . $db->sql_in_set('topic_moved_id', $topic_id);		$result = $db->sql_query($sql);		while ($row = $db->sql_fetchrow($result))		{			if (!isset($shadow_forum_ids[(int) $row['forum_id']]))			{				$shadow_forum_ids[(int) $row['forum_id']] = 1;			}			else			{				$shadow_forum_ids[(int) $row['forum_id']]++;			}		}		$db->sql_freeresult($result);	}	if (!delete_posts('post_id', array($post_id), false, false))	{		// Try to delete topic, we may had an previous error causing inconsistency		if ($post_mode == 'delete_topic')		{			delete_topics('topic_id', array($topic_id), false);		}		trigger_error('ALREADY_DELETED');	}	$db->sql_transaction('commit');	// Collect the necessary information for updating the tables	$sql_data[FORUMS_TABLE] = '';	switch ($post_mode)	{		case 'delete_topic':			foreach ($shadow_forum_ids as $updated_forum => $topic_count)			{				// counting is fun! we only have to do sizeof($forum_ids) number of queries,				// even if the topic is moved back to where its shadow lives (we count how many times it is in a forum)				$db->sql_query('UPDATE ' . FORUMS_TABLE . ' SET forum_topics_real = forum_topics_real - ' . $topic_count . ', forum_topics = forum_topics - ' . $topic_count . ' WHERE forum_id = ' . $updated_forum);				update_post_information('forum', $updated_forum);			}			delete_topics('topic_id', array($topic_id), false);			if ($data['topic_type'] != POST_GLOBAL)			{				$sql_data[FORUMS_TABLE] .= 'forum_topics_real = forum_topics_real - 1';				$sql_data[FORUMS_TABLE] .= ($data['topic_approved']) ? ', forum_posts = forum_posts - 1, forum_topics = forum_topics - 1' : '';			}			$update_sql = update_post_information('forum', $forum_id, true);			if (sizeof($update_sql))			{				$sql_data[FORUMS_TABLE] .= ($sql_data[FORUMS_TABLE]) ? ', ' : '';				$sql_data[FORUMS_TABLE] .= implode(', ', $update_sql[$forum_id]);			}		break;		case 'delete_first_post':			$sql = 'SELECT p.post_id, p.poster_id, p.post_time, p.post_username, u.username, u.user_colour				FROM ' . POSTS_TABLE . ' p, ' . USERS_TABLE . " u				WHERE p.topic_id = $topic_id					AND p.poster_id = u.user_id				ORDER BY p.post_time ASC";			$result = $db->sql_query_limit($sql, 1);			$row = $db->sql_fetchrow($result);			$db->sql_freeresult($result);			if ($data['topic_type'] != POST_GLOBAL)			{				$sql_data[FORUMS_TABLE] = ($data['post_approved']) ? 'forum_posts = forum_posts - 1' : '';			}			$sql_data[TOPICS_TABLE] = 'topic_poster = ' . intval($row['poster_id']) . ', topic_first_post_id = ' . intval($row['post_id']) . ", topic_first_poster_colour = '" . $db->sql_escape($row['user_colour']) . "', topic_first_poster_name = '" . (($row['poster_id'] == ANONYMOUS) ? $db->sql_escape($row['post_username']) : $db->sql_escape($row['username'])) . "', topic_time = " . (int) $row['post_time'];			// Decrementing topic_replies here is fine because this case only happens if there is more than one post within the topic - basically removing one "reply"			$sql_data[TOPICS_TABLE] .= ', topic_replies_real = topic_replies_real - 1' . (($data['post_approved']) ? ', topic_replies = topic_replies - 1' : '');			$next_post_id = (int) $row['post_id'];		break;		case 'delete_last_post':			if ($data['topic_type'] != POST_GLOBAL)			{				$sql_data[FORUMS_TABLE] = ($data['post_approved']) ? 'forum_posts = forum_posts - 1' : '';			}			$update_sql = update_post_information('forum', $forum_id, true);			if (sizeof($update_sql))			{				$sql_data[FORUMS_TABLE] .= ($sql_data[FORUMS_TABLE]) ? ', ' : '';				$sql_data[FORUMS_TABLE] .= implode(', ', $update_sql[$forum_id]);			}			$sql_data[TOPICS_TABLE] = 'topic_bumped = 0, topic_bumper = 0, topic_replies_real = topic_replies_real - 1' . (($data['post_approved']) ? ', topic_replies = topic_replies - 1' : '');			$update_sql = update_post_information('topic', $topic_id, true);			if (sizeof($update_sql))			{				$sql_data[TOPICS_TABLE] .= ', ' . implode(', ', $update_sql[$topic_id]);				$next_post_id = (int) str_replace('topic_last_post_id = ', '', $update_sql[$topic_id][0]);			}			else			{				$sql = 'SELECT MAX(post_id) as last_post_id					FROM ' . POSTS_TABLE . "					WHERE topic_id = $topic_id " .						((!$auth->acl_get('m_approve', $forum_id)) ? 'AND post_approved = 1' : '');				$result = $db->sql_query($sql);				$row = $db->sql_fetchrow($result);				$db->sql_freeresult($result);				$next_post_id = (int) $row['last_post_id'];			}		break;		case 'delete':			$sql = 'SELECT post_id				FROM ' . POSTS_TABLE . "				WHERE topic_id = $topic_id " .					((!$auth->acl_get('m_approve', $forum_id)) ? 'AND post_approved = 1' : '') . '					AND post_time > ' . $data['post_time'] . '				ORDER BY post_time ASC';			$result = $db->sql_query_limit($sql, 1);			$row = $db->sql_fetchrow($result);			$db->sql_freeresult($result);			if ($data['topic_type'] != POST_GLOBAL)			{				$sql_data[FORUMS_TABLE] = ($data['post_approved']) ? 'forum_posts = forum_posts - 1' : '';			}			$sql_data[TOPICS_TABLE] = 'topic_replies_real = topic_replies_real - 1' . (($data['post_approved']) ? ', topic_replies = topic_replies - 1' : '');			$next_post_id = (int) $row['post_id'];		break;	}	if (($post_mode == 'delete') || ($post_mode == 'delete_last_post') || ($post_mode == 'delete_first_post'))	{		$sql = 'SELECT 1 AS has_attachments			FROM ' . ATTACHMENTS_TABLE . '			WHERE topic_id = ' . $topic_id;		$result = $db->sql_query_limit($sql, 1);		$has_attachments = (int) $db->sql_fetchfield('has_attachments');		$db->sql_freeresult($result);		if (!$has_attachments)		{			$sql_data[TOPICS_TABLE] .= ', topic_attachment = 0';		}	}//	$sql_data[USERS_TABLE] = ($data['post_postcount']) ? 'user_posts = user_posts - 1' : '';	$db->sql_transaction('begin');	$where_sql = array(		FORUMS_TABLE	=> "forum_id = $forum_id",		TOPICS_TABLE	=> "topic_id = $topic_id",		USERS_TABLE		=> 'user_id = ' . $data['poster_id']	);	foreach ($sql_data as $table => $update_sql)	{		if ($update_sql)		{			$db->sql_query("UPDATE $table SET $update_sql WHERE " . $where_sql[$table]);		}	}	// Adjust posted info for this user by looking for a post by him/her within this topic...	if ($post_mode != 'delete_topic' && $config['load_db_track'] && $data['poster_id'] != ANONYMOUS)	{		$sql = 'SELECT poster_id			FROM ' . POSTS_TABLE . '			WHERE topic_id = ' . $topic_id . '				AND poster_id = ' . $data['poster_id'];		$result = $db->sql_query_limit($sql, 1);		$poster_id = (int) $db->sql_fetchfield('poster_id');		$db->sql_freeresult($result);		// The user is not having any more posts within this topic		if (!$poster_id)		{			$sql = 'DELETE FROM ' . TOPICS_POSTED_TABLE . '				WHERE topic_id = ' . $topic_id . '					AND user_id = ' . $data['poster_id'];			$db->sql_query($sql);		}	}	$db->sql_transaction('commit');	if ($data['post_reported'] && ($post_mode != 'delete_topic'))	{		sync('topic_reported', 'topic_id', array($topic_id));	}	return $next_post_id;}/*** Submit Post* @todo Split up and create lightweight, simple API for this.*/function submit_post($mode, $subject, $username, $topic_type, &$poll, &$data, $update_message = true, $update_search_index = true){	global $db, $auth, $user, $config, $phpEx, $template, $phpbb_root_path;	// We do not handle erasing posts here	if ($mode == 'delete')	{		return false;	}	$current_time = time();	if ($mode == 'post')	{		$post_mode = 'post';		$update_message = true;	}	else if ($mode != 'edit')	{		$post_mode = 'reply';		$update_message = true;	}	else if ($mode == 'edit')	{		$post_mode = ($data['topic_replies_real'] == 0) ? 'edit_topic' : (($data['topic_first_post_id'] == $data['post_id']) ? 'edit_first_post' : (($data['topic_last_post_id'] == $data['post_id']) ? 'edit_last_post' : 'edit'));	}	// First of all make sure the subject and topic title are having the correct length.	// To achieve this without cutting off between special chars we convert to an array and then count the elements.	$subject = truncate_string($subject);	$data['topic_title'] = truncate_string($data['topic_title']);	// Collect some basic information about which tables and which rows to update/insert	$sql_data = $topic_row = array();	$poster_id = ($mode == 'edit') ? $data['poster_id'] : (int) $user->data['user_id'];	// Retrieve some additional information if not present	if ($mode == 'edit' && (!isset($data['post_approved']) || !isset($data['topic_approved']) || $data['post_approved'] === false || $data['topic_approved'] === false))	{		$sql = 'SELECT p.post_approved, t.topic_type, t.topic_replies, t.topic_replies_real, t.topic_approved			FROM ' . TOPICS_TABLE . ' t, ' . POSTS_TABLE . ' p			WHERE t.topic_id = p.topic_id				AND p.post_id = ' . $data['post_id'];		$result = $db->sql_query($sql);		$topic_row = $db->sql_fetchrow($result);		$db->sql_freeresult($result);		$data['topic_approved'] = $topic_row['topic_approved'];		$data['post_approved'] = $topic_row['post_approved'];	}	// This variable indicates if the user is able to post or put into the queue - it is used later for all code decisions regarding approval	// The variable name should be $post_approved, because it indicates if the post is approved or not	$post_approval = 1;	// Check the permissions for post approval. Moderators are not affected.	if (!$auth->acl_get('f_noapprove', $data['forum_id']) && !$auth->acl_get('m_approve', $data['forum_id']))	{		// Post not approved, but in queue		$post_approval = 0;	}	// Mods are able to force approved/unapproved posts. True means the post is approved, false the post is unapproved	if (isset($data['force_approved_state']))	{		$post_approval = ($data['force_approved_state']) ? 1 : 0;	}	// Start the transaction here	$db->sql_transaction('begin');	// Collect Information	switch ($post_mode)	{		case 'post':		case 'reply':			$sql_data[POSTS_TABLE]['sql'] = array(				'forum_id'			=> ($topic_type == POST_GLOBAL) ? 0 : $data['forum_id'],				'poster_id'			=> (int) $user->data['user_id'],				'icon_id'			=> $data['icon_id'],				'poster_ip'			=> $user->ip,				'post_time'			=> $current_time,				'post_approved'		=> $post_approval,				'enable_bbcode'		=> $data['enable_bbcode'],				'enable_smilies'	=> $data['enable_smilies'],				'enable_magic_url'	=> $data['enable_urls'],				'enable_sig'		=> $data['enable_sig'],				'post_username'		=> (!$user->data['is_registered']) ? $username : '',				'post_subject'		=> $subject,				'post_text'			=> $data['message'],				'post_checksum'		=> $data['message_md5'],				'post_attachment'	=> (!empty($data['attachment_data'])) ? 1 : 0,				'bbcode_bitfield'	=> $data['bbcode_bitfield'],				'bbcode_uid'		=> $data['bbcode_uid'],				'post_postcount'	=> ($auth->acl_get('f_postcount', $data['forum_id'])) ? 1 : 0,				'post_edit_locked'	=> $data['post_edit_locked']			);		break;		case 'edit_first_post':		case 'edit':		case 'edit_last_post':		case 'edit_topic':			// If edit reason is given always display edit info			// If editing last post then display no edit info			// If m_edit permission then display no edit info			// If normal edit display edit info			// Display edit info if edit reason given or user is editing his post, which is not the last within the topic.			if ($data['post_edit_reason'] || (!$auth->acl_get('m_edit', $data['forum_id']) && ($post_mode == 'edit' || $post_mode == 'edit_first_post')))			{				$data['post_edit_reason']		= truncate_string($data['post_edit_reason'], 255, 255, false);				$sql_data[POSTS_TABLE]['sql']	= array(					'post_edit_time'	=> $current_time,					'post_edit_reason'	=> $data['post_edit_reason'],					'post_edit_user'	=> (int) $data['post_edit_user'],				);				$sql_data[POSTS_TABLE]['stat'][] = 'post_edit_count = post_edit_count + 1';			}			else if (!$data['post_edit_reason'] && $mode == 'edit' && $auth->acl_get('m_edit', $data['forum_id']))			{				$sql_data[POSTS_TABLE]['sql'] = array(					'post_edit_reason'	=> '',				);			}			// If the person editing this post is different to the one having posted then we will add a log entry stating the edit			// Could be simplified by only adding to the log if the edit is not tracked - but this may confuse admins/mods			if ($user->data['user_id'] != $poster_id)			{				$log_subject = ($subject) ? $subject : $data['topic_title'];				add_log('mod', $data['forum_id'], $data['topic_id'], 'LOG_POST_EDITED', $log_subject, (!empty($username)) ? $username : $user->lang['GUEST']);			}			if (!isset($sql_data[POSTS_TABLE]['sql']))			{				$sql_data[POSTS_TABLE]['sql'] = array();			}			$sql_data[POSTS_TABLE]['sql'] = array_merge($sql_data[POSTS_TABLE]['sql'], array(				'forum_id'			=> ($topic_type == POST_GLOBAL) ? 0 : $data['forum_id'],				'poster_id'			=> $data['poster_id'],				'icon_id'			=> $data['icon_id'],				'post_approved'		=> (!$post_approval) ? 0 : $data['post_approved'],				'enable_bbcode'		=> $data['enable_bbcode'],				'enable_smilies'	=> $data['enable_smilies'],				'enable_magic_url'	=> $data['enable_urls'],				'enable_sig'		=> $data['enable_sig'],				'post_username'		=> ($username && $data['poster_id'] == ANONYMOUS) ? $username : '',				'post_subject'		=> $subject,				'post_checksum'		=> $data['message_md5'],				'post_attachment'	=> (!empty($data['attachment_data'])) ? 1 : 0,				'bbcode_bitfield'	=> $data['bbcode_bitfield'],				'bbcode_uid'		=> $data['bbcode_uid'],				'post_edit_locked'	=> $data['post_edit_locked'])			);			if ($update_message)			{				$sql_data[POSTS_TABLE]['sql']['post_text'] = $data['message'];			}		break;	}	$post_approved = $sql_data[POSTS_TABLE]['sql']['post_approved'];	$topic_row = array();	// And the topic ladies and gentlemen	switch ($post_mode)	{		case 'post':			$sql_data[TOPICS_TABLE]['sql'] = array(				'topic_poster'				=> (int) $user->data['user_id'],				'topic_time'				=> $current_time,				'topic_last_view_time'		=> $current_time,				'forum_id'					=> ($topic_type == POST_GLOBAL) ? 0 : $data['forum_id'],				'icon_id'					=> $data['icon_id'],				'topic_approved'			=> $post_approval,				'topic_title'				=> $subject,				'topic_first_poster_name'	=> (!$user->data['is_registered'] && $username) ? $username : (($user->data['user_id'] != ANONYMOUS) ? $user->data['username'] : ''),				'topic_first_poster_colour'	=> $user->data['user_colour'],				'topic_type'				=> $topic_type,				'topic_time_limit'			=> ($topic_type == POST_STICKY || $topic_type == POST_ANNOUNCE) ? ($data['topic_time_limit'] * 86400) : 0,				'topic_attachment'			=> (!empty($data['attachment_data'])) ? 1 : 0,			);			if (isset($poll['poll_options']) && !empty($poll['poll_options']))			{				$poll_start = ($poll['poll_start']) ? $poll['poll_start'] : $current_time;				$poll_length = $poll['poll_length'] * 86400;				if ($poll_length < 0)				{					$poll_start = $poll_start + $poll_length;					if ($poll_start < 0)					{						$poll_start = 0;					}					$poll_length = 1;				}				$sql_data[TOPICS_TABLE]['sql'] = array_merge($sql_data[TOPICS_TABLE]['sql'], array(					'poll_title'		=> $poll['poll_title'],					'poll_start'		=> $poll_start,					'poll_max_options'	=> $poll['poll_max_options'],					'poll_length'		=> $poll_length,					'poll_vote_change'	=> $poll['poll_vote_change'])				);			}			$sql_data[USERS_TABLE]['stat'][] = "user_lastpost_time = $current_time" . (($auth->acl_get('f_postcount', $data['forum_id']) && $post_approval) ? ', user_posts = user_posts + 1' : '');			if ($topic_type != POST_GLOBAL)			{				if ($post_approval)				{					$sql_data[FORUMS_TABLE]['stat'][] = 'forum_posts = forum_posts + 1';				}				$sql_data[FORUMS_TABLE]['stat'][] = 'forum_topics_real = forum_topics_real + 1' . (($post_approval) ? ', forum_topics = forum_topics + 1' : '');			}		break;		case 'reply':			$sql_data[TOPICS_TABLE]['stat'][] = 'topic_last_view_time = ' . $current_time . ',				topic_replies_real = topic_replies_real + 1,				topic_bumped = 0,				topic_bumper = 0' .				(($post_approval) ? ', topic_replies = topic_replies + 1' : '') .				((!empty($data['attachment_data']) || (isset($data['topic_attachment']) && $data['topic_attachment'])) ? ', topic_attachment = 1' : '');			$sql_data[USERS_TABLE]['stat'][] = "user_lastpost_time = $current_time" . (($auth->acl_get('f_postcount', $data['forum_id']) && $post_approval) ? ', user_posts = user_posts + 1' : '');			if ($post_approval && $topic_type != POST_GLOBAL)			{				$sql_data[FORUMS_TABLE]['stat'][] = 'forum_posts = forum_posts + 1';			}		break;		case 'edit_topic':		case 'edit_first_post':			if (isset($poll['poll_options']))			{				$poll_start = ($poll['poll_start'] || empty($poll['poll_options'])) ? $poll['poll_start'] : $current_time;				$poll_length = $poll['poll_length'] * 86400;				if ($poll_length < 0)				{					$poll_start = $poll_start + $poll_length;					if ($poll_start < 0)					{						$poll_start = 0;					}					$poll_length = 1;				}			}			$sql_data[TOPICS_TABLE]['sql'] = array(				'forum_id'					=> ($topic_type == POST_GLOBAL) ? 0 : $data['forum_id'],				'icon_id'					=> $data['icon_id'],				'topic_approved'			=> (!$post_approval) ? 0 : $data['topic_approved'],				'topic_title'				=> $subject,				'topic_first_poster_name'	=> $username,				'topic_type'				=> $topic_type,				'topic_time_limit'			=> ($topic_type == POST_STICKY || $topic_type == POST_ANNOUNCE) ? ($data['topic_time_limit'] * 86400) : 0,				'poll_title'				=> (isset($poll['poll_options'])) ? $poll['poll_title'] : '',				'poll_start'				=> (isset($poll['poll_options'])) ? $poll_start : 0,				'poll_max_options'			=> (isset($poll['poll_options'])) ? $poll['poll_max_options'] : 1,				'poll_length'				=> (isset($poll['poll_options'])) ? $poll_length : 0,				'poll_vote_change'			=> (isset($poll['poll_vote_change'])) ? $poll['poll_vote_change'] : 0,				'topic_last_view_time'		=> $current_time,				'topic_attachment'			=> (!empty($data['attachment_data'])) ? 1 : (isset($data['topic_attachment']) ? $data['topic_attachment'] : 0),			);			// Correctly set back the topic replies and forum posts... only if the topic was approved before and now gets disapproved			if (!$post_approval && $data['topic_approved'])			{				// Do we need to grab some topic informations?				if (!sizeof($topic_row))				{					$sql = 'SELECT topic_type, topic_replies, topic_replies_real, topic_approved						FROM ' . TOPICS_TABLE . '						WHERE topic_id = ' . $data['topic_id'];					$result = $db->sql_query($sql);					$topic_row = $db->sql_fetchrow($result);					$db->sql_freeresult($result);				}				// If this is the only post remaining we do not need to decrement topic_replies.				// Also do not decrement if first post - then the topic_replies will not be adjusted if approving the topic again.				// If this is an edited topic or the first post the topic gets completely disapproved later on...				$sql_data[FORUMS_TABLE]['stat'][] = 'forum_topics = forum_topics - 1';				$sql_data[FORUMS_TABLE]['stat'][] = 'forum_posts = forum_posts - ' . ($topic_row['topic_replies'] + 1);				set_config_count('num_topics', -1, true);				set_config_count('num_posts', ($topic_row['topic_replies'] + 1) * (-1), true);				// Only decrement this post, since this is the one non-approved now				if ($auth->acl_get('f_postcount', $data['forum_id']))				{					$sql_data[USERS_TABLE]['stat'][] = 'user_posts = user_posts - 1';				}			}		break;		case 'edit':		case 'edit_last_post':			// Correctly set back the topic replies and forum posts... but only if the post was approved before.			if (!$post_approval && $data['post_approved'])			{				$sql_data[TOPICS_TABLE]['stat'][] = 'topic_replies = topic_replies - 1, topic_last_view_time = ' . $current_time;				$sql_data[FORUMS_TABLE]['stat'][] = 'forum_posts = forum_posts - 1';				set_config_count('num_posts', -1, true);				if ($auth->acl_get('f_postcount', $data['forum_id']))				{					$sql_data[USERS_TABLE]['stat'][] = 'user_posts = user_posts - 1';				}			}		break;	}	// Submit new topic	if ($post_mode == 'post')	{		$sql = 'INSERT INTO ' . TOPICS_TABLE . ' ' .			$db->sql_build_array('INSERT', $sql_data[TOPICS_TABLE]['sql']);		$db->sql_query($sql);		$data['topic_id'] = $db->sql_nextid();		$sql_data[POSTS_TABLE]['sql'] = array_merge($sql_data[POSTS_TABLE]['sql'], array(			'topic_id' => $data['topic_id'])		);		unset($sql_data[TOPICS_TABLE]['sql']);	}	// Submit new post	if ($post_mode == 'post' || $post_mode == 'reply')	{		if ($post_mode == 'reply')		{			$sql_data[POSTS_TABLE]['sql'] = array_merge($sql_data[POSTS_TABLE]['sql'], array(				'topic_id' => $data['topic_id'])			);		}		$sql = 'INSERT INTO ' . POSTS_TABLE . ' ' . $db->sql_build_array('INSERT', $sql_data[POSTS_TABLE]['sql']);		$db->sql_query($sql);		$data['post_id'] = $db->sql_nextid();		if ($post_mode == 'post')		{			$sql_data[TOPICS_TABLE]['sql'] = array(				'topic_first_post_id'		=> $data['post_id'],				'topic_last_post_id'		=> $data['post_id'],				'topic_last_post_time'		=> $current_time,				'topic_last_poster_id'		=> (int) $user->data['user_id'],				'topic_last_poster_name'	=> (!$user->data['is_registered'] && $username) ? $username : (($user->data['user_id'] != ANONYMOUS) ? $user->data['username'] : ''),				'topic_last_poster_colour'	=> $user->data['user_colour'],				'topic_last_post_subject'	=> (string) $subject,			);		}		unset($sql_data[POSTS_TABLE]['sql']);	}	$make_global = false;	// Are we globalising or unglobalising?	if ($post_mode == 'edit_first_post' || $post_mode == 'edit_topic')	{		if (!sizeof($topic_row))		{			$sql = 'SELECT topic_type, topic_replies, topic_replies_real, topic_approved, topic_last_post_id				FROM ' . TOPICS_TABLE . '				WHERE topic_id = ' . $data['topic_id'];			$result = $db->sql_query($sql);			$topic_row = $db->sql_fetchrow($result);			$db->sql_freeresult($result);		}		// globalise/unglobalise?		if (($topic_row['topic_type'] != POST_GLOBAL && $topic_type == POST_GLOBAL) || ($topic_row['topic_type'] == POST_GLOBAL && $topic_type != POST_GLOBAL))		{			if (!empty($sql_data[FORUMS_TABLE]['stat']) && implode('', $sql_data[FORUMS_TABLE]['stat']))			{				$db->sql_query('UPDATE ' . FORUMS_TABLE . ' SET ' . implode(', ', $sql_data[FORUMS_TABLE]['stat']) . ' WHERE forum_id = ' . $data['forum_id']);			}			$make_global = true;			$sql_data[FORUMS_TABLE]['stat'] = array();		}		// globalise		if ($topic_row['topic_type'] != POST_GLOBAL && $topic_type == POST_GLOBAL)		{			// Decrement topic/post count			$sql_data[FORUMS_TABLE]['stat'][] = 'forum_posts = forum_posts - ' . ($topic_row['topic_replies_real'] + 1);			$sql_data[FORUMS_TABLE]['stat'][] = 'forum_topics_real = forum_topics_real - 1' . (($topic_row['topic_approved']) ? ', forum_topics = forum_topics - 1' : '');			// Update forum_ids for all posts			$sql = 'UPDATE ' . POSTS_TABLE . '				SET forum_id = 0				WHERE topic_id = ' . $data['topic_id'];			$db->sql_query($sql);		}		// unglobalise		else if ($topic_row['topic_type'] == POST_GLOBAL && $topic_type != POST_GLOBAL)		{			// Increment topic/post count			$sql_data[FORUMS_TABLE]['stat'][] = 'forum_posts = forum_posts + ' . ($topic_row['topic_replies_real'] + 1);			$sql_data[FORUMS_TABLE]['stat'][] = 'forum_topics_real = forum_topics_real + 1' . (($topic_row['topic_approved']) ? ', forum_topics = forum_topics + 1' : '');			// Update forum_ids for all posts			$sql = 'UPDATE ' . POSTS_TABLE . '				SET forum_id = ' . $data['forum_id'] . '				WHERE topic_id = ' . $data['topic_id'];			$db->sql_query($sql);		}	}	// Update the topics table	if (isset($sql_data[TOPICS_TABLE]['sql']))	{		$sql = 'UPDATE ' . TOPICS_TABLE . '			SET ' . $db->sql_build_array('UPDATE', $sql_data[TOPICS_TABLE]['sql']) . '			WHERE topic_id = ' . $data['topic_id'];		$db->sql_query($sql);	}	// Update the posts table	if (isset($sql_data[POSTS_TABLE]['sql']))	{		$sql = 'UPDATE ' . POSTS_TABLE . '			SET ' . $db->sql_build_array('UPDATE', $sql_data[POSTS_TABLE]['sql']) . '			WHERE post_id = ' . $data['post_id'];		$db->sql_query($sql);	}	// Update Poll Tables	if (isset($poll['poll_options']))	{		$cur_poll_options = array();		if ($mode == 'edit')		{			$sql = 'SELECT *				FROM ' . POLL_OPTIONS_TABLE . '				WHERE topic_id = ' . $data['topic_id'] . '				ORDER BY poll_option_id';			$result = $db->sql_query($sql);			$cur_poll_options = array();			while ($row = $db->sql_fetchrow($result))			{				$cur_poll_options[] = $row;			}			$db->sql_freeresult($result);		}		$sql_insert_ary = array();		for ($i = 0, $size = sizeof($poll['poll_options']); $i < $size; $i++)		{			if (strlen(trim($poll['poll_options'][$i])))			{				if (empty($cur_poll_options[$i]))				{					// If we add options we need to put them to the end to be able to preserve votes...					$sql_insert_ary[] = array(						'poll_option_id'	=> (int) sizeof($cur_poll_options) + 1 + sizeof($sql_insert_ary),						'topic_id'			=> (int) $data['topic_id'],						'poll_option_text'	=> (string) $poll['poll_options'][$i]					);				}				else if ($poll['poll_options'][$i] != $cur_poll_options[$i])				{					$sql = 'UPDATE ' . POLL_OPTIONS_TABLE . "						SET poll_option_text = '" . $db->sql_escape($poll['poll_options'][$i]) . "'						WHERE poll_option_id = " . $cur_poll_options[$i]['poll_option_id'] . '							AND topic_id = ' . $data['topic_id'];					$db->sql_query($sql);				}			}		}		$db->sql_multi_insert(POLL_OPTIONS_TABLE, $sql_insert_ary);		if (sizeof($poll['poll_options']) < sizeof($cur_poll_options))		{			$sql = 'DELETE FROM ' . POLL_OPTIONS_TABLE . '				WHERE poll_option_id > ' . sizeof($poll['poll_options']) . '					AND topic_id = ' . $data['topic_id'];			$db->sql_query($sql);		}		// If edited, we would need to reset votes (since options can be re-ordered above, you can't be sure if the change is for changing the text or adding an option		if ($mode == 'edit' && sizeof($poll['poll_options']) != sizeof($cur_poll_options))		{			$db->sql_query('DELETE FROM ' . POLL_VOTES_TABLE . ' WHERE topic_id = ' . $data['topic_id']);			$db->sql_query('UPDATE ' . POLL_OPTIONS_TABLE . ' SET poll_option_total = 0 WHERE topic_id = ' . $data['topic_id']);		}	}	// Submit Attachments	if (!empty($data['attachment_data']) && $data['post_id'] && in_array($mode, array('post', 'reply', 'quote', 'edit')))	{		$space_taken = $files_added = 0;		$orphan_rows = array();		foreach ($data['attachment_data'] as $pos => $attach_row)		{			$orphan_rows[(int) $attach_row['attach_id']] = array();		}		if (sizeof($orphan_rows))		{			$sql = 'SELECT attach_id, filesize, physical_filename				FROM ' . ATTACHMENTS_TABLE . '				WHERE ' . $db->sql_in_set('attach_id', array_keys($orphan_rows)) . '					AND is_orphan = 1					AND poster_id = ' . $user->data['user_id'];			$result = $db->sql_query($sql);			$orphan_rows = array();			while ($row = $db->sql_fetchrow($result))			{				$orphan_rows[$row['attach_id']] = $row;			}			$db->sql_freeresult($result);		}		foreach ($data['attachment_data'] as $pos => $attach_row)		{			if ($attach_row['is_orphan'] && !isset($orphan_rows[$attach_row['attach_id']]))			{				continue;			}			if (!$attach_row['is_orphan'])			{				// update entry in db if attachment already stored in db and filespace				$sql = 'UPDATE ' . ATTACHMENTS_TABLE . "					SET attach_comment = '" . $db->sql_escape($attach_row['attach_comment']) . "'					WHERE attach_id = " . (int) $attach_row['attach_id'] . '						AND is_orphan = 0';				$db->sql_query($sql);			}			else			{				// insert attachment into db				if (!@file_exists($phpbb_root_path . $config['upload_path'] . '/' . utf8_basename($orphan_rows[$attach_row['attach_id']]['physical_filename'])))				{					continue;				}				$space_taken += $orphan_rows[$attach_row['attach_id']]['filesize'];				$files_added++;				$attach_sql = array(					'post_msg_id'		=> $data['post_id'],					'topic_id'			=> $data['topic_id'],					'is_orphan'			=> 0,					'poster_id'			=> $poster_id,					'attach_comment'	=> $attach_row['attach_comment'],				);				$sql = 'UPDATE ' . ATTACHMENTS_TABLE . ' SET ' . $db->sql_build_array('UPDATE', $attach_sql) . '					WHERE attach_id = ' . $attach_row['attach_id'] . '						AND is_orphan = 1						AND poster_id = ' . $user->data['user_id'];				$db->sql_query($sql);			}		}		if ($space_taken && $files_added)		{			set_config_count('upload_dir_size', $space_taken, true);			set_config_count('num_files', $files_added, true);		}	}	// we need to update the last forum information	// only applicable if the topic is not global and it is approved	// we also check to make sure we are not dealing with globaling the latest topic (pretty rare but still needs to be checked)	if ($topic_type != POST_GLOBAL && !$make_global && ($post_approved || !$data['post_approved']))	{		// the last post makes us update the forum table. This can happen if...		// We make a new topic		// We reply to a topic		// We edit the last post in a topic and this post is the latest in the forum (maybe)		// We edit the only post in the topic		// We edit the first post in the topic and all the other posts are not approved		if (($post_mode == 'post' || $post_mode == 'reply') && $post_approved)		{			$sql_data[FORUMS_TABLE]['stat'][] = 'forum_last_post_id = ' . $data['post_id'];			$sql_data[FORUMS_TABLE]['stat'][] = "forum_last_post_subject = '" . $db->sql_escape($subject) . "'";			$sql_data[FORUMS_TABLE]['stat'][] = 'forum_last_post_time = ' . $current_time;			$sql_data[FORUMS_TABLE]['stat'][] = 'forum_last_poster_id = ' . (int) $user->data['user_id'];			$sql_data[FORUMS_TABLE]['stat'][] = "forum_last_poster_name = '" . $db->sql_escape((!$user->data['is_registered'] && $username) ? $username : (($user->data['user_id'] != ANONYMOUS) ? $user->data['username'] : '')) . "'";			$sql_data[FORUMS_TABLE]['stat'][] = "forum_last_poster_colour = '" . $db->sql_escape($user->data['user_colour']) . "'";		}		else if ($post_mode == 'edit_last_post' || $post_mode == 'edit_topic' || ($post_mode == 'edit_first_post' && !$data['topic_replies']))		{			// this does not _necessarily_ mean that we must update the info again,			// it just means that we might have to			$sql = 'SELECT forum_last_post_id, forum_last_post_subject				FROM ' . FORUMS_TABLE . '				WHERE forum_id = ' . (int) $data['forum_id'];			$result = $db->sql_query($sql);			$row = $db->sql_fetchrow($result);			$db->sql_freeresult($result);			// this post is the latest post in the forum, better update			if ($row['forum_last_post_id'] == $data['post_id'])			{				// If post approved and subject changed, or poster is anonymous, we need to update the forum_last* rows				if ($post_approved && ($row['forum_last_post_subject'] !== $subject || $data['poster_id'] == ANONYMOUS))				{					// the post's subject changed					if ($row['forum_last_post_subject'] !== $subject)					{						$sql_data[FORUMS_TABLE]['stat'][] = 'forum_last_post_subject = \'' . $db->sql_escape($subject) . '\'';					}					// Update the user name if poster is anonymous... just in case an admin changed it					if ($data['poster_id'] == ANONYMOUS)					{						$sql_data[FORUMS_TABLE]['stat'][] = "forum_last_poster_name = '" . $db->sql_escape($username) . "'";					}				}				else if ($data['post_approved'] !== $post_approved)				{					// we need a fresh change of socks, everything has become invalidated					$sql = 'SELECT MAX(topic_last_post_id) as last_post_id						FROM ' . TOPICS_TABLE . '						WHERE forum_id = ' . (int) $data['forum_id'] . '							AND topic_approved = 1';					$result = $db->sql_query($sql);					$row = $db->sql_fetchrow($result);					$db->sql_freeresult($result);					// any posts left in this forum?					if (!empty($row['last_post_id']))					{						$sql = 'SELECT p.post_id, p.post_subject, p.post_time, p.poster_id, p.post_username, u.user_id, u.username, u.user_colour							FROM ' . POSTS_TABLE . ' p, ' . USERS_TABLE . ' u							WHERE p.poster_id = u.user_id								AND p.post_id = ' . (int) $row['last_post_id'];						$result = $db->sql_query($sql);						$row = $db->sql_fetchrow($result);						$db->sql_freeresult($result);						// salvation, a post is found! jam it into the forums table						$sql_data[FORUMS_TABLE]['stat'][] = 'forum_last_post_id = ' . (int) $row['post_id'];						$sql_data[FORUMS_TABLE]['stat'][] = "forum_last_post_subject = '" . $db->sql_escape($row['post_subject']) . "'";						$sql_data[FORUMS_TABLE]['stat'][] = 'forum_last_post_time = ' . (int) $row['post_time'];						$sql_data[FORUMS_TABLE]['stat'][] = 'forum_last_poster_id = ' . (int) $row['poster_id'];						$sql_data[FORUMS_TABLE]['stat'][] = "forum_last_poster_name = '" . $db->sql_escape(($row['poster_id'] == ANONYMOUS) ? $row['post_username'] : $row['username']) . "'";						$sql_data[FORUMS_TABLE]['stat'][] = "forum_last_poster_colour = '" . $db->sql_escape($row['user_colour']) . "'";					}					else					{						// just our luck, the last topic in the forum has just been turned unapproved...						$sql_data[FORUMS_TABLE]['stat'][] = 'forum_last_post_id = 0';						$sql_data[FORUMS_TABLE]['stat'][] = "forum_last_post_subject = ''";						$sql_data[FORUMS_TABLE]['stat'][] = 'forum_last_post_time = 0';						$sql_data[FORUMS_TABLE]['stat'][] = 'forum_last_poster_id = 0';						$sql_data[FORUMS_TABLE]['stat'][] = "forum_last_poster_name = ''";						$sql_data[FORUMS_TABLE]['stat'][] = "forum_last_poster_colour = ''";					}				}			}		}	}	else if ($make_global)	{		// somebody decided to be a party pooper, we must recalculate the whole shebang (maybe)		$sql = 'SELECT forum_last_post_id			FROM ' . FORUMS_TABLE . '			WHERE forum_id = ' . (int) $data['forum_id'];		$result = $db->sql_query($sql);		$forum_row = $db->sql_fetchrow($result);		$db->sql_freeresult($result);		// we made a topic global, go get new data		if ($topic_row['topic_type'] != POST_GLOBAL && $topic_type == POST_GLOBAL && $forum_row['forum_last_post_id'] == $topic_row['topic_last_post_id'])		{			// we need a fresh change of socks, everything has become invalidated			$sql = 'SELECT MAX(topic_last_post_id) as last_post_id				FROM ' . TOPICS_TABLE . '				WHERE forum_id = ' . (int) $data['forum_id'] . '					AND topic_approved = 1';			$result = $db->sql_query($sql);			$row = $db->sql_fetchrow($result);			$db->sql_freeresult($result);			// any posts left in this forum?			if (!empty($row['last_post_id']))			{				$sql = 'SELECT p.post_id, p.post_subject, p.post_time, p.poster_id, p.post_username, u.user_id, u.username, u.user_colour					FROM ' . POSTS_TABLE . ' p, ' . USERS_TABLE . ' u					WHERE p.poster_id = u.user_id						AND p.post_id = ' . (int) $row['last_post_id'];				$result = $db->sql_query($sql);				$row = $db->sql_fetchrow($result);				$db->sql_freeresult($result);				// salvation, a post is found! jam it into the forums table				$sql_data[FORUMS_TABLE]['stat'][] = 'forum_last_post_id = ' . (int) $row['post_id'];				$sql_data[FORUMS_TABLE]['stat'][] = "forum_last_post_subject = '" . $db->sql_escape($row['post_subject']) . "'";				$sql_data[FORUMS_TABLE]['stat'][] = 'forum_last_post_time = ' . (int) $row['post_time'];				$sql_data[FORUMS_TABLE]['stat'][] = 'forum_last_poster_id = ' . (int) $row['poster_id'];				$sql_data[FORUMS_TABLE]['stat'][] = "forum_last_poster_name = '" . $db->sql_escape(($row['poster_id'] == ANONYMOUS) ? $row['post_username'] : $row['username']) . "'";				$sql_data[FORUMS_TABLE]['stat'][] = "forum_last_poster_colour = '" . $db->sql_escape($row['user_colour']) . "'";			}			else			{				// just our luck, the last topic in the forum has just been globalized...				$sql_data[FORUMS_TABLE]['stat'][] = 'forum_last_post_id = 0';				$sql_data[FORUMS_TABLE]['stat'][] = "forum_last_post_subject = ''";				$sql_data[FORUMS_TABLE]['stat'][] = 'forum_last_post_time = 0';				$sql_data[FORUMS_TABLE]['stat'][] = 'forum_last_poster_id = 0';				$sql_data[FORUMS_TABLE]['stat'][] = "forum_last_poster_name = ''";				$sql_data[FORUMS_TABLE]['stat'][] = "forum_last_poster_colour = ''";			}		}		else if ($topic_row['topic_type'] == POST_GLOBAL && $topic_type != POST_GLOBAL && $forum_row['forum_last_post_id'] < $topic_row['topic_last_post_id'])		{			// this post has a higher id, it is newer			$sql = 'SELECT p.post_id, p.post_subject, p.post_time, p.poster_id, p.post_username, u.user_id, u.username, u.user_colour				FROM ' . POSTS_TABLE . ' p, ' . USERS_TABLE . ' u				WHERE p.poster_id = u.user_id					AND p.post_id = ' . (int) $topic_row['topic_last_post_id'];			$result = $db->sql_query($sql);			$row = $db->sql_fetchrow($result);			$db->sql_freeresult($result);			// salvation, a post is found! jam it into the forums table			$sql_data[FORUMS_TABLE]['stat'][] = 'forum_last_post_id = ' . (int) $row['post_id'];			$sql_data[FORUMS_TABLE]['stat'][] = "forum_last_post_subject = '" . $db->sql_escape($row['post_subject']) . "'";			$sql_data[FORUMS_TABLE]['stat'][] = 'forum_last_post_time = ' . (int) $row['post_time'];			$sql_data[FORUMS_TABLE]['stat'][] = 'forum_last_poster_id = ' . (int) $row['poster_id'];			$sql_data[FORUMS_TABLE]['stat'][] = "forum_last_poster_name = '" . $db->sql_escape(($row['poster_id'] == ANONYMOUS) ? $row['post_username'] : $row['username']) . "'";			$sql_data[FORUMS_TABLE]['stat'][] = "forum_last_poster_colour = '" . $db->sql_escape($row['user_colour']) . "'";		}	}	// topic sync time!	// simply, we update if it is a reply or the last post is edited	if ($post_approved)	{		// reply requires the whole thing		if ($post_mode == 'reply')		{			$sql_data[TOPICS_TABLE]['stat'][] = 'topic_last_post_id = ' . (int) $data['post_id'];			$sql_data[TOPICS_TABLE]['stat'][] = 'topic_last_poster_id = ' . (int) $user->data['user_id'];			$sql_data[TOPICS_TABLE]['stat'][] = "topic_last_poster_name = '" . $db->sql_escape((!$user->data['is_registered'] && $username) ? $username : (($user->data['user_id'] != ANONYMOUS) ? $user->data['username'] : '')) . "'";			$sql_data[TOPICS_TABLE]['stat'][] = "topic_last_poster_colour = '" . (($user->data['user_id'] != ANONYMOUS) ? $db->sql_escape($user->data['user_colour']) : '') . "'";			$sql_data[TOPICS_TABLE]['stat'][] = "topic_last_post_subject = '" . $db->sql_escape($subject) . "'";			$sql_data[TOPICS_TABLE]['stat'][] = 'topic_last_post_time = ' . (int) $current_time;		}		else if ($post_mode == 'edit_last_post' || $post_mode == 'edit_topic' || ($post_mode == 'edit_first_post' && !$data['topic_replies']))		{			// only the subject can be changed from edit			$sql_data[TOPICS_TABLE]['stat'][] = "topic_last_post_subject = '" . $db->sql_escape($subject) . "'";			// Maybe not only the subject, but also changing anonymous usernames. ;)			if ($data['poster_id'] == ANONYMOUS)			{				$sql_data[TOPICS_TABLE]['stat'][] = "topic_last_poster_name = '" . $db->sql_escape($username) . "'";			}		}	}	else if (!$data['post_approved'] && ($post_mode == 'edit_last_post' || $post_mode == 'edit_topic' || ($post_mode == 'edit_first_post' && !$data['topic_replies'])))	{		// like having the rug pulled from under us		$sql = 'SELECT MAX(post_id) as last_post_id			FROM ' . POSTS_TABLE . '			WHERE topic_id = ' . (int) $data['topic_id'] . '				AND post_approved = 1';		$result = $db->sql_query($sql);		$row = $db->sql_fetchrow($result);		$db->sql_freeresult($result);		// any posts left in this forum?		if (!empty($row['last_post_id']))		{			$sql = 'SELECT p.post_id, p.post_subject, p.post_time, p.poster_id, p.post_username, u.user_id, u.username, u.user_colour				FROM ' . POSTS_TABLE . ' p, ' . USERS_TABLE . ' u				WHERE p.poster_id = u.user_id					AND p.post_id = ' . (int) $row['last_post_id'];			$result = $db->sql_query($sql);			$row = $db->sql_fetchrow($result);			$db->sql_freeresult($result);			// salvation, a post is found! jam it into the topics table			$sql_data[TOPICS_TABLE]['stat'][] = 'topic_last_post_id = ' . (int) $row['post_id'];			$sql_data[TOPICS_TABLE]['stat'][] = "topic_last_post_subject = '" . $db->sql_escape($row['post_subject']) . "'";			$sql_data[TOPICS_TABLE]['stat'][] = 'topic_last_post_time = ' . (int) $row['post_time'];			$sql_data[TOPICS_TABLE]['stat'][] = 'topic_last_poster_id = ' . (int) $row['poster_id'];			$sql_data[TOPICS_TABLE]['stat'][] = "topic_last_poster_name = '" . $db->sql_escape(($row['poster_id'] == ANONYMOUS) ? $row['post_username'] : $row['username']) . "'";			$sql_data[TOPICS_TABLE]['stat'][] = "topic_last_poster_colour = '" . $db->sql_escape($row['user_colour']) . "'";		}	}	// Update total post count, do not consider moderated posts/topics	if ($post_approval)	{		if ($post_mode == 'post')		{			set_config_count('num_topics', 1, true);			set_config_count('num_posts', 1, true);		}		if ($post_mode == 'reply')		{			set_config_count('num_posts', 1, true);		}	}	// Update forum stats	$where_sql = array(POSTS_TABLE => 'post_id = ' . $data['post_id'], TOPICS_TABLE => 'topic_id = ' . $data['topic_id'], FORUMS_TABLE => 'forum_id = ' . $data['forum_id'], USERS_TABLE => 'user_id = ' . $poster_id);	foreach ($sql_data as $table => $update_ary)	{		if (isset($update_ary['stat']) && implode('', $update_ary['stat']))		{			$sql = "UPDATE $table SET " . implode(', ', $update_ary['stat']) . ' WHERE ' . $where_sql[$table];			$db->sql_query($sql);		}	}	// Delete topic shadows (if any exist). We do not need a shadow topic for an global announcement	if ($make_global)	{		$sql = 'DELETE FROM ' . TOPICS_TABLE . '			WHERE topic_moved_id = ' . $data['topic_id'];		$db->sql_query($sql);	}	// Committing the transaction before updating search index	$db->sql_transaction('commit');	// Delete draft if post was loaded...	$draft_id = request_var('draft_loaded', 0);	if ($draft_id)	{		$sql = 'DELETE FROM ' . DRAFTS_TABLE . "			WHERE draft_id = $draft_id				AND user_id = {$user->data['user_id']}";		$db->sql_query($sql);	}	// Index message contents	if ($update_search_index && $data['enable_indexing'])	{		// Select the search method and do some additional checks to ensure it can actually be utilised		$search_type = basename($config['search_type']);		if (!file_exists($phpbb_root_path . 'includes/search/' . $search_type . '.' . $phpEx))		{			trigger_error('NO_SUCH_SEARCH_MODULE');		}		if (!class_exists($search_type))		{			include("{$phpbb_root_path}includes/search/$search_type.$phpEx");		}		$error = false;		$search = new $search_type($error);		if ($error)		{			trigger_error($error);		}		$search->index($mode, $data['post_id'], $data['message'], $subject, $poster_id, ($topic_type == POST_GLOBAL) ? 0 : $data['forum_id']);	}	// Topic Notification, do not change if moderator is changing other users posts...	if ($user->data['user_id'] == $poster_id)	{		if (!$data['notify_set'] && $data['notify'])		{			$sql = 'INSERT INTO ' . TOPICS_WATCH_TABLE . ' (user_id, topic_id)				VALUES (' . $user->data['user_id'] . ', ' . $data['topic_id'] . ')';			$db->sql_query($sql);		}		else if (($config['email_enable'] || $config['jab_enable']) && $data['notify_set'] && !$data['notify'])		{			$sql = 'DELETE FROM ' . TOPICS_WATCH_TABLE . '				WHERE user_id = ' . $user->data['user_id'] . '					AND topic_id = ' . $data['topic_id'];			$db->sql_query($sql);		}	}	if ($mode == 'post' || $mode == 'reply' || $mode == 'quote')	{		// Mark this topic as posted to		markread('post', $data['forum_id'], $data['topic_id']);	}	// Mark this topic as read	// We do not use post_time here, this is intended (post_time can have a date in the past if editing a message)	markread('topic', (($topic_type == POST_GLOBAL) ? 0 : $data['forum_id']), $data['topic_id'], time());	//	if ($config['load_db_lastread'] && $user->data['is_registered'])	{		$sql = 'SELECT mark_time			FROM ' . FORUMS_TRACK_TABLE . '			WHERE user_id = ' . $user->data['user_id'] . '				AND forum_id = ' . (($topic_type == POST_GLOBAL) ? 0 : $data['forum_id']);		$result = $db->sql_query($sql);		$f_mark_time = (int) $db->sql_fetchfield('mark_time');		$db->sql_freeresult($result);	}	else if ($config['load_anon_lastread'] || $user->data['is_registered'])	{		$f_mark_time = false;	}	if (($config['load_db_lastread'] && $user->data['is_registered']) || $config['load_anon_lastread'] || $user->data['is_registered'])	{		// Update forum info		if ($topic_type == POST_GLOBAL)		{			$sql = 'SELECT MAX(topic_last_post_time) as forum_last_post_time				FROM ' . TOPICS_TABLE . '				WHERE forum_id = 0';		}		else		{			$sql = 'SELECT forum_last_post_time				FROM ' . FORUMS_TABLE . '				WHERE forum_id = ' . $data['forum_id'];		}		$result = $db->sql_query($sql);		$forum_last_post_time = (int) $db->sql_fetchfield('forum_last_post_time');		$db->sql_freeresult($result);		update_forum_tracking_info((($topic_type == POST_GLOBAL) ? 0 : $data['forum_id']), $forum_last_post_time, $f_mark_time, false);	}	// Send Notifications	if (($mode == 'reply' || $mode == 'quote' || $mode == 'post') && $post_approval)	{		user_notification($mode, $subject, $data['topic_title'], $data['forum_name'], $data['forum_id'], $data['topic_id'], $data['post_id']);	}	$params = $add_anchor = '';	if ($post_approval)	{		$params .= '&amp;t=' . $data['topic_id'];		if ($mode != 'post')		{			$params .= '&amp;p=' . $data['post_id'];			$add_anchor = '#p' . $data['post_id'];		}	}	else if ($mode != 'post' && $post_mode != 'edit_first_post' && $post_mode != 'edit_topic')	{		$params .= '&amp;t=' . $data['topic_id'];	}	$url = (!$params) ? "{$phpbb_root_path}viewforum.$phpEx" : "{$phpbb_root_path}viewtopic.$phpEx";	$url = append_sid($url, 'f=' . $data['forum_id'] . $params) . $add_anchor;	return $url;}/*** Handle topic bumping* @param int $forum_id The ID of the forum the topic is being bumped belongs to* @param int $topic_id The ID of the topic is being bumping* @param array $post_data Passes some topic parameters:*				- 'topic_title'*				- 'topic_last_post_id'*				- 'topic_last_poster_id'*				- 'topic_last_post_subject'*				- 'topic_last_poster_name'*				- 'topic_last_poster_colour'* @param int $bump_time The time at which topic was bumped, usually it is a current time as obtained via time(). * @return string An URL to the bumped topic, example: ./viewtopic.php?forum_id=1&amptopic_id=2&ampp=3#p3*/function phpbb_bump_topic($forum_id, $topic_id, $post_data, $bump_time = false){	global $config, $db, $user, $phpEx, $phpbb_root_path;	if ($bump_time === false)	{		$bump_time = time();	}	// Begin bumping	$db->sql_transaction('begin');	// Update the topic's last post post_time	$sql = 'UPDATE ' . POSTS_TABLE . "		SET post_time = $bump_time		WHERE post_id = {$post_data['topic_last_post_id']}			AND topic_id = $topic_id";	$db->sql_query($sql);	// Sync the topic's last post time, the rest of the topic's last post data isn't changed	$sql = 'UPDATE ' . TOPICS_TABLE . "		SET topic_last_post_time = $bump_time,			topic_bumped = 1,			topic_bumper = " . $user->data['user_id'] . "		WHERE topic_id = $topic_id";	$db->sql_query($sql);	// Update the forum's last post info	$sql = 'UPDATE ' . FORUMS_TABLE . "		SET forum_last_post_id = " . $post_data['topic_last_post_id'] . ",			forum_last_poster_id = " . $post_data['topic_last_poster_id'] . ",			forum_last_post_subject = '" . $db->sql_escape($post_data['topic_last_post_subject']) . "',			forum_last_post_time = $bump_time,			forum_last_poster_name = '" . $db->sql_escape($post_data['topic_last_poster_name']) . "',			forum_last_poster_colour = '" . $db->sql_escape($post_data['topic_last_poster_colour']) . "'		WHERE forum_id = $forum_id";	$db->sql_query($sql);	// Update bumper's time of the last posting to prevent flood	$sql = 'UPDATE ' . USERS_TABLE . "		SET user_lastpost_time = $bump_time		WHERE user_id = " . $user->data['user_id'];	$db->sql_query($sql);	$db->sql_transaction('commit');	// Mark this topic as posted to	markread('post', $forum_id, $topic_id, $bump_time);	// Mark this topic as read	markread('topic', $forum_id, $topic_id, $bump_time);	// Update forum tracking info	if ($config['load_db_lastread'] && $user->data['is_registered'])	{		$sql = 'SELECT mark_time			FROM ' . FORUMS_TRACK_TABLE . '			WHERE user_id = ' . $user->data['user_id'] . '				AND forum_id = ' . $forum_id;		$result = $db->sql_query($sql);		$f_mark_time = (int) $db->sql_fetchfield('mark_time');		$db->sql_freeresult($result);	}	else if ($config['load_anon_lastread'] || $user->data['is_registered'])	{		$f_mark_time = false;	}	if (($config['load_db_lastread'] && $user->data['is_registered']) || $config['load_anon_lastread'] || $user->data['is_registered'])	{		// Update forum info		$sql = 'SELECT forum_last_post_time			FROM ' . FORUMS_TABLE . '			WHERE forum_id = ' . $forum_id;		$result = $db->sql_query($sql);		$forum_last_post_time = (int) $db->sql_fetchfield('forum_last_post_time');		$db->sql_freeresult($result);		update_forum_tracking_info($forum_id, $forum_last_post_time, $f_mark_time, false);	}	add_log('mod', $forum_id, $topic_id, 'LOG_BUMP_TOPIC', $post_data['topic_title']);	$url = append_sid("{$phpbb_root_path}viewtopic.$phpEx", "f=$forum_id&amp;t=$topic_id&amp;p={$post_data['topic_last_post_id']}") . "#p{$post_data['topic_last_post_id']}";	return $url;}?>
<?php/**** @package phpBB3* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**/if (php_sapi_name() != 'cli'){	die("This program must be run from the command line.\n");}//// Security message://// This script is potentially dangerous.// Remove or comment the next line (die(".... ) to enable this script.// Do NOT FORGET to either remove this script or disable it after you have used it.//die("Please read the first lines of this script for instructions on how to enable it");set_time_limit(0);error_reporting(E_ALL);define('IN_PHPBB', true);$phpbb_root_path = '../';$phpEx = substr(strrchr(__FILE__, '.'), 1);/*** Let's download some files we need*/download('http://www.unicode.org/Public/UNIDATA/NormalizationTest.txt');download('http://www.unicode.org/Public/UNIDATA/UnicodeData.txt');/*** Those are the tests we run*/$test_suite = array(	/**	* NFC	*   c2 ==  NFC(c1) ==  NFC(c2) ==  NFC(c3)	*   c4 ==  NFC(c4) ==  NFC(c5)	*/	'NFC'	=>	array(		'c2'	=>	array('c1', 'c2', 'c3'),		'c4'	=>	array('c4', 'c5')	),	/**	* NFD	*   c3 ==  NFD(c1) ==  NFD(c2) ==  NFD(c3)	*   c5 ==  NFD(c4) ==  NFD(c5)	*/	'NFD'	=>	array(		'c3'	=>	array('c1', 'c2', 'c3'),		'c5'	=>	array('c4', 'c5')	),	/**	* NFKC	*   c4 == NFKC(c1) == NFKC(c2) == NFKC(c3) == NFKC(c4) == NFKC(c5)	*/	'NFKC'	=>	array(		'c4'	=>	array('c1', 'c2', 'c3', 'c4', 'c5')	),	/**	* NFKD	*   c5 == NFKD(c1) == NFKD(c2) == NFKD(c3) == NFKD(c4) == NFKD(c5)	*/	'NFKD'	=>	array(		'c5'	=>	array('c1', 'c2', 'c3', 'c4', 'c5')	));require_once($phpbb_root_path . 'includes/utf/utf_normalizer.' . $phpEx);$i = $n = 0;$failed = false;$tested_chars = array();$fp = fopen($phpbb_root_path . 'develop/NormalizationTest.txt', 'rb');while (!feof($fp)){	$line = fgets($fp);	++$n;	if ($line[0] == '@')	{		if ($i)		{			echo "done\n";		}		$i = 0;		echo "\n", substr($line, 1), "\n\n";		continue;	}	if (!strpos(' 0123456789ABCDEF', $line[0]))	{		continue;	}	if (++$i % 100 == 0)	{		echo $i, ' ';	}	list($c1, $c2, $c3, $c4, $c5) = explode(';', $line);	if (!strpos($c1, ' '))	{		/**		* We are currently testing a single character, we add it to the list of		* characters we have processed so that we can exclude it when testing		* for invariants		*/		$tested_chars[$c1] = 1;	}	foreach ($test_suite as $form => $serie)	{		foreach ($serie as $expected => $tests)		{			$hex_expected = ${$expected};			$utf_expected = hexseq_to_utf($hex_expected);			foreach ($tests as $test)			{				$utf_result = $utf_expected;				call_user_func(array('utf_normalizer', $form), $utf_result);				if (strcmp($utf_expected, $utf_result))				{					$failed = true;					$hex_result = utf_to_hexseq($utf_result);					echo "\nFAILED $expected == $form($test) ($hex_expected != $hex_result)";				}			}		}		if ($failed)		{			die("\n\nFailed at line $n\n");		}	}}fclose($fp);/*** Test for invariants*/echo "\n\nTesting for invariants...\n\n";$fp = fopen($phpbb_root_path . 'develop/UnicodeData.txt', 'rt');$n = 0;while (!feof($fp)){	if (++$n % 100 == 0)	{		echo $n, ' ';	}	$line = fgets($fp, 1024);	if (!$pos = strpos($line, ';'))	{		continue;	}	$hex_tested = $hex_expected = substr($line, 0, $pos);	if (isset($tested_chars[$hex_tested]))	{		continue;	}	$utf_expected = hex_to_utf($hex_expected);	if ($utf_expected >= UTF8_SURROGATE_FIRST	 && $utf_expected <= UTF8_SURROGATE_LAST)	{		/**		* Surrogates are illegal on their own, we expect the normalizer		* to return a replacement char		*/		$utf_expected = UTF8_REPLACEMENT;		$hex_expected = utf_to_hexseq($utf_expected);	}	foreach (array('nfc', 'nfkc', 'nfd', 'nfkd') as $form)	{		$utf_result = $utf_expected;		utf_normalizer::$form($utf_result);		$hex_result = utf_to_hexseq($utf_result);//		echo "$form($utf_expected) == $utf_result\n";		if (strcmp($utf_expected, $utf_result))		{			$failed = 1;			echo "\nFAILED $hex_expected == $form($hex_tested) ($hex_expected != $hex_result)";		}	}	if ($failed)	{		die("\n\nFailed at line $n\n");	}}fclose($fp);die("\n\nALL TESTS PASSED SUCCESSFULLY\n");/*** Download a file to the develop/ dir** @param	string	$url		URL of the file to download* @return	void*/function download($url){	global $phpbb_root_path;	if (file_exists($phpbb_root_path . 'develop/' . basename($url)))	{		return;	}	echo 'Downloading from ', $url, ' ';	if (!$fpr = fopen($url, 'rb'))	{		die("Can't download from $url\nPlease download it yourself and put it in the develop/ dir, kthxbai");	}	if (!$fpw = fopen($phpbb_root_path . 'develop/' . basename($url), 'wb'))	{		die("Can't open develop/" . basename($url) . " for output... please check your permissions or something");	}	$i = 0;	$chunk = 32768;	$done = '';	while (!feof($fpr))	{		$i += fwrite($fpw, fread($fpr, $chunk));		echo str_repeat("\x08", strlen($done));		$done = ($i >> 10) . ' KiB';		echo $done;	}	fclose($fpr);	fclose($fpw);	echo "\n";}/*** Convert a UTF string to a sequence of codepoints in hexadecimal** @param	string	$utf	UTF string* @return	integer			Unicode codepoints in hex*/function utf_to_hexseq($str){	$pos = 0;	$len = strlen($str);	$ret = array();	while ($pos < $len)	{		$c = $str[$pos];		switch ($c & "\xF0")		{			case "\xC0":			case "\xD0":				$utf_char = substr($str, $pos, 2);				$pos += 2;				break;			case "\xE0":				$utf_char = substr($str, $pos, 3);				$pos += 3;				break;			case "\xF0":				$utf_char = substr($str, $pos, 4);				$pos += 4;				break;			default:				$utf_char = $c;				++$pos;		}		$hex = dechex(utf_to_cp($utf_char));		if (!isset($hex[3]))		{			$hex = substr('000' . $hex, -4);		}		$ret[] = $hex;	}	return strtr(implode(' ', $ret), 'abcdef', 'ABCDEF');}/*** Convert a UTF-8 char to its codepoint** @param	string	$utf_char	UTF-8 char* @return	integer				Unicode codepoint*/function utf_to_cp($utf_char){	switch (strlen($utf_char))	{		case 1:			return ord($utf_char);		case 2:			return ((ord($utf_char[0]) & 0x1F) << 6) | (ord($utf_char[1]) & 0x3F);		case 3:			return ((ord($utf_char[0]) & 0x0F) << 12) | ((ord($utf_char[1]) & 0x3F) << 6) | (ord($utf_char[2]) & 0x3F);		case 4:			return ((ord($utf_char[0]) & 0x07) << 18) | ((ord($utf_char[1]) & 0x3F) << 12) | ((ord($utf_char[2]) & 0x3F) << 6) | (ord($utf_char[3]) & 0x3F);		default:			die('UTF-8 chars can only be 1-4 bytes long');	}}/*** Return a UTF string formed from a sequence of codepoints in hexadecimal** @param	string	$seq		Sequence of codepoints, separated with a space* @return	string				UTF-8 string*/function hexseq_to_utf($seq){	return implode('', array_map('hex_to_utf', explode(' ', $seq)));}/*** Convert a codepoint in hexadecimal to a UTF-8 char** @param	string	$hex		Codepoint, in hexadecimal* @return	string				UTF-8 char*/function hex_to_utf($hex){	return cp_to_utf(hexdec($hex));}/*** Convert a codepoint to a UTF-8 char** @param	integer	$cp			Unicode codepoint* @return	string				UTF-8 string*/function cp_to_utf($cp){	if ($cp > 0xFFFF)	{		return chr(0xF0 | ($cp >> 18)) . chr(0x80 | (($cp >> 12) & 0x3F)) . chr(0x80 | (($cp >> 6) & 0x3F)) . chr(0x80 | ($cp & 0x3F));	}	else if ($cp > 0x7FF)	{		return chr(0xE0 | ($cp >> 12)) . chr(0x80 | (($cp >> 6) & 0x3F)) . chr(0x80 | ($cp & 0x3F));	}	else if ($cp > 0x7F)	{		return chr(0xC0 | ($cp >> 6)) . chr(0x80 | ($cp & 0x3F));	}	else	{		return chr($cp);	}}
<?php/**** @package acp* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//***/define('IN_PHPBB', true);define('ADMIN_START', true);define('NEED_SID', true);// Include files$phpbb_root_path = (defined('PHPBB_ROOT_PATH')) ? PHPBB_ROOT_PATH : './../';$phpEx = substr(strrchr(__FILE__, '.'), 1);require($phpbb_root_path . 'common.' . $phpEx);require($phpbb_root_path . 'includes/functions_admin.' . $phpEx);require($phpbb_root_path . 'includes/functions_module.' . $phpEx);// Start session management$user->session_begin();$auth->acl($user->data);$user->setup('acp/common');// End session management// Have they authenticated (again) as an admin for this session?if (!isset($user->data['session_admin']) || !$user->data['session_admin']){	login_box('', $user->lang['LOGIN_ADMIN_CONFIRM'], $user->lang['LOGIN_ADMIN_SUCCESS'], true, false);}// Is user any type of admin? No, then stop here, each script needs to// check specific permissions but this is a catchallif (!$auth->acl_get('a_')){	trigger_error('NO_ADMIN');}// We define the admin variables now, because the user is now able to use the admin related features...define('IN_ADMIN', true);$phpbb_admin_path = (defined('PHPBB_ADMIN_PATH')) ? PHPBB_ADMIN_PATH : './';// Some oft used variables$safe_mode		= (@ini_get('safe_mode') == '1' || strtolower(@ini_get('safe_mode')) === 'on') ? true : false;$file_uploads	= (@ini_get('file_uploads') == '1' || strtolower(@ini_get('file_uploads')) === 'on') ? true : false;$module_id		= request_var('i', '');$mode			= request_var('mode', '');// Set custom template for admin area$template->set_custom_template($phpbb_admin_path . 'style', 'admin');$template->assign_var('T_TEMPLATE_PATH', $phpbb_admin_path . 'style');// the acp template is never stored in the database$user->theme['template_storedb'] = false;// Instantiate new module$module = new p_master();// Instantiate module system and generate list of available modules$module->list_modules('acp');// Select the active module$module->set_active($module_id, $mode);// Assign data to the template engine for the list of modules// We do this before loading the active module for correct menu display in trigger_error$module->assign_tpl_vars(append_sid("{$phpbb_admin_path}index.$phpEx"));// Load and execute the relevant module$module->load_active();// Generate the pageadm_page_header($module->get_page_title());$template->set_filenames(array(	'body' => $module->get_tpl_name(),));adm_page_footer();/*** Header for acp pages*/function adm_page_header($page_title){	global $config, $db, $user, $template;	global $phpbb_root_path, $phpbb_admin_path, $phpEx, $SID, $_SID;	if (defined('HEADER_INC'))	{		return;	}	define('HEADER_INC', true);	// gzip_compression	if ($config['gzip_compress'])	{		if (@extension_loaded('zlib') && !headers_sent())		{			ob_start('ob_gzhandler');		}	}	$template->assign_vars(array(		'PAGE_TITLE'			=> $page_title,		'USERNAME'				=> $user->data['username'],		'SID'					=> $SID,		'_SID'					=> $_SID,		'SESSION_ID'			=> $user->session_id,		'ROOT_PATH'				=> $phpbb_admin_path,		'U_LOGOUT'				=> append_sid("{$phpbb_root_path}ucp.$phpEx", 'mode=logout'),		'U_ADM_LOGOUT'			=> append_sid("{$phpbb_admin_path}index.$phpEx", 'action=admlogout'),		'U_ADM_INDEX'			=> append_sid("{$phpbb_admin_path}index.$phpEx"),		'U_INDEX'				=> append_sid("{$phpbb_root_path}index.$phpEx"),		'T_IMAGES_PATH'			=> "{$phpbb_root_path}images/",		'T_SMILIES_PATH'		=> "{$phpbb_root_path}{$config['smilies_path']}/",		'T_AVATAR_PATH'			=> "{$phpbb_root_path}{$config['avatar_path']}/",		'T_AVATAR_GALLERY_PATH'	=> "{$phpbb_root_path}{$config['avatar_gallery_path']}/",		'T_ICONS_PATH'			=> "{$phpbb_root_path}{$config['icons_path']}/",		'T_RANKS_PATH'			=> "{$phpbb_root_path}{$config['ranks_path']}/",		'T_UPLOAD_PATH'			=> "{$phpbb_root_path}{$config['upload_path']}/",		'ICON_MOVE_UP'				=> '<img src="' . $phpbb_admin_path . 'images/icon_up.gif" alt="' . $user->lang['MOVE_UP'] . '" title="' . $user->lang['MOVE_UP'] . '" />',		'ICON_MOVE_UP_DISABLED'		=> '<img src="' . $phpbb_admin_path . 'images/icon_up_disabled.gif" alt="' . $user->lang['MOVE_UP'] . '" title="' . $user->lang['MOVE_UP'] . '" />',		'ICON_MOVE_DOWN'			=> '<img src="' . $phpbb_admin_path . 'images/icon_down.gif" alt="' . $user->lang['MOVE_DOWN'] . '" title="' . $user->lang['MOVE_DOWN'] . '" />',		'ICON_MOVE_DOWN_DISABLED'	=> '<img src="' . $phpbb_admin_path . 'images/icon_down_disabled.gif" alt="' . $user->lang['MOVE_DOWN'] . '" title="' . $user->lang['MOVE_DOWN'] . '" />',		'ICON_EDIT'					=> '<img src="' . $phpbb_admin_path . 'images/icon_edit.gif" alt="' . $user->lang['EDIT'] . '" title="' . $user->lang['EDIT'] . '" />',		'ICON_EDIT_DISABLED'		=> '<img src="' . $phpbb_admin_path . 'images/icon_edit_disabled.gif" alt="' . $user->lang['EDIT'] . '" title="' . $user->lang['EDIT'] . '" />',		'ICON_DELETE'				=> '<img src="' . $phpbb_admin_path . 'images/icon_delete.gif" alt="' . $user->lang['DELETE'] . '" title="' . $user->lang['DELETE'] . '" />',		'ICON_DELETE_DISABLED'		=> '<img src="' . $phpbb_admin_path . 'images/icon_delete_disabled.gif" alt="' . $user->lang['DELETE'] . '" title="' . $user->lang['DELETE'] . '" />',		'ICON_SYNC'					=> '<img src="' . $phpbb_admin_path . 'images/icon_sync.gif" alt="' . $user->lang['RESYNC'] . '" title="' . $user->lang['RESYNC'] . '" />',		'ICON_SYNC_DISABLED'		=> '<img src="' . $phpbb_admin_path . 'images/icon_sync_disabled.gif" alt="' . $user->lang['RESYNC'] . '" title="' . $user->lang['RESYNC'] . '" />',		'S_USER_LANG'			=> $user->lang['USER_LANG'],		'S_CONTENT_DIRECTION'	=> $user->lang['DIRECTION'],		'S_CONTENT_ENCODING'	=> 'UTF-8',		'S_CONTENT_FLOW_BEGIN'	=> ($user->lang['DIRECTION'] == 'ltr') ? 'left' : 'right',		'S_CONTENT_FLOW_END'	=> ($user->lang['DIRECTION'] == 'ltr') ? 'right' : 'left',	));	// application/xhtml+xml not used because of IE	header('Content-type: text/html; charset=UTF-8');	header('Cache-Control: private, no-cache="set-cookie"');	header('Expires: 0');	header('Pragma: no-cache');	return;}/*** Page footer for acp pages*/function adm_page_footer($copyright_html = true){	global $db, $config, $template, $user, $auth, $cache;	global $starttime, $phpbb_root_path, $phpbb_admin_path, $phpEx;	// Output page creation time	if (defined('DEBUG'))	{		$mtime = explode(' ', microtime());		$totaltime = $mtime[0] + $mtime[1] - $starttime;		if (!empty($_REQUEST['explain']) && $auth->acl_get('a_') && defined('DEBUG_EXTRA') && method_exists($db, 'sql_report'))		{			$db->sql_report('display');		}		$debug_output = sprintf('Time : %.3fs | ' . $db->sql_num_queries() . ' Queries | GZIP : ' . (($config['gzip_compress']) ? 'On' : 'Off') . (($user->load) ? ' | Load : ' . $user->load : ''), $totaltime);		if ($auth->acl_get('a_') && defined('DEBUG_EXTRA'))		{			if (function_exists('memory_get_usage'))			{				if ($memory_usage = memory_get_usage())				{					global $base_memory_usage;					$memory_usage -= $base_memory_usage;					$memory_usage = get_formatted_filesize($memory_usage);					$debug_output .= ' | Memory Usage: ' . $memory_usage;				}			}			$debug_output .= ' | <a href="' . build_url() . '&amp;explain=1">Explain</a>';		}	}	$template->assign_vars(array(		'DEBUG_OUTPUT'		=> (defined('DEBUG')) ? $debug_output : '',		'TRANSLATION_INFO'	=> (!empty($user->lang['TRANSLATION_INFO'])) ? $user->lang['TRANSLATION_INFO'] : '',		'S_COPYRIGHT_HTML'	=> $copyright_html,		'VERSION'			=> $config['version'])	);	$template->display('body');	garbage_collection();	exit_handler();}/*** Generate back link for acp pages*/function adm_back_link($u_action){	global $user;	return '<br /><br /><a href="' . $u_action . '">&laquo; ' . $user->lang['BACK_TO_PREV'] . '</a>';}/*** Build select field options in acp pages*/function build_select($option_ary, $option_default = false){	global $user;	$html = '';	foreach ($option_ary as $value => $title)	{		$selected = ($option_default !== false && $value == $option_default) ? ' selected="selected"' : '';		$html .= '<option value="' . $value . '"' . $selected . '>' . $user->lang[$title] . '</option>';	}	return $html;}/*** Build radio fields in acp pages*/function h_radio($name, $input_ary, $input_default = false, $id = false, $key = false, $separator = ''){	global $user;	$html = '';	$id_assigned = false;	foreach ($input_ary as $value => $title)	{		$selected = ($input_default !== false && $value == $input_default) ? ' checked="checked"' : '';		$html .= '<label><input type="radio" name="' . $name . '"' . (($id && !$id_assigned) ? ' id="' . $id . '"' : '') . ' value="' . $value . '"' . $selected . (($key) ? ' accesskey="' . $key . '"' : '') . ' class="radio" /> ' . $user->lang[$title] . '</label>' . $separator;		$id_assigned = true;	}	return $html;}/*** Build configuration template for acp configuration pages*/function build_cfg_template($tpl_type, $key, &$new, $config_key, $vars){	global $user, $module;	$tpl = '';	$name = 'config[' . $config_key . ']';	// Make sure there is no notice printed out for non-existent config options (we simply set them)	if (!isset($new[$config_key]))	{		$new[$config_key] = '';	}	switch ($tpl_type[0])	{		case 'text':		case 'password':			$size = (int) $tpl_type[1];			$maxlength = (int) $tpl_type[2];			$tpl = '<input id="' . $key . '" type="' . $tpl_type[0] . '"' . (($size) ? ' size="' . $size . '"' : '') . ' maxlength="' . (($maxlength) ? $maxlength : 255) . '" name="' . $name . '" value="' . $new[$config_key] . '"' . (($tpl_type[0] === 'password') ?  ' autocomplete="off"' : '') . ' />';		break;		case 'dimension':			$size = (int) $tpl_type[1];			$maxlength = (int) $tpl_type[2];			$tpl = '<input id="' . $key . '" type="text"' . (($size) ? ' size="' . $size . '"' : '') . ' maxlength="' . (($maxlength) ? $maxlength : 255) . '" name="config[' . $config_key . '_width]" value="' . $new[$config_key . '_width'] . '" /> x <input type="text"' . (($size) ? ' size="' . $size . '"' : '') . ' maxlength="' . (($maxlength) ? $maxlength : 255) . '" name="config[' . $config_key . '_height]" value="' . $new[$config_key . '_height'] . '" />';		break;		case 'textarea':			$rows = (int) $tpl_type[1];			$cols = (int) $tpl_type[2];			$tpl = '<textarea id="' . $key . '" name="' . $name . '" rows="' . $rows . '" cols="' . $cols . '">' . $new[$config_key] . '</textarea>';		break;		case 'radio':			$key_yes	= ($new[$config_key]) ? ' checked="checked"' : '';			$key_no		= (!$new[$config_key]) ? ' checked="checked"' : '';			$tpl_type_cond = explode('_', $tpl_type[1]);			$type_no = ($tpl_type_cond[0] == 'disabled' || $tpl_type_cond[0] == 'enabled') ? false : true;			$tpl_no = '<label><input type="radio" name="' . $name . '" value="0"' . $key_no . ' class="radio" /> ' . (($type_no) ? $user->lang['NO'] : $user->lang['DISABLED']) . '</label>';			$tpl_yes = '<label><input type="radio" id="' . $key . '" name="' . $name . '" value="1"' . $key_yes . ' class="radio" /> ' . (($type_no) ? $user->lang['YES'] : $user->lang['ENABLED']) . '</label>';			$tpl = ($tpl_type_cond[0] == 'yes' || $tpl_type_cond[0] == 'enabled') ? $tpl_yes . $tpl_no : $tpl_no . $tpl_yes;		break;		case 'select':		case 'custom':			$return = '';			if (isset($vars['method']))			{				$call = array($module->module, $vars['method']);			}			else if (isset($vars['function']))			{				$call = $vars['function'];			}			else			{				break;			}			if (isset($vars['params']))			{				$args = array();				foreach ($vars['params'] as $value)				{					switch ($value)					{						case '{CONFIG_VALUE}':							$value = $new[$config_key];						break;						case '{KEY}':							$value = $key;						break;					}					$args[] = $value;				}			}			else			{				$args = array($new[$config_key], $key);			}			$return = call_user_func_array($call, $args);			if ($tpl_type[0] == 'select')			{				$tpl = '<select id="' . $key . '" name="' . $name . '">' . $return . '</select>';			}			else			{				$tpl = $return;			}		break;		default:		break;	}	if (isset($vars['append']))	{		$tpl .= $vars['append'];	}	return $tpl;}/*** Going through a config array and validate values, writing errors to $error. The validation method  accepts parameters separated by ':' for string and int.* The first parameter defines the type to be used, the second the lower bound and the third the upper bound. Only the type is required.*/function validate_config_vars($config_vars, &$cfg_array, &$error){	global $phpbb_root_path, $user;	$type	= 0;	$min	= 1;	$max	= 2;	foreach ($config_vars as $config_name => $config_definition)	{		if (!isset($cfg_array[$config_name]) || strpos($config_name, 'legend') !== false)		{			continue;		}		if (!isset($config_definition['validate']))		{			continue;		}		$validator = explode(':', $config_definition['validate']);		// Validate a bit. ;) (0 = type, 1 = min, 2= max)		switch ($validator[$type])		{			case 'string':				$length = utf8_strlen($cfg_array[$config_name]);				// the column is a VARCHAR				$validator[$max] = (isset($validator[$max])) ? min(255, $validator[$max]) : 255;				if (isset($validator[$min]) && $length < $validator[$min])				{					$error[] = sprintf($user->lang['SETTING_TOO_SHORT'], $user->lang[$config_definition['lang']], $validator[$min]);				}				else if (isset($validator[$max]) && $length > $validator[2])				{					$error[] = sprintf($user->lang['SETTING_TOO_LONG'], $user->lang[$config_definition['lang']], $validator[$max]);				}			break;			case 'bool':				$cfg_array[$config_name] = ($cfg_array[$config_name]) ? 1 : 0;			break;			case 'int':				$cfg_array[$config_name] = (int) $cfg_array[$config_name];				if (isset($validator[$min]) && $cfg_array[$config_name] < $validator[$min])				{					$error[] = sprintf($user->lang['SETTING_TOO_LOW'], $user->lang[$config_definition['lang']], $validator[$min]);				}				else if (isset($validator[$max]) && $cfg_array[$config_name] > $validator[$max])				{					$error[] = sprintf($user->lang['SETTING_TOO_BIG'], $user->lang[$config_definition['lang']], $validator[$max]);				}				if (strpos($config_name, '_max') !== false)				{					// Min/max pairs of settings should ensure that min <= max					// Replace _max with _min to find the name of the minimum					// corresponding configuration variable					$min_name = str_replace('_max', '_min', $config_name);					if (isset($cfg_array[$min_name]) && is_numeric($cfg_array[$min_name]) && $cfg_array[$config_name] < $cfg_array[$min_name])					{						// A minimum value exists and the maximum value is less than it						$error[] = sprintf($user->lang['SETTING_TOO_LOW'], $user->lang[$config_definition['lang']], (int) $cfg_array[$min_name]);					}				}			break;			// Absolute path			case 'script_path':				if (!$cfg_array[$config_name])				{					break;				}				$destination = str_replace('\\', '/', $cfg_array[$config_name]);				if ($destination !== '/')				{					// Adjust destination path (no trailing slash)					if (substr($destination, -1, 1) == '/')					{						$destination = substr($destination, 0, -1);					}					$destination = str_replace(array('../', './'), '', $destination);					if ($destination[0] != '/')					{						$destination = '/' . $destination;					}				}				$cfg_array[$config_name] = trim($destination);			break;			// Absolute path			case 'lang':				if (!$cfg_array[$config_name])				{					break;				}				$cfg_array[$config_name] = basename($cfg_array[$config_name]);				if (!file_exists($phpbb_root_path . 'language/' . $cfg_array[$config_name] . '/'))				{					$error[] = $user->lang['WRONG_DATA_LANG'];				}			break;			// Relative path (appended $phpbb_root_path)			case 'rpath':			case 'rwpath':				if (!$cfg_array[$config_name])				{					break;				}				$destination = $cfg_array[$config_name];				// Adjust destination path (no trailing slash)				if (substr($destination, -1, 1) == '/' || substr($destination, -1, 1) == '\\')				{					$destination = substr($destination, 0, -1);				}				$destination = str_replace(array('../', '..\\', './', '.\\'), '', $destination);				if ($destination && ($destination[0] == '/' || $destination[0] == "\\"))				{					$destination = '';				}				$cfg_array[$config_name] = trim($destination);			// Path being relative (still prefixed by phpbb_root_path), but with the ability to escape the root dir...			case 'path':			case 'wpath':				if (!$cfg_array[$config_name])				{					break;				}				$cfg_array[$config_name] = trim($cfg_array[$config_name]);				// Make sure no NUL byte is present...				if (strpos($cfg_array[$config_name], "\0") !== false || strpos($cfg_array[$config_name], '%00') !== false)				{					$cfg_array[$config_name] = '';					break;				}				if (!file_exists($phpbb_root_path . $cfg_array[$config_name]))				{					$error[] = sprintf($user->lang['DIRECTORY_DOES_NOT_EXIST'], $cfg_array[$config_name]);				}				if (file_exists($phpbb_root_path . $cfg_array[$config_name]) && !is_dir($phpbb_root_path . $cfg_array[$config_name]))				{					$error[] = sprintf($user->lang['DIRECTORY_NOT_DIR'], $cfg_array[$config_name]);				}				// Check if the path is writable				if ($config_definition['validate'] == 'wpath' || $config_definition['validate'] == 'rwpath')				{					if (file_exists($phpbb_root_path . $cfg_array[$config_name]) && !phpbb_is_writable($phpbb_root_path . $cfg_array[$config_name]))					{						$error[] = sprintf($user->lang['DIRECTORY_NOT_WRITABLE'], $cfg_array[$config_name]);					}				}			break;		}	}	return;}/*** Checks whatever or not a variable is OK for use in the Database* param mixed $value_ary An array of the form array(array('lang' => ..., 'value' => ..., 'column_type' =>))'* param mixed $error The error array*/function validate_range($value_ary, &$error){	global $user;	$column_types = array(		'BOOL'	=> array('php_type' => 'int', 		'min' => 0, 				'max' => 1),		'USINT'	=> array('php_type' => 'int',		'min' => 0, 				'max' => 65535),		'UINT'	=> array('php_type' => 'int', 		'min' => 0, 				'max' => (int) 0x7fffffff),		// Do not use (int) 0x80000000 - it evaluates to different		// values on 32-bit and 64-bit systems.		// Apparently -2147483648 is a float on 32-bit systems,		// despite fitting in an int, thus explicit cast is needed.		'INT'	=> array('php_type' => 'int', 		'min' => (int) -2147483648,	'max' => (int) 0x7fffffff),		'TINT'	=> array('php_type' => 'int',		'min' => -128,				'max' => 127),		'VCHAR'	=> array('php_type' => 'string', 	'min' => 0, 				'max' => 255),	);	foreach ($value_ary as $value)	{		$column = explode(':', $value['column_type']);		$max = $min = 0;		$type = 0;		if (!isset($column_types[$column[0]]))		{			continue;		}		else		{			$type = $column_types[$column[0]];		}		switch ($type['php_type'])		{			case 'string' :				$max = (isset($column[1])) ? min($column[1],$type['max']) : $type['max'];				if (utf8_strlen($value['value']) > $max)				{					$error[] = sprintf($user->lang['SETTING_TOO_LONG'], $user->lang[$value['lang']], $max);				}			break;			case 'int':				$min = (isset($column[1])) ? max($column[1],$type['min']) : $type['min'];				$max = (isset($column[2])) ? min($column[2],$type['max']) : $type['max'];				if ($value['value'] < $min)				{					$error[] = sprintf($user->lang['SETTING_TOO_LOW'], $user->lang[$value['lang']], $min);				}				else if ($value['value'] > $max)				{					$error[] = sprintf($user->lang['SETTING_TOO_BIG'], $user->lang[$value['lang']], $max);				}			break;		}	}}?>
<?php/**** mcp [English]** @package language* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** DO NOT CHANGE*/if (!defined('IN_PHPBB')){	exit;}if (empty($lang) || !is_array($lang)){	$lang = array();}// DEVELOPERS PLEASE NOTE//// All language files should use UTF-8 as their encoding and the files must not contain a BOM.//// Placeholders can now contain order information, e.g. instead of// 'Page %s of %s' you can (and should) write 'Page %1$s of %2$s', this allows// translators to re-order the output of data while ensuring it remains correct//// You do not need this where single placeholders are used, e.g. 'Message %d' is fine// equally where a string contains only two placeholders which are used to wrap text// in a url you again do not need to specify an order e.g., 'Click %sHERE%s' is fine$lang = array_merge($lang, array(	'ACTION'				=> 'Action',	'ACTION_NOTE'			=> 'Action/Note',	'ADD_FEEDBACK'			=> 'Add feedback',	'ADD_FEEDBACK_EXPLAIN'	=> 'If you would like to add a report on this please fill out the following form. Only use plain text; HTML, BBCode, etc. are not permitted.',	'ADD_WARNING'			=> 'Add warning',	'ADD_WARNING_EXPLAIN'	=> 'To send a warning to this user please fill out the following form. Only use plain text; HTML, BBCode, etc. are not permitted.',	'ALL_ENTRIES'			=> 'All entries',	'ALL_NOTES_DELETED'		=> 'Successfully removed all user notes.',	'ALL_REPORTS'			=> 'All reports',	'ALREADY_REPORTED'		=> 'This post has already been reported.',	'ALREADY_REPORTED_PM'	=> 'This private message has already been reported.',	'ALREADY_WARNED'		=> 'A warning has already been issued for this post.',	'APPROVE'				=> 'Approve',	'APPROVE_POST'			=> 'Approve post',	'APPROVE_POST_CONFIRM'	=> 'Are you sure you want to approve this post?',	'APPROVE_POSTS'			=> 'Approve posts',	'APPROVE_POSTS_CONFIRM'	=> 'Are you sure you want to approve the selected posts?',	'CANNOT_MOVE_SAME_FORUM'=> 'You cannot move a topic to the forum its already in.',	'CANNOT_WARN_ANONYMOUS'	=> 'You cannot warn unregistered guest users.',	'CANNOT_WARN_SELF'		=> 'You cannot warn yourself.',	'CAN_LEAVE_BLANK'		=> 'This can be left blank.',	'CHANGE_POSTER'			=> 'Change poster',	'CLOSE_PM_REPORT'		=> 'Close PM report',	'CLOSE_PM_REPORT_CONFIRM'	=> 'Are you sure you want to close the selected PM report?',	'CLOSE_PM_REPORTS'		=> 'Close PM reports',	'CLOSE_PM_REPORTS_CONFIRM'	=> 'Are you sure you want to close the selected PM reports?',	'CLOSE_REPORT'			=> 'Close report',	'CLOSE_REPORT_CONFIRM'	=> 'Are you sure you want to close the selected report?',	'CLOSE_REPORTS'			=> 'Close reports',	'CLOSE_REPORTS_CONFIRM'	=> 'Are you sure you want to close the selected reports?',	'DELETE_PM_REPORT'			=> 'Delete PM report',	'DELETE_PM_REPORT_CONFIRM'	=> 'Are you sure you want to delete the selected PM report?',	'DELETE_PM_REPORTS'			=> 'Delete PM reports',	'DELETE_PM_REPORTS_CONFIRM'	=> 'Are you sure you want to delete the selected PM reports?',	'DELETE_POSTS'				=> 'Delete posts',	'DELETE_POSTS_CONFIRM'		=> 'Are you sure you want to delete these posts?',	'DELETE_POST_CONFIRM'		=> 'Are you sure you want to delete this post?',	'DELETE_REPORT'				=> 'Delete report',	'DELETE_REPORT_CONFIRM'		=> 'Are you sure you want to delete the selected report?',	'DELETE_REPORTS'			=> 'Delete reports',	'DELETE_REPORTS_CONFIRM'	=> 'Are you sure you want to delete the selected reports?',	'DELETE_SHADOW_TOPIC'		=> 'Delete shadow topic',	'DELETE_TOPICS'				=> 'Delete selected topics',	'DELETE_TOPICS_CONFIRM'		=> 'Are you sure you want to delete these topics?',	'DELETE_TOPIC_CONFIRM'		=> 'Are you sure you want to delete this topic?',	'DISAPPROVE'				=> 'Disapprove',	'DISAPPROVE_REASON'			=> 'Reason for disapproval',	'DISAPPROVE_POST'			=> 'Disapprove post',	'DISAPPROVE_POST_CONFIRM'	=> 'Are you sure you want to disapprove this post?',	'DISAPPROVE_POSTS'			=> 'Disapprove posts',	'DISAPPROVE_POSTS_CONFIRM'	=> 'Are you sure you want to disapprove the selected posts?',	'DISPLAY_LOG'				=> 'Display entries from previous',	'DISPLAY_OPTIONS'			=> 'Display options',	'EMPTY_REPORT'					=> 'You must enter a description when selecting this reason.',	'EMPTY_TOPICS_REMOVED_WARNING'	=> 'Please note that one or several topics have been removed from the database because they were or become empty.',	'FEEDBACK'				=> 'Feedback',	'FORK'					=> 'Copy',	'FORK_TOPIC'			=> 'Copy topic',	'FORK_TOPIC_CONFIRM'	=> 'Are you sure you want to copy this topic?',	'FORK_TOPICS'			=> 'Copy selected topics',	'FORK_TOPICS_CONFIRM'	=> 'Are you sure you want to copy the selected topics?',	'FORUM_DESC'			=> 'Description',	'FORUM_NAME'			=> 'Forum name',	'FORUM_NOT_EXIST'		=> 'The forum you selected does not exist.',	'FORUM_NOT_POSTABLE'	=> 'The forum you selected cannot be posted to.',	'FORUM_STATUS'			=> 'Forum status',	'FORUM_STYLE'			=> 'Forum style',	'GLOBAL_ANNOUNCEMENT'	=> 'Global announcement',	'IP_INFO'				=> 'IP address information',	'IPS_POSTED_FROM'		=> 'IP addresses this user has posted from',	'LATEST_LOGS'				=> 'Latest 5 logged actions',	'LATEST_REPORTED'			=> 'Latest 5 reports',	'LATEST_REPORTED_PMS'		=> 'Latest 5 PM reports',	'LATEST_UNAPPROVED'			=> 'Latest 5 posts awaiting approval',	'LATEST_WARNING_TIME'		=> 'Latest warning issued',	'LATEST_WARNINGS'			=> 'Latest 5 warnings',	'LEAVE_SHADOW'				=> 'Leave shadow topic in place',	'LIST_REPORT'				=> '1 report',	'LIST_REPORTS'				=> '%d reports',	'LOCK'						=> 'Lock',	'LOCK_POST_POST'			=> 'Lock post',	'LOCK_POST_POST_CONFIRM'	=> 'Are you sure you want to prevent editing this post?',	'LOCK_POST_POSTS'			=> 'Lock selected posts',	'LOCK_POST_POSTS_CONFIRM'	=> 'Are you sure you want to prevent editing the selected posts?',	'LOCK_TOPIC_CONFIRM'		=> 'Are you sure you want to lock this topic?',	'LOCK_TOPICS'				=> 'Lock selected topics',	'LOCK_TOPICS_CONFIRM'		=> 'Are you sure you want to lock all selected topics?',	'LOGS_CURRENT_TOPIC'		=> 'Currently viewing logs of:',	'LOGIN_EXPLAIN_MCP'			=> 'To moderate this forum you must login.',	'LOGVIEW_VIEWTOPIC'			=> 'View topic',	'LOGVIEW_VIEWLOGS'			=> 'View topic log',	'LOGVIEW_VIEWFORUM'			=> 'View forum',	'LOOKUP_ALL'				=> 'Look up all IPs',	'LOOKUP_IP'					=> 'Look up IP',	'MARKED_NOTES_DELETED'		=> 'Successfully removed all marked user notes.',	'MCP_ADD'						=> 'Add a warning',	'MCP_BAN'					=> 'Banning',	'MCP_BAN_EMAILS'			=> 'Ban e-mails',	'MCP_BAN_IPS'				=> 'Ban IPs',	'MCP_BAN_USERNAMES'			=> 'Ban Usernames',	'MCP_LOGS'						=> 'Moderator logs',	'MCP_LOGS_FRONT'				=> 'Front page',	'MCP_LOGS_FORUM_VIEW'			=> 'Forum logs',	'MCP_LOGS_TOPIC_VIEW'			=> 'Topic logs',	'MCP_MAIN'						=> 'Main',	'MCP_MAIN_FORUM_VIEW'			=> 'View forum',	'MCP_MAIN_FRONT'				=> 'Front page',	'MCP_MAIN_POST_DETAILS'			=> 'Post details',	'MCP_MAIN_TOPIC_VIEW'			=> 'View topic',	'MCP_MAKE_ANNOUNCEMENT'			=> 'Modify to Announcement',	'MCP_MAKE_ANNOUNCEMENT_CONFIRM'	=> 'Are you sure you want to change this topic to an Announcement?',	'MCP_MAKE_ANNOUNCEMENTS'		=> 'Modify to Announcements',	'MCP_MAKE_ANNOUNCEMENTS_CONFIRM'=> 'Are you sure you want to change the selected topics to Announcements?',	'MCP_MAKE_GLOBAL'				=> 'Modify to Global announcement',	'MCP_MAKE_GLOBAL_CONFIRM'		=> 'Are you sure you want to change this topic to a Global announcement?',	'MCP_MAKE_GLOBALS'				=> 'Modify to Global announcements',	'MCP_MAKE_GLOBALS_CONFIRM'		=> 'Are you sure you want to change the selected topics to Global announcements?',	'MCP_MAKE_STICKY'				=> 'Modify to Sticky',	'MCP_MAKE_STICKY_CONFIRM'		=> 'Are you sure you want to change this topic to a Sticky?',	'MCP_MAKE_STICKIES'				=> 'Modify to Stickies',	'MCP_MAKE_STICKIES_CONFIRM'		=> 'Are you sure you want to change the selected topics to Stickies?',	'MCP_MAKE_NORMAL'				=> 'Modify to Standard Topic',	'MCP_MAKE_NORMAL_CONFIRM'		=> 'Are you sure you want to change this topic to a Standard Topic?',	'MCP_MAKE_NORMALS'				=> 'Modify to Standard Topics',	'MCP_MAKE_NORMALS_CONFIRM'		=> 'Are you sure you want to change the selected topics to Standard Topics?',	'MCP_NOTES'						=> 'User notes',	'MCP_NOTES_FRONT'				=> 'Front page',	'MCP_NOTES_USER'				=> 'User details',	'MCP_POST_REPORTS'				=> 'Reports issued on this post',	'MCP_PM_REPORTS'				=> 'Reported PMs',	'MCP_PM_REPORT_DETAILS'			=> 'PM Report details',	'MCP_PM_REPORTS_CLOSED'			=> 'Closed PM reports',	'MCP_PM_REPORTS_CLOSED_EXPLAIN'	=> 'This is a list of all reports about private messages which have previously been resolved.',	'MCP_PM_REPORTS_OPEN'			=> 'Open PM reports',	'MCP_PM_REPORTS_OPEN_EXPLAIN'	=> 'This is a list of all reported private messages which are still to be handled.',	'MCP_REPORTS'					=> 'Reported messages',	'MCP_REPORT_DETAILS'			=> 'Report details',	'MCP_REPORTS_CLOSED'			=> 'Closed reports',	'MCP_REPORTS_CLOSED_EXPLAIN'	=> 'This is a list of all reports about posts which have previously been resolved.',	'MCP_REPORTS_OPEN'				=> 'Open reports',	'MCP_REPORTS_OPEN_EXPLAIN'		=> 'This is a list of all reported posts which are still to be handled.',	'MCP_QUEUE'								=> 'Moderation queue',	'MCP_QUEUE_APPROVE_DETAILS'				=> 'Approve details',	'MCP_QUEUE_UNAPPROVED_POSTS'			=> 'Posts awaiting approval',	'MCP_QUEUE_UNAPPROVED_POSTS_EXPLAIN'	=> 'This is a list of all posts which require approving before they will be visible to users.',	'MCP_QUEUE_UNAPPROVED_TOPICS'			=> 'Topics awaiting approval',	'MCP_QUEUE_UNAPPROVED_TOPICS_EXPLAIN'	=> 'This is a list of all topics which require approving before they will be visible to users.',	'MCP_VIEW_USER'			=> 'View warnings for a specific user',	'MCP_WARN'				=> 'Warnings',	'MCP_WARN_FRONT'		=> 'Front page',	'MCP_WARN_LIST'			=> 'List warnings',	'MCP_WARN_POST'			=> 'Warn for specific post',	'MCP_WARN_USER'			=> 'Warn user',	'MERGE_POSTS_CONFIRM'	=> 'Are you sure you want to move the selected posts?',	'MERGE_TOPIC_EXPLAIN'	=> 'Using the form below you can move selected posts into another topic. The posts will be split from this topic and merged into the other topic. These posts will not be reordered and will appear as if the users posted them to the new topic.<br />Please enter the destination topic id or click on Select topic to search for one.',	'MERGE_TOPIC_ID'		=> 'Destination topic identification number',	'MERGE_TOPICS'			=> 'Merge topics',	'MERGE_TOPICS_CONFIRM'	=> 'Are you sure you want to merge the selected topics?',	'MODERATE_FORUM'		=> 'Moderate forum',	'MODERATE_TOPIC'		=> 'Moderate topic',	'MODERATE_POST'			=> 'Moderate post',	'MOD_OPTIONS'			=> 'Moderator options',	'MORE_INFO'				=> 'Further information',	'MOST_WARNINGS'			=> 'Users with most warnings',	'MOVE_TOPIC_CONFIRM'	=> 'Are you sure you want to move the topic into a new forum?',	'MOVE_TOPICS'			=> 'Move selected topics',	'MOVE_TOPICS_CONFIRM'	=> 'Are you sure you want to move the selected topics into a new forum?',	'NOTIFY_POSTER_APPROVAL'		=> 'Notify poster about approval?',	'NOTIFY_POSTER_DISAPPROVAL'		=> 'Notify poster about disapproval?',	'NOTIFY_USER_WARN'				=> 'Notify user about warning?',	'NOT_MODERATOR'					=> 'You are not a moderator of this forum.',	'NO_DESTINATION_FORUM'			=> 'Please select a forum for destination.',	'NO_DESTINATION_FORUM_FOUND'	=> 'There is no destination forum available.',	'NO_ENTRIES'					=> 'No log entries for this period.',	'NO_FEEDBACK'					=> 'No feedback exists for this user.',	'NO_FINAL_TOPIC_SELECTED'		=> 'You have to select a destination topic for merging posts.',	'NO_MATCHES_FOUND'				=> 'No matches found.',	'NO_POST'						=> 'You have to select a post in order to warn the user for a post.',	'NO_POST_REPORT'				=> 'This post was not reported.',	'NO_POST_SELECTED'				=> 'You must select at least one post to perform this action.',	'NO_REASON_DISAPPROVAL'			=> 'Please give an appropriate reason for disapproval.',	'NO_REPORT'						=> 'No report found',	'NO_REPORTS'					=> 'No reports found',	'NO_REPORT_SELECTED'			=> 'You must select at least one report to perform this action.',	'NO_TOPIC_ICON'					=> 'None',	'NO_TOPIC_SELECTED'				=> 'You must select at least one topic to perform this action.',	'NO_TOPICS_QUEUE'				=> 'There are no topics waiting for approval.',	'ONLY_TOPIC'			=> 'Only topic %s',	'OTHER_USERS'			=> 'Other users posting from this IP',	'PM_REPORT_CLOSED_SUCCESS'	=> 'The selected PM report has been closed successfully.',	'PM_REPORT_DELETED_SUCCESS'	=> 'The selected PM report has been deleted successfully.',	'PM_REPORTED_SUCCESS'		=> 'This private message has been successfully reported.',	'PM_REPORT_TOTAL'			=> 'In total there is <strong>1</strong> PM report to review.',	'PM_REPORTS_CLOSED_SUCCESS'	=> 'The selected PM reports have been closed successfully.',	'PM_REPORTS_DELETED_SUCCESS'=> 'The selected PM reports have been deleted successfully.',	'PM_REPORTS_TOTAL'			=> 'In total there are <strong>%d</strong> PM reports to review.',	'PM_REPORTS_ZERO_TOTAL'		=> 'There are no PM reports to review.',	'PM_REPORT_DETAILS'			=> 'Private message report details',	'POSTER'					=> 'Poster',	'POSTS_APPROVED_SUCCESS'	=> 'The selected posts have been approved.',	'POSTS_DELETED_SUCCESS'		=> 'The selected posts have been successfully removed from the database.',	'POSTS_DISAPPROVED_SUCCESS'	=> 'The selected posts have been disapproved.',	'POSTS_LOCKED_SUCCESS'		=> 'The selected posts have been locked successfully.',	'POSTS_MERGED_SUCCESS'		=> 'The selected posts have been merged.',	'POSTS_UNLOCKED_SUCCESS'	=> 'The selected posts have been unlocked successfully.',	'POSTS_PER_PAGE'			=> 'Posts per page',	'POSTS_PER_PAGE_EXPLAIN'	=> '(Set to 0 to view all posts.)',	'POST_APPROVED_SUCCESS'		=> 'The selected post has been approved.',	'POST_DELETED_SUCCESS'		=> 'The selected post has been successfully removed from the database.',	'POST_DISAPPROVED_SUCCESS'	=> 'The selected post has been disapproved.',	'POST_LOCKED_SUCCESS'		=> 'Post locked successfully.',	'POST_NOT_EXIST'			=> 'The post you requested does not exist.',	'POST_REPORTED_SUCCESS'		=> 'This post has been successfully reported.',	'POST_UNLOCKED_SUCCESS'		=> 'Post unlocked successfully.',	'READ_USERNOTES'			=> 'User notes',	'READ_WARNINGS'				=> 'User warnings',	'REPORTER'					=> 'Reporter',	'REPORTED'					=> 'Reported',	'REPORTED_BY'				=> 'Reported by',	'REPORTED_ON_DATE'			=> 'on',	'REPORTS_CLOSED_SUCCESS'	=> 'The selected reports have been closed successfully.',	'REPORTS_DELETED_SUCCESS'	=> 'The selected reports have been deleted successfully.',	'REPORTS_TOTAL'				=> 'In total there are <strong>%d</strong> reports to review.',	'REPORTS_ZERO_TOTAL'		=> 'There are no reports to review.',	'REPORT_CLOSED'				=> 'This report has already been closed.',	'REPORT_CLOSED_SUCCESS'		=> 'The selected report has been closed successfully.',	'REPORT_DELETED_SUCCESS'	=> 'The selected report has been deleted successfully.',	'REPORT_DETAILS'			=> 'Report details',	'REPORT_MESSAGE'			=> 'Report this message',	'REPORT_MESSAGE_EXPLAIN'	=> 'Use this form to report the selected private message. Reporting should generally be used only if the message breaks forum rules. <strong>Reporting a private message will make its contents visible to all moderators.</strong>',	'REPORT_NOTIFY'				=> 'Notify me',	'REPORT_NOTIFY_EXPLAIN'		=> 'Informs you when your report is dealt with.',	'REPORT_POST_EXPLAIN'		=> 'Use this form to report the selected post to the forum moderators and board administrators. Reporting should generally be used only if the post breaks forum rules.',	'REPORT_REASON'				=> 'Report reason',	'REPORT_TIME'				=> 'Report time',	'REPORT_TOTAL'				=> 'In total there is <strong>1</strong> report to review.',	'RESYNC'					=> 'Resync',	'RETURN_MESSAGE'			=> '%sReturn to the message%s',	'RETURN_NEW_FORUM'			=> '%sGo to the new forum%s',	'RETURN_NEW_TOPIC'			=> '%sGo to the new topic%s',	'RETURN_PM'					=> '%sReturn to the private message%s',	'RETURN_POST'				=> '%sReturn to the post%s',	'RETURN_QUEUE'				=> '%sReturn to the queue%s',	'RETURN_REPORTS'			=> '%sReturn to the reports%s',	'RETURN_TOPIC_SIMPLE'		=> '%sReturn to the topic%s',	'SEARCH_POSTS_BY_USER'				=> 'Search posts by',	'SELECT_ACTION'						=> 'Select desired action',	'SELECT_FORUM_GLOBAL_ANNOUNCEMENT'	=> 'Please select the forum you wish this global announcement to be displayed.',	'SELECT_FORUM_GLOBAL_ANNOUNCEMENTS'	=> 'One or more of the selected topics are global announcements. Please select the forum you wish these to be displayed.',	'SELECT_MERGE'						=> 'Select for merge',	'SELECT_TOPICS_FROM'				=> 'Select topics from',	'SELECT_TOPIC'						=> 'Select topic',	'SELECT_USER'						=> 'Select user',	'SORT_ACTION'						=> 'Log action',	'SORT_DATE'							=> 'Date',	'SORT_IP'							=> 'IP address',	'SORT_WARNINGS'						=> 'Warnings',	'SPLIT_AFTER'						=> 'Split topic from selected post onwards',	'SPLIT_FORUM'						=> 'Forum for new topic',	'SPLIT_POSTS'						=> 'Split selected posts',	'SPLIT_SUBJECT'						=> 'New topic title',	'SPLIT_TOPIC_ALL'					=> 'Split topic from selected posts',	'SPLIT_TOPIC_ALL_CONFIRM'			=> 'Are you sure you want to split this topic?',	'SPLIT_TOPIC_BEYOND'				=> 'Split topic at selected post',	'SPLIT_TOPIC_BEYOND_CONFIRM'		=> 'Are you sure you want to split this topic at the selected post?',	'SPLIT_TOPIC_EXPLAIN'				=> 'Using the form below you can split a topic in two, either by selecting the posts individually or by splitting at a selected post.',	'THIS_PM_IP'				=> 'IP for this private message',	'THIS_POST_IP'				=> 'IP for this post',	'TOPICS_APPROVED_SUCCESS'	=> 'The selected topics have been approved.',	'TOPICS_DELETED_SUCCESS'	=> 'The selected topics have been successfully removed from the database.',	'TOPICS_DISAPPROVED_SUCCESS'=> 'The selected topics have been disapproved.',	'TOPICS_FORKED_SUCCESS'		=> 'The selected topics have been copied successfully.',	'TOPICS_LOCKED_SUCCESS'		=> 'The selected topics have been locked.',	'TOPICS_MOVED_SUCCESS'		=> 'The selected topics have been moved successfully.',	'TOPICS_RESYNC_SUCCESS'		=> 'The selected topics have been resynchronised.',	'TOPICS_TYPE_CHANGED'		=> 'Topic types changed successfully.',	'TOPICS_UNLOCKED_SUCCESS'	=> 'The selected topics have been unlocked.',	'TOPIC_APPROVED_SUCCESS'	=> 'The selected topic has been approved.',	'TOPIC_DELETED_SUCCESS'		=> 'The selected topic has been successfully removed from the database.',	'TOPIC_DISAPPROVED_SUCCESS'	=> 'The selected topic has been disapproved.',	'TOPIC_FORKED_SUCCESS'		=> 'The selected topic has been copied successfully.',	'TOPIC_LOCKED_SUCCESS'		=> 'The selected topic has been locked.',	'TOPIC_MOVED_SUCCESS'		=> 'The selected topic has been moved successfully.',	'TOPIC_NOT_EXIST'			=> 'The topic you selected does not exist.',	'TOPIC_RESYNC_SUCCESS'		=> 'The selected topic has been resynchronised.',	'TOPIC_SPLIT_SUCCESS'		=> 'The selected topic has been split successfully.',	'TOPIC_TIME'				=> 'Topic time',	'TOPIC_TYPE_CHANGED'		=> 'Topic type changed successfully.',	'TOPIC_UNLOCKED_SUCCESS'	=> 'The selected topic has been unlocked.',	'TOTAL_WARNINGS'			=> 'Total Warnings',	'UNAPPROVED_POSTS_TOTAL'		=> 'In total there are <strong>%d</strong> posts waiting for approval.',	'UNAPPROVED_POSTS_ZERO_TOTAL'	=> 'There are no posts waiting for approval.',	'UNAPPROVED_POST_TOTAL'			=> 'In total there is <strong>1</strong> post waiting for approval.',	'UNLOCK'						=> 'Unlock',	'UNLOCK_POST'					=> 'Unlock post',	'UNLOCK_POST_EXPLAIN'			=> 'Allow editing',	'UNLOCK_POST_POST'				=> 'Unlock post',	'UNLOCK_POST_POST_CONFIRM'		=> 'Are you sure you want to allow editing this post?',	'UNLOCK_POST_POSTS'				=> 'Unlock selected posts',	'UNLOCK_POST_POSTS_CONFIRM'		=> 'Are you sure you want to allow editing the selected posts?',	'UNLOCK_TOPIC'					=> 'Unlock topic',	'UNLOCK_TOPIC_CONFIRM'			=> 'Are you sure you want to unlock this topic?',	'UNLOCK_TOPICS'					=> 'Unlock selected topics',	'UNLOCK_TOPICS_CONFIRM'			=> 'Are you sure you want to unlock all selected topics?',	'USER_CANNOT_POST'				=> 'You cannot post in this forum.',	'USER_CANNOT_REPORT'			=> 'You cannot report posts in this forum.',	'USER_FEEDBACK_ADDED'			=> 'User feedback added successfully.',	'USER_WARNING_ADDED'			=> 'User warned successfully.',	'VIEW_DETAILS'			=> 'View details',	'VIEW_PM'				=> 'View private message',	'VIEW_POST'				=> 'View post',	'WARNED_USERS'			=> 'Warned users',	'WARNED_USERS_EXPLAIN'	=> 'This is a list of users with unexpired warnings issued to them.',	'WARNING_PM_BODY'		=> 'The following is a warning which has been issued to you by an administrator or moderator of this site.[quote]%s[/quote]',	'WARNING_PM_SUBJECT'	=> 'Board warning issued',	'WARNING_POST_DEFAULT'	=> 'This is a warning regarding the following post made by you: %s .',	'WARNINGS_ZERO_TOTAL'	=> 'No warnings exist.',	'YOU_SELECTED_TOPIC'	=> 'You selected topic number %d: %s.',	'report_reasons'		=> array(		'TITLE'	=> array(			'WAREZ'		=> 'Warez',			'SPAM'		=> 'Spam',			'OFF_TOPIC'	=> 'Off-topic',			'OTHER'		=> 'Other',		),		'DESCRIPTION' => array(			'WAREZ'		=> 'The message contains links to illegal or pirated software.',			'SPAM'		=> 'The reported message has the only purpose to advertise for a website or another product.',			'OFF_TOPIC'	=> 'The reported message is off topic.',			'OTHER'		=> 'The reported message does not fit into any other category, please use the further information field.',		)	),));?>
<?php/**** @package phpBB3* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @ignore*/if (!defined('IN_PHPBB')){	exit;}/*** Custom Profile Fields* @package phpBB3*/class custom_profile{	var $profile_types = array(FIELD_INT => 'int', FIELD_STRING => 'string', FIELD_TEXT => 'text', FIELD_BOOL => 'bool', FIELD_DROPDOWN => 'dropdown', FIELD_DATE => 'date');	var $profile_cache = array();	var $options_lang = array();	/**	* Assign editable fields to template, mode can be profile (for profile change) or register (for registration)	* Called by ucp_profile and ucp_register	* @access public	*/	function generate_profile_fields($mode, $lang_id)	{		global $db, $template, $auth;		$sql_where = '';		switch ($mode)		{			case 'register':				// If the field is required we show it on the registration page				$sql_where .= ' AND f.field_show_on_reg = 1';			break;			case 'profile':				// Show hidden fields to moderators/admins				if (!$auth->acl_gets('a_', 'm_') && !$auth->acl_getf_global('m_'))				{					$sql_where .= ' AND f.field_show_profile = 1';				}			break;			default:				trigger_error('Wrong profile mode specified', E_USER_ERROR);			break;		}		$sql = 'SELECT l.*, f.*			FROM ' . PROFILE_LANG_TABLE . ' l, ' . PROFILE_FIELDS_TABLE . " f			WHERE f.field_active = 1				$sql_where				AND l.lang_id = $lang_id				AND l.field_id = f.field_id			ORDER BY f.field_order";		$result = $db->sql_query($sql);		while ($row = $db->sql_fetchrow($result))		{			// Return templated field			$tpl_snippet = $this->process_field_row('change', $row);			// Some types are multivalue, we can't give them a field_id as we would not know which to pick			$type = (int) $row['field_type'];			$template->assign_block_vars('profile_fields', array(				'LANG_NAME'		=> $row['lang_name'],				'LANG_EXPLAIN'	=> $row['lang_explain'],				'FIELD'			=> $tpl_snippet,				'FIELD_ID'		=> ($type == FIELD_DATE || ($type == FIELD_BOOL && $row['field_length'] == '1')) ? '' : 'pf_' . $row['field_ident'],				'S_REQUIRED'	=> ($row['field_required']) ? true : false)			);		}		$db->sql_freeresult($result);	}	/**	* Validate entered profile field data	* @access public	*/	function validate_profile_field($field_type, &$field_value, $field_data)	{		switch ($field_type)		{			case FIELD_DATE:				$field_validate = explode('-', $field_value);				$day = (isset($field_validate[0])) ? (int) $field_validate[0] : 0;				$month = (isset($field_validate[1])) ? (int) $field_validate[1] : 0;				$year = (isset($field_validate[2])) ? (int) $field_validate[2] : 0;				if ((!$day || !$month || !$year) && !$field_data['field_required'])				{					return false;				}				if ((!$day || !$month || !$year) && $field_data['field_required'])				{					return 'FIELD_REQUIRED';				}				if ($day < 0 || $day > 31 || $month < 0 || $month > 12 || ($year < 1901 && $year > 0) || $year > gmdate('Y', time()) + 50)				{					return 'FIELD_INVALID_DATE';				}				if (checkdate($month, $day, $year) === false)				{					return 'FIELD_INVALID_DATE';				}			break;			case FIELD_BOOL:				$field_value = (bool) $field_value;							if (!$field_value && $field_data['field_required'])				{					return 'FIELD_REQUIRED';				}			break;			case FIELD_INT:				if (trim($field_value) === '' && !$field_data['field_required'])				{					return false;				}								$field_value = (int) $field_value;				if ($field_value < $field_data['field_minlen'])				{					return 'FIELD_TOO_SMALL';				}				else if ($field_value > $field_data['field_maxlen'])				{					return 'FIELD_TOO_LARGE';				}			break;			case FIELD_DROPDOWN:				$field_value = (int) $field_value;				// retrieve option lang data if necessary				if (!isset($this->options_lang[$field_data['field_id']]) || !isset($this->options_lang[$field_data['field_id']][$field_data['lang_id']]) || !sizeof($this->options_lang[$file_data['field_id']][$field_data['lang_id']]))				{					$this->get_option_lang($field_data['field_id'], $field_data['lang_id'], FIELD_DROPDOWN, false);				}				if (!isset($this->options_lang[$field_data['field_id']][$field_data['lang_id']][$field_value]))				{					return 'FIELD_INVALID_VALUE';				}				if ($field_value == $field_data['field_novalue'] && $field_data['field_required'])				{					return 'FIELD_REQUIRED';				}			break;			case FIELD_STRING:			case FIELD_TEXT:				if (trim($field_value) === '' && !$field_data['field_required'])				{					return false;				}				else if (trim($field_value) === '' && $field_data['field_required'])				{					return 'FIELD_REQUIRED';				}				if ($field_data['field_minlen'] && utf8_strlen($field_value) < $field_data['field_minlen'])				{					return 'FIELD_TOO_SHORT';				}				else if ($field_data['field_maxlen'] && utf8_strlen($field_value) > $field_data['field_maxlen'])				{					return 'FIELD_TOO_LONG';				}				if (!empty($field_data['field_validation']) && $field_data['field_validation'] != '.*')				{					$field_validate = ($field_type == FIELD_STRING) ? $field_value : bbcode_nl2br($field_value);					if (!preg_match('#^' . str_replace('\\\\', '\\', $field_data['field_validation']) . '$#i', $field_validate))					{						return 'FIELD_INVALID_CHARS';					}				}			break;		}		return false;	}	/**	* Build profile cache, used for display	* @access private	*/	function build_cache()	{		global $db, $user, $auth;		$this->profile_cache = array();		// Display hidden/no_view fields for admin/moderator		$sql = 'SELECT l.*, f.*			FROM ' . PROFILE_LANG_TABLE . ' l, ' . PROFILE_FIELDS_TABLE . ' f			WHERE l.lang_id = ' . $user->get_iso_lang_id() . '				AND f.field_active = 1 ' .				((!$auth->acl_gets('a_', 'm_') && !$auth->acl_getf_global('m_')) ? '	AND f.field_hide = 0 ' : '') . '				AND f.field_no_view = 0				AND l.field_id = f.field_id			ORDER BY f.field_order';		$result = $db->sql_query($sql);		while ($row = $db->sql_fetchrow($result))		{			$this->profile_cache[$row['field_ident']] = $row;		}		$db->sql_freeresult($result);	}	/**	* Get language entries for options and store them here for later use	*/	function get_option_lang($field_id, $lang_id, $field_type, $preview)	{		global $db;		if ($preview)		{			$lang_options = (!is_array($this->vars['lang_options'])) ? explode("\n", $this->vars['lang_options']) : $this->vars['lang_options'];			foreach ($lang_options as $num => $var)			{				$this->options_lang[$field_id][$lang_id][($num + 1)] = $var;			}		}		else		{			$sql = 'SELECT option_id, lang_value				FROM ' . PROFILE_FIELDS_LANG_TABLE . "					WHERE field_id = $field_id					AND lang_id = $lang_id					AND field_type = $field_type				ORDER BY option_id";			$result = $db->sql_query($sql);			while ($row = $db->sql_fetchrow($result))			{				$this->options_lang[$field_id][$lang_id][($row['option_id'] + 1)] = $row['lang_value'];			}			$db->sql_freeresult($result);		}	}	/**	* Submit profile field for validation	* @access public	*/	function submit_cp_field($mode, $lang_id, &$cp_data, &$cp_error)	{		global $auth, $db, $user;		$sql_where = '';		switch ($mode)		{			case 'register':				// If the field is required we show it on the registration page				$sql_where .= ' AND f.field_show_on_reg = 1';			break;			case 'profile':				// Show hidden fields to moderators/admins				if (!$auth->acl_gets('a_', 'm_') && !$auth->acl_getf_global('m_'))				{					$sql_where .= ' AND f.field_show_profile = 1';				}			break;			default:				trigger_error('Wrong profile mode specified', E_USER_ERROR);			break;		}		$sql = 'SELECT l.*, f.*			FROM ' . PROFILE_LANG_TABLE . ' l, ' . PROFILE_FIELDS_TABLE . " f			WHERE l.lang_id = $lang_id				AND f.field_active = 1				$sql_where				AND l.field_id = f.field_id			ORDER BY f.field_order";		$result = $db->sql_query($sql);		while ($row = $db->sql_fetchrow($result))		{			$cp_data['pf_' . $row['field_ident']] = $this->get_profile_field($row);			$check_value = $cp_data['pf_' . $row['field_ident']];			if (($cp_result = $this->validate_profile_field($row['field_type'], $check_value, $row)) !== false)			{				// If not and only showing common error messages, use this one				$error = '';				switch ($cp_result)				{					case 'FIELD_INVALID_DATE':					case 'FIELD_INVALID_VALUE':					case 'FIELD_REQUIRED':						$error = sprintf($user->lang[$cp_result], $row['lang_name']);					break;					case 'FIELD_TOO_SHORT':					case 'FIELD_TOO_SMALL':						$error = sprintf($user->lang[$cp_result], $row['lang_name'], $row['field_minlen']);					break;					case 'FIELD_TOO_LONG':					case 'FIELD_TOO_LARGE':						$error = sprintf($user->lang[$cp_result], $row['lang_name'], $row['field_maxlen']);					break;					case 'FIELD_INVALID_CHARS':						switch ($row['field_validation'])						{							case '[0-9]+':								$error = sprintf($user->lang[$cp_result . '_NUMBERS_ONLY'], $row['lang_name']);							break;							case '[\w]+':								$error = sprintf($user->lang[$cp_result . '_ALPHA_ONLY'], $row['lang_name']);							break;							case '[\w_\+\. \-\[\]]+':								$error = sprintf($user->lang[$cp_result . '_SPACERS_ONLY'], $row['lang_name']);							break;						}					break;				}				if ($error != '')				{					$cp_error[] = $error;				}			}		}		$db->sql_freeresult($result);	}	/**	* Update profile field data directly	*/	function update_profile_field_data($user_id, &$cp_data)	{		global $db;		if (!sizeof($cp_data))		{			return;		}		switch ($db->sql_layer)		{			case 'oracle':			case 'firebird':			case 'postgres':				$right_delim = $left_delim = '"';			break;			case 'sqlite':			case 'mssql':			case 'mssql_odbc':			case 'mssqlnative':				$right_delim = ']';				$left_delim = '[';			break;			case 'mysql':			case 'mysql4':			case 'mysqli':				$right_delim = $left_delim = '`';			break;		}		// use new array for the UPDATE; changes in the key do not affect the original array		$cp_data_sql = array();		foreach ($cp_data as $key => $value)		{			// Firebird is case sensitive with delimiter			$cp_data_sql[$left_delim . (($db->sql_layer == 'firebird' || $db->sql_layer == 'oracle') ? strtoupper($key) : $key) . $right_delim] = $value;		}		$sql = 'UPDATE ' . PROFILE_FIELDS_DATA_TABLE . '			SET ' . $db->sql_build_array('UPDATE', $cp_data_sql) . "			WHERE user_id = $user_id";		$db->sql_query($sql);		if (!$db->sql_affectedrows())		{			$cp_data_sql['user_id'] = (int) $user_id;			$db->sql_return_on_error(true);			$sql = 'INSERT INTO ' . PROFILE_FIELDS_DATA_TABLE . ' ' . $db->sql_build_array('INSERT', $cp_data_sql);			$db->sql_query($sql);			$db->sql_return_on_error(false);		}	}	/**	* Assign fields to template, used for viewprofile, viewtopic and memberlist (if load setting is enabled)	* This is directly connected to the user -> mode == grab is to grab the user specific fields, mode == show is for assigning the row to the template	* @access public	*/	function generate_profile_fields_template($mode, $user_id = 0, $profile_row = false)	{		global $db;		if ($mode == 'grab')		{			if (!is_array($user_id))			{				$user_id = array($user_id);			}			if (!sizeof($this->profile_cache))			{				$this->build_cache();			}			if (!sizeof($user_id))			{				return array();			}			$sql = 'SELECT *				FROM ' . PROFILE_FIELDS_DATA_TABLE . '				WHERE ' . $db->sql_in_set('user_id', array_map('intval', $user_id));			$result = $db->sql_query($sql);			$field_data = array();			while ($row = $db->sql_fetchrow($result))			{				$field_data[$row['user_id']] = $row;			}			$db->sql_freeresult($result);			$user_fields = array();			// Go through the fields in correct order			foreach (array_keys($this->profile_cache) as $used_ident)			{				foreach ($field_data as $user_id => $row)				{					$user_fields[$user_id][$used_ident]['value'] = $row['pf_' . $used_ident];					$user_fields[$user_id][$used_ident]['data'] = $this->profile_cache[$used_ident];				}			}			return $user_fields;		}		else if ($mode == 'show')		{			// $profile_row == $user_fields[$row['user_id']];			$tpl_fields = array();			$tpl_fields['row'] = $tpl_fields['blockrow'] = array();			foreach ($profile_row as $ident => $ident_ary)			{				$value = $this->get_profile_value($ident_ary);				if ($value === NULL)				{					continue;				}				$tpl_fields['row'] += array(					'PROFILE_' . strtoupper($ident) . '_VALUE'	=> $value,					'PROFILE_' . strtoupper($ident) . '_TYPE'	=> $ident_ary['data']['field_type'],					'PROFILE_' . strtoupper($ident) . '_NAME'	=> $ident_ary['data']['lang_name'],					'PROFILE_' . strtoupper($ident) . '_EXPLAIN'=> $ident_ary['data']['lang_explain'],					'S_PROFILE_' . strtoupper($ident)			=> true				);				$tpl_fields['blockrow'][] = array(					'PROFILE_FIELD_VALUE'	=> $value,					'PROFILE_FIELD_TYPE'	=> $ident_ary['data']['field_type'],					'PROFILE_FIELD_NAME'	=> $ident_ary['data']['lang_name'],					'PROFILE_FIELD_EXPLAIN'	=> $ident_ary['data']['lang_explain'],					'S_PROFILE_' . strtoupper($ident)		=> true				);			}			return $tpl_fields;		}		else		{			trigger_error('Wrong mode for custom profile', E_USER_ERROR);		}	}	/**	* Get Profile Value for display	*/	function get_profile_value($ident_ary)	{		$value = $ident_ary['value'];		$field_type = $ident_ary['data']['field_type'];		switch ($this->profile_types[$field_type])		{			case 'int':				if ($value === '')				{					return NULL;				}				return (int) $value;			break;			case 'string':			case 'text':				if (!$value)				{					return NULL;				}				$value = make_clickable($value);				$value = censor_text($value);				$value = bbcode_nl2br($value);				return $value;			break;			// case 'datetime':			case 'date':				$date = explode('-', $value);				$day = (isset($date[0])) ? (int) $date[0] : 0;				$month = (isset($date[1])) ? (int) $date[1] : 0;				$year = (isset($date[2])) ? (int) $date[2] : 0;				if (!$day && !$month && !$year)				{					return NULL;				}				else if ($day && $month && $year)				{					global $user;					// Date should display as the same date for every user regardless of timezone, so remove offset					// to compensate for the offset added by user::format_date()					return $user->format_date(gmmktime(0, 0, 0, $month, $day, $year) - ($user->timezone + $user->dst), $user->lang['DATE_FORMAT'], true);				}				return $value;			break;			case 'dropdown':				$field_id = $ident_ary['data']['field_id'];				$lang_id = $ident_ary['data']['lang_id'];				if (!isset($this->options_lang[$field_id][$lang_id]))				{					$this->get_option_lang($field_id, $lang_id, FIELD_DROPDOWN, false);				}				if ($value == $ident_ary['data']['field_novalue'])				{					return NULL;				}				$value = (int) $value;				// User not having a value assigned				if (!isset($this->options_lang[$field_id][$lang_id][$value]))				{					return NULL;				}				return $this->options_lang[$field_id][$lang_id][$value];			break;			case 'bool':				$field_id = $ident_ary['data']['field_id'];				$lang_id = $ident_ary['data']['lang_id'];				if (!isset($this->options_lang[$field_id][$lang_id]))				{					$this->get_option_lang($field_id, $lang_id, FIELD_BOOL, false);				}				if ($ident_ary['data']['field_length'] == 1)				{					return (isset($this->options_lang[$field_id][$lang_id][(int) $value])) ? $this->options_lang[$field_id][$lang_id][(int) $value] : NULL;				}				else if (!$value)				{					return NULL;				}				else				{					return $this->options_lang[$field_id][$lang_id][(int) ($value) + 1];				}			break;			default:				trigger_error('Unknown profile type', E_USER_ERROR);			break;		}	}	/**	* Get field value for registration/profile	* @access private	*/	function get_var($field_validation, &$profile_row, $default_value, $preview)	{		global $user;		$profile_row['field_ident'] = (isset($profile_row['var_name'])) ? $profile_row['var_name'] : 'pf_' . $profile_row['field_ident'];		$user_ident = $profile_row['field_ident'];		// checkbox - only testing for isset		if ($profile_row['field_type'] == FIELD_BOOL && $profile_row['field_length'] == 2)		{			$value = (isset($_REQUEST[$profile_row['field_ident']])) ? true : ((!isset($user->profile_fields[$user_ident]) || $preview) ? $default_value : $user->profile_fields[$user_ident]);		}		else if ($profile_row['field_type'] == FIELD_INT)		{			if (isset($_REQUEST[$profile_row['field_ident']]))			{				$value = ($_REQUEST[$profile_row['field_ident']] === '') ? NULL : request_var($profile_row['field_ident'], $default_value);			}			else			{				if (!$preview && array_key_exists($user_ident, $user->profile_fields) && is_null($user->profile_fields[$user_ident]))				{					$value = NULL;				}				else if (!isset($user->profile_fields[$user_ident]) || $preview)				{					$value = $default_value;				}				else				{					$value = $user->profile_fields[$user_ident];				}			}			return (is_null($value) || $value === '') ? '' : (int) $value;		}		else		{			$value = (isset($_REQUEST[$profile_row['field_ident']])) ? request_var($profile_row['field_ident'], $default_value, true) : ((!isset($user->profile_fields[$user_ident]) || $preview) ? $default_value : $user->profile_fields[$user_ident]);			if (gettype($value) == 'string')			{				$value = utf8_normalize_nfc($value);			}		}		switch ($field_validation)		{			case 'int':				return (int) $value;			break;		}		return $value;	}	/**	* Process int-type	* @access private	*/	function generate_int($profile_row, $preview = false)	{		global $template;		$profile_row['field_value'] = $this->get_var('int', $profile_row, $profile_row['field_default_value'], $preview);		$template->assign_block_vars($this->profile_types[$profile_row['field_type']], array_change_key_case($profile_row, CASE_UPPER));	}	/**	* Process date-type	* @access private	*/	function generate_date($profile_row, $preview = false)	{		global $user, $template;		$profile_row['field_ident'] = (isset($profile_row['var_name'])) ? $profile_row['var_name'] : 'pf_' . $profile_row['field_ident'];		$user_ident = $profile_row['field_ident'];		$now = getdate();		if (!isset($_REQUEST[$profile_row['field_ident'] . '_day']))		{			if ($profile_row['field_default_value'] == 'now')			{				$profile_row['field_default_value'] = sprintf('%2d-%2d-%4d', $now['mday'], $now['mon'], $now['year']);			}			list($day, $month, $year) = explode('-', ((!isset($user->profile_fields[$user_ident]) || $preview) ? $profile_row['field_default_value'] : $user->profile_fields[$user_ident]));		}		else		{			if ($preview && $profile_row['field_default_value'] == 'now')			{				$profile_row['field_default_value'] = sprintf('%2d-%2d-%4d', $now['mday'], $now['mon'], $now['year']);				list($day, $month, $year) = explode('-', ((!isset($user->profile_fields[$user_ident]) || $preview) ? $profile_row['field_default_value'] : $user->profile_fields[$user_ident]));			}			else			{				$day = request_var($profile_row['field_ident'] . '_day', 0);				$month = request_var($profile_row['field_ident'] . '_month', 0);				$year = request_var($profile_row['field_ident'] . '_year', 0);			}		}		$profile_row['s_day_options'] = '<option value="0"' . ((!$day) ? ' selected="selected"' : '') . '>--</option>';		for ($i = 1; $i < 32; $i++)		{			$profile_row['s_day_options'] .= '<option value="' . $i . '"' . (($i == $day) ? ' selected="selected"' : '') . ">$i</option>";		}		$profile_row['s_month_options'] = '<option value="0"' . ((!$month) ? ' selected="selected"' : '') . '>--</option>';		for ($i = 1; $i < 13; $i++)		{			$profile_row['s_month_options'] .= '<option value="' . $i . '"' . (($i == $month) ? ' selected="selected"' : '') . ">$i</option>";		}		$profile_row['s_year_options'] = '<option value="0"' . ((!$year) ? ' selected="selected"' : '') . '>--</option>';		for ($i = $now['year'] - 100; $i <= $now['year'] + 100; $i++)		{			$profile_row['s_year_options'] .= '<option value="' . $i . '"' . (($i == $year) ? ' selected="selected"' : '') . ">$i</option>";		}		unset($now);		$profile_row['field_value'] = 0;		$template->assign_block_vars($this->profile_types[$profile_row['field_type']], array_change_key_case($profile_row, CASE_UPPER));	}	/**	* Process bool-type	* @access private	*/	function generate_bool($profile_row, $preview = false)	{		global $template;		$value = $this->get_var('int', $profile_row, $profile_row['field_default_value'], $preview);		$profile_row['field_value'] = $value;		$template->assign_block_vars($this->profile_types[$profile_row['field_type']], array_change_key_case($profile_row, CASE_UPPER));		if ($profile_row['field_length'] == 1)		{			if (!isset($this->options_lang[$profile_row['field_id']][$profile_row['lang_id']]) || !sizeof($this->options_lang[$profile_row['field_id']][$profile_row['lang_id']]))			{				$this->get_option_lang($profile_row['field_id'], $profile_row['lang_id'], FIELD_BOOL, $preview);			}			foreach ($this->options_lang[$profile_row['field_id']][$profile_row['lang_id']] as $option_id => $option_value)			{				$template->assign_block_vars('bool.options', array(					'OPTION_ID'	=> $option_id,					'CHECKED'	=> ($value == $option_id) ? ' checked="checked"' : '',					'VALUE'		=> $option_value)				);			}		}	}	/**	* Process string-type	* @access private	*/	function generate_string($profile_row, $preview = false)	{		global $template;		$profile_row['field_value'] = $this->get_var('string', $profile_row, $profile_row['lang_default_value'], $preview);		$template->assign_block_vars($this->profile_types[$profile_row['field_type']], array_change_key_case($profile_row, CASE_UPPER));	}	/**	* Process text-type	* @access private	*/	function generate_text($profile_row, $preview = false)	{		global $template;		global $user, $phpEx, $phpbb_root_path;		$field_length = explode('|', $profile_row['field_length']);		$profile_row['field_rows'] = $field_length[0];		$profile_row['field_cols'] = $field_length[1];		$profile_row['field_value'] = $this->get_var('string', $profile_row, $profile_row['lang_default_value'], $preview);		$template->assign_block_vars($this->profile_types[$profile_row['field_type']], array_change_key_case($profile_row, CASE_UPPER));	}	/**	* Process dropdown-type	* @access private	*/	function generate_dropdown($profile_row, $preview = false)	{		global $user, $template;		$value = $this->get_var('int', $profile_row, $profile_row['field_default_value'], $preview);		if (!isset($this->options_lang[$profile_row['field_id']]) || !isset($this->options_lang[$profile_row['field_id']][$profile_row['lang_id']]) || !sizeof($this->options_lang[$profile_row['field_id']][$profile_row['lang_id']]))		{			$this->get_option_lang($profile_row['field_id'], $profile_row['lang_id'], FIELD_DROPDOWN, $preview);		}		$profile_row['field_value'] = $value;		$template->assign_block_vars($this->profile_types[$profile_row['field_type']], array_change_key_case($profile_row, CASE_UPPER));		foreach ($this->options_lang[$profile_row['field_id']][$profile_row['lang_id']] as $option_id => $option_value)		{			$template->assign_block_vars('dropdown.options', array(				'OPTION_ID'	=> $option_id,				'SELECTED'	=> ($value == $option_id) ? ' selected="selected"' : '',				'VALUE'		=> $option_value)			);		}	}	/**	* Return Templated value/field. Possible values for $mode are:	* change == user is able to set/enter profile values; preview == just show the value	* @access private	*/	function process_field_row($mode, $profile_row)	{		global $template;		$preview = ($mode == 'preview') ? true : false;		// set template filename		$template->set_filenames(array(			'cp_body'		=> 'custom_profile_fields.html')		);		// empty previously filled blockvars		foreach ($this->profile_types as $field_case => $field_type)		{			$template->destroy_block_vars($field_type);		}		// Assign template variables		$type_func = 'generate_' . $this->profile_types[$profile_row['field_type']];		$this->$type_func($profile_row, $preview);		// Return templated data		return $template->assign_display('cp_body');	}	/**	* Build Array for user insertion into custom profile fields table	*/	function build_insert_sql_array($cp_data)	{		global $db, $user, $auth;		$sql_not_in = array();		foreach ($cp_data as $key => $null)		{			$sql_not_in[] = (strncmp($key, 'pf_', 3) === 0) ? substr($key, 3) : $key;		}		$sql = 'SELECT f.field_type, f.field_ident, f.field_default_value, l.lang_default_value			FROM ' . PROFILE_LANG_TABLE . ' l, ' . PROFILE_FIELDS_TABLE . ' f			WHERE l.lang_id = ' . $user->get_iso_lang_id() . '				' . ((sizeof($sql_not_in)) ? ' AND ' . $db->sql_in_set('f.field_ident', $sql_not_in, true) : '') . '				AND l.field_id = f.field_id';		$result = $db->sql_query($sql);		while ($row = $db->sql_fetchrow($result))		{			if ($row['field_default_value'] == 'now' && $row['field_type'] == FIELD_DATE)			{				$now = getdate();				$row['field_default_value'] = sprintf('%2d-%2d-%4d', $now['mday'], $now['mon'], $now['year']);			}			else if ($row['field_default_value'] === '' && $row['field_type'] == FIELD_INT)			{				// We cannot insert an empty string into an integer column.				$row['field_default_value'] = NULL;			}			$cp_data['pf_' . $row['field_ident']] = (in_array($row['field_type'], array(FIELD_TEXT, FIELD_STRING))) ? $row['lang_default_value'] : $row['field_default_value'];		}		$db->sql_freeresult($result);		return $cp_data;	}	/**	* Get profile field value on submit	* @access private	*/	function get_profile_field($profile_row)	{		global $phpbb_root_path, $phpEx;		global $config;		$var_name = 'pf_' . $profile_row['field_ident'];		switch ($profile_row['field_type'])		{			case FIELD_DATE:				if (!isset($_REQUEST[$var_name . '_day']))				{					if ($profile_row['field_default_value'] == 'now')					{						$now = getdate();						$profile_row['field_default_value'] = sprintf('%2d-%2d-%4d', $now['mday'], $now['mon'], $now['year']);					}					list($day, $month, $year) = explode('-', $profile_row['field_default_value']);				}				else				{					$day = request_var($var_name . '_day', 0);					$month = request_var($var_name . '_month', 0);					$year = request_var($var_name . '_year', 0);				}				$var = sprintf('%2d-%2d-%4d', $day, $month, $year);			break;			case FIELD_BOOL:				// Checkbox				if ($profile_row['field_length'] == 2)				{					$var = (isset($_REQUEST[$var_name])) ? 1 : 0;				}				else				{					$var = request_var($var_name, (int) $profile_row['field_default_value']);				}			break;			case FIELD_STRING:			case FIELD_TEXT:				$var = utf8_normalize_nfc(request_var($var_name, (string) $profile_row['field_default_value'], true));			break;			case FIELD_INT:				if (isset($_REQUEST[$var_name]) && $_REQUEST[$var_name] === '')				{					$var = NULL;				}				else				{					$var = request_var($var_name, (int) $profile_row['field_default_value']);				}			break;			case FIELD_DROPDOWN:				$var = request_var($var_name, (int) $profile_row['field_default_value']);			break;			default:				$var = request_var($var_name, $profile_row['field_default_value']);			break;		}		return $var;	}}/*** Custom Profile Fields ACP* @package phpBB3*/class custom_profile_admin extends custom_profile{	var $vars = array();	/**	* Return possible validation options	*/	function validate_options()	{		global $user;		$validate_ary = array('CHARS_ANY' => '.*', 'NUMBERS_ONLY' => '[0-9]+', 'ALPHA_ONLY' => '[\w]+', 'ALPHA_SPACERS' => '[\w_\+\. \-\[\]]+');		$validate_options = '';		foreach ($validate_ary as $lang => $value)		{			$selected = ($this->vars['field_validation'] == $value) ? ' selected="selected"' : '';			$validate_options .= '<option value="' . $value . '"' . $selected . '>' . $user->lang[$lang] . '</option>';		}		return $validate_options;	}	/**	* Get string options for second step in ACP	*/	function get_string_options()	{		global $user;		$options = array(			0 => array('TITLE' => $user->lang['FIELD_LENGTH'],		'FIELD' => '<input type="text" name="field_length" size="5" value="' . $this->vars['field_length'] . '" />'),			1 => array('TITLE' => $user->lang['MIN_FIELD_CHARS'],	'FIELD' => '<input type="text" name="field_minlen" size="5" value="' . $this->vars['field_minlen'] . '" />'),			2 => array('TITLE' => $user->lang['MAX_FIELD_CHARS'],	'FIELD' => '<input type="text" name="field_maxlen" size="5" value="' . $this->vars['field_maxlen'] . '" />'),			3 => array('TITLE' => $user->lang['FIELD_VALIDATION'],	'FIELD' => '<select name="field_validation">' . $this->validate_options() . '</select>')		);		return $options;	}	/**	* Get text options for second step in ACP	*/	function get_text_options()	{		global $user;		$options = array(			0 => array('TITLE' => $user->lang['FIELD_LENGTH'],		'FIELD' => '<input name="rows" size="5" value="' . $this->vars['rows'] . '" /> ' . $user->lang['ROWS'] . '</dd><dd><input name="columns" size="5" value="' . $this->vars['columns'] . '" /> ' . $user->lang['COLUMNS'] . ' <input type="hidden" name="field_length" value="' . $this->vars['field_length'] . '" />'),			1 => array('TITLE' => $user->lang['MIN_FIELD_CHARS'],	'FIELD' => '<input type="text" name="field_minlen" size="10" value="' . $this->vars['field_minlen'] . '" />'),			2 => array('TITLE' => $user->lang['MAX_FIELD_CHARS'],	'FIELD' => '<input type="text" name="field_maxlen" size="10" value="' . $this->vars['field_maxlen'] . '" />'),			3 => array('TITLE' => $user->lang['FIELD_VALIDATION'],	'FIELD' => '<select name="field_validation">' . $this->validate_options() . '</select>')		);		return $options;	}	/**	* Get int options for second step in ACP	*/	function get_int_options()	{		global $user;		$options = array(			0 => array('TITLE' => $user->lang['FIELD_LENGTH'],		'FIELD' => '<input type="text" name="field_length" size="5" value="' . $this->vars['field_length'] . '" />'),			1 => array('TITLE' => $user->lang['MIN_FIELD_NUMBER'],	'FIELD' => '<input type="text" name="field_minlen" size="5" value="' . $this->vars['field_minlen'] . '" />'),			2 => array('TITLE' => $user->lang['MAX_FIELD_NUMBER'],	'FIELD' => '<input type="text" name="field_maxlen" size="5" value="' . $this->vars['field_maxlen'] . '" />'),			3 => array('TITLE' => $user->lang['DEFAULT_VALUE'],		'FIELD' => '<input type="post" name="field_default_value" value="' . $this->vars['field_default_value'] . '" />')		);		return $options;	}	/**	* Get bool options for second step in ACP	*/	function get_bool_options()	{		global $user, $config, $lang_defs;		$default_lang_id = $lang_defs['iso'][$config['default_lang']];		$profile_row = array(			'var_name'				=> 'field_default_value',			'field_id'				=> 1,			'lang_name'				=> $this->vars['lang_name'],			'lang_explain'			=> $this->vars['lang_explain'],			'lang_id'				=> $default_lang_id,			'field_default_value'	=> $this->vars['field_default_value'],			'field_ident'			=> 'field_default_value',			'field_type'			=> FIELD_BOOL,			'field_length'			=> $this->vars['field_length'],			'lang_options'			=> $this->vars['lang_options']		);		$options = array(			0 => array('TITLE' => $user->lang['FIELD_TYPE'], 'EXPLAIN' => $user->lang['BOOL_TYPE_EXPLAIN'], 'FIELD' => '<label><input type="radio" class="radio" name="field_length" value="1"' . (($this->vars['field_length'] == 1) ? ' checked="checked"' : '') . ' onchange="document.getElementById(\'add_profile_field\').submit();" /> ' . $user->lang['RADIO_BUTTONS'] . '</label><label><input type="radio" class="radio" name="field_length" value="2"' . (($this->vars['field_length'] == 2) ? ' checked="checked"' : '') . ' onchange="document.getElementById(\'add_profile_field\').submit();" /> ' . $user->lang['CHECKBOX'] . '</label>'),			1 => array('TITLE' => $user->lang['DEFAULT_VALUE'], 'FIELD' => $this->process_field_row('preview', $profile_row))		);		return $options;	}	/**	* Get dropdown options for second step in ACP	*/	function get_dropdown_options()	{		global $user, $config, $lang_defs;		$default_lang_id = $lang_defs['iso'][$config['default_lang']];		$profile_row[0] = array(			'var_name'				=> 'field_default_value',			'field_id'				=> 1,			'lang_name'				=> $this->vars['lang_name'],			'lang_explain'			=> $this->vars['lang_explain'],			'lang_id'				=> $default_lang_id,			'field_default_value'	=> $this->vars['field_default_value'],			'field_ident'			=> 'field_default_value',			'field_type'			=> FIELD_DROPDOWN,			'lang_options'			=> $this->vars['lang_options']		);		$profile_row[1] = $profile_row[0];		$profile_row[1]['var_name'] = 'field_novalue';		$profile_row[1]['field_ident'] = 'field_novalue';		$profile_row[1]['field_default_value']	= $this->vars['field_novalue'];		$options = array(			0 => array('TITLE' => $user->lang['DEFAULT_VALUE'], 'FIELD' => $this->process_field_row('preview', $profile_row[0])),			1 => array('TITLE' => $user->lang['NO_VALUE_OPTION'], 'EXPLAIN' => $user->lang['NO_VALUE_OPTION_EXPLAIN'], 'FIELD' => $this->process_field_row('preview', $profile_row[1]))		);		return $options;	}	/**	* Get date options for second step in ACP	*/	function get_date_options()	{		global $user, $config, $lang_defs;		$default_lang_id = $lang_defs['iso'][$config['default_lang']];		$profile_row = array(			'var_name'				=> 'field_default_value',			'lang_name'				=> $this->vars['lang_name'],			'lang_explain'			=> $this->vars['lang_explain'],			'lang_id'				=> $default_lang_id,			'field_default_value'	=> $this->vars['field_default_value'],			'field_ident'			=> 'field_default_value',			'field_type'			=> FIELD_DATE,			'field_length'			=> $this->vars['field_length']		);		$always_now = request_var('always_now', -1);		if ($always_now == -1)		{			$s_checked = ($this->vars['field_default_value'] == 'now') ? true : false;		}		else		{			$s_checked = ($always_now) ? true : false;		}		$options = array(			0 => array('TITLE' => $user->lang['DEFAULT_VALUE'],	'FIELD' => $this->process_field_row('preview', $profile_row)),			1 => array('TITLE' => $user->lang['ALWAYS_TODAY'],	'FIELD' => '<label><input type="radio" class="radio" name="always_now" value="1"' . (($s_checked) ? ' checked="checked"' : '') . ' onchange="document.getElementById(\'add_profile_field\').submit();" /> ' . $user->lang['YES'] . '</label><label><input type="radio" class="radio" name="always_now" value="0"' . ((!$s_checked) ? ' checked="checked"' : '') . ' onchange="document.getElementById(\'add_profile_field\').submit();" /> ' . $user->lang['NO'] . '</label>'),		);		return $options;	}}?>
<?php/**** @package acp* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @ignore*/if (!defined('IN_PHPBB')){	exit;}/*** @package acp*/class acp_profile{	var $u_action;	var $edit_lang_id;	var $lang_defs;	function main($id, $mode)	{		global $config, $db, $user, $auth, $template, $cache;		global $phpbb_root_path, $phpbb_admin_path, $phpEx, $table_prefix;		include($phpbb_root_path . 'includes/functions_posting.' . $phpEx);		include($phpbb_root_path . 'includes/functions_user.' . $phpEx);		include($phpbb_root_path . 'includes/functions_profile_fields.' . $phpEx);		$user->add_lang(array('ucp', 'acp/profile'));		$this->tpl_name = 'acp_profile';		$this->page_title = 'ACP_CUSTOM_PROFILE_FIELDS';		$action = (isset($_POST['create'])) ? 'create' : request_var('action', '');		$error = array();		$s_hidden_fields = '';		// Define some default values for each field type		$default_values = array(			FIELD_STRING	=> array('field_length' => 10, 'field_minlen' => 0, 'field_maxlen' => 20, 'field_validation' => '.*', 'field_novalue' => '', 'field_default_value' => ''),			FIELD_TEXT		=> array('field_length' => '5|80', 'field_minlen' => 0, 'field_maxlen' => 1000, 'field_validation' => '.*', 'field_novalue' => '', 'field_default_value' => ''),			FIELD_INT		=> array('field_length' => 5, 'field_minlen' => 0, 'field_maxlen' => 100, 'field_validation' => '', 'field_novalue' => 0, 'field_default_value' => 0),			FIELD_DATE		=> array('field_length' => 10, 'field_minlen' => 10, 'field_maxlen' => 10, 'field_validation' => '', 'field_novalue' => ' 0- 0-   0', 'field_default_value' => ' 0- 0-   0'),			FIELD_BOOL		=> array('field_length' => 1, 'field_minlen' => 0, 'field_maxlen' => 0, 'field_validation' => '', 'field_novalue' => 0, 'field_default_value' => 0),			FIELD_DROPDOWN	=> array('field_length' => 0, 'field_minlen' => 0, 'field_maxlen' => 5, 'field_validation' => '', 'field_novalue' => 0, 'field_default_value' => 0),		);		$cp = new custom_profile_admin();		// Build Language array		// Based on this, we decide which elements need to be edited later and which language items are missing		$this->lang_defs = array();		$sql = 'SELECT lang_id, lang_iso			FROM ' . LANG_TABLE . '			ORDER BY lang_english_name';		$result = $db->sql_query($sql);		while ($row = $db->sql_fetchrow($result))		{			// Make some arrays with all available languages			$this->lang_defs['id'][$row['lang_id']] = $row['lang_iso'];			$this->lang_defs['iso'][$row['lang_iso']] = $row['lang_id'];		}		$db->sql_freeresult($result);		$sql = 'SELECT field_id, lang_id			FROM ' . PROFILE_LANG_TABLE . '			ORDER BY lang_id';		$result = $db->sql_query($sql);		while ($row = $db->sql_fetchrow($result))		{			// Which languages are available for each item			$this->lang_defs['entry'][$row['field_id']][] = $row['lang_id'];		}		$db->sql_freeresult($result);		// Have some fields been defined?		if (isset($this->lang_defs['entry']))		{			foreach ($this->lang_defs['entry'] as $field_id => $field_ary)			{				// Fill an array with the languages that are missing for each field				$this->lang_defs['diff'][$field_id] = array_diff(array_values($this->lang_defs['iso']), $field_ary);			}		}		switch ($action)		{			case 'delete':				$field_id = request_var('field_id', 0);				if (!$field_id)				{					trigger_error($user->lang['NO_FIELD_ID'] . adm_back_link($this->u_action), E_USER_WARNING);				}				if (confirm_box(true))				{					$sql = 'SELECT field_ident						FROM ' . PROFILE_FIELDS_TABLE . "						WHERE field_id = $field_id";					$result = $db->sql_query($sql);					$field_ident = (string) $db->sql_fetchfield('field_ident');					$db->sql_freeresult($result);					$db->sql_transaction('begin');					$db->sql_query('DELETE FROM ' . PROFILE_FIELDS_TABLE . " WHERE field_id = $field_id");					$db->sql_query('DELETE FROM ' . PROFILE_FIELDS_LANG_TABLE . " WHERE field_id = $field_id");					$db->sql_query('DELETE FROM ' . PROFILE_LANG_TABLE . " WHERE field_id = $field_id");					switch ($db->sql_layer)					{						case 'sqlite':							$sql = "SELECT sql								FROM sqlite_master								WHERE type = 'table'									AND name = '" . PROFILE_FIELDS_DATA_TABLE . "'								ORDER BY type DESC, name;";							$result = $db->sql_query($sql);							$row = $db->sql_fetchrow($result);							$db->sql_freeresult($result);							// Create a temp table and populate it, destroy the existing one							$db->sql_query(preg_replace('#CREATE\s+TABLE\s+"?' . PROFILE_FIELDS_DATA_TABLE . '"?#i', 'CREATE TEMPORARY TABLE ' . PROFILE_FIELDS_DATA_TABLE . '_temp', $row['sql']));							$db->sql_query('INSERT INTO ' . PROFILE_FIELDS_DATA_TABLE . '_temp SELECT * FROM ' . PROFILE_FIELDS_DATA_TABLE);							$db->sql_query('DROP TABLE ' . PROFILE_FIELDS_DATA_TABLE);							preg_match('#\((.*)\)#s', $row['sql'], $matches);							$new_table_cols = trim($matches[1]);							$old_table_cols = preg_split('/,(?=[\\sa-z])/im', $new_table_cols);							$column_list = array();							foreach ($old_table_cols as $declaration)							{								$entities = preg_split('#\s+#', trim($declaration));								if ($entities[0] == 'PRIMARY')								{									continue;								}								if ($entities[0] !== 'pf_' . $field_ident)								{									$column_list[] = $entities[0];								}							}							$columns = implode(',', $column_list);							$new_table_cols = preg_replace('/' . 'pf_' . $field_ident . '[^,]+,/', '', $new_table_cols);							// create a new table and fill it up. destroy the temp one							$db->sql_query('CREATE TABLE ' . PROFILE_FIELDS_DATA_TABLE . ' (' . $new_table_cols . ');');							$db->sql_query('INSERT INTO ' . PROFILE_FIELDS_DATA_TABLE . ' (' . $columns . ') SELECT ' . $columns . ' FROM ' . PROFILE_FIELDS_DATA_TABLE . '_temp;');							$db->sql_query('DROP TABLE ' . PROFILE_FIELDS_DATA_TABLE . '_temp');						break;						default:							$db->sql_query('ALTER TABLE ' . PROFILE_FIELDS_DATA_TABLE . " DROP COLUMN pf_$field_ident");					}					$order = 0;					$sql = 'SELECT *						FROM ' . PROFILE_FIELDS_TABLE . '						ORDER BY field_order';					$result = $db->sql_query($sql);					while ($row = $db->sql_fetchrow($result))					{						$order++;						if ($row['field_order'] != $order)						{							$sql = 'UPDATE ' . PROFILE_FIELDS_TABLE . "								SET field_order = $order								WHERE field_id = {$row['field_id']}";							$db->sql_query($sql);						}					}					$db->sql_freeresult($result);					$db->sql_transaction('commit');					add_log('admin', 'LOG_PROFILE_FIELD_REMOVED', $field_ident);					trigger_error($user->lang['REMOVED_PROFILE_FIELD'] . adm_back_link($this->u_action));				}				else				{					confirm_box(false, 'DELETE_PROFILE_FIELD', build_hidden_fields(array(						'i'			=> $id,						'mode'		=> $mode,						'action'	=> $action,						'field_id'	=> $field_id,					)));				}			break;			case 'activate':				$field_id = request_var('field_id', 0);				if (!$field_id)				{					trigger_error($user->lang['NO_FIELD_ID'] . adm_back_link($this->u_action), E_USER_WARNING);				}				$sql = 'SELECT lang_id					FROM ' . LANG_TABLE . "					WHERE lang_iso = '" . $db->sql_escape($config['default_lang']) . "'";				$result = $db->sql_query($sql);				$default_lang_id = (int) $db->sql_fetchfield('lang_id');				$db->sql_freeresult($result);				if (!in_array($default_lang_id, $this->lang_defs['entry'][$field_id]))				{					trigger_error($user->lang['DEFAULT_LANGUAGE_NOT_FILLED'] . adm_back_link($this->u_action), E_USER_WARNING);				}				$sql = 'UPDATE ' . PROFILE_FIELDS_TABLE . "					SET field_active = 1					WHERE field_id = $field_id";				$db->sql_query($sql);				$sql = 'SELECT field_ident					FROM ' . PROFILE_FIELDS_TABLE . "					WHERE field_id = $field_id";				$result = $db->sql_query($sql);				$field_ident = (string) $db->sql_fetchfield('field_ident');				$db->sql_freeresult($result);				add_log('admin', 'LOG_PROFILE_FIELD_ACTIVATE', $field_ident);				trigger_error($user->lang['PROFILE_FIELD_ACTIVATED'] . adm_back_link($this->u_action));			break;			case 'deactivate':				$field_id = request_var('field_id', 0);				if (!$field_id)				{					trigger_error($user->lang['NO_FIELD_ID'] . adm_back_link($this->u_action), E_USER_WARNING);				}				$sql = 'UPDATE ' . PROFILE_FIELDS_TABLE . "					SET field_active = 0					WHERE field_id = $field_id";				$db->sql_query($sql);				$sql = 'SELECT field_ident					FROM ' . PROFILE_FIELDS_TABLE . "					WHERE field_id = $field_id";				$result = $db->sql_query($sql);				$field_ident = (string) $db->sql_fetchfield('field_ident');				$db->sql_freeresult($result);				add_log('admin', 'LOG_PROFILE_FIELD_DEACTIVATE', $field_ident);				trigger_error($user->lang['PROFILE_FIELD_DEACTIVATED'] . adm_back_link($this->u_action));			break;			case 'move_up':			case 'move_down':				$field_order = request_var('order', 0);				$order_total = $field_order * 2 + (($action == 'move_up') ? -1 : 1);				$sql = 'UPDATE ' . PROFILE_FIELDS_TABLE . "					SET field_order = $order_total - field_order					WHERE field_order IN ($field_order, " . (($action == 'move_up') ? $field_order - 1 : $field_order + 1) . ')';				$db->sql_query($sql);			break;			case 'create':			case 'edit':				$field_id = request_var('field_id', 0);				$step = request_var('step', 1);				$submit = (isset($_REQUEST['next']) || isset($_REQUEST['prev'])) ? true : false;				$save = (isset($_REQUEST['save'])) ? true : false;				// The language id of default language				$this->edit_lang_id = $this->lang_defs['iso'][$config['default_lang']];				// We are editing... we need to grab basic things				if ($action == 'edit')				{					if (!$field_id)					{						trigger_error($user->lang['NO_FIELD_ID'] . adm_back_link($this->u_action), E_USER_WARNING);					}					$sql = 'SELECT l.*, f.*						FROM ' . PROFILE_LANG_TABLE . ' l, ' . PROFILE_FIELDS_TABLE . ' f						WHERE l.lang_id = ' . $this->edit_lang_id . "							AND f.field_id = $field_id							AND l.field_id = f.field_id";					$result = $db->sql_query($sql);					$field_row = $db->sql_fetchrow($result);					$db->sql_freeresult($result);					if (!$field_row)					{						// Some admin changed the default language?						$sql = 'SELECT l.*, f.*							FROM ' . PROFILE_LANG_TABLE . ' l, ' . PROFILE_FIELDS_TABLE . ' f							WHERE l.lang_id <> ' . $this->edit_lang_id . "							AND f.field_id = $field_id							AND l.field_id = f.field_id";						$result = $db->sql_query($sql);						$field_row = $db->sql_fetchrow($result);						$db->sql_freeresult($result);						if (!$field_row)						{							trigger_error($user->lang['FIELD_NOT_FOUND'] . adm_back_link($this->u_action), E_USER_WARNING);						}						$this->edit_lang_id = $field_row['lang_id'];					}					$field_type = $field_row['field_type'];					// Get language entries					$sql = 'SELECT *						FROM ' . PROFILE_FIELDS_LANG_TABLE . '						WHERE lang_id = ' . $this->edit_lang_id . "							AND field_id = $field_id						ORDER BY option_id ASC";					$result = $db->sql_query($sql);					$lang_options = array();					while ($row = $db->sql_fetchrow($result))					{						$lang_options[$row['option_id']] = $row['lang_value'];					}					$db->sql_freeresult($result);					$s_hidden_fields = '<input type="hidden" name="field_id" value="' . $field_id . '" />';				}				else				{					// We are adding a new field, define basic params					$lang_options = $field_row = array();					$field_type = request_var('field_type', 0);					if (!$field_type)					{						trigger_error($user->lang['NO_FIELD_TYPE'] . adm_back_link($this->u_action), E_USER_WARNING);					}					$field_row = array_merge($default_values[$field_type], array(						'field_ident'		=> str_replace(' ', '_', utf8_clean_string(request_var('field_ident', '', true))),						'field_required'	=> 0,						'field_hide'		=> 0,						'field_show_profile'=> 0,						'field_no_view'		=> 0,						'field_show_on_reg'	=> 0,						'field_show_on_vt'	=> 0,						'lang_name'			=> utf8_normalize_nfc(request_var('field_ident', '', true)),						'lang_explain'		=> '',						'lang_default_value'=> '')					);					$s_hidden_fields = '<input type="hidden" name="field_type" value="' . $field_type . '" />';				}				// $exclude contains the data we gather in each step				$exclude = array(					1	=> array('field_ident', 'lang_name', 'lang_explain', 'field_option_none', 'field_show_on_reg', 'field_show_on_vt', 'field_required', 'field_hide', 'field_show_profile', 'field_no_view'),					2	=> array('field_length', 'field_maxlen', 'field_minlen', 'field_validation', 'field_novalue', 'field_default_value'),					3	=> array('l_lang_name', 'l_lang_explain', 'l_lang_default_value', 'l_lang_options')				);				// Text-based fields require the lang_default_value to be excluded				if ($field_type == FIELD_STRING || $field_type == FIELD_TEXT)				{					$exclude[1][] = 'lang_default_value';				}				// option-specific fields require lang_options to be excluded				if ($field_type == FIELD_BOOL || $field_type == FIELD_DROPDOWN)				{					$exclude[1][] = 'lang_options';				}				$cp->vars['field_ident']		= ($action == 'create' && $step == 1) ? utf8_clean_string(request_var('field_ident', $field_row['field_ident'], true)) : request_var('field_ident', $field_row['field_ident']);				$cp->vars['lang_name']			= utf8_normalize_nfc(request_var('lang_name', $field_row['lang_name'], true));				$cp->vars['lang_explain']		= utf8_normalize_nfc(request_var('lang_explain', $field_row['lang_explain'], true));				$cp->vars['lang_default_value']	= utf8_normalize_nfc(request_var('lang_default_value', $field_row['lang_default_value'], true));				// Visibility Options...				$visibility_ary = array(					'field_required',					'field_show_on_reg',					'field_show_on_vt',					'field_show_profile',					'field_hide',				);				foreach ($visibility_ary as $val)				{					$cp->vars[$val] = ($submit || $save) ? request_var($val, 0) : $field_row[$val];				}				$cp->vars['field_no_view'] = request_var('field_no_view', (int) $field_row['field_no_view']);				// A boolean field expects an array as the lang options				if ($field_type == FIELD_BOOL)				{					$options = utf8_normalize_nfc(request_var('lang_options', array(''), true));				}				else				{					$options = utf8_normalize_nfc(request_var('lang_options', '', true));				}				// If the user has submitted a form with options (i.e. dropdown field)				if ($options)				{					$exploded_options = (is_array($options)) ? $options : explode("\n", $options);					if (sizeof($exploded_options) == sizeof($lang_options) || $action == 'create')					{						// The number of options in the field is equal to the number of options already in the database						// Or we are creating a new dropdown list.						$cp->vars['lang_options'] = $exploded_options;					}					else if ($action == 'edit')					{						// Changing the number of options? (We remove and re-create the option fields)						$cp->vars['lang_options'] = $exploded_options;					}				}				else				{					$cp->vars['lang_options'] = $lang_options;				}				// step 2				foreach ($exclude[2] as $key)				{					$var = utf8_normalize_nfc(request_var($key, $field_row[$key], true));					// Manipulate the intended variables a little bit if needed					if ($field_type == FIELD_DROPDOWN && $key == 'field_maxlen')					{						// Get the number of options if this key is 'field_maxlen'						$var = sizeof(explode("\n", utf8_normalize_nfc(request_var('lang_options', '', true))));					}					else if ($field_type == FIELD_TEXT && $key == 'field_length')					{						if (isset($_REQUEST['rows']))						{							$cp->vars['rows'] = request_var('rows', 0);							$cp->vars['columns'] = request_var('columns', 0);							$var = $cp->vars['rows'] . '|' . $cp->vars['columns'];						}						else						{							$row_col = explode('|', $var);							$cp->vars['rows'] = $row_col[0];							$cp->vars['columns'] = $row_col[1];						}					}					else if ($field_type == FIELD_DATE && $key == 'field_default_value')					{						$always_now = request_var('always_now', -1);						if ($always_now == 1 || ($always_now === -1 && $var == 'now'))						{							$now = getdate();							$cp->vars['field_default_value_day'] = $now['mday'];							$cp->vars['field_default_value_month'] = $now['mon'];							$cp->vars['field_default_value_year'] = $now['year'];							$var = $_POST['field_default_value'] = 'now';						}						else						{							if (isset($_REQUEST['field_default_value_day']))							{								$cp->vars['field_default_value_day'] = request_var('field_default_value_day', 0);								$cp->vars['field_default_value_month'] = request_var('field_default_value_month', 0);								$cp->vars['field_default_value_year'] = request_var('field_default_value_year', 0);								$var = $_POST['field_default_value'] = sprintf('%2d-%2d-%4d', $cp->vars['field_default_value_day'], $cp->vars['field_default_value_month'], $cp->vars['field_default_value_year']);							}							else							{								list($cp->vars['field_default_value_day'], $cp->vars['field_default_value_month'], $cp->vars['field_default_value_year']) = explode('-', $var);							}						}					}					/* else if ($field_type == FIELD_BOOL && $key == 'field_default_value')					{						// Get the number of options if this key is 'field_maxlen'						$var = request_var('field_default_value', 0);					}*/					else if ($field_type == FIELD_INT && $key == 'field_default_value')					{						// Permit an empty string						if ($action == 'create' && request_var('field_default_value', '') === '')						{							$var = '';						}					}					$cp->vars[$key] = $var;				}				// step 3 - all arrays				if ($action == 'edit')				{					// Get language entries					$sql = 'SELECT *						FROM ' . PROFILE_FIELDS_LANG_TABLE . '						WHERE lang_id <> ' . $this->edit_lang_id . "							AND field_id = $field_id						ORDER BY option_id ASC";					$result = $db->sql_query($sql);					$l_lang_options = array();					while ($row = $db->sql_fetchrow($result))					{						$l_lang_options[$row['lang_id']][$row['option_id']] = $row['lang_value'];					}					$db->sql_freeresult($result);					$sql = 'SELECT lang_id, lang_name, lang_explain, lang_default_value						FROM ' . PROFILE_LANG_TABLE . '						WHERE lang_id <> ' . $this->edit_lang_id . "							AND field_id = $field_id						ORDER BY lang_id ASC";					$result = $db->sql_query($sql);					$l_lang_name = $l_lang_explain = $l_lang_default_value = array();					while ($row = $db->sql_fetchrow($result))					{						$l_lang_name[$row['lang_id']] = $row['lang_name'];						$l_lang_explain[$row['lang_id']] = $row['lang_explain'];						$l_lang_default_value[$row['lang_id']] = $row['lang_default_value'];					}					$db->sql_freeresult($result);				}				foreach ($exclude[3] as $key)				{					$cp->vars[$key] = utf8_normalize_nfc(request_var($key, array(0 => ''), true));					if (!$cp->vars[$key] && $action == 'edit')					{						$cp->vars[$key] = $$key;					}					else if ($key == 'l_lang_options' && $field_type == FIELD_BOOL)					{						$cp->vars[$key] = utf8_normalize_nfc(request_var($key, array(0 => array('')), true));					}					else if ($key == 'l_lang_options' && is_array($cp->vars[$key]))					{						foreach ($cp->vars[$key] as $lang_id => $options)						{							$cp->vars[$key][$lang_id] = explode("\n", $options);						}					}				}				// Check for general issues in every step				if ($submit) //  && $step == 1				{					// Check values for step 1					if ($cp->vars['field_ident'] == '')					{						$error[] = $user->lang['EMPTY_FIELD_IDENT'];					}					if (!preg_match('/^[a-z_]+$/', $cp->vars['field_ident']))					{						$error[] = $user->lang['INVALID_CHARS_FIELD_IDENT'];					}					if (strlen($cp->vars['field_ident']) > 17)					{						$error[] = $user->lang['INVALID_FIELD_IDENT_LEN'];					}					if ($cp->vars['lang_name'] == '')					{						$error[] = $user->lang['EMPTY_USER_FIELD_NAME'];					}					if ($field_type == FIELD_DROPDOWN && !sizeof($cp->vars['lang_options']))					{						$error[] = $user->lang['NO_FIELD_ENTRIES'];					}					if ($field_type == FIELD_BOOL && (empty($cp->vars['lang_options'][0]) || empty($cp->vars['lang_options'][1])))					{						$error[] = $user->lang['NO_FIELD_ENTRIES'];					}					// Check for already existing field ident					if ($action != 'edit')					{						$sql = 'SELECT field_ident							FROM ' . PROFILE_FIELDS_TABLE . "							WHERE field_ident = '" . $db->sql_escape($cp->vars['field_ident']) . "'";						$result = $db->sql_query($sql);						$row = $db->sql_fetchrow($result);						$db->sql_freeresult($result);						if ($row)						{							$error[] = $user->lang['FIELD_IDENT_ALREADY_EXIST'];						}					}				}				$step = (isset($_REQUEST['next'])) ? $step + 1 : ((isset($_REQUEST['prev'])) ? $step - 1 : $step);				if (sizeof($error))				{					$step--;					$submit = false;				}				// Build up the specific hidden fields				foreach ($exclude as $num => $key_ary)				{					if ($num == $step)					{						continue;					}					$_new_key_ary = array();					foreach ($key_ary as $key)					{						if ($field_type == FIELD_TEXT && $key == 'field_length' && isset($_REQUEST['rows']))						{							$cp->vars['rows'] = request_var('rows', 0);							$cp->vars['columns'] = request_var('columns', 0);							$_new_key_ary[$key] = $cp->vars['rows'] . '|' . $cp->vars['columns'];						}						else if ($field_type == FIELD_DATE && $key == 'field_default_value')						{							$always_now = request_var('always_now', 0);							if ($always_now)							{								$_new_key_ary[$key] = 'now';							}							else if (isset($_REQUEST['field_default_value_day']))							{								$cp->vars['field_default_value_day'] = request_var('field_default_value_day', 0);								$cp->vars['field_default_value_month'] = request_var('field_default_value_month', 0);								$cp->vars['field_default_value_year'] = request_var('field_default_value_year', 0);								$_new_key_ary[$key]  = sprintf('%2d-%2d-%4d', $cp->vars['field_default_value_day'], $cp->vars['field_default_value_month'], $cp->vars['field_default_value_year']);							}						}						else if ($field_type == FIELD_BOOL && $key == 'l_lang_options' && isset($_REQUEST['l_lang_options']))						{							$_new_key_ary[$key] = utf8_normalize_nfc(request_var($key, array(array('')), true));						}						else						{							if (!isset($_REQUEST[$key]))							{								$var = false;							}							else if ($key == 'field_ident' && isset($cp->vars[$key]))							{								$_new_key_ary[$key]= $cp->vars[$key];							}							else							{								$_new_key_ary[$key] = (is_array($_REQUEST[$key])) ? utf8_normalize_nfc(request_var($key, array(''), true)) : utf8_normalize_nfc(request_var($key, '', true));							}						}					}					$s_hidden_fields .= build_hidden_fields($_new_key_ary);				}				if (!sizeof($error))				{					if ($step == 3 && (sizeof($this->lang_defs['iso']) == 1 || $save))					{						$this->save_profile_field($cp, $field_type, $action);					}					else if ($action == 'edit' && $save)					{						$this->save_profile_field($cp, $field_type, $action);					}				}				$template->assign_vars(array(					'S_EDIT'			=> true,					'S_EDIT_MODE'		=> ($action == 'edit') ? true : false,					'ERROR_MSG'			=> (sizeof($error)) ? implode('<br />', $error) : '',					'L_TITLE'			=> $user->lang['STEP_' . $step . '_TITLE_' . strtoupper($action)],					'L_EXPLAIN'			=> $user->lang['STEP_' . $step . '_EXPLAIN_' . strtoupper($action)],					'U_ACTION'			=> $this->u_action . "&amp;action=$action&amp;step=$step",					'U_BACK'			=> $this->u_action)				);				// Now go through the steps				switch ($step)				{					// Create basic options - only small differences between field types					case 1:						// Build common create options						$template->assign_vars(array(							'S_STEP_ONE'		=> true,							'S_FIELD_REQUIRED'	=> ($cp->vars['field_required']) ? true : false,							'S_SHOW_ON_REG'		=> ($cp->vars['field_show_on_reg']) ? true : false,							'S_SHOW_ON_VT'		=> ($cp->vars['field_show_on_vt']) ? true : false,							'S_FIELD_HIDE'		=> ($cp->vars['field_hide']) ? true : false,							'S_SHOW_PROFILE'	=> ($cp->vars['field_show_profile']) ? true : false,							'S_FIELD_NO_VIEW'	=> ($cp->vars['field_no_view']) ? true : false,							'L_LANG_SPECIFIC'	=> sprintf($user->lang['LANG_SPECIFIC_OPTIONS'], $config['default_lang']),							'FIELD_TYPE'		=> $user->lang['FIELD_' . strtoupper($cp->profile_types[$field_type])],							'FIELD_IDENT'		=> $cp->vars['field_ident'],							'LANG_NAME'			=> $cp->vars['lang_name'],							'LANG_EXPLAIN'		=> $cp->vars['lang_explain'])						);						// String and Text needs to set default values here...						if ($field_type == FIELD_STRING || $field_type == FIELD_TEXT)						{							$template->assign_vars(array(								'S_TEXT'		=> ($field_type == FIELD_TEXT) ? true : false,								'S_STRING'		=> ($field_type == FIELD_STRING) ? true : false,								'L_DEFAULT_VALUE_EXPLAIN'	=> $user->lang[strtoupper($cp->profile_types[$field_type]) . '_DEFAULT_VALUE_EXPLAIN'],								'LANG_DEFAULT_VALUE'		=> $cp->vars['lang_default_value'])							);						}						if ($field_type == FIELD_BOOL || $field_type == FIELD_DROPDOWN)						{							// Initialize these array elements if we are creating a new field							if (!sizeof($cp->vars['lang_options']))							{								if ($field_type == FIELD_BOOL)								{									// No options have been defined for a boolean field.									$cp->vars['lang_options'][0] = '';									$cp->vars['lang_options'][1] = '';								}								else								{									// No options have been defined for the dropdown menu									$cp->vars['lang_options'] = array();								}							}							$template->assign_vars(array(								'S_BOOL'		=> ($field_type == FIELD_BOOL) ? true : false,								'S_DROPDOWN'	=> ($field_type == FIELD_DROPDOWN) ? true : false,								'L_LANG_OPTIONS_EXPLAIN'	=> $user->lang[strtoupper($cp->profile_types[$field_type]) . '_ENTRIES_EXPLAIN'],								'LANG_OPTIONS'				=> ($field_type == FIELD_DROPDOWN) ? implode("\n", $cp->vars['lang_options']) : '',								'FIRST_LANG_OPTION'			=> ($field_type == FIELD_BOOL) ? $cp->vars['lang_options'][0] : '',								'SECOND_LANG_OPTION'		=> ($field_type == FIELD_BOOL) ? $cp->vars['lang_options'][1] : '')							);						}					break;					case 2:						$template->assign_vars(array(							'S_STEP_TWO'		=> true,							'L_NEXT_STEP'			=> (sizeof($this->lang_defs['iso']) == 1) ? $user->lang['SAVE'] : $user->lang['PROFILE_LANG_OPTIONS'])						);						// Build options based on profile type						$function = 'get_' . $cp->profile_types[$field_type] . '_options';						$options = $cp->$function();						foreach ($options as $num => $option_ary)						{							$template->assign_block_vars('option', $option_ary);						}					break;					// Define remaining language variables					case 3:						$template->assign_var('S_STEP_THREE', true);						$options = $this->build_language_options($cp, $field_type, $action);						foreach ($options as $lang_id => $lang_ary)						{							$template->assign_block_vars('options', array(								'LANGUAGE'		=> sprintf($user->lang[(($lang_id == $this->edit_lang_id) ? 'DEFAULT_' : '') . 'ISO_LANGUAGE'], $lang_ary['lang_iso']))							);							foreach ($lang_ary['fields'] as $field_ident => $field_ary)							{								$template->assign_block_vars('options.field', array(									'L_TITLE'		=> $field_ary['TITLE'],									'L_EXPLAIN'		=> (isset($field_ary['EXPLAIN'])) ? $field_ary['EXPLAIN'] : '',									'FIELD'			=> $field_ary['FIELD'])								);							}						}					break;				}				$template->assign_vars(array(					'S_HIDDEN_FIELDS'	=> $s_hidden_fields)				);				return;			break;		}		$sql = 'SELECT *			FROM ' . PROFILE_FIELDS_TABLE . '			ORDER BY field_order';		$result = $db->sql_query($sql);		$s_one_need_edit = false;		while ($row = $db->sql_fetchrow($result))		{			$active_lang = (!$row['field_active']) ? 'ACTIVATE' : 'DEACTIVATE';			$active_value = (!$row['field_active']) ? 'activate' : 'deactivate';			$id = $row['field_id'];			$s_need_edit = (sizeof($this->lang_defs['diff'][$row['field_id']])) ? true : false;			if ($s_need_edit)			{				$s_one_need_edit = true;			}			$template->assign_block_vars('fields', array(				'FIELD_IDENT'		=> $row['field_ident'],				'FIELD_TYPE'		=> $user->lang['FIELD_' . strtoupper($cp->profile_types[$row['field_type']])],				'L_ACTIVATE_DEACTIVATE'		=> $user->lang[$active_lang],				'U_ACTIVATE_DEACTIVATE'		=> $this->u_action . "&amp;action=$active_value&amp;field_id=$id",				'U_EDIT'					=> $this->u_action . "&amp;action=edit&amp;field_id=$id",				'U_TRANSLATE'				=> $this->u_action . "&amp;action=edit&amp;field_id=$id&amp;step=3",				'U_DELETE'					=> $this->u_action . "&amp;action=delete&amp;field_id=$id",				'U_MOVE_UP'					=> $this->u_action . "&amp;action=move_up&amp;order={$row['field_order']}",				'U_MOVE_DOWN'				=> $this->u_action . "&amp;action=move_down&amp;order={$row['field_order']}",				'S_NEED_EDIT'				=> $s_need_edit)			);		}		$db->sql_freeresult($result);		// At least one option field needs editing?		if ($s_one_need_edit)		{			$template->assign_var('S_NEED_EDIT', true);		}		$s_select_type = '';		foreach ($cp->profile_types as $key => $value)		{			$s_select_type .= '<option value="' . $key . '">' . $user->lang['FIELD_' . strtoupper($value)] . '</option>';		}		$template->assign_vars(array(			'U_ACTION'			=> $this->u_action,			'S_TYPE_OPTIONS'	=> $s_select_type)		);	}	/**	* Build all Language specific options	*/	function build_language_options(&$cp, $field_type, $action = 'create')	{		global $user, $config, $db;		$default_lang_id = (!empty($this->edit_lang_id)) ? $this->edit_lang_id : $this->lang_defs['iso'][$config['default_lang']];		$sql = 'SELECT lang_id, lang_iso			FROM ' . LANG_TABLE . '			WHERE lang_id <> ' . (int) $default_lang_id . '			ORDER BY lang_english_name';		$result = $db->sql_query($sql);		$languages = array();		while ($row = $db->sql_fetchrow($result))		{			$languages[$row['lang_id']] = $row['lang_iso'];		}		$db->sql_freeresult($result);		$options = array();		$options['lang_name'] = 'string';		if ($cp->vars['lang_explain'])		{			$options['lang_explain'] = 'text';		}		switch ($field_type)		{			case FIELD_BOOL:				$options['lang_options'] = 'two_options';			break;			case FIELD_DROPDOWN:				$options['lang_options'] = 'optionfield';			break;			case FIELD_TEXT:			case FIELD_STRING:				if (strlen($cp->vars['lang_default_value']))				{					$options['lang_default_value'] = ($field_type == FIELD_STRING) ? 'string' : 'text';				}			break;		}		$lang_options = array();		foreach ($options as $field => $field_type)		{			$lang_options[1]['lang_iso'] = $this->lang_defs['id'][$default_lang_id];			$lang_options[1]['fields'][$field] = array(				'TITLE'		=> $user->lang['CP_' . strtoupper($field)],				'FIELD'		=> '<dd>' . ((is_array($cp->vars[$field])) ? implode('<br />', $cp->vars[$field]) : bbcode_nl2br($cp->vars[$field])) . '</dd>'			);			if (isset($user->lang['CP_' . strtoupper($field) . '_EXPLAIN']))			{				$lang_options[1]['fields'][$field]['EXPLAIN'] = $user->lang['CP_' . strtoupper($field) . '_EXPLAIN'];			}		}		foreach ($languages as $lang_id => $lang_iso)		{			$lang_options[$lang_id]['lang_iso'] = $lang_iso;			foreach ($options as $field => $field_type)			{				$value = ($action == 'create') ? utf8_normalize_nfc(request_var('l_' . $field, array(0 => ''), true)) : $cp->vars['l_' . $field];				if ($field == 'lang_options')				{					$var = (!isset($cp->vars['l_lang_options'][$lang_id]) || !is_array($cp->vars['l_lang_options'][$lang_id])) ? $cp->vars['lang_options'] : $cp->vars['l_lang_options'][$lang_id];					switch ($field_type)					{						case 'two_options':							$lang_options[$lang_id]['fields'][$field] = array(								'TITLE'		=> $user->lang['CP_' . strtoupper($field)],								'FIELD'		=> '											<dd><input class="medium" name="l_' . $field . '[' . $lang_id . '][]" value="' . ((isset($value[$lang_id][0])) ? $value[$lang_id][0] : $var[0]) . '" /> ' . $user->lang['FIRST_OPTION'] . '</dd>											<dd><input class="medium" name="l_' . $field . '[' . $lang_id . '][]" value="' . ((isset($value[$lang_id][1])) ? $value[$lang_id][1] : $var[1]) . '" /> ' . $user->lang['SECOND_OPTION'] . '</dd>'							);						break;						case 'optionfield':							$value = ((isset($value[$lang_id])) ? ((is_array($value[$lang_id])) ?  implode("\n", $value[$lang_id]) : $value[$lang_id]) : implode("\n", $var));							$lang_options[$lang_id]['fields'][$field] = array(								'TITLE'		=> $user->lang['CP_' . strtoupper($field)],								'FIELD'		=> '<dd><textarea name="l_' . $field . '[' . $lang_id . ']" rows="7" cols="80">' . $value . '</textarea></dd>'							);						break;					}					if (isset($user->lang['CP_' . strtoupper($field) . '_EXPLAIN']))					{						$lang_options[$lang_id]['fields'][$field]['EXPLAIN'] = $user->lang['CP_' . strtoupper($field) . '_EXPLAIN'];					}				}				else				{					$var = ($action == 'create' || !is_array($cp->vars[$field])) ? $cp->vars[$field] : $cp->vars[$field][$lang_id];					$lang_options[$lang_id]['fields'][$field] = array(						'TITLE'		=> $user->lang['CP_' . strtoupper($field)],						'FIELD'		=> ($field_type == 'string') ? '<dd><input class="medium" type="text" name="l_' . $field . '[' . $lang_id . ']" value="' . ((isset($value[$lang_id])) ? $value[$lang_id] : $var) . '" /></dd>' : '<dd><textarea name="l_' . $field . '[' . $lang_id . ']" rows="3" cols="80">' . ((isset($value[$lang_id])) ? $value[$lang_id] : $var) . '</textarea></dd>'					);					if (isset($user->lang['CP_' . strtoupper($field) . '_EXPLAIN']))					{						$lang_options[$lang_id]['fields'][$field]['EXPLAIN'] = $user->lang['CP_' . strtoupper($field) . '_EXPLAIN'];					}				}			}		}		return $lang_options;	}	/**	* Save Profile Field	*/	function save_profile_field(&$cp, $field_type, $action = 'create')	{		global $db, $config, $user;		$field_id = request_var('field_id', 0);		// Collect all information, if something is going wrong, abort the operation		$profile_sql = $profile_lang = $empty_lang = $profile_lang_fields = array();		$default_lang_id = (!empty($this->edit_lang_id)) ? $this->edit_lang_id : $this->lang_defs['iso'][$config['default_lang']];		if ($action == 'create')		{			$sql = 'SELECT MAX(field_order) as max_field_order				FROM ' . PROFILE_FIELDS_TABLE;			$result = $db->sql_query($sql);			$new_field_order = (int) $db->sql_fetchfield('max_field_order');			$db->sql_freeresult($result);			$field_ident = $cp->vars['field_ident'];		}		// Save the field		$profile_fields = array(			'field_length'			=> $cp->vars['field_length'],			'field_minlen'			=> $cp->vars['field_minlen'],			'field_maxlen'			=> $cp->vars['field_maxlen'],			'field_novalue'			=> $cp->vars['field_novalue'],			'field_default_value'	=> $cp->vars['field_default_value'],			'field_validation'		=> $cp->vars['field_validation'],			'field_required'		=> $cp->vars['field_required'],			'field_show_on_reg'		=> $cp->vars['field_show_on_reg'],			'field_show_on_vt'		=> $cp->vars['field_show_on_vt'],			'field_hide'			=> $cp->vars['field_hide'],			'field_show_profile'	=> $cp->vars['field_show_profile'],			'field_no_view'			=> $cp->vars['field_no_view']		);		if ($action == 'create')		{			$profile_fields += array(				'field_type'		=> $field_type,				'field_ident'		=> $field_ident,				'field_name'		=> $field_ident,				'field_order'		=> $new_field_order + 1,				'field_active'		=> 1			);			$sql = 'INSERT INTO ' . PROFILE_FIELDS_TABLE . ' ' . $db->sql_build_array('INSERT', $profile_fields);			$db->sql_query($sql);			$field_id = $db->sql_nextid();		}		else		{			$sql = 'UPDATE ' . PROFILE_FIELDS_TABLE . '				SET ' . $db->sql_build_array('UPDATE', $profile_fields) . "				WHERE field_id = $field_id";			$db->sql_query($sql);		}		if ($action == 'create')		{			$field_ident = 'pf_' . $field_ident;			$profile_sql[] = $this->add_field_ident($field_ident, $field_type);		}		$sql_ary = array(			'lang_name'				=> $cp->vars['lang_name'],			'lang_explain'			=> $cp->vars['lang_explain'],			'lang_default_value'	=> $cp->vars['lang_default_value']		);		if ($action == 'create')		{			$sql_ary['field_id'] = $field_id;			$sql_ary['lang_id'] = $default_lang_id;			$profile_sql[] = 'INSERT INTO ' . PROFILE_LANG_TABLE . ' ' . $db->sql_build_array('INSERT', $sql_ary);		}		else		{			$this->update_insert(PROFILE_LANG_TABLE, $sql_ary, array('field_id' => $field_id, 'lang_id' => $default_lang_id));		}		if (is_array($cp->vars['l_lang_name']) && sizeof($cp->vars['l_lang_name']))		{			foreach ($cp->vars['l_lang_name'] as $lang_id => $data)			{				if (($cp->vars['lang_name'] != '' && $cp->vars['l_lang_name'][$lang_id] == '')					|| ($cp->vars['lang_explain'] != '' && $cp->vars['l_lang_explain'][$lang_id] == '')					|| ($cp->vars['lang_default_value'] != '' && $cp->vars['l_lang_default_value'][$lang_id] == ''))				{					$empty_lang[$lang_id] = true;					break;				}				if (!isset($empty_lang[$lang_id]))				{					$profile_lang[] = array(						'field_id'		=> $field_id,						'lang_id'		=> $lang_id,						'lang_name'		=> $cp->vars['l_lang_name'][$lang_id],						'lang_explain'	=> (isset($cp->vars['l_lang_explain'][$lang_id])) ? $cp->vars['l_lang_explain'][$lang_id] : '',						'lang_default_value'	=> (isset($cp->vars['l_lang_default_value'][$lang_id])) ? $cp->vars['l_lang_default_value'][$lang_id] : ''					);				}			}			foreach ($empty_lang as $lang_id => $NULL)			{				$sql = 'DELETE FROM ' . PROFILE_LANG_TABLE . "					WHERE field_id = $field_id					AND lang_id = " . (int) $lang_id;				$db->sql_query($sql);			}		}		// These are always arrays because the key is the language id...		$cp->vars['l_lang_name']			= utf8_normalize_nfc(request_var('l_lang_name', array(0 => ''), true));		$cp->vars['l_lang_explain']			= utf8_normalize_nfc(request_var('l_lang_explain', array(0 => ''), true));		$cp->vars['l_lang_default_value']	= utf8_normalize_nfc(request_var('l_lang_default_value', array(0 => ''), true));		if ($field_type != FIELD_BOOL)		{			$cp->vars['l_lang_options']			= utf8_normalize_nfc(request_var('l_lang_options', array(0 => ''), true));		}		else		{			/**			* @todo check if this line is correct...			$cp->vars['l_lang_default_value']	= request_var('l_lang_default_value', array(0 => array('')), true);			*/			$cp->vars['l_lang_options']	= utf8_normalize_nfc(request_var('l_lang_options', array(0 => array('')), true));		}		if ($cp->vars['lang_options'])		{			if (!is_array($cp->vars['lang_options']))			{				$cp->vars['lang_options'] = explode("\n", $cp->vars['lang_options']);			}			if ($action != 'create')			{				$sql = 'DELETE FROM ' . PROFILE_FIELDS_LANG_TABLE . "					WHERE field_id = $field_id						AND lang_id = " . (int) $default_lang_id;				$db->sql_query($sql);			}			foreach ($cp->vars['lang_options'] as $option_id => $value)			{				$sql_ary = array(					'field_type'	=> (int) $field_type,					'lang_value'	=> $value				);				if ($action == 'create')				{					$sql_ary['field_id'] = $field_id;					$sql_ary['lang_id'] = $default_lang_id;					$sql_ary['option_id'] = (int) $option_id;					$profile_sql[] = 'INSERT INTO ' . PROFILE_FIELDS_LANG_TABLE . ' ' . $db->sql_build_array('INSERT', $sql_ary);				}				else				{					$this->update_insert(PROFILE_FIELDS_LANG_TABLE, $sql_ary, array(						'field_id'	=> $field_id,						'lang_id'	=> (int) $default_lang_id,						'option_id'	=> (int) $option_id)					);				}			}		}		if (is_array($cp->vars['l_lang_options']) && sizeof($cp->vars['l_lang_options']))		{			$empty_lang = array();			foreach ($cp->vars['l_lang_options'] as $lang_id => $lang_ary)			{				if (!is_array($lang_ary))				{					$lang_ary = explode("\n", $lang_ary);				}				if (sizeof($lang_ary) != sizeof($cp->vars['lang_options']))				{					$empty_lang[$lang_id] = true;				}				if (!isset($empty_lang[$lang_id]))				{					if ($action != 'create')					{						$sql = 'DELETE FROM ' . PROFILE_FIELDS_LANG_TABLE . "							WHERE field_id = $field_id							AND lang_id = " . (int) $lang_id;						$db->sql_query($sql);					}					foreach ($lang_ary as $option_id => $value)					{						$profile_lang_fields[] = array(							'field_id'		=> (int) $field_id,							'lang_id'		=> (int) $lang_id,							'option_id'		=> (int) $option_id,							'field_type'	=> (int) $field_type,							'lang_value'	=> $value						);					}				}			}			foreach ($empty_lang as $lang_id => $NULL)			{				$sql = 'DELETE FROM ' . PROFILE_FIELDS_LANG_TABLE . "					WHERE field_id = $field_id					AND lang_id = " . (int) $lang_id;				$db->sql_query($sql);			}		}		foreach ($profile_lang as $sql)		{			if ($action == 'create')			{				$profile_sql[] = 'INSERT INTO ' . PROFILE_LANG_TABLE . ' ' . $db->sql_build_array('INSERT', $sql);			}			else			{				$lang_id = $sql['lang_id'];				unset($sql['lang_id'], $sql['field_id']);				$this->update_insert(PROFILE_LANG_TABLE, $sql, array('lang_id' => (int) $lang_id, 'field_id' => $field_id));			}		}		if (sizeof($profile_lang_fields))		{			foreach ($profile_lang_fields as $sql)			{				if ($action == 'create')				{					$profile_sql[] = 'INSERT INTO ' . PROFILE_FIELDS_LANG_TABLE . ' ' . $db->sql_build_array('INSERT', $sql);				}				else				{					$lang_id = $sql['lang_id'];					$option_id = $sql['option_id'];					unset($sql['lang_id'], $sql['field_id'], $sql['option_id']);					$this->update_insert(PROFILE_FIELDS_LANG_TABLE, $sql, array(						'lang_id'	=> $lang_id,						'field_id'	=> $field_id,						'option_id'	=> $option_id)					);				}			}		}		$db->sql_transaction('begin');		if ($action == 'create')		{			foreach ($profile_sql as $sql)			{				$db->sql_query($sql);			}		}		$db->sql_transaction('commit');		if ($action == 'edit')		{			add_log('admin', 'LOG_PROFILE_FIELD_EDIT', $cp->vars['field_ident'] . ':' . $cp->vars['lang_name']);			trigger_error($user->lang['CHANGED_PROFILE_FIELD'] . adm_back_link($this->u_action));		}		else		{			add_log('admin', 'LOG_PROFILE_FIELD_CREATE', substr($field_ident, 3) . ':' . $cp->vars['lang_name']);			trigger_error($user->lang['ADDED_PROFILE_FIELD'] . adm_back_link($this->u_action));		}	}	/**	* Update, then insert if not successfull	*/	function update_insert($table, $sql_ary, $where_fields)	{		global $db;		$where_sql = array();		$check_key = '';		foreach ($where_fields as $key => $value)		{			$check_key = (!$check_key) ? $key : $check_key;			$where_sql[] = $key . ' = ' . ((is_string($value)) ? "'" . $db->sql_escape($value) . "'" : (int) $value);		}		if (!sizeof($where_sql))		{			return;		}		$sql = "SELECT $check_key			FROM $table			WHERE " . implode(' AND ', $where_sql);		$result = $db->sql_query($sql);		$row = $db->sql_fetchrow($result);		$db->sql_freeresult($result);		if (!$row)		{			$sql_ary = array_merge($where_fields, $sql_ary);			if (sizeof($sql_ary))			{				$db->sql_query("INSERT INTO $table " . $db->sql_build_array('INSERT', $sql_ary));			}		}		else		{			if (sizeof($sql_ary))			{				$sql = "UPDATE $table SET " . $db->sql_build_array('UPDATE', $sql_ary) . '					WHERE ' . implode(' AND ', $where_sql);				$db->sql_query($sql);			}		}	}	/**	* Return sql statement for adding a new field ident (profile field) to the profile fields data table	*/	function add_field_ident($field_ident, $field_type)	{		global $db;		switch ($db->sql_layer)		{			case 'mysql':			case 'mysql4':			case 'mysqli':				// We are defining the biggest common value, because of the possibility to edit the min/max values of each field.				$sql = 'ALTER TABLE ' . PROFILE_FIELDS_DATA_TABLE . " ADD `$field_ident` ";				switch ($field_type)				{					case FIELD_STRING:						$sql .= ' VARCHAR(255) ';					break;					case FIELD_DATE:						$sql .= 'VARCHAR(10) ';					break;					case FIELD_TEXT:						$sql .= "TEXT";		//						ADD {$field_ident}_bbcode_uid VARCHAR(5) NOT NULL,		//						ADD {$field_ident}_bbcode_bitfield INT(11) UNSIGNED";					break;					case FIELD_BOOL:						$sql .= 'TINYINT(2) ';					break;					case FIELD_DROPDOWN:						$sql .= 'MEDIUMINT(8) ';					break;					case FIELD_INT:						$sql .= 'BIGINT(20) ';					break;				}			break;			case 'sqlite':				switch ($field_type)				{					case FIELD_STRING:						$type = ' VARCHAR(255) ';					break;					case FIELD_DATE:						$type = 'VARCHAR(10) ';					break;					case FIELD_TEXT:						$type = "TEXT(65535)";		//						ADD {$field_ident}_bbcode_uid VARCHAR(5) NOT NULL,		//						ADD {$field_ident}_bbcode_bitfield INT(11) UNSIGNED";					break;					case FIELD_BOOL:						$type = 'TINYINT(2) ';					break;					case FIELD_DROPDOWN:						$type = 'MEDIUMINT(8) ';					break;					case FIELD_INT:						$type = 'BIGINT(20) ';					break;				}				// We are defining the biggest common value, because of the possibility to edit the min/max values of each field.				if (version_compare(sqlite_libversion(), '3.0') == -1)				{					$sql = "SELECT sql						FROM sqlite_master						WHERE type = 'table'							AND name = '" . PROFILE_FIELDS_DATA_TABLE . "'						ORDER BY type DESC, name;";					$result = $db->sql_query($sql);					$row = $db->sql_fetchrow($result);					$db->sql_freeresult($result);					// Create a temp table and populate it, destroy the existing one					$db->sql_query(preg_replace('#CREATE\s+TABLE\s+"?' . PROFILE_FIELDS_DATA_TABLE . '"?#i', 'CREATE TEMPORARY TABLE ' . PROFILE_FIELDS_DATA_TABLE . '_temp', $row['sql']));					$db->sql_query('INSERT INTO ' . PROFILE_FIELDS_DATA_TABLE . '_temp SELECT * FROM ' . PROFILE_FIELDS_DATA_TABLE);					$db->sql_query('DROP TABLE ' . PROFILE_FIELDS_DATA_TABLE);					preg_match('#\((.*)\)#s', $row['sql'], $matches);					$new_table_cols = trim($matches[1]);					$old_table_cols = explode(',', $new_table_cols);					$column_list = array();					foreach ($old_table_cols as $declaration)					{						$entities = preg_split('#\s+#', trim($declaration));						if ($entities[0] == 'PRIMARY')						{							continue;						}						$column_list[] = $entities[0];					}					$columns = implode(',', $column_list);					$new_table_cols = $field_ident . ' ' . $type . ',' . $new_table_cols;					// create a new table and fill it up. destroy the temp one					$db->sql_query('CREATE TABLE ' . PROFILE_FIELDS_DATA_TABLE . ' (' . $new_table_cols . ');');					$db->sql_query('INSERT INTO ' . PROFILE_FIELDS_DATA_TABLE . ' (' . $columns . ') SELECT ' . $columns . ' FROM ' . PROFILE_FIELDS_DATA_TABLE . '_temp;');					$db->sql_query('DROP TABLE ' . PROFILE_FIELDS_DATA_TABLE . '_temp');				}				else				{					$sql = 'ALTER TABLE ' . PROFILE_FIELDS_DATA_TABLE . " ADD $field_ident [$type]";				}			break;			case 'mssql':			case 'mssql_odbc':			case 'mssqlnative':				// We are defining the biggest common value, because of the possibility to edit the min/max values of each field.				$sql = 'ALTER TABLE [' . PROFILE_FIELDS_DATA_TABLE . "] ADD [$field_ident] ";				switch ($field_type)				{					case FIELD_STRING:						$sql .= ' [VARCHAR] (255) ';					break;					case FIELD_DATE:						$sql .= '[VARCHAR] (10) ';					break;					case FIELD_TEXT:						$sql .= "[TEXT]";		//						ADD {$field_ident}_bbcode_uid [VARCHAR] (5) NOT NULL,		//						ADD {$field_ident}_bbcode_bitfield [INT] UNSIGNED";					break;					case FIELD_BOOL:					case FIELD_DROPDOWN:						$sql .= '[INT] ';					break;					case FIELD_INT:						$sql .= '[FLOAT] ';					break;				}			break;			case 'postgres':				// We are defining the biggest common value, because of the possibility to edit the min/max values of each field.				$sql = 'ALTER TABLE ' . PROFILE_FIELDS_DATA_TABLE . " ADD COLUMN \"$field_ident\" ";				switch ($field_type)				{					case FIELD_STRING:						$sql .= ' VARCHAR(255) ';					break;					case FIELD_DATE:						$sql .= 'VARCHAR(10) ';					break;					case FIELD_TEXT:						$sql .= "TEXT";		//						ADD {$field_ident}_bbcode_uid VARCHAR(5) NOT NULL,		//						ADD {$field_ident}_bbcode_bitfield INT4 UNSIGNED";					break;					case FIELD_BOOL:						$sql .= 'INT2 ';					break;					case FIELD_DROPDOWN:						$sql .= 'INT4 ';					break;					case FIELD_INT:						$sql .= 'INT8 ';					break;				}			break;			case 'firebird':				// We are defining the biggest common value, because of the possibility to edit the min/max values of each field.				$sql = 'ALTER TABLE ' . PROFILE_FIELDS_DATA_TABLE . ' ADD "' . strtoupper($field_ident) . '" ';				switch ($field_type)				{					case FIELD_STRING:						$sql .= ' VARCHAR(255) ';					break;					case FIELD_DATE:						$sql .= 'VARCHAR(10) ';					break;					case FIELD_TEXT:						$sql .= "BLOB SUB_TYPE TEXT";		//						ADD {$field_ident}_bbcode_uid VARCHAR(5) NOT NULL,		//						ADD {$field_ident}_bbcode_bitfield INTEGER UNSIGNED";					break;					case FIELD_BOOL:					case FIELD_DROPDOWN:						$sql .= 'INTEGER ';					break;					case FIELD_INT:						$sql .= 'DOUBLE PRECISION ';					break;				}			break;			case 'oracle':				// We are defining the biggest common value, because of the possibility to edit the min/max values of each field.				$sql = 'ALTER TABLE ' . PROFILE_FIELDS_DATA_TABLE . " ADD $field_ident ";				switch ($field_type)				{					case FIELD_STRING:						$sql .= ' VARCHAR2(255) ';					break;					case FIELD_DATE:						$sql .= 'VARCHAR2(10) ';					break;					case FIELD_TEXT:						$sql .= "CLOB";		//						ADD {$field_ident}_bbcode_uid VARCHAR2(5) NOT NULL,		//						ADD {$field_ident}_bbcode_bitfield NUMBER(11) UNSIGNED";					break;					case FIELD_BOOL:						$sql .= 'NUMBER(2) ';					break;					case FIELD_DROPDOWN:						$sql .= 'NUMBER(8) ';					break;					case FIELD_INT:						$sql .= 'NUMBER(20) ';					break;				}			break;		}		return $sql;	}}?>
<?php/**** acp_common [English]** @package language* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** DO NOT CHANGE*/if (!defined('IN_PHPBB')){	exit;}if (empty($lang) || !is_array($lang)){	$lang = array();}// DEVELOPERS PLEASE NOTE//// All language files should use UTF-8 as their encoding and the files must not contain a BOM.//// Placeholders can now contain order information, e.g. instead of// 'Page %s of %s' you can (and should) write 'Page %1$s of %2$s', this allows// translators to re-order the output of data while ensuring it remains correct//// You do not need this where single placeholders are used, e.g. 'Message %d' is fine// equally where a string contains only two placeholders which are used to wrap text// in a url you again do not need to specify an order e.g., 'Click %sHERE%s' is fine// Common$lang = array_merge($lang, array(	'ACP_ADMINISTRATORS'		=> 'Administrators',	'ACP_ADMIN_LOGS'			=> 'Admin log',	'ACP_ADMIN_ROLES'			=> 'Admin roles',	'ACP_ATTACHMENTS'			=> 'Attachments',	'ACP_ATTACHMENT_SETTINGS'	=> 'Attachment settings',	'ACP_AUTH_SETTINGS'			=> 'Authentication',	'ACP_AUTOMATION'			=> 'Automation',	'ACP_AVATAR_SETTINGS'		=> 'Avatar settings',	'ACP_BACKUP'				=> 'Backup',	'ACP_BAN'					=> 'Banning',	'ACP_BAN_EMAILS'			=> 'Ban e-mails',	'ACP_BAN_IPS'				=> 'Ban IPs',	'ACP_BAN_USERNAMES'			=> 'Ban usernames',	'ACP_BBCODES'				=> 'BBCodes',	'ACP_BOARD_CONFIGURATION'	=> 'Board configuration',	'ACP_BOARD_FEATURES'		=> 'Board features',	'ACP_BOARD_MANAGEMENT'		=> 'Board management',	'ACP_BOARD_SETTINGS'		=> 'Board settings',	'ACP_BOTS'					=> 'Spiders/Robots',	'ACP_CAPTCHA'				=> 'CAPTCHA',	'ACP_CAT_DATABASE'			=> 'Database',	'ACP_CAT_DOT_MODS'			=> '.MODs',	'ACP_CAT_FORUMS'			=> 'Forums',	'ACP_CAT_GENERAL'			=> 'General',	'ACP_CAT_MAINTENANCE'		=> 'Maintenance',	'ACP_CAT_PERMISSIONS'		=> 'Permissions',	'ACP_CAT_POSTING'			=> 'Posting',	'ACP_CAT_STYLES'			=> 'Styles',	'ACP_CAT_SYSTEM'			=> 'System',	'ACP_CAT_USERGROUP'			=> 'Users and Groups',	'ACP_CAT_USERS'				=> 'Users',	'ACP_CLIENT_COMMUNICATION'	=> 'Client communication',	'ACP_COOKIE_SETTINGS'		=> 'Cookie settings',	'ACP_CRITICAL_LOGS'			=> 'Error log',	'ACP_CUSTOM_PROFILE_FIELDS'	=> 'Custom profile fields',	'ACP_DATABASE'				=> 'Database management',	'ACP_DISALLOW'				=> 'Disallow',	'ACP_DISALLOW_USERNAMES'	=> 'Disallow usernames',	'ACP_EMAIL_SETTINGS'		=> 'E-mail settings',	'ACP_EXTENSION_GROUPS'		=> 'Manage extension groups',	'ACP_FORUM_BASED_PERMISSIONS'	=> 'Forum based permissions',	'ACP_FORUM_LOGS'				=> 'Forum logs',	'ACP_FORUM_MANAGEMENT'			=> 'Forum management',	'ACP_FORUM_MODERATORS'			=> 'Forum moderators',	'ACP_FORUM_PERMISSIONS'			=> 'Forum permissions',	'ACP_FORUM_PERMISSIONS_COPY'	=> 'Copy forum permissions',	'ACP_FORUM_ROLES'				=> 'Forum roles',	'ACP_GENERAL_CONFIGURATION'		=> 'General configuration',	'ACP_GENERAL_TASKS'				=> 'General tasks',	'ACP_GLOBAL_MODERATORS'			=> 'Global moderators',	'ACP_GLOBAL_PERMISSIONS'		=> 'Global permissions',	'ACP_GROUPS'					=> 'Groups',	'ACP_GROUPS_FORUM_PERMISSIONS'	=> 'Groups forum permissions',	'ACP_GROUPS_MANAGE'				=> 'Manage groups',	'ACP_GROUPS_MANAGEMENT'			=> 'Group management',	'ACP_GROUPS_PERMISSIONS'		=> 'Groups permissions',	'ACP_ICONS'					=> 'Topic icons',	'ACP_ICONS_SMILIES'			=> 'Topic icons/smilies',	'ACP_IMAGESETS'				=> 'Imagesets',	'ACP_INACTIVE_USERS'		=> 'Inactive users',	'ACP_INDEX'					=> 'ACP index',	'ACP_JABBER_SETTINGS'		=> 'Jabber settings',	'ACP_LANGUAGE'				=> 'Language management',	'ACP_LANGUAGE_PACKS'		=> 'Language packs',	'ACP_LOAD_SETTINGS'			=> 'Load settings',	'ACP_LOGGING'				=> 'Logging',	'ACP_MAIN'					=> 'ACP index',	'ACP_MANAGE_EXTENSIONS'		=> 'Manage extensions',	'ACP_MANAGE_FORUMS'			=> 'Manage forums',	'ACP_MANAGE_RANKS'			=> 'Manage ranks',	'ACP_MANAGE_REASONS'		=> 'Manage report/denial reasons',	'ACP_MANAGE_USERS'			=> 'Manage users',	'ACP_MASS_EMAIL'			=> 'Mass e-mail',	'ACP_MESSAGES'				=> 'Messages',	'ACP_MESSAGE_SETTINGS'		=> 'Private message settings',	'ACP_MODULE_MANAGEMENT'		=> 'Module management',	'ACP_MOD_LOGS'				=> 'Moderator log',	'ACP_MOD_ROLES'				=> 'Moderator roles',	'ACP_NO_ITEMS'				=> 'There are no items yet.',	'ACP_ORPHAN_ATTACHMENTS'	=> 'Orphaned attachments',	'ACP_PERMISSIONS'			=> 'Permissions',	'ACP_PERMISSION_MASKS'		=> 'Permission masks',	'ACP_PERMISSION_ROLES'		=> 'Permission roles',	'ACP_PERMISSION_TRACE'		=> 'Permission trace',	'ACP_PHP_INFO'				=> 'PHP information',	'ACP_POST_SETTINGS'			=> 'Post settings',	'ACP_PRUNE_FORUMS'			=> 'Prune forums',	'ACP_PRUNE_USERS'			=> 'Prune users',	'ACP_PRUNING'				=> 'Pruning',	'ACP_QUICK_ACCESS'			=> 'Quick access',	'ACP_RANKS'					=> 'Ranks',	'ACP_REASONS'				=> 'Report/denial reasons',	'ACP_REGISTER_SETTINGS'		=> 'User registration settings',	'ACP_RESTORE'				=> 'Restore',	'ACP_FEED'					=> 'Feed management',	'ACP_FEED_SETTINGS'			=> 'Feed settings',	'ACP_SEARCH'				=> 'Search configuration',	'ACP_SEARCH_INDEX'			=> 'Search index',	'ACP_SEARCH_SETTINGS'		=> 'Search settings',	'ACP_SECURITY_SETTINGS'		=> 'Security settings',	'ACP_SEND_STATISTICS'		=> 'Send statistical information',	'ACP_SERVER_CONFIGURATION'	=> 'Server configuration',	'ACP_SERVER_SETTINGS'		=> 'Server settings',	'ACP_SIGNATURE_SETTINGS'	=> 'Signature settings',	'ACP_SMILIES'				=> 'Smilies',	'ACP_STYLE_COMPONENTS'		=> 'Style components',	'ACP_STYLE_MANAGEMENT'		=> 'Style management',	'ACP_STYLES'				=> 'Styles',	'ACP_SUBMIT_CHANGES'		=> 'Submit changes',	'ACP_TEMPLATES'				=> 'Templates',	'ACP_THEMES'				=> 'Themes',	'ACP_UPDATE'					=> 'Updating',	'ACP_USERS_FORUM_PERMISSIONS'	=> 'Users forum permissions',	'ACP_USERS_LOGS'				=> 'User logs',	'ACP_USERS_PERMISSIONS'			=> 'Users permissions',	'ACP_USER_ATTACH'				=> 'Attachments',	'ACP_USER_AVATAR'				=> 'Avatar',	'ACP_USER_FEEDBACK'				=> 'Feedback',	'ACP_USER_GROUPS'				=> 'Groups',	'ACP_USER_MANAGEMENT'			=> 'User management',	'ACP_USER_OVERVIEW'				=> 'Overview',	'ACP_USER_PERM'					=> 'Permissions',	'ACP_USER_PREFS'				=> 'Preferences',	'ACP_USER_PROFILE'				=> 'Profile',	'ACP_USER_RANK'					=> 'Rank',	'ACP_USER_ROLES'				=> 'User roles',	'ACP_USER_SECURITY'				=> 'User security',	'ACP_USER_SIG'					=> 'Signature',	'ACP_USER_WARNINGS'				=> 'Warnings',	'ACP_VC_SETTINGS'					=> 'Spambot countermeasures',	'ACP_VC_CAPTCHA_DISPLAY'			=> 'CAPTCHA image preview',	'ACP_VERSION_CHECK'					=> 'Check for updates',	'ACP_VIEW_ADMIN_PERMISSIONS'		=> 'View administrative permissions',	'ACP_VIEW_FORUM_MOD_PERMISSIONS'	=> 'View forum moderation permissions',	'ACP_VIEW_FORUM_PERMISSIONS'		=> 'View forum-based permissions',	'ACP_VIEW_GLOBAL_MOD_PERMISSIONS'	=> 'View global moderation permissions',	'ACP_VIEW_USER_PERMISSIONS'			=> 'View user-based permissions',	'ACP_WORDS'					=> 'Word censoring',	'ACTION'				=> 'Action',	'ACTIONS'				=> 'Actions',	'ACTIVATE'				=> 'Activate',	'ADD'					=> 'Add',	'ADMIN'					=> 'Administration',	'ADMIN_INDEX'			=> 'Admin index',	'ADMIN_PANEL'			=> 'Administration Control Panel',	'ADM_LOGOUT'			=> 'ACP&nbsp;Logout',	'ADM_LOGGED_OUT'		=> 'Successfully logged out from Administration Control Panel',	'BACK'					=> 'Back',	'COLOUR_SWATCH'			=> 'Web-safe colour swatch',	'CONFIG_UPDATED'		=> 'Configuration updated successfully.',	'DEACTIVATE'				=> 'Deactivate',	'DIRECTORY_DOES_NOT_EXIST'	=> 'The entered path %s does not exist.',	'DIRECTORY_NOT_DIR'			=> 'The entered path %s is not a directory.',	'DIRECTORY_NOT_WRITABLE'	=> 'The entered path %s is not writable.',	'DISABLE'					=> 'Disable',	'DOWNLOAD'					=> 'Download',	'DOWNLOAD_AS'				=> 'Download as',	'DOWNLOAD_STORE'			=> 'Download or store file',	'DOWNLOAD_STORE_EXPLAIN'	=> 'You may directly download the file or save it in your <samp>store/</samp> folder.',	'EDIT'					=> 'Edit',	'ENABLE'				=> 'Enable',	'EXPORT_DOWNLOAD'		=> 'Download',	'EXPORT_STORE'			=> 'Store',	'GENERAL_OPTIONS'		=> 'General options',	'GENERAL_SETTINGS'		=> 'General settings',	'GLOBAL_MASK'			=> 'Global permission mask',	'INSTALL'				=> 'Install',	'IP'					=> 'User IP',	'IP_HOSTNAME'			=> 'IP addresses or hostnames',	'LOGGED_IN_AS'			=> 'You are logged in as:',	'LOGIN_ADMIN'			=> 'To administer the board you must be an authenticated user.',	'LOGIN_ADMIN_CONFIRM'	=> 'To administer the board you must re-authenticate yourself.',	'LOGIN_ADMIN_SUCCESS'	=> 'You have successfully authenticated and will now be redirected to the Administration Control Panel.',	'LOOK_UP_FORUM'			=> 'Select a forum',	'LOOK_UP_FORUMS_EXPLAIN'=> 'You are able to select more than one forum.',	'MANAGE'				=> 'Manage',	'MENU_TOGGLE'			=> 'Hide or display the side menu',	'MORE'					=> 'More',			// Not used at the moment	'MORE_INFORMATION'		=> 'More information ',	'MOVE_DOWN'				=> 'Move down',	'MOVE_UP'				=> 'Move up',	'NOTIFY'				=> 'Notification',	'NO_ADMIN'				=> 'You are not authorised to administer this board.',	'NO_EMAILS_DEFINED'		=> 'No valid e-mail addresses found.',	'NO_PASSWORD_SUPPLIED'	=> 'You need to enter your password to access the Administration Control Panel.',	'OFF'					=> 'Off',	'ON'					=> 'On',	'PARSE_BBCODE'						=> 'Parse BBCode',	'PARSE_SMILIES'						=> 'Parse smilies',	'PARSE_URLS'						=> 'Parse links',	'PERMISSIONS_TRANSFERRED'			=> 'Permissions transferred',	'PERMISSIONS_TRANSFERRED_EXPLAIN'	=> 'You currently have the permissions from %1$s. You are able to browse the board with this users permissions, but not access the administration control panel since admin permissions were not transferred. You can <a href="%2$s"><strong>revert to your permission set</strong></a> at any time.',	'PROCEED_TO_ACP'					=> '%sProceed to the ACP%s',	'REMIND'							=> 'Remind',	'RESYNC'							=> 'Resynchronise',	'RETURN_TO'							=> 'Return to',	'SELECT_ANONYMOUS'		=> 'Select anonymous user',	'SELECT_OPTION'			=> 'Select option',	'SETTING_TOO_LOW'		=> 'The provided value for the setting %1$s is too low. The minimum acceptable value is %2$d.',	'SETTING_TOO_BIG'		=> 'The provided value for the setting %1$s is too high. The maximum acceptable value is %2$d.',	'SETTING_TOO_LONG'		=> 'The provided value for the setting %1$s is too long. The maximum acceptable length is %2$d.',	'SETTING_TOO_SHORT'		=> 'The provided value for the setting %1$s is too short. The minimum acceptable length is %2$d.',	'SHOW_ALL_OPERATIONS'	=> 'Show all operations',	'UCP'					=> 'User Control Panel',	'USERNAMES_EXPLAIN'		=> 'Place each username on a separate line.',	'USER_CONTROL_PANEL'	=> 'User Control Panel',	'WARNING'				=> 'Warning',));// PHP info$lang = array_merge($lang, array(	'ACP_PHP_INFO_EXPLAIN'	=> 'This page lists information on the version of PHP installed on this server. It includes details of loaded modules, available variables and default settings. This information may be useful when diagnosing problems. Please be aware that some hosting companies will limit what information is displayed here for security reasons. You are advised to not give out any details on this page except when asked by <a href="http://www.phpbb.com/about/team/">official team members</a> on the support forums.',	'NO_PHPINFO_AVAILABLE'	=> 'Information about your PHP configuration is unable to be determined. Phpinfo() has been disabled for security reasons.',));// Logs$lang = array_merge($lang, array(	'ACP_ADMIN_LOGS_EXPLAIN'	=> 'This lists all the actions carried out by board administrators. You can sort by username, date, IP or action. If you have appropriate permissions you can also clear individual operations or the log as a whole.',	'ACP_CRITICAL_LOGS_EXPLAIN'	=> 'This lists the actions carried out by the board itself. This log provides you with information you are able to use for solving specific problems, for example non-delivery of e-mails. You can sort by username, date, IP or action. If you have appropriate permissions you can also clear individual operations or the log as a whole.',	'ACP_MOD_LOGS_EXPLAIN'		=> 'This lists all actions done on forums, topics and posts as well as actions carried out on users by moderators, including banning. You can sort by username, date, IP or action. If you have appropriate permissions you can also clear individual operations or the log as a whole.',	'ACP_USERS_LOGS_EXPLAIN'	=> 'This lists all actions carried out by users or on users (reports, warnings and user notes).',	'ALL_ENTRIES'				=> 'All entries',	'DISPLAY_LOG'	=> 'Display entries from previous',	'NO_ENTRIES'	=> 'No log entries for this period.',	'SORT_IP'		=> 'IP address',	'SORT_DATE'		=> 'Date',	'SORT_ACTION'	=> 'Log action',));// Index page$lang = array_merge($lang, array(	'ADMIN_INTRO'				=> 'Thank you for choosing phpBB as your board solution. This screen will give you a quick overview of all the various statistics of your board. The links on the left hand side of this screen allow you to control every aspect of your board experience. Each page will have instructions on how to use the tools.',	'ADMIN_LOG'					=> 'Logged administrator actions',	'ADMIN_LOG_INDEX_EXPLAIN'	=> 'This gives an overview of the last five actions carried out by board administrators. A full copy of the log can be viewed from the appropriate menu item or following the link below.',	'AVATAR_DIR_SIZE'			=> 'Avatar directory size',	'BOARD_STARTED'		=> 'Board started',	'BOARD_VERSION'		=> 'Board version',	'DATABASE_SERVER_INFO'	=> 'Database server',	'DATABASE_SIZE'			=> 'Database size',	// Enviroment configuration checks, mbstring related	'ERROR_MBSTRING_FUNC_OVERLOAD'					=> 'Function overloading is improperly configured',	'ERROR_MBSTRING_FUNC_OVERLOAD_EXPLAIN'			=> '<var>mbstring.func_overload</var> must be set to either 0 or 4. You can check the current value on the <samp>PHP information</samp> page.',	'ERROR_MBSTRING_ENCODING_TRANSLATION'			=> 'Transparent character encoding is improperly configured',	'ERROR_MBSTRING_ENCODING_TRANSLATION_EXPLAIN'	=> '<var>mbstring.encoding_translation</var> must be set to 0. You can check the current value on the <samp>PHP information</samp> page.',	'ERROR_MBSTRING_HTTP_INPUT'						=> 'HTTP input character conversion is improperly configured',	'ERROR_MBSTRING_HTTP_INPUT_EXPLAIN'				=> '<var>mbstring.http_input</var> must be set to <samp>pass</samp>. You can check the current value on the <samp>PHP information</samp> page.',	'ERROR_MBSTRING_HTTP_OUTPUT'					=> 'HTTP output character conversion is improperly configured',	'ERROR_MBSTRING_HTTP_OUTPUT_EXPLAIN'			=> '<var>mbstring.http_output</var> must be set to <samp>pass</samp>. You can check the current value on the <samp>PHP information</samp> page.',	'FILES_PER_DAY'		=> 'Attachments per day',	'FORUM_STATS'		=> 'Board statistics',	'GZIP_COMPRESSION'	=> 'GZip compression',	'NOT_AVAILABLE'		=> 'Not available',	'NUMBER_FILES'		=> 'Number of attachments',	'NUMBER_POSTS'		=> 'Number of posts',	'NUMBER_TOPICS'		=> 'Number of topics',	'NUMBER_USERS'		=> 'Number of users',	'NUMBER_ORPHAN'		=> 'Orphan attachments',	'PHP_VERSION_OLD'	=> 'The version of PHP on this server will no longer be supported by future versions of phpBB. %sDetails%s',	'POSTS_PER_DAY'		=> 'Posts per day',	'PURGE_CACHE'			=> 'Purge the cache',	'PURGE_CACHE_CONFIRM'	=> 'Are you sure you wish to purge the cache?',	'PURGE_CACHE_EXPLAIN'	=> 'Purge all cache related items, this includes any cached template files or queries.',	'PURGE_SESSIONS'			=> 'Purge all sessions',	'PURGE_SESSIONS_CONFIRM'	=> 'Are you sure you wish to purge all sessions? This will log out all users.',	'PURGE_SESSIONS_EXPLAIN'	=> 'Purge all sessions. This will log out all users by truncating the session table.',	'RESET_DATE'					=> 'Reset boards start date',	'RESET_DATE_CONFIRM'			=> 'Are you sure you wish to reset the boards start date?',	'RESET_ONLINE'					=> 'Reset most users ever online',	'RESET_ONLINE_CONFIRM'			=> 'Are you sure you wish to reset the most users ever online counter?',	'RESYNC_POSTCOUNTS'				=> 'Resynchronise post counts',	'RESYNC_POSTCOUNTS_EXPLAIN'		=> 'Only existing posts will be taken into consideration. Pruned posts will not be counted.',	'RESYNC_POSTCOUNTS_CONFIRM'		=> 'Are you sure you wish to resynchronise post counts?',	'RESYNC_POST_MARKING'			=> 'Resynchronise dotted topics',	'RESYNC_POST_MARKING_CONFIRM'	=> 'Are you sure you wish to resynchronise dotted topics?',	'RESYNC_POST_MARKING_EXPLAIN'	=> 'First unmarks all topics and then correctly marks topics that have seen any activity during the past six months.',	'RESYNC_STATS'					=> 'Resynchronise statistics',	'RESYNC_STATS_CONFIRM'			=> 'Are you sure you wish to resynchronise statistics?',	'RESYNC_STATS_EXPLAIN'			=> 'Recalculates the total number of posts, topics, users and files.',	'RUN'							=> 'Run now',	'STATISTIC'					=> 'Statistic',	'STATISTIC_RESYNC_OPTIONS'	=> 'Resynchronise or reset statistics',	'TOPICS_PER_DAY'	=> 'Topics per day',	'UPLOAD_DIR_SIZE'	=> 'Size of posted attachments',	'USERS_PER_DAY'		=> 'Users per day',	'VALUE'						=> 'Value',	'VERSIONCHECK_FAIL'			=> 'Failed to obtain latest version information.',	'VERSIONCHECK_FORCE_UPDATE'	=> 'Re-Check version',	'VIEW_ADMIN_LOG'			=> 'View administrator log',	'VIEW_INACTIVE_USERS'		=> 'View inactive users',	'WELCOME_PHPBB'			=> 'Welcome to phpBB',	'WRITABLE_CONFIG'		=> 'Your config file (config.php) is currently world-writable. We strongly encourage you to change the permissions to 640 or at least to 644 (for example: <a href="http://en.wikipedia.org/wiki/Chmod" rel="external">chmod</a> 640 config.php).',));// Inactive Users$lang = array_merge($lang, array(	'INACTIVE_DATE'					=> 'Inactive date',	'INACTIVE_REASON'				=> 'Reason',	'INACTIVE_REASON_MANUAL'		=> 'Account deactivated by administrator',	'INACTIVE_REASON_PROFILE'		=> 'Profile details changed',	'INACTIVE_REASON_REGISTER'		=> 'Newly registered account',	'INACTIVE_REASON_REMIND'		=> 'Forced user account reactivation',	'INACTIVE_REASON_UNKNOWN'		=> 'Unknown',	'INACTIVE_USERS'				=> 'Inactive users',	'INACTIVE_USERS_EXPLAIN'		=> 'This is a list of users who have registered but whose accounts are inactive. You can activate, delete or remind (by sending an e-mail) these users if you wish.',	'INACTIVE_USERS_EXPLAIN_INDEX'	=> 'This is a list of the last 10 registered users who have inactive accounts. A full list is available from the appropriate menu item or by following the link below from where you can activate, delete or remind (by sending an e-mail) these users if you wish.',	'NO_INACTIVE_USERS'	=> 'No inactive users',	'SORT_INACTIVE'		=> 'Inactive date',	'SORT_LAST_VISIT'	=> 'Last visit',	'SORT_REASON'		=> 'Reason',	'SORT_REG_DATE'		=> 'Registration date',	'SORT_LAST_REMINDER'=> 'Last reminded',	'SORT_REMINDER'		=> 'Reminder sent',	'USER_IS_INACTIVE'		=> 'User is inactive',));// Send statistics page$lang = array_merge($lang, array(	'EXPLAIN_SEND_STATISTICS'	=> 'Please send information about your server and board configurations to phpBB for statistical analysis. All information that could identify you or your website has been removed - the data is entirely <strong>anonymous</strong>. We base decisions about future phpBB versions on this information. The statistics are made available publically. We also share this data with the PHP project, the programming language phpBB is made with.',	'EXPLAIN_SHOW_STATISTICS'	=> 'Using the button below you can preview all variables that will be transmitted.',	'DONT_SEND_STATISTICS'		=> 'Return to the ACP if you do not wish to send statistical information to phpBB.',	'GO_ACP_MAIN'				=> 'Go to the ACP start page',	'HIDE_STATISTICS'			=> 'Hide details',	'SEND_STATISTICS'			=> 'Send statistical information',	'SHOW_STATISTICS'			=> 'Show details',	'THANKS_SEND_STATISTICS'	=> 'Thank you for submitting your information.',));// Log Entries$lang = array_merge($lang, array(	'LOG_ACL_ADD_USER_GLOBAL_U_'		=> '<strong>Added or edited users user permissions</strong><br /> %s',	'LOG_ACL_ADD_GROUP_GLOBAL_U_'		=> '<strong>Added or edited groups user permissions</strong><br /> %s',	'LOG_ACL_ADD_USER_GLOBAL_M_'		=> '<strong>Added or edited users global moderator permissions</strong><br /> %s',	'LOG_ACL_ADD_GROUP_GLOBAL_M_'		=> '<strong>Added or edited groups global moderator permissions</strong><br /> %s',	'LOG_ACL_ADD_USER_GLOBAL_A_'		=> '<strong>Added or edited users administrator permissions</strong><br /> %s',	'LOG_ACL_ADD_GROUP_GLOBAL_A_'		=> '<strong>Added or edited groups administrator permissions</strong><br /> %s',	'LOG_ACL_ADD_ADMIN_GLOBAL_A_'		=> '<strong>Added or edited Administrators</strong><br /> %s',	'LOG_ACL_ADD_MOD_GLOBAL_M_'			=> '<strong>Added or edited Global Moderators</strong><br /> %s',	'LOG_ACL_ADD_USER_LOCAL_F_'			=> '<strong>Added or edited users forum access</strong> from %1$s<br /> %2$s',	'LOG_ACL_ADD_USER_LOCAL_M_'			=> '<strong>Added or edited users forum moderator access</strong> from %1$s<br /> %2$s',	'LOG_ACL_ADD_GROUP_LOCAL_F_'		=> '<strong>Added or edited groups forum access</strong> from %1$s<br /> %2$s',	'LOG_ACL_ADD_GROUP_LOCAL_M_'		=> '<strong>Added or edited groups forum moderator access</strong> from %1$s<br /> %2$s',	'LOG_ACL_ADD_MOD_LOCAL_M_'			=> '<strong>Added or edited Moderators</strong> from %1$s<br /> %2$s',	'LOG_ACL_ADD_FORUM_LOCAL_F_'		=> '<strong>Added or edited forum permissions</strong> from %1$s<br /> %2$s',	'LOG_ACL_DEL_ADMIN_GLOBAL_A_'		=> '<strong>Removed Administrators</strong><br /> %s',	'LOG_ACL_DEL_MOD_GLOBAL_M_'			=> '<strong>Removed Global Moderators</strong><br /> %s',	'LOG_ACL_DEL_MOD_LOCAL_M_'			=> '<strong>Removed Moderators</strong> from %1$s<br /> %2$s',	'LOG_ACL_DEL_FORUM_LOCAL_F_'		=> '<strong>Removed User/Group forum permissions</strong> from %1$s<br /> %2$s',	'LOG_ACL_TRANSFER_PERMISSIONS'		=> '<strong>Permissions transferred from</strong><br /> %s',	'LOG_ACL_RESTORE_PERMISSIONS'		=> '<strong>Own permissions restored after using permissions from</strong><br /> %s',	'LOG_ADMIN_AUTH_FAIL'		=> '<strong>Failed administration login attempt</strong>',	'LOG_ADMIN_AUTH_SUCCESS'	=> '<strong>Successful administration login</strong>',	'LOG_ATTACHMENTS_DELETED'	=> '<strong>Removed user attachments</strong><br /> %s',	'LOG_ATTACH_EXT_ADD'		=> '<strong>Added or edited attachment extension</strong><br /> %s',	'LOG_ATTACH_EXT_DEL'		=> '<strong>Removed attachment extension</strong><br /> %s',	'LOG_ATTACH_EXT_UPDATE'		=> '<strong>Updated attachment extension</strong><br /> %s',	'LOG_ATTACH_EXTGROUP_ADD'	=> '<strong>Added extension group</strong><br /> %s',	'LOG_ATTACH_EXTGROUP_EDIT'	=> '<strong>Edited extension group</strong><br /> %s',	'LOG_ATTACH_EXTGROUP_DEL'	=> '<strong>Removed extension group</strong><br /> %s',	'LOG_ATTACH_FILEUPLOAD'		=> '<strong>Orphan File uploaded to Post</strong><br /> ID %1$d - %2$s',	'LOG_ATTACH_ORPHAN_DEL'		=> '<strong>Orphan Files deleted</strong><br /> %s',	'LOG_BAN_EXCLUDE_USER'	=> '<strong>Excluded user from ban</strong> for reason <em>%1$s</em><br /> %2$s',	'LOG_BAN_EXCLUDE_IP'	=> '<strong>Excluded IP from ban</strong> for reason <em>%1$s</em><br /> %2$s',	'LOG_BAN_EXCLUDE_EMAIL' => '<strong>Excluded e-mail from ban</strong> for reason <em>%1$s</em><br /> %2$s',	'LOG_BAN_USER'			=> '<strong>Banned user</strong> for reason <em>%1$s</em><br /> %2$s',	'LOG_BAN_IP'			=> '<strong>Banned IP</strong> for reason <em>%1$s</em><br /> %2$s',	'LOG_BAN_EMAIL'			=> '<strong>Banned e-mail</strong> for reason <em>%1$s</em><br /> %2$s',	'LOG_UNBAN_USER'		=> '<strong>Unbanned user</strong><br /> %s',	'LOG_UNBAN_IP'			=> '<strong>Unbanned IP</strong><br /> %s',	'LOG_UNBAN_EMAIL'		=> '<strong>Unbanned e-mail</strong><br /> %s',	'LOG_BBCODE_ADD'		=> '<strong>Added new BBCode</strong><br /> %s',	'LOG_BBCODE_EDIT'		=> '<strong>Edited BBCode</strong><br /> %s',	'LOG_BBCODE_DELETE'		=> '<strong>Deleted BBCode</strong><br /> %s',	'LOG_BOT_ADDED'		=> '<strong>New bot added</strong><br /> %s',	'LOG_BOT_DELETE'	=> '<strong>Deleted bot</strong><br /> %s',	'LOG_BOT_UPDATED'	=> '<strong>Existing bot updated</strong><br /> %s',	'LOG_CLEAR_ADMIN'		=> '<strong>Cleared admin log</strong>',	'LOG_CLEAR_CRITICAL'	=> '<strong>Cleared error log</strong>',	'LOG_CLEAR_MOD'			=> '<strong>Cleared moderator log</strong>',	'LOG_CLEAR_USER'		=> '<strong>Cleared user log</strong><br /> %s',	'LOG_CLEAR_USERS'		=> '<strong>Cleared user logs</strong>',	'LOG_CONFIG_ATTACH'			=> '<strong>Altered attachment settings</strong>',	'LOG_CONFIG_AUTH'			=> '<strong>Altered authentication settings</strong>',	'LOG_CONFIG_AVATAR'			=> '<strong>Altered avatar settings</strong>',	'LOG_CONFIG_COOKIE'			=> '<strong>Altered cookie settings</strong>',	'LOG_CONFIG_EMAIL'			=> '<strong>Altered e-mail settings</strong>',	'LOG_CONFIG_FEATURES'		=> '<strong>Altered board features</strong>',	'LOG_CONFIG_LOAD'			=> '<strong>Altered load settings</strong>',	'LOG_CONFIG_MESSAGE'		=> '<strong>Altered private message settings</strong>',	'LOG_CONFIG_POST'			=> '<strong>Altered post settings</strong>',	'LOG_CONFIG_REGISTRATION'	=> '<strong>Altered user registration settings</strong>',	'LOG_CONFIG_FEED'			=> '<strong>Altered syndication feeds settings</strong>',	'LOG_CONFIG_SEARCH'			=> '<strong>Altered search settings</strong>',	'LOG_CONFIG_SECURITY'		=> '<strong>Altered security settings</strong>',	'LOG_CONFIG_SERVER'			=> '<strong>Altered server settings</strong>',	'LOG_CONFIG_SETTINGS'		=> '<strong>Altered board settings</strong>',	'LOG_CONFIG_SIGNATURE'		=> '<strong>Altered signature settings</strong>',	'LOG_CONFIG_VISUAL'			=> '<strong>Altered anti-spambot settings</strong>',	'LOG_APPROVE_TOPIC'			=> '<strong>Approved topic</strong><br /> %s',	'LOG_BUMP_TOPIC'			=> '<strong>User bumped topic</strong><br /> %s',	'LOG_DELETE_POST'			=> '<strong>Deleted post %1$s written by</strong><br /> %2$s',	'LOG_DELETE_SHADOW_TOPIC'	=> '<strong>Deleted shadow topic</strong><br /> %s',	'LOG_DELETE_TOPIC'			=> '<strong>Deleted topic %1$s written by</strong><br /> %2$s',	'LOG_FORK'					=> '<strong>Copied topic</strong><br /> from %s',	'LOG_LOCK'					=> '<strong>Locked topic</strong><br /> %s',	'LOG_LOCK_POST'				=> '<strong>Locked post</strong><br /> %s',	'LOG_MERGE'					=> '<strong>Merged posts</strong> into topic<br /> %s',	'LOG_MOVE'					=> '<strong>Moved topic</strong><br /> from %1$s to %2$s',	'LOG_PM_REPORT_CLOSED'		=> '<strong>Closed PM report</strong><br /> %s',	'LOG_PM_REPORT_DELETED'		=> '<strong>Deleted PM report</strong><br /> %s',	'LOG_POST_APPROVED'			=> '<strong>Approved post</strong><br /> %s',	'LOG_POST_DISAPPROVED'		=> '<strong>Disapproved post %1$s with the following reason</strong><br /> %2$s',	'LOG_POST_EDITED'			=> '<strong>Edited post %1$s written by</strong><br /> %2$s',	'LOG_REPORT_CLOSED'			=> '<strong>Closed report</strong><br /> %s',	'LOG_REPORT_DELETED'		=> '<strong>Deleted report</strong><br /> %s',	'LOG_SPLIT_DESTINATION'		=> '<strong>Moved split posts</strong><br /> to %s',	'LOG_SPLIT_SOURCE'			=> '<strong>Split posts</strong><br /> from %s',	'LOG_TOPIC_APPROVED'		=> '<strong>Approved topic</strong><br /> %s',	'LOG_TOPIC_DISAPPROVED'		=> '<strong>Disapproved topic %1$s with the following reason</strong><br />%2$s',	'LOG_TOPIC_RESYNC'			=> '<strong>Resynchronised topic counters</strong><br /> %s',	'LOG_TOPIC_TYPE_CHANGED'	=> '<strong>Changed topic type</strong><br /> %s',	'LOG_UNLOCK'				=> '<strong>Unlocked topic</strong><br /> %s',	'LOG_UNLOCK_POST'			=> '<strong>Unlocked post</strong><br /> %s',	'LOG_DISALLOW_ADD'		=> '<strong>Added disallowed username</strong><br /> %s',	'LOG_DISALLOW_DELETE'	=> '<strong>Deleted disallowed username</strong>',	'LOG_DB_BACKUP'			=> '<strong>Database backup</strong>',	'LOG_DB_DELETE'			=> '<strong>Deleted database backup</strong>',	'LOG_DB_RESTORE'		=> '<strong>Restored database backup</strong>',	'LOG_DOWNLOAD_EXCLUDE_IP'	=> '<strong>Excluded IP/hostname from download list</strong><br /> %s',	'LOG_DOWNLOAD_IP'			=> '<strong>Added IP/hostname to download list</strong><br /> %s',	'LOG_DOWNLOAD_REMOVE_IP'	=> '<strong>Removed IP/hostname from download list</strong><br /> %s',	'LOG_ERROR_JABBER'		=> '<strong>Jabber error</strong><br /> %s',	'LOG_ERROR_EMAIL'		=> '<strong>E-mail error</strong><br /> %s',	'LOG_FORUM_ADD'							=> '<strong>Created new forum</strong><br /> %s',	'LOG_FORUM_COPIED_PERMISSIONS'			=> '<strong>Copied forum permissions</strong> from %1$s<br /> %2$s',	'LOG_FORUM_DEL_FORUM'					=> '<strong>Deleted forum</strong><br /> %s',	'LOG_FORUM_DEL_FORUMS'					=> '<strong>Deleted forum and its subforums</strong><br /> %s',	'LOG_FORUM_DEL_MOVE_FORUMS'				=> '<strong>Deleted forum and moved subforums</strong> to %1$s<br /> %2$s',	'LOG_FORUM_DEL_MOVE_POSTS'				=> '<strong>Deleted forum and moved posts </strong> to %1$s<br /> %2$s',	'LOG_FORUM_DEL_MOVE_POSTS_FORUMS'		=> '<strong>Deleted forum and its subforums, moved posts</strong> to %1$s<br /> %2$s',	'LOG_FORUM_DEL_MOVE_POSTS_MOVE_FORUMS'	=> '<strong>Deleted forum, moved posts</strong> to %1$s <strong>and subforums</strong> to %2$s<br /> %3$s',	'LOG_FORUM_DEL_POSTS'					=> '<strong>Deleted forum and its posts</strong><br /> %s',	'LOG_FORUM_DEL_POSTS_FORUMS'			=> '<strong>Deleted forum, its posts and subforums</strong><br /> %s',	'LOG_FORUM_DEL_POSTS_MOVE_FORUMS'		=> '<strong>Deleted forum and its posts, moved subforums</strong> to %1$s<br /> %2$s',	'LOG_FORUM_EDIT'						=> '<strong>Edited forum details</strong><br /> %s',	'LOG_FORUM_MOVE_DOWN'					=> '<strong>Moved forum</strong> %1$s <strong>below</strong> %2$s',	'LOG_FORUM_MOVE_UP'						=> '<strong>Moved forum</strong> %1$s <strong>above</strong> %2$s',	'LOG_FORUM_SYNC'						=> '<strong>Re-synchronised forum</strong><br /> %s',	'LOG_GENERAL_ERROR'	=> '<strong>A general error occured</strong>: %1$s <br /> %2$s',	'LOG_GROUP_CREATED'		=> '<strong>New usergroup created</strong><br /> %s',	'LOG_GROUP_DEFAULTS'	=> '<strong>Group %1$s made default for members</strong><br /> %2$s',	'LOG_GROUP_DELETE'		=> '<strong>Usergroup deleted</strong><br /> %s',	'LOG_GROUP_DEMOTED'		=> '<strong>Leaders demoted in usergroup</strong> %1$s<br /> %2$s',	'LOG_GROUP_PROMOTED'	=> '<strong>Members promoted to leader in usergroup</strong> %1$s<br /> %2$s',	'LOG_GROUP_REMOVE'		=> '<strong>Members removed from usergroup</strong> %1$s<br /> %2$s',	'LOG_GROUP_UPDATED'		=> '<strong>Usergroup details updated</strong><br /> %s',	'LOG_MODS_ADDED'		=> '<strong>Added new leaders to usergroup</strong> %1$s<br /> %2$s',	'LOG_USERS_ADDED'		=> '<strong>Added new members to usergroup</strong> %1$s<br /> %2$s',	'LOG_USERS_APPROVED'	=> '<strong>Users approved in usergroup</strong> %1$s<br /> %2$s',	'LOG_USERS_PENDING'		=> '<strong>Users requested to join group %1$s and need to be approved</strong><br /> %2$s',	'LOG_IMAGE_GENERATION_ERROR'	=> '<strong>Error while creating image</strong><br /> Error in %1$s on line %2$s: %3$s',	'LOG_IMAGESET_ADD_DB'			=> '<strong>Added new imageset to database</strong><br /> %s',	'LOG_IMAGESET_ADD_FS'			=> '<strong>Add new imageset on filesystem</strong><br /> %s',	'LOG_IMAGESET_DELETE'			=> '<strong>Deleted imageset</strong><br /> %s',	'LOG_IMAGESET_EDIT_DETAILS'		=> '<strong>Edited imageset details</strong><br /> %s',	'LOG_IMAGESET_EDIT'				=> '<strong>Edited imageset</strong><br /> %s',	'LOG_IMAGESET_EXPORT'			=> '<strong>Exported imageset</strong><br /> %s',	'LOG_IMAGESET_LANG_MISSING'		=> '<strong>Imageset misses %2$s localisation</strong><br /> %1$s',	'LOG_IMAGESET_LANG_REFRESHED'	=> '<strong>Refreshed %2$s localisation of imageset</strong><br /> %1$s',	'LOG_IMAGESET_REFRESHED'		=> '<strong>Refreshed imageset</strong><br /> %s',	'LOG_INACTIVE_ACTIVATE'	=> '<strong>Activated inactive users</strong><br /> %s',	'LOG_INACTIVE_DELETE'	=> '<strong>Deleted inactive users</strong><br /> %s',	'LOG_INACTIVE_REMIND'	=> '<strong>Sent reminder e-mails to inactive users</strong><br /> %s',	'LOG_INSTALL_CONVERTED'	=> '<strong>Converted from %1$s to phpBB %2$s</strong>',	'LOG_INSTALL_INSTALLED'	=> '<strong>Installed phpBB %s</strong>',	'LOG_IP_BROWSER_FORWARDED_CHECK'	=> '<strong>Session IP/browser/X_FORWARDED_FOR check failed</strong><br />User IP <em>%1$s</em> checked against session IP <em>%2$s</em>, user browser string <em>%3$s</em> checked against session browser string <em>%4$s</em> and user X_FORWARDED_FOR string <em>%5$s</em> checked against session X_FORWARDED_FOR string <em>%6$s</em>.',	'LOG_JAB_CHANGED'			=> '<strong>Jabber account changed</strong>',	'LOG_JAB_PASSCHG'			=> '<strong>Jabber password changed</strong>',	'LOG_JAB_REGISTER'			=> '<strong>Jabber account registered</strong>',	'LOG_JAB_SETTINGS_CHANGED'	=> '<strong>Jabber settings changed</strong>',	'LOG_LANGUAGE_PACK_DELETED'		=> '<strong>Deleted language pack</strong><br /> %s',	'LOG_LANGUAGE_PACK_INSTALLED'	=> '<strong>Installed language pack</strong><br /> %s',	'LOG_LANGUAGE_PACK_UPDATED'		=> '<strong>Updated language pack details</strong><br /> %s',	'LOG_LANGUAGE_FILE_REPLACED'	=> '<strong>Replaced language file</strong><br /> %s',	'LOG_LANGUAGE_FILE_SUBMITTED'	=> '<strong>Submitted language file and placed in store folder</strong><br /> %s',	'LOG_MASS_EMAIL'		=> '<strong>Sent mass e-mail</strong><br /> %s',	'LOG_MCP_CHANGE_POSTER'	=> '<strong>Changed poster in topic %1$s</strong><br /> from %2$s to %3$s',	'LOG_MODULE_DISABLE'	=> '<strong>Module disabled</strong><br /> %s',	'LOG_MODULE_ENABLE'		=> '<strong>Module enabled</strong><br /> %s',	'LOG_MODULE_MOVE_DOWN'	=> '<strong>Module moved down</strong><br /> %1$s below %2$s',	'LOG_MODULE_MOVE_UP'	=> '<strong>Module moved up</strong><br /> %1$s above %2$s',	'LOG_MODULE_REMOVED'	=> '<strong>Module removed</strong><br /> %s',	'LOG_MODULE_ADD'		=> '<strong>Module added</strong><br /> %s',	'LOG_MODULE_EDIT'		=> '<strong>Module edited</strong><br /> %s',	'LOG_A_ROLE_ADD'		=> '<strong>Admin role added</strong><br /> %s',	'LOG_A_ROLE_EDIT'		=> '<strong>Admin role edited</strong><br /> %s',	'LOG_A_ROLE_REMOVED'	=> '<strong>Admin role removed</strong><br /> %s',	'LOG_F_ROLE_ADD'		=> '<strong>Forum role added</strong><br /> %s',	'LOG_F_ROLE_EDIT'		=> '<strong>Forum role edited</strong><br /> %s',	'LOG_F_ROLE_REMOVED'	=> '<strong>Forum role removed</strong><br /> %s',	'LOG_M_ROLE_ADD'		=> '<strong>Moderator role added</strong><br /> %s',	'LOG_M_ROLE_EDIT'		=> '<strong>Moderator role edited</strong><br /> %s',	'LOG_M_ROLE_REMOVED'	=> '<strong>Moderator role removed</strong><br /> %s',	'LOG_U_ROLE_ADD'		=> '<strong>User role added</strong><br /> %s',	'LOG_U_ROLE_EDIT'		=> '<strong>User role edited</strong><br /> %s',	'LOG_U_ROLE_REMOVED'	=> '<strong>User role removed</strong><br /> %s',	'LOG_PROFILE_FIELD_ACTIVATE'	=> '<strong>Profile field activated</strong><br /> %s',	'LOG_PROFILE_FIELD_CREATE'		=> '<strong>Profile field added</strong><br /> %s',	'LOG_PROFILE_FIELD_DEACTIVATE'	=> '<strong>Profile field deactivated</strong><br /> %s',	'LOG_PROFILE_FIELD_EDIT'		=> '<strong>Profile field changed</strong><br /> %s',	'LOG_PROFILE_FIELD_REMOVED'		=> '<strong>Profile field removed</strong><br /> %s',	'LOG_PRUNE'					=> '<strong>Pruned forums</strong><br /> %s',	'LOG_AUTO_PRUNE'			=> '<strong>Auto-pruned forums</strong><br /> %s',	'LOG_PRUNE_USER_DEAC'		=> '<strong>Users deactivated</strong><br /> %s',	'LOG_PRUNE_USER_DEL_DEL'	=> '<strong>Users pruned and posts deleted</strong><br /> %s',	'LOG_PRUNE_USER_DEL_ANON'	=> '<strong>Users pruned and posts retained</strong><br /> %s',	'LOG_PURGE_CACHE'			=> '<strong>Purged cache</strong>',	'LOG_PURGE_SESSIONS'		=> '<strong>Purged sessions</strong>',	'LOG_RANK_ADDED'		=> '<strong>Added new rank</strong><br /> %s',	'LOG_RANK_REMOVED'		=> '<strong>Removed rank</strong><br /> %s',	'LOG_RANK_UPDATED'		=> '<strong>Updated rank</strong><br /> %s',	'LOG_REASON_ADDED'		=> '<strong>Added report/denial reason</strong><br /> %s',	'LOG_REASON_REMOVED'	=> '<strong>Removed report/denial reason</strong><br /> %s',	'LOG_REASON_UPDATED'	=> '<strong>Updated report/denial reason</strong><br /> %s',	'LOG_REFERER_INVALID'		=> '<strong>Referer validation failed</strong><br />Referer was <em>%1$s</em>. The request was rejected and the session killed.',	'LOG_RESET_DATE'			=> '<strong>Board start date reset</strong>',	'LOG_RESET_ONLINE'			=> '<strong>Most users online reset</strong>',	'LOG_RESYNC_POSTCOUNTS'		=> '<strong>User post counts resynchronised</strong>',	'LOG_RESYNC_POST_MARKING'	=> '<strong>Dotted topics resynchronised</strong>',	'LOG_RESYNC_STATS'			=> '<strong>Post, topic and user statistics resynchronised</strong>',	'LOG_SEARCH_INDEX_CREATED'	=> '<strong>Created search index for</strong><br /> %s',	'LOG_SEARCH_INDEX_REMOVED'	=> '<strong>Removed search index for</strong><br /> %s',	'LOG_STYLE_ADD'				=> '<strong>Added new style</strong><br /> %s',	'LOG_STYLE_DELETE'			=> '<strong>Deleted style</strong><br /> %s',	'LOG_STYLE_EDIT_DETAILS'	=> '<strong>Edited style</strong><br /> %s',	'LOG_STYLE_EXPORT'			=> '<strong>Exported style</strong><br /> %s',	'LOG_TEMPLATE_ADD_DB'			=> '<strong>Added new template set to database</strong><br /> %s',	'LOG_TEMPLATE_ADD_FS'			=> '<strong>Add new template set on filesystem</strong><br /> %s',	'LOG_TEMPLATE_CACHE_CLEARED'	=> '<strong>Deleted cached versions of template files in template set <em>%1$s</em></strong><br /> %2$s',	'LOG_TEMPLATE_DELETE'			=> '<strong>Deleted template set</strong><br /> %s',	'LOG_TEMPLATE_EDIT'				=> '<strong>Edited template set <em>%1$s</em></strong><br /> %2$s',	'LOG_TEMPLATE_EDIT_DETAILS'		=> '<strong>Edited template details</strong><br /> %s',	'LOG_TEMPLATE_EXPORT'			=> '<strong>Exported template set</strong><br /> %s',	'LOG_TEMPLATE_REFRESHED'		=> '<strong>Refreshed template set</strong><br /> %s',	'LOG_THEME_ADD_DB'			=> '<strong>Added new theme to database</strong><br /> %s',	'LOG_THEME_ADD_FS'			=> '<strong>Add new theme on filesystem</strong><br /> %s',	'LOG_THEME_DELETE'			=> '<strong>Theme deleted</strong><br /> %s',	'LOG_THEME_EDIT_DETAILS'	=> '<strong>Edited theme details</strong><br /> %s',	'LOG_THEME_EDIT'			=> '<strong>Edited theme <em>%1$s</em></strong>',	'LOG_THEME_EDIT_FILE'		=> '<strong>Edited theme <em>%1$s</em></strong><br /> Modified file <em>%2$s</em>',	'LOG_THEME_EXPORT'			=> '<strong>Exported theme</strong><br /> %s',	'LOG_THEME_REFRESHED'		=> '<strong>Refreshed theme</strong><br /> %s',	'LOG_UPDATE_DATABASE'	=> '<strong>Updated Database from version %1$s to version %2$s</strong>',	'LOG_UPDATE_PHPBB'		=> '<strong>Updated phpBB from version %1$s to version %2$s</strong>',	'LOG_USER_ACTIVE'		=> '<strong>User activated</strong><br /> %s',	'LOG_USER_BAN_USER'		=> '<strong>Banned User via user management</strong> for reason <em>%1$s</em><br /> %2$s',	'LOG_USER_BAN_IP'		=> '<strong>Banned IP via user management</strong> for reason <em>%1$s</em><br /> %2$s',	'LOG_USER_BAN_EMAIL'	=> '<strong>Banned e-mail via user management</strong> for reason <em>%1$s</em><br /> %2$s',	'LOG_USER_DELETED'		=> '<strong>Deleted user</strong><br /> %s',	'LOG_USER_DEL_ATTACH'	=> '<strong>Removed all attachments made by the user</strong><br /> %s',	'LOG_USER_DEL_AVATAR'	=> '<strong>Removed user avatar</strong><br /> %s',	'LOG_USER_DEL_OUTBOX'	=> '<strong>Emptied user outbox</strong><br /> %s',	'LOG_USER_DEL_POSTS'	=> '<strong>Removed all posts made by the user</strong><br /> %s',	'LOG_USER_DEL_SIG'		=> '<strong>Removed user signature</strong><br /> %s',	'LOG_USER_INACTIVE'		=> '<strong>User deactivated</strong><br /> %s',	'LOG_USER_MOVE_POSTS'	=> '<strong>Moved user posts</strong><br /> posts by %1$s to forum %2$s',	'LOG_USER_NEW_PASSWORD'	=> '<strong>Changed user password</strong><br /> %s',	'LOG_USER_REACTIVATE'	=> '<strong>Forced user account reactivation</strong><br /> %s',	'LOG_USER_REMOVED_NR'	=> '<strong>Removed newly registered flag from user</strong><br /> %s',	'LOG_USER_UPDATE_EMAIL'	=> '<strong>User %1$s changed e-mail</strong><br /> from %2$s to %3$s',	'LOG_USER_UPDATE_NAME'	=> '<strong>Changed username</strong><br /> from %1$s to %2$s',	'LOG_USER_USER_UPDATE'	=> '<strong>Updated user details</strong><br /> %s',	'LOG_USER_ACTIVE_USER'		=> '<strong>User account activated</strong>',	'LOG_USER_DEL_AVATAR_USER'	=> '<strong>User avatar removed</strong>',	'LOG_USER_DEL_SIG_USER'		=> '<strong>User signature removed</strong>',	'LOG_USER_FEEDBACK'			=> '<strong>Added user feedback</strong><br /> %s',	'LOG_USER_GENERAL'			=> '<strong>Entry added:</strong><br /> %s',	'LOG_USER_INACTIVE_USER'	=> '<strong>User account de-activated</strong>',	'LOG_USER_LOCK'				=> '<strong>User locked own topic</strong><br /> %s',	'LOG_USER_MOVE_POSTS_USER'	=> '<strong>Moved all posts to forum</strong> %s',	'LOG_USER_REACTIVATE_USER'	=> '<strong>Forced user account reactivation</strong>',	'LOG_USER_UNLOCK'			=> '<strong>User unlocked own topic</strong><br /> %s',	'LOG_USER_WARNING'			=> '<strong>Added user warning</strong><br /> %s',	'LOG_USER_WARNING_BODY'		=> '<strong>The following warning was issued to this user</strong><br /> %s',	'LOG_USER_GROUP_CHANGE'			=> '<strong>User changed default group</strong><br /> %s',	'LOG_USER_GROUP_DEMOTE'			=> '<strong>User demoted as leaders from usergroup</strong><br /> %s',	'LOG_USER_GROUP_JOIN'			=> '<strong>User joined group</strong><br /> %s',	'LOG_USER_GROUP_JOIN_PENDING'	=> '<strong>User joined group and needs to be approved</strong><br /> %s',	'LOG_USER_GROUP_RESIGN'			=> '<strong>User resigned membership from group</strong><br /> %s',	'LOG_WARNING_DELETED'		=> '<strong>Deleted user warning</strong><br /> %s',	'LOG_WARNINGS_DELETED'		=> '<strong>Deleted %2$s user warnings</strong><br /> %1$s', // Example: '<strong>Deleted 2 user warnings</strong><br /> username'	'LOG_WARNINGS_DELETED_ALL'	=> '<strong>Deleted all user warnings</strong><br /> %s',	'LOG_WORD_ADD'			=> '<strong>Added word censor</strong><br /> %s',	'LOG_WORD_DELETE'		=> '<strong>Deleted word censor</strong><br /> %s',	'LOG_WORD_EDIT'			=> '<strong>Edited word censor</strong><br /> %s',));?>
<?php/**** @package phpBB3* @version $Id$* @copyright (c) 2006 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License** This file creates SQL statements to upgrade phpBB on MySQL 3.x/4.0.x to 4.1.x/5.x**///// Security message://// This script is potentially dangerous.// Remove or comment the next line (die(".... ) to enable this script.// Do NOT FORGET to either remove this script or disable it after you have used it.//die("Please read the first lines of this script for instructions on how to enable it");define('IN_PHPBB', true);$phpbb_root_path = (defined('PHPBB_ROOT_PATH')) ? PHPBB_ROOT_PATH : './';$phpEx = substr(strrchr(__FILE__, '.'), 1);include($phpbb_root_path . 'common.' . $phpEx);$prefix = $table_prefix;$newline = "\n";if (PHP_SAPI !== 'cli'){	$newline = '<br>';}$sql = 'DESCRIBE ' . POSTS_TABLE . ' post_text';$result = $db->sql_query($sql);$row = $db->sql_fetchrow($result);$db->sql_freeresult($result);$mysql_indexer = $drop_index = false;if (strtolower($row['Type']) === 'mediumtext'){	$mysql_indexer = true;}if (strtolower($row['Key']) === 'mul'){	$drop_index = true;}echo "USE $dbname;$newline$newline";@set_time_limit(0);$schema_data = get_schema_struct();$dbms_type_map = array(	'mysql_41'	=> array(		'INT:'		=> 'int(%d)',		'BINT'		=> 'bigint(20)',		'UINT'		=> 'mediumint(8) UNSIGNED',		'UINT:'		=> 'int(%d) UNSIGNED',		'TINT:'		=> 'tinyint(%d)',		'USINT'		=> 'smallint(4) UNSIGNED',		'BOOL'		=> 'tinyint(1) UNSIGNED',		'VCHAR'		=> 'varchar(255)',		'VCHAR:'	=> 'varchar(%d)',		'CHAR:'		=> 'char(%d)',		'XSTEXT'	=> 'text',		'XSTEXT_UNI'=> 'varchar(100)',		'STEXT'		=> 'text',		'STEXT_UNI'	=> 'varchar(255)',		'TEXT'		=> 'text',		'TEXT_UNI'	=> 'text',		'MTEXT'		=> 'mediumtext',		'MTEXT_UNI'	=> 'mediumtext',		'TIMESTAMP'	=> 'int(11) UNSIGNED',		'DECIMAL'	=> 'decimal(5,2)',		'DECIMAL:'	=> 'decimal(%d,2)',		'PDECIMAL'	=> 'decimal(6,3)',		'PDECIMAL:'	=> 'decimal(%d,3)',		'VCHAR_UNI'	=> 'varchar(255)',		'VCHAR_UNI:'=> 'varchar(%d)',		'VCHAR_CI'	=> 'varchar(255)',		'VARBINARY'	=> 'varbinary(255)',	),	'mysql_40'	=> array(		'INT:'		=> 'int(%d)',		'BINT'		=> 'bigint(20)',		'UINT'		=> 'mediumint(8) UNSIGNED',		'UINT:'		=> 'int(%d) UNSIGNED',		'TINT:'		=> 'tinyint(%d)',		'USINT'		=> 'smallint(4) UNSIGNED',		'BOOL'		=> 'tinyint(1) UNSIGNED',		'VCHAR'		=> 'varbinary(255)',		'VCHAR:'	=> 'varbinary(%d)',		'CHAR:'		=> 'binary(%d)',		'XSTEXT'	=> 'blob',		'XSTEXT_UNI'=> 'blob',		'STEXT'		=> 'blob',		'STEXT_UNI'	=> 'blob',		'TEXT'		=> 'blob',		'TEXT_UNI'	=> 'blob',		'MTEXT'		=> 'mediumblob',		'MTEXT_UNI'	=> 'mediumblob',		'TIMESTAMP'	=> 'int(11) UNSIGNED',		'DECIMAL'	=> 'decimal(5,2)',		'DECIMAL:'	=> 'decimal(%d,2)',		'PDECIMAL'	=> 'decimal(6,3)',		'PDECIMAL:'	=> 'decimal(%d,3)',		'VCHAR_UNI'	=> 'blob',		'VCHAR_UNI:'=> array('varbinary(%d)', 'limit' => array('mult', 3, 255, 'blob')),		'VCHAR_CI'	=> 'blob',		'VARBINARY'	=> 'varbinary(255)',	),);foreach ($schema_data as $table_name => $table_data){	$table_name = str_replace('phpbb_', $prefix, $table_name);	// Write comment about table	echo "# Table: '{$table_name}'$newline";	// Create Table statement	$generator = $textimage = false;	// Do we need to DROP a fulltext index before we alter the table?	if ($table_name == ($prefix . 'posts') && $drop_index)	{		echo "ALTER TABLE {$table_name}{$newline}";		echo "DROP INDEX post_text,{$newline}DROP INDEX post_subject,{$newline}DROP INDEX post_content;{$newline}{$newline}";	}	$line = "ALTER TABLE {$table_name} $newline";	// Table specific so we don't get overlap	$modded_array = array();	// Write columns one by one...	foreach ($table_data['COLUMNS'] as $column_name => $column_data)	{		// Get type		if (strpos($column_data[0], ':') !== false)		{			list($orig_column_type, $column_length) = explode(':', $column_data[0]);			$column_type = sprintf($dbms_type_map['mysql_41'][$orig_column_type . ':'], $column_length);			if (isset($dbms_type_map['mysql_40'][$orig_column_type . ':']['limit'][0]))			{				switch ($dbms_type_map['mysql_40'][$orig_column_type . ':']['limit'][0])				{					case 'mult':						if (($column_length * $dbms_type_map['mysql_40'][$orig_column_type . ':']['limit'][1]) > $dbms_type_map['mysql_40'][$orig_column_type . ':']['limit'][2])						{							$modded_array[$column_name] = $column_type;						}					break;				}			}			$orig_column_type .= ':';		}		else		{			$orig_column_type = $column_data[0];			$other_column_type = $dbms_type_map['mysql_40'][$column_data[0]];			if ($other_column_type == 'text' || $other_column_type == 'blob')			{				$modded_array[$column_name] = $column_type;			}			$column_type = $dbms_type_map['mysql_41'][$column_data[0]];		}		// Adjust default value if db-dependant specified		if (is_array($column_data[1]))		{			$column_data[1] = (isset($column_data[1][$dbms])) ? $column_data[1][$dbms] : $column_data[1]['default'];		}		$line .= "\tMODIFY {$column_name} {$column_type} ";		// For hexadecimal values do not use single quotes		if (!is_null($column_data[1]) && substr($column_type, -4) !== 'text' && substr($column_type, -4) !== 'blob')		{			$line .= (strpos($column_data[1], '0x') === 0) ? "DEFAULT {$column_data[1]} " : "DEFAULT '{$column_data[1]}' ";		}		$line .= 'NOT NULL';		if (isset($column_data[2]))		{			if ($column_data[2] == 'auto_increment')			{				$line .= ' auto_increment';			}			else if ($column_data[2] == 'true_sort')			{				$line .= ' COLLATE utf8_unicode_ci';			}			else if ($column_data[2] == 'no_sort')			{				$line .= ' COLLATE utf8_bin';			}		}		else if (preg_match('/(?:var)?char|(?:medium)?text/i', $column_type))		{			$line .= ' COLLATE utf8_bin';		}		$line .= ",$newline";	}	// Write Keys	if (isset($table_data['KEYS']))	{		foreach ($table_data['KEYS'] as $key_name => $key_data)		{			$temp = '';			if (!is_array($key_data[1]))			{				$key_data[1] = array($key_data[1]);			}			$temp .= ($key_data[0] == 'INDEX') ? "\tADD KEY" : '';			$temp .= ($key_data[0] == 'UNIQUE') ? "\tADD UNIQUE" : '';			$repair = false;			foreach ($key_data[1] as $key => $col_name)			{				if (isset($modded_array[$col_name]))				{					$repair = true;				}			}			if ($repair)			{				$line .= "\tDROP INDEX " . $key_name . ",$newline";				$line .= $temp;				$line .= ' ' . $key_name . ' (' . implode(', ', $key_data[1]) . "),$newline";			}		}	}	//$line .= "\tCONVERT TO CHARACTER SET `utf8`$newline";	$line .= "\tDEFAULT CHARSET=utf8 COLLATE=utf8_bin;$newline$newline";	echo $line . "$newline";	// Do we now need to re-add the fulltext index? ;)	if ($table_name == ($prefix . 'posts') && $drop_index)	{		echo "ALTER TABLE $table_name ADD FULLTEXT (post_subject), ADD FULLTEXT (post_text), ADD FULLTEXT post_content (post_subject, post_text);{$newline}";	}}/*** Define the basic structure* The format:*		array('{TABLE_NAME}' => {TABLE_DATA})*		{TABLE_DATA}:*			COLUMNS = array({column_name} = array({column_type}, {default}, {auto_increment}))*			PRIMARY_KEY = {column_name(s)}*			KEYS = array({key_name} = array({key_type}, {column_name(s)})),**	Column Types:*	INT:x		=> SIGNED int(x)*	BINT		=> BIGINT*	UINT		=> mediumint(8) UNSIGNED*	UINT:x		=> int(x) UNSIGNED*	TINT:x		=> tinyint(x)*	USINT		=> smallint(4) UNSIGNED (for _order columns)*	BOOL		=> tinyint(1) UNSIGNED*	VCHAR		=> varchar(255)*	CHAR:x		=> char(x)*	XSTEXT_UNI	=> text for storing 100 characters (topic_title for example)*	STEXT_UNI	=> text for storing 255 characters (normal input field with a max of 255 single-byte chars) - same as VCHAR_UNI*	TEXT_UNI	=> text for storing 3000 characters (short text, descriptions, comments, etc.)*	MTEXT_UNI	=> mediumtext (post text, large text)*	VCHAR:x		=> varchar(x)*	TIMESTAMP	=> int(11) UNSIGNED*	DECIMAL		=> decimal number (5,2)*	DECIMAL:	=> decimal number (x,2)*	PDECIMAL	=> precision decimal number (6,3)*	PDECIMAL:	=> precision decimal number (x,3)*	VCHAR_UNI	=> varchar(255) BINARY*	VCHAR_CI	=> varchar_ci for postgresql, others VCHAR*/function get_schema_struct(){	$schema_data = array();	$schema_data['phpbb_attachments'] = array(		'COLUMNS'		=> array(			'attach_id'			=> array('UINT', NULL, 'auto_increment'),			'post_msg_id'		=> array('UINT', 0),			'topic_id'			=> array('UINT', 0),			'in_message'		=> array('BOOL', 0),			'poster_id'			=> array('UINT', 0),			'is_orphan'			=> array('BOOL', 1),			'physical_filename'	=> array('VCHAR', ''),			'real_filename'		=> array('VCHAR', ''),			'download_count'	=> array('UINT', 0),			'attach_comment'	=> array('TEXT_UNI', ''),			'extension'			=> array('VCHAR:100', ''),			'mimetype'			=> array('VCHAR:100', ''),			'filesize'			=> array('UINT:20', 0),			'filetime'			=> array('TIMESTAMP', 0),			'thumbnail'			=> array('BOOL', 0),		),		'PRIMARY_KEY'	=> 'attach_id',		'KEYS'			=> array(			'filetime'			=> array('INDEX', 'filetime'),			'post_msg_id'		=> array('INDEX', 'post_msg_id'),			'topic_id'			=> array('INDEX', 'topic_id'),			'poster_id'			=> array('INDEX', 'poster_id'),			'is_orphan'			=> array('INDEX', 'is_orphan'),		),	);	$schema_data['phpbb_acl_groups'] = array(		'COLUMNS'		=> array(			'group_id'			=> array('UINT', 0),			'forum_id'			=> array('UINT', 0),			'auth_option_id'	=> array('UINT', 0),			'auth_role_id'		=> array('UINT', 0),			'auth_setting'		=> array('TINT:2', 0),		),		'KEYS'			=> array(			'group_id'		=> array('INDEX', 'group_id'),			'auth_opt_id'	=> array('INDEX', 'auth_option_id'),			'auth_role_id'	=> array('INDEX', 'auth_role_id'),		),	);	$schema_data['phpbb_acl_options'] = array(		'COLUMNS'		=> array(			'auth_option_id'	=> array('UINT', NULL, 'auto_increment'),			'auth_option'		=> array('VCHAR:50', ''),			'is_global'			=> array('BOOL', 0),			'is_local'			=> array('BOOL', 0),			'founder_only'		=> array('BOOL', 0),		),		'PRIMARY_KEY'	=> 'auth_option_id',		'KEYS'			=> array(			'auth_option'		=> array('UNIQUE', 'auth_option'),		),	);	$schema_data['phpbb_acl_roles'] = array(		'COLUMNS'		=> array(			'role_id'			=> array('UINT', NULL, 'auto_increment'),			'role_name'			=> array('VCHAR_UNI', ''),			'role_description'	=> array('TEXT_UNI', ''),			'role_type'			=> array('VCHAR:10', ''),			'role_order'		=> array('USINT', 0),		),		'PRIMARY_KEY'	=> 'role_id',		'KEYS'			=> array(			'role_type'			=> array('INDEX', 'role_type'),			'role_order'		=> array('INDEX', 'role_order'),		),	);	$schema_data['phpbb_acl_roles_data'] = array(		'COLUMNS'		=> array(			'role_id'			=> array('UINT', 0),			'auth_option_id'	=> array('UINT', 0),			'auth_setting'		=> array('TINT:2', 0),		),		'PRIMARY_KEY'	=> array('role_id', 'auth_option_id'),		'KEYS'			=> array(			'ath_op_id'			=> array('INDEX', 'auth_option_id'),		),	);	$schema_data['phpbb_acl_users'] = array(		'COLUMNS'		=> array(			'user_id'			=> array('UINT', 0),			'forum_id'			=> array('UINT', 0),			'auth_option_id'	=> array('UINT', 0),			'auth_role_id'		=> array('UINT', 0),			'auth_setting'		=> array('TINT:2', 0),		),		'KEYS'			=> array(			'user_id'			=> array('INDEX', 'user_id'),			'auth_option_id'	=> array('INDEX', 'auth_option_id'),			'auth_role_id'		=> array('INDEX', 'auth_role_id'),		),	);	$schema_data['phpbb_banlist'] = array(		'COLUMNS'		=> array(			'ban_id'			=> array('UINT', NULL, 'auto_increment'),			'ban_userid'		=> array('UINT', 0),			'ban_ip'			=> array('VCHAR:40', ''),			'ban_email'			=> array('VCHAR_UNI:100', ''),			'ban_start'			=> array('TIMESTAMP', 0),			'ban_end'			=> array('TIMESTAMP', 0),			'ban_exclude'		=> array('BOOL', 0),			'ban_reason'		=> array('VCHAR_UNI', ''),			'ban_give_reason'	=> array('VCHAR_UNI', ''),		),		'PRIMARY_KEY'			=> 'ban_id',		'KEYS'			=> array(			'ban_end'			=> array('INDEX', 'ban_end'),			'ban_user'			=> array('INDEX', array('ban_userid', 'ban_exclude')),			'ban_email'			=> array('INDEX', array('ban_email', 'ban_exclude')),			'ban_ip'			=> array('INDEX', array('ban_ip', 'ban_exclude')),		),	);	$schema_data['phpbb_bbcodes'] = array(		'COLUMNS'		=> array(			'bbcode_id'				=> array('USINT', 0),			'bbcode_tag'			=> array('VCHAR:16', ''),			'bbcode_helpline'		=> array('VCHAR_UNI', ''),			'display_on_posting'	=> array('BOOL', 0),			'bbcode_match'			=> array('TEXT_UNI', ''),			'bbcode_tpl'			=> array('MTEXT_UNI', ''),			'first_pass_match'		=> array('MTEXT_UNI', ''),			'first_pass_replace'	=> array('MTEXT_UNI', ''),			'second_pass_match'		=> array('MTEXT_UNI', ''),			'second_pass_replace'	=> array('MTEXT_UNI', ''),		),		'PRIMARY_KEY'	=> 'bbcode_id',		'KEYS'			=> array(			'display_on_post'		=> array('INDEX', 'display_on_posting'),		),	);	$schema_data['phpbb_bookmarks'] = array(		'COLUMNS'		=> array(			'topic_id'			=> array('UINT', 0),			'user_id'			=> array('UINT', 0),		),		'PRIMARY_KEY'			=> array('topic_id', 'user_id'),	);	$schema_data['phpbb_bots'] = array(		'COLUMNS'		=> array(			'bot_id'			=> array('UINT', NULL, 'auto_increment'),			'bot_active'		=> array('BOOL', 1),			'bot_name'			=> array('STEXT_UNI', ''),			'user_id'			=> array('UINT', 0),			'bot_agent'			=> array('VCHAR', ''),			'bot_ip'			=> array('VCHAR', ''),		),		'PRIMARY_KEY'	=> 'bot_id',		'KEYS'			=> array(			'bot_active'		=> array('INDEX', 'bot_active'),		),	);	$schema_data['phpbb_config'] = array(		'COLUMNS'		=> array(			'config_name'		=> array('VCHAR', ''),			'config_value'		=> array('VCHAR_UNI', ''),			'is_dynamic'		=> array('BOOL', 0),		),		'PRIMARY_KEY'	=> 'config_name',		'KEYS'			=> array(			'is_dynamic'		=> array('INDEX', 'is_dynamic'),		),	);	$schema_data['phpbb_confirm'] = array(		'COLUMNS'		=> array(			'confirm_id'		=> array('CHAR:32', ''),			'session_id'		=> array('CHAR:32', ''),			'confirm_type'		=> array('TINT:3', 0),			'code'				=> array('VCHAR:8', ''),			'seed'				=> array('UINT:10', 0),			'attempts'			=> array('UINT', 0),		),		'PRIMARY_KEY'	=> array('session_id', 'confirm_id'),		'KEYS'			=> array(			'confirm_type'		=> array('INDEX', 'confirm_type'),		),	);	$schema_data['phpbb_disallow'] = array(		'COLUMNS'		=> array(			'disallow_id'		=> array('UINT', NULL, 'auto_increment'),			'disallow_username'	=> array('VCHAR_UNI:255', ''),		),		'PRIMARY_KEY'	=> 'disallow_id',	);	$schema_data['phpbb_drafts'] = array(		'COLUMNS'		=> array(			'draft_id'			=> array('UINT', NULL, 'auto_increment'),			'user_id'			=> array('UINT', 0),			'topic_id'			=> array('UINT', 0),			'forum_id'			=> array('UINT', 0),			'save_time'			=> array('TIMESTAMP', 0),			'draft_subject'		=> array('STEXT_UNI', ''),			'draft_message'		=> array('MTEXT_UNI', ''),		),		'PRIMARY_KEY'	=> 'draft_id',		'KEYS'			=> array(			'save_time'			=> array('INDEX', 'save_time'),		),	);	$schema_data['phpbb_extensions'] = array(		'COLUMNS'		=> array(			'extension_id'		=> array('UINT', NULL, 'auto_increment'),			'group_id'			=> array('UINT', 0),			'extension'			=> array('VCHAR:100', ''),		),		'PRIMARY_KEY'	=> 'extension_id',	);	$schema_data['phpbb_extension_groups'] = array(		'COLUMNS'		=> array(			'group_id'			=> array('UINT', NULL, 'auto_increment'),			'group_name'		=> array('VCHAR_UNI', ''),			'cat_id'			=> array('TINT:2', 0),			'allow_group'		=> array('BOOL', 0),			'download_mode'		=> array('BOOL', 1),			'upload_icon'		=> array('VCHAR', ''),			'max_filesize'		=> array('UINT:20', 0),			'allowed_forums'	=> array('TEXT', ''),			'allow_in_pm'		=> array('BOOL', 0),		),		'PRIMARY_KEY'	=> 'group_id',	);	$schema_data['phpbb_forums'] = array(		'COLUMNS'		=> array(			'forum_id'				=> array('UINT', NULL, 'auto_increment'),			'parent_id'				=> array('UINT', 0),			'left_id'				=> array('UINT', 0),			'right_id'				=> array('UINT', 0),			'forum_parents'			=> array('MTEXT', ''),			'forum_name'			=> array('STEXT_UNI', ''),			'forum_desc'			=> array('TEXT_UNI', ''),			'forum_desc_bitfield'	=> array('VCHAR:255', ''),			'forum_desc_options'	=> array('UINT:11', 7),			'forum_desc_uid'		=> array('VCHAR:8', ''),			'forum_link'			=> array('VCHAR_UNI', ''),			'forum_password'		=> array('VCHAR_UNI:40', ''),			'forum_style'			=> array('UINT', 0),			'forum_image'			=> array('VCHAR', ''),			'forum_rules'			=> array('TEXT_UNI', ''),			'forum_rules_link'		=> array('VCHAR_UNI', ''),			'forum_rules_bitfield'	=> array('VCHAR:255', ''),			'forum_rules_options'	=> array('UINT:11', 7),			'forum_rules_uid'		=> array('VCHAR:8', ''),			'forum_topics_per_page'	=> array('TINT:4', 0),			'forum_type'			=> array('TINT:4', 0),			'forum_status'			=> array('TINT:4', 0),			'forum_posts'			=> array('UINT', 0),			'forum_topics'			=> array('UINT', 0),			'forum_topics_real'		=> array('UINT', 0),			'forum_last_post_id'	=> array('UINT', 0),			'forum_last_poster_id'	=> array('UINT', 0),			'forum_last_post_subject' => array('STEXT_UNI', ''),			'forum_last_post_time'	=> array('TIMESTAMP', 0),			'forum_last_poster_name'=> array('VCHAR_UNI', ''),			'forum_last_poster_colour'=> array('VCHAR:6', ''),			'forum_flags'			=> array('TINT:4', 32),			'forum_options'			=> array('UINT:20', 0),			'display_subforum_list'	=> array('BOOL', 1),			'display_on_index'		=> array('BOOL', 1),			'enable_indexing'		=> array('BOOL', 1),			'enable_icons'			=> array('BOOL', 1),			'enable_prune'			=> array('BOOL', 0),			'prune_next'			=> array('TIMESTAMP', 0),			'prune_days'			=> array('UINT', 0),			'prune_viewed'			=> array('UINT', 0),			'prune_freq'			=> array('UINT', 0),		),		'PRIMARY_KEY'	=> 'forum_id',		'KEYS'			=> array(			'left_right_id'			=> array('INDEX', array('left_id', 'right_id')),			'forum_lastpost_id'		=> array('INDEX', 'forum_last_post_id'),		),	);	$schema_data['phpbb_forums_access'] = array(		'COLUMNS'		=> array(			'forum_id'				=> array('UINT', 0),			'user_id'				=> array('UINT', 0),			'session_id'			=> array('CHAR:32', ''),		),		'PRIMARY_KEY'	=> array('forum_id', 'user_id', 'session_id'),	);	$schema_data['phpbb_forums_track'] = array(		'COLUMNS'		=> array(			'user_id'				=> array('UINT', 0),			'forum_id'				=> array('UINT', 0),			'mark_time'				=> array('TIMESTAMP', 0),		),		'PRIMARY_KEY'	=> array('user_id', 'forum_id'),	);	$schema_data['phpbb_forums_watch'] = array(		'COLUMNS'		=> array(			'forum_id'				=> array('UINT', 0),			'user_id'				=> array('UINT', 0),			'notify_status'			=> array('BOOL', 0),		),		'KEYS'			=> array(			'forum_id'				=> array('INDEX', 'forum_id'),			'user_id'				=> array('INDEX', 'user_id'),			'notify_stat'			=> array('INDEX', 'notify_status'),		),	);	$schema_data['phpbb_groups'] = array(		'COLUMNS'		=> array(			'group_id'				=> array('UINT', NULL, 'auto_increment'),			'group_type'			=> array('TINT:4', 1),			'group_founder_manage'	=> array('BOOL', 0),			'group_skip_auth'		=> array('BOOL', 0),			'group_name'			=> array('VCHAR_CI', ''),			'group_desc'			=> array('TEXT_UNI', ''),			'group_desc_bitfield'	=> array('VCHAR:255', ''),			'group_desc_options'	=> array('UINT:11', 7),			'group_desc_uid'		=> array('VCHAR:8', ''),			'group_display'			=> array('BOOL', 0),			'group_avatar'			=> array('VCHAR', ''),			'group_avatar_type'		=> array('TINT:2', 0),			'group_avatar_width'	=> array('USINT', 0),			'group_avatar_height'	=> array('USINT', 0),			'group_rank'			=> array('UINT', 0),			'group_colour'			=> array('VCHAR:6', ''),			'group_sig_chars'		=> array('UINT', 0),			'group_receive_pm'		=> array('BOOL', 0),			'group_message_limit'	=> array('UINT', 0),			'group_max_recipients'	=> array('UINT', 0),			'group_legend'			=> array('BOOL', 1),		),		'PRIMARY_KEY'	=> 'group_id',		'KEYS'			=> array(			'group_legend_name'		=> array('INDEX', array('group_legend', 'group_name')),		),	);	$schema_data['phpbb_icons'] = array(		'COLUMNS'		=> array(			'icons_id'				=> array('UINT', NULL, 'auto_increment'),			'icons_url'				=> array('VCHAR', ''),			'icons_width'			=> array('TINT:4', 0),			'icons_height'			=> array('TINT:4', 0),			'icons_order'			=> array('UINT', 0),			'display_on_posting'	=> array('BOOL', 1),		),		'PRIMARY_KEY'	=> 'icons_id',		'KEYS'			=> array(			'display_on_posting'	=> array('INDEX', 'display_on_posting'),		),	);	$schema_data['phpbb_lang'] = array(		'COLUMNS'		=> array(			'lang_id'				=> array('TINT:4', NULL, 'auto_increment'),			'lang_iso'				=> array('VCHAR:30', ''),			'lang_dir'				=> array('VCHAR:30', ''),			'lang_english_name'		=> array('VCHAR_UNI:100', ''),			'lang_local_name'		=> array('VCHAR_UNI:255', ''),			'lang_author'			=> array('VCHAR_UNI:255', ''),		),		'PRIMARY_KEY'	=> 'lang_id',		'KEYS'			=> array(			'lang_iso'				=> array('INDEX', 'lang_iso'),		),	);	$schema_data['phpbb_log'] = array(		'COLUMNS'		=> array(			'log_id'				=> array('UINT', NULL, 'auto_increment'),			'log_type'				=> array('TINT:4', 0),			'user_id'				=> array('UINT', 0),			'forum_id'				=> array('UINT', 0),			'topic_id'				=> array('UINT', 0),			'reportee_id'			=> array('UINT', 0),			'log_ip'				=> array('VCHAR:40', ''),			'log_time'				=> array('TIMESTAMP', 0),			'log_operation'			=> array('TEXT_UNI', ''),			'log_data'				=> array('MTEXT_UNI', ''),		),		'PRIMARY_KEY'	=> 'log_id',		'KEYS'			=> array(			'log_type'				=> array('INDEX', 'log_type'),			'forum_id'				=> array('INDEX', 'forum_id'),			'topic_id'				=> array('INDEX', 'topic_id'),			'reportee_id'			=> array('INDEX', 'reportee_id'),			'user_id'				=> array('INDEX', 'user_id'),		),	);	$schema_data['phpbb_moderator_cache'] = array(		'COLUMNS'		=> array(			'forum_id'				=> array('UINT', 0),			'user_id'				=> array('UINT', 0),			'username'				=> array('VCHAR_UNI:255', ''),			'group_id'				=> array('UINT', 0),			'group_name'			=> array('VCHAR_UNI', ''),			'display_on_index'		=> array('BOOL', 1),		),		'KEYS'			=> array(			'disp_idx'				=> array('INDEX', 'display_on_index'),			'forum_id'				=> array('INDEX', 'forum_id'),		),	);	$schema_data['phpbb_modules'] = array(		'COLUMNS'		=> array(			'module_id'				=> array('UINT', NULL, 'auto_increment'),			'module_enabled'		=> array('BOOL', 1),			'module_display'		=> array('BOOL', 1),			'module_basename'		=> array('VCHAR', ''),			'module_class'			=> array('VCHAR:10', ''),			'parent_id'				=> array('UINT', 0),			'left_id'				=> array('UINT', 0),			'right_id'				=> array('UINT', 0),			'module_langname'		=> array('VCHAR', ''),			'module_mode'			=> array('VCHAR', ''),			'module_auth'			=> array('VCHAR', ''),		),		'PRIMARY_KEY'	=> 'module_id',		'KEYS'			=> array(			'left_right_id'			=> array('INDEX', array('left_id', 'right_id')),			'module_enabled'		=> array('INDEX', 'module_enabled'),			'class_left_id'			=> array('INDEX', array('module_class', 'left_id')),		),	);	$schema_data['phpbb_poll_options'] = array(		'COLUMNS'		=> array(			'poll_option_id'		=> array('TINT:4', 0),			'topic_id'				=> array('UINT', 0),			'poll_option_text'		=> array('TEXT_UNI', ''),			'poll_option_total'		=> array('UINT', 0),		),		'KEYS'			=> array(			'poll_opt_id'			=> array('INDEX', 'poll_option_id'),			'topic_id'				=> array('INDEX', 'topic_id'),		),	);	$schema_data['phpbb_poll_votes'] = array(		'COLUMNS'		=> array(			'topic_id'				=> array('UINT', 0),			'poll_option_id'		=> array('TINT:4', 0),			'vote_user_id'			=> array('UINT', 0),			'vote_user_ip'			=> array('VCHAR:40', ''),		),		'KEYS'			=> array(			'topic_id'				=> array('INDEX', 'topic_id'),			'vote_user_id'			=> array('INDEX', 'vote_user_id'),			'vote_user_ip'			=> array('INDEX', 'vote_user_ip'),		),	);	$schema_data['phpbb_posts'] = array(		'COLUMNS'		=> array(			'post_id'				=> array('UINT', NULL, 'auto_increment'),			'topic_id'				=> array('UINT', 0),			'forum_id'				=> array('UINT', 0),			'poster_id'				=> array('UINT', 0),			'icon_id'				=> array('UINT', 0),			'poster_ip'				=> array('VCHAR:40', ''),			'post_time'				=> array('TIMESTAMP', 0),			'post_approved'			=> array('BOOL', 1),			'post_reported'			=> array('BOOL', 0),			'enable_bbcode'			=> array('BOOL', 1),			'enable_smilies'		=> array('BOOL', 1),			'enable_magic_url'		=> array('BOOL', 1),			'enable_sig'			=> array('BOOL', 1),			'post_username'			=> array('VCHAR_UNI:255', ''),			'post_subject'			=> array('STEXT_UNI', '', 'true_sort'),			'post_text'				=> array('MTEXT_UNI', ''),			'post_checksum'			=> array('VCHAR:32', ''),			'post_attachment'		=> array('BOOL', 0),			'bbcode_bitfield'		=> array('VCHAR:255', ''),			'bbcode_uid'			=> array('VCHAR:8', ''),			'post_postcount'		=> array('BOOL', 1),			'post_edit_time'		=> array('TIMESTAMP', 0),			'post_edit_reason'		=> array('STEXT_UNI', ''),			'post_edit_user'		=> array('UINT', 0),			'post_edit_count'		=> array('USINT', 0),			'post_edit_locked'		=> array('BOOL', 0),		),		'PRIMARY_KEY'	=> 'post_id',		'KEYS'			=> array(			'forum_id'				=> array('INDEX', 'forum_id'),			'topic_id'				=> array('INDEX', 'topic_id'),			'poster_ip'				=> array('INDEX', 'poster_ip'),			'poster_id'				=> array('INDEX', 'poster_id'),			'post_approved'			=> array('INDEX', 'post_approved'),			'post_username'			=> array('INDEX', 'post_username'),			'tid_post_time'			=> array('INDEX', array('topic_id', 'post_time')),		),	);	$schema_data['phpbb_privmsgs'] = array(		'COLUMNS'		=> array(			'msg_id'				=> array('UINT', NULL, 'auto_increment'),			'root_level'			=> array('UINT', 0),			'author_id'				=> array('UINT', 0),			'icon_id'				=> array('UINT', 0),			'author_ip'				=> array('VCHAR:40', ''),			'message_time'			=> array('TIMESTAMP', 0),			'enable_bbcode'			=> array('BOOL', 1),			'enable_smilies'		=> array('BOOL', 1),			'enable_magic_url'		=> array('BOOL', 1),			'enable_sig'			=> array('BOOL', 1),			'message_subject'		=> array('STEXT_UNI', ''),			'message_text'			=> array('MTEXT_UNI', ''),			'message_edit_reason'	=> array('STEXT_UNI', ''),			'message_edit_user'		=> array('UINT', 0),			'message_attachment'	=> array('BOOL', 0),			'bbcode_bitfield'		=> array('VCHAR:255', ''),			'bbcode_uid'			=> array('VCHAR:8', ''),			'message_edit_time'		=> array('TIMESTAMP', 0),			'message_edit_count'	=> array('USINT', 0),			'to_address'			=> array('TEXT_UNI', ''),			'bcc_address'			=> array('TEXT_UNI', ''),			'message_reported'		=> array('BOOL', 0),		),		'PRIMARY_KEY'	=> 'msg_id',		'KEYS'			=> array(			'author_ip'				=> array('INDEX', 'author_ip'),			'message_time'			=> array('INDEX', 'message_time'),			'author_id'				=> array('INDEX', 'author_id'),			'root_level'			=> array('INDEX', 'root_level'),		),	);	$schema_data['phpbb_privmsgs_folder'] = array(		'COLUMNS'		=> array(			'folder_id'				=> array('UINT', NULL, 'auto_increment'),			'user_id'				=> array('UINT', 0),			'folder_name'			=> array('VCHAR_UNI', ''),			'pm_count'				=> array('UINT', 0),		),		'PRIMARY_KEY'	=> 'folder_id',		'KEYS'			=> array(			'user_id'				=> array('INDEX', 'user_id'),		),	);	$schema_data['phpbb_privmsgs_rules'] = array(		'COLUMNS'		=> array(			'rule_id'				=> array('UINT', NULL, 'auto_increment'),			'user_id'				=> array('UINT', 0),			'rule_check'			=> array('UINT', 0),			'rule_connection'		=> array('UINT', 0),			'rule_string'			=> array('VCHAR_UNI', ''),			'rule_user_id'			=> array('UINT', 0),			'rule_group_id'			=> array('UINT', 0),			'rule_action'			=> array('UINT', 0),			'rule_folder_id'		=> array('INT:11', 0),		),		'PRIMARY_KEY'	=> 'rule_id',		'KEYS'			=> array(			'user_id'				=> array('INDEX', 'user_id'),		),	);	$schema_data['phpbb_privmsgs_to'] = array(		'COLUMNS'		=> array(			'msg_id'				=> array('UINT', 0),			'user_id'				=> array('UINT', 0),			'author_id'				=> array('UINT', 0),			'pm_deleted'			=> array('BOOL', 0),			'pm_new'				=> array('BOOL', 1),			'pm_unread'				=> array('BOOL', 1),			'pm_replied'			=> array('BOOL', 0),			'pm_marked'				=> array('BOOL', 0),			'pm_forwarded'			=> array('BOOL', 0),			'folder_id'				=> array('INT:11', 0),		),		'KEYS'			=> array(			'msg_id'				=> array('INDEX', 'msg_id'),			'author_id'				=> array('INDEX', 'author_id'),			'usr_flder_id'			=> array('INDEX', array('user_id', 'folder_id')),		),	);	$schema_data['phpbb_profile_fields'] = array(		'COLUMNS'		=> array(			'field_id'				=> array('UINT', NULL, 'auto_increment'),			'field_name'			=> array('VCHAR_UNI', ''),			'field_type'			=> array('TINT:4', 0),			'field_ident'			=> array('VCHAR:20', ''),			'field_length'			=> array('VCHAR:20', ''),			'field_minlen'			=> array('VCHAR', ''),			'field_maxlen'			=> array('VCHAR', ''),			'field_novalue'			=> array('VCHAR_UNI', ''),			'field_default_value'	=> array('VCHAR_UNI', ''),			'field_validation'		=> array('VCHAR_UNI:20', ''),			'field_required'		=> array('BOOL', 0),			'field_show_on_reg'		=> array('BOOL', 0),			'field_show_on_vt'		=> array('BOOL', 0),			'field_show_profile'	=> array('BOOL', 0),			'field_hide'			=> array('BOOL', 0),			'field_no_view'			=> array('BOOL', 0),			'field_active'			=> array('BOOL', 0),			'field_order'			=> array('UINT', 0),		),		'PRIMARY_KEY'	=> 'field_id',		'KEYS'			=> array(			'fld_type'			=> array('INDEX', 'field_type'),			'fld_ordr'			=> array('INDEX', 'field_order'),		),	);	$schema_data['phpbb_profile_fields_data'] = array(		'COLUMNS'		=> array(			'user_id'				=> array('UINT', 0),		),		'PRIMARY_KEY'	=> 'user_id',	);	$schema_data['phpbb_profile_fields_lang'] = array(		'COLUMNS'		=> array(			'field_id'				=> array('UINT', 0),			'lang_id'				=> array('UINT', 0),			'option_id'				=> array('UINT', 0),			'field_type'			=> array('TINT:4', 0),			'lang_value'			=> array('VCHAR_UNI', ''),		),		'PRIMARY_KEY'	=> array('field_id', 'lang_id', 'option_id'),	);	$schema_data['phpbb_profile_lang'] = array(		'COLUMNS'		=> array(			'field_id'				=> array('UINT', 0),			'lang_id'				=> array('UINT', 0),			'lang_name'				=> array('VCHAR_UNI', ''),			'lang_explain'			=> array('TEXT_UNI', ''),			'lang_default_value'	=> array('VCHAR_UNI', ''),		),		'PRIMARY_KEY'	=> array('field_id', 'lang_id'),	);	$schema_data['phpbb_ranks'] = array(		'COLUMNS'		=> array(			'rank_id'				=> array('UINT', NULL, 'auto_increment'),			'rank_title'			=> array('VCHAR_UNI', ''),			'rank_min'				=> array('UINT', 0),			'rank_special'			=> array('BOOL', 0),			'rank_image'			=> array('VCHAR', ''),		),		'PRIMARY_KEY'	=> 'rank_id',	);	$schema_data['phpbb_reports'] = array(		'COLUMNS'		=> array(			'report_id'				=> array('UINT', NULL, 'auto_increment'),			'reason_id'				=> array('USINT', 0),			'post_id'				=> array('UINT', 0),			'pm_id'					=> array('UINT', 0),			'user_id'				=> array('UINT', 0),			'user_notify'			=> array('BOOL', 0),			'report_closed'			=> array('BOOL', 0),			'report_time'			=> array('TIMESTAMP', 0),			'report_text'			=> array('MTEXT_UNI', ''),		),		'PRIMARY_KEY'	=> 'report_id',		'KEYS'			=> array(			'post_id'			=> array('INDEX', 'post_id'),			'pm_id'				=> array('INDEX', 'pm_id'),		),	);	$schema_data['phpbb_reports_reasons'] = array(		'COLUMNS'		=> array(			'reason_id'				=> array('USINT', NULL, 'auto_increment'),			'reason_title'			=> array('VCHAR_UNI', ''),			'reason_description'	=> array('MTEXT_UNI', ''),			'reason_order'			=> array('USINT', 0),		),		'PRIMARY_KEY'	=> 'reason_id',	);	$schema_data['phpbb_search_results'] = array(		'COLUMNS'		=> array(			'search_key'			=> array('VCHAR:32', ''),			'search_time'			=> array('TIMESTAMP', 0),			'search_keywords'		=> array('MTEXT_UNI', ''),			'search_authors'		=> array('MTEXT', ''),		),		'PRIMARY_KEY'	=> 'search_key',	);	$schema_data['phpbb_search_wordlist'] = array(		'COLUMNS'		=> array(			'word_id'			=> array('UINT', NULL, 'auto_increment'),			'word_text'			=> array('VCHAR_UNI', ''),			'word_common'		=> array('BOOL', 0),			'word_count'		=> array('UINT', 0),		),		'PRIMARY_KEY'	=> 'word_id',		'KEYS'			=> array(			'wrd_txt'			=> array('UNIQUE', 'word_text'),			'wrd_cnt'			=> array('INDEX', 'word_count'),		),	);	$schema_data['phpbb_search_wordmatch'] = array(		'COLUMNS'		=> array(			'post_id'			=> array('UINT', 0),			'word_id'			=> array('UINT', 0),			'title_match'		=> array('BOOL', 0),		),		'KEYS'			=> array(			'unq_mtch'			=> array('UNIQUE', array('word_id', 'post_id', 'title_match')),			'word_id'			=> array('INDEX', 'word_id'),			'post_id'			=> array('INDEX', 'post_id'),		),	);	$schema_data['phpbb_sessions'] = array(		'COLUMNS'		=> array(			'session_id'			=> array('CHAR:32', ''),			'session_user_id'		=> array('UINT', 0),			'session_forum_id'		=> array('UINT', 0),			'session_last_visit'	=> array('TIMESTAMP', 0),			'session_start'			=> array('TIMESTAMP', 0),			'session_time'			=> array('TIMESTAMP', 0),			'session_ip'			=> array('VCHAR:40', ''),			'session_browser'		=> array('VCHAR:150', ''),			'session_forwarded_for'	=> array('VCHAR:255', ''),			'session_page'			=> array('VCHAR_UNI', ''),			'session_viewonline'	=> array('BOOL', 1),			'session_autologin'		=> array('BOOL', 0),			'session_admin'			=> array('BOOL', 0),		),		'PRIMARY_KEY'	=> 'session_id',		'KEYS'			=> array(			'session_time'		=> array('INDEX', 'session_time'),			'session_user_id'	=> array('INDEX', 'session_user_id'),			'session_fid'		=> array('INDEX', 'session_forum_id'),		),	);	$schema_data['phpbb_sessions_keys'] = array(		'COLUMNS'		=> array(			'key_id'			=> array('CHAR:32', ''),			'user_id'			=> array('UINT', 0),			'last_ip'			=> array('VCHAR:40', ''),			'last_login'		=> array('TIMESTAMP', 0),		),		'PRIMARY_KEY'	=> array('key_id', 'user_id'),		'KEYS'			=> array(			'last_login'		=> array('INDEX', 'last_login'),		),	);	$schema_data['phpbb_sitelist'] = array(		'COLUMNS'		=> array(			'site_id'		=> array('UINT', NULL, 'auto_increment'),			'site_ip'		=> array('VCHAR:40', ''),			'site_hostname'	=> array('VCHAR', ''),			'ip_exclude'	=> array('BOOL', 0),		),		'PRIMARY_KEY'		=> 'site_id',	);	$schema_data['phpbb_smilies'] = array(		'COLUMNS'		=> array(			'smiley_id'			=> array('UINT', NULL, 'auto_increment'),			// We may want to set 'code' to VCHAR:50 or check if unicode support is possible... at the moment only ASCII characters are allowed.			'code'				=> array('VCHAR_UNI:50', ''),			'emotion'			=> array('VCHAR_UNI:50', ''),			'smiley_url'		=> array('VCHAR:50', ''),			'smiley_width'		=> array('USINT', 0),			'smiley_height'		=> array('USINT', 0),			'smiley_order'		=> array('UINT', 0),			'display_on_posting'=> array('BOOL', 1),		),		'PRIMARY_KEY'	=> 'smiley_id',		'KEYS'			=> array(			'display_on_post'		=> array('INDEX', 'display_on_posting'),		),	);	$schema_data['phpbb_styles'] = array(		'COLUMNS'		=> array(			'style_id'				=> array('UINT', NULL, 'auto_increment'),			'style_name'			=> array('VCHAR_UNI:255', ''),			'style_copyright'		=> array('VCHAR_UNI', ''),			'style_active'			=> array('BOOL', 1),			'template_id'			=> array('UINT', 0),			'theme_id'				=> array('UINT', 0),			'imageset_id'			=> array('UINT', 0),		),		'PRIMARY_KEY'	=> 'style_id',		'KEYS'			=> array(			'style_name'		=> array('UNIQUE', 'style_name'),			'template_id'		=> array('INDEX', 'template_id'),			'theme_id'			=> array('INDEX', 'theme_id'),			'imageset_id'		=> array('INDEX', 'imageset_id'),		),	);	$schema_data['phpbb_styles_template'] = array(		'COLUMNS'		=> array(			'template_id'			=> array('UINT', NULL, 'auto_increment'),			'template_name'			=> array('VCHAR_UNI:255', ''),			'template_copyright'	=> array('VCHAR_UNI', ''),			'template_path'			=> array('VCHAR:100', ''),			'bbcode_bitfield'		=> array('VCHAR:255', 'kNg='),			'template_storedb'		=> array('BOOL', 0),			'template_inherits_id'		=> array('UINT:4', 0),			'template_inherit_path'		=> array('VCHAR', ''),		),		'PRIMARY_KEY'	=> 'template_id',		'KEYS'			=> array(			'tmplte_nm'				=> array('UNIQUE', 'template_name'),		),	);	$schema_data['phpbb_styles_template_data'] = array(		'COLUMNS'		=> array(			'template_id'			=> array('UINT', 0),			'template_filename'		=> array('VCHAR:100', ''),			'template_included'		=> array('TEXT', ''),			'template_mtime'		=> array('TIMESTAMP', 0),			'template_data'			=> array('MTEXT_UNI', ''),		),		'KEYS'			=> array(			'tid'					=> array('INDEX', 'template_id'),			'tfn'					=> array('INDEX', 'template_filename'),		),	);	$schema_data['phpbb_styles_theme'] = array(		'COLUMNS'		=> array(			'theme_id'				=> array('UINT', NULL, 'auto_increment'),			'theme_name'			=> array('VCHAR_UNI:255', ''),			'theme_copyright'		=> array('VCHAR_UNI', ''),			'theme_path'			=> array('VCHAR:100', ''),			'theme_storedb'			=> array('BOOL', 0),			'theme_mtime'			=> array('TIMESTAMP', 0),			'theme_data'			=> array('MTEXT_UNI', ''),		),		'PRIMARY_KEY'	=> 'theme_id',		'KEYS'			=> array(			'theme_name'		=> array('UNIQUE', 'theme_name'),		),	);	$schema_data['phpbb_styles_imageset'] = array(		'COLUMNS'		=> array(			'imageset_id'				=> array('UINT', NULL, 'auto_increment'),			'imageset_name'				=> array('VCHAR_UNI:255', ''),			'imageset_copyright'		=> array('VCHAR_UNI', ''),			'imageset_path'				=> array('VCHAR:100', ''),		),		'PRIMARY_KEY'		=> 'imageset_id',		'KEYS'				=> array(			'imgset_nm'			=> array('UNIQUE', 'imageset_name'),		),	);	$schema_data['phpbb_styles_imageset_data'] = array(		'COLUMNS'		=> array(			'image_id'				=> array('UINT', NULL, 'auto_increment'),			'image_name'			=> array('VCHAR:200', ''),			'image_filename'		=> array('VCHAR:200', ''),			'image_lang'			=> array('VCHAR:30', ''),			'image_height'			=> array('USINT', 0),			'image_width'			=> array('USINT', 0),			'imageset_id'			=> array('UINT', 0),		),		'PRIMARY_KEY'		=> 'image_id',		'KEYS'				=> array(			'i_d'			=> array('INDEX', 'imageset_id'),		),	);	$schema_data['phpbb_topics'] = array(		'COLUMNS'		=> array(			'topic_id'					=> array('UINT', NULL, 'auto_increment'),			'forum_id'					=> array('UINT', 0),			'icon_id'					=> array('UINT', 0),			'topic_attachment'			=> array('BOOL', 0),			'topic_approved'			=> array('BOOL', 1),			'topic_reported'			=> array('BOOL', 0),			'topic_title'				=> array('STEXT_UNI', '', 'true_sort'),			'topic_poster'				=> array('UINT', 0),			'topic_time'				=> array('TIMESTAMP', 0),			'topic_time_limit'			=> array('TIMESTAMP', 0),			'topic_views'				=> array('UINT', 0),			'topic_replies'				=> array('UINT', 0),			'topic_replies_real'		=> array('UINT', 0),			'topic_status'				=> array('TINT:3', 0),			'topic_type'				=> array('TINT:3', 0),			'topic_first_post_id'		=> array('UINT', 0),			'topic_first_poster_name'	=> array('VCHAR_UNI', ''),			'topic_first_poster_colour'	=> array('VCHAR:6', ''),			'topic_last_post_id'		=> array('UINT', 0),			'topic_last_poster_id'		=> array('UINT', 0),			'topic_last_poster_name'	=> array('VCHAR_UNI', ''),			'topic_last_poster_colour'	=> array('VCHAR:6', ''),			'topic_last_post_subject'	=> array('STEXT_UNI', ''),			'topic_last_post_time'		=> array('TIMESTAMP', 0),			'topic_last_view_time'		=> array('TIMESTAMP', 0),			'topic_moved_id'			=> array('UINT', 0),			'topic_bumped'				=> array('BOOL', 0),			'topic_bumper'				=> array('UINT', 0),			'poll_title'				=> array('STEXT_UNI', ''),			'poll_start'				=> array('TIMESTAMP', 0),			'poll_length'				=> array('TIMESTAMP', 0),			'poll_max_options'			=> array('TINT:4', 1),			'poll_last_vote'			=> array('TIMESTAMP', 0),			'poll_vote_change'			=> array('BOOL', 0),		),		'PRIMARY_KEY'	=> 'topic_id',		'KEYS'			=> array(			'forum_id'			=> array('INDEX', 'forum_id'),			'forum_id_type'		=> array('INDEX', array('forum_id', 'topic_type')),			'last_post_time'	=> array('INDEX', 'topic_last_post_time'),			'topic_approved'	=> array('INDEX', 'topic_approved'),			'forum_appr_last'	=> array('INDEX', array('forum_id', 'topic_approved', 'topic_last_post_id')),			'fid_time_moved'	=> array('INDEX', array('forum_id', 'topic_last_post_time', 'topic_moved_id')),		),	);	$schema_data['phpbb_topics_track'] = array(		'COLUMNS'		=> array(			'user_id'			=> array('UINT', 0),			'topic_id'			=> array('UINT', 0),			'forum_id'			=> array('UINT', 0),			'mark_time'			=> array('TIMESTAMP', 0),		),		'PRIMARY_KEY'	=> array('user_id', 'topic_id'),		'KEYS'			=> array(			'topic_id'			=> array('INDEX', 'topic_id'),			'forum_id'			=> array('INDEX', 'forum_id'),		),	);	$schema_data['phpbb_topics_posted'] = array(		'COLUMNS'		=> array(			'user_id'			=> array('UINT', 0),			'topic_id'			=> array('UINT', 0),			'topic_posted'		=> array('BOOL', 0),		),		'PRIMARY_KEY'	=> array('user_id', 'topic_id'),	);	$schema_data['phpbb_topics_watch'] = array(		'COLUMNS'		=> array(			'topic_id'			=> array('UINT', 0),			'user_id'			=> array('UINT', 0),			'notify_status'		=> array('BOOL', 0),		),		'KEYS'			=> array(			'topic_id'			=> array('INDEX', 'topic_id'),			'user_id'			=> array('INDEX', 'user_id'),			'notify_stat'		=> array('INDEX', 'notify_status'),		),	);	$schema_data['phpbb_user_group'] = array(		'COLUMNS'		=> array(			'group_id'			=> array('UINT', 0),			'user_id'			=> array('UINT', 0),			'group_leader'		=> array('BOOL', 0),			'user_pending'		=> array('BOOL', 1),		),		'KEYS'			=> array(			'group_id'			=> array('INDEX', 'group_id'),			'user_id'			=> array('INDEX', 'user_id'),			'group_leader'		=> array('INDEX', 'group_leader'),		),	);	$schema_data['phpbb_users'] = array(		'COLUMNS'		=> array(			'user_id'					=> array('UINT', NULL, 'auto_increment'),			'user_type'					=> array('TINT:2', 0),			'group_id'					=> array('UINT', 3),			'user_permissions'			=> array('MTEXT', ''),			'user_perm_from'			=> array('UINT', 0),			'user_ip'					=> array('VCHAR:40', ''),			'user_regdate'				=> array('TIMESTAMP', 0),			'username'					=> array('VCHAR_CI', ''),			'username_clean'			=> array('VCHAR_CI', ''),			'user_password'				=> array('VCHAR_UNI:40', ''),			'user_passchg'				=> array('TIMESTAMP', 0),			'user_pass_convert'			=> array('BOOL', 0),			'user_email'				=> array('VCHAR_UNI:100', ''),			'user_email_hash'			=> array('BINT', 0),			'user_birthday'				=> array('VCHAR:10', ''),			'user_lastvisit'			=> array('TIMESTAMP', 0),			'user_lastmark'				=> array('TIMESTAMP', 0),			'user_lastpost_time'		=> array('TIMESTAMP', 0),			'user_lastpage'				=> array('VCHAR_UNI:200', ''),			'user_last_confirm_key'		=> array('VCHAR:10', ''),			'user_last_search'			=> array('TIMESTAMP', 0),			'user_warnings'				=> array('TINT:4', 0),			'user_last_warning'			=> array('TIMESTAMP', 0),			'user_login_attempts'		=> array('TINT:4', 0),			'user_inactive_reason'		=> array('TINT:2', 0),			'user_inactive_time'		=> array('TIMESTAMP', 0),			'user_posts'				=> array('UINT', 0),			'user_lang'					=> array('VCHAR:30', ''),			'user_timezone'				=> array('DECIMAL', 0),			'user_dst'					=> array('BOOL', 0),			'user_dateformat'			=> array('VCHAR_UNI:30', 'd M Y H:i'),			'user_style'				=> array('UINT', 0),			'user_rank'					=> array('UINT', 0),			'user_colour'				=> array('VCHAR:6', ''),			'user_new_privmsg'			=> array('INT:4', 0),			'user_unread_privmsg'		=> array('INT:4', 0),			'user_last_privmsg'			=> array('TIMESTAMP', 0),			'user_message_rules'		=> array('BOOL', 0),			'user_full_folder'			=> array('INT:11', -3),			'user_emailtime'			=> array('TIMESTAMP', 0),			'user_topic_show_days'		=> array('USINT', 0),			'user_topic_sortby_type'	=> array('VCHAR:1', 't'),			'user_topic_sortby_dir'		=> array('VCHAR:1', 'd'),			'user_post_show_days'		=> array('USINT', 0),			'user_post_sortby_type'		=> array('VCHAR:1', 't'),			'user_post_sortby_dir'		=> array('VCHAR:1', 'a'),			'user_notify'				=> array('BOOL', 0),			'user_notify_pm'			=> array('BOOL', 1),			'user_notify_type'			=> array('TINT:4', 0),			'user_allow_pm'				=> array('BOOL', 1),			'user_allow_viewonline'		=> array('BOOL', 1),			'user_allow_viewemail'		=> array('BOOL', 1),			'user_allow_massemail'		=> array('BOOL', 1),			'user_options'				=> array('UINT:11', 230271),			'user_avatar'				=> array('VCHAR', ''),			'user_avatar_type'			=> array('TINT:2', 0),			'user_avatar_width'			=> array('USINT', 0),			'user_avatar_height'		=> array('USINT', 0),			'user_sig'					=> array('MTEXT_UNI', ''),			'user_sig_bbcode_uid'		=> array('VCHAR:8', ''),			'user_sig_bbcode_bitfield'	=> array('VCHAR:255', ''),			'user_from'					=> array('VCHAR_UNI:100', ''),			'user_icq'					=> array('VCHAR:15', ''),			'user_aim'					=> array('VCHAR_UNI', ''),			'user_yim'					=> array('VCHAR_UNI', ''),			'user_msnm'					=> array('VCHAR_UNI', ''),			'user_jabber'				=> array('VCHAR_UNI', ''),			'user_website'				=> array('VCHAR_UNI:200', ''),			'user_occ'					=> array('TEXT_UNI', ''),			'user_interests'			=> array('TEXT_UNI', ''),			'user_actkey'				=> array('VCHAR:32', ''),			'user_newpasswd'			=> array('VCHAR_UNI:40', ''),			'user_form_salt'			=> array('VCHAR_UNI:32', ''),			'user_new'					=> array('BOOL', 1),			'user_reminded'				=> array('TINT:4', 0),			'user_reminded_time'		=> array('TIMESTAMP', 0),		),		'PRIMARY_KEY'	=> 'user_id',		'KEYS'			=> array(			'user_birthday'				=> array('INDEX', 'user_birthday'),			'user_email_hash'			=> array('INDEX', 'user_email_hash'),			'user_type'					=> array('INDEX', 'user_type'),			'username_clean'			=> array('UNIQUE', 'username_clean'),		),	);	$schema_data['phpbb_warnings'] = array(		'COLUMNS'		=> array(			'warning_id'			=> array('UINT', NULL, 'auto_increment'),			'user_id'				=> array('UINT', 0),			'post_id'				=> array('UINT', 0),			'log_id'				=> array('UINT', 0),			'warning_time'			=> array('TIMESTAMP', 0),		),		'PRIMARY_KEY'	=> 'warning_id',	);	$schema_data['phpbb_words'] = array(		'COLUMNS'		=> array(			'word_id'				=> array('UINT', NULL, 'auto_increment'),			'word'					=> array('VCHAR_UNI', ''),			'replacement'			=> array('VCHAR_UNI', ''),		),		'PRIMARY_KEY'	=> 'word_id',	);	$schema_data['phpbb_zebra'] = array(		'COLUMNS'		=> array(			'user_id'				=> array('UINT', 0),			'zebra_id'				=> array('UINT', 0),			'friend'				=> array('BOOL', 0),			'foe'					=> array('BOOL', 0),		),		'PRIMARY_KEY'	=> array('user_id', 'zebra_id'),	);	return $schema_data;}?>
<?php/**** @package mcp* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @ignore*/if (!defined('IN_PHPBB')){	exit;}/*** View topic in MCP*/function mcp_topic_view($id, $mode, $action){	global $phpEx, $phpbb_root_path, $config;	global $template, $db, $user, $auth, $cache;	$url = append_sid("{$phpbb_root_path}mcp.$phpEx?" . extra_url());	$user->add_lang('viewtopic');	$topic_id = request_var('t', 0);	$topic_info = get_topic_data(array($topic_id), false, true);	if (!sizeof($topic_info))	{		trigger_error('TOPIC_NOT_EXIST');	}	$topic_info = $topic_info[$topic_id];	// Set up some vars	$icon_id		= request_var('icon', 0);	$subject		= utf8_normalize_nfc(request_var('subject', '', true));	$start			= request_var('start', 0);	$sort_days_old	= request_var('st_old', 0);	$forum_id		= request_var('f', 0);	$to_topic_id	= request_var('to_topic_id', 0);	$to_forum_id	= request_var('to_forum_id', 0);	$sort			= isset($_POST['sort']) ? true : false;	$submitted_id_list	= request_var('post_ids', array(0));	$checked_ids = $post_id_list = request_var('post_id_list', array(0));	// Split Topic?	if ($action == 'split_all' || $action == 'split_beyond')	{		if (!$sort)		{			split_topic($action, $topic_id, $to_forum_id, $subject);		}		$action = 'split';	}	// Merge Posts?	if ($action == 'merge_posts')	{		if (!$sort)		{			merge_posts($topic_id, $to_topic_id);		}		$action = 'merge';	}	if ($action == 'split' && !$subject)	{		$subject = $topic_info['topic_title'];	}	// Approve posts?	if ($action == 'approve' && $auth->acl_get('m_approve', $topic_info['forum_id']))	{		include($phpbb_root_path . 'includes/mcp/mcp_queue.' . $phpEx);		include_once($phpbb_root_path . 'includes/functions_posting.' . $phpEx);		include_once($phpbb_root_path . 'includes/functions_messenger.' . $phpEx);		if (!sizeof($post_id_list))		{			trigger_error('NO_POST_SELECTED');		}		if (!$sort)		{			approve_post($post_id_list, $id, $mode);		}	}	// Jumpbox, sort selects and that kind of things	make_jumpbox($url . "&amp;i=$id&amp;mode=forum_view", $topic_info['forum_id'], false, 'm_', true);	$where_sql = ($action == 'reports') ? 'WHERE post_reported = 1 AND ' : 'WHERE';	$sort_days = $total = 0;	$sort_key = $sort_dir = '';	$sort_by_sql = $sort_order_sql = array();	mcp_sorting('viewtopic', $sort_days, $sort_key, $sort_dir, $sort_by_sql, $sort_order_sql, $total, $topic_info['forum_id'], $topic_id, $where_sql);	$limit_time_sql = ($sort_days) ? 'AND p.post_time >= ' . (time() - ($sort_days * 86400)) : '';	if ($total == -1)	{		if ($auth->acl_get('m_approve', $topic_info['forum_id']))		{			$total = $topic_info['topic_replies_real'] + 1;		}		else		{			$total = $topic_info['topic_replies'] + 1;		}	}	$posts_per_page = max(0, request_var('posts_per_page', intval($config['posts_per_page'])));	if ($posts_per_page == 0)	{		$posts_per_page = $total;	}	if ((!empty($sort_days_old) && $sort_days_old != $sort_days) || $total <= $posts_per_page)	{		$start = 0;	}	// Make sure $start is set to the last page if it exceeds the amount	if ($start < 0 || $start >= $total)	{		$start = ($start < 0) ? 0 : floor(($total - 1) / $posts_per_page) * $posts_per_page;	}	$sql = 'SELECT u.username, u.username_clean, u.user_colour, p.*		FROM ' . POSTS_TABLE . ' p, ' . USERS_TABLE . ' u		WHERE ' . (($action == 'reports') ? 'p.post_reported = 1 AND ' : '') . '			p.topic_id = ' . $topic_id . ' ' .			((!$auth->acl_get('m_approve', $topic_info['forum_id'])) ? ' AND p.post_approved = 1 ' : '') . '			AND p.poster_id = u.user_id ' .			$limit_time_sql . '		ORDER BY ' . $sort_order_sql;	$result = $db->sql_query_limit($sql, $posts_per_page, $start);	$rowset = $post_id_list = array();	$bbcode_bitfield = '';	while ($row = $db->sql_fetchrow($result))	{		$rowset[] = $row;		$post_id_list[] = $row['post_id'];		$bbcode_bitfield = $bbcode_bitfield | base64_decode($row['bbcode_bitfield']);	}	$db->sql_freeresult($result);	if ($bbcode_bitfield !== '')	{		include_once($phpbb_root_path . 'includes/bbcode.' . $phpEx);		$bbcode = new bbcode(base64_encode($bbcode_bitfield));	}	$topic_tracking_info = array();	// Get topic tracking info	if ($config['load_db_lastread'])	{		$tmp_topic_data = array($topic_id => $topic_info);		$topic_tracking_info = get_topic_tracking($topic_info['forum_id'], $topic_id, $tmp_topic_data, array($topic_info['forum_id'] => $topic_info['forum_mark_time']));		unset($tmp_topic_data);	}	else	{		$topic_tracking_info = get_complete_topic_tracking($topic_info['forum_id'], $topic_id);	}	$has_unapproved_posts = false;	// Grab extensions	$extensions = $attachments = array();	if ($topic_info['topic_attachment'] && sizeof($post_id_list))	{		$extensions = $cache->obtain_attach_extensions($topic_info['forum_id']);		// Get attachments...		if ($auth->acl_get('u_download') && $auth->acl_get('f_download', $topic_info['forum_id']))		{			$sql = 'SELECT *				FROM ' . ATTACHMENTS_TABLE . '				WHERE ' . $db->sql_in_set('post_msg_id', $post_id_list) . '					AND in_message = 0				ORDER BY filetime DESC, post_msg_id ASC';			$result = $db->sql_query($sql);			while ($row = $db->sql_fetchrow($result))			{				$attachments[$row['post_msg_id']][] = $row;			}			$db->sql_freeresult($result);		}	}	foreach ($rowset as $i => $row)	{		$message = $row['post_text'];		$post_subject = ($row['post_subject'] != '') ? $row['post_subject'] : $topic_info['topic_title'];		if ($row['bbcode_bitfield'])		{			$bbcode->bbcode_second_pass($message, $row['bbcode_uid'], $row['bbcode_bitfield']);		}		$message = bbcode_nl2br($message);		$message = smiley_text($message);		if (!empty($attachments[$row['post_id']]))		{			$update_count = array();			parse_attachments($topic_info['forum_id'], $message, $attachments[$row['post_id']], $update_count);		}		if (!$row['post_approved'])		{			$has_unapproved_posts = true;		}		$post_unread = (isset($topic_tracking_info[$topic_id]) && $row['post_time'] > $topic_tracking_info[$topic_id]) ? true : false;		$template->assign_block_vars('postrow', array(			'POST_AUTHOR_FULL'		=> get_username_string('full', $row['poster_id'], $row['username'], $row['user_colour'], $row['post_username']),			'POST_AUTHOR_COLOUR'	=> get_username_string('colour', $row['poster_id'], $row['username'], $row['user_colour'], $row['post_username']),			'POST_AUTHOR'			=> get_username_string('username', $row['poster_id'], $row['username'], $row['user_colour'], $row['post_username']),			'U_POST_AUTHOR'			=> get_username_string('profile', $row['poster_id'], $row['username'], $row['user_colour'], $row['post_username']),			'POST_DATE'		=> $user->format_date($row['post_time']),			'POST_SUBJECT'	=> $post_subject,			'MESSAGE'		=> $message,			'POST_ID'		=> $row['post_id'],			'RETURN_TOPIC'	=> sprintf($user->lang['RETURN_TOPIC'], '<a href="' . append_sid("{$phpbb_root_path}viewtopic.$phpEx", 't=' . $topic_id) . '">', '</a>'),			'MINI_POST_IMG'			=> ($post_unread) ? $user->img('icon_post_target_unread', 'UNREAD_POST') : $user->img('icon_post_target', 'POST'),			'S_POST_REPORTED'	=> ($row['post_reported'] && $auth->acl_get('m_report', $topic_info['forum_id'])),			'S_POST_UNAPPROVED'	=> (!$row['post_approved'] && $auth->acl_get('m_approve', $topic_info['forum_id'])),			'S_CHECKED'			=> (($submitted_id_list && !in_array(intval($row['post_id']), $submitted_id_list)) || in_array(intval($row['post_id']), $checked_ids)) ? true : false,			'S_HAS_ATTACHMENTS'	=> (!empty($attachments[$row['post_id']])) ? true : false,			'U_POST_DETAILS'	=> "$url&amp;i=$id&amp;p={$row['post_id']}&amp;mode=post_details" . (($forum_id) ? "&amp;f=$forum_id" : ''),			'U_MCP_APPROVE'		=> ($auth->acl_get('m_approve', $topic_info['forum_id'])) ? append_sid("{$phpbb_root_path}mcp.$phpEx", 'i=queue&amp;mode=approve_details&amp;f=' . $topic_info['forum_id'] . '&amp;p=' . $row['post_id']) : '',			'U_MCP_REPORT'		=> ($auth->acl_get('m_report', $topic_info['forum_id'])) ? append_sid("{$phpbb_root_path}mcp.$phpEx", 'i=reports&amp;mode=report_details&amp;f=' . $topic_info['forum_id'] . '&amp;p=' . $row['post_id']) : '')		);		// Display not already displayed Attachments for this post, we already parsed them. ;)		if (!empty($attachments[$row['post_id']]))		{			foreach ($attachments[$row['post_id']] as $attachment)			{				$template->assign_block_vars('postrow.attachment', array(					'DISPLAY_ATTACHMENT'	=> $attachment)				);			}		}		unset($rowset[$i]);	}	// Display topic icons for split topic	$s_topic_icons = false;	if ($auth->acl_gets('m_split', 'm_merge', (int) $topic_info['forum_id']))	{		include_once($phpbb_root_path . 'includes/functions_posting.' . $phpEx);		$s_topic_icons = posting_gen_topic_icons('', $icon_id);		// Has the user selected a topic for merge?		if ($to_topic_id)		{			$to_topic_info = get_topic_data(array($to_topic_id), 'm_merge');			if (!sizeof($to_topic_info))			{				$to_topic_id = 0;			}			else			{				$to_topic_info = $to_topic_info[$to_topic_id];				if (!$to_topic_info['enable_icons'] || $auth->acl_get('!f_icons', $topic_info['forum_id']))				{					$s_topic_icons = false;				}			}		}	}	$s_hidden_fields = build_hidden_fields(array(		'st_old'	=> $sort_days,		'post_ids'	=> $post_id_list,	));	$template->assign_vars(array(		'TOPIC_TITLE'		=> $topic_info['topic_title'],		'U_VIEW_TOPIC'		=> append_sid("{$phpbb_root_path}viewtopic.$phpEx", 'f=' . $topic_info['forum_id'] . '&amp;t=' . $topic_info['topic_id']),		'TO_TOPIC_ID'		=> $to_topic_id,		'TO_TOPIC_INFO'		=> ($to_topic_id) ? sprintf($user->lang['YOU_SELECTED_TOPIC'], $to_topic_id, '<a href="' . append_sid("{$phpbb_root_path}viewtopic.$phpEx", 'f=' . $to_topic_info['forum_id'] . '&amp;t=' . $to_topic_id) . '">' . $to_topic_info['topic_title'] . '</a>') : '',		'SPLIT_SUBJECT'		=> $subject,		'POSTS_PER_PAGE'	=> $posts_per_page,		'ACTION'			=> $action,		'REPORTED_IMG'		=> $user->img('icon_topic_reported', 'POST_REPORTED'),		'UNAPPROVED_IMG'	=> $user->img('icon_topic_unapproved', 'POST_UNAPPROVED'),		'INFO_IMG'			=> $user->img('icon_post_info', 'VIEW_INFO'),		'S_MCP_ACTION'		=> "$url&amp;i=$id&amp;mode=$mode&amp;action=$action&amp;start=$start",		'S_FORUM_SELECT'	=> ($to_forum_id) ? make_forum_select($to_forum_id, false, false, true, true, true) : make_forum_select($topic_info['forum_id'], false, false, true, true, true),		'S_CAN_SPLIT'		=> ($auth->acl_get('m_split', $topic_info['forum_id'])) ? true : false,		'S_CAN_MERGE'		=> ($auth->acl_get('m_merge', $topic_info['forum_id'])) ? true : false,		'S_CAN_DELETE'		=> ($auth->acl_get('m_delete', $topic_info['forum_id'])) ? true : false,		'S_CAN_APPROVE'		=> ($has_unapproved_posts && $auth->acl_get('m_approve', $topic_info['forum_id'])) ? true : false,		'S_CAN_LOCK'		=> ($auth->acl_get('m_lock', $topic_info['forum_id'])) ? true : false,		'S_CAN_REPORT'		=> ($auth->acl_get('m_report', $topic_info['forum_id'])) ? true : false,		'S_REPORT_VIEW'		=> ($action == 'reports') ? true : false,		'S_MERGE_VIEW'		=> ($action == 'merge') ? true : false,		'S_SPLIT_VIEW'		=> ($action == 'split') ? true : false,		'S_HIDDEN_FIELDS'	=> $s_hidden_fields,		'S_SHOW_TOPIC_ICONS'	=> $s_topic_icons,		'S_TOPIC_ICON'			=> $icon_id,		'U_SELECT_TOPIC'	=> "$url&amp;i=$id&amp;mode=forum_view&amp;action=merge_select" . (($forum_id) ? "&amp;f=$forum_id" : ''),		'RETURN_TOPIC'		=> sprintf($user->lang['RETURN_TOPIC'], '<a href="' . append_sid("{$phpbb_root_path}viewtopic.$phpEx", "f={$topic_info['forum_id']}&amp;t={$topic_info['topic_id']}&amp;start=$start") . '">', '</a>'),		'RETURN_FORUM'		=> sprintf($user->lang['RETURN_FORUM'], '<a href="' . append_sid("{$phpbb_root_path}viewforum.$phpEx", "f={$topic_info['forum_id']}&amp;start=$start") . '">', '</a>'),		'PAGE_NUMBER'		=> on_page($total, $posts_per_page, $start),		'PAGINATION'		=> (!$posts_per_page) ? '' : generate_pagination(append_sid("{$phpbb_root_path}mcp.$phpEx", "i=$id&amp;t={$topic_info['topic_id']}&amp;mode=$mode&amp;action=$action&amp;to_topic_id=$to_topic_id&amp;posts_per_page=$posts_per_page&amp;st=$sort_days&amp;sk=$sort_key&amp;sd=$sort_dir"), $total, $posts_per_page, $start),		'TOTAL_POSTS'		=> ($total == 1) ? $user->lang['VIEW_TOPIC_POST'] : sprintf($user->lang['VIEW_TOPIC_POSTS'], $total),	));}/*** Split topic*/function split_topic($action, $topic_id, $to_forum_id, $subject){	global $db, $template, $user, $phpEx, $phpbb_root_path, $auth, $config;	$post_id_list	= request_var('post_id_list', array(0));	$forum_id		= request_var('forum_id', 0);	$start			= request_var('start', 0);	if (!sizeof($post_id_list))	{		$template->assign_var('MESSAGE', $user->lang['NO_POST_SELECTED']);		return;	}	if (!check_ids($post_id_list, POSTS_TABLE, 'post_id', array('m_split')))	{		return;	}	$post_id = $post_id_list[0];	$post_info = get_post_data(array($post_id));	if (!sizeof($post_info))	{		$template->assign_var('MESSAGE', $user->lang['NO_POST_SELECTED']);		return;	}	$post_info = $post_info[$post_id];	$subject = trim($subject);	// Make some tests	if (!$subject)	{		$template->assign_var('MESSAGE', $user->lang['EMPTY_SUBJECT']);		return;	}	if ($to_forum_id <= 0)	{		$template->assign_var('MESSAGE', $user->lang['NO_DESTINATION_FORUM']);		return;	}	$forum_info = get_forum_data(array($to_forum_id), 'f_post');	if (!sizeof($forum_info))	{		$template->assign_var('MESSAGE', $user->lang['USER_CANNOT_POST']);		return;	}	$forum_info = $forum_info[$to_forum_id];	if ($forum_info['forum_type'] != FORUM_POST)	{		$template->assign_var('MESSAGE', $user->lang['FORUM_NOT_POSTABLE']);		return;	}	$redirect = request_var('redirect', build_url(array('quickmod')));	$s_hidden_fields = build_hidden_fields(array(		'i'				=> 'main',		'post_id_list'	=> $post_id_list,		'f'				=> $forum_id,		'mode'			=> 'topic_view',		'start'			=> $start,		'action'		=> $action,		't'				=> $topic_id,		'redirect'		=> $redirect,		'subject'		=> $subject,		'to_forum_id'	=> $to_forum_id,		'icon'			=> request_var('icon', 0))	);	$success_msg = $return_link = '';	if (confirm_box(true))	{		if ($action == 'split_beyond')		{			$sort_days = $total = 0;			$sort_key = $sort_dir = '';			$sort_by_sql = $sort_order_sql = array();			mcp_sorting('viewtopic', $sort_days, $sort_key, $sort_dir, $sort_by_sql, $sort_order_sql, $total, $forum_id, $topic_id);			$limit_time_sql = ($sort_days) ? 'AND t.topic_last_post_time >= ' . (time() - ($sort_days * 86400)) : '';			if ($sort_order_sql[0] == 'u')			{				$sql = 'SELECT p.post_id, p.forum_id, p.post_approved					FROM ' . POSTS_TABLE . ' p, ' . USERS_TABLE . " u					WHERE p.topic_id = $topic_id						AND p.poster_id = u.user_id						$limit_time_sql					ORDER BY $sort_order_sql";			}			else			{				$sql = 'SELECT p.post_id, p.forum_id, p.post_approved					FROM ' . POSTS_TABLE . " p					WHERE p.topic_id = $topic_id						$limit_time_sql					ORDER BY $sort_order_sql";			}			$result = $db->sql_query_limit($sql, 0, $start);			$store = false;			$post_id_list = array();			while ($row = $db->sql_fetchrow($result))			{				// If split from selected post (split_beyond), we split the unapproved items too.				if (!$row['post_approved'] && !$auth->acl_get('m_approve', $row['forum_id']))				{//					continue;				}				// Start to store post_ids as soon as we see the first post that was selected				if ($row['post_id'] == $post_id)				{					$store = true;				}				if ($store)				{					$post_id_list[] = $row['post_id'];				}			}			$db->sql_freeresult($result);		}		if (!sizeof($post_id_list))		{			trigger_error('NO_POST_SELECTED');		}		$icon_id = request_var('icon', 0);		$sql_ary = array(			'forum_id'		=> $to_forum_id,			'topic_title'	=> $subject,			'icon_id'		=> $icon_id,			'topic_approved'=> 1		);		$sql = 'INSERT INTO ' . TOPICS_TABLE . ' ' . $db->sql_build_array('INSERT', $sql_ary);		$db->sql_query($sql);		$to_topic_id = $db->sql_nextid();		move_posts($post_id_list, $to_topic_id);		$topic_info = get_topic_data(array($topic_id));		$topic_info = $topic_info[$topic_id];		add_log('mod', $to_forum_id, $to_topic_id, 'LOG_SPLIT_DESTINATION', $subject);		add_log('mod', $forum_id, $topic_id, 'LOG_SPLIT_SOURCE', $topic_info['topic_title']);		// Change topic title of first post		$sql = 'UPDATE ' . POSTS_TABLE . "			SET post_subject = '" . $db->sql_escape($subject) . "'			WHERE post_id = {$post_id_list[0]}";		$db->sql_query($sql);		$success_msg = 'TOPIC_SPLIT_SUCCESS';		// Update forum statistics		set_config_count('num_topics', 1, true);		// Link back to both topics		$return_link = sprintf($user->lang['RETURN_TOPIC'], '<a href="' . append_sid("{$phpbb_root_path}viewtopic.$phpEx", 'f=' . $post_info['forum_id'] . '&amp;t=' . $post_info['topic_id']) . '">', '</a>') . '<br /><br />' . sprintf($user->lang['RETURN_NEW_TOPIC'], '<a href="' . append_sid("{$phpbb_root_path}viewtopic.$phpEx", 'f=' . $to_forum_id . '&amp;t=' . $to_topic_id) . '">', '</a>');	}	else	{		confirm_box(false, ($action == 'split_all') ? 'SPLIT_TOPIC_ALL' : 'SPLIT_TOPIC_BEYOND', $s_hidden_fields);	}	$redirect = request_var('redirect', "index.$phpEx");	$redirect = reapply_sid($redirect);	if (!$success_msg)	{		return;	}	else	{		meta_refresh(3, append_sid("{$phpbb_root_path}viewtopic.$phpEx", "f=$to_forum_id&amp;t=$to_topic_id"));		trigger_error($user->lang[$success_msg] . '<br /><br />' . $return_link);	}}/*** Merge selected posts into selected topic*/function merge_posts($topic_id, $to_topic_id){	global $db, $template, $user, $phpEx, $phpbb_root_path, $auth;	if (!$to_topic_id)	{		$template->assign_var('MESSAGE', $user->lang['NO_FINAL_TOPIC_SELECTED']);		return;	}	$topic_data = get_topic_data(array($to_topic_id), 'm_merge');	if (!sizeof($topic_data))	{		$template->assign_var('MESSAGE', $user->lang['NO_FINAL_TOPIC_SELECTED']);		return;	}	$topic_data = $topic_data[$to_topic_id];	$post_id_list	= request_var('post_id_list', array(0));	$start			= request_var('start', 0);	if (!sizeof($post_id_list))	{		$template->assign_var('MESSAGE', $user->lang['NO_POST_SELECTED']);		return;	}	if (!check_ids($post_id_list, POSTS_TABLE, 'post_id', array('m_merge')))	{		return;	}	$redirect = request_var('redirect', build_url(array('quickmod')));	$s_hidden_fields = build_hidden_fields(array(		'i'				=> 'main',		'post_id_list'	=> $post_id_list,		'to_topic_id'	=> $to_topic_id,		'mode'			=> 'topic_view',		'action'		=> 'merge_posts',		'start'			=> $start,		'redirect'		=> $redirect,		't'				=> $topic_id)	);	$success_msg = $return_link = '';	if (confirm_box(true))	{		$to_forum_id = $topic_data['forum_id'];		move_posts($post_id_list, $to_topic_id);		add_log('mod', $to_forum_id, $to_topic_id, 'LOG_MERGE', $topic_data['topic_title']);		// Message and return links		$success_msg = 'POSTS_MERGED_SUCCESS';		// Does the original topic still exist? If yes, link back to it		$sql = 'SELECT forum_id			FROM ' . TOPICS_TABLE . '			WHERE topic_id = ' . $topic_id;		$result = $db->sql_query_limit($sql, 1);		$row = $db->sql_fetchrow($result);		$db->sql_freeresult($result);		if ($row)		{			$return_link .= sprintf($user->lang['RETURN_TOPIC'], '<a href="' . append_sid("{$phpbb_root_path}viewtopic.$phpEx", 'f=' . $row['forum_id'] . '&amp;t=' . $topic_id) . '">', '</a>');		}		else		{			// If the topic no longer exist, we will update the topic watch table.			// To not let it error out on users watching both topics, we just return on an error...			$db->sql_return_on_error(true);			$db->sql_query('UPDATE ' . TOPICS_WATCH_TABLE . ' SET topic_id = ' . (int) $to_topic_id . ' WHERE topic_id = ' . (int) $topic_id);			$db->sql_return_on_error(false);			$db->sql_query('DELETE FROM ' . TOPICS_WATCH_TABLE . ' WHERE topic_id = ' . (int) $topic_id);		}		// Link to the new topic		$return_link .= (($return_link) ? '<br /><br />' : '') . sprintf($user->lang['RETURN_NEW_TOPIC'], '<a href="' . append_sid("{$phpbb_root_path}viewtopic.$phpEx", 'f=' . $to_forum_id . '&amp;t=' . $to_topic_id) . '">', '</a>');	}	else	{		confirm_box(false, 'MERGE_POSTS', $s_hidden_fields);	}	$redirect = request_var('redirect', "index.$phpEx");	$redirect = reapply_sid($redirect);	if (!$success_msg)	{		return;	}	else	{		meta_refresh(3, append_sid("{$phpbb_root_path}viewtopic.$phpEx", "f=$to_forum_id&amp;t=$to_topic_id"));		trigger_error($user->lang[$success_msg] . '<br /><br />' . $return_link);	}}?>
<?php/**** @package phpBB3* @version $Id$* @copyright (c) 2006 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License** This file creates new schema files for every database.* The filenames will be prefixed with an underscore to not overwrite the current schema files.** If you overwrite the original schema files please make sure you save the file with UNIX linefeeds.*/$schema_path = dirname(__FILE__) . '/../install/schemas/';if (!is_writable($schema_path)){	die('Schema path not writable');}$schema_data = get_schema_struct();$dbms_type_map = array(	'mysql_41'	=> array(		'INT:'		=> 'int(%d)',		'BINT'		=> 'bigint(20)',		'UINT'		=> 'mediumint(8) UNSIGNED',		'UINT:'		=> 'int(%d) UNSIGNED',		'TINT:'		=> 'tinyint(%d)',		'USINT'		=> 'smallint(4) UNSIGNED',		'BOOL'		=> 'tinyint(1) UNSIGNED',		'VCHAR'		=> 'varchar(255)',		'VCHAR:'	=> 'varchar(%d)',		'CHAR:'		=> 'char(%d)',		'XSTEXT'	=> 'text',		'XSTEXT_UNI'=> 'varchar(100)',		'STEXT'		=> 'text',		'STEXT_UNI'	=> 'varchar(255)',		'TEXT'		=> 'text',		'TEXT_UNI'	=> 'text',		'MTEXT'		=> 'mediumtext',		'MTEXT_UNI'	=> 'mediumtext',		'TIMESTAMP'	=> 'int(11) UNSIGNED',		'DECIMAL'	=> 'decimal(5,2)',		'DECIMAL:'	=> 'decimal(%d,2)',		'PDECIMAL'	=> 'decimal(6,3)',		'PDECIMAL:'	=> 'decimal(%d,3)',		'VCHAR_UNI'	=> 'varchar(255)',		'VCHAR_UNI:'=> 'varchar(%d)',		'VCHAR_CI'	=> 'varchar(255)',		'VARBINARY'	=> 'varbinary(255)',	),	'mysql_40'	=> array(		'INT:'		=> 'int(%d)',		'BINT'		=> 'bigint(20)',		'UINT'		=> 'mediumint(8) UNSIGNED',		'UINT:'		=> 'int(%d) UNSIGNED',		'TINT:'		=> 'tinyint(%d)',		'USINT'		=> 'smallint(4) UNSIGNED',		'BOOL'		=> 'tinyint(1) UNSIGNED',		'VCHAR'		=> 'varbinary(255)',		'VCHAR:'	=> 'varbinary(%d)',		'CHAR:'		=> 'binary(%d)',		'XSTEXT'	=> 'blob',		'XSTEXT_UNI'=> 'blob',		'STEXT'		=> 'blob',		'STEXT_UNI'	=> 'blob',		'TEXT'		=> 'blob',		'TEXT_UNI'	=> 'blob',		'MTEXT'		=> 'mediumblob',		'MTEXT_UNI'	=> 'mediumblob',		'TIMESTAMP'	=> 'int(11) UNSIGNED',		'DECIMAL'	=> 'decimal(5,2)',		'DECIMAL:'	=> 'decimal(%d,2)',		'PDECIMAL'	=> 'decimal(6,3)',		'PDECIMAL:'	=> 'decimal(%d,3)',		'VCHAR_UNI'	=> 'blob',		'VCHAR_UNI:'=> array('varbinary(%d)', 'limit' => array('mult', 3, 255, 'blob')),		'VCHAR_CI'	=> 'blob',		'VARBINARY'	=> 'varbinary(255)',	),	'firebird'	=> array(		'INT:'		=> 'INTEGER',		'BINT'		=> 'DOUBLE PRECISION',		'UINT'		=> 'INTEGER',		'UINT:'		=> 'INTEGER',		'TINT:'		=> 'INTEGER',		'USINT'		=> 'INTEGER',		'BOOL'		=> 'INTEGER',		'VCHAR'		=> 'VARCHAR(255) CHARACTER SET NONE',		'VCHAR:'	=> 'VARCHAR(%d) CHARACTER SET NONE',		'CHAR:'		=> 'CHAR(%d) CHARACTER SET NONE',		'XSTEXT'	=> 'BLOB SUB_TYPE TEXT CHARACTER SET NONE',		'STEXT'		=> 'BLOB SUB_TYPE TEXT CHARACTER SET NONE',		'TEXT'		=> 'BLOB SUB_TYPE TEXT CHARACTER SET NONE',		'MTEXT'		=> 'BLOB SUB_TYPE TEXT CHARACTER SET NONE',		'XSTEXT_UNI'=> 'VARCHAR(100) CHARACTER SET UTF8',		'STEXT_UNI'	=> 'VARCHAR(255) CHARACTER SET UTF8',		'TEXT_UNI'	=> 'BLOB SUB_TYPE TEXT CHARACTER SET UTF8',		'MTEXT_UNI'	=> 'BLOB SUB_TYPE TEXT CHARACTER SET UTF8',		'TIMESTAMP'	=> 'INTEGER',		'DECIMAL'	=> 'DOUBLE PRECISION',		'DECIMAL:'	=> 'DOUBLE PRECISION',		'PDECIMAL'	=> 'DOUBLE PRECISION',		'PDECIMAL:'	=> 'DOUBLE PRECISION',		'VCHAR_UNI'	=> 'VARCHAR(255) CHARACTER SET UTF8',		'VCHAR_UNI:'=> 'VARCHAR(%d) CHARACTER SET UTF8',		'VCHAR_CI'	=> 'VARCHAR(255) CHARACTER SET UTF8',		'VARBINARY'	=> 'CHAR(255) CHARACTER SET NONE',	),	'mssql'		=> array(		'INT:'		=> '[int]',		'BINT'		=> '[float]',		'UINT'		=> '[int]',		'UINT:'		=> '[int]',		'TINT:'		=> '[int]',		'USINT'		=> '[int]',		'BOOL'		=> '[int]',		'VCHAR'		=> '[varchar] (255)',		'VCHAR:'	=> '[varchar] (%d)',		'CHAR:'		=> '[char] (%d)',		'XSTEXT'	=> '[varchar] (1000)',		'STEXT'		=> '[varchar] (3000)',		'TEXT'		=> '[varchar] (8000)',		'MTEXT'		=> '[text]',		'XSTEXT_UNI'=> '[varchar] (100)',		'STEXT_UNI'	=> '[varchar] (255)',		'TEXT_UNI'	=> '[varchar] (4000)',		'MTEXT_UNI'	=> '[text]',		'TIMESTAMP'	=> '[int]',		'DECIMAL'	=> '[float]',		'DECIMAL:'	=> '[float]',		'PDECIMAL'	=> '[float]',		'PDECIMAL:'	=> '[float]',		'VCHAR_UNI'	=> '[varchar] (255)',		'VCHAR_UNI:'=> '[varchar] (%d)',		'VCHAR_CI'	=> '[varchar] (255)',		'VARBINARY'	=> '[varchar] (255)',	),	'oracle'	=> array(		'INT:'		=> 'number(%d)',		'BINT'		=> 'number(20)',		'UINT'		=> 'number(8)',		'UINT:'		=> 'number(%d)',		'TINT:'		=> 'number(%d)',		'USINT'		=> 'number(4)',		'BOOL'		=> 'number(1)',		'VCHAR'		=> 'varchar2(255)',		'VCHAR:'	=> 'varchar2(%d)',		'CHAR:'		=> 'char(%d)',		'XSTEXT'	=> 'varchar2(1000)',		'STEXT'		=> 'varchar2(3000)',		'TEXT'		=> 'clob',		'MTEXT'		=> 'clob',		'XSTEXT_UNI'=> 'varchar2(300)',		'STEXT_UNI'	=> 'varchar2(765)',		'TEXT_UNI'	=> 'clob',		'MTEXT_UNI'	=> 'clob',		'TIMESTAMP'	=> 'number(11)',		'DECIMAL'	=> 'number(5, 2)',		'DECIMAL:'	=> 'number(%d, 2)',		'PDECIMAL'	=> 'number(6, 3)',		'PDECIMAL:'	=> 'number(%d, 3)',		'VCHAR_UNI'	=> 'varchar2(765)',		'VCHAR_UNI:'=> array('varchar2(%d)', 'limit' => array('mult', 3, 765, 'clob')),		'VCHAR_CI'	=> 'varchar2(255)',		'VARBINARY'	=> 'raw(255)',	),	'sqlite'	=> array(		'INT:'		=> 'int(%d)',		'BINT'		=> 'bigint(20)',		'UINT'		=> 'INTEGER UNSIGNED', //'mediumint(8) UNSIGNED',		'UINT:'		=> 'INTEGER UNSIGNED', // 'int(%d) UNSIGNED',		'TINT:'		=> 'tinyint(%d)',		'USINT'		=> 'INTEGER UNSIGNED', //'mediumint(4) UNSIGNED',		'BOOL'		=> 'INTEGER UNSIGNED', //'tinyint(1) UNSIGNED',		'VCHAR'		=> 'varchar(255)',		'VCHAR:'	=> 'varchar(%d)',		'CHAR:'		=> 'char(%d)',		'XSTEXT'	=> 'text(65535)',		'STEXT'		=> 'text(65535)',		'TEXT'		=> 'text(65535)',		'MTEXT'		=> 'mediumtext(16777215)',		'XSTEXT_UNI'=> 'text(65535)',		'STEXT_UNI'	=> 'text(65535)',		'TEXT_UNI'	=> 'text(65535)',		'MTEXT_UNI'	=> 'mediumtext(16777215)',		'TIMESTAMP'	=> 'INTEGER UNSIGNED', //'int(11) UNSIGNED',		'DECIMAL'	=> 'decimal(5,2)',		'DECIMAL:'	=> 'decimal(%d,2)',		'PDECIMAL'	=> 'decimal(6,3)',		'PDECIMAL:'	=> 'decimal(%d,3)',		'VCHAR_UNI'	=> 'varchar(255)',		'VCHAR_UNI:'=> 'varchar(%d)',		'VCHAR_CI'	=> 'varchar(255)',		'VARBINARY'	=> 'blob',	),	'postgres'	=> array(		'INT:'		=> 'INT4',		'BINT'		=> 'INT8',		'UINT'		=> 'INT4', // unsigned		'UINT:'		=> 'INT4', // unsigned		'USINT'		=> 'INT2', // unsigned		'BOOL'		=> 'INT2', // unsigned		'TINT:'		=> 'INT2',		'VCHAR'		=> 'varchar(255)',		'VCHAR:'	=> 'varchar(%d)',		'CHAR:'		=> 'char(%d)',		'XSTEXT'	=> 'varchar(1000)',		'STEXT'		=> 'varchar(3000)',		'TEXT'		=> 'varchar(8000)',		'MTEXT'		=> 'TEXT',		'XSTEXT_UNI'=> 'varchar(100)',		'STEXT_UNI'	=> 'varchar(255)',		'TEXT_UNI'	=> 'varchar(4000)',		'MTEXT_UNI'	=> 'TEXT',		'TIMESTAMP'	=> 'INT4', // unsigned		'DECIMAL'	=> 'decimal(5,2)',		'DECIMAL:'	=> 'decimal(%d,2)',		'PDECIMAL'	=> 'decimal(6,3)',		'PDECIMAL:'	=> 'decimal(%d,3)',		'VCHAR_UNI'	=> 'varchar(255)',		'VCHAR_UNI:'=> 'varchar(%d)',		'VCHAR_CI'	=> 'varchar_ci',		'VARBINARY'	=> 'bytea',	),);// A list of types being unsigned for better reference in some db's$unsigned_types = array('UINT', 'UINT:', 'USINT', 'BOOL', 'TIMESTAMP');$supported_dbms = array('firebird', 'mssql', 'mysql_40', 'mysql_41', 'oracle', 'postgres', 'sqlite');foreach ($supported_dbms as $dbms){	$fp = fopen($schema_path . $dbms . '_schema.sql', 'wt');	$line = '';	// Write Header	switch ($dbms)	{		case 'mysql_40':		case 'mysql_41':		case 'firebird':		case 'sqlite':			fwrite($fp, "# DO NOT EDIT THIS FILE, IT IS GENERATED\n");			fwrite($fp, "#\n");			fwrite($fp, "# To change the contents of this file, edit\n");			fwrite($fp, "# phpBB/develop/create_schema_files.php and\n");			fwrite($fp, "# run it.\n");		break;		case 'mssql':		case 'oracle':		case 'postgres':			fwrite($fp, "/*\n");			fwrite($fp, " * DO NOT EDIT THIS FILE, IT IS GENERATED\n");			fwrite($fp, " *\n");			fwrite($fp, " * To change the contents of this file, edit\n");			fwrite($fp, " * phpBB/develop/create_schema_files.php and\n");			fwrite($fp, " * run it.\n");			fwrite($fp, " */\n\n");		break;	}	switch ($dbms)	{		case 'firebird':			$line .= custom_data('firebird') . "\n";		break;		case 'sqlite':			$line .= "BEGIN TRANSACTION;\n\n";		break;		case 'oracle':			$line .= custom_data('oracle') . "\n";		break;		case 'postgres':			$line .= "BEGIN;\n\n";			$line .= custom_data('postgres') . "\n";		break;	}	fwrite($fp, $line);	foreach ($schema_data as $table_name => $table_data)	{		// Write comment about table		switch ($dbms)		{			case 'mysql_40':			case 'mysql_41':			case 'firebird':			case 'sqlite':				fwrite($fp, "# Table: '{$table_name}'\n");			break;			case 'mssql':			case 'oracle':			case 'postgres':				fwrite($fp, "/*\n\tTable: '{$table_name}'\n*/\n");			break;		}		// Create Table statement		$generator = $textimage = false;		$line = '';		switch ($dbms)		{			case 'mysql_40':			case 'mysql_41':			case 'firebird':			case 'oracle':			case 'sqlite':			case 'postgres':				$line = "CREATE TABLE {$table_name} (\n";			break;			case 'mssql':				$line = "CREATE TABLE [{$table_name}] (\n";			break;		}		// Table specific so we don't get overlap		$modded_array = array();		// Write columns one by one...		foreach ($table_data['COLUMNS'] as $column_name => $column_data)		{			if (strlen($column_name) > 30)			{				trigger_error("Column name '$column_name' on table '$table_name' is too long. The maximum is 30 characters.", E_USER_ERROR);			}			if (isset($column_data[2]) && $column_data[2] == 'auto_increment' && strlen($column_name) > 26) // "${column_name}_gen"			{				trigger_error("Index name '${column_name}_gen' on table '$table_name' is too long. The maximum is 30 characters.", E_USER_ERROR);			}			// Get type			if (strpos($column_data[0], ':') !== false)			{				list($orig_column_type, $column_length) = explode(':', $column_data[0]);				if (!is_array($dbms_type_map[$dbms][$orig_column_type . ':']))				{					$column_type = sprintf($dbms_type_map[$dbms][$orig_column_type . ':'], $column_length);				}				else				{					if (isset($dbms_type_map[$dbms][$orig_column_type . ':']['rule']))					{						switch ($dbms_type_map[$dbms][$orig_column_type . ':']['rule'][0])						{							case 'div':								$column_length /= $dbms_type_map[$dbms][$orig_column_type . ':']['rule'][1];								$column_length = ceil($column_length);								$column_type = sprintf($dbms_type_map[$dbms][$orig_column_type . ':'][0], $column_length);							break;						}					}					if (isset($dbms_type_map[$dbms][$orig_column_type . ':']['limit']))					{						switch ($dbms_type_map[$dbms][$orig_column_type . ':']['limit'][0])						{							case 'mult':								$column_length *= $dbms_type_map[$dbms][$orig_column_type . ':']['limit'][1];								if ($column_length > $dbms_type_map[$dbms][$orig_column_type . ':']['limit'][2])								{									$column_type = $dbms_type_map[$dbms][$orig_column_type . ':']['limit'][3];									$modded_array[$column_name] = $column_type;								}								else								{									$column_type = sprintf($dbms_type_map[$dbms][$orig_column_type . ':'][0], $column_length);								}							break;						}					}				}				$orig_column_type .= ':';			}			else			{				$orig_column_type = $column_data[0];				$column_type = $dbms_type_map[$dbms][$column_data[0]];				if ($column_type == 'text' || $column_type == 'blob')				{					$modded_array[$column_name] = $column_type;				}			}			// Adjust default value if db-dependant specified			if (is_array($column_data[1]))			{				$column_data[1] = (isset($column_data[1][$dbms])) ? $column_data[1][$dbms] : $column_data[1]['default'];			}			switch ($dbms)			{				case 'mysql_40':				case 'mysql_41':					$line .= "\t{$column_name} {$column_type} ";					// For hexadecimal values do not use single quotes					if (!is_null($column_data[1]) && substr($column_type, -4) !== 'text' && substr($column_type, -4) !== 'blob')					{						$line .= (strpos($column_data[1], '0x') === 0) ? "DEFAULT {$column_data[1]} " : "DEFAULT '{$column_data[1]}' ";					}					$line .= 'NOT NULL';					if (isset($column_data[2]))					{						if ($column_data[2] == 'auto_increment')						{							$line .= ' auto_increment';						}						else if ($dbms === 'mysql_41' && $column_data[2] == 'true_sort')						{							$line .= ' COLLATE utf8_unicode_ci';						}					}					$line .= ",\n";				break;				case 'sqlite':					if (isset($column_data[2]) && $column_data[2] == 'auto_increment')					{						$line .= "\t{$column_name} INTEGER PRIMARY KEY ";						$generator = $column_name;					}					else					{						$line .= "\t{$column_name} {$column_type} ";					}					$line .= 'NOT NULL ';					$line .= (!is_null($column_data[1])) ? "DEFAULT '{$column_data[1]}'" : '';					$line .= ",\n";				break;				case 'firebird':					$line .= "\t{$column_name} {$column_type} ";					if (!is_null($column_data[1]))					{						$line .= 'DEFAULT ' . ((is_numeric($column_data[1])) ? $column_data[1] : "'{$column_data[1]}'") . ' ';					}					$line .= 'NOT NULL';					// This is a UNICODE column and thus should be given it's fair share					if (preg_match('/^X?STEXT_UNI|VCHAR_(CI|UNI:?)/', $column_data[0]))					{						$line .= ' COLLATE UNICODE';					}					$line .= ",\n";					if (isset($column_data[2]) && $column_data[2] == 'auto_increment')					{						$generator = $column_name;					}				break;				case 'mssql':					if ($column_type == '[text]')					{						$textimage = true;					}					$line .= "\t[{$column_name}] {$column_type} ";					if (!is_null($column_data[1]))					{						// For hexadecimal values do not use single quotes						if (strpos($column_data[1], '0x') === 0)						{							$line .= 'DEFAULT (' . $column_data[1] . ') ';						}						else						{							$line .= 'DEFAULT (' . ((is_numeric($column_data[1])) ? $column_data[1] : "'{$column_data[1]}'") . ') ';						}					}					if (isset($column_data[2]) && $column_data[2] == 'auto_increment')					{						$line .= 'IDENTITY (1, 1) ';					}					$line .= 'NOT NULL';					$line .= " ,\n";				break;				case 'oracle':					$line .= "\t{$column_name} {$column_type} ";					$line .= (!is_null($column_data[1])) ? "DEFAULT '{$column_data[1]}' " : '';					// In Oracle empty strings ('') are treated as NULL.					// Therefore in oracle we allow NULL's for all DEFAULT '' entries					$line .= ($column_data[1] === '') ? ",\n" : "NOT NULL,\n";					if (isset($column_data[2]) && $column_data[2] == 'auto_increment')					{						$generator = $column_name;					}				break;				case 'postgres':					$line .= "\t{$column_name} {$column_type} ";					if (isset($column_data[2]) && $column_data[2] == 'auto_increment')					{						$line .= "DEFAULT nextval('{$table_name}_seq'),\n";						// Make sure the sequence will be created before creating the table						$line = "CREATE SEQUENCE {$table_name}_seq;\n\n" . $line;					}					else					{						$line .= (!is_null($column_data[1])) ? "DEFAULT '{$column_data[1]}' " : '';						$line .= "NOT NULL";						// Unsigned? Then add a CHECK contraint						if (in_array($orig_column_type, $unsigned_types))						{							$line .= " CHECK ({$column_name} >= 0)";						}						$line .= ",\n";					}				break;			}		}		switch ($dbms)		{			case 'firebird':				// Remove last line delimiter...				$line = substr($line, 0, -2);				$line .= "\n);;\n\n";			break;			case 'mssql':				$line = substr($line, 0, -2);				$line .= "\n) ON [PRIMARY]" . (($textimage) ? ' TEXTIMAGE_ON [PRIMARY]' : '') . "\n";				$line .= "GO\n\n";			break;		}		// Write primary key		if (isset($table_data['PRIMARY_KEY']))		{			if (!is_array($table_data['PRIMARY_KEY']))			{				$table_data['PRIMARY_KEY'] = array($table_data['PRIMARY_KEY']);			}			switch ($dbms)			{				case 'mysql_40':				case 'mysql_41':				case 'postgres':					$line .= "\tPRIMARY KEY (" . implode(', ', $table_data['PRIMARY_KEY']) . "),\n";				break;				case 'firebird':					$line .= "ALTER TABLE {$table_name} ADD PRIMARY KEY (" . implode(', ', $table_data['PRIMARY_KEY']) . ");;\n\n";				break;				case 'sqlite':					if ($generator === false || !in_array($generator, $table_data['PRIMARY_KEY']))					{						$line .= "\tPRIMARY KEY (" . implode(', ', $table_data['PRIMARY_KEY']) . "),\n";					}				break;				case 'mssql':					$line .= "ALTER TABLE [{$table_name}] WITH NOCHECK ADD \n";					$line .= "\tCONSTRAINT [PK_{$table_name}] PRIMARY KEY  CLUSTERED \n";					$line .= "\t(\n";					$line .= "\t\t[" . implode("],\n\t\t[", $table_data['PRIMARY_KEY']) . "]\n";					$line .= "\t)  ON [PRIMARY] \n";					$line .= "GO\n\n";				break;				case 'oracle':					$line .= "\tCONSTRAINT pk_{$table_name} PRIMARY KEY (" . implode(', ', $table_data['PRIMARY_KEY']) . "),\n";				break;			}		}		switch ($dbms)		{			case 'oracle':				// UNIQUE contrains to be added?				if (isset($table_data['KEYS']))				{					foreach ($table_data['KEYS'] as $key_name => $key_data)					{						if (!is_array($key_data[1]))						{							$key_data[1] = array($key_data[1]);						}						if ($key_data[0] == 'UNIQUE')						{							$line .= "\tCONSTRAINT u_phpbb_{$key_name} UNIQUE (" . implode(', ', $key_data[1]) . "),\n";						}					}				}				// Remove last line delimiter...				$line = substr($line, 0, -2);				$line .= "\n)\n/\n\n";			break;			case 'postgres':				// Remove last line delimiter...				$line = substr($line, 0, -2);				$line .= "\n);\n\n";			break;			case 'sqlite':				// Remove last line delimiter...				$line = substr($line, 0, -2);				$line .= "\n);\n\n";			break;		}		// Write Keys		if (isset($table_data['KEYS']))		{			foreach ($table_data['KEYS'] as $key_name => $key_data)			{				if (!is_array($key_data[1]))				{					$key_data[1] = array($key_data[1]);				}				if (strlen($table_name . $key_name) > 30)				{					trigger_error("Index name '${table_name}_$key_name' on table '$table_name' is too long. The maximum is 30 characters.", E_USER_ERROR);				}				switch ($dbms)				{					case 'mysql_40':					case 'mysql_41':						$line .= ($key_data[0] == 'INDEX') ? "\tKEY" : '';						$line .= ($key_data[0] == 'UNIQUE') ? "\tUNIQUE" : '';						foreach ($key_data[1] as $key => $col_name)						{							if (isset($modded_array[$col_name]))							{								switch ($modded_array[$col_name])								{									case 'text':									case 'blob':										$key_data[1][$key] = $col_name . '(255)';									break;								}							}						}						$line .= ' ' . $key_name . ' (' . implode(', ', $key_data[1]) . "),\n";					break;					case 'firebird':						$line .= ($key_data[0] == 'INDEX') ? 'CREATE INDEX' : '';						$line .= ($key_data[0] == 'UNIQUE') ? 'CREATE UNIQUE INDEX' : '';						$line .= ' ' . $table_name . '_' . $key_name . ' ON ' . $table_name . '(' . implode(', ', $key_data[1]) . ");;\n";					break;					case 'mssql':						$line .= ($key_data[0] == 'INDEX') ? 'CREATE  INDEX' : '';						$line .= ($key_data[0] == 'UNIQUE') ? 'CREATE  UNIQUE  INDEX' : '';						$line .= " [{$key_name}] ON [{$table_name}]([" . implode('], [', $key_data[1]) . "]) ON [PRIMARY]\n";						$line .= "GO\n\n";					break;					case 'oracle':						if ($key_data[0] == 'UNIQUE')						{							continue;						}						$line .= ($key_data[0] == 'INDEX') ? 'CREATE INDEX' : '';						$line .= " {$table_name}_{$key_name} ON {$table_name} (" . implode(', ', $key_data[1]) . ")\n";						$line .= "/\n";					break;					case 'sqlite':						$line .= ($key_data[0] == 'INDEX') ? 'CREATE INDEX' : '';						$line .= ($key_data[0] == 'UNIQUE') ? 'CREATE UNIQUE INDEX' : '';						$line .= " {$table_name}_{$key_name} ON {$table_name} (" . implode(', ', $key_data[1]) . ");\n";					break;					case 'postgres':						$line .= ($key_data[0] == 'INDEX') ? 'CREATE INDEX' : '';						$line .= ($key_data[0] == 'UNIQUE') ? 'CREATE UNIQUE INDEX' : '';						$line .= " {$table_name}_{$key_name} ON {$table_name} (" . implode(', ', $key_data[1]) . ");\n";					break;				}			}		}		switch ($dbms)		{			case 'mysql_40':				// Remove last line delimiter...				$line = substr($line, 0, -2);				$line .= "\n);\n\n";			break;			case 'mysql_41':				// Remove last line delimiter...				$line = substr($line, 0, -2);				$line .= "\n) CHARACTER SET `utf8` COLLATE `utf8_bin`;\n\n";			break;			// Create Generator			case 'firebird':				if ($generator !== false)				{					$line .= "\nCREATE GENERATOR {$table_name}_gen;;\n";					$line .= 'SET GENERATOR ' . $table_name . "_gen TO 0;;\n\n";					$line .= 'CREATE TRIGGER t_' . $table_name . ' FOR ' . $table_name . "\n";					$line .= "BEFORE INSERT\nAS\nBEGIN\n";					$line .= "\tNEW.{$generator} = GEN_ID({$table_name}_gen, 1);\nEND;;\n\n";				}			break;			case 'oracle':				if ($generator !== false)				{					$line .= "\nCREATE SEQUENCE {$table_name}_seq\n/\n\n";					$line .= "CREATE OR REPLACE TRIGGER t_{$table_name}\n";					$line .= "BEFORE INSERT ON {$table_name}\n";					$line .= "FOR EACH ROW WHEN (\n";					$line .= "\tnew.{$generator} IS NULL OR new.{$generator} = 0\n";					$line .= ")\nBEGIN\n";					$line .= "\tSELECT {$table_name}_seq.nextval\n";					$line .= "\tINTO :new.{$generator}\n";					$line .= "\tFROM dual;\nEND;\n/\n\n";				}			break;		}		fwrite($fp, $line . "\n");	}	$line = '';	// Write custom function at the end for some db's	switch ($dbms)	{		case 'mssql':			// No need to do this, no transaction support for schema changes			//$line = "\nCOMMIT\nGO\n\n";		break;		case 'sqlite':			$line = "\nCOMMIT;";		break;		case 'postgres':			$line = "\nCOMMIT;";		break;	}	fwrite($fp, $line);	fclose($fp);}/*** Define the basic structure* The format:*		array('{TABLE_NAME}' => {TABLE_DATA})*		{TABLE_DATA}:*			COLUMNS = array({column_name} = array({column_type}, {default}, {auto_increment}))*			PRIMARY_KEY = {column_name(s)}*			KEYS = array({key_name} = array({key_type}, {column_name(s)})),**	Column Types:*	INT:x		=> SIGNED int(x)*	BINT		=> BIGINT*	UINT		=> mediumint(8) UNSIGNED*	UINT:x		=> int(x) UNSIGNED*	TINT:x		=> tinyint(x)*	USINT		=> smallint(4) UNSIGNED (for _order columns)*	BOOL		=> tinyint(1) UNSIGNED*	VCHAR		=> varchar(255)*	CHAR:x		=> char(x)*	XSTEXT_UNI	=> text for storing 100 characters (topic_title for example)*	STEXT_UNI	=> text for storing 255 characters (normal input field with a max of 255 single-byte chars) - same as VCHAR_UNI*	TEXT_UNI	=> text for storing 3000 characters (short text, descriptions, comments, etc.)*	MTEXT_UNI	=> mediumtext (post text, large text)*	VCHAR:x		=> varchar(x)*	TIMESTAMP	=> int(11) UNSIGNED*	DECIMAL		=> decimal number (5,2)*	DECIMAL:	=> decimal number (x,2)*	PDECIMAL	=> precision decimal number (6,3)*	PDECIMAL:	=> precision decimal number (x,3)*	VCHAR_UNI	=> varchar(255) BINARY*	VCHAR_CI	=> varchar_ci for postgresql, others VCHAR*/function get_schema_struct(){	$schema_data = array();	$schema_data['phpbb_attachments'] = array(		'COLUMNS'		=> array(			'attach_id'			=> array('UINT', NULL, 'auto_increment'),			'post_msg_id'		=> array('UINT', 0),			'topic_id'			=> array('UINT', 0),			'in_message'		=> array('BOOL', 0),			'poster_id'			=> array('UINT', 0),			'is_orphan'			=> array('BOOL', 1),			'physical_filename'	=> array('VCHAR', ''),			'real_filename'		=> array('VCHAR', ''),			'download_count'	=> array('UINT', 0),			'attach_comment'	=> array('TEXT_UNI', ''),			'extension'			=> array('VCHAR:100', ''),			'mimetype'			=> array('VCHAR:100', ''),			'filesize'			=> array('UINT:20', 0),			'filetime'			=> array('TIMESTAMP', 0),			'thumbnail'			=> array('BOOL', 0),		),		'PRIMARY_KEY'	=> 'attach_id',		'KEYS'			=> array(			'filetime'			=> array('INDEX', 'filetime'),			'post_msg_id'		=> array('INDEX', 'post_msg_id'),			'topic_id'			=> array('INDEX', 'topic_id'),			'poster_id'			=> array('INDEX', 'poster_id'),			'is_orphan'			=> array('INDEX', 'is_orphan'),		),	);	$schema_data['phpbb_acl_groups'] = array(		'COLUMNS'		=> array(			'group_id'			=> array('UINT', 0),			'forum_id'			=> array('UINT', 0),			'auth_option_id'	=> array('UINT', 0),			'auth_role_id'		=> array('UINT', 0),			'auth_setting'		=> array('TINT:2', 0),		),		'KEYS'			=> array(			'group_id'		=> array('INDEX', 'group_id'),			'auth_opt_id'	=> array('INDEX', 'auth_option_id'),			'auth_role_id'	=> array('INDEX', 'auth_role_id'),		),	);	$schema_data['phpbb_acl_options'] = array(		'COLUMNS'		=> array(			'auth_option_id'	=> array('UINT', NULL, 'auto_increment'),			'auth_option'		=> array('VCHAR:50', ''),			'is_global'			=> array('BOOL', 0),			'is_local'			=> array('BOOL', 0),			'founder_only'		=> array('BOOL', 0),		),		'PRIMARY_KEY'	=> 'auth_option_id',		'KEYS'			=> array(			'auth_option'		=> array('UNIQUE', 'auth_option'),		),	);	$schema_data['phpbb_acl_roles'] = array(		'COLUMNS'		=> array(			'role_id'			=> array('UINT', NULL, 'auto_increment'),			'role_name'			=> array('VCHAR_UNI', ''),			'role_description'	=> array('TEXT_UNI', ''),			'role_type'			=> array('VCHAR:10', ''),			'role_order'		=> array('USINT', 0),		),		'PRIMARY_KEY'	=> 'role_id',		'KEYS'			=> array(			'role_type'			=> array('INDEX', 'role_type'),			'role_order'		=> array('INDEX', 'role_order'),		),	);	$schema_data['phpbb_acl_roles_data'] = array(		'COLUMNS'		=> array(			'role_id'			=> array('UINT', 0),			'auth_option_id'	=> array('UINT', 0),			'auth_setting'		=> array('TINT:2', 0),		),		'PRIMARY_KEY'	=> array('role_id', 'auth_option_id'),		'KEYS'			=> array(			'ath_op_id'			=> array('INDEX', 'auth_option_id'),		),	);	$schema_data['phpbb_acl_users'] = array(		'COLUMNS'		=> array(			'user_id'			=> array('UINT', 0),			'forum_id'			=> array('UINT', 0),			'auth_option_id'	=> array('UINT', 0),			'auth_role_id'		=> array('UINT', 0),			'auth_setting'		=> array('TINT:2', 0),		),		'KEYS'			=> array(			'user_id'			=> array('INDEX', 'user_id'),			'auth_option_id'	=> array('INDEX', 'auth_option_id'),			'auth_role_id'		=> array('INDEX', 'auth_role_id'),		),	);	$schema_data['phpbb_banlist'] = array(		'COLUMNS'		=> array(			'ban_id'			=> array('UINT', NULL, 'auto_increment'),			'ban_userid'		=> array('UINT', 0),			'ban_ip'			=> array('VCHAR:40', ''),			'ban_email'			=> array('VCHAR_UNI:100', ''),			'ban_start'			=> array('TIMESTAMP', 0),			'ban_end'			=> array('TIMESTAMP', 0),			'ban_exclude'		=> array('BOOL', 0),			'ban_reason'		=> array('VCHAR_UNI', ''),			'ban_give_reason'	=> array('VCHAR_UNI', ''),		),		'PRIMARY_KEY'			=> 'ban_id',		'KEYS'			=> array(			'ban_end'			=> array('INDEX', 'ban_end'),			'ban_user'			=> array('INDEX', array('ban_userid', 'ban_exclude')),			'ban_email'			=> array('INDEX', array('ban_email', 'ban_exclude')),			'ban_ip'			=> array('INDEX', array('ban_ip', 'ban_exclude')),		),	);	$schema_data['phpbb_bbcodes'] = array(		'COLUMNS'		=> array(			'bbcode_id'				=> array('USINT', 0),			'bbcode_tag'			=> array('VCHAR:16', ''),			'bbcode_helpline'		=> array('VCHAR_UNI', ''),			'display_on_posting'	=> array('BOOL', 0),			'bbcode_match'			=> array('TEXT_UNI', ''),			'bbcode_tpl'			=> array('MTEXT_UNI', ''),			'first_pass_match'		=> array('MTEXT_UNI', ''),			'first_pass_replace'	=> array('MTEXT_UNI', ''),			'second_pass_match'		=> array('MTEXT_UNI', ''),			'second_pass_replace'	=> array('MTEXT_UNI', ''),		),		'PRIMARY_KEY'	=> 'bbcode_id',		'KEYS'			=> array(			'display_on_post'		=> array('INDEX', 'display_on_posting'),		),	);	$schema_data['phpbb_bookmarks'] = array(		'COLUMNS'		=> array(			'topic_id'			=> array('UINT', 0),			'user_id'			=> array('UINT', 0),		),		'PRIMARY_KEY'			=> array('topic_id', 'user_id'),	);	$schema_data['phpbb_bots'] = array(		'COLUMNS'		=> array(			'bot_id'			=> array('UINT', NULL, 'auto_increment'),			'bot_active'		=> array('BOOL', 1),			'bot_name'			=> array('STEXT_UNI', ''),			'user_id'			=> array('UINT', 0),			'bot_agent'			=> array('VCHAR', ''),			'bot_ip'			=> array('VCHAR', ''),		),		'PRIMARY_KEY'	=> 'bot_id',		'KEYS'			=> array(			'bot_active'		=> array('INDEX', 'bot_active'),		),	);	$schema_data['phpbb_config'] = array(		'COLUMNS'		=> array(			'config_name'		=> array('VCHAR', ''),			'config_value'		=> array('VCHAR_UNI', ''),			'is_dynamic'		=> array('BOOL', 0),		),		'PRIMARY_KEY'	=> 'config_name',		'KEYS'			=> array(			'is_dynamic'		=> array('INDEX', 'is_dynamic'),		),	);	$schema_data['phpbb_confirm'] = array(		'COLUMNS'		=> array(			'confirm_id'		=> array('CHAR:32', ''),			'session_id'		=> array('CHAR:32', ''),			'confirm_type'		=> array('TINT:3', 0),			'code'				=> array('VCHAR:8', ''),			'seed'				=> array('UINT:10', 0),			'attempts'			=> array('UINT', 0),		),		'PRIMARY_KEY'	=> array('session_id', 'confirm_id'),		'KEYS'			=> array(			'confirm_type'		=> array('INDEX', 'confirm_type'),		),	);	$schema_data['phpbb_disallow'] = array(		'COLUMNS'		=> array(			'disallow_id'		=> array('UINT', NULL, 'auto_increment'),			'disallow_username'	=> array('VCHAR_UNI:255', ''),		),		'PRIMARY_KEY'	=> 'disallow_id',	);	$schema_data['phpbb_drafts'] = array(		'COLUMNS'		=> array(			'draft_id'			=> array('UINT', NULL, 'auto_increment'),			'user_id'			=> array('UINT', 0),			'topic_id'			=> array('UINT', 0),			'forum_id'			=> array('UINT', 0),			'save_time'			=> array('TIMESTAMP', 0),			'draft_subject'		=> array('STEXT_UNI', ''),			'draft_message'		=> array('MTEXT_UNI', ''),		),		'PRIMARY_KEY'	=> 'draft_id',		'KEYS'			=> array(			'save_time'			=> array('INDEX', 'save_time'),		),	);	$schema_data['phpbb_extensions'] = array(		'COLUMNS'		=> array(			'extension_id'		=> array('UINT', NULL, 'auto_increment'),			'group_id'			=> array('UINT', 0),			'extension'			=> array('VCHAR:100', ''),		),		'PRIMARY_KEY'	=> 'extension_id',	);	$schema_data['phpbb_extension_groups'] = array(		'COLUMNS'		=> array(			'group_id'			=> array('UINT', NULL, 'auto_increment'),			'group_name'		=> array('VCHAR_UNI', ''),			'cat_id'			=> array('TINT:2', 0),			'allow_group'		=> array('BOOL', 0),			'download_mode'		=> array('BOOL', 1),			'upload_icon'		=> array('VCHAR', ''),			'max_filesize'		=> array('UINT:20', 0),			'allowed_forums'	=> array('TEXT', ''),			'allow_in_pm'		=> array('BOOL', 0),		),		'PRIMARY_KEY'	=> 'group_id',	);	$schema_data['phpbb_forums'] = array(		'COLUMNS'		=> array(			'forum_id'				=> array('UINT', NULL, 'auto_increment'),			'parent_id'				=> array('UINT', 0),			'left_id'				=> array('UINT', 0),			'right_id'				=> array('UINT', 0),			'forum_parents'			=> array('MTEXT', ''),			'forum_name'			=> array('STEXT_UNI', ''),			'forum_desc'			=> array('TEXT_UNI', ''),			'forum_desc_bitfield'	=> array('VCHAR:255', ''),			'forum_desc_options'	=> array('UINT:11', 7),			'forum_desc_uid'		=> array('VCHAR:8', ''),			'forum_link'			=> array('VCHAR_UNI', ''),			'forum_password'		=> array('VCHAR_UNI:40', ''),			'forum_style'			=> array('UINT', 0),			'forum_image'			=> array('VCHAR', ''),			'forum_rules'			=> array('TEXT_UNI', ''),			'forum_rules_link'		=> array('VCHAR_UNI', ''),			'forum_rules_bitfield'	=> array('VCHAR:255', ''),			'forum_rules_options'	=> array('UINT:11', 7),			'forum_rules_uid'		=> array('VCHAR:8', ''),			'forum_topics_per_page'	=> array('TINT:4', 0),			'forum_type'			=> array('TINT:4', 0),			'forum_status'			=> array('TINT:4', 0),			'forum_posts'			=> array('UINT', 0),			'forum_topics'			=> array('UINT', 0),			'forum_topics_real'		=> array('UINT', 0),			'forum_last_post_id'	=> array('UINT', 0),			'forum_last_poster_id'	=> array('UINT', 0),			'forum_last_post_subject' => array('STEXT_UNI', ''),			'forum_last_post_time'	=> array('TIMESTAMP', 0),			'forum_last_poster_name'=> array('VCHAR_UNI', ''),			'forum_last_poster_colour'=> array('VCHAR:6', ''),			'forum_flags'			=> array('TINT:4', 32),			'forum_options'			=> array('UINT:20', 0),			'display_subforum_list'	=> array('BOOL', 1),			'display_on_index'		=> array('BOOL', 1),			'enable_indexing'		=> array('BOOL', 1),			'enable_icons'			=> array('BOOL', 1),			'enable_prune'			=> array('BOOL', 0),			'prune_next'			=> array('TIMESTAMP', 0),			'prune_days'			=> array('UINT', 0),			'prune_viewed'			=> array('UINT', 0),			'prune_freq'			=> array('UINT', 0),		),		'PRIMARY_KEY'	=> 'forum_id',		'KEYS'			=> array(			'left_right_id'			=> array('INDEX', array('left_id', 'right_id')),			'forum_lastpost_id'		=> array('INDEX', 'forum_last_post_id'),		),	);	$schema_data['phpbb_forums_access'] = array(		'COLUMNS'		=> array(			'forum_id'				=> array('UINT', 0),			'user_id'				=> array('UINT', 0),			'session_id'			=> array('CHAR:32', ''),		),		'PRIMARY_KEY'	=> array('forum_id', 'user_id', 'session_id'),	);	$schema_data['phpbb_forums_track'] = array(		'COLUMNS'		=> array(			'user_id'				=> array('UINT', 0),			'forum_id'				=> array('UINT', 0),			'mark_time'				=> array('TIMESTAMP', 0),		),		'PRIMARY_KEY'	=> array('user_id', 'forum_id'),	);	$schema_data['phpbb_forums_watch'] = array(		'COLUMNS'		=> array(			'forum_id'				=> array('UINT', 0),			'user_id'				=> array('UINT', 0),			'notify_status'			=> array('BOOL', 0),		),		'KEYS'			=> array(			'forum_id'				=> array('INDEX', 'forum_id'),			'user_id'				=> array('INDEX', 'user_id'),			'notify_stat'			=> array('INDEX', 'notify_status'),		),	);	$schema_data['phpbb_groups'] = array(		'COLUMNS'		=> array(			'group_id'				=> array('UINT', NULL, 'auto_increment'),			'group_type'			=> array('TINT:4', 1),			'group_founder_manage'	=> array('BOOL', 0),			'group_skip_auth'		=> array('BOOL', 0),			'group_name'			=> array('VCHAR_CI', ''),			'group_desc'			=> array('TEXT_UNI', ''),			'group_desc_bitfield'	=> array('VCHAR:255', ''),			'group_desc_options'	=> array('UINT:11', 7),			'group_desc_uid'		=> array('VCHAR:8', ''),			'group_display'			=> array('BOOL', 0),			'group_avatar'			=> array('VCHAR', ''),			'group_avatar_type'		=> array('TINT:2', 0),			'group_avatar_width'	=> array('USINT', 0),			'group_avatar_height'	=> array('USINT', 0),			'group_rank'			=> array('UINT', 0),			'group_colour'			=> array('VCHAR:6', ''),			'group_sig_chars'		=> array('UINT', 0),			'group_receive_pm'		=> array('BOOL', 0),			'group_message_limit'	=> array('UINT', 0),			'group_max_recipients'	=> array('UINT', 0),			'group_legend'			=> array('BOOL', 1),		),		'PRIMARY_KEY'	=> 'group_id',		'KEYS'			=> array(			'group_legend_name'		=> array('INDEX', array('group_legend', 'group_name')),		),	);	$schema_data['phpbb_icons'] = array(		'COLUMNS'		=> array(			'icons_id'				=> array('UINT', NULL, 'auto_increment'),			'icons_url'				=> array('VCHAR', ''),			'icons_width'			=> array('TINT:4', 0),			'icons_height'			=> array('TINT:4', 0),			'icons_order'			=> array('UINT', 0),			'display_on_posting'	=> array('BOOL', 1),		),		'PRIMARY_KEY'	=> 'icons_id',		'KEYS'			=> array(			'display_on_posting'	=> array('INDEX', 'display_on_posting'),		),	);	$schema_data['phpbb_lang'] = array(		'COLUMNS'		=> array(			'lang_id'				=> array('TINT:4', NULL, 'auto_increment'),			'lang_iso'				=> array('VCHAR:30', ''),			'lang_dir'				=> array('VCHAR:30', ''),			'lang_english_name'		=> array('VCHAR_UNI:100', ''),			'lang_local_name'		=> array('VCHAR_UNI:255', ''),			'lang_author'			=> array('VCHAR_UNI:255', ''),		),		'PRIMARY_KEY'	=> 'lang_id',		'KEYS'			=> array(			'lang_iso'				=> array('INDEX', 'lang_iso'),		),	);	$schema_data['phpbb_log'] = array(		'COLUMNS'		=> array(			'log_id'				=> array('UINT', NULL, 'auto_increment'),			'log_type'				=> array('TINT:4', 0),			'user_id'				=> array('UINT', 0),			'forum_id'				=> array('UINT', 0),			'topic_id'				=> array('UINT', 0),			'reportee_id'			=> array('UINT', 0),			'log_ip'				=> array('VCHAR:40', ''),			'log_time'				=> array('TIMESTAMP', 0),			'log_operation'			=> array('TEXT_UNI', ''),			'log_data'				=> array('MTEXT_UNI', ''),		),		'PRIMARY_KEY'	=> 'log_id',		'KEYS'			=> array(			'log_type'				=> array('INDEX', 'log_type'),			'forum_id'				=> array('INDEX', 'forum_id'),			'topic_id'				=> array('INDEX', 'topic_id'),			'reportee_id'			=> array('INDEX', 'reportee_id'),			'user_id'				=> array('INDEX', 'user_id'),		),	);	$schema_data['phpbb_login_attempts'] = array(		'COLUMNS'		=> array(			'attempt_ip'			=> array('VCHAR:40', ''),			'attempt_browser'		=> array('VCHAR:150', ''),			'attempt_forwarded_for'	=> array('VCHAR:255', ''),			'attempt_time'			=> array('TIMESTAMP', 0),			'user_id'				=> array('UINT', 0),			'username'				=> array('VCHAR_UNI:255', 0),			'username_clean'		=> array('VCHAR_CI', 0),		),		'KEYS'			=> array(			'att_ip'				=> array('INDEX', array('attempt_ip', 'attempt_time')),			'att_for'		=> array('INDEX', array('attempt_forwarded_for', 'attempt_time')),			'att_time'				=> array('INDEX', array('attempt_time')),			'user_id'					=> array('INDEX', 'user_id'),		),	);	$schema_data['phpbb_moderator_cache'] = array(		'COLUMNS'		=> array(			'forum_id'				=> array('UINT', 0),			'user_id'				=> array('UINT', 0),			'username'				=> array('VCHAR_UNI:255', ''),			'group_id'				=> array('UINT', 0),			'group_name'			=> array('VCHAR_UNI', ''),			'display_on_index'		=> array('BOOL', 1),		),		'KEYS'			=> array(			'disp_idx'				=> array('INDEX', 'display_on_index'),			'forum_id'				=> array('INDEX', 'forum_id'),		),	);	$schema_data['phpbb_modules'] = array(		'COLUMNS'		=> array(			'module_id'				=> array('UINT', NULL, 'auto_increment'),			'module_enabled'		=> array('BOOL', 1),			'module_display'		=> array('BOOL', 1),			'module_basename'		=> array('VCHAR', ''),			'module_class'			=> array('VCHAR:10', ''),			'parent_id'				=> array('UINT', 0),			'left_id'				=> array('UINT', 0),			'right_id'				=> array('UINT', 0),			'module_langname'		=> array('VCHAR', ''),			'module_mode'			=> array('VCHAR', ''),			'module_auth'			=> array('VCHAR', ''),		),		'PRIMARY_KEY'	=> 'module_id',		'KEYS'			=> array(			'left_right_id'			=> array('INDEX', array('left_id', 'right_id')),			'module_enabled'		=> array('INDEX', 'module_enabled'),			'class_left_id'			=> array('INDEX', array('module_class', 'left_id')),		),	);	$schema_data['phpbb_poll_options'] = array(		'COLUMNS'		=> array(			'poll_option_id'		=> array('TINT:4', 0),			'topic_id'				=> array('UINT', 0),			'poll_option_text'		=> array('TEXT_UNI', ''),			'poll_option_total'		=> array('UINT', 0),		),		'KEYS'			=> array(			'poll_opt_id'			=> array('INDEX', 'poll_option_id'),			'topic_id'				=> array('INDEX', 'topic_id'),		),	);	$schema_data['phpbb_poll_votes'] = array(		'COLUMNS'		=> array(			'topic_id'				=> array('UINT', 0),			'poll_option_id'		=> array('TINT:4', 0),			'vote_user_id'			=> array('UINT', 0),			'vote_user_ip'			=> array('VCHAR:40', ''),		),		'KEYS'			=> array(			'topic_id'				=> array('INDEX', 'topic_id'),			'vote_user_id'			=> array('INDEX', 'vote_user_id'),			'vote_user_ip'			=> array('INDEX', 'vote_user_ip'),		),	);	$schema_data['phpbb_posts'] = array(		'COLUMNS'		=> array(			'post_id'				=> array('UINT', NULL, 'auto_increment'),			'topic_id'				=> array('UINT', 0),			'forum_id'				=> array('UINT', 0),			'poster_id'				=> array('UINT', 0),			'icon_id'				=> array('UINT', 0),			'poster_ip'				=> array('VCHAR:40', ''),			'post_time'				=> array('TIMESTAMP', 0),			'post_approved'			=> array('BOOL', 1),			'post_reported'			=> array('BOOL', 0),			'enable_bbcode'			=> array('BOOL', 1),			'enable_smilies'		=> array('BOOL', 1),			'enable_magic_url'		=> array('BOOL', 1),			'enable_sig'			=> array('BOOL', 1),			'post_username'			=> array('VCHAR_UNI:255', ''),			'post_subject'			=> array('STEXT_UNI', '', 'true_sort'),			'post_text'				=> array('MTEXT_UNI', ''),			'post_checksum'			=> array('VCHAR:32', ''),			'post_attachment'		=> array('BOOL', 0),			'bbcode_bitfield'		=> array('VCHAR:255', ''),			'bbcode_uid'			=> array('VCHAR:8', ''),			'post_postcount'		=> array('BOOL', 1),			'post_edit_time'		=> array('TIMESTAMP', 0),			'post_edit_reason'		=> array('STEXT_UNI', ''),			'post_edit_user'		=> array('UINT', 0),			'post_edit_count'		=> array('USINT', 0),			'post_edit_locked'		=> array('BOOL', 0),		),		'PRIMARY_KEY'	=> 'post_id',		'KEYS'			=> array(			'forum_id'				=> array('INDEX', 'forum_id'),			'topic_id'				=> array('INDEX', 'topic_id'),			'poster_ip'				=> array('INDEX', 'poster_ip'),			'poster_id'				=> array('INDEX', 'poster_id'),			'post_approved'			=> array('INDEX', 'post_approved'),			'post_username'			=> array('INDEX', 'post_username'),			'tid_post_time'			=> array('INDEX', array('topic_id', 'post_time')),		),	);	$schema_data['phpbb_privmsgs'] = array(		'COLUMNS'		=> array(			'msg_id'				=> array('UINT', NULL, 'auto_increment'),			'root_level'			=> array('UINT', 0),			'author_id'				=> array('UINT', 0),			'icon_id'				=> array('UINT', 0),			'author_ip'				=> array('VCHAR:40', ''),			'message_time'			=> array('TIMESTAMP', 0),			'enable_bbcode'			=> array('BOOL', 1),			'enable_smilies'		=> array('BOOL', 1),			'enable_magic_url'		=> array('BOOL', 1),			'enable_sig'			=> array('BOOL', 1),			'message_subject'		=> array('STEXT_UNI', ''),			'message_text'			=> array('MTEXT_UNI', ''),			'message_edit_reason'	=> array('STEXT_UNI', ''),			'message_edit_user'		=> array('UINT', 0),			'message_attachment'	=> array('BOOL', 0),			'bbcode_bitfield'		=> array('VCHAR:255', ''),			'bbcode_uid'			=> array('VCHAR:8', ''),			'message_edit_time'		=> array('TIMESTAMP', 0),			'message_edit_count'	=> array('USINT', 0),			'to_address'			=> array('TEXT_UNI', ''),			'bcc_address'			=> array('TEXT_UNI', ''),			'message_reported'		=> array('BOOL', 0),		),		'PRIMARY_KEY'	=> 'msg_id',		'KEYS'			=> array(			'author_ip'				=> array('INDEX', 'author_ip'),			'message_time'			=> array('INDEX', 'message_time'),			'author_id'				=> array('INDEX', 'author_id'),			'root_level'			=> array('INDEX', 'root_level'),		),	);	$schema_data['phpbb_privmsgs_folder'] = array(		'COLUMNS'		=> array(			'folder_id'				=> array('UINT', NULL, 'auto_increment'),			'user_id'				=> array('UINT', 0),			'folder_name'			=> array('VCHAR_UNI', ''),			'pm_count'				=> array('UINT', 0),		),		'PRIMARY_KEY'	=> 'folder_id',		'KEYS'			=> array(			'user_id'				=> array('INDEX', 'user_id'),		),	);	$schema_data['phpbb_privmsgs_rules'] = array(		'COLUMNS'		=> array(			'rule_id'				=> array('UINT', NULL, 'auto_increment'),			'user_id'				=> array('UINT', 0),			'rule_check'			=> array('UINT', 0),			'rule_connection'		=> array('UINT', 0),			'rule_string'			=> array('VCHAR_UNI', ''),			'rule_user_id'			=> array('UINT', 0),			'rule_group_id'			=> array('UINT', 0),			'rule_action'			=> array('UINT', 0),			'rule_folder_id'		=> array('INT:11', 0),		),		'PRIMARY_KEY'	=> 'rule_id',		'KEYS'			=> array(			'user_id'				=> array('INDEX', 'user_id'),		),	);	$schema_data['phpbb_privmsgs_to'] = array(		'COLUMNS'		=> array(			'msg_id'				=> array('UINT', 0),			'user_id'				=> array('UINT', 0),			'author_id'				=> array('UINT', 0),			'pm_deleted'			=> array('BOOL', 0),			'pm_new'				=> array('BOOL', 1),			'pm_unread'				=> array('BOOL', 1),			'pm_replied'			=> array('BOOL', 0),			'pm_marked'				=> array('BOOL', 0),			'pm_forwarded'			=> array('BOOL', 0),			'folder_id'				=> array('INT:11', 0),		),		'KEYS'			=> array(			'msg_id'				=> array('INDEX', 'msg_id'),			'author_id'				=> array('INDEX', 'author_id'),			'usr_flder_id'			=> array('INDEX', array('user_id', 'folder_id')),		),	);	$schema_data['phpbb_profile_fields'] = array(		'COLUMNS'		=> array(			'field_id'				=> array('UINT', NULL, 'auto_increment'),			'field_name'			=> array('VCHAR_UNI', ''),			'field_type'			=> array('TINT:4', 0),			'field_ident'			=> array('VCHAR:20', ''),			'field_length'			=> array('VCHAR:20', ''),			'field_minlen'			=> array('VCHAR', ''),			'field_maxlen'			=> array('VCHAR', ''),			'field_novalue'			=> array('VCHAR_UNI', ''),			'field_default_value'	=> array('VCHAR_UNI', ''),			'field_validation'		=> array('VCHAR_UNI:20', ''),			'field_required'		=> array('BOOL', 0),			'field_show_on_reg'		=> array('BOOL', 0),			'field_show_on_vt'		=> array('BOOL', 0),			'field_show_profile'	=> array('BOOL', 0),			'field_hide'			=> array('BOOL', 0),			'field_no_view'			=> array('BOOL', 0),			'field_active'			=> array('BOOL', 0),			'field_order'			=> array('UINT', 0),		),		'PRIMARY_KEY'	=> 'field_id',		'KEYS'			=> array(			'fld_type'			=> array('INDEX', 'field_type'),			'fld_ordr'			=> array('INDEX', 'field_order'),		),	);	$schema_data['phpbb_profile_fields_data'] = array(		'COLUMNS'		=> array(			'user_id'				=> array('UINT', 0),		),		'PRIMARY_KEY'	=> 'user_id',	);	$schema_data['phpbb_profile_fields_lang'] = array(		'COLUMNS'		=> array(			'field_id'				=> array('UINT', 0),			'lang_id'				=> array('UINT', 0),			'option_id'				=> array('UINT', 0),			'field_type'			=> array('TINT:4', 0),			'lang_value'			=> array('VCHAR_UNI', ''),		),		'PRIMARY_KEY'	=> array('field_id', 'lang_id', 'option_id'),	);	$schema_data['phpbb_profile_lang'] = array(		'COLUMNS'		=> array(			'field_id'				=> array('UINT', 0),			'lang_id'				=> array('UINT', 0),			'lang_name'				=> array('VCHAR_UNI', ''),			'lang_explain'			=> array('TEXT_UNI', ''),			'lang_default_value'	=> array('VCHAR_UNI', ''),		),		'PRIMARY_KEY'	=> array('field_id', 'lang_id'),	);	$schema_data['phpbb_ranks'] = array(		'COLUMNS'		=> array(			'rank_id'				=> array('UINT', NULL, 'auto_increment'),			'rank_title'			=> array('VCHAR_UNI', ''),			'rank_min'				=> array('UINT', 0),			'rank_special'			=> array('BOOL', 0),			'rank_image'			=> array('VCHAR', ''),		),		'PRIMARY_KEY'	=> 'rank_id',	);	$schema_data['phpbb_reports'] = array(		'COLUMNS'		=> array(			'report_id'				=> array('UINT', NULL, 'auto_increment'),			'reason_id'				=> array('USINT', 0),			'post_id'				=> array('UINT', 0),			'pm_id'					=> array('UINT', 0),			'user_id'				=> array('UINT', 0),			'user_notify'			=> array('BOOL', 0),			'report_closed'			=> array('BOOL', 0),			'report_time'			=> array('TIMESTAMP', 0),			'report_text'			=> array('MTEXT_UNI', ''),		),		'PRIMARY_KEY'	=> 'report_id',		'KEYS'			=> array(			'post_id'			=> array('INDEX', 'post_id'),			'pm_id'				=> array('INDEX', 'pm_id'),		),	);	$schema_data['phpbb_reports_reasons'] = array(		'COLUMNS'		=> array(			'reason_id'				=> array('USINT', NULL, 'auto_increment'),			'reason_title'			=> array('VCHAR_UNI', ''),			'reason_description'	=> array('MTEXT_UNI', ''),			'reason_order'			=> array('USINT', 0),		),		'PRIMARY_KEY'	=> 'reason_id',	);	$schema_data['phpbb_search_results'] = array(		'COLUMNS'		=> array(			'search_key'			=> array('VCHAR:32', ''),			'search_time'			=> array('TIMESTAMP', 0),			'search_keywords'		=> array('MTEXT_UNI', ''),			'search_authors'		=> array('MTEXT', ''),		),		'PRIMARY_KEY'	=> 'search_key',	);	$schema_data['phpbb_search_wordlist'] = array(		'COLUMNS'		=> array(			'word_id'			=> array('UINT', NULL, 'auto_increment'),			'word_text'			=> array('VCHAR_UNI', ''),			'word_common'		=> array('BOOL', 0),			'word_count'		=> array('UINT', 0),		),		'PRIMARY_KEY'	=> 'word_id',		'KEYS'			=> array(			'wrd_txt'			=> array('UNIQUE', 'word_text'),			'wrd_cnt'			=> array('INDEX', 'word_count'),		),	);	$schema_data['phpbb_search_wordmatch'] = array(		'COLUMNS'		=> array(			'post_id'			=> array('UINT', 0),			'word_id'			=> array('UINT', 0),			'title_match'		=> array('BOOL', 0),		),		'KEYS'			=> array(			'unq_mtch'			=> array('UNIQUE', array('word_id', 'post_id', 'title_match')),			'word_id'			=> array('INDEX', 'word_id'),			'post_id'			=> array('INDEX', 'post_id'),		),	);	$schema_data['phpbb_sessions'] = array(		'COLUMNS'		=> array(			'session_id'			=> array('CHAR:32', ''),			'session_user_id'		=> array('UINT', 0),			'session_forum_id'		=> array('UINT', 0),			'session_last_visit'	=> array('TIMESTAMP', 0),			'session_start'			=> array('TIMESTAMP', 0),			'session_time'			=> array('TIMESTAMP', 0),			'session_ip'			=> array('VCHAR:40', ''),			'session_browser'		=> array('VCHAR:150', ''),			'session_forwarded_for'	=> array('VCHAR:255', ''),			'session_page'			=> array('VCHAR_UNI', ''),			'session_viewonline'	=> array('BOOL', 1),			'session_autologin'		=> array('BOOL', 0),			'session_admin'			=> array('BOOL', 0),		),		'PRIMARY_KEY'	=> 'session_id',		'KEYS'			=> array(			'session_time'		=> array('INDEX', 'session_time'),			'session_user_id'	=> array('INDEX', 'session_user_id'),			'session_fid'		=> array('INDEX', 'session_forum_id'),		),	);	$schema_data['phpbb_sessions_keys'] = array(		'COLUMNS'		=> array(			'key_id'			=> array('CHAR:32', ''),			'user_id'			=> array('UINT', 0),			'last_ip'			=> array('VCHAR:40', ''),			'last_login'		=> array('TIMESTAMP', 0),		),		'PRIMARY_KEY'	=> array('key_id', 'user_id'),		'KEYS'			=> array(			'last_login'		=> array('INDEX', 'last_login'),		),	);	$schema_data['phpbb_sitelist'] = array(		'COLUMNS'		=> array(			'site_id'		=> array('UINT', NULL, 'auto_increment'),			'site_ip'		=> array('VCHAR:40', ''),			'site_hostname'	=> array('VCHAR', ''),			'ip_exclude'	=> array('BOOL', 0),		),		'PRIMARY_KEY'		=> 'site_id',	);	$schema_data['phpbb_smilies'] = array(		'COLUMNS'		=> array(			'smiley_id'			=> array('UINT', NULL, 'auto_increment'),			// We may want to set 'code' to VCHAR:50 or check if unicode support is possible... at the moment only ASCII characters are allowed.			'code'				=> array('VCHAR_UNI:50', ''),			'emotion'			=> array('VCHAR_UNI:50', ''),			'smiley_url'		=> array('VCHAR:50', ''),			'smiley_width'		=> array('USINT', 0),			'smiley_height'		=> array('USINT', 0),			'smiley_order'		=> array('UINT', 0),			'display_on_posting'=> array('BOOL', 1),		),		'PRIMARY_KEY'	=> 'smiley_id',		'KEYS'			=> array(			'display_on_post'		=> array('INDEX', 'display_on_posting'),		),	);	$schema_data['phpbb_styles'] = array(		'COLUMNS'		=> array(			'style_id'				=> array('UINT', NULL, 'auto_increment'),			'style_name'			=> array('VCHAR_UNI:255', ''),			'style_copyright'		=> array('VCHAR_UNI', ''),			'style_active'			=> array('BOOL', 1),			'template_id'			=> array('UINT', 0),			'theme_id'				=> array('UINT', 0),			'imageset_id'			=> array('UINT', 0),		),		'PRIMARY_KEY'	=> 'style_id',		'KEYS'			=> array(			'style_name'		=> array('UNIQUE', 'style_name'),			'template_id'		=> array('INDEX', 'template_id'),			'theme_id'			=> array('INDEX', 'theme_id'),			'imageset_id'		=> array('INDEX', 'imageset_id'),		),	);	$schema_data['phpbb_styles_template'] = array(		'COLUMNS'		=> array(			'template_id'			=> array('UINT', NULL, 'auto_increment'),			'template_name'			=> array('VCHAR_UNI:255', ''),			'template_copyright'	=> array('VCHAR_UNI', ''),			'template_path'			=> array('VCHAR:100', ''),			'bbcode_bitfield'		=> array('VCHAR:255', 'kNg='),			'template_storedb'		=> array('BOOL', 0),			'template_inherits_id'		=> array('UINT:4', 0),			'template_inherit_path'		=> array('VCHAR', ''),		),		'PRIMARY_KEY'	=> 'template_id',		'KEYS'			=> array(			'tmplte_nm'				=> array('UNIQUE', 'template_name'),		),	);	$schema_data['phpbb_styles_template_data'] = array(		'COLUMNS'		=> array(			'template_id'			=> array('UINT', 0),			'template_filename'		=> array('VCHAR:100', ''),			'template_included'		=> array('TEXT', ''),			'template_mtime'		=> array('TIMESTAMP', 0),			'template_data'			=> array('MTEXT_UNI', ''),		),		'KEYS'			=> array(			'tid'					=> array('INDEX', 'template_id'),			'tfn'					=> array('INDEX', 'template_filename'),		),	);	$schema_data['phpbb_styles_theme'] = array(		'COLUMNS'		=> array(			'theme_id'				=> array('UINT', NULL, 'auto_increment'),			'theme_name'			=> array('VCHAR_UNI:255', ''),			'theme_copyright'		=> array('VCHAR_UNI', ''),			'theme_path'			=> array('VCHAR:100', ''),			'theme_storedb'			=> array('BOOL', 0),			'theme_mtime'			=> array('TIMESTAMP', 0),			'theme_data'			=> array('MTEXT_UNI', ''),		),		'PRIMARY_KEY'	=> 'theme_id',		'KEYS'			=> array(			'theme_name'		=> array('UNIQUE', 'theme_name'),		),	);	$schema_data['phpbb_styles_imageset'] = array(		'COLUMNS'		=> array(			'imageset_id'				=> array('UINT', NULL, 'auto_increment'),			'imageset_name'				=> array('VCHAR_UNI:255', ''),			'imageset_copyright'		=> array('VCHAR_UNI', ''),			'imageset_path'				=> array('VCHAR:100', ''),		),		'PRIMARY_KEY'		=> 'imageset_id',		'KEYS'				=> array(			'imgset_nm'			=> array('UNIQUE', 'imageset_name'),		),	);	$schema_data['phpbb_styles_imageset_data'] = array(		'COLUMNS'		=> array(			'image_id'				=> array('UINT', NULL, 'auto_increment'),			'image_name'			=> array('VCHAR:200', ''),			'image_filename'		=> array('VCHAR:200', ''),			'image_lang'			=> array('VCHAR:30', ''),			'image_height'			=> array('USINT', 0),			'image_width'			=> array('USINT', 0),			'imageset_id'			=> array('UINT', 0),		),		'PRIMARY_KEY'		=> 'image_id',		'KEYS'				=> array(			'i_d'			=> array('INDEX', 'imageset_id'),		),	);	$schema_data['phpbb_topics'] = array(		'COLUMNS'		=> array(			'topic_id'					=> array('UINT', NULL, 'auto_increment'),			'forum_id'					=> array('UINT', 0),			'icon_id'					=> array('UINT', 0),			'topic_attachment'			=> array('BOOL', 0),			'topic_approved'			=> array('BOOL', 1),			'topic_reported'			=> array('BOOL', 0),			'topic_title'				=> array('STEXT_UNI', '', 'true_sort'),			'topic_poster'				=> array('UINT', 0),			'topic_time'				=> array('TIMESTAMP', 0),			'topic_time_limit'			=> array('TIMESTAMP', 0),			'topic_views'				=> array('UINT', 0),			'topic_replies'				=> array('UINT', 0),			'topic_replies_real'		=> array('UINT', 0),			'topic_status'				=> array('TINT:3', 0),			'topic_type'				=> array('TINT:3', 0),			'topic_first_post_id'		=> array('UINT', 0),			'topic_first_poster_name'	=> array('VCHAR_UNI', ''),			'topic_first_poster_colour'	=> array('VCHAR:6', ''),			'topic_last_post_id'		=> array('UINT', 0),			'topic_last_poster_id'		=> array('UINT', 0),			'topic_last_poster_name'	=> array('VCHAR_UNI', ''),			'topic_last_poster_colour'	=> array('VCHAR:6', ''),			'topic_last_post_subject'	=> array('STEXT_UNI', ''),			'topic_last_post_time'		=> array('TIMESTAMP', 0),			'topic_last_view_time'		=> array('TIMESTAMP', 0),			'topic_moved_id'			=> array('UINT', 0),			'topic_bumped'				=> array('BOOL', 0),			'topic_bumper'				=> array('UINT', 0),			'poll_title'				=> array('STEXT_UNI', ''),			'poll_start'				=> array('TIMESTAMP', 0),			'poll_length'				=> array('TIMESTAMP', 0),			'poll_max_options'			=> array('TINT:4', 1),			'poll_last_vote'			=> array('TIMESTAMP', 0),			'poll_vote_change'			=> array('BOOL', 0),		),		'PRIMARY_KEY'	=> 'topic_id',		'KEYS'			=> array(			'forum_id'			=> array('INDEX', 'forum_id'),			'forum_id_type'		=> array('INDEX', array('forum_id', 'topic_type')),			'last_post_time'	=> array('INDEX', 'topic_last_post_time'),			'topic_approved'	=> array('INDEX', 'topic_approved'),			'forum_appr_last'	=> array('INDEX', array('forum_id', 'topic_approved', 'topic_last_post_id')),			'fid_time_moved'	=> array('INDEX', array('forum_id', 'topic_last_post_time', 'topic_moved_id')),		),	);	$schema_data['phpbb_topics_track'] = array(		'COLUMNS'		=> array(			'user_id'			=> array('UINT', 0),			'topic_id'			=> array('UINT', 0),			'forum_id'			=> array('UINT', 0),			'mark_time'			=> array('TIMESTAMP', 0),		),		'PRIMARY_KEY'	=> array('user_id', 'topic_id'),		'KEYS'			=> array(			'topic_id'			=> array('INDEX', 'topic_id'),			'forum_id'			=> array('INDEX', 'forum_id'),		),	);	$schema_data['phpbb_topics_posted'] = array(		'COLUMNS'		=> array(			'user_id'			=> array('UINT', 0),			'topic_id'			=> array('UINT', 0),			'topic_posted'		=> array('BOOL', 0),		),		'PRIMARY_KEY'	=> array('user_id', 'topic_id'),	);	$schema_data['phpbb_topics_watch'] = array(		'COLUMNS'		=> array(			'topic_id'			=> array('UINT', 0),			'user_id'			=> array('UINT', 0),			'notify_status'		=> array('BOOL', 0),		),		'KEYS'			=> array(			'topic_id'			=> array('INDEX', 'topic_id'),			'user_id'			=> array('INDEX', 'user_id'),			'notify_stat'		=> array('INDEX', 'notify_status'),		),	);	$schema_data['phpbb_user_group'] = array(		'COLUMNS'		=> array(			'group_id'			=> array('UINT', 0),			'user_id'			=> array('UINT', 0),			'group_leader'		=> array('BOOL', 0),			'user_pending'		=> array('BOOL', 1),		),		'KEYS'			=> array(			'group_id'			=> array('INDEX', 'group_id'),			'user_id'			=> array('INDEX', 'user_id'),			'group_leader'		=> array('INDEX', 'group_leader'),		),	);	$schema_data['phpbb_users'] = array(		'COLUMNS'		=> array(			'user_id'					=> array('UINT', NULL, 'auto_increment'),			'user_type'					=> array('TINT:2', 0),			'group_id'					=> array('UINT', 3),			'user_permissions'			=> array('MTEXT', ''),			'user_perm_from'			=> array('UINT', 0),			'user_ip'					=> array('VCHAR:40', ''),			'user_regdate'				=> array('TIMESTAMP', 0),			'username'					=> array('VCHAR_CI', ''),			'username_clean'			=> array('VCHAR_CI', ''),			'user_password'				=> array('VCHAR_UNI:40', ''),			'user_passchg'				=> array('TIMESTAMP', 0),			'user_pass_convert'			=> array('BOOL', 0),			'user_email'				=> array('VCHAR_UNI:100', ''),			'user_email_hash'			=> array('BINT', 0),			'user_birthday'				=> array('VCHAR:10', ''),			'user_lastvisit'			=> array('TIMESTAMP', 0),			'user_lastmark'				=> array('TIMESTAMP', 0),			'user_lastpost_time'		=> array('TIMESTAMP', 0),			'user_lastpage'				=> array('VCHAR_UNI:200', ''),			'user_last_confirm_key'		=> array('VCHAR:10', ''),			'user_last_search'			=> array('TIMESTAMP', 0),			'user_warnings'				=> array('TINT:4', 0),			'user_last_warning'			=> array('TIMESTAMP', 0),			'user_login_attempts'		=> array('TINT:4', 0),			'user_inactive_reason'		=> array('TINT:2', 0),			'user_inactive_time'		=> array('TIMESTAMP', 0),			'user_posts'				=> array('UINT', 0),			'user_lang'					=> array('VCHAR:30', ''),			'user_timezone'				=> array('DECIMAL', 0),			'user_dst'					=> array('BOOL', 0),			'user_dateformat'			=> array('VCHAR_UNI:30', 'd M Y H:i'),			'user_style'				=> array('UINT', 0),			'user_rank'					=> array('UINT', 0),			'user_colour'				=> array('VCHAR:6', ''),			'user_new_privmsg'			=> array('INT:4', 0),			'user_unread_privmsg'		=> array('INT:4', 0),			'user_last_privmsg'			=> array('TIMESTAMP', 0),			'user_message_rules'		=> array('BOOL', 0),			'user_full_folder'			=> array('INT:11', -3),			'user_emailtime'			=> array('TIMESTAMP', 0),			'user_topic_show_days'		=> array('USINT', 0),			'user_topic_sortby_type'	=> array('VCHAR:1', 't'),			'user_topic_sortby_dir'		=> array('VCHAR:1', 'd'),			'user_post_show_days'		=> array('USINT', 0),			'user_post_sortby_type'		=> array('VCHAR:1', 't'),			'user_post_sortby_dir'		=> array('VCHAR:1', 'a'),			'user_notify'				=> array('BOOL', 0),			'user_notify_pm'			=> array('BOOL', 1),			'user_notify_type'			=> array('TINT:4', 0),			'user_allow_pm'				=> array('BOOL', 1),			'user_allow_viewonline'		=> array('BOOL', 1),			'user_allow_viewemail'		=> array('BOOL', 1),			'user_allow_massemail'		=> array('BOOL', 1),			'user_options'				=> array('UINT:11', 230271),			'user_avatar'				=> array('VCHAR', ''),			'user_avatar_type'			=> array('TINT:2', 0),			'user_avatar_width'			=> array('USINT', 0),			'user_avatar_height'		=> array('USINT', 0),			'user_sig'					=> array('MTEXT_UNI', ''),			'user_sig_bbcode_uid'		=> array('VCHAR:8', ''),			'user_sig_bbcode_bitfield'	=> array('VCHAR:255', ''),			'user_from'					=> array('VCHAR_UNI:100', ''),			'user_icq'					=> array('VCHAR:15', ''),			'user_aim'					=> array('VCHAR_UNI', ''),			'user_yim'					=> array('VCHAR_UNI', ''),			'user_msnm'					=> array('VCHAR_UNI', ''),			'user_jabber'				=> array('VCHAR_UNI', ''),			'user_website'				=> array('VCHAR_UNI:200', ''),			'user_occ'					=> array('TEXT_UNI', ''),			'user_interests'			=> array('TEXT_UNI', ''),			'user_actkey'				=> array('VCHAR:32', ''),			'user_newpasswd'			=> array('VCHAR_UNI:40', ''),			'user_form_salt'			=> array('VCHAR_UNI:32', ''),			'user_new'					=> array('BOOL', 1),			'user_reminded'				=> array('TINT:4', 0),			'user_reminded_time'		=> array('TIMESTAMP', 0),		),		'PRIMARY_KEY'	=> 'user_id',		'KEYS'			=> array(			'user_birthday'				=> array('INDEX', 'user_birthday'),			'user_email_hash'			=> array('INDEX', 'user_email_hash'),			'user_type'					=> array('INDEX', 'user_type'),			'username_clean'			=> array('UNIQUE', 'username_clean'),		),	);	$schema_data['phpbb_warnings'] = array(		'COLUMNS'		=> array(			'warning_id'			=> array('UINT', NULL, 'auto_increment'),			'user_id'				=> array('UINT', 0),			'post_id'				=> array('UINT', 0),			'log_id'				=> array('UINT', 0),			'warning_time'			=> array('TIMESTAMP', 0),		),		'PRIMARY_KEY'	=> 'warning_id',	);	$schema_data['phpbb_words'] = array(		'COLUMNS'		=> array(			'word_id'				=> array('UINT', NULL, 'auto_increment'),			'word'					=> array('VCHAR_UNI', ''),			'replacement'			=> array('VCHAR_UNI', ''),		),		'PRIMARY_KEY'	=> 'word_id',	);	$schema_data['phpbb_zebra'] = array(		'COLUMNS'		=> array(			'user_id'				=> array('UINT', 0),			'zebra_id'				=> array('UINT', 0),			'friend'				=> array('BOOL', 0),			'foe'					=> array('BOOL', 0),		),		'PRIMARY_KEY'	=> array('user_id', 'zebra_id'),	);	return $schema_data;}/*** Data put into the header for various dbms*/function custom_data($dbms){	switch ($dbms)	{		case 'oracle':			return <<<EOF/*  This first section is optional, however its probably the best method  of running phpBB on Oracle. If you already have a tablespace and user created  for phpBB you can leave this section commented out!  The first set of statements create a phpBB tablespace and a phpBB user,  make sure you change the password of the phpBB user before you run this script!!*//*CREATE TABLESPACE "PHPBB"	LOGGING	DATAFILE 'E:\ORACLE\ORADATA\LOCAL\PHPBB.ora'	SIZE 10M	AUTOEXTEND ON NEXT 10M	MAXSIZE 100M;CREATE USER "PHPBB"	PROFILE "DEFAULT"	IDENTIFIED BY "phpbb_password"	DEFAULT TABLESPACE "PHPBB"	QUOTA UNLIMITED ON "PHPBB"	ACCOUNT UNLOCK;GRANT ANALYZE ANY TO "PHPBB";GRANT CREATE SEQUENCE TO "PHPBB";GRANT CREATE SESSION TO "PHPBB";GRANT CREATE TABLE TO "PHPBB";GRANT CREATE TRIGGER TO "PHPBB";GRANT CREATE VIEW TO "PHPBB";GRANT "CONNECT" TO "PHPBB";COMMIT;DISCONNECT;CONNECT phpbb/phpbb_password;*/EOF;		break;		case 'postgres':			return <<<EOF/*	Domain definition*/CREATE DOMAIN varchar_ci AS varchar(255) NOT NULL DEFAULT ''::character varying;/*	Operation Functions*/CREATE FUNCTION _varchar_ci_equal(varchar_ci, varchar_ci) RETURNS boolean AS 'SELECT LOWER($1) = LOWER($2)' LANGUAGE SQL STRICT;CREATE FUNCTION _varchar_ci_not_equal(varchar_ci, varchar_ci) RETURNS boolean AS 'SELECT LOWER($1) != LOWER($2)' LANGUAGE SQL STRICT;CREATE FUNCTION _varchar_ci_less_than(varchar_ci, varchar_ci) RETURNS boolean AS 'SELECT LOWER($1) < LOWER($2)' LANGUAGE SQL STRICT;CREATE FUNCTION _varchar_ci_less_equal(varchar_ci, varchar_ci) RETURNS boolean AS 'SELECT LOWER($1) <= LOWER($2)' LANGUAGE SQL STRICT;CREATE FUNCTION _varchar_ci_greater_than(varchar_ci, varchar_ci) RETURNS boolean AS 'SELECT LOWER($1) > LOWER($2)' LANGUAGE SQL STRICT;CREATE FUNCTION _varchar_ci_greater_equals(varchar_ci, varchar_ci) RETURNS boolean AS 'SELECT LOWER($1) >= LOWER($2)' LANGUAGE SQL STRICT;/*	Operators*/CREATE OPERATOR <(  PROCEDURE = _varchar_ci_less_than,  LEFTARG = varchar_ci,  RIGHTARG = varchar_ci,  COMMUTATOR = >,  NEGATOR = >=,  RESTRICT = scalarltsel,  JOIN = scalarltjoinsel);CREATE OPERATOR <=(  PROCEDURE = _varchar_ci_less_equal,  LEFTARG = varchar_ci,  RIGHTARG = varchar_ci,  COMMUTATOR = >=,  NEGATOR = >,  RESTRICT = scalarltsel,  JOIN = scalarltjoinsel);CREATE OPERATOR >(  PROCEDURE = _varchar_ci_greater_than,  LEFTARG = varchar_ci,  RIGHTARG = varchar_ci,  COMMUTATOR = <,  NEGATOR = <=,  RESTRICT = scalargtsel,  JOIN = scalargtjoinsel);CREATE OPERATOR >=(  PROCEDURE = _varchar_ci_greater_equals,  LEFTARG = varchar_ci,  RIGHTARG = varchar_ci,  COMMUTATOR = <=,  NEGATOR = <,  RESTRICT = scalargtsel,  JOIN = scalargtjoinsel);CREATE OPERATOR <>(  PROCEDURE = _varchar_ci_not_equal,  LEFTARG = varchar_ci,  RIGHTARG = varchar_ci,  COMMUTATOR = <>,  NEGATOR = =,  RESTRICT = neqsel,  JOIN = neqjoinsel);CREATE OPERATOR =(  PROCEDURE = _varchar_ci_equal,  LEFTARG = varchar_ci,  RIGHTARG = varchar_ci,  COMMUTATOR = =,  NEGATOR = <>,  RESTRICT = eqsel,  JOIN = eqjoinsel,  HASHES,  MERGES,  SORT1= <);EOF;		break;	}	return '';}echo 'done';
<?php/**** @package dbal* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @ignore*/if (!defined('IN_PHPBB')){	exit;}include_once($phpbb_root_path . 'includes/db/dbal.' . $phpEx);/*** MySQLi Database Abstraction Layer* mysqli-extension has to be compiled with:* MySQL 4.1+ or MySQL 5.0+* @package dbal*/class dbal_mysqli extends dbal{	var $multi_insert = true;	/**	* Connect to server	*/	function sql_connect($sqlserver, $sqluser, $sqlpassword, $database, $port = false, $persistency = false , $new_link = false)	{		// Mysqli extension supports persistent connection since PHP 5.3.0		$this->persistency = (version_compare(PHP_VERSION, '5.3.0', '>=')) ? $persistency : false;		$this->user = $sqluser;		// If persistent connection, set dbhost to localhost when empty and prepend it with 'p:' prefix		$this->server = ($this->persistency) ? 'p:' . (($sqlserver) ? $sqlserver : 'localhost') : $sqlserver;		$this->dbname = $database;		$port = (!$port) ? NULL : $port;		// If port is set and it is not numeric, most likely mysqli socket is set.		// Try to map it to the $socket parameter.		$socket = NULL;		if ($port)		{			if (is_numeric($port))			{				$port = (int) $port;			}			else			{				$socket = $port;				$port = NULL;			}		}		$this->db_connect_id = @mysqli_connect($this->server, $this->user, $sqlpassword, $this->dbname, $port, $socket);		if ($this->db_connect_id && $this->dbname != '')		{			@mysqli_query($this->db_connect_id, "SET NAMES 'utf8'");			// enforce strict mode on databases that support it			if (version_compare($this->sql_server_info(true), '5.0.2', '>='))			{				$result = @mysqli_query($this->db_connect_id, 'SELECT @@session.sql_mode AS sql_mode');				$row = @mysqli_fetch_assoc($result);				@mysqli_free_result($result);				$modes = array_map('trim', explode(',', $row['sql_mode']));				// TRADITIONAL includes STRICT_ALL_TABLES and STRICT_TRANS_TABLES				if (!in_array('TRADITIONAL', $modes))				{					if (!in_array('STRICT_ALL_TABLES', $modes))					{						$modes[] = 'STRICT_ALL_TABLES';					}					if (!in_array('STRICT_TRANS_TABLES', $modes))					{						$modes[] = 'STRICT_TRANS_TABLES';					}				}				$mode = implode(',', $modes);				@mysqli_query($this->db_connect_id, "SET SESSION sql_mode='{$mode}'");			}			return $this->db_connect_id;		}		return $this->sql_error('');	}	/**	* Version information about used database	* @param bool $use_cache If true, it is safe to retrieve the value from the cache	* @return string sql server version	*/	function sql_server_info($raw = false, $use_cache = true)	{		global $cache;		if (!$use_cache || empty($cache) || ($this->sql_server_version = $cache->get('mysqli_version')) === false)		{			$result = @mysqli_query($this->db_connect_id, 'SELECT VERSION() AS version');			$row = @mysqli_fetch_assoc($result);			@mysqli_free_result($result);			$this->sql_server_version = $row['version'];			if (!empty($cache) && $use_cache)			{				$cache->put('mysqli_version', $this->sql_server_version);			}		}		return ($raw) ? $this->sql_server_version : 'MySQL(i) ' . $this->sql_server_version;	}	/**	* SQL Transaction	* @access private	*/	function _sql_transaction($status = 'begin')	{		switch ($status)		{			case 'begin':				return @mysqli_autocommit($this->db_connect_id, false);			break;			case 'commit':				$result = @mysqli_commit($this->db_connect_id);				@mysqli_autocommit($this->db_connect_id, true);				return $result;			break;			case 'rollback':				$result = @mysqli_rollback($this->db_connect_id);				@mysqli_autocommit($this->db_connect_id, true);				return $result;			break;		}		return true;	}	/**	* Base query method	*	* @param	string	$query		Contains the SQL query which shall be executed	* @param	int		$cache_ttl	Either 0 to avoid caching or the time in seconds which the result shall be kept in cache	* @return	mixed				When casted to bool the returned value returns true on success and false on failure	*	* @access	public	*/	function sql_query($query = '', $cache_ttl = 0)	{		if ($query != '')		{			global $cache;			// EXPLAIN only in extra debug mode			if (defined('DEBUG_EXTRA'))			{				$this->sql_report('start', $query);			}			$this->query_result = ($cache_ttl && method_exists($cache, 'sql_load')) ? $cache->sql_load($query) : false;			$this->sql_add_num_queries($this->query_result);			if ($this->query_result === false)			{				if (($this->query_result = @mysqli_query($this->db_connect_id, $query)) === false)				{					$this->sql_error($query);				}				if (defined('DEBUG_EXTRA'))				{					$this->sql_report('stop', $query);				}				if ($cache_ttl && method_exists($cache, 'sql_save'))				{					$cache->sql_save($query, $this->query_result, $cache_ttl);				}			}			else if (defined('DEBUG_EXTRA'))			{				$this->sql_report('fromcache', $query);			}		}		else		{			return false;		}		return $this->query_result;	}	/**	* Build LIMIT query	*/	function _sql_query_limit($query, $total, $offset = 0, $cache_ttl = 0)	{		$this->query_result = false;		// if $total is set to 0 we do not want to limit the number of rows		if ($total == 0)		{			// MySQL 4.1+ no longer supports -1 in limit queries			$total = '18446744073709551615';		}		$query .= "\n LIMIT " . ((!empty($offset)) ? $offset . ', ' . $total : $total);		return $this->sql_query($query, $cache_ttl);	}	/**	* Return number of affected rows	*/	function sql_affectedrows()	{		return ($this->db_connect_id) ? @mysqli_affected_rows($this->db_connect_id) : false;	}	/**	* Fetch current row	*/	function sql_fetchrow($query_id = false)	{		global $cache;		if ($query_id === false)		{			$query_id = $this->query_result;		}		if (!is_object($query_id) && isset($cache->sql_rowset[$query_id]))		{			return $cache->sql_fetchrow($query_id);		}		if ($query_id !== false)		{			$result = @mysqli_fetch_assoc($query_id);			return $result !== null ? $result : false;		}		return false;	}	/**	* Seek to given row number	* rownum is zero-based	*/	function sql_rowseek($rownum, &$query_id)	{		global $cache;		if ($query_id === false)		{			$query_id = $this->query_result;		}		if (!is_object($query_id) && isset($cache->sql_rowset[$query_id]))		{			return $cache->sql_rowseek($rownum, $query_id);		}		return ($query_id !== false) ? @mysqli_data_seek($query_id, $rownum) : false;	}	/**	* Get last inserted id after insert statement	*/	function sql_nextid()	{		return ($this->db_connect_id) ? @mysqli_insert_id($this->db_connect_id) : false;	}	/**	* Free sql result	*/	function sql_freeresult($query_id = false)	{		global $cache;		if ($query_id === false)		{			$query_id = $this->query_result;		}		if (!is_object($query_id) && isset($cache->sql_rowset[$query_id]))		{			return $cache->sql_freeresult($query_id);		}		return @mysqli_free_result($query_id);	}	/**	* Escape string used in sql query	*/	function sql_escape($msg)	{		return @mysqli_real_escape_string($this->db_connect_id, $msg);	}	/**	* Build LIKE expression	* @access private	*/	function _sql_like_expression($expression)	{		return $expression;	}	/**	* Build db-specific query data	* @access private	*/	function _sql_custom_build($stage, $data)	{		switch ($stage)		{			case 'FROM':				$data = '(' . $data . ')';			break;		}		return $data;	}	/**	* return sql error array	* @access private	*/	function _sql_error()	{		if (!$this->db_connect_id)		{			return array(				'message'	=> @mysqli_connect_error(),				'code'		=> @mysqli_connect_errno()			);		}		return array(			'message'	=> @mysqli_error($this->db_connect_id),			'code'		=> @mysqli_errno($this->db_connect_id)		);	}	/**	* Close sql connection	* @access private	*/	function _sql_close()	{		return @mysqli_close($this->db_connect_id);	}	/**	* Build db-specific report	* @access private	*/	function _sql_report($mode, $query = '')	{		static $test_prof;		// current detection method, might just switch to see the existance of INFORMATION_SCHEMA.PROFILING		if ($test_prof === null)		{			$test_prof = false;			if (strpos(mysqli_get_server_info($this->db_connect_id), 'community') !== false)			{				$ver = mysqli_get_server_version($this->db_connect_id);				if ($ver >= 50037 && $ver < 50100)				{					$test_prof = true;				}			}		}		switch ($mode)		{			case 'start':				$explain_query = $query;				if (preg_match('/UPDATE ([a-z0-9_]+).*?WHERE(.*)/s', $query, $m))				{					$explain_query = 'SELECT * FROM ' . $m[1] . ' WHERE ' . $m[2];				}				else if (preg_match('/DELETE FROM ([a-z0-9_]+).*?WHERE(.*)/s', $query, $m))				{					$explain_query = 'SELECT * FROM ' . $m[1] . ' WHERE ' . $m[2];				}				if (preg_match('/^SELECT/', $explain_query))				{					$html_table = false;					// begin profiling					if ($test_prof)					{						@mysqli_query($this->db_connect_id, 'SET profiling = 1;');					}					if ($result = @mysqli_query($this->db_connect_id, "EXPLAIN $explain_query"))					{						while ($row = @mysqli_fetch_assoc($result))						{							$html_table = $this->sql_report('add_select_row', $query, $html_table, $row);						}					}					@mysqli_free_result($result);					if ($html_table)					{						$this->html_hold .= '</table>';					}					if ($test_prof)					{						$html_table = false;						// get the last profile						if ($result = @mysqli_query($this->db_connect_id, 'SHOW PROFILE ALL;'))						{							$this->html_hold .= '<br />';							while ($row = @mysqli_fetch_assoc($result))							{								// make <unknown> HTML safe								if (!empty($row['Source_function']))								{									$row['Source_function'] = str_replace(array('<', '>'), array('&lt;', '&gt;'), $row['Source_function']);								}								// remove unsupported features								foreach ($row as $key => $val)								{									if ($val === null)									{										unset($row[$key]);									}								}								$html_table = $this->sql_report('add_select_row', $query, $html_table, $row);							}						}						@mysqli_free_result($result);						if ($html_table)						{							$this->html_hold .= '</table>';						}						@mysqli_query($this->db_connect_id, 'SET profiling = 0;');					}				}			break;			case 'fromcache':				$endtime = explode(' ', microtime());				$endtime = $endtime[0] + $endtime[1];				$result = @mysqli_query($this->db_connect_id, $query);				while ($void = @mysqli_fetch_assoc($result))				{					// Take the time spent on parsing rows into account				}				@mysqli_free_result($result);				$splittime = explode(' ', microtime());				$splittime = $splittime[0] + $splittime[1];				$this->sql_report('record_fromcache', $query, $endtime, $splittime);			break;		}	}}?>
