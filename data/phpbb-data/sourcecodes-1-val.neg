<?php/**** @package acp* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//***/define('IN_PHPBB', true);define('ADMIN_START', true);define('NEED_SID', true);// Include files$phpbb_root_path = (defined('PHPBB_ROOT_PATH')) ? PHPBB_ROOT_PATH : './../';$phpEx = substr(strrchr(__FILE__, '.'), 1);require($phpbb_root_path . 'common.' . $phpEx);require($phpbb_root_path . 'includes/functions_admin.' . $phpEx);require($phpbb_root_path . 'includes/functions_module.' . $phpEx);// Start session management$user->session_begin();$auth->acl($user->data);$user->setup('acp/common');// End session management// Have they authenticated (again) as an admin for this session?if (!isset($user->data['session_admin']) || !$user->data['session_admin']){	login_box('', $user->lang['LOGIN_ADMIN_CONFIRM'], $user->lang['LOGIN_ADMIN_SUCCESS'], true, false);}// Is user any type of admin? No, then stop here, each script needs to// check specific permissions but this is a catchallif (!$auth->acl_get('a_')){	trigger_error('NO_ADMIN');}// We define the admin variables now, because the user is now able to use the admin related features...define('IN_ADMIN', true);$phpbb_admin_path = (defined('PHPBB_ADMIN_PATH')) ? PHPBB_ADMIN_PATH : './';// Some oft used variables$safe_mode		= (@ini_get('safe_mode') == '1' || strtolower(@ini_get('safe_mode')) === 'on') ? true : false;$file_uploads	= (@ini_get('file_uploads') == '1' || strtolower(@ini_get('file_uploads')) === 'on') ? true : false;$module_id		= request_var('i', '');$mode			= request_var('mode', '');// Set custom template for admin area$template->set_custom_template($phpbb_admin_path . 'style', 'admin');$template->assign_var('T_TEMPLATE_PATH', $phpbb_admin_path . 'style');// the acp template is never stored in the database$user->theme['template_storedb'] = false;// Instantiate new module$module = new p_master();// Instantiate module system and generate list of available modules$module->list_modules('acp');// Select the active module$module->set_active($module_id, $mode);// Assign data to the template engine for the list of modules// We do this before loading the active module for correct menu display in trigger_error$module->assign_tpl_vars(append_sid("{$phpbb_admin_path}index.$phpEx"));// Load and execute the relevant module$module->load_active();// Generate the pageadm_page_header($module->get_page_title());$template->set_filenames(array(	'body' => $module->get_tpl_name(),));adm_page_footer();/*** Header for acp pages*/function adm_page_header($page_title){	global $config, $db, $user, $template;	global $phpbb_root_path, $phpbb_admin_path, $phpEx, $SID, $_SID;	if (defined('HEADER_INC'))	{		return;	}	define('HEADER_INC', true);	// gzip_compression	if ($config['gzip_compress'])	{		if (@extension_loaded('zlib') && !headers_sent())		{			ob_start('ob_gzhandler');		}	}	$template->assign_vars(array(		'PAGE_TITLE'			=> $page_title,		'USERNAME'				=> $user->data['username'],		'SID'					=> $SID,		'_SID'					=> $_SID,		'SESSION_ID'			=> $user->session_id,		'ROOT_PATH'				=> $phpbb_admin_path,		'U_LOGOUT'				=> append_sid("{$phpbb_root_path}ucp.$phpEx", 'mode=logout'),		'U_ADM_LOGOUT'			=> append_sid("{$phpbb_admin_path}index.$phpEx", 'action=admlogout'),		'U_ADM_INDEX'			=> append_sid("{$phpbb_admin_path}index.$phpEx"),		'U_INDEX'				=> append_sid("{$phpbb_root_path}index.$phpEx"),		'T_IMAGES_PATH'			=> "{$phpbb_root_path}images/",		'T_SMILIES_PATH'		=> "{$phpbb_root_path}{$config['smilies_path']}/",		'T_AVATAR_PATH'			=> "{$phpbb_root_path}{$config['avatar_path']}/",		'T_AVATAR_GALLERY_PATH'	=> "{$phpbb_root_path}{$config['avatar_gallery_path']}/",		'T_ICONS_PATH'			=> "{$phpbb_root_path}{$config['icons_path']}/",		'T_RANKS_PATH'			=> "{$phpbb_root_path}{$config['ranks_path']}/",		'T_UPLOAD_PATH'			=> "{$phpbb_root_path}{$config['upload_path']}/",		'ICON_MOVE_UP'				=> '<img src="' . $phpbb_admin_path . 'images/icon_up.gif" alt="' . $user->lang['MOVE_UP'] . '" title="' . $user->lang['MOVE_UP'] . '" />',		'ICON_MOVE_UP_DISABLED'		=> '<img src="' . $phpbb_admin_path . 'images/icon_up_disabled.gif" alt="' . $user->lang['MOVE_UP'] . '" title="' . $user->lang['MOVE_UP'] . '" />',		'ICON_MOVE_DOWN'			=> '<img src="' . $phpbb_admin_path . 'images/icon_down.gif" alt="' . $user->lang['MOVE_DOWN'] . '" title="' . $user->lang['MOVE_DOWN'] . '" />',		'ICON_MOVE_DOWN_DISABLED'	=> '<img src="' . $phpbb_admin_path . 'images/icon_down_disabled.gif" alt="' . $user->lang['MOVE_DOWN'] . '" title="' . $user->lang['MOVE_DOWN'] . '" />',		'ICON_EDIT'					=> '<img src="' . $phpbb_admin_path . 'images/icon_edit.gif" alt="' . $user->lang['EDIT'] . '" title="' . $user->lang['EDIT'] . '" />',		'ICON_EDIT_DISABLED'		=> '<img src="' . $phpbb_admin_path . 'images/icon_edit_disabled.gif" alt="' . $user->lang['EDIT'] . '" title="' . $user->lang['EDIT'] . '" />',		'ICON_DELETE'				=> '<img src="' . $phpbb_admin_path . 'images/icon_delete.gif" alt="' . $user->lang['DELETE'] . '" title="' . $user->lang['DELETE'] . '" />',		'ICON_DELETE_DISABLED'		=> '<img src="' . $phpbb_admin_path . 'images/icon_delete_disabled.gif" alt="' . $user->lang['DELETE'] . '" title="' . $user->lang['DELETE'] . '" />',		'ICON_SYNC'					=> '<img src="' . $phpbb_admin_path . 'images/icon_sync.gif" alt="' . $user->lang['RESYNC'] . '" title="' . $user->lang['RESYNC'] . '" />',		'ICON_SYNC_DISABLED'		=> '<img src="' . $phpbb_admin_path . 'images/icon_sync_disabled.gif" alt="' . $user->lang['RESYNC'] . '" title="' . $user->lang['RESYNC'] . '" />',		'S_USER_LANG'			=> $user->lang['USER_LANG'],		'S_CONTENT_DIRECTION'	=> $user->lang['DIRECTION'],		'S_CONTENT_ENCODING'	=> 'UTF-8',		'S_CONTENT_FLOW_BEGIN'	=> ($user->lang['DIRECTION'] == 'ltr') ? 'left' : 'right',		'S_CONTENT_FLOW_END'	=> ($user->lang['DIRECTION'] == 'ltr') ? 'right' : 'left',	));	// application/xhtml+xml not used because of IE	header('Content-type: text/html; charset=UTF-8');	header('Cache-Control: private, no-cache="set-cookie"');	header('Expires: 0');	header('Pragma: no-cache');	return;}/*** Page footer for acp pages*/function adm_page_footer($copyright_html = true){	global $db, $config, $template, $user, $auth, $cache;	global $starttime, $phpbb_root_path, $phpbb_admin_path, $phpEx;	// Output page creation time	if (defined('DEBUG'))	{		$mtime = explode(' ', microtime());		$totaltime = $mtime[0] + $mtime[1] - $starttime;		if (!empty($_REQUEST['explain']) && $auth->acl_get('a_') && defined('DEBUG_EXTRA') && method_exists($db, 'sql_report'))		{			$db->sql_report('display');		}		$debug_output = sprintf('Time : %.3fs | ' . $db->sql_num_queries() . ' Queries | GZIP : ' . (($config['gzip_compress']) ? 'On' : 'Off') . (($user->load) ? ' | Load : ' . $user->load : ''), $totaltime);		if ($auth->acl_get('a_') && defined('DEBUG_EXTRA'))		{			if (function_exists('memory_get_usage'))			{				if ($memory_usage = memory_get_usage())				{					global $base_memory_usage;					$memory_usage -= $base_memory_usage;					$memory_usage = get_formatted_filesize($memory_usage);					$debug_output .= ' | Memory Usage: ' . $memory_usage;				}			}			$debug_output .= ' | <a href="' . build_url() . '&amp;explain=1">Explain</a>';		}	}	$template->assign_vars(array(		'DEBUG_OUTPUT'		=> (defined('DEBUG')) ? $debug_output : '',		'TRANSLATION_INFO'	=> (!empty($user->lang['TRANSLATION_INFO'])) ? $user->lang['TRANSLATION_INFO'] : '',		'S_COPYRIGHT_HTML'	=> $copyright_html,		'VERSION'			=> $config['version'])	);	$template->display('body');	garbage_collection();	exit_handler();}/*** Generate back link for acp pages*/function adm_back_link($u_action){	global $user;	return '<br /><br /><a href="' . $u_action . '">&laquo; ' . $user->lang['BACK_TO_PREV'] . '</a>';}/*** Build select field options in acp pages*/function build_select($option_ary, $option_default = false){	global $user;	$html = '';	foreach ($option_ary as $value => $title)	{		$selected = ($option_default !== false && $value == $option_default) ? ' selected="selected"' : '';		$html .= '<option value="' . $value . '"' . $selected . '>' . $user->lang[$title] . '</option>';	}	return $html;}/*** Build radio fields in acp pages*/function h_radio($name, $input_ary, $input_default = false, $id = false, $key = false, $separator = ''){	global $user;	$html = '';	$id_assigned = false;	foreach ($input_ary as $value => $title)	{		$selected = ($input_default !== false && $value == $input_default) ? ' checked="checked"' : '';		$html .= '<label><input type="radio" name="' . $name . '"' . (($id && !$id_assigned) ? ' id="' . $id . '"' : '') . ' value="' . $value . '"' . $selected . (($key) ? ' accesskey="' . $key . '"' : '') . ' class="radio" /> ' . $user->lang[$title] . '</label>' . $separator;		$id_assigned = true;	}	return $html;}/*** Build configuration template for acp configuration pages*/function build_cfg_template($tpl_type, $key, &$new, $config_key, $vars){	global $user, $module;	$tpl = '';	$name = 'config[' . $config_key . ']';	// Make sure there is no notice printed out for non-existent config options (we simply set them)	if (!isset($new[$config_key]))	{		$new[$config_key] = '';	}	switch ($tpl_type[0])	{		case 'text':		case 'password':			$size = (int) $tpl_type[1];			$maxlength = (int) $tpl_type[2];			$tpl = '<input id="' . $key . '" type="' . $tpl_type[0] . '"' . (($size) ? ' size="' . $size . '"' : '') . ' maxlength="' . (($maxlength) ? $maxlength : 255) . '" name="' . $name . '" value="' . $new[$config_key] . '"' . (($tpl_type[0] === 'password') ?  ' autocomplete="off"' : '') . ' />';		break;		case 'dimension':			$size = (int) $tpl_type[1];			$maxlength = (int) $tpl_type[2];			$tpl = '<input id="' . $key . '" type="text"' . (($size) ? ' size="' . $size . '"' : '') . ' maxlength="' . (($maxlength) ? $maxlength : 255) . '" name="config[' . $config_key . '_width]" value="' . $new[$config_key . '_width'] . '" /> x <input type="text"' . (($size) ? ' size="' . $size . '"' : '') . ' maxlength="' . (($maxlength) ? $maxlength : 255) . '" name="config[' . $config_key . '_height]" value="' . $new[$config_key . '_height'] . '" />';		break;		case 'textarea':			$rows = (int) $tpl_type[1];			$cols = (int) $tpl_type[2];			$tpl = '<textarea id="' . $key . '" name="' . $name . '" rows="' . $rows . '" cols="' . $cols . '">' . $new[$config_key] . '</textarea>';		break;		case 'radio':			$key_yes	= ($new[$config_key]) ? ' checked="checked"' : '';			$key_no		= (!$new[$config_key]) ? ' checked="checked"' : '';			$tpl_type_cond = explode('_', $tpl_type[1]);			$type_no = ($tpl_type_cond[0] == 'disabled' || $tpl_type_cond[0] == 'enabled') ? false : true;			$tpl_no = '<label><input type="radio" name="' . $name . '" value="0"' . $key_no . ' class="radio" /> ' . (($type_no) ? $user->lang['NO'] : $user->lang['DISABLED']) . '</label>';			$tpl_yes = '<label><input type="radio" id="' . $key . '" name="' . $name . '" value="1"' . $key_yes . ' class="radio" /> ' . (($type_no) ? $user->lang['YES'] : $user->lang['ENABLED']) . '</label>';			$tpl = ($tpl_type_cond[0] == 'yes' || $tpl_type_cond[0] == 'enabled') ? $tpl_yes . $tpl_no : $tpl_no . $tpl_yes;		break;		case 'select':		case 'custom':			$return = '';			if (isset($vars['method']))			{				$call = array($module->module, $vars['method']);			}			else if (isset($vars['function']))			{				$call = $vars['function'];			}			else			{				break;			}			if (isset($vars['params']))			{				$args = array();				foreach ($vars['params'] as $value)				{					switch ($value)					{						case '{CONFIG_VALUE}':							$value = $new[$config_key];						break;						case '{KEY}':							$value = $key;						break;					}					$args[] = $value;				}			}			else			{				$args = array($new[$config_key], $key);			}			$return = call_user_func_array($call, $args);			if ($tpl_type[0] == 'select')			{				$tpl = '<select id="' . $key . '" name="' . $name . '">' . $return . '</select>';			}			else			{				$tpl = $return;			}		break;		default:		break;	}	if (isset($vars['append']))	{		$tpl .= $vars['append'];	}	return $tpl;}/*** Going through a config array and validate values, writing errors to $error. The validation method  accepts parameters separated by ':' for string and int.* The first parameter defines the type to be used, the second the lower bound and the third the upper bound. Only the type is required.*/function validate_config_vars($config_vars, &$cfg_array, &$error){	global $phpbb_root_path, $user;	$type	= 0;	$min	= 1;	$max	= 2;	foreach ($config_vars as $config_name => $config_definition)	{		if (!isset($cfg_array[$config_name]) || strpos($config_name, 'legend') !== false)		{			continue;		}		if (!isset($config_definition['validate']))		{			continue;		}		$validator = explode(':', $config_definition['validate']);		// Validate a bit. ;) (0 = type, 1 = min, 2= max)		switch ($validator[$type])		{			case 'string':				$length = utf8_strlen($cfg_array[$config_name]);				// the column is a VARCHAR				$validator[$max] = (isset($validator[$max])) ? min(255, $validator[$max]) : 255;				if (isset($validator[$min]) && $length < $validator[$min])				{					$error[] = sprintf($user->lang['SETTING_TOO_SHORT'], $user->lang[$config_definition['lang']], $validator[$min]);				}				else if (isset($validator[$max]) && $length > $validator[2])				{					$error[] = sprintf($user->lang['SETTING_TOO_LONG'], $user->lang[$config_definition['lang']], $validator[$max]);				}			break;			case 'bool':				$cfg_array[$config_name] = ($cfg_array[$config_name]) ? 1 : 0;			break;			case 'int':				$cfg_array[$config_name] = (int) $cfg_array[$config_name];				if (isset($validator[$min]) && $cfg_array[$config_name] < $validator[$min])				{					$error[] = sprintf($user->lang['SETTING_TOO_LOW'], $user->lang[$config_definition['lang']], $validator[$min]);				}				else if (isset($validator[$max]) && $cfg_array[$config_name] > $validator[$max])				{					$error[] = sprintf($user->lang['SETTING_TOO_BIG'], $user->lang[$config_definition['lang']], $validator[$max]);				}				if (strpos($config_name, '_max') !== false)				{					// Min/max pairs of settings should ensure that min <= max					// Replace _max with _min to find the name of the minimum					// corresponding configuration variable					$min_name = str_replace('_max', '_min', $config_name);					if (isset($cfg_array[$min_name]) && is_numeric($cfg_array[$min_name]) && $cfg_array[$config_name] < $cfg_array[$min_name])					{						// A minimum value exists and the maximum value is less than it						$error[] = sprintf($user->lang['SETTING_TOO_LOW'], $user->lang[$config_definition['lang']], (int) $cfg_array[$min_name]);					}				}			break;			// Absolute path			case 'script_path':				if (!$cfg_array[$config_name])				{					break;				}				$destination = str_replace('\\', '/', $cfg_array[$config_name]);				if ($destination !== '/')				{					// Adjust destination path (no trailing slash)					if (substr($destination, -1, 1) == '/')					{						$destination = substr($destination, 0, -1);					}					$destination = str_replace(array('../', './'), '', $destination);					if ($destination[0] != '/')					{						$destination = '/' . $destination;					}				}				$cfg_array[$config_name] = trim($destination);			break;			// Absolute path			case 'lang':				if (!$cfg_array[$config_name])				{					break;				}				$cfg_array[$config_name] = basename($cfg_array[$config_name]);				if (!file_exists($phpbb_root_path . 'language/' . $cfg_array[$config_name] . '/'))				{					$error[] = $user->lang['WRONG_DATA_LANG'];				}			break;			// Relative path (appended $phpbb_root_path)			case 'rpath':			case 'rwpath':				if (!$cfg_array[$config_name])				{					break;				}				$destination = $cfg_array[$config_name];				// Adjust destination path (no trailing slash)				if (substr($destination, -1, 1) == '/' || substr($destination, -1, 1) == '\\')				{					$destination = substr($destination, 0, -1);				}				$destination = str_replace(array('../', '..\\', './', '.\\'), '', $destination);				if ($destination && ($destination[0] == '/' || $destination[0] == "\\"))				{					$destination = '';				}				$cfg_array[$config_name] = trim($destination);			// Path being relative (still prefixed by phpbb_root_path), but with the ability to escape the root dir...			case 'path':			case 'wpath':				if (!$cfg_array[$config_name])				{					break;				}				$cfg_array[$config_name] = trim($cfg_array[$config_name]);				// Make sure no NUL byte is present...				if (strpos($cfg_array[$config_name], "\0") !== false || strpos($cfg_array[$config_name], '%00') !== false)				{					$cfg_array[$config_name] = '';					break;				}				if (!file_exists($phpbb_root_path . $cfg_array[$config_name]))				{					$error[] = sprintf($user->lang['DIRECTORY_DOES_NOT_EXIST'], $cfg_array[$config_name]);				}				if (file_exists($phpbb_root_path . $cfg_array[$config_name]) && !is_dir($phpbb_root_path . $cfg_array[$config_name]))				{					$error[] = sprintf($user->lang['DIRECTORY_NOT_DIR'], $cfg_array[$config_name]);				}				// Check if the path is writable				if ($config_definition['validate'] == 'wpath' || $config_definition['validate'] == 'rwpath')				{					if (file_exists($phpbb_root_path . $cfg_array[$config_name]) && !phpbb_is_writable($phpbb_root_path . $cfg_array[$config_name]))					{						$error[] = sprintf($user->lang['DIRECTORY_NOT_WRITABLE'], $cfg_array[$config_name]);					}				}			break;		}	}	return;}/*** Checks whatever or not a variable is OK for use in the Database* param mixed $value_ary An array of the form array(array('lang' => ..., 'value' => ..., 'column_type' =>))'* param mixed $error The error array*/function validate_range($value_ary, &$error){	global $user;	$column_types = array(		'BOOL'	=> array('php_type' => 'int', 		'min' => 0, 				'max' => 1),		'USINT'	=> array('php_type' => 'int',		'min' => 0, 				'max' => 65535),		'UINT'	=> array('php_type' => 'int', 		'min' => 0, 				'max' => (int) 0x7fffffff),		// Do not use (int) 0x80000000 - it evaluates to different		// values on 32-bit and 64-bit systems.		// Apparently -2147483648 is a float on 32-bit systems,		// despite fitting in an int, thus explicit cast is needed.		'INT'	=> array('php_type' => 'int', 		'min' => (int) -2147483648,	'max' => (int) 0x7fffffff),		'TINT'	=> array('php_type' => 'int',		'min' => -128,				'max' => 127),		'VCHAR'	=> array('php_type' => 'string', 	'min' => 0, 				'max' => 255),	);	foreach ($value_ary as $value)	{		$column = explode(':', $value['column_type']);		$max = $min = 0;		$type = 0;		if (!isset($column_types[$column[0]]))		{			continue;		}		else		{			$type = $column_types[$column[0]];		}		switch ($type['php_type'])		{			case 'string' :				$max = (isset($column[1])) ? min($column[1],$type['max']) : $type['max'];				if (utf8_strlen($value['value']) > $max)				{					$error[] = sprintf($user->lang['SETTING_TOO_LONG'], $user->lang[$value['lang']], $max);				}			break;			case 'int':				$min = (isset($column[1])) ? max($column[1],$type['min']) : $type['min'];				$max = (isset($column[2])) ? min($column[2],$type['max']) : $type['max'];				if ($value['value'] < $min)				{					$error[] = sprintf($user->lang['SETTING_TOO_LOW'], $user->lang[$value['lang']], $min);				}				else if ($value['value'] > $max)				{					$error[] = sprintf($user->lang['SETTING_TOO_BIG'], $user->lang[$value['lang']], $max);				}			break;		}	}}?>
<?php/**** mcp [English]** @package language* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** DO NOT CHANGE*/if (!defined('IN_PHPBB')){	exit;}if (empty($lang) || !is_array($lang)){	$lang = array();}// DEVELOPERS PLEASE NOTE//// All language files should use UTF-8 as their encoding and the files must not contain a BOM.//// Placeholders can now contain order information, e.g. instead of// 'Page %s of %s' you can (and should) write 'Page %1$s of %2$s', this allows// translators to re-order the output of data while ensuring it remains correct//// You do not need this where single placeholders are used, e.g. 'Message %d' is fine// equally where a string contains only two placeholders which are used to wrap text// in a url you again do not need to specify an order e.g., 'Click %sHERE%s' is fine$lang = array_merge($lang, array(	'ACTION'				=> 'Action',	'ACTION_NOTE'			=> 'Action/Note',	'ADD_FEEDBACK'			=> 'Add feedback',	'ADD_FEEDBACK_EXPLAIN'	=> 'If you would like to add a report on this please fill out the following form. Only use plain text; HTML, BBCode, etc. are not permitted.',	'ADD_WARNING'			=> 'Add warning',	'ADD_WARNING_EXPLAIN'	=> 'To send a warning to this user please fill out the following form. Only use plain text; HTML, BBCode, etc. are not permitted.',	'ALL_ENTRIES'			=> 'All entries',	'ALL_NOTES_DELETED'		=> 'Successfully removed all user notes.',	'ALL_REPORTS'			=> 'All reports',	'ALREADY_REPORTED'		=> 'This post has already been reported.',	'ALREADY_REPORTED_PM'	=> 'This private message has already been reported.',	'ALREADY_WARNED'		=> 'A warning has already been issued for this post.',	'APPROVE'				=> 'Approve',	'APPROVE_POST'			=> 'Approve post',	'APPROVE_POST_CONFIRM'	=> 'Are you sure you want to approve this post?',	'APPROVE_POSTS'			=> 'Approve posts',	'APPROVE_POSTS_CONFIRM'	=> 'Are you sure you want to approve the selected posts?',	'CANNOT_MOVE_SAME_FORUM'=> 'You cannot move a topic to the forum its already in.',	'CANNOT_WARN_ANONYMOUS'	=> 'You cannot warn unregistered guest users.',	'CANNOT_WARN_SELF'		=> 'You cannot warn yourself.',	'CAN_LEAVE_BLANK'		=> 'This can be left blank.',	'CHANGE_POSTER'			=> 'Change poster',	'CLOSE_PM_REPORT'		=> 'Close PM report',	'CLOSE_PM_REPORT_CONFIRM'	=> 'Are you sure you want to close the selected PM report?',	'CLOSE_PM_REPORTS'		=> 'Close PM reports',	'CLOSE_PM_REPORTS_CONFIRM'	=> 'Are you sure you want to close the selected PM reports?',	'CLOSE_REPORT'			=> 'Close report',	'CLOSE_REPORT_CONFIRM'	=> 'Are you sure you want to close the selected report?',	'CLOSE_REPORTS'			=> 'Close reports',	'CLOSE_REPORTS_CONFIRM'	=> 'Are you sure you want to close the selected reports?',	'DELETE_PM_REPORT'			=> 'Delete PM report',	'DELETE_PM_REPORT_CONFIRM'	=> 'Are you sure you want to delete the selected PM report?',	'DELETE_PM_REPORTS'			=> 'Delete PM reports',	'DELETE_PM_REPORTS_CONFIRM'	=> 'Are you sure you want to delete the selected PM reports?',	'DELETE_POSTS'				=> 'Delete posts',	'DELETE_POSTS_CONFIRM'		=> 'Are you sure you want to delete these posts?',	'DELETE_POST_CONFIRM'		=> 'Are you sure you want to delete this post?',	'DELETE_REPORT'				=> 'Delete report',	'DELETE_REPORT_CONFIRM'		=> 'Are you sure you want to delete the selected report?',	'DELETE_REPORTS'			=> 'Delete reports',	'DELETE_REPORTS_CONFIRM'	=> 'Are you sure you want to delete the selected reports?',	'DELETE_SHADOW_TOPIC'		=> 'Delete shadow topic',	'DELETE_TOPICS'				=> 'Delete selected topics',	'DELETE_TOPICS_CONFIRM'		=> 'Are you sure you want to delete these topics?',	'DELETE_TOPIC_CONFIRM'		=> 'Are you sure you want to delete this topic?',	'DISAPPROVE'				=> 'Disapprove',	'DISAPPROVE_REASON'			=> 'Reason for disapproval',	'DISAPPROVE_POST'			=> 'Disapprove post',	'DISAPPROVE_POST_CONFIRM'	=> 'Are you sure you want to disapprove this post?',	'DISAPPROVE_POSTS'			=> 'Disapprove posts',	'DISAPPROVE_POSTS_CONFIRM'	=> 'Are you sure you want to disapprove the selected posts?',	'DISPLAY_LOG'				=> 'Display entries from previous',	'DISPLAY_OPTIONS'			=> 'Display options',	'EMPTY_REPORT'					=> 'You must enter a description when selecting this reason.',	'EMPTY_TOPICS_REMOVED_WARNING'	=> 'Please note that one or several topics have been removed from the database because they were or become empty.',	'FEEDBACK'				=> 'Feedback',	'FORK'					=> 'Copy',	'FORK_TOPIC'			=> 'Copy topic',	'FORK_TOPIC_CONFIRM'	=> 'Are you sure you want to copy this topic?',	'FORK_TOPICS'			=> 'Copy selected topics',	'FORK_TOPICS_CONFIRM'	=> 'Are you sure you want to copy the selected topics?',	'FORUM_DESC'			=> 'Description',	'FORUM_NAME'			=> 'Forum name',	'FORUM_NOT_EXIST'		=> 'The forum you selected does not exist.',	'FORUM_NOT_POSTABLE'	=> 'The forum you selected cannot be posted to.',	'FORUM_STATUS'			=> 'Forum status',	'FORUM_STYLE'			=> 'Forum style',	'GLOBAL_ANNOUNCEMENT'	=> 'Global announcement',	'IP_INFO'				=> 'IP address information',	'IPS_POSTED_FROM'		=> 'IP addresses this user has posted from',	'LATEST_LOGS'				=> 'Latest 5 logged actions',	'LATEST_REPORTED'			=> 'Latest 5 reports',	'LATEST_REPORTED_PMS'		=> 'Latest 5 PM reports',	'LATEST_UNAPPROVED'			=> 'Latest 5 posts awaiting approval',	'LATEST_WARNING_TIME'		=> 'Latest warning issued',	'LATEST_WARNINGS'			=> 'Latest 5 warnings',	'LEAVE_SHADOW'				=> 'Leave shadow topic in place',	'LIST_REPORT'				=> '1 report',	'LIST_REPORTS'				=> '%d reports',	'LOCK'						=> 'Lock',	'LOCK_POST_POST'			=> 'Lock post',	'LOCK_POST_POST_CONFIRM'	=> 'Are you sure you want to prevent editing this post?',	'LOCK_POST_POSTS'			=> 'Lock selected posts',	'LOCK_POST_POSTS_CONFIRM'	=> 'Are you sure you want to prevent editing the selected posts?',	'LOCK_TOPIC_CONFIRM'		=> 'Are you sure you want to lock this topic?',	'LOCK_TOPICS'				=> 'Lock selected topics',	'LOCK_TOPICS_CONFIRM'		=> 'Are you sure you want to lock all selected topics?',	'LOGS_CURRENT_TOPIC'		=> 'Currently viewing logs of:',	'LOGIN_EXPLAIN_MCP'			=> 'To moderate this forum you must login.',	'LOGVIEW_VIEWTOPIC'			=> 'View topic',	'LOGVIEW_VIEWLOGS'			=> 'View topic log',	'LOGVIEW_VIEWFORUM'			=> 'View forum',	'LOOKUP_ALL'				=> 'Look up all IPs',	'LOOKUP_IP'					=> 'Look up IP',	'MARKED_NOTES_DELETED'		=> 'Successfully removed all marked user notes.',	'MCP_ADD'						=> 'Add a warning',	'MCP_BAN'					=> 'Banning',	'MCP_BAN_EMAILS'			=> 'Ban e-mails',	'MCP_BAN_IPS'				=> 'Ban IPs',	'MCP_BAN_USERNAMES'			=> 'Ban Usernames',	'MCP_LOGS'						=> 'Moderator logs',	'MCP_LOGS_FRONT'				=> 'Front page',	'MCP_LOGS_FORUM_VIEW'			=> 'Forum logs',	'MCP_LOGS_TOPIC_VIEW'			=> 'Topic logs',	'MCP_MAIN'						=> 'Main',	'MCP_MAIN_FORUM_VIEW'			=> 'View forum',	'MCP_MAIN_FRONT'				=> 'Front page',	'MCP_MAIN_POST_DETAILS'			=> 'Post details',	'MCP_MAIN_TOPIC_VIEW'			=> 'View topic',	'MCP_MAKE_ANNOUNCEMENT'			=> 'Modify to Announcement',	'MCP_MAKE_ANNOUNCEMENT_CONFIRM'	=> 'Are you sure you want to change this topic to an Announcement?',	'MCP_MAKE_ANNOUNCEMENTS'		=> 'Modify to Announcements',	'MCP_MAKE_ANNOUNCEMENTS_CONFIRM'=> 'Are you sure you want to change the selected topics to Announcements?',	'MCP_MAKE_GLOBAL'				=> 'Modify to Global announcement',	'MCP_MAKE_GLOBAL_CONFIRM'		=> 'Are you sure you want to change this topic to a Global announcement?',	'MCP_MAKE_GLOBALS'				=> 'Modify to Global announcements',	'MCP_MAKE_GLOBALS_CONFIRM'		=> 'Are you sure you want to change the selected topics to Global announcements?',	'MCP_MAKE_STICKY'				=> 'Modify to Sticky',	'MCP_MAKE_STICKY_CONFIRM'		=> 'Are you sure you want to change this topic to a Sticky?',	'MCP_MAKE_STICKIES'				=> 'Modify to Stickies',	'MCP_MAKE_STICKIES_CONFIRM'		=> 'Are you sure you want to change the selected topics to Stickies?',	'MCP_MAKE_NORMAL'				=> 'Modify to Standard Topic',	'MCP_MAKE_NORMAL_CONFIRM'		=> 'Are you sure you want to change this topic to a Standard Topic?',	'MCP_MAKE_NORMALS'				=> 'Modify to Standard Topics',	'MCP_MAKE_NORMALS_CONFIRM'		=> 'Are you sure you want to change the selected topics to Standard Topics?',	'MCP_NOTES'						=> 'User notes',	'MCP_NOTES_FRONT'				=> 'Front page',	'MCP_NOTES_USER'				=> 'User details',	'MCP_POST_REPORTS'				=> 'Reports issued on this post',	'MCP_PM_REPORTS'				=> 'Reported PMs',	'MCP_PM_REPORT_DETAILS'			=> 'PM Report details',	'MCP_PM_REPORTS_CLOSED'			=> 'Closed PM reports',	'MCP_PM_REPORTS_CLOSED_EXPLAIN'	=> 'This is a list of all reports about private messages which have previously been resolved.',	'MCP_PM_REPORTS_OPEN'			=> 'Open PM reports',	'MCP_PM_REPORTS_OPEN_EXPLAIN'	=> 'This is a list of all reported private messages which are still to be handled.',	'MCP_REPORTS'					=> 'Reported messages',	'MCP_REPORT_DETAILS'			=> 'Report details',	'MCP_REPORTS_CLOSED'			=> 'Closed reports',	'MCP_REPORTS_CLOSED_EXPLAIN'	=> 'This is a list of all reports about posts which have previously been resolved.',	'MCP_REPORTS_OPEN'				=> 'Open reports',	'MCP_REPORTS_OPEN_EXPLAIN'		=> 'This is a list of all reported posts which are still to be handled.',	'MCP_QUEUE'								=> 'Moderation queue',	'MCP_QUEUE_APPROVE_DETAILS'				=> 'Approve details',	'MCP_QUEUE_UNAPPROVED_POSTS'			=> 'Posts awaiting approval',	'MCP_QUEUE_UNAPPROVED_POSTS_EXPLAIN'	=> 'This is a list of all posts which require approving before they will be visible to users.',	'MCP_QUEUE_UNAPPROVED_TOPICS'			=> 'Topics awaiting approval',	'MCP_QUEUE_UNAPPROVED_TOPICS_EXPLAIN'	=> 'This is a list of all topics which require approving before they will be visible to users.',	'MCP_VIEW_USER'			=> 'View warnings for a specific user',	'MCP_WARN'				=> 'Warnings',	'MCP_WARN_FRONT'		=> 'Front page',	'MCP_WARN_LIST'			=> 'List warnings',	'MCP_WARN_POST'			=> 'Warn for specific post',	'MCP_WARN_USER'			=> 'Warn user',	'MERGE_POSTS_CONFIRM'	=> 'Are you sure you want to move the selected posts?',	'MERGE_TOPIC_EXPLAIN'	=> 'Using the form below you can move selected posts into another topic. The posts will be split from this topic and merged into the other topic. These posts will not be reordered and will appear as if the users posted them to the new topic.<br />Please enter the destination topic id or click on Select topic to search for one.',	'MERGE_TOPIC_ID'		=> 'Destination topic identification number',	'MERGE_TOPICS'			=> 'Merge topics',	'MERGE_TOPICS_CONFIRM'	=> 'Are you sure you want to merge the selected topics?',	'MODERATE_FORUM'		=> 'Moderate forum',	'MODERATE_TOPIC'		=> 'Moderate topic',	'MODERATE_POST'			=> 'Moderate post',	'MOD_OPTIONS'			=> 'Moderator options',	'MORE_INFO'				=> 'Further information',	'MOST_WARNINGS'			=> 'Users with most warnings',	'MOVE_TOPIC_CONFIRM'	=> 'Are you sure you want to move the topic into a new forum?',	'MOVE_TOPICS'			=> 'Move selected topics',	'MOVE_TOPICS_CONFIRM'	=> 'Are you sure you want to move the selected topics into a new forum?',	'NOTIFY_POSTER_APPROVAL'		=> 'Notify poster about approval?',	'NOTIFY_POSTER_DISAPPROVAL'		=> 'Notify poster about disapproval?',	'NOTIFY_USER_WARN'				=> 'Notify user about warning?',	'NOT_MODERATOR'					=> 'You are not a moderator of this forum.',	'NO_DESTINATION_FORUM'			=> 'Please select a forum for destination.',	'NO_DESTINATION_FORUM_FOUND'	=> 'There is no destination forum available.',	'NO_ENTRIES'					=> 'No log entries for this period.',	'NO_FEEDBACK'					=> 'No feedback exists for this user.',	'NO_FINAL_TOPIC_SELECTED'		=> 'You have to select a destination topic for merging posts.',	'NO_MATCHES_FOUND'				=> 'No matches found.',	'NO_POST'						=> 'You have to select a post in order to warn the user for a post.',	'NO_POST_REPORT'				=> 'This post was not reported.',	'NO_POST_SELECTED'				=> 'You must select at least one post to perform this action.',	'NO_REASON_DISAPPROVAL'			=> 'Please give an appropriate reason for disapproval.',	'NO_REPORT'						=> 'No report found',	'NO_REPORTS'					=> 'No reports found',	'NO_REPORT_SELECTED'			=> 'You must select at least one report to perform this action.',	'NO_TOPIC_ICON'					=> 'None',	'NO_TOPIC_SELECTED'				=> 'You must select at least one topic to perform this action.',	'NO_TOPICS_QUEUE'				=> 'There are no topics waiting for approval.',	'ONLY_TOPIC'			=> 'Only topic %s',	'OTHER_USERS'			=> 'Other users posting from this IP',	'PM_REPORT_CLOSED_SUCCESS'	=> 'The selected PM report has been closed successfully.',	'PM_REPORT_DELETED_SUCCESS'	=> 'The selected PM report has been deleted successfully.',	'PM_REPORTED_SUCCESS'		=> 'This private message has been successfully reported.',	'PM_REPORT_TOTAL'			=> 'In total there is <strong>1</strong> PM report to review.',	'PM_REPORTS_CLOSED_SUCCESS'	=> 'The selected PM reports have been closed successfully.',	'PM_REPORTS_DELETED_SUCCESS'=> 'The selected PM reports have been deleted successfully.',	'PM_REPORTS_TOTAL'			=> 'In total there are <strong>%d</strong> PM reports to review.',	'PM_REPORTS_ZERO_TOTAL'		=> 'There are no PM reports to review.',	'PM_REPORT_DETAILS'			=> 'Private message report details',	'POSTER'					=> 'Poster',	'POSTS_APPROVED_SUCCESS'	=> 'The selected posts have been approved.',	'POSTS_DELETED_SUCCESS'		=> 'The selected posts have been successfully removed from the database.',	'POSTS_DISAPPROVED_SUCCESS'	=> 'The selected posts have been disapproved.',	'POSTS_LOCKED_SUCCESS'		=> 'The selected posts have been locked successfully.',	'POSTS_MERGED_SUCCESS'		=> 'The selected posts have been merged.',	'POSTS_UNLOCKED_SUCCESS'	=> 'The selected posts have been unlocked successfully.',	'POSTS_PER_PAGE'			=> 'Posts per page',	'POSTS_PER_PAGE_EXPLAIN'	=> '(Set to 0 to view all posts.)',	'POST_APPROVED_SUCCESS'		=> 'The selected post has been approved.',	'POST_DELETED_SUCCESS'		=> 'The selected post has been successfully removed from the database.',	'POST_DISAPPROVED_SUCCESS'	=> 'The selected post has been disapproved.',	'POST_LOCKED_SUCCESS'		=> 'Post locked successfully.',	'POST_NOT_EXIST'			=> 'The post you requested does not exist.',	'POST_REPORTED_SUCCESS'		=> 'This post has been successfully reported.',	'POST_UNLOCKED_SUCCESS'		=> 'Post unlocked successfully.',	'READ_USERNOTES'			=> 'User notes',	'READ_WARNINGS'				=> 'User warnings',	'REPORTER'					=> 'Reporter',	'REPORTED'					=> 'Reported',	'REPORTED_BY'				=> 'Reported by',	'REPORTED_ON_DATE'			=> 'on',	'REPORTS_CLOSED_SUCCESS'	=> 'The selected reports have been closed successfully.',	'REPORTS_DELETED_SUCCESS'	=> 'The selected reports have been deleted successfully.',	'REPORTS_TOTAL'				=> 'In total there are <strong>%d</strong> reports to review.',	'REPORTS_ZERO_TOTAL'		=> 'There are no reports to review.',	'REPORT_CLOSED'				=> 'This report has already been closed.',	'REPORT_CLOSED_SUCCESS'		=> 'The selected report has been closed successfully.',	'REPORT_DELETED_SUCCESS'	=> 'The selected report has been deleted successfully.',	'REPORT_DETAILS'			=> 'Report details',	'REPORT_MESSAGE'			=> 'Report this message',	'REPORT_MESSAGE_EXPLAIN'	=> 'Use this form to report the selected private message. Reporting should generally be used only if the message breaks forum rules. <strong>Reporting a private message will make its contents visible to all moderators.</strong>',	'REPORT_NOTIFY'				=> 'Notify me',	'REPORT_NOTIFY_EXPLAIN'		=> 'Informs you when your report is dealt with.',	'REPORT_POST_EXPLAIN'		=> 'Use this form to report the selected post to the forum moderators and board administrators. Reporting should generally be used only if the post breaks forum rules.',	'REPORT_REASON'				=> 'Report reason',	'REPORT_TIME'				=> 'Report time',	'REPORT_TOTAL'				=> 'In total there is <strong>1</strong> report to review.',	'RESYNC'					=> 'Resync',	'RETURN_MESSAGE'			=> '%sReturn to the message%s',	'RETURN_NEW_FORUM'			=> '%sGo to the new forum%s',	'RETURN_NEW_TOPIC'			=> '%sGo to the new topic%s',	'RETURN_PM'					=> '%sReturn to the private message%s',	'RETURN_POST'				=> '%sReturn to the post%s',	'RETURN_QUEUE'				=> '%sReturn to the queue%s',	'RETURN_REPORTS'			=> '%sReturn to the reports%s',	'RETURN_TOPIC_SIMPLE'		=> '%sReturn to the topic%s',	'SEARCH_POSTS_BY_USER'				=> 'Search posts by',	'SELECT_ACTION'						=> 'Select desired action',	'SELECT_FORUM_GLOBAL_ANNOUNCEMENT'	=> 'Please select the forum you wish this global announcement to be displayed.',	'SELECT_FORUM_GLOBAL_ANNOUNCEMENTS'	=> 'One or more of the selected topics are global announcements. Please select the forum you wish these to be displayed.',	'SELECT_MERGE'						=> 'Select for merge',	'SELECT_TOPICS_FROM'				=> 'Select topics from',	'SELECT_TOPIC'						=> 'Select topic',	'SELECT_USER'						=> 'Select user',	'SORT_ACTION'						=> 'Log action',	'SORT_DATE'							=> 'Date',	'SORT_IP'							=> 'IP address',	'SORT_WARNINGS'						=> 'Warnings',	'SPLIT_AFTER'						=> 'Split topic from selected post onwards',	'SPLIT_FORUM'						=> 'Forum for new topic',	'SPLIT_POSTS'						=> 'Split selected posts',	'SPLIT_SUBJECT'						=> 'New topic title',	'SPLIT_TOPIC_ALL'					=> 'Split topic from selected posts',	'SPLIT_TOPIC_ALL_CONFIRM'			=> 'Are you sure you want to split this topic?',	'SPLIT_TOPIC_BEYOND'				=> 'Split topic at selected post',	'SPLIT_TOPIC_BEYOND_CONFIRM'		=> 'Are you sure you want to split this topic at the selected post?',	'SPLIT_TOPIC_EXPLAIN'				=> 'Using the form below you can split a topic in two, either by selecting the posts individually or by splitting at a selected post.',	'THIS_PM_IP'				=> 'IP for this private message',	'THIS_POST_IP'				=> 'IP for this post',	'TOPICS_APPROVED_SUCCESS'	=> 'The selected topics have been approved.',	'TOPICS_DELETED_SUCCESS'	=> 'The selected topics have been successfully removed from the database.',	'TOPICS_DISAPPROVED_SUCCESS'=> 'The selected topics have been disapproved.',	'TOPICS_FORKED_SUCCESS'		=> 'The selected topics have been copied successfully.',	'TOPICS_LOCKED_SUCCESS'		=> 'The selected topics have been locked.',	'TOPICS_MOVED_SUCCESS'		=> 'The selected topics have been moved successfully.',	'TOPICS_RESYNC_SUCCESS'		=> 'The selected topics have been resynchronised.',	'TOPICS_TYPE_CHANGED'		=> 'Topic types changed successfully.',	'TOPICS_UNLOCKED_SUCCESS'	=> 'The selected topics have been unlocked.',	'TOPIC_APPROVED_SUCCESS'	=> 'The selected topic has been approved.',	'TOPIC_DELETED_SUCCESS'		=> 'The selected topic has been successfully removed from the database.',	'TOPIC_DISAPPROVED_SUCCESS'	=> 'The selected topic has been disapproved.',	'TOPIC_FORKED_SUCCESS'		=> 'The selected topic has been copied successfully.',	'TOPIC_LOCKED_SUCCESS'		=> 'The selected topic has been locked.',	'TOPIC_MOVED_SUCCESS'		=> 'The selected topic has been moved successfully.',	'TOPIC_NOT_EXIST'			=> 'The topic you selected does not exist.',	'TOPIC_RESYNC_SUCCESS'		=> 'The selected topic has been resynchronised.',	'TOPIC_SPLIT_SUCCESS'		=> 'The selected topic has been split successfully.',	'TOPIC_TIME'				=> 'Topic time',	'TOPIC_TYPE_CHANGED'		=> 'Topic type changed successfully.',	'TOPIC_UNLOCKED_SUCCESS'	=> 'The selected topic has been unlocked.',	'TOTAL_WARNINGS'			=> 'Total Warnings',	'UNAPPROVED_POSTS_TOTAL'		=> 'In total there are <strong>%d</strong> posts waiting for approval.',	'UNAPPROVED_POSTS_ZERO_TOTAL'	=> 'There are no posts waiting for approval.',	'UNAPPROVED_POST_TOTAL'			=> 'In total there is <strong>1</strong> post waiting for approval.',	'UNLOCK'						=> 'Unlock',	'UNLOCK_POST'					=> 'Unlock post',	'UNLOCK_POST_EXPLAIN'			=> 'Allow editing',	'UNLOCK_POST_POST'				=> 'Unlock post',	'UNLOCK_POST_POST_CONFIRM'		=> 'Are you sure you want to allow editing this post?',	'UNLOCK_POST_POSTS'				=> 'Unlock selected posts',	'UNLOCK_POST_POSTS_CONFIRM'		=> 'Are you sure you want to allow editing the selected posts?',	'UNLOCK_TOPIC'					=> 'Unlock topic',	'UNLOCK_TOPIC_CONFIRM'			=> 'Are you sure you want to unlock this topic?',	'UNLOCK_TOPICS'					=> 'Unlock selected topics',	'UNLOCK_TOPICS_CONFIRM'			=> 'Are you sure you want to unlock all selected topics?',	'USER_CANNOT_POST'				=> 'You cannot post in this forum.',	'USER_CANNOT_REPORT'			=> 'You cannot report posts in this forum.',	'USER_FEEDBACK_ADDED'			=> 'User feedback added successfully.',	'USER_WARNING_ADDED'			=> 'User warned successfully.',	'VIEW_DETAILS'			=> 'View details',	'VIEW_PM'				=> 'View private message',	'VIEW_POST'				=> 'View post',	'WARNED_USERS'			=> 'Warned users',	'WARNED_USERS_EXPLAIN'	=> 'This is a list of users with unexpired warnings issued to them.',	'WARNING_PM_BODY'		=> 'The following is a warning which has been issued to you by an administrator or moderator of this site.[quote]%s[/quote]',	'WARNING_PM_SUBJECT'	=> 'Board warning issued',	'WARNING_POST_DEFAULT'	=> 'This is a warning regarding the following post made by you: %s .',	'WARNINGS_ZERO_TOTAL'	=> 'No warnings exist.',	'YOU_SELECTED_TOPIC'	=> 'You selected topic number %d: %s.',	'report_reasons'		=> array(		'TITLE'	=> array(			'WAREZ'		=> 'Warez',			'SPAM'		=> 'Spam',			'OFF_TOPIC'	=> 'Off-topic',			'OTHER'		=> 'Other',		),		'DESCRIPTION' => array(			'WAREZ'		=> 'The message contains links to illegal or pirated software.',			'SPAM'		=> 'The reported message has the only purpose to advertise for a website or another product.',			'OFF_TOPIC'	=> 'The reported message is off topic.',			'OTHER'		=> 'The reported message does not fit into any other category, please use the further information field.',		)	),));?>
<?php/**** @package phpBB3* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//***/if (!defined('IN_PHPBB')){	exit;}/*	Ability to simply add own rules by doing three things:		1) Add an appropriate constant		2) Add a new check array to the global_privmsgs_rules variable and the condition array (if one is required)		3) Add a new language variable to ucp.php		The user is then able to select the new rule. It will be checked against and handled as specified.		To add new actions (yes, checks can be added here too) to the rule management, the core code has to be modified.*/define('RULE_IS_LIKE', 1);		// Is Likedefine('RULE_IS_NOT_LIKE', 2);	// Is Not Likedefine('RULE_IS', 3);			// Isdefine('RULE_IS_NOT', 4);		// Is Notdefine('RULE_BEGINS_WITH', 5);	// Begins withdefine('RULE_ENDS_WITH', 6);	// Ends withdefine('RULE_IS_FRIEND', 7);	// Is Frienddefine('RULE_IS_FOE', 8);		// Is Foedefine('RULE_IS_USER', 9);		// Is Userdefine('RULE_IS_GROUP', 10);	// Is In Usergroupdefine('RULE_ANSWERED', 11);	// Answereddefine('RULE_FORWARDED', 12);	// Forwardeddefine('RULE_TO_GROUP', 14);	// Usergroupdefine('RULE_TO_ME', 15);		// Medefine('ACTION_PLACE_INTO_FOLDER', 1);define('ACTION_MARK_AS_READ', 2);define('ACTION_MARK_AS_IMPORTANT', 3);define('ACTION_DELETE_MESSAGE', 4);define('CHECK_SUBJECT', 1);define('CHECK_SENDER', 2);define('CHECK_MESSAGE', 3);define('CHECK_STATUS', 4);define('CHECK_TO', 5);/*** Global private message rules* These rules define what to do if a rule is hit*/$global_privmsgs_rules = array(	CHECK_SUBJECT	=> array(		RULE_IS_LIKE		=> array('check0' => 'message_subject', 'function' => 'preg_match("/" . preg_quote({STRING}, "/") . "/i", {CHECK0})'),		RULE_IS_NOT_LIKE	=> array('check0' => 'message_subject', 'function' => '!(preg_match("/" . preg_quote({STRING}, "/") . "/i", {CHECK0}))'),		RULE_IS				=> array('check0' => 'message_subject', 'function' => '{CHECK0} == {STRING}'),		RULE_IS_NOT			=> array('check0' => 'message_subject', 'function' => '{CHECK0} != {STRING}'),		RULE_BEGINS_WITH	=> array('check0' => 'message_subject', 'function' => 'preg_match("/^" . preg_quote({STRING}, "/") . "/i", {CHECK0})'),		RULE_ENDS_WITH		=> array('check0' => 'message_subject', 'function' => 'preg_match("/" . preg_quote({STRING}, "/") . "$/i", {CHECK0})'),	),	CHECK_SENDER	=> array(		RULE_IS_LIKE		=> array('check0' => 'username', 'function' => 'preg_match("/" . preg_quote({STRING}, "/") . "/i", {CHECK0})'),		RULE_IS_NOT_LIKE	=> array('check0' => 'username', 'function' => '!(preg_match("/" . preg_quote({STRING}, "/") . "/i", {CHECK0}))'),		RULE_IS				=> array('check0' => 'username', 'function' => '{CHECK0} == {STRING}'),		RULE_IS_NOT			=> array('check0' => 'username', 'function' => '{CHECK0} != {STRING}'),		RULE_BEGINS_WITH	=> array('check0' => 'username', 'function' => 'preg_match("/^" . preg_quote({STRING}, "/") . "/i", {CHECK0})'),		RULE_ENDS_WITH		=> array('check0' => 'username', 'function' => 'preg_match("/" . preg_quote({STRING}, "/") . "$/i", {CHECK0})'),		RULE_IS_FRIEND		=> array('check0' => 'friend', 'function' => '{CHECK0} == 1'),		RULE_IS_FOE			=> array('check0' => 'foe', 'function' => '{CHECK0} == 1'),		RULE_IS_USER		=> array('check0' => 'author_id', 'function' => '{CHECK0} == {USER_ID}'),		RULE_IS_GROUP		=> array('check0' => 'author_in_group', 'function' => 'in_array({GROUP_ID}, {CHECK0})'),	),	CHECK_MESSAGE	=> array(		RULE_IS_LIKE		=> array('check0' => 'message_text', 'function' => 'preg_match("/" . preg_quote({STRING}, "/") . "/i", {CHECK0})'),		RULE_IS_NOT_LIKE	=> array('check0' => 'message_text', 'function' => '!(preg_match("/" . preg_quote({STRING}, "/") . "/i", {CHECK0}))'),		RULE_IS				=> array('check0' => 'message_text', 'function' => '{CHECK0} == {STRING}'),		RULE_IS_NOT			=> array('check0' => 'message_text', 'function' => '{CHECK0} != {STRING}'),	),	CHECK_STATUS	=> array(		RULE_ANSWERED		=> array('check0' => 'pm_replied', 'function' => '{CHECK0} == 1'),		RULE_FORWARDED		=> array('check0' => 'pm_forwarded', 'function' => '{CHECK0} == 1'),	),	CHECK_TO		=> array(		RULE_TO_GROUP		=> array('check0' => 'to', 'check1' => 'bcc', 'check2' => 'user_in_group', 'function' => 'in_array("g_" . {CHECK2}, {CHECK0}) || in_array("g_" . {CHECK2}, {CHECK1})'),		RULE_TO_ME			=> array('check0' => 'to', 'check1' => 'bcc', 'function' => 'in_array("u_" . $user_id, {CHECK0}) || in_array("u_" . $user_id, {CHECK1})'),	));/*** This is for defining which condition fields to show for which Rule*/$global_rule_conditions = array(	RULE_IS_LIKE		=> 'text',	RULE_IS_NOT_LIKE	=> 'text',	RULE_IS				=> 'text',	RULE_IS_NOT			=> 'text',	RULE_BEGINS_WITH	=> 'text',	RULE_ENDS_WITH		=> 'text',	RULE_IS_USER		=> 'user',	RULE_IS_GROUP		=> 'group');/*** Get all folder*/function get_folder($user_id, $folder_id = false){	global $db, $user, $template;	global $phpbb_root_path, $phpEx;	$folder = array();	// Get folder information	$sql = 'SELECT folder_id, COUNT(msg_id) as num_messages, SUM(pm_unread) as num_unread		FROM ' . PRIVMSGS_TO_TABLE . "		WHERE user_id = $user_id			AND folder_id <> " . PRIVMSGS_NO_BOX . '		GROUP BY folder_id';	$result = $db->sql_query($sql);	$num_messages = $num_unread = array();	while ($row = $db->sql_fetchrow($result))	{		$num_messages[(int) $row['folder_id']] = $row['num_messages'];		$num_unread[(int) $row['folder_id']] = $row['num_unread'];	}	$db->sql_freeresult($result);	// Make sure the default boxes are defined	$available_folder = array(PRIVMSGS_INBOX, PRIVMSGS_OUTBOX, PRIVMSGS_SENTBOX);	foreach ($available_folder as $default_folder)	{		if (!isset($num_messages[$default_folder]))		{			$num_messages[$default_folder] = 0;		}		if (!isset($num_unread[$default_folder]))		{			$num_unread[$default_folder] = 0;		}	}	// Adjust unread status for outbox	$num_unread[PRIVMSGS_OUTBOX] = $num_messages[PRIVMSGS_OUTBOX];	$folder[PRIVMSGS_INBOX] = array(		'folder_name'		=> $user->lang['PM_INBOX'],		'num_messages'		=> $num_messages[PRIVMSGS_INBOX],		'unread_messages'	=> $num_unread[PRIVMSGS_INBOX]	);	// Custom Folder	$sql = 'SELECT folder_id, folder_name, pm_count		FROM ' . PRIVMSGS_FOLDER_TABLE . "			WHERE user_id = $user_id";	$result = $db->sql_query($sql);	while ($row = $db->sql_fetchrow($result))	{		$folder[$row['folder_id']] = array(			'folder_name'		=> $row['folder_name'],			'num_messages'		=> $row['pm_count'],			'unread_messages'	=> ((isset($num_unread[$row['folder_id']])) ? $num_unread[$row['folder_id']] : 0)		);	}	$db->sql_freeresult($result);	$folder[PRIVMSGS_OUTBOX] = array(		'folder_name'		=> $user->lang['PM_OUTBOX'],		'num_messages'		=> $num_messages[PRIVMSGS_OUTBOX],		'unread_messages'	=> $num_unread[PRIVMSGS_OUTBOX]	);	$folder[PRIVMSGS_SENTBOX] = array(		'folder_name'		=> $user->lang['PM_SENTBOX'],		'num_messages'		=> $num_messages[PRIVMSGS_SENTBOX],		'unread_messages'	=> $num_unread[PRIVMSGS_SENTBOX]	);	// Define Folder Array for template designers (and for making custom folders usable by the template too)	foreach ($folder as $f_id => $folder_ary)	{		$folder_id_name = ($f_id == PRIVMSGS_INBOX) ? 'inbox' : (($f_id == PRIVMSGS_OUTBOX) ? 'outbox' : 'sentbox');		$template->assign_block_vars('folder', array(			'FOLDER_ID'			=> $f_id,			'FOLDER_NAME'		=> $folder_ary['folder_name'],			'NUM_MESSAGES'		=> $folder_ary['num_messages'],			'UNREAD_MESSAGES'	=> $folder_ary['unread_messages'],			'U_FOLDER'			=> ($f_id > 0) ? append_sid("{$phpbb_root_path}ucp.$phpEx", 'i=pm&amp;folder=' . $f_id) : append_sid("{$phpbb_root_path}ucp.$phpEx", 'i=pm&amp;folder=' . $folder_id_name),			'S_CUR_FOLDER'		=> ($f_id === $folder_id) ? true : false,			'S_UNREAD_MESSAGES'	=> ($folder_ary['unread_messages']) ? true : false,			'S_CUSTOM_FOLDER'	=> ($f_id > 0) ? true : false)		);	}	if ($folder_id !== false && !isset($folder[$folder_id]))	{		trigger_error('UNKNOWN_FOLDER');	}	return $folder;}/*** Delete Messages From Sentbox* we are doing this here because this saves us a bunch of checks and queries*/function clean_sentbox($num_sentbox_messages){	global $db, $user, $config;	// Check Message Limit	if ($user->data['message_limit'] && $num_sentbox_messages > $user->data['message_limit'])	{		// Delete old messages		$sql = 'SELECT t.msg_id			FROM ' . PRIVMSGS_TO_TABLE . ' t, ' . PRIVMSGS_TABLE . ' p			WHERE t.msg_id = p.msg_id				AND t.user_id = ' . $user->data['user_id'] . '				AND t.folder_id = ' . PRIVMSGS_SENTBOX . '			ORDER BY p.message_time ASC';		$result = $db->sql_query_limit($sql, ($num_sentbox_messages - $user->data['message_limit']));		$delete_ids = array();		while ($row = $db->sql_fetchrow($result))		{			$delete_ids[] = $row['msg_id'];		}		$db->sql_freeresult($result);		delete_pm($user->data['user_id'], $delete_ids, PRIVMSGS_SENTBOX);	}}/*** Check Rule against Message Information*/function check_rule(&$rules, &$rule_row, &$message_row, $user_id){	global $user, $config;	if (!isset($rules[$rule_row['rule_check']][$rule_row['rule_connection']]))	{		return false;	}	$check_ary = $rules[$rule_row['rule_check']][$rule_row['rule_connection']];	// Replace Check Literals	$evaluate = $check_ary['function'];	$evaluate = preg_replace('/{(CHECK[0-9])}/', '$message_row[$check_ary[strtolower("\1")]]', $evaluate);	// Replace Rule Literals	$evaluate = preg_replace('/{(STRING|USER_ID|GROUP_ID)}/', '$rule_row["rule_" . strtolower("\1")]', $evaluate);	// Evil Statement	$result = false;	eval('$result = (' . $evaluate . ') ? true : false;');	if (!$result)	{		return false;	}	switch ($rule_row['rule_action'])	{		case ACTION_PLACE_INTO_FOLDER:			return array('action' => $rule_row['rule_action'], 'folder_id' => $rule_row['rule_folder_id']);		break;		case ACTION_MARK_AS_READ:		case ACTION_MARK_AS_IMPORTANT:			return array('action' => $rule_row['rule_action'], 'pm_unread' => $message_row['pm_unread'], 'pm_marked' => $message_row['pm_marked']);		break;		case ACTION_DELETE_MESSAGE:			global $db, $auth;			// Check for admins/mods - users are not allowed to remove those messages...			// We do the check here to make sure the data we use is consistent			$sql = 'SELECT user_id, user_type, user_permissions				FROM ' . USERS_TABLE . '				WHERE user_id = ' . (int) $message_row['author_id'];			$result = $db->sql_query($sql);			$userdata = $db->sql_fetchrow($result);			$db->sql_freeresult($result);			$auth2 = new auth();			$auth2->acl($userdata);			if (!$auth2->acl_get('a_') && !$auth2->acl_get('m_') && !$auth2->acl_getf_global('m_'))			{				return array('action' => $rule_row['rule_action'], 'pm_unread' => $message_row['pm_unread'], 'pm_marked' => $message_row['pm_marked']);			}			return false;		break;		default:			return false;	}	return false;}/*** Update user PM count*/function update_pm_counts(){	global $user, $db;	// Update unread count	$sql = 'SELECT COUNT(msg_id) as num_messages		FROM ' . PRIVMSGS_TO_TABLE . '		WHERE pm_unread = 1			AND folder_id <> ' . PRIVMSGS_OUTBOX . '			AND user_id = ' . $user->data['user_id'];	$result = $db->sql_query($sql);	$user->data['user_unread_privmsg'] = (int) $db->sql_fetchfield('num_messages');	$db->sql_freeresult($result);	// Update new pm count	$sql = 'SELECT COUNT(msg_id) as num_messages		FROM ' . PRIVMSGS_TO_TABLE . '		WHERE pm_new = 1			AND folder_id IN (' . PRIVMSGS_NO_BOX . ', ' . PRIVMSGS_HOLD_BOX . ')			AND user_id = ' . $user->data['user_id'];	$result = $db->sql_query($sql);	$user->data['user_new_privmsg'] = (int) $db->sql_fetchfield('num_messages');	$db->sql_freeresult($result);	$db->sql_query('UPDATE ' . USERS_TABLE . ' SET ' . $db->sql_build_array('UPDATE', array(		'user_unread_privmsg'	=> (int) $user->data['user_unread_privmsg'],		'user_new_privmsg'		=> (int) $user->data['user_new_privmsg'],	)) . ' WHERE user_id = ' . $user->data['user_id']);	// Ok, here we need to repair something, other boxes than privmsgs_no_box and privmsgs_hold_box should not carry the pm_new flag.	if (!$user->data['user_new_privmsg'])	{		$sql = 'UPDATE ' . PRIVMSGS_TO_TABLE . '			SET pm_new = 0			WHERE pm_new = 1				AND folder_id NOT IN (' . PRIVMSGS_NO_BOX . ', ' . PRIVMSGS_HOLD_BOX . ')				AND user_id = ' . $user->data['user_id'];		$db->sql_query($sql);	}}/*** Place new messages into appropriate folder*/function place_pm_into_folder(&$global_privmsgs_rules, $release = false){	global $db, $user, $config;	if (!$user->data['user_new_privmsg'])	{		return array('not_moved' => 0, 'removed' => 0);	}	$user_message_rules = (int) $user->data['user_message_rules'];	$user_id = (int) $user->data['user_id'];	$action_ary = $move_into_folder = array();	$num_removed = 0;	// Newly processing on-hold messages	if ($release)	{		$sql = 'UPDATE ' . PRIVMSGS_TO_TABLE . '			SET folder_id = ' . PRIVMSGS_NO_BOX . '			WHERE folder_id = ' . PRIVMSGS_HOLD_BOX . "				AND user_id = $user_id";		$db->sql_query($sql);	}	// Get those messages not yet placed into any box	$retrieve_sql = 'SELECT t.*, p.*, u.username, u.user_id, u.group_id		FROM ' . PRIVMSGS_TO_TABLE . ' t, ' . PRIVMSGS_TABLE . ' p, ' . USERS_TABLE . " u		WHERE t.user_id = $user_id			AND p.author_id = u.user_id			AND t.folder_id = " . PRIVMSGS_NO_BOX . '			AND t.msg_id = p.msg_id';	// Just place into the appropriate arrays if no rules need to be checked	if (!$user_message_rules)	{		$result = $db->sql_query($retrieve_sql);		while ($row = $db->sql_fetchrow($result))		{			$action_ary[$row['msg_id']][] = array('action' => false);		}		$db->sql_freeresult($result);	}	else	{		$user_rules = $zebra = $check_rows = array();		$user_ids = $memberships = array();		// First of all, grab all rules and retrieve friends/foes		$sql = 'SELECT *			FROM ' . PRIVMSGS_RULES_TABLE . "			WHERE user_id = $user_id";		$result = $db->sql_query($sql);		$user_rules = $db->sql_fetchrowset($result);		$db->sql_freeresult($result);		if (sizeof($user_rules))		{			$sql = 'SELECT zebra_id, friend, foe				FROM ' . ZEBRA_TABLE . "				WHERE user_id = $user_id";			$result = $db->sql_query($sql);			while ($row = $db->sql_fetchrow($result))			{				$zebra[$row['zebra_id']] = $row;			}			$db->sql_freeresult($result);		}		// Now build a bare-bone check_row array		$result = $db->sql_query($retrieve_sql);		while ($row = $db->sql_fetchrow($result))		{			$check_rows[] = array_merge($row, array(				'to'				=> explode(':', $row['to_address']),				'bcc'				=> explode(':', $row['bcc_address']),				'friend'			=> (isset($zebra[$row['author_id']])) ? $zebra[$row['author_id']]['friend'] : 0,				'foe'				=> (isset($zebra[$row['author_id']])) ? $zebra[$row['author_id']]['foe'] : 0,				'user_in_group'		=> array($user->data['group_id']),				'author_in_group'	=> array())			);			$user_ids[] = $row['user_id'];		}		$db->sql_freeresult($result);		// Retrieve user memberships		if (sizeof($user_ids))		{			$sql = 'SELECT *				FROM ' . USER_GROUP_TABLE . '				WHERE ' . $db->sql_in_set('user_id', $user_ids) . '					AND user_pending = 0';			$result = $db->sql_query($sql);			while ($row = $db->sql_fetchrow($result))			{				$memberships[$row['user_id']][] = $row['group_id'];			}			$db->sql_freeresult($result);		}		// Now place into the appropriate folder		foreach ($check_rows as $row)		{			// Add membership if set			if (isset($memberships[$row['author_id']]))			{				$row['author_in_group'] = $memberships[$row['user_id']];			}			// Check Rule - this should be very quick since we have all information we need			$is_match = false;			foreach ($user_rules as $rule_row)			{				if (($action = check_rule($global_privmsgs_rules, $rule_row, $row, $user_id)) !== false)				{					$is_match = true;					$action_ary[$row['msg_id']][] = $action;				}			}			if (!$is_match)			{				$action_ary[$row['msg_id']][] = array('action' => false);			}		}		unset($user_rules, $zebra, $check_rows, $user_ids, $memberships);	}	// We place actions into arrays, to save queries.	$sql = $unread_ids = $delete_ids = $important_ids = array();	foreach ($action_ary as $msg_id => $msg_ary)	{		// It is allowed to execute actions more than once, except placing messages into folder		$folder_action = $message_removed = false;		foreach ($msg_ary as $pos => $rule_ary)		{			if ($folder_action && $rule_ary['action'] == ACTION_PLACE_INTO_FOLDER)			{				continue;			}			switch ($rule_ary['action'])			{				case ACTION_PLACE_INTO_FOLDER:					// Folder actions have precedence, so we will remove any other ones					$folder_action = true;					$move_into_folder[(int) $rule_ary['folder_id']][] = $msg_id;				break;				case ACTION_MARK_AS_READ:					if ($rule_ary['pm_unread'])					{						$unread_ids[] = $msg_id;					}				break;				case ACTION_DELETE_MESSAGE:					$delete_ids[] = $msg_id;					$message_removed = true;				break;				case ACTION_MARK_AS_IMPORTANT:					if (!$rule_ary['pm_marked'])					{						$important_ids[] = $msg_id;					}				break;			}		}		// We place this here because it could happen that the messages are doubled if a rule marks a message and then moves it into a specific		// folder. Here we simply move the message into the INBOX if it gets not removed and also not put into a custom folder.		if (!$folder_action && !$message_removed)		{			$move_into_folder[PRIVMSGS_INBOX][] = $msg_id;		}	}	// Do not change the order of processing	// The number of queries needed to be executed here highly depends on the defined rules and are	// only gone through if new messages arrive.	// Delete messages	if (sizeof($delete_ids))	{		$num_removed += sizeof($delete_ids);		delete_pm($user_id, $delete_ids, PRIVMSGS_NO_BOX);	}	// Set messages to Unread	if (sizeof($unread_ids))	{		$sql = 'UPDATE ' . PRIVMSGS_TO_TABLE . '			SET pm_unread = 0			WHERE ' . $db->sql_in_set('msg_id', $unread_ids) . "				AND user_id = $user_id				AND folder_id = " . PRIVMSGS_NO_BOX;		$db->sql_query($sql);	}	// mark messages as important	if (sizeof($important_ids))	{		$sql = 'UPDATE ' . PRIVMSGS_TO_TABLE . '			SET pm_marked = 1 - pm_marked			WHERE folder_id = ' . PRIVMSGS_NO_BOX . "				AND user_id = $user_id				AND " . $db->sql_in_set('msg_id', $important_ids);		$db->sql_query($sql);	}	// Move into folder	$folder = array();	if (sizeof($move_into_folder))	{		// Determine Full Folder Action - we need the move to folder id later eventually		$full_folder_action = ($user->data['user_full_folder'] == FULL_FOLDER_NONE) ? ($config['full_folder_action'] - (FULL_FOLDER_NONE*(-1))) : $user->data['user_full_folder'];		$sql_folder = array_keys($move_into_folder);		if ($full_folder_action >= 0)		{			$sql_folder[] = $full_folder_action;		}		$sql = 'SELECT folder_id, pm_count			FROM ' . PRIVMSGS_FOLDER_TABLE . '			WHERE ' . $db->sql_in_set('folder_id', $sql_folder) . "				AND user_id = $user_id";		$result = $db->sql_query($sql);		while ($row = $db->sql_fetchrow($result))		{			$folder[(int) $row['folder_id']] = (int) $row['pm_count'];		}		$db->sql_freeresult($result);		unset($sql_folder);		if (isset($move_into_folder[PRIVMSGS_INBOX]))		{			$sql = 'SELECT COUNT(msg_id) as num_messages				FROM ' . PRIVMSGS_TO_TABLE . "				WHERE user_id = $user_id					AND folder_id = " . PRIVMSGS_INBOX;			$result = $db->sql_query($sql);			$folder[PRIVMSGS_INBOX] = (int) $db->sql_fetchfield('num_messages');			$db->sql_freeresult($result);		}	}	// Here we have ideally only one folder to move into	foreach ($move_into_folder as $folder_id => $msg_ary)	{		$dest_folder = $folder_id;		$full_folder_action = FULL_FOLDER_NONE;		// Check Message Limit - we calculate with the complete array, most of the time it is one message		// But we are making sure that the other way around works too (more messages in queue than allowed to be stored)		if ($user->data['message_limit'] && $folder[$folder_id] && ($folder[$folder_id] + sizeof($msg_ary)) > $user->data['message_limit'])		{			$full_folder_action = ($user->data['user_full_folder'] == FULL_FOLDER_NONE) ? ($config['full_folder_action'] - (FULL_FOLDER_NONE*(-1))) : $user->data['user_full_folder'];			// If destination folder itself is full...			if ($full_folder_action >= 0 && ($folder[$full_folder_action] + sizeof($msg_ary)) > $user->data['message_limit'])			{				$full_folder_action = $config['full_folder_action'] - (FULL_FOLDER_NONE*(-1));			}			// If Full Folder Action is to move to another folder, we simply adjust the destination folder			if ($full_folder_action >= 0)			{				$dest_folder = $full_folder_action;			}			else if ($full_folder_action == FULL_FOLDER_DELETE)			{				// Delete some messages. NOTE: Ordered by msg_id here instead of message_time!				$sql = 'SELECT msg_id					FROM ' . PRIVMSGS_TO_TABLE . "					WHERE user_id = $user_id						AND folder_id = $dest_folder					ORDER BY msg_id ASC";				$result = $db->sql_query_limit($sql, (($folder[$dest_folder] + sizeof($msg_ary)) - $user->data['message_limit']));				$delete_ids = array();				while ($row = $db->sql_fetchrow($result))				{					$delete_ids[] = $row['msg_id'];				}				$db->sql_freeresult($result);				$num_removed += sizeof($delete_ids);				delete_pm($user_id, $delete_ids, $dest_folder);			}		}		//		if ($full_folder_action == FULL_FOLDER_HOLD)		{			$sql = 'UPDATE ' . PRIVMSGS_TO_TABLE . '				SET folder_id = ' . PRIVMSGS_HOLD_BOX . '				WHERE folder_id = ' . PRIVMSGS_NO_BOX . "					AND user_id = $user_id					AND " . $db->sql_in_set('msg_id', $msg_ary);			$db->sql_query($sql);		}		else		{			$sql = 'UPDATE ' . PRIVMSGS_TO_TABLE . "				SET folder_id = $dest_folder, pm_new = 0				WHERE folder_id = " . PRIVMSGS_NO_BOX . "					AND user_id = $user_id					AND pm_new = 1					AND " . $db->sql_in_set('msg_id', $msg_ary);			$db->sql_query($sql);			if ($dest_folder != PRIVMSGS_INBOX)			{				$sql = 'UPDATE ' . PRIVMSGS_FOLDER_TABLE . '					SET pm_count = pm_count + ' . (int) $db->sql_affectedrows() . "					WHERE folder_id = $dest_folder						AND user_id = $user_id";				$db->sql_query($sql);			}		}	}	if (sizeof($action_ary))	{		// Move from OUTBOX to SENTBOX		// We are not checking any full folder status here... SENTBOX is a special treatment (old messages get deleted)		$sql = 'UPDATE ' . PRIVMSGS_TO_TABLE . '			SET folder_id = ' . PRIVMSGS_SENTBOX . '			WHERE folder_id = ' . PRIVMSGS_OUTBOX . '				AND ' . $db->sql_in_set('msg_id', array_keys($action_ary));		$db->sql_query($sql);	}	// Update new/unread count	update_pm_counts();	// Now check how many messages got not moved...	$sql = 'SELECT COUNT(msg_id) as num_messages		FROM ' . PRIVMSGS_TO_TABLE . "		WHERE user_id = $user_id			AND folder_id = " . PRIVMSGS_HOLD_BOX;	$result = $db->sql_query($sql);	$num_not_moved = (int) $db->sql_fetchfield('num_messages');	$db->sql_freeresult($result);	return array('not_moved' => $num_not_moved, 'removed' => $num_removed);}/*** Move PM from one to another folder*/function move_pm($user_id, $message_limit, $move_msg_ids, $dest_folder, $cur_folder_id){	global $db, $user;	global $phpbb_root_path, $phpEx;	$num_moved = 0;	if (!is_array($move_msg_ids))	{		$move_msg_ids = array($move_msg_ids);	}	if (sizeof($move_msg_ids) && !in_array($dest_folder, array(PRIVMSGS_NO_BOX, PRIVMSGS_OUTBOX, PRIVMSGS_SENTBOX)) &&		!in_array($cur_folder_id, array(PRIVMSGS_NO_BOX, PRIVMSGS_OUTBOX)) && $cur_folder_id != $dest_folder)	{		// We have to check the destination folder ;)		if ($dest_folder != PRIVMSGS_INBOX)		{			$sql = 'SELECT folder_id, folder_name, pm_count				FROM ' . PRIVMSGS_FOLDER_TABLE . "				WHERE folder_id = $dest_folder					AND user_id = $user_id";			$result = $db->sql_query($sql);			$row = $db->sql_fetchrow($result);			$db->sql_freeresult($result);			if (!$row)			{				trigger_error('NOT_AUTHORISED');			}			if ($message_limit && $row['pm_count'] + sizeof($move_msg_ids) > $message_limit)			{				$message = sprintf($user->lang['NOT_ENOUGH_SPACE_FOLDER'], $row['folder_name']) . '<br /><br />';				$message .= sprintf($user->lang['CLICK_RETURN_FOLDER'], '<a href="' . append_sid("{$phpbb_root_path}ucp.$phpEx", 'i=pm&amp;folder=' . $row['folder_id']) . '">', '</a>', $row['folder_name']);				trigger_error($message);			}		}		else		{			$sql = 'SELECT COUNT(msg_id) as num_messages				FROM ' . PRIVMSGS_TO_TABLE . '				WHERE folder_id = ' . PRIVMSGS_INBOX . "					AND user_id = $user_id";			$result = $db->sql_query($sql);			$num_messages = (int) $db->sql_fetchfield('num_messages');			$db->sql_freeresult($result);			if ($message_limit && $num_messages + sizeof($move_msg_ids) > $message_limit)			{				$message = sprintf($user->lang['NOT_ENOUGH_SPACE_FOLDER'], $user->lang['PM_INBOX']) . '<br /><br />';				$message .= sprintf($user->lang['CLICK_RETURN_FOLDER'], '<a href="' . append_sid("{$phpbb_root_path}ucp.$phpEx", 'i=pm&amp;folder=inbox') . '">', '</a>', $user->lang['PM_INBOX']);				trigger_error($message);			}		}		$sql = 'UPDATE ' . PRIVMSGS_TO_TABLE . "			SET folder_id = $dest_folder			WHERE folder_id = $cur_folder_id				AND user_id = $user_id				AND " . $db->sql_in_set('msg_id', $move_msg_ids);		$db->sql_query($sql);		$num_moved = $db->sql_affectedrows();		// Update pm counts		if ($num_moved)		{			if (!in_array($cur_folder_id, array(PRIVMSGS_INBOX, PRIVMSGS_OUTBOX, PRIVMSGS_SENTBOX)))			{				$sql = 'UPDATE ' . PRIVMSGS_FOLDER_TABLE . "					SET pm_count = pm_count - $num_moved					WHERE folder_id = $cur_folder_id						AND user_id = $user_id";				$db->sql_query($sql);			}			if ($dest_folder != PRIVMSGS_INBOX)			{				$sql = 'UPDATE ' . PRIVMSGS_FOLDER_TABLE . "					SET pm_count = pm_count + $num_moved					WHERE folder_id = $dest_folder						AND user_id = $user_id";				$db->sql_query($sql);			}		}	}	else if (in_array($cur_folder_id, array(PRIVMSGS_NO_BOX, PRIVMSGS_OUTBOX)))	{		trigger_error('CANNOT_MOVE_SPECIAL');	}	return $num_moved;}/*** Update unread message status*/function update_unread_status($unread, $msg_id, $user_id, $folder_id){	if (!$unread)	{		return;	}	global $db, $user;	$sql = 'UPDATE ' . PRIVMSGS_TO_TABLE . "		SET pm_unread = 0		WHERE msg_id = $msg_id			AND user_id = $user_id			AND folder_id = $folder_id";	$db->sql_query($sql);	$sql = 'UPDATE ' . USERS_TABLE . "		SET user_unread_privmsg = user_unread_privmsg - 1		WHERE user_id = $user_id";	$db->sql_query($sql);	if ($user->data['user_id'] == $user_id)	{		$user->data['user_unread_privmsg']--;		// Try to cope with previous wrong conversions...		if ($user->data['user_unread_privmsg'] < 0)		{			$sql = 'UPDATE ' . USERS_TABLE . "				SET user_unread_privmsg = 0				WHERE user_id = $user_id";			$db->sql_query($sql);			$user->data['user_unread_privmsg'] = 0;		}	}}/*** Handle all actions possible with marked messages*/function handle_mark_actions($user_id, $mark_action){	global $db, $user, $phpbb_root_path, $phpEx;	$msg_ids		= request_var('marked_msg_id', array(0));	$cur_folder_id	= request_var('cur_folder_id', PRIVMSGS_NO_BOX);	$confirm		= (isset($_POST['confirm'])) ? true : false;	if (!sizeof($msg_ids))	{		return false;	}	switch ($mark_action)	{		case 'mark_important':			$sql = 'UPDATE ' . PRIVMSGS_TO_TABLE . "				SET pm_marked = 1 - pm_marked				WHERE folder_id = $cur_folder_id					AND user_id = $user_id					AND " . $db->sql_in_set('msg_id', $msg_ids);			$db->sql_query($sql);		break;		case 'delete_marked':			global $auth;			if (!$auth->acl_get('u_pm_delete'))			{				trigger_error('NO_AUTH_DELETE_MESSAGE');			}			if (confirm_box(true))			{				delete_pm($user_id, $msg_ids, $cur_folder_id);				$success_msg = (sizeof($msg_ids) == 1) ? 'MESSAGE_DELETED' : 'MESSAGES_DELETED';				$redirect = append_sid("{$phpbb_root_path}ucp.$phpEx", 'i=pm&amp;folder=' . $cur_folder_id);				meta_refresh(3, $redirect);				trigger_error($user->lang[$success_msg] . '<br /><br />' . sprintf($user->lang['RETURN_FOLDER'], '<a href="' . $redirect . '">', '</a>'));			}			else			{				$s_hidden_fields = array(					'cur_folder_id'	=> $cur_folder_id,					'mark_option'	=> 'delete_marked',					'submit_mark'	=> true,					'marked_msg_id'	=> $msg_ids				);				confirm_box(false, 'DELETE_MARKED_PM', build_hidden_fields($s_hidden_fields));			}		break;		default:			return false;	}	return true;}/*** Delete PM(s)*/function delete_pm($user_id, $msg_ids, $folder_id){	global $db, $user, $phpbb_root_path, $phpEx;	$user_id	= (int) $user_id;	$folder_id	= (int) $folder_id;	if (!$user_id)	{		return false;	}	if (!is_array($msg_ids))	{		if (!$msg_ids)		{			return false;		}		$msg_ids = array($msg_ids);	}	if (!sizeof($msg_ids))	{		return false;	}	// Get PM Information for later deleting	$sql = 'SELECT msg_id, pm_unread, pm_new		FROM ' . PRIVMSGS_TO_TABLE . '		WHERE ' . $db->sql_in_set('msg_id', array_map('intval', $msg_ids)) . "			AND folder_id = $folder_id			AND user_id = $user_id";	$result = $db->sql_query($sql);	$delete_rows = array();	$num_unread = $num_new = $num_deleted = 0;	while ($row = $db->sql_fetchrow($result))	{		$num_unread += (int) $row['pm_unread'];		$num_new += (int) $row['pm_new'];		$delete_rows[$row['msg_id']] = 1;	}	$db->sql_freeresult($result);	unset($msg_ids);	if (!sizeof($delete_rows))	{		return false;	}	$db->sql_transaction('begin');	// if no one has read the message yet (meaning it is in users outbox)	// then mark the message as deleted...	if ($folder_id == PRIVMSGS_OUTBOX)	{		// Remove PM from Outbox		$sql = 'DELETE FROM ' . PRIVMSGS_TO_TABLE . "			WHERE user_id = $user_id AND folder_id = " . PRIVMSGS_OUTBOX . '				AND ' . $db->sql_in_set('msg_id', array_keys($delete_rows));		$db->sql_query($sql);		// Update PM Information for safety		$sql = 'UPDATE ' . PRIVMSGS_TABLE . " SET message_text = ''			WHERE " . $db->sql_in_set('msg_id', array_keys($delete_rows));		$db->sql_query($sql);		// Set delete flag for those intended to receive the PM		// We do not remove the message actually, to retain some basic information (sent time for example)		$sql = 'UPDATE ' . PRIVMSGS_TO_TABLE . '			SET pm_deleted = 1			WHERE ' . $db->sql_in_set('msg_id', array_keys($delete_rows));		$db->sql_query($sql);		$num_deleted = $db->sql_affectedrows();	}	else	{		// Delete private message data		$sql = 'DELETE FROM ' . PRIVMSGS_TO_TABLE . "			WHERE user_id = $user_id				AND folder_id = $folder_id				AND " . $db->sql_in_set('msg_id', array_keys($delete_rows));		$db->sql_query($sql);		$num_deleted = $db->sql_affectedrows();	}	// if folder id is user defined folder then decrease pm_count	if (!in_array($folder_id, array(PRIVMSGS_INBOX, PRIVMSGS_OUTBOX, PRIVMSGS_SENTBOX, PRIVMSGS_NO_BOX)))	{		$sql = 'UPDATE ' . PRIVMSGS_FOLDER_TABLE . "			SET pm_count = pm_count - $num_deleted			WHERE folder_id = $folder_id";		$db->sql_query($sql);	}	// Update unread and new status field	if ($num_unread || $num_new)	{		$set_sql = ($num_unread) ? 'user_unread_privmsg = user_unread_privmsg - ' . $num_unread : '';		if ($num_new)		{			$set_sql .= ($set_sql != '') ? ', ' : '';			$set_sql .= 'user_new_privmsg = user_new_privmsg - ' . $num_new;		}		$db->sql_query('UPDATE ' . USERS_TABLE . " SET $set_sql WHERE user_id = $user_id");		$user->data['user_new_privmsg'] -= $num_new;		$user->data['user_unread_privmsg'] -= $num_unread;	}	// Now we have to check which messages we can delete completely	$sql = 'SELECT msg_id		FROM ' . PRIVMSGS_TO_TABLE . '		WHERE ' . $db->sql_in_set('msg_id', array_keys($delete_rows));	$result = $db->sql_query($sql);	while ($row = $db->sql_fetchrow($result))	{		unset($delete_rows[$row['msg_id']]);	}	$db->sql_freeresult($result);	$delete_ids = array_keys($delete_rows);	if (sizeof($delete_ids))	{		// Check if there are any attachments we need to remove		if (!function_exists('delete_attachments'))		{			include($phpbb_root_path . 'includes/functions_admin.' . $phpEx);		}		delete_attachments('message', $delete_ids, false);		$sql = 'DELETE FROM ' . PRIVMSGS_TABLE . '			WHERE ' . $db->sql_in_set('msg_id', $delete_ids);		$db->sql_query($sql);	}	$db->sql_transaction('commit');	return true;}/*** Rebuild message header*/function rebuild_header($check_ary){	global $db;	$address = array();	foreach ($check_ary as $check_type => $address_field)	{		// Split Addresses into users and groups		preg_match_all('/:?(u|g)_([0-9]+):?/', $address_field, $match);		$u = $g = array();		foreach ($match[1] as $id => $type)		{			${$type}[] = (int) $match[2][$id];		}		$_types = array('u', 'g');		foreach ($_types as $type)		{			if (sizeof($$type))			{				foreach ($$type as $id)				{					$address[$type][$id] = $check_type;				}			}		}	}	return $address;}/*** Print out/assign recipient information*/function write_pm_addresses($check_ary, $author_id, $plaintext = false){	global $db, $user, $template, $phpbb_root_path, $phpEx;	$addresses = array();	foreach ($check_ary as $check_type => $address_field)	{		if (!is_array($address_field))		{			// Split Addresses into users and groups			preg_match_all('/:?(u|g)_([0-9]+):?/', $address_field, $match);			$u = $g = array();			foreach ($match[1] as $id => $type)			{				${$type}[] = (int) $match[2][$id];			}		}		else		{			$u = $address_field['u'];			$g = $address_field['g'];		}		$address = array();		if (sizeof($u))		{			$sql = 'SELECT user_id, username, user_colour				FROM ' . USERS_TABLE . '				WHERE ' . $db->sql_in_set('user_id', $u);			$result = $db->sql_query($sql);			while ($row = $db->sql_fetchrow($result))			{				if ($check_type == 'to' || $author_id == $user->data['user_id'] || $row['user_id'] == $user->data['user_id'])				{					if ($plaintext)					{						$address[] = $row['username'];					}					else					{						$address['user'][$row['user_id']] = array('name' => $row['username'], 'colour' => $row['user_colour']);					}				}			}			$db->sql_freeresult($result);		}		if (sizeof($g))		{			if ($plaintext)			{				$sql = 'SELECT group_name, group_type					FROM ' . GROUPS_TABLE . '						WHERE ' . $db->sql_in_set('group_id', $g);				$result = $db->sql_query($sql);				while ($row = $db->sql_fetchrow($result))				{					if ($check_type == 'to' || $author_id == $user->data['user_id'] || $row['user_id'] == $user->data['user_id'])					{						$address[] = ($row['group_type'] == GROUP_SPECIAL) ? $user->lang['G_' . $row['group_name']] : $row['group_name'];					}				}				$db->sql_freeresult($result);			}			else			{				$sql = 'SELECT g.group_id, g.group_name, g.group_colour, g.group_type, ug.user_id					FROM ' . GROUPS_TABLE . ' g, ' . USER_GROUP_TABLE . ' ug						WHERE ' . $db->sql_in_set('g.group_id', $g) . '						AND g.group_id = ug.group_id						AND ug.user_pending = 0';				$result = $db->sql_query($sql);				while ($row = $db->sql_fetchrow($result))				{					if (!isset($address['group'][$row['group_id']]))					{						if ($check_type == 'to' || $author_id == $user->data['user_id'] || $row['user_id'] == $user->data['user_id'])						{							$row['group_name'] = ($row['group_type'] == GROUP_SPECIAL) ? $user->lang['G_' . $row['group_name']] : $row['group_name'];							$address['group'][$row['group_id']] = array('name' => $row['group_name'], 'colour' => $row['group_colour']);						}					}					if (isset($address['user'][$row['user_id']]))					{						$address['user'][$row['user_id']]['in_group'] = $row['group_id'];					}				}				$db->sql_freeresult($result);			}		}		if (sizeof($address) && !$plaintext)		{			$template->assign_var('S_' . strtoupper($check_type) . '_RECIPIENT', true);			foreach ($address as $type => $adr_ary)			{				foreach ($adr_ary as $id => $row)				{					$tpl_ary = array(						'IS_GROUP'	=> ($type == 'group') ? true : false,						'IS_USER'	=> ($type == 'user') ? true : false,						'UG_ID'		=> $id,						'NAME'		=> $row['name'],						'COLOUR'	=> ($row['colour']) ? '#' . $row['colour'] : '',						'TYPE'		=> $type,					);					if ($type == 'user')					{						$tpl_ary = array_merge($tpl_ary, array(							'U_VIEW'		=> get_username_string('profile', $id, $row['name'], $row['colour']),							'NAME_FULL'		=> get_username_string('full', $id, $row['name'], $row['colour']),						));					}					else					{						$tpl_ary = array_merge($tpl_ary, array(							'U_VIEW'		=> append_sid("{$phpbb_root_path}memberlist.$phpEx", 'mode=group&amp;g=' . $id),						));					}					$template->assign_block_vars($check_type . '_recipient', $tpl_ary);				}			}		}		$addresses[$check_type] = $address;	}	return $addresses;}/*** Get folder status*/function get_folder_status($folder_id, $folder){	global $db, $user, $config;	if (isset($folder[$folder_id]))	{		$folder = $folder[$folder_id];	}	else	{		return false;	}	$return = array(		'folder_name'	=> $folder['folder_name'],		'cur'			=> $folder['num_messages'],		'remaining'		=> ($user->data['message_limit']) ? $user->data['message_limit'] - $folder['num_messages'] : 0,		'max'			=> $user->data['message_limit'],		'percent'		=> ($user->data['message_limit']) ? (($user->data['message_limit'] > 0) ? round(($folder['num_messages'] / $user->data['message_limit']) * 100) : 100) : 0,	);	$return['message']	= sprintf($user->lang['FOLDER_STATUS_MSG'], $return['percent'], $return['cur'], $return['max']);	return $return;}//// COMPOSE MESSAGES///*** Submit PM*/function submit_pm($mode, $subject, &$data, $put_in_outbox = true){	global $db, $auth, $config, $phpEx, $template, $user, $phpbb_root_path;	// We do not handle erasing pms here	if ($mode == 'delete')	{		return false;	}	$current_time = time();	// Collect some basic information about which tables and which rows to update/insert	$sql_data = array();	$root_level = 0;	// Recipient Information	$recipients = $to = $bcc = array();	if ($mode != 'edit')	{		// Build Recipient List		// u|g => array($user_id => 'to'|'bcc')		$_types = array('u', 'g');		foreach ($_types as $ug_type)		{			if (isset($data['address_list'][$ug_type]) && sizeof($data['address_list'][$ug_type]))			{				foreach ($data['address_list'][$ug_type] as $id => $field)				{					$id = (int) $id;					// Do not rely on the address list being "valid"					if (!$id || ($ug_type == 'u' && $id == ANONYMOUS))					{						continue;					}					$field = ($field == 'to') ? 'to' : 'bcc';					if ($ug_type == 'u')					{						$recipients[$id] = $field;					}					${$field}[] = $ug_type . '_' . $id;				}			}		}		if (isset($data['address_list']['g']) && sizeof($data['address_list']['g']))		{			// We need to check the PM status of group members (do they want to receive PM's?)			// Only check if not a moderator or admin, since they are allowed to override this user setting			$sql_allow_pm = (!$auth->acl_gets('a_', 'm_') && !$auth->acl_getf_global('m_')) ? ' AND u.user_allow_pm = 1' : '';			$sql = 'SELECT u.user_type, ug.group_id, ug.user_id				FROM ' . USERS_TABLE . ' u, ' . USER_GROUP_TABLE . ' ug				WHERE ' . $db->sql_in_set('ug.group_id', array_keys($data['address_list']['g'])) . '					AND ug.user_pending = 0					AND u.user_id = ug.user_id					AND u.user_type IN (' . USER_NORMAL . ', ' . USER_FOUNDER . ')' .					$sql_allow_pm;			$result = $db->sql_query($sql);			while ($row = $db->sql_fetchrow($result))			{				// Additionally, do not include the sender if he is in the group he wants to send to. ;)				if ($row['user_id'] === $user->data['user_id'])				{					continue;				}				$field = ($data['address_list']['g'][$row['group_id']] == 'to') ? 'to' : 'bcc';				$recipients[$row['user_id']] = $field;			}			$db->sql_freeresult($result);		}		if (!sizeof($recipients))		{			trigger_error('NO_RECIPIENT');		}	}	// First of all make sure the subject are having the correct length.	$subject = truncate_string($subject);	$db->sql_transaction('begin');	$sql = '';	switch ($mode)	{		case 'reply':		case 'quote':			$root_level = ($data['reply_from_root_level']) ? $data['reply_from_root_level'] : $data['reply_from_msg_id'];			// Set message_replied switch for this user			$sql = 'UPDATE ' . PRIVMSGS_TO_TABLE . '				SET pm_replied = 1				WHERE user_id = ' . $data['from_user_id'] . '					AND msg_id = ' . $data['reply_from_msg_id'];		// no break		case 'forward':		case 'post':		case 'quotepost':			$sql_data = array(				'root_level'		=> $root_level,				'author_id'			=> $data['from_user_id'],				'icon_id'			=> $data['icon_id'],				'author_ip'			=> $data['from_user_ip'],				'message_time'		=> $current_time,				'enable_bbcode'		=> $data['enable_bbcode'],				'enable_smilies'	=> $data['enable_smilies'],				'enable_magic_url'	=> $data['enable_urls'],				'enable_sig'		=> $data['enable_sig'],				'message_subject'	=> $subject,				'message_text'		=> $data['message'],				'message_attachment'=> (!empty($data['attachment_data'])) ? 1 : 0,				'bbcode_bitfield'	=> $data['bbcode_bitfield'],				'bbcode_uid'		=> $data['bbcode_uid'],				'to_address'		=> implode(':', $to),				'bcc_address'		=> implode(':', $bcc),				'message_reported'	=> 0,			);		break;		case 'edit':			$sql_data = array(				'icon_id'			=> $data['icon_id'],				'message_edit_time'	=> $current_time,				'enable_bbcode'		=> $data['enable_bbcode'],				'enable_smilies'	=> $data['enable_smilies'],				'enable_magic_url'	=> $data['enable_urls'],				'enable_sig'		=> $data['enable_sig'],				'message_subject'	=> $subject,				'message_text'		=> $data['message'],				'message_attachment'=> (!empty($data['attachment_data'])) ? 1 : 0,				'bbcode_bitfield'	=> $data['bbcode_bitfield'],				'bbcode_uid'		=> $data['bbcode_uid']			);		break;	}	if (sizeof($sql_data))	{		$query = '';		if ($mode == 'post' || $mode == 'reply' || $mode == 'quote' || $mode == 'quotepost' || $mode == 'forward')		{			$db->sql_query('INSERT INTO ' . PRIVMSGS_TABLE . ' ' . $db->sql_build_array('INSERT', $sql_data));			$data['msg_id'] = $db->sql_nextid();		}		else if ($mode == 'edit')		{			$sql = 'UPDATE ' . PRIVMSGS_TABLE . '				SET message_edit_count = message_edit_count + 1, ' . $db->sql_build_array('UPDATE', $sql_data) . '				WHERE msg_id = ' . $data['msg_id'];			$db->sql_query($sql);		}	}	if ($mode != 'edit')	{		if ($sql)		{			$db->sql_query($sql);		}		unset($sql);		$sql_ary = array();		foreach ($recipients as $user_id => $type)		{			$sql_ary[] = array(				'msg_id'		=> (int) $data['msg_id'],				'user_id'		=> (int) $user_id,				'author_id'		=> (int) $data['from_user_id'],				'folder_id'		=> PRIVMSGS_NO_BOX,				'pm_new'		=> 1,				'pm_unread'		=> 1,				'pm_forwarded'	=> ($mode == 'forward') ? 1 : 0			);		}		$db->sql_multi_insert(PRIVMSGS_TO_TABLE, $sql_ary);		$sql = 'UPDATE ' . USERS_TABLE . '			SET user_new_privmsg = user_new_privmsg + 1, user_unread_privmsg = user_unread_privmsg + 1, user_last_privmsg = ' . time() . '			WHERE ' . $db->sql_in_set('user_id', array_keys($recipients));		$db->sql_query($sql);		// Put PM into outbox		if ($put_in_outbox)		{			$db->sql_query('INSERT INTO ' . PRIVMSGS_TO_TABLE . ' ' . $db->sql_build_array('INSERT', array(				'msg_id'		=> (int) $data['msg_id'],				'user_id'		=> (int) $data['from_user_id'],				'author_id'		=> (int) $data['from_user_id'],				'folder_id'		=> PRIVMSGS_OUTBOX,				'pm_new'		=> 0,				'pm_unread'		=> 0,				'pm_forwarded'	=> ($mode == 'forward') ? 1 : 0))			);		}	}	// Set user last post time	if ($mode == 'reply' || $mode == 'quote' || $mode == 'quotepost' || $mode == 'forward' || $mode == 'post')	{		$sql = 'UPDATE ' . USERS_TABLE . "			SET user_lastpost_time = $current_time			WHERE user_id = " . $data['from_user_id'];		$db->sql_query($sql);	}	// Submit Attachments	if (!empty($data['attachment_data']) && $data['msg_id'] && in_array($mode, array('post', 'reply', 'quote', 'quotepost', 'edit', 'forward')))	{		$space_taken = $files_added = 0;		$orphan_rows = array();		foreach ($data['attachment_data'] as $pos => $attach_row)		{			$orphan_rows[(int) $attach_row['attach_id']] = array();		}		if (sizeof($orphan_rows))		{			$sql = 'SELECT attach_id, filesize, physical_filename				FROM ' . ATTACHMENTS_TABLE . '				WHERE ' . $db->sql_in_set('attach_id', array_keys($orphan_rows)) . '					AND in_message = 1					AND is_orphan = 1					AND poster_id = ' . $user->data['user_id'];			$result = $db->sql_query($sql);			$orphan_rows = array();			while ($row = $db->sql_fetchrow($result))			{				$orphan_rows[$row['attach_id']] = $row;			}			$db->sql_freeresult($result);		}		foreach ($data['attachment_data'] as $pos => $attach_row)		{			if ($attach_row['is_orphan'] && !isset($orphan_rows[$attach_row['attach_id']]))			{				continue;			}			if (!$attach_row['is_orphan'])			{				// update entry in db if attachment already stored in db and filespace				$sql = 'UPDATE ' . ATTACHMENTS_TABLE . "					SET attach_comment = '" . $db->sql_escape($attach_row['attach_comment']) . "'					WHERE attach_id = " . (int) $attach_row['attach_id'] . '						AND is_orphan = 0';				$db->sql_query($sql);			}			else			{				// insert attachment into db				if (!@file_exists($phpbb_root_path . $config['upload_path'] . '/' . utf8_basename($orphan_rows[$attach_row['attach_id']]['physical_filename'])))				{					continue;				}				$space_taken += $orphan_rows[$attach_row['attach_id']]['filesize'];				$files_added++;				$attach_sql = array(					'post_msg_id'		=> $data['msg_id'],					'topic_id'			=> 0,					'is_orphan'			=> 0,					'poster_id'			=> $data['from_user_id'],					'attach_comment'	=> $attach_row['attach_comment'],				);				$sql = 'UPDATE ' . ATTACHMENTS_TABLE . ' SET ' . $db->sql_build_array('UPDATE', $attach_sql) . '					WHERE attach_id = ' . $attach_row['attach_id'] . '						AND is_orphan = 1						AND poster_id = ' . $user->data['user_id'];				$db->sql_query($sql);			}		}		if ($space_taken && $files_added)		{			set_config_count('upload_dir_size', $space_taken, true);			set_config_count('num_files', $files_added, true);		}	}	// Delete draft if post was loaded...	$draft_id = request_var('draft_loaded', 0);	if ($draft_id)	{		$sql = 'DELETE FROM ' . DRAFTS_TABLE . "			WHERE draft_id = $draft_id				AND user_id = " . $data['from_user_id'];		$db->sql_query($sql);	}	$db->sql_transaction('commit');	// Send Notifications	if ($mode != 'edit')	{		pm_notification($mode, $data['from_username'], $recipients, $subject, $data['message'], $data['msg_id']);	}	return $data['msg_id'];}/*** PM Notification*/function pm_notification($mode, $author, $recipients, $subject, $message, $msg_id){	global $db, $user, $config, $phpbb_root_path, $phpEx, $auth;	$subject = censor_text($subject);	unset($recipients[ANONYMOUS], $recipients[$user->data['user_id']]);	if (!sizeof($recipients))	{		return;	}	// Get banned User ID's	$sql = 'SELECT ban_userid		FROM ' . BANLIST_TABLE . '		WHERE ' . $db->sql_in_set('ban_userid', array_map('intval', array_keys($recipients))) . '			AND ban_exclude = 0';	$result = $db->sql_query($sql);	while ($row = $db->sql_fetchrow($result))	{		unset($recipients[$row['ban_userid']]);	}	$db->sql_freeresult($result);	if (!sizeof($recipients))	{		return;	}	$sql = 'SELECT user_id, username, user_email, user_lang, user_notify_pm, user_notify_type, user_jabber		FROM ' . USERS_TABLE . '		WHERE ' . $db->sql_in_set('user_id', array_map('intval', array_keys($recipients)));	$result = $db->sql_query($sql);	$msg_list_ary = array();	while ($row = $db->sql_fetchrow($result))	{		if ($row['user_notify_pm'] == 1 && trim($row['user_email']))		{			$msg_list_ary[] = array(				'method'	=> $row['user_notify_type'],				'email'		=> $row['user_email'],				'jabber'	=> $row['user_jabber'],				'name'		=> $row['username'],				'lang'		=> $row['user_lang']			);		}	}	$db->sql_freeresult($result);	if (!sizeof($msg_list_ary))	{		return;	}	include_once($phpbb_root_path . 'includes/functions_messenger.' . $phpEx);	$messenger = new messenger();	foreach ($msg_list_ary as $pos => $addr)	{		$messenger->template('privmsg_notify', $addr['lang']);		$messenger->to($addr['email'], $addr['name']);		$messenger->im($addr['jabber'], $addr['name']);		$messenger->assign_vars(array(			'SUBJECT'		=> htmlspecialchars_decode($subject),			'AUTHOR_NAME'	=> htmlspecialchars_decode($author),			'USERNAME'		=> htmlspecialchars_decode($addr['name']),			'U_INBOX'			=> generate_board_url() . "/ucp.$phpEx?i=pm&folder=inbox",			'U_VIEW_MESSAGE'	=> generate_board_url() . "/ucp.$phpEx?i=pm&mode=view&p=$msg_id",		));		$messenger->send($addr['method']);	}	unset($msg_list_ary);	$messenger->save_queue();	unset($messenger);}/*** Display Message History*/function message_history($msg_id, $user_id, $message_row, $folder, $in_post_mode = false){	global $db, $user, $config, $template, $phpbb_root_path, $phpEx, $auth, $bbcode;	// Select all receipts and the author from the pm we currently view, to only display their pm-history	$sql = 'SELECT author_id, user_id		FROM ' . PRIVMSGS_TO_TABLE . "		WHERE msg_id = $msg_id			AND folder_id <> " . PRIVMSGS_HOLD_BOX;	$result = $db->sql_query($sql);	$recipients = array();	while ($row = $db->sql_fetchrow($result))	{		$recipients[] = (int) $row['user_id'];		$recipients[] = (int) $row['author_id'];	}	$db->sql_freeresult($result);	$recipients = array_unique($recipients);	// Get History Messages (could be newer)	$sql = 'SELECT t.*, p.*, u.*		FROM ' . PRIVMSGS_TABLE . ' p, ' . PRIVMSGS_TO_TABLE . ' t, ' . USERS_TABLE . ' u		WHERE t.msg_id = p.msg_id			AND p.author_id = u.user_id			AND t.folder_id NOT IN (' . PRIVMSGS_NO_BOX . ', ' . PRIVMSGS_HOLD_BOX . ')			AND ' . $db->sql_in_set('t.author_id', $recipients, false, true) . "			AND t.user_id = $user_id";	// We no longer need those.	unset($recipients);	if (!$message_row['root_level'])	{		$sql .= " AND (p.root_level = $msg_id OR (p.root_level = 0 AND p.msg_id = $msg_id))";	}	else	{		$sql .= " AND (p.root_level = " . $message_row['root_level'] . ' OR p.msg_id = ' . $message_row['root_level'] . ')';	}	$sql .= ' ORDER BY p.message_time DESC';	$result = $db->sql_query($sql);	$row = $db->sql_fetchrow($result);	if (!$row)	{		$db->sql_freeresult($result);		return false;	}	$title = $row['message_subject'];	$rowset = array();	$bbcode_bitfield = '';	$folder_url = append_sid("{$phpbb_root_path}ucp.$phpEx", 'i=pm') . '&amp;folder=';	do	{		$folder_id = (int) $row['folder_id'];		$row['folder'][] = (isset($folder[$folder_id])) ? '<a href="' . $folder_url . $folder_id . '">' . $folder[$folder_id]['folder_name'] . '</a>' : $user->lang['UNKNOWN_FOLDER'];		if (isset($rowset[$row['msg_id']]))		{			$rowset[$row['msg_id']]['folder'][] = (isset($folder[$folder_id])) ? '<a href="' . $folder_url . $folder_id . '">' . $folder[$folder_id]['folder_name'] . '</a>' : $user->lang['UNKNOWN_FOLDER'];		}		else		{			$rowset[$row['msg_id']] = $row;			$bbcode_bitfield = $bbcode_bitfield | base64_decode($row['bbcode_bitfield']);		}	}	while ($row = $db->sql_fetchrow($result));	$db->sql_freeresult($result);	if (sizeof($rowset) == 1 && !$in_post_mode)	{		return false;	}	// Instantiate BBCode class	if ((empty($bbcode) || $bbcode === false) && $bbcode_bitfield !== '')	{		if (!class_exists('bbcode'))		{			include($phpbb_root_path . 'includes/bbcode.' . $phpEx);		}		$bbcode = new bbcode(base64_encode($bbcode_bitfield));	}	$title = censor_text($title);	$url = append_sid("{$phpbb_root_path}ucp.$phpEx", 'i=pm');	$next_history_pm = $previous_history_pm = $prev_id = 0;	// Re-order rowset to be able to get the next/prev message rows...	$rowset = array_values($rowset);	for ($i = 0, $size = sizeof($rowset); $i < $size; $i++)	{		$row = &$rowset[$i];		$id = (int) $row['msg_id'];		$author_id	= $row['author_id'];		$folder_id	= (int) $row['folder_id'];		$subject	= $row['message_subject'];		$message	= $row['message_text'];		$message = censor_text($message);		$decoded_message = false;		if ($in_post_mode && $auth->acl_get('u_sendpm') && $author_id != ANONYMOUS)		{			$decoded_message = $message;			decode_message($decoded_message, $row['bbcode_uid']);			$decoded_message = bbcode_nl2br($decoded_message);		}		if ($row['bbcode_bitfield'])		{			$bbcode->bbcode_second_pass($message, $row['bbcode_uid'], $row['bbcode_bitfield']);		}		$message = bbcode_nl2br($message);		$message = smiley_text($message, !$row['enable_smilies']);		$subject = censor_text($subject);		if ($id == $msg_id)		{			$next_history_pm = (isset($rowset[$i + 1])) ? (int) $rowset[$i + 1]['msg_id'] : 0;			$previous_history_pm = $prev_id;		}		$template->assign_block_vars('history_row', array(			'MESSAGE_AUTHOR_QUOTE'		=> (($decoded_message) ? addslashes(get_username_string('username', $author_id, $row['username'], $row['user_colour'], $row['username'])) : ''),			'MESSAGE_AUTHOR_FULL'		=> get_username_string('full', $author_id, $row['username'], $row['user_colour'], $row['username']),			'MESSAGE_AUTHOR_COLOUR'		=> get_username_string('colour', $author_id, $row['username'], $row['user_colour'], $row['username']),			'MESSAGE_AUTHOR'			=> get_username_string('username', $author_id, $row['username'], $row['user_colour'], $row['username']),			'U_MESSAGE_AUTHOR'			=> get_username_string('profile', $author_id, $row['username'], $row['user_colour'], $row['username']),			'SUBJECT'			=> $subject,			'SENT_DATE'			=> $user->format_date($row['message_time']),			'MESSAGE'			=> $message,			'FOLDER'			=> implode(', ', $row['folder']),			'DECODED_MESSAGE'	=> $decoded_message,			'S_CURRENT_MSG'		=> ($row['msg_id'] == $msg_id),			'S_AUTHOR_DELETED'	=> ($author_id == ANONYMOUS) ? true : false,			'S_IN_POST_MODE'	=> $in_post_mode,			'MSG_ID'			=> $row['msg_id'],			'U_VIEW_MESSAGE'	=> "$url&amp;f=$folder_id&amp;p=" . $row['msg_id'],			'U_QUOTE'			=> (!$in_post_mode && $auth->acl_get('u_sendpm') && $author_id != ANONYMOUS) ? "$url&amp;mode=compose&amp;action=quote&amp;f=" . $folder_id . "&amp;p=" . $row['msg_id'] : '',			'U_POST_REPLY_PM'	=> ($author_id != $user->data['user_id'] && $author_id != ANONYMOUS && $auth->acl_get('u_sendpm')) ? "$url&amp;mode=compose&amp;action=reply&amp;f=$folder_id&amp;p=" . $row['msg_id'] : '')		);		unset($rowset[$i]);		$prev_id = $id;	}	$template->assign_vars(array(		'QUOTE_IMG'			=> $user->img('icon_post_quote', $user->lang['REPLY_WITH_QUOTE']),		'HISTORY_TITLE'		=> $title,		'U_VIEW_NEXT_HISTORY'		=> ($next_history_pm) ? "$url&amp;p=" . $next_history_pm : '',		'U_VIEW_PREVIOUS_HISTORY'	=> ($previous_history_pm) ? "$url&amp;p=" . $previous_history_pm : '',	));	return true;}/*** Set correct users max messages in PM folder.* If several group memberships define different amount of messages, the highest will be chosen.*/function set_user_message_limit(){	global $user, $db, $config;	// Get maximum about from user memberships - if it is 0, there is no limit set and we use the maximum value within the config.	$sql = 'SELECT MAX(g.group_message_limit) as max_message_limit		FROM ' . GROUPS_TABLE . ' g, ' . USER_GROUP_TABLE . ' ug		WHERE ug.user_id = ' . $user->data['user_id'] . '			AND ug.user_pending = 0			AND ug.group_id = g.group_id';	$result = $db->sql_query($sql);	$message_limit = (int) $db->sql_fetchfield('max_message_limit');	$db->sql_freeresult($result);	$user->data['message_limit'] = (!$message_limit) ? $config['pm_max_msgs'] : $message_limit;}/*** Generates an array of coloured recipient names from a list of PMs - (groups & users)** @param	array	$pm_by_id	An array of rows from PRIVMSGS_TABLE, keys are the msg_ids.** @return	array				2D Array: array(msg_id => array('username or group string', ...), ...)*								Usernames are generated with {@link get_username_string get_username_string}*								Groups are coloured and have a link to the membership page*/function get_recipient_strings($pm_by_id){	global $db, $phpbb_root_path, $phpEx, $user;	$address_list = $recipient_list = $address = array();	$_types = array('u', 'g');	foreach ($pm_by_id as $message_id => $row)	{		$address[$message_id] = rebuild_header(array('to' => $row['to_address'], 'bcc' => $row['bcc_address']));		foreach ($_types as $ug_type)		{			if (isset($address[$message_id][$ug_type]) && sizeof($address[$message_id][$ug_type]))			{				foreach ($address[$message_id][$ug_type] as $ug_id => $in_to)				{					$recipient_list[$ug_type][$ug_id] = array('name' => $user->lang['NA'], 'colour' => '');				}			}		}	}	foreach ($_types as $ug_type)	{		if (!empty($recipient_list[$ug_type]))		{			if ($ug_type == 'u')			{				$sql = 'SELECT user_id as id, username as name, user_colour as colour					FROM ' . USERS_TABLE . '					WHERE ';			}			else			{				$sql = 'SELECT group_id as id, group_name as name, group_colour as colour, group_type					FROM ' . GROUPS_TABLE . '					WHERE ';			}			$sql .= $db->sql_in_set(($ug_type == 'u') ? 'user_id' : 'group_id', array_map('intval', array_keys($recipient_list[$ug_type])));			$result = $db->sql_query($sql);			while ($row = $db->sql_fetchrow($result))			{				if ($ug_type == 'g')				{					$row['name'] = ($row['group_type'] == GROUP_SPECIAL) ? $user->lang['G_' . $row['name']] : $row['name'];				}				$recipient_list[$ug_type][$row['id']] = array('name' => $row['name'], 'colour' => $row['colour']);			}			$db->sql_freeresult($result);		}	}	foreach ($address as $message_id => $adr_ary)	{		foreach ($adr_ary as $type => $id_ary)		{			foreach ($id_ary as $ug_id => $_id)			{				if ($type == 'u')				{					$address_list[$message_id][] = get_username_string('full', $ug_id, $recipient_list[$type][$ug_id]['name'], $recipient_list[$type][$ug_id]['colour']);				}				else				{					$user_colour = ($recipient_list[$type][$ug_id]['colour']) ? ' style="font-weight: bold; color:#' . $recipient_list[$type][$ug_id]['colour'] . '"' : '';					$link = '<a href="' . append_sid("{$phpbb_root_path}memberlist.$phpEx", 'mode=group&amp;g=' . $ug_id) . '"' . $user_colour . '>';					$address_list[$message_id][] = $link . $recipient_list[$type][$ug_id]['name'] . (($link) ? '</a>' : '');				}			}		}	}	return $address_list;}?>
<?php/***************************************************************************   *                           merge_clean_posts.php   *                            -------------------                          *   begin                : Tuesday, February 25, 2003  *   copyright            : (C) 2003 The phpBB Group         *   email                : support@phpbb.com                            *                                                           *   $Id$ *  ***************************************************************************/ /***************************************************************************   *                                                      *   This program is free software; you can redistribute it and/or modify     *   it under the terms of the GNU General Public License as published by    *   the Free Software Foundation; either version 2 of the License, or   *   (at your option) any later version.                       *  ***************************************************************************/ //// Security message://// This script is potentially dangerous.// Remove or comment the next line (die(".... ) to enable this script.// Do NOT FORGET to either remove this script or disable it after you have used it.//die("Please read the first lines of this script for instructions on how to enable it");@set_time_limit(2400);// This script adds missing permissions$db = $dbhost = $dbuser = $dbpasswd = $dbport = $dbname = '';define('IN_PHPBB', 1);define('ANONYMOUS', 1);$phpEx = substr(strrchr(__FILE__, '.'), 1);$phpbb_root_path='./../';include($phpbb_root_path . 'config.'.$phpEx);require($phpbb_root_path . 'includes/acm/acm_' . $acm_type . '.'.$phpEx);require($phpbb_root_path . 'includes/db/' . $dbms . '.'.$phpEx);include($phpbb_root_path . 'includes/functions.'.$phpEx);$cache		= new acm();$db			= new $sql_db();// Connect to DB$db->sql_connect($dbhost, $dbuser, $dbpasswd, $dbname, $dbport, false);$sql = "SELECT post_id, post_text FROM {$table_prefix}posts WHERE post_text LIKE '%{SMILE_PATH}%'";$result = $db->sql_query($sql);while ($row = $db->sql_fetchrow($result)){	$db->sql_query("UPDATE {$table_prefix}posts SET post_text = '" . $db->sql_escape(str_replace('{SMILE_PATH}', '{SMILIES_PATH}', $row['post_text'])) . "' WHERE post_id = " . $row['post_id']);}$db->sql_freeresult($result);echo "<p><b>Done</b></p>\n"; ?>
<?php/**** @package phpBB3* @version $Id$* @copyright (c) 2006 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License** This file creates new schema files for every database.* The filenames will be prefixed with an underscore to not overwrite the current schema files.** If you overwrite the original schema files please make sure you save the file with UNIX linefeeds.*/$schema_path = dirname(__FILE__) . '/../install/schemas/';if (!is_writable($schema_path)){	die('Schema path not writable');}$schema_data = get_schema_struct();$dbms_type_map = array(	'mysql_41'	=> array(		'INT:'		=> 'int(%d)',		'BINT'		=> 'bigint(20)',		'UINT'		=> 'mediumint(8) UNSIGNED',		'UINT:'		=> 'int(%d) UNSIGNED',		'TINT:'		=> 'tinyint(%d)',		'USINT'		=> 'smallint(4) UNSIGNED',		'BOOL'		=> 'tinyint(1) UNSIGNED',		'VCHAR'		=> 'varchar(255)',		'VCHAR:'	=> 'varchar(%d)',		'CHAR:'		=> 'char(%d)',		'XSTEXT'	=> 'text',		'XSTEXT_UNI'=> 'varchar(100)',		'STEXT'		=> 'text',		'STEXT_UNI'	=> 'varchar(255)',		'TEXT'		=> 'text',		'TEXT_UNI'	=> 'text',		'MTEXT'		=> 'mediumtext',		'MTEXT_UNI'	=> 'mediumtext',		'TIMESTAMP'	=> 'int(11) UNSIGNED',		'DECIMAL'	=> 'decimal(5,2)',		'DECIMAL:'	=> 'decimal(%d,2)',		'PDECIMAL'	=> 'decimal(6,3)',		'PDECIMAL:'	=> 'decimal(%d,3)',		'VCHAR_UNI'	=> 'varchar(255)',		'VCHAR_UNI:'=> 'varchar(%d)',		'VCHAR_CI'	=> 'varchar(255)',		'VARBINARY'	=> 'varbinary(255)',	),	'mysql_40'	=> array(		'INT:'		=> 'int(%d)',		'BINT'		=> 'bigint(20)',		'UINT'		=> 'mediumint(8) UNSIGNED',		'UINT:'		=> 'int(%d) UNSIGNED',		'TINT:'		=> 'tinyint(%d)',		'USINT'		=> 'smallint(4) UNSIGNED',		'BOOL'		=> 'tinyint(1) UNSIGNED',		'VCHAR'		=> 'varbinary(255)',		'VCHAR:'	=> 'varbinary(%d)',		'CHAR:'		=> 'binary(%d)',		'XSTEXT'	=> 'blob',		'XSTEXT_UNI'=> 'blob',		'STEXT'		=> 'blob',		'STEXT_UNI'	=> 'blob',		'TEXT'		=> 'blob',		'TEXT_UNI'	=> 'blob',		'MTEXT'		=> 'mediumblob',		'MTEXT_UNI'	=> 'mediumblob',		'TIMESTAMP'	=> 'int(11) UNSIGNED',		'DECIMAL'	=> 'decimal(5,2)',		'DECIMAL:'	=> 'decimal(%d,2)',		'PDECIMAL'	=> 'decimal(6,3)',		'PDECIMAL:'	=> 'decimal(%d,3)',		'VCHAR_UNI'	=> 'blob',		'VCHAR_UNI:'=> array('varbinary(%d)', 'limit' => array('mult', 3, 255, 'blob')),		'VCHAR_CI'	=> 'blob',		'VARBINARY'	=> 'varbinary(255)',	),	'firebird'	=> array(		'INT:'		=> 'INTEGER',		'BINT'		=> 'DOUBLE PRECISION',		'UINT'		=> 'INTEGER',		'UINT:'		=> 'INTEGER',		'TINT:'		=> 'INTEGER',		'USINT'		=> 'INTEGER',		'BOOL'		=> 'INTEGER',		'VCHAR'		=> 'VARCHAR(255) CHARACTER SET NONE',		'VCHAR:'	=> 'VARCHAR(%d) CHARACTER SET NONE',		'CHAR:'		=> 'CHAR(%d) CHARACTER SET NONE',		'XSTEXT'	=> 'BLOB SUB_TYPE TEXT CHARACTER SET NONE',		'STEXT'		=> 'BLOB SUB_TYPE TEXT CHARACTER SET NONE',		'TEXT'		=> 'BLOB SUB_TYPE TEXT CHARACTER SET NONE',		'MTEXT'		=> 'BLOB SUB_TYPE TEXT CHARACTER SET NONE',		'XSTEXT_UNI'=> 'VARCHAR(100) CHARACTER SET UTF8',		'STEXT_UNI'	=> 'VARCHAR(255) CHARACTER SET UTF8',		'TEXT_UNI'	=> 'BLOB SUB_TYPE TEXT CHARACTER SET UTF8',		'MTEXT_UNI'	=> 'BLOB SUB_TYPE TEXT CHARACTER SET UTF8',		'TIMESTAMP'	=> 'INTEGER',		'DECIMAL'	=> 'DOUBLE PRECISION',		'DECIMAL:'	=> 'DOUBLE PRECISION',		'PDECIMAL'	=> 'DOUBLE PRECISION',		'PDECIMAL:'	=> 'DOUBLE PRECISION',		'VCHAR_UNI'	=> 'VARCHAR(255) CHARACTER SET UTF8',		'VCHAR_UNI:'=> 'VARCHAR(%d) CHARACTER SET UTF8',		'VCHAR_CI'	=> 'VARCHAR(255) CHARACTER SET UTF8',		'VARBINARY'	=> 'CHAR(255) CHARACTER SET NONE',	),	'mssql'		=> array(		'INT:'		=> '[int]',		'BINT'		=> '[float]',		'UINT'		=> '[int]',		'UINT:'		=> '[int]',		'TINT:'		=> '[int]',		'USINT'		=> '[int]',		'BOOL'		=> '[int]',		'VCHAR'		=> '[varchar] (255)',		'VCHAR:'	=> '[varchar] (%d)',		'CHAR:'		=> '[char] (%d)',		'XSTEXT'	=> '[varchar] (1000)',		'STEXT'		=> '[varchar] (3000)',		'TEXT'		=> '[varchar] (8000)',		'MTEXT'		=> '[text]',		'XSTEXT_UNI'=> '[varchar] (100)',		'STEXT_UNI'	=> '[varchar] (255)',		'TEXT_UNI'	=> '[varchar] (4000)',		'MTEXT_UNI'	=> '[text]',		'TIMESTAMP'	=> '[int]',		'DECIMAL'	=> '[float]',		'DECIMAL:'	=> '[float]',		'PDECIMAL'	=> '[float]',		'PDECIMAL:'	=> '[float]',		'VCHAR_UNI'	=> '[varchar] (255)',		'VCHAR_UNI:'=> '[varchar] (%d)',		'VCHAR_CI'	=> '[varchar] (255)',		'VARBINARY'	=> '[varchar] (255)',	),	'oracle'	=> array(		'INT:'		=> 'number(%d)',		'BINT'		=> 'number(20)',		'UINT'		=> 'number(8)',		'UINT:'		=> 'number(%d)',		'TINT:'		=> 'number(%d)',		'USINT'		=> 'number(4)',		'BOOL'		=> 'number(1)',		'VCHAR'		=> 'varchar2(255)',		'VCHAR:'	=> 'varchar2(%d)',		'CHAR:'		=> 'char(%d)',		'XSTEXT'	=> 'varchar2(1000)',		'STEXT'		=> 'varchar2(3000)',		'TEXT'		=> 'clob',		'MTEXT'		=> 'clob',		'XSTEXT_UNI'=> 'varchar2(300)',		'STEXT_UNI'	=> 'varchar2(765)',		'TEXT_UNI'	=> 'clob',		'MTEXT_UNI'	=> 'clob',		'TIMESTAMP'	=> 'number(11)',		'DECIMAL'	=> 'number(5, 2)',		'DECIMAL:'	=> 'number(%d, 2)',		'PDECIMAL'	=> 'number(6, 3)',		'PDECIMAL:'	=> 'number(%d, 3)',		'VCHAR_UNI'	=> 'varchar2(765)',		'VCHAR_UNI:'=> array('varchar2(%d)', 'limit' => array('mult', 3, 765, 'clob')),		'VCHAR_CI'	=> 'varchar2(255)',		'VARBINARY'	=> 'raw(255)',	),	'sqlite'	=> array(		'INT:'		=> 'int(%d)',		'BINT'		=> 'bigint(20)',		'UINT'		=> 'INTEGER UNSIGNED', //'mediumint(8) UNSIGNED',		'UINT:'		=> 'INTEGER UNSIGNED', // 'int(%d) UNSIGNED',		'TINT:'		=> 'tinyint(%d)',		'USINT'		=> 'INTEGER UNSIGNED', //'mediumint(4) UNSIGNED',		'BOOL'		=> 'INTEGER UNSIGNED', //'tinyint(1) UNSIGNED',		'VCHAR'		=> 'varchar(255)',		'VCHAR:'	=> 'varchar(%d)',		'CHAR:'		=> 'char(%d)',		'XSTEXT'	=> 'text(65535)',		'STEXT'		=> 'text(65535)',		'TEXT'		=> 'text(65535)',		'MTEXT'		=> 'mediumtext(16777215)',		'XSTEXT_UNI'=> 'text(65535)',		'STEXT_UNI'	=> 'text(65535)',		'TEXT_UNI'	=> 'text(65535)',		'MTEXT_UNI'	=> 'mediumtext(16777215)',		'TIMESTAMP'	=> 'INTEGER UNSIGNED', //'int(11) UNSIGNED',		'DECIMAL'	=> 'decimal(5,2)',		'DECIMAL:'	=> 'decimal(%d,2)',		'PDECIMAL'	=> 'decimal(6,3)',		'PDECIMAL:'	=> 'decimal(%d,3)',		'VCHAR_UNI'	=> 'varchar(255)',		'VCHAR_UNI:'=> 'varchar(%d)',		'VCHAR_CI'	=> 'varchar(255)',		'VARBINARY'	=> 'blob',	),	'postgres'	=> array(		'INT:'		=> 'INT4',		'BINT'		=> 'INT8',		'UINT'		=> 'INT4', // unsigned		'UINT:'		=> 'INT4', // unsigned		'USINT'		=> 'INT2', // unsigned		'BOOL'		=> 'INT2', // unsigned		'TINT:'		=> 'INT2',		'VCHAR'		=> 'varchar(255)',		'VCHAR:'	=> 'varchar(%d)',		'CHAR:'		=> 'char(%d)',		'XSTEXT'	=> 'varchar(1000)',		'STEXT'		=> 'varchar(3000)',		'TEXT'		=> 'varchar(8000)',		'MTEXT'		=> 'TEXT',		'XSTEXT_UNI'=> 'varchar(100)',		'STEXT_UNI'	=> 'varchar(255)',		'TEXT_UNI'	=> 'varchar(4000)',		'MTEXT_UNI'	=> 'TEXT',		'TIMESTAMP'	=> 'INT4', // unsigned		'DECIMAL'	=> 'decimal(5,2)',		'DECIMAL:'	=> 'decimal(%d,2)',		'PDECIMAL'	=> 'decimal(6,3)',		'PDECIMAL:'	=> 'decimal(%d,3)',		'VCHAR_UNI'	=> 'varchar(255)',		'VCHAR_UNI:'=> 'varchar(%d)',		'VCHAR_CI'	=> 'varchar_ci',		'VARBINARY'	=> 'bytea',	),);// A list of types being unsigned for better reference in some db's$unsigned_types = array('UINT', 'UINT:', 'USINT', 'BOOL', 'TIMESTAMP');$supported_dbms = array('firebird', 'mssql', 'mysql_40', 'mysql_41', 'oracle', 'postgres', 'sqlite');foreach ($supported_dbms as $dbms){	$fp = fopen($schema_path . $dbms . '_schema.sql', 'wt');	$line = '';	// Write Header	switch ($dbms)	{		case 'mysql_40':		case 'mysql_41':		case 'firebird':		case 'sqlite':			fwrite($fp, "# DO NOT EDIT THIS FILE, IT IS GENERATED\n");			fwrite($fp, "#\n");			fwrite($fp, "# To change the contents of this file, edit\n");			fwrite($fp, "# phpBB/develop/create_schema_files.php and\n");			fwrite($fp, "# run it.\n");		break;		case 'mssql':		case 'oracle':		case 'postgres':			fwrite($fp, "/*\n");			fwrite($fp, " * DO NOT EDIT THIS FILE, IT IS GENERATED\n");			fwrite($fp, " *\n");			fwrite($fp, " * To change the contents of this file, edit\n");			fwrite($fp, " * phpBB/develop/create_schema_files.php and\n");			fwrite($fp, " * run it.\n");			fwrite($fp, " */\n\n");		break;	}	switch ($dbms)	{		case 'firebird':			$line .= custom_data('firebird') . "\n";		break;		case 'sqlite':			$line .= "BEGIN TRANSACTION;\n\n";		break;		case 'oracle':			$line .= custom_data('oracle') . "\n";		break;		case 'postgres':			$line .= "BEGIN;\n\n";			$line .= custom_data('postgres') . "\n";		break;	}	fwrite($fp, $line);	foreach ($schema_data as $table_name => $table_data)	{		// Write comment about table		switch ($dbms)		{			case 'mysql_40':			case 'mysql_41':			case 'firebird':			case 'sqlite':				fwrite($fp, "# Table: '{$table_name}'\n");			break;			case 'mssql':			case 'oracle':			case 'postgres':				fwrite($fp, "/*\n\tTable: '{$table_name}'\n*/\n");			break;		}		// Create Table statement		$generator = $textimage = false;		$line = '';		switch ($dbms)		{			case 'mysql_40':			case 'mysql_41':			case 'firebird':			case 'oracle':			case 'sqlite':			case 'postgres':				$line = "CREATE TABLE {$table_name} (\n";			break;			case 'mssql':				$line = "CREATE TABLE [{$table_name}] (\n";			break;		}		// Table specific so we don't get overlap		$modded_array = array();		// Write columns one by one...		foreach ($table_data['COLUMNS'] as $column_name => $column_data)		{			if (strlen($column_name) > 30)			{				trigger_error("Column name '$column_name' on table '$table_name' is too long. The maximum is 30 characters.", E_USER_ERROR);			}			if (isset($column_data[2]) && $column_data[2] == 'auto_increment' && strlen($column_name) > 26) // "${column_name}_gen"			{				trigger_error("Index name '${column_name}_gen' on table '$table_name' is too long. The maximum is 30 characters.", E_USER_ERROR);			}			// Get type			if (strpos($column_data[0], ':') !== false)			{				list($orig_column_type, $column_length) = explode(':', $column_data[0]);				if (!is_array($dbms_type_map[$dbms][$orig_column_type . ':']))				{					$column_type = sprintf($dbms_type_map[$dbms][$orig_column_type . ':'], $column_length);				}				else				{					if (isset($dbms_type_map[$dbms][$orig_column_type . ':']['rule']))					{						switch ($dbms_type_map[$dbms][$orig_column_type . ':']['rule'][0])						{							case 'div':								$column_length /= $dbms_type_map[$dbms][$orig_column_type . ':']['rule'][1];								$column_length = ceil($column_length);								$column_type = sprintf($dbms_type_map[$dbms][$orig_column_type . ':'][0], $column_length);							break;						}					}					if (isset($dbms_type_map[$dbms][$orig_column_type . ':']['limit']))					{						switch ($dbms_type_map[$dbms][$orig_column_type . ':']['limit'][0])						{							case 'mult':								$column_length *= $dbms_type_map[$dbms][$orig_column_type . ':']['limit'][1];								if ($column_length > $dbms_type_map[$dbms][$orig_column_type . ':']['limit'][2])								{									$column_type = $dbms_type_map[$dbms][$orig_column_type . ':']['limit'][3];									$modded_array[$column_name] = $column_type;								}								else								{									$column_type = sprintf($dbms_type_map[$dbms][$orig_column_type . ':'][0], $column_length);								}							break;						}					}				}				$orig_column_type .= ':';			}			else			{				$orig_column_type = $column_data[0];				$column_type = $dbms_type_map[$dbms][$column_data[0]];				if ($column_type == 'text' || $column_type == 'blob')				{					$modded_array[$column_name] = $column_type;				}			}			// Adjust default value if db-dependant specified			if (is_array($column_data[1]))			{				$column_data[1] = (isset($column_data[1][$dbms])) ? $column_data[1][$dbms] : $column_data[1]['default'];			}			switch ($dbms)			{				case 'mysql_40':				case 'mysql_41':					$line .= "\t{$column_name} {$column_type} ";					// For hexadecimal values do not use single quotes					if (!is_null($column_data[1]) && substr($column_type, -4) !== 'text' && substr($column_type, -4) !== 'blob')					{						$line .= (strpos($column_data[1], '0x') === 0) ? "DEFAULT {$column_data[1]} " : "DEFAULT '{$column_data[1]}' ";					}					$line .= 'NOT NULL';					if (isset($column_data[2]))					{						if ($column_data[2] == 'auto_increment')						{							$line .= ' auto_increment';						}						else if ($dbms === 'mysql_41' && $column_data[2] == 'true_sort')						{							$line .= ' COLLATE utf8_unicode_ci';						}					}					$line .= ",\n";				break;				case 'sqlite':					if (isset($column_data[2]) && $column_data[2] == 'auto_increment')					{						$line .= "\t{$column_name} INTEGER PRIMARY KEY ";						$generator = $column_name;					}					else					{						$line .= "\t{$column_name} {$column_type} ";					}					$line .= 'NOT NULL ';					$line .= (!is_null($column_data[1])) ? "DEFAULT '{$column_data[1]}'" : '';					$line .= ",\n";				break;				case 'firebird':					$line .= "\t{$column_name} {$column_type} ";					if (!is_null($column_data[1]))					{						$line .= 'DEFAULT ' . ((is_numeric($column_data[1])) ? $column_data[1] : "'{$column_data[1]}'") . ' ';					}					$line .= 'NOT NULL';					// This is a UNICODE column and thus should be given it's fair share					if (preg_match('/^X?STEXT_UNI|VCHAR_(CI|UNI:?)/', $column_data[0]))					{						$line .= ' COLLATE UNICODE';					}					$line .= ",\n";					if (isset($column_data[2]) && $column_data[2] == 'auto_increment')					{						$generator = $column_name;					}				break;				case 'mssql':					if ($column_type == '[text]')					{						$textimage = true;					}					$line .= "\t[{$column_name}] {$column_type} ";					if (!is_null($column_data[1]))					{						// For hexadecimal values do not use single quotes						if (strpos($column_data[1], '0x') === 0)						{							$line .= 'DEFAULT (' . $column_data[1] . ') ';						}						else						{							$line .= 'DEFAULT (' . ((is_numeric($column_data[1])) ? $column_data[1] : "'{$column_data[1]}'") . ') ';						}					}					if (isset($column_data[2]) && $column_data[2] == 'auto_increment')					{						$line .= 'IDENTITY (1, 1) ';					}					$line .= 'NOT NULL';					$line .= " ,\n";				break;				case 'oracle':					$line .= "\t{$column_name} {$column_type} ";					$line .= (!is_null($column_data[1])) ? "DEFAULT '{$column_data[1]}' " : '';					// In Oracle empty strings ('') are treated as NULL.					// Therefore in oracle we allow NULL's for all DEFAULT '' entries					$line .= ($column_data[1] === '') ? ",\n" : "NOT NULL,\n";					if (isset($column_data[2]) && $column_data[2] == 'auto_increment')					{						$generator = $column_name;					}				break;				case 'postgres':					$line .= "\t{$column_name} {$column_type} ";					if (isset($column_data[2]) && $column_data[2] == 'auto_increment')					{						$line .= "DEFAULT nextval('{$table_name}_seq'),\n";						// Make sure the sequence will be created before creating the table						$line = "CREATE SEQUENCE {$table_name}_seq;\n\n" . $line;					}					else					{						$line .= (!is_null($column_data[1])) ? "DEFAULT '{$column_data[1]}' " : '';						$line .= "NOT NULL";						// Unsigned? Then add a CHECK contraint						if (in_array($orig_column_type, $unsigned_types))						{							$line .= " CHECK ({$column_name} >= 0)";						}						$line .= ",\n";					}				break;			}		}		switch ($dbms)		{			case 'firebird':				// Remove last line delimiter...				$line = substr($line, 0, -2);				$line .= "\n);;\n\n";			break;			case 'mssql':				$line = substr($line, 0, -2);				$line .= "\n) ON [PRIMARY]" . (($textimage) ? ' TEXTIMAGE_ON [PRIMARY]' : '') . "\n";				$line .= "GO\n\n";			break;		}		// Write primary key		if (isset($table_data['PRIMARY_KEY']))		{			if (!is_array($table_data['PRIMARY_KEY']))			{				$table_data['PRIMARY_KEY'] = array($table_data['PRIMARY_KEY']);			}			switch ($dbms)			{				case 'mysql_40':				case 'mysql_41':				case 'postgres':					$line .= "\tPRIMARY KEY (" . implode(', ', $table_data['PRIMARY_KEY']) . "),\n";				break;				case 'firebird':					$line .= "ALTER TABLE {$table_name} ADD PRIMARY KEY (" . implode(', ', $table_data['PRIMARY_KEY']) . ");;\n\n";				break;				case 'sqlite':					if ($generator === false || !in_array($generator, $table_data['PRIMARY_KEY']))					{						$line .= "\tPRIMARY KEY (" . implode(', ', $table_data['PRIMARY_KEY']) . "),\n";					}				break;				case 'mssql':					$line .= "ALTER TABLE [{$table_name}] WITH NOCHECK ADD \n";					$line .= "\tCONSTRAINT [PK_{$table_name}] PRIMARY KEY  CLUSTERED \n";					$line .= "\t(\n";					$line .= "\t\t[" . implode("],\n\t\t[", $table_data['PRIMARY_KEY']) . "]\n";					$line .= "\t)  ON [PRIMARY] \n";					$line .= "GO\n\n";				break;				case 'oracle':					$line .= "\tCONSTRAINT pk_{$table_name} PRIMARY KEY (" . implode(', ', $table_data['PRIMARY_KEY']) . "),\n";				break;			}		}		switch ($dbms)		{			case 'oracle':				// UNIQUE contrains to be added?				if (isset($table_data['KEYS']))				{					foreach ($table_data['KEYS'] as $key_name => $key_data)					{						if (!is_array($key_data[1]))						{							$key_data[1] = array($key_data[1]);						}						if ($key_data[0] == 'UNIQUE')						{							$line .= "\tCONSTRAINT u_phpbb_{$key_name} UNIQUE (" . implode(', ', $key_data[1]) . "),\n";						}					}				}				// Remove last line delimiter...				$line = substr($line, 0, -2);				$line .= "\n)\n/\n\n";			break;			case 'postgres':				// Remove last line delimiter...				$line = substr($line, 0, -2);				$line .= "\n);\n\n";			break;			case 'sqlite':				// Remove last line delimiter...				$line = substr($line, 0, -2);				$line .= "\n);\n\n";			break;		}		// Write Keys		if (isset($table_data['KEYS']))		{			foreach ($table_data['KEYS'] as $key_name => $key_data)			{				if (!is_array($key_data[1]))				{					$key_data[1] = array($key_data[1]);				}				if (strlen($table_name . $key_name) > 30)				{					trigger_error("Index name '${table_name}_$key_name' on table '$table_name' is too long. The maximum is 30 characters.", E_USER_ERROR);				}				switch ($dbms)				{					case 'mysql_40':					case 'mysql_41':						$line .= ($key_data[0] == 'INDEX') ? "\tKEY" : '';						$line .= ($key_data[0] == 'UNIQUE') ? "\tUNIQUE" : '';						foreach ($key_data[1] as $key => $col_name)						{							if (isset($modded_array[$col_name]))							{								switch ($modded_array[$col_name])								{									case 'text':									case 'blob':										$key_data[1][$key] = $col_name . '(255)';									break;								}							}						}						$line .= ' ' . $key_name . ' (' . implode(', ', $key_data[1]) . "),\n";					break;					case 'firebird':						$line .= ($key_data[0] == 'INDEX') ? 'CREATE INDEX' : '';						$line .= ($key_data[0] == 'UNIQUE') ? 'CREATE UNIQUE INDEX' : '';						$line .= ' ' . $table_name . '_' . $key_name . ' ON ' . $table_name . '(' . implode(', ', $key_data[1]) . ");;\n";					break;					case 'mssql':						$line .= ($key_data[0] == 'INDEX') ? 'CREATE  INDEX' : '';						$line .= ($key_data[0] == 'UNIQUE') ? 'CREATE  UNIQUE  INDEX' : '';						$line .= " [{$key_name}] ON [{$table_name}]([" . implode('], [', $key_data[1]) . "]) ON [PRIMARY]\n";						$line .= "GO\n\n";					break;					case 'oracle':						if ($key_data[0] == 'UNIQUE')						{							continue;						}						$line .= ($key_data[0] == 'INDEX') ? 'CREATE INDEX' : '';						$line .= " {$table_name}_{$key_name} ON {$table_name} (" . implode(', ', $key_data[1]) . ")\n";						$line .= "/\n";					break;					case 'sqlite':						$line .= ($key_data[0] == 'INDEX') ? 'CREATE INDEX' : '';						$line .= ($key_data[0] == 'UNIQUE') ? 'CREATE UNIQUE INDEX' : '';						$line .= " {$table_name}_{$key_name} ON {$table_name} (" . implode(', ', $key_data[1]) . ");\n";					break;					case 'postgres':						$line .= ($key_data[0] == 'INDEX') ? 'CREATE INDEX' : '';						$line .= ($key_data[0] == 'UNIQUE') ? 'CREATE UNIQUE INDEX' : '';						$line .= " {$table_name}_{$key_name} ON {$table_name} (" . implode(', ', $key_data[1]) . ");\n";					break;				}			}		}		switch ($dbms)		{			case 'mysql_40':				// Remove last line delimiter...				$line = substr($line, 0, -2);				$line .= "\n);\n\n";			break;			case 'mysql_41':				// Remove last line delimiter...				$line = substr($line, 0, -2);				$line .= "\n) CHARACTER SET `utf8` COLLATE `utf8_bin`;\n\n";			break;			// Create Generator			case 'firebird':				if ($generator !== false)				{					$line .= "\nCREATE GENERATOR {$table_name}_gen;;\n";					$line .= 'SET GENERATOR ' . $table_name . "_gen TO 0;;\n\n";					$line .= 'CREATE TRIGGER t_' . $table_name . ' FOR ' . $table_name . "\n";					$line .= "BEFORE INSERT\nAS\nBEGIN\n";					$line .= "\tNEW.{$generator} = GEN_ID({$table_name}_gen, 1);\nEND;;\n\n";				}			break;			case 'oracle':				if ($generator !== false)				{					$line .= "\nCREATE SEQUENCE {$table_name}_seq\n/\n\n";					$line .= "CREATE OR REPLACE TRIGGER t_{$table_name}\n";					$line .= "BEFORE INSERT ON {$table_name}\n";					$line .= "FOR EACH ROW WHEN (\n";					$line .= "\tnew.{$generator} IS NULL OR new.{$generator} = 0\n";					$line .= ")\nBEGIN\n";					$line .= "\tSELECT {$table_name}_seq.nextval\n";					$line .= "\tINTO :new.{$generator}\n";					$line .= "\tFROM dual;\nEND;\n/\n\n";				}			break;		}		fwrite($fp, $line . "\n");	}	$line = '';	// Write custom function at the end for some db's	switch ($dbms)	{		case 'mssql':			// No need to do this, no transaction support for schema changes			//$line = "\nCOMMIT\nGO\n\n";		break;		case 'sqlite':			$line = "\nCOMMIT;";		break;		case 'postgres':			$line = "\nCOMMIT;";		break;	}	fwrite($fp, $line);	fclose($fp);}/*** Define the basic structure* The format:*		array('{TABLE_NAME}' => {TABLE_DATA})*		{TABLE_DATA}:*			COLUMNS = array({column_name} = array({column_type}, {default}, {auto_increment}))*			PRIMARY_KEY = {column_name(s)}*			KEYS = array({key_name} = array({key_type}, {column_name(s)})),**	Column Types:*	INT:x		=> SIGNED int(x)*	BINT		=> BIGINT*	UINT		=> mediumint(8) UNSIGNED*	UINT:x		=> int(x) UNSIGNED*	TINT:x		=> tinyint(x)*	USINT		=> smallint(4) UNSIGNED (for _order columns)*	BOOL		=> tinyint(1) UNSIGNED*	VCHAR		=> varchar(255)*	CHAR:x		=> char(x)*	XSTEXT_UNI	=> text for storing 100 characters (topic_title for example)*	STEXT_UNI	=> text for storing 255 characters (normal input field with a max of 255 single-byte chars) - same as VCHAR_UNI*	TEXT_UNI	=> text for storing 3000 characters (short text, descriptions, comments, etc.)*	MTEXT_UNI	=> mediumtext (post text, large text)*	VCHAR:x		=> varchar(x)*	TIMESTAMP	=> int(11) UNSIGNED*	DECIMAL		=> decimal number (5,2)*	DECIMAL:	=> decimal number (x,2)*	PDECIMAL	=> precision decimal number (6,3)*	PDECIMAL:	=> precision decimal number (x,3)*	VCHAR_UNI	=> varchar(255) BINARY*	VCHAR_CI	=> varchar_ci for postgresql, others VCHAR*/function get_schema_struct(){	$schema_data = array();	$schema_data['phpbb_attachments'] = array(		'COLUMNS'		=> array(			'attach_id'			=> array('UINT', NULL, 'auto_increment'),			'post_msg_id'		=> array('UINT', 0),			'topic_id'			=> array('UINT', 0),			'in_message'		=> array('BOOL', 0),			'poster_id'			=> array('UINT', 0),			'is_orphan'			=> array('BOOL', 1),			'physical_filename'	=> array('VCHAR', ''),			'real_filename'		=> array('VCHAR', ''),			'download_count'	=> array('UINT', 0),			'attach_comment'	=> array('TEXT_UNI', ''),			'extension'			=> array('VCHAR:100', ''),			'mimetype'			=> array('VCHAR:100', ''),			'filesize'			=> array('UINT:20', 0),			'filetime'			=> array('TIMESTAMP', 0),			'thumbnail'			=> array('BOOL', 0),		),		'PRIMARY_KEY'	=> 'attach_id',		'KEYS'			=> array(			'filetime'			=> array('INDEX', 'filetime'),			'post_msg_id'		=> array('INDEX', 'post_msg_id'),			'topic_id'			=> array('INDEX', 'topic_id'),			'poster_id'			=> array('INDEX', 'poster_id'),			'is_orphan'			=> array('INDEX', 'is_orphan'),		),	);	$schema_data['phpbb_acl_groups'] = array(		'COLUMNS'		=> array(			'group_id'			=> array('UINT', 0),			'forum_id'			=> array('UINT', 0),			'auth_option_id'	=> array('UINT', 0),			'auth_role_id'		=> array('UINT', 0),			'auth_setting'		=> array('TINT:2', 0),		),		'KEYS'			=> array(			'group_id'		=> array('INDEX', 'group_id'),			'auth_opt_id'	=> array('INDEX', 'auth_option_id'),			'auth_role_id'	=> array('INDEX', 'auth_role_id'),		),	);	$schema_data['phpbb_acl_options'] = array(		'COLUMNS'		=> array(			'auth_option_id'	=> array('UINT', NULL, 'auto_increment'),			'auth_option'		=> array('VCHAR:50', ''),			'is_global'			=> array('BOOL', 0),			'is_local'			=> array('BOOL', 0),			'founder_only'		=> array('BOOL', 0),		),		'PRIMARY_KEY'	=> 'auth_option_id',		'KEYS'			=> array(			'auth_option'		=> array('UNIQUE', 'auth_option'),		),	);	$schema_data['phpbb_acl_roles'] = array(		'COLUMNS'		=> array(			'role_id'			=> array('UINT', NULL, 'auto_increment'),			'role_name'			=> array('VCHAR_UNI', ''),			'role_description'	=> array('TEXT_UNI', ''),			'role_type'			=> array('VCHAR:10', ''),			'role_order'		=> array('USINT', 0),		),		'PRIMARY_KEY'	=> 'role_id',		'KEYS'			=> array(			'role_type'			=> array('INDEX', 'role_type'),			'role_order'		=> array('INDEX', 'role_order'),		),	);	$schema_data['phpbb_acl_roles_data'] = array(		'COLUMNS'		=> array(			'role_id'			=> array('UINT', 0),			'auth_option_id'	=> array('UINT', 0),			'auth_setting'		=> array('TINT:2', 0),		),		'PRIMARY_KEY'	=> array('role_id', 'auth_option_id'),		'KEYS'			=> array(			'ath_op_id'			=> array('INDEX', 'auth_option_id'),		),	);	$schema_data['phpbb_acl_users'] = array(		'COLUMNS'		=> array(			'user_id'			=> array('UINT', 0),			'forum_id'			=> array('UINT', 0),			'auth_option_id'	=> array('UINT', 0),			'auth_role_id'		=> array('UINT', 0),			'auth_setting'		=> array('TINT:2', 0),		),		'KEYS'			=> array(			'user_id'			=> array('INDEX', 'user_id'),			'auth_option_id'	=> array('INDEX', 'auth_option_id'),			'auth_role_id'		=> array('INDEX', 'auth_role_id'),		),	);	$schema_data['phpbb_banlist'] = array(		'COLUMNS'		=> array(			'ban_id'			=> array('UINT', NULL, 'auto_increment'),			'ban_userid'		=> array('UINT', 0),			'ban_ip'			=> array('VCHAR:40', ''),			'ban_email'			=> array('VCHAR_UNI:100', ''),			'ban_start'			=> array('TIMESTAMP', 0),			'ban_end'			=> array('TIMESTAMP', 0),			'ban_exclude'		=> array('BOOL', 0),			'ban_reason'		=> array('VCHAR_UNI', ''),			'ban_give_reason'	=> array('VCHAR_UNI', ''),		),		'PRIMARY_KEY'			=> 'ban_id',		'KEYS'			=> array(			'ban_end'			=> array('INDEX', 'ban_end'),			'ban_user'			=> array('INDEX', array('ban_userid', 'ban_exclude')),			'ban_email'			=> array('INDEX', array('ban_email', 'ban_exclude')),			'ban_ip'			=> array('INDEX', array('ban_ip', 'ban_exclude')),		),	);	$schema_data['phpbb_bbcodes'] = array(		'COLUMNS'		=> array(			'bbcode_id'				=> array('USINT', 0),			'bbcode_tag'			=> array('VCHAR:16', ''),			'bbcode_helpline'		=> array('VCHAR_UNI', ''),			'display_on_posting'	=> array('BOOL', 0),			'bbcode_match'			=> array('TEXT_UNI', ''),			'bbcode_tpl'			=> array('MTEXT_UNI', ''),			'first_pass_match'		=> array('MTEXT_UNI', ''),			'first_pass_replace'	=> array('MTEXT_UNI', ''),			'second_pass_match'		=> array('MTEXT_UNI', ''),			'second_pass_replace'	=> array('MTEXT_UNI', ''),		),		'PRIMARY_KEY'	=> 'bbcode_id',		'KEYS'			=> array(			'display_on_post'		=> array('INDEX', 'display_on_posting'),		),	);	$schema_data['phpbb_bookmarks'] = array(		'COLUMNS'		=> array(			'topic_id'			=> array('UINT', 0),			'user_id'			=> array('UINT', 0),		),		'PRIMARY_KEY'			=> array('topic_id', 'user_id'),	);	$schema_data['phpbb_bots'] = array(		'COLUMNS'		=> array(			'bot_id'			=> array('UINT', NULL, 'auto_increment'),			'bot_active'		=> array('BOOL', 1),			'bot_name'			=> array('STEXT_UNI', ''),			'user_id'			=> array('UINT', 0),			'bot_agent'			=> array('VCHAR', ''),			'bot_ip'			=> array('VCHAR', ''),		),		'PRIMARY_KEY'	=> 'bot_id',		'KEYS'			=> array(			'bot_active'		=> array('INDEX', 'bot_active'),		),	);	$schema_data['phpbb_config'] = array(		'COLUMNS'		=> array(			'config_name'		=> array('VCHAR', ''),			'config_value'		=> array('VCHAR_UNI', ''),			'is_dynamic'		=> array('BOOL', 0),		),		'PRIMARY_KEY'	=> 'config_name',		'KEYS'			=> array(			'is_dynamic'		=> array('INDEX', 'is_dynamic'),		),	);	$schema_data['phpbb_confirm'] = array(		'COLUMNS'		=> array(			'confirm_id'		=> array('CHAR:32', ''),			'session_id'		=> array('CHAR:32', ''),			'confirm_type'		=> array('TINT:3', 0),			'code'				=> array('VCHAR:8', ''),			'seed'				=> array('UINT:10', 0),			'attempts'			=> array('UINT', 0),		),		'PRIMARY_KEY'	=> array('session_id', 'confirm_id'),		'KEYS'			=> array(			'confirm_type'		=> array('INDEX', 'confirm_type'),		),	);	$schema_data['phpbb_disallow'] = array(		'COLUMNS'		=> array(			'disallow_id'		=> array('UINT', NULL, 'auto_increment'),			'disallow_username'	=> array('VCHAR_UNI:255', ''),		),		'PRIMARY_KEY'	=> 'disallow_id',	);	$schema_data['phpbb_drafts'] = array(		'COLUMNS'		=> array(			'draft_id'			=> array('UINT', NULL, 'auto_increment'),			'user_id'			=> array('UINT', 0),			'topic_id'			=> array('UINT', 0),			'forum_id'			=> array('UINT', 0),			'save_time'			=> array('TIMESTAMP', 0),			'draft_subject'		=> array('STEXT_UNI', ''),			'draft_message'		=> array('MTEXT_UNI', ''),		),		'PRIMARY_KEY'	=> 'draft_id',		'KEYS'			=> array(			'save_time'			=> array('INDEX', 'save_time'),		),	);	$schema_data['phpbb_extensions'] = array(		'COLUMNS'		=> array(			'extension_id'		=> array('UINT', NULL, 'auto_increment'),			'group_id'			=> array('UINT', 0),			'extension'			=> array('VCHAR:100', ''),		),		'PRIMARY_KEY'	=> 'extension_id',	);	$schema_data['phpbb_extension_groups'] = array(		'COLUMNS'		=> array(			'group_id'			=> array('UINT', NULL, 'auto_increment'),			'group_name'		=> array('VCHAR_UNI', ''),			'cat_id'			=> array('TINT:2', 0),			'allow_group'		=> array('BOOL', 0),			'download_mode'		=> array('BOOL', 1),			'upload_icon'		=> array('VCHAR', ''),			'max_filesize'		=> array('UINT:20', 0),			'allowed_forums'	=> array('TEXT', ''),			'allow_in_pm'		=> array('BOOL', 0),		),		'PRIMARY_KEY'	=> 'group_id',	);	$schema_data['phpbb_forums'] = array(		'COLUMNS'		=> array(			'forum_id'				=> array('UINT', NULL, 'auto_increment'),			'parent_id'				=> array('UINT', 0),			'left_id'				=> array('UINT', 0),			'right_id'				=> array('UINT', 0),			'forum_parents'			=> array('MTEXT', ''),			'forum_name'			=> array('STEXT_UNI', ''),			'forum_desc'			=> array('TEXT_UNI', ''),			'forum_desc_bitfield'	=> array('VCHAR:255', ''),			'forum_desc_options'	=> array('UINT:11', 7),			'forum_desc_uid'		=> array('VCHAR:8', ''),			'forum_link'			=> array('VCHAR_UNI', ''),			'forum_password'		=> array('VCHAR_UNI:40', ''),			'forum_style'			=> array('UINT', 0),			'forum_image'			=> array('VCHAR', ''),			'forum_rules'			=> array('TEXT_UNI', ''),			'forum_rules_link'		=> array('VCHAR_UNI', ''),			'forum_rules_bitfield'	=> array('VCHAR:255', ''),			'forum_rules_options'	=> array('UINT:11', 7),			'forum_rules_uid'		=> array('VCHAR:8', ''),			'forum_topics_per_page'	=> array('TINT:4', 0),			'forum_type'			=> array('TINT:4', 0),			'forum_status'			=> array('TINT:4', 0),			'forum_posts'			=> array('UINT', 0),			'forum_topics'			=> array('UINT', 0),			'forum_topics_real'		=> array('UINT', 0),			'forum_last_post_id'	=> array('UINT', 0),			'forum_last_poster_id'	=> array('UINT', 0),			'forum_last_post_subject' => array('STEXT_UNI', ''),			'forum_last_post_time'	=> array('TIMESTAMP', 0),			'forum_last_poster_name'=> array('VCHAR_UNI', ''),			'forum_last_poster_colour'=> array('VCHAR:6', ''),			'forum_flags'			=> array('TINT:4', 32),			'forum_options'			=> array('UINT:20', 0),			'display_subforum_list'	=> array('BOOL', 1),			'display_on_index'		=> array('BOOL', 1),			'enable_indexing'		=> array('BOOL', 1),			'enable_icons'			=> array('BOOL', 1),			'enable_prune'			=> array('BOOL', 0),			'prune_next'			=> array('TIMESTAMP', 0),			'prune_days'			=> array('UINT', 0),			'prune_viewed'			=> array('UINT', 0),			'prune_freq'			=> array('UINT', 0),		),		'PRIMARY_KEY'	=> 'forum_id',		'KEYS'			=> array(			'left_right_id'			=> array('INDEX', array('left_id', 'right_id')),			'forum_lastpost_id'		=> array('INDEX', 'forum_last_post_id'),		),	);	$schema_data['phpbb_forums_access'] = array(		'COLUMNS'		=> array(			'forum_id'				=> array('UINT', 0),			'user_id'				=> array('UINT', 0),			'session_id'			=> array('CHAR:32', ''),		),		'PRIMARY_KEY'	=> array('forum_id', 'user_id', 'session_id'),	);	$schema_data['phpbb_forums_track'] = array(		'COLUMNS'		=> array(			'user_id'				=> array('UINT', 0),			'forum_id'				=> array('UINT', 0),			'mark_time'				=> array('TIMESTAMP', 0),		),		'PRIMARY_KEY'	=> array('user_id', 'forum_id'),	);	$schema_data['phpbb_forums_watch'] = array(		'COLUMNS'		=> array(			'forum_id'				=> array('UINT', 0),			'user_id'				=> array('UINT', 0),			'notify_status'			=> array('BOOL', 0),		),		'KEYS'			=> array(			'forum_id'				=> array('INDEX', 'forum_id'),			'user_id'				=> array('INDEX', 'user_id'),			'notify_stat'			=> array('INDEX', 'notify_status'),		),	);	$schema_data['phpbb_groups'] = array(		'COLUMNS'		=> array(			'group_id'				=> array('UINT', NULL, 'auto_increment'),			'group_type'			=> array('TINT:4', 1),			'group_founder_manage'	=> array('BOOL', 0),			'group_skip_auth'		=> array('BOOL', 0),			'group_name'			=> array('VCHAR_CI', ''),			'group_desc'			=> array('TEXT_UNI', ''),			'group_desc_bitfield'	=> array('VCHAR:255', ''),			'group_desc_options'	=> array('UINT:11', 7),			'group_desc_uid'		=> array('VCHAR:8', ''),			'group_display'			=> array('BOOL', 0),			'group_avatar'			=> array('VCHAR', ''),			'group_avatar_type'		=> array('TINT:2', 0),			'group_avatar_width'	=> array('USINT', 0),			'group_avatar_height'	=> array('USINT', 0),			'group_rank'			=> array('UINT', 0),			'group_colour'			=> array('VCHAR:6', ''),			'group_sig_chars'		=> array('UINT', 0),			'group_receive_pm'		=> array('BOOL', 0),			'group_message_limit'	=> array('UINT', 0),			'group_max_recipients'	=> array('UINT', 0),			'group_legend'			=> array('BOOL', 1),		),		'PRIMARY_KEY'	=> 'group_id',		'KEYS'			=> array(			'group_legend_name'		=> array('INDEX', array('group_legend', 'group_name')),		),	);	$schema_data['phpbb_icons'] = array(		'COLUMNS'		=> array(			'icons_id'				=> array('UINT', NULL, 'auto_increment'),			'icons_url'				=> array('VCHAR', ''),			'icons_width'			=> array('TINT:4', 0),			'icons_height'			=> array('TINT:4', 0),			'icons_order'			=> array('UINT', 0),			'display_on_posting'	=> array('BOOL', 1),		),		'PRIMARY_KEY'	=> 'icons_id',		'KEYS'			=> array(			'display_on_posting'	=> array('INDEX', 'display_on_posting'),		),	);	$schema_data['phpbb_lang'] = array(		'COLUMNS'		=> array(			'lang_id'				=> array('TINT:4', NULL, 'auto_increment'),			'lang_iso'				=> array('VCHAR:30', ''),			'lang_dir'				=> array('VCHAR:30', ''),			'lang_english_name'		=> array('VCHAR_UNI:100', ''),			'lang_local_name'		=> array('VCHAR_UNI:255', ''),			'lang_author'			=> array('VCHAR_UNI:255', ''),		),		'PRIMARY_KEY'	=> 'lang_id',		'KEYS'			=> array(			'lang_iso'				=> array('INDEX', 'lang_iso'),		),	);	$schema_data['phpbb_log'] = array(		'COLUMNS'		=> array(			'log_id'				=> array('UINT', NULL, 'auto_increment'),			'log_type'				=> array('TINT:4', 0),			'user_id'				=> array('UINT', 0),			'forum_id'				=> array('UINT', 0),			'topic_id'				=> array('UINT', 0),			'reportee_id'			=> array('UINT', 0),			'log_ip'				=> array('VCHAR:40', ''),			'log_time'				=> array('TIMESTAMP', 0),			'log_operation'			=> array('TEXT_UNI', ''),			'log_data'				=> array('MTEXT_UNI', ''),		),		'PRIMARY_KEY'	=> 'log_id',		'KEYS'			=> array(			'log_type'				=> array('INDEX', 'log_type'),			'forum_id'				=> array('INDEX', 'forum_id'),			'topic_id'				=> array('INDEX', 'topic_id'),			'reportee_id'			=> array('INDEX', 'reportee_id'),			'user_id'				=> array('INDEX', 'user_id'),		),	);	$schema_data['phpbb_login_attempts'] = array(		'COLUMNS'		=> array(			'attempt_ip'			=> array('VCHAR:40', ''),			'attempt_browser'		=> array('VCHAR:150', ''),			'attempt_forwarded_for'	=> array('VCHAR:255', ''),			'attempt_time'			=> array('TIMESTAMP', 0),			'user_id'				=> array('UINT', 0),			'username'				=> array('VCHAR_UNI:255', 0),			'username_clean'		=> array('VCHAR_CI', 0),		),		'KEYS'			=> array(			'att_ip'				=> array('INDEX', array('attempt_ip', 'attempt_time')),			'att_for'		=> array('INDEX', array('attempt_forwarded_for', 'attempt_time')),			'att_time'				=> array('INDEX', array('attempt_time')),			'user_id'					=> array('INDEX', 'user_id'),		),	);	$schema_data['phpbb_moderator_cache'] = array(		'COLUMNS'		=> array(			'forum_id'				=> array('UINT', 0),			'user_id'				=> array('UINT', 0),			'username'				=> array('VCHAR_UNI:255', ''),			'group_id'				=> array('UINT', 0),			'group_name'			=> array('VCHAR_UNI', ''),			'display_on_index'		=> array('BOOL', 1),		),		'KEYS'			=> array(			'disp_idx'				=> array('INDEX', 'display_on_index'),			'forum_id'				=> array('INDEX', 'forum_id'),		),	);	$schema_data['phpbb_modules'] = array(		'COLUMNS'		=> array(			'module_id'				=> array('UINT', NULL, 'auto_increment'),			'module_enabled'		=> array('BOOL', 1),			'module_display'		=> array('BOOL', 1),			'module_basename'		=> array('VCHAR', ''),			'module_class'			=> array('VCHAR:10', ''),			'parent_id'				=> array('UINT', 0),			'left_id'				=> array('UINT', 0),			'right_id'				=> array('UINT', 0),			'module_langname'		=> array('VCHAR', ''),			'module_mode'			=> array('VCHAR', ''),			'module_auth'			=> array('VCHAR', ''),		),		'PRIMARY_KEY'	=> 'module_id',		'KEYS'			=> array(			'left_right_id'			=> array('INDEX', array('left_id', 'right_id')),			'module_enabled'		=> array('INDEX', 'module_enabled'),			'class_left_id'			=> array('INDEX', array('module_class', 'left_id')),		),	);	$schema_data['phpbb_poll_options'] = array(		'COLUMNS'		=> array(			'poll_option_id'		=> array('TINT:4', 0),			'topic_id'				=> array('UINT', 0),			'poll_option_text'		=> array('TEXT_UNI', ''),			'poll_option_total'		=> array('UINT', 0),		),		'KEYS'			=> array(			'poll_opt_id'			=> array('INDEX', 'poll_option_id'),			'topic_id'				=> array('INDEX', 'topic_id'),		),	);	$schema_data['phpbb_poll_votes'] = array(		'COLUMNS'		=> array(			'topic_id'				=> array('UINT', 0),			'poll_option_id'		=> array('TINT:4', 0),			'vote_user_id'			=> array('UINT', 0),			'vote_user_ip'			=> array('VCHAR:40', ''),		),		'KEYS'			=> array(			'topic_id'				=> array('INDEX', 'topic_id'),			'vote_user_id'			=> array('INDEX', 'vote_user_id'),			'vote_user_ip'			=> array('INDEX', 'vote_user_ip'),		),	);	$schema_data['phpbb_posts'] = array(		'COLUMNS'		=> array(			'post_id'				=> array('UINT', NULL, 'auto_increment'),			'topic_id'				=> array('UINT', 0),			'forum_id'				=> array('UINT', 0),			'poster_id'				=> array('UINT', 0),			'icon_id'				=> array('UINT', 0),			'poster_ip'				=> array('VCHAR:40', ''),			'post_time'				=> array('TIMESTAMP', 0),			'post_approved'			=> array('BOOL', 1),			'post_reported'			=> array('BOOL', 0),			'enable_bbcode'			=> array('BOOL', 1),			'enable_smilies'		=> array('BOOL', 1),			'enable_magic_url'		=> array('BOOL', 1),			'enable_sig'			=> array('BOOL', 1),			'post_username'			=> array('VCHAR_UNI:255', ''),			'post_subject'			=> array('STEXT_UNI', '', 'true_sort'),			'post_text'				=> array('MTEXT_UNI', ''),			'post_checksum'			=> array('VCHAR:32', ''),			'post_attachment'		=> array('BOOL', 0),			'bbcode_bitfield'		=> array('VCHAR:255', ''),			'bbcode_uid'			=> array('VCHAR:8', ''),			'post_postcount'		=> array('BOOL', 1),			'post_edit_time'		=> array('TIMESTAMP', 0),			'post_edit_reason'		=> array('STEXT_UNI', ''),			'post_edit_user'		=> array('UINT', 0),			'post_edit_count'		=> array('USINT', 0),			'post_edit_locked'		=> array('BOOL', 0),		),		'PRIMARY_KEY'	=> 'post_id',		'KEYS'			=> array(			'forum_id'				=> array('INDEX', 'forum_id'),			'topic_id'				=> array('INDEX', 'topic_id'),			'poster_ip'				=> array('INDEX', 'poster_ip'),			'poster_id'				=> array('INDEX', 'poster_id'),			'post_approved'			=> array('INDEX', 'post_approved'),			'post_username'			=> array('INDEX', 'post_username'),			'tid_post_time'			=> array('INDEX', array('topic_id', 'post_time')),		),	);	$schema_data['phpbb_privmsgs'] = array(		'COLUMNS'		=> array(			'msg_id'				=> array('UINT', NULL, 'auto_increment'),			'root_level'			=> array('UINT', 0),			'author_id'				=> array('UINT', 0),			'icon_id'				=> array('UINT', 0),			'author_ip'				=> array('VCHAR:40', ''),			'message_time'			=> array('TIMESTAMP', 0),			'enable_bbcode'			=> array('BOOL', 1),			'enable_smilies'		=> array('BOOL', 1),			'enable_magic_url'		=> array('BOOL', 1),			'enable_sig'			=> array('BOOL', 1),			'message_subject'		=> array('STEXT_UNI', ''),			'message_text'			=> array('MTEXT_UNI', ''),			'message_edit_reason'	=> array('STEXT_UNI', ''),			'message_edit_user'		=> array('UINT', 0),			'message_attachment'	=> array('BOOL', 0),			'bbcode_bitfield'		=> array('VCHAR:255', ''),			'bbcode_uid'			=> array('VCHAR:8', ''),			'message_edit_time'		=> array('TIMESTAMP', 0),			'message_edit_count'	=> array('USINT', 0),			'to_address'			=> array('TEXT_UNI', ''),			'bcc_address'			=> array('TEXT_UNI', ''),			'message_reported'		=> array('BOOL', 0),		),		'PRIMARY_KEY'	=> 'msg_id',		'KEYS'			=> array(			'author_ip'				=> array('INDEX', 'author_ip'),			'message_time'			=> array('INDEX', 'message_time'),			'author_id'				=> array('INDEX', 'author_id'),			'root_level'			=> array('INDEX', 'root_level'),		),	);	$schema_data['phpbb_privmsgs_folder'] = array(		'COLUMNS'		=> array(			'folder_id'				=> array('UINT', NULL, 'auto_increment'),			'user_id'				=> array('UINT', 0),			'folder_name'			=> array('VCHAR_UNI', ''),			'pm_count'				=> array('UINT', 0),		),		'PRIMARY_KEY'	=> 'folder_id',		'KEYS'			=> array(			'user_id'				=> array('INDEX', 'user_id'),		),	);	$schema_data['phpbb_privmsgs_rules'] = array(		'COLUMNS'		=> array(			'rule_id'				=> array('UINT', NULL, 'auto_increment'),			'user_id'				=> array('UINT', 0),			'rule_check'			=> array('UINT', 0),			'rule_connection'		=> array('UINT', 0),			'rule_string'			=> array('VCHAR_UNI', ''),			'rule_user_id'			=> array('UINT', 0),			'rule_group_id'			=> array('UINT', 0),			'rule_action'			=> array('UINT', 0),			'rule_folder_id'		=> array('INT:11', 0),		),		'PRIMARY_KEY'	=> 'rule_id',		'KEYS'			=> array(			'user_id'				=> array('INDEX', 'user_id'),		),	);	$schema_data['phpbb_privmsgs_to'] = array(		'COLUMNS'		=> array(			'msg_id'				=> array('UINT', 0),			'user_id'				=> array('UINT', 0),			'author_id'				=> array('UINT', 0),			'pm_deleted'			=> array('BOOL', 0),			'pm_new'				=> array('BOOL', 1),			'pm_unread'				=> array('BOOL', 1),			'pm_replied'			=> array('BOOL', 0),			'pm_marked'				=> array('BOOL', 0),			'pm_forwarded'			=> array('BOOL', 0),			'folder_id'				=> array('INT:11', 0),		),		'KEYS'			=> array(			'msg_id'				=> array('INDEX', 'msg_id'),			'author_id'				=> array('INDEX', 'author_id'),			'usr_flder_id'			=> array('INDEX', array('user_id', 'folder_id')),		),	);	$schema_data['phpbb_profile_fields'] = array(		'COLUMNS'		=> array(			'field_id'				=> array('UINT', NULL, 'auto_increment'),			'field_name'			=> array('VCHAR_UNI', ''),			'field_type'			=> array('TINT:4', 0),			'field_ident'			=> array('VCHAR:20', ''),			'field_length'			=> array('VCHAR:20', ''),			'field_minlen'			=> array('VCHAR', ''),			'field_maxlen'			=> array('VCHAR', ''),			'field_novalue'			=> array('VCHAR_UNI', ''),			'field_default_value'	=> array('VCHAR_UNI', ''),			'field_validation'		=> array('VCHAR_UNI:20', ''),			'field_required'		=> array('BOOL', 0),			'field_show_on_reg'		=> array('BOOL', 0),			'field_show_on_vt'		=> array('BOOL', 0),			'field_show_profile'	=> array('BOOL', 0),			'field_hide'			=> array('BOOL', 0),			'field_no_view'			=> array('BOOL', 0),			'field_active'			=> array('BOOL', 0),			'field_order'			=> array('UINT', 0),		),		'PRIMARY_KEY'	=> 'field_id',		'KEYS'			=> array(			'fld_type'			=> array('INDEX', 'field_type'),			'fld_ordr'			=> array('INDEX', 'field_order'),		),	);	$schema_data['phpbb_profile_fields_data'] = array(		'COLUMNS'		=> array(			'user_id'				=> array('UINT', 0),		),		'PRIMARY_KEY'	=> 'user_id',	);	$schema_data['phpbb_profile_fields_lang'] = array(		'COLUMNS'		=> array(			'field_id'				=> array('UINT', 0),			'lang_id'				=> array('UINT', 0),			'option_id'				=> array('UINT', 0),			'field_type'			=> array('TINT:4', 0),			'lang_value'			=> array('VCHAR_UNI', ''),		),		'PRIMARY_KEY'	=> array('field_id', 'lang_id', 'option_id'),	);	$schema_data['phpbb_profile_lang'] = array(		'COLUMNS'		=> array(			'field_id'				=> array('UINT', 0),			'lang_id'				=> array('UINT', 0),			'lang_name'				=> array('VCHAR_UNI', ''),			'lang_explain'			=> array('TEXT_UNI', ''),			'lang_default_value'	=> array('VCHAR_UNI', ''),		),		'PRIMARY_KEY'	=> array('field_id', 'lang_id'),	);	$schema_data['phpbb_ranks'] = array(		'COLUMNS'		=> array(			'rank_id'				=> array('UINT', NULL, 'auto_increment'),			'rank_title'			=> array('VCHAR_UNI', ''),			'rank_min'				=> array('UINT', 0),			'rank_special'			=> array('BOOL', 0),			'rank_image'			=> array('VCHAR', ''),		),		'PRIMARY_KEY'	=> 'rank_id',	);	$schema_data['phpbb_reports'] = array(		'COLUMNS'		=> array(			'report_id'				=> array('UINT', NULL, 'auto_increment'),			'reason_id'				=> array('USINT', 0),			'post_id'				=> array('UINT', 0),			'pm_id'					=> array('UINT', 0),			'user_id'				=> array('UINT', 0),			'user_notify'			=> array('BOOL', 0),			'report_closed'			=> array('BOOL', 0),			'report_time'			=> array('TIMESTAMP', 0),			'report_text'			=> array('MTEXT_UNI', ''),		),		'PRIMARY_KEY'	=> 'report_id',		'KEYS'			=> array(			'post_id'			=> array('INDEX', 'post_id'),			'pm_id'				=> array('INDEX', 'pm_id'),		),	);	$schema_data['phpbb_reports_reasons'] = array(		'COLUMNS'		=> array(			'reason_id'				=> array('USINT', NULL, 'auto_increment'),			'reason_title'			=> array('VCHAR_UNI', ''),			'reason_description'	=> array('MTEXT_UNI', ''),			'reason_order'			=> array('USINT', 0),		),		'PRIMARY_KEY'	=> 'reason_id',	);	$schema_data['phpbb_search_results'] = array(		'COLUMNS'		=> array(			'search_key'			=> array('VCHAR:32', ''),			'search_time'			=> array('TIMESTAMP', 0),			'search_keywords'		=> array('MTEXT_UNI', ''),			'search_authors'		=> array('MTEXT', ''),		),		'PRIMARY_KEY'	=> 'search_key',	);	$schema_data['phpbb_search_wordlist'] = array(		'COLUMNS'		=> array(			'word_id'			=> array('UINT', NULL, 'auto_increment'),			'word_text'			=> array('VCHAR_UNI', ''),			'word_common'		=> array('BOOL', 0),			'word_count'		=> array('UINT', 0),		),		'PRIMARY_KEY'	=> 'word_id',		'KEYS'			=> array(			'wrd_txt'			=> array('UNIQUE', 'word_text'),			'wrd_cnt'			=> array('INDEX', 'word_count'),		),	);	$schema_data['phpbb_search_wordmatch'] = array(		'COLUMNS'		=> array(			'post_id'			=> array('UINT', 0),			'word_id'			=> array('UINT', 0),			'title_match'		=> array('BOOL', 0),		),		'KEYS'			=> array(			'unq_mtch'			=> array('UNIQUE', array('word_id', 'post_id', 'title_match')),			'word_id'			=> array('INDEX', 'word_id'),			'post_id'			=> array('INDEX', 'post_id'),		),	);	$schema_data['phpbb_sessions'] = array(		'COLUMNS'		=> array(			'session_id'			=> array('CHAR:32', ''),			'session_user_id'		=> array('UINT', 0),			'session_forum_id'		=> array('UINT', 0),			'session_last_visit'	=> array('TIMESTAMP', 0),			'session_start'			=> array('TIMESTAMP', 0),			'session_time'			=> array('TIMESTAMP', 0),			'session_ip'			=> array('VCHAR:40', ''),			'session_browser'		=> array('VCHAR:150', ''),			'session_forwarded_for'	=> array('VCHAR:255', ''),			'session_page'			=> array('VCHAR_UNI', ''),			'session_viewonline'	=> array('BOOL', 1),			'session_autologin'		=> array('BOOL', 0),			'session_admin'			=> array('BOOL', 0),		),		'PRIMARY_KEY'	=> 'session_id',		'KEYS'			=> array(			'session_time'		=> array('INDEX', 'session_time'),			'session_user_id'	=> array('INDEX', 'session_user_id'),			'session_fid'		=> array('INDEX', 'session_forum_id'),		),	);	$schema_data['phpbb_sessions_keys'] = array(		'COLUMNS'		=> array(			'key_id'			=> array('CHAR:32', ''),			'user_id'			=> array('UINT', 0),			'last_ip'			=> array('VCHAR:40', ''),			'last_login'		=> array('TIMESTAMP', 0),		),		'PRIMARY_KEY'	=> array('key_id', 'user_id'),		'KEYS'			=> array(			'last_login'		=> array('INDEX', 'last_login'),		),	);	$schema_data['phpbb_sitelist'] = array(		'COLUMNS'		=> array(			'site_id'		=> array('UINT', NULL, 'auto_increment'),			'site_ip'		=> array('VCHAR:40', ''),			'site_hostname'	=> array('VCHAR', ''),			'ip_exclude'	=> array('BOOL', 0),		),		'PRIMARY_KEY'		=> 'site_id',	);	$schema_data['phpbb_smilies'] = array(		'COLUMNS'		=> array(			'smiley_id'			=> array('UINT', NULL, 'auto_increment'),			// We may want to set 'code' to VCHAR:50 or check if unicode support is possible... at the moment only ASCII characters are allowed.			'code'				=> array('VCHAR_UNI:50', ''),			'emotion'			=> array('VCHAR_UNI:50', ''),			'smiley_url'		=> array('VCHAR:50', ''),			'smiley_width'		=> array('USINT', 0),			'smiley_height'		=> array('USINT', 0),			'smiley_order'		=> array('UINT', 0),			'display_on_posting'=> array('BOOL', 1),		),		'PRIMARY_KEY'	=> 'smiley_id',		'KEYS'			=> array(			'display_on_post'		=> array('INDEX', 'display_on_posting'),		),	);	$schema_data['phpbb_styles'] = array(		'COLUMNS'		=> array(			'style_id'				=> array('UINT', NULL, 'auto_increment'),			'style_name'			=> array('VCHAR_UNI:255', ''),			'style_copyright'		=> array('VCHAR_UNI', ''),			'style_active'			=> array('BOOL', 1),			'template_id'			=> array('UINT', 0),			'theme_id'				=> array('UINT', 0),			'imageset_id'			=> array('UINT', 0),		),		'PRIMARY_KEY'	=> 'style_id',		'KEYS'			=> array(			'style_name'		=> array('UNIQUE', 'style_name'),			'template_id'		=> array('INDEX', 'template_id'),			'theme_id'			=> array('INDEX', 'theme_id'),			'imageset_id'		=> array('INDEX', 'imageset_id'),		),	);	$schema_data['phpbb_styles_template'] = array(		'COLUMNS'		=> array(			'template_id'			=> array('UINT', NULL, 'auto_increment'),			'template_name'			=> array('VCHAR_UNI:255', ''),			'template_copyright'	=> array('VCHAR_UNI', ''),			'template_path'			=> array('VCHAR:100', ''),			'bbcode_bitfield'		=> array('VCHAR:255', 'kNg='),			'template_storedb'		=> array('BOOL', 0),			'template_inherits_id'		=> array('UINT:4', 0),			'template_inherit_path'		=> array('VCHAR', ''),		),		'PRIMARY_KEY'	=> 'template_id',		'KEYS'			=> array(			'tmplte_nm'				=> array('UNIQUE', 'template_name'),		),	);	$schema_data['phpbb_styles_template_data'] = array(		'COLUMNS'		=> array(			'template_id'			=> array('UINT', 0),			'template_filename'		=> array('VCHAR:100', ''),			'template_included'		=> array('TEXT', ''),			'template_mtime'		=> array('TIMESTAMP', 0),			'template_data'			=> array('MTEXT_UNI', ''),		),		'KEYS'			=> array(			'tid'					=> array('INDEX', 'template_id'),			'tfn'					=> array('INDEX', 'template_filename'),		),	);	$schema_data['phpbb_styles_theme'] = array(		'COLUMNS'		=> array(			'theme_id'				=> array('UINT', NULL, 'auto_increment'),			'theme_name'			=> array('VCHAR_UNI:255', ''),			'theme_copyright'		=> array('VCHAR_UNI', ''),			'theme_path'			=> array('VCHAR:100', ''),			'theme_storedb'			=> array('BOOL', 0),			'theme_mtime'			=> array('TIMESTAMP', 0),			'theme_data'			=> array('MTEXT_UNI', ''),		),		'PRIMARY_KEY'	=> 'theme_id',		'KEYS'			=> array(			'theme_name'		=> array('UNIQUE', 'theme_name'),		),	);	$schema_data['phpbb_styles_imageset'] = array(		'COLUMNS'		=> array(			'imageset_id'				=> array('UINT', NULL, 'auto_increment'),			'imageset_name'				=> array('VCHAR_UNI:255', ''),			'imageset_copyright'		=> array('VCHAR_UNI', ''),			'imageset_path'				=> array('VCHAR:100', ''),		),		'PRIMARY_KEY'		=> 'imageset_id',		'KEYS'				=> array(			'imgset_nm'			=> array('UNIQUE', 'imageset_name'),		),	);	$schema_data['phpbb_styles_imageset_data'] = array(		'COLUMNS'		=> array(			'image_id'				=> array('UINT', NULL, 'auto_increment'),			'image_name'			=> array('VCHAR:200', ''),			'image_filename'		=> array('VCHAR:200', ''),			'image_lang'			=> array('VCHAR:30', ''),			'image_height'			=> array('USINT', 0),			'image_width'			=> array('USINT', 0),			'imageset_id'			=> array('UINT', 0),		),		'PRIMARY_KEY'		=> 'image_id',		'KEYS'				=> array(			'i_d'			=> array('INDEX', 'imageset_id'),		),	);	$schema_data['phpbb_topics'] = array(		'COLUMNS'		=> array(			'topic_id'					=> array('UINT', NULL, 'auto_increment'),			'forum_id'					=> array('UINT', 0),			'icon_id'					=> array('UINT', 0),			'topic_attachment'			=> array('BOOL', 0),			'topic_approved'			=> array('BOOL', 1),			'topic_reported'			=> array('BOOL', 0),			'topic_title'				=> array('STEXT_UNI', '', 'true_sort'),			'topic_poster'				=> array('UINT', 0),			'topic_time'				=> array('TIMESTAMP', 0),			'topic_time_limit'			=> array('TIMESTAMP', 0),			'topic_views'				=> array('UINT', 0),			'topic_replies'				=> array('UINT', 0),			'topic_replies_real'		=> array('UINT', 0),			'topic_status'				=> array('TINT:3', 0),			'topic_type'				=> array('TINT:3', 0),			'topic_first_post_id'		=> array('UINT', 0),			'topic_first_poster_name'	=> array('VCHAR_UNI', ''),			'topic_first_poster_colour'	=> array('VCHAR:6', ''),			'topic_last_post_id'		=> array('UINT', 0),			'topic_last_poster_id'		=> array('UINT', 0),			'topic_last_poster_name'	=> array('VCHAR_UNI', ''),			'topic_last_poster_colour'	=> array('VCHAR:6', ''),			'topic_last_post_subject'	=> array('STEXT_UNI', ''),			'topic_last_post_time'		=> array('TIMESTAMP', 0),			'topic_last_view_time'		=> array('TIMESTAMP', 0),			'topic_moved_id'			=> array('UINT', 0),			'topic_bumped'				=> array('BOOL', 0),			'topic_bumper'				=> array('UINT', 0),			'poll_title'				=> array('STEXT_UNI', ''),			'poll_start'				=> array('TIMESTAMP', 0),			'poll_length'				=> array('TIMESTAMP', 0),			'poll_max_options'			=> array('TINT:4', 1),			'poll_last_vote'			=> array('TIMESTAMP', 0),			'poll_vote_change'			=> array('BOOL', 0),		),		'PRIMARY_KEY'	=> 'topic_id',		'KEYS'			=> array(			'forum_id'			=> array('INDEX', 'forum_id'),			'forum_id_type'		=> array('INDEX', array('forum_id', 'topic_type')),			'last_post_time'	=> array('INDEX', 'topic_last_post_time'),			'topic_approved'	=> array('INDEX', 'topic_approved'),			'forum_appr_last'	=> array('INDEX', array('forum_id', 'topic_approved', 'topic_last_post_id')),			'fid_time_moved'	=> array('INDEX', array('forum_id', 'topic_last_post_time', 'topic_moved_id')),		),	);	$schema_data['phpbb_topics_track'] = array(		'COLUMNS'		=> array(			'user_id'			=> array('UINT', 0),			'topic_id'			=> array('UINT', 0),			'forum_id'			=> array('UINT', 0),			'mark_time'			=> array('TIMESTAMP', 0),		),		'PRIMARY_KEY'	=> array('user_id', 'topic_id'),		'KEYS'			=> array(			'topic_id'			=> array('INDEX', 'topic_id'),			'forum_id'			=> array('INDEX', 'forum_id'),		),	);	$schema_data['phpbb_topics_posted'] = array(		'COLUMNS'		=> array(			'user_id'			=> array('UINT', 0),			'topic_id'			=> array('UINT', 0),			'topic_posted'		=> array('BOOL', 0),		),		'PRIMARY_KEY'	=> array('user_id', 'topic_id'),	);	$schema_data['phpbb_topics_watch'] = array(		'COLUMNS'		=> array(			'topic_id'			=> array('UINT', 0),			'user_id'			=> array('UINT', 0),			'notify_status'		=> array('BOOL', 0),		),		'KEYS'			=> array(			'topic_id'			=> array('INDEX', 'topic_id'),			'user_id'			=> array('INDEX', 'user_id'),			'notify_stat'		=> array('INDEX', 'notify_status'),		),	);	$schema_data['phpbb_user_group'] = array(		'COLUMNS'		=> array(			'group_id'			=> array('UINT', 0),			'user_id'			=> array('UINT', 0),			'group_leader'		=> array('BOOL', 0),			'user_pending'		=> array('BOOL', 1),		),		'KEYS'			=> array(			'group_id'			=> array('INDEX', 'group_id'),			'user_id'			=> array('INDEX', 'user_id'),			'group_leader'		=> array('INDEX', 'group_leader'),		),	);	$schema_data['phpbb_users'] = array(		'COLUMNS'		=> array(			'user_id'					=> array('UINT', NULL, 'auto_increment'),			'user_type'					=> array('TINT:2', 0),			'group_id'					=> array('UINT', 3),			'user_permissions'			=> array('MTEXT', ''),			'user_perm_from'			=> array('UINT', 0),			'user_ip'					=> array('VCHAR:40', ''),			'user_regdate'				=> array('TIMESTAMP', 0),			'username'					=> array('VCHAR_CI', ''),			'username_clean'			=> array('VCHAR_CI', ''),			'user_password'				=> array('VCHAR_UNI:40', ''),			'user_passchg'				=> array('TIMESTAMP', 0),			'user_pass_convert'			=> array('BOOL', 0),			'user_email'				=> array('VCHAR_UNI:100', ''),			'user_email_hash'			=> array('BINT', 0),			'user_birthday'				=> array('VCHAR:10', ''),			'user_lastvisit'			=> array('TIMESTAMP', 0),			'user_lastmark'				=> array('TIMESTAMP', 0),			'user_lastpost_time'		=> array('TIMESTAMP', 0),			'user_lastpage'				=> array('VCHAR_UNI:200', ''),			'user_last_confirm_key'		=> array('VCHAR:10', ''),			'user_last_search'			=> array('TIMESTAMP', 0),			'user_warnings'				=> array('TINT:4', 0),			'user_last_warning'			=> array('TIMESTAMP', 0),			'user_login_attempts'		=> array('TINT:4', 0),			'user_inactive_reason'		=> array('TINT:2', 0),			'user_inactive_time'		=> array('TIMESTAMP', 0),			'user_posts'				=> array('UINT', 0),			'user_lang'					=> array('VCHAR:30', ''),			'user_timezone'				=> array('DECIMAL', 0),			'user_dst'					=> array('BOOL', 0),			'user_dateformat'			=> array('VCHAR_UNI:30', 'd M Y H:i'),			'user_style'				=> array('UINT', 0),			'user_rank'					=> array('UINT', 0),			'user_colour'				=> array('VCHAR:6', ''),			'user_new_privmsg'			=> array('INT:4', 0),			'user_unread_privmsg'		=> array('INT:4', 0),			'user_last_privmsg'			=> array('TIMESTAMP', 0),			'user_message_rules'		=> array('BOOL', 0),			'user_full_folder'			=> array('INT:11', -3),			'user_emailtime'			=> array('TIMESTAMP', 0),			'user_topic_show_days'		=> array('USINT', 0),			'user_topic_sortby_type'	=> array('VCHAR:1', 't'),			'user_topic_sortby_dir'		=> array('VCHAR:1', 'd'),			'user_post_show_days'		=> array('USINT', 0),			'user_post_sortby_type'		=> array('VCHAR:1', 't'),			'user_post_sortby_dir'		=> array('VCHAR:1', 'a'),			'user_notify'				=> array('BOOL', 0),			'user_notify_pm'			=> array('BOOL', 1),			'user_notify_type'			=> array('TINT:4', 0),			'user_allow_pm'				=> array('BOOL', 1),			'user_allow_viewonline'		=> array('BOOL', 1),			'user_allow_viewemail'		=> array('BOOL', 1),			'user_allow_massemail'		=> array('BOOL', 1),			'user_options'				=> array('UINT:11', 230271),			'user_avatar'				=> array('VCHAR', ''),			'user_avatar_type'			=> array('TINT:2', 0),			'user_avatar_width'			=> array('USINT', 0),			'user_avatar_height'		=> array('USINT', 0),			'user_sig'					=> array('MTEXT_UNI', ''),			'user_sig_bbcode_uid'		=> array('VCHAR:8', ''),			'user_sig_bbcode_bitfield'	=> array('VCHAR:255', ''),			'user_from'					=> array('VCHAR_UNI:100', ''),			'user_icq'					=> array('VCHAR:15', ''),			'user_aim'					=> array('VCHAR_UNI', ''),			'user_yim'					=> array('VCHAR_UNI', ''),			'user_msnm'					=> array('VCHAR_UNI', ''),			'user_jabber'				=> array('VCHAR_UNI', ''),			'user_website'				=> array('VCHAR_UNI:200', ''),			'user_occ'					=> array('TEXT_UNI', ''),			'user_interests'			=> array('TEXT_UNI', ''),			'user_actkey'				=> array('VCHAR:32', ''),			'user_newpasswd'			=> array('VCHAR_UNI:40', ''),			'user_form_salt'			=> array('VCHAR_UNI:32', ''),			'user_new'					=> array('BOOL', 1),			'user_reminded'				=> array('TINT:4', 0),			'user_reminded_time'		=> array('TIMESTAMP', 0),		),		'PRIMARY_KEY'	=> 'user_id',		'KEYS'			=> array(			'user_birthday'				=> array('INDEX', 'user_birthday'),			'user_email_hash'			=> array('INDEX', 'user_email_hash'),			'user_type'					=> array('INDEX', 'user_type'),			'username_clean'			=> array('UNIQUE', 'username_clean'),		),	);	$schema_data['phpbb_warnings'] = array(		'COLUMNS'		=> array(			'warning_id'			=> array('UINT', NULL, 'auto_increment'),			'user_id'				=> array('UINT', 0),			'post_id'				=> array('UINT', 0),			'log_id'				=> array('UINT', 0),			'warning_time'			=> array('TIMESTAMP', 0),		),		'PRIMARY_KEY'	=> 'warning_id',	);	$schema_data['phpbb_words'] = array(		'COLUMNS'		=> array(			'word_id'				=> array('UINT', NULL, 'auto_increment'),			'word'					=> array('VCHAR_UNI', ''),			'replacement'			=> array('VCHAR_UNI', ''),		),		'PRIMARY_KEY'	=> 'word_id',	);	$schema_data['phpbb_zebra'] = array(		'COLUMNS'		=> array(			'user_id'				=> array('UINT', 0),			'zebra_id'				=> array('UINT', 0),			'friend'				=> array('BOOL', 0),			'foe'					=> array('BOOL', 0),		),		'PRIMARY_KEY'	=> array('user_id', 'zebra_id'),	);	return $schema_data;}/*** Data put into the header for various dbms*/function custom_data($dbms){	switch ($dbms)	{		case 'oracle':			return <<<EOF/*  This first section is optional, however its probably the best method  of running phpBB on Oracle. If you already have a tablespace and user created  for phpBB you can leave this section commented out!  The first set of statements create a phpBB tablespace and a phpBB user,  make sure you change the password of the phpBB user before you run this script!!*//*CREATE TABLESPACE "PHPBB"	LOGGING	DATAFILE 'E:\ORACLE\ORADATA\LOCAL\PHPBB.ora'	SIZE 10M	AUTOEXTEND ON NEXT 10M	MAXSIZE 100M;CREATE USER "PHPBB"	PROFILE "DEFAULT"	IDENTIFIED BY "phpbb_password"	DEFAULT TABLESPACE "PHPBB"	QUOTA UNLIMITED ON "PHPBB"	ACCOUNT UNLOCK;GRANT ANALYZE ANY TO "PHPBB";GRANT CREATE SEQUENCE TO "PHPBB";GRANT CREATE SESSION TO "PHPBB";GRANT CREATE TABLE TO "PHPBB";GRANT CREATE TRIGGER TO "PHPBB";GRANT CREATE VIEW TO "PHPBB";GRANT "CONNECT" TO "PHPBB";COMMIT;DISCONNECT;CONNECT phpbb/phpbb_password;*/EOF;		break;		case 'postgres':			return <<<EOF/*	Domain definition*/CREATE DOMAIN varchar_ci AS varchar(255) NOT NULL DEFAULT ''::character varying;/*	Operation Functions*/CREATE FUNCTION _varchar_ci_equal(varchar_ci, varchar_ci) RETURNS boolean AS 'SELECT LOWER($1) = LOWER($2)' LANGUAGE SQL STRICT;CREATE FUNCTION _varchar_ci_not_equal(varchar_ci, varchar_ci) RETURNS boolean AS 'SELECT LOWER($1) != LOWER($2)' LANGUAGE SQL STRICT;CREATE FUNCTION _varchar_ci_less_than(varchar_ci, varchar_ci) RETURNS boolean AS 'SELECT LOWER($1) < LOWER($2)' LANGUAGE SQL STRICT;CREATE FUNCTION _varchar_ci_less_equal(varchar_ci, varchar_ci) RETURNS boolean AS 'SELECT LOWER($1) <= LOWER($2)' LANGUAGE SQL STRICT;CREATE FUNCTION _varchar_ci_greater_than(varchar_ci, varchar_ci) RETURNS boolean AS 'SELECT LOWER($1) > LOWER($2)' LANGUAGE SQL STRICT;CREATE FUNCTION _varchar_ci_greater_equals(varchar_ci, varchar_ci) RETURNS boolean AS 'SELECT LOWER($1) >= LOWER($2)' LANGUAGE SQL STRICT;/*	Operators*/CREATE OPERATOR <(  PROCEDURE = _varchar_ci_less_than,  LEFTARG = varchar_ci,  RIGHTARG = varchar_ci,  COMMUTATOR = >,  NEGATOR = >=,  RESTRICT = scalarltsel,  JOIN = scalarltjoinsel);CREATE OPERATOR <=(  PROCEDURE = _varchar_ci_less_equal,  LEFTARG = varchar_ci,  RIGHTARG = varchar_ci,  COMMUTATOR = >=,  NEGATOR = >,  RESTRICT = scalarltsel,  JOIN = scalarltjoinsel);CREATE OPERATOR >(  PROCEDURE = _varchar_ci_greater_than,  LEFTARG = varchar_ci,  RIGHTARG = varchar_ci,  COMMUTATOR = <,  NEGATOR = <=,  RESTRICT = scalargtsel,  JOIN = scalargtjoinsel);CREATE OPERATOR >=(  PROCEDURE = _varchar_ci_greater_equals,  LEFTARG = varchar_ci,  RIGHTARG = varchar_ci,  COMMUTATOR = <=,  NEGATOR = <,  RESTRICT = scalargtsel,  JOIN = scalargtjoinsel);CREATE OPERATOR <>(  PROCEDURE = _varchar_ci_not_equal,  LEFTARG = varchar_ci,  RIGHTARG = varchar_ci,  COMMUTATOR = <>,  NEGATOR = =,  RESTRICT = neqsel,  JOIN = neqjoinsel);CREATE OPERATOR =(  PROCEDURE = _varchar_ci_equal,  LEFTARG = varchar_ci,  RIGHTARG = varchar_ci,  COMMUTATOR = =,  NEGATOR = <>,  RESTRICT = eqsel,  JOIN = eqjoinsel,  HASHES,  MERGES,  SORT1= <);EOF;		break;	}	return '';}echo 'done';
<?php/**** @package dbal* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @ignore*/if (!defined('IN_PHPBB')){	exit;}include_once($phpbb_root_path . 'includes/db/dbal.' . $phpEx);/*** MySQLi Database Abstraction Layer* mysqli-extension has to be compiled with:* MySQL 4.1+ or MySQL 5.0+* @package dbal*/class dbal_mysqli extends dbal{	var $multi_insert = true;	/**	* Connect to server	*/	function sql_connect($sqlserver, $sqluser, $sqlpassword, $database, $port = false, $persistency = false , $new_link = false)	{		// Mysqli extension supports persistent connection since PHP 5.3.0		$this->persistency = (version_compare(PHP_VERSION, '5.3.0', '>=')) ? $persistency : false;		$this->user = $sqluser;		// If persistent connection, set dbhost to localhost when empty and prepend it with 'p:' prefix		$this->server = ($this->persistency) ? 'p:' . (($sqlserver) ? $sqlserver : 'localhost') : $sqlserver;		$this->dbname = $database;		$port = (!$port) ? NULL : $port;		// If port is set and it is not numeric, most likely mysqli socket is set.		// Try to map it to the $socket parameter.		$socket = NULL;		if ($port)		{			if (is_numeric($port))			{				$port = (int) $port;			}			else			{				$socket = $port;				$port = NULL;			}		}		$this->db_connect_id = @mysqli_connect($this->server, $this->user, $sqlpassword, $this->dbname, $port, $socket);		if ($this->db_connect_id && $this->dbname != '')		{			@mysqli_query($this->db_connect_id, "SET NAMES 'utf8'");			// enforce strict mode on databases that support it			if (version_compare($this->sql_server_info(true), '5.0.2', '>='))			{				$result = @mysqli_query($this->db_connect_id, 'SELECT @@session.sql_mode AS sql_mode');				$row = @mysqli_fetch_assoc($result);				@mysqli_free_result($result);				$modes = array_map('trim', explode(',', $row['sql_mode']));				// TRADITIONAL includes STRICT_ALL_TABLES and STRICT_TRANS_TABLES				if (!in_array('TRADITIONAL', $modes))				{					if (!in_array('STRICT_ALL_TABLES', $modes))					{						$modes[] = 'STRICT_ALL_TABLES';					}					if (!in_array('STRICT_TRANS_TABLES', $modes))					{						$modes[] = 'STRICT_TRANS_TABLES';					}				}				$mode = implode(',', $modes);				@mysqli_query($this->db_connect_id, "SET SESSION sql_mode='{$mode}'");			}			return $this->db_connect_id;		}		return $this->sql_error('');	}	/**	* Version information about used database	* @param bool $use_cache If true, it is safe to retrieve the value from the cache	* @return string sql server version	*/	function sql_server_info($raw = false, $use_cache = true)	{		global $cache;		if (!$use_cache || empty($cache) || ($this->sql_server_version = $cache->get('mysqli_version')) === false)		{			$result = @mysqli_query($this->db_connect_id, 'SELECT VERSION() AS version');			$row = @mysqli_fetch_assoc($result);			@mysqli_free_result($result);			$this->sql_server_version = $row['version'];			if (!empty($cache) && $use_cache)			{				$cache->put('mysqli_version', $this->sql_server_version);			}		}		return ($raw) ? $this->sql_server_version : 'MySQL(i) ' . $this->sql_server_version;	}	/**	* SQL Transaction	* @access private	*/	function _sql_transaction($status = 'begin')	{		switch ($status)		{			case 'begin':				return @mysqli_autocommit($this->db_connect_id, false);			break;			case 'commit':				$result = @mysqli_commit($this->db_connect_id);				@mysqli_autocommit($this->db_connect_id, true);				return $result;			break;			case 'rollback':				$result = @mysqli_rollback($this->db_connect_id);				@mysqli_autocommit($this->db_connect_id, true);				return $result;			break;		}		return true;	}	/**	* Base query method	*	* @param	string	$query		Contains the SQL query which shall be executed	* @param	int		$cache_ttl	Either 0 to avoid caching or the time in seconds which the result shall be kept in cache	* @return	mixed				When casted to bool the returned value returns true on success and false on failure	*	* @access	public	*/	function sql_query($query = '', $cache_ttl = 0)	{		if ($query != '')		{			global $cache;			// EXPLAIN only in extra debug mode			if (defined('DEBUG_EXTRA'))			{				$this->sql_report('start', $query);			}			$this->query_result = ($cache_ttl && method_exists($cache, 'sql_load')) ? $cache->sql_load($query) : false;			$this->sql_add_num_queries($this->query_result);			if ($this->query_result === false)			{				if (($this->query_result = @mysqli_query($this->db_connect_id, $query)) === false)				{					$this->sql_error($query);				}				if (defined('DEBUG_EXTRA'))				{					$this->sql_report('stop', $query);				}				if ($cache_ttl && method_exists($cache, 'sql_save'))				{					$cache->sql_save($query, $this->query_result, $cache_ttl);				}			}			else if (defined('DEBUG_EXTRA'))			{				$this->sql_report('fromcache', $query);			}		}		else		{			return false;		}		return $this->query_result;	}	/**	* Build LIMIT query	*/	function _sql_query_limit($query, $total, $offset = 0, $cache_ttl = 0)	{		$this->query_result = false;		// if $total is set to 0 we do not want to limit the number of rows		if ($total == 0)		{			// MySQL 4.1+ no longer supports -1 in limit queries			$total = '18446744073709551615';		}		$query .= "\n LIMIT " . ((!empty($offset)) ? $offset . ', ' . $total : $total);		return $this->sql_query($query, $cache_ttl);	}	/**	* Return number of affected rows	*/	function sql_affectedrows()	{		return ($this->db_connect_id) ? @mysqli_affected_rows($this->db_connect_id) : false;	}	/**	* Fetch current row	*/	function sql_fetchrow($query_id = false)	{		global $cache;		if ($query_id === false)		{			$query_id = $this->query_result;		}		if (!is_object($query_id) && isset($cache->sql_rowset[$query_id]))		{			return $cache->sql_fetchrow($query_id);		}		if ($query_id !== false)		{			$result = @mysqli_fetch_assoc($query_id);			return $result !== null ? $result : false;		}		return false;	}	/**	* Seek to given row number	* rownum is zero-based	*/	function sql_rowseek($rownum, &$query_id)	{		global $cache;		if ($query_id === false)		{			$query_id = $this->query_result;		}		if (!is_object($query_id) && isset($cache->sql_rowset[$query_id]))		{			return $cache->sql_rowseek($rownum, $query_id);		}		return ($query_id !== false) ? @mysqli_data_seek($query_id, $rownum) : false;	}	/**	* Get last inserted id after insert statement	*/	function sql_nextid()	{		return ($this->db_connect_id) ? @mysqli_insert_id($this->db_connect_id) : false;	}	/**	* Free sql result	*/	function sql_freeresult($query_id = false)	{		global $cache;		if ($query_id === false)		{			$query_id = $this->query_result;		}		if (!is_object($query_id) && isset($cache->sql_rowset[$query_id]))		{			return $cache->sql_freeresult($query_id);		}		return @mysqli_free_result($query_id);	}	/**	* Escape string used in sql query	*/	function sql_escape($msg)	{		return @mysqli_real_escape_string($this->db_connect_id, $msg);	}	/**	* Build LIKE expression	* @access private	*/	function _sql_like_expression($expression)	{		return $expression;	}	/**	* Build db-specific query data	* @access private	*/	function _sql_custom_build($stage, $data)	{		switch ($stage)		{			case 'FROM':				$data = '(' . $data . ')';			break;		}		return $data;	}	/**	* return sql error array	* @access private	*/	function _sql_error()	{		if (!$this->db_connect_id)		{			return array(				'message'	=> @mysqli_connect_error(),				'code'		=> @mysqli_connect_errno()			);		}		return array(			'message'	=> @mysqli_error($this->db_connect_id),			'code'		=> @mysqli_errno($this->db_connect_id)		);	}	/**	* Close sql connection	* @access private	*/	function _sql_close()	{		return @mysqli_close($this->db_connect_id);	}	/**	* Build db-specific report	* @access private	*/	function _sql_report($mode, $query = '')	{		static $test_prof;		// current detection method, might just switch to see the existance of INFORMATION_SCHEMA.PROFILING		if ($test_prof === null)		{			$test_prof = false;			if (strpos(mysqli_get_server_info($this->db_connect_id), 'community') !== false)			{				$ver = mysqli_get_server_version($this->db_connect_id);				if ($ver >= 50037 && $ver < 50100)				{					$test_prof = true;				}			}		}		switch ($mode)		{			case 'start':				$explain_query = $query;				if (preg_match('/UPDATE ([a-z0-9_]+).*?WHERE(.*)/s', $query, $m))				{					$explain_query = 'SELECT * FROM ' . $m[1] . ' WHERE ' . $m[2];				}				else if (preg_match('/DELETE FROM ([a-z0-9_]+).*?WHERE(.*)/s', $query, $m))				{					$explain_query = 'SELECT * FROM ' . $m[1] . ' WHERE ' . $m[2];				}				if (preg_match('/^SELECT/', $explain_query))				{					$html_table = false;					// begin profiling					if ($test_prof)					{						@mysqli_query($this->db_connect_id, 'SET profiling = 1;');					}					if ($result = @mysqli_query($this->db_connect_id, "EXPLAIN $explain_query"))					{						while ($row = @mysqli_fetch_assoc($result))						{							$html_table = $this->sql_report('add_select_row', $query, $html_table, $row);						}					}					@mysqli_free_result($result);					if ($html_table)					{						$this->html_hold .= '</table>';					}					if ($test_prof)					{						$html_table = false;						// get the last profile						if ($result = @mysqli_query($this->db_connect_id, 'SHOW PROFILE ALL;'))						{							$this->html_hold .= '<br />';							while ($row = @mysqli_fetch_assoc($result))							{								// make <unknown> HTML safe								if (!empty($row['Source_function']))								{									$row['Source_function'] = str_replace(array('<', '>'), array('&lt;', '&gt;'), $row['Source_function']);								}								// remove unsupported features								foreach ($row as $key => $val)								{									if ($val === null)									{										unset($row[$key]);									}								}								$html_table = $this->sql_report('add_select_row', $query, $html_table, $row);							}						}						@mysqli_free_result($result);						if ($html_table)						{							$this->html_hold .= '</table>';						}						@mysqli_query($this->db_connect_id, 'SET profiling = 0;');					}				}			break;			case 'fromcache':				$endtime = explode(' ', microtime());				$endtime = $endtime[0] + $endtime[1];				$result = @mysqli_query($this->db_connect_id, $query);				while ($void = @mysqli_fetch_assoc($result))				{					// Take the time spent on parsing rows into account				}				@mysqli_free_result($result);				$splittime = explode(' ', microtime());				$splittime = $splittime[0] + $splittime[1];				$this->sql_report('record_fromcache', $query, $endtime, $splittime);			break;		}	}}?>
<?php/**** @package phpBB3* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @ignore*/if (!defined('IN_PHPBB')){	exit;}/*** Custom Profile Fields* @package phpBB3*/class custom_profile{	var $profile_types = array(FIELD_INT => 'int', FIELD_STRING => 'string', FIELD_TEXT => 'text', FIELD_BOOL => 'bool', FIELD_DROPDOWN => 'dropdown', FIELD_DATE => 'date');	var $profile_cache = array();	var $options_lang = array();	/**	* Assign editable fields to template, mode can be profile (for profile change) or register (for registration)	* Called by ucp_profile and ucp_register	* @access public	*/	function generate_profile_fields($mode, $lang_id)	{		global $db, $template, $auth;		$sql_where = '';		switch ($mode)		{			case 'register':				// If the field is required we show it on the registration page				$sql_where .= ' AND f.field_show_on_reg = 1';			break;			case 'profile':				// Show hidden fields to moderators/admins				if (!$auth->acl_gets('a_', 'm_') && !$auth->acl_getf_global('m_'))				{					$sql_where .= ' AND f.field_show_profile = 1';				}			break;			default:				trigger_error('Wrong profile mode specified', E_USER_ERROR);			break;		}		$sql = 'SELECT l.*, f.*			FROM ' . PROFILE_LANG_TABLE . ' l, ' . PROFILE_FIELDS_TABLE . " f			WHERE f.field_active = 1				$sql_where				AND l.lang_id = $lang_id				AND l.field_id = f.field_id			ORDER BY f.field_order";		$result = $db->sql_query($sql);		while ($row = $db->sql_fetchrow($result))		{			// Return templated field			$tpl_snippet = $this->process_field_row('change', $row);			// Some types are multivalue, we can't give them a field_id as we would not know which to pick			$type = (int) $row['field_type'];			$template->assign_block_vars('profile_fields', array(				'LANG_NAME'		=> $row['lang_name'],				'LANG_EXPLAIN'	=> $row['lang_explain'],				'FIELD'			=> $tpl_snippet,				'FIELD_ID'		=> ($type == FIELD_DATE || ($type == FIELD_BOOL && $row['field_length'] == '1')) ? '' : 'pf_' . $row['field_ident'],				'S_REQUIRED'	=> ($row['field_required']) ? true : false)			);		}		$db->sql_freeresult($result);	}	/**	* Validate entered profile field data	* @access public	*/	function validate_profile_field($field_type, &$field_value, $field_data)	{		switch ($field_type)		{			case FIELD_DATE:				$field_validate = explode('-', $field_value);				$day = (isset($field_validate[0])) ? (int) $field_validate[0] : 0;				$month = (isset($field_validate[1])) ? (int) $field_validate[1] : 0;				$year = (isset($field_validate[2])) ? (int) $field_validate[2] : 0;				if ((!$day || !$month || !$year) && !$field_data['field_required'])				{					return false;				}				if ((!$day || !$month || !$year) && $field_data['field_required'])				{					return 'FIELD_REQUIRED';				}				if ($day < 0 || $day > 31 || $month < 0 || $month > 12 || ($year < 1901 && $year > 0) || $year > gmdate('Y', time()) + 50)				{					return 'FIELD_INVALID_DATE';				}				if (checkdate($month, $day, $year) === false)				{					return 'FIELD_INVALID_DATE';				}			break;			case FIELD_BOOL:				$field_value = (bool) $field_value;							if (!$field_value && $field_data['field_required'])				{					return 'FIELD_REQUIRED';				}			break;			case FIELD_INT:				if (trim($field_value) === '' && !$field_data['field_required'])				{					return false;				}								$field_value = (int) $field_value;				if ($field_value < $field_data['field_minlen'])				{					return 'FIELD_TOO_SMALL';				}				else if ($field_value > $field_data['field_maxlen'])				{					return 'FIELD_TOO_LARGE';				}			break;			case FIELD_DROPDOWN:				$field_value = (int) $field_value;				// retrieve option lang data if necessary				if (!isset($this->options_lang[$field_data['field_id']]) || !isset($this->options_lang[$field_data['field_id']][$field_data['lang_id']]) || !sizeof($this->options_lang[$file_data['field_id']][$field_data['lang_id']]))				{					$this->get_option_lang($field_data['field_id'], $field_data['lang_id'], FIELD_DROPDOWN, false);				}				if (!isset($this->options_lang[$field_data['field_id']][$field_data['lang_id']][$field_value]))				{					return 'FIELD_INVALID_VALUE';				}				if ($field_value == $field_data['field_novalue'] && $field_data['field_required'])				{					return 'FIELD_REQUIRED';				}			break;			case FIELD_STRING:			case FIELD_TEXT:				if (trim($field_value) === '' && !$field_data['field_required'])				{					return false;				}				else if (trim($field_value) === '' && $field_data['field_required'])				{					return 'FIELD_REQUIRED';				}				if ($field_data['field_minlen'] && utf8_strlen($field_value) < $field_data['field_minlen'])				{					return 'FIELD_TOO_SHORT';				}				else if ($field_data['field_maxlen'] && utf8_strlen($field_value) > $field_data['field_maxlen'])				{					return 'FIELD_TOO_LONG';				}				if (!empty($field_data['field_validation']) && $field_data['field_validation'] != '.*')				{					$field_validate = ($field_type == FIELD_STRING) ? $field_value : bbcode_nl2br($field_value);					if (!preg_match('#^' . str_replace('\\\\', '\\', $field_data['field_validation']) . '$#i', $field_validate))					{						return 'FIELD_INVALID_CHARS';					}				}			break;		}		return false;	}	/**	* Build profile cache, used for display	* @access private	*/	function build_cache()	{		global $db, $user, $auth;		$this->profile_cache = array();		// Display hidden/no_view fields for admin/moderator		$sql = 'SELECT l.*, f.*			FROM ' . PROFILE_LANG_TABLE . ' l, ' . PROFILE_FIELDS_TABLE . ' f			WHERE l.lang_id = ' . $user->get_iso_lang_id() . '				AND f.field_active = 1 ' .				((!$auth->acl_gets('a_', 'm_') && !$auth->acl_getf_global('m_')) ? '	AND f.field_hide = 0 ' : '') . '				AND f.field_no_view = 0				AND l.field_id = f.field_id			ORDER BY f.field_order';		$result = $db->sql_query($sql);		while ($row = $db->sql_fetchrow($result))		{			$this->profile_cache[$row['field_ident']] = $row;		}		$db->sql_freeresult($result);	}	/**	* Get language entries for options and store them here for later use	*/	function get_option_lang($field_id, $lang_id, $field_type, $preview)	{		global $db;		if ($preview)		{			$lang_options = (!is_array($this->vars['lang_options'])) ? explode("\n", $this->vars['lang_options']) : $this->vars['lang_options'];			foreach ($lang_options as $num => $var)			{				$this->options_lang[$field_id][$lang_id][($num + 1)] = $var;			}		}		else		{			$sql = 'SELECT option_id, lang_value				FROM ' . PROFILE_FIELDS_LANG_TABLE . "					WHERE field_id = $field_id					AND lang_id = $lang_id					AND field_type = $field_type				ORDER BY option_id";			$result = $db->sql_query($sql);			while ($row = $db->sql_fetchrow($result))			{				$this->options_lang[$field_id][$lang_id][($row['option_id'] + 1)] = $row['lang_value'];			}			$db->sql_freeresult($result);		}	}	/**	* Submit profile field for validation	* @access public	*/	function submit_cp_field($mode, $lang_id, &$cp_data, &$cp_error)	{		global $auth, $db, $user;		$sql_where = '';		switch ($mode)		{			case 'register':				// If the field is required we show it on the registration page				$sql_where .= ' AND f.field_show_on_reg = 1';			break;			case 'profile':				// Show hidden fields to moderators/admins				if (!$auth->acl_gets('a_', 'm_') && !$auth->acl_getf_global('m_'))				{					$sql_where .= ' AND f.field_show_profile = 1';				}			break;			default:				trigger_error('Wrong profile mode specified', E_USER_ERROR);			break;		}		$sql = 'SELECT l.*, f.*			FROM ' . PROFILE_LANG_TABLE . ' l, ' . PROFILE_FIELDS_TABLE . " f			WHERE l.lang_id = $lang_id				AND f.field_active = 1				$sql_where				AND l.field_id = f.field_id			ORDER BY f.field_order";		$result = $db->sql_query($sql);		while ($row = $db->sql_fetchrow($result))		{			$cp_data['pf_' . $row['field_ident']] = $this->get_profile_field($row);			$check_value = $cp_data['pf_' . $row['field_ident']];			if (($cp_result = $this->validate_profile_field($row['field_type'], $check_value, $row)) !== false)			{				// If not and only showing common error messages, use this one				$error = '';				switch ($cp_result)				{					case 'FIELD_INVALID_DATE':					case 'FIELD_INVALID_VALUE':					case 'FIELD_REQUIRED':						$error = sprintf($user->lang[$cp_result], $row['lang_name']);					break;					case 'FIELD_TOO_SHORT':					case 'FIELD_TOO_SMALL':						$error = sprintf($user->lang[$cp_result], $row['lang_name'], $row['field_minlen']);					break;					case 'FIELD_TOO_LONG':					case 'FIELD_TOO_LARGE':						$error = sprintf($user->lang[$cp_result], $row['lang_name'], $row['field_maxlen']);					break;					case 'FIELD_INVALID_CHARS':						switch ($row['field_validation'])						{							case '[0-9]+':								$error = sprintf($user->lang[$cp_result . '_NUMBERS_ONLY'], $row['lang_name']);							break;							case '[\w]+':								$error = sprintf($user->lang[$cp_result . '_ALPHA_ONLY'], $row['lang_name']);							break;							case '[\w_\+\. \-\[\]]+':								$error = sprintf($user->lang[$cp_result . '_SPACERS_ONLY'], $row['lang_name']);							break;						}					break;				}				if ($error != '')				{					$cp_error[] = $error;				}			}		}		$db->sql_freeresult($result);	}	/**	* Update profile field data directly	*/	function update_profile_field_data($user_id, &$cp_data)	{		global $db;		if (!sizeof($cp_data))		{			return;		}		switch ($db->sql_layer)		{			case 'oracle':			case 'firebird':			case 'postgres':				$right_delim = $left_delim = '"';			break;			case 'sqlite':			case 'mssql':			case 'mssql_odbc':			case 'mssqlnative':				$right_delim = ']';				$left_delim = '[';			break;			case 'mysql':			case 'mysql4':			case 'mysqli':				$right_delim = $left_delim = '`';			break;		}		// use new array for the UPDATE; changes in the key do not affect the original array		$cp_data_sql = array();		foreach ($cp_data as $key => $value)		{			// Firebird is case sensitive with delimiter			$cp_data_sql[$left_delim . (($db->sql_layer == 'firebird' || $db->sql_layer == 'oracle') ? strtoupper($key) : $key) . $right_delim] = $value;		}		$sql = 'UPDATE ' . PROFILE_FIELDS_DATA_TABLE . '			SET ' . $db->sql_build_array('UPDATE', $cp_data_sql) . "			WHERE user_id = $user_id";		$db->sql_query($sql);		if (!$db->sql_affectedrows())		{			$cp_data_sql['user_id'] = (int) $user_id;			$db->sql_return_on_error(true);			$sql = 'INSERT INTO ' . PROFILE_FIELDS_DATA_TABLE . ' ' . $db->sql_build_array('INSERT', $cp_data_sql);			$db->sql_query($sql);			$db->sql_return_on_error(false);		}	}	/**	* Assign fields to template, used for viewprofile, viewtopic and memberlist (if load setting is enabled)	* This is directly connected to the user -> mode == grab is to grab the user specific fields, mode == show is for assigning the row to the template	* @access public	*/	function generate_profile_fields_template($mode, $user_id = 0, $profile_row = false)	{		global $db;		if ($mode == 'grab')		{			if (!is_array($user_id))			{				$user_id = array($user_id);			}			if (!sizeof($this->profile_cache))			{				$this->build_cache();			}			if (!sizeof($user_id))			{				return array();			}			$sql = 'SELECT *				FROM ' . PROFILE_FIELDS_DATA_TABLE . '				WHERE ' . $db->sql_in_set('user_id', array_map('intval', $user_id));			$result = $db->sql_query($sql);			$field_data = array();			while ($row = $db->sql_fetchrow($result))			{				$field_data[$row['user_id']] = $row;			}			$db->sql_freeresult($result);			$user_fields = array();			// Go through the fields in correct order			foreach (array_keys($this->profile_cache) as $used_ident)			{				foreach ($field_data as $user_id => $row)				{					$user_fields[$user_id][$used_ident]['value'] = $row['pf_' . $used_ident];					$user_fields[$user_id][$used_ident]['data'] = $this->profile_cache[$used_ident];				}			}			return $user_fields;		}		else if ($mode == 'show')		{			// $profile_row == $user_fields[$row['user_id']];			$tpl_fields = array();			$tpl_fields['row'] = $tpl_fields['blockrow'] = array();			foreach ($profile_row as $ident => $ident_ary)			{				$value = $this->get_profile_value($ident_ary);				if ($value === NULL)				{					continue;				}				$tpl_fields['row'] += array(					'PROFILE_' . strtoupper($ident) . '_VALUE'	=> $value,					'PROFILE_' . strtoupper($ident) . '_TYPE'	=> $ident_ary['data']['field_type'],					'PROFILE_' . strtoupper($ident) . '_NAME'	=> $ident_ary['data']['lang_name'],					'PROFILE_' . strtoupper($ident) . '_EXPLAIN'=> $ident_ary['data']['lang_explain'],					'S_PROFILE_' . strtoupper($ident)			=> true				);				$tpl_fields['blockrow'][] = array(					'PROFILE_FIELD_VALUE'	=> $value,					'PROFILE_FIELD_TYPE'	=> $ident_ary['data']['field_type'],					'PROFILE_FIELD_NAME'	=> $ident_ary['data']['lang_name'],					'PROFILE_FIELD_EXPLAIN'	=> $ident_ary['data']['lang_explain'],					'S_PROFILE_' . strtoupper($ident)		=> true				);			}			return $tpl_fields;		}		else		{			trigger_error('Wrong mode for custom profile', E_USER_ERROR);		}	}	/**	* Get Profile Value for display	*/	function get_profile_value($ident_ary)	{		$value = $ident_ary['value'];		$field_type = $ident_ary['data']['field_type'];		switch ($this->profile_types[$field_type])		{			case 'int':				if ($value === '')				{					return NULL;				}				return (int) $value;			break;			case 'string':			case 'text':				if (!$value)				{					return NULL;				}				$value = make_clickable($value);				$value = censor_text($value);				$value = bbcode_nl2br($value);				return $value;			break;			// case 'datetime':			case 'date':				$date = explode('-', $value);				$day = (isset($date[0])) ? (int) $date[0] : 0;				$month = (isset($date[1])) ? (int) $date[1] : 0;				$year = (isset($date[2])) ? (int) $date[2] : 0;				if (!$day && !$month && !$year)				{					return NULL;				}				else if ($day && $month && $year)				{					global $user;					// Date should display as the same date for every user regardless of timezone, so remove offset					// to compensate for the offset added by user::format_date()					return $user->format_date(gmmktime(0, 0, 0, $month, $day, $year) - ($user->timezone + $user->dst), $user->lang['DATE_FORMAT'], true);				}				return $value;			break;			case 'dropdown':				$field_id = $ident_ary['data']['field_id'];				$lang_id = $ident_ary['data']['lang_id'];				if (!isset($this->options_lang[$field_id][$lang_id]))				{					$this->get_option_lang($field_id, $lang_id, FIELD_DROPDOWN, false);				}				if ($value == $ident_ary['data']['field_novalue'])				{					return NULL;				}				$value = (int) $value;				// User not having a value assigned				if (!isset($this->options_lang[$field_id][$lang_id][$value]))				{					return NULL;				}				return $this->options_lang[$field_id][$lang_id][$value];			break;			case 'bool':				$field_id = $ident_ary['data']['field_id'];				$lang_id = $ident_ary['data']['lang_id'];				if (!isset($this->options_lang[$field_id][$lang_id]))				{					$this->get_option_lang($field_id, $lang_id, FIELD_BOOL, false);				}				if ($ident_ary['data']['field_length'] == 1)				{					return (isset($this->options_lang[$field_id][$lang_id][(int) $value])) ? $this->options_lang[$field_id][$lang_id][(int) $value] : NULL;				}				else if (!$value)				{					return NULL;				}				else				{					return $this->options_lang[$field_id][$lang_id][(int) ($value) + 1];				}			break;			default:				trigger_error('Unknown profile type', E_USER_ERROR);			break;		}	}	/**	* Get field value for registration/profile	* @access private	*/	function get_var($field_validation, &$profile_row, $default_value, $preview)	{		global $user;		$profile_row['field_ident'] = (isset($profile_row['var_name'])) ? $profile_row['var_name'] : 'pf_' . $profile_row['field_ident'];		$user_ident = $profile_row['field_ident'];		// checkbox - only testing for isset		if ($profile_row['field_type'] == FIELD_BOOL && $profile_row['field_length'] == 2)		{			$value = (isset($_REQUEST[$profile_row['field_ident']])) ? true : ((!isset($user->profile_fields[$user_ident]) || $preview) ? $default_value : $user->profile_fields[$user_ident]);		}		else if ($profile_row['field_type'] == FIELD_INT)		{			if (isset($_REQUEST[$profile_row['field_ident']]))			{				$value = ($_REQUEST[$profile_row['field_ident']] === '') ? NULL : request_var($profile_row['field_ident'], $default_value);			}			else			{				if (!$preview && array_key_exists($user_ident, $user->profile_fields) && is_null($user->profile_fields[$user_ident]))				{					$value = NULL;				}				else if (!isset($user->profile_fields[$user_ident]) || $preview)				{					$value = $default_value;				}				else				{					$value = $user->profile_fields[$user_ident];				}			}			return (is_null($value) || $value === '') ? '' : (int) $value;		}		else		{			$value = (isset($_REQUEST[$profile_row['field_ident']])) ? request_var($profile_row['field_ident'], $default_value, true) : ((!isset($user->profile_fields[$user_ident]) || $preview) ? $default_value : $user->profile_fields[$user_ident]);			if (gettype($value) == 'string')			{				$value = utf8_normalize_nfc($value);			}		}		switch ($field_validation)		{			case 'int':				return (int) $value;			break;		}		return $value;	}	/**	* Process int-type	* @access private	*/	function generate_int($profile_row, $preview = false)	{		global $template;		$profile_row['field_value'] = $this->get_var('int', $profile_row, $profile_row['field_default_value'], $preview);		$template->assign_block_vars($this->profile_types[$profile_row['field_type']], array_change_key_case($profile_row, CASE_UPPER));	}	/**	* Process date-type	* @access private	*/	function generate_date($profile_row, $preview = false)	{		global $user, $template;		$profile_row['field_ident'] = (isset($profile_row['var_name'])) ? $profile_row['var_name'] : 'pf_' . $profile_row['field_ident'];		$user_ident = $profile_row['field_ident'];		$now = getdate();		if (!isset($_REQUEST[$profile_row['field_ident'] . '_day']))		{			if ($profile_row['field_default_value'] == 'now')			{				$profile_row['field_default_value'] = sprintf('%2d-%2d-%4d', $now['mday'], $now['mon'], $now['year']);			}			list($day, $month, $year) = explode('-', ((!isset($user->profile_fields[$user_ident]) || $preview) ? $profile_row['field_default_value'] : $user->profile_fields[$user_ident]));		}		else		{			if ($preview && $profile_row['field_default_value'] == 'now')			{				$profile_row['field_default_value'] = sprintf('%2d-%2d-%4d', $now['mday'], $now['mon'], $now['year']);				list($day, $month, $year) = explode('-', ((!isset($user->profile_fields[$user_ident]) || $preview) ? $profile_row['field_default_value'] : $user->profile_fields[$user_ident]));			}			else			{				$day = request_var($profile_row['field_ident'] . '_day', 0);				$month = request_var($profile_row['field_ident'] . '_month', 0);				$year = request_var($profile_row['field_ident'] . '_year', 0);			}		}		$profile_row['s_day_options'] = '<option value="0"' . ((!$day) ? ' selected="selected"' : '') . '>--</option>';		for ($i = 1; $i < 32; $i++)		{			$profile_row['s_day_options'] .= '<option value="' . $i . '"' . (($i == $day) ? ' selected="selected"' : '') . ">$i</option>";		}		$profile_row['s_month_options'] = '<option value="0"' . ((!$month) ? ' selected="selected"' : '') . '>--</option>';		for ($i = 1; $i < 13; $i++)		{			$profile_row['s_month_options'] .= '<option value="' . $i . '"' . (($i == $month) ? ' selected="selected"' : '') . ">$i</option>";		}		$profile_row['s_year_options'] = '<option value="0"' . ((!$year) ? ' selected="selected"' : '') . '>--</option>';		for ($i = $now['year'] - 100; $i <= $now['year'] + 100; $i++)		{			$profile_row['s_year_options'] .= '<option value="' . $i . '"' . (($i == $year) ? ' selected="selected"' : '') . ">$i</option>";		}		unset($now);		$profile_row['field_value'] = 0;		$template->assign_block_vars($this->profile_types[$profile_row['field_type']], array_change_key_case($profile_row, CASE_UPPER));	}	/**	* Process bool-type	* @access private	*/	function generate_bool($profile_row, $preview = false)	{		global $template;		$value = $this->get_var('int', $profile_row, $profile_row['field_default_value'], $preview);		$profile_row['field_value'] = $value;		$template->assign_block_vars($this->profile_types[$profile_row['field_type']], array_change_key_case($profile_row, CASE_UPPER));		if ($profile_row['field_length'] == 1)		{			if (!isset($this->options_lang[$profile_row['field_id']][$profile_row['lang_id']]) || !sizeof($this->options_lang[$profile_row['field_id']][$profile_row['lang_id']]))			{				$this->get_option_lang($profile_row['field_id'], $profile_row['lang_id'], FIELD_BOOL, $preview);			}			foreach ($this->options_lang[$profile_row['field_id']][$profile_row['lang_id']] as $option_id => $option_value)			{				$template->assign_block_vars('bool.options', array(					'OPTION_ID'	=> $option_id,					'CHECKED'	=> ($value == $option_id) ? ' checked="checked"' : '',					'VALUE'		=> $option_value)				);			}		}	}	/**	* Process string-type	* @access private	*/	function generate_string($profile_row, $preview = false)	{		global $template;		$profile_row['field_value'] = $this->get_var('string', $profile_row, $profile_row['lang_default_value'], $preview);		$template->assign_block_vars($this->profile_types[$profile_row['field_type']], array_change_key_case($profile_row, CASE_UPPER));	}	/**	* Process text-type	* @access private	*/	function generate_text($profile_row, $preview = false)	{		global $template;		global $user, $phpEx, $phpbb_root_path;		$field_length = explode('|', $profile_row['field_length']);		$profile_row['field_rows'] = $field_length[0];		$profile_row['field_cols'] = $field_length[1];		$profile_row['field_value'] = $this->get_var('string', $profile_row, $profile_row['lang_default_value'], $preview);		$template->assign_block_vars($this->profile_types[$profile_row['field_type']], array_change_key_case($profile_row, CASE_UPPER));	}	/**	* Process dropdown-type	* @access private	*/	function generate_dropdown($profile_row, $preview = false)	{		global $user, $template;		$value = $this->get_var('int', $profile_row, $profile_row['field_default_value'], $preview);		if (!isset($this->options_lang[$profile_row['field_id']]) || !isset($this->options_lang[$profile_row['field_id']][$profile_row['lang_id']]) || !sizeof($this->options_lang[$profile_row['field_id']][$profile_row['lang_id']]))		{			$this->get_option_lang($profile_row['field_id'], $profile_row['lang_id'], FIELD_DROPDOWN, $preview);		}		$profile_row['field_value'] = $value;		$template->assign_block_vars($this->profile_types[$profile_row['field_type']], array_change_key_case($profile_row, CASE_UPPER));		foreach ($this->options_lang[$profile_row['field_id']][$profile_row['lang_id']] as $option_id => $option_value)		{			$template->assign_block_vars('dropdown.options', array(				'OPTION_ID'	=> $option_id,				'SELECTED'	=> ($value == $option_id) ? ' selected="selected"' : '',				'VALUE'		=> $option_value)			);		}	}	/**	* Return Templated value/field. Possible values for $mode are:	* change == user is able to set/enter profile values; preview == just show the value	* @access private	*/	function process_field_row($mode, $profile_row)	{		global $template;		$preview = ($mode == 'preview') ? true : false;		// set template filename		$template->set_filenames(array(			'cp_body'		=> 'custom_profile_fields.html')		);		// empty previously filled blockvars		foreach ($this->profile_types as $field_case => $field_type)		{			$template->destroy_block_vars($field_type);		}		// Assign template variables		$type_func = 'generate_' . $this->profile_types[$profile_row['field_type']];		$this->$type_func($profile_row, $preview);		// Return templated data		return $template->assign_display('cp_body');	}	/**	* Build Array for user insertion into custom profile fields table	*/	function build_insert_sql_array($cp_data)	{		global $db, $user, $auth;		$sql_not_in = array();		foreach ($cp_data as $key => $null)		{			$sql_not_in[] = (strncmp($key, 'pf_', 3) === 0) ? substr($key, 3) : $key;		}		$sql = 'SELECT f.field_type, f.field_ident, f.field_default_value, l.lang_default_value			FROM ' . PROFILE_LANG_TABLE . ' l, ' . PROFILE_FIELDS_TABLE . ' f			WHERE l.lang_id = ' . $user->get_iso_lang_id() . '				' . ((sizeof($sql_not_in)) ? ' AND ' . $db->sql_in_set('f.field_ident', $sql_not_in, true) : '') . '				AND l.field_id = f.field_id';		$result = $db->sql_query($sql);		while ($row = $db->sql_fetchrow($result))		{			if ($row['field_default_value'] == 'now' && $row['field_type'] == FIELD_DATE)			{				$now = getdate();				$row['field_default_value'] = sprintf('%2d-%2d-%4d', $now['mday'], $now['mon'], $now['year']);			}			else if ($row['field_default_value'] === '' && $row['field_type'] == FIELD_INT)			{				// We cannot insert an empty string into an integer column.				$row['field_default_value'] = NULL;			}			$cp_data['pf_' . $row['field_ident']] = (in_array($row['field_type'], array(FIELD_TEXT, FIELD_STRING))) ? $row['lang_default_value'] : $row['field_default_value'];		}		$db->sql_freeresult($result);		return $cp_data;	}	/**	* Get profile field value on submit	* @access private	*/	function get_profile_field($profile_row)	{		global $phpbb_root_path, $phpEx;		global $config;		$var_name = 'pf_' . $profile_row['field_ident'];		switch ($profile_row['field_type'])		{			case FIELD_DATE:				if (!isset($_REQUEST[$var_name . '_day']))				{					if ($profile_row['field_default_value'] == 'now')					{						$now = getdate();						$profile_row['field_default_value'] = sprintf('%2d-%2d-%4d', $now['mday'], $now['mon'], $now['year']);					}					list($day, $month, $year) = explode('-', $profile_row['field_default_value']);				}				else				{					$day = request_var($var_name . '_day', 0);					$month = request_var($var_name . '_month', 0);					$year = request_var($var_name . '_year', 0);				}				$var = sprintf('%2d-%2d-%4d', $day, $month, $year);			break;			case FIELD_BOOL:				// Checkbox				if ($profile_row['field_length'] == 2)				{					$var = (isset($_REQUEST[$var_name])) ? 1 : 0;				}				else				{					$var = request_var($var_name, (int) $profile_row['field_default_value']);				}			break;			case FIELD_STRING:			case FIELD_TEXT:				$var = utf8_normalize_nfc(request_var($var_name, (string) $profile_row['field_default_value'], true));			break;			case FIELD_INT:				if (isset($_REQUEST[$var_name]) && $_REQUEST[$var_name] === '')				{					$var = NULL;				}				else				{					$var = request_var($var_name, (int) $profile_row['field_default_value']);				}			break;			case FIELD_DROPDOWN:				$var = request_var($var_name, (int) $profile_row['field_default_value']);			break;			default:				$var = request_var($var_name, $profile_row['field_default_value']);			break;		}		return $var;	}}/*** Custom Profile Fields ACP* @package phpBB3*/class custom_profile_admin extends custom_profile{	var $vars = array();	/**	* Return possible validation options	*/	function validate_options()	{		global $user;		$validate_ary = array('CHARS_ANY' => '.*', 'NUMBERS_ONLY' => '[0-9]+', 'ALPHA_ONLY' => '[\w]+', 'ALPHA_SPACERS' => '[\w_\+\. \-\[\]]+');		$validate_options = '';		foreach ($validate_ary as $lang => $value)		{			$selected = ($this->vars['field_validation'] == $value) ? ' selected="selected"' : '';			$validate_options .= '<option value="' . $value . '"' . $selected . '>' . $user->lang[$lang] . '</option>';		}		return $validate_options;	}	/**	* Get string options for second step in ACP	*/	function get_string_options()	{		global $user;		$options = array(			0 => array('TITLE' => $user->lang['FIELD_LENGTH'],		'FIELD' => '<input type="text" name="field_length" size="5" value="' . $this->vars['field_length'] . '" />'),			1 => array('TITLE' => $user->lang['MIN_FIELD_CHARS'],	'FIELD' => '<input type="text" name="field_minlen" size="5" value="' . $this->vars['field_minlen'] . '" />'),			2 => array('TITLE' => $user->lang['MAX_FIELD_CHARS'],	'FIELD' => '<input type="text" name="field_maxlen" size="5" value="' . $this->vars['field_maxlen'] . '" />'),			3 => array('TITLE' => $user->lang['FIELD_VALIDATION'],	'FIELD' => '<select name="field_validation">' . $this->validate_options() . '</select>')		);		return $options;	}	/**	* Get text options for second step in ACP	*/	function get_text_options()	{		global $user;		$options = array(			0 => array('TITLE' => $user->lang['FIELD_LENGTH'],		'FIELD' => '<input name="rows" size="5" value="' . $this->vars['rows'] . '" /> ' . $user->lang['ROWS'] . '</dd><dd><input name="columns" size="5" value="' . $this->vars['columns'] . '" /> ' . $user->lang['COLUMNS'] . ' <input type="hidden" name="field_length" value="' . $this->vars['field_length'] . '" />'),			1 => array('TITLE' => $user->lang['MIN_FIELD_CHARS'],	'FIELD' => '<input type="text" name="field_minlen" size="10" value="' . $this->vars['field_minlen'] . '" />'),			2 => array('TITLE' => $user->lang['MAX_FIELD_CHARS'],	'FIELD' => '<input type="text" name="field_maxlen" size="10" value="' . $this->vars['field_maxlen'] . '" />'),			3 => array('TITLE' => $user->lang['FIELD_VALIDATION'],	'FIELD' => '<select name="field_validation">' . $this->validate_options() . '</select>')		);		return $options;	}	/**	* Get int options for second step in ACP	*/	function get_int_options()	{		global $user;		$options = array(			0 => array('TITLE' => $user->lang['FIELD_LENGTH'],		'FIELD' => '<input type="text" name="field_length" size="5" value="' . $this->vars['field_length'] . '" />'),			1 => array('TITLE' => $user->lang['MIN_FIELD_NUMBER'],	'FIELD' => '<input type="text" name="field_minlen" size="5" value="' . $this->vars['field_minlen'] . '" />'),			2 => array('TITLE' => $user->lang['MAX_FIELD_NUMBER'],	'FIELD' => '<input type="text" name="field_maxlen" size="5" value="' . $this->vars['field_maxlen'] . '" />'),			3 => array('TITLE' => $user->lang['DEFAULT_VALUE'],		'FIELD' => '<input type="post" name="field_default_value" value="' . $this->vars['field_default_value'] . '" />')		);		return $options;	}	/**	* Get bool options for second step in ACP	*/	function get_bool_options()	{		global $user, $config, $lang_defs;		$default_lang_id = $lang_defs['iso'][$config['default_lang']];		$profile_row = array(			'var_name'				=> 'field_default_value',			'field_id'				=> 1,			'lang_name'				=> $this->vars['lang_name'],			'lang_explain'			=> $this->vars['lang_explain'],			'lang_id'				=> $default_lang_id,			'field_default_value'	=> $this->vars['field_default_value'],			'field_ident'			=> 'field_default_value',			'field_type'			=> FIELD_BOOL,			'field_length'			=> $this->vars['field_length'],			'lang_options'			=> $this->vars['lang_options']		);		$options = array(			0 => array('TITLE' => $user->lang['FIELD_TYPE'], 'EXPLAIN' => $user->lang['BOOL_TYPE_EXPLAIN'], 'FIELD' => '<label><input type="radio" class="radio" name="field_length" value="1"' . (($this->vars['field_length'] == 1) ? ' checked="checked"' : '') . ' onchange="document.getElementById(\'add_profile_field\').submit();" /> ' . $user->lang['RADIO_BUTTONS'] . '</label><label><input type="radio" class="radio" name="field_length" value="2"' . (($this->vars['field_length'] == 2) ? ' checked="checked"' : '') . ' onchange="document.getElementById(\'add_profile_field\').submit();" /> ' . $user->lang['CHECKBOX'] . '</label>'),			1 => array('TITLE' => $user->lang['DEFAULT_VALUE'], 'FIELD' => $this->process_field_row('preview', $profile_row))		);		return $options;	}	/**	* Get dropdown options for second step in ACP	*/	function get_dropdown_options()	{		global $user, $config, $lang_defs;		$default_lang_id = $lang_defs['iso'][$config['default_lang']];		$profile_row[0] = array(			'var_name'				=> 'field_default_value',			'field_id'				=> 1,			'lang_name'				=> $this->vars['lang_name'],			'lang_explain'			=> $this->vars['lang_explain'],			'lang_id'				=> $default_lang_id,			'field_default_value'	=> $this->vars['field_default_value'],			'field_ident'			=> 'field_default_value',			'field_type'			=> FIELD_DROPDOWN,			'lang_options'			=> $this->vars['lang_options']		);		$profile_row[1] = $profile_row[0];		$profile_row[1]['var_name'] = 'field_novalue';		$profile_row[1]['field_ident'] = 'field_novalue';		$profile_row[1]['field_default_value']	= $this->vars['field_novalue'];		$options = array(			0 => array('TITLE' => $user->lang['DEFAULT_VALUE'], 'FIELD' => $this->process_field_row('preview', $profile_row[0])),			1 => array('TITLE' => $user->lang['NO_VALUE_OPTION'], 'EXPLAIN' => $user->lang['NO_VALUE_OPTION_EXPLAIN'], 'FIELD' => $this->process_field_row('preview', $profile_row[1]))		);		return $options;	}	/**	* Get date options for second step in ACP	*/	function get_date_options()	{		global $user, $config, $lang_defs;		$default_lang_id = $lang_defs['iso'][$config['default_lang']];		$profile_row = array(			'var_name'				=> 'field_default_value',			'lang_name'				=> $this->vars['lang_name'],			'lang_explain'			=> $this->vars['lang_explain'],			'lang_id'				=> $default_lang_id,			'field_default_value'	=> $this->vars['field_default_value'],			'field_ident'			=> 'field_default_value',			'field_type'			=> FIELD_DATE,			'field_length'			=> $this->vars['field_length']		);		$always_now = request_var('always_now', -1);		if ($always_now == -1)		{			$s_checked = ($this->vars['field_default_value'] == 'now') ? true : false;		}		else		{			$s_checked = ($always_now) ? true : false;		}		$options = array(			0 => array('TITLE' => $user->lang['DEFAULT_VALUE'],	'FIELD' => $this->process_field_row('preview', $profile_row)),			1 => array('TITLE' => $user->lang['ALWAYS_TODAY'],	'FIELD' => '<label><input type="radio" class="radio" name="always_now" value="1"' . (($s_checked) ? ' checked="checked"' : '') . ' onchange="document.getElementById(\'add_profile_field\').submit();" /> ' . $user->lang['YES'] . '</label><label><input type="radio" class="radio" name="always_now" value="0"' . ((!$s_checked) ? ' checked="checked"' : '') . ' onchange="document.getElementById(\'add_profile_field\').submit();" /> ' . $user->lang['NO'] . '</label>'),		);		return $options;	}}?>
<?php/**** @package acp* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @ignore*/if (!defined('IN_PHPBB')){	exit;}/*** @package acp*/class acp_users{	var $u_action;	var $p_master;	function acp_users(&$p_master)	{		$this->p_master = &$p_master;	}	function main($id, $mode)	{		global $config, $db, $user, $auth, $template, $cache;		global $phpbb_root_path, $phpbb_admin_path, $phpEx, $table_prefix, $file_uploads;		$user->add_lang(array('posting', 'ucp', 'acp/users'));		$this->tpl_name = 'acp_users';		$this->page_title = 'ACP_USER_' . strtoupper($mode);		$error		= array();		$username	= utf8_normalize_nfc(request_var('username', '', true));		$user_id	= request_var('u', 0);		$action		= request_var('action', '');		$submit		= (isset($_POST['update']) && !isset($_POST['cancel'])) ? true : false;		$form_name = 'acp_users';		add_form_key($form_name);		// Whois (special case)		if ($action == 'whois')		{			include($phpbb_root_path . 'includes/functions_user.' . $phpEx);			$this->page_title = 'WHOIS';			$this->tpl_name = 'simple_body';			$user_ip = request_var('user_ip', '');			$domain = gethostbyaddr($user_ip);			$ipwhois = user_ipwhois($user_ip);			$template->assign_vars(array(				'MESSAGE_TITLE'		=> sprintf($user->lang['IP_WHOIS_FOR'], $domain),				'MESSAGE_TEXT'		=> nl2br($ipwhois))			);			return;		}		// Show user selection mask		if (!$username && !$user_id)		{			$this->page_title = 'SELECT_USER';			$template->assign_vars(array(				'U_ACTION'			=> $this->u_action,				'ANONYMOUS_USER_ID'	=> ANONYMOUS,				'S_SELECT_USER'		=> true,				'U_FIND_USERNAME'	=> append_sid("{$phpbb_root_path}memberlist.$phpEx", 'mode=searchuser&amp;form=select_user&amp;field=username&amp;select_single=true'),			));			return;		}		if (!$user_id)		{			$sql = 'SELECT user_id				FROM ' . USERS_TABLE . "				WHERE username_clean = '" . $db->sql_escape(utf8_clean_string($username)) . "'";			$result = $db->sql_query($sql);			$user_id = (int) $db->sql_fetchfield('user_id');			$db->sql_freeresult($result);			if (!$user_id)			{				trigger_error($user->lang['NO_USER'] . adm_back_link($this->u_action), E_USER_WARNING);			}		}		// Generate content for all modes		$sql = 'SELECT u.*, s.*			FROM ' . USERS_TABLE . ' u				LEFT JOIN ' . SESSIONS_TABLE . ' s ON (s.session_user_id = u.user_id)			WHERE u.user_id = ' . $user_id . '			ORDER BY s.session_time DESC';		$result = $db->sql_query_limit($sql, 1);		$user_row = $db->sql_fetchrow($result);		$db->sql_freeresult($result);		if (!$user_row)		{			trigger_error($user->lang['NO_USER'] . adm_back_link($this->u_action), E_USER_WARNING);		}		// Generate overall "header" for user admin		$s_form_options = '';		// Build modes dropdown list		$sql = 'SELECT module_mode, module_auth			FROM ' . MODULES_TABLE . "			WHERE module_basename = 'users'				AND module_enabled = 1				AND module_class = 'acp'			ORDER BY left_id, module_mode";		$result = $db->sql_query($sql);		$dropdown_modes = array();		while ($row = $db->sql_fetchrow($result))		{			if (!$this->p_master->module_auth($row['module_auth']))			{				continue;			}			$dropdown_modes[$row['module_mode']] = true;		}		$db->sql_freeresult($result);		foreach ($dropdown_modes as $module_mode => $null)		{			$selected = ($mode == $module_mode) ? ' selected="selected"' : '';			$s_form_options .= '<option value="' . $module_mode . '"' . $selected . '>' . $user->lang['ACP_USER_' . strtoupper($module_mode)] . '</option>';		}		$template->assign_vars(array(			'U_BACK'			=> $this->u_action,			'U_MODE_SELECT'		=> append_sid("{$phpbb_admin_path}index.$phpEx", "i=$id&amp;u=$user_id"),			'U_ACTION'			=> $this->u_action . '&amp;u=' . $user_id,			'S_FORM_OPTIONS'	=> $s_form_options,			'MANAGED_USERNAME'	=> $user_row['username'])		);		// Prevent normal users/admins change/view founders if they are not a founder by themselves		if ($user->data['user_type'] != USER_FOUNDER && $user_row['user_type'] == USER_FOUNDER)		{			trigger_error($user->lang['NOT_MANAGE_FOUNDER'] . adm_back_link($this->u_action), E_USER_WARNING);		}		switch ($mode)		{			case 'overview':				include($phpbb_root_path . 'includes/functions_user.' . $phpEx);				$user->add_lang('acp/ban');				$delete			= request_var('delete', 0);				$delete_type	= request_var('delete_type', '');				$ip				= request_var('ip', 'ip');				if ($submit)				{					// You can't delete the founder					if ($delete && $user_row['user_type'] != USER_FOUNDER)					{						if (!$auth->acl_get('a_userdel'))						{							trigger_error($user->lang['NO_AUTH_OPERATION'] . adm_back_link($this->u_action . '&amp;u=' . $user_id), E_USER_WARNING);						}						// Check if the user wants to remove himself or the guest user account						if ($user_id == ANONYMOUS)						{							trigger_error($user->lang['CANNOT_REMOVE_ANONYMOUS'] . adm_back_link($this->u_action . '&amp;u=' . $user_id), E_USER_WARNING);						}						if ($user_id == $user->data['user_id'])						{							trigger_error($user->lang['CANNOT_REMOVE_YOURSELF'] . adm_back_link($this->u_action . '&amp;u=' . $user_id), E_USER_WARNING);						}						if ($delete_type)						{							if (confirm_box(true))							{								user_delete($delete_type, $user_id, $user_row['username']);								add_log('admin', 'LOG_USER_DELETED', $user_row['username']);								trigger_error($user->lang['USER_DELETED'] . adm_back_link($this->u_action));							}							else							{								confirm_box(false, $user->lang['CONFIRM_OPERATION'], build_hidden_fields(array(									'u'				=> $user_id,									'i'				=> $id,									'mode'			=> $mode,									'action'		=> $action,									'update'		=> true,									'delete'		=> 1,									'delete_type'	=> $delete_type))								);							}						}						else						{							trigger_error($user->lang['NO_MODE'] . adm_back_link($this->u_action . '&amp;u=' . $user_id), E_USER_WARNING);						}					}					// Handle quicktool actions					switch ($action)					{						case 'banuser':						case 'banemail':						case 'banip':							if ($user_id == $user->data['user_id'])							{								trigger_error($user->lang['CANNOT_BAN_YOURSELF'] . adm_back_link($this->u_action . '&amp;u=' . $user_id), E_USER_WARNING);							}							if ($user_id == ANONYMOUS)							{								trigger_error($user->lang['CANNOT_BAN_ANONYMOUS'] . adm_back_link($this->u_action . '&amp;u=' . $user_id), E_USER_WARNING);							}							if ($user_row['user_type'] == USER_FOUNDER)							{								trigger_error($user->lang['CANNOT_BAN_FOUNDER'] . adm_back_link($this->u_action . '&amp;u=' . $user_id), E_USER_WARNING);							}							if (!check_form_key($form_name))							{								trigger_error($user->lang['FORM_INVALID'] . adm_back_link($this->u_action . '&amp;u=' . $user_id), E_USER_WARNING);							}							$ban = array();							switch ($action)							{								case 'banuser':									$ban[] = $user_row['username'];									$reason = 'USER_ADMIN_BAN_NAME_REASON';									$log = 'LOG_USER_BAN_USER';								break;								case 'banemail':									$ban[] = $user_row['user_email'];									$reason = 'USER_ADMIN_BAN_EMAIL_REASON';									$log = 'LOG_USER_BAN_EMAIL';								break;								case 'banip':									$ban[] = $user_row['user_ip'];									$sql = 'SELECT DISTINCT poster_ip										FROM ' . POSTS_TABLE . "										WHERE poster_id = $user_id";									$result = $db->sql_query($sql);									while ($row = $db->sql_fetchrow($result))									{										$ban[] = $row['poster_ip'];									}									$db->sql_freeresult($result);									$reason = 'USER_ADMIN_BAN_IP_REASON';									$log = 'LOG_USER_BAN_IP';								break;							}							$ban_reason = utf8_normalize_nfc(request_var('ban_reason', $user->lang[$reason], true));							$ban_give_reason = utf8_normalize_nfc(request_var('ban_give_reason', '', true));							// Log not used at the moment, we simply utilize the ban function.							$result = user_ban(substr($action, 3), $ban, 0, 0, 0, $ban_reason, $ban_give_reason);							trigger_error((($result === false) ? $user->lang['BAN_ALREADY_ENTERED'] : $user->lang['BAN_SUCCESSFUL']) . adm_back_link($this->u_action . '&amp;u=' . $user_id));						break;						case 'reactivate':							if ($user_id == $user->data['user_id'])							{								trigger_error($user->lang['CANNOT_FORCE_REACT_YOURSELF'] . adm_back_link($this->u_action . '&amp;u=' . $user_id), E_USER_WARNING);							}							if (!check_form_key($form_name))							{								trigger_error($user->lang['FORM_INVALID'] . adm_back_link($this->u_action . '&amp;u=' . $user_id), E_USER_WARNING);							}							if ($user_row['user_type'] == USER_FOUNDER)							{								trigger_error($user->lang['CANNOT_FORCE_REACT_FOUNDER'] . adm_back_link($this->u_action . '&amp;u=' . $user_id), E_USER_WARNING);							}							if ($user_row['user_type'] == USER_IGNORE)							{								trigger_error($user->lang['CANNOT_FORCE_REACT_BOT'] . adm_back_link($this->u_action . '&amp;u=' . $user_id), E_USER_WARNING);							}							if ($config['email_enable'])							{								include_once($phpbb_root_path . 'includes/functions_messenger.' . $phpEx);								$server_url = generate_board_url();								$user_actkey = gen_rand_string(mt_rand(6, 10));								$email_template = ($user_row['user_type'] == USER_NORMAL) ? 'user_reactivate_account' : 'user_resend_inactive';								if ($user_row['user_type'] == USER_NORMAL)								{									user_active_flip('deactivate', $user_id, INACTIVE_REMIND);									$sql = 'UPDATE ' . USERS_TABLE . "										SET user_actkey = '" . $db->sql_escape($user_actkey) . "'										WHERE user_id = $user_id";									$db->sql_query($sql);								}								else								{									// Grabbing the last confirm key - we only send a reminder									$sql = 'SELECT user_actkey										FROM ' . USERS_TABLE . '										WHERE user_id = ' . $user_id;									$result = $db->sql_query($sql);									$user_actkey = (string) $db->sql_fetchfield('user_actkey');									$db->sql_freeresult($result);								}								$messenger = new messenger(false);								$messenger->template($email_template, $user_row['user_lang']);								$messenger->to($user_row['user_email'], $user_row['username']);								$messenger->anti_abuse_headers($config, $user);								$messenger->assign_vars(array(									'WELCOME_MSG'	=> htmlspecialchars_decode(sprintf($user->lang['WELCOME_SUBJECT'], $config['sitename'])),									'USERNAME'		=> htmlspecialchars_decode($user_row['username']),									'U_ACTIVATE'	=> "$server_url/ucp.$phpEx?mode=activate&u={$user_row['user_id']}&k=$user_actkey")								);								$messenger->send(NOTIFY_EMAIL);								add_log('admin', 'LOG_USER_REACTIVATE', $user_row['username']);								add_log('user', $user_id, 'LOG_USER_REACTIVATE_USER');								trigger_error($user->lang['FORCE_REACTIVATION_SUCCESS'] . adm_back_link($this->u_action . '&amp;u=' . $user_id));							}						break;						case 'active':							if ($user_id == $user->data['user_id'])							{								// It is only deactivation since the user is already activated (else he would not have reached this page)								trigger_error($user->lang['CANNOT_DEACTIVATE_YOURSELF'] . adm_back_link($this->u_action . '&amp;u=' . $user_id), E_USER_WARNING);							}							if (!check_form_key($form_name))							{								trigger_error($user->lang['FORM_INVALID'] . adm_back_link($this->u_action . '&amp;u=' . $user_id), E_USER_WARNING);							}							if ($user_row['user_type'] == USER_FOUNDER)							{								trigger_error($user->lang['CANNOT_DEACTIVATE_FOUNDER'] . adm_back_link($this->u_action . '&amp;u=' . $user_id), E_USER_WARNING);							}							if ($user_row['user_type'] == USER_IGNORE)							{								trigger_error($user->lang['CANNOT_DEACTIVATE_BOT'] . adm_back_link($this->u_action . '&amp;u=' . $user_id), E_USER_WARNING);							}							user_active_flip('flip', $user_id);							if ($user_row['user_type'] == USER_INACTIVE)							{								if ($config['require_activation'] == USER_ACTIVATION_ADMIN)								{									include_once($phpbb_root_path . 'includes/functions_messenger.' . $phpEx);									$messenger = new messenger(false);									$messenger->template('admin_welcome_activated', $user_row['user_lang']);									$messenger->to($user_row['user_email'], $user_row['username']);									$messenger->anti_abuse_headers($config, $user);									$messenger->assign_vars(array(										'USERNAME'	=> htmlspecialchars_decode($user_row['username']))									);									$messenger->send(NOTIFY_EMAIL);								}							}							$message = ($user_row['user_type'] == USER_INACTIVE) ? 'USER_ADMIN_ACTIVATED' : 'USER_ADMIN_DEACTIVED';							$log = ($user_row['user_type'] == USER_INACTIVE) ? 'LOG_USER_ACTIVE' : 'LOG_USER_INACTIVE';							add_log('admin', $log, $user_row['username']);							add_log('user', $user_id, $log . '_USER');							trigger_error($user->lang[$message] . adm_back_link($this->u_action . '&amp;u=' . $user_id));						break;						case 'delsig':							if (!check_form_key($form_name))							{								trigger_error($user->lang['FORM_INVALID'] . adm_back_link($this->u_action . '&amp;u=' . $user_id), E_USER_WARNING);							}							$sql_ary = array(								'user_sig'					=> '',								'user_sig_bbcode_uid'		=> '',								'user_sig_bbcode_bitfield'	=> ''							);							$sql = 'UPDATE ' . USERS_TABLE . ' SET ' . $db->sql_build_array('UPDATE', $sql_ary) . "								WHERE user_id = $user_id";							$db->sql_query($sql);							add_log('admin', 'LOG_USER_DEL_SIG', $user_row['username']);							add_log('user', $user_id, 'LOG_USER_DEL_SIG_USER');							trigger_error($user->lang['USER_ADMIN_SIG_REMOVED'] . adm_back_link($this->u_action . '&amp;u=' . $user_id));						break;						case 'delavatar':							if (!check_form_key($form_name))							{								trigger_error($user->lang['FORM_INVALID'] . adm_back_link($this->u_action . '&amp;u=' . $user_id), E_USER_WARNING);							}							$sql_ary = array(								'user_avatar'			=> '',								'user_avatar_type'		=> 0,								'user_avatar_width'		=> 0,								'user_avatar_height'	=> 0,							);							$sql = 'UPDATE ' . USERS_TABLE . '								SET ' . $db->sql_build_array('UPDATE', $sql_ary) . "								WHERE user_id = $user_id";							$db->sql_query($sql);							// Delete old avatar if present							if ($user_row['user_avatar'] && $user_row['user_avatar_type'] != AVATAR_GALLERY)							{								avatar_delete('user', $user_row);							}							add_log('admin', 'LOG_USER_DEL_AVATAR', $user_row['username']);							add_log('user', $user_id, 'LOG_USER_DEL_AVATAR_USER');							trigger_error($user->lang['USER_ADMIN_AVATAR_REMOVED'] . adm_back_link($this->u_action . '&amp;u=' . $user_id));						break;						case 'delposts':							if (confirm_box(true))							{								// Delete posts, attachments, etc.								delete_posts('poster_id', $user_id);								add_log('admin', 'LOG_USER_DEL_POSTS', $user_row['username']);								trigger_error($user->lang['USER_POSTS_DELETED'] . adm_back_link($this->u_action . '&amp;u=' . $user_id));							}							else							{								confirm_box(false, $user->lang['CONFIRM_OPERATION'], build_hidden_fields(array(									'u'				=> $user_id,									'i'				=> $id,									'mode'			=> $mode,									'action'		=> $action,									'update'		=> true))								);							}						break;						case 'delattach':							if (confirm_box(true))							{								delete_attachments('user', $user_id);								add_log('admin', 'LOG_USER_DEL_ATTACH', $user_row['username']);								trigger_error($user->lang['USER_ATTACHMENTS_REMOVED'] . adm_back_link($this->u_action . '&amp;u=' . $user_id));							}							else							{								confirm_box(false, $user->lang['CONFIRM_OPERATION'], build_hidden_fields(array(									'u'				=> $user_id,									'i'				=> $id,									'mode'			=> $mode,									'action'		=> $action,									'update'		=> true))								);							}						break;						case 'deloutbox':							if (confirm_box(true))							{								$msg_ids = array();								$lang = 'EMPTY';								$sql = 'SELECT msg_id									FROM ' . PRIVMSGS_TO_TABLE . "									WHERE author_id = $user_id										AND folder_id = " . PRIVMSGS_OUTBOX;								$result = $db->sql_query($sql);								if ($row = $db->sql_fetchrow($result))								{									if (!function_exists('delete_pm'))									{										include($phpbb_root_path . 'includes/functions_privmsgs.' . $phpEx);									}									do									{										$msg_ids[] = (int) $row['msg_id'];									}									while ($row = $db->sql_fetchrow($result));									$db->sql_freeresult($result);									delete_pm($user_id, $msg_ids, PRIVMSGS_OUTBOX);									add_log('admin', 'LOG_USER_DEL_OUTBOX', $user_row['username']);									$lang = 'EMPTIED';								}								$db->sql_freeresult($result);								trigger_error($user->lang['USER_OUTBOX_' . $lang] . adm_back_link($this->u_action . '&amp;u=' . $user_id));							}							else							{								confirm_box(false, $user->lang['CONFIRM_OPERATION'], build_hidden_fields(array(									'u'				=> $user_id,									'i'				=> $id,									'mode'			=> $mode,									'action'		=> $action,									'update'		=> true))								);							}						break;						case 'moveposts':							if (!check_form_key($form_name))							{								trigger_error($user->lang['FORM_INVALID'] . adm_back_link($this->u_action . '&amp;u=' . $user_id), E_USER_WARNING);							}							$user->add_lang('acp/forums');							$new_forum_id = request_var('new_f', 0);							if (!$new_forum_id)							{								$this->page_title = 'USER_ADMIN_MOVE_POSTS';								$template->assign_vars(array(									'S_SELECT_FORUM'		=> true,									'U_ACTION'				=> $this->u_action . "&amp;action=$action&amp;u=$user_id",									'U_BACK'				=> $this->u_action . "&amp;u=$user_id",									'S_FORUM_OPTIONS'		=> make_forum_select(false, false, false, true))								);								return;							}							// Is the new forum postable to?							$sql = 'SELECT forum_name, forum_type								FROM ' . FORUMS_TABLE . "								WHERE forum_id = $new_forum_id";							$result = $db->sql_query($sql);							$forum_info = $db->sql_fetchrow($result);							$db->sql_freeresult($result);							if (!$forum_info)							{								trigger_error($user->lang['NO_FORUM'] . adm_back_link($this->u_action . '&amp;u=' . $user_id), E_USER_WARNING);							}							if ($forum_info['forum_type'] != FORUM_POST)							{								trigger_error($user->lang['MOVE_POSTS_NO_POSTABLE_FORUM'] . adm_back_link($this->u_action . '&amp;u=' . $user_id), E_USER_WARNING);							}							// Two stage?							// Move topics comprising only posts from this user							$topic_id_ary = $move_topic_ary = $move_post_ary = $new_topic_id_ary = array();							$forum_id_ary = array($new_forum_id);							$sql = 'SELECT topic_id, COUNT(post_id) AS total_posts								FROM ' . POSTS_TABLE . "								WHERE poster_id = $user_id									AND forum_id <> $new_forum_id								GROUP BY topic_id";							$result = $db->sql_query($sql);							while ($row = $db->sql_fetchrow($result))							{								$topic_id_ary[$row['topic_id']] = $row['total_posts'];							}							$db->sql_freeresult($result);							if (sizeof($topic_id_ary))							{								$sql = 'SELECT topic_id, forum_id, topic_title, topic_replies, topic_replies_real, topic_attachment									FROM ' . TOPICS_TABLE . '									WHERE ' . $db->sql_in_set('topic_id', array_keys($topic_id_ary));								$result = $db->sql_query($sql);								while ($row = $db->sql_fetchrow($result))								{									if (max($row['topic_replies'], $row['topic_replies_real']) + 1 == $topic_id_ary[$row['topic_id']])									{										$move_topic_ary[] = $row['topic_id'];									}									else									{										$move_post_ary[$row['topic_id']]['title'] = $row['topic_title'];										$move_post_ary[$row['topic_id']]['attach'] = ($row['topic_attachment']) ? 1 : 0;									}									$forum_id_ary[] = $row['forum_id'];								}								$db->sql_freeresult($result);							}							// Entire topic comprises posts by this user, move these topics							if (sizeof($move_topic_ary))							{								move_topics($move_topic_ary, $new_forum_id, false);							}							if (sizeof($move_post_ary))							{								// Create new topic								// Update post_ids, report_ids, attachment_ids								foreach ($move_post_ary as $topic_id => $post_ary)								{									// Create new topic									$sql = 'INSERT INTO ' . TOPICS_TABLE . ' ' . $db->sql_build_array('INSERT', array(										'topic_poster'				=> $user_id,										'topic_time'				=> time(),										'forum_id' 					=> $new_forum_id,										'icon_id'					=> 0,										'topic_approved'			=> 1,										'topic_title' 				=> $post_ary['title'],										'topic_first_poster_name'	=> $user_row['username'],										'topic_type'				=> POST_NORMAL,										'topic_time_limit'			=> 0,										'topic_attachment'			=> $post_ary['attach'])									);									$db->sql_query($sql);									$new_topic_id = $db->sql_nextid();									// Move posts									$sql = 'UPDATE ' . POSTS_TABLE . "										SET forum_id = $new_forum_id, topic_id = $new_topic_id										WHERE topic_id = $topic_id											AND poster_id = $user_id";									$db->sql_query($sql);									if ($post_ary['attach'])									{										$sql = 'UPDATE ' . ATTACHMENTS_TABLE . "											SET topic_id = $new_topic_id											WHERE topic_id = $topic_id												AND poster_id = $user_id";										$db->sql_query($sql);									}									$new_topic_id_ary[] = $new_topic_id;								}							}							$forum_id_ary = array_unique($forum_id_ary);							$topic_id_ary = array_unique(array_merge(array_keys($topic_id_ary), $new_topic_id_ary));							if (sizeof($topic_id_ary))							{								sync('topic_reported', 'topic_id', $topic_id_ary);								sync('topic', 'topic_id', $topic_id_ary);							}							if (sizeof($forum_id_ary))							{								sync('forum', 'forum_id', $forum_id_ary, false, true);							}							add_log('admin', 'LOG_USER_MOVE_POSTS', $user_row['username'], $forum_info['forum_name']);							add_log('user', $user_id, 'LOG_USER_MOVE_POSTS_USER', $forum_info['forum_name']);							trigger_error($user->lang['USER_POSTS_MOVED'] . adm_back_link($this->u_action . '&amp;u=' . $user_id));						break;						case 'leave_nr':							if (confirm_box(true))							{								remove_newly_registered($user_id, $user_row);								add_log('admin', 'LOG_USER_REMOVED_NR', $user_row['username']);								trigger_error($user->lang['USER_LIFTED_NR'] . adm_back_link($this->u_action . '&amp;u=' . $user_id));							}							else							{								confirm_box(false, $user->lang['CONFIRM_OPERATION'], build_hidden_fields(array(									'u'				=> $user_id,									'i'				=> $id,									'mode'			=> $mode,									'action'		=> $action,									'update'		=> true))								);							}						break;					}					// Handle registration info updates					$data = array(						'username'			=> utf8_normalize_nfc(request_var('user', $user_row['username'], true)),						'user_founder'		=> request_var('user_founder', ($user_row['user_type'] == USER_FOUNDER) ? 1 : 0),						'email'				=> strtolower(request_var('user_email', $user_row['user_email'])),						'email_confirm'		=> strtolower(request_var('email_confirm', '')),						'new_password'		=> request_var('new_password', '', true),						'password_confirm'	=> request_var('password_confirm', '', true),					);					// Validation data - we do not check the password complexity setting here					$check_ary = array(						'new_password'		=> array(							array('string', true, $config['min_pass_chars'], $config['max_pass_chars']),							array('password')),						'password_confirm'	=> array('string', true, $config['min_pass_chars'], $config['max_pass_chars']),					);					// Check username if altered					if ($data['username'] != $user_row['username'])					{						$check_ary += array(							'username'			=> array(								array('string', false, $config['min_name_chars'], $config['max_name_chars']),								array('username', $user_row['username'])							),						);					}					// Check email if altered					if ($data['email'] != $user_row['user_email'])					{						$check_ary += array(							'email'				=> array(								array('string', false, 6, 60),								array('email', $user_row['user_email'])							),							'email_confirm'		=> array('string', true, 6, 60)						);					}					$error = validate_data($data, $check_ary);					if ($data['new_password'] && $data['password_confirm'] != $data['new_password'])					{						$error[] = 'NEW_PASSWORD_ERROR';					}					if ($data['email'] != $user_row['user_email'] && $data['email_confirm'] != $data['email'])					{						$error[] = 'NEW_EMAIL_ERROR';					}					if (!check_form_key($form_name))					{						$error[] = 'FORM_INVALID';					}					// Which updates do we need to do?					$update_username = ($user_row['username'] != $data['username']) ? $data['username'] : false;					$update_password = ($data['new_password'] && !phpbb_check_hash($data['new_password'], $user_row['user_password'])) ? true : false;					$update_email = ($data['email'] != $user_row['user_email']) ? $data['email'] : false;					if (!sizeof($error))					{						$sql_ary = array();						if ($user_row['user_type'] != USER_FOUNDER || $user->data['user_type'] == USER_FOUNDER)						{							// Only allow founders updating the founder status...							if ($user->data['user_type'] == USER_FOUNDER)							{								// Setting a normal member to be a founder								if ($data['user_founder'] && $user_row['user_type'] != USER_FOUNDER)								{									// Make sure the user is not setting an Inactive or ignored user to be a founder									if ($user_row['user_type'] == USER_IGNORE)									{										trigger_error($user->lang['CANNOT_SET_FOUNDER_IGNORED'] . adm_back_link($this->u_action . '&amp;u=' . $user_id), E_USER_WARNING);									}									if ($user_row['user_type'] == USER_INACTIVE)									{										trigger_error($user->lang['CANNOT_SET_FOUNDER_INACTIVE'] . adm_back_link($this->u_action . '&amp;u=' . $user_id), E_USER_WARNING);									}									$sql_ary['user_type'] = USER_FOUNDER;								}								else if (!$data['user_founder'] && $user_row['user_type'] == USER_FOUNDER)								{									// Check if at least one founder is present									$sql = 'SELECT user_id										FROM ' . USERS_TABLE . '										WHERE user_type = ' . USER_FOUNDER . '											AND user_id <> ' . $user_id;									$result = $db->sql_query_limit($sql, 1);									$row = $db->sql_fetchrow($result);									$db->sql_freeresult($result);									if ($row)									{										$sql_ary['user_type'] = USER_NORMAL;									}									else									{										trigger_error($user->lang['AT_LEAST_ONE_FOUNDER'] . adm_back_link($this->u_action . '&amp;u=' . $user_id), E_USER_WARNING);									}								}							}						}						if ($update_username !== false)						{							$sql_ary['username'] = $update_username;							$sql_ary['username_clean'] = utf8_clean_string($update_username);							add_log('user', $user_id, 'LOG_USER_UPDATE_NAME', $user_row['username'], $update_username);						}						if ($update_email !== false)						{							$sql_ary += array(								'user_email'		=> $update_email,								'user_email_hash'	=> phpbb_email_hash($update_email),							);							add_log('user', $user_id, 'LOG_USER_UPDATE_EMAIL', $user_row['username'], $user_row['user_email'], $update_email);						}						if ($update_password)						{							$sql_ary += array(								'user_password'		=> phpbb_hash($data['new_password']),								'user_passchg'		=> time(),								'user_pass_convert'	=> 0,							);							$user->reset_login_keys($user_id);							add_log('user', $user_id, 'LOG_USER_NEW_PASSWORD', $user_row['username']);						}						if (sizeof($sql_ary))						{							$sql = 'UPDATE ' . USERS_TABLE . '								SET ' . $db->sql_build_array('UPDATE', $sql_ary) . '								WHERE user_id = ' . $user_id;							$db->sql_query($sql);						}						if ($update_username)						{							user_update_name($user_row['username'], $update_username);						}						// Let the users permissions being updated						$auth->acl_clear_prefetch($user_id);						add_log('admin', 'LOG_USER_USER_UPDATE', $data['username']);						trigger_error($user->lang['USER_OVERVIEW_UPDATED'] . adm_back_link($this->u_action . '&amp;u=' . $user_id));					}					// Replace "error" strings with their real, localised form					$error = preg_replace('#^([A-Z_]+)$#e', "(!empty(\$user->lang['\\1'])) ? \$user->lang['\\1'] : '\\1'", $error);				}				if ($user_id == $user->data['user_id'])				{					$quick_tool_ary = array('delsig' => 'DEL_SIG', 'delavatar' => 'DEL_AVATAR', 'moveposts' => 'MOVE_POSTS', 'delposts' => 'DEL_POSTS', 'delattach' => 'DEL_ATTACH', 'deloutbox' => 'DEL_OUTBOX');					if ($user_row['user_new'])					{						$quick_tool_ary['leave_nr'] = 'LEAVE_NR';					}				}				else				{					$quick_tool_ary = array();					if ($user_row['user_type'] != USER_FOUNDER)					{						$quick_tool_ary += array('banuser' => 'BAN_USER', 'banemail' => 'BAN_EMAIL', 'banip' => 'BAN_IP');					}					if ($user_row['user_type'] != USER_FOUNDER && $user_row['user_type'] != USER_IGNORE)					{						$quick_tool_ary += array('active' => (($user_row['user_type'] == USER_INACTIVE) ? 'ACTIVATE' : 'DEACTIVATE'));					}					$quick_tool_ary += array('delsig' => 'DEL_SIG', 'delavatar' => 'DEL_AVATAR', 'moveposts' => 'MOVE_POSTS', 'delposts' => 'DEL_POSTS', 'delattach' => 'DEL_ATTACH', 'deloutbox' => 'DEL_OUTBOX');					if ($config['email_enable'] && ($user_row['user_type'] == USER_NORMAL || $user_row['user_type'] == USER_INACTIVE))					{						$quick_tool_ary['reactivate'] = 'FORCE';					}					if ($user_row['user_new'])					{						$quick_tool_ary['leave_nr'] = 'LEAVE_NR';					}				}				$s_action_options = '<option class="sep" value="">' . $user->lang['SELECT_OPTION'] . '</option>';				foreach ($quick_tool_ary as $value => $lang)				{					$s_action_options .= '<option value="' . $value . '">' . $user->lang['USER_ADMIN_' . $lang] . '</option>';				}				if ($config['load_onlinetrack'])				{					$sql = 'SELECT MAX(session_time) AS session_time, MIN(session_viewonline) AS session_viewonline						FROM ' . SESSIONS_TABLE . "						WHERE session_user_id = $user_id";					$result = $db->sql_query($sql);					$row = $db->sql_fetchrow($result);					$db->sql_freeresult($result);					$user_row['session_time'] = (isset($row['session_time'])) ? $row['session_time'] : 0;					$user_row['session_viewonline'] = (isset($row['session_viewonline'])) ? $row['session_viewonline'] : 0;					unset($row);				}				$last_visit = (!empty($user_row['session_time'])) ? $user_row['session_time'] : $user_row['user_lastvisit'];				$inactive_reason = '';				if ($user_row['user_type'] == USER_INACTIVE)				{					$inactive_reason = $user->lang['INACTIVE_REASON_UNKNOWN'];					switch ($user_row['user_inactive_reason'])					{						case INACTIVE_REGISTER:							$inactive_reason = $user->lang['INACTIVE_REASON_REGISTER'];						break;						case INACTIVE_PROFILE:							$inactive_reason = $user->lang['INACTIVE_REASON_PROFILE'];						break;						case INACTIVE_MANUAL:							$inactive_reason = $user->lang['INACTIVE_REASON_MANUAL'];						break;						case INACTIVE_REMIND:							$inactive_reason = $user->lang['INACTIVE_REASON_REMIND'];						break;					}				}				// Posts in Queue				$sql = 'SELECT COUNT(post_id) as posts_in_queue					FROM ' . POSTS_TABLE . '					WHERE poster_id = ' . $user_id . '						AND post_approved = 0';				$result = $db->sql_query($sql);				$user_row['posts_in_queue'] = (int) $db->sql_fetchfield('posts_in_queue');				$db->sql_freeresult($result);				$template->assign_vars(array(					'L_NAME_CHARS_EXPLAIN'		=> sprintf($user->lang[$config['allow_name_chars'] . '_EXPLAIN'], $config['min_name_chars'], $config['max_name_chars']),					'L_CHANGE_PASSWORD_EXPLAIN'	=> sprintf($user->lang[$config['pass_complex'] . '_EXPLAIN'], $config['min_pass_chars'], $config['max_pass_chars']),					'L_POSTS_IN_QUEUE'			=> $user->lang('NUM_POSTS_IN_QUEUE', $user_row['posts_in_queue']),					'S_FOUNDER'					=> ($user->data['user_type'] == USER_FOUNDER) ? true : false,					'S_OVERVIEW'		=> true,					'S_USER_IP'			=> ($user_row['user_ip']) ? true : false,					'S_USER_FOUNDER'	=> ($user_row['user_type'] == USER_FOUNDER) ? true : false,					'S_ACTION_OPTIONS'	=> $s_action_options,					'S_OWN_ACCOUNT'		=> ($user_id == $user->data['user_id']) ? true : false,					'S_USER_INACTIVE'	=> ($user_row['user_type'] == USER_INACTIVE) ? true : false,					'U_SHOW_IP'		=> $this->u_action . "&amp;u=$user_id&amp;ip=" . (($ip == 'ip') ? 'hostname' : 'ip'),					'U_WHOIS'		=> $this->u_action . "&amp;action=whois&amp;user_ip={$user_row['user_ip']}",					'U_MCP_QUEUE'	=> ($auth->acl_getf_global('m_approve')) ? append_sid("{$phpbb_root_path}mcp.$phpEx", 'i=queue', true, $user->session_id) : '',					'U_SWITCH_PERMISSIONS'	=> ($auth->acl_get('a_switchperm') && $user->data['user_id'] != $user_row['user_id']) ? append_sid("{$phpbb_root_path}ucp.$phpEx", "mode=switch_perm&amp;u={$user_row['user_id']}&amp;hash=" . generate_link_hash('switchperm')) : '',					'POSTS_IN_QUEUE'	=> $user_row['posts_in_queue'],					'USER'				=> $user_row['username'],					'USER_REGISTERED'	=> $user->format_date($user_row['user_regdate']),					'REGISTERED_IP'		=> ($ip == 'hostname') ? gethostbyaddr($user_row['user_ip']) : $user_row['user_ip'],					'USER_LASTACTIVE'	=> ($last_visit) ? $user->format_date($last_visit) : ' - ',					'USER_EMAIL'		=> $user_row['user_email'],					'USER_WARNINGS'		=> $user_row['user_warnings'],					'USER_POSTS'		=> $user_row['user_posts'],					'USER_INACTIVE_REASON'	=> $inactive_reason,				));			break;			case 'feedback':				$user->add_lang('mcp');				// Set up general vars				$start		= request_var('start', 0);				$deletemark = (isset($_POST['delmarked'])) ? true : false;				$deleteall	= (isset($_POST['delall'])) ? true : false;				$marked		= request_var('mark', array(0));				$message	= utf8_normalize_nfc(request_var('message', '', true));				// Sort keys				$sort_days	= request_var('st', 0);				$sort_key	= request_var('sk', 't');				$sort_dir	= request_var('sd', 'd');				// Delete entries if requested and able				if (($deletemark || $deleteall) && $auth->acl_get('a_clearlogs'))				{					if (!check_form_key($form_name))					{						trigger_error($user->lang['FORM_INVALID'] . adm_back_link($this->u_action . '&amp;u=' . $user_id), E_USER_WARNING);					}					$where_sql = '';					if ($deletemark && $marked)					{						$sql_in = array();						foreach ($marked as $mark)						{							$sql_in[] = $mark;						}						$where_sql = ' AND ' . $db->sql_in_set('log_id', $sql_in);						unset($sql_in);					}					if ($where_sql || $deleteall)					{						$sql = 'DELETE FROM ' . LOG_TABLE . '							WHERE log_type = ' . LOG_USERS . "							AND reportee_id = $user_id							$where_sql";						$db->sql_query($sql);						add_log('admin', 'LOG_CLEAR_USER', $user_row['username']);					}				}				if ($submit && $message)				{					if (!check_form_key($form_name))					{						trigger_error($user->lang['FORM_INVALID'] . adm_back_link($this->u_action . '&amp;u=' . $user_id), E_USER_WARNING);					}					add_log('admin', 'LOG_USER_FEEDBACK', $user_row['username']);					add_log('mod', 0, 0, 'LOG_USER_FEEDBACK', $user_row['username']);					add_log('user', $user_id, 'LOG_USER_GENERAL', $message);					trigger_error($user->lang['USER_FEEDBACK_ADDED'] . adm_back_link($this->u_action . '&amp;u=' . $user_id));				}				// Sorting				$limit_days = array(0 => $user->lang['ALL_ENTRIES'], 1 => $user->lang['1_DAY'], 7 => $user->lang['7_DAYS'], 14 => $user->lang['2_WEEKS'], 30 => $user->lang['1_MONTH'], 90 => $user->lang['3_MONTHS'], 180 => $user->lang['6_MONTHS'], 365 => $user->lang['1_YEAR']);				$sort_by_text = array('u' => $user->lang['SORT_USERNAME'], 't' => $user->lang['SORT_DATE'], 'i' => $user->lang['SORT_IP'], 'o' => $user->lang['SORT_ACTION']);				$sort_by_sql = array('u' => 'u.username_clean', 't' => 'l.log_time', 'i' => 'l.log_ip', 'o' => 'l.log_operation');				$s_limit_days = $s_sort_key = $s_sort_dir = $u_sort_param = '';				gen_sort_selects($limit_days, $sort_by_text, $sort_days, $sort_key, $sort_dir, $s_limit_days, $s_sort_key, $s_sort_dir, $u_sort_param);				// Define where and sort sql for use in displaying logs				$sql_where = ($sort_days) ? (time() - ($sort_days * 86400)) : 0;				$sql_sort = $sort_by_sql[$sort_key] . ' ' . (($sort_dir == 'd') ? 'DESC' : 'ASC');				// Grab log data				$log_data = array();				$log_count = 0;				$start = view_log('user', $log_data, $log_count, $config['topics_per_page'], $start, 0, 0, $user_id, $sql_where, $sql_sort);				$template->assign_vars(array(					'S_FEEDBACK'	=> true,					'S_ON_PAGE'		=> on_page($log_count, $config['topics_per_page'], $start),					'PAGINATION'	=> generate_pagination($this->u_action . "&amp;u=$user_id&amp;$u_sort_param", $log_count, $config['topics_per_page'], $start, true),					'S_LIMIT_DAYS'	=> $s_limit_days,					'S_SORT_KEY'	=> $s_sort_key,					'S_SORT_DIR'	=> $s_sort_dir,					'S_CLEARLOGS'	=> $auth->acl_get('a_clearlogs'))				);				foreach ($log_data as $row)				{					$template->assign_block_vars('log', array(						'USERNAME'		=> $row['username_full'],						'IP'			=> $row['ip'],						'DATE'			=> $user->format_date($row['time']),						'ACTION'		=> nl2br($row['action']),						'ID'			=> $row['id'])					);				}			break;			case 'warnings':				$user->add_lang('mcp');				// Set up general vars				$start		= request_var('start', 0);				$deletemark	= (isset($_POST['delmarked'])) ? true : false;				$deleteall	= (isset($_POST['delall'])) ? true : false;				$confirm	= (isset($_POST['confirm'])) ? true : false;				$marked		= request_var('mark', array(0));				$message	= utf8_normalize_nfc(request_var('message', '', true));				// Sort keys				$sort_days	= request_var('st', 0);				$sort_key	= request_var('sk', 't');				$sort_dir	= request_var('sd', 'd');				// Delete entries if requested and able				if ($deletemark || $deleteall || $confirm)				{					if (confirm_box(true))					{						$where_sql = '';						$deletemark = request_var('delmarked', 0);						$deleteall = request_var('delall', 0);						if ($deletemark && $marked)						{							$where_sql = ' AND ' . $db->sql_in_set('warning_id', array_values($marked));						}						if ($where_sql || $deleteall)						{							$sql = 'DELETE FROM ' . WARNINGS_TABLE . "								WHERE user_id = $user_id									$where_sql";							$db->sql_query($sql);							if ($deleteall)							{								$log_warnings = $deleted_warnings = 0;							}							else							{								$num_warnings = (int) $db->sql_affectedrows();								$deleted_warnings = ' user_warnings - ' . $num_warnings;								$log_warnings = ($num_warnings > 2) ? 2 : $num_warnings;							}							$sql = 'UPDATE ' . USERS_TABLE . "								SET user_warnings = $deleted_warnings								WHERE user_id = $user_id";							$db->sql_query($sql);							switch ($log_warnings)							{								case 2:									add_log('admin', 'LOG_WARNINGS_DELETED', $user_row['username'], $num_warnings);								break;								case 1:									add_log('admin', 'LOG_WARNING_DELETED', $user_row['username']);								break;								default:									add_log('admin', 'LOG_WARNINGS_DELETED_ALL', $user_row['username']);								break;							}						}					}					else					{						$s_hidden_fields = array(							'i'				=> $id,							'mode'			=> $mode,							'u'				=> $user_id,							'mark'			=> $marked,						);						if (isset($_POST['delmarked']))						{							$s_hidden_fields['delmarked'] = 1;						}						if (isset($_POST['delall']))						{							$s_hidden_fields['delall'] = 1;						}						if (isset($_POST['delall']) || (isset($_POST['delmarked']) && sizeof($marked)))						{							confirm_box(false, $user->lang['CONFIRM_OPERATION'], build_hidden_fields($s_hidden_fields));						}					}				}				$sql = 'SELECT w.warning_id, w.warning_time, w.post_id, l.log_operation, l.log_data, l.user_id AS mod_user_id, m.username AS mod_username, m.user_colour AS mod_user_colour					FROM ' . WARNINGS_TABLE . ' w					LEFT JOIN ' . LOG_TABLE . ' l						ON (w.log_id = l.log_id)					LEFT JOIN ' . USERS_TABLE . ' m						ON (l.user_id = m.user_id)					WHERE w.user_id = ' . $user_id . '					ORDER BY w.warning_time DESC';				$result = $db->sql_query($sql);				while ($row = $db->sql_fetchrow($result))				{					if (!$row['log_operation'])					{						// We do not have a log-entry anymore, so there is no data available						$row['action'] = $user->lang['USER_WARNING_LOG_DELETED'];					}					else					{						$row['action'] = (isset($user->lang[$row['log_operation']])) ? $user->lang[$row['log_operation']] : '{' . ucfirst(str_replace('_', ' ', $row['log_operation'])) . '}';						if (!empty($row['log_data']))						{							$log_data_ary = @unserialize($row['log_data']);							$log_data_ary = ($log_data_ary === false) ? array() : $log_data_ary;							if (isset($user->lang[$row['log_operation']]))							{								// Check if there are more occurrences of % than arguments, if there are we fill out the arguments array								// It doesn't matter if we add more arguments than placeholders								if ((substr_count($row['action'], '%') - sizeof($log_data_ary)) > 0)								{									$log_data_ary = array_merge($log_data_ary, array_fill(0, substr_count($row['action'], '%') - sizeof($log_data_ary), ''));								}								$row['action'] = vsprintf($row['action'], $log_data_ary);								$row['action'] = bbcode_nl2br(censor_text($row['action']));							}							else if (!empty($log_data_ary))							{								$row['action'] .= '<br />' . implode('', $log_data_ary);							}						}					}					$template->assign_block_vars('warn', array(						'ID'		=> $row['warning_id'],						'USERNAME'	=> ($row['log_operation']) ? get_username_string('full', $row['mod_user_id'], $row['mod_username'], $row['mod_user_colour']) : '-',						'ACTION'	=> make_clickable($row['action']),						'DATE'		=> $user->format_date($row['warning_time']),					));				}				$db->sql_freeresult($result);				$template->assign_vars(array(					'S_WARNINGS'	=> true,				));			break;			case 'profile':				include($phpbb_root_path . 'includes/functions_user.' . $phpEx);				include($phpbb_root_path . 'includes/functions_profile_fields.' . $phpEx);				$cp = new custom_profile();				$cp_data = $cp_error = array();				$sql = 'SELECT lang_id					FROM ' . LANG_TABLE . "					WHERE lang_iso = '" . $db->sql_escape($user->data['user_lang']) . "'";				$result = $db->sql_query($sql);				$row = $db->sql_fetchrow($result);				$db->sql_freeresult($result);				$user_row['iso_lang_id'] = $row['lang_id'];				$data = array(					'icq'			=> request_var('icq', $user_row['user_icq']),					'aim'			=> request_var('aim', $user_row['user_aim']),					'msn'			=> request_var('msn', $user_row['user_msnm']),					'yim'			=> request_var('yim', $user_row['user_yim']),					'jabber'		=> utf8_normalize_nfc(request_var('jabber', $user_row['user_jabber'], true)),					'website'		=> request_var('website', $user_row['user_website']),					'location'		=> utf8_normalize_nfc(request_var('location', $user_row['user_from'], true)),					'occupation'	=> utf8_normalize_nfc(request_var('occupation', $user_row['user_occ'], true)),					'interests'		=> utf8_normalize_nfc(request_var('interests', $user_row['user_interests'], true)),					'bday_day'		=> 0,					'bday_month'	=> 0,					'bday_year'		=> 0,				);				if ($user_row['user_birthday'])				{					list($data['bday_day'], $data['bday_month'], $data['bday_year']) = explode('-', $user_row['user_birthday']);				}				$data['bday_day']		= request_var('bday_day', $data['bday_day']);				$data['bday_month']		= request_var('bday_month', $data['bday_month']);				$data['bday_year']		= request_var('bday_year', $data['bday_year']);				$data['user_birthday']	= sprintf('%2d-%2d-%4d', $data['bday_day'], $data['bday_month'], $data['bday_year']);				if ($submit)				{					$error = validate_data($data, array(						'icq'			=> array(							array('string', true, 3, 15),							array('match', true, '#^[0-9]+$#i')),						'aim'			=> array('string', true, 3, 255),						'msn'			=> array('string', true, 5, 255),						'jabber'		=> array(							array('string', true, 5, 255),							array('jabber')),						'yim'			=> array('string', true, 5, 255),						'website'		=> array(							array('string', true, 12, 255),							array('match', true, '#^http[s]?://(.*?\.)*?[a-z0-9\-]+\.[a-z]{2,4}#i')),						'location'		=> array('string', true, 2, 100),						'occupation'	=> array('string', true, 2, 500),						'interests'		=> array('string', true, 2, 500),						'bday_day'		=> array('num', true, 1, 31),						'bday_month'	=> array('num', true, 1, 12),						'bday_year'		=> array('num', true, 1901, gmdate('Y', time())),						'user_birthday'	=> array('date', true),					));					// validate custom profile fields					$cp->submit_cp_field('profile', $user_row['iso_lang_id'], $cp_data, $cp_error);					if (sizeof($cp_error))					{						$error = array_merge($error, $cp_error);					}					if (!check_form_key($form_name))					{						$error[] = 'FORM_INVALID';					}					if (!sizeof($error))					{						$sql_ary = array(							'user_icq'		=> $data['icq'],							'user_aim'		=> $data['aim'],							'user_msnm'		=> $data['msn'],							'user_yim'		=> $data['yim'],							'user_jabber'	=> $data['jabber'],							'user_website'	=> $data['website'],							'user_from'		=> $data['location'],							'user_occ'		=> $data['occupation'],							'user_interests'=> $data['interests'],							'user_birthday'	=> $data['user_birthday'],						);						$sql = 'UPDATE ' . USERS_TABLE . '							SET ' . $db->sql_build_array('UPDATE', $sql_ary) . "							WHERE user_id = $user_id";						$db->sql_query($sql);						// Update Custom Fields						$cp->update_profile_field_data($user_id, $cp_data);						trigger_error($user->lang['USER_PROFILE_UPDATED'] . adm_back_link($this->u_action . '&amp;u=' . $user_id));					}					// Replace "error" strings with their real, localised form					$error = preg_replace('#^([A-Z_]+)$#e', "(!empty(\$user->lang['\\1'])) ? \$user->lang['\\1'] : '\\1'", $error);				}				$s_birthday_day_options = '<option value="0"' . ((!$data['bday_day']) ? ' selected="selected"' : '') . '>--</option>';				for ($i = 1; $i < 32; $i++)				{					$selected = ($i == $data['bday_day']) ? ' selected="selected"' : '';					$s_birthday_day_options .= "<option value=\"$i\"$selected>$i</option>";				}				$s_birthday_month_options = '<option value="0"' . ((!$data['bday_month']) ? ' selected="selected"' : '') . '>--</option>';				for ($i = 1; $i < 13; $i++)				{					$selected = ($i == $data['bday_month']) ? ' selected="selected"' : '';					$s_birthday_month_options .= "<option value=\"$i\"$selected>$i</option>";				}				$s_birthday_year_options = '';				$now = getdate();				$s_birthday_year_options = '<option value="0"' . ((!$data['bday_year']) ? ' selected="selected"' : '') . '>--</option>';				for ($i = $now['year'] - 100; $i <= $now['year']; $i++)				{					$selected = ($i == $data['bday_year']) ? ' selected="selected"' : '';					$s_birthday_year_options .= "<option value=\"$i\"$selected>$i</option>";				}				unset($now);				$template->assign_vars(array(					'ICQ'			=> $data['icq'],					'YIM'			=> $data['yim'],					'AIM'			=> $data['aim'],					'MSN'			=> $data['msn'],					'JABBER'		=> $data['jabber'],					'WEBSITE'		=> $data['website'],					'LOCATION'		=> $data['location'],					'OCCUPATION'	=> $data['occupation'],					'INTERESTS'		=> $data['interests'],					'S_BIRTHDAY_DAY_OPTIONS'	=> $s_birthday_day_options,					'S_BIRTHDAY_MONTH_OPTIONS'	=> $s_birthday_month_options,					'S_BIRTHDAY_YEAR_OPTIONS'	=> $s_birthday_year_options,					'S_PROFILE'		=> true)				);				// Get additional profile fields and assign them to the template block var 'profile_fields'				$user->get_profile_fields($user_id);				$cp->generate_profile_fields('profile', $user_row['iso_lang_id']);			break;			case 'prefs':				include($phpbb_root_path . 'includes/functions_user.' . $phpEx);				$data = array(					'dateformat'		=> utf8_normalize_nfc(request_var('dateformat', $user_row['user_dateformat'], true)),					'lang'				=> basename(request_var('lang', $user_row['user_lang'])),					'tz'				=> request_var('tz', (float) $user_row['user_timezone']),					'style'				=> request_var('style', $user_row['user_style']),					'dst'				=> request_var('dst', $user_row['user_dst']),					'viewemail'			=> request_var('viewemail', $user_row['user_allow_viewemail']),					'massemail'			=> request_var('massemail', $user_row['user_allow_massemail']),					'hideonline'		=> request_var('hideonline', !$user_row['user_allow_viewonline']),					'notifymethod'		=> request_var('notifymethod', $user_row['user_notify_type']),					'notifypm'			=> request_var('notifypm', $user_row['user_notify_pm']),					'popuppm'			=> request_var('popuppm', $this->optionget($user_row, 'popuppm')),					'allowpm'			=> request_var('allowpm', $user_row['user_allow_pm']),					'topic_sk'			=> request_var('topic_sk', ($user_row['user_topic_sortby_type']) ? $user_row['user_topic_sortby_type'] : 't'),					'topic_sd'			=> request_var('topic_sd', ($user_row['user_topic_sortby_dir']) ? $user_row['user_topic_sortby_dir'] : 'd'),					'topic_st'			=> request_var('topic_st', ($user_row['user_topic_show_days']) ? $user_row['user_topic_show_days'] : 0),					'post_sk'			=> request_var('post_sk', ($user_row['user_post_sortby_type']) ? $user_row['user_post_sortby_type'] : 't'),					'post_sd'			=> request_var('post_sd', ($user_row['user_post_sortby_dir']) ? $user_row['user_post_sortby_dir'] : 'a'),					'post_st'			=> request_var('post_st', ($user_row['user_post_show_days']) ? $user_row['user_post_show_days'] : 0),					'view_images'		=> request_var('view_images', $this->optionget($user_row, 'viewimg')),					'view_flash'		=> request_var('view_flash', $this->optionget($user_row, 'viewflash')),					'view_smilies'		=> request_var('view_smilies', $this->optionget($user_row, 'viewsmilies')),					'view_sigs'			=> request_var('view_sigs', $this->optionget($user_row, 'viewsigs')),					'view_avatars'		=> request_var('view_avatars', $this->optionget($user_row, 'viewavatars')),					'view_wordcensor'	=> request_var('view_wordcensor', $this->optionget($user_row, 'viewcensors')),					'bbcode'	=> request_var('bbcode', $this->optionget($user_row, 'bbcode')),					'smilies'	=> request_var('smilies', $this->optionget($user_row, 'smilies')),					'sig'		=> request_var('sig', $this->optionget($user_row, 'attachsig')),					'notify'	=> request_var('notify', $user_row['user_notify']),				);				if ($submit)				{					$error = validate_data($data, array(						'dateformat'	=> array('string', false, 1, 30),						'lang'			=> array('match', false, '#^[a-z_\-]{2,}$#i'),						'tz'			=> array('num', false, -14, 14),						'topic_sk'		=> array('string', false, 1, 1),						'topic_sd'		=> array('string', false, 1, 1),						'post_sk'		=> array('string', false, 1, 1),						'post_sd'		=> array('string', false, 1, 1),					));					if (!check_form_key($form_name))					{						$error[] = 'FORM_INVALID';					}					if (!sizeof($error))					{						$this->optionset($user_row, 'popuppm', $data['popuppm']);						$this->optionset($user_row, 'viewimg', $data['view_images']);						$this->optionset($user_row, 'viewflash', $data['view_flash']);						$this->optionset($user_row, 'viewsmilies', $data['view_smilies']);						$this->optionset($user_row, 'viewsigs', $data['view_sigs']);						$this->optionset($user_row, 'viewavatars', $data['view_avatars']);						$this->optionset($user_row, 'viewcensors', $data['view_wordcensor']);						$this->optionset($user_row, 'bbcode', $data['bbcode']);						$this->optionset($user_row, 'smilies', $data['smilies']);						$this->optionset($user_row, 'attachsig', $data['sig']);						$sql_ary = array(							'user_options'			=> $user_row['user_options'],							'user_allow_pm'			=> $data['allowpm'],							'user_allow_viewemail'	=> $data['viewemail'],							'user_allow_massemail'	=> $data['massemail'],							'user_allow_viewonline'	=> !$data['hideonline'],							'user_notify_type'		=> $data['notifymethod'],							'user_notify_pm'		=> $data['notifypm'],							'user_dst'				=> $data['dst'],							'user_dateformat'		=> $data['dateformat'],							'user_lang'				=> $data['lang'],							'user_timezone'			=> $data['tz'],							'user_style'			=> $data['style'],							'user_topic_sortby_type'	=> $data['topic_sk'],							'user_post_sortby_type'		=> $data['post_sk'],							'user_topic_sortby_dir'		=> $data['topic_sd'],							'user_post_sortby_dir'		=> $data['post_sd'],							'user_topic_show_days'	=> $data['topic_st'],							'user_post_show_days'	=> $data['post_st'],							'user_notify'	=> $data['notify'],						);						$sql = 'UPDATE ' . USERS_TABLE . '							SET ' . $db->sql_build_array('UPDATE', $sql_ary) . "							WHERE user_id = $user_id";						$db->sql_query($sql);						// Check if user has an active session						if ($user_row['session_id'])						{							// We'll update the session if user_allow_viewonline has changed and the user is a bot							// Or if it's a regular user and the admin set it to hide the session							if ($user_row['user_allow_viewonline'] != $sql_ary['user_allow_viewonline'] && $user_row['user_type'] == USER_IGNORE								|| $user_row['user_allow_viewonline'] && !$sql_ary['user_allow_viewonline'])							{								// We also need to check if the user has the permission to cloak.								$user_auth = new auth();								$user_auth->acl($user_row);								$session_sql_ary = array(									'session_viewonline'	=> ($user_auth->acl_get('u_hideonline')) ? $sql_ary['user_allow_viewonline'] : true,								);								$sql = 'UPDATE ' . SESSIONS_TABLE . '									SET ' . $db->sql_build_array('UPDATE', $session_sql_ary) . "									WHERE session_user_id = $user_id";								$db->sql_query($sql);								unset($user_auth);							}						}						trigger_error($user->lang['USER_PREFS_UPDATED'] . adm_back_link($this->u_action . '&amp;u=' . $user_id));					}					// Replace "error" strings with their real, localised form					$error = preg_replace('#^([A-Z_]+)$#e', "(!empty(\$user->lang['\\1'])) ? \$user->lang['\\1'] : '\\1'", $error);				}				$dateformat_options = '';				foreach ($user->lang['dateformats'] as $format => $null)				{					$dateformat_options .= '<option value="' . $format . '"' . (($format == $data['dateformat']) ? ' selected="selected"' : '') . '>';					$dateformat_options .= $user->format_date(time(), $format, false) . ((strpos($format, '|') !== false) ? $user->lang['VARIANT_DATE_SEPARATOR'] . $user->format_date(time(), $format, true) : '');					$dateformat_options .= '</option>';				}				$s_custom = false;				$dateformat_options .= '<option value="custom"';				if (!isset($user->lang['dateformats'][$data['dateformat']]))				{					$dateformat_options .= ' selected="selected"';					$s_custom = true;				}				$dateformat_options .= '>' . $user->lang['CUSTOM_DATEFORMAT'] . '</option>';				$sort_dir_text = array('a' => $user->lang['ASCENDING'], 'd' => $user->lang['DESCENDING']);				// Topic ordering options				$limit_topic_days = array(0 => $user->lang['ALL_TOPICS'], 1 => $user->lang['1_DAY'], 7 => $user->lang['7_DAYS'], 14 => $user->lang['2_WEEKS'], 30 => $user->lang['1_MONTH'], 90 => $user->lang['3_MONTHS'], 180 => $user->lang['6_MONTHS'], 365 => $user->lang['1_YEAR']);				$sort_by_topic_text = array('a' => $user->lang['AUTHOR'], 't' => $user->lang['POST_TIME'], 'r' => $user->lang['REPLIES'], 's' => $user->lang['SUBJECT'], 'v' => $user->lang['VIEWS']);				// Post ordering options				$limit_post_days = array(0 => $user->lang['ALL_POSTS'], 1 => $user->lang['1_DAY'], 7 => $user->lang['7_DAYS'], 14 => $user->lang['2_WEEKS'], 30 => $user->lang['1_MONTH'], 90 => $user->lang['3_MONTHS'], 180 => $user->lang['6_MONTHS'], 365 => $user->lang['1_YEAR']);				$sort_by_post_text = array('a' => $user->lang['AUTHOR'], 't' => $user->lang['POST_TIME'], 's' => $user->lang['SUBJECT']);				$_options = array('topic', 'post');				foreach ($_options as $sort_option)				{					${'s_limit_' . $sort_option . '_days'} = '<select name="' . $sort_option . '_st">';					foreach (${'limit_' . $sort_option . '_days'} as $day => $text)					{						$selected = ($data[$sort_option . '_st'] == $day) ? ' selected="selected"' : '';						${'s_limit_' . $sort_option . '_days'} .= '<option value="' . $day . '"' . $selected . '>' . $text . '</option>';					}					${'s_limit_' . $sort_option . '_days'} .= '</select>';					${'s_sort_' . $sort_option . '_key'} = '<select name="' . $sort_option . '_sk">';					foreach (${'sort_by_' . $sort_option . '_text'} as $key => $text)					{						$selected = ($data[$sort_option . '_sk'] == $key) ? ' selected="selected"' : '';						${'s_sort_' . $sort_option . '_key'} .= '<option value="' . $key . '"' . $selected . '>' . $text . '</option>';					}					${'s_sort_' . $sort_option . '_key'} .= '</select>';					${'s_sort_' . $sort_option . '_dir'} = '<select name="' . $sort_option . '_sd">';					foreach ($sort_dir_text as $key => $value)					{						$selected = ($data[$sort_option . '_sd'] == $key) ? ' selected="selected"' : '';						${'s_sort_' . $sort_option . '_dir'} .= '<option value="' . $key . '"' . $selected . '>' . $value . '</option>';					}					${'s_sort_' . $sort_option . '_dir'} .= '</select>';				}				$template->assign_vars(array(					'S_PREFS'			=> true,					'S_JABBER_DISABLED'	=> ($config['jab_enable'] && $user_row['user_jabber'] && @extension_loaded('xml')) ? false : true,					'VIEW_EMAIL'		=> $data['viewemail'],					'MASS_EMAIL'		=> $data['massemail'],					'ALLOW_PM'			=> $data['allowpm'],					'HIDE_ONLINE'		=> $data['hideonline'],					'NOTIFY_EMAIL'		=> ($data['notifymethod'] == NOTIFY_EMAIL) ? true : false,					'NOTIFY_IM'			=> ($data['notifymethod'] == NOTIFY_IM) ? true : false,					'NOTIFY_BOTH'		=> ($data['notifymethod'] == NOTIFY_BOTH) ? true : false,					'NOTIFY_PM'			=> $data['notifypm'],					'POPUP_PM'			=> $data['popuppm'],					'DST'				=> $data['dst'],					'BBCODE'			=> $data['bbcode'],					'SMILIES'			=> $data['smilies'],					'ATTACH_SIG'		=> $data['sig'],					'NOTIFY'			=> $data['notify'],					'VIEW_IMAGES'		=> $data['view_images'],					'VIEW_FLASH'		=> $data['view_flash'],					'VIEW_SMILIES'		=> $data['view_smilies'],					'VIEW_SIGS'			=> $data['view_sigs'],					'VIEW_AVATARS'		=> $data['view_avatars'],					'VIEW_WORDCENSOR'	=> $data['view_wordcensor'],					'S_TOPIC_SORT_DAYS'		=> $s_limit_topic_days,					'S_TOPIC_SORT_KEY'		=> $s_sort_topic_key,					'S_TOPIC_SORT_DIR'		=> $s_sort_topic_dir,					'S_POST_SORT_DAYS'		=> $s_limit_post_days,					'S_POST_SORT_KEY'		=> $s_sort_post_key,					'S_POST_SORT_DIR'		=> $s_sort_post_dir,					'DATE_FORMAT'			=> $data['dateformat'],					'S_DATEFORMAT_OPTIONS'	=> $dateformat_options,					'S_CUSTOM_DATEFORMAT'	=> $s_custom,					'DEFAULT_DATEFORMAT'	=> $config['default_dateformat'],					'A_DEFAULT_DATEFORMAT'	=> addslashes($config['default_dateformat']),					'S_LANG_OPTIONS'	=> language_select($data['lang']),					'S_STYLE_OPTIONS'	=> style_select($data['style']),					'S_TZ_OPTIONS'		=> tz_select($data['tz'], true),					)				);			break;			case 'avatar':				include($phpbb_root_path . 'includes/functions_display.' . $phpEx);				include($phpbb_root_path . 'includes/functions_user.' . $phpEx);				$can_upload = (file_exists($phpbb_root_path . $config['avatar_path']) && phpbb_is_writable($phpbb_root_path . $config['avatar_path']) && $file_uploads) ? true : false;				if ($submit)				{					if (!check_form_key($form_name))					{							trigger_error($user->lang['FORM_INVALID'] . adm_back_link($this->u_action . '&amp;u=' . $user_id), E_USER_WARNING);					}					if (avatar_process_user($error, $user_row, $can_upload))					{						trigger_error($user->lang['USER_AVATAR_UPDATED'] . adm_back_link($this->u_action . '&amp;u=' . $user_row['user_id']));					}					// Replace "error" strings with their real, localised form					$error = preg_replace('#^([A-Z_]+)$#e', "(!empty(\$user->lang['\\1'])) ? \$user->lang['\\1'] : '\\1'", $error);				}				if (!$config['allow_avatar'] && $user_row['user_avatar_type'])				{					$error[] = $user->lang['USER_AVATAR_NOT_ALLOWED'];				}				else if ((($user_row['user_avatar_type'] == AVATAR_UPLOAD) && !$config['allow_avatar_upload']) ||				 (($user_row['user_avatar_type'] == AVATAR_REMOTE) && !$config['allow_avatar_remote']) ||				 (($user_row['user_avatar_type'] == AVATAR_GALLERY) && !$config['allow_avatar_local']))				{					$error[] = $user->lang['USER_AVATAR_TYPE_NOT_ALLOWED'];				}				// Generate users avatar				$avatar_img = ($user_row['user_avatar']) ? get_user_avatar($user_row['user_avatar'], $user_row['user_avatar_type'], $user_row['user_avatar_width'], $user_row['user_avatar_height'], 'USER_AVATAR', true) : '<img src="' . $phpbb_admin_path . 'images/no_avatar.gif" alt="" />';				$display_gallery = (isset($_POST['display_gallery'])) ? true : false;				$avatar_select = basename(request_var('avatar_select', ''));				$category = basename(request_var('category', ''));				if ($config['allow_avatar_local'] && $display_gallery)				{					avatar_gallery($category, $avatar_select, 4);				}				$template->assign_vars(array(					'S_AVATAR'			=> true,					'S_CAN_UPLOAD'		=> $can_upload,					'S_UPLOAD_FILE'		=> ($config['allow_avatar'] && $can_upload && $config['allow_avatar_upload']) ? true : false,					'S_REMOTE_UPLOAD'	=> ($config['allow_avatar'] && $can_upload && $config['allow_avatar_remote_upload']) ? true : false,					'S_ALLOW_REMOTE'	=> ($config['allow_avatar'] && $config['allow_avatar_remote']) ? true : false,					'S_DISPLAY_GALLERY'	=> ($config['allow_avatar'] && $config['allow_avatar_local'] && !$display_gallery) ? true : false,					'S_IN_GALLERY'		=> ($config['allow_avatar'] && $config['allow_avatar_local'] && $display_gallery) ? true : false,					'AVATAR_IMAGE'			=> $avatar_img,					'AVATAR_MAX_FILESIZE'	=> $config['avatar_filesize'],					'USER_AVATAR_WIDTH'		=> $user_row['user_avatar_width'],					'USER_AVATAR_HEIGHT'	=> $user_row['user_avatar_height'],					'L_AVATAR_EXPLAIN'	=> sprintf($user->lang['AVATAR_EXPLAIN'], $config['avatar_max_width'], $config['avatar_max_height'], round($config['avatar_filesize'] / 1024)))				);			break;			case 'rank':				if ($submit)				{					if (!check_form_key($form_name))					{						trigger_error($user->lang['FORM_INVALID'] . adm_back_link($this->u_action . '&amp;u=' . $user_id), E_USER_WARNING);					}					$rank_id = request_var('user_rank', 0);					$sql = 'UPDATE ' . USERS_TABLE . "						SET user_rank = $rank_id						WHERE user_id = $user_id";					$db->sql_query($sql);					trigger_error($user->lang['USER_RANK_UPDATED'] . adm_back_link($this->u_action . '&amp;u=' . $user_id));				}				$sql = 'SELECT *					FROM ' . RANKS_TABLE . '					WHERE rank_special = 1					ORDER BY rank_title';				$result = $db->sql_query($sql);				$s_rank_options = '<option value="0"' . ((!$user_row['user_rank']) ? ' selected="selected"' : '') . '>' . $user->lang['NO_SPECIAL_RANK'] . '</option>';				while ($row = $db->sql_fetchrow($result))				{					$selected = ($user_row['user_rank'] && $row['rank_id'] == $user_row['user_rank']) ? ' selected="selected"' : '';					$s_rank_options .= '<option value="' . $row['rank_id'] . '"' . $selected . '>' . $row['rank_title'] . '</option>';				}				$db->sql_freeresult($result);				$template->assign_vars(array(					'S_RANK'			=> true,					'S_RANK_OPTIONS'	=> $s_rank_options)				);			break;			case 'sig':				include_once($phpbb_root_path . 'includes/functions_posting.' . $phpEx);				include_once($phpbb_root_path . 'includes/functions_display.' . $phpEx);				$enable_bbcode	= ($config['allow_sig_bbcode']) ? (bool) $this->optionget($user_row, 'sig_bbcode') : false;				$enable_smilies	= ($config['allow_sig_smilies']) ? (bool) $this->optionget($user_row, 'sig_smilies') : false;				$enable_urls	= ($config['allow_sig_links']) ? (bool) $this->optionget($user_row, 'sig_links') : false;				$signature		= utf8_normalize_nfc(request_var('signature', (string) $user_row['user_sig'], true));				$preview		= (isset($_POST['preview'])) ? true : false;				if ($submit || $preview)				{					include_once($phpbb_root_path . 'includes/message_parser.' . $phpEx);					$enable_bbcode	= ($config['allow_sig_bbcode']) ? ((request_var('disable_bbcode', false)) ? false : true) : false;					$enable_smilies	= ($config['allow_sig_smilies']) ? ((request_var('disable_smilies', false)) ? false : true) : false;					$enable_urls	= ($config['allow_sig_links']) ? ((request_var('disable_magic_url', false)) ? false : true) : false;					$message_parser = new parse_message($signature);					// Allowing Quote BBCode					$message_parser->parse($enable_bbcode, $enable_urls, $enable_smilies, $config['allow_sig_img'], $config['allow_sig_flash'], true, $config['allow_sig_links'], true, 'sig');					if (sizeof($message_parser->warn_msg))					{						$error[] = implode('<br />', $message_parser->warn_msg);					}					if (!check_form_key($form_name))					{						$error = 'FORM_INVALID';					}					if (!sizeof($error) && $submit)					{						$this->optionset($user_row, 'sig_bbcode', $enable_bbcode);						$this->optionset($user_row, 'sig_smilies', $enable_smilies);						$this->optionset($user_row, 'sig_links', $enable_urls);						$sql_ary = array(							'user_sig'					=> (string) $message_parser->message,							'user_options'				=> $user_row['user_options'],							'user_sig_bbcode_uid'		=> (string) $message_parser->bbcode_uid,							'user_sig_bbcode_bitfield'	=> (string) $message_parser->bbcode_bitfield						);						$sql = 'UPDATE ' . USERS_TABLE . '							SET ' . $db->sql_build_array('UPDATE', $sql_ary) . '							WHERE user_id = ' . $user_id;						$db->sql_query($sql);						trigger_error($user->lang['USER_SIG_UPDATED'] . adm_back_link($this->u_action . '&amp;u=' . $user_id));					}					// Replace "error" strings with their real, localised form					$error = preg_replace('#^([A-Z_]+)$#e', "(!empty(\$user->lang['\\1'])) ? \$user->lang['\\1'] : '\\1'", $error);				}				$signature_preview = '';				if ($preview)				{					// Now parse it for displaying					$signature_preview = $message_parser->format_display($enable_bbcode, $enable_urls, $enable_smilies, false);					unset($message_parser);				}				decode_message($signature, $user_row['user_sig_bbcode_uid']);				$template->assign_vars(array(					'S_SIGNATURE'		=> true,					'SIGNATURE'			=> $signature,					'SIGNATURE_PREVIEW'	=> $signature_preview,					'S_BBCODE_CHECKED'		=> (!$enable_bbcode) ? ' checked="checked"' : '',					'S_SMILIES_CHECKED'		=> (!$enable_smilies) ? ' checked="checked"' : '',					'S_MAGIC_URL_CHECKED'	=> (!$enable_urls) ? ' checked="checked"' : '',					'BBCODE_STATUS'			=> ($config['allow_sig_bbcode']) ? sprintf($user->lang['BBCODE_IS_ON'], '<a href="' . append_sid("{$phpbb_root_path}faq.$phpEx", 'mode=bbcode') . '">', '</a>') : sprintf($user->lang['BBCODE_IS_OFF'], '<a href="' . append_sid("{$phpbb_root_path}faq.$phpEx", 'mode=bbcode') . '">', '</a>'),					'SMILIES_STATUS'		=> ($config['allow_sig_smilies']) ? $user->lang['SMILIES_ARE_ON'] : $user->lang['SMILIES_ARE_OFF'],					'IMG_STATUS'			=> ($config['allow_sig_img']) ? $user->lang['IMAGES_ARE_ON'] : $user->lang['IMAGES_ARE_OFF'],					'FLASH_STATUS'			=> ($config['allow_sig_flash']) ? $user->lang['FLASH_IS_ON'] : $user->lang['FLASH_IS_OFF'],					'URL_STATUS'			=> ($config['allow_sig_links']) ? $user->lang['URL_IS_ON'] : $user->lang['URL_IS_OFF'],					'L_SIGNATURE_EXPLAIN'	=> sprintf($user->lang['SIGNATURE_EXPLAIN'], $config['max_sig_chars']),					'S_BBCODE_ALLOWED'		=> $config['allow_sig_bbcode'],					'S_SMILIES_ALLOWED'		=> $config['allow_sig_smilies'],					'S_BBCODE_IMG'			=> ($config['allow_sig_img']) ? true : false,					'S_BBCODE_FLASH'		=> ($config['allow_sig_flash']) ? true : false,					'S_LINKS_ALLOWED'		=> ($config['allow_sig_links']) ? true : false)				);				// Assigning custom bbcodes				display_custom_bbcodes();			break;			case 'attach':				$start		= request_var('start', 0);				$deletemark = (isset($_POST['delmarked'])) ? true : false;				$marked		= request_var('mark', array(0));				// Sort keys				$sort_key	= request_var('sk', 'a');				$sort_dir	= request_var('sd', 'd');				if ($deletemark && sizeof($marked))				{					$sql = 'SELECT attach_id						FROM ' . ATTACHMENTS_TABLE . '						WHERE poster_id = ' . $user_id . '							AND is_orphan = 0							AND ' . $db->sql_in_set('attach_id', $marked);					$result = $db->sql_query($sql);					$marked = array();					while ($row = $db->sql_fetchrow($result))					{						$marked[] = $row['attach_id'];					}					$db->sql_freeresult($result);				}				if ($deletemark && sizeof($marked))				{					if (confirm_box(true))					{						$sql = 'SELECT real_filename							FROM ' . ATTACHMENTS_TABLE . '							WHERE ' . $db->sql_in_set('attach_id', $marked);						$result = $db->sql_query($sql);						$log_attachments = array();						while ($row = $db->sql_fetchrow($result))						{							$log_attachments[] = $row['real_filename'];						}						$db->sql_freeresult($result);						delete_attachments('attach', $marked);						$message = (sizeof($log_attachments) == 1) ? $user->lang['ATTACHMENT_DELETED'] : $user->lang['ATTACHMENTS_DELETED'];						add_log('admin', 'LOG_ATTACHMENTS_DELETED', implode(', ', $log_attachments));						trigger_error($message . adm_back_link($this->u_action . '&amp;u=' . $user_id));					}					else					{						confirm_box(false, $user->lang['CONFIRM_OPERATION'], build_hidden_fields(array(							'u'				=> $user_id,							'i'				=> $id,							'mode'			=> $mode,							'action'		=> $action,							'delmarked'		=> true,							'mark'			=> $marked))						);					}				}				$sk_text = array('a' => $user->lang['SORT_FILENAME'], 'c' => $user->lang['SORT_EXTENSION'], 'd' => $user->lang['SORT_SIZE'], 'e' => $user->lang['SORT_DOWNLOADS'], 'f' => $user->lang['SORT_POST_TIME'], 'g' => $user->lang['SORT_TOPIC_TITLE']);				$sk_sql = array('a' => 'a.real_filename', 'c' => 'a.extension', 'd' => 'a.filesize', 'e' => 'a.download_count', 'f' => 'a.filetime', 'g' => 't.topic_title');				$sd_text = array('a' => $user->lang['ASCENDING'], 'd' => $user->lang['DESCENDING']);				$s_sort_key = '';				foreach ($sk_text as $key => $value)				{					$selected = ($sort_key == $key) ? ' selected="selected"' : '';					$s_sort_key .= '<option value="' . $key . '"' . $selected . '>' . $value . '</option>';				}				$s_sort_dir = '';				foreach ($sd_text as $key => $value)				{					$selected = ($sort_dir == $key) ? ' selected="selected"' : '';					$s_sort_dir .= '<option value="' . $key . '"' . $selected . '>' . $value . '</option>';				}				if (!isset($sk_sql[$sort_key]))				{					$sort_key = 'a';				}				$order_by = $sk_sql[$sort_key] . ' ' . (($sort_dir == 'a') ? 'ASC' : 'DESC');				$sql = 'SELECT COUNT(attach_id) as num_attachments					FROM ' . ATTACHMENTS_TABLE . "					WHERE poster_id = $user_id						AND is_orphan = 0";				$result = $db->sql_query_limit($sql, 1);				$num_attachments = (int) $db->sql_fetchfield('num_attachments');				$db->sql_freeresult($result);				$sql = 'SELECT a.*, t.topic_title, p.message_subject as message_title					FROM ' . ATTACHMENTS_TABLE . ' a						LEFT JOIN ' . TOPICS_TABLE . ' t ON (a.topic_id = t.topic_id							AND a.in_message = 0)						LEFT JOIN ' . PRIVMSGS_TABLE . ' p ON (a.post_msg_id = p.msg_id							AND a.in_message = 1)					WHERE a.poster_id = ' . $user_id . "						AND a.is_orphan = 0					ORDER BY $order_by";				$result = $db->sql_query_limit($sql, $config['posts_per_page'], $start);				while ($row = $db->sql_fetchrow($result))				{					if ($row['in_message'])					{						$view_topic = append_sid("{$phpbb_root_path}ucp.$phpEx", "i=pm&amp;p={$row['post_msg_id']}");					}					else					{						$view_topic = append_sid("{$phpbb_root_path}viewtopic.$phpEx", "t={$row['topic_id']}&amp;p={$row['post_msg_id']}") . '#p' . $row['post_msg_id'];					}					$template->assign_block_vars('attach', array(						'REAL_FILENAME'		=> $row['real_filename'],						'COMMENT'			=> nl2br($row['attach_comment']),						'EXTENSION'			=> $row['extension'],						'SIZE'				=> get_formatted_filesize($row['filesize']),						'DOWNLOAD_COUNT'	=> $row['download_count'],						'POST_TIME'			=> $user->format_date($row['filetime']),						'TOPIC_TITLE'		=> ($row['in_message']) ? $row['message_title'] : $row['topic_title'],						'ATTACH_ID'			=> $row['attach_id'],						'POST_ID'			=> $row['post_msg_id'],						'TOPIC_ID'			=> $row['topic_id'],						'S_IN_MESSAGE'		=> $row['in_message'],						'U_DOWNLOAD'		=> append_sid("{$phpbb_root_path}download/file.$phpEx", 'mode=view&amp;id=' . $row['attach_id']),						'U_VIEW_TOPIC'		=> $view_topic)					);				}				$db->sql_freeresult($result);				$template->assign_vars(array(					'S_ATTACHMENTS'		=> true,					'S_ON_PAGE'			=> on_page($num_attachments, $config['topics_per_page'], $start),					'S_SORT_KEY'		=> $s_sort_key,					'S_SORT_DIR'		=> $s_sort_dir,					'PAGINATION'		=> generate_pagination($this->u_action . "&amp;u=$user_id&amp;sk=$sort_key&amp;sd=$sort_dir", $num_attachments, $config['topics_per_page'], $start, true))				);			break;			case 'groups':				include($phpbb_root_path . 'includes/functions_user.' . $phpEx);				$user->add_lang(array('groups', 'acp/groups'));				$group_id = request_var('g', 0);				if ($group_id)				{					// Check the founder only entry for this group to make sure everything is well					$sql = 'SELECT group_founder_manage						FROM ' . GROUPS_TABLE . '						WHERE group_id = ' . $group_id;					$result = $db->sql_query($sql);					$founder_manage = (int) $db->sql_fetchfield('group_founder_manage');					$db->sql_freeresult($result);					if ($user->data['user_type'] != USER_FOUNDER && $founder_manage)					{						trigger_error($user->lang['NOT_ALLOWED_MANAGE_GROUP'] . adm_back_link($this->u_action . '&amp;u=' . $user_id), E_USER_WARNING);					}				}				else				{					$founder_manage = 0;				}				switch ($action)				{					case 'demote':					case 'promote':					case 'default':						if (!$group_id)						{							trigger_error($user->lang['NO_GROUP'] . adm_back_link($this->u_action . '&amp;u=' . $user_id), E_USER_WARNING);						}						group_user_attributes($action, $group_id, $user_id);						if ($action == 'default')						{							$user_row['group_id'] = $group_id;						}					break;					case 'delete':						if (confirm_box(true))						{							if (!$group_id)							{								trigger_error($user->lang['NO_GROUP'] . adm_back_link($this->u_action . '&amp;u=' . $user_id), E_USER_WARNING);							}							if ($error = group_user_del($group_id, $user_id))							{								trigger_error($user->lang[$error] . adm_back_link($this->u_action . '&amp;u=' . $user_id), E_USER_WARNING);							}							$error = array();							// The delete action was successful - therefore update the user row...							$sql = 'SELECT u.*, s.*								FROM ' . USERS_TABLE . ' u									LEFT JOIN ' . SESSIONS_TABLE . ' s ON (s.session_user_id = u.user_id)								WHERE u.user_id = ' . $user_id . '								ORDER BY s.session_time DESC';							$result = $db->sql_query_limit($sql, 1);							$user_row = $db->sql_fetchrow($result);							$db->sql_freeresult($result);						}						else						{							confirm_box(false, $user->lang['CONFIRM_OPERATION'], build_hidden_fields(array(								'u'				=> $user_id,								'i'				=> $id,								'mode'			=> $mode,								'action'		=> $action,								'g'				=> $group_id))							);						}					break;					case 'approve':						if (confirm_box(true))						{							if (!$group_id)							{								trigger_error($user->lang['NO_GROUP'] . adm_back_link($this->u_action . '&amp;u=' . $user_id), E_USER_WARNING);							}							group_user_attributes($action, $group_id, $user_id);						}						else						{							confirm_box(false, $user->lang['CONFIRM_OPERATION'], build_hidden_fields(array(								'u'				=> $user_id,								'i'				=> $id,								'mode'			=> $mode,								'action'		=> $action,								'g'				=> $group_id))							);						}					break;				}				// Add user to group?				if ($submit)				{					if (!check_form_key($form_name))					{						trigger_error($user->lang['FORM_INVALID'] . adm_back_link($this->u_action . '&amp;u=' . $user_id), E_USER_WARNING);					}					if (!$group_id)					{						trigger_error($user->lang['NO_GROUP'] . adm_back_link($this->u_action . '&amp;u=' . $user_id), E_USER_WARNING);					}					// Add user/s to group					if ($error = group_user_add($group_id, $user_id))					{						trigger_error($user->lang[$error] . adm_back_link($this->u_action . '&amp;u=' . $user_id), E_USER_WARNING);					}					$error = array();				}				$sql = 'SELECT ug.*, g.*					FROM ' . GROUPS_TABLE . ' g, ' . USER_GROUP_TABLE . " ug					WHERE ug.user_id = $user_id						AND g.group_id = ug.group_id					ORDER BY g.group_type DESC, ug.user_pending ASC, g.group_name";				$result = $db->sql_query($sql);				$i = 0;				$group_data = $id_ary = array();				while ($row = $db->sql_fetchrow($result))				{					$type = ($row['group_type'] == GROUP_SPECIAL) ? 'special' : (($row['user_pending']) ? 'pending' : 'normal');					$group_data[$type][$i]['group_id']		= $row['group_id'];					$group_data[$type][$i]['group_name']	= $row['group_name'];					$group_data[$type][$i]['group_leader']	= ($row['group_leader']) ? 1 : 0;					$id_ary[] = $row['group_id'];					$i++;				}				$db->sql_freeresult($result);				// Select box for other groups				$sql = 'SELECT group_id, group_name, group_type, group_founder_manage					FROM ' . GROUPS_TABLE . '					' . ((sizeof($id_ary)) ? 'WHERE ' . $db->sql_in_set('group_id', $id_ary, true) : '') . '					ORDER BY group_type DESC, group_name ASC';				$result = $db->sql_query($sql);				$s_group_options = '';				while ($row = $db->sql_fetchrow($result))				{					if (!$config['coppa_enable'] && $row['group_name'] == 'REGISTERED_COPPA')					{						continue;					}					// Do not display those groups not allowed to be managed					if ($user->data['user_type'] != USER_FOUNDER && $row['group_founder_manage'])					{						continue;					}					$s_group_options .= '<option' . (($row['group_type'] == GROUP_SPECIAL) ? ' class="sep"' : '') . ' value="' . $row['group_id'] . '">' . (($row['group_type'] == GROUP_SPECIAL) ? $user->lang['G_' . $row['group_name']] : $row['group_name']) . '</option>';				}				$db->sql_freeresult($result);				$current_type = '';				foreach ($group_data as $group_type => $data_ary)				{					if ($current_type != $group_type)					{						$template->assign_block_vars('group', array(							'S_NEW_GROUP_TYPE'		=> true,							'GROUP_TYPE'			=> $user->lang['USER_GROUP_' . strtoupper($group_type)])						);					}					foreach ($data_ary as $data)					{						$template->assign_block_vars('group', array(							'U_EDIT_GROUP'		=> append_sid("{$phpbb_admin_path}index.$phpEx", "i=groups&amp;mode=manage&amp;action=edit&amp;u=$user_id&amp;g={$data['group_id']}&amp;back_link=acp_users_groups"),							'U_DEFAULT'			=> $this->u_action . "&amp;action=default&amp;u=$user_id&amp;g=" . $data['group_id'],							'U_DEMOTE_PROMOTE'	=> $this->u_action . '&amp;action=' . (($data['group_leader']) ? 'demote' : 'promote') . "&amp;u=$user_id&amp;g=" . $data['group_id'],							'U_DELETE'			=> $this->u_action . "&amp;action=delete&amp;u=$user_id&amp;g=" . $data['group_id'],							'U_APPROVE'			=> ($group_type == 'pending') ? $this->u_action . "&amp;action=approve&amp;u=$user_id&amp;g=" . $data['group_id'] : '',							'GROUP_NAME'		=> ($group_type == 'special') ? $user->lang['G_' . $data['group_name']] : $data['group_name'],							'L_DEMOTE_PROMOTE'	=> ($data['group_leader']) ? $user->lang['GROUP_DEMOTE'] : $user->lang['GROUP_PROMOTE'],							'S_IS_MEMBER'		=> ($group_type != 'pending') ? true : false,							'S_NO_DEFAULT'		=> ($user_row['group_id'] != $data['group_id']) ? true : false,							'S_SPECIAL_GROUP'	=> ($group_type == 'special') ? true : false,							)						);					}				}				$template->assign_vars(array(					'S_GROUPS'			=> true,					'S_GROUP_OPTIONS'	=> $s_group_options)				);			break;			case 'perm':				include_once($phpbb_root_path . 'includes/acp/auth.' . $phpEx);				$auth_admin = new auth_admin();				$user->add_lang('acp/permissions');				add_permission_language();				$forum_id = request_var('f', 0);				// Global Permissions				if (!$forum_id)				{					// Select auth options					$sql = 'SELECT auth_option, is_local, is_global						FROM ' . ACL_OPTIONS_TABLE . '						WHERE auth_option ' . $db->sql_like_expression($db->any_char . '_') . '							AND is_global = 1						ORDER BY auth_option';					$result = $db->sql_query($sql);					$hold_ary = array();					while ($row = $db->sql_fetchrow($result))					{						$hold_ary = $auth_admin->get_mask('view', $user_id, false, false, $row['auth_option'], 'global', ACL_NEVER);						$auth_admin->display_mask('view', $row['auth_option'], $hold_ary, 'user', false, false);					}					$db->sql_freeresult($result);					unset($hold_ary);				}				else				{					$sql = 'SELECT auth_option, is_local, is_global						FROM ' . ACL_OPTIONS_TABLE . "						WHERE auth_option " . $db->sql_like_expression($db->any_char . '_') . "							AND is_local = 1						ORDER BY is_global DESC, auth_option";					$result = $db->sql_query($sql);					while ($row = $db->sql_fetchrow($result))					{						$hold_ary = $auth_admin->get_mask('view', $user_id, false, $forum_id, $row['auth_option'], 'local', ACL_NEVER);						$auth_admin->display_mask('view', $row['auth_option'], $hold_ary, 'user', true, false);					}					$db->sql_freeresult($result);				}				$s_forum_options = '<option value="0"' . ((!$forum_id) ? ' selected="selected"' : '') . '>' . $user->lang['VIEW_GLOBAL_PERMS'] . '</option>';				$s_forum_options .= make_forum_select($forum_id, false, true, false, false, false);				$template->assign_vars(array(					'S_PERMISSIONS'				=> true,					'S_GLOBAL'					=> (!$forum_id) ? true : false,					'S_FORUM_OPTIONS'			=> $s_forum_options,					'U_ACTION'					=> $this->u_action . '&amp;u=' . $user_id,					'U_USER_PERMISSIONS'		=> append_sid("{$phpbb_admin_path}index.$phpEx" ,'i=permissions&amp;mode=setting_user_global&amp;user_id[]=' . $user_id),					'U_USER_FORUM_PERMISSIONS'	=> append_sid("{$phpbb_admin_path}index.$phpEx", 'i=permissions&amp;mode=setting_user_local&amp;user_id[]=' . $user_id))				);			break;		}		// Assign general variables		$template->assign_vars(array(			'S_ERROR'			=> (sizeof($error)) ? true : false,			'ERROR_MSG'			=> (sizeof($error)) ? implode('<br />', $error) : '')		);	}	/**	* Optionset replacement for this module based on $user->optionset	*/	function optionset(&$user_row, $key, $value, $data = false)	{		global $user;		$var = ($data) ? $data : $user_row['user_options'];		if ($value && !($var & 1 << $user->keyoptions[$key]))		{			$var += 1 << $user->keyoptions[$key];		}		else if (!$value && ($var & 1 << $user->keyoptions[$key]))		{			$var -= 1 << $user->keyoptions[$key];		}		else		{			return ($data) ? $var : false;		}		if (!$data)		{			$user_row['user_options'] = $var;			return true;		}		else		{			return $var;		}	}	/**	* Optionget replacement for this module based on $user->optionget	*/	function optionget(&$user_row, $key, $data = false)	{		global $user;		$var = ($data) ? $data : $user_row['user_options'];		return ($var & 1 << $user->keyoptions[$key]) ? true : false;	}}?>
<?php/**** @package phpBB3* @version $Id$* @copyright (c) 2006 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License** This file creates SQL statements to upgrade phpBB on MySQL 3.x/4.0.x to 4.1.x/5.x**///// Security message://// This script is potentially dangerous.// Remove or comment the next line (die(".... ) to enable this script.// Do NOT FORGET to either remove this script or disable it after you have used it.//die("Please read the first lines of this script for instructions on how to enable it");define('IN_PHPBB', true);$phpbb_root_path = (defined('PHPBB_ROOT_PATH')) ? PHPBB_ROOT_PATH : './';$phpEx = substr(strrchr(__FILE__, '.'), 1);include($phpbb_root_path . 'common.' . $phpEx);$prefix = $table_prefix;$newline = "\n";if (PHP_SAPI !== 'cli'){	$newline = '<br>';}$sql = 'DESCRIBE ' . POSTS_TABLE . ' post_text';$result = $db->sql_query($sql);$row = $db->sql_fetchrow($result);$db->sql_freeresult($result);$mysql_indexer = $drop_index = false;if (strtolower($row['Type']) === 'mediumtext'){	$mysql_indexer = true;}if (strtolower($row['Key']) === 'mul'){	$drop_index = true;}echo "USE $dbname;$newline$newline";@set_time_limit(0);$schema_data = get_schema_struct();$dbms_type_map = array(	'mysql_41'	=> array(		'INT:'		=> 'int(%d)',		'BINT'		=> 'bigint(20)',		'UINT'		=> 'mediumint(8) UNSIGNED',		'UINT:'		=> 'int(%d) UNSIGNED',		'TINT:'		=> 'tinyint(%d)',		'USINT'		=> 'smallint(4) UNSIGNED',		'BOOL'		=> 'tinyint(1) UNSIGNED',		'VCHAR'		=> 'varchar(255)',		'VCHAR:'	=> 'varchar(%d)',		'CHAR:'		=> 'char(%d)',		'XSTEXT'	=> 'text',		'XSTEXT_UNI'=> 'varchar(100)',		'STEXT'		=> 'text',		'STEXT_UNI'	=> 'varchar(255)',		'TEXT'		=> 'text',		'TEXT_UNI'	=> 'text',		'MTEXT'		=> 'mediumtext',		'MTEXT_UNI'	=> 'mediumtext',		'TIMESTAMP'	=> 'int(11) UNSIGNED',		'DECIMAL'	=> 'decimal(5,2)',		'DECIMAL:'	=> 'decimal(%d,2)',		'PDECIMAL'	=> 'decimal(6,3)',		'PDECIMAL:'	=> 'decimal(%d,3)',		'VCHAR_UNI'	=> 'varchar(255)',		'VCHAR_UNI:'=> 'varchar(%d)',		'VCHAR_CI'	=> 'varchar(255)',		'VARBINARY'	=> 'varbinary(255)',	),	'mysql_40'	=> array(		'INT:'		=> 'int(%d)',		'BINT'		=> 'bigint(20)',		'UINT'		=> 'mediumint(8) UNSIGNED',		'UINT:'		=> 'int(%d) UNSIGNED',		'TINT:'		=> 'tinyint(%d)',		'USINT'		=> 'smallint(4) UNSIGNED',		'BOOL'		=> 'tinyint(1) UNSIGNED',		'VCHAR'		=> 'varbinary(255)',		'VCHAR:'	=> 'varbinary(%d)',		'CHAR:'		=> 'binary(%d)',		'XSTEXT'	=> 'blob',		'XSTEXT_UNI'=> 'blob',		'STEXT'		=> 'blob',		'STEXT_UNI'	=> 'blob',		'TEXT'		=> 'blob',		'TEXT_UNI'	=> 'blob',		'MTEXT'		=> 'mediumblob',		'MTEXT_UNI'	=> 'mediumblob',		'TIMESTAMP'	=> 'int(11) UNSIGNED',		'DECIMAL'	=> 'decimal(5,2)',		'DECIMAL:'	=> 'decimal(%d,2)',		'PDECIMAL'	=> 'decimal(6,3)',		'PDECIMAL:'	=> 'decimal(%d,3)',		'VCHAR_UNI'	=> 'blob',		'VCHAR_UNI:'=> array('varbinary(%d)', 'limit' => array('mult', 3, 255, 'blob')),		'VCHAR_CI'	=> 'blob',		'VARBINARY'	=> 'varbinary(255)',	),);foreach ($schema_data as $table_name => $table_data){	$table_name = str_replace('phpbb_', $prefix, $table_name);	// Write comment about table	echo "# Table: '{$table_name}'$newline";	// Create Table statement	$generator = $textimage = false;	// Do we need to DROP a fulltext index before we alter the table?	if ($table_name == ($prefix . 'posts') && $drop_index)	{		echo "ALTER TABLE {$table_name}{$newline}";		echo "DROP INDEX post_text,{$newline}DROP INDEX post_subject,{$newline}DROP INDEX post_content;{$newline}{$newline}";	}	$line = "ALTER TABLE {$table_name} $newline";	// Table specific so we don't get overlap	$modded_array = array();	// Write columns one by one...	foreach ($table_data['COLUMNS'] as $column_name => $column_data)	{		// Get type		if (strpos($column_data[0], ':') !== false)		{			list($orig_column_type, $column_length) = explode(':', $column_data[0]);			$column_type = sprintf($dbms_type_map['mysql_41'][$orig_column_type . ':'], $column_length);			if (isset($dbms_type_map['mysql_40'][$orig_column_type . ':']['limit'][0]))			{				switch ($dbms_type_map['mysql_40'][$orig_column_type . ':']['limit'][0])				{					case 'mult':						if (($column_length * $dbms_type_map['mysql_40'][$orig_column_type . ':']['limit'][1]) > $dbms_type_map['mysql_40'][$orig_column_type . ':']['limit'][2])						{							$modded_array[$column_name] = $column_type;						}					break;				}			}			$orig_column_type .= ':';		}		else		{			$orig_column_type = $column_data[0];			$other_column_type = $dbms_type_map['mysql_40'][$column_data[0]];			if ($other_column_type == 'text' || $other_column_type == 'blob')			{				$modded_array[$column_name] = $column_type;			}			$column_type = $dbms_type_map['mysql_41'][$column_data[0]];		}		// Adjust default value if db-dependant specified		if (is_array($column_data[1]))		{			$column_data[1] = (isset($column_data[1][$dbms])) ? $column_data[1][$dbms] : $column_data[1]['default'];		}		$line .= "\tMODIFY {$column_name} {$column_type} ";		// For hexadecimal values do not use single quotes		if (!is_null($column_data[1]) && substr($column_type, -4) !== 'text' && substr($column_type, -4) !== 'blob')		{			$line .= (strpos($column_data[1], '0x') === 0) ? "DEFAULT {$column_data[1]} " : "DEFAULT '{$column_data[1]}' ";		}		$line .= 'NOT NULL';		if (isset($column_data[2]))		{			if ($column_data[2] == 'auto_increment')			{				$line .= ' auto_increment';			}			else if ($column_data[2] == 'true_sort')			{				$line .= ' COLLATE utf8_unicode_ci';			}			else if ($column_data[2] == 'no_sort')			{				$line .= ' COLLATE utf8_bin';			}		}		else if (preg_match('/(?:var)?char|(?:medium)?text/i', $column_type))		{			$line .= ' COLLATE utf8_bin';		}		$line .= ",$newline";	}	// Write Keys	if (isset($table_data['KEYS']))	{		foreach ($table_data['KEYS'] as $key_name => $key_data)		{			$temp = '';			if (!is_array($key_data[1]))			{				$key_data[1] = array($key_data[1]);			}			$temp .= ($key_data[0] == 'INDEX') ? "\tADD KEY" : '';			$temp .= ($key_data[0] == 'UNIQUE') ? "\tADD UNIQUE" : '';			$repair = false;			foreach ($key_data[1] as $key => $col_name)			{				if (isset($modded_array[$col_name]))				{					$repair = true;				}			}			if ($repair)			{				$line .= "\tDROP INDEX " . $key_name . ",$newline";				$line .= $temp;				$line .= ' ' . $key_name . ' (' . implode(', ', $key_data[1]) . "),$newline";			}		}	}	//$line .= "\tCONVERT TO CHARACTER SET `utf8`$newline";	$line .= "\tDEFAULT CHARSET=utf8 COLLATE=utf8_bin;$newline$newline";	echo $line . "$newline";	// Do we now need to re-add the fulltext index? ;)	if ($table_name == ($prefix . 'posts') && $drop_index)	{		echo "ALTER TABLE $table_name ADD FULLTEXT (post_subject), ADD FULLTEXT (post_text), ADD FULLTEXT post_content (post_subject, post_text);{$newline}";	}}/*** Define the basic structure* The format:*		array('{TABLE_NAME}' => {TABLE_DATA})*		{TABLE_DATA}:*			COLUMNS = array({column_name} = array({column_type}, {default}, {auto_increment}))*			PRIMARY_KEY = {column_name(s)}*			KEYS = array({key_name} = array({key_type}, {column_name(s)})),**	Column Types:*	INT:x		=> SIGNED int(x)*	BINT		=> BIGINT*	UINT		=> mediumint(8) UNSIGNED*	UINT:x		=> int(x) UNSIGNED*	TINT:x		=> tinyint(x)*	USINT		=> smallint(4) UNSIGNED (for _order columns)*	BOOL		=> tinyint(1) UNSIGNED*	VCHAR		=> varchar(255)*	CHAR:x		=> char(x)*	XSTEXT_UNI	=> text for storing 100 characters (topic_title for example)*	STEXT_UNI	=> text for storing 255 characters (normal input field with a max of 255 single-byte chars) - same as VCHAR_UNI*	TEXT_UNI	=> text for storing 3000 characters (short text, descriptions, comments, etc.)*	MTEXT_UNI	=> mediumtext (post text, large text)*	VCHAR:x		=> varchar(x)*	TIMESTAMP	=> int(11) UNSIGNED*	DECIMAL		=> decimal number (5,2)*	DECIMAL:	=> decimal number (x,2)*	PDECIMAL	=> precision decimal number (6,3)*	PDECIMAL:	=> precision decimal number (x,3)*	VCHAR_UNI	=> varchar(255) BINARY*	VCHAR_CI	=> varchar_ci for postgresql, others VCHAR*/function get_schema_struct(){	$schema_data = array();	$schema_data['phpbb_attachments'] = array(		'COLUMNS'		=> array(			'attach_id'			=> array('UINT', NULL, 'auto_increment'),			'post_msg_id'		=> array('UINT', 0),			'topic_id'			=> array('UINT', 0),			'in_message'		=> array('BOOL', 0),			'poster_id'			=> array('UINT', 0),			'is_orphan'			=> array('BOOL', 1),			'physical_filename'	=> array('VCHAR', ''),			'real_filename'		=> array('VCHAR', ''),			'download_count'	=> array('UINT', 0),			'attach_comment'	=> array('TEXT_UNI', ''),			'extension'			=> array('VCHAR:100', ''),			'mimetype'			=> array('VCHAR:100', ''),			'filesize'			=> array('UINT:20', 0),			'filetime'			=> array('TIMESTAMP', 0),			'thumbnail'			=> array('BOOL', 0),		),		'PRIMARY_KEY'	=> 'attach_id',		'KEYS'			=> array(			'filetime'			=> array('INDEX', 'filetime'),			'post_msg_id'		=> array('INDEX', 'post_msg_id'),			'topic_id'			=> array('INDEX', 'topic_id'),			'poster_id'			=> array('INDEX', 'poster_id'),			'is_orphan'			=> array('INDEX', 'is_orphan'),		),	);	$schema_data['phpbb_acl_groups'] = array(		'COLUMNS'		=> array(			'group_id'			=> array('UINT', 0),			'forum_id'			=> array('UINT', 0),			'auth_option_id'	=> array('UINT', 0),			'auth_role_id'		=> array('UINT', 0),			'auth_setting'		=> array('TINT:2', 0),		),		'KEYS'			=> array(			'group_id'		=> array('INDEX', 'group_id'),			'auth_opt_id'	=> array('INDEX', 'auth_option_id'),			'auth_role_id'	=> array('INDEX', 'auth_role_id'),		),	);	$schema_data['phpbb_acl_options'] = array(		'COLUMNS'		=> array(			'auth_option_id'	=> array('UINT', NULL, 'auto_increment'),			'auth_option'		=> array('VCHAR:50', ''),			'is_global'			=> array('BOOL', 0),			'is_local'			=> array('BOOL', 0),			'founder_only'		=> array('BOOL', 0),		),		'PRIMARY_KEY'	=> 'auth_option_id',		'KEYS'			=> array(			'auth_option'		=> array('UNIQUE', 'auth_option'),		),	);	$schema_data['phpbb_acl_roles'] = array(		'COLUMNS'		=> array(			'role_id'			=> array('UINT', NULL, 'auto_increment'),			'role_name'			=> array('VCHAR_UNI', ''),			'role_description'	=> array('TEXT_UNI', ''),			'role_type'			=> array('VCHAR:10', ''),			'role_order'		=> array('USINT', 0),		),		'PRIMARY_KEY'	=> 'role_id',		'KEYS'			=> array(			'role_type'			=> array('INDEX', 'role_type'),			'role_order'		=> array('INDEX', 'role_order'),		),	);	$schema_data['phpbb_acl_roles_data'] = array(		'COLUMNS'		=> array(			'role_id'			=> array('UINT', 0),			'auth_option_id'	=> array('UINT', 0),			'auth_setting'		=> array('TINT:2', 0),		),		'PRIMARY_KEY'	=> array('role_id', 'auth_option_id'),		'KEYS'			=> array(			'ath_op_id'			=> array('INDEX', 'auth_option_id'),		),	);	$schema_data['phpbb_acl_users'] = array(		'COLUMNS'		=> array(			'user_id'			=> array('UINT', 0),			'forum_id'			=> array('UINT', 0),			'auth_option_id'	=> array('UINT', 0),			'auth_role_id'		=> array('UINT', 0),			'auth_setting'		=> array('TINT:2', 0),		),		'KEYS'			=> array(			'user_id'			=> array('INDEX', 'user_id'),			'auth_option_id'	=> array('INDEX', 'auth_option_id'),			'auth_role_id'		=> array('INDEX', 'auth_role_id'),		),	);	$schema_data['phpbb_banlist'] = array(		'COLUMNS'		=> array(			'ban_id'			=> array('UINT', NULL, 'auto_increment'),			'ban_userid'		=> array('UINT', 0),			'ban_ip'			=> array('VCHAR:40', ''),			'ban_email'			=> array('VCHAR_UNI:100', ''),			'ban_start'			=> array('TIMESTAMP', 0),			'ban_end'			=> array('TIMESTAMP', 0),			'ban_exclude'		=> array('BOOL', 0),			'ban_reason'		=> array('VCHAR_UNI', ''),			'ban_give_reason'	=> array('VCHAR_UNI', ''),		),		'PRIMARY_KEY'			=> 'ban_id',		'KEYS'			=> array(			'ban_end'			=> array('INDEX', 'ban_end'),			'ban_user'			=> array('INDEX', array('ban_userid', 'ban_exclude')),			'ban_email'			=> array('INDEX', array('ban_email', 'ban_exclude')),			'ban_ip'			=> array('INDEX', array('ban_ip', 'ban_exclude')),		),	);	$schema_data['phpbb_bbcodes'] = array(		'COLUMNS'		=> array(			'bbcode_id'				=> array('USINT', 0),			'bbcode_tag'			=> array('VCHAR:16', ''),			'bbcode_helpline'		=> array('VCHAR_UNI', ''),			'display_on_posting'	=> array('BOOL', 0),			'bbcode_match'			=> array('TEXT_UNI', ''),			'bbcode_tpl'			=> array('MTEXT_UNI', ''),			'first_pass_match'		=> array('MTEXT_UNI', ''),			'first_pass_replace'	=> array('MTEXT_UNI', ''),			'second_pass_match'		=> array('MTEXT_UNI', ''),			'second_pass_replace'	=> array('MTEXT_UNI', ''),		),		'PRIMARY_KEY'	=> 'bbcode_id',		'KEYS'			=> array(			'display_on_post'		=> array('INDEX', 'display_on_posting'),		),	);	$schema_data['phpbb_bookmarks'] = array(		'COLUMNS'		=> array(			'topic_id'			=> array('UINT', 0),			'user_id'			=> array('UINT', 0),		),		'PRIMARY_KEY'			=> array('topic_id', 'user_id'),	);	$schema_data['phpbb_bots'] = array(		'COLUMNS'		=> array(			'bot_id'			=> array('UINT', NULL, 'auto_increment'),			'bot_active'		=> array('BOOL', 1),			'bot_name'			=> array('STEXT_UNI', ''),			'user_id'			=> array('UINT', 0),			'bot_agent'			=> array('VCHAR', ''),			'bot_ip'			=> array('VCHAR', ''),		),		'PRIMARY_KEY'	=> 'bot_id',		'KEYS'			=> array(			'bot_active'		=> array('INDEX', 'bot_active'),		),	);	$schema_data['phpbb_config'] = array(		'COLUMNS'		=> array(			'config_name'		=> array('VCHAR', ''),			'config_value'		=> array('VCHAR_UNI', ''),			'is_dynamic'		=> array('BOOL', 0),		),		'PRIMARY_KEY'	=> 'config_name',		'KEYS'			=> array(			'is_dynamic'		=> array('INDEX', 'is_dynamic'),		),	);	$schema_data['phpbb_confirm'] = array(		'COLUMNS'		=> array(			'confirm_id'		=> array('CHAR:32', ''),			'session_id'		=> array('CHAR:32', ''),			'confirm_type'		=> array('TINT:3', 0),			'code'				=> array('VCHAR:8', ''),			'seed'				=> array('UINT:10', 0),			'attempts'			=> array('UINT', 0),		),		'PRIMARY_KEY'	=> array('session_id', 'confirm_id'),		'KEYS'			=> array(			'confirm_type'		=> array('INDEX', 'confirm_type'),		),	);	$schema_data['phpbb_disallow'] = array(		'COLUMNS'		=> array(			'disallow_id'		=> array('UINT', NULL, 'auto_increment'),			'disallow_username'	=> array('VCHAR_UNI:255', ''),		),		'PRIMARY_KEY'	=> 'disallow_id',	);	$schema_data['phpbb_drafts'] = array(		'COLUMNS'		=> array(			'draft_id'			=> array('UINT', NULL, 'auto_increment'),			'user_id'			=> array('UINT', 0),			'topic_id'			=> array('UINT', 0),			'forum_id'			=> array('UINT', 0),			'save_time'			=> array('TIMESTAMP', 0),			'draft_subject'		=> array('STEXT_UNI', ''),			'draft_message'		=> array('MTEXT_UNI', ''),		),		'PRIMARY_KEY'	=> 'draft_id',		'KEYS'			=> array(			'save_time'			=> array('INDEX', 'save_time'),		),	);	$schema_data['phpbb_extensions'] = array(		'COLUMNS'		=> array(			'extension_id'		=> array('UINT', NULL, 'auto_increment'),			'group_id'			=> array('UINT', 0),			'extension'			=> array('VCHAR:100', ''),		),		'PRIMARY_KEY'	=> 'extension_id',	);	$schema_data['phpbb_extension_groups'] = array(		'COLUMNS'		=> array(			'group_id'			=> array('UINT', NULL, 'auto_increment'),			'group_name'		=> array('VCHAR_UNI', ''),			'cat_id'			=> array('TINT:2', 0),			'allow_group'		=> array('BOOL', 0),			'download_mode'		=> array('BOOL', 1),			'upload_icon'		=> array('VCHAR', ''),			'max_filesize'		=> array('UINT:20', 0),			'allowed_forums'	=> array('TEXT', ''),			'allow_in_pm'		=> array('BOOL', 0),		),		'PRIMARY_KEY'	=> 'group_id',	);	$schema_data['phpbb_forums'] = array(		'COLUMNS'		=> array(			'forum_id'				=> array('UINT', NULL, 'auto_increment'),			'parent_id'				=> array('UINT', 0),			'left_id'				=> array('UINT', 0),			'right_id'				=> array('UINT', 0),			'forum_parents'			=> array('MTEXT', ''),			'forum_name'			=> array('STEXT_UNI', ''),			'forum_desc'			=> array('TEXT_UNI', ''),			'forum_desc_bitfield'	=> array('VCHAR:255', ''),			'forum_desc_options'	=> array('UINT:11', 7),			'forum_desc_uid'		=> array('VCHAR:8', ''),			'forum_link'			=> array('VCHAR_UNI', ''),			'forum_password'		=> array('VCHAR_UNI:40', ''),			'forum_style'			=> array('UINT', 0),			'forum_image'			=> array('VCHAR', ''),			'forum_rules'			=> array('TEXT_UNI', ''),			'forum_rules_link'		=> array('VCHAR_UNI', ''),			'forum_rules_bitfield'	=> array('VCHAR:255', ''),			'forum_rules_options'	=> array('UINT:11', 7),			'forum_rules_uid'		=> array('VCHAR:8', ''),			'forum_topics_per_page'	=> array('TINT:4', 0),			'forum_type'			=> array('TINT:4', 0),			'forum_status'			=> array('TINT:4', 0),			'forum_posts'			=> array('UINT', 0),			'forum_topics'			=> array('UINT', 0),			'forum_topics_real'		=> array('UINT', 0),			'forum_last_post_id'	=> array('UINT', 0),			'forum_last_poster_id'	=> array('UINT', 0),			'forum_last_post_subject' => array('STEXT_UNI', ''),			'forum_last_post_time'	=> array('TIMESTAMP', 0),			'forum_last_poster_name'=> array('VCHAR_UNI', ''),			'forum_last_poster_colour'=> array('VCHAR:6', ''),			'forum_flags'			=> array('TINT:4', 32),			'forum_options'			=> array('UINT:20', 0),			'display_subforum_list'	=> array('BOOL', 1),			'display_on_index'		=> array('BOOL', 1),			'enable_indexing'		=> array('BOOL', 1),			'enable_icons'			=> array('BOOL', 1),			'enable_prune'			=> array('BOOL', 0),			'prune_next'			=> array('TIMESTAMP', 0),			'prune_days'			=> array('UINT', 0),			'prune_viewed'			=> array('UINT', 0),			'prune_freq'			=> array('UINT', 0),		),		'PRIMARY_KEY'	=> 'forum_id',		'KEYS'			=> array(			'left_right_id'			=> array('INDEX', array('left_id', 'right_id')),			'forum_lastpost_id'		=> array('INDEX', 'forum_last_post_id'),		),	);	$schema_data['phpbb_forums_access'] = array(		'COLUMNS'		=> array(			'forum_id'				=> array('UINT', 0),			'user_id'				=> array('UINT', 0),			'session_id'			=> array('CHAR:32', ''),		),		'PRIMARY_KEY'	=> array('forum_id', 'user_id', 'session_id'),	);	$schema_data['phpbb_forums_track'] = array(		'COLUMNS'		=> array(			'user_id'				=> array('UINT', 0),			'forum_id'				=> array('UINT', 0),			'mark_time'				=> array('TIMESTAMP', 0),		),		'PRIMARY_KEY'	=> array('user_id', 'forum_id'),	);	$schema_data['phpbb_forums_watch'] = array(		'COLUMNS'		=> array(			'forum_id'				=> array('UINT', 0),			'user_id'				=> array('UINT', 0),			'notify_status'			=> array('BOOL', 0),		),		'KEYS'			=> array(			'forum_id'				=> array('INDEX', 'forum_id'),			'user_id'				=> array('INDEX', 'user_id'),			'notify_stat'			=> array('INDEX', 'notify_status'),		),	);	$schema_data['phpbb_groups'] = array(		'COLUMNS'		=> array(			'group_id'				=> array('UINT', NULL, 'auto_increment'),			'group_type'			=> array('TINT:4', 1),			'group_founder_manage'	=> array('BOOL', 0),			'group_skip_auth'		=> array('BOOL', 0),			'group_name'			=> array('VCHAR_CI', ''),			'group_desc'			=> array('TEXT_UNI', ''),			'group_desc_bitfield'	=> array('VCHAR:255', ''),			'group_desc_options'	=> array('UINT:11', 7),			'group_desc_uid'		=> array('VCHAR:8', ''),			'group_display'			=> array('BOOL', 0),			'group_avatar'			=> array('VCHAR', ''),			'group_avatar_type'		=> array('TINT:2', 0),			'group_avatar_width'	=> array('USINT', 0),			'group_avatar_height'	=> array('USINT', 0),			'group_rank'			=> array('UINT', 0),			'group_colour'			=> array('VCHAR:6', ''),			'group_sig_chars'		=> array('UINT', 0),			'group_receive_pm'		=> array('BOOL', 0),			'group_message_limit'	=> array('UINT', 0),			'group_max_recipients'	=> array('UINT', 0),			'group_legend'			=> array('BOOL', 1),		),		'PRIMARY_KEY'	=> 'group_id',		'KEYS'			=> array(			'group_legend_name'		=> array('INDEX', array('group_legend', 'group_name')),		),	);	$schema_data['phpbb_icons'] = array(		'COLUMNS'		=> array(			'icons_id'				=> array('UINT', NULL, 'auto_increment'),			'icons_url'				=> array('VCHAR', ''),			'icons_width'			=> array('TINT:4', 0),			'icons_height'			=> array('TINT:4', 0),			'icons_order'			=> array('UINT', 0),			'display_on_posting'	=> array('BOOL', 1),		),		'PRIMARY_KEY'	=> 'icons_id',		'KEYS'			=> array(			'display_on_posting'	=> array('INDEX', 'display_on_posting'),		),	);	$schema_data['phpbb_lang'] = array(		'COLUMNS'		=> array(			'lang_id'				=> array('TINT:4', NULL, 'auto_increment'),			'lang_iso'				=> array('VCHAR:30', ''),			'lang_dir'				=> array('VCHAR:30', ''),			'lang_english_name'		=> array('VCHAR_UNI:100', ''),			'lang_local_name'		=> array('VCHAR_UNI:255', ''),			'lang_author'			=> array('VCHAR_UNI:255', ''),		),		'PRIMARY_KEY'	=> 'lang_id',		'KEYS'			=> array(			'lang_iso'				=> array('INDEX', 'lang_iso'),		),	);	$schema_data['phpbb_log'] = array(		'COLUMNS'		=> array(			'log_id'				=> array('UINT', NULL, 'auto_increment'),			'log_type'				=> array('TINT:4', 0),			'user_id'				=> array('UINT', 0),			'forum_id'				=> array('UINT', 0),			'topic_id'				=> array('UINT', 0),			'reportee_id'			=> array('UINT', 0),			'log_ip'				=> array('VCHAR:40', ''),			'log_time'				=> array('TIMESTAMP', 0),			'log_operation'			=> array('TEXT_UNI', ''),			'log_data'				=> array('MTEXT_UNI', ''),		),		'PRIMARY_KEY'	=> 'log_id',		'KEYS'			=> array(			'log_type'				=> array('INDEX', 'log_type'),			'forum_id'				=> array('INDEX', 'forum_id'),			'topic_id'				=> array('INDEX', 'topic_id'),			'reportee_id'			=> array('INDEX', 'reportee_id'),			'user_id'				=> array('INDEX', 'user_id'),		),	);	$schema_data['phpbb_moderator_cache'] = array(		'COLUMNS'		=> array(			'forum_id'				=> array('UINT', 0),			'user_id'				=> array('UINT', 0),			'username'				=> array('VCHAR_UNI:255', ''),			'group_id'				=> array('UINT', 0),			'group_name'			=> array('VCHAR_UNI', ''),			'display_on_index'		=> array('BOOL', 1),		),		'KEYS'			=> array(			'disp_idx'				=> array('INDEX', 'display_on_index'),			'forum_id'				=> array('INDEX', 'forum_id'),		),	);	$schema_data['phpbb_modules'] = array(		'COLUMNS'		=> array(			'module_id'				=> array('UINT', NULL, 'auto_increment'),			'module_enabled'		=> array('BOOL', 1),			'module_display'		=> array('BOOL', 1),			'module_basename'		=> array('VCHAR', ''),			'module_class'			=> array('VCHAR:10', ''),			'parent_id'				=> array('UINT', 0),			'left_id'				=> array('UINT', 0),			'right_id'				=> array('UINT', 0),			'module_langname'		=> array('VCHAR', ''),			'module_mode'			=> array('VCHAR', ''),			'module_auth'			=> array('VCHAR', ''),		),		'PRIMARY_KEY'	=> 'module_id',		'KEYS'			=> array(			'left_right_id'			=> array('INDEX', array('left_id', 'right_id')),			'module_enabled'		=> array('INDEX', 'module_enabled'),			'class_left_id'			=> array('INDEX', array('module_class', 'left_id')),		),	);	$schema_data['phpbb_poll_options'] = array(		'COLUMNS'		=> array(			'poll_option_id'		=> array('TINT:4', 0),			'topic_id'				=> array('UINT', 0),			'poll_option_text'		=> array('TEXT_UNI', ''),			'poll_option_total'		=> array('UINT', 0),		),		'KEYS'			=> array(			'poll_opt_id'			=> array('INDEX', 'poll_option_id'),			'topic_id'				=> array('INDEX', 'topic_id'),		),	);	$schema_data['phpbb_poll_votes'] = array(		'COLUMNS'		=> array(			'topic_id'				=> array('UINT', 0),			'poll_option_id'		=> array('TINT:4', 0),			'vote_user_id'			=> array('UINT', 0),			'vote_user_ip'			=> array('VCHAR:40', ''),		),		'KEYS'			=> array(			'topic_id'				=> array('INDEX', 'topic_id'),			'vote_user_id'			=> array('INDEX', 'vote_user_id'),			'vote_user_ip'			=> array('INDEX', 'vote_user_ip'),		),	);	$schema_data['phpbb_posts'] = array(		'COLUMNS'		=> array(			'post_id'				=> array('UINT', NULL, 'auto_increment'),			'topic_id'				=> array('UINT', 0),			'forum_id'				=> array('UINT', 0),			'poster_id'				=> array('UINT', 0),			'icon_id'				=> array('UINT', 0),			'poster_ip'				=> array('VCHAR:40', ''),			'post_time'				=> array('TIMESTAMP', 0),			'post_approved'			=> array('BOOL', 1),			'post_reported'			=> array('BOOL', 0),			'enable_bbcode'			=> array('BOOL', 1),			'enable_smilies'		=> array('BOOL', 1),			'enable_magic_url'		=> array('BOOL', 1),			'enable_sig'			=> array('BOOL', 1),			'post_username'			=> array('VCHAR_UNI:255', ''),			'post_subject'			=> array('STEXT_UNI', '', 'true_sort'),			'post_text'				=> array('MTEXT_UNI', ''),			'post_checksum'			=> array('VCHAR:32', ''),			'post_attachment'		=> array('BOOL', 0),			'bbcode_bitfield'		=> array('VCHAR:255', ''),			'bbcode_uid'			=> array('VCHAR:8', ''),			'post_postcount'		=> array('BOOL', 1),			'post_edit_time'		=> array('TIMESTAMP', 0),			'post_edit_reason'		=> array('STEXT_UNI', ''),			'post_edit_user'		=> array('UINT', 0),			'post_edit_count'		=> array('USINT', 0),			'post_edit_locked'		=> array('BOOL', 0),		),		'PRIMARY_KEY'	=> 'post_id',		'KEYS'			=> array(			'forum_id'				=> array('INDEX', 'forum_id'),			'topic_id'				=> array('INDEX', 'topic_id'),			'poster_ip'				=> array('INDEX', 'poster_ip'),			'poster_id'				=> array('INDEX', 'poster_id'),			'post_approved'			=> array('INDEX', 'post_approved'),			'post_username'			=> array('INDEX', 'post_username'),			'tid_post_time'			=> array('INDEX', array('topic_id', 'post_time')),		),	);	$schema_data['phpbb_privmsgs'] = array(		'COLUMNS'		=> array(			'msg_id'				=> array('UINT', NULL, 'auto_increment'),			'root_level'			=> array('UINT', 0),			'author_id'				=> array('UINT', 0),			'icon_id'				=> array('UINT', 0),			'author_ip'				=> array('VCHAR:40', ''),			'message_time'			=> array('TIMESTAMP', 0),			'enable_bbcode'			=> array('BOOL', 1),			'enable_smilies'		=> array('BOOL', 1),			'enable_magic_url'		=> array('BOOL', 1),			'enable_sig'			=> array('BOOL', 1),			'message_subject'		=> array('STEXT_UNI', ''),			'message_text'			=> array('MTEXT_UNI', ''),			'message_edit_reason'	=> array('STEXT_UNI', ''),			'message_edit_user'		=> array('UINT', 0),			'message_attachment'	=> array('BOOL', 0),			'bbcode_bitfield'		=> array('VCHAR:255', ''),			'bbcode_uid'			=> array('VCHAR:8', ''),			'message_edit_time'		=> array('TIMESTAMP', 0),			'message_edit_count'	=> array('USINT', 0),			'to_address'			=> array('TEXT_UNI', ''),			'bcc_address'			=> array('TEXT_UNI', ''),			'message_reported'		=> array('BOOL', 0),		),		'PRIMARY_KEY'	=> 'msg_id',		'KEYS'			=> array(			'author_ip'				=> array('INDEX', 'author_ip'),			'message_time'			=> array('INDEX', 'message_time'),			'author_id'				=> array('INDEX', 'author_id'),			'root_level'			=> array('INDEX', 'root_level'),		),	);	$schema_data['phpbb_privmsgs_folder'] = array(		'COLUMNS'		=> array(			'folder_id'				=> array('UINT', NULL, 'auto_increment'),			'user_id'				=> array('UINT', 0),			'folder_name'			=> array('VCHAR_UNI', ''),			'pm_count'				=> array('UINT', 0),		),		'PRIMARY_KEY'	=> 'folder_id',		'KEYS'			=> array(			'user_id'				=> array('INDEX', 'user_id'),		),	);	$schema_data['phpbb_privmsgs_rules'] = array(		'COLUMNS'		=> array(			'rule_id'				=> array('UINT', NULL, 'auto_increment'),			'user_id'				=> array('UINT', 0),			'rule_check'			=> array('UINT', 0),			'rule_connection'		=> array('UINT', 0),			'rule_string'			=> array('VCHAR_UNI', ''),			'rule_user_id'			=> array('UINT', 0),			'rule_group_id'			=> array('UINT', 0),			'rule_action'			=> array('UINT', 0),			'rule_folder_id'		=> array('INT:11', 0),		),		'PRIMARY_KEY'	=> 'rule_id',		'KEYS'			=> array(			'user_id'				=> array('INDEX', 'user_id'),		),	);	$schema_data['phpbb_privmsgs_to'] = array(		'COLUMNS'		=> array(			'msg_id'				=> array('UINT', 0),			'user_id'				=> array('UINT', 0),			'author_id'				=> array('UINT', 0),			'pm_deleted'			=> array('BOOL', 0),			'pm_new'				=> array('BOOL', 1),			'pm_unread'				=> array('BOOL', 1),			'pm_replied'			=> array('BOOL', 0),			'pm_marked'				=> array('BOOL', 0),			'pm_forwarded'			=> array('BOOL', 0),			'folder_id'				=> array('INT:11', 0),		),		'KEYS'			=> array(			'msg_id'				=> array('INDEX', 'msg_id'),			'author_id'				=> array('INDEX', 'author_id'),			'usr_flder_id'			=> array('INDEX', array('user_id', 'folder_id')),		),	);	$schema_data['phpbb_profile_fields'] = array(		'COLUMNS'		=> array(			'field_id'				=> array('UINT', NULL, 'auto_increment'),			'field_name'			=> array('VCHAR_UNI', ''),			'field_type'			=> array('TINT:4', 0),			'field_ident'			=> array('VCHAR:20', ''),			'field_length'			=> array('VCHAR:20', ''),			'field_minlen'			=> array('VCHAR', ''),			'field_maxlen'			=> array('VCHAR', ''),			'field_novalue'			=> array('VCHAR_UNI', ''),			'field_default_value'	=> array('VCHAR_UNI', ''),			'field_validation'		=> array('VCHAR_UNI:20', ''),			'field_required'		=> array('BOOL', 0),			'field_show_on_reg'		=> array('BOOL', 0),			'field_show_on_vt'		=> array('BOOL', 0),			'field_show_profile'	=> array('BOOL', 0),			'field_hide'			=> array('BOOL', 0),			'field_no_view'			=> array('BOOL', 0),			'field_active'			=> array('BOOL', 0),			'field_order'			=> array('UINT', 0),		),		'PRIMARY_KEY'	=> 'field_id',		'KEYS'			=> array(			'fld_type'			=> array('INDEX', 'field_type'),			'fld_ordr'			=> array('INDEX', 'field_order'),		),	);	$schema_data['phpbb_profile_fields_data'] = array(		'COLUMNS'		=> array(			'user_id'				=> array('UINT', 0),		),		'PRIMARY_KEY'	=> 'user_id',	);	$schema_data['phpbb_profile_fields_lang'] = array(		'COLUMNS'		=> array(			'field_id'				=> array('UINT', 0),			'lang_id'				=> array('UINT', 0),			'option_id'				=> array('UINT', 0),			'field_type'			=> array('TINT:4', 0),			'lang_value'			=> array('VCHAR_UNI', ''),		),		'PRIMARY_KEY'	=> array('field_id', 'lang_id', 'option_id'),	);	$schema_data['phpbb_profile_lang'] = array(		'COLUMNS'		=> array(			'field_id'				=> array('UINT', 0),			'lang_id'				=> array('UINT', 0),			'lang_name'				=> array('VCHAR_UNI', ''),			'lang_explain'			=> array('TEXT_UNI', ''),			'lang_default_value'	=> array('VCHAR_UNI', ''),		),		'PRIMARY_KEY'	=> array('field_id', 'lang_id'),	);	$schema_data['phpbb_ranks'] = array(		'COLUMNS'		=> array(			'rank_id'				=> array('UINT', NULL, 'auto_increment'),			'rank_title'			=> array('VCHAR_UNI', ''),			'rank_min'				=> array('UINT', 0),			'rank_special'			=> array('BOOL', 0),			'rank_image'			=> array('VCHAR', ''),		),		'PRIMARY_KEY'	=> 'rank_id',	);	$schema_data['phpbb_reports'] = array(		'COLUMNS'		=> array(			'report_id'				=> array('UINT', NULL, 'auto_increment'),			'reason_id'				=> array('USINT', 0),			'post_id'				=> array('UINT', 0),			'pm_id'					=> array('UINT', 0),			'user_id'				=> array('UINT', 0),			'user_notify'			=> array('BOOL', 0),			'report_closed'			=> array('BOOL', 0),			'report_time'			=> array('TIMESTAMP', 0),			'report_text'			=> array('MTEXT_UNI', ''),		),		'PRIMARY_KEY'	=> 'report_id',		'KEYS'			=> array(			'post_id'			=> array('INDEX', 'post_id'),			'pm_id'				=> array('INDEX', 'pm_id'),		),	);	$schema_data['phpbb_reports_reasons'] = array(		'COLUMNS'		=> array(			'reason_id'				=> array('USINT', NULL, 'auto_increment'),			'reason_title'			=> array('VCHAR_UNI', ''),			'reason_description'	=> array('MTEXT_UNI', ''),			'reason_order'			=> array('USINT', 0),		),		'PRIMARY_KEY'	=> 'reason_id',	);	$schema_data['phpbb_search_results'] = array(		'COLUMNS'		=> array(			'search_key'			=> array('VCHAR:32', ''),			'search_time'			=> array('TIMESTAMP', 0),			'search_keywords'		=> array('MTEXT_UNI', ''),			'search_authors'		=> array('MTEXT', ''),		),		'PRIMARY_KEY'	=> 'search_key',	);	$schema_data['phpbb_search_wordlist'] = array(		'COLUMNS'		=> array(			'word_id'			=> array('UINT', NULL, 'auto_increment'),			'word_text'			=> array('VCHAR_UNI', ''),			'word_common'		=> array('BOOL', 0),			'word_count'		=> array('UINT', 0),		),		'PRIMARY_KEY'	=> 'word_id',		'KEYS'			=> array(			'wrd_txt'			=> array('UNIQUE', 'word_text'),			'wrd_cnt'			=> array('INDEX', 'word_count'),		),	);	$schema_data['phpbb_search_wordmatch'] = array(		'COLUMNS'		=> array(			'post_id'			=> array('UINT', 0),			'word_id'			=> array('UINT', 0),			'title_match'		=> array('BOOL', 0),		),		'KEYS'			=> array(			'unq_mtch'			=> array('UNIQUE', array('word_id', 'post_id', 'title_match')),			'word_id'			=> array('INDEX', 'word_id'),			'post_id'			=> array('INDEX', 'post_id'),		),	);	$schema_data['phpbb_sessions'] = array(		'COLUMNS'		=> array(			'session_id'			=> array('CHAR:32', ''),			'session_user_id'		=> array('UINT', 0),			'session_forum_id'		=> array('UINT', 0),			'session_last_visit'	=> array('TIMESTAMP', 0),			'session_start'			=> array('TIMESTAMP', 0),			'session_time'			=> array('TIMESTAMP', 0),			'session_ip'			=> array('VCHAR:40', ''),			'session_browser'		=> array('VCHAR:150', ''),			'session_forwarded_for'	=> array('VCHAR:255', ''),			'session_page'			=> array('VCHAR_UNI', ''),			'session_viewonline'	=> array('BOOL', 1),			'session_autologin'		=> array('BOOL', 0),			'session_admin'			=> array('BOOL', 0),		),		'PRIMARY_KEY'	=> 'session_id',		'KEYS'			=> array(			'session_time'		=> array('INDEX', 'session_time'),			'session_user_id'	=> array('INDEX', 'session_user_id'),			'session_fid'		=> array('INDEX', 'session_forum_id'),		),	);	$schema_data['phpbb_sessions_keys'] = array(		'COLUMNS'		=> array(			'key_id'			=> array('CHAR:32', ''),			'user_id'			=> array('UINT', 0),			'last_ip'			=> array('VCHAR:40', ''),			'last_login'		=> array('TIMESTAMP', 0),		),		'PRIMARY_KEY'	=> array('key_id', 'user_id'),		'KEYS'			=> array(			'last_login'		=> array('INDEX', 'last_login'),		),	);	$schema_data['phpbb_sitelist'] = array(		'COLUMNS'		=> array(			'site_id'		=> array('UINT', NULL, 'auto_increment'),			'site_ip'		=> array('VCHAR:40', ''),			'site_hostname'	=> array('VCHAR', ''),			'ip_exclude'	=> array('BOOL', 0),		),		'PRIMARY_KEY'		=> 'site_id',	);	$schema_data['phpbb_smilies'] = array(		'COLUMNS'		=> array(			'smiley_id'			=> array('UINT', NULL, 'auto_increment'),			// We may want to set 'code' to VCHAR:50 or check if unicode support is possible... at the moment only ASCII characters are allowed.			'code'				=> array('VCHAR_UNI:50', ''),			'emotion'			=> array('VCHAR_UNI:50', ''),			'smiley_url'		=> array('VCHAR:50', ''),			'smiley_width'		=> array('USINT', 0),			'smiley_height'		=> array('USINT', 0),			'smiley_order'		=> array('UINT', 0),			'display_on_posting'=> array('BOOL', 1),		),		'PRIMARY_KEY'	=> 'smiley_id',		'KEYS'			=> array(			'display_on_post'		=> array('INDEX', 'display_on_posting'),		),	);	$schema_data['phpbb_styles'] = array(		'COLUMNS'		=> array(			'style_id'				=> array('UINT', NULL, 'auto_increment'),			'style_name'			=> array('VCHAR_UNI:255', ''),			'style_copyright'		=> array('VCHAR_UNI', ''),			'style_active'			=> array('BOOL', 1),			'template_id'			=> array('UINT', 0),			'theme_id'				=> array('UINT', 0),			'imageset_id'			=> array('UINT', 0),		),		'PRIMARY_KEY'	=> 'style_id',		'KEYS'			=> array(			'style_name'		=> array('UNIQUE', 'style_name'),			'template_id'		=> array('INDEX', 'template_id'),			'theme_id'			=> array('INDEX', 'theme_id'),			'imageset_id'		=> array('INDEX', 'imageset_id'),		),	);	$schema_data['phpbb_styles_template'] = array(		'COLUMNS'		=> array(			'template_id'			=> array('UINT', NULL, 'auto_increment'),			'template_name'			=> array('VCHAR_UNI:255', ''),			'template_copyright'	=> array('VCHAR_UNI', ''),			'template_path'			=> array('VCHAR:100', ''),			'bbcode_bitfield'		=> array('VCHAR:255', 'kNg='),			'template_storedb'		=> array('BOOL', 0),			'template_inherits_id'		=> array('UINT:4', 0),			'template_inherit_path'		=> array('VCHAR', ''),		),		'PRIMARY_KEY'	=> 'template_id',		'KEYS'			=> array(			'tmplte_nm'				=> array('UNIQUE', 'template_name'),		),	);	$schema_data['phpbb_styles_template_data'] = array(		'COLUMNS'		=> array(			'template_id'			=> array('UINT', 0),			'template_filename'		=> array('VCHAR:100', ''),			'template_included'		=> array('TEXT', ''),			'template_mtime'		=> array('TIMESTAMP', 0),			'template_data'			=> array('MTEXT_UNI', ''),		),		'KEYS'			=> array(			'tid'					=> array('INDEX', 'template_id'),			'tfn'					=> array('INDEX', 'template_filename'),		),	);	$schema_data['phpbb_styles_theme'] = array(		'COLUMNS'		=> array(			'theme_id'				=> array('UINT', NULL, 'auto_increment'),			'theme_name'			=> array('VCHAR_UNI:255', ''),			'theme_copyright'		=> array('VCHAR_UNI', ''),			'theme_path'			=> array('VCHAR:100', ''),			'theme_storedb'			=> array('BOOL', 0),			'theme_mtime'			=> array('TIMESTAMP', 0),			'theme_data'			=> array('MTEXT_UNI', ''),		),		'PRIMARY_KEY'	=> 'theme_id',		'KEYS'			=> array(			'theme_name'		=> array('UNIQUE', 'theme_name'),		),	);	$schema_data['phpbb_styles_imageset'] = array(		'COLUMNS'		=> array(			'imageset_id'				=> array('UINT', NULL, 'auto_increment'),			'imageset_name'				=> array('VCHAR_UNI:255', ''),			'imageset_copyright'		=> array('VCHAR_UNI', ''),			'imageset_path'				=> array('VCHAR:100', ''),		),		'PRIMARY_KEY'		=> 'imageset_id',		'KEYS'				=> array(			'imgset_nm'			=> array('UNIQUE', 'imageset_name'),		),	);	$schema_data['phpbb_styles_imageset_data'] = array(		'COLUMNS'		=> array(			'image_id'				=> array('UINT', NULL, 'auto_increment'),			'image_name'			=> array('VCHAR:200', ''),			'image_filename'		=> array('VCHAR:200', ''),			'image_lang'			=> array('VCHAR:30', ''),			'image_height'			=> array('USINT', 0),			'image_width'			=> array('USINT', 0),			'imageset_id'			=> array('UINT', 0),		),		'PRIMARY_KEY'		=> 'image_id',		'KEYS'				=> array(			'i_d'			=> array('INDEX', 'imageset_id'),		),	);	$schema_data['phpbb_topics'] = array(		'COLUMNS'		=> array(			'topic_id'					=> array('UINT', NULL, 'auto_increment'),			'forum_id'					=> array('UINT', 0),			'icon_id'					=> array('UINT', 0),			'topic_attachment'			=> array('BOOL', 0),			'topic_approved'			=> array('BOOL', 1),			'topic_reported'			=> array('BOOL', 0),			'topic_title'				=> array('STEXT_UNI', '', 'true_sort'),			'topic_poster'				=> array('UINT', 0),			'topic_time'				=> array('TIMESTAMP', 0),			'topic_time_limit'			=> array('TIMESTAMP', 0),			'topic_views'				=> array('UINT', 0),			'topic_replies'				=> array('UINT', 0),			'topic_replies_real'		=> array('UINT', 0),			'topic_status'				=> array('TINT:3', 0),			'topic_type'				=> array('TINT:3', 0),			'topic_first_post_id'		=> array('UINT', 0),			'topic_first_poster_name'	=> array('VCHAR_UNI', ''),			'topic_first_poster_colour'	=> array('VCHAR:6', ''),			'topic_last_post_id'		=> array('UINT', 0),			'topic_last_poster_id'		=> array('UINT', 0),			'topic_last_poster_name'	=> array('VCHAR_UNI', ''),			'topic_last_poster_colour'	=> array('VCHAR:6', ''),			'topic_last_post_subject'	=> array('STEXT_UNI', ''),			'topic_last_post_time'		=> array('TIMESTAMP', 0),			'topic_last_view_time'		=> array('TIMESTAMP', 0),			'topic_moved_id'			=> array('UINT', 0),			'topic_bumped'				=> array('BOOL', 0),			'topic_bumper'				=> array('UINT', 0),			'poll_title'				=> array('STEXT_UNI', ''),			'poll_start'				=> array('TIMESTAMP', 0),			'poll_length'				=> array('TIMESTAMP', 0),			'poll_max_options'			=> array('TINT:4', 1),			'poll_last_vote'			=> array('TIMESTAMP', 0),			'poll_vote_change'			=> array('BOOL', 0),		),		'PRIMARY_KEY'	=> 'topic_id',		'KEYS'			=> array(			'forum_id'			=> array('INDEX', 'forum_id'),			'forum_id_type'		=> array('INDEX', array('forum_id', 'topic_type')),			'last_post_time'	=> array('INDEX', 'topic_last_post_time'),			'topic_approved'	=> array('INDEX', 'topic_approved'),			'forum_appr_last'	=> array('INDEX', array('forum_id', 'topic_approved', 'topic_last_post_id')),			'fid_time_moved'	=> array('INDEX', array('forum_id', 'topic_last_post_time', 'topic_moved_id')),		),	);	$schema_data['phpbb_topics_track'] = array(		'COLUMNS'		=> array(			'user_id'			=> array('UINT', 0),			'topic_id'			=> array('UINT', 0),			'forum_id'			=> array('UINT', 0),			'mark_time'			=> array('TIMESTAMP', 0),		),		'PRIMARY_KEY'	=> array('user_id', 'topic_id'),		'KEYS'			=> array(			'topic_id'			=> array('INDEX', 'topic_id'),			'forum_id'			=> array('INDEX', 'forum_id'),		),	);	$schema_data['phpbb_topics_posted'] = array(		'COLUMNS'		=> array(			'user_id'			=> array('UINT', 0),			'topic_id'			=> array('UINT', 0),			'topic_posted'		=> array('BOOL', 0),		),		'PRIMARY_KEY'	=> array('user_id', 'topic_id'),	);	$schema_data['phpbb_topics_watch'] = array(		'COLUMNS'		=> array(			'topic_id'			=> array('UINT', 0),			'user_id'			=> array('UINT', 0),			'notify_status'		=> array('BOOL', 0),		),		'KEYS'			=> array(			'topic_id'			=> array('INDEX', 'topic_id'),			'user_id'			=> array('INDEX', 'user_id'),			'notify_stat'		=> array('INDEX', 'notify_status'),		),	);	$schema_data['phpbb_user_group'] = array(		'COLUMNS'		=> array(			'group_id'			=> array('UINT', 0),			'user_id'			=> array('UINT', 0),			'group_leader'		=> array('BOOL', 0),			'user_pending'		=> array('BOOL', 1),		),		'KEYS'			=> array(			'group_id'			=> array('INDEX', 'group_id'),			'user_id'			=> array('INDEX', 'user_id'),			'group_leader'		=> array('INDEX', 'group_leader'),		),	);	$schema_data['phpbb_users'] = array(		'COLUMNS'		=> array(			'user_id'					=> array('UINT', NULL, 'auto_increment'),			'user_type'					=> array('TINT:2', 0),			'group_id'					=> array('UINT', 3),			'user_permissions'			=> array('MTEXT', ''),			'user_perm_from'			=> array('UINT', 0),			'user_ip'					=> array('VCHAR:40', ''),			'user_regdate'				=> array('TIMESTAMP', 0),			'username'					=> array('VCHAR_CI', ''),			'username_clean'			=> array('VCHAR_CI', ''),			'user_password'				=> array('VCHAR_UNI:40', ''),			'user_passchg'				=> array('TIMESTAMP', 0),			'user_pass_convert'			=> array('BOOL', 0),			'user_email'				=> array('VCHAR_UNI:100', ''),			'user_email_hash'			=> array('BINT', 0),			'user_birthday'				=> array('VCHAR:10', ''),			'user_lastvisit'			=> array('TIMESTAMP', 0),			'user_lastmark'				=> array('TIMESTAMP', 0),			'user_lastpost_time'		=> array('TIMESTAMP', 0),			'user_lastpage'				=> array('VCHAR_UNI:200', ''),			'user_last_confirm_key'		=> array('VCHAR:10', ''),			'user_last_search'			=> array('TIMESTAMP', 0),			'user_warnings'				=> array('TINT:4', 0),			'user_last_warning'			=> array('TIMESTAMP', 0),			'user_login_attempts'		=> array('TINT:4', 0),			'user_inactive_reason'		=> array('TINT:2', 0),			'user_inactive_time'		=> array('TIMESTAMP', 0),			'user_posts'				=> array('UINT', 0),			'user_lang'					=> array('VCHAR:30', ''),			'user_timezone'				=> array('DECIMAL', 0),			'user_dst'					=> array('BOOL', 0),			'user_dateformat'			=> array('VCHAR_UNI:30', 'd M Y H:i'),			'user_style'				=> array('UINT', 0),			'user_rank'					=> array('UINT', 0),			'user_colour'				=> array('VCHAR:6', ''),			'user_new_privmsg'			=> array('INT:4', 0),			'user_unread_privmsg'		=> array('INT:4', 0),			'user_last_privmsg'			=> array('TIMESTAMP', 0),			'user_message_rules'		=> array('BOOL', 0),			'user_full_folder'			=> array('INT:11', -3),			'user_emailtime'			=> array('TIMESTAMP', 0),			'user_topic_show_days'		=> array('USINT', 0),			'user_topic_sortby_type'	=> array('VCHAR:1', 't'),			'user_topic_sortby_dir'		=> array('VCHAR:1', 'd'),			'user_post_show_days'		=> array('USINT', 0),			'user_post_sortby_type'		=> array('VCHAR:1', 't'),			'user_post_sortby_dir'		=> array('VCHAR:1', 'a'),			'user_notify'				=> array('BOOL', 0),			'user_notify_pm'			=> array('BOOL', 1),			'user_notify_type'			=> array('TINT:4', 0),			'user_allow_pm'				=> array('BOOL', 1),			'user_allow_viewonline'		=> array('BOOL', 1),			'user_allow_viewemail'		=> array('BOOL', 1),			'user_allow_massemail'		=> array('BOOL', 1),			'user_options'				=> array('UINT:11', 230271),			'user_avatar'				=> array('VCHAR', ''),			'user_avatar_type'			=> array('TINT:2', 0),			'user_avatar_width'			=> array('USINT', 0),			'user_avatar_height'		=> array('USINT', 0),			'user_sig'					=> array('MTEXT_UNI', ''),			'user_sig_bbcode_uid'		=> array('VCHAR:8', ''),			'user_sig_bbcode_bitfield'	=> array('VCHAR:255', ''),			'user_from'					=> array('VCHAR_UNI:100', ''),			'user_icq'					=> array('VCHAR:15', ''),			'user_aim'					=> array('VCHAR_UNI', ''),			'user_yim'					=> array('VCHAR_UNI', ''),			'user_msnm'					=> array('VCHAR_UNI', ''),			'user_jabber'				=> array('VCHAR_UNI', ''),			'user_website'				=> array('VCHAR_UNI:200', ''),			'user_occ'					=> array('TEXT_UNI', ''),			'user_interests'			=> array('TEXT_UNI', ''),			'user_actkey'				=> array('VCHAR:32', ''),			'user_newpasswd'			=> array('VCHAR_UNI:40', ''),			'user_form_salt'			=> array('VCHAR_UNI:32', ''),			'user_new'					=> array('BOOL', 1),			'user_reminded'				=> array('TINT:4', 0),			'user_reminded_time'		=> array('TIMESTAMP', 0),		),		'PRIMARY_KEY'	=> 'user_id',		'KEYS'			=> array(			'user_birthday'				=> array('INDEX', 'user_birthday'),			'user_email_hash'			=> array('INDEX', 'user_email_hash'),			'user_type'					=> array('INDEX', 'user_type'),			'username_clean'			=> array('UNIQUE', 'username_clean'),		),	);	$schema_data['phpbb_warnings'] = array(		'COLUMNS'		=> array(			'warning_id'			=> array('UINT', NULL, 'auto_increment'),			'user_id'				=> array('UINT', 0),			'post_id'				=> array('UINT', 0),			'log_id'				=> array('UINT', 0),			'warning_time'			=> array('TIMESTAMP', 0),		),		'PRIMARY_KEY'	=> 'warning_id',	);	$schema_data['phpbb_words'] = array(		'COLUMNS'		=> array(			'word_id'				=> array('UINT', NULL, 'auto_increment'),			'word'					=> array('VCHAR_UNI', ''),			'replacement'			=> array('VCHAR_UNI', ''),		),		'PRIMARY_KEY'	=> 'word_id',	);	$schema_data['phpbb_zebra'] = array(		'COLUMNS'		=> array(			'user_id'				=> array('UINT', 0),			'zebra_id'				=> array('UINT', 0),			'friend'				=> array('BOOL', 0),			'foe'					=> array('BOOL', 0),		),		'PRIMARY_KEY'	=> array('user_id', 'zebra_id'),	);	return $schema_data;}?>
<?php/**** @package acp* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @ignore*/if (!defined('IN_PHPBB')){	exit;}/*** Recalculate Nested Sets** @param int	$new_id	first left_id (should start with 1)* @param string	$pkey	primary key-column (containing the id for the parent_id of the children)* @param string	$table	constant or fullname of the table* @param int	$parent_id parent_id of the current set (default = 0)* @param array	$where	contains strings to compare closer on the where statement (additional)** @author EXreaction*/function recalc_nested_sets(&$new_id, $pkey, $table, $parent_id = 0, $where = array()){	global $db;	$sql = 'SELECT *		FROM ' . $table . '		WHERE parent_id = ' . (int) $parent_id .		((!empty($where)) ? ' AND ' . implode(' AND ', $where) : '') . '		ORDER BY left_id ASC';	$result = $db->sql_query($sql);	while ($row = $db->sql_fetchrow($result))	{		// First we update the left_id for this module		if ($row['left_id'] != $new_id)		{			$db->sql_query('UPDATE ' . $table . ' SET ' . $db->sql_build_array('UPDATE', array('left_id' => $new_id)) . " WHERE $pkey = {$row[$pkey]}");		}		$new_id++;		// Then we go through any children and update their left/right id's		recalc_nested_sets($new_id, $pkey, $table, $row[$pkey], $where);		// Then we come back and update the right_id for this module		if ($row['right_id'] != $new_id)		{			$db->sql_query('UPDATE ' . $table . ' SET ' . $db->sql_build_array('UPDATE', array('right_id' => $new_id)) . " WHERE $pkey = {$row[$pkey]}");		}		$new_id++;	}	$db->sql_freeresult($result);}/*** Simple version of jumpbox, just lists authed forums*/function make_forum_select($select_id = false, $ignore_id = false, $ignore_acl = false, $ignore_nonpost = false, $ignore_emptycat = true, $only_acl_post = false, $return_array = false){	global $db, $user, $auth;	// This query is identical to the jumpbox one	$sql = 'SELECT forum_id, forum_name, parent_id, forum_type, forum_flags, forum_options, left_id, right_id		FROM ' . FORUMS_TABLE . '		ORDER BY left_id ASC';	$result = $db->sql_query($sql, 600);	$right = 0;	$padding_store = array('0' => '');	$padding = '';	$forum_list = ($return_array) ? array() : '';	// Sometimes it could happen that forums will be displayed here not be displayed within the index page	// This is the result of forums not displayed at index, having list permissions and a parent of a forum with no permissions.	// If this happens, the padding could be "broken"	while ($row = $db->sql_fetchrow($result))	{		if ($row['left_id'] < $right)		{			$padding .= '&nbsp; &nbsp;';			$padding_store[$row['parent_id']] = $padding;		}		else if ($row['left_id'] > $right + 1)		{			$padding = (isset($padding_store[$row['parent_id']])) ? $padding_store[$row['parent_id']] : '';		}		$right = $row['right_id'];		$disabled = false;		if (!$ignore_acl && $auth->acl_gets(array('f_list', 'a_forum', 'a_forumadd', 'a_forumdel'), $row['forum_id']))		{			if ($only_acl_post && !$auth->acl_get('f_post', $row['forum_id']) || (!$auth->acl_get('m_approve', $row['forum_id']) && !$auth->acl_get('f_noapprove', $row['forum_id'])))			{				$disabled = true;			}		}		else if (!$ignore_acl)		{			continue;		}		if (			((is_array($ignore_id) && in_array($row['forum_id'], $ignore_id)) || $row['forum_id'] == $ignore_id)			||			// Non-postable forum with no subforums, don't display			($row['forum_type'] == FORUM_CAT && ($row['left_id'] + 1 == $row['right_id']) && $ignore_emptycat)			||			($row['forum_type'] != FORUM_POST && $ignore_nonpost)			)		{			$disabled = true;		}		if ($return_array)		{			// Include some more information...			$selected = (is_array($select_id)) ? ((in_array($row['forum_id'], $select_id)) ? true : false) : (($row['forum_id'] == $select_id) ? true : false);			$forum_list[$row['forum_id']] = array_merge(array('padding' => $padding, 'selected' => ($selected && !$disabled), 'disabled' => $disabled), $row);		}		else		{			$selected = (is_array($select_id)) ? ((in_array($row['forum_id'], $select_id)) ? ' selected="selected"' : '') : (($row['forum_id'] == $select_id) ? ' selected="selected"' : '');			$forum_list .= '<option value="' . $row['forum_id'] . '"' . (($disabled) ? ' disabled="disabled" class="disabled-option"' : $selected) . '>' . $padding . $row['forum_name'] . '</option>';		}	}	$db->sql_freeresult($result);	unset($padding_store);	return $forum_list;}/*** Generate size select options*/function size_select_options($size_compare){	global $user;	$size_types_text = array($user->lang['BYTES'], $user->lang['KIB'], $user->lang['MIB']);	$size_types = array('b', 'kb', 'mb');	$s_size_options = '';	for ($i = 0, $size = sizeof($size_types_text); $i < $size; $i++)	{		$selected = ($size_compare == $size_types[$i]) ? ' selected="selected"' : '';		$s_size_options .= '<option value="' . $size_types[$i] . '"' . $selected . '>' . $size_types_text[$i] . '</option>';	}	return $s_size_options;}/*** Generate list of groups (option fields without select)** @param int $group_id The default group id to mark as selected* @param array $exclude_ids The group ids to exclude from the list, false (default) if you whish to exclude no id* @param int $manage_founder If set to false (default) all groups are returned, if 0 only those groups returned not being managed by founders only, if 1 only those groups returned managed by founders only.** @return string The list of options.*/function group_select_options($group_id, $exclude_ids = false, $manage_founder = false){	global $db, $user, $config;	$exclude_sql = ($exclude_ids !== false && sizeof($exclude_ids)) ? 'WHERE ' . $db->sql_in_set('group_id', array_map('intval', $exclude_ids), true) : '';	$sql_and = (!$config['coppa_enable']) ? (($exclude_sql) ? ' AND ' : ' WHERE ') . "group_name <> 'REGISTERED_COPPA'" : '';	$sql_founder = ($manage_founder !== false) ? (($exclude_sql || $sql_and) ? ' AND ' : ' WHERE ') . 'group_founder_manage = ' . (int) $manage_founder : '';	$sql = 'SELECT group_id, group_name, group_type		FROM ' . GROUPS_TABLE . "		$exclude_sql		$sql_and		$sql_founder		ORDER BY group_type DESC, group_name ASC";	$result = $db->sql_query($sql);	$s_group_options = '';	while ($row = $db->sql_fetchrow($result))	{		$selected = ($row['group_id'] == $group_id) ? ' selected="selected"' : '';		$s_group_options .= '<option' . (($row['group_type'] == GROUP_SPECIAL) ? ' class="sep"' : '') . ' value="' . $row['group_id'] . '"' . $selected . '>' . (($row['group_type'] == GROUP_SPECIAL) ? $user->lang['G_' . $row['group_name']] : $row['group_name']) . '</option>';	}	$db->sql_freeresult($result);	return $s_group_options;}/*** Obtain authed forums list*/function get_forum_list($acl_list = 'f_list', $id_only = true, $postable_only = false, $no_cache = false){	global $db, $auth;	static $forum_rows;	if (!isset($forum_rows))	{		// This query is identical to the jumpbox one		$expire_time = ($no_cache) ? 0 : 600;		$sql = 'SELECT forum_id, forum_name, parent_id, forum_type, left_id, right_id			FROM ' . FORUMS_TABLE . '			ORDER BY left_id ASC';		$result = $db->sql_query($sql, $expire_time);		$forum_rows = array();		$right = $padding = 0;		$padding_store = array('0' => 0);		while ($row = $db->sql_fetchrow($result))		{			if ($row['left_id'] < $right)			{				$padding++;				$padding_store[$row['parent_id']] = $padding;			}			else if ($row['left_id'] > $right + 1)			{				// Ok, if the $padding_store for this parent is empty there is something wrong. For now we will skip over it.				// @todo digging deep to find out "how" this can happen.				$padding = (isset($padding_store[$row['parent_id']])) ? $padding_store[$row['parent_id']] : $padding;			}			$right = $row['right_id'];			$row['padding'] = $padding;			$forum_rows[] = $row;		}		$db->sql_freeresult($result);		unset($padding_store);	}	$rowset = array();	foreach ($forum_rows as $row)	{		if ($postable_only && $row['forum_type'] != FORUM_POST)		{			continue;		}		if ($acl_list == '' || ($acl_list != '' && $auth->acl_gets($acl_list, $row['forum_id'])))		{			$rowset[] = ($id_only) ? (int) $row['forum_id'] : $row;		}	}	return $rowset;}/*** Get forum branch*/function get_forum_branch($forum_id, $type = 'all', $order = 'descending', $include_forum = true){	global $db;	switch ($type)	{		case 'parents':			$condition = 'f1.left_id BETWEEN f2.left_id AND f2.right_id';		break;		case 'children':			$condition = 'f2.left_id BETWEEN f1.left_id AND f1.right_id';		break;		default:			$condition = 'f2.left_id BETWEEN f1.left_id AND f1.right_id OR f1.left_id BETWEEN f2.left_id AND f2.right_id';		break;	}	$rows = array();	$sql = 'SELECT f2.*		FROM ' . FORUMS_TABLE . ' f1		LEFT JOIN ' . FORUMS_TABLE . " f2 ON ($condition)		WHERE f1.forum_id = $forum_id		ORDER BY f2.left_id " . (($order == 'descending') ? 'ASC' : 'DESC');	$result = $db->sql_query($sql);	while ($row = $db->sql_fetchrow($result))	{		if (!$include_forum && $row['forum_id'] == $forum_id)		{			continue;		}		$rows[] = $row;	}	$db->sql_freeresult($result);	return $rows;}/*** Copies permissions from one forum to others** @param int	$src_forum_id		The source forum we want to copy permissions from* @param array	$dest_forum_ids		The destination forum(s) we want to copy to* @param bool	$clear_dest_perms	True if destination permissions should be deleted* @param bool	$add_log			True if log entry should be added** @return bool						False on error** @author bantu*/function copy_forum_permissions($src_forum_id, $dest_forum_ids, $clear_dest_perms = true, $add_log = true){	global $db;	// Only one forum id specified	if (!is_array($dest_forum_ids))	{		$dest_forum_ids = array($dest_forum_ids);	}	// Make sure forum ids are integers	$src_forum_id = (int) $src_forum_id;	$dest_forum_ids = array_map('intval', $dest_forum_ids);	// No source forum or no destination forums specified	if (empty($src_forum_id) || empty($dest_forum_ids))	{		return false;	}	// Check if source forum exists	$sql = 'SELECT forum_name		FROM ' . FORUMS_TABLE . '		WHERE forum_id = ' . $src_forum_id;	$result = $db->sql_query($sql);	$src_forum_name = $db->sql_fetchfield('forum_name');	$db->sql_freeresult($result);	// Source forum doesn't exist	if (empty($src_forum_name))	{		return false;	}	// Check if destination forums exists	$sql = 'SELECT forum_id, forum_name		FROM ' . FORUMS_TABLE . '		WHERE ' . $db->sql_in_set('forum_id', $dest_forum_ids);	$result = $db->sql_query($sql);	$dest_forum_ids = $dest_forum_names = array();	while ($row = $db->sql_fetchrow($result))	{		$dest_forum_ids[]	= (int) $row['forum_id'];		$dest_forum_names[]	= $row['forum_name'];	}	$db->sql_freeresult($result);	// No destination forum exists	if (empty($dest_forum_ids))	{		return false;	}	// From the mysql documentation:	// Prior to MySQL 4.0.14, the target table of the INSERT statement cannot appear	// in the FROM clause of the SELECT part of the query. This limitation is lifted in 4.0.14.	// Due to this we stay on the safe side if we do the insertion "the manual way"	// Rowsets we're going to insert	$users_sql_ary = $groups_sql_ary = array();	// Query acl users table for source forum data	$sql = 'SELECT user_id, auth_option_id, auth_role_id, auth_setting		FROM ' . ACL_USERS_TABLE . '		WHERE forum_id = ' . $src_forum_id;	$result = $db->sql_query($sql);	while ($row = $db->sql_fetchrow($result))	{		$row = array(			'user_id'			=> (int) $row['user_id'],			'auth_option_id'	=> (int) $row['auth_option_id'],			'auth_role_id'		=> (int) $row['auth_role_id'],			'auth_setting'		=> (int) $row['auth_setting'],		);		foreach ($dest_forum_ids as $dest_forum_id)		{			$users_sql_ary[] = $row + array('forum_id' => $dest_forum_id);		}	}	$db->sql_freeresult($result);	// Query acl groups table for source forum data	$sql = 'SELECT group_id, auth_option_id, auth_role_id, auth_setting		FROM ' . ACL_GROUPS_TABLE . '		WHERE forum_id = ' . $src_forum_id;	$result = $db->sql_query($sql);	while ($row = $db->sql_fetchrow($result))	{		$row = array(			'group_id'			=> (int) $row['group_id'],			'auth_option_id'	=> (int) $row['auth_option_id'],			'auth_role_id'		=> (int) $row['auth_role_id'],			'auth_setting'		=> (int) $row['auth_setting'],		);		foreach ($dest_forum_ids as $dest_forum_id)		{			$groups_sql_ary[] = $row + array('forum_id' => $dest_forum_id);		}	}	$db->sql_freeresult($result);	$db->sql_transaction('begin');	// Clear current permissions of destination forums	if ($clear_dest_perms)	{		$sql = 'DELETE FROM ' . ACL_USERS_TABLE . '			WHERE ' . $db->sql_in_set('forum_id', $dest_forum_ids);		$db->sql_query($sql);		$sql = 'DELETE FROM ' . ACL_GROUPS_TABLE . '			WHERE ' . $db->sql_in_set('forum_id', $dest_forum_ids);		$db->sql_query($sql);	}	$db->sql_multi_insert(ACL_USERS_TABLE, $users_sql_ary);	$db->sql_multi_insert(ACL_GROUPS_TABLE, $groups_sql_ary);	if ($add_log)	{		add_log('admin', 'LOG_FORUM_COPIED_PERMISSIONS', $src_forum_name, implode(', ', $dest_forum_names));	}	$db->sql_transaction('commit');	return true;}/*** Get physical file listing*/function filelist($rootdir, $dir = '', $type = 'gif|jpg|jpeg|png'){	$matches = array($dir => array());	// Remove initial / if present	$rootdir = (substr($rootdir, 0, 1) == '/') ? substr($rootdir, 1) : $rootdir;	// Add closing / if not present	$rootdir = ($rootdir && substr($rootdir, -1) != '/') ? $rootdir . '/' : $rootdir;	// Remove initial / if present	$dir = (substr($dir, 0, 1) == '/') ? substr($dir, 1) : $dir;	// Add closing / if not present	$dir = ($dir && substr($dir, -1) != '/') ? $dir . '/' : $dir;	if (!is_dir($rootdir . $dir))	{		return $matches;	}	$dh = @opendir($rootdir . $dir);	if (!$dh)	{		return $matches;	}	while (($fname = readdir($dh)) !== false)	{		if (is_file("$rootdir$dir$fname"))		{			if (filesize("$rootdir$dir$fname") && preg_match('#\.' . $type . '$#i', $fname))			{				$matches[$dir][] = $fname;			}		}		else if ($fname[0] != '.' && is_dir("$rootdir$dir$fname"))		{			$matches += filelist($rootdir, "$dir$fname", $type);		}	}	closedir($dh);	return $matches;}/*** Move topic(s)*/function move_topics($topic_ids, $forum_id, $auto_sync = true){	global $db;	if (empty($topic_ids))	{		return;	}	$forum_ids = array($forum_id);	if (!is_array($topic_ids))	{		$topic_ids = array($topic_ids);	}	$sql = 'DELETE FROM ' . TOPICS_TABLE . '		WHERE ' . $db->sql_in_set('topic_moved_id', $topic_ids) . '			AND forum_id = ' . $forum_id;	$db->sql_query($sql);	if ($auto_sync)	{		$sql = 'SELECT DISTINCT forum_id			FROM ' . TOPICS_TABLE . '			WHERE ' . $db->sql_in_set('topic_id', $topic_ids);		$result = $db->sql_query($sql);		while ($row = $db->sql_fetchrow($result))		{			$forum_ids[] = $row['forum_id'];		}		$db->sql_freeresult($result);	}	$table_ary = array(TOPICS_TABLE, POSTS_TABLE, LOG_TABLE, DRAFTS_TABLE, TOPICS_TRACK_TABLE);	foreach ($table_ary as $table)	{		$sql = "UPDATE $table			SET forum_id = $forum_id			WHERE " . $db->sql_in_set('topic_id', $topic_ids);		$db->sql_query($sql);	}	unset($table_ary);	if ($auto_sync)	{		sync('forum', 'forum_id', $forum_ids, true, true);		unset($forum_ids);	}}/*** Move post(s)*/function move_posts($post_ids, $topic_id, $auto_sync = true){	global $db;	if (!is_array($post_ids))	{		$post_ids = array($post_ids);	}	$forum_ids = array();	$topic_ids = array($topic_id);	$sql = 'SELECT DISTINCT topic_id, forum_id		FROM ' . POSTS_TABLE . '		WHERE ' . $db->sql_in_set('post_id', $post_ids);	$result = $db->sql_query($sql);	while ($row = $db->sql_fetchrow($result))	{		$forum_ids[] = (int) $row['forum_id'];		$topic_ids[] = (int) $row['topic_id'];	}	$db->sql_freeresult($result);	$sql = 'SELECT forum_id		FROM ' . TOPICS_TABLE . '		WHERE topic_id = ' . $topic_id;	$result = $db->sql_query($sql);	$forum_row = $db->sql_fetchrow($result);	$db->sql_freeresult($result);	if (!$forum_row)	{		trigger_error('NO_TOPIC');	}	$sql = 'UPDATE ' . POSTS_TABLE . '		SET forum_id = ' . (int) $forum_row['forum_id'] . ", topic_id = $topic_id		WHERE " . $db->sql_in_set('post_id', $post_ids);	$db->sql_query($sql);	$sql = 'UPDATE ' . ATTACHMENTS_TABLE . "		SET topic_id = $topic_id, in_message = 0		WHERE " . $db->sql_in_set('post_msg_id', $post_ids);	$db->sql_query($sql);	if ($auto_sync)	{		$forum_ids[] = (int) $forum_row['forum_id'];		sync('topic_reported', 'topic_id', $topic_ids);		sync('topic_attachment', 'topic_id', $topic_ids);		sync('topic', 'topic_id', $topic_ids, true);		sync('forum', 'forum_id', $forum_ids, true, true);	}	// Update posted information	update_posted_info($topic_ids);}/*** Remove topic(s)*/function delete_topics($where_type, $where_ids, $auto_sync = true, $post_count_sync = true, $call_delete_posts = true){	global $db, $config;	$approved_topics = 0;	$forum_ids = $topic_ids = array();	if ($where_type === 'range')	{		$where_clause = $where_ids;	}	else	{		$where_ids = (is_array($where_ids)) ? array_unique($where_ids) : array($where_ids);		if (!sizeof($where_ids))		{			return array('topics' => 0, 'posts' => 0);		}		$where_clause = $db->sql_in_set($where_type, $where_ids);	}	// Making sure that delete_posts does not call delete_topics again...	$return = array(		'posts' => ($call_delete_posts) ? delete_posts($where_type, $where_ids, false, true, $post_count_sync, false) : 0,	);	$sql = 'SELECT topic_id, forum_id, topic_approved, topic_moved_id		FROM ' . TOPICS_TABLE . '		WHERE ' . $where_clause;	$result = $db->sql_query($sql);	while ($row = $db->sql_fetchrow($result))	{		$forum_ids[] = $row['forum_id'];		$topic_ids[] = $row['topic_id'];		if ($row['topic_approved'] && !$row['topic_moved_id'])		{			$approved_topics++;		}	}	$db->sql_freeresult($result);	$return['topics'] = sizeof($topic_ids);	if (!sizeof($topic_ids))	{		return $return;	}	$db->sql_transaction('begin');	$table_ary = array(BOOKMARKS_TABLE, TOPICS_TRACK_TABLE, TOPICS_POSTED_TABLE, POLL_VOTES_TABLE, POLL_OPTIONS_TABLE, TOPICS_WATCH_TABLE, TOPICS_TABLE);	foreach ($table_ary as $table)	{		$sql = "DELETE FROM $table			WHERE " . $db->sql_in_set('topic_id', $topic_ids);		$db->sql_query($sql);	}	unset($table_ary);	$moved_topic_ids = array();	// update the other forums	$sql = 'SELECT topic_id, forum_id		FROM ' . TOPICS_TABLE . '		WHERE ' . $db->sql_in_set('topic_moved_id', $topic_ids);	$result = $db->sql_query($sql);	while ($row = $db->sql_fetchrow($result))	{		$forum_ids[] = $row['forum_id'];		$moved_topic_ids[] = $row['topic_id'];	}	$db->sql_freeresult($result);	if (sizeof($moved_topic_ids))	{		$sql = 'DELETE FROM ' . TOPICS_TABLE . '			WHERE ' . $db->sql_in_set('topic_id', $moved_topic_ids);		$db->sql_query($sql);	}	$db->sql_transaction('commit');	if ($auto_sync)	{		sync('forum', 'forum_id', array_unique($forum_ids), true, true);		sync('topic_reported', $where_type, $where_ids);	}	if ($approved_topics)	{		set_config_count('num_topics', $approved_topics * (-1), true);	}	return $return;}/*** Remove post(s)*/function delete_posts($where_type, $where_ids, $auto_sync = true, $posted_sync = true, $post_count_sync = true, $call_delete_topics = true){	global $db, $config, $phpbb_root_path, $phpEx;	if ($where_type === 'range')	{		$where_clause = $where_ids;	}	else	{		if (is_array($where_ids))		{			$where_ids = array_unique($where_ids);		}		else		{			$where_ids = array($where_ids);		}		if (!sizeof($where_ids))		{			return false;		}		$where_ids = array_map('intval', $where_ids);/*		Possible code for splitting post deletion		if (sizeof($where_ids) >= 1001)		{			// Split into chunks of 1000			$chunks = array_chunk($where_ids, 1000);			foreach ($chunks as $_where_ids)			{				delete_posts($where_type, $_where_ids, $auto_sync, $posted_sync, $post_count_sync, $call_delete_topics);			}			return;		}*/		$where_clause = $db->sql_in_set($where_type, $where_ids);	}	$approved_posts = 0;	$post_ids = $topic_ids = $forum_ids = $post_counts = $remove_topics = array();	$sql = 'SELECT post_id, poster_id, post_approved, post_postcount, topic_id, forum_id		FROM ' . POSTS_TABLE . '		WHERE ' . $where_clause;	$result = $db->sql_query($sql);	while ($row = $db->sql_fetchrow($result))	{		$post_ids[] = (int) $row['post_id'];		$poster_ids[] = (int) $row['poster_id'];		$topic_ids[] = (int) $row['topic_id'];		$forum_ids[] = (int) $row['forum_id'];		if ($row['post_postcount'] && $post_count_sync && $row['post_approved'])		{			$post_counts[$row['poster_id']] = (!empty($post_counts[$row['poster_id']])) ? $post_counts[$row['poster_id']] + 1 : 1;		}		if ($row['post_approved'])		{			$approved_posts++;		}	}	$db->sql_freeresult($result);	if (!sizeof($post_ids))	{		return false;	}	$db->sql_transaction('begin');	$table_ary = array(POSTS_TABLE, REPORTS_TABLE);	foreach ($table_ary as $table)	{		$sql = "DELETE FROM $table			WHERE " . $db->sql_in_set('post_id', $post_ids);		$db->sql_query($sql);	}	unset($table_ary);	// Adjust users post counts	if (sizeof($post_counts) && $post_count_sync)	{		foreach ($post_counts as $poster_id => $substract)		{			$sql = 'UPDATE ' . USERS_TABLE . '				SET user_posts = 0				WHERE user_id = ' . $poster_id . '				AND user_posts < ' . $substract;			$db->sql_query($sql);			$sql = 'UPDATE ' . USERS_TABLE . '				SET user_posts = user_posts - ' . $substract . '				WHERE user_id = ' . $poster_id . '				AND user_posts >= ' . $substract;			$db->sql_query($sql);		}	}	// Remove topics now having no posts?	if (sizeof($topic_ids))	{		$sql = 'SELECT topic_id			FROM ' . POSTS_TABLE . '			WHERE ' . $db->sql_in_set('topic_id', $topic_ids) . '			GROUP BY topic_id';		$result = $db->sql_query($sql);		while ($row = $db->sql_fetchrow($result))		{			$remove_topics[] = $row['topic_id'];		}		$db->sql_freeresult($result);		// Actually, those not within remove_topics should be removed. ;)		$remove_topics = array_diff($topic_ids, $remove_topics);	}	// Remove the message from the search index	$search_type = basename($config['search_type']);	if (!file_exists($phpbb_root_path . 'includes/search/' . $search_type . '.' . $phpEx))	{		trigger_error('NO_SUCH_SEARCH_MODULE');	}	include_once("{$phpbb_root_path}includes/search/$search_type.$phpEx");	$error = false;	$search = new $search_type($error);	if ($error)	{		trigger_error($error);	}	$search->index_remove($post_ids, $poster_ids, $forum_ids);	delete_attachments('post', $post_ids, false);	$db->sql_transaction('commit');	// Resync topics_posted table	if ($posted_sync)	{		update_posted_info($topic_ids);	}	if ($auto_sync)	{		sync('topic_reported', 'topic_id', $topic_ids);		sync('topic', 'topic_id', $topic_ids, true);		sync('forum', 'forum_id', $forum_ids, true, true);	}	if ($approved_posts)	{		set_config_count('num_posts', $approved_posts * (-1), true);	}	// We actually remove topics now to not be inconsistent (the delete_topics function calls this function too)	if (sizeof($remove_topics) && $call_delete_topics)	{		delete_topics('topic_id', $remove_topics, $auto_sync, $post_count_sync, false);	}	return sizeof($post_ids);}/*** Delete Attachments** @param string $mode can be: post|message|topic|attach|user* @param mixed $ids can be: post_ids, message_ids, topic_ids, attach_ids, user_ids* @param bool $resync set this to false if you are deleting posts or topics*/function delete_attachments($mode, $ids, $resync = true){	global $db, $config;	// 0 is as bad as an empty array	if (empty($ids))	{		return false;	}	if (is_array($ids))	{		$ids = array_unique($ids);		$ids = array_map('intval', $ids);	}	else	{		$ids = array((int) $ids);	}	$sql_where = '';	switch ($mode)	{		case 'post':		case 'message':			$sql_id = 'post_msg_id';			$sql_where = ' AND in_message = ' . ($mode == 'message' ? 1 : 0);		break;		case 'topic':			$sql_id = 'topic_id';		break;		case 'user':			$sql_id = 'poster_id';		break;		case 'attach':		default:			$sql_id = 'attach_id';			$mode = 'attach';		break;	}	$post_ids = $message_ids = $topic_ids = $physical = array();	// Collect post and topic ids for later use if we need to touch remaining entries (if resync is enabled)	$sql = 'SELECT post_msg_id, topic_id, in_message, physical_filename, thumbnail, filesize, is_orphan			FROM ' . ATTACHMENTS_TABLE . '			WHERE ' . $db->sql_in_set($sql_id, $ids);	$sql .= $sql_where;	$result = $db->sql_query($sql);	while ($row = $db->sql_fetchrow($result))	{		// We only need to store post/message/topic ids if resync is enabled and the file is not orphaned		if ($resync && !$row['is_orphan'])		{			if (!$row['in_message'])			{				$post_ids[] = $row['post_msg_id'];				$topic_ids[] = $row['topic_id'];			}			else			{				$message_ids[] = $row['post_msg_id'];			}		}		$physical[] = array('filename' => $row['physical_filename'], 'thumbnail' => $row['thumbnail'], 'filesize' => $row['filesize'], 'is_orphan' => $row['is_orphan']);	}	$db->sql_freeresult($result);	// Delete attachments	$sql = 'DELETE FROM ' . ATTACHMENTS_TABLE . '		WHERE ' . $db->sql_in_set($sql_id, $ids);	$sql .= $sql_where;	$db->sql_query($sql);	$num_deleted = $db->sql_affectedrows();	if (!$num_deleted)	{		return 0;	}	// Delete attachments from filesystem	$space_removed = $files_removed = 0;	foreach ($physical as $file_ary)	{		if (phpbb_unlink($file_ary['filename'], 'file', true) && !$file_ary['is_orphan'])		{			// Only non-orphaned files count to the file size			$space_removed += $file_ary['filesize'];			$files_removed++;		}		if ($file_ary['thumbnail'])		{			phpbb_unlink($file_ary['filename'], 'thumbnail', true);		}	}	if ($space_removed || $files_removed)	{		set_config_count('upload_dir_size', $space_removed * (-1), true);		set_config_count('num_files', $files_removed * (-1), true);	}	// If we do not resync, we do not need to adjust any message, post, topic or user entries	if (!$resync)	{		return $num_deleted;	}	// No more use for the original ids	unset($ids);	// Now, we need to resync posts, messages, topics. We go through every one of them	$post_ids = array_unique($post_ids);	$message_ids = array_unique($message_ids);	$topic_ids = array_unique($topic_ids);	// Update post indicators for posts now no longer having attachments	if (sizeof($post_ids))	{		// Just check which posts are still having an assigned attachment not orphaned by querying the attachments table		$sql = 'SELECT post_msg_id			FROM ' . ATTACHMENTS_TABLE . '			WHERE ' . $db->sql_in_set('post_msg_id', $post_ids) . '				AND in_message = 0				AND is_orphan = 0';		$result = $db->sql_query($sql);		$remaining_ids = array();		while ($row = $db->sql_fetchrow($result))		{			$remaining_ids[] = $row['post_msg_id'];		}		$db->sql_freeresult($result);		// Now only unset those ids remaining		$post_ids = array_diff($post_ids, $remaining_ids);		if (sizeof($post_ids))		{			$sql = 'UPDATE ' . POSTS_TABLE . '				SET post_attachment = 0				WHERE ' . $db->sql_in_set('post_id', $post_ids);			$db->sql_query($sql);		}	}	// Update message table if messages are affected	if (sizeof($message_ids))	{		// Just check which messages are still having an assigned attachment not orphaned by querying the attachments table		$sql = 'SELECT post_msg_id			FROM ' . ATTACHMENTS_TABLE . '			WHERE ' . $db->sql_in_set('post_msg_id', $message_ids) . '				AND in_message = 1				AND is_orphan = 0';		$result = $db->sql_query($sql);		$remaining_ids = array();		while ($row = $db->sql_fetchrow($result))		{			$remaining_ids[] = $row['post_msg_id'];		}		$db->sql_freeresult($result);		// Now only unset those ids remaining		$message_ids = array_diff($message_ids, $remaining_ids);		if (sizeof($message_ids))		{			$sql = 'UPDATE ' . PRIVMSGS_TABLE . '				SET message_attachment = 0				WHERE ' . $db->sql_in_set('msg_id', $message_ids);			$db->sql_query($sql);		}	}	// Now update the topics. This is a bit trickier, because there could be posts still having attachments within the topic	if (sizeof($topic_ids))	{		// Just check which topics are still having an assigned attachment not orphaned by querying the attachments table (much less entries expected)		$sql = 'SELECT topic_id			FROM ' . ATTACHMENTS_TABLE . '			WHERE ' . $db->sql_in_set('topic_id', $topic_ids) . '				AND is_orphan = 0';		$result = $db->sql_query($sql);		$remaining_ids = array();		while ($row = $db->sql_fetchrow($result))		{			$remaining_ids[] = $row['topic_id'];		}		$db->sql_freeresult($result);		// Now only unset those ids remaining		$topic_ids = array_diff($topic_ids, $remaining_ids);		if (sizeof($topic_ids))		{			$sql = 'UPDATE ' . TOPICS_TABLE . '				SET topic_attachment = 0				WHERE ' . $db->sql_in_set('topic_id', $topic_ids);			$db->sql_query($sql);		}	}	return $num_deleted;}/*** Deletes shadow topics pointing to a specified forum.** @param int		$forum_id		The forum id* @param string		$sql_more		Additional WHERE statement, e.g. t.topic_time < (time() - 1234)* @param bool		$auto_sync		Will call sync() if this is true** @return array		Array with affected forums** @author bantu*/function delete_topic_shadows($forum_id, $sql_more = '', $auto_sync = true){	global $db;	if (!$forum_id)	{		// Nothing to do.		return;	}	// Set of affected forums we have to resync	$sync_forum_ids = array();	// Amount of topics we select and delete at once.	$batch_size = 500;	do	{		$sql = 'SELECT t2.forum_id, t2.topic_id			FROM ' . TOPICS_TABLE . ' t2, ' . TOPICS_TABLE . ' t			WHERE t2.topic_moved_id = t.topic_id				AND t.forum_id = ' . (int) $forum_id . '				' . (($sql_more) ? 'AND ' . $sql_more : '');		$result = $db->sql_query_limit($sql, $batch_size);		$topic_ids = array();		while ($row = $db->sql_fetchrow($result))		{			$topic_ids[] = (int) $row['topic_id'];			$sync_forum_ids[(int) $row['forum_id']] = (int) $row['forum_id'];		}		$db->sql_freeresult($result);		if (!empty($topic_ids))		{			$sql = 'DELETE FROM ' . TOPICS_TABLE . '				WHERE ' . $db->sql_in_set('topic_id', $topic_ids);			$db->sql_query($sql);		}	}	while (sizeof($topic_ids) == $batch_size);	if ($auto_sync)	{		sync('forum', 'forum_id', $sync_forum_ids, true, true);	}	return $sync_forum_ids;}/*** Update/Sync posted information for topics*/function update_posted_info(&$topic_ids){	global $db, $config;	if (empty($topic_ids) || !$config['load_db_track'])	{		return;	}	// First of all, let us remove any posted information for these topics	$sql = 'DELETE FROM ' . TOPICS_POSTED_TABLE . '		WHERE ' . $db->sql_in_set('topic_id', $topic_ids);	$db->sql_query($sql);	// Now, let us collect the user/topic combos for rebuilding the information	$sql = 'SELECT poster_id, topic_id		FROM ' . POSTS_TABLE . '		WHERE ' . $db->sql_in_set('topic_id', $topic_ids) . '			AND poster_id <> ' . ANONYMOUS . '		GROUP BY poster_id, topic_id';	$result = $db->sql_query($sql);	$posted = array();	while ($row = $db->sql_fetchrow($result))	{		// Add as key to make them unique (grouping by) and circumvent empty keys on array_unique		$posted[$row['poster_id']][] = $row['topic_id'];	}	$db->sql_freeresult($result);	// Now add the information...	$sql_ary = array();	foreach ($posted as $user_id => $topic_row)	{		foreach ($topic_row as $topic_id)		{			$sql_ary[] = array(				'user_id'		=> (int) $user_id,				'topic_id'		=> (int) $topic_id,				'topic_posted'	=> 1,			);		}	}	unset($posted);	$db->sql_multi_insert(TOPICS_POSTED_TABLE, $sql_ary);}/*** Delete attached file*/function phpbb_unlink($filename, $mode = 'file', $entry_removed = false){	global $db, $phpbb_root_path, $config;	// Because of copying topics or modifications a physical filename could be assigned more than once. If so, do not remove the file itself.	$sql = 'SELECT COUNT(attach_id) AS num_entries		FROM ' . ATTACHMENTS_TABLE . "		WHERE physical_filename = '" . $db->sql_escape(utf8_basename($filename)) . "'";	$result = $db->sql_query($sql);	$num_entries = (int) $db->sql_fetchfield('num_entries');	$db->sql_freeresult($result);	// Do not remove file if at least one additional entry with the same name exist.	if (($entry_removed && $num_entries > 0) || (!$entry_removed && $num_entries > 1))	{		return false;	}	$filename = ($mode == 'thumbnail') ? 'thumb_' . utf8_basename($filename) : utf8_basename($filename);	return @unlink($phpbb_root_path . $config['upload_path'] . '/' . $filename);}/*** All-encompasing sync function** Exaples:* <code>* sync('topic', 'topic_id', 123);			// resync topic #123* sync('topic', 'forum_id', array(2, 3));	// resync topics from forum #2 and #3* sync('topic');							// resync all topics* sync('topic', 'range', 'topic_id BETWEEN 1 AND 60');	// resync a range of topics/forums (only available for 'topic' and 'forum' modes)* </code>** Modes:* - forum				Resync complete forum* - topic				Resync topics* - topic_moved			Removes topic shadows that would be in the same forum as the topic they link to* - topic_approved		Resyncs the topic_approved flag according to the status of the first post* - post_reported		Resyncs the post_reported flag, relying on actual reports* - topic_reported		Resyncs the topic_reported flag, relying on post_reported flags* - post_attachement	Same as post_reported, but with attachment flags* - topic_attachement	Same as topic_reported, but with attachment flags*/function sync($mode, $where_type = '', $where_ids = '', $resync_parents = false, $sync_extra = false){	global $db;	if (is_array($where_ids))	{		$where_ids = array_unique($where_ids);		$where_ids = array_map('intval', $where_ids);	}	else if ($where_type != 'range')	{		$where_ids = ($where_ids) ? array((int) $where_ids) : array();	}	if ($mode == 'forum' || $mode == 'topic' || $mode == 'topic_approved' || $mode == 'topic_reported' || $mode == 'post_reported')	{		if (!$where_type)		{			$where_sql = '';			$where_sql_and = 'WHERE';		}		else if ($where_type == 'range')		{			// Only check a range of topics/forums. For instance: 'topic_id BETWEEN 1 AND 60'			$where_sql = 'WHERE (' . $mode[0] . ".$where_ids)";			$where_sql_and = $where_sql . "\n\tAND";		}		else		{			// Do not sync the "global forum"			$where_ids = array_diff($where_ids, array(0));			if (!sizeof($where_ids))			{				// Empty array with IDs. This means that we don't have any work to do. Just return.				return;			}			// Limit the topics/forums we are syncing, use specific topic/forum IDs.			// $where_type contains the field for the where clause (forum_id, topic_id)			$where_sql = 'WHERE ' . $db->sql_in_set($mode[0] . '.' . $where_type, $where_ids);			$where_sql_and = $where_sql . "\n\tAND";		}	}	else	{		if (!sizeof($where_ids))		{			return;		}		// $where_type contains the field for the where clause (forum_id, topic_id)		$where_sql = 'WHERE ' . $db->sql_in_set($mode[0] . '.' . $where_type, $where_ids);		$where_sql_and = $where_sql . "\n\tAND";	}	switch ($mode)	{		case 'topic_moved':			$db->sql_transaction('begin');			switch ($db->sql_layer)			{				case 'mysql4':				case 'mysqli':					$sql = 'DELETE FROM ' . TOPICS_TABLE . '						USING ' . TOPICS_TABLE . ' t1, ' . TOPICS_TABLE . " t2						WHERE t1.topic_moved_id = t2.topic_id							AND t1.forum_id = t2.forum_id";					$db->sql_query($sql);				break;				default:					$sql = 'SELECT t1.topic_id						FROM ' .TOPICS_TABLE . ' t1, ' . TOPICS_TABLE . " t2						WHERE t1.topic_moved_id = t2.topic_id							AND t1.forum_id = t2.forum_id";					$result = $db->sql_query($sql);					$topic_id_ary = array();					while ($row = $db->sql_fetchrow($result))					{						$topic_id_ary[] = $row['topic_id'];					}					$db->sql_freeresult($result);					if (!sizeof($topic_id_ary))					{						return;					}					$sql = 'DELETE FROM ' . TOPICS_TABLE . '						WHERE ' . $db->sql_in_set('topic_id', $topic_id_ary);					$db->sql_query($sql);				break;			}			$db->sql_transaction('commit');			break;		case 'topic_approved':			$db->sql_transaction('begin');			switch ($db->sql_layer)			{				case 'mysql4':				case 'mysqli':					$sql = 'UPDATE ' . TOPICS_TABLE . ' t, ' . POSTS_TABLE . " p						SET t.topic_approved = p.post_approved						$where_sql_and t.topic_first_post_id = p.post_id";					$db->sql_query($sql);				break;				default:					$sql = 'SELECT t.topic_id, p.post_approved						FROM ' . TOPICS_TABLE . ' t, ' . POSTS_TABLE . " p						$where_sql_and p.post_id = t.topic_first_post_id							AND p.post_approved <> t.topic_approved";					$result = $db->sql_query($sql);					$topic_ids = array();					while ($row = $db->sql_fetchrow($result))					{						$topic_ids[] = $row['topic_id'];					}					$db->sql_freeresult($result);					if (!sizeof($topic_ids))					{						return;					}					$sql = 'UPDATE ' . TOPICS_TABLE . '						SET topic_approved = 1 - topic_approved						WHERE ' . $db->sql_in_set('topic_id', $topic_ids);					$db->sql_query($sql);				break;			}			$db->sql_transaction('commit');			break;		case 'post_reported':			$post_ids = $post_reported = array();			$db->sql_transaction('begin');			$sql = 'SELECT p.post_id, p.post_reported				FROM ' . POSTS_TABLE . " p				$where_sql				GROUP BY p.post_id, p.post_reported";			$result = $db->sql_query($sql);			while ($row = $db->sql_fetchrow($result))			{				$post_ids[$row['post_id']] = $row['post_id'];				if ($row['post_reported'])				{					$post_reported[$row['post_id']] = 1;				}			}			$db->sql_freeresult($result);			$sql = 'SELECT DISTINCT(post_id)				FROM ' . REPORTS_TABLE . '				WHERE ' . $db->sql_in_set('post_id', $post_ids) . '					AND report_closed = 0';			$result = $db->sql_query($sql);			$post_ids = array();			while ($row = $db->sql_fetchrow($result))			{				if (!isset($post_reported[$row['post_id']]))				{					$post_ids[] = $row['post_id'];				}				else				{					unset($post_reported[$row['post_id']]);				}			}			$db->sql_freeresult($result);			// $post_reported should be empty by now, if it's not it contains			// posts that are falsely flagged as reported			foreach ($post_reported as $post_id => $void)			{				$post_ids[] = $post_id;			}			if (sizeof($post_ids))			{				$sql = 'UPDATE ' . POSTS_TABLE . '					SET post_reported = 1 - post_reported					WHERE ' . $db->sql_in_set('post_id', $post_ids);				$db->sql_query($sql);			}			$db->sql_transaction('commit');			break;		case 'topic_reported':			if ($sync_extra)			{				sync('post_reported', $where_type, $where_ids);			}			$topic_ids = $topic_reported = array();			$db->sql_transaction('begin');			$sql = 'SELECT DISTINCT(t.topic_id)				FROM ' . POSTS_TABLE . " t				$where_sql_and t.post_reported = 1";			$result = $db->sql_query($sql);			while ($row = $db->sql_fetchrow($result))			{				$topic_reported[$row['topic_id']] = 1;			}			$db->sql_freeresult($result);			$sql = 'SELECT t.topic_id, t.topic_reported				FROM ' . TOPICS_TABLE . " t				$where_sql";			$result = $db->sql_query($sql);			while ($row = $db->sql_fetchrow($result))			{				if ($row['topic_reported'] ^ isset($topic_reported[$row['topic_id']]))				{					$topic_ids[] = $row['topic_id'];				}			}			$db->sql_freeresult($result);			if (sizeof($topic_ids))			{				$sql = 'UPDATE ' . TOPICS_TABLE . '					SET topic_reported = 1 - topic_reported					WHERE ' . $db->sql_in_set('topic_id', $topic_ids);				$db->sql_query($sql);			}			$db->sql_transaction('commit');			break;		case 'post_attachment':			$post_ids = $post_attachment = array();			$db->sql_transaction('begin');			$sql = 'SELECT p.post_id, p.post_attachment				FROM ' . POSTS_TABLE . " p				$where_sql				GROUP BY p.post_id, p.post_attachment";			$result = $db->sql_query($sql);			while ($row = $db->sql_fetchrow($result))			{				$post_ids[$row['post_id']] = $row['post_id'];				if ($row['post_attachment'])				{					$post_attachment[$row['post_id']] = 1;				}			}			$db->sql_freeresult($result);			$sql = 'SELECT DISTINCT(post_msg_id)				FROM ' . ATTACHMENTS_TABLE . '				WHERE ' . $db->sql_in_set('post_msg_id', $post_ids) . '					AND in_message = 0';			$result = $db->sql_query($sql);			$post_ids = array();			while ($row = $db->sql_fetchrow($result))			{				if (!isset($post_attachment[$row['post_msg_id']]))				{					$post_ids[] = $row['post_msg_id'];				}				else				{					unset($post_attachment[$row['post_msg_id']]);				}			}			$db->sql_freeresult($result);			// $post_attachment should be empty by now, if it's not it contains			// posts that are falsely flagged as having attachments			foreach ($post_attachment as $post_id => $void)			{				$post_ids[] = $post_id;			}			if (sizeof($post_ids))			{				$sql = 'UPDATE ' . POSTS_TABLE . '					SET post_attachment = 1 - post_attachment					WHERE ' . $db->sql_in_set('post_id', $post_ids);				$db->sql_query($sql);			}			$db->sql_transaction('commit');			break;		case 'topic_attachment':			if ($sync_extra)			{				sync('post_attachment', $where_type, $where_ids);			}			$topic_ids = $topic_attachment = array();			$db->sql_transaction('begin');			$sql = 'SELECT DISTINCT(t.topic_id)				FROM ' . POSTS_TABLE . " t				$where_sql_and t.post_attachment = 1";			$result = $db->sql_query($sql);			while ($row = $db->sql_fetchrow($result))			{				$topic_attachment[$row['topic_id']] = 1;			}			$db->sql_freeresult($result);			$sql = 'SELECT t.topic_id, t.topic_attachment				FROM ' . TOPICS_TABLE . " t				$where_sql";			$result = $db->sql_query($sql);			while ($row = $db->sql_fetchrow($result))			{				if ($row['topic_attachment'] ^ isset($topic_attachment[$row['topic_id']]))				{					$topic_ids[] = $row['topic_id'];				}			}			$db->sql_freeresult($result);			if (sizeof($topic_ids))			{				$sql = 'UPDATE ' . TOPICS_TABLE . '					SET topic_attachment = 1 - topic_attachment					WHERE ' . $db->sql_in_set('topic_id', $topic_ids);				$db->sql_query($sql);			}			$db->sql_transaction('commit');			break;		case 'forum':			$db->sql_transaction('begin');			// 1: Get the list of all forums			$sql = 'SELECT f.*				FROM ' . FORUMS_TABLE . " f				$where_sql";			$result = $db->sql_query($sql);			$forum_data = $forum_ids = $post_ids = $last_post_id = $post_info = array();			while ($row = $db->sql_fetchrow($result))			{				if ($row['forum_type'] == FORUM_LINK)				{					continue;				}				$forum_id = (int) $row['forum_id'];				$forum_ids[$forum_id] = $forum_id;				$forum_data[$forum_id] = $row;				if ($sync_extra)				{					$forum_data[$forum_id]['posts'] = 0;					$forum_data[$forum_id]['topics'] = 0;					$forum_data[$forum_id]['topics_real'] = 0;				}				$forum_data[$forum_id]['last_post_id'] = 0;				$forum_data[$forum_id]['last_post_subject'] = '';				$forum_data[$forum_id]['last_post_time'] = 0;				$forum_data[$forum_id]['last_poster_id'] = 0;				$forum_data[$forum_id]['last_poster_name'] = '';				$forum_data[$forum_id]['last_poster_colour'] = '';			}			$db->sql_freeresult($result);			if (!sizeof($forum_ids))			{				break;			}			$forum_ids = array_values($forum_ids);			// 2: Get topic counts for each forum (optional)			if ($sync_extra)			{				$sql = 'SELECT forum_id, topic_approved, COUNT(topic_id) AS forum_topics					FROM ' . TOPICS_TABLE . '					WHERE ' . $db->sql_in_set('forum_id', $forum_ids) . '					GROUP BY forum_id, topic_approved';				$result = $db->sql_query($sql);				while ($row = $db->sql_fetchrow($result))				{					$forum_id = (int) $row['forum_id'];					$forum_data[$forum_id]['topics_real'] += $row['forum_topics'];					if ($row['topic_approved'])					{						$forum_data[$forum_id]['topics'] = $row['forum_topics'];					}				}				$db->sql_freeresult($result);			}			// 3: Get post count for each forum (optional)			if ($sync_extra)			{				if (sizeof($forum_ids) == 1)				{					$sql = 'SELECT SUM(t.topic_replies + 1) AS forum_posts						FROM ' . TOPICS_TABLE . ' t						WHERE ' . $db->sql_in_set('t.forum_id', $forum_ids) . '							AND t.topic_approved = 1							AND t.topic_status <> ' . ITEM_MOVED;				}				else				{					$sql = 'SELECT t.forum_id, SUM(t.topic_replies + 1) AS forum_posts						FROM ' . TOPICS_TABLE . ' t						WHERE ' . $db->sql_in_set('t.forum_id', $forum_ids) . '							AND t.topic_approved = 1							AND t.topic_status <> ' . ITEM_MOVED . '						GROUP BY t.forum_id';				}				$result = $db->sql_query($sql);				while ($row = $db->sql_fetchrow($result))				{					$forum_id = (sizeof($forum_ids) == 1) ? (int) $forum_ids[0] : (int) $row['forum_id'];					$forum_data[$forum_id]['posts'] = (int) $row['forum_posts'];				}				$db->sql_freeresult($result);			}			// 4: Get last_post_id for each forum			if (sizeof($forum_ids) == 1)			{				$sql = 'SELECT MAX(t.topic_last_post_id) as last_post_id					FROM ' . TOPICS_TABLE . ' t					WHERE ' . $db->sql_in_set('t.forum_id', $forum_ids) . '						AND t.topic_approved = 1';			}			else			{				$sql = 'SELECT t.forum_id, MAX(t.topic_last_post_id) as last_post_id					FROM ' . TOPICS_TABLE . ' t					WHERE ' . $db->sql_in_set('t.forum_id', $forum_ids) . '						AND t.topic_approved = 1					GROUP BY t.forum_id';			}			$result = $db->sql_query($sql);			while ($row = $db->sql_fetchrow($result))			{				$forum_id = (sizeof($forum_ids) == 1) ? (int) $forum_ids[0] : (int) $row['forum_id'];				$forum_data[$forum_id]['last_post_id'] = (int) $row['last_post_id'];				$post_ids[] = $row['last_post_id'];			}			$db->sql_freeresult($result);			// 5: Retrieve last_post infos			if (sizeof($post_ids))			{				$sql = 'SELECT p.post_id, p.poster_id, p.post_subject, p.post_time, p.post_username, u.username, u.user_colour					FROM ' . POSTS_TABLE . ' p, ' . USERS_TABLE . ' u					WHERE ' . $db->sql_in_set('p.post_id', $post_ids) . '						AND p.poster_id = u.user_id';				$result = $db->sql_query($sql);				while ($row = $db->sql_fetchrow($result))				{					$post_info[$row['post_id']] = $row;				}				$db->sql_freeresult($result);				foreach ($forum_data as $forum_id => $data)				{					if ($data['last_post_id'])					{						if (isset($post_info[$data['last_post_id']]))						{							$forum_data[$forum_id]['last_post_subject'] = $post_info[$data['last_post_id']]['post_subject'];							$forum_data[$forum_id]['last_post_time'] = $post_info[$data['last_post_id']]['post_time'];							$forum_data[$forum_id]['last_poster_id'] = $post_info[$data['last_post_id']]['poster_id'];							$forum_data[$forum_id]['last_poster_name'] = ($post_info[$data['last_post_id']]['poster_id'] != ANONYMOUS) ? $post_info[$data['last_post_id']]['username'] : $post_info[$data['last_post_id']]['post_username'];							$forum_data[$forum_id]['last_poster_colour'] = $post_info[$data['last_post_id']]['user_colour'];						}						else						{							// For some reason we did not find the post in the db							$forum_data[$forum_id]['last_post_id'] = 0;							$forum_data[$forum_id]['last_post_subject'] = '';							$forum_data[$forum_id]['last_post_time'] = 0;							$forum_data[$forum_id]['last_poster_id'] = 0;							$forum_data[$forum_id]['last_poster_name'] = '';							$forum_data[$forum_id]['last_poster_colour'] = '';						}					}				}				unset($post_info);			}			// 6: Now do that thing			$fieldnames = array('last_post_id', 'last_post_subject', 'last_post_time', 'last_poster_id', 'last_poster_name', 'last_poster_colour');			if ($sync_extra)			{				array_push($fieldnames, 'posts', 'topics', 'topics_real');			}			foreach ($forum_data as $forum_id => $row)			{				$sql_ary = array();				foreach ($fieldnames as $fieldname)				{					if ($row['forum_' . $fieldname] != $row[$fieldname])					{						if (preg_match('#(name|colour|subject)$#', $fieldname))						{							$sql_ary['forum_' . $fieldname] = (string) $row[$fieldname];						}						else						{							$sql_ary['forum_' . $fieldname] = (int) $row[$fieldname];						}					}				}				if (sizeof($sql_ary))				{					$sql = 'UPDATE ' . FORUMS_TABLE . '						SET ' . $db->sql_build_array('UPDATE', $sql_ary) . '						WHERE forum_id = ' . $forum_id;					$db->sql_query($sql);				}			}			$db->sql_transaction('commit');			break;		case 'topic':			$topic_data = $post_ids = $approved_unapproved_ids = $resync_forums = $delete_topics = $delete_posts = $moved_topics = array();			$db->sql_transaction('begin');			$sql = 'SELECT t.topic_id, t.forum_id, t.topic_moved_id, t.topic_approved, ' . (($sync_extra) ? 't.topic_attachment, t.topic_reported, ' : '') . 't.topic_poster, t.topic_time, t.topic_replies, t.topic_replies_real, t.topic_first_post_id, t.topic_first_poster_name, t.topic_first_poster_colour, t.topic_last_post_id, t.topic_last_post_subject, t.topic_last_poster_id, t.topic_last_poster_name, t.topic_last_poster_colour, t.topic_last_post_time				FROM ' . TOPICS_TABLE . " t				$where_sql";			$result = $db->sql_query($sql);			while ($row = $db->sql_fetchrow($result))			{				if ($row['topic_moved_id'])				{					$moved_topics[] = $row['topic_id'];					continue;				}				$topic_id = (int) $row['topic_id'];				$topic_data[$topic_id] = $row;				$topic_data[$topic_id]['replies_real'] = -1;				$topic_data[$topic_id]['replies'] = 0;				$topic_data[$topic_id]['first_post_id'] = 0;				$topic_data[$topic_id]['last_post_id'] = 0;				unset($topic_data[$topic_id]['topic_id']);				// This array holds all topic_ids				$delete_topics[$topic_id] = '';				if ($sync_extra)				{					$topic_data[$topic_id]['reported'] = 0;					$topic_data[$topic_id]['attachment'] = 0;				}			}			$db->sql_freeresult($result);			// Use "t" as table alias because of the $where_sql clause			// NOTE: 't.post_approved' in the GROUP BY is causing a major slowdown.			$sql = 'SELECT t.topic_id, t.post_approved, COUNT(t.post_id) AS total_posts, MIN(t.post_id) AS first_post_id, MAX(t.post_id) AS last_post_id				FROM ' . POSTS_TABLE . " t				$where_sql				GROUP BY t.topic_id, t.post_approved";			$result = $db->sql_query($sql);			while ($row = $db->sql_fetchrow($result))			{				$topic_id = (int) $row['topic_id'];				$row['first_post_id'] = (int) $row['first_post_id'];				$row['last_post_id'] = (int) $row['last_post_id'];				if (!isset($topic_data[$topic_id]))				{					// Hey, these posts come from a topic that does not exist					$delete_posts[$topic_id] = '';				}				else				{					// Unset the corresponding entry in $delete_topics					// When we'll be done, only topics with no posts will remain					unset($delete_topics[$topic_id]);					$topic_data[$topic_id]['replies_real'] += $row['total_posts'];					$topic_data[$topic_id]['first_post_id'] = (!$topic_data[$topic_id]['first_post_id']) ? $row['first_post_id'] : min($topic_data[$topic_id]['first_post_id'], $row['first_post_id']);					if ($row['post_approved'] || !$topic_data[$topic_id]['last_post_id'])					{						$topic_data[$topic_id]['replies'] = $row['total_posts'] - 1;						$topic_data[$topic_id]['last_post_id'] = $row['last_post_id'];					}				}			}			$db->sql_freeresult($result);			foreach ($topic_data as $topic_id => $row)			{				$post_ids[] = $row['first_post_id'];				if ($row['first_post_id'] != $row['last_post_id'])				{					$post_ids[] = $row['last_post_id'];				}			}			// Now we delete empty topics and orphan posts			if (sizeof($delete_posts))			{				delete_posts('topic_id', array_keys($delete_posts), false);				unset($delete_posts);			}			if (!sizeof($topic_data))			{				// If we get there, topic ids were invalid or topics did not contain any posts				delete_topics($where_type, $where_ids, true);				return;			}			if (sizeof($delete_topics))			{				$delete_topic_ids = array();				foreach ($delete_topics as $topic_id => $void)				{					unset($topic_data[$topic_id]);					$delete_topic_ids[] = $topic_id;				}				delete_topics('topic_id', $delete_topic_ids, false);				unset($delete_topics, $delete_topic_ids);			}			$sql = 'SELECT p.post_id, p.topic_id, p.post_approved, p.poster_id, p.post_subject, p.post_username, p.post_time, u.username, u.user_colour				FROM ' . POSTS_TABLE . ' p, ' . USERS_TABLE . ' u				WHERE ' . $db->sql_in_set('p.post_id', $post_ids) . '					AND u.user_id = p.poster_id';			$result = $db->sql_query($sql);			$post_ids = array();			while ($row = $db->sql_fetchrow($result))			{				$topic_id = intval($row['topic_id']);				if ($row['post_id'] == $topic_data[$topic_id]['first_post_id'])				{					if ($topic_data[$topic_id]['topic_approved'] != $row['post_approved'])					{						$approved_unapproved_ids[] = $topic_id;					}					$topic_data[$topic_id]['time'] = $row['post_time'];					$topic_data[$topic_id]['poster'] = $row['poster_id'];					$topic_data[$topic_id]['first_poster_name'] = ($row['poster_id'] == ANONYMOUS) ? $row['post_username'] : $row['username'];					$topic_data[$topic_id]['first_poster_colour'] = $row['user_colour'];				}				if ($row['post_id'] == $topic_data[$topic_id]['last_post_id'])				{					$topic_data[$topic_id]['last_poster_id'] = $row['poster_id'];					$topic_data[$topic_id]['last_post_subject'] = $row['post_subject'];					$topic_data[$topic_id]['last_post_time'] = $row['post_time'];					$topic_data[$topic_id]['last_poster_name'] = ($row['poster_id'] == ANONYMOUS) ? $row['post_username'] : $row['username'];					$topic_data[$topic_id]['last_poster_colour'] = $row['user_colour'];				}			}			$db->sql_freeresult($result);			// Make sure shadow topics do link to existing topics			if (sizeof($moved_topics))			{				$delete_topics = array();				$sql = 'SELECT t1.topic_id, t1.topic_moved_id					FROM ' . TOPICS_TABLE . ' t1					LEFT JOIN ' . TOPICS_TABLE . ' t2 ON (t2.topic_id = t1.topic_moved_id)					WHERE ' . $db->sql_in_set('t1.topic_id', $moved_topics) . '						AND t2.topic_id IS NULL';				$result = $db->sql_query($sql);				while ($row = $db->sql_fetchrow($result))				{					$delete_topics[] = $row['topic_id'];				}				$db->sql_freeresult($result);				if (sizeof($delete_topics))				{					delete_topics('topic_id', $delete_topics, false);				}				unset($delete_topics);				// Make sure shadow topics having no last post data being updated (this only rarely happens...)				$sql = 'SELECT topic_id, topic_moved_id, topic_last_post_id, topic_first_post_id					FROM ' . TOPICS_TABLE . '					WHERE ' . $db->sql_in_set('topic_id', $moved_topics) . '						AND topic_last_post_time = 0';				$result = $db->sql_query($sql);				$shadow_topic_data = $post_ids = array();				while ($row = $db->sql_fetchrow($result))				{					$shadow_topic_data[$row['topic_moved_id']] = $row;					$post_ids[] = $row['topic_last_post_id'];					$post_ids[] = $row['topic_first_post_id'];				}				$db->sql_freeresult($result);				$sync_shadow_topics = array();				if (sizeof($post_ids))				{					$sql = 'SELECT p.post_id, p.topic_id, p.post_approved, p.poster_id, p.post_subject, p.post_username, p.post_time, u.username, u.user_colour						FROM ' . POSTS_TABLE . ' p, ' . USERS_TABLE . ' u						WHERE ' . $db->sql_in_set('p.post_id', $post_ids) . '							AND u.user_id = p.poster_id';					$result = $db->sql_query($sql);					$post_ids = array();					while ($row = $db->sql_fetchrow($result))					{						$topic_id = (int) $row['topic_id'];						// Ok, there should be a shadow topic. If there isn't, then there's something wrong with the db.						// However, there's not much we can do about it.						if (!empty($shadow_topic_data[$topic_id]))						{							if ($row['post_id'] == $shadow_topic_data[$topic_id]['topic_first_post_id'])							{								$orig_topic_id = $shadow_topic_data[$topic_id]['topic_id'];								if (!isset($sync_shadow_topics[$orig_topic_id]))								{									$sync_shadow_topics[$orig_topic_id] = array();								}								$sync_shadow_topics[$orig_topic_id]['topic_time'] = $row['post_time'];								$sync_shadow_topics[$orig_topic_id]['topic_poster'] = $row['poster_id'];								$sync_shadow_topics[$orig_topic_id]['topic_first_poster_name'] = ($row['poster_id'] == ANONYMOUS) ? $row['post_username'] : $row['username'];								$sync_shadow_topics[$orig_topic_id]['topic_first_poster_colour'] = $row['user_colour'];							}							if ($row['post_id'] == $shadow_topic_data[$topic_id]['topic_last_post_id'])							{								$orig_topic_id = $shadow_topic_data[$topic_id]['topic_id'];								if (!isset($sync_shadow_topics[$orig_topic_id]))								{									$sync_shadow_topics[$orig_topic_id] = array();								}								$sync_shadow_topics[$orig_topic_id]['topic_last_poster_id'] = $row['poster_id'];								$sync_shadow_topics[$orig_topic_id]['topic_last_post_subject'] = $row['post_subject'];								$sync_shadow_topics[$orig_topic_id]['topic_last_post_time'] = $row['post_time'];								$sync_shadow_topics[$orig_topic_id]['topic_last_poster_name'] = ($row['poster_id'] == ANONYMOUS) ? $row['post_username'] : $row['username'];								$sync_shadow_topics[$orig_topic_id]['topic_last_poster_colour'] = $row['user_colour'];							}						}					}					$db->sql_freeresult($result);					$shadow_topic_data = array();					// Update the information we collected					if (sizeof($sync_shadow_topics))					{						foreach ($sync_shadow_topics as $sync_topic_id => $sql_ary)						{							$sql = 'UPDATE ' . TOPICS_TABLE . '								SET ' . $db->sql_build_array('UPDATE', $sql_ary) . '								WHERE topic_id = ' . $sync_topic_id;							$db->sql_query($sql);						}					}				}				unset($sync_shadow_topics, $shadow_topic_data);			}			// approved becomes unapproved, and vice-versa			if (sizeof($approved_unapproved_ids))			{				$sql = 'UPDATE ' . TOPICS_TABLE . '					SET topic_approved = 1 - topic_approved					WHERE ' . $db->sql_in_set('topic_id', $approved_unapproved_ids);				$db->sql_query($sql);			}			unset($approved_unapproved_ids);			// These are fields that will be synchronised			$fieldnames = array('time', 'replies', 'replies_real', 'poster', 'first_post_id', 'first_poster_name', 'first_poster_colour', 'last_post_id', 'last_post_subject', 'last_post_time', 'last_poster_id', 'last_poster_name', 'last_poster_colour');			if ($sync_extra)			{				// This routine assumes that post_reported values are correct				// if they are not, use sync('post_reported') first				$sql = 'SELECT t.topic_id, p.post_id					FROM ' . TOPICS_TABLE . ' t, ' . POSTS_TABLE . " p					$where_sql_and p.topic_id = t.topic_id						AND p.post_reported = 1					GROUP BY t.topic_id, p.post_id";				$result = $db->sql_query($sql);				$fieldnames[] = 'reported';				while ($row = $db->sql_fetchrow($result))				{					$topic_data[intval($row['topic_id'])]['reported'] = 1;				}				$db->sql_freeresult($result);				// This routine assumes that post_attachment values are correct				// if they are not, use sync('post_attachment') first				$sql = 'SELECT t.topic_id, p.post_id					FROM ' . TOPICS_TABLE . ' t, ' . POSTS_TABLE . " p					$where_sql_and p.topic_id = t.topic_id						AND p.post_attachment = 1					GROUP BY t.topic_id, p.post_id";				$result = $db->sql_query($sql);				$fieldnames[] = 'attachment';				while ($row = $db->sql_fetchrow($result))				{					$topic_data[intval($row['topic_id'])]['attachment'] = 1;				}				$db->sql_freeresult($result);			}			foreach ($topic_data as $topic_id => $row)			{				$sql_ary = array();				foreach ($fieldnames as $fieldname)				{					if (isset($row[$fieldname]) && isset($row['topic_' . $fieldname]) && $row['topic_' . $fieldname] != $row[$fieldname])					{						$sql_ary['topic_' . $fieldname] = $row[$fieldname];					}				}				if (sizeof($sql_ary))				{					$sql = 'UPDATE ' . TOPICS_TABLE . '						SET ' . $db->sql_build_array('UPDATE', $sql_ary) . '						WHERE topic_id = ' . $topic_id;					$db->sql_query($sql);					$resync_forums[$row['forum_id']] = $row['forum_id'];				}			}			unset($topic_data);			$db->sql_transaction('commit');			// if some topics have been resync'ed then resync parent forums			// except when we're only syncing a range, we don't want to sync forums during			// batch processing.			if ($resync_parents && sizeof($resync_forums) && $where_type != 'range')			{				sync('forum', 'forum_id', array_values($resync_forums), true, true);			}			break;	}	return;}/*** Prune function*/function prune($forum_id, $prune_mode, $prune_date, $prune_flags = 0, $auto_sync = true){	global $db;	if (!is_array($forum_id))	{		$forum_id = array($forum_id);	}	if (!sizeof($forum_id))	{		return;	}	$sql_and = '';	if (!($prune_flags & FORUM_FLAG_PRUNE_ANNOUNCE))	{		$sql_and .= ' AND topic_type <> ' . POST_ANNOUNCE;	}	if (!($prune_flags & FORUM_FLAG_PRUNE_STICKY))	{		$sql_and .= ' AND topic_type <> ' . POST_STICKY;	}	if ($prune_mode == 'posted')	{		$sql_and .= " AND topic_last_post_time < $prune_date";	}	if ($prune_mode == 'viewed')	{		$sql_and .= " AND topic_last_view_time < $prune_date";	}	$sql = 'SELECT topic_id		FROM ' . TOPICS_TABLE . '		WHERE ' . $db->sql_in_set('forum_id', $forum_id) . "			AND poll_start = 0			$sql_and";	$result = $db->sql_query($sql);	$topic_list = array();	while ($row = $db->sql_fetchrow($result))	{		$topic_list[] = $row['topic_id'];	}	$db->sql_freeresult($result);	if ($prune_flags & FORUM_FLAG_PRUNE_POLL)	{		$sql = 'SELECT topic_id			FROM ' . TOPICS_TABLE . '			WHERE ' . $db->sql_in_set('forum_id', $forum_id) . "				AND poll_start > 0				AND poll_last_vote < $prune_date				$sql_and";		$result = $db->sql_query($sql);		while ($row = $db->sql_fetchrow($result))		{			$topic_list[] = $row['topic_id'];		}		$db->sql_freeresult($result);		$topic_list = array_unique($topic_list);	}	return delete_topics('topic_id', $topic_list, $auto_sync, false);}/*** Function auto_prune(), this function now relies on passed vars*/function auto_prune($forum_id, $prune_mode, $prune_flags, $prune_days, $prune_freq){	global $db;	$sql = 'SELECT forum_name		FROM ' . FORUMS_TABLE . "		WHERE forum_id = $forum_id";	$result = $db->sql_query($sql, 3600);	$row = $db->sql_fetchrow($result);	$db->sql_freeresult($result);	if ($row)	{		$prune_date = time() - ($prune_days * 86400);		$next_prune = time() + ($prune_freq * 86400);		prune($forum_id, $prune_mode, $prune_date, $prune_flags, true);		$sql = 'UPDATE ' . FORUMS_TABLE . "			SET prune_next = $next_prune			WHERE forum_id = $forum_id";		$db->sql_query($sql);		add_log('admin', 'LOG_AUTO_PRUNE', $row['forum_name']);	}	return;}/*** remove_comments will strip the sql comment lines out of an uploaded sql file* specifically for mssql and postgres type files in the install....*/function remove_comments(&$output){	$lines = explode("\n", $output);	$output = '';	// try to keep mem. use down	$linecount = sizeof($lines);	$in_comment = false;	for ($i = 0; $i < $linecount; $i++)	{		if (trim($lines[$i]) == '/*')		{			$in_comment = true;		}		if (!$in_comment)		{			$output .= $lines[$i] . "\n";		}		if (trim($lines[$i]) == '*/')		{			$in_comment = false;		}	}	unset($lines);	return $output;}/*** Cache moderators, called whenever permissions are changed via admin_permissions. Changes of username* and group names must be carried through for the moderators table*/function cache_moderators(){	global $db, $cache, $auth, $phpbb_root_path, $phpEx;	// Remove cached sql results	$cache->destroy('sql', MODERATOR_CACHE_TABLE);	// Clear table	switch ($db->sql_layer)	{		case 'sqlite':		case 'firebird':			$db->sql_query('DELETE FROM ' . MODERATOR_CACHE_TABLE);		break;		default:			$db->sql_query('TRUNCATE TABLE ' . MODERATOR_CACHE_TABLE);		break;	}	// We add moderators who have forum moderator permissions without an explicit ACL_NEVER setting	$hold_ary = $ug_id_ary = $sql_ary = array();	// Grab all users having moderative options...	$hold_ary = $auth->acl_user_raw_data(false, 'm_%', false);	// Add users?	if (sizeof($hold_ary))	{		// At least one moderative option warrants a display		$ug_id_ary = array_keys($hold_ary);		// Remove users who have group memberships with DENY moderator permissions		$sql = $db->sql_build_query('SELECT', array(			'SELECT'	=> 'a.forum_id, ug.user_id, g.group_id',			'FROM'		=> array(				ACL_OPTIONS_TABLE	=> 'o',				USER_GROUP_TABLE	=> 'ug',				GROUPS_TABLE		=> 'g',				ACL_GROUPS_TABLE	=> 'a',			),			'LEFT_JOIN'	=> array(				array(					'FROM'	=> array(ACL_ROLES_DATA_TABLE => 'r'),					'ON'	=> 'a.auth_role_id = r.role_id'				)			),			'WHERE'		=> '(o.auth_option_id = a.auth_option_id OR o.auth_option_id = r.auth_option_id)				AND ((a.auth_setting = ' . ACL_NEVER . ' AND r.auth_setting IS NULL)					OR r.auth_setting = ' . ACL_NEVER . ')				AND a.group_id = ug.group_id				AND g.group_id = ug.group_id				AND NOT (ug.group_leader = 1 AND g.group_skip_auth = 1)				AND ' . $db->sql_in_set('ug.user_id', $ug_id_ary) . "				AND ug.user_pending = 0				AND o.auth_option " . $db->sql_like_expression('m_' . $db->any_char),		));		$result = $db->sql_query($sql);		while ($row = $db->sql_fetchrow($result))		{			if (isset($hold_ary[$row['user_id']][$row['forum_id']]))			{				unset($hold_ary[$row['user_id']][$row['forum_id']]);			}		}		$db->sql_freeresult($result);		if (sizeof($hold_ary))		{			// Get usernames...			$sql = 'SELECT user_id, username				FROM ' . USERS_TABLE . '				WHERE ' . $db->sql_in_set('user_id', array_keys($hold_ary));			$result = $db->sql_query($sql);			$usernames_ary = array();			while ($row = $db->sql_fetchrow($result))			{				$usernames_ary[$row['user_id']] = $row['username'];			}			foreach ($hold_ary as $user_id => $forum_id_ary)			{				// Do not continue if user does not exist				if (!isset($usernames_ary[$user_id]))				{					continue;				}				foreach ($forum_id_ary as $forum_id => $auth_ary)				{					$sql_ary[] = array(						'forum_id'		=> (int) $forum_id,						'user_id'		=> (int) $user_id,						'username'		=> (string) $usernames_ary[$user_id],						'group_id'		=> 0,						'group_name'	=> ''					);				}			}		}	}	// Now to the groups...	$hold_ary = $auth->acl_group_raw_data(false, 'm_%', false);	if (sizeof($hold_ary))	{		$ug_id_ary = array_keys($hold_ary);		// Make sure not hidden or special groups are involved...		$sql = 'SELECT group_name, group_id, group_type			FROM ' . GROUPS_TABLE . '			WHERE ' . $db->sql_in_set('group_id', $ug_id_ary);		$result = $db->sql_query($sql);		$groupnames_ary = array();		while ($row = $db->sql_fetchrow($result))		{			if ($row['group_type'] == GROUP_HIDDEN || $row['group_type'] == GROUP_SPECIAL)			{				unset($hold_ary[$row['group_id']]);			}			$groupnames_ary[$row['group_id']] = $row['group_name'];		}		$db->sql_freeresult($result);		foreach ($hold_ary as $group_id => $forum_id_ary)		{			// If there is no group, we do not assign it...			if (!isset($groupnames_ary[$group_id]))			{				continue;			}			foreach ($forum_id_ary as $forum_id => $auth_ary)			{				$flag = false;				foreach ($auth_ary as $auth_option => $setting)				{					// Make sure at least one ACL_YES option is set...					if ($setting == ACL_YES)					{						$flag = true;						break;					}				}				if (!$flag)				{					continue;				}				$sql_ary[] = array(					'forum_id'		=> (int) $forum_id,					'user_id'		=> 0,					'username'		=> '',					'group_id'		=> (int) $group_id,					'group_name'	=> (string) $groupnames_ary[$group_id]				);			}		}	}	$db->sql_multi_insert(MODERATOR_CACHE_TABLE, $sql_ary);}/*** View log* If $log_count is set to false, we will skip counting all entries in the database.*/function view_log($mode, &$log, &$log_count, $limit = 0, $offset = 0, $forum_id = 0, $topic_id = 0, $user_id = 0, $limit_days = 0, $sort_by = 'l.log_time DESC', $keywords = ''){	global $db, $user, $auth, $phpEx, $phpbb_root_path, $phpbb_admin_path;	$topic_id_list = $reportee_id_list = $is_auth = $is_mod = array();	$profile_url = (defined('IN_ADMIN')) ? append_sid("{$phpbb_admin_path}index.$phpEx", 'i=users&amp;mode=overview') : append_sid("{$phpbb_root_path}memberlist.$phpEx", 'mode=viewprofile');	switch ($mode)	{		case 'admin':			$log_type = LOG_ADMIN;			$sql_forum = '';		break;		case 'mod':			$log_type = LOG_MOD;			$sql_forum = '';			if ($topic_id)			{				$sql_forum = 'AND l.topic_id = ' . (int) $topic_id;			}			else if (is_array($forum_id))			{				$sql_forum = 'AND ' . $db->sql_in_set('l.forum_id', array_map('intval', $forum_id));			}			else if ($forum_id)			{				$sql_forum = 'AND l.forum_id = ' . (int) $forum_id;			}		break;		case 'user':			$log_type = LOG_USERS;			$sql_forum = 'AND l.reportee_id = ' . (int) $user_id;		break;		case 'users':			$log_type = LOG_USERS;			$sql_forum = '';		break;		case 'critical':			$log_type = LOG_CRITICAL;			$sql_forum = '';		break;		default:			return;	}	// Use no preg_quote for $keywords because this would lead to sole backslashes being added	// We also use an OR connection here for spaces and the | string. Currently, regex is not supported for searching (but may come later).	$keywords = preg_split('#[\s|]+#u', utf8_strtolower($keywords), 0, PREG_SPLIT_NO_EMPTY);	$sql_keywords = '';	if (!empty($keywords))	{		$keywords_pattern = array();		// Build pattern and keywords...		for ($i = 0, $num_keywords = sizeof($keywords); $i < $num_keywords; $i++)		{			$keywords_pattern[] = preg_quote($keywords[$i], '#');			$keywords[$i] = $db->sql_like_expression($db->any_char . $keywords[$i] . $db->any_char);		}		$keywords_pattern = '#' . implode('|', $keywords_pattern) . '#ui';		$operations = array();		foreach ($user->lang as $key => $value)		{			if (substr($key, 0, 4) == 'LOG_' && preg_match($keywords_pattern, $value))			{				$operations[] = $key;			}		}		$sql_keywords = 'AND (';		if (!empty($operations))		{			$sql_keywords .= $db->sql_in_set('l.log_operation', $operations) . ' OR ';		}		$sql_keywords .= 'LOWER(l.log_data) ' . implode(' OR LOWER(l.log_data) ', $keywords) . ')';	}	if ($log_count !== false)	{		$sql = 'SELECT COUNT(l.log_id) AS total_entries			FROM ' . LOG_TABLE . ' l, ' . USERS_TABLE . " u			WHERE l.log_type = $log_type				AND l.user_id = u.user_id				AND l.log_time >= $limit_days				$sql_keywords				$sql_forum";		$result = $db->sql_query($sql);		$log_count = (int) $db->sql_fetchfield('total_entries');		$db->sql_freeresult($result);	}	// $log_count may be false here if false was passed in for it,	// because in this case we did not run the COUNT() query above.	// If we ran the COUNT() query and it returned zero rows, return;	// otherwise query for logs below.	if ($log_count === 0)	{		// Save the queries, because there are no logs to display		return 0;	}	if ($offset >= $log_count)	{		$offset = ($offset - $limit < 0) ? 0 : $offset - $limit;	}	$sql = "SELECT l.*, u.username, u.username_clean, u.user_colour		FROM " . LOG_TABLE . " l, " . USERS_TABLE . " u		WHERE l.log_type = $log_type			AND u.user_id = l.user_id			" . (($limit_days) ? "AND l.log_time >= $limit_days" : '') . "			$sql_keywords			$sql_forum		ORDER BY $sort_by";	$result = $db->sql_query_limit($sql, $limit, $offset);	$i = 0;	$log = array();	while ($row = $db->sql_fetchrow($result))	{		if ($row['topic_id'])		{			$topic_id_list[] = $row['topic_id'];		}		if ($row['reportee_id'])		{			$reportee_id_list[] = $row['reportee_id'];		}		$log[$i] = array(			'id'				=> $row['log_id'],			'reportee_id'			=> $row['reportee_id'],			'reportee_username'		=> '',			'reportee_username_full'=> '',			'user_id'			=> $row['user_id'],			'username'			=> $row['username'],			'username_full'		=> get_username_string('full', $row['user_id'], $row['username'], $row['user_colour'], false, $profile_url),			'ip'				=> $row['log_ip'],			'time'				=> $row['log_time'],			'forum_id'			=> $row['forum_id'],			'topic_id'			=> $row['topic_id'],			'viewforum'			=> ($row['forum_id'] && $auth->acl_get('f_read', $row['forum_id'])) ? append_sid("{$phpbb_root_path}viewforum.$phpEx", 'f=' . $row['forum_id']) : false,			'action'			=> (isset($user->lang[$row['log_operation']])) ? $user->lang[$row['log_operation']] : '{' . ucfirst(str_replace('_', ' ', $row['log_operation'])) . '}',		);		if (!empty($row['log_data']))		{			$log_data_ary = @unserialize($row['log_data']);			$log_data_ary = ($log_data_ary === false) ? array() : $log_data_ary;			if (isset($user->lang[$row['log_operation']]))			{				// Check if there are more occurrences of % than arguments, if there are we fill out the arguments array				// It doesn't matter if we add more arguments than placeholders				if ((substr_count($log[$i]['action'], '%') - sizeof($log_data_ary)) > 0)				{					$log_data_ary = array_merge($log_data_ary, array_fill(0, substr_count($log[$i]['action'], '%') - sizeof($log_data_ary), ''));				}				$log[$i]['action'] = vsprintf($log[$i]['action'], $log_data_ary);				// If within the admin panel we do not censor text out				if (defined('IN_ADMIN'))				{					$log[$i]['action'] = bbcode_nl2br($log[$i]['action']);				}				else				{					$log[$i]['action'] = bbcode_nl2br(censor_text($log[$i]['action']));				}			}			else if (!empty($log_data_ary))			{				$log[$i]['action'] .= '<br />' . implode('', $log_data_ary);			}			/* Apply make_clickable... has to be seen if it is for good. :/			// Seems to be not for the moment, reconsider later...			$log[$i]['action'] = make_clickable($log[$i]['action']);			*/		}		$i++;	}	$db->sql_freeresult($result);	if (sizeof($topic_id_list))	{		$topic_id_list = array_unique($topic_id_list);		// This query is not really needed if move_topics() updates the forum_id field,		// although it's also used to determine if the topic still exists in the database		$sql = 'SELECT topic_id, forum_id			FROM ' . TOPICS_TABLE . '			WHERE ' . $db->sql_in_set('topic_id', array_map('intval', $topic_id_list));		$result = $db->sql_query($sql);		$default_forum_id = 0;		while ($row = $db->sql_fetchrow($result))		{			if (!$row['forum_id'])			{				if ($auth->acl_getf_global('f_read'))				{					if (!$default_forum_id)					{						$sql = 'SELECT forum_id							FROM ' . FORUMS_TABLE . '							WHERE forum_type = ' . FORUM_POST;						$f_result = $db->sql_query_limit($sql, 1);						$default_forum_id = (int) $db->sql_fetchfield('forum_id', false, $f_result);						$db->sql_freeresult($f_result);					}					$is_auth[$row['topic_id']] = $default_forum_id;				}			}			else			{				if ($auth->acl_get('f_read', $row['forum_id']))				{					$is_auth[$row['topic_id']] = $row['forum_id'];				}			}			if ($auth->acl_gets('a_', 'm_', $row['forum_id']))			{				$is_mod[$row['topic_id']] = $row['forum_id'];			}		}		$db->sql_freeresult($result);		foreach ($log as $key => $row)		{			$log[$key]['viewtopic'] = (isset($is_auth[$row['topic_id']])) ? append_sid("{$phpbb_root_path}viewtopic.$phpEx", 'f=' . $is_auth[$row['topic_id']] . '&amp;t=' . $row['topic_id']) : false;			$log[$key]['viewlogs'] = (isset($is_mod[$row['topic_id']])) ? append_sid("{$phpbb_root_path}mcp.$phpEx", 'i=logs&amp;mode=topic_logs&amp;t=' . $row['topic_id'], true, $user->session_id) : false;		}	}	if (sizeof($reportee_id_list))	{		$reportee_id_list = array_unique($reportee_id_list);		$reportee_names_list = array();		$sql = 'SELECT user_id, username, user_colour			FROM ' . USERS_TABLE . '			WHERE ' . $db->sql_in_set('user_id', $reportee_id_list);		$result = $db->sql_query($sql);		while ($row = $db->sql_fetchrow($result))		{			$reportee_names_list[$row['user_id']] = $row;		}		$db->sql_freeresult($result);		foreach ($log as $key => $row)		{			if (!isset($reportee_names_list[$row['reportee_id']]))			{				continue;			}			$log[$key]['reportee_username'] = $reportee_names_list[$row['reportee_id']]['username'];			$log[$key]['reportee_username_full'] = get_username_string('full', $row['reportee_id'], $reportee_names_list[$row['reportee_id']]['username'], $reportee_names_list[$row['reportee_id']]['user_colour'], false, $profile_url);		}	}	return $offset;}/*** Update foes - remove moderators and administrators from foe lists...*/function update_foes($group_id = false, $user_id = false){	global $db, $auth;	// update foes for some user	if (is_array($user_id) && sizeof($user_id))	{		$sql = 'DELETE FROM ' . ZEBRA_TABLE . '			WHERE ' . $db->sql_in_set('zebra_id', $user_id) . '				AND foe = 1';		$db->sql_query($sql);		return;	}	// update foes for some group	if (is_array($group_id) && sizeof($group_id))	{		// Grab group settings...		$sql = $db->sql_build_query('SELECT', array(			'SELECT'	=> 'a.group_id',			'FROM'		=> array(				ACL_OPTIONS_TABLE	=> 'ao',				ACL_GROUPS_TABLE	=> 'a'			),			'LEFT_JOIN'	=> array(				array(					'FROM'	=> array(ACL_ROLES_DATA_TABLE => 'r'),					'ON'	=> 'a.auth_role_id = r.role_id'				),			),			'WHERE'		=> '(ao.auth_option_id = a.auth_option_id OR ao.auth_option_id = r.auth_option_id)				AND ' . $db->sql_in_set('a.group_id', $group_id) . "				AND ao.auth_option IN ('a_', 'm_')",			'GROUP_BY'	=> 'a.group_id'		));		$result = $db->sql_query($sql);		$groups = array();		while ($row = $db->sql_fetchrow($result))		{			$groups[] = (int) $row['group_id'];		}		$db->sql_freeresult($result);		if (!sizeof($groups))		{			return;		}		switch ($db->sql_layer)		{			case 'mysqli':			case 'mysql4':				$sql = 'DELETE ' . (($db->sql_layer === 'mysqli' || version_compare($db->sql_server_info(true), '4.1', '>=')) ? 'z.*' : ZEBRA_TABLE) . '					FROM ' . ZEBRA_TABLE . ' z, ' . USER_GROUP_TABLE . ' ug					WHERE z.zebra_id = ug.user_id						AND z.foe = 1						AND ' . $db->sql_in_set('ug.group_id', $groups);				$db->sql_query($sql);			break;			default:				$sql = 'SELECT user_id					FROM ' . USER_GROUP_TABLE . '					WHERE ' . $db->sql_in_set('group_id', $groups);				$result = $db->sql_query($sql);				$users = array();				while ($row = $db->sql_fetchrow($result))				{					$users[] = (int) $row['user_id'];				}				$db->sql_freeresult($result);				if (sizeof($users))				{					$sql = 'DELETE FROM ' . ZEBRA_TABLE . '						WHERE ' . $db->sql_in_set('zebra_id', $users) . '							AND foe = 1';					$db->sql_query($sql);				}			break;		}		return;	}	// update foes for everyone	$perms = array();	foreach ($auth->acl_get_list(false, array('a_', 'm_'), false) as $forum_id => $forum_ary)	{		foreach ($forum_ary as $auth_option => $user_ary)		{			$perms = array_merge($perms, $user_ary);		}	}	if (sizeof($perms))	{		$sql = 'DELETE FROM ' . ZEBRA_TABLE . '			WHERE ' . $db->sql_in_set('zebra_id', array_unique($perms)) . '				AND foe = 1';		$db->sql_query($sql);	}	unset($perms);}/*** Lists inactive users*/function view_inactive_users(&$users, &$user_count, $limit = 0, $offset = 0, $limit_days = 0, $sort_by = 'user_inactive_time DESC'){	global $db, $user;	$sql = 'SELECT COUNT(user_id) AS user_count		FROM ' . USERS_TABLE . '		WHERE user_type = ' . USER_INACTIVE .		(($limit_days) ? " AND user_inactive_time >= $limit_days" : '');	$result = $db->sql_query($sql);	$user_count = (int) $db->sql_fetchfield('user_count');	$db->sql_freeresult($result);	if ($user_count == 0)	{		// Save the queries, because there are no users to display		return 0;	}	if ($offset >= $user_count)	{		$offset = ($offset - $limit < 0) ? 0 : $offset - $limit;	}	$sql = 'SELECT *		FROM ' . USERS_TABLE . '		WHERE user_type = ' . USER_INACTIVE .		(($limit_days) ? " AND user_inactive_time >= $limit_days" : '') . "		ORDER BY $sort_by";	$result = $db->sql_query_limit($sql, $limit, $offset);	while ($row = $db->sql_fetchrow($result))	{		$row['inactive_reason'] = $user->lang['INACTIVE_REASON_UNKNOWN'];		switch ($row['user_inactive_reason'])		{			case INACTIVE_REGISTER:				$row['inactive_reason'] = $user->lang['INACTIVE_REASON_REGISTER'];			break;			case INACTIVE_PROFILE:				$row['inactive_reason'] = $user->lang['INACTIVE_REASON_PROFILE'];			break;			case INACTIVE_MANUAL:				$row['inactive_reason'] = $user->lang['INACTIVE_REASON_MANUAL'];			break;			case INACTIVE_REMIND:				$row['inactive_reason'] = $user->lang['INACTIVE_REASON_REMIND'];			break;		}		$users[] = $row;	}	return $offset;}/*** Lists warned users*/function view_warned_users(&$users, &$user_count, $limit = 0, $offset = 0, $limit_days = 0, $sort_by = 'user_warnings DESC'){	global $db;	$sql = 'SELECT user_id, username, user_colour, user_warnings, user_last_warning		FROM ' . USERS_TABLE . '		WHERE user_warnings > 0		' . (($limit_days) ? "AND user_last_warning >= $limit_days" : '') . "		ORDER BY $sort_by";	$result = $db->sql_query_limit($sql, $limit, $offset);	$users = $db->sql_fetchrowset($result);	$db->sql_freeresult($result);	$sql = 'SELECT count(user_id) AS user_count		FROM ' . USERS_TABLE . '		WHERE user_warnings > 0		' . (($limit_days) ? "AND user_last_warning >= $limit_days" : '');	$result = $db->sql_query($sql);	$user_count = (int) $db->sql_fetchfield('user_count');	$db->sql_freeresult($result);	return;}/*** Get database size* Currently only mysql and mssql are supported*/function get_database_size(){	global $db, $user, $table_prefix;	$database_size = false;	// This code is heavily influenced by a similar routine in phpMyAdmin 2.2.0	switch ($db->sql_layer)	{		case 'mysql':		case 'mysql4':		case 'mysqli':			$sql = 'SELECT VERSION() AS mysql_version';			$result = $db->sql_query($sql);			$row = $db->sql_fetchrow($result);			$db->sql_freeresult($result);			if ($row)			{				$version = $row['mysql_version'];				if (preg_match('#(3\.23|[45]\.)#', $version))				{					$db_name = (preg_match('#^(?:3\.23\.(?:[6-9]|[1-9]{2}))|[45]\.#', $version)) ? "`{$db->dbname}`" : $db->dbname;					$sql = 'SHOW TABLE STATUS						FROM ' . $db_name;					$result = $db->sql_query($sql, 7200);					$database_size = 0;					while ($row = $db->sql_fetchrow($result))					{						if ((isset($row['Type']) && $row['Type'] != 'MRG_MyISAM') || (isset($row['Engine']) && ($row['Engine'] == 'MyISAM' || $row['Engine'] == 'InnoDB')))						{							if ($table_prefix != '')							{								if (strpos($row['Name'], $table_prefix) !== false)								{									$database_size += $row['Data_length'] + $row['Index_length'];								}							}							else							{								$database_size += $row['Data_length'] + $row['Index_length'];							}						}					}					$db->sql_freeresult($result);				}			}		break;		case 'firebird':			global $dbname;			// if it on the local machine, we can get lucky			if (file_exists($dbname))			{				$database_size = filesize($dbname);			}		break;		case 'sqlite':			global $dbhost;			if (file_exists($dbhost))			{				$database_size = filesize($dbhost);			}		break;		case 'mssql':		case 'mssql_odbc':		case 'mssqlnative':			$sql = 'SELECT ((SUM(size) * 8.0) * 1024.0) as dbsize				FROM sysfiles';			$result = $db->sql_query($sql, 7200);			$database_size = ($row = $db->sql_fetchrow($result)) ? $row['dbsize'] : false;			$db->sql_freeresult($result);		break;		case 'postgres':			$sql = "SELECT proname				FROM pg_proc				WHERE proname = 'pg_database_size'";			$result = $db->sql_query($sql);			$row = $db->sql_fetchrow($result);			$db->sql_freeresult($result);			if ($row['proname'] == 'pg_database_size')			{				$database = $db->dbname;				if (strpos($database, '.') !== false)				{					list($database, ) = explode('.', $database);				}				$sql = "SELECT oid					FROM pg_database					WHERE datname = '$database'";				$result = $db->sql_query($sql);				$row = $db->sql_fetchrow($result);				$db->sql_freeresult($result);				$oid = $row['oid'];				$sql = 'SELECT pg_database_size(' . $oid . ') as size';				$result = $db->sql_query($sql);				$row = $db->sql_fetchrow($result);				$db->sql_freeresult($result);				$database_size = $row['size'];			}		break;		case 'oracle':			$sql = 'SELECT SUM(bytes) as dbsize				FROM user_segments';			$result = $db->sql_query($sql, 7200);			$database_size = ($row = $db->sql_fetchrow($result)) ? $row['dbsize'] : false;			$db->sql_freeresult($result);		break;	}	$database_size = ($database_size !== false) ? get_formatted_filesize($database_size) : $user->lang['NOT_AVAILABLE'];	return $database_size;}/*** Retrieve contents from remotely stored file*/function get_remote_file($host, $directory, $filename, &$errstr, &$errno, $port = 80, $timeout = 6){	global $user;	if ($fsock = @fsockopen($host, $port, $errno, $errstr, $timeout))	{		@fputs($fsock, "GET $directory/$filename HTTP/1.1\r\n");		@fputs($fsock, "HOST: $host\r\n");		@fputs($fsock, "Connection: close\r\n\r\n");		$timer_stop = time() + $timeout;		stream_set_timeout($fsock, $timeout);		$file_info = '';		$get_info = false;		while (!@feof($fsock))		{			if ($get_info)			{				$file_info .= @fread($fsock, 1024);			}			else			{				$line = @fgets($fsock, 1024);				if ($line == "\r\n")				{					$get_info = true;				}				else if (stripos($line, '404 not found') !== false)				{					$errstr = $user->lang['FILE_NOT_FOUND'] . ': ' . $filename;					return false;				}			}			$stream_meta_data = stream_get_meta_data($fsock);			if (!empty($stream_meta_data['timed_out']) || time() >= $timer_stop)			{				$errstr = $user->lang['FSOCK_TIMEOUT'];				return false;			}		}		@fclose($fsock);	}	else	{		if ($errstr)		{			$errstr = utf8_convert_message($errstr);			return false;		}		else		{			$errstr = $user->lang['FSOCK_DISABLED'];			return false;		}	}	return $file_info;}/*** Tidy Warnings* Remove all warnings which have now expired from the database* The duration of a warning can be defined by the administrator* This only removes the warning and reduces the associated count,* it does not remove the user note recording the contents of the warning*/function tidy_warnings(){	global $db, $config;	$expire_date = time() - ($config['warnings_expire_days'] * 86400);	$warning_list = $user_list = array();	$sql = 'SELECT * FROM ' . WARNINGS_TABLE . "		WHERE warning_time < $expire_date";	$result = $db->sql_query($sql);	while ($row = $db->sql_fetchrow($result))	{		$warning_list[] = $row['warning_id'];		$user_list[$row['user_id']] = isset($user_list[$row['user_id']]) ? ++$user_list[$row['user_id']] : 1;	}	$db->sql_freeresult($result);	if (sizeof($warning_list))	{		$db->sql_transaction('begin');		$sql = 'DELETE FROM ' . WARNINGS_TABLE . '			WHERE ' . $db->sql_in_set('warning_id', $warning_list);		$db->sql_query($sql);		foreach ($user_list as $user_id => $value)		{			$sql = 'UPDATE ' . USERS_TABLE . " SET user_warnings = user_warnings - $value				WHERE user_id = $user_id";			$db->sql_query($sql);		}		$db->sql_transaction('commit');	}	set_config('warnings_last_gc', time(), true);}/*** Tidy database, doing some maintanance tasks*/function tidy_database(){	global $db;	// Here we check permission consistency	// Sometimes, it can happen permission tables having forums listed which do not exist	$sql = 'SELECT forum_id		FROM ' . FORUMS_TABLE;	$result = $db->sql_query($sql);	$forum_ids = array(0);	while ($row = $db->sql_fetchrow($result))	{		$forum_ids[] = $row['forum_id'];	}	$db->sql_freeresult($result);	// Delete those rows from the acl tables not having listed the forums above	$sql = 'DELETE FROM ' . ACL_GROUPS_TABLE . '		WHERE ' . $db->sql_in_set('forum_id', $forum_ids, true);	$db->sql_query($sql);	$sql = 'DELETE FROM ' . ACL_USERS_TABLE . '		WHERE ' . $db->sql_in_set('forum_id', $forum_ids, true);	$db->sql_query($sql);	set_config('database_last_gc', time(), true);}/*** Add permission language - this will make sure custom files will be included*/function add_permission_language(){	global $user, $phpEx;	// First of all, our own file. We need to include it as the first file because it presets all relevant variables.	$user->add_lang('acp/permissions_phpbb');	$files_to_add = array();	// Now search in acp and mods folder for permissions_ files.	foreach (array('acp/', 'mods/') as $path)	{		$dh = @opendir($user->lang_path . $user->lang_name . '/' . $path);		if ($dh)		{			while (($file = readdir($dh)) !== false)			{				if ($file !== 'permissions_phpbb.' . $phpEx && strpos($file, 'permissions_') === 0 && substr($file, -(strlen($phpEx) + 1)) === '.' . $phpEx)				{					$files_to_add[] = $path . substr($file, 0, -(strlen($phpEx) + 1));				}			}			closedir($dh);		}	}	if (!sizeof($files_to_add))	{		return false;	}	$user->add_lang($files_to_add);	return true;}/** * Obtains the latest version information * * @param bool $force_update Ignores cached data. Defaults to false. * @param bool $warn_fail Trigger a warning if obtaining the latest version information fails. Defaults to false. * @param int $ttl Cache version information for $ttl seconds. Defaults to 86400 (24 hours). * * @return string | false Version info on success, false on failure. */function obtain_latest_version_info($force_update = false, $warn_fail = false, $ttl = 86400){	global $cache;	$info = $cache->get('versioncheck');	if ($info === false || $force_update)	{		$errstr = '';		$errno = 0;		$info = get_remote_file('version.phpbb.com', '/phpbb',				((defined('PHPBB_QA')) ? '30x_qa.txt' : '30x.txt'), $errstr, $errno);		if ($info === false)		{			$cache->destroy('versioncheck');			if ($warn_fail)			{				trigger_error($errstr, E_USER_WARNING);			}			return false;		}		$cache->put('versioncheck', $info, $ttl);	}	return $info;}/** * Enables a particular flag in a bitfield column of a given table. * * @param string	$table_name		The table to update * @param string	$column_name	The column containing a bitfield to update * @param int		$flag			The binary flag which is OR-ed with the current column value * @param string	$sql_more		This string is attached to the sql query generated to update the table. * * @return void */function enable_bitfield_column_flag($table_name, $column_name, $flag, $sql_more = ''){	global $db;	$sql = 'UPDATE ' . $table_name . '		SET ' . $column_name . ' = ' . $db->sql_bit_or($column_name, $flag) . '		' . $sql_more;	$db->sql_query($sql);}?>
<?php/**** @package phpBB3* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**/if (php_sapi_name() != 'cli'){	die("This program must be run from the command line.\n");}//// Security message://// This script is potentially dangerous.// Remove or comment the next line (die(".... ) to enable this script.// Do NOT FORGET to either remove this script or disable it after you have used it.//die("Please read the first lines of this script for instructions on how to enable it");set_time_limit(0);error_reporting(E_ALL);define('IN_PHPBB', true);$phpbb_root_path = '../';$phpEx = substr(strrchr(__FILE__, '.'), 1);/*** Let's download some files we need*/download('http://www.unicode.org/Public/UNIDATA/NormalizationTest.txt');download('http://www.unicode.org/Public/UNIDATA/UnicodeData.txt');/*** Those are the tests we run*/$test_suite = array(	/**	* NFC	*   c2 ==  NFC(c1) ==  NFC(c2) ==  NFC(c3)	*   c4 ==  NFC(c4) ==  NFC(c5)	*/	'NFC'	=>	array(		'c2'	=>	array('c1', 'c2', 'c3'),		'c4'	=>	array('c4', 'c5')	),	/**	* NFD	*   c3 ==  NFD(c1) ==  NFD(c2) ==  NFD(c3)	*   c5 ==  NFD(c4) ==  NFD(c5)	*/	'NFD'	=>	array(		'c3'	=>	array('c1', 'c2', 'c3'),		'c5'	=>	array('c4', 'c5')	),	/**	* NFKC	*   c4 == NFKC(c1) == NFKC(c2) == NFKC(c3) == NFKC(c4) == NFKC(c5)	*/	'NFKC'	=>	array(		'c4'	=>	array('c1', 'c2', 'c3', 'c4', 'c5')	),	/**	* NFKD	*   c5 == NFKD(c1) == NFKD(c2) == NFKD(c3) == NFKD(c4) == NFKD(c5)	*/	'NFKD'	=>	array(		'c5'	=>	array('c1', 'c2', 'c3', 'c4', 'c5')	));require_once($phpbb_root_path . 'includes/utf/utf_normalizer.' . $phpEx);$i = $n = 0;$failed = false;$tested_chars = array();$fp = fopen($phpbb_root_path . 'develop/NormalizationTest.txt', 'rb');while (!feof($fp)){	$line = fgets($fp);	++$n;	if ($line[0] == '@')	{		if ($i)		{			echo "done\n";		}		$i = 0;		echo "\n", substr($line, 1), "\n\n";		continue;	}	if (!strpos(' 0123456789ABCDEF', $line[0]))	{		continue;	}	if (++$i % 100 == 0)	{		echo $i, ' ';	}	list($c1, $c2, $c3, $c4, $c5) = explode(';', $line);	if (!strpos($c1, ' '))	{		/**		* We are currently testing a single character, we add it to the list of		* characters we have processed so that we can exclude it when testing		* for invariants		*/		$tested_chars[$c1] = 1;	}	foreach ($test_suite as $form => $serie)	{		foreach ($serie as $expected => $tests)		{			$hex_expected = ${$expected};			$utf_expected = hexseq_to_utf($hex_expected);			foreach ($tests as $test)			{				$utf_result = $utf_expected;				call_user_func(array('utf_normalizer', $form), $utf_result);				if (strcmp($utf_expected, $utf_result))				{					$failed = true;					$hex_result = utf_to_hexseq($utf_result);					echo "\nFAILED $expected == $form($test) ($hex_expected != $hex_result)";				}			}		}		if ($failed)		{			die("\n\nFailed at line $n\n");		}	}}fclose($fp);/*** Test for invariants*/echo "\n\nTesting for invariants...\n\n";$fp = fopen($phpbb_root_path . 'develop/UnicodeData.txt', 'rt');$n = 0;while (!feof($fp)){	if (++$n % 100 == 0)	{		echo $n, ' ';	}	$line = fgets($fp, 1024);	if (!$pos = strpos($line, ';'))	{		continue;	}	$hex_tested = $hex_expected = substr($line, 0, $pos);	if (isset($tested_chars[$hex_tested]))	{		continue;	}	$utf_expected = hex_to_utf($hex_expected);	if ($utf_expected >= UTF8_SURROGATE_FIRST	 && $utf_expected <= UTF8_SURROGATE_LAST)	{		/**		* Surrogates are illegal on their own, we expect the normalizer		* to return a replacement char		*/		$utf_expected = UTF8_REPLACEMENT;		$hex_expected = utf_to_hexseq($utf_expected);	}	foreach (array('nfc', 'nfkc', 'nfd', 'nfkd') as $form)	{		$utf_result = $utf_expected;		utf_normalizer::$form($utf_result);		$hex_result = utf_to_hexseq($utf_result);//		echo "$form($utf_expected) == $utf_result\n";		if (strcmp($utf_expected, $utf_result))		{			$failed = 1;			echo "\nFAILED $hex_expected == $form($hex_tested) ($hex_expected != $hex_result)";		}	}	if ($failed)	{		die("\n\nFailed at line $n\n");	}}fclose($fp);die("\n\nALL TESTS PASSED SUCCESSFULLY\n");/*** Download a file to the develop/ dir** @param	string	$url		URL of the file to download* @return	void*/function download($url){	global $phpbb_root_path;	if (file_exists($phpbb_root_path . 'develop/' . basename($url)))	{		return;	}	echo 'Downloading from ', $url, ' ';	if (!$fpr = fopen($url, 'rb'))	{		die("Can't download from $url\nPlease download it yourself and put it in the develop/ dir, kthxbai");	}	if (!$fpw = fopen($phpbb_root_path . 'develop/' . basename($url), 'wb'))	{		die("Can't open develop/" . basename($url) . " for output... please check your permissions or something");	}	$i = 0;	$chunk = 32768;	$done = '';	while (!feof($fpr))	{		$i += fwrite($fpw, fread($fpr, $chunk));		echo str_repeat("\x08", strlen($done));		$done = ($i >> 10) . ' KiB';		echo $done;	}	fclose($fpr);	fclose($fpw);	echo "\n";}/*** Convert a UTF string to a sequence of codepoints in hexadecimal** @param	string	$utf	UTF string* @return	integer			Unicode codepoints in hex*/function utf_to_hexseq($str){	$pos = 0;	$len = strlen($str);	$ret = array();	while ($pos < $len)	{		$c = $str[$pos];		switch ($c & "\xF0")		{			case "\xC0":			case "\xD0":				$utf_char = substr($str, $pos, 2);				$pos += 2;				break;			case "\xE0":				$utf_char = substr($str, $pos, 3);				$pos += 3;				break;			case "\xF0":				$utf_char = substr($str, $pos, 4);				$pos += 4;				break;			default:				$utf_char = $c;				++$pos;		}		$hex = dechex(utf_to_cp($utf_char));		if (!isset($hex[3]))		{			$hex = substr('000' . $hex, -4);		}		$ret[] = $hex;	}	return strtr(implode(' ', $ret), 'abcdef', 'ABCDEF');}/*** Convert a UTF-8 char to its codepoint** @param	string	$utf_char	UTF-8 char* @return	integer				Unicode codepoint*/function utf_to_cp($utf_char){	switch (strlen($utf_char))	{		case 1:			return ord($utf_char);		case 2:			return ((ord($utf_char[0]) & 0x1F) << 6) | (ord($utf_char[1]) & 0x3F);		case 3:			return ((ord($utf_char[0]) & 0x0F) << 12) | ((ord($utf_char[1]) & 0x3F) << 6) | (ord($utf_char[2]) & 0x3F);		case 4:			return ((ord($utf_char[0]) & 0x07) << 18) | ((ord($utf_char[1]) & 0x3F) << 12) | ((ord($utf_char[2]) & 0x3F) << 6) | (ord($utf_char[3]) & 0x3F);		default:			die('UTF-8 chars can only be 1-4 bytes long');	}}/*** Return a UTF string formed from a sequence of codepoints in hexadecimal** @param	string	$seq		Sequence of codepoints, separated with a space* @return	string				UTF-8 string*/function hexseq_to_utf($seq){	return implode('', array_map('hex_to_utf', explode(' ', $seq)));}/*** Convert a codepoint in hexadecimal to a UTF-8 char** @param	string	$hex		Codepoint, in hexadecimal* @return	string				UTF-8 char*/function hex_to_utf($hex){	return cp_to_utf(hexdec($hex));}/*** Convert a codepoint to a UTF-8 char** @param	integer	$cp			Unicode codepoint* @return	string				UTF-8 string*/function cp_to_utf($cp){	if ($cp > 0xFFFF)	{		return chr(0xF0 | ($cp >> 18)) . chr(0x80 | (($cp >> 12) & 0x3F)) . chr(0x80 | (($cp >> 6) & 0x3F)) . chr(0x80 | ($cp & 0x3F));	}	else if ($cp > 0x7FF)	{		return chr(0xE0 | ($cp >> 12)) . chr(0x80 | (($cp >> 6) & 0x3F)) . chr(0x80 | ($cp & 0x3F));	}	else if ($cp > 0x7F)	{		return chr(0xC0 | ($cp >> 6)) . chr(0x80 | ($cp & 0x3F));	}	else	{		return chr($cp);	}}
<?php/**** @package acp* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @ignore*/if (!defined('IN_PHPBB')){	exit;}/*** @package acp*/class acp_styles{	var $u_action;	var $style_cfg;	var $template_cfg;	var $theme_cfg;	var $imageset_cfg;	var $imageset_keys;	function main($id, $mode)	{		global $db, $user, $auth, $template, $cache;		global $config, $phpbb_root_path, $phpbb_admin_path, $phpEx;		// Hardcoded template bitfield to add for new templates		$bitfield = new bitfield();		$bitfield->set(0);		$bitfield->set(1);		$bitfield->set(2);		$bitfield->set(3);		$bitfield->set(4);		$bitfield->set(8);		$bitfield->set(9);		$bitfield->set(11);		$bitfield->set(12);		define('TEMPLATE_BITFIELD', $bitfield->get_base64());		unset($bitfield);		$user->add_lang('acp/styles');		$this->tpl_name = 'acp_styles';		$this->page_title = 'ACP_CAT_STYLES';		$action = request_var('action', '');		$action = (isset($_POST['add'])) ? 'add' : $action;		$style_id = request_var('id', 0);		// Fill the configuration variables		$this->style_cfg = $this->template_cfg = $this->theme_cfg = $this->imageset_cfg = '## phpBB {MODE} configuration file## @package phpBB3# @copyright (c) 2005 phpBB Group# @license http://opensource.org/licenses/gpl-license.php GNU Public License### At the left is the name, please do not change this# At the right the value is entered# For on/off options the valid values are on, off, 1, 0, true and false## Values get trimmed, if you want to add a space in front or at the end of# the value, then enclose the value with single or double quotes.# Single and double quotes do not need to be escaped.### General Information about this {MODE}name = {NAME}copyright = {COPYRIGHT}version = {VERSION}';		$this->theme_cfg .= '# Some configuration options## You have to turn this option on if you want to use the# path template variables ({T_IMAGESET_PATH} for example) within# your css file.# This is mostly the case if you want to use language specific# images within your css file.#parse_css_file = {PARSE_CSS_FILE}';		$this->template_cfg .= '# Some configuration options## You can use this function to inherit templates from another template.# The template of the given name has to be installed.# Templates cannot inherit from inheriting templates.#';		$this->imageset_keys = array(			'logos' => array(				'site_logo',			),			'buttons'	=> array(				'icon_back_top', 'icon_contact_aim', 'icon_contact_email', 'icon_contact_icq', 'icon_contact_jabber', 'icon_contact_msnm', 'icon_contact_pm', 'icon_contact_yahoo', 'icon_contact_www', 'icon_post_delete', 'icon_post_edit', 'icon_post_info', 'icon_post_quote', 'icon_post_report', 'icon_user_online', 'icon_user_offline', 'icon_user_profile', 'icon_user_search', 'icon_user_warn', 'button_pm_forward', 'button_pm_new', 'button_pm_reply', 'button_topic_locked', 'button_topic_new', 'button_topic_reply',			),			'icons'		=> array(				'icon_post_target', 'icon_post_target_unread', 'icon_topic_attach', 'icon_topic_latest', 'icon_topic_newest', 'icon_topic_reported', 'icon_topic_unapproved', 'icon_friend', 'icon_foe',			),			'forums'	=> array(				'forum_link', 'forum_read', 'forum_read_locked', 'forum_read_subforum', 'forum_unread', 'forum_unread_locked', 'forum_unread_subforum', 'subforum_read', 'subforum_unread'			),			'folders'	=> array(				'topic_moved', 'topic_read', 'topic_read_mine', 'topic_read_hot', 'topic_read_hot_mine', 'topic_read_locked', 'topic_read_locked_mine', 'topic_unread', 'topic_unread_mine', 'topic_unread_hot', 'topic_unread_hot_mine', 'topic_unread_locked', 'topic_unread_locked_mine', 'sticky_read', 'sticky_read_mine', 'sticky_read_locked', 'sticky_read_locked_mine', 'sticky_unread', 'sticky_unread_mine', 'sticky_unread_locked', 'sticky_unread_locked_mine', 'announce_read', 'announce_read_mine', 'announce_read_locked', 'announce_read_locked_mine', 'announce_unread', 'announce_unread_mine', 'announce_unread_locked', 'announce_unread_locked_mine', 'global_read', 'global_read_mine', 'global_read_locked', 'global_read_locked_mine', 'global_unread', 'global_unread_mine', 'global_unread_locked', 'global_unread_locked_mine', 'pm_read', 'pm_unread',			),			'polls'		=> array(				'poll_left', 'poll_center', 'poll_right',			),			'ui'		=> array(				'upload_bar',			),			'user'		=> array(				'user_icon1', 'user_icon2', 'user_icon3', 'user_icon4', 'user_icon5', 'user_icon6', 'user_icon7', 'user_icon8', 'user_icon9', 'user_icon10',			),		);		// Execute overall actions		switch ($action)		{			case 'delete':				if ($style_id)				{					$this->remove($mode, $style_id);					return;				}			break;			case 'export':				if ($style_id)				{					$this->export($mode, $style_id);					return;				}			break;			case 'install':				$this->install($mode);				return;			break;			case 'add':				$this->add($mode);				return;			break;			case 'details':				if ($style_id)				{					$this->details($mode, $style_id);					return;				}			break;			case 'edit':				if ($style_id)				{					switch ($mode)					{						case 'imageset':							return $this->edit_imageset($style_id);						case 'template':							return $this->edit_template($style_id);						case 'theme':							return $this->edit_theme($style_id);					}				}			break;			case 'cache':				if ($style_id)				{					switch ($mode)					{						case 'template':							return $this->template_cache($style_id);					}				}			break;		}		switch ($mode)		{			case 'style':				switch ($action)				{					case 'activate':					case 'deactivate':						if ($style_id == $config['default_style'])						{							trigger_error($user->lang['DEACTIVATE_DEFAULT'] . adm_back_link($this->u_action), E_USER_WARNING);						}						if (($action == 'deactivate' && confirm_box(true)) || $action == 'activate')						{							$sql = 'UPDATE ' . STYLES_TABLE . '								SET style_active = ' . (($action == 'activate') ? 1 : 0) . '								WHERE style_id = ' . $style_id;							$db->sql_query($sql);							// Set style to default for any member using deactivated style							if ($action == 'deactivate')							{								$sql = 'UPDATE ' . USERS_TABLE . '									SET user_style = ' . $config['default_style'] . "									WHERE user_style = $style_id";								$db->sql_query($sql);								$sql = 'UPDATE ' . FORUMS_TABLE . '									SET forum_style = 0									WHERE forum_style = ' . $style_id;								$db->sql_query($sql);							}						}						else if ($action == 'deactivate')						{							$s_hidden_fields = array(								'i'			=> $id,								'mode'		=> $mode,								'action'	=> $action,								'style_id'	=> $style_id,							);							confirm_box(false, $user->lang['CONFIRM_OPERATION'], build_hidden_fields($s_hidden_fields));						}					break;				}				$this->frontend('style', array('details'), array('export', 'delete'));			break;			case 'template':				switch ($action)				{					// Refresh template data stored in db and clear cache					case 'refresh':						$sql = 'SELECT *							FROM ' . STYLES_TEMPLATE_TABLE . "							WHERE template_id = $style_id";						$result = $db->sql_query($sql);						$template_row = $db->sql_fetchrow($result);						$db->sql_freeresult($result);						if (!$template_row)						{							trigger_error($user->lang['NO_TEMPLATE'] . adm_back_link($this->u_action), E_USER_WARNING);						}						if (confirm_box(true))						{							$template_refreshed = '';							// Only refresh database if the template is stored in the database							if ($template_row['template_storedb'] && file_exists("{$phpbb_root_path}styles/{$template_row['template_path']}/template/"))							{								$filelist = array('' => array());								$sql = 'SELECT template_filename, template_mtime									FROM ' . STYLES_TEMPLATE_DATA_TABLE . "									WHERE template_id = $style_id";								$result = $db->sql_query($sql);								while ($row = $db->sql_fetchrow($result))								{//									if (@filemtime("{$phpbb_root_path}styles/{$template_row['template_path']}/template/" . $row['template_filename']) > $row['template_mtime'])//									{										// get folder info from the filename										if (($slash_pos = strrpos($row['template_filename'], '/')) === false)										{											$filelist[''][] = $row['template_filename'];										}										else										{											$filelist[substr($row['template_filename'], 0, $slash_pos + 1)][] = substr($row['template_filename'], $slash_pos + 1, strlen($row['template_filename']) - $slash_pos - 1);										}//									}								}								$db->sql_freeresult($result);								$this->store_templates('update', $style_id, $template_row['template_path'], $filelist);								unset($filelist);								$template_refreshed = $user->lang['TEMPLATE_REFRESHED'] . '<br />';								add_log('admin', 'LOG_TEMPLATE_REFRESHED', $template_row['template_name']);							}							$this->clear_template_cache($template_row);							trigger_error($template_refreshed . $user->lang['TEMPLATE_CACHE_CLEARED'] . adm_back_link($this->u_action));						}						else						{							confirm_box(false, ($template_row['template_storedb']) ? $user->lang['CONFIRM_TEMPLATE_REFRESH'] : $user->lang['CONFIRM_TEMPLATE_CLEAR_CACHE'], build_hidden_fields(array(								'i'			=> $id,								'mode'		=> $mode,								'action'	=> $action,								'id'		=> $style_id							)));						}					break;				}				$this->frontend('template', array('edit', 'cache', 'details'), array('refresh', 'export', 'delete'));			break;			case 'theme':				switch ($action)				{					// Refresh theme data stored in the database					case 'refresh':						$sql = 'SELECT *							FROM ' . STYLES_THEME_TABLE . "							WHERE theme_id = $style_id";						$result = $db->sql_query($sql);						$theme_row = $db->sql_fetchrow($result);						$db->sql_freeresult($result);						if (!$theme_row)						{							trigger_error($user->lang['NO_THEME'] . adm_back_link($this->u_action), E_USER_WARNING);						}						if (!$theme_row['theme_storedb'])						{							trigger_error($user->lang['THEME_ERR_REFRESH_FS'] . adm_back_link($this->u_action), E_USER_WARNING);						}						if (confirm_box(true))						{							if ($theme_row['theme_storedb'] && file_exists("{$phpbb_root_path}styles/{$theme_row['theme_path']}/theme/stylesheet.css"))							{								// Save CSS contents								$sql_ary = array(									'theme_mtime'	=> (int) filemtime("{$phpbb_root_path}styles/{$theme_row['theme_path']}/theme/stylesheet.css"),									'theme_data'	=> $this->db_theme_data($theme_row)								);								$sql = 'UPDATE ' . STYLES_THEME_TABLE . ' SET ' . $db->sql_build_array('UPDATE', $sql_ary) . "									WHERE theme_id = $style_id";								$db->sql_query($sql);								$cache->destroy('sql', STYLES_THEME_TABLE);								add_log('admin', 'LOG_THEME_REFRESHED', $theme_row['theme_name']);								trigger_error($user->lang['THEME_REFRESHED'] . adm_back_link($this->u_action));							}						}						else						{							confirm_box(false, $user->lang['CONFIRM_THEME_REFRESH'], build_hidden_fields(array(								'i'			=> $id,								'mode'		=> $mode,								'action'	=> $action,								'id'		=> $style_id							)));						}					break;				}				$this->frontend('theme', array('edit', 'details'), array('refresh', 'export', 'delete'));			break;			case 'imageset':				switch ($action)				{					case 'refresh':						$sql = 'SELECT *							FROM ' . STYLES_IMAGESET_TABLE . "							WHERE imageset_id = $style_id";						$result = $db->sql_query($sql);						$imageset_row = $db->sql_fetchrow($result);						$db->sql_freeresult($result);						if (!$imageset_row)						{							trigger_error($user->lang['NO_IMAGESET'] . adm_back_link($this->u_action), E_USER_WARNING);						}						if (confirm_box(true))						{							$sql_ary = array();							$imageset_definitions = array();							foreach ($this->imageset_keys as $topic => $key_array)							{								$imageset_definitions = array_merge($imageset_definitions, $key_array);							}							$cfg_data_imageset = parse_cfg_file("{$phpbb_root_path}styles/{$imageset_row['imageset_path']}/imageset/imageset.cfg");							$db->sql_transaction('begin');							$sql = 'DELETE FROM ' . STYLES_IMAGESET_DATA_TABLE . '								WHERE imageset_id = ' . $style_id;							$result = $db->sql_query($sql);							foreach ($cfg_data_imageset as $image_name => $value)							{								if (strpos($value, '*') !== false)								{									if (substr($value, -1, 1) === '*')									{										list($image_filename, $image_height) = explode('*', $value);										$image_width = 0;									}									else									{										list($image_filename, $image_height, $image_width) = explode('*', $value);									}								}								else								{									$image_filename = $value;									$image_height = $image_width = 0;								}								if (strpos($image_name, 'img_') === 0 && $image_filename)								{									$image_name = substr($image_name, 4);									if (in_array($image_name, $imageset_definitions))									{										$sql_ary[] = array(											'image_name'		=> (string) $image_name,											'image_filename'	=> (string) $image_filename,											'image_height'		=> (int) $image_height,											'image_width'		=> (int) $image_width,											'imageset_id'		=> (int) $style_id,											'image_lang'		=> '',										);									}								}							}							$sql = 'SELECT lang_dir								FROM ' . LANG_TABLE;							$result = $db->sql_query($sql);							while ($row = $db->sql_fetchrow($result))							{								if (@file_exists("{$phpbb_root_path}styles/{$imageset_row['imageset_path']}/imageset/{$row['lang_dir']}/imageset.cfg"))								{									$cfg_data_imageset_data = parse_cfg_file("{$phpbb_root_path}styles/{$imageset_row['imageset_path']}/imageset/{$row['lang_dir']}/imageset.cfg");									foreach ($cfg_data_imageset_data as $image_name => $value)									{										if (strpos($value, '*') !== false)										{											if (substr($value, -1, 1) === '*')											{												list($image_filename, $image_height) = explode('*', $value);												$image_width = 0;											}											else											{												list($image_filename, $image_height, $image_width) = explode('*', $value);											}										}										else										{											$image_filename = $value;											$image_height = $image_width = 0;										}										if (strpos($image_name, 'img_') === 0 && $image_filename)										{											$image_name = substr($image_name, 4);											if (in_array($image_name, $imageset_definitions))											{												$sql_ary[] = array(													'image_name'		=> (string) $image_name,													'image_filename'	=> (string) $image_filename,													'image_height'		=> (int) $image_height,													'image_width'		=> (int) $image_width,													'imageset_id'		=> (int) $style_id,													'image_lang'		=> (string) $row['lang_dir'],												);											}										}									}								}							}							$db->sql_freeresult($result);							$db->sql_multi_insert(STYLES_IMAGESET_DATA_TABLE, $sql_ary);							$db->sql_transaction('commit');							$cache->destroy('sql', STYLES_IMAGESET_DATA_TABLE);							$cache->destroy('imageset_site_logo_md5');							add_log('admin', 'LOG_IMAGESET_REFRESHED', $imageset_row['imageset_name']);							trigger_error($user->lang['IMAGESET_REFRESHED'] . adm_back_link($this->u_action));						}						else						{							confirm_box(false, $user->lang['CONFIRM_IMAGESET_REFRESH'], build_hidden_fields(array(								'i'			=> $id,								'mode'		=> $mode,								'action'	=> $action,								'id'		=> $style_id							)));						}					break;				}				$this->frontend('imageset', array('edit', 'details'), array('refresh', 'export', 'delete'));			break;		}	}	/**	* Build Frontend with supplied options	*/	function frontend($mode, $options, $actions)	{		global $user, $template, $db, $config, $phpbb_root_path, $phpEx;		$sql_from = '';		$style_count = array();		switch ($mode)		{			case 'style':				$sql_from = STYLES_TABLE;				$sql = 'SELECT user_style, COUNT(user_style) AS style_count					FROM ' . USERS_TABLE . '					GROUP BY user_style';				$result = $db->sql_query($sql);				while ($row = $db->sql_fetchrow($result))				{					$style_count[$row['user_style']] = $row['style_count'];				}				$db->sql_freeresult($result);			break;			case 'template':				$sql_from = STYLES_TEMPLATE_TABLE;			break;			case 'theme':				$sql_from = STYLES_THEME_TABLE;			break;			case 'imageset':				$sql_from = STYLES_IMAGESET_TABLE;			break;		}		$l_prefix = strtoupper($mode);		$this->page_title = 'ACP_' . $l_prefix . 'S';		$template->assign_vars(array(			'S_FRONTEND'		=> true,			'S_STYLE'			=> ($mode == 'style') ? true : false,			'L_TITLE'			=> $user->lang[$this->page_title],			'L_EXPLAIN'			=> $user->lang[$this->page_title . '_EXPLAIN'],			'L_NAME'			=> $user->lang[$l_prefix . '_NAME'],			'L_INSTALLED'		=> $user->lang['INSTALLED_' . $l_prefix],			'L_UNINSTALLED'		=> $user->lang['UNINSTALLED_' . $l_prefix],			'L_NO_UNINSTALLED'	=> $user->lang['NO_UNINSTALLED_' . $l_prefix],			'L_CREATE'			=> $user->lang['CREATE_' . $l_prefix],			'U_ACTION'			=> $this->u_action,			)		);		$sql = "SELECT *			FROM $sql_from";		$result = $db->sql_query($sql);		$installed = array();		$basis_options = '<option class="sep" value="">' . $user->lang['OPTIONAL_BASIS'] . '</option>';		while ($row = $db->sql_fetchrow($result))		{			$installed[] = $row[$mode . '_name'];			$basis_options .= '<option value="' . $row[$mode . '_id'] . '">' . $row[$mode . '_name'] . '</option>';			$stylevis = ($mode == 'style' && !$row['style_active']) ? 'activate' : 'deactivate';			$s_options = array();			foreach ($options as $option)			{				$s_options[] = '<a href="' . $this->u_action . "&amp;action=$option&amp;id=" . $row[$mode . '_id'] . '">' . $user->lang[strtoupper($option)] . '</a>';			}			$s_actions = array();			foreach ($actions as $option)			{				$s_actions[] = '<a href="' . $this->u_action . "&amp;action=$option&amp;id=" . $row[$mode . '_id'] . '">' . $user->lang[strtoupper($option)] . '</a>';			}			$template->assign_block_vars('installed', array(				'S_DEFAULT_STYLE'		=> ($mode == 'style' && $row['style_id'] == $config['default_style']) ? true : false,				'U_EDIT'				=> $this->u_action . '&amp;action=' . (($mode == 'style') ? 'details' : 'edit') . '&amp;id=' . $row[$mode . '_id'],				'U_STYLE_ACT_DEACT'		=> $this->u_action . '&amp;action=' . $stylevis . '&amp;id=' . $row[$mode . '_id'],				'L_STYLE_ACT_DEACT'		=> $user->lang['STYLE_' . strtoupper($stylevis)],				'S_OPTIONS'				=> implode(' | ', $s_options),				'S_ACTIONS'				=> implode(' | ', $s_actions),				'U_PREVIEW'				=> ($mode == 'style') ? append_sid("{$phpbb_root_path}index.$phpEx", "$mode=" . $row[$mode . '_id']) : '',				'NAME'					=> $row[$mode . '_name'],				'STYLE_COUNT'			=> ($mode == 'style' && isset($style_count[$row['style_id']])) ? $style_count[$row['style_id']] : 0,				)			);		}		$db->sql_freeresult($result);		// Grab uninstalled items		$new_ary = $cfg = array();		$dp = @opendir("{$phpbb_root_path}styles");		if ($dp)		{			while (($file = readdir($dp)) !== false)			{				if ($file[0] == '.' || !is_dir($phpbb_root_path . 'styles/' . $file))				{					continue;				}				$subpath = ($mode != 'style') ? "$mode/" : '';				if (file_exists("{$phpbb_root_path}styles/$file/$subpath$mode.cfg"))				{					if ($cfg = file("{$phpbb_root_path}styles/$file/$subpath$mode.cfg"))					{						$items = parse_cfg_file('', $cfg);						$name = (isset($items['name'])) ? trim($items['name']) : false;						if ($name && !in_array($name, $installed))						{							$new_ary[] = array(								'path'		=> $file,								'name'		=> $name,								'copyright'	=> $items['copyright'],							);						}					}				}			}			closedir($dp);		}		unset($installed);		if (sizeof($new_ary))		{			foreach ($new_ary as $cfg)			{				$template->assign_block_vars('uninstalled', array(					'NAME'			=> $cfg['name'],					'COPYRIGHT'		=> $cfg['copyright'],					'U_INSTALL'		=> $this->u_action . '&amp;action=install&amp;path=' . urlencode($cfg['path']))				);			}		}		unset($new_ary);		$template->assign_vars(array(			'S_BASIS_OPTIONS'		=> $basis_options)		);	}	/**	* Provides a template editor which allows saving changes to template files on the filesystem or in the database.	*	* @param int $template_id specifies which template set is being edited	*/	function edit_template($template_id)	{		global $phpbb_root_path, $phpEx, $config, $db, $cache, $user, $template, $safe_mode;		if (defined('PHPBB_DISABLE_ACP_EDITOR'))		{			trigger_error($user->lang['EDITOR_DISABLED'] . adm_back_link($this->u_action));		}		$this->page_title = 'EDIT_TEMPLATE';		$filelist = $filelist_cats = array();		$template_data	= utf8_normalize_nfc(request_var('template_data', '', true));		$template_data	= htmlspecialchars_decode($template_data);		$template_file	= utf8_normalize_nfc(request_var('template_file', '', true));		$text_rows		= max(5, min(999, request_var('text_rows', 20)));		$save_changes	= (isset($_POST['save'])) ? true : false;		// make sure template_file path doesn't go upwards		$template_file = preg_replace('#\.{2,}#', '.', $template_file);		// Retrieve some information about the template		$sql = 'SELECT template_storedb, template_path, template_name			FROM ' . STYLES_TEMPLATE_TABLE . "			WHERE template_id = $template_id";		$result = $db->sql_query($sql);		$template_info = $db->sql_fetchrow($result);		$db->sql_freeresult($result);		if (!$template_info)		{			trigger_error($user->lang['NO_TEMPLATE'] . adm_back_link($this->u_action), E_USER_WARNING);		}		if ($save_changes && !check_form_key('acp_styles'))		{			trigger_error($user->lang['FORM_INVALID'] . adm_back_link($this->u_action), E_USER_WARNING);		}		else if (!$save_changes)		{			add_form_key('acp_styles');		}		// save changes to the template if the user submitted any		if ($save_changes && $template_file)		{			// Get the filesystem location of the current file			$file = "{$phpbb_root_path}styles/{$template_info['template_path']}/template/$template_file";			$additional = '';			// If the template is stored on the filesystem try to write the file else store it in the database			if (!$safe_mode && !$template_info['template_storedb'] && file_exists($file) && phpbb_is_writable($file))			{				if (!($fp = @fopen($file, 'wb')))				{					// File exists and is writeable, but still not able to be written to					trigger_error(sprintf($user->lang['TEMPLATE_FILE_NOT_WRITABLE'], htmlspecialchars($template_file)) . adm_back_link($this->u_action), E_USER_WARNING);				}				fwrite($fp, $template_data);				fclose($fp);			}			else			{				$db->sql_transaction('begin');				// If it's not stored in the db yet, then update the template setting and store all template files in the db				if (!$template_info['template_storedb'])				{					if ($super = $this->get_super('template', $template_id))					{						$this->store_in_db('template', $super['template_id']);					}					else					{						$this->store_in_db('template', $template_id);					}					add_log('admin', 'LOG_TEMPLATE_EDIT_DETAILS', $template_info['template_name']);					$additional .= '<br />' . $user->lang['EDIT_TEMPLATE_STORED_DB'];				}				// Update the template_data table entry for this template file				$sql = 'UPDATE ' . STYLES_TEMPLATE_DATA_TABLE . "					SET template_data = '" . $db->sql_escape($template_data) . "', template_mtime = " . time() . "					WHERE template_id = $template_id						AND template_filename = '" . $db->sql_escape($template_file) . "'";				$db->sql_query($sql);				$db->sql_transaction('commit');			}			// destroy the cached version of the template (filename without extension)			$this->clear_template_cache($template_info, array(substr($template_file, 0, -5)));			$cache->destroy('sql', STYLES_TABLE);			add_log('admin', 'LOG_TEMPLATE_EDIT', $template_info['template_name'], $template_file);			trigger_error($user->lang['TEMPLATE_FILE_UPDATED'] . $additional . adm_back_link($this->u_action . "&amp;action=edit&amp;id=$template_id&amp;text_rows=$text_rows&amp;template_file=$template_file"));		}		// Generate a category array containing template filenames		if (!$template_info['template_storedb'])		{			$template_path = "{$phpbb_root_path}styles/{$template_info['template_path']}/template";			$filelist = filelist($template_path, '', 'html');			$filelist[''] = array_diff($filelist[''], array('bbcode.html'));			if ($template_file)			{				if (!file_exists($template_path . "/$template_file") || !($template_data = file_get_contents($template_path . "/$template_file")))				{					trigger_error($user->lang['NO_TEMPLATE'] . adm_back_link($this->u_action), E_USER_WARNING);				}			}		}		else		{			$sql = 'SELECT *				FROM ' . STYLES_TEMPLATE_DATA_TABLE . "				WHERE template_id = $template_id";			$result = $db->sql_query($sql);			$filelist = array('' => array());			while ($row = $db->sql_fetchrow($result))			{				$file_info = pathinfo($row['template_filename']);				if (($file_info['basename'] != 'bbcode') && ($file_info['extension'] == 'html'))				{					if (($file_info['dirname'] == '.') || empty($file_info['dirname']))					{						$filelist[''][] = $row['template_filename'];					}					else					{						$filelist[$file_info['dirname'] . '/'][] = $file_info['basename'];					}				}				if ($row['template_filename'] == $template_file)				{					$template_data = $row['template_data'];				}			}			$db->sql_freeresult($result);			unset($file_info);		}		if (empty($filelist['']))		{			trigger_error($user->lang['NO_TEMPLATE'] . adm_back_link($this->u_action), E_USER_WARNING);		}		// Now create the categories		$filelist_cats[''] = array();		foreach ($filelist as $pathfile => $file_ary)		{			// Use the directory name as category name			if (!empty($pathfile))			{				$filelist_cats[$pathfile] = array();				foreach ($file_ary as $file)				{					$filelist_cats[$pathfile][$pathfile . $file] = $file;				}			}			// or if it's in the main category use the word before the first underscore to group files			else			{				$cats = array();				foreach ($file_ary as $file)				{					$cats[] = substr($file, 0, strpos($file, '_'));					$filelist_cats[substr($file, 0, strpos($file, '_'))][$file] = $file;				}				$cats = array_values(array_unique($cats));				// we don't need any single element categories so put them into the misc '' category				for ($i = 0, $n = sizeof($cats); $i < $n; $i++)				{					if (sizeof($filelist_cats[$cats[$i]]) == 1 && $cats[$i] !== '')					{						$filelist_cats[''][key($filelist_cats[$cats[$i]])] = current($filelist_cats[$cats[$i]]);						unset($filelist_cats[$cats[$i]]);					}				}				unset($cats);			}		}		unset($filelist);		// Generate list of categorised template files		$tpl_options = '';		ksort($filelist_cats);		foreach ($filelist_cats as $category => $tpl_ary)		{			ksort($tpl_ary);			if (!empty($category))			{				$tpl_options .= '<option class="sep" value="">' . $category . '</option>';			}			foreach ($tpl_ary as $filename => $file)			{				$selected = ($template_file == $filename) ? ' selected="selected"' : '';				$tpl_options .= '<option value="' . $filename . '"' . $selected . '>' . $file . '</option>';			}		}		$template->assign_vars(array(			'S_EDIT_TEMPLATE'	=> true,			'S_HIDDEN_FIELDS'	=> build_hidden_fields(array('template_file' => $template_file)),			'S_TEMPLATES'		=> $tpl_options,			'U_ACTION'			=> $this->u_action . "&amp;action=edit&amp;id=$template_id&amp;text_rows=$text_rows",			'U_BACK'			=> $this->u_action,			'L_EDIT'			=> $user->lang['EDIT_TEMPLATE'],			'L_EDIT_EXPLAIN'	=> $user->lang['EDIT_TEMPLATE_EXPLAIN'],			'L_EDITOR'			=> $user->lang['TEMPLATE_EDITOR'],			'L_EDITOR_HEIGHT'	=> $user->lang['TEMPLATE_EDITOR_HEIGHT'],			'L_FILE'			=> $user->lang['TEMPLATE_FILE'],			'L_SELECT'			=> $user->lang['SELECT_TEMPLATE'],			'L_SELECTED'		=> $user->lang['SELECTED_TEMPLATE'],			'L_SELECTED_FILE'	=> $user->lang['SELECTED_TEMPLATE_FILE'],			'SELECTED_TEMPLATE'	=> $template_info['template_name'],			'TEMPLATE_FILE'		=> $template_file,			'TEMPLATE_DATA'		=> utf8_htmlspecialchars($template_data),			'TEXT_ROWS'			=> $text_rows)		);	}	/**	* Allows the admin to view cached versions of template files and clear single template cache files	*	* @param int $template_id specifies which template's cache is shown	*/	function template_cache($template_id)	{		global $phpbb_root_path, $phpEx, $config, $db, $cache, $user, $template;		$source		= str_replace('/', '.', request_var('source', ''));		$file_ary	= array_diff(request_var('delete', array('')), array(''));		$submit		= isset($_POST['submit']) ? true : false;		$sql = 'SELECT *			FROM ' . STYLES_TEMPLATE_TABLE . "			WHERE template_id = $template_id";		$result = $db->sql_query($sql);		$template_row = $db->sql_fetchrow($result);		$db->sql_freeresult($result);		if (!$template_row)		{			trigger_error($user->lang['NO_TEMPLATE'] . adm_back_link($this->u_action), E_USER_WARNING);		}		// User wants to delete one or more files ...		if ($submit && $file_ary)		{			$this->clear_template_cache($template_row, $file_ary);			trigger_error($user->lang['TEMPLATE_CACHE_CLEARED'] . adm_back_link($this->u_action . "&amp;action=cache&amp;id=$template_id"));		}		$cache_prefix = 'tpl_' . str_replace('_', '-', $template_row['template_path']);		// Someone wants to see the cached source ... so we'll highlight it,		// add line numbers and indent it appropriately. This could be nasty		// on larger source files ...		if ($source && file_exists("{$phpbb_root_path}cache/{$cache_prefix}_$source.html.$phpEx"))		{			adm_page_header($user->lang['TEMPLATE_CACHE']);			$template->set_filenames(array(				'body'	=> 'viewsource.html')			);			$template->assign_vars(array(				'FILENAME'	=> str_replace('.', '/', $source) . '.html')			);			$code = str_replace(array("\r\n", "\r"), array("\n", "\n"), file_get_contents("{$phpbb_root_path}cache/{$cache_prefix}_$source.html.$phpEx"));			$conf = array('highlight.bg', 'highlight.comment', 'highlight.default', 'highlight.html', 'highlight.keyword', 'highlight.string');			foreach ($conf as $ini_var)			{				@ini_set($ini_var, str_replace('highlight.', 'syntax', $ini_var));			}			$marker = 'MARKER' . time();			$code = highlight_string(str_replace("\n", $marker, $code), true);			$code = str_replace($marker, "\n", $code);			$str_from = array('<span style="color: ', '<font color="syntax', '</font>', '<code>', '</code>','[', ']', '.', ':');			$str_to = array('<span class="', '<span class="syntax', '</span>', '', '', '&#91;', '&#93;', '&#46;', '&#58;');			$code = str_replace($str_from, $str_to, $code);			$code = preg_replace('#^(<span class="[a-z_]+">)\n?(.*?)\n?(</span>)$#ism', '$1$2$3', $code);			$code = substr($code, strlen('<span class="syntaxhtml">'));			$code = substr($code, 0, -1 * strlen('</ span>'));			$code = explode("\n", $code);			foreach ($code as $key => $line)			{				$template->assign_block_vars('source', array(					'LINENUM'	=> $key + 1,					'LINE'		=> preg_replace('#([^ ;])&nbsp;([^ &])#', '$1 $2', $line))				);				unset($code[$key]);			}			adm_page_footer();		}		$filemtime = array();		if ($template_row['template_storedb'])		{			$ids = array();			if (isset($template_row['template_inherits_id']) && $template_row['template_inherits_id'])			{				$ids[] = $template_row['template_inherits_id'];			}			$ids[] = $template_row['template_id'];			$filemtime 			= array();			$file_template_db	= array();			foreach ($ids as $id)			{				$sql = 'SELECT template_filename, template_mtime					FROM ' . STYLES_TEMPLATE_DATA_TABLE . "					WHERE template_id = $id";				$result = $db->sql_query($sql);				while ($row = $db->sql_fetchrow($result))				{					$filemtime[$row['template_filename']] = $row['template_mtime'];					$file_template_db[$row['template_filename']] = $id;				}				$db->sql_freeresult($result);			}		}		// Get a list of cached template files and then retrieve additional information about them		$file_ary = $this->template_cache_filelist($template_row['template_path']);		foreach ($file_ary as $file)		{			$file		= str_replace('/', '.', $file);			// perform some dirty guessing to get the path right.			// We assume that three dots in a row were '../'			$tpl_file	= str_replace('.', '/', $file);			$tpl_file	= str_replace('///', '../', $tpl_file);			$filename = "{$cache_prefix}_$file.html.$phpEx";			if (!file_exists("{$phpbb_root_path}cache/$filename"))			{				continue;			}			$file_tpl = "{$phpbb_root_path}styles/{$template_row['template_path']}/template/$tpl_file.html";			$inherited = false;			if (isset($template_row['template_inherits_id']) && $template_row['template_inherits_id'])			{				if (!$template_row['template_storedb'])				{					if (!file_exists($file_tpl))					{						$file_tpl = "{$phpbb_root_path}styles/{$template_row['template_inherit_path']}/template/$tpl_file.html";						$inherited = true;					}				}				else				{					if ($file_template_db[$file . '.html'] == $template_row['template_inherits_id'])					{						$file_tpl = "{$phpbb_root_path}styles/{$template_row['template_inherit_path']}/template/$tpl_file.html";						$inherited = true;					}				}			}			// Correct the filename if it is stored in database and the file is in a subfolder.			if ($template_row['template_storedb'])			{				$file = str_replace('.', '/', $file);			}			$template->assign_block_vars('file', array(				'U_VIEWSOURCE'	=> $this->u_action . "&amp;action=cache&amp;id=$template_id&amp;source=$file",				'CACHED'		=> $user->format_date(filemtime("{$phpbb_root_path}cache/$filename")),				'FILENAME'		=> $file,				'FILENAME_PATH'	=> $file_tpl,				'FILESIZE'		=> get_formatted_filesize(filesize("{$phpbb_root_path}cache/$filename")),				'MODIFIED'		=> $user->format_date((!$template_row['template_storedb']) ? filemtime($file_tpl) : $filemtime[$file . '.html']))			);		}		unset($filemtime);		$template->assign_vars(array(			'S_CACHE'			=> true,			'S_TEMPLATE'		=> true,			'U_ACTION'			=> $this->u_action . "&amp;action=cache&amp;id=$template_id",			'U_BACK'			=> $this->u_action)		);	}	/**	* Provides a css editor and a basic easier to use stylesheet editing tool for less experienced (or lazy) users	*	* @param int $theme_id specifies which theme is being edited	*/	function edit_theme($theme_id)	{		global $phpbb_root_path, $phpEx, $config, $db, $cache, $user, $template, $safe_mode;		$this->page_title = 'EDIT_THEME';		$filelist = $filelist_cats = array();		$theme_data		= utf8_normalize_nfc(request_var('template_data', '', true));		$theme_data		= htmlspecialchars_decode($theme_data);		$theme_file		= utf8_normalize_nfc(request_var('template_file', '', true));		$text_rows		= max(5, min(999, request_var('text_rows', 20)));		$save_changes	= (isset($_POST['save'])) ? true : false;		// make sure theme_file path doesn't go upwards		$theme_file = str_replace('..', '.', $theme_file);		// Retrieve some information about the theme		$sql = 'SELECT theme_storedb, theme_path, theme_name, theme_data			FROM ' . STYLES_THEME_TABLE . "			WHERE theme_id = $theme_id";		$result = $db->sql_query($sql);		if (!($theme_info = $db->sql_fetchrow($result)))		{			trigger_error($user->lang['NO_THEME'] . adm_back_link($this->u_action), E_USER_WARNING);		}		$db->sql_freeresult($result);		// save changes to the theme if the user submitted any		if ($save_changes)		{			// Get the filesystem location of the current file			$file = "{$phpbb_root_path}styles/{$theme_info['theme_path']}/theme/$theme_file";			$additional = '';			$message = $user->lang['THEME_UPDATED'];			// If the theme is stored on the filesystem try to write the file else store it in the database			if (!$safe_mode && !$theme_info['theme_storedb'] && file_exists($file) && phpbb_is_writable($file))			{				if (!($fp = @fopen($file, 'wb')))				{					trigger_error($user->lang['NO_THEME'] . adm_back_link($this->u_action), E_USER_WARNING);				}				fwrite($fp, $theme_data);				fclose($fp);			}			else			{				// Write stylesheet to db				$sql_ary = array(					'theme_mtime'		=> time(),					'theme_storedb'		=> 1,					'theme_data'		=> $this->db_theme_data($theme_info, $theme_data),				);				$sql = 'UPDATE ' . STYLES_THEME_TABLE . '					SET ' . $db->sql_build_array('UPDATE', $sql_ary) . '					WHERE theme_id = ' . $theme_id;				$db->sql_query($sql);				$cache->destroy('sql', STYLES_THEME_TABLE);				// notify the user if the theme was not stored in the db before his modification				if (!$theme_info['theme_storedb'])				{					add_log('admin', 'LOG_THEME_EDIT_DETAILS', $theme_info['theme_name']);					$message .= '<br />' . $user->lang['EDIT_THEME_STORED_DB'];				}			}			$cache->destroy('sql', STYLES_THEME_TABLE);			add_log('admin', (!$theme_info['theme_storedb']) ? 'LOG_THEME_EDIT_FILE' : 'LOG_THEME_EDIT', $theme_info['theme_name'], (!$theme_info['theme_storedb']) ? $theme_file : '');			trigger_error($message . adm_back_link($this->u_action . "&amp;action=edit&amp;id=$theme_id&amp;template_file=$theme_file&amp;text_rows=$text_rows"));		}		// Generate a category array containing theme filenames		if (!$theme_info['theme_storedb'])		{			$theme_path = "{$phpbb_root_path}styles/{$theme_info['theme_path']}/theme";			$filelist = filelist($theme_path, '', 'css');			if ($theme_file)			{				if (!file_exists($theme_path . "/$theme_file") || !($theme_data = file_get_contents($theme_path . "/$theme_file")))				{					trigger_error($user->lang['NO_THEME'] . adm_back_link($this->u_action), E_USER_WARNING);				}			}		}		else		{			$theme_data = &$theme_info['theme_data'];		}		// Now create the categories		$filelist_cats[''] = array();		foreach ($filelist as $pathfile => $file_ary)		{			// Use the directory name as category name			if (!empty($pathfile))			{				$filelist_cats[$pathfile] = array();				foreach ($file_ary as $file)				{					$filelist_cats[$pathfile][$pathfile . $file] = $file;				}			}			// or if it's in the main category use the word before the first underscore to group files			else			{				$cats = array();				foreach ($file_ary as $file)				{					$cats[] = substr($file, 0, strpos($file, '_'));					$filelist_cats[substr($file, 0, strpos($file, '_'))][$file] = $file;				}				$cats = array_values(array_unique($cats));				// we don't need any single element categories so put them into the misc '' category				for ($i = 0, $n = sizeof($cats); $i < $n; $i++)				{					if (sizeof($filelist_cats[$cats[$i]]) == 1 && $cats[$i] !== '')					{						$filelist_cats[''][key($filelist_cats[$cats[$i]])] = current($filelist_cats[$cats[$i]]);						unset($filelist_cats[$cats[$i]]);					}				}				unset($cats);			}		}		unset($filelist);		// Generate list of categorised theme files		$tpl_options = '';		ksort($filelist_cats);		foreach ($filelist_cats as $category => $tpl_ary)		{			ksort($tpl_ary);			if (!empty($category))			{				$tpl_options .= '<option class="sep" value="">' . $category . '</option>';			}			foreach ($tpl_ary as $filename => $file)			{				$selected = ($theme_file == $filename) ? ' selected="selected"' : '';				$tpl_options .= '<option value="' . $filename . '"' . $selected . '>' . $file . '</option>';			}		}		$template->assign_vars(array(			'S_EDIT_THEME'		=> true,			'S_HIDDEN_FIELDS'	=> build_hidden_fields(array('template_file' => $theme_file)),			'S_THEME_IN_DB'		=> $theme_info['theme_storedb'],			'S_TEMPLATES'		=> $tpl_options,			'U_ACTION'			=> $this->u_action . "&amp;action=edit&amp;id=$theme_id&amp;text_rows=$text_rows",			'U_BACK'			=> $this->u_action,			'L_EDIT'			=> $user->lang['EDIT_THEME'],			'L_EDIT_EXPLAIN'	=> $user->lang['EDIT_THEME_EXPLAIN'],			'L_EDITOR'			=> $user->lang['THEME_EDITOR'],			'L_EDITOR_HEIGHT'	=> $user->lang['THEME_EDITOR_HEIGHT'],			'L_FILE'			=> $user->lang['THEME_FILE'],			'L_SELECT'			=> $user->lang['SELECT_THEME'],			'L_SELECTED'		=> $user->lang['SELECTED_THEME'],			'L_SELECTED_FILE'	=> $user->lang['SELECTED_THEME_FILE'],			'SELECTED_TEMPLATE'	=> $theme_info['theme_name'],			'TEMPLATE_FILE'		=> $theme_file,			'TEMPLATE_DATA'		=> utf8_htmlspecialchars($theme_data),			'TEXT_ROWS'			=> $text_rows)		);	}	/**	* Edit imagesets	*	* @param int $imageset_id specifies which imageset is being edited	*/	function edit_imageset($imageset_id)	{		global $db, $user, $phpbb_root_path, $cache, $template;		$this->page_title = 'EDIT_IMAGESET';		if (!$imageset_id)		{			trigger_error($user->lang['NO_IMAGESET'] . adm_back_link($this->u_action), E_USER_WARNING);		}		$update		= (isset($_POST['update'])) ? true : false;		$imgname	= request_var('imgname', 'site_logo');		$imgname	= preg_replace('#[^a-z0-9\-+_]#i', '', $imgname);		$sql_extra = $imgnamelang = '';		$sql = 'SELECT imageset_path, imageset_name			FROM ' . STYLES_IMAGESET_TABLE . "			WHERE imageset_id = $imageset_id";		$result = $db->sql_query($sql);		$imageset_row = $db->sql_fetchrow($result);		$db->sql_freeresult($result);		if (!$imageset_row)		{			trigger_error($user->lang['NO_IMAGESET'] . adm_back_link($this->u_action), E_USER_WARNING);		}		$imageset_path		= $imageset_row['imageset_path'];		$imageset_name		= $imageset_row['imageset_name'];		if (strpos($imgname, '-') !== false)		{			list($imgname, $imgnamelang) = explode('-', $imgname);			$sql_extra = " AND image_lang IN ('" . $db->sql_escape($imgnamelang) . "', '')";		}		$sql = 'SELECT image_filename, image_width, image_height, image_lang, image_id			FROM ' . STYLES_IMAGESET_DATA_TABLE . "			WHERE imageset_id = $imageset_id				AND image_name = '" . $db->sql_escape($imgname) . "'$sql_extra";		$result = $db->sql_query($sql);		$imageset_data_row = $db->sql_fetchrow($result);		$db->sql_freeresult($result);		$image_filename	= $imageset_data_row['image_filename'];		$image_width	= $imageset_data_row['image_width'];		$image_height	= $imageset_data_row['image_height'];		$image_lang		= $imageset_data_row['image_lang'];		$image_id		= $imageset_data_row['image_id'];		$imgsize		= ($imageset_data_row['image_width'] && $imageset_data_row['image_height']) ? 1 : 0;		// Check to see whether the selected image exists in the table		$valid_name = ($update) ? false : true;		foreach ($this->imageset_keys as $category => $img_ary)		{			if (in_array($imgname, $img_ary))			{				$valid_name = true;				break;			}		}		if ($update && isset($_POST['imgpath']) && $valid_name)		{			// If imgwidth and imgheight are non-zero grab the actual size			// from the image itself ... we ignore width settings for the poll center image			$imgwidth	= request_var('imgwidth', 0);			$imgheight	= request_var('imgheight', 0);			$imgsize	= request_var('imgsize', 0);			$imgpath	= request_var('imgpath', '');			$imgpath	= str_replace('..', '.', $imgpath);			// If no dimensions selected, we reset width and height to 0 ;)			if (!$imgsize)			{				$imgwidth = $imgheight = 0;			}			$imglang = '';			if ($imgpath && !file_exists("{$phpbb_root_path}styles/$imageset_path/imageset/$imgpath"))			{				trigger_error($user->lang['NO_IMAGE_ERROR'] . adm_back_link($this->u_action), E_USER_WARNING);			}			// Determine width/height. If dimensions included and no width/height given, we detect them automatically...			if ($imgsize && $imgpath)			{				if (!$imgwidth || !$imgheight)				{					list($imgwidth_file, $imgheight_file) = getimagesize("{$phpbb_root_path}styles/$imageset_path/imageset/$imgpath");					$imgwidth = ($imgwidth) ? $imgwidth : $imgwidth_file;					$imgheight = ($imgheight) ? $imgheight : $imgheight_file;				}				$imgwidth	= ($imgname != 'poll_center') ? (int) $imgwidth : 0;				$imgheight	= (int) $imgheight;			}			if (strpos($imgpath, '/') !== false)			{				list($imglang, $imgfilename) = explode('/', $imgpath);			}			else			{				$imgfilename = $imgpath;			}			$sql_ary = array(				'image_filename'	=> (string) $imgfilename,				'image_width'		=> (int) $imgwidth,				'image_height'		=> (int) $imgheight,				'image_lang'		=> (string) $imglang,			);			// already exists			if ($imageset_data_row)			{				$sql = 'UPDATE ' . STYLES_IMAGESET_DATA_TABLE . '					SET ' . $db->sql_build_array('UPDATE', $sql_ary) . "					WHERE image_id = $image_id";				$db->sql_query($sql);			}			// does not exist			else if (!$imageset_data_row)			{				$sql_ary['image_name']	= $imgname;				$sql_ary['imageset_id']	= (int) $imageset_id;				$db->sql_query('INSERT INTO ' . STYLES_IMAGESET_DATA_TABLE . ' ' . $db->sql_build_array('INSERT', $sql_ary));			}			$cache->destroy('sql', STYLES_IMAGESET_DATA_TABLE);			add_log('admin', 'LOG_IMAGESET_EDIT', $imageset_name);			$template->assign_var('SUCCESS', true);			$image_filename = $imgfilename;			$image_width	= $imgwidth;			$image_height	= $imgheight;			$image_lang		= $imglang;		}		$imglang = '';		$imagesetlist = array('nolang' => array(), 'lang' => array());		$langs = array();		$dir = "{$phpbb_root_path}styles/$imageset_path/imageset";		$dp = @opendir($dir);		if ($dp)		{			while (($file = readdir($dp)) !== false)			{				if ($file[0] != '.' && strtoupper($file) != 'CVS' && !is_file($dir . '/' . $file) && !is_link($dir . '/' . $file))				{					$langs[] = $file;				}				else if (preg_match('#\.(?:gif|jpg|png)$#', $file))				{					$imagesetlist['nolang'][] = $file;				}			}			if ($sql_extra)			{				$dp2 = @opendir("$dir/$imgnamelang");				if ($dp2)				{					while (($file2 = readdir($dp2)) !== false)					{						if (preg_match('#\.(?:gif|jpg|png)$#', $file2))						{							$imagesetlist['lang'][] = "$imgnamelang/$file2";						}					}					closedir($dp2);				}			}			closedir($dp);		}		// Generate list of image options		$img_options = '';		foreach ($this->imageset_keys as $category => $img_ary)		{			$template->assign_block_vars('category', array(				'NAME'			=> $user->lang['IMG_CAT_' . strtoupper($category)]			));			foreach ($img_ary as $img)			{				if ($category == 'buttons')				{					foreach ($langs as $language)					{						$template->assign_block_vars('category.images', array(							'SELECTED'			=> ($img == $imgname && $language == $imgnamelang),							'VALUE'				=> $img . '-' . $language,							'TEXT'				=> $user->lang['IMG_' . strtoupper($img)] . ' [ ' . $language . ' ]'						));					}				}				else				{					$template->assign_block_vars('category.images', array(						'SELECTED'			=> ($img == $imgname),						'VALUE'				=> $img,						'TEXT'				=> (($category == 'custom') ? $img : $user->lang['IMG_' . strtoupper($img)])					));				}			}		}		// Make sure the list of possible images is sorted alphabetically		sort($imagesetlist['lang']);		sort($imagesetlist['nolang']);		$image_found = false;		$img_val = '';		foreach ($imagesetlist as $type => $img_ary)		{			if ($type !== 'lang' || $sql_extra)			{				$template->assign_block_vars('imagesetlist', array(					'TYPE'	=> ($type == 'lang')				));			}			foreach ($img_ary as $img)			{				$imgtext = preg_replace('/^([^\/]+\/)/', '', $img);				$selected = (!empty($imgname) && strpos($image_filename, $imgtext) !== false);				if ($selected)				{					$image_found = true;					$img_val = htmlspecialchars($img);				}				$template->assign_block_vars('imagesetlist.images', array(					'SELECTED'			=> $selected,					'TEXT'				=> $imgtext,					'VALUE'				=> htmlspecialchars($img)				));			}		}		$imgsize_bool = (!empty($imgname) && $image_width && $image_height) ? true : false;		$image_request = '../styles/' . $imageset_path . '/imageset/' . ($image_lang ? $imgnamelang . '/' : '') . $image_filename;		$template->assign_vars(array(			'S_EDIT_IMAGESET'	=> true,			'L_TITLE'			=> $user->lang[$this->page_title],			'L_EXPLAIN'			=> $user->lang[$this->page_title . '_EXPLAIN'],			'IMAGE_OPTIONS'		=> $img_options,			'IMAGE_SIZE'		=> $image_width,			'IMAGE_HEIGHT'		=> $image_height,			'IMAGE_REQUEST'		=> (empty($image_filename)) ? 'images/no_image.png' : $image_request,			'U_ACTION'			=> $this->u_action . "&amp;action=edit&amp;id=$imageset_id",			'U_BACK'			=> $this->u_action,			'NAME'				=> $imageset_name,			'A_NAME'			=> addslashes($imageset_name),			'PATH'				=> $imageset_path,			'A_PATH'			=> addslashes($imageset_path),			'ERROR'				=> !$valid_name,			'IMG_SRC'			=> ($image_found) ? '../styles/' . $imageset_path . '/imageset/' . $img_val : 'images/no_image.png',			'IMAGE_SELECT'		=> $image_found		));	}	/**	* Remove style/template/theme/imageset	*/	function remove($mode, $style_id)	{		global $db, $template, $user, $phpbb_root_path, $cache, $config;		$new_id = request_var('new_id', 0);		$update = (isset($_POST['update'])) ? true : false;		$sql_where = '';		switch ($mode)		{			case 'style':				$sql_from = STYLES_TABLE;				$sql_select = 'style_id, style_name, template_id, theme_id, imageset_id';				$sql_where = 'AND style_active = 1';			break;			case 'template':				$sql_from = STYLES_TEMPLATE_TABLE;				$sql_select = 'template_id, template_name, template_path, template_storedb';			break;			case 'theme':				$sql_from = STYLES_THEME_TABLE;				$sql_select = 'theme_id, theme_name, theme_path, theme_storedb';			break;			case 'imageset':				$sql_from = STYLES_IMAGESET_TABLE;				$sql_select = 'imageset_id, imageset_name, imageset_path';			break;		}		if ($mode === 'template' && ($conflicts = $this->check_inheritance($mode, $style_id)))		{			$l_type = strtoupper($mode);			$msg = $user->lang[$l_type . '_DELETE_DEPENDENT'];			foreach ($conflicts as $id => $values)			{				$msg .= '<br />' . $values['template_name'];			}			trigger_error($msg . adm_back_link($this->u_action), E_USER_WARNING);		}		$l_prefix = strtoupper($mode);		$sql = "SELECT $sql_select			FROM $sql_from			WHERE {$mode}_id = $style_id";		$result = $db->sql_query($sql);		$style_row = $db->sql_fetchrow($result);		$db->sql_freeresult($result);		if (!$style_row)		{			trigger_error($user->lang['NO_' . $l_prefix] . adm_back_link($this->u_action), E_USER_WARNING);		}		$s_only_component = $this->display_component_options($mode, $style_row[$mode . '_id'], $style_row);		if ($s_only_component)		{			trigger_error($user->lang['ONLY_' . $l_prefix] . adm_back_link($this->u_action), E_USER_WARNING);		}		if ($update)		{			if ($mode == 'style')			{				$sql = "DELETE FROM $sql_from					WHERE {$mode}_id = $style_id";				$db->sql_query($sql);				$sql = 'UPDATE ' . USERS_TABLE . "					SET user_style = $new_id					WHERE user_style = $style_id";				$db->sql_query($sql);				$sql = 'UPDATE ' . FORUMS_TABLE . "					SET forum_style = $new_id					WHERE forum_style = $style_id";				$db->sql_query($sql);				if ($style_id == $config['default_style'])				{					set_config('default_style', $new_id);				}				// Remove the components				$components = array('template', 'theme', 'imageset');				foreach ($components as $component)				{					$new_id = request_var('new_' . $component . '_id', 0);					$component_id = $style_row[$component . '_id'];					$this->remove_component($component, $component_id, $new_id, $style_id);				}			}			else			{				$this->remove_component($mode, $style_id, $new_id);			}			$cache->destroy('sql', STYLES_TABLE);			add_log('admin', 'LOG_' . $l_prefix . '_DELETE', $style_row[$mode . '_name']);			$message = ($mode != 'style') ? $l_prefix . '_DELETED_FS' : $l_prefix . '_DELETED';			trigger_error($user->lang[$message] . adm_back_link($this->u_action));		}		$this->page_title = 'DELETE_' . $l_prefix;		$template->assign_vars(array(			'S_DELETE'			=> true,			'L_TITLE'			=> $user->lang[$this->page_title],			'L_EXPLAIN'			=> $user->lang[$this->page_title . '_EXPLAIN'],			'L_NAME'			=> $user->lang[$l_prefix . '_NAME'],			'L_REPLACE'			=> $user->lang['REPLACE_' . $l_prefix],			'L_REPLACE_EXPLAIN'	=> $user->lang['REPLACE_' . $l_prefix . '_EXPLAIN'],			'U_ACTION'		=> $this->u_action . "&amp;action=delete&amp;id=$style_id",			'U_BACK'		=> $this->u_action,			'NAME'			=> $style_row[$mode . '_name'],			)		);		if ($mode == 'style')		{			$template->assign_vars(array(				'S_DELETE_STYLE'		=> true,			));		}	}	/**	* Remove template/theme/imageset entry from the database	*/	function remove_component($component, $component_id, $new_id, $style_id = false)	{		global $db;		if (($new_id == 0) || ($component === 'template' && ($conflicts = $this->check_inheritance($component, $component_id))))		{			// We can not delete the template, as the user wants to keep the component or an other template is inheriting from this one.			return;		}		$component_in_use = array();		if ($component != 'style')		{			$component_in_use = $this->component_in_use($component, $component_id, $style_id);		}		if (($new_id == -1) && !empty($component_in_use))		{			// We can not delete the component, as it is still in use			return;		}		if ($component == 'imageset')		{			$sql = 'DELETE FROM ' . STYLES_IMAGESET_DATA_TABLE . "				WHERE imageset_id = $component_id";			$db->sql_query($sql);		}		switch ($component)		{			case 'template':				$sql_from = STYLES_TEMPLATE_TABLE;			break;			case 'theme':				$sql_from = STYLES_THEME_TABLE;			break;			case 'imageset':				$sql_from = STYLES_IMAGESET_TABLE;;			break;		}		$sql = "DELETE FROM $sql_from			WHERE {$component}_id = $component_id";		$db->sql_query($sql);		$sql = 'UPDATE ' . STYLES_TABLE . "			SET {$component}_id = $new_id			WHERE {$component}_id = $component_id";		$db->sql_query($sql);	}	/**	* Display the options which can be used to replace a style/template/theme/imageset	*	* @return boolean Returns true if the component is the only component and can not be deleted.	*/	function display_component_options($component, $component_id, $style_row = false, $style_id = false)	{		global $db, $template, $user;		$is_only_component = true;		$component_in_use = array();		if ($component != 'style')		{			$component_in_use = $this->component_in_use($component, $component_id, $style_id);		}		$sql_where = '';		switch ($component)		{			case 'style':				$sql_from = STYLES_TABLE;				$sql_where = 'WHERE style_active = 1';			break;			case 'template':				$sql_from = STYLES_TEMPLATE_TABLE;				$sql_where = 'WHERE template_inherits_id <> ' . $component_id;			break;			case 'theme':				$sql_from = STYLES_THEME_TABLE;			break;			case 'imageset':				$sql_from = STYLES_IMAGESET_TABLE;			break;		}		$s_options = '';		if (($component != 'style') && empty($component_in_use))		{			// If it is not in use, there must be another component			$is_only_component = false;			$sql = "SELECT {$component}_id, {$component}_name				FROM $sql_from				WHERE {$component}_id = {$component_id}";			$result = $db->sql_query($sql);			$row = $db->sql_fetchrow($result);			$db->sql_freeresult($result);			$s_options .= '<option value="-1" selected="selected">' . $user->lang['DELETE_' . strtoupper($component)] . '</option>';			$s_options .= '<option value="0">' . sprintf($user->lang['KEEP_' . strtoupper($component)], $row[$component . '_name']) . '</option>';		}		else		{			$sql = "SELECT {$component}_id, {$component}_name				FROM $sql_from				$sql_where				ORDER BY {$component}_name ASC";			$result = $db->sql_query($sql);			$s_keep_option = $s_options = '';			while ($row = $db->sql_fetchrow($result))			{				if ($row[$component . '_id'] != $component_id)				{					$is_only_component = false;					$s_options .= '<option value="' . $row[$component . '_id'] . '">' . sprintf($user->lang['REPLACE_WITH_OPTION'], $row[$component . '_name']) . '</option>';				}				else if ($component != 'style')				{					$s_keep_option = '<option value="0" selected="selected">' . sprintf($user->lang['KEEP_' . strtoupper($component)], $row[$component . '_name']) . '</option>';				}			}			$db->sql_freeresult($result);			$s_options = $s_keep_option . $s_options;		}		if (!$style_row)		{			$template->assign_var('S_REPLACE_' . strtoupper($component) . '_OPTIONS', $s_options);		}		else		{			$template->assign_var('S_REPLACE_OPTIONS', $s_options);			if ($component == 'style')			{				$components = array('template', 'theme', 'imageset');				foreach ($components as $component)				{					$this->display_component_options($component, $style_row[$component . '_id'], false, $component_id, true);				}			}		}		return $is_only_component;	}	/**	* Check whether the component is still used by another style or component	*/	function component_in_use($component, $component_id, $style_id = false)	{		global $db;		$component_in_use = array();		if ($style_id)		{			$sql = 'SELECT style_id, style_name				FROM ' . STYLES_TABLE . "				WHERE {$component}_id = {$component_id}					AND style_id <> {$style_id}				ORDER BY style_name ASC";		}		else		{			$sql = 'SELECT style_id, style_name				FROM ' . STYLES_TABLE . "				WHERE {$component}_id = {$component_id}				ORDER BY style_name ASC";		}		$result = $db->sql_query($sql);		while ($row = $db->sql_fetchrow($result))		{			$component_in_use[] = $row['style_name'];		}		$db->sql_freeresult($result);		if ($component === 'template' && ($conflicts = $this->check_inheritance($component, $component_id)))		{			foreach ($conflicts as $temp_id => $conflict_data)			{				$component_in_use[] = $conflict_data['template_name'];			}		}		return $component_in_use;	}	/**	* Export style or style elements	*/	function export($mode, $style_id)	{		global $db, $template, $user, $phpbb_root_path, $cache, $phpEx, $config;		$update = (isset($_POST['update'])) ? true : false;		$inc_template = request_var('inc_template', 0);		$inc_theme = request_var('inc_theme', 0);		$inc_imageset = request_var('inc_imageset', 0);		$store = request_var('store', 0);		$format = request_var('format', '');		$error = array();		$methods = array('tar');		$available_methods = array('tar.gz' => 'zlib', 'tar.bz2' => 'bz2', 'zip' => 'zlib');		foreach ($available_methods as $type => $module)		{			if (!@extension_loaded($module))			{				continue;			}			$methods[] = $type;		}		if (!in_array($format, $methods))		{			$format = 'tar';		}		switch ($mode)		{			case 'style':				if ($update && ($inc_template + $inc_theme + $inc_imageset) < 1)				{					$error[] = $user->lang['STYLE_ERR_MORE_ELEMENTS'];				}				$name = 'style_name';				$sql_select = 's.style_id, s.style_name, s.style_copyright';				$sql_select .= ($inc_template) ? ', t.*' : ', t.template_name';				$sql_select .= ($inc_theme) ? ', c.*' : ', c.theme_name';				$sql_select .= ($inc_imageset) ? ', i.*' : ', i.imageset_name';				$sql_from = STYLES_TABLE . ' s, ' . STYLES_TEMPLATE_TABLE . ' t, ' . STYLES_THEME_TABLE . ' c, ' . STYLES_IMAGESET_TABLE . ' i';				$sql_where = "s.style_id = $style_id AND t.template_id = s.template_id AND c.theme_id = s.theme_id AND i.imageset_id = s.imageset_id";				$l_prefix = 'STYLE';			break;			case 'template':				$name = 'template_name';				$sql_select = '*';				$sql_from = STYLES_TEMPLATE_TABLE;				$sql_where = "template_id = $style_id";				$l_prefix = 'TEMPLATE';			break;			case 'theme':				$name = 'theme_name';				$sql_select = '*';				$sql_from = STYLES_THEME_TABLE;				$sql_where = "theme_id = $style_id";				$l_prefix = 'THEME';			break;			case 'imageset':				$name = 'imageset_name';				$sql_select = '*';				$sql_from = STYLES_IMAGESET_TABLE;				$sql_where = "imageset_id = $style_id";				$l_prefix = 'IMAGESET';			break;		}		if ($update && !sizeof($error))		{			$sql = "SELECT $sql_select				FROM $sql_from				WHERE $sql_where";			$result = $db->sql_query($sql);			$style_row = $db->sql_fetchrow($result);			$db->sql_freeresult($result);			if (!$style_row)			{				trigger_error($user->lang['NO_' . $l_prefix] . adm_back_link($this->u_action), E_USER_WARNING);			}			$var_ary = array('style_id', 'style_name', 'style_copyright', 'template_id', 'template_name', 'template_path', 'template_copyright', 'template_storedb', 'template_inherits_id', 'bbcode_bitfield', 'theme_id', 'theme_name', 'theme_path', 'theme_copyright', 'theme_storedb', 'theme_mtime', 'theme_data', 'imageset_id', 'imageset_name', 'imageset_path', 'imageset_copyright');			foreach ($var_ary as $var)			{				if (!isset($style_row[$var]))				{					$style_row[$var] = '';				}			}			$files = $data = array();			if ($mode == 'style')			{				$style_cfg = str_replace(array('{MODE}', '{NAME}', '{COPYRIGHT}', '{VERSION}'), array($mode, $style_row['style_name'], $style_row['style_copyright'], $config['version']), $this->style_cfg);				$style_cfg .= (!$inc_template) ? "\nrequired_template = {$style_row['template_name']}" : '';				$style_cfg .= (!$inc_theme) ? "\nrequired_theme = {$style_row['theme_name']}" : '';				$style_cfg .= (!$inc_imageset) ? "\nrequired_imageset = {$style_row['imageset_name']}" : '';				$data[] = array(					'src'		=> $style_cfg,					'prefix'	=> 'style.cfg'				);				unset($style_cfg);			}			// Export template core code			if ($mode == 'template' || $inc_template)			{				$template_cfg = str_replace(array('{MODE}', '{NAME}', '{COPYRIGHT}', '{VERSION}'), array($mode, $style_row['template_name'], $style_row['template_copyright'], $config['version']), $this->template_cfg);				$use_template_name = '';				// Add the inherit from variable, depending on it's use...				if ($style_row['template_inherits_id'])				{					// Get the template name					$sql = 'SELECT template_name						FROM ' . STYLES_TEMPLATE_TABLE . '						WHERE template_id = ' . (int) $style_row['template_inherits_id'];					$result = $db->sql_query($sql);					$use_template_name = (string) $db->sql_fetchfield('template_name');					$db->sql_freeresult($result);				}				$template_cfg .= ($use_template_name) ? "\ninherit_from = $use_template_name" : "\n#inherit_from = ";				$template_cfg .= "\n\nbbcode_bitfield = {$style_row['bbcode_bitfield']}";				$data[] = array(					'src'		=> $template_cfg,					'prefix'	=> 'template/template.cfg'				);				// This is potentially nasty memory-wise ...				if (!$style_row['template_storedb'])				{					$files[] = array(						'src'		=> "styles/{$style_row['template_path']}/template/",						'prefix-'	=> "styles/{$style_row['template_path']}/",						'prefix+'	=> false,						'exclude'	=> 'template.cfg'					);				}				else				{					$sql = 'SELECT template_filename, template_data						FROM ' . STYLES_TEMPLATE_DATA_TABLE . "						WHERE template_id = {$style_row['template_id']}";					$result = $db->sql_query($sql);					while ($row = $db->sql_fetchrow($result))					{						$data[] = array(							'src' => $row['template_data'],							'prefix' => 'template/' . $row['template_filename']						);					}					$db->sql_freeresult($result);				}				unset($template_cfg);			}			// Export theme core code			if ($mode == 'theme' || $inc_theme)			{				$theme_cfg = str_replace(array('{MODE}', '{NAME}', '{COPYRIGHT}', '{VERSION}'), array($mode, $style_row['theme_name'], $style_row['theme_copyright'], $config['version']), $this->theme_cfg);				// Read old cfg file				$items = $cache->obtain_cfg_items($style_row);				$items = $items['theme'];				if (!isset($items['parse_css_file']))				{					$items['parse_css_file'] = 'off';				}				$theme_cfg = str_replace(array('{PARSE_CSS_FILE}'), array($items['parse_css_file']), $theme_cfg);				$files[] = array(					'src'		=> "styles/{$style_row['theme_path']}/theme/",					'prefix-'	=> "styles/{$style_row['theme_path']}/",					'prefix+'	=> false,					'exclude'	=> ($style_row['theme_storedb']) ? 'stylesheet.css,theme.cfg' : 'theme.cfg'				);				$data[] = array(					'src'		=> $theme_cfg,					'prefix'	=> 'theme/theme.cfg'				);				if ($style_row['theme_storedb'])				{					$data[] = array(						'src'		=> $style_row['theme_data'],						'prefix'	=> 'theme/stylesheet.css'					);				}				unset($items, $theme_cfg);			}			// Export imageset core code			if ($mode == 'imageset' || $inc_imageset)			{				$imageset_cfg = str_replace(array('{MODE}', '{NAME}', '{COPYRIGHT}', '{VERSION}'), array($mode, $style_row['imageset_name'], $style_row['imageset_copyright'], $config['version']), $this->imageset_cfg);				$imageset_main = array();				$sql = 'SELECT image_filename, image_name, image_height, image_width					FROM ' . STYLES_IMAGESET_DATA_TABLE . "					WHERE imageset_id = $style_id						AND image_lang = ''";				$result = $db->sql_query($sql);				while ($row = $db->sql_fetchrow($result))				{					$imageset_main[$row['image_name']] = $row['image_filename'] . ($row['image_height'] ? '*' . $row['image_height']: '') . ($row['image_width'] ? '*' . $row['image_width']: '');				}				$db->sql_freeresult($result);				foreach ($this->imageset_keys as $topic => $key_array)				{					foreach ($key_array as $key)					{						if (isset($imageset_main[$key]))						{							$imageset_cfg .= "\nimg_" . $key . ' = ' . str_replace("styles/{$style_row['imageset_path']}/imageset/", '{PATH}', $imageset_main[$key]);						}					}				}				$files[] = array(					'src'		=> "styles/{$style_row['imageset_path']}/imageset/",					'prefix-'	=> "styles/{$style_row['imageset_path']}/",					'prefix+'	=> false,					'exclude'	=> 'imageset.cfg'				);				$data[] = array(					'src'		=> trim($imageset_cfg),					'prefix'	=> 'imageset/imageset.cfg'				);				end($data);				$imageset_root = "{$phpbb_root_path}styles/{$style_row['imageset_path']}/imageset/";				if ($dh = @opendir($imageset_root))				{					while (($fname = readdir($dh)) !== false)					{						if ($fname[0] != '.' && $fname != 'CVS' && is_dir("$imageset_root$fname"))						{							$files[key($files)]['exclude'] .= ',' . $fname . '/imageset.cfg';						}					}					closedir($dh);				}				$imageset_lang = array();				$sql = 'SELECT image_filename, image_name, image_height, image_width, image_lang					FROM ' . STYLES_IMAGESET_DATA_TABLE . "					WHERE imageset_id = $style_id						AND image_lang <> ''";				$result = $db->sql_query($sql);				while ($row = $db->sql_fetchrow($result))				{					$imageset_lang[$row['image_lang']][$row['image_name']] = $row['image_filename'] . ($row['image_height'] ? '*' . $row['image_height']: '') . ($row['image_width'] ? '*' . $row['image_width']: '');				}				$db->sql_freeresult($result);				foreach ($imageset_lang as $lang => $imageset_localized)				{					$imageset_cfg = str_replace(array('{MODE}', '{NAME}', '{COPYRIGHT}', '{VERSION}'), array($mode, $style_row['imageset_name'], $style_row['imageset_copyright'], $config['version']), $this->imageset_cfg);					foreach ($this->imageset_keys as $topic => $key_array)					{						foreach ($key_array as $key)						{							if (isset($imageset_localized[$key]))							{								$imageset_cfg .= "\nimg_" . $key . ' = ' . str_replace("styles/{$style_row['imageset_path']}/imageset/", '{PATH}', $imageset_localized[$key]);							}						}					}					$data[] = array(						'src'		=> trim($imageset_cfg),						'prefix'	=> 'imageset/' . $lang . '/imageset.cfg'					);				}				unset($imageset_cfg);			}			switch ($format)			{				case 'tar':					$ext = '.tar';				break;				case 'zip':					$ext = '.zip';				break;				case 'tar.gz':					$ext = '.tar.gz';				break;				case 'tar.bz2':					$ext = '.tar.bz2';				break;				default:					$error[] = $user->lang[$l_prefix . '_ERR_ARCHIVE'];			}			if (!sizeof($error))			{				include($phpbb_root_path . 'includes/functions_compress.' . $phpEx);				if ($mode == 'style')				{					$path = preg_replace('#[^\w-]+#', '_', $style_row['style_name']);				}				else				{					$path = $style_row[$mode . '_path'];				}				if ($format == 'zip')				{					$compress = new compress_zip('w', $phpbb_root_path . "store/$path$ext");				}				else				{					$compress = new compress_tar('w', $phpbb_root_path . "store/$path$ext", $ext);				}				if (sizeof($files))				{					foreach ($files as $file_ary)					{						$compress->add_file($file_ary['src'], $file_ary['prefix-'], $file_ary['prefix+'], $file_ary['exclude']);					}				}				if (sizeof($data))				{					foreach ($data as $data_ary)					{						$compress->add_data($data_ary['src'], $data_ary['prefix']);					}				}				$compress->close();				add_log('admin', 'LOG_' . $l_prefix . '_EXPORT', $style_row[$mode . '_name']);				if (!$store)				{					$compress->download($path);					@unlink("{$phpbb_root_path}store/$path$ext");					exit;				}				trigger_error(sprintf($user->lang[$l_prefix . '_EXPORTED'], "store/$path$ext") . adm_back_link($this->u_action));			}		}		$sql = "SELECT {$mode}_id, {$mode}_name			FROM " . (($mode == 'style') ? STYLES_TABLE : $sql_from) . "			WHERE {$mode}_id = $style_id";		$result = $db->sql_query($sql);		$style_row = $db->sql_fetchrow($result);		$db->sql_freeresult($result);		if (!$style_row)		{			trigger_error($user->lang['NO_' . $l_prefix] . adm_back_link($this->u_action), E_USER_WARNING);		}		$this->page_title = $l_prefix . '_EXPORT';		$format_buttons = '';		foreach ($methods as $method)		{			$format_buttons .= '<label><input type="radio"' . ((!$format_buttons) ? ' id="format"' : '') . ' class="radio" value="' . $method . '" name="format"' . (($method == $format) ? ' checked="checked"' : '') . ' /> ' . $method . '</label>';		}		$template->assign_vars(array(			'S_EXPORT'		=> true,			'S_ERROR_MSG'	=> (sizeof($error)) ? true : false,			'S_STYLE'		=> ($mode == 'style') ? true : false,			'L_TITLE'		=> $user->lang[$this->page_title],			'L_EXPLAIN'		=> $user->lang[$this->page_title . '_EXPLAIN'],			'L_NAME'		=> $user->lang[$l_prefix . '_NAME'],			'U_ACTION'		=> $this->u_action . '&amp;action=export&amp;id=' . $style_id,			'U_BACK'		=> $this->u_action,			'ERROR_MSG'			=> (sizeof($error)) ? implode('<br />', $error) : '',			'NAME'				=> $style_row[$mode . '_name'],			'FORMAT_BUTTONS'	=> $format_buttons)		);	}	/**	* Display details	*/	function details($mode, $style_id)	{		global $template, $db, $config, $user, $safe_mode, $cache, $phpbb_root_path;		$update = (isset($_POST['update'])) ? true : false;		$l_type = strtoupper($mode);		$error = array();		$element_ary = array('template' => STYLES_TEMPLATE_TABLE, 'theme' => STYLES_THEME_TABLE, 'imageset' => STYLES_IMAGESET_TABLE);		switch ($mode)		{			case 'style':				$sql_from = STYLES_TABLE;			break;			case 'template':				$sql_from = STYLES_TEMPLATE_TABLE;			break;			case 'theme':				$sql_from = STYLES_THEME_TABLE;			break;			case 'imageset':				$sql_from = STYLES_IMAGESET_TABLE;			break;		}		$sql = "SELECT *			FROM $sql_from			WHERE {$mode}_id = $style_id";		$result = $db->sql_query($sql);		$style_row = $db->sql_fetchrow($result);		$db->sql_freeresult($result);		if (!$style_row)		{			trigger_error($user->lang['NO_' . $l_type] . adm_back_link($this->u_action), E_USER_WARNING);		}		$style_row['style_default'] = ($mode == 'style' && $config['default_style'] == $style_id) ? 1 : 0;		if ($update)		{			$name = utf8_normalize_nfc(request_var('name', '', true));			$copyright = utf8_normalize_nfc(request_var('copyright', '', true));			$template_id = request_var('template_id', 0);			$theme_id = request_var('theme_id', 0);			$imageset_id = request_var('imageset_id', 0);			$style_active = request_var('style_active', 0);			$style_default = request_var('style_default', 0);			$store_db = request_var('store_db', 0);			// If the admin selected the style to be the default style, but forgot to activate it... we will do it for him			if ($style_default)			{				$style_active = 1;			}			$sql = "SELECT {$mode}_id, {$mode}_name				FROM $sql_from				WHERE {$mode}_id <> $style_id				AND LOWER({$mode}_name) = '" . $db->sql_escape(strtolower($name)) . "'";			$result = $db->sql_query($sql);			$conflict = $db->sql_fetchrow($result);			$db->sql_freeresult($result);			if ($mode == 'style' && (!$template_id || !$theme_id || !$imageset_id))			{				$error[] = $user->lang['STYLE_ERR_NO_IDS'];			}			if ($mode == 'style' && $style_row['style_active'] && !$style_active && $config['default_style'] == $style_id)			{				$error[] = $user->lang['DEACTIVATE_DEFAULT'];			}			if (!$name || $conflict)			{				$error[] = $user->lang[$l_type . '_ERR_STYLE_NAME'];			}			if ($mode === 'theme' || $mode === 'template')			{				// a rather elaborate check we have to do here once to avoid trouble later				$check = "{$phpbb_root_path}styles/" . $style_row["{$mode}_path"] . (($mode === 'theme') ? '/theme/stylesheet.css' : '/template');				if (($style_row["{$mode}_storedb"] != $store_db) && !$store_db && ($safe_mode || !phpbb_is_writable($check)))				{					$error[] = $user->lang['EDIT_' . strtoupper($mode) . '_STORED_DB'];					$store_db = 1;				}				// themes which have to be parsed have to go into db				if ($mode == 'theme')				{					$cfg = parse_cfg_file("{$phpbb_root_path}styles/" . $style_row["{$mode}_path"] . "/theme/theme.cfg");					if (isset($cfg['parse_css_file']) && $cfg['parse_css_file'] && !$store_db)					{						$error[] = $user->lang['EDIT_THEME_STORE_PARSED'];						$store_db = 1;					}				}			}			if (!sizeof($error))			{				// Check length settings				if (utf8_strlen($name) > 30)				{					$error[] = $user->lang[$l_type . '_ERR_NAME_LONG'];				}				if (utf8_strlen($copyright) > 60)				{					$error[] = $user->lang[$l_type . '_ERR_COPY_LONG'];				}			}		}		if ($update && sizeof($error))		{			$style_row = array_merge($style_row, array(				'template_id'			=> $template_id,				'theme_id'				=> $theme_id,				'imageset_id'			=> $imageset_id,				'style_active'			=> $style_active,				$mode . '_storedb'		=> $store_db,				$mode . '_name'			=> $name,				$mode . '_copyright'	=> $copyright)			);		}		// User has submitted form and no errors have occurred		if ($update && !sizeof($error))		{			$sql_ary = array(				$mode . '_name'			=> $name,				$mode . '_copyright'	=> $copyright			);			switch ($mode)			{				case 'style':					$sql_ary += array(						'template_id'		=> (int) $template_id,						'theme_id'			=> (int) $theme_id,						'imageset_id'		=> (int) $imageset_id,						'style_active'		=> (int) $style_active,					);				break;				case 'imageset':				break;				case 'theme':					if ($style_row['theme_storedb'] != $store_db)					{						$theme_data = '';						if (!$style_row['theme_storedb'])						{							$theme_data = $this->db_theme_data($style_row);						}						else if (!$store_db && !$safe_mode && phpbb_is_writable("{$phpbb_root_path}styles/{$style_row['theme_path']}/theme/stylesheet.css"))						{							$store_db = 1;							$theme_data = $style_row['theme_data'];							if ($fp = @fopen("{$phpbb_root_path}styles/{$style_row['theme_path']}/theme/stylesheet.css", 'wb'))							{								$store_db = (@fwrite($fp, str_replace("styles/{$style_row['theme_path']}/theme/", './', $theme_data))) ? 0 : 1;							}							fclose($fp);						}						$sql_ary += array(							'theme_mtime'	=> ($store_db) ? filemtime("{$phpbb_root_path}styles/{$style_row['theme_path']}/theme/stylesheet.css") : 0,							'theme_storedb'	=> $store_db,							'theme_data'	=> ($store_db) ? $theme_data : '',						);					}				break;				case 'template':					if ($style_row['template_storedb'] != $store_db)					{						if ($super = $this->get_super($mode, $style_row['template_id']))						{							$error[] = (sprintf($user->lang["{$l_type}_INHERITS"], $super['template_name']));							$sql_ary = array();						}						else						{							if (!$store_db && !$safe_mode && phpbb_is_writable("{$phpbb_root_path}styles/{$style_row['template_path']}/template"))							{								$err = $this->store_in_fs('template', $style_row['template_id']);								if ($err)								{									$error += $err;								}							}							else if ($store_db)							{								$this->store_in_db('template', $style_row['template_id']);							}							else							{								// We no longer store within the db, but are also not able to update the file structure								// Since the admin want to switch this, we adhere to his decision. But we also need to remove the cache								$sql = 'DELETE FROM ' . STYLES_TEMPLATE_DATA_TABLE . "									WHERE template_id = $style_id";								$db->sql_query($sql);							}							$sql_ary += array(								'template_storedb'	=> $store_db,							);						}					}				break;			}			if (sizeof($sql_ary))			{				$sql = "UPDATE $sql_from					SET " . $db->sql_build_array('UPDATE', $sql_ary) . "					WHERE {$mode}_id = $style_id";				$db->sql_query($sql);				// Making this the default style?				if ($mode == 'style' && $style_default)				{					set_config('default_style', $style_id);				}			}			$cache->destroy('sql', STYLES_TABLE);			add_log('admin', 'LOG_' . $l_type . '_EDIT_DETAILS', $name);			if (sizeof($error))			{				trigger_error(implode('<br />', $error) . adm_back_link($this->u_action), E_USER_WARNING);			}			else			{				trigger_error($user->lang[$l_type . '_DETAILS_UPDATED'] . adm_back_link($this->u_action));			}		}		if ($mode == 'style')		{			foreach ($element_ary as $element => $table)			{				$sql = "SELECT {$element}_id, {$element}_name					FROM $table					ORDER BY {$element}_id ASC";				$result = $db->sql_query($sql);				${$element . '_options'} = '';				while ($row = $db->sql_fetchrow($result))				{					$selected = ($row[$element . '_id'] == $style_row[$element . '_id']) ? ' selected="selected"' : '';					${$element . '_options'} .= '<option value="' . $row[$element . '_id'] . '"' . $selected . '>' . $row[$element . '_name'] . '</option>';				}				$db->sql_freeresult($result);			}		}		if ($mode == 'template')		{			$super = array();			if (isset($style_row[$mode . '_inherits_id']) && $style_row['template_inherits_id'])			{				$super = $this->get_super($mode, $style_row['template_id']);			}		}		$this->page_title = 'EDIT_DETAILS_' . $l_type;		$template->assign_vars(array(			'S_DETAILS'				=> true,			'S_ERROR_MSG'			=> (sizeof($error)) ? true : false,			'S_STYLE'				=> ($mode == 'style') ? true : false,			'S_TEMPLATE'			=> ($mode == 'template') ? true : false,			'S_THEME'				=> ($mode == 'theme') ? true : false,			'S_IMAGESET'			=> ($mode == 'imageset') ? true : false,			'S_STORE_DB'			=> (isset($style_row[$mode . '_storedb'])) ? $style_row[$mode . '_storedb'] : 0,			'S_STORE_DB_DISABLED'	=> (isset($style_row[$mode . '_inherits_id'])) ? $style_row[$mode . '_inherits_id'] : 0,			'S_STYLE_ACTIVE'		=> (isset($style_row['style_active'])) ? $style_row['style_active'] : 0,			'S_STYLE_DEFAULT'		=> (isset($style_row['style_default'])) ? $style_row['style_default'] : 0,			'S_SUPERTEMPLATE'		=> (isset($style_row[$mode . '_inherits_id']) && $style_row[$mode . '_inherits_id']) ? $super['template_name'] : 0,			'S_TEMPLATE_OPTIONS'	=> ($mode == 'style') ? $template_options : '',			'S_THEME_OPTIONS'		=> ($mode == 'style') ? $theme_options : '',			'S_IMAGESET_OPTIONS'	=> ($mode == 'style') ? $imageset_options : '',			'U_ACTION'		=> $this->u_action . '&amp;action=details&amp;id=' . $style_id,			'U_BACK'		=> $this->u_action,			'L_TITLE'				=> $user->lang[$this->page_title],			'L_EXPLAIN'				=> $user->lang[$this->page_title . '_EXPLAIN'],			'L_NAME'				=> $user->lang[$l_type . '_NAME'],			'L_LOCATION'			=> ($mode == 'template' || $mode == 'theme') ? $user->lang[$l_type . '_LOCATION'] : '',			'L_LOCATION_EXPLAIN'	=> ($mode == 'template' || $mode == 'theme') ? $user->lang[$l_type . '_LOCATION_EXPLAIN'] : '',			'ERROR_MSG'		=> (sizeof($error)) ? implode('<br />', $error) : '',			'NAME'			=> $style_row[$mode . '_name'],			'COPYRIGHT'		=> $style_row[$mode . '_copyright'],			)		);	}	/**	* Load css file contents	*/	function load_css_file($path, $filename)	{		global $phpbb_root_path;		$file = "{$phpbb_root_path}styles/$path/theme/$filename";		if (file_exists($file) && ($content = file_get_contents($file)))		{			$content = trim($content);		}		else		{			$content = '';		}		if (defined('DEBUG'))		{			$content = "/* BEGIN @include $filename */ \n $content \n /* END @include $filename */ \n";		}		return $content;	}	/**	* Returns a string containing the value that should be used for the theme_data column in the theme database table.	* Includes contents of files loaded via @import	*	* @param array $theme_row is an associative array containing the theme's current database entry	* @param mixed $stylesheet can either be the new content for the stylesheet or false to load from the standard file	* @param string $root_path should only be used in case you want to use a different root path than "{$phpbb_root_path}styles/{$theme_row['theme_path']}"	*	* @return string Stylesheet data for theme_data column in the theme table	*/	function db_theme_data($theme_row, $stylesheet = false, $root_path = '')	{		global $phpbb_root_path;		if (!$root_path)		{			$root_path = $phpbb_root_path . 'styles/' . $theme_row['theme_path'];		}		if (!$stylesheet)		{			$stylesheet = '';			if (file_exists($root_path . '/theme/stylesheet.css'))			{				$stylesheet = file_get_contents($root_path . '/theme/stylesheet.css');			}		}		// Match CSS imports		$matches = array();		preg_match_all('/@import url\((["\'])(.*)\1\);/i', $stylesheet, $matches);		// remove commented stylesheets (very simple parser, allows only whitespace		// around an @import statement)		preg_match_all('#/\*\s*@import url\((["\'])(.*)\1\);\s\*/#i', $stylesheet, $commented);		$matches[2] = array_diff($matches[2], $commented[2]);		if (sizeof($matches))		{			foreach ($matches[0] as $idx => $match)			{				if (isset($matches[2][$idx]))				{					$stylesheet = str_replace($match, acp_styles::load_css_file($theme_row['theme_path'], $matches[2][$idx]), $stylesheet);				}			}		}		// adjust paths		return str_replace('./', 'styles/' . $theme_row['theme_path'] . '/theme/', $stylesheet);	}	/**	* Store template files into db	*/	function store_templates($mode, $style_id, $template_path, $filelist)	{		global $phpbb_root_path, $phpEx, $db;		$template_path = $template_path . '/template/';		$includes = array();		foreach ($filelist as $pathfile => $file_ary)		{			foreach ($file_ary as $file)			{				if (!($fp = @fopen("{$phpbb_root_path}styles/$template_path$pathfile$file", 'r')))				{					trigger_error("Could not open {$phpbb_root_path}styles/$template_path$pathfile$file", E_USER_ERROR);				}				$filesize = filesize("{$phpbb_root_path}styles/$template_path$pathfile$file");				if ($filesize)				{					$template_data = fread($fp, $filesize);				}				fclose($fp);				if (!$filesize)				{					// File is empty					continue;				}				if (preg_match_all('#<!-- INCLUDE (.*?\.html) -->#is', $template_data, $matches))				{					foreach ($matches[1] as $match)					{						$includes[trim($match)][] = $file;					}				}			}		}		foreach ($filelist as $pathfile => $file_ary)		{			foreach ($file_ary as $file)			{				// Skip index.				if (strpos($file, 'index.') === 0)				{					continue;				}				// We could do this using extended inserts ... but that could be one				// heck of a lot of data ...				$sql_ary = array(					'template_id'			=> (int) $style_id,					'template_filename'		=> "$pathfile$file",					'template_included'		=> (isset($includes[$file])) ? implode(':', $includes[$file]) . ':' : '',					'template_mtime'		=> (int) filemtime("{$phpbb_root_path}styles/$template_path$pathfile$file"),					'template_data'			=> (string) file_get_contents("{$phpbb_root_path}styles/$template_path$pathfile$file"),				);				if ($mode == 'insert')				{					$sql = 'INSERT INTO ' . STYLES_TEMPLATE_DATA_TABLE . ' ' . $db->sql_build_array('INSERT', $sql_ary);				}				else				{					$sql = 'UPDATE ' . STYLES_TEMPLATE_DATA_TABLE . ' SET ' . $db->sql_build_array('UPDATE', $sql_ary) . "						WHERE template_id = $style_id							AND template_filename = '" . $db->sql_escape("$pathfile$file") . "'";				}				$db->sql_query($sql);			}		}	}	/**	* Returns an array containing all template filenames for one template that are currently cached.	*	* @param string $template_path contains the name of the template's folder in /styles/	*	* @return array of filenames that exist in /styles/$template_path/template/ (without extension!)	*/	function template_cache_filelist($template_path)	{		global $phpbb_root_path, $phpEx, $user;		$cache_prefix = 'tpl_' . str_replace('_', '-', $template_path);		if (!($dp = @opendir("{$phpbb_root_path}cache")))		{			trigger_error($user->lang['TEMPLATE_ERR_CACHE_READ'] . adm_back_link($this->u_action), E_USER_WARNING);		}		$file_ary = array();		while ($file = readdir($dp))		{			if ($file[0] == '.')			{				continue;			}			if (is_file($phpbb_root_path . 'cache/' . $file) && (strpos($file, $cache_prefix) === 0))			{				$file_ary[] = str_replace('.', '/', preg_replace('#^' . preg_quote($cache_prefix, '#') . '_(.*?)\.html\.' . $phpEx . '$#i', '\1', $file));			}		}		closedir($dp);		return $file_ary;	}	/**	* Destroys cached versions of template files	*	* @param array $template_row contains the template's row in the STYLES_TEMPLATE_TABLE database table	* @param mixed $file_ary is optional and may contain an array of template file names which should be refreshed in the cache.	*	The file names should be the original template file names and not the cache file names.	*/	function clear_template_cache($template_row, $file_ary = false)	{		global $phpbb_root_path, $phpEx, $user;		$cache_prefix = 'tpl_' . str_replace('_', '-', $template_row['template_path']);		if (!$file_ary || !is_array($file_ary))		{			$file_ary = $this->template_cache_filelist($template_row['template_path']);			$log_file_list = $user->lang['ALL_FILES'];		}		else		{			$log_file_list = implode(', ', $file_ary);		}		foreach ($file_ary as $file)		{			$file = str_replace('/', '.', $file);			$file = "{$phpbb_root_path}cache/{$cache_prefix}_$file.html.$phpEx";			if (file_exists($file) && is_file($file))			{				@unlink($file);			}		}		unset($file_ary);		add_log('admin', 'LOG_TEMPLATE_CACHE_CLEARED', $template_row['template_name'], $log_file_list);	}	/**	* Install Style/Template/Theme/Imageset	*/	function install($mode)	{		global $phpbb_root_path, $phpEx, $config, $db, $cache, $user, $template;		$l_type = strtoupper($mode);		$error = $installcfg = $style_row = array();		$root_path = $cfg_file = '';		$element_ary = array('template' => STYLES_TEMPLATE_TABLE, 'theme' => STYLES_THEME_TABLE, 'imageset' => STYLES_IMAGESET_TABLE);		$install_path = request_var('path', '');		$update = (isset($_POST['update'])) ? true : false;		// Installing, obtain cfg file contents		if ($install_path)		{			$root_path = $phpbb_root_path . 'styles/' . $install_path . '/';			$cfg_file = ($mode == 'style') ? "$root_path$mode.cfg" : "$root_path$mode/$mode.cfg";			if (!file_exists($cfg_file))			{				$error[] = $user->lang[$l_type . '_ERR_NOT_' . $l_type];			}			else			{				$installcfg = parse_cfg_file($cfg_file);			}		}		// Installing		if (sizeof($installcfg))		{			$name		= $installcfg['name'];			$copyright	= $installcfg['copyright'];			$version	= $installcfg['version'];			$style_row = array(				$mode . '_id'			=> 0,				$mode . '_name'			=> '',				$mode . '_copyright'	=> ''			);			switch ($mode)			{				case 'style':					$style_row = array(						'style_id'			=> 0,						'style_name'		=> $installcfg['name'],						'style_copyright'	=> $installcfg['copyright']					);					$reqd_template = (isset($installcfg['required_template'])) ? $installcfg['required_template'] : false;					$reqd_theme = (isset($installcfg['required_theme'])) ? $installcfg['required_theme'] : false;					$reqd_imageset = (isset($installcfg['required_imageset'])) ? $installcfg['required_imageset'] : false;					// Check to see if each element is already installed, if it is grab the id					foreach ($element_ary as $element => $table)					{						$style_row = array_merge($style_row, array(							$element . '_id'			=> 0,							$element . '_name'			=> '',							$element . '_copyright'		=> '')						);			 			$this->test_installed($element, $error, (${'reqd_' . $element}) ? $phpbb_root_path . 'styles/' . $reqd_template . '/' : $root_path, ${'reqd_' . $element}, $style_row[$element . '_id'], $style_row[$element . '_name'], $style_row[$element . '_copyright']);						if (!$style_row[$element . '_name'])						{							$style_row[$element . '_name'] = $reqd_template;						}						// Merge other information to installcfg... if present						$cfg_file = $phpbb_root_path . 'styles/' . $install_path . '/' . $element . '/' . $element . '.cfg';						if (file_exists($cfg_file))						{							$cfg_contents = parse_cfg_file($cfg_file);							// Merge only specific things. We may need them later.							foreach (array('inherit_from', 'parse_css_file') as $key)							{								if (!empty($cfg_contents[$key]) && !isset($installcfg[$key]))								{									$installcfg[$key] = $cfg_contents[$key];								}							}						}					}				break;				case 'template':					$this->test_installed('template', $error, $root_path, false, $style_row['template_id'], $style_row['template_name'], $style_row['template_copyright']);				break;				case 'theme':					$this->test_installed('theme', $error, $root_path, false, $style_row['theme_id'], $style_row['theme_name'], $style_row['theme_copyright']);				break;				case 'imageset':					$this->test_installed('imageset', $error, $root_path, false, $style_row['imageset_id'], $style_row['imageset_name'], $style_row['imageset_copyright']);				break;			}		}		else		{			trigger_error($user->lang['NO_' . $l_type] . adm_back_link($this->u_action), E_USER_WARNING);		}		$style_row['store_db'] = request_var('store_db', 0);		$style_row['style_active'] = request_var('style_active', 1);		$style_row['style_default'] = request_var('style_default', 0);		// User has submitted form and no errors have occurred		if ($update && !sizeof($error))		{			if ($mode == 'style')			{				foreach ($element_ary as $element => $table)				{					${$element . '_root_path'} = (${'reqd_' . $element}) ? $phpbb_root_path . 'styles/' . ${'reqd_' . $element} . '/' : false;					${$element . '_path'} = (${'reqd_' . $element}) ? ${'reqd_' . $element} : false;				}				$this->install_style($error, 'install', $root_path, $style_row['style_id'], $style_row['style_name'], $install_path, $style_row['style_copyright'], $style_row['style_active'], $style_row['style_default'], $style_row, $template_root_path, $template_path, $theme_root_path, $theme_path, $imageset_root_path, $imageset_path);			}			else			{				$style_row['store_db'] = $this->install_element($mode, $error, 'install', $root_path, $style_row[$mode . '_id'], $style_row[$mode . '_name'], $install_path, $style_row[$mode . '_copyright'], $style_row['store_db']);			}			if (!sizeof($error))			{				$cache->destroy('sql', STYLES_TABLE);				$message = ($style_row['store_db']) ? '_ADDED_DB' : '_ADDED';				trigger_error($user->lang[$l_type . $message] . adm_back_link($this->u_action));			}		}		$this->page_title = 'INSTALL_' . $l_type;		$template->assign_vars(array(			'S_DETAILS'			=> true,			'S_INSTALL'			=> true,			'S_ERROR_MSG'		=> (sizeof($error)) ? true : false,			'S_LOCATION'		=> (isset($installcfg['inherit_from']) && $installcfg['inherit_from']) ? false : true,			'S_STYLE'			=> ($mode == 'style') ? true : false,			'S_TEMPLATE'		=> ($mode == 'template') ? true : false,			'S_SUPERTEMPLATE'	=> (isset($installcfg['inherit_from'])) ? $installcfg['inherit_from'] : '',			'S_THEME'			=> ($mode == 'theme') ? true : false,			'S_STORE_DB'			=> (isset($style_row[$mode . '_storedb'])) ? $style_row[$mode . '_storedb'] : 0,			'S_STYLE_ACTIVE'		=> (isset($style_row['style_active'])) ? $style_row['style_active'] : 0,			'S_STYLE_DEFAULT'		=> (isset($style_row['style_default'])) ? $style_row['style_default'] : 0,			'U_ACTION'			=> $this->u_action . "&amp;action=install&amp;path=" . urlencode($install_path),			'U_BACK'			=> $this->u_action,			'L_TITLE'				=> $user->lang[$this->page_title],			'L_EXPLAIN'				=> $user->lang[$this->page_title . '_EXPLAIN'],			'L_NAME'				=> $user->lang[$l_type . '_NAME'],			'L_LOCATION'			=> ($mode == 'template' || $mode == 'theme') ? $user->lang[$l_type . '_LOCATION'] : '',			'L_LOCATION_EXPLAIN'	=> ($mode == 'template' || $mode == 'theme') ? $user->lang[$l_type . '_LOCATION_EXPLAIN'] : '',			'ERROR_MSG'			=> (sizeof($error)) ? implode('<br />', $error) : '',			'NAME'				=> $style_row[$mode . '_name'],			'COPYRIGHT'			=> $style_row[$mode . '_copyright'],			'TEMPLATE_NAME'		=> ($mode == 'style') ? $style_row['template_name'] : '',			'THEME_NAME'		=> ($mode == 'style') ? $style_row['theme_name'] : '',			'IMAGESET_NAME'		=> ($mode == 'style') ? $style_row['imageset_name'] : '')		);	}	/**	* Add new style	*/	function add($mode)	{		global $phpbb_root_path, $phpEx, $config, $db, $cache, $user, $template;		$l_type = strtoupper($mode);		$element_ary = array('template' => STYLES_TEMPLATE_TABLE, 'theme' => STYLES_THEME_TABLE, 'imageset' => STYLES_IMAGESET_TABLE);		$error = array();		$style_row = array(			$mode . '_name'			=> utf8_normalize_nfc(request_var('name', '', true)),			$mode . '_copyright'	=> utf8_normalize_nfc(request_var('copyright', '', true)),			'template_id'			=> 0,			'theme_id'				=> 0,			'imageset_id'			=> 0,			'store_db'				=> request_var('store_db', 0),			'style_active'			=> request_var('style_active', 1),			'style_default'			=> request_var('style_default', 0),		);		$basis = request_var('basis', 0);		$update = (isset($_POST['update'])) ? true : false;		if ($basis)		{			switch ($mode)			{				case 'style':					$sql_select = 'template_id, theme_id, imageset_id';					$sql_from = STYLES_TABLE;				break;				case 'template':					$sql_select = 'template_id';					$sql_from = STYLES_TEMPLATE_TABLE;				break;				case 'theme':					$sql_select = 'theme_id';					$sql_from = STYLES_THEME_TABLE;				break;				case 'imageset':					$sql_select = 'imageset_id';					$sql_from = STYLES_IMAGESET_TABLE;				break;			}			$sql = "SELECT $sql_select				FROM $sql_from				WHERE {$mode}_id = $basis";			$result = $db->sql_query($sql);			$row = $db->sql_fetchrow($result);			$db->sql_freeresult($result);			if (!$row)			{				$error[] = $user->lang['NO_' . $l_type];			}			if (!sizeof($error))			{				$style_row['template_id']	= (isset($row['template_id'])) ? $row['template_id'] : $style_row['template_id'];				$style_row['theme_id']		= (isset($row['theme_id'])) ? $row['theme_id'] : $style_row['theme_id'];				$style_row['imageset_id']	= (isset($row['imageset_id'])) ? $row['imageset_id'] : $style_row['imageset_id'];			}		}		if ($update)		{			$style_row['template_id'] = request_var('template_id', $style_row['template_id']);			$style_row['theme_id'] = request_var('theme_id', $style_row['theme_id']);			$style_row['imageset_id'] = request_var('imageset_id', $style_row['imageset_id']);			if ($mode == 'style' && (!$style_row['template_id'] || !$style_row['theme_id'] || !$style_row['imageset_id']))			{				$error[] = $user->lang['STYLE_ERR_NO_IDS'];			}		}		// User has submitted form and no errors have occurred		if ($update && !sizeof($error))		{			if ($mode == 'style')			{				$style_row['style_id'] = 0;				$this->install_style($error, 'add', '', $style_row['style_id'], $style_row['style_name'], '', $style_row['style_copyright'], $style_row['style_active'], $style_row['style_default'], $style_row);			}			if (!sizeof($error))			{				$cache->destroy('sql', STYLES_TABLE);				$message = ($style_row['store_db']) ? '_ADDED_DB' : '_ADDED';				trigger_error($user->lang[$l_type . $message] . adm_back_link($this->u_action));			}		}		if ($mode == 'style')		{			foreach ($element_ary as $element => $table)			{				$sql = "SELECT {$element}_id, {$element}_name					FROM $table					ORDER BY {$element}_id ASC";				$result = $db->sql_query($sql);				${$element . '_options'} = '';				while ($row = $db->sql_fetchrow($result))				{					$selected = ($row[$element . '_id'] == $style_row[$element . '_id']) ? ' selected="selected"' : '';					${$element . '_options'} .= '<option value="' . $row[$element . '_id'] . '"' . $selected . '>' . $row[$element . '_name'] . '</option>';				}				$db->sql_freeresult($result);			}		}		$this->page_title = 'ADD_' . $l_type;		$template->assign_vars(array(			'S_DETAILS'			=> true,			'S_ADD'				=> true,			'S_ERROR_MSG'		=> (sizeof($error)) ? true : false,			'S_STYLE'			=> ($mode == 'style') ? true : false,			'S_TEMPLATE'		=> ($mode == 'template') ? true : false,			'S_THEME'			=> ($mode == 'theme') ? true : false,			'S_BASIS'			=> ($basis) ? true : false,			'S_STORE_DB'			=> (isset($style_row['storedb'])) ? $style_row['storedb'] : 0,			'S_STYLE_ACTIVE'		=> (isset($style_row['style_active'])) ? $style_row['style_active'] : 0,			'S_STYLE_DEFAULT'		=> (isset($style_row['style_default'])) ? $style_row['style_default'] : 0,			'S_TEMPLATE_OPTIONS'	=> ($mode == 'style') ? $template_options : '',			'S_THEME_OPTIONS'		=> ($mode == 'style') ? $theme_options : '',			'S_IMAGESET_OPTIONS'	=> ($mode == 'style') ? $imageset_options : '',			'U_ACTION'			=> $this->u_action . '&amp;action=add&amp;basis=' . $basis,			'U_BACK'			=> $this->u_action,			'L_TITLE'				=> $user->lang[$this->page_title],			'L_EXPLAIN'				=> $user->lang[$this->page_title . '_EXPLAIN'],			'L_NAME'				=> $user->lang[$l_type . '_NAME'],			'L_LOCATION'			=> ($mode == 'template' || $mode == 'theme') ? $user->lang[$l_type . '_LOCATION'] : '',			'L_LOCATION_EXPLAIN'	=> ($mode == 'template' || $mode == 'theme') ? $user->lang[$l_type . '_LOCATION_EXPLAIN'] : '',			'ERROR_MSG'			=> (sizeof($error)) ? implode('<br />', $error) : '',			'NAME'				=> $style_row[$mode . '_name'],			'COPYRIGHT'			=> $style_row[$mode . '_copyright'])		);	}	/**					$reqd_template = (isset($installcfg['required_template'])) ? $installcfg['required_template'] : false;					$reqd_theme = (isset($installcfg['required_theme'])) ? $installcfg['required_theme'] : false;					$reqd_imageset = (isset($installcfg['required_imageset'])) ? $installcfg['required_imageset'] : false;					// Check to see if each element is already installed, if it is grab the id					foreach ($element_ary as $element => $table)					{						$style_row = array_merge($style_row, array(							$element . '_id'			=> 0,							$element . '_name'			=> '',							$element . '_copyright'		=> '')						);			 			$this->test_installed($element, $error, $root_path, ${'reqd_' . $element}, $style_row[$element . '_id'], $style_row[$element . '_name'], $style_row[$element . '_copyright']);	* Is this element installed? If not, grab its cfg details	*/	function test_installed($element, &$error, $root_path, $reqd_name, &$id, &$name, &$copyright)	{		global $db, $user;		switch ($element)		{			case 'template':				$sql_from = STYLES_TEMPLATE_TABLE;			break;			case 'theme':				$sql_from = STYLES_THEME_TABLE;			break;			case 'imageset':				$sql_from = STYLES_IMAGESET_TABLE;			break;		}		$l_element = strtoupper($element);		$chk_name = ($reqd_name !== false) ? $reqd_name : $name;		$sql = "SELECT {$element}_id, {$element}_name			FROM $sql_from			WHERE {$element}_name = '" . $db->sql_escape($chk_name) . "'";		$result = $db->sql_query($sql);		if ($row = $db->sql_fetchrow($result))		{			$name = $row[$element . '_name'];			$id = $row[$element . '_id'];		}		else		{			if (!($cfg = @file("$root_path$element/$element.cfg")))			{				$error[] = sprintf($user->lang['REQUIRES_' . $l_element], $reqd_name);				return false;			}			$cfg = parse_cfg_file("$root_path$element/$element.cfg", $cfg);			$name = $cfg['name'];			$copyright = $cfg['copyright'];			$id = 0;			unset($cfg);		}		$db->sql_freeresult($result);	}	/**	* Install/Add style	*/	function install_style(&$error, $action, $root_path, &$id, $name, $path, $copyright, $active, $default, &$style_row, $template_root_path = false, $template_path = false, $theme_root_path = false, $theme_path = false, $imageset_root_path = false, $imageset_path = false)	{		global $config, $db, $user;		$element_ary = array('template', 'theme', 'imageset');		if (!$name)		{			$error[] = $user->lang['STYLE_ERR_STYLE_NAME'];		}		// Check length settings		if (utf8_strlen($name) > 30)		{			$error[] = $user->lang['STYLE_ERR_NAME_LONG'];		}		if (utf8_strlen($copyright) > 60)		{			$error[] = $user->lang['STYLE_ERR_COPY_LONG'];		}		// Check if the name already exist		$sql = 'SELECT style_id			FROM ' . STYLES_TABLE . "			WHERE style_name = '" . $db->sql_escape($name) . "'";		$result = $db->sql_query($sql);		$row = $db->sql_fetchrow($result);		$db->sql_freeresult($result);		if ($row)		{			$error[] = $user->lang['STYLE_ERR_NAME_EXIST'];		}		if (sizeof($error))		{			return false;		}		foreach ($element_ary as $element)		{			// Zero id value ... need to install element ... run usual checks			// and do the install if necessary			if (!$style_row[$element . '_id'])			{				$this->install_element($element, $error, $action, (${$element . '_root_path'}) ? ${$element . '_root_path'} : $root_path, $style_row[$element . '_id'], $style_row[$element . '_name'], (${$element . '_path'}) ? ${$element . '_path'} : $path, $style_row[$element . '_copyright']);			}		}		if (!$style_row['template_id'] || !$style_row['theme_id'] || !$style_row['imageset_id'])		{			$error[] = $user->lang['STYLE_ERR_NO_IDS'];		}		if (sizeof($error))		{			return false;		}		$db->sql_transaction('begin');		$sql_ary = array(			'style_name'		=> $name,			'style_copyright'	=> $copyright,			'style_active'		=> (int) $active,			'template_id'		=> (int) $style_row['template_id'],			'theme_id'			=> (int) $style_row['theme_id'],			'imageset_id'		=> (int) $style_row['imageset_id'],		);		$sql = 'INSERT INTO ' . STYLES_TABLE . '			' . $db->sql_build_array('INSERT', $sql_ary);		$db->sql_query($sql);		$id = $db->sql_nextid();		if ($default)		{			$sql = 'UPDATE ' . USERS_TABLE . "				SET user_style = $id				WHERE user_style = " . $config['default_style'];			$db->sql_query($sql);			set_config('default_style', $id);		}		$db->sql_transaction('commit');		add_log('admin', 'LOG_STYLE_ADD', $name);	}	/**	* Install/add an element, doing various checks as we go	*/	function install_element($mode, &$error, $action, $root_path, &$id, $name, $path, $copyright, $store_db = 0)	{		global $phpbb_root_path, $db, $user;		// we parse the cfg here (again)		$cfg_data = parse_cfg_file("$root_path$mode/$mode.cfg");		switch ($mode)		{			case 'template':				$sql_from = STYLES_TEMPLATE_TABLE;			break;			case 'theme':				$sql_from = STYLES_THEME_TABLE;			break;			case 'imageset':				$sql_from = STYLES_IMAGESET_TABLE;			break;		}		$l_type = strtoupper($mode);		if (!$name)		{			$error[] = $user->lang[$l_type . '_ERR_STYLE_NAME'];		}		// Check length settings		if (utf8_strlen($name) > 30)		{			$error[] = $user->lang[$l_type . '_ERR_NAME_LONG'];		}		if (utf8_strlen($copyright) > 60)		{			$error[] = $user->lang[$l_type . '_ERR_COPY_LONG'];		}		// Check if the name already exist		$sql = "SELECT {$mode}_id			FROM $sql_from			WHERE {$mode}_name = '" . $db->sql_escape($name) . "'";		$result = $db->sql_query($sql);		$row = $db->sql_fetchrow($result);		$db->sql_freeresult($result);		if ($row)		{			// If it exist, we just use the style on installation			if ($action == 'install')			{				$id = $row[$mode . '_id'];				return false;			}			$error[] = $user->lang[$l_type . '_ERR_NAME_EXIST'];		}		if (isset($cfg_data['inherit_from']) && $cfg_data['inherit_from'])		{			if ($mode === 'template')			{				$select_bf = ', bbcode_bitfield';			}			else			{				$select_bf = '';			}			$sql = "SELECT {$mode}_id, {$mode}_name, {$mode}_path, {$mode}_storedb $select_bf				FROM $sql_from				WHERE {$mode}_name = '" . $db->sql_escape($cfg_data['inherit_from']) . "'					AND {$mode}_inherits_id = 0";			$result = $db->sql_query($sql);			$row = $db->sql_fetchrow($result);			$db->sql_freeresult($result);			if (!$row)			{				$error[] = sprintf($user->lang[$l_type . '_ERR_REQUIRED_OR_INCOMPLETE'], $cfg_data['inherit_from']);			}			else			{				$inherit_id = $row["{$mode}_id"];				$inherit_path = $row["{$mode}_path"];				$inherit_bf = ($mode === 'template') ? $row["bbcode_bitfield"] : false;				$cfg_data['store_db'] = $row["{$mode}_storedb"];				$store_db = $row["{$mode}_storedb"];			}		}		else		{			$inherit_id = 0;			$inherit_path = '';			$inherit_bf = false;		}		if (sizeof($error))		{			return false;		}		$sql_ary = array(			$mode . '_name'			=> $name,			$mode . '_copyright'	=> $copyright,			$mode . '_path'			=> $path,		);		switch ($mode)		{			case 'template':				// We check if the template author defined a different bitfield				if (!empty($cfg_data['template_bitfield']))				{					$sql_ary['bbcode_bitfield'] = $cfg_data['template_bitfield'];				}				else if ($inherit_bf)				{					$sql_ary['bbcode_bitfield'] = $inherit_bf;				}				else				{					$sql_ary['bbcode_bitfield'] = TEMPLATE_BITFIELD;				}				// We set a pre-defined bitfield here which we may use further in 3.2				$sql_ary += array(					'template_storedb'		=> $store_db,				);				if (isset($cfg_data['inherit_from']) && $cfg_data['inherit_from'])				{					$sql_ary += array(						'template_inherits_id'	=> $inherit_id,						'template_inherit_path' => $inherit_path,					);				}			break;			case 'theme':				// We are only interested in the theme configuration for now				if (isset($cfg_data['parse_css_file']) && $cfg_data['parse_css_file'])				{					$store_db = 1;				}				$sql_ary += array(					'theme_storedb'	=> $store_db,					'theme_data'	=> ($store_db) ? $this->db_theme_data($sql_ary, false, $root_path) : '',					'theme_mtime'	=> (int) filemtime("{$phpbb_root_path}styles/$path/theme/stylesheet.css")				);			break;			// all the heavy lifting is done later			case 'imageset':			break;		}		$db->sql_transaction('begin');		$sql = "INSERT INTO $sql_from			" . $db->sql_build_array('INSERT', $sql_ary);		$db->sql_query($sql);		$id = $db->sql_nextid();		if ($mode == 'template' && $store_db)		{			$filelist = filelist("{$root_path}template", '', 'html');			$this->store_templates('insert', $id, $path, $filelist);		}		else if ($mode == 'imageset')		{			$cfg_data = parse_cfg_file("$root_path$mode/imageset.cfg");			$imageset_definitions = array();			foreach ($this->imageset_keys as $topic => $key_array)			{				$imageset_definitions = array_merge($imageset_definitions, $key_array);			}			foreach ($cfg_data as $key => $value)			{				if (strpos($value, '*') !== false)				{					if (substr($value, -1, 1) === '*')					{						list($image_filename, $image_height) = explode('*', $value);						$image_width = 0;					}					else					{						list($image_filename, $image_height, $image_width) = explode('*', $value);					}				}				else				{					$image_filename = $value;					$image_height = $image_width = 0;				}				if (strpos($key, 'img_') === 0 && $image_filename)				{					$key = substr($key, 4);					if (in_array($key, $imageset_definitions))					{						$sql_ary = array(							'image_name'		=> $key,							'image_filename'	=> str_replace('{PATH}', "styles/$path/imageset/", trim($image_filename)),							'image_height'		=> (int) $image_height,							'image_width'		=> (int) $image_width,							'imageset_id'		=> (int) $id,							'image_lang'		=> '',						);						$db->sql_query('INSERT INTO ' . STYLES_IMAGESET_DATA_TABLE . ' ' . $db->sql_build_array('INSERT', $sql_ary));					}				}			}			unset($cfg_data);			$sql = 'SELECT lang_dir				FROM ' . LANG_TABLE;			$result = $db->sql_query($sql);			while ($row = $db->sql_fetchrow($result))			{				if (@file_exists("$root_path$mode/{$row['lang_dir']}/imageset.cfg"))				{					$cfg_data_imageset_data = parse_cfg_file("$root_path$mode/{$row['lang_dir']}/imageset.cfg");					foreach ($cfg_data_imageset_data as $image_name => $value)					{						if (strpos($value, '*') !== false)						{							if (substr($value, -1, 1) === '*')							{								list($image_filename, $image_height) = explode('*', $value);								$image_width = 0;							}							else							{								list($image_filename, $image_height, $image_width) = explode('*', $value);							}						}						else						{							$image_filename = $value;							$image_height = $image_width = 0;						}						if (strpos($image_name, 'img_') === 0 && $image_filename)						{							$image_name = substr($image_name, 4);							if (in_array($image_name, $imageset_definitions))							{								$sql_ary = array(									'image_name'		=> $image_name,									'image_filename'	=> $image_filename,									'image_height'		=> (int) $image_height,									'image_width'		=> (int) $image_width,									'imageset_id'		=> (int) $id,									'image_lang'		=> $row['lang_dir'],								);								$db->sql_query('INSERT INTO ' . STYLES_IMAGESET_DATA_TABLE . ' ' . $db->sql_build_array('INSERT', $sql_ary));							}						}					}					unset($cfg_data_imageset_data);				}			}			$db->sql_freeresult($result);		}		$db->sql_transaction('commit');		$log = ($store_db) ? 'LOG_' . $l_type . '_ADD_DB' : 'LOG_' . $l_type . '_ADD_FS';		add_log('admin', $log, $name);		// Return store_db in case it had to be altered		return $store_db;	}	/**	* Checks downwards dependencies	*	* @access public	* @param string $mode The element type to check - only template is supported	* @param int $id The template id	* @returns false if no component inherits, array with name, path and id for each subtemplate otherwise	*/	function check_inheritance($mode, $id)	{		global $db;		$l_type = strtoupper($mode);		switch ($mode)		{			case 'template':				$sql_from = STYLES_TEMPLATE_TABLE;			break;			case 'theme':				$sql_from = STYLES_THEME_TABLE;			break;			case 'imageset':				$sql_from = STYLES_IMAGESET_TABLE;			break;		}		$sql = "SELECT {$mode}_id, {$mode}_name, {$mode}_path			FROM $sql_from			WHERE {$mode}_inherits_id = " . (int) $id;		$result = $db->sql_query($sql);		$names = array();		while ($row = $db->sql_fetchrow($result))		{			$names[$row["{$mode}_id"]] = array(				"{$mode}_id" => $row["{$mode}_id"],				"{$mode}_name" => $row["{$mode}_name"],				"{$mode}_path" => $row["{$mode}_path"],			);		}		$db->sql_freeresult($result);		if (sizeof($names))		{			return $names;		}		else		{			return false;		}	}	/**	* Checks upwards dependencies	*	* @access public	* @param string $mode The element type to check - only template is supported	* @param int $id The template id	* @returns false if the component does not inherit, array with name, path and id otherwise	*/	function get_super($mode, $id)	{		global $db;		$l_type = strtoupper($mode);		switch ($mode)		{			case 'template':				$sql_from = STYLES_TEMPLATE_TABLE;			break;			case 'theme':				$sql_from = STYLES_THEME_TABLE;			break;			case 'imageset':				$sql_from = STYLES_IMAGESET_TABLE;			break;		}		$sql = "SELECT {$mode}_inherits_id			FROM $sql_from			WHERE {$mode}_id = " . (int) $id;		$result = $db->sql_query_limit($sql, 1);		if ($row = $db->sql_fetchrow($result))		{			$db->sql_freeresult($result);		}		else		{			return false;		}		$super_id = $row["{$mode}_inherits_id"];		$sql = "SELECT {$mode}_id, {$mode}_name, {$mode}_path			FROM $sql_from			WHERE {$mode}_id = " . (int) $super_id;		$result = $db->sql_query_limit($sql, 1);		if ($row = $db->sql_fetchrow($result))		{			$db->sql_freeresult($result);			return $row;		}		return false;	}	/**	* Moves a template set and its subtemplates to the database	*	* @access public	* @param string $mode The component to move - only template is supported	* @param int $id The template id	*/	function store_in_db($mode, $id)	{		global $db, $user;		$error = array();		$l_type = strtoupper($mode);		if ($super = $this->get_super($mode, $id))		{			$error[] = (sprintf($user->lang["{$l_type}_INHERITS"], $super['template_name']));			return $error;		}		$sql = "SELECT {$mode}_id, {$mode}_name, {$mode}_path			FROM " . STYLES_TEMPLATE_TABLE . '			WHERE template_id = ' . (int) $id;		$result = $db->sql_query_limit($sql, 1);		if ($row = $db->sql_fetchrow($result))		{			$db->sql_freeresult($result);			$subs = $this->check_inheritance($mode, $id);			$this->_store_in_db($mode, $id, $row["{$mode}_path"]);			if ($subs && sizeof($subs))			{				foreach ($subs as $sub_id => $sub)				{					if ($err = $this->_store_in_db($mode, $sub["{$mode}_id"], $sub["{$mode}_path"]))					{						$error[] = $err;					}				}			}		}		if (sizeof($error))		{			return $error;		}		return false;	}	/**	* Moves a template set to the database	*	* @access private	* @param string $mode The component to move - only template is supported	* @param int $id The template id	* @param string $path TThe path to the template files	*/	function _store_in_db($mode, $id, $path)	{		global $phpbb_root_path, $db;		$filelist = filelist("{$phpbb_root_path}styles/{$path}/template", '', 'html');		$this->store_templates('insert', $id, $path, $filelist);		// Okay, we do the query here -shouldn't be triggered often.		$sql = 'UPDATE ' . STYLES_TEMPLATE_TABLE . '						SET template_storedb = 1						WHERE template_id = ' . $id;		$db->sql_query($sql);	}	/**	* Moves a template set and its subtemplates to the filesystem	*	* @access public	* @param string $mode The component to move - only template is supported	* @param int $id The template id	*/	function store_in_fs($mode, $id)	{		global $db, $user;		$error = array();		$l_type = strtoupper($mode);		if ($super = $this->get_super($mode, $id))		{			$error[] = (sprintf($user->lang["{$l_type}_INHERITS"], $super['template_name']));			return($error);		}		$sql = "SELECT {$mode}_id, {$mode}_name, {$mode}_path			FROM " . STYLES_TEMPLATE_TABLE . '			WHERE template_id = ' . (int) $id;		$result = $db->sql_query_limit($sql, 1);		if ($row = $db->sql_fetchrow($result))		{			$db->sql_freeresult($result);			if (!sizeof($error))			{				$subs = $this->check_inheritance($mode, $id);				$this->_store_in_fs($mode, $id, $row["{$mode}_path"]);				if ($subs && sizeof($subs))				{					foreach ($subs as $sub_id => $sub)					{						$this->_store_in_fs($mode, $sub["{$mode}_id"], $sub["{$mode}_path"]);					}				}			}			if (sizeof($error))			{				$this->store_in_db($id, $mode);				return $error;			}		}		return false;	}	/**	* Moves a template set to the filesystem	*	* @access private	* @param string $mode The component to move - only template is supported	* @param int $id The template id	* @param string $path The path to the template	*/	function _store_in_fs($mode, $id, $path)	{		global $phpbb_root_path, $db, $user, $safe_mode;		$store_db = 0;		$error = array();		if (!$safe_mode && phpbb_is_writable("{$phpbb_root_path}styles/{$path}/template"))		{			$sql = 'SELECT *					FROM ' . STYLES_TEMPLATE_DATA_TABLE . "					WHERE template_id = $id";			$result = $db->sql_query($sql);			while ($row = $db->sql_fetchrow($result))			{				if (!($fp = @fopen("{$phpbb_root_path}styles/{$path}/template/" . $row['template_filename'], 'wb')))				{					$store_db = 1;					$error[] = $user->lang['EDIT_TEMPLATE_STORED_DB'];					break;				}				fwrite($fp, $row['template_data']);				fclose($fp);			}			$db->sql_freeresult($result);			if (!$store_db)			{				$sql = 'DELETE FROM ' . STYLES_TEMPLATE_DATA_TABLE . "						WHERE template_id = $id";				$db->sql_query($sql);			}		}		if (sizeof($error))		{			return $error;		}		$sql = 'UPDATE ' . STYLES_TEMPLATE_TABLE . '				SET template_storedb = 0				WHERE template_id = ' . $id;		$db->sql_query($sql);		return false;	}}?>
