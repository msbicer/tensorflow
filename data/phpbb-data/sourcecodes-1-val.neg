<?php//// Security message://// This script is potentially dangerous.// Remove or comment the next line (die(".... ) to enable this script.// Do NOT FORGET to either remove this script or disable it after you have used it.//die("Please read the first lines of this script for instructions on how to enable it");// IP regular expressions$dec_octet = '(?:\d{1,2}|1\d\d|2[0-4]\d|25[0-5])';$h16 = '[\dA-F]{1,4}';$ipv4 = "(?:$dec_octet\.){3}$dec_octet";$ls32 = "(?:$h16:$h16|$ipv4)";$ipv6_construct = array(	array(false,	'',		'{6}',	$ls32),	array(false,	'::',	'{0,5}', "(?:$h16(?::$h16)?|$ipv4)"),	array('',		':',	'{4}',	$ls32),	array('{1,2}',	':',	'{3}',	$ls32),	array('{1,3}',	':',	'{2}',	$ls32),	array('{1,4}',	':',	'',		$ls32),	array('{1,5}',	':',	false,	$ls32),	array('{1,6}',	':',	false,	$h16),	array('{1,7}',	':',	false,	''),	array(false, '::', false, ''));$ipv6 = '(?:';foreach ($ipv6_construct as $ip_type){	$ipv6 .= '(?:';	if ($ip_type[0] !== false)	{		$ipv6 .= "(?:$h16:)" . $ip_type[0];	}	$ipv6 .= $ip_type[1];	if ($ip_type[2] !== false)	{		$ipv6 .= "(?:$h16:)" . $ip_type[2];	}	$ipv6 .= $ip_type[3] . ')|';}$ipv6 = substr($ipv6, 0, -1) . ')';echo 'IPv4: ' . $ipv4 . "<br />\nIPv6: " . $ipv6 . "<br />\n";// URL regular expressions$pct_encoded = "%[\dA-F]{2}";$unreserved = 'a-z0-9\-._~';$sub_delims = '!$&\'()*+,;=';$pchar = "(?:[$unreserved$sub_delims:@|]+|$pct_encoded)"; // rfc: no "|"$scheme = '[a-z][a-z\d+\-.]*';$reg_name = "(?:[$unreserved$sub_delims:@|]+|$pct_encoded)+"; // rfc: * instead of + and no "|" and no "@" and no ":" (included instead of userinfo)//$userinfo = "(?:(?:[$unreserved$sub_delims:]+|$pct_encoded))*";$ipv4_simple = '[0-9.]+';$ipv6_simple = '\[[a-z0-9.]+:[a-z0-9.]+:[a-z0-9.:]+\]';$host = "(?:$reg_name|$ipv4_simple|$ipv6_simple)";$port = '\d*';//$authority = "(?:$userinfo@)?$host(?::$port)?";$authority = "$host(?::$port)?";$segment = "$pchar*";$path_abempty = "(?:/$segment)*";$hier_part = "/{2}$authority$path_abempty";$query = "(?:[$unreserved$sub_delims:@/?|]+|$pct_encoded)*"; // pchar | "/" | "?", rfc: no "|"$fragment = $query;$url =  "$scheme:$hier_part(?:\?$query)?(?:\#$fragment)?";echo 'URL: ' . $url . "<br />\n";// no scheme, shortened authority, but host has to start with www.$www_url =  "www\.$reg_name(?::$port)?$path_abempty(?:\?$query)?(?:\#$fragment)?";echo 'www.URL: ' . $www_url . "<br />\n";// no schema and no authority$relative_url = "$segment$path_abempty(?:\?$query)?(?:\#$fragment)?";echo 'relative URL: ' . $relative_url . "<br />\n";?>
<?php/**** acp_prune [English]** @package language* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** DO NOT CHANGE*/if (!defined('IN_PHPBB')){	exit;}if (empty($lang) || !is_array($lang)){	$lang = array();}// DEVELOPERS PLEASE NOTE//// All language files should use UTF-8 as their encoding and the files must not contain a BOM.//// Placeholders can now contain order information, e.g. instead of// 'Page %s of %s' you can (and should) write 'Page %1$s of %2$s', this allows// translators to re-order the output of data while ensuring it remains correct//// You do not need this where single placeholders are used, e.g. 'Message %d' is fine// equally where a string contains only two placeholders which are used to wrap text// in a url you again do not need to specify an order e.g., 'Click %sHERE%s' is fine// User pruning$lang = array_merge($lang, array(	'ACP_PRUNE_USERS_EXPLAIN'	=> 'This section allows you to delete or deactivate users on your board. Accounts can be filtered in a variety of ways; by post count, most recent activity, etc. Criteria may be combined to narrow down which accounts are affected. For example, you can prune users with fewer than 10 posts, who were also inactive after 2002-01-01. Alternatively, you may skip the criteria selection completely by entering a list of users (each on a separate line) into the text field. Take care with this facility! Once a user is deleted, there is no way to reverse the action.',	'DEACTIVATE_DELETE'			=> 'Deactivate or delete',	'DEACTIVATE_DELETE_EXPLAIN'	=> 'Choose whether to deactivate users or delete them entirely. Please note that deleted users cannot be restored!',	'DELETE_USERS'				=> 'Delete',	'DELETE_USER_POSTS'			=> 'Delete pruned user posts',	'DELETE_USER_POSTS_EXPLAIN' => 'Removes posts made by deleted users, has no effect if users are deactivated.',	'JOINED_EXPLAIN'			=> 'Enter a date in <kbd>YYYY-MM-DD</kbd> format.',	'LAST_ACTIVE_EXPLAIN'		=> 'Enter a date in <kbd>YYYY-MM-DD</kbd> format. Enter <kbd>0000-00-00</kbd> to prune users who never logged in, <em>Before</em> and <em>After</em> conditions will be ignored.',	'PRUNE_USERS_LIST'				=> 'Users to be pruned',	'PRUNE_USERS_LIST_DELETE'		=> 'With the selected critera for pruning users the following accounts will be removed.',	'PRUNE_USERS_LIST_DEACTIVATE'	=> 'With the selected critera for pruning users the following accounts will be deactivated.',	'SELECT_USERS_EXPLAIN'		=> 'Enter specific usernames here, they will be used in preference to the criteria above. Founders cannot be pruned.',	'USER_DEACTIVATE_SUCCESS'	=> 'The selected users have been deactivated successfully.',	'USER_DELETE_SUCCESS'		=> 'The selected users have been deleted successfully.',	'USER_PRUNE_FAILURE'		=> 'No users fit the selected criteria.',	'WRONG_ACTIVE_JOINED_DATE'	=> 'The date entered is wrong, it is expected in <kbd>YYYY-MM-DD</kbd> format.',));// Forum Pruning$lang = array_merge($lang, array(	'ACP_PRUNE_FORUMS_EXPLAIN'	=> 'This will delete any topic which has not been posted to or viewed within the number of days you select. If you do not enter a number then all topics will be deleted. By default, it will not remove topics in which polls are still running nor will it remove stickies and announcements.',	'FORUM_PRUNE'		=> 'Forum prune',	'NO_PRUNE'			=> 'No forums pruned.',	'SELECTED_FORUM'	=> 'Selected forum',	'SELECTED_FORUMS'	=> 'Selected forums',	'POSTS_PRUNED'					=> 'Posts pruned',	'PRUNE_ANNOUNCEMENTS'			=> 'Prune announcements',	'PRUNE_FINISHED_POLLS'			=> 'Prune closed polls',	'PRUNE_FINISHED_POLLS_EXPLAIN'	=> 'Removes topics with polls which have ended.',	'PRUNE_FORUM_CONFIRM'			=> 'Are you sure you want to prune the selected forums with the settings specified? Once removed, there is no way to recover the pruned posts and topics.',	'PRUNE_NOT_POSTED'				=> 'Days since last posted',	'PRUNE_NOT_VIEWED'				=> 'Days since last viewed',	'PRUNE_OLD_POLLS'				=> 'Prune old polls',	'PRUNE_OLD_POLLS_EXPLAIN'		=> 'Removes topics with polls not voted in for post age days.',	'PRUNE_STICKY'					=> 'Prune stickies',	'PRUNE_SUCCESS'					=> 'Pruning of forums was successful.',	'TOPICS_PRUNED'		=> 'Topics pruned',));?>
<?php/**** @package search* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @ignore*/if (!defined('IN_PHPBB')){	exit;}/*** @ignore*/define('SEARCH_RESULT_NOT_IN_CACHE', 0);define('SEARCH_RESULT_IN_CACHE', 1);define('SEARCH_RESULT_INCOMPLETE', 2);/*** search_backend* optional base class for search plugins providing simple caching based on ACM* and functions to retrieve ignore_words and synonyms* @package search*/class search_backend{	var $ignore_words = array();	var $match_synonym = array();	var $replace_synonym = array();	function search_backend(&$error)	{		// This class cannot be used as a search plugin		$error = true;	}	/**	* Retrieves a language dependend list of words that should be ignored by the search	*/	function get_ignore_words()	{		if (!sizeof($this->ignore_words))		{			global $user, $phpEx;			$words = array();			if (file_exists("{$user->lang_path}{$user->lang_name}/search_ignore_words.$phpEx"))			{				// include the file containing ignore words				include("{$user->lang_path}{$user->lang_name}/search_ignore_words.$phpEx");			}			$this->ignore_words = $words;			unset($words);		}	}	/**	* Stores a list of synonyms that should be replaced in $this->match_synonym and $this->replace_synonym and caches them	*/	function get_synonyms()	{		if (!sizeof($this->match_synonym))		{			global $user, $phpEx;			$synonyms = array();			if (file_exists("{$user->lang_path}{$user->lang_name}/search_synonyms.$phpEx"))			{				// include the file containing synonyms				include("{$user->lang_path}{$user->lang_name}/search_synonyms.$phpEx");			}			$this->match_synonym = array_keys($synonyms);			$this->replace_synonym = array_values($synonyms);			unset($synonyms);		}	}	/**	* Retrieves cached search results	*	* @param int &$result_count will contain the number of all results for the search (not only for the current page)	* @param array &$id_ary is filled with the ids belonging to the requested page that are stored in the cache	*	* @return int SEARCH_RESULT_NOT_IN_CACHE or SEARCH_RESULT_IN_CACHE or SEARCH_RESULT_INCOMPLETE	*/	function obtain_ids($search_key, &$result_count, &$id_ary, $start, $per_page, $sort_dir)	{		global $cache;		if (!($stored_ids = $cache->get('_search_results_' . $search_key)))		{			// no search results cached for this search_key			return SEARCH_RESULT_NOT_IN_CACHE;		}		else		{			$result_count = $stored_ids[-1];			$reverse_ids = ($stored_ids[-2] != $sort_dir) ? true : false;			$complete = true;			// change the start to the actual end of the current request if the sort direction differs			// from the dirction in the cache and reverse the ids later			if ($reverse_ids)			{				$start = $result_count - $start - $per_page;				// the user requested a page past the last index				if ($start < 0)				{					return SEARCH_RESULT_NOT_IN_CACHE;				}			}			for ($i = $start, $n = $start + $per_page; ($i < $n) && ($i < $result_count); $i++)			{				if (!isset($stored_ids[$i]))				{					$complete = false;				}				else				{					$id_ary[] = $stored_ids[$i];				}			}			unset($stored_ids);			if ($reverse_ids)			{				$id_ary = array_reverse($id_ary);			}			if (!$complete)			{				return SEARCH_RESULT_INCOMPLETE;			}			return SEARCH_RESULT_IN_CACHE;		}	}	/**	* Caches post/topic ids	*	* @param array &$id_ary contains a list of post or topic ids that shall be cached, the first element	* 	must have the absolute index $start in the result set.	*/	function save_ids($search_key, $keywords, $author_ary, $result_count, &$id_ary, $start, $sort_dir)	{		global $cache, $config, $db, $user;		$length = min(sizeof($id_ary), $config['search_block_size']);		// nothing to cache so exit		if (!$length)		{			return;		}		$store_ids = array_slice($id_ary, 0, $length);		// create a new resultset if there is none for this search_key yet		// or add the ids to the existing resultset		if (!($store = $cache->get('_search_results_' . $search_key)))		{			// add the current keywords to the recent searches in the cache which are listed on the search page			if (!empty($keywords) || sizeof($author_ary))			{				$sql = 'SELECT search_time					FROM ' . SEARCH_RESULTS_TABLE . '					WHERE search_key = \'' . $db->sql_escape($search_key) . '\'';				$result = $db->sql_query($sql);				if (!$db->sql_fetchrow($result))				{					$sql_ary = array(						'search_key'		=> $search_key,						'search_time'		=> time(),						'search_keywords'	=> $keywords,						'search_authors'	=> ' ' . implode(' ', $author_ary) . ' '					);					$sql = 'INSERT INTO ' . SEARCH_RESULTS_TABLE . ' ' . $db->sql_build_array('INSERT', $sql_ary);					$db->sql_query($sql);				}				$db->sql_freeresult($result);			}			$sql = 'UPDATE ' . USERS_TABLE . '				SET user_last_search = ' . time() . '				WHERE user_id = ' . $user->data['user_id'];			$db->sql_query($sql);			$store = array(-1 => $result_count, -2 => $sort_dir);			$id_range = range($start, $start + $length - 1);		}		else		{			// we use one set of results for both sort directions so we have to calculate the indizes			// for the reversed array and we also have to reverse the ids themselves			if ($store[-2] != $sort_dir)			{				$store_ids = array_reverse($store_ids);				$id_range = range($store[-1] - $start - $length, $store[-1] - $start - 1);			}			else			{				$id_range = range($start, $start + $length - 1);			}		}		$store_ids = array_combine($id_range, $store_ids);		// append the ids		if (is_array($store_ids))		{			$store += $store_ids;			// if the cache is too big			if (sizeof($store) - 2 > 20 * $config['search_block_size'])			{				// remove everything in front of two blocks in front of the current start index				for ($i = 0, $n = $id_range[0] - 2 * $config['search_block_size']; $i < $n; $i++)				{					if (isset($store[$i]))					{						unset($store[$i]);					}				}				// remove everything after two blocks after the current stop index				end($id_range);				for ($i = $store[-1] - 1, $n = current($id_range) + 2 * $config['search_block_size']; $i > $n; $i--)				{					if (isset($store[$i]))					{						unset($store[$i]);					}				}			}			$cache->put('_search_results_' . $search_key, $store, $config['search_store_results']);			$sql = 'UPDATE ' . SEARCH_RESULTS_TABLE . '				SET search_time = ' . time() . '				WHERE search_key = \'' . $db->sql_escape($search_key) . '\'';			$db->sql_query($sql);		}		unset($store);		unset($store_ids);		unset($id_range);	}	/**	* Removes old entries from the search results table and removes searches with keywords that contain a word in $words.	*/	function destroy_cache($words, $authors = false)	{		global $db, $cache, $config;		// clear all searches that searched for the specified words		if (sizeof($words))		{			$sql_where = '';			foreach ($words as $word)			{				$sql_where .= " OR search_keywords " . $db->sql_like_expression($db->any_char . $word . $db->any_char);			}			$sql = 'SELECT search_key				FROM ' . SEARCH_RESULTS_TABLE . "				WHERE search_keywords LIKE '%*%' $sql_where";			$result = $db->sql_query($sql);			while ($row = $db->sql_fetchrow($result))			{				$cache->destroy('_search_results_' . $row['search_key']);			}			$db->sql_freeresult($result);		}		// clear all searches that searched for the specified authors		if (is_array($authors) && sizeof($authors))		{			$sql_where = '';			foreach ($authors as $author)			{				$sql_where .= (($sql_where) ? ' OR ' : '') . 'search_authors LIKE \'% ' . (int) $author . ' %\'';			}			$sql = 'SELECT search_key				FROM ' . SEARCH_RESULTS_TABLE . "				WHERE $sql_where";			$result = $db->sql_query($sql);			while ($row = $db->sql_fetchrow($result))			{				$cache->destroy('_search_results_' . $row['search_key']);			}			$db->sql_freeresult($result);		}		$sql = 'DELETE			FROM ' . SEARCH_RESULTS_TABLE . '			WHERE search_time < ' . (time() - $config['search_store_results']);		$db->sql_query($sql);	}}?>
<?php/**** @package acp* @version $Id$* @copyright (c) 2006 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @package module_install*/class acp_inactive_info{	function module()	{		return array(			'filename'	=> 'acp_inactive',			'title'		=> 'ACP_INACTIVE_USERS',			'version'	=> '1.0.0',			'modes'		=> array(				'list'		=> array('title' => 'ACP_INACTIVE_USERS', 'auth' => 'acl_a_user', 'cat' => array('ACP_CAT_USERS')),			),		);	}	function install()	{	}	function uninstall()	{	}}?>
<?php/**** posting [English]** @package language* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** DO NOT CHANGE*/if (!defined('IN_PHPBB')){	exit;}if (empty($lang) || !is_array($lang)){	$lang = array();}// DEVELOPERS PLEASE NOTE//// All language files should use UTF-8 as their encoding and the files must not contain a BOM.//// Placeholders can now contain order information, e.g. instead of// 'Page %s of %s' you can (and should) write 'Page %1$s of %2$s', this allows// translators to re-order the output of data while ensuring it remains correct//// You do not need this where single placeholders are used, e.g. 'Message %d' is fine// equally where a string contains only two placeholders which are used to wrap text// in a url you again do not need to specify an order e.g., 'Click %sHERE%s' is fine$lang = array_merge($lang, array(	'ADD_ATTACHMENT'			=> 'Upload attachment',	'ADD_ATTACHMENT_EXPLAIN'	=> 'If you wish to attach one or more files enter the details below.',	'ADD_FILE'					=> 'Add the file',	'ADD_POLL'					=> 'Poll creation',	'ADD_POLL_EXPLAIN'			=> 'If you do not want to add a poll to your topic leave the fields blank.',	'ALREADY_DELETED'			=> 'Sorry but this message is already deleted.',	'ATTACH_QUOTA_REACHED'		=> 'Sorry, the board attachment quota has been reached.',	'ATTACH_SIG'				=> 'Attach a signature (signatures can be altered via the UCP)',	'BBCODE_A_HELP'				=> 'Inline uploaded attachment: [attachment=]filename.ext[/attachment]',	'BBCODE_B_HELP'				=> 'Bold text: [b]text[/b]',	'BBCODE_C_HELP'				=> 'Code display: [code]code[/code]',	'BBCODE_D_HELP'				=> 'Flash: [flash=width,height]http://url[/flash]',	'BBCODE_F_HELP'				=> 'Font size: [size=85]small text[/size]',	'BBCODE_IS_OFF'				=> '%sBBCode%s is <em>OFF</em>',	'BBCODE_IS_ON'				=> '%sBBCode%s is <em>ON</em>',	'BBCODE_I_HELP'				=> 'Italic text: [i]text[/i]',	'BBCODE_L_HELP'				=> 'List: [list]text[/list]',	'BBCODE_LISTITEM_HELP'		=> 'List item: [*]text[/*]',	'BBCODE_O_HELP'				=> 'Ordered list: [list=]text[/list]',	'BBCODE_P_HELP'				=> 'Insert image: [img]http://image_url[/img]',	'BBCODE_Q_HELP'				=> 'Quote text: [quote]text[/quote]',	'BBCODE_S_HELP'				=> 'Font colour: [color=red]text[/color]  Tip: you can also use color=#FF0000',	'BBCODE_U_HELP'				=> 'Underline text: [u]text[/u]',	'BBCODE_W_HELP'				=> 'Insert URL: [url]http://url[/url] or [url=http://url]URL text[/url]',	'BBCODE_Y_HELP'				=> 'List: Add list element',	'BUMP_ERROR'				=> 'You cannot bump this topic so soon after the last post.',	'CANNOT_DELETE_REPLIED'		=> 'Sorry but you may only delete posts which have not been replied to.',	'CANNOT_EDIT_POST_LOCKED'	=> 'This post has been locked. You can no longer edit that post.',	'CANNOT_EDIT_TIME'			=> 'You can no longer edit or delete that post.',	'CANNOT_POST_ANNOUNCE'		=> 'Sorry but you cannot post announcements.',	'CANNOT_POST_STICKY'		=> 'Sorry but you cannot post sticky topics.',	'CHANGE_TOPIC_TO'			=> 'Change topic type to',	'CLOSE_TAGS'				=> 'Close tags',	'CURRENT_TOPIC'				=> 'Current topic',	'DELETE_FILE'				=> 'Delete file',	'DELETE_MESSAGE'			=> 'Delete message',	'DELETE_MESSAGE_CONFIRM'	=> 'Are you sure you want to delete this message?',	'DELETE_OWN_POSTS'			=> 'Sorry but you can only delete your own posts.',	'DELETE_POST_CONFIRM'		=> 'Are you sure you want to delete this post?',	'DELETE_POST_WARN'			=> 'Once deleted the post cannot be recovered',	'DISABLE_BBCODE'			=> 'Disable BBCode',	'DISABLE_MAGIC_URL'			=> 'Do not automatically parse URLs',	'DISABLE_SMILIES'			=> 'Disable smilies',	'DISALLOWED_CONTENT'		=> 'The upload was rejected because the uploaded file was identified as a possible attack vector.',	'DISALLOWED_EXTENSION'		=> 'The extension %s is not allowed.',	'DRAFT_LOADED'				=> 'Draft loaded into posting area, you may want to finish your post now.<br />Your draft will be deleted after submitting this post.',	'DRAFT_LOADED_PM'			=> 'Draft loaded into message area, you may want to finish your private message now.<br />Your draft will be deleted after submitting this private message.',	'DRAFT_SAVED'				=> 'Draft successfully saved.',	'DRAFT_TITLE'				=> 'Draft title',	'EDIT_REASON'				=> 'Reason for editing this post',	'EMPTY_FILEUPLOAD'			=> 'The uploaded file is empty.',	'EMPTY_MESSAGE'				=> 'You must enter a message when posting.',	'EMPTY_REMOTE_DATA'			=> 'File could not be uploaded, please try uploading the file manually.',	'FLASH_IS_OFF'				=> '[flash] is <em>OFF</em>',	'FLASH_IS_ON'				=> '[flash] is <em>ON</em>',	'FLOOD_ERROR'				=> 'You cannot make another post so soon after your last.',	'FONT_COLOR'				=> 'Font colour',	'FONT_COLOR_HIDE'			=> 'Hide font colour',	'FONT_HUGE'					=> 'Huge',	'FONT_LARGE'				=> 'Large',	'FONT_NORMAL'				=> 'Normal',	'FONT_SIZE'					=> 'Font size',	'FONT_SMALL'				=> 'Small',	'FONT_TINY'					=> 'Tiny',	'GENERAL_UPLOAD_ERROR'		=> 'Could not upload attachment to %s.',	'IMAGES_ARE_OFF'			=> '[img] is <em>OFF</em>',	'IMAGES_ARE_ON'				=> '[img] is <em>ON</em>',	'INVALID_FILENAME'			=> '%s is an invalid filename.',	'LOAD'						=> 'Load',	'LOAD_DRAFT'				=> 'Load draft',	'LOAD_DRAFT_EXPLAIN'		=> 'Here you are able to select the draft you want to continue writing. Your current post will be cancelled, all current post contents will be deleted. View, edit and delete drafts within your User Control Panel.',	'LOGIN_EXPLAIN_BUMP'		=> 'You need to login in order to bump topics within this forum.',	'LOGIN_EXPLAIN_DELETE'		=> 'You need to login in order to delete posts within this forum.',	'LOGIN_EXPLAIN_POST'		=> 'You need to login in order to post within this forum.',	'LOGIN_EXPLAIN_QUOTE'		=> 'You need to login in order to quote posts within this forum.',	'LOGIN_EXPLAIN_REPLY'		=> 'You need to login in order to reply to topics within this forum.',	'MAX_FONT_SIZE_EXCEEDED'	=> 'You may only use fonts up to size %1$d.',	'MAX_FLASH_HEIGHT_EXCEEDED'	=> 'Your flash files may only be up to %1$d pixels high.',	'MAX_FLASH_WIDTH_EXCEEDED'	=> 'Your flash files may only be up to %1$d pixels wide.',	'MAX_IMG_HEIGHT_EXCEEDED'	=> 'Your images may only be up to %1$d pixels high.',	'MAX_IMG_WIDTH_EXCEEDED'	=> 'Your images may only be up to %1$d pixels wide.',	'MESSAGE_BODY_EXPLAIN'		=> 'Enter your message here, it may contain no more than <strong>%d</strong> characters.',	'MESSAGE_DELETED'			=> 'This message has been deleted successfully.',	'MORE_SMILIES'				=> 'View more smilies',	'NOTIFY_REPLY'				=> 'Notify me when a reply is posted',	'NOT_UPLOADED'				=> 'File could not be uploaded.',	'NO_DELETE_POLL_OPTIONS'	=> 'You cannot delete existing poll options.',	'NO_PM_ICON'				=> 'No PM icon',	'NO_POLL_TITLE'				=> 'You have to enter a poll title.',	'NO_POST'					=> 'The requested post does not exist.',	'NO_POST_MODE'				=> 'No post mode specified.',	'PARTIAL_UPLOAD'			=> 'The uploaded file was only partially uploaded.',	'PHP_SIZE_NA'				=> 'The attachments file size is too large.<br />Could not determine the maximum size defined by PHP in php.ini.',	'PHP_SIZE_OVERRUN'			=> 'The attachments file size is too large, the maximum upload size is %1$d %2$s.<br />Please note this is set in php.ini and cannot be overridden.',	'PLACE_INLINE'				=> 'Place inline',	'POLL_DELETE'				=> 'Delete poll',	'POLL_FOR'					=> 'Run poll for',	'POLL_FOR_EXPLAIN'			=> 'Enter 0 or leave blank for a never ending poll.',	'POLL_MAX_OPTIONS'			=> 'Options per user',	'POLL_MAX_OPTIONS_EXPLAIN'	=> 'This is the number of options each user may select when voting.',	'POLL_OPTIONS'				=> 'Poll options',	'POLL_OPTIONS_EXPLAIN'		=> 'Place each option on a new line. You may enter up to <strong>%d</strong> options.',	'POLL_OPTIONS_EDIT_EXPLAIN'	=> 'Place each option on a new line. You may enter up to <strong>%d</strong> options. If you remove or add options all previous votes will be reset.',	'POLL_QUESTION'				=> 'Poll question',	'POLL_TITLE_TOO_LONG'		=> 'The poll title must contain fewer than 100 characters.',	'POLL_TITLE_COMP_TOO_LONG'	=> 'The parsed size of your poll title is too large, consider removing BBCodes or smilies.',	'POLL_VOTE_CHANGE'			=> 'Allow re-voting',	'POLL_VOTE_CHANGE_EXPLAIN'	=> 'If enabled users are able to change their vote.',	'POSTED_ATTACHMENTS'		=> 'Posted attachments',	'POST_APPROVAL_NOTIFY'		=> 'You will be notified when your post has been approved.',	'POST_CONFIRMATION'			=> 'Confirmation of post',	'POST_CONFIRM_EXPLAIN'		=> 'To prevent automated posts the board requires you to enter a confirmation code. The code is displayed in the image you should see below. If you are visually impaired or cannot otherwise read this code please contact the %sBoard Administrator%s.',	'POST_DELETED'				=> 'This message has been deleted successfully.',	'POST_EDITED'				=> 'This message has been edited successfully.',	'POST_EDITED_MOD'			=> 'This message has been edited successfully, but it will need to be approved by a moderator before it is publicly viewable.',	'POST_GLOBAL'				=> 'Global',	'POST_ICON'					=> 'Post icon',	'POST_NORMAL'				=> 'Normal',	'POST_REVIEW'				=> 'Post review',	'POST_REVIEW_EDIT'			=> 'Post review',	'POST_REVIEW_EDIT_EXPLAIN'	=> 'This post has been altered by another user while you were editing it. You may wish to review the current version of this post and adjust your edits.',	'POST_REVIEW_EXPLAIN'		=> 'At least one new post has been made to this topic. You may wish to review your post in light of this.',	'POST_STORED'				=> 'This message has been posted successfully.',	'POST_STORED_MOD'			=> 'This message has been submitted successfully, but it will need to be approved by a moderator before it is publicly viewable.',	'POST_TOPIC_AS'				=> 'Post topic as',	'PROGRESS_BAR'				=> 'Progress bar',	'QUOTE_DEPTH_EXCEEDED'		=> 'You may embed only %1$d quotes within each other.',	'SAVE'						=> 'Save',	'SAVE_DATE'					=> 'Saved at',	'SAVE_DRAFT'				=> 'Save draft',	'SAVE_DRAFT_CONFIRM'		=> 'Please note that saved drafts only include the subject and the message, any other element will be removed. Do you want to save your draft now?',	'SMILIES'					=> 'Smilies',	'SMILIES_ARE_OFF'			=> 'Smilies are <em>OFF</em>',	'SMILIES_ARE_ON'			=> 'Smilies are <em>ON</em>',	'STICKY_ANNOUNCE_TIME_LIMIT'=> 'Sticky/Announcement time limit',	'STICK_TOPIC_FOR'			=> 'Stick topic for',	'STICK_TOPIC_FOR_EXPLAIN'	=> 'Enter 0 or leave blank for a never ending Sticky/Announcement. Please note that this number is relative to the date of the post.',	'STYLES_TIP'				=> 'Tip: Styles can be applied quickly to selected text.',	'TOO_FEW_CHARS'				=> 'Your message contains too few characters.',	'TOO_FEW_CHARS_LIMIT'		=> 'Your message contains %1$d characters. The minimum number of characters you need to enter is %2$d.',	'TOO_FEW_POLL_OPTIONS'		=> 'You must enter at least two poll options.',	'TOO_MANY_ATTACHMENTS'		=> 'Cannot add another attachment, %d is the maximum.',	'TOO_MANY_CHARS'			=> 'Your message contains too many characters.',	'TOO_MANY_CHARS_POST'		=> 'Your message contains %1$d characters. The maximum number of allowed characters is %2$d.',	'TOO_MANY_CHARS_SIG'		=> 'Your signature contains %1$d characters. The maximum number of allowed characters is %2$d.',	'TOO_MANY_POLL_OPTIONS'		=> 'You have tried to enter too many poll options.',	'TOO_MANY_SMILIES'			=> 'Your message contains too many smilies. The maximum number of smilies allowed is %d.',	'TOO_MANY_URLS'				=> 'Your message contains too many URLs. The maximum number of URLs allowed is %d.',	'TOO_MANY_USER_OPTIONS'		=> 'You cannot specify more options per user than existing poll options.',	'TOPIC_BUMPED'				=> 'Topic has been bumped successfully.',	'UNAUTHORISED_BBCODE'		=> 'You cannot use certain BBCodes: %s.',	'UNGLOBALISE_EXPLAIN'		=> 'To switch this topic back from being global to a normal topic, you need to select the forum you wish this topic to be displayed.',	'UPDATE_COMMENT'			=> 'Update comment',	'URL_INVALID'				=> 'The URL you specified is invalid.',	'URL_NOT_FOUND'				=> 'The file specified could not be found.',	'URL_IS_OFF'				=> '[url] is <em>OFF</em>',	'URL_IS_ON'					=> '[url] is <em>ON</em>',	'USER_CANNOT_BUMP'			=> 'You cannot bump topics in this forum.',	'USER_CANNOT_DELETE'		=> 'You cannot delete posts in this forum.',	'USER_CANNOT_EDIT'			=> 'You cannot edit posts in this forum.',	'USER_CANNOT_REPLY'			=> 'You cannot reply in this forum.',	'USER_CANNOT_FORUM_POST'	=> 'You are not able to do posting operations on this forum due to the forum type not supporting it.',	'VIEW_MESSAGE'				=> '%sView your submitted message%s',	'VIEW_PRIVATE_MESSAGE'		=> '%sView your submitted private message%s',	'WRONG_FILESIZE'			=> 'The file is too big, maximum allowed size is %1d %2s.',	'WRONG_SIZE'				=> 'The image must be at least %1$d pixels wide, %2$d pixels high and at most %3$d pixels wide and %4$d pixels high. The submitted image is %5$d pixels wide and %6$d pixels high.',));?>
<?php/**** @package acm* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @ignore*/if (!defined('IN_PHPBB')){	exit;}/*** ACM Abstract Memory Class* @package acm*/class acm_memory{	var $key_prefix;	var $vars = array();	var $is_modified = false;	var $sql_rowset = array();	var $sql_row_pointer = array();	var $cache_dir = '';	/**	* Set cache path	*/	function acm_memory()	{		global $phpbb_root_path, $dbname, $table_prefix;		$this->cache_dir	= $phpbb_root_path . 'cache/';		$this->key_prefix	= substr(md5($dbname . $table_prefix), 0, 8) . '_';		if (!isset($this->extension) || !extension_loaded($this->extension))		{			global $acm_type;			trigger_error("Could not find required extension [{$this->extension}] for the ACM module $acm_type.", E_USER_ERROR);		}		if (isset($this->function) && !function_exists($this->function))		{			global $acm_type;			trigger_error("The required function [{$this->function}] is not available for the ACM module $acm_type.", E_USER_ERROR);		}	}	/**	* Load global cache	*/	function load()	{		// grab the global cache		$this->vars = $this->_read('global');		if ($this->vars !== false)		{			return true;		}		return false;	}	/**	* Unload cache object	*/	function unload()	{		$this->save();		unset($this->vars);		unset($this->sql_rowset);		unset($this->sql_row_pointer);		$this->vars = array();		$this->sql_rowset = array();		$this->sql_row_pointer = array();	}	/**	* Save modified objects	*/	function save()	{		if (!$this->is_modified)		{			return;		}		$this->_write('global', $this->vars, 2592000);		$this->is_modified = false;	}	/**	* Tidy cache	*/	function tidy()	{		// cache has auto GC, no need to have any code here :)		set_config('cache_last_gc', time(), true);	}	/**	* Get saved cache object	*/	function get($var_name)	{		if ($var_name[0] == '_')		{			if (!$this->_exists($var_name))			{				return false;			}			return $this->_read($var_name);		}		else		{			return ($this->_exists($var_name)) ? $this->vars[$var_name] : false;		}	}	/**	* Put data into cache	*/	function put($var_name, $var, $ttl = 2592000)	{		if ($var_name[0] == '_')		{			$this->_write($var_name, $var, $ttl);		}		else		{			$this->vars[$var_name] = $var;			$this->is_modified = true;		}	}	/**	* Purge cache data	*/	function purge()	{		// Purge all phpbb cache files		$dir = @opendir($this->cache_dir);		if (!$dir)		{			return;		}		while (($entry = readdir($dir)) !== false)		{			if (strpos($entry, 'sql_') !== 0 && strpos($entry, 'data_') !== 0 && strpos($entry, 'ctpl_') !== 0 && strpos($entry, 'tpl_') !== 0)			{				continue;			}			$this->remove_file($this->cache_dir . $entry);		}		closedir($dir);		unset($this->vars);		unset($this->sql_rowset);		unset($this->sql_row_pointer);		$this->vars = array();		$this->sql_rowset = array();		$this->sql_row_pointer = array();		$this->is_modified = false;	}	/**	* Destroy cache data	*/	function destroy($var_name, $table = '')	{		if ($var_name == 'sql' && !empty($table))		{			if (!is_array($table))			{				$table = array($table);			}			foreach ($table as $table_name)			{				// gives us the md5s that we want				$temp = $this->_read('sql_' . $table_name);				if ($temp === false)				{					continue;				}				// delete each query ref				foreach ($temp as $md5_id => $void)				{					$this->_delete('sql_' . $md5_id);				}				// delete the table ref				$this->_delete('sql_' . $table_name);			}			return;		}		if (!$this->_exists($var_name))		{			return;		}		if ($var_name[0] == '_')		{			$this->_delete($var_name);		}		else if (isset($this->vars[$var_name]))		{			$this->is_modified = true;			unset($this->vars[$var_name]);			// We save here to let the following cache hits succeed			$this->save();		}	}	/**	* Check if a given cache entry exist	*/	function _exists($var_name)	{		if ($var_name[0] == '_')		{			return $this->_isset($var_name);		}		else		{			if (!sizeof($this->vars))			{				$this->load();			}			return isset($this->vars[$var_name]);		}	}	/**	* Load cached sql query	*/	function sql_load($query)	{		// Remove extra spaces and tabs		$query = preg_replace('/[\n\r\s\t]+/', ' ', $query);		$query_id = sizeof($this->sql_rowset);		if (($result = $this->_read('sql_' . md5($query))) === false)		{			return false;		}		$this->sql_rowset[$query_id] = $result;		$this->sql_row_pointer[$query_id] = 0;		return $query_id;	}	/**	* Save sql query	*/	function sql_save($query, &$query_result, $ttl)	{		global $db;		// Remove extra spaces and tabs		$query = preg_replace('/[\n\r\s\t]+/', ' ', $query);		$hash = md5($query);		// determine which tables this query belongs to		// Some queries use backticks, namely the get_database_size() query		// don't check for conformity, the SQL would error and not reach here.		if (!preg_match('/FROM \\(?(`?\\w+`?(?: \\w+)?(?:, ?`?\\w+`?(?: \\w+)?)*)\\)?/', $query, $regs))		{			// Bail out if the match fails.			return;		}		$tables = array_map('trim', explode(',', $regs[1]));		foreach ($tables as $table_name)		{			// Remove backticks			$table_name = ($table_name[0] == '`') ? substr($table_name, 1, -1) : $table_name;			if (($pos = strpos($table_name, ' ')) !== false)			{				$table_name = substr($table_name, 0, $pos);			}			$temp = $this->_read('sql_' . $table_name);			if ($temp === false)			{				$temp = array();			}			$temp[$hash] = true;			// This must never expire			$this->_write('sql_' . $table_name, $temp, 0);		}		// store them in the right place		$query_id = sizeof($this->sql_rowset);		$this->sql_rowset[$query_id] = array();		$this->sql_row_pointer[$query_id] = 0;		while ($row = $db->sql_fetchrow($query_result))		{			$this->sql_rowset[$query_id][] = $row;		}		$db->sql_freeresult($query_result);		$this->_write('sql_' . $hash, $this->sql_rowset[$query_id], $ttl);		$query_result = $query_id;	}	/**	* Ceck if a given sql query exist in cache	*/	function sql_exists($query_id)	{		return isset($this->sql_rowset[$query_id]);	}	/**	* Fetch row from cache (database)	*/	function sql_fetchrow($query_id)	{		if ($this->sql_row_pointer[$query_id] < sizeof($this->sql_rowset[$query_id]))		{			return $this->sql_rowset[$query_id][$this->sql_row_pointer[$query_id]++];		}		return false;	}	/**	* Fetch a field from the current row of a cached database result (database)	*/	function sql_fetchfield($query_id, $field)	{		if ($this->sql_row_pointer[$query_id] < sizeof($this->sql_rowset[$query_id]))		{			return (isset($this->sql_rowset[$query_id][$this->sql_row_pointer[$query_id]][$field])) ? $this->sql_rowset[$query_id][$this->sql_row_pointer[$query_id]++][$field] : false;		}		return false;	}	/**	* Seek a specific row in an a cached database result (database)	*/	function sql_rowseek($rownum, $query_id)	{		if ($rownum >= sizeof($this->sql_rowset[$query_id]))		{			return false;		}		$this->sql_row_pointer[$query_id] = $rownum;		return true;	}	/**	* Free memory used for a cached database result (database)	*/	function sql_freeresult($query_id)	{		if (!isset($this->sql_rowset[$query_id]))		{			return false;		}		unset($this->sql_rowset[$query_id]);		unset($this->sql_row_pointer[$query_id]);		return true;	}	/**	* Removes/unlinks file	*/	function remove_file($filename, $check = false)	{		if (!function_exists('phpbb_is_writable'))		{			global $phpbb_root_path, $phpEx;			include($phpbb_root_path . 'includes/functions.' . $phpEx);		}		if ($check && !phpbb_is_writable($this->cache_dir))		{			// E_USER_ERROR - not using language entry - intended.			trigger_error('Unable to remove files within ' . $this->cache_dir . '. Please check directory permissions.', E_USER_ERROR);		}		return @unlink($filename);	}	/**	* Check if a cache var exists	*	* @access protected	* @param string $var Cache key	* @return bool True if it exists, otherwise false	*/	function _isset($var)	{		// Most caches don't need to check		return true;	}}?>
<?php//// Security message://// This script is potentially dangerous.// Remove or comment the next line (die(".... ) to enable this script.// Do NOT FORGET to either remove this script or disable it after you have used it.//die("Please read the first lines of this script for instructions on how to enable it");//// Do not change anything below this line.//$phpbb_root_path = "../";include($phpbb_root_path . 'extension.inc');include($phpbb_root_path . 'common.'.$phpEx);include($phpbb_root_path . 'includes/post.'.$phpEx);include($phpbb_root_path . 'includes/bbcode.'.$phpEx);srand ((double) microtime() * 1000000);set_time_limit(240*60);// Here's the text we stick in posts..$bigass_text = ' phpBB BBCode test suite v0.0.2auto-linkification:http://something.comwww.something.comnate@phpbb.comhttp://something.com/foo.php?this=that&theother=some%20encoded%20string is a link.[code]Simple code block with some <html> <tags>.[/code][b]bolded[/b], [i]italic[/i][email]james@totalgeek.org[/email][url=http://www.totalgeek.org]totalgeek.org[/url][url]www.totalgeek.org[/url] [list] [*] This is the first bulleted item.[*] This is the second bulleted item.[/list] [list=A] [*] This is the first bulleted item.[*] This is the second bulleted item.[/list] [quote]And a quote![/quote]';// The script expects the ID's in the tables to sequential (1,2,3,4,5), // so no holes please (1,4,5,8)...$nr_of_users  = nrof(USERS_TABLE);$nr_of_cats   = nrof(CATEGORIES_TABLE);$nr_of_forums = nrof(FORUMS_TABLE);$nr_of_posts  = nrof(POSTS_TABLE);$u = $users;$starttime = microtime();$usercreationcount = 0;while($users > 0){	$name = "testuser_" . substr(md5(uniqid(rand())), 0, 10);	if (make_user($name))	{		$usercreationcount++;		$users--;	}	if (($usercreationcount % 500) == 0)	{		echo "status: $usercreationcount <br>\n";		flush();	}	}if ($posts > 0){	filldb($posts);}$endtime = microtime();if ($submit="" || !isset($submit)){    ?>Hello, welcome to this little phpBB Benchmarking script :)<p>At the moment there are:<br><table><tr><td align="right"><?php echo $nr_of_users?></td><td>Users</td></tr><tr><td align="right"><?php echo $nr_of_forums?></td><td>Forums</td></tr><tr><td align="right"><?php echo $nr_of_posts?></td><td>Posts</td></tr></table><p>What do you want to create?<p><form method="get" action="<?php echo $PHP_SELF?>"><input type="text" name="users" size="3"> Users<br><input type="text" name="posts" size="3"> Posts/topics (optional: post size in <input type="text" name="size" size="3"> bytes)<br><input type="submit" name="submit"></form>    <?php} else {	list ($starttime_msec,$starttime_sec) = explode(" ",$starttime);	list ($endtime_msec,$endtime_sec) = explode(" ",$endtime);	$timetaken_sec = ($endtime_sec+$endtime_msec) - ($starttime_sec+$starttime_msec);	print "<B>TIME TAKEN : ".$timetaken_sec."s</B><BR>\n"; 	print "<p>\n<a href=\"$PHP_SELF\">Back to the overview page</a>\n";}function filldb($newposts){	global $nr_of_forums;	global $nr_of_users;  	$forum_topic_counts = array();  	for ($i = 1; $i <= $nr_of_forums; $i++)	{  		$forum_topic_counts[$i] = get_topic_count($i);	}  	for($i = 0; $i < $newposts; $i++)	{		$userid   = rand(2, $nr_of_users - 1);		$forum    = rand(1,$nr_of_forums);				if ((rand(0,30) < 1) || ($forum_topic_count[$forum] == 0))		{			// create a new topic 1 in 30 times (or when there are none);			$topic = make_topic($userid, "Testing topic $i", $forum);			$forum_topic_count[$forum]++;		} 		else 		{			// Otherwise create a reply(posting) somewhere.			$topic = get_smallest_topic($forum);			create_posting($userid, $topic, $forum, "reply");		}				if (($i % 1000) == 0)		{			echo "status: $i <br>";			flush();		}	 	}}function get_smallest_topic($forum_id){	global $db;		$sql = "SELECT topic_id		FROM " . TOPICS_TABLE . "		WHERE (forum_id = $forum_id)		ORDER BY topic_replies ASC LIMIT 1";	if($result = $db->sql_query($sql))	{		$row = $db->sql_fetchrow($result);		$topic_id = $row['topic_id'];		unset($result);		unset($row);		return $topic_id;	}	else	{		message_die(GENERAL_ERROR, "Couldn't get smallest topic.", "", __LINE__, __FILE__, $sql);	}	}function get_topic_count($forum_id){	global $db;		$sql = "SELECT forum_topics		FROM " . FORUMS_TABLE . "		WHERE (forum_id = $forum_id)";	if($result = $db->sql_query($sql))	{		$row = $db->sql_fetchrow($result);		$topic_count = $row['forum_topics'];		unset($result);		unset($row);		return $topic_count;	}	else	{		message_die(GENERAL_ERROR, "Couldn't get topic count.", "", __LINE__, __FILE__, $sql);	}	}function make_topic($user_id, $subject, $forum_id){	global $db;	$topic_type = POST_NORMAL;	$topic_vote = 0;	$current_time = time();		$sql  = "INSERT INTO " . TOPICS_TABLE . " (topic_title, topic_poster, topic_time, forum_id, topic_status, topic_type, topic_vote)			VALUES ('$subject', $user_id, $current_time, $forum_id, " . TOPIC_UNLOCKED . ", $topic_type, $topic_vote)";	if( $result = $db->sql_query($sql, BEGIN_TRANSACTION) )	{		$new_topic_id = $db->sql_nextid();	}	else	{		message_die(GENERAL_ERROR, "Error inserting data into topics table", "", __LINE__, __FILE__, $sql);	}		create_posting($user_id, $new_topic_id, $forum_id);		return $new_topic_id;}function create_posting($userid, $topic_id, $forum, $mode='newtopic'){	$message = generatepost();	return make_post($topic_id, $forum, $userid, "", $message, $mode);}function make_post($new_topic_id, $forum_id, $user_id, $post_username, $text, $mode='newtopic'){	global $db;	$current_time = time();	$user_ip = "ac100202";	$bbcode_on = 1;	$html_on = 1;	$smilies_on = 1;	$attach_sig = 1;	$bbcode_uid = make_bbcode_uid();		$post_subject = 'random subject';		$post_message = prepare_message($text, $html_on, $bbcode_on, $smilies_on, $bbcode_uid);			$sql = "INSERT INTO " . POSTS_TABLE . " (topic_id, forum_id, poster_id, attach_id, icon_id, post_username, post_time, poster_ip, post_approved, bbcode_uid, enable_bbcode, enable_html, enable_smilies, enable_sig, post_subject, post_text)		VALUES ($new_topic_id, $forum_id, $user_id, 0, 0, '$post_username', $current_time, '$user_ip', 1, '$bbcode_uid', $bbcode_on, $html_on, $smilies_on, $attach_sig, '$post_subject', '$post_message')";	$result = $db->sql_query($sql);		if ($result)	{		$new_post_id = $db->sql_nextid();			$sql = "UPDATE " . TOPICS_TABLE . "			SET topic_last_post_id = $new_post_id";		if($mode == "reply")		{			$sql .= ", topic_replies = topic_replies + 1 ";		}		$sql .= " WHERE topic_id = $new_topic_id";		if($db->sql_query($sql))		{			$sql = "UPDATE " . FORUMS_TABLE . "				SET forum_last_post_id = $new_post_id, forum_posts = forum_posts + 1";			if($mode == "newtopic")			{				$sql .= ", forum_topics = forum_topics + 1";			}			$sql .= " WHERE forum_id = $forum_id";				if($db->sql_query($sql))			{				$sql = "UPDATE " . USERS_TABLE . "					SET user_posts = user_posts + 1					WHERE user_id = " . $user_id;					if($db->sql_query($sql, END_TRANSACTION))				{					// SUCCESS.					return true;				}				else				{					message_die(GENERAL_ERROR, "Error updating users table", "", __LINE__, __FILE__, $sql);				}			}			else			{				message_die(GENERAL_ERROR, "Error updating forums table", "", __LINE__, __FILE__, $sql);			}		}		else		{			// Rollback			if($db->sql_layer == "mysql")			{				$sql = "DELETE FROM " . POSTS_TABLE . "					WHERE post_id = $new_post_id";				$db->sql_query($sql);			}			message_die(GENERAL_ERROR, "Error updating topics table", "", __LINE__, __FILE__, $sql);		}	}	else	{		message_die(GENERAL_ERROR, "Error inserting data into posts table", "", __LINE__, __FILE__, $sql);	}	}function generatepost($size=850){   global $bigass_text;   // Returns a string with a length between $size and $size*0.2   $size = rand(0.2*$size, $size);      $textsize = strlen($bigass_text);   $currentsize = 0;   // Add whole $text multiple times   while($currentsize < $size && $size-$currentsize <= $textsize)   {      $message .= $bigass_text;      $currentsize += $textsize;   }   // Add the remainder number of chars and return it.   $message .= substr($bigass_text, 0, $size-$currentsize);   return (addslashes($message));}         function nrof($table){	global $db;	$sql = "SELECT count(*) AS counted FROM $table";	$result = $db->sql_query($sql);	$topics = $db->sql_fetchrow($result);	return $topics[counted];}function make_user($username){	global $db, $board_config;	$password = md5("benchpass");	$email = "nobody@localhost";	$icq = "12345678";	$website = "http://www.phpbb.com";	$occupation = "phpBB tester";	$location = "phpBB world hq";	$interests = "Eating, sleeping, living, and breathing phpBB";	$signature = "$username: phpBB tester.";	$signature_bbcode_uid = "";	$avatar_filename = "";	$viewemail = 0;	$aim = 0;	$yim = 0;	$msn = 0;	$attachsig = 1;	$allowsmilies = 1;	$allowhtml = 1;	$allowbbcode = 1;	$allowviewonline = 1;	$notifyreply = 0;	$notifypm = 0;	$user_timezone = $board_config['board_timezone'];	$user_dateformat = $board_config['default_dateformat'];	$user_lang = $board_config['default_lang'];	$user_style = $board_config['default_style'];	$sql = "SELECT MAX(user_id) AS total		FROM " . USERS_TABLE;	if($result = $db->sql_query($sql))	{		$row = $db->sql_fetchrow($result);		$new_user_id = $row['total'] + 1;		unset($result);		unset($row);	}	else	{		message_die(GENERAL_ERROR, "Couldn't obtained next user_id information.", "", __LINE__, __FILE__, $sql);	}	$sql = "SELECT MAX(group_id) AS total		FROM " . GROUPS_TABLE;	if($result = $db->sql_query($sql))	{		$row = $db->sql_fetchrow($result);		$new_group_id = $row['total'] + 1;		unset($result);		unset($row);	}	else	{		message_die(GENERAL_ERROR, "Couldn't obtained next user_id information.", "", __LINE__, __FILE__, $sql);	}	$sql = "INSERT INTO " . USERS_TABLE . "	(user_id, username, user_regdate, user_password, user_email, user_icq, user_website, user_occ, user_from, user_interests, user_sig, user_sig_bbcode_uid, user_avatar, user_viewemail, user_aim, user_yim, user_msnm, user_attachsig, user_allowsmilies, user_allowhtml, user_allowbbcode, user_allow_viewonline, user_notify, user_notify_pm, user_timezone, user_dateformat, user_lang, user_style, user_level, user_allow_pm, user_active, user_actkey)		VALUES ($new_user_id, '$username', " . time() . ", '$password', '$email', '$icq', '$website', '$occupation', '$location', '$interests', '$signature', '$signature_bbcode_uid', '$avatar_filename', $viewemail, '$aim', '$yim', '$msn', $attachsig, $allowsmilies, $allowhtml, $allowbbcode, $allowviewonline, $notifyreply, $notifypm, $user_timezone, '$user_dateformat', '$user_lang', $user_style, 0, 1, ";		$sql .= "1, '')";		if($result = $db->sql_query($sql, BEGIN_TRANSACTION))	{		$sql = "INSERT INTO " . GROUPS_TABLE . " (group_id, group_name, group_description, group_single_user, group_moderator)			VALUES ($new_group_id, '', 'Personal User', 1, 0)";		if($result = $db->sql_query($sql))		{			$sql = "INSERT INTO " . USER_GROUP_TABLE . " (user_id, group_id, user_pending)				VALUES ($new_user_id, $new_group_id, 0)";			if($result = $db->sql_query($sql, END_TRANSACTION))			{								// SUCCESS.				return true;			}			else			{				message_die(GENERAL_ERROR, "Couldn't insert data into user_group table", "", __LINE__, __FILE__, $sql);			}		}		else		{			message_die(GENERAL_ERROR, "Couldn't insert data into groups table", "", __LINE__, __FILE__, $sql);		}	}	else	{		message_die(GENERAL_ERROR, "Couldn't insert data into users table", "", __LINE__, __FILE__, $sql);	}}?>
<?php return array(''=>'');
<?php/**** help_bbcode [English]** @package language* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//***/if (!defined('IN_PHPBB')){	exit;}// DEVELOPERS PLEASE NOTE//// All language files should use UTF-8 as their encoding and the files must not contain a BOM.//// Placeholders can now contain order information, e.g. instead of// 'Page %s of %s' you can (and should) write 'Page %1$s of %2$s', this allows// translators to re-order the output of data while ensuring it remains correct//// You do not need this where single placeholders are used, e.g. 'Message %d' is fine// equally where a string contains only two placeholders which are used to wrap text// in a url you again do not need to specify an order e.g., 'Click %sHERE%s' is fine$help = array(	array(		0 => '--',		1 => 'Introduction'	),	array(		0 => 'What is BBCode?',		1 => 'BBCode is a special implementation of HTML. Whether you can actually use BBCode in your posts on the forum is determined by the administrator. In addition you can disable BBCode on a per post basis via the posting form. BBCode itself is similar in style to HTML, tags are enclosed in square brackets [ and ] rather than &lt; and &gt; and it offers greater control over what and how something is displayed. Depending on the template you are using you may find adding BBCode to your posts is made much easier through a clickable interface above the message area on the posting form. Even with this you may find the following guide useful.'	),	array(		0 => '--',		1 => 'Text Formatting'	),	array(		0 => 'How to create bold, italic and underlined text',		1 => 'BBCode includes tags to allow you to quickly change the basic style of your text. This is achieved in the following ways: <ul><li>To make a piece of text bold enclose it in <strong>[b][/b]</strong>, e.g. <br /><br /><strong>[b]</strong>Hello<strong>[/b]</strong><br /><br />will become <strong>Hello</strong></li><li>For underlining use <strong>[u][/u]</strong>, for example:<br /><br /><strong>[u]</strong>Good Morning<strong>[/u]</strong><br /><br />becomes <span style="text-decoration: underline">Good Morning</span></li><li>To italicise text use <strong>[i][/i]</strong>, e.g.<br /><br />This is <strong>[i]</strong>Great!<strong>[/i]</strong><br /><br />would give This is <i>Great!</i></li></ul>'	),	array(		0 => 'How to change the text colour or size',		1 => 'To alter the colour or size of your text the following tags can be used. Keep in mind that how the output appears will depend on the viewers browser and system: <ul><li>Changing the colour of text is achieved by wrapping it in <strong>[color=][/color]</strong>. You can specify either a recognised colour name (eg. red, blue, yellow, etc.) or the hexadecimal triplet alternative, e.g. #FFFFFF, #000000. For example, to create red text you could use:<br /><br /><strong>[color=red]</strong>Hello!<strong>[/color]</strong><br /><br />or<br /><br /><strong>[color=#FF0000]</strong>Hello!<strong>[/color]</strong><br /><br />Both will output <span style="color:red">Hello!</span></li><li>Changing the text size is achieved in a similar way using <strong>[size=][/size]</strong>. This tag is dependent on the template the user has selected but the recommended format is a numerical value representing the text size in percent, starting at 20 (very small) through to 200 (very large) by default. For example:<br /><br /><strong>[size=30]</strong>SMALL<strong>[/size]</strong><br /><br />will generally be <span style="font-size:30%;">SMALL</span><br /><br />whereas:<br /><br /><strong>[size=200]</strong>HUGE!<strong>[/size]</strong><br /><br />will be <span style="font-size:200%;">HUGE!</span></li></ul>'	),	array(		0 => 'Can I combine formatting tags?',		1 => 'Yes, of course you can, for example to get someones attention you may write:<br /><br /><strong>[size=200][color=red][b]</strong>LOOK AT ME!<strong>[/b][/color][/size]</strong><br /><br />this would output <span style="color:red;font-size:200%;"><strong>LOOK AT ME!</strong></span><br /><br />We dont recommend you output lots of text that looks like this though! Remember it is up to you, the poster, to ensure tags are closed correctly. For example the following is incorrect:<br /><br /><strong>[b][u]</strong>This is wrong<strong>[/b][/u]</strong>'	),	array(		0 => '--',		1 => 'Quoting and outputting fixed-width text'	),	array(		0 => 'Quoting text in replies',		1 => 'There are two ways you can quote text, with a reference or without.<ul><li>When you utilise the Quote function to reply to a post on the board you should notice that the post text is added to the message window enclosed in a <strong>[quote=&quot;&quot;][/quote]</strong> block. This method allows you to quote with a reference to a person or whatever else you choose to put! For example to quote a piece of text Mr. Blobby wrote you would enter:<br /><br /><strong>[quote=&quot;Mr. Blobby&quot;]</strong>The text Mr. Blobby wrote would go here<strong>[/quote]</strong><br /><br />The resulting output will automatically add &quot;Mr. Blobby wrote:&quot; before the actual text. Remember you <strong>must</strong> include the quotation marks &quot;&quot; around the name you are quoting, they are not optional.</li><li>The second method allows you to blindly quote something. To utilise this enclose the text in <strong>[quote][/quote]</strong> tags. When you view the message it will simply show the text within a quotation block.</li></ul>'	),	array(		0 => 'Outputting code or fixed width data',		1 => 'If you want to output a piece of code or in fact anything that requires a fixed width, e.g. Courier type font you should enclose the text in <strong>[code][/code]</strong> tags, e.g.<br /><br /><strong>[code]</strong>echo &quot;This is some code&quot;;<strong>[/code]</strong><br /><br />All formatting used within <strong>[code][/code]</strong> tags is retained when you later view it. PHP syntax highlighting can be enabled using <strong>[code=php][/code]</strong> and is recommended when posting PHP code samples as it improves readability.'	),	array(		0 => '--',		1 => 'Generating lists'	),	array(		0 => 'Creating an Unordered list',		1 => 'BBCode supports two types of lists, unordered and ordered. They are essentially the same as their HTML equivalents. An unordered list outputs each item in your list sequentially one after the other indenting each with a bullet character. To create an unordered list you use <strong>[list][/list]</strong> and define each item within the list using <strong>[*]</strong>. For example to list your favourite colours you could use:<br /><br /><strong>[list]</strong><br /><strong>[*]</strong>Red<br /><strong>[*]</strong>Blue<br /><strong>[*]</strong>Yellow<br /><strong>[/list]</strong><br /><br />This would generate the following list:<ul><li>Red</li><li>Blue</li><li>Yellow</li></ul>'	),	array(		0 => 'Creating an Ordered list',		1 => 'The second type of list, an ordered list, gives you control over what is output before each item. To create an ordered list you use <strong>[list=1][/list]</strong> to create a numbered list or alternatively <strong>[list=a][/list]</strong> for an alphabetical list. As with the unordered list, items are specified using <strong>[*]</strong>. For example:<br /><br /><strong>[list=1]</strong><br /><strong>[*]</strong>Go to the shops<br /><strong>[*]</strong>Buy a new computer<br /><strong>[*]</strong>Swear at computer when it crashes<br /><strong>[/list]</strong><br /><br />will generate the following:<ol style="list-style-type: decimal;"><li>Go to the shops</li><li>Buy a new computer</li><li>Swear at computer when it crashes</li></ol>Whereas for an alphabetical list you would use:<br /><br /><strong>[list=a]</strong><br /><strong>[*]</strong>The first possible answer<br /><strong>[*]</strong>The second possible answer<br /><strong>[*]</strong>The third possible answer<br /><strong>[/list]</strong><br /><br />giving<ol style="list-style-type: lower-alpha"><li>The first possible answer</li><li>The second possible answer</li><li>The third possible answer</li></ol>'	),	// This block will switch the FAQ-Questions to the second template column	array(		0 => '--',		1 => '--'	),	array(		0 => '--',		1 => 'Creating Links'	),	array(		0 => 'Linking to another site',		1 => 'phpBB BBCode supports a number of ways of creating URIs (Uniform Resource Indicators) better known as URLs.<ul><li>The first of these uses the <strong>[url=][/url]</strong> tag, whatever you type after the = sign will cause the contents of that tag to act as a URL. For example to link to phpBB.com you could use:<br /><br /><strong>[url=http://www.phpbb.com/]</strong>Visit phpBB!<strong>[/url]</strong><br /><br />This would generate the following link, <a href="http://www.phpbb.com/">Visit phpBB!</a> Please notice that the link opens in the same window or a new window depending on the users browser preferences.</li><li>If you want the URL itself displayed as the link you can do this by simply using:<br /><br /><strong>[url]</strong>http://www.phpbb.com/<strong>[/url]</strong><br /><br />This would generate the following link, <a href="http://www.phpbb.com/">http://www.phpbb.com/</a></li><li>Additionally, phpBB features something called <i>Magic Links</i>, this will turn any syntactically correct URL into a link without you needing to specify any tags or even the leading http://. For example typing www.phpbb.com into your message will automatically lead to <a href="http://www.phpbb.com/">www.phpbb.com</a> being output when you view the message.</li><li>The same thing applies equally to e-mail addresses, you can either specify an address explicitly for example:<br /><br /><strong>[email]</strong>no.one@domain.adr<strong>[/email]</strong><br /><br />which will output <a href="mailto:no.one@domain.adr">no.one@domain.adr</a> or you can just type no.one@domain.adr into your message and it will be automatically converted when you view.</li></ul>As with all the BBCode tags you can wrap URLs around any of the other tags such as <strong>[img][/img]</strong> (see next entry), <strong>[b][/b]</strong>, etc. As with the formatting tags it is up to you to ensure the correct open and close order is following, for example:<br /><br /><strong>[url=http://www.google.com/][img]</strong>http://www.google.com/intl/en_ALL/images/logo.gif<strong>[/url][/img]</strong><br /><br />is <span style="text-decoration: underline">not</span> correct which may lead to your post being deleted so take care.'	),	array(		0 => '--',		1 => 'Showing images in posts'	),	array(		0 => 'Adding an image to a post',		1 => 'phpBB BBCode incorporates a tag for including images in your posts. Two very important things to remember when using this tag are: many users do not appreciate lots of images being shown in posts and secondly the image you display must already be available on the internet (it cannot exist only on your computer for example, unless you run a webserver!). To display an image you must surround the URL pointing to the image with <strong>[img][/img]</strong> tags. For example:<br /><br /><strong>[img]</strong>http://www.google.com/intl/en_ALL/images/logo.gif<strong>[/img]</strong><br /><br />As noted in the URL section above you can wrap an image in a <strong>[url][/url]</strong> tag if you wish, e.g.<br /><br /><strong>[url=http://www.google.com/][img]</strong>http://www.google.com/intl/en_ALL/images/logo.gif<strong>[/img][/url]</strong><br /><br />would generate:<br /><br /><a href="http://www.google.com/"><img src="http://www.google.com/intl/en_ALL/images/logo.gif" alt="" /></a>'	),	array(		0 => 'Adding attachments into a post',		1 => 'Attachments can now be placed in any part of a post by using the new <strong>[attachment=][/attachment]</strong> BBCode, if the attachments functionality has been enabled by a board administrator and if you are given the appropriate permissions to create attachments. Within the posting screen is a drop-down box (respectively a button) for placing attachments inline.'	),	array(		0 => '--',		1 => 'Other matters'	),	array(		0 => 'Can I add my own tags?',		1 => 'If you are an administrator on this board and have the proper permissions, you can add further BBCodes through the Custom BBCodes section.'	));?>
<?php/**** acp_styles [English]** @package language* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** DO NOT CHANGE*/if (!defined('IN_PHPBB')){	exit;}if (empty($lang) || !is_array($lang)){	$lang = array();}// DEVELOPERS PLEASE NOTE//// All language files should use UTF-8 as their encoding and the files must not contain a BOM.//// Placeholders can now contain order information, e.g. instead of// 'Page %s of %s' you can (and should) write 'Page %1$s of %2$s', this allows// translators to re-order the output of data while ensuring it remains correct//// You do not need this where single placeholders are used, e.g. 'Message %d' is fine// equally where a string contains only two placeholders which are used to wrap text// in a url you again do not need to specify an order e.g., 'Click %sHERE%s' is fine$lang = array_merge($lang, array(	'ACP_IMAGESETS_EXPLAIN'	=> 'Imagesets comprise all the button, forum, folder, etc. and other non-style specific images used by the board. Here you can edit, export or delete existing imagesets and import or activate new sets.',	'ACP_STYLES_EXPLAIN'	=> 'Here you can manage the available styles on your board. A style consists of a template, theme and imageset. You may alter existing styles, delete, deactivate, reactivate, create or import new ones. You can also see what a style will look like using the preview function. The current default style is noted by the presence of an asterisk (*). Also listed is the total user count for each style, note that overriding user styles will not be reflected here.',	'ACP_TEMPLATES_EXPLAIN'	=> 'A template set comprises all the markup used to generate the layout of your board. Here you can edit existing template sets, delete, export, import and preview sets. You can also modify the templating code used to generate BBCode.',	'ACP_THEMES_EXPLAIN'	=> 'From here you can create, install, edit, delete and export themes. A theme is the combination of colours and images that are applied to your templates to define the basic look of your board. The range of options open to you depends on the configuration of your server and phpBB installation, see the manual for further details. Please note that when creating new themes the use of an existing theme as a basis is optional.',	'ADD_IMAGESET'			=> 'Create imageset',	'ADD_IMAGESET_EXPLAIN'	=> 'Here you can create a new imageset. Depending on your server configuration and file permissions you may have additional options here. For example you may be able to base this imageset on an existing one. You may also be able to upload or import (from the store directory) a imageset archive. If you upload or import an archive the imageset name can be optionally taken from the archive name (to do this leave the imageset name blank).',	'ADD_STYLE'				=> 'Create style',	'ADD_STYLE_EXPLAIN'		=> 'Here you can create a new style. Depending on your server configuration and file permissions you may have additional options. For example you may be able to base this style on an existing one. You may also be able to upload or import (from the store directory) a style archive. If you upload or import an archive the style name will be determined automatically.',	'ADD_TEMPLATE'			=> 'Create template',	'ADD_TEMPLATE_EXPLAIN'	=> 'Here you can add a new template. Depending on your server configuration and file permissions you may have additional options here. For example you may be able to base this template set on an existing one. You may also be able to upload or import (from the store directory) a template archive. If you upload or import an archive the template name can be optionally taken from the archive name (to do this leave the template name blank).',	'ADD_THEME'				=> 'Create theme',	'ADD_THEME_EXPLAIN'		=> 'Here you can add a new theme. Depending on your server configuration and file permissions you may have additional options here. For example you may be able to base this theme on an existing one. You may also be able to upload or import (from the store directory) a theme archive. If you upload or import an archive the theme name can be optionally taken from the archive name (to do this leave the theme name blank).',	'ARCHIVE_FORMAT'		=> 'Archive file type',	'AUTOMATIC_EXPLAIN'		=> 'Leave blank to attempt automatic detection.',	'BACKGROUND'			=> 'Background',	'BACKGROUND_COLOUR'		=> 'Background colour',	'BACKGROUND_IMAGE'		=> 'Background image',	'BACKGROUND_REPEAT'		=> 'Background repeat',	'BOLD'					=> 'Bold',	'CACHE'							=> 'Cache',	'CACHE_CACHED'					=> 'Cached',	'CACHE_FILENAME'				=> 'Template file',	'CACHE_FILESIZE'				=> 'File size',	'CACHE_MODIFIED'				=> 'Modified',	'CONFIRM_IMAGESET_REFRESH'		=> 'Are you sure you wish to refresh all imageset data? The settings from the imageset configuration file will overwrite all modifications to the imageset which have been carried out with the imageset editor.',	'CONFIRM_TEMPLATE_CLEAR_CACHE'	=> 'Are you sure you wish to clear all cached versions of your template files?',	'CONFIRM_TEMPLATE_REFRESH'		=> 'Are you sure you wish to refresh all template data in the database with the contents of the template files on the filesystem? This will overwrite all modifications which have been carried out with the template editor while the template was stored in the database.',	'CONFIRM_THEME_REFRESH'			=> 'Are you sure you wish to refresh the theme data stored in the database with the contents of the theme on the filesystem? This will overwrite all modifications which have been carried out with the theme editor while the theme was stored in the database.',	'COPYRIGHT'						=> 'Copyright',	'CREATE_IMAGESET'				=> 'Create new imageset',	'CREATE_STYLE'					=> 'Create new style',	'CREATE_TEMPLATE'				=> 'Create new template set',	'CREATE_THEME'					=> 'Create new theme',	'CURRENT_IMAGE'					=> 'Current image',	'DEACTIVATE_DEFAULT'		=> 'You cannot deactivate the default style.',	'DELETE_FROM_FS'			=> 'Delete from filesystem',	'DELETE_IMAGESET'			=> 'Delete imageset',	'DELETE_IMAGESET_EXPLAIN'	=> 'Here you can remove the selected imageset from the database. Please note that there is no undo capability. It is recommended that you first export your set for possible future use.',	'DELETE_STYLE'				=> 'Delete style',	'DELETE_STYLE_EXPLAIN'		=> 'Here you can remove the selected style. Take care in deleting styles, there is no undo capability.',	'DELETE_TEMPLATE'			=> 'Delete template',	'DELETE_TEMPLATE_EXPLAIN'	=> 'Here you can remove the selected template set from the database. Please note that there is no undo capability. It is recommended that you first export your set for possible future use.',	'DELETE_THEME'				=> 'Delete theme',	'DELETE_THEME_EXPLAIN'		=> 'Here you can remove the selected theme from the database. Please note that there is no undo capability. It is recommended that you first export your theme for possible future use.',	'DETAILS'					=> 'Details',	'DIMENSIONS_EXPLAIN'		=> 'Selecting yes here will include width/height parameters.',	'EDIT_DETAILS_IMAGESET'				=> 'Edit imageset details',	'EDIT_DETAILS_IMAGESET_EXPLAIN'		=> 'Here you can edit certain imageset details such as its name.',	'EDIT_DETAILS_STYLE'				=> 'Edit style',	'EDIT_DETAILS_STYLE_EXPLAIN'		=> 'Using the form below you can modify this existing style. You may alter the combination of template, theme and imageset which define the style itself. You may also make the style the default one.',	'EDIT_DETAILS_TEMPLATE'				=> 'Edit template details',	'EDIT_DETAILS_TEMPLATE_EXPLAIN'		=> 'Here you can edit certain template details such as its name. You may also have the option to switch storage of the stylesheet from the filesystem to the database and vice versa. This option depends on your PHP configuration and whether your template set can be written to by the web server.',	'EDIT_DETAILS_THEME'				=> 'Edit theme details',	'EDIT_DETAILS_THEME_EXPLAIN'		=> 'Here you can edit certain theme details such as its name. You may also have the option to switch storage of the stylesheet from the filesystem to the database and vice versa. This option depends on your PHP configuration and whether your stylesheet can be written to by the web server.',	'EDIT_IMAGESET'						=> 'Edit imageset',	'EDIT_IMAGESET_EXPLAIN'				=> 'Here you can edit the individual images which define the imageset. You can also specify dimensions for the image. Dimensions are optional, specifying them can overcome certain rendering issues with some browsers. By not specifying them you reduce the size of the database record a little.',	'EDIT_TEMPLATE'						=> 'Edit template',	'EDIT_TEMPLATE_EXPLAIN'				=> 'Here you can edit your template set directly. Please remember that these edits are permanent and cannot be undone once submitted. If PHP can write to the template files in your styles directory any changes here will be written directly to those files. If PHP cannot write to those files they will be copied into the database and all changes will only be reflected there. Please take care when editing your template set, remember to close all replacement variable terms {XXXX} and conditional statements.',	'EDIT_TEMPLATE_STORED_DB'			=> 'The template file was unwritable so the template set is now stored in the database containing the modified file.',	'EDIT_THEME'						=> 'Edit theme',	'EDIT_THEME_EXPLAIN'				=> 'Here you can edit the selected theme, changing colours, images, etc.',	'EDIT_THEME_STORED_DB'				=> 'The stylesheet file was unwritable so the stylesheet is now stored in the database containing your modification.',	'EDIT_THEME_STORE_PARSED'			=> 'The theme requires that its stylesheet is parsed. This is only possible if its stored in the database.',	'EDITOR_DISABLED'					=> 'The template editor is disabled.',	'EXPORT'							=> 'Export',	'FOREGROUND'			=> 'Foreground',	'FONT_COLOUR'			=> 'Font colour',	'FONT_FACE'				=> 'Font face',	'FONT_FACE_EXPLAIN'		=> 'You can specify multiple fonts separated by commas. If a user doesnt have the first font installed the first other working font will be chosen.',	'FONT_SIZE'				=> 'Font size',	'GLOBAL_IMAGES'			=> 'Global',	'HIDE_CSS'				=> 'Hide raw CSS',	'IMAGE_WIDTH'				=> 'Image width',	'IMAGE_HEIGHT'				=> 'Image height',	'IMAGE'						=> 'Image',	'IMAGE_NAME'				=> 'Image name',	'IMAGE_PARAMETER'			=> 'Parameter',	'IMAGE_VALUE'				=> 'Value',	'IMAGESET_ADDED'			=> 'New imageset added on filesystem.',	'IMAGESET_ADDED_DB'			=> 'New imageset added to database.',	'IMAGESET_DELETED'			=> 'Imageset deleted successfully.',	'IMAGESET_DELETED_FS'		=> 'Imageset removed from database but some files may remain on the filesystem.',	'IMAGESET_DETAILS_UPDATED'	=> 'Imageset details successfully updated.',	'IMAGESET_ERR_ARCHIVE'		=> 'Please select an archive method.',	'IMAGESET_ERR_COPY_LONG'	=> 'The copyright can be no longer than 60 characters.',	'IMAGESET_ERR_NAME_CHARS'	=> 'The imageset name can only contain alphanumeric characters, -, +, _ and space.',	'IMAGESET_ERR_NAME_EXIST'	=> 'A imageset with that name already exists.',	'IMAGESET_ERR_NAME_LONG'	=> 'The imageset name can be no longer than 30 characters.',	'IMAGESET_ERR_NOT_IMAGESET'	=> 'The archive you specified does not contain a valid imageset.',	'IMAGESET_ERR_STYLE_NAME'	=> 'You must supply a name for this imageset.',	'IMAGESET_EXPORT'			=> 'Export imageset',	'IMAGESET_EXPORT_EXPLAIN'	=> 'Here you can export an imageset in the form of an archive. This archive will contain all the data necessary to install the set of images on another board. You may select whether to download the file directly or to place it in your store folder for download later or via FTP.',	'IMAGESET_EXPORTED'			=> 'Imageset exported successfully and stored in %s.',	'IMAGESET_NAME'				=> 'Imageset name',	'IMAGESET_REFRESHED'		=> 'Imageset refreshed successfully.',	'IMAGESET_UPDATED'			=> 'Imageset updated successfully.',	'ITALIC'					=> 'Italic',	'IMG_CAT_BUTTONS'		=> 'Localised buttons',	'IMG_CAT_CUSTOM'		=> 'Custom images',	'IMG_CAT_FOLDERS'		=> 'Topic icons',	'IMG_CAT_FORUMS'		=> 'Forum icons',	'IMG_CAT_ICONS'			=> 'General icons',	'IMG_CAT_LOGOS'			=> 'Logos',	'IMG_CAT_POLLS'			=> 'Polling images',	'IMG_CAT_UI'			=> 'General user interface elements',	'IMG_CAT_USER'			=> 'Additional images',	'IMG_SITE_LOGO'			=> 'Main logo',	'IMG_UPLOAD_BAR'		=> 'Upload progress bar',	'IMG_POLL_LEFT'			=> 'Poll left end',	'IMG_POLL_CENTER'		=> 'Poll centre',	'IMG_POLL_RIGHT'		=> 'Poll right end',	'IMG_ICON_FRIEND'		=> 'Add as friend',	'IMG_ICON_FOE'			=> 'Add as foe',	'IMG_FORUM_LINK'			=> 'Forum link',	'IMG_FORUM_READ'			=> 'Forum',	'IMG_FORUM_READ_LOCKED'		=> 'Forum locked',	'IMG_FORUM_READ_SUBFORUM'	=> 'Subforum',	'IMG_FORUM_UNREAD'			=> 'Forum unread posts',	'IMG_FORUM_UNREAD_LOCKED'	=> 'Forum unread posts locked',	'IMG_FORUM_UNREAD_SUBFORUM'	=> 'Subforum unread posts',	'IMG_SUBFORUM_READ'			=> 'Legend subforum',	'IMG_SUBFORUM_UNREAD'		=> 'Legend subforum unread posts',	'IMG_TOPIC_MOVED'			=> 'Topic moved',	'IMG_TOPIC_READ'				=> 'Topic',	'IMG_TOPIC_READ_MINE'			=> 'Topic posted to',	'IMG_TOPIC_READ_HOT'			=> 'Topic popular',	'IMG_TOPIC_READ_HOT_MINE'		=> 'Topic popular posted to',	'IMG_TOPIC_READ_LOCKED'			=> 'Topic locked',	'IMG_TOPIC_READ_LOCKED_MINE'	=> 'Topic locked posted to',	'IMG_TOPIC_UNREAD'				=> 'Topic unread posts',	'IMG_TOPIC_UNREAD_MINE'			=> 'Topic posted to unread',	'IMG_TOPIC_UNREAD_HOT'			=> 'Topic popular unread posts',	'IMG_TOPIC_UNREAD_HOT_MINE'		=> 'Topic popular posted to unread',	'IMG_TOPIC_UNREAD_LOCKED'		=> 'Topic locked unread',	'IMG_TOPIC_UNREAD_LOCKED_MINE'	=> 'Topic locked posted to unread',	'IMG_STICKY_READ'				=> 'Sticky topic',	'IMG_STICKY_READ_MINE'			=> 'Sticky topic posted to',	'IMG_STICKY_READ_LOCKED'		=> 'Sticky topic locked',	'IMG_STICKY_READ_LOCKED_MINE'	=> 'Sticky topic locked posted to',	'IMG_STICKY_UNREAD'				=> 'Sticky topic unread posts',	'IMG_STICKY_UNREAD_MINE'		=> 'Sticky topic posted to unread',	'IMG_STICKY_UNREAD_LOCKED'		=> 'Sticky topic locked unread posts',	'IMG_STICKY_UNREAD_LOCKED_MINE'	=> 'Sticky topic locked posted to unread',	'IMG_ANNOUNCE_READ'					=> 'Announcement',	'IMG_ANNOUNCE_READ_MINE'			=> 'Announcement posted to',	'IMG_ANNOUNCE_READ_LOCKED'			=> 'Announcement locked',	'IMG_ANNOUNCE_READ_LOCKED_MINE'		=> 'Announcement locked posted to',	'IMG_ANNOUNCE_UNREAD'				=> 'Announcement unread posts',	'IMG_ANNOUNCE_UNREAD_MINE'			=> 'Announcement posted to unread',	'IMG_ANNOUNCE_UNREAD_LOCKED'		=> 'Announcement locked unread posts',	'IMG_ANNOUNCE_UNREAD_LOCKED_MINE'	=> 'Announcement locked posted to unread',	'IMG_GLOBAL_READ'					=> 'Global',	'IMG_GLOBAL_READ_MINE'				=> 'Global posted to',	'IMG_GLOBAL_READ_LOCKED'			=> 'Global locked',	'IMG_GLOBAL_READ_LOCKED_MINE'		=> 'Global locked posted to',	'IMG_GLOBAL_UNREAD'					=> 'Global unread posts',	'IMG_GLOBAL_UNREAD_MINE'			=> 'Global posted to unread',	'IMG_GLOBAL_UNREAD_LOCKED'			=> 'Global locked unread posts',	'IMG_GLOBAL_UNREAD_LOCKED_MINE'		=> 'Global locked posted to unread',	'IMG_PM_READ'		=> 'Read private message',	'IMG_PM_UNREAD'		=> 'Unread private message',	'IMG_ICON_BACK_TOP'		=> 'Top',	'IMG_ICON_CONTACT_AIM'		=> 'AIM',	'IMG_ICON_CONTACT_EMAIL'	=> 'Send e-mail',	'IMG_ICON_CONTACT_ICQ'		=> 'ICQ',	'IMG_ICON_CONTACT_JABBER'	=> 'Jabber',	'IMG_ICON_CONTACT_MSNM'		=> 'MSNM',	'IMG_ICON_CONTACT_PM'		=> 'Send message',	'IMG_ICON_CONTACT_YAHOO'	=> 'YIM',	'IMG_ICON_CONTACT_WWW'		=> 'Website',	'IMG_ICON_POST_DELETE'			=> 'Delete post',	'IMG_ICON_POST_EDIT'			=> 'Edit post',	'IMG_ICON_POST_INFO'			=> 'Show post details',	'IMG_ICON_POST_QUOTE'			=> 'Quote post',	'IMG_ICON_POST_REPORT'			=> 'Report post',	'IMG_ICON_POST_TARGET'			=> 'Minipost',	'IMG_ICON_POST_TARGET_UNREAD'	=> 'New minipost',	'IMG_ICON_TOPIC_ATTACH'			=> 'Attachment',	'IMG_ICON_TOPIC_LATEST'			=> 'Last post',	'IMG_ICON_TOPIC_NEWEST'			=> 'Last unread post',	'IMG_ICON_TOPIC_REPORTED'		=> 'Post reported',	'IMG_ICON_TOPIC_UNAPPROVED'		=> 'Post unapproved',	'IMG_ICON_USER_ONLINE'		=> 'User online',	'IMG_ICON_USER_OFFLINE'		=> 'User offline',	'IMG_ICON_USER_PROFILE'		=> 'Show profile',	'IMG_ICON_USER_SEARCH'		=> 'Search posts',	'IMG_ICON_USER_WARN'		=> 'Warn user',	'IMG_BUTTON_PM_FORWARD'		=> 'Forward private message',	'IMG_BUTTON_PM_NEW'			=> 'New private message',	'IMG_BUTTON_PM_REPLY'		=> 'Reply private message',	'IMG_BUTTON_TOPIC_LOCKED'	=> 'Topic locked',	'IMG_BUTTON_TOPIC_NEW'		=> 'New topic',	'IMG_BUTTON_TOPIC_REPLY'	=> 'Reply topic',	'IMG_USER_ICON1'		=> 'User defined image 1',	'IMG_USER_ICON2'		=> 'User defined image 2',	'IMG_USER_ICON3'		=> 'User defined image 3',	'IMG_USER_ICON4'		=> 'User defined image 4',	'IMG_USER_ICON5'		=> 'User defined image 5',	'IMG_USER_ICON6'		=> 'User defined image 6',	'IMG_USER_ICON7'		=> 'User defined image 7',	'IMG_USER_ICON8'		=> 'User defined image 8',	'IMG_USER_ICON9'		=> 'User defined image 9',	'IMG_USER_ICON10'		=> 'User defined image 10',	'INCLUDE_DIMENSIONS'		=> 'Include dimensions',	'INCLUDE_IMAGESET'			=> 'Include imageset',	'INCLUDE_TEMPLATE'			=> 'Include template',	'INCLUDE_THEME'				=> 'Include theme',	'INHERITING_FROM'			=> 'Inherits from',	'INSTALL_IMAGESET'			=> 'Install imageset',	'INSTALL_IMAGESET_EXPLAIN'	=> 'Here you can install your selected imageset. You can edit certain details if you wish or use the installation defaults.',	'INSTALL_STYLE'				=> 'Install style',	'INSTALL_STYLE_EXPLAIN'		=> 'Here you can install a new style and if appropriate the corresponding style elements. If you already have the relevant style elements installed they will not be overwritten. Some styles require existing style elements to already be installed. If you try installing such a style and do not have the required elements you will be notified.',	'INSTALL_TEMPLATE'			=> 'Install Template',	'INSTALL_TEMPLATE_EXPLAIN'	=> 'Here you can install a new template set. Depending on your server configuration you may have a number of options here.',	'INSTALL_THEME'				=> 'Install theme',	'INSTALL_THEME_EXPLAIN'		=> 'Here you can install your selected theme. You can edit certain details if you wish or use the installation defaults.',	'INSTALLED_IMAGESET'		=> 'Installed imagesets',	'INSTALLED_STYLE'			=> 'Installed styles',	'INSTALLED_TEMPLATE'		=> 'Installed templates',	'INSTALLED_THEME'			=> 'Installed themes',	'KEEP_IMAGESET'				=> 'Keep %s imageset',	'KEEP_TEMPLATE'				=> 'Keep %s template',	'KEEP_THEME'				=> 'Keep %s theme',	'LINE_SPACING'				=> 'Line spacing',	'LOCALISED_IMAGES'			=> 'Localised',	'LOCATION_DISABLED_EXPLAIN'	=> 'This setting is inherited and cannot be changed.',	'NO_CLASS'					=> 'Cannot find class in stylesheet.',	'NO_IMAGESET'				=> 'Cannot find imageset on filesystem.',	'NO_IMAGE'					=> 'No image',	'NO_IMAGE_ERROR'			=> 'Cannot find image on filesystem.',	'NO_STYLE'					=> 'Cannot find style on filesystem.',	'NO_TEMPLATE'				=> 'Cannot find template on filesystem.',	'NO_THEME'					=> 'Cannot find theme on filesystem.',	'NO_UNINSTALLED_IMAGESET'	=> 'No uninstalled imagesets detected.',	'NO_UNINSTALLED_STYLE'		=> 'No uninstalled styles detected.',	'NO_UNINSTALLED_TEMPLATE'	=> 'No uninstalled templates detected.',	'NO_UNINSTALLED_THEME'		=> 'No uninstalled themes detected.',	'NO_UNIT'					=> 'None',	'ONLY_IMAGESET'			=> 'This is the only remaining imageset, you cannot delete it.',	'ONLY_STYLE'			=> 'This is the only remaining style, you cannot delete it.',	'ONLY_TEMPLATE'			=> 'This is the only remaining template set, you cannot delete it.',	'ONLY_THEME'			=> 'This is the only remaining theme, you cannot delete it.',	'OPTIONAL_BASIS'		=> 'Optional basis',	'REFRESH'					=> 'Refresh',	'REPEAT_NO'					=> 'None',	'REPEAT_X'					=> 'Only horizontally',	'REPEAT_Y'					=> 'Only vertically',	'REPEAT_ALL'				=> 'Both directions',	'REPLACE_IMAGESET'			=> 'Replace imageset with',	'REPLACE_IMAGESET_EXPLAIN'	=> 'This imageset will replace the one you are deleting in any styles that use it.',	'REPLACE_STYLE'				=> 'Replace style with',	'REPLACE_STYLE_EXPLAIN'		=> 'This style will replace the one being deleted for members that use it.',	'REPLACE_TEMPLATE'			=> 'Replace template with',	'REPLACE_TEMPLATE_EXPLAIN'	=> 'This template set will replace the one you are deleting in any styles that use it.',	'REPLACE_THEME'				=> 'Replace theme with',	'REPLACE_THEME_EXPLAIN'		=> 'This theme will replace the one you are deleting in any styles that use it.',	'REPLACE_WITH_OPTION'		=> 'Replace with %s',	'REQUIRES_IMAGESET'			=> 'This style requires the %s imageset to be installed.',	'REQUIRES_TEMPLATE'			=> 'This style requires the %s template set to be installed.',	'REQUIRES_THEME'			=> 'This style requires the %s theme to be installed.',	'SELECT_IMAGE'				=> 'Select image',	'SELECT_TEMPLATE'			=> 'Select template file',	'SELECT_THEME'				=> 'Select theme file',	'SELECTED_IMAGE'			=> 'Selected image',	'SELECTED_IMAGESET'			=> 'Selected imageset',	'SELECTED_TEMPLATE'			=> 'Selected template',	'SELECTED_TEMPLATE_FILE'	=> 'Selected template file',	'SELECTED_THEME'			=> 'Selected theme',	'SELECTED_THEME_FILE'		=> 'Selected theme file',	'STORE_DATABASE'			=> 'Database',	'STORE_FILESYSTEM'			=> 'Filesystem',	'STYLE_ACTIVATE'			=> 'Activate',	'STYLE_ACTIVE'				=> 'Active',	'STYLE_ADDED'				=> 'Style added successfully.',	'STYLE_DEACTIVATE'			=> 'Deactivate',	'STYLE_DEFAULT'				=> 'Make default style',	'STYLE_DELETED'				=> 'Style deleted successfully.',	'STYLE_DETAILS_UPDATED'		=> 'Style edited successfully.',	'STYLE_ERR_ARCHIVE'			=> 'Please select an archive method.',	'STYLE_ERR_COPY_LONG'		=> 'The copyright can be no longer than 60 characters.',	'STYLE_ERR_MORE_ELEMENTS'	=> 'You must select at least one style element.',	'STYLE_ERR_NAME_CHARS'		=> 'The style name can only contain alphanumeric characters, -, +, _ and space.',	'STYLE_ERR_NAME_EXIST'		=> 'A style with that name already exists.',	'STYLE_ERR_NAME_LONG'		=> 'The style name can be no longer than 30 characters.',	'STYLE_ERR_NO_IDS'			=> 'You must select a template, theme and imageset for this style.',	'STYLE_ERR_NOT_STYLE'		=> 'The imported or uploaded file did not contain a valid style archive.',	'STYLE_ERR_STYLE_NAME'		=> 'You must supply a name for this style.',	'STYLE_EXPORT'				=> 'Export style',	'STYLE_EXPORT_EXPLAIN'		=> 'Here you can export a style in the form of an archive. A style does not need to contain all elements but it must contain at least one. For example if you have created a new theme and imageset for a commonly used template you could simply export the theme and imageset and omit the template. You may select whether to download the file directly or to place it in your store folder for download later or via FTP.',	'STYLE_EXPORTED'			=> 'Style exported successfully and stored in %s.',	'STYLE_IMAGESET'			=> 'Imageset',	'STYLE_NAME'				=> 'Style name',	'STYLE_TEMPLATE'			=> 'Template',	'STYLE_THEME'				=> 'Theme',	'STYLE_USED_BY'				=> 'Used by (including robots)',	'TEMPLATE_ADDED'			=> 'Template set added and stored on filesystem.',	'TEMPLATE_ADDED_DB'			=> 'Template set added and stored in database.',	'TEMPLATE_CACHE'			=> 'Template cache',	'TEMPLATE_CACHE_EXPLAIN'	=> 'By default phpBB caches the compiled version of its templates. This decreases the load on the server each time a page is viewed and thus may reduce the page generation time. Here you can view the cache status of each file and delete individual files or the entire cache.',	'TEMPLATE_CACHE_CLEARED'	=> 'Template cache cleared successfully.',	'TEMPLATE_CACHE_EMPTY'		=> 'There are no cached templates.',	'TEMPLATE_DELETED'			=> 'Template set deleted successfully.',	'TEMPLATE_DELETE_DEPENDENT'	=> 'The template set cannot be deleted as there are one or more other template sets inheriting from it:',	'TEMPLATE_DELETED_FS'		=> 'Template set removed from database but some files may remain on the filesystem.',	'TEMPLATE_DETAILS_UPDATED'	=> 'Template details successfully updated.',	'TEMPLATE_EDITOR'			=> 'Raw HTML template editor',	'TEMPLATE_EDITOR_HEIGHT'	=> 'Template editor height',	'TEMPLATE_ERR_ARCHIVE'		=> 'Please select an archive method.',	'TEMPLATE_ERR_CACHE_READ'	=> 'The cache directory used to store cached versions of template files could not be opened.',	'TEMPLATE_ERR_COPY_LONG'	=> 'The copyright can be no longer than 60 characters.',	'TEMPLATE_ERR_NAME_CHARS'	=> 'The template name can only contain alphanumeric characters, -, +, _ and space.',	'TEMPLATE_ERR_NAME_EXIST'	=> 'A template set with that name already exists.',	'TEMPLATE_ERR_NAME_LONG'	=> 'The template name can be no longer than 30 characters.',	'TEMPLATE_ERR_NOT_TEMPLATE'	=> 'The archive you specified does not contain a valid template set.',	'TEMPLATE_ERR_REQUIRED_OR_INCOMPLETE' => 'The new template set requires the template %s to be installed and not inheriting itself.',	'TEMPLATE_ERR_STYLE_NAME'	=> 'You must supply a name for this template.',	'TEMPLATE_EXPORT'			=> 'Export templates',	'TEMPLATE_EXPORT_EXPLAIN'	=> 'Here you can export a template set in the form of an archive. This archive will contain all the files necessary to install the templates on another board. You may select whether to download the file directly or to place it in your store folder for download later or via FTP.',	'TEMPLATE_EXPORTED'			=> 'Templates exported successfully and stored in %s.',	'TEMPLATE_FILE'				=> 'Template file',	'TEMPLATE_FILE_UPDATED'		=> 'Template file updated successfully.',	'TEMPLATE_INHERITS'			=> 'This template sets inherits from %s and thus cannot have a different storage setting than its super template.',	'TEMPLATE_LOCATION'			=> 'Store templates in',	'TEMPLATE_LOCATION_EXPLAIN'	=> 'Images are always stored on the filesystem.',	'TEMPLATE_NAME'				=> 'Template name',	'TEMPLATE_FILE_NOT_WRITABLE'=> 'Unable to write to template file %s. Please check the permissions for the directory and the files.',	'TEMPLATE_REFRESHED'		=> 'Template refreshed successfully.',	'THEME_ADDED'				=> 'New theme added on filesystem.',	'THEME_ADDED_DB'			=> 'New theme added to database.',	'THEME_CLASS_ADDED'			=> 'Custom class added successfully.',	'THEME_DELETED'				=> 'Theme deleted successfully.',	'THEME_DELETED_FS'			=> 'Theme removed from database but files remain on the filesystem.',	'THEME_DETAILS_UPDATED'		=> 'Theme details successfully updated.',	'THEME_EDITOR'				=> 'Theme editor',	'THEME_EDITOR_HEIGHT'		=> 'Theme editor height',	'THEME_ERR_ARCHIVE'			=> 'Please select an archive method.',	'THEME_ERR_CLASS_CHARS'		=> 'Only alphanumeric characters plus ., :, -, _ and # are valid in class names.',	'THEME_ERR_COPY_LONG'		=> 'The copyright can be no longer than 60 characters.',	'THEME_ERR_NAME_CHARS'		=> 'The theme name can only contain alphanumeric characters, -, +, _ and space.',	'THEME_ERR_NAME_EXIST'		=> 'A theme with that name already exists.',	'THEME_ERR_NAME_LONG'		=> 'The theme name can be no longer than 30 characters.',	'THEME_ERR_NOT_THEME'		=> 'The archive you specified does not contain a valid theme.',	'THEME_ERR_REFRESH_FS'		=> 'This theme is stored on the filesystem so there is no need to refresh it.',	'THEME_ERR_STYLE_NAME'		=> 'You must supply a name for this theme.',	'THEME_FILE'				=> 'Theme file',	'THEME_EXPORT'				=> 'Export Theme',	'THEME_EXPORT_EXPLAIN'		=> 'Here you can export a theme in the form of an archive. This archive will contain all the data necessary to install the theme on another board. You may select whether to download the file directly or to place it in your store folder for download later or via FTP.',	'THEME_EXPORTED'			=> 'Theme exported successfully and stored in %s.',	'THEME_LOCATION'			=> 'Store stylesheet in',	'THEME_LOCATION_EXPLAIN'	=> 'Images are always stored on the filesystem.',	'THEME_NAME'				=> 'Theme name',	'THEME_REFRESHED'			=> 'Theme refreshed successfully.',	'THEME_UPDATED'				=> 'Theme updated successfully.',	'UNDERLINE'				=> 'Underline',	'UNINSTALLED_IMAGESET'	=> 'Uninstalled imagesets',	'UNINSTALLED_STYLE'		=> 'Uninstalled styles',	'UNINSTALLED_TEMPLATE'	=> 'Uninstalled templates',	'UNINSTALLED_THEME'		=> 'Uninstalled themes',	'UNSET'					=> 'Undefined',));?>
<?php/**** @package install* @version $Id$* @copyright (c) 2006 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** NOTE to potential convertor authors. Please use this file to get* familiar with the structure since we added some bare explanations here.** Since this file gets included more than once on one page you are not able to add functions to it.* Instead use a functions_ file.** @ignore*/if (!defined('IN_PHPBB')){	exit;}include($phpbb_root_path . 'config.' . $phpEx);unset($dbpasswd);/*** $convertor_data provides some basic information about this convertor which is* used on the initial list of convertors and to populate the default settings*/$convertor_data = array(	'forum_name'	=> 'phpBB 2.0.x',	'version'		=> '1.0.3',	'phpbb_version'	=> '3.0.10',	'author'		=> '<a href="http://www.phpbb.com/">phpBB Group</a>',	'dbms'			=> $dbms,	'dbhost'		=> $dbhost,	'dbport'		=> $dbport,	'dbuser'		=> $dbuser,	'dbpasswd'		=> '',	'dbname'		=> $dbname,	'table_prefix'	=> 'phpbb_',	'forum_path'	=> '../forums',	'author_notes'	=> '',);/*** $tables is a list of the tables (minus prefix) which we expect to find in the* source forum. It is used to guess the prefix if the specified prefix is incorrect*/$tables = array(	'auth_access',	'banlist',	'categories',	'disallow',	'forum_prune',	'forums',	'groups',	'posts',	'posts_text',	'privmsgs',	'privmsgs_text',	'ranks',	'smilies',	'topics',	'topics_watch',	'user_group',	'users',	'vote_desc',	'vote_results',	'vote_voters',	'words');/*** $config_schema details how the board configuration information is stored in the source forum.** 'table_format' can take the value 'file' to indicate a config file. In this case array_name* is set to indicate the name of the array the config values are stored in* Example of using a file:* $config_schema = array(* 	'table_format'	=>	'file',* 	'filename'	=>	'NAME OF FILE', // If the file is not in the root directory, the path needs to be added with no leading slash* 	'array_name' => 'NAME OF ARRAY', // Only used if the configuration file stores the setting in an array.* 	'settings'		=>	array(*        'board_email' => 'SUPPORT_EMAIL', // target config name => source target name* 	)* );* 'table_format' can be an array if the values are stored in a table which is an assosciative array* (as per phpBB 2.0.x)* If left empty, values are assumed to be stored in a table where each config setting is* a column (as per phpBB 1.x)** In either of the latter cases 'table_name' indicates the name of the table in the database** 'settings' is an array which maps the name of the config directive in the source forum* to the config directive in phpBB3. It can either be a direct mapping or use a function.* Please note that the contents of the old config value are passed to the function, therefore* an in-built function requiring the variable passed by reference is not able to be used. Since* empty() is such a function we created the function is_empty() to be used instead.*/$config_schema = array(	'table_name'	=>	'config',	'table_format'	=>	array('config_name' => 'config_value'),	'settings'		=>	array(		'allow_bbcode'			=> 'allow_bbcode',		'allow_smilies'			=> 'allow_smilies',		'allow_sig'				=> 'allow_sig',		'allow_namechange'		=> 'allow_namechange',		'allow_avatar_local'	=> 'allow_avatar_local',		'allow_avatar_remote'	=> 'allow_avatar_remote',		'allow_avatar_upload'	=> 'allow_avatar_upload',		'board_disable'			=> 'board_disable',		'sitename'				=> 'phpbb_set_encoding(sitename)',		'site_desc'				=> 'phpbb_set_encoding(site_desc)',		'session_length'		=> 'session_length',		'board_email_sig'		=> 'phpbb_set_encoding(board_email_sig)',		'posts_per_page'		=> 'posts_per_page',		'topics_per_page'		=> 'topics_per_page',		'enable_confirm'		=> 'enable_confirm',		'board_email_form'		=> 'board_email_form',		'override_user_style'	=> 'override_user_style',		'hot_threshold'			=> 'hot_threshold',		'max_poll_options'		=> 'max_poll_options',		'max_sig_chars'			=> 'max_sig_chars',		'pm_max_msgs'			=> 'max_inbox_privmsgs',		'smtp_delivery'			=> 'smtp_delivery',		'smtp_host'				=> 'smtp_host',		'smtp_username'			=> 'smtp_username',		'smtp_password'			=> 'smtp_password',		'require_activation'	=> 'require_activation',		'flood_interval'		=> 'flood_interval',		'avatar_filesize'		=> 'avatar_filesize',		'avatar_max_width'		=> 'avatar_max_width',		'avatar_max_height'		=> 'avatar_max_height',		'default_dateformat'	=> 'phpbb_set_encoding(default_dateformat)',		'board_timezone'		=> 'board_timezone',		'allow_privmsg'			=> 'not(privmsg_disable)',		'gzip_compress'			=> 'gzip_compress',		'coppa_enable'			=> '!is_empty(coppa_mail)',		'coppa_fax'				=> 'coppa_fax',		'coppa_mail'			=> 'coppa_mail',		'record_online_users'	=> 'record_online_users',		'record_online_date'	=> 'record_online_date',		'board_startdate'		=> 'board_startdate',	));/*** $test_file is the name of a file which is present on the source* forum which can be used to check that the path specified by the* user was correct*/$test_file = 'modcp.php';/*** If this is set then we are not generating the first page of information but getting the conversion information.*/if (!$get_info){	// Test to see if the birthday MOD is installed on the source forum	// Niels' birthday mod	if (get_config_value('birthday_required') !== false || get_config_value('bday_require') !== false)	{		define('MOD_BIRTHDAY', true);	}	// TerraFrost's validated birthday mod	if (get_config_value('bday_require') !== false)	{		define('MOD_BIRTHDAY_TERRA', true);	}	// Test to see if the attachment MOD is installed on the source forum	// If it is, we will convert this data as well	$src_db->sql_return_on_error(true);	$sql = "SELECT config_value		FROM {$convert->src_table_prefix}attachments_config		WHERE config_name = 'upload_dir'";	$result = $src_db->sql_query($sql);	if ($result && $row = $src_db->sql_fetchrow($result))	{		// Here the constant is defined		define('MOD_ATTACHMENT', true);		// Here i add more tables to be checked in the old forum		$tables += array(			'attachments',			'attachments_desc',			'extensions',			'extension_groups'		);		$src_db->sql_freeresult($result);	}	else if ($result)	{		$src_db->sql_freeresult($result);	}	/**	* Tests for further MODs can be included here.	* Please use constants for this, prefixing them with MOD_	*/	$src_db->sql_return_on_error(false);	// Now let us set a temporary config variable for user id incrementing	$sql = "SELECT user_id		FROM {$convert->src_table_prefix}users		WHERE user_id = 1";	$result = $src_db->sql_query($sql);	$user_id = (int) $src_db->sql_fetchfield('user_id');	$src_db->sql_freeresult($result);	// If there is a user id 1, we need to increment user ids. :/	if ($user_id === 1)	{		// Try to get the maximum user id possible...		$sql = "SELECT MAX(user_id) AS max_user_id			FROM {$convert->src_table_prefix}users";		$result = $src_db->sql_query($sql);		$user_id = (int) $src_db->sql_fetchfield('max_user_id');		$src_db->sql_freeresult($result);		set_config('increment_user_id', ($user_id + 1), true);	}	else	{		set_config('increment_user_id', 0, true);	}	// Overwrite maximum avatar width/height	@define('DEFAULT_AVATAR_X_CUSTOM', get_config_value('avatar_max_width'));	@define('DEFAULT_AVATAR_Y_CUSTOM', get_config_value('avatar_max_height'));	// additional table used only during conversion	@define('USERCONV_TABLE', $table_prefix . 'userconv');/***	Description on how to use the convertor framework.**	'schema' Syntax Description*		-> 'target'			=> Target Table. If not specified the next table will be handled*		-> 'primary'		=> Primary Key. If this is specified then this table is processed in batches*		-> 'query_first'	=> array('target' or 'src', Query to execute before beginning the process*								(if more than one then specified as array))*		-> 'function_first'	=> Function to execute before beginning the process (if more than one then specified as array)*								(This is mostly useful if variables need to be given to the converting process)*		-> 'test_file'		=> This is not used at the moment but should be filled with a file from the old installation**		// DB Functions*		'distinct'	=> Add DISTINCT to the select query*		'where'		=> Add WHERE to the select query*		'group_by'	=> Add GROUP BY to the select query*		'left_join'	=> Add LEFT JOIN to the select query (if more than one joins specified as array)*		'having'	=> Add HAVING to the select query**		// DB INSERT array*		This one consist of three parameters*		First Parameter:*							The key need to be filled within the target table*							If this is empty, the target table gets not assigned the source value*		Second Parameter:*							Source value. If the first parameter is specified, it will be assigned this value.*							If the first parameter is empty, this only gets added to the select query*		Third Parameter:*							Custom Function. Function to execute while storing source value into target table.*							The functions return value get stored.*							The function parameter consist of the value of the second parameter.**							types:*								- empty string == execute nothing*								- string == function to execute*								- array == complex execution instructions**		Complex execution instructions:*		@todo test complex execution instructions - in theory they will work fine**							By defining an array as the third parameter you are able to define some statements to be executed. The key*							is defining what to execute, numbers can be appended...**							'function' => execute function*							'execute' => run code, whereby all occurrences of {VALUE} get replaced by the last returned value.*										The result *must* be assigned/stored to {RESULT}.*							'typecast'	=> typecast value**							The returned variables will be made always available to the next function to continue to work with.**							example (variable inputted is an integer of 1):**							array(*								'function1'		=> 'increment_by_one',		// returned variable is 2*								'typecast'		=> 'string',				// typecast variable to be a string*								'execute'		=> '{RESULT} = {VALUE} . ' is good';', // returned variable is '2 is good'*								'function2'		=> 'replace_good_with_bad',				// returned variable is '2 is bad'*							),**/	$convertor = array(		'test_file'				=> 'viewtopic.php',		'avatar_path'			=> get_config_value('avatar_path') . '/',		'avatar_gallery_path'	=> get_config_value('avatar_gallery_path') . '/',		'smilies_path'			=> get_config_value('smilies_path') . '/',		'upload_path'			=> (defined('MOD_ATTACHMENT')) ? phpbb_get_files_dir() . '/' : '',		'thumbnails'			=> (defined('MOD_ATTACHMENT')) ? array('thumbs/', 't_') : '',		'ranks_path'			=> false, // phpBB 2.0.x had no config value for a ranks path		// We empty some tables to have clean data available		'query_first'			=> array(			array('target', $convert->truncate_statement . SEARCH_RESULTS_TABLE),			array('target', $convert->truncate_statement . SEARCH_WORDLIST_TABLE),			array('target', $convert->truncate_statement . SEARCH_WORDMATCH_TABLE),			array('target', $convert->truncate_statement . LOG_TABLE),		),//	with this you are able to import all attachment files on the fly. For large boards this is not an option, therefore commented out by default.//	Instead every file gets copied while processing the corresponding attachment entry.//		if (defined("MOD_ATTACHMENT")) { import_attachment_files(); phpbb_copy_thumbnails(); }		// phpBB2 allowed some similar usernames to coexist which would have the same		// username_clean in phpBB3 which is not possible, so we'll give the admin a list		// of user ids and usernames and let him deicde what he wants to do with them		'execute_first'	=> '			phpbb_create_userconv_table();			import_avatar_gallery();			if (defined("MOD_ATTACHMENT")) phpbb_import_attach_config();			phpbb_insert_forums();		',		'execute_last'	=> array('			add_bots();		', '			update_folder_pm_count();		', '			update_unread_count();		', '			phpbb_convert_authentication(\'start\');		', '			phpbb_convert_authentication(\'first\');		', '			phpbb_convert_authentication(\'second\');		', '			phpbb_convert_authentication(\'third\');		'),		'schema' => array(			array(				'target'	=> USERCONV_TABLE,				'query_first'   => array('target', $convert->truncate_statement . USERCONV_TABLE),				array('user_id',			'users.user_id', 	''),				array('username_clean',		'users.username',	array('function1' => 'phpbb_set_encoding', 'function2' => 'utf8_clean_string')),			),			array(				'target'		=> (defined('MOD_ATTACHMENT')) ? ATTACHMENTS_TABLE : '',				'primary'		=> 'attachments.attach_id',				'query_first'	=> (defined('MOD_ATTACHMENT')) ? array('target', $convert->truncate_statement . ATTACHMENTS_TABLE) : '',				'autoincrement'	=> 'attach_id',				array('attach_id',				'attachments.attach_id',				''),				array('post_msg_id',			'attachments.post_id',					''),				array('topic_id',				'posts.topic_id',						''),				array('in_message',				0,										''),				array('is_orphan',				0,										''),				array('poster_id',				'attachments.user_id_1 AS poster_id',	'phpbb_user_id'),				array('physical_filename',		'attachments_desc.physical_filename',	'import_attachment'),				array('real_filename',			'attachments_desc.real_filename',		'phpbb_set_encoding'),				array('download_count',			'attachments_desc.download_count',		''),				array('attach_comment',			'attachments_desc.comment',				array('function1' => 'phpbb_set_encoding', 'function2' => 'utf8_htmlspecialchars')),				array('extension',				'attachments_desc.extension',			''),				array('mimetype',				'attachments_desc.mimetype',			''),				array('filesize',				'attachments_desc.filesize',			''),				array('filetime',				'attachments_desc.filetime',			''),				array('thumbnail',				'attachments_desc.thumbnail',			''),				'where'			=> 'attachments_desc.attach_id = attachments.attach_id AND attachments.privmsgs_id = 0 AND posts.post_id = attachments.post_id',				'group_by'		=> 'attachments.attach_id'			),			array(				'target'		=> (defined('MOD_ATTACHMENT')) ? ATTACHMENTS_TABLE : '',				'primary'		=> 'attachments.attach_id',				'autoincrement'	=> 'attach_id',				array('attach_id',				'attachments.attach_id',				''),				array('post_msg_id',			'attachments.privmsgs_id',				''),				array('topic_id',				0,										''),				array('in_message',				1,										''),				array('is_orphan',				0,										''),				array('poster_id',				'attachments.user_id_1 AS poster_id',	'phpbb_user_id'),				array('physical_filename',		'attachments_desc.physical_filename',	'import_attachment'),				array('real_filename',			'attachments_desc.real_filename',		''),				array('download_count',			'attachments_desc.download_count',		''),				array('attach_comment',			'attachments_desc.comment',				array('function1' => 'phpbb_set_encoding', 'function2' => 'utf8_htmlspecialchars')),				array('extension',				'attachments_desc.extension',			''),				array('mimetype',				'attachments_desc.mimetype',			''),				array('filesize',				'attachments_desc.filesize',			''),				array('filetime',				'attachments_desc.filetime',			''),				array('thumbnail',				'attachments_desc.thumbnail',			''),				'where'			=> 'attachments_desc.attach_id = attachments.attach_id AND attachments.post_id = 0',				'group_by'		=> 'attachments.attach_id'			),			array(				'target'		=> (defined('MOD_ATTACHMENT')) ? EXTENSIONS_TABLE : '',				'query_first'	=> (defined('MOD_ATTACHMENT')) ? array('target', $convert->truncate_statement . EXTENSIONS_TABLE) : '',				'autoincrement'	=> 'extension_id',				array('extension_id',			'extensions.ext_id',				''),				array('group_id',				'extensions.group_id',				''),				array('extension',				'extensions.extension',				''),			),			array(				'target'		=> (defined('MOD_ATTACHMENT')) ? EXTENSION_GROUPS_TABLE : '',				'query_first'	=> (defined('MOD_ATTACHMENT')) ? array('target', $convert->truncate_statement . EXTENSION_GROUPS_TABLE) : '',				'autoincrement'	=> 'group_id',				array('group_id',				'extension_groups.group_id',			''),				array('group_name',				'extension_groups.group_name',			array('function1' => 'phpbb_set_encoding', 'function2' => 'utf8_htmlspecialchars')),				array('cat_id',					'extension_groups.cat_id',				'phpbb_attachment_category'),				array('allow_group',			'extension_groups.allow_group',			''),				array('download_mode',			1,										''),				array('upload_icon',			'',										''),				array('max_filesize',			'extension_groups.max_filesize',		''),				array('allowed_forums',			'extension_groups.forum_permissions',	'phpbb_attachment_forum_perms'),				array('allow_in_pm',			1,										''),			),			array(				'target'		=> BANLIST_TABLE,				'execute_first'	=> 'phpbb_check_username_collisions();',				'query_first'	=> array('target', $convert->truncate_statement . BANLIST_TABLE),				array('ban_ip',					'banlist.ban_ip',					'decode_ban_ip'),				array('ban_userid',				'banlist.ban_userid',				'phpbb_user_id'),				array('ban_email',				'banlist.ban_email',				''),				array('ban_reason',				'',									''),				array('ban_give_reason',		'',									''),				'where'			=> "banlist.ban_ip NOT LIKE '%.%'",			),			array(				'target'		=> BANLIST_TABLE,				array('ban_ip',					'banlist.ban_ip',	''),				array('ban_userid',				0,					''),				array('ban_email',				'',					''),				array('ban_reason',				'',					''),				array('ban_give_reason',		'',					''),				'where'			=> "banlist.ban_ip LIKE '%.%'",			),			array(				'target'		=> DISALLOW_TABLE,				'query_first'	=> array('target', $convert->truncate_statement . DISALLOW_TABLE),				array('disallow_username',		'disallow.disallow_username',				'phpbb_disallowed_username'),			),			array(				'target'		=> RANKS_TABLE,				'query_first'	=> array('target', $convert->truncate_statement . RANKS_TABLE),				'autoincrement'	=> 'rank_id',				array('rank_id',					'ranks.rank_id',				''),				array('rank_title',					'ranks.rank_title',				array('function1' => 'phpbb_set_default_encoding', 'function2' => 'utf8_htmlspecialchars')),				array('rank_min',					'ranks.rank_min',				array('typecast' => 'int', 'execute' => '{RESULT} = ({VALUE}[0] < 0) ? 0 : {VALUE}[0];')),				array('rank_special',				'ranks.rank_special',			''),				array('rank_image',					'ranks.rank_image',				'import_rank'),			),			array(				'target'		=> TOPICS_TABLE,				'query_first'	=> array('target', $convert->truncate_statement . TOPICS_TABLE),				'primary'		=> 'topics.topic_id',				'autoincrement'	=> 'topic_id',				array('topic_id',				'topics.topic_id',					''),				array('forum_id',				'topics.forum_id',					''),				array('icon_id',				0,									''),				array('topic_poster',			'topics.topic_poster AS poster_id',	'phpbb_user_id'),				array('topic_attachment',		((defined('MOD_ATTACHMENT')) ? 'topics.topic_attachment' : 0), ''),				array('topic_title',			'topics.topic_title',				'phpbb_set_encoding'),				array('topic_time',				'topics.topic_time',				''),				array('topic_views',			'topics.topic_views',				''),				array('topic_replies',			'topics.topic_replies',				''),				array('topic_replies_real',		'topics.topic_replies',				''),				array('topic_last_post_id',		'topics.topic_last_post_id',		''),				array('topic_status',			'topics.topic_status',				'is_topic_locked'),				array('topic_moved_id',			0,									''),				array('topic_type',				'topics.topic_type',				'phpbb_convert_topic_type'),				array('topic_first_post_id',	'topics.topic_first_post_id',		''),				array('topic_last_view_time',	'posts.post_time',					'intval'),				array('poll_title',				'vote_desc.vote_text',				array('function1' => 'null_to_str', 'function2' => 'phpbb_set_encoding', 'function3' => 'htmlspecialchars_decode', 'function4' => 'utf8_htmlspecialchars')),				array('poll_start',				'vote_desc.vote_start',				'null_to_zero'),				array('poll_length',			'vote_desc.vote_length',			'null_to_zero'),				array('poll_max_options',		1,									''),				array('poll_vote_change',		0,									''),				'left_join'		=>	array (	'topics LEFT JOIN vote_desc ON topics.topic_id = vote_desc.topic_id AND topics.topic_vote = 1',											'topics LEFT JOIN posts ON topics.topic_last_post_id = posts.post_id',									),				'where'			=> 'topics.topic_moved_id = 0',			),			array(				'target'		=> TOPICS_TABLE,				'primary'		=> 'topics.topic_id',				'autoincrement'	=> 'topic_id',				array('topic_id',				'topics.topic_id',					''),				array('forum_id',				'topics.forum_id',					''),				array('icon_id',				0,									''),				array('topic_poster',			'topics.topic_poster AS poster_id',	'phpbb_user_id'),				array('topic_attachment',		((defined('MOD_ATTACHMENT')) ? 'topics.topic_attachment' : 0), ''),				array('topic_title',			'topics.topic_title',				'phpbb_set_encoding'),				array('topic_time',				'topics.topic_time',				''),				array('topic_views',			'topics.topic_views',				''),				array('topic_replies',			'topics.topic_replies',				''),				array('topic_replies_real',		'topics.topic_replies',				''),				array('topic_last_post_id',		'topics.topic_last_post_id',		''),				array('topic_status',			ITEM_MOVED,							''),				array('topic_moved_id',			'topics.topic_moved_id',			''),				array('topic_type',				'topics.topic_type',				'phpbb_convert_topic_type'),				array('topic_first_post_id',	'topics.topic_first_post_id',		''),				array('poll_title',				'vote_desc.vote_text',				array('function1' => 'null_to_str', 'function2' => 'phpbb_set_encoding', 'function3' => 'htmlspecialchars_decode', 'function4' => 'utf8_htmlspecialchars')),				array('poll_start',				'vote_desc.vote_start',				'null_to_zero'),				array('poll_length',			'vote_desc.vote_length',			'null_to_zero'),				array('poll_max_options',		1,									''),				array('poll_vote_change',		0,									''),				'left_join'		=> 'topics LEFT JOIN vote_desc ON topics.topic_id = vote_desc.topic_id AND topics.topic_vote = 1',				'where'			=> 'topics.topic_moved_id <> 0',			),			array(				'target'		=> TOPICS_WATCH_TABLE,				'primary'		=> 'topics_watch.topic_id',				'query_first'	=> array('target', $convert->truncate_statement . TOPICS_WATCH_TABLE),				array('topic_id',				'topics_watch.topic_id',			''),				array('user_id',				'topics_watch.user_id',				'phpbb_user_id'),				array('notify_status',			'topics_watch.notify_status',		''),			),			array(				'target'		=> SMILIES_TABLE,				'query_first'	=> array('target', $convert->truncate_statement . SMILIES_TABLE),				'autoincrement'	=> 'smiley_id',				array('smiley_id',				'smilies.smilies_id',				''),				array('code',					'smilies.code',						array('function1' => 'phpbb_smilie_html_decode', 'function2' => 'phpbb_set_encoding', 'function3' => 'utf8_htmlspecialchars')),				array('emotion',				'smilies.emoticon',					'phpbb_set_encoding'),				array('smiley_url',				'smilies.smile_url',				'import_smiley'),				array('smiley_width',			'smilies.smile_url',				'get_smiley_width'),				array('smiley_height',			'smilies.smile_url',				'get_smiley_height'),				array('smiley_order',			'smilies.smilies_id',				''),				array('display_on_posting',		'smilies.smilies_id',				'get_smiley_display'),				'order_by'		=> 'smilies.smilies_id ASC',			),			array(				'target'		=> POLL_OPTIONS_TABLE,				'primary'		=> 'vote_results.vote_option_id',				'query_first'	=> array('target', $convert->truncate_statement . POLL_OPTIONS_TABLE),				array('poll_option_id',			'vote_results.vote_option_id',		''),				array('topic_id',				'vote_desc.topic_id',				''),				array('',						'topics.topic_poster AS poster_id',	'phpbb_user_id'),				array('poll_option_text',		'vote_results.vote_option_text',	array('function1' => 'phpbb_set_encoding', 'function2' => 'htmlspecialchars_decode', 'function3' => 'utf8_htmlspecialchars')),				array('poll_option_total',		'vote_results.vote_result',			''),				'where'			=> 'vote_results.vote_id = vote_desc.vote_id',				'left_join'		=> 'vote_desc LEFT JOIN topics ON topics.topic_id = vote_desc.topic_id',			),			array(				'target'		=> POLL_VOTES_TABLE,				'primary'		=> 'vote_desc.topic_id',				'query_first'	=> array('target', $convert->truncate_statement . POLL_VOTES_TABLE),				array('poll_option_id',			VOTE_CONVERTED,						''),				array('topic_id',				'vote_desc.topic_id',				''),				array('vote_user_id',			'vote_voters.vote_user_id',			'phpbb_user_id'),				array('vote_user_ip',			'vote_voters.vote_user_ip',			'decode_ip'),				'where'			=> 'vote_voters.vote_id = vote_desc.vote_id',			),			array(				'target'		=> WORDS_TABLE,				'primary'		=> 'words.word_id',				'query_first'	=> array('target', $convert->truncate_statement . WORDS_TABLE),				'autoincrement'	=> 'word_id',				array('word_id',				'words.word_id',					''),				array('word',					'words.word',						'phpbb_set_encoding'),				array('replacement',			'words.replacement',				'phpbb_set_encoding'),			),			array(				'target'		=> POSTS_TABLE,				'primary'		=> 'posts.post_id',				'autoincrement'	=> 'post_id',				'query_first'	=> array('target', $convert->truncate_statement . POSTS_TABLE),				'execute_first'	=> '					$config["max_post_chars"] = 0;					$config["min_post_chars"] = 0;					$config["max_quote_depth"] = 0;				',				array('post_id',				'posts.post_id',					''),				array('topic_id',				'posts.topic_id',					''),				array('forum_id',				'posts.forum_id',					''),				array('poster_id',				'posts.poster_id',					'phpbb_user_id'),				array('icon_id',				0,									''),				array('poster_ip',				'posts.poster_ip',					'decode_ip'),				array('post_time',				'posts.post_time',					''),				array('enable_bbcode',			'posts.enable_bbcode',				''),				array('',						'posts.enable_html',				''),				array('enable_smilies',			'posts.enable_smilies',				''),				array('enable_sig',				'posts.enable_sig',					''),				array('enable_magic_url',		1,									''),				array('post_username',			'posts.post_username',				'phpbb_set_encoding'),				array('post_subject',			'posts_text.post_subject',			'phpbb_set_encoding'),				array('post_attachment',		((defined('MOD_ATTACHMENT')) ? 'posts.post_attachment' : 0), ''),				array('post_edit_time',			'posts.post_edit_time',				array('typecast' => 'int')),				array('post_edit_count',		'posts.post_edit_count',			''),				array('post_edit_reason',		'',									''),				array('post_edit_user',			'',									'phpbb_post_edit_user'),				array('bbcode_uid',				'posts.post_time',					'make_uid'),				array('post_text',				'posts_text.post_text',				'phpbb_prepare_message'),				array('',						'posts_text.bbcode_uid AS old_bbcode_uid',			''),				array('bbcode_bitfield',		'',									'get_bbcode_bitfield'),				array('post_checksum',			'',									''),				// Commented out inline search indexing, this takes up a LOT of time. :D				// @todo We either need to enable this or call the rebuild search functionality post convert/*				array('',						'',									'search_indexing'),				array('',						'posts_text.post_text AS message',	''),				array('',						'posts_text.post_subject AS title',	''),*/				'where'			=>	'posts.post_id = posts_text.post_id'			),			array(				'target'		=> PRIVMSGS_TABLE,				'primary'		=> 'privmsgs.privmsgs_id',				'autoincrement'	=> 'msg_id',				'query_first'	=> array(					array('target', $convert->truncate_statement . PRIVMSGS_TABLE),					array('target', $convert->truncate_statement . PRIVMSGS_RULES_TABLE),				),				'execute_first'	=> '					$config["max_post_chars"] = 0;					$config["min_post_chars"] = 0;					$config["max_quote_depth"] = 0;				',				array('msg_id',					'privmsgs.privmsgs_id',				''),				array('root_level',				0,									''),				array('author_id',				'privmsgs.privmsgs_from_userid AS poster_id',	'phpbb_user_id'),				array('icon_id',				0,									''),				array('author_ip',				'privmsgs.privmsgs_ip',				'decode_ip'),				array('message_time',			'privmsgs.privmsgs_date',			''),				array('enable_bbcode',			'privmsgs.privmsgs_enable_bbcode AS enable_bbcode',	''),				array('',						'privmsgs.privmsgs_enable_html AS enable_html',	''),				array('enable_smilies',			'privmsgs.privmsgs_enable_smilies AS enable_smilies',	''),				array('enable_magic_url',		1,									''),				array('enable_sig',				'privmsgs.privmsgs_attach_sig',		''),				array('message_subject',		'privmsgs.privmsgs_subject',		'phpbb_set_encoding'), // Already specialchared in 2.0.x				array('message_attachment',		((defined('MOD_ATTACHMENT')) ? 'privmsgs.privmsgs_attachment' : 0), ''),				array('message_edit_reason',	'',									''),				array('message_edit_user',		0,									''),				array('message_edit_time',		0,									''),				array('message_edit_count',		0,									''),				array('bbcode_uid',				'privmsgs.privmsgs_date AS post_time',	'make_uid'),				array('message_text',			'privmsgs_text.privmsgs_text',			'phpbb_prepare_message'),				array('',						'privmsgs_text.privmsgs_bbcode_uid AS old_bbcode_uid',			''),				array('bbcode_bitfield',		'',										'get_bbcode_bitfield'),				array('to_address',				'privmsgs.privmsgs_to_userid',			'phpbb_privmsgs_to_userid'),				array('bcc_address',			'',										''),				'where'			=>	'privmsgs.privmsgs_id = privmsgs_text.privmsgs_text_id'			),			array(				'target'		=> PRIVMSGS_FOLDER_TABLE,				'primary'		=> 'users.user_id',				'query_first'	=> array('target', $convert->truncate_statement . PRIVMSGS_FOLDER_TABLE),				array('user_id',				'users.user_id',						'phpbb_user_id'),				array('folder_name',			$user->lang['CONV_SAVED_MESSAGES'],		''),				array('pm_count',				0,										''),				'where'			=> 'users.user_id <> -1',			),			// Inbox			array(				'target'		=> PRIVMSGS_TO_TABLE,				'primary'		=> 'privmsgs.privmsgs_id',				'query_first'	=> array('target', $convert->truncate_statement . PRIVMSGS_TO_TABLE),				array('msg_id',					'privmsgs.privmsgs_id',					''),				array('user_id',				'privmsgs.privmsgs_to_userid',			'phpbb_user_id'),				array('author_id',				'privmsgs.privmsgs_from_userid',		'phpbb_user_id'),				array('pm_deleted',				0,										''),				array('pm_new',					'privmsgs.privmsgs_type',				'phpbb_new_pm'),				array('pm_unread',				'privmsgs.privmsgs_type',				'phpbb_unread_pm'),				array('pm_replied',				0,										''),				array('pm_marked',				0,										''),				array('pm_forwarded',			0,										''),				array('folder_id',				PRIVMSGS_INBOX,							''),				'where'			=> 'privmsgs.privmsgs_id = privmsgs_text.privmsgs_text_id										AND (privmsgs.privmsgs_type = 0 OR privmsgs.privmsgs_type = 1 OR privmsgs.privmsgs_type = 5)',			),			// Outbox			array(				'target'		=> PRIVMSGS_TO_TABLE,				'primary'		=> 'privmsgs.privmsgs_id',				array('msg_id',					'privmsgs.privmsgs_id',					''),				array('user_id',				'privmsgs.privmsgs_from_userid',		'phpbb_user_id'),				array('author_id',				'privmsgs.privmsgs_from_userid',		'phpbb_user_id'),				array('pm_deleted',				0,										''),				array('pm_new',					0,										''),				array('pm_unread',				0,										''),				array('pm_replied',				0,										''),				array('pm_marked',				0,										''),				array('pm_forwarded',			0,										''),				array('folder_id',				PRIVMSGS_OUTBOX,						''),				'where'			=> 'privmsgs.privmsgs_id = privmsgs_text.privmsgs_text_id										AND (privmsgs.privmsgs_type = 1 OR privmsgs.privmsgs_type = 5)',			),			// Sentbox			array(				'target'		=> PRIVMSGS_TO_TABLE,				'primary'		=> 'privmsgs.privmsgs_id',				array('msg_id',					'privmsgs.privmsgs_id',					''),				array('user_id',				'privmsgs.privmsgs_from_userid',		'phpbb_user_id'),				array('author_id',				'privmsgs.privmsgs_from_userid',		'phpbb_user_id'),				array('pm_deleted',				0,										''),				array('pm_new',					'privmsgs.privmsgs_type',				'phpbb_new_pm'),				array('pm_unread',				'privmsgs.privmsgs_type',				'phpbb_unread_pm'),				array('pm_replied',				0,										''),				array('pm_marked',				0,										''),				array('pm_forwarded',			0,										''),				array('folder_id',				PRIVMSGS_SENTBOX,						''),				'where'			=> 'privmsgs.privmsgs_id = privmsgs_text.privmsgs_text_id										AND privmsgs.privmsgs_type = 2',			),			// Savebox (SAVED IN)			array(				'target'		=> PRIVMSGS_TO_TABLE,				'primary'		=> 'privmsgs.privmsgs_id',				array('msg_id',					'privmsgs.privmsgs_id',					''),				array('user_id',				'privmsgs.privmsgs_to_userid',			'phpbb_user_id'),				array('author_id',				'privmsgs.privmsgs_from_userid',		'phpbb_user_id'),				array('pm_deleted',				0,										''),				array('pm_new',					'privmsgs.privmsgs_type',				'phpbb_new_pm'),				array('pm_unread',				'privmsgs.privmsgs_type',				'phpbb_unread_pm'),				array('pm_replied',				0,										''),				array('pm_marked',				0,										''),				array('pm_forwarded',			0,										''),				array('folder_id',				'privmsgs.privmsgs_to_userid',			'phpbb_get_savebox_id'),				'where'			=> 'privmsgs.privmsgs_id = privmsgs_text.privmsgs_text_id										AND privmsgs.privmsgs_type = 3',			),			// Savebox (SAVED OUT)			array(				'target'		=> PRIVMSGS_TO_TABLE,				'primary'		=> 'privmsgs.privmsgs_id',				array('msg_id',					'privmsgs.privmsgs_id',					''),				array('user_id',				'privmsgs.privmsgs_from_userid',		'phpbb_user_id'),				array('author_id',				'privmsgs.privmsgs_from_userid',		'phpbb_user_id'),				array('pm_deleted',				0,										''),				array('pm_new',					'privmsgs.privmsgs_type',				'phpbb_new_pm'),				array('pm_unread',				'privmsgs.privmsgs_type',				'phpbb_unread_pm'),				array('pm_replied',				0,										''),				array('pm_marked',				0,										''),				array('pm_forwarded',			0,										''),				array('folder_id',				'privmsgs.privmsgs_from_userid',		'phpbb_get_savebox_id'),				'where'			=> 'privmsgs.privmsgs_id = privmsgs_text.privmsgs_text_id										AND privmsgs.privmsgs_type = 4',			),			array(				'target'		=> GROUPS_TABLE,				'autoincrement'	=> 'group_id',				'query_first'	=> array('target', $convert->truncate_statement . GROUPS_TABLE),				array('group_id',				'groups.group_id',					''),				array('group_type',				'groups.group_type',				'phpbb_convert_group_type'),				array('group_display',			0,									''),				array('group_legend',			0,									''),				array('group_name',				'groups.group_name',				'phpbb_convert_group_name'), // phpbb_set_encoding called in phpbb_convert_group_name				array('group_desc',				'groups.group_description',			'phpbb_set_encoding'),				'where'			=> 'groups.group_single_user = 0',			),			array(				'target'		=> USER_GROUP_TABLE,				'query_first'	=> array('target', $convert->truncate_statement . USER_GROUP_TABLE),				'execute_first'	=> '					add_default_groups();				',				array('group_id',		'groups.group_id',					''),				array('user_id',		'groups.group_moderator',			'phpbb_user_id'),				array('group_leader',	1,									''),				array('user_pending',	0,									''),				'where'			=> 'groups.group_single_user = 0 AND groups.group_moderator <> 0',			),			array(				'target'		=> USER_GROUP_TABLE,				array('group_id',		'user_group.group_id',				''),				array('user_id',		'user_group.user_id',				'phpbb_user_id'),				array('group_leader',	0,									''),				array('user_pending',	'user_group.user_pending',			''),				'where'			=> 'user_group.group_id = groups.group_id AND groups.group_single_user = 0 AND groups.group_moderator <> user_group.user_id',			),			array(				'target'		=> USERS_TABLE,				'primary'		=> 'users.user_id',				'autoincrement'	=> 'user_id',				'query_first'	=> array(					array('target', 'DELETE FROM ' . USERS_TABLE . ' WHERE user_id <> ' . ANONYMOUS),					array('target', $convert->truncate_statement . BOTS_TABLE)				),				'execute_last'	=> '					remove_invalid_users();				',				array('user_id',				'users.user_id',					'phpbb_user_id'),				array('',						'users.user_id AS poster_id',		'phpbb_user_id'),				array('user_type',				'users.user_active',				'set_user_type'),				array('group_id',				'users.user_level',					'phpbb_set_primary_group'),				array('user_regdate',			'users.user_regdate',				''),				array('username',				'users.username',					'phpbb_set_default_encoding'), // recode to utf8 with default lang				array('username_clean',			'users.username',					array('function1' => 'phpbb_set_default_encoding', 'function2' => 'utf8_clean_string')),				array('user_password',			'users.user_password',				'phpbb_hash'),				array('user_pass_convert',		1,									''),				array('user_posts',				'users.user_posts',					'intval'),				array('user_email',				'users.user_email',					'strtolower'),				array('user_email_hash',		'users.user_email',					'gen_email_hash'),				array('user_birthday',			((defined('MOD_BIRTHDAY')) ? 'users.user_birthday' : ''),	'phpbb_get_birthday'),				array('user_lastvisit',			'users.user_lastvisit',				'intval'),				array('user_lastmark',			'users.user_lastvisit',				'intval'),				array('user_lang',				$config['default_lang'],			''),				array('',						'users.user_lang',					''),				array('user_timezone',			'users.user_timezone',				'floatval'),				array('user_dateformat',		'users.user_dateformat',			array('function1' => 'phpbb_set_encoding', 'function2' => 'fill_dateformat')),				array('user_inactive_reason',	'',									'phpbb_inactive_reason'),				array('user_inactive_time',		'',									'phpbb_inactive_time'),				array('user_interests',			'users.user_interests',				array('function1' => 'phpbb_set_encoding')),				array('user_occ',				'users.user_occ',					array('function1' => 'phpbb_set_encoding')),				array('user_website',			'users.user_website',				'validate_website'),				array('user_jabber',			'',									''),				array('user_msnm',				'users.user_msnm',					array('function1' => 'phpbb_set_encoding')),				array('user_yim',				'users.user_yim',					array('function1' => 'phpbb_set_encoding')),				array('user_aim',				'users.user_aim',					array('function1' => 'phpbb_set_encoding')),				array('user_icq',				'users.user_icq',					array('function1' => 'phpbb_set_encoding')),				array('user_from',				'users.user_from',					array('function1' => 'phpbb_set_encoding')),				array('user_rank',				'users.user_rank',					'intval'),				array('user_permissions',		'',									''),				array('user_avatar',			'users.user_avatar',				'phpbb_import_avatar'),				array('user_avatar_type',		'users.user_avatar_type',			'phpbb_avatar_type'),				array('user_avatar_width',		'users.user_avatar',				'phpbb_get_avatar_width'),				array('user_avatar_height',		'users.user_avatar',				'phpbb_get_avatar_height'),				array('user_new_privmsg',		'users.user_new_privmsg',			''),				array('user_unread_privmsg',	0,									''), //'users.user_unread_privmsg'				array('user_last_privmsg',		'users.user_last_privmsg',			'intval'),				array('user_emailtime',			'users.user_emailtime',				'null_to_zero'),				array('user_notify',			'users.user_notify',				'intval'),				array('user_notify_pm',			'users.user_notify_pm',				'intval'),				array('user_notify_type',		NOTIFY_EMAIL,						''),				array('user_allow_pm',			'users.user_allow_pm',				'intval'),				array('user_allow_viewonline',	'users.user_allow_viewonline',		'intval'),				array('user_allow_viewemail',	'users.user_viewemail',				'intval'),				array('user_actkey',			'users.user_actkey',				''),				array('user_newpasswd',			'',									''), // Users need to re-request their password...				array('user_style',				$config['default_style'],			''),				array('user_options',			'',									'set_user_options'),				array('',						'users.user_popup_pm AS popuppm',	''),				array('',						'users.user_allowhtml AS html',		''),				array('',						'users.user_allowbbcode AS bbcode',	''),				array('',						'users.user_allowsmile AS smile',	''),				array('',						'users.user_attachsig AS attachsig',''),				array('user_sig_bbcode_uid',		'users.user_regdate',							'make_uid'),				array('user_sig',					'users.user_sig',								'phpbb_prepare_message'),				array('',							'users.user_sig_bbcode_uid AS old_bbcode_uid',	''),				array('user_sig_bbcode_bitfield',	'',												'get_bbcode_bitfield'),				array('',							'users.user_regdate AS post_time',				''),				'where'			=> 'users.user_id <> -1',			),		),	);}?>
<?php/**** @package mcp* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @ignore*/if (!defined('IN_PHPBB')){	exit;}/*** mcp_reports* Handling the reports queue* @package mcp*/class mcp_pm_reports{	var $p_master;	var $u_action;	function mcp_pm_reports(&$p_master)	{		$this->p_master = &$p_master;	}	function main($id, $mode)	{		global $auth, $db, $user, $template, $cache;		global $config, $phpbb_root_path, $phpEx, $action;		include_once($phpbb_root_path . 'includes/functions_posting.' . $phpEx);		include_once($phpbb_root_path . 'includes/functions_privmsgs.' . $phpEx);		$start = request_var('start', 0);		$this->page_title = 'MCP_PM_REPORTS';		switch ($action)		{			case 'close':			case 'delete':				include_once($phpbb_root_path . 'includes/functions_messenger.' . $phpEx);				$report_id_list = request_var('report_id_list', array(0));				if (!sizeof($report_id_list))				{					trigger_error('NO_REPORT_SELECTED');				}				if (!function_exists('close_report'))				{					include($phpbb_root_path . 'includes/mcp/mcp_reports.' . $phpEx);				}				close_report($report_id_list, $mode, $action, true);			break;		}		switch ($mode)		{			case 'pm_report_details':				$user->add_lang(array('posting', 'viewforum', 'viewtopic', 'ucp'));				$report_id = request_var('r', 0);				$sql = 'SELECT r.pm_id, r.user_id, r.report_id, r.report_closed, report_time, r.report_text, rr.reason_title, rr.reason_description, u.username, u.username_clean, u.user_colour					FROM ' . REPORTS_TABLE . ' r, ' . REPORTS_REASONS_TABLE . ' rr, ' . USERS_TABLE . ' u					WHERE r.report_id = ' . $report_id . '						AND rr.reason_id = r.reason_id						AND r.user_id = u.user_id						AND r.post_id = 0					ORDER BY report_closed ASC';				$result = $db->sql_query_limit($sql, 1);				$report = $db->sql_fetchrow($result);				$db->sql_freeresult($result);				if (!$report_id || !$report)				{					trigger_error('NO_REPORT');				}				$pm_id = $report['pm_id'];				$report_id = $report['report_id'];				$pm_info = get_pm_data(array($pm_id));				if (!sizeof($pm_info))				{					trigger_error('NO_REPORT_SELECTED');				}				$pm_info = $pm_info[$pm_id];				write_pm_addresses(array('to' => $pm_info['to_address'], 'bcc' => $pm_info['bcc_address']), (int) $pm_info['author_id']);				$reason = array('title' => $report['reason_title'], 'description' => $report['reason_description']);				if (isset($user->lang['report_reasons']['TITLE'][strtoupper($reason['title'])]) && isset($user->lang['report_reasons']['DESCRIPTION'][strtoupper($reason['title'])]))				{					$reason['description'] = $user->lang['report_reasons']['DESCRIPTION'][strtoupper($reason['title'])];					$reason['title'] = $user->lang['report_reasons']['TITLE'][strtoupper($reason['title'])];				}				// Process message, leave it uncensored				$message = $pm_info['message_text'];				if ($pm_info['bbcode_bitfield'])				{					include_once($phpbb_root_path . 'includes/bbcode.' . $phpEx);					$bbcode = new bbcode($pm_info['bbcode_bitfield']);					$bbcode->bbcode_second_pass($message, $pm_info['bbcode_uid'], $pm_info['bbcode_bitfield']);				}				$message = bbcode_nl2br($message);				$message = smiley_text($message);				if ($pm_info['message_attachment'] && $auth->acl_get('u_pm_download'))				{					$sql = 'SELECT *						FROM ' . ATTACHMENTS_TABLE . '						WHERE post_msg_id = ' . $pm_id . '							AND in_message = 1						ORDER BY filetime DESC';					$result = $db->sql_query($sql);					while ($row = $db->sql_fetchrow($result))					{						$attachments[] = $row;					}					$db->sql_freeresult($result);					if (sizeof($attachments))					{						$update_count = array();						parse_attachments(0, $message, $attachments, $update_count);					}					// Display not already displayed Attachments for this post, we already parsed them. ;)					if (!empty($attachments))					{						$template->assign_var('S_HAS_ATTACHMENTS', true);						foreach ($attachments as $attachment)						{							$template->assign_block_vars('attachment', array(								'DISPLAY_ATTACHMENT'	=> $attachment)							);						}					}				}				$template->assign_vars(array(					'S_MCP_REPORT'			=> true,					'S_PM'					=> true,					'S_CLOSE_ACTION'		=> append_sid("{$phpbb_root_path}mcp.$phpEx", 'i=pm_reports&amp;mode=pm_report_details&amp;r=' . $report_id),					'S_CAN_VIEWIP'			=> $auth->acl_getf_global('m_info'),					'S_POST_REPORTED'		=> $pm_info['message_reported'],					'S_USER_NOTES'			=> true,					'U_MCP_REPORT'				=> append_sid("{$phpbb_root_path}mcp.$phpEx", 'i=pm_reports&amp;mode=pm_report_details&amp;r=' . $report_id),					'U_MCP_REPORTER_NOTES'		=> append_sid("{$phpbb_root_path}mcp.$phpEx", 'i=notes&amp;mode=user_notes&amp;u=' . $report['user_id']),					'U_MCP_USER_NOTES'			=> append_sid("{$phpbb_root_path}mcp.$phpEx", 'i=notes&amp;mode=user_notes&amp;u=' . $pm_info['author_id']),					'U_MCP_WARN_REPORTER'		=> ($auth->acl_get('m_warn')) ? append_sid("{$phpbb_root_path}mcp.$phpEx", 'i=warn&amp;mode=warn_user&amp;u=' . $report['user_id']) : '',					'U_MCP_WARN_USER'			=> ($auth->acl_get('m_warn')) ? append_sid("{$phpbb_root_path}mcp.$phpEx", 'i=warn&amp;mode=warn_user&amp;u=' . $pm_info['author_id']) : '',										'EDIT_IMG'				=> $user->img('icon_post_edit', $user->lang['EDIT_POST']),					'MINI_POST_IMG'			=> $user->img('icon_post_target', 'POST'),					'RETURN_REPORTS'			=> sprintf($user->lang['RETURN_REPORTS'], '<a href="' . append_sid("{$phpbb_root_path}mcp.$phpEx", 'i=pm_reports' . (($pm_info['message_reported']) ? '&amp;mode=pm_reports' : '&amp;mode=pm_reports_closed') . '&amp;start=' . $start) . '">', '</a>'),					'REPORTED_IMG'				=> $user->img('icon_topic_reported', $user->lang['POST_REPORTED']),					'REPORT_DATE'				=> $user->format_date($report['report_time']),					'REPORT_ID'					=> $report_id,					'REPORT_REASON_TITLE'		=> $reason['title'],					'REPORT_REASON_DESCRIPTION'	=> $reason['description'],					'REPORT_TEXT'				=> $report['report_text'],					'POST_AUTHOR_FULL'		=> get_username_string('full', $pm_info['author_id'], $pm_info['username'], $pm_info['user_colour']),					'POST_AUTHOR_COLOUR'	=> get_username_string('colour', $pm_info['author_id'], $pm_info['username'], $pm_info['user_colour']),					'POST_AUTHOR'			=> get_username_string('username', $pm_info['author_id'], $pm_info['username'], $pm_info['user_colour']),					'U_POST_AUTHOR'			=> get_username_string('profile', $pm_info['author_id'], $pm_info['username'], $pm_info['user_colour']),					'REPORTER_FULL'				=> get_username_string('full', $report['user_id'], $report['username'], $report['user_colour']),					'REPORTER_COLOUR'			=> get_username_string('colour', $report['user_id'], $report['username'], $report['user_colour']),					'REPORTER_NAME'				=> get_username_string('username', $report['user_id'], $report['username'], $report['user_colour']),					'U_VIEW_REPORTER_PROFILE'	=> get_username_string('profile', $report['user_id'], $report['username'], $report['user_colour']),					'POST_PREVIEW'			=> $message,					'POST_SUBJECT'			=> ($pm_info['message_subject']) ? $pm_info['message_subject'] : $user->lang['NO_SUBJECT'],					'POST_DATE'				=> $user->format_date($pm_info['message_time']),					'POST_IP'				=> $pm_info['author_ip'],					'POST_IPADDR'			=> ($auth->acl_getf_global('m_info') && request_var('lookup', '')) ? @gethostbyaddr($pm_info['author_ip']) : '',					'POST_ID'				=> $pm_info['msg_id'],					'U_LOOKUP_IP'			=> ($auth->acl_getf_global('m_info')) ? $this->u_action . '&amp;r=' . $report_id . '&amp;pm=' . $pm_id . '&amp;lookup=' . $pm_info['author_ip'] . '#ip' : '',				));				$this->tpl_name = 'mcp_post';			break;			case 'pm_reports':			case 'pm_reports_closed':				$user->add_lang(array('ucp'));				$sort_days = $total = 0;				$sort_key = $sort_dir = '';				$sort_by_sql = $sort_order_sql = array();				mcp_sorting($mode, $sort_days, $sort_key, $sort_dir, $sort_by_sql, $sort_order_sql, $total);				$limit_time_sql = ($sort_days) ? 'AND r.report_time >= ' . (time() - ($sort_days * 86400)) : '';				if ($mode == 'pm_reports')				{					$report_state = 'p.message_reported = 1 AND r.report_closed = 0';				}				else				{					$report_state = 'r.report_closed = 1';				}				$sql = 'SELECT r.report_id					FROM ' . PRIVMSGS_TABLE . ' p, ' . REPORTS_TABLE . ' r ' . (($sort_order_sql[0] == 'u') ? ', ' . USERS_TABLE . ' u' : '') . (($sort_order_sql[0] == 'r') ? ', ' . USERS_TABLE . ' ru' : '') . "					WHERE $report_state						AND r.pm_id = p.msg_id						" . (($sort_order_sql[0] == 'u') ? 'AND u.user_id = p.author_id' : '') . '						' . (($sort_order_sql[0] == 'r') ? 'AND ru.user_id = r.user_id' : '') . "						AND r.post_id = 0						$limit_time_sql					ORDER BY $sort_order_sql";				$result = $db->sql_query_limit($sql, $config['topics_per_page'], $start);				$i = 0;				$report_ids = array();				while ($row = $db->sql_fetchrow($result))				{					$report_ids[] = $row['report_id'];					$row_num[$row['report_id']] = $i++;				}				$db->sql_freeresult($result);				if (sizeof($report_ids))				{					$sql = 'SELECT p.*, u.username, u.username_clean, u.user_colour, r.user_id as reporter_id, ru.username as reporter_name, ru.user_colour as reporter_colour, r.report_time, r.report_id						FROM ' . REPORTS_TABLE . ' r, ' . PRIVMSGS_TABLE . ' p, ' . USERS_TABLE . ' u, ' . USERS_TABLE . ' ru						WHERE ' . $db->sql_in_set('r.report_id', $report_ids) . "							AND r.pm_id = p.msg_id							AND p.author_id = u.user_id							AND ru.user_id = r.user_id						ORDER BY $sort_order_sql";					$result = $db->sql_query($sql);					$pm_list = $pm_by_id = array();					while ($row = $db->sql_fetchrow($result))					{						$pm_by_id[(int) $row['msg_id']] = $row;						$pm_list[] = (int) $row['msg_id'];					}					$db->sql_freeresult($result);					if (sizeof($pm_list))					{						$address_list = get_recipient_strings($pm_by_id);						foreach ($pm_list as $message_id)						{							$row = $pm_by_id[$message_id];							$template->assign_block_vars('postrow', array(								'U_VIEW_DETAILS'			=> append_sid("{$phpbb_root_path}mcp.$phpEx", "i=pm_reports&amp;mode=pm_report_details&amp;r={$row['report_id']}"),								'PM_AUTHOR_FULL'		=> get_username_string('full', $row['author_id'], $row['username'], $row['user_colour']),								'PM_AUTHOR_COLOUR'		=> get_username_string('colour', $row['author_id'], $row['username'], $row['user_colour']),								'PM_AUTHOR'				=> get_username_string('username', $row['author_id'], $row['username'], $row['user_colour']),								'U_PM_AUTHOR'			=> get_username_string('profile', $row['author_id'], $row['username'], $row['user_colour']),								'REPORTER_FULL'			=> get_username_string('full', $row['reporter_id'], $row['reporter_name'], $row['reporter_colour']),								'REPORTER_COLOUR'		=> get_username_string('colour', $row['reporter_id'], $row['reporter_name'], $row['reporter_colour']),								'REPORTER'				=> get_username_string('username', $row['reporter_id'], $row['reporter_name'], $row['reporter_colour']),								'U_REPORTER'			=> get_username_string('profile', $row['reporter_id'], $row['reporter_name'], $row['reporter_colour']),								'PM_SUBJECT'			=> ($row['message_subject']) ? $row['message_subject'] : $user->lang['NO_SUBJECT'],								'PM_TIME'				=> $user->format_date($row['message_time']),								'REPORT_ID'				=> $row['report_id'],								'REPORT_TIME'			=> $user->format_date($row['report_time']),								'RECIPIENTS'			=> implode(', ', $address_list[$row['msg_id']]),							));						}					}				}				// Now display the page				$template->assign_vars(array(					'L_EXPLAIN'				=> ($mode == 'pm_reports') ? $user->lang['MCP_PM_REPORTS_OPEN_EXPLAIN'] : $user->lang['MCP_PM_REPORTS_CLOSED_EXPLAIN'],					'L_TITLE'				=> ($mode == 'pm_reports') ? $user->lang['MCP_PM_REPORTS_OPEN'] : $user->lang['MCP_PM_REPORTS_CLOSED'],										'S_PM'					=> true,					'S_MCP_ACTION'			=> $this->u_action,					'S_CLOSED'				=> ($mode == 'pm_reports_closed') ? true : false,					'PAGINATION'			=> generate_pagination($this->u_action . "&amp;st=$sort_days&amp;sk=$sort_key&amp;sd=$sort_dir", $total, $config['topics_per_page'], $start),					'PAGE_NUMBER'			=> on_page($total, $config['topics_per_page'], $start),					'TOTAL'					=> $total,					'TOTAL_REPORTS'			=> ($total == 1) ? $user->lang['LIST_REPORT'] : sprintf($user->lang['LIST_REPORTS'], $total),										)				);				$this->tpl_name = 'mcp_reports';			break;		}	}}?>
<?php/**** search_synonyms [English]** @package language* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**/if (!defined('IN_PHPBB')){	exit;}$synonyms = array(	'abcense'			=> 'absence',	'abridgement'		=> 'abridgment',	'accomodate'		=> 'accommodate',	'acknowledgment'	=> 'acknowledgement',	'airplane'			=> 'aeroplane',	'allright'			=> 'alright ',	'andy'				=> 'andrew',	'anemia'			=> 'anaemia',	'anemic'			=> 'anaemic',	'anesthesia'		=> 'anaesthesia',	'apologize'			=> 'apologise',	'archean'			=> 'archaean',	'archeology'		=> 'archaeology',	'archeozoic'		=> 'archaeozoic',	'armor'				=> 'armour',	'artic'				=> 'arctic',	'attachment'		=> 'attachement',	'attendence'		=> 'attendance',	'barbecue'	=> 'barbeque',	'behavior'	=> 'behaviour',	'biassed'	=> 'biased',	'biol'		=> 'biology',	'buletin'	=> 'bulletin',	'calender'	=> 'calendar',	'canceled'	=> 'cancelled',	'car'		=> 'automobile',	'catalog'	=> 'catalogue',	'cenozoic'	=> 'caenozoic',	'center'	=> 'centre',	'check'		=> 'cheque',	'color'		=> 'colour',	'comission'	=> 'commission',	'comittee'	=> 'committee',	'commitee'	=> 'committee',	'conceed'	=> 'concede',	'creating'	=> 'createing',	'curiculum'	=> 'curriculum',	'defense'		=> 'defence',	'develope'		=> 'develop',	'discription'	=> 'description',	'dulness'		=> 'dullness',	'encyclopedia'	=> 'encyclopaedia',	'enroll'		=> 'enrol',	'esthetic'		=> 'aesthetic',	'etiology'		=> 'aetiology',	'exhorbitant'	=> 'exorbitant',	'exhuberant'	=> 'exuberant',	'existance'		=> 'existence',	'favorite'		=> 'favourite',	'fetus'			=> 'foetus',	'ficticious'	=> 'fictitious',	'flavor'		=> 'flavour',	'flourescent'	=> 'fluorescent',	'foriegn'		=> 'foreign',	'fourty'		=> 'forty',	'gage'			=> 'gauge',	'geneology'		=> 'genealogy',	'grammer'		=> 'grammar',	'gray'			=> 'grey',	'guerilla'		=> 'guerrilla',	'gynecology'	=> 'gynaecology',	'harbor'		=> 'harbour',	'heighth'		=> 'height',	'hemaglobin'	=> 'haemaglobin',	'hematin'		=> 'haematin',	'hematite'		=> 'haematite',	'hematology'	=> 'haematology',	'honor'			=> 'honour',	'innoculate'	=> 'inoculate',	'installment'	=> 'instalment',	'irrelevent'	=> 'irrelevant',	'irrevelant'	=> 'irrelevant',	'jeweler'	=> 'jeweller',	'judgment'	=> 'judgement',	'labeled'	=> 'labelled',	'labor'		=> 'labour',	'laborer'	=> 'labourer',	'laborers'	=> 'labourers',	'laboring'	=> 'labouring',	'licence'	=> 'license',	'liesure'	=> 'leisure',	'liquify'	=> 'liquefy',	'maintainance'	=> 'maintenance',	'maintenence'	=> 'maintenance',	'medieval'		=> 'mediaeval',	'meter'			=> 'metre',	'milage'		=> 'mileage',	'millipede'		=> 'millepede',	'miscelaneous'	=> 'miscellaneous',	'morgage'		=> 'mortgage',	'noticable'	=> 'noticeable',	'occurence'	=> 'occurrence',	'offense'	=> 'offence',	'ommision'	=> 'omission',	'ommission'	=> 'omission',	'optimize'	=> 'optimise',	'organize'	=> 'organise',	'pajamas'			=> 'pyjamas',	'paleography'		=> 'palaeography',	'paleolithic'		=> 'palaeolithic',	'paleontological'	=> 'palaeontological',	'paleontologist'	=> 'palaeontologist',	'paleontology'		=> 'palaeontology',	'paleozoic'			=> 'palaeozoic',	'pamplet'			=> 'pamphlet',	'paralell'			=> 'parallel',	'parl'				=> 'parliament',	'parlt'				=> 'parliament',	'pediatric'			=> 'paediatric',	'pediatrician'		=> 'paediatrician',	'pediatrics'		=> 'paediatrics',	'pedodontia'		=> 'paedodontia',	'pedodontics'		=> 'paedodontics',	'personel'			=> 'personnel',	'practise'			=> 'practice',	'program'			=> 'programme',	'psych'				=> 'psychology',	'questionaire'	=> 'questionnaire',	'rarify'		=> 'rarefy',	'reccomend'		=> 'recommend',	'recieve'		=> 'receive',	'resistence'	=> 'resistance',	'restaraunt'	=> 'restaurant',	'savior'			=> 'saviour',	'sep'				=> 'september',	'seperate'			=> 'separate',	'sept'				=> 'september',	'sieze'				=> 'seize',	'summarize'			=> 'summarise',	'summerize'			=> 'summarise',	'superceed'			=> 'supercede',	'superintendant'	=> 'superintendent',	'supersede'			=> 'supercede',	'suprise'			=> 'surprise',	'surprize'			=> 'surprise',	'synchronise'		=> 'synchronize',	'temperary'		=> 'temporary',	'theater'		=> 'theatre',	'threshhold'	=> 'threshold',	'transfered'	=> 'transferred',	'truely'		=> 'truly',	'truley'		=> 'truly',	'useable'	=> 'usable',	'valor'	=> 'valour',	'vigor'	=> 'vigour',	'vol'	=> 'volume',	'whack'		=> 'wack',	'withold'	=> 'withhold',	'yeild'	=> 'yield',);?>
<?php/**** @package phpBB3* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @ignore*/if (!defined('IN_PHPBB')){	exit;}/*** This class collects data which is used to create some usage statistics.** The collected data is - after authorization of the administrator - submitted* to a central server. For privacy reasons we try to collect only data which aren't private* or don't give any information which might help to identify the user.** @author		Johannes Schlueter <johannes@php.net>* @copyright	(c) 2007-2008 Johannes Schlueter*/class phpbb_questionnaire_data_collector{	var $providers;	var $data = null;	var $install_id = '';	/**	* Constructor.	*	* @param	string	*/	function phpbb_questionnaire_data_collector($install_id)	{		$this->install_id = $install_id;		$this->providers = array();	}	function add_data_provider(&$provider)	{		$this->providers[] = &$provider;	}	/**	* Get data as an array.	*	* @return	array	All Data	*/	function get_data_raw()	{		if (!$this->data)		{			$this->collect();		}		return $this->data;	}	function get_data_for_form()	{		return base64_encode(serialize($this->get_data_raw()));	}	/**	* Collect info into the data property.	*	* @return	void	*/	function collect()	{		foreach (array_keys($this->providers) as $key)		{			$provider = &$this->providers[$key];			$this->data[$provider->get_identifier()] = $provider->get_data();		}		$this->data['install_id'] = $this->install_id;	}}/** interface: get_indentifier(), get_data() *//*** Questionnaire PHP data provider* @package phpBB3*/class phpbb_questionnaire_php_data_provider{	function get_identifier()	{		return 'PHP';	}	/**	* Get data about the PHP runtime setup.	*	* @return	array	*/	function get_data()	{		return array(			'version'						=> PHP_VERSION,			'sapi'							=> PHP_SAPI,			'int_size'						=> defined('PHP_INT_SIZE') ? PHP_INT_SIZE : '',			'safe_mode'						=> (int) @ini_get('safe_mode'),			'open_basedir'					=> (int) @ini_get('open_basedir'),			'memory_limit'					=> @ini_get('memory_limit'),			'allow_url_fopen'				=> (int) @ini_get('allow_url_fopen'),			'allow_url_include'				=> (int) @ini_get('allow_url_include'),			'file_uploads'					=> (int) @ini_get('file_uploads'),			'upload_max_filesize'			=> @ini_get('upload_max_filesize'),			'post_max_size'					=> @ini_get('post_max_size'),			'disable_functions'				=> @ini_get('disable_functions'),			'disable_classes'				=> @ini_get('disable_classes'),			'enable_dl'						=> (int) @ini_get('enable_dl'),			'magic_quotes_gpc'				=> (int) @ini_get('magic_quotes_gpc'),			'register_globals'				=> (int) @ini_get('register_globals'),			'filter.default'				=> @ini_get('filter.default'),			'zend.ze1_compatibility_mode'	=> (int) @ini_get('zend.ze1_compatibility_mode'),			'unicode.semantics'				=> (int) @ini_get('unicode.semantics'),			'zend_thread_safty'				=> (int) function_exists('zend_thread_id'),			'extensions'					=> get_loaded_extensions(),		);	}}/*** Questionnaire System data provider* @package phpBB3*/class phpbb_questionnaire_system_data_provider{	function get_identifier()	{		return 'System';	}	/**	* Get data about the general system information, like OS or IP (shortened).	*	* @return	array	*/	function get_data()	{		// Start discovering the IPV4 server address, if available		$server_address = '0.0.0.0';		if (!empty($_SERVER['SERVER_ADDR']))		{			$server_address = $_SERVER['SERVER_ADDR'];		}		// Running on IIS?		if (!empty($_SERVER['LOCAL_ADDR']))		{			$server_address = $_SERVER['LOCAL_ADDR'];		}		return array(			'os'	=> PHP_OS,			'httpd'	=> $_SERVER['SERVER_SOFTWARE'],			// we don't want the real IP address (for privacy policy reasons) but only			// a network address to see whether your installation is running on a private or public network.			'private_ip'	=> $this->is_private_ip($server_address),			'ipv6'			=> strpos($server_address, ':') !== false,		);	}	/**	* Checks whether the given IP is in a private network.	*	* @param	string	$ip	IP in v4 dot-decimal or v6 hex format	* @return	bool		true if the IP is from a private network, else false	*/	function is_private_ip($ip)	{		// IPv4		if (strpos($ip, ':') === false)		{			$ip_address_ary = explode('.', $ip);			// build ip			if (!isset($ip_address_ary[0]) || !isset($ip_address_ary[1]))			{				$ip_address_ary = explode('.', '0.0.0.0');			}			// IANA reserved addresses for private networks (RFC 1918) are:			// - 10.0.0.0/8			// - 172.16.0.0/12			// - 192.168.0.0/16			if ($ip_address_ary[0] == '10' ||				($ip_address_ary[0] == '172' && intval($ip_address_ary[1]) > 15 && intval($ip_address_ary[1]) < 32) ||				($ip_address_ary[0] == '192' && $ip_address_ary[1] == '168') ||				($ip_address_ary[0] == '192' && $ip_address_ary[1] == '168'))			{				return true;			}		}		// IPv6		else		{			// unique local unicast			$prefix = substr($ip, 0, 2);			if ($prefix == 'fc' || $prefix == 'fd')			{				return true;			}		}		return false;	}}/*** Questionnaire phpBB data provider* @package phpBB3*/class phpbb_questionnaire_phpbb_data_provider{	var $config;	var $unique_id;	/**	* Constructor.	*	* @param	array	$config	*/	function phpbb_questionnaire_phpbb_data_provider($config)	{		// generate a unique id if necessary		if (empty($config['questionnaire_unique_id']))		{			$this->unique_id = unique_id();			set_config('questionnaire_unique_id', $this->unique_id);		}		else		{			$this->unique_id = $config['questionnaire_unique_id'];		}		$this->config = $config;	}	/**	* Returns a string identifier for this data provider	*	* @return	string	"phpBB"	*/	function get_identifier()	{		return 'phpBB';	}	/**	* Get data about this phpBB installation.	*	* @return	array	Relevant anonymous config options	*/	function get_data()	{		global $phpbb_root_path, $phpEx;		include("{$phpbb_root_path}config.$phpEx");		unset($dbhost, $dbport, $dbname, $dbuser, $dbpasswd); // Just a precaution		// Only send certain config vars		$config_vars = array(			'active_sessions' => true,			'allow_attachments' => true,			'allow_autologin' => true,			'allow_avatar' => true,			'allow_avatar_local' => true,			'allow_avatar_remote' => true,			'allow_avatar_upload' => true,			'allow_bbcode' => true,			'allow_birthdays' => true,			'allow_bookmarks' => true,			'allow_emailreuse' => true,			'allow_forum_notify' => true,			'allow_mass_pm' => true,			'allow_name_chars' => true,			'allow_namechange' => true,			'allow_nocensors' => true,			'allow_pm_attach' => true,			'allow_pm_report' => true,			'allow_post_flash' => true,			'allow_post_links' => true,			'allow_privmsg' => true,			'allow_quick_reply' => true,			'allow_sig' => true,			'allow_sig_bbcode' => true,			'allow_sig_flash' => true,			'allow_sig_img' => true,			'allow_sig_links' => true,			'allow_sig_pm' => true,			'allow_sig_smilies' => true,			'allow_smilies' => true,			'allow_topic_notify' => true,			'attachment_quota' => true,			'auth_bbcode_pm' => true,			'auth_flash_pm' => true,			'auth_img_pm' => true,			'auth_method' => true,			'auth_smilies_pm' => true,			'avatar_filesize' => true,			'avatar_max_height' => true,			'avatar_max_width' => true,			'avatar_min_height' => true,			'avatar_min_width' => true,			'board_dst' => true,			'board_email_form' => true,			'board_hide_emails' => true,			'board_timezone' => true,			'browser_check' => true,			'bump_interval' => true,			'bump_type' => true,			'cache_gc' => true,			'captcha_plugin' => true,			'captcha_gd' => true,			'captcha_gd_foreground_noise' => true,			'captcha_gd_x_grid' => true,			'captcha_gd_y_grid' => true,			'captcha_gd_wave' => true,			'captcha_gd_3d_noise' => true,			'captcha_gd_fonts' => true,			'confirm_refresh' => true,			'check_attachment_content' => true,			'check_dnsbl' => true,			'chg_passforce' => true,			'cookie_secure' => true,			'coppa_enable' => true,			'database_gc' => true,			'dbms_version' => true,			'default_dateformat' => true,			'default_lang' => true,			'display_last_edited' => true,			'display_order' => true,			'edit_time' => true,			'email_check_mx' => true,			'email_enable' => true,			'email_function_name' => true,			'email_package_size' => true,			'enable_confirm' => true,			'enable_pm_icons' => true,			'enable_post_confirm' => true,			'feed_enable' => true,			'feed_http_auth' => true,			'feed_limit_post' => true,			'feed_limit_topic' => true,			'feed_overall' => true,			'feed_overall_forums' => true,			'feed_forum' => true,			'feed_topic' => true,			'feed_topics_new' => true,			'feed_topics_active' => true,			'feed_item_statistics' => true,			'flood_interval' => true,			'force_server_vars' => true,			'form_token_lifetime' => true,			'form_token_mintime' => true,			'form_token_sid_guests' => true,			'forward_pm' => true,			'forwarded_for_check' => true,			'full_folder_action' => true,			'fulltext_native_common_thres' => true,			'fulltext_native_load_upd' => true,			'fulltext_native_max_chars' => true,			'fulltext_native_min_chars' => true,			'gzip_compress' => true,			'hot_threshold' => true,			'img_create_thumbnail' => true,			'img_display_inlined' => true,			'img_imagick' => true,			'img_link_height' => true,			'img_link_width' => true,			'img_max_height' => true,			'img_max_thumb_width' => true,			'img_max_width' => true,			'img_min_thumb_filesize' => true,			'ip_check' => true,			'jab_enable' => true,			'jab_package_size' => true,			'jab_use_ssl' => true,			'limit_load' => true,			'limit_search_load' => true,			'load_anon_lastread' => true,			'load_birthdays' => true,			'load_cpf_memberlist' => true,			'load_cpf_viewprofile' => true,			'load_cpf_viewtopic' => true,			'load_db_lastread' => true,			'load_db_track' => true,			'load_jumpbox' => true,			'load_moderators' => true,			'load_online' => true,			'load_online_guests' => true,			'load_online_time' => true,			'load_onlinetrack' => true,			'load_search' => true,			'load_tplcompile' => true,			'load_user_activity' => true,			'max_attachments' => true,			'max_attachments_pm' => true,			'max_autologin_time' => true,			'max_filesize' => true,			'max_filesize_pm' => true,			'max_login_attempts' => true,			'max_name_chars' => true,			'max_num_search_keywords' => true,			'max_pass_chars' => true,			'max_poll_options' => true,			'max_post_chars' => true,			'max_post_font_size' => true,			'max_post_img_height' => true,			'max_post_img_width' => true,			'max_post_smilies' => true,			'max_post_urls' => true,			'max_quote_depth' => true,			'max_reg_attempts' => true,			'max_sig_chars' => true,			'max_sig_font_size' => true,			'max_sig_img_height' => true,			'max_sig_img_width' => true,			'max_sig_smilies' => true,			'max_sig_urls' => true,			'min_name_chars' => true,			'min_pass_chars' => true,			'min_post_chars' => true,			'min_search_author_chars' => true,			'mime_triggers' => true,			'new_member_post_limit' => true,			'new_member_group_default' => true,			'override_user_style' => true,			'pass_complex' => true,			'pm_edit_time' => true,			'pm_max_boxes' => true,			'pm_max_msgs' => true,			'pm_max_recipients' => true,			'posts_per_page' => true,			'print_pm' => true,			'queue_interval' => true,			'require_activation' => true,			'referer_validation' => true,			'search_block_size' => true,			'search_gc' => true,			'search_interval' => true,			'search_anonymous_interval' => true,			'search_type' => true,			'search_store_results' => true,			'secure_allow_deny' => true,			'secure_allow_empty_referer' => true,			'secure_downloads' => true,			'session_gc' => true,			'session_length' => true,			'smtp_auth_method' => true,			'smtp_delivery' => true,			'topics_per_page' => true,			'tpl_allow_php' => true,			'version' => true,			'warnings_expire_days' => true,			'warnings_gc' => true,			'num_files' => true,			'num_posts' => true,			'num_topics' => true,			'num_users' => true,			'record_online_users' => true,		);		$result = array();		foreach ($config_vars as $name => $void)		{			if (isset($this->config[$name]))			{				$result['config_' . $name] = $this->config[$name];			}		}		global $db;		$result['dbms'] = $dbms;		$result['acm_type'] = $acm_type;		$result['load_extensions'] = $load_extensions;		$result['user_agent'] = 'Unknown';		$result['dbms_version'] = $db->sql_server_info(true);		// Try to get user agent vendor and version		$match = array();		$user_agent = (!empty($_SERVER['HTTP_USER_AGENT'])) ? (string) $_SERVER['HTTP_USER_AGENT'] : '';		$agents = array('firefox', 'msie', 'opera', 'chrome', 'safari', 'mozilla', 'seamonkey', 'konqueror', 'netscape', 'gecko', 'navigator', 'mosaic', 'lynx', 'amaya', 'omniweb', 'avant', 'camino', 'flock', 'aol');		// We check here 1 by 1 because some strings occur after others (for example Mozilla [...] Firefox/)		foreach ($agents as $agent)		{			if (preg_match('#(' . $agent . ')[/ ]?([0-9.]*)#i', $user_agent, $match))			{				$result['user_agent'] = $match[1] . ' ' . $match[2];				break;			}		}		return $result;	}}?>
<?php/**** @package acp* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @package module_install*/class acp_jabber_info{	function module()	{		return array(			'filename'	=> 'acp_jabber',			'title'		=> 'ACP_JABBER_SETTINGS',			'version'	=> '1.0.0',			'modes'		=> array(				'settings'		=> array('title' => 'ACP_JABBER_SETTINGS', 'auth' => 'acl_a_jabber', 'cat' => array('ACP_CLIENT_COMMUNICATION')),			),		);	}	function install()	{	}	function uninstall()	{	}}?>
<?php/**** @package acm* @version $Id$* @copyright (c) 2005, 2009 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @ignore*/if (!defined('IN_PHPBB')){	exit;}// Include the abstract baseif (!class_exists('acm_memory')){	require("{$phpbb_root_path}includes/acm/acm_memory.$phpEx");}/*** ACM for eAccelerator* @package acm* @todo Missing locks from destroy() talk with David*/class acm extends acm_memory{	var $extension = 'eaccelerator';	var $function = 'eaccelerator_get';	var $serialize_header = '#phpbb-serialized#';	/**	* Purge cache data	*	* @return void	*/	function purge()	{		foreach (eaccelerator_list_keys() as $var)		{			// @todo Check why the substr()			// @todo Only unset vars matching $this->key_prefix			eaccelerator_rm(substr($var['name'], 1));		}		parent::purge();	}	/**	 * Perform cache garbage collection	 *	 * @return void	 */	function tidy()	{		eaccelerator_gc();		set_config('cache_last_gc', time(), true);	}	/**	* Fetch an item from the cache	*	* @access protected	* @param string $var Cache key	* @return mixed Cached data	*/	function _read($var)	{		$result = eaccelerator_get($this->key_prefix . $var);		if ($result === null)		{			return false;		}		// Handle serialized objects		if (is_string($result) && strpos($result, $this->serialize_header . 'O:') === 0)		{			$result = unserialize(substr($result, strlen($this->serialize_header)));		}		return $result;	}	/**	* Store data in the cache	*	* @access protected	* @param string $var Cache key	* @param mixed $data Data to store	* @param int $ttl Time-to-live of cached data	* @return bool True if the operation succeeded	*/	function _write($var, $data, $ttl = 2592000)	{		// Serialize objects and make them easy to detect		$data = (is_object($data)) ? $this->serialize_header . serialize($data) : $data;		return eaccelerator_put($this->key_prefix . $var, $data, $ttl);	}	/**	* Remove an item from the cache	*	* @access protected	* @param string $var Cache key	* @return bool True if the operation succeeded	*/	function _delete($var)	{		return eaccelerator_rm($this->key_prefix . $var);	}}?>
<?php/**** @package acp* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @ignore*/if (!defined('IN_PHPBB')){	exit;}/*** @package acp*/class acp_php_info{	var $u_action;	function main($id, $mode)	{		global $db, $user, $auth, $template;		global $config, $phpbb_root_path, $phpbb_admin_path, $phpEx;		if ($mode != 'info')		{			trigger_error('NO_MODE', E_USER_ERROR);		}		$this->tpl_name = 'acp_php_info';		$this->page_title = 'ACP_PHP_INFO';		ob_start();		phpinfo(INFO_GENERAL | INFO_CONFIGURATION | INFO_MODULES | INFO_VARIABLES);		$phpinfo = ob_get_clean();		$phpinfo = trim($phpinfo);		// Here we play around a little with the PHP Info HTML to try and stylise		// it along phpBB's lines ... hopefully without breaking anything. The idea		// for this was nabbed from the PHP annotated manual		preg_match_all('#<body[^>]*>(.*)</body>#si', $phpinfo, $output);		if (empty($phpinfo) || empty($output))		{			trigger_error('NO_PHPINFO_AVAILABLE', E_USER_WARNING);		}		$output = $output[1][0];		// expose_php can make the image not exist		if (preg_match('#<a[^>]*><img[^>]*></a>#', $output))		{			$output = preg_replace('#<tr class="v"><td>(.*?<a[^>]*><img[^>]*></a>)(.*?)</td></tr>#s', '<tr class="row1"><td><table class="type2"><tr><td>\2</td><td>\1</td></tr></table></td></tr>', $output);		}		else		{			$output = preg_replace('#<tr class="v"><td>(.*?)</td></tr>#s', '<tr class="row1"><td><table class="type2"><tr><td>\1</td></tr></table></td></tr>', $output);		}		$output = preg_replace('#<table[^>]+>#i', '<table>', $output);		$output = preg_replace('#<img border="0"#i', '<img', $output);		$output = str_replace(array('class="e"', 'class="v"', 'class="h"', '<hr />', '<font', '</font>'), array('class="row1"', 'class="row2"', '', '', '<span', '</span>'), $output);		// Fix invalid anchor names (eg "module_Zend Optimizer")		$output = preg_replace_callback('#<a name="([^"]+)">#', array($this, 'remove_spaces'), $output);		if (empty($output))		{			trigger_error('NO_PHPINFO_AVAILABLE', E_USER_WARNING);		}		$orig_output = $output;		preg_match_all('#<div class="center">(.*)</div>#siU', $output, $output);		$output = (!empty($output[1][0])) ? $output[1][0] : $orig_output;		$template->assign_var('PHPINFO', $output);	}		function remove_spaces($matches)	{		return '<a name="' . str_replace(' ', '_', $matches[1]) . '">';	}}?>
<html>	<head>		<title>Duplicate Language Keys</title>	</head>	<body><?php//// Security message://// This script is potentially dangerous.// Remove or comment the next line (die(".... ) to enable this script.// Do NOT FORGET to either remove this script or disable it after you have used it.//die("Please read the first lines of this script for instructions on how to enable it");// -------------------------------------------------------------//// $Id$//// @copyright (c) 2005 phpBB Group // @license http://opensource.org/licenses/gpl-license.php GNU Public License // // -------------------------------------------------------------// Thanks to arod-1define('IN_PHPBB', 1);$phpEx = substr(strrchr(__FILE__, '.'), 1);$phpbb_root_path='./../';include($phpbb_root_path . 'common.'.$phpEx);$mode = request_var('mode', '');$modules = find_modules($phpbb_root_path . 'language/en');$kkeys = $keys = array();$langdir = dirname(__FILE__);if (isset($lang)){	unset($lang);}foreach($modules as $module){	require_once("$langdir$module");	if (isset($lang))	{		$kkeys[$module] = $lang;		$keys[] = $module;		unset($lang);	}}$equal = $case = $diff = 0;$output = array();while ($module = array_shift($keys)){	$keys_1 = array_keys($kkeys[$module]);	foreach ($keys as $other_module)	{		$keys_2 = array_keys($kkeys[$other_module]);		foreach(array_intersect($keys_1, $keys_2) as $dup)		{			if ($kkeys[$module][$dup] == $kkeys[$other_module][$dup])			{				$compare = "Equal";				$equal++;			}			else if (strcasecmp($kkeys[$module][$dup], $kkeys[$other_module][$dup]) == 0)			{				$compare = "Differ in case";				$case++;			}			else			{				$compare = "'{$kkeys[$module][$dup]}' - '{$kkeys[$other_module][$dup]}'";				$diff++;			}			$color = '';			if ((basename($module) == "common.$phpEx") || (basename($other_module) == "common.$phpEx"))			{				$color = ' style="color:#B00000;"';			}			switch ($mode)			{				case 'module':					$output[$module][] = "<tr$color><td>" . ((isset($output[$module])) ? '&nbsp;' : "<b>$module</b>" ) . "</td><td>$dup</td><td>$other_module</td><td>$compare</td></tr>";				break;				default:					$output[$dup][] = "<tr$color><td><b>$dup</b></td><td>$module</td><td>$other_module</td><td>$compare</td></tr>";				break;			}		}	}}//var_dump($output);echo "<p><a href=\"lang_duplicates.php\">By Key</a> <a href=\"lang_duplicates.php?mode=module\">By Module</a></p><p>Equal: <b>$equal</b>, Differ in case only: $case, differ in content: $diff</p>";switch ($mode){	case 'module':		echo "<table cellpadding=\"4\"><tr><th>Key</th><th>First File</th><th>Second File</th><th>Difference</th></tr>";		foreach ($output as $module => $html)		{			echo implode('', $html);		}	break;	default:		ksort($output);		echo "<table cellpadding=\"4\"><tr><th>File</th><th>Key</th><th>Conflicting File</th><th>Difference</th></tr>";		foreach ($output as $dup)		{			echo implode('', $dup);		}	break;}echo "</table>";function find_modules($dirname){	$list = glob("$dirname/*.php");	foreach(glob("$dirname/*", GLOB_ONLYDIR) as $name)	{		$list =  array_merge($list, find_modules($name));	}	return $list;}?>	</body></html>
<?php/**** @package acp* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @ignore*/if (!defined('IN_PHPBB')){	exit;}/*** @package acp*/class acp_permissions{	var $u_action;	var $permission_dropdown;	function main($id, $mode)	{		global $db, $user, $auth, $template, $cache;		global $config, $phpbb_root_path, $phpbb_admin_path, $phpEx;		include_once($phpbb_root_path . 'includes/functions_user.' . $phpEx);		include_once($phpbb_root_path . 'includes/acp/auth.' . $phpEx);		$auth_admin = new auth_admin();		$user->add_lang('acp/permissions');		add_permission_language();		$this->tpl_name = 'acp_permissions';		// Trace has other vars		if ($mode == 'trace')		{			$user_id = request_var('u', 0);			$forum_id = request_var('f', 0);			$permission = request_var('auth', '');			$this->tpl_name = 'permission_trace';			if ($user_id && isset($auth_admin->acl_options['id'][$permission]) && $auth->acl_get('a_viewauth'))			{				$this->page_title = sprintf($user->lang['TRACE_PERMISSION'], $user->lang['acl_' . $permission]['lang']);				$this->permission_trace($user_id, $forum_id, $permission);				return;			}			trigger_error('NO_MODE', E_USER_ERROR);		}		// Copy forum permissions		if ($mode == 'setting_forum_copy')		{			$this->tpl_name = 'permission_forum_copy';			if ($auth->acl_get('a_fauth') && $auth->acl_get('a_authusers') && $auth->acl_get('a_authgroups') && $auth->acl_get('a_mauth'))			{				$this->page_title = 'ACP_FORUM_PERMISSIONS_COPY';				$this->copy_forum_permissions();				return;			}			trigger_error('NO_MODE', E_USER_ERROR);		}		// Set some vars		$action = request_var('action', array('' => 0));		$action = key($action);		$action = (isset($_POST['psubmit'])) ? 'apply_permissions' : $action;		$all_forums = request_var('all_forums', 0);		$subforum_id = request_var('subforum_id', 0);		$forum_id = request_var('forum_id', array(0));		$username = request_var('username', array(''), true);		$usernames = request_var('usernames', '', true);		$user_id = request_var('user_id', array(0));		$group_id = request_var('group_id', array(0));		$select_all_groups = request_var('select_all_groups', 0);		$form_name = 'acp_permissions';		add_form_key($form_name);		// If select all groups is set, we pre-build the group id array (this option is used for other screens to link to the permission settings screen)		if ($select_all_groups)		{			// Add default groups to selection			$sql_and = (!$config['coppa_enable']) ? " AND group_name <> 'REGISTERED_COPPA'" : '';			$sql = 'SELECT group_id				FROM ' . GROUPS_TABLE . '				WHERE group_type = ' . GROUP_SPECIAL . "				$sql_and";			$result = $db->sql_query($sql);			while ($row = $db->sql_fetchrow($result))			{				$group_id[] = $row['group_id'];			}			$db->sql_freeresult($result);		}		// Map usernames to ids and vice versa		if ($usernames)		{			$username = explode("\n", $usernames);		}		unset($usernames);		if (sizeof($username) && !sizeof($user_id))		{			user_get_id_name($user_id, $username);			if (!sizeof($user_id))			{				trigger_error($user->lang['SELECTED_USER_NOT_EXIST'] . adm_back_link($this->u_action), E_USER_WARNING);			}		}		unset($username);		// Build forum ids (of all forums are checked or subforum listing used)		if ($all_forums)		{			$sql = 'SELECT forum_id				FROM ' . FORUMS_TABLE . '				ORDER BY left_id';			$result = $db->sql_query($sql);			$forum_id = array();			while ($row = $db->sql_fetchrow($result))			{				$forum_id[] = (int) $row['forum_id'];			}			$db->sql_freeresult($result);		}		else if ($subforum_id)		{			$forum_id = array();			foreach (get_forum_branch($subforum_id, 'children') as $row)			{				$forum_id[] = (int) $row['forum_id'];			}		}		// Define some common variables for every mode		$error = array();		$permission_scope = (strpos($mode, '_global') !== false) ? 'global' : 'local';		// Showing introductionary page?		if ($mode == 'intro')		{			$this->page_title = 'ACP_PERMISSIONS';			$template->assign_vars(array(				'S_INTRO'		=> true)			);			return;		}		switch ($mode)		{			case 'setting_user_global':			case 'setting_group_global':				$this->permission_dropdown = array('u_', 'm_', 'a_');				$permission_victim = ($mode == 'setting_user_global') ? array('user') : array('group');				$this->page_title = ($mode == 'setting_user_global') ? 'ACP_USERS_PERMISSIONS' : 'ACP_GROUPS_PERMISSIONS';			break;			case 'setting_user_local':			case 'setting_group_local':				$this->permission_dropdown = array('f_', 'm_');				$permission_victim = ($mode == 'setting_user_local') ? array('user', 'forums') : array('group', 'forums');				$this->page_title = ($mode == 'setting_user_local') ? 'ACP_USERS_FORUM_PERMISSIONS' : 'ACP_GROUPS_FORUM_PERMISSIONS';			break;			case 'setting_admin_global':			case 'setting_mod_global':				$this->permission_dropdown = (strpos($mode, '_admin_') !== false) ? array('a_') : array('m_');				$permission_victim = array('usergroup');				$this->page_title = ($mode == 'setting_admin_global') ? 'ACP_ADMINISTRATORS' : 'ACP_GLOBAL_MODERATORS';			break;			case 'setting_mod_local':			case 'setting_forum_local':				$this->permission_dropdown = ($mode == 'setting_mod_local') ? array('m_') : array('f_');				$permission_victim = array('forums', 'usergroup');				$this->page_title = ($mode == 'setting_mod_local') ? 'ACP_FORUM_MODERATORS' : 'ACP_FORUM_PERMISSIONS';			break;			case 'view_admin_global':			case 'view_user_global':			case 'view_mod_global':				$this->permission_dropdown = ($mode == 'view_admin_global') ? array('a_') : (($mode == 'view_user_global') ? array('u_') : array('m_'));				$permission_victim = array('usergroup_view');				$this->page_title = ($mode == 'view_admin_global') ? 'ACP_VIEW_ADMIN_PERMISSIONS' : (($mode == 'view_user_global') ? 'ACP_VIEW_USER_PERMISSIONS' : 'ACP_VIEW_GLOBAL_MOD_PERMISSIONS');			break;			case 'view_mod_local':			case 'view_forum_local':				$this->permission_dropdown = ($mode == 'view_mod_local') ? array('m_') : array('f_');				$permission_victim = array('forums', 'usergroup_view');				$this->page_title = ($mode == 'view_mod_local') ? 'ACP_VIEW_FORUM_MOD_PERMISSIONS' : 'ACP_VIEW_FORUM_PERMISSIONS';			break;			default:				trigger_error('NO_MODE', E_USER_ERROR);			break;		}		$template->assign_vars(array(			'L_TITLE'		=> $user->lang[$this->page_title],			'L_EXPLAIN'		=> $user->lang[$this->page_title . '_EXPLAIN'])		);		// Get permission type		$permission_type = request_var('type', $this->permission_dropdown[0]);		if (!in_array($permission_type, $this->permission_dropdown))		{			trigger_error($user->lang['WRONG_PERMISSION_TYPE'] . adm_back_link($this->u_action), E_USER_WARNING);		}		// Handle actions		if (strpos($mode, 'setting_') === 0 && $action)		{			switch ($action)			{				case 'delete':					if (confirm_box(true))					{						// All users/groups selected?						$all_users = (isset($_POST['all_users'])) ? true : false;						$all_groups = (isset($_POST['all_groups'])) ? true : false;						if ($all_users || $all_groups)						{							$items = $this->retrieve_defined_user_groups($permission_scope, $forum_id, $permission_type);							if ($all_users && sizeof($items['user_ids']))							{								$user_id = $items['user_ids'];							}							else if ($all_groups && sizeof($items['group_ids']))							{								$group_id = $items['group_ids'];							}						}						if (sizeof($user_id) || sizeof($group_id))						{							$this->remove_permissions($mode, $permission_type, $auth_admin, $user_id, $group_id, $forum_id);						}						else						{							trigger_error($user->lang['NO_USER_GROUP_SELECTED'] . adm_back_link($this->u_action), E_USER_WARNING);						}					}					else					{						if (isset($_POST['cancel']))						{							$u_redirect = $this->u_action . '&amp;type=' . $permission_type;							foreach ($forum_id as $fid)							{								$u_redirect .= '&amp;forum_id[]=' . $fid;							}							redirect($u_redirect);						}						$s_hidden_fields = array(							'i'				=> $id,							'mode'			=> $mode,							'action'		=> array($action => 1),							'user_id'		=> $user_id,							'group_id'		=> $group_id,							'forum_id'		=> $forum_id,							'type'			=> $permission_type,						);						if (isset($_POST['all_users']))						{							$s_hidden_fields['all_users'] = 1;						}						if (isset($_POST['all_groups']))						{							$s_hidden_fields['all_groups'] = 1;						}						confirm_box(false, $user->lang['CONFIRM_OPERATION'], build_hidden_fields($s_hidden_fields));					}				break;				case 'apply_permissions':					if (!isset($_POST['setting']))					{						trigger_error($user->lang['NO_AUTH_SETTING_FOUND'] . adm_back_link($this->u_action), E_USER_WARNING);					}					if (!check_form_key($form_name))					{						trigger_error($user->lang['FORM_INVALID']. adm_back_link($this->u_action), E_USER_WARNING);					}					$this->set_permissions($mode, $permission_type, $auth_admin, $user_id, $group_id);				break;				case 'apply_all_permissions':					if (!isset($_POST['setting']))					{						trigger_error($user->lang['NO_AUTH_SETTING_FOUND'] . adm_back_link($this->u_action), E_USER_WARNING);					}					if (!check_form_key($form_name))					{						trigger_error($user->lang['FORM_INVALID']. adm_back_link($this->u_action), E_USER_WARNING);					}					$this->set_all_permissions($mode, $permission_type, $auth_admin, $user_id, $group_id);				break;			}		}		// Setting permissions screen		$s_hidden_fields = build_hidden_fields(array(			'user_id'		=> $user_id,			'group_id'		=> $group_id,			'forum_id'		=> $forum_id,			'type'			=> $permission_type)		);		// Go through the screens/options needed and present them in correct order		foreach ($permission_victim as $victim)		{			switch ($victim)			{				case 'forum_dropdown':					if (sizeof($forum_id))					{						$this->check_existence('forum', $forum_id);						continue 2;					}					$template->assign_vars(array(						'S_SELECT_FORUM'		=> true,						'S_FORUM_OPTIONS'		=> make_forum_select(false, false, true, false, false))					);				break;				case 'forums':					if (sizeof($forum_id))					{						$this->check_existence('forum', $forum_id);						continue 2;					}					$forum_list = make_forum_select(false, false, true, false, false, false, true);					// Build forum options					$s_forum_options = '';					foreach ($forum_list as $f_id => $f_row)					{						$s_forum_options .= '<option value="' . $f_id . '"' . (($f_row['selected']) ? ' selected="selected"' : '') . (($f_row['disabled']) ? ' disabled="disabled" class="disabled-option"' : '') . '>' . $f_row['padding'] . $f_row['forum_name'] . '</option>';					}					// Build subforum options					$s_subforum_options = $this->build_subforum_options($forum_list);					$template->assign_vars(array(						'S_SELECT_FORUM'		=> true,						'S_FORUM_OPTIONS'		=> $s_forum_options,						'S_SUBFORUM_OPTIONS'	=> $s_subforum_options,						'S_FORUM_ALL'			=> true,						'S_FORUM_MULTIPLE'		=> true)					);				break;				case 'user':					if (sizeof($user_id))					{						$this->check_existence('user', $user_id);						continue 2;					}					$template->assign_vars(array(						'S_SELECT_USER'			=> true,						'U_FIND_USERNAME'		=> append_sid("{$phpbb_root_path}memberlist.$phpEx", 'mode=searchuser&amp;form=select_victim&amp;field=username&amp;select_single=true'),					));				break;				case 'group':					if (sizeof($group_id))					{						$this->check_existence('group', $group_id);						continue 2;					}					$template->assign_vars(array(						'S_SELECT_GROUP'		=> true,						'S_GROUP_OPTIONS'		=> group_select_options(false, false, false), // Show all groups					));				break;				case 'usergroup':				case 'usergroup_view':					$all_users = (isset($_POST['all_users'])) ? true : false;					$all_groups = (isset($_POST['all_groups'])) ? true : false;					if ((sizeof($user_id) && !$all_users) || (sizeof($group_id) && !$all_groups))					{						if (sizeof($user_id))						{							$this->check_existence('user', $user_id);						}						if (sizeof($group_id))						{							$this->check_existence('group', $group_id);						}						continue 2;					}					// Now we check the users... because the "all"-selection is different here (all defined users/groups)					$items = $this->retrieve_defined_user_groups($permission_scope, $forum_id, $permission_type);					if ($all_users && sizeof($items['user_ids']))					{						$user_id = $items['user_ids'];						continue 2;					}					if ($all_groups && sizeof($items['group_ids']))					{						$group_id = $items['group_ids'];						continue 2;					}					$template->assign_vars(array(						'S_SELECT_USERGROUP'		=> ($victim == 'usergroup') ? true : false,						'S_SELECT_USERGROUP_VIEW'	=> ($victim == 'usergroup_view') ? true : false,						'S_DEFINED_USER_OPTIONS'	=> $items['user_ids_options'],						'S_DEFINED_GROUP_OPTIONS'	=> $items['group_ids_options'],						'S_ADD_GROUP_OPTIONS'		=> group_select_options(false, $items['group_ids'], false),	// Show all groups						'U_FIND_USERNAME'			=> append_sid("{$phpbb_root_path}memberlist.$phpEx", 'mode=searchuser&amp;form=add_user&amp;field=username&amp;select_single=true'),					));				break;			}			// The S_ALLOW_SELECT parameter below is a measure to lower memory usage.			// If there are more than 5 forums selected the admin is not able to select all users/groups too.			// We need to see if the number of forums can be increased or need to be decreased.			$template->assign_vars(array(				'U_ACTION'				=> $this->u_action,				'ANONYMOUS_USER_ID'		=> ANONYMOUS,				'S_SELECT_VICTIM'		=> true,				'S_ALLOW_ALL_SELECT'	=> (sizeof($forum_id) > 5) ? false : true,				'S_CAN_SELECT_USER'		=> ($auth->acl_get('a_authusers')) ? true : false,				'S_CAN_SELECT_GROUP'	=> ($auth->acl_get('a_authgroups')) ? true : false,				'S_HIDDEN_FIELDS'		=> $s_hidden_fields)			);			// Let the forum names being displayed			if (sizeof($forum_id))			{				$sql = 'SELECT forum_name					FROM ' . FORUMS_TABLE . '					WHERE ' . $db->sql_in_set('forum_id', $forum_id) . '					ORDER BY left_id ASC';				$result = $db->sql_query($sql);				$forum_names = array();				while ($row = $db->sql_fetchrow($result))				{					$forum_names[] = $row['forum_name'];				}				$db->sql_freeresult($result);				$template->assign_vars(array(					'S_FORUM_NAMES'		=> (sizeof($forum_names)) ? true : false,					'FORUM_NAMES'		=> implode(', ', $forum_names))				);			}			return;		}		// Do not allow forum_ids being set and no other setting defined (will bog down the server too much)		if (sizeof($forum_id) && !sizeof($user_id) && !sizeof($group_id))		{			trigger_error($user->lang['ONLY_FORUM_DEFINED'] . adm_back_link($this->u_action), E_USER_WARNING);		}		$template->assign_vars(array(			'S_PERMISSION_DROPDOWN'		=> (sizeof($this->permission_dropdown) > 1) ? $this->build_permission_dropdown($this->permission_dropdown, $permission_type, $permission_scope) : false,			'L_PERMISSION_TYPE'			=> $user->lang['ACL_TYPE_' . strtoupper($permission_type)],			'U_ACTION'					=> $this->u_action,			'S_HIDDEN_FIELDS'			=> $s_hidden_fields)		);		if (strpos($mode, 'setting_') === 0)		{			$template->assign_vars(array(				'S_SETTING_PERMISSIONS'		=> true)			);			$hold_ary = $auth_admin->get_mask('set', (sizeof($user_id)) ? $user_id : false, (sizeof($group_id)) ? $group_id : false, (sizeof($forum_id)) ? $forum_id : false, $permission_type, $permission_scope, ACL_NO);			$auth_admin->display_mask('set', $permission_type, $hold_ary, ((sizeof($user_id)) ? 'user' : 'group'), (($permission_scope == 'local') ? true : false));		}		else		{			$template->assign_vars(array(				'S_VIEWING_PERMISSIONS'		=> true)			);			$hold_ary = $auth_admin->get_mask('view', (sizeof($user_id)) ? $user_id : false, (sizeof($group_id)) ? $group_id : false, (sizeof($forum_id)) ? $forum_id : false, $permission_type, $permission_scope, ACL_NEVER);			$auth_admin->display_mask('view', $permission_type, $hold_ary, ((sizeof($user_id)) ? 'user' : 'group'), (($permission_scope == 'local') ? true : false));		}	}	/**	* Build +subforum options	*/	function build_subforum_options($forum_list)	{		global $user;		$s_options = '';		$forum_list = array_merge($forum_list);		foreach ($forum_list as $key => $row)		{			if ($row['disabled'])			{				continue;			}			$s_options .= '<option value="' . $row['forum_id'] . '"' . (($row['selected']) ? ' selected="selected"' : '') . '>' . $row['padding'] . $row['forum_name'];			// We check if a branch is there...			$branch_there = false;			foreach (array_slice($forum_list, $key + 1) as $temp_row)			{				if ($temp_row['left_id'] > $row['left_id'] && $temp_row['left_id'] < $row['right_id'])				{					$branch_there = true;					break;				}				continue;			}			if ($branch_there)			{				$s_options .= ' [' . $user->lang['PLUS_SUBFORUMS'] . ']';			}			$s_options .= '</option>';		}		return $s_options;	}	/**	* Build dropdown field for changing permission types	*/	function build_permission_dropdown($options, $default_option, $permission_scope)	{		global $user, $auth;		$s_dropdown_options = '';		foreach ($options as $setting)		{			if (!$auth->acl_get('a_' . str_replace('_', '', $setting) . 'auth'))			{				continue;			}			$selected = ($setting == $default_option) ? ' selected="selected"' : '';			$l_setting = (isset($user->lang['permission_type'][$permission_scope][$setting])) ? $user->lang['permission_type'][$permission_scope][$setting] : $user->lang['permission_type'][$setting];			$s_dropdown_options .= '<option value="' . $setting . '"' . $selected . '>' . $l_setting . '</option>';		}		return $s_dropdown_options;	}	/**	* Check if selected items exist. Remove not found ids and if empty return error.	*/	function check_existence($mode, &$ids)	{		global $db, $user;		switch ($mode)		{			case 'user':				$table = USERS_TABLE;				$sql_id = 'user_id';			break;			case 'group':				$table = GROUPS_TABLE;				$sql_id = 'group_id';			break;			case 'forum':				$table = FORUMS_TABLE;				$sql_id = 'forum_id';			break;		}		if (sizeof($ids))		{			$sql = "SELECT $sql_id				FROM $table				WHERE " . $db->sql_in_set($sql_id, $ids);			$result = $db->sql_query($sql);			$ids = array();			while ($row = $db->sql_fetchrow($result))			{				$ids[] = (int) $row[$sql_id];			}			$db->sql_freeresult($result);		}		if (!sizeof($ids))		{			trigger_error($user->lang['SELECTED_' . strtoupper($mode) . '_NOT_EXIST'] . adm_back_link($this->u_action), E_USER_WARNING);		}	}	/**	* Apply permissions	*/	function set_permissions($mode, $permission_type, &$auth_admin, &$user_id, &$group_id)	{		global $user, $auth;		$psubmit = request_var('psubmit', array(0 => array(0 => 0)));		// User or group to be set?		$ug_type = (sizeof($user_id)) ? 'user' : 'group';		// Check the permission setting again		if (!$auth->acl_get('a_' . str_replace('_', '', $permission_type) . 'auth') || !$auth->acl_get('a_auth' . $ug_type . 's'))		{			trigger_error($user->lang['NO_AUTH_OPERATION'] . adm_back_link($this->u_action), E_USER_WARNING);		}		$ug_id = $forum_id = 0;		// We loop through the auth settings defined in our submit		list($ug_id, ) = each($psubmit);		list($forum_id, ) = each($psubmit[$ug_id]);		if (empty($_POST['setting']) || empty($_POST['setting'][$ug_id]) || empty($_POST['setting'][$ug_id][$forum_id]) || !is_array($_POST['setting'][$ug_id][$forum_id]))		{			trigger_error('WRONG_PERMISSION_SETTING_FORMAT', E_USER_WARNING);		}		// We obtain and check $_POST['setting'][$ug_id][$forum_id] directly and not using request_var() because request_var()		// currently does not support the amount of dimensions required. ;)		//		$auth_settings = request_var('setting', array(0 => array(0 => array('' => 0))));		$auth_settings = array_map('intval', $_POST['setting'][$ug_id][$forum_id]);		// Do we have a role we want to set?		$assigned_role = (isset($_POST['role'][$ug_id][$forum_id])) ? (int) $_POST['role'][$ug_id][$forum_id] : 0;		// Do the admin want to set these permissions to other items too?		$inherit = request_var('inherit', array(0 => array(0)));		$ug_id = array($ug_id);		$forum_id = array($forum_id);		if (sizeof($inherit))		{			foreach ($inherit as $_ug_id => $forum_id_ary)			{				// Inherit users/groups?				if (!in_array($_ug_id, $ug_id))				{					$ug_id[] = $_ug_id;				}				// Inherit forums?				$forum_id = array_merge($forum_id, array_keys($forum_id_ary));			}		}		$forum_id = array_unique($forum_id);		// If the auth settings differ from the assigned role, then do not set a role...		if ($assigned_role)		{			if (!$this->check_assigned_role($assigned_role, $auth_settings))			{				$assigned_role = 0;			}		}		// Update the permission set...		$auth_admin->acl_set($ug_type, $forum_id, $ug_id, $auth_settings, $assigned_role);		// Do we need to recache the moderator lists?		if ($permission_type == 'm_')		{			cache_moderators();		}		// Remove users who are now moderators or admins from everyones foes list		if ($permission_type == 'm_' || $permission_type == 'a_')		{			update_foes($group_id, $user_id);		}		$this->log_action($mode, 'add', $permission_type, $ug_type, $ug_id, $forum_id);		trigger_error($user->lang['AUTH_UPDATED'] . adm_back_link($this->u_action));	}	/**	* Apply all permissions	*/	function set_all_permissions($mode, $permission_type, &$auth_admin, &$user_id, &$group_id)	{		global $user, $auth;		// User or group to be set?		$ug_type = (sizeof($user_id)) ? 'user' : 'group';		// Check the permission setting again		if (!$auth->acl_get('a_' . str_replace('_', '', $permission_type) . 'auth') || !$auth->acl_get('a_auth' . $ug_type . 's'))		{			trigger_error($user->lang['NO_AUTH_OPERATION'] . adm_back_link($this->u_action), E_USER_WARNING);		}		$auth_settings = (isset($_POST['setting'])) ? $_POST['setting'] : array();		$auth_roles = (isset($_POST['role'])) ? $_POST['role'] : array();		$ug_ids = $forum_ids = array();		// We need to go through the auth settings		foreach ($auth_settings as $ug_id => $forum_auth_row)		{			$ug_id = (int) $ug_id;			$ug_ids[] = $ug_id;			foreach ($forum_auth_row as $forum_id => $auth_options)			{				$forum_id = (int) $forum_id;				$forum_ids[] = $forum_id;				// Check role...				$assigned_role = (isset($auth_roles[$ug_id][$forum_id])) ? (int) $auth_roles[$ug_id][$forum_id] : 0;				// If the auth settings differ from the assigned role, then do not set a role...				if ($assigned_role)				{					if (!$this->check_assigned_role($assigned_role, $auth_options))					{						$assigned_role = 0;					}				}				// Update the permission set...				$auth_admin->acl_set($ug_type, $forum_id, $ug_id, $auth_options, $assigned_role, false);			}		}		$auth_admin->acl_clear_prefetch();		// Do we need to recache the moderator lists?		if ($permission_type == 'm_')		{			cache_moderators();		}		// Remove users who are now moderators or admins from everyones foes list		if ($permission_type == 'm_' || $permission_type == 'a_')		{			update_foes($group_id, $user_id);		}		$this->log_action($mode, 'add', $permission_type, $ug_type, $ug_ids, $forum_ids);		if ($mode == 'setting_forum_local' || $mode == 'setting_mod_local')		{			trigger_error($user->lang['AUTH_UPDATED'] . adm_back_link($this->u_action . '&amp;forum_id[]=' . implode('&amp;forum_id[]=', $forum_ids)));		}		else		{			trigger_error($user->lang['AUTH_UPDATED'] . adm_back_link($this->u_action));		}	}	/**	* Compare auth settings with auth settings from role	* returns false if they differ, true if they are equal	*/	function check_assigned_role($role_id, &$auth_settings)	{		global $db;		$sql = 'SELECT o.auth_option, r.auth_setting			FROM ' . ACL_OPTIONS_TABLE . ' o, ' . ACL_ROLES_DATA_TABLE . ' r			WHERE o.auth_option_id = r.auth_option_id				AND r.role_id = ' . $role_id;		$result = $db->sql_query($sql);		$test_auth_settings = array();		while ($row = $db->sql_fetchrow($result))		{			$test_auth_settings[$row['auth_option']] = $row['auth_setting'];		}		$db->sql_freeresult($result);		// We need to add any ACL_NO setting from auth_settings to compare correctly		foreach ($auth_settings as $option => $setting)		{			if ($setting == ACL_NO)			{				$test_auth_settings[$option] = $setting;			}		}		if (sizeof(array_diff_assoc($auth_settings, $test_auth_settings)))		{			return false;		}		return true;	}	/**	* Remove permissions	*/	function remove_permissions($mode, $permission_type, &$auth_admin, &$user_id, &$group_id, &$forum_id)	{		global $user, $db, $auth;		// User or group to be set?		$ug_type = (sizeof($user_id)) ? 'user' : 'group';		// Check the permission setting again		if (!$auth->acl_get('a_' . str_replace('_', '', $permission_type) . 'auth') || !$auth->acl_get('a_auth' . $ug_type . 's'))		{			trigger_error($user->lang['NO_AUTH_OPERATION'] . adm_back_link($this->u_action), E_USER_WARNING);		}		$auth_admin->acl_delete($ug_type, (($ug_type == 'user') ? $user_id : $group_id), (sizeof($forum_id) ? $forum_id : false), $permission_type);		// Do we need to recache the moderator lists?		if ($permission_type == 'm_')		{			cache_moderators();		}		$this->log_action($mode, 'del', $permission_type, $ug_type, (($ug_type == 'user') ? $user_id : $group_id), (sizeof($forum_id) ? $forum_id : array(0 => 0)));		if ($mode == 'setting_forum_local' || $mode == 'setting_mod_local')		{			trigger_error($user->lang['AUTH_UPDATED'] . adm_back_link($this->u_action . '&amp;forum_id[]=' . implode('&amp;forum_id[]=', $forum_id)));		}		else		{			trigger_error($user->lang['AUTH_UPDATED'] . adm_back_link($this->u_action));		}	}	/**	* Log permission changes	*/	function log_action($mode, $action, $permission_type, $ug_type, $ug_id, $forum_id)	{		global $db, $user;		if (!is_array($ug_id))		{			$ug_id = array($ug_id);		}		if (!is_array($forum_id))		{			$forum_id = array($forum_id);		}		// Logging ... first grab user or groupnames ...		$sql = ($ug_type == 'group') ? 'SELECT group_name as name, group_type FROM ' . GROUPS_TABLE . ' WHERE ' : 'SELECT username as name FROM ' . USERS_TABLE . ' WHERE ';		$sql .= $db->sql_in_set(($ug_type == 'group') ? 'group_id' : 'user_id', array_map('intval', $ug_id));		$result = $db->sql_query($sql);		$l_ug_list = '';		while ($row = $db->sql_fetchrow($result))		{			$l_ug_list .= (($l_ug_list != '') ? ', ' : '') . ((isset($row['group_type']) && $row['group_type'] == GROUP_SPECIAL) ? '<span class="sep">' . $user->lang['G_' . $row['name']] . '</span>' : $row['name']);		}		$db->sql_freeresult($result);		$mode = str_replace('setting_', '', $mode);		if ($forum_id[0] == 0)		{			add_log('admin', 'LOG_ACL_' . strtoupper($action) . '_' . strtoupper($mode) . '_' . strtoupper($permission_type), $l_ug_list);		}		else		{			// Grab the forum details if non-zero forum_id			$sql = 'SELECT forum_name				FROM ' . FORUMS_TABLE . '				WHERE ' . $db->sql_in_set('forum_id', $forum_id);			$result = $db->sql_query($sql);			$l_forum_list = '';			while ($row = $db->sql_fetchrow($result))			{				$l_forum_list .= (($l_forum_list != '') ? ', ' : '') . $row['forum_name'];			}			$db->sql_freeresult($result);			add_log('admin', 'LOG_ACL_' . strtoupper($action) . '_' . strtoupper($mode) . '_' . strtoupper($permission_type), $l_forum_list, $l_ug_list);		}	}	/**	* Display a complete trace tree for the selected permission to determine where settings are set/unset	*/	function permission_trace($user_id, $forum_id, $permission)	{		global $db, $template, $user, $auth;		if ($user_id != $user->data['user_id'])		{			$sql = 'SELECT user_id, username, user_permissions, user_type				FROM ' . USERS_TABLE . '				WHERE user_id = ' . $user_id;			$result = $db->sql_query($sql);			$userdata = $db->sql_fetchrow($result);			$db->sql_freeresult($result);		}		else		{			$userdata = $user->data;		}		if (!$userdata)		{			trigger_error('NO_USERS', E_USER_ERROR);		}		$forum_name = false;		if ($forum_id)		{			$sql = 'SELECT forum_name				FROM ' . FORUMS_TABLE . "				WHERE forum_id = $forum_id";			$result = $db->sql_query($sql, 3600);			$forum_name = $db->sql_fetchfield('forum_name');			$db->sql_freeresult($result);		}		$back = request_var('back', 0);		$template->assign_vars(array(			'PERMISSION'			=> $user->lang['acl_' . $permission]['lang'],			'PERMISSION_USERNAME'	=> $userdata['username'],			'FORUM_NAME'			=> $forum_name,			'S_GLOBAL_TRACE'		=> ($forum_id) ? false : true,			'U_BACK'				=> ($back) ? build_url(array('f', 'back')) . "&amp;f=$back" : '')		);		$template->assign_block_vars('trace', array(			'WHO'			=> $user->lang['DEFAULT'],			'INFORMATION'	=> $user->lang['TRACE_DEFAULT'],			'S_SETTING_NO'		=> true,			'S_TOTAL_NO'		=> true)		);		$sql = 'SELECT DISTINCT g.group_name, g.group_id, g.group_type			FROM ' . GROUPS_TABLE . ' g				LEFT JOIN ' . USER_GROUP_TABLE . ' ug ON (ug.group_id = g.group_id)			WHERE ug.user_id = ' . $user_id . '				AND ug.user_pending = 0				AND NOT (ug.group_leader = 1 AND g.group_skip_auth = 1)			ORDER BY g.group_type DESC, g.group_id DESC';		$result = $db->sql_query($sql);		$groups = array();		while ($row = $db->sql_fetchrow($result))		{			$groups[$row['group_id']] = array(				'auth_setting'		=> ACL_NO,				'group_name'		=> ($row['group_type'] == GROUP_SPECIAL) ? $user->lang['G_' . $row['group_name']] : $row['group_name']			);		}		$db->sql_freeresult($result);		$total = ACL_NO;		$add_key = (($forum_id) ? '_LOCAL' : '');		if (sizeof($groups))		{			// Get group auth settings			$hold_ary = $auth->acl_group_raw_data(array_keys($groups), $permission, $forum_id);			foreach ($hold_ary as $group_id => $forum_ary)			{				$groups[$group_id]['auth_setting'] = $hold_ary[$group_id][$forum_id][$permission];			}			unset($hold_ary);			foreach ($groups as $id => $row)			{				switch ($row['auth_setting'])				{					case ACL_NO:						$information = $user->lang['TRACE_GROUP_NO' . $add_key];					break;					case ACL_YES:						$information = ($total == ACL_YES) ? $user->lang['TRACE_GROUP_YES_TOTAL_YES' . $add_key] : (($total == ACL_NEVER) ? $user->lang['TRACE_GROUP_YES_TOTAL_NEVER' . $add_key] : $user->lang['TRACE_GROUP_YES_TOTAL_NO' . $add_key]);						$total = ($total == ACL_NO) ? ACL_YES : $total;					break;					case ACL_NEVER:						$information = ($total == ACL_YES) ? $user->lang['TRACE_GROUP_NEVER_TOTAL_YES' . $add_key] : (($total == ACL_NEVER) ? $user->lang['TRACE_GROUP_NEVER_TOTAL_NEVER' . $add_key] : $user->lang['TRACE_GROUP_NEVER_TOTAL_NO' . $add_key]);						$total = ACL_NEVER;					break;				}				$template->assign_block_vars('trace', array(					'WHO'			=> $row['group_name'],					'INFORMATION'	=> $information,					'S_SETTING_NO'		=> ($row['auth_setting'] == ACL_NO) ? true : false,					'S_SETTING_YES'		=> ($row['auth_setting'] == ACL_YES) ? true : false,					'S_SETTING_NEVER'	=> ($row['auth_setting'] == ACL_NEVER) ? true : false,					'S_TOTAL_NO'		=> ($total == ACL_NO) ? true : false,					'S_TOTAL_YES'		=> ($total == ACL_YES) ? true : false,					'S_TOTAL_NEVER'		=> ($total == ACL_NEVER) ? true : false)				);			}		}		// Get user specific permission... globally or for this forum		$hold_ary = $auth->acl_user_raw_data($user_id, $permission, $forum_id);		$auth_setting = (!sizeof($hold_ary)) ? ACL_NO : $hold_ary[$user_id][$forum_id][$permission];		switch ($auth_setting)		{			case ACL_NO:				$information = ($total == ACL_NO) ? $user->lang['TRACE_USER_NO_TOTAL_NO' . $add_key] : $user->lang['TRACE_USER_KEPT' . $add_key];				$total = ($total == ACL_NO) ? ACL_NEVER : $total;			break;			case ACL_YES:				$information = ($total == ACL_YES) ? $user->lang['TRACE_USER_YES_TOTAL_YES' . $add_key] : (($total == ACL_NEVER) ? $user->lang['TRACE_USER_YES_TOTAL_NEVER' . $add_key] : $user->lang['TRACE_USER_YES_TOTAL_NO' . $add_key]);				$total = ($total == ACL_NO) ? ACL_YES : $total;			break;			case ACL_NEVER:				$information = ($total == ACL_YES) ? $user->lang['TRACE_USER_NEVER_TOTAL_YES' . $add_key] : (($total == ACL_NEVER) ? $user->lang['TRACE_USER_NEVER_TOTAL_NEVER' . $add_key] : $user->lang['TRACE_USER_NEVER_TOTAL_NO' . $add_key]);				$total = ACL_NEVER;			break;		}		$template->assign_block_vars('trace', array(			'WHO'			=> $userdata['username'],			'INFORMATION'	=> $information,			'S_SETTING_NO'		=> ($auth_setting == ACL_NO) ? true : false,			'S_SETTING_YES'		=> ($auth_setting == ACL_YES) ? true : false,			'S_SETTING_NEVER'	=> ($auth_setting == ACL_NEVER) ? true : false,			'S_TOTAL_NO'		=> false,			'S_TOTAL_YES'		=> ($total == ACL_YES) ? true : false,			'S_TOTAL_NEVER'		=> ($total == ACL_NEVER) ? true : false)		);		if ($forum_id != 0 && isset($auth->acl_options['global'][$permission]))		{			if ($user_id != $user->data['user_id'])			{				$auth2 = new auth();				$auth2->acl($userdata);				$auth_setting = $auth2->acl_get($permission);			}			else			{				$auth_setting = $auth->acl_get($permission);			}			if ($auth_setting)			{				$information = ($total == ACL_YES) ? $user->lang['TRACE_USER_GLOBAL_YES_TOTAL_YES'] : $user->lang['TRACE_USER_GLOBAL_YES_TOTAL_NEVER'];				$total = ACL_YES;			}			else			{				$information = $user->lang['TRACE_USER_GLOBAL_NEVER_TOTAL_KEPT'];			}			// If there is no auth information we do not need to worry the user by showing non-relevant data.			if ($auth_setting)			{				$template->assign_block_vars('trace', array(					'WHO'			=> sprintf($user->lang['TRACE_GLOBAL_SETTING'], $userdata['username']),					'INFORMATION'	=> sprintf($information, '<a href="' . $this->u_action . "&amp;u=$user_id&amp;f=0&amp;auth=$permission&amp;back=$forum_id\">", '</a>'),					'S_SETTING_NO'		=> false,					'S_SETTING_YES'		=> $auth_setting,					'S_SETTING_NEVER'	=> !$auth_setting,					'S_TOTAL_NO'		=> false,					'S_TOTAL_YES'		=> ($total == ACL_YES) ? true : false,					'S_TOTAL_NEVER'		=> ($total == ACL_NEVER) ? true : false)				);			}		}		// Take founder status into account, overwriting the default values		if ($userdata['user_type'] == USER_FOUNDER && strpos($permission, 'a_') === 0)		{			$template->assign_block_vars('trace', array(				'WHO'			=> $userdata['username'],				'INFORMATION'	=> $user->lang['TRACE_USER_FOUNDER'],				'S_SETTING_NO'		=> ($auth_setting == ACL_NO) ? true : false,				'S_SETTING_YES'		=> ($auth_setting == ACL_YES) ? true : false,				'S_SETTING_NEVER'	=> ($auth_setting == ACL_NEVER) ? true : false,				'S_TOTAL_NO'		=> false,				'S_TOTAL_YES'		=> true,				'S_TOTAL_NEVER'		=> false)			);			$total = ACL_YES;		}		// Total value...		$template->assign_vars(array(			'S_RESULT_NO'		=> ($total == ACL_NO) ? true : false,			'S_RESULT_YES'		=> ($total == ACL_YES) ? true : false,			'S_RESULT_NEVER'	=> ($total == ACL_NEVER) ? true : false,		));	}	/**	* Handles copying permissions from one forum to others	*/	function copy_forum_permissions()	{		global $auth, $cache, $template, $user;		$user->add_lang('acp/forums');		$submit = isset($_POST['submit']) ? true : false;		if ($submit)		{			$src = request_var('src_forum_id', 0);			$dest = request_var('dest_forum_ids', array(0));			if (confirm_box(true))			{				if (copy_forum_permissions($src, $dest))				{					cache_moderators();					$auth->acl_clear_prefetch();					$cache->destroy('sql', FORUMS_TABLE);					trigger_error($user->lang['AUTH_UPDATED'] . adm_back_link($this->u_action));				}				else				{					trigger_error($user->lang['SELECTED_FORUM_NOT_EXIST'] . adm_back_link($this->u_action), E_USER_WARNING);				}			}			else			{				$s_hidden_fields = array(					'submit'			=> $submit,					'src_forum_id'		=> $src,					'dest_forum_ids'	=> $dest,				);				$s_hidden_fields = build_hidden_fields($s_hidden_fields);				confirm_box(false, $user->lang['COPY_PERMISSIONS_CONFIRM'], $s_hidden_fields);			}		}		$template->assign_vars(array(			'S_FORUM_OPTIONS' => make_forum_select(false, false, false, false, false),		));	}	/**	* Get already assigned users/groups	*/	function retrieve_defined_user_groups($permission_scope, $forum_id, $permission_type)	{		global $db, $user;		$sql_forum_id = ($permission_scope == 'global') ? 'AND a.forum_id = 0' : ((sizeof($forum_id)) ? 'AND ' . $db->sql_in_set('a.forum_id', $forum_id) : 'AND a.forum_id <> 0');		// Permission options are only able to be a permission set... therefore we will pre-fetch the possible options and also the possible roles		$option_ids = $role_ids = array();		$sql = 'SELECT auth_option_id			FROM ' . ACL_OPTIONS_TABLE . '			WHERE auth_option ' . $db->sql_like_expression($permission_type . $db->any_char);		$result = $db->sql_query($sql);		while ($row = $db->sql_fetchrow($result))		{			$option_ids[] = (int) $row['auth_option_id'];		}		$db->sql_freeresult($result);		if (sizeof($option_ids))		{			$sql = 'SELECT DISTINCT role_id				FROM ' . ACL_ROLES_DATA_TABLE . '				WHERE ' . $db->sql_in_set('auth_option_id', $option_ids);			$result = $db->sql_query($sql);			while ($row = $db->sql_fetchrow($result))			{				$role_ids[] = (int) $row['role_id'];			}			$db->sql_freeresult($result);		}		if (sizeof($option_ids) && sizeof($role_ids))		{			$sql_where = 'AND (' . $db->sql_in_set('a.auth_option_id', $option_ids) . ' OR ' . $db->sql_in_set('a.auth_role_id', $role_ids) . ')';		}		else if (sizeof($role_ids))		{			$sql_where = 'AND ' . $db->sql_in_set('a.auth_role_id', $role_ids);		}		else if (sizeof($option_ids))		{			$sql_where = 'AND ' . $db->sql_in_set('a.auth_option_id', $option_ids);		}		// Not ideal, due to the filesort, non-use of indexes, etc.		$sql = 'SELECT DISTINCT u.user_id, u.username, u.username_clean, u.user_regdate			FROM ' . USERS_TABLE . ' u, ' . ACL_USERS_TABLE . " a			WHERE u.user_id = a.user_id				$sql_forum_id				$sql_where			ORDER BY u.username_clean, u.user_regdate ASC";		$result = $db->sql_query($sql);		$s_defined_user_options = '';		$defined_user_ids = array();		while ($row = $db->sql_fetchrow($result))		{			$s_defined_user_options .= '<option value="' . $row['user_id'] . '">' . $row['username'] . '</option>';			$defined_user_ids[] = $row['user_id'];		}		$db->sql_freeresult($result);		$sql = 'SELECT DISTINCT g.group_type, g.group_name, g.group_id			FROM ' . GROUPS_TABLE . ' g, ' . ACL_GROUPS_TABLE . " a			WHERE g.group_id = a.group_id				$sql_forum_id				$sql_where			ORDER BY g.group_type DESC, g.group_name ASC";		$result = $db->sql_query($sql);		$s_defined_group_options = '';		$defined_group_ids = array();		while ($row = $db->sql_fetchrow($result))		{			$s_defined_group_options .= '<option' . (($row['group_type'] == GROUP_SPECIAL) ? ' class="sep"' : '') . ' value="' . $row['group_id'] . '">' . (($row['group_type'] == GROUP_SPECIAL) ? $user->lang['G_' . $row['group_name']] : $row['group_name']) . '</option>';			$defined_group_ids[] = $row['group_id'];		}		$db->sql_freeresult($result);		return array(			'group_ids'			=> $defined_group_ids,			'group_ids_options'	=> $s_defined_group_options,			'user_ids'			=> $defined_user_ids,			'user_ids_options'	=> $s_defined_user_options		);	}}?>
<?php/*** Only adjust bitfields, do not rewrite text...* All new parsings have the img, flash and quote modes set to true** You should make a backup from your users, posts and privmsgs table in case something goes wrong* Forum descriptions and rules need to be re-submitted manually.*/die("Please read the first lines of this script for instructions on how to enable it");set_time_limit(0);define('IN_PHPBB', true);$phpbb_root_path = './../';$phpEx = substr(strrchr(__FILE__, '.'), 1);include($phpbb_root_path . 'common.'.$phpEx);include($phpbb_root_path . 'includes/message_parser.' . $phpEx);// Start session management$user->session_begin();$auth->acl($user->data);$user->setup();$echos = 0;// Adjust user signatures$message_parser = new parse_message();$message_parser->mode = 'sig';$message_parser->bbcode_init();$sql = 'SELECT user_id, user_sig, user_sig_bbcode_uid, user_sig_bbcode_bitfield	FROM ' . USERS_TABLE;$result = $db->sql_query($sql);while ($row = $db->sql_fetchrow($result)){	// Convert bbcodes back to their normal form	if ($row['user_sig_bbcode_uid'] && $row['user_sig'])	{		decode_message($row['user_sig'], $row['user_sig_bbcode_uid']);		$message_parser->message = $row['user_sig'];		$message_parser->prepare_bbcodes();		$message_parser->parse_bbcode();		$bitfield = $message_parser->bbcode_bitfield;		$sql = 'UPDATE ' . USERS_TABLE . " SET user_sig_bbcode_bitfield = '" . $db->sql_escape($bitfield) . "'			WHERE user_id = " . $row['user_id'];		$db->sql_query($sql);		if ($echos > 200)		{			echo '<br />' . "\n";			$echos = 0;		}		echo '.';		$echos++;		flush();	}	else	{		$sql = 'UPDATE ' . USERS_TABLE . " SET user_sig_bbcode_bitfield = ''			WHERE user_id = " . $row['user_id'];		$db->sql_query($sql);	}}$db->sql_freeresult($result);// Now adjust posts$message_parser = new parse_message();$message_parser->mode = 'post';$message_parser->bbcode_init();// Update posts$sql = 'SELECT post_id, post_text, bbcode_uid, enable_bbcode, enable_smilies, enable_sig	FROM ' . POSTS_TABLE;$result = $db->sql_query($sql);while ($row = $db->sql_fetchrow($result)){	// Convert bbcodes back to their normal form	if ($row['enable_bbcode'])	{		decode_message($row['post_text'], $row['bbcode_uid']);		$message_parser->message = $row['post_text'];		$message_parser->prepare_bbcodes();		$message_parser->parse_bbcode();		$bitfield = $message_parser->bbcode_bitfield;		$sql = 'UPDATE ' . POSTS_TABLE . " SET bbcode_bitfield = '" . $db->sql_escape($bitfield) . "'			WHERE post_id = " . $row['post_id'];		$db->sql_query($sql);		if ($echos > 200)		{			echo '<br />' . "\n";			$echos = 0;		}		echo '.';		$echos++;		flush();	}	else	{		$sql = 'UPDATE ' . POSTS_TABLE . " SET bbcode_bitfield = ''			WHERE post_id = " . $row['post_id'];		$db->sql_query($sql);	}}$db->sql_freeresult($result);// Now to the private messages$message_parser = new parse_message();$message_parser->mode = 'post';$message_parser->bbcode_init();// Update pms$sql = 'SELECT msg_id, message_text, bbcode_uid, enable_bbcode	FROM ' . PRIVMSGS_TABLE;$result = $db->sql_query($sql);while ($row = $db->sql_fetchrow($result)){	// Convert bbcodes back to their normal form	if ($row['enable_bbcode'])	{		decode_message($row['message_text'], $row['bbcode_uid']);		$message_parser->message = $row['message_text'];		$message_parser->prepare_bbcodes();		$message_parser->parse_bbcode();		$bitfield = $message_parser->bbcode_bitfield;		$sql = 'UPDATE ' . PRIVMSGS_TABLE . " SET bbcode_bitfield = '" . $db->sql_escape($bitfield) . "'			WHERE msg_id = " . $row['msg_id'];		$db->sql_query($sql);		if ($echos > 200)		{			echo '<br />' . "\n";			$echos = 0;		}		echo '.';		$echos++;		flush();	}	else	{		$sql = 'UPDATE ' . PRIVMSGS_TABLE . " SET bbcode_bitfield = ''			WHERE msg_id = " . $row['msg_id'];		$db->sql_query($sql);	}}$db->sql_freeresult($result);// Done$db->sql_close();?>
<?php/**** @package acp* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @package module_install*/class acp_styles_info{	function module()	{		return array(			'filename'	=> 'acp_styles',			'title'		=> 'ACP_CAT_STYLES',			'version'	=> '1.0.0',			'modes'		=> array(				'style'		=> array('title' => 'ACP_STYLES', 'auth' => 'acl_a_styles', 'cat' => array('ACP_STYLE_MANAGEMENT')),				'template'	=> array('title' => 'ACP_TEMPLATES', 'auth' => 'acl_a_styles', 'cat' => array('ACP_STYLE_COMPONENTS')),				'theme'		=> array('title' => 'ACP_THEMES', 'auth' => 'acl_a_styles', 'cat' => array('ACP_STYLE_COMPONENTS')),				'imageset'	=> array('title' => 'ACP_IMAGESETS', 'auth' => 'acl_a_styles', 'cat' => array('ACP_STYLE_COMPONENTS')),			),		);	}	function install()	{	}	function uninstall()	{	}}?>
<?php/*** @package ucp* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @package module_install*/class ucp_pm_info{	function module()	{		return array(			'filename'	=> 'ucp_pm',			'title'		=> 'UCP_PM',			'version'	=> '1.0.0',			'modes'		=> array(				'view'		=> array('title' => 'UCP_PM_VIEW', 'auth' => 'cfg_allow_privmsg', 'display' => false, 'cat' => array('UCP_PM')),				'compose'	=> array('title' => 'UCP_PM_COMPOSE', 'auth' => 'cfg_allow_privmsg', 'cat' => array('UCP_PM')),				'drafts'	=> array('title' => 'UCP_PM_DRAFTS', 'auth' => 'cfg_allow_privmsg', 'cat' => array('UCP_PM')),				'options'	=> array('title' => 'UCP_PM_OPTIONS', 'auth' => 'cfg_allow_privmsg', 'cat' => array('UCP_PM')),				'popup'		=> array('title' => 'UCP_PM_POPUP_TITLE', 'auth' => 'cfg_allow_privmsg', 'display' => false, 'cat' => array('UCP_PM')),			),		);	}	function install()	{	}	function uninstall()	{	}}?>
<?php/**** groups [English]** @package language* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** DO NOT CHANGE*/if (!defined('IN_PHPBB')){	exit;}if (empty($lang) || !is_array($lang)){	$lang = array();}// DEVELOPERS PLEASE NOTE//// All language files should use UTF-8 as their encoding and the files must not contain a BOM.//// Placeholders can now contain order information, e.g. instead of// 'Page %s of %s' you can (and should) write 'Page %1$s of %2$s', this allows// translators to re-order the output of data while ensuring it remains correct//// You do not need this where single placeholders are used, e.g. 'Message %d' is fine// equally where a string contains only two placeholders which are used to wrap text// in a url you again do not need to specify an order e.g., 'Click %sHERE%s' is fine$lang = array_merge($lang, array(	'ALREADY_DEFAULT_GROUP'		=> 'The selected group is already your default group.',	'ALREADY_IN_GROUP'			=> 'You are already a member of the selected group.',	'ALREADY_IN_GROUP_PENDING'	=> 'You already requested joining the selected group.',	'CANNOT_JOIN_GROUP'			=> 'You are not able to join this group. You are only able to join open and freely open groups.',	'CANNOT_RESIGN_GROUP'		=> 'You are not able to resign from this group. You are only able to resign from open and freely open groups.',	'CHANGED_DEFAULT_GROUP'		=> 'Successfully changed default group.',	'GROUP_AVATAR'						=> 'Group avatar',	'GROUP_CHANGE_DEFAULT'				=> 'Are you sure you want to change your default membership to the group %s?',	'GROUP_CLOSED'						=> 'Closed',	'GROUP_DESC'						=> 'Group description',	'GROUP_HIDDEN'						=> 'Hidden',	'GROUP_INFORMATION'					=> 'Usergroup information',	'GROUP_IS_CLOSED'					=> 'This is a closed group, new members can only join upon invitation of a group leader.',	'GROUP_IS_FREE'						=> 'This is a freely open group, all new members are welcome.',	'GROUP_IS_HIDDEN'					=> 'This is a hidden group, only members of this group can view its membership.',	'GROUP_IS_OPEN'						=> 'This is an open group, members can apply to join.',	'GROUP_IS_SPECIAL'					=> 'This is a special group, special groups are managed by the board administrators.',	'GROUP_JOIN'						=> 'Join group',	'GROUP_JOIN_CONFIRM'				=> 'Are you sure you want to join the selected group?',	'GROUP_JOIN_PENDING'				=> 'Request to join group',	'GROUP_JOIN_PENDING_CONFIRM'		=> 'Are you sure you want to request joining the selected group?',	'GROUP_JOINED'						=> 'Successfully joined selected group.',	'GROUP_JOINED_PENDING'				=> 'Successfully requested group membership. Please wait for a group leader to approve your membership.',	'GROUP_LIST'						=> 'Manage users',	'GROUP_MEMBERS'						=> 'Group members',	'GROUP_NAME'						=> 'Group name',	'GROUP_OPEN'						=> 'Open',	'GROUP_RANK'						=> 'Group rank',	'GROUP_RESIGN_MEMBERSHIP'			=> 'Resign group membership',	'GROUP_RESIGN_MEMBERSHIP_CONFIRM'	=> 'Are you sure you want to resign your membership from the selected group?',	'GROUP_RESIGN_PENDING'				=> 'Resign a pending group membership',	'GROUP_RESIGN_PENDING_CONFIRM'		=> 'Are you sure you want to resign your pending membership from the selected group?',	'GROUP_RESIGNED_MEMBERSHIP'			=> 'You were successfully removed from the selected group.',	'GROUP_RESIGNED_PENDING'			=> 'Your pending membership was successfully removed from the selected group.',	'GROUP_TYPE'						=> 'Group type',	'GROUP_UNDISCLOSED'					=> 'Hidden group',	'FORUM_UNDISCLOSED'					=> 'Moderating hidden forum(s)',	'LOGIN_EXPLAIN_GROUP'	=> 'You need to login to view group details.',	'NO_LEADERS'					=> 'You are not a leader of any group.',	'NOT_LEADER_OF_GROUP'			=> 'The requested operation cannot be taken because you are not a leader of the selected group.',	'NOT_MEMBER_OF_GROUP'			=> 'The requested operation cannot be taken because you are not a member of the selected group or your membership has not been approved yet.',	'NOT_RESIGN_FROM_DEFAULT_GROUP'	=> 'You are not allowed to resign from your default group.',		'PRIMARY_GROUP'		=> 'Primary group',	'REMOVE_SELECTED'		=> 'Remove selected',	'USER_GROUP_CHANGE'			=> 'From %1$s group to %2$s',	'USER_GROUP_DEMOTE'			=> 'Demote leadership',	'USER_GROUP_DEMOTE_CONFIRM'	=> 'Are you sure you want to demote as group leader from the selected group?',	'USER_GROUP_DEMOTED'		=> 'Successfully demoted your leadership.',));?>
<?php/**** @package acp* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @ignore*/if (!defined('IN_PHPBB')){	exit;}/*** @package acp*/class acp_update{	var $u_action;	function main($id, $mode)	{		global $config, $db, $user, $auth, $template, $cache;		global $phpbb_root_path, $phpbb_admin_path, $phpEx;		$user->add_lang('install');		$this->tpl_name = 'acp_update';		$this->page_title = 'ACP_VERSION_CHECK';		// Get current and latest version		$errstr = '';		$errno = 0;		$info = obtain_latest_version_info(request_var('versioncheck_force', false));		if ($info === false)		{			trigger_error('VERSIONCHECK_FAIL', E_USER_WARNING);		}		$info = explode("\n", $info);		$latest_version = trim($info[0]);		$announcement_url = trim($info[1]);		$announcement_url = (strpos($announcement_url, '&amp;') === false) ? str_replace('&', '&amp;', $announcement_url) : $announcement_url;		$update_link = append_sid($phpbb_root_path . 'install/index.' . $phpEx, 'mode=update');		// next feature release		$next_feature_version = $next_feature_announcement_url = false;		if (isset($info[2]) && trim($info[2]) !== '')		{			$next_feature_version = trim($info[2]);			$next_feature_announcement_url = trim($info[3]);		}		// Determine automatic update...		$sql = 'SELECT config_value			FROM ' . CONFIG_TABLE . "			WHERE config_name = 'version_update_from'";		$result = $db->sql_query($sql);		$version_update_from = (string) $db->sql_fetchfield('config_value');		$db->sql_freeresult($result);		$current_version = (!empty($version_update_from)) ? $version_update_from : $config['version'];		$template->assign_vars(array(			'S_UP_TO_DATE'		=> phpbb_version_compare($latest_version, $config['version'], '<='),			'S_UP_TO_DATE_AUTO'	=> phpbb_version_compare($latest_version, $current_version, '<='),			'S_VERSION_CHECK'	=> true,			'U_ACTION'			=> $this->u_action,			'U_VERSIONCHECK_FORCE' => append_sid($this->u_action . '&amp;versioncheck_force=1'),			'LATEST_VERSION'	=> $latest_version,			'CURRENT_VERSION'	=> $config['version'],			'AUTO_VERSION'		=> $version_update_from,			'NEXT_FEATURE_VERSION'	=> $next_feature_version,			'UPDATE_INSTRUCTIONS'	=> sprintf($user->lang['UPDATE_INSTRUCTIONS'], $announcement_url, $update_link),			'UPGRADE_INSTRUCTIONS'	=> $next_feature_version ? $user->lang('UPGRADE_INSTRUCTIONS', $next_feature_version, $next_feature_announcement_url) : false,		));	}}?>
<?php/**** @package ucp* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @package module_install*/class ucp_attachments_info{	function module()	{		return array(			'filename'	=> 'ucp_attachments',			'title'		=> 'UCP_ATTACHMENTS',			'version'	=> '1.0.0',			'modes'		=> array(				'attachments'	=> array('title' => 'UCP_MAIN_ATTACHMENTS', 'auth' => 'acl_u_attach', 'cat' => array('UCP_MAIN')),			),		);	}	function install()	{	}	function uninstall()	{	}}?>
<?php/**** @package phpBB3* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @ignore*/if (!defined('IN_PHPBB')){	exit;}/*** Transfer class, wrapper for ftp/sftp/ssh* @package phpBB3*/class transfer{	var $connection;	var $host;	var $port;	var $username;	var $password;	var $timeout;	var $root_path;	var $tmp_path;	var $file_perms;	var $dir_perms;	/**	* Constructor - init some basic values	*/	function transfer()	{		global $phpbb_root_path;		$this->file_perms	= 0644;		$this->dir_perms	= 0777;		// We use the store directory as temporary path to circumvent open basedir restrictions		$this->tmp_path = $phpbb_root_path . 'store/';	}	/**	* Write file to location	*/	function write_file($destination_file = '', $contents = '')	{		global $phpbb_root_path;		$destination_file = $this->root_path . str_replace($phpbb_root_path, '', $destination_file);		// need to create a temp file and then move that temp file.		// ftp functions can only move files around and can't create.		// This means that the users will need to have access to write		// temporary files or have write access on a folder within phpBB		// like the cache folder. If the user can't do either, then		// he/she needs to use the fsock ftp method		$temp_name = tempnam($this->tmp_path, 'transfer_');		@unlink($temp_name);		$fp = @fopen($temp_name, 'w');		if (!$fp)		{			trigger_error('Unable to create temporary file ' . $temp_name, E_USER_ERROR);		}		@fwrite($fp, $contents);		@fclose($fp);		$result = $this->overwrite_file($temp_name, $destination_file);		// remove temporary file now		@unlink($temp_name);		return $result;	}	/**	* Moving file into location. If the destination file already exists it gets overwritten	*/	function overwrite_file($source_file, $destination_file)	{		/**		* @todo generally think about overwriting files in another way, by creating a temporary file and then renaming it		* @todo check for the destination file existance too		*/		$this->_delete($destination_file);		$result = $this->_put($source_file, $destination_file);		$this->_chmod($destination_file, $this->file_perms);		return $result;	}	/**	* Create directory structure	*/	function make_dir($dir)	{		global $phpbb_root_path;		$dir = str_replace($phpbb_root_path, '', $dir);		$dir = explode('/', $dir);		$dirs = '';		for ($i = 0, $total = sizeof($dir); $i < $total; $i++)		{			$result = true;			if (strpos($dir[$i], '.') === 0)			{				continue;			}			$cur_dir = $dir[$i] . '/';			if (!file_exists($phpbb_root_path . $dirs . $cur_dir))			{				// create the directory				$result = $this->_mkdir($dir[$i]);				$this->_chmod($dir[$i], $this->dir_perms);			}			$this->_chdir($this->root_path . $dirs . $dir[$i]);			$dirs .= $cur_dir;		}		$this->_chdir($this->root_path);		/**		* @todo stack result into array to make sure every path creation has been taken care of		*/		return $result;	}	/**	* Copy file from source location to destination location	*/	function copy_file($from_loc, $to_loc)	{		global $phpbb_root_path;		$from_loc = ((strpos($from_loc, $phpbb_root_path) !== 0) ? $phpbb_root_path : '') . $from_loc;		$to_loc = $this->root_path . str_replace($phpbb_root_path, '', $to_loc);		if (!file_exists($from_loc))		{			return false;		}		$result = $this->overwrite_file($from_loc, $to_loc);		return $result;	}	/**	* Remove file	*/	function delete_file($file)	{		global $phpbb_root_path;		$file = $this->root_path . str_replace($phpbb_root_path, '', $file);		return $this->_delete($file);	}	/**	* Remove directory	* @todo remove child directories?	*/	function remove_dir($dir)	{		global $phpbb_root_path;		$dir = $this->root_path . str_replace($phpbb_root_path, '', $dir);		return $this->_rmdir($dir);	}	/**	* Rename a file or folder	*/	function rename($old_handle, $new_handle)	{		global $phpbb_root_path;		$old_handle = $this->root_path . str_replace($phpbb_root_path, '', $old_handle);		return $this->_rename($old_handle, $new_handle);	}	/**	* Check if a specified file exist...	*/	function file_exists($directory, $filename)	{		global $phpbb_root_path;		$directory = $this->root_path . str_replace($phpbb_root_path, '', $directory);		$this->_chdir($directory);		$result = $this->_ls();		if ($result !== false && is_array($result))		{			return (in_array($filename, $result)) ? true : false;		}		return false;	}	/**	* Open session	*/	function open_session()	{		return $this->_init();	}	/**	* Close current session	*/	function close_session()	{		return $this->_close();	}	/**	* Determine methods able to be used	*/	function methods()	{		$methods = array();		$disabled_functions = explode(',', @ini_get('disable_functions'));		if (@extension_loaded('ftp'))		{			$methods[] = 'ftp';		}		if (!in_array('fsockopen', $disabled_functions))		{			$methods[] = 'ftp_fsock';		}		return $methods;	}}/*** FTP transfer class* @package phpBB3*/class ftp extends transfer{	/**	* Standard parameters for FTP session	*/	function ftp($host, $username, $password, $root_path, $port = 21, $timeout = 10)	{		$this->host			= $host;		$this->port			= $port;		$this->username		= $username;		$this->password		= $password;		$this->timeout		= $timeout;		// Make sure $this->root_path is layed out the same way as the $user->page['root_script_path'] value (/ at the end)		$this->root_path	= str_replace('\\', '/', $this->root_path);		if (!empty($root_path))		{			$this->root_path = (($root_path[0] != '/' ) ? '/' : '') . $root_path . ((substr($root_path, -1, 1) == '/') ? '' : '/');		}		// Init some needed values		transfer::transfer();		return;	}	/**	* Requests data	*/	function data()	{		global $user;		return array(			'host'		=> 'localhost',			'username'	=> 'anonymous',			'password'	=> '',			'root_path'	=> $user->page['root_script_path'],			'port'		=> 21,			'timeout'	=> 10		);	}	/**	* Init FTP Session	* @access private	*/	function _init()	{		// connect to the server		$this->connection = @ftp_connect($this->host, $this->port, $this->timeout);		if (!$this->connection)		{			return 'ERR_CONNECTING_SERVER';		}		// login to the server		if (!@ftp_login($this->connection, $this->username, $this->password))		{			return 'ERR_UNABLE_TO_LOGIN';		}		// attempt to turn pasv mode on		@ftp_pasv($this->connection, true);		// change to the root directory		if (!$this->_chdir($this->root_path))		{			return 'ERR_CHANGING_DIRECTORY';		}		return true;	}	/**	* Create Directory (MKDIR)	* @access private	*/	function _mkdir($dir)	{		return @ftp_mkdir($this->connection, $dir);	}	/**	* Remove directory (RMDIR)	* @access private	*/	function _rmdir($dir)	{		return @ftp_rmdir($this->connection, $dir);	}	/**	* Rename file	* @access private	*/	function _rename($old_handle, $new_handle)	{		return @ftp_rename($this->connection, $old_handle, $new_handle);	}	/**	* Change current working directory (CHDIR)	* @access private	*/	function _chdir($dir = '')	{		if ($dir && $dir !== '/')		{			if (substr($dir, -1, 1) == '/')			{				$dir = substr($dir, 0, -1);			}		}		return @ftp_chdir($this->connection, $dir);	}	/**	* change file permissions (CHMOD)	* @access private	*/	function _chmod($file, $perms)	{		if (function_exists('ftp_chmod'))		{			$err = @ftp_chmod($this->connection, $perms, $file);		}		else		{			// Unfortunatly CHMOD is not expecting an octal value...			// We need to transform the integer (which was an octal) to an octal representation (to get the int) and then pass as is. ;)			$chmod_cmd = 'CHMOD ' . base_convert($perms, 10, 8) . ' ' . $file;			$err = $this->_site($chmod_cmd);		}		return $err;	}	/**	* Upload file to location (PUT)	* @access private	*/	function _put($from_file, $to_file)	{		// get the file extension		$file_extension = strtolower(substr(strrchr($to_file, '.'), 1));		// We only use the BINARY file mode to cicumvent rewrite actions from ftp server (mostly linefeeds being replaced)		$mode = FTP_BINARY;		$to_dir = dirname($to_file);		$to_file = basename($to_file);		$this->_chdir($to_dir);		$result = @ftp_put($this->connection, $to_file, $from_file, $mode);		$this->_chdir($this->root_path);		return $result;	}	/**	* Delete file (DELETE)	* @access private	*/	function _delete($file)	{		return @ftp_delete($this->connection, $file);	}	/**	* Close ftp session (CLOSE)	* @access private	*/	function _close()	{		if (!$this->connection)		{			return false;		}		return @ftp_quit($this->connection);	}	/**	* Return current working directory (CWD)	* At the moment not used by parent class	* @access private	*/	function _cwd()	{		return @ftp_pwd($this->connection);	}	/**	* Return list of files in a given directory (LS)	* @access private	*/	function _ls($dir = './')	{		$list = @ftp_nlist($this->connection, $dir);		// See bug #46295 - Some FTP daemons don't like './'		if ($dir === './')		{			// Let's try some alternatives			$list = (empty($list)) ? @ftp_nlist($this->connection, '.') : $list;			$list = (empty($list)) ? @ftp_nlist($this->connection, '') : $list;		}		// Return on error		if ($list === false)		{			return false;		}		// Remove path if prepended		foreach ($list as $key => $item)		{			// Use same separator for item and dir			$item = str_replace('\\', '/', $item);			$dir = str_replace('\\', '/', $dir);			if (!empty($dir) && strpos($item, $dir) === 0)			{				$item = substr($item, strlen($dir));			}			$list[$key] = $item;		}		return $list;	}	/**	* FTP SITE command (ftp-only function)	* @access private	*/	function _site($command)	{		return @ftp_site($this->connection, $command);	}}/*** FTP fsock transfer class** @author wGEric* @package phpBB3*/class ftp_fsock extends transfer{	var $data_connection;	/**	* Standard parameters for FTP session	*/	function ftp_fsock($host, $username, $password, $root_path, $port = 21, $timeout = 10)	{		$this->host			= $host;		$this->port			= $port;		$this->username		= $username;		$this->password		= $password;		$this->timeout		= $timeout;		// Make sure $this->root_path is layed out the same way as the $user->page['root_script_path'] value (/ at the end)		$this->root_path	= str_replace('\\', '/', $this->root_path);		if (!empty($root_path))		{			$this->root_path = (($root_path[0] != '/' ) ? '/' : '') . $root_path . ((substr($root_path, -1, 1) == '/') ? '' : '/');		}		// Init some needed values		transfer::transfer();		return;	}	/**	* Requests data	*/	function data()	{		global $user;		return array(			'host'		=> 'localhost',			'username'	=> 'anonymous',			'password'	=> '',			'root_path'	=> $user->page['root_script_path'],			'port'		=> 21,			'timeout'	=> 10		);	}	/**	* Init FTP Session	* @access private	*/	function _init()	{		$errno = 0;		$errstr = '';		// connect to the server		$this->connection = @fsockopen($this->host, $this->port, $errno, $errstr, $this->timeout);		if (!$this->connection || !$this->_check_command())		{			return 'ERR_CONNECTING_SERVER';		}		@stream_set_timeout($this->connection, $this->timeout);		// login		if (!$this->_send_command('USER', $this->username))		{			return 'ERR_UNABLE_TO_LOGIN';		}		if (!$this->_send_command('PASS', $this->password))		{			return 'ERR_UNABLE_TO_LOGIN';		}		// change to the root directory		if (!$this->_chdir($this->root_path))		{			return 'ERR_CHANGING_DIRECTORY';		}		return true;	}	/**	* Create Directory (MKDIR)	* @access private	*/	function _mkdir($dir)	{		return $this->_send_command('MKD', $dir);	}	/**	* Remove directory (RMDIR)	* @access private	*/	function _rmdir($dir)	{		return $this->_send_command('RMD', $dir);	}	/**	* Rename File	* @access private	*/	function _rename($old_handle, $new_handle)	{		$this->_send_command('RNFR', $old_handle);		return $this->_send_command('RNTO', $new_handle);	}	/**	* Change current working directory (CHDIR)	* @access private	*/	function _chdir($dir = '')	{		if ($dir && $dir !== '/')		{			if (substr($dir, -1, 1) == '/')			{				$dir = substr($dir, 0, -1);			}		}		return $this->_send_command('CWD', $dir);	}	/**	* change file permissions (CHMOD)	* @access private	*/	function _chmod($file, $perms)	{		// Unfortunatly CHMOD is not expecting an octal value...		// We need to transform the integer (which was an octal) to an octal representation (to get the int) and then pass as is. ;)		return $this->_send_command('SITE CHMOD', base_convert($perms, 10, 8) . ' ' . $file);	}	/**	* Upload file to location (PUT)	* @access private	*/	function _put($from_file, $to_file)	{		// We only use the BINARY file mode to cicumvent rewrite actions from ftp server (mostly linefeeds being replaced)		// 'I' == BINARY		// 'A' == ASCII		if (!$this->_send_command('TYPE', 'I'))		{			return false;		}		// open the connection to send file over		if (!$this->_open_data_connection())		{			return false;		}		$this->_send_command('STOR', $to_file, false);		// send the file		$fp = @fopen($from_file, 'rb');		while (!@feof($fp))		{			@fwrite($this->data_connection, @fread($fp, 4096));		}		@fclose($fp);		// close connection		$this->_close_data_connection();		return $this->_check_command();	}	/**	* Delete file (DELETE)	* @access private	*/	function _delete($file)	{		return $this->_send_command('DELE', $file);	}	/**	* Close ftp session (CLOSE)	* @access private	*/	function _close()	{		if (!$this->connection)		{			return false;		}		return $this->_send_command('QUIT');	}	/**	* Return current working directory (CWD)	* At the moment not used by parent class	* @access private	*/	function _cwd()	{		$this->_send_command('PWD', '', false);		return preg_replace('#^[0-9]{3} "(.+)" .+\r\n#', '\\1', $this->_check_command(true));	}	/**	* Return list of files in a given directory (LS)	* @access private	*/	function _ls($dir = './')	{		if (!$this->_open_data_connection())		{			return false;		}		$this->_send_command('NLST', $dir);		$list = array();		while (!@feof($this->data_connection))		{			$filename = preg_replace('#[\r\n]#', '', @fgets($this->data_connection, 512));			if ($filename !== '')			{				$list[] = $filename;			}		}		$this->_close_data_connection();		// Clear buffer		$this->_check_command();		// See bug #46295 - Some FTP daemons don't like './'		if ($dir === './' && empty($list))		{			// Let's try some alternatives			$list = $this->_ls('.');			if (empty($list))			{				$list = $this->_ls('');			}			return $list;		}		// Remove path if prepended		foreach ($list as $key => $item)		{			// Use same separator for item and dir			$item = str_replace('\\', '/', $item);			$dir = str_replace('\\', '/', $dir);			if (!empty($dir) && strpos($item, $dir) === 0)			{				$item = substr($item, strlen($dir));			}			$list[$key] = $item;		}		return $list;	}	/**	* Send a command to server (FTP fsock only function)	* @access private	*/	function _send_command($command, $args = '', $check = true)	{		if (!empty($args))		{			$command = "$command $args";		}		fwrite($this->connection, $command . "\r\n");		if ($check === true && !$this->_check_command())		{			return false;		}		return true;	}	/**	* Opens a connection to send data (FTP fosck only function)	* @access private	*/	function _open_data_connection()	{		// Try to find out whether we have a IPv4 or IPv6 (control) connection		if (function_exists('stream_socket_get_name'))		{			$socket_name = stream_socket_get_name($this->connection, true);			$server_ip = substr($socket_name, 0, strrpos($socket_name, ':'));		}		if (!isset($server_ip) || preg_match(get_preg_expression('ipv4'), $server_ip))		{			// Passive mode			$this->_send_command('PASV', '', false);			if (!$ip_port = $this->_check_command(true))			{				return false;			}			// open the connection to start sending the file			if (!preg_match('#[0-9]{1,3},[0-9]{1,3},[0-9]{1,3},[0-9]{1,3},[0-9]+,[0-9]+#', $ip_port, $temp))			{				// bad ip and port				return false;			}			$temp = explode(',', $temp[0]);			$server_ip = $temp[0] . '.' . $temp[1] . '.' . $temp[2] . '.' . $temp[3];			$server_port = $temp[4] * 256 + $temp[5];		}		else		{			// Extended Passive Mode - RFC2428			$this->_send_command('EPSV', '', false);			if (!$epsv_response = $this->_check_command(true))			{				return false;			}			// Response looks like "229 Entering Extended Passive Mode (|||12345|)"			// where 12345 is the tcp port for the data connection			if (!preg_match('#\(\|\|\|([0-9]+)\|\)#', $epsv_response, $match))			{				return false;			}			$server_port = (int) $match[1];			// fsockopen expects IPv6 address in square brackets			$server_ip = "[$server_ip]";		}		$errno = 0;		$errstr = '';		if (!$this->data_connection = @fsockopen($server_ip, $server_port, $errno, $errstr, $this->timeout))		{			return false;		}		@stream_set_timeout($this->data_connection, $this->timeout);		return true;	}	/**	* Closes a connection used to send data	* @access private	*/	function _close_data_connection()	{		return @fclose($this->data_connection);	}	/**	* Check to make sure command was successful (FTP fsock only function)	* @access private	*/	function _check_command($return = false)	{		$response = '';		do		{			$result = @fgets($this->connection, 512);			$response .= $result;		}		while (substr($result, 3, 1) !== ' ');		if (!preg_match('#^[123]#', $response))		{			return false;		}		return ($return) ? $response : true;	}}?>
<?php/**** @package acp* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @package module_install*/class acp_captcha_info{	function module()	{		return array(			'filename'	=> 'acp_captcha',			'title'		=> 'ACP_CAPTCHA',			'version'	=> '1.0.0',			'modes'		=> array(				'visual'		=> array('title' => 'ACP_VC_SETTINGS', 'auth' => 'acl_a_board', 'cat' => array('ACP_BOARD_CONFIGURATION')),				'img'			=> array('title' => 'ACP_VC_CAPTCHA_DISPLAY', 'auth' => 'acl_a_board', 'cat' => array('ACP_BOARD_CONFIGURATION'), 'display' => false)			),		);	}	function install()	{	}	function uninstall()	{	}}?>
<?php/**** @package ucp* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @ignore*/if (!defined('IN_PHPBB')){	exit;}/*** ucp_main* UCP Front Panel* @package ucp*/class ucp_main{	var $p_master;	var $u_action;	function ucp_main(&$p_master)	{		$this->p_master = &$p_master;	}	function main($id, $mode)	{		global $config, $db, $user, $auth, $template, $phpbb_root_path, $phpEx;		switch ($mode)		{			case 'front':				$user->add_lang('memberlist');				$sql_from = TOPICS_TABLE . ' t ';				$sql_select = '';				if ($config['load_db_track'])				{					$sql_from .= ' LEFT JOIN ' . TOPICS_POSTED_TABLE . ' tp ON (tp.topic_id = t.topic_id						AND tp.user_id = ' . $user->data['user_id'] . ')';					$sql_select .= ', tp.topic_posted';				}				if ($config['load_db_lastread'])				{					$sql_from .= ' LEFT JOIN ' . TOPICS_TRACK_TABLE . ' tt ON (tt.topic_id = t.topic_id						AND tt.user_id = ' . $user->data['user_id'] . ')';					$sql_select .= ', tt.mark_time';				}				$topic_type = $user->lang['VIEW_TOPIC_GLOBAL'];				$folder = 'global_read';				$folder_new = 'global_unread';				// Get cleaned up list... return only those forums not having the f_read permission				$forum_ary = $auth->acl_getf('!f_read', true);				$forum_ary = array_unique(array_keys($forum_ary));				// Determine first forum the user is able to read into - for global announcement link				$sql = 'SELECT forum_id					FROM ' . FORUMS_TABLE . '					WHERE forum_type = ' . FORUM_POST;				if (sizeof($forum_ary))				{					$sql .= ' AND ' . $db->sql_in_set('forum_id', $forum_ary, true);				}				$result = $db->sql_query_limit($sql, 1);				$g_forum_id = (int) $db->sql_fetchfield('forum_id');				$db->sql_freeresult($result);				$sql = "SELECT t.* $sql_select					FROM $sql_from					WHERE t.forum_id = 0						AND t.topic_type = " . POST_GLOBAL . '					ORDER BY t.topic_last_post_time DESC';				$topic_list = $rowset = array();				// If the user can't see any forums, he can't read any posts because fid of 0 is invalid				if ($g_forum_id)				{					$result = $db->sql_query($sql);					while ($row = $db->sql_fetchrow($result))					{						$topic_list[] = $row['topic_id'];						$rowset[$row['topic_id']] = $row;					}					$db->sql_freeresult($result);				}				$topic_tracking_info = array();				if ($config['load_db_lastread'])				{					$topic_tracking_info = get_topic_tracking(0, $topic_list, $rowset, false, $topic_list);				}				else				{					$topic_tracking_info = get_complete_topic_tracking(0, $topic_list, $topic_list);				}				foreach ($topic_list as $topic_id)				{					$row = &$rowset[$topic_id];					$forum_id = $row['forum_id'];					$topic_id = $row['topic_id'];					$unread_topic = (isset($topic_tracking_info[$topic_id]) && $row['topic_last_post_time'] > $topic_tracking_info[$topic_id]) ? true : false;					$folder_img = ($unread_topic) ? $folder_new : $folder;					$folder_alt = ($unread_topic) ? 'UNREAD_POSTS' : (($row['topic_status'] == ITEM_LOCKED) ? 'TOPIC_LOCKED' : 'NO_UNREAD_POSTS');					if ($row['topic_status'] == ITEM_LOCKED)					{						$folder_img .= '_locked';					}					// Posted image?					if (!empty($row['topic_posted']) && $row['topic_posted'])					{						$folder_img .= '_mine';					}					$template->assign_block_vars('topicrow', array(						'FORUM_ID'					=> $forum_id,						'TOPIC_ID'					=> $topic_id,						'TOPIC_AUTHOR'				=> get_username_string('username', $row['topic_poster'], $row['topic_first_poster_name'], $row['topic_first_poster_colour']),						'TOPIC_AUTHOR_COLOUR'		=> get_username_string('colour', $row['topic_poster'], $row['topic_first_poster_name'], $row['topic_first_poster_colour']),						'TOPIC_AUTHOR_FULL'			=> get_username_string('full', $row['topic_poster'], $row['topic_first_poster_name'], $row['topic_first_poster_colour']),						'FIRST_POST_TIME'			=> $user->format_date($row['topic_time']),						'LAST_POST_SUBJECT'			=> censor_text($row['topic_last_post_subject']),						'LAST_POST_TIME'			=> $user->format_date($row['topic_last_post_time']),						'LAST_VIEW_TIME'			=> $user->format_date($row['topic_last_view_time']),						'LAST_POST_AUTHOR'			=> get_username_string('username', $row['topic_last_poster_id'], $row['topic_last_poster_name'], $row['topic_last_poster_colour']),						'LAST_POST_AUTHOR_COLOUR'	=> get_username_string('colour', $row['topic_last_poster_id'], $row['topic_last_poster_name'], $row['topic_last_poster_colour']),						'LAST_POST_AUTHOR_FULL'		=> get_username_string('full', $row['topic_last_poster_id'], $row['topic_last_poster_name'], $row['topic_last_poster_colour']),						'TOPIC_TITLE'				=> censor_text($row['topic_title']),						'TOPIC_TYPE'				=> $topic_type,						'TOPIC_FOLDER_IMG'		=> $user->img($folder_img, $folder_alt),						'TOPIC_FOLDER_IMG_SRC'	=> $user->img($folder_img, $folder_alt, false, '', 'src'),						'ATTACH_ICON_IMG'		=> ($auth->acl_get('u_download') && $auth->acl_get('f_download', $forum_id) && $row['topic_attachment']) ? $user->img('icon_topic_attach', '') : '',						'S_USER_POSTED'		=> (!empty($row['topic_posted']) && $row['topic_posted']) ? true : false,						'S_UNREAD'			=> $unread_topic,						'U_TOPIC_AUTHOR'		=> get_username_string('profile', $row['topic_poster'], $row['topic_first_poster_name'], $row['topic_first_poster_colour']),						'U_LAST_POST'			=> append_sid("{$phpbb_root_path}viewtopic.$phpEx", "f=$g_forum_id&amp;t=$topic_id&amp;p=" . $row['topic_last_post_id']) . '#p' . $row['topic_last_post_id'],						'U_LAST_POST_AUTHOR'	=> get_username_string('profile', $row['topic_last_poster_id'], $row['topic_last_poster_name'], $row['topic_last_poster_colour']),						'U_NEWEST_POST'			=> append_sid("{$phpbb_root_path}viewtopic.$phpEx", "f=$g_forum_id&amp;t=$topic_id&amp;view=unread") . '#unread',						'U_VIEW_TOPIC'			=> append_sid("{$phpbb_root_path}viewtopic.$phpEx", "f=$g_forum_id&amp;t=$topic_id"))					);				}				if ($config['load_user_activity'])				{					if (!function_exists('display_user_activity'))					{						include_once($phpbb_root_path . 'includes/functions_display.' . $phpEx);					}					display_user_activity($user->data);				}				// Do the relevant calculations				$memberdays = max(1, round((time() - $user->data['user_regdate']) / 86400));				$posts_per_day = $user->data['user_posts'] / $memberdays;				$percentage = ($config['num_posts']) ? min(100, ($user->data['user_posts'] / $config['num_posts']) * 100) : 0;				$template->assign_vars(array(					'USER_COLOR'		=> (!empty($user->data['user_colour'])) ? $user->data['user_colour'] : '',					'JOINED'			=> $user->format_date($user->data['user_regdate']),					'VISITED'			=> (empty($last_visit)) ? ' - ' : $user->format_date($last_visit),					'WARNINGS'			=> ($user->data['user_warnings']) ? $user->data['user_warnings'] : 0,					'POSTS'				=> ($user->data['user_posts']) ? $user->data['user_posts'] : 0,					'POSTS_DAY'			=> sprintf($user->lang['POST_DAY'], $posts_per_day),					'POSTS_PCT'			=> sprintf($user->lang['POST_PCT'], $percentage),					'OCCUPATION'	=> (!empty($row['user_occ'])) ? $row['user_occ'] : '',					'INTERESTS'		=> (!empty($row['user_interests'])) ? $row['user_interests'] : '',//					'S_GROUP_OPTIONS'	=> $group_options,					'U_SEARCH_USER'		=> ($auth->acl_get('u_search')) ? append_sid("{$phpbb_root_path}search.$phpEx", 'author_id=' . $user->data['user_id'] . '&amp;sr=posts') : '',				));			break;			case 'subscribed':				include($phpbb_root_path . 'includes/functions_display.' . $phpEx);				$user->add_lang('viewforum');				add_form_key('ucp_front_subscribed');				$unwatch = (isset($_POST['unwatch'])) ? true : false;				if ($unwatch)				{					if (check_form_key('ucp_front_subscribed'))					{						$forums = array_keys(request_var('f', array(0 => 0)));						$topics = array_keys(request_var('t', array(0 => 0)));						$msg = '';						if (sizeof($forums) || sizeof($topics))						{							$l_unwatch = '';							if (sizeof($forums))							{								$sql = 'DELETE FROM ' . FORUMS_WATCH_TABLE . '									WHERE ' . $db->sql_in_set('forum_id', $forums) . '										AND user_id = ' . $user->data['user_id'];								$db->sql_query($sql);								$l_unwatch .= '_FORUMS';							}							if (sizeof($topics))							{								$sql = 'DELETE FROM ' . TOPICS_WATCH_TABLE . '									WHERE ' . $db->sql_in_set('topic_id', $topics) . '										AND user_id = ' . $user->data['user_id'];								$db->sql_query($sql);								$l_unwatch .= '_TOPICS';							}							$msg = $user->lang['UNWATCHED' . $l_unwatch];						}						else						{							$msg = $user->lang['NO_WATCHED_SELECTED'];						}					}					else					{						$msg = $user->lang['FORM_INVALID'];					}					$message = $msg . '<br /><br />' . sprintf($user->lang['RETURN_UCP'], '<a href="' . append_sid("{$phpbb_root_path}ucp.$phpEx", "i=$id&amp;mode=subscribed") . '">', '</a>');					meta_refresh(3, append_sid("{$phpbb_root_path}ucp.$phpEx", "i=$id&amp;mode=subscribed"));					trigger_error($message);				}				$forbidden_forums = array();				if ($config['allow_forum_notify'])				{					$forbidden_forums = $auth->acl_getf('!f_read', true);					$forbidden_forums = array_unique(array_keys($forbidden_forums));					$sql_array = array(						'SELECT'	=> 'f.*',						'FROM'		=> array(							FORUMS_WATCH_TABLE	=> 'fw',							FORUMS_TABLE		=> 'f'						),						'WHERE'		=> 'fw.user_id = ' . $user->data['user_id'] . '							AND f.forum_id = fw.forum_id							AND ' . $db->sql_in_set('f.forum_id', $forbidden_forums, true, true),						'ORDER_BY'	=> 'left_id'					);					if ($config['load_db_lastread'])					{						$sql_array['LEFT_JOIN'] = array(							array(								'FROM'	=> array(FORUMS_TRACK_TABLE => 'ft'),								'ON'	=> 'ft.user_id = ' . $user->data['user_id'] . ' AND ft.forum_id = f.forum_id'							)						);						$sql_array['SELECT'] .= ', ft.mark_time ';					}					else					{						$tracking_topics = (isset($_COOKIE[$config['cookie_name'] . '_track'])) ? ((STRIP) ? stripslashes($_COOKIE[$config['cookie_name'] . '_track']) : $_COOKIE[$config['cookie_name'] . '_track']) : '';						$tracking_topics = ($tracking_topics) ? tracking_unserialize($tracking_topics) : array();					}					$sql = $db->sql_build_query('SELECT', $sql_array);					$result = $db->sql_query($sql);					while ($row = $db->sql_fetchrow($result))					{						$forum_id = $row['forum_id'];						if ($config['load_db_lastread'])						{							$forum_check = (!empty($row['mark_time'])) ? $row['mark_time'] : $user->data['user_lastmark'];						}						else						{							$forum_check = (isset($tracking_topics['f'][$forum_id])) ? (int) (base_convert($tracking_topics['f'][$forum_id], 36, 10) + $config['board_startdate']) : $user->data['user_lastmark'];						}						$unread_forum = ($row['forum_last_post_time'] > $forum_check) ? true : false;						// Which folder should we display?						if ($row['forum_status'] == ITEM_LOCKED)						{							$folder_image = ($unread_forum) ? 'forum_unread_locked' : 'forum_read_locked';							$folder_alt = 'FORUM_LOCKED';						}						else						{							$folder_image = ($unread_forum) ? 'forum_unread' : 'forum_read';							$folder_alt = ($unread_forum) ? 'UNREAD_POSTS' : 'NO_UNREAD_POSTS';						}						// Create last post link information, if appropriate						if ($row['forum_last_post_id'])						{							$last_post_time = $user->format_date($row['forum_last_post_time']);							$last_post_url = append_sid("{$phpbb_root_path}viewtopic.$phpEx", "f=$forum_id&amp;p=" . $row['forum_last_post_id']) . '#p' . $row['forum_last_post_id'];						}						else						{							$last_post_time = $last_post_url = '';						}						$template->assign_block_vars('forumrow', array(							'FORUM_ID'				=> $forum_id,							'FORUM_FOLDER_IMG'		=> $user->img($folder_image, $folder_alt),							'FORUM_FOLDER_IMG_SRC'	=> $user->img($folder_image, $folder_alt, false, '', 'src'),							'FORUM_IMAGE'			=> ($row['forum_image']) ? '<img src="' . $phpbb_root_path . $row['forum_image'] . '" alt="' . $user->lang[$folder_alt] . '" />' : '',							'FORUM_IMAGE_SRC'		=> ($row['forum_image']) ? $phpbb_root_path . $row['forum_image'] : '',							'FORUM_NAME'			=> $row['forum_name'],							'FORUM_DESC'			=> generate_text_for_display($row['forum_desc'], $row['forum_desc_uid'], $row['forum_desc_bitfield'], $row['forum_desc_options']),							'LAST_POST_SUBJECT'		=> $row['forum_last_post_subject'],							'LAST_POST_TIME'		=> $last_post_time,							'LAST_POST_AUTHOR'			=> get_username_string('username', $row['forum_last_poster_id'], $row['forum_last_poster_name'], $row['forum_last_poster_colour']),							'LAST_POST_AUTHOR_COLOUR'	=> get_username_string('colour', $row['forum_last_poster_id'], $row['forum_last_poster_name'], $row['forum_last_poster_colour']),							'LAST_POST_AUTHOR_FULL'		=> get_username_string('full', $row['forum_last_poster_id'], $row['forum_last_poster_name'], $row['forum_last_poster_colour']),							'U_LAST_POST_AUTHOR'		=> get_username_string('profile', $row['forum_last_poster_id'], $row['forum_last_poster_name'], $row['forum_last_poster_colour']),							'U_LAST_POST'			=> $last_post_url,							'U_VIEWFORUM'			=> append_sid("{$phpbb_root_path}viewforum.$phpEx", 'f=' . $row['forum_id']))						);					}					$db->sql_freeresult($result);				}				// Subscribed Topics				if ($config['allow_topic_notify'])				{					if (empty($forbidden_forums))					{						$forbidden_forums = $auth->acl_getf('!f_read', true);						$forbidden_forums = array_unique(array_keys($forbidden_forums));					}					$this->assign_topiclist('subscribed', $forbidden_forums);				}				$template->assign_vars(array(					'S_TOPIC_NOTIFY'		=> $config['allow_topic_notify'],					'S_FORUM_NOTIFY'		=> $config['allow_forum_notify'],				));			break;			case 'bookmarks':				if (!$config['allow_bookmarks'])				{					$template->assign_vars(array(						'S_NO_DISPLAY_BOOKMARKS'	=> true)					);					break;				}				include($phpbb_root_path . 'includes/functions_display.' . $phpEx);				$user->add_lang('viewforum');				if (isset($_POST['unbookmark']))				{					$s_hidden_fields = array('unbookmark' => 1);					$topics = (isset($_POST['t'])) ? array_keys(request_var('t', array(0 => 0))) : array();					$url = $this->u_action;					if (!sizeof($topics))					{						trigger_error('NO_BOOKMARKS_SELECTED');					}					foreach ($topics as $topic_id)					{						$s_hidden_fields['t'][$topic_id] = 1;					}					if (confirm_box(true))					{						$sql = 'DELETE FROM ' . BOOKMARKS_TABLE . '							WHERE user_id = ' . $user->data['user_id'] . '								AND ' . $db->sql_in_set('topic_id', $topics);						$db->sql_query($sql);						meta_refresh(3, $url);						$message = $user->lang['BOOKMARKS_REMOVED'] . '<br /><br />' . sprintf($user->lang['RETURN_UCP'], '<a href="' . $url . '">', '</a>');						trigger_error($message);					}					else					{						confirm_box(false, 'REMOVE_SELECTED_BOOKMARKS', build_hidden_fields($s_hidden_fields));					}				}				$forbidden_forums = $auth->acl_getf('!f_read', true);				$forbidden_forums = array_unique(array_keys($forbidden_forums));				$this->assign_topiclist('bookmarks', $forbidden_forums);			break;			case 'drafts':				$pm_drafts = ($this->p_master->p_name == 'pm') ? true : false;				$template->assign_var('S_SHOW_DRAFTS', true);				$user->add_lang('posting');				$edit		= (isset($_REQUEST['edit'])) ? true : false;				$submit		= (isset($_POST['submit'])) ? true : false;				$draft_id	= ($edit) ? intval($_REQUEST['edit']) : 0;				$delete		= (isset($_POST['delete'])) ? true : false;				$s_hidden_fields = ($edit) ? '<input type="hidden" name="edit" value="' . $draft_id . '" />' : '';				$draft_subject = $draft_message = '';				add_form_key('ucp_draft');				if ($delete)				{					if (check_form_key('ucp_draft'))					{						$drafts = array_keys(request_var('d', array(0 => 0)));						if (sizeof($drafts))						{							$sql = 'DELETE FROM ' . DRAFTS_TABLE . '								WHERE ' . $db->sql_in_set('draft_id', $drafts) . '									AND user_id = ' . $user->data['user_id'];							$db->sql_query($sql);						}						$msg = $user->lang['DRAFTS_DELETED'];						unset($drafts);					}					else					{						$msg = $user->lang['FORM_INVALID'];					}					$message = $msg . '<br /><br />' . sprintf($user->lang['RETURN_UCP'], '<a href="' . $this->u_action . '">', '</a>');					meta_refresh(3, $this->u_action);					trigger_error($message);				}				if ($submit && $edit)				{					$draft_subject = utf8_normalize_nfc(request_var('subject', '', true));					$draft_message = utf8_normalize_nfc(request_var('message', '', true));					if (check_form_key('ucp_draft'))					{						if ($draft_message && $draft_subject)						{							$draft_row = array(								'draft_subject' => $draft_subject,								'draft_message' => $draft_message							);							$sql = 'UPDATE ' . DRAFTS_TABLE . '								SET ' . $db->sql_build_array('UPDATE', $draft_row) . "								WHERE draft_id = $draft_id									AND user_id = " . $user->data['user_id'];							$db->sql_query($sql);							$message = $user->lang['DRAFT_UPDATED'] . '<br /><br />' . sprintf($user->lang['RETURN_UCP'], '<a href="' . $this->u_action . '">', '</a>');							meta_refresh(3, $this->u_action);							trigger_error($message);						}						else						{							$template->assign_var('ERROR', ($draft_message == '') ? $user->lang['EMPTY_DRAFT'] : (($draft_subject == '') ? $user->lang['EMPTY_DRAFT_TITLE'] : ''));						}					}					else					{						$template->assign_var('ERROR', $user->lang['FORM_INVALID']);					}				}				if (!$pm_drafts)				{					$sql = 'SELECT d.*, f.forum_name						FROM ' . DRAFTS_TABLE . ' d, ' . FORUMS_TABLE . ' f						WHERE d.user_id = ' . $user->data['user_id'] . ' ' .							(($edit) ? "AND d.draft_id = $draft_id" : '') . '							AND f.forum_id = d.forum_id						ORDER BY d.save_time DESC';				}				else				{					$sql = 'SELECT * FROM ' . DRAFTS_TABLE . '						WHERE user_id = ' . $user->data['user_id'] . ' ' .							(($edit) ? "AND draft_id = $draft_id" : '') . '							AND forum_id = 0							AND topic_id = 0						ORDER BY save_time DESC';				}				$result = $db->sql_query($sql);				$draftrows = $topic_ids = array();				while ($row = $db->sql_fetchrow($result))				{					if ($row['topic_id'])					{						$topic_ids[] = (int) $row['topic_id'];					}					$draftrows[] = $row;				}				$db->sql_freeresult($result);				if (sizeof($topic_ids))				{					$sql = 'SELECT topic_id, forum_id, topic_title						FROM ' . TOPICS_TABLE . '						WHERE ' . $db->sql_in_set('topic_id', array_unique($topic_ids));					$result = $db->sql_query($sql);					while ($row = $db->sql_fetchrow($result))					{						$topic_rows[$row['topic_id']] = $row;					}					$db->sql_freeresult($result);				}				unset($topic_ids);				$template->assign_var('S_EDIT_DRAFT', $edit);				$row_count = 0;				foreach ($draftrows as $draft)				{					$link_topic = $link_forum = $link_pm = false;					$insert_url = $view_url = $title = '';					if (isset($topic_rows[$draft['topic_id']]) && $auth->acl_get('f_read', $topic_rows[$draft['topic_id']]['forum_id']))					{						$link_topic = true;						$view_url = append_sid("{$phpbb_root_path}viewtopic.$phpEx", 'f=' . $topic_rows[$draft['topic_id']]['forum_id'] . '&amp;t=' . $draft['topic_id']);						$title = $topic_rows[$draft['topic_id']]['topic_title'];						$insert_url = append_sid("{$phpbb_root_path}posting.$phpEx", 'f=' . $topic_rows[$draft['topic_id']]['forum_id'] . '&amp;t=' . $draft['topic_id'] . '&amp;mode=reply&amp;d=' . $draft['draft_id']);					}					else if ($auth->acl_get('f_read', $draft['forum_id']))					{						$link_forum = true;						$view_url = append_sid("{$phpbb_root_path}viewforum.$phpEx", 'f=' . $draft['forum_id']);						$title = $draft['forum_name'];						$insert_url = append_sid("{$phpbb_root_path}posting.$phpEx", 'f=' . $draft['forum_id'] . '&amp;mode=post&amp;d=' . $draft['draft_id']);					}					else if ($pm_drafts)					{						$link_pm = true;						$insert_url = append_sid("{$phpbb_root_path}ucp.$phpEx", "i=$id&amp;mode=compose&amp;d=" . $draft['draft_id']);					}					$template_row = array(						'DATE'			=> $user->format_date($draft['save_time']),						'DRAFT_MESSAGE'	=> ($submit) ? $draft_message : $draft['draft_message'],						'DRAFT_SUBJECT'	=> ($submit) ? $draft_subject : $draft['draft_subject'],						'TITLE'			=> $title,						'DRAFT_ID'	=> $draft['draft_id'],						'FORUM_ID'	=> $draft['forum_id'],						'TOPIC_ID'	=> $draft['topic_id'],						'U_VIEW'		=> $view_url,						'U_VIEW_EDIT'	=> $this->u_action . '&amp;edit=' . $draft['draft_id'],						'U_INSERT'		=> $insert_url,						'S_LINK_TOPIC'		=> $link_topic,						'S_LINK_FORUM'		=> $link_forum,						'S_LINK_PM'			=> $link_pm,						'S_HIDDEN_FIELDS'	=> $s_hidden_fields					);					$row_count++;					($edit) ? $template->assign_vars($template_row) : $template->assign_block_vars('draftrow', $template_row);				}				if (!$edit)				{					$template->assign_var('S_DRAFT_ROWS', $row_count);				}			break;		}		$template->assign_vars(array(			'L_TITLE'			=> $user->lang['UCP_MAIN_' . strtoupper($mode)],			'S_DISPLAY_MARK_ALL'	=> ($mode == 'watched' || ($mode == 'drafts' && !isset($_GET['edit']))) ? true : false,			'S_HIDDEN_FIELDS'		=> (isset($s_hidden_fields)) ? $s_hidden_fields : '',			'S_UCP_ACTION'			=> $this->u_action,			'LAST_POST_IMG'			=> $user->img('icon_topic_latest', 'VIEW_LATEST_POST'),			'NEWEST_POST_IMG'		=> $user->img('icon_topic_newest', 'VIEW_NEWEST_POST'),		));		// Set desired template		$this->tpl_name = 'ucp_main_' . $mode;		$this->page_title = 'UCP_MAIN_' . strtoupper($mode);	}	/**	* Build and assign topiclist for bookmarks/subscribed topics	*/	function assign_topiclist($mode = 'subscribed', $forbidden_forum_ary = array())	{		global $user, $db, $template, $config, $cache, $auth, $phpbb_root_path, $phpEx;		$table = ($mode == 'subscribed') ? TOPICS_WATCH_TABLE : BOOKMARKS_TABLE;		$start = request_var('start', 0);		// Grab icons		$icons = $cache->obtain_icons();		$sql_array = array(			'SELECT'	=> 'COUNT(t.topic_id) as topics_count',			'FROM'		=> array(				$table			=> 'i',				TOPICS_TABLE	=> 't'			),			'WHERE'		=>	'i.topic_id = t.topic_id				AND i.user_id = ' . $user->data['user_id'] . '				AND ' . $db->sql_in_set('t.forum_id', $forbidden_forum_ary, true, true),		);		$sql = $db->sql_build_query('SELECT', $sql_array);		$result = $db->sql_query($sql);		$topics_count = (int) $db->sql_fetchfield('topics_count');		$db->sql_freeresult($result);		if ($topics_count)		{			$template->assign_vars(array(				'PAGINATION'	=> generate_pagination($this->u_action, $topics_count, $config['topics_per_page'], $start),				'PAGE_NUMBER'	=> on_page($topics_count, $config['topics_per_page'], $start),				'TOTAL_TOPICS'	=> ($topics_count == 1) ? $user->lang['VIEW_FORUM_TOPIC'] : sprintf($user->lang['VIEW_FORUM_TOPICS'], $topics_count))			);		}		if ($mode == 'subscribed')		{			$sql_array = array(				'SELECT'	=> 't.*, f.forum_name',				'FROM'		=> array(					TOPICS_WATCH_TABLE	=> 'tw',					TOPICS_TABLE		=> 't'				),				'WHERE'		=> 'tw.user_id = ' . $user->data['user_id'] . '					AND t.topic_id = tw.topic_id					AND ' . $db->sql_in_set('t.forum_id', $forbidden_forum_ary, true, true),				'ORDER_BY'	=> 't.topic_last_post_time DESC'			);			$sql_array['LEFT_JOIN'] = array();		}		else		{			$sql_array = array(				'SELECT'	=> 't.*, f.forum_name, b.topic_id as b_topic_id',				'FROM'		=> array(					BOOKMARKS_TABLE		=> 'b',				),				'WHERE'		=> 'b.user_id = ' . $user->data['user_id'] . '					AND ' . $db->sql_in_set('f.forum_id', $forbidden_forum_ary, true, true),				'ORDER_BY'	=> 't.topic_last_post_time DESC'			);			$sql_array['LEFT_JOIN'] = array();			$sql_array['LEFT_JOIN'][] = array('FROM' => array(TOPICS_TABLE => 't'), 'ON' => 'b.topic_id = t.topic_id');		}		$sql_array['LEFT_JOIN'][] = array('FROM' => array(FORUMS_TABLE => 'f'), 'ON' => 't.forum_id = f.forum_id');		if ($config['load_db_lastread'])		{			$sql_array['LEFT_JOIN'][] = array('FROM' => array(FORUMS_TRACK_TABLE => 'ft'), 'ON' => 'ft.forum_id = t.forum_id AND ft.user_id = ' . $user->data['user_id']);			$sql_array['LEFT_JOIN'][] = array('FROM' => array(TOPICS_TRACK_TABLE => 'tt'), 'ON' => 'tt.topic_id = t.topic_id AND tt.user_id = ' . $user->data['user_id']);			$sql_array['SELECT'] .= ', tt.mark_time, ft.mark_time AS forum_mark_time';		}		if ($config['load_db_track'])		{			$sql_array['LEFT_JOIN'][] = array('FROM' => array(TOPICS_POSTED_TABLE => 'tp'), 'ON' => 'tp.topic_id = t.topic_id AND tp.user_id = ' . $user->data['user_id']);			$sql_array['SELECT'] .= ', tp.topic_posted';		}		$sql = $db->sql_build_query('SELECT', $sql_array);		$result = $db->sql_query_limit($sql, $config['topics_per_page'], $start);		$topic_list = $topic_forum_list = $global_announce_list = $rowset = array();		while ($row = $db->sql_fetchrow($result))		{			$topic_id = (isset($row['b_topic_id'])) ? $row['b_topic_id'] : $row['topic_id'];			$topic_list[] = $topic_id;			$rowset[$topic_id] = $row;			$topic_forum_list[$row['forum_id']]['forum_mark_time'] = ($config['load_db_lastread']) ? $row['forum_mark_time'] : 0;			$topic_forum_list[$row['forum_id']]['topics'][] = $topic_id;			if ($row['topic_type'] == POST_GLOBAL)			{				$global_announce_list[] = $topic_id;			}		}		$db->sql_freeresult($result);		$topic_tracking_info = array();		if ($config['load_db_lastread'])		{			foreach ($topic_forum_list as $f_id => $topic_row)			{				$topic_tracking_info += get_topic_tracking($f_id, $topic_row['topics'], $rowset, array($f_id => $topic_row['forum_mark_time']), ($f_id == 0) ? $global_announce_list : false);			}		}		else		{			foreach ($topic_forum_list as $f_id => $topic_row)			{				$topic_tracking_info += get_complete_topic_tracking($f_id, $topic_row['topics'], $global_announce_list);			}		}		foreach ($topic_list as $topic_id)		{			$row = &$rowset[$topic_id];			$forum_id = $row['forum_id'];			$topic_id = (isset($row['b_topic_id'])) ? $row['b_topic_id'] : $row['topic_id'];			$unread_topic = (isset($topic_tracking_info[$topic_id]) && $row['topic_last_post_time'] > $topic_tracking_info[$topic_id]) ? true : false;			// Replies			$replies = ($auth->acl_get('m_approve', $forum_id)) ? $row['topic_replies_real'] : $row['topic_replies'];			if ($row['topic_status'] == ITEM_MOVED && !empty($row['topic_moved_id']))			{				$topic_id = $row['topic_moved_id'];			}			// Get folder img, topic status/type related information			$folder_img = $folder_alt = $topic_type = '';			topic_status($row, $replies, $unread_topic, $folder_img, $folder_alt, $topic_type);			$view_topic_url_params = "f=$forum_id&amp;t=$topic_id";			$view_topic_url = append_sid("{$phpbb_root_path}viewtopic.$phpEx", $view_topic_url_params);			// Send vars to template			$template->assign_block_vars('topicrow', array(				'FORUM_ID'					=> $forum_id,				'TOPIC_ID'					=> $topic_id,				'FIRST_POST_TIME'			=> $user->format_date($row['topic_time']),				'LAST_POST_SUBJECT'			=> $row['topic_last_post_subject'],				'LAST_POST_TIME'			=> $user->format_date($row['topic_last_post_time']),				'LAST_VIEW_TIME'			=> $user->format_date($row['topic_last_view_time']),				'TOPIC_AUTHOR'				=> get_username_string('username', $row['topic_poster'], $row['topic_first_poster_name'], $row['topic_first_poster_colour']),				'TOPIC_AUTHOR_COLOUR'		=> get_username_string('colour', $row['topic_poster'], $row['topic_first_poster_name'], $row['topic_first_poster_colour']),				'TOPIC_AUTHOR_FULL'			=> get_username_string('full', $row['topic_poster'], $row['topic_first_poster_name'], $row['topic_first_poster_colour']),				'U_TOPIC_AUTHOR'			=> get_username_string('profile', $row['topic_poster'], $row['topic_first_poster_name'], $row['topic_first_poster_colour']),				'LAST_POST_AUTHOR'			=> get_username_string('username', $row['topic_last_poster_id'], $row['topic_last_poster_name'], $row['topic_last_poster_colour']),				'LAST_POST_AUTHOR_COLOUR'	=> get_username_string('colour', $row['topic_last_poster_id'], $row['topic_last_poster_name'], $row['topic_last_poster_colour']),				'LAST_POST_AUTHOR_FULL'		=> get_username_string('full', $row['topic_last_poster_id'], $row['topic_last_poster_name'], $row['topic_last_poster_colour']),				'U_LAST_POST_AUTHOR'		=> get_username_string('profile', $row['topic_last_poster_id'], $row['topic_last_poster_name'], $row['topic_last_poster_colour']),				'S_DELETED_TOPIC'	=> (!$row['topic_id']) ? true : false,				'S_GLOBAL_TOPIC'	=> (!$forum_id) ? true : false,				'PAGINATION'		=> topic_generate_pagination($replies, append_sid("{$phpbb_root_path}viewtopic.$phpEx", 'f=' . (($row['forum_id']) ? $row['forum_id'] : $forum_id) . "&amp;t=$topic_id")),				'REPLIES'			=> $replies,				'VIEWS'				=> $row['topic_views'],				'TOPIC_TITLE'		=> censor_text($row['topic_title']),				'TOPIC_TYPE'		=> $topic_type,				'FORUM_NAME'		=> $row['forum_name'],				'TOPIC_FOLDER_IMG'		=> $user->img($folder_img, $folder_alt),				'TOPIC_FOLDER_IMG_SRC'	=> $user->img($folder_img, $folder_alt, false, '', 'src'),				'TOPIC_FOLDER_IMG_ALT'	=> $user->lang[$folder_alt],				'TOPIC_ICON_IMG'		=> (!empty($icons[$row['icon_id']])) ? $icons[$row['icon_id']]['img'] : '',				'TOPIC_ICON_IMG_WIDTH'	=> (!empty($icons[$row['icon_id']])) ? $icons[$row['icon_id']]['width'] : '',				'TOPIC_ICON_IMG_HEIGHT'	=> (!empty($icons[$row['icon_id']])) ? $icons[$row['icon_id']]['height'] : '',				'ATTACH_ICON_IMG'		=> ($auth->acl_get('u_download') && $auth->acl_get('f_download', $forum_id) && $row['topic_attachment']) ? $user->img('icon_topic_attach', $user->lang['TOTAL_ATTACHMENTS']) : '',				'S_TOPIC_TYPE'			=> $row['topic_type'],				'S_USER_POSTED'			=> (!empty($row['topic_posted'])) ? true : false,				'S_UNREAD_TOPIC'		=> $unread_topic,				'U_NEWEST_POST'			=> append_sid("{$phpbb_root_path}viewtopic.$phpEx", $view_topic_url_params . '&amp;view=unread') . '#unread',				'U_LAST_POST'			=> append_sid("{$phpbb_root_path}viewtopic.$phpEx", $view_topic_url_params . '&amp;p=' . $row['topic_last_post_id']) . '#p' . $row['topic_last_post_id'],				'U_VIEW_TOPIC'			=> $view_topic_url,				'U_VIEW_FORUM'			=> append_sid("{$phpbb_root_path}viewforum.$phpEx", 'f=' . $forum_id),			));		}	}}?>
<?php/*** Adds class="postlink" to magic urls** You should make a backup from your users, posts and privmsgs table in case something goes wrong* Forum descriptions and rules need to be re-submitted manually.*/die("Please read the first lines of this script for instructions on how to enable it");set_time_limit(0);define('IN_PHPBB', true);$phpbb_root_path = './../';$phpEx = substr(strrchr(__FILE__, '.'), 1);include($phpbb_root_path . 'common.'.$phpEx);// Start session management$user->session_begin();$auth->acl($user->data);$user->setup();$echos = 0;$replace = array(	'<!-- l --><a href="',	'<!-- m --><a href="',	'<!-- w --><a href="',);$with = array(	'<!-- l --><a class="postlink-local" href="',	'<!-- m --><a class="postlink" href="',	'<!-- w --><a class="postlink" href="',);// Adjust user signatures$sql = 'SELECT user_id, user_sig	FROM ' . USERS_TABLE;$result = $db->sql_query($sql);while ($row = $db->sql_fetchrow($result)){	$new_content = str_replace($replace, $with, $row['user_sig']);	if ($new_content != $row['user_sig'])	{		$sql = 'UPDATE ' . USERS_TABLE . " SET user_sig = '" . $db->sql_escape($new_content) . "'			WHERE user_id = " . $row['user_id'];		$db->sql_query($sql);		if ($echos > 200)		{			echo '<br />' . "\n";			$echos = 0;		}		echo '.';		$echos++;		flush();	}}$db->sql_freeresult($result);// Now adjust posts$sql = 'SELECT post_id, post_text	FROM ' . POSTS_TABLE;$result = $db->sql_query($sql);while ($row = $db->sql_fetchrow($result)){	$new_content = str_replace($replace, $with, $row['post_text']);	if ($row['post_text'] != $new_content)	{		$sql = 'UPDATE ' . POSTS_TABLE . " SET post_text = '" . $db->sql_escape($new_content) . "'			WHERE post_id = " . $row['post_id'];		$db->sql_query($sql);		if ($echos > 200)		{			echo '<br />' . "\n";			$echos = 0;		}		echo '.';		$echos++;		flush();	}}$db->sql_freeresult($result);// Now to the private messages$sql = 'SELECT msg_id, message_text	FROM ' . PRIVMSGS_TABLE;$result = $db->sql_query($sql);while ($row = $db->sql_fetchrow($result)){	$new_content = str_replace($replace, $with, $row['message_text']);	if ($row['message_text'] != $new_content)	{		$sql = 'UPDATE ' . PRIVMSGS_TABLE . " SET bbcode_bitfield = '" . $db->sql_escape($new_content) . "'			WHERE msg_id = " . $row['msg_id'];		$db->sql_query($sql);		if ($echos > 200)		{			echo '<br />' . "\n";			$echos = 0;		}		echo '.';		$echos++;		flush();	}}$db->sql_freeresult($result);// Done$db->sql_close();?>
<?php/**** acp_permissions [English]** @package language* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** DO NOT CHANGE*/if (!defined('IN_PHPBB')){	exit;}if (empty($lang) || !is_array($lang)){	$lang = array();}// DEVELOPERS PLEASE NOTE//// All language files should use UTF-8 as their encoding and the files must not contain a BOM.//// Placeholders can now contain order information, e.g. instead of// 'Page %s of %s' you can (and should) write 'Page %1$s of %2$s', this allows// translators to re-order the output of data while ensuring it remains correct//// You do not need this where single placeholders are used, e.g. 'Message %d' is fine// equally where a string contains only two placeholders which are used to wrap text// in a url you again do not need to specify an order e.g., 'Click %sHERE%s' is fine$lang = array_merge($lang, array(	'ACP_PERMISSIONS_EXPLAIN'	=> '		<p>Permissions are highly granular and grouped into four major sections, which are:</p>		<h2>Global Permissions</h2>		<p>These are used to control access on a global level and apply to the entire bulletin board. They are further divided into Users Permissions, Groups Permissions, Administrators and Global Moderators.</p>		<h2>Forum Based Permissions</h2>		<p>These are used to control access on a per forum basis. They are further divided into Forum Permissions, Forum Moderators, Users Forum Permissions and Groups Forum Permissions.</p>		<h2>Permission Roles</h2>		<p>These are used to create different sets of permissions for the different permission types later being able to be assigned on a role-based basis. The default roles should cover the administration of bulletin boards large and small, though within each of the four divisions, you can add/edit/delete roles as you see fit.</p>		<h2>Permission Masks</h2>		<p>These are used to view the effective permissions assigned to Users, Moderators (Local and Global), Administrators or Forums.</p>		<br />		<p>For further information on setting up and managing permissions on your phpBB3 board, please see <a href="http://www.phpbb.com/support/documentation/3.0/quickstart/quick_permissions.html">Chapter 1.5 of our Quick Start Guide</a>.</p>	',	'ACL_NEVER'				=> 'Never',	'ACL_SET'				=> 'Setting permissions',	'ACL_SET_EXPLAIN'		=> 'Permissions are based on a simple <samp>YES</samp>/<samp>NO</samp> system. Setting an option to <samp>NEVER</samp> for a user or usergroup overrides any other value assigned to it. If you do not wish to assign a value for an option for this user or group select <samp>NO</samp>. If values are assigned for this option elsewhere they will be used in preference, else <samp>NEVER</samp> is assumed. All objects marked (with the checkbox in front of them) will copy the permission set you defined.',	'ACL_SETTING'			=> 'Setting',	'ACL_TYPE_A_'			=> 'Administrative permissions',	'ACL_TYPE_F_'			=> 'Forum permissions',	'ACL_TYPE_M_'			=> 'Moderative permissions',	'ACL_TYPE_U_'			=> 'User permissions',	'ACL_TYPE_GLOBAL_A_'	=> 'Administrative permissions',	'ACL_TYPE_GLOBAL_U_'	=> 'User permissions',	'ACL_TYPE_GLOBAL_M_'	=> 'Global Moderator permissions',	'ACL_TYPE_LOCAL_M_'		=> 'Forum Moderator permissions',	'ACL_TYPE_LOCAL_F_'		=> 'Forum permissions',	'ACL_NO'				=> 'No',	'ACL_VIEW'				=> 'Viewing permissions',	'ACL_VIEW_EXPLAIN'		=> 'Here you can see the effective permissions the user/group is having. A red square indicates that the user/group does not have the permission, a green square indicates that the user/group does have the permission.',	'ACL_YES'				=> 'Yes',	'ACP_ADMINISTRATORS_EXPLAIN'				=> 'Here you can assign administrator permissions to users or groups. All users with administrator permissions can view the administration control panel.',	'ACP_FORUM_MODERATORS_EXPLAIN'				=> 'Here you can assign users and groups as forum moderators. To assign users access to forums, to define global moderative permissions or administrators please use the appropriate page.',	'ACP_FORUM_PERMISSIONS_EXPLAIN'				=> 'Here you can alter which users and groups can access which forums. To assign moderators or define administrators please use the appropriate page.',	'ACP_FORUM_PERMISSIONS_COPY_EXPLAIN'		=> 'Here you can copy forum permissions from one forum to one or more other forums.',	'ACP_GLOBAL_MODERATORS_EXPLAIN'				=> 'Here you can assign global moderator permissions to users or groups. These moderators are like ordinary moderators except they have access to every forum on your board.',	'ACP_GROUPS_FORUM_PERMISSIONS_EXPLAIN'		=> 'Here you can assign forum permissions to groups.',	'ACP_GROUPS_PERMISSIONS_EXPLAIN'			=> 'Here you can assign global permissions to groups - user permissions, global moderator permissions and administrator permissions. User permissions include capabilities such as the use of avatars, sending private messages, et cetera; global moderator permissions such as approving posts, manage topics, manage bans, et cetera and lastly administrator permissions such as altering permissions, define custom BBCodes, manage forums, et cetera. Individual users permissions should only be changed in rare occasions, the preferred method is putting users in groups and assigning the groups permissions.',	'ACP_ADMIN_ROLES_EXPLAIN'					=> 'Here you are able to manage the roles for administrative permissions. Roles are effective permissions, if you change a role the items having this role assigned will change its permissions too.',	'ACP_FORUM_ROLES_EXPLAIN'					=> 'Here you are able to manage the roles for forum permissions. Roles are effective permissions, if you change a role the items having this role assigned will change its permissions too.',	'ACP_MOD_ROLES_EXPLAIN'						=> 'Here you are able to manage the roles for moderative permissions. Roles are effective permissions, if you change a role the items having this role assigned will change its permissions too.',	'ACP_USER_ROLES_EXPLAIN'					=> 'Here you are able to manage the roles for user permissions. Roles are effective permissions, if you change a role the items having this role assigned will change its permissions too.',	'ACP_USERS_FORUM_PERMISSIONS_EXPLAIN'		=> 'Here you can assign forum permissions to users.',	'ACP_USERS_PERMISSIONS_EXPLAIN'				=> 'Here you can assign global permissions to users - user permissions, global moderator permissions and administrator permissions. User permissions include capabilities such as the use of avatars, sending private messages, et cetera; global moderator permissions such as approving posts, manage topics, manage bans, et cetera and lastly administrator permissions such as altering permissions, define custom BBCodes, manage forums, et cetera. To alter these settings for large numbers of users the Group permissions system is the preferred method. Users permissions should only be changed in rare occasions, the preferred method is putting users in groups and assigning the groups permissions.',	'ACP_VIEW_ADMIN_PERMISSIONS_EXPLAIN'		=> 'Here you can view the effective administrative permissions assigned to the selected users/groups.',	'ACP_VIEW_GLOBAL_MOD_PERMISSIONS_EXPLAIN'	=> 'Here you can view the global moderative permissions assigned to the selected users/groups.',	'ACP_VIEW_FORUM_PERMISSIONS_EXPLAIN'		=> 'Here you can view the forum permissions assigned to the selected users/groups and forums.',	'ACP_VIEW_FORUM_MOD_PERMISSIONS_EXPLAIN'	=> 'Here you can view the forum moderator permissions assigned to the selected users/groups and forums.',	'ACP_VIEW_USER_PERMISSIONS_EXPLAIN'			=> 'Here you can view the effective user permissions assigned to the selected users/groups.',	'ADD_GROUPS'				=> 'Add groups',	'ADD_PERMISSIONS'			=> 'Add permissions',	'ADD_USERS'					=> 'Add users',	'ADVANCED_PERMISSIONS'		=> 'Advanced Permissions',	'ALL_GROUPS'				=> 'Select all groups',	'ALL_NEVER'					=> 'All <samp>NEVER</samp>',	'ALL_NO'					=> 'All <samp>NO</samp>',	'ALL_USERS'					=> 'Select all users',	'ALL_YES'					=> 'All <samp>YES</samp>',	'APPLY_ALL_PERMISSIONS'		=> 'Apply all permissions',	'APPLY_PERMISSIONS'			=> 'Apply permissions',	'APPLY_PERMISSIONS_EXPLAIN'	=> 'The permissions and role defined for this item will only be applied to this item and all checked items.',	'AUTH_UPDATED'				=> 'Permissions have been updated.',	'COPY_PERMISSIONS_CONFIRM'				=> 'Are you sure you wish to carry out this operation? Please be aware that this will overwrite any existing permissions on the selected targets.',	'COPY_PERMISSIONS_FORUM_FROM_EXPLAIN'	=> 'The source forum you want to copy permissions from.',	'COPY_PERMISSIONS_FORUM_TO_EXPLAIN'		=> 'The destination forums you want the copied permissions applied to.',	'COPY_PERMISSIONS_FROM'					=> 'Copy permissions from',	'COPY_PERMISSIONS_TO'					=> 'Apply permissions to',	'CREATE_ROLE'				=> 'Create role',	'CREATE_ROLE_FROM'			=> 'Use settings from',	'CUSTOM'					=> 'Custom',	'DEFAULT'					=> 'Default',	'DELETE_ROLE'				=> 'Delete role',	'DELETE_ROLE_CONFIRM'		=> 'Are you sure you want to remove this role? Items having this role assigned will <strong>not</strong> lose their permission settings.',	'DISPLAY_ROLE_ITEMS'		=> 'View items using this role',	'EDIT_PERMISSIONS'			=> 'Edit permissions',	'EDIT_ROLE'					=> 'Edit role',	'GROUPS_NOT_ASSIGNED'		=> 'No group assigned to this role',	'LOOK_UP_GROUP'				=> 'Look up usergroup',	'LOOK_UP_USER'				=> 'Look up user',	'MANAGE_GROUPS'		=> 'Manage groups',	'MANAGE_USERS'		=> 'Manage users',	'NO_AUTH_SETTING_FOUND'		=> 'Permission settings not defined.',	'NO_ROLE_ASSIGNED'			=> 'No role assigned',	'NO_ROLE_ASSIGNED_EXPLAIN'	=> 'Setting to this role does not change permissions on the right. If you want to unset/remove all permissions you should use the All <samp>NO</samp> link.',	'NO_ROLE_AVAILABLE'			=> 'No role available',	'NO_ROLE_NAME_SPECIFIED'	=> 'Please give the role a name.',	'NO_ROLE_SELECTED'			=> 'Role could not be found.',	'NO_USER_GROUP_SELECTED'	=> 'You havent selected any user or group.',	'ONLY_FORUM_DEFINED'	=> 'You only defined forums in your selection. Please also select at least one user or one group.',	'PERMISSION_APPLIED_TO_ALL'		=> 'Permissions and role will also be applied to all checked objects',	'PLUS_SUBFORUMS'				=> '+Subforums',	'REMOVE_PERMISSIONS'			=> 'Remove permissions',	'REMOVE_ROLE'					=> 'Remove role',	'RESULTING_PERMISSION'			=> 'Resulting permission',	'ROLE'							=> 'Role',	'ROLE_ADD_SUCCESS'				=> 'Role successfully added.',	'ROLE_ASSIGNED_TO'				=> 'Users/Groups assigned to %s',	'ROLE_DELETED'					=> 'Role successfully removed.',	'ROLE_DESCRIPTION'				=> 'Role description',	'ROLE_ADMIN_FORUM'			=> 'Forum Admin',	'ROLE_ADMIN_FULL'			=> 'Full Admin',	'ROLE_ADMIN_STANDARD'		=> 'Standard Admin',	'ROLE_ADMIN_USERGROUP'		=> 'User and Groups Admin',	'ROLE_FORUM_BOT'			=> 'Bot Access',	'ROLE_FORUM_FULL'			=> 'Full Access',	'ROLE_FORUM_LIMITED'		=> 'Limited Access',	'ROLE_FORUM_LIMITED_POLLS'	=> 'Limited Access + Polls',	'ROLE_FORUM_NOACCESS'		=> 'No Access',	'ROLE_FORUM_ONQUEUE'		=> 'On Moderation Queue',	'ROLE_FORUM_POLLS'			=> 'Standard Access + Polls',	'ROLE_FORUM_READONLY'		=> 'Read Only Access',	'ROLE_FORUM_STANDARD'		=> 'Standard Access',	'ROLE_FORUM_NEW_MEMBER'		=> 'Newly registered User',	'ROLE_MOD_FULL'				=> 'Full Moderator',	'ROLE_MOD_QUEUE'			=> 'Queue Moderator',	'ROLE_MOD_SIMPLE'			=> 'Simple Moderator',	'ROLE_MOD_STANDARD'			=> 'Standard Moderator',	'ROLE_USER_FULL'			=> 'All Features',	'ROLE_USER_LIMITED'			=> 'Limited Features',	'ROLE_USER_NOAVATAR'		=> 'No Avatar',	'ROLE_USER_NOPM'			=> 'No Private Messages',	'ROLE_USER_STANDARD'		=> 'Standard Features',	'ROLE_USER_NEW_MEMBER'		=> 'Newly registered User',	'ROLE_DESCRIPTION_ADMIN_FORUM'			=> 'Can access the forum management and forum permission settings.',	'ROLE_DESCRIPTION_ADMIN_FULL'			=> 'Has access to all administrative functions of this board.<br />Not recommended.',	'ROLE_DESCRIPTION_ADMIN_STANDARD'		=> 'Has access to most administrative features but is not allowed to use server or system related tools.',	'ROLE_DESCRIPTION_ADMIN_USERGROUP'		=> 'Can manage groups and users: Able to change permissions, settings, manage bans, and manage ranks.',	'ROLE_DESCRIPTION_FORUM_BOT'			=> 'This role is recommended for bots and search spiders.',	'ROLE_DESCRIPTION_FORUM_FULL'			=> 'Can use all forum features, including posting of announcements and stickies. Can also ignore the flood limit.<br />Not recommended for normal users.',	'ROLE_DESCRIPTION_FORUM_LIMITED'		=> 'Can use some forum features, but cannot attach files or use post icons.',	'ROLE_DESCRIPTION_FORUM_LIMITED_POLLS'	=> 'As per Limited Access but can also create polls.',	'ROLE_DESCRIPTION_FORUM_NOACCESS'		=> 'Can neither see nor access the forum.',	'ROLE_DESCRIPTION_FORUM_ONQUEUE'		=> 'Can use most forum features including attachments, but posts and topics need to be approved by a moderator.',	'ROLE_DESCRIPTION_FORUM_POLLS'			=> 'Like Standard Access but can also create polls.',	'ROLE_DESCRIPTION_FORUM_READONLY'		=> 'Can read the forum, but cannot create new topics or reply to posts.',	'ROLE_DESCRIPTION_FORUM_STANDARD'		=> 'Can use most forum features including attachments and deleting own topics, but cannot lock own topics, and cannot create polls.',	'ROLE_DESCRIPTION_FORUM_NEW_MEMBER'		=> 'A role for members of the special newly registered users group; contains <samp>NEVER</samp> permissions to lock features for new users.',	'ROLE_DESCRIPTION_MOD_FULL'				=> 'Can use all moderating features, including banning.',	'ROLE_DESCRIPTION_MOD_QUEUE'			=> 'Can use the Moderation Queue to validate and edit posts, but nothing else.',	'ROLE_DESCRIPTION_MOD_SIMPLE'			=> 'Can only use basic topic actions. Cannot send warnings or use moderation queue.',	'ROLE_DESCRIPTION_MOD_STANDARD'			=> 'Can use most moderating tools, but cannot ban users or change the post author.',	'ROLE_DESCRIPTION_USER_FULL'			=> 'Can use all available forum features for users, including changing the user name or ignoring the flood limit.<br />Not recommended.',	'ROLE_DESCRIPTION_USER_LIMITED'			=> 'Can access some of the user features. Attachments, e-mails, or instant messages are not allowed.',	'ROLE_DESCRIPTION_USER_NOAVATAR'		=> 'Has a limited feature set and is not allowed to use the Avatar feature.',	'ROLE_DESCRIPTION_USER_NOPM'			=> 'Has a limited feature set, and is not allowed to use Private Messages.',	'ROLE_DESCRIPTION_USER_STANDARD'		=> 'Can access most but not all user features. Cannot change user name or ignore the flood limit, for instance.',	'ROLE_DESCRIPTION_USER_NEW_MEMBER'		=> 'A role for members of the special newly registered users group; contains <samp>NEVER</samp> permissions to lock features for new users.',	'ROLE_DESCRIPTION_EXPLAIN'		=> 'You are able to enter a short explanation of what the role is doing or for what it is meant for. The text you enter here will be displayed within the permissions screens too.',	'ROLE_DESCRIPTION_LONG'			=> 'The role description is too long, please limit it to 4000 characters.',	'ROLE_DETAILS'					=> 'Role details',	'ROLE_EDIT_SUCCESS'				=> 'Role successfully edited.',	'ROLE_NAME'						=> 'Role name',	'ROLE_NAME_ALREADY_EXIST'		=> 'A role named <strong>%s</strong> already exist for the specified permission type.',	'ROLE_NOT_ASSIGNED'				=> 'Role has not been assigned yet.',	'SELECTED_FORUM_NOT_EXIST'		=> 'The selected forum(s) do not exist.',	'SELECTED_GROUP_NOT_EXIST'		=> 'The selected group(s) do not exist.',	'SELECTED_USER_NOT_EXIST'		=> 'The selected user(s) do not exist.',	'SELECT_FORUM_SUBFORUM_EXPLAIN'	=> 'The forum you select here will include all subforums into the selection.',	'SELECT_ROLE'					=> 'Select role',	'SELECT_TYPE'					=> 'Select type',	'SET_PERMISSIONS'				=> 'Set permissions',	'SET_ROLE_PERMISSIONS'			=> 'Set role permissions',	'SET_USERS_PERMISSIONS'			=> 'Set users permissions',	'SET_USERS_FORUM_PERMISSIONS'	=> 'Set users forum permissions',	'TRACE_DEFAULT'					=> 'By default every permission is <samp>NO</samp> (unset). So the permission can be overwritten by other settings.',	'TRACE_FOR'						=> 'Trace for',	'TRACE_GLOBAL_SETTING'			=> '%s (global)',	'TRACE_GROUP_NEVER_TOTAL_NEVER'	=> 'This groups permission is set to <samp>NEVER</samp> like the total result so the old result is kept.',	'TRACE_GROUP_NEVER_TOTAL_NEVER_LOCAL'	=> 'This groups permission for this forum is set to <samp>NEVER</samp> like the total result so the old result is kept.',	'TRACE_GROUP_NEVER_TOTAL_NO'	=> 'This groups permission is set to <samp>NEVER</samp> which becomes the new total value because it wasnt set yet (set to <samp>NO</samp>).',	'TRACE_GROUP_NEVER_TOTAL_NO_LOCAL'	=> 'This groups permission for this forum is set to <samp>NEVER</samp> which becomes the new total value because it wasnt set yet (set to <samp>NO</samp>).',	'TRACE_GROUP_NEVER_TOTAL_YES'	=> 'This groups permission is set to <samp>NEVER</samp> which overwrites the total <samp>YES</samp> to a <samp>NEVER</samp> for this user.',	'TRACE_GROUP_NEVER_TOTAL_YES_LOCAL'	=> 'This groups permission for this forum is set to <samp>NEVER</samp> which overwrites the total <samp>YES</samp> to a <samp>NEVER</samp> for this user.',	'TRACE_GROUP_NO'				=> 'The permission is <samp>NO</samp> for this group so the old total value is kept.',	'TRACE_GROUP_NO_LOCAL'			=> 'The permission is <samp>NO</samp> for this group within this forum so the old total value is kept.',	'TRACE_GROUP_YES_TOTAL_NEVER'	=> 'This groups permission is set to <samp>YES</samp> but the total <samp>NEVER</samp> cannot be overwritten.',	'TRACE_GROUP_YES_TOTAL_NEVER_LOCAL'	=> 'This groups permission for this forum is set to <samp>YES</samp> but the total <samp>NEVER</samp> cannot be overwritten.',	'TRACE_GROUP_YES_TOTAL_NO'		=> 'This groups permission is set to <samp>YES</samp> which becomes the new total value because it wasnt set yet (set to <samp>NO</samp>).',	'TRACE_GROUP_YES_TOTAL_NO_LOCAL'	=> 'This groups permission for this forum is set to <samp>YES</samp> which becomes the new total value because it wasnt set yet (set to <samp>NO</samp>).',	'TRACE_GROUP_YES_TOTAL_YES'		=> 'This groups permission is set to <samp>YES</samp> and the total permission is already set to <samp>YES</samp>, so the total result is kept.',	'TRACE_GROUP_YES_TOTAL_YES_LOCAL'	=> 'This groups permission for this forum is set to <samp>YES</samp> and the total permission is already set to <samp>YES</samp>, so the total result is kept.',	'TRACE_PERMISSION'				=> 'Trace permission - %s',	'TRACE_RESULT'					=> 'Trace result',	'TRACE_SETTING'					=> 'Trace setting',	'TRACE_USER_GLOBAL_YES_TOTAL_YES'		=> 'The forum independent user permission evaluates to <samp>YES</samp> but the total permission is already set to <samp>YES</samp>, so the total result is kept. %sTrace global permission%s',	'TRACE_USER_GLOBAL_YES_TOTAL_NEVER'		=> 'The forum independent user permission evaluates to <samp>YES</samp> which overwrites the current local result <samp>NEVER</samp>. %sTrace global permission%s',	'TRACE_USER_GLOBAL_NEVER_TOTAL_KEPT'	=> 'The forum independent user permission evaluates to <samp>NEVER</samp> which doesnt influence the local permission. %sTrace global permission%s',	'TRACE_USER_FOUNDER'					=> 'The user is a founder, therefore admin permissions are always set to <samp>YES</samp>.',	'TRACE_USER_KEPT'						=> 'The users permission is <samp>NO</samp> so the old total value is kept.',	'TRACE_USER_KEPT_LOCAL'					=> 'The users permission for this forum is <samp>NO</samp> so the old total value is kept.',	'TRACE_USER_NEVER_TOTAL_NEVER'			=> 'The users permission is set to <samp>NEVER</samp> and the total value is set to <samp>NEVER</samp>, so nothing is changed.',	'TRACE_USER_NEVER_TOTAL_NEVER_LOCAL'	=> 'The users permission for this forum is set to <samp>NEVER</samp> and the total value is set to <samp>NEVER</samp>, so nothing is changed.',	'TRACE_USER_NEVER_TOTAL_NO'				=> 'The users permission is set to <samp>NEVER</samp> which becomes the total value because it was set to NO.',	'TRACE_USER_NEVER_TOTAL_NO_LOCAL'		=> 'The users permission for this forum is set to <samp>NEVER</samp> which becomes the total value because it was set to NO.',	'TRACE_USER_NEVER_TOTAL_YES'			=> 'The users permission is set to <samp>NEVER</samp> and overwrites the previous <samp>YES</samp>.',	'TRACE_USER_NEVER_TOTAL_YES_LOCAL'		=> 'The users permission for this forum is set to <samp>NEVER</samp> and overwrites the previous <samp>YES</samp>.',	'TRACE_USER_NO_TOTAL_NO'				=> 'The users permission is <samp>NO</samp> and the total value was set to NO so it defaults to <samp>NEVER</samp>.',	'TRACE_USER_NO_TOTAL_NO_LOCAL'			=> 'The users permission for this forum is <samp>NO</samp> and the total value was set to NO so it defaults to <samp>NEVER</samp>.',	'TRACE_USER_YES_TOTAL_NEVER'			=> 'The users permission is set to <samp>YES</samp> but the total <samp>NEVER</samp> cannot be overwritten.',	'TRACE_USER_YES_TOTAL_NEVER_LOCAL'		=> 'The users permission for this forum is set to <samp>YES</samp> but the total <samp>NEVER</samp> cannot be overwritten.',	'TRACE_USER_YES_TOTAL_NO'				=> 'The users permission is set to <samp>YES</samp> which becomes the total value because it was set to <samp>NO</samp>.',	'TRACE_USER_YES_TOTAL_NO_LOCAL'			=> 'The users permission for this forum is set to <samp>YES</samp> which becomes the total value because it was set to <samp>NO</samp>.',	'TRACE_USER_YES_TOTAL_YES'				=> 'The users permission is set to <samp>YES</samp> and the total value is set to <samp>YES</samp>, so nothing is changed.',	'TRACE_USER_YES_TOTAL_YES_LOCAL'		=> 'The users permission for this forum is set to <samp>YES</samp> and the total value is set to <samp>YES</samp>, so nothing is changed.',	'TRACE_WHO'								=> 'Who',	'TRACE_TOTAL'							=> 'Total',	'USERS_NOT_ASSIGNED'			=> 'No user assigned to this role',	'USER_IS_MEMBER_OF_DEFAULT'		=> 'is a member of the following pre-defined groups',	'USER_IS_MEMBER_OF_CUSTOM'		=> 'is a member of the following user defined groups',	'VIEW_ASSIGNED_ITEMS'	=> 'View assigned items',	'VIEW_LOCAL_PERMS'		=> 'Local permissions',	'VIEW_GLOBAL_PERMS'		=> 'Global permissions',	'VIEW_PERMISSIONS'		=> 'View permissions',	'WRONG_PERMISSION_TYPE'				=> 'Wrong permission type selected.',	'WRONG_PERMISSION_SETTING_FORMAT'	=> 'The permission settings are in a wrong format, phpBB is not able to process them correctly.',));?>
<?php/*** Database auth plug-in for phpBB3** Authentication plug-ins is largely down to Sergey Kanareykin, our thanks to him.** This is for authentication via the integrated user table** @package login* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @ignore*/if (!defined('IN_PHPBB')){	exit;}/*** Login function** @param string $username* @param string $password* @param string $ip			IP address the login is taking place from. Used to*							limit the number of login attempts per IP address.* @param string $browser	The user agent used to login* @param string $forwarded_for X_FORWARDED_FOR header sent with login request* @return array				A associative array of the format*							array(*								'status' => status constant*								'error_msg' => string*								'user_row' => array*							)*/function login_db($username, $password, $ip = '', $browser = '', $forwarded_for = ''){	global $db, $config;	// do not allow empty password	if (!$password)	{		return array(			'status'	=> LOGIN_ERROR_PASSWORD,			'error_msg'	=> 'NO_PASSWORD_SUPPLIED',			'user_row'	=> array('user_id' => ANONYMOUS),		);	}	if (!$username)	{		return array(			'status'	=> LOGIN_ERROR_USERNAME,			'error_msg'	=> 'LOGIN_ERROR_USERNAME',			'user_row'	=> array('user_id' => ANONYMOUS),		);	}	$username_clean = utf8_clean_string($username);	$sql = 'SELECT user_id, username, user_password, user_passchg, user_pass_convert, user_email, user_type, user_login_attempts		FROM ' . USERS_TABLE . "		WHERE username_clean = '" . $db->sql_escape($username_clean) . "'";	$result = $db->sql_query($sql);	$row = $db->sql_fetchrow($result);	$db->sql_freeresult($result);	if (($ip && !$config['ip_login_limit_use_forwarded']) ||		($forwarded_for && $config['ip_login_limit_use_forwarded']))	{		$sql = 'SELECT COUNT(*) AS attempts			FROM ' . LOGIN_ATTEMPT_TABLE . '			WHERE attempt_time > ' . (time() - (int) $config['ip_login_limit_time']);		if ($config['ip_login_limit_use_forwarded'])		{			$sql .= " AND attempt_forwarded_for = '" . $db->sql_escape($forwarded_for) . "'";		}		else		{			$sql .= " AND attempt_ip = '" . $db->sql_escape($ip) . "' ";		}		$result = $db->sql_query($sql);		$attempts = (int) $db->sql_fetchfield('attempts');		$db->sql_freeresult($result);		$attempt_data = array(			'attempt_ip'			=> $ip,			'attempt_browser'		=> trim(substr($browser, 0, 149)),			'attempt_forwarded_for'	=> $forwarded_for,			'attempt_time'			=> time(),			'user_id'				=> ($row) ? (int) $row['user_id'] : 0,			'username'				=> $username,			'username_clean'		=> $username_clean,		);		$sql = 'INSERT INTO ' . LOGIN_ATTEMPT_TABLE . $db->sql_build_array('INSERT', $attempt_data);		$result = $db->sql_query($sql);	}	else	{		$attempts = 0;	}	if (!$row)	{		if ($config['ip_login_limit_max'] && $attempts >= $config['ip_login_limit_max'])		{			return array(				'status'		=> LOGIN_ERROR_ATTEMPTS,				'error_msg'		=> 'LOGIN_ERROR_ATTEMPTS',				'user_row'		=> array('user_id' => ANONYMOUS),			);		}		return array(			'status'	=> LOGIN_ERROR_USERNAME,			'error_msg'	=> 'LOGIN_ERROR_USERNAME',			'user_row'	=> array('user_id' => ANONYMOUS),		);	}	$show_captcha = ($config['max_login_attempts'] && $row['user_login_attempts'] >= $config['max_login_attempts']) ||		($config['ip_login_limit_max'] && $attempts >= $config['ip_login_limit_max']);	// If there are too much login attempts, we need to check for an confirm image	// Every auth module is able to define what to do by itself...	if ($show_captcha)	{		// Visual Confirmation handling		if (!class_exists('phpbb_captcha_factory'))		{			global $phpbb_root_path, $phpEx;			include ($phpbb_root_path . 'includes/captcha/captcha_factory.' . $phpEx);		}		$captcha =& phpbb_captcha_factory::get_instance($config['captcha_plugin']);		$captcha->init(CONFIRM_LOGIN);		$vc_response = $captcha->validate($row);		if ($vc_response)		{			return array(				'status'		=> LOGIN_ERROR_ATTEMPTS,				'error_msg'		=> 'LOGIN_ERROR_ATTEMPTS',				'user_row'		=> $row,			);		}		else		{			$captcha->reset();		}	}	// If the password convert flag is set we need to convert it	if ($row['user_pass_convert'])	{		// in phpBB2 passwords were used exactly as they were sent, with addslashes applied		$password_old_format = isset($_REQUEST['password']) ? (string) $_REQUEST['password'] : '';		$password_old_format = (!STRIP) ? addslashes($password_old_format) : $password_old_format;		$password_new_format = '';		set_var($password_new_format, stripslashes($password_old_format), 'string');		if ($password == $password_new_format)		{			if (!function_exists('utf8_to_cp1252'))			{				global $phpbb_root_path, $phpEx;				include($phpbb_root_path . 'includes/utf/data/recode_basic.' . $phpEx);			}			// cp1252 is phpBB2's default encoding, characters outside ASCII range might work when converted into that encoding			// plain md5 support left in for conversions from other systems.			if ((strlen($row['user_password']) == 34 && (phpbb_check_hash(md5($password_old_format), $row['user_password']) || phpbb_check_hash(md5(utf8_to_cp1252($password_old_format)), $row['user_password'])))				|| (strlen($row['user_password']) == 32  && (md5($password_old_format) == $row['user_password'] || md5(utf8_to_cp1252($password_old_format)) == $row['user_password'])))			{				$hash = phpbb_hash($password_new_format);				// Update the password in the users table to the new format and remove user_pass_convert flag				$sql = 'UPDATE ' . USERS_TABLE . '					SET user_password = \'' . $db->sql_escape($hash) . '\',						user_pass_convert = 0					WHERE user_id = ' . $row['user_id'];				$db->sql_query($sql);				$row['user_pass_convert'] = 0;				$row['user_password'] = $hash;			}			else			{				// Although we weren't able to convert this password we have to				// increase login attempt count to make sure this cannot be exploited				$sql = 'UPDATE ' . USERS_TABLE . '					SET user_login_attempts = user_login_attempts + 1					WHERE user_id = ' . (int) $row['user_id'] . '						AND user_login_attempts < ' . LOGIN_ATTEMPTS_MAX;				$db->sql_query($sql);				return array(					'status'		=> LOGIN_ERROR_PASSWORD_CONVERT,					'error_msg'		=> 'LOGIN_ERROR_PASSWORD_CONVERT',					'user_row'		=> $row,				);			}		}	}	// Check password ...	if (!$row['user_pass_convert'] && phpbb_check_hash($password, $row['user_password']))	{		// Check for old password hash...		if (strlen($row['user_password']) == 32)		{			$hash = phpbb_hash($password);			// Update the password in the users table to the new format			$sql = 'UPDATE ' . USERS_TABLE . "				SET user_password = '" . $db->sql_escape($hash) . "',					user_pass_convert = 0				WHERE user_id = {$row['user_id']}";			$db->sql_query($sql);			$row['user_password'] = $hash;		}		$sql = 'DELETE FROM ' . LOGIN_ATTEMPT_TABLE . '			WHERE user_id = ' . $row['user_id'];		$db->sql_query($sql);		if ($row['user_login_attempts'] != 0)		{			// Successful, reset login attempts (the user passed all stages)			$sql = 'UPDATE ' . USERS_TABLE . '				SET user_login_attempts = 0				WHERE user_id = ' . $row['user_id'];			$db->sql_query($sql);		}		// User inactive...		if ($row['user_type'] == USER_INACTIVE || $row['user_type'] == USER_IGNORE)		{			return array(				'status'		=> LOGIN_ERROR_ACTIVE,				'error_msg'		=> 'ACTIVE_ERROR',				'user_row'		=> $row,			);		}		// Successful login... set user_login_attempts to zero...		return array(			'status'		=> LOGIN_SUCCESS,			'error_msg'		=> false,			'user_row'		=> $row,		);	}	// Password incorrect - increase login attempts	$sql = 'UPDATE ' . USERS_TABLE . '		SET user_login_attempts = user_login_attempts + 1		WHERE user_id = ' . (int) $row['user_id'] . '			AND user_login_attempts < ' . LOGIN_ATTEMPTS_MAX;	$db->sql_query($sql);	// Give status about wrong password...	return array(		'status'		=> ($show_captcha) ? LOGIN_ERROR_ATTEMPTS : LOGIN_ERROR_PASSWORD,		'error_msg'		=> ($show_captcha) ? 'LOGIN_ERROR_ATTEMPTS' : 'LOGIN_ERROR_PASSWORD',		'user_row'		=> $row,	);}?>
<?php/**** @package utf* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//***/if (!defined('IN_PHPBB')){	exit;}/*** Some Unicode characters encoded in UTF-8** Preserved for compatibility*/define('UTF8_REPLACEMENT', "\xEF\xBF\xBD");define('UTF8_MAX', "\xF4\x8F\xBF\xBF");define('UTF8_FFFE', "\xEF\xBF\xBE");define('UTF8_FFFF', "\xEF\xBF\xBF");define('UTF8_SURROGATE_FIRST', "\xED\xA0\x80");define('UTF8_SURROGATE_LAST', "\xED\xBF\xBF");define('UTF8_HANGUL_FIRST', "\xEA\xB0\x80");define('UTF8_HANGUL_LAST', "\xED\x9E\xA3");define('UTF8_CJK_FIRST', "\xE4\xB8\x80");define('UTF8_CJK_LAST', "\xE9\xBE\xBB");define('UTF8_CJK_B_FIRST', "\xF0\xA0\x80\x80");define('UTF8_CJK_B_LAST', "\xF0\xAA\x9B\x96");// Unset global variablesunset($GLOBALS['utf_jamo_index'], $GLOBALS['utf_jamo_type'], $GLOBALS['utf_nfc_qc'], $GLOBALS['utf_combining_class'], $GLOBALS['utf_canonical_comp'], $GLOBALS['utf_canonical_decomp'], $GLOBALS['utf_nfkc_qc'], $GLOBALS['utf_compatibility_decomp']);// NFC_QC and NFKC_QC valuesdefine('UNICODE_QC_MAYBE', 0);define('UNICODE_QC_NO', 1);// Contains all the ASCII characters appearing in UTF-8, sorted by frequencydefine('UTF8_ASCII_RANGE', "\x20\x65\x69\x61\x73\x6E\x74\x72\x6F\x6C\x75\x64\x5D\x5B\x63\x6D\x70\x27\x0A\x67\x7C\x68\x76\x2E\x66\x62\x2C\x3A\x3D\x2D\x71\x31\x30\x43\x32\x2A\x79\x78\x29\x28\x4C\x39\x41\x53\x2F\x50\x22\x45\x6A\x4D\x49\x6B\x33\x3E\x35\x54\x3C\x44\x34\x7D\x42\x7B\x38\x46\x77\x52\x36\x37\x55\x47\x4E\x3B\x4A\x7A\x56\x23\x48\x4F\x57\x5F\x26\x21\x4B\x3F\x58\x51\x25\x59\x5C\x09\x5A\x2B\x7E\x5E\x24\x40\x60\x7F\x00\x01\x02\x03\x04\x05\x06\x07\x08\x0B\x0C\x0D\x0E\x0F\x10\x11\x12\x13\x14\x15\x16\x17\x18\x19\x1A\x1B\x1C\x1D\x1E\x1F");// Contains all the tail bytes that can appear in the composition of a UTF-8 chardefine('UTF8_TRAILING_BYTES', "\xA9\xA0\xA8\x80\xAA\x99\xA7\xBB\xAB\x89\x94\x82\xB4\xA2\xAE\x83\xB0\xB9\xB8\x93\xAF\xBC\xB3\x81\xA4\xB2\x9C\xA1\xB5\xBE\xBD\xBA\x98\xAD\xB1\x84\x95\xA6\xB6\x88\x8D\x90\xB7\xBF\x92\x85\xA5\x97\x8C\x86\xA3\x8E\x9F\x8F\x87\x91\x9D\xAC\x9E\x8B\x96\x9B\x8A\x9A");// Constants used by the Hangul [de]composition algorithmsdefine('UNICODE_HANGUL_SBASE', 0xAC00);define('UNICODE_HANGUL_LBASE', 0x1100);define('UNICODE_HANGUL_VBASE', 0x1161);define('UNICODE_HANGUL_TBASE', 0x11A7);define('UNICODE_HANGUL_SCOUNT', 11172);define('UNICODE_HANGUL_LCOUNT', 19);define('UNICODE_HANGUL_VCOUNT', 21);define('UNICODE_HANGUL_TCOUNT', 28);define('UNICODE_HANGUL_NCOUNT', 588);define('UNICODE_JAMO_L', 0);define('UNICODE_JAMO_V', 1);define('UNICODE_JAMO_T', 2);/*** Unicode normalization routines** @package utf*/class utf_normalizer{	/**	* Validate, cleanup and normalize a string	*	* The ultimate convenience function! Clean up invalid UTF-8 sequences,	* and convert to Normal Form C, canonical composition.	*	* @param	string	&$str	The dirty string	* @return	string			The same string, all shiny and cleaned-up	*/	function cleanup(&$str)	{		// The string below is the list of all autorized characters, sorted by frequency in latin text		$pos = strspn($str, "\x20\x65\x69\x61\x73\x6E\x74\x72\x6F\x6C\x75\x64\x5D\x5B\x63\x6D\x70\x27\x0A\x67\x7C\x68\x76\x2E\x66\x62\x2C\x3A\x3D\x2D\x71\x31\x30\x43\x32\x2A\x79\x78\x29\x28\x4C\x39\x41\x53\x2F\x50\x22\x45\x6A\x4D\x49\x6B\x33\x3E\x35\x54\x3C\x44\x34\x7D\x42\x7B\x38\x46\x77\x52\x36\x37\x55\x47\x4E\x3B\x4A\x7A\x56\x23\x48\x4F\x57\x5F\x26\x21\x4B\x3F\x58\x51\x25\x59\x5C\x09\x5A\x2B\x7E\x5E\x24\x40\x60\x7F\x0D");		$len = strlen($str);		if ($pos == $len)		{			// ASCII strings with no special chars return immediately			return;		}		// Note: we do not check for $GLOBALS['utf_canonical_decomp']. It is assumed they are always loaded together		if (!isset($GLOBALS['utf_nfc_qc']))		{			global $phpbb_root_path, $phpEx;			include($phpbb_root_path . 'includes/utf/data/utf_nfc_qc.' . $phpEx);		}		if (!isset($GLOBALS['utf_canonical_decomp']))		{			global $phpbb_root_path, $phpEx;			include($phpbb_root_path . 'includes/utf/data/utf_canonical_decomp.' . $phpEx);		}		// Replace any byte in the range 0x00..0x1F, except for \r, \n and \t		// We replace those characters with a 0xFF byte, which is illegal in UTF-8 and will in turn be replaced with a UTF replacement char		$str = strtr(			$str,			"\x00\x01\x02\x03\x04\x05\x06\x07\x08\x0B\x0C\x0E\x0F\x10\x11\x12\x13\x14\x15\x16\x17\x18\x19\x1A\x1B\x1C\x1D\x1E\x1F",			"\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF"		);		$str = utf_normalizer::recompose($str, $pos, $len, $GLOBALS['utf_nfc_qc'], $GLOBALS['utf_canonical_decomp']);	}	/**	* Validate and normalize a UTF string to NFC	*	* @param	string	&$str	Unchecked UTF string	* @return	string			The string, validated and in normal form	*/	function nfc(&$str)	{		$pos = strspn($str, UTF8_ASCII_RANGE);		$len = strlen($str);		if ($pos == $len)		{			// ASCII strings return immediately			return;		}		if (!isset($GLOBALS['utf_nfc_qc']))		{			global $phpbb_root_path, $phpEx;			include($phpbb_root_path . 'includes/utf/data/utf_nfc_qc.' . $phpEx);		}		if (!isset($GLOBALS['utf_canonical_decomp']))		{			global $phpbb_root_path, $phpEx;			include($phpbb_root_path . 'includes/utf/data/utf_canonical_decomp.' . $phpEx);		}		$str = utf_normalizer::recompose($str, $pos, $len, $GLOBALS['utf_nfc_qc'], $GLOBALS['utf_canonical_decomp']);	}	/**	* Validate and normalize a UTF string to NFKC	*	* @param	string	&$str	Unchecked UTF string	* @return	string			The string, validated and in normal form	*/	function nfkc(&$str)	{		$pos = strspn($str, UTF8_ASCII_RANGE);		$len = strlen($str);		if ($pos == $len)		{			// ASCII strings return immediately			return;		}		if (!isset($GLOBALS['utf_nfkc_qc']))		{			global $phpbb_root_path, $phpEx;			include($phpbb_root_path . 'includes/utf/data/utf_nfkc_qc.' . $phpEx);		}		if (!isset($GLOBALS['utf_compatibility_decomp']))		{			global $phpbb_root_path, $phpEx;			include($phpbb_root_path . 'includes/utf/data/utf_compatibility_decomp.' . $phpEx);		}		$str = utf_normalizer::recompose($str, $pos, $len, $GLOBALS['utf_nfkc_qc'], $GLOBALS['utf_compatibility_decomp']);	}	/**	* Validate and normalize a UTF string to NFD	*	* @param	string	&$str	Unchecked UTF string	* @return	string			The string, validated and in normal form	*/	function nfd(&$str)	{		$pos = strspn($str, UTF8_ASCII_RANGE);		$len = strlen($str);		if ($pos == $len)		{			// ASCII strings return immediately			return;		}		if (!isset($GLOBALS['utf_canonical_decomp']))		{			global $phpbb_root_path, $phpEx;			include($phpbb_root_path . 'includes/utf/data/utf_canonical_decomp.' . $phpEx);		}		$str = utf_normalizer::decompose($str, $pos, $len, $GLOBALS['utf_canonical_decomp']);	}	/**	* Validate and normalize a UTF string to NFKD	*	* @param	string	&$str	Unchecked UTF string	* @return	string			The string, validated and in normal form	*/	function nfkd(&$str)	{		$pos = strspn($str, UTF8_ASCII_RANGE);		$len = strlen($str);		if ($pos == $len)		{			// ASCII strings return immediately			return;		}		if (!isset($GLOBALS['utf_compatibility_decomp']))		{			global $phpbb_root_path, $phpEx;			include($phpbb_root_path . 'includes/utf/data/utf_compatibility_decomp.' . $phpEx);		}		$str = utf_normalizer::decompose($str, $pos, $len, $GLOBALS['utf_compatibility_decomp']);	}	/**	* Recompose a UTF string	*	* @param	string	$str			Unchecked UTF string	* @param	integer	$pos			Position of the first UTF char (in bytes)	* @param	integer	$len			Length of the string (in bytes)	* @param	array	&$qc			Quick-check array, passed by reference but never modified	* @param	array	&$decomp_map	Decomposition mapping, passed by reference but never modified	* @return	string					The string, validated and recomposed	*	* @access	private	*/	function recompose($str, $pos, $len, &$qc, &$decomp_map)	{		global $utf_combining_class, $utf_canonical_comp, $utf_jamo_type, $utf_jamo_index;		// Load some commonly-used tables		if (!isset($utf_jamo_index, $utf_jamo_type, $utf_combining_class))		{			global $phpbb_root_path, $phpEx;			include($phpbb_root_path . 'includes/utf/data/utf_normalizer_common.' . $phpEx);		}		// Load the canonical composition table		if (!isset($utf_canonical_comp))		{			global $phpbb_root_path, $phpEx;			include($phpbb_root_path . 'includes/utf/data/utf_canonical_comp.' . $phpEx);		}		// Buffer the last ASCII char before the UTF-8 stuff if applicable		$tmp = '';		$i = $tmp_pos = $last_cc = 0;		$buffer = ($pos) ? array(++$i => $str[$pos - 1]) : array();		// UTF char length array		// This array is used to determine the length of a UTF character.		// Be $c the result of ($str[$pos] & "\xF0") --where $str is the string we're operating on and $pos		// the position of the cursor--, if $utf_len_mask[$c] does not exist, the byte is an ASCII char.		// Otherwise, if $utf_len_mask[$c] is greater than 0, we have a the leading byte of a multibyte character		// whose length is $utf_len_mask[$c] and if it is equal to 0, the byte is a trailing byte.		$utf_len_mask = array(			// Leading bytes masks			"\xC0" => 2, "\xD0" => 2, "\xE0" => 3, "\xF0" => 4,			// Trailing bytes masks			"\x80" => 0, "\x90" => 0, "\xA0" => 0, "\xB0" => 0		);		$extra_check = array(			"\xED" => 1, "\xEF" => 1, "\xC0" => 1, "\xC1" => 1, "\xE0" => 1, "\xF0" => 1,			"\xF4" => 1, "\xF5" => 1, "\xF6" => 1, "\xF7" => 1, "\xF8" => 1, "\xF9" => 1,			"\xFA" => 1, "\xFB" => 1, "\xFC" => 1, "\xFD" => 1, "\xFE" => 1, "\xFF" => 1		);		$utf_validation_mask = array(			2	=> "\xE0\xC0",			3	=> "\xF0\xC0\xC0",			4	=> "\xF8\xC0\xC0\xC0"		);		$utf_validation_check = array(			2	=> "\xC0\x80",			3	=> "\xE0\x80\x80",			4	=> "\xF0\x80\x80\x80"		);		// Main loop		do		{			// STEP 0: Capture the current char and buffer it			$c = $str[$pos];			$c_mask = $c & "\xF0";			if (isset($utf_len_mask[$c_mask]))			{				// Byte at $pos is either a leading byte or a missplaced trailing byte				if ($utf_len = $utf_len_mask[$c_mask])				{					// Capture the char					$buffer[++$i & 7] = $utf_char = substr($str, $pos, $utf_len);					// Let's find out if a thorough check is needed					if (isset($qc[$utf_char]))					{						// If the UTF char is in the qc array then it may not be in normal form. We do nothing here, the actual processing is below this "if" block					}					else if (isset($utf_combining_class[$utf_char]))					{						if ($utf_combining_class[$utf_char] < $last_cc)						{							// A combining character that is NOT canonically ordered						}						else						{							// A combining character that IS canonically ordered, skip to the next char							$last_cc = $utf_combining_class[$utf_char];							$pos += $utf_len;							continue;						}					}					else					{						// At this point, $utf_char holds a UTF char that we know is not a NF[K]C_QC and is not a combining character.						// It can be a singleton, a canonical composite, a replacement char or an even an ill-formed bunch of bytes. Let's find out						$last_cc = 0;						// Check that we have the correct number of trailing bytes						if (($utf_char & $utf_validation_mask[$utf_len]) != $utf_validation_check[$utf_len])						{							// Current char isn't well-formed or legal: either one or several trailing bytes are missing, or the Unicode char							// has been encoded in a five- or six- byte sequence							if ($utf_char[0] >= "\xF8")							{								if ($utf_char[0] < "\xFC")								{									$trailing_bytes = 4;								}								else if ($utf_char[0] > "\xFD")								{									$trailing_bytes = 0;								}								else								{									$trailing_bytes = 5;								}							}							else							{								$trailing_bytes = $utf_len - 1;							}							$tmp .= substr($str, $tmp_pos, $pos - $tmp_pos) . UTF8_REPLACEMENT;							$pos += strspn($str, UTF8_TRAILING_BYTES, ++$pos, $trailing_bytes);							$tmp_pos = $pos;							continue;						}						if (isset($extra_check[$c]))						{							switch ($c)							{								// Note: 0xED is quite common in Korean								case "\xED":									if ($utf_char >= "\xED\xA0\x80")									{										// Surrogates (U+D800..U+DFFF) are not allowed in UTF-8 (UTF sequence 0xEDA080..0xEDBFBF)										$tmp .= substr($str, $tmp_pos, $pos - $tmp_pos) . UTF8_REPLACEMENT;										$pos += $utf_len;										$tmp_pos = $pos;										continue 2;									}								break;								// Note: 0xEF is quite common in Japanese								case "\xEF":									if ($utf_char == "\xEF\xBF\xBE" || $utf_char == "\xEF\xBF\xBF")									{										// U+FFFE and U+FFFF are explicitly disallowed (UTF sequence 0xEFBFBE..0xEFBFBF)										$tmp .= substr($str, $tmp_pos, $pos - $tmp_pos) . UTF8_REPLACEMENT;										$pos += $utf_len;										$tmp_pos = $pos;										continue 2;									}								break;								case "\xC0":								case "\xC1":									if ($utf_char <= "\xC1\xBF")									{										// Overlong sequence: Unicode char U+0000..U+007F encoded as a double-byte UTF char										$tmp .= substr($str, $tmp_pos, $pos - $tmp_pos) . UTF8_REPLACEMENT;										$pos += $utf_len;										$tmp_pos = $pos;										continue 2;									}								break;								case "\xE0":									if ($utf_char <= "\xE0\x9F\xBF")									{										// Unicode char U+0000..U+07FF encoded in 3 bytes										$tmp .= substr($str, $tmp_pos, $pos - $tmp_pos) . UTF8_REPLACEMENT;										$pos += $utf_len;										$tmp_pos = $pos;										continue 2;									}								break;								case "\xF0":									if ($utf_char <= "\xF0\x8F\xBF\xBF")									{										// Unicode char U+0000..U+FFFF encoded in 4 bytes										$tmp .= substr($str, $tmp_pos, $pos - $tmp_pos) . UTF8_REPLACEMENT;										$pos += $utf_len;										$tmp_pos = $pos;										continue 2;									}								break;								default:									// Five- and six- byte sequences do not need being checked for here anymore									if ($utf_char > UTF8_MAX)									{										// Out of the Unicode range										if ($utf_char[0] < "\xF8")										{											$trailing_bytes = 3;										}										else if ($utf_char[0] < "\xFC")										{											$trailing_bytes = 4;										}										else if ($utf_char[0] > "\xFD")										{											$trailing_bytes = 0;										}										else										{											$trailing_bytes = 5;										}										$tmp .= substr($str, $tmp_pos, $pos - $tmp_pos) . UTF8_REPLACEMENT;										$pos += strspn($str, UTF8_TRAILING_BYTES, ++$pos, $trailing_bytes);										$tmp_pos = $pos;										continue 2;									}								break;							}						}						// The char is a valid starter, move the cursor and go on						$pos += $utf_len;						continue;					}				}				else				{					// A trailing byte came out of nowhere, we will advance the cursor and treat the this byte and all following trailing bytes as if					// each of them was a Unicode replacement char					$spn = strspn($str, UTF8_TRAILING_BYTES, $pos);					$tmp .= substr($str, $tmp_pos, $pos - $tmp_pos) . str_repeat(UTF8_REPLACEMENT, $spn);					$pos += $spn;					$tmp_pos = $pos;					continue;				}				// STEP 1: Decompose current char				// We have found a character that is either:				//  - in the NFC_QC/NFKC_QC list				//  - a non-starter char that is not canonically ordered				//				// We are going to capture the shortest UTF sequence that satisfies these two conditions:				//				//  1 - If the sequence does not start at the begginning of the string, it must begin with a starter,				// and that starter must not have the NF[K]C_QC property equal to "MAYBE"				//				//  2 - If the sequence does not end at the end of the string, it must end with a non-starter and be				// immediately followed by a starter that is not on the QC list				//				$utf_seq = array();				$last_cc = 0;				$lpos = $pos;				$pos += $utf_len;				if (isset($decomp_map[$utf_char]))				{					$_pos = 0;					$_len = strlen($decomp_map[$utf_char]);					do					{						$_utf_len =& $utf_len_mask[$decomp_map[$utf_char][$_pos] & "\xF0"];						if (isset($_utf_len))						{							$utf_seq[] = substr($decomp_map[$utf_char], $_pos, $_utf_len);							$_pos += $_utf_len;						}						else						{							$utf_seq[] = $decomp_map[$utf_char][$_pos];							++$_pos;						}					}					while ($_pos < $_len);				}				else				{					// The char is not decomposable					$utf_seq = array($utf_char);				}				// STEP 2: Capture the starter				// Check out the combining class of the first character of the UTF sequence				$k = 0;				if (isset($utf_combining_class[$utf_seq[0]]) || $qc[$utf_char] == UNICODE_QC_MAYBE)				{					// Not a starter, inspect previous characters					// The last 8 characters are kept in a buffer so that we don't have to capture them everytime.					// This is enough for all real-life strings but even if it wasn't, we can capture characters in backward mode,					// although it is slower than this method.					//					// In the following loop, $j starts at the previous buffered character ($i - 1, because current character is					// at offset $i) and process them in backward mode until we find a starter.					//					// $k is the index on each UTF character inside of our UTF sequence. At this time, $utf_seq contains one or more					// characters numbered 0 to n. $k starts at 0 and for each char we prepend we pre-decrement it and for numbering					$starter_found = 0;					$j_min = max(1, $i - 7);					for ($j = $i - 1; $j >= $j_min && $lpos > $tmp_pos; --$j)					{						$utf_char = $buffer[$j & 7];						$lpos -= strlen($utf_char);						if (isset($decomp_map[$utf_char]))						{							// The char is a composite, decompose for storage							$decomp_seq = array();							$_pos = 0;							$_len = strlen($decomp_map[$utf_char]);							do							{								$c = $decomp_map[$utf_char][$_pos];								$_utf_len =& $utf_len_mask[$c & "\xF0"];								if (isset($_utf_len))								{									$decomp_seq[] = substr($decomp_map[$utf_char], $_pos, $_utf_len);									$_pos += $_utf_len;								}								else								{									$decomp_seq[] = $c;									++$_pos;								}							}							while ($_pos < $_len);							// Prepend the UTF sequence with our decomposed sequence							if (isset($decomp_seq[1]))							{								// The char expanded into several chars								$decomp_cnt = sizeof($decomp_seq);								foreach ($decomp_seq as $decomp_i => $decomp_char)								{									$utf_seq[$k + $decomp_i - $decomp_cnt] = $decomp_char;								}								$k -= $decomp_cnt;							}							else							{								// Decomposed to a single char, easier to prepend								$utf_seq[--$k] = $decomp_seq[0];							}						}						else						{							$utf_seq[--$k] = $utf_char;						}						if (!isset($utf_combining_class[$utf_seq[$k]]))						{							// We have found our starter							$starter_found = 1;							break;						}					}					if (!$starter_found && $lpos > $tmp_pos)					{						// The starter was not found in the buffer, let's rewind some more						do						{							// $utf_len_mask contains the masks of both leading bytes and trailing bytes. If $utf_en > 0 then it's a leading byte, otherwise it's a trailing byte.							$c = $str[--$lpos];							$c_mask = $c & "\xF0";							if (isset($utf_len_mask[$c_mask]))							{								// UTF byte								if ($utf_len = $utf_len_mask[$c_mask])								{									// UTF *leading* byte									$utf_char = substr($str, $lpos, $utf_len);									if (isset($decomp_map[$utf_char]))									{										// Decompose the character										$decomp_seq = array();										$_pos = 0;										$_len = strlen($decomp_map[$utf_char]);										do										{											$c = $decomp_map[$utf_char][$_pos];											$_utf_len =& $utf_len_mask[$c & "\xF0"];											if (isset($_utf_len))											{												$decomp_seq[] = substr($decomp_map[$utf_char], $_pos, $_utf_len);												$_pos += $_utf_len;											}											else											{												$decomp_seq[] = $c;												++$_pos;											}										}										while ($_pos < $_len);										// Prepend the UTF sequence with our decomposed sequence										if (isset($decomp_seq[1]))										{											// The char expanded into several chars											$decomp_cnt = sizeof($decomp_seq);											foreach ($decomp_seq as $decomp_i => $utf_char)											{												$utf_seq[$k + $decomp_i - $decomp_cnt] = $utf_char;											}											$k -= $decomp_cnt;										}										else										{											// Decomposed to a single char, easier to prepend											$utf_seq[--$k] = $decomp_seq[0];										}									}									else									{										$utf_seq[--$k] = $utf_char;									}								}							}							else							{								// ASCII char								$utf_seq[--$k] = $c;							}						}						while ($lpos > $tmp_pos);					}				}				// STEP 3: Capture following combining modifiers				while ($pos < $len)				{					$c_mask = $str[$pos] & "\xF0";					if (isset($utf_len_mask[$c_mask]))					{						if ($utf_len = $utf_len_mask[$c_mask])						{							$utf_char = substr($str, $pos, $utf_len);						}						else						{							// A trailing byte came out of nowhere							// Trailing bytes are replaced with Unicode replacement chars, we will just ignore it for now, break out of the loop							// as if it was a starter (replacement chars ARE starters) and let the next loop replace it							break;						}						if (isset($utf_combining_class[$utf_char]) || isset($qc[$utf_char]))						{							// Combining character, add it to the sequence and move the cursor							if (isset($decomp_map[$utf_char]))							{								// Decompose the character								$_pos = 0;								$_len = strlen($decomp_map[$utf_char]);								do								{									$c = $decomp_map[$utf_char][$_pos];									$_utf_len =& $utf_len_mask[$c & "\xF0"];									if (isset($_utf_len))									{										$utf_seq[] = substr($decomp_map[$utf_char], $_pos, $_utf_len);										$_pos += $_utf_len;									}									else									{										$utf_seq[] = $c;										++$_pos;									}								}								while ($_pos < $_len);							}							else							{								$utf_seq[] = $utf_char;							}							$pos += $utf_len;						}						else						{							// Combining class 0 and no QC, break out of the loop							// Note: we do not know if that character is valid. If it's not, the next iteration will replace it							break;						}					}					else					{						// ASCII chars are starters						break;					}				}				// STEP 4: Sort and combine				// Here we sort...				$k_max = $k + sizeof($utf_seq);				if (!$k && $k_max == 1)				{					// There is only one char in the UTF sequence, add it then jump to the next iteration of main loop						// Note: the two commented lines below can be enabled under PHP5 for a very small performance gain in most cases//						if (substr_compare($str, $utf_seq[0], $lpos, $pos - $lpos))//						{						$tmp .= substr($str, $tmp_pos, $lpos - $tmp_pos) . $utf_seq[0];						$tmp_pos = $pos;//						}					continue;				}				// ...there we combine				if (isset($utf_combining_class[$utf_seq[$k]]))				{					$starter = $nf_seq = '';				}				else				{					$starter = $utf_seq[$k++];					$nf_seq = '';				}				$utf_sort = array();				// We add an empty char at the end of the UTF char sequence. It will act as a starter and trigger the sort/combine routine				// at the end of the string without altering it				$utf_seq[] = '';				do				{					$utf_char = $utf_seq[$k++];					if (isset($utf_combining_class[$utf_char]))					{						$utf_sort[$utf_combining_class[$utf_char]][] = $utf_char;					}					else					{						if (empty($utf_sort))						{							// No combining characters... check for a composite of the two starters							if (isset($utf_canonical_comp[$starter . $utf_char]))							{								// Good ol' composite character								$starter = $utf_canonical_comp[$starter . $utf_char];							}							else if (isset($utf_jamo_type[$utf_char]))							{								// Current char is a composable jamo								if (isset($utf_jamo_type[$starter]) && $utf_jamo_type[$starter] == UNICODE_JAMO_L && $utf_jamo_type[$utf_char] == UNICODE_JAMO_V)								{									// We have a L jamo followed by a V jamo, we are going to prefetch the next char to see if it's a T jamo									if (isset($utf_jamo_type[$utf_seq[$k]]) && $utf_jamo_type[$utf_seq[$k]] == UNICODE_JAMO_T)									{										// L+V+T jamos, combine to a LVT Hangul syllable ($k is incremented)										$cp = $utf_jamo_index[$starter] + $utf_jamo_index[$utf_char] + $utf_jamo_index[$utf_seq[$k]];										++$k;									}									else									{										// L+V jamos, combine to a LV Hangul syllable										$cp = $utf_jamo_index[$starter] + $utf_jamo_index[$utf_char];									}									$starter = chr(0xE0 | ($cp >> 12)) . chr(0x80 | (($cp >> 6) & 0x3F)) . chr(0x80 | ($cp & 0x3F));								}								else								{									// Non-composable jamo, just add it to the sequence									$nf_seq .= $starter;									$starter = $utf_char;								}							}							else							{								// No composite, just add the first starter to the sequence then continue with the other one								$nf_seq .= $starter;								$starter = $utf_char;							}						}						else						{							ksort($utf_sort);							// For each class of combining characters							foreach ($utf_sort as $cc => $utf_chars)							{								$j = 0;								do								{									// Look for a composite									if (isset($utf_canonical_comp[$starter . $utf_chars[$j]]))									{										// Found a composite, replace the starter										$starter = $utf_canonical_comp[$starter . $utf_chars[$j]];										unset($utf_sort[$cc][$j]);									}									else									{										// No composite, all following characters in that class are blocked										break;									}								}								while (isset($utf_sort[$cc][++$j]));							}							// Add the starter to the normalized sequence, followed by non-starters in canonical order							$nf_seq .= $starter;							foreach ($utf_sort as $utf_chars)							{								if (!empty($utf_chars))								{									$nf_seq .= implode('', $utf_chars);								}							}							// Reset the array and go on							$utf_sort = array();							$starter = $utf_char;						}					}				}				while ($k <= $k_max);				$tmp .= substr($str, $tmp_pos, $lpos - $tmp_pos) . $nf_seq;				$tmp_pos = $pos;			}			else			{				// Only a ASCII char can make the program get here				//				// First we skip the current byte with ++$pos, then we quickly skip following ASCII chars with strspn().				//				// The first two "if"'s here can be removed, with the consequences of being faster on latin text (lots of ASCII) and slower on				// multi-byte text (where the only ASCII chars are spaces and punctuation)				if (++$pos != $len)				{					if ($str[$pos] < "\x80")					{						$pos += strspn($str, UTF8_ASCII_RANGE, ++$pos);						$buffer[++$i & 7] = $str[$pos - 1];					}					else					{						$buffer[++$i & 7] = $c;					}				}			}		}		while ($pos < $len);		// Now is time to return the string		if ($tmp_pos)		{			// If the $tmp_pos cursor is not at the beggining of the string then at least one character was not in normal form. Replace $str with the fixed version			if ($tmp_pos == $len)			{				// The $tmp_pos cursor is at the end of $str, therefore $tmp holds the whole $str				return $tmp;			}			else			{				// The rightmost chunk of $str has not been appended to $tmp yet				return $tmp . substr($str, $tmp_pos);			}		}		// The string was already in normal form		return $str;	}	/**	* Decompose a UTF string	*	* @param	string	$str			UTF string	* @param	integer	$pos			Position of the first UTF char (in bytes)	* @param	integer	$len			Length of the string (in bytes)	* @param	array	&$decomp_map	Decomposition mapping, passed by reference but never modified	* @return	string					The string, decomposed and sorted canonically	*	* @access	private	*/	function decompose($str, $pos, $len, &$decomp_map)	{		global $utf_combining_class;		// Load some commonly-used tables		if (!isset($utf_combining_class))		{			global $phpbb_root_path, $phpEx;			include($phpbb_root_path . 'includes/utf/data/utf_normalizer_common.' . $phpEx);		}		// UTF char length array		$utf_len_mask = array(			// Leading bytes masks			"\xC0" => 2, "\xD0" => 2, "\xE0" => 3, "\xF0" => 4,			// Trailing bytes masks			"\x80" => 0, "\x90" => 0, "\xA0" => 0, "\xB0" => 0		);		// Some extra checks are triggered on the first byte of a UTF sequence		$extra_check = array(			"\xED" => 1, "\xEF" => 1, "\xC0" => 1, "\xC1" => 1, "\xE0" => 1, "\xF0" => 1,			"\xF4" => 1, "\xF5" => 1, "\xF6" => 1, "\xF7" => 1, "\xF8" => 1, "\xF9" => 1,			"\xFA" => 1, "\xFB" => 1, "\xFC" => 1, "\xFD" => 1, "\xFE" => 1, "\xFF" => 1		);		// These masks are used to check if a UTF sequence is well formed. Here are the only 3 lengths we acknowledge:		//   - 2-byte: 110? ???? 10?? ????		//   - 3-byte: 1110 ???? 10?? ???? 10?? ????		//   - 4-byte: 1111 0??? 10?? ???? 10?? ???? 10?? ????		// Note that 5- and 6- byte sequences are automatically discarded		$utf_validation_mask = array(			2	=> "\xE0\xC0",			3	=> "\xF0\xC0\xC0",			4	=> "\xF8\xC0\xC0\xC0"		);		$utf_validation_check = array(			2	=> "\xC0\x80",			3	=> "\xE0\x80\x80",			4	=> "\xF0\x80\x80\x80"		);		$tmp = '';		$starter_pos = $pos;		$tmp_pos = $last_cc = $sort = $dump = 0;		$utf_sort = array();		// Main loop		do		{			// STEP 0: Capture the current char			$cur_mask = $str[$pos] & "\xF0";			if (isset($utf_len_mask[$cur_mask]))			{				if ($utf_len = $utf_len_mask[$cur_mask])				{					// Multibyte char					$utf_char = substr($str, $pos, $utf_len);					$pos += $utf_len;				}				else				{					// A trailing byte came out of nowhere, we will treat it and all following trailing bytes as if each of them was a Unicode					// replacement char and we will advance the cursor					$spn = strspn($str, UTF8_TRAILING_BYTES, $pos);					if ($dump)					{						$tmp .= substr($str, $tmp_pos, $starter_pos - $tmp_pos);						// Dump combiners						if (!empty($utf_sort))						{							if ($sort)							{								ksort($utf_sort);							}							foreach ($utf_sort as $utf_chars)							{								$tmp .= implode('', $utf_chars);							}						}						$tmp .= str_repeat(UTF8_REPLACEMENT, $spn);						$dump = $sort = 0;					}					else					{						$tmp .= substr($str, $tmp_pos, $pos - $tmp_pos) . str_repeat(UTF8_REPLACEMENT, $spn);					}					$pos += $spn;					$tmp_pos = $starter_pos = $pos;					$utf_sort = array();					$last_cc = 0;					continue;				}				// STEP 1: Decide what to do with current char				// Now, in that order:				//  - check if that character is decomposable				//  - check if that character is a non-starter				//  - check if that character requires extra checks to be performed				if (isset($decomp_map[$utf_char]))				{					// Decompose the char					$_pos = 0;					$_len = strlen($decomp_map[$utf_char]);					do					{						$c = $decomp_map[$utf_char][$_pos];						$_utf_len =& $utf_len_mask[$c & "\xF0"];						if (isset($_utf_len))						{							$_utf_char = substr($decomp_map[$utf_char], $_pos, $_utf_len);							$_pos += $_utf_len;							if (isset($utf_combining_class[$_utf_char]))							{								// The character decomposed to a non-starter, buffer it for sorting								$utf_sort[$utf_combining_class[$_utf_char]][] = $_utf_char;								if ($utf_combining_class[$_utf_char] < $last_cc)								{									// Not canonically ordered, will require sorting									$sort = $dump = 1;								}								else								{									$dump = 1;									$last_cc = $utf_combining_class[$_utf_char];								}							}							else							{								// This character decomposition contains a starter, dump the buffer and continue								if ($dump)								{									$tmp .= substr($str, $tmp_pos, $starter_pos - $tmp_pos);									// Dump combiners									if (!empty($utf_sort))									{										if ($sort)										{											ksort($utf_sort);										}										foreach ($utf_sort as $utf_chars)										{											$tmp .= implode('', $utf_chars);										}									}									$tmp .= $_utf_char;									$dump = $sort = 0;								}								else								{									$tmp .= substr($str, $tmp_pos, $starter_pos - $tmp_pos) . $_utf_char;								}								$tmp_pos = $starter_pos = $pos;								$utf_sort = array();								$last_cc = 0;							}						}						else						{							// This character decomposition contains an ASCII char, which is a starter. Dump the buffer and continue							++$_pos;							if ($dump)							{								$tmp .= substr($str, $tmp_pos, $starter_pos - $tmp_pos);								// Dump combiners								if (!empty($utf_sort))								{									if ($sort)									{										ksort($utf_sort);									}									foreach ($utf_sort as $utf_chars)									{										$tmp .= implode('', $utf_chars);									}								}								$tmp .= $c;								$dump = $sort = 0;							}							else							{								$tmp .= substr($str, $tmp_pos, $pos - $utf_len - $tmp_pos) . $c;							}							$tmp_pos = $starter_pos = $pos;							$utf_sort = array();							$last_cc = 0;						}					}					while ($_pos < $_len);				}				else if (isset($utf_combining_class[$utf_char]))				{					// Combining character					if ($utf_combining_class[$utf_char] < $last_cc)					{						// Not in canonical order						$sort = $dump = 1;					}					else					{						$last_cc = $utf_combining_class[$utf_char];					}					$utf_sort[$utf_combining_class[$utf_char]][] = $utf_char;				}				else				{					// Non-decomposable starter, check out if it's a Hangul syllable					if ($utf_char < UTF8_HANGUL_FIRST || $utf_char > UTF8_HANGUL_LAST)					{						// Nope, regular UTF char, check that we have the correct number of trailing bytes						if (($utf_char & $utf_validation_mask[$utf_len]) != $utf_validation_check[$utf_len])						{							// Current char isn't well-formed or legal: either one or several trailing bytes are missing, or the Unicode char							// has been encoded in a five- or six- byte sequence.							// Move the cursor back to its original position then advance it to the position it should really be at							$pos -= $utf_len;							$tmp .= substr($str, $tmp_pos, $starter_pos - $tmp_pos);							if (!empty($utf_sort))							{								ksort($utf_sort);								foreach ($utf_sort as $utf_chars)								{									$tmp .= implode('', $utf_chars);								}								$utf_sort = array();							}							// Add a replacement char then another replacement char for every trailing byte.							//							// @todo I'm not entirely sure that's how we're supposed to mark invalidated byte sequences, check this							$spn = strspn($str, UTF8_TRAILING_BYTES, ++$pos);							$tmp .= str_repeat(UTF8_REPLACEMENT, $spn + 1);							$dump = $sort = 0;							$pos += $spn;							$tmp_pos = $pos;							continue;						}						if (isset($extra_check[$utf_char[0]]))						{							switch ($utf_char[0])							{								// Note: 0xED is quite common in Korean								case "\xED":									if ($utf_char >= "\xED\xA0\x80")									{										// Surrogates (U+D800..U+DFFF) are not allowed in UTF-8 (UTF sequence 0xEDA080..0xEDBFBF)										$tmp .= substr($str, $tmp_pos, $starter_pos - $tmp_pos);										if (!empty($utf_sort))										{											ksort($utf_sort);											foreach ($utf_sort as $utf_chars)											{												$tmp .= implode('', $utf_chars);											}											$utf_sort = array();										}										$tmp .= UTF8_REPLACEMENT;										$dump = $sort = 0;										$tmp_pos = $starter_pos = $pos;										continue 2;									}								break;								// Note: 0xEF is quite common in Japanese								case "\xEF":									if ($utf_char == "\xEF\xBF\xBE" || $utf_char == "\xEF\xBF\xBF")									{										// U+FFFE and U+FFFF are explicitly disallowed (UTF sequence 0xEFBFBE..0xEFBFBF)										$tmp .= substr($str, $tmp_pos, $starter_pos - $tmp_pos);										if (!empty($utf_sort))										{											ksort($utf_sort);											foreach ($utf_sort as $utf_chars)											{												$tmp .= implode('', $utf_chars);											}											$utf_sort = array();										}										$tmp .= UTF8_REPLACEMENT;										$dump = $sort = 0;										$tmp_pos = $starter_pos = $pos;										continue 2;									}								break;								case "\xC0":								case "\xC1":									if ($utf_char <= "\xC1\xBF")									{										// Overlong sequence: Unicode char U+0000..U+007F encoded as a double-byte UTF char										$tmp .= substr($str, $tmp_pos, $starter_pos - $tmp_pos);										if (!empty($utf_sort))										{											ksort($utf_sort);											foreach ($utf_sort as $utf_chars)											{												$tmp .= implode('', $utf_chars);											}											$utf_sort = array();										}										$tmp .= UTF8_REPLACEMENT;										$dump = $sort = 0;										$tmp_pos = $starter_pos = $pos;										continue 2;									}								break;								case "\xE0":									if ($utf_char <= "\xE0\x9F\xBF")									{										// Unicode char U+0000..U+07FF encoded in 3 bytes										$tmp .= substr($str, $tmp_pos, $starter_pos - $tmp_pos);										if (!empty($utf_sort))										{											ksort($utf_sort);											foreach ($utf_sort as $utf_chars)											{												$tmp .= implode('', $utf_chars);											}											$utf_sort = array();										}										$tmp .= UTF8_REPLACEMENT;										$dump = $sort = 0;										$tmp_pos = $starter_pos = $pos;										continue 2;									}								break;								case "\xF0":									if ($utf_char <= "\xF0\x8F\xBF\xBF")									{										// Unicode char U+0000..U+FFFF encoded in 4 bytes										$tmp .= substr($str, $tmp_pos, $starter_pos - $tmp_pos);										if (!empty($utf_sort))										{											ksort($utf_sort);											foreach ($utf_sort as $utf_chars)											{												$tmp .= implode('', $utf_chars);											}											$utf_sort = array();										}										$tmp .= UTF8_REPLACEMENT;										$dump = $sort = 0;										$tmp_pos = $starter_pos = $pos;										continue 2;									}								break;								default:									if ($utf_char > UTF8_MAX)									{										// Out of the Unicode range										$tmp .= substr($str, $tmp_pos, $starter_pos - $tmp_pos);										if (!empty($utf_sort))										{											ksort($utf_sort);											foreach ($utf_sort as $utf_chars)											{												$tmp .= implode('', $utf_chars);											}											$utf_sort = array();										}										$tmp .= UTF8_REPLACEMENT;										$dump = $sort = 0;										$tmp_pos = $starter_pos = $pos;										continue 2;									}								break;							}						}					}					else					{						// Hangul syllable						$idx = (((ord($utf_char[0]) & 0x0F) << 12) | ((ord($utf_char[1]) & 0x3F) << 6) | (ord($utf_char[2]) & 0x3F)) - UNICODE_HANGUL_SBASE;						// LIndex can only range from 0 to 18, therefore it cannot influence the first two bytes of the L Jamo, which allows us to hardcode them (based on LBase).						//						// The same goes for VIndex, but for TIndex there's a catch: the value of the third byte could exceed 0xBF and we would have to increment the second byte						if ($t_index = $idx % UNICODE_HANGUL_TCOUNT)						{							if ($t_index < 25)							{								$utf_char = "\xE1\x84\x00\xE1\x85\x00\xE1\x86\x00";								$utf_char[8] = chr(0xA7 + $t_index);							}							else							{								$utf_char = "\xE1\x84\x00\xE1\x85\x00\xE1\x87\x00";								$utf_char[8] = chr(0x67 + $t_index);							}						}						else						{							$utf_char = "\xE1\x84\x00\xE1\x85\x00";						}						$utf_char[2] = chr(0x80 + (int) ($idx / UNICODE_HANGUL_NCOUNT));						$utf_char[5] = chr(0xA1 + (int) (($idx % UNICODE_HANGUL_NCOUNT) / UNICODE_HANGUL_TCOUNT));						// Just like other decompositions, the resulting Jamos must be dumped to the tmp string						$dump = 1;					}					// Do we need to dump stuff to the tmp string?					if ($dump)					{						$tmp .= substr($str, $tmp_pos, $starter_pos - $tmp_pos);						// Dump combiners						if (!empty($utf_sort))						{							if ($sort)							{								ksort($utf_sort);							}							foreach ($utf_sort as $utf_chars)							{								$tmp .= implode('', $utf_chars);							}						}						$tmp .= $utf_char;						$dump = $sort = 0;						$tmp_pos = $pos;					}					$last_cc = 0;					$utf_sort = array();					$starter_pos = $pos;				}			}			else			{				// ASCII char, which happens to be a starter (as any other ASCII char)				if ($dump)				{					$tmp .= substr($str, $tmp_pos, $starter_pos - $tmp_pos);					// Dump combiners					if (!empty($utf_sort))					{						if ($sort)						{							ksort($utf_sort);						}						foreach ($utf_sort as $utf_chars)						{							$tmp .= implode('', $utf_chars);						}					}					$tmp .= $str[$pos];					$dump = $sort = 0;					$tmp_pos = ++$pos;					$pos += strspn($str, UTF8_ASCII_RANGE, $pos);				}				else				{					$pos += strspn($str, UTF8_ASCII_RANGE, ++$pos);				}				$last_cc = 0;				$utf_sort = array();				$starter_pos = $pos;			}		}		while ($pos < $len);		// Now is time to return the string		if ($dump)		{			$tmp .= substr($str, $tmp_pos, $starter_pos - $tmp_pos);			// Dump combiners			if (!empty($utf_sort))			{				if ($sort)				{					ksort($utf_sort);				}				foreach ($utf_sort as $utf_chars)				{					$tmp .= implode('', $utf_chars);				}			}			return $tmp;		}		else if ($tmp_pos)		{			// If the $tmp_pos cursor was moved then at least one character was not in normal form. Replace $str with the fixed version			if ($tmp_pos == $len)			{				// The $tmp_pos cursor is at the end of $str, therefore $tmp holds the whole $str				return $tmp;			}			else			{				// The rightmost chunk of $str has not been appended to $tmp yet				return $tmp . substr($str, $tmp_pos);			}		}		// The string was already in normal form		return $str;	}}?>
<?php/**** @package phpBB3* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @ignore*/define('IN_PHPBB', true);$phpbb_root_path = (defined('PHPBB_ROOT_PATH')) ? PHPBB_ROOT_PATH : './';$phpEx = substr(strrchr(__FILE__, '.'), 1);include($phpbb_root_path . 'common.' . $phpEx);// Start session management$user->session_begin();$auth->acl($user->data);$user->setup('search');// Define initial vars$mode			= request_var('mode', '');$search_id		= request_var('search_id', '');$start			= max(request_var('start', 0), 0);$post_id		= request_var('p', 0);$topic_id		= request_var('t', 0);$view			= request_var('view', '');$submit			= request_var('submit', false);$keywords		= utf8_normalize_nfc(request_var('keywords', '', true));$add_keywords	= utf8_normalize_nfc(request_var('add_keywords', '', true));$author			= request_var('author', '', true);$author_id		= request_var('author_id', 0);$show_results	= ($topic_id) ? 'posts' : request_var('sr', 'posts');$show_results	= ($show_results == 'posts') ? 'posts' : 'topics';$search_terms	= request_var('terms', 'all');$search_fields	= request_var('sf', 'all');$search_child	= request_var('sc', true);$sort_days		= request_var('st', 0);$sort_key		= request_var('sk', 't');$sort_dir		= request_var('sd', 'd');$return_chars	= request_var('ch', ($topic_id) ? -1 : 300);$search_forum	= request_var('fid', array(0));// We put login boxes for the case if search_id is newposts, egosearch or unreadposts// because a guest should be able to log in even if guests search is not permittedswitch ($search_id){	// Egosearch is an author search	case 'egosearch':		$author_id = $user->data['user_id'];		if ($user->data['user_id'] == ANONYMOUS)		{			login_box('', $user->lang['LOGIN_EXPLAIN_EGOSEARCH']);		}	break;	// Search for unread posts needs to be allowed and user to be logged in if topics tracking for guests is disabled	case 'unreadposts':		if (!$config['load_unreads_search'])		{			$template->assign_var('S_NO_SEARCH', true);			trigger_error('NO_SEARCH_UNREADS');		}		else if (!$config['load_anon_lastread'] && !$user->data['is_registered'])		{			login_box('', $user->lang['LOGIN_EXPLAIN_UNREADSEARCH']);		}	break;		// The "new posts" search uses user_lastvisit which is user based, so it should require user to log in.	case 'newposts':		if ($user->data['user_id'] == ANONYMOUS)		{			login_box('', $user->lang['LOGIN_EXPLAIN_NEWPOSTS']);		}	break;		default:		// There's nothing to do here for now ;)	break;}// Is user able to search? Has search been disabled?if (!$auth->acl_get('u_search') || !$auth->acl_getf_global('f_search') || !$config['load_search']){	$template->assign_var('S_NO_SEARCH', true);	trigger_error('NO_SEARCH');}// Check search load limitif ($user->load && $config['limit_search_load'] && ($user->load > doubleval($config['limit_search_load']))){	$template->assign_var('S_NO_SEARCH', true);	trigger_error('NO_SEARCH_TIME');}// It is applicable if the configuration setting is non-zero, and the user cannot// ignore the flood setting, and the search is a keyword search.$interval = ($user->data['user_id'] == ANONYMOUS) ? $config['search_anonymous_interval'] : $config['search_interval'];if ($interval && !in_array($search_id, array('unreadposts', 'unanswered', 'active_topics', 'egosearch')) && !$auth->acl_get('u_ignoreflood')){	if ($user->data['user_last_search'] > time() - $interval)	{		$template->assign_var('S_NO_SEARCH', true);		trigger_error('NO_SEARCH_TIME');	}}// Define some vars$limit_days		= array(0 => $user->lang['ALL_RESULTS'], 1 => $user->lang['1_DAY'], 7 => $user->lang['7_DAYS'], 14 => $user->lang['2_WEEKS'], 30 => $user->lang['1_MONTH'], 90 => $user->lang['3_MONTHS'], 180 => $user->lang['6_MONTHS'], 365 => $user->lang['1_YEAR']);$sort_by_text	= array('a' => $user->lang['SORT_AUTHOR'], 't' => $user->lang['SORT_TIME'], 'f' => $user->lang['SORT_FORUM'], 'i' => $user->lang['SORT_TOPIC_TITLE'], 's' => $user->lang['SORT_POST_SUBJECT']);$s_limit_days = $s_sort_key = $s_sort_dir = $u_sort_param = '';gen_sort_selects($limit_days, $sort_by_text, $sort_days, $sort_key, $sort_dir, $s_limit_days, $s_sort_key, $s_sort_dir, $u_sort_param);if ($keywords || $author || $author_id || $search_id || $submit){	// clear arrays	$id_ary = array();	// If we are looking for authors get their ids	$author_id_ary = array();	$sql_author_match = '';	if ($author_id)	{		$author_id_ary[] = $author_id;	}	else if ($author)	{		if ((strpos($author, '*') !== false) && (utf8_strlen(str_replace(array('*', '%'), '', $author)) < $config['min_search_author_chars']))		{			trigger_error(sprintf($user->lang['TOO_FEW_AUTHOR_CHARS'], $config['min_search_author_chars']));		}		$sql_where = (strpos($author, '*') !== false) ? ' username_clean ' . $db->sql_like_expression(str_replace('*', $db->any_char, utf8_clean_string($author))) : " username_clean = '" . $db->sql_escape(utf8_clean_string($author)) . "'";		$sql = 'SELECT user_id			FROM ' . USERS_TABLE . "			WHERE $sql_where				AND user_type <> " . USER_IGNORE;		$result = $db->sql_query_limit($sql, 100);		while ($row = $db->sql_fetchrow($result))		{			$author_id_ary[] = (int) $row['user_id'];		}		$db->sql_freeresult($result);		$sql_where = (strpos($author, '*') !== false) ? ' post_username ' . $db->sql_like_expression(str_replace('*', $db->any_char, utf8_clean_string($author))) : " post_username = '" . $db->sql_escape(utf8_clean_string($author)) . "'";		$sql = 'SELECT 1 as guest_post			FROM ' . POSTS_TABLE . "			WHERE $sql_where				AND poster_id = " . ANONYMOUS;		$result = $db->sql_query_limit($sql, 1);		$found_guest_post = $db->sql_fetchfield('guest_post');		$db->sql_freeresult($result);		if ($found_guest_post)		{			$author_id_ary[] = ANONYMOUS;			$sql_author_match = (strpos($author, '*') !== false) ? ' ' . $db->sql_like_expression(str_replace('*', $db->any_char, utf8_clean_string($author))) : " = '" . $db->sql_escape(utf8_clean_string($author)) . "'";		}		if (!sizeof($author_id_ary))		{			trigger_error('NO_SEARCH_RESULTS');		}	}	// if we search in an existing search result just add the additional keywords. But we need to use "all search terms"-mode	// so we can keep the old keywords in their old mode, but add the new ones as required words	if ($add_keywords)	{		if ($search_terms == 'all')		{			$keywords .= ' ' . $add_keywords;		}		else		{			$search_terms = 'all';			$keywords = implode(' |', explode(' ', preg_replace('#\s+#u', ' ', $keywords))) . ' ' .$add_keywords;		}	}	// Which forums should not be searched? Author searches are also carried out in unindexed forums	if (empty($keywords) && sizeof($author_id_ary))	{		$ex_fid_ary = array_keys($auth->acl_getf('!f_read', true));	}	else	{		$ex_fid_ary = array_unique(array_merge(array_keys($auth->acl_getf('!f_read', true)), array_keys($auth->acl_getf('!f_search', true))));	}	$not_in_fid = (sizeof($ex_fid_ary)) ? 'WHERE ' . $db->sql_in_set('f.forum_id', $ex_fid_ary, true) . " OR (f.forum_password <> '' AND fa.user_id <> " . (int) $user->data['user_id'] . ')' : "";	$sql = 'SELECT f.forum_id, f.forum_name, f.parent_id, f.forum_type, f.right_id, f.forum_password, f.forum_flags, fa.user_id		FROM ' . FORUMS_TABLE . ' f		LEFT JOIN ' . FORUMS_ACCESS_TABLE . " fa ON (fa.forum_id = f.forum_id			AND fa.session_id = '" . $db->sql_escape($user->session_id) . "')		$not_in_fid		ORDER BY f.left_id";	$result = $db->sql_query($sql);	$right_id = 0;	$reset_search_forum = true;	while ($row = $db->sql_fetchrow($result))	{		if ($row['forum_password'] && $row['user_id'] != $user->data['user_id'])		{			$ex_fid_ary[] = (int) $row['forum_id'];			continue;		}		// Exclude forums from active topics		if (!($row['forum_flags'] & FORUM_FLAG_ACTIVE_TOPICS) && ($search_id == 'active_topics'))		{			$ex_fid_ary[] = (int) $row['forum_id'];			continue;		}		if (sizeof($search_forum))		{			if ($search_child)			{				if (in_array($row['forum_id'], $search_forum) && $row['right_id'] > $right_id)				{					$right_id = (int) $row['right_id'];				}				else if ($row['right_id'] < $right_id)				{					continue;				}			}			if (!in_array($row['forum_id'], $search_forum))			{				$ex_fid_ary[] = (int) $row['forum_id'];				$reset_search_forum = false;			}		}	}	$db->sql_freeresult($result);	// find out in which forums the user is allowed to view approved posts	if ($auth->acl_get('m_approve'))	{		$m_approve_fid_ary = array(-1);		$m_approve_fid_sql = '';	}	else if ($auth->acl_getf_global('m_approve'))	{		$m_approve_fid_ary = array_diff(array_keys($auth->acl_getf('!m_approve', true)), $ex_fid_ary);		$m_approve_fid_sql = ' AND (p.post_approved = 1' . ((sizeof($m_approve_fid_ary)) ? ' OR ' . $db->sql_in_set('p.forum_id', $m_approve_fid_ary, true) : '') . ')';	}	else	{		$m_approve_fid_ary = array();		$m_approve_fid_sql = ' AND p.post_approved = 1';	}	if ($reset_search_forum)	{		$search_forum = array();	}	// Select which method we'll use to obtain the post_id or topic_id information	$search_type = basename($config['search_type']);	if (!file_exists($phpbb_root_path . 'includes/search/' . $search_type . '.' . $phpEx))	{		trigger_error('NO_SUCH_SEARCH_MODULE');	}	require("{$phpbb_root_path}includes/search/$search_type.$phpEx");	// We do some additional checks in the module to ensure it can actually be utilised	$error = false;	$search = new $search_type($error);	if ($error)	{		trigger_error($error);	}	// let the search module split up the keywords	if ($keywords)	{		$correct_query = $search->split_keywords($keywords, $search_terms);		if (!$correct_query || (empty($search->search_query) && !sizeof($author_id_ary) && !$search_id))		{			$ignored = (sizeof($search->common_words)) ? sprintf($user->lang['IGNORED_TERMS_EXPLAIN'], implode(' ', $search->common_words)) . '<br />' : '';			trigger_error($ignored . sprintf($user->lang['NO_KEYWORDS'], $search->word_length['min'], $search->word_length['max']));		}	}	if (!$keywords && sizeof($author_id_ary))	{		// if it is an author search we want to show topics by default		$show_results = ($topic_id) ? 'posts' : request_var('sr', ($search_id == 'egosearch') ? 'topics' : 'posts');		$show_results = ($show_results == 'posts') ? 'posts' : 'topics';	}	// define some variables needed for retrieving post_id/topic_id information	$sort_by_sql = array('a' => 'u.username_clean', 't' => (($show_results == 'posts') ? 'p.post_time' : 't.topic_last_post_time'), 'f' => 'f.forum_id', 'i' => 't.topic_title', 's' => (($show_results == 'posts') ? 'p.post_subject' : 't.topic_title'));	// pre-made searches	$sql = $field = $l_search_title = '';	if ($search_id)	{		switch ($search_id)		{			// Oh holy Bob, bring us some activity...			case 'active_topics':				$l_search_title = $user->lang['SEARCH_ACTIVE_TOPICS'];				$show_results = 'topics';				$sort_key = 't';				$sort_dir = 'd';				$sort_days = request_var('st', 7);				$sort_by_sql['t'] = 't.topic_last_post_time';				gen_sort_selects($limit_days, $sort_by_text, $sort_days, $sort_key, $sort_dir, $s_limit_days, $s_sort_key, $s_sort_dir, $u_sort_param);				$s_sort_key = $s_sort_dir = '';				$last_post_time_sql = ($sort_days) ? ' AND t.topic_last_post_time > ' . (time() - ($sort_days * 24 * 3600)) : '';				$sql = 'SELECT t.topic_last_post_time, t.topic_id					FROM ' . TOPICS_TABLE . " t					WHERE t.topic_moved_id = 0						$last_post_time_sql						" . str_replace(array('p.', 'post_'), array('t.', 'topic_'), $m_approve_fid_sql) . '						' . ((sizeof($ex_fid_ary)) ? ' AND ' . $db->sql_in_set('t.forum_id', $ex_fid_ary, true) : '') . '					ORDER BY t.topic_last_post_time DESC';				$field = 'topic_id';			break;			case 'unanswered':				$l_search_title = $user->lang['SEARCH_UNANSWERED'];				$show_results = request_var('sr', 'topics');				$show_results = ($show_results == 'posts') ? 'posts' : 'topics';				$sort_by_sql['t'] = ($show_results == 'posts') ? 'p.post_time' : 't.topic_last_post_time';				$sort_by_sql['s'] = ($show_results == 'posts') ? 'p.post_subject' : 't.topic_title';				$sql_sort = 'ORDER BY ' . $sort_by_sql[$sort_key] . (($sort_dir == 'a') ? ' ASC' : ' DESC');				$sort_join = ($sort_key == 'f') ? FORUMS_TABLE . ' f, ' : '';				$sql_sort = ($sort_key == 'f') ? ' AND f.forum_id = p.forum_id ' . $sql_sort : $sql_sort;				if ($sort_days)				{					$last_post_time = 'AND p.post_time > ' . (time() - ($sort_days * 24 * 3600));				}				else				{					$last_post_time = '';				}				if ($sort_key == 'a')				{					$sort_join = USERS_TABLE . ' u, ';					$sql_sort = ' AND u.user_id = p.poster_id ' . $sql_sort;				}				if ($show_results == 'posts')				{					$sql = "SELECT p.post_id						FROM $sort_join" . POSTS_TABLE . ' p, ' . TOPICS_TABLE . " t						WHERE t.topic_replies = 0							AND p.topic_id = t.topic_id							$last_post_time							$m_approve_fid_sql							" . ((sizeof($ex_fid_ary)) ? ' AND ' . $db->sql_in_set('p.forum_id', $ex_fid_ary, true) : '') . "							$sql_sort";					$field = 'post_id';				}				else				{					$sql = 'SELECT DISTINCT ' . $sort_by_sql[$sort_key] . ", p.topic_id						FROM $sort_join" . POSTS_TABLE . ' p, ' . TOPICS_TABLE . " t						WHERE t.topic_replies = 0							AND t.topic_moved_id = 0							AND p.topic_id = t.topic_id							$last_post_time							$m_approve_fid_sql							" . ((sizeof($ex_fid_ary)) ? ' AND ' . $db->sql_in_set('p.forum_id', $ex_fid_ary, true) : '') . "						$sql_sort";					$field = 'topic_id';				}			break;			case 'unreadposts':				$l_search_title = $user->lang['SEARCH_UNREAD'];				// force sorting				$show_results = 'topics';				$sort_key = 't';				$sort_by_sql['t'] = 't.topic_last_post_time';				$sql_sort = 'ORDER BY ' . $sort_by_sql[$sort_key] . (($sort_dir == 'a') ? ' ASC' : ' DESC');				$sql_where = 'AND t.topic_moved_id = 0					' . str_replace(array('p.', 'post_'), array('t.', 'topic_'), $m_approve_fid_sql) . '					' . ((sizeof($ex_fid_ary)) ? 'AND ' . $db->sql_in_set('t.forum_id', $ex_fid_ary, true) : '');				gen_sort_selects($limit_days, $sort_by_text, $sort_days, $sort_key, $sort_dir, $s_limit_days, $s_sort_key, $s_sort_dir, $u_sort_param);				$s_sort_key = $s_sort_dir = $u_sort_param = $s_limit_days = '';			break;			case 'newposts':				$l_search_title = $user->lang['SEARCH_NEW'];				// force sorting				$show_results = (request_var('sr', 'topics') == 'posts') ? 'posts' : 'topics';				$sort_key = 't';				$sort_dir = 'd';				$sort_by_sql['t'] = ($show_results == 'posts') ? 'p.post_time' : 't.topic_last_post_time';				$sql_sort = 'ORDER BY ' . $sort_by_sql[$sort_key] . (($sort_dir == 'a') ? ' ASC' : ' DESC');				gen_sort_selects($limit_days, $sort_by_text, $sort_days, $sort_key, $sort_dir, $s_limit_days, $s_sort_key, $s_sort_dir, $u_sort_param);				$s_sort_key = $s_sort_dir = $u_sort_param = $s_limit_days = '';				if ($show_results == 'posts')				{					$sql = 'SELECT p.post_id						FROM ' . POSTS_TABLE . ' p						WHERE p.post_time > ' . $user->data['user_lastvisit'] . "							$m_approve_fid_sql							" . ((sizeof($ex_fid_ary)) ? ' AND ' . $db->sql_in_set('p.forum_id', $ex_fid_ary, true) : '') . "						$sql_sort";					$field = 'post_id';				}				else				{					$sql = 'SELECT t.topic_id						FROM ' . TOPICS_TABLE . ' t						WHERE t.topic_last_post_time > ' . $user->data['user_lastvisit'] . '							AND t.topic_moved_id = 0							' . str_replace(array('p.', 'post_'), array('t.', 'topic_'), $m_approve_fid_sql) . '							' . ((sizeof($ex_fid_ary)) ? 'AND ' . $db->sql_in_set('t.forum_id', $ex_fid_ary, true) : '') . "						$sql_sort";/*		[Fix] queued replies missing from "view new posts" (Bug #42705 - Patch by Paul)		- Creates temporary table, query is far from optimized					$sql = 'SELECT t.topic_id						FROM ' . TOPICS_TABLE . ' t, ' . POSTS_TABLE . ' p						WHERE p.post_time > ' . $user->data['user_lastvisit'] . '							AND t.topic_id = p.topic_id							AND t.topic_moved_id = 0							' . $m_approve_fid_sql . '							' . ((sizeof($ex_fid_ary)) ? 'AND ' . $db->sql_in_set('t.forum_id', $ex_fid_ary, true) : '') . "						GROUP BY t.topic_id						$sql_sort";*/					$field = 'topic_id';				}			break;			case 'egosearch':				$l_search_title = $user->lang['SEARCH_SELF'];			break;		}	}	// show_results should not change after this	$per_page = ($show_results == 'posts') ? $config['posts_per_page'] : $config['topics_per_page'];	$total_match_count = 0;	if ($search_id)	{		if ($sql)		{			// only return up to 1000 ids (the last one will be removed later)			$result = $db->sql_query_limit($sql, 1001 - $start, $start);			while ($row = $db->sql_fetchrow($result))			{				$id_ary[] = (int) $row[$field];			}			$db->sql_freeresult($result);			$total_match_count = sizeof($id_ary) + $start;			$id_ary = array_slice($id_ary, 0, $per_page);		}		else if ($search_id == 'unreadposts')		{			$id_ary = array_keys(get_unread_topics($user->data['user_id'], $sql_where, $sql_sort, 1001 - $start, $start));			$total_match_count = sizeof($id_ary) + $start;			$id_ary = array_slice($id_ary, 0, $per_page);		}		else		{			$search_id = '';		}	}	// make sure that some arrays are always in the same order	sort($ex_fid_ary);	sort($m_approve_fid_ary);	sort($author_id_ary);	if (!empty($search->search_query))	{		$total_match_count = $search->keyword_search($show_results, $search_fields, $search_terms, $sort_by_sql, $sort_key, $sort_dir, $sort_days, $ex_fid_ary, $m_approve_fid_ary, $topic_id, $author_id_ary, $sql_author_match, $id_ary, $start, $per_page);	}	else if (sizeof($author_id_ary))	{		$firstpost_only = ($search_fields === 'firstpost' || $search_fields == 'titleonly') ? true : false;		$total_match_count = $search->author_search($show_results, $firstpost_only, $sort_by_sql, $sort_key, $sort_dir, $sort_days, $ex_fid_ary, $m_approve_fid_ary, $topic_id, $author_id_ary, $sql_author_match, $id_ary, $start, $per_page);	}	// For some searches we need to print out the "no results" page directly to allow re-sorting/refining the search options.	if (!sizeof($id_ary) && !$search_id)	{		trigger_error('NO_SEARCH_RESULTS');	}	$sql_where = '';	if (sizeof($id_ary))	{		$sql_where .= $db->sql_in_set(($show_results == 'posts') ? 'p.post_id' : 't.topic_id', $id_ary);		$sql_where .= (sizeof($ex_fid_ary)) ? ' AND (' . $db->sql_in_set('f.forum_id', $ex_fid_ary, true) . ' OR f.forum_id IS NULL)' : '';		$sql_where .= ($show_results == 'posts') ? $m_approve_fid_sql : str_replace(array('p.post_approved', 'p.forum_id'), array('t.topic_approved', 't.forum_id'), $m_approve_fid_sql);	}	if ($show_results == 'posts')	{		include($phpbb_root_path . 'includes/functions_posting.' . $phpEx);	}	else	{		include($phpbb_root_path . 'includes/functions_display.' . $phpEx);	}	$user->add_lang('viewtopic');	// Grab icons	$icons = $cache->obtain_icons();	// Output header	if ($search_id && ($total_match_count > 1000))	{		// limit the number to 1000 for pre-made searches		$total_match_count--;		$l_search_matches = sprintf($user->lang['FOUND_MORE_SEARCH_MATCHES'], $total_match_count);	}	else	{		$l_search_matches = ($total_match_count == 1) ? sprintf($user->lang['FOUND_SEARCH_MATCH'], $total_match_count) : sprintf($user->lang['FOUND_SEARCH_MATCHES'], $total_match_count);	}	// define some vars for urls	$hilit = implode('|', explode(' ', preg_replace('#\s+#u', ' ', str_replace(array('+', '-', '|', '(', ')', '&quot;'), ' ', $keywords))));	// Do not allow *only* wildcard being used for hilight	$hilit = (strspn($hilit, '*') === strlen($hilit)) ? '' : $hilit;	$u_hilit = urlencode(htmlspecialchars_decode(str_replace('|', ' ', $hilit)));	$u_show_results = '&amp;sr=' . $show_results;	$u_search_forum = implode('&amp;fid%5B%5D=', $search_forum);	$u_search = append_sid("{$phpbb_root_path}search.$phpEx", $u_sort_param . $u_show_results);	$u_search .= ($search_id) ? '&amp;search_id=' . $search_id : '';	$u_search .= ($u_hilit) ? '&amp;keywords=' . urlencode(htmlspecialchars_decode($keywords)) : '';	$u_search .= ($search_terms != 'all') ? '&amp;terms=' . $search_terms : '';	$u_search .= ($topic_id) ? '&amp;t=' . $topic_id : '';	$u_search .= ($author) ? '&amp;author=' . urlencode(htmlspecialchars_decode($author)) : '';	$u_search .= ($author_id) ? '&amp;author_id=' . $author_id : '';	$u_search .= ($u_search_forum) ? '&amp;fid%5B%5D=' . $u_search_forum : '';	$u_search .= (!$search_child) ? '&amp;sc=0' : '';	$u_search .= ($search_fields != 'all') ? '&amp;sf=' . $search_fields : '';	$u_search .= ($return_chars != 300) ? '&amp;ch=' . $return_chars : '';	$template->assign_vars(array(		'SEARCH_TITLE'		=> $l_search_title,		'SEARCH_MATCHES'	=> $l_search_matches,		'SEARCH_WORDS'		=> $search->search_query,		'IGNORED_WORDS'		=> (sizeof($search->common_words)) ? implode(' ', $search->common_words) : '',		'PAGINATION'		=> generate_pagination($u_search, $total_match_count, $per_page, $start),		'PAGE_NUMBER'		=> on_page($total_match_count, $per_page, $start),		'TOTAL_MATCHES'		=> $total_match_count,		'SEARCH_IN_RESULTS'	=> ($search_id) ? false : true,		'S_SELECT_SORT_DIR'		=> $s_sort_dir,		'S_SELECT_SORT_KEY'		=> $s_sort_key,		'S_SELECT_SORT_DAYS'	=> $s_limit_days,		'S_SEARCH_ACTION'		=> $u_search,		'S_SHOW_TOPICS'			=> ($show_results == 'posts') ? false : true,		'GOTO_PAGE_IMG'		=> $user->img('icon_post_target', 'GOTO_PAGE'),		'NEWEST_POST_IMG'	=> $user->img('icon_topic_newest', 'VIEW_NEWEST_POST'),		'REPORTED_IMG'		=> $user->img('icon_topic_reported', 'TOPIC_REPORTED'),		'UNAPPROVED_IMG'	=> $user->img('icon_topic_unapproved', 'TOPIC_UNAPPROVED'),		'LAST_POST_IMG'		=> $user->img('icon_topic_latest', 'VIEW_LATEST_POST'),		'U_SEARCH_WORDS'	=> $u_search,	));	if ($sql_where)	{		if ($show_results == 'posts')		{			// @todo Joining this query to the one below?			$sql = 'SELECT zebra_id, friend, foe				FROM ' . ZEBRA_TABLE . '				WHERE user_id = ' . $user->data['user_id'];			$result = $db->sql_query($sql);			$zebra = array();			while ($row = $db->sql_fetchrow($result))			{				$zebra[($row['friend']) ? 'friend' : 'foe'][] = $row['zebra_id'];			}			$db->sql_freeresult($result);			$sql = 'SELECT p.*, f.forum_id, f.forum_name, t.*, u.username, u.username_clean, u.user_sig, u.user_sig_bbcode_uid, u.user_colour				FROM ' . POSTS_TABLE . ' p					LEFT JOIN ' . TOPICS_TABLE . ' t ON (p.topic_id = t.topic_id)					LEFT JOIN ' . FORUMS_TABLE . ' f ON (p.forum_id = f.forum_id)					LEFT JOIN ' . USERS_TABLE . " u ON (p.poster_id = u.user_id)				WHERE $sql_where";		}		else		{			$sql_from = TOPICS_TABLE . ' t				LEFT JOIN ' . FORUMS_TABLE . ' f ON (f.forum_id = t.forum_id)				' . (($sort_key == 'a') ? ' LEFT JOIN ' . USERS_TABLE . ' u ON (u.user_id = t.topic_poster) ' : '');			$sql_select = 't.*, f.forum_id, f.forum_name';			if ($user->data['is_registered'])			{				if ($config['load_db_track'] && $author_id !== $user->data['user_id'])				{					$sql_from .= ' LEFT JOIN ' . TOPICS_POSTED_TABLE . ' tp ON (tp.user_id = ' . $user->data['user_id'] . '						AND t.topic_id = tp.topic_id)';					$sql_select .= ', tp.topic_posted';				}				if ($config['load_db_lastread'])				{					$sql_from .= ' LEFT JOIN ' . TOPICS_TRACK_TABLE . ' tt ON (tt.user_id = ' . $user->data['user_id'] . '							AND t.topic_id = tt.topic_id)						LEFT JOIN ' . FORUMS_TRACK_TABLE . ' ft ON (ft.user_id = ' . $user->data['user_id'] . '							AND ft.forum_id = f.forum_id)';					$sql_select .= ', tt.mark_time, ft.mark_time as f_mark_time';				}			}			if ($config['load_anon_lastread'] || ($user->data['is_registered'] && !$config['load_db_lastread']))			{				$tracking_topics = (isset($_COOKIE[$config['cookie_name'] . '_track'])) ? ((STRIP) ? stripslashes($_COOKIE[$config['cookie_name'] . '_track']) : $_COOKIE[$config['cookie_name'] . '_track']) : '';				$tracking_topics = ($tracking_topics) ? tracking_unserialize($tracking_topics) : array();			}			$sql = "SELECT $sql_select				FROM $sql_from				WHERE $sql_where";		}		$sql .= ' ORDER BY ' . $sort_by_sql[$sort_key] . ' ' . (($sort_dir == 'd') ? 'DESC' : 'ASC');		$result = $db->sql_query($sql);		$result_topic_id = 0;		$rowset = array();		if ($show_results == 'topics')		{			$forums = $rowset = $shadow_topic_list = array();			while ($row = $db->sql_fetchrow($result))			{				$row['forum_id'] = (int) $row['forum_id'];				$row['topic_id'] = (int) $row['topic_id'];				if ($row['topic_status'] == ITEM_MOVED)				{					$shadow_topic_list[$row['topic_moved_id']] = $row['topic_id'];				}				$rowset[$row['topic_id']] = $row;				if (!isset($forums[$row['forum_id']]) && $user->data['is_registered'] && $config['load_db_lastread'])				{					$forums[$row['forum_id']]['mark_time'] = $row['f_mark_time'];				}				$forums[$row['forum_id']]['topic_list'][] = $row['topic_id'];				$forums[$row['forum_id']]['rowset'][$row['topic_id']] = &$rowset[$row['topic_id']];			}			$db->sql_freeresult($result);			// If we have some shadow topics, update the rowset to reflect their topic information			if (sizeof($shadow_topic_list))			{				$sql = 'SELECT *					FROM ' . TOPICS_TABLE . '					WHERE ' . $db->sql_in_set('topic_id', array_keys($shadow_topic_list));				$result = $db->sql_query($sql);				while ($row = $db->sql_fetchrow($result))				{					$orig_topic_id = $shadow_topic_list[$row['topic_id']];					// We want to retain some values					$row = array_merge($row, array(						'topic_moved_id'	=> $rowset[$orig_topic_id]['topic_moved_id'],						'topic_status'		=> $rowset[$orig_topic_id]['topic_status'],						'forum_name'		=> $rowset[$orig_topic_id]['forum_name'])					);					$rowset[$orig_topic_id] = $row;				}				$db->sql_freeresult($result);			}			unset($shadow_topic_list);			foreach ($forums as $forum_id => $forum)			{				if ($user->data['is_registered'] && $config['load_db_lastread'])				{					$topic_tracking_info[$forum_id] = get_topic_tracking($forum_id, $forum['topic_list'], $forum['rowset'], array($forum_id => $forum['mark_time']), ($forum_id) ? false : $forum['topic_list']);				}				else if ($config['load_anon_lastread'] || $user->data['is_registered'])				{					$topic_tracking_info[$forum_id] = get_complete_topic_tracking($forum_id, $forum['topic_list'], ($forum_id) ? false : $forum['topic_list']);					if (!$user->data['is_registered'])					{						$user->data['user_lastmark'] = (isset($tracking_topics['l'])) ? (int) (base_convert($tracking_topics['l'], 36, 10) + $config['board_startdate']) : 0;					}				}			}			unset($forums);		}		else		{			$bbcode_bitfield = $text_only_message = '';			$attach_list = array();			while ($row = $db->sql_fetchrow($result))			{				// We pre-process some variables here for later usage				$row['post_text'] = censor_text($row['post_text']);				$text_only_message = $row['post_text'];				// make list items visible as such				if ($row['bbcode_uid'])				{					$text_only_message = str_replace('[*:' . $row['bbcode_uid'] . ']', '&sdot;&nbsp;', $text_only_message);					// no BBCode in text only message					strip_bbcode($text_only_message, $row['bbcode_uid']);				}				if ($return_chars == -1 || utf8_strlen($text_only_message) < ($return_chars + 3))				{					$row['display_text_only'] = false;					$bbcode_bitfield = $bbcode_bitfield | base64_decode($row['bbcode_bitfield']);					// Does this post have an attachment? If so, add it to the list					if ($row['post_attachment'] && $config['allow_attachments'])					{						$attach_list[$row['forum_id']][] = $row['post_id'];					}				}				else				{					$row['post_text'] = $text_only_message;					$row['display_text_only'] = true;				}				$rowset[] = $row;			}			$db->sql_freeresult($result);			unset($text_only_message);			// Instantiate BBCode if needed			if ($bbcode_bitfield !== '')			{				include_once($phpbb_root_path . 'includes/bbcode.' . $phpEx);				$bbcode = new bbcode(base64_encode($bbcode_bitfield));			}			// Pull attachment data			if (sizeof($attach_list))			{				$use_attach_list = $attach_list;				$attach_list = array();				foreach ($use_attach_list as $forum_id => $_list)				{					if ($auth->acl_get('u_download') && $auth->acl_get('f_download', $forum_id))					{						$attach_list = array_merge($attach_list, $_list);					}				}			}			if (sizeof($attach_list))			{				$sql = 'SELECT *					FROM ' . ATTACHMENTS_TABLE . '					WHERE ' . $db->sql_in_set('post_msg_id', $attach_list) . '						AND in_message = 0					ORDER BY filetime DESC, post_msg_id ASC';				$result = $db->sql_query($sql);				while ($row = $db->sql_fetchrow($result))				{					$attachments[$row['post_msg_id']][] = $row;				}				$db->sql_freeresult($result);			}		}		if ($hilit)		{			// Remove bad highlights			$hilit_array = array_filter(explode('|', $hilit), 'strlen');			foreach ($hilit_array as $key => $value)			{				$hilit_array[$key] = str_replace('\*', '\w*?', preg_quote($value, '#'));				$hilit_array[$key] = preg_replace('#(^|\s)\\\\w\*\?(\s|$)#', '$1\w+?$2', $hilit_array[$key]);			}			$hilit = implode('|', $hilit_array);		}		foreach ($rowset as $row)		{			$forum_id = $row['forum_id'];			$result_topic_id = $row['topic_id'];			$topic_title = censor_text($row['topic_title']);			// we need to select a forum id for this global topic			if (!$forum_id)			{				if (!isset($g_forum_id))				{					// Get a list of forums the user cannot read					$forum_ary = array_unique(array_keys($auth->acl_getf('!f_read', true)));					// Determine first forum the user is able to read (must not be a category)					$sql = 'SELECT forum_id						FROM ' . FORUMS_TABLE . '						WHERE forum_type = ' . FORUM_POST;					if (sizeof($forum_ary))					{						$sql .= ' AND ' . $db->sql_in_set('forum_id', $forum_ary, true);					}					$result = $db->sql_query_limit($sql, 1);					$g_forum_id = (int) $db->sql_fetchfield('forum_id');				}				$u_forum_id = $g_forum_id;			}			else			{				$u_forum_id = $forum_id;			}			$view_topic_url_params = "f=$u_forum_id&amp;t=$result_topic_id" . (($u_hilit) ? "&amp;hilit=$u_hilit" : '');			$view_topic_url = append_sid("{$phpbb_root_path}viewtopic.$phpEx", $view_topic_url_params);			$replies = ($auth->acl_get('m_approve', $forum_id)) ? $row['topic_replies_real'] : $row['topic_replies'];			if ($show_results == 'topics')			{				if ($config['load_db_track'] && $author_id === $user->data['user_id'])				{					$row['topic_posted'] = 1;				}				$folder_img = $folder_alt = $topic_type = '';				topic_status($row, $replies, (isset($topic_tracking_info[$forum_id][$row['topic_id']]) && $row['topic_last_post_time'] > $topic_tracking_info[$forum_id][$row['topic_id']]) ? true : false, $folder_img, $folder_alt, $topic_type);				$unread_topic = (isset($topic_tracking_info[$forum_id][$row['topic_id']]) && $row['topic_last_post_time'] > $topic_tracking_info[$forum_id][$row['topic_id']]) ? true : false;				$topic_unapproved = (!$row['topic_approved'] && $auth->acl_get('m_approve', $forum_id)) ? true : false;				$posts_unapproved = ($row['topic_approved'] && $row['topic_replies'] < $row['topic_replies_real'] && $auth->acl_get('m_approve', $forum_id)) ? true : false;				$u_mcp_queue = ($topic_unapproved || $posts_unapproved) ? append_sid("{$phpbb_root_path}mcp.$phpEx", 'i=queue&amp;mode=' . (($topic_unapproved) ? 'approve_details' : 'unapproved_posts') . "&amp;t=$result_topic_id", true, $user->session_id) : '';				$row['topic_title'] = preg_replace('#(?!<.*)(?<!\w)(' . $hilit . ')(?!\w|[^<>]*(?:</s(?:cript|tyle))?>)#is', '<span class="posthilit">$1</span>', $row['topic_title']);				$tpl_ary = array(					'TOPIC_AUTHOR'				=> get_username_string('username', $row['topic_poster'], $row['topic_first_poster_name'], $row['topic_first_poster_colour']),					'TOPIC_AUTHOR_COLOUR'		=> get_username_string('colour', $row['topic_poster'], $row['topic_first_poster_name'], $row['topic_first_poster_colour']),					'TOPIC_AUTHOR_FULL'			=> get_username_string('full', $row['topic_poster'], $row['topic_first_poster_name'], $row['topic_first_poster_colour']),					'FIRST_POST_TIME'			=> $user->format_date($row['topic_time']),					'LAST_POST_SUBJECT'			=> $row['topic_last_post_subject'],					'LAST_POST_TIME'			=> $user->format_date($row['topic_last_post_time']),					'LAST_VIEW_TIME'			=> $user->format_date($row['topic_last_view_time']),					'LAST_POST_AUTHOR'			=> get_username_string('username', $row['topic_last_poster_id'], $row['topic_last_poster_name'], $row['topic_last_poster_colour']),					'LAST_POST_AUTHOR_COLOUR'	=> get_username_string('colour', $row['topic_last_poster_id'], $row['topic_last_poster_name'], $row['topic_last_poster_colour']),					'LAST_POST_AUTHOR_FULL'		=> get_username_string('full', $row['topic_last_poster_id'], $row['topic_last_poster_name'], $row['topic_last_poster_colour']),					'PAGINATION'		=> topic_generate_pagination($replies, $view_topic_url),					'TOPIC_TYPE'		=> $topic_type,					'TOPIC_FOLDER_IMG'		=> $user->img($folder_img, $folder_alt),					'TOPIC_FOLDER_IMG_SRC'	=> $user->img($folder_img, $folder_alt, false, '', 'src'),					'TOPIC_FOLDER_IMG_ALT'	=> $user->lang[$folder_alt],					'TOPIC_FOLDER_IMG_WIDTH'=> $user->img($folder_img, '', false, '', 'width'),					'TOPIC_FOLDER_IMG_HEIGHT'	=> $user->img($folder_img, '', false, '', 'height'),					'TOPIC_ICON_IMG'		=> (!empty($icons[$row['icon_id']])) ? $icons[$row['icon_id']]['img'] : '',					'TOPIC_ICON_IMG_WIDTH'	=> (!empty($icons[$row['icon_id']])) ? $icons[$row['icon_id']]['width'] : '',					'TOPIC_ICON_IMG_HEIGHT'	=> (!empty($icons[$row['icon_id']])) ? $icons[$row['icon_id']]['height'] : '',					'ATTACH_ICON_IMG'		=> ($auth->acl_get('u_download') && $auth->acl_get('f_download', $forum_id) && $row['topic_attachment']) ? $user->img('icon_topic_attach', $user->lang['TOTAL_ATTACHMENTS']) : '',					'UNAPPROVED_IMG'		=> ($topic_unapproved || $posts_unapproved) ? $user->img('icon_topic_unapproved', ($topic_unapproved) ? 'TOPIC_UNAPPROVED' : 'POSTS_UNAPPROVED') : '',					'S_TOPIC_GLOBAL'		=> (!$forum_id) ? true : false,					'S_TOPIC_TYPE'			=> $row['topic_type'],					'S_USER_POSTED'			=> (!empty($row['topic_posted'])) ? true : false,					'S_UNREAD_TOPIC'		=> $unread_topic,					'S_TOPIC_REPORTED'		=> (!empty($row['topic_reported']) && $auth->acl_get('m_report', $forum_id)) ? true : false,					'S_TOPIC_UNAPPROVED'	=> $topic_unapproved,					'S_POSTS_UNAPPROVED'	=> $posts_unapproved,					'U_LAST_POST'			=> append_sid("{$phpbb_root_path}viewtopic.$phpEx", $view_topic_url_params . '&amp;p=' . $row['topic_last_post_id']) . '#p' . $row['topic_last_post_id'],					'U_LAST_POST_AUTHOR'	=> get_username_string('profile', $row['topic_last_poster_id'], $row['topic_last_poster_name'], $row['topic_last_poster_colour']),					'U_TOPIC_AUTHOR'		=> get_username_string('profile', $row['topic_poster'], $row['topic_first_poster_name'], $row['topic_first_poster_colour']),					'U_NEWEST_POST'			=> append_sid("{$phpbb_root_path}viewtopic.$phpEx", $view_topic_url_params . '&amp;view=unread') . '#unread',					'U_MCP_REPORT'			=> append_sid("{$phpbb_root_path}mcp.$phpEx", 'i=reports&amp;mode=reports&amp;t=' . $result_topic_id, true, $user->session_id),					'U_MCP_QUEUE'			=> $u_mcp_queue,				);			}			else			{				if ((isset($zebra['foe']) && in_array($row['poster_id'], $zebra['foe'])) && (!$view || $view != 'show' || $post_id != $row['post_id']))				{					$template->assign_block_vars('searchresults', array(						'S_IGNORE_POST' => true,						'L_IGNORE_POST' => sprintf($user->lang['POST_BY_FOE'], $row['username'], "<a href=\"$u_search&amp;start=$start&amp;p=" . $row['post_id'] . '&amp;view=show#p' . $row['post_id'] . '">', '</a>'))					);					continue;				}				// Replace naughty words such as farty pants				$row['post_subject'] = censor_text($row['post_subject']);				if ($row['display_text_only'])				{					// now find context for the searched words					$row['post_text'] = get_context($row['post_text'], array_filter(explode('|', $hilit), 'strlen'), $return_chars);					$row['post_text'] = bbcode_nl2br($row['post_text']);				}				else				{					// Second parse bbcode here					if ($row['bbcode_bitfield'])					{						$bbcode->bbcode_second_pass($row['post_text'], $row['bbcode_uid'], $row['bbcode_bitfield']);					}					$row['post_text'] = bbcode_nl2br($row['post_text']);					$row['post_text'] = smiley_text($row['post_text']);					if (!empty($attachments[$row['post_id']]))					{						parse_attachments($forum_id, $row['post_text'], $attachments[$row['post_id']], $update_count);						// we only display inline attachments						unset($attachments[$row['post_id']]);					}				}				if ($hilit)				{					// post highlighting					$row['post_text'] = preg_replace('#(?!<.*)(?<!\w)(' . $hilit . ')(?!\w|[^<>]*(?:</s(?:cript|tyle))?>)#is', '<span class="posthilit">$1</span>', $row['post_text']);					$row['post_subject'] = preg_replace('#(?!<.*)(?<!\w)(' . $hilit . ')(?!\w|[^<>]*(?:</s(?:cript|tyle))?>)#is', '<span class="posthilit">$1</span>', $row['post_subject']);				}				$tpl_ary = array(					'POST_AUTHOR_FULL'		=> get_username_string('full', $row['poster_id'], $row['username'], $row['user_colour'], $row['post_username']),					'POST_AUTHOR_COLOUR'	=> get_username_string('colour', $row['poster_id'], $row['username'], $row['user_colour'], $row['post_username']),					'POST_AUTHOR'			=> get_username_string('username', $row['poster_id'], $row['username'], $row['user_colour'], $row['post_username']),					'U_POST_AUTHOR'			=> get_username_string('profile', $row['poster_id'], $row['username'], $row['user_colour'], $row['post_username']),					'POST_SUBJECT'		=> $row['post_subject'],					'POST_DATE'			=> (!empty($row['post_time'])) ? $user->format_date($row['post_time']) : '',					'MESSAGE'			=> $row['post_text']				);			}			$template->assign_block_vars('searchresults', array_merge($tpl_ary, array(				'FORUM_ID'			=> $forum_id,				'TOPIC_ID'			=> $result_topic_id,				'POST_ID'			=> ($show_results == 'posts') ? $row['post_id'] : false,				'FORUM_TITLE'		=> $row['forum_name'],				'TOPIC_TITLE'		=> $topic_title,				'TOPIC_REPLIES'		=> $replies,				'TOPIC_VIEWS'		=> $row['topic_views'],				'U_VIEW_TOPIC'		=> $view_topic_url,				'U_VIEW_FORUM'		=> append_sid("{$phpbb_root_path}viewforum.$phpEx", 'f=' . $forum_id),				'U_VIEW_POST'		=> (!empty($row['post_id'])) ? append_sid("{$phpbb_root_path}viewtopic.$phpEx", "f=$forum_id&amp;t=" . $row['topic_id'] . '&amp;p=' . $row['post_id'] . (($u_hilit) ? '&amp;hilit=' . $u_hilit : '')) . '#p' . $row['post_id'] : '')			));		}		if ($topic_id && ($topic_id == $result_topic_id))		{			$template->assign_vars(array(				'SEARCH_TOPIC'		=> $topic_title,				'U_SEARCH_TOPIC'	=> $view_topic_url			));		}	}	unset($rowset);	page_header(($l_search_title) ? $l_search_title : $user->lang['SEARCH']);	$template->set_filenames(array(		'body' => 'search_results.html')	);	make_jumpbox(append_sid("{$phpbb_root_path}viewforum.$phpEx"));	page_footer();}// Search forum$s_forums = '';$sql = 'SELECT f.forum_id, f.forum_name, f.parent_id, f.forum_type, f.left_id, f.right_id, f.forum_password, f.enable_indexing, fa.user_id	FROM ' . FORUMS_TABLE . ' f	LEFT JOIN ' . FORUMS_ACCESS_TABLE . " fa ON (fa.forum_id = f.forum_id		AND fa.session_id = '" . $db->sql_escape($user->session_id) . "')	ORDER BY f.left_id ASC";$result = $db->sql_query($sql);$right = $cat_right = $padding_inc = 0;$padding = $forum_list = $holding = '';$pad_store = array('0' => '');while ($row = $db->sql_fetchrow($result)){	if ($row['forum_type'] == FORUM_CAT && ($row['left_id'] + 1 == $row['right_id']))	{		// Non-postable forum with no subforums, don't display		continue;	}	if ($row['forum_type'] == FORUM_POST && ($row['left_id'] + 1 == $row['right_id']) && !$row['enable_indexing'])	{		// Postable forum with no subforums and indexing disabled, don't display		continue;	}	if ($row['forum_type'] == FORUM_LINK || ($row['forum_password'] && !$row['user_id']))	{		// if this forum is a link or password protected (user has not entered the password yet) then skip to the next branch		continue;	}	if ($row['left_id'] < $right)	{		$padding .= '&nbsp; &nbsp;';		$pad_store[$row['parent_id']] = $padding;	}	else if ($row['left_id'] > $right + 1)	{		if (isset($pad_store[$row['parent_id']]))		{			$padding = $pad_store[$row['parent_id']];		}		else		{			continue;		}	}	$right = $row['right_id'];	if ($auth->acl_gets('!f_search', '!f_list', $row['forum_id']))	{		// if the user does not have permissions to search or see this forum skip only this forum/category		continue;	}	$selected = (in_array($row['forum_id'], $search_forum)) ? ' selected="selected"' : '';	if ($row['left_id'] > $cat_right)	{		// make sure we don't forget anything		$s_forums .= $holding;		$holding = '';	}	if ($row['right_id'] - $row['left_id'] > 1)	{		$cat_right = max($cat_right, $row['right_id']);		$holding .= '<option value="' . $row['forum_id'] . '"' . $selected . '>' . $padding . $row['forum_name'] . '</option>';	}	else	{		$s_forums .= $holding . '<option value="' . $row['forum_id'] . '"' . $selected . '>' . $padding . $row['forum_name'] . '</option>';		$holding = '';	}}if ($holding){	$s_forums .= $holding;}$db->sql_freeresult($result);unset($pad_store);if (!$s_forums){	trigger_error('NO_SEARCH');}// Number of chars returned$s_characters = '<option value="-1">' . $user->lang['ALL_AVAILABLE'] . '</option>';$s_characters .= '<option value="0">0</option>';$s_characters .= '<option value="25">25</option>';$s_characters .= '<option value="50">50</option>';for ($i = 100; $i <= 1000 ; $i += 100){	$selected = ($i == 300) ? ' selected="selected"' : '';	$s_characters .= '<option value="' . $i . '"' . $selected . '>' . $i . '</option>';}$s_hidden_fields = array('t' => $topic_id);if ($_SID){	$s_hidden_fields['sid'] = $_SID;}if (!empty($_EXTRA_URL)){	foreach ($_EXTRA_URL as $url_param)	{		$url_param = explode('=', $url_param, 2);		$s_hidden_fields[$url_param[0]] = $url_param[1];	}}$template->assign_vars(array(	'S_SEARCH_ACTION'		=> append_sid("{$phpbb_root_path}search.$phpEx", false, true, 0), // We force no ?sid= appending by using 0	'S_HIDDEN_FIELDS'		=> build_hidden_fields($s_hidden_fields),	'S_CHARACTER_OPTIONS'	=> $s_characters,	'S_FORUM_OPTIONS'		=> $s_forums,	'S_SELECT_SORT_DIR'		=> $s_sort_dir,	'S_SELECT_SORT_KEY'		=> $s_sort_key,	'S_SELECT_SORT_DAYS'	=> $s_limit_days,	'S_IN_SEARCH'			=> true,));// only show recent searches to search administratorsif ($auth->acl_get('a_search')){	// Handle large objects differently for Oracle and MSSQL	switch ($db->sql_layer)	{		case 'oracle':			$sql = 'SELECT search_time, search_keywords				FROM ' . SEARCH_RESULTS_TABLE . '				WHERE dbms_lob.getlength(search_keywords) > 0				ORDER BY search_time DESC';		break;		case 'mssql':		case 'mssql_odbc':		case 'mssqlnative':			$sql = 'SELECT search_time, search_keywords				FROM ' . SEARCH_RESULTS_TABLE . '				WHERE DATALENGTH(search_keywords) > 0				ORDER BY search_time DESC';		break;		default:			$sql = 'SELECT search_time, search_keywords				FROM ' . SEARCH_RESULTS_TABLE . '				WHERE search_keywords <> \'\'				ORDER BY search_time DESC';		break;	}	$result = $db->sql_query_limit($sql, 5);	while ($row = $db->sql_fetchrow($result))	{		$keywords = $row['search_keywords'];		$template->assign_block_vars('recentsearch', array(			'KEYWORDS'	=> $keywords,			'TIME'		=> $user->format_date($row['search_time']),			'U_KEYWORDS'	=> append_sid("{$phpbb_root_path}search.$phpEx", 'keywords=' . urlencode(htmlspecialchars_decode($keywords)))		));	}	$db->sql_freeresult($result);}// Output the basic pagepage_header($user->lang['SEARCH']);$template->set_filenames(array(	'body' => 'search_body.html'));make_jumpbox(append_sid("{$phpbb_root_path}viewforum.$phpEx"));page_footer();?>
<?php/**** @package ucp* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @ignore*/if (!defined('IN_PHPBB')){	exit;}/*** View message folder* Called from ucp_pm with mode == 'view' && action == 'view_folder'*/function view_folder($id, $mode, $folder_id, $folder){	global $user, $template, $auth, $db, $cache;	global $phpbb_root_path, $config, $phpEx;	$submit_export = (isset($_POST['submit_export'])) ? true : false;	$folder_info = get_pm_from($folder_id, $folder, $user->data['user_id']);	if (!$submit_export)	{		$user->add_lang('viewforum');		// Grab icons		$icons = $cache->obtain_icons();		$color_rows = array('marked', 'replied');		// only show the friend/foe color rows if the module is enabled		$zebra_enabled = false;		$_module = new p_master();		$_module->list_modules('ucp');		$_module->set_active('zebra');		$zebra_enabled = ($_module->active_module === false) ? false : true;		unset($_module);		if ($zebra_enabled)		{			$color_rows = array_merge($color_rows, array('friend', 'foe'));		}		foreach ($color_rows as $var)		{			$template->assign_block_vars('pm_colour_info', array(				'IMG'	=> $user->img("pm_{$var}", ''),				'CLASS'	=> "pm_{$var}_colour",				'LANG'	=> $user->lang[strtoupper($var) . '_MESSAGE'])			);		}		$mark_options = array('mark_important', 'delete_marked');		// Minimise edits		if (!$auth->acl_get('u_pm_delete') && $key = array_search('delete_marked', $mark_options))		{			unset($mark_options[$key]);		}		$s_mark_options = '';		foreach ($mark_options as $mark_option)		{			$s_mark_options .= '<option value="' . $mark_option . '">' . $user->lang[strtoupper($mark_option)] . '</option>';		}		// We do the folder moving options here too, for template authors to use...		$s_folder_move_options = '';		if ($folder_id != PRIVMSGS_NO_BOX && $folder_id != PRIVMSGS_OUTBOX)		{			foreach ($folder as $f_id => $folder_ary)			{				if ($f_id == PRIVMSGS_OUTBOX || $f_id == PRIVMSGS_SENTBOX || $f_id == $folder_id)				{					continue;				}				$s_folder_move_options .= '<option' . (($f_id != PRIVMSGS_INBOX) ? ' class="sep"' : '') . ' value="' . $f_id . '">';				$s_folder_move_options .= sprintf($user->lang['MOVE_MARKED_TO_FOLDER'], $folder_ary['folder_name']);				$s_folder_move_options .= (($folder_ary['unread_messages']) ? ' [' . $folder_ary['unread_messages'] . '] ' : '') . '</option>';			}		}		$friend = $foe = array();		// Get friends and foes		$sql = 'SELECT *			FROM ' . ZEBRA_TABLE . '			WHERE user_id = ' . $user->data['user_id'];		$result = $db->sql_query($sql);		while ($row = $db->sql_fetchrow($result))		{			$friend[$row['zebra_id']] = $row['friend'];			$foe[$row['zebra_id']] = $row['foe'];		}		$db->sql_freeresult($result);		$template->assign_vars(array(			'S_MARK_OPTIONS'		=> $s_mark_options,			'S_MOVE_MARKED_OPTIONS'	=> $s_folder_move_options)		);		// Okay, lets dump out the page ...		if (sizeof($folder_info['pm_list']))		{			$address_list = array();			// Build Recipient List if in outbox/sentbox - max two additional queries			if ($folder_id == PRIVMSGS_OUTBOX || $folder_id == PRIVMSGS_SENTBOX)			{				$address_list = get_recipient_strings($folder_info['rowset']);			}			foreach ($folder_info['pm_list'] as $message_id)			{				$row = &$folder_info['rowset'][$message_id];				$folder_img = ($row['pm_unread']) ? 'pm_unread' : 'pm_read';				$folder_alt = ($row['pm_unread']) ? 'NEW_MESSAGES' : 'NO_NEW_MESSAGES';				// Generate all URIs ...				$view_message_url = append_sid("{$phpbb_root_path}ucp.$phpEx", "i=$id&amp;mode=view&amp;f=$folder_id&amp;p=$message_id");				$remove_message_url = append_sid("{$phpbb_root_path}ucp.$phpEx", "i=$id&amp;mode=compose&amp;action=delete&amp;p=$message_id");				$row_indicator = '';				foreach ($color_rows as $var)				{					if (($var != 'friend' && $var != 'foe' && $row['pm_' . $var])						||						(($var == 'friend' || $var == 'foe') && isset(${$var}[$row['author_id']]) && ${$var}[$row['author_id']]))					{						$row_indicator = $var;						break;					}				}				// Send vars to template				$template->assign_block_vars('messagerow', array(					'PM_CLASS'			=> ($row_indicator) ? 'pm_' . $row_indicator . '_colour' : '',					'MESSAGE_AUTHOR_FULL'		=> get_username_string('full', $row['author_id'], $row['username'], $row['user_colour'], $row['username']),					'MESSAGE_AUTHOR_COLOUR'		=> get_username_string('colour', $row['author_id'], $row['username'], $row['user_colour'], $row['username']),					'MESSAGE_AUTHOR'			=> get_username_string('username', $row['author_id'], $row['username'], $row['user_colour'], $row['username']),					'U_MESSAGE_AUTHOR'			=> get_username_string('profile', $row['author_id'], $row['username'], $row['user_colour'], $row['username']),					'FOLDER_ID'			=> $folder_id,					'MESSAGE_ID'		=> $message_id,					'SENT_TIME'			=> $user->format_date($row['message_time']),					'SUBJECT'			=> censor_text($row['message_subject']),					'FOLDER'			=> (isset($folder[$row['folder_id']])) ? $folder[$row['folder_id']]['folder_name'] : '',					'U_FOLDER'			=> (isset($folder[$row['folder_id']])) ? append_sid("{$phpbb_root_path}ucp.$phpEx", 'folder=' . $row['folder_id']) : '',					'PM_ICON_IMG'		=> (!empty($icons[$row['icon_id']])) ? '<img src="' . $config['icons_path'] . '/' . $icons[$row['icon_id']]['img'] . '" width="' . $icons[$row['icon_id']]['width'] . '" height="' . $icons[$row['icon_id']]['height'] . '" alt="" title="" />' : '',					'PM_ICON_URL'		=> (!empty($icons[$row['icon_id']])) ? $config['icons_path'] . '/' . $icons[$row['icon_id']]['img'] : '',					'FOLDER_IMG'		=> $user->img($folder_img, $folder_alt),					'FOLDER_IMG_SRC'	=> $user->img($folder_img, $folder_alt, false, '', 'src'),					'PM_IMG'			=> ($row_indicator) ? $user->img('pm_' . $row_indicator, '') : '',					'ATTACH_ICON_IMG'	=> ($auth->acl_get('u_pm_download') && $row['message_attachment'] && $config['allow_pm_attach']) ? $user->img('icon_topic_attach', $user->lang['TOTAL_ATTACHMENTS']) : '',					'S_PM_UNREAD'		=> ($row['pm_unread']) ? true : false,					'S_PM_DELETED'		=> ($row['pm_deleted']) ? true : false,					'S_PM_REPORTED'		=> (isset($row['report_id'])) ? true : false,					'S_AUTHOR_DELETED'	=> ($row['author_id'] == ANONYMOUS) ? true : false,					'U_VIEW_PM'			=> ($row['pm_deleted']) ? '' : $view_message_url,					'U_REMOVE_PM'		=> ($row['pm_deleted']) ? $remove_message_url : '',					'U_MCP_REPORT'		=> (isset($row['report_id'])) ? append_sid("{$phpbb_root_path}mcp.$phpEx", 'i=pm_reports&amp;mode=pm_report_details&amp;r=' . $row['report_id']) : '',					'RECIPIENTS'		=> ($folder_id == PRIVMSGS_OUTBOX || $folder_id == PRIVMSGS_SENTBOX) ? implode(', ', $address_list[$message_id]) : '')				);			}			unset($folder_info['rowset']);			$template->assign_vars(array(				'S_SHOW_RECIPIENTS'		=> ($folder_id == PRIVMSGS_OUTBOX || $folder_id == PRIVMSGS_SENTBOX) ? true : false,				'S_SHOW_COLOUR_LEGEND'	=> true,				'REPORTED_IMG'			=> $user->img('icon_topic_reported', 'PM_REPORTED'),				'S_PM_ICONS'			=> ($config['enable_pm_icons']) ? true : false)			);		}	}	else	{		$export_type = request_var('export_option', '');		$enclosure = request_var('enclosure', '');		$delimiter = request_var('delimiter', '');		if ($export_type == 'CSV' && ($delimiter === '' || $enclosure === ''))		{			$template->assign_var('PROMPT', true);		}		else		{			// Build Recipient List if in outbox/sentbox			$address_temp = $address = $data = array();			if ($folder_id == PRIVMSGS_OUTBOX || $folder_id == PRIVMSGS_SENTBOX)			{				foreach ($folder_info['rowset'] as $message_id => $row)				{					$address_temp[$message_id] = rebuild_header(array('to' => $row['to_address'], 'bcc' => $row['bcc_address']));					$address[$message_id] = array();				}			}			foreach ($folder_info['pm_list'] as $message_id)			{				$row = &$folder_info['rowset'][$message_id];				include_once($phpbb_root_path . 'includes/functions_posting.' . $phpEx);				$sql = 'SELECT p.message_text, p.bbcode_uid					FROM ' . PRIVMSGS_TO_TABLE . ' t, ' . PRIVMSGS_TABLE . ' p, ' . USERS_TABLE . ' u					WHERE t.user_id = ' . $user->data['user_id'] . "						AND p.author_id = u.user_id						AND t.folder_id = $folder_id						AND t.msg_id = p.msg_id						AND p.msg_id = $message_id";				$result = $db->sql_query_limit($sql, 1);				$message_row = $db->sql_fetchrow($result);				$db->sql_freeresult($result);				$_types = array('u', 'g');				foreach ($_types as $ug_type)				{					if (isset($address_temp[$message_id][$ug_type]) && sizeof($address_temp[$message_id][$ug_type]))					{						if (!isset($address[$message_id][$ug_type]))						{							$address[$message_id][$ug_type] = array();						}						if ($ug_type == 'u')						{							$sql = 'SELECT user_id as id, username as name								FROM ' . USERS_TABLE . '								WHERE ';						}						else						{							$sql = 'SELECT group_id as id, group_name as name								FROM ' . GROUPS_TABLE . '								WHERE ';						}						$sql .= $db->sql_in_set(($ug_type == 'u') ? 'user_id' : 'group_id', array_map('intval', array_keys($address_temp[$message_id][$ug_type])));						$result = $db->sql_query($sql);						while ($info_row = $db->sql_fetchrow($result))						{							$address[$message_id][$ug_type][$address_temp[$message_id][$ug_type][$info_row['id']]][] = $info_row['name'];							unset($address_temp[$message_id][$ug_type][$info_row['id']]);						}						$db->sql_freeresult($result);					}				}				// There is the chance that all recipients of the message got deleted. To avoid creating 				// exports without recipients, we add a bogus "undisclosed recipient".				if (!(isset($address[$message_id]['g']) && sizeof($address[$message_id]['g'])) && 				    !(isset($address[$message_id]['u']) && sizeof($address[$message_id]['u'])))				{					$address[$message_id]['u'] = array();					$address[$message_id]['u']['to'] = array();					$address[$message_id]['u']['to'][] = $user->lang['UNDISCLOSED_RECIPIENT'];				}				decode_message($message_row['message_text'], $message_row['bbcode_uid']);								$data[] = array(					'subject'	=> censor_text($row['message_subject']),					'sender'	=> $row['username'],					// ISO 8601 date. For PHP4 we are able to hardcode the timezone because $user->format_date() does not set it.					'date'		=> $user->format_date($row['message_time'], (PHP_VERSION >= 5) ? 'c' : "Y-m-d\TH:i:s+00:00", true),					'to'		=> ($folder_id == PRIVMSGS_OUTBOX || $folder_id == PRIVMSGS_SENTBOX) ? $address[$message_id] : '',					'message'	=> $message_row['message_text']				);			}			switch ($export_type)			{				case 'CSV':				case 'CSV_EXCEL':					$mimetype = 'text/csv';					$filetype = 'csv';					if ($export_type == 'CSV_EXCEL')					{						$enclosure = '"';						$delimiter = ',';						$newline = "\r\n";					}					else					{						$newline = "\n";					}					$string = '';					foreach ($data as $value)					{						$recipients = $value['to'];						$value['to'] = $value['bcc'] = '';						if (is_array($recipients))						{							foreach ($recipients as $values)							{								$value['bcc'] .= (isset($values['bcc']) && is_array($values['bcc'])) ? ',' . implode(',', $values['bcc']) : '';								$value['to'] .= (isset($values['to']) && is_array($values['to'])) ? ',' . implode(',', $values['to']) : '';							}							// Remove the commas which will appear before the first entry.							$value['to'] = substr($value['to'], 1);							$value['bcc'] = substr($value['bcc'], 1);						}						foreach ($value as $tag => $text)						{							$cell = str_replace($enclosure, $enclosure . $enclosure, $text);							if (strpos($cell, $enclosure) !== false || strpos($cell, $delimiter) !== false || strpos($cell, $newline) !== false)							{								$string .= $enclosure . $text . $enclosure . $delimiter;							}							else							{								$string .= $cell . $delimiter;							}						}						$string = substr($string, 0, -1) . $newline;					}				break;				case 'XML':					$mimetype = 'application/xml';					$filetype = 'xml';					$string = '<?xml version="1.0"?>' . "\n";					$string .= "<phpbb>\n";					foreach ($data as $value)					{						$string .= "\t<privmsg>\n";						if (is_array($value['to']))						{							foreach ($value['to'] as $key => $values)							{								foreach ($values as $type => $types)								{									foreach ($types as $name)									{										$string .= "\t\t<recipient type=\"$type\" status=\"$key\">$name</recipient>\n";									}								}							}						}						unset($value['to']);						foreach ($value as $tag => $text)						{							$string .= "\t\t<$tag>$text</$tag>\n";						}						$string .= "\t</privmsg>\n";					}					$string .= '</phpbb>';				break;			}			header('Pragma: no-cache');			header("Content-Type: $mimetype; name=\"data.$filetype\"");			header("Content-disposition: attachment; filename=data.$filetype");			echo $string;			exit;		}	}}/*** Get Messages from folder/user*/function get_pm_from($folder_id, $folder, $user_id){	global $user, $db, $template, $config, $auth, $phpbb_root_path, $phpEx;	$start = request_var('start', 0);	// Additional vars later, pm ordering is mostly different from post ordering. :/	$sort_days	= request_var('st', 0);	$sort_key	= request_var('sk', 't');	$sort_dir	= request_var('sd', 'd');	// PM ordering options	$limit_days = array(0 => $user->lang['ALL_MESSAGES'], 1 => $user->lang['1_DAY'], 7 => $user->lang['7_DAYS'], 14 => $user->lang['2_WEEKS'], 30 => $user->lang['1_MONTH'], 90 => $user->lang['3_MONTHS'], 180 => $user->lang['6_MONTHS'], 365 => $user->lang['1_YEAR']);	// No sort by Author for sentbox/outbox (already only author available)	// Also, sort by msg_id for the time - private messages are not as prone to errors as posts are.	if ($folder_id == PRIVMSGS_OUTBOX || $folder_id == PRIVMSGS_SENTBOX)	{		$sort_by_text = array('t' => $user->lang['POST_TIME'], 's' => $user->lang['SUBJECT']);		$sort_by_sql = array('t' => 'p.message_time', 's' => array('p.message_subject', 'p.message_time'));	}	else	{		$sort_by_text = array('a' => $user->lang['AUTHOR'], 't' => $user->lang['POST_TIME'], 's' => $user->lang['SUBJECT']);		$sort_by_sql = array('a' => array('u.username_clean', 'p.message_time'), 't' => 'p.message_time', 's' => array('p.message_subject', 'p.message_time'));	}	$s_limit_days = $s_sort_key = $s_sort_dir = $u_sort_param = '';	gen_sort_selects($limit_days, $sort_by_text, $sort_days, $sort_key, $sort_dir, $s_limit_days, $s_sort_key, $s_sort_dir, $u_sort_param);	$folder_sql = 't.folder_id = ' . (int) $folder_id;	// Limit pms to certain time frame, obtain correct pm count	if ($sort_days)	{		$min_post_time = time() - ($sort_days * 86400);		if (isset($_POST['sort']))		{			$start = 0;		}		$sql = 'SELECT COUNT(t.msg_id) AS pm_count			FROM ' . PRIVMSGS_TO_TABLE . ' t, ' . PRIVMSGS_TABLE . " p			WHERE $folder_sql				AND t.user_id = $user_id				AND t.msg_id = p.msg_id				AND p.message_time >= $min_post_time";		$result = $db->sql_query_limit($sql, 1);		$pm_count = (int) $db->sql_fetchfield('pm_count');		$db->sql_freeresult($result);		$sql_limit_time = "AND p.message_time >= $min_post_time";	}	else	{		$pm_count = (!empty($folder[$folder_id]['num_messages'])) ? $folder[$folder_id]['num_messages'] : 0;		$sql_limit_time = '';	}	$template->assign_vars(array(		'PAGINATION'		=> generate_pagination(append_sid("{$phpbb_root_path}ucp.$phpEx", "i=pm&amp;mode=view&amp;action=view_folder&amp;f=$folder_id&amp;$u_sort_param"), $pm_count, $config['topics_per_page'], $start),		'PAGE_NUMBER'		=> on_page($pm_count, $config['topics_per_page'], $start),		'TOTAL_MESSAGES'	=> (($pm_count == 1) ? $user->lang['VIEW_PM_MESSAGE'] : sprintf($user->lang['VIEW_PM_MESSAGES'], $pm_count)),		'POST_IMG'		=> (!$auth->acl_get('u_sendpm')) ? $user->img('button_topic_locked', 'POST_PM_LOCKED') : $user->img('button_pm_new', 'POST_NEW_PM'),		'S_NO_AUTH_SEND_MESSAGE'	=> !$auth->acl_get('u_sendpm'),		'S_SELECT_SORT_DIR'		=> $s_sort_dir,		'S_SELECT_SORT_KEY'		=> $s_sort_key,		'S_SELECT_SORT_DAYS'	=> $s_limit_days,		'S_TOPIC_ICONS'			=> ($config['enable_pm_icons']) ? true : false,		'U_POST_NEW_TOPIC'	=> ($auth->acl_get('u_sendpm')) ? append_sid("{$phpbb_root_path}ucp.$phpEx", 'i=pm&amp;mode=compose') : '',		'S_PM_ACTION'		=> append_sid("{$phpbb_root_path}ucp.$phpEx", "i=pm&amp;mode=view&amp;action=view_folder&amp;f=$folder_id" . (($start !== 0) ? "&amp;start=$start" : '')),	));	// Grab all pm data	$rowset = $pm_list = array();	// If the user is trying to reach late pages, start searching from the end	$store_reverse = false;	$sql_limit = $config['topics_per_page'];	if ($start > $pm_count / 2)	{		$store_reverse = true;		if ($start + $config['topics_per_page'] > $pm_count)		{			$sql_limit = min($config['topics_per_page'], max(1, $pm_count - $start));		}		// Select the sort order		$direction = ($sort_dir == 'd') ? 'ASC' : 'DESC';		$sql_start = max(0, $pm_count - $sql_limit - $start);	}	else	{		// Select the sort order		$direction = ($sort_dir == 'd') ? 'DESC' : 'ASC';		$sql_start = $start;	}	// Sql sort order	if (is_array($sort_by_sql[$sort_key]))	{		$sql_sort_order = implode(' ' . $direction . ', ', $sort_by_sql[$sort_key]) . ' ' . $direction;	}	else	{		$sql_sort_order = $sort_by_sql[$sort_key] . ' ' . $direction;	}	$sql = 'SELECT t.*, p.root_level, p.message_time, p.message_subject, p.icon_id, p.to_address, p.message_attachment, p.bcc_address, u.username, u.username_clean, u.user_colour, p.message_reported		FROM ' . PRIVMSGS_TO_TABLE . ' t, ' . PRIVMSGS_TABLE . ' p, ' . USERS_TABLE . " u		WHERE t.user_id = $user_id			AND p.author_id = u.user_id			AND $folder_sql			AND t.msg_id = p.msg_id			$sql_limit_time		ORDER BY $sql_sort_order";	$result = $db->sql_query_limit($sql, $sql_limit, $sql_start);	$pm_reported = array();	while ($row = $db->sql_fetchrow($result))	{		$rowset[$row['msg_id']] = $row;		$pm_list[] = $row['msg_id'];		if ($row['message_reported'])		{			$pm_reported[] = $row['msg_id'];		}	}	$db->sql_freeresult($result);	// Fetch the report_ids, if there are any reported pms.	if (!empty($pm_reported) && $auth->acl_getf_global('m_report'))	{		$sql = 'SELECT pm_id, report_id			FROM ' . REPORTS_TABLE . '			WHERE report_closed = 0				AND ' . $db->sql_in_set('pm_id', $pm_reported);		$result = $db->sql_query($sql);		while ($row = $db->sql_fetchrow($result))		{			$rowset[$row['pm_id']]['report_id'] = $row['report_id'];		}		$db->sql_freeresult($result);	}	$pm_list = ($store_reverse) ? array_reverse($pm_list) : $pm_list;	return array(		'pm_count'	=> $pm_count,		'pm_list'	=> $pm_list,		'rowset'	=> $rowset	);}?>
<?php/**** @package acp* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @ignore*/if (!defined('IN_PHPBB')){	exit;}/*** @package acp*/class acp_bots{	var $u_action;	function main($id, $mode)	{		global $config, $db, $user, $auth, $template, $cache;		global $phpbb_root_path, $phpbb_admin_path, $phpEx, $table_prefix;		$action = request_var('action', '');		$submit = (isset($_POST['submit'])) ? true : false;		$mark	= request_var('mark', array(0));		$bot_id	= request_var('id', 0);		if (isset($_POST['add']))		{			$action = 'add';		}		$error = array();		$user->add_lang('acp/bots');		$this->tpl_name = 'acp_bots';		$this->page_title = 'ACP_BOTS';		$form_key = 'acp_bots';		add_form_key($form_key);		if ($submit && !check_form_key($form_key))		{			$error[] = $user->lang['FORM_INVALID'];		}		// User wants to do something, how inconsiderate of them!		switch ($action)		{			case 'activate':				if ($bot_id || sizeof($mark))				{					$sql_id = ($bot_id) ? " = $bot_id" : ' IN (' . implode(', ', $mark) . ')';					$sql = 'UPDATE ' . BOTS_TABLE . "						SET bot_active = 1						WHERE bot_id $sql_id";					$db->sql_query($sql);				}				$cache->destroy('_bots');			break;			case 'deactivate':				if ($bot_id || sizeof($mark))				{					$sql_id = ($bot_id) ? " = $bot_id" : ' IN (' . implode(', ', $mark) . ')';					$sql = 'UPDATE ' . BOTS_TABLE . "						SET bot_active = 0						WHERE bot_id $sql_id";					$db->sql_query($sql);				}				$cache->destroy('_bots');			break;			case 'delete':				if ($bot_id || sizeof($mark))				{					if (confirm_box(true))					{						// We need to delete the relevant user, usergroup and bot entries ...						$sql_id = ($bot_id) ? " = $bot_id" : ' IN (' . implode(', ', $mark) . ')';						$sql = 'SELECT bot_name, user_id							FROM ' . BOTS_TABLE . "							WHERE bot_id $sql_id";						$result = $db->sql_query($sql);						$user_id_ary = $bot_name_ary = array();						while ($row = $db->sql_fetchrow($result))						{							$user_id_ary[] = (int) $row['user_id'];							$bot_name_ary[] = $row['bot_name'];						}						$db->sql_freeresult($result);						$db->sql_transaction('begin');						$sql = 'DELETE FROM ' . BOTS_TABLE . "							WHERE bot_id $sql_id";						$db->sql_query($sql);						if (sizeof($user_id_ary))						{							$_tables = array(USERS_TABLE, USER_GROUP_TABLE);							foreach ($_tables as $table)							{								$sql = "DELETE FROM $table									WHERE " . $db->sql_in_set('user_id', $user_id_ary);								$db->sql_query($sql);							}						}						$db->sql_transaction('commit');						$cache->destroy('_bots');						add_log('admin', 'LOG_BOT_DELETE', implode(', ', $bot_name_ary));						trigger_error($user->lang['BOT_DELETED'] . adm_back_link($this->u_action));					}					else					{						confirm_box(false, $user->lang['CONFIRM_OPERATION'], build_hidden_fields(array(							'mark'		=> $mark,							'id'		=> $bot_id,							'mode'		=> $mode,							'action'	=> $action))						);					}				}			break;			case 'edit':			case 'add':				include_once($phpbb_root_path . 'includes/functions_user.' . $phpEx);				$bot_row = array(					'bot_name'		=> utf8_normalize_nfc(request_var('bot_name', '', true)),					'bot_agent'		=> request_var('bot_agent', ''),					'bot_ip'		=> request_var('bot_ip', ''),					'bot_active'	=> request_var('bot_active', true),					'bot_lang'		=> request_var('bot_lang', $config['default_lang']),					'bot_style'		=> request_var('bot_style' , $config['default_style']),				);				if ($submit)				{					if (!$bot_row['bot_agent'] && !$bot_row['bot_ip'])					{						$error[] = $user->lang['ERR_BOT_NO_MATCHES'];					}								if ($bot_row['bot_ip'] && !preg_match('#^[\d\.,:]+$#', $bot_row['bot_ip']))					{						if (!$ip_list = gethostbynamel($bot_row['bot_ip']))						{							$error[] = $user->lang['ERR_BOT_NO_IP'];						}						else						{							$bot_row['bot_ip'] = implode(',', $ip_list);						}					}					$bot_row['bot_ip'] = str_replace(' ', '', $bot_row['bot_ip']);					// Make sure the admin is not adding a bot with an user agent similar to his one					if ($bot_row['bot_agent'] && substr($user->data['session_browser'], 0, 149) === substr($bot_row['bot_agent'], 0, 149))					{						$error[] = $user->lang['ERR_BOT_AGENT_MATCHES_UA'];					}										$bot_name = false;					if ($bot_id)					{						$sql = 'SELECT u.username_clean							FROM ' . BOTS_TABLE . ' b, ' . USERS_TABLE . " u							WHERE b.bot_id = $bot_id								AND u.user_id = b.user_id";						$result = $db->sql_query($sql);						$row = $db->sql_fetchrow($result);						$db->sql_freeresult($result);						if (!$bot_row)						{							$error[] = $user->lang['NO_BOT'];						}						else						{							$bot_name = $row['username_clean'];						}					}					if (!$this->validate_botname($bot_row['bot_name'], $bot_name))					{						$error[] = $user->lang['BOT_NAME_TAKEN'];					}										if (!sizeof($error))					{						// New bot? Create a new user and group entry						if ($action == 'add')						{							$sql = 'SELECT group_id, group_colour								FROM ' . GROUPS_TABLE . "								WHERE group_name = 'BOTS'									AND group_type = " . GROUP_SPECIAL;							$result = $db->sql_query($sql);							$group_row = $db->sql_fetchrow($result);							$db->sql_freeresult($result);							if (!$group_row)							{								trigger_error($user->lang['NO_BOT_GROUP'] . adm_back_link($this->u_action . "&amp;id=$bot_id&amp;action=$action"), E_USER_WARNING);							}													$user_id = user_add(array(								'user_type'				=> (int) USER_IGNORE,								'group_id'				=> (int) $group_row['group_id'],								'username'				=> (string) $bot_row['bot_name'],								'user_regdate'			=> time(),								'user_password'			=> '',								'user_colour'			=> (string) $group_row['group_colour'],								'user_email'			=> '',								'user_lang'				=> (string) $bot_row['bot_lang'],								'user_style'			=> (int) $bot_row['bot_style'],								'user_allow_massemail'	=> 0,							));								$sql = 'INSERT INTO ' . BOTS_TABLE . ' ' . $db->sql_build_array('INSERT', array(								'user_id'		=> (int) $user_id,								'bot_name'		=> (string) $bot_row['bot_name'],								'bot_active'	=> (int) $bot_row['bot_active'],								'bot_agent'		=> (string) $bot_row['bot_agent'],								'bot_ip'		=> (string) $bot_row['bot_ip'])							);							$db->sql_query($sql);								$log = 'ADDED';						}						else if ($bot_id)						{							$sql = 'SELECT user_id, bot_name								FROM ' . BOTS_TABLE . "								WHERE bot_id = $bot_id";							$result = $db->sql_query($sql);							$row = $db->sql_fetchrow($result);							$db->sql_freeresult($result);							if (!$row)							{								trigger_error($user->lang['NO_BOT'] . adm_back_link($this->u_action . "&amp;id=$bot_id&amp;action=$action"), E_USER_WARNING);							}							$sql_ary = array(								'user_style'	=> (int) $bot_row['bot_style'],								'user_lang'		=> (string) $bot_row['bot_lang'],							);							if ($bot_row['bot_name'] !== $row['bot_name'])							{								$sql_ary['username'] = (string) $bot_row['bot_name'];								$sql_ary['username_clean'] = (string) utf8_clean_string($bot_row['bot_name']);							}							$sql = 'UPDATE ' . USERS_TABLE . ' SET ' . $db->sql_build_array('UPDATE', $sql_ary) . " WHERE user_id = {$row['user_id']}";							$db->sql_query($sql);							$sql = 'UPDATE ' . BOTS_TABLE . ' SET ' . $db->sql_build_array('UPDATE', array(								'bot_name'		=> (string) $bot_row['bot_name'],								'bot_active'	=> (int) $bot_row['bot_active'],								'bot_agent'		=> (string) $bot_row['bot_agent'],								'bot_ip'		=> (string) $bot_row['bot_ip'])							) . " WHERE bot_id = $bot_id";							$db->sql_query($sql);							// Updated username?							if ($bot_row['bot_name'] !== $row['bot_name'])							{								user_update_name($row['bot_name'], $bot_row['bot_name']);							}							$log = 'UPDATED';						}												$cache->destroy('_bots');												add_log('admin', 'LOG_BOT_' . $log, $bot_row['bot_name']);						trigger_error($user->lang['BOT_' . $log] . adm_back_link($this->u_action));										}				}				else if ($bot_id)				{					$sql = 'SELECT b.*, u.user_lang, u.user_style						FROM ' . BOTS_TABLE . ' b, ' . USERS_TABLE . " u						WHERE b.bot_id = $bot_id							AND u.user_id = b.user_id";					$result = $db->sql_query($sql);					$bot_row = $db->sql_fetchrow($result);					$db->sql_freeresult($result);					if (!$bot_row)					{						trigger_error($user->lang['NO_BOT'] . adm_back_link($this->u_action . "&amp;id=$bot_id&amp;action=$action"), E_USER_WARNING);					}					$bot_row['bot_lang'] = $bot_row['user_lang'];					$bot_row['bot_style'] = $bot_row['user_style'];					unset($bot_row['user_lang'], $bot_row['user_style']);				}				$s_active_options = '';				$_options = array('0' => 'NO', '1' => 'YES');				foreach ($_options as $value => $lang)				{					$selected = ($bot_row['bot_active'] == $value) ? ' selected="selected"' : '';					$s_active_options .= '<option value="' . $value . '"' . $selected . '>' . $user->lang[$lang] . '</option>';				}				$style_select = style_select($bot_row['bot_style'], true);				$lang_select = language_select($bot_row['bot_lang']);				$l_title = ($action == 'edit') ? 'EDIT' : 'ADD';				$template->assign_vars(array(					'L_TITLE'		=> $user->lang['BOT_' . $l_title],					'U_ACTION'		=> $this->u_action . "&amp;id=$bot_id&amp;action=$action",					'U_BACK'		=> $this->u_action,					'ERROR_MSG'		=> (sizeof($error)) ? implode('<br />', $error) : '',										'BOT_NAME'		=> $bot_row['bot_name'],					'BOT_IP'		=> $bot_row['bot_ip'],					'BOT_AGENT'		=> $bot_row['bot_agent'],										'S_EDIT_BOT'		=> true,					'S_ACTIVE_OPTIONS'	=> $s_active_options,					'S_STYLE_OPTIONS'	=> $style_select,					'S_LANG_OPTIONS'	=> $lang_select,					'S_ERROR'			=> (sizeof($error)) ? true : false,					)				);				return;			break;		}		$s_options = '';		$_options = array('activate' => 'BOT_ACTIVATE', 'deactivate' => 'BOT_DEACTIVATE', 'delete' => 'DELETE');		foreach ($_options as $value => $lang)		{			$s_options .= '<option value="' . $value . '">' . $user->lang[$lang] . '</option>';		}		$template->assign_vars(array(			'U_ACTION'		=> $this->u_action,			'S_BOT_OPTIONS'	=> $s_options)		);		$sql = 'SELECT b.bot_id, b.bot_name, b.bot_active, u.user_lastvisit			FROM ' . BOTS_TABLE . ' b, ' . USERS_TABLE . ' u			WHERE u.user_id = b.user_id			ORDER BY u.user_lastvisit DESC, b.bot_name ASC';		$result = $db->sql_query($sql);		while ($row = $db->sql_fetchrow($result))		{			$active_lang = (!$row['bot_active']) ? 'BOT_ACTIVATE' : 'BOT_DEACTIVATE';			$active_value = (!$row['bot_active']) ? 'activate' : 'deactivate';			$template->assign_block_vars('bots', array(				'BOT_NAME'		=> $row['bot_name'],				'BOT_ID'		=> $row['bot_id'],				'LAST_VISIT'	=> ($row['user_lastvisit']) ? $user->format_date($row['user_lastvisit']) : $user->lang['BOT_NEVER'],				'U_ACTIVATE_DEACTIVATE'	=> $this->u_action . "&amp;id={$row['bot_id']}&amp;action=$active_value",				'L_ACTIVATE_DEACTIVATE'	=> $user->lang[$active_lang],				'U_EDIT'				=> $this->u_action . "&amp;id={$row['bot_id']}&amp;action=edit",				'U_DELETE'				=> $this->u_action . "&amp;id={$row['bot_id']}&amp;action=delete")			);		}		$db->sql_freeresult($result);	}		/**	* Validate bot name against username table	*/	function validate_botname($newname, $oldname = false)	{		global $db;		if ($oldname && utf8_clean_string($newname) === $oldname)		{			return true;		}		// Admins might want to use names otherwise forbidden, thus we only check for duplicates.		$sql = 'SELECT username			FROM ' . USERS_TABLE . "			WHERE username_clean = '" . $db->sql_escape(utf8_clean_string($newname)) . "'";		$result = $db->sql_query($sql);		$row = $db->sql_fetchrow($result);		$db->sql_freeresult($result);				return ($row) ? false : true;	}}?>
<?php/**** @package acp* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @package module_install*/class acp_update_info{	function module()	{		return array(			'filename'	=> 'acp_update',			'title'		=> 'ACP_UPDATE',			'version'	=> '1.0.0',			'modes'		=> array(				'version_check'		=> array('title' => 'ACP_VERSION_CHECK', 'auth' => 'acl_a_board', 'cat' => array('ACP_AUTOMATION')),			),		);	}	function install()	{	}	function uninstall()	{	}}?>
<?php/**** @package ucp* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @ignore*/if (!defined('IN_PHPBB')){	exit;}/*** ucp_groups* @package ucp*/class ucp_groups{	var $u_action;	function main($id, $mode)	{		global $config, $phpbb_root_path, $phpEx;		global $db, $user, $auth, $cache, $template;		$user->add_lang('groups');		$return_page = '<br /><br />' . sprintf($user->lang['RETURN_PAGE'], '<a href="' . $this->u_action . '">', '</a>');		$mark_ary	= request_var('mark', array(0));		$submit		= (!empty($_POST['submit'])) ? true : false;		$delete		= (!empty($_POST['delete'])) ? true : false;		$error = $data = array();		switch ($mode)		{			case 'membership':				$this->page_title = 'UCP_USERGROUPS_MEMBER';				if ($submit || isset($_POST['change_default']))				{					$action = (isset($_POST['change_default'])) ? 'change_default' : request_var('action', '');					$group_id = ($action == 'change_default') ? request_var('default', 0) : request_var('selected', 0);					if (!$group_id)					{						trigger_error('NO_GROUP_SELECTED');					}					$sql = 'SELECT group_id, group_name, group_type						FROM ' . GROUPS_TABLE . "						WHERE group_id IN ($group_id, {$user->data['group_id']})";					$result = $db->sql_query($sql);					$group_row = array();					while ($row = $db->sql_fetchrow($result))					{						$row['group_name'] = ($row['group_type'] == GROUP_SPECIAL) ? $user->lang['G_' . $row['group_name']] : $row['group_name'];						$group_row[$row['group_id']] = $row;					}					$db->sql_freeresult($result);					if (!sizeof($group_row))					{						trigger_error('GROUP_NOT_EXIST');					}					switch ($action)					{						case 'change_default':							// User already having this group set as default?							if ($group_id == $user->data['group_id'])							{								trigger_error($user->lang['ALREADY_DEFAULT_GROUP'] . $return_page);							}							if (!$auth->acl_get('u_chggrp'))							{								trigger_error($user->lang['NOT_AUTHORISED'] . $return_page);							}							// User needs to be member of the group in order to make it default							if (!group_memberships($group_id, $user->data['user_id'], true))							{								trigger_error($user->lang['NOT_MEMBER_OF_GROUP'] . $return_page);							}							if (confirm_box(true))							{								group_user_attributes('default', $group_id, $user->data['user_id']);								add_log('user', $user->data['user_id'], 'LOG_USER_GROUP_CHANGE', sprintf($user->lang['USER_GROUP_CHANGE'], $group_row[$user->data['group_id']]['group_name'], $group_row[$group_id]['group_name']));								meta_refresh(3, $this->u_action);								trigger_error($user->lang['CHANGED_DEFAULT_GROUP'] . $return_page);							}							else							{								$s_hidden_fields = array(									'default'		=> $group_id,									'change_default'=> true								);								confirm_box(false, sprintf($user->lang['GROUP_CHANGE_DEFAULT'], $group_row[$group_id]['group_name']), build_hidden_fields($s_hidden_fields));							}						break;						case 'resign':							// User tries to resign from default group but is not allowed to change it?							if ($group_id == $user->data['group_id'] && !$auth->acl_get('u_chggrp'))							{								trigger_error($user->lang['NOT_RESIGN_FROM_DEFAULT_GROUP'] . $return_page);							}							if (!($row = group_memberships($group_id, $user->data['user_id'])))							{								trigger_error($user->lang['NOT_MEMBER_OF_GROUP'] . $return_page);							}							list(, $row) = each($row);							$sql = 'SELECT group_type								FROM ' . GROUPS_TABLE . '								WHERE group_id = ' . $group_id;							$result = $db->sql_query($sql);							$group_type = (int) $db->sql_fetchfield('group_type');							$db->sql_freeresult($result);							if ($group_type != GROUP_OPEN && $group_type != GROUP_FREE)							{								trigger_error($user->lang['CANNOT_RESIGN_GROUP'] . $return_page);							}							if (confirm_box(true))							{								group_user_del($group_id, $user->data['user_id']);								add_log('user', $user->data['user_id'], 'LOG_USER_GROUP_RESIGN', $group_row[$group_id]['group_name']);								meta_refresh(3, $this->u_action);								trigger_error($user->lang[($row['user_pending']) ? 'GROUP_RESIGNED_PENDING' : 'GROUP_RESIGNED_MEMBERSHIP'] . $return_page);							}							else							{								$s_hidden_fields = array(									'selected'		=> $group_id,									'action'		=> 'resign',									'submit'		=> true								);								confirm_box(false, ($row['user_pending']) ? 'GROUP_RESIGN_PENDING' : 'GROUP_RESIGN_MEMBERSHIP', build_hidden_fields($s_hidden_fields));							}						break;						case 'join':							$sql = 'SELECT ug.*, u.username, u.username_clean, u.user_email								FROM ' . USER_GROUP_TABLE . ' ug, ' . USERS_TABLE . ' u								WHERE ug.user_id = u.user_id									AND ug.group_id = ' . $group_id . '									AND ug.user_id = ' . $user->data['user_id'];							$result = $db->sql_query($sql);							$row = $db->sql_fetchrow($result);							$db->sql_freeresult($result);							if ($row)							{								if ($row['user_pending'])								{									trigger_error($user->lang['ALREADY_IN_GROUP_PENDING'] . $return_page);								}								trigger_error($user->lang['ALREADY_IN_GROUP'] . $return_page);							}							// Check permission to join (open group or request)							if ($group_row[$group_id]['group_type'] != GROUP_OPEN && $group_row[$group_id]['group_type'] != GROUP_FREE)							{								trigger_error($user->lang['CANNOT_JOIN_GROUP'] . $return_page);							}							if (confirm_box(true))							{								if ($group_row[$group_id]['group_type'] == GROUP_FREE)								{									group_user_add($group_id, $user->data['user_id']);								}								else								{									group_user_add($group_id, $user->data['user_id'], false, false, false, 0, 1);									include_once($phpbb_root_path . 'includes/functions_messenger.' . $phpEx);									$messenger = new messenger();									$sql = 'SELECT u.username, u.username_clean, u.user_email, u.user_notify_type, u.user_jabber, u.user_lang										FROM ' . USER_GROUP_TABLE . ' ug, ' . USERS_TABLE . " u										WHERE ug.user_id = u.user_id											AND ug.group_leader = 1											AND ug.group_id = $group_id";									$result = $db->sql_query($sql);									while ($row = $db->sql_fetchrow($result))									{										$messenger->template('group_request', $row['user_lang']);										$messenger->to($row['user_email'], $row['username']);										$messenger->im($row['user_jabber'], $row['username']);										$messenger->assign_vars(array(											'USERNAME'			=> htmlspecialchars_decode($row['username']),											'GROUP_NAME'		=> htmlspecialchars_decode($group_row[$group_id]['group_name']),											'REQUEST_USERNAME'	=> $user->data['username'],											'U_PENDING'		=> generate_board_url() . "/ucp.$phpEx?i=groups&mode=manage&action=list&g=$group_id",											'U_GROUP'		=> generate_board_url() . "/memberlist.$phpEx?mode=group&g=$group_id")										);										$messenger->send($row['user_notify_type']);									}									$db->sql_freeresult($result);									$messenger->save_queue();								}								add_log('user', $user->data['user_id'], 'LOG_USER_GROUP_JOIN' . (($group_row[$group_id]['group_type'] == GROUP_FREE) ? '' : '_PENDING'), $group_row[$group_id]['group_name']);								meta_refresh(3, $this->u_action);								trigger_error($user->lang[($group_row[$group_id]['group_type'] == GROUP_FREE) ? 'GROUP_JOINED' : 'GROUP_JOINED_PENDING'] . $return_page);							}							else							{								$s_hidden_fields = array(									'selected'		=> $group_id,									'action'		=> 'join',									'submit'		=> true								);								confirm_box(false, ($group_row[$group_id]['group_type'] == GROUP_FREE) ? 'GROUP_JOIN' : 'GROUP_JOIN_PENDING', build_hidden_fields($s_hidden_fields));							}						break;						case 'demote':							if (!($row = group_memberships($group_id, $user->data['user_id'])))							{								trigger_error($user->lang['NOT_MEMBER_OF_GROUP'] . $return_page);							}							list(, $row) = each($row);							if (!$row['group_leader'])							{								trigger_error($user->lang['NOT_LEADER_OF_GROUP'] . $return_page);							}							if (confirm_box(true))							{								group_user_attributes('demote', $group_id, $user->data['user_id']);								add_log('user', $user->data['user_id'], 'LOG_USER_GROUP_DEMOTE', $group_row[$group_id]['group_name']);								meta_refresh(3, $this->u_action);								trigger_error($user->lang['USER_GROUP_DEMOTED'] . $return_page);							}							else							{								$s_hidden_fields = array(									'selected'		=> $group_id,									'action'		=> 'demote',									'submit'		=> true								);								confirm_box(false, 'USER_GROUP_DEMOTE', build_hidden_fields($s_hidden_fields));							}						break;					}				}				$sql = 'SELECT g.*, ug.group_leader, ug.user_pending					FROM ' . GROUPS_TABLE . ' g, ' . USER_GROUP_TABLE . ' ug					WHERE ug.user_id = ' . $user->data['user_id'] . '						AND g.group_id = ug.group_id					ORDER BY g.group_type DESC, g.group_name';				$result = $db->sql_query($sql);				$group_id_ary = array();				$leader_count = $member_count = $pending_count = 0;				while ($row = $db->sql_fetchrow($result))				{					$block = ($row['group_leader']) ? 'leader' : (($row['user_pending']) ? 'pending' : 'member');					switch ($row['group_type'])					{						case GROUP_OPEN:							$group_status = 'OPEN';						break;						case GROUP_CLOSED:							$group_status = 'CLOSED';						break;						case GROUP_HIDDEN:							$group_status = 'HIDDEN';						break;						case GROUP_SPECIAL:							$group_status = 'SPECIAL';						break;						case GROUP_FREE:							$group_status = 'FREE';						break;					}					$template->assign_block_vars($block, array(						'GROUP_ID'		=> $row['group_id'],						'GROUP_NAME'	=> ($row['group_type'] == GROUP_SPECIAL) ? $user->lang['G_' . $row['group_name']] : $row['group_name'],						'GROUP_DESC'	=> ($row['group_type'] <> GROUP_SPECIAL) ? generate_text_for_display($row['group_desc'], $row['group_desc_uid'], $row['group_desc_bitfield'], $row['group_desc_options']) : $user->lang['GROUP_IS_SPECIAL'],						'GROUP_SPECIAL'	=> ($row['group_type'] <> GROUP_SPECIAL) ? false : true,						'GROUP_STATUS'	=> $user->lang['GROUP_IS_' . $group_status],						'GROUP_COLOUR'	=> $row['group_colour'],						'U_VIEW_GROUP'	=> append_sid("{$phpbb_root_path}memberlist.$phpEx", 'mode=group&amp;g=' . $row['group_id']),						'S_GROUP_DEFAULT'	=> ($row['group_id'] == $user->data['group_id']) ? true : false,						'S_ROW_COUNT'		=> ${$block . '_count'}++)					);					$group_id_ary[] = (int) $row['group_id'];				}				$db->sql_freeresult($result);				// Hide hidden groups unless user is an admin with group privileges				$sql_and = ($auth->acl_gets('a_group', 'a_groupadd', 'a_groupdel')) ? '<> ' . GROUP_SPECIAL : 'NOT IN (' . GROUP_SPECIAL . ', ' . GROUP_HIDDEN . ')';				$sql = 'SELECT group_id, group_name, group_colour, group_desc, group_desc_uid, group_desc_bitfield, group_desc_options, group_type, group_founder_manage					FROM ' . GROUPS_TABLE . '					WHERE ' . ((sizeof($group_id_ary)) ? $db->sql_in_set('group_id', $group_id_ary, true) . ' AND ' : '') . "						group_type $sql_and					ORDER BY group_type DESC, group_name";				$result = $db->sql_query($sql);				$nonmember_count = 0;				while ($row = $db->sql_fetchrow($result))				{					switch ($row['group_type'])					{						case GROUP_OPEN:							$group_status = 'OPEN';						break;						case GROUP_CLOSED:							$group_status = 'CLOSED';						break;						case GROUP_HIDDEN:							$group_status = 'HIDDEN';						break;						case GROUP_SPECIAL:							$group_status = 'SPECIAL';						break;						case GROUP_FREE:							$group_status = 'FREE';						break;					}					$template->assign_block_vars('nonmember', array(						'GROUP_ID'		=> $row['group_id'],						'GROUP_NAME'	=> ($row['group_type'] == GROUP_SPECIAL) ? $user->lang['G_' . $row['group_name']] : $row['group_name'],						'GROUP_DESC'	=> ($row['group_type'] <> GROUP_SPECIAL) ? generate_text_for_display($row['group_desc'], $row['group_desc_uid'], $row['group_desc_bitfield'], $row['group_desc_options']) : $user->lang['GROUP_IS_SPECIAL'],						'GROUP_SPECIAL'	=> ($row['group_type'] <> GROUP_SPECIAL) ? false : true,						'GROUP_CLOSED'	=> ($row['group_type'] <> GROUP_CLOSED || $auth->acl_gets('a_group', 'a_groupadd', 'a_groupdel')) ? false : true,						'GROUP_STATUS'	=> $user->lang['GROUP_IS_' . $group_status],						'S_CAN_JOIN'	=> ($row['group_type'] == GROUP_OPEN || $row['group_type'] == GROUP_FREE) ? true : false,						'GROUP_COLOUR'	=> $row['group_colour'],						'U_VIEW_GROUP'	=> append_sid("{$phpbb_root_path}memberlist.$phpEx", 'mode=group&amp;g=' . $row['group_id']),						'S_ROW_COUNT'	=> $nonmember_count++)					);				}				$db->sql_freeresult($result);				$template->assign_vars(array(					'S_CHANGE_DEFAULT'	=> ($auth->acl_get('u_chggrp')) ? true : false,					'S_LEADER_COUNT'	=> $leader_count,					'S_MEMBER_COUNT'	=> $member_count,					'S_PENDING_COUNT'	=> $pending_count,					'S_NONMEMBER_COUNT'	=> $nonmember_count,					'S_UCP_ACTION'			=> $this->u_action)				);			break;			case 'manage':				$this->page_title = 'UCP_USERGROUPS_MANAGE';				$action		= (isset($_POST['addusers'])) ? 'addusers' : request_var('action', '');				$group_id	= request_var('g', 0);				include($phpbb_root_path . 'includes/functions_display.' . $phpEx);				add_form_key('ucp_groups');				if ($group_id)				{					$sql = 'SELECT *						FROM ' . GROUPS_TABLE . "						WHERE group_id = $group_id";					$result = $db->sql_query($sql);					$group_row = $db->sql_fetchrow($result);					$db->sql_freeresult($result);					if (!$group_row)					{						trigger_error($user->lang['NO_GROUP'] . $return_page);					}					// Check if the user is allowed to manage this group if set to founder only.					if ($user->data['user_type'] != USER_FOUNDER && $group_row['group_founder_manage'])					{						trigger_error($user->lang['NOT_ALLOWED_MANAGE_GROUP'] . $return_page, E_USER_WARNING);					}					$group_name = $group_row['group_name'];					$group_type = $group_row['group_type'];					$avatar_img = (!empty($group_row['group_avatar'])) ? get_user_avatar($group_row['group_avatar'], $group_row['group_avatar_type'], $group_row['group_avatar_width'], $group_row['group_avatar_height'], 'GROUP_AVATAR') : '<img src="' . $phpbb_root_path . 'adm/images/no_avatar.gif" alt="" />';					$template->assign_vars(array(						'GROUP_NAME'			=> ($group_type == GROUP_SPECIAL) ? $user->lang['G_' . $group_name] : $group_name,						'GROUP_INTERNAL_NAME'	=> $group_name,						'GROUP_COLOUR'			=> (isset($group_row['group_colour'])) ? $group_row['group_colour'] : '',						'GROUP_DESC_DISP'		=> generate_text_for_display($group_row['group_desc'], $group_row['group_desc_uid'], $group_row['group_desc_bitfield'], $group_row['group_desc_options']),						'GROUP_TYPE'			=> $group_row['group_type'],						'AVATAR'				=> $avatar_img,						'AVATAR_IMAGE'			=> $avatar_img,						'AVATAR_WIDTH'			=> (isset($group_row['group_avatar_width'])) ? $group_row['group_avatar_width'] : '',						'AVATAR_HEIGHT'			=> (isset($group_row['group_avatar_height'])) ? $group_row['group_avatar_height'] : '',					));				}				switch ($action)				{					case 'edit':						if (!$group_id)						{							trigger_error($user->lang['NO_GROUP'] . $return_page);						}						if (!($row = group_memberships($group_id, $user->data['user_id'])))						{							trigger_error($user->lang['NOT_MEMBER_OF_GROUP'] . $return_page);						}						list(, $row) = each($row);						if (!$row['group_leader'])						{							trigger_error($user->lang['NOT_LEADER_OF_GROUP'] . $return_page);						}						$file_uploads = (@ini_get('file_uploads') || strtolower(@ini_get('file_uploads')) == 'on') ? true : false;						$user->add_lang(array('acp/groups', 'acp/common'));						$data = $submit_ary = array();						$update	= (isset($_POST['update'])) ? true : false;						$error = array();						$avatar_select = basename(request_var('avatar_select', ''));						$category = basename(request_var('category', ''));						$can_upload = (file_exists($phpbb_root_path . $config['avatar_path']) && phpbb_is_writable($phpbb_root_path . $config['avatar_path']) && $file_uploads) ? true : false;						// Did we submit?						if ($update)						{							$group_name	= utf8_normalize_nfc(request_var('group_name', '', true));							$group_desc = utf8_normalize_nfc(request_var('group_desc', '', true));							$group_type	= request_var('group_type', GROUP_FREE);							$allow_desc_bbcode	= request_var('desc_parse_bbcode', false);							$allow_desc_urls	= request_var('desc_parse_urls', false);							$allow_desc_smilies	= request_var('desc_parse_smilies', false);							$submit_ary = array(								'colour'		=> request_var('group_colour', ''),								'rank'			=> request_var('group_rank', 0),								'receive_pm'	=> isset($_REQUEST['group_receive_pm']) ? 1 : 0,								'message_limit'	=> request_var('group_message_limit', 0),								'max_recipients'=> request_var('group_max_recipients', 0),							);							$data['uploadurl']	= request_var('uploadurl', '');							$data['remotelink'] = request_var('remotelink', '');							$data['width']		= request_var('width', '');							$data['height']		= request_var('height', '');							$delete				= request_var('delete', '');							if (!empty($_FILES['uploadfile']['tmp_name']) || $data['uploadurl'] || $data['remotelink'])							{								// Avatar stuff								$var_ary = array(									'uploadurl'		=> array('string', true, 5, 255),									'remotelink'	=> array('string', true, 5, 255),									'width'			=> array('string', true, 1, 3),									'height'		=> array('string', true, 1, 3),								);								if (!($error = validate_data($data, $var_ary)))								{									$data['user_id'] = "g$group_id";									if ((!empty($_FILES['uploadfile']['tmp_name']) || $data['uploadurl']) && $can_upload)									{										list($submit_ary['avatar_type'], $submit_ary['avatar'], $submit_ary['avatar_width'], $submit_ary['avatar_height']) = avatar_upload($data, $error);									}									else if ($data['remotelink'])									{										list($submit_ary['avatar_type'], $submit_ary['avatar'], $submit_ary['avatar_width'], $submit_ary['avatar_height']) = avatar_remote($data, $error);									}								}							}							else if ($avatar_select && $config['allow_avatar_local'])							{								// check avatar gallery								if (is_dir($phpbb_root_path . $config['avatar_gallery_path'] . '/' . $category))								{									$submit_ary['avatar_type'] = AVATAR_GALLERY;									list($submit_ary['avatar_width'], $submit_ary['avatar_height']) = getimagesize($phpbb_root_path . $config['avatar_gallery_path'] . '/' . $category . '/' . $avatar_select);									$submit_ary['avatar'] = $category . '/' . $avatar_select;								}							}							else if ($delete)							{								$submit_ary['avatar'] = '';								$submit_ary['avatar_type'] = $submit_ary['avatar_width'] = $submit_ary['avatar_height'] = 0;							}							else if ($data['width'] && $data['height'])							{								// Only update the dimensions?								if ($config['avatar_max_width'] || $config['avatar_max_height'])								{									if ($data['width'] > $config['avatar_max_width'] || $data['height'] > $config['avatar_max_height'])									{										$error[] = sprintf($user->lang['AVATAR_WRONG_SIZE'], $config['avatar_min_width'], $config['avatar_min_height'], $config['avatar_max_width'], $config['avatar_max_height'], $data['width'], $data['height']);									}								}								if (!sizeof($error))								{									if ($config['avatar_min_width'] || $config['avatar_min_height'])									{										if ($data['width'] < $config['avatar_min_width'] || $data['height'] < $config['avatar_min_height'])										{											$error[] = sprintf($user->lang['AVATAR_WRONG_SIZE'], $config['avatar_min_width'], $config['avatar_min_height'], $config['avatar_max_width'], $config['avatar_max_height'], $data['width'], $data['height']);										}									}								}								if (!sizeof($error))								{									$submit_ary['avatar_width'] = $data['width'];									$submit_ary['avatar_height'] = $data['height'];								}							}							if ((isset($submit_ary['avatar']) && $submit_ary['avatar'] && (!isset($group_row['group_avatar']))) || $delete)							{								if (isset($group_row['group_avatar']) && $group_row['group_avatar'])								{									avatar_delete('group', $group_row, true);								}							}							if (!check_form_key('ucp_groups'))							{								$error[] = $user->lang['FORM_INVALID'];							}							if (!sizeof($error))							{								// Only set the rank, colour, etc. if it's changed or if we're adding a new								// group. This prevents existing group members being updated if no changes								// were made.								$group_attributes = array();								$test_variables = array(									'rank'			=> 'int',									'colour'		=> 'string',									'avatar'		=> 'string',									'avatar_type'	=> 'int',									'avatar_width'	=> 'int',									'avatar_height'	=> 'int',									'receive_pm'	=> 'int',									'legend'		=> 'int',									'message_limit'	=> 'int',									'max_recipients'=> 'int',								);								foreach ($test_variables as $test => $type)								{									if (isset($submit_ary[$test]) && ($action == 'add' || $group_row['group_' . $test] != $submit_ary[$test]))									{										settype($submit_ary[$test], $type);										$group_attributes['group_' . $test] = $group_row['group_' . $test] = $submit_ary[$test];									}								}								if (!($error = group_create($group_id, $group_type, $group_name, $group_desc, $group_attributes, $allow_desc_bbcode, $allow_desc_urls, $allow_desc_smilies)))								{									$cache->destroy('sql', GROUPS_TABLE);									$message = ($action == 'edit') ? 'GROUP_UPDATED' : 'GROUP_CREATED';									trigger_error($user->lang[$message] . $return_page);								}							}							if (sizeof($error))							{								$group_rank = $submit_ary['rank'];								$group_desc_data = array(									'text'			=> $group_desc,									'allow_bbcode'	=> $allow_desc_bbcode,									'allow_smilies'	=> $allow_desc_smilies,									'allow_urls'	=> $allow_desc_urls								);							}						}						else if (!$group_id)						{							$group_name = utf8_normalize_nfc(request_var('group_name', '', true));							$group_desc_data = array(								'text'			=> '',								'allow_bbcode'	=> true,								'allow_smilies'	=> true,								'allow_urls'	=> true							);							$group_rank = 0;							$group_type = GROUP_OPEN;						}						else						{							$group_desc_data = generate_text_for_edit($group_row['group_desc'], $group_row['group_desc_uid'], $group_row['group_desc_options']);							$group_rank = $group_row['group_rank'];						}						$sql = 'SELECT *							FROM ' . RANKS_TABLE . '							WHERE rank_special = 1							ORDER BY rank_title';						$result = $db->sql_query($sql);						$rank_options = '<option value="0"' . ((!$group_rank) ? ' selected="selected"' : '') . '>' . $user->lang['USER_DEFAULT'] . '</option>';						while ($row = $db->sql_fetchrow($result))						{							$selected = ($group_rank && $row['rank_id'] == $group_rank) ? ' selected="selected"' : '';							$rank_options .= '<option value="' . $row['rank_id'] . '"' . $selected . '>' . $row['rank_title'] . '</option>';						}						$db->sql_freeresult($result);						$type_free		= ($group_type == GROUP_FREE) ? ' checked="checked"' : '';						$type_open		= ($group_type == GROUP_OPEN) ? ' checked="checked"' : '';						$type_closed	= ($group_type == GROUP_CLOSED) ? ' checked="checked"' : '';						$type_hidden	= ($group_type == GROUP_HIDDEN) ? ' checked="checked"' : '';						$display_gallery = (isset($_POST['display_gallery'])) ? true : false;						if ($config['allow_avatar'] && $config['allow_avatar_local'] && $display_gallery)						{							avatar_gallery($category, $avatar_select, 4);						}						$avatars_enabled = ($config['allow_avatar'] && (($can_upload && ($config['allow_avatar_upload'] || $config['allow_avatar_remote_upload'])) || ($config['allow_avatar_local'] || $config['allow_avatar_remote']))) ? true : false;						$template->assign_vars(array(							'S_EDIT'			=> true,							'S_INCLUDE_SWATCH'	=> true,							'S_FORM_ENCTYPE'	=> ($config['allow_avatar'] && $can_upload && ($config['allow_avatar_upload'] || $config['allow_avatar_remote_upload'])) ? ' enctype="multipart/form-data"' : '',							'S_ERROR'			=> (sizeof($error)) ? true : false,							'S_SPECIAL_GROUP'	=> ($group_type == GROUP_SPECIAL) ? true : false,							'S_AVATARS_ENABLED'	=> $avatars_enabled,							'S_DISPLAY_GALLERY'	=> ($config['allow_avatar'] && $config['allow_avatar_local'] && !$display_gallery) ? true : false,							'S_IN_GALLERY'		=> ($config['allow_avatar_local'] && $display_gallery) ? true : false,							'S_UPLOAD_AVATAR_FILE'	=> ($config['allow_avatar'] && $config['allow_avatar_upload'] && $can_upload) ? true : false,							'S_UPLOAD_AVATAR_URL'	=> ($config['allow_avatar'] && $config['allow_avatar_remote_upload'] && $can_upload) ? true : false,							'S_LINK_AVATAR'			=> ($config['allow_avatar'] && $config['allow_avatar_remote']) ? true : false,							'ERROR_MSG'				=> (sizeof($error)) ? implode('<br />', $error) : '',							'GROUP_RECEIVE_PM'		=> (isset($group_row['group_receive_pm']) && $group_row['group_receive_pm']) ? ' checked="checked"' : '',							'GROUP_MESSAGE_LIMIT'	=> (isset($group_row['group_message_limit'])) ? $group_row['group_message_limit'] : 0,							'GROUP_MAX_RECIPIENTS'	=> (isset($group_row['group_max_recipients'])) ? $group_row['group_max_recipients'] : 0,							'GROUP_DESC'			=> $group_desc_data['text'],							'S_DESC_BBCODE_CHECKED'	=> $group_desc_data['allow_bbcode'],							'S_DESC_URLS_CHECKED'	=> $group_desc_data['allow_urls'],							'S_DESC_SMILIES_CHECKED'=> $group_desc_data['allow_smilies'],							'S_RANK_OPTIONS'		=> $rank_options,							'AVATAR_MAX_FILESIZE'	=> $config['avatar_filesize'],							'GROUP_TYPE_FREE'		=> GROUP_FREE,							'GROUP_TYPE_OPEN'		=> GROUP_OPEN,							'GROUP_TYPE_CLOSED'		=> GROUP_CLOSED,							'GROUP_TYPE_HIDDEN'		=> GROUP_HIDDEN,							'GROUP_TYPE_SPECIAL'	=> GROUP_SPECIAL,							'GROUP_FREE'		=> $type_free,							'GROUP_OPEN'		=> $type_open,							'GROUP_CLOSED'		=> $type_closed,							'GROUP_HIDDEN'		=> $type_hidden,							'U_SWATCH'			=> append_sid("{$phpbb_root_path}adm/swatch.$phpEx", 'form=ucp&amp;name=group_colour'),							'S_UCP_ACTION'		=> $this->u_action . "&amp;action=$action&amp;g=$group_id",							'L_AVATAR_EXPLAIN'	=> sprintf($user->lang['AVATAR_EXPLAIN'], $config['avatar_max_width'], $config['avatar_max_height'], $config['avatar_filesize'] / 1024),						));					break;					case 'list':						if (!$group_id)						{							trigger_error($user->lang['NO_GROUP'] . $return_page);						}						if (!($row = group_memberships($group_id, $user->data['user_id'])))						{							trigger_error($user->lang['NOT_MEMBER_OF_GROUP'] . $return_page);						}						list(, $row) = each($row);						if (!$row['group_leader'])						{							trigger_error($user->lang['NOT_LEADER_OF_GROUP'] . $return_page);						}						$user->add_lang(array('acp/groups', 'acp/common'));						$start = request_var('start', 0);						// Grab the leaders - always, on every page...						$sql = 'SELECT u.user_id, u.username, u.username_clean, u.user_colour, u.user_regdate, u.user_posts, u.group_id, ug.group_leader, ug.user_pending							FROM ' . USERS_TABLE . ' u, ' . USER_GROUP_TABLE . " ug							WHERE ug.group_id = $group_id								AND u.user_id = ug.user_id								AND ug.group_leader = 1							ORDER BY ug.user_pending DESC, u.username_clean";						$result = $db->sql_query($sql);						while ($row = $db->sql_fetchrow($result))						{							$template->assign_block_vars('leader', array(								'USERNAME'			=> $row['username'],								'USERNAME_COLOUR'	=> $row['user_colour'],								'USERNAME_FULL'		=> get_username_string('full', $row['user_id'], $row['username'], $row['user_colour']),								'U_USER_VIEW'		=> get_username_string('profile', $row['user_id'], $row['username']),								'S_GROUP_DEFAULT'	=> ($row['group_id'] == $group_id) ? true : false,								'JOINED'			=> ($row['user_regdate']) ? $user->format_date($row['user_regdate']) : ' - ',								'USER_POSTS'		=> $row['user_posts'],								'USER_ID'			=> $row['user_id'])							);						}						$db->sql_freeresult($result);						// Total number of group members (non-leaders)						$sql = 'SELECT COUNT(user_id) AS total_members							FROM ' . USER_GROUP_TABLE . "							WHERE group_id = $group_id								AND group_leader = 0";						$result = $db->sql_query($sql);						$total_members = (int) $db->sql_fetchfield('total_members');						$db->sql_freeresult($result);						// Grab the members						$sql = 'SELECT u.user_id, u.username, u.username_clean, u.user_colour, u.user_regdate, u.user_posts, u.group_id, ug.group_leader, ug.user_pending							FROM ' . USERS_TABLE . ' u, ' . USER_GROUP_TABLE . " ug							WHERE ug.group_id = $group_id								AND u.user_id = ug.user_id								AND ug.group_leader = 0							ORDER BY ug.user_pending DESC, u.username_clean";						$result = $db->sql_query_limit($sql, $config['topics_per_page'], $start);						$pending = false;						$approved = false;						while ($row = $db->sql_fetchrow($result))						{							if ($row['user_pending'] && !$pending)							{								$template->assign_block_vars('member', array(									'S_PENDING'		=> true)								);								$template->assign_var('S_PENDING_SET', true);								$pending = true;							}							else if (!$row['user_pending'] && !$approved)							{								$template->assign_block_vars('member', array(									'S_APPROVED'		=> true)								);								$template->assign_var('S_APPROVED_SET', true);								$approved = true;							}							$template->assign_block_vars('member', array(								'USERNAME'			=> $row['username'],								'USERNAME_COLOUR'	=> $row['user_colour'],								'USERNAME_FULL'		=> get_username_string('full', $row['user_id'], $row['username'], $row['user_colour']),								'U_USER_VIEW'		=> get_username_string('profile', $row['user_id'], $row['username']),								'S_GROUP_DEFAULT'	=> ($row['group_id'] == $group_id) ? true : false,								'JOINED'			=> ($row['user_regdate']) ? $user->format_date($row['user_regdate']) : ' - ',								'USER_POSTS'		=> $row['user_posts'],								'USER_ID'			=> $row['user_id'])							);						}						$db->sql_freeresult($result);						$s_action_options = '';						$options = array('default' => 'DEFAULT', 'approve' => 'APPROVE', 'deleteusers' => 'DELETE');						foreach ($options as $option => $lang)						{							$s_action_options .= '<option value="' . $option . '">' . $user->lang['GROUP_' . $lang] . '</option>';						}						$template->assign_vars(array(							'S_LIST'			=> true,							'S_ACTION_OPTIONS'	=> $s_action_options,							'S_ON_PAGE'			=> on_page($total_members, $config['topics_per_page'], $start),							'PAGINATION'		=> generate_pagination($this->u_action . "&amp;action=$action&amp;g=$group_id", $total_members, $config['topics_per_page'], $start),							'U_ACTION'			=> $this->u_action . "&amp;g=$group_id",							'S_UCP_ACTION'		=> $this->u_action . "&amp;g=$group_id",							'U_FIND_USERNAME'	=> append_sid("{$phpbb_root_path}memberlist.$phpEx", 'mode=searchuser&amp;form=ucp&amp;field=usernames'),						));					break;					case 'approve':						if (!$group_id)						{							trigger_error($user->lang['NO_GROUP'] . $return_page);						}						if (!($row = group_memberships($group_id, $user->data['user_id'])))						{							trigger_error($user->lang['NOT_MEMBER_OF_GROUP'] . $return_page);						}						list(, $row) = each($row);						if (!$row['group_leader'])						{							trigger_error($user->lang['NOT_LEADER_OF_GROUP'] . $return_page);						}						$user->add_lang('acp/groups');						// Approve, demote or promote						group_user_attributes('approve', $group_id, $mark_ary, false, false);						trigger_error($user->lang['USERS_APPROVED'] . '<br /><br />' . sprintf($user->lang['RETURN_PAGE'], '<a href="' . $this->u_action . '&amp;action=list&amp;g=' . $group_id . '">', '</a>'));					break;					case 'default':						if (!$group_id)						{							trigger_error($user->lang['NO_GROUP'] . $return_page);						}						if (!($row = group_memberships($group_id, $user->data['user_id'])))						{							trigger_error($user->lang['NOT_MEMBER_OF_GROUP'] . $return_page);						}						list(, $row) = each($row);						if (!$row['group_leader'])						{							trigger_error($user->lang['NOT_LEADER_OF_GROUP'] . $return_page);						}						$group_row['group_name'] = ($group_row['group_type'] == GROUP_SPECIAL) ? $user->lang['G_' . $group_row['group_name']] : $group_row['group_name'];						if (confirm_box(true))						{							if (!sizeof($mark_ary))							{								$start = 0;								do								{									$sql = 'SELECT user_id										FROM ' . USER_GROUP_TABLE . "										WHERE group_id = $group_id										ORDER BY user_id";									$result = $db->sql_query_limit($sql, 200, $start);									$mark_ary = array();									if ($row = $db->sql_fetchrow($result))									{										do										{											$mark_ary[] = $row['user_id'];										}										while ($row = $db->sql_fetchrow($result));										group_user_attributes('default', $group_id, $mark_ary, false, $group_row['group_name'], $group_row);										$start = (sizeof($mark_ary) < 200) ? 0 : $start + 200;									}									else									{										$start = 0;									}									$db->sql_freeresult($result);								}								while ($start);							}							else							{								group_user_attributes('default', $group_id, $mark_ary, false, $group_row['group_name'], $group_row);							}							$user->add_lang('acp/groups');							trigger_error($user->lang['GROUP_DEFS_UPDATED'] . '<br /><br />' . sprintf($user->lang['RETURN_PAGE'], '<a href="' . $this->u_action . '&amp;action=list&amp;g=' . $group_id . '">', '</a>'));						}						else						{							$user->add_lang('acp/common');							confirm_box(false, $user->lang['CONFIRM_OPERATION'], build_hidden_fields(array(								'mark'		=> $mark_ary,								'g'			=> $group_id,								'i'			=> $id,								'mode'		=> $mode,								'action'	=> $action))							);						}						// redirect to last screen						redirect($this->u_action . '&amp;action=list&amp;g=' . $group_id);					break;					case 'deleteusers':						$user->add_lang(array('acp/groups', 'acp/common'));						if (!($row = group_memberships($group_id, $user->data['user_id'])))						{							trigger_error($user->lang['NOT_MEMBER_OF_GROUP'] . $return_page);						}						list(, $row) = each($row);						if (!$row['group_leader'])						{							trigger_error($user->lang['NOT_LEADER_OF_GROUP'] . $return_page);						}						$group_row['group_name'] = ($group_row['group_type'] == GROUP_SPECIAL) ? $user->lang['G_' . $group_row['group_name']] : $group_row['group_name'];						if (confirm_box(true))						{							if (!$group_id)							{								trigger_error($user->lang['NO_GROUP'] . $return_page);							}							$error = group_user_del($group_id, $mark_ary, false, $group_row['group_name']);							if ($error)							{								trigger_error($user->lang[$error] . '<br /><br />' . sprintf($user->lang['RETURN_PAGE'], '<a href="' . $this->u_action . '&amp;action=list&amp;g=' . $group_id . '">', '</a>'));							}							trigger_error($user->lang['GROUP_USERS_REMOVE'] . '<br /><br />' . sprintf($user->lang['RETURN_PAGE'], '<a href="' . $this->u_action . '&amp;action=list&amp;g=' . $group_id . '">', '</a>'));						}						else						{							confirm_box(false, $user->lang['CONFIRM_OPERATION'], build_hidden_fields(array(								'mark'		=> $mark_ary,								'g'			=> $group_id,								'i'			=> $id,								'mode'		=> $mode,								'action'	=> $action))							);						}						// redirect to last screen						redirect($this->u_action . '&amp;action=list&amp;g=' . $group_id);					break;					case 'addusers':						$user->add_lang(array('acp/groups', 'acp/common'));						$names = utf8_normalize_nfc(request_var('usernames', '', true));						if (!$group_id)						{							trigger_error($user->lang['NO_GROUP'] . $return_page);						}						if (!$names)						{							trigger_error($user->lang['NO_USERS'] . $return_page);						}						if (!($row = group_memberships($group_id, $user->data['user_id'])))						{							trigger_error($user->lang['NOT_MEMBER_OF_GROUP'] . $return_page);						}						list(, $row) = each($row);						if (!$row['group_leader'])						{							trigger_error($user->lang['NOT_LEADER_OF_GROUP'] . $return_page);						}						$name_ary = array_unique(explode("\n", $names));						$group_name = ($group_row['group_type'] == GROUP_SPECIAL) ? $user->lang['G_' . $group_row['group_name']] : $group_row['group_name'];						$default = request_var('default', 0);						if (confirm_box(true))						{							// Add user/s to group							if ($error = group_user_add($group_id, false, $name_ary, $group_name, $default, 0, 0, $group_row))							{								trigger_error($user->lang[$error] . $return_page);							}							trigger_error($user->lang['GROUP_USERS_ADDED'] . '<br /><br />' . sprintf($user->lang['RETURN_PAGE'], '<a href="' . $this->u_action . '&amp;action=list&amp;g=' . $group_id . '">', '</a>'));						}						else						{							$s_hidden_fields = array(								'default'	=> $default,								'usernames'	=> $names,								'g'			=> $group_id,								'i'			=> $id,								'mode'		=> $mode,								'action'	=> $action							);							confirm_box(false, sprintf($user->lang['GROUP_CONFIRM_ADD_USER' . ((sizeof($name_ary) == 1) ? '' : 'S')], implode(', ', $name_ary)), build_hidden_fields($s_hidden_fields));						}						trigger_error($user->lang['NO_USERS_ADDED'] . '<br /><br />' . sprintf($user->lang['RETURN_PAGE'], '<a href="' . $this->u_action . '&amp;action=list&amp;g=' . $group_id . '">', '</a>'));					break;					default:						$user->add_lang('acp/common');						$sql = 'SELECT g.group_id, g.group_name, g.group_colour, g.group_desc, g.group_desc_uid, g.group_desc_bitfield, g.group_desc_options, g.group_type, ug.group_leader							FROM ' . GROUPS_TABLE . ' g, ' . USER_GROUP_TABLE . ' ug							WHERE ug.user_id = ' . $user->data['user_id'] . '								AND g.group_id = ug.group_id								AND ug.group_leader = 1							ORDER BY g.group_type DESC, g.group_name';						$result = $db->sql_query($sql);						while ($value = $db->sql_fetchrow($result))						{							$template->assign_block_vars('leader', array(								'GROUP_NAME'	=> ($value['group_type'] == GROUP_SPECIAL) ? $user->lang['G_' . $value['group_name']] : $value['group_name'],								'GROUP_DESC'	=> generate_text_for_display($value['group_desc'], $value['group_desc_uid'], $value['group_desc_bitfield'], $value['group_desc_options']),								'GROUP_TYPE'	=> $value['group_type'],								'GROUP_ID'		=> $value['group_id'],								'GROUP_COLOUR'	=> $value['group_colour'],								'U_LIST'	=> $this->u_action . "&amp;action=list&amp;g={$value['group_id']}",								'U_EDIT'	=> $this->u_action . "&amp;action=edit&amp;g={$value['group_id']}")							);						}						$db->sql_freeresult($result);					break;				}			break;		}		$this->tpl_name = 'ucp_groups_' . $mode;	}}?>
<?php/**** @package mcp* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @ignore*/if (!defined('IN_PHPBB')){	exit;}/*** MCP Forum View*/function mcp_forum_view($id, $mode, $action, $forum_info){	global $template, $db, $user, $auth, $cache, $module;	global $phpEx, $phpbb_root_path, $config;	$user->add_lang(array('viewtopic', 'viewforum'));	include_once($phpbb_root_path . 'includes/functions_display.' . $phpEx);	// merge_topic is the quickmod action, merge_topics is the mcp_forum action, and merge_select is the mcp_topic action	$merge_select = ($action == 'merge_select' || $action == 'merge_topic' || $action == 'merge_topics') ? true : false;	if ($merge_select)	{		// Fixes a "bug" that makes forum_view use the same ordering as topic_view		unset($_POST['sk'], $_POST['sd'], $_REQUEST['sk'], $_REQUEST['sd']);	}	$forum_id			= $forum_info['forum_id'];	$start				= request_var('start', 0);	$topic_id_list		= request_var('topic_id_list', array(0));	$post_id_list		= request_var('post_id_list', array(0));	$source_topic_ids	= array(request_var('t', 0));	$to_topic_id		= request_var('to_topic_id', 0);	$url_extra = '';	$url_extra .= ($forum_id) ? "&amp;f=$forum_id" : '';	$url_extra .= ($GLOBALS['topic_id']) ? '&amp;t=' . $GLOBALS['topic_id'] : '';	$url_extra .= ($GLOBALS['post_id']) ? '&amp;p=' . $GLOBALS['post_id'] : '';	$url_extra .= ($GLOBALS['user_id']) ? '&amp;u=' . $GLOBALS['user_id'] : '';	$url = append_sid("{$phpbb_root_path}mcp.$phpEx?$url_extra");	// Resync Topics	switch ($action)	{		case 'resync':			$topic_ids = request_var('topic_id_list', array(0));			mcp_resync_topics($topic_ids);		break;		case 'merge_topics':			$source_topic_ids = $topic_id_list;		case 'merge_topic':			if ($to_topic_id)			{				merge_topics($forum_id, $source_topic_ids, $to_topic_id);			}		break;	}	$selected_ids = '';	if (sizeof($post_id_list) && $action != 'merge_topics')	{		foreach ($post_id_list as $num => $post_id)		{			$selected_ids .= '&amp;post_id_list[' . $num . ']=' . $post_id;		}	}	else if (sizeof($topic_id_list) && $action == 'merge_topics')	{		foreach ($topic_id_list as $num => $topic_id)		{			$selected_ids .= '&amp;topic_id_list[' . $num . ']=' . $topic_id;		}	}	make_jumpbox($url . "&amp;i=$id&amp;action=$action&amp;mode=$mode" . (($merge_select) ? $selected_ids : ''), $forum_id, false, 'm_', true);	$topics_per_page = ($forum_info['forum_topics_per_page']) ? $forum_info['forum_topics_per_page'] : $config['topics_per_page'];	$sort_days = $total = 0;	$sort_key = $sort_dir = '';	$sort_by_sql = $sort_order_sql = array();	mcp_sorting('viewforum', $sort_days, $sort_key, $sort_dir, $sort_by_sql, $sort_order_sql, $total, $forum_id);	$forum_topics = ($total == -1) ? $forum_info['forum_topics'] : $total;	$limit_time_sql = ($sort_days) ? 'AND t.topic_last_post_time >= ' . (time() - ($sort_days * 86400)) : '';	$template->assign_vars(array(		'ACTION'				=> $action,		'FORUM_NAME'			=> $forum_info['forum_name'],		'FORUM_DESCRIPTION'		=> generate_text_for_display($forum_info['forum_desc'], $forum_info['forum_desc_uid'], $forum_info['forum_desc_bitfield'], $forum_info['forum_desc_options']),		'REPORTED_IMG'			=> $user->img('icon_topic_reported', 'TOPIC_REPORTED'),		'UNAPPROVED_IMG'		=> $user->img('icon_topic_unapproved', 'TOPIC_UNAPPROVED'),		'LAST_POST_IMG'			=> $user->img('icon_topic_latest', 'VIEW_LATEST_POST'),		'NEWEST_POST_IMG'		=> $user->img('icon_topic_newest', 'VIEW_NEWEST_POST'),		'S_CAN_REPORT'			=> $auth->acl_get('m_report', $forum_id),		'S_CAN_DELETE'			=> $auth->acl_get('m_delete', $forum_id),		'S_CAN_MERGE'			=> $auth->acl_get('m_merge', $forum_id),		'S_CAN_MOVE'			=> $auth->acl_get('m_move', $forum_id),		'S_CAN_FORK'			=> $auth->acl_get('m_', $forum_id),		'S_CAN_LOCK'			=> $auth->acl_get('m_lock', $forum_id),		'S_CAN_SYNC'			=> $auth->acl_get('m_', $forum_id),		'S_CAN_APPROVE'			=> $auth->acl_get('m_approve', $forum_id),		'S_MERGE_SELECT'		=> ($merge_select) ? true : false,		'S_CAN_MAKE_NORMAL'		=> $auth->acl_gets('f_sticky', 'f_announce', $forum_id),		'S_CAN_MAKE_STICKY'		=> $auth->acl_get('f_sticky', $forum_id),		'S_CAN_MAKE_ANNOUNCE'	=> $auth->acl_get('f_announce', $forum_id),		'U_VIEW_FORUM'			=> append_sid("{$phpbb_root_path}viewforum.$phpEx", 'f=' . $forum_id),		'U_VIEW_FORUM_LOGS'		=> ($auth->acl_gets('a_', 'm_', $forum_id) && $module->loaded('logs')) ? append_sid("{$phpbb_root_path}mcp.$phpEx", 'i=logs&amp;mode=forum_logs&amp;f=' . $forum_id) : '',		'S_MCP_ACTION'			=> $url . "&amp;i=$id&amp;forum_action=$action&amp;mode=$mode&amp;start=$start" . (($merge_select) ? $selected_ids : ''),		'PAGINATION'			=> generate_pagination($url . "&amp;i=$id&amp;action=$action&amp;mode=$mode&amp;sd=$sort_dir&amp;sk=$sort_key&amp;st=$sort_days" . (($merge_select) ? $selected_ids : ''), $forum_topics, $topics_per_page, $start),		'PAGE_NUMBER'			=> on_page($forum_topics, $topics_per_page, $start),		'TOTAL_TOPICS'			=> ($forum_topics == 1) ? $user->lang['VIEW_FORUM_TOPIC'] : sprintf($user->lang['VIEW_FORUM_TOPICS'], $forum_topics),	));	// Grab icons	$icons = $cache->obtain_icons();	$topic_rows = array();	if ($config['load_db_lastread'])	{		$read_tracking_join = ' LEFT JOIN ' . TOPICS_TRACK_TABLE . ' tt ON (tt.topic_id = t.topic_id AND tt.user_id = ' . $user->data['user_id'] . ')';		$read_tracking_select = ', tt.mark_time';	}	else	{		$read_tracking_join = $read_tracking_select = '';	}	$sql = "SELECT t.topic_id		FROM " . TOPICS_TABLE . " t		WHERE t.forum_id IN($forum_id, 0)			" . (($auth->acl_get('m_approve', $forum_id)) ? '' : 'AND t.topic_approved = 1') . "			$limit_time_sql		ORDER BY t.topic_type DESC, $sort_order_sql";	$result = $db->sql_query_limit($sql, $topics_per_page, $start);	$topic_list = $topic_tracking_info = array();	while ($row = $db->sql_fetchrow($result))	{		$topic_list[] = $row['topic_id'];	}	$db->sql_freeresult($result);	$sql = "SELECT t.*$read_tracking_select		FROM " . TOPICS_TABLE . " t $read_tracking_join		WHERE " . $db->sql_in_set('t.topic_id', $topic_list, false, true);	$result = $db->sql_query($sql);	while ($row = $db->sql_fetchrow($result))	{		$topic_rows[$row['topic_id']] = $row;	}	$db->sql_freeresult($result);	// If there is more than one page, but we have no topic list, then the start parameter is... erm... out of sync	if (!sizeof($topic_list) && $forum_topics && $start > 0)	{		redirect($url . "&amp;i=$id&amp;action=$action&amp;mode=$mode");	}	// Get topic tracking info	if (sizeof($topic_list))	{		if ($config['load_db_lastread'])		{			$topic_tracking_info = get_topic_tracking($forum_id, $topic_list, $topic_rows, array($forum_id => $forum_info['mark_time']), array());		}		else		{			$topic_tracking_info = get_complete_topic_tracking($forum_id, $topic_list, array());		}	}	foreach ($topic_list as $topic_id)	{		$topic_title = '';		$row = &$topic_rows[$topic_id];		$replies = ($auth->acl_get('m_approve', $forum_id)) ? $row['topic_replies_real'] : $row['topic_replies'];		if ($row['topic_status'] == ITEM_MOVED)		{			$unread_topic = false;		}		else		{			$unread_topic = (isset($topic_tracking_info[$topic_id]) && $row['topic_last_post_time'] > $topic_tracking_info[$topic_id]) ? true : false;		}		// Get folder img, topic status/type related information		$folder_img = $folder_alt = $topic_type = '';		topic_status($row, $replies, $unread_topic, $folder_img, $folder_alt, $topic_type);		$topic_title = censor_text($row['topic_title']);		$topic_unapproved = (!$row['topic_approved'] && $auth->acl_get('m_approve', $row['forum_id'])) ? true : false;		$posts_unapproved = ($row['topic_approved'] && $row['topic_replies'] < $row['topic_replies_real'] && $auth->acl_get('m_approve', $row['forum_id'])) ? true : false;		$u_mcp_queue = ($topic_unapproved || $posts_unapproved) ? $url . '&amp;i=queue&amp;mode=' . (($topic_unapproved) ? 'approve_details' : 'unapproved_posts') . '&amp;t=' . $row['topic_id'] : '';		$topic_row = array(			'ATTACH_ICON_IMG'		=> ($auth->acl_get('u_download') && $auth->acl_get('f_download', $row['forum_id']) && $row['topic_attachment']) ? $user->img('icon_topic_attach', $user->lang['TOTAL_ATTACHMENTS']) : '',			'TOPIC_FOLDER_IMG'		=> $user->img($folder_img, $folder_alt),			'TOPIC_FOLDER_IMG_SRC'	=> $user->img($folder_img, $folder_alt, false, '', 'src'),			'TOPIC_ICON_IMG'		=> (!empty($icons[$row['icon_id']])) ? $icons[$row['icon_id']]['img'] : '',			'TOPIC_ICON_IMG_WIDTH'	=> (!empty($icons[$row['icon_id']])) ? $icons[$row['icon_id']]['width'] : '',			'TOPIC_ICON_IMG_HEIGHT'	=> (!empty($icons[$row['icon_id']])) ? $icons[$row['icon_id']]['height'] : '',			'UNAPPROVED_IMG'		=> ($topic_unapproved || $posts_unapproved) ? $user->img('icon_topic_unapproved', ($topic_unapproved) ? 'TOPIC_UNAPPROVED' : 'POSTS_UNAPPROVED') : '',			'TOPIC_AUTHOR'				=> get_username_string('username', $row['topic_poster'], $row['topic_first_poster_name'], $row['topic_first_poster_colour']),			'TOPIC_AUTHOR_COLOUR'		=> get_username_string('colour', $row['topic_poster'], $row['topic_first_poster_name'], $row['topic_first_poster_colour']),			'TOPIC_AUTHOR_FULL'			=> get_username_string('full', $row['topic_poster'], $row['topic_first_poster_name'], $row['topic_first_poster_colour']),			'U_TOPIC_AUTHOR'			=> get_username_string('profile', $row['topic_poster'], $row['topic_first_poster_name'], $row['topic_first_poster_colour']),			'LAST_POST_AUTHOR'			=> get_username_string('username', $row['topic_last_poster_id'], $row['topic_last_poster_name'], $row['topic_last_poster_colour']),			'LAST_POST_AUTHOR_COLOUR'	=> get_username_string('colour', $row['topic_last_poster_id'], $row['topic_last_poster_name'], $row['topic_last_poster_colour']),			'LAST_POST_AUTHOR_FULL'		=> get_username_string('full', $row['topic_last_poster_id'], $row['topic_last_poster_name'], $row['topic_last_poster_colour']),			'U_LAST_POST_AUTHOR'		=> get_username_string('profile', $row['topic_last_poster_id'], $row['topic_last_poster_name'], $row['topic_last_poster_colour']),			'TOPIC_TYPE'		=> $topic_type,			'TOPIC_TITLE'		=> $topic_title,			'REPLIES'			=> ($auth->acl_get('m_approve', $row['forum_id'])) ? $row['topic_replies_real'] : $row['topic_replies'],			'LAST_POST_TIME'	=> $user->format_date($row['topic_last_post_time']),			'FIRST_POST_TIME'	=> $user->format_date($row['topic_time']),			'LAST_POST_SUBJECT'	=> $row['topic_last_post_subject'],			'LAST_VIEW_TIME'	=> $user->format_date($row['topic_last_view_time']),			'S_TOPIC_REPORTED'		=> (!empty($row['topic_reported']) && empty($row['topic_moved_id']) && $auth->acl_get('m_report', $row['forum_id'])) ? true : false,			'S_TOPIC_UNAPPROVED'	=> $topic_unapproved,			'S_POSTS_UNAPPROVED'	=> $posts_unapproved,			'S_UNREAD_TOPIC'		=> $unread_topic,		);		if ($row['topic_status'] == ITEM_MOVED)		{			$topic_row = array_merge($topic_row, array(				'U_VIEW_TOPIC'		=> append_sid("{$phpbb_root_path}viewtopic.$phpEx", "t={$row['topic_moved_id']}"),				'U_DELETE_TOPIC'	=> ($auth->acl_get('m_delete', $forum_id)) ? append_sid("{$phpbb_root_path}mcp.$phpEx", "i=$id&amp;f=$forum_id&amp;topic_id_list[]={$row['topic_id']}&amp;mode=forum_view&amp;action=delete_topic") : '',				'S_MOVED_TOPIC'		=> true,				'TOPIC_ID'			=> $row['topic_moved_id'],			));		}		else		{			if ($action == 'merge_topic' || $action == 'merge_topics')			{				$u_select_topic = $url . "&amp;i=$id&amp;mode=forum_view&amp;action=$action&amp;to_topic_id=" . $row['topic_id'] . $selected_ids;			}			else			{				$u_select_topic = $url . "&amp;i=$id&amp;mode=topic_view&amp;action=merge&amp;to_topic_id=" . $row['topic_id'] . $selected_ids;			}			$topic_row = array_merge($topic_row, array(				'U_VIEW_TOPIC'		=> append_sid("{$phpbb_root_path}mcp.$phpEx", "i=$id&amp;f=$forum_id&amp;t={$row['topic_id']}&amp;mode=topic_view"),				'S_SELECT_TOPIC'	=> ($merge_select && !in_array($row['topic_id'], $source_topic_ids)) ? true : false,				'U_SELECT_TOPIC'	=> $u_select_topic,				'U_MCP_QUEUE'		=> $u_mcp_queue,				'U_MCP_REPORT'		=> ($auth->acl_get('m_report', $forum_id)) ? append_sid("{$phpbb_root_path}mcp.$phpEx", 'i=main&amp;mode=topic_view&amp;t=' . $row['topic_id'] . '&amp;action=reports') : '',				'TOPIC_ID'			=> $row['topic_id'],				'S_TOPIC_CHECKED'	=> ($topic_id_list && in_array($row['topic_id'], $topic_id_list)) ? true : false,			));		}		$template->assign_block_vars('topicrow', $topic_row);	}	unset($topic_rows);}/*** Resync topics*/function mcp_resync_topics($topic_ids){	global $auth, $db, $template, $phpEx, $user, $phpbb_root_path;	if (!sizeof($topic_ids))	{		trigger_error('NO_TOPIC_SELECTED');	}	if (!check_ids($topic_ids, TOPICS_TABLE, 'topic_id', array('m_')))	{		return;	}	// Sync everything and perform extra checks separately	sync('topic_reported', 'topic_id', $topic_ids, false, true);	sync('topic_attachment', 'topic_id', $topic_ids, false, true);	sync('topic', 'topic_id', $topic_ids, true, false);	$sql = 'SELECT topic_id, forum_id, topic_title		FROM ' . TOPICS_TABLE . '		WHERE ' . $db->sql_in_set('topic_id', $topic_ids);	$result = $db->sql_query($sql);	// Log this action	while ($row = $db->sql_fetchrow($result))	{		add_log('mod', $row['forum_id'], $row['topic_id'], 'LOG_TOPIC_RESYNC', $row['topic_title']);	}	$db->sql_freeresult($result);	$msg = (sizeof($topic_ids) == 1) ? $user->lang['TOPIC_RESYNC_SUCCESS'] : $user->lang['TOPICS_RESYNC_SUCCESS'];	$redirect = request_var('redirect', $user->data['session_page']);	meta_refresh(3, $redirect);	trigger_error($msg . '<br /><br />' . sprintf($user->lang['RETURN_PAGE'], '<a href="' . $redirect . '">', '</a>'));	return;}/*** Merge selected topics into selected topic*/function merge_topics($forum_id, $topic_ids, $to_topic_id){	global $db, $template, $user, $phpEx, $phpbb_root_path, $auth;	if (!sizeof($topic_ids))	{		$template->assign_var('MESSAGE', $user->lang['NO_TOPIC_SELECTED']);		return;	}	if (!$to_topic_id)	{		$template->assign_var('MESSAGE', $user->lang['NO_FINAL_TOPIC_SELECTED']);		return;	}	$topic_data = get_topic_data(array($to_topic_id), 'm_merge');	if (!sizeof($topic_data))	{		$template->assign_var('MESSAGE', $user->lang['NO_FINAL_TOPIC_SELECTED']);		return;	}	$topic_data = $topic_data[$to_topic_id];	$post_id_list	= request_var('post_id_list', array(0));	$start			= request_var('start', 0);	if (!sizeof($post_id_list) && sizeof($topic_ids))	{		$sql = 'SELECT post_id			FROM ' . POSTS_TABLE . '			WHERE ' . $db->sql_in_set('topic_id', $topic_ids);		$result = $db->sql_query($sql);		$post_id_list = array();		while ($row = $db->sql_fetchrow($result))		{			$post_id_list[] = $row['post_id'];		}		$db->sql_freeresult($result);	}	if (!sizeof($post_id_list))	{		$template->assign_var('MESSAGE', $user->lang['NO_POST_SELECTED']);		return;	}	if (!check_ids($post_id_list, POSTS_TABLE, 'post_id', array('m_merge')))	{		return;	}	$redirect = request_var('redirect', build_url(array('quickmod')));	$s_hidden_fields = build_hidden_fields(array(		'i'				=> 'main',		'f'				=> $forum_id,		'post_id_list'	=> $post_id_list,		'to_topic_id'	=> $to_topic_id,		'mode'			=> 'forum_view',		'action'		=> 'merge_topics',		'start'			=> $start,		'redirect'		=> $redirect,		'topic_id_list'	=> $topic_ids)	);	$success_msg = $return_link = '';	if (confirm_box(true))	{		$to_forum_id = $topic_data['forum_id'];		move_posts($post_id_list, $to_topic_id);		add_log('mod', $to_forum_id, $to_topic_id, 'LOG_MERGE', $topic_data['topic_title']);		// Message and return links		$success_msg = 'POSTS_MERGED_SUCCESS';		// If the topic no longer exist, we will update the topic watch table.		// To not let it error out on users watching both topics, we just return on an error...		$db->sql_return_on_error(true);		$db->sql_query('UPDATE ' . TOPICS_WATCH_TABLE . ' SET topic_id = ' . (int) $to_topic_id . ' WHERE ' . $db->sql_in_set('topic_id', $topic_ids));		$db->sql_return_on_error(false);		$db->sql_query('DELETE FROM ' . TOPICS_WATCH_TABLE . ' WHERE ' . $db->sql_in_set('topic_id', $topic_ids));		// Link to the new topic		$return_link .= (($return_link) ? '<br /><br />' : '') . sprintf($user->lang['RETURN_NEW_TOPIC'], '<a href="' . append_sid("{$phpbb_root_path}viewtopic.$phpEx", 'f=' . $to_forum_id . '&amp;t=' . $to_topic_id) . '">', '</a>');	}	else	{		confirm_box(false, 'MERGE_TOPICS', $s_hidden_fields);	}	$redirect = request_var('redirect', "index.$phpEx");	$redirect = reapply_sid($redirect);	if (!$success_msg)	{		return;	}	else	{		meta_refresh(3, append_sid("{$phpbb_root_path}viewtopic.$phpEx", "f=$to_forum_id&amp;t=$to_topic_id"));		trigger_error($user->lang[$success_msg] . '<br /><br />' . $return_link);	}}?>
<?php/**** @package acp* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @package module_install*/class acp_permissions_info{	function module()	{		return array(			'filename'	=> 'acp_permissions',			'title'		=> 'ACP_PERMISSIONS',			'version'	=> '1.0.0',			'modes'		=> array(				'intro'					=> array('title' => 'ACP_PERMISSIONS', 'auth' => 'acl_a_authusers || acl_a_authgroups || acl_a_viewauth', 'cat' => array('ACP_CAT_PERMISSIONS')),				'trace'					=> array('title' => 'ACP_PERMISSION_TRACE', 'auth' => 'acl_a_viewauth', 'display' => false, 'cat' => array('ACP_PERMISSION_MASKS')),				'setting_forum_local'	=> array('title' => 'ACP_FORUM_PERMISSIONS', 'auth' => 'acl_a_fauth && (acl_a_authusers || acl_a_authgroups)', 'cat' => array('ACP_FORUM_BASED_PERMISSIONS')),				'setting_forum_copy'	=> array('title' => 'ACP_FORUM_PERMISSIONS_COPY', 'auth' => 'acl_a_fauth && acl_a_authusers && acl_a_authgroups && acl_a_mauth', 'cat' => array('ACP_FORUM_BASED_PERMISSIONS')),				'setting_mod_local'		=> array('title' => 'ACP_FORUM_MODERATORS', 'auth' => 'acl_a_mauth && (acl_a_authusers || acl_a_authgroups)', 'cat' => array('ACP_FORUM_BASED_PERMISSIONS')),				'setting_user_global'	=> array('title' => 'ACP_USERS_PERMISSIONS', 'auth' => 'acl_a_authusers && (acl_a_aauth || acl_a_mauth || acl_a_uauth)', 'cat' => array('ACP_GLOBAL_PERMISSIONS', 'ACP_CAT_USERS')),				'setting_user_local'	=> array('title' => 'ACP_USERS_FORUM_PERMISSIONS', 'auth' => 'acl_a_authusers && (acl_a_mauth || acl_a_fauth)', 'cat' => array('ACP_FORUM_BASED_PERMISSIONS', 'ACP_CAT_USERS')),				'setting_group_global'	=> array('title' => 'ACP_GROUPS_PERMISSIONS', 'auth' => 'acl_a_authgroups && (acl_a_aauth || acl_a_mauth || acl_a_uauth)', 'cat' => array('ACP_GLOBAL_PERMISSIONS', 'ACP_GROUPS')),				'setting_group_local'	=> array('title' => 'ACP_GROUPS_FORUM_PERMISSIONS', 'auth' => 'acl_a_authgroups && (acl_a_mauth || acl_a_fauth)', 'cat' => array('ACP_FORUM_BASED_PERMISSIONS', 'ACP_GROUPS')),				'setting_admin_global'	=> array('title' => 'ACP_ADMINISTRATORS', 'auth' => 'acl_a_aauth && (acl_a_authusers || acl_a_authgroups)', 'cat' => array('ACP_GLOBAL_PERMISSIONS')),				'setting_mod_global'	=> array('title' => 'ACP_GLOBAL_MODERATORS', 'auth' => 'acl_a_mauth && (acl_a_authusers || acl_a_authgroups)', 'cat' => array('ACP_GLOBAL_PERMISSIONS')),				'view_admin_global'		=> array('title' => 'ACP_VIEW_ADMIN_PERMISSIONS', 'auth' => 'acl_a_viewauth', 'cat' => array('ACP_PERMISSION_MASKS')),				'view_user_global'		=> array('title' => 'ACP_VIEW_USER_PERMISSIONS', 'auth' => 'acl_a_viewauth', 'cat' => array('ACP_PERMISSION_MASKS')),				'view_mod_global'		=> array('title' => 'ACP_VIEW_GLOBAL_MOD_PERMISSIONS', 'auth' => 'acl_a_viewauth', 'cat' => array('ACP_PERMISSION_MASKS')),				'view_mod_local'		=> array('title' => 'ACP_VIEW_FORUM_MOD_PERMISSIONS', 'auth' => 'acl_a_viewauth', 'cat' => array('ACP_PERMISSION_MASKS')),				'view_forum_local'		=> array('title' => 'ACP_VIEW_FORUM_PERMISSIONS', 'auth' => 'acl_a_viewauth', 'cat' => array('ACP_PERMISSION_MASKS')),			),		);	}	function install()	{	}	function uninstall()	{	}}?>
<?php/**** @package acp* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @ignore*/if (!defined('IN_PHPBB')){	exit;}/*** @package acp*/class acp_language{	var $u_action;	var $main_files;	var $language_header = '';	var $lang_header = '';	var $language_file = '';	var $language_directory = '';	function main($id, $mode)	{		global $config, $db, $user, $auth, $template, $cache;		global $phpbb_root_path, $phpbb_admin_path, $phpEx, $table_prefix;		global $safe_mode, $file_uploads;		include_once($phpbb_root_path . 'includes/functions_user.' . $phpEx);		$this->default_variables();		// Check and set some common vars		$action		= (isset($_POST['update_details'])) ? 'update_details' : '';		$action		= (isset($_POST['download_file'])) ? 'download_file' : $action;		$action		= (isset($_POST['upload_file'])) ? 'upload_file' : $action;		$action		= (isset($_POST['upload_data'])) ? 'upload_data' : $action;		$action		= (isset($_POST['submit_file'])) ? 'submit_file' : $action;		$action		= (isset($_POST['remove_store'])) ? 'details' : $action;		$submit = (empty($action) && !isset($_POST['update']) && !isset($_POST['test_connection'])) ? false : true;		$action = (empty($action)) ? request_var('action', '') : $action;		$form_name = 'acp_lang';		add_form_key('acp_lang');		$lang_id = request_var('id', 0);		if (isset($_POST['missing_file']))		{			$missing_file = request_var('missing_file', array('' => 0));			list($_REQUEST['language_file'], ) = array_keys($missing_file);		}		$selected_lang_file = request_var('language_file', '|common.' . $phpEx);		list($this->language_directory, $this->language_file) = explode('|', $selected_lang_file);		$this->language_directory = basename($this->language_directory);		$this->language_file = basename($this->language_file);		$user->add_lang('acp/language');		$this->tpl_name = 'acp_language';		$this->page_title = 'ACP_LANGUAGE_PACKS';		if ($submit && $action == 'upload_data' && request_var('test_connection', ''))		{			$test_connection = false;			$action = 'upload_file';			$method = request_var('method', '');			include_once($phpbb_root_path . 'includes/functions_transfer.' . $phpEx);			switch ($method)			{				case 'ftp':					$transfer = new ftp(request_var('host', ''), request_var('username', ''), request_var('password', ''), request_var('root_path', ''), request_var('port', ''), request_var('timeout', ''));				break;				case 'ftp_fsock':					$transfer = new ftp_fsock(request_var('host', ''), request_var('username', ''), request_var('password', ''), request_var('root_path', ''), request_var('port', ''), request_var('timeout', ''));				break;				default:					trigger_error($user->lang['INVALID_UPLOAD_METHOD'], E_USER_ERROR);				break;			}			$test_connection = $transfer->open_session();			$transfer->close_session();		}		switch ($action)		{			case 'upload_file':				include_once($phpbb_root_path . 'includes/functions_transfer.' . $phpEx);				$method = request_var('method', '');				if (!class_exists($method))				{					trigger_error('Method does not exist.', E_USER_ERROR);				}				$requested_data = call_user_func(array($method, 'data'));				foreach ($requested_data as $data => $default)				{					$template->assign_block_vars('data', array(						'DATA'		=> $data,						'NAME'		=> $user->lang[strtoupper($method . '_' . $data)],						'EXPLAIN'	=> $user->lang[strtoupper($method . '_' . $data) . '_EXPLAIN'],						'DEFAULT'	=> (!empty($_REQUEST[$data])) ? request_var($data, '') : $default					));				}				$hidden_data = build_hidden_fields(array(					'file'			=> $this->language_file,					'dir'			=> $this->language_directory,					'language_file'	=> $selected_lang_file,					'method'		=> $method)				);				$hidden_data .= build_hidden_fields(array('entry' => $_POST['entry']), true, STRIP);				$template->assign_vars(array(					'S_UPLOAD'	=> true,					'NAME'		=> $method,					'U_ACTION'	=> $this->u_action . "&amp;id=$lang_id&amp;action=upload_data",					'U_BACK'	=> $this->u_action . "&amp;id=$lang_id&amp;action=details&amp;language_file=" . urlencode($selected_lang_file),					'HIDDEN'	=> $hidden_data,					'S_CONNECTION_SUCCESS'		=> (request_var('test_connection', '') && $test_connection === true) ? true : false,					'S_CONNECTION_FAILED'		=> (request_var('test_connection', '') && $test_connection !== true) ? true : false				));			break;			case 'update_details':				if (!$submit || !check_form_key($form_name))				{					trigger_error($user->lang['FORM_INVALID']. adm_back_link($this->u_action), E_USER_WARNING);				}				if (!$lang_id)				{					trigger_error($user->lang['NO_LANG_ID'] . adm_back_link($this->u_action), E_USER_WARNING);				}				$sql = 'SELECT *					FROM ' . LANG_TABLE . "					WHERE lang_id = $lang_id";				$result = $db->sql_query($sql);				$row = $db->sql_fetchrow($result);				$db->sql_freeresult($result);				$sql_ary	= array(					'lang_english_name'		=> request_var('lang_english_name', $row['lang_english_name']),					'lang_local_name'		=> utf8_normalize_nfc(request_var('lang_local_name', $row['lang_local_name'], true)),					'lang_author'			=> utf8_normalize_nfc(request_var('lang_author', $row['lang_author'], true)),				);				$db->sql_query('UPDATE ' . LANG_TABLE . '					SET ' . $db->sql_build_array('UPDATE', $sql_ary) . '					WHERE lang_id = ' . $lang_id);				add_log('admin', 'LOG_LANGUAGE_PACK_UPDATED', $sql_ary['lang_english_name']);				trigger_error($user->lang['LANGUAGE_DETAILS_UPDATED'] . adm_back_link($this->u_action));			break;			case 'submit_file':			case 'download_file':			case 'upload_data':				if (!$submit || !check_form_key($form_name))				{					trigger_error($user->lang['FORM_INVALID']. adm_back_link($this->u_action), E_USER_WARNING);				}				if (!$lang_id || empty($_POST['entry']))				{					trigger_error($user->lang['NO_LANG_ID'] . adm_back_link($this->u_action), E_USER_WARNING);				}				if ($this->language_directory != 'email' && !is_array($_POST['entry']))				{					trigger_error($user->lang['NO_LANG_ID'] . adm_back_link($this->u_action), E_USER_WARNING);				}				if (!$this->language_file || (!$this->language_directory && !in_array($this->language_file, $this->main_files)))				{					trigger_error($user->lang['NO_FILE_SELECTED'] . adm_back_link($this->u_action), E_USER_WARNING);				}				$sql = 'SELECT *					FROM ' . LANG_TABLE . "					WHERE lang_id = $lang_id";				$result = $db->sql_query($sql);				$row = $db->sql_fetchrow($result);				$db->sql_freeresult($result);				if (!$row)				{					trigger_error($user->lang['NO_LANG_ID'] . adm_back_link($this->u_action), E_USER_WARNING);				}				// Before we attempt to write anything let's check if the admin really chose a correct filename				switch ($this->language_directory)				{					case 'email':						// Get email templates						$email_files = filelist($phpbb_root_path . 'language/' . $row['lang_iso'], 'email', 'txt');						$email_files = $email_files['email/'];						if (!in_array($this->language_file, $email_files))						{							trigger_error($user->lang['WRONG_LANGUAGE_FILE'] . adm_back_link($this->u_action . '&amp;action=details&amp;id=' . $lang_id), E_USER_WARNING);						}					break;					case 'acp':						// Get acp files						$acp_files = filelist($phpbb_root_path . 'language/' . $row['lang_iso'], 'acp', $phpEx);						$acp_files = $acp_files['acp/'];						if (!in_array($this->language_file, $acp_files))						{							trigger_error($user->lang['WRONG_LANGUAGE_FILE'] . adm_back_link($this->u_action . '&amp;action=details&amp;id=' . $lang_id), E_USER_WARNING);						}					break;					case 'mods':						// Get mod files						$mods_files = filelist($phpbb_root_path . 'language/' . $row['lang_iso'], 'mods', $phpEx);						$mods_files = (isset($mods_files['mods/'])) ? $mods_files['mods/'] : array();						if (!in_array($this->language_file, $mods_files))						{							trigger_error($user->lang['WRONG_LANGUAGE_FILE'] . adm_back_link($this->u_action . '&amp;action=details&amp;id=' . $lang_id), E_USER_WARNING);						}					break;					default:						if (!in_array($this->language_file, $this->main_files))						{							trigger_error($user->lang['WRONG_LANGUAGE_FILE'] . adm_back_link($this->u_action . '&amp;action=details&amp;id=' . $lang_id), E_USER_WARNING);						}					break;				}				if (!$safe_mode)				{					$mkdir_ary = array('language', 'language/' . $row['lang_iso']);					if ($this->language_directory)					{						$mkdir_ary[] = 'language/' . $row['lang_iso'] . '/' . $this->language_directory;					}					foreach ($mkdir_ary as $dir)					{						$dir = $phpbb_root_path . 'store/' . $dir;						if (!is_dir($dir))						{							if (!@mkdir($dir, 0777))							{								trigger_error("Could not create directory $dir", E_USER_ERROR);							}							@chmod($dir, 0777);						}					}				}				// Get target filename for storage folder				$filename = $this->get_filename($row['lang_iso'], $this->language_directory, $this->language_file, true, true);				$fp = @fopen($phpbb_root_path . $filename, 'wb');				if (!$fp)				{					trigger_error(sprintf($user->lang['UNABLE_TO_WRITE_FILE'], $filename) . adm_back_link($this->u_action . '&amp;id=' . $lang_id . '&amp;action=details&amp;language_file=' . urlencode($selected_lang_file)), E_USER_WARNING);				}				if ($this->language_directory == 'email')				{					// Email Template					$entry = $this->prepare_lang_entry($_POST['entry'], false);					fwrite($fp, $entry);				}				else				{					$name = (($this->language_directory) ? $this->language_directory . '_' : '') . $this->language_file;					$header = str_replace(array('{FILENAME}', '{LANG_NAME}', '{CHANGED}', '{AUTHOR}'), array($name, $row['lang_english_name'], date('Y-m-d', time()), $row['lang_author']), $this->language_file_header);					if (strpos($this->language_file, 'help_') === 0)					{						// Help File						$header .= '$help = array(' . "\n";						fwrite($fp, $header);						foreach ($_POST['entry'] as $key => $value)						{							if (!is_array($value))							{								continue;							}							$entry = "\tarray(\n";							foreach ($value as $_key => $_value)							{								$entry .= "\t\t" . (int) $_key . "\t=> '" . $this->prepare_lang_entry($_value) . "',\n";							}							$entry .= "\t),\n";							fwrite($fp, $entry);						}						$footer = ");\n\n?>";						fwrite($fp, $footer);					}					else					{						// Language File						$header .= $this->lang_header;						fwrite($fp, $header);						foreach ($_POST['entry'] as $key => $value)						{							$entry = $this->format_lang_array($key, $value);							fwrite($fp, $entry);						}						$footer = "));\n\n?>";						fwrite($fp, $footer);					}				}				fclose($fp);				if ($action == 'download_file')				{					header('Pragma: no-cache');					header('Content-Type: application/octetstream; name="' . $this->language_file . '"');					header('Content-disposition: attachment; filename=' . $this->language_file);					$fp = @fopen($phpbb_root_path . $filename, 'rb');					while ($buffer = fread($fp, 1024))					{						echo $buffer;					}					fclose($fp);					add_log('admin', 'LOG_LANGUAGE_FILE_SUBMITTED', $this->language_file);					exit;				}				else if ($action == 'upload_data')				{					$sql = 'SELECT lang_iso						FROM ' . LANG_TABLE . "						WHERE lang_id = $lang_id";					$result = $db->sql_query($sql);					$row = $db->sql_fetchrow($result);					$db->sql_freeresult($result);					$file = request_var('file', '');					$dir = request_var('dir', '');					$selected_lang_file = $dir . '|' . $file;					$old_file = '/' . $this->get_filename($row['lang_iso'], $dir, $file, false, true);					$lang_path = 'language/' . $row['lang_iso'] . '/' . (($dir) ? $dir . '/' : '');					include_once($phpbb_root_path . 'includes/functions_transfer.' . $phpEx);					$method = request_var('method', '');					if ($method != 'ftp' && $method != 'ftp_fsock')					{						trigger_error($user->lang['INVALID_UPLOAD_METHOD'], E_USER_ERROR);					}					$transfer = new $method(request_var('host', ''), request_var('username', ''), request_var('password', ''), request_var('root_path', ''), request_var('port', ''), request_var('timeout', ''));					if (($result = $transfer->open_session()) !== true)					{						trigger_error($user->lang[$result] . adm_back_link($this->u_action . '&amp;action=details&amp;id=' . $lang_id . '&amp;language_file=' . urlencode($selected_lang_file)), E_USER_WARNING);					}					$transfer->rename($lang_path . $file, $lang_path . $file . '.bak');					$result = $transfer->copy_file('store/' . $lang_path . $file, $lang_path . $file);					if ($result === false)					{						// If failed, try to rename again and print error out...						$transfer->delete_file($lang_path . $file);						$transfer->rename($lang_path . $file . '.bak', $lang_path . $file);						trigger_error($user->lang['UPLOAD_FAILED'] . adm_back_link($this->u_action . '&amp;action=details&amp;id=' . $lang_id . '&amp;language_file=' . urlencode($selected_lang_file)), E_USER_WARNING);					}					$transfer->close_session();					// Remove from storage folder					if (file_exists($phpbb_root_path . 'store/' . $lang_path . $file))					{						@unlink($phpbb_root_path . 'store/' . $lang_path . $file);					}					add_log('admin', 'LOG_LANGUAGE_FILE_REPLACED', $file);					trigger_error($user->lang['UPLOAD_COMPLETED'] . adm_back_link($this->u_action . '&amp;action=details&amp;id=' . $lang_id . '&amp;language_file=' . urlencode($selected_lang_file)));				}				add_log('admin', 'LOG_LANGUAGE_FILE_SUBMITTED', $this->language_file);				$action = 'details';			// no break;			case 'details':				if (!$lang_id)				{					trigger_error($user->lang['NO_LANG_ID'] . adm_back_link($this->u_action), E_USER_WARNING);				}				$this->page_title = 'LANGUAGE_PACK_DETAILS';				$sql = 'SELECT *					FROM ' . LANG_TABLE . '					WHERE lang_id = ' . $lang_id;				$result = $db->sql_query($sql);				$lang_entries = $db->sql_fetchrow($result);				$db->sql_freeresult($result);				$lang_iso = $lang_entries['lang_iso'];				$missing_vars = $missing_files = array();				// Get email templates				$email_files = filelist($phpbb_root_path . 'language/' . $config['default_lang'], 'email', 'txt');				$email_files = $email_files['email/'];				// Get acp files				$acp_files = filelist($phpbb_root_path . 'language/' . $config['default_lang'], 'acp', $phpEx);				$acp_files = $acp_files['acp/'];				// Get mod files				$mods_files = filelist($phpbb_root_path . 'language/' . $config['default_lang'], 'mods', $phpEx);				$mods_files = (isset($mods_files['mods/'])) ? $mods_files['mods/'] : array();				// Check if our current filename matches the files				switch ($this->language_directory)				{					case 'email':						if (!in_array($this->language_file, $email_files))						{							trigger_error($user->lang['WRONG_LANGUAGE_FILE'] . adm_back_link($this->u_action . '&amp;action=details&amp;id=' . $lang_id), E_USER_WARNING);						}					break;					case 'acp':						if (!in_array($this->language_file, $acp_files))						{							trigger_error($user->lang['WRONG_LANGUAGE_FILE'] . adm_back_link($this->u_action . '&amp;action=details&amp;id=' . $lang_id), E_USER_WARNING);						}					break;					case 'mods':						if (!in_array($this->language_file, $mods_files))						{							trigger_error($user->lang['WRONG_LANGUAGE_FILE'] . adm_back_link($this->u_action . '&amp;action=details&amp;id=' . $lang_id), E_USER_WARNING);						}					break;					default:						if (!in_array($this->language_file, $this->main_files))						{							trigger_error($user->lang['WRONG_LANGUAGE_FILE'] . adm_back_link($this->u_action . '&amp;action=details&amp;id=' . $lang_id), E_USER_WARNING);						}				}				if (isset($_POST['remove_store']))				{					$store_filename = $this->get_filename($lang_iso, $this->language_directory, $this->language_file, true, true);					if (file_exists($phpbb_root_path . $store_filename))					{						@unlink($phpbb_root_path . $store_filename);					}				}				include_once($phpbb_root_path . 'includes/functions_transfer.' . $phpEx);				$methods = transfer::methods();				foreach ($methods as $method)				{					$template->assign_block_vars('buttons', array(						'VALUE' => $method					));				}				$template->assign_vars(array(					'S_DETAILS'			=> true,					'U_ACTION'			=> $this->u_action . "&amp;action=details&amp;id=$lang_id",					'U_BACK'			=> $this->u_action,					'LANG_LOCAL_NAME'	=> $lang_entries['lang_local_name'],					'LANG_ENGLISH_NAME'	=> $lang_entries['lang_english_name'],					'LANG_ISO'			=> $lang_entries['lang_iso'],					'LANG_AUTHOR'		=> $lang_entries['lang_author'],					'ALLOW_UPLOAD'		=> sizeof($methods)					)				);				// If current lang is different from the default lang, then first try to grab missing/additional vars				if ($lang_iso != $config['default_lang'])				{					$is_missing_var = false;					foreach ($this->main_files as $file)					{						if (file_exists($phpbb_root_path . $this->get_filename($lang_iso, '', $file)))						{							$missing_vars[$file] = $this->compare_language_files($config['default_lang'], $lang_iso, '', $file);							if (sizeof($missing_vars[$file]))							{								$is_missing_var = true;							}						}						else						{							$missing_files[] = $this->get_filename($lang_iso, '', $file);						}					}					// Now go through acp/mods directories					foreach ($acp_files as $file)					{						if (file_exists($phpbb_root_path . $this->get_filename($lang_iso, 'acp', $file)))						{							$missing_vars['acp/' . $file] = $this->compare_language_files($config['default_lang'], $lang_iso, 'acp', $file);							if (sizeof($missing_vars['acp/' . $file]))							{								$is_missing_var = true;							}						}						else						{							$missing_files[] = $this->get_filename($lang_iso, 'acp', $file);						}					}					if (sizeof($mods_files))					{						foreach ($mods_files as $file)						{							if (file_exists($phpbb_root_path . $this->get_filename($lang_iso, 'mods', $file)))							{								$missing_vars['mods/' . $file] = $this->compare_language_files($config['default_lang'], $lang_iso, 'mods', $file);								if (sizeof($missing_vars['mods/' . $file]))								{									$is_missing_var = true;								}							}							else							{								$missing_files[] = $this->get_filename($lang_iso, 'mods', $file);							}						}					}					// More missing files... for example email templates?					foreach ($email_files as $file)					{						if (!file_exists($phpbb_root_path . $this->get_filename($lang_iso, 'email', $file)))						{							$missing_files[] = $this->get_filename($lang_iso, 'email', $file);						}					}					if (sizeof($missing_files))					{						$template->assign_vars(array(							'S_MISSING_FILES'		=> true,							'L_MISSING_FILES'		=> sprintf($user->lang['THOSE_MISSING_LANG_FILES'], $lang_entries['lang_local_name']),							'MISSING_FILES'			=> implode('<br />', $missing_files))						);					}					if ($is_missing_var)					{						$template->assign_vars(array(							'S_MISSING_VARS'			=> true,							'L_MISSING_VARS_EXPLAIN'	=> sprintf($user->lang['THOSE_MISSING_LANG_VARIABLES'], $lang_entries['lang_local_name']),							'U_MISSING_ACTION'			=> $this->u_action . "&amp;action=$action&amp;id=$lang_id")						);						foreach ($missing_vars as $file => $vars)						{							if (!sizeof($vars))							{								continue;							}							$template->assign_block_vars('missing', array(								'FILE'			=> $file,								'TPL'			=> $this->print_language_entries($vars, '', false),								'KEY'			=> (strpos($file, '/') === false) ? '|' . $file : str_replace('/', '|', $file))							);						}					}				}				// Main language files				$s_lang_options = '<option value="|common.' . $phpEx . '" class="sep">' . $user->lang['LANGUAGE_FILES'] . '</option>';				foreach ($this->main_files as $file)				{					if (strpos($file, 'help_') === 0)					{						continue;					}					$prefix = (file_exists($phpbb_root_path . $this->get_filename($lang_iso, '', $file, true, true))) ? '* ' : '';					$selected = (!$this->language_directory && $this->language_file == $file) ? ' selected="selected"' : '';					$s_lang_options .= '<option value="|' . $file . '"' . $selected . '>' . $prefix . $file . '</option>';				}				// Help Files				$s_lang_options .= '<option value="|common.' . $phpEx . '" class="sep">' . $user->lang['HELP_FILES'] . '</option>';				foreach ($this->main_files as $file)				{					if (strpos($file, 'help_') !== 0)					{						continue;					}					$prefix = (file_exists($phpbb_root_path . $this->get_filename($lang_iso, '', $file, true, true))) ? '* ' : '';					$selected = (!$this->language_directory && $this->language_file == $file) ? ' selected="selected"' : '';					$s_lang_options .= '<option value="|' . $file . '"' . $selected . '>' . $prefix . $file . '</option>';				}				// Now every other language directory				$check_files = array('email', 'acp', 'mods');				foreach ($check_files as $check)				{					if (!sizeof(${$check . '_files'}))					{						continue;					}					$s_lang_options .= '<option value="|common.' . $phpEx . '" class="sep">' . $user->lang[strtoupper($check) . '_FILES'] . '</option>';					foreach (${$check . '_files'} as $file)					{						$prefix = (file_exists($phpbb_root_path . $this->get_filename($lang_iso, $check, $file, true, true))) ? '* ' : '';						$selected = ($this->language_directory == $check && $this->language_file == $file) ? ' selected="selected"' : '';						$s_lang_options .= '<option value="' . $check . '|' . $file . '"' . $selected . '>' . $prefix . $file . '</option>';					}				}				// Get Language Entries - if saved within store folder, we take this one (with the option to remove it)				$lang = array();				$is_email_file = ($this->language_directory == 'email') ? true : false;				$is_help_file = (strpos($this->language_file, 'help_') === 0) ? true : false;				$file_from_store = (file_exists($phpbb_root_path . $this->get_filename($lang_iso, $this->language_directory, $this->language_file, true, true))) ? true : false;				$no_store_filename = $this->get_filename($lang_iso, $this->language_directory, $this->language_file);				if (!$file_from_store && !file_exists($phpbb_root_path . $no_store_filename))				{					$print_message = sprintf($user->lang['MISSING_LANGUAGE_FILE'], $no_store_filename);				}				else				{					if ($is_email_file)					{						$lang = file_get_contents($phpbb_root_path . $this->get_filename($lang_iso, $this->language_directory, $this->language_file, $file_from_store));					}					else					{						$help = array();						include($phpbb_root_path . $this->get_filename($lang_iso, $this->language_directory, $this->language_file, $file_from_store));						if ($is_help_file)						{							$lang = $help;							unset($help);						}					}					$print_message = (($this->language_directory) ? $this->language_directory . '/' : '') . $this->language_file;				}				// Normal language pack entries				$template->assign_vars(array(					'U_ENTRY_ACTION'		=> $this->u_action . "&amp;action=details&amp;id=$lang_id#entries",					'S_EMAIL_FILE'			=> $is_email_file,					'S_FROM_STORE'			=> $file_from_store,					'S_LANG_OPTIONS'		=> $s_lang_options,					'PRINT_MESSAGE'			=> $print_message,					)				);				if (!$is_email_file)				{					$tpl = '';					$name = (($this->language_directory) ? $this->language_directory . '/' : '') . $this->language_file;					if (isset($missing_vars[$name]) && sizeof($missing_vars[$name]))					{						$tpl .= $this->print_language_entries($missing_vars[$name], '* ');					}					$tpl .= $this->print_language_entries($lang);					$template->assign_var('TPL', $tpl);					unset($tpl);				}				else				{					$template->assign_vars(array(						'LANG'		=> $lang)					);					unset($lang);				}				return;			break;			case 'delete':				if (!$lang_id)				{					trigger_error($user->lang['NO_LANG_ID'] . adm_back_link($this->u_action), E_USER_WARNING);				}				$sql = 'SELECT *					FROM ' . LANG_TABLE . '					WHERE lang_id = ' . $lang_id;				$result = $db->sql_query($sql);				$row = $db->sql_fetchrow($result);				$db->sql_freeresult($result);				if ($row['lang_iso'] == $config['default_lang'])				{					trigger_error($user->lang['NO_REMOVE_DEFAULT_LANG'] . adm_back_link($this->u_action), E_USER_WARNING);				}				if (confirm_box(true))				{					$db->sql_query('DELETE FROM ' . LANG_TABLE . ' WHERE lang_id = ' . $lang_id);					$sql = 'UPDATE ' . USERS_TABLE . "						SET user_lang = '" . $db->sql_escape($config['default_lang']) . "'						WHERE user_lang = '" . $db->sql_escape($row['lang_iso']) . "'";					$db->sql_query($sql);					// We also need to remove the translated entries for custom profile fields - we want clean tables, don't we?					$sql = 'DELETE FROM ' . PROFILE_LANG_TABLE . ' WHERE lang_id = ' . $lang_id;					$db->sql_query($sql);					$sql = 'DELETE FROM ' . PROFILE_FIELDS_LANG_TABLE . ' WHERE lang_id = ' . $lang_id;					$db->sql_query($sql);					$sql = 'DELETE FROM ' . STYLES_IMAGESET_DATA_TABLE . " WHERE image_lang = '" . $db->sql_escape($row['lang_iso']) . "'";					$result = $db->sql_query($sql);					$cache->destroy('sql', STYLES_IMAGESET_DATA_TABLE);					add_log('admin', 'LOG_LANGUAGE_PACK_DELETED', $row['lang_english_name']);					trigger_error(sprintf($user->lang['LANGUAGE_PACK_DELETED'], $row['lang_english_name']) . adm_back_link($this->u_action));				}				else				{					$s_hidden_fields = array(						'i'			=> $id,						'mode'		=> $mode,						'action'	=> $action,						'id'		=> $lang_id,					);					confirm_box(false, $user->lang['CONFIRM_OPERATION'], build_hidden_fields($s_hidden_fields));				}			break;			case 'install':				$lang_iso = request_var('iso', '');				$lang_iso = basename($lang_iso);				if (!$lang_iso || !file_exists("{$phpbb_root_path}language/$lang_iso/iso.txt"))				{					trigger_error($user->lang['LANGUAGE_PACK_NOT_EXIST'] . adm_back_link($this->u_action), E_USER_WARNING);				}				$file = file("{$phpbb_root_path}language/$lang_iso/iso.txt");				$lang_pack = array(					'iso'		=> $lang_iso,					'name'		=> trim(htmlspecialchars($file[0])),					'local_name'=> trim(htmlspecialchars($file[1], ENT_COMPAT, 'UTF-8')),					'author'	=> trim(htmlspecialchars($file[2], ENT_COMPAT, 'UTF-8'))				);				unset($file);				$sql = 'SELECT lang_iso					FROM ' . LANG_TABLE . "					WHERE lang_iso = '" . $db->sql_escape($lang_iso) . "'";				$result = $db->sql_query($sql);				$row = $db->sql_fetchrow($result);				$db->sql_freeresult($result);				if ($row)				{					trigger_error($user->lang['LANGUAGE_PACK_ALREADY_INSTALLED'] . adm_back_link($this->u_action), E_USER_WARNING);				}				if (!$lang_pack['name'] || !$lang_pack['local_name'])				{					trigger_error($user->lang['INVALID_LANGUAGE_PACK'] . adm_back_link($this->u_action), E_USER_WARNING);				}				// Add language pack				$sql_ary = array(					'lang_iso'			=> $lang_pack['iso'],					'lang_dir'			=> $lang_pack['iso'],					'lang_english_name'	=> $lang_pack['name'],					'lang_local_name'	=> $lang_pack['local_name'],					'lang_author'		=> $lang_pack['author']				);				$db->sql_query('INSERT INTO ' . LANG_TABLE . ' ' . $db->sql_build_array('INSERT', $sql_ary));				$lang_id = $db->sql_nextid();				$valid_localized = array(					'icon_back_top', 'icon_contact_aim', 'icon_contact_email', 'icon_contact_icq', 'icon_contact_jabber', 'icon_contact_msnm', 'icon_contact_pm', 'icon_contact_yahoo', 'icon_contact_www', 'icon_post_delete', 'icon_post_edit', 'icon_post_info', 'icon_post_quote', 'icon_post_report', 'icon_user_online', 'icon_user_offline', 'icon_user_profile', 'icon_user_search', 'icon_user_warn', 'button_pm_forward', 'button_pm_new', 'button_pm_reply', 'button_topic_locked', 'button_topic_new', 'button_topic_reply',				);				$sql_ary = array();				$sql = 'SELECT *					FROM ' . STYLES_IMAGESET_TABLE;				$result = $db->sql_query($sql);				while ($imageset_row = $db->sql_fetchrow($result))				{					if (@file_exists("{$phpbb_root_path}styles/{$imageset_row['imageset_path']}/imageset/{$lang_pack['iso']}/imageset.cfg"))					{						$cfg_data_imageset_data = parse_cfg_file("{$phpbb_root_path}styles/{$imageset_row['imageset_path']}/imageset/{$lang_pack['iso']}/imageset.cfg");						foreach ($cfg_data_imageset_data as $image_name => $value)						{							if (strpos($value, '*') !== false)							{								if (substr($value, -1, 1) === '*')								{									list($image_filename, $image_height) = explode('*', $value);									$image_width = 0;								}								else								{									list($image_filename, $image_height, $image_width) = explode('*', $value);								}							}							else							{								$image_filename = $value;								$image_height = $image_width = 0;							}							if (strpos($image_name, 'img_') === 0 && $image_filename)							{								$image_name = substr($image_name, 4);								if (in_array($image_name, $valid_localized))								{									$sql_ary[] = array(										'image_name'		=> (string) $image_name,										'image_filename'	=> (string) $image_filename,										'image_height'		=> (int) $image_height,										'image_width'		=> (int) $image_width,										'imageset_id'		=> (int) $imageset_row['imageset_id'],										'image_lang'		=> (string) $lang_pack['iso'],									);								}							}						}					}				}				$db->sql_freeresult($result);				if (sizeof($sql_ary))				{					$db->sql_multi_insert(STYLES_IMAGESET_DATA_TABLE, $sql_ary);					$cache->destroy('sql', STYLES_IMAGESET_DATA_TABLE);				}				// Now let's copy the default language entries for custom profile fields for this new language - makes admin's life easier.				$sql = 'SELECT lang_id					FROM ' . LANG_TABLE . "					WHERE lang_iso = '" . $db->sql_escape($config['default_lang']) . "'";				$result = $db->sql_query($sql);				$default_lang_id = (int) $db->sql_fetchfield('lang_id');				$db->sql_freeresult($result);				// We want to notify the admin that custom profile fields need to be updated for the new language.				$notify_cpf_update = false;				// From the mysql documentation:				// Prior to MySQL 4.0.14, the target table of the INSERT statement cannot appear in the FROM clause of the SELECT part of the query. This limitation is lifted in 4.0.14.				// Due to this we stay on the safe side if we do the insertion "the manual way"				$sql = 'SELECT field_id, lang_name, lang_explain, lang_default_value					FROM ' . PROFILE_LANG_TABLE . '					WHERE lang_id = ' . $default_lang_id;				$result = $db->sql_query($sql);				while ($row = $db->sql_fetchrow($result))				{					$row['lang_id'] = $lang_id;					$db->sql_query('INSERT INTO ' . PROFILE_LANG_TABLE . ' ' . $db->sql_build_array('INSERT', $row));					$notify_cpf_update = true;				}				$db->sql_freeresult($result);				$sql = 'SELECT field_id, option_id, field_type, lang_value					FROM ' . PROFILE_FIELDS_LANG_TABLE . '					WHERE lang_id = ' . $default_lang_id;				$result = $db->sql_query($sql);				while ($row = $db->sql_fetchrow($result))				{					$row['lang_id'] = $lang_id;					$db->sql_query('INSERT INTO ' . PROFILE_FIELDS_LANG_TABLE . ' ' . $db->sql_build_array('INSERT', $row));					$notify_cpf_update = true;				}				$db->sql_freeresult($result);				add_log('admin', 'LOG_LANGUAGE_PACK_INSTALLED', $lang_pack['name']);				$message = sprintf($user->lang['LANGUAGE_PACK_INSTALLED'], $lang_pack['name']);				$message .= ($notify_cpf_update) ? '<br /><br />' . $user->lang['LANGUAGE_PACK_CPF_UPDATE'] : '';				trigger_error($message . adm_back_link($this->u_action));			break;			case 'download':				if (!$lang_id)				{					trigger_error($user->lang['NO_LANG_ID'] . adm_back_link($this->u_action), E_USER_WARNING);				}				$sql = 'SELECT *					FROM ' . LANG_TABLE . '					WHERE lang_id = ' . $lang_id;				$result = $db->sql_query($sql);				$row = $db->sql_fetchrow($result);				$db->sql_freeresult($result);				$use_method = request_var('use_method', '');				$methods = array('.tar');				$available_methods = array('.tar.gz' => 'zlib', '.tar.bz2' => 'bz2', '.zip' => 'zlib');				foreach ($available_methods as $type => $module)				{					if (!@extension_loaded($module))					{						continue;					}					$methods[] = $type;				}				// Let the user decide in which format he wants to have the pack				if (!$use_method)				{					$this->page_title = 'SELECT_DOWNLOAD_FORMAT';					$radio_buttons = '';					foreach ($methods as $method)					{						$radio_buttons .= '<label><input type="radio"' . ((!$radio_buttons) ? ' id="use_method"' : '') . ' class="radio" value="' . $method . '" name="use_method" /> ' . $method . '</label>';					}					$template->assign_vars(array(						'S_SELECT_METHOD'		=> true,						'U_BACK'				=> $this->u_action,						'U_ACTION'				=> $this->u_action . "&amp;action=$action&amp;id=$lang_id",						'RADIO_BUTTONS'			=> $radio_buttons)					);					return;				}				if (!in_array($use_method, $methods))				{					$use_method = '.tar';				}				include_once($phpbb_root_path . 'includes/functions_compress.' . $phpEx);				if ($use_method == '.zip')				{					$compress = new compress_zip('w', $phpbb_root_path . 'store/lang_' . $row['lang_iso'] . $use_method);				}				else				{					$compress = new compress_tar('w', $phpbb_root_path . 'store/lang_' . $row['lang_iso'] . $use_method, $use_method);				}				// Get email templates				$email_templates = filelist($phpbb_root_path . 'language/' . $row['lang_iso'], 'email', 'txt');				$email_templates = $email_templates['email/'];				// Get acp files				$acp_files = filelist($phpbb_root_path . 'language/' . $row['lang_iso'], 'acp', $phpEx);				$acp_files = $acp_files['acp/'];				// Get mod files				$mod_files = filelist($phpbb_root_path . 'language/' . $row['lang_iso'], 'mods', $phpEx);				$mod_files = (isset($mod_files['mods/'])) ? $mod_files['mods/'] : array();				// Add main files				$this->add_to_archive($compress, $this->main_files, $row['lang_iso']);				// Add search files if they exist...				if (file_exists($phpbb_root_path . 'language/' . $row['lang_iso'] . '/search_ignore_words.' . $phpEx))				{					$this->add_to_archive($compress, array("search_ignore_words.$phpEx"), $row['lang_iso']);				}				if (file_exists($phpbb_root_path . 'language/' . $row['lang_iso'] . '/search_synonyms.' . $phpEx))				{					$this->add_to_archive($compress, array("search_synonyms.$phpEx"), $row['lang_iso']);				}				// Write files in folders				$this->add_to_archive($compress, $email_templates, $row['lang_iso'], 'email');				$this->add_to_archive($compress, $acp_files, $row['lang_iso'], 'acp');				$this->add_to_archive($compress, $mod_files, $row['lang_iso'], 'mods');				// Write ISO File				$iso_src = htmlspecialchars_decode($row['lang_english_name']) . "\n";				$iso_src .= htmlspecialchars_decode($row['lang_local_name']) . "\n";				$iso_src .= htmlspecialchars_decode($row['lang_author']);				$compress->add_data($iso_src, 'language/' . $row['lang_iso'] . '/iso.txt');				// index.htm files				$compress->add_data('', 'language/' . $row['lang_iso'] . '/index.htm');				$compress->add_data('', 'language/' . $row['lang_iso'] . '/email/index.htm');				$compress->add_data('', 'language/' . $row['lang_iso'] . '/acp/index.htm');				if (sizeof($mod_files))				{					$compress->add_data('', 'language/' . $row['lang_iso'] . '/mods/index.htm');				}				$compress->close();				$compress->download('lang_' . $row['lang_iso']);				@unlink($phpbb_root_path . 'store/lang_' . $row['lang_iso'] . $use_method);				exit;			break;		}		$sql = 'SELECT user_lang, COUNT(user_lang) AS lang_count			FROM ' . USERS_TABLE . '			GROUP BY user_lang';		$result = $db->sql_query($sql);		$lang_count = array();		while ($row = $db->sql_fetchrow($result))		{			$lang_count[$row['user_lang']] = $row['lang_count'];		}		$db->sql_freeresult($result);		$sql = 'SELECT *			FROM ' . LANG_TABLE . '			ORDER BY lang_english_name';		$result = $db->sql_query($sql);		$installed = array();		while ($row = $db->sql_fetchrow($result))		{			$installed[] = $row['lang_iso'];			$tagstyle = ($row['lang_iso'] == $config['default_lang']) ? '*' : '';			$template->assign_block_vars('lang', array(				'U_DETAILS'			=> $this->u_action . "&amp;action=details&amp;id={$row['lang_id']}",				'U_DOWNLOAD'		=> $this->u_action . "&amp;action=download&amp;id={$row['lang_id']}",				'U_DELETE'			=> $this->u_action . "&amp;action=delete&amp;id={$row['lang_id']}",				'ENGLISH_NAME'		=> $row['lang_english_name'],				'TAG'				=> $tagstyle,				'LOCAL_NAME'		=> $row['lang_local_name'],				'ISO'				=> $row['lang_iso'],				'USED_BY'			=> (isset($lang_count[$row['lang_iso']])) ? $lang_count[$row['lang_iso']] : 0,			));		}		$db->sql_freeresult($result);		$new_ary = $iso = array();		$dp = @opendir("{$phpbb_root_path}language");		if ($dp)		{			while (($file = readdir($dp)) !== false)			{				if ($file[0] == '.' || !is_dir($phpbb_root_path . 'language/' . $file))				{					continue;				}				if (file_exists("{$phpbb_root_path}language/$file/iso.txt"))				{					if (!in_array($file, $installed))					{						if ($iso = file("{$phpbb_root_path}language/$file/iso.txt"))						{							if (sizeof($iso) == 3)							{								$new_ary[$file] = array(									'iso'		=> $file,									'name'		=> trim($iso[0]),									'local_name'=> trim($iso[1]),									'author'	=> trim($iso[2])								);							}						}					}				}			}			closedir($dp);		}		unset($installed);		if (sizeof($new_ary))		{			foreach ($new_ary as $iso => $lang_ary)			{				$template->assign_block_vars('notinst', array(					'ISO'			=> htmlspecialchars($lang_ary['iso']),					'LOCAL_NAME'	=> htmlspecialchars($lang_ary['local_name'], ENT_COMPAT, 'UTF-8'),					'NAME'			=> htmlspecialchars($lang_ary['name'], ENT_COMPAT, 'UTF-8'),					'U_INSTALL'		=> $this->u_action . '&amp;action=install&amp;iso=' . urlencode($lang_ary['iso']))				);			}		}		unset($new_ary);	}	/**	* Set default language variables/header	*/	function default_variables()	{		global $phpEx;		$this->language_file_header = '<?php/**** {FILENAME} [{LANG_NAME}]** @package language* @version $' . 'Id: ' . '$* @copyright (c) ' . date('Y') . ' phpBB Group* @author {CHANGED} - {AUTHOR}* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** DO NOT CHANGE*/if (!defined(\'IN_PHPBB\')){	exit;}if (empty($lang) || !is_array($lang)){	$lang = array();}// DEVELOPERS PLEASE NOTE//// All language files should use UTF-8 as their encoding and the files must not contain a BOM.//// Placeholders can now contain order information, e.g. instead of// \'Page %s of %s\' you can (and should) write \'Page %1$s of %2$s\', this allows// translators to re-order the output of data while ensuring it remains correct//// You do not need this where single placeholders are used, e.g. \'Message %d\' is fine// equally where a string contains only two placeholders which are used to wrap text// in a url you again do not need to specify an order e.g., \'Click %sHERE%s\' is fine';		$this->lang_header = '$lang = array_merge($lang, array(';		// Language files in language root directory		$this->main_files = array("captcha_qa.$phpEx", "captcha_recaptcha.$phpEx", "common.$phpEx", "groups.$phpEx", "install.$phpEx", "mcp.$phpEx", "memberlist.$phpEx", "posting.$phpEx", "search.$phpEx", "ucp.$phpEx", "viewforum.$phpEx", "viewtopic.$phpEx", "help_bbcode.$phpEx", "help_faq.$phpEx");	}	/**	* Get filename/location of language file	*/	function get_filename($lang_iso, $directory, $filename, $check_store = false, $only_return_filename = false)	{		global $phpbb_root_path, $safe_mode;		$check_filename = "language/$lang_iso/" . (($directory) ? $directory . '/' : '') . $filename;		if ($check_store)		{			$check_store_filename = ($safe_mode) ? "store/langfile_{$lang_iso}" . (($directory) ? '_' . $directory : '') . "_{$filename}" : "store/language/$lang_iso/" . (($directory) ? $directory . '/' : '') . $filename;			if (!$only_return_filename && file_exists($phpbb_root_path . $check_store_filename))			{				return $check_store_filename;			}			else if ($only_return_filename)			{				return $check_store_filename;			}		}		return $check_filename;	}	/**	* Add files to archive	*/	function add_to_archive(&$compress, $filelist, $lang_iso, $directory = '')	{		global $phpbb_root_path;		foreach ($filelist as $file)		{			// Get source filename			$source = $this->get_filename($lang_iso, $directory, $file, true);			$destination = 'language/' . $lang_iso . '/' . (($directory) ? $directory . '/' : '') . $file;			// Add file to archive			$compress->add_custom_file($phpbb_root_path . $source, $destination);		}	}	/**	* Little helper to add some hardcoded template bits	*/	function add_input_field()	{		$keys = func_get_args();		$non_static		= array_shift($keys);		$value			= utf8_normalize_nfc(array_shift($keys));		if (!$non_static)		{			return '<strong>' . htmlspecialchars($value, ENT_COMPAT, 'UTF-8') . '</strong>';		}		// If more then 270 characters, then we present a textarea, else an input field		$textarea = (utf8_strlen($value) > 270) ? true : false;		$tpl = '';		$tpl .= ($textarea) ? '<textarea name="' : '<input type="text" name="';		$tpl .= 'entry[' . implode('][', array_map('utf8_htmlspecialchars', $keys)) . ']"';		$tpl .= ($textarea) ? ' cols="80" rows="5" class="langvalue">' : ' class="langvalue" value="';		$tpl .= htmlspecialchars($value, ENT_COMPAT, 'UTF-8');		$tpl .= ($textarea) ? '</textarea>' : '" />';		return $tpl;	}	/**	* Print language entries	*/	function print_language_entries(&$lang_ary, $key_prefix = '', $input_field = true)	{		$tpl = '';		foreach ($lang_ary as $key => $value)		{			if (is_array($value))			{				// Write key				$tpl .= '				<tr>					<td class="row3" colspan="2">' . htmlspecialchars($key_prefix, ENT_COMPAT, 'UTF-8') . '<strong>' . htmlspecialchars($key, ENT_COMPAT, 'UTF-8') . '</strong></td>				</tr>';				foreach ($value as $_key => $_value)				{					if (is_array($_value))					{						// Write key						$tpl .= '							<tr>								<td class="row3" colspan="2">' . htmlspecialchars($key_prefix, ENT_COMPAT, 'UTF-8') . '&nbsp; &nbsp;<strong>' . htmlspecialchars($_key, ENT_COMPAT, 'UTF-8') . '</strong></td>							</tr>';						foreach ($_value as $__key => $__value)						{							// Write key							$tpl .= '								<tr>									<td class="row1" style="white-space: nowrap;">' . htmlspecialchars($key_prefix, ENT_COMPAT, 'UTF-8') . '<strong>' . htmlspecialchars($__key, ENT_COMPAT, 'UTF-8') . '</strong></td>									<td class="row2">';							$tpl .= $this->add_input_field($input_field, $__value, $key, $_key, $__key);							$tpl .= '</td>								</tr>';						}					}					else					{						// Write key						$tpl .= '							<tr>								<td class="row1" style="white-space: nowrap;">' . htmlspecialchars($key_prefix, ENT_COMPAT, 'UTF-8') . '<strong>' . htmlspecialchars($_key, ENT_COMPAT, 'UTF-8') . '</strong></td>								<td class="row2">';						$tpl .= $this->add_input_field($input_field, $_value, $key, $_key);						$tpl .= '</td>							</tr>';					}				}				$tpl .= '				<tr>					<td class="spacer" colspan="2">&nbsp;</td>				</tr>';			}			else			{				// Write key				$tpl .= '				<tr>					<td class="row1" style="white-space: nowrap;">' . htmlspecialchars($key_prefix, ENT_COMPAT, 'UTF-8') . '<strong>' . htmlspecialchars($key, ENT_COMPAT, 'UTF-8') . '</strong></td>					<td class="row2">';				$tpl .= $this->add_input_field($input_field, $value, $key);				$tpl .= '</td>					</tr>';			}		}		return $tpl;	}	/**	* Compare two language files	*/	function compare_language_files($source_lang, $dest_lang, $directory, $file)	{		global $phpbb_root_path, $phpEx;		$return_ary = array();		$lang = array();		include("{$phpbb_root_path}language/{$source_lang}/" . (($directory) ? $directory . '/' : '') . $file);		$lang_entry_src = $lang;		$lang = array();		if (!file_exists($phpbb_root_path . $this->get_filename($dest_lang, $directory, $file, true)))		{			return array();		}		include($phpbb_root_path . $this->get_filename($dest_lang, $directory, $file, true));		$lang_entry_dst = $lang;		unset($lang);		$diff_array_keys = array_diff(array_keys($lang_entry_src), array_keys($lang_entry_dst));		unset($lang_entry_dst);		foreach ($diff_array_keys as $key)		{			$return_ary[$key] = $lang_entry_src[$key];		}		unset($lang_entry_src);		return $return_ary;	}	/**	* Return language string value for storage	*/	function prepare_lang_entry($text, $store = true)	{		$text = (STRIP) ? stripslashes($text) : $text;		// Adjust for storage...		if ($store)		{			$text = str_replace("'", "\\'", str_replace('\\', '\\\\', $text));		}		return $text;	}	/**	* Format language array for storage	*/	function format_lang_array($key, $value, $tabs = "\t")	{		$entry = '';		if (!is_array($value))		{			$entry .= "{$tabs}'" . $this->prepare_lang_entry($key) . "'\t=> '" . $this->prepare_lang_entry($value) . "',\n";		}		else		{			$_tabs = $tabs . "\t";			$entry .= "\n{$tabs}'" . $this->prepare_lang_entry($key) . "'\t=> array(\n";			foreach ($value as $_key => $_value)			{				$entry .= $this->format_lang_array($_key, $_value, $_tabs);			}			$entry .= "{$tabs}),\n\n";		}		return $entry;	}}?>
<?php/**** @package acp* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @ignore*/if (!defined('IN_PHPBB')){	exit;}/*** @package acp*/class acp_bbcodes{	var $u_action;	function main($id, $mode)	{		global $db, $user, $auth, $template, $cache;		global $config, $phpbb_root_path, $phpbb_admin_path, $phpEx;		$user->add_lang('acp/posting');		// Set up general vars		$action	= request_var('action', '');		$bbcode_id = request_var('bbcode', 0);		$this->tpl_name = 'acp_bbcodes';		$this->page_title = 'ACP_BBCODES';		$form_key = 'acp_bbcodes';		add_form_key($form_key);		// Set up mode-specific vars		switch ($action)		{			case 'add':				$bbcode_match = $bbcode_tpl = $bbcode_helpline = '';				$display_on_posting = 0;			break;			case 'edit':				$sql = 'SELECT bbcode_match, bbcode_tpl, display_on_posting, bbcode_helpline					FROM ' . BBCODES_TABLE . '					WHERE bbcode_id = ' . $bbcode_id;				$result = $db->sql_query($sql);				$row = $db->sql_fetchrow($result);				$db->sql_freeresult($result);				if (!$row)				{					trigger_error($user->lang['BBCODE_NOT_EXIST'] . adm_back_link($this->u_action), E_USER_WARNING);				}				$bbcode_match = $row['bbcode_match'];				$bbcode_tpl = htmlspecialchars($row['bbcode_tpl']);				$display_on_posting = $row['display_on_posting'];				$bbcode_helpline = $row['bbcode_helpline'];			break;			case 'modify':				$sql = 'SELECT bbcode_id, bbcode_tag					FROM ' . BBCODES_TABLE . '					WHERE bbcode_id = ' . $bbcode_id;				$result = $db->sql_query($sql);				$row = $db->sql_fetchrow($result);				$db->sql_freeresult($result);				if (!$row)				{					trigger_error($user->lang['BBCODE_NOT_EXIST'] . adm_back_link($this->u_action), E_USER_WARNING);				}			// No break here			case 'create':				$display_on_posting = request_var('display_on_posting', 0);				$bbcode_match = request_var('bbcode_match', '');				$bbcode_tpl = htmlspecialchars_decode(utf8_normalize_nfc(request_var('bbcode_tpl', '', true)));				$bbcode_helpline = utf8_normalize_nfc(request_var('bbcode_helpline', '', true));			break;		}		// Do major work		switch ($action)		{			case 'edit':			case 'add':				$template->assign_vars(array(					'S_EDIT_BBCODE'		=> true,					'U_BACK'			=> $this->u_action,					'U_ACTION'			=> $this->u_action . '&amp;action=' . (($action == 'add') ? 'create' : 'modify') . (($bbcode_id) ? "&amp;bbcode=$bbcode_id" : ''),					'L_BBCODE_USAGE_EXPLAIN'=> sprintf($user->lang['BBCODE_USAGE_EXPLAIN'], '<a href="#down">', '</a>'),					'BBCODE_MATCH'			=> $bbcode_match,					'BBCODE_TPL'			=> $bbcode_tpl,					'BBCODE_HELPLINE'		=> $bbcode_helpline,					'DISPLAY_ON_POSTING'	=> $display_on_posting)				);				foreach ($user->lang['tokens'] as $token => $token_explain)				{					$template->assign_block_vars('token', array(						'TOKEN'		=> '{' . $token . '}',						'EXPLAIN'	=> $token_explain)					);				}				return;			break;			case 'modify':			case 'create':				$warn_text = preg_match('%<[^>]*\{text[\d]*\}[^>]*>%i', $bbcode_tpl);				if (!$warn_text || confirm_box(true))				{					$data = $this->build_regexp($bbcode_match, $bbcode_tpl);					// Make sure the user didn't pick a "bad" name for the BBCode tag.					$hard_coded = array('code', 'quote', 'quote=', 'attachment', 'attachment=', 'b', 'i', 'url', 'url=', 'img', 'size', 'size=', 'color', 'color=', 'u', 'list', 'list=', 'email', 'email=', 'flash', 'flash=');					if (($action == 'modify' && strtolower($data['bbcode_tag']) !== strtolower($row['bbcode_tag'])) || ($action == 'create'))					{						$sql = 'SELECT 1 as test							FROM ' . BBCODES_TABLE . "							WHERE LOWER(bbcode_tag) = '" . $db->sql_escape(strtolower($data['bbcode_tag'])) . "'";						$result = $db->sql_query($sql);						$info = $db->sql_fetchrow($result);						$db->sql_freeresult($result);						// Grab the end, interrogate the last closing tag						if ($info['test'] === '1' || in_array(strtolower($data['bbcode_tag']), $hard_coded) || (preg_match('#\[/([^[]*)]$#', $bbcode_match, $regs) && in_array(strtolower($regs[1]), $hard_coded)))						{							trigger_error($user->lang['BBCODE_INVALID_TAG_NAME'] . adm_back_link($this->u_action), E_USER_WARNING);						}					}					if (substr($data['bbcode_tag'], -1) === '=')					{						$test = substr($data['bbcode_tag'], 0, -1);					}					else					{						$test = $data['bbcode_tag'];					}					if (!preg_match('%\\[' . $test . '[^]]*].*?\\[/' . $test . ']%s', $bbcode_match))					{						trigger_error($user->lang['BBCODE_OPEN_ENDED_TAG'] . adm_back_link($this->u_action), E_USER_WARNING);					}					if (strlen($data['bbcode_tag']) > 16)					{						trigger_error($user->lang['BBCODE_TAG_TOO_LONG'] . adm_back_link($this->u_action), E_USER_WARNING);					}					if (strlen($bbcode_match) > 4000)					{						trigger_error($user->lang['BBCODE_TAG_DEF_TOO_LONG'] . adm_back_link($this->u_action), E_USER_WARNING);					}					if (strlen($bbcode_helpline) > 255)					{						trigger_error($user->lang['BBCODE_HELPLINE_TOO_LONG'] . adm_back_link($this->u_action), E_USER_WARNING);					}					$sql_ary = array(						'bbcode_tag'				=> $data['bbcode_tag'],						'bbcode_match'				=> $bbcode_match,						'bbcode_tpl'				=> $bbcode_tpl,						'display_on_posting'		=> $display_on_posting,						'bbcode_helpline'			=> $bbcode_helpline,						'first_pass_match'			=> $data['first_pass_match'],						'first_pass_replace'		=> $data['first_pass_replace'],						'second_pass_match'			=> $data['second_pass_match'],						'second_pass_replace'		=> $data['second_pass_replace']					);					if ($action == 'create')					{						$sql = 'SELECT MAX(bbcode_id) as max_bbcode_id							FROM ' . BBCODES_TABLE;						$result = $db->sql_query($sql);						$row = $db->sql_fetchrow($result);						$db->sql_freeresult($result);						if ($row)						{							$bbcode_id = $row['max_bbcode_id'] + 1;							// Make sure it is greater than the core bbcode ids...							if ($bbcode_id <= NUM_CORE_BBCODES)							{								$bbcode_id = NUM_CORE_BBCODES + 1;							}						}						else						{							$bbcode_id = NUM_CORE_BBCODES + 1;						}						if ($bbcode_id > BBCODE_LIMIT)						{							trigger_error($user->lang['TOO_MANY_BBCODES'] . adm_back_link($this->u_action), E_USER_WARNING);						}						$sql_ary['bbcode_id'] = (int) $bbcode_id;						$db->sql_query('INSERT INTO ' . BBCODES_TABLE . $db->sql_build_array('INSERT', $sql_ary));						$cache->destroy('sql', BBCODES_TABLE);						$lang = 'BBCODE_ADDED';						$log_action = 'LOG_BBCODE_ADD';					}					else					{						$sql = 'UPDATE ' . BBCODES_TABLE . '							SET ' . $db->sql_build_array('UPDATE', $sql_ary) . '							WHERE bbcode_id = ' . $bbcode_id;						$db->sql_query($sql);						$cache->destroy('sql', BBCODES_TABLE);						$lang = 'BBCODE_EDITED';						$log_action = 'LOG_BBCODE_EDIT';					}					add_log('admin', $log_action, $data['bbcode_tag']);					trigger_error($user->lang[$lang] . adm_back_link($this->u_action));				}				else				{					confirm_box(false, $user->lang['BBCODE_DANGER'], build_hidden_fields(array(						'action'				=> $action,						'bbcode'				=> $bbcode_id,						'bbcode_match'			=> $bbcode_match,						'bbcode_tpl'			=> htmlspecialchars($bbcode_tpl),						'bbcode_helpline'		=> $bbcode_helpline,						'display_on_posting'	=> $display_on_posting,						))					, 'confirm_bbcode.html');				}			break;			case 'delete':				$sql = 'SELECT bbcode_tag					FROM ' . BBCODES_TABLE . "					WHERE bbcode_id = $bbcode_id";				$result = $db->sql_query($sql);				$row = $db->sql_fetchrow($result);				$db->sql_freeresult($result);				if ($row)				{					if (confirm_box(true))					{						$db->sql_query('DELETE FROM ' . BBCODES_TABLE . " WHERE bbcode_id = $bbcode_id");						$cache->destroy('sql', BBCODES_TABLE);						add_log('admin', 'LOG_BBCODE_DELETE', $row['bbcode_tag']);					}					else					{						confirm_box(false, $user->lang['CONFIRM_OPERATION'], build_hidden_fields(array(							'bbcode'	=> $bbcode_id,							'i'			=> $id,							'mode'		=> $mode,							'action'	=> $action))						);					}				}			break;		}		$template->assign_vars(array(			'U_ACTION'		=> $this->u_action . '&amp;action=add')		);		$sql = 'SELECT *			FROM ' . BBCODES_TABLE . '			ORDER BY bbcode_tag';		$result = $db->sql_query($sql);		while ($row = $db->sql_fetchrow($result))		{			$template->assign_block_vars('bbcodes', array(				'BBCODE_TAG'		=> $row['bbcode_tag'],				'U_EDIT'			=> $this->u_action . '&amp;action=edit&amp;bbcode=' . $row['bbcode_id'],				'U_DELETE'			=> $this->u_action . '&amp;action=delete&amp;bbcode=' . $row['bbcode_id'])			);		}		$db->sql_freeresult($result);	}	/*	* Build regular expression for custom bbcode	*/	function build_regexp(&$bbcode_match, &$bbcode_tpl)	{		$bbcode_match = trim($bbcode_match);		$bbcode_tpl = trim($bbcode_tpl);		$utf8 = strpos($bbcode_match, 'INTTEXT') !== false;		// make sure we have utf8 support		$utf8_pcre_properties = false;		if (version_compare(PHP_VERSION, '5.1.0', '>=') || (version_compare(PHP_VERSION, '5.0.0-dev', '<=') && version_compare(PHP_VERSION, '4.4.0', '>=')))		{			// While this is the proper range of PHP versions, PHP may not be linked with the bundled PCRE lib and instead with an older version			if (@preg_match('/\p{L}/u', 'a') !== false)			{				$utf8_pcre_properties = true;			}		}		$fp_match = preg_quote($bbcode_match, '!');		$fp_replace = preg_replace('#^\[(.*?)\]#', '[$1:$uid]', $bbcode_match);		$fp_replace = preg_replace('#\[/(.*?)\]$#', '[/$1:$uid]', $fp_replace);		$sp_match = preg_quote($bbcode_match, '!');		$sp_match = preg_replace('#^\\\\\[(.*?)\\\\\]#', '\[$1:$uid\]', $sp_match);		$sp_match = preg_replace('#\\\\\[/(.*?)\\\\\]$#', '\[/$1:$uid\]', $sp_match);		$sp_replace = $bbcode_tpl;		// @todo Make sure to change this too if something changed in message parsing		$tokens = array(			'URL'	 => array(				'!(?:(' . str_replace(array('!', '\#'), array('\!', '#'), get_preg_expression('url')) . ')|(' . str_replace(array('!', '\#'), array('\!', '#'), get_preg_expression('www_url')) . '))!ie'	=>	"\$this->bbcode_specialchars(('\$1') ? '\$1' : 'http://\$2')"			),			'LOCAL_URL'	 => array(				'!(' . str_replace(array('!', '\#'), array('\!', '#'), get_preg_expression('relative_url')) . ')!e'	=>	"\$this->bbcode_specialchars('$1')"			),			'EMAIL' => array(				'!(' . get_preg_expression('email') . ')!ie'	=>	"\$this->bbcode_specialchars('$1')"			),			'TEXT' => array(				'!(.*?)!es'	 =>	"str_replace(array(\"\\r\\n\", '\\\"', '\\'', '(', ')'), array(\"\\n\", '\"', '&#39;', '&#40;', '&#41;'), trim('\$1'))"			),			'SIMPLETEXT' => array(				'!([a-zA-Z0-9-+.,_ ]+)!'	 =>	"$1"			),			'INTTEXT' => array(				($utf8_pcre_properties) ? '!([\p{L}\p{N}\-+,_. ]+)!u' : '!([a-zA-Z0-9\-+,_. ]+)!u'	 =>	"$1"			),			'IDENTIFIER' => array(				'!([a-zA-Z0-9-_]+)!'	 =>	"$1"			),			'COLOR' => array(				'!([a-z]+|#[0-9abcdef]+)!i'	=>	'$1'			),			'NUMBER' => array(				'!([0-9]+)!'	=>	'$1'			)		);		$sp_tokens = array(			'URL'	 => '(?i)((?:' . str_replace(array('!', '\#'), array('\!', '#'), get_preg_expression('url')) . ')|(?:' . str_replace(array('!', '\#'), array('\!', '#'), get_preg_expression('www_url')) . '))(?-i)',			'LOCAL_URL'	 => '(?i)(' . str_replace(array('!', '\#'), array('\!', '#'), get_preg_expression('relative_url')) . ')(?-i)',			'EMAIL' => '(' . get_preg_expression('email') . ')',			'TEXT' => '(.*?)',			'SIMPLETEXT' => '([a-zA-Z0-9-+.,_ ]+)',			'INTTEXT' => ($utf8_pcre_properties) ? '([\p{L}\p{N}\-+,_. ]+)' : '([a-zA-Z0-9\-+,_. ]+)',			'IDENTIFIER' => '([a-zA-Z0-9-_]+)',			'COLOR' => '([a-zA-Z]+|#[0-9abcdefABCDEF]+)',			'NUMBER' => '([0-9]+)',		);		$pad = 0;		$modifiers = 'i';		$modifiers .= ($utf8 && $utf8_pcre_properties) ? 'u' : '';		if (preg_match_all('/\{(' . implode('|', array_keys($tokens)) . ')[0-9]*\}/i', $bbcode_match, $m))		{			foreach ($m[0] as $n => $token)			{				$token_type = $m[1][$n];				reset($tokens[strtoupper($token_type)]);				list($match, $replace) = each($tokens[strtoupper($token_type)]);				// Pad backreference numbers from tokens				if (preg_match_all('/(?<!\\\\)\$([0-9]+)/', $replace, $repad))				{					$repad = $pad + sizeof(array_unique($repad[0]));					$replace = preg_replace('/(?<!\\\\)\$([0-9]+)/e', "'\${' . (\$1 + \$pad) . '}'", $replace);					$pad = $repad;				}				// Obtain pattern modifiers to use and alter the regex accordingly				$regex = preg_replace('/!(.*)!([a-z]*)/', '$1', $match);				$regex_modifiers = preg_replace('/!(.*)!([a-z]*)/', '$2', $match);				for ($i = 0, $size = strlen($regex_modifiers); $i < $size; ++$i)				{					if (strpos($modifiers, $regex_modifiers[$i]) === false)					{						$modifiers .= $regex_modifiers[$i];						if ($regex_modifiers[$i] == 'e')						{							$fp_replace = "'" . str_replace("'", "\\'", $fp_replace) . "'";						}					}					if ($regex_modifiers[$i] == 'e')					{						$replace = "'.$replace.'";					}				}				$fp_match = str_replace(preg_quote($token, '!'), $regex, $fp_match);				$fp_replace = str_replace($token, $replace, $fp_replace);				$sp_match = str_replace(preg_quote($token, '!'), $sp_tokens[$token_type], $sp_match);				$sp_replace = str_replace($token, '${' . ($n + 1) . '}', $sp_replace);			}			$fp_match = '!' . $fp_match . '!' . $modifiers;			$sp_match = '!' . $sp_match . '!s' . (($utf8) ? 'u' : '');			if (strpos($fp_match, 'e') !== false)			{				$fp_replace = str_replace("'.'", '', $fp_replace);				$fp_replace = str_replace(".''.", '.', $fp_replace);			}		}		else		{			// No replacement is present, no need for a second-pass pattern replacement			// A simple str_replace will suffice			$fp_match = '!' . $fp_match . '!' . $modifiers;			$sp_match = $fp_replace;			$sp_replace = '';		}		// Lowercase tags		$bbcode_tag = preg_replace('/.*?\[([a-z0-9_-]+=?).*/i', '$1', $bbcode_match);		$bbcode_search = preg_replace('/.*?\[([a-z0-9_-]+)=?.*/i', '$1', $bbcode_match);		if (!preg_match('/^[a-zA-Z0-9_-]+=?$/', $bbcode_tag))		{			global $user;			trigger_error($user->lang['BBCODE_INVALID'] . adm_back_link($this->u_action), E_USER_WARNING);		}		$fp_match = preg_replace('#\[/?' . $bbcode_search . '#ie', "strtolower('\$0')", $fp_match);		$fp_replace = preg_replace('#\[/?' . $bbcode_search . '#ie', "strtolower('\$0')", $fp_replace);		$sp_match = preg_replace('#\[/?' . $bbcode_search . '#ie', "strtolower('\$0')", $sp_match);		$sp_replace = preg_replace('#\[/?' . $bbcode_search . '#ie', "strtolower('\$0')", $sp_replace);		return array(			'bbcode_tag'				=> $bbcode_tag,			'first_pass_match'			=> $fp_match,			'first_pass_replace'		=> $fp_replace,			'second_pass_match'			=> $sp_match,			'second_pass_replace'		=> $sp_replace		);	}}?>
<?php// Not inluded within the standard distributionfunction gb2312($string){	static $transform = array(		"\xA1\xA1" => "\xE3\x80\x80",		"\xA1\xA2" => "\xE3\x80\x81",		"\xA1\xA3" => "\xE3\x80\x82",		"\xA1\xA4" => "\xE3\x83\xBB",		"\xA1\xA5" => "\xCB\x89",		"\xA1\xA6" => "\xCB\x87",		"\xA1\xA7" => "\xC2\xA8",		"\xA1\xA8" => "\xE3\x80\x83",		"\xA1\xA9" => "\xE3\x80\x85",		"\xA1\xAA" => "\xE2\x80\x95",		"\xA1\xAB" => "\xEF\xBD\x9E",		"\xA1\xAC" => "\xE2\x80\x96",		"\xA1\xAD" => "\xE2\x80\xA6",		"\xA1\xAE" => "\xE2\x80\x98",		"\xA1\xAF" => "\xE2\x80\x99",		"\xA1\xB0" => "\xE2\x80\x9C",		"\xA1\xB1" => "\xE2\x80\x9D",		"\xA1\xB2" => "\xE3\x80\x94",		"\xA1\xB3" => "\xE3\x80\x95",		"\xA1\xB4" => "\xE3\x80\x88",		"\xA1\xB5" => "\xE3\x80\x89",		"\xA1\xB6" => "\xE3\x80\x8A",		"\xA1\xB7" => "\xE3\x80\x8B",		"\xA1\xB8" => "\xE3\x80\x8C",		"\xA1\xB9" => "\xE3\x80\x8D",		"\xA1\xBA" => "\xE3\x80\x8E",		"\xA1\xBB" => "\xE3\x80\x8F",		"\xA1\xBC" => "\xE3\x80\x96",		"\xA1\xBD" => "\xE3\x80\x97",		"\xA1\xBE" => "\xE3\x80\x90",		"\xA1\xBF" => "\xE3\x80\x91",		"\xA1\xC0" => "\xC2\xB1",		"\xA1\xC1" => "\xC3\x97",		"\xA1\xC2" => "\xC3\xB7",		"\xA1\xC3" => "\xE2\x88\xB6",		"\xA1\xC4" => "\xE2\x88\xA7",		"\xA1\xC5" => "\xE2\x88\xA8",		"\xA1\xC6" => "\xE2\x88\x91",		"\xA1\xC7" => "\xE2\x88\x8F",		"\xA1\xC8" => "\xE2\x88\xAA",		"\xA1\xC9" => "\xE2\x88\xA9",		"\xA1\xCA" => "\xE2\x88\x88",		"\xA1\xCB" => "\xE2\x88\xB7",		"\xA1\xCC" => "\xE2\x88\x9A",		"\xA1\xCD" => "\xE2\x8A\xA5",		"\xA1\xCE" => "\xE2\x88\xA5",		"\xA1\xCF" => "\xE2\x88\xA0",		"\xA1\xD0" => "\xE2\x8C\x92",		"\xA1\xD1" => "\xE2\x8A\x99",		"\xA1\xD2" => "\xE2\x88\xAB",		"\xA1\xD3" => "\xE2\x88\xAE",		"\xA1\xD4" => "\xE2\x89\xA1",		"\xA1\xD5" => "\xE2\x89\x8C",		"\xA1\xD6" => "\xE2\x89\x88",		"\xA1\xD7" => "\xE2\x88\xBD",		"\xA1\xD8" => "\xE2\x88\x9D",		"\xA1\xD9" => "\xE2\x89\xA0",		"\xA1\xDA" => "\xE2\x89\xAE",		"\xA1\xDB" => "\xE2\x89\xAF",		"\xA1\xDC" => "\xE2\x89\xA4",		"\xA1\xDD" => "\xE2\x89\xA5",		"\xA1\xDE" => "\xE2\x88\x9E",		"\xA1\xDF" => "\xE2\x88\xB5",		"\xA1\xE0" => "\xE2\x88\xB4",		"\xA1\xE1" => "\xE2\x99\x82",		"\xA1\xE2" => "\xE2\x99\x80",		"\xA1\xE3" => "\xC2\xB0",		"\xA1\xE4" => "\xE2\x80\xB2",		"\xA1\xE5" => "\xE2\x80\xB3",		"\xA1\xE6" => "\xE2\x84\x83",		"\xA1\xE7" => "\xEF\xBC\x84",		"\xA1\xE8" => "\xC2\xA4",		"\xA1\xE9" => "\xEF\xBF\xA0",		"\xA1\xEA" => "\xEF\xBF\xA1",		"\xA1\xEB" => "\xE2\x80\xB0",		"\xA1\xEC" => "\xC2\xA7",		"\xA1\xED" => "\xE2\x84\x96",		"\xA1\xEE" => "\xE2\x98\x86",		"\xA1\xEF" => "\xE2\x98\x85",		"\xA1\xF0" => "\xE2\x97\x8B",		"\xA1\xF1" => "\xE2\x97\x8F",		"\xA1\xF2" => "\xE2\x97\x8E",		"\xA1\xF3" => "\xE2\x97\x87",		"\xA1\xF4" => "\xE2\x97\x86",		"\xA1\xF5" => "\xE2\x96\xA1",		"\xA1\xF6" => "\xE2\x96\xA0",		"\xA1\xF7" => "\xE2\x96\xB3",		"\xA1\xF8" => "\xE2\x96\xB2",		"\xA1\xF9" => "\xE2\x80\xBB",		"\xA1\xFA" => "\xE2\x86\x92",		"\xA1\xFB" => "\xE2\x86\x90",		"\xA1\xFC" => "\xE2\x86\x91",		"\xA1\xFD" => "\xE2\x86\x93",		"\xA1\xFE" => "\xE3\x80\x93",		"\xA2\xB1" => "\xE2\x92\x88",		"\xA2\xB2" => "\xE2\x92\x89",		"\xA2\xB3" => "\xE2\x92\x8A",		"\xA2\xB4" => "\xE2\x92\x8B",		"\xA2\xB5" => "\xE2\x92\x8C",		"\xA2\xB6" => "\xE2\x92\x8D",		"\xA2\xB7" => "\xE2\x92\x8E",		"\xA2\xB8" => "\xE2\x92\x8F",		"\xA2\xB9" => "\xE2\x92\x90",		"\xA2\xBA" => "\xE2\x92\x91",		"\xA2\xBB" => "\xE2\x92\x92",		"\xA2\xBC" => "\xE2\x92\x93",		"\xA2\xBD" => "\xE2\x92\x94",		"\xA2\xBE" => "\xE2\x92\x95",		"\xA2\xBF" => "\xE2\x92\x96",		"\xA2\xC0" => "\xE2\x92\x97",		"\xA2\xC1" => "\xE2\x92\x98",		"\xA2\xC2" => "\xE2\x92\x99",		"\xA2\xC3" => "\xE2\x92\x9A",		"\xA2\xC4" => "\xE2\x92\x9B",		"\xA2\xC5" => "\xE2\x91\xB4",		"\xA2\xC6" => "\xE2\x91\xB5",		"\xA2\xC7" => "\xE2\x91\xB6",		"\xA2\xC8" => "\xE2\x91\xB7",		"\xA2\xC9" => "\xE2\x91\xB8",		"\xA2\xCA" => "\xE2\x91\xB9",		"\xA2\xCB" => "\xE2\x91\xBA",		"\xA2\xCC" => "\xE2\x91\xBB",		"\xA2\xCD" => "\xE2\x91\xBC",		"\xA2\xCE" => "\xE2\x91\xBD",		"\xA2\xCF" => "\xE2\x91\xBE",		"\xA2\xD0" => "\xE2\x91\xBF",		"\xA2\xD1" => "\xE2\x92\x80",		"\xA2\xD2" => "\xE2\x92\x81",		"\xA2\xD3" => "\xE2\x92\x82",		"\xA2\xD4" => "\xE2\x92\x83",		"\xA2\xD5" => "\xE2\x92\x84",		"\xA2\xD6" => "\xE2\x92\x85",		"\xA2\xD7" => "\xE2\x92\x86",		"\xA2\xD8" => "\xE2\x92\x87",		"\xA2\xD9" => "\xE2\x91\xA0",		"\xA2\xDA" => "\xE2\x91\xA1",		"\xA2\xDB" => "\xE2\x91\xA2",		"\xA2\xDC" => "\xE2\x91\xA3",		"\xA2\xDD" => "\xE2\x91\xA4",		"\xA2\xDE" => "\xE2\x91\xA5",		"\xA2\xDF" => "\xE2\x91\xA6",		"\xA2\xE0" => "\xE2\x91\xA7",		"\xA2\xE1" => "\xE2\x91\xA8",		"\xA2\xE2" => "\xE2\x91\xA9",		"\xA2\xE5" => "\xE3\x88\xA0",		"\xA2\xE6" => "\xE3\x88\xA1",		"\xA2\xE7" => "\xE3\x88\xA2",		"\xA2\xE8" => "\xE3\x88\xA3",		"\xA2\xE9" => "\xE3\x88\xA4",		"\xA2\xEA" => "\xE3\x88\xA5",		"\xA2\xEB" => "\xE3\x88\xA6",		"\xA2\xEC" => "\xE3\x88\xA7",		"\xA2\xED" => "\xE3\x88\xA8",		"\xA2\xEE" => "\xE3\x88\xA9",		"\xA2\xF1" => "\xE2\x85\xA0",		"\xA2\xF2" => "\xE2\x85\xA1",		"\xA2\xF3" => "\xE2\x85\xA2",		"\xA2\xF4" => "\xE2\x85\xA3",		"\xA2\xF5" => "\xE2\x85\xA4",		"\xA2\xF6" => "\xE2\x85\xA5",		"\xA2\xF7" => "\xE2\x85\xA6",		"\xA2\xF8" => "\xE2\x85\xA7",		"\xA2\xF9" => "\xE2\x85\xA8",		"\xA2\xFA" => "\xE2\x85\xA9",		"\xA2\xFB" => "\xE2\x85\xAA",		"\xA2\xFC" => "\xE2\x85\xAB",		"\xA3\xA1" => "\xEF\xBC\x81",		"\xA3\xA2" => "\xEF\xBC\x82",		"\xA3\xA3" => "\xEF\xBC\x83",		"\xA3\xA4" => "\xEF\xBF\xA5",		"\xA3\xA5" => "\xEF\xBC\x85",		"\xA3\xA6" => "\xEF\xBC\x86",		"\xA3\xA7" => "\xEF\xBC\x87",		"\xA3\xA8" => "\xEF\xBC\x88",		"\xA3\xA9" => "\xEF\xBC\x89",		"\xA3\xAA" => "\xEF\xBC\x8A",		"\xA3\xAB" => "\xEF\xBC\x8B",		"\xA3\xAC" => "\xEF\xBC\x8C",		"\xA3\xAD" => "\xEF\xBC\x8D",		"\xA3\xAE" => "\xEF\xBC\x8E",		"\xA3\xAF" => "\xEF\xBC\x8F",		"\xA3\xB0" => "\xEF\xBC\x90",		"\xA3\xB1" => "\xEF\xBC\x91",		"\xA3\xB2" => "\xEF\xBC\x92",		"\xA3\xB3" => "\xEF\xBC\x93",		"\xA3\xB4" => "\xEF\xBC\x94",		"\xA3\xB5" => "\xEF\xBC\x95",		"\xA3\xB6" => "\xEF\xBC\x96",		"\xA3\xB7" => "\xEF\xBC\x97",		"\xA3\xB8" => "\xEF\xBC\x98",		"\xA3\xB9" => "\xEF\xBC\x99",		"\xA3\xBA" => "\xEF\xBC\x9A",		"\xA3\xBB" => "\xEF\xBC\x9B",		"\xA3\xBC" => "\xEF\xBC\x9C",		"\xA3\xBD" => "\xEF\xBC\x9D",		"\xA3\xBE" => "\xEF\xBC\x9E",		"\xA3\xBF" => "\xEF\xBC\x9F",		"\xA3\xC0" => "\xEF\xBC\xA0",		"\xA3\xC1" => "\xEF\xBC\xA1",		"\xA3\xC2" => "\xEF\xBC\xA2",		"\xA3\xC3" => "\xEF\xBC\xA3",		"\xA3\xC4" => "\xEF\xBC\xA4",		"\xA3\xC5" => "\xEF\xBC\xA5",		"\xA3\xC6" => "\xEF\xBC\xA6",		"\xA3\xC7" => "\xEF\xBC\xA7",		"\xA3\xC8" => "\xEF\xBC\xA8",		"\xA3\xC9" => "\xEF\xBC\xA9",		"\xA3\xCA" => "\xEF\xBC\xAA",		"\xA3\xCB" => "\xEF\xBC\xAB",		"\xA3\xCC" => "\xEF\xBC\xAC",		"\xA3\xCD" => "\xEF\xBC\xAD",		"\xA3\xCE" => "\xEF\xBC\xAE",		"\xA3\xCF" => "\xEF\xBC\xAF",		"\xA3\xD0" => "\xEF\xBC\xB0",		"\xA3\xD1" => "\xEF\xBC\xB1",		"\xA3\xD2" => "\xEF\xBC\xB2",		"\xA3\xD3" => "\xEF\xBC\xB3",		"\xA3\xD4" => "\xEF\xBC\xB4",		"\xA3\xD5" => "\xEF\xBC\xB5",		"\xA3\xD6" => "\xEF\xBC\xB6",		"\xA3\xD7" => "\xEF\xBC\xB7",		"\xA3\xD8" => "\xEF\xBC\xB8",		"\xA3\xD9" => "\xEF\xBC\xB9",		"\xA3\xDA" => "\xEF\xBC\xBA",		"\xA3\xDB" => "\xEF\xBC\xBB",		"\xA3\xDC" => "\xEF\xBC\xBC",		"\xA3\xDD" => "\xEF\xBC\xBD",		"\xA3\xDE" => "\xEF\xBC\xBE",		"\xA3\xDF" => "\xEF\xBC\xBF",		"\xA3\xE0" => "\xEF\xBD\x80",		"\xA3\xE1" => "\xEF\xBD\x81",		"\xA3\xE2" => "\xEF\xBD\x82",		"\xA3\xE3" => "\xEF\xBD\x83",		"\xA3\xE4" => "\xEF\xBD\x84",		"\xA3\xE5" => "\xEF\xBD\x85",		"\xA3\xE6" => "\xEF\xBD\x86",		"\xA3\xE7" => "\xEF\xBD\x87",		"\xA3\xE8" => "\xEF\xBD\x88",		"\xA3\xE9" => "\xEF\xBD\x89",		"\xA3\xEA" => "\xEF\xBD\x8A",		"\xA3\xEB" => "\xEF\xBD\x8B",		"\xA3\xEC" => "\xEF\xBD\x8C",		"\xA3\xED" => "\xEF\xBD\x8D",		"\xA3\xEE" => "\xEF\xBD\x8E",		"\xA3\xEF" => "\xEF\xBD\x8F",		"\xA3\xF0" => "\xEF\xBD\x90",		"\xA3\xF1" => "\xEF\xBD\x91",		"\xA3\xF2" => "\xEF\xBD\x92",		"\xA3\xF3" => "\xEF\xBD\x93",		"\xA3\xF4" => "\xEF\xBD\x94",		"\xA3\xF5" => "\xEF\xBD\x95",		"\xA3\xF6" => "\xEF\xBD\x96",		"\xA3\xF7" => "\xEF\xBD\x97",		"\xA3\xF8" => "\xEF\xBD\x98",		"\xA3\xF9" => "\xEF\xBD\x99",		"\xA3\xFA" => "\xEF\xBD\x9A",		"\xA3\xFB" => "\xEF\xBD\x9B",		"\xA3\xFC" => "\xEF\xBD\x9C",		"\xA3\xFD" => "\xEF\xBD\x9D",		"\xA3\xFE" => "\xEF\xBF\xA3",		"\xA4\xA1" => "\xE3\x81\x81",		"\xA4\xA2" => "\xE3\x81\x82",		"\xA4\xA3" => "\xE3\x81\x83",		"\xA4\xA4" => "\xE3\x81\x84",		"\xA4\xA5" => "\xE3\x81\x85",		"\xA4\xA6" => "\xE3\x81\x86",		"\xA4\xA7" => "\xE3\x81\x87",		"\xA4\xA8" => "\xE3\x81\x88",		"\xA4\xA9" => "\xE3\x81\x89",		"\xA4\xAA" => "\xE3\x81\x8A",		"\xA4\xAB" => "\xE3\x81\x8B",		"\xA4\xAC" => "\xE3\x81\x8C",		"\xA4\xAD" => "\xE3\x81\x8D",		"\xA4\xAE" => "\xE3\x81\x8E",		"\xA4\xAF" => "\xE3\x81\x8F",		"\xA4\xB0" => "\xE3\x81\x90",		"\xA4\xB1" => "\xE3\x81\x91",		"\xA4\xB2" => "\xE3\x81\x92",		"\xA4\xB3" => "\xE3\x81\x93",		"\xA4\xB4" => "\xE3\x81\x94",		"\xA4\xB5" => "\xE3\x81\x95",		"\xA4\xB6" => "\xE3\x81\x96",		"\xA4\xB7" => "\xE3\x81\x97",		"\xA4\xB8" => "\xE3\x81\x98",		"\xA4\xB9" => "\xE3\x81\x99",		"\xA4\xBA" => "\xE3\x81\x9A",		"\xA4\xBB" => "\xE3\x81\x9B",		"\xA4\xBC" => "\xE3\x81\x9C",		"\xA4\xBD" => "\xE3\x81\x9D",		"\xA4\xBE" => "\xE3\x81\x9E",		"\xA4\xBF" => "\xE3\x81\x9F",		"\xA4\xC0" => "\xE3\x81\xA0",		"\xA4\xC1" => "\xE3\x81\xA1",		"\xA4\xC2" => "\xE3\x81\xA2",		"\xA4\xC3" => "\xE3\x81\xA3",		"\xA4\xC4" => "\xE3\x81\xA4",		"\xA4\xC5" => "\xE3\x81\xA5",		"\xA4\xC6" => "\xE3\x81\xA6",		"\xA4\xC7" => "\xE3\x81\xA7",		"\xA4\xC8" => "\xE3\x81\xA8",		"\xA4\xC9" => "\xE3\x81\xA9",		"\xA4\xCA" => "\xE3\x81\xAA",		"\xA4\xCB" => "\xE3\x81\xAB",		"\xA4\xCC" => "\xE3\x81\xAC",		"\xA4\xCD" => "\xE3\x81\xAD",		"\xA4\xCE" => "\xE3\x81\xAE",		"\xA4\xCF" => "\xE3\x81\xAF",		"\xA4\xD0" => "\xE3\x81\xB0",		"\xA4\xD1" => "\xE3\x81\xB1",		"\xA4\xD2" => "\xE3\x81\xB2",		"\xA4\xD3" => "\xE3\x81\xB3",		"\xA4\xD4" => "\xE3\x81\xB4",		"\xA4\xD5" => "\xE3\x81\xB5",		"\xA4\xD6" => "\xE3\x81\xB6",		"\xA4\xD7" => "\xE3\x81\xB7",		"\xA4\xD8" => "\xE3\x81\xB8",		"\xA4\xD9" => "\xE3\x81\xB9",		"\xA4\xDA" => "\xE3\x81\xBA",		"\xA4\xDB" => "\xE3\x81\xBB",		"\xA4\xDC" => "\xE3\x81\xBC",		"\xA4\xDD" => "\xE3\x81\xBD",		"\xA4\xDE" => "\xE3\x81\xBE",		"\xA4\xDF" => "\xE3\x81\xBF",		"\xA4\xE0" => "\xE3\x82\x80",		"\xA4\xE1" => "\xE3\x82\x81",		"\xA4\xE2" => "\xE3\x82\x82",		"\xA4\xE3" => "\xE3\x82\x83",		"\xA4\xE4" => "\xE3\x82\x84",		"\xA4\xE5" => "\xE3\x82\x85",		"\xA4\xE6" => "\xE3\x82\x86",		"\xA4\xE7" => "\xE3\x82\x87",		"\xA4\xE8" => "\xE3\x82\x88",		"\xA4\xE9" => "\xE3\x82\x89",		"\xA4\xEA" => "\xE3\x82\x8A",		"\xA4\xEB" => "\xE3\x82\x8B",		"\xA4\xEC" => "\xE3\x82\x8C",		"\xA4\xED" => "\xE3\x82\x8D",		"\xA4\xEE" => "\xE3\x82\x8E",		"\xA4\xEF" => "\xE3\x82\x8F",		"\xA4\xF0" => "\xE3\x82\x90",		"\xA4\xF1" => "\xE3\x82\x91",		"\xA4\xF2" => "\xE3\x82\x92",		"\xA4\xF3" => "\xE3\x82\x93",		"\xA5\xA1" => "\xE3\x82\xA1",		"\xA5\xA2" => "\xE3\x82\xA2",		"\xA5\xA3" => "\xE3\x82\xA3",		"\xA5\xA4" => "\xE3\x82\xA4",		"\xA5\xA5" => "\xE3\x82\xA5",		"\xA5\xA6" => "\xE3\x82\xA6",		"\xA5\xA7" => "\xE3\x82\xA7",		"\xA5\xA8" => "\xE3\x82\xA8",		"\xA5\xA9" => "\xE3\x82\xA9",		"\xA5\xAA" => "\xE3\x82\xAA",		"\xA5\xAB" => "\xE3\x82\xAB",		"\xA5\xAC" => "\xE3\x82\xAC",		"\xA5\xAD" => "\xE3\x82\xAD",		"\xA5\xAE" => "\xE3\x82\xAE",		"\xA5\xAF" => "\xE3\x82\xAF",		"\xA5\xB0" => "\xE3\x82\xB0",		"\xA5\xB1" => "\xE3\x82\xB1",		"\xA5\xB2" => "\xE3\x82\xB2",		"\xA5\xB3" => "\xE3\x82\xB3",		"\xA5\xB4" => "\xE3\x82\xB4",		"\xA5\xB5" => "\xE3\x82\xB5",		"\xA5\xB6" => "\xE3\x82\xB6",		"\xA5\xB7" => "\xE3\x82\xB7",		"\xA5\xB8" => "\xE3\x82\xB8",		"\xA5\xB9" => "\xE3\x82\xB9",		"\xA5\xBA" => "\xE3\x82\xBA",		"\xA5\xBB" => "\xE3\x82\xBB",		"\xA5\xBC" => "\xE3\x82\xBC",		"\xA5\xBD" => "\xE3\x82\xBD",		"\xA5\xBE" => "\xE3\x82\xBE",		"\xA5\xBF" => "\xE3\x82\xBF",		"\xA5\xC0" => "\xE3\x83\x80",		"\xA5\xC1" => "\xE3\x83\x81",		"\xA5\xC2" => "\xE3\x83\x82",		"\xA5\xC3" => "\xE3\x83\x83",		"\xA5\xC4" => "\xE3\x83\x84",		"\xA5\xC5" => "\xE3\x83\x85",		"\xA5\xC6" => "\xE3\x83\x86",		"\xA5\xC7" => "\xE3\x83\x87",		"\xA5\xC8" => "\xE3\x83\x88",		"\xA5\xC9" => "\xE3\x83\x89",		"\xA5\xCA" => "\xE3\x83\x8A",		"\xA5\xCB" => "\xE3\x83\x8B",		"\xA5\xCC" => "\xE3\x83\x8C",		"\xA5\xCD" => "\xE3\x83\x8D",		"\xA5\xCE" => "\xE3\x83\x8E",		"\xA5\xCF" => "\xE3\x83\x8F",		"\xA5\xD0" => "\xE3\x83\x90",		"\xA5\xD1" => "\xE3\x83\x91",		"\xA5\xD2" => "\xE3\x83\x92",		"\xA5\xD3" => "\xE3\x83\x93",		"\xA5\xD4" => "\xE3\x83\x94",		"\xA5\xD5" => "\xE3\x83\x95",		"\xA5\xD6" => "\xE3\x83\x96",		"\xA5\xD7" => "\xE3\x83\x97",		"\xA5\xD8" => "\xE3\x83\x98",		"\xA5\xD9" => "\xE3\x83\x99",		"\xA5\xDA" => "\xE3\x83\x9A",		"\xA5\xDB" => "\xE3\x83\x9B",		"\xA5\xDC" => "\xE3\x83\x9C",		"\xA5\xDD" => "\xE3\x83\x9D",		"\xA5\xDE" => "\xE3\x83\x9E",		"\xA5\xDF" => "\xE3\x83\x9F",		"\xA5\xE0" => "\xE3\x83\xA0",		"\xA5\xE1" => "\xE3\x83\xA1",		"\xA5\xE2" => "\xE3\x83\xA2",		"\xA5\xE3" => "\xE3\x83\xA3",		"\xA5\xE4" => "\xE3\x83\xA4",		"\xA5\xE5" => "\xE3\x83\xA5",		"\xA5\xE6" => "\xE3\x83\xA6",		"\xA5\xE7" => "\xE3\x83\xA7",		"\xA5\xE8" => "\xE3\x83\xA8",		"\xA5\xE9" => "\xE3\x83\xA9",		"\xA5\xEA" => "\xE3\x83\xAA",		"\xA5\xEB" => "\xE3\x83\xAB",		"\xA5\xEC" => "\xE3\x83\xAC",		"\xA5\xED" => "\xE3\x83\xAD",		"\xA5\xEE" => "\xE3\x83\xAE",		"\xA5\xEF" => "\xE3\x83\xAF",		"\xA5\xF0" => "\xE3\x83\xB0",		"\xA5\xF1" => "\xE3\x83\xB1",		"\xA5\xF2" => "\xE3\x83\xB2",		"\xA5\xF3" => "\xE3\x83\xB3",		"\xA5\xF4" => "\xE3\x83\xB4",		"\xA5\xF5" => "\xE3\x83\xB5",		"\xA5\xF6" => "\xE3\x83\xB6",		"\xA6\xA1" => "\xCE\x91",		"\xA6\xA2" => "\xCE\x92",		"\xA6\xA3" => "\xCE\x93",		"\xA6\xA4" => "\xCE\x94",		"\xA6\xA5" => "\xCE\x95",		"\xA6\xA6" => "\xCE\x96",		"\xA6\xA7" => "\xCE\x97",		"\xA6\xA8" => "\xCE\x98",		"\xA6\xA9" => "\xCE\x99",		"\xA6\xAA" => "\xCE\x9A",		"\xA6\xAB" => "\xCE\x9B",		"\xA6\xAC" => "\xCE\x9C",		"\xA6\xAD" => "\xCE\x9D",		"\xA6\xAE" => "\xCE\x9E",		"\xA6\xAF" => "\xCE\x9F",		"\xA6\xB0" => "\xCE\xA0",		"\xA6\xB1" => "\xCE\xA1",		"\xA6\xB2" => "\xCE\xA3",		"\xA6\xB3" => "\xCE\xA4",		"\xA6\xB4" => "\xCE\xA5",		"\xA6\xB5" => "\xCE\xA6",		"\xA6\xB6" => "\xCE\xA7",		"\xA6\xB7" => "\xCE\xA8",		"\xA6\xB8" => "\xCE\xA9",		"\xA6\xC1" => "\xCE\xB1",		"\xA6\xC2" => "\xCE\xB2",		"\xA6\xC3" => "\xCE\xB3",		"\xA6\xC4" => "\xCE\xB4",		"\xA6\xC5" => "\xCE\xB5",		"\xA6\xC6" => "\xCE\xB6",		"\xA6\xC7" => "\xCE\xB7",		"\xA6\xC8" => "\xCE\xB8",		"\xA6\xC9" => "\xCE\xB9",		"\xA6\xCA" => "\xCE\xBA",		"\xA6\xCB" => "\xCE\xBB",		"\xA6\xCC" => "\xCE\xBC",		"\xA6\xCD" => "\xCE\xBD",		"\xA6\xCE" => "\xCE\xBE",		"\xA6\xCF" => "\xCE\xBF",		"\xA6\xD0" => "\xCF\x80",		"\xA6\xD1" => "\xCF\x81",		"\xA6\xD2" => "\xCF\x83",		"\xA6\xD3" => "\xCF\x84",		"\xA6\xD4" => "\xCF\x85",		"\xA6\xD5" => "\xCF\x86",		"\xA6\xD6" => "\xCF\x87",		"\xA6\xD7" => "\xCF\x88",		"\xA6\xD8" => "\xCF\x89",		"\xA7\xA1" => "\xD0\x90",		"\xA7\xA2" => "\xD0\x91",		"\xA7\xA3" => "\xD0\x92",		"\xA7\xA4" => "\xD0\x93",		"\xA7\xA5" => "\xD0\x94",		"\xA7\xA6" => "\xD0\x95",		"\xA7\xA7" => "\xD0\x81",		"\xA7\xA8" => "\xD0\x96",		"\xA7\xA9" => "\xD0\x97",		"\xA7\xAA" => "\xD0\x98",		"\xA7\xAB" => "\xD0\x99",		"\xA7\xAC" => "\xD0\x9A",		"\xA7\xAD" => "\xD0\x9B",		"\xA7\xAE" => "\xD0\x9C",		"\xA7\xAF" => "\xD0\x9D",		"\xA7\xB0" => "\xD0\x9E",		"\xA7\xB1" => "\xD0\x9F",		"\xA7\xB2" => "\xD0\xA0",		"\xA7\xB3" => "\xD0\xA1",		"\xA7\xB4" => "\xD0\xA2",		"\xA7\xB5" => "\xD0\xA3",		"\xA7\xB6" => "\xD0\xA4",		"\xA7\xB7" => "\xD0\xA5",		"\xA7\xB8" => "\xD0\xA6",		"\xA7\xB9" => "\xD0\xA7",		"\xA7\xBA" => "\xD0\xA8",		"\xA7\xBB" => "\xD0\xA9",		"\xA7\xBC" => "\xD0\xAA",		"\xA7\xBD" => "\xD0\xAB",		"\xA7\xBE" => "\xD0\xAC",		"\xA7\xBF" => "\xD0\xAD",		"\xA7\xC0" => "\xD0\xAE",		"\xA7\xC1" => "\xD0\xAF",		"\xA7\xD1" => "\xD0\xB0",		"\xA7\xD2" => "\xD0\xB1",		"\xA7\xD3" => "\xD0\xB2",		"\xA7\xD4" => "\xD0\xB3",		"\xA7\xD5" => "\xD0\xB4",		"\xA7\xD6" => "\xD0\xB5",		"\xA7\xD7" => "\xD1\x91",		"\xA7\xD8" => "\xD0\xB6",		"\xA7\xD9" => "\xD0\xB7",		"\xA7\xDA" => "\xD0\xB8",		"\xA7\xDB" => "\xD0\xB9",		"\xA7\xDC" => "\xD0\xBA",		"\xA7\xDD" => "\xD0\xBB",		"\xA7\xDE" => "\xD0\xBC",		"\xA7\xDF" => "\xD0\xBD",		"\xA7\xE0" => "\xD0\xBE",		"\xA7\xE1" => "\xD0\xBF",		"\xA7\xE2" => "\xD1\x80",		"\xA7\xE3" => "\xD1\x81",		"\xA7\xE4" => "\xD1\x82",		"\xA7\xE5" => "\xD1\x83",		"\xA7\xE6" => "\xD1\x84",		"\xA7\xE7" => "\xD1\x85",		"\xA7\xE8" => "\xD1\x86",		"\xA7\xE9" => "\xD1\x87",		"\xA7\xEA" => "\xD1\x88",		"\xA7\xEB" => "\xD1\x89",		"\xA7\xEC" => "\xD1\x8A",		"\xA7\xED" => "\xD1\x8B",		"\xA7\xEE" => "\xD1\x8C",		"\xA7\xEF" => "\xD1\x8D",		"\xA7\xF0" => "\xD1\x8E",		"\xA7\xF1" => "\xD1\x8F",		"\xA8\xA1" => "\xC4\x81",		"\xA8\xA2" => "\xC3\xA1",		"\xA8\xA3" => "\xC7\x8E",		"\xA8\xA4" => "\xC3\xA0",		"\xA8\xA5" => "\xC4\x93",		"\xA8\xA6" => "\xC3\xA9",		"\xA8\xA7" => "\xC4\x9B",		"\xA8\xA8" => "\xC3\xA8",		"\xA8\xA9" => "\xC4\xAB",		"\xA8\xAA" => "\xC3\xAD",		"\xA8\xAB" => "\xC7\x90",		"\xA8\xAC" => "\xC3\xAC",		"\xA8\xAD" => "\xC5\x8D",		"\xA8\xAE" => "\xC3\xB3",		"\xA8\xAF" => "\xC7\x92",		"\xA8\xB0" => "\xC3\xB2",		"\xA8\xB1" => "\xC5\xAB",		"\xA8\xB2" => "\xC3\xBA",		"\xA8\xB3" => "\xC7\x94",		"\xA8\xB4" => "\xC3\xB9",		"\xA8\xB5" => "\xC7\x96",		"\xA8\xB6" => "\xC7\x98",		"\xA8\xB7" => "\xC7\x9A",		"\xA8\xB8" => "\xC7\x9C",		"\xA8\xB9" => "\xC3\xBC",		"\xA8\xBA" => "\xC3\xAA",		"\xA8\xC5" => "\xE3\x84\x85",		"\xA8\xC6" => "\xE3\x84\x86",		"\xA8\xC7" => "\xE3\x84\x87",		"\xA8\xC8" => "\xE3\x84\x88",		"\xA8\xC9" => "\xE3\x84\x89",		"\xA8\xCA" => "\xE3\x84\x8A",		"\xA8\xCB" => "\xE3\x84\x8B",		"\xA8\xCC" => "\xE3\x84\x8C",		"\xA8\xCD" => "\xE3\x84\x8D",		"\xA8\xCE" => "\xE3\x84\x8E",		"\xA8\xCF" => "\xE3\x84\x8F",		"\xA8\xD0" => "\xE3\x84\x90",		"\xA8\xD1" => "\xE3\x84\x91",		"\xA8\xD2" => "\xE3\x84\x92",		"\xA8\xD3" => "\xE3\x84\x93",		"\xA8\xD4" => "\xE3\x84\x94",		"\xA8\xD5" => "\xE3\x84\x95",		"\xA8\xD6" => "\xE3\x84\x96",		"\xA8\xD7" => "\xE3\x84\x97",		"\xA8\xD8" => "\xE3\x84\x98",		"\xA8\xD9" => "\xE3\x84\x99",		"\xA8\xDA" => "\xE3\x84\x9A",		"\xA8\xDB" => "\xE3\x84\x9B",		"\xA8\xDC" => "\xE3\x84\x9C",		"\xA8\xDD" => "\xE3\x84\x9D",		"\xA8\xDE" => "\xE3\x84\x9E",		"\xA8\xDF" => "\xE3\x84\x9F",		"\xA8\xE0" => "\xE3\x84\xA0",		"\xA8\xE1" => "\xE3\x84\xA1",		"\xA8\xE2" => "\xE3\x84\xA2",		"\xA8\xE3" => "\xE3\x84\xA3",		"\xA8\xE4" => "\xE3\x84\xA4",		"\xA8\xE5" => "\xE3\x84\xA5",		"\xA8\xE6" => "\xE3\x84\xA6",		"\xA8\xE7" => "\xE3\x84\xA7",		"\xA8\xE8" => "\xE3\x84\xA8",		"\xA8\xE9" => "\xE3\x84\xA9",		"\xA9\xA4" => "\xE2\x94\x80",		"\xA9\xA5" => "\xE2\x94\x81",		"\xA9\xA6" => "\xE2\x94\x82",		"\xA9\xA7" => "\xE2\x94\x83",		"\xA9\xA8" => "\xE2\x94\x84",		"\xA9\xA9" => "\xE2\x94\x85",		"\xA9\xAA" => "\xE2\x94\x86",		"\xA9\xAB" => "\xE2\x94\x87",		"\xA9\xAC" => "\xE2\x94\x88",		"\xA9\xAD" => "\xE2\x94\x89",		"\xA9\xAE" => "\xE2\x94\x8A",		"\xA9\xAF" => "\xE2\x94\x8B",		"\xA9\xB0" => "\xE2\x94\x8C",		"\xA9\xB1" => "\xE2\x94\x8D",		"\xA9\xB2" => "\xE2\x94\x8E",		"\xA9\xB3" => "\xE2\x94\x8F",		"\xA9\xB4" => "\xE2\x94\x90",		"\xA9\xB5" => "\xE2\x94\x91",		"\xA9\xB6" => "\xE2\x94\x92",		"\xA9\xB7" => "\xE2\x94\x93",		"\xA9\xB8" => "\xE2\x94\x94",		"\xA9\xB9" => "\xE2\x94\x95",		"\xA9\xBA" => "\xE2\x94\x96",		"\xA9\xBB" => "\xE2\x94\x97",		"\xA9\xBC" => "\xE2\x94\x98",		"\xA9\xBD" => "\xE2\x94\x99",		"\xA9\xBE" => "\xE2\x94\x9A",		"\xA9\xBF" => "\xE2\x94\x9B",		"\xA9\xC0" => "\xE2\x94\x9C",		"\xA9\xC1" => "\xE2\x94\x9D",		"\xA9\xC2" => "\xE2\x94\x9E",		"\xA9\xC3" => "\xE2\x94\x9F",		"\xA9\xC4" => "\xE2\x94\xA0",		"\xA9\xC5" => "\xE2\x94\xA1",		"\xA9\xC6" => "\xE2\x94\xA2",		"\xA9\xC7" => "\xE2\x94\xA3",		"\xA9\xC8" => "\xE2\x94\xA4",		"\xA9\xC9" => "\xE2\x94\xA5",		"\xA9\xCA" => "\xE2\x94\xA6",		"\xA9\xCB" => "\xE2\x94\xA7",		"\xA9\xCC" => "\xE2\x94\xA8",		"\xA9\xCD" => "\xE2\x94\xA9",		"\xA9\xCE" => "\xE2\x94\xAA",		"\xA9\xCF" => "\xE2\x94\xAB",		"\xA9\xD0" => "\xE2\x94\xAC",		"\xA9\xD1" => "\xE2\x94\xAD",		"\xA9\xD2" => "\xE2\x94\xAE",		"\xA9\xD3" => "\xE2\x94\xAF",		"\xA9\xD4" => "\xE2\x94\xB0",		"\xA9\xD5" => "\xE2\x94\xB1",		"\xA9\xD6" => "\xE2\x94\xB2",		"\xA9\xD7" => "\xE2\x94\xB3",		"\xA9\xD8" => "\xE2\x94\xB4",		"\xA9\xD9" => "\xE2\x94\xB5",		"\xA9\xDA" => "\xE2\x94\xB6",		"\xA9\xDB" => "\xE2\x94\xB7",		"\xA9\xDC" => "\xE2\x94\xB8",		"\xA9\xDD" => "\xE2\x94\xB9",		"\xA9\xDE" => "\xE2\x94\xBA",		"\xA9\xDF" => "\xE2\x94\xBB",		"\xA9\xE0" => "\xE2\x94\xBC",		"\xA9\xE1" => "\xE2\x94\xBD",		"\xA9\xE2" => "\xE2\x94\xBE",		"\xA9\xE3" => "\xE2\x94\xBF",		"\xA9\xE4" => "\xE2\x95\x80",		"\xA9\xE5" => "\xE2\x95\x81",		"\xA9\xE6" => "\xE2\x95\x82",		"\xA9\xE7" => "\xE2\x95\x83",		"\xA9\xE8" => "\xE2\x95\x84",		"\xA9\xE9" => "\xE2\x95\x85",		"\xA9\xEA" => "\xE2\x95\x86",		"\xA9\xEB" => "\xE2\x95\x87",		"\xA9\xEC" => "\xE2\x95\x88",		"\xA9\xED" => "\xE2\x95\x89",		"\xA9\xEE" => "\xE2\x95\x8A",		"\xA9\xEF" => "\xE2\x95\x8B",		"\xB0\xA1" => "\xE5\x95\x8A",		"\xB0\xA2" => "\xE9\x98\xBF",		"\xB0\xA3" => "\xE5\x9F\x83",		"\xB0\xA4" => "\xE6\x8C\xA8",		"\xB0\xA5" => "\xE5\x93\x8E",		"\xB0\xA6" => "\xE5\x94\x89",		"\xB0\xA7" => "\xE5\x93\x80",		"\xB0\xA8" => "\xE7\x9A\x91",		"\xB0\xA9" => "\xE7\x99\x8C",		"\xB0\xAA" => "\xE8\x94\xBC",		"\xB0\xAB" => "\xE7\x9F\xAE",		"\xB0\xAC" => "\xE8\x89\xBE",		"\xB0\xAD" => "\xE7\xA2\x8D",		"\xB0\xAE" => "\xE7\x88\xB1",		"\xB0\xAF" => "\xE9\x9A\x98",		"\xB0\xB0" => "\xE9\x9E\x8D",		"\xB0\xB1" => "\xE6\xB0\xA8",		"\xB0\xB2" => "\xE5\xAE\x89",		"\xB0\xB3" => "\xE4\xBF\xBA",		"\xB0\xB4" => "\xE6\x8C\x89",		"\xB0\xB5" => "\xE6\x9A\x97",		"\xB0\xB6" => "\xE5\xB2\xB8",		"\xB0\xB7" => "\xE8\x83\xBA",		"\xB0\xB8" => "\xE6\xA1\x88",		"\xB0\xB9" => "\xE8\x82\xAE",		"\xB0\xBA" => "\xE6\x98\x82",		"\xB0\xBB" => "\xE7\x9B\x8E",		"\xB0\xBC" => "\xE5\x87\xB9",		"\xB0\xBD" => "\xE6\x95\x96",		"\xB0\xBE" => "\xE7\x86\xAC",		"\xB0\xBF" => "\xE7\xBF\xB1",		"\xB0\xC0" => "\xE8\xA2\x84",		"\xB0\xC1" => "\xE5\x82\xB2",		"\xB0\xC2" => "\xE5\xA5\xA5",		"\xB0\xC3" => "\xE6\x87\x8A",		"\xB0\xC4" => "\xE6\xBE\xB3",		"\xB0\xC5" => "\xE8\x8A\xAD",		"\xB0\xC6" => "\xE6\x8D\x8C",		"\xB0\xC7" => "\xE6\x89\x92",		"\xB0\xC8" => "\xE5\x8F\xAD",		"\xB0\xC9" => "\xE5\x90\xA7",		"\xB0\xCA" => "\xE7\xAC\x86",		"\xB0\xCB" => "\xE5\x85\xAB",		"\xB0\xCC" => "\xE7\x96\xA4",		"\xB0\xCD" => "\xE5\xB7\xB4",		"\xB0\xCE" => "\xE6\x8B\x94",		"\xB0\xCF" => "\xE8\xB7\x8B",		"\xB0\xD0" => "\xE9\x9D\xB6",		"\xB0\xD1" => "\xE6\x8A\x8A",		"\xB0\xD2" => "\xE8\x80\x99",		"\xB0\xD3" => "\xE5\x9D\x9D",		"\xB0\xD4" => "\xE9\x9C\xB8",		"\xB0\xD5" => "\xE7\xBD\xA2",		"\xB0\xD6" => "\xE7\x88\xB8",		"\xB0\xD7" => "\xE7\x99\xBD",		"\xB0\xD8" => "\xE6\x9F\x8F",		"\xB0\xD9" => "\xE7\x99\xBE",		"\xB0\xDA" => "\xE6\x91\x86",		"\xB0\xDB" => "\xE4\xBD\xB0",		"\xB0\xDC" => "\xE8\xB4\xA5",		"\xB0\xDD" => "\xE6\x8B\x9C",		"\xB0\xDE" => "\xE7\xA8\x97",		"\xB0\xDF" => "\xE6\x96\x91",		"\xB0\xE0" => "\xE7\x8F\xAD",		"\xB0\xE1" => "\xE6\x90\xAC",		"\xB0\xE2" => "\xE6\x89\xB3",		"\xB0\xE3" => "\xE8\x88\xAC",		"\xB0\xE4" => "\xE9\xA2\x81",		"\xB0\xE5" => "\xE6\x9D\xBF",		"\xB0\xE6" => "\xE7\x89\x88",		"\xB0\xE7" => "\xE6\x89\xAE",		"\xB0\xE8" => "\xE6\x8B\x8C",		"\xB0\xE9" => "\xE4\xBC\xB4",		"\xB0\xEA" => "\xE7\x93\xA3",		"\xB0\xEB" => "\xE5\x8D\x8A",		"\xB0\xEC" => "\xE5\x8A\x9E",		"\xB0\xED" => "\xE7\xBB\x8A",		"\xB0\xEE" => "\xE9\x82\xA6",		"\xB0\xEF" => "\xE5\xB8\xAE",		"\xB0\xF0" => "\xE6\xA2\x86",		"\xB0\xF1" => "\xE6\xA6\x9C",		"\xB0\xF2" => "\xE8\x86\x80",		"\xB0\xF3" => "\xE7\xBB\x91",		"\xB0\xF4" => "\xE6\xA3\x92",		"\xB0\xF5" => "\xE7\xA3\x85",		"\xB0\xF6" => "\xE8\x9A\x8C",		"\xB0\xF7" => "\xE9\x95\x91",		"\xB0\xF8" => "\xE5\x82\x8D",		"\xB0\xF9" => "\xE8\xB0\xA4",		"\xB0\xFA" => "\xE8\x8B\x9E",		"\xB0\xFB" => "\xE8\x83\x9E",		"\xB0\xFC" => "\xE5\x8C\x85",		"\xB0\xFD" => "\xE8\xA4\x92",		"\xB0\xFE" => "\xE5\x89\xA5",		"\xB1\xA1" => "\xE8\x96\x84",		"\xB1\xA2" => "\xE9\x9B\xB9",		"\xB1\xA3" => "\xE4\xBF\x9D",		"\xB1\xA4" => "\xE5\xA0\xA1",		"\xB1\xA5" => "\xE9\xA5\xB1",		"\xB1\xA6" => "\xE5\xAE\x9D",		"\xB1\xA7" => "\xE6\x8A\xB1",		"\xB1\xA8" => "\xE6\x8A\xA5",		"\xB1\xA9" => "\xE6\x9A\xB4",		"\xB1\xAA" => "\xE8\xB1\xB9",		"\xB1\xAB" => "\xE9\xB2\x8D",		"\xB1\xAC" => "\xE7\x88\x86",		"\xB1\xAD" => "\xE6\x9D\xAF",		"\xB1\xAE" => "\xE7\xA2\x91",		"\xB1\xAF" => "\xE6\x82\xB2",		"\xB1\xB0" => "\xE5\x8D\x91",		"\xB1\xB1" => "\xE5\x8C\x97",		"\xB1\xB2" => "\xE8\xBE\x88",		"\xB1\xB3" => "\xE8\x83\x8C",		"\xB1\xB4" => "\xE8\xB4\x9D",		"\xB1\xB5" => "\xE9\x92\xA1",		"\xB1\xB6" => "\xE5\x80\x8D",		"\xB1\xB7" => "\xE7\x8B\x88",		"\xB1\xB8" => "\xE5\xA4\x87",		"\xB1\xB9" => "\xE6\x83\xAB",		"\xB1\xBA" => "\xE7\x84\x99",		"\xB1\xBB" => "\xE8\xA2\xAB",		"\xB1\xBC" => "\xE5\xA5\x94",		"\xB1\xBD" => "\xE8\x8B\xAF",		"\xB1\xBE" => "\xE6\x9C\xAC",		"\xB1\xBF" => "\xE7\xAC\xA8",		"\xB1\xC0" => "\xE5\xB4\xA9",		"\xB1\xC1" => "\xE7\xBB\xB7",		"\xB1\xC2" => "\xE7\x94\xAD",		"\xB1\xC3" => "\xE6\xB3\xB5",		"\xB1\xC4" => "\xE8\xB9\xA6",		"\xB1\xC5" => "\xE8\xBF\xB8",		"\xB1\xC6" => "\xE9\x80\xBC",		"\xB1\xC7" => "\xE9\xBC\xBB",		"\xB1\xC8" => "\xE6\xAF\x94",		"\xB1\xC9" => "\xE9\x84\x99",		"\xB1\xCA" => "\xE7\xAC\x94",		"\xB1\xCB" => "\xE5\xBD\xBC",		"\xB1\xCC" => "\xE7\xA2\xA7",		"\xB1\xCD" => "\xE8\x93\x96",		"\xB1\xCE" => "\xE8\x94\xBD",		"\xB1\xCF" => "\xE6\xAF\x95",		"\xB1\xD0" => "\xE6\xAF\x99",		"\xB1\xD1" => "\xE6\xAF\x96",		"\xB1\xD2" => "\xE5\xB8\x81",		"\xB1\xD3" => "\xE5\xBA\x87",		"\xB1\xD4" => "\xE7\x97\xB9",		"\xB1\xD5" => "\xE9\x97\xAD",		"\xB1\xD6" => "\xE6\x95\x9D",		"\xB1\xD7" => "\xE5\xBC\x8A",		"\xB1\xD8" => "\xE5\xBF\x85",		"\xB1\xD9" => "\xE8\xBE\x9F",		"\xB1\xDA" => "\xE5\xA3\x81",		"\xB1\xDB" => "\xE8\x87\x82",		"\xB1\xDC" => "\xE9\x81\xBF",		"\xB1\xDD" => "\xE9\x99\x9B",		"\xB1\xDE" => "\xE9\x9E\xAD",		"\xB1\xDF" => "\xE8\xBE\xB9",		"\xB1\xE0" => "\xE7\xBC\x96",		"\xB1\xE1" => "\xE8\xB4\xAC",		"\xB1\xE2" => "\xE6\x89\x81",		"\xB1\xE3" => "\xE4\xBE\xBF",		"\xB1\xE4" => "\xE5\x8F\x98",		"\xB1\xE5" => "\xE5\x8D\x9E",		"\xB1\xE6" => "\xE8\xBE\xA8",		"\xB1\xE7" => "\xE8\xBE\xA9",		"\xB1\xE8" => "\xE8\xBE\xAB",		"\xB1\xE9" => "\xE9\x81\x8D",		"\xB1\xEA" => "\xE6\xA0\x87",		"\xB1\xEB" => "\xE5\xBD\xAA",		"\xB1\xEC" => "\xE8\x86\x98",		"\xB1\xED" => "\xE8\xA1\xA8",		"\xB1\xEE" => "\xE9\xB3\x96",		"\xB1\xEF" => "\xE6\x86\x8B",		"\xB1\xF0" => "\xE5\x88\xAB",		"\xB1\xF1" => "\xE7\x98\xAA",		"\xB1\xF2" => "\xE5\xBD\xAC",		"\xB1\xF3" => "\xE6\x96\x8C",		"\xB1\xF4" => "\xE6\xBF\x92",		"\xB1\xF5" => "\xE6\xBB\xA8",		"\xB1\xF6" => "\xE5\xAE\xBE",		"\xB1\xF7" => "\xE6\x91\x88",		"\xB1\xF8" => "\xE5\x85\xB5",		"\xB1\xF9" => "\xE5\x86\xB0",		"\xB1\xFA" => "\xE6\x9F\x84",		"\xB1\xFB" => "\xE4\xB8\x99",		"\xB1\xFC" => "\xE7\xA7\x89",		"\xB1\xFD" => "\xE9\xA5\xBC",		"\xB1\xFE" => "\xE7\x82\xB3",		"\xB2\xA1" => "\xE7\x97\x85",		"\xB2\xA2" => "\xE5\xB9\xB6",		"\xB2\xA3" => "\xE7\x8E\xBB",		"\xB2\xA4" => "\xE8\x8F\xA0",		"\xB2\xA5" => "\xE6\x92\xAD",		"\xB2\xA6" => "\xE6\x8B\xA8",		"\xB2\xA7" => "\xE9\x92\xB5",		"\xB2\xA8" => "\xE6\xB3\xA2",		"\xB2\xA9" => "\xE5\x8D\x9A",		"\xB2\xAA" => "\xE5\x8B\x83",		"\xB2\xAB" => "\xE6\x90\x8F",		"\xB2\xAC" => "\xE9\x93\x82",		"\xB2\xAD" => "\xE7\xAE\x94",		"\xB2\xAE" => "\xE4\xBC\xAF",		"\xB2\xAF" => "\xE5\xB8\x9B",		"\xB2\xB0" => "\xE8\x88\xB6",		"\xB2\xB1" => "\xE8\x84\x96",		"\xB2\xB2" => "\xE8\x86\x8A",		"\xB2\xB3" => "\xE6\xB8\xA4",		"\xB2\xB4" => "\xE6\xB3\x8A",		"\xB2\xB5" => "\xE9\xA9\xB3",		"\xB2\xB6" => "\xE6\x8D\x95",		"\xB2\xB7" => "\xE5\x8D\x9C",		"\xB2\xB8" => "\xE5\x93\xBA",		"\xB2\xB9" => "\xE8\xA1\xA5",		"\xB2\xBA" => "\xE5\x9F\xA0",		"\xB2\xBB" => "\xE4\xB8\x8D",		"\xB2\xBC" => "\xE5\xB8\x83",		"\xB2\xBD" => "\xE6\xAD\xA5",		"\xB2\xBE" => "\xE7\xB0\xBF",		"\xB2\xBF" => "\xE9\x83\xA8",		"\xB2\xC0" => "\xE6\x80\x96",		"\xB2\xC1" => "\xE6\x93\xA6",		"\xB2\xC2" => "\xE7\x8C\x9C",		"\xB2\xC3" => "\xE8\xA3\x81",		"\xB2\xC4" => "\xE6\x9D\x90",		"\xB2\xC5" => "\xE6\x89\x8D",		"\xB2\xC6" => "\xE8\xB4\xA2",		"\xB2\xC7" => "\xE7\x9D\xAC",		"\xB2\xC8" => "\xE8\xB8\xA9",		"\xB2\xC9" => "\xE9\x87\x87",		"\xB2\xCA" => "\xE5\xBD\xA9",		"\xB2\xCB" => "\xE8\x8F\x9C",		"\xB2\xCC" => "\xE8\x94\xA1",		"\xB2\xCD" => "\xE9\xA4\x90",		"\xB2\xCE" => "\xE5\x8F\x82",		"\xB2\xCF" => "\xE8\x9A\x95",		"\xB2\xD0" => "\xE6\xAE\x8B",		"\xB2\xD1" => "\xE6\x83\xAD",		"\xB2\xD2" => "\xE6\x83\xA8",		"\xB2\xD3" => "\xE7\x81\xBF",		"\xB2\xD4" => "\xE8\x8B\x8D",		"\xB2\xD5" => "\xE8\x88\xB1",		"\xB2\xD6" => "\xE4\xBB\x93",		"\xB2\xD7" => "\xE6\xB2\xA7",		"\xB2\xD8" => "\xE8\x97\x8F",		"\xB2\xD9" => "\xE6\x93\x8D",		"\xB2\xDA" => "\xE7\xB3\x99",		"\xB2\xDB" => "\xE6\xA7\xBD",		"\xB2\xDC" => "\xE6\x9B\xB9",		"\xB2\xDD" => "\xE8\x8D\x89",		"\xB2\xDE" => "\xE5\x8E\x95",		"\xB2\xDF" => "\xE7\xAD\x96",		"\xB2\xE0" => "\xE4\xBE\xA7",		"\xB2\xE1" => "\xE5\x86\x8C",		"\xB2\xE2" => "\xE6\xB5\x8B",		"\xB2\xE3" => "\xE5\xB1\x82",		"\xB2\xE4" => "\xE8\xB9\xAD",		"\xB2\xE5" => "\xE6\x8F\x92",		"\xB2\xE6" => "\xE5\x8F\x89",		"\xB2\xE7" => "\xE8\x8C\xAC",		"\xB2\xE8" => "\xE8\x8C\xB6",		"\xB2\xE9" => "\xE6\x9F\xA5",		"\xB2\xEA" => "\xE7\xA2\xB4",		"\xB2\xEB" => "\xE6\x90\xBD",		"\xB2\xEC" => "\xE5\xAF\x9F",		"\xB2\xED" => "\xE5\xB2\x94",		"\xB2\xEE" => "\xE5\xB7\xAE",		"\xB2\xEF" => "\xE8\xAF\xA7",		"\xB2\xF0" => "\xE6\x8B\x86",		"\xB2\xF1" => "\xE6\x9F\xB4",		"\xB2\xF2" => "\xE8\xB1\xBA",		"\xB2\xF3" => "\xE6\x90\x80",		"\xB2\xF4" => "\xE6\x8E\xBA",		"\xB2\xF5" => "\xE8\x9D\x89",		"\xB2\xF6" => "\xE9\xA6\x8B",		"\xB2\xF7" => "\xE8\xB0\x97",		"\xB2\xF8" => "\xE7\xBC\xA0",		"\xB2\xF9" => "\xE9\x93\xB2",		"\xB2\xFA" => "\xE4\xBA\xA7",		"\xB2\xFB" => "\xE9\x98\x90",		"\xB2\xFC" => "\xE9\xA2\xA4",		"\xB2\xFD" => "\xE6\x98\x8C",		"\xB2\xFE" => "\xE7\x8C\x96",		"\xB3\xA1" => "\xE5\x9C\xBA",		"\xB3\xA2" => "\xE5\xB0\x9D",		"\xB3\xA3" => "\xE5\xB8\xB8",		"\xB3\xA4" => "\xE9\x95\xBF",		"\xB3\xA5" => "\xE5\x81\xBF",		"\xB3\xA6" => "\xE8\x82\xA0",		"\xB3\xA7" => "\xE5\x8E\x82",		"\xB3\xA8" => "\xE6\x95\x9E",		"\xB3\xA9" => "\xE7\x95\x85",		"\xB3\xAA" => "\xE5\x94\xB1",		"\xB3\xAB" => "\xE5\x80\xA1",		"\xB3\xAC" => "\xE8\xB6\x85",		"\xB3\xAD" => "\xE6\x8A\x84",		"\xB3\xAE" => "\xE9\x92\x9E",		"\xB3\xAF" => "\xE6\x9C\x9D",		"\xB3\xB0" => "\xE5\x98\xB2",		"\xB3\xB1" => "\xE6\xBD\xAE",		"\xB3\xB2" => "\xE5\xB7\xA2",		"\xB3\xB3" => "\xE5\x90\xB5",		"\xB3\xB4" => "\xE7\x82\x92",		"\xB3\xB5" => "\xE8\xBD\xA6",		"\xB3\xB6" => "\xE6\x89\xAF",		"\xB3\xB7" => "\xE6\x92\xA4",		"\xB3\xB8" => "\xE6\x8E\xA3",		"\xB3\xB9" => "\xE5\xBD\xBB",		"\xB3\xBA" => "\xE6\xBE\x88",		"\xB3\xBB" => "\xE9\x83\xB4",		"\xB3\xBC" => "\xE8\x87\xA3",		"\xB3\xBD" => "\xE8\xBE\xB0",		"\xB3\xBE" => "\xE5\xB0\x98",		"\xB3\xBF" => "\xE6\x99\xA8",		"\xB3\xC0" => "\xE5\xBF\xB1",		"\xB3\xC1" => "\xE6\xB2\x89",		"\xB3\xC2" => "\xE9\x99\x88",		"\xB3\xC3" => "\xE8\xB6\x81",		"\xB3\xC4" => "\xE8\xA1\xAC",		"\xB3\xC5" => "\xE6\x92\x91",		"\xB3\xC6" => "\xE7\xA7\xB0",		"\xB3\xC7" => "\xE5\x9F\x8E",		"\xB3\xC8" => "\xE6\xA9\x99",		"\xB3\xC9" => "\xE6\x88\x90",		"\xB3\xCA" => "\xE5\x91\x88",		"\xB3\xCB" => "\xE4\xB9\x98",		"\xB3\xCC" => "\xE7\xA8\x8B",		"\xB3\xCD" => "\xE6\x83\xA9",		"\xB3\xCE" => "\xE6\xBE\x84",		"\xB3\xCF" => "\xE8\xAF\x9A",		"\xB3\xD0" => "\xE6\x89\xBF",		"\xB3\xD1" => "\xE9\x80\x9E",		"\xB3\xD2" => "\xE9\xAA\x8B",		"\xB3\xD3" => "\xE7\xA7\xA4",		"\xB3\xD4" => "\xE5\x90\x83",		"\xB3\xD5" => "\xE7\x97\xB4",		"\xB3\xD6" => "\xE6\x8C\x81",		"\xB3\xD7" => "\xE5\x8C\x99",		"\xB3\xD8" => "\xE6\xB1\xA0",		"\xB3\xD9" => "\xE8\xBF\x9F",		"\xB3\xDA" => "\xE5\xBC\x9B",		"\xB3\xDB" => "\xE9\xA9\xB0",		"\xB3\xDC" => "\xE8\x80\xBB",		"\xB3\xDD" => "\xE9\xBD\xBF",		"\xB3\xDE" => "\xE4\xBE\x88",		"\xB3\xDF" => "\xE5\xB0\xBA",		"\xB3\xE0" => "\xE8\xB5\xA4",		"\xB3\xE1" => "\xE7\xBF\x85",		"\xB3\xE2" => "\xE6\x96\xA5",		"\xB3\xE3" => "\xE7\x82\xBD",		"\xB3\xE4" => "\xE5\x85\x85",		"\xB3\xE5" => "\xE5\x86\xB2",		"\xB3\xE6" => "\xE8\x99\xAB",		"\xB3\xE7" => "\xE5\xB4\x87",		"\xB3\xE8" => "\xE5\xAE\xA0",		"\xB3\xE9" => "\xE6\x8A\xBD",		"\xB3\xEA" => "\xE9\x85\xAC",		"\xB3\xEB" => "\xE7\x95\xB4",		"\xB3\xEC" => "\xE8\xB8\x8C",		"\xB3\xED" => "\xE7\xA8\xA0",		"\xB3\xEE" => "\xE6\x84\x81",		"\xB3\xEF" => "\xE7\xAD\xB9",		"\xB3\xF0" => "\xE4\xBB\x87",		"\xB3\xF1" => "\xE7\xBB\xB8",		"\xB3\xF2" => "\xE7\x9E\x85",		"\xB3\xF3" => "\xE4\xB8\x91",		"\xB3\xF4" => "\xE8\x87\xAD",		"\xB3\xF5" => "\xE5\x88\x9D",		"\xB3\xF6" => "\xE5\x87\xBA",		"\xB3\xF7" => "\xE6\xA9\xB1",		"\xB3\xF8" => "\xE5\x8E\xA8",		"\xB3\xF9" => "\xE8\xBA\x87",		"\xB3\xFA" => "\xE9\x94\x84",		"\xB3\xFB" => "\xE9\x9B\x8F",		"\xB3\xFC" => "\xE6\xBB\x81",		"\xB3\xFD" => "\xE9\x99\xA4",		"\xB3\xFE" => "\xE6\xA5\x9A",		"\xB4\xA1" => "\xE7\xA1\x80",		"\xB4\xA2" => "\xE5\x82\xA8",		"\xB4\xA3" => "\xE7\x9F\x97",		"\xB4\xA4" => "\xE6\x90\x90",		"\xB4\xA5" => "\xE8\xA7\xA6",		"\xB4\xA6" => "\xE5\xA4\x84",		"\xB4\xA7" => "\xE6\x8F\xA3",		"\xB4\xA8" => "\xE5\xB7\x9D",		"\xB4\xA9" => "\xE7\xA9\xBF",		"\xB4\xAA" => "\xE6\xA4\xBD",		"\xB4\xAB" => "\xE4\xBC\xA0",		"\xB4\xAC" => "\xE8\x88\xB9",		"\xB4\xAD" => "\xE5\x96\x98",		"\xB4\xAE" => "\xE4\xB8\xB2",		"\xB4\xAF" => "\xE7\x96\xAE",		"\xB4\xB0" => "\xE7\xAA\x97",		"\xB4\xB1" => "\xE5\xB9\xA2",		"\xB4\xB2" => "\xE5\xBA\x8A",		"\xB4\xB3" => "\xE9\x97\xAF",		"\xB4\xB4" => "\xE5\x88\x9B",		"\xB4\xB5" => "\xE5\x90\xB9",		"\xB4\xB6" => "\xE7\x82\x8A",		"\xB4\xB7" => "\xE6\x8D\xB6",		"\xB4\xB8" => "\xE9\x94\xA4",		"\xB4\xB9" => "\xE5\x9E\x82",		"\xB4\xBA" => "\xE6\x98\xA5",		"\xB4\xBB" => "\xE6\xA4\xBF",		"\xB4\xBC" => "\xE9\x86\x87",		"\xB4\xBD" => "\xE5\x94\x87",		"\xB4\xBE" => "\xE6\xB7\xB3",		"\xB4\xBF" => "\xE7\xBA\xAF",		"\xB4\xC0" => "\xE8\xA0\xA2",		"\xB4\xC1" => "\xE6\x88\xB3",		"\xB4\xC2" => "\xE7\xBB\xB0",		"\xB4\xC3" => "\xE7\x96\xB5",		"\xB4\xC4" => "\xE8\x8C\xA8",		"\xB4\xC5" => "\xE7\xA3\x81",		"\xB4\xC6" => "\xE9\x9B\x8C",		"\xB4\xC7" => "\xE8\xBE\x9E",		"\xB4\xC8" => "\xE6\x85\x88",		"\xB4\xC9" => "\xE7\x93\xB7",		"\xB4\xCA" => "\xE8\xAF\x8D",		"\xB4\xCB" => "\xE6\xAD\xA4",		"\xB4\xCC" => "\xE5\x88\xBA",		"\xB4\xCD" => "\xE8\xB5\x90",		"\xB4\xCE" => "\xE6\xAC\xA1",		"\xB4\xCF" => "\xE8\x81\xAA",		"\xB4\xD0" => "\xE8\x91\xB1",		"\xB4\xD1" => "\xE5\x9B\xB1",		"\xB4\xD2" => "\xE5\x8C\x86",		"\xB4\xD3" => "\xE4\xBB\x8E",		"\xB4\xD4" => "\xE4\xB8\x9B",		"\xB4\xD5" => "\xE5\x87\x91",		"\xB4\xD6" => "\xE7\xB2\x97",		"\xB4\xD7" => "\xE9\x86\x8B",		"\xB4\xD8" => "\xE7\xB0\x87",		"\xB4\xD9" => "\xE4\xBF\x83",		"\xB4\xDA" => "\xE8\xB9\xBF",		"\xB4\xDB" => "\xE7\xAF\xA1",		"\xB4\xDC" => "\xE7\xAA\x9C",		"\xB4\xDD" => "\xE6\x91\xA7",		"\xB4\xDE" => "\xE5\xB4\x94",		"\xB4\xDF" => "\xE5\x82\xAC",		"\xB4\xE0" => "\xE8\x84\x86",		"\xB4\xE1" => "\xE7\x98\x81",		"\xB4\xE2" => "\xE7\xB2\xB9",		"\xB4\xE3" => "\xE6\xB7\xAC",		"\xB4\xE4" => "\xE7\xBF\xA0",		"\xB4\xE5" => "\xE6\x9D\x91",		"\xB4\xE6" => "\xE5\xAD\x98",		"\xB4\xE7" => "\xE5\xAF\xB8",		"\xB4\xE8" => "\xE7\xA3\x8B",		"\xB4\xE9" => "\xE6\x92\xAE",		"\xB4\xEA" => "\xE6\x90\x93",		"\xB4\xEB" => "\xE6\x8E\xAA",		"\xB4\xEC" => "\xE6\x8C\xAB",		"\xB4\xED" => "\xE9\x94\x99",		"\xB4\xEE" => "\xE6\x90\xAD",		"\xB4\xEF" => "\xE8\xBE\xBE",		"\xB4\xF0" => "\xE7\xAD\x94",		"\xB4\xF1" => "\xE7\x98\xA9",		"\xB4\xF2" => "\xE6\x89\x93",		"\xB4\xF3" => "\xE5\xA4\xA7",		"\xB4\xF4" => "\xE5\x91\x86",		"\xB4\xF5" => "\xE6\xAD\xB9",		"\xB4\xF6" => "\xE5\x82\xA3",		"\xB4\xF7" => "\xE6\x88\xB4",		"\xB4\xF8" => "\xE5\xB8\xA6",		"\xB4\xF9" => "\xE6\xAE\x86",		"\xB4\xFA" => "\xE4\xBB\xA3",		"\xB4\xFB" => "\xE8\xB4\xB7",		"\xB4\xFC" => "\xE8\xA2\x8B",		"\xB4\xFD" => "\xE5\xBE\x85",		"\xB4\xFE" => "\xE9\x80\xAE",		"\xB5\xA1" => "\xE6\x80\xA0",		"\xB5\xA2" => "\xE8\x80\xBD",		"\xB5\xA3" => "\xE6\x8B\x85",		"\xB5\xA4" => "\xE4\xB8\xB9",		"\xB5\xA5" => "\xE5\x8D\x95",		"\xB5\xA6" => "\xE9\x83\xB8",		"\xB5\xA7" => "\xE6\x8E\xB8",		"\xB5\xA8" => "\xE8\x83\x86",		"\xB5\xA9" => "\xE6\x97\xA6",		"\xB5\xAA" => "\xE6\xB0\xAE",		"\xB5\xAB" => "\xE4\xBD\x86",		"\xB5\xAC" => "\xE6\x83\xAE",		"\xB5\xAD" => "\xE6\xB7\xA1",		"\xB5\xAE" => "\xE8\xAF\x9E",		"\xB5\xAF" => "\xE5\xBC\xB9",		"\xB5\xB0" => "\xE8\x9B\x8B",		"\xB5\xB1" => "\xE5\xBD\x93",		"\xB5\xB2" => "\xE6\x8C\xA1",		"\xB5\xB3" => "\xE5\x85\x9A",		"\xB5\xB4" => "\xE8\x8D\xA1",		"\xB5\xB5" => "\xE6\xA1\xA3",		"\xB5\xB6" => "\xE5\x88\x80",		"\xB5\xB7" => "\xE6\x8D\xA3",		"\xB5\xB8" => "\xE8\xB9\x88",		"\xB5\xB9" => "\xE5\x80\x92",		"\xB5\xBA" => "\xE5\xB2\x9B",		"\xB5\xBB" => "\xE7\xA5\xB7",		"\xB5\xBC" => "\xE5\xAF\xBC",		"\xB5\xBD" => "\xE5\x88\xB0",		"\xB5\xBE" => "\xE7\xA8\xBB",		"\xB5\xBF" => "\xE6\x82\xBC",		"\xB5\xC0" => "\xE9\x81\x93",		"\xB5\xC1" => "\xE7\x9B\x97",		"\xB5\xC2" => "\xE5\xBE\xB7",		"\xB5\xC3" => "\xE5\xBE\x97",		"\xB5\xC4" => "\xE7\x9A\x84",		"\xB5\xC5" => "\xE8\xB9\xAC",		"\xB5\xC6" => "\xE7\x81\xAF",		"\xB5\xC7" => "\xE7\x99\xBB",		"\xB5\xC8" => "\xE7\xAD\x89",		"\xB5\xC9" => "\xE7\x9E\xAA",		"\xB5\xCA" => "\xE5\x87\xB3",		"\xB5\xCB" => "\xE9\x82\x93",		"\xB5\xCC" => "\xE5\xA0\xA4",		"\xB5\xCD" => "\xE4\xBD\x8E",		"\xB5\xCE" => "\xE6\xBB\xB4",		"\xB5\xCF" => "\xE8\xBF\xAA",		"\xB5\xD0" => "\xE6\x95\x8C",		"\xB5\xD1" => "\xE7\xAC\x9B",		"\xB5\xD2" => "\xE7\x8B\x84",		"\xB5\xD3" => "\xE6\xB6\xA4",		"\xB5\xD4" => "\xE7\xBF\x9F",		"\xB5\xD5" => "\xE5\xAB\xA1",		"\xB5\xD6" => "\xE6\x8A\xB5",		"\xB5\xD7" => "\xE5\xBA\x95",		"\xB5\xD8" => "\xE5\x9C\xB0",		"\xB5\xD9" => "\xE8\x92\x82",		"\xB5\xDA" => "\xE7\xAC\xAC",		"\xB5\xDB" => "\xE5\xB8\x9D",		"\xB5\xDC" => "\xE5\xBC\x9F",		"\xB5\xDD" => "\xE9\x80\x92",		"\xB5\xDE" => "\xE7\xBC\x94",		"\xB5\xDF" => "\xE9\xA2\xA0",		"\xB5\xE0" => "\xE6\x8E\x82",		"\xB5\xE1" => "\xE6\xBB\x87",		"\xB5\xE2" => "\xE7\xA2\x98",		"\xB5\xE3" => "\xE7\x82\xB9",		"\xB5\xE4" => "\xE5\x85\xB8",		"\xB5\xE5" => "\xE9\x9D\x9B",		"\xB5\xE6" => "\xE5\x9E\xAB",		"\xB5\xE7" => "\xE7\x94\xB5",		"\xB5\xE8" => "\xE4\xBD\x83",		"\xB5\xE9" => "\xE7\x94\xB8",		"\xB5\xEA" => "\xE5\xBA\x97",		"\xB5\xEB" => "\xE6\x83\xA6",		"\xB5\xEC" => "\xE5\xA5\xA0",		"\xB5\xED" => "\xE6\xB7\x80",		"\xB5\xEE" => "\xE6\xAE\xBF",		"\xB5\xEF" => "\xE7\xA2\x89",		"\xB5\xF0" => "\xE5\x8F\xBC",		"\xB5\xF1" => "\xE9\x9B\x95",		"\xB5\xF2" => "\xE5\x87\x8B",		"\xB5\xF3" => "\xE5\x88\x81",		"\xB5\xF4" => "\xE6\x8E\x89",		"\xB5\xF5" => "\xE5\x90\x8A",		"\xB5\xF6" => "\xE9\x92\x93",		"\xB5\xF7" => "\xE8\xB0\x83",		"\xB5\xF8" => "\xE8\xB7\x8C",		"\xB5\xF9" => "\xE7\x88\xB9",		"\xB5\xFA" => "\xE7\xA2\x9F",		"\xB5\xFB" => "\xE8\x9D\xB6",		"\xB5\xFC" => "\xE8\xBF\xAD",		"\xB5\xFD" => "\xE8\xB0\x8D",		"\xB5\xFE" => "\xE5\x8F\xA0",		"\xB6\xA1" => "\xE4\xB8\x81",		"\xB6\xA2" => "\xE7\x9B\xAF",		"\xB6\xA3" => "\xE5\x8F\xAE",		"\xB6\xA4" => "\xE9\x92\x89",		"\xB6\xA5" => "\xE9\xA1\xB6",		"\xB6\xA6" => "\xE9\xBC\x8E",		"\xB6\xA7" => "\xE9\x94\xAD",		"\xB6\xA8" => "\xE5\xAE\x9A",		"\xB6\xA9" => "\xE8\xAE\xA2",		"\xB6\xAA" => "\xE4\xB8\xA2",		"\xB6\xAB" => "\xE4\xB8\x9C",		"\xB6\xAC" => "\xE5\x86\xAC",		"\xB6\xAD" => "\xE8\x91\xA3",		"\xB6\xAE" => "\xE6\x87\x82",		"\xB6\xAF" => "\xE5\x8A\xA8",		"\xB6\xB0" => "\xE6\xA0\x8B",		"\xB6\xB1" => "\xE4\xBE\x97",		"\xB6\xB2" => "\xE6\x81\xAB",		"\xB6\xB3" => "\xE5\x86\xBB",		"\xB6\xB4" => "\xE6\xB4\x9E",		"\xB6\xB5" => "\xE5\x85\x9C",		"\xB6\xB6" => "\xE6\x8A\x96",		"\xB6\xB7" => "\xE6\x96\x97",		"\xB6\xB8" => "\xE9\x99\xA1",		"\xB6\xB9" => "\xE8\xB1\x86",		"\xB6\xBA" => "\xE9\x80\x97",		"\xB6\xBB" => "\xE7\x97\x98",		"\xB6\xBC" => "\xE9\x83\xBD",		"\xB6\xBD" => "\xE7\x9D\xA3",		"\xB6\xBE" => "\xE6\xAF\x92",		"\xB6\xBF" => "\xE7\x8A\x8A",		"\xB6\xC0" => "\xE7\x8B\xAC",		"\xB6\xC1" => "\xE8\xAF\xBB",		"\xB6\xC2" => "\xE5\xA0\xB5",		"\xB6\xC3" => "\xE7\x9D\xB9",		"\xB6\xC4" => "\xE8\xB5\x8C",		"\xB6\xC5" => "\xE6\x9D\x9C",		"\xB6\xC6" => "\xE9\x95\x80",		"\xB6\xC7" => "\xE8\x82\x9A",		"\xB6\xC8" => "\xE5\xBA\xA6",		"\xB6\xC9" => "\xE6\xB8\xA1",		"\xB6\xCA" => "\xE5\xA6\x92",		"\xB6\xCB" => "\xE7\xAB\xAF",		"\xB6\xCC" => "\xE7\x9F\xAD",		"\xB6\xCD" => "\xE9\x94\xBB",		"\xB6\xCE" => "\xE6\xAE\xB5",		"\xB6\xCF" => "\xE6\x96\xAD",		"\xB6\xD0" => "\xE7\xBC\x8E",		"\xB6\xD1" => "\xE5\xA0\x86",		"\xB6\xD2" => "\xE5\x85\x91",		"\xB6\xD3" => "\xE9\x98\x9F",		"\xB6\xD4" => "\xE5\xAF\xB9",		"\xB6\xD5" => "\xE5\xA2\xA9",		"\xB6\xD6" => "\xE5\x90\xA8",		"\xB6\xD7" => "\xE8\xB9\xB2",		"\xB6\xD8" => "\xE6\x95\xA6",		"\xB6\xD9" => "\xE9\xA1\xBF",		"\xB6\xDA" => "\xE5\x9B\xA4",		"\xB6\xDB" => "\xE9\x92\x9D",		"\xB6\xDC" => "\xE7\x9B\xBE",		"\xB6\xDD" => "\xE9\x81\x81",		"\xB6\xDE" => "\xE6\x8E\x87",		"\xB6\xDF" => "\xE5\x93\x86",		"\xB6\xE0" => "\xE5\xA4\x9A",		"\xB6\xE1" => "\xE5\xA4\xBA",		"\xB6\xE2" => "\xE5\x9E\x9B",		"\xB6\xE3" => "\xE8\xBA\xB2",		"\xB6\xE4" => "\xE6\x9C\xB5",		"\xB6\xE5" => "\xE8\xB7\xBA",		"\xB6\xE6" => "\xE8\x88\xB5",		"\xB6\xE7" => "\xE5\x89\x81",		"\xB6\xE8" => "\xE6\x83\xB0",		"\xB6\xE9" => "\xE5\xA0\x95",		"\xB6\xEA" => "\xE8\x9B\xBE",		"\xB6\xEB" => "\xE5\xB3\xA8",		"\xB6\xEC" => "\xE9\xB9\x85",		"\xB6\xED" => "\xE4\xBF\x84",		"\xB6\xEE" => "\xE9\xA2\x9D",		"\xB6\xEF" => "\xE8\xAE\xB9",		"\xB6\xF0" => "\xE5\xA8\xA5",		"\xB6\xF1" => "\xE6\x81\xB6",		"\xB6\xF2" => "\xE5\x8E\x84",		"\xB6\xF3" => "\xE6\x89\xBC",		"\xB6\xF4" => "\xE9\x81\x8F",		"\xB6\xF5" => "\xE9\x84\x82",		"\xB6\xF6" => "\xE9\xA5\xBF",		"\xB6\xF7" => "\xE6\x81\xA9",		"\xB6\xF8" => "\xE8\x80\x8C",		"\xB6\xF9" => "\xE5\x84\xBF",		"\xB6\xFA" => "\xE8\x80\xB3",		"\xB6\xFB" => "\xE5\xB0\x94",		"\xB6\xFC" => "\xE9\xA5\xB5",		"\xB6\xFD" => "\xE6\xB4\xB1",		"\xB6\xFE" => "\xE4\xBA\x8C",		"\xB7\xA1" => "\xE8\xB4\xB0",		"\xB7\xA2" => "\xE5\x8F\x91",		"\xB7\xA3" => "\xE7\xBD\x9A",		"\xB7\xA4" => "\xE7\xAD\x8F",		"\xB7\xA5" => "\xE4\xBC\x90",		"\xB7\xA6" => "\xE4\xB9\x8F",		"\xB7\xA7" => "\xE9\x98\x80",		"\xB7\xA8" => "\xE6\xB3\x95",		"\xB7\xA9" => "\xE7\x8F\x90",		"\xB7\xAA" => "\xE8\x97\xA9",		"\xB7\xAB" => "\xE5\xB8\x86",		"\xB7\xAC" => "\xE7\x95\xAA",		"\xB7\xAD" => "\xE7\xBF\xBB",		"\xB7\xAE" => "\xE6\xA8\x8A",		"\xB7\xAF" => "\xE7\x9F\xBE",		"\xB7\xB0" => "\xE9\x92\x92",		"\xB7\xB1" => "\xE7\xB9\x81",		"\xB7\xB2" => "\xE5\x87\xA1",		"\xB7\xB3" => "\xE7\x83\xA6",		"\xB7\xB4" => "\xE5\x8F\x8D",		"\xB7\xB5" => "\xE8\xBF\x94",		"\xB7\xB6" => "\xE8\x8C\x83",		"\xB7\xB7" => "\xE8\xB4\xA9",		"\xB7\xB8" => "\xE7\x8A\xAF",		"\xB7\xB9" => "\xE9\xA5\xAD",		"\xB7\xBA" => "\xE6\xB3\x9B",		"\xB7\xBB" => "\xE5\x9D\x8A",		"\xB7\xBC" => "\xE8\x8A\xB3",		"\xB7\xBD" => "\xE6\x96\xB9",		"\xB7\xBE" => "\xE8\x82\xAA",		"\xB7\xBF" => "\xE6\x88\xBF",		"\xB7\xC0" => "\xE9\x98\xB2",		"\xB7\xC1" => "\xE5\xA6\xA8",		"\xB7\xC2" => "\xE4\xBB\xBF",		"\xB7\xC3" => "\xE8\xAE\xBF",		"\xB7\xC4" => "\xE7\xBA\xBA",		"\xB7\xC5" => "\xE6\x94\xBE",		"\xB7\xC6" => "\xE8\x8F\xB2",		"\xB7\xC7" => "\xE9\x9D\x9E",		"\xB7\xC8" => "\xE5\x95\xA1",		"\xB7\xC9" => "\xE9\xA3\x9E",		"\xB7\xCA" => "\xE8\x82\xA5",		"\xB7\xCB" => "\xE5\x8C\xAA",		"\xB7\xCC" => "\xE8\xAF\xBD",		"\xB7\xCD" => "\xE5\x90\xA0",		"\xB7\xCE" => "\xE8\x82\xBA",		"\xB7\xCF" => "\xE5\xBA\x9F",		"\xB7\xD0" => "\xE6\xB2\xB8",		"\xB7\xD1" => "\xE8\xB4\xB9",		"\xB7\xD2" => "\xE8\x8A\xAC",		"\xB7\xD3" => "\xE9\x85\x9A",		"\xB7\xD4" => "\xE5\x90\xA9",		"\xB7\xD5" => "\xE6\xB0\x9B",		"\xB7\xD6" => "\xE5\x88\x86",		"\xB7\xD7" => "\xE7\xBA\xB7",		"\xB7\xD8" => "\xE5\x9D\x9F",		"\xB7\xD9" => "\xE7\x84\x9A",		"\xB7\xDA" => "\xE6\xB1\xBE",		"\xB7\xDB" => "\xE7\xB2\x89",		"\xB7\xDC" => "\xE5\xA5\x8B",		"\xB7\xDD" => "\xE4\xBB\xBD",		"\xB7\xDE" => "\xE5\xBF\xBF",		"\xB7\xDF" => "\xE6\x84\xA4",		"\xB7\xE0" => "\xE7\xB2\xAA",		"\xB7\xE1" => "\xE4\xB8\xB0",		"\xB7\xE2" => "\xE5\xB0\x81",		"\xB7\xE3" => "\xE6\x9E\xAB",		"\xB7\xE4" => "\xE8\x9C\x82",		"\xB7\xE5" => "\xE5\xB3\xB0",		"\xB7\xE6" => "\xE9\x94\x8B",		"\xB7\xE7" => "\xE9\xA3\x8E",		"\xB7\xE8" => "\xE7\x96\xAF",		"\xB7\xE9" => "\xE7\x83\xBD",		"\xB7\xEA" => "\xE9\x80\xA2",		"\xB7\xEB" => "\xE5\x86\xAF",		"\xB7\xEC" => "\xE7\xBC\x9D",		"\xB7\xED" => "\xE8\xAE\xBD",		"\xB7\xEE" => "\xE5\xA5\x89",		"\xB7\xEF" => "\xE5\x87\xA4",		"\xB7\xF0" => "\xE4\xBD\x9B",		"\xB7\xF1" => "\xE5\x90\xA6",		"\xB7\xF2" => "\xE5\xA4\xAB",		"\xB7\xF3" => "\xE6\x95\xB7",		"\xB7\xF4" => "\xE8\x82\xA4",		"\xB7\xF5" => "\xE5\xAD\xB5",		"\xB7\xF6" => "\xE6\x89\xB6",		"\xB7\xF7" => "\xE6\x8B\x82",		"\xB7\xF8" => "\xE8\xBE\x90",		"\xB7\xF9" => "\xE5\xB9\x85",		"\xB7\xFA" => "\xE6\xB0\x9F",		"\xB7\xFB" => "\xE7\xAC\xA6",		"\xB7\xFC" => "\xE4\xBC\x8F",		"\xB7\xFD" => "\xE4\xBF\x98",		"\xB7\xFE" => "\xE6\x9C\x8D",		"\xB8\xA1" => "\xE6\xB5\xAE",		"\xB8\xA2" => "\xE6\xB6\xAA",		"\xB8\xA3" => "\xE7\xA6\x8F",		"\xB8\xA4" => "\xE8\xA2\xB1",		"\xB8\xA5" => "\xE5\xBC\x97",		"\xB8\xA6" => "\xE7\x94\xAB",		"\xB8\xA7" => "\xE6\x8A\x9A",		"\xB8\xA8" => "\xE8\xBE\x85",		"\xB8\xA9" => "\xE4\xBF\xAF",		"\xB8\xAA" => "\xE9\x87\x9C",		"\xB8\xAB" => "\xE6\x96\xA7",		"\xB8\xAC" => "\xE8\x84\xAF",		"\xB8\xAD" => "\xE8\x85\x91",		"\xB8\xAE" => "\xE5\xBA\x9C",		"\xB8\xAF" => "\xE8\x85\x90",		"\xB8\xB0" => "\xE8\xB5\xB4",		"\xB8\xB1" => "\xE5\x89\xAF",		"\xB8\xB2" => "\xE8\xA6\x86",		"\xB8\xB3" => "\xE8\xB5\x8B",		"\xB8\xB4" => "\xE5\xA4\x8D",		"\xB8\xB5" => "\xE5\x82\x85",		"\xB8\xB6" => "\xE4\xBB\x98",		"\xB8\xB7" => "\xE9\x98\x9C",		"\xB8\xB8" => "\xE7\x88\xB6",		"\xB8\xB9" => "\xE8\x85\xB9",		"\xB8\xBA" => "\xE8\xB4\x9F",		"\xB8\xBB" => "\xE5\xAF\x8C",		"\xB8\xBC" => "\xE8\xAE\xA3",		"\xB8\xBD" => "\xE9\x99\x84",		"\xB8\xBE" => "\xE5\xA6\x87",		"\xB8\xBF" => "\xE7\xBC\x9A",		"\xB8\xC0" => "\xE5\x92\x90",		"\xB8\xC1" => "\xE5\x99\xB6",		"\xB8\xC2" => "\xE5\x98\x8E",		"\xB8\xC3" => "\xE8\xAF\xA5",		"\xB8\xC4" => "\xE6\x94\xB9",		"\xB8\xC5" => "\xE6\xA6\x82",		"\xB8\xC6" => "\xE9\x92\x99",		"\xB8\xC7" => "\xE7\x9B\x96",		"\xB8\xC8" => "\xE6\xBA\x89",		"\xB8\xC9" => "\xE5\xB9\xB2",		"\xB8\xCA" => "\xE7\x94\x98",		"\xB8\xCB" => "\xE6\x9D\x86",		"\xB8\xCC" => "\xE6\x9F\x91",		"\xB8\xCD" => "\xE7\xAB\xBF",		"\xB8\xCE" => "\xE8\x82\x9D",		"\xB8\xCF" => "\xE8\xB5\xB6",		"\xB8\xD0" => "\xE6\x84\x9F",		"\xB8\xD1" => "\xE7\xA7\x86",		"\xB8\xD2" => "\xE6\x95\xA2",		"\xB8\xD3" => "\xE8\xB5\xA3",		"\xB8\xD4" => "\xE5\x86\x88",		"\xB8\xD5" => "\xE5\x88\x9A",		"\xB8\xD6" => "\xE9\x92\xA2",		"\xB8\xD7" => "\xE7\xBC\xB8",		"\xB8\xD8" => "\xE8\x82\x9B",		"\xB8\xD9" => "\xE7\xBA\xB2",		"\xB8\xDA" => "\xE5\xB2\x97",		"\xB8\xDB" => "\xE6\xB8\xAF",		"\xB8\xDC" => "\xE6\x9D\xA0",		"\xB8\xDD" => "\xE7\xAF\x99",		"\xB8\xDE" => "\xE7\x9A\x8B",		"\xB8\xDF" => "\xE9\xAB\x98",		"\xB8\xE0" => "\xE8\x86\x8F",		"\xB8\xE1" => "\xE7\xBE\x94",		"\xB8\xE2" => "\xE7\xB3\x95",		"\xB8\xE3" => "\xE6\x90\x9E",		"\xB8\xE4" => "\xE9\x95\x90",		"\xB8\xE5" => "\xE7\xA8\xBF",		"\xB8\xE6" => "\xE5\x91\x8A",		"\xB8\xE7" => "\xE5\x93\xA5",		"\xB8\xE8" => "\xE6\xAD\x8C",		"\xB8\xE9" => "\xE6\x90\x81",		"\xB8\xEA" => "\xE6\x88\x88",		"\xB8\xEB" => "\xE9\xB8\xBD",		"\xB8\xEC" => "\xE8\x83\xB3",		"\xB8\xED" => "\xE7\x96\x99",		"\xB8\xEE" => "\xE5\x89\xB2",		"\xB8\xEF" => "\xE9\x9D\xA9",		"\xB8\xF0" => "\xE8\x91\x9B",		"\xB8\xF1" => "\xE6\xA0\xBC",		"\xB8\xF2" => "\xE8\x9B\xA4",		"\xB8\xF3" => "\xE9\x98\x81",		"\xB8\xF4" => "\xE9\x9A\x94",		"\xB8\xF5" => "\xE9\x93\xAC",		"\xB8\xF6" => "\xE4\xB8\xAA",		"\xB8\xF7" => "\xE5\x90\x84",		"\xB8\xF8" => "\xE7\xBB\x99",		"\xB8\xF9" => "\xE6\xA0\xB9",		"\xB8\xFA" => "\xE8\xB7\x9F",		"\xB8\xFB" => "\xE8\x80\x95",		"\xB8\xFC" => "\xE6\x9B\xB4",		"\xB8\xFD" => "\xE5\xBA\x9A",		"\xB8\xFE" => "\xE7\xBE\xB9",		"\xB9\xA1" => "\xE5\x9F\x82",		"\xB9\xA2" => "\xE8\x80\xBF",		"\xB9\xA3" => "\xE6\xA2\x97",		"\xB9\xA4" => "\xE5\xB7\xA5",		"\xB9\xA5" => "\xE6\x94\xBB",		"\xB9\xA6" => "\xE5\x8A\x9F",		"\xB9\xA7" => "\xE6\x81\xAD",		"\xB9\xA8" => "\xE9\xBE\x9A",		"\xB9\xA9" => "\xE4\xBE\x9B",		"\xB9\xAA" => "\xE8\xBA\xAC",		"\xB9\xAB" => "\xE5\x85\xAC",		"\xB9\xAC" => "\xE5\xAE\xAB",		"\xB9\xAD" => "\xE5\xBC\x93",		"\xB9\xAE" => "\xE5\xB7\xA9",		"\xB9\xAF" => "\xE6\xB1\x9E",		"\xB9\xB0" => "\xE6\x8B\xB1",		"\xB9\xB1" => "\xE8\xB4\xA1",		"\xB9\xB2" => "\xE5\x85\xB1",		"\xB9\xB3" => "\xE9\x92\xA9",		"\xB9\xB4" => "\xE5\x8B\xBE",		"\xB9\xB5" => "\xE6\xB2\x9F",		"\xB9\xB6" => "\xE8\x8B\x9F",		"\xB9\xB7" => "\xE7\x8B\x97",		"\xB9\xB8" => "\xE5\x9E\xA2",		"\xB9\xB9" => "\xE6\x9E\x84",		"\xB9\xBA" => "\xE8\xB4\xAD",		"\xB9\xBB" => "\xE5\xA4\x9F",		"\xB9\xBC" => "\xE8\xBE\x9C",		"\xB9\xBD" => "\xE8\x8F\x87",		"\xB9\xBE" => "\xE5\x92\x95",		"\xB9\xBF" => "\xE7\xAE\x8D",		"\xB9\xC0" => "\xE4\xBC\xB0",		"\xB9\xC1" => "\xE6\xB2\xBD",		"\xB9\xC2" => "\xE5\xAD\xA4",		"\xB9\xC3" => "\xE5\xA7\x91",		"\xB9\xC4" => "\xE9\xBC\x93",		"\xB9\xC5" => "\xE5\x8F\xA4",		"\xB9\xC6" => "\xE8\x9B\x8A",		"\xB9\xC7" => "\xE9\xAA\xA8",		"\xB9\xC8" => "\xE8\xB0\xB7",		"\xB9\xC9" => "\xE8\x82\xA1",		"\xB9\xCA" => "\xE6\x95\x85",		"\xB9\xCB" => "\xE9\xA1\xBE",		"\xB9\xCC" => "\xE5\x9B\xBA",		"\xB9\xCD" => "\xE9\x9B\x87",		"\xB9\xCE" => "\xE5\x88\xAE",		"\xB9\xCF" => "\xE7\x93\x9C",		"\xB9\xD0" => "\xE5\x89\x90",		"\xB9\xD1" => "\xE5\xAF\xA1",		"\xB9\xD2" => "\xE6\x8C\x82",		"\xB9\xD3" => "\xE8\xA4\x82",		"\xB9\xD4" => "\xE4\xB9\x96",		"\xB9\xD5" => "\xE6\x8B\x90",		"\xB9\xD6" => "\xE6\x80\xAA",		"\xB9\xD7" => "\xE6\xA3\xBA",		"\xB9\xD8" => "\xE5\x85\xB3",		"\xB9\xD9" => "\xE5\xAE\x98",		"\xB9\xDA" => "\xE5\x86\xA0",		"\xB9\xDB" => "\xE8\xA7\x82",		"\xB9\xDC" => "\xE7\xAE\xA1",		"\xB9\xDD" => "\xE9\xA6\x86",		"\xB9\xDE" => "\xE7\xBD\x90",		"\xB9\xDF" => "\xE6\x83\xAF",		"\xB9\xE0" => "\xE7\x81\x8C",		"\xB9\xE1" => "\xE8\xB4\xAF",		"\xB9\xE2" => "\xE5\x85\x89",		"\xB9\xE3" => "\xE5\xB9\xBF",		"\xB9\xE4" => "\xE9\x80\x9B",		"\xB9\xE5" => "\xE7\x91\xB0",		"\xB9\xE6" => "\xE8\xA7\x84",		"\xB9\xE7" => "\xE5\x9C\xAD",		"\xB9\xE8" => "\xE7\xA1\x85",		"\xB9\xE9" => "\xE5\xBD\x92",		"\xB9\xEA" => "\xE9\xBE\x9F",		"\xB9\xEB" => "\xE9\x97\xBA",		"\xB9\xEC" => "\xE8\xBD\xA8",		"\xB9\xED" => "\xE9\xAC\xBC",		"\xB9\xEE" => "\xE8\xAF\xA1",		"\xB9\xEF" => "\xE7\x99\xB8",		"\xB9\xF0" => "\xE6\xA1\x82",		"\xB9\xF1" => "\xE6\x9F\x9C",		"\xB9\xF2" => "\xE8\xB7\xAA",		"\xB9\xF3" => "\xE8\xB4\xB5",		"\xB9\xF4" => "\xE5\x88\xBD",		"\xB9\xF5" => "\xE8\xBE\x8A",		"\xB9\xF6" => "\xE6\xBB\x9A",		"\xB9\xF7" => "\xE6\xA3\x8D",		"\xB9\xF8" => "\xE9\x94\x85",		"\xB9\xF9" => "\xE9\x83\xAD",		"\xB9\xFA" => "\xE5\x9B\xBD",		"\xB9\xFB" => "\xE6\x9E\x9C",		"\xB9\xFC" => "\xE8\xA3\xB9",		"\xB9\xFD" => "\xE8\xBF\x87",		"\xB9\xFE" => "\xE5\x93\x88",		"\xBA\xA1" => "\xE9\xAA\xB8",		"\xBA\xA2" => "\xE5\xAD\xA9",		"\xBA\xA3" => "\xE6\xB5\xB7",		"\xBA\xA4" => "\xE6\xB0\xA6",		"\xBA\xA5" => "\xE4\xBA\xA5",		"\xBA\xA6" => "\xE5\xAE\xB3",		"\xBA\xA7" => "\xE9\xAA\x87",		"\xBA\xA8" => "\xE9\x85\xA3",		"\xBA\xA9" => "\xE6\x86\xA8",		"\xBA\xAA" => "\xE9\x82\xAF",		"\xBA\xAB" => "\xE9\x9F\xA9",		"\xBA\xAC" => "\xE5\x90\xAB",		"\xBA\xAD" => "\xE6\xB6\xB5",		"\xBA\xAE" => "\xE5\xAF\x92",		"\xBA\xAF" => "\xE5\x87\xBD",		"\xBA\xB0" => "\xE5\x96\x8A",		"\xBA\xB1" => "\xE7\xBD\x95",		"\xBA\xB2" => "\xE7\xBF\xB0",		"\xBA\xB3" => "\xE6\x92\xBC",		"\xBA\xB4" => "\xE6\x8D\x8D",		"\xBA\xB5" => "\xE6\x97\xB1",		"\xBA\xB6" => "\xE6\x86\xBE",		"\xBA\xB7" => "\xE6\x82\x8D",		"\xBA\xB8" => "\xE7\x84\x8A",		"\xBA\xB9" => "\xE6\xB1\x97",		"\xBA\xBA" => "\xE6\xB1\x89",		"\xBA\xBB" => "\xE5\xA4\xAF",		"\xBA\xBC" => "\xE6\x9D\xAD",		"\xBA\xBD" => "\xE8\x88\xAA",		"\xBA\xBE" => "\xE5\xA3\x95",		"\xBA\xBF" => "\xE5\x9A\x8E",		"\xBA\xC0" => "\xE8\xB1\xAA",		"\xBA\xC1" => "\xE6\xAF\xAB",		"\xBA\xC2" => "\xE9\x83\x9D",		"\xBA\xC3" => "\xE5\xA5\xBD",		"\xBA\xC4" => "\xE8\x80\x97",		"\xBA\xC5" => "\xE5\x8F\xB7",		"\xBA\xC6" => "\xE6\xB5\xA9",		"\xBA\xC7" => "\xE5\x91\xB5",		"\xBA\xC8" => "\xE5\x96\x9D",		"\xBA\xC9" => "\xE8\x8D\xB7",		"\xBA\xCA" => "\xE8\x8F\x8F",		"\xBA\xCB" => "\xE6\xA0\xB8",		"\xBA\xCC" => "\xE7\xA6\xBE",		"\xBA\xCD" => "\xE5\x92\x8C",		"\xBA\xCE" => "\xE4\xBD\x95",		"\xBA\xCF" => "\xE5\x90\x88",		"\xBA\xD0" => "\xE7\x9B\x92",		"\xBA\xD1" => "\xE8\xB2\x89",		"\xBA\xD2" => "\xE9\x98\x82",		"\xBA\xD3" => "\xE6\xB2\xB3",		"\xBA\xD4" => "\xE6\xB6\xB8",		"\xBA\xD5" => "\xE8\xB5\xAB",		"\xBA\xD6" => "\xE8\xA4\x90",		"\xBA\xD7" => "\xE9\xB9\xA4",		"\xBA\xD8" => "\xE8\xB4\xBA",		"\xBA\xD9" => "\xE5\x98\xBF",		"\xBA\xDA" => "\xE9\xBB\x91",		"\xBA\xDB" => "\xE7\x97\x95",		"\xBA\xDC" => "\xE5\xBE\x88",		"\xBA\xDD" => "\xE7\x8B\xA0",		"\xBA\xDE" => "\xE6\x81\xA8",		"\xBA\xDF" => "\xE5\x93\xBC",		"\xBA\xE0" => "\xE4\xBA\xA8",		"\xBA\xE1" => "\xE6\xA8\xAA",		"\xBA\xE2" => "\xE8\xA1\xA1",		"\xBA\xE3" => "\xE6\x81\x92",		"\xBA\xE4" => "\xE8\xBD\xB0",		"\xBA\xE5" => "\xE5\x93\x84",		"\xBA\xE6" => "\xE7\x83\x98",		"\xBA\xE7" => "\xE8\x99\xB9",		"\xBA\xE8" => "\xE9\xB8\xBF",		"\xBA\xE9" => "\xE6\xB4\xAA",		"\xBA\xEA" => "\xE5\xAE\x8F",		"\xBA\xEB" => "\xE5\xBC\x98",		"\xBA\xEC" => "\xE7\xBA\xA2",		"\xBA\xED" => "\xE5\x96\x89",		"\xBA\xEE" => "\xE4\xBE\xAF",		"\xBA\xEF" => "\xE7\x8C\xB4",		"\xBA\xF0" => "\xE5\x90\xBC",		"\xBA\xF1" => "\xE5\x8E\x9A",		"\xBA\xF2" => "\xE5\x80\x99",		"\xBA\xF3" => "\xE5\x90\x8E",		"\xBA\xF4" => "\xE5\x91\xBC",		"\xBA\xF5" => "\xE4\xB9\x8E",		"\xBA\xF6" => "\xE5\xBF\xBD",		"\xBA\xF7" => "\xE7\x91\x9A",		"\xBA\xF8" => "\xE5\xA3\xB6",		"\xBA\xF9" => "\xE8\x91\xAB",		"\xBA\xFA" => "\xE8\x83\xA1",		"\xBA\xFB" => "\xE8\x9D\xB4",		"\xBA\xFC" => "\xE7\x8B\x90",		"\xBA\xFD" => "\xE7\xB3\x8A",		"\xBA\xFE" => "\xE6\xB9\x96",		"\xBB\xA1" => "\xE5\xBC\xA7",		"\xBB\xA2" => "\xE8\x99\x8E",		"\xBB\xA3" => "\xE5\x94\xAC",		"\xBB\xA4" => "\xE6\x8A\xA4",		"\xBB\xA5" => "\xE4\xBA\x92",		"\xBB\xA6" => "\xE6\xB2\xAA",		"\xBB\xA7" => "\xE6\x88\xB7",		"\xBB\xA8" => "\xE8\x8A\xB1",		"\xBB\xA9" => "\xE5\x93\x97",		"\xBB\xAA" => "\xE5\x8D\x8E",		"\xBB\xAB" => "\xE7\x8C\xBE",		"\xBB\xAC" => "\xE6\xBB\x91",		"\xBB\xAD" => "\xE7\x94\xBB",		"\xBB\xAE" => "\xE5\x88\x92",		"\xBB\xAF" => "\xE5\x8C\x96",		"\xBB\xB0" => "\xE8\xAF\x9D",		"\xBB\xB1" => "\xE6\xA7\x90",		"\xBB\xB2" => "\xE5\xBE\x8A",		"\xBB\xB3" => "\xE6\x80\x80",		"\xBB\xB4" => "\xE6\xB7\xAE",		"\xBB\xB5" => "\xE5\x9D\x8F",		"\xBB\xB6" => "\xE6\xAC\xA2",		"\xBB\xB7" => "\xE7\x8E\xAF",		"\xBB\xB8" => "\xE6\xA1\x93",		"\xBB\xB9" => "\xE8\xBF\x98",		"\xBB\xBA" => "\xE7\xBC\x93",		"\xBB\xBB" => "\xE6\x8D\xA2",		"\xBB\xBC" => "\xE6\x82\xA3",		"\xBB\xBD" => "\xE5\x94\xA4",		"\xBB\xBE" => "\xE7\x97\xAA",		"\xBB\xBF" => "\xE8\xB1\xA2",		"\xBB\xC0" => "\xE7\x84\x95",		"\xBB\xC1" => "\xE6\xB6\xA3",		"\xBB\xC2" => "\xE5\xAE\xA6",		"\xBB\xC3" => "\xE5\xB9\xBB",		"\xBB\xC4" => "\xE8\x8D\x92",		"\xBB\xC5" => "\xE6\x85\x8C",		"\xBB\xC6" => "\xE9\xBB\x84",		"\xBB\xC7" => "\xE7\xA3\xBA",		"\xBB\xC8" => "\xE8\x9D\x97",		"\xBB\xC9" => "\xE7\xB0\xA7",		"\xBB\xCA" => "\xE7\x9A\x87",		"\xBB\xCB" => "\xE5\x87\xB0",		"\xBB\xCC" => "\xE6\x83\xB6",		"\xBB\xCD" => "\xE7\x85\x8C",		"\xBB\xCE" => "\xE6\x99\x83",		"\xBB\xCF" => "\xE5\xB9\x8C",		"\xBB\xD0" => "\xE6\x81\x8D",		"\xBB\xD1" => "\xE8\xB0\x8E",		"\xBB\xD2" => "\xE7\x81\xB0",		"\xBB\xD3" => "\xE6\x8C\xA5",		"\xBB\xD4" => "\xE8\xBE\x89",		"\xBB\xD5" => "\xE5\xBE\xBD",		"\xBB\xD6" => "\xE6\x81\xA2",		"\xBB\xD7" => "\xE8\x9B\x94",		"\xBB\xD8" => "\xE5\x9B\x9E",		"\xBB\xD9" => "\xE6\xAF\x81",		"\xBB\xDA" => "\xE6\x82\x94",		"\xBB\xDB" => "\xE6\x85\xA7",		"\xBB\xDC" => "\xE5\x8D\x89",		"\xBB\xDD" => "\xE6\x83\xA0",		"\xBB\xDE" => "\xE6\x99\xA6",		"\xBB\xDF" => "\xE8\xB4\xBF",		"\xBB\xE0" => "\xE7\xA7\xBD",		"\xBB\xE1" => "\xE4\xBC\x9A",		"\xBB\xE2" => "\xE7\x83\xA9",		"\xBB\xE3" => "\xE6\xB1\x87",		"\xBB\xE4" => "\xE8\xAE\xB3",		"\xBB\xE5" => "\xE8\xAF\xB2",		"\xBB\xE6" => "\xE7\xBB\x98",		"\xBB\xE7" => "\xE8\x8D\xA4",		"\xBB\xE8" => "\xE6\x98\x8F",		"\xBB\xE9" => "\xE5\xA9\x9A",		"\xBB\xEA" => "\xE9\xAD\x82",		"\xBB\xEB" => "\xE6\xB5\x91",		"\xBB\xEC" => "\xE6\xB7\xB7",		"\xBB\xED" => "\xE8\xB1\x81",		"\xBB\xEE" => "\xE6\xB4\xBB",		"\xBB\xEF" => "\xE4\xBC\x99",		"\xBB\xF0" => "\xE7\x81\xAB",		"\xBB\xF1" => "\xE8\x8E\xB7",		"\xBB\xF2" => "\xE6\x88\x96",		"\xBB\xF3" => "\xE6\x83\x91",		"\xBB\xF4" => "\xE9\x9C\x8D",		"\xBB\xF5" => "\xE8\xB4\xA7",		"\xBB\xF6" => "\xE7\xA5\xB8",		"\xBB\xF7" => "\xE5\x87\xBB",		"\xBB\xF8" => "\xE5\x9C\xBE",		"\xBB\xF9" => "\xE5\x9F\xBA",		"\xBB\xFA" => "\xE6\x9C\xBA",		"\xBB\xFB" => "\xE7\x95\xB8",		"\xBB\xFC" => "\xE7\xA8\xBD",		"\xBB\xFD" => "\xE7\xA7\xAF",		"\xBB\xFE" => "\xE7\xAE\x95",		"\xBC\xA1" => "\xE8\x82\x8C",		"\xBC\xA2" => "\xE9\xA5\xA5",		"\xBC\xA3" => "\xE8\xBF\xB9",		"\xBC\xA4" => "\xE6\xBF\x80",		"\xBC\xA5" => "\xE8\xAE\xA5",		"\xBC\xA6" => "\xE9\xB8\xA1",		"\xBC\xA7" => "\xE5\xA7\xAC",		"\xBC\xA8" => "\xE7\xBB\xA9",		"\xBC\xA9" => "\xE7\xBC\x89",		"\xBC\xAA" => "\xE5\x90\x89",		"\xBC\xAB" => "\xE6\x9E\x81",		"\xBC\xAC" => "\xE6\xA3\x98",		"\xBC\xAD" => "\xE8\xBE\x91",		"\xBC\xAE" => "\xE7\xB1\x8D",		"\xBC\xAF" => "\xE9\x9B\x86",		"\xBC\xB0" => "\xE5\x8F\x8A",		"\xBC\xB1" => "\xE6\x80\xA5",		"\xBC\xB2" => "\xE7\x96\xBE",		"\xBC\xB3" => "\xE6\xB1\xB2",		"\xBC\xB4" => "\xE5\x8D\xB3",		"\xBC\xB5" => "\xE5\xAB\x89",		"\xBC\xB6" => "\xE7\xBA\xA7",		"\xBC\xB7" => "\xE6\x8C\xA4",		"\xBC\xB8" => "\xE5\x87\xA0",		"\xBC\xB9" => "\xE8\x84\x8A",		"\xBC\xBA" => "\xE5\xB7\xB1",		"\xBC\xBB" => "\xE8\x93\x9F",		"\xBC\xBC" => "\xE6\x8A\x80",		"\xBC\xBD" => "\xE5\x86\x80",		"\xBC\xBE" => "\xE5\xAD\xA3",		"\xBC\xBF" => "\xE4\xBC\x8E",		"\xBC\xC0" => "\xE7\xA5\xAD",		"\xBC\xC1" => "\xE5\x89\x82",		"\xBC\xC2" => "\xE6\x82\xB8",		"\xBC\xC3" => "\xE6\xB5\x8E",		"\xBC\xC4" => "\xE5\xAF\x84",		"\xBC\xC5" => "\xE5\xAF\x82",		"\xBC\xC6" => "\xE8\xAE\xA1",		"\xBC\xC7" => "\xE8\xAE\xB0",		"\xBC\xC8" => "\xE6\x97\xA2",		"\xBC\xC9" => "\xE5\xBF\x8C",		"\xBC\xCA" => "\xE9\x99\x85",		"\xBC\xCB" => "\xE5\xA6\x93",		"\xBC\xCC" => "\xE7\xBB\xA7",		"\xBC\xCD" => "\xE7\xBA\xAA",		"\xBC\xCE" => "\xE5\x98\x89",		"\xBC\xCF" => "\xE6\x9E\xB7",		"\xBC\xD0" => "\xE5\xA4\xB9",		"\xBC\xD1" => "\xE4\xBD\xB3",		"\xBC\xD2" => "\xE5\xAE\xB6",		"\xBC\xD3" => "\xE5\x8A\xA0",		"\xBC\xD4" => "\xE8\x8D\x9A",		"\xBC\xD5" => "\xE9\xA2\x8A",		"\xBC\xD6" => "\xE8\xB4\xBE",		"\xBC\xD7" => "\xE7\x94\xB2",		"\xBC\xD8" => "\xE9\x92\xBE",		"\xBC\xD9" => "\xE5\x81\x87",		"\xBC\xDA" => "\xE7\xA8\xBC",		"\xBC\xDB" => "\xE4\xBB\xB7",		"\xBC\xDC" => "\xE6\x9E\xB6",		"\xBC\xDD" => "\xE9\xA9\xBE",		"\xBC\xDE" => "\xE5\xAB\x81",		"\xBC\xDF" => "\xE6\xAD\xBC",		"\xBC\xE0" => "\xE7\x9B\x91",		"\xBC\xE1" => "\xE5\x9D\x9A",		"\xBC\xE2" => "\xE5\xB0\x96",		"\xBC\xE3" => "\xE7\xAC\xBA",		"\xBC\xE4" => "\xE9\x97\xB4",		"\xBC\xE5" => "\xE7\x85\x8E",		"\xBC\xE6" => "\xE5\x85\xBC",		"\xBC\xE7" => "\xE8\x82\xA9",		"\xBC\xE8" => "\xE8\x89\xB0",		"\xBC\xE9" => "\xE5\xA5\xB8",		"\xBC\xEA" => "\xE7\xBC\x84",		"\xBC\xEB" => "\xE8\x8C\xA7",		"\xBC\xEC" => "\xE6\xA3\x80",		"\xBC\xED" => "\xE6\x9F\xAC",		"\xBC\xEE" => "\xE7\xA2\xB1",		"\xBC\xEF" => "\xE7\xA1\xB7",		"\xBC\xF0" => "\xE6\x8B\xA3",		"\xBC\xF1" => "\xE6\x8D\xA1",		"\xBC\xF2" => "\xE7\xAE\x80",		"\xBC\xF3" => "\xE4\xBF\xAD",		"\xBC\xF4" => "\xE5\x89\xAA",		"\xBC\xF5" => "\xE5\x87\x8F",		"\xBC\xF6" => "\xE8\x8D\x90",		"\xBC\xF7" => "\xE6\xA7\x9B",		"\xBC\xF8" => "\xE9\x89\xB4",		"\xBC\xF9" => "\xE8\xB7\xB5",		"\xBC\xFA" => "\xE8\xB4\xB1",		"\xBC\xFB" => "\xE8\xA7\x81",		"\xBC\xFC" => "\xE9\x94\xAE",		"\xBC\xFD" => "\xE7\xAE\xAD",		"\xBC\xFE" => "\xE4\xBB\xB6",		"\xBD\xA1" => "\xE5\x81\xA5",		"\xBD\xA2" => "\xE8\x88\xB0",		"\xBD\xA3" => "\xE5\x89\x91",		"\xBD\xA4" => "\xE9\xA5\xAF",		"\xBD\xA5" => "\xE6\xB8\x90",		"\xBD\xA6" => "\xE6\xBA\x85",		"\xBD\xA7" => "\xE6\xB6\xA7",		"\xBD\xA8" => "\xE5\xBB\xBA",		"\xBD\xA9" => "\xE5\x83\xB5",		"\xBD\xAA" => "\xE5\xA7\x9C",		"\xBD\xAB" => "\xE5\xB0\x86",		"\xBD\xAC" => "\xE6\xB5\x86",		"\xBD\xAD" => "\xE6\xB1\x9F",		"\xBD\xAE" => "\xE7\x96\x86",		"\xBD\xAF" => "\xE8\x92\x8B",		"\xBD\xB0" => "\xE6\xA1\xA8",		"\xBD\xB1" => "\xE5\xA5\x96",		"\xBD\xB2" => "\xE8\xAE\xB2",		"\xBD\xB3" => "\xE5\x8C\xA0",		"\xBD\xB4" => "\xE9\x85\xB1",		"\xBD\xB5" => "\xE9\x99\x8D",		"\xBD\xB6" => "\xE8\x95\x89",		"\xBD\xB7" => "\xE6\xA4\x92",		"\xBD\xB8" => "\xE7\xA4\x81",		"\xBD\xB9" => "\xE7\x84\xA6",		"\xBD\xBA" => "\xE8\x83\xB6",		"\xBD\xBB" => "\xE4\xBA\xA4",		"\xBD\xBC" => "\xE9\x83\x8A",		"\xBD\xBD" => "\xE6\xB5\x87",		"\xBD\xBE" => "\xE9\xAA\x84",		"\xBD\xBF" => "\xE5\xA8\x87",		"\xBD\xC0" => "\xE5\x9A\xBC",		"\xBD\xC1" => "\xE6\x90\x85",		"\xBD\xC2" => "\xE9\x93\xB0",		"\xBD\xC3" => "\xE7\x9F\xAB",		"\xBD\xC4" => "\xE4\xBE\xA5",		"\xBD\xC5" => "\xE8\x84\x9A",		"\xBD\xC6" => "\xE7\x8B\xA1",		"\xBD\xC7" => "\xE8\xA7\x92",		"\xBD\xC8" => "\xE9\xA5\xBA",		"\xBD\xC9" => "\xE7\xBC\xB4",		"\xBD\xCA" => "\xE7\xBB\x9E",		"\xBD\xCB" => "\xE5\x89\xBF",		"\xBD\xCC" => "\xE6\x95\x99",		"\xBD\xCD" => "\xE9\x85\xB5",		"\xBD\xCE" => "\xE8\xBD\xBF",		"\xBD\xCF" => "\xE8\xBE\x83",		"\xBD\xD0" => "\xE5\x8F\xAB",		"\xBD\xD1" => "\xE7\xAA\x96",		"\xBD\xD2" => "\xE6\x8F\xAD",		"\xBD\xD3" => "\xE6\x8E\xA5",		"\xBD\xD4" => "\xE7\x9A\x86",		"\xBD\xD5" => "\xE7\xA7\xB8",		"\xBD\xD6" => "\xE8\xA1\x97",		"\xBD\xD7" => "\xE9\x98\xB6",		"\xBD\xD8" => "\xE6\x88\xAA",		"\xBD\xD9" => "\xE5\x8A\xAB",		"\xBD\xDA" => "\xE8\x8A\x82",		"\xBD\xDB" => "\xE6\xA1\x94",		"\xBD\xDC" => "\xE6\x9D\xB0",		"\xBD\xDD" => "\xE6\x8D\xB7",		"\xBD\xDE" => "\xE7\x9D\xAB",		"\xBD\xDF" => "\xE7\xAB\xAD",		"\xBD\xE0" => "\xE6\xB4\x81",		"\xBD\xE1" => "\xE7\xBB\x93",		"\xBD\xE2" => "\xE8\xA7\xA3",		"\xBD\xE3" => "\xE5\xA7\x90",		"\xBD\xE4" => "\xE6\x88\x92",		"\xBD\xE5" => "\xE8\x97\x89",		"\xBD\xE6" => "\xE8\x8A\xA5",		"\xBD\xE7" => "\xE7\x95\x8C",		"\xBD\xE8" => "\xE5\x80\x9F",		"\xBD\xE9" => "\xE4\xBB\x8B",		"\xBD\xEA" => "\xE7\x96\xA5",		"\xBD\xEB" => "\xE8\xAF\xAB",		"\xBD\xEC" => "\xE5\xB1\x8A",		"\xBD\xED" => "\xE5\xB7\xBE",		"\xBD\xEE" => "\xE7\xAD\x8B",		"\xBD\xEF" => "\xE6\x96\xA4",		"\xBD\xF0" => "\xE9\x87\x91",		"\xBD\xF1" => "\xE4\xBB\x8A",		"\xBD\xF2" => "\xE6\xB4\xA5",		"\xBD\xF3" => "\xE8\xA5\x9F",		"\xBD\xF4" => "\xE7\xB4\xA7",		"\xBD\xF5" => "\xE9\x94\xA6",		"\xBD\xF6" => "\xE4\xBB\x85",		"\xBD\xF7" => "\xE8\xB0\xA8",		"\xBD\xF8" => "\xE8\xBF\x9B",		"\xBD\xF9" => "\xE9\x9D\xB3",		"\xBD\xFA" => "\xE6\x99\x8B",		"\xBD\xFB" => "\xE7\xA6\x81",		"\xBD\xFC" => "\xE8\xBF\x91",		"\xBD\xFD" => "\xE7\x83\xAC",		"\xBD\xFE" => "\xE6\xB5\xB8",		"\xBE\xA1" => "\xE5\xB0\xBD",		"\xBE\xA2" => "\xE5\x8A\xB2",		"\xBE\xA3" => "\xE8\x8D\x86",		"\xBE\xA4" => "\xE5\x85\xA2",		"\xBE\xA5" => "\xE8\x8C\x8E",		"\xBE\xA6" => "\xE7\x9D\x9B",		"\xBE\xA7" => "\xE6\x99\xB6",		"\xBE\xA8" => "\xE9\xB2\xB8",		"\xBE\xA9" => "\xE4\xBA\xAC",		"\xBE\xAA" => "\xE6\x83\x8A",		"\xBE\xAB" => "\xE7\xB2\xBE",		"\xBE\xAC" => "\xE7\xB2\xB3",		"\xBE\xAD" => "\xE7\xBB\x8F",		"\xBE\xAE" => "\xE4\xBA\x95",		"\xBE\xAF" => "\xE8\xAD\xA6",		"\xBE\xB0" => "\xE6\x99\xAF",		"\xBE\xB1" => "\xE9\xA2\x88",		"\xBE\xB2" => "\xE9\x9D\x99",		"\xBE\xB3" => "\xE5\xA2\x83",		"\xBE\xB4" => "\xE6\x95\xAC",		"\xBE\xB5" => "\xE9\x95\x9C",		"\xBE\xB6" => "\xE5\xBE\x84",		"\xBE\xB7" => "\xE7\x97\x89",		"\xBE\xB8" => "\xE9\x9D\x96",		"\xBE\xB9" => "\xE7\xAB\x9F",		"\xBE\xBA" => "\xE7\xAB\x9E",		"\xBE\xBB" => "\xE5\x87\x80",		"\xBE\xBC" => "\xE7\x82\xAF",		"\xBE\xBD" => "\xE7\xAA\x98",		"\xBE\xBE" => "\xE6\x8F\xAA",		"\xBE\xBF" => "\xE7\xA9\xB6",		"\xBE\xC0" => "\xE7\xBA\xA0",		"\xBE\xC1" => "\xE7\x8E\x96",		"\xBE\xC2" => "\xE9\x9F\xAD",		"\xBE\xC3" => "\xE4\xB9\x85",		"\xBE\xC4" => "\xE7\x81\xB8",		"\xBE\xC5" => "\xE4\xB9\x9D",		"\xBE\xC6" => "\xE9\x85\x92",		"\xBE\xC7" => "\xE5\x8E\xA9",		"\xBE\xC8" => "\xE6\x95\x91",		"\xBE\xC9" => "\xE6\x97\xA7",		"\xBE\xCA" => "\xE8\x87\xBC",		"\xBE\xCB" => "\xE8\x88\x85",		"\xBE\xCC" => "\xE5\x92\x8E",		"\xBE\xCD" => "\xE5\xB0\xB1",		"\xBE\xCE" => "\xE7\x96\x9A",		"\xBE\xCF" => "\xE9\x9E\xA0",		"\xBE\xD0" => "\xE6\x8B\x98",		"\xBE\xD1" => "\xE7\x8B\x99",		"\xBE\xD2" => "\xE7\x96\xBD",		"\xBE\xD3" => "\xE5\xB1\x85",		"\xBE\xD4" => "\xE9\xA9\xB9",		"\xBE\xD5" => "\xE8\x8F\x8A",		"\xBE\xD6" => "\xE5\xB1\x80",		"\xBE\xD7" => "\xE5\x92\x80",		"\xBE\xD8" => "\xE7\x9F\xA9",		"\xBE\xD9" => "\xE4\xB8\xBE",		"\xBE\xDA" => "\xE6\xB2\xAE",		"\xBE\xDB" => "\xE8\x81\x9A",		"\xBE\xDC" => "\xE6\x8B\x92",		"\xBE\xDD" => "\xE6\x8D\xAE",		"\xBE\xDE" => "\xE5\xB7\xA8",		"\xBE\xDF" => "\xE5\x85\xB7",		"\xBE\xE0" => "\xE8\xB7\x9D",		"\xBE\xE1" => "\xE8\xB8\x9E",		"\xBE\xE2" => "\xE9\x94\xAF",		"\xBE\xE3" => "\xE4\xBF\xB1",		"\xBE\xE4" => "\xE5\x8F\xA5",		"\xBE\xE5" => "\xE6\x83\xA7",		"\xBE\xE6" => "\xE7\x82\xAC",		"\xBE\xE7" => "\xE5\x89\xA7",		"\xBE\xE8" => "\xE6\x8D\x90",		"\xBE\xE9" => "\xE9\xB9\x83",		"\xBE\xEA" => "\xE5\xA8\x9F",		"\xBE\xEB" => "\xE5\x80\xA6",		"\xBE\xEC" => "\xE7\x9C\xB7",		"\xBE\xED" => "\xE5\x8D\xB7",		"\xBE\xEE" => "\xE7\xBB\xA2",		"\xBE\xEF" => "\xE6\x92\x85",		"\xBE\xF0" => "\xE6\x94\xAB",		"\xBE\xF1" => "\xE6\x8A\x89",		"\xBE\xF2" => "\xE6\x8E\x98",		"\xBE\xF3" => "\xE5\x80\x94",		"\xBE\xF4" => "\xE7\x88\xB5",		"\xBE\xF5" => "\xE8\xA7\x89",		"\xBE\xF6" => "\xE5\x86\xB3",		"\xBE\xF7" => "\xE8\xAF\x80",		"\xBE\xF8" => "\xE7\xBB\x9D",		"\xBE\xF9" => "\xE5\x9D\x87",		"\xBE\xFA" => "\xE8\x8F\x8C",		"\xBE\xFB" => "\xE9\x92\xA7",		"\xBE\xFC" => "\xE5\x86\x9B",		"\xBE\xFD" => "\xE5\x90\x9B",		"\xBE\xFE" => "\xE5\xB3\xBB",		"\xBF\xA1" => "\xE4\xBF\x8A",		"\xBF\xA2" => "\xE7\xAB\xA3",		"\xBF\xA3" => "\xE6\xB5\x9A",		"\xBF\xA4" => "\xE9\x83\xA1",		"\xBF\xA5" => "\xE9\xAA\x8F",		"\xBF\xA6" => "\xE5\x96\x80",		"\xBF\xA7" => "\xE5\x92\x96",		"\xBF\xA8" => "\xE5\x8D\xA1",		"\xBF\xA9" => "\xE5\x92\xAF",		"\xBF\xAA" => "\xE5\xBC\x80",		"\xBF\xAB" => "\xE6\x8F\xA9",		"\xBF\xAC" => "\xE6\xA5\xB7",		"\xBF\xAD" => "\xE5\x87\xAF",		"\xBF\xAE" => "\xE6\x85\xA8",		"\xBF\xAF" => "\xE5\x88\x8A",		"\xBF\xB0" => "\xE5\xA0\xAA",		"\xBF\xB1" => "\xE5\x8B\x98",		"\xBF\xB2" => "\xE5\x9D\x8E",		"\xBF\xB3" => "\xE7\xA0\x8D",		"\xBF\xB4" => "\xE7\x9C\x8B",		"\xBF\xB5" => "\xE5\xBA\xB7",		"\xBF\xB6" => "\xE6\x85\xB7",		"\xBF\xB7" => "\xE7\xB3\xA0",		"\xBF\xB8" => "\xE6\x89\x9B",		"\xBF\xB9" => "\xE6\x8A\x97",		"\xBF\xBA" => "\xE4\xBA\xA2",		"\xBF\xBB" => "\xE7\x82\x95",		"\xBF\xBC" => "\xE8\x80\x83",		"\xBF\xBD" => "\xE6\x8B\xB7",		"\xBF\xBE" => "\xE7\x83\xA4",		"\xBF\xBF" => "\xE9\x9D\xA0",		"\xBF\xC0" => "\xE5\x9D\xB7",		"\xBF\xC1" => "\xE8\x8B\x9B",		"\xBF\xC2" => "\xE6\x9F\xAF",		"\xBF\xC3" => "\xE6\xA3\xB5",		"\xBF\xC4" => "\xE7\xA3\x95",		"\xBF\xC5" => "\xE9\xA2\x97",		"\xBF\xC6" => "\xE7\xA7\x91",		"\xBF\xC7" => "\xE5\xA3\xB3",		"\xBF\xC8" => "\xE5\x92\xB3",		"\xBF\xC9" => "\xE5\x8F\xAF",		"\xBF\xCA" => "\xE6\xB8\xB4",		"\xBF\xCB" => "\xE5\x85\x8B",		"\xBF\xCC" => "\xE5\x88\xBB",		"\xBF\xCD" => "\xE5\xAE\xA2",		"\xBF\xCE" => "\xE8\xAF\xBE",		"\xBF\xCF" => "\xE8\x82\xAF",		"\xBF\xD0" => "\xE5\x95\x83",		"\xBF\xD1" => "\xE5\x9E\xA6",		"\xBF\xD2" => "\xE6\x81\xB3",		"\xBF\xD3" => "\xE5\x9D\x91",		"\xBF\xD4" => "\xE5\x90\xAD",		"\xBF\xD5" => "\xE7\xA9\xBA",		"\xBF\xD6" => "\xE6\x81\x90",		"\xBF\xD7" => "\xE5\xAD\x94",		"\xBF\xD8" => "\xE6\x8E\xA7",		"\xBF\xD9" => "\xE6\x8A\xA0",		"\xBF\xDA" => "\xE5\x8F\xA3",		"\xBF\xDB" => "\xE6\x89\xA3",		"\xBF\xDC" => "\xE5\xAF\x87",		"\xBF\xDD" => "\xE6\x9E\xAF",		"\xBF\xDE" => "\xE5\x93\xAD",		"\xBF\xDF" => "\xE7\xAA\x9F",		"\xBF\xE0" => "\xE8\x8B\xA6",		"\xBF\xE1" => "\xE9\x85\xB7",		"\xBF\xE2" => "\xE5\xBA\x93",		"\xBF\xE3" => "\xE8\xA3\xA4",		"\xBF\xE4" => "\xE5\xA4\xB8",		"\xBF\xE5" => "\xE5\x9E\xAE",		"\xBF\xE6" => "\xE6\x8C\x8E",		"\xBF\xE7" => "\xE8\xB7\xA8",		"\xBF\xE8" => "\xE8\x83\xAF",		"\xBF\xE9" => "\xE5\x9D\x97",		"\xBF\xEA" => "\xE7\xAD\xB7",		"\xBF\xEB" => "\xE4\xBE\xA9",		"\xBF\xEC" => "\xE5\xBF\xAB",		"\xBF\xED" => "\xE5\xAE\xBD",		"\xBF\xEE" => "\xE6\xAC\xBE",		"\xBF\xEF" => "\xE5\x8C\xA1",		"\xBF\xF0" => "\xE7\xAD\x90",		"\xBF\xF1" => "\xE7\x8B\x82",		"\xBF\xF2" => "\xE6\xA1\x86",		"\xBF\xF3" => "\xE7\x9F\xBF",		"\xBF\xF4" => "\xE7\x9C\xB6",		"\xBF\xF5" => "\xE6\x97\xB7",		"\xBF\xF6" => "\xE5\x86\xB5",		"\xBF\xF7" => "\xE4\xBA\x8F",		"\xBF\xF8" => "\xE7\x9B\x94",		"\xBF\xF9" => "\xE5\xB2\xBF",		"\xBF\xFA" => "\xE7\xAA\xA5",		"\xBF\xFB" => "\xE8\x91\xB5",		"\xBF\xFC" => "\xE5\xA5\x8E",		"\xBF\xFD" => "\xE9\xAD\x81",		"\xBF\xFE" => "\xE5\x82\x80",		"\xC0\xA1" => "\xE9\xA6\x88",		"\xC0\xA2" => "\xE6\x84\xA7",		"\xC0\xA3" => "\xE6\xBA\x83",		"\xC0\xA4" => "\xE5\x9D\xA4",		"\xC0\xA5" => "\xE6\x98\x86",		"\xC0\xA6" => "\xE6\x8D\x86",		"\xC0\xA7" => "\xE5\x9B\xB0",		"\xC0\xA8" => "\xE6\x8B\xAC",		"\xC0\xA9" => "\xE6\x89\xA9",		"\xC0\xAA" => "\xE5\xBB\x93",		"\xC0\xAB" => "\xE9\x98\x94",		"\xC0\xAC" => "\xE5\x9E\x83",		"\xC0\xAD" => "\xE6\x8B\x89",		"\xC0\xAE" => "\xE5\x96\x87",		"\xC0\xAF" => "\xE8\x9C\xA1",		"\xC0\xB0" => "\xE8\x85\x8A",		"\xC0\xB1" => "\xE8\xBE\xA3",		"\xC0\xB2" => "\xE5\x95\xA6",		"\xC0\xB3" => "\xE8\x8E\xB1",		"\xC0\xB4" => "\xE6\x9D\xA5",		"\xC0\xB5" => "\xE8\xB5\x96",		"\xC0\xB6" => "\xE8\x93\x9D",		"\xC0\xB7" => "\xE5\xA9\xAA",		"\xC0\xB8" => "\xE6\xA0\x8F",		"\xC0\xB9" => "\xE6\x8B\xA6",		"\xC0\xBA" => "\xE7\xAF\xAE",		"\xC0\xBB" => "\xE9\x98\x91",		"\xC0\xBC" => "\xE5\x85\xB0",		"\xC0\xBD" => "\xE6\xBE\x9C",		"\xC0\xBE" => "\xE8\xB0\xB0",		"\xC0\xBF" => "\xE6\x8F\xBD",		"\xC0\xC0" => "\xE8\xA7\x88",		"\xC0\xC1" => "\xE6\x87\x92",		"\xC0\xC2" => "\xE7\xBC\x86",		"\xC0\xC3" => "\xE7\x83\x82",		"\xC0\xC4" => "\xE6\xBB\xA5",		"\xC0\xC5" => "\xE7\x90\x85",		"\xC0\xC6" => "\xE6\xA6\x94",		"\xC0\xC7" => "\xE7\x8B\xBC",		"\xC0\xC8" => "\xE5\xBB\x8A",		"\xC0\xC9" => "\xE9\x83\x8E",		"\xC0\xCA" => "\xE6\x9C\x97",		"\xC0\xCB" => "\xE6\xB5\xAA",		"\xC0\xCC" => "\xE6\x8D\x9E",		"\xC0\xCD" => "\xE5\x8A\xB3",		"\xC0\xCE" => "\xE7\x89\xA2",		"\xC0\xCF" => "\xE8\x80\x81",		"\xC0\xD0" => "\xE4\xBD\xAC",		"\xC0\xD1" => "\xE5\xA7\xA5",		"\xC0\xD2" => "\xE9\x85\xAA",		"\xC0\xD3" => "\xE7\x83\x99",		"\xC0\xD4" => "\xE6\xB6\x9D",		"\xC0\xD5" => "\xE5\x8B\x92",		"\xC0\xD6" => "\xE4\xB9\x90",		"\xC0\xD7" => "\xE9\x9B\xB7",		"\xC0\xD8" => "\xE9\x95\xAD",		"\xC0\xD9" => "\xE8\x95\xBE",		"\xC0\xDA" => "\xE7\xA3\x8A",		"\xC0\xDB" => "\xE7\xB4\xAF",		"\xC0\xDC" => "\xE5\x84\xA1",		"\xC0\xDD" => "\xE5\x9E\x92",		"\xC0\xDE" => "\xE6\x93\x82",		"\xC0\xDF" => "\xE8\x82\x8B",		"\xC0\xE0" => "\xE7\xB1\xBB",		"\xC0\xE1" => "\xE6\xB3\xAA",		"\xC0\xE2" => "\xE6\xA3\xB1",		"\xC0\xE3" => "\xE6\xA5\x9E",		"\xC0\xE4" => "\xE5\x86\xB7",		"\xC0\xE5" => "\xE5\x8E\x98",		"\xC0\xE6" => "\xE6\xA2\xA8",		"\xC0\xE7" => "\xE7\x8A\x81",		"\xC0\xE8" => "\xE9\xBB\x8E",		"\xC0\xE9" => "\xE7\xAF\xB1",		"\xC0\xEA" => "\xE7\x8B\xB8",		"\xC0\xEB" => "\xE7\xA6\xBB",		"\xC0\xEC" => "\xE6\xBC\x93",		"\xC0\xED" => "\xE7\x90\x86",		"\xC0\xEE" => "\xE6\x9D\x8E",		"\xC0\xEF" => "\xE9\x87\x8C",		"\xC0\xF0" => "\xE9\xB2\xA4",		"\xC0\xF1" => "\xE7\xA4\xBC",		"\xC0\xF2" => "\xE8\x8E\x89",		"\xC0\xF3" => "\xE8\x8D\x94",		"\xC0\xF4" => "\xE5\x90\x8F",		"\xC0\xF5" => "\xE6\xA0\x97",		"\xC0\xF6" => "\xE4\xB8\xBD",		"\xC0\xF7" => "\xE5\x8E\x89",		"\xC0\xF8" => "\xE5\x8A\xB1",		"\xC0\xF9" => "\xE7\xA0\xBE",		"\xC0\xFA" => "\xE5\x8E\x86",		"\xC0\xFB" => "\xE5\x88\xA9",		"\xC0\xFC" => "\xE5\x82\x88",		"\xC0\xFD" => "\xE4\xBE\x8B",		"\xC0\xFE" => "\xE4\xBF\x90",		"\xC1\xA1" => "\xE7\x97\xA2",		"\xC1\xA2" => "\xE7\xAB\x8B",		"\xC1\xA3" => "\xE7\xB2\x92",		"\xC1\xA4" => "\xE6\xB2\xA5",		"\xC1\xA5" => "\xE9\x9A\xB6",		"\xC1\xA6" => "\xE5\x8A\x9B",		"\xC1\xA7" => "\xE7\x92\x83",		"\xC1\xA8" => "\xE5\x93\xA9",		"\xC1\xA9" => "\xE4\xBF\xA9",		"\xC1\xAA" => "\xE8\x81\x94",		"\xC1\xAB" => "\xE8\x8E\xB2",		"\xC1\xAC" => "\xE8\xBF\x9E",		"\xC1\xAD" => "\xE9\x95\xB0",		"\xC1\xAE" => "\xE5\xBB\x89",		"\xC1\xAF" => "\xE6\x80\x9C",		"\xC1\xB0" => "\xE6\xB6\x9F",		"\xC1\xB1" => "\xE5\xB8\x98",		"\xC1\xB2" => "\xE6\x95\x9B",		"\xC1\xB3" => "\xE8\x84\xB8",		"\xC1\xB4" => "\xE9\x93\xBE",		"\xC1\xB5" => "\xE6\x81\x8B",		"\xC1\xB6" => "\xE7\x82\xBC",		"\xC1\xB7" => "\xE7\xBB\x83",		"\xC1\xB8" => "\xE7\xB2\xAE",		"\xC1\xB9" => "\xE5\x87\x89",		"\xC1\xBA" => "\xE6\xA2\x81",		"\xC1\xBB" => "\xE7\xB2\xB1",		"\xC1\xBC" => "\xE8\x89\xAF",		"\xC1\xBD" => "\xE4\xB8\xA4",		"\xC1\xBE" => "\xE8\xBE\x86",		"\xC1\xBF" => "\xE9\x87\x8F",		"\xC1\xC0" => "\xE6\x99\xBE",		"\xC1\xC1" => "\xE4\xBA\xAE",		"\xC1\xC2" => "\xE8\xB0\x85",		"\xC1\xC3" => "\xE6\x92\xA9",		"\xC1\xC4" => "\xE8\x81\x8A",		"\xC1\xC5" => "\xE5\x83\x9A",		"\xC1\xC6" => "\xE7\x96\x97",		"\xC1\xC7" => "\xE7\x87\x8E",		"\xC1\xC8" => "\xE5\xAF\xA5",		"\xC1\xC9" => "\xE8\xBE\xBD",		"\xC1\xCA" => "\xE6\xBD\xA6",		"\xC1\xCB" => "\xE4\xBA\x86",		"\xC1\xCC" => "\xE6\x92\x82",		"\xC1\xCD" => "\xE9\x95\xA3",		"\xC1\xCE" => "\xE5\xBB\x96",		"\xC1\xCF" => "\xE6\x96\x99",		"\xC1\xD0" => "\xE5\x88\x97",		"\xC1\xD1" => "\xE8\xA3\x82",		"\xC1\xD2" => "\xE7\x83\x88",		"\xC1\xD3" => "\xE5\x8A\xA3",		"\xC1\xD4" => "\xE7\x8C\x8E",		"\xC1\xD5" => "\xE7\x90\xB3",		"\xC1\xD6" => "\xE6\x9E\x97",		"\xC1\xD7" => "\xE7\xA3\xB7",		"\xC1\xD8" => "\xE9\x9C\x96",		"\xC1\xD9" => "\xE4\xB8\xB4",		"\xC1\xDA" => "\xE9\x82\xBB",		"\xC1\xDB" => "\xE9\xB3\x9E",		"\xC1\xDC" => "\xE6\xB7\x8B",		"\xC1\xDD" => "\xE5\x87\x9B",		"\xC1\xDE" => "\xE8\xB5\x81",		"\xC1\xDF" => "\xE5\x90\x9D",		"\xC1\xE0" => "\xE6\x8B\x8E",		"\xC1\xE1" => "\xE7\x8E\xB2",		"\xC1\xE2" => "\xE8\x8F\xB1",		"\xC1\xE3" => "\xE9\x9B\xB6",		"\xC1\xE4" => "\xE9\xBE\x84",		"\xC1\xE5" => "\xE9\x93\x83",		"\xC1\xE6" => "\xE4\xBC\xB6",		"\xC1\xE7" => "\xE7\xBE\x9A",		"\xC1\xE8" => "\xE5\x87\x8C",		"\xC1\xE9" => "\xE7\x81\xB5",		"\xC1\xEA" => "\xE9\x99\xB5",		"\xC1\xEB" => "\xE5\xB2\xAD",		"\xC1\xEC" => "\xE9\xA2\x86",		"\xC1\xED" => "\xE5\x8F\xA6",		"\xC1\xEE" => "\xE4\xBB\xA4",		"\xC1\xEF" => "\xE6\xBA\x9C",		"\xC1\xF0" => "\xE7\x90\x89",		"\xC1\xF1" => "\xE6\xA6\xB4",		"\xC1\xF2" => "\xE7\xA1\xAB",		"\xC1\xF3" => "\xE9\xA6\x8F",		"\xC1\xF4" => "\xE7\x95\x99",		"\xC1\xF5" => "\xE5\x88\x98",		"\xC1\xF6" => "\xE7\x98\xA4",		"\xC1\xF7" => "\xE6\xB5\x81",		"\xC1\xF8" => "\xE6\x9F\xB3",		"\xC1\xF9" => "\xE5\x85\xAD",		"\xC1\xFA" => "\xE9\xBE\x99",		"\xC1\xFB" => "\xE8\x81\x8B",		"\xC1\xFC" => "\xE5\x92\x99",		"\xC1\xFD" => "\xE7\xAC\xBC",		"\xC1\xFE" => "\xE7\xAA\xBF",		"\xC2\xA1" => "\xE9\x9A\x86",		"\xC2\xA2" => "\xE5\x9E\x84",		"\xC2\xA3" => "\xE6\x8B\xA2",		"\xC2\xA4" => "\xE9\x99\x87",		"\xC2\xA5" => "\xE6\xA5\xBC",		"\xC2\xA6" => "\xE5\xA8\x84",		"\xC2\xA7" => "\xE6\x90\x82",		"\xC2\xA8" => "\xE7\xAF\x93",		"\xC2\xA9" => "\xE6\xBC\x8F",		"\xC2\xAA" => "\xE9\x99\x8B",		"\xC2\xAB" => "\xE8\x8A\xA6",		"\xC2\xAC" => "\xE5\x8D\xA2",		"\xC2\xAD" => "\xE9\xA2\x85",		"\xC2\xAE" => "\xE5\xBA\x90",		"\xC2\xAF" => "\xE7\x82\x89",		"\xC2\xB0" => "\xE6\x8E\xB3",		"\xC2\xB1" => "\xE5\x8D\xA4",		"\xC2\xB2" => "\xE8\x99\x8F",		"\xC2\xB3" => "\xE9\xB2\x81",		"\xC2\xB4" => "\xE9\xBA\x93",		"\xC2\xB5" => "\xE7\xA2\x8C",		"\xC2\xB6" => "\xE9\x9C\xB2",		"\xC2\xB7" => "\xE8\xB7\xAF",		"\xC2\xB8" => "\xE8\xB5\x82",		"\xC2\xB9" => "\xE9\xB9\xBF",		"\xC2\xBA" => "\xE6\xBD\x9E",		"\xC2\xBB" => "\xE7\xA6\x84",		"\xC2\xBC" => "\xE5\xBD\x95",		"\xC2\xBD" => "\xE9\x99\x86",		"\xC2\xBE" => "\xE6\x88\xAE",		"\xC2\xBF" => "\xE9\xA9\xB4",		"\xC2\xC0" => "\xE5\x90\x95",		"\xC2\xC1" => "\xE9\x93\x9D",		"\xC2\xC2" => "\xE4\xBE\xA3",		"\xC2\xC3" => "\xE6\x97\x85",		"\xC2\xC4" => "\xE5\xB1\xA5",		"\xC2\xC5" => "\xE5\xB1\xA1",		"\xC2\xC6" => "\xE7\xBC\x95",		"\xC2\xC7" => "\xE8\x99\x91",		"\xC2\xC8" => "\xE6\xB0\xAF",		"\xC2\xC9" => "\xE5\xBE\x8B",		"\xC2\xCA" => "\xE7\x8E\x87",		"\xC2\xCB" => "\xE6\xBB\xA4",		"\xC2\xCC" => "\xE7\xBB\xBF",		"\xC2\xCD" => "\xE5\xB3\xA6",		"\xC2\xCE" => "\xE6\x8C\x9B",		"\xC2\xCF" => "\xE5\xAD\xAA",		"\xC2\xD0" => "\xE6\xBB\xA6",		"\xC2\xD1" => "\xE5\x8D\xB5",		"\xC2\xD2" => "\xE4\xB9\xB1",		"\xC2\xD3" => "\xE6\x8E\xA0",		"\xC2\xD4" => "\xE7\x95\xA5",		"\xC2\xD5" => "\xE6\x8A\xA1",		"\xC2\xD6" => "\xE8\xBD\xAE",		"\xC2\xD7" => "\xE4\xBC\xA6",		"\xC2\xD8" => "\xE4\xBB\x91",		"\xC2\xD9" => "\xE6\xB2\xA6",		"\xC2\xDA" => "\xE7\xBA\xB6",		"\xC2\xDB" => "\xE8\xAE\xBA",		"\xC2\xDC" => "\xE8\x90\x9D",		"\xC2\xDD" => "\xE8\x9E\xBA",		"\xC2\xDE" => "\xE7\xBD\x97",		"\xC2\xDF" => "\xE9\x80\xBB",		"\xC2\xE0" => "\xE9\x94\xA3",		"\xC2\xE1" => "\xE7\xAE\xA9",		"\xC2\xE2" => "\xE9\xAA\xA1",		"\xC2\xE3" => "\xE8\xA3\xB8",		"\xC2\xE4" => "\xE8\x90\xBD",		"\xC2\xE5" => "\xE6\xB4\x9B",		"\xC2\xE6" => "\xE9\xAA\x86",		"\xC2\xE7" => "\xE7\xBB\x9C",		"\xC2\xE8" => "\xE5\xA6\x88",		"\xC2\xE9" => "\xE9\xBA\xBB",		"\xC2\xEA" => "\xE7\x8E\x9B",		"\xC2\xEB" => "\xE7\xA0\x81",		"\xC2\xEC" => "\xE8\x9A\x82",		"\xC2\xED" => "\xE9\xA9\xAC",		"\xC2\xEE" => "\xE9\xAA\x82",		"\xC2\xEF" => "\xE5\x98\x9B",		"\xC2\xF0" => "\xE5\x90\x97",		"\xC2\xF1" => "\xE5\x9F\x8B",		"\xC2\xF2" => "\xE4\xB9\xB0",		"\xC2\xF3" => "\xE9\xBA\xA6",		"\xC2\xF4" => "\xE5\x8D\x96",		"\xC2\xF5" => "\xE8\xBF\x88",		"\xC2\xF6" => "\xE8\x84\x89",		"\xC2\xF7" => "\xE7\x9E\x92",		"\xC2\xF8" => "\xE9\xA6\x92",		"\xC2\xF9" => "\xE8\x9B\xAE",		"\xC2\xFA" => "\xE6\xBB\xA1",		"\xC2\xFB" => "\xE8\x94\x93",		"\xC2\xFC" => "\xE6\x9B\xBC",		"\xC2\xFD" => "\xE6\x85\xA2",		"\xC2\xFE" => "\xE6\xBC\xAB",		"\xC3\xA1" => "\xE8\xB0\xA9",		"\xC3\xA2" => "\xE8\x8A\x92",		"\xC3\xA3" => "\xE8\x8C\xAB",		"\xC3\xA4" => "\xE7\x9B\xB2",		"\xC3\xA5" => "\xE6\xB0\x93",		"\xC3\xA6" => "\xE5\xBF\x99",		"\xC3\xA7" => "\xE8\x8E\xBD",		"\xC3\xA8" => "\xE7\x8C\xAB",		"\xC3\xA9" => "\xE8\x8C\x85",		"\xC3\xAA" => "\xE9\x94\x9A",		"\xC3\xAB" => "\xE6\xAF\x9B",		"\xC3\xAC" => "\xE7\x9F\x9B",		"\xC3\xAD" => "\xE9\x93\x86",		"\xC3\xAE" => "\xE5\x8D\xAF",		"\xC3\xAF" => "\xE8\x8C\x82",		"\xC3\xB0" => "\xE5\x86\x92",		"\xC3\xB1" => "\xE5\xB8\xBD",		"\xC3\xB2" => "\xE8\xB2\x8C",		"\xC3\xB3" => "\xE8\xB4\xB8",		"\xC3\xB4" => "\xE4\xB9\x88",		"\xC3\xB5" => "\xE7\x8E\xAB",		"\xC3\xB6" => "\xE6\x9E\x9A",		"\xC3\xB7" => "\xE6\xA2\x85",		"\xC3\xB8" => "\xE9\x85\xB6",		"\xC3\xB9" => "\xE9\x9C\x89",		"\xC3\xBA" => "\xE7\x85\xA4",		"\xC3\xBB" => "\xE6\xB2\xA1",		"\xC3\xBC" => "\xE7\x9C\x89",		"\xC3\xBD" => "\xE5\xAA\x92",		"\xC3\xBE" => "\xE9\x95\x81",		"\xC3\xBF" => "\xE6\xAF\x8F",		"\xC3\xC0" => "\xE7\xBE\x8E",		"\xC3\xC1" => "\xE6\x98\xA7",		"\xC3\xC2" => "\xE5\xAF\x90",		"\xC3\xC3" => "\xE5\xA6\xB9",		"\xC3\xC4" => "\xE5\xAA\x9A",		"\xC3\xC5" => "\xE9\x97\xA8",		"\xC3\xC6" => "\xE9\x97\xB7",		"\xC3\xC7" => "\xE4\xBB\xAC",		"\xC3\xC8" => "\xE8\x90\x8C",		"\xC3\xC9" => "\xE8\x92\x99",		"\xC3\xCA" => "\xE6\xAA\xAC",		"\xC3\xCB" => "\xE7\x9B\x9F",		"\xC3\xCC" => "\xE9\x94\xB0",		"\xC3\xCD" => "\xE7\x8C\x9B",		"\xC3\xCE" => "\xE6\xA2\xA6",		"\xC3\xCF" => "\xE5\xAD\x9F",		"\xC3\xD0" => "\xE7\x9C\xAF",		"\xC3\xD1" => "\xE9\x86\x9A",		"\xC3\xD2" => "\xE9\x9D\xA1",		"\xC3\xD3" => "\xE7\xB3\x9C",		"\xC3\xD4" => "\xE8\xBF\xB7",		"\xC3\xD5" => "\xE8\xB0\x9C",		"\xC3\xD6" => "\xE5\xBC\xA5",		"\xC3\xD7" => "\xE7\xB1\xB3",		"\xC3\xD8" => "\xE7\xA7\x98",		"\xC3\xD9" => "\xE8\xA7\x85",		"\xC3\xDA" => "\xE6\xB3\x8C",		"\xC3\xDB" => "\xE8\x9C\x9C",		"\xC3\xDC" => "\xE5\xAF\x86",		"\xC3\xDD" => "\xE5\xB9\x82",		"\xC3\xDE" => "\xE6\xA3\x89",		"\xC3\xDF" => "\xE7\x9C\xA0",		"\xC3\xE0" => "\xE7\xBB\xB5",		"\xC3\xE1" => "\xE5\x86\x95",		"\xC3\xE2" => "\xE5\x85\x8D",		"\xC3\xE3" => "\xE5\x8B\x89",		"\xC3\xE4" => "\xE5\xA8\xA9",		"\xC3\xE5" => "\xE7\xBC\x85",		"\xC3\xE6" => "\xE9\x9D\xA2",		"\xC3\xE7" => "\xE8\x8B\x97",		"\xC3\xE8" => "\xE6\x8F\x8F",		"\xC3\xE9" => "\xE7\x9E\x84",		"\xC3\xEA" => "\xE8\x97\x90",		"\xC3\xEB" => "\xE7\xA7\x92",		"\xC3\xEC" => "\xE6\xB8\xBA",		"\xC3\xED" => "\xE5\xBA\x99",		"\xC3\xEE" => "\xE5\xA6\x99",		"\xC3\xEF" => "\xE8\x94\x91",		"\xC3\xF0" => "\xE7\x81\xAD",		"\xC3\xF1" => "\xE6\xB0\x91",		"\xC3\xF2" => "\xE6\x8A\xBF",		"\xC3\xF3" => "\xE7\x9A\xBF",		"\xC3\xF4" => "\xE6\x95\x8F",		"\xC3\xF5" => "\xE6\x82\xAF",		"\xC3\xF6" => "\xE9\x97\xBD",		"\xC3\xF7" => "\xE6\x98\x8E",		"\xC3\xF8" => "\xE8\x9E\x9F",		"\xC3\xF9" => "\xE9\xB8\xA3",		"\xC3\xFA" => "\xE9\x93\xAD",		"\xC3\xFB" => "\xE5\x90\x8D",		"\xC3\xFC" => "\xE5\x91\xBD",		"\xC3\xFD" => "\xE8\xB0\xAC",		"\xC3\xFE" => "\xE6\x91\xB8",		"\xC4\xA1" => "\xE6\x91\xB9",		"\xC4\xA2" => "\xE8\x98\x91",		"\xC4\xA3" => "\xE6\xA8\xA1",		"\xC4\xA4" => "\xE8\x86\x9C",		"\xC4\xA5" => "\xE7\xA3\xA8",		"\xC4\xA6" => "\xE6\x91\xA9",		"\xC4\xA7" => "\xE9\xAD\x94",		"\xC4\xA8" => "\xE6\x8A\xB9",		"\xC4\xA9" => "\xE6\x9C\xAB",		"\xC4\xAA" => "\xE8\x8E\xAB",		"\xC4\xAB" => "\xE5\xA2\xA8",		"\xC4\xAC" => "\xE9\xBB\x98",		"\xC4\xAD" => "\xE6\xB2\xAB",		"\xC4\xAE" => "\xE6\xBC\xA0",		"\xC4\xAF" => "\xE5\xAF\x9E",		"\xC4\xB0" => "\xE9\x99\x8C",		"\xC4\xB1" => "\xE8\xB0\x8B",		"\xC4\xB2" => "\xE7\x89\x9F",		"\xC4\xB3" => "\xE6\x9F\x90",		"\xC4\xB4" => "\xE6\x8B\x87",		"\xC4\xB5" => "\xE7\x89\xA1",		"\xC4\xB6" => "\xE4\xBA\xA9",		"\xC4\xB7" => "\xE5\xA7\x86",		"\xC4\xB8" => "\xE6\xAF\x8D",		"\xC4\xB9" => "\xE5\xA2\x93",		"\xC4\xBA" => "\xE6\x9A\xAE",		"\xC4\xBB" => "\xE5\xB9\x95",		"\xC4\xBC" => "\xE5\x8B\x9F",		"\xC4\xBD" => "\xE6\x85\x95",		"\xC4\xBE" => "\xE6\x9C\xA8",		"\xC4\xBF" => "\xE7\x9B\xAE",		"\xC4\xC0" => "\xE7\x9D\xA6",		"\xC4\xC1" => "\xE7\x89\xA7",		"\xC4\xC2" => "\xE7\xA9\x86",		"\xC4\xC3" => "\xE6\x8B\xBF",		"\xC4\xC4" => "\xE5\x93\xAA",		"\xC4\xC5" => "\xE5\x91\x90",		"\xC4\xC6" => "\xE9\x92\xA0",		"\xC4\xC7" => "\xE9\x82\xA3",		"\xC4\xC8" => "\xE5\xA8\x9C",		"\xC4\xC9" => "\xE7\xBA\xB3",		"\xC4\xCA" => "\xE6\xB0\x96",		"\xC4\xCB" => "\xE4\xB9\x83",		"\xC4\xCC" => "\xE5\xA5\xB6",		"\xC4\xCD" => "\xE8\x80\x90",		"\xC4\xCE" => "\xE5\xA5\x88",		"\xC4\xCF" => "\xE5\x8D\x97",		"\xC4\xD0" => "\xE7\x94\xB7",		"\xC4\xD1" => "\xE9\x9A\xBE",		"\xC4\xD2" => "\xE5\x9B\x8A",		"\xC4\xD3" => "\xE6\x8C\xA0",		"\xC4\xD4" => "\xE8\x84\x91",		"\xC4\xD5" => "\xE6\x81\xBC",		"\xC4\xD6" => "\xE9\x97\xB9",		"\xC4\xD7" => "\xE6\xB7\x96",		"\xC4\xD8" => "\xE5\x91\xA2",		"\xC4\xD9" => "\xE9\xA6\x81",		"\xC4\xDA" => "\xE5\x86\x85",		"\xC4\xDB" => "\xE5\xAB\xA9",		"\xC4\xDC" => "\xE8\x83\xBD",		"\xC4\xDD" => "\xE5\xA6\xAE",		"\xC4\xDE" => "\xE9\x9C\x93",		"\xC4\xDF" => "\xE5\x80\xAA",		"\xC4\xE0" => "\xE6\xB3\xA5",		"\xC4\xE1" => "\xE5\xB0\xBC",		"\xC4\xE2" => "\xE6\x8B\x9F",		"\xC4\xE3" => "\xE4\xBD\xA0",		"\xC4\xE4" => "\xE5\x8C\xBF",		"\xC4\xE5" => "\xE8\x85\xBB",		"\xC4\xE6" => "\xE9\x80\x86",		"\xC4\xE7" => "\xE6\xBA\xBA",		"\xC4\xE8" => "\xE8\x94\xAB",		"\xC4\xE9" => "\xE6\x8B\x88",		"\xC4\xEA" => "\xE5\xB9\xB4",		"\xC4\xEB" => "\xE7\xA2\xBE",		"\xC4\xEC" => "\xE6\x92\xB5",		"\xC4\xED" => "\xE6\x8D\xBB",		"\xC4\xEE" => "\xE5\xBF\xB5",		"\xC4\xEF" => "\xE5\xA8\x98",		"\xC4\xF0" => "\xE9\x85\xBF",		"\xC4\xF1" => "\xE9\xB8\x9F",		"\xC4\xF2" => "\xE5\xB0\xBF",		"\xC4\xF3" => "\xE6\x8D\x8F",		"\xC4\xF4" => "\xE8\x81\x82",		"\xC4\xF5" => "\xE5\xAD\xBD",		"\xC4\xF6" => "\xE5\x95\xAE",		"\xC4\xF7" => "\xE9\x95\x8A",		"\xC4\xF8" => "\xE9\x95\x8D",		"\xC4\xF9" => "\xE6\xB6\x85",		"\xC4\xFA" => "\xE6\x82\xA8",		"\xC4\xFB" => "\xE6\x9F\xA0",		"\xC4\xFC" => "\xE7\x8B\x9E",		"\xC4\xFD" => "\xE5\x87\x9D",		"\xC4\xFE" => "\xE5\xAE\x81",		"\xC5\xA1" => "\xE6\x8B\xA7",		"\xC5\xA2" => "\xE6\xB3\x9E",		"\xC5\xA3" => "\xE7\x89\x9B",		"\xC5\xA4" => "\xE6\x89\xAD",		"\xC5\xA5" => "\xE9\x92\xAE",		"\xC5\xA6" => "\xE7\xBA\xBD",		"\xC5\xA7" => "\xE8\x84\x93",		"\xC5\xA8" => "\xE6\xB5\x93",		"\xC5\xA9" => "\xE5\x86\x9C",		"\xC5\xAA" => "\xE5\xBC\x84",		"\xC5\xAB" => "\xE5\xA5\xB4",		"\xC5\xAC" => "\xE5\x8A\xAA",		"\xC5\xAD" => "\xE6\x80\x92",		"\xC5\xAE" => "\xE5\xA5\xB3",		"\xC5\xAF" => "\xE6\x9A\x96",		"\xC5\xB0" => "\xE8\x99\x90",		"\xC5\xB1" => "\xE7\x96\x9F",		"\xC5\xB2" => "\xE6\x8C\xAA",		"\xC5\xB3" => "\xE6\x87\xA6",		"\xC5\xB4" => "\xE7\xB3\xAF",		"\xC5\xB5" => "\xE8\xAF\xBA",		"\xC5\xB6" => "\xE5\x93\xA6",		"\xC5\xB7" => "\xE6\xAC\xA7",		"\xC5\xB8" => "\xE9\xB8\xA5",		"\xC5\xB9" => "\xE6\xAE\xB4",		"\xC5\xBA" => "\xE8\x97\x95",		"\xC5\xBB" => "\xE5\x91\x95",		"\xC5\xBC" => "\xE5\x81\xB6",		"\xC5\xBD" => "\xE6\xB2\xA4",		"\xC5\xBE" => "\xE5\x95\xAA",		"\xC5\xBF" => "\xE8\xB6\xB4",		"\xC5\xC0" => "\xE7\x88\xAC",		"\xC5\xC1" => "\xE5\xB8\x95",		"\xC5\xC2" => "\xE6\x80\x95",		"\xC5\xC3" => "\xE7\x90\xB6",		"\xC5\xC4" => "\xE6\x8B\x8D",		"\xC5\xC5" => "\xE6\x8E\x92",		"\xC5\xC6" => "\xE7\x89\x8C",		"\xC5\xC7" => "\xE5\xBE\x98",		"\xC5\xC8" => "\xE6\xB9\x83",		"\xC5\xC9" => "\xE6\xB4\xBE",		"\xC5\xCA" => "\xE6\x94\x80",		"\xC5\xCB" => "\xE6\xBD\x98",		"\xC5\xCC" => "\xE7\x9B\x98",		"\xC5\xCD" => "\xE7\xA3\x90",		"\xC5\xCE" => "\xE7\x9B\xBC",		"\xC5\xCF" => "\xE7\x95\x94",		"\xC5\xD0" => "\xE5\x88\xA4",		"\xC5\xD1" => "\xE5\x8F\x9B",		"\xC5\xD2" => "\xE4\xB9\x93",		"\xC5\xD3" => "\xE5\xBA\x9E",		"\xC5\xD4" => "\xE6\x97\x81",		"\xC5\xD5" => "\xE8\x80\xAA",		"\xC5\xD6" => "\xE8\x83\x96",		"\xC5\xD7" => "\xE6\x8A\x9B",		"\xC5\xD8" => "\xE5\x92\x86",		"\xC5\xD9" => "\xE5\x88\xA8",		"\xC5\xDA" => "\xE7\x82\xAE",		"\xC5\xDB" => "\xE8\xA2\x8D",		"\xC5\xDC" => "\xE8\xB7\x91",		"\xC5\xDD" => "\xE6\xB3\xA1",		"\xC5\xDE" => "\xE5\x91\xB8",		"\xC5\xDF" => "\xE8\x83\x9A",		"\xC5\xE0" => "\xE5\x9F\xB9",		"\xC5\xE1" => "\xE8\xA3\xB4",		"\xC5\xE2" => "\xE8\xB5\x94",		"\xC5\xE3" => "\xE9\x99\xAA",		"\xC5\xE4" => "\xE9\x85\x8D",		"\xC5\xE5" => "\xE4\xBD\xA9",		"\xC5\xE6" => "\xE6\xB2\x9B",		"\xC5\xE7" => "\xE5\x96\xB7",		"\xC5\xE8" => "\xE7\x9B\x86",		"\xC5\xE9" => "\xE7\xA0\xB0",		"\xC5\xEA" => "\xE6\x8A\xA8",		"\xC5\xEB" => "\xE7\x83\xB9",		"\xC5\xEC" => "\xE6\xBE\x8E",		"\xC5\xED" => "\xE5\xBD\xAD",		"\xC5\xEE" => "\xE8\x93\xAC",		"\xC5\xEF" => "\xE6\xA3\x9A",		"\xC5\xF0" => "\xE7\xA1\xBC",		"\xC5\xF1" => "\xE7\xAF\xB7",		"\xC5\xF2" => "\xE8\x86\xA8",		"\xC5\xF3" => "\xE6\x9C\x8B",		"\xC5\xF4" => "\xE9\xB9\x8F",		"\xC5\xF5" => "\xE6\x8D\xA7",		"\xC5\xF6" => "\xE7\xA2\xB0",		"\xC5\xF7" => "\xE5\x9D\xAF",		"\xC5\xF8" => "\xE7\xA0\x92",		"\xC5\xF9" => "\xE9\x9C\xB9",		"\xC5\xFA" => "\xE6\x89\xB9",		"\xC5\xFB" => "\xE6\x8A\xAB",		"\xC5\xFC" => "\xE5\x8A\x88",		"\xC5\xFD" => "\xE7\x90\xB5",		"\xC5\xFE" => "\xE6\xAF\x97",		"\xC6\xA1" => "\xE5\x95\xA4",		"\xC6\xA2" => "\xE8\x84\xBE",		"\xC6\xA3" => "\xE7\x96\xB2",		"\xC6\xA4" => "\xE7\x9A\xAE",		"\xC6\xA5" => "\xE5\x8C\xB9",		"\xC6\xA6" => "\xE7\x97\x9E",		"\xC6\xA7" => "\xE5\x83\xBB",		"\xC6\xA8" => "\xE5\xB1\x81",		"\xC6\xA9" => "\xE8\xAD\xAC",		"\xC6\xAA" => "\xE7\xAF\x87",		"\xC6\xAB" => "\xE5\x81\x8F",		"\xC6\xAC" => "\xE7\x89\x87",		"\xC6\xAD" => "\xE9\xAA\x97",		"\xC6\xAE" => "\xE9\xA3\x98",		"\xC6\xAF" => "\xE6\xBC\x82",		"\xC6\xB0" => "\xE7\x93\xA2",		"\xC6\xB1" => "\xE7\xA5\xA8",		"\xC6\xB2" => "\xE6\x92\x87",		"\xC6\xB3" => "\xE7\x9E\xA5",		"\xC6\xB4" => "\xE6\x8B\xBC",		"\xC6\xB5" => "\xE9\xA2\x91",		"\xC6\xB6" => "\xE8\xB4\xAB",		"\xC6\xB7" => "\xE5\x93\x81",		"\xC6\xB8" => "\xE8\x81\x98",		"\xC6\xB9" => "\xE4\xB9\x92",		"\xC6\xBA" => "\xE5\x9D\xAA",		"\xC6\xBB" => "\xE8\x8B\xB9",		"\xC6\xBC" => "\xE8\x90\x8D",		"\xC6\xBD" => "\xE5\xB9\xB3",		"\xC6\xBE" => "\xE5\x87\xAD",		"\xC6\xBF" => "\xE7\x93\xB6",		"\xC6\xC0" => "\xE8\xAF\x84",		"\xC6\xC1" => "\xE5\xB1\x8F",		"\xC6\xC2" => "\xE5\x9D\xA1",		"\xC6\xC3" => "\xE6\xB3\xBC",		"\xC6\xC4" => "\xE9\xA2\x87",		"\xC6\xC5" => "\xE5\xA9\x86",		"\xC6\xC6" => "\xE7\xA0\xB4",		"\xC6\xC7" => "\xE9\xAD\x84",		"\xC6\xC8" => "\xE8\xBF\xAB",		"\xC6\xC9" => "\xE7\xB2\x95",		"\xC6\xCA" => "\xE5\x89\x96",		"\xC6\xCB" => "\xE6\x89\x91",		"\xC6\xCC" => "\xE9\x93\xBA",		"\xC6\xCD" => "\xE4\xBB\x86",		"\xC6\xCE" => "\xE8\x8E\x86",		"\xC6\xCF" => "\xE8\x91\xA1",		"\xC6\xD0" => "\xE8\x8F\xA9",		"\xC6\xD1" => "\xE8\x92\xB2",		"\xC6\xD2" => "\xE5\x9F\x94",		"\xC6\xD3" => "\xE6\x9C\xB4",		"\xC6\xD4" => "\xE5\x9C\x83",		"\xC6\xD5" => "\xE6\x99\xAE",		"\xC6\xD6" => "\xE6\xB5\xA6",		"\xC6\xD7" => "\xE8\xB0\xB1",		"\xC6\xD8" => "\xE6\x9B\x9D",		"\xC6\xD9" => "\xE7\x80\x91",		"\xC6\xDA" => "\xE6\x9C\x9F",		"\xC6\xDB" => "\xE6\xAC\xBA",		"\xC6\xDC" => "\xE6\xA0\x96",		"\xC6\xDD" => "\xE6\x88\x9A",		"\xC6\xDE" => "\xE5\xA6\xBB",		"\xC6\xDF" => "\xE4\xB8\x83",		"\xC6\xE0" => "\xE5\x87\x84",		"\xC6\xE1" => "\xE6\xBC\x86",		"\xC6\xE2" => "\xE6\x9F\x92",		"\xC6\xE3" => "\xE6\xB2\x8F",		"\xC6\xE4" => "\xE5\x85\xB6",		"\xC6\xE5" => "\xE6\xA3\x8B",		"\xC6\xE6" => "\xE5\xA5\x87",		"\xC6\xE7" => "\xE6\xAD\xA7",		"\xC6\xE8" => "\xE7\x95\xA6",		"\xC6\xE9" => "\xE5\xB4\x8E",		"\xC6\xEA" => "\xE8\x84\x90",		"\xC6\xEB" => "\xE9\xBD\x90",		"\xC6\xEC" => "\xE6\x97\x97",		"\xC6\xED" => "\xE7\xA5\x88",		"\xC6\xEE" => "\xE7\xA5\x81",		"\xC6\xEF" => "\xE9\xAA\x91",		"\xC6\xF0" => "\xE8\xB5\xB7",		"\xC6\xF1" => "\xE5\xB2\x82",		"\xC6\xF2" => "\xE4\xB9\x9E",		"\xC6\xF3" => "\xE4\xBC\x81",		"\xC6\xF4" => "\xE5\x90\xAF",		"\xC6\xF5" => "\xE5\xA5\x91",		"\xC6\xF6" => "\xE7\xA0\x8C",		"\xC6\xF7" => "\xE5\x99\xA8",		"\xC6\xF8" => "\xE6\xB0\x94",		"\xC6\xF9" => "\xE8\xBF\x84",		"\xC6\xFA" => "\xE5\xBC\x83",		"\xC6\xFB" => "\xE6\xB1\xBD",		"\xC6\xFC" => "\xE6\xB3\xA3",		"\xC6\xFD" => "\xE8\xAE\xAB",		"\xC6\xFE" => "\xE6\x8E\x90",		"\xC7\xA1" => "\xE6\x81\xB0",		"\xC7\xA2" => "\xE6\xB4\xBD",		"\xC7\xA3" => "\xE7\x89\xB5",		"\xC7\xA4" => "\xE6\x89\xA6",		"\xC7\xA5" => "\xE9\x92\x8E",		"\xC7\xA6" => "\xE9\x93\x85",		"\xC7\xA7" => "\xE5\x8D\x83",		"\xC7\xA8" => "\xE8\xBF\x81",		"\xC7\xA9" => "\xE7\xAD\xBE",		"\xC7\xAA" => "\xE4\xBB\x9F",		"\xC7\xAB" => "\xE8\xB0\xA6",		"\xC7\xAC" => "\xE4\xB9\xBE",		"\xC7\xAD" => "\xE9\xBB\x94",		"\xC7\xAE" => "\xE9\x92\xB1",		"\xC7\xAF" => "\xE9\x92\xB3",		"\xC7\xB0" => "\xE5\x89\x8D",		"\xC7\xB1" => "\xE6\xBD\x9C",		"\xC7\xB2" => "\xE9\x81\xA3",		"\xC7\xB3" => "\xE6\xB5\x85",		"\xC7\xB4" => "\xE8\xB0\xB4",		"\xC7\xB5" => "\xE5\xA0\x91",		"\xC7\xB6" => "\xE5\xB5\x8C",		"\xC7\xB7" => "\xE6\xAC\xA0",		"\xC7\xB8" => "\xE6\xAD\x89",		"\xC7\xB9" => "\xE6\x9E\xAA",		"\xC7\xBA" => "\xE5\x91\x9B",		"\xC7\xBB" => "\xE8\x85\x94",		"\xC7\xBC" => "\xE7\xBE\x8C",		"\xC7\xBD" => "\xE5\xA2\x99",		"\xC7\xBE" => "\xE8\x94\xB7",		"\xC7\xBF" => "\xE5\xBC\xBA",		"\xC7\xC0" => "\xE6\x8A\xA2",		"\xC7\xC1" => "\xE6\xA9\x87",		"\xC7\xC2" => "\xE9\x94\xB9",		"\xC7\xC3" => "\xE6\x95\xB2",		"\xC7\xC4" => "\xE6\x82\x84",		"\xC7\xC5" => "\xE6\xA1\xA5",		"\xC7\xC6" => "\xE7\x9E\xA7",		"\xC7\xC7" => "\xE4\xB9\x94",		"\xC7\xC8" => "\xE4\xBE\xA8",		"\xC7\xC9" => "\xE5\xB7\xA7",		"\xC7\xCA" => "\xE9\x9E\x98",		"\xC7\xCB" => "\xE6\x92\xAC",		"\xC7\xCC" => "\xE7\xBF\x98",		"\xC7\xCD" => "\xE5\xB3\xAD",		"\xC7\xCE" => "\xE4\xBF\x8F",		"\xC7\xCF" => "\xE7\xAA\x8D",		"\xC7\xD0" => "\xE5\x88\x87",		"\xC7\xD1" => "\xE8\x8C\x84",		"\xC7\xD2" => "\xE4\xB8\x94",		"\xC7\xD3" => "\xE6\x80\xAF",		"\xC7\xD4" => "\xE7\xAA\x83",		"\xC7\xD5" => "\xE9\x92\xA6",		"\xC7\xD6" => "\xE4\xBE\xB5",		"\xC7\xD7" => "\xE4\xBA\xB2",		"\xC7\xD8" => "\xE7\xA7\xA6",		"\xC7\xD9" => "\xE7\x90\xB4",		"\xC7\xDA" => "\xE5\x8B\xA4",		"\xC7\xDB" => "\xE8\x8A\xB9",		"\xC7\xDC" => "\xE6\x93\x92",		"\xC7\xDD" => "\xE7\xA6\xBD",		"\xC7\xDE" => "\xE5\xAF\x9D",		"\xC7\xDF" => "\xE6\xB2\x81",		"\xC7\xE0" => "\xE9\x9D\x92",		"\xC7\xE1" => "\xE8\xBD\xBB",		"\xC7\xE2" => "\xE6\xB0\xA2",		"\xC7\xE3" => "\xE5\x80\xBE",		"\xC7\xE4" => "\xE5\x8D\xBF",		"\xC7\xE5" => "\xE6\xB8\x85",		"\xC7\xE6" => "\xE6\x93\x8E",		"\xC7\xE7" => "\xE6\x99\xB4",		"\xC7\xE8" => "\xE6\xB0\xB0",		"\xC7\xE9" => "\xE6\x83\x85",		"\xC7\xEA" => "\xE9\xA1\xB7",		"\xC7\xEB" => "\xE8\xAF\xB7",		"\xC7\xEC" => "\xE5\xBA\x86",		"\xC7\xED" => "\xE7\x90\xBC",		"\xC7\xEE" => "\xE7\xA9\xB7",		"\xC7\xEF" => "\xE7\xA7\x8B",		"\xC7\xF0" => "\xE4\xB8\x98",		"\xC7\xF1" => "\xE9\x82\xB1",		"\xC7\xF2" => "\xE7\x90\x83",		"\xC7\xF3" => "\xE6\xB1\x82",		"\xC7\xF4" => "\xE5\x9B\x9A",		"\xC7\xF5" => "\xE9\x85\x8B",		"\xC7\xF6" => "\xE6\xB3\x85",		"\xC7\xF7" => "\xE8\xB6\x8B",		"\xC7\xF8" => "\xE5\x8C\xBA",		"\xC7\xF9" => "\xE8\x9B\x86",		"\xC7\xFA" => "\xE6\x9B\xB2",		"\xC7\xFB" => "\xE8\xBA\xAF",		"\xC7\xFC" => "\xE5\xB1\x88",		"\xC7\xFD" => "\xE9\xA9\xB1",		"\xC7\xFE" => "\xE6\xB8\xA0",		"\xC8\xA1" => "\xE5\x8F\x96",		"\xC8\xA2" => "\xE5\xA8\xB6",		"\xC8\xA3" => "\xE9\xBE\x8B",		"\xC8\xA4" => "\xE8\xB6\xA3",		"\xC8\xA5" => "\xE5\x8E\xBB",		"\xC8\xA6" => "\xE5\x9C\x88",		"\xC8\xA7" => "\xE9\xA2\xA7",		"\xC8\xA8" => "\xE6\x9D\x83",		"\xC8\xA9" => "\xE9\x86\x9B",		"\xC8\xAA" => "\xE6\xB3\x89",		"\xC8\xAB" => "\xE5\x85\xA8",		"\xC8\xAC" => "\xE7\x97\x8A",		"\xC8\xAD" => "\xE6\x8B\xB3",		"\xC8\xAE" => "\xE7\x8A\xAC",		"\xC8\xAF" => "\xE5\x88\xB8",		"\xC8\xB0" => "\xE5\x8A\x9D",		"\xC8\xB1" => "\xE7\xBC\xBA",		"\xC8\xB2" => "\xE7\x82\x94",		"\xC8\xB3" => "\xE7\x98\xB8",		"\xC8\xB4" => "\xE5\x8D\xB4",		"\xC8\xB5" => "\xE9\xB9\x8A",		"\xC8\xB6" => "\xE6\xA6\xB7",		"\xC8\xB7" => "\xE7\xA1\xAE",		"\xC8\xB8" => "\xE9\x9B\x80",		"\xC8\xB9" => "\xE8\xA3\x99",		"\xC8\xBA" => "\xE7\xBE\xA4",		"\xC8\xBB" => "\xE7\x84\xB6",		"\xC8\xBC" => "\xE7\x87\x83",		"\xC8\xBD" => "\xE5\x86\x89",		"\xC8\xBE" => "\xE6\x9F\x93",		"\xC8\xBF" => "\xE7\x93\xA4",		"\xC8\xC0" => "\xE5\xA3\xA4",		"\xC8\xC1" => "\xE6\x94\x98",		"\xC8\xC2" => "\xE5\x9A\xB7",		"\xC8\xC3" => "\xE8\xAE\xA9",		"\xC8\xC4" => "\xE9\xA5\xB6",		"\xC8\xC5" => "\xE6\x89\xB0",		"\xC8\xC6" => "\xE7\xBB\x95",		"\xC8\xC7" => "\xE6\x83\xB9",		"\xC8\xC8" => "\xE7\x83\xAD",		"\xC8\xC9" => "\xE5\xA3\xAC",		"\xC8\xCA" => "\xE4\xBB\x81",		"\xC8\xCB" => "\xE4\xBA\xBA",		"\xC8\xCC" => "\xE5\xBF\x8D",		"\xC8\xCD" => "\xE9\x9F\xA7",		"\xC8\xCE" => "\xE4\xBB\xBB",		"\xC8\xCF" => "\xE8\xAE\xA4",		"\xC8\xD0" => "\xE5\x88\x83",		"\xC8\xD1" => "\xE5\xA6\x8A",		"\xC8\xD2" => "\xE7\xBA\xAB",		"\xC8\xD3" => "\xE6\x89\x94",		"\xC8\xD4" => "\xE4\xBB\x8D",		"\xC8\xD5" => "\xE6\x97\xA5",		"\xC8\xD6" => "\xE6\x88\x8E",		"\xC8\xD7" => "\xE8\x8C\xB8",		"\xC8\xD8" => "\xE8\x93\x89",		"\xC8\xD9" => "\xE8\x8D\xA3",		"\xC8\xDA" => "\xE8\x9E\x8D",		"\xC8\xDB" => "\xE7\x86\x94",		"\xC8\xDC" => "\xE6\xBA\xB6",		"\xC8\xDD" => "\xE5\xAE\xB9",		"\xC8\xDE" => "\xE7\xBB\x92",		"\xC8\xDF" => "\xE5\x86\x97",		"\xC8\xE0" => "\xE6\x8F\x89",		"\xC8\xE1" => "\xE6\x9F\x94",		"\xC8\xE2" => "\xE8\x82\x89",		"\xC8\xE3" => "\xE8\x8C\xB9",		"\xC8\xE4" => "\xE8\xA0\x95",		"\xC8\xE5" => "\xE5\x84\x92",		"\xC8\xE6" => "\xE5\xAD\xBA",		"\xC8\xE7" => "\xE5\xA6\x82",		"\xC8\xE8" => "\xE8\xBE\xB1",		"\xC8\xE9" => "\xE4\xB9\xB3",		"\xC8\xEA" => "\xE6\xB1\x9D",		"\xC8\xEB" => "\xE5\x85\xA5",		"\xC8\xEC" => "\xE8\xA4\xA5",		"\xC8\xED" => "\xE8\xBD\xAF",		"\xC8\xEE" => "\xE9\x98\xAE",		"\xC8\xEF" => "\xE8\x95\x8A",		"\xC8\xF0" => "\xE7\x91\x9E",		"\xC8\xF1" => "\xE9\x94\x90",		"\xC8\xF2" => "\xE9\x97\xB0",		"\xC8\xF3" => "\xE6\xB6\xA6",		"\xC8\xF4" => "\xE8\x8B\xA5",		"\xC8\xF5" => "\xE5\xBC\xB1",		"\xC8\xF6" => "\xE6\x92\x92",		"\xC8\xF7" => "\xE6\xB4\x92",		"\xC8\xF8" => "\xE8\x90\xA8",		"\xC8\xF9" => "\xE8\x85\xAE",		"\xC8\xFA" => "\xE9\xB3\x83",		"\xC8\xFB" => "\xE5\xA1\x9E",		"\xC8\xFC" => "\xE8\xB5\x9B",		"\xC8\xFD" => "\xE4\xB8\x89",		"\xC8\xFE" => "\xE5\x8F\x81",		"\xC9\xA1" => "\xE4\xBC\x9E",		"\xC9\xA2" => "\xE6\x95\xA3",		"\xC9\xA3" => "\xE6\xA1\x91",		"\xC9\xA4" => "\xE5\x97\x93",		"\xC9\xA5" => "\xE4\xB8\xA7",		"\xC9\xA6" => "\xE6\x90\x94",		"\xC9\xA7" => "\xE9\xAA\x9A",		"\xC9\xA8" => "\xE6\x89\xAB",		"\xC9\xA9" => "\xE5\xAB\x82",		"\xC9\xAA" => "\xE7\x91\x9F",		"\xC9\xAB" => "\xE8\x89\xB2",		"\xC9\xAC" => "\xE6\xB6\xA9",		"\xC9\xAD" => "\xE6\xA3\xAE",		"\xC9\xAE" => "\xE5\x83\xA7",		"\xC9\xAF" => "\xE8\x8E\x8E",		"\xC9\xB0" => "\xE7\xA0\x82",		"\xC9\xB1" => "\xE6\x9D\x80",		"\xC9\xB2" => "\xE5\x88\xB9",		"\xC9\xB3" => "\xE6\xB2\x99",		"\xC9\xB4" => "\xE7\xBA\xB1",		"\xC9\xB5" => "\xE5\x82\xBB",		"\xC9\xB6" => "\xE5\x95\xA5",		"\xC9\xB7" => "\xE7\x85\x9E",		"\xC9\xB8" => "\xE7\xAD\x9B",		"\xC9\xB9" => "\xE6\x99\x92",		"\xC9\xBA" => "\xE7\x8F\x8A",		"\xC9\xBB" => "\xE8\x8B\xAB",		"\xC9\xBC" => "\xE6\x9D\x89",		"\xC9\xBD" => "\xE5\xB1\xB1",		"\xC9\xBE" => "\xE5\x88\xA0",		"\xC9\xBF" => "\xE7\x85\xBD",		"\xC9\xC0" => "\xE8\xA1\xAB",		"\xC9\xC1" => "\xE9\x97\xAA",		"\xC9\xC2" => "\xE9\x99\x95",		"\xC9\xC3" => "\xE6\x93\x85",		"\xC9\xC4" => "\xE8\xB5\xA1",		"\xC9\xC5" => "\xE8\x86\xB3",		"\xC9\xC6" => "\xE5\x96\x84",		"\xC9\xC7" => "\xE6\xB1\x95",		"\xC9\xC8" => "\xE6\x89\x87",		"\xC9\xC9" => "\xE7\xBC\xAE",		"\xC9\xCA" => "\xE5\xA2\x92",		"\xC9\xCB" => "\xE4\xBC\xA4",		"\xC9\xCC" => "\xE5\x95\x86",		"\xC9\xCD" => "\xE8\xB5\x8F",		"\xC9\xCE" => "\xE6\x99\x8C",		"\xC9\xCF" => "\xE4\xB8\x8A",		"\xC9\xD0" => "\xE5\xB0\x9A",		"\xC9\xD1" => "\xE8\xA3\xB3",		"\xC9\xD2" => "\xE6\xA2\xA2",		"\xC9\xD3" => "\xE6\x8D\x8E",		"\xC9\xD4" => "\xE7\xA8\x8D",		"\xC9\xD5" => "\xE7\x83\xA7",		"\xC9\xD6" => "\xE8\x8A\x8D",		"\xC9\xD7" => "\xE5\x8B\xBA",		"\xC9\xD8" => "\xE9\x9F\xB6",		"\xC9\xD9" => "\xE5\xB0\x91",		"\xC9\xDA" => "\xE5\x93\xA8",		"\xC9\xDB" => "\xE9\x82\xB5",		"\xC9\xDC" => "\xE7\xBB\x8D",		"\xC9\xDD" => "\xE5\xA5\xA2",		"\xC9\xDE" => "\xE8\xB5\x8A",		"\xC9\xDF" => "\xE8\x9B\x87",		"\xC9\xE0" => "\xE8\x88\x8C",		"\xC9\xE1" => "\xE8\x88\x8D",		"\xC9\xE2" => "\xE8\xB5\xA6",		"\xC9\xE3" => "\xE6\x91\x84",		"\xC9\xE4" => "\xE5\xB0\x84",		"\xC9\xE5" => "\xE6\x85\x91",		"\xC9\xE6" => "\xE6\xB6\x89",		"\xC9\xE7" => "\xE7\xA4\xBE",		"\xC9\xE8" => "\xE8\xAE\xBE",		"\xC9\xE9" => "\xE7\xA0\xB7",		"\xC9\xEA" => "\xE7\x94\xB3",		"\xC9\xEB" => "\xE5\x91\xBB",		"\xC9\xEC" => "\xE4\xBC\xB8",		"\xC9\xED" => "\xE8\xBA\xAB",		"\xC9\xEE" => "\xE6\xB7\xB1",		"\xC9\xEF" => "\xE5\xA8\xA0",		"\xC9\xF0" => "\xE7\xBB\x85",		"\xC9\xF1" => "\xE7\xA5\x9E",		"\xC9\xF2" => "\xE6\xB2\x88",		"\xC9\xF3" => "\xE5\xAE\xA1",		"\xC9\xF4" => "\xE5\xA9\xB6",		"\xC9\xF5" => "\xE7\x94\x9A",		"\xC9\xF6" => "\xE8\x82\xBE",		"\xC9\xF7" => "\xE6\x85\x8E",		"\xC9\xF8" => "\xE6\xB8\x97",		"\xC9\xF9" => "\xE5\xA3\xB0",		"\xC9\xFA" => "\xE7\x94\x9F",		"\xC9\xFB" => "\xE7\x94\xA5",		"\xC9\xFC" => "\xE7\x89\xB2",		"\xC9\xFD" => "\xE5\x8D\x87",		"\xC9\xFE" => "\xE7\xBB\xB3",		"\xCA\xA1" => "\xE7\x9C\x81",		"\xCA\xA2" => "\xE7\x9B\x9B",		"\xCA\xA3" => "\xE5\x89\xA9",		"\xCA\xA4" => "\xE8\x83\x9C",		"\xCA\xA5" => "\xE5\x9C\xA3",		"\xCA\xA6" => "\xE5\xB8\x88",		"\xCA\xA7" => "\xE5\xA4\xB1",		"\xCA\xA8" => "\xE7\x8B\xAE",		"\xCA\xA9" => "\xE6\x96\xBD",		"\xCA\xAA" => "\xE6\xB9\xBF",		"\xCA\xAB" => "\xE8\xAF\x97",		"\xCA\xAC" => "\xE5\xB0\xB8",		"\xCA\xAD" => "\xE8\x99\xB1",		"\xCA\xAE" => "\xE5\x8D\x81",		"\xCA\xAF" => "\xE7\x9F\xB3",		"\xCA\xB0" => "\xE6\x8B\xBE",		"\xCA\xB1" => "\xE6\x97\xB6",		"\xCA\xB2" => "\xE4\xBB\x80",		"\xCA\xB3" => "\xE9\xA3\x9F",		"\xCA\xB4" => "\xE8\x9A\x80",		"\xCA\xB5" => "\xE5\xAE\x9E",		"\xCA\xB6" => "\xE8\xAF\x86",		"\xCA\xB7" => "\xE5\x8F\xB2",		"\xCA\xB8" => "\xE7\x9F\xA2",		"\xCA\xB9" => "\xE4\xBD\xBF",		"\xCA\xBA" => "\xE5\xB1\x8E",		"\xCA\xBB" => "\xE9\xA9\xB6",		"\xCA\xBC" => "\xE5\xA7\x8B",		"\xCA\xBD" => "\xE5\xBC\x8F",		"\xCA\xBE" => "\xE7\xA4\xBA",		"\xCA\xBF" => "\xE5\xA3\xAB",		"\xCA\xC0" => "\xE4\xB8\x96",		"\xCA\xC1" => "\xE6\x9F\xBF",		"\xCA\xC2" => "\xE4\xBA\x8B",		"\xCA\xC3" => "\xE6\x8B\xAD",		"\xCA\xC4" => "\xE8\xAA\x93",		"\xCA\xC5" => "\xE9\x80\x9D",		"\xCA\xC6" => "\xE5\x8A\xBF",		"\xCA\xC7" => "\xE6\x98\xAF",		"\xCA\xC8" => "\xE5\x97\x9C",		"\xCA\xC9" => "\xE5\x99\xAC",		"\xCA\xCA" => "\xE9\x80\x82",		"\xCA\xCB" => "\xE4\xBB\x95",		"\xCA\xCC" => "\xE4\xBE\x8D",		"\xCA\xCD" => "\xE9\x87\x8A",		"\xCA\xCE" => "\xE9\xA5\xB0",		"\xCA\xCF" => "\xE6\xB0\x8F",		"\xCA\xD0" => "\xE5\xB8\x82",		"\xCA\xD1" => "\xE6\x81\x83",		"\xCA\xD2" => "\xE5\xAE\xA4",		"\xCA\xD3" => "\xE8\xA7\x86",		"\xCA\xD4" => "\xE8\xAF\x95",		"\xCA\xD5" => "\xE6\x94\xB6",		"\xCA\xD6" => "\xE6\x89\x8B",		"\xCA\xD7" => "\xE9\xA6\x96",		"\xCA\xD8" => "\xE5\xAE\x88",		"\xCA\xD9" => "\xE5\xAF\xBF",		"\xCA\xDA" => "\xE6\x8E\x88",		"\xCA\xDB" => "\xE5\x94\xAE",		"\xCA\xDC" => "\xE5\x8F\x97",		"\xCA\xDD" => "\xE7\x98\xA6",		"\xCA\xDE" => "\xE5\x85\xBD",		"\xCA\xDF" => "\xE8\x94\xAC",		"\xCA\xE0" => "\xE6\x9E\xA2",		"\xCA\xE1" => "\xE6\xA2\xB3",		"\xCA\xE2" => "\xE6\xAE\x8A",		"\xCA\xE3" => "\xE6\x8A\x92",		"\xCA\xE4" => "\xE8\xBE\x93",		"\xCA\xE5" => "\xE5\x8F\x94",		"\xCA\xE6" => "\xE8\x88\x92",		"\xCA\xE7" => "\xE6\xB7\x91",		"\xCA\xE8" => "\xE7\x96\x8F",		"\xCA\xE9" => "\xE4\xB9\xA6",		"\xCA\xEA" => "\xE8\xB5\x8E",		"\xCA\xEB" => "\xE5\xAD\xB0",		"\xCA\xEC" => "\xE7\x86\x9F",		"\xCA\xED" => "\xE8\x96\xAF",		"\xCA\xEE" => "\xE6\x9A\x91",		"\xCA\xEF" => "\xE6\x9B\x99",		"\xCA\xF0" => "\xE7\xBD\xB2",		"\xCA\xF1" => "\xE8\x9C\x80",		"\xCA\xF2" => "\xE9\xBB\x8D",		"\xCA\xF3" => "\xE9\xBC\xA0",		"\xCA\xF4" => "\xE5\xB1\x9E",		"\xCA\xF5" => "\xE6\x9C\xAF",		"\xCA\xF6" => "\xE8\xBF\xB0",		"\xCA\xF7" => "\xE6\xA0\x91",		"\xCA\xF8" => "\xE6\x9D\x9F",		"\xCA\xF9" => "\xE6\x88\x8D",		"\xCA\xFA" => "\xE7\xAB\x96",		"\xCA\xFB" => "\xE5\xA2\x85",		"\xCA\xFC" => "\xE5\xBA\xB6",		"\xCA\xFD" => "\xE6\x95\xB0",		"\xCA\xFE" => "\xE6\xBC\xB1",		"\xCB\xA1" => "\xE6\x81\x95",		"\xCB\xA2" => "\xE5\x88\xB7",		"\xCB\xA3" => "\xE8\x80\x8D",		"\xCB\xA4" => "\xE6\x91\x94",		"\xCB\xA5" => "\xE8\xA1\xB0",		"\xCB\xA6" => "\xE7\x94\xA9",		"\xCB\xA7" => "\xE5\xB8\x85",		"\xCB\xA8" => "\xE6\xA0\x93",		"\xCB\xA9" => "\xE6\x8B\xB4",		"\xCB\xAA" => "\xE9\x9C\x9C",		"\xCB\xAB" => "\xE5\x8F\x8C",		"\xCB\xAC" => "\xE7\x88\xBD",		"\xCB\xAD" => "\xE8\xB0\x81",		"\xCB\xAE" => "\xE6\xB0\xB4",		"\xCB\xAF" => "\xE7\x9D\xA1",		"\xCB\xB0" => "\xE7\xA8\x8E",		"\xCB\xB1" => "\xE5\x90\xAE",		"\xCB\xB2" => "\xE7\x9E\xAC",		"\xCB\xB3" => "\xE9\xA1\xBA",		"\xCB\xB4" => "\xE8\x88\x9C",		"\xCB\xB5" => "\xE8\xAF\xB4",		"\xCB\xB6" => "\xE7\xA1\x95",		"\xCB\xB7" => "\xE6\x9C\x94",		"\xCB\xB8" => "\xE7\x83\x81",		"\xCB\xB9" => "\xE6\x96\xAF",		"\xCB\xBA" => "\xE6\x92\x95",		"\xCB\xBB" => "\xE5\x98\xB6",		"\xCB\xBC" => "\xE6\x80\x9D",		"\xCB\xBD" => "\xE7\xA7\x81",		"\xCB\xBE" => "\xE5\x8F\xB8",		"\xCB\xBF" => "\xE4\xB8\x9D",		"\xCB\xC0" => "\xE6\xAD\xBB",		"\xCB\xC1" => "\xE8\x82\x86",		"\xCB\xC2" => "\xE5\xAF\xBA",		"\xCB\xC3" => "\xE5\x97\xA3",		"\xCB\xC4" => "\xE5\x9B\x9B",		"\xCB\xC5" => "\xE4\xBC\xBA",		"\xCB\xC6" => "\xE4\xBC\xBC",		"\xCB\xC7" => "\xE9\xA5\xB2",		"\xCB\xC8" => "\xE5\xB7\xB3",		"\xCB\xC9" => "\xE6\x9D\xBE",		"\xCB\xCA" => "\xE8\x80\xB8",		"\xCB\xCB" => "\xE6\x80\x82",		"\xCB\xCC" => "\xE9\xA2\x82",		"\xCB\xCD" => "\xE9\x80\x81",		"\xCB\xCE" => "\xE5\xAE\x8B",		"\xCB\xCF" => "\xE8\xAE\xBC",		"\xCB\xD0" => "\xE8\xAF\xB5",		"\xCB\xD1" => "\xE6\x90\x9C",		"\xCB\xD2" => "\xE8\x89\x98",		"\xCB\xD3" => "\xE6\x93\x9E",		"\xCB\xD4" => "\xE5\x97\xBD",		"\xCB\xD5" => "\xE8\x8B\x8F",		"\xCB\xD6" => "\xE9\x85\xA5",		"\xCB\xD7" => "\xE4\xBF\x97",		"\xCB\xD8" => "\xE7\xB4\xA0",		"\xCB\xD9" => "\xE9\x80\x9F",		"\xCB\xDA" => "\xE7\xB2\x9F",		"\xCB\xDB" => "\xE5\x83\xB3",		"\xCB\xDC" => "\xE5\xA1\x91",		"\xCB\xDD" => "\xE6\xBA\xAF",		"\xCB\xDE" => "\xE5\xAE\xBF",		"\xCB\xDF" => "\xE8\xAF\x89",		"\xCB\xE0" => "\xE8\x82\x83",		"\xCB\xE1" => "\xE9\x85\xB8",		"\xCB\xE2" => "\xE8\x92\x9C",		"\xCB\xE3" => "\xE7\xAE\x97",		"\xCB\xE4" => "\xE8\x99\xBD",		"\xCB\xE5" => "\xE9\x9A\x8B",		"\xCB\xE6" => "\xE9\x9A\x8F",		"\xCB\xE7" => "\xE7\xBB\xA5",		"\xCB\xE8" => "\xE9\xAB\x93",		"\xCB\xE9" => "\xE7\xA2\x8E",		"\xCB\xEA" => "\xE5\xB2\x81",		"\xCB\xEB" => "\xE7\xA9\x97",		"\xCB\xEC" => "\xE9\x81\x82",		"\xCB\xED" => "\xE9\x9A\xA7",		"\xCB\xEE" => "\xE7\xA5\x9F",		"\xCB\xEF" => "\xE5\xAD\x99",		"\xCB\xF0" => "\xE6\x8D\x9F",		"\xCB\xF1" => "\xE7\xAC\x8B",		"\xCB\xF2" => "\xE8\x93\x91",		"\xCB\xF3" => "\xE6\xA2\xAD",		"\xCB\xF4" => "\xE5\x94\x86",		"\xCB\xF5" => "\xE7\xBC\xA9",		"\xCB\xF6" => "\xE7\x90\x90",		"\xCB\xF7" => "\xE7\xB4\xA2",		"\xCB\xF8" => "\xE9\x94\x81",		"\xCB\xF9" => "\xE6\x89\x80",		"\xCB\xFA" => "\xE5\xA1\x8C",		"\xCB\xFB" => "\xE4\xBB\x96",		"\xCB\xFC" => "\xE5\xAE\x83",		"\xCB\xFD" => "\xE5\xA5\xB9",		"\xCB\xFE" => "\xE5\xA1\x94",		"\xCC\xA1" => "\xE7\x8D\xAD",		"\xCC\xA2" => "\xE6\x8C\x9E",		"\xCC\xA3" => "\xE8\xB9\x8B",		"\xCC\xA4" => "\xE8\xB8\x8F",		"\xCC\xA5" => "\xE8\x83\x8E",		"\xCC\xA6" => "\xE8\x8B\x94",		"\xCC\xA7" => "\xE6\x8A\xAC",		"\xCC\xA8" => "\xE5\x8F\xB0",		"\xCC\xA9" => "\xE6\xB3\xB0",		"\xCC\xAA" => "\xE9\x85\x9E",		"\xCC\xAB" => "\xE5\xA4\xAA",		"\xCC\xAC" => "\xE6\x80\x81",		"\xCC\xAD" => "\xE6\xB1\xB0",		"\xCC\xAE" => "\xE5\x9D\x8D",		"\xCC\xAF" => "\xE6\x91\x8A",		"\xCC\xB0" => "\xE8\xB4\xAA",		"\xCC\xB1" => "\xE7\x98\xAB",		"\xCC\xB2" => "\xE6\xBB\xA9",		"\xCC\xB3" => "\xE5\x9D\x9B",		"\xCC\xB4" => "\xE6\xAA\x80",		"\xCC\xB5" => "\xE7\x97\xB0",		"\xCC\xB6" => "\xE6\xBD\xAD",		"\xCC\xB7" => "\xE8\xB0\xAD",		"\xCC\xB8" => "\xE8\xB0\x88",		"\xCC\xB9" => "\xE5\x9D\xA6",		"\xCC\xBA" => "\xE6\xAF\xAF",		"\xCC\xBB" => "\xE8\xA2\x92",		"\xCC\xBC" => "\xE7\xA2\xB3",		"\xCC\xBD" => "\xE6\x8E\xA2",		"\xCC\xBE" => "\xE5\x8F\xB9",		"\xCC\xBF" => "\xE7\x82\xAD",		"\xCC\xC0" => "\xE6\xB1\xA4",		"\xCC\xC1" => "\xE5\xA1\x98",		"\xCC\xC2" => "\xE6\x90\xAA",		"\xCC\xC3" => "\xE5\xA0\x82",		"\xCC\xC4" => "\xE6\xA3\xA0",		"\xCC\xC5" => "\xE8\x86\x9B",		"\xCC\xC6" => "\xE5\x94\x90",		"\xCC\xC7" => "\xE7\xB3\x96",		"\xCC\xC8" => "\xE5\x80\x98",		"\xCC\xC9" => "\xE8\xBA\xBA",		"\xCC\xCA" => "\xE6\xB7\x8C",		"\xCC\xCB" => "\xE8\xB6\x9F",		"\xCC\xCC" => "\xE7\x83\xAB",		"\xCC\xCD" => "\xE6\x8E\x8F",		"\xCC\xCE" => "\xE6\xB6\x9B",		"\xCC\xCF" => "\xE6\xBB\x94",		"\xCC\xD0" => "\xE7\xBB\xA6",		"\xCC\xD1" => "\xE8\x90\x84",		"\xCC\xD2" => "\xE6\xA1\x83",		"\xCC\xD3" => "\xE9\x80\x83",		"\xCC\xD4" => "\xE6\xB7\x98",		"\xCC\xD5" => "\xE9\x99\xB6",		"\xCC\xD6" => "\xE8\xAE\xA8",		"\xCC\xD7" => "\xE5\xA5\x97",		"\xCC\xD8" => "\xE7\x89\xB9",		"\xCC\xD9" => "\xE8\x97\xA4",		"\xCC\xDA" => "\xE8\x85\xBE",		"\xCC\xDB" => "\xE7\x96\xBC",		"\xCC\xDC" => "\xE8\xAA\x8A",		"\xCC\xDD" => "\xE6\xA2\xAF",		"\xCC\xDE" => "\xE5\x89\x94",		"\xCC\xDF" => "\xE8\xB8\xA2",		"\xCC\xE0" => "\xE9\x94\x91",		"\xCC\xE1" => "\xE6\x8F\x90",		"\xCC\xE2" => "\xE9\xA2\x98",		"\xCC\xE3" => "\xE8\xB9\x84",		"\xCC\xE4" => "\xE5\x95\xBC",		"\xCC\xE5" => "\xE4\xBD\x93",		"\xCC\xE6" => "\xE6\x9B\xBF",		"\xCC\xE7" => "\xE5\x9A\x8F",		"\xCC\xE8" => "\xE6\x83\x95",		"\xCC\xE9" => "\xE6\xB6\x95",		"\xCC\xEA" => "\xE5\x89\x83",		"\xCC\xEB" => "\xE5\xB1\x89",		"\xCC\xEC" => "\xE5\xA4\xA9",		"\xCC\xED" => "\xE6\xB7\xBB",		"\xCC\xEE" => "\xE5\xA1\xAB",		"\xCC\xEF" => "\xE7\x94\xB0",		"\xCC\xF0" => "\xE7\x94\x9C",		"\xCC\xF1" => "\xE6\x81\xAC",		"\xCC\xF2" => "\xE8\x88\x94",		"\xCC\xF3" => "\xE8\x85\x86",		"\xCC\xF4" => "\xE6\x8C\x91",		"\xCC\xF5" => "\xE6\x9D\xA1",		"\xCC\xF6" => "\xE8\xBF\xA2",		"\xCC\xF7" => "\xE7\x9C\xBA",		"\xCC\xF8" => "\xE8\xB7\xB3",		"\xCC\xF9" => "\xE8\xB4\xB4",		"\xCC\xFA" => "\xE9\x93\x81",		"\xCC\xFB" => "\xE5\xB8\x96",		"\xCC\xFC" => "\xE5\x8E\x85",		"\xCC\xFD" => "\xE5\x90\xAC",		"\xCC\xFE" => "\xE7\x83\x83",		"\xCD\xA1" => "\xE6\xB1\x80",		"\xCD\xA2" => "\xE5\xBB\xB7",		"\xCD\xA3" => "\xE5\x81\x9C",		"\xCD\xA4" => "\xE4\xBA\xAD",		"\xCD\xA5" => "\xE5\xBA\xAD",		"\xCD\xA6" => "\xE6\x8C\xBA",		"\xCD\xA7" => "\xE8\x89\x87",		"\xCD\xA8" => "\xE9\x80\x9A",		"\xCD\xA9" => "\xE6\xA1\x90",		"\xCD\xAA" => "\xE9\x85\xAE",		"\xCD\xAB" => "\xE7\x9E\xB3",		"\xCD\xAC" => "\xE5\x90\x8C",		"\xCD\xAD" => "\xE9\x93\x9C",		"\xCD\xAE" => "\xE5\xBD\xA4",		"\xCD\xAF" => "\xE7\xAB\xA5",		"\xCD\xB0" => "\xE6\xA1\xB6",		"\xCD\xB1" => "\xE6\x8D\x85",		"\xCD\xB2" => "\xE7\xAD\x92",		"\xCD\xB3" => "\xE7\xBB\x9F",		"\xCD\xB4" => "\xE7\x97\x9B",		"\xCD\xB5" => "\xE5\x81\xB7",		"\xCD\xB6" => "\xE6\x8A\x95",		"\xCD\xB7" => "\xE5\xA4\xB4",		"\xCD\xB8" => "\xE9\x80\x8F",		"\xCD\xB9" => "\xE5\x87\xB8",		"\xCD\xBA" => "\xE7\xA7\x83",		"\xCD\xBB" => "\xE7\xAA\x81",		"\xCD\xBC" => "\xE5\x9B\xBE",		"\xCD\xBD" => "\xE5\xBE\x92",		"\xCD\xBE" => "\xE9\x80\x94",		"\xCD\xBF" => "\xE6\xB6\x82",		"\xCD\xC0" => "\xE5\xB1\xA0",		"\xCD\xC1" => "\xE5\x9C\x9F",		"\xCD\xC2" => "\xE5\x90\x90",		"\xCD\xC3" => "\xE5\x85\x94",		"\xCD\xC4" => "\xE6\xB9\x8D",		"\xCD\xC5" => "\xE5\x9B\xA2",		"\xCD\xC6" => "\xE6\x8E\xA8",		"\xCD\xC7" => "\xE9\xA2\x93",		"\xCD\xC8" => "\xE8\x85\xBF",		"\xCD\xC9" => "\xE8\x9C\x95",		"\xCD\xCA" => "\xE8\xA4\xAA",		"\xCD\xCB" => "\xE9\x80\x80",		"\xCD\xCC" => "\xE5\x90\x9E",		"\xCD\xCD" => "\xE5\xB1\xAF",		"\xCD\xCE" => "\xE8\x87\x80",		"\xCD\xCF" => "\xE6\x8B\x96",		"\xCD\xD0" => "\xE6\x89\x98",		"\xCD\xD1" => "\xE8\x84\xB1",		"\xCD\xD2" => "\xE9\xB8\xB5",		"\xCD\xD3" => "\xE9\x99\x80",		"\xCD\xD4" => "\xE9\xA9\xAE",		"\xCD\xD5" => "\xE9\xA9\xBC",		"\xCD\xD6" => "\xE6\xA4\xAD",		"\xCD\xD7" => "\xE5\xA6\xA5",		"\xCD\xD8" => "\xE6\x8B\x93",		"\xCD\xD9" => "\xE5\x94\xBE",		"\xCD\xDA" => "\xE6\x8C\x96",		"\xCD\xDB" => "\xE5\x93\x87",		"\xCD\xDC" => "\xE8\x9B\x99",		"\xCD\xDD" => "\xE6\xB4\xBC",		"\xCD\xDE" => "\xE5\xA8\x83",		"\xCD\xDF" => "\xE7\x93\xA6",		"\xCD\xE0" => "\xE8\xA2\x9C",		"\xCD\xE1" => "\xE6\xAD\xAA",		"\xCD\xE2" => "\xE5\xA4\x96",		"\xCD\xE3" => "\xE8\xB1\x8C",		"\xCD\xE4" => "\xE5\xBC\xAF",		"\xCD\xE5" => "\xE6\xB9\xBE",		"\xCD\xE6" => "\xE7\x8E\xA9",		"\xCD\xE7" => "\xE9\xA1\xBD",		"\xCD\xE8" => "\xE4\xB8\xB8",		"\xCD\xE9" => "\xE7\x83\xB7",		"\xCD\xEA" => "\xE5\xAE\x8C",		"\xCD\xEB" => "\xE7\xA2\x97",		"\xCD\xEC" => "\xE6\x8C\xBD",		"\xCD\xED" => "\xE6\x99\x9A",		"\xCD\xEE" => "\xE7\x9A\x96",		"\xCD\xEF" => "\xE6\x83\x8B",		"\xCD\xF0" => "\xE5\xAE\x9B",		"\xCD\xF1" => "\xE5\xA9\x89",		"\xCD\xF2" => "\xE4\xB8\x87",		"\xCD\xF3" => "\xE8\x85\x95",		"\xCD\xF4" => "\xE6\xB1\xAA",		"\xCD\xF5" => "\xE7\x8E\x8B",		"\xCD\xF6" => "\xE4\xBA\xA1",		"\xCD\xF7" => "\xE6\x9E\x89",		"\xCD\xF8" => "\xE7\xBD\x91",		"\xCD\xF9" => "\xE5\xBE\x80",		"\xCD\xFA" => "\xE6\x97\xBA",		"\xCD\xFB" => "\xE6\x9C\x9B",		"\xCD\xFC" => "\xE5\xBF\x98",		"\xCD\xFD" => "\xE5\xA6\x84",		"\xCD\xFE" => "\xE5\xA8\x81",		"\xCE\xA1" => "\xE5\xB7\x8D",		"\xCE\xA2" => "\xE5\xBE\xAE",		"\xCE\xA3" => "\xE5\x8D\xB1",		"\xCE\xA4" => "\xE9\x9F\xA6",		"\xCE\xA5" => "\xE8\xBF\x9D",		"\xCE\xA6" => "\xE6\xA1\x85",		"\xCE\xA7" => "\xE5\x9B\xB4",		"\xCE\xA8" => "\xE5\x94\xAF",		"\xCE\xA9" => "\xE6\x83\x9F",		"\xCE\xAA" => "\xE4\xB8\xBA",		"\xCE\xAB" => "\xE6\xBD\x8D",		"\xCE\xAC" => "\xE7\xBB\xB4",		"\xCE\xAD" => "\xE8\x8B\x87",		"\xCE\xAE" => "\xE8\x90\x8E",		"\xCE\xAF" => "\xE5\xA7\x94",		"\xCE\xB0" => "\xE4\xBC\x9F",		"\xCE\xB1" => "\xE4\xBC\xAA",		"\xCE\xB2" => "\xE5\xB0\xBE",		"\xCE\xB3" => "\xE7\xBA\xAC",		"\xCE\xB4" => "\xE6\x9C\xAA",		"\xCE\xB5" => "\xE8\x94\x9A",		"\xCE\xB6" => "\xE5\x91\xB3",		"\xCE\xB7" => "\xE7\x95\x8F",		"\xCE\xB8" => "\xE8\x83\x83",		"\xCE\xB9" => "\xE5\x96\x82",		"\xCE\xBA" => "\xE9\xAD\x8F",		"\xCE\xBB" => "\xE4\xBD\x8D",		"\xCE\xBC" => "\xE6\xB8\xAD",		"\xCE\xBD" => "\xE8\xB0\x93",		"\xCE\xBE" => "\xE5\xB0\x89",		"\xCE\xBF" => "\xE6\x85\xB0",		"\xCE\xC0" => "\xE5\x8D\xAB",		"\xCE\xC1" => "\xE7\x98\x9F",		"\xCE\xC2" => "\xE6\xB8\xA9",		"\xCE\xC3" => "\xE8\x9A\x8A",		"\xCE\xC4" => "\xE6\x96\x87",		"\xCE\xC5" => "\xE9\x97\xBB",		"\xCE\xC6" => "\xE7\xBA\xB9",		"\xCE\xC7" => "\xE5\x90\xBB",		"\xCE\xC8" => "\xE7\xA8\xB3",		"\xCE\xC9" => "\xE7\xB4\x8A",		"\xCE\xCA" => "\xE9\x97\xAE",		"\xCE\xCB" => "\xE5\x97\xA1",		"\xCE\xCC" => "\xE7\xBF\x81",		"\xCE\xCD" => "\xE7\x93\xAE",		"\xCE\xCE" => "\xE6\x8C\x9D",		"\xCE\xCF" => "\xE8\x9C\x97",		"\xCE\xD0" => "\xE6\xB6\xA1",		"\xCE\xD1" => "\xE7\xAA\x9D",		"\xCE\xD2" => "\xE6\x88\x91",		"\xCE\xD3" => "\xE6\x96\xA1",		"\xCE\xD4" => "\xE5\x8D\xA7",		"\xCE\xD5" => "\xE6\x8F\xA1",		"\xCE\xD6" => "\xE6\xB2\x83",		"\xCE\xD7" => "\xE5\xB7\xAB",		"\xCE\xD8" => "\xE5\x91\x9C",		"\xCE\xD9" => "\xE9\x92\xA8",		"\xCE\xDA" => "\xE4\xB9\x8C",		"\xCE\xDB" => "\xE6\xB1\xA1",		"\xCE\xDC" => "\xE8\xAF\xAC",		"\xCE\xDD" => "\xE5\xB1\x8B",		"\xCE\xDE" => "\xE6\x97\xA0",		"\xCE\xDF" => "\xE8\x8A\x9C",		"\xCE\xE0" => "\xE6\xA2\xA7",		"\xCE\xE1" => "\xE5\x90\xBE",		"\xCE\xE2" => "\xE5\x90\xB4",		"\xCE\xE3" => "\xE6\xAF\x8B",		"\xCE\xE4" => "\xE6\xAD\xA6",		"\xCE\xE5" => "\xE4\xBA\x94",		"\xCE\xE6" => "\xE6\x8D\x82",		"\xCE\xE7" => "\xE5\x8D\x88",		"\xCE\xE8" => "\xE8\x88\x9E",		"\xCE\xE9" => "\xE4\xBC\x8D",		"\xCE\xEA" => "\xE4\xBE\xAE",		"\xCE\xEB" => "\xE5\x9D\x9E",		"\xCE\xEC" => "\xE6\x88\x8A",		"\xCE\xED" => "\xE9\x9B\xBE",		"\xCE\xEE" => "\xE6\x99\xA4",		"\xCE\xEF" => "\xE7\x89\xA9",		"\xCE\xF0" => "\xE5\x8B\xBF",		"\xCE\xF1" => "\xE5\x8A\xA1",		"\xCE\xF2" => "\xE6\x82\x9F",		"\xCE\xF3" => "\xE8\xAF\xAF",		"\xCE\xF4" => "\xE6\x98\x94",		"\xCE\xF5" => "\xE7\x86\x99",		"\xCE\xF6" => "\xE6\x9E\x90",		"\xCE\xF7" => "\xE8\xA5\xBF",		"\xCE\xF8" => "\xE7\xA1\x92",		"\xCE\xF9" => "\xE7\x9F\xBD",		"\xCE\xFA" => "\xE6\x99\xB0",		"\xCE\xFB" => "\xE5\x98\xBB",		"\xCE\xFC" => "\xE5\x90\xB8",		"\xCE\xFD" => "\xE9\x94\xA1",		"\xCE\xFE" => "\xE7\x89\xBA",		"\xCF\xA1" => "\xE7\xA8\x80",		"\xCF\xA2" => "\xE6\x81\xAF",		"\xCF\xA3" => "\xE5\xB8\x8C",		"\xCF\xA4" => "\xE6\x82\x89",		"\xCF\xA5" => "\xE8\x86\x9D",		"\xCF\xA6" => "\xE5\xA4\x95",		"\xCF\xA7" => "\xE6\x83\x9C",		"\xCF\xA8" => "\xE7\x86\x84",		"\xCF\xA9" => "\xE7\x83\xAF",		"\xCF\xAA" => "\xE6\xBA\xAA",		"\xCF\xAB" => "\xE6\xB1\x90",		"\xCF\xAC" => "\xE7\x8A\x80",		"\xCF\xAD" => "\xE6\xAA\x84",		"\xCF\xAE" => "\xE8\xA2\xAD",		"\xCF\xAF" => "\xE5\xB8\xAD",		"\xCF\xB0" => "\xE4\xB9\xA0",		"\xCF\xB1" => "\xE5\xAA\xB3",		"\xCF\xB2" => "\xE5\x96\x9C",		"\xCF\xB3" => "\xE9\x93\xA3",		"\xCF\xB4" => "\xE6\xB4\x97",		"\xCF\xB5" => "\xE7\xB3\xBB",		"\xCF\xB6" => "\xE9\x9A\x99",		"\xCF\xB7" => "\xE6\x88\x8F",		"\xCF\xB8" => "\xE7\xBB\x86",		"\xCF\xB9" => "\xE7\x9E\x8E",		"\xCF\xBA" => "\xE8\x99\xBE",		"\xCF\xBB" => "\xE5\x8C\xA3",		"\xCF\xBC" => "\xE9\x9C\x9E",		"\xCF\xBD" => "\xE8\xBE\x96",		"\xCF\xBE" => "\xE6\x9A\x87",		"\xCF\xBF" => "\xE5\xB3\xA1",		"\xCF\xC0" => "\xE4\xBE\xA0",		"\xCF\xC1" => "\xE7\x8B\xAD",		"\xCF\xC2" => "\xE4\xB8\x8B",		"\xCF\xC3" => "\xE5\x8E\xA6",		"\xCF\xC4" => "\xE5\xA4\x8F",		"\xCF\xC5" => "\xE5\x90\x93",		"\xCF\xC6" => "\xE6\x8E\x80",		"\xCF\xC7" => "\xE9\x94\xA8",		"\xCF\xC8" => "\xE5\x85\x88",		"\xCF\xC9" => "\xE4\xBB\x99",		"\xCF\xCA" => "\xE9\xB2\x9C",		"\xCF\xCB" => "\xE7\xBA\xA4",		"\xCF\xCC" => "\xE5\x92\xB8",		"\xCF\xCD" => "\xE8\xB4\xA4",		"\xCF\xCE" => "\xE8\xA1\x94",		"\xCF\xCF" => "\xE8\x88\xB7",		"\xCF\xD0" => "\xE9\x97\xB2",		"\xCF\xD1" => "\xE6\xB6\x8E",		"\xCF\xD2" => "\xE5\xBC\xA6",		"\xCF\xD3" => "\xE5\xAB\x8C",		"\xCF\xD4" => "\xE6\x98\xBE",		"\xCF\xD5" => "\xE9\x99\xA9",		"\xCF\xD6" => "\xE7\x8E\xB0",		"\xCF\xD7" => "\xE7\x8C\xAE",		"\xCF\xD8" => "\xE5\x8E\xBF",		"\xCF\xD9" => "\xE8\x85\xBA",		"\xCF\xDA" => "\xE9\xA6\x85",		"\xCF\xDB" => "\xE7\xBE\xA1",		"\xCF\xDC" => "\xE5\xAE\xAA",		"\xCF\xDD" => "\xE9\x99\xB7",		"\xCF\xDE" => "\xE9\x99\x90",		"\xCF\xDF" => "\xE7\xBA\xBF",		"\xCF\xE0" => "\xE7\x9B\xB8",		"\xCF\xE1" => "\xE5\x8E\xA2",		"\xCF\xE2" => "\xE9\x95\xB6",		"\xCF\xE3" => "\xE9\xA6\x99",		"\xCF\xE4" => "\xE7\xAE\xB1",		"\xCF\xE5" => "\xE8\xA5\x84",		"\xCF\xE6" => "\xE6\xB9\x98",		"\xCF\xE7" => "\xE4\xB9\xA1",		"\xCF\xE8" => "\xE7\xBF\x94",		"\xCF\xE9" => "\xE7\xA5\xA5",		"\xCF\xEA" => "\xE8\xAF\xA6",		"\xCF\xEB" => "\xE6\x83\xB3",		"\xCF\xEC" => "\xE5\x93\x8D",		"\xCF\xED" => "\xE4\xBA\xAB",		"\xCF\xEE" => "\xE9\xA1\xB9",		"\xCF\xEF" => "\xE5\xB7\xB7",		"\xCF\xF0" => "\xE6\xA9\xA1",		"\xCF\xF1" => "\xE5\x83\x8F",		"\xCF\xF2" => "\xE5\x90\x91",		"\xCF\xF3" => "\xE8\xB1\xA1",		"\xCF\xF4" => "\xE8\x90\xA7",		"\xCF\xF5" => "\xE7\xA1\x9D",		"\xCF\xF6" => "\xE9\x9C\x84",		"\xCF\xF7" => "\xE5\x89\x8A",		"\xCF\xF8" => "\xE5\x93\xAE",		"\xCF\xF9" => "\xE5\x9A\xA3",		"\xCF\xFA" => "\xE9\x94\x80",		"\xCF\xFB" => "\xE6\xB6\x88",		"\xCF\xFC" => "\xE5\xAE\xB5",		"\xCF\xFD" => "\xE6\xB7\x86",		"\xCF\xFE" => "\xE6\x99\x93",		"\xD0\xA1" => "\xE5\xB0\x8F",		"\xD0\xA2" => "\xE5\xAD\x9D",		"\xD0\xA3" => "\xE6\xA0\xA1",		"\xD0\xA4" => "\xE8\x82\x96",		"\xD0\xA5" => "\xE5\x95\xB8",		"\xD0\xA6" => "\xE7\xAC\x91",		"\xD0\xA7" => "\xE6\x95\x88",		"\xD0\xA8" => "\xE6\xA5\x94",		"\xD0\xA9" => "\xE4\xBA\x9B",		"\xD0\xAA" => "\xE6\xAD\x87",		"\xD0\xAB" => "\xE8\x9D\x8E",		"\xD0\xAC" => "\xE9\x9E\x8B",		"\xD0\xAD" => "\xE5\x8D\x8F",		"\xD0\xAE" => "\xE6\x8C\x9F",		"\xD0\xAF" => "\xE6\x90\xBA",		"\xD0\xB0" => "\xE9\x82\xAA",		"\xD0\xB1" => "\xE6\x96\x9C",		"\xD0\xB2" => "\xE8\x83\x81",		"\xD0\xB3" => "\xE8\xB0\x90",		"\xD0\xB4" => "\xE5\x86\x99",		"\xD0\xB5" => "\xE6\xA2\xB0",		"\xD0\xB6" => "\xE5\x8D\xB8",		"\xD0\xB7" => "\xE8\x9F\xB9",		"\xD0\xB8" => "\xE6\x87\x88",		"\xD0\xB9" => "\xE6\xB3\x84",		"\xD0\xBA" => "\xE6\xB3\xBB",		"\xD0\xBB" => "\xE8\xB0\xA2",		"\xD0\xBC" => "\xE5\xB1\x91",		"\xD0\xBD" => "\xE8\x96\xAA",		"\xD0\xBE" => "\xE8\x8A\xAF",		"\xD0\xBF" => "\xE9\x94\x8C",		"\xD0\xC0" => "\xE6\xAC\xA3",		"\xD0\xC1" => "\xE8\xBE\x9B",		"\xD0\xC2" => "\xE6\x96\xB0",		"\xD0\xC3" => "\xE5\xBF\xBB",		"\xD0\xC4" => "\xE5\xBF\x83",		"\xD0\xC5" => "\xE4\xBF\xA1",		"\xD0\xC6" => "\xE8\xA1\x85",		"\xD0\xC7" => "\xE6\x98\x9F",		"\xD0\xC8" => "\xE8\x85\xA5",		"\xD0\xC9" => "\xE7\x8C\xA9",		"\xD0\xCA" => "\xE6\x83\xBA",		"\xD0\xCB" => "\xE5\x85\xB4",		"\xD0\xCC" => "\xE5\x88\x91",		"\xD0\xCD" => "\xE5\x9E\x8B",		"\xD0\xCE" => "\xE5\xBD\xA2",		"\xD0\xCF" => "\xE9\x82\xA2",		"\xD0\xD0" => "\xE8\xA1\x8C",		"\xD0\xD1" => "\xE9\x86\x92",		"\xD0\xD2" => "\xE5\xB9\xB8",		"\xD0\xD3" => "\xE6\x9D\x8F",		"\xD0\xD4" => "\xE6\x80\xA7",		"\xD0\xD5" => "\xE5\xA7\x93",		"\xD0\xD6" => "\xE5\x85\x84",		"\xD0\xD7" => "\xE5\x87\xB6",		"\xD0\xD8" => "\xE8\x83\xB8",		"\xD0\xD9" => "\xE5\x8C\x88",		"\xD0\xDA" => "\xE6\xB1\xB9",		"\xD0\xDB" => "\xE9\x9B\x84",		"\xD0\xDC" => "\xE7\x86\x8A",		"\xD0\xDD" => "\xE4\xBC\x91",		"\xD0\xDE" => "\xE4\xBF\xAE",		"\xD0\xDF" => "\xE7\xBE\x9E",		"\xD0\xE0" => "\xE6\x9C\xBD",		"\xD0\xE1" => "\xE5\x97\x85",		"\xD0\xE2" => "\xE9\x94\x88",		"\xD0\xE3" => "\xE7\xA7\x80",		"\xD0\xE4" => "\xE8\xA2\x96",		"\xD0\xE5" => "\xE7\xBB\xA3",		"\xD0\xE6" => "\xE5\xA2\x9F",		"\xD0\xE7" => "\xE6\x88\x8C",		"\xD0\xE8" => "\xE9\x9C\x80",		"\xD0\xE9" => "\xE8\x99\x9A",		"\xD0\xEA" => "\xE5\x98\x98",		"\xD0\xEB" => "\xE9\xA1\xBB",		"\xD0\xEC" => "\xE5\xBE\x90",		"\xD0\xED" => "\xE8\xAE\xB8",		"\xD0\xEE" => "\xE8\x93\x84",		"\xD0\xEF" => "\xE9\x85\x97",		"\xD0\xF0" => "\xE5\x8F\x99",		"\xD0\xF1" => "\xE6\x97\xAD",		"\xD0\xF2" => "\xE5\xBA\x8F",		"\xD0\xF3" => "\xE7\x95\x9C",		"\xD0\xF4" => "\xE6\x81\xA4",		"\xD0\xF5" => "\xE7\xB5\xAE",		"\xD0\xF6" => "\xE5\xA9\xBF",		"\xD0\xF7" => "\xE7\xBB\xAA",		"\xD0\xF8" => "\xE7\xBB\xAD",		"\xD0\xF9" => "\xE8\xBD\xA9",		"\xD0\xFA" => "\xE5\x96\xA7",		"\xD0\xFB" => "\xE5\xAE\xA3",		"\xD0\xFC" => "\xE6\x82\xAC",		"\xD0\xFD" => "\xE6\x97\x8B",		"\xD0\xFE" => "\xE7\x8E\x84",		"\xD1\xA1" => "\xE9\x80\x89",		"\xD1\xA2" => "\xE7\x99\xA3",		"\xD1\xA3" => "\xE7\x9C\xA9",		"\xD1\xA4" => "\xE7\xBB\x9A",		"\xD1\xA5" => "\xE9\x9D\xB4",		"\xD1\xA6" => "\xE8\x96\x9B",		"\xD1\xA7" => "\xE5\xAD\xA6",		"\xD1\xA8" => "\xE7\xA9\xB4",		"\xD1\xA9" => "\xE9\x9B\xAA",		"\xD1\xAA" => "\xE8\xA1\x80",		"\xD1\xAB" => "\xE5\x8B\x8B",		"\xD1\xAC" => "\xE7\x86\x8F",		"\xD1\xAD" => "\xE5\xBE\xAA",		"\xD1\xAE" => "\xE6\x97\xAC",		"\xD1\xAF" => "\xE8\xAF\xA2",		"\xD1\xB0" => "\xE5\xAF\xBB",		"\xD1\xB1" => "\xE9\xA9\xAF",		"\xD1\xB2" => "\xE5\xB7\xA1",		"\xD1\xB3" => "\xE6\xAE\x89",		"\xD1\xB4" => "\xE6\xB1\x9B",		"\xD1\xB5" => "\xE8\xAE\xAD",		"\xD1\xB6" => "\xE8\xAE\xAF",		"\xD1\xB7" => "\xE9\x80\x8A",		"\xD1\xB8" => "\xE8\xBF\x85",		"\xD1\xB9" => "\xE5\x8E\x8B",		"\xD1\xBA" => "\xE6\x8A\xBC",		"\xD1\xBB" => "\xE9\xB8\xA6",		"\xD1\xBC" => "\xE9\xB8\xAD",		"\xD1\xBD" => "\xE5\x91\x80",		"\xD1\xBE" => "\xE4\xB8\xAB",		"\xD1\xBF" => "\xE8\x8A\xBD",		"\xD1\xC0" => "\xE7\x89\x99",		"\xD1\xC1" => "\xE8\x9A\x9C",		"\xD1\xC2" => "\xE5\xB4\x96",		"\xD1\xC3" => "\xE8\xA1\x99",		"\xD1\xC4" => "\xE6\xB6\xAF",		"\xD1\xC5" => "\xE9\x9B\x85",		"\xD1\xC6" => "\xE5\x93\x91",		"\xD1\xC7" => "\xE4\xBA\x9A",		"\xD1\xC8" => "\xE8\xAE\xB6",		"\xD1\xC9" => "\xE7\x84\x89",		"\xD1\xCA" => "\xE5\x92\xBD",		"\xD1\xCB" => "\xE9\x98\x89",		"\xD1\xCC" => "\xE7\x83\x9F",		"\xD1\xCD" => "\xE6\xB7\xB9",		"\xD1\xCE" => "\xE7\x9B\x90",		"\xD1\xCF" => "\xE4\xB8\xA5",		"\xD1\xD0" => "\xE7\xA0\x94",		"\xD1\xD1" => "\xE8\x9C\x92",		"\xD1\xD2" => "\xE5\xB2\xA9",		"\xD1\xD3" => "\xE5\xBB\xB6",		"\xD1\xD4" => "\xE8\xA8\x80",		"\xD1\xD5" => "\xE9\xA2\x9C",		"\xD1\xD6" => "\xE9\x98\x8E",		"\xD1\xD7" => "\xE7\x82\x8E",		"\xD1\xD8" => "\xE6\xB2\xBF",		"\xD1\xD9" => "\xE5\xA5\x84",		"\xD1\xDA" => "\xE6\x8E\xA9",		"\xD1\xDB" => "\xE7\x9C\xBC",		"\xD1\xDC" => "\xE8\xA1\x8D",		"\xD1\xDD" => "\xE6\xBC\x94",		"\xD1\xDE" => "\xE8\x89\xB3",		"\xD1\xDF" => "\xE5\xA0\xB0",		"\xD1\xE0" => "\xE7\x87\x95",		"\xD1\xE1" => "\xE5\x8E\x8C",		"\xD1\xE2" => "\xE7\xA0\x9A",		"\xD1\xE3" => "\xE9\x9B\x81",		"\xD1\xE4" => "\xE5\x94\x81",		"\xD1\xE5" => "\xE5\xBD\xA6",		"\xD1\xE6" => "\xE7\x84\xB0",		"\xD1\xE7" => "\xE5\xAE\xB4",		"\xD1\xE8" => "\xE8\xB0\x9A",		"\xD1\xE9" => "\xE9\xAA\x8C",		"\xD1\xEA" => "\xE6\xAE\x83",		"\xD1\xEB" => "\xE5\xA4\xAE",		"\xD1\xEC" => "\xE9\xB8\xAF",		"\xD1\xED" => "\xE7\xA7\xA7",		"\xD1\xEE" => "\xE6\x9D\xA8",		"\xD1\xEF" => "\xE6\x89\xAC",		"\xD1\xF0" => "\xE4\xBD\xAF",		"\xD1\xF1" => "\xE7\x96\xA1",		"\xD1\xF2" => "\xE7\xBE\x8A",		"\xD1\xF3" => "\xE6\xB4\x8B",		"\xD1\xF4" => "\xE9\x98\xB3",		"\xD1\xF5" => "\xE6\xB0\xA7",		"\xD1\xF6" => "\xE4\xBB\xB0",		"\xD1\xF7" => "\xE7\x97\x92",		"\xD1\xF8" => "\xE5\x85\xBB",		"\xD1\xF9" => "\xE6\xA0\xB7",		"\xD1\xFA" => "\xE6\xBC\xBE",		"\xD1\xFB" => "\xE9\x82\x80",		"\xD1\xFC" => "\xE8\x85\xB0",		"\xD1\xFD" => "\xE5\xA6\x96",		"\xD1\xFE" => "\xE7\x91\xB6",		"\xD2\xA1" => "\xE6\x91\x87",		"\xD2\xA2" => "\xE5\xB0\xA7",		"\xD2\xA3" => "\xE9\x81\xA5",		"\xD2\xA4" => "\xE7\xAA\x91",		"\xD2\xA5" => "\xE8\xB0\xA3",		"\xD2\xA6" => "\xE5\xA7\x9A",		"\xD2\xA7" => "\xE5\x92\xAC",		"\xD2\xA8" => "\xE8\x88\x80",		"\xD2\xA9" => "\xE8\x8D\xAF",		"\xD2\xAA" => "\xE8\xA6\x81",		"\xD2\xAB" => "\xE8\x80\x80",		"\xD2\xAC" => "\xE6\xA4\xB0",		"\xD2\xAD" => "\xE5\x99\x8E",		"\xD2\xAE" => "\xE8\x80\xB6",		"\xD2\xAF" => "\xE7\x88\xB7",		"\xD2\xB0" => "\xE9\x87\x8E",		"\xD2\xB1" => "\xE5\x86\xB6",		"\xD2\xB2" => "\xE4\xB9\x9F",		"\xD2\xB3" => "\xE9\xA1\xB5",		"\xD2\xB4" => "\xE6\x8E\x96",		"\xD2\xB5" => "\xE4\xB8\x9A",		"\xD2\xB6" => "\xE5\x8F\xB6",		"\xD2\xB7" => "\xE6\x9B\xB3",		"\xD2\xB8" => "\xE8\x85\x8B",		"\xD2\xB9" => "\xE5\xA4\x9C",		"\xD2\xBA" => "\xE6\xB6\xB2",		"\xD2\xBB" => "\xE4\xB8\x80",		"\xD2\xBC" => "\xE5\xA3\xB9",		"\xD2\xBD" => "\xE5\x8C\xBB",		"\xD2\xBE" => "\xE6\x8F\x96",		"\xD2\xBF" => "\xE9\x93\xB1",		"\xD2\xC0" => "\xE4\xBE\x9D",		"\xD2\xC1" => "\xE4\xBC\x8A",		"\xD2\xC2" => "\xE8\xA1\xA3",		"\xD2\xC3" => "\xE9\xA2\x90",		"\xD2\xC4" => "\xE5\xA4\xB7",		"\xD2\xC5" => "\xE9\x81\x97",		"\xD2\xC6" => "\xE7\xA7\xBB",		"\xD2\xC7" => "\xE4\xBB\xAA",		"\xD2\xC8" => "\xE8\x83\xB0",		"\xD2\xC9" => "\xE7\x96\x91",		"\xD2\xCA" => "\xE6\xB2\x82",		"\xD2\xCB" => "\xE5\xAE\x9C",		"\xD2\xCC" => "\xE5\xA7\xA8",		"\xD2\xCD" => "\xE5\xBD\x9D",		"\xD2\xCE" => "\xE6\xA4\x85",		"\xD2\xCF" => "\xE8\x9A\x81",		"\xD2\xD0" => "\xE5\x80\x9A",		"\xD2\xD1" => "\xE5\xB7\xB2",		"\xD2\xD2" => "\xE4\xB9\x99",		"\xD2\xD3" => "\xE7\x9F\xA3",		"\xD2\xD4" => "\xE4\xBB\xA5",		"\xD2\xD5" => "\xE8\x89\xBA",		"\xD2\xD6" => "\xE6\x8A\x91",		"\xD2\xD7" => "\xE6\x98\x93",		"\xD2\xD8" => "\xE9\x82\x91",		"\xD2\xD9" => "\xE5\xB1\xB9",		"\xD2\xDA" => "\xE4\xBA\xBF",		"\xD2\xDB" => "\xE5\xBD\xB9",		"\xD2\xDC" => "\xE8\x87\x86",		"\xD2\xDD" => "\xE9\x80\xB8",		"\xD2\xDE" => "\xE8\x82\x84",		"\xD2\xDF" => "\xE7\x96\xAB",		"\xD2\xE0" => "\xE4\xBA\xA6",		"\xD2\xE1" => "\xE8\xA3\x94",		"\xD2\xE2" => "\xE6\x84\x8F",		"\xD2\xE3" => "\xE6\xAF\x85",		"\xD2\xE4" => "\xE5\xBF\x86",		"\xD2\xE5" => "\xE4\xB9\x89",		"\xD2\xE6" => "\xE7\x9B\x8A",		"\xD2\xE7" => "\xE6\xBA\xA2",		"\xD2\xE8" => "\xE8\xAF\xA3",		"\xD2\xE9" => "\xE8\xAE\xAE",		"\xD2\xEA" => "\xE8\xB0\x8A",		"\xD2\xEB" => "\xE8\xAF\x91",		"\xD2\xEC" => "\xE5\xBC\x82",		"\xD2\xED" => "\xE7\xBF\xBC",		"\xD2\xEE" => "\xE7\xBF\x8C",		"\xD2\xEF" => "\xE7\xBB\x8E",		"\xD2\xF0" => "\xE8\x8C\xB5",		"\xD2\xF1" => "\xE8\x8D\xAB",		"\xD2\xF2" => "\xE5\x9B\xA0",		"\xD2\xF3" => "\xE6\xAE\xB7",		"\xD2\xF4" => "\xE9\x9F\xB3",		"\xD2\xF5" => "\xE9\x98\xB4",		"\xD2\xF6" => "\xE5\xA7\xBB",		"\xD2\xF7" => "\xE5\x90\x9F",		"\xD2\xF8" => "\xE9\x93\xB6",		"\xD2\xF9" => "\xE6\xB7\xAB",		"\xD2\xFA" => "\xE5\xAF\x85",		"\xD2\xFB" => "\xE9\xA5\xAE",		"\xD2\xFC" => "\xE5\xB0\xB9",		"\xD2\xFD" => "\xE5\xBC\x95",		"\xD2\xFE" => "\xE9\x9A\x90",		"\xD3\xA1" => "\xE5\x8D\xB0",		"\xD3\xA2" => "\xE8\x8B\xB1",		"\xD3\xA3" => "\xE6\xA8\xB1",		"\xD3\xA4" => "\xE5\xA9\xB4",		"\xD3\xA5" => "\xE9\xB9\xB0",		"\xD3\xA6" => "\xE5\xBA\x94",		"\xD3\xA7" => "\xE7\xBC\xA8",		"\xD3\xA8" => "\xE8\x8E\xB9",		"\xD3\xA9" => "\xE8\x90\xA4",		"\xD3\xAA" => "\xE8\x90\xA5",		"\xD3\xAB" => "\xE8\x8D\xA7",		"\xD3\xAC" => "\xE8\x9D\x87",		"\xD3\xAD" => "\xE8\xBF\x8E",		"\xD3\xAE" => "\xE8\xB5\xA2",		"\xD3\xAF" => "\xE7\x9B\x88",		"\xD3\xB0" => "\xE5\xBD\xB1",		"\xD3\xB1" => "\xE9\xA2\x96",		"\xD3\xB2" => "\xE7\xA1\xAC",		"\xD3\xB3" => "\xE6\x98\xA0",		"\xD3\xB4" => "\xE5\x93\x9F",		"\xD3\xB5" => "\xE6\x8B\xA5",		"\xD3\xB6" => "\xE4\xBD\xA3",		"\xD3\xB7" => "\xE8\x87\x83",		"\xD3\xB8" => "\xE7\x97\x88",		"\xD3\xB9" => "\xE5\xBA\xB8",		"\xD3\xBA" => "\xE9\x9B\x8D",		"\xD3\xBB" => "\xE8\xB8\x8A",		"\xD3\xBC" => "\xE8\x9B\xB9",		"\xD3\xBD" => "\xE5\x92\x8F",		"\xD3\xBE" => "\xE6\xB3\xB3",		"\xD3\xBF" => "\xE6\xB6\x8C",		"\xD3\xC0" => "\xE6\xB0\xB8",		"\xD3\xC1" => "\xE6\x81\xBF",		"\xD3\xC2" => "\xE5\x8B\x87",		"\xD3\xC3" => "\xE7\x94\xA8",		"\xD3\xC4" => "\xE5\xB9\xBD",		"\xD3\xC5" => "\xE4\xBC\x98",		"\xD3\xC6" => "\xE6\x82\xA0",		"\xD3\xC7" => "\xE5\xBF\xA7",		"\xD3\xC8" => "\xE5\xB0\xA4",		"\xD3\xC9" => "\xE7\x94\xB1",		"\xD3\xCA" => "\xE9\x82\xAE",		"\xD3\xCB" => "\xE9\x93\x80",		"\xD3\xCC" => "\xE7\x8A\xB9",		"\xD3\xCD" => "\xE6\xB2\xB9",		"\xD3\xCE" => "\xE6\xB8\xB8",		"\xD3\xCF" => "\xE9\x85\x89",		"\xD3\xD0" => "\xE6\x9C\x89",		"\xD3\xD1" => "\xE5\x8F\x8B",		"\xD3\xD2" => "\xE5\x8F\xB3",		"\xD3\xD3" => "\xE4\xBD\x91",		"\xD3\xD4" => "\xE9\x87\x89",		"\xD3\xD5" => "\xE8\xAF\xB1",		"\xD3\xD6" => "\xE5\x8F\x88",		"\xD3\xD7" => "\xE5\xB9\xBC",		"\xD3\xD8" => "\xE8\xBF\x82",		"\xD3\xD9" => "\xE6\xB7\xA4",		"\xD3\xDA" => "\xE4\xBA\x8E",		"\xD3\xDB" => "\xE7\x9B\x82",		"\xD3\xDC" => "\xE6\xA6\x86",		"\xD3\xDD" => "\xE8\x99\x9E",		"\xD3\xDE" => "\xE6\x84\x9A",		"\xD3\xDF" => "\xE8\x88\x86",		"\xD3\xE0" => "\xE4\xBD\x99",		"\xD3\xE1" => "\xE4\xBF\x9E",		"\xD3\xE2" => "\xE9\x80\xBE",		"\xD3\xE3" => "\xE9\xB1\xBC",		"\xD3\xE4" => "\xE6\x84\x89",		"\xD3\xE5" => "\xE6\xB8\x9D",		"\xD3\xE6" => "\xE6\xB8\x94",		"\xD3\xE7" => "\xE9\x9A\x85",		"\xD3\xE8" => "\xE4\xBA\x88",		"\xD3\xE9" => "\xE5\xA8\xB1",		"\xD3\xEA" => "\xE9\x9B\xA8",		"\xD3\xEB" => "\xE4\xB8\x8E",		"\xD3\xEC" => "\xE5\xB1\xBF",		"\xD3\xED" => "\xE7\xA6\xB9",		"\xD3\xEE" => "\xE5\xAE\x87",		"\xD3\xEF" => "\xE8\xAF\xAD",		"\xD3\xF0" => "\xE7\xBE\xBD",		"\xD3\xF1" => "\xE7\x8E\x89",		"\xD3\xF2" => "\xE5\x9F\x9F",		"\xD3\xF3" => "\xE8\x8A\x8B",		"\xD3\xF4" => "\xE9\x83\x81",		"\xD3\xF5" => "\xE5\x90\x81",		"\xD3\xF6" => "\xE9\x81\x87",		"\xD3\xF7" => "\xE5\x96\xBB",		"\xD3\xF8" => "\xE5\xB3\xAA",		"\xD3\xF9" => "\xE5\xBE\xA1",		"\xD3\xFA" => "\xE6\x84\x88",		"\xD3\xFB" => "\xE6\xAC\xB2",		"\xD3\xFC" => "\xE7\x8B\xB1",		"\xD3\xFD" => "\xE8\x82\xB2",		"\xD3\xFE" => "\xE8\xAA\x89",		"\xD4\xA1" => "\xE6\xB5\xB4",		"\xD4\xA2" => "\xE5\xAF\x93",		"\xD4\xA3" => "\xE8\xA3\x95",		"\xD4\xA4" => "\xE9\xA2\x84",		"\xD4\xA5" => "\xE8\xB1\xAB",		"\xD4\xA6" => "\xE9\xA9\xAD",		"\xD4\xA7" => "\xE9\xB8\xB3",		"\xD4\xA8" => "\xE6\xB8\x8A",		"\xD4\xA9" => "\xE5\x86\xA4",		"\xD4\xAA" => "\xE5\x85\x83",		"\xD4\xAB" => "\xE5\x9E\xA3",		"\xD4\xAC" => "\xE8\xA2\x81",		"\xD4\xAD" => "\xE5\x8E\x9F",		"\xD4\xAE" => "\xE6\x8F\xB4",		"\xD4\xAF" => "\xE8\xBE\x95",		"\xD4\xB0" => "\xE5\x9B\xAD",		"\xD4\xB1" => "\xE5\x91\x98",		"\xD4\xB2" => "\xE5\x9C\x86",		"\xD4\xB3" => "\xE7\x8C\xBF",		"\xD4\xB4" => "\xE6\xBA\x90",		"\xD4\xB5" => "\xE7\xBC\x98",		"\xD4\xB6" => "\xE8\xBF\x9C",		"\xD4\xB7" => "\xE8\x8B\x91",		"\xD4\xB8" => "\xE6\x84\xBF",		"\xD4\xB9" => "\xE6\x80\xA8",		"\xD4\xBA" => "\xE9\x99\xA2",		"\xD4\xBB" => "\xE6\x9B\xB0",		"\xD4\xBC" => "\xE7\xBA\xA6",		"\xD4\xBD" => "\xE8\xB6\x8A",		"\xD4\xBE" => "\xE8\xB7\x83",		"\xD4\xBF" => "\xE9\x92\xA5",		"\xD4\xC0" => "\xE5\xB2\xB3",		"\xD4\xC1" => "\xE7\xB2\xA4",		"\xD4\xC2" => "\xE6\x9C\x88",		"\xD4\xC3" => "\xE6\x82\xA6",		"\xD4\xC4" => "\xE9\x98\x85",		"\xD4\xC5" => "\xE8\x80\x98",		"\xD4\xC6" => "\xE4\xBA\x91",		"\xD4\xC7" => "\xE9\x83\xA7",		"\xD4\xC8" => "\xE5\x8C\x80",		"\xD4\xC9" => "\xE9\x99\xA8",		"\xD4\xCA" => "\xE5\x85\x81",		"\xD4\xCB" => "\xE8\xBF\x90",		"\xD4\xCC" => "\xE8\x95\xB4",		"\xD4\xCD" => "\xE9\x85\x9D",		"\xD4\xCE" => "\xE6\x99\x95",		"\xD4\xCF" => "\xE9\x9F\xB5",		"\xD4\xD0" => "\xE5\xAD\x95",		"\xD4\xD1" => "\xE5\x8C\x9D",		"\xD4\xD2" => "\xE7\xA0\xB8",		"\xD4\xD3" => "\xE6\x9D\x82",		"\xD4\xD4" => "\xE6\xA0\xBD",		"\xD4\xD5" => "\xE5\x93\x89",		"\xD4\xD6" => "\xE7\x81\xBE",		"\xD4\xD7" => "\xE5\xAE\xB0",		"\xD4\xD8" => "\xE8\xBD\xBD",		"\xD4\xD9" => "\xE5\x86\x8D",		"\xD4\xDA" => "\xE5\x9C\xA8",		"\xD4\xDB" => "\xE5\x92\xB1",		"\xD4\xDC" => "\xE6\x94\x92",		"\xD4\xDD" => "\xE6\x9A\x82",		"\xD4\xDE" => "\xE8\xB5\x9E",		"\xD4\xDF" => "\xE8\xB5\x83",		"\xD4\xE0" => "\xE8\x84\x8F",		"\xD4\xE1" => "\xE8\x91\xAC",		"\xD4\xE2" => "\xE9\x81\xAD",		"\xD4\xE3" => "\xE7\xB3\x9F",		"\xD4\xE4" => "\xE5\x87\xBF",		"\xD4\xE5" => "\xE8\x97\xBB",		"\xD4\xE6" => "\xE6\x9E\xA3",		"\xD4\xE7" => "\xE6\x97\xA9",		"\xD4\xE8" => "\xE6\xBE\xA1",		"\xD4\xE9" => "\xE8\x9A\xA4",		"\xD4\xEA" => "\xE8\xBA\x81",		"\xD4\xEB" => "\xE5\x99\xAA",		"\xD4\xEC" => "\xE9\x80\xA0",		"\xD4\xED" => "\xE7\x9A\x82",		"\xD4\xEE" => "\xE7\x81\xB6",		"\xD4\xEF" => "\xE7\x87\xA5",		"\xD4\xF0" => "\xE8\xB4\xA3",		"\xD4\xF1" => "\xE6\x8B\xA9",		"\xD4\xF2" => "\xE5\x88\x99",		"\xD4\xF3" => "\xE6\xB3\xBD",		"\xD4\xF4" => "\xE8\xB4\xBC",		"\xD4\xF5" => "\xE6\x80\x8E",		"\xD4\xF6" => "\xE5\xA2\x9E",		"\xD4\xF7" => "\xE6\x86\x8E",		"\xD4\xF8" => "\xE6\x9B\xBE",		"\xD4\xF9" => "\xE8\xB5\xA0",		"\xD4\xFA" => "\xE6\x89\x8E",		"\xD4\xFB" => "\xE5\x96\xB3",		"\xD4\xFC" => "\xE6\xB8\xA3",		"\xD4\xFD" => "\xE6\x9C\xAD",		"\xD4\xFE" => "\xE8\xBD\xA7",		"\xD5\xA1" => "\xE9\x93\xA1",		"\xD5\xA2" => "\xE9\x97\xB8",		"\xD5\xA3" => "\xE7\x9C\xA8",		"\xD5\xA4" => "\xE6\xA0\x85",		"\xD5\xA5" => "\xE6\xA6\xA8",		"\xD5\xA6" => "\xE5\x92\x8B",		"\xD5\xA7" => "\xE4\xB9\x8D",		"\xD5\xA8" => "\xE7\x82\xB8",		"\xD5\xA9" => "\xE8\xAF\x88",		"\xD5\xAA" => "\xE6\x91\x98",		"\xD5\xAB" => "\xE6\x96\x8B",		"\xD5\xAC" => "\xE5\xAE\x85",		"\xD5\xAD" => "\xE7\xAA\x84",		"\xD5\xAE" => "\xE5\x80\xBA",		"\xD5\xAF" => "\xE5\xAF\xA8",		"\xD5\xB0" => "\xE7\x9E\xBB",		"\xD5\xB1" => "\xE6\xAF\xA1",		"\xD5\xB2" => "\xE8\xA9\xB9",		"\xD5\xB3" => "\xE7\xB2\x98",		"\xD5\xB4" => "\xE6\xB2\xBE",		"\xD5\xB5" => "\xE7\x9B\x8F",		"\xD5\xB6" => "\xE6\x96\xA9",		"\xD5\xB7" => "\xE8\xBE\x97",		"\xD5\xB8" => "\xE5\xB4\xAD",		"\xD5\xB9" => "\xE5\xB1\x95",		"\xD5\xBA" => "\xE8\x98\xB8",		"\xD5\xBB" => "\xE6\xA0\x88",		"\xD5\xBC" => "\xE5\x8D\xA0",		"\xD5\xBD" => "\xE6\x88\x98",		"\xD5\xBE" => "\xE7\xAB\x99",		"\xD5\xBF" => "\xE6\xB9\x9B",		"\xD5\xC0" => "\xE7\xBB\xBD",		"\xD5\xC1" => "\xE6\xA8\x9F",		"\xD5\xC2" => "\xE7\xAB\xA0",		"\xD5\xC3" => "\xE5\xBD\xB0",		"\xD5\xC4" => "\xE6\xBC\xB3",		"\xD5\xC5" => "\xE5\xBC\xA0",		"\xD5\xC6" => "\xE6\x8E\x8C",		"\xD5\xC7" => "\xE6\xB6\xA8",		"\xD5\xC8" => "\xE6\x9D\x96",		"\xD5\xC9" => "\xE4\xB8\x88",		"\xD5\xCA" => "\xE5\xB8\x90",		"\xD5\xCB" => "\xE8\xB4\xA6",		"\xD5\xCC" => "\xE4\xBB\x97",		"\xD5\xCD" => "\xE8\x83\x80",		"\xD5\xCE" => "\xE7\x98\xB4",		"\xD5\xCF" => "\xE9\x9A\x9C",		"\xD5\xD0" => "\xE6\x8B\x9B",		"\xD5\xD1" => "\xE6\x98\xAD",		"\xD5\xD2" => "\xE6\x89\xBE",		"\xD5\xD3" => "\xE6\xB2\xBC",		"\xD5\xD4" => "\xE8\xB5\xB5",		"\xD5\xD5" => "\xE7\x85\xA7",		"\xD5\xD6" => "\xE7\xBD\xA9",		"\xD5\xD7" => "\xE5\x85\x86",		"\xD5\xD8" => "\xE8\x82\x87",		"\xD5\xD9" => "\xE5\x8F\xAC",		"\xD5\xDA" => "\xE9\x81\xAE",		"\xD5\xDB" => "\xE6\x8A\x98",		"\xD5\xDC" => "\xE5\x93\xB2",		"\xD5\xDD" => "\xE8\x9B\xB0",		"\xD5\xDE" => "\xE8\xBE\x99",		"\xD5\xDF" => "\xE8\x80\x85",		"\xD5\xE0" => "\xE9\x94\x97",		"\xD5\xE1" => "\xE8\x94\x97",		"\xD5\xE2" => "\xE8\xBF\x99",		"\xD5\xE3" => "\xE6\xB5\x99",		"\xD5\xE4" => "\xE7\x8F\x8D",		"\xD5\xE5" => "\xE6\x96\x9F",		"\xD5\xE6" => "\xE7\x9C\x9F",		"\xD5\xE7" => "\xE7\x94\x84",		"\xD5\xE8" => "\xE7\xA0\xA7",		"\xD5\xE9" => "\xE8\x87\xBB",		"\xD5\xEA" => "\xE8\xB4\x9E",		"\xD5\xEB" => "\xE9\x92\x88",		"\xD5\xEC" => "\xE4\xBE\xA6",		"\xD5\xED" => "\xE6\x9E\x95",		"\xD5\xEE" => "\xE7\x96\xB9",		"\xD5\xEF" => "\xE8\xAF\x8A",		"\xD5\xF0" => "\xE9\x9C\x87",		"\xD5\xF1" => "\xE6\x8C\xAF",		"\xD5\xF2" => "\xE9\x95\x87",		"\xD5\xF3" => "\xE9\x98\xB5",		"\xD5\xF4" => "\xE8\x92\xB8",		"\xD5\xF5" => "\xE6\x8C\xA3",		"\xD5\xF6" => "\xE7\x9D\x81",		"\xD5\xF7" => "\xE5\xBE\x81",		"\xD5\xF8" => "\xE7\x8B\xB0",		"\xD5\xF9" => "\xE4\xBA\x89",		"\xD5\xFA" => "\xE6\x80\x94",		"\xD5\xFB" => "\xE6\x95\xB4",		"\xD5\xFC" => "\xE6\x8B\xAF",		"\xD5\xFD" => "\xE6\xAD\xA3",		"\xD5\xFE" => "\xE6\x94\xBF",		"\xD6\xA1" => "\xE5\xB8\xA7",		"\xD6\xA2" => "\xE7\x97\x87",		"\xD6\xA3" => "\xE9\x83\x91",		"\xD6\xA4" => "\xE8\xAF\x81",		"\xD6\xA5" => "\xE8\x8A\x9D",		"\xD6\xA6" => "\xE6\x9E\x9D",		"\xD6\xA7" => "\xE6\x94\xAF",		"\xD6\xA8" => "\xE5\x90\xB1",		"\xD6\xA9" => "\xE8\x9C\x98",		"\xD6\xAA" => "\xE7\x9F\xA5",		"\xD6\xAB" => "\xE8\x82\xA2",		"\xD6\xAC" => "\xE8\x84\x82",		"\xD6\xAD" => "\xE6\xB1\x81",		"\xD6\xAE" => "\xE4\xB9\x8B",		"\xD6\xAF" => "\xE7\xBB\x87",		"\xD6\xB0" => "\xE8\x81\x8C",		"\xD6\xB1" => "\xE7\x9B\xB4",		"\xD6\xB2" => "\xE6\xA4\x8D",		"\xD6\xB3" => "\xE6\xAE\x96",		"\xD6\xB4" => "\xE6\x89\xA7",		"\xD6\xB5" => "\xE5\x80\xBC",		"\xD6\xB6" => "\xE4\xBE\x84",		"\xD6\xB7" => "\xE5\x9D\x80",		"\xD6\xB8" => "\xE6\x8C\x87",		"\xD6\xB9" => "\xE6\xAD\xA2",		"\xD6\xBA" => "\xE8\xB6\xBE",		"\xD6\xBB" => "\xE5\x8F\xAA",		"\xD6\xBC" => "\xE6\x97\xA8",		"\xD6\xBD" => "\xE7\xBA\xB8",		"\xD6\xBE" => "\xE5\xBF\x97",		"\xD6\xBF" => "\xE6\x8C\x9A",		"\xD6\xC0" => "\xE6\x8E\xB7",		"\xD6\xC1" => "\xE8\x87\xB3",		"\xD6\xC2" => "\xE8\x87\xB4",		"\xD6\xC3" => "\xE7\xBD\xAE",		"\xD6\xC4" => "\xE5\xB8\x9C",		"\xD6\xC5" => "\xE5\xB3\x99",		"\xD6\xC6" => "\xE5\x88\xB6",		"\xD6\xC7" => "\xE6\x99\xBA",		"\xD6\xC8" => "\xE7\xA7\xA9",		"\xD6\xC9" => "\xE7\xA8\x9A",		"\xD6\xCA" => "\xE8\xB4\xA8",		"\xD6\xCB" => "\xE7\x82\x99",		"\xD6\xCC" => "\xE7\x97\x94",		"\xD6\xCD" => "\xE6\xBB\x9E",		"\xD6\xCE" => "\xE6\xB2\xBB",		"\xD6\xCF" => "\xE7\xAA\x92",		"\xD6\xD0" => "\xE4\xB8\xAD",		"\xD6\xD1" => "\xE7\x9B\x85",		"\xD6\xD2" => "\xE5\xBF\xA0",		"\xD6\xD3" => "\xE9\x92\x9F",		"\xD6\xD4" => "\xE8\xA1\xB7",		"\xD6\xD5" => "\xE7\xBB\x88",		"\xD6\xD6" => "\xE7\xA7\x8D",		"\xD6\xD7" => "\xE8\x82\xBF",		"\xD6\xD8" => "\xE9\x87\x8D",		"\xD6\xD9" => "\xE4\xBB\xB2",		"\xD6\xDA" => "\xE4\xBC\x97",		"\xD6\xDB" => "\xE8\x88\x9F",		"\xD6\xDC" => "\xE5\x91\xA8",		"\xD6\xDD" => "\xE5\xB7\x9E",		"\xD6\xDE" => "\xE6\xB4\xB2",		"\xD6\xDF" => "\xE8\xAF\x8C",		"\xD6\xE0" => "\xE7\xB2\xA5",		"\xD6\xE1" => "\xE8\xBD\xB4",		"\xD6\xE2" => "\xE8\x82\x98",		"\xD6\xE3" => "\xE5\xB8\x9A",		"\xD6\xE4" => "\xE5\x92\x92",		"\xD6\xE5" => "\xE7\x9A\xB1",		"\xD6\xE6" => "\xE5\xAE\x99",		"\xD6\xE7" => "\xE6\x98\xBC",		"\xD6\xE8" => "\xE9\xAA\xA4",		"\xD6\xE9" => "\xE7\x8F\xA0",		"\xD6\xEA" => "\xE6\xA0\xAA",		"\xD6\xEB" => "\xE8\x9B\x9B",		"\xD6\xEC" => "\xE6\x9C\xB1",		"\xD6\xED" => "\xE7\x8C\xAA",		"\xD6\xEE" => "\xE8\xAF\xB8",		"\xD6\xEF" => "\xE8\xAF\x9B",		"\xD6\xF0" => "\xE9\x80\x90",		"\xD6\xF1" => "\xE7\xAB\xB9",		"\xD6\xF2" => "\xE7\x83\x9B",		"\xD6\xF3" => "\xE7\x85\xAE",		"\xD6\xF4" => "\xE6\x8B\x84",		"\xD6\xF5" => "\xE7\x9E\xA9",		"\xD6\xF6" => "\xE5\x98\xB1",		"\xD6\xF7" => "\xE4\xB8\xBB",		"\xD6\xF8" => "\xE8\x91\x97",		"\xD6\xF9" => "\xE6\x9F\xB1",		"\xD6\xFA" => "\xE5\x8A\xA9",		"\xD6\xFB" => "\xE8\x9B\x80",		"\xD6\xFC" => "\xE8\xB4\xAE",		"\xD6\xFD" => "\xE9\x93\xB8",		"\xD6\xFE" => "\xE7\xAD\x91",		"\xD7\xA1" => "\xE4\xBD\x8F",		"\xD7\xA2" => "\xE6\xB3\xA8",		"\xD7\xA3" => "\xE7\xA5\x9D",		"\xD7\xA4" => "\xE9\xA9\xBB",		"\xD7\xA5" => "\xE6\x8A\x93",		"\xD7\xA6" => "\xE7\x88\xAA",		"\xD7\xA7" => "\xE6\x8B\xBD",		"\xD7\xA8" => "\xE4\xB8\x93",		"\xD7\xA9" => "\xE7\xA0\x96",		"\xD7\xAA" => "\xE8\xBD\xAC",		"\xD7\xAB" => "\xE6\x92\xB0",		"\xD7\xAC" => "\xE8\xB5\x9A",		"\xD7\xAD" => "\xE7\xAF\x86",		"\xD7\xAE" => "\xE6\xA1\xA9",		"\xD7\xAF" => "\xE5\xBA\x84",		"\xD7\xB0" => "\xE8\xA3\x85",		"\xD7\xB1" => "\xE5\xA6\x86",		"\xD7\xB2" => "\xE6\x92\x9E",		"\xD7\xB3" => "\xE5\xA3\xAE",		"\xD7\xB4" => "\xE7\x8A\xB6",		"\xD7\xB5" => "\xE6\xA4\x8E",		"\xD7\xB6" => "\xE9\x94\xA5",		"\xD7\xB7" => "\xE8\xBF\xBD",		"\xD7\xB8" => "\xE8\xB5\x98",		"\xD7\xB9" => "\xE5\x9D\xA0",		"\xD7\xBA" => "\xE7\xBC\x80",		"\xD7\xBB" => "\xE8\xB0\x86",		"\xD7\xBC" => "\xE5\x87\x86",		"\xD7\xBD" => "\xE6\x8D\x89",		"\xD7\xBE" => "\xE6\x8B\x99",		"\xD7\xBF" => "\xE5\x8D\x93",		"\xD7\xC0" => "\xE6\xA1\x8C",		"\xD7\xC1" => "\xE7\x90\xA2",		"\xD7\xC2" => "\xE8\x8C\x81",		"\xD7\xC3" => "\xE9\x85\x8C",		"\xD7\xC4" => "\xE5\x95\x84",		"\xD7\xC5" => "\xE7\x9D\x80",		"\xD7\xC6" => "\xE7\x81\xBC",		"\xD7\xC7" => "\xE6\xB5\x8A",		"\xD7\xC8" => "\xE5\x85\xB9",		"\xD7\xC9" => "\xE5\x92\xA8",		"\xD7\xCA" => "\xE8\xB5\x84",		"\xD7\xCB" => "\xE5\xA7\xBF",		"\xD7\xCC" => "\xE6\xBB\x8B",		"\xD7\xCD" => "\xE6\xB7\x84",		"\xD7\xCE" => "\xE5\xAD\x9C",		"\xD7\xCF" => "\xE7\xB4\xAB",		"\xD7\xD0" => "\xE4\xBB\x94",		"\xD7\xD1" => "\xE7\xB1\xBD",		"\xD7\xD2" => "\xE6\xBB\x93",		"\xD7\xD3" => "\xE5\xAD\x90",		"\xD7\xD4" => "\xE8\x87\xAA",		"\xD7\xD5" => "\xE6\xB8\x8D",		"\xD7\xD6" => "\xE5\xAD\x97",		"\xD7\xD7" => "\xE9\xAC\x83",		"\xD7\xD8" => "\xE6\xA3\x95",		"\xD7\xD9" => "\xE8\xB8\xAA",		"\xD7\xDA" => "\xE5\xAE\x97",		"\xD7\xDB" => "\xE7\xBB\xBC",		"\xD7\xDC" => "\xE6\x80\xBB",		"\xD7\xDD" => "\xE7\xBA\xB5",		"\xD7\xDE" => "\xE9\x82\xB9",		"\xD7\xDF" => "\xE8\xB5\xB0",		"\xD7\xE0" => "\xE5\xA5\x8F",		"\xD7\xE1" => "\xE6\x8F\x8D",		"\xD7\xE2" => "\xE7\xA7\x9F",		"\xD7\xE3" => "\xE8\xB6\xB3",		"\xD7\xE4" => "\xE5\x8D\x92",		"\xD7\xE5" => "\xE6\x97\x8F",		"\xD7\xE6" => "\xE7\xA5\x96",		"\xD7\xE7" => "\xE8\xAF\x85",		"\xD7\xE8" => "\xE9\x98\xBB",		"\xD7\xE9" => "\xE7\xBB\x84",		"\xD7\xEA" => "\xE9\x92\xBB",		"\xD7\xEB" => "\xE7\xBA\x82",		"\xD7\xEC" => "\xE5\x98\xB4",		"\xD7\xED" => "\xE9\x86\x89",		"\xD7\xEE" => "\xE6\x9C\x80",		"\xD7\xEF" => "\xE7\xBD\xAA",		"\xD7\xF0" => "\xE5\xB0\x8A",		"\xD7\xF1" => "\xE9\x81\xB5",		"\xD7\xF2" => "\xE6\x98\xA8",		"\xD7\xF3" => "\xE5\xB7\xA6",		"\xD7\xF4" => "\xE4\xBD\x90",		"\xD7\xF5" => "\xE6\x9F\x9E",		"\xD7\xF6" => "\xE5\x81\x9A",		"\xD7\xF7" => "\xE4\xBD\x9C",		"\xD7\xF8" => "\xE5\x9D\x90",		"\xD7\xF9" => "\xE5\xBA\xA7",		"\xD8\xA1" => "\xE4\xBA\x8D",		"\xD8\xA2" => "\xE4\xB8\x8C",		"\xD8\xA3" => "\xE5\x85\x80",		"\xD8\xA4" => "\xE4\xB8\x90",		"\xD8\xA5" => "\xE5\xBB\xBF",		"\xD8\xA6" => "\xE5\x8D\x85",		"\xD8\xA7" => "\xE4\xB8\x95",		"\xD8\xA8" => "\xE4\xBA\x98",		"\xD8\xA9" => "\xE4\xB8\x9E",		"\xD8\xAA" => "\xE9\xAC\xB2",		"\xD8\xAB" => "\xE5\xAD\xAC",		"\xD8\xAC" => "\xE5\x99\xA9",		"\xD8\xAD" => "\xE4\xB8\xA8",		"\xD8\xAE" => "\xE7\xA6\xBA",		"\xD8\xAF" => "\xE4\xB8\xBF",		"\xD8\xB0" => "\xE5\x8C\x95",		"\xD8\xB1" => "\xE4\xB9\x87",		"\xD8\xB2" => "\xE5\xA4\xAD",		"\xD8\xB3" => "\xE7\x88\xBB",		"\xD8\xB4" => "\xE5\x8D\xAE",		"\xD8\xB5" => "\xE6\xB0\x90",		"\xD8\xB6" => "\xE5\x9B\x9F",		"\xD8\xB7" => "\xE8\x83\xA4",		"\xD8\xB8" => "\xE9\xA6\x97",		"\xD8\xB9" => "\xE6\xAF\x93",		"\xD8\xBA" => "\xE7\x9D\xBE",		"\xD8\xBB" => "\xE9\xBC\x97",		"\xD8\xBC" => "\xE4\xB8\xB6",		"\xD8\xBD" => "\xE4\xBA\x9F",		"\xD8\xBE" => "\xE9\xBC\x90",		"\xD8\xBF" => "\xE4\xB9\x9C",		"\xD8\xC0" => "\xE4\xB9\xA9",		"\xD8\xC1" => "\xE4\xBA\x93",		"\xD8\xC2" => "\xE8\x8A\x88",		"\xD8\xC3" => "\xE5\xAD\x9B",		"\xD8\xC4" => "\xE5\x95\xAC",		"\xD8\xC5" => "\xE5\x98\x8F",		"\xD8\xC6" => "\xE4\xBB\x84",		"\xD8\xC7" => "\xE5\x8E\x8D",		"\xD8\xC8" => "\xE5\x8E\x9D",		"\xD8\xC9" => "\xE5\x8E\xA3",		"\xD8\xCA" => "\xE5\x8E\xA5",		"\xD8\xCB" => "\xE5\x8E\xAE",		"\xD8\xCC" => "\xE9\x9D\xA5",		"\xD8\xCD" => "\xE8\xB5\x9D",		"\xD8\xCE" => "\xE5\x8C\x9A",		"\xD8\xCF" => "\xE5\x8F\xB5",		"\xD8\xD0" => "\xE5\x8C\xA6",		"\xD8\xD1" => "\xE5\x8C\xAE",		"\xD8\xD2" => "\xE5\x8C\xBE",		"\xD8\xD3" => "\xE8\xB5\x9C",		"\xD8\xD4" => "\xE5\x8D\xA6",		"\xD8\xD5" => "\xE5\x8D\xA3",		"\xD8\xD6" => "\xE5\x88\x82",		"\xD8\xD7" => "\xE5\x88\x88",		"\xD8\xD8" => "\xE5\x88\x8E",		"\xD8\xD9" => "\xE5\x88\xAD",		"\xD8\xDA" => "\xE5\x88\xB3",		"\xD8\xDB" => "\xE5\x88\xBF",		"\xD8\xDC" => "\xE5\x89\x80",		"\xD8\xDD" => "\xE5\x89\x8C",		"\xD8\xDE" => "\xE5\x89\x9E",		"\xD8\xDF" => "\xE5\x89\xA1",		"\xD8\xE0" => "\xE5\x89\x9C",		"\xD8\xE1" => "\xE8\x92\xAF",		"\xD8\xE2" => "\xE5\x89\xBD",		"\xD8\xE3" => "\xE5\x8A\x82",		"\xD8\xE4" => "\xE5\x8A\x81",		"\xD8\xE5" => "\xE5\x8A\x90",		"\xD8\xE6" => "\xE5\x8A\x93",		"\xD8\xE7" => "\xE5\x86\x82",		"\xD8\xE8" => "\xE7\xBD\x94",		"\xD8\xE9" => "\xE4\xBA\xBB",		"\xD8\xEA" => "\xE4\xBB\x83",		"\xD8\xEB" => "\xE4\xBB\x89",		"\xD8\xEC" => "\xE4\xBB\x82",		"\xD8\xED" => "\xE4\xBB\xA8",		"\xD8\xEE" => "\xE4\xBB\xA1",		"\xD8\xEF" => "\xE4\xBB\xAB",		"\xD8\xF0" => "\xE4\xBB\x9E",		"\xD8\xF1" => "\xE4\xBC\x9B",		"\xD8\xF2" => "\xE4\xBB\xB3",		"\xD8\xF3" => "\xE4\xBC\xA2",		"\xD8\xF4" => "\xE4\xBD\xA4",		"\xD8\xF5" => "\xE4\xBB\xB5",		"\xD8\xF6" => "\xE4\xBC\xA5",		"\xD8\xF7" => "\xE4\xBC\xA7",		"\xD8\xF8" => "\xE4\xBC\x89",		"\xD8\xF9" => "\xE4\xBC\xAB",		"\xD8\xFA" => "\xE4\xBD\x9E",		"\xD8\xFB" => "\xE4\xBD\xA7",		"\xD8\xFC" => "\xE6\x94\xB8",		"\xD8\xFD" => "\xE4\xBD\x9A",		"\xD8\xFE" => "\xE4\xBD\x9D",		"\xD9\xA1" => "\xE4\xBD\x9F",		"\xD9\xA2" => "\xE4\xBD\x97",		"\xD9\xA3" => "\xE4\xBC\xB2",		"\xD9\xA4" => "\xE4\xBC\xBD",		"\xD9\xA5" => "\xE4\xBD\xB6",		"\xD9\xA6" => "\xE4\xBD\xB4",		"\xD9\xA7" => "\xE4\xBE\x91",		"\xD9\xA8" => "\xE4\xBE\x89",		"\xD9\xA9" => "\xE4\xBE\x83",		"\xD9\xAA" => "\xE4\xBE\x8F",		"\xD9\xAB" => "\xE4\xBD\xBE",		"\xD9\xAC" => "\xE4\xBD\xBB",		"\xD9\xAD" => "\xE4\xBE\xAA",		"\xD9\xAE" => "\xE4\xBD\xBC",		"\xD9\xAF" => "\xE4\xBE\xAC",		"\xD9\xB0" => "\xE4\xBE\x94",		"\xD9\xB1" => "\xE4\xBF\xA6",		"\xD9\xB2" => "\xE4\xBF\xA8",		"\xD9\xB3" => "\xE4\xBF\xAA",		"\xD9\xB4" => "\xE4\xBF\x85",		"\xD9\xB5" => "\xE4\xBF\x9A",		"\xD9\xB6" => "\xE4\xBF\xA3",		"\xD9\xB7" => "\xE4\xBF\x9C",		"\xD9\xB8" => "\xE4\xBF\x91",		"\xD9\xB9" => "\xE4\xBF\x9F",		"\xD9\xBA" => "\xE4\xBF\xB8",		"\xD9\xBB" => "\xE5\x80\xA9",		"\xD9\xBC" => "\xE5\x81\x8C",		"\xD9\xBD" => "\xE4\xBF\xB3",		"\xD9\xBE" => "\xE5\x80\xAC",		"\xD9\xBF" => "\xE5\x80\x8F",		"\xD9\xC0" => "\xE5\x80\xAE",		"\xD9\xC1" => "\xE5\x80\xAD",		"\xD9\xC2" => "\xE4\xBF\xBE",		"\xD9\xC3" => "\xE5\x80\x9C",		"\xD9\xC4" => "\xE5\x80\x8C",		"\xD9\xC5" => "\xE5\x80\xA5",		"\xD9\xC6" => "\xE5\x80\xA8",		"\xD9\xC7" => "\xE5\x81\xBE",		"\xD9\xC8" => "\xE5\x81\x83",		"\xD9\xC9" => "\xE5\x81\x95",		"\xD9\xCA" => "\xE5\x81\x88",		"\xD9\xCB" => "\xE5\x81\x8E",		"\xD9\xCC" => "\xE5\x81\xAC",		"\xD9\xCD" => "\xE5\x81\xBB",		"\xD9\xCE" => "\xE5\x82\xA5",		"\xD9\xCF" => "\xE5\x82\xA7",		"\xD9\xD0" => "\xE5\x82\xA9",		"\xD9\xD1" => "\xE5\x82\xBA",		"\xD9\xD2" => "\xE5\x83\x96",		"\xD9\xD3" => "\xE5\x84\x86",		"\xD9\xD4" => "\xE5\x83\xAD",		"\xD9\xD5" => "\xE5\x83\xAC",		"\xD9\xD6" => "\xE5\x83\xA6",		"\xD9\xD7" => "\xE5\x83\xAE",		"\xD9\xD8" => "\xE5\x84\x87",		"\xD9\xD9" => "\xE5\x84\x8B",		"\xD9\xDA" => "\xE4\xBB\x9D",		"\xD9\xDB" => "\xE6\xB0\xBD",		"\xD9\xDC" => "\xE4\xBD\x98",		"\xD9\xDD" => "\xE4\xBD\xA5",		"\xD9\xDE" => "\xE4\xBF\x8E",		"\xD9\xDF" => "\xE9\xBE\xA0",		"\xD9\xE0" => "\xE6\xB1\x86",		"\xD9\xE1" => "\xE7\xB1\xB4",		"\xD9\xE2" => "\xE5\x85\xAE",		"\xD9\xE3" => "\xE5\xB7\xBD",		"\xD9\xE4" => "\xE9\xBB\x89",		"\xD9\xE5" => "\xE9\xA6\x98",		"\xD9\xE6" => "\xE5\x86\x81",		"\xD9\xE7" => "\xE5\xA4\x94",		"\xD9\xE8" => "\xE5\x8B\xB9",		"\xD9\xE9" => "\xE5\x8C\x8D",		"\xD9\xEA" => "\xE8\xA8\x87",		"\xD9\xEB" => "\xE5\x8C\x90",		"\xD9\xEC" => "\xE5\x87\xAB",		"\xD9\xED" => "\xE5\xA4\x99",		"\xD9\xEE" => "\xE5\x85\x95",		"\xD9\xEF" => "\xE4\xBA\xA0",		"\xD9\xF0" => "\xE5\x85\x96",		"\xD9\xF1" => "\xE4\xBA\xB3",		"\xD9\xF2" => "\xE8\xA1\xAE",		"\xD9\xF3" => "\xE8\xA2\xA4",		"\xD9\xF4" => "\xE4\xBA\xB5",		"\xD9\xF5" => "\xE8\x84\x94",		"\xD9\xF6" => "\xE8\xA3\x92",		"\xD9\xF7" => "\xE7\xA6\x80",		"\xD9\xF8" => "\xE5\xAC\xB4",		"\xD9\xF9" => "\xE8\xA0\x83",		"\xD9\xFA" => "\xE7\xBE\xB8",		"\xD9\xFB" => "\xE5\x86\xAB",		"\xD9\xFC" => "\xE5\x86\xB1",		"\xD9\xFD" => "\xE5\x86\xBD",		"\xD9\xFE" => "\xE5\x86\xBC",		"\xDA\xA1" => "\xE5\x87\x87",		"\xDA\xA2" => "\xE5\x86\x96",		"\xDA\xA3" => "\xE5\x86\xA2",		"\xDA\xA4" => "\xE5\x86\xA5",		"\xDA\xA5" => "\xE8\xAE\xA0",		"\xDA\xA6" => "\xE8\xAE\xA6",		"\xDA\xA7" => "\xE8\xAE\xA7",		"\xDA\xA8" => "\xE8\xAE\xAA",		"\xDA\xA9" => "\xE8\xAE\xB4",		"\xDA\xAA" => "\xE8\xAE\xB5",		"\xDA\xAB" => "\xE8\xAE\xB7",		"\xDA\xAC" => "\xE8\xAF\x82",		"\xDA\xAD" => "\xE8\xAF\x83",		"\xDA\xAE" => "\xE8\xAF\x8B",		"\xDA\xAF" => "\xE8\xAF\x8F",		"\xDA\xB0" => "\xE8\xAF\x8E",		"\xDA\xB1" => "\xE8\xAF\x92",		"\xDA\xB2" => "\xE8\xAF\x93",		"\xDA\xB3" => "\xE8\xAF\x94",		"\xDA\xB4" => "\xE8\xAF\x96",		"\xDA\xB5" => "\xE8\xAF\x98",		"\xDA\xB6" => "\xE8\xAF\x99",		"\xDA\xB7" => "\xE8\xAF\x9C",		"\xDA\xB8" => "\xE8\xAF\x9F",		"\xDA\xB9" => "\xE8\xAF\xA0",		"\xDA\xBA" => "\xE8\xAF\xA4",		"\xDA\xBB" => "\xE8\xAF\xA8",		"\xDA\xBC" => "\xE8\xAF\xA9",		"\xDA\xBD" => "\xE8\xAF\xAE",		"\xDA\xBE" => "\xE8\xAF\xB0",		"\xDA\xBF" => "\xE8\xAF\xB3",		"\xDA\xC0" => "\xE8\xAF\xB6",		"\xDA\xC1" => "\xE8\xAF\xB9",		"\xDA\xC2" => "\xE8\xAF\xBC",		"\xDA\xC3" => "\xE8\xAF\xBF",		"\xDA\xC4" => "\xE8\xB0\x80",		"\xDA\xC5" => "\xE8\xB0\x82",		"\xDA\xC6" => "\xE8\xB0\x84",		"\xDA\xC7" => "\xE8\xB0\x87",		"\xDA\xC8" => "\xE8\xB0\x8C",		"\xDA\xC9" => "\xE8\xB0\x8F",		"\xDA\xCA" => "\xE8\xB0\x91",		"\xDA\xCB" => "\xE8\xB0\x92",		"\xDA\xCC" => "\xE8\xB0\x94",		"\xDA\xCD" => "\xE8\xB0\x95",		"\xDA\xCE" => "\xE8\xB0\x96",		"\xDA\xCF" => "\xE8\xB0\x99",		"\xDA\xD0" => "\xE8\xB0\x9B",		"\xDA\xD1" => "\xE8\xB0\x98",		"\xDA\xD2" => "\xE8\xB0\x9D",		"\xDA\xD3" => "\xE8\xB0\x9F",		"\xDA\xD4" => "\xE8\xB0\xA0",		"\xDA\xD5" => "\xE8\xB0\xA1",		"\xDA\xD6" => "\xE8\xB0\xA5",		"\xDA\xD7" => "\xE8\xB0\xA7",		"\xDA\xD8" => "\xE8\xB0\xAA",		"\xDA\xD9" => "\xE8\xB0\xAB",		"\xDA\xDA" => "\xE8\xB0\xAE",		"\xDA\xDB" => "\xE8\xB0\xAF",		"\xDA\xDC" => "\xE8\xB0\xB2",		"\xDA\xDD" => "\xE8\xB0\xB3",		"\xDA\xDE" => "\xE8\xB0\xB5",		"\xDA\xDF" => "\xE8\xB0\xB6",		"\xDA\xE0" => "\xE5\x8D\xA9",		"\xDA\xE1" => "\xE5\x8D\xBA",		"\xDA\xE2" => "\xE9\x98\x9D",		"\xDA\xE3" => "\xE9\x98\xA2",		"\xDA\xE4" => "\xE9\x98\xA1",		"\xDA\xE5" => "\xE9\x98\xB1",		"\xDA\xE6" => "\xE9\x98\xAA",		"\xDA\xE7" => "\xE9\x98\xBD",		"\xDA\xE8" => "\xE9\x98\xBC",		"\xDA\xE9" => "\xE9\x99\x82",		"\xDA\xEA" => "\xE9\x99\x89",		"\xDA\xEB" => "\xE9\x99\x94",		"\xDA\xEC" => "\xE9\x99\x9F",		"\xDA\xED" => "\xE9\x99\xA7",		"\xDA\xEE" => "\xE9\x99\xAC",		"\xDA\xEF" => "\xE9\x99\xB2",		"\xDA\xF0" => "\xE9\x99\xB4",		"\xDA\xF1" => "\xE9\x9A\x88",		"\xDA\xF2" => "\xE9\x9A\x8D",		"\xDA\xF3" => "\xE9\x9A\x97",		"\xDA\xF4" => "\xE9\x9A\xB0",		"\xDA\xF5" => "\xE9\x82\x97",		"\xDA\xF6" => "\xE9\x82\x9B",		"\xDA\xF7" => "\xE9\x82\x9D",		"\xDA\xF8" => "\xE9\x82\x99",		"\xDA\xF9" => "\xE9\x82\xAC",		"\xDA\xFA" => "\xE9\x82\xA1",		"\xDA\xFB" => "\xE9\x82\xB4",		"\xDA\xFC" => "\xE9\x82\xB3",		"\xDA\xFD" => "\xE9\x82\xB6",		"\xDA\xFE" => "\xE9\x82\xBA",		"\xDB\xA1" => "\xE9\x82\xB8",		"\xDB\xA2" => "\xE9\x82\xB0",		"\xDB\xA3" => "\xE9\x83\x8F",		"\xDB\xA4" => "\xE9\x83\x85",		"\xDB\xA5" => "\xE9\x82\xBE",		"\xDB\xA6" => "\xE9\x83\x90",		"\xDB\xA7" => "\xE9\x83\x84",		"\xDB\xA8" => "\xE9\x83\x87",		"\xDB\xA9" => "\xE9\x83\x93",		"\xDB\xAA" => "\xE9\x83\xA6",		"\xDB\xAB" => "\xE9\x83\xA2",		"\xDB\xAC" => "\xE9\x83\x9C",		"\xDB\xAD" => "\xE9\x83\x97",		"\xDB\xAE" => "\xE9\x83\x9B",		"\xDB\xAF" => "\xE9\x83\xAB",		"\xDB\xB0" => "\xE9\x83\xAF",		"\xDB\xB1" => "\xE9\x83\xBE",		"\xDB\xB2" => "\xE9\x84\x84",		"\xDB\xB3" => "\xE9\x84\xA2",		"\xDB\xB4" => "\xE9\x84\x9E",		"\xDB\xB5" => "\xE9\x84\xA3",		"\xDB\xB6" => "\xE9\x84\xB1",		"\xDB\xB7" => "\xE9\x84\xAF",		"\xDB\xB8" => "\xE9\x84\xB9",		"\xDB\xB9" => "\xE9\x85\x83",		"\xDB\xBA" => "\xE9\x85\x86",		"\xDB\xBB" => "\xE5\x88\x8D",		"\xDB\xBC" => "\xE5\xA5\x82",		"\xDB\xBD" => "\xE5\x8A\xA2",		"\xDB\xBE" => "\xE5\x8A\xAC",		"\xDB\xBF" => "\xE5\x8A\xAD",		"\xDB\xC0" => "\xE5\x8A\xBE",		"\xDB\xC1" => "\xE5\x93\xBF",		"\xDB\xC2" => "\xE5\x8B\x90",		"\xDB\xC3" => "\xE5\x8B\x96",		"\xDB\xC4" => "\xE5\x8B\xB0",		"\xDB\xC5" => "\xE5\x8F\x9F",		"\xDB\xC6" => "\xE7\x87\xAE",		"\xDB\xC7" => "\xE7\x9F\x8D",		"\xDB\xC8" => "\xE5\xBB\xB4",		"\xDB\xC9" => "\xE5\x87\xB5",		"\xDB\xCA" => "\xE5\x87\xBC",		"\xDB\xCB" => "\xE9\xAC\xAF",		"\xDB\xCC" => "\xE5\x8E\xB6",		"\xDB\xCD" => "\xE5\xBC\x81",		"\xDB\xCE" => "\xE7\x95\x9A",		"\xDB\xCF" => "\xE5\xB7\xAF",		"\xDB\xD0" => "\xE5\x9D\x8C",		"\xDB\xD1" => "\xE5\x9E\xA9",		"\xDB\xD2" => "\xE5\x9E\xA1",		"\xDB\xD3" => "\xE5\xA1\xBE",		"\xDB\xD4" => "\xE5\xA2\xBC",		"\xDB\xD5" => "\xE5\xA3\x85",		"\xDB\xD6" => "\xE5\xA3\x91",		"\xDB\xD7" => "\xE5\x9C\xA9",		"\xDB\xD8" => "\xE5\x9C\xAC",		"\xDB\xD9" => "\xE5\x9C\xAA",		"\xDB\xDA" => "\xE5\x9C\xB3",		"\xDB\xDB" => "\xE5\x9C\xB9",		"\xDB\xDC" => "\xE5\x9C\xAE",		"\xDB\xDD" => "\xE5\x9C\xAF",		"\xDB\xDE" => "\xE5\x9D\x9C",		"\xDB\xDF" => "\xE5\x9C\xBB",		"\xDB\xE0" => "\xE5\x9D\x82",		"\xDB\xE1" => "\xE5\x9D\xA9",		"\xDB\xE2" => "\xE5\x9E\x85",		"\xDB\xE3" => "\xE5\x9D\xAB",		"\xDB\xE4" => "\xE5\x9E\x86",		"\xDB\xE5" => "\xE5\x9D\xBC",		"\xDB\xE6" => "\xE5\x9D\xBB",		"\xDB\xE7" => "\xE5\x9D\xA8",		"\xDB\xE8" => "\xE5\x9D\xAD",		"\xDB\xE9" => "\xE5\x9D\xB6",		"\xDB\xEA" => "\xE5\x9D\xB3",		"\xDB\xEB" => "\xE5\x9E\xAD",		"\xDB\xEC" => "\xE5\x9E\xA4",		"\xDB\xED" => "\xE5\x9E\x8C",		"\xDB\xEE" => "\xE5\x9E\xB2",		"\xDB\xEF" => "\xE5\x9F\x8F",		"\xDB\xF0" => "\xE5\x9E\xA7",		"\xDB\xF1" => "\xE5\x9E\xB4",		"\xDB\xF2" => "\xE5\x9E\x93",		"\xDB\xF3" => "\xE5\x9E\xA0",		"\xDB\xF4" => "\xE5\x9F\x95",		"\xDB\xF5" => "\xE5\x9F\x98",		"\xDB\xF6" => "\xE5\x9F\x9A",		"\xDB\xF7" => "\xE5\x9F\x99",		"\xDB\xF8" => "\xE5\x9F\x92",		"\xDB\xF9" => "\xE5\x9E\xB8",		"\xDB\xFA" => "\xE5\x9F\xB4",		"\xDB\xFB" => "\xE5\x9F\xAF",		"\xDB\xFC" => "\xE5\x9F\xB8",		"\xDB\xFD" => "\xE5\x9F\xA4",		"\xDB\xFE" => "\xE5\x9F\x9D",		"\xDC\xA1" => "\xE5\xA0\x8B",		"\xDC\xA2" => "\xE5\xA0\x8D",		"\xDC\xA3" => "\xE5\x9F\xBD",		"\xDC\xA4" => "\xE5\x9F\xAD",		"\xDC\xA5" => "\xE5\xA0\x80",		"\xDC\xA6" => "\xE5\xA0\x9E",		"\xDC\xA7" => "\xE5\xA0\x99",		"\xDC\xA8" => "\xE5\xA1\x84",		"\xDC\xA9" => "\xE5\xA0\xA0",		"\xDC\xAA" => "\xE5\xA1\xA5",		"\xDC\xAB" => "\xE5\xA1\xAC",		"\xDC\xAC" => "\xE5\xA2\x81",		"\xDC\xAD" => "\xE5\xA2\x89",		"\xDC\xAE" => "\xE5\xA2\x9A",		"\xDC\xAF" => "\xE5\xA2\x80",		"\xDC\xB0" => "\xE9\xA6\xA8",		"\xDC\xB1" => "\xE9\xBC\x99",		"\xDC\xB2" => "\xE6\x87\xBF",		"\xDC\xB3" => "\xE8\x89\xB9",		"\xDC\xB4" => "\xE8\x89\xBD",		"\xDC\xB5" => "\xE8\x89\xBF",		"\xDC\xB6" => "\xE8\x8A\x8F",		"\xDC\xB7" => "\xE8\x8A\x8A",		"\xDC\xB8" => "\xE8\x8A\xA8",		"\xDC\xB9" => "\xE8\x8A\x84",		"\xDC\xBA" => "\xE8\x8A\x8E",		"\xDC\xBB" => "\xE8\x8A\x91",		"\xDC\xBC" => "\xE8\x8A\x97",		"\xDC\xBD" => "\xE8\x8A\x99",		"\xDC\xBE" => "\xE8\x8A\xAB",		"\xDC\xBF" => "\xE8\x8A\xB8",		"\xDC\xC0" => "\xE8\x8A\xBE",		"\xDC\xC1" => "\xE8\x8A\xB0",		"\xDC\xC2" => "\xE8\x8B\x88",		"\xDC\xC3" => "\xE8\x8B\x8A",		"\xDC\xC4" => "\xE8\x8B\xA3",		"\xDC\xC5" => "\xE8\x8A\x98",		"\xDC\xC6" => "\xE8\x8A\xB7",		"\xDC\xC7" => "\xE8\x8A\xAE",		"\xDC\xC8" => "\xE8\x8B\x8B",		"\xDC\xC9" => "\xE8\x8B\x8C",		"\xDC\xCA" => "\xE8\x8B\x81",		"\xDC\xCB" => "\xE8\x8A\xA9",		"\xDC\xCC" => "\xE8\x8A\xB4",		"\xDC\xCD" => "\xE8\x8A\xA1",		"\xDC\xCE" => "\xE8\x8A\xAA",		"\xDC\xCF" => "\xE8\x8A\x9F",		"\xDC\xD0" => "\xE8\x8B\x84",		"\xDC\xD1" => "\xE8\x8B\x8E",		"\xDC\xD2" => "\xE8\x8A\xA4",		"\xDC\xD3" => "\xE8\x8B\xA1",		"\xDC\xD4" => "\xE8\x8C\x89",		"\xDC\xD5" => "\xE8\x8B\xB7",		"\xDC\xD6" => "\xE8\x8B\xA4",		"\xDC\xD7" => "\xE8\x8C\x8F",		"\xDC\xD8" => "\xE8\x8C\x87",		"\xDC\xD9" => "\xE8\x8B\x9C",		"\xDC\xDA" => "\xE8\x8B\xB4",		"\xDC\xDB" => "\xE8\x8B\x92",		"\xDC\xDC" => "\xE8\x8B\x98",		"\xDC\xDD" => "\xE8\x8C\x8C",		"\xDC\xDE" => "\xE8\x8B\xBB",		"\xDC\xDF" => "\xE8\x8B\x93",		"\xDC\xE0" => "\xE8\x8C\x91",		"\xDC\xE1" => "\xE8\x8C\x9A",		"\xDC\xE2" => "\xE8\x8C\x86",		"\xDC\xE3" => "\xE8\x8C\x94",		"\xDC\xE4" => "\xE8\x8C\x95",		"\xDC\xE5" => "\xE8\x8B\xA0",		"\xDC\xE6" => "\xE8\x8B\x95",		"\xDC\xE7" => "\xE8\x8C\x9C",		"\xDC\xE8" => "\xE8\x8D\x91",		"\xDC\xE9" => "\xE8\x8D\x9B",		"\xDC\xEA" => "\xE8\x8D\x9C",		"\xDC\xEB" => "\xE8\x8C\x88",		"\xDC\xEC" => "\xE8\x8E\x92",		"\xDC\xED" => "\xE8\x8C\xBC",		"\xDC\xEE" => "\xE8\x8C\xB4",		"\xDC\xEF" => "\xE8\x8C\xB1",		"\xDC\xF0" => "\xE8\x8E\x9B",		"\xDC\xF1" => "\xE8\x8D\x9E",		"\xDC\xF2" => "\xE8\x8C\xAF",		"\xDC\xF3" => "\xE8\x8D\x8F",		"\xDC\xF4" => "\xE8\x8D\x87",		"\xDC\xF5" => "\xE8\x8D\x83",		"\xDC\xF6" => "\xE8\x8D\x9F",		"\xDC\xF7" => "\xE8\x8D\x80",		"\xDC\xF8" => "\xE8\x8C\x97",		"\xDC\xF9" => "\xE8\x8D\xA0",		"\xDC\xFA" => "\xE8\x8C\xAD",		"\xDC\xFB" => "\xE8\x8C\xBA",		"\xDC\xFC" => "\xE8\x8C\xB3",		"\xDC\xFD" => "\xE8\x8D\xA6",		"\xDC\xFE" => "\xE8\x8D\xA5",		"\xDD\xA1" => "\xE8\x8D\xA8",		"\xDD\xA2" => "\xE8\x8C\x9B",		"\xDD\xA3" => "\xE8\x8D\xA9",		"\xDD\xA4" => "\xE8\x8D\xAC",		"\xDD\xA5" => "\xE8\x8D\xAA",		"\xDD\xA6" => "\xE8\x8D\xAD",		"\xDD\xA7" => "\xE8\x8D\xAE",		"\xDD\xA8" => "\xE8\x8E\xB0",		"\xDD\xA9" => "\xE8\x8D\xB8",		"\xDD\xAA" => "\xE8\x8E\xB3",		"\xDD\xAB" => "\xE8\x8E\xB4",		"\xDD\xAC" => "\xE8\x8E\xA0",		"\xDD\xAD" => "\xE8\x8E\xAA",		"\xDD\xAE" => "\xE8\x8E\x93",		"\xDD\xAF" => "\xE8\x8E\x9C",		"\xDD\xB0" => "\xE8\x8E\x85",		"\xDD\xB1" => "\xE8\x8D\xBC",		"\xDD\xB2" => "\xE8\x8E\xB6",		"\xDD\xB3" => "\xE8\x8E\xA9",		"\xDD\xB4" => "\xE8\x8D\xBD",		"\xDD\xB5" => "\xE8\x8E\xB8",		"\xDD\xB6" => "\xE8\x8D\xBB",		"\xDD\xB7" => "\xE8\x8E\x98",		"\xDD\xB8" => "\xE8\x8E\x9E",		"\xDD\xB9" => "\xE8\x8E\xA8",		"\xDD\xBA" => "\xE8\x8E\xBA",		"\xDD\xBB" => "\xE8\x8E\xBC",		"\xDD\xBC" => "\xE8\x8F\x81",		"\xDD\xBD" => "\xE8\x90\x81",		"\xDD\xBE" => "\xE8\x8F\xA5",		"\xDD\xBF" => "\xE8\x8F\x98",		"\xDD\xC0" => "\xE5\xA0\x87",		"\xDD\xC1" => "\xE8\x90\x98",		"\xDD\xC2" => "\xE8\x90\x8B",		"\xDD\xC3" => "\xE8\x8F\x9D",		"\xDD\xC4" => "\xE8\x8F\xBD",		"\xDD\xC5" => "\xE8\x8F\x96",		"\xDD\xC6" => "\xE8\x90\x9C",		"\xDD\xC7" => "\xE8\x90\xB8",		"\xDD\xC8" => "\xE8\x90\x91",		"\xDD\xC9" => "\xE8\x90\x86",		"\xDD\xCA" => "\xE8\x8F\x94",		"\xDD\xCB" => "\xE8\x8F\x9F",		"\xDD\xCC" => "\xE8\x90\x8F",		"\xDD\xCD" => "\xE8\x90\x83",		"\xDD\xCE" => "\xE8\x8F\xB8",		"\xDD\xCF" => "\xE8\x8F\xB9",		"\xDD\xD0" => "\xE8\x8F\xAA",		"\xDD\xD1" => "\xE8\x8F\x85",		"\xDD\xD2" => "\xE8\x8F\x80",		"\xDD\xD3" => "\xE8\x90\xA6",		"\xDD\xD4" => "\xE8\x8F\xB0",		"\xDD\xD5" => "\xE8\x8F\xA1",		"\xDD\xD6" => "\xE8\x91\x9C",		"\xDD\xD7" => "\xE8\x91\x91",		"\xDD\xD8" => "\xE8\x91\x9A",		"\xDD\xD9" => "\xE8\x91\x99",		"\xDD\xDA" => "\xE8\x91\xB3",		"\xDD\xDB" => "\xE8\x92\x87",		"\xDD\xDC" => "\xE8\x92\x88",		"\xDD\xDD" => "\xE8\x91\xBA",		"\xDD\xDE" => "\xE8\x92\x89",		"\xDD\xDF" => "\xE8\x91\xB8",		"\xDD\xE0" => "\xE8\x90\xBC",		"\xDD\xE1" => "\xE8\x91\x86",		"\xDD\xE2" => "\xE8\x91\xA9",		"\xDD\xE3" => "\xE8\x91\xB6",		"\xDD\xE4" => "\xE8\x92\x8C",		"\xDD\xE5" => "\xE8\x92\x8E",		"\xDD\xE6" => "\xE8\x90\xB1",		"\xDD\xE7" => "\xE8\x91\xAD",		"\xDD\xE8" => "\xE8\x93\x81",		"\xDD\xE9" => "\xE8\x93\x8D",		"\xDD\xEA" => "\xE8\x93\x90",		"\xDD\xEB" => "\xE8\x93\xA6",		"\xDD\xEC" => "\xE8\x92\xBD",		"\xDD\xED" => "\xE8\x93\x93",		"\xDD\xEE" => "\xE8\x93\x8A",		"\xDD\xEF" => "\xE8\x92\xBF",		"\xDD\xF0" => "\xE8\x92\xBA",		"\xDD\xF1" => "\xE8\x93\xA0",		"\xDD\xF2" => "\xE8\x92\xA1",		"\xDD\xF3" => "\xE8\x92\xB9",		"\xDD\xF4" => "\xE8\x92\xB4",		"\xDD\xF5" => "\xE8\x92\x97",		"\xDD\xF6" => "\xE8\x93\xA5",		"\xDD\xF7" => "\xE8\x93\xA3",		"\xDD\xF8" => "\xE8\x94\x8C",		"\xDD\xF9" => "\xE7\x94\x8D",		"\xDD\xFA" => "\xE8\x94\xB8",		"\xDD\xFB" => "\xE8\x93\xB0",		"\xDD\xFC" => "\xE8\x94\xB9",		"\xDD\xFD" => "\xE8\x94\x9F",		"\xDD\xFE" => "\xE8\x94\xBA",		"\xDE\xA1" => "\xE8\x95\x96",		"\xDE\xA2" => "\xE8\x94\xBB",		"\xDE\xA3" => "\xE8\x93\xBF",		"\xDE\xA4" => "\xE8\x93\xBC",		"\xDE\xA5" => "\xE8\x95\x99",		"\xDE\xA6" => "\xE8\x95\x88",		"\xDE\xA7" => "\xE8\x95\xA8",		"\xDE\xA8" => "\xE8\x95\xA4",		"\xDE\xA9" => "\xE8\x95\x9E",		"\xDE\xAA" => "\xE8\x95\xBA",		"\xDE\xAB" => "\xE7\x9E\xA2",		"\xDE\xAC" => "\xE8\x95\x83",		"\xDE\xAD" => "\xE8\x95\xB2",		"\xDE\xAE" => "\xE8\x95\xBB",		"\xDE\xAF" => "\xE8\x96\xA4",		"\xDE\xB0" => "\xE8\x96\xA8",		"\xDE\xB1" => "\xE8\x96\x87",		"\xDE\xB2" => "\xE8\x96\x8F",		"\xDE\xB3" => "\xE8\x95\xB9",		"\xDE\xB4" => "\xE8\x96\xAE",		"\xDE\xB5" => "\xE8\x96\x9C",		"\xDE\xB6" => "\xE8\x96\x85",		"\xDE\xB7" => "\xE8\x96\xB9",		"\xDE\xB8" => "\xE8\x96\xB7",		"\xDE\xB9" => "\xE8\x96\xB0",		"\xDE\xBA" => "\xE8\x97\x93",		"\xDE\xBB" => "\xE8\x97\x81",		"\xDE\xBC" => "\xE8\x97\x9C",		"\xDE\xBD" => "\xE8\x97\xBF",		"\xDE\xBE" => "\xE8\x98\xA7",		"\xDE\xBF" => "\xE8\x98\x85",		"\xDE\xC0" => "\xE8\x98\xA9",		"\xDE\xC1" => "\xE8\x98\x96",		"\xDE\xC2" => "\xE8\x98\xBC",		"\xDE\xC3" => "\xE5\xBB\xBE",		"\xDE\xC4" => "\xE5\xBC\x88",		"\xDE\xC5" => "\xE5\xA4\xBC",		"\xDE\xC6" => "\xE5\xA5\x81",		"\xDE\xC7" => "\xE8\x80\xB7",		"\xDE\xC8" => "\xE5\xA5\x95",		"\xDE\xC9" => "\xE5\xA5\x9A",		"\xDE\xCA" => "\xE5\xA5\x98",		"\xDE\xCB" => "\xE5\x8C\x8F",		"\xDE\xCC" => "\xE5\xB0\xA2",		"\xDE\xCD" => "\xE5\xB0\xA5",		"\xDE\xCE" => "\xE5\xB0\xAC",		"\xDE\xCF" => "\xE5\xB0\xB4",		"\xDE\xD0" => "\xE6\x89\x8C",		"\xDE\xD1" => "\xE6\x89\xAA",		"\xDE\xD2" => "\xE6\x8A\x9F",		"\xDE\xD3" => "\xE6\x8A\xBB",		"\xDE\xD4" => "\xE6\x8B\x8A",		"\xDE\xD5" => "\xE6\x8B\x9A",		"\xDE\xD6" => "\xE6\x8B\x97",		"\xDE\xD7" => "\xE6\x8B\xAE",		"\xDE\xD8" => "\xE6\x8C\xA2",		"\xDE\xD9" => "\xE6\x8B\xB6",		"\xDE\xDA" => "\xE6\x8C\xB9",		"\xDE\xDB" => "\xE6\x8D\x8B",		"\xDE\xDC" => "\xE6\x8D\x83",		"\xDE\xDD" => "\xE6\x8E\xAD",		"\xDE\xDE" => "\xE6\x8F\xB6",		"\xDE\xDF" => "\xE6\x8D\xB1",		"\xDE\xE0" => "\xE6\x8D\xBA",		"\xDE\xE1" => "\xE6\x8E\x8E",		"\xDE\xE2" => "\xE6\x8E\xB4",		"\xDE\xE3" => "\xE6\x8D\xAD",		"\xDE\xE4" => "\xE6\x8E\xAC",		"\xDE\xE5" => "\xE6\x8E\x8A",		"\xDE\xE6" => "\xE6\x8D\xA9",		"\xDE\xE7" => "\xE6\x8E\xAE",		"\xDE\xE8" => "\xE6\x8E\xBC",		"\xDE\xE9" => "\xE6\x8F\xB2",		"\xDE\xEA" => "\xE6\x8F\xB8",		"\xDE\xEB" => "\xE6\x8F\xA0",		"\xDE\xEC" => "\xE6\x8F\xBF",		"\xDE\xED" => "\xE6\x8F\x84",		"\xDE\xEE" => "\xE6\x8F\x9E",		"\xDE\xEF" => "\xE6\x8F\x8E",		"\xDE\xF0" => "\xE6\x91\x92",		"\xDE\xF1" => "\xE6\x8F\x86",		"\xDE\xF2" => "\xE6\x8E\xBE",		"\xDE\xF3" => "\xE6\x91\x85",		"\xDE\xF4" => "\xE6\x91\x81",		"\xDE\xF5" => "\xE6\x90\x8B",		"\xDE\xF6" => "\xE6\x90\x9B",		"\xDE\xF7" => "\xE6\x90\xA0",		"\xDE\xF8" => "\xE6\x90\x8C",		"\xDE\xF9" => "\xE6\x90\xA6",		"\xDE\xFA" => "\xE6\x90\xA1",		"\xDE\xFB" => "\xE6\x91\x9E",		"\xDE\xFC" => "\xE6\x92\x84",		"\xDE\xFD" => "\xE6\x91\xAD",		"\xDE\xFE" => "\xE6\x92\x96",		"\xDF\xA1" => "\xE6\x91\xBA",		"\xDF\xA2" => "\xE6\x92\xB7",		"\xDF\xA3" => "\xE6\x92\xB8",		"\xDF\xA4" => "\xE6\x92\x99",		"\xDF\xA5" => "\xE6\x92\xBA",		"\xDF\xA6" => "\xE6\x93\x80",		"\xDF\xA7" => "\xE6\x93\x90",		"\xDF\xA8" => "\xE6\x93\x97",		"\xDF\xA9" => "\xE6\x93\xA4",		"\xDF\xAA" => "\xE6\x93\xA2",		"\xDF\xAB" => "\xE6\x94\x89",		"\xDF\xAC" => "\xE6\x94\xA5",		"\xDF\xAD" => "\xE6\x94\xAE",		"\xDF\xAE" => "\xE5\xBC\x8B",		"\xDF\xAF" => "\xE5\xBF\x92",		"\xDF\xB0" => "\xE7\x94\x99",		"\xDF\xB1" => "\xE5\xBC\x91",		"\xDF\xB2" => "\xE5\x8D\x9F",		"\xDF\xB3" => "\xE5\x8F\xB1",		"\xDF\xB4" => "\xE5\x8F\xBD",		"\xDF\xB5" => "\xE5\x8F\xA9",		"\xDF\xB6" => "\xE5\x8F\xA8",		"\xDF\xB7" => "\xE5\x8F\xBB",		"\xDF\xB8" => "\xE5\x90\x92",		"\xDF\xB9" => "\xE5\x90\x96",		"\xDF\xBA" => "\xE5\x90\x86",		"\xDF\xBB" => "\xE5\x91\x8B",		"\xDF\xBC" => "\xE5\x91\x92",		"\xDF\xBD" => "\xE5\x91\x93",		"\xDF\xBE" => "\xE5\x91\x94",		"\xDF\xBF" => "\xE5\x91\x96",		"\xDF\xC0" => "\xE5\x91\x83",		"\xDF\xC1" => "\xE5\x90\xA1",		"\xDF\xC2" => "\xE5\x91\x97",		"\xDF\xC3" => "\xE5\x91\x99",		"\xDF\xC4" => "\xE5\x90\xA3",		"\xDF\xC5" => "\xE5\x90\xB2",		"\xDF\xC6" => "\xE5\x92\x82",		"\xDF\xC7" => "\xE5\x92\x94",		"\xDF\xC8" => "\xE5\x91\xB7",		"\xDF\xC9" => "\xE5\x91\xB1",		"\xDF\xCA" => "\xE5\x91\xA4",		"\xDF\xCB" => "\xE5\x92\x9A",		"\xDF\xCC" => "\xE5\x92\x9B",		"\xDF\xCD" => "\xE5\x92\x84",		"\xDF\xCE" => "\xE5\x91\xB6",		"\xDF\xCF" => "\xE5\x91\xA6",		"\xDF\xD0" => "\xE5\x92\x9D",		"\xDF\xD1" => "\xE5\x93\x90",		"\xDF\xD2" => "\xE5\x92\xAD",		"\xDF\xD3" => "\xE5\x93\x82",		"\xDF\xD4" => "\xE5\x92\xB4",		"\xDF\xD5" => "\xE5\x93\x92",		"\xDF\xD6" => "\xE5\x92\xA7",		"\xDF\xD7" => "\xE5\x92\xA6",		"\xDF\xD8" => "\xE5\x93\x93",		"\xDF\xD9" => "\xE5\x93\x94",		"\xDF\xDA" => "\xE5\x91\xB2",		"\xDF\xDB" => "\xE5\x92\xA3",		"\xDF\xDC" => "\xE5\x93\x95",		"\xDF\xDD" => "\xE5\x92\xBB",		"\xDF\xDE" => "\xE5\x92\xBF",		"\xDF\xDF" => "\xE5\x93\x8C",		"\xDF\xE0" => "\xE5\x93\x99",		"\xDF\xE1" => "\xE5\x93\x9A",		"\xDF\xE2" => "\xE5\x93\x9C",		"\xDF\xE3" => "\xE5\x92\xA9",		"\xDF\xE4" => "\xE5\x92\xAA",		"\xDF\xE5" => "\xE5\x92\xA4",		"\xDF\xE6" => "\xE5\x93\x9D",		"\xDF\xE7" => "\xE5\x93\x8F",		"\xDF\xE8" => "\xE5\x93\x9E",		"\xDF\xE9" => "\xE5\x94\x9B",		"\xDF\xEA" => "\xE5\x93\xA7",		"\xDF\xEB" => "\xE5\x94\xA0",		"\xDF\xEC" => "\xE5\x93\xBD",		"\xDF\xED" => "\xE5\x94\x94",		"\xDF\xEE" => "\xE5\x93\xB3",		"\xDF\xEF" => "\xE5\x94\xA2",		"\xDF\xF0" => "\xE5\x94\xA3",		"\xDF\xF1" => "\xE5\x94\x8F",		"\xDF\xF2" => "\xE5\x94\x91",		"\xDF\xF3" => "\xE5\x94\xA7",		"\xDF\xF4" => "\xE5\x94\xAA",		"\xDF\xF5" => "\xE5\x95\xA7",		"\xDF\xF6" => "\xE5\x96\x8F",		"\xDF\xF7" => "\xE5\x96\xB5",		"\xDF\xF8" => "\xE5\x95\x89",		"\xDF\xF9" => "\xE5\x95\xAD",		"\xDF\xFA" => "\xE5\x95\x81",		"\xDF\xFB" => "\xE5\x95\x95",		"\xDF\xFC" => "\xE5\x94\xBF",		"\xDF\xFD" => "\xE5\x95\x90",		"\xDF\xFE" => "\xE5\x94\xBC",		"\xE0\xA1" => "\xE5\x94\xB7",		"\xE0\xA2" => "\xE5\x95\x96",		"\xE0\xA3" => "\xE5\x95\xB5",		"\xE0\xA4" => "\xE5\x95\xB6",		"\xE0\xA5" => "\xE5\x95\xB7",		"\xE0\xA6" => "\xE5\x94\xB3",		"\xE0\xA7" => "\xE5\x94\xB0",		"\xE0\xA8" => "\xE5\x95\x9C",		"\xE0\xA9" => "\xE5\x96\x8B",		"\xE0\xAA" => "\xE5\x97\x92",		"\xE0\xAB" => "\xE5\x96\x83",		"\xE0\xAC" => "\xE5\x96\xB1",		"\xE0\xAD" => "\xE5\x96\xB9",		"\xE0\xAE" => "\xE5\x96\x88",		"\xE0\xAF" => "\xE5\x96\x81",		"\xE0\xB0" => "\xE5\x96\x9F",		"\xE0\xB1" => "\xE5\x95\xBE",		"\xE0\xB2" => "\xE5\x97\x96",		"\xE0\xB3" => "\xE5\x96\x91",		"\xE0\xB4" => "\xE5\x95\xBB",		"\xE0\xB5" => "\xE5\x97\x9F",		"\xE0\xB6" => "\xE5\x96\xBD",		"\xE0\xB7" => "\xE5\x96\xBE",		"\xE0\xB8" => "\xE5\x96\x94",		"\xE0\xB9" => "\xE5\x96\x99",		"\xE0\xBA" => "\xE5\x97\xAA",		"\xE0\xBB" => "\xE5\x97\xB7",		"\xE0\xBC" => "\xE5\x97\x89",		"\xE0\xBD" => "\xE5\x98\x9F",		"\xE0\xBE" => "\xE5\x97\x91",		"\xE0\xBF" => "\xE5\x97\xAB",		"\xE0\xC0" => "\xE5\x97\xAC",		"\xE0\xC1" => "\xE5\x97\x94",		"\xE0\xC2" => "\xE5\x97\xA6",		"\xE0\xC3" => "\xE5\x97\x9D",		"\xE0\xC4" => "\xE5\x97\x84",		"\xE0\xC5" => "\xE5\x97\xAF",		"\xE0\xC6" => "\xE5\x97\xA5",		"\xE0\xC7" => "\xE5\x97\xB2",		"\xE0\xC8" => "\xE5\x97\xB3",		"\xE0\xC9" => "\xE5\x97\x8C",		"\xE0\xCA" => "\xE5\x97\x8D",		"\xE0\xCB" => "\xE5\x97\xA8",		"\xE0\xCC" => "\xE5\x97\xB5",		"\xE0\xCD" => "\xE5\x97\xA4",		"\xE0\xCE" => "\xE8\xBE\x94",		"\xE0\xCF" => "\xE5\x98\x9E",		"\xE0\xD0" => "\xE5\x98\x88",		"\xE0\xD1" => "\xE5\x98\x8C",		"\xE0\xD2" => "\xE5\x98\x81",		"\xE0\xD3" => "\xE5\x98\xA4",		"\xE0\xD4" => "\xE5\x98\xA3",		"\xE0\xD5" => "\xE5\x97\xBE",		"\xE0\xD6" => "\xE5\x98\x80",		"\xE0\xD7" => "\xE5\x98\xA7",		"\xE0\xD8" => "\xE5\x98\xAD",		"\xE0\xD9" => "\xE5\x99\x98",		"\xE0\xDA" => "\xE5\x98\xB9",		"\xE0\xDB" => "\xE5\x99\x97",		"\xE0\xDC" => "\xE5\x98\xAC",		"\xE0\xDD" => "\xE5\x99\x8D",		"\xE0\xDE" => "\xE5\x99\xA2",		"\xE0\xDF" => "\xE5\x99\x99",		"\xE0\xE0" => "\xE5\x99\x9C",		"\xE0\xE1" => "\xE5\x99\x8C",		"\xE0\xE2" => "\xE5\x99\x94",		"\xE0\xE3" => "\xE5\x9A\x86",		"\xE0\xE4" => "\xE5\x99\xA4",		"\xE0\xE5" => "\xE5\x99\xB1",		"\xE0\xE6" => "\xE5\x99\xAB",		"\xE0\xE7" => "\xE5\x99\xBB",		"\xE0\xE8" => "\xE5\x99\xBC",		"\xE0\xE9" => "\xE5\x9A\x85",		"\xE0\xEA" => "\xE5\x9A\x93",		"\xE0\xEB" => "\xE5\x9A\xAF",		"\xE0\xEC" => "\xE5\x9B\x94",		"\xE0\xED" => "\xE5\x9B\x97",		"\xE0\xEE" => "\xE5\x9B\x9D",		"\xE0\xEF" => "\xE5\x9B\xA1",		"\xE0\xF0" => "\xE5\x9B\xB5",		"\xE0\xF1" => "\xE5\x9B\xAB",		"\xE0\xF2" => "\xE5\x9B\xB9",		"\xE0\xF3" => "\xE5\x9B\xBF",		"\xE0\xF4" => "\xE5\x9C\x84",		"\xE0\xF5" => "\xE5\x9C\x8A",		"\xE0\xF6" => "\xE5\x9C\x89",		"\xE0\xF7" => "\xE5\x9C\x9C",		"\xE0\xF8" => "\xE5\xB8\x8F",		"\xE0\xF9" => "\xE5\xB8\x99",		"\xE0\xFA" => "\xE5\xB8\x94",		"\xE0\xFB" => "\xE5\xB8\x91",		"\xE0\xFC" => "\xE5\xB8\xB1",		"\xE0\xFD" => "\xE5\xB8\xBB",		"\xE0\xFE" => "\xE5\xB8\xBC",		"\xE1\xA1" => "\xE5\xB8\xB7",		"\xE1\xA2" => "\xE5\xB9\x84",		"\xE1\xA3" => "\xE5\xB9\x94",		"\xE1\xA4" => "\xE5\xB9\x9B",		"\xE1\xA5" => "\xE5\xB9\x9E",		"\xE1\xA6" => "\xE5\xB9\xA1",		"\xE1\xA7" => "\xE5\xB2\x8C",		"\xE1\xA8" => "\xE5\xB1\xBA",		"\xE1\xA9" => "\xE5\xB2\x8D",		"\xE1\xAA" => "\xE5\xB2\x90",		"\xE1\xAB" => "\xE5\xB2\x96",		"\xE1\xAC" => "\xE5\xB2\x88",		"\xE1\xAD" => "\xE5\xB2\x98",		"\xE1\xAE" => "\xE5\xB2\x99",		"\xE1\xAF" => "\xE5\xB2\x91",		"\xE1\xB0" => "\xE5\xB2\x9A",		"\xE1\xB1" => "\xE5\xB2\x9C",		"\xE1\xB2" => "\xE5\xB2\xB5",		"\xE1\xB3" => "\xE5\xB2\xA2",		"\xE1\xB4" => "\xE5\xB2\xBD",		"\xE1\xB5" => "\xE5\xB2\xAC",		"\xE1\xB6" => "\xE5\xB2\xAB",		"\xE1\xB7" => "\xE5\xB2\xB1",		"\xE1\xB8" => "\xE5\xB2\xA3",		"\xE1\xB9" => "\xE5\xB3\x81",		"\xE1\xBA" => "\xE5\xB2\xB7",		"\xE1\xBB" => "\xE5\xB3\x84",		"\xE1\xBC" => "\xE5\xB3\x92",		"\xE1\xBD" => "\xE5\xB3\xA4",		"\xE1\xBE" => "\xE5\xB3\x8B",		"\xE1\xBF" => "\xE5\xB3\xA5",		"\xE1\xC0" => "\xE5\xB4\x82",		"\xE1\xC1" => "\xE5\xB4\x83",		"\xE1\xC2" => "\xE5\xB4\xA7",		"\xE1\xC3" => "\xE5\xB4\xA6",		"\xE1\xC4" => "\xE5\xB4\xAE",		"\xE1\xC5" => "\xE5\xB4\xA4",		"\xE1\xC6" => "\xE5\xB4\x9E",		"\xE1\xC7" => "\xE5\xB4\x86",		"\xE1\xC8" => "\xE5\xB4\x9B",		"\xE1\xC9" => "\xE5\xB5\x98",		"\xE1\xCA" => "\xE5\xB4\xBE",		"\xE1\xCB" => "\xE5\xB4\xB4",		"\xE1\xCC" => "\xE5\xB4\xBD",		"\xE1\xCD" => "\xE5\xB5\xAC",		"\xE1\xCE" => "\xE5\xB5\x9B",		"\xE1\xCF" => "\xE5\xB5\xAF",		"\xE1\xD0" => "\xE5\xB5\x9D",		"\xE1\xD1" => "\xE5\xB5\xAB",		"\xE1\xD2" => "\xE5\xB5\x8B",		"\xE1\xD3" => "\xE5\xB5\x8A",		"\xE1\xD4" => "\xE5\xB5\xA9",		"\xE1\xD5" => "\xE5\xB5\xB4",		"\xE1\xD6" => "\xE5\xB6\x82",		"\xE1\xD7" => "\xE5\xB6\x99",		"\xE1\xD8" => "\xE5\xB6\x9D",		"\xE1\xD9" => "\xE8\xB1\xB3",		"\xE1\xDA" => "\xE5\xB6\xB7",		"\xE1\xDB" => "\xE5\xB7\x85",		"\xE1\xDC" => "\xE5\xBD\xB3",		"\xE1\xDD" => "\xE5\xBD\xB7",		"\xE1\xDE" => "\xE5\xBE\x82",		"\xE1\xDF" => "\xE5\xBE\x87",		"\xE1\xE0" => "\xE5\xBE\x89",		"\xE1\xE1" => "\xE5\xBE\x8C",		"\xE1\xE2" => "\xE5\xBE\x95",		"\xE1\xE3" => "\xE5\xBE\x99",		"\xE1\xE4" => "\xE5\xBE\x9C",		"\xE1\xE5" => "\xE5\xBE\xA8",		"\xE1\xE6" => "\xE5\xBE\xAD",		"\xE1\xE7" => "\xE5\xBE\xB5",		"\xE1\xE8" => "\xE5\xBE\xBC",		"\xE1\xE9" => "\xE8\xA1\xA2",		"\xE1\xEA" => "\xE5\xBD\xA1",		"\xE1\xEB" => "\xE7\x8A\xAD",		"\xE1\xEC" => "\xE7\x8A\xB0",		"\xE1\xED" => "\xE7\x8A\xB4",		"\xE1\xEE" => "\xE7\x8A\xB7",		"\xE1\xEF" => "\xE7\x8A\xB8",		"\xE1\xF0" => "\xE7\x8B\x83",		"\xE1\xF1" => "\xE7\x8B\x81",		"\xE1\xF2" => "\xE7\x8B\x8E",		"\xE1\xF3" => "\xE7\x8B\x8D",		"\xE1\xF4" => "\xE7\x8B\x92",		"\xE1\xF5" => "\xE7\x8B\xA8",		"\xE1\xF6" => "\xE7\x8B\xAF",		"\xE1\xF7" => "\xE7\x8B\xA9",		"\xE1\xF8" => "\xE7\x8B\xB2",		"\xE1\xF9" => "\xE7\x8B\xB4",		"\xE1\xFA" => "\xE7\x8B\xB7",		"\xE1\xFB" => "\xE7\x8C\x81",		"\xE1\xFC" => "\xE7\x8B\xB3",		"\xE1\xFD" => "\xE7\x8C\x83",		"\xE1\xFE" => "\xE7\x8B\xBA",		"\xE2\xA1" => "\xE7\x8B\xBB",		"\xE2\xA2" => "\xE7\x8C\x97",		"\xE2\xA3" => "\xE7\x8C\x93",		"\xE2\xA4" => "\xE7\x8C\xA1",		"\xE2\xA5" => "\xE7\x8C\x8A",		"\xE2\xA6" => "\xE7\x8C\x9E",		"\xE2\xA7" => "\xE7\x8C\x9D",		"\xE2\xA8" => "\xE7\x8C\x95",		"\xE2\xA9" => "\xE7\x8C\xA2",		"\xE2\xAA" => "\xE7\x8C\xB9",		"\xE2\xAB" => "\xE7\x8C\xA5",		"\xE2\xAC" => "\xE7\x8C\xAC",		"\xE2\xAD" => "\xE7\x8C\xB8",		"\xE2\xAE" => "\xE7\x8C\xB1",		"\xE2\xAF" => "\xE7\x8D\x90",		"\xE2\xB0" => "\xE7\x8D\x8D",		"\xE2\xB1" => "\xE7\x8D\x97",		"\xE2\xB2" => "\xE7\x8D\xA0",		"\xE2\xB3" => "\xE7\x8D\xAC",		"\xE2\xB4" => "\xE7\x8D\xAF",		"\xE2\xB5" => "\xE7\x8D\xBE",		"\xE2\xB6" => "\xE8\x88\x9B",		"\xE2\xB7" => "\xE5\xA4\xA5",		"\xE2\xB8" => "\xE9\xA3\xA7",		"\xE2\xB9" => "\xE5\xA4\xA4",		"\xE2\xBA" => "\xE5\xA4\x82",		"\xE2\xBB" => "\xE9\xA5\xA3",		"\xE2\xBC" => "\xE9\xA5\xA7",		"\xE2\xBD" => "\xE9\xA5\xA8",		"\xE2\xBE" => "\xE9\xA5\xA9",		"\xE2\xBF" => "\xE9\xA5\xAA",		"\xE2\xC0" => "\xE9\xA5\xAB",		"\xE2\xC1" => "\xE9\xA5\xAC",		"\xE2\xC2" => "\xE9\xA5\xB4",		"\xE2\xC3" => "\xE9\xA5\xB7",		"\xE2\xC4" => "\xE9\xA5\xBD",		"\xE2\xC5" => "\xE9\xA6\x80",		"\xE2\xC6" => "\xE9\xA6\x84",		"\xE2\xC7" => "\xE9\xA6\x87",		"\xE2\xC8" => "\xE9\xA6\x8A",		"\xE2\xC9" => "\xE9\xA6\x8D",		"\xE2\xCA" => "\xE9\xA6\x90",		"\xE2\xCB" => "\xE9\xA6\x91",		"\xE2\xCC" => "\xE9\xA6\x93",		"\xE2\xCD" => "\xE9\xA6\x94",		"\xE2\xCE" => "\xE9\xA6\x95",		"\xE2\xCF" => "\xE5\xBA\x80",		"\xE2\xD0" => "\xE5\xBA\x91",		"\xE2\xD1" => "\xE5\xBA\x8B",		"\xE2\xD2" => "\xE5\xBA\x96",		"\xE2\xD3" => "\xE5\xBA\xA5",		"\xE2\xD4" => "\xE5\xBA\xA0",		"\xE2\xD5" => "\xE5\xBA\xB9",		"\xE2\xD6" => "\xE5\xBA\xB5",		"\xE2\xD7" => "\xE5\xBA\xBE",		"\xE2\xD8" => "\xE5\xBA\xB3",		"\xE2\xD9" => "\xE8\xB5\x93",		"\xE2\xDA" => "\xE5\xBB\x92",		"\xE2\xDB" => "\xE5\xBB\x91",		"\xE2\xDC" => "\xE5\xBB\x9B",		"\xE2\xDD" => "\xE5\xBB\xA8",		"\xE2\xDE" => "\xE5\xBB\xAA",		"\xE2\xDF" => "\xE8\x86\xBA",		"\xE2\xE0" => "\xE5\xBF\x84",		"\xE2\xE1" => "\xE5\xBF\x89",		"\xE2\xE2" => "\xE5\xBF\x96",		"\xE2\xE3" => "\xE5\xBF\x8F",		"\xE2\xE4" => "\xE6\x80\x83",		"\xE2\xE5" => "\xE5\xBF\xAE",		"\xE2\xE6" => "\xE6\x80\x84",		"\xE2\xE7" => "\xE5\xBF\xA1",		"\xE2\xE8" => "\xE5\xBF\xA4",		"\xE2\xE9" => "\xE5\xBF\xBE",		"\xE2\xEA" => "\xE6\x80\x85",		"\xE2\xEB" => "\xE6\x80\x86",		"\xE2\xEC" => "\xE5\xBF\xAA",		"\xE2\xED" => "\xE5\xBF\xAD",		"\xE2\xEE" => "\xE5\xBF\xB8",		"\xE2\xEF" => "\xE6\x80\x99",		"\xE2\xF0" => "\xE6\x80\xB5",		"\xE2\xF1" => "\xE6\x80\xA6",		"\xE2\xF2" => "\xE6\x80\x9B",		"\xE2\xF3" => "\xE6\x80\x8F",		"\xE2\xF4" => "\xE6\x80\x8D",		"\xE2\xF5" => "\xE6\x80\xA9",		"\xE2\xF6" => "\xE6\x80\xAB",		"\xE2\xF7" => "\xE6\x80\x8A",		"\xE2\xF8" => "\xE6\x80\xBF",		"\xE2\xF9" => "\xE6\x80\xA1",		"\xE2\xFA" => "\xE6\x81\xB8",		"\xE2\xFB" => "\xE6\x81\xB9",		"\xE2\xFC" => "\xE6\x81\xBB",		"\xE2\xFD" => "\xE6\x81\xBA",		"\xE2\xFE" => "\xE6\x81\x82",		"\xE3\xA1" => "\xE6\x81\xAA",		"\xE3\xA2" => "\xE6\x81\xBD",		"\xE3\xA3" => "\xE6\x82\x96",		"\xE3\xA4" => "\xE6\x82\x9A",		"\xE3\xA5" => "\xE6\x82\xAD",		"\xE3\xA6" => "\xE6\x82\x9D",		"\xE3\xA7" => "\xE6\x82\x83",		"\xE3\xA8" => "\xE6\x82\x92",		"\xE3\xA9" => "\xE6\x82\x8C",		"\xE3\xAA" => "\xE6\x82\x9B",		"\xE3\xAB" => "\xE6\x83\xAC",		"\xE3\xAC" => "\xE6\x82\xBB",		"\xE3\xAD" => "\xE6\x82\xB1",		"\xE3\xAE" => "\xE6\x83\x9D",		"\xE3\xAF" => "\xE6\x83\x98",		"\xE3\xB0" => "\xE6\x83\x86",		"\xE3\xB1" => "\xE6\x83\x9A",		"\xE3\xB2" => "\xE6\x82\xB4",		"\xE3\xB3" => "\xE6\x84\xA0",		"\xE3\xB4" => "\xE6\x84\xA6",		"\xE3\xB5" => "\xE6\x84\x95",		"\xE3\xB6" => "\xE6\x84\xA3",		"\xE3\xB7" => "\xE6\x83\xB4",		"\xE3\xB8" => "\xE6\x84\x80",		"\xE3\xB9" => "\xE6\x84\x8E",		"\xE3\xBA" => "\xE6\x84\xAB",		"\xE3\xBB" => "\xE6\x85\x8A",		"\xE3\xBC" => "\xE6\x85\xB5",		"\xE3\xBD" => "\xE6\x86\xAC",		"\xE3\xBE" => "\xE6\x86\x94",		"\xE3\xBF" => "\xE6\x86\xA7",		"\xE3\xC0" => "\xE6\x86\xB7",		"\xE3\xC1" => "\xE6\x87\x94",		"\xE3\xC2" => "\xE6\x87\xB5",		"\xE3\xC3" => "\xE5\xBF\x9D",		"\xE3\xC4" => "\xE9\x9A\xB3",		"\xE3\xC5" => "\xE9\x97\xA9",		"\xE3\xC6" => "\xE9\x97\xAB",		"\xE3\xC7" => "\xE9\x97\xB1",		"\xE3\xC8" => "\xE9\x97\xB3",		"\xE3\xC9" => "\xE9\x97\xB5",		"\xE3\xCA" => "\xE9\x97\xB6",		"\xE3\xCB" => "\xE9\x97\xBC",		"\xE3\xCC" => "\xE9\x97\xBE",		"\xE3\xCD" => "\xE9\x98\x83",		"\xE3\xCE" => "\xE9\x98\x84",		"\xE3\xCF" => "\xE9\x98\x86",		"\xE3\xD0" => "\xE9\x98\x88",		"\xE3\xD1" => "\xE9\x98\x8A",		"\xE3\xD2" => "\xE9\x98\x8B",		"\xE3\xD3" => "\xE9\x98\x8C",		"\xE3\xD4" => "\xE9\x98\x8D",		"\xE3\xD5" => "\xE9\x98\x8F",		"\xE3\xD6" => "\xE9\x98\x92",		"\xE3\xD7" => "\xE9\x98\x95",		"\xE3\xD8" => "\xE9\x98\x96",		"\xE3\xD9" => "\xE9\x98\x97",		"\xE3\xDA" => "\xE9\x98\x99",		"\xE3\xDB" => "\xE9\x98\x9A",		"\xE3\xDC" => "\xE4\xB8\xAC",		"\xE3\xDD" => "\xE7\x88\xBF",		"\xE3\xDE" => "\xE6\x88\x95",		"\xE3\xDF" => "\xE6\xB0\xB5",		"\xE3\xE0" => "\xE6\xB1\x94",		"\xE3\xE1" => "\xE6\xB1\x9C",		"\xE3\xE2" => "\xE6\xB1\x8A",		"\xE3\xE3" => "\xE6\xB2\xA3",		"\xE3\xE4" => "\xE6\xB2\x85",		"\xE3\xE5" => "\xE6\xB2\x90",		"\xE3\xE6" => "\xE6\xB2\x94",		"\xE3\xE7" => "\xE6\xB2\x8C",		"\xE3\xE8" => "\xE6\xB1\xA8",		"\xE3\xE9" => "\xE6\xB1\xA9",		"\xE3\xEA" => "\xE6\xB1\xB4",		"\xE3\xEB" => "\xE6\xB1\xB6",		"\xE3\xEC" => "\xE6\xB2\x86",		"\xE3\xED" => "\xE6\xB2\xA9",		"\xE3\xEE" => "\xE6\xB3\x90",		"\xE3\xEF" => "\xE6\xB3\x94",		"\xE3\xF0" => "\xE6\xB2\xAD",		"\xE3\xF1" => "\xE6\xB3\xB7",		"\xE3\xF2" => "\xE6\xB3\xB8",		"\xE3\xF3" => "\xE6\xB3\xB1",		"\xE3\xF4" => "\xE6\xB3\x97",		"\xE3\xF5" => "\xE6\xB2\xB2",		"\xE3\xF6" => "\xE6\xB3\xA0",		"\xE3\xF7" => "\xE6\xB3\x96",		"\xE3\xF8" => "\xE6\xB3\xBA",		"\xE3\xF9" => "\xE6\xB3\xAB",		"\xE3\xFA" => "\xE6\xB3\xAE",		"\xE3\xFB" => "\xE6\xB2\xB1",		"\xE3\xFC" => "\xE6\xB3\x93",		"\xE3\xFD" => "\xE6\xB3\xAF",		"\xE3\xFE" => "\xE6\xB3\xBE",		"\xE4\xA1" => "\xE6\xB4\xB9",		"\xE4\xA2" => "\xE6\xB4\xA7",		"\xE4\xA3" => "\xE6\xB4\x8C",		"\xE4\xA4" => "\xE6\xB5\x83",		"\xE4\xA5" => "\xE6\xB5\x88",		"\xE4\xA6" => "\xE6\xB4\x87",		"\xE4\xA7" => "\xE6\xB4\x84",		"\xE4\xA8" => "\xE6\xB4\x99",		"\xE4\xA9" => "\xE6\xB4\x8E",		"\xE4\xAA" => "\xE6\xB4\xAB",		"\xE4\xAB" => "\xE6\xB5\x8D",		"\xE4\xAC" => "\xE6\xB4\xAE",		"\xE4\xAD" => "\xE6\xB4\xB5",		"\xE4\xAE" => "\xE6\xB4\x9A",		"\xE4\xAF" => "\xE6\xB5\x8F",		"\xE4\xB0" => "\xE6\xB5\x92",		"\xE4\xB1" => "\xE6\xB5\x94",		"\xE4\xB2" => "\xE6\xB4\xB3",		"\xE4\xB3" => "\xE6\xB6\x91",		"\xE4\xB4" => "\xE6\xB5\xAF",		"\xE4\xB5" => "\xE6\xB6\x9E",		"\xE4\xB6" => "\xE6\xB6\xA0",		"\xE4\xB7" => "\xE6\xB5\x9E",		"\xE4\xB8" => "\xE6\xB6\x93",		"\xE4\xB9" => "\xE6\xB6\x94",		"\xE4\xBA" => "\xE6\xB5\x9C",		"\xE4\xBB" => "\xE6\xB5\xA0",		"\xE4\xBC" => "\xE6\xB5\xBC",		"\xE4\xBD" => "\xE6\xB5\xA3",		"\xE4\xBE" => "\xE6\xB8\x9A",		"\xE4\xBF" => "\xE6\xB7\x87",		"\xE4\xC0" => "\xE6\xB7\x85",		"\xE4\xC1" => "\xE6\xB7\x9E",		"\xE4\xC2" => "\xE6\xB8\x8E",		"\xE4\xC3" => "\xE6\xB6\xBF",		"\xE4\xC4" => "\xE6\xB7\xA0",		"\xE4\xC5" => "\xE6\xB8\x91",		"\xE4\xC6" => "\xE6\xB7\xA6",		"\xE4\xC7" => "\xE6\xB7\x9D",		"\xE4\xC8" => "\xE6\xB7\x99",		"\xE4\xC9" => "\xE6\xB8\x96",		"\xE4\xCA" => "\xE6\xB6\xAB",		"\xE4\xCB" => "\xE6\xB8\x8C",		"\xE4\xCC" => "\xE6\xB6\xAE",		"\xE4\xCD" => "\xE6\xB8\xAB",		"\xE4\xCE" => "\xE6\xB9\xAE",		"\xE4\xCF" => "\xE6\xB9\x8E",		"\xE4\xD0" => "\xE6\xB9\xAB",		"\xE4\xD1" => "\xE6\xBA\xB2",		"\xE4\xD2" => "\xE6\xB9\x9F",		"\xE4\xD3" => "\xE6\xBA\x86",		"\xE4\xD4" => "\xE6\xB9\x93",		"\xE4\xD5" => "\xE6\xB9\x94",		"\xE4\xD6" => "\xE6\xB8\xB2",		"\xE4\xD7" => "\xE6\xB8\xA5",		"\xE4\xD8" => "\xE6\xB9\x84",		"\xE4\xD9" => "\xE6\xBB\x9F",		"\xE4\xDA" => "\xE6\xBA\xB1",		"\xE4\xDB" => "\xE6\xBA\x98",		"\xE4\xDC" => "\xE6\xBB\xA0",		"\xE4\xDD" => "\xE6\xBC\xAD",		"\xE4\xDE" => "\xE6\xBB\xA2",		"\xE4\xDF" => "\xE6\xBA\xA5",		"\xE4\xE0" => "\xE6\xBA\xA7",		"\xE4\xE1" => "\xE6\xBA\xBD",		"\xE4\xE2" => "\xE6\xBA\xBB",		"\xE4\xE3" => "\xE6\xBA\xB7",		"\xE4\xE4" => "\xE6\xBB\x97",		"\xE4\xE5" => "\xE6\xBA\xB4",		"\xE4\xE6" => "\xE6\xBB\x8F",		"\xE4\xE7" => "\xE6\xBA\x8F",		"\xE4\xE8" => "\xE6\xBB\x82",		"\xE4\xE9" => "\xE6\xBA\x9F",		"\xE4\xEA" => "\xE6\xBD\xA2",		"\xE4\xEB" => "\xE6\xBD\x86",		"\xE4\xEC" => "\xE6\xBD\x87",		"\xE4\xED" => "\xE6\xBC\xA4",		"\xE4\xEE" => "\xE6\xBC\x95",		"\xE4\xEF" => "\xE6\xBB\xB9",		"\xE4\xF0" => "\xE6\xBC\xAF",		"\xE4\xF1" => "\xE6\xBC\xB6",		"\xE4\xF2" => "\xE6\xBD\x8B",		"\xE4\xF3" => "\xE6\xBD\xB4",		"\xE4\xF4" => "\xE6\xBC\xAA",		"\xE4\xF5" => "\xE6\xBC\x89",		"\xE4\xF6" => "\xE6\xBC\xA9",		"\xE4\xF7" => "\xE6\xBE\x89",		"\xE4\xF8" => "\xE6\xBE\x8D",		"\xE4\xF9" => "\xE6\xBE\x8C",		"\xE4\xFA" => "\xE6\xBD\xB8",		"\xE4\xFB" => "\xE6\xBD\xB2",		"\xE4\xFC" => "\xE6\xBD\xBC",		"\xE4\xFD" => "\xE6\xBD\xBA",		"\xE4\xFE" => "\xE6\xBF\x91",		"\xE5\xA1" => "\xE6\xBF\x89",		"\xE5\xA2" => "\xE6\xBE\xA7",		"\xE5\xA3" => "\xE6\xBE\xB9",		"\xE5\xA4" => "\xE6\xBE\xB6",		"\xE5\xA5" => "\xE6\xBF\x82",		"\xE5\xA6" => "\xE6\xBF\xA1",		"\xE5\xA7" => "\xE6\xBF\xAE",		"\xE5\xA8" => "\xE6\xBF\x9E",		"\xE5\xA9" => "\xE6\xBF\xA0",		"\xE5\xAA" => "\xE6\xBF\xAF",		"\xE5\xAB" => "\xE7\x80\x9A",		"\xE5\xAC" => "\xE7\x80\xA3",		"\xE5\xAD" => "\xE7\x80\x9B",		"\xE5\xAE" => "\xE7\x80\xB9",		"\xE5\xAF" => "\xE7\x80\xB5",		"\xE5\xB0" => "\xE7\x81\x8F",		"\xE5\xB1" => "\xE7\x81\x9E",		"\xE5\xB2" => "\xE5\xAE\x80",		"\xE5\xB3" => "\xE5\xAE\x84",		"\xE5\xB4" => "\xE5\xAE\x95",		"\xE5\xB5" => "\xE5\xAE\x93",		"\xE5\xB6" => "\xE5\xAE\xA5",		"\xE5\xB7" => "\xE5\xAE\xB8",		"\xE5\xB8" => "\xE7\x94\xAF",		"\xE5\xB9" => "\xE9\xAA\x9E",		"\xE5\xBA" => "\xE6\x90\xB4",		"\xE5\xBB" => "\xE5\xAF\xA4",		"\xE5\xBC" => "\xE5\xAF\xAE",		"\xE5\xBD" => "\xE8\xA4\xB0",		"\xE5\xBE" => "\xE5\xAF\xB0",		"\xE5\xBF" => "\xE8\xB9\x87",		"\xE5\xC0" => "\xE8\xAC\x87",		"\xE5\xC1" => "\xE8\xBE\xB6",		"\xE5\xC2" => "\xE8\xBF\x93",		"\xE5\xC3" => "\xE8\xBF\x95",		"\xE5\xC4" => "\xE8\xBF\xA5",		"\xE5\xC5" => "\xE8\xBF\xAE",		"\xE5\xC6" => "\xE8\xBF\xA4",		"\xE5\xC7" => "\xE8\xBF\xA9",		"\xE5\xC8" => "\xE8\xBF\xA6",		"\xE5\xC9" => "\xE8\xBF\xB3",		"\xE5\xCA" => "\xE8\xBF\xA8",		"\xE5\xCB" => "\xE9\x80\x85",		"\xE5\xCC" => "\xE9\x80\x84",		"\xE5\xCD" => "\xE9\x80\x8B",		"\xE5\xCE" => "\xE9\x80\xA6",		"\xE5\xCF" => "\xE9\x80\x91",		"\xE5\xD0" => "\xE9\x80\x8D",		"\xE5\xD1" => "\xE9\x80\x96",		"\xE5\xD2" => "\xE9\x80\xA1",		"\xE5\xD3" => "\xE9\x80\xB5",		"\xE5\xD4" => "\xE9\x80\xB6",		"\xE5\xD5" => "\xE9\x80\xAD",		"\xE5\xD6" => "\xE9\x80\xAF",		"\xE5\xD7" => "\xE9\x81\x84",		"\xE5\xD8" => "\xE9\x81\x91",		"\xE5\xD9" => "\xE9\x81\x92",		"\xE5\xDA" => "\xE9\x81\x90",		"\xE5\xDB" => "\xE9\x81\xA8",		"\xE5\xDC" => "\xE9\x81\x98",		"\xE5\xDD" => "\xE9\x81\xA2",		"\xE5\xDE" => "\xE9\x81\x9B",		"\xE5\xDF" => "\xE6\x9A\xB9",		"\xE5\xE0" => "\xE9\x81\xB4",		"\xE5\xE1" => "\xE9\x81\xBD",		"\xE5\xE2" => "\xE9\x82\x82",		"\xE5\xE3" => "\xE9\x82\x88",		"\xE5\xE4" => "\xE9\x82\x83",		"\xE5\xE5" => "\xE9\x82\x8B",		"\xE5\xE6" => "\xE5\xBD\x90",		"\xE5\xE7" => "\xE5\xBD\x97",		"\xE5\xE8" => "\xE5\xBD\x96",		"\xE5\xE9" => "\xE5\xBD\x98",		"\xE5\xEA" => "\xE5\xB0\xBB",		"\xE5\xEB" => "\xE5\x92\xAB",		"\xE5\xEC" => "\xE5\xB1\x90",		"\xE5\xED" => "\xE5\xB1\x99",		"\xE5\xEE" => "\xE5\xAD\xB1",		"\xE5\xEF" => "\xE5\xB1\xA3",		"\xE5\xF0" => "\xE5\xB1\xA6",		"\xE5\xF1" => "\xE7\xBE\xBC",		"\xE5\xF2" => "\xE5\xBC\xAA",		"\xE5\xF3" => "\xE5\xBC\xA9",		"\xE5\xF4" => "\xE5\xBC\xAD",		"\xE5\xF5" => "\xE8\x89\xB4",		"\xE5\xF6" => "\xE5\xBC\xBC",		"\xE5\xF7" => "\xE9\xAC\xBB",		"\xE5\xF8" => "\xE5\xB1\xAE",		"\xE5\xF9" => "\xE5\xA6\x81",		"\xE5\xFA" => "\xE5\xA6\x83",		"\xE5\xFB" => "\xE5\xA6\x8D",		"\xE5\xFC" => "\xE5\xA6\xA9",		"\xE5\xFD" => "\xE5\xA6\xAA",		"\xE5\xFE" => "\xE5\xA6\xA3",		"\xE6\xA1" => "\xE5\xA6\x97",		"\xE6\xA2" => "\xE5\xA7\x8A",		"\xE6\xA3" => "\xE5\xA6\xAB",		"\xE6\xA4" => "\xE5\xA6\x9E",		"\xE6\xA5" => "\xE5\xA6\xA4",		"\xE6\xA6" => "\xE5\xA7\x92",		"\xE6\xA7" => "\xE5\xA6\xB2",		"\xE6\xA8" => "\xE5\xA6\xAF",		"\xE6\xA9" => "\xE5\xA7\x97",		"\xE6\xAA" => "\xE5\xA6\xBE",		"\xE6\xAB" => "\xE5\xA8\x85",		"\xE6\xAC" => "\xE5\xA8\x86",		"\xE6\xAD" => "\xE5\xA7\x9D",		"\xE6\xAE" => "\xE5\xA8\x88",		"\xE6\xAF" => "\xE5\xA7\xA3",		"\xE6\xB0" => "\xE5\xA7\x98",		"\xE6\xB1" => "\xE5\xA7\xB9",		"\xE6\xB2" => "\xE5\xA8\x8C",		"\xE6\xB3" => "\xE5\xA8\x89",		"\xE6\xB4" => "\xE5\xA8\xB2",		"\xE6\xB5" => "\xE5\xA8\xB4",		"\xE6\xB6" => "\xE5\xA8\x91",		"\xE6\xB7" => "\xE5\xA8\xA3",		"\xE6\xB8" => "\xE5\xA8\x93",		"\xE6\xB9" => "\xE5\xA9\x80",		"\xE6\xBA" => "\xE5\xA9\xA7",		"\xE6\xBB" => "\xE5\xA9\x8A",		"\xE6\xBC" => "\xE5\xA9\x95",		"\xE6\xBD" => "\xE5\xA8\xBC",		"\xE6\xBE" => "\xE5\xA9\xA2",		"\xE6\xBF" => "\xE5\xA9\xB5",		"\xE6\xC0" => "\xE8\x83\xAC",		"\xE6\xC1" => "\xE5\xAA\xAA",		"\xE6\xC2" => "\xE5\xAA\x9B",		"\xE6\xC3" => "\xE5\xA9\xB7",		"\xE6\xC4" => "\xE5\xA9\xBA",		"\xE6\xC5" => "\xE5\xAA\xBE",		"\xE6\xC6" => "\xE5\xAB\xAB",		"\xE6\xC7" => "\xE5\xAA\xB2",		"\xE6\xC8" => "\xE5\xAB\x92",		"\xE6\xC9" => "\xE5\xAB\x94",		"\xE6\xCA" => "\xE5\xAA\xB8",		"\xE6\xCB" => "\xE5\xAB\xA0",		"\xE6\xCC" => "\xE5\xAB\xA3",		"\xE6\xCD" => "\xE5\xAB\xB1",		"\xE6\xCE" => "\xE5\xAB\x96",		"\xE6\xCF" => "\xE5\xAB\xA6",		"\xE6\xD0" => "\xE5\xAB\x98",		"\xE6\xD1" => "\xE5\xAB\x9C",		"\xE6\xD2" => "\xE5\xAC\x89",		"\xE6\xD3" => "\xE5\xAC\x97",		"\xE6\xD4" => "\xE5\xAC\x96",		"\xE6\xD5" => "\xE5\xAC\xB2",		"\xE6\xD6" => "\xE5\xAC\xB7",		"\xE6\xD7" => "\xE5\xAD\x80",		"\xE6\xD8" => "\xE5\xB0\x95",		"\xE6\xD9" => "\xE5\xB0\x9C",		"\xE6\xDA" => "\xE5\xAD\x9A",		"\xE6\xDB" => "\xE5\xAD\xA5",		"\xE6\xDC" => "\xE5\xAD\xB3",		"\xE6\xDD" => "\xE5\xAD\x91",		"\xE6\xDE" => "\xE5\xAD\x93",		"\xE6\xDF" => "\xE5\xAD\xA2",		"\xE6\xE0" => "\xE9\xA9\xB5",		"\xE6\xE1" => "\xE9\xA9\xB7",		"\xE6\xE2" => "\xE9\xA9\xB8",		"\xE6\xE3" => "\xE9\xA9\xBA",		"\xE6\xE4" => "\xE9\xA9\xBF",		"\xE6\xE5" => "\xE9\xA9\xBD",		"\xE6\xE6" => "\xE9\xAA\x80",		"\xE6\xE7" => "\xE9\xAA\x81",		"\xE6\xE8" => "\xE9\xAA\x85",		"\xE6\xE9" => "\xE9\xAA\x88",		"\xE6\xEA" => "\xE9\xAA\x8A",		"\xE6\xEB" => "\xE9\xAA\x90",		"\xE6\xEC" => "\xE9\xAA\x92",		"\xE6\xED" => "\xE9\xAA\x93",		"\xE6\xEE" => "\xE9\xAA\x96",		"\xE6\xEF" => "\xE9\xAA\x98",		"\xE6\xF0" => "\xE9\xAA\x9B",		"\xE6\xF1" => "\xE9\xAA\x9C",		"\xE6\xF2" => "\xE9\xAA\x9D",		"\xE6\xF3" => "\xE9\xAA\x9F",		"\xE6\xF4" => "\xE9\xAA\xA0",		"\xE6\xF5" => "\xE9\xAA\xA2",		"\xE6\xF6" => "\xE9\xAA\xA3",		"\xE6\xF7" => "\xE9\xAA\xA5",		"\xE6\xF8" => "\xE9\xAA\xA7",		"\xE6\xF9" => "\xE7\xBA\x9F",		"\xE6\xFA" => "\xE7\xBA\xA1",		"\xE6\xFB" => "\xE7\xBA\xA3",		"\xE6\xFC" => "\xE7\xBA\xA5",		"\xE6\xFD" => "\xE7\xBA\xA8",		"\xE6\xFE" => "\xE7\xBA\xA9",		"\xE7\xA1" => "\xE7\xBA\xAD",		"\xE7\xA2" => "\xE7\xBA\xB0",		"\xE7\xA3" => "\xE7\xBA\xBE",		"\xE7\xA4" => "\xE7\xBB\x80",		"\xE7\xA5" => "\xE7\xBB\x81",		"\xE7\xA6" => "\xE7\xBB\x82",		"\xE7\xA7" => "\xE7\xBB\x89",		"\xE7\xA8" => "\xE7\xBB\x8B",		"\xE7\xA9" => "\xE7\xBB\x8C",		"\xE7\xAA" => "\xE7\xBB\x90",		"\xE7\xAB" => "\xE7\xBB\x94",		"\xE7\xAC" => "\xE7\xBB\x97",		"\xE7\xAD" => "\xE7\xBB\x9B",		"\xE7\xAE" => "\xE7\xBB\xA0",		"\xE7\xAF" => "\xE7\xBB\xA1",		"\xE7\xB0" => "\xE7\xBB\xA8",		"\xE7\xB1" => "\xE7\xBB\xAB",		"\xE7\xB2" => "\xE7\xBB\xAE",		"\xE7\xB3" => "\xE7\xBB\xAF",		"\xE7\xB4" => "\xE7\xBB\xB1",		"\xE7\xB5" => "\xE7\xBB\xB2",		"\xE7\xB6" => "\xE7\xBC\x8D",		"\xE7\xB7" => "\xE7\xBB\xB6",		"\xE7\xB8" => "\xE7\xBB\xBA",		"\xE7\xB9" => "\xE7\xBB\xBB",		"\xE7\xBA" => "\xE7\xBB\xBE",		"\xE7\xBB" => "\xE7\xBC\x81",		"\xE7\xBC" => "\xE7\xBC\x82",		"\xE7\xBD" => "\xE7\xBC\x83",		"\xE7\xBE" => "\xE7\xBC\x87",		"\xE7\xBF" => "\xE7\xBC\x88",		"\xE7\xC0" => "\xE7\xBC\x8B",		"\xE7\xC1" => "\xE7\xBC\x8C",		"\xE7\xC2" => "\xE7\xBC\x8F",		"\xE7\xC3" => "\xE7\xBC\x91",		"\xE7\xC4" => "\xE7\xBC\x92",		"\xE7\xC5" => "\xE7\xBC\x97",		"\xE7\xC6" => "\xE7\xBC\x99",		"\xE7\xC7" => "\xE7\xBC\x9C",		"\xE7\xC8" => "\xE7\xBC\x9B",		"\xE7\xC9" => "\xE7\xBC\x9F",		"\xE7\xCA" => "\xE7\xBC\xA1",		"\xE7\xCB" => "\xE7\xBC\xA2",		"\xE7\xCC" => "\xE7\xBC\xA3",		"\xE7\xCD" => "\xE7\xBC\xA4",		"\xE7\xCE" => "\xE7\xBC\xA5",		"\xE7\xCF" => "\xE7\xBC\xA6",		"\xE7\xD0" => "\xE7\xBC\xA7",		"\xE7\xD1" => "\xE7\xBC\xAA",		"\xE7\xD2" => "\xE7\xBC\xAB",		"\xE7\xD3" => "\xE7\xBC\xAC",		"\xE7\xD4" => "\xE7\xBC\xAD",		"\xE7\xD5" => "\xE7\xBC\xAF",		"\xE7\xD6" => "\xE7\xBC\xB0",		"\xE7\xD7" => "\xE7\xBC\xB1",		"\xE7\xD8" => "\xE7\xBC\xB2",		"\xE7\xD9" => "\xE7\xBC\xB3",		"\xE7\xDA" => "\xE7\xBC\xB5",		"\xE7\xDB" => "\xE5\xB9\xBA",		"\xE7\xDC" => "\xE7\x95\xBF",		"\xE7\xDD" => "\xE5\xB7\x9B",		"\xE7\xDE" => "\xE7\x94\xBE",		"\xE7\xDF" => "\xE9\x82\x95",		"\xE7\xE0" => "\xE7\x8E\x8E",		"\xE7\xE1" => "\xE7\x8E\x91",		"\xE7\xE2" => "\xE7\x8E\xAE",		"\xE7\xE3" => "\xE7\x8E\xA2",		"\xE7\xE4" => "\xE7\x8E\x9F",		"\xE7\xE5" => "\xE7\x8F\x8F",		"\xE7\xE6" => "\xE7\x8F\x82",		"\xE7\xE7" => "\xE7\x8F\x91",		"\xE7\xE8" => "\xE7\x8E\xB7",		"\xE7\xE9" => "\xE7\x8E\xB3",		"\xE7\xEA" => "\xE7\x8F\x80",		"\xE7\xEB" => "\xE7\x8F\x89",		"\xE7\xEC" => "\xE7\x8F\x88",		"\xE7\xED" => "\xE7\x8F\xA5",		"\xE7\xEE" => "\xE7\x8F\x99",		"\xE7\xEF" => "\xE9\xA1\xBC",		"\xE7\xF0" => "\xE7\x90\x8A",		"\xE7\xF1" => "\xE7\x8F\xA9",		"\xE7\xF2" => "\xE7\x8F\xA7",		"\xE7\xF3" => "\xE7\x8F\x9E",		"\xE7\xF4" => "\xE7\x8E\xBA",		"\xE7\xF5" => "\xE7\x8F\xB2",		"\xE7\xF6" => "\xE7\x90\x8F",		"\xE7\xF7" => "\xE7\x90\xAA",		"\xE7\xF8" => "\xE7\x91\x9B",		"\xE7\xF9" => "\xE7\x90\xA6",		"\xE7\xFA" => "\xE7\x90\xA5",		"\xE7\xFB" => "\xE7\x90\xA8",		"\xE7\xFC" => "\xE7\x90\xB0",		"\xE7\xFD" => "\xE7\x90\xAE",		"\xE7\xFE" => "\xE7\x90\xAC",		"\xE8\xA1" => "\xE7\x90\x9B",		"\xE8\xA2" => "\xE7\x90\x9A",		"\xE8\xA3" => "\xE7\x91\x81",		"\xE8\xA4" => "\xE7\x91\x9C",		"\xE8\xA5" => "\xE7\x91\x97",		"\xE8\xA6" => "\xE7\x91\x95",		"\xE8\xA7" => "\xE7\x91\x99",		"\xE8\xA8" => "\xE7\x91\xB7",		"\xE8\xA9" => "\xE7\x91\xAD",		"\xE8\xAA" => "\xE7\x91\xBE",		"\xE8\xAB" => "\xE7\x92\x9C",		"\xE8\xAC" => "\xE7\x92\x8E",		"\xE8\xAD" => "\xE7\x92\x80",		"\xE8\xAE" => "\xE7\x92\x81",		"\xE8\xAF" => "\xE7\x92\x87",		"\xE8\xB0" => "\xE7\x92\x8B",		"\xE8\xB1" => "\xE7\x92\x9E",		"\xE8\xB2" => "\xE7\x92\xA8",		"\xE8\xB3" => "\xE7\x92\xA9",		"\xE8\xB4" => "\xE7\x92\x90",		"\xE8\xB5" => "\xE7\x92\xA7",		"\xE8\xB6" => "\xE7\x93\x92",		"\xE8\xB7" => "\xE7\x92\xBA",		"\xE8\xB8" => "\xE9\x9F\xAA",		"\xE8\xB9" => "\xE9\x9F\xAB",		"\xE8\xBA" => "\xE9\x9F\xAC",		"\xE8\xBB" => "\xE6\x9D\x8C",		"\xE8\xBC" => "\xE6\x9D\x93",		"\xE8\xBD" => "\xE6\x9D\x9E",		"\xE8\xBE" => "\xE6\x9D\x88",		"\xE8\xBF" => "\xE6\x9D\xA9",		"\xE8\xC0" => "\xE6\x9E\xA5",		"\xE8\xC1" => "\xE6\x9E\x87",		"\xE8\xC2" => "\xE6\x9D\xAA",		"\xE8\xC3" => "\xE6\x9D\xB3",		"\xE8\xC4" => "\xE6\x9E\x98",		"\xE8\xC5" => "\xE6\x9E\xA7",		"\xE8\xC6" => "\xE6\x9D\xB5",		"\xE8\xC7" => "\xE6\x9E\xA8",		"\xE8\xC8" => "\xE6\x9E\x9E",		"\xE8\xC9" => "\xE6\x9E\xAD",		"\xE8\xCA" => "\xE6\x9E\x8B",		"\xE8\xCB" => "\xE6\x9D\xB7",		"\xE8\xCC" => "\xE6\x9D\xBC",		"\xE8\xCD" => "\xE6\x9F\xB0",		"\xE8\xCE" => "\xE6\xA0\x89",		"\xE8\xCF" => "\xE6\x9F\x98",		"\xE8\xD0" => "\xE6\xA0\x8A",		"\xE8\xD1" => "\xE6\x9F\xA9",		"\xE8\xD2" => "\xE6\x9E\xB0",		"\xE8\xD3" => "\xE6\xA0\x8C",		"\xE8\xD4" => "\xE6\x9F\x99",		"\xE8\xD5" => "\xE6\x9E\xB5",		"\xE8\xD6" => "\xE6\x9F\x9A",		"\xE8\xD7" => "\xE6\x9E\xB3",		"\xE8\xD8" => "\xE6\x9F\x9D",		"\xE8\xD9" => "\xE6\xA0\x80",		"\xE8\xDA" => "\xE6\x9F\x83",		"\xE8\xDB" => "\xE6\x9E\xB8",		"\xE8\xDC" => "\xE6\x9F\xA2",		"\xE8\xDD" => "\xE6\xA0\x8E",		"\xE8\xDE" => "\xE6\x9F\x81",		"\xE8\xDF" => "\xE6\x9F\xBD",		"\xE8\xE0" => "\xE6\xA0\xB2",		"\xE8\xE1" => "\xE6\xA0\xB3",		"\xE8\xE2" => "\xE6\xA1\xA0",		"\xE8\xE3" => "\xE6\xA1\xA1",		"\xE8\xE4" => "\xE6\xA1\x8E",		"\xE8\xE5" => "\xE6\xA1\xA2",		"\xE8\xE6" => "\xE6\xA1\x84",		"\xE8\xE7" => "\xE6\xA1\xA4",		"\xE8\xE8" => "\xE6\xA2\x83",		"\xE8\xE9" => "\xE6\xA0\x9D",		"\xE8\xEA" => "\xE6\xA1\x95",		"\xE8\xEB" => "\xE6\xA1\xA6",		"\xE8\xEC" => "\xE6\xA1\x81",		"\xE8\xED" => "\xE6\xA1\xA7",		"\xE8\xEE" => "\xE6\xA1\x80",		"\xE8\xEF" => "\xE6\xA0\xBE",		"\xE8\xF0" => "\xE6\xA1\x8A",		"\xE8\xF1" => "\xE6\xA1\x89",		"\xE8\xF2" => "\xE6\xA0\xA9",		"\xE8\xF3" => "\xE6\xA2\xB5",		"\xE8\xF4" => "\xE6\xA2\x8F",		"\xE8\xF5" => "\xE6\xA1\xB4",		"\xE8\xF6" => "\xE6\xA1\xB7",		"\xE8\xF7" => "\xE6\xA2\x93",		"\xE8\xF8" => "\xE6\xA1\xAB",		"\xE8\xF9" => "\xE6\xA3\x82",		"\xE8\xFA" => "\xE6\xA5\xAE",		"\xE8\xFB" => "\xE6\xA3\xBC",		"\xE8\xFC" => "\xE6\xA4\x9F",		"\xE8\xFD" => "\xE6\xA4\xA0",		"\xE8\xFE" => "\xE6\xA3\xB9",		"\xE9\xA1" => "\xE6\xA4\xA4",		"\xE9\xA2" => "\xE6\xA3\xB0",		"\xE9\xA3" => "\xE6\xA4\x8B",		"\xE9\xA4" => "\xE6\xA4\x81",		"\xE9\xA5" => "\xE6\xA5\x97",		"\xE9\xA6" => "\xE6\xA3\xA3",		"\xE9\xA7" => "\xE6\xA4\x90",		"\xE9\xA8" => "\xE6\xA5\xB1",		"\xE9\xA9" => "\xE6\xA4\xB9",		"\xE9\xAA" => "\xE6\xA5\xA0",		"\xE9\xAB" => "\xE6\xA5\x82",		"\xE9\xAC" => "\xE6\xA5\x9D",		"\xE9\xAD" => "\xE6\xA6\x84",		"\xE9\xAE" => "\xE6\xA5\xAB",		"\xE9\xAF" => "\xE6\xA6\x80",		"\xE9\xB0" => "\xE6\xA6\x98",		"\xE9\xB1" => "\xE6\xA5\xB8",		"\xE9\xB2" => "\xE6\xA4\xB4",		"\xE9\xB3" => "\xE6\xA7\x8C",		"\xE9\xB4" => "\xE6\xA6\x87",		"\xE9\xB5" => "\xE6\xA6\x88",		"\xE9\xB6" => "\xE6\xA7\x8E",		"\xE9\xB7" => "\xE6\xA6\x89",		"\xE9\xB8" => "\xE6\xA5\xA6",		"\xE9\xB9" => "\xE6\xA5\xA3",		"\xE9\xBA" => "\xE6\xA5\xB9",		"\xE9\xBB" => "\xE6\xA6\x9B",		"\xE9\xBC" => "\xE6\xA6\xA7",		"\xE9\xBD" => "\xE6\xA6\xBB",		"\xE9\xBE" => "\xE6\xA6\xAB",		"\xE9\xBF" => "\xE6\xA6\xAD",		"\xE9\xC0" => "\xE6\xA7\x94",		"\xE9\xC1" => "\xE6\xA6\xB1",		"\xE9\xC2" => "\xE6\xA7\x81",		"\xE9\xC3" => "\xE6\xA7\x8A",		"\xE9\xC4" => "\xE6\xA7\x9F",		"\xE9\xC5" => "\xE6\xA6\x95",		"\xE9\xC6" => "\xE6\xA7\xA0",		"\xE9\xC7" => "\xE6\xA6\x8D",		"\xE9\xC8" => "\xE6\xA7\xBF",		"\xE9\xC9" => "\xE6\xA8\xAF",		"\xE9\xCA" => "\xE6\xA7\xAD",		"\xE9\xCB" => "\xE6\xA8\x97",		"\xE9\xCC" => "\xE6\xA8\x98",		"\xE9\xCD" => "\xE6\xA9\xA5",		"\xE9\xCE" => "\xE6\xA7\xB2",		"\xE9\xCF" => "\xE6\xA9\x84",		"\xE9\xD0" => "\xE6\xA8\xBE",		"\xE9\xD1" => "\xE6\xAA\xA0",		"\xE9\xD2" => "\xE6\xA9\x90",		"\xE9\xD3" => "\xE6\xA9\x9B",		"\xE9\xD4" => "\xE6\xA8\xB5",		"\xE9\xD5" => "\xE6\xAA\x8E",		"\xE9\xD6" => "\xE6\xA9\xB9",		"\xE9\xD7" => "\xE6\xA8\xBD",		"\xE9\xD8" => "\xE6\xA8\xA8",		"\xE9\xD9" => "\xE6\xA9\x98",		"\xE9\xDA" => "\xE6\xA9\xBC",		"\xE9\xDB" => "\xE6\xAA\x91",		"\xE9\xDC" => "\xE6\xAA\x90",		"\xE9\xDD" => "\xE6\xAA\xA9",		"\xE9\xDE" => "\xE6\xAA\x97",		"\xE9\xDF" => "\xE6\xAA\xAB",		"\xE9\xE0" => "\xE7\x8C\xB7",		"\xE9\xE1" => "\xE7\x8D\x92",		"\xE9\xE2" => "\xE6\xAE\x81",		"\xE9\xE3" => "\xE6\xAE\x82",		"\xE9\xE4" => "\xE6\xAE\x87",		"\xE9\xE5" => "\xE6\xAE\x84",		"\xE9\xE6" => "\xE6\xAE\x92",		"\xE9\xE7" => "\xE6\xAE\x93",		"\xE9\xE8" => "\xE6\xAE\x8D",		"\xE9\xE9" => "\xE6\xAE\x9A",		"\xE9\xEA" => "\xE6\xAE\x9B",		"\xE9\xEB" => "\xE6\xAE\xA1",		"\xE9\xEC" => "\xE6\xAE\xAA",		"\xE9\xED" => "\xE8\xBD\xAB",		"\xE9\xEE" => "\xE8\xBD\xAD",		"\xE9\xEF" => "\xE8\xBD\xB1",		"\xE9\xF0" => "\xE8\xBD\xB2",		"\xE9\xF1" => "\xE8\xBD\xB3",		"\xE9\xF2" => "\xE8\xBD\xB5",		"\xE9\xF3" => "\xE8\xBD\xB6",		"\xE9\xF4" => "\xE8\xBD\xB8",		"\xE9\xF5" => "\xE8\xBD\xB7",		"\xE9\xF6" => "\xE8\xBD\xB9",		"\xE9\xF7" => "\xE8\xBD\xBA",		"\xE9\xF8" => "\xE8\xBD\xBC",		"\xE9\xF9" => "\xE8\xBD\xBE",		"\xE9\xFA" => "\xE8\xBE\x81",		"\xE9\xFB" => "\xE8\xBE\x82",		"\xE9\xFC" => "\xE8\xBE\x84",		"\xE9\xFD" => "\xE8\xBE\x87",		"\xE9\xFE" => "\xE8\xBE\x8B",		"\xEA\xA1" => "\xE8\xBE\x8D",		"\xEA\xA2" => "\xE8\xBE\x8E",		"\xEA\xA3" => "\xE8\xBE\x8F",		"\xEA\xA4" => "\xE8\xBE\x98",		"\xEA\xA5" => "\xE8\xBE\x9A",		"\xEA\xA6" => "\xE8\xBB\x8E",		"\xEA\xA7" => "\xE6\x88\x8B",		"\xEA\xA8" => "\xE6\x88\x97",		"\xEA\xA9" => "\xE6\x88\x9B",		"\xEA\xAA" => "\xE6\x88\x9F",		"\xEA\xAB" => "\xE6\x88\xA2",		"\xEA\xAC" => "\xE6\x88\xA1",		"\xEA\xAD" => "\xE6\x88\xA5",		"\xEA\xAE" => "\xE6\x88\xA4",		"\xEA\xAF" => "\xE6\x88\xAC",		"\xEA\xB0" => "\xE8\x87\xA7",		"\xEA\xB1" => "\xE7\x93\xAF",		"\xEA\xB2" => "\xE7\x93\xB4",		"\xEA\xB3" => "\xE7\x93\xBF",		"\xEA\xB4" => "\xE7\x94\x8F",		"\xEA\xB5" => "\xE7\x94\x91",		"\xEA\xB6" => "\xE7\x94\x93",		"\xEA\xB7" => "\xE6\x94\xB4",		"\xEA\xB8" => "\xE6\x97\xAE",		"\xEA\xB9" => "\xE6\x97\xAF",		"\xEA\xBA" => "\xE6\x97\xB0",		"\xEA\xBB" => "\xE6\x98\x8A",		"\xEA\xBC" => "\xE6\x98\x99",		"\xEA\xBD" => "\xE6\x9D\xB2",		"\xEA\xBE" => "\xE6\x98\x83",		"\xEA\xBF" => "\xE6\x98\x95",		"\xEA\xC0" => "\xE6\x98\x80",		"\xEA\xC1" => "\xE7\x82\x85",		"\xEA\xC2" => "\xE6\x9B\xB7",		"\xEA\xC3" => "\xE6\x98\x9D",		"\xEA\xC4" => "\xE6\x98\xB4",		"\xEA\xC5" => "\xE6\x98\xB1",		"\xEA\xC6" => "\xE6\x98\xB6",		"\xEA\xC7" => "\xE6\x98\xB5",		"\xEA\xC8" => "\xE8\x80\x86",		"\xEA\xC9" => "\xE6\x99\x9F",		"\xEA\xCA" => "\xE6\x99\x94",		"\xEA\xCB" => "\xE6\x99\x81",		"\xEA\xCC" => "\xE6\x99\x8F",		"\xEA\xCD" => "\xE6\x99\x96",		"\xEA\xCE" => "\xE6\x99\xA1",		"\xEA\xCF" => "\xE6\x99\x97",		"\xEA\xD0" => "\xE6\x99\xB7",		"\xEA\xD1" => "\xE6\x9A\x84",		"\xEA\xD2" => "\xE6\x9A\x8C",		"\xEA\xD3" => "\xE6\x9A\xA7",		"\xEA\xD4" => "\xE6\x9A\x9D",		"\xEA\xD5" => "\xE6\x9A\xBE",		"\xEA\xD6" => "\xE6\x9B\x9B",		"\xEA\xD7" => "\xE6\x9B\x9C",		"\xEA\xD8" => "\xE6\x9B\xA6",		"\xEA\xD9" => "\xE6\x9B\xA9",		"\xEA\xDA" => "\xE8\xB4\xB2",		"\xEA\xDB" => "\xE8\xB4\xB3",		"\xEA\xDC" => "\xE8\xB4\xB6",		"\xEA\xDD" => "\xE8\xB4\xBB",		"\xEA\xDE" => "\xE8\xB4\xBD",		"\xEA\xDF" => "\xE8\xB5\x80",		"\xEA\xE0" => "\xE8\xB5\x85",		"\xEA\xE1" => "\xE8\xB5\x86",		"\xEA\xE2" => "\xE8\xB5\x88",		"\xEA\xE3" => "\xE8\xB5\x89",		"\xEA\xE4" => "\xE8\xB5\x87",		"\xEA\xE5" => "\xE8\xB5\x8D",		"\xEA\xE6" => "\xE8\xB5\x95",		"\xEA\xE7" => "\xE8\xB5\x99",		"\xEA\xE8" => "\xE8\xA7\x87",		"\xEA\xE9" => "\xE8\xA7\x8A",		"\xEA\xEA" => "\xE8\xA7\x8B",		"\xEA\xEB" => "\xE8\xA7\x8C",		"\xEA\xEC" => "\xE8\xA7\x8E",		"\xEA\xED" => "\xE8\xA7\x8F",		"\xEA\xEE" => "\xE8\xA7\x90",		"\xEA\xEF" => "\xE8\xA7\x91",		"\xEA\xF0" => "\xE7\x89\xAE",		"\xEA\xF1" => "\xE7\x8A\x9F",		"\xEA\xF2" => "\xE7\x89\x9D",		"\xEA\xF3" => "\xE7\x89\xA6",		"\xEA\xF4" => "\xE7\x89\xAF",		"\xEA\xF5" => "\xE7\x89\xBE",		"\xEA\xF6" => "\xE7\x89\xBF",		"\xEA\xF7" => "\xE7\x8A\x84",		"\xEA\xF8" => "\xE7\x8A\x8B",		"\xEA\xF9" => "\xE7\x8A\x8D",		"\xEA\xFA" => "\xE7\x8A\x8F",		"\xEA\xFB" => "\xE7\x8A\x92",		"\xEA\xFC" => "\xE6\x8C\x88",		"\xEA\xFD" => "\xE6\x8C\xB2",		"\xEA\xFE" => "\xE6\x8E\xB0",		"\xEB\xA1" => "\xE6\x90\xBF",		"\xEB\xA2" => "\xE6\x93\x98",		"\xEB\xA3" => "\xE8\x80\x84",		"\xEB\xA4" => "\xE6\xAF\xAA",		"\xEB\xA5" => "\xE6\xAF\xB3",		"\xEB\xA6" => "\xE6\xAF\xBD",		"\xEB\xA7" => "\xE6\xAF\xB5",		"\xEB\xA8" => "\xE6\xAF\xB9",		"\xEB\xA9" => "\xE6\xB0\x85",		"\xEB\xAA" => "\xE6\xB0\x87",		"\xEB\xAB" => "\xE6\xB0\x86",		"\xEB\xAC" => "\xE6\xB0\x8D",		"\xEB\xAD" => "\xE6\xB0\x95",		"\xEB\xAE" => "\xE6\xB0\x98",		"\xEB\xAF" => "\xE6\xB0\x99",		"\xEB\xB0" => "\xE6\xB0\x9A",		"\xEB\xB1" => "\xE6\xB0\xA1",		"\xEB\xB2" => "\xE6\xB0\xA9",		"\xEB\xB3" => "\xE6\xB0\xA4",		"\xEB\xB4" => "\xE6\xB0\xAA",		"\xEB\xB5" => "\xE6\xB0\xB2",		"\xEB\xB6" => "\xE6\x94\xB5",		"\xEB\xB7" => "\xE6\x95\x95",		"\xEB\xB8" => "\xE6\x95\xAB",		"\xEB\xB9" => "\xE7\x89\x8D",		"\xEB\xBA" => "\xE7\x89\x92",		"\xEB\xBB" => "\xE7\x89\x96",		"\xEB\xBC" => "\xE7\x88\xB0",		"\xEB\xBD" => "\xE8\x99\xA2",		"\xEB\xBE" => "\xE5\x88\x96",		"\xEB\xBF" => "\xE8\x82\x9F",		"\xEB\xC0" => "\xE8\x82\x9C",		"\xEB\xC1" => "\xE8\x82\x93",		"\xEB\xC2" => "\xE8\x82\xBC",		"\xEB\xC3" => "\xE6\x9C\x8A",		"\xEB\xC4" => "\xE8\x82\xBD",		"\xEB\xC5" => "\xE8\x82\xB1",		"\xEB\xC6" => "\xE8\x82\xAB",		"\xEB\xC7" => "\xE8\x82\xAD",		"\xEB\xC8" => "\xE8\x82\xB4",		"\xEB\xC9" => "\xE8\x82\xB7",		"\xEB\xCA" => "\xE8\x83\xA7",		"\xEB\xCB" => "\xE8\x83\xA8",		"\xEB\xCC" => "\xE8\x83\xA9",		"\xEB\xCD" => "\xE8\x83\xAA",		"\xEB\xCE" => "\xE8\x83\x9B",		"\xEB\xCF" => "\xE8\x83\x82",		"\xEB\xD0" => "\xE8\x83\x84",		"\xEB\xD1" => "\xE8\x83\x99",		"\xEB\xD2" => "\xE8\x83\x8D",		"\xEB\xD3" => "\xE8\x83\x97",		"\xEB\xD4" => "\xE6\x9C\x90",		"\xEB\xD5" => "\xE8\x83\x9D",		"\xEB\xD6" => "\xE8\x83\xAB",		"\xEB\xD7" => "\xE8\x83\xB1",		"\xEB\xD8" => "\xE8\x83\xB4",		"\xEB\xD9" => "\xE8\x83\xAD",		"\xEB\xDA" => "\xE8\x84\x8D",		"\xEB\xDB" => "\xE8\x84\x8E",		"\xEB\xDC" => "\xE8\x83\xB2",		"\xEB\xDD" => "\xE8\x83\xBC",		"\xEB\xDE" => "\xE6\x9C\x95",		"\xEB\xDF" => "\xE8\x84\x92",		"\xEB\xE0" => "\xE8\xB1\x9A",		"\xEB\xE1" => "\xE8\x84\xB6",		"\xEB\xE2" => "\xE8\x84\x9E",		"\xEB\xE3" => "\xE8\x84\xAC",		"\xEB\xE4" => "\xE8\x84\x98",		"\xEB\xE5" => "\xE8\x84\xB2",		"\xEB\xE6" => "\xE8\x85\x88",		"\xEB\xE7" => "\xE8\x85\x8C",		"\xEB\xE8" => "\xE8\x85\x93",		"\xEB\xE9" => "\xE8\x85\xB4",		"\xEB\xEA" => "\xE8\x85\x99",		"\xEB\xEB" => "\xE8\x85\x9A",		"\xEB\xEC" => "\xE8\x85\xB1",		"\xEB\xED" => "\xE8\x85\xA0",		"\xEB\xEE" => "\xE8\x85\xA9",		"\xEB\xEF" => "\xE8\x85\xBC",		"\xEB\xF0" => "\xE8\x85\xBD",		"\xEB\xF1" => "\xE8\x85\xAD",		"\xEB\xF2" => "\xE8\x85\xA7",		"\xEB\xF3" => "\xE5\xA1\x8D",		"\xEB\xF4" => "\xE5\xAA\xB5",		"\xEB\xF5" => "\xE8\x86\x88",		"\xEB\xF6" => "\xE8\x86\x82",		"\xEB\xF7" => "\xE8\x86\x91",		"\xEB\xF8" => "\xE6\xBB\x95",		"\xEB\xF9" => "\xE8\x86\xA3",		"\xEB\xFA" => "\xE8\x86\xAA",		"\xEB\xFB" => "\xE8\x87\x8C",		"\xEB\xFC" => "\xE6\x9C\xA6",		"\xEB\xFD" => "\xE8\x87\x8A",		"\xEB\xFE" => "\xE8\x86\xBB",		"\xEC\xA1" => "\xE8\x87\x81",		"\xEC\xA2" => "\xE8\x86\xA6",		"\xEC\xA3" => "\xE6\xAC\xA4",		"\xEC\xA4" => "\xE6\xAC\xB7",		"\xEC\xA5" => "\xE6\xAC\xB9",		"\xEC\xA6" => "\xE6\xAD\x83",		"\xEC\xA7" => "\xE6\xAD\x86",		"\xEC\xA8" => "\xE6\xAD\x99",		"\xEC\xA9" => "\xE9\xA3\x91",		"\xEC\xAA" => "\xE9\xA3\x92",		"\xEC\xAB" => "\xE9\xA3\x93",		"\xEC\xAC" => "\xE9\xA3\x95",		"\xEC\xAD" => "\xE9\xA3\x99",		"\xEC\xAE" => "\xE9\xA3\x9A",		"\xEC\xAF" => "\xE6\xAE\xB3",		"\xEC\xB0" => "\xE5\xBD\x80",		"\xEC\xB1" => "\xE6\xAF\x82",		"\xEC\xB2" => "\xE8\xA7\xB3",		"\xEC\xB3" => "\xE6\x96\x90",		"\xEC\xB4" => "\xE9\xBD\x91",		"\xEC\xB5" => "\xE6\x96\x93",		"\xEC\xB6" => "\xE6\x96\xBC",		"\xEC\xB7" => "\xE6\x97\x86",		"\xEC\xB8" => "\xE6\x97\x84",		"\xEC\xB9" => "\xE6\x97\x83",		"\xEC\xBA" => "\xE6\x97\x8C",		"\xEC\xBB" => "\xE6\x97\x8E",		"\xEC\xBC" => "\xE6\x97\x92",		"\xEC\xBD" => "\xE6\x97\x96",		"\xEC\xBE" => "\xE7\x82\x80",		"\xEC\xBF" => "\xE7\x82\x9C",		"\xEC\xC0" => "\xE7\x82\x96",		"\xEC\xC1" => "\xE7\x82\x9D",		"\xEC\xC2" => "\xE7\x82\xBB",		"\xEC\xC3" => "\xE7\x83\x80",		"\xEC\xC4" => "\xE7\x82\xB7",		"\xEC\xC5" => "\xE7\x82\xAB",		"\xEC\xC6" => "\xE7\x82\xB1",		"\xEC\xC7" => "\xE7\x83\xA8",		"\xEC\xC8" => "\xE7\x83\x8A",		"\xEC\xC9" => "\xE7\x84\x90",		"\xEC\xCA" => "\xE7\x84\x93",		"\xEC\xCB" => "\xE7\x84\x96",		"\xEC\xCC" => "\xE7\x84\xAF",		"\xEC\xCD" => "\xE7\x84\xB1",		"\xEC\xCE" => "\xE7\x85\xB3",		"\xEC\xCF" => "\xE7\x85\x9C",		"\xEC\xD0" => "\xE7\x85\xA8",		"\xEC\xD1" => "\xE7\x85\x85",		"\xEC\xD2" => "\xE7\x85\xB2",		"\xEC\xD3" => "\xE7\x85\x8A",		"\xEC\xD4" => "\xE7\x85\xB8",		"\xEC\xD5" => "\xE7\x85\xBA",		"\xEC\xD6" => "\xE7\x86\x98",		"\xEC\xD7" => "\xE7\x86\xB3",		"\xEC\xD8" => "\xE7\x86\xB5",		"\xEC\xD9" => "\xE7\x86\xA8",		"\xEC\xDA" => "\xE7\x86\xA0",		"\xEC\xDB" => "\xE7\x87\xA0",		"\xEC\xDC" => "\xE7\x87\x94",		"\xEC\xDD" => "\xE7\x87\xA7",		"\xEC\xDE" => "\xE7\x87\xB9",		"\xEC\xDF" => "\xE7\x88\x9D",		"\xEC\xE0" => "\xE7\x88\xA8",		"\xEC\xE1" => "\xE7\x81\xAC",		"\xEC\xE2" => "\xE7\x84\x98",		"\xEC\xE3" => "\xE7\x85\xA6",		"\xEC\xE4" => "\xE7\x86\xB9",		"\xEC\xE5" => "\xE6\x88\xBE",		"\xEC\xE6" => "\xE6\x88\xBD",		"\xEC\xE7" => "\xE6\x89\x83",		"\xEC\xE8" => "\xE6\x89\x88",		"\xEC\xE9" => "\xE6\x89\x89",		"\xEC\xEA" => "\xE7\xA4\xBB",		"\xEC\xEB" => "\xE7\xA5\x80",		"\xEC\xEC" => "\xE7\xA5\x86",		"\xEC\xED" => "\xE7\xA5\x89",		"\xEC\xEE" => "\xE7\xA5\x9B",		"\xEC\xEF" => "\xE7\xA5\x9C",		"\xEC\xF0" => "\xE7\xA5\x93",		"\xEC\xF1" => "\xE7\xA5\x9A",		"\xEC\xF2" => "\xE7\xA5\xA2",		"\xEC\xF3" => "\xE7\xA5\x97",		"\xEC\xF4" => "\xE7\xA5\xA0",		"\xEC\xF5" => "\xE7\xA5\xAF",		"\xEC\xF6" => "\xE7\xA5\xA7",		"\xEC\xF7" => "\xE7\xA5\xBA",		"\xEC\xF8" => "\xE7\xA6\x85",		"\xEC\xF9" => "\xE7\xA6\x8A",		"\xEC\xFA" => "\xE7\xA6\x9A",		"\xEC\xFB" => "\xE7\xA6\xA7",		"\xEC\xFC" => "\xE7\xA6\xB3",		"\xEC\xFD" => "\xE5\xBF\x91",		"\xEC\xFE" => "\xE5\xBF\x90",		"\xED\xA1" => "\xE6\x80\xBC",		"\xED\xA2" => "\xE6\x81\x9D",		"\xED\xA3" => "\xE6\x81\x9A",		"\xED\xA4" => "\xE6\x81\xA7",		"\xED\xA5" => "\xE6\x81\x81",		"\xED\xA6" => "\xE6\x81\x99",		"\xED\xA7" => "\xE6\x81\xA3",		"\xED\xA8" => "\xE6\x82\xAB",		"\xED\xA9" => "\xE6\x84\x86",		"\xED\xAA" => "\xE6\x84\x8D",		"\xED\xAB" => "\xE6\x85\x9D",		"\xED\xAC" => "\xE6\x86\xA9",		"\xED\xAD" => "\xE6\x86\x9D",		"\xED\xAE" => "\xE6\x87\x8B",		"\xED\xAF" => "\xE6\x87\x91",		"\xED\xB0" => "\xE6\x88\x86",		"\xED\xB1" => "\xE8\x82\x80",		"\xED\xB2" => "\xE8\x81\xBF",		"\xED\xB3" => "\xE6\xB2\x93",		"\xED\xB4" => "\xE6\xB3\xB6",		"\xED\xB5" => "\xE6\xB7\xBC",		"\xED\xB6" => "\xE7\x9F\xB6",		"\xED\xB7" => "\xE7\x9F\xB8",		"\xED\xB8" => "\xE7\xA0\x80",		"\xED\xB9" => "\xE7\xA0\x89",		"\xED\xBA" => "\xE7\xA0\x97",		"\xED\xBB" => "\xE7\xA0\x98",		"\xED\xBC" => "\xE7\xA0\x91",		"\xED\xBD" => "\xE6\x96\xAB",		"\xED\xBE" => "\xE7\xA0\xAD",		"\xED\xBF" => "\xE7\xA0\x9C",		"\xED\xC0" => "\xE7\xA0\x9D",		"\xED\xC1" => "\xE7\xA0\xB9",		"\xED\xC2" => "\xE7\xA0\xBA",		"\xED\xC3" => "\xE7\xA0\xBB",		"\xED\xC4" => "\xE7\xA0\x9F",		"\xED\xC5" => "\xE7\xA0\xBC",		"\xED\xC6" => "\xE7\xA0\xA5",		"\xED\xC7" => "\xE7\xA0\xAC",		"\xED\xC8" => "\xE7\xA0\xA3",		"\xED\xC9" => "\xE7\xA0\xA9",		"\xED\xCA" => "\xE7\xA1\x8E",		"\xED\xCB" => "\xE7\xA1\xAD",		"\xED\xCC" => "\xE7\xA1\x96",		"\xED\xCD" => "\xE7\xA1\x97",		"\xED\xCE" => "\xE7\xA0\xA6",		"\xED\xCF" => "\xE7\xA1\x90",		"\xED\xD0" => "\xE7\xA1\x87",		"\xED\xD1" => "\xE7\xA1\x8C",		"\xED\xD2" => "\xE7\xA1\xAA",		"\xED\xD3" => "\xE7\xA2\x9B",		"\xED\xD4" => "\xE7\xA2\x93",		"\xED\xD5" => "\xE7\xA2\x9A",		"\xED\xD6" => "\xE7\xA2\x87",		"\xED\xD7" => "\xE7\xA2\x9C",		"\xED\xD8" => "\xE7\xA2\xA1",		"\xED\xD9" => "\xE7\xA2\xA3",		"\xED\xDA" => "\xE7\xA2\xB2",		"\xED\xDB" => "\xE7\xA2\xB9",		"\xED\xDC" => "\xE7\xA2\xA5",		"\xED\xDD" => "\xE7\xA3\x94",		"\xED\xDE" => "\xE7\xA3\x99",		"\xED\xDF" => "\xE7\xA3\x89",		"\xED\xE0" => "\xE7\xA3\xAC",		"\xED\xE1" => "\xE7\xA3\xB2",		"\xED\xE2" => "\xE7\xA4\x85",		"\xED\xE3" => "\xE7\xA3\xB4",		"\xED\xE4" => "\xE7\xA4\x93",		"\xED\xE5" => "\xE7\xA4\xA4",		"\xED\xE6" => "\xE7\xA4\x9E",		"\xED\xE7" => "\xE7\xA4\xB4",		"\xED\xE8" => "\xE9\xBE\x9B",		"\xED\xE9" => "\xE9\xBB\xB9",		"\xED\xEA" => "\xE9\xBB\xBB",		"\xED\xEB" => "\xE9\xBB\xBC",		"\xED\xEC" => "\xE7\x9B\xB1",		"\xED\xED" => "\xE7\x9C\x84",		"\xED\xEE" => "\xE7\x9C\x8D",		"\xED\xEF" => "\xE7\x9B\xB9",		"\xED\xF0" => "\xE7\x9C\x87",		"\xED\xF1" => "\xE7\x9C\x88",		"\xED\xF2" => "\xE7\x9C\x9A",		"\xED\xF3" => "\xE7\x9C\xA2",		"\xED\xF4" => "\xE7\x9C\x99",		"\xED\xF5" => "\xE7\x9C\xAD",		"\xED\xF6" => "\xE7\x9C\xA6",		"\xED\xF7" => "\xE7\x9C\xB5",		"\xED\xF8" => "\xE7\x9C\xB8",		"\xED\xF9" => "\xE7\x9D\x90",		"\xED\xFA" => "\xE7\x9D\x91",		"\xED\xFB" => "\xE7\x9D\x87",		"\xED\xFC" => "\xE7\x9D\x83",		"\xED\xFD" => "\xE7\x9D\x9A",		"\xED\xFE" => "\xE7\x9D\xA8",		"\xEE\xA1" => "\xE7\x9D\xA2",		"\xEE\xA2" => "\xE7\x9D\xA5",		"\xEE\xA3" => "\xE7\x9D\xBF",		"\xEE\xA4" => "\xE7\x9E\x8D",		"\xEE\xA5" => "\xE7\x9D\xBD",		"\xEE\xA6" => "\xE7\x9E\x80",		"\xEE\xA7" => "\xE7\x9E\x8C",		"\xEE\xA8" => "\xE7\x9E\x91",		"\xEE\xA9" => "\xE7\x9E\x9F",		"\xEE\xAA" => "\xE7\x9E\xA0",		"\xEE\xAB" => "\xE7\x9E\xB0",		"\xEE\xAC" => "\xE7\x9E\xB5",		"\xEE\xAD" => "\xE7\x9E\xBD",		"\xEE\xAE" => "\xE7\x94\xBA",		"\xEE\xAF" => "\xE7\x95\x80",		"\xEE\xB0" => "\xE7\x95\x8E",		"\xEE\xB1" => "\xE7\x95\x8B",		"\xEE\xB2" => "\xE7\x95\x88",		"\xEE\xB3" => "\xE7\x95\x9B",		"\xEE\xB4" => "\xE7\x95\xB2",		"\xEE\xB5" => "\xE7\x95\xB9",		"\xEE\xB6" => "\xE7\x96\x83",		"\xEE\xB7" => "\xE7\xBD\x98",		"\xEE\xB8" => "\xE7\xBD\xA1",		"\xEE\xB9" => "\xE7\xBD\x9F",		"\xEE\xBA" => "\xE8\xA9\x88",		"\xEE\xBB" => "\xE7\xBD\xA8",		"\xEE\xBC" => "\xE7\xBD\xB4",		"\xEE\xBD" => "\xE7\xBD\xB1",		"\xEE\xBE" => "\xE7\xBD\xB9",		"\xEE\xBF" => "\xE7\xBE\x81",		"\xEE\xC0" => "\xE7\xBD\xBE",		"\xEE\xC1" => "\xE7\x9B\x8D",		"\xEE\xC2" => "\xE7\x9B\xA5",		"\xEE\xC3" => "\xE8\xA0\xB2",		"\xEE\xC4" => "\xE9\x92\x85",		"\xEE\xC5" => "\xE9\x92\x86",		"\xEE\xC6" => "\xE9\x92\x87",		"\xEE\xC7" => "\xE9\x92\x8B",		"\xEE\xC8" => "\xE9\x92\x8A",		"\xEE\xC9" => "\xE9\x92\x8C",		"\xEE\xCA" => "\xE9\x92\x8D",		"\xEE\xCB" => "\xE9\x92\x8F",		"\xEE\xCC" => "\xE9\x92\x90",		"\xEE\xCD" => "\xE9\x92\x94",		"\xEE\xCE" => "\xE9\x92\x97",		"\xEE\xCF" => "\xE9\x92\x95",		"\xEE\xD0" => "\xE9\x92\x9A",		"\xEE\xD1" => "\xE9\x92\x9B",		"\xEE\xD2" => "\xE9\x92\x9C",		"\xEE\xD3" => "\xE9\x92\xA3",		"\xEE\xD4" => "\xE9\x92\xA4",		"\xEE\xD5" => "\xE9\x92\xAB",		"\xEE\xD6" => "\xE9\x92\xAA",		"\xEE\xD7" => "\xE9\x92\xAD",		"\xEE\xD8" => "\xE9\x92\xAC",		"\xEE\xD9" => "\xE9\x92\xAF",		"\xEE\xDA" => "\xE9\x92\xB0",		"\xEE\xDB" => "\xE9\x92\xB2",		"\xEE\xDC" => "\xE9\x92\xB4",		"\xEE\xDD" => "\xE9\x92\xB6",		"\xEE\xDE" => "\xE9\x92\xB7",		"\xEE\xDF" => "\xE9\x92\xB8",		"\xEE\xE0" => "\xE9\x92\xB9",		"\xEE\xE1" => "\xE9\x92\xBA",		"\xEE\xE2" => "\xE9\x92\xBC",		"\xEE\xE3" => "\xE9\x92\xBD",		"\xEE\xE4" => "\xE9\x92\xBF",		"\xEE\xE5" => "\xE9\x93\x84",		"\xEE\xE6" => "\xE9\x93\x88",		"\xEE\xE7" => "\xE9\x93\x89",		"\xEE\xE8" => "\xE9\x93\x8A",		"\xEE\xE9" => "\xE9\x93\x8B",		"\xEE\xEA" => "\xE9\x93\x8C",		"\xEE\xEB" => "\xE9\x93\x8D",		"\xEE\xEC" => "\xE9\x93\x8E",		"\xEE\xED" => "\xE9\x93\x90",		"\xEE\xEE" => "\xE9\x93\x91",		"\xEE\xEF" => "\xE9\x93\x92",		"\xEE\xF0" => "\xE9\x93\x95",		"\xEE\xF1" => "\xE9\x93\x96",		"\xEE\xF2" => "\xE9\x93\x97",		"\xEE\xF3" => "\xE9\x93\x99",		"\xEE\xF4" => "\xE9\x93\x98",		"\xEE\xF5" => "\xE9\x93\x9B",		"\xEE\xF6" => "\xE9\x93\x9E",		"\xEE\xF7" => "\xE9\x93\x9F",		"\xEE\xF8" => "\xE9\x93\xA0",		"\xEE\xF9" => "\xE9\x93\xA2",		"\xEE\xFA" => "\xE9\x93\xA4",		"\xEE\xFB" => "\xE9\x93\xA5",		"\xEE\xFC" => "\xE9\x93\xA7",		"\xEE\xFD" => "\xE9\x93\xA8",		"\xEE\xFE" => "\xE9\x93\xAA",		"\xEF\xA1" => "\xE9\x93\xA9",		"\xEF\xA2" => "\xE9\x93\xAB",		"\xEF\xA3" => "\xE9\x93\xAE",		"\xEF\xA4" => "\xE9\x93\xAF",		"\xEF\xA5" => "\xE9\x93\xB3",		"\xEF\xA6" => "\xE9\x93\xB4",		"\xEF\xA7" => "\xE9\x93\xB5",		"\xEF\xA8" => "\xE9\x93\xB7",		"\xEF\xA9" => "\xE9\x93\xB9",		"\xEF\xAA" => "\xE9\x93\xBC",		"\xEF\xAB" => "\xE9\x93\xBD",		"\xEF\xAC" => "\xE9\x93\xBF",		"\xEF\xAD" => "\xE9\x94\x83",		"\xEF\xAE" => "\xE9\x94\x82",		"\xEF\xAF" => "\xE9\x94\x86",		"\xEF\xB0" => "\xE9\x94\x87",		"\xEF\xB1" => "\xE9\x94\x89",		"\xEF\xB2" => "\xE9\x94\x8A",		"\xEF\xB3" => "\xE9\x94\x8D",		"\xEF\xB4" => "\xE9\x94\x8E",		"\xEF\xB5" => "\xE9\x94\x8F",		"\xEF\xB6" => "\xE9\x94\x92",		"\xEF\xB7" => "\xE9\x94\x93",		"\xEF\xB8" => "\xE9\x94\x94",		"\xEF\xB9" => "\xE9\x94\x95",		"\xEF\xBA" => "\xE9\x94\x96",		"\xEF\xBB" => "\xE9\x94\x98",		"\xEF\xBC" => "\xE9\x94\x9B",		"\xEF\xBD" => "\xE9\x94\x9D",		"\xEF\xBE" => "\xE9\x94\x9E",		"\xEF\xBF" => "\xE9\x94\x9F",		"\xEF\xC0" => "\xE9\x94\xA2",		"\xEF\xC1" => "\xE9\x94\xAA",		"\xEF\xC2" => "\xE9\x94\xAB",		"\xEF\xC3" => "\xE9\x94\xA9",		"\xEF\xC4" => "\xE9\x94\xAC",		"\xEF\xC5" => "\xE9\x94\xB1",		"\xEF\xC6" => "\xE9\x94\xB2",		"\xEF\xC7" => "\xE9\x94\xB4",		"\xEF\xC8" => "\xE9\x94\xB6",		"\xEF\xC9" => "\xE9\x94\xB7",		"\xEF\xCA" => "\xE9\x94\xB8",		"\xEF\xCB" => "\xE9\x94\xBC",		"\xEF\xCC" => "\xE9\x94\xBE",		"\xEF\xCD" => "\xE9\x94\xBF",		"\xEF\xCE" => "\xE9\x95\x82",		"\xEF\xCF" => "\xE9\x94\xB5",		"\xEF\xD0" => "\xE9\x95\x84",		"\xEF\xD1" => "\xE9\x95\x85",		"\xEF\xD2" => "\xE9\x95\x86",		"\xEF\xD3" => "\xE9\x95\x89",		"\xEF\xD4" => "\xE9\x95\x8C",		"\xEF\xD5" => "\xE9\x95\x8E",		"\xEF\xD6" => "\xE9\x95\x8F",		"\xEF\xD7" => "\xE9\x95\x92",		"\xEF\xD8" => "\xE9\x95\x93",		"\xEF\xD9" => "\xE9\x95\x94",		"\xEF\xDA" => "\xE9\x95\x96",		"\xEF\xDB" => "\xE9\x95\x97",		"\xEF\xDC" => "\xE9\x95\x98",		"\xEF\xDD" => "\xE9\x95\x99",		"\xEF\xDE" => "\xE9\x95\x9B",		"\xEF\xDF" => "\xE9\x95\x9E",		"\xEF\xE0" => "\xE9\x95\x9F",		"\xEF\xE1" => "\xE9\x95\x9D",		"\xEF\xE2" => "\xE9\x95\xA1",		"\xEF\xE3" => "\xE9\x95\xA2",		"\xEF\xE4" => "\xE9\x95\xA4",		"\xEF\xE5" => "\xE9\x95\xA5",		"\xEF\xE6" => "\xE9\x95\xA6",		"\xEF\xE7" => "\xE9\x95\xA7",		"\xEF\xE8" => "\xE9\x95\xA8",		"\xEF\xE9" => "\xE9\x95\xA9",		"\xEF\xEA" => "\xE9\x95\xAA",		"\xEF\xEB" => "\xE9\x95\xAB",		"\xEF\xEC" => "\xE9\x95\xAC",		"\xEF\xED" => "\xE9\x95\xAF",		"\xEF\xEE" => "\xE9\x95\xB1",		"\xEF\xEF" => "\xE9\x95\xB2",		"\xEF\xF0" => "\xE9\x95\xB3",		"\xEF\xF1" => "\xE9\x94\xBA",		"\xEF\xF2" => "\xE7\x9F\xA7",		"\xEF\xF3" => "\xE7\x9F\xAC",		"\xEF\xF4" => "\xE9\x9B\x89",		"\xEF\xF5" => "\xE7\xA7\x95",		"\xEF\xF6" => "\xE7\xA7\xAD",		"\xEF\xF7" => "\xE7\xA7\xA3",		"\xEF\xF8" => "\xE7\xA7\xAB",		"\xEF\xF9" => "\xE7\xA8\x86",		"\xEF\xFA" => "\xE5\xB5\x87",		"\xEF\xFB" => "\xE7\xA8\x83",		"\xEF\xFC" => "\xE7\xA8\x82",		"\xEF\xFD" => "\xE7\xA8\x9E",		"\xEF\xFE" => "\xE7\xA8\x94",		"\xF0\xA1" => "\xE7\xA8\xB9",		"\xF0\xA2" => "\xE7\xA8\xB7",		"\xF0\xA3" => "\xE7\xA9\x91",		"\xF0\xA4" => "\xE9\xBB\x8F",		"\xF0\xA5" => "\xE9\xA6\xA5",		"\xF0\xA6" => "\xE7\xA9\xB0",		"\xF0\xA7" => "\xE7\x9A\x88",		"\xF0\xA8" => "\xE7\x9A\x8E",		"\xF0\xA9" => "\xE7\x9A\x93",		"\xF0\xAA" => "\xE7\x9A\x99",		"\xF0\xAB" => "\xE7\x9A\xA4",		"\xF0\xAC" => "\xE7\x93\x9E",		"\xF0\xAD" => "\xE7\x93\xA0",		"\xF0\xAE" => "\xE7\x94\xAC",		"\xF0\xAF" => "\xE9\xB8\xA0",		"\xF0\xB0" => "\xE9\xB8\xA2",		"\xF0\xB1" => "\xE9\xB8\xA8",		"\xF0\xB2" => "\xE9\xB8\xA9",		"\xF0\xB3" => "\xE9\xB8\xAA",		"\xF0\xB4" => "\xE9\xB8\xAB",		"\xF0\xB5" => "\xE9\xB8\xAC",		"\xF0\xB6" => "\xE9\xB8\xB2",		"\xF0\xB7" => "\xE9\xB8\xB1",		"\xF0\xB8" => "\xE9\xB8\xB6",		"\xF0\xB9" => "\xE9\xB8\xB8",		"\xF0\xBA" => "\xE9\xB8\xB7",		"\xF0\xBB" => "\xE9\xB8\xB9",		"\xF0\xBC" => "\xE9\xB8\xBA",		"\xF0\xBD" => "\xE9\xB8\xBE",		"\xF0\xBE" => "\xE9\xB9\x81",		"\xF0\xBF" => "\xE9\xB9\x82",		"\xF0\xC0" => "\xE9\xB9\x84",		"\xF0\xC1" => "\xE9\xB9\x86",		"\xF0\xC2" => "\xE9\xB9\x87",		"\xF0\xC3" => "\xE9\xB9\x88",		"\xF0\xC4" => "\xE9\xB9\x89",		"\xF0\xC5" => "\xE9\xB9\x8B",		"\xF0\xC6" => "\xE9\xB9\x8C",		"\xF0\xC7" => "\xE9\xB9\x8E",		"\xF0\xC8" => "\xE9\xB9\x91",		"\xF0\xC9" => "\xE9\xB9\x95",		"\xF0\xCA" => "\xE9\xB9\x97",		"\xF0\xCB" => "\xE9\xB9\x9A",		"\xF0\xCC" => "\xE9\xB9\x9B",		"\xF0\xCD" => "\xE9\xB9\x9C",		"\xF0\xCE" => "\xE9\xB9\x9E",		"\xF0\xCF" => "\xE9\xB9\xA3",		"\xF0\xD0" => "\xE9\xB9\xA6",		"\xF0\xD1" => "\xE9\xB9\xA7",		"\xF0\xD2" => "\xE9\xB9\xA8",		"\xF0\xD3" => "\xE9\xB9\xA9",		"\xF0\xD4" => "\xE9\xB9\xAA",		"\xF0\xD5" => "\xE9\xB9\xAB",		"\xF0\xD6" => "\xE9\xB9\xAC",		"\xF0\xD7" => "\xE9\xB9\xB1",		"\xF0\xD8" => "\xE9\xB9\xAD",		"\xF0\xD9" => "\xE9\xB9\xB3",		"\xF0\xDA" => "\xE7\x96\x92",		"\xF0\xDB" => "\xE7\x96\x94",		"\xF0\xDC" => "\xE7\x96\x96",		"\xF0\xDD" => "\xE7\x96\xA0",		"\xF0\xDE" => "\xE7\x96\x9D",		"\xF0\xDF" => "\xE7\x96\xAC",		"\xF0\xE0" => "\xE7\x96\xA3",		"\xF0\xE1" => "\xE7\x96\xB3",		"\xF0\xE2" => "\xE7\x96\xB4",		"\xF0\xE3" => "\xE7\x96\xB8",		"\xF0\xE4" => "\xE7\x97\x84",		"\xF0\xE5" => "\xE7\x96\xB1",		"\xF0\xE6" => "\xE7\x96\xB0",		"\xF0\xE7" => "\xE7\x97\x83",		"\xF0\xE8" => "\xE7\x97\x82",		"\xF0\xE9" => "\xE7\x97\x96",		"\xF0\xEA" => "\xE7\x97\x8D",		"\xF0\xEB" => "\xE7\x97\xA3",		"\xF0\xEC" => "\xE7\x97\xA8",		"\xF0\xED" => "\xE7\x97\xA6",		"\xF0\xEE" => "\xE7\x97\xA4",		"\xF0\xEF" => "\xE7\x97\xAB",		"\xF0\xF0" => "\xE7\x97\xA7",		"\xF0\xF1" => "\xE7\x98\x83",		"\xF0\xF2" => "\xE7\x97\xB1",		"\xF0\xF3" => "\xE7\x97\xBC",		"\xF0\xF4" => "\xE7\x97\xBF",		"\xF0\xF5" => "\xE7\x98\x90",		"\xF0\xF6" => "\xE7\x98\x80",		"\xF0\xF7" => "\xE7\x98\x85",		"\xF0\xF8" => "\xE7\x98\x8C",		"\xF0\xF9" => "\xE7\x98\x97",		"\xF0\xFA" => "\xE7\x98\x8A",		"\xF0\xFB" => "\xE7\x98\xA5",		"\xF0\xFC" => "\xE7\x98\x98",		"\xF0\xFD" => "\xE7\x98\x95",		"\xF0\xFE" => "\xE7\x98\x99",		"\xF1\xA1" => "\xE7\x98\x9B",		"\xF1\xA2" => "\xE7\x98\xBC",		"\xF1\xA3" => "\xE7\x98\xA2",		"\xF1\xA4" => "\xE7\x98\xA0",		"\xF1\xA5" => "\xE7\x99\x80",		"\xF1\xA6" => "\xE7\x98\xAD",		"\xF1\xA7" => "\xE7\x98\xB0",		"\xF1\xA8" => "\xE7\x98\xBF",		"\xF1\xA9" => "\xE7\x98\xB5",		"\xF1\xAA" => "\xE7\x99\x83",		"\xF1\xAB" => "\xE7\x98\xBE",		"\xF1\xAC" => "\xE7\x98\xB3",		"\xF1\xAD" => "\xE7\x99\x8D",		"\xF1\xAE" => "\xE7\x99\x9E",		"\xF1\xAF" => "\xE7\x99\x94",		"\xF1\xB0" => "\xE7\x99\x9C",		"\xF1\xB1" => "\xE7\x99\x96",		"\xF1\xB2" => "\xE7\x99\xAB",		"\xF1\xB3" => "\xE7\x99\xAF",		"\xF1\xB4" => "\xE7\xBF\x8A",		"\xF1\xB5" => "\xE7\xAB\xA6",		"\xF1\xB6" => "\xE7\xA9\xB8",		"\xF1\xB7" => "\xE7\xA9\xB9",		"\xF1\xB8" => "\xE7\xAA\x80",		"\xF1\xB9" => "\xE7\xAA\x86",		"\xF1\xBA" => "\xE7\xAA\x88",		"\xF1\xBB" => "\xE7\xAA\x95",		"\xF1\xBC" => "\xE7\xAA\xA6",		"\xF1\xBD" => "\xE7\xAA\xA0",		"\xF1\xBE" => "\xE7\xAA\xAC",		"\xF1\xBF" => "\xE7\xAA\xA8",		"\xF1\xC0" => "\xE7\xAA\xAD",		"\xF1\xC1" => "\xE7\xAA\xB3",		"\xF1\xC2" => "\xE8\xA1\xA4",		"\xF1\xC3" => "\xE8\xA1\xA9",		"\xF1\xC4" => "\xE8\xA1\xB2",		"\xF1\xC5" => "\xE8\xA1\xBD",		"\xF1\xC6" => "\xE8\xA1\xBF",		"\xF1\xC7" => "\xE8\xA2\x82",		"\xF1\xC8" => "\xE8\xA2\xA2",		"\xF1\xC9" => "\xE8\xA3\x86",		"\xF1\xCA" => "\xE8\xA2\xB7",		"\xF1\xCB" => "\xE8\xA2\xBC",		"\xF1\xCC" => "\xE8\xA3\x89",		"\xF1\xCD" => "\xE8\xA3\xA2",		"\xF1\xCE" => "\xE8\xA3\x8E",		"\xF1\xCF" => "\xE8\xA3\xA3",		"\xF1\xD0" => "\xE8\xA3\xA5",		"\xF1\xD1" => "\xE8\xA3\xB1",		"\xF1\xD2" => "\xE8\xA4\x9A",		"\xF1\xD3" => "\xE8\xA3\xBC",		"\xF1\xD4" => "\xE8\xA3\xA8",		"\xF1\xD5" => "\xE8\xA3\xBE",		"\xF1\xD6" => "\xE8\xA3\xB0",		"\xF1\xD7" => "\xE8\xA4\xA1",		"\xF1\xD8" => "\xE8\xA4\x99",		"\xF1\xD9" => "\xE8\xA4\x93",		"\xF1\xDA" => "\xE8\xA4\x9B",		"\xF1\xDB" => "\xE8\xA4\x8A",		"\xF1\xDC" => "\xE8\xA4\xB4",		"\xF1\xDD" => "\xE8\xA4\xAB",		"\xF1\xDE" => "\xE8\xA4\xB6",		"\xF1\xDF" => "\xE8\xA5\x81",		"\xF1\xE0" => "\xE8\xA5\xA6",		"\xF1\xE1" => "\xE8\xA5\xBB",		"\xF1\xE2" => "\xE7\x96\x8B",		"\xF1\xE3" => "\xE8\x83\xA5",		"\xF1\xE4" => "\xE7\x9A\xB2",		"\xF1\xE5" => "\xE7\x9A\xB4",		"\xF1\xE6" => "\xE7\x9F\x9C",		"\xF1\xE7" => "\xE8\x80\x92",		"\xF1\xE8" => "\xE8\x80\x94",		"\xF1\xE9" => "\xE8\x80\x96",		"\xF1\xEA" => "\xE8\x80\x9C",		"\xF1\xEB" => "\xE8\x80\xA0",		"\xF1\xEC" => "\xE8\x80\xA2",		"\xF1\xED" => "\xE8\x80\xA5",		"\xF1\xEE" => "\xE8\x80\xA6",		"\xF1\xEF" => "\xE8\x80\xA7",		"\xF1\xF0" => "\xE8\x80\xA9",		"\xF1\xF1" => "\xE8\x80\xA8",		"\xF1\xF2" => "\xE8\x80\xB1",		"\xF1\xF3" => "\xE8\x80\x8B",		"\xF1\xF4" => "\xE8\x80\xB5",		"\xF1\xF5" => "\xE8\x81\x83",		"\xF1\xF6" => "\xE8\x81\x86",		"\xF1\xF7" => "\xE8\x81\x8D",		"\xF1\xF8" => "\xE8\x81\x92",		"\xF1\xF9" => "\xE8\x81\xA9",		"\xF1\xFA" => "\xE8\x81\xB1",		"\xF1\xFB" => "\xE8\xA6\x83",		"\xF1\xFC" => "\xE9\xA1\xB8",		"\xF1\xFD" => "\xE9\xA2\x80",		"\xF1\xFE" => "\xE9\xA2\x83",		"\xF2\xA1" => "\xE9\xA2\x89",		"\xF2\xA2" => "\xE9\xA2\x8C",		"\xF2\xA3" => "\xE9\xA2\x8D",		"\xF2\xA4" => "\xE9\xA2\x8F",		"\xF2\xA5" => "\xE9\xA2\x94",		"\xF2\xA6" => "\xE9\xA2\x9A",		"\xF2\xA7" => "\xE9\xA2\x9B",		"\xF2\xA8" => "\xE9\xA2\x9E",		"\xF2\xA9" => "\xE9\xA2\x9F",		"\xF2\xAA" => "\xE9\xA2\xA1",		"\xF2\xAB" => "\xE9\xA2\xA2",		"\xF2\xAC" => "\xE9\xA2\xA5",		"\xF2\xAD" => "\xE9\xA2\xA6",		"\xF2\xAE" => "\xE8\x99\x8D",		"\xF2\xAF" => "\xE8\x99\x94",		"\xF2\xB0" => "\xE8\x99\xAC",		"\xF2\xB1" => "\xE8\x99\xAE",		"\xF2\xB2" => "\xE8\x99\xBF",		"\xF2\xB3" => "\xE8\x99\xBA",		"\xF2\xB4" => "\xE8\x99\xBC",		"\xF2\xB5" => "\xE8\x99\xBB",		"\xF2\xB6" => "\xE8\x9A\xA8",		"\xF2\xB7" => "\xE8\x9A\x8D",		"\xF2\xB8" => "\xE8\x9A\x8B",		"\xF2\xB9" => "\xE8\x9A\xAC",		"\xF2\xBA" => "\xE8\x9A\x9D",		"\xF2\xBB" => "\xE8\x9A\xA7",		"\xF2\xBC" => "\xE8\x9A\xA3",		"\xF2\xBD" => "\xE8\x9A\xAA",		"\xF2\xBE" => "\xE8\x9A\x93",		"\xF2\xBF" => "\xE8\x9A\xA9",		"\xF2\xC0" => "\xE8\x9A\xB6",		"\xF2\xC1" => "\xE8\x9B\x84",		"\xF2\xC2" => "\xE8\x9A\xB5",		"\xF2\xC3" => "\xE8\x9B\x8E",		"\xF2\xC4" => "\xE8\x9A\xB0",		"\xF2\xC5" => "\xE8\x9A\xBA",		"\xF2\xC6" => "\xE8\x9A\xB1",		"\xF2\xC7" => "\xE8\x9A\xAF",		"\xF2\xC8" => "\xE8\x9B\x89",		"\xF2\xC9" => "\xE8\x9B\x8F",		"\xF2\xCA" => "\xE8\x9A\xB4",		"\xF2\xCB" => "\xE8\x9B\xA9",		"\xF2\xCC" => "\xE8\x9B\xB1",		"\xF2\xCD" => "\xE8\x9B\xB2",		"\xF2\xCE" => "\xE8\x9B\xAD",		"\xF2\xCF" => "\xE8\x9B\xB3",		"\xF2\xD0" => "\xE8\x9B\x90",		"\xF2\xD1" => "\xE8\x9C\x93",		"\xF2\xD2" => "\xE8\x9B\x9E",		"\xF2\xD3" => "\xE8\x9B\xB4",		"\xF2\xD4" => "\xE8\x9B\x9F",		"\xF2\xD5" => "\xE8\x9B\x98",		"\xF2\xD6" => "\xE8\x9B\x91",		"\xF2\xD7" => "\xE8\x9C\x83",		"\xF2\xD8" => "\xE8\x9C\x87",		"\xF2\xD9" => "\xE8\x9B\xB8",		"\xF2\xDA" => "\xE8\x9C\x88",		"\xF2\xDB" => "\xE8\x9C\x8A",		"\xF2\xDC" => "\xE8\x9C\x8D",		"\xF2\xDD" => "\xE8\x9C\x89",		"\xF2\xDE" => "\xE8\x9C\xA3",		"\xF2\xDF" => "\xE8\x9C\xBB",		"\xF2\xE0" => "\xE8\x9C\x9E",		"\xF2\xE1" => "\xE8\x9C\xA5",		"\xF2\xE2" => "\xE8\x9C\xAE",		"\xF2\xE3" => "\xE8\x9C\x9A",		"\xF2\xE4" => "\xE8\x9C\xBE",		"\xF2\xE5" => "\xE8\x9D\x88",		"\xF2\xE6" => "\xE8\x9C\xB4",		"\xF2\xE7" => "\xE8\x9C\xB1",		"\xF2\xE8" => "\xE8\x9C\xA9",		"\xF2\xE9" => "\xE8\x9C\xB7",		"\xF2\xEA" => "\xE8\x9C\xBF",		"\xF2\xEB" => "\xE8\x9E\x82",		"\xF2\xEC" => "\xE8\x9C\xA2",		"\xF2\xED" => "\xE8\x9D\xBD",		"\xF2\xEE" => "\xE8\x9D\xBE",		"\xF2\xEF" => "\xE8\x9D\xBB",		"\xF2\xF0" => "\xE8\x9D\xA0",		"\xF2\xF1" => "\xE8\x9D\xB0",		"\xF2\xF2" => "\xE8\x9D\x8C",		"\xF2\xF3" => "\xE8\x9D\xAE",		"\xF2\xF4" => "\xE8\x9E\x8B",		"\xF2\xF5" => "\xE8\x9D\x93",		"\xF2\xF6" => "\xE8\x9D\xA3",		"\xF2\xF7" => "\xE8\x9D\xBC",		"\xF2\xF8" => "\xE8\x9D\xA4",		"\xF2\xF9" => "\xE8\x9D\x99",		"\xF2\xFA" => "\xE8\x9D\xA5",		"\xF2\xFB" => "\xE8\x9E\x93",		"\xF2\xFC" => "\xE8\x9E\xAF",		"\xF2\xFD" => "\xE8\x9E\xA8",		"\xF2\xFE" => "\xE8\x9F\x92",		"\xF3\xA1" => "\xE8\x9F\x86",		"\xF3\xA2" => "\xE8\x9E\x88",		"\xF3\xA3" => "\xE8\x9E\x85",		"\xF3\xA4" => "\xE8\x9E\xAD",		"\xF3\xA5" => "\xE8\x9E\x97",		"\xF3\xA6" => "\xE8\x9E\x83",		"\xF3\xA7" => "\xE8\x9E\xAB",		"\xF3\xA8" => "\xE8\x9F\xA5",		"\xF3\xA9" => "\xE8\x9E\xAC",		"\xF3\xAA" => "\xE8\x9E\xB5",		"\xF3\xAB" => "\xE8\x9E\xB3",		"\xF3\xAC" => "\xE8\x9F\x8B",		"\xF3\xAD" => "\xE8\x9F\x93",		"\xF3\xAE" => "\xE8\x9E\xBD",		"\xF3\xAF" => "\xE8\x9F\x91",		"\xF3\xB0" => "\xE8\x9F\x80",		"\xF3\xB1" => "\xE8\x9F\x8A",		"\xF3\xB2" => "\xE8\x9F\x9B",		"\xF3\xB3" => "\xE8\x9F\xAA",		"\xF3\xB4" => "\xE8\x9F\xA0",		"\xF3\xB5" => "\xE8\x9F\xAE",		"\xF3\xB6" => "\xE8\xA0\x96",		"\xF3\xB7" => "\xE8\xA0\x93",		"\xF3\xB8" => "\xE8\x9F\xBE",		"\xF3\xB9" => "\xE8\xA0\x8A",		"\xF3\xBA" => "\xE8\xA0\x9B",		"\xF3\xBB" => "\xE8\xA0\xA1",		"\xF3\xBC" => "\xE8\xA0\xB9",		"\xF3\xBD" => "\xE8\xA0\xBC",		"\xF3\xBE" => "\xE7\xBC\xB6",		"\xF3\xBF" => "\xE7\xBD\x82",		"\xF3\xC0" => "\xE7\xBD\x84",		"\xF3\xC1" => "\xE7\xBD\x85",		"\xF3\xC2" => "\xE8\x88\x90",		"\xF3\xC3" => "\xE7\xAB\xBA",		"\xF3\xC4" => "\xE7\xAB\xBD",		"\xF3\xC5" => "\xE7\xAC\x88",		"\xF3\xC6" => "\xE7\xAC\x83",		"\xF3\xC7" => "\xE7\xAC\x84",		"\xF3\xC8" => "\xE7\xAC\x95",		"\xF3\xC9" => "\xE7\xAC\x8A",		"\xF3\xCA" => "\xE7\xAC\xAB",		"\xF3\xCB" => "\xE7\xAC\x8F",		"\xF3\xCC" => "\xE7\xAD\x87",		"\xF3\xCD" => "\xE7\xAC\xB8",		"\xF3\xCE" => "\xE7\xAC\xAA",		"\xF3\xCF" => "\xE7\xAC\x99",		"\xF3\xD0" => "\xE7\xAC\xAE",		"\xF3\xD1" => "\xE7\xAC\xB1",		"\xF3\xD2" => "\xE7\xAC\xA0",		"\xF3\xD3" => "\xE7\xAC\xA5",		"\xF3\xD4" => "\xE7\xAC\xA4",		"\xF3\xD5" => "\xE7\xAC\xB3",		"\xF3\xD6" => "\xE7\xAC\xBE",		"\xF3\xD7" => "\xE7\xAC\x9E",		"\xF3\xD8" => "\xE7\xAD\x98",		"\xF3\xD9" => "\xE7\xAD\x9A",		"\xF3\xDA" => "\xE7\xAD\x85",		"\xF3\xDB" => "\xE7\xAD\xB5",		"\xF3\xDC" => "\xE7\xAD\x8C",		"\xF3\xDD" => "\xE7\xAD\x9D",		"\xF3\xDE" => "\xE7\xAD\xA0",		"\xF3\xDF" => "\xE7\xAD\xAE",		"\xF3\xE0" => "\xE7\xAD\xBB",		"\xF3\xE1" => "\xE7\xAD\xA2",		"\xF3\xE2" => "\xE7\xAD\xB2",		"\xF3\xE3" => "\xE7\xAD\xB1",		"\xF3\xE4" => "\xE7\xAE\x90",		"\xF3\xE5" => "\xE7\xAE\xA6",		"\xF3\xE6" => "\xE7\xAE\xA7",		"\xF3\xE7" => "\xE7\xAE\xB8",		"\xF3\xE8" => "\xE7\xAE\xAC",		"\xF3\xE9" => "\xE7\xAE\x9D",		"\xF3\xEA" => "\xE7\xAE\xA8",		"\xF3\xEB" => "\xE7\xAE\x85",		"\xF3\xEC" => "\xE7\xAE\xAA",		"\xF3\xED" => "\xE7\xAE\x9C",		"\xF3\xEE" => "\xE7\xAE\xA2",		"\xF3\xEF" => "\xE7\xAE\xAB",		"\xF3\xF0" => "\xE7\xAE\xB4",		"\xF3\xF1" => "\xE7\xAF\x91",		"\xF3\xF2" => "\xE7\xAF\x81",		"\xF3\xF3" => "\xE7\xAF\x8C",		"\xF3\xF4" => "\xE7\xAF\x9D",		"\xF3\xF5" => "\xE7\xAF\x9A",		"\xF3\xF6" => "\xE7\xAF\xA5",		"\xF3\xF7" => "\xE7\xAF\xA6",		"\xF3\xF8" => "\xE7\xAF\xAA",		"\xF3\xF9" => "\xE7\xB0\x8C",		"\xF3\xFA" => "\xE7\xAF\xBE",		"\xF3\xFB" => "\xE7\xAF\xBC",		"\xF3\xFC" => "\xE7\xB0\x8F",		"\xF3\xFD" => "\xE7\xB0\x96",		"\xF3\xFE" => "\xE7\xB0\x8B",		"\xF4\xA1" => "\xE7\xB0\x9F",		"\xF4\xA2" => "\xE7\xB0\xAA",		"\xF4\xA3" => "\xE7\xB0\xA6",		"\xF4\xA4" => "\xE7\xB0\xB8",		"\xF4\xA5" => "\xE7\xB1\x81",		"\xF4\xA6" => "\xE7\xB1\x80",		"\xF4\xA7" => "\xE8\x87\xBE",		"\xF4\xA8" => "\xE8\x88\x81",		"\xF4\xA9" => "\xE8\x88\x82",		"\xF4\xAA" => "\xE8\x88\x84",		"\xF4\xAB" => "\xE8\x87\xAC",		"\xF4\xAC" => "\xE8\xA1\x84",		"\xF4\xAD" => "\xE8\x88\xA1",		"\xF4\xAE" => "\xE8\x88\xA2",		"\xF4\xAF" => "\xE8\x88\xA3",		"\xF4\xB0" => "\xE8\x88\xAD",		"\xF4\xB1" => "\xE8\x88\xAF",		"\xF4\xB2" => "\xE8\x88\xA8",		"\xF4\xB3" => "\xE8\x88\xAB",		"\xF4\xB4" => "\xE8\x88\xB8",		"\xF4\xB5" => "\xE8\x88\xBB",		"\xF4\xB6" => "\xE8\x88\xB3",		"\xF4\xB7" => "\xE8\x88\xB4",		"\xF4\xB8" => "\xE8\x88\xBE",		"\xF4\xB9" => "\xE8\x89\x84",		"\xF4\xBA" => "\xE8\x89\x89",		"\xF4\xBB" => "\xE8\x89\x8B",		"\xF4\xBC" => "\xE8\x89\x8F",		"\xF4\xBD" => "\xE8\x89\x9A",		"\xF4\xBE" => "\xE8\x89\x9F",		"\xF4\xBF" => "\xE8\x89\xA8",		"\xF4\xC0" => "\xE8\xA1\xBE",		"\xF4\xC1" => "\xE8\xA2\x85",		"\xF4\xC2" => "\xE8\xA2\x88",		"\xF4\xC3" => "\xE8\xA3\x98",		"\xF4\xC4" => "\xE8\xA3\x9F",		"\xF4\xC5" => "\xE8\xA5\x9E",		"\xF4\xC6" => "\xE7\xBE\x9D",		"\xF4\xC7" => "\xE7\xBE\x9F",		"\xF4\xC8" => "\xE7\xBE\xA7",		"\xF4\xC9" => "\xE7\xBE\xAF",		"\xF4\xCA" => "\xE7\xBE\xB0",		"\xF4\xCB" => "\xE7\xBE\xB2",		"\xF4\xCC" => "\xE7\xB1\xBC",		"\xF4\xCD" => "\xE6\x95\x89",		"\xF4\xCE" => "\xE7\xB2\x91",		"\xF4\xCF" => "\xE7\xB2\x9D",		"\xF4\xD0" => "\xE7\xB2\x9C",		"\xF4\xD1" => "\xE7\xB2\x9E",		"\xF4\xD2" => "\xE7\xB2\xA2",		"\xF4\xD3" => "\xE7\xB2\xB2",		"\xF4\xD4" => "\xE7\xB2\xBC",		"\xF4\xD5" => "\xE7\xB2\xBD",		"\xF4\xD6" => "\xE7\xB3\x81",		"\xF4\xD7" => "\xE7\xB3\x87",		"\xF4\xD8" => "\xE7\xB3\x8C",		"\xF4\xD9" => "\xE7\xB3\x8D",		"\xF4\xDA" => "\xE7\xB3\x88",		"\xF4\xDB" => "\xE7\xB3\x85",		"\xF4\xDC" => "\xE7\xB3\x97",		"\xF4\xDD" => "\xE7\xB3\xA8",		"\xF4\xDE" => "\xE8\x89\xAE",		"\xF4\xDF" => "\xE6\x9A\xA8",		"\xF4\xE0" => "\xE7\xBE\xBF",		"\xF4\xE1" => "\xE7\xBF\x8E",		"\xF4\xE2" => "\xE7\xBF\x95",		"\xF4\xE3" => "\xE7\xBF\xA5",		"\xF4\xE4" => "\xE7\xBF\xA1",		"\xF4\xE5" => "\xE7\xBF\xA6",		"\xF4\xE6" => "\xE7\xBF\xA9",		"\xF4\xE7" => "\xE7\xBF\xAE",		"\xF4\xE8" => "\xE7\xBF\xB3",		"\xF4\xE9" => "\xE7\xB3\xB8",		"\xF4\xEA" => "\xE7\xB5\xB7",		"\xF4\xEB" => "\xE7\xB6\xA6",		"\xF4\xEC" => "\xE7\xB6\xAE",		"\xF4\xED" => "\xE7\xB9\x87",		"\xF4\xEE" => "\xE7\xBA\x9B",		"\xF4\xEF" => "\xE9\xBA\xB8",		"\xF4\xF0" => "\xE9\xBA\xB4",		"\xF4\xF1" => "\xE8\xB5\xB3",		"\xF4\xF2" => "\xE8\xB6\x84",		"\xF4\xF3" => "\xE8\xB6\x94",		"\xF4\xF4" => "\xE8\xB6\x91",		"\xF4\xF5" => "\xE8\xB6\xB1",		"\xF4\xF6" => "\xE8\xB5\xA7",		"\xF4\xF7" => "\xE8\xB5\xAD",		"\xF4\xF8" => "\xE8\xB1\x87",		"\xF4\xF9" => "\xE8\xB1\x89",		"\xF4\xFA" => "\xE9\x85\x8A",		"\xF4\xFB" => "\xE9\x85\x90",		"\xF4\xFC" => "\xE9\x85\x8E",		"\xF4\xFD" => "\xE9\x85\x8F",		"\xF4\xFE" => "\xE9\x85\xA4",		"\xF5\xA1" => "\xE9\x85\xA2",		"\xF5\xA2" => "\xE9\x85\xA1",		"\xF5\xA3" => "\xE9\x85\xB0",		"\xF5\xA4" => "\xE9\x85\xA9",		"\xF5\xA5" => "\xE9\x85\xAF",		"\xF5\xA6" => "\xE9\x85\xBD",		"\xF5\xA7" => "\xE9\x85\xBE",		"\xF5\xA8" => "\xE9\x85\xB2",		"\xF5\xA9" => "\xE9\x85\xB4",		"\xF5\xAA" => "\xE9\x85\xB9",		"\xF5\xAB" => "\xE9\x86\x8C",		"\xF5\xAC" => "\xE9\x86\x85",		"\xF5\xAD" => "\xE9\x86\x90",		"\xF5\xAE" => "\xE9\x86\x8D",		"\xF5\xAF" => "\xE9\x86\x91",		"\xF5\xB0" => "\xE9\x86\xA2",		"\xF5\xB1" => "\xE9\x86\xA3",		"\xF5\xB2" => "\xE9\x86\xAA",		"\xF5\xB3" => "\xE9\x86\xAD",		"\xF5\xB4" => "\xE9\x86\xAE",		"\xF5\xB5" => "\xE9\x86\xAF",		"\xF5\xB6" => "\xE9\x86\xB5",		"\xF5\xB7" => "\xE9\x86\xB4",		"\xF5\xB8" => "\xE9\x86\xBA",		"\xF5\xB9" => "\xE8\xB1\x95",		"\xF5\xBA" => "\xE9\xB9\xBE",		"\xF5\xBB" => "\xE8\xB6\xB8",		"\xF5\xBC" => "\xE8\xB7\xAB",		"\xF5\xBD" => "\xE8\xB8\x85",		"\xF5\xBE" => "\xE8\xB9\x99",		"\xF5\xBF" => "\xE8\xB9\xA9",		"\xF5\xC0" => "\xE8\xB6\xB5",		"\xF5\xC1" => "\xE8\xB6\xBF",		"\xF5\xC2" => "\xE8\xB6\xBC",		"\xF5\xC3" => "\xE8\xB6\xBA",		"\xF5\xC4" => "\xE8\xB7\x84",		"\xF5\xC5" => "\xE8\xB7\x96",		"\xF5\xC6" => "\xE8\xB7\x97",		"\xF5\xC7" => "\xE8\xB7\x9A",		"\xF5\xC8" => "\xE8\xB7\x9E",		"\xF5\xC9" => "\xE8\xB7\x8E",		"\xF5\xCA" => "\xE8\xB7\x8F",		"\xF5\xCB" => "\xE8\xB7\x9B",		"\xF5\xCC" => "\xE8\xB7\x86",		"\xF5\xCD" => "\xE8\xB7\xAC",		"\xF5\xCE" => "\xE8\xB7\xB7",		"\xF5\xCF" => "\xE8\xB7\xB8",		"\xF5\xD0" => "\xE8\xB7\xA3",		"\xF5\xD1" => "\xE8\xB7\xB9",		"\xF5\xD2" => "\xE8\xB7\xBB",		"\xF5\xD3" => "\xE8\xB7\xA4",		"\xF5\xD4" => "\xE8\xB8\x89",		"\xF5\xD5" => "\xE8\xB7\xBD",		"\xF5\xD6" => "\xE8\xB8\x94",		"\xF5\xD7" => "\xE8\xB8\x9D",		"\xF5\xD8" => "\xE8\xB8\x9F",		"\xF5\xD9" => "\xE8\xB8\xAC",		"\xF5\xDA" => "\xE8\xB8\xAE",		"\xF5\xDB" => "\xE8\xB8\xA3",		"\xF5\xDC" => "\xE8\xB8\xAF",		"\xF5\xDD" => "\xE8\xB8\xBA",		"\xF5\xDE" => "\xE8\xB9\x80",		"\xF5\xDF" => "\xE8\xB8\xB9",		"\xF5\xE0" => "\xE8\xB8\xB5",		"\xF5\xE1" => "\xE8\xB8\xBD",		"\xF5\xE2" => "\xE8\xB8\xB1",		"\xF5\xE3" => "\xE8\xB9\x89",		"\xF5\xE4" => "\xE8\xB9\x81",		"\xF5\xE5" => "\xE8\xB9\x82",		"\xF5\xE6" => "\xE8\xB9\x91",		"\xF5\xE7" => "\xE8\xB9\x92",		"\xF5\xE8" => "\xE8\xB9\x8A",		"\xF5\xE9" => "\xE8\xB9\xB0",		"\xF5\xEA" => "\xE8\xB9\xB6",		"\xF5\xEB" => "\xE8\xB9\xBC",		"\xF5\xEC" => "\xE8\xB9\xAF",		"\xF5\xED" => "\xE8\xB9\xB4",		"\xF5\xEE" => "\xE8\xBA\x85",		"\xF5\xEF" => "\xE8\xBA\x8F",		"\xF5\xF0" => "\xE8\xBA\x94",		"\xF5\xF1" => "\xE8\xBA\x90",		"\xF5\xF2" => "\xE8\xBA\x9C",		"\xF5\xF3" => "\xE8\xBA\x9E",		"\xF5\xF4" => "\xE8\xB1\xB8",		"\xF5\xF5" => "\xE8\xB2\x82",		"\xF5\xF6" => "\xE8\xB2\x8A",		"\xF5\xF7" => "\xE8\xB2\x85",		"\xF5\xF8" => "\xE8\xB2\x98",		"\xF5\xF9" => "\xE8\xB2\x94",		"\xF5\xFA" => "\xE6\x96\x9B",		"\xF5\xFB" => "\xE8\xA7\x96",		"\xF5\xFC" => "\xE8\xA7\x9E",		"\xF5\xFD" => "\xE8\xA7\x9A",		"\xF5\xFE" => "\xE8\xA7\x9C",		"\xF6\xA1" => "\xE8\xA7\xA5",		"\xF6\xA2" => "\xE8\xA7\xAB",		"\xF6\xA3" => "\xE8\xA7\xAF",		"\xF6\xA4" => "\xE8\xA8\xBE",		"\xF6\xA5" => "\xE8\xAC\xA6",		"\xF6\xA6" => "\xE9\x9D\x93",		"\xF6\xA7" => "\xE9\x9B\xA9",		"\xF6\xA8" => "\xE9\x9B\xB3",		"\xF6\xA9" => "\xE9\x9B\xAF",		"\xF6\xAA" => "\xE9\x9C\x86",		"\xF6\xAB" => "\xE9\x9C\x81",		"\xF6\xAC" => "\xE9\x9C\x88",		"\xF6\xAD" => "\xE9\x9C\x8F",		"\xF6\xAE" => "\xE9\x9C\x8E",		"\xF6\xAF" => "\xE9\x9C\xAA",		"\xF6\xB0" => "\xE9\x9C\xAD",		"\xF6\xB1" => "\xE9\x9C\xB0",		"\xF6\xB2" => "\xE9\x9C\xBE",		"\xF6\xB3" => "\xE9\xBE\x80",		"\xF6\xB4" => "\xE9\xBE\x83",		"\xF6\xB5" => "\xE9\xBE\x85",		"\xF6\xB6" => "\xE9\xBE\x86",		"\xF6\xB7" => "\xE9\xBE\x87",		"\xF6\xB8" => "\xE9\xBE\x88",		"\xF6\xB9" => "\xE9\xBE\x89",		"\xF6\xBA" => "\xE9\xBE\x8A",		"\xF6\xBB" => "\xE9\xBE\x8C",		"\xF6\xBC" => "\xE9\xBB\xBE",		"\xF6\xBD" => "\xE9\xBC\x8B",		"\xF6\xBE" => "\xE9\xBC\x8D",		"\xF6\xBF" => "\xE9\x9A\xB9",		"\xF6\xC0" => "\xE9\x9A\xBC",		"\xF6\xC1" => "\xE9\x9A\xBD",		"\xF6\xC2" => "\xE9\x9B\x8E",		"\xF6\xC3" => "\xE9\x9B\x92",		"\xF6\xC4" => "\xE7\x9E\xBF",		"\xF6\xC5" => "\xE9\x9B\xA0",		"\xF6\xC6" => "\xE9\x8A\x8E",		"\xF6\xC7" => "\xE9\x8A\xAE",		"\xF6\xC8" => "\xE9\x8B\x88",		"\xF6\xC9" => "\xE9\x8C\xBE",		"\xF6\xCA" => "\xE9\x8D\xAA",		"\xF6\xCB" => "\xE9\x8F\x8A",		"\xF6\xCC" => "\xE9\x8E\x8F",		"\xF6\xCD" => "\xE9\x90\xBE",		"\xF6\xCE" => "\xE9\x91\xAB",		"\xF6\xCF" => "\xE9\xB1\xBF",		"\xF6\xD0" => "\xE9\xB2\x82",		"\xF6\xD1" => "\xE9\xB2\x85",		"\xF6\xD2" => "\xE9\xB2\x86",		"\xF6\xD3" => "\xE9\xB2\x87",		"\xF6\xD4" => "\xE9\xB2\x88",		"\xF6\xD5" => "\xE7\xA8\xA3",		"\xF6\xD6" => "\xE9\xB2\x8B",		"\xF6\xD7" => "\xE9\xB2\x8E",		"\xF6\xD8" => "\xE9\xB2\x90",		"\xF6\xD9" => "\xE9\xB2\x91",		"\xF6\xDA" => "\xE9\xB2\x92",		"\xF6\xDB" => "\xE9\xB2\x94",		"\xF6\xDC" => "\xE9\xB2\x95",		"\xF6\xDD" => "\xE9\xB2\x9A",		"\xF6\xDE" => "\xE9\xB2\x9B",		"\xF6\xDF" => "\xE9\xB2\x9E",		"\xF6\xE0" => "\xE9\xB2\x9F",		"\xF6\xE1" => "\xE9\xB2\xA0",		"\xF6\xE2" => "\xE9\xB2\xA1",		"\xF6\xE3" => "\xE9\xB2\xA2",		"\xF6\xE4" => "\xE9\xB2\xA3",		"\xF6\xE5" => "\xE9\xB2\xA5",		"\xF6\xE6" => "\xE9\xB2\xA6",		"\xF6\xE7" => "\xE9\xB2\xA7",		"\xF6\xE8" => "\xE9\xB2\xA8",		"\xF6\xE9" => "\xE9\xB2\xA9",		"\xF6\xEA" => "\xE9\xB2\xAB",		"\xF6\xEB" => "\xE9\xB2\xAD",		"\xF6\xEC" => "\xE9\xB2\xAE",		"\xF6\xED" => "\xE9\xB2\xB0",		"\xF6\xEE" => "\xE9\xB2\xB1",		"\xF6\xEF" => "\xE9\xB2\xB2",		"\xF6\xF0" => "\xE9\xB2\xB3",		"\xF6\xF1" => "\xE9\xB2\xB4",		"\xF6\xF2" => "\xE9\xB2\xB5",		"\xF6\xF3" => "\xE9\xB2\xB6",		"\xF6\xF4" => "\xE9\xB2\xB7",		"\xF6\xF5" => "\xE9\xB2\xBA",		"\xF6\xF6" => "\xE9\xB2\xBB",		"\xF6\xF7" => "\xE9\xB2\xBC",		"\xF6\xF8" => "\xE9\xB2\xBD",		"\xF6\xF9" => "\xE9\xB3\x84",		"\xF6\xFA" => "\xE9\xB3\x85",		"\xF6\xFB" => "\xE9\xB3\x86",		"\xF6\xFC" => "\xE9\xB3\x87",		"\xF6\xFD" => "\xE9\xB3\x8A",		"\xF6\xFE" => "\xE9\xB3\x8B",		"\xF7\xA1" => "\xE9\xB3\x8C",		"\xF7\xA2" => "\xE9\xB3\x8D",		"\xF7\xA3" => "\xE9\xB3\x8E",		"\xF7\xA4" => "\xE9\xB3\x8F",		"\xF7\xA5" => "\xE9\xB3\x90",		"\xF7\xA6" => "\xE9\xB3\x93",		"\xF7\xA7" => "\xE9\xB3\x94",		"\xF7\xA8" => "\xE9\xB3\x95",		"\xF7\xA9" => "\xE9\xB3\x97",		"\xF7\xAA" => "\xE9\xB3\x98",		"\xF7\xAB" => "\xE9\xB3\x99",		"\xF7\xAC" => "\xE9\xB3\x9C",		"\xF7\xAD" => "\xE9\xB3\x9D",		"\xF7\xAE" => "\xE9\xB3\x9F",		"\xF7\xAF" => "\xE9\xB3\xA2",		"\xF7\xB0" => "\xE9\x9D\xBC",		"\xF7\xB1" => "\xE9\x9E\x85",		"\xF7\xB2" => "\xE9\x9E\x91",		"\xF7\xB3" => "\xE9\x9E\x92",		"\xF7\xB4" => "\xE9\x9E\x94",		"\xF7\xB5" => "\xE9\x9E\xAF",		"\xF7\xB6" => "\xE9\x9E\xAB",		"\xF7\xB7" => "\xE9\x9E\xA3",		"\xF7\xB8" => "\xE9\x9E\xB2",		"\xF7\xB9" => "\xE9\x9E\xB4",		"\xF7\xBA" => "\xE9\xAA\xB1",		"\xF7\xBB" => "\xE9\xAA\xB0",		"\xF7\xBC" => "\xE9\xAA\xB7",		"\xF7\xBD" => "\xE9\xB9\x98",		"\xF7\xBE" => "\xE9\xAA\xB6",		"\xF7\xBF" => "\xE9\xAA\xBA",		"\xF7\xC0" => "\xE9\xAA\xBC",		"\xF7\xC1" => "\xE9\xAB\x81",		"\xF7\xC2" => "\xE9\xAB\x80",		"\xF7\xC3" => "\xE9\xAB\x85",		"\xF7\xC4" => "\xE9\xAB\x82",		"\xF7\xC5" => "\xE9\xAB\x8B",		"\xF7\xC6" => "\xE9\xAB\x8C",		"\xF7\xC7" => "\xE9\xAB\x91",		"\xF7\xC8" => "\xE9\xAD\x85",		"\xF7\xC9" => "\xE9\xAD\x83",		"\xF7\xCA" => "\xE9\xAD\x87",		"\xF7\xCB" => "\xE9\xAD\x89",		"\xF7\xCC" => "\xE9\xAD\x88",		"\xF7\xCD" => "\xE9\xAD\x8D",		"\xF7\xCE" => "\xE9\xAD\x91",		"\xF7\xCF" => "\xE9\xA3\xA8",		"\xF7\xD0" => "\xE9\xA4\x8D",		"\xF7\xD1" => "\xE9\xA4\xAE",		"\xF7\xD2" => "\xE9\xA5\x95",		"\xF7\xD3" => "\xE9\xA5\x94",		"\xF7\xD4" => "\xE9\xAB\x9F",		"\xF7\xD5" => "\xE9\xAB\xA1",		"\xF7\xD6" => "\xE9\xAB\xA6",		"\xF7\xD7" => "\xE9\xAB\xAF",		"\xF7\xD8" => "\xE9\xAB\xAB",		"\xF7\xD9" => "\xE9\xAB\xBB",		"\xF7\xDA" => "\xE9\xAB\xAD",		"\xF7\xDB" => "\xE9\xAB\xB9",		"\xF7\xDC" => "\xE9\xAC\x88",		"\xF7\xDD" => "\xE9\xAC\x8F",		"\xF7\xDE" => "\xE9\xAC\x93",		"\xF7\xDF" => "\xE9\xAC\x9F",		"\xF7\xE0" => "\xE9\xAC\xA3",		"\xF7\xE1" => "\xE9\xBA\xBD",		"\xF7\xE2" => "\xE9\xBA\xBE",		"\xF7\xE3" => "\xE7\xB8\xBB",		"\xF7\xE4" => "\xE9\xBA\x82",		"\xF7\xE5" => "\xE9\xBA\x87",		"\xF7\xE6" => "\xE9\xBA\x88",		"\xF7\xE7" => "\xE9\xBA\x8B",		"\xF7\xE8" => "\xE9\xBA\x92",		"\xF7\xE9" => "\xE9\x8F\x96",		"\xF7\xEA" => "\xE9\xBA\x9D",		"\xF7\xEB" => "\xE9\xBA\x9F",		"\xF7\xEC" => "\xE9\xBB\x9B",		"\xF7\xED" => "\xE9\xBB\x9C",		"\xF7\xEE" => "\xE9\xBB\x9D",		"\xF7\xEF" => "\xE9\xBB\xA0",		"\xF7\xF0" => "\xE9\xBB\x9F",		"\xF7\xF1" => "\xE9\xBB\xA2",		"\xF7\xF2" => "\xE9\xBB\xA9",		"\xF7\xF3" => "\xE9\xBB\xA7",		"\xF7\xF4" => "\xE9\xBB\xA5",		"\xF7\xF5" => "\xE9\xBB\xAA",		"\xF7\xF6" => "\xE9\xBB\xAF",		"\xF7\xF7" => "\xE9\xBC\xA2",		"\xF7\xF8" => "\xE9\xBC\xAC",		"\xF7\xF9" => "\xE9\xBC\xAF",		"\xF7\xFA" => "\xE9\xBC\xB9",		"\xF7\xFB" => "\xE9\xBC\xB7",		"\xF7\xFC" => "\xE9\xBC\xBD",		"\xF7\xFD" => "\xE9\xBC\xBE",		"\xF7\xFE" => "\xE9\xBD\x84",	);	return strtr($string, $transform);}function sjis($string){	static $transform = array(		"\x5C"=>"\xC2\xA5",		"\x7E"=>"\xE2\x80\xBE",		"\x81\x40"=>"\xE3\x80\x80",		"\x81\x41"=>"\xE3\x80\x81",		"\x81\x42"=>"\xE3\x80\x82",		"\x81\x43"=>"\xEF\xBC\x8C",		"\x81\x44"=>"\xEF\xBC\x8E",		"\x81\x45"=>"\xE3\x83\xBB",		"\x81\x46"=>"\xEF\xBC\x9A",		"\x81\x47"=>"\xEF\xBC\x9B",		"\x81\x48"=>"\xEF\xBC\x9F",		"\x81\x49"=>"\xEF\xBC\x81",		"\x81\x4A"=>"\xE3\x82\x9B",		"\x81\x4B"=>"\xE3\x82\x9C",		"\x81\x4C"=>"\xC2\xB4",		"\x81\x4D"=>"\xEF\xBD\x80",		"\x81\x4E"=>"\xC2\xA8",		"\x81\x4F"=>"\xEF\xBC\xBE",		"\x81\x50"=>"\xEF\xBF\xA3",		"\x81\x51"=>"\xEF\xBC\xBF",		"\x81\x52"=>"\xE3\x83\xBD",		"\x81\x53"=>"\xE3\x83\xBE",		"\x81\x54"=>"\xE3\x82\x9D",		"\x81\x55"=>"\xE3\x82\x9E",		"\x81\x56"=>"\xE3\x80\x83",		"\x81\x57"=>"\xE4\xBB\x9D",		"\x81\x58"=>"\xE3\x80\x85",		"\x81\x59"=>"\xE3\x80\x86",		"\x81\x5A"=>"\xE3\x80\x87",		"\x81\x5B"=>"\xE3\x83\xBC",		"\x81\x5C"=>"\xE2\x80\x95", // set as U+2015 but could be U+2014		"\x81\x5D"=>"\xE2\x80\x90",		"\x81\x5E"=>"\xEF\xBC\x8F",		"\x81\x5F"=>"\xEF\xBC\xBC", // or U+005C		"\x81\x60"=>"\xE3\x80\x9C",		"\x81\x61"=>"\xE2\x80\x96",		"\x81\x62"=>"\xEF\xBD\x9C",		"\x81\x63"=>"\xE2\x80\xA6",		"\x81\x64"=>"\xE2\x80\xA5",		"\x81\x65"=>"\xE2\x80\x98",		"\x81\x66"=>"\xE2\x80\x99",		"\x81\x67"=>"\xE2\x80\x9C",		"\x81\x68"=>"\xE2\x80\x9D",		"\x81\x69"=>"\xEF\xBC\x88",		"\x81\x6A"=>"\xEF\xBC\x89",		"\x81\x6B"=>"\xE3\x80\x94",		"\x81\x6C"=>"\xE3\x80\x95",		"\x81\x6D"=>"\xEF\xBC\xBB",		"\x81\x6E"=>"\xEF\xBC\xBD",		"\x81\x6F"=>"\xEF\xBD\x9B",		"\x81\x70"=>"\xEF\xBD\x9D",		"\x81\x71"=>"\xE3\x80\x88",		"\x81\x72"=>"\xE3\x80\x89",		"\x81\x73"=>"\xE3\x80\x8A",		"\x81\x74"=>"\xE3\x80\x8B",		"\x81\x75"=>"\xE3\x80\x8C",		"\x81\x76"=>"\xE3\x80\x8D",		"\x81\x77"=>"\xE3\x80\x8E",		"\x81\x78"=>"\xE3\x80\x8F",		"\x81\x79"=>"\xE3\x80\x90",		"\x81\x7A"=>"\xE3\x80\x91",		"\x81\x7B"=>"\xEF\xBC\x8B",		"\x81\x7C"=>"\xE2\x88\x92",		"\x81\x7D"=>"\xC2\xB1",		"\x81\x7E"=>"\xC3\x97",		"\x81\x80"=>"\xC3\xB7",		"\x81\x81"=>"\xEF\xBC\x9D",		"\x81\x82"=>"\xE2\x89\xA0",		"\x81\x83"=>"\xEF\xBC\x9C",		"\x81\x84"=>"\xEF\xBC\x9E",		"\x81\x85"=>"\xE2\x89\xA6",		"\x81\x86"=>"\xE2\x89\xA7",		"\x81\x87"=>"\xE2\x88\x9E",		"\x81\x88"=>"\xE2\x88\xB4",		"\x81\x89"=>"\xE2\x99\x82",		"\x81\x8A"=>"\xE2\x99\x80",		"\x81\x8B"=>"\xC2\xB0",		"\x81\x8C"=>"\xE2\x80\xB2",		"\x81\x8D"=>"\xE2\x80\xB3",		"\x81\x8E"=>"\xE2\x84\x83",		"\x81\x8F"=>"\xEF\xBF\xA5",		"\x81\x90"=>"\xEF\xBC\x84",		"\x81\x91"=>"\xC2\xA2",		"\x81\x92"=>"\xC2\xA3",		"\x81\x93"=>"\xEF\xBC\x85",		"\x81\x94"=>"\xEF\xBC\x83",		"\x81\x95"=>"\xEF\xBC\x86",		"\x81\x96"=>"\xEF\xBC\x8A",		"\x81\x97"=>"\xEF\xBC\xA0",		"\x81\x98"=>"\xC2\xA7",		"\x81\x99"=>"\xE2\x98\x86",		"\x81\x9A"=>"\xE2\x98\x85",		"\x81\x9B"=>"\xE2\x97\x8B",		"\x81\x9C"=>"\xE2\x97\x8F",		"\x81\x9D"=>"\xE2\x97\x8E",		"\x81\x9E"=>"\xE2\x97\x87",		"\x81\x9F"=>"\xE2\x97\x86",		"\x81\xA0"=>"\xE2\x96\xA1",		"\x81\xA1"=>"\xE2\x96\xA0",		"\x81\xA2"=>"\xE2\x96\xB3",		"\x81\xA3"=>"\xE2\x96\xB2",		"\x81\xA4"=>"\xE2\x96\xBD",		"\x81\xA5"=>"\xE2\x96\xBC",		"\x81\xA6"=>"\xE2\x80\xBB",		"\x81\xA7"=>"\xE3\x80\x92",		"\x81\xA8"=>"\xE2\x86\x92",		"\x81\xA9"=>"\xE2\x86\x90",		"\x81\xAA"=>"\xE2\x86\x91",		"\x81\xAB"=>"\xE2\x86\x93",		"\x81\xAC"=>"\xE3\x80\x93",		"\x81\xAD"=>"\xEF\xBC\x87", // extra?!		"\x81\xB8"=>"\xE2\x88\x88",		"\x81\xB9"=>"\xE2\x88\x8B",		"\x81\xBA"=>"\xE2\x8A\x86",		"\x81\xBB"=>"\xE2\x8A\x87",		"\x81\xBC"=>"\xE2\x8A\x82",		"\x81\xBD"=>"\xE2\x8A\x83",		"\x81\xBE"=>"\xE2\x88\xAA",		"\x81\xBF"=>"\xE2\x88\xA9",		"\x81\xC8"=>"\xE2\x88\xA7",		"\x81\xC9"=>"\xE2\x88\xA8",		"\x81\xCA"=>"\xC2\xAC",		"\x81\xCB"=>"\xE2\x87\x92",		"\x81\xCC"=>"\xE2\x87\x94",		"\x81\xCD"=>"\xE2\x88\x80",		"\x81\xCE"=>"\xE2\x88\x83",		"\x81\xDA"=>"\xE2\x88\xA0",		"\x81\xDB"=>"\xE2\x8A\xA5",		"\x81\xDC"=>"\xE2\x8C\x92",		"\x81\xDD"=>"\xE2\x88\x82",		"\x81\xDE"=>"\xE2\x88\x87",		"\x81\xDF"=>"\xE2\x89\xA1",		"\x81\xE0"=>"\xE2\x89\x92",		"\x81\xE1"=>"\xE2\x89\xAA",		"\x81\xE2"=>"\xE2\x89\xAB",		"\x81\xE3"=>"\xE2\x88\x9A",		"\x81\xE4"=>"\xE2\x88\xBD",		"\x81\xE5"=>"\xE2\x88\x9D",		"\x81\xE6"=>"\xE2\x88\xB5",		"\x81\xE7"=>"\xE2\x88\xAB",		"\x81\xE8"=>"\xE2\x88\xAC",		"\x81\xF0"=>"\xE2\x84\xAB",		"\x81\xF1"=>"\xE2\x80\xB0",		"\x81\xF2"=>"\xE2\x99\xAF",		"\x81\xF3"=>"\xE2\x99\xAD",		"\x81\xF4"=>"\xE2\x99\xAA",		"\x81\xF5"=>"\xE2\x80\xA0",		"\x81\xF6"=>"\xE2\x80\xA1",		"\x81\xF7"=>"\xC2\xB6",		"\x81\xFC"=>"\xE2\x97\xAF",		"\x82\x4F"=>"\xEF\xBC\x90",		"\x82\x50"=>"\xEF\xBC\x91",		"\x82\x51"=>"\xEF\xBC\x92",		"\x82\x52"=>"\xEF\xBC\x93",		"\x82\x53"=>"\xEF\xBC\x94",		"\x82\x54"=>"\xEF\xBC\x95",		"\x82\x55"=>"\xEF\xBC\x96",		"\x82\x56"=>"\xEF\xBC\x97",		"\x82\x57"=>"\xEF\xBC\x98",		"\x82\x58"=>"\xEF\xBC\x99",		"\x82\x60"=>"\xEF\xBC\xA1",		"\x82\x61"=>"\xEF\xBC\xA2",		"\x82\x62"=>"\xEF\xBC\xA3",		"\x82\x63"=>"\xEF\xBC\xA4",		"\x82\x64"=>"\xEF\xBC\xA5",		"\x82\x65"=>"\xEF\xBC\xA6",		"\x82\x66"=>"\xEF\xBC\xA7",		"\x82\x67"=>"\xEF\xBC\xA8",		"\x82\x68"=>"\xEF\xBC\xA9",		"\x82\x69"=>"\xEF\xBC\xAA",		"\x82\x6A"=>"\xEF\xBC\xAB",		"\x82\x6B"=>"\xEF\xBC\xAC",		"\x82\x6C"=>"\xEF\xBC\xAD",		"\x82\x6D"=>"\xEF\xBC\xAE",		"\x82\x6E"=>"\xEF\xBC\xAF",		"\x82\x6F"=>"\xEF\xBC\xB0",		"\x82\x70"=>"\xEF\xBC\xB1",		"\x82\x71"=>"\xEF\xBC\xB2",		"\x82\x72"=>"\xEF\xBC\xB3",		"\x82\x73"=>"\xEF\xBC\xB4",		"\x82\x74"=>"\xEF\xBC\xB5",		"\x82\x75"=>"\xEF\xBC\xB6",		"\x82\x76"=>"\xEF\xBC\xB7",		"\x82\x77"=>"\xEF\xBC\xB8",		"\x82\x78"=>"\xEF\xBC\xB9",		"\x82\x79"=>"\xEF\xBC\xBA",		"\x82\x81"=>"\xEF\xBD\x81",		"\x82\x82"=>"\xEF\xBD\x82",		"\x82\x83"=>"\xEF\xBD\x83",		"\x82\x84"=>"\xEF\xBD\x84",		"\x82\x85"=>"\xEF\xBD\x85",		"\x82\x86"=>"\xEF\xBD\x86",		"\x82\x87"=>"\xEF\xBD\x87",		"\x82\x88"=>"\xEF\xBD\x88",		"\x82\x89"=>"\xEF\xBD\x89",		"\x82\x8A"=>"\xEF\xBD\x8A",		"\x82\x8B"=>"\xEF\xBD\x8B",		"\x82\x8C"=>"\xEF\xBD\x8C",		"\x82\x8D"=>"\xEF\xBD\x8D",		"\x82\x8E"=>"\xEF\xBD\x8E",		"\x82\x8F"=>"\xEF\xBD\x8F",		"\x82\x90"=>"\xEF\xBD\x90",		"\x82\x91"=>"\xEF\xBD\x91",		"\x82\x92"=>"\xEF\xBD\x92",		"\x82\x93"=>"\xEF\xBD\x93",		"\x82\x94"=>"\xEF\xBD\x94",		"\x82\x95"=>"\xEF\xBD\x95",		"\x82\x96"=>"\xEF\xBD\x96",		"\x82\x97"=>"\xEF\xBD\x97",		"\x82\x98"=>"\xEF\xBD\x98",		"\x82\x99"=>"\xEF\xBD\x99",		"\x82\x9A"=>"\xEF\xBD\x9A",		"\x82\x9F"=>"\xE3\x81\x81",		"\x82\xA0"=>"\xE3\x81\x82",		"\x82\xA1"=>"\xE3\x81\x83",		"\x82\xA2"=>"\xE3\x81\x84",		"\x82\xA3"=>"\xE3\x81\x85",		"\x82\xA4"=>"\xE3\x81\x86",		"\x82\xA5"=>"\xE3\x81\x87",		"\x82\xA6"=>"\xE3\x81\x88",		"\x82\xA7"=>"\xE3\x81\x89",		"\x82\xA8"=>"\xE3\x81\x8A",		"\x82\xA9"=>"\xE3\x81\x8B",		"\x82\xAA"=>"\xE3\x81\x8C",		"\x82\xAB"=>"\xE3\x81\x8D",		"\x82\xAC"=>"\xE3\x81\x8E",		"\x82\xAD"=>"\xE3\x81\x8F",		"\x82\xAE"=>"\xE3\x81\x90",		"\x82\xAF"=>"\xE3\x81\x91",		"\x82\xB0"=>"\xE3\x81\x92",		"\x82\xB1"=>"\xE3\x81\x93",		"\x82\xB2"=>"\xE3\x81\x94",		"\x82\xB3"=>"\xE3\x81\x95",		"\x82\xB4"=>"\xE3\x81\x96",		"\x82\xB5"=>"\xE3\x81\x97",		"\x82\xB6"=>"\xE3\x81\x98",		"\x82\xB7"=>"\xE3\x81\x99",		"\x82\xB8"=>"\xE3\x81\x9A",		"\x82\xB9"=>"\xE3\x81\x9B",		"\x82\xBA"=>"\xE3\x81\x9C",		"\x82\xBB"=>"\xE3\x81\x9D",		"\x82\xBC"=>"\xE3\x81\x9E",		"\x82\xBD"=>"\xE3\x81\x9F",		"\x82\xBE"=>"\xE3\x81\xA0",		"\x82\xBF"=>"\xE3\x81\xA1",		"\x82\xC0"=>"\xE3\x81\xA2",		"\x82\xC1"=>"\xE3\x81\xA3",		"\x82\xC2"=>"\xE3\x81\xA4",		"\x82\xC3"=>"\xE3\x81\xA5",		"\x82\xC4"=>"\xE3\x81\xA6",		"\x82\xC5"=>"\xE3\x81\xA7",		"\x82\xC6"=>"\xE3\x81\xA8",		"\x82\xC7"=>"\xE3\x81\xA9",		"\x82\xC8"=>"\xE3\x81\xAA",		"\x82\xC9"=>"\xE3\x81\xAB",		"\x82\xCA"=>"\xE3\x81\xAC",		"\x82\xCB"=>"\xE3\x81\xAD",		"\x82\xCC"=>"\xE3\x81\xAE",		"\x82\xCD"=>"\xE3\x81\xAF",		"\x82\xCE"=>"\xE3\x81\xB0",		"\x82\xCF"=>"\xE3\x81\xB1",		"\x82\xD0"=>"\xE3\x81\xB2",		"\x82\xD1"=>"\xE3\x81\xB3",		"\x82\xD2"=>"\xE3\x81\xB4",		"\x82\xD3"=>"\xE3\x81\xB5",		"\x82\xD4"=>"\xE3\x81\xB6",		"\x82\xD5"=>"\xE3\x81\xB7",		"\x82\xD6"=>"\xE3\x81\xB8",		"\x82\xD7"=>"\xE3\x81\xB9",		"\x82\xD8"=>"\xE3\x81\xBA",		"\x82\xD9"=>"\xE3\x81\xBB",		"\x82\xDA"=>"\xE3\x81\xBC",		"\x82\xDB"=>"\xE3\x81\xBD",		"\x82\xDC"=>"\xE3\x81\xBE",		"\x82\xDD"=>"\xE3\x81\xBF",		"\x82\xDE"=>"\xE3\x82\x80",		"\x82\xDF"=>"\xE3\x82\x81",		"\x82\xE0"=>"\xE3\x82\x82",		"\x82\xE1"=>"\xE3\x82\x83",		"\x82\xE2"=>"\xE3\x82\x84",		"\x82\xE3"=>"\xE3\x82\x85",		"\x82\xE4"=>"\xE3\x82\x86",		"\x82\xE5"=>"\xE3\x82\x87",		"\x82\xE6"=>"\xE3\x82\x88",		"\x82\xE7"=>"\xE3\x82\x89",		"\x82\xE8"=>"\xE3\x82\x8A",		"\x82\xE9"=>"\xE3\x82\x8B",		"\x82\xEA"=>"\xE3\x82\x8C",		"\x82\xEB"=>"\xE3\x82\x8D",		"\x82\xEC"=>"\xE3\x82\x8E",		"\x82\xED"=>"\xE3\x82\x8F",		"\x82\xEE"=>"\xE3\x82\x90",		"\x82\xEF"=>"\xE3\x82\x91",		"\x82\xF0"=>"\xE3\x82\x92",		"\x82\xF1"=>"\xE3\x82\x93",		"\x83\x40"=>"\xE3\x82\xA1",		"\x83\x41"=>"\xE3\x82\xA2",		"\x83\x42"=>"\xE3\x82\xA3",		"\x83\x43"=>"\xE3\x82\xA4",		"\x83\x44"=>"\xE3\x82\xA5",		"\x83\x45"=>"\xE3\x82\xA6",		"\x83\x46"=>"\xE3\x82\xA7",		"\x83\x47"=>"\xE3\x82\xA8",		"\x83\x48"=>"\xE3\x82\xA9",		"\x83\x49"=>"\xE3\x82\xAA",		"\x83\x4A"=>"\xE3\x82\xAB",		"\x83\x4B"=>"\xE3\x82\xAC",		"\x83\x4C"=>"\xE3\x82\xAD",		"\x83\x4D"=>"\xE3\x82\xAE",		"\x83\x4E"=>"\xE3\x82\xAF",		"\x83\x4F"=>"\xE3\x82\xB0",		"\x83\x50"=>"\xE3\x82\xB1",		"\x83\x51"=>"\xE3\x82\xB2",		"\x83\x52"=>"\xE3\x82\xB3",		"\x83\x53"=>"\xE3\x82\xB4",		"\x83\x54"=>"\xE3\x82\xB5",		"\x83\x55"=>"\xE3\x82\xB6",		"\x83\x56"=>"\xE3\x82\xB7",		"\x83\x57"=>"\xE3\x82\xB8",		"\x83\x58"=>"\xE3\x82\xB9",		"\x83\x59"=>"\xE3\x82\xBA",		"\x83\x5A"=>"\xE3\x82\xBB",		"\x83\x5B"=>"\xE3\x82\xBC",		"\x83\x5C"=>"\xE3\x82\xBD",		"\x83\x5D"=>"\xE3\x82\xBE",		"\x83\x5E"=>"\xE3\x82\xBF",		"\x83\x5F"=>"\xE3\x83\x80",		"\x83\x60"=>"\xE3\x83\x81",		"\x83\x61"=>"\xE3\x83\x82",		"\x83\x62"=>"\xE3\x83\x83",		"\x83\x63"=>"\xE3\x83\x84",		"\x83\x64"=>"\xE3\x83\x85",		"\x83\x65"=>"\xE3\x83\x86",		"\x83\x66"=>"\xE3\x83\x87",		"\x83\x67"=>"\xE3\x83\x88",		"\x83\x68"=>"\xE3\x83\x89",		"\x83\x69"=>"\xE3\x83\x8A",		"\x83\x6A"=>"\xE3\x83\x8B",		"\x83\x6B"=>"\xE3\x83\x8C",		"\x83\x6C"=>"\xE3\x83\x8D",		"\x83\x6D"=>"\xE3\x83\x8E",		"\x83\x6E"=>"\xE3\x83\x8F",		"\x83\x6F"=>"\xE3\x83\x90",		"\x83\x70"=>"\xE3\x83\x91",		"\x83\x71"=>"\xE3\x83\x92",		"\x83\x72"=>"\xE3\x83\x93",		"\x83\x73"=>"\xE3\x83\x94",		"\x83\x74"=>"\xE3\x83\x95",		"\x83\x75"=>"\xE3\x83\x96",		"\x83\x76"=>"\xE3\x83\x97",		"\x83\x77"=>"\xE3\x83\x98",		"\x83\x78"=>"\xE3\x83\x99",		"\x83\x79"=>"\xE3\x83\x9A",		"\x83\x7A"=>"\xE3\x83\x9B",		"\x83\x7B"=>"\xE3\x83\x9C",		"\x83\x7C"=>"\xE3\x83\x9D",		"\x83\x7D"=>"\xE3\x83\x9E",		"\x83\x7E"=>"\xE3\x83\x9F",		"\x83\x80"=>"\xE3\x83\xA0",		"\x83\x81"=>"\xE3\x83\xA1",		"\x83\x82"=>"\xE3\x83\xA2",		"\x83\x83"=>"\xE3\x83\xA3",		"\x83\x84"=>"\xE3\x83\xA4",		"\x83\x85"=>"\xE3\x83\xA5",		"\x83\x86"=>"\xE3\x83\xA6",		"\x83\x87"=>"\xE3\x83\xA7",		"\x83\x88"=>"\xE3\x83\xA8",		"\x83\x89"=>"\xE3\x83\xA9",		"\x83\x8A"=>"\xE3\x83\xAA",		"\x83\x8B"=>"\xE3\x83\xAB",		"\x83\x8C"=>"\xE3\x83\xAC",		"\x83\x8D"=>"\xE3\x83\xAD",		"\x83\x8E"=>"\xE3\x83\xAE",		"\x83\x8F"=>"\xE3\x83\xAF",		"\x83\x90"=>"\xE3\x83\xB0",		"\x83\x91"=>"\xE3\x83\xB1",		"\x83\x92"=>"\xE3\x83\xB2",		"\x83\x93"=>"\xE3\x83\xB3",		"\x83\x94"=>"\xE3\x83\xB4",		"\x83\x95"=>"\xE3\x83\xB5",		"\x83\x96"=>"\xE3\x83\xB6",		"\x83\x9F"=>"\xCE\x91",		"\x83\xA0"=>"\xCE\x92",		"\x83\xA1"=>"\xCE\x93",		"\x83\xA2"=>"\xCE\x94",		"\x83\xA3"=>"\xCE\x95",		"\x83\xA4"=>"\xCE\x96",		"\x83\xA5"=>"\xCE\x97",		"\x83\xA6"=>"\xCE\x98",		"\x83\xA7"=>"\xCE\x99",		"\x83\xA8"=>"\xCE\x9A",		"\x83\xA9"=>"\xCE\x9B",		"\x83\xAA"=>"\xCE\x9C",		"\x83\xAB"=>"\xCE\x9D",		"\x83\xAC"=>"\xCE\x9E",		"\x83\xAD"=>"\xCE\x9F",		"\x83\xAE"=>"\xCE\xA0",		"\x83\xAF"=>"\xCE\xA1",		"\x83\xB0"=>"\xCE\xA3",		"\x83\xB1"=>"\xCE\xA4",		"\x83\xB2"=>"\xCE\xA5",		"\x83\xB3"=>"\xCE\xA6",		"\x83\xB4"=>"\xCE\xA7",		"\x83\xB5"=>"\xCE\xA8",		"\x83\xB6"=>"\xCE\xA9",		"\x83\xBF"=>"\xCE\xB1",		"\x83\xC0"=>"\xCE\xB2",		"\x83\xC1"=>"\xCE\xB3",		"\x83\xC2"=>"\xCE\xB4",		"\x83\xC3"=>"\xCE\xB5",		"\x83\xC4"=>"\xCE\xB6",		"\x83\xC5"=>"\xCE\xB7",		"\x83\xC6"=>"\xCE\xB8",		"\x83\xC7"=>"\xCE\xB9",		"\x83\xC8"=>"\xCE\xBA",		"\x83\xC9"=>"\xCE\xBB",		"\x83\xCA"=>"\xCE\xBC",		"\x83\xCB"=>"\xCE\xBD",		"\x83\xCC"=>"\xCE\xBE",		"\x83\xCD"=>"\xCE\xBF",		"\x83\xCE"=>"\xCF\x80",		"\x83\xCF"=>"\xCF\x81",		"\x83\xD0"=>"\xCF\x83",		"\x83\xD1"=>"\xCF\x84",		"\x83\xD2"=>"\xCF\x85",		"\x83\xD3"=>"\xCF\x86",		"\x83\xD4"=>"\xCF\x87",		"\x83\xD5"=>"\xCF\x88",		"\x83\xD6"=>"\xCF\x89",		"\x84\x40"=>"\xD0\x90",		"\x84\x41"=>"\xD0\x91",		"\x84\x42"=>"\xD0\x92",		"\x84\x43"=>"\xD0\x93",		"\x84\x44"=>"\xD0\x94",		"\x84\x45"=>"\xD0\x95",		"\x84\x46"=>"\xD0\x81",		"\x84\x47"=>"\xD0\x96",		"\x84\x48"=>"\xD0\x97",		"\x84\x49"=>"\xD0\x98",		"\x84\x4A"=>"\xD0\x99",		"\x84\x4B"=>"\xD0\x9A",		"\x84\x4C"=>"\xD0\x9B",		"\x84\x4D"=>"\xD0\x9C",		"\x84\x4E"=>"\xD0\x9D",		"\x84\x4F"=>"\xD0\x9E",		"\x84\x50"=>"\xD0\x9F",		"\x84\x51"=>"\xD0\xA0",		"\x84\x52"=>"\xD0\xA1",		"\x84\x53"=>"\xD0\xA2",		"\x84\x54"=>"\xD0\xA3",		"\x84\x55"=>"\xD0\xA4",		"\x84\x56"=>"\xD0\xA5",		"\x84\x57"=>"\xD0\xA6",		"\x84\x58"=>"\xD0\xA7",		"\x84\x59"=>"\xD0\xA8",		"\x84\x5A"=>"\xD0\xA9",		"\x84\x5B"=>"\xD0\xAA",		"\x84\x5C"=>"\xD0\xAB",		"\x84\x5D"=>"\xD0\xAC",		"\x84\x5E"=>"\xD0\xAD",		"\x84\x5F"=>"\xD0\xAE",		"\x84\x60"=>"\xD0\xAF",		"\x84\x70"=>"\xD0\xB0",		"\x84\x71"=>"\xD0\xB1",		"\x84\x72"=>"\xD0\xB2",		"\x84\x73"=>"\xD0\xB3",		"\x84\x74"=>"\xD0\xB4",		"\x84\x75"=>"\xD0\xB5",		"\x84\x76"=>"\xD1\x91",		"\x84\x77"=>"\xD0\xB6",		"\x84\x78"=>"\xD0\xB7",		"\x84\x79"=>"\xD0\xB8",		"\x84\x7A"=>"\xD0\xB9",		"\x84\x7B"=>"\xD0\xBA",		"\x84\x7C"=>"\xD0\xBB",		"\x84\x7D"=>"\xD0\xBC",		"\x84\x7E"=>"\xD0\xBD",		"\x84\x80"=>"\xD0\xBE",		"\x84\x81"=>"\xD0\xBF",		"\x84\x82"=>"\xD1\x80",		"\x84\x83"=>"\xD1\x81",		"\x84\x84"=>"\xD1\x82",		"\x84\x85"=>"\xD1\x83",		"\x84\x86"=>"\xD1\x84",		"\x84\x87"=>"\xD1\x85",		"\x84\x88"=>"\xD1\x86",		"\x84\x89"=>"\xD1\x87",		"\x84\x8A"=>"\xD1\x88",		"\x84\x8B"=>"\xD1\x89",		"\x84\x8C"=>"\xD1\x8A",		"\x84\x8D"=>"\xD1\x8B",		"\x84\x8E"=>"\xD1\x8C",		"\x84\x8F"=>"\xD1\x8D",		"\x84\x90"=>"\xD1\x8E",		"\x84\x91"=>"\xD1\x8F",		"\x84\x9F"=>"\xE2\x94\x80",		"\x84\xA0"=>"\xE2\x94\x82",		"\x84\xA1"=>"\xE2\x94\x8C",		"\x84\xA2"=>"\xE2\x94\x90",		"\x84\xA3"=>"\xE2\x94\x98",		"\x84\xA4"=>"\xE2\x94\x94",		"\x84\xA5"=>"\xE2\x94\x9C",		"\x84\xA6"=>"\xE2\x94\xAC",		"\x84\xA7"=>"\xE2\x94\xA4",		"\x84\xA8"=>"\xE2\x94\xB4",		"\x84\xA9"=>"\xE2\x94\xBC",		"\x84\xAA"=>"\xE2\x94\x81",		"\x84\xAB"=>"\xE2\x94\x83",		"\x84\xAC"=>"\xE2\x94\x8F",		"\x84\xAD"=>"\xE2\x94\x93",		"\x84\xAE"=>"\xE2\x94\x9B",		"\x84\xAF"=>"\xE2\x94\x97",		"\x84\xB0"=>"\xE2\x94\xA3",		"\x84\xB1"=>"\xE2\x94\xB3",		"\x84\xB2"=>"\xE2\x94\xAB",		"\x84\xB3"=>"\xE2\x94\xBB",		"\x84\xB4"=>"\xE2\x95\x8B",		"\x84\xB5"=>"\xE2\x94\xA0",		"\x84\xB6"=>"\xE2\x94\xAF",		"\x84\xB7"=>"\xE2\x94\xA8",		"\x84\xB8"=>"\xE2\x94\xB7",		"\x84\xB9"=>"\xE2\x94\xBF",		"\x84\xBA"=>"\xE2\x94\x9D",		"\x84\xBB"=>"\xE2\x94\xB0",		"\x84\xBC"=>"\xE2\x94\xA5",		"\x84\xBD"=>"\xE2\x94\xB8",		"\x84\xBE"=>"\xE2\x95\x82",		"\x88\x9F"=>"\xE4\xBA\x9C",		"\x88\xA0"=>"\xE5\x94\x96",		"\x88\xA1"=>"\xE5\xA8\x83",		"\x88\xA2"=>"\xE9\x98\xBF",		"\x88\xA3"=>"\xE5\x93\x80",		"\x88\xA4"=>"\xE6\x84\x9B",		"\x88\xA5"=>"\xE6\x8C\xA8",		"\x88\xA6"=>"\xE5\xA7\xB6",		"\x88\xA7"=>"\xE9\x80\xA2",		"\x88\xA8"=>"\xE8\x91\xB5",		"\x88\xA9"=>"\xE8\x8C\x9C",		"\x88\xAA"=>"\xE7\xA9\x90",		"\x88\xAB"=>"\xE6\x82\xAA",		"\x88\xAC"=>"\xE6\x8F\xA1",		"\x88\xAD"=>"\xE6\xB8\xA5",		"\x88\xAE"=>"\xE6\x97\xAD",		"\x88\xAF"=>"\xE8\x91\xA6",		"\x88\xB0"=>"\xE8\x8A\xA6",		"\x88\xB1"=>"\xE9\xAF\xB5",		"\x88\xB2"=>"\xE6\xA2\x93",		"\x88\xB3"=>"\xE5\x9C\xA7",		"\x88\xB4"=>"\xE6\x96\xA1",		"\x88\xB5"=>"\xE6\x89\xB1",		"\x88\xB6"=>"\xE5\xAE\x9B",		"\x88\xB7"=>"\xE5\xA7\x90",		"\x88\xB8"=>"\xE8\x99\xBB",		"\x88\xB9"=>"\xE9\xA3\xB4",		"\x88\xBA"=>"\xE7\xB5\xA2",		"\x88\xBB"=>"\xE7\xB6\xBE",		"\x88\xBC"=>"\xE9\xAE\x8E",		"\x88\xBD"=>"\xE6\x88\x96",		"\x88\xBE"=>"\xE7\xB2\x9F",		"\x88\xBF"=>"\xE8\xA2\xB7",		"\x88\xC0"=>"\xE5\xAE\x89",		"\x88\xC1"=>"\xE5\xBA\xB5",		"\x88\xC2"=>"\xE6\x8C\x89",		"\x88\xC3"=>"\xE6\x9A\x97",		"\x88\xC4"=>"\xE6\xA1\x88",		"\x88\xC5"=>"\xE9\x97\x87",		"\x88\xC6"=>"\xE9\x9E\x8D",		"\x88\xC7"=>"\xE6\x9D\x8F",		"\x88\xC8"=>"\xE4\xBB\xA5",		"\x88\xC9"=>"\xE4\xBC\x8A",		"\x88\xCA"=>"\xE4\xBD\x8D",		"\x88\xCB"=>"\xE4\xBE\x9D",		"\x88\xCC"=>"\xE5\x81\x89",		"\x88\xCD"=>"\xE5\x9B\xB2",		"\x88\xCE"=>"\xE5\xA4\xB7",		"\x88\xCF"=>"\xE5\xA7\x94",		"\x88\xD0"=>"\xE5\xA8\x81",		"\x88\xD1"=>"\xE5\xB0\x89",		"\x88\xD2"=>"\xE6\x83\x9F",		"\x88\xD3"=>"\xE6\x84\x8F",		"\x88\xD4"=>"\xE6\x85\xB0",		"\x88\xD5"=>"\xE6\x98\x93",		"\x88\xD6"=>"\xE6\xA4\x85",		"\x88\xD7"=>"\xE7\x82\xBA",		"\x88\xD8"=>"\xE7\x95\x8F",		"\x88\xD9"=>"\xE7\x95\xB0",		"\x88\xDA"=>"\xE7\xA7\xBB",		"\x88\xDB"=>"\xE7\xB6\xAD",		"\x88\xDC"=>"\xE7\xB7\xAF",		"\x88\xDD"=>"\xE8\x83\x83",		"\x88\xDE"=>"\xE8\x90\x8E",		"\x88\xDF"=>"\xE8\xA1\xA3",		"\x88\xE0"=>"\xE8\xAC\x82",		"\x88\xE1"=>"\xE9\x81\x95",		"\x88\xE2"=>"\xE9\x81\xBA",		"\x88\xE3"=>"\xE5\x8C\xBB",		"\x88\xE4"=>"\xE4\xBA\x95",		"\x88\xE5"=>"\xE4\xBA\xA5",		"\x88\xE6"=>"\xE5\x9F\x9F",		"\x88\xE7"=>"\xE8\x82\xB2",		"\x88\xE8"=>"\xE9\x83\x81",		"\x88\xE9"=>"\xE7\xA3\xAF",		"\x88\xEA"=>"\xE4\xB8\x80",		"\x88\xEB"=>"\xE5\xA3\xB1",		"\x88\xEC"=>"\xE6\xBA\xA2",		"\x88\xED"=>"\xE9\x80\xB8",		"\x88\xEE"=>"\xE7\xA8\xB2",		"\x88\xEF"=>"\xE8\x8C\xA8",		"\x88\xF0"=>"\xE8\x8A\x8B",		"\x88\xF1"=>"\xE9\xB0\xAF",		"\x88\xF2"=>"\xE5\x85\x81",		"\x88\xF3"=>"\xE5\x8D\xB0",		"\x88\xF4"=>"\xE5\x92\xBD",		"\x88\xF5"=>"\xE5\x93\xA1",		"\x88\xF6"=>"\xE5\x9B\xA0",		"\x88\xF7"=>"\xE5\xA7\xBB",		"\x88\xF8"=>"\xE5\xBC\x95",		"\x88\xF9"=>"\xE9\xA3\xB2",		"\x88\xFA"=>"\xE6\xB7\xAB",		"\x88\xFB"=>"\xE8\x83\xA4",		"\x88\xFC"=>"\xE8\x94\xAD",		"\x89\x40"=>"\xE9\x99\xA2",		"\x89\x41"=>"\xE9\x99\xB0",		"\x89\x42"=>"\xE9\x9A\xA0",		"\x89\x43"=>"\xE9\x9F\xBB",		"\x89\x44"=>"\xE5\x90\x8B",		"\x89\x45"=>"\xE5\x8F\xB3",		"\x89\x46"=>"\xE5\xAE\x87",		"\x89\x47"=>"\xE7\x83\x8F",		"\x89\x48"=>"\xE7\xBE\xBD",		"\x89\x49"=>"\xE8\xBF\x82",		"\x89\x4A"=>"\xE9\x9B\xA8",		"\x89\x4B"=>"\xE5\x8D\xAF",		"\x89\x4C"=>"\xE9\xB5\x9C",		"\x89\x4D"=>"\xE7\xAA\xBA",		"\x89\x4E"=>"\xE4\xB8\x91",		"\x89\x4F"=>"\xE7\xA2\x93",		"\x89\x50"=>"\xE8\x87\xBC",		"\x89\x51"=>"\xE6\xB8\xA6",		"\x89\x52"=>"\xE5\x98\x98",		"\x89\x53"=>"\xE5\x94\x84",		"\x89\x54"=>"\xE6\xAC\x9D",		"\x89\x55"=>"\xE8\x94\x9A",		"\x89\x56"=>"\xE9\xB0\xBB",		"\x89\x57"=>"\xE5\xA7\xA5",		"\x89\x58"=>"\xE5\x8E\xA9",		"\x89\x59"=>"\xE6\xB5\xA6",		"\x89\x5A"=>"\xE7\x93\x9C",		"\x89\x5B"=>"\xE9\x96\x8F",		"\x89\x5C"=>"\xE5\x99\x82",		"\x89\x5D"=>"\xE4\xBA\x91",		"\x89\x5E"=>"\xE9\x81\x8B",		"\x89\x5F"=>"\xE9\x9B\xB2",		"\x89\x60"=>"\xE8\x8D\x8F",		"\x89\x61"=>"\xE9\xA4\x8C",		"\x89\x62"=>"\xE5\x8F\xA1",		"\x89\x63"=>"\xE5\x96\xB6",		"\x89\x64"=>"\xE5\xAC\xB0",		"\x89\x65"=>"\xE5\xBD\xB1",		"\x89\x66"=>"\xE6\x98\xA0",		"\x89\x67"=>"\xE6\x9B\xB3",		"\x89\x68"=>"\xE6\xA0\x84",		"\x89\x69"=>"\xE6\xB0\xB8",		"\x89\x6A"=>"\xE6\xB3\xB3",		"\x89\x6B"=>"\xE6\xB4\xA9",		"\x89\x6C"=>"\xE7\x91\x9B",		"\x89\x6D"=>"\xE7\x9B\x88",		"\x89\x6E"=>"\xE7\xA9\x8E",		"\x89\x6F"=>"\xE9\xA0\xB4",		"\x89\x70"=>"\xE8\x8B\xB1",		"\x89\x71"=>"\xE8\xA1\x9B",		"\x89\x72"=>"\xE8\xA9\xA0",		"\x89\x73"=>"\xE9\x8B\xAD",		"\x89\x74"=>"\xE6\xB6\xB2",		"\x89\x75"=>"\xE7\x96\xAB",		"\x89\x76"=>"\xE7\x9B\x8A",		"\x89\x77"=>"\xE9\xA7\x85",		"\x89\x78"=>"\xE6\x82\xA6",		"\x89\x79"=>"\xE8\xAC\x81",		"\x89\x7A"=>"\xE8\xB6\x8A",		"\x89\x7B"=>"\xE9\x96\xB2",		"\x89\x7C"=>"\xE6\xA6\x8E",		"\x89\x7D"=>"\xE5\x8E\xAD",		"\x89\x7E"=>"\xE5\x86\x86",		"\x89\x80"=>"\xE5\x9C\x92",		"\x89\x81"=>"\xE5\xA0\xB0",		"\x89\x82"=>"\xE5\xA5\x84",		"\x89\x83"=>"\xE5\xAE\xB4",		"\x89\x84"=>"\xE5\xBB\xB6",		"\x89\x85"=>"\xE6\x80\xA8",		"\x89\x86"=>"\xE6\x8E\xA9",		"\x89\x87"=>"\xE6\x8F\xB4",		"\x89\x88"=>"\xE6\xB2\xBF",		"\x89\x89"=>"\xE6\xBC\x94",		"\x89\x8A"=>"\xE7\x82\x8E",		"\x89\x8B"=>"\xE7\x84\x94",		"\x89\x8C"=>"\xE7\x85\x99",		"\x89\x8D"=>"\xE7\x87\x95",		"\x89\x8E"=>"\xE7\x8C\xBF",		"\x89\x8F"=>"\xE7\xB8\x81",		"\x89\x90"=>"\xE8\x89\xB6",		"\x89\x91"=>"\xE8\x8B\x91",		"\x89\x92"=>"\xE8\x96\x97",		"\x89\x93"=>"\xE9\x81\xA0",		"\x89\x94"=>"\xE9\x89\x9B",		"\x89\x95"=>"\xE9\xB4\x9B",		"\x89\x96"=>"\xE5\xA1\xA9",		"\x89\x97"=>"\xE6\x96\xBC",		"\x89\x98"=>"\xE6\xB1\x9A",		"\x89\x99"=>"\xE7\x94\xA5",		"\x89\x9A"=>"\xE5\x87\xB9",		"\x89\x9B"=>"\xE5\xA4\xAE",		"\x89\x9C"=>"\xE5\xA5\xA5",		"\x89\x9D"=>"\xE5\xBE\x80",		"\x89\x9E"=>"\xE5\xBF\x9C",		"\x89\x9F"=>"\xE6\x8A\xBC",		"\x89\xA0"=>"\xE6\x97\xBA",		"\x89\xA1"=>"\xE6\xA8\xAA",		"\x89\xA2"=>"\xE6\xAC\xA7",		"\x89\xA3"=>"\xE6\xAE\xB4",		"\x89\xA4"=>"\xE7\x8E\x8B",		"\x89\xA5"=>"\xE7\xBF\x81",		"\x89\xA6"=>"\xE8\xA5\x96",		"\x89\xA7"=>"\xE9\xB4\xAC",		"\x89\xA8"=>"\xE9\xB4\x8E",		"\x89\xA9"=>"\xE9\xBB\x84",		"\x89\xAA"=>"\xE5\xB2\xA1",		"\x89\xAB"=>"\xE6\xB2\x96",		"\x89\xAC"=>"\xE8\x8D\xBB",		"\x89\xAD"=>"\xE5\x84\x84",		"\x89\xAE"=>"\xE5\xB1\x8B",		"\x89\xAF"=>"\xE6\x86\xB6",		"\x89\xB0"=>"\xE8\x87\x86",		"\x89\xB1"=>"\xE6\xA1\xB6",		"\x89\xB2"=>"\xE7\x89\xA1",		"\x89\xB3"=>"\xE4\xB9\x99",		"\x89\xB4"=>"\xE4\xBF\xBA",		"\x89\xB5"=>"\xE5\x8D\xB8",		"\x89\xB6"=>"\xE6\x81\xA9",		"\x89\xB7"=>"\xE6\xB8\xA9",		"\x89\xB8"=>"\xE7\xA9\x8F",		"\x89\xB9"=>"\xE9\x9F\xB3",		"\x89\xBA"=>"\xE4\xB8\x8B",		"\x89\xBB"=>"\xE5\x8C\x96",		"\x89\xBC"=>"\xE4\xBB\xAE",		"\x89\xBD"=>"\xE4\xBD\x95",		"\x89\xBE"=>"\xE4\xBC\xBD",		"\x89\xBF"=>"\xE4\xBE\xA1",		"\x89\xC0"=>"\xE4\xBD\xB3",		"\x89\xC1"=>"\xE5\x8A\xA0",		"\x89\xC2"=>"\xE5\x8F\xAF",		"\x89\xC3"=>"\xE5\x98\x89",		"\x89\xC4"=>"\xE5\xA4\x8F",		"\x89\xC5"=>"\xE5\xAB\x81",		"\x89\xC6"=>"\xE5\xAE\xB6",		"\x89\xC7"=>"\xE5\xAF\xA1",		"\x89\xC8"=>"\xE7\xA7\x91",		"\x89\xC9"=>"\xE6\x9A\x87",		"\x89\xCA"=>"\xE6\x9E\x9C",		"\x89\xCB"=>"\xE6\x9E\xB6",		"\x89\xCC"=>"\xE6\xAD\x8C",		"\x89\xCD"=>"\xE6\xB2\xB3",		"\x89\xCE"=>"\xE7\x81\xAB",		"\x89\xCF"=>"\xE7\x8F\x82",		"\x89\xD0"=>"\xE7\xA6\x8D",		"\x89\xD1"=>"\xE7\xA6\xBE",		"\x89\xD2"=>"\xE7\xA8\xBC",		"\x89\xD3"=>"\xE7\xAE\x87",		"\x89\xD4"=>"\xE8\x8A\xB1",		"\x89\xD5"=>"\xE8\x8B\x9B",		"\x89\xD6"=>"\xE8\x8C\x84",		"\x89\xD7"=>"\xE8\x8D\xB7",		"\x89\xD8"=>"\xE8\x8F\xAF",		"\x89\xD9"=>"\xE8\x8F\x93",		"\x89\xDA"=>"\xE8\x9D\xA6",		"\x89\xDB"=>"\xE8\xAA\xB2",		"\x89\xDC"=>"\xE5\x98\xA9",		"\x89\xDD"=>"\xE8\xB2\xA8",		"\x89\xDE"=>"\xE8\xBF\xA6",		"\x89\xDF"=>"\xE9\x81\x8E",		"\x89\xE0"=>"\xE9\x9C\x9E",		"\x89\xE1"=>"\xE8\x9A\x8A",		"\x89\xE2"=>"\xE4\xBF\x84",		"\x89\xE3"=>"\xE5\xB3\xA8",		"\x89\xE4"=>"\xE6\x88\x91",		"\x89\xE5"=>"\xE7\x89\x99",		"\x89\xE6"=>"\xE7\x94\xBB",		"\x89\xE7"=>"\xE8\x87\xA5",		"\x89\xE8"=>"\xE8\x8A\xBD",		"\x89\xE9"=>"\xE8\x9B\xBE",		"\x89\xEA"=>"\xE8\xB3\x80",		"\x89\xEB"=>"\xE9\x9B\x85",		"\x89\xEC"=>"\xE9\xA4\x93",		"\x89\xED"=>"\xE9\xA7\x95",		"\x89\xEE"=>"\xE4\xBB\x8B",		"\x89\xEF"=>"\xE4\xBC\x9A",		"\x89\xF0"=>"\xE8\xA7\xA3",		"\x89\xF1"=>"\xE5\x9B\x9E",		"\x89\xF2"=>"\xE5\xA1\x8A",		"\x89\xF3"=>"\xE5\xA3\x8A",		"\x89\xF4"=>"\xE5\xBB\xBB",		"\x89\xF5"=>"\xE5\xBF\xAB",		"\x89\xF6"=>"\xE6\x80\xAA",		"\x89\xF7"=>"\xE6\x82\x94",		"\x89\xF8"=>"\xE6\x81\xA2",		"\x89\xF9"=>"\xE6\x87\x90",		"\x89\xFA"=>"\xE6\x88\x92",		"\x89\xFB"=>"\xE6\x8B\x90",		"\x89\xFC"=>"\xE6\x94\xB9",		"\x8A\x40"=>"\xE9\xAD\x81",		"\x8A\x41"=>"\xE6\x99\xA6",		"\x8A\x42"=>"\xE6\xA2\xB0",		"\x8A\x43"=>"\xE6\xB5\xB7",		"\x8A\x44"=>"\xE7\x81\xB0",		"\x8A\x45"=>"\xE7\x95\x8C",		"\x8A\x46"=>"\xE7\x9A\x86",		"\x8A\x47"=>"\xE7\xB5\xB5",		"\x8A\x48"=>"\xE8\x8A\xA5",		"\x8A\x49"=>"\xE8\x9F\xB9",		"\x8A\x4A"=>"\xE9\x96\x8B",		"\x8A\x4B"=>"\xE9\x9A\x8E",		"\x8A\x4C"=>"\xE8\xB2\x9D",		"\x8A\x4D"=>"\xE5\x87\xB1",		"\x8A\x4E"=>"\xE5\x8A\xBE",		"\x8A\x4F"=>"\xE5\xA4\x96",		"\x8A\x50"=>"\xE5\x92\xB3",		"\x8A\x51"=>"\xE5\xAE\xB3",		"\x8A\x52"=>"\xE5\xB4\x96",		"\x8A\x53"=>"\xE6\x85\xA8",		"\x8A\x54"=>"\xE6\xA6\x82",		"\x8A\x55"=>"\xE6\xB6\xAF",		"\x8A\x56"=>"\xE7\xA2\x8D",		"\x8A\x57"=>"\xE8\x93\x8B",		"\x8A\x58"=>"\xE8\xA1\x97",		"\x8A\x59"=>"\xE8\xA9\xB2",		"\x8A\x5A"=>"\xE9\x8E\xA7",		"\x8A\x5B"=>"\xE9\xAA\xB8",		"\x8A\x5C"=>"\xE6\xB5\xAC",		"\x8A\x5D"=>"\xE9\xA6\xA8",		"\x8A\x5E"=>"\xE8\x9B\x99",		"\x8A\x5F"=>"\xE5\x9E\xA3",		"\x8A\x60"=>"\xE6\x9F\xBF",		"\x8A\x61"=>"\xE8\x9B\x8E",		"\x8A\x62"=>"\xE9\x88\x8E",		"\x8A\x63"=>"\xE5\x8A\x83",		"\x8A\x64"=>"\xE5\x9A\x87",		"\x8A\x65"=>"\xE5\x90\x84",		"\x8A\x66"=>"\xE5\xBB\x93",		"\x8A\x67"=>"\xE6\x8B\xA1",		"\x8A\x68"=>"\xE6\x92\xB9",		"\x8A\x69"=>"\xE6\xA0\xBC",		"\x8A\x6A"=>"\xE6\xA0\xB8",		"\x8A\x6B"=>"\xE6\xAE\xBB",		"\x8A\x6C"=>"\xE7\x8D\xB2",		"\x8A\x6D"=>"\xE7\xA2\xBA",		"\x8A\x6E"=>"\xE7\xA9\xAB",		"\x8A\x6F"=>"\xE8\xA6\x9A",		"\x8A\x70"=>"\xE8\xA7\x92",		"\x8A\x71"=>"\xE8\xB5\xAB",		"\x8A\x72"=>"\xE8\xBC\x83",		"\x8A\x73"=>"\xE9\x83\xAD",		"\x8A\x74"=>"\xE9\x96\xA3",		"\x8A\x75"=>"\xE9\x9A\x94",		"\x8A\x76"=>"\xE9\x9D\xA9",		"\x8A\x77"=>"\xE5\xAD\xA6",		"\x8A\x78"=>"\xE5\xB2\xB3",		"\x8A\x79"=>"\xE6\xA5\xBD",		"\x8A\x7A"=>"\xE9\xA1\x8D",		"\x8A\x7B"=>"\xE9\xA1\x8E",		"\x8A\x7C"=>"\xE6\x8E\x9B",		"\x8A\x7D"=>"\xE7\xAC\xA0",		"\x8A\x7E"=>"\xE6\xA8\xAB",		"\x8A\x80"=>"\xE6\xA9\xBF",		"\x8A\x81"=>"\xE6\xA2\xB6",		"\x8A\x82"=>"\xE9\xB0\x8D",		"\x8A\x83"=>"\xE6\xBD\x9F",		"\x8A\x84"=>"\xE5\x89\xB2",		"\x8A\x85"=>"\xE5\x96\x9D",		"\x8A\x86"=>"\xE6\x81\xB0",		"\x8A\x87"=>"\xE6\x8B\xAC",		"\x8A\x88"=>"\xE6\xB4\xBB",		"\x8A\x89"=>"\xE6\xB8\x87",		"\x8A\x8A"=>"\xE6\xBB\x91",		"\x8A\x8B"=>"\xE8\x91\x9B",		"\x8A\x8C"=>"\xE8\xA4\x90",		"\x8A\x8D"=>"\xE8\xBD\x84",		"\x8A\x8E"=>"\xE4\xB8\x94",		"\x8A\x8F"=>"\xE9\xB0\xB9",		"\x8A\x90"=>"\xE5\x8F\xB6",		"\x8A\x91"=>"\xE6\xA4\x9B",		"\x8A\x92"=>"\xE6\xA8\xBA",		"\x8A\x93"=>"\xE9\x9E\x84",		"\x8A\x94"=>"\xE6\xA0\xAA",		"\x8A\x95"=>"\xE5\x85\x9C",		"\x8A\x96"=>"\xE7\xAB\x83",		"\x8A\x97"=>"\xE8\x92\xB2",		"\x8A\x98"=>"\xE9\x87\x9C",		"\x8A\x99"=>"\xE9\x8E\x8C",		"\x8A\x9A"=>"\xE5\x99\x9B",		"\x8A\x9B"=>"\xE9\xB4\xA8",		"\x8A\x9C"=>"\xE6\xA0\xA2",		"\x8A\x9D"=>"\xE8\x8C\x85",		"\x8A\x9E"=>"\xE8\x90\xB1",		"\x8A\x9F"=>"\xE7\xB2\xA5",		"\x8A\xA0"=>"\xE5\x88\x88",		"\x8A\xA1"=>"\xE8\x8B\x85",		"\x8A\xA2"=>"\xE7\x93\xA6",		"\x8A\xA3"=>"\xE4\xB9\xBE",		"\x8A\xA4"=>"\xE4\xBE\x83",		"\x8A\xA5"=>"\xE5\x86\xA0",		"\x8A\xA6"=>"\xE5\xAF\x92",		"\x8A\xA7"=>"\xE5\x88\x8A",		"\x8A\xA8"=>"\xE5\x8B\x98",		"\x8A\xA9"=>"\xE5\x8B\xA7",		"\x8A\xAA"=>"\xE5\xB7\xBB",		"\x8A\xAB"=>"\xE5\x96\x9A",		"\x8A\xAC"=>"\xE5\xA0\xAA",		"\x8A\xAD"=>"\xE5\xA7\xA6",		"\x8A\xAE"=>"\xE5\xAE\x8C",		"\x8A\xAF"=>"\xE5\xAE\x98",		"\x8A\xB0"=>"\xE5\xAF\x9B",		"\x8A\xB1"=>"\xE5\xB9\xB2",		"\x8A\xB2"=>"\xE5\xB9\xB9",		"\x8A\xB3"=>"\xE6\x82\xA3",		"\x8A\xB4"=>"\xE6\x84\x9F",		"\x8A\xB5"=>"\xE6\x85\xA3",		"\x8A\xB6"=>"\xE6\x86\xBE",		"\x8A\xB7"=>"\xE6\x8F\x9B",		"\x8A\xB8"=>"\xE6\x95\xA2",		"\x8A\xB9"=>"\xE6\x9F\x91",		"\x8A\xBA"=>"\xE6\xA1\x93",		"\x8A\xBB"=>"\xE6\xA3\xBA",		"\x8A\xBC"=>"\xE6\xAC\xBE",		"\x8A\xBD"=>"\xE6\xAD\x93",		"\x8A\xBE"=>"\xE6\xB1\x97",		"\x8A\xBF"=>"\xE6\xBC\xA2",		"\x8A\xC0"=>"\xE6\xBE\x97",		"\x8A\xC1"=>"\xE6\xBD\x85",		"\x8A\xC2"=>"\xE7\x92\xB0",		"\x8A\xC3"=>"\xE7\x94\x98",		"\x8A\xC4"=>"\xE7\x9B\xA3",		"\x8A\xC5"=>"\xE7\x9C\x8B",		"\x8A\xC6"=>"\xE7\xAB\xBF",		"\x8A\xC7"=>"\xE7\xAE\xA1",		"\x8A\xC8"=>"\xE7\xB0\xA1",		"\x8A\xC9"=>"\xE7\xB7\xA9",		"\x8A\xCA"=>"\xE7\xBC\xB6",		"\x8A\xCB"=>"\xE7\xBF\xB0",		"\x8A\xCC"=>"\xE8\x82\x9D",		"\x8A\xCD"=>"\xE8\x89\xA6",		"\x8A\xCE"=>"\xE8\x8E\x9E",		"\x8A\xCF"=>"\xE8\xA6\xB3",		"\x8A\xD0"=>"\xE8\xAB\x8C",		"\x8A\xD1"=>"\xE8\xB2\xAB",		"\x8A\xD2"=>"\xE9\x82\x84",		"\x8A\xD3"=>"\xE9\x91\x91",		"\x8A\xD4"=>"\xE9\x96\x93",		"\x8A\xD5"=>"\xE9\x96\x91",		"\x8A\xD6"=>"\xE9\x96\xA2",		"\x8A\xD7"=>"\xE9\x99\xA5",		"\x8A\xD8"=>"\xE9\x9F\x93",		"\x8A\xD9"=>"\xE9\xA4\xA8",		"\x8A\xDA"=>"\xE8\x88\x98",		"\x8A\xDB"=>"\xE4\xB8\xB8",		"\x8A\xDC"=>"\xE5\x90\xAB",		"\x8A\xDD"=>"\xE5\xB2\xB8",		"\x8A\xDE"=>"\xE5\xB7\x8C",		"\x8A\xDF"=>"\xE7\x8E\xA9",		"\x8A\xE0"=>"\xE7\x99\x8C",		"\x8A\xE1"=>"\xE7\x9C\xBC",		"\x8A\xE2"=>"\xE5\xB2\xA9",		"\x8A\xE3"=>"\xE7\xBF\xAB",		"\x8A\xE4"=>"\xE8\xB4\x8B",		"\x8A\xE5"=>"\xE9\x9B\x81",		"\x8A\xE6"=>"\xE9\xA0\x91",		"\x8A\xE7"=>"\xE9\xA1\x94",		"\x8A\xE8"=>"\xE9\xA1\x98",		"\x8A\xE9"=>"\xE4\xBC\x81",		"\x8A\xEA"=>"\xE4\xBC\x8E",		"\x8A\xEB"=>"\xE5\x8D\xB1",		"\x8A\xEC"=>"\xE5\x96\x9C",		"\x8A\xED"=>"\xE5\x99\xA8",		"\x8A\xEE"=>"\xE5\x9F\xBA",		"\x8A\xEF"=>"\xE5\xA5\x87",		"\x8A\xF0"=>"\xE5\xAC\x89",		"\x8A\xF1"=>"\xE5\xAF\x84",		"\x8A\xF2"=>"\xE5\xB2\x90",		"\x8A\xF3"=>"\xE5\xB8\x8C",		"\x8A\xF4"=>"\xE5\xB9\xBE",		"\x8A\xF5"=>"\xE5\xBF\x8C",		"\x8A\xF6"=>"\xE6\x8F\xAE",		"\x8A\xF7"=>"\xE6\x9C\xBA",		"\x8A\xF8"=>"\xE6\x97\x97",		"\x8A\xF9"=>"\xE6\x97\xA2",		"\x8A\xFA"=>"\xE6\x9C\x9F",		"\x8A\xFB"=>"\xE6\xA3\x8B",		"\x8A\xFC"=>"\xE6\xA3\x84",		"\x8B\x40"=>"\xE6\xA9\x9F",		"\x8B\x41"=>"\xE5\xB8\xB0",		"\x8B\x42"=>"\xE6\xAF\x85",		"\x8B\x43"=>"\xE6\xB0\x97",		"\x8B\x44"=>"\xE6\xB1\xBD",		"\x8B\x45"=>"\xE7\x95\xBF",		"\x8B\x46"=>"\xE7\xA5\x88",		"\x8B\x47"=>"\xE5\xAD\xA3",		"\x8B\x48"=>"\xE7\xA8\x80",		"\x8B\x49"=>"\xE7\xB4\x80",		"\x8B\x4A"=>"\xE5\xBE\xBD",		"\x8B\x4B"=>"\xE8\xA6\x8F",		"\x8B\x4C"=>"\xE8\xA8\x98",		"\x8B\x4D"=>"\xE8\xB2\xB4",		"\x8B\x4E"=>"\xE8\xB5\xB7",		"\x8B\x4F"=>"\xE8\xBB\x8C",		"\x8B\x50"=>"\xE8\xBC\x9D",		"\x8B\x51"=>"\xE9\xA3\xA2",		"\x8B\x52"=>"\xE9\xA8\x8E",		"\x8B\x53"=>"\xE9\xAC\xBC",		"\x8B\x54"=>"\xE4\xBA\x80",		"\x8B\x55"=>"\xE5\x81\xBD",		"\x8B\x56"=>"\xE5\x84\x80",		"\x8B\x57"=>"\xE5\xA6\x93",		"\x8B\x58"=>"\xE5\xAE\x9C",		"\x8B\x59"=>"\xE6\x88\xAF",		"\x8B\x5A"=>"\xE6\x8A\x80",		"\x8B\x5B"=>"\xE6\x93\xAC",		"\x8B\x5C"=>"\xE6\xAC\xBA",		"\x8B\x5D"=>"\xE7\x8A\xA0",		"\x8B\x5E"=>"\xE7\x96\x91",		"\x8B\x5F"=>"\xE7\xA5\x87",		"\x8B\x60"=>"\xE7\xBE\xA9",		"\x8B\x61"=>"\xE8\x9F\xBB",		"\x8B\x62"=>"\xE8\xAA\xBC",		"\x8B\x63"=>"\xE8\xAD\xB0",		"\x8B\x64"=>"\xE6\x8E\xAC",		"\x8B\x65"=>"\xE8\x8F\x8A",		"\x8B\x66"=>"\xE9\x9E\xA0",		"\x8B\x67"=>"\xE5\x90\x89",		"\x8B\x68"=>"\xE5\x90\x83",		"\x8B\x69"=>"\xE5\x96\xAB",		"\x8B\x6A"=>"\xE6\xA1\x94",		"\x8B\x6B"=>"\xE6\xA9\x98",		"\x8B\x6C"=>"\xE8\xA9\xB0",		"\x8B\x6D"=>"\xE7\xA0\xA7",		"\x8B\x6E"=>"\xE6\x9D\xB5",		"\x8B\x6F"=>"\xE9\xBB\x8D",		"\x8B\x70"=>"\xE5\x8D\xB4",		"\x8B\x71"=>"\xE5\xAE\xA2",		"\x8B\x72"=>"\xE8\x84\x9A",		"\x8B\x73"=>"\xE8\x99\x90",		"\x8B\x74"=>"\xE9\x80\x86",		"\x8B\x75"=>"\xE4\xB8\x98",		"\x8B\x76"=>"\xE4\xB9\x85",		"\x8B\x77"=>"\xE4\xBB\x87",		"\x8B\x78"=>"\xE4\xBC\x91",		"\x8B\x79"=>"\xE5\x8F\x8A",		"\x8B\x7A"=>"\xE5\x90\xB8",		"\x8B\x7B"=>"\xE5\xAE\xAE",		"\x8B\x7C"=>"\xE5\xBC\x93",		"\x8B\x7D"=>"\xE6\x80\xA5",		"\x8B\x7E"=>"\xE6\x95\x91",		"\x8B\x80"=>"\xE6\x9C\xBD",		"\x8B\x81"=>"\xE6\xB1\x82",		"\x8B\x82"=>"\xE6\xB1\xB2",		"\x8B\x83"=>"\xE6\xB3\xA3",		"\x8B\x84"=>"\xE7\x81\xB8",		"\x8B\x85"=>"\xE7\x90\x83",		"\x8B\x86"=>"\xE7\xA9\xB6",		"\x8B\x87"=>"\xE7\xAA\xAE",		"\x8B\x88"=>"\xE7\xAC\x88",		"\x8B\x89"=>"\xE7\xB4\x9A",		"\x8B\x8A"=>"\xE7\xB3\xBE",		"\x8B\x8B"=>"\xE7\xB5\xA6",		"\x8B\x8C"=>"\xE6\x97\xA7",		"\x8B\x8D"=>"\xE7\x89\x9B",		"\x8B\x8E"=>"\xE5\x8E\xBB",		"\x8B\x8F"=>"\xE5\xB1\x85",		"\x8B\x90"=>"\xE5\xB7\xA8",		"\x8B\x91"=>"\xE6\x8B\x92",		"\x8B\x92"=>"\xE6\x8B\xA0",		"\x8B\x93"=>"\xE6\x8C\x99",		"\x8B\x94"=>"\xE6\xB8\xA0",		"\x8B\x95"=>"\xE8\x99\x9A",		"\x8B\x96"=>"\xE8\xA8\xB1",		"\x8B\x97"=>"\xE8\xB7\x9D",		"\x8B\x98"=>"\xE9\x8B\xB8",		"\x8B\x99"=>"\xE6\xBC\x81",		"\x8B\x9A"=>"\xE7\xA6\xA6",		"\x8B\x9B"=>"\xE9\xAD\x9A",		"\x8B\x9C"=>"\xE4\xBA\xA8",		"\x8B\x9D"=>"\xE4\xBA\xAB",		"\x8B\x9E"=>"\xE4\xBA\xAC",		"\x8B\x9F"=>"\xE4\xBE\x9B",		"\x8B\xA0"=>"\xE4\xBE\xA0",		"\x8B\xA1"=>"\xE5\x83\x91",		"\x8B\xA2"=>"\xE5\x85\x87",		"\x8B\xA3"=>"\xE7\xAB\xB6",		"\x8B\xA4"=>"\xE5\x85\xB1",		"\x8B\xA5"=>"\xE5\x87\xB6",		"\x8B\xA6"=>"\xE5\x8D\x94",		"\x8B\xA7"=>"\xE5\x8C\xA1",		"\x8B\xA8"=>"\xE5\x8D\xBF",		"\x8B\xA9"=>"\xE5\x8F\xAB",		"\x8B\xAA"=>"\xE5\x96\xAC",		"\x8B\xAB"=>"\xE5\xA2\x83",		"\x8B\xAC"=>"\xE5\xB3\xA1",		"\x8B\xAD"=>"\xE5\xBC\xB7",		"\x8B\xAE"=>"\xE5\xBD\x8A",		"\x8B\xAF"=>"\xE6\x80\xAF",		"\x8B\xB0"=>"\xE6\x81\x90",		"\x8B\xB1"=>"\xE6\x81\xAD",		"\x8B\xB2"=>"\xE6\x8C\x9F",		"\x8B\xB3"=>"\xE6\x95\x99",		"\x8B\xB4"=>"\xE6\xA9\x8B",		"\x8B\xB5"=>"\xE6\xB3\x81",		"\x8B\xB6"=>"\xE7\x8B\x82",		"\x8B\xB7"=>"\xE7\x8B\xAD",		"\x8B\xB8"=>"\xE7\x9F\xAF",		"\x8B\xB9"=>"\xE8\x83\xB8",		"\x8B\xBA"=>"\xE8\x84\x85",		"\x8B\xBB"=>"\xE8\x88\x88",		"\x8B\xBC"=>"\xE8\x95\x8E",		"\x8B\xBD"=>"\xE9\x83\xB7",		"\x8B\xBE"=>"\xE9\x8F\xA1",		"\x8B\xBF"=>"\xE9\x9F\xBF",		"\x8B\xC0"=>"\xE9\xA5\x97",		"\x8B\xC1"=>"\xE9\xA9\x9A",		"\x8B\xC2"=>"\xE4\xBB\xB0",		"\x8B\xC3"=>"\xE5\x87\x9D",		"\x8B\xC4"=>"\xE5\xB0\xAD",		"\x8B\xC5"=>"\xE6\x9A\x81",		"\x8B\xC6"=>"\xE6\xA5\xAD",		"\x8B\xC7"=>"\xE5\xB1\x80",		"\x8B\xC8"=>"\xE6\x9B\xB2",		"\x8B\xC9"=>"\xE6\xA5\xB5",		"\x8B\xCA"=>"\xE7\x8E\x89",		"\x8B\xCB"=>"\xE6\xA1\x90",		"\x8B\xCC"=>"\xE7\xB2\x81",		"\x8B\xCD"=>"\xE5\x83\x85",		"\x8B\xCE"=>"\xE5\x8B\xA4",		"\x8B\xCF"=>"\xE5\x9D\x87",		"\x8B\xD0"=>"\xE5\xB7\xBE",		"\x8B\xD1"=>"\xE9\x8C\xA6",		"\x8B\xD2"=>"\xE6\x96\xA4",		"\x8B\xD3"=>"\xE6\xAC\xA3",		"\x8B\xD4"=>"\xE6\xAC\xBD",		"\x8B\xD5"=>"\xE7\x90\xB4",		"\x8B\xD6"=>"\xE7\xA6\x81",		"\x8B\xD7"=>"\xE7\xA6\xBD",		"\x8B\xD8"=>"\xE7\xAD\x8B",		"\x8B\xD9"=>"\xE7\xB7\x8A",		"\x8B\xDA"=>"\xE8\x8A\xB9",		"\x8B\xDB"=>"\xE8\x8F\x8C",		"\x8B\xDC"=>"\xE8\xA1\xBF",		"\x8B\xDD"=>"\xE8\xA5\x9F",		"\x8B\xDE"=>"\xE8\xAC\xB9",		"\x8B\xDF"=>"\xE8\xBF\x91",		"\x8B\xE0"=>"\xE9\x87\x91",		"\x8B\xE1"=>"\xE5\x90\x9F",		"\x8B\xE2"=>"\xE9\x8A\x80",		"\x8B\xE3"=>"\xE4\xB9\x9D",		"\x8B\xE4"=>"\xE5\x80\xB6",		"\x8B\xE5"=>"\xE5\x8F\xA5",		"\x8B\xE6"=>"\xE5\x8C\xBA",		"\x8B\xE7"=>"\xE7\x8B\x97",		"\x8B\xE8"=>"\xE7\x8E\x96",		"\x8B\xE9"=>"\xE7\x9F\xA9",		"\x8B\xEA"=>"\xE8\x8B\xA6",		"\x8B\xEB"=>"\xE8\xBA\xAF",		"\x8B\xEC"=>"\xE9\xA7\x86",		"\x8B\xED"=>"\xE9\xA7\x88",		"\x8B\xEE"=>"\xE9\xA7\x92",		"\x8B\xEF"=>"\xE5\x85\xB7",		"\x8B\xF0"=>"\xE6\x84\x9A",		"\x8B\xF1"=>"\xE8\x99\x9E",		"\x8B\xF2"=>"\xE5\x96\xB0",		"\x8B\xF3"=>"\xE7\xA9\xBA",		"\x8B\xF4"=>"\xE5\x81\xB6",		"\x8B\xF5"=>"\xE5\xAF\x93",		"\x8B\xF6"=>"\xE9\x81\x87",		"\x8B\xF7"=>"\xE9\x9A\x85",		"\x8B\xF8"=>"\xE4\xB8\xB2",		"\x8B\xF9"=>"\xE6\xAB\x9B",		"\x8B\xFA"=>"\xE9\x87\xA7",		"\x8B\xFB"=>"\xE5\xB1\x91",		"\x8B\xFC"=>"\xE5\xB1\x88",		"\x8C\x40"=>"\xE6\x8E\x98",		"\x8C\x41"=>"\xE7\xAA\x9F",		"\x8C\x42"=>"\xE6\xB2\x93",		"\x8C\x43"=>"\xE9\x9D\xB4",		"\x8C\x44"=>"\xE8\xBD\xA1",		"\x8C\x45"=>"\xE7\xAA\xAA",		"\x8C\x46"=>"\xE7\x86\x8A",		"\x8C\x47"=>"\xE9\x9A\x88",		"\x8C\x48"=>"\xE7\xB2\x82",		"\x8C\x49"=>"\xE6\xA0\x97",		"\x8C\x4A"=>"\xE7\xB9\xB0",		"\x8C\x4B"=>"\xE6\xA1\x91",		"\x8C\x4C"=>"\xE9\x8D\xAC",		"\x8C\x4D"=>"\xE5\x8B\xB2",		"\x8C\x4E"=>"\xE5\x90\x9B",		"\x8C\x4F"=>"\xE8\x96\xAB",		"\x8C\x50"=>"\xE8\xA8\x93",		"\x8C\x51"=>"\xE7\xBE\xA4",		"\x8C\x52"=>"\xE8\xBB\x8D",		"\x8C\x53"=>"\xE9\x83\xA1",		"\x8C\x54"=>"\xE5\x8D\xA6",		"\x8C\x55"=>"\xE8\xA2\x88",		"\x8C\x56"=>"\xE7\xA5\x81",		"\x8C\x57"=>"\xE4\xBF\x82",		"\x8C\x58"=>"\xE5\x82\xBE",		"\x8C\x59"=>"\xE5\x88\x91",		"\x8C\x5A"=>"\xE5\x85\x84",		"\x8C\x5B"=>"\xE5\x95\x93",		"\x8C\x5C"=>"\xE5\x9C\xAD",		"\x8C\x5D"=>"\xE7\x8F\xAA",		"\x8C\x5E"=>"\xE5\x9E\x8B",		"\x8C\x5F"=>"\xE5\xA5\x91",		"\x8C\x60"=>"\xE5\xBD\xA2",		"\x8C\x61"=>"\xE5\xBE\x84",		"\x8C\x62"=>"\xE6\x81\xB5",		"\x8C\x63"=>"\xE6\x85\xB6",		"\x8C\x64"=>"\xE6\x85\xA7",		"\x8C\x65"=>"\xE6\x86\xA9",		"\x8C\x66"=>"\xE6\x8E\xB2",		"\x8C\x67"=>"\xE6\x90\xBA",		"\x8C\x68"=>"\xE6\x95\xAC",		"\x8C\x69"=>"\xE6\x99\xAF",		"\x8C\x6A"=>"\xE6\xA1\x82",		"\x8C\x6B"=>"\xE6\xB8\x93",		"\x8C\x6C"=>"\xE7\x95\xA6",		"\x8C\x6D"=>"\xE7\xA8\xBD",		"\x8C\x6E"=>"\xE7\xB3\xBB",		"\x8C\x6F"=>"\xE7\xB5\x8C",		"\x8C\x70"=>"\xE7\xB6\x99",		"\x8C\x71"=>"\xE7\xB9\x8B",		"\x8C\x72"=>"\xE7\xBD\xAB",		"\x8C\x73"=>"\xE8\x8C\x8E",		"\x8C\x74"=>"\xE8\x8D\x8A",		"\x8C\x75"=>"\xE8\x9B\x8D",		"\x8C\x76"=>"\xE8\xA8\x88",		"\x8C\x77"=>"\xE8\xA9\xA3",		"\x8C\x78"=>"\xE8\xAD\xA6",		"\x8C\x79"=>"\xE8\xBB\xBD",		"\x8C\x7A"=>"\xE9\xA0\x9A",		"\x8C\x7B"=>"\xE9\xB6\x8F",		"\x8C\x7C"=>"\xE8\x8A\xB8",		"\x8C\x7D"=>"\xE8\xBF\x8E",		"\x8C\x7E"=>"\xE9\xAF\xA8",		"\x8C\x80"=>"\xE5\x8A\x87",		"\x8C\x81"=>"\xE6\x88\x9F",		"\x8C\x82"=>"\xE6\x92\x83",		"\x8C\x83"=>"\xE6\xBF\x80",		"\x8C\x84"=>"\xE9\x9A\x99",		"\x8C\x85"=>"\xE6\xA1\x81",		"\x8C\x86"=>"\xE5\x82\x91",		"\x8C\x87"=>"\xE6\xAC\xA0",		"\x8C\x88"=>"\xE6\xB1\xBA",		"\x8C\x89"=>"\xE6\xBD\x94",		"\x8C\x8A"=>"\xE7\xA9\xB4",		"\x8C\x8B"=>"\xE7\xB5\x90",		"\x8C\x8C"=>"\xE8\xA1\x80",		"\x8C\x8D"=>"\xE8\xA8\xA3",		"\x8C\x8E"=>"\xE6\x9C\x88",		"\x8C\x8F"=>"\xE4\xBB\xB6",		"\x8C\x90"=>"\xE5\x80\xB9",		"\x8C\x91"=>"\xE5\x80\xA6",		"\x8C\x92"=>"\xE5\x81\xA5",		"\x8C\x93"=>"\xE5\x85\xBC",		"\x8C\x94"=>"\xE5\x88\xB8",		"\x8C\x95"=>"\xE5\x89\xA3",		"\x8C\x96"=>"\xE5\x96\xA7",		"\x8C\x97"=>"\xE5\x9C\x8F",		"\x8C\x98"=>"\xE5\xA0\x85",		"\x8C\x99"=>"\xE5\xAB\x8C",		"\x8C\x9A"=>"\xE5\xBB\xBA",		"\x8C\x9B"=>"\xE6\x86\xB2",		"\x8C\x9C"=>"\xE6\x87\xB8",		"\x8C\x9D"=>"\xE6\x8B\xB3",		"\x8C\x9E"=>"\xE6\x8D\xB2",		"\x8C\x9F"=>"\xE6\xA4\x9C",		"\x8C\xA0"=>"\xE6\xA8\xA9",		"\x8C\xA1"=>"\xE7\x89\xBD",		"\x8C\xA2"=>"\xE7\x8A\xAC",		"\x8C\xA3"=>"\xE7\x8C\xAE",		"\x8C\xA4"=>"\xE7\xA0\x94",		"\x8C\xA5"=>"\xE7\xA1\xAF",		"\x8C\xA6"=>"\xE7\xB5\xB9",		"\x8C\xA7"=>"\xE7\x9C\x8C",		"\x8C\xA8"=>"\xE8\x82\xA9",		"\x8C\xA9"=>"\xE8\xA6\x8B",		"\x8C\xAA"=>"\xE8\xAC\x99",		"\x8C\xAB"=>"\xE8\xB3\xA2",		"\x8C\xAC"=>"\xE8\xBB\x92",		"\x8C\xAD"=>"\xE9\x81\xA3",		"\x8C\xAE"=>"\xE9\x8D\xB5",		"\x8C\xAF"=>"\xE9\x99\xBA",		"\x8C\xB0"=>"\xE9\xA1\x95",		"\x8C\xB1"=>"\xE9\xA8\x93",		"\x8C\xB2"=>"\xE9\xB9\xB8",		"\x8C\xB3"=>"\xE5\x85\x83",		"\x8C\xB4"=>"\xE5\x8E\x9F",		"\x8C\xB5"=>"\xE5\x8E\xB3",		"\x8C\xB6"=>"\xE5\xB9\xBB",		"\x8C\xB7"=>"\xE5\xBC\xA6",		"\x8C\xB8"=>"\xE6\xB8\x9B",		"\x8C\xB9"=>"\xE6\xBA\x90",		"\x8C\xBA"=>"\xE7\x8E\x84",		"\x8C\xBB"=>"\xE7\x8F\xBE",		"\x8C\xBC"=>"\xE7\xB5\x83",		"\x8C\xBD"=>"\xE8\x88\xB7",		"\x8C\xBE"=>"\xE8\xA8\x80",		"\x8C\xBF"=>"\xE8\xAB\xBA",		"\x8C\xC0"=>"\xE9\x99\x90",		"\x8C\xC1"=>"\xE4\xB9\x8E",		"\x8C\xC2"=>"\xE5\x80\x8B",		"\x8C\xC3"=>"\xE5\x8F\xA4",		"\x8C\xC4"=>"\xE5\x91\xBC",		"\x8C\xC5"=>"\xE5\x9B\xBA",		"\x8C\xC6"=>"\xE5\xA7\x91",		"\x8C\xC7"=>"\xE5\xAD\xA4",		"\x8C\xC8"=>"\xE5\xB7\xB1",		"\x8C\xC9"=>"\xE5\xBA\xAB",		"\x8C\xCA"=>"\xE5\xBC\xA7",		"\x8C\xCB"=>"\xE6\x88\xB8",		"\x8C\xCC"=>"\xE6\x95\x85",		"\x8C\xCD"=>"\xE6\x9E\xAF",		"\x8C\xCE"=>"\xE6\xB9\x96",		"\x8C\xCF"=>"\xE7\x8B\x90",		"\x8C\xD0"=>"\xE7\xB3\x8A",		"\x8C\xD1"=>"\xE8\xA2\xB4",		"\x8C\xD2"=>"\xE8\x82\xA1",		"\x8C\xD3"=>"\xE8\x83\xA1",		"\x8C\xD4"=>"\xE8\x8F\xB0",		"\x8C\xD5"=>"\xE8\x99\x8E",		"\x8C\xD6"=>"\xE8\xAA\x87",		"\x8C\xD7"=>"\xE8\xB7\xA8",		"\x8C\xD8"=>"\xE9\x88\xB7",		"\x8C\xD9"=>"\xE9\x9B\x87",		"\x8C\xDA"=>"\xE9\xA1\xA7",		"\x8C\xDB"=>"\xE9\xBC\x93",		"\x8C\xDC"=>"\xE4\xBA\x94",		"\x8C\xDD"=>"\xE4\xBA\x92",		"\x8C\xDE"=>"\xE4\xBC\x8D",		"\x8C\xDF"=>"\xE5\x8D\x88",		"\x8C\xE0"=>"\xE5\x91\x89",		"\x8C\xE1"=>"\xE5\x90\xBE",		"\x8C\xE2"=>"\xE5\xA8\xAF",		"\x8C\xE3"=>"\xE5\xBE\x8C",		"\x8C\xE4"=>"\xE5\xBE\xA1",		"\x8C\xE5"=>"\xE6\x82\x9F",		"\x8C\xE6"=>"\xE6\xA2\xA7",		"\x8C\xE7"=>"\xE6\xAA\x8E",		"\x8C\xE8"=>"\xE7\x91\x9A",		"\x8C\xE9"=>"\xE7\xA2\x81",		"\x8C\xEA"=>"\xE8\xAA\x9E",		"\x8C\xEB"=>"\xE8\xAA\xA4",		"\x8C\xEC"=>"\xE8\xAD\xB7",		"\x8C\xED"=>"\xE9\x86\x90",		"\x8C\xEE"=>"\xE4\xB9\x9E",		"\x8C\xEF"=>"\xE9\xAF\x89",		"\x8C\xF0"=>"\xE4\xBA\xA4",		"\x8C\xF1"=>"\xE4\xBD\xBC",		"\x8C\xF2"=>"\xE4\xBE\xAF",		"\x8C\xF3"=>"\xE5\x80\x99",		"\x8C\xF4"=>"\xE5\x80\x96",		"\x8C\xF5"=>"\xE5\x85\x89",		"\x8C\xF6"=>"\xE5\x85\xAC",		"\x8C\xF7"=>"\xE5\x8A\x9F",		"\x8C\xF8"=>"\xE5\x8A\xB9",		"\x8C\xF9"=>"\xE5\x8B\xBE",		"\x8C\xFA"=>"\xE5\x8E\x9A",		"\x8C\xFB"=>"\xE5\x8F\xA3",		"\x8C\xFC"=>"\xE5\x90\x91",		"\x8D\x40"=>"\xE5\x90\x8E",		"\x8D\x41"=>"\xE5\x96\x89",		"\x8D\x42"=>"\xE5\x9D\x91",		"\x8D\x43"=>"\xE5\x9E\xA2",		"\x8D\x44"=>"\xE5\xA5\xBD",		"\x8D\x45"=>"\xE5\xAD\x94",		"\x8D\x46"=>"\xE5\xAD\x9D",		"\x8D\x47"=>"\xE5\xAE\x8F",		"\x8D\x48"=>"\xE5\xB7\xA5",		"\x8D\x49"=>"\xE5\xB7\xA7",		"\x8D\x4A"=>"\xE5\xB7\xB7",		"\x8D\x4B"=>"\xE5\xB9\xB8",		"\x8D\x4C"=>"\xE5\xBA\x83",		"\x8D\x4D"=>"\xE5\xBA\x9A",		"\x8D\x4E"=>"\xE5\xBA\xB7",		"\x8D\x4F"=>"\xE5\xBC\x98",		"\x8D\x50"=>"\xE6\x81\x92",		"\x8D\x51"=>"\xE6\x85\x8C",		"\x8D\x52"=>"\xE6\x8A\x97",		"\x8D\x53"=>"\xE6\x8B\x98",		"\x8D\x54"=>"\xE6\x8E\xA7",		"\x8D\x55"=>"\xE6\x94\xBB",		"\x8D\x56"=>"\xE6\x98\x82",		"\x8D\x57"=>"\xE6\x99\x83",		"\x8D\x58"=>"\xE6\x9B\xB4",		"\x8D\x59"=>"\xE6\x9D\xAD",		"\x8D\x5A"=>"\xE6\xA0\xA1",		"\x8D\x5B"=>"\xE6\xA2\x97",		"\x8D\x5C"=>"\xE6\xA7\x8B",		"\x8D\x5D"=>"\xE6\xB1\x9F",		"\x8D\x5E"=>"\xE6\xB4\xAA",		"\x8D\x5F"=>"\xE6\xB5\xA9",		"\x8D\x60"=>"\xE6\xB8\xAF",		"\x8D\x61"=>"\xE6\xBA\x9D",		"\x8D\x62"=>"\xE7\x94\xB2",		"\x8D\x63"=>"\xE7\x9A\x87",		"\x8D\x64"=>"\xE7\xA1\xAC",		"\x8D\x65"=>"\xE7\xA8\xBF",		"\x8D\x66"=>"\xE7\xB3\xA0",		"\x8D\x67"=>"\xE7\xB4\x85",		"\x8D\x68"=>"\xE7\xB4\x98",		"\x8D\x69"=>"\xE7\xB5\x9E",		"\x8D\x6A"=>"\xE7\xB6\xB1",		"\x8D\x6B"=>"\xE8\x80\x95",		"\x8D\x6C"=>"\xE8\x80\x83",		"\x8D\x6D"=>"\xE8\x82\xAF",		"\x8D\x6E"=>"\xE8\x82\xB1",		"\x8D\x6F"=>"\xE8\x85\x94",		"\x8D\x70"=>"\xE8\x86\x8F",		"\x8D\x71"=>"\xE8\x88\xAA",		"\x8D\x72"=>"\xE8\x8D\x92",		"\x8D\x73"=>"\xE8\xA1\x8C",		"\x8D\x74"=>"\xE8\xA1\xA1",		"\x8D\x75"=>"\xE8\xAC\x9B",		"\x8D\x76"=>"\xE8\xB2\xA2",		"\x8D\x77"=>"\xE8\xB3\xBC",		"\x8D\x78"=>"\xE9\x83\x8A",		"\x8D\x79"=>"\xE9\x85\xB5",		"\x8D\x7A"=>"\xE9\x89\xB1",		"\x8D\x7B"=>"\xE7\xA0\xBF",		"\x8D\x7C"=>"\xE9\x8B\xBC",		"\x8D\x7D"=>"\xE9\x96\xA4",		"\x8D\x7E"=>"\xE9\x99\x8D",		"\x8D\x80"=>"\xE9\xA0\x85",		"\x8D\x81"=>"\xE9\xA6\x99",		"\x8D\x82"=>"\xE9\xAB\x98",		"\x8D\x83"=>"\xE9\xB4\xBB",		"\x8D\x84"=>"\xE5\x89\x9B",		"\x8D\x85"=>"\xE5\x8A\xAB",		"\x8D\x86"=>"\xE5\x8F\xB7",		"\x8D\x87"=>"\xE5\x90\x88",		"\x8D\x88"=>"\xE5\xA3\x95",		"\x8D\x89"=>"\xE6\x8B\xB7",		"\x8D\x8A"=>"\xE6\xBF\xA0",		"\x8D\x8B"=>"\xE8\xB1\xAA",		"\x8D\x8C"=>"\xE8\xBD\x9F",		"\x8D\x8D"=>"\xE9\xBA\xB9",		"\x8D\x8E"=>"\xE5\x85\x8B",		"\x8D\x8F"=>"\xE5\x88\xBB",		"\x8D\x90"=>"\xE5\x91\x8A",		"\x8D\x91"=>"\xE5\x9B\xBD",		"\x8D\x92"=>"\xE7\xA9\x80",		"\x8D\x93"=>"\xE9\x85\xB7",		"\x8D\x94"=>"\xE9\xB5\xA0",		"\x8D\x95"=>"\xE9\xBB\x92",		"\x8D\x96"=>"\xE7\x8D\x84",		"\x8D\x97"=>"\xE6\xBC\x89",		"\x8D\x98"=>"\xE8\x85\xB0",		"\x8D\x99"=>"\xE7\x94\x91",		"\x8D\x9A"=>"\xE5\xBF\xBD",		"\x8D\x9B"=>"\xE6\x83\x9A",		"\x8D\x9C"=>"\xE9\xAA\xA8",		"\x8D\x9D"=>"\xE7\x8B\x9B",		"\x8D\x9E"=>"\xE8\xBE\xBC",		"\x8D\x9F"=>"\xE6\xAD\xA4",		"\x8D\xA0"=>"\xE9\xA0\x83",		"\x8D\xA1"=>"\xE4\xBB\x8A",		"\x8D\xA2"=>"\xE5\x9B\xB0",		"\x8D\xA3"=>"\xE5\x9D\xA4",		"\x8D\xA4"=>"\xE5\xA2\xBE",		"\x8D\xA5"=>"\xE5\xA9\x9A",		"\x8D\xA6"=>"\xE6\x81\xA8",		"\x8D\xA7"=>"\xE6\x87\x87",		"\x8D\xA8"=>"\xE6\x98\x8F",		"\x8D\xA9"=>"\xE6\x98\x86",		"\x8D\xAA"=>"\xE6\xA0\xB9",		"\x8D\xAB"=>"\xE6\xA2\xB1",		"\x8D\xAC"=>"\xE6\xB7\xB7",		"\x8D\xAD"=>"\xE7\x97\x95",		"\x8D\xAE"=>"\xE7\xB4\xBA",		"\x8D\xAF"=>"\xE8\x89\xAE",		"\x8D\xB0"=>"\xE9\xAD\x82",		"\x8D\xB1"=>"\xE4\xBA\x9B",		"\x8D\xB2"=>"\xE4\xBD\x90",		"\x8D\xB3"=>"\xE5\x8F\x89",		"\x8D\xB4"=>"\xE5\x94\x86",		"\x8D\xB5"=>"\xE5\xB5\xAF",		"\x8D\xB6"=>"\xE5\xB7\xA6",		"\x8D\xB7"=>"\xE5\xB7\xAE",		"\x8D\xB8"=>"\xE6\x9F\xBB",		"\x8D\xB9"=>"\xE6\xB2\x99",		"\x8D\xBA"=>"\xE7\x91\xB3",		"\x8D\xBB"=>"\xE7\xA0\x82",		"\x8D\xBC"=>"\xE8\xA9\x90",		"\x8D\xBD"=>"\xE9\x8E\x96",		"\x8D\xBE"=>"\xE8\xA3\x9F",		"\x8D\xBF"=>"\xE5\x9D\x90",		"\x8D\xC0"=>"\xE5\xBA\xA7",		"\x8D\xC1"=>"\xE6\x8C\xAB",		"\x8D\xC2"=>"\xE5\x82\xB5",		"\x8D\xC3"=>"\xE5\x82\xAC",		"\x8D\xC4"=>"\xE5\x86\x8D",		"\x8D\xC5"=>"\xE6\x9C\x80",		"\x8D\xC6"=>"\xE5\x93\x89",		"\x8D\xC7"=>"\xE5\xA1\x9E",		"\x8D\xC8"=>"\xE5\xA6\xBB",		"\x8D\xC9"=>"\xE5\xAE\xB0",		"\x8D\xCA"=>"\xE5\xBD\xA9",		"\x8D\xCB"=>"\xE6\x89\x8D",		"\x8D\xCC"=>"\xE6\x8E\xA1",		"\x8D\xCD"=>"\xE6\xA0\xBD",		"\x8D\xCE"=>"\xE6\xAD\xB3",		"\x8D\xCF"=>"\xE6\xB8\x88",		"\x8D\xD0"=>"\xE7\x81\xBD",		"\x8D\xD1"=>"\xE9\x87\x87",		"\x8D\xD2"=>"\xE7\x8A\x80",		"\x8D\xD3"=>"\xE7\xA0\x95",		"\x8D\xD4"=>"\xE7\xA0\xA6",		"\x8D\xD5"=>"\xE7\xA5\xAD",		"\x8D\xD6"=>"\xE6\x96\x8E",		"\x8D\xD7"=>"\xE7\xB4\xB0",		"\x8D\xD8"=>"\xE8\x8F\x9C",		"\x8D\xD9"=>"\xE8\xA3\x81",		"\x8D\xDA"=>"\xE8\xBC\x89",		"\x8D\xDB"=>"\xE9\x9A\x9B",		"\x8D\xDC"=>"\xE5\x89\xA4",		"\x8D\xDD"=>"\xE5\x9C\xA8",		"\x8D\xDE"=>"\xE6\x9D\x90",		"\x8D\xDF"=>"\xE7\xBD\xAA",		"\x8D\xE0"=>"\xE8\xB2\xA1",		"\x8D\xE1"=>"\xE5\x86\xB4",		"\x8D\xE2"=>"\xE5\x9D\x82",		"\x8D\xE3"=>"\xE9\x98\xAA",		"\x8D\xE4"=>"\xE5\xA0\xBA",		"\x8D\xE5"=>"\xE6\xA6\x8A",		"\x8D\xE6"=>"\xE8\x82\xB4",		"\x8D\xE7"=>"\xE5\x92\xB2",		"\x8D\xE8"=>"\xE5\xB4\x8E",		"\x8D\xE9"=>"\xE5\x9F\xBC",		"\x8D\xEA"=>"\xE7\xA2\x95",		"\x8D\xEB"=>"\xE9\xB7\xBA",		"\x8D\xEC"=>"\xE4\xBD\x9C",		"\x8D\xED"=>"\xE5\x89\x8A",		"\x8D\xEE"=>"\xE5\x92\x8B",		"\x8D\xEF"=>"\xE6\x90\xBE",		"\x8D\xF0"=>"\xE6\x98\xA8",		"\x8D\xF1"=>"\xE6\x9C\x94",		"\x8D\xF2"=>"\xE6\x9F\xB5",		"\x8D\xF3"=>"\xE7\xAA\x84",		"\x8D\xF4"=>"\xE7\xAD\x96",		"\x8D\xF5"=>"\xE7\xB4\xA2",		"\x8D\xF6"=>"\xE9\x8C\xAF",		"\x8D\xF7"=>"\xE6\xA1\x9C",		"\x8D\xF8"=>"\xE9\xAE\xAD",		"\x8D\xF9"=>"\xE7\xAC\xB9",		"\x8D\xFA"=>"\xE5\x8C\x99",		"\x8D\xFB"=>"\xE5\x86\x8A",		"\x8D\xFC"=>"\xE5\x88\xB7",		"\x8E\x40"=>"\xE5\xAF\x9F",		"\x8E\x41"=>"\xE6\x8B\xB6",		"\x8E\x42"=>"\xE6\x92\xAE",		"\x8E\x43"=>"\xE6\x93\xA6",		"\x8E\x44"=>"\xE6\x9C\xAD",		"\x8E\x45"=>"\xE6\xAE\xBA",		"\x8E\x46"=>"\xE8\x96\xA9",		"\x8E\x47"=>"\xE9\x9B\x91",		"\x8E\x48"=>"\xE7\x9A\x90",		"\x8E\x49"=>"\xE9\xAF\x96",		"\x8E\x4A"=>"\xE6\x8D\x8C",		"\x8E\x4B"=>"\xE9\x8C\x86",		"\x8E\x4C"=>"\xE9\xAE\xAB",		"\x8E\x4D"=>"\xE7\x9A\xBF",		"\x8E\x4E"=>"\xE6\x99\x92",		"\x8E\x4F"=>"\xE4\xB8\x89",		"\x8E\x50"=>"\xE5\x82\x98",		"\x8E\x51"=>"\xE5\x8F\x82",		"\x8E\x52"=>"\xE5\xB1\xB1",		"\x8E\x53"=>"\xE6\x83\xA8",		"\x8E\x54"=>"\xE6\x92\x92",		"\x8E\x55"=>"\xE6\x95\xA3",		"\x8E\x56"=>"\xE6\xA1\x9F",		"\x8E\x57"=>"\xE7\x87\xA6",		"\x8E\x58"=>"\xE7\x8F\x8A",		"\x8E\x59"=>"\xE7\x94\xA3",		"\x8E\x5A"=>"\xE7\xAE\x97",		"\x8E\x5B"=>"\xE7\xBA\x82",		"\x8E\x5C"=>"\xE8\x9A\x95",		"\x8E\x5D"=>"\xE8\xAE\x83",		"\x8E\x5E"=>"\xE8\xB3\x9B",		"\x8E\x5F"=>"\xE9\x85\xB8",		"\x8E\x60"=>"\xE9\xA4\x90",		"\x8E\x61"=>"\xE6\x96\xAC",		"\x8E\x62"=>"\xE6\x9A\xAB",		"\x8E\x63"=>"\xE6\xAE\x8B",		"\x8E\x64"=>"\xE4\xBB\x95",		"\x8E\x65"=>"\xE4\xBB\x94",		"\x8E\x66"=>"\xE4\xBC\xBA",		"\x8E\x67"=>"\xE4\xBD\xBF",		"\x8E\x68"=>"\xE5\x88\xBA",		"\x8E\x69"=>"\xE5\x8F\xB8",		"\x8E\x6A"=>"\xE5\x8F\xB2",		"\x8E\x6B"=>"\xE5\x97\xA3",		"\x8E\x6C"=>"\xE5\x9B\x9B",		"\x8E\x6D"=>"\xE5\xA3\xAB",		"\x8E\x6E"=>"\xE5\xA7\x8B",		"\x8E\x6F"=>"\xE5\xA7\x89",		"\x8E\x70"=>"\xE5\xA7\xBF",		"\x8E\x71"=>"\xE5\xAD\x90",		"\x8E\x72"=>"\xE5\xB1\x8D",		"\x8E\x73"=>"\xE5\xB8\x82",		"\x8E\x74"=>"\xE5\xB8\xAB",		"\x8E\x75"=>"\xE5\xBF\x97",		"\x8E\x76"=>"\xE6\x80\x9D",		"\x8E\x77"=>"\xE6\x8C\x87",		"\x8E\x78"=>"\xE6\x94\xAF",		"\x8E\x79"=>"\xE5\xAD\x9C",		"\x8E\x7A"=>"\xE6\x96\xAF",		"\x8E\x7B"=>"\xE6\x96\xBD",		"\x8E\x7C"=>"\xE6\x97\xA8",		"\x8E\x7D"=>"\xE6\x9E\x9D",		"\x8E\x7E"=>"\xE6\xAD\xA2",		"\x8E\x80"=>"\xE6\xAD\xBB",		"\x8E\x81"=>"\xE6\xB0\x8F",		"\x8E\x82"=>"\xE7\x8D\x85",		"\x8E\x83"=>"\xE7\xA5\x89",		"\x8E\x84"=>"\xE7\xA7\x81",		"\x8E\x85"=>"\xE7\xB3\xB8",		"\x8E\x86"=>"\xE7\xB4\x99",		"\x8E\x87"=>"\xE7\xB4\xAB",		"\x8E\x88"=>"\xE8\x82\xA2",		"\x8E\x89"=>"\xE8\x84\x82",		"\x8E\x8A"=>"\xE8\x87\xB3",		"\x8E\x8B"=>"\xE8\xA6\x96",		"\x8E\x8C"=>"\xE8\xA9\x9E",		"\x8E\x8D"=>"\xE8\xA9\xA9",		"\x8E\x8E"=>"\xE8\xA9\xA6",		"\x8E\x8F"=>"\xE8\xAA\x8C",		"\x8E\x90"=>"\xE8\xAB\xAE",		"\x8E\x91"=>"\xE8\xB3\x87",		"\x8E\x92"=>"\xE8\xB3\x9C",		"\x8E\x93"=>"\xE9\x9B\x8C",		"\x8E\x94"=>"\xE9\xA3\xBC",		"\x8E\x95"=>"\xE6\xAD\xAF",		"\x8E\x96"=>"\xE4\xBA\x8B",		"\x8E\x97"=>"\xE4\xBC\xBC",		"\x8E\x98"=>"\xE4\xBE\x8D",		"\x8E\x99"=>"\xE5\x85\x90",		"\x8E\x9A"=>"\xE5\xAD\x97",		"\x8E\x9B"=>"\xE5\xAF\xBA",		"\x8E\x9C"=>"\xE6\x85\x88",		"\x8E\x9D"=>"\xE6\x8C\x81",		"\x8E\x9E"=>"\xE6\x99\x82",		"\x8E\x9F"=>"\xE6\xAC\xA1",		"\x8E\xA0"=>"\xE6\xBB\x8B",		"\x8E\xA1"=>"\xE6\xB2\xBB",		"\x8E\xA2"=>"\xE7\x88\xBE",		"\x8E\xA3"=>"\xE7\x92\xBD",		"\x8E\xA4"=>"\xE7\x97\x94",		"\x8E\xA5"=>"\xE7\xA3\x81",		"\x8E\xA6"=>"\xE7\xA4\xBA",		"\x8E\xA7"=>"\xE8\x80\x8C",		"\x8E\xA8"=>"\xE8\x80\xB3",		"\x8E\xA9"=>"\xE8\x87\xAA",		"\x8E\xAA"=>"\xE8\x92\x94",		"\x8E\xAB"=>"\xE8\xBE\x9E",		"\x8E\xAC"=>"\xE6\xB1\x90",		"\x8E\xAD"=>"\xE9\xB9\xBF",		"\x8E\xAE"=>"\xE5\xBC\x8F",		"\x8E\xAF"=>"\xE8\xAD\x98",		"\x8E\xB0"=>"\xE9\xB4\xAB",		"\x8E\xB1"=>"\xE7\xAB\xBA",		"\x8E\xB2"=>"\xE8\xBB\xB8",		"\x8E\xB3"=>"\xE5\xAE\x8D",		"\x8E\xB4"=>"\xE9\x9B\xAB",		"\x8E\xB5"=>"\xE4\xB8\x83",		"\x8E\xB6"=>"\xE5\x8F\xB1",		"\x8E\xB7"=>"\xE5\x9F\xB7",		"\x8E\xB8"=>"\xE5\xA4\xB1",		"\x8E\xB9"=>"\xE5\xAB\x89",		"\x8E\xBA"=>"\xE5\xAE\xA4",		"\x8E\xBB"=>"\xE6\x82\x89",		"\x8E\xBC"=>"\xE6\xB9\xBF",		"\x8E\xBD"=>"\xE6\xBC\x86",		"\x8E\xBE"=>"\xE7\x96\xBE",		"\x8E\xBF"=>"\xE8\xB3\xAA",		"\x8E\xC0"=>"\xE5\xAE\x9F",		"\x8E\xC1"=>"\xE8\x94\x80",		"\x8E\xC2"=>"\xE7\xAF\xA0",		"\x8E\xC3"=>"\xE5\x81\xB2",		"\x8E\xC4"=>"\xE6\x9F\xB4",		"\x8E\xC5"=>"\xE8\x8A\x9D",		"\x8E\xC6"=>"\xE5\xB1\xA1",		"\x8E\xC7"=>"\xE8\x95\x8A",		"\x8E\xC8"=>"\xE7\xB8\x9E",		"\x8E\xC9"=>"\xE8\x88\x8E",		"\x8E\xCA"=>"\xE5\x86\x99",		"\x8E\xCB"=>"\xE5\xB0\x84",		"\x8E\xCC"=>"\xE6\x8D\xA8",		"\x8E\xCD"=>"\xE8\xB5\xA6",		"\x8E\xCE"=>"\xE6\x96\x9C",		"\x8E\xCF"=>"\xE7\x85\xAE",		"\x8E\xD0"=>"\xE7\xA4\xBE",		"\x8E\xD1"=>"\xE7\xB4\x97",		"\x8E\xD2"=>"\xE8\x80\x85",		"\x8E\xD3"=>"\xE8\xAC\x9D",		"\x8E\xD4"=>"\xE8\xBB\x8A",		"\x8E\xD5"=>"\xE9\x81\xAE",		"\x8E\xD6"=>"\xE8\x9B\x87",		"\x8E\xD7"=>"\xE9\x82\xAA",		"\x8E\xD8"=>"\xE5\x80\x9F",		"\x8E\xD9"=>"\xE5\x8B\xBA",		"\x8E\xDA"=>"\xE5\xB0\xBA",		"\x8E\xDB"=>"\xE6\x9D\x93",		"\x8E\xDC"=>"\xE7\x81\xBC",		"\x8E\xDD"=>"\xE7\x88\xB5",		"\x8E\xDE"=>"\xE9\x85\x8C",		"\x8E\xDF"=>"\xE9\x87\x88",		"\x8E\xE0"=>"\xE9\x8C\xAB",		"\x8E\xE1"=>"\xE8\x8B\xA5",		"\x8E\xE2"=>"\xE5\xAF\x82",		"\x8E\xE3"=>"\xE5\xBC\xB1",		"\x8E\xE4"=>"\xE6\x83\xB9",		"\x8E\xE5"=>"\xE4\xB8\xBB",		"\x8E\xE6"=>"\xE5\x8F\x96",		"\x8E\xE7"=>"\xE5\xAE\x88",		"\x8E\xE8"=>"\xE6\x89\x8B",		"\x8E\xE9"=>"\xE6\x9C\xB1",		"\x8E\xEA"=>"\xE6\xAE\x8A",		"\x8E\xEB"=>"\xE7\x8B\xA9",		"\x8E\xEC"=>"\xE7\x8F\xA0",		"\x8E\xED"=>"\xE7\xA8\xAE",		"\x8E\xEE"=>"\xE8\x85\xAB",		"\x8E\xEF"=>"\xE8\xB6\xA3",		"\x8E\xF0"=>"\xE9\x85\x92",		"\x8E\xF1"=>"\xE9\xA6\x96",		"\x8E\xF2"=>"\xE5\x84\x92",		"\x8E\xF3"=>"\xE5\x8F\x97",		"\x8E\xF4"=>"\xE5\x91\xAA",		"\x8E\xF5"=>"\xE5\xAF\xBF",		"\x8E\xF6"=>"\xE6\x8E\x88",		"\x8E\xF7"=>"\xE6\xA8\xB9",		"\x8E\xF8"=>"\xE7\xB6\xAC",		"\x8E\xF9"=>"\xE9\x9C\x80",		"\x8E\xFA"=>"\xE5\x9B\x9A",		"\x8E\xFB"=>"\xE5\x8F\x8E",		"\x8E\xFC"=>"\xE5\x91\xA8",		"\x8F\x40"=>"\xE5\xAE\x97",		"\x8F\x41"=>"\xE5\xB0\xB1",		"\x8F\x42"=>"\xE5\xB7\x9E",		"\x8F\x43"=>"\xE4\xBF\xAE",		"\x8F\x44"=>"\xE6\x84\x81",		"\x8F\x45"=>"\xE6\x8B\xBE",		"\x8F\x46"=>"\xE6\xB4\xB2",		"\x8F\x47"=>"\xE7\xA7\x80",		"\x8F\x48"=>"\xE7\xA7\x8B",		"\x8F\x49"=>"\xE7\xB5\x82",		"\x8F\x4A"=>"\xE7\xB9\x8D",		"\x8F\x4B"=>"\xE7\xBF\x92",		"\x8F\x4C"=>"\xE8\x87\xAD",		"\x8F\x4D"=>"\xE8\x88\x9F",		"\x8F\x4E"=>"\xE8\x92\x90",		"\x8F\x4F"=>"\xE8\xA1\x86",		"\x8F\x50"=>"\xE8\xA5\xB2",		"\x8F\x51"=>"\xE8\xAE\x90",		"\x8F\x52"=>"\xE8\xB9\xB4",		"\x8F\x53"=>"\xE8\xBC\xAF",		"\x8F\x54"=>"\xE9\x80\xB1",		"\x8F\x55"=>"\xE9\x85\x8B",		"\x8F\x56"=>"\xE9\x85\xAC",		"\x8F\x57"=>"\xE9\x9B\x86",		"\x8F\x58"=>"\xE9\x86\x9C",		"\x8F\x59"=>"\xE4\xBB\x80",		"\x8F\x5A"=>"\xE4\xBD\x8F",		"\x8F\x5B"=>"\xE5\x85\x85",		"\x8F\x5C"=>"\xE5\x8D\x81",		"\x8F\x5D"=>"\xE5\xBE\x93",		"\x8F\x5E"=>"\xE6\x88\x8E",		"\x8F\x5F"=>"\xE6\x9F\x94",		"\x8F\x60"=>"\xE6\xB1\x81",		"\x8F\x61"=>"\xE6\xB8\x8B",		"\x8F\x62"=>"\xE7\x8D\xA3",		"\x8F\x63"=>"\xE7\xB8\xA6",		"\x8F\x64"=>"\xE9\x87\x8D",		"\x8F\x65"=>"\xE9\x8A\x83",		"\x8F\x66"=>"\xE5\x8F\x94",		"\x8F\x67"=>"\xE5\xA4\x99",		"\x8F\x68"=>"\xE5\xAE\xBF",		"\x8F\x69"=>"\xE6\xB7\x91",		"\x8F\x6A"=>"\xE7\xA5\x9D",		"\x8F\x6B"=>"\xE7\xB8\xAE",		"\x8F\x6C"=>"\xE7\xB2\x9B",		"\x8F\x6D"=>"\xE5\xA1\xBE",		"\x8F\x6E"=>"\xE7\x86\x9F",		"\x8F\x6F"=>"\xE5\x87\xBA",		"\x8F\x70"=>"\xE8\xA1\x93",		"\x8F\x71"=>"\xE8\xBF\xB0",		"\x8F\x72"=>"\xE4\xBF\x8A",		"\x8F\x73"=>"\xE5\xB3\xBB",		"\x8F\x74"=>"\xE6\x98\xA5",		"\x8F\x75"=>"\xE7\x9E\xAC",		"\x8F\x76"=>"\xE7\xAB\xA3",		"\x8F\x77"=>"\xE8\x88\x9C",		"\x8F\x78"=>"\xE9\xA7\xBF",		"\x8F\x79"=>"\xE5\x87\x86",		"\x8F\x7A"=>"\xE5\xBE\xAA",		"\x8F\x7B"=>"\xE6\x97\xAC",		"\x8F\x7C"=>"\xE6\xA5\xAF",		"\x8F\x7D"=>"\xE6\xAE\x89",		"\x8F\x7E"=>"\xE6\xB7\xB3",		"\x8F\x80"=>"\xE6\xBA\x96",		"\x8F\x81"=>"\xE6\xBD\xA4",		"\x8F\x82"=>"\xE7\x9B\xBE",		"\x8F\x83"=>"\xE7\xB4\x94",		"\x8F\x84"=>"\xE5\xB7\xA1",		"\x8F\x85"=>"\xE9\x81\xB5",		"\x8F\x86"=>"\xE9\x86\x87",		"\x8F\x87"=>"\xE9\xA0\x86",		"\x8F\x88"=>"\xE5\x87\xA6",		"\x8F\x89"=>"\xE5\x88\x9D",		"\x8F\x8A"=>"\xE6\x89\x80",		"\x8F\x8B"=>"\xE6\x9A\x91",		"\x8F\x8C"=>"\xE6\x9B\x99",		"\x8F\x8D"=>"\xE6\xB8\x9A",		"\x8F\x8E"=>"\xE5\xBA\xB6",		"\x8F\x8F"=>"\xE7\xB7\x92",		"\x8F\x90"=>"\xE7\xBD\xB2",		"\x8F\x91"=>"\xE6\x9B\xB8",		"\x8F\x92"=>"\xE8\x96\xAF",		"\x8F\x93"=>"\xE8\x97\xB7",		"\x8F\x94"=>"\xE8\xAB\xB8",		"\x8F\x95"=>"\xE5\x8A\xA9",		"\x8F\x96"=>"\xE5\x8F\x99",		"\x8F\x97"=>"\xE5\xA5\xB3",		"\x8F\x98"=>"\xE5\xBA\x8F",		"\x8F\x99"=>"\xE5\xBE\x90",		"\x8F\x9A"=>"\xE6\x81\x95",		"\x8F\x9B"=>"\xE9\x8B\xA4",		"\x8F\x9C"=>"\xE9\x99\xA4",		"\x8F\x9D"=>"\xE5\x82\xB7",		"\x8F\x9E"=>"\xE5\x84\x9F",		"\x8F\x9F"=>"\xE5\x8B\x9D",		"\x8F\xA0"=>"\xE5\x8C\xA0",		"\x8F\xA1"=>"\xE5\x8D\x87",		"\x8F\xA2"=>"\xE5\x8F\xAC",		"\x8F\xA3"=>"\xE5\x93\xA8",		"\x8F\xA4"=>"\xE5\x95\x86",		"\x8F\xA5"=>"\xE5\x94\xB1",		"\x8F\xA6"=>"\xE5\x98\x97",		"\x8F\xA7"=>"\xE5\xA5\xA8",		"\x8F\xA8"=>"\xE5\xA6\xBE",		"\x8F\xA9"=>"\xE5\xA8\xBC",		"\x8F\xAA"=>"\xE5\xAE\xB5",		"\x8F\xAB"=>"\xE5\xB0\x86",		"\x8F\xAC"=>"\xE5\xB0\x8F",		"\x8F\xAD"=>"\xE5\xB0\x91",		"\x8F\xAE"=>"\xE5\xB0\x9A",		"\x8F\xAF"=>"\xE5\xBA\x84",		"\x8F\xB0"=>"\xE5\xBA\x8A",		"\x8F\xB1"=>"\xE5\xBB\xA0",		"\x8F\xB2"=>"\xE5\xBD\xB0",		"\x8F\xB3"=>"\xE6\x89\xBF",		"\x8F\xB4"=>"\xE6\x8A\x84",		"\x8F\xB5"=>"\xE6\x8B\x9B",		"\x8F\xB6"=>"\xE6\x8E\x8C",		"\x8F\xB7"=>"\xE6\x8D\xB7",		"\x8F\xB8"=>"\xE6\x98\x87",		"\x8F\xB9"=>"\xE6\x98\x8C",		"\x8F\xBA"=>"\xE6\x98\xAD",		"\x8F\xBB"=>"\xE6\x99\xB6",		"\x8F\xBC"=>"\xE6\x9D\xBE",		"\x8F\xBD"=>"\xE6\xA2\xA2",		"\x8F\xBE"=>"\xE6\xA8\x9F",		"\x8F\xBF"=>"\xE6\xA8\xB5",		"\x8F\xC0"=>"\xE6\xB2\xBC",		"\x8F\xC1"=>"\xE6\xB6\x88",		"\x8F\xC2"=>"\xE6\xB8\x89",		"\x8F\xC3"=>"\xE6\xB9\x98",		"\x8F\xC4"=>"\xE7\x84\xBC",		"\x8F\xC5"=>"\xE7\x84\xA6",		"\x8F\xC6"=>"\xE7\x85\xA7",		"\x8F\xC7"=>"\xE7\x97\x87",		"\x8F\xC8"=>"\xE7\x9C\x81",		"\x8F\xC9"=>"\xE7\xA1\x9D",		"\x8F\xCA"=>"\xE7\xA4\x81",		"\x8F\xCB"=>"\xE7\xA5\xA5",		"\x8F\xCC"=>"\xE7\xA7\xB0",		"\x8F\xCD"=>"\xE7\xAB\xA0",		"\x8F\xCE"=>"\xE7\xAC\x91",		"\x8F\xCF"=>"\xE7\xB2\xA7",		"\x8F\xD0"=>"\xE7\xB4\xB9",		"\x8F\xD1"=>"\xE8\x82\x96",		"\x8F\xD2"=>"\xE8\x8F\x96",		"\x8F\xD3"=>"\xE8\x92\x8B",		"\x8F\xD4"=>"\xE8\x95\x89",		"\x8F\xD5"=>"\xE8\xA1\x9D",		"\x8F\xD6"=>"\xE8\xA3\xB3",		"\x8F\xD7"=>"\xE8\xA8\x9F",		"\x8F\xD8"=>"\xE8\xA8\xBC",		"\x8F\xD9"=>"\xE8\xA9\x94",		"\x8F\xDA"=>"\xE8\xA9\xB3",		"\x8F\xDB"=>"\xE8\xB1\xA1",		"\x8F\xDC"=>"\xE8\xB3\x9E",		"\x8F\xDD"=>"\xE9\x86\xA4",		"\x8F\xDE"=>"\xE9\x89\xA6",		"\x8F\xDF"=>"\xE9\x8D\xBE",		"\x8F\xE0"=>"\xE9\x90\x98",		"\x8F\xE1"=>"\xE9\x9A\x9C",		"\x8F\xE2"=>"\xE9\x9E\x98",		"\x8F\xE3"=>"\xE4\xB8\x8A",		"\x8F\xE4"=>"\xE4\xB8\x88",		"\x8F\xE5"=>"\xE4\xB8\x9E",		"\x8F\xE6"=>"\xE4\xB9\x97",		"\x8F\xE7"=>"\xE5\x86\x97",		"\x8F\xE8"=>"\xE5\x89\xB0",		"\x8F\xE9"=>"\xE5\x9F\x8E",		"\x8F\xEA"=>"\xE5\xA0\xB4",		"\x8F\xEB"=>"\xE5\xA3\x8C",		"\x8F\xEC"=>"\xE5\xAC\xA2",		"\x8F\xED"=>"\xE5\xB8\xB8",		"\x8F\xEE"=>"\xE6\x83\x85",		"\x8F\xEF"=>"\xE6\x93\xBE",		"\x8F\xF0"=>"\xE6\x9D\xA1",		"\x8F\xF1"=>"\xE6\x9D\x96",		"\x8F\xF2"=>"\xE6\xB5\x84",		"\x8F\xF3"=>"\xE7\x8A\xB6",		"\x8F\xF4"=>"\xE7\x95\xB3",		"\x8F\xF5"=>"\xE7\xA9\xA3",		"\x8F\xF6"=>"\xE8\x92\xB8",		"\x8F\xF7"=>"\xE8\xAD\xB2",		"\x8F\xF8"=>"\xE9\x86\xB8",		"\x8F\xF9"=>"\xE9\x8C\xA0",		"\x8F\xFA"=>"\xE5\x98\xB1",		"\x8F\xFB"=>"\xE5\x9F\xB4",		"\x8F\xFC"=>"\xE9\xA3\xBE",		"\x90\x40"=>"\xE6\x8B\xAD",		"\x90\x41"=>"\xE6\xA4\x8D",		"\x90\x42"=>"\xE6\xAE\x96",		"\x90\x43"=>"\xE7\x87\xAD",		"\x90\x44"=>"\xE7\xB9\x94",		"\x90\x45"=>"\xE8\x81\xB7",		"\x90\x46"=>"\xE8\x89\xB2",		"\x90\x47"=>"\xE8\xA7\xA6",		"\x90\x48"=>"\xE9\xA3\x9F",		"\x90\x49"=>"\xE8\x9D\x95",		"\x90\x4A"=>"\xE8\xBE\xB1",		"\x90\x4B"=>"\xE5\xB0\xBB",		"\x90\x4C"=>"\xE4\xBC\xB8",		"\x90\x4D"=>"\xE4\xBF\xA1",		"\x90\x4E"=>"\xE4\xBE\xB5",		"\x90\x4F"=>"\xE5\x94\x87",		"\x90\x50"=>"\xE5\xA8\xA0",		"\x90\x51"=>"\xE5\xAF\x9D",		"\x90\x52"=>"\xE5\xAF\xA9",		"\x90\x53"=>"\xE5\xBF\x83",		"\x90\x54"=>"\xE6\x85\x8E",		"\x90\x55"=>"\xE6\x8C\xAF",		"\x90\x56"=>"\xE6\x96\xB0",		"\x90\x57"=>"\xE6\x99\x8B",		"\x90\x58"=>"\xE6\xA3\xAE",		"\x90\x59"=>"\xE6\xA6\x9B",		"\x90\x5A"=>"\xE6\xB5\xB8",		"\x90\x5B"=>"\xE6\xB7\xB1",		"\x90\x5C"=>"\xE7\x94\xB3",		"\x90\x5D"=>"\xE7\x96\xB9",		"\x90\x5E"=>"\xE7\x9C\x9F",		"\x90\x5F"=>"\xE7\xA5\x9E",		"\x90\x60"=>"\xE7\xA7\xA6",		"\x90\x61"=>"\xE7\xB4\xB3",		"\x90\x62"=>"\xE8\x87\xA3",		"\x90\x63"=>"\xE8\x8A\xAF",		"\x90\x64"=>"\xE8\x96\xAA",		"\x90\x65"=>"\xE8\xA6\xAA",		"\x90\x66"=>"\xE8\xA8\xBA",		"\x90\x67"=>"\xE8\xBA\xAB",		"\x90\x68"=>"\xE8\xBE\x9B",		"\x90\x69"=>"\xE9\x80\xB2",		"\x90\x6A"=>"\xE9\x87\x9D",		"\x90\x6B"=>"\xE9\x9C\x87",		"\x90\x6C"=>"\xE4\xBA\xBA",		"\x90\x6D"=>"\xE4\xBB\x81",		"\x90\x6E"=>"\xE5\x88\x83",		"\x90\x6F"=>"\xE5\xA1\xB5",		"\x90\x70"=>"\xE5\xA3\xAC",		"\x90\x71"=>"\xE5\xB0\x8B",		"\x90\x72"=>"\xE7\x94\x9A",		"\x90\x73"=>"\xE5\xB0\xBD",		"\x90\x74"=>"\xE8\x85\x8E",		"\x90\x75"=>"\xE8\xA8\x8A",		"\x90\x76"=>"\xE8\xBF\x85",		"\x90\x77"=>"\xE9\x99\xA3",		"\x90\x78"=>"\xE9\x9D\xAD",		"\x90\x79"=>"\xE7\xAC\xA5",		"\x90\x7A"=>"\xE8\xAB\x8F",		"\x90\x7B"=>"\xE9\xA0\x88",		"\x90\x7C"=>"\xE9\x85\xA2",		"\x90\x7D"=>"\xE5\x9B\xB3",		"\x90\x7E"=>"\xE5\x8E\xA8",		"\x90\x80"=>"\xE9\x80\x97",		"\x90\x81"=>"\xE5\x90\xB9",		"\x90\x82"=>"\xE5\x9E\x82",		"\x90\x83"=>"\xE5\xB8\xA5",		"\x90\x84"=>"\xE6\x8E\xA8",		"\x90\x85"=>"\xE6\xB0\xB4",		"\x90\x86"=>"\xE7\x82\x8A",		"\x90\x87"=>"\xE7\x9D\xA1",		"\x90\x88"=>"\xE7\xB2\x8B",		"\x90\x89"=>"\xE7\xBF\xA0",		"\x90\x8A"=>"\xE8\xA1\xB0",		"\x90\x8B"=>"\xE9\x81\x82",		"\x90\x8C"=>"\xE9\x85\x94",		"\x90\x8D"=>"\xE9\x8C\x90",		"\x90\x8E"=>"\xE9\x8C\x98",		"\x90\x8F"=>"\xE9\x9A\x8F",		"\x90\x90"=>"\xE7\x91\x9E",		"\x90\x91"=>"\xE9\xAB\x84",		"\x90\x92"=>"\xE5\xB4\x87",		"\x90\x93"=>"\xE5\xB5\xA9",		"\x90\x94"=>"\xE6\x95\xB0",		"\x90\x95"=>"\xE6\x9E\xA2",		"\x90\x96"=>"\xE8\xB6\xA8",		"\x90\x97"=>"\xE9\x9B\x9B",		"\x90\x98"=>"\xE6\x8D\xAE",		"\x90\x99"=>"\xE6\x9D\x89",		"\x90\x9A"=>"\xE6\xA4\x99",		"\x90\x9B"=>"\xE8\x8F\x85",		"\x90\x9C"=>"\xE9\xA0\x97",		"\x90\x9D"=>"\xE9\x9B\x80",		"\x90\x9E"=>"\xE8\xA3\xBE",		"\x90\x9F"=>"\xE6\xBE\x84",		"\x90\xA0"=>"\xE6\x91\xBA",		"\x90\xA1"=>"\xE5\xAF\xB8",		"\x90\xA2"=>"\xE4\xB8\x96",		"\x90\xA3"=>"\xE7\x80\xAC",		"\x90\xA4"=>"\xE7\x95\x9D",		"\x90\xA5"=>"\xE6\x98\xAF",		"\x90\xA6"=>"\xE5\x87\x84",		"\x90\xA7"=>"\xE5\x88\xB6",		"\x90\xA8"=>"\xE5\x8B\xA2",		"\x90\xA9"=>"\xE5\xA7\x93",		"\x90\xAA"=>"\xE5\xBE\x81",		"\x90\xAB"=>"\xE6\x80\xA7",		"\x90\xAC"=>"\xE6\x88\x90",		"\x90\xAD"=>"\xE6\x94\xBF",		"\x90\xAE"=>"\xE6\x95\xB4",		"\x90\xAF"=>"\xE6\x98\x9F",		"\x90\xB0"=>"\xE6\x99\xB4",		"\x90\xB1"=>"\xE6\xA3\xB2",		"\x90\xB2"=>"\xE6\xA0\x96",		"\x90\xB3"=>"\xE6\xAD\xA3",		"\x90\xB4"=>"\xE6\xB8\x85",		"\x90\xB5"=>"\xE7\x89\xB2",		"\x90\xB6"=>"\xE7\x94\x9F",		"\x90\xB7"=>"\xE7\x9B\x9B",		"\x90\xB8"=>"\xE7\xB2\xBE",		"\x90\xB9"=>"\xE8\x81\x96",		"\x90\xBA"=>"\xE5\xA3\xB0",		"\x90\xBB"=>"\xE8\xA3\xBD",		"\x90\xBC"=>"\xE8\xA5\xBF",		"\x90\xBD"=>"\xE8\xAA\xA0",		"\x90\xBE"=>"\xE8\xAA\x93",		"\x90\xBF"=>"\xE8\xAB\x8B",		"\x90\xC0"=>"\xE9\x80\x9D",		"\x90\xC1"=>"\xE9\x86\x92",		"\x90\xC2"=>"\xE9\x9D\x92",		"\x90\xC3"=>"\xE9\x9D\x99",		"\x90\xC4"=>"\xE6\x96\x89",		"\x90\xC5"=>"\xE7\xA8\x8E",		"\x90\xC6"=>"\xE8\x84\x86",		"\x90\xC7"=>"\xE9\x9A\xBB",		"\x90\xC8"=>"\xE5\xB8\xAD",		"\x90\xC9"=>"\xE6\x83\x9C",		"\x90\xCA"=>"\xE6\x88\x9A",		"\x90\xCB"=>"\xE6\x96\xA5",		"\x90\xCC"=>"\xE6\x98\x94",		"\x90\xCD"=>"\xE6\x9E\x90",		"\x90\xCE"=>"\xE7\x9F\xB3",		"\x90\xCF"=>"\xE7\xA9\x8D",		"\x90\xD0"=>"\xE7\xB1\x8D",		"\x90\xD1"=>"\xE7\xB8\xBE",		"\x90\xD2"=>"\xE8\x84\x8A",		"\x90\xD3"=>"\xE8\xB2\xAC",		"\x90\xD4"=>"\xE8\xB5\xA4",		"\x90\xD5"=>"\xE8\xB7\xA1",		"\x90\xD6"=>"\xE8\xB9\x9F",		"\x90\xD7"=>"\xE7\xA2\xA9",		"\x90\xD8"=>"\xE5\x88\x87",		"\x90\xD9"=>"\xE6\x8B\x99",		"\x90\xDA"=>"\xE6\x8E\xA5",		"\x90\xDB"=>"\xE6\x91\x82",		"\x90\xDC"=>"\xE6\x8A\x98",		"\x90\xDD"=>"\xE8\xA8\xAD",		"\x90\xDE"=>"\xE7\xAA\x83",		"\x90\xDF"=>"\xE7\xAF\x80",		"\x90\xE0"=>"\xE8\xAA\xAC",		"\x90\xE1"=>"\xE9\x9B\xAA",		"\x90\xE2"=>"\xE7\xB5\xB6",		"\x90\xE3"=>"\xE8\x88\x8C",		"\x90\xE4"=>"\xE8\x9D\x89",		"\x90\xE5"=>"\xE4\xBB\x99",		"\x90\xE6"=>"\xE5\x85\x88",		"\x90\xE7"=>"\xE5\x8D\x83",		"\x90\xE8"=>"\xE5\x8D\xA0",		"\x90\xE9"=>"\xE5\xAE\xA3",		"\x90\xEA"=>"\xE5\xB0\x82",		"\x90\xEB"=>"\xE5\xB0\x96",		"\x90\xEC"=>"\xE5\xB7\x9D",		"\x90\xED"=>"\xE6\x88\xA6",		"\x90\xEE"=>"\xE6\x89\x87",		"\x90\xEF"=>"\xE6\x92\xB0",		"\x90\xF0"=>"\xE6\xA0\x93",		"\x90\xF1"=>"\xE6\xA0\xB4",		"\x90\xF2"=>"\xE6\xB3\x89",		"\x90\xF3"=>"\xE6\xB5\x85",		"\x90\xF4"=>"\xE6\xB4\x97",		"\x90\xF5"=>"\xE6\x9F\x93",		"\x90\xF6"=>"\xE6\xBD\x9C",		"\x90\xF7"=>"\xE7\x85\x8E",		"\x90\xF8"=>"\xE7\x85\xBD",		"\x90\xF9"=>"\xE6\x97\x8B",		"\x90\xFA"=>"\xE7\xA9\xBF",		"\x90\xFB"=>"\xE7\xAE\xAD",		"\x90\xFC"=>"\xE7\xB7\x9A",		"\x91\x40"=>"\xE7\xB9\x8A",		"\x91\x41"=>"\xE7\xBE\xA8",		"\x91\x42"=>"\xE8\x85\xBA",		"\x91\x43"=>"\xE8\x88\x9B",		"\x91\x44"=>"\xE8\x88\xB9",		"\x91\x45"=>"\xE8\x96\xA6",		"\x91\x46"=>"\xE8\xA9\xAE",		"\x91\x47"=>"\xE8\xB3\x8E",		"\x91\x48"=>"\xE8\xB7\xB5",		"\x91\x49"=>"\xE9\x81\xB8",		"\x91\x4A"=>"\xE9\x81\xB7",		"\x91\x4B"=>"\xE9\x8A\xAD",		"\x91\x4C"=>"\xE9\x8A\x91",		"\x91\x4D"=>"\xE9\x96\x83",		"\x91\x4E"=>"\xE9\xAE\xAE",		"\x91\x4F"=>"\xE5\x89\x8D",		"\x91\x50"=>"\xE5\x96\x84",		"\x91\x51"=>"\xE6\xBC\xB8",		"\x91\x52"=>"\xE7\x84\xB6",		"\x91\x53"=>"\xE5\x85\xA8",		"\x91\x54"=>"\xE7\xA6\x85",		"\x91\x55"=>"\xE7\xB9\x95",		"\x91\x56"=>"\xE8\x86\xB3",		"\x91\x57"=>"\xE7\xB3\x8E",		"\x91\x58"=>"\xE5\x99\x8C",		"\x91\x59"=>"\xE5\xA1\x91",		"\x91\x5A"=>"\xE5\xB2\xA8",		"\x91\x5B"=>"\xE6\x8E\xAA",		"\x91\x5C"=>"\xE6\x9B\xBE",		"\x91\x5D"=>"\xE6\x9B\xBD",		"\x91\x5E"=>"\xE6\xA5\x9A",		"\x91\x5F"=>"\xE7\x8B\x99",		"\x91\x60"=>"\xE7\x96\x8F",		"\x91\x61"=>"\xE7\x96\x8E",		"\x91\x62"=>"\xE7\xA4\x8E",		"\x91\x63"=>"\xE7\xA5\x96",		"\x91\x64"=>"\xE7\xA7\x9F",		"\x91\x65"=>"\xE7\xB2\x97",		"\x91\x66"=>"\xE7\xB4\xA0",		"\x91\x67"=>"\xE7\xB5\x84",		"\x91\x68"=>"\xE8\x98\x87",		"\x91\x69"=>"\xE8\xA8\xB4",		"\x91\x6A"=>"\xE9\x98\xBB",		"\x91\x6B"=>"\xE9\x81\xA1",		"\x91\x6C"=>"\xE9\xBC\xA0",		"\x91\x6D"=>"\xE5\x83\xA7",		"\x91\x6E"=>"\xE5\x89\xB5",		"\x91\x6F"=>"\xE5\x8F\x8C",		"\x91\x70"=>"\xE5\x8F\xA2",		"\x91\x71"=>"\xE5\x80\x89",		"\x91\x72"=>"\xE5\x96\xAA",		"\x91\x73"=>"\xE5\xA3\xAE",		"\x91\x74"=>"\xE5\xA5\x8F",		"\x91\x75"=>"\xE7\x88\xBD",		"\x91\x76"=>"\xE5\xAE\x8B",		"\x91\x77"=>"\xE5\xB1\xA4",		"\x91\x78"=>"\xE5\x8C\x9D",		"\x91\x79"=>"\xE6\x83\xA3",		"\x91\x7A"=>"\xE6\x83\xB3",		"\x91\x7B"=>"\xE6\x8D\x9C",		"\x91\x7C"=>"\xE6\x8E\x83",		"\x91\x7D"=>"\xE6\x8C\xBF",		"\x91\x7E"=>"\xE6\x8E\xBB",		"\x91\x80"=>"\xE6\x93\x8D",		"\x91\x81"=>"\xE6\x97\xA9",		"\x91\x82"=>"\xE6\x9B\xB9",		"\x91\x83"=>"\xE5\xB7\xA3",		"\x91\x84"=>"\xE6\xA7\x8D",		"\x91\x85"=>"\xE6\xA7\xBD",		"\x91\x86"=>"\xE6\xBC\x95",		"\x91\x87"=>"\xE7\x87\xA5",		"\x91\x88"=>"\xE4\xBA\x89",		"\x91\x89"=>"\xE7\x97\xA9",		"\x91\x8A"=>"\xE7\x9B\xB8",		"\x91\x8B"=>"\xE7\xAA\x93",		"\x91\x8C"=>"\xE7\xB3\x9F",		"\x91\x8D"=>"\xE7\xB7\x8F",		"\x91\x8E"=>"\xE7\xB6\x9C",		"\x91\x8F"=>"\xE8\x81\xA1",		"\x91\x90"=>"\xE8\x8D\x89",		"\x91\x91"=>"\xE8\x8D\x98",		"\x91\x92"=>"\xE8\x91\xAC",		"\x91\x93"=>"\xE8\x92\xBC",		"\x91\x94"=>"\xE8\x97\xBB",		"\x91\x95"=>"\xE8\xA3\x85",		"\x91\x96"=>"\xE8\xB5\xB0",		"\x91\x97"=>"\xE9\x80\x81",		"\x91\x98"=>"\xE9\x81\xAD",		"\x91\x99"=>"\xE9\x8E\x97",		"\x91\x9A"=>"\xE9\x9C\x9C",		"\x91\x9B"=>"\xE9\xA8\x92",		"\x91\x9C"=>"\xE5\x83\x8F",		"\x91\x9D"=>"\xE5\xA2\x97",		"\x91\x9E"=>"\xE6\x86\x8E",		"\x91\x9F"=>"\xE8\x87\x93",		"\x91\xA0"=>"\xE8\x94\xB5",		"\x91\xA1"=>"\xE8\xB4\x88",		"\x91\xA2"=>"\xE9\x80\xA0",		"\x91\xA3"=>"\xE4\xBF\x83",		"\x91\xA4"=>"\xE5\x81\xB4",		"\x91\xA5"=>"\xE5\x89\x87",		"\x91\xA6"=>"\xE5\x8D\xB3",		"\x91\xA7"=>"\xE6\x81\xAF",		"\x91\xA8"=>"\xE6\x8D\x89",		"\x91\xA9"=>"\xE6\x9D\x9F",		"\x91\xAA"=>"\xE6\xB8\xAC",		"\x91\xAB"=>"\xE8\xB6\xB3",		"\x91\xAC"=>"\xE9\x80\x9F",		"\x91\xAD"=>"\xE4\xBF\x97",		"\x91\xAE"=>"\xE5\xB1\x9E",		"\x91\xAF"=>"\xE8\xB3\x8A",		"\x91\xB0"=>"\xE6\x97\x8F",		"\x91\xB1"=>"\xE7\xB6\x9A",		"\x91\xB2"=>"\xE5\x8D\x92",		"\x91\xB3"=>"\xE8\xA2\x96",		"\x91\xB4"=>"\xE5\x85\xB6",		"\x91\xB5"=>"\xE6\x8F\x83",		"\x91\xB6"=>"\xE5\xAD\x98",		"\x91\xB7"=>"\xE5\xAD\xAB",		"\x91\xB8"=>"\xE5\xB0\x8A",		"\x91\xB9"=>"\xE6\x90\x8D",		"\x91\xBA"=>"\xE6\x9D\x91",		"\x91\xBB"=>"\xE9\x81\x9C",		"\x91\xBC"=>"\xE4\xBB\x96",		"\x91\xBD"=>"\xE5\xA4\x9A",		"\x91\xBE"=>"\xE5\xA4\xAA",		"\x91\xBF"=>"\xE6\xB1\xB0",		"\x91\xC0"=>"\xE8\xA9\x91",		"\x91\xC1"=>"\xE5\x94\xBE",		"\x91\xC2"=>"\xE5\xA0\x95",		"\x91\xC3"=>"\xE5\xA6\xA5",		"\x91\xC4"=>"\xE6\x83\xB0",		"\x91\xC5"=>"\xE6\x89\x93",		"\x91\xC6"=>"\xE6\x9F\x81",		"\x91\xC7"=>"\xE8\x88\xB5",		"\x91\xC8"=>"\xE6\xA5\x95",		"\x91\xC9"=>"\xE9\x99\x80",		"\x91\xCA"=>"\xE9\xA7\x84",		"\x91\xCB"=>"\xE9\xA8\xA8",		"\x91\xCC"=>"\xE4\xBD\x93",		"\x91\xCD"=>"\xE5\xA0\x86",		"\x91\xCE"=>"\xE5\xAF\xBE",		"\x91\xCF"=>"\xE8\x80\x90",		"\x91\xD0"=>"\xE5\xB2\xB1",		"\x91\xD1"=>"\xE5\xB8\xAF",		"\x91\xD2"=>"\xE5\xBE\x85",		"\x91\xD3"=>"\xE6\x80\xA0",		"\x91\xD4"=>"\xE6\x85\x8B",		"\x91\xD5"=>"\xE6\x88\xB4",		"\x91\xD6"=>"\xE6\x9B\xBF",		"\x91\xD7"=>"\xE6\xB3\xB0",		"\x91\xD8"=>"\xE6\xBB\x9E",		"\x91\xD9"=>"\xE8\x83\x8E",		"\x91\xDA"=>"\xE8\x85\xBF",		"\x91\xDB"=>"\xE8\x8B\x94",		"\x91\xDC"=>"\xE8\xA2\x8B",		"\x91\xDD"=>"\xE8\xB2\xB8",		"\x91\xDE"=>"\xE9\x80\x80",		"\x91\xDF"=>"\xE9\x80\xAE",		"\x91\xE0"=>"\xE9\x9A\x8A",		"\x91\xE1"=>"\xE9\xBB\x9B",		"\x91\xE2"=>"\xE9\xAF\x9B",		"\x91\xE3"=>"\xE4\xBB\xA3",		"\x91\xE4"=>"\xE5\x8F\xB0",		"\x91\xE5"=>"\xE5\xA4\xA7",		"\x91\xE6"=>"\xE7\xAC\xAC",		"\x91\xE7"=>"\xE9\x86\x8D",		"\x91\xE8"=>"\xE9\xA1\x8C",		"\x91\xE9"=>"\xE9\xB7\xB9",		"\x91\xEA"=>"\xE6\xBB\x9D",		"\x91\xEB"=>"\xE7\x80\xA7",		"\x91\xEC"=>"\xE5\x8D\x93",		"\x91\xED"=>"\xE5\x95\x84",		"\x91\xEE"=>"\xE5\xAE\x85",		"\x91\xEF"=>"\xE6\x89\x98",		"\x91\xF0"=>"\xE6\x8A\x9E",		"\x91\xF1"=>"\xE6\x8B\x93",		"\x91\xF2"=>"\xE6\xB2\xA2",		"\x91\xF3"=>"\xE6\xBF\xAF",		"\x91\xF4"=>"\xE7\x90\xA2",		"\x91\xF5"=>"\xE8\xA8\x97",		"\x91\xF6"=>"\xE9\x90\xB8",		"\x91\xF7"=>"\xE6\xBF\x81",		"\x91\xF8"=>"\xE8\xAB\xBE",		"\x91\xF9"=>"\xE8\x8C\xB8",		"\x91\xFA"=>"\xE5\x87\xA7",		"\x91\xFB"=>"\xE8\x9B\xB8",		"\x91\xFC"=>"\xE5\x8F\xAA",		"\x92\x40"=>"\xE5\x8F\xA9",		"\x92\x41"=>"\xE4\xBD\x86",		"\x92\x42"=>"\xE9\x81\x94",		"\x92\x43"=>"\xE8\xBE\xB0",		"\x92\x44"=>"\xE5\xA5\xAA",		"\x92\x45"=>"\xE8\x84\xB1",		"\x92\x46"=>"\xE5\xB7\xBD",		"\x92\x47"=>"\xE7\xAB\xAA",		"\x92\x48"=>"\xE8\xBE\xBF",		"\x92\x49"=>"\xE6\xA3\x9A",		"\x92\x4A"=>"\xE8\xB0\xB7",		"\x92\x4B"=>"\xE7\x8B\xB8",		"\x92\x4C"=>"\xE9\xB1\x88",		"\x92\x4D"=>"\xE6\xA8\xBD",		"\x92\x4E"=>"\xE8\xAA\xB0",		"\x92\x4F"=>"\xE4\xB8\xB9",		"\x92\x50"=>"\xE5\x8D\x98",		"\x92\x51"=>"\xE5\x98\x86",		"\x92\x52"=>"\xE5\x9D\xA6",		"\x92\x53"=>"\xE6\x8B\x85",		"\x92\x54"=>"\xE6\x8E\xA2",		"\x92\x55"=>"\xE6\x97\xA6",		"\x92\x56"=>"\xE6\xAD\x8E",		"\x92\x57"=>"\xE6\xB7\xA1",		"\x92\x58"=>"\xE6\xB9\x9B",		"\x92\x59"=>"\xE7\x82\xAD",		"\x92\x5A"=>"\xE7\x9F\xAD",		"\x92\x5B"=>"\xE7\xAB\xAF",		"\x92\x5C"=>"\xE7\xAE\xAA",		"\x92\x5D"=>"\xE7\xB6\xBB",		"\x92\x5E"=>"\xE8\x80\xBD",		"\x92\x5F"=>"\xE8\x83\x86",		"\x92\x60"=>"\xE8\x9B\x8B",		"\x92\x61"=>"\xE8\xAA\x95",		"\x92\x62"=>"\xE9\x8D\x9B",		"\x92\x63"=>"\xE5\x9B\xA3",		"\x92\x64"=>"\xE5\xA3\x87",		"\x92\x65"=>"\xE5\xBC\xBE",		"\x92\x66"=>"\xE6\x96\xAD",		"\x92\x67"=>"\xE6\x9A\x96",		"\x92\x68"=>"\xE6\xAA\x80",		"\x92\x69"=>"\xE6\xAE\xB5",		"\x92\x6A"=>"\xE7\x94\xB7",		"\x92\x6B"=>"\xE8\xAB\x87",		"\x92\x6C"=>"\xE5\x80\xA4",		"\x92\x6D"=>"\xE7\x9F\xA5",		"\x92\x6E"=>"\xE5\x9C\xB0",		"\x92\x6F"=>"\xE5\xBC\x9B",		"\x92\x70"=>"\xE6\x81\xA5",		"\x92\x71"=>"\xE6\x99\xBA",		"\x92\x72"=>"\xE6\xB1\xA0",		"\x92\x73"=>"\xE7\x97\xB4",		"\x92\x74"=>"\xE7\xA8\x9A",		"\x92\x75"=>"\xE7\xBD\xAE",		"\x92\x76"=>"\xE8\x87\xB4",		"\x92\x77"=>"\xE8\x9C\x98",		"\x92\x78"=>"\xE9\x81\x85",		"\x92\x79"=>"\xE9\xA6\xB3",		"\x92\x7A"=>"\xE7\xAF\x89",		"\x92\x7B"=>"\xE7\x95\x9C",		"\x92\x7C"=>"\xE7\xAB\xB9",		"\x92\x7D"=>"\xE7\xAD\x91",		"\x92\x7E"=>"\xE8\x93\x84",		"\x92\x80"=>"\xE9\x80\x90",		"\x92\x81"=>"\xE7\xA7\xA9",		"\x92\x82"=>"\xE7\xAA\x92",		"\x92\x83"=>"\xE8\x8C\xB6",		"\x92\x84"=>"\xE5\xAB\xA1",		"\x92\x85"=>"\xE7\x9D\x80",		"\x92\x86"=>"\xE4\xB8\xAD",		"\x92\x87"=>"\xE4\xBB\xB2",		"\x92\x88"=>"\xE5\xAE\x99",		"\x92\x89"=>"\xE5\xBF\xA0",		"\x92\x8A"=>"\xE6\x8A\xBD",		"\x92\x8B"=>"\xE6\x98\xBC",		"\x92\x8C"=>"\xE6\x9F\xB1",		"\x92\x8D"=>"\xE6\xB3\xA8",		"\x92\x8E"=>"\xE8\x99\xAB",		"\x92\x8F"=>"\xE8\xA1\xB7",		"\x92\x90"=>"\xE8\xA8\xBB",		"\x92\x91"=>"\xE9\x85\x8E",		"\x92\x92"=>"\xE9\x8B\xB3",		"\x92\x93"=>"\xE9\xA7\x90",		"\x92\x94"=>"\xE6\xA8\x97",		"\x92\x95"=>"\xE7\x80\xA6",		"\x92\x96"=>"\xE7\x8C\xAA",		"\x92\x97"=>"\xE8\x8B\xA7",		"\x92\x98"=>"\xE8\x91\x97",		"\x92\x99"=>"\xE8\xB2\xAF",		"\x92\x9A"=>"\xE4\xB8\x81",		"\x92\x9B"=>"\xE5\x85\x86",		"\x92\x9C"=>"\xE5\x87\x8B",		"\x92\x9D"=>"\xE5\x96\x8B",		"\x92\x9E"=>"\xE5\xAF\xB5",		"\x92\x9F"=>"\xE5\xB8\x96",		"\x92\xA0"=>"\xE5\xB8\xB3",		"\x92\xA1"=>"\xE5\xBA\x81",		"\x92\xA2"=>"\xE5\xBC\x94",		"\x92\xA3"=>"\xE5\xBC\xB5",		"\x92\xA4"=>"\xE5\xBD\xAB",		"\x92\xA5"=>"\xE5\xBE\xB4",		"\x92\xA6"=>"\xE6\x87\xB2",		"\x92\xA7"=>"\xE6\x8C\x91",		"\x92\xA8"=>"\xE6\x9A\xA2",		"\x92\xA9"=>"\xE6\x9C\x9D",		"\x92\xAA"=>"\xE6\xBD\xAE",		"\x92\xAB"=>"\xE7\x89\x92",		"\x92\xAC"=>"\xE7\x94\xBA",		"\x92\xAD"=>"\xE7\x9C\xBA",		"\x92\xAE"=>"\xE8\x81\xB4",		"\x92\xAF"=>"\xE8\x84\xB9",		"\x92\xB0"=>"\xE8\x85\xB8",		"\x92\xB1"=>"\xE8\x9D\xB6",		"\x92\xB2"=>"\xE8\xAA\xBF",		"\x92\xB3"=>"\xE8\xAB\x9C",		"\x92\xB4"=>"\xE8\xB6\x85",		"\x92\xB5"=>"\xE8\xB7\xB3",		"\x92\xB6"=>"\xE9\x8A\x9A",		"\x92\xB7"=>"\xE9\x95\xB7",		"\x92\xB8"=>"\xE9\xA0\x82",		"\x92\xB9"=>"\xE9\xB3\xA5",		"\x92\xBA"=>"\xE5\x8B\x85",		"\x92\xBB"=>"\xE6\x8D\x97",		"\x92\xBC"=>"\xE7\x9B\xB4",		"\x92\xBD"=>"\xE6\x9C\x95",		"\x92\xBE"=>"\xE6\xB2\x88",		"\x92\xBF"=>"\xE7\x8F\x8D",		"\x92\xC0"=>"\xE8\xB3\x83",		"\x92\xC1"=>"\xE9\x8E\xAE",		"\x92\xC2"=>"\xE9\x99\xB3",		"\x92\xC3"=>"\xE6\xB4\xA5",		"\x92\xC4"=>"\xE5\xA2\x9C",		"\x92\xC5"=>"\xE6\xA4\x8E",		"\x92\xC6"=>"\xE6\xA7\x8C",		"\x92\xC7"=>"\xE8\xBF\xBD",		"\x92\xC8"=>"\xE9\x8E\x9A",		"\x92\xC9"=>"\xE7\x97\x9B",		"\x92\xCA"=>"\xE9\x80\x9A",		"\x92\xCB"=>"\xE5\xA1\x9A",		"\x92\xCC"=>"\xE6\xA0\x82",		"\x92\xCD"=>"\xE6\x8E\xB4",		"\x92\xCE"=>"\xE6\xA7\xBB",		"\x92\xCF"=>"\xE4\xBD\x83",		"\x92\xD0"=>"\xE6\xBC\xAC",		"\x92\xD1"=>"\xE6\x9F\x98",		"\x92\xD2"=>"\xE8\xBE\xBB",		"\x92\xD3"=>"\xE8\x94\xA6",		"\x92\xD4"=>"\xE7\xB6\xB4",		"\x92\xD5"=>"\xE9\x8D\x94",		"\x92\xD6"=>"\xE6\xA4\xBF",		"\x92\xD7"=>"\xE6\xBD\xB0",		"\x92\xD8"=>"\xE5\x9D\xAA",		"\x92\xD9"=>"\xE5\xA3\xB7",		"\x92\xDA"=>"\xE5\xAC\xAC",		"\x92\xDB"=>"\xE7\xB4\xAC",		"\x92\xDC"=>"\xE7\x88\xAA",		"\x92\xDD"=>"\xE5\x90\x8A",		"\x92\xDE"=>"\xE9\x87\xA3",		"\x92\xDF"=>"\xE9\xB6\xB4",		"\x92\xE0"=>"\xE4\xBA\xAD",		"\x92\xE1"=>"\xE4\xBD\x8E",		"\x92\xE2"=>"\xE5\x81\x9C",		"\x92\xE3"=>"\xE5\x81\xB5",		"\x92\xE4"=>"\xE5\x89\x83",		"\x92\xE5"=>"\xE8\xB2\x9E",		"\x92\xE6"=>"\xE5\x91\x88",		"\x92\xE7"=>"\xE5\xA0\xA4",		"\x92\xE8"=>"\xE5\xAE\x9A",		"\x92\xE9"=>"\xE5\xB8\x9D",		"\x92\xEA"=>"\xE5\xBA\x95",		"\x92\xEB"=>"\xE5\xBA\xAD",		"\x92\xEC"=>"\xE5\xBB\xB7",		"\x92\xED"=>"\xE5\xBC\x9F",		"\x92\xEE"=>"\xE6\x82\x8C",		"\x92\xEF"=>"\xE6\x8A\xB5",		"\x92\xF0"=>"\xE6\x8C\xBA",		"\x92\xF1"=>"\xE6\x8F\x90",		"\x92\xF2"=>"\xE6\xA2\xAF",		"\x92\xF3"=>"\xE6\xB1\x80",		"\x92\xF4"=>"\xE7\xA2\x87",		"\x92\xF5"=>"\xE7\xA6\x8E",		"\x92\xF6"=>"\xE7\xA8\x8B",		"\x92\xF7"=>"\xE7\xB7\xA0",		"\x92\xF8"=>"\xE8\x89\x87",		"\x92\xF9"=>"\xE8\xA8\x82",		"\x92\xFA"=>"\xE8\xAB\xA6",		"\x92\xFB"=>"\xE8\xB9\x84",		"\x92\xFC"=>"\xE9\x80\x93",		"\x93\x40"=>"\xE9\x82\xB8",		"\x93\x41"=>"\xE9\x84\xAD",		"\x93\x42"=>"\xE9\x87\x98",		"\x93\x43"=>"\xE9\xBC\x8E",		"\x93\x44"=>"\xE6\xB3\xA5",		"\x93\x45"=>"\xE6\x91\x98",		"\x93\x46"=>"\xE6\x93\xA2",		"\x93\x47"=>"\xE6\x95\xB5",		"\x93\x48"=>"\xE6\xBB\xB4",		"\x93\x49"=>"\xE7\x9A\x84",		"\x93\x4A"=>"\xE7\xAC\x9B",		"\x93\x4B"=>"\xE9\x81\xA9",		"\x93\x4C"=>"\xE9\x8F\x91",		"\x93\x4D"=>"\xE6\xBA\xBA",		"\x93\x4E"=>"\xE5\x93\xB2",		"\x93\x4F"=>"\xE5\xBE\xB9",		"\x93\x50"=>"\xE6\x92\xA4",		"\x93\x51"=>"\xE8\xBD\x8D",		"\x93\x52"=>"\xE8\xBF\xAD",		"\x93\x53"=>"\xE9\x89\x84",		"\x93\x54"=>"\xE5\x85\xB8",		"\x93\x55"=>"\xE5\xA1\xAB",		"\x93\x56"=>"\xE5\xA4\xA9",		"\x93\x57"=>"\xE5\xB1\x95",		"\x93\x58"=>"\xE5\xBA\x97",		"\x93\x59"=>"\xE6\xB7\xBB",		"\x93\x5A"=>"\xE7\xBA\x8F",		"\x93\x5B"=>"\xE7\x94\x9C",		"\x93\x5C"=>"\xE8\xB2\xBC",		"\x93\x5D"=>"\xE8\xBB\xA2",		"\x93\x5E"=>"\xE9\xA1\x9B",		"\x93\x5F"=>"\xE7\x82\xB9",		"\x93\x60"=>"\xE4\xBC\x9D",		"\x93\x61"=>"\xE6\xAE\xBF",		"\x93\x62"=>"\xE6\xBE\xB1",		"\x93\x63"=>"\xE7\x94\xB0",		"\x93\x64"=>"\xE9\x9B\xBB",		"\x93\x65"=>"\xE5\x85\x8E",		"\x93\x66"=>"\xE5\x90\x90",		"\x93\x67"=>"\xE5\xA0\xB5",		"\x93\x68"=>"\xE5\xA1\x97",		"\x93\x69"=>"\xE5\xA6\xAC",		"\x93\x6A"=>"\xE5\xB1\xA0",		"\x93\x6B"=>"\xE5\xBE\x92",		"\x93\x6C"=>"\xE6\x96\x97",		"\x93\x6D"=>"\xE6\x9D\x9C",		"\x93\x6E"=>"\xE6\xB8\xA1",		"\x93\x6F"=>"\xE7\x99\xBB",		"\x93\x70"=>"\xE8\x8F\x9F",		"\x93\x71"=>"\xE8\xB3\xAD",		"\x93\x72"=>"\xE9\x80\x94",		"\x93\x73"=>"\xE9\x83\xBD",		"\x93\x74"=>"\xE9\x8D\x8D",		"\x93\x75"=>"\xE7\xA0\xA5",		"\x93\x76"=>"\xE7\xA0\xBA",		"\x93\x77"=>"\xE5\x8A\xAA",		"\x93\x78"=>"\xE5\xBA\xA6",		"\x93\x79"=>"\xE5\x9C\x9F",		"\x93\x7A"=>"\xE5\xA5\xB4",		"\x93\x7B"=>"\xE6\x80\x92",		"\x93\x7C"=>"\xE5\x80\x92",		"\x93\x7D"=>"\xE5\x85\x9A",		"\x93\x7E"=>"\xE5\x86\xAC",		"\x93\x80"=>"\xE5\x87\x8D",		"\x93\x81"=>"\xE5\x88\x80",		"\x93\x82"=>"\xE5\x94\x90",		"\x93\x83"=>"\xE5\xA1\x94",		"\x93\x84"=>"\xE5\xA1\x98",		"\x93\x85"=>"\xE5\xA5\x97",		"\x93\x86"=>"\xE5\xAE\x95",		"\x93\x87"=>"\xE5\xB3\xB6",		"\x93\x88"=>"\xE5\xB6\x8B",		"\x93\x89"=>"\xE6\x82\xBC",		"\x93\x8A"=>"\xE6\x8A\x95",		"\x93\x8B"=>"\xE6\x90\xAD",		"\x93\x8C"=>"\xE6\x9D\xB1",		"\x93\x8D"=>"\xE6\xA1\x83",		"\x93\x8E"=>"\xE6\xA2\xBC",		"\x93\x8F"=>"\xE6\xA3\x9F",		"\x93\x90"=>"\xE7\x9B\x97",		"\x93\x91"=>"\xE6\xB7\x98",		"\x93\x92"=>"\xE6\xB9\xAF",		"\x93\x93"=>"\xE6\xB6\x9B",		"\x93\x94"=>"\xE7\x81\xAF",		"\x93\x95"=>"\xE7\x87\x88",		"\x93\x96"=>"\xE5\xBD\x93",		"\x93\x97"=>"\xE7\x97\x98",		"\x93\x98"=>"\xE7\xA5\xB7",		"\x93\x99"=>"\xE7\xAD\x89",		"\x93\x9A"=>"\xE7\xAD\x94",		"\x93\x9B"=>"\xE7\xAD\x92",		"\x93\x9C"=>"\xE7\xB3\x96",		"\x93\x9D"=>"\xE7\xB5\xB1",		"\x93\x9E"=>"\xE5\x88\xB0",		"\x93\x9F"=>"\xE8\x91\xA3",		"\x93\xA0"=>"\xE8\x95\xA9",		"\x93\xA1"=>"\xE8\x97\xA4",		"\x93\xA2"=>"\xE8\xA8\x8E",		"\x93\xA3"=>"\xE8\xAC\x84",		"\x93\xA4"=>"\xE8\xB1\x86",		"\x93\xA5"=>"\xE8\xB8\x8F",		"\x93\xA6"=>"\xE9\x80\x83",		"\x93\xA7"=>"\xE9\x80\x8F",		"\x93\xA8"=>"\xE9\x90\x99",		"\x93\xA9"=>"\xE9\x99\xB6",		"\x93\xAA"=>"\xE9\xA0\xAD",		"\x93\xAB"=>"\xE9\xA8\xB0",		"\x93\xAC"=>"\xE9\x97\x98",		"\x93\xAD"=>"\xE5\x83\x8D",		"\x93\xAE"=>"\xE5\x8B\x95",		"\x93\xAF"=>"\xE5\x90\x8C",		"\x93\xB0"=>"\xE5\xA0\x82",		"\x93\xB1"=>"\xE5\xB0\x8E",		"\x93\xB2"=>"\xE6\x86\xA7",		"\x93\xB3"=>"\xE6\x92\x9E",		"\x93\xB4"=>"\xE6\xB4\x9E",		"\x93\xB5"=>"\xE7\x9E\xB3",		"\x93\xB6"=>"\xE7\xAB\xA5",		"\x93\xB7"=>"\xE8\x83\xB4",		"\x93\xB8"=>"\xE8\x90\x84",		"\x93\xB9"=>"\xE9\x81\x93",		"\x93\xBA"=>"\xE9\x8A\x85",		"\x93\xBB"=>"\xE5\xB3\xA0",		"\x93\xBC"=>"\xE9\xB4\x87",		"\x93\xBD"=>"\xE5\x8C\xBF",		"\x93\xBE"=>"\xE5\xBE\x97",		"\x93\xBF"=>"\xE5\xBE\xB3",		"\x93\xC0"=>"\xE6\xB6\x9C",		"\x93\xC1"=>"\xE7\x89\xB9",		"\x93\xC2"=>"\xE7\x9D\xA3",		"\x93\xC3"=>"\xE7\xA6\xBF",		"\x93\xC4"=>"\xE7\xAF\xA4",		"\x93\xC5"=>"\xE6\xAF\x92",		"\x93\xC6"=>"\xE7\x8B\xAC",		"\x93\xC7"=>"\xE8\xAA\xAD",		"\x93\xC8"=>"\xE6\xA0\x83",		"\x93\xC9"=>"\xE6\xA9\xA1",		"\x93\xCA"=>"\xE5\x87\xB8",		"\x93\xCB"=>"\xE7\xAA\x81",		"\x93\xCC"=>"\xE6\xA4\xB4",		"\x93\xCD"=>"\xE5\xB1\x8A",		"\x93\xCE"=>"\xE9\xB3\xB6",		"\x93\xCF"=>"\xE8\x8B\xAB",		"\x93\xD0"=>"\xE5\xAF\x85",		"\x93\xD1"=>"\xE9\x85\x89",		"\x93\xD2"=>"\xE7\x80\x9E",		"\x93\xD3"=>"\xE5\x99\xB8",		"\x93\xD4"=>"\xE5\xB1\xAF",		"\x93\xD5"=>"\xE6\x83\x87",		"\x93\xD6"=>"\xE6\x95\xA6",		"\x93\xD7"=>"\xE6\xB2\x8C",		"\x93\xD8"=>"\xE8\xB1\x9A",		"\x93\xD9"=>"\xE9\x81\x81",		"\x93\xDA"=>"\xE9\xA0\x93",		"\x93\xDB"=>"\xE5\x91\x91",		"\x93\xDC"=>"\xE6\x9B\x87",		"\x93\xDD"=>"\xE9\x88\x8D",		"\x93\xDE"=>"\xE5\xA5\x88",		"\x93\xDF"=>"\xE9\x82\xA3",		"\x93\xE0"=>"\xE5\x86\x85",		"\x93\xE1"=>"\xE4\xB9\x8D",		"\x93\xE2"=>"\xE5\x87\xAA",		"\x93\xE3"=>"\xE8\x96\x99",		"\x93\xE4"=>"\xE8\xAC\x8E",		"\x93\xE5"=>"\xE7\x81\x98",		"\x93\xE6"=>"\xE6\x8D\xBA",		"\x93\xE7"=>"\xE9\x8D\x8B",		"\x93\xE8"=>"\xE6\xA5\xA2",		"\x93\xE9"=>"\xE9\xA6\xB4",		"\x93\xEA"=>"\xE7\xB8\x84",		"\x93\xEB"=>"\xE7\x95\xB7",		"\x93\xEC"=>"\xE5\x8D\x97",		"\x93\xED"=>"\xE6\xA5\xA0",		"\x93\xEE"=>"\xE8\xBB\x9F",		"\x93\xEF"=>"\xE9\x9B\xA3",		"\x93\xF0"=>"\xE6\xB1\x9D",		"\x93\xF1"=>"\xE4\xBA\x8C",		"\x93\xF2"=>"\xE5\xB0\xBC",		"\x93\xF3"=>"\xE5\xBC\x90",		"\x93\xF4"=>"\xE8\xBF\xA9",		"\x93\xF5"=>"\xE5\x8C\x82",		"\x93\xF6"=>"\xE8\xB3\x91",		"\x93\xF7"=>"\xE8\x82\x89",		"\x93\xF8"=>"\xE8\x99\xB9",		"\x93\xF9"=>"\xE5\xBB\xBF",		"\x93\xFA"=>"\xE6\x97\xA5",		"\x93\xFB"=>"\xE4\xB9\xB3",		"\x93\xFC"=>"\xE5\x85\xA5",		"\x94\x40"=>"\xE5\xA6\x82",		"\x94\x41"=>"\xE5\xB0\xBF",		"\x94\x42"=>"\xE9\x9F\xAE",		"\x94\x43"=>"\xE4\xBB\xBB",		"\x94\x44"=>"\xE5\xA6\x8A",		"\x94\x45"=>"\xE5\xBF\x8D",		"\x94\x46"=>"\xE8\xAA\x8D",		"\x94\x47"=>"\xE6\xBF\xA1",		"\x94\x48"=>"\xE7\xA6\xB0",		"\x94\x49"=>"\xE7\xA5\xA2",		"\x94\x4A"=>"\xE5\xAF\xA7",		"\x94\x4B"=>"\xE8\x91\xB1",		"\x94\x4C"=>"\xE7\x8C\xAB",		"\x94\x4D"=>"\xE7\x86\xB1",		"\x94\x4E"=>"\xE5\xB9\xB4",		"\x94\x4F"=>"\xE5\xBF\xB5",		"\x94\x50"=>"\xE6\x8D\xBB",		"\x94\x51"=>"\xE6\x92\x9A",		"\x94\x52"=>"\xE7\x87\x83",		"\x94\x53"=>"\xE7\xB2\x98",		"\x94\x54"=>"\xE4\xB9\x83",		"\x94\x55"=>"\xE5\xBB\xBC",		"\x94\x56"=>"\xE4\xB9\x8B",		"\x94\x57"=>"\xE5\x9F\x9C",		"\x94\x58"=>"\xE5\x9A\xA2",		"\x94\x59"=>"\xE6\x82\xA9",		"\x94\x5A"=>"\xE6\xBF\x83",		"\x94\x5B"=>"\xE7\xB4\x8D",		"\x94\x5C"=>"\xE8\x83\xBD",		"\x94\x5D"=>"\xE8\x84\xB3",		"\x94\x5E"=>"\xE8\x86\xBF",		"\x94\x5F"=>"\xE8\xBE\xB2",		"\x94\x60"=>"\xE8\xA6\x97",		"\x94\x61"=>"\xE8\x9A\xA4",		"\x94\x62"=>"\xE5\xB7\xB4",		"\x94\x63"=>"\xE6\x8A\x8A",		"\x94\x64"=>"\xE6\x92\xAD",		"\x94\x65"=>"\xE8\xA6\x87",		"\x94\x66"=>"\xE6\x9D\xB7",		"\x94\x67"=>"\xE6\xB3\xA2",		"\x94\x68"=>"\xE6\xB4\xBE",		"\x94\x69"=>"\xE7\x90\xB6",		"\x94\x6A"=>"\xE7\xA0\xB4",		"\x94\x6B"=>"\xE5\xA9\x86",		"\x94\x6C"=>"\xE7\xBD\xB5",		"\x94\x6D"=>"\xE8\x8A\xAD",		"\x94\x6E"=>"\xE9\xA6\xAC",		"\x94\x6F"=>"\xE4\xBF\xB3",		"\x94\x70"=>"\xE5\xBB\x83",		"\x94\x71"=>"\xE6\x8B\x9D",		"\x94\x72"=>"\xE6\x8E\x92",		"\x94\x73"=>"\xE6\x95\x97",		"\x94\x74"=>"\xE6\x9D\xAF",		"\x94\x75"=>"\xE7\x9B\x83",		"\x94\x76"=>"\xE7\x89\x8C",		"\x94\x77"=>"\xE8\x83\x8C",		"\x94\x78"=>"\xE8\x82\xBA",		"\x94\x79"=>"\xE8\xBC\xA9",		"\x94\x7A"=>"\xE9\x85\x8D",		"\x94\x7B"=>"\xE5\x80\x8D",		"\x94\x7C"=>"\xE5\x9F\xB9",		"\x94\x7D"=>"\xE5\xAA\x92",		"\x94\x7E"=>"\xE6\xA2\x85",		"\x94\x80"=>"\xE6\xA5\xB3",		"\x94\x81"=>"\xE7\x85\xA4",		"\x94\x82"=>"\xE7\x8B\xBD",		"\x94\x83"=>"\xE8\xB2\xB7",		"\x94\x84"=>"\xE5\xA3\xB2",		"\x94\x85"=>"\xE8\xB3\xA0",		"\x94\x86"=>"\xE9\x99\xAA",		"\x94\x87"=>"\xE9\x80\x99",		"\x94\x88"=>"\xE8\x9D\xBF",		"\x94\x89"=>"\xE7\xA7\xA4",		"\x94\x8A"=>"\xE7\x9F\xA7",		"\x94\x8B"=>"\xE8\x90\xA9",		"\x94\x8C"=>"\xE4\xBC\xAF",		"\x94\x8D"=>"\xE5\x89\xA5",		"\x94\x8E"=>"\xE5\x8D\x9A",		"\x94\x8F"=>"\xE6\x8B\x8D",		"\x94\x90"=>"\xE6\x9F\x8F",		"\x94\x91"=>"\xE6\xB3\x8A",		"\x94\x92"=>"\xE7\x99\xBD",		"\x94\x93"=>"\xE7\xAE\x94",		"\x94\x94"=>"\xE7\xB2\x95",		"\x94\x95"=>"\xE8\x88\xB6",		"\x94\x96"=>"\xE8\x96\x84",		"\x94\x97"=>"\xE8\xBF\xAB",		"\x94\x98"=>"\xE6\x9B\x9D",		"\x94\x99"=>"\xE6\xBC\xA0",		"\x94\x9A"=>"\xE7\x88\x86",		"\x94\x9B"=>"\xE7\xB8\x9B",		"\x94\x9C"=>"\xE8\x8E\xAB",		"\x94\x9D"=>"\xE9\xA7\x81",		"\x94\x9E"=>"\xE9\xBA\xA6",		"\x94\x9F"=>"\xE5\x87\xBD",		"\x94\xA0"=>"\xE7\xAE\xB1",		"\x94\xA1"=>"\xE7\xA1\xB2",		"\x94\xA2"=>"\xE7\xAE\xB8",		"\x94\xA3"=>"\xE8\x82\x87",		"\x94\xA4"=>"\xE7\xAD\x88",		"\x94\xA5"=>"\xE6\xAB\xA8",		"\x94\xA6"=>"\xE5\xB9\xA1",		"\x94\xA7"=>"\xE8\x82\x8C",		"\x94\xA8"=>"\xE7\x95\x91",		"\x94\xA9"=>"\xE7\x95\xA0",		"\x94\xAA"=>"\xE5\x85\xAB",		"\x94\xAB"=>"\xE9\x89\xA2",		"\x94\xAC"=>"\xE6\xBA\x8C",		"\x94\xAD"=>"\xE7\x99\xBA",		"\x94\xAE"=>"\xE9\x86\x97",		"\x94\xAF"=>"\xE9\xAB\xAA",		"\x94\xB0"=>"\xE4\xBC\x90",		"\x94\xB1"=>"\xE7\xBD\xB0",		"\x94\xB2"=>"\xE6\x8A\x9C",		"\x94\xB3"=>"\xE7\xAD\x8F",		"\x94\xB4"=>"\xE9\x96\xA5",		"\x94\xB5"=>"\xE9\xB3\xA9",		"\x94\xB6"=>"\xE5\x99\xBA",		"\x94\xB7"=>"\xE5\xA1\x99",		"\x94\xB8"=>"\xE8\x9B\xA4",		"\x94\xB9"=>"\xE9\x9A\xBC",		"\x94\xBA"=>"\xE4\xBC\xB4",		"\x94\xBB"=>"\xE5\x88\xA4",		"\x94\xBC"=>"\xE5\x8D\x8A",		"\x94\xBD"=>"\xE5\x8F\x8D",		"\x94\xBE"=>"\xE5\x8F\x9B",		"\x94\xBF"=>"\xE5\xB8\x86",		"\x94\xC0"=>"\xE6\x90\xAC",		"\x94\xC1"=>"\xE6\x96\x91",		"\x94\xC2"=>"\xE6\x9D\xBF",		"\x94\xC3"=>"\xE6\xB0\xBE",		"\x94\xC4"=>"\xE6\xB1\x8E",		"\x94\xC5"=>"\xE7\x89\x88",		"\x94\xC6"=>"\xE7\x8A\xAF",		"\x94\xC7"=>"\xE7\x8F\xAD",		"\x94\xC8"=>"\xE7\x95\x94",		"\x94\xC9"=>"\xE7\xB9\x81",		"\x94\xCA"=>"\xE8\x88\xAC",		"\x94\xCB"=>"\xE8\x97\xA9",		"\x94\xCC"=>"\xE8\xB2\xA9",		"\x94\xCD"=>"\xE7\xAF\x84",		"\x94\xCE"=>"\xE9\x87\x86",		"\x94\xCF"=>"\xE7\x85\xA9",		"\x94\xD0"=>"\xE9\xA0\x92",		"\x94\xD1"=>"\xE9\xA3\xAF",		"\x94\xD2"=>"\xE6\x8C\xBD",		"\x94\xD3"=>"\xE6\x99\xA9",		"\x94\xD4"=>"\xE7\x95\xAA",		"\x94\xD5"=>"\xE7\x9B\xA4",		"\x94\xD6"=>"\xE7\xA3\x90",		"\x94\xD7"=>"\xE8\x95\x83",		"\x94\xD8"=>"\xE8\x9B\xAE",		"\x94\xD9"=>"\xE5\x8C\xAA",		"\x94\xDA"=>"\xE5\x8D\x91",		"\x94\xDB"=>"\xE5\x90\xA6",		"\x94\xDC"=>"\xE5\xA6\x83",		"\x94\xDD"=>"\xE5\xBA\x87",		"\x94\xDE"=>"\xE5\xBD\xBC",		"\x94\xDF"=>"\xE6\x82\xB2",		"\x94\xE0"=>"\xE6\x89\x89",		"\x94\xE1"=>"\xE6\x89\xB9",		"\x94\xE2"=>"\xE6\x8A\xAB",		"\x94\xE3"=>"\xE6\x96\x90",		"\x94\xE4"=>"\xE6\xAF\x94",		"\x94\xE5"=>"\xE6\xB3\x8C",		"\x94\xE6"=>"\xE7\x96\xB2",		"\x94\xE7"=>"\xE7\x9A\xAE",		"\x94\xE8"=>"\xE7\xA2\x91",		"\x94\xE9"=>"\xE7\xA7\x98",		"\x94\xEA"=>"\xE7\xB7\x8B",		"\x94\xEB"=>"\xE7\xBD\xB7",		"\x94\xEC"=>"\xE8\x82\xA5",		"\x94\xED"=>"\xE8\xA2\xAB",		"\x94\xEE"=>"\xE8\xAA\xB9",		"\x94\xEF"=>"\xE8\xB2\xBB",		"\x94\xF0"=>"\xE9\x81\xBF",		"\x94\xF1"=>"\xE9\x9D\x9E",		"\x94\xF2"=>"\xE9\xA3\x9B",		"\x94\xF3"=>"\xE6\xA8\x8B",		"\x94\xF4"=>"\xE7\xB0\xB8",		"\x94\xF5"=>"\xE5\x82\x99",		"\x94\xF6"=>"\xE5\xB0\xBE",		"\x94\xF7"=>"\xE5\xBE\xAE",		"\x94\xF8"=>"\xE6\x9E\x87",		"\x94\xF9"=>"\xE6\xAF\x98",		"\x94\xFA"=>"\xE7\x90\xB5",		"\x94\xFB"=>"\xE7\x9C\x89",		"\x94\xFC"=>"\xE7\xBE\x8E",		"\x95\x40"=>"\xE9\xBC\xBB",		"\x95\x41"=>"\xE6\x9F\x8A",		"\x95\x42"=>"\xE7\xA8\x97",		"\x95\x43"=>"\xE5\x8C\xB9",		"\x95\x44"=>"\xE7\x96\x8B",		"\x95\x45"=>"\xE9\xAB\xAD",		"\x95\x46"=>"\xE5\xBD\xA6",		"\x95\x47"=>"\xE8\x86\x9D",		"\x95\x48"=>"\xE8\x8F\xB1",		"\x95\x49"=>"\xE8\x82\x98",		"\x95\x4A"=>"\xE5\xBC\xBC",		"\x95\x4B"=>"\xE5\xBF\x85",		"\x95\x4C"=>"\xE7\x95\xA2",		"\x95\x4D"=>"\xE7\xAD\x86",		"\x95\x4E"=>"\xE9\x80\xBC",		"\x95\x4F"=>"\xE6\xA1\xA7",		"\x95\x50"=>"\xE5\xA7\xAB",		"\x95\x51"=>"\xE5\xAA\x9B",		"\x95\x52"=>"\xE7\xB4\x90",		"\x95\x53"=>"\xE7\x99\xBE",		"\x95\x54"=>"\xE8\xAC\xAC",		"\x95\x55"=>"\xE4\xBF\xB5",		"\x95\x56"=>"\xE5\xBD\xAA",		"\x95\x57"=>"\xE6\xA8\x99",		"\x95\x58"=>"\xE6\xB0\xB7",		"\x95\x59"=>"\xE6\xBC\x82",		"\x95\x5A"=>"\xE7\x93\xA2",		"\x95\x5B"=>"\xE7\xA5\xA8",		"\x95\x5C"=>"\xE8\xA1\xA8",		"\x95\x5D"=>"\xE8\xA9\x95",		"\x95\x5E"=>"\xE8\xB1\xB9",		"\x95\x5F"=>"\xE5\xBB\x9F",		"\x95\x60"=>"\xE6\x8F\x8F",		"\x95\x61"=>"\xE7\x97\x85",		"\x95\x62"=>"\xE7\xA7\x92",		"\x95\x63"=>"\xE8\x8B\x97",		"\x95\x64"=>"\xE9\x8C\xA8",		"\x95\x65"=>"\xE9\x8B\xB2",		"\x95\x66"=>"\xE8\x92\x9C",		"\x95\x67"=>"\xE8\x9B\xAD",		"\x95\x68"=>"\xE9\xB0\xAD",		"\x95\x69"=>"\xE5\x93\x81",		"\x95\x6A"=>"\xE5\xBD\xAC",		"\x95\x6B"=>"\xE6\x96\x8C",		"\x95\x6C"=>"\xE6\xB5\x9C",		"\x95\x6D"=>"\xE7\x80\x95",		"\x95\x6E"=>"\xE8\xB2\xA7",		"\x95\x6F"=>"\xE8\xB3\x93",		"\x95\x70"=>"\xE9\xA0\xBB",		"\x95\x71"=>"\xE6\x95\x8F",		"\x95\x72"=>"\xE7\x93\xB6",		"\x95\x73"=>"\xE4\xB8\x8D",		"\x95\x74"=>"\xE4\xBB\x98",		"\x95\x75"=>"\xE5\x9F\xA0",		"\x95\x76"=>"\xE5\xA4\xAB",		"\x95\x77"=>"\xE5\xA9\xA6",		"\x95\x78"=>"\xE5\xAF\x8C",		"\x95\x79"=>"\xE5\x86\xA8",		"\x95\x7A"=>"\xE5\xB8\x83",		"\x95\x7B"=>"\xE5\xBA\x9C",		"\x95\x7C"=>"\xE6\x80\x96",		"\x95\x7D"=>"\xE6\x89\xB6",		"\x95\x7E"=>"\xE6\x95\xB7",		"\x95\x80"=>"\xE6\x96\xA7",		"\x95\x81"=>"\xE6\x99\xAE",		"\x95\x82"=>"\xE6\xB5\xAE",		"\x95\x83"=>"\xE7\x88\xB6",		"\x95\x84"=>"\xE7\xAC\xA6",		"\x95\x85"=>"\xE8\x85\x90",		"\x95\x86"=>"\xE8\x86\x9A",		"\x95\x87"=>"\xE8\x8A\x99",		"\x95\x88"=>"\xE8\xAD\x9C",		"\x95\x89"=>"\xE8\xB2\xA0",		"\x95\x8A"=>"\xE8\xB3\xA6",		"\x95\x8B"=>"\xE8\xB5\xB4",		"\x95\x8C"=>"\xE9\x98\x9C",		"\x95\x8D"=>"\xE9\x99\x84",		"\x95\x8E"=>"\xE4\xBE\xAE",		"\x95\x8F"=>"\xE6\x92\xAB",		"\x95\x90"=>"\xE6\xAD\xA6",		"\x95\x91"=>"\xE8\x88\x9E",		"\x95\x92"=>"\xE8\x91\xA1",		"\x95\x93"=>"\xE8\x95\xAA",		"\x95\x94"=>"\xE9\x83\xA8",		"\x95\x95"=>"\xE5\xB0\x81",		"\x95\x96"=>"\xE6\xA5\x93",		"\x95\x97"=>"\xE9\xA2\xA8",		"\x95\x98"=>"\xE8\x91\xBA",		"\x95\x99"=>"\xE8\x95\x97",		"\x95\x9A"=>"\xE4\xBC\x8F",		"\x95\x9B"=>"\xE5\x89\xAF",		"\x95\x9C"=>"\xE5\xBE\xA9",		"\x95\x9D"=>"\xE5\xB9\x85",		"\x95\x9E"=>"\xE6\x9C\x8D",		"\x95\x9F"=>"\xE7\xA6\x8F",		"\x95\xA0"=>"\xE8\x85\xB9",		"\x95\xA1"=>"\xE8\xA4\x87",		"\x95\xA2"=>"\xE8\xA6\x86",		"\x95\xA3"=>"\xE6\xB7\xB5",		"\x95\xA4"=>"\xE5\xBC\x97",		"\x95\xA5"=>"\xE6\x89\x95",		"\x95\xA6"=>"\xE6\xB2\xB8",		"\x95\xA7"=>"\xE4\xBB\x8F",		"\x95\xA8"=>"\xE7\x89\xA9",		"\x95\xA9"=>"\xE9\xAE\x92",		"\x95\xAA"=>"\xE5\x88\x86",		"\x95\xAB"=>"\xE5\x90\xBB",		"\x95\xAC"=>"\xE5\x99\xB4",		"\x95\xAD"=>"\xE5\xA2\xB3",		"\x95\xAE"=>"\xE6\x86\xA4",		"\x95\xAF"=>"\xE6\x89\xAE",		"\x95\xB0"=>"\xE7\x84\x9A",		"\x95\xB1"=>"\xE5\xA5\xAE",		"\x95\xB2"=>"\xE7\xB2\x89",		"\x95\xB3"=>"\xE7\xB3\x9E",		"\x95\xB4"=>"\xE7\xB4\x9B",		"\x95\xB5"=>"\xE9\x9B\xB0",		"\x95\xB6"=>"\xE6\x96\x87",		"\x95\xB7"=>"\xE8\x81\x9E",		"\x95\xB8"=>"\xE4\xB8\x99",		"\x95\xB9"=>"\xE4\xBD\xB5",		"\x95\xBA"=>"\xE5\x85\xB5",		"\x95\xBB"=>"\xE5\xA1\x80",		"\x95\xBC"=>"\xE5\xB9\xA3",		"\x95\xBD"=>"\xE5\xB9\xB3",		"\x95\xBE"=>"\xE5\xBC\x8A",		"\x95\xBF"=>"\xE6\x9F\x84",		"\x95\xC0"=>"\xE4\xB8\xA6",		"\x95\xC1"=>"\xE8\x94\xBD",		"\x95\xC2"=>"\xE9\x96\x89",		"\x95\xC3"=>"\xE9\x99\x9B",		"\x95\xC4"=>"\xE7\xB1\xB3",		"\x95\xC5"=>"\xE9\xA0\x81",		"\x95\xC6"=>"\xE5\x83\xBB",		"\x95\xC7"=>"\xE5\xA3\x81",		"\x95\xC8"=>"\xE7\x99\x96",		"\x95\xC9"=>"\xE7\xA2\xA7",		"\x95\xCA"=>"\xE5\x88\xA5",		"\x95\xCB"=>"\xE7\x9E\xA5",		"\x95\xCC"=>"\xE8\x94\x91",		"\x95\xCD"=>"\xE7\xAE\x86",		"\x95\xCE"=>"\xE5\x81\x8F",		"\x95\xCF"=>"\xE5\xA4\x89",		"\x95\xD0"=>"\xE7\x89\x87",		"\x95\xD1"=>"\xE7\xAF\x87",		"\x95\xD2"=>"\xE7\xB7\xA8",		"\x95\xD3"=>"\xE8\xBE\xBA",		"\x95\xD4"=>"\xE8\xBF\x94",		"\x95\xD5"=>"\xE9\x81\x8D",		"\x95\xD6"=>"\xE4\xBE\xBF",		"\x95\xD7"=>"\xE5\x8B\x89",		"\x95\xD8"=>"\xE5\xA8\xA9",		"\x95\xD9"=>"\xE5\xBC\x81",		"\x95\xDA"=>"\xE9\x9E\xAD",		"\x95\xDB"=>"\xE4\xBF\x9D",		"\x95\xDC"=>"\xE8\x88\x97",		"\x95\xDD"=>"\xE9\x8B\xAA",		"\x95\xDE"=>"\xE5\x9C\x83",		"\x95\xDF"=>"\xE6\x8D\x95",		"\x95\xE0"=>"\xE6\xAD\xA9",		"\x95\xE1"=>"\xE7\x94\xAB",		"\x95\xE2"=>"\xE8\xA3\x9C",		"\x95\xE3"=>"\xE8\xBC\x94",		"\x95\xE4"=>"\xE7\xA9\x82",		"\x95\xE5"=>"\xE5\x8B\x9F",		"\x95\xE6"=>"\xE5\xA2\x93",		"\x95\xE7"=>"\xE6\x85\x95",		"\x95\xE8"=>"\xE6\x88\x8A",		"\x95\xE9"=>"\xE6\x9A\xAE",		"\x95\xEA"=>"\xE6\xAF\x8D",		"\x95\xEB"=>"\xE7\xB0\xBF",		"\x95\xEC"=>"\xE8\x8F\xA9",		"\x95\xED"=>"\xE5\x80\xA3",		"\x95\xEE"=>"\xE4\xBF\xB8",		"\x95\xEF"=>"\xE5\x8C\x85",		"\x95\xF0"=>"\xE5\x91\x86",		"\x95\xF1"=>"\xE5\xA0\xB1",		"\x95\xF2"=>"\xE5\xA5\x89",		"\x95\xF3"=>"\xE5\xAE\x9D",		"\x95\xF4"=>"\xE5\xB3\xB0",		"\x95\xF5"=>"\xE5\xB3\xAF",		"\x95\xF6"=>"\xE5\xB4\xA9",		"\x95\xF7"=>"\xE5\xBA\x96",		"\x95\xF8"=>"\xE6\x8A\xB1",		"\x95\xF9"=>"\xE6\x8D\xA7",		"\x95\xFA"=>"\xE6\x94\xBE",		"\x95\xFB"=>"\xE6\x96\xB9",		"\x95\xFC"=>"\xE6\x9C\x8B",		"\x96\x40"=>"\xE6\xB3\x95",		"\x96\x41"=>"\xE6\xB3\xA1",		"\x96\x42"=>"\xE7\x83\xB9",		"\x96\x43"=>"\xE7\xA0\xB2",		"\x96\x44"=>"\xE7\xB8\xAB",		"\x96\x45"=>"\xE8\x83\x9E",		"\x96\x46"=>"\xE8\x8A\xB3",		"\x96\x47"=>"\xE8\x90\x8C",		"\x96\x48"=>"\xE8\x93\xAC",		"\x96\x49"=>"\xE8\x9C\x82",		"\x96\x4A"=>"\xE8\xA4\x92",		"\x96\x4B"=>"\xE8\xA8\xAA",		"\x96\x4C"=>"\xE8\xB1\x8A",		"\x96\x4D"=>"\xE9\x82\xA6",		"\x96\x4E"=>"\xE9\x8B\x92",		"\x96\x4F"=>"\xE9\xA3\xBD",		"\x96\x50"=>"\xE9\xB3\xB3",		"\x96\x51"=>"\xE9\xB5\xAC",		"\x96\x52"=>"\xE4\xB9\x8F",		"\x96\x53"=>"\xE4\xBA\xA1",		"\x96\x54"=>"\xE5\x82\x8D",		"\x96\x55"=>"\xE5\x89\x96",		"\x96\x56"=>"\xE5\x9D\x8A",		"\x96\x57"=>"\xE5\xA6\xA8",		"\x96\x58"=>"\xE5\xB8\xBD",		"\x96\x59"=>"\xE5\xBF\x98",		"\x96\x5A"=>"\xE5\xBF\x99",		"\x96\x5B"=>"\xE6\x88\xBF",		"\x96\x5C"=>"\xE6\x9A\xB4",		"\x96\x5D"=>"\xE6\x9C\x9B",		"\x96\x5E"=>"\xE6\x9F\x90",		"\x96\x5F"=>"\xE6\xA3\x92",		"\x96\x60"=>"\xE5\x86\x92",		"\x96\x61"=>"\xE7\xB4\xA1",		"\x96\x62"=>"\xE8\x82\xAA",		"\x96\x63"=>"\xE8\x86\xA8",		"\x96\x64"=>"\xE8\xAC\x80",		"\x96\x65"=>"\xE8\xB2\x8C",		"\x96\x66"=>"\xE8\xB2\xBF",		"\x96\x67"=>"\xE9\x89\xBE",		"\x96\x68"=>"\xE9\x98\xB2",		"\x96\x69"=>"\xE5\x90\xA0",		"\x96\x6A"=>"\xE9\xA0\xAC",		"\x96\x6B"=>"\xE5\x8C\x97",		"\x96\x6C"=>"\xE5\x83\x95",		"\x96\x6D"=>"\xE5\x8D\x9C",		"\x96\x6E"=>"\xE5\xA2\xA8",		"\x96\x6F"=>"\xE6\x92\xB2",		"\x96\x70"=>"\xE6\x9C\xB4",		"\x96\x71"=>"\xE7\x89\xA7",		"\x96\x72"=>"\xE7\x9D\xA6",		"\x96\x73"=>"\xE7\xA9\x86",		"\x96\x74"=>"\xE9\x87\xA6",		"\x96\x75"=>"\xE5\x8B\x83",		"\x96\x76"=>"\xE6\xB2\xA1",		"\x96\x77"=>"\xE6\xAE\x86",		"\x96\x78"=>"\xE5\xA0\x80",		"\x96\x79"=>"\xE5\xB9\x8C",		"\x96\x7A"=>"\xE5\xA5\x94",		"\x96\x7B"=>"\xE6\x9C\xAC",		"\x96\x7C"=>"\xE7\xBF\xBB",		"\x96\x7D"=>"\xE5\x87\xA1",		"\x96\x7E"=>"\xE7\x9B\x86",		"\x96\x80"=>"\xE6\x91\xA9",		"\x96\x81"=>"\xE7\xA3\xA8",		"\x96\x82"=>"\xE9\xAD\x94",		"\x96\x83"=>"\xE9\xBA\xBB",		"\x96\x84"=>"\xE5\x9F\x8B",		"\x96\x85"=>"\xE5\xA6\xB9",		"\x96\x86"=>"\xE6\x98\xA7",		"\x96\x87"=>"\xE6\x9E\x9A",		"\x96\x88"=>"\xE6\xAF\x8E",		"\x96\x89"=>"\xE5\x93\xA9",		"\x96\x8A"=>"\xE6\xA7\x99",		"\x96\x8B"=>"\xE5\xB9\x95",		"\x96\x8C"=>"\xE8\x86\x9C",		"\x96\x8D"=>"\xE6\x9E\x95",		"\x96\x8E"=>"\xE9\xAE\xAA",		"\x96\x8F"=>"\xE6\x9F\xBE",		"\x96\x90"=>"\xE9\xB1\x92",		"\x96\x91"=>"\xE6\xA1\x9D",		"\x96\x92"=>"\xE4\xBA\xA6",		"\x96\x93"=>"\xE4\xBF\xA3",		"\x96\x94"=>"\xE5\x8F\x88",		"\x96\x95"=>"\xE6\x8A\xB9",		"\x96\x96"=>"\xE6\x9C\xAB",		"\x96\x97"=>"\xE6\xB2\xAB",		"\x96\x98"=>"\xE8\xBF\x84",		"\x96\x99"=>"\xE4\xBE\xAD",		"\x96\x9A"=>"\xE7\xB9\xAD",		"\x96\x9B"=>"\xE9\xBA\xBF",		"\x96\x9C"=>"\xE4\xB8\x87",		"\x96\x9D"=>"\xE6\x85\xA2",		"\x96\x9E"=>"\xE6\xBA\x80",		"\x96\x9F"=>"\xE6\xBC\xAB",		"\x96\xA0"=>"\xE8\x94\x93",		"\x96\xA1"=>"\xE5\x91\xB3",		"\x96\xA2"=>"\xE6\x9C\xAA",		"\x96\xA3"=>"\xE9\xAD\x85",		"\x96\xA4"=>"\xE5\xB7\xB3",		"\x96\xA5"=>"\xE7\xAE\x95",		"\x96\xA6"=>"\xE5\xB2\xAC",		"\x96\xA7"=>"\xE5\xAF\x86",		"\x96\xA8"=>"\xE8\x9C\x9C",		"\x96\xA9"=>"\xE6\xB9\x8A",		"\x96\xAA"=>"\xE8\x93\x91",		"\x96\xAB"=>"\xE7\xA8\x94",		"\x96\xAC"=>"\xE8\x84\x88",		"\x96\xAD"=>"\xE5\xA6\x99",		"\x96\xAE"=>"\xE7\xB2\x8D",		"\x96\xAF"=>"\xE6\xB0\x91",		"\x96\xB0"=>"\xE7\x9C\xA0",		"\x96\xB1"=>"\xE5\x8B\x99",		"\x96\xB2"=>"\xE5\xA4\xA2",		"\x96\xB3"=>"\xE7\x84\xA1",		"\x96\xB4"=>"\xE7\x89\x9F",		"\x96\xB5"=>"\xE7\x9F\x9B",		"\x96\xB6"=>"\xE9\x9C\xA7",		"\x96\xB7"=>"\xE9\xB5\xA1",		"\x96\xB8"=>"\xE6\xA4\x8B",		"\x96\xB9"=>"\xE5\xA9\xBF",		"\x96\xBA"=>"\xE5\xA8\x98",		"\x96\xBB"=>"\xE5\x86\xA5",		"\x96\xBC"=>"\xE5\x90\x8D",		"\x96\xBD"=>"\xE5\x91\xBD",		"\x96\xBE"=>"\xE6\x98\x8E",		"\x96\xBF"=>"\xE7\x9B\x9F",		"\x96\xC0"=>"\xE8\xBF\xB7",		"\x96\xC1"=>"\xE9\x8A\x98",		"\x96\xC2"=>"\xE9\xB3\xB4",		"\x96\xC3"=>"\xE5\xA7\xAA",		"\x96\xC4"=>"\xE7\x89\x9D",		"\x96\xC5"=>"\xE6\xBB\x85",		"\x96\xC6"=>"\xE5\x85\x8D",		"\x96\xC7"=>"\xE6\xA3\x89",		"\x96\xC8"=>"\xE7\xB6\xBF",		"\x96\xC9"=>"\xE7\xB7\xAC",		"\x96\xCA"=>"\xE9\x9D\xA2",		"\x96\xCB"=>"\xE9\xBA\xBA",		"\x96\xCC"=>"\xE6\x91\xB8",		"\x96\xCD"=>"\xE6\xA8\xA1",		"\x96\xCE"=>"\xE8\x8C\x82",		"\x96\xCF"=>"\xE5\xA6\x84",		"\x96\xD0"=>"\xE5\xAD\x9F",		"\x96\xD1"=>"\xE6\xAF\x9B",		"\x96\xD2"=>"\xE7\x8C\x9B",		"\x96\xD3"=>"\xE7\x9B\xB2",		"\x96\xD4"=>"\xE7\xB6\xB2",		"\x96\xD5"=>"\xE8\x80\x97",		"\x96\xD6"=>"\xE8\x92\x99",		"\x96\xD7"=>"\xE5\x84\xB2",		"\x96\xD8"=>"\xE6\x9C\xA8",		"\x96\xD9"=>"\xE9\xBB\x99",		"\x96\xDA"=>"\xE7\x9B\xAE",		"\x96\xDB"=>"\xE6\x9D\xA2",		"\x96\xDC"=>"\xE5\x8B\xBF",		"\x96\xDD"=>"\xE9\xA4\x85",		"\x96\xDE"=>"\xE5\xB0\xA4",		"\x96\xDF"=>"\xE6\x88\xBB",		"\x96\xE0"=>"\xE7\xB1\xBE",		"\x96\xE1"=>"\xE8\xB2\xB0",		"\x96\xE2"=>"\xE5\x95\x8F",		"\x96\xE3"=>"\xE6\x82\xB6",		"\x96\xE4"=>"\xE7\xB4\x8B",		"\x96\xE5"=>"\xE9\x96\x80",		"\x96\xE6"=>"\xE5\x8C\x81",		"\x96\xE7"=>"\xE4\xB9\x9F",		"\x96\xE8"=>"\xE5\x86\xB6",		"\x96\xE9"=>"\xE5\xA4\x9C",		"\x96\xEA"=>"\xE7\x88\xBA",		"\x96\xEB"=>"\xE8\x80\xB6",		"\x96\xEC"=>"\xE9\x87\x8E",		"\x96\xED"=>"\xE5\xBC\xA5",		"\x96\xEE"=>"\xE7\x9F\xA2",		"\x96\xEF"=>"\xE5\x8E\x84",		"\x96\xF0"=>"\xE5\xBD\xB9",		"\x96\xF1"=>"\xE7\xB4\x84",		"\x96\xF2"=>"\xE8\x96\xAC",		"\x96\xF3"=>"\xE8\xA8\xB3",		"\x96\xF4"=>"\xE8\xBA\x8D",		"\x96\xF5"=>"\xE9\x9D\x96",		"\x96\xF6"=>"\xE6\x9F\xB3",		"\x96\xF7"=>"\xE8\x96\xAE",		"\x96\xF8"=>"\xE9\x91\x93",		"\x96\xF9"=>"\xE6\x84\x89",		"\x96\xFA"=>"\xE6\x84\x88",		"\x96\xFB"=>"\xE6\xB2\xB9",		"\x96\xFC"=>"\xE7\x99\x92",		"\x97\x40"=>"\xE8\xAB\xAD",		"\x97\x41"=>"\xE8\xBC\xB8",		"\x97\x42"=>"\xE5\x94\xAF",		"\x97\x43"=>"\xE4\xBD\x91",		"\x97\x44"=>"\xE5\x84\xAA",		"\x97\x45"=>"\xE5\x8B\x87",		"\x97\x46"=>"\xE5\x8F\x8B",		"\x97\x47"=>"\xE5\xAE\xA5",		"\x97\x48"=>"\xE5\xB9\xBD",		"\x97\x49"=>"\xE6\x82\xA0",		"\x97\x4A"=>"\xE6\x86\x82",		"\x97\x4B"=>"\xE6\x8F\x96",		"\x97\x4C"=>"\xE6\x9C\x89",		"\x97\x4D"=>"\xE6\x9F\x9A",		"\x97\x4E"=>"\xE6\xB9\xA7",		"\x97\x4F"=>"\xE6\xB6\x8C",		"\x97\x50"=>"\xE7\x8C\xB6",		"\x97\x51"=>"\xE7\x8C\xB7",		"\x97\x52"=>"\xE7\x94\xB1",		"\x97\x53"=>"\xE7\xA5\x90",		"\x97\x54"=>"\xE8\xA3\x95",		"\x97\x55"=>"\xE8\xAA\x98",		"\x97\x56"=>"\xE9\x81\x8A",		"\x97\x57"=>"\xE9\x82\x91",		"\x97\x58"=>"\xE9\x83\xB5",		"\x97\x59"=>"\xE9\x9B\x84",		"\x97\x5A"=>"\xE8\x9E\x8D",		"\x97\x5B"=>"\xE5\xA4\x95",		"\x97\x5C"=>"\xE4\xBA\x88",		"\x97\x5D"=>"\xE4\xBD\x99",		"\x97\x5E"=>"\xE4\xB8\x8E",		"\x97\x5F"=>"\xE8\xAA\x89",		"\x97\x60"=>"\xE8\xBC\xBF",		"\x97\x61"=>"\xE9\xA0\x90",		"\x97\x62"=>"\xE5\x82\xAD",		"\x97\x63"=>"\xE5\xB9\xBC",		"\x97\x64"=>"\xE5\xA6\x96",		"\x97\x65"=>"\xE5\xAE\xB9",		"\x97\x66"=>"\xE5\xBA\xB8",		"\x97\x67"=>"\xE6\x8F\x9A",		"\x97\x68"=>"\xE6\x8F\xBA",		"\x97\x69"=>"\xE6\x93\x81",		"\x97\x6A"=>"\xE6\x9B\x9C",		"\x97\x6B"=>"\xE6\xA5\x8A",		"\x97\x6C"=>"\xE6\xA7\x98",		"\x97\x6D"=>"\xE6\xB4\x8B",		"\x97\x6E"=>"\xE6\xBA\xB6",		"\x97\x6F"=>"\xE7\x86\x94",		"\x97\x70"=>"\xE7\x94\xA8",		"\x97\x71"=>"\xE7\xAA\xAF",		"\x97\x72"=>"\xE7\xBE\x8A",		"\x97\x73"=>"\xE8\x80\x80",		"\x97\x74"=>"\xE8\x91\x89",		"\x97\x75"=>"\xE8\x93\x89",		"\x97\x76"=>"\xE8\xA6\x81",		"\x97\x77"=>"\xE8\xAC\xA1",		"\x97\x78"=>"\xE8\xB8\x8A",		"\x97\x79"=>"\xE9\x81\xA5",		"\x97\x7A"=>"\xE9\x99\xBD",		"\x97\x7B"=>"\xE9\xA4\x8A",		"\x97\x7C"=>"\xE6\x85\xBE",		"\x97\x7D"=>"\xE6\x8A\x91",		"\x97\x7E"=>"\xE6\xAC\xB2",		"\x97\x80"=>"\xE6\xB2\x83",		"\x97\x81"=>"\xE6\xB5\xB4",		"\x97\x82"=>"\xE7\xBF\x8C",		"\x97\x83"=>"\xE7\xBF\xBC",		"\x97\x84"=>"\xE6\xB7\x80",		"\x97\x85"=>"\xE7\xBE\x85",		"\x97\x86"=>"\xE8\x9E\xBA",		"\x97\x87"=>"\xE8\xA3\xB8",		"\x97\x88"=>"\xE6\x9D\xA5",		"\x97\x89"=>"\xE8\x8E\xB1",		"\x97\x8A"=>"\xE9\xA0\xBC",		"\x97\x8B"=>"\xE9\x9B\xB7",		"\x97\x8C"=>"\xE6\xB4\x9B",		"\x97\x8D"=>"\xE7\xB5\xA1",		"\x97\x8E"=>"\xE8\x90\xBD",		"\x97\x8F"=>"\xE9\x85\xAA",		"\x97\x90"=>"\xE4\xB9\xB1",		"\x97\x91"=>"\xE5\x8D\xB5",		"\x97\x92"=>"\xE5\xB5\x90",		"\x97\x93"=>"\xE6\xAC\x84",		"\x97\x94"=>"\xE6\xBF\xAB",		"\x97\x95"=>"\xE8\x97\x8D",		"\x97\x96"=>"\xE8\x98\xAD",		"\x97\x97"=>"\xE8\xA6\xA7",		"\x97\x98"=>"\xE5\x88\xA9",		"\x97\x99"=>"\xE5\x90\x8F",		"\x97\x9A"=>"\xE5\xB1\xA5",		"\x97\x9B"=>"\xE6\x9D\x8E",		"\x97\x9C"=>"\xE6\xA2\xA8",		"\x97\x9D"=>"\xE7\x90\x86",		"\x97\x9E"=>"\xE7\x92\x83",		"\x97\x9F"=>"\xE7\x97\xA2",		"\x97\xA0"=>"\xE8\xA3\x8F",		"\x97\xA1"=>"\xE8\xA3\xA1",		"\x97\xA2"=>"\xE9\x87\x8C",		"\x97\xA3"=>"\xE9\x9B\xA2",		"\x97\xA4"=>"\xE9\x99\xB8",		"\x97\xA5"=>"\xE5\xBE\x8B",		"\x97\xA6"=>"\xE7\x8E\x87",		"\x97\xA7"=>"\xE7\xAB\x8B",		"\x97\xA8"=>"\xE8\x91\x8E",		"\x97\xA9"=>"\xE6\x8E\xA0",		"\x97\xAA"=>"\xE7\x95\xA5",		"\x97\xAB"=>"\xE5\x8A\x89",		"\x97\xAC"=>"\xE6\xB5\x81",		"\x97\xAD"=>"\xE6\xBA\x9C",		"\x97\xAE"=>"\xE7\x90\x89",		"\x97\xAF"=>"\xE7\x95\x99",		"\x97\xB0"=>"\xE7\xA1\xAB",		"\x97\xB1"=>"\xE7\xB2\x92",		"\x97\xB2"=>"\xE9\x9A\x86",		"\x97\xB3"=>"\xE7\xAB\x9C",		"\x97\xB4"=>"\xE9\xBE\x8D",		"\x97\xB5"=>"\xE4\xBE\xB6",		"\x97\xB6"=>"\xE6\x85\xAE",		"\x97\xB7"=>"\xE6\x97\x85",		"\x97\xB8"=>"\xE8\x99\x9C",		"\x97\xB9"=>"\xE4\xBA\x86",		"\x97\xBA"=>"\xE4\xBA\xAE",		"\x97\xBB"=>"\xE5\x83\x9A",		"\x97\xBC"=>"\xE4\xB8\xA1",		"\x97\xBD"=>"\xE5\x87\x8C",		"\x97\xBE"=>"\xE5\xAF\xAE",		"\x97\xBF"=>"\xE6\x96\x99",		"\x97\xC0"=>"\xE6\xA2\x81",		"\x97\xC1"=>"\xE6\xB6\xBC",		"\x97\xC2"=>"\xE7\x8C\x9F",		"\x97\xC3"=>"\xE7\x99\x82",		"\x97\xC4"=>"\xE7\x9E\xAD",		"\x97\xC5"=>"\xE7\xA8\x9C",		"\x97\xC6"=>"\xE7\xB3\xA7",		"\x97\xC7"=>"\xE8\x89\xAF",		"\x97\xC8"=>"\xE8\xAB\x92",		"\x97\xC9"=>"\xE9\x81\xBC",		"\x97\xCA"=>"\xE9\x87\x8F",		"\x97\xCB"=>"\xE9\x99\xB5",		"\x97\xCC"=>"\xE9\xA0\x98",		"\x97\xCD"=>"\xE5\x8A\x9B",		"\x97\xCE"=>"\xE7\xB7\x91",		"\x97\xCF"=>"\xE5\x80\xAB",		"\x97\xD0"=>"\xE5\x8E\x98",		"\x97\xD1"=>"\xE6\x9E\x97",		"\x97\xD2"=>"\xE6\xB7\x8B",		"\x97\xD3"=>"\xE7\x87\x90",		"\x97\xD4"=>"\xE7\x90\xB3",		"\x97\xD5"=>"\xE8\x87\xA8",		"\x97\xD6"=>"\xE8\xBC\xAA",		"\x97\xD7"=>"\xE9\x9A\xA3",		"\x97\xD8"=>"\xE9\xB1\x97",		"\x97\xD9"=>"\xE9\xBA\x9F",		"\x97\xDA"=>"\xE7\x91\xA0",		"\x97\xDB"=>"\xE5\xA1\x81",		"\x97\xDC"=>"\xE6\xB6\x99",		"\x97\xDD"=>"\xE7\xB4\xAF",		"\x97\xDE"=>"\xE9\xA1\x9E",		"\x97\xDF"=>"\xE4\xBB\xA4",		"\x97\xE0"=>"\xE4\xBC\xB6",		"\x97\xE1"=>"\xE4\xBE\x8B",		"\x97\xE2"=>"\xE5\x86\xB7",		"\x97\xE3"=>"\xE5\x8A\xB1",		"\x97\xE4"=>"\xE5\xB6\xBA",		"\x97\xE5"=>"\xE6\x80\x9C",		"\x97\xE6"=>"\xE7\x8E\xB2",		"\x97\xE7"=>"\xE7\xA4\xBC",		"\x97\xE8"=>"\xE8\x8B\x93",		"\x97\xE9"=>"\xE9\x88\xB4",		"\x97\xEA"=>"\xE9\x9A\xB7",		"\x97\xEB"=>"\xE9\x9B\xB6",		"\x97\xEC"=>"\xE9\x9C\x8A",		"\x97\xED"=>"\xE9\xBA\x97",		"\x97\xEE"=>"\xE9\xBD\xA2",		"\x97\xEF"=>"\xE6\x9A\xA6",		"\x97\xF0"=>"\xE6\xAD\xB4",		"\x97\xF1"=>"\xE5\x88\x97",		"\x97\xF2"=>"\xE5\x8A\xA3",		"\x97\xF3"=>"\xE7\x83\x88",		"\x97\xF4"=>"\xE8\xA3\x82",		"\x97\xF5"=>"\xE5\xBB\x89",		"\x97\xF6"=>"\xE6\x81\x8B",		"\x97\xF7"=>"\xE6\x86\x90",		"\x97\xF8"=>"\xE6\xBC\xA3",		"\x97\xF9"=>"\xE7\x85\x89",		"\x97\xFA"=>"\xE7\xB0\xBE",		"\x97\xFB"=>"\xE7\xB7\xB4",		"\x97\xFC"=>"\xE8\x81\xAF",		"\x98\x40"=>"\xE8\x93\xAE",		"\x98\x41"=>"\xE9\x80\xA3",		"\x98\x42"=>"\xE9\x8C\xAC",		"\x98\x43"=>"\xE5\x91\x82",		"\x98\x44"=>"\xE9\xAD\xAF",		"\x98\x45"=>"\xE6\xAB\x93",		"\x98\x46"=>"\xE7\x82\x89",		"\x98\x47"=>"\xE8\xB3\x82",		"\x98\x48"=>"\xE8\xB7\xAF",		"\x98\x49"=>"\xE9\x9C\xB2",		"\x98\x4A"=>"\xE5\x8A\xB4",		"\x98\x4B"=>"\xE5\xA9\x81",		"\x98\x4C"=>"\xE5\xBB\x8A",		"\x98\x4D"=>"\xE5\xBC\x84",		"\x98\x4E"=>"\xE6\x9C\x97",		"\x98\x4F"=>"\xE6\xA5\xBC",		"\x98\x50"=>"\xE6\xA6\x94",		"\x98\x51"=>"\xE6\xB5\xAA",		"\x98\x52"=>"\xE6\xBC\x8F",		"\x98\x53"=>"\xE7\x89\xA2",		"\x98\x54"=>"\xE7\x8B\xBC",		"\x98\x55"=>"\xE7\xAF\xAD",		"\x98\x56"=>"\xE8\x80\x81",		"\x98\x57"=>"\xE8\x81\xBE",		"\x98\x58"=>"\xE8\x9D\x8B",		"\x98\x59"=>"\xE9\x83\x8E",		"\x98\x5A"=>"\xE5\x85\xAD",		"\x98\x5B"=>"\xE9\xBA\x93",		"\x98\x5C"=>"\xE7\xA6\x84",		"\x98\x5D"=>"\xE8\x82\x8B",		"\x98\x5E"=>"\xE9\x8C\xB2",		"\x98\x5F"=>"\xE8\xAB\x96",		"\x98\x60"=>"\xE5\x80\xAD",		"\x98\x61"=>"\xE5\x92\x8C",		"\x98\x62"=>"\xE8\xA9\xB1",		"\x98\x63"=>"\xE6\xAD\xAA",		"\x98\x64"=>"\xE8\xB3\x84",		"\x98\x65"=>"\xE8\x84\x87",		"\x98\x66"=>"\xE6\x83\x91",		"\x98\x67"=>"\xE6\x9E\xA0",		"\x98\x68"=>"\xE9\xB7\xB2",		"\x98\x69"=>"\xE4\xBA\x99",		"\x98\x6A"=>"\xE4\xBA\x98",		"\x98\x6B"=>"\xE9\xB0\x90",		"\x98\x6C"=>"\xE8\xA9\xAB",		"\x98\x6D"=>"\xE8\x97\x81",		"\x98\x6E"=>"\xE8\x95\xA8",		"\x98\x6F"=>"\xE6\xA4\x80",		"\x98\x70"=>"\xE6\xB9\xBE",		"\x98\x71"=>"\xE7\xA2\x97",		"\x98\x72"=>"\xE8\x85\x95",		"\x98\x9F"=>"\xE5\xBC\x8C",		"\x98\xA0"=>"\xE4\xB8\x90",		"\x98\xA1"=>"\xE4\xB8\x95",		"\x98\xA2"=>"\xE4\xB8\xAA",		"\x98\xA3"=>"\xE4\xB8\xB1",		"\x98\xA4"=>"\xE4\xB8\xB6",		"\x98\xA5"=>"\xE4\xB8\xBC",		"\x98\xA6"=>"\xE4\xB8\xBF",		"\x98\xA7"=>"\xE4\xB9\x82",		"\x98\xA8"=>"\xE4\xB9\x96",		"\x98\xA9"=>"\xE4\xB9\x98",		"\x98\xAA"=>"\xE4\xBA\x82",		"\x98\xAB"=>"\xE4\xBA\x85",		"\x98\xAC"=>"\xE8\xB1\xAB",		"\x98\xAD"=>"\xE4\xBA\x8A",		"\x98\xAE"=>"\xE8\x88\x92",		"\x98\xAF"=>"\xE5\xBC\x8D",		"\x98\xB0"=>"\xE4\xBA\x8E",		"\x98\xB1"=>"\xE4\xBA\x9E",		"\x98\xB2"=>"\xE4\xBA\x9F",		"\x98\xB3"=>"\xE4\xBA\xA0",		"\x98\xB4"=>"\xE4\xBA\xA2",		"\x98\xB5"=>"\xE4\xBA\xB0",		"\x98\xB6"=>"\xE4\xBA\xB3",		"\x98\xB7"=>"\xE4\xBA\xB6",		"\x98\xB8"=>"\xE4\xBB\x8E",		"\x98\xB9"=>"\xE4\xBB\x8D",		"\x98\xBA"=>"\xE4\xBB\x84",		"\x98\xBB"=>"\xE4\xBB\x86",		"\x98\xBC"=>"\xE4\xBB\x82",		"\x98\xBD"=>"\xE4\xBB\x97",		"\x98\xBE"=>"\xE4\xBB\x9E",		"\x98\xBF"=>"\xE4\xBB\xAD",		"\x98\xC0"=>"\xE4\xBB\x9F",		"\x98\xC1"=>"\xE4\xBB\xB7",		"\x98\xC2"=>"\xE4\xBC\x89",		"\x98\xC3"=>"\xE4\xBD\x9A",		"\x98\xC4"=>"\xE4\xBC\xB0",		"\x98\xC5"=>"\xE4\xBD\x9B",		"\x98\xC6"=>"\xE4\xBD\x9D",		"\x98\xC7"=>"\xE4\xBD\x97",		"\x98\xC8"=>"\xE4\xBD\x87",		"\x98\xC9"=>"\xE4\xBD\xB6",		"\x98\xCA"=>"\xE4\xBE\x88",		"\x98\xCB"=>"\xE4\xBE\x8F",		"\x98\xCC"=>"\xE4\xBE\x98",		"\x98\xCD"=>"\xE4\xBD\xBB",		"\x98\xCE"=>"\xE4\xBD\xA9",		"\x98\xCF"=>"\xE4\xBD\xB0",		"\x98\xD0"=>"\xE4\xBE\x91",		"\x98\xD1"=>"\xE4\xBD\xAF",		"\x98\xD2"=>"\xE4\xBE\x86",		"\x98\xD3"=>"\xE4\xBE\x96",		"\x98\xD4"=>"\xE5\x84\x98",		"\x98\xD5"=>"\xE4\xBF\x94",		"\x98\xD6"=>"\xE4\xBF\x9F",		"\x98\xD7"=>"\xE4\xBF\x8E",		"\x98\xD8"=>"\xE4\xBF\x98",		"\x98\xD9"=>"\xE4\xBF\x9B",		"\x98\xDA"=>"\xE4\xBF\x91",		"\x98\xDB"=>"\xE4\xBF\x9A",		"\x98\xDC"=>"\xE4\xBF\x90",		"\x98\xDD"=>"\xE4\xBF\xA4",		"\x98\xDE"=>"\xE4\xBF\xA5",		"\x98\xDF"=>"\xE5\x80\x9A",		"\x98\xE0"=>"\xE5\x80\xA8",		"\x98\xE1"=>"\xE5\x80\x94",		"\x98\xE2"=>"\xE5\x80\xAA",		"\x98\xE3"=>"\xE5\x80\xA5",		"\x98\xE4"=>"\xE5\x80\x85",		"\x98\xE5"=>"\xE4\xBC\x9C",		"\x98\xE6"=>"\xE4\xBF\xB6",		"\x98\xE7"=>"\xE5\x80\xA1",		"\x98\xE8"=>"\xE5\x80\xA9",		"\x98\xE9"=>"\xE5\x80\xAC",		"\x98\xEA"=>"\xE4\xBF\xBE",		"\x98\xEB"=>"\xE4\xBF\xAF",		"\x98\xEC"=>"\xE5\x80\x91",		"\x98\xED"=>"\xE5\x80\x86",		"\x98\xEE"=>"\xE5\x81\x83",		"\x98\xEF"=>"\xE5\x81\x87",		"\x98\xF0"=>"\xE6\x9C\x83",		"\x98\xF1"=>"\xE5\x81\x95",		"\x98\xF2"=>"\xE5\x81\x90",		"\x98\xF3"=>"\xE5\x81\x88",		"\x98\xF4"=>"\xE5\x81\x9A",		"\x98\xF5"=>"\xE5\x81\x96",		"\x98\xF6"=>"\xE5\x81\xAC",		"\x98\xF7"=>"\xE5\x81\xB8",		"\x98\xF8"=>"\xE5\x82\x80",		"\x98\xF9"=>"\xE5\x82\x9A",		"\x98\xFA"=>"\xE5\x82\x85",		"\x98\xFB"=>"\xE5\x82\xB4",		"\x98\xFC"=>"\xE5\x82\xB2",		"\x99\x40"=>"\xE5\x83\x89",		"\x99\x41"=>"\xE5\x83\x8A",		"\x99\x42"=>"\xE5\x82\xB3",		"\x99\x43"=>"\xE5\x83\x82",		"\x99\x44"=>"\xE5\x83\x96",		"\x99\x45"=>"\xE5\x83\x9E",		"\x99\x46"=>"\xE5\x83\xA5",		"\x99\x47"=>"\xE5\x83\xAD",		"\x99\x48"=>"\xE5\x83\xA3",		"\x99\x49"=>"\xE5\x83\xAE",		"\x99\x4A"=>"\xE5\x83\xB9",		"\x99\x4B"=>"\xE5\x83\xB5",		"\x99\x4C"=>"\xE5\x84\x89",		"\x99\x4D"=>"\xE5\x84\x81",		"\x99\x4E"=>"\xE5\x84\x82",		"\x99\x4F"=>"\xE5\x84\x96",		"\x99\x50"=>"\xE5\x84\x95",		"\x99\x51"=>"\xE5\x84\x94",		"\x99\x52"=>"\xE5\x84\x9A",		"\x99\x53"=>"\xE5\x84\xA1",		"\x99\x54"=>"\xE5\x84\xBA",		"\x99\x55"=>"\xE5\x84\xB7",		"\x99\x56"=>"\xE5\x84\xBC",		"\x99\x57"=>"\xE5\x84\xBB",		"\x99\x58"=>"\xE5\x84\xBF",		"\x99\x59"=>"\xE5\x85\x80",		"\x99\x5A"=>"\xE5\x85\x92",		"\x99\x5B"=>"\xE5\x85\x8C",		"\x99\x5C"=>"\xE5\x85\x94",		"\x99\x5D"=>"\xE5\x85\xA2",		"\x99\x5E"=>"\xE7\xAB\xB8",		"\x99\x5F"=>"\xE5\x85\xA9",		"\x99\x60"=>"\xE5\x85\xAA",		"\x99\x61"=>"\xE5\x85\xAE",		"\x99\x62"=>"\xE5\x86\x80",		"\x99\x63"=>"\xE5\x86\x82",		"\x99\x64"=>"\xE5\x9B\x98",		"\x99\x65"=>"\xE5\x86\x8C",		"\x99\x66"=>"\xE5\x86\x89",		"\x99\x67"=>"\xE5\x86\x8F",		"\x99\x68"=>"\xE5\x86\x91",		"\x99\x69"=>"\xE5\x86\x93",		"\x99\x6A"=>"\xE5\x86\x95",		"\x99\x6B"=>"\xE5\x86\x96",		"\x99\x6C"=>"\xE5\x86\xA4",		"\x99\x6D"=>"\xE5\x86\xA6",		"\x99\x6E"=>"\xE5\x86\xA2",		"\x99\x6F"=>"\xE5\x86\xA9",		"\x99\x70"=>"\xE5\x86\xAA",		"\x99\x71"=>"\xE5\x86\xAB",		"\x99\x72"=>"\xE5\x86\xB3",		"\x99\x73"=>"\xE5\x86\xB1",		"\x99\x74"=>"\xE5\x86\xB2",		"\x99\x75"=>"\xE5\x86\xB0",		"\x99\x76"=>"\xE5\x86\xB5",		"\x99\x77"=>"\xE5\x86\xBD",		"\x99\x78"=>"\xE5\x87\x85",		"\x99\x79"=>"\xE5\x87\x89",		"\x99\x7A"=>"\xE5\x87\x9B",		"\x99\x7B"=>"\xE5\x87\xA0",		"\x99\x7C"=>"\xE8\x99\x95",		"\x99\x7D"=>"\xE5\x87\xA9",		"\x99\x7E"=>"\xE5\x87\xAD",		"\x99\x80"=>"\xE5\x87\xB0",		"\x99\x81"=>"\xE5\x87\xB5",		"\x99\x82"=>"\xE5\x87\xBE",		"\x99\x83"=>"\xE5\x88\x84",		"\x99\x84"=>"\xE5\x88\x8B",		"\x99\x85"=>"\xE5\x88\x94",		"\x99\x86"=>"\xE5\x88\x8E",		"\x99\x87"=>"\xE5\x88\xA7",		"\x99\x88"=>"\xE5\x88\xAA",		"\x99\x89"=>"\xE5\x88\xAE",		"\x99\x8A"=>"\xE5\x88\xB3",		"\x99\x8B"=>"\xE5\x88\xB9",		"\x99\x8C"=>"\xE5\x89\x8F",		"\x99\x8D"=>"\xE5\x89\x84",		"\x99\x8E"=>"\xE5\x89\x8B",		"\x99\x8F"=>"\xE5\x89\x8C",		"\x99\x90"=>"\xE5\x89\x9E",		"\x99\x91"=>"\xE5\x89\x94",		"\x99\x92"=>"\xE5\x89\xAA",		"\x99\x93"=>"\xE5\x89\xB4",		"\x99\x94"=>"\xE5\x89\xA9",		"\x99\x95"=>"\xE5\x89\xB3",		"\x99\x96"=>"\xE5\x89\xBF",		"\x99\x97"=>"\xE5\x89\xBD",		"\x99\x98"=>"\xE5\x8A\x8D",		"\x99\x99"=>"\xE5\x8A\x94",		"\x99\x9A"=>"\xE5\x8A\x92",		"\x99\x9B"=>"\xE5\x89\xB1",		"\x99\x9C"=>"\xE5\x8A\x88",		"\x99\x9D"=>"\xE5\x8A\x91",		"\x99\x9E"=>"\xE8\xBE\xA8",		"\x99\x9F"=>"\xE8\xBE\xA7",		"\x99\xA0"=>"\xE5\x8A\xAC",		"\x99\xA1"=>"\xE5\x8A\xAD",		"\x99\xA2"=>"\xE5\x8A\xBC",		"\x99\xA3"=>"\xE5\x8A\xB5",		"\x99\xA4"=>"\xE5\x8B\x81",		"\x99\xA5"=>"\xE5\x8B\x8D",		"\x99\xA6"=>"\xE5\x8B\x97",		"\x99\xA7"=>"\xE5\x8B\x9E",		"\x99\xA8"=>"\xE5\x8B\xA3",		"\x99\xA9"=>"\xE5\x8B\xA6",		"\x99\xAA"=>"\xE9\xA3\xAD",		"\x99\xAB"=>"\xE5\x8B\xA0",		"\x99\xAC"=>"\xE5\x8B\xB3",		"\x99\xAD"=>"\xE5\x8B\xB5",		"\x99\xAE"=>"\xE5\x8B\xB8",		"\x99\xAF"=>"\xE5\x8B\xB9",		"\x99\xB0"=>"\xE5\x8C\x86",		"\x99\xB1"=>"\xE5\x8C\x88",		"\x99\xB2"=>"\xE7\x94\xB8",		"\x99\xB3"=>"\xE5\x8C\x8D",		"\x99\xB4"=>"\xE5\x8C\x90",		"\x99\xB5"=>"\xE5\x8C\x8F",		"\x99\xB6"=>"\xE5\x8C\x95",		"\x99\xB7"=>"\xE5\x8C\x9A",		"\x99\xB8"=>"\xE5\x8C\xA3",		"\x99\xB9"=>"\xE5\x8C\xAF",		"\x99\xBA"=>"\xE5\x8C\xB1",		"\x99\xBB"=>"\xE5\x8C\xB3",		"\x99\xBC"=>"\xE5\x8C\xB8",		"\x99\xBD"=>"\xE5\x8D\x80",		"\x99\xBE"=>"\xE5\x8D\x86",		"\x99\xBF"=>"\xE5\x8D\x85",		"\x99\xC0"=>"\xE4\xB8\x97",		"\x99\xC1"=>"\xE5\x8D\x89",		"\x99\xC2"=>"\xE5\x8D\x8D",		"\x99\xC3"=>"\xE5\x87\x96",		"\x99\xC4"=>"\xE5\x8D\x9E",		"\x99\xC5"=>"\xE5\x8D\xA9",		"\x99\xC6"=>"\xE5\x8D\xAE",		"\x99\xC7"=>"\xE5\xA4\x98",		"\x99\xC8"=>"\xE5\x8D\xBB",		"\x99\xC9"=>"\xE5\x8D\xB7",		"\x99\xCA"=>"\xE5\x8E\x82",		"\x99\xCB"=>"\xE5\x8E\x96",		"\x99\xCC"=>"\xE5\x8E\xA0",		"\x99\xCD"=>"\xE5\x8E\xA6",		"\x99\xCE"=>"\xE5\x8E\xA5",		"\x99\xCF"=>"\xE5\x8E\xAE",		"\x99\xD0"=>"\xE5\x8E\xB0",		"\x99\xD1"=>"\xE5\x8E\xB6",		"\x99\xD2"=>"\xE5\x8F\x83",		"\x99\xD3"=>"\xE7\xB0\x92",		"\x99\xD4"=>"\xE9\x9B\x99",		"\x99\xD5"=>"\xE5\x8F\x9F",		"\x99\xD6"=>"\xE6\x9B\xBC",		"\x99\xD7"=>"\xE7\x87\xAE",		"\x99\xD8"=>"\xE5\x8F\xAE",		"\x99\xD9"=>"\xE5\x8F\xA8",		"\x99\xDA"=>"\xE5\x8F\xAD",		"\x99\xDB"=>"\xE5\x8F\xBA",		"\x99\xDC"=>"\xE5\x90\x81",		"\x99\xDD"=>"\xE5\x90\xBD",		"\x99\xDE"=>"\xE5\x91\x80",		"\x99\xDF"=>"\xE5\x90\xAC",		"\x99\xE0"=>"\xE5\x90\xAD",		"\x99\xE1"=>"\xE5\x90\xBC",		"\x99\xE2"=>"\xE5\x90\xAE",		"\x99\xE3"=>"\xE5\x90\xB6",		"\x99\xE4"=>"\xE5\x90\xA9",		"\x99\xE5"=>"\xE5\x90\x9D",		"\x99\xE6"=>"\xE5\x91\x8E",		"\x99\xE7"=>"\xE5\x92\x8F",		"\x99\xE8"=>"\xE5\x91\xB5",		"\x99\xE9"=>"\xE5\x92\x8E",		"\x99\xEA"=>"\xE5\x91\x9F",		"\x99\xEB"=>"\xE5\x91\xB1",		"\x99\xEC"=>"\xE5\x91\xB7",		"\x99\xED"=>"\xE5\x91\xB0",		"\x99\xEE"=>"\xE5\x92\x92",		"\x99\xEF"=>"\xE5\x91\xBB",		"\x99\xF0"=>"\xE5\x92\x80",		"\x99\xF1"=>"\xE5\x91\xB6",		"\x99\xF2"=>"\xE5\x92\x84",		"\x99\xF3"=>"\xE5\x92\x90",		"\x99\xF4"=>"\xE5\x92\x86",		"\x99\xF5"=>"\xE5\x93\x87",		"\x99\xF6"=>"\xE5\x92\xA2",		"\x99\xF7"=>"\xE5\x92\xB8",		"\x99\xF8"=>"\xE5\x92\xA5",		"\x99\xF9"=>"\xE5\x92\xAC",		"\x99\xFA"=>"\xE5\x93\x84",		"\x99\xFB"=>"\xE5\x93\x88",		"\x99\xFC"=>"\xE5\x92\xA8",		"\x9A\x40"=>"\xE5\x92\xAB",		"\x9A\x41"=>"\xE5\x93\x82",		"\x9A\x42"=>"\xE5\x92\xA4",		"\x9A\x43"=>"\xE5\x92\xBE",		"\x9A\x44"=>"\xE5\x92\xBC",		"\x9A\x45"=>"\xE5\x93\x98",		"\x9A\x46"=>"\xE5\x93\xA5",		"\x9A\x47"=>"\xE5\x93\xA6",		"\x9A\x48"=>"\xE5\x94\x8F",		"\x9A\x49"=>"\xE5\x94\x94",		"\x9A\x4A"=>"\xE5\x93\xBD",		"\x9A\x4B"=>"\xE5\x93\xAE",		"\x9A\x4C"=>"\xE5\x93\xAD",		"\x9A\x4D"=>"\xE5\x93\xBA",		"\x9A\x4E"=>"\xE5\x93\xA2",		"\x9A\x4F"=>"\xE5\x94\xB9",		"\x9A\x50"=>"\xE5\x95\x80",		"\x9A\x51"=>"\xE5\x95\xA3",		"\x9A\x52"=>"\xE5\x95\x8C",		"\x9A\x53"=>"\xE5\x94\xAE",		"\x9A\x54"=>"\xE5\x95\x9C",		"\x9A\x55"=>"\xE5\x95\x85",		"\x9A\x56"=>"\xE5\x95\x96",		"\x9A\x57"=>"\xE5\x95\x97",		"\x9A\x58"=>"\xE5\x94\xB8",		"\x9A\x59"=>"\xE5\x94\xB3",		"\x9A\x5A"=>"\xE5\x95\x9D",		"\x9A\x5B"=>"\xE5\x96\x99",		"\x9A\x5C"=>"\xE5\x96\x80",		"\x9A\x5D"=>"\xE5\x92\xAF",		"\x9A\x5E"=>"\xE5\x96\x8A",		"\x9A\x5F"=>"\xE5\x96\x9F",		"\x9A\x60"=>"\xE5\x95\xBB",		"\x9A\x61"=>"\xE5\x95\xBE",		"\x9A\x62"=>"\xE5\x96\x98",		"\x9A\x63"=>"\xE5\x96\x9E",		"\x9A\x64"=>"\xE5\x96\xAE",		"\x9A\x65"=>"\xE5\x95\xBC",		"\x9A\x66"=>"\xE5\x96\x83",		"\x9A\x67"=>"\xE5\x96\xA9",		"\x9A\x68"=>"\xE5\x96\x87",		"\x9A\x69"=>"\xE5\x96\xA8",		"\x9A\x6A"=>"\xE5\x97\x9A",		"\x9A\x6B"=>"\xE5\x97\x85",		"\x9A\x6C"=>"\xE5\x97\x9F",		"\x9A\x6D"=>"\xE5\x97\x84",		"\x9A\x6E"=>"\xE5\x97\x9C",		"\x9A\x6F"=>"\xE5\x97\xA4",		"\x9A\x70"=>"\xE5\x97\x94",		"\x9A\x71"=>"\xE5\x98\x94",		"\x9A\x72"=>"\xE5\x97\xB7",		"\x9A\x73"=>"\xE5\x98\x96",		"\x9A\x74"=>"\xE5\x97\xBE",		"\x9A\x75"=>"\xE5\x97\xBD",		"\x9A\x76"=>"\xE5\x98\x9B",		"\x9A\x77"=>"\xE5\x97\xB9",		"\x9A\x78"=>"\xE5\x99\x8E",		"\x9A\x79"=>"\xE5\x99\x90",		"\x9A\x7A"=>"\xE7\x87\x9F",		"\x9A\x7B"=>"\xE5\x98\xB4",		"\x9A\x7C"=>"\xE5\x98\xB6",		"\x9A\x7D"=>"\xE5\x98\xB2",		"\x9A\x7E"=>"\xE5\x98\xB8",		"\x9A\x80"=>"\xE5\x99\xAB",		"\x9A\x81"=>"\xE5\x99\xA4",		"\x9A\x82"=>"\xE5\x98\xAF",		"\x9A\x83"=>"\xE5\x99\xAC",		"\x9A\x84"=>"\xE5\x99\xAA",		"\x9A\x85"=>"\xE5\x9A\x86",		"\x9A\x86"=>"\xE5\x9A\x80",		"\x9A\x87"=>"\xE5\x9A\x8A",		"\x9A\x88"=>"\xE5\x9A\xA0",		"\x9A\x89"=>"\xE5\x9A\x94",		"\x9A\x8A"=>"\xE5\x9A\x8F",		"\x9A\x8B"=>"\xE5\x9A\xA5",		"\x9A\x8C"=>"\xE5\x9A\xAE",		"\x9A\x8D"=>"\xE5\x9A\xB6",		"\x9A\x8E"=>"\xE5\x9A\xB4",		"\x9A\x8F"=>"\xE5\x9B\x82",		"\x9A\x90"=>"\xE5\x9A\xBC",		"\x9A\x91"=>"\xE5\x9B\x81",		"\x9A\x92"=>"\xE5\x9B\x83",		"\x9A\x93"=>"\xE5\x9B\x80",		"\x9A\x94"=>"\xE5\x9B\x88",		"\x9A\x95"=>"\xE5\x9B\x8E",		"\x9A\x96"=>"\xE5\x9B\x91",		"\x9A\x97"=>"\xE5\x9B\x93",		"\x9A\x98"=>"\xE5\x9B\x97",		"\x9A\x99"=>"\xE5\x9B\xAE",		"\x9A\x9A"=>"\xE5\x9B\xB9",		"\x9A\x9B"=>"\xE5\x9C\x80",		"\x9A\x9C"=>"\xE5\x9B\xBF",		"\x9A\x9D"=>"\xE5\x9C\x84",		"\x9A\x9E"=>"\xE5\x9C\x89",		"\x9A\x9F"=>"\xE5\x9C\x88",		"\x9A\xA0"=>"\xE5\x9C\x8B",		"\x9A\xA1"=>"\xE5\x9C\x8D",		"\x9A\xA2"=>"\xE5\x9C\x93",		"\x9A\xA3"=>"\xE5\x9C\x98",		"\x9A\xA4"=>"\xE5\x9C\x96",		"\x9A\xA5"=>"\xE5\x97\x87",		"\x9A\xA6"=>"\xE5\x9C\x9C",		"\x9A\xA7"=>"\xE5\x9C\xA6",		"\x9A\xA8"=>"\xE5\x9C\xB7",		"\x9A\xA9"=>"\xE5\x9C\xB8",		"\x9A\xAA"=>"\xE5\x9D\x8E",		"\x9A\xAB"=>"\xE5\x9C\xBB",		"\x9A\xAC"=>"\xE5\x9D\x80",		"\x9A\xAD"=>"\xE5\x9D\x8F",		"\x9A\xAE"=>"\xE5\x9D\xA9",		"\x9A\xAF"=>"\xE5\x9F\x80",		"\x9A\xB0"=>"\xE5\x9E\x88",		"\x9A\xB1"=>"\xE5\x9D\xA1",		"\x9A\xB2"=>"\xE5\x9D\xBF",		"\x9A\xB3"=>"\xE5\x9E\x89",		"\x9A\xB4"=>"\xE5\x9E\x93",		"\x9A\xB5"=>"\xE5\x9E\xA0",		"\x9A\xB6"=>"\xE5\x9E\xB3",		"\x9A\xB7"=>"\xE5\x9E\xA4",		"\x9A\xB8"=>"\xE5\x9E\xAA",		"\x9A\xB9"=>"\xE5\x9E\xB0",		"\x9A\xBA"=>"\xE5\x9F\x83",		"\x9A\xBB"=>"\xE5\x9F\x86",		"\x9A\xBC"=>"\xE5\x9F\x94",		"\x9A\xBD"=>"\xE5\x9F\x92",		"\x9A\xBE"=>"\xE5\x9F\x93",		"\x9A\xBF"=>"\xE5\xA0\x8A",		"\x9A\xC0"=>"\xE5\x9F\x96",		"\x9A\xC1"=>"\xE5\x9F\xA3",		"\x9A\xC2"=>"\xE5\xA0\x8B",		"\x9A\xC3"=>"\xE5\xA0\x99",		"\x9A\xC4"=>"\xE5\xA0\x9D",		"\x9A\xC5"=>"\xE5\xA1\xB2",		"\x9A\xC6"=>"\xE5\xA0\xA1",		"\x9A\xC7"=>"\xE5\xA1\xA2",		"\x9A\xC8"=>"\xE5\xA1\x8B",		"\x9A\xC9"=>"\xE5\xA1\xB0",		"\x9A\xCA"=>"\xE6\xAF\x80",		"\x9A\xCB"=>"\xE5\xA1\x92",		"\x9A\xCC"=>"\xE5\xA0\xBD",		"\x9A\xCD"=>"\xE5\xA1\xB9",		"\x9A\xCE"=>"\xE5\xA2\x85",		"\x9A\xCF"=>"\xE5\xA2\xB9",		"\x9A\xD0"=>"\xE5\xA2\x9F",		"\x9A\xD1"=>"\xE5\xA2\xAB",		"\x9A\xD2"=>"\xE5\xA2\xBA",		"\x9A\xD3"=>"\xE5\xA3\x9E",		"\x9A\xD4"=>"\xE5\xA2\xBB",		"\x9A\xD5"=>"\xE5\xA2\xB8",		"\x9A\xD6"=>"\xE5\xA2\xAE",		"\x9A\xD7"=>"\xE5\xA3\x85",		"\x9A\xD8"=>"\xE5\xA3\x93",		"\x9A\xD9"=>"\xE5\xA3\x91",		"\x9A\xDA"=>"\xE5\xA3\x97",		"\x9A\xDB"=>"\xE5\xA3\x99",		"\x9A\xDC"=>"\xE5\xA3\x98",		"\x9A\xDD"=>"\xE5\xA3\xA5",		"\x9A\xDE"=>"\xE5\xA3\x9C",		"\x9A\xDF"=>"\xE5\xA3\xA4",		"\x9A\xE0"=>"\xE5\xA3\x9F",		"\x9A\xE1"=>"\xE5\xA3\xAF",		"\x9A\xE2"=>"\xE5\xA3\xBA",		"\x9A\xE3"=>"\xE5\xA3\xB9",		"\x9A\xE4"=>"\xE5\xA3\xBB",		"\x9A\xE5"=>"\xE5\xA3\xBC",		"\x9A\xE6"=>"\xE5\xA3\xBD",		"\x9A\xE7"=>"\xE5\xA4\x82",		"\x9A\xE8"=>"\xE5\xA4\x8A",		"\x9A\xE9"=>"\xE5\xA4\x90",		"\x9A\xEA"=>"\xE5\xA4\x9B",		"\x9A\xEB"=>"\xE6\xA2\xA6",		"\x9A\xEC"=>"\xE5\xA4\xA5",		"\x9A\xED"=>"\xE5\xA4\xAC",		"\x9A\xEE"=>"\xE5\xA4\xAD",		"\x9A\xEF"=>"\xE5\xA4\xB2",		"\x9A\xF0"=>"\xE5\xA4\xB8",		"\x9A\xF1"=>"\xE5\xA4\xBE",		"\x9A\xF2"=>"\xE7\xAB\x92",		"\x9A\xF3"=>"\xE5\xA5\x95",		"\x9A\xF4"=>"\xE5\xA5\x90",		"\x9A\xF5"=>"\xE5\xA5\x8E",		"\x9A\xF6"=>"\xE5\xA5\x9A",		"\x9A\xF7"=>"\xE5\xA5\x98",		"\x9A\xF8"=>"\xE5\xA5\xA2",		"\x9A\xF9"=>"\xE5\xA5\xA0",		"\x9A\xFA"=>"\xE5\xA5\xA7",		"\x9A\xFB"=>"\xE5\xA5\xAC",		"\x9A\xFC"=>"\xE5\xA5\xA9",		"\x9B\x40"=>"\xE5\xA5\xB8",		"\x9B\x41"=>"\xE5\xA6\x81",		"\x9B\x42"=>"\xE5\xA6\x9D",		"\x9B\x43"=>"\xE4\xBD\x9E",		"\x9B\x44"=>"\xE4\xBE\xAB",		"\x9B\x45"=>"\xE5\xA6\xA3",		"\x9B\x46"=>"\xE5\xA6\xB2",		"\x9B\x47"=>"\xE5\xA7\x86",		"\x9B\x48"=>"\xE5\xA7\xA8",		"\x9B\x49"=>"\xE5\xA7\x9C",		"\x9B\x4A"=>"\xE5\xA6\x8D",		"\x9B\x4B"=>"\xE5\xA7\x99",		"\x9B\x4C"=>"\xE5\xA7\x9A",		"\x9B\x4D"=>"\xE5\xA8\xA5",		"\x9B\x4E"=>"\xE5\xA8\x9F",		"\x9B\x4F"=>"\xE5\xA8\x91",		"\x9B\x50"=>"\xE5\xA8\x9C",		"\x9B\x51"=>"\xE5\xA8\x89",		"\x9B\x52"=>"\xE5\xA8\x9A",		"\x9B\x53"=>"\xE5\xA9\x80",		"\x9B\x54"=>"\xE5\xA9\xAC",		"\x9B\x55"=>"\xE5\xA9\x89",		"\x9B\x56"=>"\xE5\xA8\xB5",		"\x9B\x57"=>"\xE5\xA8\xB6",		"\x9B\x58"=>"\xE5\xA9\xA2",		"\x9B\x59"=>"\xE5\xA9\xAA",		"\x9B\x5A"=>"\xE5\xAA\x9A",		"\x9B\x5B"=>"\xE5\xAA\xBC",		"\x9B\x5C"=>"\xE5\xAA\xBE",		"\x9B\x5D"=>"\xE5\xAB\x8B",		"\x9B\x5E"=>"\xE5\xAB\x82",		"\x9B\x5F"=>"\xE5\xAA\xBD",		"\x9B\x60"=>"\xE5\xAB\xA3",		"\x9B\x61"=>"\xE5\xAB\x97",		"\x9B\x62"=>"\xE5\xAB\xA6",		"\x9B\x63"=>"\xE5\xAB\xA9",		"\x9B\x64"=>"\xE5\xAB\x96",		"\x9B\x65"=>"\xE5\xAB\xBA",		"\x9B\x66"=>"\xE5\xAB\xBB",		"\x9B\x67"=>"\xE5\xAC\x8C",		"\x9B\x68"=>"\xE5\xAC\x8B",		"\x9B\x69"=>"\xE5\xAC\x96",		"\x9B\x6A"=>"\xE5\xAC\xB2",		"\x9B\x6B"=>"\xE5\xAB\x90",		"\x9B\x6C"=>"\xE5\xAC\xAA",		"\x9B\x6D"=>"\xE5\xAC\xB6",		"\x9B\x6E"=>"\xE5\xAC\xBE",		"\x9B\x6F"=>"\xE5\xAD\x83",		"\x9B\x70"=>"\xE5\xAD\x85",		"\x9B\x71"=>"\xE5\xAD\x80",		"\x9B\x72"=>"\xE5\xAD\x91",		"\x9B\x73"=>"\xE5\xAD\x95",		"\x9B\x74"=>"\xE5\xAD\x9A",		"\x9B\x75"=>"\xE5\xAD\x9B",		"\x9B\x76"=>"\xE5\xAD\xA5",		"\x9B\x77"=>"\xE5\xAD\xA9",		"\x9B\x78"=>"\xE5\xAD\xB0",		"\x9B\x79"=>"\xE5\xAD\xB3",		"\x9B\x7A"=>"\xE5\xAD\xB5",		"\x9B\x7B"=>"\xE5\xAD\xB8",		"\x9B\x7C"=>"\xE6\x96\x88",		"\x9B\x7D"=>"\xE5\xAD\xBA",		"\x9B\x7E"=>"\xE5\xAE\x80",		"\x9B\x80"=>"\xE5\xAE\x83",		"\x9B\x81"=>"\xE5\xAE\xA6",		"\x9B\x82"=>"\xE5\xAE\xB8",		"\x9B\x83"=>"\xE5\xAF\x83",		"\x9B\x84"=>"\xE5\xAF\x87",		"\x9B\x85"=>"\xE5\xAF\x89",		"\x9B\x86"=>"\xE5\xAF\x94",		"\x9B\x87"=>"\xE5\xAF\x90",		"\x9B\x88"=>"\xE5\xAF\xA4",		"\x9B\x89"=>"\xE5\xAF\xA6",		"\x9B\x8A"=>"\xE5\xAF\xA2",		"\x9B\x8B"=>"\xE5\xAF\x9E",		"\x9B\x8C"=>"\xE5\xAF\xA5",		"\x9B\x8D"=>"\xE5\xAF\xAB",		"\x9B\x8E"=>"\xE5\xAF\xB0",		"\x9B\x8F"=>"\xE5\xAF\xB6",		"\x9B\x90"=>"\xE5\xAF\xB3",		"\x9B\x91"=>"\xE5\xB0\x85",		"\x9B\x92"=>"\xE5\xB0\x87",		"\x9B\x93"=>"\xE5\xB0\x88",		"\x9B\x94"=>"\xE5\xB0\x8D",		"\x9B\x95"=>"\xE5\xB0\x93",		"\x9B\x96"=>"\xE5\xB0\xA0",		"\x9B\x97"=>"\xE5\xB0\xA2",		"\x9B\x98"=>"\xE5\xB0\xA8",		"\x9B\x99"=>"\xE5\xB0\xB8",		"\x9B\x9A"=>"\xE5\xB0\xB9",		"\x9B\x9B"=>"\xE5\xB1\x81",		"\x9B\x9C"=>"\xE5\xB1\x86",		"\x9B\x9D"=>"\xE5\xB1\x8E",		"\x9B\x9E"=>"\xE5\xB1\x93",		"\x9B\x9F"=>"\xE5\xB1\x90",		"\x9B\xA0"=>"\xE5\xB1\x8F",		"\x9B\xA1"=>"\xE5\xAD\xB1",		"\x9B\xA2"=>"\xE5\xB1\xAC",		"\x9B\xA3"=>"\xE5\xB1\xAE",		"\x9B\xA4"=>"\xE4\xB9\xA2",		"\x9B\xA5"=>"\xE5\xB1\xB6",		"\x9B\xA6"=>"\xE5\xB1\xB9",		"\x9B\xA7"=>"\xE5\xB2\x8C",		"\x9B\xA8"=>"\xE5\xB2\x91",		"\x9B\xA9"=>"\xE5\xB2\x94",		"\x9B\xAA"=>"\xE5\xA6\x9B",		"\x9B\xAB"=>"\xE5\xB2\xAB",		"\x9B\xAC"=>"\xE5\xB2\xBB",		"\x9B\xAD"=>"\xE5\xB2\xB6",		"\x9B\xAE"=>"\xE5\xB2\xBC",		"\x9B\xAF"=>"\xE5\xB2\xB7",		"\x9B\xB0"=>"\xE5\xB3\x85",		"\x9B\xB1"=>"\xE5\xB2\xBE",		"\x9B\xB2"=>"\xE5\xB3\x87",		"\x9B\xB3"=>"\xE5\xB3\x99",		"\x9B\xB4"=>"\xE5\xB3\xA9",		"\x9B\xB5"=>"\xE5\xB3\xBD",		"\x9B\xB6"=>"\xE5\xB3\xBA",		"\x9B\xB7"=>"\xE5\xB3\xAD",		"\x9B\xB8"=>"\xE5\xB6\x8C",		"\x9B\xB9"=>"\xE5\xB3\xAA",		"\x9B\xBA"=>"\xE5\xB4\x8B",		"\x9B\xBB"=>"\xE5\xB4\x95",		"\x9B\xBC"=>"\xE5\xB4\x97",		"\x9B\xBD"=>"\xE5\xB5\x9C",		"\x9B\xBE"=>"\xE5\xB4\x9F",		"\x9B\xBF"=>"\xE5\xB4\x9B",		"\x9B\xC0"=>"\xE5\xB4\x91",		"\x9B\xC1"=>"\xE5\xB4\x94",		"\x9B\xC2"=>"\xE5\xB4\xA2",		"\x9B\xC3"=>"\xE5\xB4\x9A",		"\x9B\xC4"=>"\xE5\xB4\x99",		"\x9B\xC5"=>"\xE5\xB4\x98",		"\x9B\xC6"=>"\xE5\xB5\x8C",		"\x9B\xC7"=>"\xE5\xB5\x92",		"\x9B\xC8"=>"\xE5\xB5\x8E",		"\x9B\xC9"=>"\xE5\xB5\x8B",		"\x9B\xCA"=>"\xE5\xB5\xAC",		"\x9B\xCB"=>"\xE5\xB5\xB3",		"\x9B\xCC"=>"\xE5\xB5\xB6",		"\x9B\xCD"=>"\xE5\xB6\x87",		"\x9B\xCE"=>"\xE5\xB6\x84",		"\x9B\xCF"=>"\xE5\xB6\x82",		"\x9B\xD0"=>"\xE5\xB6\xA2",		"\x9B\xD1"=>"\xE5\xB6\x9D",		"\x9B\xD2"=>"\xE5\xB6\xAC",		"\x9B\xD3"=>"\xE5\xB6\xAE",		"\x9B\xD4"=>"\xE5\xB6\xBD",		"\x9B\xD5"=>"\xE5\xB6\x90",		"\x9B\xD6"=>"\xE5\xB6\xB7",		"\x9B\xD7"=>"\xE5\xB6\xBC",		"\x9B\xD8"=>"\xE5\xB7\x89",		"\x9B\xD9"=>"\xE5\xB7\x8D",		"\x9B\xDA"=>"\xE5\xB7\x93",		"\x9B\xDB"=>"\xE5\xB7\x92",		"\x9B\xDC"=>"\xE5\xB7\x96",		"\x9B\xDD"=>"\xE5\xB7\x9B",		"\x9B\xDE"=>"\xE5\xB7\xAB",		"\x9B\xDF"=>"\xE5\xB7\xB2",		"\x9B\xE0"=>"\xE5\xB7\xB5",		"\x9B\xE1"=>"\xE5\xB8\x8B",		"\x9B\xE2"=>"\xE5\xB8\x9A",		"\x9B\xE3"=>"\xE5\xB8\x99",		"\x9B\xE4"=>"\xE5\xB8\x91",		"\x9B\xE5"=>"\xE5\xB8\x9B",		"\x9B\xE6"=>"\xE5\xB8\xB6",		"\x9B\xE7"=>"\xE5\xB8\xB7",		"\x9B\xE8"=>"\xE5\xB9\x84",		"\x9B\xE9"=>"\xE5\xB9\x83",		"\x9B\xEA"=>"\xE5\xB9\x80",		"\x9B\xEB"=>"\xE5\xB9\x8E",		"\x9B\xEC"=>"\xE5\xB9\x97",		"\x9B\xED"=>"\xE5\xB9\x94",		"\x9B\xEE"=>"\xE5\xB9\x9F",		"\x9B\xEF"=>"\xE5\xB9\xA2",		"\x9B\xF0"=>"\xE5\xB9\xA4",		"\x9B\xF1"=>"\xE5\xB9\x87",		"\x9B\xF2"=>"\xE5\xB9\xB5",		"\x9B\xF3"=>"\xE5\xB9\xB6",		"\x9B\xF4"=>"\xE5\xB9\xBA",		"\x9B\xF5"=>"\xE9\xBA\xBC",		"\x9B\xF6"=>"\xE5\xB9\xBF",		"\x9B\xF7"=>"\xE5\xBA\xA0",		"\x9B\xF8"=>"\xE5\xBB\x81",		"\x9B\xF9"=>"\xE5\xBB\x82",		"\x9B\xFA"=>"\xE5\xBB\x88",		"\x9B\xFB"=>"\xE5\xBB\x90",		"\x9B\xFC"=>"\xE5\xBB\x8F",		"\x9C\x40"=>"\xE5\xBB\x96",		"\x9C\x41"=>"\xE5\xBB\xA3",		"\x9C\x42"=>"\xE5\xBB\x9D",		"\x9C\x43"=>"\xE5\xBB\x9A",		"\x9C\x44"=>"\xE5\xBB\x9B",		"\x9C\x45"=>"\xE5\xBB\xA2",		"\x9C\x46"=>"\xE5\xBB\xA1",		"\x9C\x47"=>"\xE5\xBB\xA8",		"\x9C\x48"=>"\xE5\xBB\xA9",		"\x9C\x49"=>"\xE5\xBB\xAC",		"\x9C\x4A"=>"\xE5\xBB\xB1",		"\x9C\x4B"=>"\xE5\xBB\xB3",		"\x9C\x4C"=>"\xE5\xBB\xB0",		"\x9C\x4D"=>"\xE5\xBB\xB4",		"\x9C\x4E"=>"\xE5\xBB\xB8",		"\x9C\x4F"=>"\xE5\xBB\xBE",		"\x9C\x50"=>"\xE5\xBC\x83",		"\x9C\x51"=>"\xE5\xBC\x89",		"\x9C\x52"=>"\xE5\xBD\x9D",		"\x9C\x53"=>"\xE5\xBD\x9C",		"\x9C\x54"=>"\xE5\xBC\x8B",		"\x9C\x55"=>"\xE5\xBC\x91",		"\x9C\x56"=>"\xE5\xBC\x96",		"\x9C\x57"=>"\xE5\xBC\xA9",		"\x9C\x58"=>"\xE5\xBC\xAD",		"\x9C\x59"=>"\xE5\xBC\xB8",		"\x9C\x5A"=>"\xE5\xBD\x81",		"\x9C\x5B"=>"\xE5\xBD\x88",		"\x9C\x5C"=>"\xE5\xBD\x8C",		"\x9C\x5D"=>"\xE5\xBD\x8E",		"\x9C\x5E"=>"\xE5\xBC\xAF",		"\x9C\x5F"=>"\xE5\xBD\x91",		"\x9C\x60"=>"\xE5\xBD\x96",		"\x9C\x61"=>"\xE5\xBD\x97",		"\x9C\x62"=>"\xE5\xBD\x99",		"\x9C\x63"=>"\xE5\xBD\xA1",		"\x9C\x64"=>"\xE5\xBD\xAD",		"\x9C\x65"=>"\xE5\xBD\xB3",		"\x9C\x66"=>"\xE5\xBD\xB7",		"\x9C\x67"=>"\xE5\xBE\x83",		"\x9C\x68"=>"\xE5\xBE\x82",		"\x9C\x69"=>"\xE5\xBD\xBF",		"\x9C\x6A"=>"\xE5\xBE\x8A",		"\x9C\x6B"=>"\xE5\xBE\x88",		"\x9C\x6C"=>"\xE5\xBE\x91",		"\x9C\x6D"=>"\xE5\xBE\x87",		"\x9C\x6E"=>"\xE5\xBE\x9E",		"\x9C\x6F"=>"\xE5\xBE\x99",		"\x9C\x70"=>"\xE5\xBE\x98",		"\x9C\x71"=>"\xE5\xBE\xA0",		"\x9C\x72"=>"\xE5\xBE\xA8",		"\x9C\x73"=>"\xE5\xBE\xAD",		"\x9C\x74"=>"\xE5\xBE\xBC",		"\x9C\x75"=>"\xE5\xBF\x96",		"\x9C\x76"=>"\xE5\xBF\xBB",		"\x9C\x77"=>"\xE5\xBF\xA4",		"\x9C\x78"=>"\xE5\xBF\xB8",		"\x9C\x79"=>"\xE5\xBF\xB1",		"\x9C\x7A"=>"\xE5\xBF\x9D",		"\x9C\x7B"=>"\xE6\x82\xB3",		"\x9C\x7C"=>"\xE5\xBF\xBF",		"\x9C\x7D"=>"\xE6\x80\xA1",		"\x9C\x7E"=>"\xE6\x81\xA0",		"\x9C\x80"=>"\xE6\x80\x99",		"\x9C\x81"=>"\xE6\x80\x90",		"\x9C\x82"=>"\xE6\x80\xA9",		"\x9C\x83"=>"\xE6\x80\x8E",		"\x9C\x84"=>"\xE6\x80\xB1",		"\x9C\x85"=>"\xE6\x80\x9B",		"\x9C\x86"=>"\xE6\x80\x95",		"\x9C\x87"=>"\xE6\x80\xAB",		"\x9C\x88"=>"\xE6\x80\xA6",		"\x9C\x89"=>"\xE6\x80\x8F",		"\x9C\x8A"=>"\xE6\x80\xBA",		"\x9C\x8B"=>"\xE6\x81\x9A",		"\x9C\x8C"=>"\xE6\x81\x81",		"\x9C\x8D"=>"\xE6\x81\xAA",		"\x9C\x8E"=>"\xE6\x81\xB7",		"\x9C\x8F"=>"\xE6\x81\x9F",		"\x9C\x90"=>"\xE6\x81\x8A",		"\x9C\x91"=>"\xE6\x81\x86",		"\x9C\x92"=>"\xE6\x81\x8D",		"\x9C\x93"=>"\xE6\x81\xA3",		"\x9C\x94"=>"\xE6\x81\x83",		"\x9C\x95"=>"\xE6\x81\xA4",		"\x9C\x96"=>"\xE6\x81\x82",		"\x9C\x97"=>"\xE6\x81\xAC",		"\x9C\x98"=>"\xE6\x81\xAB",		"\x9C\x99"=>"\xE6\x81\x99",		"\x9C\x9A"=>"\xE6\x82\x81",		"\x9C\x9B"=>"\xE6\x82\x8D",		"\x9C\x9C"=>"\xE6\x83\xA7",		"\x9C\x9D"=>"\xE6\x82\x83",		"\x9C\x9E"=>"\xE6\x82\x9A",		"\x9C\x9F"=>"\xE6\x82\x84",		"\x9C\xA0"=>"\xE6\x82\x9B",		"\x9C\xA1"=>"\xE6\x82\x96",		"\x9C\xA2"=>"\xE6\x82\x97",		"\x9C\xA3"=>"\xE6\x82\x92",		"\x9C\xA4"=>"\xE6\x82\xA7",		"\x9C\xA5"=>"\xE6\x82\x8B",		"\x9C\xA6"=>"\xE6\x83\xA1",		"\x9C\xA7"=>"\xE6\x82\xB8",		"\x9C\xA8"=>"\xE6\x83\xA0",		"\x9C\xA9"=>"\xE6\x83\x93",		"\x9C\xAA"=>"\xE6\x82\xB4",		"\x9C\xAB"=>"\xE5\xBF\xB0",		"\x9C\xAC"=>"\xE6\x82\xBD",		"\x9C\xAD"=>"\xE6\x83\x86",		"\x9C\xAE"=>"\xE6\x82\xB5",		"\x9C\xAF"=>"\xE6\x83\x98",		"\x9C\xB0"=>"\xE6\x85\x8D",		"\x9C\xB1"=>"\xE6\x84\x95",		"\x9C\xB2"=>"\xE6\x84\x86",		"\x9C\xB3"=>"\xE6\x83\xB6",		"\x9C\xB4"=>"\xE6\x83\xB7",		"\x9C\xB5"=>"\xE6\x84\x80",		"\x9C\xB6"=>"\xE6\x83\xB4",		"\x9C\xB7"=>"\xE6\x83\xBA",		"\x9C\xB8"=>"\xE6\x84\x83",		"\x9C\xB9"=>"\xE6\x84\xA1",		"\x9C\xBA"=>"\xE6\x83\xBB",		"\x9C\xBB"=>"\xE6\x83\xB1",		"\x9C\xBC"=>"\xE6\x84\x8D",		"\x9C\xBD"=>"\xE6\x84\x8E",		"\x9C\xBE"=>"\xE6\x85\x87",		"\x9C\xBF"=>"\xE6\x84\xBE",		"\x9C\xC0"=>"\xE6\x84\xA8",		"\x9C\xC1"=>"\xE6\x84\xA7",		"\x9C\xC2"=>"\xE6\x85\x8A",		"\x9C\xC3"=>"\xE6\x84\xBF",		"\x9C\xC4"=>"\xE6\x84\xBC",		"\x9C\xC5"=>"\xE6\x84\xAC",		"\x9C\xC6"=>"\xE6\x84\xB4",		"\x9C\xC7"=>"\xE6\x84\xBD",		"\x9C\xC8"=>"\xE6\x85\x82",		"\x9C\xC9"=>"\xE6\x85\x84",		"\x9C\xCA"=>"\xE6\x85\xB3",		"\x9C\xCB"=>"\xE6\x85\xB7",		"\x9C\xCC"=>"\xE6\x85\x98",		"\x9C\xCD"=>"\xE6\x85\x99",		"\x9C\xCE"=>"\xE6\x85\x9A",		"\x9C\xCF"=>"\xE6\x85\xAB",		"\x9C\xD0"=>"\xE6\x85\xB4",		"\x9C\xD1"=>"\xE6\x85\xAF",		"\x9C\xD2"=>"\xE6\x85\xA5",		"\x9C\xD3"=>"\xE6\x85\xB1",		"\x9C\xD4"=>"\xE6\x85\x9F",		"\x9C\xD5"=>"\xE6\x85\x9D",		"\x9C\xD6"=>"\xE6\x85\x93",		"\x9C\xD7"=>"\xE6\x85\xB5",		"\x9C\xD8"=>"\xE6\x86\x99",		"\x9C\xD9"=>"\xE6\x86\x96",		"\x9C\xDA"=>"\xE6\x86\x87",		"\x9C\xDB"=>"\xE6\x86\xAC",		"\x9C\xDC"=>"\xE6\x86\x94",		"\x9C\xDD"=>"\xE6\x86\x9A",		"\x9C\xDE"=>"\xE6\x86\x8A",		"\x9C\xDF"=>"\xE6\x86\x91",		"\x9C\xE0"=>"\xE6\x86\xAB",		"\x9C\xE1"=>"\xE6\x86\xAE",		"\x9C\xE2"=>"\xE6\x87\x8C",		"\x9C\xE3"=>"\xE6\x87\x8A",		"\x9C\xE4"=>"\xE6\x87\x89",		"\x9C\xE5"=>"\xE6\x87\xB7",		"\x9C\xE6"=>"\xE6\x87\x88",		"\x9C\xE7"=>"\xE6\x87\x83",		"\x9C\xE8"=>"\xE6\x87\x86",		"\x9C\xE9"=>"\xE6\x86\xBA",		"\x9C\xEA"=>"\xE6\x87\x8B",		"\x9C\xEB"=>"\xE7\xBD\xB9",		"\x9C\xEC"=>"\xE6\x87\x8D",		"\x9C\xED"=>"\xE6\x87\xA6",		"\x9C\xEE"=>"\xE6\x87\xA3",		"\x9C\xEF"=>"\xE6\x87\xB6",		"\x9C\xF0"=>"\xE6\x87\xBA",		"\x9C\xF1"=>"\xE6\x87\xB4",		"\x9C\xF2"=>"\xE6\x87\xBF",		"\x9C\xF3"=>"\xE6\x87\xBD",		"\x9C\xF4"=>"\xE6\x87\xBC",		"\x9C\xF5"=>"\xE6\x87\xBE",		"\x9C\xF6"=>"\xE6\x88\x80",		"\x9C\xF7"=>"\xE6\x88\x88",		"\x9C\xF8"=>"\xE6\x88\x89",		"\x9C\xF9"=>"\xE6\x88\x8D",		"\x9C\xFA"=>"\xE6\x88\x8C",		"\x9C\xFB"=>"\xE6\x88\x94",		"\x9C\xFC"=>"\xE6\x88\x9B",		"\x9D\x40"=>"\xE6\x88\x9E",		"\x9D\x41"=>"\xE6\x88\xA1",		"\x9D\x42"=>"\xE6\x88\xAA",		"\x9D\x43"=>"\xE6\x88\xAE",		"\x9D\x44"=>"\xE6\x88\xB0",		"\x9D\x45"=>"\xE6\x88\xB2",		"\x9D\x46"=>"\xE6\x88\xB3",		"\x9D\x47"=>"\xE6\x89\x81",		"\x9D\x48"=>"\xE6\x89\x8E",		"\x9D\x49"=>"\xE6\x89\x9E",		"\x9D\x4A"=>"\xE6\x89\xA3",		"\x9D\x4B"=>"\xE6\x89\x9B",		"\x9D\x4C"=>"\xE6\x89\xA0",		"\x9D\x4D"=>"\xE6\x89\xA8",		"\x9D\x4E"=>"\xE6\x89\xBC",		"\x9D\x4F"=>"\xE6\x8A\x82",		"\x9D\x50"=>"\xE6\x8A\x89",		"\x9D\x51"=>"\xE6\x89\xBE",		"\x9D\x52"=>"\xE6\x8A\x92",		"\x9D\x53"=>"\xE6\x8A\x93",		"\x9D\x54"=>"\xE6\x8A\x96",		"\x9D\x55"=>"\xE6\x8B\x94",		"\x9D\x56"=>"\xE6\x8A\x83",		"\x9D\x57"=>"\xE6\x8A\x94",		"\x9D\x58"=>"\xE6\x8B\x97",		"\x9D\x59"=>"\xE6\x8B\x91",		"\x9D\x5A"=>"\xE6\x8A\xBB",		"\x9D\x5B"=>"\xE6\x8B\x8F",		"\x9D\x5C"=>"\xE6\x8B\xBF",		"\x9D\x5D"=>"\xE6\x8B\x86",		"\x9D\x5E"=>"\xE6\x93\x94",		"\x9D\x5F"=>"\xE6\x8B\x88",		"\x9D\x60"=>"\xE6\x8B\x9C",		"\x9D\x61"=>"\xE6\x8B\x8C",		"\x9D\x62"=>"\xE6\x8B\x8A",		"\x9D\x63"=>"\xE6\x8B\x82",		"\x9D\x64"=>"\xE6\x8B\x87",		"\x9D\x65"=>"\xE6\x8A\x9B",		"\x9D\x66"=>"\xE6\x8B\x89",		"\x9D\x67"=>"\xE6\x8C\x8C",		"\x9D\x68"=>"\xE6\x8B\xAE",		"\x9D\x69"=>"\xE6\x8B\xB1",		"\x9D\x6A"=>"\xE6\x8C\xA7",		"\x9D\x6B"=>"\xE6\x8C\x82",		"\x9D\x6C"=>"\xE6\x8C\x88",		"\x9D\x6D"=>"\xE6\x8B\xAF",		"\x9D\x6E"=>"\xE6\x8B\xB5",		"\x9D\x6F"=>"\xE6\x8D\x90",		"\x9D\x70"=>"\xE6\x8C\xBE",		"\x9D\x71"=>"\xE6\x8D\x8D",		"\x9D\x72"=>"\xE6\x90\x9C",		"\x9D\x73"=>"\xE6\x8D\x8F",		"\x9D\x74"=>"\xE6\x8E\x96",		"\x9D\x75"=>"\xE6\x8E\x8E",		"\x9D\x76"=>"\xE6\x8E\x80",		"\x9D\x77"=>"\xE6\x8E\xAB",		"\x9D\x78"=>"\xE6\x8D\xB6",		"\x9D\x79"=>"\xE6\x8E\xA3",		"\x9D\x7A"=>"\xE6\x8E\x8F",		"\x9D\x7B"=>"\xE6\x8E\x89",		"\x9D\x7C"=>"\xE6\x8E\x9F",		"\x9D\x7D"=>"\xE6\x8E\xB5",		"\x9D\x7E"=>"\xE6\x8D\xAB",		"\x9D\x80"=>"\xE6\x8D\xA9",		"\x9D\x81"=>"\xE6\x8E\xBE",		"\x9D\x82"=>"\xE6\x8F\xA9",		"\x9D\x83"=>"\xE6\x8F\x80",		"\x9D\x84"=>"\xE6\x8F\x86",		"\x9D\x85"=>"\xE6\x8F\xA3",		"\x9D\x86"=>"\xE6\x8F\x89",		"\x9D\x87"=>"\xE6\x8F\x92",		"\x9D\x88"=>"\xE6\x8F\xB6",		"\x9D\x89"=>"\xE6\x8F\x84",		"\x9D\x8A"=>"\xE6\x90\x96",		"\x9D\x8B"=>"\xE6\x90\xB4",		"\x9D\x8C"=>"\xE6\x90\x86",		"\x9D\x8D"=>"\xE6\x90\x93",		"\x9D\x8E"=>"\xE6\x90\xA6",		"\x9D\x8F"=>"\xE6\x90\xB6",		"\x9D\x90"=>"\xE6\x94\x9D",		"\x9D\x91"=>"\xE6\x90\x97",		"\x9D\x92"=>"\xE6\x90\xA8",		"\x9D\x93"=>"\xE6\x90\x8F",		"\x9D\x94"=>"\xE6\x91\xA7",		"\x9D\x95"=>"\xE6\x91\xAF",		"\x9D\x96"=>"\xE6\x91\xB6",		"\x9D\x97"=>"\xE6\x91\x8E",		"\x9D\x98"=>"\xE6\x94\xAA",		"\x9D\x99"=>"\xE6\x92\x95",		"\x9D\x9A"=>"\xE6\x92\x93",		"\x9D\x9B"=>"\xE6\x92\xA5",		"\x9D\x9C"=>"\xE6\x92\xA9",		"\x9D\x9D"=>"\xE6\x92\x88",		"\x9D\x9E"=>"\xE6\x92\xBC",		"\x9D\x9F"=>"\xE6\x93\x9A",		"\x9D\xA0"=>"\xE6\x93\x92",		"\x9D\xA1"=>"\xE6\x93\x85",		"\x9D\xA2"=>"\xE6\x93\x87",		"\x9D\xA3"=>"\xE6\x92\xBB",		"\x9D\xA4"=>"\xE6\x93\x98",		"\x9D\xA5"=>"\xE6\x93\x82",		"\x9D\xA6"=>"\xE6\x93\xB1",		"\x9D\xA7"=>"\xE6\x93\xA7",		"\x9D\xA8"=>"\xE8\x88\x89",		"\x9D\xA9"=>"\xE6\x93\xA0",		"\x9D\xAA"=>"\xE6\x93\xA1",		"\x9D\xAB"=>"\xE6\x8A\xAC",		"\x9D\xAC"=>"\xE6\x93\xA3",		"\x9D\xAD"=>"\xE6\x93\xAF",		"\x9D\xAE"=>"\xE6\x94\xAC",		"\x9D\xAF"=>"\xE6\x93\xB6",		"\x9D\xB0"=>"\xE6\x93\xB4",		"\x9D\xB1"=>"\xE6\x93\xB2",		"\x9D\xB2"=>"\xE6\x93\xBA",		"\x9D\xB3"=>"\xE6\x94\x80",		"\x9D\xB4"=>"\xE6\x93\xBD",		"\x9D\xB5"=>"\xE6\x94\x98",		"\x9D\xB6"=>"\xE6\x94\x9C",		"\x9D\xB7"=>"\xE6\x94\x85",		"\x9D\xB8"=>"\xE6\x94\xA4",		"\x9D\xB9"=>"\xE6\x94\xA3",		"\x9D\xBA"=>"\xE6\x94\xAB",		"\x9D\xBB"=>"\xE6\x94\xB4",		"\x9D\xBC"=>"\xE6\x94\xB5",		"\x9D\xBD"=>"\xE6\x94\xB7",		"\x9D\xBE"=>"\xE6\x94\xB6",		"\x9D\xBF"=>"\xE6\x94\xB8",		"\x9D\xC0"=>"\xE7\x95\x8B",		"\x9D\xC1"=>"\xE6\x95\x88",		"\x9D\xC2"=>"\xE6\x95\x96",		"\x9D\xC3"=>"\xE6\x95\x95",		"\x9D\xC4"=>"\xE6\x95\x8D",		"\x9D\xC5"=>"\xE6\x95\x98",		"\x9D\xC6"=>"\xE6\x95\x9E",		"\x9D\xC7"=>"\xE6\x95\x9D",		"\x9D\xC8"=>"\xE6\x95\xB2",		"\x9D\xC9"=>"\xE6\x95\xB8",		"\x9D\xCA"=>"\xE6\x96\x82",		"\x9D\xCB"=>"\xE6\x96\x83",		"\x9D\xCC"=>"\xE8\xAE\x8A",		"\x9D\xCD"=>"\xE6\x96\x9B",		"\x9D\xCE"=>"\xE6\x96\x9F",		"\x9D\xCF"=>"\xE6\x96\xAB",		"\x9D\xD0"=>"\xE6\x96\xB7",		"\x9D\xD1"=>"\xE6\x97\x83",		"\x9D\xD2"=>"\xE6\x97\x86",		"\x9D\xD3"=>"\xE6\x97\x81",		"\x9D\xD4"=>"\xE6\x97\x84",		"\x9D\xD5"=>"\xE6\x97\x8C",		"\x9D\xD6"=>"\xE6\x97\x92",		"\x9D\xD7"=>"\xE6\x97\x9B",		"\x9D\xD8"=>"\xE6\x97\x99",		"\x9D\xD9"=>"\xE6\x97\xA0",		"\x9D\xDA"=>"\xE6\x97\xA1",		"\x9D\xDB"=>"\xE6\x97\xB1",		"\x9D\xDC"=>"\xE6\x9D\xB2",		"\x9D\xDD"=>"\xE6\x98\x8A",		"\x9D\xDE"=>"\xE6\x98\x83",		"\x9D\xDF"=>"\xE6\x97\xBB",		"\x9D\xE0"=>"\xE6\x9D\xB3",		"\x9D\xE1"=>"\xE6\x98\xB5",		"\x9D\xE2"=>"\xE6\x98\xB6",		"\x9D\xE3"=>"\xE6\x98\xB4",		"\x9D\xE4"=>"\xE6\x98\x9C",		"\x9D\xE5"=>"\xE6\x99\x8F",		"\x9D\xE6"=>"\xE6\x99\x84",		"\x9D\xE7"=>"\xE6\x99\x89",		"\x9D\xE8"=>"\xE6\x99\x81",		"\x9D\xE9"=>"\xE6\x99\x9E",		"\x9D\xEA"=>"\xE6\x99\x9D",		"\x9D\xEB"=>"\xE6\x99\xA4",		"\x9D\xEC"=>"\xE6\x99\xA7",		"\x9D\xED"=>"\xE6\x99\xA8",		"\x9D\xEE"=>"\xE6\x99\x9F",		"\x9D\xEF"=>"\xE6\x99\xA2",		"\x9D\xF0"=>"\xE6\x99\xB0",		"\x9D\xF1"=>"\xE6\x9A\x83",		"\x9D\xF2"=>"\xE6\x9A\x88",		"\x9D\xF3"=>"\xE6\x9A\x8E",		"\x9D\xF4"=>"\xE6\x9A\x89",		"\x9D\xF5"=>"\xE6\x9A\x84",		"\x9D\xF6"=>"\xE6\x9A\x98",		"\x9D\xF7"=>"\xE6\x9A\x9D",		"\x9D\xF8"=>"\xE6\x9B\x81",		"\x9D\xF9"=>"\xE6\x9A\xB9",		"\x9D\xFA"=>"\xE6\x9B\x89",		"\x9D\xFB"=>"\xE6\x9A\xBE",		"\x9D\xFC"=>"\xE6\x9A\xBC",		"\x9E\x40"=>"\xE6\x9B\x84",		"\x9E\x41"=>"\xE6\x9A\xB8",		"\x9E\x42"=>"\xE6\x9B\x96",		"\x9E\x43"=>"\xE6\x9B\x9A",		"\x9E\x44"=>"\xE6\x9B\xA0",		"\x9E\x45"=>"\xE6\x98\xBF",		"\x9E\x46"=>"\xE6\x9B\xA6",		"\x9E\x47"=>"\xE6\x9B\xA9",		"\x9E\x48"=>"\xE6\x9B\xB0",		"\x9E\x49"=>"\xE6\x9B\xB5",		"\x9E\x4A"=>"\xE6\x9B\xB7",		"\x9E\x4B"=>"\xE6\x9C\x8F",		"\x9E\x4C"=>"\xE6\x9C\x96",		"\x9E\x4D"=>"\xE6\x9C\x9E",		"\x9E\x4E"=>"\xE6\x9C\xA6",		"\x9E\x4F"=>"\xE6\x9C\xA7",		"\x9E\x50"=>"\xE9\x9C\xB8",		"\x9E\x51"=>"\xE6\x9C\xAE",		"\x9E\x52"=>"\xE6\x9C\xBF",		"\x9E\x53"=>"\xE6\x9C\xB6",		"\x9E\x54"=>"\xE6\x9D\x81",		"\x9E\x55"=>"\xE6\x9C\xB8",		"\x9E\x56"=>"\xE6\x9C\xB7",		"\x9E\x57"=>"\xE6\x9D\x86",		"\x9E\x58"=>"\xE6\x9D\x9E",		"\x9E\x59"=>"\xE6\x9D\xA0",		"\x9E\x5A"=>"\xE6\x9D\x99",		"\x9E\x5B"=>"\xE6\x9D\xA3",		"\x9E\x5C"=>"\xE6\x9D\xA4",		"\x9E\x5D"=>"\xE6\x9E\x89",		"\x9E\x5E"=>"\xE6\x9D\xB0",		"\x9E\x5F"=>"\xE6\x9E\xA9",		"\x9E\x60"=>"\xE6\x9D\xBC",		"\x9E\x61"=>"\xE6\x9D\xAA",		"\x9E\x62"=>"\xE6\x9E\x8C",		"\x9E\x63"=>"\xE6\x9E\x8B",		"\x9E\x64"=>"\xE6\x9E\xA6",		"\x9E\x65"=>"\xE6\x9E\xA1",		"\x9E\x66"=>"\xE6\x9E\x85",		"\x9E\x67"=>"\xE6\x9E\xB7",		"\x9E\x68"=>"\xE6\x9F\xAF",		"\x9E\x69"=>"\xE6\x9E\xB4",		"\x9E\x6A"=>"\xE6\x9F\xAC",		"\x9E\x6B"=>"\xE6\x9E\xB3",		"\x9E\x6C"=>"\xE6\x9F\xA9",		"\x9E\x6D"=>"\xE6\x9E\xB8",		"\x9E\x6E"=>"\xE6\x9F\xA4",		"\x9E\x6F"=>"\xE6\x9F\x9E",		"\x9E\x70"=>"\xE6\x9F\x9D",		"\x9E\x71"=>"\xE6\x9F\xA2",		"\x9E\x72"=>"\xE6\x9F\xAE",		"\x9E\x73"=>"\xE6\x9E\xB9",		"\x9E\x74"=>"\xE6\x9F\x8E",		"\x9E\x75"=>"\xE6\x9F\x86",		"\x9E\x76"=>"\xE6\x9F\xA7",		"\x9E\x77"=>"\xE6\xAA\x9C",		"\x9E\x78"=>"\xE6\xA0\x9E",		"\x9E\x79"=>"\xE6\xA1\x86",		"\x9E\x7A"=>"\xE6\xA0\xA9",		"\x9E\x7B"=>"\xE6\xA1\x80",		"\x9E\x7C"=>"\xE6\xA1\x8D",		"\x9E\x7D"=>"\xE6\xA0\xB2",		"\x9E\x7E"=>"\xE6\xA1\x8E",		"\x9E\x80"=>"\xE6\xA2\xB3",		"\x9E\x81"=>"\xE6\xA0\xAB",		"\x9E\x82"=>"\xE6\xA1\x99",		"\x9E\x83"=>"\xE6\xA1\xA3",		"\x9E\x84"=>"\xE6\xA1\xB7",		"\x9E\x85"=>"\xE6\xA1\xBF",		"\x9E\x86"=>"\xE6\xA2\x9F",		"\x9E\x87"=>"\xE6\xA2\x8F",		"\x9E\x88"=>"\xE6\xA2\xAD",		"\x9E\x89"=>"\xE6\xA2\x94",		"\x9E\x8A"=>"\xE6\xA2\x9D",		"\x9E\x8B"=>"\xE6\xA2\x9B",		"\x9E\x8C"=>"\xE6\xA2\x83",		"\x9E\x8D"=>"\xE6\xAA\xAE",		"\x9E\x8E"=>"\xE6\xA2\xB9",		"\x9E\x8F"=>"\xE6\xA1\xB4",		"\x9E\x90"=>"\xE6\xA2\xB5",		"\x9E\x91"=>"\xE6\xA2\xA0",		"\x9E\x92"=>"\xE6\xA2\xBA",		"\x9E\x93"=>"\xE6\xA4\x8F",		"\x9E\x94"=>"\xE6\xA2\x8D",		"\x9E\x95"=>"\xE6\xA1\xBE",		"\x9E\x96"=>"\xE6\xA4\x81",		"\x9E\x97"=>"\xE6\xA3\x8A",		"\x9E\x98"=>"\xE6\xA4\x88",		"\x9E\x99"=>"\xE6\xA3\x98",		"\x9E\x9A"=>"\xE6\xA4\xA2",		"\x9E\x9B"=>"\xE6\xA4\xA6",		"\x9E\x9C"=>"\xE6\xA3\xA1",		"\x9E\x9D"=>"\xE6\xA4\x8C",		"\x9E\x9E"=>"\xE6\xA3\x8D",		"\x9E\x9F"=>"\xE6\xA3\x94",		"\x9E\xA0"=>"\xE6\xA3\xA7",		"\x9E\xA1"=>"\xE6\xA3\x95",		"\x9E\xA2"=>"\xE6\xA4\xB6",		"\x9E\xA3"=>"\xE6\xA4\x92",		"\x9E\xA4"=>"\xE6\xA4\x84",		"\x9E\xA5"=>"\xE6\xA3\x97",		"\x9E\xA6"=>"\xE6\xA3\xA3",		"\x9E\xA7"=>"\xE6\xA4\xA5",		"\x9E\xA8"=>"\xE6\xA3\xB9",		"\x9E\xA9"=>"\xE6\xA3\xA0",		"\x9E\xAA"=>"\xE6\xA3\xAF",		"\x9E\xAB"=>"\xE6\xA4\xA8",		"\x9E\xAC"=>"\xE6\xA4\xAA",		"\x9E\xAD"=>"\xE6\xA4\x9A",		"\x9E\xAE"=>"\xE6\xA4\xA3",		"\x9E\xAF"=>"\xE6\xA4\xA1",		"\x9E\xB0"=>"\xE6\xA3\x86",		"\x9E\xB1"=>"\xE6\xA5\xB9",		"\x9E\xB2"=>"\xE6\xA5\xB7",		"\x9E\xB3"=>"\xE6\xA5\x9C",		"\x9E\xB4"=>"\xE6\xA5\xB8",		"\x9E\xB5"=>"\xE6\xA5\xAB",		"\x9E\xB6"=>"\xE6\xA5\x94",		"\x9E\xB7"=>"\xE6\xA5\xBE",		"\x9E\xB8"=>"\xE6\xA5\xAE",		"\x9E\xB9"=>"\xE6\xA4\xB9",		"\x9E\xBA"=>"\xE6\xA5\xB4",		"\x9E\xBB"=>"\xE6\xA4\xBD",		"\x9E\xBC"=>"\xE6\xA5\x99",		"\x9E\xBD"=>"\xE6\xA4\xB0",		"\x9E\xBE"=>"\xE6\xA5\xA1",		"\x9E\xBF"=>"\xE6\xA5\x9E",		"\x9E\xC0"=>"\xE6\xA5\x9D",		"\x9E\xC1"=>"\xE6\xA6\x81",		"\x9E\xC2"=>"\xE6\xA5\xAA",		"\x9E\xC3"=>"\xE6\xA6\xB2",		"\x9E\xC4"=>"\xE6\xA6\xAE",		"\x9E\xC5"=>"\xE6\xA7\x90",		"\x9E\xC6"=>"\xE6\xA6\xBF",		"\x9E\xC7"=>"\xE6\xA7\x81",		"\x9E\xC8"=>"\xE6\xA7\x93",		"\x9E\xC9"=>"\xE6\xA6\xBE",		"\x9E\xCA"=>"\xE6\xA7\x8E",		"\x9E\xCB"=>"\xE5\xAF\xA8",		"\x9E\xCC"=>"\xE6\xA7\x8A",		"\x9E\xCD"=>"\xE6\xA7\x9D",		"\x9E\xCE"=>"\xE6\xA6\xBB",		"\x9E\xCF"=>"\xE6\xA7\x83",		"\x9E\xD0"=>"\xE6\xA6\xA7",		"\x9E\xD1"=>"\xE6\xA8\xAE",		"\x9E\xD2"=>"\xE6\xA6\x91",		"\x9E\xD3"=>"\xE6\xA6\xA0",		"\x9E\xD4"=>"\xE6\xA6\x9C",		"\x9E\xD5"=>"\xE6\xA6\x95",		"\x9E\xD6"=>"\xE6\xA6\xB4",		"\x9E\xD7"=>"\xE6\xA7\x9E",		"\x9E\xD8"=>"\xE6\xA7\xA8",		"\x9E\xD9"=>"\xE6\xA8\x82",		"\x9E\xDA"=>"\xE6\xA8\x9B",		"\x9E\xDB"=>"\xE6\xA7\xBF",		"\x9E\xDC"=>"\xE6\xAC\x8A",		"\x9E\xDD"=>"\xE6\xA7\xB9",		"\x9E\xDE"=>"\xE6\xA7\xB2",		"\x9E\xDF"=>"\xE6\xA7\xA7",		"\x9E\xE0"=>"\xE6\xA8\x85",		"\x9E\xE1"=>"\xE6\xA6\xB1",		"\x9E\xE2"=>"\xE6\xA8\x9E",		"\x9E\xE3"=>"\xE6\xA7\xAD",		"\x9E\xE4"=>"\xE6\xA8\x94",		"\x9E\xE5"=>"\xE6\xA7\xAB",		"\x9E\xE6"=>"\xE6\xA8\x8A",		"\x9E\xE7"=>"\xE6\xA8\x92",		"\x9E\xE8"=>"\xE6\xAB\x81",		"\x9E\xE9"=>"\xE6\xA8\xA3",		"\x9E\xEA"=>"\xE6\xA8\x93",		"\x9E\xEB"=>"\xE6\xA9\x84",		"\x9E\xEC"=>"\xE6\xA8\x8C",		"\x9E\xED"=>"\xE6\xA9\xB2",		"\x9E\xEE"=>"\xE6\xA8\xB6",		"\x9E\xEF"=>"\xE6\xA9\xB8",		"\x9E\xF0"=>"\xE6\xA9\x87",		"\x9E\xF1"=>"\xE6\xA9\xA2",		"\x9E\xF2"=>"\xE6\xA9\x99",		"\x9E\xF3"=>"\xE6\xA9\xA6",		"\x9E\xF4"=>"\xE6\xA9\x88",		"\x9E\xF5"=>"\xE6\xA8\xB8",		"\x9E\xF6"=>"\xE6\xA8\xA2",		"\x9E\xF7"=>"\xE6\xAA\x90",		"\x9E\xF8"=>"\xE6\xAA\x8D",		"\x9E\xF9"=>"\xE6\xAA\xA0",		"\x9E\xFA"=>"\xE6\xAA\x84",		"\x9E\xFB"=>"\xE6\xAA\xA2",		"\x9E\xFC"=>"\xE6\xAA\xA3",		"\x9F\x40"=>"\xE6\xAA\x97",		"\x9F\x41"=>"\xE8\x98\x97",		"\x9F\x42"=>"\xE6\xAA\xBB",		"\x9F\x43"=>"\xE6\xAB\x83",		"\x9F\x44"=>"\xE6\xAB\x82",		"\x9F\x45"=>"\xE6\xAA\xB8",		"\x9F\x46"=>"\xE6\xAA\xB3",		"\x9F\x47"=>"\xE6\xAA\xAC",		"\x9F\x48"=>"\xE6\xAB\x9E",		"\x9F\x49"=>"\xE6\xAB\x91",		"\x9F\x4A"=>"\xE6\xAB\x9F",		"\x9F\x4B"=>"\xE6\xAA\xAA",		"\x9F\x4C"=>"\xE6\xAB\x9A",		"\x9F\x4D"=>"\xE6\xAB\xAA",		"\x9F\x4E"=>"\xE6\xAB\xBB",		"\x9F\x4F"=>"\xE6\xAC\x85",		"\x9F\x50"=>"\xE8\x98\x96",		"\x9F\x51"=>"\xE6\xAB\xBA",		"\x9F\x52"=>"\xE6\xAC\x92",		"\x9F\x53"=>"\xE6\xAC\x96",		"\x9F\x54"=>"\xE9\xAC\xB1",		"\x9F\x55"=>"\xE6\xAC\x9F",		"\x9F\x56"=>"\xE6\xAC\xB8",		"\x9F\x57"=>"\xE6\xAC\xB7",		"\x9F\x58"=>"\xE7\x9B\x9C",		"\x9F\x59"=>"\xE6\xAC\xB9",		"\x9F\x5A"=>"\xE9\xA3\xAE",		"\x9F\x5B"=>"\xE6\xAD\x87",		"\x9F\x5C"=>"\xE6\xAD\x83",		"\x9F\x5D"=>"\xE6\xAD\x89",		"\x9F\x5E"=>"\xE6\xAD\x90",		"\x9F\x5F"=>"\xE6\xAD\x99",		"\x9F\x60"=>"\xE6\xAD\x94",		"\x9F\x61"=>"\xE6\xAD\x9B",		"\x9F\x62"=>"\xE6\xAD\x9F",		"\x9F\x63"=>"\xE6\xAD\xA1",		"\x9F\x64"=>"\xE6\xAD\xB8",		"\x9F\x65"=>"\xE6\xAD\xB9",		"\x9F\x66"=>"\xE6\xAD\xBF",		"\x9F\x67"=>"\xE6\xAE\x80",		"\x9F\x68"=>"\xE6\xAE\x84",		"\x9F\x69"=>"\xE6\xAE\x83",		"\x9F\x6A"=>"\xE6\xAE\x8D",		"\x9F\x6B"=>"\xE6\xAE\x98",		"\x9F\x6C"=>"\xE6\xAE\x95",		"\x9F\x6D"=>"\xE6\xAE\x9E",		"\x9F\x6E"=>"\xE6\xAE\xA4",		"\x9F\x6F"=>"\xE6\xAE\xAA",		"\x9F\x70"=>"\xE6\xAE\xAB",		"\x9F\x71"=>"\xE6\xAE\xAF",		"\x9F\x72"=>"\xE6\xAE\xB2",		"\x9F\x73"=>"\xE6\xAE\xB1",		"\x9F\x74"=>"\xE6\xAE\xB3",		"\x9F\x75"=>"\xE6\xAE\xB7",		"\x9F\x76"=>"\xE6\xAE\xBC",		"\x9F\x77"=>"\xE6\xAF\x86",		"\x9F\x78"=>"\xE6\xAF\x8B",		"\x9F\x79"=>"\xE6\xAF\x93",		"\x9F\x7A"=>"\xE6\xAF\x9F",		"\x9F\x7B"=>"\xE6\xAF\xAC",		"\x9F\x7C"=>"\xE6\xAF\xAB",		"\x9F\x7D"=>"\xE6\xAF\xB3",		"\x9F\x7E"=>"\xE6\xAF\xAF",		"\x9F\x80"=>"\xE9\xBA\xBE",		"\x9F\x81"=>"\xE6\xB0\x88",		"\x9F\x82"=>"\xE6\xB0\x93",		"\x9F\x83"=>"\xE6\xB0\x94",		"\x9F\x84"=>"\xE6\xB0\x9B",		"\x9F\x85"=>"\xE6\xB0\xA4",		"\x9F\x86"=>"\xE6\xB0\xA3",		"\x9F\x87"=>"\xE6\xB1\x9E",		"\x9F\x88"=>"\xE6\xB1\x95",		"\x9F\x89"=>"\xE6\xB1\xA2",		"\x9F\x8A"=>"\xE6\xB1\xAA",		"\x9F\x8B"=>"\xE6\xB2\x82",		"\x9F\x8C"=>"\xE6\xB2\x8D",		"\x9F\x8D"=>"\xE6\xB2\x9A",		"\x9F\x8E"=>"\xE6\xB2\x81",		"\x9F\x8F"=>"\xE6\xB2\x9B",		"\x9F\x90"=>"\xE6\xB1\xBE",		"\x9F\x91"=>"\xE6\xB1\xA8",		"\x9F\x92"=>"\xE6\xB1\xB3",		"\x9F\x93"=>"\xE6\xB2\x92",		"\x9F\x94"=>"\xE6\xB2\x90",		"\x9F\x95"=>"\xE6\xB3\x84",		"\x9F\x96"=>"\xE6\xB3\xB1",		"\x9F\x97"=>"\xE6\xB3\x93",		"\x9F\x98"=>"\xE6\xB2\xBD",		"\x9F\x99"=>"\xE6\xB3\x97",		"\x9F\x9A"=>"\xE6\xB3\x85",		"\x9F\x9B"=>"\xE6\xB3\x9D",		"\x9F\x9C"=>"\xE6\xB2\xAE",		"\x9F\x9D"=>"\xE6\xB2\xB1",		"\x9F\x9E"=>"\xE6\xB2\xBE",		"\x9F\x9F"=>"\xE6\xB2\xBA",		"\x9F\xA0"=>"\xE6\xB3\x9B",		"\x9F\xA1"=>"\xE6\xB3\xAF",		"\x9F\xA2"=>"\xE6\xB3\x99",		"\x9F\xA3"=>"\xE6\xB3\xAA",		"\x9F\xA4"=>"\xE6\xB4\x9F",		"\x9F\xA5"=>"\xE8\xA1\x8D",		"\x9F\xA6"=>"\xE6\xB4\xB6",		"\x9F\xA7"=>"\xE6\xB4\xAB",		"\x9F\xA8"=>"\xE6\xB4\xBD",		"\x9F\xA9"=>"\xE6\xB4\xB8",		"\x9F\xAA"=>"\xE6\xB4\x99",		"\x9F\xAB"=>"\xE6\xB4\xB5",		"\x9F\xAC"=>"\xE6\xB4\xB3",		"\x9F\xAD"=>"\xE6\xB4\x92",		"\x9F\xAE"=>"\xE6\xB4\x8C",		"\x9F\xAF"=>"\xE6\xB5\xA3",		"\x9F\xB0"=>"\xE6\xB6\x93",		"\x9F\xB1"=>"\xE6\xB5\xA4",		"\x9F\xB2"=>"\xE6\xB5\x9A",		"\x9F\xB3"=>"\xE6\xB5\xB9",		"\x9F\xB4"=>"\xE6\xB5\x99",		"\x9F\xB5"=>"\xE6\xB6\x8E",		"\x9F\xB6"=>"\xE6\xB6\x95",		"\x9F\xB7"=>"\xE6\xBF\xA4",		"\x9F\xB8"=>"\xE6\xB6\x85",		"\x9F\xB9"=>"\xE6\xB7\xB9",		"\x9F\xBA"=>"\xE6\xB8\x95",		"\x9F\xBB"=>"\xE6\xB8\x8A",		"\x9F\xBC"=>"\xE6\xB6\xB5",		"\x9F\xBD"=>"\xE6\xB7\x87",		"\x9F\xBE"=>"\xE6\xB7\xA6",		"\x9F\xBF"=>"\xE6\xB6\xB8",		"\x9F\xC0"=>"\xE6\xB7\x86",		"\x9F\xC1"=>"\xE6\xB7\xAC",		"\x9F\xC2"=>"\xE6\xB7\x9E",		"\x9F\xC3"=>"\xE6\xB7\x8C",		"\x9F\xC4"=>"\xE6\xB7\xA8",		"\x9F\xC5"=>"\xE6\xB7\x92",		"\x9F\xC6"=>"\xE6\xB7\x85",		"\x9F\xC7"=>"\xE6\xB7\xBA",		"\x9F\xC8"=>"\xE6\xB7\x99",		"\x9F\xC9"=>"\xE6\xB7\xA4",		"\x9F\xCA"=>"\xE6\xB7\x95",		"\x9F\xCB"=>"\xE6\xB7\xAA",		"\x9F\xCC"=>"\xE6\xB7\xAE",		"\x9F\xCD"=>"\xE6\xB8\xAD",		"\x9F\xCE"=>"\xE6\xB9\xAE",		"\x9F\xCF"=>"\xE6\xB8\xAE",		"\x9F\xD0"=>"\xE6\xB8\x99",		"\x9F\xD1"=>"\xE6\xB9\xB2",		"\x9F\xD2"=>"\xE6\xB9\x9F",		"\x9F\xD3"=>"\xE6\xB8\xBE",		"\x9F\xD4"=>"\xE6\xB8\xA3",		"\x9F\xD5"=>"\xE6\xB9\xAB",		"\x9F\xD6"=>"\xE6\xB8\xAB",		"\x9F\xD7"=>"\xE6\xB9\xB6",		"\x9F\xD8"=>"\xE6\xB9\x8D",		"\x9F\xD9"=>"\xE6\xB8\x9F",		"\x9F\xDA"=>"\xE6\xB9\x83",		"\x9F\xDB"=>"\xE6\xB8\xBA",		"\x9F\xDC"=>"\xE6\xB9\x8E",		"\x9F\xDD"=>"\xE6\xB8\xA4",		"\x9F\xDE"=>"\xE6\xBB\xBF",		"\x9F\xDF"=>"\xE6\xB8\x9D",		"\x9F\xE0"=>"\xE6\xB8\xB8",		"\x9F\xE1"=>"\xE6\xBA\x82",		"\x9F\xE2"=>"\xE6\xBA\xAA",		"\x9F\xE3"=>"\xE6\xBA\x98",		"\x9F\xE4"=>"\xE6\xBB\x89",		"\x9F\xE5"=>"\xE6\xBA\xB7",		"\x9F\xE6"=>"\xE6\xBB\x93",		"\x9F\xE7"=>"\xE6\xBA\xBD",		"\x9F\xE8"=>"\xE6\xBA\xAF",		"\x9F\xE9"=>"\xE6\xBB\x84",		"\x9F\xEA"=>"\xE6\xBA\xB2",		"\x9F\xEB"=>"\xE6\xBB\x94",		"\x9F\xEC"=>"\xE6\xBB\x95",		"\x9F\xED"=>"\xE6\xBA\x8F",		"\x9F\xEE"=>"\xE6\xBA\xA5",		"\x9F\xEF"=>"\xE6\xBB\x82",		"\x9F\xF0"=>"\xE6\xBA\x9F",		"\x9F\xF1"=>"\xE6\xBD\x81",		"\x9F\xF2"=>"\xE6\xBC\x91",		"\x9F\xF3"=>"\xE7\x81\x8C",		"\x9F\xF4"=>"\xE6\xBB\xAC",		"\x9F\xF5"=>"\xE6\xBB\xB8",		"\x9F\xF6"=>"\xE6\xBB\xBE",		"\x9F\xF7"=>"\xE6\xBC\xBF",		"\x9F\xF8"=>"\xE6\xBB\xB2",		"\x9F\xF9"=>"\xE6\xBC\xB1",		"\x9F\xFA"=>"\xE6\xBB\xAF",		"\x9F\xFB"=>"\xE6\xBC\xB2",		"\x9F\xFC"=>"\xE6\xBB\x8C",		"\xA1"=>"\xEF\xBD\xA1",		"\xA2"=>"\xEF\xBD\xA2",		"\xA3"=>"\xEF\xBD\xA3",		"\xA4"=>"\xEF\xBD\xA4",		"\xA5"=>"\xEF\xBD\xA5",		"\xA6"=>"\xEF\xBD\xA6",		"\xA7"=>"\xEF\xBD\xA7",		"\xA8"=>"\xEF\xBD\xA8",		"\xA9"=>"\xEF\xBD\xA9",		"\xAA"=>"\xEF\xBD\xAA",		"\xAB"=>"\xEF\xBD\xAB",		"\xAC"=>"\xEF\xBD\xAC",		"\xAD"=>"\xEF\xBD\xAD",		"\xAE"=>"\xEF\xBD\xAE",		"\xAF"=>"\xEF\xBD\xAF",		"\xB0"=>"\xEF\xBD\xB0",		"\xB1"=>"\xEF\xBD\xB1",		"\xB2"=>"\xEF\xBD\xB2",		"\xB3"=>"\xEF\xBD\xB3",		"\xB4"=>"\xEF\xBD\xB4",		"\xB5"=>"\xEF\xBD\xB5",		"\xB6"=>"\xEF\xBD\xB6",		"\xB7"=>"\xEF\xBD\xB7",		"\xB8"=>"\xEF\xBD\xB8",		"\xB9"=>"\xEF\xBD\xB9",		"\xBA"=>"\xEF\xBD\xBA",		"\xBB"=>"\xEF\xBD\xBB",		"\xBC"=>"\xEF\xBD\xBC",		"\xBD"=>"\xEF\xBD\xBD",		"\xBE"=>"\xEF\xBD\xBE",		"\xBF"=>"\xEF\xBD\xBF",		"\xC0"=>"\xEF\xBE\x80",		"\xC1"=>"\xEF\xBE\x81",		"\xC2"=>"\xEF\xBE\x82",		"\xC3"=>"\xEF\xBE\x83",		"\xC4"=>"\xEF\xBE\x84",		"\xC5"=>"\xEF\xBE\x85",		"\xC6"=>"\xEF\xBE\x86",		"\xC7"=>"\xEF\xBE\x87",		"\xC8"=>"\xEF\xBE\x88",		"\xC9"=>"\xEF\xBE\x89",		"\xCA"=>"\xEF\xBE\x8A",		"\xCB"=>"\xEF\xBE\x8B",		"\xCC"=>"\xEF\xBE\x8C",		"\xCD"=>"\xEF\xBE\x8D",		"\xCE"=>"\xEF\xBE\x8E",		"\xCF"=>"\xEF\xBE\x8F",		"\xD0"=>"\xEF\xBE\x90",		"\xD1"=>"\xEF\xBE\x91",		"\xD2"=>"\xEF\xBE\x92",		"\xD3"=>"\xEF\xBE\x93",		"\xD4"=>"\xEF\xBE\x94",		"\xD5"=>"\xEF\xBE\x95",		"\xD6"=>"\xEF\xBE\x96",		"\xD7"=>"\xEF\xBE\x97",		"\xD8"=>"\xEF\xBE\x98",		"\xD9"=>"\xEF\xBE\x99",		"\xDA"=>"\xEF\xBE\x9A",		"\xDB"=>"\xEF\xBE\x9B",		"\xDC"=>"\xEF\xBE\x9C",		"\xDD"=>"\xEF\xBE\x9D",		"\xDE"=>"\xEF\xBE\x9E",		"\xDF"=>"\xEF\xBE\x9F",		"\xE0\x40"=>"\xE6\xBC\xBE",		"\xE0\x41"=>"\xE6\xBC\x93",		"\xE0\x42"=>"\xE6\xBB\xB7",		"\xE0\x43"=>"\xE6\xBE\x86",		"\xE0\x44"=>"\xE6\xBD\xBA",		"\xE0\x45"=>"\xE6\xBD\xB8",		"\xE0\x46"=>"\xE6\xBE\x81",		"\xE0\x47"=>"\xE6\xBE\x80",		"\xE0\x48"=>"\xE6\xBD\xAF",		"\xE0\x49"=>"\xE6\xBD\x9B",		"\xE0\x4A"=>"\xE6\xBF\xB3",		"\xE0\x4B"=>"\xE6\xBD\xAD",		"\xE0\x4C"=>"\xE6\xBE\x82",		"\xE0\x4D"=>"\xE6\xBD\xBC",		"\xE0\x4E"=>"\xE6\xBD\x98",		"\xE0\x4F"=>"\xE6\xBE\x8E",		"\xE0\x50"=>"\xE6\xBE\x91",		"\xE0\x51"=>"\xE6\xBF\x82",		"\xE0\x52"=>"\xE6\xBD\xA6",		"\xE0\x53"=>"\xE6\xBE\xB3",		"\xE0\x54"=>"\xE6\xBE\xA3",		"\xE0\x55"=>"\xE6\xBE\xA1",		"\xE0\x56"=>"\xE6\xBE\xA4",		"\xE0\x57"=>"\xE6\xBE\xB9",		"\xE0\x58"=>"\xE6\xBF\x86",		"\xE0\x59"=>"\xE6\xBE\xAA",		"\xE0\x5A"=>"\xE6\xBF\x9F",		"\xE0\x5B"=>"\xE6\xBF\x95",		"\xE0\x5C"=>"\xE6\xBF\xAC",		"\xE0\x5D"=>"\xE6\xBF\x94",		"\xE0\x5E"=>"\xE6\xBF\x98",		"\xE0\x5F"=>"\xE6\xBF\xB1",		"\xE0\x60"=>"\xE6\xBF\xAE",		"\xE0\x61"=>"\xE6\xBF\x9B",		"\xE0\x62"=>"\xE7\x80\x89",		"\xE0\x63"=>"\xE7\x80\x8B",		"\xE0\x64"=>"\xE6\xBF\xBA",		"\xE0\x65"=>"\xE7\x80\x91",		"\xE0\x66"=>"\xE7\x80\x81",		"\xE0\x67"=>"\xE7\x80\x8F",		"\xE0\x68"=>"\xE6\xBF\xBE",		"\xE0\x69"=>"\xE7\x80\x9B",		"\xE0\x6A"=>"\xE7\x80\x9A",		"\xE0\x6B"=>"\xE6\xBD\xB4",		"\xE0\x6C"=>"\xE7\x80\x9D",		"\xE0\x6D"=>"\xE7\x80\x98",		"\xE0\x6E"=>"\xE7\x80\x9F",		"\xE0\x6F"=>"\xE7\x80\xB0",		"\xE0\x70"=>"\xE7\x80\xBE",		"\xE0\x71"=>"\xE7\x80\xB2",		"\xE0\x72"=>"\xE7\x81\x91",		"\xE0\x73"=>"\xE7\x81\xA3",		"\xE0\x74"=>"\xE7\x82\x99",		"\xE0\x75"=>"\xE7\x82\x92",		"\xE0\x76"=>"\xE7\x82\xAF",		"\xE0\x77"=>"\xE7\x83\xB1",		"\xE0\x78"=>"\xE7\x82\xAC",		"\xE0\x79"=>"\xE7\x82\xB8",		"\xE0\x7A"=>"\xE7\x82\xB3",		"\xE0\x7B"=>"\xE7\x82\xAE",		"\xE0\x7C"=>"\xE7\x83\x9F",		"\xE0\x7D"=>"\xE7\x83\x8B",		"\xE0\x7E"=>"\xE7\x83\x9D",		"\xE0\x80"=>"\xE7\x83\x99",		"\xE0\x81"=>"\xE7\x84\x89",		"\xE0\x82"=>"\xE7\x83\xBD",		"\xE0\x83"=>"\xE7\x84\x9C",		"\xE0\x84"=>"\xE7\x84\x99",		"\xE0\x85"=>"\xE7\x85\xA5",		"\xE0\x86"=>"\xE7\x85\x95",		"\xE0\x87"=>"\xE7\x86\x88",		"\xE0\x88"=>"\xE7\x85\xA6",		"\xE0\x89"=>"\xE7\x85\xA2",		"\xE0\x8A"=>"\xE7\x85\x8C",		"\xE0\x8B"=>"\xE7\x85\x96",		"\xE0\x8C"=>"\xE7\x85\xAC",		"\xE0\x8D"=>"\xE7\x86\x8F",		"\xE0\x8E"=>"\xE7\x87\xBB",		"\xE0\x8F"=>"\xE7\x86\x84",		"\xE0\x90"=>"\xE7\x86\x95",		"\xE0\x91"=>"\xE7\x86\xA8",		"\xE0\x92"=>"\xE7\x86\xAC",		"\xE0\x93"=>"\xE7\x87\x97",		"\xE0\x94"=>"\xE7\x86\xB9",		"\xE0\x95"=>"\xE7\x86\xBE",		"\xE0\x96"=>"\xE7\x87\x92",		"\xE0\x97"=>"\xE7\x87\x89",		"\xE0\x98"=>"\xE7\x87\x94",		"\xE0\x99"=>"\xE7\x87\x8E",		"\xE0\x9A"=>"\xE7\x87\xA0",		"\xE0\x9B"=>"\xE7\x87\xAC",		"\xE0\x9C"=>"\xE7\x87\xA7",		"\xE0\x9D"=>"\xE7\x87\xB5",		"\xE0\x9E"=>"\xE7\x87\xBC",		"\xE0\x9F"=>"\xE7\x87\xB9",		"\xE0\xA0"=>"\xE7\x87\xBF",		"\xE0\xA1"=>"\xE7\x88\x8D",		"\xE0\xA2"=>"\xE7\x88\x90",		"\xE0\xA3"=>"\xE7\x88\x9B",		"\xE0\xA4"=>"\xE7\x88\xA8",		"\xE0\xA5"=>"\xE7\x88\xAD",		"\xE0\xA6"=>"\xE7\x88\xAC",		"\xE0\xA7"=>"\xE7\x88\xB0",		"\xE0\xA8"=>"\xE7\x88\xB2",		"\xE0\xA9"=>"\xE7\x88\xBB",		"\xE0\xAA"=>"\xE7\x88\xBC",		"\xE0\xAB"=>"\xE7\x88\xBF",		"\xE0\xAC"=>"\xE7\x89\x80",		"\xE0\xAD"=>"\xE7\x89\x86",		"\xE0\xAE"=>"\xE7\x89\x8B",		"\xE0\xAF"=>"\xE7\x89\x98",		"\xE0\xB0"=>"\xE7\x89\xB4",		"\xE0\xB1"=>"\xE7\x89\xBE",		"\xE0\xB2"=>"\xE7\x8A\x82",		"\xE0\xB3"=>"\xE7\x8A\x81",		"\xE0\xB4"=>"\xE7\x8A\x87",		"\xE0\xB5"=>"\xE7\x8A\x92",		"\xE0\xB6"=>"\xE7\x8A\x96",		"\xE0\xB7"=>"\xE7\x8A\xA2",		"\xE0\xB8"=>"\xE7\x8A\xA7",		"\xE0\xB9"=>"\xE7\x8A\xB9",		"\xE0\xBA"=>"\xE7\x8A\xB2",		"\xE0\xBB"=>"\xE7\x8B\x83",		"\xE0\xBC"=>"\xE7\x8B\x86",		"\xE0\xBD"=>"\xE7\x8B\x84",		"\xE0\xBE"=>"\xE7\x8B\x8E",		"\xE0\xBF"=>"\xE7\x8B\x92",		"\xE0\xC0"=>"\xE7\x8B\xA2",		"\xE0\xC1"=>"\xE7\x8B\xA0",		"\xE0\xC2"=>"\xE7\x8B\xA1",		"\xE0\xC3"=>"\xE7\x8B\xB9",		"\xE0\xC4"=>"\xE7\x8B\xB7",		"\xE0\xC5"=>"\xE5\x80\x8F",		"\xE0\xC6"=>"\xE7\x8C\x97",		"\xE0\xC7"=>"\xE7\x8C\x8A",		"\xE0\xC8"=>"\xE7\x8C\x9C",		"\xE0\xC9"=>"\xE7\x8C\x96",		"\xE0\xCA"=>"\xE7\x8C\x9D",		"\xE0\xCB"=>"\xE7\x8C\xB4",		"\xE0\xCC"=>"\xE7\x8C\xAF",		"\xE0\xCD"=>"\xE7\x8C\xA9",		"\xE0\xCE"=>"\xE7\x8C\xA5",		"\xE0\xCF"=>"\xE7\x8C\xBE",		"\xE0\xD0"=>"\xE7\x8D\x8E",		"\xE0\xD1"=>"\xE7\x8D\x8F",		"\xE0\xD2"=>"\xE9\xBB\x98",		"\xE0\xD3"=>"\xE7\x8D\x97",		"\xE0\xD4"=>"\xE7\x8D\xAA",		"\xE0\xD5"=>"\xE7\x8D\xA8",		"\xE0\xD6"=>"\xE7\x8D\xB0",		"\xE0\xD7"=>"\xE7\x8D\xB8",		"\xE0\xD8"=>"\xE7\x8D\xB5",		"\xE0\xD9"=>"\xE7\x8D\xBB",		"\xE0\xDA"=>"\xE7\x8D\xBA",		"\xE0\xDB"=>"\xE7\x8F\x88",		"\xE0\xDC"=>"\xE7\x8E\xB3",		"\xE0\xDD"=>"\xE7\x8F\x8E",		"\xE0\xDE"=>"\xE7\x8E\xBB",		"\xE0\xDF"=>"\xE7\x8F\x80",		"\xE0\xE0"=>"\xE7\x8F\xA5",		"\xE0\xE1"=>"\xE7\x8F\xAE",		"\xE0\xE2"=>"\xE7\x8F\x9E",		"\xE0\xE3"=>"\xE7\x92\xA2",		"\xE0\xE4"=>"\xE7\x90\x85",		"\xE0\xE5"=>"\xE7\x91\xAF",		"\xE0\xE6"=>"\xE7\x90\xA5",		"\xE0\xE7"=>"\xE7\x8F\xB8",		"\xE0\xE8"=>"\xE7\x90\xB2",		"\xE0\xE9"=>"\xE7\x90\xBA",		"\xE0\xEA"=>"\xE7\x91\x95",		"\xE0\xEB"=>"\xE7\x90\xBF",		"\xE0\xEC"=>"\xE7\x91\x9F",		"\xE0\xED"=>"\xE7\x91\x99",		"\xE0\xEE"=>"\xE7\x91\x81",		"\xE0\xEF"=>"\xE7\x91\x9C",		"\xE0\xF0"=>"\xE7\x91\xA9",		"\xE0\xF1"=>"\xE7\x91\xB0",		"\xE0\xF2"=>"\xE7\x91\xA3",		"\xE0\xF3"=>"\xE7\x91\xAA",		"\xE0\xF4"=>"\xE7\x91\xB6",		"\xE0\xF5"=>"\xE7\x91\xBE",		"\xE0\xF6"=>"\xE7\x92\x8B",		"\xE0\xF7"=>"\xE7\x92\x9E",		"\xE0\xF8"=>"\xE7\x92\xA7",		"\xE0\xF9"=>"\xE7\x93\x8A",		"\xE0\xFA"=>"\xE7\x93\x8F",		"\xE0\xFB"=>"\xE7\x93\x94",		"\xE0\xFC"=>"\xE7\x8F\xB1",		"\xE1\x40"=>"\xE7\x93\xA0",		"\xE1\x41"=>"\xE7\x93\xA3",		"\xE1\x42"=>"\xE7\x93\xA7",		"\xE1\x43"=>"\xE7\x93\xA9",		"\xE1\x44"=>"\xE7\x93\xAE",		"\xE1\x45"=>"\xE7\x93\xB2",		"\xE1\x46"=>"\xE7\x93\xB0",		"\xE1\x47"=>"\xE7\x93\xB1",		"\xE1\x48"=>"\xE7\x93\xB8",		"\xE1\x49"=>"\xE7\x93\xB7",		"\xE1\x4A"=>"\xE7\x94\x84",		"\xE1\x4B"=>"\xE7\x94\x83",		"\xE1\x4C"=>"\xE7\x94\x85",		"\xE1\x4D"=>"\xE7\x94\x8C",		"\xE1\x4E"=>"\xE7\x94\x8E",		"\xE1\x4F"=>"\xE7\x94\x8D",		"\xE1\x50"=>"\xE7\x94\x95",		"\xE1\x51"=>"\xE7\x94\x93",		"\xE1\x52"=>"\xE7\x94\x9E",		"\xE1\x53"=>"\xE7\x94\xA6",		"\xE1\x54"=>"\xE7\x94\xAC",		"\xE1\x55"=>"\xE7\x94\xBC",		"\xE1\x56"=>"\xE7\x95\x84",		"\xE1\x57"=>"\xE7\x95\x8D",		"\xE1\x58"=>"\xE7\x95\x8A",		"\xE1\x59"=>"\xE7\x95\x89",		"\xE1\x5A"=>"\xE7\x95\x9B",		"\xE1\x5B"=>"\xE7\x95\x86",		"\xE1\x5C"=>"\xE7\x95\x9A",		"\xE1\x5D"=>"\xE7\x95\xA9",		"\xE1\x5E"=>"\xE7\x95\xA4",		"\xE1\x5F"=>"\xE7\x95\xA7",		"\xE1\x60"=>"\xE7\x95\xAB",		"\xE1\x61"=>"\xE7\x95\xAD",		"\xE1\x62"=>"\xE7\x95\xB8",		"\xE1\x63"=>"\xE7\x95\xB6",		"\xE1\x64"=>"\xE7\x96\x86",		"\xE1\x65"=>"\xE7\x96\x87",		"\xE1\x66"=>"\xE7\x95\xB4",		"\xE1\x67"=>"\xE7\x96\x8A",		"\xE1\x68"=>"\xE7\x96\x89",		"\xE1\x69"=>"\xE7\x96\x82",		"\xE1\x6A"=>"\xE7\x96\x94",		"\xE1\x6B"=>"\xE7\x96\x9A",		"\xE1\x6C"=>"\xE7\x96\x9D",		"\xE1\x6D"=>"\xE7\x96\xA5",		"\xE1\x6E"=>"\xE7\x96\xA3",		"\xE1\x6F"=>"\xE7\x97\x82",		"\xE1\x70"=>"\xE7\x96\xB3",		"\xE1\x71"=>"\xE7\x97\x83",		"\xE1\x72"=>"\xE7\x96\xB5",		"\xE1\x73"=>"\xE7\x96\xBD",		"\xE1\x74"=>"\xE7\x96\xB8",		"\xE1\x75"=>"\xE7\x96\xBC",		"\xE1\x76"=>"\xE7\x96\xB1",		"\xE1\x77"=>"\xE7\x97\x8D",		"\xE1\x78"=>"\xE7\x97\x8A",		"\xE1\x79"=>"\xE7\x97\x92",		"\xE1\x7A"=>"\xE7\x97\x99",		"\xE1\x7B"=>"\xE7\x97\xA3",		"\xE1\x7C"=>"\xE7\x97\x9E",		"\xE1\x7D"=>"\xE7\x97\xBE",		"\xE1\x7E"=>"\xE7\x97\xBF",		"\xE1\x80"=>"\xE7\x97\xBC",		"\xE1\x81"=>"\xE7\x98\x81",		"\xE1\x82"=>"\xE7\x97\xB0",		"\xE1\x83"=>"\xE7\x97\xBA",		"\xE1\x84"=>"\xE7\x97\xB2",		"\xE1\x85"=>"\xE7\x97\xB3",		"\xE1\x86"=>"\xE7\x98\x8B",		"\xE1\x87"=>"\xE7\x98\x8D",		"\xE1\x88"=>"\xE7\x98\x89",		"\xE1\x89"=>"\xE7\x98\x9F",		"\xE1\x8A"=>"\xE7\x98\xA7",		"\xE1\x8B"=>"\xE7\x98\xA0",		"\xE1\x8C"=>"\xE7\x98\xA1",		"\xE1\x8D"=>"\xE7\x98\xA2",		"\xE1\x8E"=>"\xE7\x98\xA4",		"\xE1\x8F"=>"\xE7\x98\xB4",		"\xE1\x90"=>"\xE7\x98\xB0",		"\xE1\x91"=>"\xE7\x98\xBB",		"\xE1\x92"=>"\xE7\x99\x87",		"\xE1\x93"=>"\xE7\x99\x88",		"\xE1\x94"=>"\xE7\x99\x86",		"\xE1\x95"=>"\xE7\x99\x9C",		"\xE1\x96"=>"\xE7\x99\x98",		"\xE1\x97"=>"\xE7\x99\xA1",		"\xE1\x98"=>"\xE7\x99\xA2",		"\xE1\x99"=>"\xE7\x99\xA8",		"\xE1\x9A"=>"\xE7\x99\xA9",		"\xE1\x9B"=>"\xE7\x99\xAA",		"\xE1\x9C"=>"\xE7\x99\xA7",		"\xE1\x9D"=>"\xE7\x99\xAC",		"\xE1\x9E"=>"\xE7\x99\xB0",		"\xE1\x9F"=>"\xE7\x99\xB2",		"\xE1\xA0"=>"\xE7\x99\xB6",		"\xE1\xA1"=>"\xE7\x99\xB8",		"\xE1\xA2"=>"\xE7\x99\xBC",		"\xE1\xA3"=>"\xE7\x9A\x80",		"\xE1\xA4"=>"\xE7\x9A\x83",		"\xE1\xA5"=>"\xE7\x9A\x88",		"\xE1\xA6"=>"\xE7\x9A\x8B",		"\xE1\xA7"=>"\xE7\x9A\x8E",		"\xE1\xA8"=>"\xE7\x9A\x96",		"\xE1\xA9"=>"\xE7\x9A\x93",		"\xE1\xAA"=>"\xE7\x9A\x99",		"\xE1\xAB"=>"\xE7\x9A\x9A",		"\xE1\xAC"=>"\xE7\x9A\xB0",		"\xE1\xAD"=>"\xE7\x9A\xB4",		"\xE1\xAE"=>"\xE7\x9A\xB8",		"\xE1\xAF"=>"\xE7\x9A\xB9",		"\xE1\xB0"=>"\xE7\x9A\xBA",		"\xE1\xB1"=>"\xE7\x9B\x82",		"\xE1\xB2"=>"\xE7\x9B\x8D",		"\xE1\xB3"=>"\xE7\x9B\x96",		"\xE1\xB4"=>"\xE7\x9B\x92",		"\xE1\xB5"=>"\xE7\x9B\x9E",		"\xE1\xB6"=>"\xE7\x9B\xA1",		"\xE1\xB7"=>"\xE7\x9B\xA5",		"\xE1\xB8"=>"\xE7\x9B\xA7",		"\xE1\xB9"=>"\xE7\x9B\xAA",		"\xE1\xBA"=>"\xE8\x98\xAF",		"\xE1\xBB"=>"\xE7\x9B\xBB",		"\xE1\xBC"=>"\xE7\x9C\x88",		"\xE1\xBD"=>"\xE7\x9C\x87",		"\xE1\xBE"=>"\xE7\x9C\x84",		"\xE1\xBF"=>"\xE7\x9C\xA9",		"\xE1\xC0"=>"\xE7\x9C\xA4",		"\xE1\xC1"=>"\xE7\x9C\x9E",		"\xE1\xC2"=>"\xE7\x9C\xA5",		"\xE1\xC3"=>"\xE7\x9C\xA6",		"\xE1\xC4"=>"\xE7\x9C\x9B",		"\xE1\xC5"=>"\xE7\x9C\xB7",		"\xE1\xC6"=>"\xE7\x9C\xB8",		"\xE1\xC7"=>"\xE7\x9D\x87",		"\xE1\xC8"=>"\xE7\x9D\x9A",		"\xE1\xC9"=>"\xE7\x9D\xA8",		"\xE1\xCA"=>"\xE7\x9D\xAB",		"\xE1\xCB"=>"\xE7\x9D\x9B",		"\xE1\xCC"=>"\xE7\x9D\xA5",		"\xE1\xCD"=>"\xE7\x9D\xBF",		"\xE1\xCE"=>"\xE7\x9D\xBE",		"\xE1\xCF"=>"\xE7\x9D\xB9",		"\xE1\xD0"=>"\xE7\x9E\x8E",		"\xE1\xD1"=>"\xE7\x9E\x8B",		"\xE1\xD2"=>"\xE7\x9E\x91",		"\xE1\xD3"=>"\xE7\x9E\xA0",		"\xE1\xD4"=>"\xE7\x9E\x9E",		"\xE1\xD5"=>"\xE7\x9E\xB0",		"\xE1\xD6"=>"\xE7\x9E\xB6",		"\xE1\xD7"=>"\xE7\x9E\xB9",		"\xE1\xD8"=>"\xE7\x9E\xBF",		"\xE1\xD9"=>"\xE7\x9E\xBC",		"\xE1\xDA"=>"\xE7\x9E\xBD",		"\xE1\xDB"=>"\xE7\x9E\xBB",		"\xE1\xDC"=>"\xE7\x9F\x87",		"\xE1\xDD"=>"\xE7\x9F\x8D",		"\xE1\xDE"=>"\xE7\x9F\x97",		"\xE1\xDF"=>"\xE7\x9F\x9A",		"\xE1\xE0"=>"\xE7\x9F\x9C",		"\xE1\xE1"=>"\xE7\x9F\xA3",		"\xE1\xE2"=>"\xE7\x9F\xAE",		"\xE1\xE3"=>"\xE7\x9F\xBC",		"\xE1\xE4"=>"\xE7\xA0\x8C",		"\xE1\xE5"=>"\xE7\xA0\x92",		"\xE1\xE6"=>"\xE7\xA4\xA6",		"\xE1\xE7"=>"\xE7\xA0\xA0",		"\xE1\xE8"=>"\xE7\xA4\xAA",		"\xE1\xE9"=>"\xE7\xA1\x85",		"\xE1\xEA"=>"\xE7\xA2\x8E",		"\xE1\xEB"=>"\xE7\xA1\xB4",		"\xE1\xEC"=>"\xE7\xA2\x86",		"\xE1\xED"=>"\xE7\xA1\xBC",		"\xE1\xEE"=>"\xE7\xA2\x9A",		"\xE1\xEF"=>"\xE7\xA2\x8C",		"\xE1\xF0"=>"\xE7\xA2\xA3",		"\xE1\xF1"=>"\xE7\xA2\xB5",		"\xE1\xF2"=>"\xE7\xA2\xAA",		"\xE1\xF3"=>"\xE7\xA2\xAF",		"\xE1\xF4"=>"\xE7\xA3\x91",		"\xE1\xF5"=>"\xE7\xA3\x86",		"\xE1\xF6"=>"\xE7\xA3\x8B",		"\xE1\xF7"=>"\xE7\xA3\x94",		"\xE1\xF8"=>"\xE7\xA2\xBE",		"\xE1\xF9"=>"\xE7\xA2\xBC",		"\xE1\xFA"=>"\xE7\xA3\x85",		"\xE1\xFB"=>"\xE7\xA3\x8A",		"\xE1\xFC"=>"\xE7\xA3\xAC",		"\xE2\x40"=>"\xE7\xA3\xA7",		"\xE2\x41"=>"\xE7\xA3\x9A",		"\xE2\x42"=>"\xE7\xA3\xBD",		"\xE2\x43"=>"\xE7\xA3\xB4",		"\xE2\x44"=>"\xE7\xA4\x87",		"\xE2\x45"=>"\xE7\xA4\x92",		"\xE2\x46"=>"\xE7\xA4\x91",		"\xE2\x47"=>"\xE7\xA4\x99",		"\xE2\x48"=>"\xE7\xA4\xAC",		"\xE2\x49"=>"\xE7\xA4\xAB",		"\xE2\x4A"=>"\xE7\xA5\x80",		"\xE2\x4B"=>"\xE7\xA5\xA0",		"\xE2\x4C"=>"\xE7\xA5\x97",		"\xE2\x4D"=>"\xE7\xA5\x9F",		"\xE2\x4E"=>"\xE7\xA5\x9A",		"\xE2\x4F"=>"\xE7\xA5\x95",		"\xE2\x50"=>"\xE7\xA5\x93",		"\xE2\x51"=>"\xE7\xA5\xBA",		"\xE2\x52"=>"\xE7\xA5\xBF",		"\xE2\x53"=>"\xE7\xA6\x8A",		"\xE2\x54"=>"\xE7\xA6\x9D",		"\xE2\x55"=>"\xE7\xA6\xA7",		"\xE2\x56"=>"\xE9\xBD\x8B",		"\xE2\x57"=>"\xE7\xA6\xAA",		"\xE2\x58"=>"\xE7\xA6\xAE",		"\xE2\x59"=>"\xE7\xA6\xB3",		"\xE2\x5A"=>"\xE7\xA6\xB9",		"\xE2\x5B"=>"\xE7\xA6\xBA",		"\xE2\x5C"=>"\xE7\xA7\x89",		"\xE2\x5D"=>"\xE7\xA7\x95",		"\xE2\x5E"=>"\xE7\xA7\xA7",		"\xE2\x5F"=>"\xE7\xA7\xAC",		"\xE2\x60"=>"\xE7\xA7\xA1",		"\xE2\x61"=>"\xE7\xA7\xA3",		"\xE2\x62"=>"\xE7\xA8\x88",		"\xE2\x63"=>"\xE7\xA8\x8D",		"\xE2\x64"=>"\xE7\xA8\x98",		"\xE2\x65"=>"\xE7\xA8\x99",		"\xE2\x66"=>"\xE7\xA8\xA0",		"\xE2\x67"=>"\xE7\xA8\x9F",		"\xE2\x68"=>"\xE7\xA6\x80",		"\xE2\x69"=>"\xE7\xA8\xB1",		"\xE2\x6A"=>"\xE7\xA8\xBB",		"\xE2\x6B"=>"\xE7\xA8\xBE",		"\xE2\x6C"=>"\xE7\xA8\xB7",		"\xE2\x6D"=>"\xE7\xA9\x83",		"\xE2\x6E"=>"\xE7\xA9\x97",		"\xE2\x6F"=>"\xE7\xA9\x89",		"\xE2\x70"=>"\xE7\xA9\xA1",		"\xE2\x71"=>"\xE7\xA9\xA2",		"\xE2\x72"=>"\xE7\xA9\xA9",		"\xE2\x73"=>"\xE9\xBE\x9D",		"\xE2\x74"=>"\xE7\xA9\xB0",		"\xE2\x75"=>"\xE7\xA9\xB9",		"\xE2\x76"=>"\xE7\xA9\xBD",		"\xE2\x77"=>"\xE7\xAA\x88",		"\xE2\x78"=>"\xE7\xAA\x97",		"\xE2\x79"=>"\xE7\xAA\x95",		"\xE2\x7A"=>"\xE7\xAA\x98",		"\xE2\x7B"=>"\xE7\xAA\x96",		"\xE2\x7C"=>"\xE7\xAA\xA9",		"\xE2\x7D"=>"\xE7\xAB\x88",		"\xE2\x7E"=>"\xE7\xAA\xB0",		"\xE2\x80"=>"\xE7\xAA\xB6",		"\xE2\x81"=>"\xE7\xAB\x85",		"\xE2\x82"=>"\xE7\xAB\x84",		"\xE2\x83"=>"\xE7\xAA\xBF",		"\xE2\x84"=>"\xE9\x82\x83",		"\xE2\x85"=>"\xE7\xAB\x87",		"\xE2\x86"=>"\xE7\xAB\x8A",		"\xE2\x87"=>"\xE7\xAB\x8D",		"\xE2\x88"=>"\xE7\xAB\x8F",		"\xE2\x89"=>"\xE7\xAB\x95",		"\xE2\x8A"=>"\xE7\xAB\x93",		"\xE2\x8B"=>"\xE7\xAB\x99",		"\xE2\x8C"=>"\xE7\xAB\x9A",		"\xE2\x8D"=>"\xE7\xAB\x9D",		"\xE2\x8E"=>"\xE7\xAB\xA1",		"\xE2\x8F"=>"\xE7\xAB\xA2",		"\xE2\x90"=>"\xE7\xAB\xA6",		"\xE2\x91"=>"\xE7\xAB\xAD",		"\xE2\x92"=>"\xE7\xAB\xB0",		"\xE2\x93"=>"\xE7\xAC\x82",		"\xE2\x94"=>"\xE7\xAC\x8F",		"\xE2\x95"=>"\xE7\xAC\x8A",		"\xE2\x96"=>"\xE7\xAC\x86",		"\xE2\x97"=>"\xE7\xAC\xB3",		"\xE2\x98"=>"\xE7\xAC\x98",		"\xE2\x99"=>"\xE7\xAC\x99",		"\xE2\x9A"=>"\xE7\xAC\x9E",		"\xE2\x9B"=>"\xE7\xAC\xB5",		"\xE2\x9C"=>"\xE7\xAC\xA8",		"\xE2\x9D"=>"\xE7\xAC\xB6",		"\xE2\x9E"=>"\xE7\xAD\x90",		"\xE2\x9F"=>"\xE7\xAD\xBA",		"\xE2\xA0"=>"\xE7\xAC\x84",		"\xE2\xA1"=>"\xE7\xAD\x8D",		"\xE2\xA2"=>"\xE7\xAC\x8B",		"\xE2\xA3"=>"\xE7\xAD\x8C",		"\xE2\xA4"=>"\xE7\xAD\x85",		"\xE2\xA5"=>"\xE7\xAD\xB5",		"\xE2\xA6"=>"\xE7\xAD\xA5",		"\xE2\xA7"=>"\xE7\xAD\xB4",		"\xE2\xA8"=>"\xE7\xAD\xA7",		"\xE2\xA9"=>"\xE7\xAD\xB0",		"\xE2\xAA"=>"\xE7\xAD\xB1",		"\xE2\xAB"=>"\xE7\xAD\xAC",		"\xE2\xAC"=>"\xE7\xAD\xAE",		"\xE2\xAD"=>"\xE7\xAE\x9D",		"\xE2\xAE"=>"\xE7\xAE\x98",		"\xE2\xAF"=>"\xE7\xAE\x9F",		"\xE2\xB0"=>"\xE7\xAE\x8D",		"\xE2\xB1"=>"\xE7\xAE\x9C",		"\xE2\xB2"=>"\xE7\xAE\x9A",		"\xE2\xB3"=>"\xE7\xAE\x8B",		"\xE2\xB4"=>"\xE7\xAE\x92",		"\xE2\xB5"=>"\xE7\xAE\x8F",		"\xE2\xB6"=>"\xE7\xAD\x9D",		"\xE2\xB7"=>"\xE7\xAE\x99",		"\xE2\xB8"=>"\xE7\xAF\x8B",		"\xE2\xB9"=>"\xE7\xAF\x81",		"\xE2\xBA"=>"\xE7\xAF\x8C",		"\xE2\xBB"=>"\xE7\xAF\x8F",		"\xE2\xBC"=>"\xE7\xAE\xB4",		"\xE2\xBD"=>"\xE7\xAF\x86",		"\xE2\xBE"=>"\xE7\xAF\x9D",		"\xE2\xBF"=>"\xE7\xAF\xA9",		"\xE2\xC0"=>"\xE7\xB0\x91",		"\xE2\xC1"=>"\xE7\xB0\x94",		"\xE2\xC2"=>"\xE7\xAF\xA6",		"\xE2\xC3"=>"\xE7\xAF\xA5",		"\xE2\xC4"=>"\xE7\xB1\xA0",		"\xE2\xC5"=>"\xE7\xB0\x80",		"\xE2\xC6"=>"\xE7\xB0\x87",		"\xE2\xC7"=>"\xE7\xB0\x93",		"\xE2\xC8"=>"\xE7\xAF\xB3",		"\xE2\xC9"=>"\xE7\xAF\xB7",		"\xE2\xCA"=>"\xE7\xB0\x97",		"\xE2\xCB"=>"\xE7\xB0\x8D",		"\xE2\xCC"=>"\xE7\xAF\xB6",		"\xE2\xCD"=>"\xE7\xB0\xA3",		"\xE2\xCE"=>"\xE7\xB0\xA7",		"\xE2\xCF"=>"\xE7\xB0\xAA",		"\xE2\xD0"=>"\xE7\xB0\x9F",		"\xE2\xD1"=>"\xE7\xB0\xB7",		"\xE2\xD2"=>"\xE7\xB0\xAB",		"\xE2\xD3"=>"\xE7\xB0\xBD",		"\xE2\xD4"=>"\xE7\xB1\x8C",		"\xE2\xD5"=>"\xE7\xB1\x83",		"\xE2\xD6"=>"\xE7\xB1\x94",		"\xE2\xD7"=>"\xE7\xB1\x8F",		"\xE2\xD8"=>"\xE7\xB1\x80",		"\xE2\xD9"=>"\xE7\xB1\x90",		"\xE2\xDA"=>"\xE7\xB1\x98",		"\xE2\xDB"=>"\xE7\xB1\x9F",		"\xE2\xDC"=>"\xE7\xB1\xA4",		"\xE2\xDD"=>"\xE7\xB1\x96",		"\xE2\xDE"=>"\xE7\xB1\xA5",		"\xE2\xDF"=>"\xE7\xB1\xAC",		"\xE2\xE0"=>"\xE7\xB1\xB5",		"\xE2\xE1"=>"\xE7\xB2\x83",		"\xE2\xE2"=>"\xE7\xB2\x90",		"\xE2\xE3"=>"\xE7\xB2\xA4",		"\xE2\xE4"=>"\xE7\xB2\xAD",		"\xE2\xE5"=>"\xE7\xB2\xA2",		"\xE2\xE6"=>"\xE7\xB2\xAB",		"\xE2\xE7"=>"\xE7\xB2\xA1",		"\xE2\xE8"=>"\xE7\xB2\xA8",		"\xE2\xE9"=>"\xE7\xB2\xB3",		"\xE2\xEA"=>"\xE7\xB2\xB2",		"\xE2\xEB"=>"\xE7\xB2\xB1",		"\xE2\xEC"=>"\xE7\xB2\xAE",		"\xE2\xED"=>"\xE7\xB2\xB9",		"\xE2\xEE"=>"\xE7\xB2\xBD",		"\xE2\xEF"=>"\xE7\xB3\x80",		"\xE2\xF0"=>"\xE7\xB3\x85",		"\xE2\xF1"=>"\xE7\xB3\x82",		"\xE2\xF2"=>"\xE7\xB3\x98",		"\xE2\xF3"=>"\xE7\xB3\x92",		"\xE2\xF4"=>"\xE7\xB3\x9C",		"\xE2\xF5"=>"\xE7\xB3\xA2",		"\xE2\xF6"=>"\xE9\xAC\xBB",		"\xE2\xF7"=>"\xE7\xB3\xAF",		"\xE2\xF8"=>"\xE7\xB3\xB2",		"\xE2\xF9"=>"\xE7\xB3\xB4",		"\xE2\xFA"=>"\xE7\xB3\xB6",		"\xE2\xFB"=>"\xE7\xB3\xBA",		"\xE2\xFC"=>"\xE7\xB4\x86",		"\xE3\x40"=>"\xE7\xB4\x82",		"\xE3\x41"=>"\xE7\xB4\x9C",		"\xE3\x42"=>"\xE7\xB4\x95",		"\xE3\x43"=>"\xE7\xB4\x8A",		"\xE3\x44"=>"\xE7\xB5\x85",		"\xE3\x45"=>"\xE7\xB5\x8B",		"\xE3\x46"=>"\xE7\xB4\xAE",		"\xE3\x47"=>"\xE7\xB4\xB2",		"\xE3\x48"=>"\xE7\xB4\xBF",		"\xE3\x49"=>"\xE7\xB4\xB5",		"\xE3\x4A"=>"\xE7\xB5\x86",		"\xE3\x4B"=>"\xE7\xB5\xB3",		"\xE3\x4C"=>"\xE7\xB5\x96",		"\xE3\x4D"=>"\xE7\xB5\x8E",		"\xE3\x4E"=>"\xE7\xB5\xB2",		"\xE3\x4F"=>"\xE7\xB5\xA8",		"\xE3\x50"=>"\xE7\xB5\xAE",		"\xE3\x51"=>"\xE7\xB5\x8F",		"\xE3\x52"=>"\xE7\xB5\xA3",		"\xE3\x53"=>"\xE7\xB6\x93",		"\xE3\x54"=>"\xE7\xB6\x89",		"\xE3\x55"=>"\xE7\xB5\x9B",		"\xE3\x56"=>"\xE7\xB6\x8F",		"\xE3\x57"=>"\xE7\xB5\xBD",		"\xE3\x58"=>"\xE7\xB6\x9B",		"\xE3\x59"=>"\xE7\xB6\xBA",		"\xE3\x5A"=>"\xE7\xB6\xAE",		"\xE3\x5B"=>"\xE7\xB6\xA3",		"\xE3\x5C"=>"\xE7\xB6\xB5",		"\xE3\x5D"=>"\xE7\xB7\x87",		"\xE3\x5E"=>"\xE7\xB6\xBD",		"\xE3\x5F"=>"\xE7\xB6\xAB",		"\xE3\x60"=>"\xE7\xB8\xBD",		"\xE3\x61"=>"\xE7\xB6\xA2",		"\xE3\x62"=>"\xE7\xB6\xAF",		"\xE3\x63"=>"\xE7\xB7\x9C",		"\xE3\x64"=>"\xE7\xB6\xB8",		"\xE3\x65"=>"\xE7\xB6\x9F",		"\xE3\x66"=>"\xE7\xB6\xB0",		"\xE3\x67"=>"\xE7\xB7\x98",		"\xE3\x68"=>"\xE7\xB7\x9D",		"\xE3\x69"=>"\xE7\xB7\xA4",		"\xE3\x6A"=>"\xE7\xB7\x9E",		"\xE3\x6B"=>"\xE7\xB7\xBB",		"\xE3\x6C"=>"\xE7\xB7\xB2",		"\xE3\x6D"=>"\xE7\xB7\xA1",		"\xE3\x6E"=>"\xE7\xB8\x85",		"\xE3\x6F"=>"\xE7\xB8\x8A",		"\xE3\x70"=>"\xE7\xB8\xA3",		"\xE3\x71"=>"\xE7\xB8\xA1",		"\xE3\x72"=>"\xE7\xB8\x92",		"\xE3\x73"=>"\xE7\xB8\xB1",		"\xE3\x74"=>"\xE7\xB8\x9F",		"\xE3\x75"=>"\xE7\xB8\x89",		"\xE3\x76"=>"\xE7\xB8\x8B",		"\xE3\x77"=>"\xE7\xB8\xA2",		"\xE3\x78"=>"\xE7\xB9\x86",		"\xE3\x79"=>"\xE7\xB9\xA6",		"\xE3\x7A"=>"\xE7\xB8\xBB",		"\xE3\x7B"=>"\xE7\xB8\xB5",		"\xE3\x7C"=>"\xE7\xB8\xB9",		"\xE3\x7D"=>"\xE7\xB9\x83",		"\xE3\x7E"=>"\xE7\xB8\xB7",		"\xE3\x80"=>"\xE7\xB8\xB2",		"\xE3\x81"=>"\xE7\xB8\xBA",		"\xE3\x82"=>"\xE7\xB9\xA7",		"\xE3\x83"=>"\xE7\xB9\x9D",		"\xE3\x84"=>"\xE7\xB9\x96",		"\xE3\x85"=>"\xE7\xB9\x9E",		"\xE3\x86"=>"\xE7\xB9\x99",		"\xE3\x87"=>"\xE7\xB9\x9A",		"\xE3\x88"=>"\xE7\xB9\xB9",		"\xE3\x89"=>"\xE7\xB9\xAA",		"\xE3\x8A"=>"\xE7\xB9\xA9",		"\xE3\x8B"=>"\xE7\xB9\xBC",		"\xE3\x8C"=>"\xE7\xB9\xBB",		"\xE3\x8D"=>"\xE7\xBA\x83",		"\xE3\x8E"=>"\xE7\xB7\x95",		"\xE3\x8F"=>"\xE7\xB9\xBD",		"\xE3\x90"=>"\xE8\xBE\xAE",		"\xE3\x91"=>"\xE7\xB9\xBF",		"\xE3\x92"=>"\xE7\xBA\x88",		"\xE3\x93"=>"\xE7\xBA\x89",		"\xE3\x94"=>"\xE7\xBA\x8C",		"\xE3\x95"=>"\xE7\xBA\x92",		"\xE3\x96"=>"\xE7\xBA\x90",		"\xE3\x97"=>"\xE7\xBA\x93",		"\xE3\x98"=>"\xE7\xBA\x94",		"\xE3\x99"=>"\xE7\xBA\x96",		"\xE3\x9A"=>"\xE7\xBA\x8E",		"\xE3\x9B"=>"\xE7\xBA\x9B",		"\xE3\x9C"=>"\xE7\xBA\x9C",		"\xE3\x9D"=>"\xE7\xBC\xB8",		"\xE3\x9E"=>"\xE7\xBC\xBA",		"\xE3\x9F"=>"\xE7\xBD\x85",		"\xE3\xA0"=>"\xE7\xBD\x8C",		"\xE3\xA1"=>"\xE7\xBD\x8D",		"\xE3\xA2"=>"\xE7\xBD\x8E",		"\xE3\xA3"=>"\xE7\xBD\x90",		"\xE3\xA4"=>"\xE7\xBD\x91",		"\xE3\xA5"=>"\xE7\xBD\x95",		"\xE3\xA6"=>"\xE7\xBD\x94",		"\xE3\xA7"=>"\xE7\xBD\x98",		"\xE3\xA8"=>"\xE7\xBD\x9F",		"\xE3\xA9"=>"\xE7\xBD\xA0",		"\xE3\xAA"=>"\xE7\xBD\xA8",		"\xE3\xAB"=>"\xE7\xBD\xA9",		"\xE3\xAC"=>"\xE7\xBD\xA7",		"\xE3\xAD"=>"\xE7\xBD\xB8",		"\xE3\xAE"=>"\xE7\xBE\x82",		"\xE3\xAF"=>"\xE7\xBE\x86",		"\xE3\xB0"=>"\xE7\xBE\x83",		"\xE3\xB1"=>"\xE7\xBE\x88",		"\xE3\xB2"=>"\xE7\xBE\x87",		"\xE3\xB3"=>"\xE7\xBE\x8C",		"\xE3\xB4"=>"\xE7\xBE\x94",		"\xE3\xB5"=>"\xE7\xBE\x9E",		"\xE3\xB6"=>"\xE7\xBE\x9D",		"\xE3\xB7"=>"\xE7\xBE\x9A",		"\xE3\xB8"=>"\xE7\xBE\xA3",		"\xE3\xB9"=>"\xE7\xBE\xAF",		"\xE3\xBA"=>"\xE7\xBE\xB2",		"\xE3\xBB"=>"\xE7\xBE\xB9",		"\xE3\xBC"=>"\xE7\xBE\xAE",		"\xE3\xBD"=>"\xE7\xBE\xB6",		"\xE3\xBE"=>"\xE7\xBE\xB8",		"\xE3\xBF"=>"\xE8\xAD\xB1",		"\xE3\xC0"=>"\xE7\xBF\x85",		"\xE3\xC1"=>"\xE7\xBF\x86",		"\xE3\xC2"=>"\xE7\xBF\x8A",		"\xE3\xC3"=>"\xE7\xBF\x95",		"\xE3\xC4"=>"\xE7\xBF\x94",		"\xE3\xC5"=>"\xE7\xBF\xA1",		"\xE3\xC6"=>"\xE7\xBF\xA6",		"\xE3\xC7"=>"\xE7\xBF\xA9",		"\xE3\xC8"=>"\xE7\xBF\xB3",		"\xE3\xC9"=>"\xE7\xBF\xB9",		"\xE3\xCA"=>"\xE9\xA3\x9C",		"\xE3\xCB"=>"\xE8\x80\x86",		"\xE3\xCC"=>"\xE8\x80\x84",		"\xE3\xCD"=>"\xE8\x80\x8B",		"\xE3\xCE"=>"\xE8\x80\x92",		"\xE3\xCF"=>"\xE8\x80\x98",		"\xE3\xD0"=>"\xE8\x80\x99",		"\xE3\xD1"=>"\xE8\x80\x9C",		"\xE3\xD2"=>"\xE8\x80\xA1",		"\xE3\xD3"=>"\xE8\x80\xA8",		"\xE3\xD4"=>"\xE8\x80\xBF",		"\xE3\xD5"=>"\xE8\x80\xBB",		"\xE3\xD6"=>"\xE8\x81\x8A",		"\xE3\xD7"=>"\xE8\x81\x86",		"\xE3\xD8"=>"\xE8\x81\x92",		"\xE3\xD9"=>"\xE8\x81\x98",		"\xE3\xDA"=>"\xE8\x81\x9A",		"\xE3\xDB"=>"\xE8\x81\x9F",		"\xE3\xDC"=>"\xE8\x81\xA2",		"\xE3\xDD"=>"\xE8\x81\xA8",		"\xE3\xDE"=>"\xE8\x81\xB3",		"\xE3\xDF"=>"\xE8\x81\xB2",		"\xE3\xE0"=>"\xE8\x81\xB0",		"\xE3\xE1"=>"\xE8\x81\xB6",		"\xE3\xE2"=>"\xE8\x81\xB9",		"\xE3\xE3"=>"\xE8\x81\xBD",		"\xE3\xE4"=>"\xE8\x81\xBF",		"\xE3\xE5"=>"\xE8\x82\x84",		"\xE3\xE6"=>"\xE8\x82\x86",		"\xE3\xE7"=>"\xE8\x82\x85",		"\xE3\xE8"=>"\xE8\x82\x9B",		"\xE3\xE9"=>"\xE8\x82\x93",		"\xE3\xEA"=>"\xE8\x82\x9A",		"\xE3\xEB"=>"\xE8\x82\xAD",		"\xE3\xEC"=>"\xE5\x86\x90",		"\xE3\xED"=>"\xE8\x82\xAC",		"\xE3\xEE"=>"\xE8\x83\x9B",		"\xE3\xEF"=>"\xE8\x83\xA5",		"\xE3\xF0"=>"\xE8\x83\x99",		"\xE3\xF1"=>"\xE8\x83\x9D",		"\xE3\xF2"=>"\xE8\x83\x84",		"\xE3\xF3"=>"\xE8\x83\x9A",		"\xE3\xF4"=>"\xE8\x83\x96",		"\xE3\xF5"=>"\xE8\x84\x89",		"\xE3\xF6"=>"\xE8\x83\xAF",		"\xE3\xF7"=>"\xE8\x83\xB1",		"\xE3\xF8"=>"\xE8\x84\x9B",		"\xE3\xF9"=>"\xE8\x84\xA9",		"\xE3\xFA"=>"\xE8\x84\xA3",		"\xE3\xFB"=>"\xE8\x84\xAF",		"\xE3\xFC"=>"\xE8\x85\x8B",		"\xE4\x40"=>"\xE9\x9A\x8B",		"\xE4\x41"=>"\xE8\x85\x86",		"\xE4\x42"=>"\xE8\x84\xBE",		"\xE4\x43"=>"\xE8\x85\x93",		"\xE4\x44"=>"\xE8\x85\x91",		"\xE4\x45"=>"\xE8\x83\xBC",		"\xE4\x46"=>"\xE8\x85\xB1",		"\xE4\x47"=>"\xE8\x85\xAE",		"\xE4\x48"=>"\xE8\x85\xA5",		"\xE4\x49"=>"\xE8\x85\xA6",		"\xE4\x4A"=>"\xE8\x85\xB4",		"\xE4\x4B"=>"\xE8\x86\x83",		"\xE4\x4C"=>"\xE8\x86\x88",		"\xE4\x4D"=>"\xE8\x86\x8A",		"\xE4\x4E"=>"\xE8\x86\x80",		"\xE4\x4F"=>"\xE8\x86\x82",		"\xE4\x50"=>"\xE8\x86\xA0",		"\xE4\x51"=>"\xE8\x86\x95",		"\xE4\x52"=>"\xE8\x86\xA4",		"\xE4\x53"=>"\xE8\x86\xA3",		"\xE4\x54"=>"\xE8\x85\x9F",		"\xE4\x55"=>"\xE8\x86\x93",		"\xE4\x56"=>"\xE8\x86\xA9",		"\xE4\x57"=>"\xE8\x86\xB0",		"\xE4\x58"=>"\xE8\x86\xB5",		"\xE4\x59"=>"\xE8\x86\xBE",		"\xE4\x5A"=>"\xE8\x86\xB8",		"\xE4\x5B"=>"\xE8\x86\xBD",		"\xE4\x5C"=>"\xE8\x87\x80",		"\xE4\x5D"=>"\xE8\x87\x82",		"\xE4\x5E"=>"\xE8\x86\xBA",		"\xE4\x5F"=>"\xE8\x87\x89",		"\xE4\x60"=>"\xE8\x87\x8D",		"\xE4\x61"=>"\xE8\x87\x91",		"\xE4\x62"=>"\xE8\x87\x99",		"\xE4\x63"=>"\xE8\x87\x98",		"\xE4\x64"=>"\xE8\x87\x88",		"\xE4\x65"=>"\xE8\x87\x9A",		"\xE4\x66"=>"\xE8\x87\x9F",		"\xE4\x67"=>"\xE8\x87\xA0",		"\xE4\x68"=>"\xE8\x87\xA7",		"\xE4\x69"=>"\xE8\x87\xBA",		"\xE4\x6A"=>"\xE8\x87\xBB",		"\xE4\x6B"=>"\xE8\x87\xBE",		"\xE4\x6C"=>"\xE8\x88\x81",		"\xE4\x6D"=>"\xE8\x88\x82",		"\xE4\x6E"=>"\xE8\x88\x85",		"\xE4\x6F"=>"\xE8\x88\x87",		"\xE4\x70"=>"\xE8\x88\x8A",		"\xE4\x71"=>"\xE8\x88\x8D",		"\xE4\x72"=>"\xE8\x88\x90",		"\xE4\x73"=>"\xE8\x88\x96",		"\xE4\x74"=>"\xE8\x88\xA9",		"\xE4\x75"=>"\xE8\x88\xAB",		"\xE4\x76"=>"\xE8\x88\xB8",		"\xE4\x77"=>"\xE8\x88\xB3",		"\xE4\x78"=>"\xE8\x89\x80",		"\xE4\x79"=>"\xE8\x89\x99",		"\xE4\x7A"=>"\xE8\x89\x98",		"\xE4\x7B"=>"\xE8\x89\x9D",		"\xE4\x7C"=>"\xE8\x89\x9A",		"\xE4\x7D"=>"\xE8\x89\x9F",		"\xE4\x7E"=>"\xE8\x89\xA4",		"\xE4\x80"=>"\xE8\x89\xA2",		"\xE4\x81"=>"\xE8\x89\xA8",		"\xE4\x82"=>"\xE8\x89\xAA",		"\xE4\x83"=>"\xE8\x89\xAB",		"\xE4\x84"=>"\xE8\x88\xAE",		"\xE4\x85"=>"\xE8\x89\xB1",		"\xE4\x86"=>"\xE8\x89\xB7",		"\xE4\x87"=>"\xE8\x89\xB8",		"\xE4\x88"=>"\xE8\x89\xBE",		"\xE4\x89"=>"\xE8\x8A\x8D",		"\xE4\x8A"=>"\xE8\x8A\x92",		"\xE4\x8B"=>"\xE8\x8A\xAB",		"\xE4\x8C"=>"\xE8\x8A\x9F",		"\xE4\x8D"=>"\xE8\x8A\xBB",		"\xE4\x8E"=>"\xE8\x8A\xAC",		"\xE4\x8F"=>"\xE8\x8B\xA1",		"\xE4\x90"=>"\xE8\x8B\xA3",		"\xE4\x91"=>"\xE8\x8B\x9F",		"\xE4\x92"=>"\xE8\x8B\x92",		"\xE4\x93"=>"\xE8\x8B\xB4",		"\xE4\x94"=>"\xE8\x8B\xB3",		"\xE4\x95"=>"\xE8\x8B\xBA",		"\xE4\x96"=>"\xE8\x8E\x93",		"\xE4\x97"=>"\xE8\x8C\x83",		"\xE4\x98"=>"\xE8\x8B\xBB",		"\xE4\x99"=>"\xE8\x8B\xB9",		"\xE4\x9A"=>"\xE8\x8B\x9E",		"\xE4\x9B"=>"\xE8\x8C\x86",		"\xE4\x9C"=>"\xE8\x8B\x9C",		"\xE4\x9D"=>"\xE8\x8C\x89",		"\xE4\x9E"=>"\xE8\x8B\x99",		"\xE4\x9F"=>"\xE8\x8C\xB5",		"\xE4\xA0"=>"\xE8\x8C\xB4",		"\xE4\xA1"=>"\xE8\x8C\x96",		"\xE4\xA2"=>"\xE8\x8C\xB2",		"\xE4\xA3"=>"\xE8\x8C\xB1",		"\xE4\xA4"=>"\xE8\x8D\x80",		"\xE4\xA5"=>"\xE8\x8C\xB9",		"\xE4\xA6"=>"\xE8\x8D\x90",		"\xE4\xA7"=>"\xE8\x8D\x85",		"\xE4\xA8"=>"\xE8\x8C\xAF",		"\xE4\xA9"=>"\xE8\x8C\xAB",		"\xE4\xAA"=>"\xE8\x8C\x97",		"\xE4\xAB"=>"\xE8\x8C\x98",		"\xE4\xAC"=>"\xE8\x8E\x85",		"\xE4\xAD"=>"\xE8\x8E\x9A",		"\xE4\xAE"=>"\xE8\x8E\xAA",		"\xE4\xAF"=>"\xE8\x8E\x9F",		"\xE4\xB0"=>"\xE8\x8E\xA2",		"\xE4\xB1"=>"\xE8\x8E\x96",		"\xE4\xB2"=>"\xE8\x8C\xA3",		"\xE4\xB3"=>"\xE8\x8E\x8E",		"\xE4\xB4"=>"\xE8\x8E\x87",		"\xE4\xB5"=>"\xE8\x8E\x8A",		"\xE4\xB6"=>"\xE8\x8D\xBC",		"\xE4\xB7"=>"\xE8\x8E\xB5",		"\xE4\xB8"=>"\xE8\x8D\xB3",		"\xE4\xB9"=>"\xE8\x8D\xB5",		"\xE4\xBA"=>"\xE8\x8E\xA0",		"\xE4\xBB"=>"\xE8\x8E\x89",		"\xE4\xBC"=>"\xE8\x8E\xA8",		"\xE4\xBD"=>"\xE8\x8F\xB4",		"\xE4\xBE"=>"\xE8\x90\x93",		"\xE4\xBF"=>"\xE8\x8F\xAB",		"\xE4\xC0"=>"\xE8\x8F\x8E",		"\xE4\xC1"=>"\xE8\x8F\xBD",		"\xE4\xC2"=>"\xE8\x90\x83",		"\xE4\xC3"=>"\xE8\x8F\x98",		"\xE4\xC4"=>"\xE8\x90\x8B",		"\xE4\xC5"=>"\xE8\x8F\x81",		"\xE4\xC6"=>"\xE8\x8F\xB7",		"\xE4\xC7"=>"\xE8\x90\x87",		"\xE4\xC8"=>"\xE8\x8F\xA0",		"\xE4\xC9"=>"\xE8\x8F\xB2",		"\xE4\xCA"=>"\xE8\x90\x8D",		"\xE4\xCB"=>"\xE8\x90\xA2",		"\xE4\xCC"=>"\xE8\x90\xA0",		"\xE4\xCD"=>"\xE8\x8E\xBD",		"\xE4\xCE"=>"\xE8\x90\xB8",		"\xE4\xCF"=>"\xE8\x94\x86",		"\xE4\xD0"=>"\xE8\x8F\xBB",		"\xE4\xD1"=>"\xE8\x91\xAD",		"\xE4\xD2"=>"\xE8\x90\xAA",		"\xE4\xD3"=>"\xE8\x90\xBC",		"\xE4\xD4"=>"\xE8\x95\x9A",		"\xE4\xD5"=>"\xE8\x92\x84",		"\xE4\xD6"=>"\xE8\x91\xB7",		"\xE4\xD7"=>"\xE8\x91\xAB",		"\xE4\xD8"=>"\xE8\x92\xAD",		"\xE4\xD9"=>"\xE8\x91\xAE",		"\xE4\xDA"=>"\xE8\x92\x82",		"\xE4\xDB"=>"\xE8\x91\xA9",		"\xE4\xDC"=>"\xE8\x91\x86",		"\xE4\xDD"=>"\xE8\x90\xAC",		"\xE4\xDE"=>"\xE8\x91\xAF",		"\xE4\xDF"=>"\xE8\x91\xB9",		"\xE4\xE0"=>"\xE8\x90\xB5",		"\xE4\xE1"=>"\xE8\x93\x8A",		"\xE4\xE2"=>"\xE8\x91\xA2",		"\xE4\xE3"=>"\xE8\x92\xB9",		"\xE4\xE4"=>"\xE8\x92\xBF",		"\xE4\xE5"=>"\xE8\x92\x9F",		"\xE4\xE6"=>"\xE8\x93\x99",		"\xE4\xE7"=>"\xE8\x93\x8D",		"\xE4\xE8"=>"\xE8\x92\xBB",		"\xE4\xE9"=>"\xE8\x93\x9A",		"\xE4\xEA"=>"\xE8\x93\x90",		"\xE4\xEB"=>"\xE8\x93\x81",		"\xE4\xEC"=>"\xE8\x93\x86",		"\xE4\xED"=>"\xE8\x93\x96",		"\xE4\xEE"=>"\xE8\x92\xA1",		"\xE4\xEF"=>"\xE8\x94\xA1",		"\xE4\xF0"=>"\xE8\x93\xBF",		"\xE4\xF1"=>"\xE8\x93\xB4",		"\xE4\xF2"=>"\xE8\x94\x97",		"\xE4\xF3"=>"\xE8\x94\x98",		"\xE4\xF4"=>"\xE8\x94\xAC",		"\xE4\xF5"=>"\xE8\x94\x9F",		"\xE4\xF6"=>"\xE8\x94\x95",		"\xE4\xF7"=>"\xE8\x94\x94",		"\xE4\xF8"=>"\xE8\x93\xBC",		"\xE4\xF9"=>"\xE8\x95\x80",		"\xE4\xFA"=>"\xE8\x95\xA3",		"\xE4\xFB"=>"\xE8\x95\x98",		"\xE4\xFC"=>"\xE8\x95\x88",		"\xE5\x40"=>"\xE8\x95\x81",		"\xE5\x41"=>"\xE8\x98\x82",		"\xE5\x42"=>"\xE8\x95\x8B",		"\xE5\x43"=>"\xE8\x95\x95",		"\xE5\x44"=>"\xE8\x96\x80",		"\xE5\x45"=>"\xE8\x96\xA4",		"\xE5\x46"=>"\xE8\x96\x88",		"\xE5\x47"=>"\xE8\x96\x91",		"\xE5\x48"=>"\xE8\x96\x8A",		"\xE5\x49"=>"\xE8\x96\xA8",		"\xE5\x4A"=>"\xE8\x95\xAD",		"\xE5\x4B"=>"\xE8\x96\x94",		"\xE5\x4C"=>"\xE8\x96\x9B",		"\xE5\x4D"=>"\xE8\x97\xAA",		"\xE5\x4E"=>"\xE8\x96\x87",		"\xE5\x4F"=>"\xE8\x96\x9C",		"\xE5\x50"=>"\xE8\x95\xB7",		"\xE5\x51"=>"\xE8\x95\xBE",		"\xE5\x52"=>"\xE8\x96\x90",		"\xE5\x53"=>"\xE8\x97\x89",		"\xE5\x54"=>"\xE8\x96\xBA",		"\xE5\x55"=>"\xE8\x97\x8F",		"\xE5\x56"=>"\xE8\x96\xB9",		"\xE5\x57"=>"\xE8\x97\x90",		"\xE5\x58"=>"\xE8\x97\x95",		"\xE5\x59"=>"\xE8\x97\x9D",		"\xE5\x5A"=>"\xE8\x97\xA5",		"\xE5\x5B"=>"\xE8\x97\x9C",		"\xE5\x5C"=>"\xE8\x97\xB9",		"\xE5\x5D"=>"\xE8\x98\x8A",		"\xE5\x5E"=>"\xE8\x98\x93",		"\xE5\x5F"=>"\xE8\x98\x8B",		"\xE5\x60"=>"\xE8\x97\xBE",		"\xE5\x61"=>"\xE8\x97\xBA",		"\xE5\x62"=>"\xE8\x98\x86",		"\xE5\x63"=>"\xE8\x98\xA2",		"\xE5\x64"=>"\xE8\x98\x9A",		"\xE5\x65"=>"\xE8\x98\xB0",		"\xE5\x66"=>"\xE8\x98\xBF",		"\xE5\x67"=>"\xE8\x99\x8D",		"\xE5\x68"=>"\xE4\xB9\x95",		"\xE5\x69"=>"\xE8\x99\x94",		"\xE5\x6A"=>"\xE8\x99\x9F",		"\xE5\x6B"=>"\xE8\x99\xA7",		"\xE5\x6C"=>"\xE8\x99\xB1",		"\xE5\x6D"=>"\xE8\x9A\x93",		"\xE5\x6E"=>"\xE8\x9A\xA3",		"\xE5\x6F"=>"\xE8\x9A\xA9",		"\xE5\x70"=>"\xE8\x9A\xAA",		"\xE5\x71"=>"\xE8\x9A\x8B",		"\xE5\x72"=>"\xE8\x9A\x8C",		"\xE5\x73"=>"\xE8\x9A\xB6",		"\xE5\x74"=>"\xE8\x9A\xAF",		"\xE5\x75"=>"\xE8\x9B\x84",		"\xE5\x76"=>"\xE8\x9B\x86",		"\xE5\x77"=>"\xE8\x9A\xB0",		"\xE5\x78"=>"\xE8\x9B\x89",		"\xE5\x79"=>"\xE8\xA0\xA3",		"\xE5\x7A"=>"\xE8\x9A\xAB",		"\xE5\x7B"=>"\xE8\x9B\x94",		"\xE5\x7C"=>"\xE8\x9B\x9E",		"\xE5\x7D"=>"\xE8\x9B\xA9",		"\xE5\x7E"=>"\xE8\x9B\xAC",		"\xE5\x80"=>"\xE8\x9B\x9F",		"\xE5\x81"=>"\xE8\x9B\x9B",		"\xE5\x82"=>"\xE8\x9B\xAF",		"\xE5\x83"=>"\xE8\x9C\x92",		"\xE5\x84"=>"\xE8\x9C\x86",		"\xE5\x85"=>"\xE8\x9C\x88",		"\xE5\x86"=>"\xE8\x9C\x80",		"\xE5\x87"=>"\xE8\x9C\x83",		"\xE5\x88"=>"\xE8\x9B\xBB",		"\xE5\x89"=>"\xE8\x9C\x91",		"\xE5\x8A"=>"\xE8\x9C\x89",		"\xE5\x8B"=>"\xE8\x9C\x8D",		"\xE5\x8C"=>"\xE8\x9B\xB9",		"\xE5\x8D"=>"\xE8\x9C\x8A",		"\xE5\x8E"=>"\xE8\x9C\xB4",		"\xE5\x8F"=>"\xE8\x9C\xBF",		"\xE5\x90"=>"\xE8\x9C\xB7",		"\xE5\x91"=>"\xE8\x9C\xBB",		"\xE5\x92"=>"\xE8\x9C\xA5",		"\xE5\x93"=>"\xE8\x9C\xA9",		"\xE5\x94"=>"\xE8\x9C\x9A",		"\xE5\x95"=>"\xE8\x9D\xA0",		"\xE5\x96"=>"\xE8\x9D\x9F",		"\xE5\x97"=>"\xE8\x9D\xB8",		"\xE5\x98"=>"\xE8\x9D\x8C",		"\xE5\x99"=>"\xE8\x9D\x8E",		"\xE5\x9A"=>"\xE8\x9D\xB4",		"\xE5\x9B"=>"\xE8\x9D\x97",		"\xE5\x9C"=>"\xE8\x9D\xA8",		"\xE5\x9D"=>"\xE8\x9D\xAE",		"\xE5\x9E"=>"\xE8\x9D\x99",		"\xE5\x9F"=>"\xE8\x9D\x93",		"\xE5\xA0"=>"\xE8\x9D\xA3",		"\xE5\xA1"=>"\xE8\x9D\xAA",		"\xE5\xA2"=>"\xE8\xA0\x85",		"\xE5\xA3"=>"\xE8\x9E\xA2",		"\xE5\xA4"=>"\xE8\x9E\x9F",		"\xE5\xA5"=>"\xE8\x9E\x82",		"\xE5\xA6"=>"\xE8\x9E\xAF",		"\xE5\xA7"=>"\xE8\x9F\x8B",		"\xE5\xA8"=>"\xE8\x9E\xBD",		"\xE5\xA9"=>"\xE8\x9F\x80",		"\xE5\xAA"=>"\xE8\x9F\x90",		"\xE5\xAB"=>"\xE9\x9B\x96",		"\xE5\xAC"=>"\xE8\x9E\xAB",		"\xE5\xAD"=>"\xE8\x9F\x84",		"\xE5\xAE"=>"\xE8\x9E\xB3",		"\xE5\xAF"=>"\xE8\x9F\x87",		"\xE5\xB0"=>"\xE8\x9F\x86",		"\xE5\xB1"=>"\xE8\x9E\xBB",		"\xE5\xB2"=>"\xE8\x9F\xAF",		"\xE5\xB3"=>"\xE8\x9F\xB2",		"\xE5\xB4"=>"\xE8\x9F\xA0",		"\xE5\xB5"=>"\xE8\xA0\x8F",		"\xE5\xB6"=>"\xE8\xA0\x8D",		"\xE5\xB7"=>"\xE8\x9F\xBE",		"\xE5\xB8"=>"\xE8\x9F\xB6",		"\xE5\xB9"=>"\xE8\x9F\xB7",		"\xE5\xBA"=>"\xE8\xA0\x8E",		"\xE5\xBB"=>"\xE8\x9F\x92",		"\xE5\xBC"=>"\xE8\xA0\x91",		"\xE5\xBD"=>"\xE8\xA0\x96",		"\xE5\xBE"=>"\xE8\xA0\x95",		"\xE5\xBF"=>"\xE8\xA0\xA2",		"\xE5\xC0"=>"\xE8\xA0\xA1",		"\xE5\xC1"=>"\xE8\xA0\xB1",		"\xE5\xC2"=>"\xE8\xA0\xB6",		"\xE5\xC3"=>"\xE8\xA0\xB9",		"\xE5\xC4"=>"\xE8\xA0\xA7",		"\xE5\xC5"=>"\xE8\xA0\xBB",		"\xE5\xC6"=>"\xE8\xA1\x84",		"\xE5\xC7"=>"\xE8\xA1\x82",		"\xE5\xC8"=>"\xE8\xA1\x92",		"\xE5\xC9"=>"\xE8\xA1\x99",		"\xE5\xCA"=>"\xE8\xA1\x9E",		"\xE5\xCB"=>"\xE8\xA1\xA2",		"\xE5\xCC"=>"\xE8\xA1\xAB",		"\xE5\xCD"=>"\xE8\xA2\x81",		"\xE5\xCE"=>"\xE8\xA1\xBE",		"\xE5\xCF"=>"\xE8\xA2\x9E",		"\xE5\xD0"=>"\xE8\xA1\xB5",		"\xE5\xD1"=>"\xE8\xA1\xBD",		"\xE5\xD2"=>"\xE8\xA2\xB5",		"\xE5\xD3"=>"\xE8\xA1\xB2",		"\xE5\xD4"=>"\xE8\xA2\x82",		"\xE5\xD5"=>"\xE8\xA2\x97",		"\xE5\xD6"=>"\xE8\xA2\x92",		"\xE5\xD7"=>"\xE8\xA2\xAE",		"\xE5\xD8"=>"\xE8\xA2\x99",		"\xE5\xD9"=>"\xE8\xA2\xA2",		"\xE5\xDA"=>"\xE8\xA2\x8D",		"\xE5\xDB"=>"\xE8\xA2\xA4",		"\xE5\xDC"=>"\xE8\xA2\xB0",		"\xE5\xDD"=>"\xE8\xA2\xBF",		"\xE5\xDE"=>"\xE8\xA2\xB1",		"\xE5\xDF"=>"\xE8\xA3\x83",		"\xE5\xE0"=>"\xE8\xA3\x84",		"\xE5\xE1"=>"\xE8\xA3\x94",		"\xE5\xE2"=>"\xE8\xA3\x98",		"\xE5\xE3"=>"\xE8\xA3\x99",		"\xE5\xE4"=>"\xE8\xA3\x9D",		"\xE5\xE5"=>"\xE8\xA3\xB9",		"\xE5\xE6"=>"\xE8\xA4\x82",		"\xE5\xE7"=>"\xE8\xA3\xBC",		"\xE5\xE8"=>"\xE8\xA3\xB4",		"\xE5\xE9"=>"\xE8\xA3\xA8",		"\xE5\xEA"=>"\xE8\xA3\xB2",		"\xE5\xEB"=>"\xE8\xA4\x84",		"\xE5\xEC"=>"\xE8\xA4\x8C",		"\xE5\xED"=>"\xE8\xA4\x8A",		"\xE5\xEE"=>"\xE8\xA4\x93",		"\xE5\xEF"=>"\xE8\xA5\x83",		"\xE5\xF0"=>"\xE8\xA4\x9E",		"\xE5\xF1"=>"\xE8\xA4\xA5",		"\xE5\xF2"=>"\xE8\xA4\xAA",		"\xE5\xF3"=>"\xE8\xA4\xAB",		"\xE5\xF4"=>"\xE8\xA5\x81",		"\xE5\xF5"=>"\xE8\xA5\x84",		"\xE5\xF6"=>"\xE8\xA4\xBB",		"\xE5\xF7"=>"\xE8\xA4\xB6",		"\xE5\xF8"=>"\xE8\xA4\xB8",		"\xE5\xF9"=>"\xE8\xA5\x8C",		"\xE5\xFA"=>"\xE8\xA4\x9D",		"\xE5\xFB"=>"\xE8\xA5\xA0",		"\xE5\xFC"=>"\xE8\xA5\x9E",		"\xE6\x40"=>"\xE8\xA5\xA6",		"\xE6\x41"=>"\xE8\xA5\xA4",		"\xE6\x42"=>"\xE8\xA5\xAD",		"\xE6\x43"=>"\xE8\xA5\xAA",		"\xE6\x44"=>"\xE8\xA5\xAF",		"\xE6\x45"=>"\xE8\xA5\xB4",		"\xE6\x46"=>"\xE8\xA5\xB7",		"\xE6\x47"=>"\xE8\xA5\xBE",		"\xE6\x48"=>"\xE8\xA6\x83",		"\xE6\x49"=>"\xE8\xA6\x88",		"\xE6\x4A"=>"\xE8\xA6\x8A",		"\xE6\x4B"=>"\xE8\xA6\x93",		"\xE6\x4C"=>"\xE8\xA6\x98",		"\xE6\x4D"=>"\xE8\xA6\xA1",		"\xE6\x4E"=>"\xE8\xA6\xA9",		"\xE6\x4F"=>"\xE8\xA6\xA6",		"\xE6\x50"=>"\xE8\xA6\xAC",		"\xE6\x51"=>"\xE8\xA6\xAF",		"\xE6\x52"=>"\xE8\xA6\xB2",		"\xE6\x53"=>"\xE8\xA6\xBA",		"\xE6\x54"=>"\xE8\xA6\xBD",		"\xE6\x55"=>"\xE8\xA6\xBF",		"\xE6\x56"=>"\xE8\xA7\x80",		"\xE6\x57"=>"\xE8\xA7\x9A",		"\xE6\x58"=>"\xE8\xA7\x9C",		"\xE6\x59"=>"\xE8\xA7\x9D",		"\xE6\x5A"=>"\xE8\xA7\xA7",		"\xE6\x5B"=>"\xE8\xA7\xB4",		"\xE6\x5C"=>"\xE8\xA7\xB8",		"\xE6\x5D"=>"\xE8\xA8\x83",		"\xE6\x5E"=>"\xE8\xA8\x96",		"\xE6\x5F"=>"\xE8\xA8\x90",		"\xE6\x60"=>"\xE8\xA8\x8C",		"\xE6\x61"=>"\xE8\xA8\x9B",		"\xE6\x62"=>"\xE8\xA8\x9D",		"\xE6\x63"=>"\xE8\xA8\xA5",		"\xE6\x64"=>"\xE8\xA8\xB6",		"\xE6\x65"=>"\xE8\xA9\x81",		"\xE6\x66"=>"\xE8\xA9\x9B",		"\xE6\x67"=>"\xE8\xA9\x92",		"\xE6\x68"=>"\xE8\xA9\x86",		"\xE6\x69"=>"\xE8\xA9\x88",		"\xE6\x6A"=>"\xE8\xA9\xBC",		"\xE6\x6B"=>"\xE8\xA9\xAD",		"\xE6\x6C"=>"\xE8\xA9\xAC",		"\xE6\x6D"=>"\xE8\xA9\xA2",		"\xE6\x6E"=>"\xE8\xAA\x85",		"\xE6\x6F"=>"\xE8\xAA\x82",		"\xE6\x70"=>"\xE8\xAA\x84",		"\xE6\x71"=>"\xE8\xAA\xA8",		"\xE6\x72"=>"\xE8\xAA\xA1",		"\xE6\x73"=>"\xE8\xAA\x91",		"\xE6\x74"=>"\xE8\xAA\xA5",		"\xE6\x75"=>"\xE8\xAA\xA6",		"\xE6\x76"=>"\xE8\xAA\x9A",		"\xE6\x77"=>"\xE8\xAA\xA3",		"\xE6\x78"=>"\xE8\xAB\x84",		"\xE6\x79"=>"\xE8\xAB\x8D",		"\xE6\x7A"=>"\xE8\xAB\x82",		"\xE6\x7B"=>"\xE8\xAB\x9A",		"\xE6\x7C"=>"\xE8\xAB\xAB",		"\xE6\x7D"=>"\xE8\xAB\xB3",		"\xE6\x7E"=>"\xE8\xAB\xA7",		"\xE6\x80"=>"\xE8\xAB\xA4",		"\xE6\x81"=>"\xE8\xAB\xB1",		"\xE6\x82"=>"\xE8\xAC\x94",		"\xE6\x83"=>"\xE8\xAB\xA0",		"\xE6\x84"=>"\xE8\xAB\xA2",		"\xE6\x85"=>"\xE8\xAB\xB7",		"\xE6\x86"=>"\xE8\xAB\x9E",		"\xE6\x87"=>"\xE8\xAB\x9B",		"\xE6\x88"=>"\xE8\xAC\x8C",		"\xE6\x89"=>"\xE8\xAC\x87",		"\xE6\x8A"=>"\xE8\xAC\x9A",		"\xE6\x8B"=>"\xE8\xAB\xA1",		"\xE6\x8C"=>"\xE8\xAC\x96",		"\xE6\x8D"=>"\xE8\xAC\x90",		"\xE6\x8E"=>"\xE8\xAC\x97",		"\xE6\x8F"=>"\xE8\xAC\xA0",		"\xE6\x90"=>"\xE8\xAC\xB3",		"\xE6\x91"=>"\xE9\x9E\xAB",		"\xE6\x92"=>"\xE8\xAC\xA6",		"\xE6\x93"=>"\xE8\xAC\xAB",		"\xE6\x94"=>"\xE8\xAC\xBE",		"\xE6\x95"=>"\xE8\xAC\xA8",		"\xE6\x96"=>"\xE8\xAD\x81",		"\xE6\x97"=>"\xE8\xAD\x8C",		"\xE6\x98"=>"\xE8\xAD\x8F",		"\xE6\x99"=>"\xE8\xAD\x8E",		"\xE6\x9A"=>"\xE8\xAD\x89",		"\xE6\x9B"=>"\xE8\xAD\x96",		"\xE6\x9C"=>"\xE8\xAD\x9B",		"\xE6\x9D"=>"\xE8\xAD\x9A",		"\xE6\x9E"=>"\xE8\xAD\xAB",		"\xE6\x9F"=>"\xE8\xAD\x9F",		"\xE6\xA0"=>"\xE8\xAD\xAC",		"\xE6\xA1"=>"\xE8\xAD\xAF",		"\xE6\xA2"=>"\xE8\xAD\xB4",		"\xE6\xA3"=>"\xE8\xAD\xBD",		"\xE6\xA4"=>"\xE8\xAE\x80",		"\xE6\xA5"=>"\xE8\xAE\x8C",		"\xE6\xA6"=>"\xE8\xAE\x8E",		"\xE6\xA7"=>"\xE8\xAE\x92",		"\xE6\xA8"=>"\xE8\xAE\x93",		"\xE6\xA9"=>"\xE8\xAE\x96",		"\xE6\xAA"=>"\xE8\xAE\x99",		"\xE6\xAB"=>"\xE8\xAE\x9A",		"\xE6\xAC"=>"\xE8\xB0\xBA",		"\xE6\xAD"=>"\xE8\xB1\x81",		"\xE6\xAE"=>"\xE8\xB0\xBF",		"\xE6\xAF"=>"\xE8\xB1\x88",		"\xE6\xB0"=>"\xE8\xB1\x8C",		"\xE6\xB1"=>"\xE8\xB1\x8E",		"\xE6\xB2"=>"\xE8\xB1\x90",		"\xE6\xB3"=>"\xE8\xB1\x95",		"\xE6\xB4"=>"\xE8\xB1\xA2",		"\xE6\xB5"=>"\xE8\xB1\xAC",		"\xE6\xB6"=>"\xE8\xB1\xB8",		"\xE6\xB7"=>"\xE8\xB1\xBA",		"\xE6\xB8"=>"\xE8\xB2\x82",		"\xE6\xB9"=>"\xE8\xB2\x89",		"\xE6\xBA"=>"\xE8\xB2\x85",		"\xE6\xBB"=>"\xE8\xB2\x8A",		"\xE6\xBC"=>"\xE8\xB2\x8D",		"\xE6\xBD"=>"\xE8\xB2\x8E",		"\xE6\xBE"=>"\xE8\xB2\x94",		"\xE6\xBF"=>"\xE8\xB1\xBC",		"\xE6\xC0"=>"\xE8\xB2\x98",		"\xE6\xC1"=>"\xE6\x88\x9D",		"\xE6\xC2"=>"\xE8\xB2\xAD",		"\xE6\xC3"=>"\xE8\xB2\xAA",		"\xE6\xC4"=>"\xE8\xB2\xBD",		"\xE6\xC5"=>"\xE8\xB2\xB2",		"\xE6\xC6"=>"\xE8\xB2\xB3",		"\xE6\xC7"=>"\xE8\xB2\xAE",		"\xE6\xC8"=>"\xE8\xB2\xB6",		"\xE6\xC9"=>"\xE8\xB3\x88",		"\xE6\xCA"=>"\xE8\xB3\x81",		"\xE6\xCB"=>"\xE8\xB3\xA4",		"\xE6\xCC"=>"\xE8\xB3\xA3",		"\xE6\xCD"=>"\xE8\xB3\x9A",		"\xE6\xCE"=>"\xE8\xB3\xBD",		"\xE6\xCF"=>"\xE8\xB3\xBA",		"\xE6\xD0"=>"\xE8\xB3\xBB",		"\xE6\xD1"=>"\xE8\xB4\x84",		"\xE6\xD2"=>"\xE8\xB4\x85",		"\xE6\xD3"=>"\xE8\xB4\x8A",		"\xE6\xD4"=>"\xE8\xB4\x87",		"\xE6\xD5"=>"\xE8\xB4\x8F",		"\xE6\xD6"=>"\xE8\xB4\x8D",		"\xE6\xD7"=>"\xE8\xB4\x90",		"\xE6\xD8"=>"\xE9\xBD\x8E",		"\xE6\xD9"=>"\xE8\xB4\x93",		"\xE6\xDA"=>"\xE8\xB3\x8D",		"\xE6\xDB"=>"\xE8\xB4\x94",		"\xE6\xDC"=>"\xE8\xB4\x96",		"\xE6\xDD"=>"\xE8\xB5\xA7",		"\xE6\xDE"=>"\xE8\xB5\xAD",		"\xE6\xDF"=>"\xE8\xB5\xB1",		"\xE6\xE0"=>"\xE8\xB5\xB3",		"\xE6\xE1"=>"\xE8\xB6\x81",		"\xE6\xE2"=>"\xE8\xB6\x99",		"\xE6\xE3"=>"\xE8\xB7\x82",		"\xE6\xE4"=>"\xE8\xB6\xBE",		"\xE6\xE5"=>"\xE8\xB6\xBA",		"\xE6\xE6"=>"\xE8\xB7\x8F",		"\xE6\xE7"=>"\xE8\xB7\x9A",		"\xE6\xE8"=>"\xE8\xB7\x96",		"\xE6\xE9"=>"\xE8\xB7\x8C",		"\xE6\xEA"=>"\xE8\xB7\x9B",		"\xE6\xEB"=>"\xE8\xB7\x8B",		"\xE6\xEC"=>"\xE8\xB7\xAA",		"\xE6\xED"=>"\xE8\xB7\xAB",		"\xE6\xEE"=>"\xE8\xB7\x9F",		"\xE6\xEF"=>"\xE8\xB7\xA3",		"\xE6\xF0"=>"\xE8\xB7\xBC",		"\xE6\xF1"=>"\xE8\xB8\x88",		"\xE6\xF2"=>"\xE8\xB8\x89",		"\xE6\xF3"=>"\xE8\xB7\xBF",		"\xE6\xF4"=>"\xE8\xB8\x9D",		"\xE6\xF5"=>"\xE8\xB8\x9E",		"\xE6\xF6"=>"\xE8\xB8\x90",		"\xE6\xF7"=>"\xE8\xB8\x9F",		"\xE6\xF8"=>"\xE8\xB9\x82",		"\xE6\xF9"=>"\xE8\xB8\xB5",		"\xE6\xFA"=>"\xE8\xB8\xB0",		"\xE6\xFB"=>"\xE8\xB8\xB4",		"\xE6\xFC"=>"\xE8\xB9\x8A",		"\xE7\x40"=>"\xE8\xB9\x87",		"\xE7\x41"=>"\xE8\xB9\x89",		"\xE7\x42"=>"\xE8\xB9\x8C",		"\xE7\x43"=>"\xE8\xB9\x90",		"\xE7\x44"=>"\xE8\xB9\x88",		"\xE7\x45"=>"\xE8\xB9\x99",		"\xE7\x46"=>"\xE8\xB9\xA4",		"\xE7\x47"=>"\xE8\xB9\xA0",		"\xE7\x48"=>"\xE8\xB8\xAA",		"\xE7\x49"=>"\xE8\xB9\xA3",		"\xE7\x4A"=>"\xE8\xB9\x95",		"\xE7\x4B"=>"\xE8\xB9\xB6",		"\xE7\x4C"=>"\xE8\xB9\xB2",		"\xE7\x4D"=>"\xE8\xB9\xBC",		"\xE7\x4E"=>"\xE8\xBA\x81",		"\xE7\x4F"=>"\xE8\xBA\x87",		"\xE7\x50"=>"\xE8\xBA\x85",		"\xE7\x51"=>"\xE8\xBA\x84",		"\xE7\x52"=>"\xE8\xBA\x8B",		"\xE7\x53"=>"\xE8\xBA\x8A",		"\xE7\x54"=>"\xE8\xBA\x93",		"\xE7\x55"=>"\xE8\xBA\x91",		"\xE7\x56"=>"\xE8\xBA\x94",		"\xE7\x57"=>"\xE8\xBA\x99",		"\xE7\x58"=>"\xE8\xBA\xAA",		"\xE7\x59"=>"\xE8\xBA\xA1",		"\xE7\x5A"=>"\xE8\xBA\xAC",		"\xE7\x5B"=>"\xE8\xBA\xB0",		"\xE7\x5C"=>"\xE8\xBB\x86",		"\xE7\x5D"=>"\xE8\xBA\xB1",		"\xE7\x5E"=>"\xE8\xBA\xBE",		"\xE7\x5F"=>"\xE8\xBB\x85",		"\xE7\x60"=>"\xE8\xBB\x88",		"\xE7\x61"=>"\xE8\xBB\x8B",		"\xE7\x62"=>"\xE8\xBB\x9B",		"\xE7\x63"=>"\xE8\xBB\xA3",		"\xE7\x64"=>"\xE8\xBB\xBC",		"\xE7\x65"=>"\xE8\xBB\xBB",		"\xE7\x66"=>"\xE8\xBB\xAB",		"\xE7\x67"=>"\xE8\xBB\xBE",		"\xE7\x68"=>"\xE8\xBC\x8A",		"\xE7\x69"=>"\xE8\xBC\x85",		"\xE7\x6A"=>"\xE8\xBC\x95",		"\xE7\x6B"=>"\xE8\xBC\x92",		"\xE7\x6C"=>"\xE8\xBC\x99",		"\xE7\x6D"=>"\xE8\xBC\x93",		"\xE7\x6E"=>"\xE8\xBC\x9C",		"\xE7\x6F"=>"\xE8\xBC\x9F",		"\xE7\x70"=>"\xE8\xBC\x9B",		"\xE7\x71"=>"\xE8\xBC\x8C",		"\xE7\x72"=>"\xE8\xBC\xA6",		"\xE7\x73"=>"\xE8\xBC\xB3",		"\xE7\x74"=>"\xE8\xBC\xBB",		"\xE7\x75"=>"\xE8\xBC\xB9",		"\xE7\x76"=>"\xE8\xBD\x85",		"\xE7\x77"=>"\xE8\xBD\x82",		"\xE7\x78"=>"\xE8\xBC\xBE",		"\xE7\x79"=>"\xE8\xBD\x8C",		"\xE7\x7A"=>"\xE8\xBD\x89",		"\xE7\x7B"=>"\xE8\xBD\x86",		"\xE7\x7C"=>"\xE8\xBD\x8E",		"\xE7\x7D"=>"\xE8\xBD\x97",		"\xE7\x7E"=>"\xE8\xBD\x9C",		"\xE7\x80"=>"\xE8\xBD\xA2",		"\xE7\x81"=>"\xE8\xBD\xA3",		"\xE7\x82"=>"\xE8\xBD\xA4",		"\xE7\x83"=>"\xE8\xBE\x9C",		"\xE7\x84"=>"\xE8\xBE\x9F",		"\xE7\x85"=>"\xE8\xBE\xA3",		"\xE7\x86"=>"\xE8\xBE\xAD",		"\xE7\x87"=>"\xE8\xBE\xAF",		"\xE7\x88"=>"\xE8\xBE\xB7",		"\xE7\x89"=>"\xE8\xBF\x9A",		"\xE7\x8A"=>"\xE8\xBF\xA5",		"\xE7\x8B"=>"\xE8\xBF\xA2",		"\xE7\x8C"=>"\xE8\xBF\xAA",		"\xE7\x8D"=>"\xE8\xBF\xAF",		"\xE7\x8E"=>"\xE9\x82\x87",		"\xE7\x8F"=>"\xE8\xBF\xB4",		"\xE7\x90"=>"\xE9\x80\x85",		"\xE7\x91"=>"\xE8\xBF\xB9",		"\xE7\x92"=>"\xE8\xBF\xBA",		"\xE7\x93"=>"\xE9\x80\x91",		"\xE7\x94"=>"\xE9\x80\x95",		"\xE7\x95"=>"\xE9\x80\xA1",		"\xE7\x96"=>"\xE9\x80\x8D",		"\xE7\x97"=>"\xE9\x80\x9E",		"\xE7\x98"=>"\xE9\x80\x96",		"\xE7\x99"=>"\xE9\x80\x8B",		"\xE7\x9A"=>"\xE9\x80\xA7",		"\xE7\x9B"=>"\xE9\x80\xB6",		"\xE7\x9C"=>"\xE9\x80\xB5",		"\xE7\x9D"=>"\xE9\x80\xB9",		"\xE7\x9E"=>"\xE8\xBF\xB8",		"\xE7\x9F"=>"\xE9\x81\x8F",		"\xE7\xA0"=>"\xE9\x81\x90",		"\xE7\xA1"=>"\xE9\x81\x91",		"\xE7\xA2"=>"\xE9\x81\x92",		"\xE7\xA3"=>"\xE9\x80\x8E",		"\xE7\xA4"=>"\xE9\x81\x89",		"\xE7\xA5"=>"\xE9\x80\xBE",		"\xE7\xA6"=>"\xE9\x81\x96",		"\xE7\xA7"=>"\xE9\x81\x98",		"\xE7\xA8"=>"\xE9\x81\x9E",		"\xE7\xA9"=>"\xE9\x81\xA8",		"\xE7\xAA"=>"\xE9\x81\xAF",		"\xE7\xAB"=>"\xE9\x81\xB6",		"\xE7\xAC"=>"\xE9\x9A\xA8",		"\xE7\xAD"=>"\xE9\x81\xB2",		"\xE7\xAE"=>"\xE9\x82\x82",		"\xE7\xAF"=>"\xE9\x81\xBD",		"\xE7\xB0"=>"\xE9\x82\x81",		"\xE7\xB1"=>"\xE9\x82\x80",		"\xE7\xB2"=>"\xE9\x82\x8A",		"\xE7\xB3"=>"\xE9\x82\x89",		"\xE7\xB4"=>"\xE9\x82\x8F",		"\xE7\xB5"=>"\xE9\x82\xA8",		"\xE7\xB6"=>"\xE9\x82\xAF",		"\xE7\xB7"=>"\xE9\x82\xB1",		"\xE7\xB8"=>"\xE9\x82\xB5",		"\xE7\xB9"=>"\xE9\x83\xA2",		"\xE7\xBA"=>"\xE9\x83\xA4",		"\xE7\xBB"=>"\xE6\x89\x88",		"\xE7\xBC"=>"\xE9\x83\x9B",		"\xE7\xBD"=>"\xE9\x84\x82",		"\xE7\xBE"=>"\xE9\x84\x92",		"\xE7\xBF"=>"\xE9\x84\x99",		"\xE7\xC0"=>"\xE9\x84\xB2",		"\xE7\xC1"=>"\xE9\x84\xB0",		"\xE7\xC2"=>"\xE9\x85\x8A",		"\xE7\xC3"=>"\xE9\x85\x96",		"\xE7\xC4"=>"\xE9\x85\x98",		"\xE7\xC5"=>"\xE9\x85\xA3",		"\xE7\xC6"=>"\xE9\x85\xA5",		"\xE7\xC7"=>"\xE9\x85\xA9",		"\xE7\xC8"=>"\xE9\x85\xB3",		"\xE7\xC9"=>"\xE9\x85\xB2",		"\xE7\xCA"=>"\xE9\x86\x8B",		"\xE7\xCB"=>"\xE9\x86\x89",		"\xE7\xCC"=>"\xE9\x86\x82",		"\xE7\xCD"=>"\xE9\x86\xA2",		"\xE7\xCE"=>"\xE9\x86\xAB",		"\xE7\xCF"=>"\xE9\x86\xAF",		"\xE7\xD0"=>"\xE9\x86\xAA",		"\xE7\xD1"=>"\xE9\x86\xB5",		"\xE7\xD2"=>"\xE9\x86\xB4",		"\xE7\xD3"=>"\xE9\x86\xBA",		"\xE7\xD4"=>"\xE9\x87\x80",		"\xE7\xD5"=>"\xE9\x87\x81",		"\xE7\xD6"=>"\xE9\x87\x89",		"\xE7\xD7"=>"\xE9\x87\x8B",		"\xE7\xD8"=>"\xE9\x87\x90",		"\xE7\xD9"=>"\xE9\x87\x96",		"\xE7\xDA"=>"\xE9\x87\x9F",		"\xE7\xDB"=>"\xE9\x87\xA1",		"\xE7\xDC"=>"\xE9\x87\x9B",		"\xE7\xDD"=>"\xE9\x87\xBC",		"\xE7\xDE"=>"\xE9\x87\xB5",		"\xE7\xDF"=>"\xE9\x87\xB6",		"\xE7\xE0"=>"\xE9\x88\x9E",		"\xE7\xE1"=>"\xE9\x87\xBF",		"\xE7\xE2"=>"\xE9\x88\x94",		"\xE7\xE3"=>"\xE9\x88\xAC",		"\xE7\xE4"=>"\xE9\x88\x95",		"\xE7\xE5"=>"\xE9\x88\x91",		"\xE7\xE6"=>"\xE9\x89\x9E",		"\xE7\xE7"=>"\xE9\x89\x97",		"\xE7\xE8"=>"\xE9\x89\x85",		"\xE7\xE9"=>"\xE9\x89\x89",		"\xE7\xEA"=>"\xE9\x89\xA4",		"\xE7\xEB"=>"\xE9\x89\x88",		"\xE7\xEC"=>"\xE9\x8A\x95",		"\xE7\xED"=>"\xE9\x88\xBF",		"\xE7\xEE"=>"\xE9\x89\x8B",		"\xE7\xEF"=>"\xE9\x89\x90",		"\xE7\xF0"=>"\xE9\x8A\x9C",		"\xE7\xF1"=>"\xE9\x8A\x96",		"\xE7\xF2"=>"\xE9\x8A\x93",		"\xE7\xF3"=>"\xE9\x8A\x9B",		"\xE7\xF4"=>"\xE9\x89\x9A",		"\xE7\xF5"=>"\xE9\x8B\x8F",		"\xE7\xF6"=>"\xE9\x8A\xB9",		"\xE7\xF7"=>"\xE9\x8A\xB7",		"\xE7\xF8"=>"\xE9\x8B\xA9",		"\xE7\xF9"=>"\xE9\x8C\x8F",		"\xE7\xFA"=>"\xE9\x8B\xBA",		"\xE7\xFB"=>"\xE9\x8D\x84",		"\xE7\xFC"=>"\xE9\x8C\xAE",		"\xE8\x40"=>"\xE9\x8C\x99",		"\xE8\x41"=>"\xE9\x8C\xA2",		"\xE8\x42"=>"\xE9\x8C\x9A",		"\xE8\x43"=>"\xE9\x8C\xA3",		"\xE8\x44"=>"\xE9\x8C\xBA",		"\xE8\x45"=>"\xE9\x8C\xB5",		"\xE8\x46"=>"\xE9\x8C\xBB",		"\xE8\x47"=>"\xE9\x8D\x9C",		"\xE8\x48"=>"\xE9\x8D\xA0",		"\xE8\x49"=>"\xE9\x8D\xBC",		"\xE8\x4A"=>"\xE9\x8D\xAE",		"\xE8\x4B"=>"\xE9\x8D\x96",		"\xE8\x4C"=>"\xE9\x8E\xB0",		"\xE8\x4D"=>"\xE9\x8E\xAC",		"\xE8\x4E"=>"\xE9\x8E\xAD",		"\xE8\x4F"=>"\xE9\x8E\x94",		"\xE8\x50"=>"\xE9\x8E\xB9",		"\xE8\x51"=>"\xE9\x8F\x96",		"\xE8\x52"=>"\xE9\x8F\x97",		"\xE8\x53"=>"\xE9\x8F\xA8",		"\xE8\x54"=>"\xE9\x8F\xA5",		"\xE8\x55"=>"\xE9\x8F\x98",		"\xE8\x56"=>"\xE9\x8F\x83",		"\xE8\x57"=>"\xE9\x8F\x9D",		"\xE8\x58"=>"\xE9\x8F\x90",		"\xE8\x59"=>"\xE9\x8F\x88",		"\xE8\x5A"=>"\xE9\x8F\xA4",		"\xE8\x5B"=>"\xE9\x90\x9A",		"\xE8\x5C"=>"\xE9\x90\x94",		"\xE8\x5D"=>"\xE9\x90\x93",		"\xE8\x5E"=>"\xE9\x90\x83",		"\xE8\x5F"=>"\xE9\x90\x87",		"\xE8\x60"=>"\xE9\x90\x90",		"\xE8\x61"=>"\xE9\x90\xB6",		"\xE8\x62"=>"\xE9\x90\xAB",		"\xE8\x63"=>"\xE9\x90\xB5",		"\xE8\x64"=>"\xE9\x90\xA1",		"\xE8\x65"=>"\xE9\x90\xBA",		"\xE8\x66"=>"\xE9\x91\x81",		"\xE8\x67"=>"\xE9\x91\x92",		"\xE8\x68"=>"\xE9\x91\x84",		"\xE8\x69"=>"\xE9\x91\x9B",		"\xE8\x6A"=>"\xE9\x91\xA0",		"\xE8\x6B"=>"\xE9\x91\xA2",		"\xE8\x6C"=>"\xE9\x91\x9E",		"\xE8\x6D"=>"\xE9\x91\xAA",		"\xE8\x6E"=>"\xE9\x88\xA9",		"\xE8\x6F"=>"\xE9\x91\xB0",		"\xE8\x70"=>"\xE9\x91\xB5",		"\xE8\x71"=>"\xE9\x91\xB7",		"\xE8\x72"=>"\xE9\x91\xBD",		"\xE8\x73"=>"\xE9\x91\x9A",		"\xE8\x74"=>"\xE9\x91\xBC",		"\xE8\x75"=>"\xE9\x91\xBE",		"\xE8\x76"=>"\xE9\x92\x81",		"\xE8\x77"=>"\xE9\x91\xBF",		"\xE8\x78"=>"\xE9\x96\x82",		"\xE8\x79"=>"\xE9\x96\x87",		"\xE8\x7A"=>"\xE9\x96\x8A",		"\xE8\x7B"=>"\xE9\x96\x94",		"\xE8\x7C"=>"\xE9\x96\x96",		"\xE8\x7D"=>"\xE9\x96\x98",		"\xE8\x7E"=>"\xE9\x96\x99",		"\xE8\x80"=>"\xE9\x96\xA0",		"\xE8\x81"=>"\xE9\x96\xA8",		"\xE8\x82"=>"\xE9\x96\xA7",		"\xE8\x83"=>"\xE9\x96\xAD",		"\xE8\x84"=>"\xE9\x96\xBC",		"\xE8\x85"=>"\xE9\x96\xBB",		"\xE8\x86"=>"\xE9\x96\xB9",		"\xE8\x87"=>"\xE9\x96\xBE",		"\xE8\x88"=>"\xE9\x97\x8A",		"\xE8\x89"=>"\xE6\xBF\xB6",		"\xE8\x8A"=>"\xE9\x97\x83",		"\xE8\x8B"=>"\xE9\x97\x8D",		"\xE8\x8C"=>"\xE9\x97\x8C",		"\xE8\x8D"=>"\xE9\x97\x95",		"\xE8\x8E"=>"\xE9\x97\x94",		"\xE8\x8F"=>"\xE9\x97\x96",		"\xE8\x90"=>"\xE9\x97\x9C",		"\xE8\x91"=>"\xE9\x97\xA1",		"\xE8\x92"=>"\xE9\x97\xA5",		"\xE8\x93"=>"\xE9\x97\xA2",		"\xE8\x94"=>"\xE9\x98\xA1",		"\xE8\x95"=>"\xE9\x98\xA8",		"\xE8\x96"=>"\xE9\x98\xAE",		"\xE8\x97"=>"\xE9\x98\xAF",		"\xE8\x98"=>"\xE9\x99\x82",		"\xE8\x99"=>"\xE9\x99\x8C",		"\xE8\x9A"=>"\xE9\x99\x8F",		"\xE8\x9B"=>"\xE9\x99\x8B",		"\xE8\x9C"=>"\xE9\x99\xB7",		"\xE8\x9D"=>"\xE9\x99\x9C",		"\xE8\x9E"=>"\xE9\x99\x9E",		"\xE8\x9F"=>"\xE9\x99\x9D",		"\xE8\xA0"=>"\xE9\x99\x9F",		"\xE8\xA1"=>"\xE9\x99\xA6",		"\xE8\xA2"=>"\xE9\x99\xB2",		"\xE8\xA3"=>"\xE9\x99\xAC",		"\xE8\xA4"=>"\xE9\x9A\x8D",		"\xE8\xA5"=>"\xE9\x9A\x98",		"\xE8\xA6"=>"\xE9\x9A\x95",		"\xE8\xA7"=>"\xE9\x9A\x97",		"\xE8\xA8"=>"\xE9\x9A\xAA",		"\xE8\xA9"=>"\xE9\x9A\xA7",		"\xE8\xAA"=>"\xE9\x9A\xB1",		"\xE8\xAB"=>"\xE9\x9A\xB2",		"\xE8\xAC"=>"\xE9\x9A\xB0",		"\xE8\xAD"=>"\xE9\x9A\xB4",		"\xE8\xAE"=>"\xE9\x9A\xB6",		"\xE8\xAF"=>"\xE9\x9A\xB8",		"\xE8\xB0"=>"\xE9\x9A\xB9",		"\xE8\xB1"=>"\xE9\x9B\x8E",		"\xE8\xB2"=>"\xE9\x9B\x8B",		"\xE8\xB3"=>"\xE9\x9B\x89",		"\xE8\xB4"=>"\xE9\x9B\x8D",		"\xE8\xB5"=>"\xE8\xA5\x8D",		"\xE8\xB6"=>"\xE9\x9B\x9C",		"\xE8\xB7"=>"\xE9\x9C\x8D",		"\xE8\xB8"=>"\xE9\x9B\x95",		"\xE8\xB9"=>"\xE9\x9B\xB9",		"\xE8\xBA"=>"\xE9\x9C\x84",		"\xE8\xBB"=>"\xE9\x9C\x86",		"\xE8\xBC"=>"\xE9\x9C\x88",		"\xE8\xBD"=>"\xE9\x9C\x93",		"\xE8\xBE"=>"\xE9\x9C\x8E",		"\xE8\xBF"=>"\xE9\x9C\x91",		"\xE8\xC0"=>"\xE9\x9C\x8F",		"\xE8\xC1"=>"\xE9\x9C\x96",		"\xE8\xC2"=>"\xE9\x9C\x99",		"\xE8\xC3"=>"\xE9\x9C\xA4",		"\xE8\xC4"=>"\xE9\x9C\xAA",		"\xE8\xC5"=>"\xE9\x9C\xB0",		"\xE8\xC6"=>"\xE9\x9C\xB9",		"\xE8\xC7"=>"\xE9\x9C\xBD",		"\xE8\xC8"=>"\xE9\x9C\xBE",		"\xE8\xC9"=>"\xE9\x9D\x84",		"\xE8\xCA"=>"\xE9\x9D\x86",		"\xE8\xCB"=>"\xE9\x9D\x88",		"\xE8\xCC"=>"\xE9\x9D\x82",		"\xE8\xCD"=>"\xE9\x9D\x89",		"\xE8\xCE"=>"\xE9\x9D\x9C",		"\xE8\xCF"=>"\xE9\x9D\xA0",		"\xE8\xD0"=>"\xE9\x9D\xA4",		"\xE8\xD1"=>"\xE9\x9D\xA6",		"\xE8\xD2"=>"\xE9\x9D\xA8",		"\xE8\xD3"=>"\xE5\x8B\x92",		"\xE8\xD4"=>"\xE9\x9D\xAB",		"\xE8\xD5"=>"\xE9\x9D\xB1",		"\xE8\xD6"=>"\xE9\x9D\xB9",		"\xE8\xD7"=>"\xE9\x9E\x85",		"\xE8\xD8"=>"\xE9\x9D\xBC",		"\xE8\xD9"=>"\xE9\x9E\x81",		"\xE8\xDA"=>"\xE9\x9D\xBA",		"\xE8\xDB"=>"\xE9\x9E\x86",		"\xE8\xDC"=>"\xE9\x9E\x8B",		"\xE8\xDD"=>"\xE9\x9E\x8F",		"\xE8\xDE"=>"\xE9\x9E\x90",		"\xE8\xDF"=>"\xE9\x9E\x9C",		"\xE8\xE0"=>"\xE9\x9E\xA8",		"\xE8\xE1"=>"\xE9\x9E\xA6",		"\xE8\xE2"=>"\xE9\x9E\xA3",		"\xE8\xE3"=>"\xE9\x9E\xB3",		"\xE8\xE4"=>"\xE9\x9E\xB4",		"\xE8\xE5"=>"\xE9\x9F\x83",		"\xE8\xE6"=>"\xE9\x9F\x86",		"\xE8\xE7"=>"\xE9\x9F\x88",		"\xE8\xE8"=>"\xE9\x9F\x8B",		"\xE8\xE9"=>"\xE9\x9F\x9C",		"\xE8\xEA"=>"\xE9\x9F\xAD",		"\xE8\xEB"=>"\xE9\xBD\x8F",		"\xE8\xEC"=>"\xE9\x9F\xB2",		"\xE8\xED"=>"\xE7\xAB\x9F",		"\xE8\xEE"=>"\xE9\x9F\xB6",		"\xE8\xEF"=>"\xE9\x9F\xB5",		"\xE8\xF0"=>"\xE9\xA0\x8F",		"\xE8\xF1"=>"\xE9\xA0\x8C",		"\xE8\xF2"=>"\xE9\xA0\xB8",		"\xE8\xF3"=>"\xE9\xA0\xA4",		"\xE8\xF4"=>"\xE9\xA0\xA1",		"\xE8\xF5"=>"\xE9\xA0\xB7",		"\xE8\xF6"=>"\xE9\xA0\xBD",		"\xE8\xF7"=>"\xE9\xA1\x86",		"\xE8\xF8"=>"\xE9\xA1\x8F",		"\xE8\xF9"=>"\xE9\xA1\x8B",		"\xE8\xFA"=>"\xE9\xA1\xAB",		"\xE8\xFB"=>"\xE9\xA1\xAF",		"\xE8\xFC"=>"\xE9\xA1\xB0",		"\xE9\x40"=>"\xE9\xA1\xB1",		"\xE9\x41"=>"\xE9\xA1\xB4",		"\xE9\x42"=>"\xE9\xA1\xB3",		"\xE9\x43"=>"\xE9\xA2\xAA",		"\xE9\x44"=>"\xE9\xA2\xAF",		"\xE9\x45"=>"\xE9\xA2\xB1",		"\xE9\x46"=>"\xE9\xA2\xB6",		"\xE9\x47"=>"\xE9\xA3\x84",		"\xE9\x48"=>"\xE9\xA3\x83",		"\xE9\x49"=>"\xE9\xA3\x86",		"\xE9\x4A"=>"\xE9\xA3\xA9",		"\xE9\x4B"=>"\xE9\xA3\xAB",		"\xE9\x4C"=>"\xE9\xA4\x83",		"\xE9\x4D"=>"\xE9\xA4\x89",		"\xE9\x4E"=>"\xE9\xA4\x92",		"\xE9\x4F"=>"\xE9\xA4\x94",		"\xE9\x50"=>"\xE9\xA4\x98",		"\xE9\x51"=>"\xE9\xA4\xA1",		"\xE9\x52"=>"\xE9\xA4\x9D",		"\xE9\x53"=>"\xE9\xA4\x9E",		"\xE9\x54"=>"\xE9\xA4\xA4",		"\xE9\x55"=>"\xE9\xA4\xA0",		"\xE9\x56"=>"\xE9\xA4\xAC",		"\xE9\x57"=>"\xE9\xA4\xAE",		"\xE9\x58"=>"\xE9\xA4\xBD",		"\xE9\x59"=>"\xE9\xA4\xBE",		"\xE9\x5A"=>"\xE9\xA5\x82",		"\xE9\x5B"=>"\xE9\xA5\x89",		"\xE9\x5C"=>"\xE9\xA5\x85",		"\xE9\x5D"=>"\xE9\xA5\x90",		"\xE9\x5E"=>"\xE9\xA5\x8B",		"\xE9\x5F"=>"\xE9\xA5\x91",		"\xE9\x60"=>"\xE9\xA5\x92",		"\xE9\x61"=>"\xE9\xA5\x8C",		"\xE9\x62"=>"\xE9\xA5\x95",		"\xE9\x63"=>"\xE9\xA6\x97",		"\xE9\x64"=>"\xE9\xA6\x98",		"\xE9\x65"=>"\xE9\xA6\xA5",		"\xE9\x66"=>"\xE9\xA6\xAD",		"\xE9\x67"=>"\xE9\xA6\xAE",		"\xE9\x68"=>"\xE9\xA6\xBC",		"\xE9\x69"=>"\xE9\xA7\x9F",		"\xE9\x6A"=>"\xE9\xA7\x9B",		"\xE9\x6B"=>"\xE9\xA7\x9D",		"\xE9\x6C"=>"\xE9\xA7\x98",		"\xE9\x6D"=>"\xE9\xA7\x91",		"\xE9\x6E"=>"\xE9\xA7\xAD",		"\xE9\x6F"=>"\xE9\xA7\xAE",		"\xE9\x70"=>"\xE9\xA7\xB1",		"\xE9\x71"=>"\xE9\xA7\xB2",		"\xE9\x72"=>"\xE9\xA7\xBB",		"\xE9\x73"=>"\xE9\xA7\xB8",		"\xE9\x74"=>"\xE9\xA8\x81",		"\xE9\x75"=>"\xE9\xA8\x8F",		"\xE9\x76"=>"\xE9\xA8\x85",		"\xE9\x77"=>"\xE9\xA7\xA2",		"\xE9\x78"=>"\xE9\xA8\x99",		"\xE9\x79"=>"\xE9\xA8\xAB",		"\xE9\x7A"=>"\xE9\xA8\xB7",		"\xE9\x7B"=>"\xE9\xA9\x85",		"\xE9\x7C"=>"\xE9\xA9\x82",		"\xE9\x7D"=>"\xE9\xA9\x80",		"\xE9\x7E"=>"\xE9\xA9\x83",		"\xE9\x80"=>"\xE9\xA8\xBE",		"\xE9\x81"=>"\xE9\xA9\x95",		"\xE9\x82"=>"\xE9\xA9\x8D",		"\xE9\x83"=>"\xE9\xA9\x9B",		"\xE9\x84"=>"\xE9\xA9\x97",		"\xE9\x85"=>"\xE9\xA9\x9F",		"\xE9\x86"=>"\xE9\xA9\xA2",		"\xE9\x87"=>"\xE9\xA9\xA5",		"\xE9\x88"=>"\xE9\xA9\xA4",		"\xE9\x89"=>"\xE9\xA9\xA9",		"\xE9\x8A"=>"\xE9\xA9\xAB",		"\xE9\x8B"=>"\xE9\xA9\xAA",		"\xE9\x8C"=>"\xE9\xAA\xAD",		"\xE9\x8D"=>"\xE9\xAA\xB0",		"\xE9\x8E"=>"\xE9\xAA\xBC",		"\xE9\x8F"=>"\xE9\xAB\x80",		"\xE9\x90"=>"\xE9\xAB\x8F",		"\xE9\x91"=>"\xE9\xAB\x91",		"\xE9\x92"=>"\xE9\xAB\x93",		"\xE9\x93"=>"\xE9\xAB\x94",		"\xE9\x94"=>"\xE9\xAB\x9E",		"\xE9\x95"=>"\xE9\xAB\x9F",		"\xE9\x96"=>"\xE9\xAB\xA2",		"\xE9\x97"=>"\xE9\xAB\xA3",		"\xE9\x98"=>"\xE9\xAB\xA6",		"\xE9\x99"=>"\xE9\xAB\xAF",		"\xE9\x9A"=>"\xE9\xAB\xAB",		"\xE9\x9B"=>"\xE9\xAB\xAE",		"\xE9\x9C"=>"\xE9\xAB\xB4",		"\xE9\x9D"=>"\xE9\xAB\xB1",		"\xE9\x9E"=>"\xE9\xAB\xB7",		"\xE9\x9F"=>"\xE9\xAB\xBB",		"\xE9\xA0"=>"\xE9\xAC\x86",		"\xE9\xA1"=>"\xE9\xAC\x98",		"\xE9\xA2"=>"\xE9\xAC\x9A",		"\xE9\xA3"=>"\xE9\xAC\x9F",		"\xE9\xA4"=>"\xE9\xAC\xA2",		"\xE9\xA5"=>"\xE9\xAC\xA3",		"\xE9\xA6"=>"\xE9\xAC\xA5",		"\xE9\xA7"=>"\xE9\xAC\xA7",		"\xE9\xA8"=>"\xE9\xAC\xA8",		"\xE9\xA9"=>"\xE9\xAC\xA9",		"\xE9\xAA"=>"\xE9\xAC\xAA",		"\xE9\xAB"=>"\xE9\xAC\xAE",		"\xE9\xAC"=>"\xE9\xAC\xAF",		"\xE9\xAD"=>"\xE9\xAC\xB2",		"\xE9\xAE"=>"\xE9\xAD\x84",		"\xE9\xAF"=>"\xE9\xAD\x83",		"\xE9\xB0"=>"\xE9\xAD\x8F",		"\xE9\xB1"=>"\xE9\xAD\x8D",		"\xE9\xB2"=>"\xE9\xAD\x8E",		"\xE9\xB3"=>"\xE9\xAD\x91",		"\xE9\xB4"=>"\xE9\xAD\x98",		"\xE9\xB5"=>"\xE9\xAD\xB4",		"\xE9\xB6"=>"\xE9\xAE\x93",		"\xE9\xB7"=>"\xE9\xAE\x83",		"\xE9\xB8"=>"\xE9\xAE\x91",		"\xE9\xB9"=>"\xE9\xAE\x96",		"\xE9\xBA"=>"\xE9\xAE\x97",		"\xE9\xBB"=>"\xE9\xAE\x9F",		"\xE9\xBC"=>"\xE9\xAE\xA0",		"\xE9\xBD"=>"\xE9\xAE\xA8",		"\xE9\xBE"=>"\xE9\xAE\xB4",		"\xE9\xBF"=>"\xE9\xAF\x80",		"\xE9\xC0"=>"\xE9\xAF\x8A",		"\xE9\xC1"=>"\xE9\xAE\xB9",		"\xE9\xC2"=>"\xE9\xAF\x86",		"\xE9\xC3"=>"\xE9\xAF\x8F",		"\xE9\xC4"=>"\xE9\xAF\x91",		"\xE9\xC5"=>"\xE9\xAF\x92",		"\xE9\xC6"=>"\xE9\xAF\xA3",		"\xE9\xC7"=>"\xE9\xAF\xA2",		"\xE9\xC8"=>"\xE9\xAF\xA4",		"\xE9\xC9"=>"\xE9\xAF\x94",		"\xE9\xCA"=>"\xE9\xAF\xA1",		"\xE9\xCB"=>"\xE9\xB0\xBA",		"\xE9\xCC"=>"\xE9\xAF\xB2",		"\xE9\xCD"=>"\xE9\xAF\xB1",		"\xE9\xCE"=>"\xE9\xAF\xB0",		"\xE9\xCF"=>"\xE9\xB0\x95",		"\xE9\xD0"=>"\xE9\xB0\x94",		"\xE9\xD1"=>"\xE9\xB0\x89",		"\xE9\xD2"=>"\xE9\xB0\x93",		"\xE9\xD3"=>"\xE9\xB0\x8C",		"\xE9\xD4"=>"\xE9\xB0\x86",		"\xE9\xD5"=>"\xE9\xB0\x88",		"\xE9\xD6"=>"\xE9\xB0\x92",		"\xE9\xD7"=>"\xE9\xB0\x8A",		"\xE9\xD8"=>"\xE9\xB0\x84",		"\xE9\xD9"=>"\xE9\xB0\xAE",		"\xE9\xDA"=>"\xE9\xB0\x9B",		"\xE9\xDB"=>"\xE9\xB0\xA5",		"\xE9\xDC"=>"\xE9\xB0\xA4",		"\xE9\xDD"=>"\xE9\xB0\xA1",		"\xE9\xDE"=>"\xE9\xB0\xB0",		"\xE9\xDF"=>"\xE9\xB1\x87",		"\xE9\xE0"=>"\xE9\xB0\xB2",		"\xE9\xE1"=>"\xE9\xB1\x86",		"\xE9\xE2"=>"\xE9\xB0\xBE",		"\xE9\xE3"=>"\xE9\xB1\x9A",		"\xE9\xE4"=>"\xE9\xB1\xA0",		"\xE9\xE5"=>"\xE9\xB1\xA7",		"\xE9\xE6"=>"\xE9\xB1\xB6",		"\xE9\xE7"=>"\xE9\xB1\xB8",		"\xE9\xE8"=>"\xE9\xB3\xA7",		"\xE9\xE9"=>"\xE9\xB3\xAC",		"\xE9\xEA"=>"\xE9\xB3\xB0",		"\xE9\xEB"=>"\xE9\xB4\x89",		"\xE9\xEC"=>"\xE9\xB4\x88",		"\xE9\xED"=>"\xE9\xB3\xAB",		"\xE9\xEE"=>"\xE9\xB4\x83",		"\xE9\xEF"=>"\xE9\xB4\x86",		"\xE9\xF0"=>"\xE9\xB4\xAA",		"\xE9\xF1"=>"\xE9\xB4\xA6",		"\xE9\xF2"=>"\xE9\xB6\xAF",		"\xE9\xF3"=>"\xE9\xB4\xA3",		"\xE9\xF4"=>"\xE9\xB4\x9F",		"\xE9\xF5"=>"\xE9\xB5\x84",		"\xE9\xF6"=>"\xE9\xB4\x95",		"\xE9\xF7"=>"\xE9\xB4\x92",		"\xE9\xF8"=>"\xE9\xB5\x81",		"\xE9\xF9"=>"\xE9\xB4\xBF",		"\xE9\xFA"=>"\xE9\xB4\xBE",		"\xE9\xFB"=>"\xE9\xB5\x86",		"\xE9\xFC"=>"\xE9\xB5\x88",		"\xEA\x40"=>"\xE9\xB5\x9D",		"\xEA\x41"=>"\xE9\xB5\x9E",		"\xEA\x42"=>"\xE9\xB5\xA4",		"\xEA\x43"=>"\xE9\xB5\x91",		"\xEA\x44"=>"\xE9\xB5\x90",		"\xEA\x45"=>"\xE9\xB5\x99",		"\xEA\x46"=>"\xE9\xB5\xB2",		"\xEA\x47"=>"\xE9\xB6\x89",		"\xEA\x48"=>"\xE9\xB6\x87",		"\xEA\x49"=>"\xE9\xB6\xAB",		"\xEA\x4A"=>"\xE9\xB5\xAF",		"\xEA\x4B"=>"\xE9\xB5\xBA",		"\xEA\x4C"=>"\xE9\xB6\x9A",		"\xEA\x4D"=>"\xE9\xB6\xA4",		"\xEA\x4E"=>"\xE9\xB6\xA9",		"\xEA\x4F"=>"\xE9\xB6\xB2",		"\xEA\x50"=>"\xE9\xB7\x84",		"\xEA\x51"=>"\xE9\xB7\x81",		"\xEA\x52"=>"\xE9\xB6\xBB",		"\xEA\x53"=>"\xE9\xB6\xB8",		"\xEA\x54"=>"\xE9\xB6\xBA",		"\xEA\x55"=>"\xE9\xB7\x86",		"\xEA\x56"=>"\xE9\xB7\x8F",		"\xEA\x57"=>"\xE9\xB7\x82",		"\xEA\x58"=>"\xE9\xB7\x99",		"\xEA\x59"=>"\xE9\xB7\x93",		"\xEA\x5A"=>"\xE9\xB7\xB8",		"\xEA\x5B"=>"\xE9\xB7\xA6",		"\xEA\x5C"=>"\xE9\xB7\xAD",		"\xEA\x5D"=>"\xE9\xB7\xAF",		"\xEA\x5E"=>"\xE9\xB7\xBD",		"\xEA\x5F"=>"\xE9\xB8\x9A",		"\xEA\x60"=>"\xE9\xB8\x9B",		"\xEA\x61"=>"\xE9\xB8\x9E",		"\xEA\x62"=>"\xE9\xB9\xB5",		"\xEA\x63"=>"\xE9\xB9\xB9",		"\xEA\x64"=>"\xE9\xB9\xBD",		"\xEA\x65"=>"\xE9\xBA\x81",		"\xEA\x66"=>"\xE9\xBA\x88",		"\xEA\x67"=>"\xE9\xBA\x8B",		"\xEA\x68"=>"\xE9\xBA\x8C",		"\xEA\x69"=>"\xE9\xBA\x92",		"\xEA\x6A"=>"\xE9\xBA\x95",		"\xEA\x6B"=>"\xE9\xBA\x91",		"\xEA\x6C"=>"\xE9\xBA\x9D",		"\xEA\x6D"=>"\xE9\xBA\xA5",		"\xEA\x6E"=>"\xE9\xBA\xA9",		"\xEA\x6F"=>"\xE9\xBA\xB8",		"\xEA\x70"=>"\xE9\xBA\xAA",		"\xEA\x71"=>"\xE9\xBA\xAD",		"\xEA\x72"=>"\xE9\x9D\xA1",		"\xEA\x73"=>"\xE9\xBB\x8C",		"\xEA\x74"=>"\xE9\xBB\x8E",		"\xEA\x75"=>"\xE9\xBB\x8F",		"\xEA\x76"=>"\xE9\xBB\x90",		"\xEA\x77"=>"\xE9\xBB\x94",		"\xEA\x78"=>"\xE9\xBB\x9C",		"\xEA\x79"=>"\xE9\xBB\x9E",		"\xEA\x7A"=>"\xE9\xBB\x9D",		"\xEA\x7B"=>"\xE9\xBB\xA0",		"\xEA\x7C"=>"\xE9\xBB\xA5",		"\xEA\x7D"=>"\xE9\xBB\xA8",		"\xEA\x7E"=>"\xE9\xBB\xAF",		"\xEA\x80"=>"\xE9\xBB\xB4",		"\xEA\x81"=>"\xE9\xBB\xB6",		"\xEA\x82"=>"\xE9\xBB\xB7",		"\xEA\x83"=>"\xE9\xBB\xB9",		"\xEA\x84"=>"\xE9\xBB\xBB",		"\xEA\x85"=>"\xE9\xBB\xBC",		"\xEA\x86"=>"\xE9\xBB\xBD",		"\xEA\x87"=>"\xE9\xBC\x87",		"\xEA\x88"=>"\xE9\xBC\x88",		"\xEA\x89"=>"\xE7\x9A\xB7",		"\xEA\x8A"=>"\xE9\xBC\x95",		"\xEA\x8B"=>"\xE9\xBC\xA1",		"\xEA\x8C"=>"\xE9\xBC\xAC",		"\xEA\x8D"=>"\xE9\xBC\xBE",		"\xEA\x8E"=>"\xE9\xBD\x8A",		"\xEA\x8F"=>"\xE9\xBD\x92",		"\xEA\x90"=>"\xE9\xBD\x94",		"\xEA\x91"=>"\xE9\xBD\xA3",		"\xEA\x92"=>"\xE9\xBD\x9F",		"\xEA\x93"=>"\xE9\xBD\xA0",		"\xEA\x94"=>"\xE9\xBD\xA1",		"\xEA\x95"=>"\xE9\xBD\xA6",		"\xEA\x96"=>"\xE9\xBD\xA7",		"\xEA\x97"=>"\xE9\xBD\xAC",		"\xEA\x98"=>"\xE9\xBD\xAA",		"\xEA\x99"=>"\xE9\xBD\xB7",		"\xEA\x9A"=>"\xE9\xBD\xB2",		"\xEA\x9B"=>"\xE9\xBD\xB6",		"\xEA\x9C"=>"\xE9\xBE\x95",		"\xEA\x9D"=>"\xE9\xBE\x9C",		"\xEA\x9E"=>"\xE9\xBE\xA0",		"\xEA\x9F"=>"\xE5\xA0\xAF",		"\xEA\xA0"=>"\xE6\xA7\x87",		"\xEA\xA1"=>"\xE9\x81\x99",		"\xEA\xA2"=>"\xE7\x91\xA4",		"\xEA\xA3"=>"\xE5\x87\x9C",		"\xEA\xA4"=>"\xE7\x86\x99"	);	return strtr($string, $transform);}function euc_kr($string){	static $transform = array(		"\x5c" => "\xE2\x82\xA9", // KX X 1001		"\x81\x41" => "\xEA\xB0\x82",		"\x81\x42" => "\xEA\xB0\x83",		"\x81\x43" => "\xEA\xB0\x85",		"\x81\x44" => "\xEA\xB0\x86",		"\x81\x45" => "\xEA\xB0\x8B",		"\x81\x46" => "\xEA\xB0\x8C",		"\x81\x47" => "\xEA\xB0\x8D",		"\x81\x48" => "\xEA\xB0\x8E",		"\x81\x49" => "\xEA\xB0\x8F",		"\x81\x4A" => "\xEA\xB0\x98",		"\x81\x4B" => "\xEA\xB0\x9E",		"\x81\x4C" => "\xEA\xB0\x9F",		"\x81\x4D" => "\xEA\xB0\xA1",		"\x81\x4E" => "\xEA\xB0\xA2",		"\x81\x4F" => "\xEA\xB0\xA3",		"\x81\x50" => "\xEA\xB0\xA5",		"\x81\x51" => "\xEA\xB0\xA6",		"\x81\x52" => "\xEA\xB0\xA7",		"\x81\x53" => "\xEA\xB0\xA8",		"\x81\x54" => "\xEA\xB0\xA9",		"\x81\x55" => "\xEA\xB0\xAA",		"\x81\x56" => "\xEA\xB0\xAB",		"\x81\x57" => "\xEA\xB0\xAE",		"\x81\x58" => "\xEA\xB0\xB2",		"\x81\x59" => "\xEA\xB0\xB3",		"\x81\x5A" => "\xEA\xB0\xB4",		"\x81\x61" => "\xEA\xB0\xB5",		"\x81\x62" => "\xEA\xB0\xB6",		"\x81\x63" => "\xEA\xB0\xB7",		"\x81\x64" => "\xEA\xB0\xBA",		"\x81\x65" => "\xEA\xB0\xBB",		"\x81\x66" => "\xEA\xB0\xBD",		"\x81\x67" => "\xEA\xB0\xBE",		"\x81\x68" => "\xEA\xB0\xBF",		"\x81\x69" => "\xEA\xB1\x81",		"\x81\x6A" => "\xEA\xB1\x82",		"\x81\x6B" => "\xEA\xB1\x83",		"\x81\x6C" => "\xEA\xB1\x84",		"\x81\x6D" => "\xEA\xB1\x85",		"\x81\x6E" => "\xEA\xB1\x86",		"\x81\x6F" => "\xEA\xB1\x87",		"\x81\x70" => "\xEA\xB1\x88",		"\x81\x71" => "\xEA\xB1\x89",		"\x81\x72" => "\xEA\xB1\x8A",		"\x81\x73" => "\xEA\xB1\x8C",		"\x81\x74" => "\xEA\xB1\x8E",		"\x81\x75" => "\xEA\xB1\x8F",		"\x81\x76" => "\xEA\xB1\x90",		"\x81\x77" => "\xEA\xB1\x91",		"\x81\x78" => "\xEA\xB1\x92",		"\x81\x79" => "\xEA\xB1\x93",		"\x81\x7A" => "\xEA\xB1\x95",		"\x81\x81" => "\xEA\xB1\x96",		"\x81\x82" => "\xEA\xB1\x97",		"\x81\x83" => "\xEA\xB1\x99",		"\x81\x84" => "\xEA\xB1\x9A",		"\x81\x85" => "\xEA\xB1\x9B",		"\x81\x86" => "\xEA\xB1\x9D",		"\x81\x87" => "\xEA\xB1\x9E",		"\x81\x88" => "\xEA\xB1\x9F",		"\x81\x89" => "\xEA\xB1\xA0",		"\x81\x8A" => "\xEA\xB1\xA1",		"\x81\x8B" => "\xEA\xB1\xA2",		"\x81\x8C" => "\xEA\xB1\xA3",		"\x81\x8D" => "\xEA\xB1\xA4",		"\x81\x8E" => "\xEA\xB1\xA5",		"\x81\x8F" => "\xEA\xB1\xA6",		"\x81\x90" => "\xEA\xB1\xA7",		"\x81\x91" => "\xEA\xB1\xA8",		"\x81\x92" => "\xEA\xB1\xA9",		"\x81\x93" => "\xEA\xB1\xAA",		"\x81\x94" => "\xEA\xB1\xAB",		"\x81\x95" => "\xEA\xB1\xAC",		"\x81\x96" => "\xEA\xB1\xAD",		"\x81\x97" => "\xEA\xB1\xAE",		"\x81\x98" => "\xEA\xB1\xAF",		"\x81\x99" => "\xEA\xB1\xB2",		"\x81\x9A" => "\xEA\xB1\xB3",		"\x81\x9B" => "\xEA\xB1\xB5",		"\x81\x9C" => "\xEA\xB1\xB6",		"\x81\x9D" => "\xEA\xB1\xB9",		"\x81\x9E" => "\xEA\xB1\xBB",		"\x81\x9F" => "\xEA\xB1\xBC",		"\x81\xA0" => "\xEA\xB1\xBD",		"\x81\xA1" => "\xEA\xB1\xBE",		"\x81\xA2" => "\xEA\xB1\xBF",		"\x81\xA3" => "\xEA\xB2\x82",		"\x81\xA4" => "\xEA\xB2\x87",		"\x81\xA5" => "\xEA\xB2\x88",		"\x81\xA6" => "\xEA\xB2\x8D",		"\x81\xA7" => "\xEA\xB2\x8E",		"\x81\xA8" => "\xEA\xB2\x8F",		"\x81\xA9" => "\xEA\xB2\x91",		"\x81\xAA" => "\xEA\xB2\x92",		"\x81\xAB" => "\xEA\xB2\x93",		"\x81\xAC" => "\xEA\xB2\x95",		"\x81\xAD" => "\xEA\xB2\x96",		"\x81\xAE" => "\xEA\xB2\x97",		"\x81\xAF" => "\xEA\xB2\x98",		"\x81\xB0" => "\xEA\xB2\x99",		"\x81\xB1" => "\xEA\xB2\x9A",		"\x81\xB2" => "\xEA\xB2\x9B",		"\x81\xB3" => "\xEA\xB2\x9E",		"\x81\xB4" => "\xEA\xB2\xA2",		"\x81\xB5" => "\xEA\xB2\xA3",		"\x81\xB6" => "\xEA\xB2\xA4",		"\x81\xB7" => "\xEA\xB2\xA5",		"\x81\xB8" => "\xEA\xB2\xA6",		"\x81\xB9" => "\xEA\xB2\xA7",		"\x81\xBA" => "\xEA\xB2\xAB",		"\x81\xBB" => "\xEA\xB2\xAD",		"\x81\xBC" => "\xEA\xB2\xAE",		"\x81\xBD" => "\xEA\xB2\xB1",		"\x81\xBE" => "\xEA\xB2\xB2",		"\x81\xBF" => "\xEA\xB2\xB3",		"\x81\xC0" => "\xEA\xB2\xB4",		"\x81\xC1" => "\xEA\xB2\xB5",		"\x81\xC2" => "\xEA\xB2\xB6",		"\x81\xC3" => "\xEA\xB2\xB7",		"\x81\xC4" => "\xEA\xB2\xBA",		"\x81\xC5" => "\xEA\xB2\xBE",		"\x81\xC6" => "\xEA\xB2\xBF",		"\x81\xC7" => "\xEA\xB3\x80",		"\x81\xC8" => "\xEA\xB3\x82",		"\x81\xC9" => "\xEA\xB3\x83",		"\x81\xCA" => "\xEA\xB3\x85",		"\x81\xCB" => "\xEA\xB3\x86",		"\x81\xCC" => "\xEA\xB3\x87",		"\x81\xCD" => "\xEA\xB3\x89",		"\x81\xCE" => "\xEA\xB3\x8A",		"\x81\xCF" => "\xEA\xB3\x8B",		"\x81\xD0" => "\xEA\xB3\x8D",		"\x81\xD1" => "\xEA\xB3\x8E",		"\x81\xD2" => "\xEA\xB3\x8F",		"\x81\xD3" => "\xEA\xB3\x90",		"\x81\xD4" => "\xEA\xB3\x91",		"\x81\xD5" => "\xEA\xB3\x92",		"\x81\xD6" => "\xEA\xB3\x93",		"\x81\xD7" => "\xEA\xB3\x94",		"\x81\xD8" => "\xEA\xB3\x96",		"\x81\xD9" => "\xEA\xB3\x98",		"\x81\xDA" => "\xEA\xB3\x99",		"\x81\xDB" => "\xEA\xB3\x9A",		"\x81\xDC" => "\xEA\xB3\x9B",		"\x81\xDD" => "\xEA\xB3\x9C",		"\x81\xDE" => "\xEA\xB3\x9D",		"\x81\xDF" => "\xEA\xB3\x9E",		"\x81\xE0" => "\xEA\xB3\x9F",		"\x81\xE1" => "\xEA\xB3\xA2",		"\x81\xE2" => "\xEA\xB3\xA3",		"\x81\xE3" => "\xEA\xB3\xA5",		"\x81\xE4" => "\xEA\xB3\xA6",		"\x81\xE5" => "\xEA\xB3\xA9",		"\x81\xE6" => "\xEA\xB3\xAB",		"\x81\xE7" => "\xEA\xB3\xAD",		"\x81\xE8" => "\xEA\xB3\xAE",		"\x81\xE9" => "\xEA\xB3\xB2",		"\x81\xEA" => "\xEA\xB3\xB4",		"\x81\xEB" => "\xEA\xB3\xB7",		"\x81\xEC" => "\xEA\xB3\xB8",		"\x81\xED" => "\xEA\xB3\xB9",		"\x81\xEE" => "\xEA\xB3\xBA",		"\x81\xEF" => "\xEA\xB3\xBB",		"\x81\xF0" => "\xEA\xB3\xBE",		"\x81\xF1" => "\xEA\xB3\xBF",		"\x81\xF2" => "\xEA\xB4\x81",		"\x81\xF3" => "\xEA\xB4\x82",		"\x81\xF4" => "\xEA\xB4\x83",		"\x81\xF5" => "\xEA\xB4\x85",		"\x81\xF6" => "\xEA\xB4\x87",		"\x81\xF7" => "\xEA\xB4\x88",		"\x81\xF8" => "\xEA\xB4\x89",		"\x81\xF9" => "\xEA\xB4\x8A",		"\x81\xFA" => "\xEA\xB4\x8B",		"\x81\xFB" => "\xEA\xB4\x8E",		"\x81\xFC" => "\xEA\xB4\x90",		"\x81\xFD" => "\xEA\xB4\x92",		"\x81\xFE" => "\xEA\xB4\x93",		"\x82\x41" => "\xEA\xB4\x94",		"\x82\x42" => "\xEA\xB4\x95",		"\x82\x43" => "\xEA\xB4\x96",		"\x82\x44" => "\xEA\xB4\x97",		"\x82\x45" => "\xEA\xB4\x99",		"\x82\x46" => "\xEA\xB4\x9A",		"\x82\x47" => "\xEA\xB4\x9B",		"\x82\x48" => "\xEA\xB4\x9D",		"\x82\x49" => "\xEA\xB4\x9E",		"\x82\x4A" => "\xEA\xB4\x9F",		"\x82\x4B" => "\xEA\xB4\xA1",		"\x82\x4C" => "\xEA\xB4\xA2",		"\x82\x4D" => "\xEA\xB4\xA3",		"\x82\x4E" => "\xEA\xB4\xA4",		"\x82\x4F" => "\xEA\xB4\xA5",		"\x82\x50" => "\xEA\xB4\xA6",		"\x82\x51" => "\xEA\xB4\xA7",		"\x82\x52" => "\xEA\xB4\xA8",		"\x82\x53" => "\xEA\xB4\xAA",		"\x82\x54" => "\xEA\xB4\xAB",		"\x82\x55" => "\xEA\xB4\xAE",		"\x82\x56" => "\xEA\xB4\xAF",		"\x82\x57" => "\xEA\xB4\xB0",		"\x82\x58" => "\xEA\xB4\xB1",		"\x82\x59" => "\xEA\xB4\xB2",		"\x82\x5A" => "\xEA\xB4\xB3",		"\x82\x61" => "\xEA\xB4\xB6",		"\x82\x62" => "\xEA\xB4\xB7",		"\x82\x63" => "\xEA\xB4\xB9",		"\x82\x64" => "\xEA\xB4\xBA",		"\x82\x65" => "\xEA\xB4\xBB",		"\x82\x66" => "\xEA\xB4\xBD",		"\x82\x67" => "\xEA\xB4\xBE",		"\x82\x68" => "\xEA\xB4\xBF",		"\x82\x69" => "\xEA\xB5\x80",		"\x82\x6A" => "\xEA\xB5\x81",		"\x82\x6B" => "\xEA\xB5\x82",		"\x82\x6C" => "\xEA\xB5\x83",		"\x82\x6D" => "\xEA\xB5\x86",		"\x82\x6E" => "\xEA\xB5\x88",		"\x82\x6F" => "\xEA\xB5\x8A",		"\x82\x70" => "\xEA\xB5\x8B",		"\x82\x71" => "\xEA\xB5\x8C",		"\x82\x72" => "\xEA\xB5\x8D",		"\x82\x73" => "\xEA\xB5\x8E",		"\x82\x74" => "\xEA\xB5\x8F",		"\x82\x75" => "\xEA\xB5\x91",		"\x82\x76" => "\xEA\xB5\x92",		"\x82\x77" => "\xEA\xB5\x93",		"\x82\x78" => "\xEA\xB5\x95",		"\x82\x79" => "\xEA\xB5\x96",		"\x82\x7A" => "\xEA\xB5\x97",		"\x82\x81" => "\xEA\xB5\x99",		"\x82\x82" => "\xEA\xB5\x9A",		"\x82\x83" => "\xEA\xB5\x9B",		"\x82\x84" => "\xEA\xB5\x9C",		"\x82\x85" => "\xEA\xB5\x9D",		"\x82\x86" => "\xEA\xB5\x9E",		"\x82\x87" => "\xEA\xB5\x9F",		"\x82\x88" => "\xEA\xB5\xA0",		"\x82\x89" => "\xEA\xB5\xA2",		"\x82\x8A" => "\xEA\xB5\xA4",		"\x82\x8B" => "\xEA\xB5\xA5",		"\x82\x8C" => "\xEA\xB5\xA6",		"\x82\x8D" => "\xEA\xB5\xA7",		"\x82\x8E" => "\xEA\xB5\xA8",		"\x82\x8F" => "\xEA\xB5\xA9",		"\x82\x90" => "\xEA\xB5\xAA",		"\x82\x91" => "\xEA\xB5\xAB",		"\x82\x92" => "\xEA\xB5\xAE",		"\x82\x93" => "\xEA\xB5\xAF",		"\x82\x94" => "\xEA\xB5\xB1",		"\x82\x95" => "\xEA\xB5\xB2",		"\x82\x96" => "\xEA\xB5\xB7",		"\x82\x97" => "\xEA\xB5\xB8",		"\x82\x98" => "\xEA\xB5\xB9",		"\x82\x99" => "\xEA\xB5\xBA",		"\x82\x9A" => "\xEA\xB5\xBE",		"\x82\x9B" => "\xEA\xB6\x80",		"\x82\x9C" => "\xEA\xB6\x83",		"\x82\x9D" => "\xEA\xB6\x84",		"\x82\x9E" => "\xEA\xB6\x85",		"\x82\x9F" => "\xEA\xB6\x86",		"\x82\xA0" => "\xEA\xB6\x87",		"\x82\xA1" => "\xEA\xB6\x8A",		"\x82\xA2" => "\xEA\xB6\x8B",		"\x82\xA3" => "\xEA\xB6\x8D",		"\x82\xA4" => "\xEA\xB6\x8E",		"\x82\xA5" => "\xEA\xB6\x8F",		"\x82\xA6" => "\xEA\xB6\x91",		"\x82\xA7" => "\xEA\xB6\x92",		"\x82\xA8" => "\xEA\xB6\x93",		"\x82\xA9" => "\xEA\xB6\x94",		"\x82\xAA" => "\xEA\xB6\x95",		"\x82\xAB" => "\xEA\xB6\x96",		"\x82\xAC" => "\xEA\xB6\x97",		"\x82\xAD" => "\xEA\xB6\x98",		"\x82\xAE" => "\xEA\xB6\x99",		"\x82\xAF" => "\xEA\xB6\x9A",		"\x82\xB0" => "\xEA\xB6\x9B",		"\x82\xB1" => "\xEA\xB6\x9E",		"\x82\xB2" => "\xEA\xB6\x9F",		"\x82\xB3" => "\xEA\xB6\xA0",		"\x82\xB4" => "\xEA\xB6\xA1",		"\x82\xB5" => "\xEA\xB6\xA2",		"\x82\xB6" => "\xEA\xB6\xA3",		"\x82\xB7" => "\xEA\xB6\xA5",		"\x82\xB8" => "\xEA\xB6\xA6",		"\x82\xB9" => "\xEA\xB6\xA7",		"\x82\xBA" => "\xEA\xB6\xA8",		"\x82\xBB" => "\xEA\xB6\xA9",		"\x82\xBC" => "\xEA\xB6\xAA",		"\x82\xBD" => "\xEA\xB6\xAB",		"\x82\xBE" => "\xEA\xB6\xAC",		"\x82\xBF" => "\xEA\xB6\xAD",		"\x82\xC0" => "\xEA\xB6\xAE",		"\x82\xC1" => "\xEA\xB6\xAF",		"\x82\xC2" => "\xEA\xB6\xB0",		"\x82\xC3" => "\xEA\xB6\xB1",		"\x82\xC4" => "\xEA\xB6\xB2",		"\x82\xC5" => "\xEA\xB6\xB3",		"\x82\xC6" => "\xEA\xB6\xB4",		"\x82\xC7" => "\xEA\xB6\xB5",		"\x82\xC8" => "\xEA\xB6\xB6",		"\x82\xC9" => "\xEA\xB6\xB8",		"\x82\xCA" => "\xEA\xB6\xB9",		"\x82\xCB" => "\xEA\xB6\xBA",		"\x82\xCC" => "\xEA\xB6\xBB",		"\x82\xCD" => "\xEA\xB6\xBC",		"\x82\xCE" => "\xEA\xB6\xBD",		"\x82\xCF" => "\xEA\xB6\xBE",		"\x82\xD0" => "\xEA\xB6\xBF",		"\x82\xD1" => "\xEA\xB7\x82",		"\x82\xD2" => "\xEA\xB7\x83",		"\x82\xD3" => "\xEA\xB7\x85",		"\x82\xD4" => "\xEA\xB7\x86",		"\x82\xD5" => "\xEA\xB7\x87",		"\x82\xD6" => "\xEA\xB7\x89",		"\x82\xD7" => "\xEA\xB7\x8A",		"\x82\xD8" => "\xEA\xB7\x8B",		"\x82\xD9" => "\xEA\xB7\x8C",		"\x82\xDA" => "\xEA\xB7\x8D",		"\x82\xDB" => "\xEA\xB7\x8E",		"\x82\xDC" => "\xEA\xB7\x8F",		"\x82\xDD" => "\xEA\xB7\x92",		"\x82\xDE" => "\xEA\xB7\x94",		"\x82\xDF" => "\xEA\xB7\x95",		"\x82\xE0" => "\xEA\xB7\x96",		"\x82\xE1" => "\xEA\xB7\x97",		"\x82\xE2" => "\xEA\xB7\x98",		"\x82\xE3" => "\xEA\xB7\x99",		"\x82\xE4" => "\xEA\xB7\x9A",		"\x82\xE5" => "\xEA\xB7\x9B",		"\x82\xE6" => "\xEA\xB7\x9D",		"\x82\xE7" => "\xEA\xB7\x9E",		"\x82\xE8" => "\xEA\xB7\x9F",		"\x82\xE9" => "\xEA\xB7\xA1",		"\x82\xEA" => "\xEA\xB7\xA2",		"\x82\xEB" => "\xEA\xB7\xA3",		"\x82\xEC" => "\xEA\xB7\xA5",		"\x82\xED" => "\xEA\xB7\xA6",		"\x82\xEE" => "\xEA\xB7\xA7",		"\x82\xEF" => "\xEA\xB7\xA8",		"\x82\xF0" => "\xEA\xB7\xA9",		"\x82\xF1" => "\xEA\xB7\xAA",		"\x82\xF2" => "\xEA\xB7\xAB",		"\x82\xF3" => "\xEA\xB7\xAC",		"\x82\xF4" => "\xEA\xB7\xAD",		"\x82\xF5" => "\xEA\xB7\xAE",		"\x82\xF6" => "\xEA\xB7\xAF",		"\x82\xF7" => "\xEA\xB7\xB0",		"\x82\xF8" => "\xEA\xB7\xB1",		"\x82\xF9" => "\xEA\xB7\xB2",		"\x82\xFA" => "\xEA\xB7\xB3",		"\x82\xFB" => "\xEA\xB7\xB4",		"\x82\xFC" => "\xEA\xB7\xB5",		"\x82\xFD" => "\xEA\xB7\xB6",		"\x82\xFE" => "\xEA\xB7\xB7",		"\x83\x41" => "\xEA\xB7\xBA",		"\x83\x42" => "\xEA\xB7\xBB",		"\x83\x43" => "\xEA\xB7\xBD",		"\x83\x44" => "\xEA\xB7\xBE",		"\x83\x45" => "\xEA\xB8\x82",		"\x83\x46" => "\xEA\xB8\x83",		"\x83\x47" => "\xEA\xB8\x84",		"\x83\x48" => "\xEA\xB8\x85",		"\x83\x49" => "\xEA\xB8\x86",		"\x83\x4A" => "\xEA\xB8\x87",		"\x83\x4B" => "\xEA\xB8\x8A",		"\x83\x4C" => "\xEA\xB8\x8C",		"\x83\x4D" => "\xEA\xB8\x8E",		"\x83\x4E" => "\xEA\xB8\x8F",		"\x83\x4F" => "\xEA\xB8\x90",		"\x83\x50" => "\xEA\xB8\x91",		"\x83\x51" => "\xEA\xB8\x92",		"\x83\x52" => "\xEA\xB8\x93",		"\x83\x53" => "\xEA\xB8\x95",		"\x83\x54" => "\xEA\xB8\x96",		"\x83\x55" => "\xEA\xB8\x97",		"\x83\x56" => "\xEA\xB8\x98",		"\x83\x57" => "\xEA\xB8\x99",		"\x83\x58" => "\xEA\xB8\x9A",		"\x83\x59" => "\xEA\xB8\x9B",		"\x83\x5A" => "\xEA\xB8\x9C",		"\x83\x61" => "\xEA\xB8\x9D",		"\x83\x62" => "\xEA\xB8\x9E",		"\x83\x63" => "\xEA\xB8\x9F",		"\x83\x64" => "\xEA\xB8\xA0",		"\x83\x65" => "\xEA\xB8\xA1",		"\x83\x66" => "\xEA\xB8\xA2",		"\x83\x67" => "\xEA\xB8\xA3",		"\x83\x68" => "\xEA\xB8\xA4",		"\x83\x69" => "\xEA\xB8\xA5",		"\x83\x6A" => "\xEA\xB8\xA6",		"\x83\x6B" => "\xEA\xB8\xA7",		"\x83\x6C" => "\xEA\xB8\xA8",		"\x83\x6D" => "\xEA\xB8\xA9",		"\x83\x6E" => "\xEA\xB8\xAA",		"\x83\x6F" => "\xEA\xB8\xAB",		"\x83\x70" => "\xEA\xB8\xAC",		"\x83\x71" => "\xEA\xB8\xAD",		"\x83\x72" => "\xEA\xB8\xAE",		"\x83\x73" => "\xEA\xB8\xAF",		"\x83\x74" => "\xEA\xB8\xB2",		"\x83\x75" => "\xEA\xB8\xB3",		"\x83\x76" => "\xEA\xB8\xB5",		"\x83\x77" => "\xEA\xB8\xB6",		"\x83\x78" => "\xEA\xB8\xB9",		"\x83\x79" => "\xEA\xB8\xBB",		"\x83\x7A" => "\xEA\xB8\xBC",		"\x83\x81" => "\xEA\xB8\xBD",		"\x83\x82" => "\xEA\xB8\xBE",		"\x83\x83" => "\xEA\xB8\xBF",		"\x83\x84" => "\xEA\xB9\x82",		"\x83\x85" => "\xEA\xB9\x84",		"\x83\x86" => "\xEA\xB9\x87",		"\x83\x87" => "\xEA\xB9\x88",		"\x83\x88" => "\xEA\xB9\x89",		"\x83\x89" => "\xEA\xB9\x8B",		"\x83\x8A" => "\xEA\xB9\x8F",		"\x83\x8B" => "\xEA\xB9\x91",		"\x83\x8C" => "\xEA\xB9\x92",		"\x83\x8D" => "\xEA\xB9\x93",		"\x83\x8E" => "\xEA\xB9\x95",		"\x83\x8F" => "\xEA\xB9\x97",		"\x83\x90" => "\xEA\xB9\x98",		"\x83\x91" => "\xEA\xB9\x99",		"\x83\x92" => "\xEA\xB9\x9A",		"\x83\x93" => "\xEA\xB9\x9B",		"\x83\x94" => "\xEA\xB9\x9E",		"\x83\x95" => "\xEA\xB9\xA2",		"\x83\x96" => "\xEA\xB9\xA3",		"\x83\x97" => "\xEA\xB9\xA4",		"\x83\x98" => "\xEA\xB9\xA6",		"\x83\x99" => "\xEA\xB9\xA7",		"\x83\x9A" => "\xEA\xB9\xAA",		"\x83\x9B" => "\xEA\xB9\xAB",		"\x83\x9C" => "\xEA\xB9\xAD",		"\x83\x9D" => "\xEA\xB9\xAE",		"\x83\x9E" => "\xEA\xB9\xAF",		"\x83\x9F" => "\xEA\xB9\xB1",		"\x83\xA0" => "\xEA\xB9\xB2",		"\x83\xA1" => "\xEA\xB9\xB3",		"\x83\xA2" => "\xEA\xB9\xB4",		"\x83\xA3" => "\xEA\xB9\xB5",		"\x83\xA4" => "\xEA\xB9\xB6",		"\x83\xA5" => "\xEA\xB9\xB7",		"\x83\xA6" => "\xEA\xB9\xBA",		"\x83\xA7" => "\xEA\xB9\xBE",		"\x83\xA8" => "\xEA\xB9\xBF",		"\x83\xA9" => "\xEA\xBA\x80",		"\x83\xAA" => "\xEA\xBA\x81",		"\x83\xAB" => "\xEA\xBA\x82",		"\x83\xAC" => "\xEA\xBA\x83",		"\x83\xAD" => "\xEA\xBA\x86",		"\x83\xAE" => "\xEA\xBA\x87",		"\x83\xAF" => "\xEA\xBA\x88",		"\x83\xB0" => "\xEA\xBA\x89",		"\x83\xB1" => "\xEA\xBA\x8A",		"\x83\xB2" => "\xEA\xBA\x8B",		"\x83\xB3" => "\xEA\xBA\x8D",		"\x83\xB4" => "\xEA\xBA\x8E",		"\x83\xB5" => "\xEA\xBA\x8F",		"\x83\xB6" => "\xEA\xBA\x90",		"\x83\xB7" => "\xEA\xBA\x91",		"\x83\xB8" => "\xEA\xBA\x92",		"\x83\xB9" => "\xEA\xBA\x93",		"\x83\xBA" => "\xEA\xBA\x94",		"\x83\xBB" => "\xEA\xBA\x95",		"\x83\xBC" => "\xEA\xBA\x96",		"\x83\xBD" => "\xEA\xBA\x97",		"\x83\xBE" => "\xEA\xBA\x98",		"\x83\xBF" => "\xEA\xBA\x99",		"\x83\xC0" => "\xEA\xBA\x9A",		"\x83\xC1" => "\xEA\xBA\x9B",		"\x83\xC2" => "\xEA\xBA\x9C",		"\x83\xC3" => "\xEA\xBA\x9D",		"\x83\xC4" => "\xEA\xBA\x9E",		"\x83\xC5" => "\xEA\xBA\x9F",		"\x83\xC6" => "\xEA\xBA\xA0",		"\x83\xC7" => "\xEA\xBA\xA1",		"\x83\xC8" => "\xEA\xBA\xA2",		"\x83\xC9" => "\xEA\xBA\xA3",		"\x83\xCA" => "\xEA\xBA\xA4",		"\x83\xCB" => "\xEA\xBA\xA5",		"\x83\xCC" => "\xEA\xBA\xA6",		"\x83\xCD" => "\xEA\xBA\xA7",		"\x83\xCE" => "\xEA\xBA\xA8",		"\x83\xCF" => "\xEA\xBA\xA9",		"\x83\xD0" => "\xEA\xBA\xAA",		"\x83\xD1" => "\xEA\xBA\xAB",		"\x83\xD2" => "\xEA\xBA\xAC",		"\x83\xD3" => "\xEA\xBA\xAD",		"\x83\xD4" => "\xEA\xBA\xAE",		"\x83\xD5" => "\xEA\xBA\xAF",		"\x83\xD6" => "\xEA\xBA\xB0",		"\x83\xD7" => "\xEA\xBA\xB1",		"\x83\xD8" => "\xEA\xBA\xB2",		"\x83\xD9" => "\xEA\xBA\xB3",		"\x83\xDA" => "\xEA\xBA\xB4",		"\x83\xDB" => "\xEA\xBA\xB5",		"\x83\xDC" => "\xEA\xBA\xB6",		"\x83\xDD" => "\xEA\xBA\xB7",		"\x83\xDE" => "\xEA\xBA\xB8",		"\x83\xDF" => "\xEA\xBA\xB9",		"\x83\xE0" => "\xEA\xBA\xBA",		"\x83\xE1" => "\xEA\xBA\xBB",		"\x83\xE2" => "\xEA\xBA\xBF",		"\x83\xE3" => "\xEA\xBB\x81",		"\x83\xE4" => "\xEA\xBB\x82",		"\x83\xE5" => "\xEA\xBB\x83",		"\x83\xE6" => "\xEA\xBB\x85",		"\x83\xE7" => "\xEA\xBB\x86",		"\x83\xE8" => "\xEA\xBB\x87",		"\x83\xE9" => "\xEA\xBB\x88",		"\x83\xEA" => "\xEA\xBB\x89",		"\x83\xEB" => "\xEA\xBB\x8A",		"\x83\xEC" => "\xEA\xBB\x8B",		"\x83\xED" => "\xEA\xBB\x8E",		"\x83\xEE" => "\xEA\xBB\x92",		"\x83\xEF" => "\xEA\xBB\x93",		"\x83\xF0" => "\xEA\xBB\x94",		"\x83\xF1" => "\xEA\xBB\x95",		"\x83\xF2" => "\xEA\xBB\x96",		"\x83\xF3" => "\xEA\xBB\x97",		"\x83\xF4" => "\xEA\xBB\x9A",		"\x83\xF5" => "\xEA\xBB\x9B",		"\x83\xF6" => "\xEA\xBB\x9D",		"\x83\xF7" => "\xEA\xBB\x9E",		"\x83\xF8" => "\xEA\xBB\x9F",		"\x83\xF9" => "\xEA\xBB\xA0",		"\x83\xFA" => "\xEA\xBB\xA1",		"\x83\xFB" => "\xEA\xBB\xA2",		"\x83\xFC" => "\xEA\xBB\xA3",		"\x83\xFD" => "\xEA\xBB\xA4",		"\x83\xFE" => "\xEA\xBB\xA5",		"\x84\x41" => "\xEA\xBB\xA6",		"\x84\x42" => "\xEA\xBB\xA7",		"\x84\x43" => "\xEA\xBB\xA9",		"\x84\x44" => "\xEA\xBB\xAA",		"\x84\x45" => "\xEA\xBB\xAC",		"\x84\x46" => "\xEA\xBB\xAE",		"\x84\x47" => "\xEA\xBB\xAF",		"\x84\x48" => "\xEA\xBB\xB0",		"\x84\x49" => "\xEA\xBB\xB1",		"\x84\x4A" => "\xEA\xBB\xB2",		"\x84\x4B" => "\xEA\xBB\xB3",		"\x84\x4C" => "\xEA\xBB\xB5",		"\x84\x4D" => "\xEA\xBB\xB6",		"\x84\x4E" => "\xEA\xBB\xB7",		"\x84\x4F" => "\xEA\xBB\xB9",		"\x84\x50" => "\xEA\xBB\xBA",		"\x84\x51" => "\xEA\xBB\xBB",		"\x84\x52" => "\xEA\xBB\xBD",		"\x84\x53" => "\xEA\xBB\xBE",		"\x84\x54" => "\xEA\xBB\xBF",		"\x84\x55" => "\xEA\xBC\x80",		"\x84\x56" => "\xEA\xBC\x81",		"\x84\x57" => "\xEA\xBC\x82",		"\x84\x58" => "\xEA\xBC\x83",		"\x84\x59" => "\xEA\xBC\x84",		"\x84\x5A" => "\xEA\xBC\x85",		"\x84\x61" => "\xEA\xBC\x86",		"\x84\x62" => "\xEA\xBC\x89",		"\x84\x63" => "\xEA\xBC\x8A",		"\x84\x64" => "\xEA\xBC\x8B",		"\x84\x65" => "\xEA\xBC\x8C",		"\x84\x66" => "\xEA\xBC\x8E",		"\x84\x67" => "\xEA\xBC\x8F",		"\x84\x68" => "\xEA\xBC\x91",		"\x84\x69" => "\xEA\xBC\x92",		"\x84\x6A" => "\xEA\xBC\x93",		"\x84\x6B" => "\xEA\xBC\x94",		"\x84\x6C" => "\xEA\xBC\x95",		"\x84\x6D" => "\xEA\xBC\x96",		"\x84\x6E" => "\xEA\xBC\x97",		"\x84\x6F" => "\xEA\xBC\x98",		"\x84\x70" => "\xEA\xBC\x99",		"\x84\x71" => "\xEA\xBC\x9A",		"\x84\x72" => "\xEA\xBC\x9B",		"\x84\x73" => "\xEA\xBC\x9C",		"\x84\x74" => "\xEA\xBC\x9D",		"\x84\x75" => "\xEA\xBC\x9E",		"\x84\x76" => "\xEA\xBC\x9F",		"\x84\x77" => "\xEA\xBC\xA0",		"\x84\x78" => "\xEA\xBC\xA1",		"\x84\x79" => "\xEA\xBC\xA2",		"\x84\x7A" => "\xEA\xBC\xA3",		"\x84\x81" => "\xEA\xBC\xA4",		"\x84\x82" => "\xEA\xBC\xA5",		"\x84\x83" => "\xEA\xBC\xA6",		"\x84\x84" => "\xEA\xBC\xA7",		"\x84\x85" => "\xEA\xBC\xA8",		"\x84\x86" => "\xEA\xBC\xA9",		"\x84\x87" => "\xEA\xBC\xAA",		"\x84\x88" => "\xEA\xBC\xAB",		"\x84\x89" => "\xEA\xBC\xAE",		"\x84\x8A" => "\xEA\xBC\xAF",		"\x84\x8B" => "\xEA\xBC\xB1",		"\x84\x8C" => "\xEA\xBC\xB3",		"\x84\x8D" => "\xEA\xBC\xB5",		"\x84\x8E" => "\xEA\xBC\xB6",		"\x84\x8F" => "\xEA\xBC\xB7",		"\x84\x90" => "\xEA\xBC\xB8",		"\x84\x91" => "\xEA\xBC\xB9",		"\x84\x92" => "\xEA\xBC\xBA",		"\x84\x93" => "\xEA\xBC\xBB",		"\x84\x94" => "\xEA\xBC\xBE",		"\x84\x95" => "\xEA\xBD\x80",		"\x84\x96" => "\xEA\xBD\x84",		"\x84\x97" => "\xEA\xBD\x85",		"\x84\x98" => "\xEA\xBD\x86",		"\x84\x99" => "\xEA\xBD\x87",		"\x84\x9A" => "\xEA\xBD\x8A",		"\x84\x9B" => "\xEA\xBD\x8B",		"\x84\x9C" => "\xEA\xBD\x8C",		"\x84\x9D" => "\xEA\xBD\x8D",		"\x84\x9E" => "\xEA\xBD\x8E",		"\x84\x9F" => "\xEA\xBD\x8F",		"\x84\xA0" => "\xEA\xBD\x91",		"\x84\xA1" => "\xEA\xBD\x92",		"\x84\xA2" => "\xEA\xBD\x93",		"\x84\xA3" => "\xEA\xBD\x94",		"\x84\xA4" => "\xEA\xBD\x95",		"\x84\xA5" => "\xEA\xBD\x96",		"\x84\xA6" => "\xEA\xBD\x97",		"\x84\xA7" => "\xEA\xBD\x98",		"\x84\xA8" => "\xEA\xBD\x99",		"\x84\xA9" => "\xEA\xBD\x9A",		"\x84\xAA" => "\xEA\xBD\x9B",		"\x84\xAB" => "\xEA\xBD\x9E",		"\x84\xAC" => "\xEA\xBD\x9F",		"\x84\xAD" => "\xEA\xBD\xA0",		"\x84\xAE" => "\xEA\xBD\xA1",		"\x84\xAF" => "\xEA\xBD\xA2",		"\x84\xB0" => "\xEA\xBD\xA3",		"\x84\xB1" => "\xEA\xBD\xA6",		"\x84\xB2" => "\xEA\xBD\xA7",		"\x84\xB3" => "\xEA\xBD\xA8",		"\x84\xB4" => "\xEA\xBD\xA9",		"\x84\xB5" => "\xEA\xBD\xAA",		"\x84\xB6" => "\xEA\xBD\xAB",		"\x84\xB7" => "\xEA\xBD\xAC",		"\x84\xB8" => "\xEA\xBD\xAD",		"\x84\xB9" => "\xEA\xBD\xAE",		"\x84\xBA" => "\xEA\xBD\xAF",		"\x84\xBB" => "\xEA\xBD\xB0",		"\x84\xBC" => "\xEA\xBD\xB1",		"\x84\xBD" => "\xEA\xBD\xB2",		"\x84\xBE" => "\xEA\xBD\xB3",		"\x84\xBF" => "\xEA\xBD\xB4",		"\x84\xC0" => "\xEA\xBD\xB5",		"\x84\xC1" => "\xEA\xBD\xB6",		"\x84\xC2" => "\xEA\xBD\xB7",		"\x84\xC3" => "\xEA\xBD\xB8",		"\x84\xC4" => "\xEA\xBD\xBA",		"\x84\xC5" => "\xEA\xBD\xBB",		"\x84\xC6" => "\xEA\xBD\xBC",		"\x84\xC7" => "\xEA\xBD\xBD",		"\x84\xC8" => "\xEA\xBD\xBE",		"\x84\xC9" => "\xEA\xBD\xBF",		"\x84\xCA" => "\xEA\xBE\x81",		"\x84\xCB" => "\xEA\xBE\x82",		"\x84\xCC" => "\xEA\xBE\x83",		"\x84\xCD" => "\xEA\xBE\x85",		"\x84\xCE" => "\xEA\xBE\x86",		"\x84\xCF" => "\xEA\xBE\x87",		"\x84\xD0" => "\xEA\xBE\x89",		"\x84\xD1" => "\xEA\xBE\x8A",		"\x84\xD2" => "\xEA\xBE\x8B",		"\x84\xD3" => "\xEA\xBE\x8C",		"\x84\xD4" => "\xEA\xBE\x8D",		"\x84\xD5" => "\xEA\xBE\x8E",		"\x84\xD6" => "\xEA\xBE\x8F",		"\x84\xD7" => "\xEA\xBE\x92",		"\x84\xD8" => "\xEA\xBE\x93",		"\x84\xD9" => "\xEA\xBE\x94",		"\x84\xDA" => "\xEA\xBE\x96",		"\x84\xDB" => "\xEA\xBE\x97",		"\x84\xDC" => "\xEA\xBE\x98",		"\x84\xDD" => "\xEA\xBE\x99",		"\x84\xDE" => "\xEA\xBE\x9A",		"\x84\xDF" => "\xEA\xBE\x9B",		"\x84\xE0" => "\xEA\xBE\x9D",		"\x84\xE1" => "\xEA\xBE\x9E",		"\x84\xE2" => "\xEA\xBE\x9F",		"\x84\xE3" => "\xEA\xBE\xA0",		"\x84\xE4" => "\xEA\xBE\xA1",		"\x84\xE5" => "\xEA\xBE\xA2",		"\x84\xE6" => "\xEA\xBE\xA3",		"\x84\xE7" => "\xEA\xBE\xA4",		"\x84\xE8" => "\xEA\xBE\xA5",		"\x84\xE9" => "\xEA\xBE\xA6",		"\x84\xEA" => "\xEA\xBE\xA7",		"\x84\xEB" => "\xEA\xBE\xA8",		"\x84\xEC" => "\xEA\xBE\xA9",		"\x84\xED" => "\xEA\xBE\xAA",		"\x84\xEE" => "\xEA\xBE\xAB",		"\x84\xEF" => "\xEA\xBE\xAC",		"\x84\xF0" => "\xEA\xBE\xAD",		"\x84\xF1" => "\xEA\xBE\xAE",		"\x84\xF2" => "\xEA\xBE\xAF",		"\x84\xF3" => "\xEA\xBE\xB0",		"\x84\xF4" => "\xEA\xBE\xB1",		"\x84\xF5" => "\xEA\xBE\xB2",		"\x84\xF6" => "\xEA\xBE\xB3",		"\x84\xF7" => "\xEA\xBE\xB4",		"\x84\xF8" => "\xEA\xBE\xB5",		"\x84\xF9" => "\xEA\xBE\xB6",		"\x84\xFA" => "\xEA\xBE\xB7",		"\x84\xFB" => "\xEA\xBE\xBA",		"\x84\xFC" => "\xEA\xBE\xBB",		"\x84\xFD" => "\xEA\xBE\xBD",		"\x84\xFE" => "\xEA\xBE\xBE",		"\x85\x41" => "\xEA\xBE\xBF",		"\x85\x42" => "\xEA\xBF\x81",		"\x85\x43" => "\xEA\xBF\x82",		"\x85\x44" => "\xEA\xBF\x83",		"\x85\x45" => "\xEA\xBF\x84",		"\x85\x46" => "\xEA\xBF\x85",		"\x85\x47" => "\xEA\xBF\x86",		"\x85\x48" => "\xEA\xBF\x8A",		"\x85\x49" => "\xEA\xBF\x8C",		"\x85\x4A" => "\xEA\xBF\x8F",		"\x85\x4B" => "\xEA\xBF\x90",		"\x85\x4C" => "\xEA\xBF\x91",		"\x85\x4D" => "\xEA\xBF\x92",		"\x85\x4E" => "\xEA\xBF\x93",		"\x85\x4F" => "\xEA\xBF\x95",		"\x85\x50" => "\xEA\xBF\x96",		"\x85\x51" => "\xEA\xBF\x97",		"\x85\x52" => "\xEA\xBF\x98",		"\x85\x53" => "\xEA\xBF\x99",		"\x85\x54" => "\xEA\xBF\x9A",		"\x85\x55" => "\xEA\xBF\x9B",		"\x85\x56" => "\xEA\xBF\x9D",		"\x85\x57" => "\xEA\xBF\x9E",		"\x85\x58" => "\xEA\xBF\x9F",		"\x85\x59" => "\xEA\xBF\xA0",		"\x85\x5A" => "\xEA\xBF\xA1",		"\x85\x61" => "\xEA\xBF\xA2",		"\x85\x62" => "\xEA\xBF\xA3",		"\x85\x63" => "\xEA\xBF\xA4",		"\x85\x64" => "\xEA\xBF\xA5",		"\x85\x65" => "\xEA\xBF\xA6",		"\x85\x66" => "\xEA\xBF\xA7",		"\x85\x67" => "\xEA\xBF\xAA",		"\x85\x68" => "\xEA\xBF\xAB",		"\x85\x69" => "\xEA\xBF\xAC",		"\x85\x6A" => "\xEA\xBF\xAD",		"\x85\x6B" => "\xEA\xBF\xAE",		"\x85\x6C" => "\xEA\xBF\xAF",		"\x85\x6D" => "\xEA\xBF\xB2",		"\x85\x6E" => "\xEA\xBF\xB3",		"\x85\x6F" => "\xEA\xBF\xB5",		"\x85\x70" => "\xEA\xBF\xB6",		"\x85\x71" => "\xEA\xBF\xB7",		"\x85\x72" => "\xEA\xBF\xB9",		"\x85\x73" => "\xEA\xBF\xBA",		"\x85\x74" => "\xEA\xBF\xBB",		"\x85\x75" => "\xEA\xBF\xBC",		"\x85\x76" => "\xEA\xBF\xBD",		"\x85\x77" => "\xEA\xBF\xBE",		"\x85\x78" => "\xEA\xBF\xBF",		"\x85\x79" => "\xEB\x80\x82",		"\x85\x7A" => "\xEB\x80\x83",		"\x85\x81" => "\xEB\x80\x85",		"\x85\x82" => "\xEB\x80\x86",		"\x85\x83" => "\xEB\x80\x87",		"\x85\x84" => "\xEB\x80\x88",		"\x85\x85" => "\xEB\x80\x89",		"\x85\x86" => "\xEB\x80\x8A",		"\x85\x87" => "\xEB\x80\x8B",		"\x85\x88" => "\xEB\x80\x8D",		"\x85\x89" => "\xEB\x80\x8E",		"\x85\x8A" => "\xEB\x80\x8F",		"\x85\x8B" => "\xEB\x80\x91",		"\x85\x8C" => "\xEB\x80\x92",		"\x85\x8D" => "\xEB\x80\x93",		"\x85\x8E" => "\xEB\x80\x95",		"\x85\x8F" => "\xEB\x80\x96",		"\x85\x90" => "\xEB\x80\x97",		"\x85\x91" => "\xEB\x80\x98",		"\x85\x92" => "\xEB\x80\x99",		"\x85\x93" => "\xEB\x80\x9A",		"\x85\x94" => "\xEB\x80\x9B",		"\x85\x95" => "\xEB\x80\x9E",		"\x85\x96" => "\xEB\x80\x9F",		"\x85\x97" => "\xEB\x80\xA0",		"\x85\x98" => "\xEB\x80\xA1",		"\x85\x99" => "\xEB\x80\xA2",		"\x85\x9A" => "\xEB\x80\xA3",		"\x85\x9B" => "\xEB\x80\xA4",		"\x85\x9C" => "\xEB\x80\xA5",		"\x85\x9D" => "\xEB\x80\xA6",		"\x85\x9E" => "\xEB\x80\xA7",		"\x85\x9F" => "\xEB\x80\xA9",		"\x85\xA0" => "\xEB\x80\xAA",		"\x85\xA1" => "\xEB\x80\xAB",		"\x85\xA2" => "\xEB\x80\xAC",		"\x85\xA3" => "\xEB\x80\xAD",		"\x85\xA4" => "\xEB\x80\xAE",		"\x85\xA5" => "\xEB\x80\xAF",		"\x85\xA6" => "\xEB\x80\xB0",		"\x85\xA7" => "\xEB\x80\xB1",		"\x85\xA8" => "\xEB\x80\xB2",		"\x85\xA9" => "\xEB\x80\xB3",		"\x85\xAA" => "\xEB\x80\xB4",		"\x85\xAB" => "\xEB\x80\xB5",		"\x85\xAC" => "\xEB\x80\xB6",		"\x85\xAD" => "\xEB\x80\xB7",		"\x85\xAE" => "\xEB\x80\xB8",		"\x85\xAF" => "\xEB\x80\xB9",		"\x85\xB0" => "\xEB\x80\xBA",		"\x85\xB1" => "\xEB\x80\xBB",		"\x85\xB2" => "\xEB\x80\xBC",		"\x85\xB3" => "\xEB\x80\xBD",		"\x85\xB4" => "\xEB\x80\xBE",		"\x85\xB5" => "\xEB\x80\xBF",		"\x85\xB6" => "\xEB\x81\x80",		"\x85\xB7" => "\xEB\x81\x81",		"\x85\xB8" => "\xEB\x81\x82",		"\x85\xB9" => "\xEB\x81\x83",		"\x85\xBA" => "\xEB\x81\x86",		"\x85\xBB" => "\xEB\x81\x87",		"\x85\xBC" => "\xEB\x81\x89",		"\x85\xBD" => "\xEB\x81\x8B",		"\x85\xBE" => "\xEB\x81\x8D",		"\x85\xBF" => "\xEB\x81\x8F",		"\x85\xC0" => "\xEB\x81\x90",		"\x85\xC1" => "\xEB\x81\x91",		"\x85\xC2" => "\xEB\x81\x92",		"\x85\xC3" => "\xEB\x81\x96",		"\x85\xC4" => "\xEB\x81\x98",		"\x85\xC5" => "\xEB\x81\x9A",		"\x85\xC6" => "\xEB\x81\x9B",		"\x85\xC7" => "\xEB\x81\x9C",		"\x85\xC8" => "\xEB\x81\x9E",		"\x85\xC9" => "\xEB\x81\x9F",		"\x85\xCA" => "\xEB\x81\xA0",		"\x85\xCB" => "\xEB\x81\xA1",		"\x85\xCC" => "\xEB\x81\xA2",		"\x85\xCD" => "\xEB\x81\xA3",		"\x85\xCE" => "\xEB\x81\xA4",		"\x85\xCF" => "\xEB\x81\xA5",		"\x85\xD0" => "\xEB\x81\xA6",		"\x85\xD1" => "\xEB\x81\xA7",		"\x85\xD2" => "\xEB\x81\xA8",		"\x85\xD3" => "\xEB\x81\xA9",		"\x85\xD4" => "\xEB\x81\xAA",		"\x85\xD5" => "\xEB\x81\xAB",		"\x85\xD6" => "\xEB\x81\xAC",		"\x85\xD7" => "\xEB\x81\xAD",		"\x85\xD8" => "\xEB\x81\xAE",		"\x85\xD9" => "\xEB\x81\xAF",		"\x85\xDA" => "\xEB\x81\xB0",		"\x85\xDB" => "\xEB\x81\xB1",		"\x85\xDC" => "\xEB\x81\xB2",		"\x85\xDD" => "\xEB\x81\xB3",		"\x85\xDE" => "\xEB\x81\xB4",		"\x85\xDF" => "\xEB\x81\xB5",		"\x85\xE0" => "\xEB\x81\xB6",		"\x85\xE1" => "\xEB\x81\xB7",		"\x85\xE2" => "\xEB\x81\xB8",		"\x85\xE3" => "\xEB\x81\xB9",		"\x85\xE4" => "\xEB\x81\xBA",		"\x85\xE5" => "\xEB\x81\xBB",		"\x85\xE6" => "\xEB\x81\xBE",		"\x85\xE7" => "\xEB\x81\xBF",		"\x85\xE8" => "\xEB\x82\x81",		"\x85\xE9" => "\xEB\x82\x82",		"\x85\xEA" => "\xEB\x82\x83",		"\x85\xEB" => "\xEB\x82\x85",		"\x85\xEC" => "\xEB\x82\x86",		"\x85\xED" => "\xEB\x82\x87",		"\x85\xEE" => "\xEB\x82\x88",		"\x85\xEF" => "\xEB\x82\x89",		"\x85\xF0" => "\xEB\x82\x8A",		"\x85\xF1" => "\xEB\x82\x8B",		"\x85\xF2" => "\xEB\x82\x8E",		"\x85\xF3" => "\xEB\x82\x90",		"\x85\xF4" => "\xEB\x82\x92",		"\x85\xF5" => "\xEB\x82\x93",		"\x85\xF6" => "\xEB\x82\x94",		"\x85\xF7" => "\xEB\x82\x95",		"\x85\xF8" => "\xEB\x82\x96",		"\x85\xF9" => "\xEB\x82\x97",		"\x85\xFA" => "\xEB\x82\x9B",		"\x85\xFB" => "\xEB\x82\x9D",		"\x85\xFC" => "\xEB\x82\x9E",		"\x85\xFD" => "\xEB\x82\xA3",		"\x85\xFE" => "\xEB\x82\xA4",		"\x86\x41" => "\xEB\x82\xA5",		"\x86\x42" => "\xEB\x82\xA6",		"\x86\x43" => "\xEB\x82\xA7",		"\x86\x44" => "\xEB\x82\xAA",		"\x86\x45" => "\xEB\x82\xB0",		"\x86\x46" => "\xEB\x82\xB2",		"\x86\x47" => "\xEB\x82\xB6",		"\x86\x48" => "\xEB\x82\xB7",		"\x86\x49" => "\xEB\x82\xB9",		"\x86\x4A" => "\xEB\x82\xBA",		"\x86\x4B" => "\xEB\x82\xBB",		"\x86\x4C" => "\xEB\x82\xBD",		"\x86\x4D" => "\xEB\x82\xBE",		"\x86\x4E" => "\xEB\x82\xBF",		"\x86\x4F" => "\xEB\x83\x80",		"\x86\x50" => "\xEB\x83\x81",		"\x86\x51" => "\xEB\x83\x82",		"\x86\x52" => "\xEB\x83\x83",		"\x86\x53" => "\xEB\x83\x86",		"\x86\x54" => "\xEB\x83\x8A",		"\x86\x55" => "\xEB\x83\x8B",		"\x86\x56" => "\xEB\x83\x8C",		"\x86\x57" => "\xEB\x83\x8D",		"\x86\x58" => "\xEB\x83\x8E",		"\x86\x59" => "\xEB\x83\x8F",		"\x86\x5A" => "\xEB\x83\x92",		"\x86\x61" => "\xEB\x83\x93",		"\x86\x62" => "\xEB\x83\x95",		"\x86\x63" => "\xEB\x83\x96",		"\x86\x64" => "\xEB\x83\x97",		"\x86\x65" => "\xEB\x83\x99",		"\x86\x66" => "\xEB\x83\x9A",		"\x86\x67" => "\xEB\x83\x9B",		"\x86\x68" => "\xEB\x83\x9C",		"\x86\x69" => "\xEB\x83\x9D",		"\x86\x6A" => "\xEB\x83\x9E",		"\x86\x6B" => "\xEB\x83\x9F",		"\x86\x6C" => "\xEB\x83\xA1",		"\x86\x6D" => "\xEB\x83\xA2",		"\x86\x6E" => "\xEB\x83\xA3",		"\x86\x6F" => "\xEB\x83\xA4",		"\x86\x70" => "\xEB\x83\xA6",		"\x86\x71" => "\xEB\x83\xA7",		"\x86\x72" => "\xEB\x83\xA8",		"\x86\x73" => "\xEB\x83\xA9",		"\x86\x74" => "\xEB\x83\xAA",		"\x86\x75" => "\xEB\x83\xAB",		"\x86\x76" => "\xEB\x83\xAC",		"\x86\x77" => "\xEB\x83\xAD",		"\x86\x78" => "\xEB\x83\xAE",		"\x86\x79" => "\xEB\x83\xAF",		"\x86\x7A" => "\xEB\x83\xB0",		"\x86\x81" => "\xEB\x83\xB1",		"\x86\x82" => "\xEB\x83\xB2",		"\x86\x83" => "\xEB\x83\xB3",		"\x86\x84" => "\xEB\x83\xB4",		"\x86\x85" => "\xEB\x83\xB5",		"\x86\x86" => "\xEB\x83\xB6",		"\x86\x87" => "\xEB\x83\xB7",		"\x86\x88" => "\xEB\x83\xB8",		"\x86\x89" => "\xEB\x83\xB9",		"\x86\x8A" => "\xEB\x83\xBA",		"\x86\x8B" => "\xEB\x83\xBB",		"\x86\x8C" => "\xEB\x83\xBC",		"\x86\x8D" => "\xEB\x83\xBD",		"\x86\x8E" => "\xEB\x83\xBE",		"\x86\x8F" => "\xEB\x83\xBF",		"\x86\x90" => "\xEB\x84\x80",		"\x86\x91" => "\xEB\x84\x81",		"\x86\x92" => "\xEB\x84\x82",		"\x86\x93" => "\xEB\x84\x83",		"\x86\x94" => "\xEB\x84\x84",		"\x86\x95" => "\xEB\x84\x85",		"\x86\x96" => "\xEB\x84\x86",		"\x86\x97" => "\xEB\x84\x87",		"\x86\x98" => "\xEB\x84\x8A",		"\x86\x99" => "\xEB\x84\x8D",		"\x86\x9A" => "\xEB\x84\x8E",		"\x86\x9B" => "\xEB\x84\x8F",		"\x86\x9C" => "\xEB\x84\x91",		"\x86\x9D" => "\xEB\x84\x94",		"\x86\x9E" => "\xEB\x84\x95",		"\x86\x9F" => "\xEB\x84\x96",		"\x86\xA0" => "\xEB\x84\x97",		"\x86\xA1" => "\xEB\x84\x9A",		"\x86\xA2" => "\xEB\x84\x9E",		"\x86\xA3" => "\xEB\x84\x9F",		"\x86\xA4" => "\xEB\x84\xA0",		"\x86\xA5" => "\xEB\x84\xA1",		"\x86\xA6" => "\xEB\x84\xA2",		"\x86\xA7" => "\xEB\x84\xA6",		"\x86\xA8" => "\xEB\x84\xA7",		"\x86\xA9" => "\xEB\x84\xA9",		"\x86\xAA" => "\xEB\x84\xAA",		"\x86\xAB" => "\xEB\x84\xAB",		"\x86\xAC" => "\xEB\x84\xAD",		"\x86\xAD" => "\xEB\x84\xAE",		"\x86\xAE" => "\xEB\x84\xAF",		"\x86\xAF" => "\xEB\x84\xB0",		"\x86\xB0" => "\xEB\x84\xB1",		"\x86\xB1" => "\xEB\x84\xB2",		"\x86\xB2" => "\xEB\x84\xB3",		"\x86\xB3" => "\xEB\x84\xB6",		"\x86\xB4" => "\xEB\x84\xBA",		"\x86\xB5" => "\xEB\x84\xBB",		"\x86\xB6" => "\xEB\x84\xBC",		"\x86\xB7" => "\xEB\x84\xBD",		"\x86\xB8" => "\xEB\x84\xBE",		"\x86\xB9" => "\xEB\x84\xBF",		"\x86\xBA" => "\xEB\x85\x82",		"\x86\xBB" => "\xEB\x85\x83",		"\x86\xBC" => "\xEB\x85\x85",		"\x86\xBD" => "\xEB\x85\x86",		"\x86\xBE" => "\xEB\x85\x87",		"\x86\xBF" => "\xEB\x85\x89",		"\x86\xC0" => "\xEB\x85\x8A",		"\x86\xC1" => "\xEB\x85\x8B",		"\x86\xC2" => "\xEB\x85\x8C",		"\x86\xC3" => "\xEB\x85\x8D",		"\x86\xC4" => "\xEB\x85\x8E",		"\x86\xC5" => "\xEB\x85\x8F",		"\x86\xC6" => "\xEB\x85\x92",		"\x86\xC7" => "\xEB\x85\x93",		"\x86\xC8" => "\xEB\x85\x96",		"\x86\xC9" => "\xEB\x85\x97",		"\x86\xCA" => "\xEB\x85\x99",		"\x86\xCB" => "\xEB\x85\x9A",		"\x86\xCC" => "\xEB\x85\x9B",		"\x86\xCD" => "\xEB\x85\x9D",		"\x86\xCE" => "\xEB\x85\x9E",		"\x86\xCF" => "\xEB\x85\x9F",		"\x86\xD0" => "\xEB\x85\xA1",		"\x86\xD1" => "\xEB\x85\xA2",		"\x86\xD2" => "\xEB\x85\xA3",		"\x86\xD3" => "\xEB\x85\xA4",		"\x86\xD4" => "\xEB\x85\xA5",		"\x86\xD5" => "\xEB\x85\xA6",		"\x86\xD6" => "\xEB\x85\xA7",		"\x86\xD7" => "\xEB\x85\xA8",		"\x86\xD8" => "\xEB\x85\xA9",		"\x86\xD9" => "\xEB\x85\xAA",		"\x86\xDA" => "\xEB\x85\xAB",		"\x86\xDB" => "\xEB\x85\xAC",		"\x86\xDC" => "\xEB\x85\xAD",		"\x86\xDD" => "\xEB\x85\xAE",		"\x86\xDE" => "\xEB\x85\xAF",		"\x86\xDF" => "\xEB\x85\xB0",		"\x86\xE0" => "\xEB\x85\xB1",		"\x86\xE1" => "\xEB\x85\xB2",		"\x86\xE2" => "\xEB\x85\xB3",		"\x86\xE3" => "\xEB\x85\xB4",		"\x86\xE4" => "\xEB\x85\xB5",		"\x86\xE5" => "\xEB\x85\xB6",		"\x86\xE6" => "\xEB\x85\xB7",		"\x86\xE7" => "\xEB\x85\xBA",		"\x86\xE8" => "\xEB\x85\xBB",		"\x86\xE9" => "\xEB\x85\xBD",		"\x86\xEA" => "\xEB\x85\xBE",		"\x86\xEB" => "\xEB\x85\xBF",		"\x86\xEC" => "\xEB\x86\x81",		"\x86\xED" => "\xEB\x86\x83",		"\x86\xEE" => "\xEB\x86\x84",		"\x86\xEF" => "\xEB\x86\x85",		"\x86\xF0" => "\xEB\x86\x86",		"\x86\xF1" => "\xEB\x86\x87",		"\x86\xF2" => "\xEB\x86\x8A",		"\x86\xF3" => "\xEB\x86\x8C",		"\x86\xF4" => "\xEB\x86\x8E",		"\x86\xF5" => "\xEB\x86\x8F",		"\x86\xF6" => "\xEB\x86\x90",		"\x86\xF7" => "\xEB\x86\x91",		"\x86\xF8" => "\xEB\x86\x95",		"\x86\xF9" => "\xEB\x86\x96",		"\x86\xFA" => "\xEB\x86\x97",		"\x86\xFB" => "\xEB\x86\x99",		"\x86\xFC" => "\xEB\x86\x9A",		"\x86\xFD" => "\xEB\x86\x9B",		"\x86\xFE" => "\xEB\x86\x9D",		"\x87\x41" => "\xEB\x86\x9E",		"\x87\x42" => "\xEB\x86\x9F",		"\x87\x43" => "\xEB\x86\xA0",		"\x87\x44" => "\xEB\x86\xA1",		"\x87\x45" => "\xEB\x86\xA2",		"\x87\x46" => "\xEB\x86\xA3",		"\x87\x47" => "\xEB\x86\xA4",		"\x87\x48" => "\xEB\x86\xA5",		"\x87\x49" => "\xEB\x86\xA6",		"\x87\x4A" => "\xEB\x86\xA7",		"\x87\x4B" => "\xEB\x86\xA9",		"\x87\x4C" => "\xEB\x86\xAA",		"\x87\x4D" => "\xEB\x86\xAB",		"\x87\x4E" => "\xEB\x86\xAC",		"\x87\x4F" => "\xEB\x86\xAD",		"\x87\x50" => "\xEB\x86\xAE",		"\x87\x51" => "\xEB\x86\xAF",		"\x87\x52" => "\xEB\x86\xB0",		"\x87\x53" => "\xEB\x86\xB1",		"\x87\x54" => "\xEB\x86\xB2",		"\x87\x55" => "\xEB\x86\xB3",		"\x87\x56" => "\xEB\x86\xB4",		"\x87\x57" => "\xEB\x86\xB5",		"\x87\x58" => "\xEB\x86\xB6",		"\x87\x59" => "\xEB\x86\xB7",		"\x87\x5A" => "\xEB\x86\xB8",		"\x87\x61" => "\xEB\x86\xB9",		"\x87\x62" => "\xEB\x86\xBA",		"\x87\x63" => "\xEB\x86\xBB",		"\x87\x64" => "\xEB\x86\xBC",		"\x87\x65" => "\xEB\x86\xBD",		"\x87\x66" => "\xEB\x86\xBE",		"\x87\x67" => "\xEB\x86\xBF",		"\x87\x68" => "\xEB\x87\x80",		"\x87\x69" => "\xEB\x87\x81",		"\x87\x6A" => "\xEB\x87\x82",		"\x87\x6B" => "\xEB\x87\x83",		"\x87\x6C" => "\xEB\x87\x84",		"\x87\x6D" => "\xEB\x87\x85",		"\x87\x6E" => "\xEB\x87\x86",		"\x87\x6F" => "\xEB\x87\x87",		"\x87\x70" => "\xEB\x87\x88",		"\x87\x71" => "\xEB\x87\x89",		"\x87\x72" => "\xEB\x87\x8A",		"\x87\x73" => "\xEB\x87\x8B",		"\x87\x74" => "\xEB\x87\x8D",		"\x87\x75" => "\xEB\x87\x8E",		"\x87\x76" => "\xEB\x87\x8F",		"\x87\x77" => "\xEB\x87\x91",		"\x87\x78" => "\xEB\x87\x92",		"\x87\x79" => "\xEB\x87\x93",		"\x87\x7A" => "\xEB\x87\x95",		"\x87\x81" => "\xEB\x87\x96",		"\x87\x82" => "\xEB\x87\x97",		"\x87\x83" => "\xEB\x87\x98",		"\x87\x84" => "\xEB\x87\x99",		"\x87\x85" => "\xEB\x87\x9A",		"\x87\x86" => "\xEB\x87\x9B",		"\x87\x87" => "\xEB\x87\x9E",		"\x87\x88" => "\xEB\x87\xA0",		"\x87\x89" => "\xEB\x87\xA1",		"\x87\x8A" => "\xEB\x87\xA2",		"\x87\x8B" => "\xEB\x87\xA3",		"\x87\x8C" => "\xEB\x87\xA4",		"\x87\x8D" => "\xEB\x87\xA5",		"\x87\x8E" => "\xEB\x87\xA6",		"\x87\x8F" => "\xEB\x87\xA7",		"\x87\x90" => "\xEB\x87\xAA",		"\x87\x91" => "\xEB\x87\xAB",		"\x87\x92" => "\xEB\x87\xAD",		"\x87\x93" => "\xEB\x87\xAE",		"\x87\x94" => "\xEB\x87\xAF",		"\x87\x95" => "\xEB\x87\xB1",		"\x87\x96" => "\xEB\x87\xB2",		"\x87\x97" => "\xEB\x87\xB3",		"\x87\x98" => "\xEB\x87\xB4",		"\x87\x99" => "\xEB\x87\xB5",		"\x87\x9A" => "\xEB\x87\xB6",		"\x87\x9B" => "\xEB\x87\xB7",		"\x87\x9C" => "\xEB\x87\xB8",		"\x87\x9D" => "\xEB\x87\xBA",		"\x87\x9E" => "\xEB\x87\xBC",		"\x87\x9F" => "\xEB\x87\xBE",		"\x87\xA0" => "\xEB\x87\xBF",		"\x87\xA1" => "\xEB\x88\x80",		"\x87\xA2" => "\xEB\x88\x81",		"\x87\xA3" => "\xEB\x88\x82",		"\x87\xA4" => "\xEB\x88\x83",		"\x87\xA5" => "\xEB\x88\x86",		"\x87\xA6" => "\xEB\x88\x87",		"\x87\xA7" => "\xEB\x88\x89",		"\x87\xA8" => "\xEB\x88\x8A",		"\x87\xA9" => "\xEB\x88\x8D",		"\x87\xAA" => "\xEB\x88\x8E",		"\x87\xAB" => "\xEB\x88\x8F",		"\x87\xAC" => "\xEB\x88\x90",		"\x87\xAD" => "\xEB\x88\x91",		"\x87\xAE" => "\xEB\x88\x92",		"\x87\xAF" => "\xEB\x88\x93",		"\x87\xB0" => "\xEB\x88\x96",		"\x87\xB1" => "\xEB\x88\x98",		"\x87\xB2" => "\xEB\x88\x9A",		"\x87\xB3" => "\xEB\x88\x9B",		"\x87\xB4" => "\xEB\x88\x9C",		"\x87\xB5" => "\xEB\x88\x9D",		"\x87\xB6" => "\xEB\x88\x9E",		"\x87\xB7" => "\xEB\x88\x9F",		"\x87\xB8" => "\xEB\x88\xA1",		"\x87\xB9" => "\xEB\x88\xA2",		"\x87\xBA" => "\xEB\x88\xA3",		"\x87\xBB" => "\xEB\x88\xA4",		"\x87\xBC" => "\xEB\x88\xA5",		"\x87\xBD" => "\xEB\x88\xA6",		"\x87\xBE" => "\xEB\x88\xA7",		"\x87\xBF" => "\xEB\x88\xA8",		"\x87\xC0" => "\xEB\x88\xA9",		"\x87\xC1" => "\xEB\x88\xAA",		"\x87\xC2" => "\xEB\x88\xAB",		"\x87\xC3" => "\xEB\x88\xAC",		"\x87\xC4" => "\xEB\x88\xAD",		"\x87\xC5" => "\xEB\x88\xAE",		"\x87\xC6" => "\xEB\x88\xAF",		"\x87\xC7" => "\xEB\x88\xB0",		"\x87\xC8" => "\xEB\x88\xB1",		"\x87\xC9" => "\xEB\x88\xB2",		"\x87\xCA" => "\xEB\x88\xB3",		"\x87\xCB" => "\xEB\x88\xB5",		"\x87\xCC" => "\xEB\x88\xB6",		"\x87\xCD" => "\xEB\x88\xB7",		"\x87\xCE" => "\xEB\x88\xB8",		"\x87\xCF" => "\xEB\x88\xB9",		"\x87\xD0" => "\xEB\x88\xBA",		"\x87\xD1" => "\xEB\x88\xBB",		"\x87\xD2" => "\xEB\x88\xBD",		"\x87\xD3" => "\xEB\x88\xBE",		"\x87\xD4" => "\xEB\x88\xBF",		"\x87\xD5" => "\xEB\x89\x80",		"\x87\xD6" => "\xEB\x89\x81",		"\x87\xD7" => "\xEB\x89\x82",		"\x87\xD8" => "\xEB\x89\x83",		"\x87\xD9" => "\xEB\x89\x84",		"\x87\xDA" => "\xEB\x89\x85",		"\x87\xDB" => "\xEB\x89\x86",		"\x87\xDC" => "\xEB\x89\x87",		"\x87\xDD" => "\xEB\x89\x88",		"\x87\xDE" => "\xEB\x89\x89",		"\x87\xDF" => "\xEB\x89\x8A",		"\x87\xE0" => "\xEB\x89\x8B",		"\x87\xE1" => "\xEB\x89\x8C",		"\x87\xE2" => "\xEB\x89\x8D",		"\x87\xE3" => "\xEB\x89\x8E",		"\x87\xE4" => "\xEB\x89\x8F",		"\x87\xE5" => "\xEB\x89\x90",		"\x87\xE6" => "\xEB\x89\x91",		"\x87\xE7" => "\xEB\x89\x92",		"\x87\xE8" => "\xEB\x89\x93",		"\x87\xE9" => "\xEB\x89\x94",		"\x87\xEA" => "\xEB\x89\x95",		"\x87\xEB" => "\xEB\x89\x96",		"\x87\xEC" => "\xEB\x89\x97",		"\x87\xED" => "\xEB\x89\x99",		"\x87\xEE" => "\xEB\x89\x9A",		"\x87\xEF" => "\xEB\x89\x9B",		"\x87\xF0" => "\xEB\x89\x9D",		"\x87\xF1" => "\xEB\x89\x9E",		"\x87\xF2" => "\xEB\x89\x9F",		"\x87\xF3" => "\xEB\x89\xA1",		"\x87\xF4" => "\xEB\x89\xA2",		"\x87\xF5" => "\xEB\x89\xA3",		"\x87\xF6" => "\xEB\x89\xA4",		"\x87\xF7" => "\xEB\x89\xA5",		"\x87\xF8" => "\xEB\x89\xA6",		"\x87\xF9" => "\xEB\x89\xA7",		"\x87\xFA" => "\xEB\x89\xAA",		"\x87\xFB" => "\xEB\x89\xAB",		"\x87\xFC" => "\xEB\x89\xAC",		"\x87\xFD" => "\xEB\x89\xAD",		"\x87\xFE" => "\xEB\x89\xAE",		"\x88\x41" => "\xEB\x89\xAF",		"\x88\x42" => "\xEB\x89\xB0",		"\x88\x43" => "\xEB\x89\xB1",		"\x88\x44" => "\xEB\x89\xB2",		"\x88\x45" => "\xEB\x89\xB3",		"\x88\x46" => "\xEB\x89\xB6",		"\x88\x47" => "\xEB\x89\xB7",		"\x88\x48" => "\xEB\x89\xB8",		"\x88\x49" => "\xEB\x89\xB9",		"\x88\x4A" => "\xEB\x89\xBA",		"\x88\x4B" => "\xEB\x89\xBB",		"\x88\x4C" => "\xEB\x89\xBD",		"\x88\x4D" => "\xEB\x89\xBE",		"\x88\x4E" => "\xEB\x89\xBF",		"\x88\x4F" => "\xEB\x8A\x80",		"\x88\x50" => "\xEB\x8A\x81",		"\x88\x51" => "\xEB\x8A\x82",		"\x88\x52" => "\xEB\x8A\x83",		"\x88\x53" => "\xEB\x8A\x86",		"\x88\x54" => "\xEB\x8A\x87",		"\x88\x55" => "\xEB\x8A\x88",		"\x88\x56" => "\xEB\x8A\x8A",		"\x88\x57" => "\xEB\x8A\x8B",		"\x88\x58" => "\xEB\x8A\x8C",		"\x88\x59" => "\xEB\x8A\x8D",		"\x88\x5A" => "\xEB\x8A\x8E",		"\x88\x61" => "\xEB\x8A\x8F",		"\x88\x62" => "\xEB\x8A\x92",		"\x88\x63" => "\xEB\x8A\x93",		"\x88\x64" => "\xEB\x8A\x95",		"\x88\x65" => "\xEB\x8A\x96",		"\x88\x66" => "\xEB\x8A\x97",		"\x88\x67" => "\xEB\x8A\x9B",		"\x88\x68" => "\xEB\x8A\x9C",		"\x88\x69" => "\xEB\x8A\x9D",		"\x88\x6A" => "\xEB\x8A\x9E",		"\x88\x6B" => "\xEB\x8A\x9F",		"\x88\x6C" => "\xEB\x8A\xA2",		"\x88\x6D" => "\xEB\x8A\xA4",		"\x88\x6E" => "\xEB\x8A\xA7",		"\x88\x6F" => "\xEB\x8A\xA8",		"\x88\x70" => "\xEB\x8A\xA9",		"\x88\x71" => "\xEB\x8A\xAB",		"\x88\x72" => "\xEB\x8A\xAD",		"\x88\x73" => "\xEB\x8A\xAE",		"\x88\x74" => "\xEB\x8A\xAF",		"\x88\x75" => "\xEB\x8A\xB1",		"\x88\x76" => "\xEB\x8A\xB2",		"\x88\x77" => "\xEB\x8A\xB3",		"\x88\x78" => "\xEB\x8A\xB5",		"\x88\x79" => "\xEB\x8A\xB6",		"\x88\x7A" => "\xEB\x8A\xB7",		"\x88\x81" => "\xEB\x8A\xB8",		"\x88\x82" => "\xEB\x8A\xB9",		"\x88\x83" => "\xEB\x8A\xBA",		"\x88\x84" => "\xEB\x8A\xBB",		"\x88\x85" => "\xEB\x8A\xBC",		"\x88\x86" => "\xEB\x8A\xBD",		"\x88\x87" => "\xEB\x8A\xBE",		"\x88\x88" => "\xEB\x8A\xBF",		"\x88\x89" => "\xEB\x8B\x80",		"\x88\x8A" => "\xEB\x8B\x81",		"\x88\x8B" => "\xEB\x8B\x82",		"\x88\x8C" => "\xEB\x8B\x83",		"\x88\x8D" => "\xEB\x8B\x84",		"\x88\x8E" => "\xEB\x8B\x85",		"\x88\x8F" => "\xEB\x8B\x86",		"\x88\x90" => "\xEB\x8B\x87",		"\x88\x91" => "\xEB\x8B\x8A",		"\x88\x92" => "\xEB\x8B\x8B",		"\x88\x93" => "\xEB\x8B\x8D",		"\x88\x94" => "\xEB\x8B\x8E",		"\x88\x95" => "\xEB\x8B\x8F",		"\x88\x96" => "\xEB\x8B\x91",		"\x88\x97" => "\xEB\x8B\x93",		"\x88\x98" => "\xEB\x8B\x94",		"\x88\x99" => "\xEB\x8B\x95",		"\x88\x9A" => "\xEB\x8B\x96",		"\x88\x9B" => "\xEB\x8B\x97",		"\x88\x9C" => "\xEB\x8B\x9A",		"\x88\x9D" => "\xEB\x8B\x9C",		"\x88\x9E" => "\xEB\x8B\x9E",		"\x88\x9F" => "\xEB\x8B\x9F",		"\x88\xA0" => "\xEB\x8B\xA0",		"\x88\xA1" => "\xEB\x8B\xA1",		"\x88\xA2" => "\xEB\x8B\xA3",		"\x88\xA3" => "\xEB\x8B\xA7",		"\x88\xA4" => "\xEB\x8B\xA9",		"\x88\xA5" => "\xEB\x8B\xAA",		"\x88\xA6" => "\xEB\x8B\xB0",		"\x88\xA7" => "\xEB\x8B\xB1",		"\x88\xA8" => "\xEB\x8B\xB2",		"\x88\xA9" => "\xEB\x8B\xB6",		"\x88\xAA" => "\xEB\x8B\xBC",		"\x88\xAB" => "\xEB\x8B\xBD",		"\x88\xAC" => "\xEB\x8B\xBE",		"\x88\xAD" => "\xEB\x8C\x82",		"\x88\xAE" => "\xEB\x8C\x83",		"\x88\xAF" => "\xEB\x8C\x85",		"\x88\xB0" => "\xEB\x8C\x86",		"\x88\xB1" => "\xEB\x8C\x87",		"\x88\xB2" => "\xEB\x8C\x89",		"\x88\xB3" => "\xEB\x8C\x8A",		"\x88\xB4" => "\xEB\x8C\x8B",		"\x88\xB5" => "\xEB\x8C\x8C",		"\x88\xB6" => "\xEB\x8C\x8D",		"\x88\xB7" => "\xEB\x8C\x8E",		"\x88\xB8" => "\xEB\x8C\x8F",		"\x88\xB9" => "\xEB\x8C\x92",		"\x88\xBA" => "\xEB\x8C\x96",		"\x88\xBB" => "\xEB\x8C\x97",		"\x88\xBC" => "\xEB\x8C\x98",		"\x88\xBD" => "\xEB\x8C\x99",		"\x88\xBE" => "\xEB\x8C\x9A",		"\x88\xBF" => "\xEB\x8C\x9B",		"\x88\xC0" => "\xEB\x8C\x9D",		"\x88\xC1" => "\xEB\x8C\x9E",		"\x88\xC2" => "\xEB\x8C\x9F",		"\x88\xC3" => "\xEB\x8C\xA0",		"\x88\xC4" => "\xEB\x8C\xA1",		"\x88\xC5" => "\xEB\x8C\xA2",		"\x88\xC6" => "\xEB\x8C\xA3",		"\x88\xC7" => "\xEB\x8C\xA4",		"\x88\xC8" => "\xEB\x8C\xA5",		"\x88\xC9" => "\xEB\x8C\xA6",		"\x88\xCA" => "\xEB\x8C\xA7",		"\x88\xCB" => "\xEB\x8C\xA8",		"\x88\xCC" => "\xEB\x8C\xA9",		"\x88\xCD" => "\xEB\x8C\xAA",		"\x88\xCE" => "\xEB\x8C\xAB",		"\x88\xCF" => "\xEB\x8C\xAC",		"\x88\xD0" => "\xEB\x8C\xAD",		"\x88\xD1" => "\xEB\x8C\xAE",		"\x88\xD2" => "\xEB\x8C\xAF",		"\x88\xD3" => "\xEB\x8C\xB0",		"\x88\xD4" => "\xEB\x8C\xB1",		"\x88\xD5" => "\xEB\x8C\xB2",		"\x88\xD6" => "\xEB\x8C\xB3",		"\x88\xD7" => "\xEB\x8C\xB4",		"\x88\xD8" => "\xEB\x8C\xB5",		"\x88\xD9" => "\xEB\x8C\xB6",		"\x88\xDA" => "\xEB\x8C\xB7",		"\x88\xDB" => "\xEB\x8C\xB8",		"\x88\xDC" => "\xEB\x8C\xB9",		"\x88\xDD" => "\xEB\x8C\xBA",		"\x88\xDE" => "\xEB\x8C\xBB",		"\x88\xDF" => "\xEB\x8C\xBC",		"\x88\xE0" => "\xEB\x8C\xBD",		"\x88\xE1" => "\xEB\x8C\xBE",		"\x88\xE2" => "\xEB\x8C\xBF",		"\x88\xE3" => "\xEB\x8D\x80",		"\x88\xE4" => "\xEB\x8D\x81",		"\x88\xE5" => "\xEB\x8D\x82",		"\x88\xE6" => "\xEB\x8D\x83",		"\x88\xE7" => "\xEB\x8D\x84",		"\x88\xE8" => "\xEB\x8D\x85",		"\x88\xE9" => "\xEB\x8D\x86",		"\x88\xEA" => "\xEB\x8D\x87",		"\x88\xEB" => "\xEB\x8D\x88",		"\x88\xEC" => "\xEB\x8D\x89",		"\x88\xED" => "\xEB\x8D\x8A",		"\x88\xEE" => "\xEB\x8D\x8B",		"\x88\xEF" => "\xEB\x8D\x8C",		"\x88\xF0" => "\xEB\x8D\x8D",		"\x88\xF1" => "\xEB\x8D\x8E",		"\x88\xF2" => "\xEB\x8D\x8F",		"\x88\xF3" => "\xEB\x8D\x90",		"\x88\xF4" => "\xEB\x8D\x91",		"\x88\xF5" => "\xEB\x8D\x92",		"\x88\xF6" => "\xEB\x8D\x93",		"\x88\xF7" => "\xEB\x8D\x97",		"\x88\xF8" => "\xEB\x8D\x99",		"\x88\xF9" => "\xEB\x8D\x9A",		"\x88\xFA" => "\xEB\x8D\x9D",		"\x88\xFB" => "\xEB\x8D\xA0",		"\x88\xFC" => "\xEB\x8D\xA1",		"\x88\xFD" => "\xEB\x8D\xA2",		"\x88\xFE" => "\xEB\x8D\xA3",		"\x89\x41" => "\xEB\x8D\xA6",		"\x89\x42" => "\xEB\x8D\xA8",		"\x89\x43" => "\xEB\x8D\xAA",		"\x89\x44" => "\xEB\x8D\xAC",		"\x89\x45" => "\xEB\x8D\xAD",		"\x89\x46" => "\xEB\x8D\xAF",		"\x89\x47" => "\xEB\x8D\xB2",		"\x89\x48" => "\xEB\x8D\xB3",		"\x89\x49" => "\xEB\x8D\xB5",		"\x89\x4A" => "\xEB\x8D\xB6",		"\x89\x4B" => "\xEB\x8D\xB7",		"\x89\x4C" => "\xEB\x8D\xB9",		"\x89\x4D" => "\xEB\x8D\xBA",		"\x89\x4E" => "\xEB\x8D\xBB",		"\x89\x4F" => "\xEB\x8D\xBC",		"\x89\x50" => "\xEB\x8D\xBD",		"\x89\x51" => "\xEB\x8D\xBE",		"\x89\x52" => "\xEB\x8D\xBF",		"\x89\x53" => "\xEB\x8E\x82",		"\x89\x54" => "\xEB\x8E\x86",		"\x89\x55" => "\xEB\x8E\x87",		"\x89\x56" => "\xEB\x8E\x88",		"\x89\x57" => "\xEB\x8E\x89",		"\x89\x58" => "\xEB\x8E\x8A",		"\x89\x59" => "\xEB\x8E\x8B",		"\x89\x5A" => "\xEB\x8E\x8D",		"\x89\x61" => "\xEB\x8E\x8E",		"\x89\x62" => "\xEB\x8E\x8F",		"\x89\x63" => "\xEB\x8E\x91",		"\x89\x64" => "\xEB\x8E\x92",		"\x89\x65" => "\xEB\x8E\x93",		"\x89\x66" => "\xEB\x8E\x95",		"\x89\x67" => "\xEB\x8E\x96",		"\x89\x68" => "\xEB\x8E\x97",		"\x89\x69" => "\xEB\x8E\x98",		"\x89\x6A" => "\xEB\x8E\x99",		"\x89\x6B" => "\xEB\x8E\x9A",		"\x89\x6C" => "\xEB\x8E\x9B",		"\x89\x6D" => "\xEB\x8E\x9C",		"\x89\x6E" => "\xEB\x8E\x9D",		"\x89\x6F" => "\xEB\x8E\x9E",		"\x89\x70" => "\xEB\x8E\x9F",		"\x89\x71" => "\xEB\x8E\xA2",		"\x89\x72" => "\xEB\x8E\xA3",		"\x89\x73" => "\xEB\x8E\xA4",		"\x89\x74" => "\xEB\x8E\xA5",		"\x89\x75" => "\xEB\x8E\xA6",		"\x89\x76" => "\xEB\x8E\xA7",		"\x89\x77" => "\xEB\x8E\xA9",		"\x89\x78" => "\xEB\x8E\xAA",		"\x89\x79" => "\xEB\x8E\xAB",		"\x89\x7A" => "\xEB\x8E\xAD",		"\x89\x81" => "\xEB\x8E\xAE",		"\x89\x82" => "\xEB\x8E\xAF",		"\x89\x83" => "\xEB\x8E\xB0",		"\x89\x84" => "\xEB\x8E\xB1",		"\x89\x85" => "\xEB\x8E\xB2",		"\x89\x86" => "\xEB\x8E\xB3",		"\x89\x87" => "\xEB\x8E\xB4",		"\x89\x88" => "\xEB\x8E\xB5",		"\x89\x89" => "\xEB\x8E\xB6",		"\x89\x8A" => "\xEB\x8E\xB7",		"\x89\x8B" => "\xEB\x8E\xB8",		"\x89\x8C" => "\xEB\x8E\xB9",		"\x89\x8D" => "\xEB\x8E\xBA",		"\x89\x8E" => "\xEB\x8E\xBB",		"\x89\x8F" => "\xEB\x8E\xBC",		"\x89\x90" => "\xEB\x8E\xBD",		"\x89\x91" => "\xEB\x8E\xBE",		"\x89\x92" => "\xEB\x8E\xBF",		"\x89\x93" => "\xEB\x8F\x80",		"\x89\x94" => "\xEB\x8F\x81",		"\x89\x95" => "\xEB\x8F\x82",		"\x89\x96" => "\xEB\x8F\x83",		"\x89\x97" => "\xEB\x8F\x86",		"\x89\x98" => "\xEB\x8F\x87",		"\x89\x99" => "\xEB\x8F\x89",		"\x89\x9A" => "\xEB\x8F\x8A",		"\x89\x9B" => "\xEB\x8F\x8D",		"\x89\x9C" => "\xEB\x8F\x8F",		"\x89\x9D" => "\xEB\x8F\x91",		"\x89\x9E" => "\xEB\x8F\x92",		"\x89\x9F" => "\xEB\x8F\x93",		"\x89\xA0" => "\xEB\x8F\x96",		"\x89\xA1" => "\xEB\x8F\x98",		"\x89\xA2" => "\xEB\x8F\x9A",		"\x89\xA3" => "\xEB\x8F\x9C",		"\x89\xA4" => "\xEB\x8F\x9E",		"\x89\xA5" => "\xEB\x8F\x9F",		"\x89\xA6" => "\xEB\x8F\xA1",		"\x89\xA7" => "\xEB\x8F\xA2",		"\x89\xA8" => "\xEB\x8F\xA3",		"\x89\xA9" => "\xEB\x8F\xA5",		"\x89\xAA" => "\xEB\x8F\xA6",		"\x89\xAB" => "\xEB\x8F\xA7",		"\x89\xAC" => "\xEB\x8F\xA9",		"\x89\xAD" => "\xEB\x8F\xAA",		"\x89\xAE" => "\xEB\x8F\xAB",		"\x89\xAF" => "\xEB\x8F\xAC",		"\x89\xB0" => "\xEB\x8F\xAD",		"\x89\xB1" => "\xEB\x8F\xAE",		"\x89\xB2" => "\xEB\x8F\xAF",		"\x89\xB3" => "\xEB\x8F\xB0",		"\x89\xB4" => "\xEB\x8F\xB1",		"\x89\xB5" => "\xEB\x8F\xB2",		"\x89\xB6" => "\xEB\x8F\xB3",		"\x89\xB7" => "\xEB\x8F\xB4",		"\x89\xB8" => "\xEB\x8F\xB5",		"\x89\xB9" => "\xEB\x8F\xB6",		"\x89\xBA" => "\xEB\x8F\xB7",		"\x89\xBB" => "\xEB\x8F\xB8",		"\x89\xBC" => "\xEB\x8F\xB9",		"\x89\xBD" => "\xEB\x8F\xBA",		"\x89\xBE" => "\xEB\x8F\xBB",		"\x89\xBF" => "\xEB\x8F\xBD",		"\x89\xC0" => "\xEB\x8F\xBE",		"\x89\xC1" => "\xEB\x8F\xBF",		"\x89\xC2" => "\xEB\x90\x80",		"\x89\xC3" => "\xEB\x90\x81",		"\x89\xC4" => "\xEB\x90\x82",		"\x89\xC5" => "\xEB\x90\x83",		"\x89\xC6" => "\xEB\x90\x84",		"\x89\xC7" => "\xEB\x90\x85",		"\x89\xC8" => "\xEB\x90\x86",		"\x89\xC9" => "\xEB\x90\x87",		"\x89\xCA" => "\xEB\x90\x88",		"\x89\xCB" => "\xEB\x90\x89",		"\x89\xCC" => "\xEB\x90\x8A",		"\x89\xCD" => "\xEB\x90\x8B",		"\x89\xCE" => "\xEB\x90\x8C",		"\x89\xCF" => "\xEB\x90\x8D",		"\x89\xD0" => "\xEB\x90\x8E",		"\x89\xD1" => "\xEB\x90\x8F",		"\x89\xD2" => "\xEB\x90\x91",		"\x89\xD3" => "\xEB\x90\x92",		"\x89\xD4" => "\xEB\x90\x93",		"\x89\xD5" => "\xEB\x90\x94",		"\x89\xD6" => "\xEB\x90\x95",		"\x89\xD7" => "\xEB\x90\x96",		"\x89\xD8" => "\xEB\x90\x97",		"\x89\xD9" => "\xEB\x90\x99",		"\x89\xDA" => "\xEB\x90\x9A",		"\x89\xDB" => "\xEB\x90\x9B",		"\x89\xDC" => "\xEB\x90\x9D",		"\x89\xDD" => "\xEB\x90\x9E",		"\x89\xDE" => "\xEB\x90\x9F",		"\x89\xDF" => "\xEB\x90\xA1",		"\x89\xE0" => "\xEB\x90\xA2",		"\x89\xE1" => "\xEB\x90\xA3",		"\x89\xE2" => "\xEB\x90\xA4",		"\x89\xE3" => "\xEB\x90\xA5",		"\x89\xE4" => "\xEB\x90\xA6",		"\x89\xE5" => "\xEB\x90\xA7",		"\x89\xE6" => "\xEB\x90\xAA",		"\x89\xE7" => "\xEB\x90\xAC",		"\x89\xE8" => "\xEB\x90\xAD",		"\x89\xE9" => "\xEB\x90\xAE",		"\x89\xEA" => "\xEB\x90\xAF",		"\x89\xEB" => "\xEB\x90\xB0",		"\x89\xEC" => "\xEB\x90\xB1",		"\x89\xED" => "\xEB\x90\xB2",		"\x89\xEE" => "\xEB\x90\xB3",		"\x89\xEF" => "\xEB\x90\xB5",		"\x89\xF0" => "\xEB\x90\xB6",		"\x89\xF1" => "\xEB\x90\xB7",		"\x89\xF2" => "\xEB\x90\xB8",		"\x89\xF3" => "\xEB\x90\xB9",		"\x89\xF4" => "\xEB\x90\xBA",		"\x89\xF5" => "\xEB\x90\xBB",		"\x89\xF6" => "\xEB\x90\xBC",		"\x89\xF7" => "\xEB\x90\xBD",		"\x89\xF8" => "\xEB\x90\xBE",		"\x89\xF9" => "\xEB\x90\xBF",		"\x89\xFA" => "\xEB\x91\x80",		"\x89\xFB" => "\xEB\x91\x81",		"\x89\xFC" => "\xEB\x91\x82",		"\x89\xFD" => "\xEB\x91\x83",		"\x89\xFE" => "\xEB\x91\x84",		"\x8A\x41" => "\xEB\x91\x85",		"\x8A\x42" => "\xEB\x91\x86",		"\x8A\x43" => "\xEB\x91\x87",		"\x8A\x44" => "\xEB\x91\x88",		"\x8A\x45" => "\xEB\x91\x89",		"\x8A\x46" => "\xEB\x91\x8A",		"\x8A\x47" => "\xEB\x91\x8B",		"\x8A\x48" => "\xEB\x91\x8C",		"\x8A\x49" => "\xEB\x91\x8D",		"\x8A\x4A" => "\xEB\x91\x8E",		"\x8A\x4B" => "\xEB\x91\x8F",		"\x8A\x4C" => "\xEB\x91\x92",		"\x8A\x4D" => "\xEB\x91\x93",		"\x8A\x4E" => "\xEB\x91\x95",		"\x8A\x4F" => "\xEB\x91\x96",		"\x8A\x50" => "\xEB\x91\x97",		"\x8A\x51" => "\xEB\x91\x99",		"\x8A\x52" => "\xEB\x91\x9A",		"\x8A\x53" => "\xEB\x91\x9B",		"\x8A\x54" => "\xEB\x91\x9C",		"\x8A\x55" => "\xEB\x91\x9D",		"\x8A\x56" => "\xEB\x91\x9E",		"\x8A\x57" => "\xEB\x91\x9F",		"\x8A\x58" => "\xEB\x91\xA2",		"\x8A\x59" => "\xEB\x91\xA4",		"\x8A\x5A" => "\xEB\x91\xA6",		"\x8A\x61" => "\xEB\x91\xA7",		"\x8A\x62" => "\xEB\x91\xA8",		"\x8A\x63" => "\xEB\x91\xA9",		"\x8A\x64" => "\xEB\x91\xAA",		"\x8A\x65" => "\xEB\x91\xAB",		"\x8A\x66" => "\xEB\x91\xAD",		"\x8A\x67" => "\xEB\x91\xAE",		"\x8A\x68" => "\xEB\x91\xAF",		"\x8A\x69" => "\xEB\x91\xB0",		"\x8A\x6A" => "\xEB\x91\xB1",		"\x8A\x6B" => "\xEB\x91\xB2",		"\x8A\x6C" => "\xEB\x91\xB3",		"\x8A\x6D" => "\xEB\x91\xB4",		"\x8A\x6E" => "\xEB\x91\xB5",		"\x8A\x6F" => "\xEB\x91\xB6",		"\x8A\x70" => "\xEB\x91\xB7",		"\x8A\x71" => "\xEB\x91\xB8",		"\x8A\x72" => "\xEB\x91\xB9",		"\x8A\x73" => "\xEB\x91\xBA",		"\x8A\x74" => "\xEB\x91\xBB",		"\x8A\x75" => "\xEB\x91\xBC",		"\x8A\x76" => "\xEB\x91\xBD",		"\x8A\x77" => "\xEB\x91\xBE",		"\x8A\x78" => "\xEB\x91\xBF",		"\x8A\x79" => "\xEB\x92\x81",		"\x8A\x7A" => "\xEB\x92\x82",		"\x8A\x81" => "\xEB\x92\x83",		"\x8A\x82" => "\xEB\x92\x84",		"\x8A\x83" => "\xEB\x92\x85",		"\x8A\x84" => "\xEB\x92\x86",		"\x8A\x85" => "\xEB\x92\x87",		"\x8A\x86" => "\xEB\x92\x89",		"\x8A\x87" => "\xEB\x92\x8A",		"\x8A\x88" => "\xEB\x92\x8B",		"\x8A\x89" => "\xEB\x92\x8C",		"\x8A\x8A" => "\xEB\x92\x8D",		"\x8A\x8B" => "\xEB\x92\x8E",		"\x8A\x8C" => "\xEB\x92\x8F",		"\x8A\x8D" => "\xEB\x92\x90",		"\x8A\x8E" => "\xEB\x92\x91",		"\x8A\x8F" => "\xEB\x92\x92",		"\x8A\x90" => "\xEB\x92\x93",		"\x8A\x91" => "\xEB\x92\x94",		"\x8A\x92" => "\xEB\x92\x95",		"\x8A\x93" => "\xEB\x92\x96",		"\x8A\x94" => "\xEB\x92\x97",		"\x8A\x95" => "\xEB\x92\x98",		"\x8A\x96" => "\xEB\x92\x99",		"\x8A\x97" => "\xEB\x92\x9A",		"\x8A\x98" => "\xEB\x92\x9B",		"\x8A\x99" => "\xEB\x92\x9C",		"\x8A\x9A" => "\xEB\x92\x9E",		"\x8A\x9B" => "\xEB\x92\x9F",		"\x8A\x9C" => "\xEB\x92\xA0",		"\x8A\x9D" => "\xEB\x92\xA1",		"\x8A\x9E" => "\xEB\x92\xA2",		"\x8A\x9F" => "\xEB\x92\xA3",		"\x8A\xA0" => "\xEB\x92\xA5",		"\x8A\xA1" => "\xEB\x92\xA6",		"\x8A\xA2" => "\xEB\x92\xA7",		"\x8A\xA3" => "\xEB\x92\xA9",		"\x8A\xA4" => "\xEB\x92\xAA",		"\x8A\xA5" => "\xEB\x92\xAB",		"\x8A\xA6" => "\xEB\x92\xAD",		"\x8A\xA7" => "\xEB\x92\xAE",		"\x8A\xA8" => "\xEB\x92\xAF",		"\x8A\xA9" => "\xEB\x92\xB0",		"\x8A\xAA" => "\xEB\x92\xB1",		"\x8A\xAB" => "\xEB\x92\xB2",		"\x8A\xAC" => "\xEB\x92\xB3",		"\x8A\xAD" => "\xEB\x92\xB4",		"\x8A\xAE" => "\xEB\x92\xB6",		"\x8A\xAF" => "\xEB\x92\xB8",		"\x8A\xB0" => "\xEB\x92\xBA",		"\x8A\xB1" => "\xEB\x92\xBB",		"\x8A\xB2" => "\xEB\x92\xBC",		"\x8A\xB3" => "\xEB\x92\xBD",		"\x8A\xB4" => "\xEB\x92\xBE",		"\x8A\xB5" => "\xEB\x92\xBF",		"\x8A\xB6" => "\xEB\x93\x81",		"\x8A\xB7" => "\xEB\x93\x82",		"\x8A\xB8" => "\xEB\x93\x83",		"\x8A\xB9" => "\xEB\x93\x85",		"\x8A\xBA" => "\xEB\x93\x86",		"\x8A\xBB" => "\xEB\x93\x87",		"\x8A\xBC" => "\xEB\x93\x89",		"\x8A\xBD" => "\xEB\x93\x8A",		"\x8A\xBE" => "\xEB\x93\x8B",		"\x8A\xBF" => "\xEB\x93\x8C",		"\x8A\xC0" => "\xEB\x93\x8D",		"\x8A\xC1" => "\xEB\x93\x8E",		"\x8A\xC2" => "\xEB\x93\x8F",		"\x8A\xC3" => "\xEB\x93\x91",		"\x8A\xC4" => "\xEB\x93\x92",		"\x8A\xC5" => "\xEB\x93\x93",		"\x8A\xC6" => "\xEB\x93\x94",		"\x8A\xC7" => "\xEB\x93\x96",		"\x8A\xC8" => "\xEB\x93\x97",		"\x8A\xC9" => "\xEB\x93\x98",		"\x8A\xCA" => "\xEB\x93\x99",		"\x8A\xCB" => "\xEB\x93\x9A",		"\x8A\xCC" => "\xEB\x93\x9B",		"\x8A\xCD" => "\xEB\x93\x9E",		"\x8A\xCE" => "\xEB\x93\x9F",		"\x8A\xCF" => "\xEB\x93\xA1",		"\x8A\xD0" => "\xEB\x93\xA2",		"\x8A\xD1" => "\xEB\x93\xA5",		"\x8A\xD2" => "\xEB\x93\xA7",		"\x8A\xD3" => "\xEB\x93\xA8",		"\x8A\xD4" => "\xEB\x93\xA9",		"\x8A\xD5" => "\xEB\x93\xAA",		"\x8A\xD6" => "\xEB\x93\xAB",		"\x8A\xD7" => "\xEB\x93\xAE",		"\x8A\xD8" => "\xEB\x93\xB0",		"\x8A\xD9" => "\xEB\x93\xB2",		"\x8A\xDA" => "\xEB\x93\xB3",		"\x8A\xDB" => "\xEB\x93\xB4",		"\x8A\xDC" => "\xEB\x93\xB5",		"\x8A\xDD" => "\xEB\x93\xB6",		"\x8A\xDE" => "\xEB\x93\xB7",		"\x8A\xDF" => "\xEB\x93\xB9",		"\x8A\xE0" => "\xEB\x93\xBA",		"\x8A\xE1" => "\xEB\x93\xBB",		"\x8A\xE2" => "\xEB\x93\xBC",		"\x8A\xE3" => "\xEB\x93\xBD",		"\x8A\xE4" => "\xEB\x93\xBE",		"\x8A\xE5" => "\xEB\x93\xBF",		"\x8A\xE6" => "\xEB\x94\x80",		"\x8A\xE7" => "\xEB\x94\x81",		"\x8A\xE8" => "\xEB\x94\x82",		"\x8A\xE9" => "\xEB\x94\x83",		"\x8A\xEA" => "\xEB\x94\x84",		"\x8A\xEB" => "\xEB\x94\x85",		"\x8A\xEC" => "\xEB\x94\x86",		"\x8A\xED" => "\xEB\x94\x87",		"\x8A\xEE" => "\xEB\x94\x88",		"\x8A\xEF" => "\xEB\x94\x89",		"\x8A\xF0" => "\xEB\x94\x8A",		"\x8A\xF1" => "\xEB\x94\x8B",		"\x8A\xF2" => "\xEB\x94\x8C",		"\x8A\xF3" => "\xEB\x94\x8D",		"\x8A\xF4" => "\xEB\x94\x8E",		"\x8A\xF5" => "\xEB\x94\x8F",		"\x8A\xF6" => "\xEB\x94\x90",		"\x8A\xF7" => "\xEB\x94\x91",		"\x8A\xF8" => "\xEB\x94\x92",		"\x8A\xF9" => "\xEB\x94\x93",		"\x8A\xFA" => "\xEB\x94\x96",		"\x8A\xFB" => "\xEB\x94\x97",		"\x8A\xFC" => "\xEB\x94\x99",		"\x8A\xFD" => "\xEB\x94\x9A",		"\x8A\xFE" => "\xEB\x94\x9D",		"\x8B\x41" => "\xEB\x94\x9E",		"\x8B\x42" => "\xEB\x94\x9F",		"\x8B\x43" => "\xEB\x94\xA0",		"\x8B\x44" => "\xEB\x94\xA1",		"\x8B\x45" => "\xEB\x94\xA2",		"\x8B\x46" => "\xEB\x94\xA3",		"\x8B\x47" => "\xEB\x94\xA6",		"\x8B\x48" => "\xEB\x94\xAB",		"\x8B\x49" => "\xEB\x94\xAC",		"\x8B\x4A" => "\xEB\x94\xAD",		"\x8B\x4B" => "\xEB\x94\xAE",		"\x8B\x4C" => "\xEB\x94\xAF",		"\x8B\x4D" => "\xEB\x94\xB2",		"\x8B\x4E" => "\xEB\x94\xB3",		"\x8B\x4F" => "\xEB\x94\xB5",		"\x8B\x50" => "\xEB\x94\xB6",		"\x8B\x51" => "\xEB\x94\xB7",		"\x8B\x52" => "\xEB\x94\xB9",		"\x8B\x53" => "\xEB\x94\xBA",		"\x8B\x54" => "\xEB\x94\xBB",		"\x8B\x55" => "\xEB\x94\xBC",		"\x8B\x56" => "\xEB\x94\xBD",		"\x8B\x57" => "\xEB\x94\xBE",		"\x8B\x58" => "\xEB\x94\xBF",		"\x8B\x59" => "\xEB\x95\x82",		"\x8B\x5A" => "\xEB\x95\x86",		"\x8B\x61" => "\xEB\x95\x87",		"\x8B\x62" => "\xEB\x95\x88",		"\x8B\x63" => "\xEB\x95\x89",		"\x8B\x64" => "\xEB\x95\x8A",		"\x8B\x65" => "\xEB\x95\x8E",		"\x8B\x66" => "\xEB\x95\x8F",		"\x8B\x67" => "\xEB\x95\x91",		"\x8B\x68" => "\xEB\x95\x92",		"\x8B\x69" => "\xEB\x95\x93",		"\x8B\x6A" => "\xEB\x95\x95",		"\x8B\x6B" => "\xEB\x95\x96",		"\x8B\x6C" => "\xEB\x95\x97",		"\x8B\x6D" => "\xEB\x95\x98",		"\x8B\x6E" => "\xEB\x95\x99",		"\x8B\x6F" => "\xEB\x95\x9A",		"\x8B\x70" => "\xEB\x95\x9B",		"\x8B\x71" => "\xEB\x95\x9E",		"\x8B\x72" => "\xEB\x95\xA2",		"\x8B\x73" => "\xEB\x95\xA3",		"\x8B\x74" => "\xEB\x95\xA4",		"\x8B\x75" => "\xEB\x95\xA5",		"\x8B\x76" => "\xEB\x95\xA6",		"\x8B\x77" => "\xEB\x95\xA7",		"\x8B\x78" => "\xEB\x95\xA8",		"\x8B\x79" => "\xEB\x95\xA9",		"\x8B\x7A" => "\xEB\x95\xAA",		"\x8B\x81" => "\xEB\x95\xAB",		"\x8B\x82" => "\xEB\x95\xAC",		"\x8B\x83" => "\xEB\x95\xAD",		"\x8B\x84" => "\xEB\x95\xAE",		"\x8B\x85" => "\xEB\x95\xAF",		"\x8B\x86" => "\xEB\x95\xB0",		"\x8B\x87" => "\xEB\x95\xB1",		"\x8B\x88" => "\xEB\x95\xB2",		"\x8B\x89" => "\xEB\x95\xB3",		"\x8B\x8A" => "\xEB\x95\xB4",		"\x8B\x8B" => "\xEB\x95\xB5",		"\x8B\x8C" => "\xEB\x95\xB6",		"\x8B\x8D" => "\xEB\x95\xB7",		"\x8B\x8E" => "\xEB\x95\xB8",		"\x8B\x8F" => "\xEB\x95\xB9",		"\x8B\x90" => "\xEB\x95\xBA",		"\x8B\x91" => "\xEB\x95\xBB",		"\x8B\x92" => "\xEB\x95\xBC",		"\x8B\x93" => "\xEB\x95\xBD",		"\x8B\x94" => "\xEB\x95\xBE",		"\x8B\x95" => "\xEB\x95\xBF",		"\x8B\x96" => "\xEB\x96\x80",		"\x8B\x97" => "\xEB\x96\x81",		"\x8B\x98" => "\xEB\x96\x82",		"\x8B\x99" => "\xEB\x96\x83",		"\x8B\x9A" => "\xEB\x96\x84",		"\x8B\x9B" => "\xEB\x96\x85",		"\x8B\x9C" => "\xEB\x96\x86",		"\x8B\x9D" => "\xEB\x96\x87",		"\x8B\x9E" => "\xEB\x96\x88",		"\x8B\x9F" => "\xEB\x96\x89",		"\x8B\xA0" => "\xEB\x96\x8A",		"\x8B\xA1" => "\xEB\x96\x8B",		"\x8B\xA2" => "\xEB\x96\x8C",		"\x8B\xA3" => "\xEB\x96\x8D",		"\x8B\xA4" => "\xEB\x96\x8E",		"\x8B\xA5" => "\xEB\x96\x8F",		"\x8B\xA6" => "\xEB\x96\x90",		"\x8B\xA7" => "\xEB\x96\x91",		"\x8B\xA8" => "\xEB\x96\x92",		"\x8B\xA9" => "\xEB\x96\x93",		"\x8B\xAA" => "\xEB\x96\x94",		"\x8B\xAB" => "\xEB\x96\x95",		"\x8B\xAC" => "\xEB\x96\x96",		"\x8B\xAD" => "\xEB\x96\x97",		"\x8B\xAE" => "\xEB\x96\x98",		"\x8B\xAF" => "\xEB\x96\x99",		"\x8B\xB0" => "\xEB\x96\x9A",		"\x8B\xB1" => "\xEB\x96\x9B",		"\x8B\xB2" => "\xEB\x96\x9C",		"\x8B\xB3" => "\xEB\x96\x9D",		"\x8B\xB4" => "\xEB\x96\x9E",		"\x8B\xB5" => "\xEB\x96\x9F",		"\x8B\xB6" => "\xEB\x96\xA2",		"\x8B\xB7" => "\xEB\x96\xA3",		"\x8B\xB8" => "\xEB\x96\xA5",		"\x8B\xB9" => "\xEB\x96\xA6",		"\x8B\xBA" => "\xEB\x96\xA7",		"\x8B\xBB" => "\xEB\x96\xA9",		"\x8B\xBC" => "\xEB\x96\xAC",		"\x8B\xBD" => "\xEB\x96\xAD",		"\x8B\xBE" => "\xEB\x96\xAE",		"\x8B\xBF" => "\xEB\x96\xAF",		"\x8B\xC0" => "\xEB\x96\xB2",		"\x8B\xC1" => "\xEB\x96\xB6",		"\x8B\xC2" => "\xEB\x96\xB7",		"\x8B\xC3" => "\xEB\x96\xB8",		"\x8B\xC4" => "\xEB\x96\xB9",		"\x8B\xC5" => "\xEB\x96\xBA",		"\x8B\xC6" => "\xEB\x96\xBE",		"\x8B\xC7" => "\xEB\x96\xBF",		"\x8B\xC8" => "\xEB\x97\x81",		"\x8B\xC9" => "\xEB\x97\x82",		"\x8B\xCA" => "\xEB\x97\x83",		"\x8B\xCB" => "\xEB\x97\x85",		"\x8B\xCC" => "\xEB\x97\x86",		"\x8B\xCD" => "\xEB\x97\x87",		"\x8B\xCE" => "\xEB\x97\x88",		"\x8B\xCF" => "\xEB\x97\x89",		"\x8B\xD0" => "\xEB\x97\x8A",		"\x8B\xD1" => "\xEB\x97\x8B",		"\x8B\xD2" => "\xEB\x97\x8E",		"\x8B\xD3" => "\xEB\x97\x92",		"\x8B\xD4" => "\xEB\x97\x93",		"\x8B\xD5" => "\xEB\x97\x94",		"\x8B\xD6" => "\xEB\x97\x95",		"\x8B\xD7" => "\xEB\x97\x96",		"\x8B\xD8" => "\xEB\x97\x97",		"\x8B\xD9" => "\xEB\x97\x99",		"\x8B\xDA" => "\xEB\x97\x9A",		"\x8B\xDB" => "\xEB\x97\x9B",		"\x8B\xDC" => "\xEB\x97\x9C",		"\x8B\xDD" => "\xEB\x97\x9D",		"\x8B\xDE" => "\xEB\x97\x9E",		"\x8B\xDF" => "\xEB\x97\x9F",		"\x8B\xE0" => "\xEB\x97\xA0",		"\x8B\xE1" => "\xEB\x97\xA1",		"\x8B\xE2" => "\xEB\x97\xA2",		"\x8B\xE3" => "\xEB\x97\xA3",		"\x8B\xE4" => "\xEB\x97\xA4",		"\x8B\xE5" => "\xEB\x97\xA5",		"\x8B\xE6" => "\xEB\x97\xA6",		"\x8B\xE7" => "\xEB\x97\xA7",		"\x8B\xE8" => "\xEB\x97\xA8",		"\x8B\xE9" => "\xEB\x97\xA9",		"\x8B\xEA" => "\xEB\x97\xAA",		"\x8B\xEB" => "\xEB\x97\xAB",		"\x8B\xEC" => "\xEB\x97\xAD",		"\x8B\xED" => "\xEB\x97\xAE",		"\x8B\xEE" => "\xEB\x97\xAF",		"\x8B\xEF" => "\xEB\x97\xB0",		"\x8B\xF0" => "\xEB\x97\xB1",		"\x8B\xF1" => "\xEB\x97\xB2",		"\x8B\xF2" => "\xEB\x97\xB3",		"\x8B\xF3" => "\xEB\x97\xB4",		"\x8B\xF4" => "\xEB\x97\xB5",		"\x8B\xF5" => "\xEB\x97\xB6",		"\x8B\xF6" => "\xEB\x97\xB7",		"\x8B\xF7" => "\xEB\x97\xB8",		"\x8B\xF8" => "\xEB\x97\xB9",		"\x8B\xF9" => "\xEB\x97\xBA",		"\x8B\xFA" => "\xEB\x97\xBB",		"\x8B\xFB" => "\xEB\x97\xBC",		"\x8B\xFC" => "\xEB\x97\xBD",		"\x8B\xFD" => "\xEB\x97\xBE",		"\x8B\xFE" => "\xEB\x97\xBF",		"\x8C\x41" => "\xEB\x98\x80",		"\x8C\x42" => "\xEB\x98\x81",		"\x8C\x43" => "\xEB\x98\x82",		"\x8C\x44" => "\xEB\x98\x83",		"\x8C\x45" => "\xEB\x98\x84",		"\x8C\x46" => "\xEB\x98\x85",		"\x8C\x47" => "\xEB\x98\x86",		"\x8C\x48" => "\xEB\x98\x87",		"\x8C\x49" => "\xEB\x98\x88",		"\x8C\x4A" => "\xEB\x98\x89",		"\x8C\x4B" => "\xEB\x98\x8A",		"\x8C\x4C" => "\xEB\x98\x8B",		"\x8C\x4D" => "\xEB\x98\x8C",		"\x8C\x4E" => "\xEB\x98\x8D",		"\x8C\x4F" => "\xEB\x98\x8E",		"\x8C\x50" => "\xEB\x98\x8F",		"\x8C\x51" => "\xEB\x98\x92",		"\x8C\x52" => "\xEB\x98\x93",		"\x8C\x53" => "\xEB\x98\x95",		"\x8C\x54" => "\xEB\x98\x96",		"\x8C\x55" => "\xEB\x98\x97",		"\x8C\x56" => "\xEB\x98\x99",		"\x8C\x57" => "\xEB\x98\x9A",		"\x8C\x58" => "\xEB\x98\x9B",		"\x8C\x59" => "\xEB\x98\x9C",		"\x8C\x5A" => "\xEB\x98\x9D",		"\x8C\x61" => "\xEB\x98\x9E",		"\x8C\x62" => "\xEB\x98\x9F",		"\x8C\x63" => "\xEB\x98\xA0",		"\x8C\x64" => "\xEB\x98\xA1",		"\x8C\x65" => "\xEB\x98\xA2",		"\x8C\x66" => "\xEB\x98\xA3",		"\x8C\x67" => "\xEB\x98\xA4",		"\x8C\x68" => "\xEB\x98\xA6",		"\x8C\x69" => "\xEB\x98\xA7",		"\x8C\x6A" => "\xEB\x98\xA8",		"\x8C\x6B" => "\xEB\x98\xA9",		"\x8C\x6C" => "\xEB\x98\xAA",		"\x8C\x6D" => "\xEB\x98\xAB",		"\x8C\x6E" => "\xEB\x98\xAD",		"\x8C\x6F" => "\xEB\x98\xAE",		"\x8C\x70" => "\xEB\x98\xAF",		"\x8C\x71" => "\xEB\x98\xB0",		"\x8C\x72" => "\xEB\x98\xB1",		"\x8C\x73" => "\xEB\x98\xB2",		"\x8C\x74" => "\xEB\x98\xB3",		"\x8C\x75" => "\xEB\x98\xB5",		"\x8C\x76" => "\xEB\x98\xB6",		"\x8C\x77" => "\xEB\x98\xB7",		"\x8C\x78" => "\xEB\x98\xB8",		"\x8C\x79" => "\xEB\x98\xB9",		"\x8C\x7A" => "\xEB\x98\xBA",		"\x8C\x81" => "\xEB\x98\xBB",		"\x8C\x82" => "\xEB\x98\xBC",		"\x8C\x83" => "\xEB\x98\xBD",		"\x8C\x84" => "\xEB\x98\xBE",		"\x8C\x85" => "\xEB\x98\xBF",		"\x8C\x86" => "\xEB\x99\x80",		"\x8C\x87" => "\xEB\x99\x81",		"\x8C\x88" => "\xEB\x99\x82",		"\x8C\x89" => "\xEB\x99\x83",		"\x8C\x8A" => "\xEB\x99\x84",		"\x8C\x8B" => "\xEB\x99\x85",		"\x8C\x8C" => "\xEB\x99\x86",		"\x8C\x8D" => "\xEB\x99\x87",		"\x8C\x8E" => "\xEB\x99\x89",		"\x8C\x8F" => "\xEB\x99\x8A",		"\x8C\x90" => "\xEB\x99\x8B",		"\x8C\x91" => "\xEB\x99\x8C",		"\x8C\x92" => "\xEB\x99\x8D",		"\x8C\x93" => "\xEB\x99\x8E",		"\x8C\x94" => "\xEB\x99\x8F",		"\x8C\x95" => "\xEB\x99\x90",		"\x8C\x96" => "\xEB\x99\x91",		"\x8C\x97" => "\xEB\x99\x92",		"\x8C\x98" => "\xEB\x99\x93",		"\x8C\x99" => "\xEB\x99\x94",		"\x8C\x9A" => "\xEB\x99\x95",		"\x8C\x9B" => "\xEB\x99\x96",		"\x8C\x9C" => "\xEB\x99\x97",		"\x8C\x9D" => "\xEB\x99\x98",		"\x8C\x9E" => "\xEB\x99\x99",		"\x8C\x9F" => "\xEB\x99\x9A",		"\x8C\xA0" => "\xEB\x99\x9B",		"\x8C\xA1" => "\xEB\x99\x9C",		"\x8C\xA2" => "\xEB\x99\x9D",		"\x8C\xA3" => "\xEB\x99\x9E",		"\x8C\xA4" => "\xEB\x99\x9F",		"\x8C\xA5" => "\xEB\x99\xA0",		"\x8C\xA6" => "\xEB\x99\xA1",		"\x8C\xA7" => "\xEB\x99\xA2",		"\x8C\xA8" => "\xEB\x99\xA3",		"\x8C\xA9" => "\xEB\x99\xA5",		"\x8C\xAA" => "\xEB\x99\xA6",		"\x8C\xAB" => "\xEB\x99\xA7",		"\x8C\xAC" => "\xEB\x99\xA9",		"\x8C\xAD" => "\xEB\x99\xAA",		"\x8C\xAE" => "\xEB\x99\xAB",		"\x8C\xAF" => "\xEB\x99\xAC",		"\x8C\xB0" => "\xEB\x99\xAD",		"\x8C\xB1" => "\xEB\x99\xAE",		"\x8C\xB2" => "\xEB\x99\xAF",		"\x8C\xB3" => "\xEB\x99\xB0",		"\x8C\xB4" => "\xEB\x99\xB1",		"\x8C\xB5" => "\xEB\x99\xB2",		"\x8C\xB6" => "\xEB\x99\xB3",		"\x8C\xB7" => "\xEB\x99\xB4",		"\x8C\xB8" => "\xEB\x99\xB5",		"\x8C\xB9" => "\xEB\x99\xB6",		"\x8C\xBA" => "\xEB\x99\xB7",		"\x8C\xBB" => "\xEB\x99\xB8",		"\x8C\xBC" => "\xEB\x99\xB9",		"\x8C\xBD" => "\xEB\x99\xBA",		"\x8C\xBE" => "\xEB\x99\xBB",		"\x8C\xBF" => "\xEB\x99\xBC",		"\x8C\xC0" => "\xEB\x99\xBD",		"\x8C\xC1" => "\xEB\x99\xBE",		"\x8C\xC2" => "\xEB\x99\xBF",		"\x8C\xC3" => "\xEB\x9A\x80",		"\x8C\xC4" => "\xEB\x9A\x81",		"\x8C\xC5" => "\xEB\x9A\x82",		"\x8C\xC6" => "\xEB\x9A\x83",		"\x8C\xC7" => "\xEB\x9A\x84",		"\x8C\xC8" => "\xEB\x9A\x85",		"\x8C\xC9" => "\xEB\x9A\x86",		"\x8C\xCA" => "\xEB\x9A\x87",		"\x8C\xCB" => "\xEB\x9A\x88",		"\x8C\xCC" => "\xEB\x9A\x89",		"\x8C\xCD" => "\xEB\x9A\x8A",		"\x8C\xCE" => "\xEB\x9A\x8B",		"\x8C\xCF" => "\xEB\x9A\x8C",		"\x8C\xD0" => "\xEB\x9A\x8D",		"\x8C\xD1" => "\xEB\x9A\x8E",		"\x8C\xD2" => "\xEB\x9A\x8F",		"\x8C\xD3" => "\xEB\x9A\x90",		"\x8C\xD4" => "\xEB\x9A\x91",		"\x8C\xD5" => "\xEB\x9A\x92",		"\x8C\xD6" => "\xEB\x9A\x93",		"\x8C\xD7" => "\xEB\x9A\x94",		"\x8C\xD8" => "\xEB\x9A\x95",		"\x8C\xD9" => "\xEB\x9A\x96",		"\x8C\xDA" => "\xEB\x9A\x97",		"\x8C\xDB" => "\xEB\x9A\x98",		"\x8C\xDC" => "\xEB\x9A\x99",		"\x8C\xDD" => "\xEB\x9A\x9A",		"\x8C\xDE" => "\xEB\x9A\x9B",		"\x8C\xDF" => "\xEB\x9A\x9E",		"\x8C\xE0" => "\xEB\x9A\x9F",		"\x8C\xE1" => "\xEB\x9A\xA1",		"\x8C\xE2" => "\xEB\x9A\xA2",		"\x8C\xE3" => "\xEB\x9A\xA3",		"\x8C\xE4" => "\xEB\x9A\xA5",		"\x8C\xE5" => "\xEB\x9A\xA6",		"\x8C\xE6" => "\xEB\x9A\xA7",		"\x8C\xE7" => "\xEB\x9A\xA8",		"\x8C\xE8" => "\xEB\x9A\xA9",		"\x8C\xE9" => "\xEB\x9A\xAA",		"\x8C\xEA" => "\xEB\x9A\xAD",		"\x8C\xEB" => "\xEB\x9A\xAE",		"\x8C\xEC" => "\xEB\x9A\xAF",		"\x8C\xED" => "\xEB\x9A\xB0",		"\x8C\xEE" => "\xEB\x9A\xB2",		"\x8C\xEF" => "\xEB\x9A\xB3",		"\x8C\xF0" => "\xEB\x9A\xB4",		"\x8C\xF1" => "\xEB\x9A\xB5",		"\x8C\xF2" => "\xEB\x9A\xB6",		"\x8C\xF3" => "\xEB\x9A\xB7",		"\x8C\xF4" => "\xEB\x9A\xB8",		"\x8C\xF5" => "\xEB\x9A\xB9",		"\x8C\xF6" => "\xEB\x9A\xBA",		"\x8C\xF7" => "\xEB\x9A\xBB",		"\x8C\xF8" => "\xEB\x9A\xBC",		"\x8C\xF9" => "\xEB\x9A\xBD",		"\x8C\xFA" => "\xEB\x9A\xBE",		"\x8C\xFB" => "\xEB\x9A\xBF",		"\x8C\xFC" => "\xEB\x9B\x80",		"\x8C\xFD" => "\xEB\x9B\x81",		"\x8C\xFE" => "\xEB\x9B\x82",		"\x8D\x41" => "\xEB\x9B\x83",		"\x8D\x42" => "\xEB\x9B\x84",		"\x8D\x43" => "\xEB\x9B\x85",		"\x8D\x44" => "\xEB\x9B\x86",		"\x8D\x45" => "\xEB\x9B\x87",		"\x8D\x46" => "\xEB\x9B\x88",		"\x8D\x47" => "\xEB\x9B\x89",		"\x8D\x48" => "\xEB\x9B\x8A",		"\x8D\x49" => "\xEB\x9B\x8B",		"\x8D\x4A" => "\xEB\x9B\x8C",		"\x8D\x4B" => "\xEB\x9B\x8D",		"\x8D\x4C" => "\xEB\x9B\x8E",		"\x8D\x4D" => "\xEB\x9B\x8F",		"\x8D\x4E" => "\xEB\x9B\x90",		"\x8D\x4F" => "\xEB\x9B\x91",		"\x8D\x50" => "\xEB\x9B\x92",		"\x8D\x51" => "\xEB\x9B\x93",		"\x8D\x52" => "\xEB\x9B\x95",		"\x8D\x53" => "\xEB\x9B\x96",		"\x8D\x54" => "\xEB\x9B\x97",		"\x8D\x55" => "\xEB\x9B\x98",		"\x8D\x56" => "\xEB\x9B\x99",		"\x8D\x57" => "\xEB\x9B\x9A",		"\x8D\x58" => "\xEB\x9B\x9B",		"\x8D\x59" => "\xEB\x9B\x9C",		"\x8D\x5A" => "\xEB\x9B\x9D",		"\x8D\x61" => "\xEB\x9B\x9E",		"\x8D\x62" => "\xEB\x9B\x9F",		"\x8D\x63" => "\xEB\x9B\xA0",		"\x8D\x64" => "\xEB\x9B\xA1",		"\x8D\x65" => "\xEB\x9B\xA2",		"\x8D\x66" => "\xEB\x9B\xA3",		"\x8D\x67" => "\xEB\x9B\xA4",		"\x8D\x68" => "\xEB\x9B\xA5",		"\x8D\x69" => "\xEB\x9B\xA6",		"\x8D\x6A" => "\xEB\x9B\xA7",		"\x8D\x6B" => "\xEB\x9B\xA8",		"\x8D\x6C" => "\xEB\x9B\xA9",		"\x8D\x6D" => "\xEB\x9B\xAA",		"\x8D\x6E" => "\xEB\x9B\xAB",		"\x8D\x6F" => "\xEB\x9B\xAC",		"\x8D\x70" => "\xEB\x9B\xAD",		"\x8D\x71" => "\xEB\x9B\xAE",		"\x8D\x72" => "\xEB\x9B\xAF",		"\x8D\x73" => "\xEB\x9B\xB1",		"\x8D\x74" => "\xEB\x9B\xB2",		"\x8D\x75" => "\xEB\x9B\xB3",		"\x8D\x76" => "\xEB\x9B\xB5",		"\x8D\x77" => "\xEB\x9B\xB6",		"\x8D\x78" => "\xEB\x9B\xB7",		"\x8D\x79" => "\xEB\x9B\xB9",		"\x8D\x7A" => "\xEB\x9B\xBA",		"\x8D\x81" => "\xEB\x9B\xBB",		"\x8D\x82" => "\xEB\x9B\xBC",		"\x8D\x83" => "\xEB\x9B\xBD",		"\x8D\x84" => "\xEB\x9B\xBE",		"\x8D\x85" => "\xEB\x9B\xBF",		"\x8D\x86" => "\xEB\x9C\x82",		"\x8D\x87" => "\xEB\x9C\x83",		"\x8D\x88" => "\xEB\x9C\x84",		"\x8D\x89" => "\xEB\x9C\x86",		"\x8D\x8A" => "\xEB\x9C\x87",		"\x8D\x8B" => "\xEB\x9C\x88",		"\x8D\x8C" => "\xEB\x9C\x89",		"\x8D\x8D" => "\xEB\x9C\x8A",		"\x8D\x8E" => "\xEB\x9C\x8B",		"\x8D\x8F" => "\xEB\x9C\x8C",		"\x8D\x90" => "\xEB\x9C\x8D",		"\x8D\x91" => "\xEB\x9C\x8E",		"\x8D\x92" => "\xEB\x9C\x8F",		"\x8D\x93" => "\xEB\x9C\x90",		"\x8D\x94" => "\xEB\x9C\x91",		"\x8D\x95" => "\xEB\x9C\x92",		"\x8D\x96" => "\xEB\x9C\x93",		"\x8D\x97" => "\xEB\x9C\x94",		"\x8D\x98" => "\xEB\x9C\x95",		"\x8D\x99" => "\xEB\x9C\x96",		"\x8D\x9A" => "\xEB\x9C\x97",		"\x8D\x9B" => "\xEB\x9C\x98",		"\x8D\x9C" => "\xEB\x9C\x99",		"\x8D\x9D" => "\xEB\x9C\x9A",		"\x8D\x9E" => "\xEB\x9C\x9B",		"\x8D\x9F" => "\xEB\x9C\x9C",		"\x8D\xA0" => "\xEB\x9C\x9D",		"\x8D\xA1" => "\xEB\x9C\x9E",		"\x8D\xA2" => "\xEB\x9C\x9F",		"\x8D\xA3" => "\xEB\x9C\xA0",		"\x8D\xA4" => "\xEB\x9C\xA1",		"\x8D\xA5" => "\xEB\x9C\xA2",		"\x8D\xA6" => "\xEB\x9C\xA3",		"\x8D\xA7" => "\xEB\x9C\xA4",		"\x8D\xA8" => "\xEB\x9C\xA5",		"\x8D\xA9" => "\xEB\x9C\xA6",		"\x8D\xAA" => "\xEB\x9C\xA7",		"\x8D\xAB" => "\xEB\x9C\xAA",		"\x8D\xAC" => "\xEB\x9C\xAB",		"\x8D\xAD" => "\xEB\x9C\xAD",		"\x8D\xAE" => "\xEB\x9C\xAE",		"\x8D\xAF" => "\xEB\x9C\xB1",		"\x8D\xB0" => "\xEB\x9C\xB2",		"\x8D\xB1" => "\xEB\x9C\xB3",		"\x8D\xB2" => "\xEB\x9C\xB4",		"\x8D\xB3" => "\xEB\x9C\xB5",		"\x8D\xB4" => "\xEB\x9C\xB6",		"\x8D\xB5" => "\xEB\x9C\xB7",		"\x8D\xB6" => "\xEB\x9C\xBA",		"\x8D\xB7" => "\xEB\x9C\xBC",		"\x8D\xB8" => "\xEB\x9C\xBD",		"\x8D\xB9" => "\xEB\x9C\xBE",		"\x8D\xBA" => "\xEB\x9C\xBF",		"\x8D\xBB" => "\xEB\x9D\x80",		"\x8D\xBC" => "\xEB\x9D\x81",		"\x8D\xBD" => "\xEB\x9D\x82",		"\x8D\xBE" => "\xEB\x9D\x83",		"\x8D\xBF" => "\xEB\x9D\x85",		"\x8D\xC0" => "\xEB\x9D\x86",		"\x8D\xC1" => "\xEB\x9D\x87",		"\x8D\xC2" => "\xEB\x9D\x89",		"\x8D\xC3" => "\xEB\x9D\x8A",		"\x8D\xC4" => "\xEB\x9D\x8B",		"\x8D\xC5" => "\xEB\x9D\x8D",		"\x8D\xC6" => "\xEB\x9D\x8E",		"\x8D\xC7" => "\xEB\x9D\x8F",		"\x8D\xC8" => "\xEB\x9D\x90",		"\x8D\xC9" => "\xEB\x9D\x91",		"\x8D\xCA" => "\xEB\x9D\x92",		"\x8D\xCB" => "\xEB\x9D\x93",		"\x8D\xCC" => "\xEB\x9D\x96",		"\x8D\xCD" => "\xEB\x9D\x97",		"\x8D\xCE" => "\xEB\x9D\x98",		"\x8D\xCF" => "\xEB\x9D\x99",		"\x8D\xD0" => "\xEB\x9D\x9A",		"\x8D\xD1" => "\xEB\x9D\x9B",		"\x8D\xD2" => "\xEB\x9D\x9C",		"\x8D\xD3" => "\xEB\x9D\x9D",		"\x8D\xD4" => "\xEB\x9D\x9E",		"\x8D\xD5" => "\xEB\x9D\x9F",		"\x8D\xD6" => "\xEB\x9D\xA1",		"\x8D\xD7" => "\xEB\x9D\xA2",		"\x8D\xD8" => "\xEB\x9D\xA3",		"\x8D\xD9" => "\xEB\x9D\xA5",		"\x8D\xDA" => "\xEB\x9D\xA6",		"\x8D\xDB" => "\xEB\x9D\xA7",		"\x8D\xDC" => "\xEB\x9D\xA9",		"\x8D\xDD" => "\xEB\x9D\xAA",		"\x8D\xDE" => "\xEB\x9D\xAB",		"\x8D\xDF" => "\xEB\x9D\xAC",		"\x8D\xE0" => "\xEB\x9D\xAD",		"\x8D\xE1" => "\xEB\x9D\xAE",		"\x8D\xE2" => "\xEB\x9D\xAF",		"\x8D\xE3" => "\xEB\x9D\xB2",		"\x8D\xE4" => "\xEB\x9D\xB4",		"\x8D\xE5" => "\xEB\x9D\xB6",		"\x8D\xE6" => "\xEB\x9D\xB7",		"\x8D\xE7" => "\xEB\x9D\xB8",		"\x8D\xE8" => "\xEB\x9D\xB9",		"\x8D\xE9" => "\xEB\x9D\xBA",		"\x8D\xEA" => "\xEB\x9D\xBB",		"\x8D\xEB" => "\xEB\x9D\xBE",		"\x8D\xEC" => "\xEB\x9D\xBF",		"\x8D\xED" => "\xEB\x9E\x81",		"\x8D\xEE" => "\xEB\x9E\x82",		"\x8D\xEF" => "\xEB\x9E\x83",		"\x8D\xF0" => "\xEB\x9E\x85",		"\x8D\xF1" => "\xEB\x9E\x86",		"\x8D\xF2" => "\xEB\x9E\x87",		"\x8D\xF3" => "\xEB\x9E\x88",		"\x8D\xF4" => "\xEB\x9E\x89",		"\x8D\xF5" => "\xEB\x9E\x8A",		"\x8D\xF6" => "\xEB\x9E\x8B",		"\x8D\xF7" => "\xEB\x9E\x8E",		"\x8D\xF8" => "\xEB\x9E\x93",		"\x8D\xF9" => "\xEB\x9E\x94",		"\x8D\xFA" => "\xEB\x9E\x95",		"\x8D\xFB" => "\xEB\x9E\x9A",		"\x8D\xFC" => "\xEB\x9E\x9B",		"\x8D\xFD" => "\xEB\x9E\x9D",		"\x8D\xFE" => "\xEB\x9E\x9E",		"\x8E\x41" => "\xEB\x9E\x9F",		"\x8E\x42" => "\xEB\x9E\xA1",		"\x8E\x43" => "\xEB\x9E\xA2",		"\x8E\x44" => "\xEB\x9E\xA3",		"\x8E\x45" => "\xEB\x9E\xA4",		"\x8E\x46" => "\xEB\x9E\xA5",		"\x8E\x47" => "\xEB\x9E\xA6",		"\x8E\x48" => "\xEB\x9E\xA7",		"\x8E\x49" => "\xEB\x9E\xAA",		"\x8E\x4A" => "\xEB\x9E\xAE",		"\x8E\x4B" => "\xEB\x9E\xAF",		"\x8E\x4C" => "\xEB\x9E\xB0",		"\x8E\x4D" => "\xEB\x9E\xB1",		"\x8E\x4E" => "\xEB\x9E\xB2",		"\x8E\x4F" => "\xEB\x9E\xB3",		"\x8E\x50" => "\xEB\x9E\xB6",		"\x8E\x51" => "\xEB\x9E\xB7",		"\x8E\x52" => "\xEB\x9E\xB9",		"\x8E\x53" => "\xEB\x9E\xBA",		"\x8E\x54" => "\xEB\x9E\xBB",		"\x8E\x55" => "\xEB\x9E\xBC",		"\x8E\x56" => "\xEB\x9E\xBD",		"\x8E\x57" => "\xEB\x9E\xBE",		"\x8E\x58" => "\xEB\x9E\xBF",		"\x8E\x59" => "\xEB\x9F\x80",		"\x8E\x5A" => "\xEB\x9F\x81",		"\x8E\x61" => "\xEB\x9F\x82",		"\x8E\x62" => "\xEB\x9F\x83",		"\x8E\x63" => "\xEB\x9F\x84",		"\x8E\x64" => "\xEB\x9F\x85",		"\x8E\x65" => "\xEB\x9F\x86",		"\x8E\x66" => "\xEB\x9F\x88",		"\x8E\x67" => "\xEB\x9F\x8A",		"\x8E\x68" => "\xEB\x9F\x8B",		"\x8E\x69" => "\xEB\x9F\x8C",		"\x8E\x6A" => "\xEB\x9F\x8D",		"\x8E\x6B" => "\xEB\x9F\x8E",		"\x8E\x6C" => "\xEB\x9F\x8F",		"\x8E\x6D" => "\xEB\x9F\x90",		"\x8E\x6E" => "\xEB\x9F\x91",		"\x8E\x6F" => "\xEB\x9F\x92",		"\x8E\x70" => "\xEB\x9F\x93",		"\x8E\x71" => "\xEB\x9F\x94",		"\x8E\x72" => "\xEB\x9F\x95",		"\x8E\x73" => "\xEB\x9F\x96",		"\x8E\x74" => "\xEB\x9F\x97",		"\x8E\x75" => "\xEB\x9F\x98",		"\x8E\x76" => "\xEB\x9F\x99",		"\x8E\x77" => "\xEB\x9F\x9A",		"\x8E\x78" => "\xEB\x9F\x9B",		"\x8E\x79" => "\xEB\x9F\x9C",		"\x8E\x7A" => "\xEB\x9F\x9D",		"\x8E\x81" => "\xEB\x9F\x9E",		"\x8E\x82" => "\xEB\x9F\x9F",		"\x8E\x83" => "\xEB\x9F\xA0",		"\x8E\x84" => "\xEB\x9F\xA1",		"\x8E\x85" => "\xEB\x9F\xA2",		"\x8E\x86" => "\xEB\x9F\xA3",		"\x8E\x87" => "\xEB\x9F\xA4",		"\x8E\x88" => "\xEB\x9F\xA5",		"\x8E\x89" => "\xEB\x9F\xA6",		"\x8E\x8A" => "\xEB\x9F\xA7",		"\x8E\x8B" => "\xEB\x9F\xA8",		"\x8E\x8C" => "\xEB\x9F\xA9",		"\x8E\x8D" => "\xEB\x9F\xAA",		"\x8E\x8E" => "\xEB\x9F\xAB",		"\x8E\x8F" => "\xEB\x9F\xAE",		"\x8E\x90" => "\xEB\x9F\xAF",		"\x8E\x91" => "\xEB\x9F\xB1",		"\x8E\x92" => "\xEB\x9F\xB2",		"\x8E\x93" => "\xEB\x9F\xB3",		"\x8E\x94" => "\xEB\x9F\xB5",		"\x8E\x95" => "\xEB\x9F\xB6",		"\x8E\x96" => "\xEB\x9F\xB7",		"\x8E\x97" => "\xEB\x9F\xB8",		"\x8E\x98" => "\xEB\x9F\xB9",		"\x8E\x99" => "\xEB\x9F\xBA",		"\x8E\x9A" => "\xEB\x9F\xBB",		"\x8E\x9B" => "\xEB\x9F\xBE",		"\x8E\x9C" => "\xEB\xA0\x82",		"\x8E\x9D" => "\xEB\xA0\x83",		"\x8E\x9E" => "\xEB\xA0\x84",		"\x8E\x9F" => "\xEB\xA0\x85",		"\x8E\xA0" => "\xEB\xA0\x86",		"\x8E\xA1" => "\xEB\xA0\x8A",		"\x8E\xA2" => "\xEB\xA0\x8B",		"\x8E\xA3" => "\xEB\xA0\x8D",		"\x8E\xA4" => "\xEB\xA0\x8E",		"\x8E\xA5" => "\xEB\xA0\x8F",		"\x8E\xA6" => "\xEB\xA0\x91",		"\x8E\xA7" => "\xEB\xA0\x92",		"\x8E\xA8" => "\xEB\xA0\x93",		"\x8E\xA9" => "\xEB\xA0\x94",		"\x8E\xAA" => "\xEB\xA0\x95",		"\x8E\xAB" => "\xEB\xA0\x96",		"\x8E\xAC" => "\xEB\xA0\x97",		"\x8E\xAD" => "\xEB\xA0\x9A",		"\x8E\xAE" => "\xEB\xA0\x9C",		"\x8E\xAF" => "\xEB\xA0\x9E",		"\x8E\xB0" => "\xEB\xA0\x9F",		"\x8E\xB1" => "\xEB\xA0\xA0",		"\x8E\xB2" => "\xEB\xA0\xA1",		"\x8E\xB3" => "\xEB\xA0\xA2",		"\x8E\xB4" => "\xEB\xA0\xA3",		"\x8E\xB5" => "\xEB\xA0\xA6",		"\x8E\xB6" => "\xEB\xA0\xA7",		"\x8E\xB7" => "\xEB\xA0\xA9",		"\x8E\xB8" => "\xEB\xA0\xAA",		"\x8E\xB9" => "\xEB\xA0\xAB",		"\x8E\xBA" => "\xEB\xA0\xAD",		"\x8E\xBB" => "\xEB\xA0\xAE",		"\x8E\xBC" => "\xEB\xA0\xAF",		"\x8E\xBD" => "\xEB\xA0\xB0",		"\x8E\xBE" => "\xEB\xA0\xB1",		"\x8E\xBF" => "\xEB\xA0\xB2",		"\x8E\xC0" => "\xEB\xA0\xB3",		"\x8E\xC1" => "\xEB\xA0\xB6",		"\x8E\xC2" => "\xEB\xA0\xBA",		"\x8E\xC3" => "\xEB\xA0\xBB",		"\x8E\xC4" => "\xEB\xA0\xBC",		"\x8E\xC5" => "\xEB\xA0\xBD",		"\x8E\xC6" => "\xEB\xA0\xBE",		"\x8E\xC7" => "\xEB\xA0\xBF",		"\x8E\xC8" => "\xEB\xA1\x81",		"\x8E\xC9" => "\xEB\xA1\x82",		"\x8E\xCA" => "\xEB\xA1\x83",		"\x8E\xCB" => "\xEB\xA1\x85",		"\x8E\xCC" => "\xEB\xA1\x86",		"\x8E\xCD" => "\xEB\xA1\x87",		"\x8E\xCE" => "\xEB\xA1\x88",		"\x8E\xCF" => "\xEB\xA1\x89",		"\x8E\xD0" => "\xEB\xA1\x8A",		"\x8E\xD1" => "\xEB\xA1\x8B",		"\x8E\xD2" => "\xEB\xA1\x8C",		"\x8E\xD3" => "\xEB\xA1\x8D",		"\x8E\xD4" => "\xEB\xA1\x8E",		"\x8E\xD5" => "\xEB\xA1\x8F",		"\x8E\xD6" => "\xEB\xA1\x90",		"\x8E\xD7" => "\xEB\xA1\x92",		"\x8E\xD8" => "\xEB\xA1\x94",		"\x8E\xD9" => "\xEB\xA1\x95",		"\x8E\xDA" => "\xEB\xA1\x96",		"\x8E\xDB" => "\xEB\xA1\x97",		"\x8E\xDC" => "\xEB\xA1\x98",		"\x8E\xDD" => "\xEB\xA1\x99",		"\x8E\xDE" => "\xEB\xA1\x9A",		"\x8E\xDF" => "\xEB\xA1\x9B",		"\x8E\xE0" => "\xEB\xA1\x9E",		"\x8E\xE1" => "\xEB\xA1\x9F",		"\x8E\xE2" => "\xEB\xA1\xA1",		"\x8E\xE3" => "\xEB\xA1\xA2",		"\x8E\xE4" => "\xEB\xA1\xA3",		"\x8E\xE5" => "\xEB\xA1\xA5",		"\x8E\xE6" => "\xEB\xA1\xA6",		"\x8E\xE7" => "\xEB\xA1\xA7",		"\x8E\xE8" => "\xEB\xA1\xA8",		"\x8E\xE9" => "\xEB\xA1\xA9",		"\x8E\xEA" => "\xEB\xA1\xAA",		"\x8E\xEB" => "\xEB\xA1\xAB",		"\x8E\xEC" => "\xEB\xA1\xAE",		"\x8E\xED" => "\xEB\xA1\xB0",		"\x8E\xEE" => "\xEB\xA1\xB2",		"\x8E\xEF" => "\xEB\xA1\xB3",		"\x8E\xF0" => "\xEB\xA1\xB4",		"\x8E\xF1" => "\xEB\xA1\xB5",		"\x8E\xF2" => "\xEB\xA1\xB6",		"\x8E\xF3" => "\xEB\xA1\xB7",		"\x8E\xF4" => "\xEB\xA1\xB9",		"\x8E\xF5" => "\xEB\xA1\xBA",		"\x8E\xF6" => "\xEB\xA1\xBB",		"\x8E\xF7" => "\xEB\xA1\xBD",		"\x8E\xF8" => "\xEB\xA1\xBE",		"\x8E\xF9" => "\xEB\xA1\xBF",		"\x8E\xFA" => "\xEB\xA2\x80",		"\x8E\xFB" => "\xEB\xA2\x81",		"\x8E\xFC" => "\xEB\xA2\x82",		"\x8E\xFD" => "\xEB\xA2\x83",		"\x8E\xFE" => "\xEB\xA2\x84",		"\x8F\x41" => "\xEB\xA2\x85",		"\x8F\x42" => "\xEB\xA2\x86",		"\x8F\x43" => "\xEB\xA2\x87",		"\x8F\x44" => "\xEB\xA2\x88",		"\x8F\x45" => "\xEB\xA2\x89",		"\x8F\x46" => "\xEB\xA2\x8A",		"\x8F\x47" => "\xEB\xA2\x8B",		"\x8F\x48" => "\xEB\xA2\x8C",		"\x8F\x49" => "\xEB\xA2\x8E",		"\x8F\x4A" => "\xEB\xA2\x8F",		"\x8F\x4B" => "\xEB\xA2\x90",		"\x8F\x4C" => "\xEB\xA2\x91",		"\x8F\x4D" => "\xEB\xA2\x92",		"\x8F\x4E" => "\xEB\xA2\x93",		"\x8F\x4F" => "\xEB\xA2\x94",		"\x8F\x50" => "\xEB\xA2\x95",		"\x8F\x51" => "\xEB\xA2\x96",		"\x8F\x52" => "\xEB\xA2\x97",		"\x8F\x53" => "\xEB\xA2\x98",		"\x8F\x54" => "\xEB\xA2\x99",		"\x8F\x55" => "\xEB\xA2\x9A",		"\x8F\x56" => "\xEB\xA2\x9B",		"\x8F\x57" => "\xEB\xA2\x9C",		"\x8F\x58" => "\xEB\xA2\x9D",		"\x8F\x59" => "\xEB\xA2\x9E",		"\x8F\x5A" => "\xEB\xA2\x9F",		"\x8F\x61" => "\xEB\xA2\xA0",		"\x8F\x62" => "\xEB\xA2\xA1",		"\x8F\x63" => "\xEB\xA2\xA2",		"\x8F\x64" => "\xEB\xA2\xA3",		"\x8F\x65" => "\xEB\xA2\xA4",		"\x8F\x66" => "\xEB\xA2\xA5",		"\x8F\x67" => "\xEB\xA2\xA6",		"\x8F\x68" => "\xEB\xA2\xA7",		"\x8F\x69" => "\xEB\xA2\xA9",		"\x8F\x6A" => "\xEB\xA2\xAA",		"\x8F\x6B" => "\xEB\xA2\xAB",		"\x8F\x6C" => "\xEB\xA2\xAC",		"\x8F\x6D" => "\xEB\xA2\xAD",		"\x8F\x6E" => "\xEB\xA2\xAE",		"\x8F\x6F" => "\xEB\xA2\xAF",		"\x8F\x70" => "\xEB\xA2\xB1",		"\x8F\x71" => "\xEB\xA2\xB2",		"\x8F\x72" => "\xEB\xA2\xB3",		"\x8F\x73" => "\xEB\xA2\xB5",		"\x8F\x74" => "\xEB\xA2\xB6",		"\x8F\x75" => "\xEB\xA2\xB7",		"\x8F\x76" => "\xEB\xA2\xB9",		"\x8F\x77" => "\xEB\xA2\xBA",		"\x8F\x78" => "\xEB\xA2\xBB",		"\x8F\x79" => "\xEB\xA2\xBC",		"\x8F\x7A" => "\xEB\xA2\xBD",		"\x8F\x81" => "\xEB\xA2\xBE",		"\x8F\x82" => "\xEB\xA2\xBF",		"\x8F\x83" => "\xEB\xA3\x82",		"\x8F\x84" => "\xEB\xA3\x84",		"\x8F\x85" => "\xEB\xA3\x86",		"\x8F\x86" => "\xEB\xA3\x87",		"\x8F\x87" => "\xEB\xA3\x88",		"\x8F\x88" => "\xEB\xA3\x89",		"\x8F\x89" => "\xEB\xA3\x8A",		"\x8F\x8A" => "\xEB\xA3\x8B",		"\x8F\x8B" => "\xEB\xA3\x8D",		"\x8F\x8C" => "\xEB\xA3\x8E",		"\x8F\x8D" => "\xEB\xA3\x8F",		"\x8F\x8E" => "\xEB\xA3\x91",		"\x8F\x8F" => "\xEB\xA3\x92",		"\x8F\x90" => "\xEB\xA3\x93",		"\x8F\x91" => "\xEB\xA3\x95",		"\x8F\x92" => "\xEB\xA3\x96",		"\x8F\x93" => "\xEB\xA3\x97",		"\x8F\x94" => "\xEB\xA3\x98",		"\x8F\x95" => "\xEB\xA3\x99",		"\x8F\x96" => "\xEB\xA3\x9A",		"\x8F\x97" => "\xEB\xA3\x9B",		"\x8F\x98" => "\xEB\xA3\x9C",		"\x8F\x99" => "\xEB\xA3\x9E",		"\x8F\x9A" => "\xEB\xA3\xA0",		"\x8F\x9B" => "\xEB\xA3\xA2",		"\x8F\x9C" => "\xEB\xA3\xA3",		"\x8F\x9D" => "\xEB\xA3\xA4",		"\x8F\x9E" => "\xEB\xA3\xA5",		"\x8F\x9F" => "\xEB\xA3\xA6",		"\x8F\xA0" => "\xEB\xA3\xA7",		"\x8F\xA1" => "\xEB\xA3\xAA",		"\x8F\xA2" => "\xEB\xA3\xAB",		"\x8F\xA3" => "\xEB\xA3\xAD",		"\x8F\xA4" => "\xEB\xA3\xAE",		"\x8F\xA5" => "\xEB\xA3\xAF",		"\x8F\xA6" => "\xEB\xA3\xB1",		"\x8F\xA7" => "\xEB\xA3\xB2",		"\x8F\xA8" => "\xEB\xA3\xB3",		"\x8F\xA9" => "\xEB\xA3\xB4",		"\x8F\xAA" => "\xEB\xA3\xB5",		"\x8F\xAB" => "\xEB\xA3\xB6",		"\x8F\xAC" => "\xEB\xA3\xB7",		"\x8F\xAD" => "\xEB\xA3\xBA",		"\x8F\xAE" => "\xEB\xA3\xBC",		"\x8F\xAF" => "\xEB\xA3\xBE",		"\x8F\xB0" => "\xEB\xA3\xBF",		"\x8F\xB1" => "\xEB\xA4\x80",		"\x8F\xB2" => "\xEB\xA4\x81",		"\x8F\xB3" => "\xEB\xA4\x82",		"\x8F\xB4" => "\xEB\xA4\x83",		"\x8F\xB5" => "\xEB\xA4\x85",		"\x8F\xB6" => "\xEB\xA4\x86",		"\x8F\xB7" => "\xEB\xA4\x87",		"\x8F\xB8" => "\xEB\xA4\x88",		"\x8F\xB9" => "\xEB\xA4\x89",		"\x8F\xBA" => "\xEB\xA4\x8A",		"\x8F\xBB" => "\xEB\xA4\x8B",		"\x8F\xBC" => "\xEB\xA4\x8C",		"\x8F\xBD" => "\xEB\xA4\x8D",		"\x8F\xBE" => "\xEB\xA4\x8E",		"\x8F\xBF" => "\xEB\xA4\x8F",		"\x8F\xC0" => "\xEB\xA4\x90",		"\x8F\xC1" => "\xEB\xA4\x91",		"\x8F\xC2" => "\xEB\xA4\x92",		"\x8F\xC3" => "\xEB\xA4\x93",		"\x8F\xC4" => "\xEB\xA4\x94",		"\x8F\xC5" => "\xEB\xA4\x95",		"\x8F\xC6" => "\xEB\xA4\x96",		"\x8F\xC7" => "\xEB\xA4\x97",		"\x8F\xC8" => "\xEB\xA4\x99",		"\x8F\xC9" => "\xEB\xA4\x9A",		"\x8F\xCA" => "\xEB\xA4\x9B",		"\x8F\xCB" => "\xEB\xA4\x9C",		"\x8F\xCC" => "\xEB\xA4\x9D",		"\x8F\xCD" => "\xEB\xA4\x9E",		"\x8F\xCE" => "\xEB\xA4\x9F",		"\x8F\xCF" => "\xEB\xA4\xA1",		"\x8F\xD0" => "\xEB\xA4\xA2",		"\x8F\xD1" => "\xEB\xA4\xA3",		"\x8F\xD2" => "\xEB\xA4\xA4",		"\x8F\xD3" => "\xEB\xA4\xA5",		"\x8F\xD4" => "\xEB\xA4\xA6",		"\x8F\xD5" => "\xEB\xA4\xA7",		"\x8F\xD6" => "\xEB\xA4\xA8",		"\x8F\xD7" => "\xEB\xA4\xA9",		"\x8F\xD8" => "\xEB\xA4\xAA",		"\x8F\xD9" => "\xEB\xA4\xAB",		"\x8F\xDA" => "\xEB\xA4\xAC",		"\x8F\xDB" => "\xEB\xA4\xAD",		"\x8F\xDC" => "\xEB\xA4\xAE",		"\x8F\xDD" => "\xEB\xA4\xAF",		"\x8F\xDE" => "\xEB\xA4\xB0",		"\x8F\xDF" => "\xEB\xA4\xB1",		"\x8F\xE0" => "\xEB\xA4\xB2",		"\x8F\xE1" => "\xEB\xA4\xB3",		"\x8F\xE2" => "\xEB\xA4\xB4",		"\x8F\xE3" => "\xEB\xA4\xB5",		"\x8F\xE4" => "\xEB\xA4\xB6",		"\x8F\xE5" => "\xEB\xA4\xB7",		"\x8F\xE6" => "\xEB\xA4\xB8",		"\x8F\xE7" => "\xEB\xA4\xB9",		"\x8F\xE8" => "\xEB\xA4\xBA",		"\x8F\xE9" => "\xEB\xA4\xBB",		"\x8F\xEA" => "\xEB\xA4\xBE",		"\x8F\xEB" => "\xEB\xA4\xBF",		"\x8F\xEC" => "\xEB\xA5\x81",		"\x8F\xED" => "\xEB\xA5\x82",		"\x8F\xEE" => "\xEB\xA5\x83",		"\x8F\xEF" => "\xEB\xA5\x85",		"\x8F\xF0" => "\xEB\xA5\x86",		"\x8F\xF1" => "\xEB\xA5\x87",		"\x8F\xF2" => "\xEB\xA5\x88",		"\x8F\xF3" => "\xEB\xA5\x89",		"\x8F\xF4" => "\xEB\xA5\x8A",		"\x8F\xF5" => "\xEB\xA5\x8B",		"\x8F\xF6" => "\xEB\xA5\x8D",		"\x8F\xF7" => "\xEB\xA5\x8E",		"\x8F\xF8" => "\xEB\xA5\x90",		"\x8F\xF9" => "\xEB\xA5\x92",		"\x8F\xFA" => "\xEB\xA5\x93",		"\x8F\xFB" => "\xEB\xA5\x94",		"\x8F\xFC" => "\xEB\xA5\x95",		"\x8F\xFD" => "\xEB\xA5\x96",		"\x8F\xFE" => "\xEB\xA5\x97",		"\x90\x41" => "\xEB\xA5\x9A",		"\x90\x42" => "\xEB\xA5\x9B",		"\x90\x43" => "\xEB\xA5\x9D",		"\x90\x44" => "\xEB\xA5\x9E",		"\x90\x45" => "\xEB\xA5\x9F",		"\x90\x46" => "\xEB\xA5\xA1",		"\x90\x47" => "\xEB\xA5\xA2",		"\x90\x48" => "\xEB\xA5\xA3",		"\x90\x49" => "\xEB\xA5\xA4",		"\x90\x4A" => "\xEB\xA5\xA5",		"\x90\x4B" => "\xEB\xA5\xA6",		"\x90\x4C" => "\xEB\xA5\xA7",		"\x90\x4D" => "\xEB\xA5\xAA",		"\x90\x4E" => "\xEB\xA5\xAC",		"\x90\x4F" => "\xEB\xA5\xAE",		"\x90\x50" => "\xEB\xA5\xAF",		"\x90\x51" => "\xEB\xA5\xB0",		"\x90\x52" => "\xEB\xA5\xB1",		"\x90\x53" => "\xEB\xA5\xB2",		"\x90\x54" => "\xEB\xA5\xB3",		"\x90\x55" => "\xEB\xA5\xB6",		"\x90\x56" => "\xEB\xA5\xB7",		"\x90\x57" => "\xEB\xA5\xB9",		"\x90\x58" => "\xEB\xA5\xBA",		"\x90\x59" => "\xEB\xA5\xBB",		"\x90\x5A" => "\xEB\xA5\xBD",		"\x90\x61" => "\xEB\xA5\xBE",		"\x90\x62" => "\xEB\xA5\xBF",		"\x90\x63" => "\xEB\xA6\x80",		"\x90\x64" => "\xEB\xA6\x81",		"\x90\x65" => "\xEB\xA6\x82",		"\x90\x66" => "\xEB\xA6\x83",		"\x90\x67" => "\xEB\xA6\x86",		"\x90\x68" => "\xEB\xA6\x88",		"\x90\x69" => "\xEB\xA6\x8B",		"\x90\x6A" => "\xEB\xA6\x8C",		"\x90\x6B" => "\xEB\xA6\x8F",		"\x90\x6C" => "\xEB\xA6\x90",		"\x90\x6D" => "\xEB\xA6\x91",		"\x90\x6E" => "\xEB\xA6\x92",		"\x90\x6F" => "\xEB\xA6\x93",		"\x90\x70" => "\xEB\xA6\x94",		"\x90\x71" => "\xEB\xA6\x95",		"\x90\x72" => "\xEB\xA6\x96",		"\x90\x73" => "\xEB\xA6\x97",		"\x90\x74" => "\xEB\xA6\x98",		"\x90\x75" => "\xEB\xA6\x99",		"\x90\x76" => "\xEB\xA6\x9A",		"\x90\x77" => "\xEB\xA6\x9B",		"\x90\x78" => "\xEB\xA6\x9C",		"\x90\x79" => "\xEB\xA6\x9D",		"\x90\x7A" => "\xEB\xA6\x9E",		"\x90\x81" => "\xEB\xA6\x9F",		"\x90\x82" => "\xEB\xA6\xA0",		"\x90\x83" => "\xEB\xA6\xA1",		"\x90\x84" => "\xEB\xA6\xA2",		"\x90\x85" => "\xEB\xA6\xA3",		"\x90\x86" => "\xEB\xA6\xA4",		"\x90\x87" => "\xEB\xA6\xA5",		"\x90\x88" => "\xEB\xA6\xA6",		"\x90\x89" => "\xEB\xA6\xA7",		"\x90\x8A" => "\xEB\xA6\xA8",		"\x90\x8B" => "\xEB\xA6\xA9",		"\x90\x8C" => "\xEB\xA6\xAA",		"\x90\x8D" => "\xEB\xA6\xAB",		"\x90\x8E" => "\xEB\xA6\xAE",		"\x90\x8F" => "\xEB\xA6\xAF",		"\x90\x90" => "\xEB\xA6\xB1",		"\x90\x91" => "\xEB\xA6\xB2",		"\x90\x92" => "\xEB\xA6\xB3",		"\x90\x93" => "\xEB\xA6\xB5",		"\x90\x94" => "\xEB\xA6\xB6",		"\x90\x95" => "\xEB\xA6\xB7",		"\x90\x96" => "\xEB\xA6\xB8",		"\x90\x97" => "\xEB\xA6\xB9",		"\x90\x98" => "\xEB\xA6\xBA",		"\x90\x99" => "\xEB\xA6\xBB",		"\x90\x9A" => "\xEB\xA6\xBE",		"\x90\x9B" => "\xEB\xA7\x80",		"\x90\x9C" => "\xEB\xA7\x82",		"\x90\x9D" => "\xEB\xA7\x83",		"\x90\x9E" => "\xEB\xA7\x84",		"\x90\x9F" => "\xEB\xA7\x85",		"\x90\xA0" => "\xEB\xA7\x86",		"\x90\xA1" => "\xEB\xA7\x87",		"\x90\xA2" => "\xEB\xA7\x8A",		"\x90\xA3" => "\xEB\xA7\x8B",		"\x90\xA4" => "\xEB\xA7\x8D",		"\x90\xA5" => "\xEB\xA7\x93",		"\x90\xA6" => "\xEB\xA7\x94",		"\x90\xA7" => "\xEB\xA7\x95",		"\x90\xA8" => "\xEB\xA7\x96",		"\x90\xA9" => "\xEB\xA7\x97",		"\x90\xAA" => "\xEB\xA7\x9A",		"\x90\xAB" => "\xEB\xA7\x9C",		"\x90\xAC" => "\xEB\xA7\x9F",		"\x90\xAD" => "\xEB\xA7\xA0",		"\x90\xAE" => "\xEB\xA7\xA2",		"\x90\xAF" => "\xEB\xA7\xA6",		"\x90\xB0" => "\xEB\xA7\xA7",		"\x90\xB1" => "\xEB\xA7\xA9",		"\x90\xB2" => "\xEB\xA7\xAA",		"\x90\xB3" => "\xEB\xA7\xAB",		"\x90\xB4" => "\xEB\xA7\xAD",		"\x90\xB5" => "\xEB\xA7\xAE",		"\x90\xB6" => "\xEB\xA7\xAF",		"\x90\xB7" => "\xEB\xA7\xB0",		"\x90\xB8" => "\xEB\xA7\xB1",		"\x90\xB9" => "\xEB\xA7\xB2",		"\x90\xBA" => "\xEB\xA7\xB3",		"\x90\xBB" => "\xEB\xA7\xB6",		"\x90\xBC" => "\xEB\xA7\xBB",		"\x90\xBD" => "\xEB\xA7\xBC",		"\x90\xBE" => "\xEB\xA7\xBD",		"\x90\xBF" => "\xEB\xA7\xBE",		"\x90\xC0" => "\xEB\xA7\xBF",		"\x90\xC1" => "\xEB\xA8\x82",		"\x90\xC2" => "\xEB\xA8\x83",		"\x90\xC3" => "\xEB\xA8\x84",		"\x90\xC4" => "\xEB\xA8\x85",		"\x90\xC5" => "\xEB\xA8\x86",		"\x90\xC6" => "\xEB\xA8\x87",		"\x90\xC7" => "\xEB\xA8\x89",		"\x90\xC8" => "\xEB\xA8\x8A",		"\x90\xC9" => "\xEB\xA8\x8B",		"\x90\xCA" => "\xEB\xA8\x8C",		"\x90\xCB" => "\xEB\xA8\x8D",		"\x90\xCC" => "\xEB\xA8\x8E",		"\x90\xCD" => "\xEB\xA8\x8F",		"\x90\xCE" => "\xEB\xA8\x90",		"\x90\xCF" => "\xEB\xA8\x91",		"\x90\xD0" => "\xEB\xA8\x92",		"\x90\xD1" => "\xEB\xA8\x93",		"\x90\xD2" => "\xEB\xA8\x94",		"\x90\xD3" => "\xEB\xA8\x96",		"\x90\xD4" => "\xEB\xA8\x97",		"\x90\xD5" => "\xEB\xA8\x98",		"\x90\xD6" => "\xEB\xA8\x99",		"\x90\xD7" => "\xEB\xA8\x9A",		"\x90\xD8" => "\xEB\xA8\x9B",		"\x90\xD9" => "\xEB\xA8\x9C",		"\x90\xDA" => "\xEB\xA8\x9D",		"\x90\xDB" => "\xEB\xA8\x9E",		"\x90\xDC" => "\xEB\xA8\x9F",		"\x90\xDD" => "\xEB\xA8\xA0",		"\x90\xDE" => "\xEB\xA8\xA1",		"\x90\xDF" => "\xEB\xA8\xA2",		"\x90\xE0" => "\xEB\xA8\xA3",		"\x90\xE1" => "\xEB\xA8\xA4",		"\x90\xE2" => "\xEB\xA8\xA5",		"\x90\xE3" => "\xEB\xA8\xA6",		"\x90\xE4" => "\xEB\xA8\xA7",		"\x90\xE5" => "\xEB\xA8\xA8",		"\x90\xE6" => "\xEB\xA8\xA9",		"\x90\xE7" => "\xEB\xA8\xAA",		"\x90\xE8" => "\xEB\xA8\xAB",		"\x90\xE9" => "\xEB\xA8\xAC",		"\x90\xEA" => "\xEB\xA8\xAD",		"\x90\xEB" => "\xEB\xA8\xAE",		"\x90\xEC" => "\xEB\xA8\xAF",		"\x90\xED" => "\xEB\xA8\xB0",		"\x90\xEE" => "\xEB\xA8\xB1",		"\x90\xEF" => "\xEB\xA8\xB2",		"\x90\xF0" => "\xEB\xA8\xB3",		"\x90\xF1" => "\xEB\xA8\xB4",		"\x90\xF2" => "\xEB\xA8\xB5",		"\x90\xF3" => "\xEB\xA8\xB6",		"\x90\xF4" => "\xEB\xA8\xB7",		"\x90\xF5" => "\xEB\xA8\xBA",		"\x90\xF6" => "\xEB\xA8\xBB",		"\x90\xF7" => "\xEB\xA8\xBD",		"\x90\xF8" => "\xEB\xA8\xBE",		"\x90\xF9" => "\xEB\xA8\xBF",		"\x90\xFA" => "\xEB\xA9\x81",		"\x90\xFB" => "\xEB\xA9\x83",		"\x90\xFC" => "\xEB\xA9\x84",		"\x90\xFD" => "\xEB\xA9\x85",		"\x90\xFE" => "\xEB\xA9\x86",		"\x91\x41" => "\xEB\xA9\x87",		"\x91\x42" => "\xEB\xA9\x8A",		"\x91\x43" => "\xEB\xA9\x8C",		"\x91\x44" => "\xEB\xA9\x8F",		"\x91\x45" => "\xEB\xA9\x90",		"\x91\x46" => "\xEB\xA9\x91",		"\x91\x47" => "\xEB\xA9\x92",		"\x91\x48" => "\xEB\xA9\x96",		"\x91\x49" => "\xEB\xA9\x97",		"\x91\x4A" => "\xEB\xA9\x99",		"\x91\x4B" => "\xEB\xA9\x9A",		"\x91\x4C" => "\xEB\xA9\x9B",		"\x91\x4D" => "\xEB\xA9\x9D",		"\x91\x4E" => "\xEB\xA9\x9E",		"\x91\x4F" => "\xEB\xA9\x9F",		"\x91\x50" => "\xEB\xA9\xA0",		"\x91\x51" => "\xEB\xA9\xA1",		"\x91\x52" => "\xEB\xA9\xA2",		"\x91\x53" => "\xEB\xA9\xA3",		"\x91\x54" => "\xEB\xA9\xA6",		"\x91\x55" => "\xEB\xA9\xAA",		"\x91\x56" => "\xEB\xA9\xAB",		"\x91\x57" => "\xEB\xA9\xAC",		"\x91\x58" => "\xEB\xA9\xAD",		"\x91\x59" => "\xEB\xA9\xAE",		"\x91\x5A" => "\xEB\xA9\xAF",		"\x91\x61" => "\xEB\xA9\xB2",		"\x91\x62" => "\xEB\xA9\xB3",		"\x91\x63" => "\xEB\xA9\xB5",		"\x91\x64" => "\xEB\xA9\xB6",		"\x91\x65" => "\xEB\xA9\xB7",		"\x91\x66" => "\xEB\xA9\xB9",		"\x91\x67" => "\xEB\xA9\xBA",		"\x91\x68" => "\xEB\xA9\xBB",		"\x91\x69" => "\xEB\xA9\xBC",		"\x91\x6A" => "\xEB\xA9\xBD",		"\x91\x6B" => "\xEB\xA9\xBE",		"\x91\x6C" => "\xEB\xA9\xBF",		"\x91\x6D" => "\xEB\xAA\x80",		"\x91\x6E" => "\xEB\xAA\x81",		"\x91\x6F" => "\xEB\xAA\x82",		"\x91\x70" => "\xEB\xAA\x86",		"\x91\x71" => "\xEB\xAA\x88",		"\x91\x72" => "\xEB\xAA\x89",		"\x91\x73" => "\xEB\xAA\x8A",		"\x91\x74" => "\xEB\xAA\x8B",		"\x91\x75" => "\xEB\xAA\x8D",		"\x91\x76" => "\xEB\xAA\x8E",		"\x91\x77" => "\xEB\xAA\x8F",		"\x91\x78" => "\xEB\xAA\x90",		"\x91\x79" => "\xEB\xAA\x91",		"\x91\x7A" => "\xEB\xAA\x92",		"\x91\x81" => "\xEB\xAA\x93",		"\x91\x82" => "\xEB\xAA\x94",		"\x91\x83" => "\xEB\xAA\x95",		"\x91\x84" => "\xEB\xAA\x96",		"\x91\x85" => "\xEB\xAA\x97",		"\x91\x86" => "\xEB\xAA\x98",		"\x91\x87" => "\xEB\xAA\x99",		"\x91\x88" => "\xEB\xAA\x9A",		"\x91\x89" => "\xEB\xAA\x9B",		"\x91\x8A" => "\xEB\xAA\x9C",		"\x91\x8B" => "\xEB\xAA\x9D",		"\x91\x8C" => "\xEB\xAA\x9E",		"\x91\x8D" => "\xEB\xAA\x9F",		"\x91\x8E" => "\xEB\xAA\xA0",		"\x91\x8F" => "\xEB\xAA\xA1",		"\x91\x90" => "\xEB\xAA\xA2",		"\x91\x91" => "\xEB\xAA\xA3",		"\x91\x92" => "\xEB\xAA\xA4",		"\x91\x93" => "\xEB\xAA\xA5",		"\x91\x94" => "\xEB\xAA\xA6",		"\x91\x95" => "\xEB\xAA\xA7",		"\x91\x96" => "\xEB\xAA\xAA",		"\x91\x97" => "\xEB\xAA\xAD",		"\x91\x98" => "\xEB\xAA\xAE",		"\x91\x99" => "\xEB\xAA\xAF",		"\x91\x9A" => "\xEB\xAA\xB1",		"\x91\x9B" => "\xEB\xAA\xB3",		"\x91\x9C" => "\xEB\xAA\xB4",		"\x91\x9D" => "\xEB\xAA\xB5",		"\x91\x9E" => "\xEB\xAA\xB6",		"\x91\x9F" => "\xEB\xAA\xB7",		"\x91\xA0" => "\xEB\xAA\xBA",		"\x91\xA1" => "\xEB\xAA\xBC",		"\x91\xA2" => "\xEB\xAA\xBE",		"\x91\xA3" => "\xEB\xAA\xBF",		"\x91\xA4" => "\xEB\xAB\x80",		"\x91\xA5" => "\xEB\xAB\x81",		"\x91\xA6" => "\xEB\xAB\x82",		"\x91\xA7" => "\xEB\xAB\x83",		"\x91\xA8" => "\xEB\xAB\x85",		"\x91\xA9" => "\xEB\xAB\x86",		"\x91\xAA" => "\xEB\xAB\x87",		"\x91\xAB" => "\xEB\xAB\x89",		"\x91\xAC" => "\xEB\xAB\x8A",		"\x91\xAD" => "\xEB\xAB\x8B",		"\x91\xAE" => "\xEB\xAB\x8C",		"\x91\xAF" => "\xEB\xAB\x8D",		"\x91\xB0" => "\xEB\xAB\x8E",		"\x91\xB1" => "\xEB\xAB\x8F",		"\x91\xB2" => "\xEB\xAB\x90",		"\x91\xB3" => "\xEB\xAB\x91",		"\x91\xB4" => "\xEB\xAB\x92",		"\x91\xB5" => "\xEB\xAB\x93",		"\x91\xB6" => "\xEB\xAB\x94",		"\x91\xB7" => "\xEB\xAB\x95",		"\x91\xB8" => "\xEB\xAB\x96",		"\x91\xB9" => "\xEB\xAB\x97",		"\x91\xBA" => "\xEB\xAB\x9A",		"\x91\xBB" => "\xEB\xAB\x9B",		"\x91\xBC" => "\xEB\xAB\x9C",		"\x91\xBD" => "\xEB\xAB\x9D",		"\x91\xBE" => "\xEB\xAB\x9E",		"\x91\xBF" => "\xEB\xAB\x9F",		"\x91\xC0" => "\xEB\xAB\xA0",		"\x91\xC1" => "\xEB\xAB\xA1",		"\x91\xC2" => "\xEB\xAB\xA2",		"\x91\xC3" => "\xEB\xAB\xA3",		"\x91\xC4" => "\xEB\xAB\xA4",		"\x91\xC5" => "\xEB\xAB\xA5",		"\x91\xC6" => "\xEB\xAB\xA6",		"\x91\xC7" => "\xEB\xAB\xA7",		"\x91\xC8" => "\xEB\xAB\xA8",		"\x91\xC9" => "\xEB\xAB\xA9",		"\x91\xCA" => "\xEB\xAB\xAA",		"\x91\xCB" => "\xEB\xAB\xAB",		"\x91\xCC" => "\xEB\xAB\xAC",		"\x91\xCD" => "\xEB\xAB\xAD",		"\x91\xCE" => "\xEB\xAB\xAE",		"\x91\xCF" => "\xEB\xAB\xAF",		"\x91\xD0" => "\xEB\xAB\xB0",		"\x91\xD1" => "\xEB\xAB\xB1",		"\x91\xD2" => "\xEB\xAB\xB2",		"\x91\xD3" => "\xEB\xAB\xB3",		"\x91\xD4" => "\xEB\xAB\xB4",		"\x91\xD5" => "\xEB\xAB\xB5",		"\x91\xD6" => "\xEB\xAB\xB6",		"\x91\xD7" => "\xEB\xAB\xB7",		"\x91\xD8" => "\xEB\xAB\xB8",		"\x91\xD9" => "\xEB\xAB\xB9",		"\x91\xDA" => "\xEB\xAB\xBA",		"\x91\xDB" => "\xEB\xAB\xBB",		"\x91\xDC" => "\xEB\xAB\xBD",		"\x91\xDD" => "\xEB\xAB\xBE",		"\x91\xDE" => "\xEB\xAB\xBF",		"\x91\xDF" => "\xEB\xAC\x81",		"\x91\xE0" => "\xEB\xAC\x82",		"\x91\xE1" => "\xEB\xAC\x83",		"\x91\xE2" => "\xEB\xAC\x85",		"\x91\xE3" => "\xEB\xAC\x86",		"\x91\xE4" => "\xEB\xAC\x87",		"\x91\xE5" => "\xEB\xAC\x88",		"\x91\xE6" => "\xEB\xAC\x89",		"\x91\xE7" => "\xEB\xAC\x8A",		"\x91\xE8" => "\xEB\xAC\x8B",		"\x91\xE9" => "\xEB\xAC\x8C",		"\x91\xEA" => "\xEB\xAC\x8E",		"\x91\xEB" => "\xEB\xAC\x90",		"\x91\xEC" => "\xEB\xAC\x92",		"\x91\xED" => "\xEB\xAC\x93",		"\x91\xEE" => "\xEB\xAC\x94",		"\x91\xEF" => "\xEB\xAC\x95",		"\x91\xF0" => "\xEB\xAC\x96",		"\x91\xF1" => "\xEB\xAC\x97",		"\x91\xF2" => "\xEB\xAC\x99",		"\x91\xF3" => "\xEB\xAC\x9A",		"\x91\xF4" => "\xEB\xAC\x9B",		"\x91\xF5" => "\xEB\xAC\x9D",		"\x91\xF6" => "\xEB\xAC\x9E",		"\x91\xF7" => "\xEB\xAC\x9F",		"\x91\xF8" => "\xEB\xAC\xA1",		"\x91\xF9" => "\xEB\xAC\xA2",		"\x91\xFA" => "\xEB\xAC\xA3",		"\x91\xFB" => "\xEB\xAC\xA4",		"\x91\xFC" => "\xEB\xAC\xA5",		"\x91\xFD" => "\xEB\xAC\xA6",		"\x91\xFE" => "\xEB\xAC\xA7",		"\x92\x41" => "\xEB\xAC\xA8",		"\x92\x42" => "\xEB\xAC\xAA",		"\x92\x43" => "\xEB\xAC\xAC",		"\x92\x44" => "\xEB\xAC\xAD",		"\x92\x45" => "\xEB\xAC\xAE",		"\x92\x46" => "\xEB\xAC\xAF",		"\x92\x47" => "\xEB\xAC\xB0",		"\x92\x48" => "\xEB\xAC\xB1",		"\x92\x49" => "\xEB\xAC\xB2",		"\x92\x4A" => "\xEB\xAC\xB3",		"\x92\x4B" => "\xEB\xAC\xB7",		"\x92\x4C" => "\xEB\xAC\xB9",		"\x92\x4D" => "\xEB\xAC\xBA",		"\x92\x4E" => "\xEB\xAC\xBF",		"\x92\x4F" => "\xEB\xAD\x80",		"\x92\x50" => "\xEB\xAD\x81",		"\x92\x51" => "\xEB\xAD\x82",		"\x92\x52" => "\xEB\xAD\x83",		"\x92\x53" => "\xEB\xAD\x86",		"\x92\x54" => "\xEB\xAD\x88",		"\x92\x55" => "\xEB\xAD\x8A",		"\x92\x56" => "\xEB\xAD\x8B",		"\x92\x57" => "\xEB\xAD\x8C",		"\x92\x58" => "\xEB\xAD\x8E",		"\x92\x59" => "\xEB\xAD\x91",		"\x92\x5A" => "\xEB\xAD\x92",		"\x92\x61" => "\xEB\xAD\x93",		"\x92\x62" => "\xEB\xAD\x95",		"\x92\x63" => "\xEB\xAD\x96",		"\x92\x64" => "\xEB\xAD\x97",		"\x92\x65" => "\xEB\xAD\x99",		"\x92\x66" => "\xEB\xAD\x9A",		"\x92\x67" => "\xEB\xAD\x9B",		"\x92\x68" => "\xEB\xAD\x9C",		"\x92\x69" => "\xEB\xAD\x9D",		"\x92\x6A" => "\xEB\xAD\x9E",		"\x92\x6B" => "\xEB\xAD\x9F",		"\x92\x6C" => "\xEB\xAD\xA0",		"\x92\x6D" => "\xEB\xAD\xA2",		"\x92\x6E" => "\xEB\xAD\xA4",		"\x92\x6F" => "\xEB\xAD\xA5",		"\x92\x70" => "\xEB\xAD\xA6",		"\x92\x71" => "\xEB\xAD\xA7",		"\x92\x72" => "\xEB\xAD\xA8",		"\x92\x73" => "\xEB\xAD\xA9",		"\x92\x74" => "\xEB\xAD\xAA",		"\x92\x75" => "\xEB\xAD\xAB",		"\x92\x76" => "\xEB\xAD\xAD",		"\x92\x77" => "\xEB\xAD\xAE",		"\x92\x78" => "\xEB\xAD\xAF",		"\x92\x79" => "\xEB\xAD\xB0",		"\x92\x7A" => "\xEB\xAD\xB1",		"\x92\x81" => "\xEB\xAD\xB2",		"\x92\x82" => "\xEB\xAD\xB3",		"\x92\x83" => "\xEB\xAD\xB4",		"\x92\x84" => "\xEB\xAD\xB5",		"\x92\x85" => "\xEB\xAD\xB6",		"\x92\x86" => "\xEB\xAD\xB7",		"\x92\x87" => "\xEB\xAD\xB8",		"\x92\x88" => "\xEB\xAD\xB9",		"\x92\x89" => "\xEB\xAD\xBA",		"\x92\x8A" => "\xEB\xAD\xBB",		"\x92\x8B" => "\xEB\xAD\xBC",		"\x92\x8C" => "\xEB\xAD\xBD",		"\x92\x8D" => "\xEB\xAD\xBE",		"\x92\x8E" => "\xEB\xAD\xBF",		"\x92\x8F" => "\xEB\xAE\x80",		"\x92\x90" => "\xEB\xAE\x81",		"\x92\x91" => "\xEB\xAE\x82",		"\x92\x92" => "\xEB\xAE\x83",		"\x92\x93" => "\xEB\xAE\x84",		"\x92\x94" => "\xEB\xAE\x85",		"\x92\x95" => "\xEB\xAE\x86",		"\x92\x96" => "\xEB\xAE\x87",		"\x92\x97" => "\xEB\xAE\x89",		"\x92\x98" => "\xEB\xAE\x8A",		"\x92\x99" => "\xEB\xAE\x8B",		"\x92\x9A" => "\xEB\xAE\x8D",		"\x92\x9B" => "\xEB\xAE\x8E",		"\x92\x9C" => "\xEB\xAE\x8F",		"\x92\x9D" => "\xEB\xAE\x91",		"\x92\x9E" => "\xEB\xAE\x92",		"\x92\x9F" => "\xEB\xAE\x93",		"\x92\xA0" => "\xEB\xAE\x94",		"\x92\xA1" => "\xEB\xAE\x95",		"\x92\xA2" => "\xEB\xAE\x96",		"\x92\xA3" => "\xEB\xAE\x97",		"\x92\xA4" => "\xEB\xAE\x98",		"\x92\xA5" => "\xEB\xAE\x99",		"\x92\xA6" => "\xEB\xAE\x9A",		"\x92\xA7" => "\xEB\xAE\x9B",		"\x92\xA8" => "\xEB\xAE\x9C",		"\x92\xA9" => "\xEB\xAE\x9D",		"\x92\xAA" => "\xEB\xAE\x9E",		"\x92\xAB" => "\xEB\xAE\x9F",		"\x92\xAC" => "\xEB\xAE\xA0",		"\x92\xAD" => "\xEB\xAE\xA1",		"\x92\xAE" => "\xEB\xAE\xA2",		"\x92\xAF" => "\xEB\xAE\xA3",		"\x92\xB0" => "\xEB\xAE\xA5",		"\x92\xB1" => "\xEB\xAE\xA6",		"\x92\xB2" => "\xEB\xAE\xA7",		"\x92\xB3" => "\xEB\xAE\xA9",		"\x92\xB4" => "\xEB\xAE\xAA",		"\x92\xB5" => "\xEB\xAE\xAB",		"\x92\xB6" => "\xEB\xAE\xAD",		"\x92\xB7" => "\xEB\xAE\xAE",		"\x92\xB8" => "\xEB\xAE\xAF",		"\x92\xB9" => "\xEB\xAE\xB0",		"\x92\xBA" => "\xEB\xAE\xB1",		"\x92\xBB" => "\xEB\xAE\xB2",		"\x92\xBC" => "\xEB\xAE\xB3",		"\x92\xBD" => "\xEB\xAE\xB5",		"\x92\xBE" => "\xEB\xAE\xB6",		"\x92\xBF" => "\xEB\xAE\xB8",		"\x92\xC0" => "\xEB\xAE\xB9",		"\x92\xC1" => "\xEB\xAE\xBA",		"\x92\xC2" => "\xEB\xAE\xBB",		"\x92\xC3" => "\xEB\xAE\xBC",		"\x92\xC4" => "\xEB\xAE\xBD",		"\x92\xC5" => "\xEB\xAE\xBE",		"\x92\xC6" => "\xEB\xAE\xBF",		"\x92\xC7" => "\xEB\xAF\x81",		"\x92\xC8" => "\xEB\xAF\x82",		"\x92\xC9" => "\xEB\xAF\x83",		"\x92\xCA" => "\xEB\xAF\x85",		"\x92\xCB" => "\xEB\xAF\x86",		"\x92\xCC" => "\xEB\xAF\x87",		"\x92\xCD" => "\xEB\xAF\x89",		"\x92\xCE" => "\xEB\xAF\x8A",		"\x92\xCF" => "\xEB\xAF\x8B",		"\x92\xD0" => "\xEB\xAF\x8C",		"\x92\xD1" => "\xEB\xAF\x8D",		"\x92\xD2" => "\xEB\xAF\x8E",		"\x92\xD3" => "\xEB\xAF\x8F",		"\x92\xD4" => "\xEB\xAF\x91",		"\x92\xD5" => "\xEB\xAF\x92",		"\x92\xD6" => "\xEB\xAF\x94",		"\x92\xD7" => "\xEB\xAF\x95",		"\x92\xD8" => "\xEB\xAF\x96",		"\x92\xD9" => "\xEB\xAF\x97",		"\x92\xDA" => "\xEB\xAF\x98",		"\x92\xDB" => "\xEB\xAF\x99",		"\x92\xDC" => "\xEB\xAF\x9A",		"\x92\xDD" => "\xEB\xAF\x9B",		"\x92\xDE" => "\xEB\xAF\x9C",		"\x92\xDF" => "\xEB\xAF\x9D",		"\x92\xE0" => "\xEB\xAF\x9E",		"\x92\xE1" => "\xEB\xAF\x9F",		"\x92\xE2" => "\xEB\xAF\xA0",		"\x92\xE3" => "\xEB\xAF\xA1",		"\x92\xE4" => "\xEB\xAF\xA2",		"\x92\xE5" => "\xEB\xAF\xA3",		"\x92\xE6" => "\xEB\xAF\xA4",		"\x92\xE7" => "\xEB\xAF\xA5",		"\x92\xE8" => "\xEB\xAF\xA6",		"\x92\xE9" => "\xEB\xAF\xA7",		"\x92\xEA" => "\xEB\xAF\xA8",		"\x92\xEB" => "\xEB\xAF\xA9",		"\x92\xEC" => "\xEB\xAF\xAA",		"\x92\xED" => "\xEB\xAF\xAB",		"\x92\xEE" => "\xEB\xAF\xAC",		"\x92\xEF" => "\xEB\xAF\xAD",		"\x92\xF0" => "\xEB\xAF\xAE",		"\x92\xF1" => "\xEB\xAF\xAF",		"\x92\xF2" => "\xEB\xAF\xB0",		"\x92\xF3" => "\xEB\xAF\xB1",		"\x92\xF4" => "\xEB\xAF\xB2",		"\x92\xF5" => "\xEB\xAF\xB3",		"\x92\xF6" => "\xEB\xAF\xB4",		"\x92\xF7" => "\xEB\xAF\xB5",		"\x92\xF8" => "\xEB\xAF\xB6",		"\x92\xF9" => "\xEB\xAF\xB7",		"\x92\xFA" => "\xEB\xAF\xBA",		"\x92\xFB" => "\xEB\xAF\xBB",		"\x92\xFC" => "\xEB\xAF\xBD",		"\x92\xFD" => "\xEB\xAF\xBE",		"\x92\xFE" => "\xEB\xB0\x81",		"\x93\x41" => "\xEB\xB0\x83",		"\x93\x42" => "\xEB\xB0\x84",		"\x93\x43" => "\xEB\xB0\x85",		"\x93\x44" => "\xEB\xB0\x86",		"\x93\x45" => "\xEB\xB0\x87",		"\x93\x46" => "\xEB\xB0\x8A",		"\x93\x47" => "\xEB\xB0\x8E",		"\x93\x48" => "\xEB\xB0\x90",		"\x93\x49" => "\xEB\xB0\x92",		"\x93\x4A" => "\xEB\xB0\x93",		"\x93\x4B" => "\xEB\xB0\x99",		"\x93\x4C" => "\xEB\xB0\x9A",		"\x93\x4D" => "\xEB\xB0\xA0",		"\x93\x4E" => "\xEB\xB0\xA1",		"\x93\x4F" => "\xEB\xB0\xA2",		"\x93\x50" => "\xEB\xB0\xA3",		"\x93\x51" => "\xEB\xB0\xA6",		"\x93\x52" => "\xEB\xB0\xA8",		"\x93\x53" => "\xEB\xB0\xAA",		"\x93\x54" => "\xEB\xB0\xAB",		"\x93\x55" => "\xEB\xB0\xAC",		"\x93\x56" => "\xEB\xB0\xAE",		"\x93\x57" => "\xEB\xB0\xAF",		"\x93\x58" => "\xEB\xB0\xB2",		"\x93\x59" => "\xEB\xB0\xB3",		"\x93\x5A" => "\xEB\xB0\xB5",		"\x93\x61" => "\xEB\xB0\xB6",		"\x93\x62" => "\xEB\xB0\xB7",		"\x93\x63" => "\xEB\xB0\xB9",		"\x93\x64" => "\xEB\xB0\xBA",		"\x93\x65" => "\xEB\xB0\xBB",		"\x93\x66" => "\xEB\xB0\xBC",		"\x93\x67" => "\xEB\xB0\xBD",		"\x93\x68" => "\xEB\xB0\xBE",		"\x93\x69" => "\xEB\xB0\xBF",		"\x93\x6A" => "\xEB\xB1\x82",		"\x93\x6B" => "\xEB\xB1\x86",		"\x93\x6C" => "\xEB\xB1\x87",		"\x93\x6D" => "\xEB\xB1\x88",		"\x93\x6E" => "\xEB\xB1\x8A",		"\x93\x6F" => "\xEB\xB1\x8B",		"\x93\x70" => "\xEB\xB1\x8E",		"\x93\x71" => "\xEB\xB1\x8F",		"\x93\x72" => "\xEB\xB1\x91",		"\x93\x73" => "\xEB\xB1\x92",		"\x93\x74" => "\xEB\xB1\x93",		"\x93\x75" => "\xEB\xB1\x94",		"\x93\x76" => "\xEB\xB1\x95",		"\x93\x77" => "\xEB\xB1\x96",		"\x93\x78" => "\xEB\xB1\x97",		"\x93\x79" => "\xEB\xB1\x98",		"\x93\x7A" => "\xEB\xB1\x99",		"\x93\x81" => "\xEB\xB1\x9A",		"\x93\x82" => "\xEB\xB1\x9B",		"\x93\x83" => "\xEB\xB1\x9C",		"\x93\x84" => "\xEB\xB1\x9E",		"\x93\x85" => "\xEB\xB1\x9F",		"\x93\x86" => "\xEB\xB1\xA0",		"\x93\x87" => "\xEB\xB1\xA1",		"\x93\x88" => "\xEB\xB1\xA2",		"\x93\x89" => "\xEB\xB1\xA3",		"\x93\x8A" => "\xEB\xB1\xA4",		"\x93\x8B" => "\xEB\xB1\xA5",		"\x93\x8C" => "\xEB\xB1\xA6",		"\x93\x8D" => "\xEB\xB1\xA7",		"\x93\x8E" => "\xEB\xB1\xA8",		"\x93\x8F" => "\xEB\xB1\xA9",		"\x93\x90" => "\xEB\xB1\xAA",		"\x93\x91" => "\xEB\xB1\xAB",		"\x93\x92" => "\xEB\xB1\xAC",		"\x93\x93" => "\xEB\xB1\xAD",		"\x93\x94" => "\xEB\xB1\xAE",		"\x93\x95" => "\xEB\xB1\xAF",		"\x93\x96" => "\xEB\xB1\xB0",		"\x93\x97" => "\xEB\xB1\xB1",		"\x93\x98" => "\xEB\xB1\xB2",		"\x93\x99" => "\xEB\xB1\xB3",		"\x93\x9A" => "\xEB\xB1\xB4",		"\x93\x9B" => "\xEB\xB1\xB5",		"\x93\x9C" => "\xEB\xB1\xB6",		"\x93\x9D" => "\xEB\xB1\xB7",		"\x93\x9E" => "\xEB\xB1\xB8",		"\x93\x9F" => "\xEB\xB1\xB9",		"\x93\xA0" => "\xEB\xB1\xBA",		"\x93\xA1" => "\xEB\xB1\xBB",		"\x93\xA2" => "\xEB\xB1\xBC",		"\x93\xA3" => "\xEB\xB1\xBD",		"\x93\xA4" => "\xEB\xB1\xBE",		"\x93\xA5" => "\xEB\xB1\xBF",		"\x93\xA6" => "\xEB\xB2\x80",		"\x93\xA7" => "\xEB\xB2\x81",		"\x93\xA8" => "\xEB\xB2\x82",		"\x93\xA9" => "\xEB\xB2\x83",		"\x93\xAA" => "\xEB\xB2\x86",		"\x93\xAB" => "\xEB\xB2\x87",		"\x93\xAC" => "\xEB\xB2\x89",		"\x93\xAD" => "\xEB\xB2\x8A",		"\x93\xAE" => "\xEB\xB2\x8D",		"\x93\xAF" => "\xEB\xB2\x8F",		"\x93\xB0" => "\xEB\xB2\x90",		"\x93\xB1" => "\xEB\xB2\x91",		"\x93\xB2" => "\xEB\xB2\x92",		"\x93\xB3" => "\xEB\xB2\x93",		"\x93\xB4" => "\xEB\xB2\x96",		"\x93\xB5" => "\xEB\xB2\x98",		"\x93\xB6" => "\xEB\xB2\x9B",		"\x93\xB7" => "\xEB\xB2\x9C",		"\x93\xB8" => "\xEB\xB2\x9D",		"\x93\xB9" => "\xEB\xB2\x9E",		"\x93\xBA" => "\xEB\xB2\x9F",		"\x93\xBB" => "\xEB\xB2\xA2",		"\x93\xBC" => "\xEB\xB2\xA3",		"\x93\xBD" => "\xEB\xB2\xA5",		"\x93\xBE" => "\xEB\xB2\xA6",		"\x93\xBF" => "\xEB\xB2\xA9",		"\x93\xC0" => "\xEB\xB2\xAA",		"\x93\xC1" => "\xEB\xB2\xAB",		"\x93\xC2" => "\xEB\xB2\xAC",		"\x93\xC3" => "\xEB\xB2\xAD",		"\x93\xC4" => "\xEB\xB2\xAE",		"\x93\xC5" => "\xEB\xB2\xAF",		"\x93\xC6" => "\xEB\xB2\xB2",		"\x93\xC7" => "\xEB\xB2\xB6",		"\x93\xC8" => "\xEB\xB2\xB7",		"\x93\xC9" => "\xEB\xB2\xB8",		"\x93\xCA" => "\xEB\xB2\xB9",		"\x93\xCB" => "\xEB\xB2\xBA",		"\x93\xCC" => "\xEB\xB2\xBB",		"\x93\xCD" => "\xEB\xB2\xBE",		"\x93\xCE" => "\xEB\xB2\xBF",		"\x93\xCF" => "\xEB\xB3\x81",		"\x93\xD0" => "\xEB\xB3\x82",		"\x93\xD1" => "\xEB\xB3\x83",		"\x93\xD2" => "\xEB\xB3\x85",		"\x93\xD3" => "\xEB\xB3\x86",		"\x93\xD4" => "\xEB\xB3\x87",		"\x93\xD5" => "\xEB\xB3\x88",		"\x93\xD6" => "\xEB\xB3\x89",		"\x93\xD7" => "\xEB\xB3\x8A",		"\x93\xD8" => "\xEB\xB3\x8B",		"\x93\xD9" => "\xEB\xB3\x8C",		"\x93\xDA" => "\xEB\xB3\x8E",		"\x93\xDB" => "\xEB\xB3\x92",		"\x93\xDC" => "\xEB\xB3\x93",		"\x93\xDD" => "\xEB\xB3\x94",		"\x93\xDE" => "\xEB\xB3\x96",		"\x93\xDF" => "\xEB\xB3\x97",		"\x93\xE0" => "\xEB\xB3\x99",		"\x93\xE1" => "\xEB\xB3\x9A",		"\x93\xE2" => "\xEB\xB3\x9B",		"\x93\xE3" => "\xEB\xB3\x9D",		"\x93\xE4" => "\xEB\xB3\x9E",		"\x93\xE5" => "\xEB\xB3\x9F",		"\x93\xE6" => "\xEB\xB3\xA0",		"\x93\xE7" => "\xEB\xB3\xA1",		"\x93\xE8" => "\xEB\xB3\xA2",		"\x93\xE9" => "\xEB\xB3\xA3",		"\x93\xEA" => "\xEB\xB3\xA4",		"\x93\xEB" => "\xEB\xB3\xA5",		"\x93\xEC" => "\xEB\xB3\xA6",		"\x93\xED" => "\xEB\xB3\xA7",		"\x93\xEE" => "\xEB\xB3\xA8",		"\x93\xEF" => "\xEB\xB3\xA9",		"\x93\xF0" => "\xEB\xB3\xAA",		"\x93\xF1" => "\xEB\xB3\xAB",		"\x93\xF2" => "\xEB\xB3\xAC",		"\x93\xF3" => "\xEB\xB3\xAD",		"\x93\xF4" => "\xEB\xB3\xAE",		"\x93\xF5" => "\xEB\xB3\xAF",		"\x93\xF6" => "\xEB\xB3\xB0",		"\x93\xF7" => "\xEB\xB3\xB1",		"\x93\xF8" => "\xEB\xB3\xB2",		"\x93\xF9" => "\xEB\xB3\xB3",		"\x93\xFA" => "\xEB\xB3\xB7",		"\x93\xFB" => "\xEB\xB3\xB9",		"\x93\xFC" => "\xEB\xB3\xBA",		"\x93\xFD" => "\xEB\xB3\xBB",		"\x93\xFE" => "\xEB\xB3\xBD",		"\x94\x41" => "\xEB\xB3\xBE",		"\x94\x42" => "\xEB\xB3\xBF",		"\x94\x43" => "\xEB\xB4\x80",		"\x94\x44" => "\xEB\xB4\x81",		"\x94\x45" => "\xEB\xB4\x82",		"\x94\x46" => "\xEB\xB4\x83",		"\x94\x47" => "\xEB\xB4\x86",		"\x94\x48" => "\xEB\xB4\x88",		"\x94\x49" => "\xEB\xB4\x8A",		"\x94\x4A" => "\xEB\xB4\x8B",		"\x94\x4B" => "\xEB\xB4\x8C",		"\x94\x4C" => "\xEB\xB4\x8D",		"\x94\x4D" => "\xEB\xB4\x8E",		"\x94\x4E" => "\xEB\xB4\x8F",		"\x94\x4F" => "\xEB\xB4\x91",		"\x94\x50" => "\xEB\xB4\x92",		"\x94\x51" => "\xEB\xB4\x93",		"\x94\x52" => "\xEB\xB4\x95",		"\x94\x53" => "\xEB\xB4\x96",		"\x94\x54" => "\xEB\xB4\x97",		"\x94\x55" => "\xEB\xB4\x98",		"\x94\x56" => "\xEB\xB4\x99",		"\x94\x57" => "\xEB\xB4\x9A",		"\x94\x58" => "\xEB\xB4\x9B",		"\x94\x59" => "\xEB\xB4\x9C",		"\x94\x5A" => "\xEB\xB4\x9D",		"\x94\x61" => "\xEB\xB4\x9E",		"\x94\x62" => "\xEB\xB4\x9F",		"\x94\x63" => "\xEB\xB4\xA0",		"\x94\x64" => "\xEB\xB4\xA1",		"\x94\x65" => "\xEB\xB4\xA2",		"\x94\x66" => "\xEB\xB4\xA3",		"\x94\x67" => "\xEB\xB4\xA5",		"\x94\x68" => "\xEB\xB4\xA6",		"\x94\x69" => "\xEB\xB4\xA7",		"\x94\x6A" => "\xEB\xB4\xA8",		"\x94\x6B" => "\xEB\xB4\xA9",		"\x94\x6C" => "\xEB\xB4\xAA",		"\x94\x6D" => "\xEB\xB4\xAB",		"\x94\x6E" => "\xEB\xB4\xAD",		"\x94\x6F" => "\xEB\xB4\xAE",		"\x94\x70" => "\xEB\xB4\xAF",		"\x94\x71" => "\xEB\xB4\xB0",		"\x94\x72" => "\xEB\xB4\xB1",		"\x94\x73" => "\xEB\xB4\xB2",		"\x94\x74" => "\xEB\xB4\xB3",		"\x94\x75" => "\xEB\xB4\xB4",		"\x94\x76" => "\xEB\xB4\xB5",		"\x94\x77" => "\xEB\xB4\xB6",		"\x94\x78" => "\xEB\xB4\xB7",		"\x94\x79" => "\xEB\xB4\xB8",		"\x94\x7A" => "\xEB\xB4\xB9",		"\x94\x81" => "\xEB\xB4\xBA",		"\x94\x82" => "\xEB\xB4\xBB",		"\x94\x83" => "\xEB\xB4\xBC",		"\x94\x84" => "\xEB\xB4\xBD",		"\x94\x85" => "\xEB\xB4\xBE",		"\x94\x86" => "\xEB\xB4\xBF",		"\x94\x87" => "\xEB\xB5\x81",		"\x94\x88" => "\xEB\xB5\x82",		"\x94\x89" => "\xEB\xB5\x83",		"\x94\x8A" => "\xEB\xB5\x84",		"\x94\x8B" => "\xEB\xB5\x85",		"\x94\x8C" => "\xEB\xB5\x86",		"\x94\x8D" => "\xEB\xB5\x87",		"\x94\x8E" => "\xEB\xB5\x8A",		"\x94\x8F" => "\xEB\xB5\x8B",		"\x94\x90" => "\xEB\xB5\x8D",		"\x94\x91" => "\xEB\xB5\x8E",		"\x94\x92" => "\xEB\xB5\x8F",		"\x94\x93" => "\xEB\xB5\x91",		"\x94\x94" => "\xEB\xB5\x92",		"\x94\x95" => "\xEB\xB5\x93",		"\x94\x96" => "\xEB\xB5\x94",		"\x94\x97" => "\xEB\xB5\x95",		"\x94\x98" => "\xEB\xB5\x96",		"\x94\x99" => "\xEB\xB5\x97",		"\x94\x9A" => "\xEB\xB5\x9A",		"\x94\x9B" => "\xEB\xB5\x9B",		"\x94\x9C" => "\xEB\xB5\x9C",		"\x94\x9D" => "\xEB\xB5\x9D",		"\x94\x9E" => "\xEB\xB5\x9E",		"\x94\x9F" => "\xEB\xB5\x9F",		"\x94\xA0" => "\xEB\xB5\xA0",		"\x94\xA1" => "\xEB\xB5\xA1",		"\x94\xA2" => "\xEB\xB5\xA2",		"\x94\xA3" => "\xEB\xB5\xA3",		"\x94\xA4" => "\xEB\xB5\xA5",		"\x94\xA5" => "\xEB\xB5\xA6",		"\x94\xA6" => "\xEB\xB5\xA7",		"\x94\xA7" => "\xEB\xB5\xA9",		"\x94\xA8" => "\xEB\xB5\xAA",		"\x94\xA9" => "\xEB\xB5\xAB",		"\x94\xAA" => "\xEB\xB5\xAC",		"\x94\xAB" => "\xEB\xB5\xAD",		"\x94\xAC" => "\xEB\xB5\xAE",		"\x94\xAD" => "\xEB\xB5\xAF",		"\x94\xAE" => "\xEB\xB5\xB0",		"\x94\xAF" => "\xEB\xB5\xB1",		"\x94\xB0" => "\xEB\xB5\xB2",		"\x94\xB1" => "\xEB\xB5\xB3",		"\x94\xB2" => "\xEB\xB5\xB4",		"\x94\xB3" => "\xEB\xB5\xB5",		"\x94\xB4" => "\xEB\xB5\xB6",		"\x94\xB5" => "\xEB\xB5\xB7",		"\x94\xB6" => "\xEB\xB5\xB8",		"\x94\xB7" => "\xEB\xB5\xB9",		"\x94\xB8" => "\xEB\xB5\xBA",		"\x94\xB9" => "\xEB\xB5\xBB",		"\x94\xBA" => "\xEB\xB5\xBC",		"\x94\xBB" => "\xEB\xB5\xBD",		"\x94\xBC" => "\xEB\xB5\xBE",		"\x94\xBD" => "\xEB\xB5\xBF",		"\x94\xBE" => "\xEB\xB6\x82",		"\x94\xBF" => "\xEB\xB6\x83",		"\x94\xC0" => "\xEB\xB6\x85",		"\x94\xC1" => "\xEB\xB6\x86",		"\x94\xC2" => "\xEB\xB6\x8B",		"\x94\xC3" => "\xEB\xB6\x8C",		"\x94\xC4" => "\xEB\xB6\x8D",		"\x94\xC5" => "\xEB\xB6\x8E",		"\x94\xC6" => "\xEB\xB6\x8F",		"\x94\xC7" => "\xEB\xB6\x92",		"\x94\xC8" => "\xEB\xB6\x94",		"\x94\xC9" => "\xEB\xB6\x96",		"\x94\xCA" => "\xEB\xB6\x97",		"\x94\xCB" => "\xEB\xB6\x98",		"\x94\xCC" => "\xEB\xB6\x9B",		"\x94\xCD" => "\xEB\xB6\x9D",		"\x94\xCE" => "\xEB\xB6\x9E",		"\x94\xCF" => "\xEB\xB6\x9F",		"\x94\xD0" => "\xEB\xB6\xA0",		"\x94\xD1" => "\xEB\xB6\xA1",		"\x94\xD2" => "\xEB\xB6\xA2",		"\x94\xD3" => "\xEB\xB6\xA3",		"\x94\xD4" => "\xEB\xB6\xA5",		"\x94\xD5" => "\xEB\xB6\xA6",		"\x94\xD6" => "\xEB\xB6\xA7",		"\x94\xD7" => "\xEB\xB6\xA8",		"\x94\xD8" => "\xEB\xB6\xA9",		"\x94\xD9" => "\xEB\xB6\xAA",		"\x94\xDA" => "\xEB\xB6\xAB",		"\x94\xDB" => "\xEB\xB6\xAC",		"\x94\xDC" => "\xEB\xB6\xAD",		"\x94\xDD" => "\xEB\xB6\xAE",		"\x94\xDE" => "\xEB\xB6\xAF",		"\x94\xDF" => "\xEB\xB6\xB1",		"\x94\xE0" => "\xEB\xB6\xB2",		"\x94\xE1" => "\xEB\xB6\xB3",		"\x94\xE2" => "\xEB\xB6\xB4",		"\x94\xE3" => "\xEB\xB6\xB5",		"\x94\xE4" => "\xEB\xB6\xB6",		"\x94\xE5" => "\xEB\xB6\xB7",		"\x94\xE6" => "\xEB\xB6\xB9",		"\x94\xE7" => "\xEB\xB6\xBA",		"\x94\xE8" => "\xEB\xB6\xBB",		"\x94\xE9" => "\xEB\xB6\xBC",		"\x94\xEA" => "\xEB\xB6\xBD",		"\x94\xEB" => "\xEB\xB6\xBE",		"\x94\xEC" => "\xEB\xB6\xBF",		"\x94\xED" => "\xEB\xB7\x80",		"\x94\xEE" => "\xEB\xB7\x81",		"\x94\xEF" => "\xEB\xB7\x82",		"\x94\xF0" => "\xEB\xB7\x83",		"\x94\xF1" => "\xEB\xB7\x84",		"\x94\xF2" => "\xEB\xB7\x85",		"\x94\xF3" => "\xEB\xB7\x86",		"\x94\xF4" => "\xEB\xB7\x87",		"\x94\xF5" => "\xEB\xB7\x88",		"\x94\xF6" => "\xEB\xB7\x89",		"\x94\xF7" => "\xEB\xB7\x8A",		"\x94\xF8" => "\xEB\xB7\x8B",		"\x94\xF9" => "\xEB\xB7\x8C",		"\x94\xFA" => "\xEB\xB7\x8D",		"\x94\xFB" => "\xEB\xB7\x8E",		"\x94\xFC" => "\xEB\xB7\x8F",		"\x94\xFD" => "\xEB\xB7\x90",		"\x94\xFE" => "\xEB\xB7\x91",		"\x95\x41" => "\xEB\xB7\x92",		"\x95\x42" => "\xEB\xB7\x93",		"\x95\x43" => "\xEB\xB7\x96",		"\x95\x44" => "\xEB\xB7\x97",		"\x95\x45" => "\xEB\xB7\x99",		"\x95\x46" => "\xEB\xB7\x9A",		"\x95\x47" => "\xEB\xB7\x9B",		"\x95\x48" => "\xEB\xB7\x9D",		"\x95\x49" => "\xEB\xB7\x9E",		"\x95\x4A" => "\xEB\xB7\x9F",		"\x95\x4B" => "\xEB\xB7\xA0",		"\x95\x4C" => "\xEB\xB7\xA1",		"\x95\x4D" => "\xEB\xB7\xA2",		"\x95\x4E" => "\xEB\xB7\xA3",		"\x95\x4F" => "\xEB\xB7\xA4",		"\x95\x50" => "\xEB\xB7\xA5",		"\x95\x51" => "\xEB\xB7\xA6",		"\x95\x52" => "\xEB\xB7\xA7",		"\x95\x53" => "\xEB\xB7\xA8",		"\x95\x54" => "\xEB\xB7\xAA",		"\x95\x55" => "\xEB\xB7\xAB",		"\x95\x56" => "\xEB\xB7\xAC",		"\x95\x57" => "\xEB\xB7\xAD",		"\x95\x58" => "\xEB\xB7\xAE",		"\x95\x59" => "\xEB\xB7\xAF",		"\x95\x5A" => "\xEB\xB7\xB1",		"\x95\x61" => "\xEB\xB7\xB2",		"\x95\x62" => "\xEB\xB7\xB3",		"\x95\x63" => "\xEB\xB7\xB5",		"\x95\x64" => "\xEB\xB7\xB6",		"\x95\x65" => "\xEB\xB7\xB7",		"\x95\x66" => "\xEB\xB7\xB9",		"\x95\x67" => "\xEB\xB7\xBA",		"\x95\x68" => "\xEB\xB7\xBB",		"\x95\x69" => "\xEB\xB7\xBC",		"\x95\x6A" => "\xEB\xB7\xBD",		"\x95\x6B" => "\xEB\xB7\xBE",		"\x95\x6C" => "\xEB\xB7\xBF",		"\x95\x6D" => "\xEB\xB8\x81",		"\x95\x6E" => "\xEB\xB8\x82",		"\x95\x6F" => "\xEB\xB8\x84",		"\x95\x70" => "\xEB\xB8\x86",		"\x95\x71" => "\xEB\xB8\x87",		"\x95\x72" => "\xEB\xB8\x88",		"\x95\x73" => "\xEB\xB8\x89",		"\x95\x74" => "\xEB\xB8\x8A",		"\x95\x75" => "\xEB\xB8\x8B",		"\x95\x76" => "\xEB\xB8\x8E",		"\x95\x77" => "\xEB\xB8\x8F",		"\x95\x78" => "\xEB\xB8\x91",		"\x95\x79" => "\xEB\xB8\x92",		"\x95\x7A" => "\xEB\xB8\x93",		"\x95\x81" => "\xEB\xB8\x95",		"\x95\x82" => "\xEB\xB8\x96",		"\x95\x83" => "\xEB\xB8\x97",		"\x95\x84" => "\xEB\xB8\x98",		"\x95\x85" => "\xEB\xB8\x99",		"\x95\x86" => "\xEB\xB8\x9A",		"\x95\x87" => "\xEB\xB8\x9B",		"\x95\x88" => "\xEB\xB8\x9E",		"\x95\x89" => "\xEB\xB8\xA0",		"\x95\x8A" => "\xEB\xB8\xA1",		"\x95\x8B" => "\xEB\xB8\xA2",		"\x95\x8C" => "\xEB\xB8\xA3",		"\x95\x8D" => "\xEB\xB8\xA4",		"\x95\x8E" => "\xEB\xB8\xA5",		"\x95\x8F" => "\xEB\xB8\xA6",		"\x95\x90" => "\xEB\xB8\xA7",		"\x95\x91" => "\xEB\xB8\xA8",		"\x95\x92" => "\xEB\xB8\xA9",		"\x95\x93" => "\xEB\xB8\xAA",		"\x95\x94" => "\xEB\xB8\xAB",		"\x95\x95" => "\xEB\xB8\xAC",		"\x95\x96" => "\xEB\xB8\xAD",		"\x95\x97" => "\xEB\xB8\xAE",		"\x95\x98" => "\xEB\xB8\xAF",		"\x95\x99" => "\xEB\xB8\xB0",		"\x95\x9A" => "\xEB\xB8\xB1",		"\x95\x9B" => "\xEB\xB8\xB2",		"\x95\x9C" => "\xEB\xB8\xB3",		"\x95\x9D" => "\xEB\xB8\xB4",		"\x95\x9E" => "\xEB\xB8\xB5",		"\x95\x9F" => "\xEB\xB8\xB6",		"\x95\xA0" => "\xEB\xB8\xB7",		"\x95\xA1" => "\xEB\xB8\xB8",		"\x95\xA2" => "\xEB\xB8\xB9",		"\x95\xA3" => "\xEB\xB8\xBA",		"\x95\xA4" => "\xEB\xB8\xBB",		"\x95\xA5" => "\xEB\xB8\xBC",		"\x95\xA6" => "\xEB\xB8\xBD",		"\x95\xA7" => "\xEB\xB8\xBE",		"\x95\xA8" => "\xEB\xB8\xBF",		"\x95\xA9" => "\xEB\xB9\x80",		"\x95\xAA" => "\xEB\xB9\x81",		"\x95\xAB" => "\xEB\xB9\x82",		"\x95\xAC" => "\xEB\xB9\x83",		"\x95\xAD" => "\xEB\xB9\x86",		"\x95\xAE" => "\xEB\xB9\x87",		"\x95\xAF" => "\xEB\xB9\x89",		"\x95\xB0" => "\xEB\xB9\x8A",		"\x95\xB1" => "\xEB\xB9\x8B",		"\x95\xB2" => "\xEB\xB9\x8D",		"\x95\xB3" => "\xEB\xB9\x8F",		"\x95\xB4" => "\xEB\xB9\x90",		"\x95\xB5" => "\xEB\xB9\x91",		"\x95\xB6" => "\xEB\xB9\x92",		"\x95\xB7" => "\xEB\xB9\x93",		"\x95\xB8" => "\xEB\xB9\x96",		"\x95\xB9" => "\xEB\xB9\x98",		"\x95\xBA" => "\xEB\xB9\x9C",		"\x95\xBB" => "\xEB\xB9\x9D",		"\x95\xBC" => "\xEB\xB9\x9E",		"\x95\xBD" => "\xEB\xB9\x9F",		"\x95\xBE" => "\xEB\xB9\xA2",		"\x95\xBF" => "\xEB\xB9\xA3",		"\x95\xC0" => "\xEB\xB9\xA5",		"\x95\xC1" => "\xEB\xB9\xA6",		"\x95\xC2" => "\xEB\xB9\xA7",		"\x95\xC3" => "\xEB\xB9\xA9",		"\x95\xC4" => "\xEB\xB9\xAB",		"\x95\xC5" => "\xEB\xB9\xAC",		"\x95\xC6" => "\xEB\xB9\xAD",		"\x95\xC7" => "\xEB\xB9\xAE",		"\x95\xC8" => "\xEB\xB9\xAF",		"\x95\xC9" => "\xEB\xB9\xB2",		"\x95\xCA" => "\xEB\xB9\xB6",		"\x95\xCB" => "\xEB\xB9\xB7",		"\x95\xCC" => "\xEB\xB9\xB8",		"\x95\xCD" => "\xEB\xB9\xB9",		"\x95\xCE" => "\xEB\xB9\xBA",		"\x95\xCF" => "\xEB\xB9\xBE",		"\x95\xD0" => "\xEB\xB9\xBF",		"\x95\xD1" => "\xEB\xBA\x81",		"\x95\xD2" => "\xEB\xBA\x82",		"\x95\xD3" => "\xEB\xBA\x83",		"\x95\xD4" => "\xEB\xBA\x85",		"\x95\xD5" => "\xEB\xBA\x86",		"\x95\xD6" => "\xEB\xBA\x87",		"\x95\xD7" => "\xEB\xBA\x88",		"\x95\xD8" => "\xEB\xBA\x89",		"\x95\xD9" => "\xEB\xBA\x8A",		"\x95\xDA" => "\xEB\xBA\x8B",		"\x95\xDB" => "\xEB\xBA\x8E",		"\x95\xDC" => "\xEB\xBA\x92",		"\x95\xDD" => "\xEB\xBA\x93",		"\x95\xDE" => "\xEB\xBA\x94",		"\x95\xDF" => "\xEB\xBA\x95",		"\x95\xE0" => "\xEB\xBA\x96",		"\x95\xE1" => "\xEB\xBA\x97",		"\x95\xE2" => "\xEB\xBA\x9A",		"\x95\xE3" => "\xEB\xBA\x9B",		"\x95\xE4" => "\xEB\xBA\x9C",		"\x95\xE5" => "\xEB\xBA\x9D",		"\x95\xE6" => "\xEB\xBA\x9E",		"\x95\xE7" => "\xEB\xBA\x9F",		"\x95\xE8" => "\xEB\xBA\xA0",		"\x95\xE9" => "\xEB\xBA\xA1",		"\x95\xEA" => "\xEB\xBA\xA2",		"\x95\xEB" => "\xEB\xBA\xA3",		"\x95\xEC" => "\xEB\xBA\xA4",		"\x95\xED" => "\xEB\xBA\xA5",		"\x95\xEE" => "\xEB\xBA\xA6",		"\x95\xEF" => "\xEB\xBA\xA7",		"\x95\xF0" => "\xEB\xBA\xA9",		"\x95\xF1" => "\xEB\xBA\xAA",		"\x95\xF2" => "\xEB\xBA\xAB",		"\x95\xF3" => "\xEB\xBA\xAC",		"\x95\xF4" => "\xEB\xBA\xAD",		"\x95\xF5" => "\xEB\xBA\xAE",		"\x95\xF6" => "\xEB\xBA\xAF",		"\x95\xF7" => "\xEB\xBA\xB0",		"\x95\xF8" => "\xEB\xBA\xB1",		"\x95\xF9" => "\xEB\xBA\xB2",		"\x95\xFA" => "\xEB\xBA\xB3",		"\x95\xFB" => "\xEB\xBA\xB4",		"\x95\xFC" => "\xEB\xBA\xB5",		"\x95\xFD" => "\xEB\xBA\xB6",		"\x95\xFE" => "\xEB\xBA\xB7",		"\x96\x41" => "\xEB\xBA\xB8",		"\x96\x42" => "\xEB\xBA\xB9",		"\x96\x43" => "\xEB\xBA\xBA",		"\x96\x44" => "\xEB\xBA\xBB",		"\x96\x45" => "\xEB\xBA\xBC",		"\x96\x46" => "\xEB\xBA\xBD",		"\x96\x47" => "\xEB\xBA\xBE",		"\x96\x48" => "\xEB\xBA\xBF",		"\x96\x49" => "\xEB\xBB\x80",		"\x96\x4A" => "\xEB\xBB\x81",		"\x96\x4B" => "\xEB\xBB\x82",		"\x96\x4C" => "\xEB\xBB\x83",		"\x96\x4D" => "\xEB\xBB\x84",		"\x96\x4E" => "\xEB\xBB\x85",		"\x96\x4F" => "\xEB\xBB\x86",		"\x96\x50" => "\xEB\xBB\x87",		"\x96\x51" => "\xEB\xBB\x88",		"\x96\x52" => "\xEB\xBB\x89",		"\x96\x53" => "\xEB\xBB\x8A",		"\x96\x54" => "\xEB\xBB\x8B",		"\x96\x55" => "\xEB\xBB\x8C",		"\x96\x56" => "\xEB\xBB\x8D",		"\x96\x57" => "\xEB\xBB\x8E",		"\x96\x58" => "\xEB\xBB\x8F",		"\x96\x59" => "\xEB\xBB\x92",		"\x96\x5A" => "\xEB\xBB\x93",		"\x96\x61" => "\xEB\xBB\x95",		"\x96\x62" => "\xEB\xBB\x96",		"\x96\x63" => "\xEB\xBB\x99",		"\x96\x64" => "\xEB\xBB\x9A",		"\x96\x65" => "\xEB\xBB\x9B",		"\x96\x66" => "\xEB\xBB\x9C",		"\x96\x67" => "\xEB\xBB\x9D",		"\x96\x68" => "\xEB\xBB\x9E",		"\x96\x69" => "\xEB\xBB\x9F",		"\x96\x6A" => "\xEB\xBB\xA1",		"\x96\x6B" => "\xEB\xBB\xA2",		"\x96\x6C" => "\xEB\xBB\xA6",		"\x96\x6D" => "\xEB\xBB\xA7",		"\x96\x6E" => "\xEB\xBB\xA8",		"\x96\x6F" => "\xEB\xBB\xA9",		"\x96\x70" => "\xEB\xBB\xAA",		"\x96\x71" => "\xEB\xBB\xAB",		"\x96\x72" => "\xEB\xBB\xAD",		"\x96\x73" => "\xEB\xBB\xAE",		"\x96\x74" => "\xEB\xBB\xAF",		"\x96\x75" => "\xEB\xBB\xB0",		"\x96\x76" => "\xEB\xBB\xB1",		"\x96\x77" => "\xEB\xBB\xB2",		"\x96\x78" => "\xEB\xBB\xB3",		"\x96\x79" => "\xEB\xBB\xB4",		"\x96\x7A" => "\xEB\xBB\xB5",		"\x96\x81" => "\xEB\xBB\xB6",		"\x96\x82" => "\xEB\xBB\xB7",		"\x96\x83" => "\xEB\xBB\xB8",		"\x96\x84" => "\xEB\xBB\xB9",		"\x96\x85" => "\xEB\xBB\xBA",		"\x96\x86" => "\xEB\xBB\xBB",		"\x96\x87" => "\xEB\xBB\xBC",		"\x96\x88" => "\xEB\xBB\xBD",		"\x96\x89" => "\xEB\xBB\xBE",		"\x96\x8A" => "\xEB\xBB\xBF",		"\x96\x8B" => "\xEB\xBC\x80",		"\x96\x8C" => "\xEB\xBC\x82",		"\x96\x8D" => "\xEB\xBC\x83",		"\x96\x8E" => "\xEB\xBC\x84",		"\x96\x8F" => "\xEB\xBC\x85",		"\x96\x90" => "\xEB\xBC\x86",		"\x96\x91" => "\xEB\xBC\x87",		"\x96\x92" => "\xEB\xBC\x8A",		"\x96\x93" => "\xEB\xBC\x8B",		"\x96\x94" => "\xEB\xBC\x8C",		"\x96\x95" => "\xEB\xBC\x8D",		"\x96\x96" => "\xEB\xBC\x8E",		"\x96\x97" => "\xEB\xBC\x8F",		"\x96\x98" => "\xEB\xBC\x90",		"\x96\x99" => "\xEB\xBC\x91",		"\x96\x9A" => "\xEB\xBC\x92",		"\x96\x9B" => "\xEB\xBC\x93",		"\x96\x9C" => "\xEB\xBC\x94",		"\x96\x9D" => "\xEB\xBC\x95",		"\x96\x9E" => "\xEB\xBC\x96",		"\x96\x9F" => "\xEB\xBC\x97",		"\x96\xA0" => "\xEB\xBC\x9A",		"\x96\xA1" => "\xEB\xBC\x9E",		"\x96\xA2" => "\xEB\xBC\x9F",		"\x96\xA3" => "\xEB\xBC\xA0",		"\x96\xA4" => "\xEB\xBC\xA1",		"\x96\xA5" => "\xEB\xBC\xA2",		"\x96\xA6" => "\xEB\xBC\xA3",		"\x96\xA7" => "\xEB\xBC\xA4",		"\x96\xA8" => "\xEB\xBC\xA5",		"\x96\xA9" => "\xEB\xBC\xA6",		"\x96\xAA" => "\xEB\xBC\xA7",		"\x96\xAB" => "\xEB\xBC\xA8",		"\x96\xAC" => "\xEB\xBC\xA9",		"\x96\xAD" => "\xEB\xBC\xAA",		"\x96\xAE" => "\xEB\xBC\xAB",		"\x96\xAF" => "\xEB\xBC\xAC",		"\x96\xB0" => "\xEB\xBC\xAD",		"\x96\xB1" => "\xEB\xBC\xAE",		"\x96\xB2" => "\xEB\xBC\xAF",		"\x96\xB3" => "\xEB\xBC\xB0",		"\x96\xB4" => "\xEB\xBC\xB1",		"\x96\xB5" => "\xEB\xBC\xB2",		"\x96\xB6" => "\xEB\xBC\xB3",		"\x96\xB7" => "\xEB\xBC\xB4",		"\x96\xB8" => "\xEB\xBC\xB5",		"\x96\xB9" => "\xEB\xBC\xB6",		"\x96\xBA" => "\xEB\xBC\xB7",		"\x96\xBB" => "\xEB\xBC\xB8",		"\x96\xBC" => "\xEB\xBC\xB9",		"\x96\xBD" => "\xEB\xBC\xBA",		"\x96\xBE" => "\xEB\xBC\xBB",		"\x96\xBF" => "\xEB\xBC\xBC",		"\x96\xC0" => "\xEB\xBC\xBD",		"\x96\xC1" => "\xEB\xBC\xBE",		"\x96\xC2" => "\xEB\xBC\xBF",		"\x96\xC3" => "\xEB\xBD\x82",		"\x96\xC4" => "\xEB\xBD\x83",		"\x96\xC5" => "\xEB\xBD\x85",		"\x96\xC6" => "\xEB\xBD\x86",		"\x96\xC7" => "\xEB\xBD\x87",		"\x96\xC8" => "\xEB\xBD\x89",		"\x96\xC9" => "\xEB\xBD\x8A",		"\x96\xCA" => "\xEB\xBD\x8B",		"\x96\xCB" => "\xEB\xBD\x8C",		"\x96\xCC" => "\xEB\xBD\x8D",		"\x96\xCD" => "\xEB\xBD\x8E",		"\x96\xCE" => "\xEB\xBD\x8F",		"\x96\xCF" => "\xEB\xBD\x92",		"\x96\xD0" => "\xEB\xBD\x93",		"\x96\xD1" => "\xEB\xBD\x94",		"\x96\xD2" => "\xEB\xBD\x96",		"\x96\xD3" => "\xEB\xBD\x97",		"\x96\xD4" => "\xEB\xBD\x98",		"\x96\xD5" => "\xEB\xBD\x99",		"\x96\xD6" => "\xEB\xBD\x9A",		"\x96\xD7" => "\xEB\xBD\x9B",		"\x96\xD8" => "\xEB\xBD\x9C",		"\x96\xD9" => "\xEB\xBD\x9D",		"\x96\xDA" => "\xEB\xBD\x9E",		"\x96\xDB" => "\xEB\xBD\x9F",		"\x96\xDC" => "\xEB\xBD\xA0",		"\x96\xDD" => "\xEB\xBD\xA1",		"\x96\xDE" => "\xEB\xBD\xA2",		"\x96\xDF" => "\xEB\xBD\xA3",		"\x96\xE0" => "\xEB\xBD\xA4",		"\x96\xE1" => "\xEB\xBD\xA5",		"\x96\xE2" => "\xEB\xBD\xA6",		"\x96\xE3" => "\xEB\xBD\xA7",		"\x96\xE4" => "\xEB\xBD\xA8",		"\x96\xE5" => "\xEB\xBD\xA9",		"\x96\xE6" => "\xEB\xBD\xAA",		"\x96\xE7" => "\xEB\xBD\xAB",		"\x96\xE8" => "\xEB\xBD\xAC",		"\x96\xE9" => "\xEB\xBD\xAD",		"\x96\xEA" => "\xEB\xBD\xAE",		"\x96\xEB" => "\xEB\xBD\xAF",		"\x96\xEC" => "\xEB\xBD\xB0",		"\x96\xED" => "\xEB\xBD\xB1",		"\x96\xEE" => "\xEB\xBD\xB2",		"\x96\xEF" => "\xEB\xBD\xB3",		"\x96\xF0" => "\xEB\xBD\xB4",		"\x96\xF1" => "\xEB\xBD\xB5",		"\x96\xF2" => "\xEB\xBD\xB6",		"\x96\xF3" => "\xEB\xBD\xB7",		"\x96\xF4" => "\xEB\xBD\xB8",		"\x96\xF5" => "\xEB\xBD\xB9",		"\x96\xF6" => "\xEB\xBD\xBA",		"\x96\xF7" => "\xEB\xBD\xBB",		"\x96\xF8" => "\xEB\xBD\xBC",		"\x96\xF9" => "\xEB\xBD\xBD",		"\x96\xFA" => "\xEB\xBD\xBE",		"\x96\xFB" => "\xEB\xBD\xBF",		"\x96\xFC" => "\xEB\xBE\x80",		"\x96\xFD" => "\xEB\xBE\x81",		"\x96\xFE" => "\xEB\xBE\x82",		"\x97\x41" => "\xEB\xBE\x83",		"\x97\x42" => "\xEB\xBE\x84",		"\x97\x43" => "\xEB\xBE\x85",		"\x97\x44" => "\xEB\xBE\x86",		"\x97\x45" => "\xEB\xBE\x87",		"\x97\x46" => "\xEB\xBE\x88",		"\x97\x47" => "\xEB\xBE\x89",		"\x97\x48" => "\xEB\xBE\x8A",		"\x97\x49" => "\xEB\xBE\x8B",		"\x97\x4A" => "\xEB\xBE\x8C",		"\x97\x4B" => "\xEB\xBE\x8D",		"\x97\x4C" => "\xEB\xBE\x8E",		"\x97\x4D" => "\xEB\xBE\x8F",		"\x97\x4E" => "\xEB\xBE\x90",		"\x97\x4F" => "\xEB\xBE\x91",		"\x97\x50" => "\xEB\xBE\x92",		"\x97\x51" => "\xEB\xBE\x93",		"\x97\x52" => "\xEB\xBE\x95",		"\x97\x53" => "\xEB\xBE\x96",		"\x97\x54" => "\xEB\xBE\x97",		"\x97\x55" => "\xEB\xBE\x98",		"\x97\x56" => "\xEB\xBE\x99",		"\x97\x57" => "\xEB\xBE\x9A",		"\x97\x58" => "\xEB\xBE\x9B",		"\x97\x59" => "\xEB\xBE\x9C",		"\x97\x5A" => "\xEB\xBE\x9D",		"\x97\x61" => "\xEB\xBE\x9E",		"\x97\x62" => "\xEB\xBE\x9F",		"\x97\x63" => "\xEB\xBE\xA0",		"\x97\x64" => "\xEB\xBE\xA1",		"\x97\x65" => "\xEB\xBE\xA2",		"\x97\x66" => "\xEB\xBE\xA3",		"\x97\x67" => "\xEB\xBE\xA4",		"\x97\x68" => "\xEB\xBE\xA5",		"\x97\x69" => "\xEB\xBE\xA6",		"\x97\x6A" => "\xEB\xBE\xA7",		"\x97\x6B" => "\xEB\xBE\xA8",		"\x97\x6C" => "\xEB\xBE\xA9",		"\x97\x6D" => "\xEB\xBE\xAA",		"\x97\x6E" => "\xEB\xBE\xAB",		"\x97\x6F" => "\xEB\xBE\xAC",		"\x97\x70" => "\xEB\xBE\xAD",		"\x97\x71" => "\xEB\xBE\xAE",		"\x97\x72" => "\xEB\xBE\xAF",		"\x97\x73" => "\xEB\xBE\xB1",		"\x97\x74" => "\xEB\xBE\xB2",		"\x97\x75" => "\xEB\xBE\xB3",		"\x97\x76" => "\xEB\xBE\xB4",		"\x97\x77" => "\xEB\xBE\xB5",		"\x97\x78" => "\xEB\xBE\xB6",		"\x97\x79" => "\xEB\xBE\xB7",		"\x97\x7A" => "\xEB\xBE\xB8",		"\x97\x81" => "\xEB\xBE\xB9",		"\x97\x82" => "\xEB\xBE\xBA",		"\x97\x83" => "\xEB\xBE\xBB",		"\x97\x84" => "\xEB\xBE\xBC",		"\x97\x85" => "\xEB\xBE\xBD",		"\x97\x86" => "\xEB\xBE\xBE",		"\x97\x87" => "\xEB\xBE\xBF",		"\x97\x88" => "\xEB\xBF\x80",		"\x97\x89" => "\xEB\xBF\x81",		"\x97\x8A" => "\xEB\xBF\x82",		"\x97\x8B" => "\xEB\xBF\x83",		"\x97\x8C" => "\xEB\xBF\x84",		"\x97\x8D" => "\xEB\xBF\x86",		"\x97\x8E" => "\xEB\xBF\x87",		"\x97\x8F" => "\xEB\xBF\x88",		"\x97\x90" => "\xEB\xBF\x89",		"\x97\x91" => "\xEB\xBF\x8A",		"\x97\x92" => "\xEB\xBF\x8B",		"\x97\x93" => "\xEB\xBF\x8E",		"\x97\x94" => "\xEB\xBF\x8F",		"\x97\x95" => "\xEB\xBF\x91",		"\x97\x96" => "\xEB\xBF\x92",		"\x97\x97" => "\xEB\xBF\x93",		"\x97\x98" => "\xEB\xBF\x95",		"\x97\x99" => "\xEB\xBF\x96",		"\x97\x9A" => "\xEB\xBF\x97",		"\x97\x9B" => "\xEB\xBF\x98",		"\x97\x9C" => "\xEB\xBF\x99",		"\x97\x9D" => "\xEB\xBF\x9A",		"\x97\x9E" => "\xEB\xBF\x9B",		"\x97\x9F" => "\xEB\xBF\x9D",		"\x97\xA0" => "\xEB\xBF\x9E",		"\x97\xA1" => "\xEB\xBF\xA0",		"\x97\xA2" => "\xEB\xBF\xA2",		"\x97\xA3" => "\xEB\xBF\xA3",		"\x97\xA4" => "\xEB\xBF\xA4",		"\x97\xA5" => "\xEB\xBF\xA5",		"\x97\xA6" => "\xEB\xBF\xA6",		"\x97\xA7" => "\xEB\xBF\xA7",		"\x97\xA8" => "\xEB\xBF\xA8",		"\x97\xA9" => "\xEB\xBF\xA9",		"\x97\xAA" => "\xEB\xBF\xAA",		"\x97\xAB" => "\xEB\xBF\xAB",		"\x97\xAC" => "\xEB\xBF\xAC",		"\x97\xAD" => "\xEB\xBF\xAD",		"\x97\xAE" => "\xEB\xBF\xAE",		"\x97\xAF" => "\xEB\xBF\xAF",		"\x97\xB0" => "\xEB\xBF\xB0",		"\x97\xB1" => "\xEB\xBF\xB1",		"\x97\xB2" => "\xEB\xBF\xB2",		"\x97\xB3" => "\xEB\xBF\xB3",		"\x97\xB4" => "\xEB\xBF\xB4",		"\x97\xB5" => "\xEB\xBF\xB5",		"\x97\xB6" => "\xEB\xBF\xB6",		"\x97\xB7" => "\xEB\xBF\xB7",		"\x97\xB8" => "\xEB\xBF\xB8",		"\x97\xB9" => "\xEB\xBF\xB9",		"\x97\xBA" => "\xEB\xBF\xBA",		"\x97\xBB" => "\xEB\xBF\xBB",		"\x97\xBC" => "\xEB\xBF\xBC",		"\x97\xBD" => "\xEB\xBF\xBD",		"\x97\xBE" => "\xEB\xBF\xBE",		"\x97\xBF" => "\xEB\xBF\xBF",		"\x97\xC0" => "\xEC\x80\x80",		"\x97\xC1" => "\xEC\x80\x81",		"\x97\xC2" => "\xEC\x80\x82",		"\x97\xC3" => "\xEC\x80\x83",		"\x97\xC4" => "\xEC\x80\x84",		"\x97\xC5" => "\xEC\x80\x85",		"\x97\xC6" => "\xEC\x80\x86",		"\x97\xC7" => "\xEC\x80\x87",		"\x97\xC8" => "\xEC\x80\x88",		"\x97\xC9" => "\xEC\x80\x89",		"\x97\xCA" => "\xEC\x80\x8A",		"\x97\xCB" => "\xEC\x80\x8B",		"\x97\xCC" => "\xEC\x80\x8C",		"\x97\xCD" => "\xEC\x80\x8D",		"\x97\xCE" => "\xEC\x80\x8E",		"\x97\xCF" => "\xEC\x80\x8F",		"\x97\xD0" => "\xEC\x80\x90",		"\x97\xD1" => "\xEC\x80\x91",		"\x97\xD2" => "\xEC\x80\x92",		"\x97\xD3" => "\xEC\x80\x93",		"\x97\xD4" => "\xEC\x80\x94",		"\x97\xD5" => "\xEC\x80\x95",		"\x97\xD6" => "\xEC\x80\x96",		"\x97\xD7" => "\xEC\x80\x97",		"\x97\xD8" => "\xEC\x80\x98",		"\x97\xD9" => "\xEC\x80\x99",		"\x97\xDA" => "\xEC\x80\x9A",		"\x97\xDB" => "\xEC\x80\x9B",		"\x97\xDC" => "\xEC\x80\x9C",		"\x97\xDD" => "\xEC\x80\x9D",		"\x97\xDE" => "\xEC\x80\x9E",		"\x97\xDF" => "\xEC\x80\x9F",		"\x97\xE0" => "\xEC\x80\xA0",		"\x97\xE1" => "\xEC\x80\xA1",		"\x97\xE2" => "\xEC\x80\xA2",		"\x97\xE3" => "\xEC\x80\xA3",		"\x97\xE4" => "\xEC\x80\xA4",		"\x97\xE5" => "\xEC\x80\xA5",		"\x97\xE6" => "\xEC\x80\xA6",		"\x97\xE7" => "\xEC\x80\xA7",		"\x97\xE8" => "\xEC\x80\xA8",		"\x97\xE9" => "\xEC\x80\xA9",		"\x97\xEA" => "\xEC\x80\xAA",		"\x97\xEB" => "\xEC\x80\xAB",		"\x97\xEC" => "\xEC\x80\xAC",		"\x97\xED" => "\xEC\x80\xAD",		"\x97\xEE" => "\xEC\x80\xAE",		"\x97\xEF" => "\xEC\x80\xAF",		"\x97\xF0" => "\xEC\x80\xB0",		"\x97\xF1" => "\xEC\x80\xB1",		"\x97\xF2" => "\xEC\x80\xB2",		"\x97\xF3" => "\xEC\x80\xB3",		"\x97\xF4" => "\xEC\x80\xB4",		"\x97\xF5" => "\xEC\x80\xB5",		"\x97\xF6" => "\xEC\x80\xB6",		"\x97\xF7" => "\xEC\x80\xB7",		"\x97\xF8" => "\xEC\x80\xB8",		"\x97\xF9" => "\xEC\x80\xB9",		"\x97\xFA" => "\xEC\x80\xBA",		"\x97\xFB" => "\xEC\x80\xBB",		"\x97\xFC" => "\xEC\x80\xBD",		"\x97\xFD" => "\xEC\x80\xBE",		"\x97\xFE" => "\xEC\x80\xBF",		"\x98\x41" => "\xEC\x81\x80",		"\x98\x42" => "\xEC\x81\x81",		"\x98\x43" => "\xEC\x81\x82",		"\x98\x44" => "\xEC\x81\x83",		"\x98\x45" => "\xEC\x81\x84",		"\x98\x46" => "\xEC\x81\x85",		"\x98\x47" => "\xEC\x81\x86",		"\x98\x48" => "\xEC\x81\x87",		"\x98\x49" => "\xEC\x81\x88",		"\x98\x4A" => "\xEC\x81\x89",		"\x98\x4B" => "\xEC\x81\x8A",		"\x98\x4C" => "\xEC\x81\x8B",		"\x98\x4D" => "\xEC\x81\x8C",		"\x98\x4E" => "\xEC\x81\x8D",		"\x98\x4F" => "\xEC\x81\x8E",		"\x98\x50" => "\xEC\x81\x8F",		"\x98\x51" => "\xEC\x81\x90",		"\x98\x52" => "\xEC\x81\x92",		"\x98\x53" => "\xEC\x81\x93",		"\x98\x54" => "\xEC\x81\x94",		"\x98\x55" => "\xEC\x81\x95",		"\x98\x56" => "\xEC\x81\x96",		"\x98\x57" => "\xEC\x81\x97",		"\x98\x58" => "\xEC\x81\x99",		"\x98\x59" => "\xEC\x81\x9A",		"\x98\x5A" => "\xEC\x81\x9B",		"\x98\x61" => "\xEC\x81\x9D",		"\x98\x62" => "\xEC\x81\x9E",		"\x98\x63" => "\xEC\x81\x9F",		"\x98\x64" => "\xEC\x81\xA1",		"\x98\x65" => "\xEC\x81\xA2",		"\x98\x66" => "\xEC\x81\xA3",		"\x98\x67" => "\xEC\x81\xA4",		"\x98\x68" => "\xEC\x81\xA5",		"\x98\x69" => "\xEC\x81\xA6",		"\x98\x6A" => "\xEC\x81\xA7",		"\x98\x6B" => "\xEC\x81\xAA",		"\x98\x6C" => "\xEC\x81\xAB",		"\x98\x6D" => "\xEC\x81\xAC",		"\x98\x6E" => "\xEC\x81\xAD",		"\x98\x6F" => "\xEC\x81\xAE",		"\x98\x70" => "\xEC\x81\xAF",		"\x98\x71" => "\xEC\x81\xB0",		"\x98\x72" => "\xEC\x81\xB1",		"\x98\x73" => "\xEC\x81\xB2",		"\x98\x74" => "\xEC\x81\xB3",		"\x98\x75" => "\xEC\x81\xB4",		"\x98\x76" => "\xEC\x81\xB5",		"\x98\x77" => "\xEC\x81\xB6",		"\x98\x78" => "\xEC\x81\xB7",		"\x98\x79" => "\xEC\x81\xB8",		"\x98\x7A" => "\xEC\x81\xB9",		"\x98\x81" => "\xEC\x81\xBA",		"\x98\x82" => "\xEC\x81\xBB",		"\x98\x83" => "\xEC\x81\xBC",		"\x98\x84" => "\xEC\x81\xBD",		"\x98\x85" => "\xEC\x81\xBE",		"\x98\x86" => "\xEC\x81\xBF",		"\x98\x87" => "\xEC\x82\x80",		"\x98\x88" => "\xEC\x82\x81",		"\x98\x89" => "\xEC\x82\x82",		"\x98\x8A" => "\xEC\x82\x83",		"\x98\x8B" => "\xEC\x82\x84",		"\x98\x8C" => "\xEC\x82\x85",		"\x98\x8D" => "\xEC\x82\x86",		"\x98\x8E" => "\xEC\x82\x87",		"\x98\x8F" => "\xEC\x82\x88",		"\x98\x90" => "\xEC\x82\x89",		"\x98\x91" => "\xEC\x82\x8A",		"\x98\x92" => "\xEC\x82\x8B",		"\x98\x93" => "\xEC\x82\x8C",		"\x98\x94" => "\xEC\x82\x8D",		"\x98\x95" => "\xEC\x82\x8E",		"\x98\x96" => "\xEC\x82\x8F",		"\x98\x97" => "\xEC\x82\x92",		"\x98\x98" => "\xEC\x82\x93",		"\x98\x99" => "\xEC\x82\x95",		"\x98\x9A" => "\xEC\x82\x96",		"\x98\x9B" => "\xEC\x82\x97",		"\x98\x9C" => "\xEC\x82\x99",		"\x98\x9D" => "\xEC\x82\x9A",		"\x98\x9E" => "\xEC\x82\x9B",		"\x98\x9F" => "\xEC\x82\x9C",		"\x98\xA0" => "\xEC\x82\x9D",		"\x98\xA1" => "\xEC\x82\x9E",		"\x98\xA2" => "\xEC\x82\x9F",		"\x98\xA3" => "\xEC\x82\xA2",		"\x98\xA4" => "\xEC\x82\xA4",		"\x98\xA5" => "\xEC\x82\xA6",		"\x98\xA6" => "\xEC\x82\xA7",		"\x98\xA7" => "\xEC\x82\xA8",		"\x98\xA8" => "\xEC\x82\xA9",		"\x98\xA9" => "\xEC\x82\xAA",		"\x98\xAA" => "\xEC\x82\xAB",		"\x98\xAB" => "\xEC\x82\xAE",		"\x98\xAC" => "\xEC\x82\xB1",		"\x98\xAD" => "\xEC\x82\xB2",		"\x98\xAE" => "\xEC\x82\xB7",		"\x98\xAF" => "\xEC\x82\xB8",		"\x98\xB0" => "\xEC\x82\xB9",		"\x98\xB1" => "\xEC\x82\xBA",		"\x98\xB2" => "\xEC\x82\xBB",		"\x98\xB3" => "\xEC\x82\xBE",		"\x98\xB4" => "\xEC\x83\x82",		"\x98\xB5" => "\xEC\x83\x83",		"\x98\xB6" => "\xEC\x83\x84",		"\x98\xB7" => "\xEC\x83\x86",		"\x98\xB8" => "\xEC\x83\x87",		"\x98\xB9" => "\xEC\x83\x8A",		"\x98\xBA" => "\xEC\x83\x8B",		"\x98\xBB" => "\xEC\x83\x8D",		"\x98\xBC" => "\xEC\x83\x8E",		"\x98\xBD" => "\xEC\x83\x8F",		"\x98\xBE" => "\xEC\x83\x91",		"\x98\xBF" => "\xEC\x83\x92",		"\x98\xC0" => "\xEC\x83\x93",		"\x98\xC1" => "\xEC\x83\x94",		"\x98\xC2" => "\xEC\x83\x95",		"\x98\xC3" => "\xEC\x83\x96",		"\x98\xC4" => "\xEC\x83\x97",		"\x98\xC5" => "\xEC\x83\x9A",		"\x98\xC6" => "\xEC\x83\x9E",		"\x98\xC7" => "\xEC\x83\x9F",		"\x98\xC8" => "\xEC\x83\xA0",		"\x98\xC9" => "\xEC\x83\xA1",		"\x98\xCA" => "\xEC\x83\xA2",		"\x98\xCB" => "\xEC\x83\xA3",		"\x98\xCC" => "\xEC\x83\xA6",		"\x98\xCD" => "\xEC\x83\xA7",		"\x98\xCE" => "\xEC\x83\xA9",		"\x98\xCF" => "\xEC\x83\xAA",		"\x98\xD0" => "\xEC\x83\xAB",		"\x98\xD1" => "\xEC\x83\xAD",		"\x98\xD2" => "\xEC\x83\xAE",		"\x98\xD3" => "\xEC\x83\xAF",		"\x98\xD4" => "\xEC\x83\xB0",		"\x98\xD5" => "\xEC\x83\xB1",		"\x98\xD6" => "\xEC\x83\xB2",		"\x98\xD7" => "\xEC\x83\xB3",		"\x98\xD8" => "\xEC\x83\xB6",		"\x98\xD9" => "\xEC\x83\xB8",		"\x98\xDA" => "\xEC\x83\xBA",		"\x98\xDB" => "\xEC\x83\xBB",		"\x98\xDC" => "\xEC\x83\xBC",		"\x98\xDD" => "\xEC\x83\xBD",		"\x98\xDE" => "\xEC\x83\xBE",		"\x98\xDF" => "\xEC\x83\xBF",		"\x98\xE0" => "\xEC\x84\x81",		"\x98\xE1" => "\xEC\x84\x82",		"\x98\xE2" => "\xEC\x84\x83",		"\x98\xE3" => "\xEC\x84\x85",		"\x98\xE4" => "\xEC\x84\x86",		"\x98\xE5" => "\xEC\x84\x87",		"\x98\xE6" => "\xEC\x84\x89",		"\x98\xE7" => "\xEC\x84\x8A",		"\x98\xE8" => "\xEC\x84\x8B",		"\x98\xE9" => "\xEC\x84\x8C",		"\x98\xEA" => "\xEC\x84\x8D",		"\x98\xEB" => "\xEC\x84\x8E",		"\x98\xEC" => "\xEC\x84\x8F",		"\x98\xED" => "\xEC\x84\x91",		"\x98\xEE" => "\xEC\x84\x92",		"\x98\xEF" => "\xEC\x84\x93",		"\x98\xF0" => "\xEC\x84\x94",		"\x98\xF1" => "\xEC\x84\x96",		"\x98\xF2" => "\xEC\x84\x97",		"\x98\xF3" => "\xEC\x84\x98",		"\x98\xF4" => "\xEC\x84\x99",		"\x98\xF5" => "\xEC\x84\x9A",		"\x98\xF6" => "\xEC\x84\x9B",		"\x98\xF7" => "\xEC\x84\xA1",		"\x98\xF8" => "\xEC\x84\xA2",		"\x98\xF9" => "\xEC\x84\xA5",		"\x98\xFA" => "\xEC\x84\xA8",		"\x98\xFB" => "\xEC\x84\xA9",		"\x98\xFC" => "\xEC\x84\xAA",		"\x98\xFD" => "\xEC\x84\xAB",		"\x98\xFE" => "\xEC\x84\xAE",		"\x99\x41" => "\xEC\x84\xB2",		"\x99\x42" => "\xEC\x84\xB3",		"\x99\x43" => "\xEC\x84\xB4",		"\x99\x44" => "\xEC\x84\xB5",		"\x99\x45" => "\xEC\x84\xB7",		"\x99\x46" => "\xEC\x84\xBA",		"\x99\x47" => "\xEC\x84\xBB",		"\x99\x48" => "\xEC\x84\xBD",		"\x99\x49" => "\xEC\x84\xBE",		"\x99\x4A" => "\xEC\x84\xBF",		"\x99\x4B" => "\xEC\x85\x81",		"\x99\x4C" => "\xEC\x85\x82",		"\x99\x4D" => "\xEC\x85\x83",		"\x99\x4E" => "\xEC\x85\x84",		"\x99\x4F" => "\xEC\x85\x85",		"\x99\x50" => "\xEC\x85\x86",		"\x99\x51" => "\xEC\x85\x87",		"\x99\x52" => "\xEC\x85\x8A",		"\x99\x53" => "\xEC\x85\x8E",		"\x99\x54" => "\xEC\x85\x8F",		"\x99\x55" => "\xEC\x85\x90",		"\x99\x56" => "\xEC\x85\x91",		"\x99\x57" => "\xEC\x85\x92",		"\x99\x58" => "\xEC\x85\x93",		"\x99\x59" => "\xEC\x85\x96",		"\x99\x5A" => "\xEC\x85\x97",		"\x99\x61" => "\xEC\x85\x99",		"\x99\x62" => "\xEC\x85\x9A",		"\x99\x63" => "\xEC\x85\x9B",		"\x99\x64" => "\xEC\x85\x9D",		"\x99\x65" => "\xEC\x85\x9E",		"\x99\x66" => "\xEC\x85\x9F",		"\x99\x67" => "\xEC\x85\xA0",		"\x99\x68" => "\xEC\x85\xA1",		"\x99\x69" => "\xEC\x85\xA2",		"\x99\x6A" => "\xEC\x85\xA3",		"\x99\x6B" => "\xEC\x85\xA6",		"\x99\x6C" => "\xEC\x85\xAA",		"\x99\x6D" => "\xEC\x85\xAB",		"\x99\x6E" => "\xEC\x85\xAC",		"\x99\x6F" => "\xEC\x85\xAD",		"\x99\x70" => "\xEC\x85\xAE",		"\x99\x71" => "\xEC\x85\xAF",		"\x99\x72" => "\xEC\x85\xB1",		"\x99\x73" => "\xEC\x85\xB2",		"\x99\x74" => "\xEC\x85\xB3",		"\x99\x75" => "\xEC\x85\xB5",		"\x99\x76" => "\xEC\x85\xB6",		"\x99\x77" => "\xEC\x85\xB7",		"\x99\x78" => "\xEC\x85\xB9",		"\x99\x79" => "\xEC\x85\xBA",		"\x99\x7A" => "\xEC\x85\xBB",		"\x99\x81" => "\xEC\x85\xBC",		"\x99\x82" => "\xEC\x85\xBD",		"\x99\x83" => "\xEC\x85\xBE",		"\x99\x84" => "\xEC\x85\xBF",		"\x99\x85" => "\xEC\x86\x80",		"\x99\x86" => "\xEC\x86\x81",		"\x99\x87" => "\xEC\x86\x82",		"\x99\x88" => "\xEC\x86\x83",		"\x99\x89" => "\xEC\x86\x84",		"\x99\x8A" => "\xEC\x86\x86",		"\x99\x8B" => "\xEC\x86\x87",		"\x99\x8C" => "\xEC\x86\x88",		"\x99\x8D" => "\xEC\x86\x89",		"\x99\x8E" => "\xEC\x86\x8A",		"\x99\x8F" => "\xEC\x86\x8B",		"\x99\x90" => "\xEC\x86\x8F",		"\x99\x91" => "\xEC\x86\x91",		"\x99\x92" => "\xEC\x86\x92",		"\x99\x93" => "\xEC\x86\x93",		"\x99\x94" => "\xEC\x86\x95",		"\x99\x95" => "\xEC\x86\x97",		"\x99\x96" => "\xEC\x86\x98",		"\x99\x97" => "\xEC\x86\x99",		"\x99\x98" => "\xEC\x86\x9A",		"\x99\x99" => "\xEC\x86\x9B",		"\x99\x9A" => "\xEC\x86\x9E",		"\x99\x9B" => "\xEC\x86\xA0",		"\x99\x9C" => "\xEC\x86\xA2",		"\x99\x9D" => "\xEC\x86\xA3",		"\x99\x9E" => "\xEC\x86\xA4",		"\x99\x9F" => "\xEC\x86\xA6",		"\x99\xA0" => "\xEC\x86\xA7",		"\x99\xA1" => "\xEC\x86\xAA",		"\x99\xA2" => "\xEC\x86\xAB",		"\x99\xA3" => "\xEC\x86\xAD",		"\x99\xA4" => "\xEC\x86\xAE",		"\x99\xA5" => "\xEC\x86\xAF",		"\x99\xA6" => "\xEC\x86\xB1",		"\x99\xA7" => "\xEC\x86\xB2",		"\x99\xA8" => "\xEC\x86\xB3",		"\x99\xA9" => "\xEC\x86\xB4",		"\x99\xAA" => "\xEC\x86\xB5",		"\x99\xAB" => "\xEC\x86\xB6",		"\x99\xAC" => "\xEC\x86\xB7",		"\x99\xAD" => "\xEC\x86\xB8",		"\x99\xAE" => "\xEC\x86\xB9",		"\x99\xAF" => "\xEC\x86\xBA",		"\x99\xB0" => "\xEC\x86\xBB",		"\x99\xB1" => "\xEC\x86\xBC",		"\x99\xB2" => "\xEC\x86\xBE",		"\x99\xB3" => "\xEC\x86\xBF",		"\x99\xB4" => "\xEC\x87\x80",		"\x99\xB5" => "\xEC\x87\x81",		"\x99\xB6" => "\xEC\x87\x82",		"\x99\xB7" => "\xEC\x87\x83",		"\x99\xB8" => "\xEC\x87\x85",		"\x99\xB9" => "\xEC\x87\x86",		"\x99\xBA" => "\xEC\x87\x87",		"\x99\xBB" => "\xEC\x87\x89",		"\x99\xBC" => "\xEC\x87\x8A",		"\x99\xBD" => "\xEC\x87\x8B",		"\x99\xBE" => "\xEC\x87\x8D",		"\x99\xBF" => "\xEC\x87\x8E",		"\x99\xC0" => "\xEC\x87\x8F",		"\x99\xC1" => "\xEC\x87\x90",		"\x99\xC2" => "\xEC\x87\x91",		"\x99\xC3" => "\xEC\x87\x92",		"\x99\xC4" => "\xEC\x87\x93",		"\x99\xC5" => "\xEC\x87\x95",		"\x99\xC6" => "\xEC\x87\x96",		"\x99\xC7" => "\xEC\x87\x99",		"\x99\xC8" => "\xEC\x87\x9A",		"\x99\xC9" => "\xEC\x87\x9B",		"\x99\xCA" => "\xEC\x87\x9C",		"\x99\xCB" => "\xEC\x87\x9D",		"\x99\xCC" => "\xEC\x87\x9E",		"\x99\xCD" => "\xEC\x87\x9F",		"\x99\xCE" => "\xEC\x87\xA1",		"\x99\xCF" => "\xEC\x87\xA2",		"\x99\xD0" => "\xEC\x87\xA3",		"\x99\xD1" => "\xEC\x87\xA5",		"\x99\xD2" => "\xEC\x87\xA6",		"\x99\xD3" => "\xEC\x87\xA7",		"\x99\xD4" => "\xEC\x87\xA9",		"\x99\xD5" => "\xEC\x87\xAA",		"\x99\xD6" => "\xEC\x87\xAB",		"\x99\xD7" => "\xEC\x87\xAC",		"\x99\xD8" => "\xEC\x87\xAD",		"\x99\xD9" => "\xEC\x87\xAE",		"\x99\xDA" => "\xEC\x87\xAF",		"\x99\xDB" => "\xEC\x87\xB2",		"\x99\xDC" => "\xEC\x87\xB4",		"\x99\xDD" => "\xEC\x87\xB5",		"\x99\xDE" => "\xEC\x87\xB6",		"\x99\xDF" => "\xEC\x87\xB7",		"\x99\xE0" => "\xEC\x87\xB8",		"\x99\xE1" => "\xEC\x87\xB9",		"\x99\xE2" => "\xEC\x87\xBA",		"\x99\xE3" => "\xEC\x87\xBB",		"\x99\xE4" => "\xEC\x87\xBE",		"\x99\xE5" => "\xEC\x87\xBF",		"\x99\xE6" => "\xEC\x88\x81",		"\x99\xE7" => "\xEC\x88\x82",		"\x99\xE8" => "\xEC\x88\x83",		"\x99\xE9" => "\xEC\x88\x85",		"\x99\xEA" => "\xEC\x88\x86",		"\x99\xEB" => "\xEC\x88\x87",		"\x99\xEC" => "\xEC\x88\x88",		"\x99\xED" => "\xEC\x88\x89",		"\x99\xEE" => "\xEC\x88\x8A",		"\x99\xEF" => "\xEC\x88\x8B",		"\x99\xF0" => "\xEC\x88\x8E",		"\x99\xF1" => "\xEC\x88\x90",		"\x99\xF2" => "\xEC\x88\x92",		"\x99\xF3" => "\xEC\x88\x93",		"\x99\xF4" => "\xEC\x88\x94",		"\x99\xF5" => "\xEC\x88\x95",		"\x99\xF6" => "\xEC\x88\x96",		"\x99\xF7" => "\xEC\x88\x97",		"\x99\xF8" => "\xEC\x88\x9A",		"\x99\xF9" => "\xEC\x88\x9B",		"\x99\xFA" => "\xEC\x88\x9D",		"\x99\xFB" => "\xEC\x88\x9E",		"\x99\xFC" => "\xEC\x88\xA1",		"\x99\xFD" => "\xEC\x88\xA2",		"\x99\xFE" => "\xEC\x88\xA3",		"\x9A\x41" => "\xEC\x88\xA4",		"\x9A\x42" => "\xEC\x88\xA5",		"\x9A\x43" => "\xEC\x88\xA6",		"\x9A\x44" => "\xEC\x88\xA7",		"\x9A\x45" => "\xEC\x88\xAA",		"\x9A\x46" => "\xEC\x88\xAC",		"\x9A\x47" => "\xEC\x88\xAE",		"\x9A\x48" => "\xEC\x88\xB0",		"\x9A\x49" => "\xEC\x88\xB3",		"\x9A\x4A" => "\xEC\x88\xB5",		"\x9A\x4B" => "\xEC\x88\xB6",		"\x9A\x4C" => "\xEC\x88\xB7",		"\x9A\x4D" => "\xEC\x88\xB8",		"\x9A\x4E" => "\xEC\x88\xB9",		"\x9A\x4F" => "\xEC\x88\xBA",		"\x9A\x50" => "\xEC\x88\xBB",		"\x9A\x51" => "\xEC\x88\xBC",		"\x9A\x52" => "\xEC\x88\xBD",		"\x9A\x53" => "\xEC\x88\xBE",		"\x9A\x54" => "\xEC\x88\xBF",		"\x9A\x55" => "\xEC\x89\x80",		"\x9A\x56" => "\xEC\x89\x81",		"\x9A\x57" => "\xEC\x89\x82",		"\x9A\x58" => "\xEC\x89\x83",		"\x9A\x59" => "\xEC\x89\x84",		"\x9A\x5A" => "\xEC\x89\x85",		"\x9A\x61" => "\xEC\x89\x86",		"\x9A\x62" => "\xEC\x89\x87",		"\x9A\x63" => "\xEC\x89\x89",		"\x9A\x64" => "\xEC\x89\x8A",		"\x9A\x65" => "\xEC\x89\x8B",		"\x9A\x66" => "\xEC\x89\x8C",		"\x9A\x67" => "\xEC\x89\x8D",		"\x9A\x68" => "\xEC\x89\x8E",		"\x9A\x69" => "\xEC\x89\x8F",		"\x9A\x6A" => "\xEC\x89\x92",		"\x9A\x6B" => "\xEC\x89\x93",		"\x9A\x6C" => "\xEC\x89\x95",		"\x9A\x6D" => "\xEC\x89\x96",		"\x9A\x6E" => "\xEC\x89\x97",		"\x9A\x6F" => "\xEC\x89\x99",		"\x9A\x70" => "\xEC\x89\x9A",		"\x9A\x71" => "\xEC\x89\x9B",		"\x9A\x72" => "\xEC\x89\x9C",		"\x9A\x73" => "\xEC\x89\x9D",		"\x9A\x74" => "\xEC\x89\x9E",		"\x9A\x75" => "\xEC\x89\x9F",		"\x9A\x76" => "\xEC\x89\xA1",		"\x9A\x77" => "\xEC\x89\xA2",		"\x9A\x78" => "\xEC\x89\xA3",		"\x9A\x79" => "\xEC\x89\xA4",		"\x9A\x7A" => "\xEC\x89\xA6",		"\x9A\x81" => "\xEC\x89\xA7",		"\x9A\x82" => "\xEC\x89\xA8",		"\x9A\x83" => "\xEC\x89\xA9",		"\x9A\x84" => "\xEC\x89\xAA",		"\x9A\x85" => "\xEC\x89\xAB",		"\x9A\x86" => "\xEC\x89\xAE",		"\x9A\x87" => "\xEC\x89\xAF",		"\x9A\x88" => "\xEC\x89\xB1",		"\x9A\x89" => "\xEC\x89\xB2",		"\x9A\x8A" => "\xEC\x89\xB3",		"\x9A\x8B" => "\xEC\x89\xB5",		"\x9A\x8C" => "\xEC\x89\xB6",		"\x9A\x8D" => "\xEC\x89\xB7",		"\x9A\x8E" => "\xEC\x89\xB8",		"\x9A\x8F" => "\xEC\x89\xB9",		"\x9A\x90" => "\xEC\x89\xBA",		"\x9A\x91" => "\xEC\x89\xBB",		"\x9A\x92" => "\xEC\x89\xBE",		"\x9A\x93" => "\xEC\x8A\x80",		"\x9A\x94" => "\xEC\x8A\x82",		"\x9A\x95" => "\xEC\x8A\x83",		"\x9A\x96" => "\xEC\x8A\x84",		"\x9A\x97" => "\xEC\x8A\x85",		"\x9A\x98" => "\xEC\x8A\x86",		"\x9A\x99" => "\xEC\x8A\x87",		"\x9A\x9A" => "\xEC\x8A\x8A",		"\x9A\x9B" => "\xEC\x8A\x8B",		"\x9A\x9C" => "\xEC\x8A\x8C",		"\x9A\x9D" => "\xEC\x8A\x8D",		"\x9A\x9E" => "\xEC\x8A\x8E",		"\x9A\x9F" => "\xEC\x8A\x8F",		"\x9A\xA0" => "\xEC\x8A\x91",		"\x9A\xA1" => "\xEC\x8A\x92",		"\x9A\xA2" => "\xEC\x8A\x93",		"\x9A\xA3" => "\xEC\x8A\x94",		"\x9A\xA4" => "\xEC\x8A\x95",		"\x9A\xA5" => "\xEC\x8A\x96",		"\x9A\xA6" => "\xEC\x8A\x97",		"\x9A\xA7" => "\xEC\x8A\x99",		"\x9A\xA8" => "\xEC\x8A\x9A",		"\x9A\xA9" => "\xEC\x8A\x9C",		"\x9A\xAA" => "\xEC\x8A\x9E",		"\x9A\xAB" => "\xEC\x8A\x9F",		"\x9A\xAC" => "\xEC\x8A\xA0",		"\x9A\xAD" => "\xEC\x8A\xA1",		"\x9A\xAE" => "\xEC\x8A\xA2",		"\x9A\xAF" => "\xEC\x8A\xA3",		"\x9A\xB0" => "\xEC\x8A\xA6",		"\x9A\xB1" => "\xEC\x8A\xA7",		"\x9A\xB2" => "\xEC\x8A\xA9",		"\x9A\xB3" => "\xEC\x8A\xAA",		"\x9A\xB4" => "\xEC\x8A\xAB",		"\x9A\xB5" => "\xEC\x8A\xAE",		"\x9A\xB6" => "\xEC\x8A\xAF",		"\x9A\xB7" => "\xEC\x8A\xB0",		"\x9A\xB8" => "\xEC\x8A\xB1",		"\x9A\xB9" => "\xEC\x8A\xB2",		"\x9A\xBA" => "\xEC\x8A\xB3",		"\x9A\xBB" => "\xEC\x8A\xB6",		"\x9A\xBC" => "\xEC\x8A\xB8",		"\x9A\xBD" => "\xEC\x8A\xBA",		"\x9A\xBE" => "\xEC\x8A\xBB",		"\x9A\xBF" => "\xEC\x8A\xBC",		"\x9A\xC0" => "\xEC\x8A\xBD",		"\x9A\xC1" => "\xEC\x8A\xBE",		"\x9A\xC2" => "\xEC\x8A\xBF",		"\x9A\xC3" => "\xEC\x8B\x80",		"\x9A\xC4" => "\xEC\x8B\x81",		"\x9A\xC5" => "\xEC\x8B\x82",		"\x9A\xC6" => "\xEC\x8B\x83",		"\x9A\xC7" => "\xEC\x8B\x84",		"\x9A\xC8" => "\xEC\x8B\x85",		"\x9A\xC9" => "\xEC\x8B\x86",		"\x9A\xCA" => "\xEC\x8B\x87",		"\x9A\xCB" => "\xEC\x8B\x88",		"\x9A\xCC" => "\xEC\x8B\x89",		"\x9A\xCD" => "\xEC\x8B\x8A",		"\x9A\xCE" => "\xEC\x8B\x8B",		"\x9A\xCF" => "\xEC\x8B\x8C",		"\x9A\xD0" => "\xEC\x8B\x8D",		"\x9A\xD1" => "\xEC\x8B\x8E",		"\x9A\xD2" => "\xEC\x8B\x8F",		"\x9A\xD3" => "\xEC\x8B\x90",		"\x9A\xD4" => "\xEC\x8B\x91",		"\x9A\xD5" => "\xEC\x8B\x92",		"\x9A\xD6" => "\xEC\x8B\x93",		"\x9A\xD7" => "\xEC\x8B\x94",		"\x9A\xD8" => "\xEC\x8B\x95",		"\x9A\xD9" => "\xEC\x8B\x96",		"\x9A\xDA" => "\xEC\x8B\x97",		"\x9A\xDB" => "\xEC\x8B\x98",		"\x9A\xDC" => "\xEC\x8B\x99",		"\x9A\xDD" => "\xEC\x8B\x9A",		"\x9A\xDE" => "\xEC\x8B\x9B",		"\x9A\xDF" => "\xEC\x8B\x9E",		"\x9A\xE0" => "\xEC\x8B\x9F",		"\x9A\xE1" => "\xEC\x8B\xA1",		"\x9A\xE2" => "\xEC\x8B\xA2",		"\x9A\xE3" => "\xEC\x8B\xA5",		"\x9A\xE4" => "\xEC\x8B\xA6",		"\x9A\xE5" => "\xEC\x8B\xA7",		"\x9A\xE6" => "\xEC\x8B\xA8",		"\x9A\xE7" => "\xEC\x8B\xA9",		"\x9A\xE8" => "\xEC\x8B\xAA",		"\x9A\xE9" => "\xEC\x8B\xAE",		"\x9A\xEA" => "\xEC\x8B\xB0",		"\x9A\xEB" => "\xEC\x8B\xB2",		"\x9A\xEC" => "\xEC\x8B\xB3",		"\x9A\xED" => "\xEC\x8B\xB4",		"\x9A\xEE" => "\xEC\x8B\xB5",		"\x9A\xEF" => "\xEC\x8B\xB7",		"\x9A\xF0" => "\xEC\x8B\xBA",		"\x9A\xF1" => "\xEC\x8B\xBD",		"\x9A\xF2" => "\xEC\x8B\xBE",		"\x9A\xF3" => "\xEC\x8B\xBF",		"\x9A\xF4" => "\xEC\x8C\x81",		"\x9A\xF5" => "\xEC\x8C\x82",		"\x9A\xF6" => "\xEC\x8C\x83",		"\x9A\xF7" => "\xEC\x8C\x84",		"\x9A\xF8" => "\xEC\x8C\x85",		"\x9A\xF9" => "\xEC\x8C\x86",		"\x9A\xFA" => "\xEC\x8C\x87",		"\x9A\xFB" => "\xEC\x8C\x8A",		"\x9A\xFC" => "\xEC\x8C\x8B",		"\x9A\xFD" => "\xEC\x8C\x8E",		"\x9A\xFE" => "\xEC\x8C\x8F",		"\x9B\x41" => "\xEC\x8C\x90",		"\x9B\x42" => "\xEC\x8C\x91",		"\x9B\x43" => "\xEC\x8C\x92",		"\x9B\x44" => "\xEC\x8C\x96",		"\x9B\x45" => "\xEC\x8C\x97",		"\x9B\x46" => "\xEC\x8C\x99",		"\x9B\x47" => "\xEC\x8C\x9A",		"\x9B\x48" => "\xEC\x8C\x9B",		"\x9B\x49" => "\xEC\x8C\x9D",		"\x9B\x4A" => "\xEC\x8C\x9E",		"\x9B\x4B" => "\xEC\x8C\x9F",		"\x9B\x4C" => "\xEC\x8C\xA0",		"\x9B\x4D" => "\xEC\x8C\xA1",		"\x9B\x4E" => "\xEC\x8C\xA2",		"\x9B\x4F" => "\xEC\x8C\xA3",		"\x9B\x50" => "\xEC\x8C\xA6",		"\x9B\x51" => "\xEC\x8C\xA7",		"\x9B\x52" => "\xEC\x8C\xAA",		"\x9B\x53" => "\xEC\x8C\xAB",		"\x9B\x54" => "\xEC\x8C\xAC",		"\x9B\x55" => "\xEC\x8C\xAD",		"\x9B\x56" => "\xEC\x8C\xAE",		"\x9B\x57" => "\xEC\x8C\xAF",		"\x9B\x58" => "\xEC\x8C\xB0",		"\x9B\x59" => "\xEC\x8C\xB1",		"\x9B\x5A" => "\xEC\x8C\xB2",		"\x9B\x61" => "\xEC\x8C\xB3",		"\x9B\x62" => "\xEC\x8C\xB4",		"\x9B\x63" => "\xEC\x8C\xB5",		"\x9B\x64" => "\xEC\x8C\xB6",		"\x9B\x65" => "\xEC\x8C\xB7",		"\x9B\x66" => "\xEC\x8C\xB8",		"\x9B\x67" => "\xEC\x8C\xB9",		"\x9B\x68" => "\xEC\x8C\xBA",		"\x9B\x69" => "\xEC\x8C\xBB",		"\x9B\x6A" => "\xEC\x8C\xBC",		"\x9B\x6B" => "\xEC\x8C\xBD",		"\x9B\x6C" => "\xEC\x8C\xBE",		"\x9B\x6D" => "\xEC\x8C\xBF",		"\x9B\x6E" => "\xEC\x8D\x80",		"\x9B\x6F" => "\xEC\x8D\x81",		"\x9B\x70" => "\xEC\x8D\x82",		"\x9B\x71" => "\xEC\x8D\x83",		"\x9B\x72" => "\xEC\x8D\x84",		"\x9B\x73" => "\xEC\x8D\x86",		"\x9B\x74" => "\xEC\x8D\x87",		"\x9B\x75" => "\xEC\x8D\x88",		"\x9B\x76" => "\xEC\x8D\x89",		"\x9B\x77" => "\xEC\x8D\x8A",		"\x9B\x78" => "\xEC\x8D\x8B",		"\x9B\x79" => "\xEC\x8D\x8C",		"\x9B\x7A" => "\xEC\x8D\x8D",		"\x9B\x81" => "\xEC\x8D\x8E",		"\x9B\x82" => "\xEC\x8D\x8F",		"\x9B\x83" => "\xEC\x8D\x90",		"\x9B\x84" => "\xEC\x8D\x91",		"\x9B\x85" => "\xEC\x8D\x92",		"\x9B\x86" => "\xEC\x8D\x93",		"\x9B\x87" => "\xEC\x8D\x94",		"\x9B\x88" => "\xEC\x8D\x95",		"\x9B\x89" => "\xEC\x8D\x96",		"\x9B\x8A" => "\xEC\x8D\x97",		"\x9B\x8B" => "\xEC\x8D\x98",		"\x9B\x8C" => "\xEC\x8D\x99",		"\x9B\x8D" => "\xEC\x8D\x9A",		"\x9B\x8E" => "\xEC\x8D\x9B",		"\x9B\x8F" => "\xEC\x8D\x9C",		"\x9B\x90" => "\xEC\x8D\x9D",		"\x9B\x91" => "\xEC\x8D\x9E",		"\x9B\x92" => "\xEC\x8D\x9F",		"\x9B\x93" => "\xEC\x8D\xA0",		"\x9B\x94" => "\xEC\x8D\xA1",		"\x9B\x95" => "\xEC\x8D\xA2",		"\x9B\x96" => "\xEC\x8D\xA3",		"\x9B\x97" => "\xEC\x8D\xA4",		"\x9B\x98" => "\xEC\x8D\xA5",		"\x9B\x99" => "\xEC\x8D\xA6",		"\x9B\x9A" => "\xEC\x8D\xA7",		"\x9B\x9B" => "\xEC\x8D\xAA",		"\x9B\x9C" => "\xEC\x8D\xAB",		"\x9B\x9D" => "\xEC\x8D\xAD",		"\x9B\x9E" => "\xEC\x8D\xAE",		"\x9B\x9F" => "\xEC\x8D\xAF",		"\x9B\xA0" => "\xEC\x8D\xB1",		"\x9B\xA1" => "\xEC\x8D\xB3",		"\x9B\xA2" => "\xEC\x8D\xB4",		"\x9B\xA3" => "\xEC\x8D\xB5",		"\x9B\xA4" => "\xEC\x8D\xB6",		"\x9B\xA5" => "\xEC\x8D\xB7",		"\x9B\xA6" => "\xEC\x8D\xBA",		"\x9B\xA7" => "\xEC\x8D\xBB",		"\x9B\xA8" => "\xEC\x8D\xBE",		"\x9B\xA9" => "\xEC\x8D\xBF",		"\x9B\xAA" => "\xEC\x8E\x80",		"\x9B\xAB" => "\xEC\x8E\x81",		"\x9B\xAC" => "\xEC\x8E\x82",		"\x9B\xAD" => "\xEC\x8E\x83",		"\x9B\xAE" => "\xEC\x8E\x85",		"\x9B\xAF" => "\xEC\x8E\x86",		"\x9B\xB0" => "\xEC\x8E\x87",		"\x9B\xB1" => "\xEC\x8E\x89",		"\x9B\xB2" => "\xEC\x8E\x8A",		"\x9B\xB3" => "\xEC\x8E\x8B",		"\x9B\xB4" => "\xEC\x8E\x8D",		"\x9B\xB5" => "\xEC\x8E\x8E",		"\x9B\xB6" => "\xEC\x8E\x8F",		"\x9B\xB7" => "\xEC\x8E\x90",		"\x9B\xB8" => "\xEC\x8E\x91",		"\x9B\xB9" => "\xEC\x8E\x92",		"\x9B\xBA" => "\xEC\x8E\x93",		"\x9B\xBB" => "\xEC\x8E\x94",		"\x9B\xBC" => "\xEC\x8E\x95",		"\x9B\xBD" => "\xEC\x8E\x96",		"\x9B\xBE" => "\xEC\x8E\x97",		"\x9B\xBF" => "\xEC\x8E\x98",		"\x9B\xC0" => "\xEC\x8E\x99",		"\x9B\xC1" => "\xEC\x8E\x9A",		"\x9B\xC2" => "\xEC\x8E\x9B",		"\x9B\xC3" => "\xEC\x8E\x9C",		"\x9B\xC4" => "\xEC\x8E\x9D",		"\x9B\xC5" => "\xEC\x8E\x9E",		"\x9B\xC6" => "\xEC\x8E\x9F",		"\x9B\xC7" => "\xEC\x8E\xA0",		"\x9B\xC8" => "\xEC\x8E\xA1",		"\x9B\xC9" => "\xEC\x8E\xA2",		"\x9B\xCA" => "\xEC\x8E\xA3",		"\x9B\xCB" => "\xEC\x8E\xA4",		"\x9B\xCC" => "\xEC\x8E\xA5",		"\x9B\xCD" => "\xEC\x8E\xA6",		"\x9B\xCE" => "\xEC\x8E\xA7",		"\x9B\xCF" => "\xEC\x8E\xA8",		"\x9B\xD0" => "\xEC\x8E\xA9",		"\x9B\xD1" => "\xEC\x8E\xAA",		"\x9B\xD2" => "\xEC\x8E\xAB",		"\x9B\xD3" => "\xEC\x8E\xAC",		"\x9B\xD4" => "\xEC\x8E\xAD",		"\x9B\xD5" => "\xEC\x8E\xAE",		"\x9B\xD6" => "\xEC\x8E\xAF",		"\x9B\xD7" => "\xEC\x8E\xB0",		"\x9B\xD8" => "\xEC\x8E\xB1",		"\x9B\xD9" => "\xEC\x8E\xB2",		"\x9B\xDA" => "\xEC\x8E\xB3",		"\x9B\xDB" => "\xEC\x8E\xB4",		"\x9B\xDC" => "\xEC\x8E\xB5",		"\x9B\xDD" => "\xEC\x8E\xB6",		"\x9B\xDE" => "\xEC\x8E\xB7",		"\x9B\xDF" => "\xEC\x8E\xB8",		"\x9B\xE0" => "\xEC\x8E\xB9",		"\x9B\xE1" => "\xEC\x8E\xBA",		"\x9B\xE2" => "\xEC\x8E\xBB",		"\x9B\xE3" => "\xEC\x8E\xBC",		"\x9B\xE4" => "\xEC\x8E\xBD",		"\x9B\xE5" => "\xEC\x8E\xBE",		"\x9B\xE6" => "\xEC\x8E\xBF",		"\x9B\xE7" => "\xEC\x8F\x81",		"\x9B\xE8" => "\xEC\x8F\x82",		"\x9B\xE9" => "\xEC\x8F\x83",		"\x9B\xEA" => "\xEC\x8F\x84",		"\x9B\xEB" => "\xEC\x8F\x85",		"\x9B\xEC" => "\xEC\x8F\x86",		"\x9B\xED" => "\xEC\x8F\x87",		"\x9B\xEE" => "\xEC\x8F\x88",		"\x9B\xEF" => "\xEC\x8F\x89",		"\x9B\xF0" => "\xEC\x8F\x8A",		"\x9B\xF1" => "\xEC\x8F\x8B",		"\x9B\xF2" => "\xEC\x8F\x8C",		"\x9B\xF3" => "\xEC\x8F\x8D",		"\x9B\xF4" => "\xEC\x8F\x8E",		"\x9B\xF5" => "\xEC\x8F\x8F",		"\x9B\xF6" => "\xEC\x8F\x90",		"\x9B\xF7" => "\xEC\x8F\x91",		"\x9B\xF8" => "\xEC\x8F\x92",		"\x9B\xF9" => "\xEC\x8F\x93",		"\x9B\xFA" => "\xEC\x8F\x94",		"\x9B\xFB" => "\xEC\x8F\x95",		"\x9B\xFC" => "\xEC\x8F\x96",		"\x9B\xFD" => "\xEC\x8F\x97",		"\x9B\xFE" => "\xEC\x8F\x9A",		"\x9C\x41" => "\xEC\x8F\x9B",		"\x9C\x42" => "\xEC\x8F\x9D",		"\x9C\x43" => "\xEC\x8F\x9E",		"\x9C\x44" => "\xEC\x8F\xA1",		"\x9C\x45" => "\xEC\x8F\xA3",		"\x9C\x46" => "\xEC\x8F\xA4",		"\x9C\x47" => "\xEC\x8F\xA5",		"\x9C\x48" => "\xEC\x8F\xA6",		"\x9C\x49" => "\xEC\x8F\xA7",		"\x9C\x4A" => "\xEC\x8F\xAA",		"\x9C\x4B" => "\xEC\x8F\xAB",		"\x9C\x4C" => "\xEC\x8F\xAC",		"\x9C\x4D" => "\xEC\x8F\xAE",		"\x9C\x4E" => "\xEC\x8F\xAF",		"\x9C\x4F" => "\xEC\x8F\xB0",		"\x9C\x50" => "\xEC\x8F\xB1",		"\x9C\x51" => "\xEC\x8F\xB2",		"\x9C\x52" => "\xEC\x8F\xB3",		"\x9C\x53" => "\xEC\x8F\xB6",		"\x9C\x54" => "\xEC\x8F\xB7",		"\x9C\x55" => "\xEC\x8F\xB9",		"\x9C\x56" => "\xEC\x8F\xBA",		"\x9C\x57" => "\xEC\x8F\xBB",		"\x9C\x58" => "\xEC\x8F\xBC",		"\x9C\x59" => "\xEC\x8F\xBD",		"\x9C\x5A" => "\xEC\x8F\xBE",		"\x9C\x61" => "\xEC\x8F\xBF",		"\x9C\x62" => "\xEC\x90\x80",		"\x9C\x63" => "\xEC\x90\x81",		"\x9C\x64" => "\xEC\x90\x82",		"\x9C\x65" => "\xEC\x90\x83",		"\x9C\x66" => "\xEC\x90\x84",		"\x9C\x67" => "\xEC\x90\x85",		"\x9C\x68" => "\xEC\x90\x86",		"\x9C\x69" => "\xEC\x90\x87",		"\x9C\x6A" => "\xEC\x90\x89",		"\x9C\x6B" => "\xEC\x90\x8A",		"\x9C\x6C" => "\xEC\x90\x8B",		"\x9C\x6D" => "\xEC\x90\x8C",		"\x9C\x6E" => "\xEC\x90\x8D",		"\x9C\x6F" => "\xEC\x90\x8E",		"\x9C\x70" => "\xEC\x90\x8F",		"\x9C\x71" => "\xEC\x90\x91",		"\x9C\x72" => "\xEC\x90\x92",		"\x9C\x73" => "\xEC\x90\x93",		"\x9C\x74" => "\xEC\x90\x94",		"\x9C\x75" => "\xEC\x90\x95",		"\x9C\x76" => "\xEC\x90\x96",		"\x9C\x77" => "\xEC\x90\x97",		"\x9C\x78" => "\xEC\x90\x98",		"\x9C\x79" => "\xEC\x90\x99",		"\x9C\x7A" => "\xEC\x90\x9A",		"\x9C\x81" => "\xEC\x90\x9B",		"\x9C\x82" => "\xEC\x90\x9C",		"\x9C\x83" => "\xEC\x90\x9D",		"\x9C\x84" => "\xEC\x90\x9E",		"\x9C\x85" => "\xEC\x90\x9F",		"\x9C\x86" => "\xEC\x90\xA0",		"\x9C\x87" => "\xEC\x90\xA1",		"\x9C\x88" => "\xEC\x90\xA2",		"\x9C\x89" => "\xEC\x90\xA3",		"\x9C\x8A" => "\xEC\x90\xA5",		"\x9C\x8B" => "\xEC\x90\xA6",		"\x9C\x8C" => "\xEC\x90\xA7",		"\x9C\x8D" => "\xEC\x90\xA8",		"\x9C\x8E" => "\xEC\x90\xA9",		"\x9C\x8F" => "\xEC\x90\xAA",		"\x9C\x90" => "\xEC\x90\xAB",		"\x9C\x91" => "\xEC\x90\xAD",		"\x9C\x92" => "\xEC\x90\xAE",		"\x9C\x93" => "\xEC\x90\xAF",		"\x9C\x94" => "\xEC\x90\xB1",		"\x9C\x95" => "\xEC\x90\xB2",		"\x9C\x96" => "\xEC\x90\xB3",		"\x9C\x97" => "\xEC\x90\xB5",		"\x9C\x98" => "\xEC\x90\xB6",		"\x9C\x99" => "\xEC\x90\xB7",		"\x9C\x9A" => "\xEC\x90\xB8",		"\x9C\x9B" => "\xEC\x90\xB9",		"\x9C\x9C" => "\xEC\x90\xBA",		"\x9C\x9D" => "\xEC\x90\xBB",		"\x9C\x9E" => "\xEC\x90\xBE",		"\x9C\x9F" => "\xEC\x90\xBF",		"\x9C\xA0" => "\xEC\x91\x80",		"\x9C\xA1" => "\xEC\x91\x81",		"\x9C\xA2" => "\xEC\x91\x82",		"\x9C\xA3" => "\xEC\x91\x83",		"\x9C\xA4" => "\xEC\x91\x84",		"\x9C\xA5" => "\xEC\x91\x85",		"\x9C\xA6" => "\xEC\x91\x86",		"\x9C\xA7" => "\xEC\x91\x87",		"\x9C\xA8" => "\xEC\x91\x89",		"\x9C\xA9" => "\xEC\x91\x8A",		"\x9C\xAA" => "\xEC\x91\x8B",		"\x9C\xAB" => "\xEC\x91\x8C",		"\x9C\xAC" => "\xEC\x91\x8D",		"\x9C\xAD" => "\xEC\x91\x8E",		"\x9C\xAE" => "\xEC\x91\x8F",		"\x9C\xAF" => "\xEC\x91\x90",		"\x9C\xB0" => "\xEC\x91\x91",		"\x9C\xB1" => "\xEC\x91\x92",		"\x9C\xB2" => "\xEC\x91\x93",		"\x9C\xB3" => "\xEC\x91\x94",		"\x9C\xB4" => "\xEC\x91\x95",		"\x9C\xB5" => "\xEC\x91\x96",		"\x9C\xB6" => "\xEC\x91\x97",		"\x9C\xB7" => "\xEC\x91\x98",		"\x9C\xB8" => "\xEC\x91\x99",		"\x9C\xB9" => "\xEC\x91\x9A",		"\x9C\xBA" => "\xEC\x91\x9B",		"\x9C\xBB" => "\xEC\x91\x9C",		"\x9C\xBC" => "\xEC\x91\x9D",		"\x9C\xBD" => "\xEC\x91\x9E",		"\x9C\xBE" => "\xEC\x91\x9F",		"\x9C\xBF" => "\xEC\x91\xA0",		"\x9C\xC0" => "\xEC\x91\xA1",		"\x9C\xC1" => "\xEC\x91\xA2",		"\x9C\xC2" => "\xEC\x91\xA3",		"\x9C\xC3" => "\xEC\x91\xA6",		"\x9C\xC4" => "\xEC\x91\xA7",		"\x9C\xC5" => "\xEC\x91\xA9",		"\x9C\xC6" => "\xEC\x91\xAA",		"\x9C\xC7" => "\xEC\x91\xAB",		"\x9C\xC8" => "\xEC\x91\xAD",		"\x9C\xC9" => "\xEC\x91\xAE",		"\x9C\xCA" => "\xEC\x91\xAF",		"\x9C\xCB" => "\xEC\x91\xB0",		"\x9C\xCC" => "\xEC\x91\xB1",		"\x9C\xCD" => "\xEC\x91\xB2",		"\x9C\xCE" => "\xEC\x91\xB3",		"\x9C\xCF" => "\xEC\x91\xB6",		"\x9C\xD0" => "\xEC\x91\xB7",		"\x9C\xD1" => "\xEC\x91\xB8",		"\x9C\xD2" => "\xEC\x91\xBA",		"\x9C\xD3" => "\xEC\x91\xBB",		"\x9C\xD4" => "\xEC\x91\xBC",		"\x9C\xD5" => "\xEC\x91\xBD",		"\x9C\xD6" => "\xEC\x91\xBE",		"\x9C\xD7" => "\xEC\x91\xBF",		"\x9C\xD8" => "\xEC\x92\x81",		"\x9C\xD9" => "\xEC\x92\x82",		"\x9C\xDA" => "\xEC\x92\x83",		"\x9C\xDB" => "\xEC\x92\x84",		"\x9C\xDC" => "\xEC\x92\x85",		"\x9C\xDD" => "\xEC\x92\x86",		"\x9C\xDE" => "\xEC\x92\x87",		"\x9C\xDF" => "\xEC\x92\x88",		"\x9C\xE0" => "\xEC\x92\x89",		"\x9C\xE1" => "\xEC\x92\x8A",		"\x9C\xE2" => "\xEC\x92\x8B",		"\x9C\xE3" => "\xEC\x92\x8C",		"\x9C\xE4" => "\xEC\x92\x8D",		"\x9C\xE5" => "\xEC\x92\x8E",		"\x9C\xE6" => "\xEC\x92\x8F",		"\x9C\xE7" => "\xEC\x92\x90",		"\x9C\xE8" => "\xEC\x92\x91",		"\x9C\xE9" => "\xEC\x92\x92",		"\x9C\xEA" => "\xEC\x92\x93",		"\x9C\xEB" => "\xEC\x92\x95",		"\x9C\xEC" => "\xEC\x92\x96",		"\x9C\xED" => "\xEC\x92\x97",		"\x9C\xEE" => "\xEC\x92\x98",		"\x9C\xEF" => "\xEC\x92\x99",		"\x9C\xF0" => "\xEC\x92\x9A",		"\x9C\xF1" => "\xEC\x92\x9B",		"\x9C\xF2" => "\xEC\x92\x9D",		"\x9C\xF3" => "\xEC\x92\x9E",		"\x9C\xF4" => "\xEC\x92\x9F",		"\x9C\xF5" => "\xEC\x92\xA0",		"\x9C\xF6" => "\xEC\x92\xA1",		"\x9C\xF7" => "\xEC\x92\xA2",		"\x9C\xF8" => "\xEC\x92\xA3",		"\x9C\xF9" => "\xEC\x92\xA4",		"\x9C\xFA" => "\xEC\x92\xA5",		"\x9C\xFB" => "\xEC\x92\xA6",		"\x9C\xFC" => "\xEC\x92\xA7",		"\x9C\xFD" => "\xEC\x92\xA8",		"\x9C\xFE" => "\xEC\x92\xA9",		"\x9D\x41" => "\xEC\x92\xAA",		"\x9D\x42" => "\xEC\x92\xAB",		"\x9D\x43" => "\xEC\x92\xAC",		"\x9D\x44" => "\xEC\x92\xAD",		"\x9D\x45" => "\xEC\x92\xAE",		"\x9D\x46" => "\xEC\x92\xAF",		"\x9D\x47" => "\xEC\x92\xB0",		"\x9D\x48" => "\xEC\x92\xB1",		"\x9D\x49" => "\xEC\x92\xB2",		"\x9D\x4A" => "\xEC\x92\xB3",		"\x9D\x4B" => "\xEC\x92\xB4",		"\x9D\x4C" => "\xEC\x92\xB5",		"\x9D\x4D" => "\xEC\x92\xB6",		"\x9D\x4E" => "\xEC\x92\xB7",		"\x9D\x4F" => "\xEC\x92\xB9",		"\x9D\x50" => "\xEC\x92\xBA",		"\x9D\x51" => "\xEC\x92\xBB",		"\x9D\x52" => "\xEC\x92\xBD",		"\x9D\x53" => "\xEC\x92\xBE",		"\x9D\x54" => "\xEC\x92\xBF",		"\x9D\x55" => "\xEC\x93\x80",		"\x9D\x56" => "\xEC\x93\x81",		"\x9D\x57" => "\xEC\x93\x82",		"\x9D\x58" => "\xEC\x93\x83",		"\x9D\x59" => "\xEC\x93\x84",		"\x9D\x5A" => "\xEC\x93\x85",		"\x9D\x61" => "\xEC\x93\x86",		"\x9D\x62" => "\xEC\x93\x87",		"\x9D\x63" => "\xEC\x93\x88",		"\x9D\x64" => "\xEC\x93\x89",		"\x9D\x65" => "\xEC\x93\x8A",		"\x9D\x66" => "\xEC\x93\x8B",		"\x9D\x67" => "\xEC\x93\x8C",		"\x9D\x68" => "\xEC\x93\x8D",		"\x9D\x69" => "\xEC\x93\x8E",		"\x9D\x6A" => "\xEC\x93\x8F",		"\x9D\x6B" => "\xEC\x93\x90",		"\x9D\x6C" => "\xEC\x93\x91",		"\x9D\x6D" => "\xEC\x93\x92",		"\x9D\x6E" => "\xEC\x93\x93",		"\x9D\x6F" => "\xEC\x93\x94",		"\x9D\x70" => "\xEC\x93\x95",		"\x9D\x71" => "\xEC\x93\x96",		"\x9D\x72" => "\xEC\x93\x97",		"\x9D\x73" => "\xEC\x93\x98",		"\x9D\x74" => "\xEC\x93\x99",		"\x9D\x75" => "\xEC\x93\x9A",		"\x9D\x76" => "\xEC\x93\x9B",		"\x9D\x77" => "\xEC\x93\x9C",		"\x9D\x78" => "\xEC\x93\x9D",		"\x9D\x79" => "\xEC\x93\x9E",		"\x9D\x7A" => "\xEC\x93\x9F",		"\x9D\x81" => "\xEC\x93\xA0",		"\x9D\x82" => "\xEC\x93\xA1",		"\x9D\x83" => "\xEC\x93\xA2",		"\x9D\x84" => "\xEC\x93\xA3",		"\x9D\x85" => "\xEC\x93\xA4",		"\x9D\x86" => "\xEC\x93\xA5",		"\x9D\x87" => "\xEC\x93\xA6",		"\x9D\x88" => "\xEC\x93\xA7",		"\x9D\x89" => "\xEC\x93\xA8",		"\x9D\x8A" => "\xEC\x93\xAA",		"\x9D\x8B" => "\xEC\x93\xAB",		"\x9D\x8C" => "\xEC\x93\xAC",		"\x9D\x8D" => "\xEC\x93\xAD",		"\x9D\x8E" => "\xEC\x93\xAE",		"\x9D\x8F" => "\xEC\x93\xAF",		"\x9D\x90" => "\xEC\x93\xB2",		"\x9D\x91" => "\xEC\x93\xB3",		"\x9D\x92" => "\xEC\x93\xB5",		"\x9D\x93" => "\xEC\x93\xB6",		"\x9D\x94" => "\xEC\x93\xB7",		"\x9D\x95" => "\xEC\x93\xB9",		"\x9D\x96" => "\xEC\x93\xBB",		"\x9D\x97" => "\xEC\x93\xBC",		"\x9D\x98" => "\xEC\x93\xBD",		"\x9D\x99" => "\xEC\x93\xBE",		"\x9D\x9A" => "\xEC\x94\x82",		"\x9D\x9B" => "\xEC\x94\x83",		"\x9D\x9C" => "\xEC\x94\x84",		"\x9D\x9D" => "\xEC\x94\x85",		"\x9D\x9E" => "\xEC\x94\x86",		"\x9D\x9F" => "\xEC\x94\x87",		"\x9D\xA0" => "\xEC\x94\x88",		"\x9D\xA1" => "\xEC\x94\x89",		"\x9D\xA2" => "\xEC\x94\x8A",		"\x9D\xA3" => "\xEC\x94\x8B",		"\x9D\xA4" => "\xEC\x94\x8D",		"\x9D\xA5" => "\xEC\x94\x8E",		"\x9D\xA6" => "\xEC\x94\x8F",		"\x9D\xA7" => "\xEC\x94\x91",		"\x9D\xA8" => "\xEC\x94\x92",		"\x9D\xA9" => "\xEC\x94\x93",		"\x9D\xAA" => "\xEC\x94\x95",		"\x9D\xAB" => "\xEC\x94\x96",		"\x9D\xAC" => "\xEC\x94\x97",		"\x9D\xAD" => "\xEC\x94\x98",		"\x9D\xAE" => "\xEC\x94\x99",		"\x9D\xAF" => "\xEC\x94\x9A",		"\x9D\xB0" => "\xEC\x94\x9B",		"\x9D\xB1" => "\xEC\x94\x9D",		"\x9D\xB2" => "\xEC\x94\x9E",		"\x9D\xB3" => "\xEC\x94\x9F",		"\x9D\xB4" => "\xEC\x94\xA0",		"\x9D\xB5" => "\xEC\x94\xA1",		"\x9D\xB6" => "\xEC\x94\xA2",		"\x9D\xB7" => "\xEC\x94\xA3",		"\x9D\xB8" => "\xEC\x94\xA4",		"\x9D\xB9" => "\xEC\x94\xA5",		"\x9D\xBA" => "\xEC\x94\xA6",		"\x9D\xBB" => "\xEC\x94\xA7",		"\x9D\xBC" => "\xEC\x94\xAA",		"\x9D\xBD" => "\xEC\x94\xAB",		"\x9D\xBE" => "\xEC\x94\xAD",		"\x9D\xBF" => "\xEC\x94\xAE",		"\x9D\xC0" => "\xEC\x94\xAF",		"\x9D\xC1" => "\xEC\x94\xB1",		"\x9D\xC2" => "\xEC\x94\xB2",		"\x9D\xC3" => "\xEC\x94\xB3",		"\x9D\xC4" => "\xEC\x94\xB4",		"\x9D\xC5" => "\xEC\x94\xB5",		"\x9D\xC6" => "\xEC\x94\xB6",		"\x9D\xC7" => "\xEC\x94\xB7",		"\x9D\xC8" => "\xEC\x94\xBA",		"\x9D\xC9" => "\xEC\x94\xBC",		"\x9D\xCA" => "\xEC\x94\xBE",		"\x9D\xCB" => "\xEC\x94\xBF",		"\x9D\xCC" => "\xEC\x95\x80",		"\x9D\xCD" => "\xEC\x95\x81",		"\x9D\xCE" => "\xEC\x95\x82",		"\x9D\xCF" => "\xEC\x95\x83",		"\x9D\xD0" => "\xEC\x95\x86",		"\x9D\xD1" => "\xEC\x95\x87",		"\x9D\xD2" => "\xEC\x95\x8B",		"\x9D\xD3" => "\xEC\x95\x8F",		"\x9D\xD4" => "\xEC\x95\x90",		"\x9D\xD5" => "\xEC\x95\x91",		"\x9D\xD6" => "\xEC\x95\x92",		"\x9D\xD7" => "\xEC\x95\x96",		"\x9D\xD8" => "\xEC\x95\x9A",		"\x9D\xD9" => "\xEC\x95\x9B",		"\x9D\xDA" => "\xEC\x95\x9C",		"\x9D\xDB" => "\xEC\x95\x9F",		"\x9D\xDC" => "\xEC\x95\xA2",		"\x9D\xDD" => "\xEC\x95\xA3",		"\x9D\xDE" => "\xEC\x95\xA5",		"\x9D\xDF" => "\xEC\x95\xA6",		"\x9D\xE0" => "\xEC\x95\xA7",		"\x9D\xE1" => "\xEC\x95\xA9",		"\x9D\xE2" => "\xEC\x95\xAA",		"\x9D\xE3" => "\xEC\x95\xAB",		"\x9D\xE4" => "\xEC\x95\xAC",		"\x9D\xE5" => "\xEC\x95\xAD",		"\x9D\xE6" => "\xEC\x95\xAE",		"\x9D\xE7" => "\xEC\x95\xAF",		"\x9D\xE8" => "\xEC\x95\xB2",		"\x9D\xE9" => "\xEC\x95\xB6",		"\x9D\xEA" => "\xEC\x95\xB7",		"\x9D\xEB" => "\xEC\x95\xB8",		"\x9D\xEC" => "\xEC\x95\xB9",		"\x9D\xED" => "\xEC\x95\xBA",		"\x9D\xEE" => "\xEC\x95\xBB",		"\x9D\xEF" => "\xEC\x95\xBE",		"\x9D\xF0" => "\xEC\x95\xBF",		"\x9D\xF1" => "\xEC\x96\x81",		"\x9D\xF2" => "\xEC\x96\x82",		"\x9D\xF3" => "\xEC\x96\x83",		"\x9D\xF4" => "\xEC\x96\x85",		"\x9D\xF5" => "\xEC\x96\x86",		"\x9D\xF6" => "\xEC\x96\x88",		"\x9D\xF7" => "\xEC\x96\x89",		"\x9D\xF8" => "\xEC\x96\x8A",		"\x9D\xF9" => "\xEC\x96\x8B",		"\x9D\xFA" => "\xEC\x96\x8E",		"\x9D\xFB" => "\xEC\x96\x90",		"\x9D\xFC" => "\xEC\x96\x92",		"\x9D\xFD" => "\xEC\x96\x93",		"\x9D\xFE" => "\xEC\x96\x94",		"\x9E\x41" => "\xEC\x96\x96",		"\x9E\x42" => "\xEC\x96\x99",		"\x9E\x43" => "\xEC\x96\x9A",		"\x9E\x44" => "\xEC\x96\x9B",		"\x9E\x45" => "\xEC\x96\x9D",		"\x9E\x46" => "\xEC\x96\x9E",		"\x9E\x47" => "\xEC\x96\x9F",		"\x9E\x48" => "\xEC\x96\xA1",		"\x9E\x49" => "\xEC\x96\xA2",		"\x9E\x4A" => "\xEC\x96\xA3",		"\x9E\x4B" => "\xEC\x96\xA4",		"\x9E\x4C" => "\xEC\x96\xA5",		"\x9E\x4D" => "\xEC\x96\xA6",		"\x9E\x4E" => "\xEC\x96\xA7",		"\x9E\x4F" => "\xEC\x96\xA8",		"\x9E\x50" => "\xEC\x96\xAA",		"\x9E\x51" => "\xEC\x96\xAB",		"\x9E\x52" => "\xEC\x96\xAC",		"\x9E\x53" => "\xEC\x96\xAD",		"\x9E\x54" => "\xEC\x96\xAE",		"\x9E\x55" => "\xEC\x96\xAF",		"\x9E\x56" => "\xEC\x96\xB0",		"\x9E\x57" => "\xEC\x96\xB1",		"\x9E\x58" => "\xEC\x96\xB2",		"\x9E\x59" => "\xEC\x96\xB3",		"\x9E\x5A" => "\xEC\x96\xB6",		"\x9E\x61" => "\xEC\x96\xB7",		"\x9E\x62" => "\xEC\x96\xBA",		"\x9E\x63" => "\xEC\x96\xBF",		"\x9E\x64" => "\xEC\x97\x80",		"\x9E\x65" => "\xEC\x97\x81",		"\x9E\x66" => "\xEC\x97\x82",		"\x9E\x67" => "\xEC\x97\x83",		"\x9E\x68" => "\xEC\x97\x8B",		"\x9E\x69" => "\xEC\x97\x8D",		"\x9E\x6A" => "\xEC\x97\x8F",		"\x9E\x6B" => "\xEC\x97\x92",		"\x9E\x6C" => "\xEC\x97\x93",		"\x9E\x6D" => "\xEC\x97\x95",		"\x9E\x6E" => "\xEC\x97\x96",		"\x9E\x6F" => "\xEC\x97\x97",		"\x9E\x70" => "\xEC\x97\x99",		"\x9E\x71" => "\xEC\x97\x9A",		"\x9E\x72" => "\xEC\x97\x9B",		"\x9E\x73" => "\xEC\x97\x9C",		"\x9E\x74" => "\xEC\x97\x9D",		"\x9E\x75" => "\xEC\x97\x9E",		"\x9E\x76" => "\xEC\x97\x9F",		"\x9E\x77" => "\xEC\x97\xA2",		"\x9E\x78" => "\xEC\x97\xA4",		"\x9E\x79" => "\xEC\x97\xA6",		"\x9E\x7A" => "\xEC\x97\xA7",		"\x9E\x81" => "\xEC\x97\xA8",		"\x9E\x82" => "\xEC\x97\xA9",		"\x9E\x83" => "\xEC\x97\xAA",		"\x9E\x84" => "\xEC\x97\xAB",		"\x9E\x85" => "\xEC\x97\xAF",		"\x9E\x86" => "\xEC\x97\xB1",		"\x9E\x87" => "\xEC\x97\xB2",		"\x9E\x88" => "\xEC\x97\xB3",		"\x9E\x89" => "\xEC\x97\xB5",		"\x9E\x8A" => "\xEC\x97\xB8",		"\x9E\x8B" => "\xEC\x97\xB9",		"\x9E\x8C" => "\xEC\x97\xBA",		"\x9E\x8D" => "\xEC\x97\xBB",		"\x9E\x8E" => "\xEC\x98\x82",		"\x9E\x8F" => "\xEC\x98\x83",		"\x9E\x90" => "\xEC\x98\x84",		"\x9E\x91" => "\xEC\x98\x89",		"\x9E\x92" => "\xEC\x98\x8A",		"\x9E\x93" => "\xEC\x98\x8B",		"\x9E\x94" => "\xEC\x98\x8D",		"\x9E\x95" => "\xEC\x98\x8E",		"\x9E\x96" => "\xEC\x98\x8F",		"\x9E\x97" => "\xEC\x98\x91",		"\x9E\x98" => "\xEC\x98\x92",		"\x9E\x99" => "\xEC\x98\x93",		"\x9E\x9A" => "\xEC\x98\x94",		"\x9E\x9B" => "\xEC\x98\x95",		"\x9E\x9C" => "\xEC\x98\x96",		"\x9E\x9D" => "\xEC\x98\x97",		"\x9E\x9E" => "\xEC\x98\x9A",		"\x9E\x9F" => "\xEC\x98\x9D",		"\x9E\xA0" => "\xEC\x98\x9E",		"\x9E\xA1" => "\xEC\x98\x9F",		"\x9E\xA2" => "\xEC\x98\xA0",		"\x9E\xA3" => "\xEC\x98\xA1",		"\x9E\xA4" => "\xEC\x98\xA2",		"\x9E\xA5" => "\xEC\x98\xA3",		"\x9E\xA6" => "\xEC\x98\xA6",		"\x9E\xA7" => "\xEC\x98\xA7",		"\x9E\xA8" => "\xEC\x98\xA9",		"\x9E\xA9" => "\xEC\x98\xAA",		"\x9E\xAA" => "\xEC\x98\xAB",		"\x9E\xAB" => "\xEC\x98\xAF",		"\x9E\xAC" => "\xEC\x98\xB1",		"\x9E\xAD" => "\xEC\x98\xB2",		"\x9E\xAE" => "\xEC\x98\xB6",		"\x9E\xAF" => "\xEC\x98\xB8",		"\x9E\xB0" => "\xEC\x98\xBA",		"\x9E\xB1" => "\xEC\x98\xBC",		"\x9E\xB2" => "\xEC\x98\xBD",		"\x9E\xB3" => "\xEC\x98\xBE",		"\x9E\xB4" => "\xEC\x98\xBF",		"\x9E\xB5" => "\xEC\x99\x82",		"\x9E\xB6" => "\xEC\x99\x83",		"\x9E\xB7" => "\xEC\x99\x85",		"\x9E\xB8" => "\xEC\x99\x86",		"\x9E\xB9" => "\xEC\x99\x87",		"\x9E\xBA" => "\xEC\x99\x89",		"\x9E\xBB" => "\xEC\x99\x8A",		"\x9E\xBC" => "\xEC\x99\x8B",		"\x9E\xBD" => "\xEC\x99\x8C",		"\x9E\xBE" => "\xEC\x99\x8D",		"\x9E\xBF" => "\xEC\x99\x8E",		"\x9E\xC0" => "\xEC\x99\x8F",		"\x9E\xC1" => "\xEC\x99\x92",		"\x9E\xC2" => "\xEC\x99\x96",		"\x9E\xC3" => "\xEC\x99\x97",		"\x9E\xC4" => "\xEC\x99\x98",		"\x9E\xC5" => "\xEC\x99\x99",		"\x9E\xC6" => "\xEC\x99\x9A",		"\x9E\xC7" => "\xEC\x99\x9B",		"\x9E\xC8" => "\xEC\x99\x9E",		"\x9E\xC9" => "\xEC\x99\x9F",		"\x9E\xCA" => "\xEC\x99\xA1",		"\x9E\xCB" => "\xEC\x99\xA2",		"\x9E\xCC" => "\xEC\x99\xA3",		"\x9E\xCD" => "\xEC\x99\xA4",		"\x9E\xCE" => "\xEC\x99\xA5",		"\x9E\xCF" => "\xEC\x99\xA6",		"\x9E\xD0" => "\xEC\x99\xA7",		"\x9E\xD1" => "\xEC\x99\xA8",		"\x9E\xD2" => "\xEC\x99\xA9",		"\x9E\xD3" => "\xEC\x99\xAA",		"\x9E\xD4" => "\xEC\x99\xAB",		"\x9E\xD5" => "\xEC\x99\xAD",		"\x9E\xD6" => "\xEC\x99\xAE",		"\x9E\xD7" => "\xEC\x99\xB0",		"\x9E\xD8" => "\xEC\x99\xB2",		"\x9E\xD9" => "\xEC\x99\xB3",		"\x9E\xDA" => "\xEC\x99\xB4",		"\x9E\xDB" => "\xEC\x99\xB5",		"\x9E\xDC" => "\xEC\x99\xB6",		"\x9E\xDD" => "\xEC\x99\xB7",		"\x9E\xDE" => "\xEC\x99\xBA",		"\x9E\xDF" => "\xEC\x99\xBB",		"\x9E\xE0" => "\xEC\x99\xBD",		"\x9E\xE1" => "\xEC\x99\xBE",		"\x9E\xE2" => "\xEC\x99\xBF",		"\x9E\xE3" => "\xEC\x9A\x81",		"\x9E\xE4" => "\xEC\x9A\x82",		"\x9E\xE5" => "\xEC\x9A\x83",		"\x9E\xE6" => "\xEC\x9A\x84",		"\x9E\xE7" => "\xEC\x9A\x85",		"\x9E\xE8" => "\xEC\x9A\x86",		"\x9E\xE9" => "\xEC\x9A\x87",		"\x9E\xEA" => "\xEC\x9A\x8A",		"\x9E\xEB" => "\xEC\x9A\x8C",		"\x9E\xEC" => "\xEC\x9A\x8E",		"\x9E\xED" => "\xEC\x9A\x8F",		"\x9E\xEE" => "\xEC\x9A\x90",		"\x9E\xEF" => "\xEC\x9A\x91",		"\x9E\xF0" => "\xEC\x9A\x92",		"\x9E\xF1" => "\xEC\x9A\x93",		"\x9E\xF2" => "\xEC\x9A\x96",		"\x9E\xF3" => "\xEC\x9A\x97",		"\x9E\xF4" => "\xEC\x9A\x99",		"\x9E\xF5" => "\xEC\x9A\x9A",		"\x9E\xF6" => "\xEC\x9A\x9B",		"\x9E\xF7" => "\xEC\x9A\x9D",		"\x9E\xF8" => "\xEC\x9A\x9E",		"\x9E\xF9" => "\xEC\x9A\x9F",		"\x9E\xFA" => "\xEC\x9A\xA0",		"\x9E\xFB" => "\xEC\x9A\xA1",		"\x9E\xFC" => "\xEC\x9A\xA2",		"\x9E\xFD" => "\xEC\x9A\xA3",		"\x9E\xFE" => "\xEC\x9A\xA6",		"\x9F\x41" => "\xEC\x9A\xA8",		"\x9F\x42" => "\xEC\x9A\xAA",		"\x9F\x43" => "\xEC\x9A\xAB",		"\x9F\x44" => "\xEC\x9A\xAC",		"\x9F\x45" => "\xEC\x9A\xAD",		"\x9F\x46" => "\xEC\x9A\xAE",		"\x9F\x47" => "\xEC\x9A\xAF",		"\x9F\x48" => "\xEC\x9A\xB2",		"\x9F\x49" => "\xEC\x9A\xB3",		"\x9F\x4A" => "\xEC\x9A\xB5",		"\x9F\x4B" => "\xEC\x9A\xB6",		"\x9F\x4C" => "\xEC\x9A\xB7",		"\x9F\x4D" => "\xEC\x9A\xBB",		"\x9F\x4E" => "\xEC\x9A\xBC",		"\x9F\x4F" => "\xEC\x9A\xBD",		"\x9F\x50" => "\xEC\x9A\xBE",		"\x9F\x51" => "\xEC\x9A\xBF",		"\x9F\x52" => "\xEC\x9B\x82",		"\x9F\x53" => "\xEC\x9B\x84",		"\x9F\x54" => "\xEC\x9B\x86",		"\x9F\x55" => "\xEC\x9B\x87",		"\x9F\x56" => "\xEC\x9B\x88",		"\x9F\x57" => "\xEC\x9B\x89",		"\x9F\x58" => "\xEC\x9B\x8A",		"\x9F\x59" => "\xEC\x9B\x8B",		"\x9F\x5A" => "\xEC\x9B\x8E",		"\x9F\x61" => "\xEC\x9B\x8F",		"\x9F\x62" => "\xEC\x9B\x91",		"\x9F\x63" => "\xEC\x9B\x92",		"\x9F\x64" => "\xEC\x9B\x93",		"\x9F\x65" => "\xEC\x9B\x95",		"\x9F\x66" => "\xEC\x9B\x96",		"\x9F\x67" => "\xEC\x9B\x97",		"\x9F\x68" => "\xEC\x9B\x98",		"\x9F\x69" => "\xEC\x9B\x99",		"\x9F\x6A" => "\xEC\x9B\x9A",		"\x9F\x6B" => "\xEC\x9B\x9B",		"\x9F\x6C" => "\xEC\x9B\x9E",		"\x9F\x6D" => "\xEC\x9B\x9F",		"\x9F\x6E" => "\xEC\x9B\xA2",		"\x9F\x6F" => "\xEC\x9B\xA3",		"\x9F\x70" => "\xEC\x9B\xA4",		"\x9F\x71" => "\xEC\x9B\xA5",		"\x9F\x72" => "\xEC\x9B\xA6",		"\x9F\x73" => "\xEC\x9B\xA7",		"\x9F\x74" => "\xEC\x9B\xAA",		"\x9F\x75" => "\xEC\x9B\xAB",		"\x9F\x76" => "\xEC\x9B\xAD",		"\x9F\x77" => "\xEC\x9B\xAE",		"\x9F\x78" => "\xEC\x9B\xAF",		"\x9F\x79" => "\xEC\x9B\xB1",		"\x9F\x7A" => "\xEC\x9B\xB2",		"\x9F\x81" => "\xEC\x9B\xB3",		"\x9F\x82" => "\xEC\x9B\xB4",		"\x9F\x83" => "\xEC\x9B\xB5",		"\x9F\x84" => "\xEC\x9B\xB6",		"\x9F\x85" => "\xEC\x9B\xB7",		"\x9F\x86" => "\xEC\x9B\xBA",		"\x9F\x87" => "\xEC\x9B\xBB",		"\x9F\x88" => "\xEC\x9B\xBC",		"\x9F\x89" => "\xEC\x9B\xBE",		"\x9F\x8A" => "\xEC\x9B\xBF",		"\x9F\x8B" => "\xEC\x9C\x80",		"\x9F\x8C" => "\xEC\x9C\x81",		"\x9F\x8D" => "\xEC\x9C\x82",		"\x9F\x8E" => "\xEC\x9C\x83",		"\x9F\x8F" => "\xEC\x9C\x86",		"\x9F\x90" => "\xEC\x9C\x87",		"\x9F\x91" => "\xEC\x9C\x89",		"\x9F\x92" => "\xEC\x9C\x8A",		"\x9F\x93" => "\xEC\x9C\x8B",		"\x9F\x94" => "\xEC\x9C\x8D",		"\x9F\x95" => "\xEC\x9C\x8E",		"\x9F\x96" => "\xEC\x9C\x8F",		"\x9F\x97" => "\xEC\x9C\x90",		"\x9F\x98" => "\xEC\x9C\x91",		"\x9F\x99" => "\xEC\x9C\x92",		"\x9F\x9A" => "\xEC\x9C\x93",		"\x9F\x9B" => "\xEC\x9C\x96",		"\x9F\x9C" => "\xEC\x9C\x98",		"\x9F\x9D" => "\xEC\x9C\x9A",		"\x9F\x9E" => "\xEC\x9C\x9B",		"\x9F\x9F" => "\xEC\x9C\x9C",		"\x9F\xA0" => "\xEC\x9C\x9D",		"\x9F\xA1" => "\xEC\x9C\x9E",		"\x9F\xA2" => "\xEC\x9C\x9F",		"\x9F\xA3" => "\xEC\x9C\xA2",		"\x9F\xA4" => "\xEC\x9C\xA3",		"\x9F\xA5" => "\xEC\x9C\xA5",		"\x9F\xA6" => "\xEC\x9C\xA6",		"\x9F\xA7" => "\xEC\x9C\xA7",		"\x9F\xA8" => "\xEC\x9C\xA9",		"\x9F\xA9" => "\xEC\x9C\xAA",		"\x9F\xAA" => "\xEC\x9C\xAB",		"\x9F\xAB" => "\xEC\x9C\xAC",		"\x9F\xAC" => "\xEC\x9C\xAD",		"\x9F\xAD" => "\xEC\x9C\xAE",		"\x9F\xAE" => "\xEC\x9C\xAF",		"\x9F\xAF" => "\xEC\x9C\xB2",		"\x9F\xB0" => "\xEC\x9C\xB4",		"\x9F\xB1" => "\xEC\x9C\xB6",		"\x9F\xB2" => "\xEC\x9C\xB8",		"\x9F\xB3" => "\xEC\x9C\xB9",		"\x9F\xB4" => "\xEC\x9C\xBA",		"\x9F\xB5" => "\xEC\x9C\xBB",		"\x9F\xB6" => "\xEC\x9C\xBE",		"\x9F\xB7" => "\xEC\x9C\xBF",		"\x9F\xB8" => "\xEC\x9D\x81",		"\x9F\xB9" => "\xEC\x9D\x82",		"\x9F\xBA" => "\xEC\x9D\x83",		"\x9F\xBB" => "\xEC\x9D\x85",		"\x9F\xBC" => "\xEC\x9D\x86",		"\x9F\xBD" => "\xEC\x9D\x87",		"\x9F\xBE" => "\xEC\x9D\x88",		"\x9F\xBF" => "\xEC\x9D\x89",		"\x9F\xC0" => "\xEC\x9D\x8B",		"\x9F\xC1" => "\xEC\x9D\x8E",		"\x9F\xC2" => "\xEC\x9D\x90",		"\x9F\xC3" => "\xEC\x9D\x99",		"\x9F\xC4" => "\xEC\x9D\x9A",		"\x9F\xC5" => "\xEC\x9D\x9B",		"\x9F\xC6" => "\xEC\x9D\x9D",		"\x9F\xC7" => "\xEC\x9D\x9E",		"\x9F\xC8" => "\xEC\x9D\x9F",		"\x9F\xC9" => "\xEC\x9D\xA1",		"\x9F\xCA" => "\xEC\x9D\xA2",		"\x9F\xCB" => "\xEC\x9D\xA3",		"\x9F\xCC" => "\xEC\x9D\xA4",		"\x9F\xCD" => "\xEC\x9D\xA5",		"\x9F\xCE" => "\xEC\x9D\xA6",		"\x9F\xCF" => "\xEC\x9D\xA7",		"\x9F\xD0" => "\xEC\x9D\xA9",		"\x9F\xD1" => "\xEC\x9D\xAA",		"\x9F\xD2" => "\xEC\x9D\xAC",		"\x9F\xD3" => "\xEC\x9D\xAD",		"\x9F\xD4" => "\xEC\x9D\xAE",		"\x9F\xD5" => "\xEC\x9D\xAF",		"\x9F\xD6" => "\xEC\x9D\xB0",		"\x9F\xD7" => "\xEC\x9D\xB1",		"\x9F\xD8" => "\xEC\x9D\xB2",		"\x9F\xD9" => "\xEC\x9D\xB3",		"\x9F\xDA" => "\xEC\x9D\xB6",		"\x9F\xDB" => "\xEC\x9D\xB7",		"\x9F\xDC" => "\xEC\x9D\xB9",		"\x9F\xDD" => "\xEC\x9D\xBA",		"\x9F\xDE" => "\xEC\x9D\xBB",		"\x9F\xDF" => "\xEC\x9D\xBF",		"\x9F\xE0" => "\xEC\x9E\x80",		"\x9F\xE1" => "\xEC\x9E\x81",		"\x9F\xE2" => "\xEC\x9E\x82",		"\x9F\xE3" => "\xEC\x9E\x86",		"\x9F\xE4" => "\xEC\x9E\x8B",		"\x9F\xE5" => "\xEC\x9E\x8C",		"\x9F\xE6" => "\xEC\x9E\x8D",		"\x9F\xE7" => "\xEC\x9E\x8F",		"\x9F\xE8" => "\xEC\x9E\x92",		"\x9F\xE9" => "\xEC\x9E\x93",		"\x9F\xEA" => "\xEC\x9E\x95",		"\x9F\xEB" => "\xEC\x9E\x99",		"\x9F\xEC" => "\xEC\x9E\x9B",		"\x9F\xED" => "\xEC\x9E\x9C",		"\x9F\xEE" => "\xEC\x9E\x9D",		"\x9F\xEF" => "\xEC\x9E\x9E",		"\x9F\xF0" => "\xEC\x9E\x9F",		"\x9F\xF1" => "\xEC\x9E\xA2",		"\x9F\xF2" => "\xEC\x9E\xA7",		"\x9F\xF3" => "\xEC\x9E\xA8",		"\x9F\xF4" => "\xEC\x9E\xA9",		"\x9F\xF5" => "\xEC\x9E\xAA",		"\x9F\xF6" => "\xEC\x9E\xAB",		"\x9F\xF7" => "\xEC\x9E\xAE",		"\x9F\xF8" => "\xEC\x9E\xAF",		"\x9F\xF9" => "\xEC\x9E\xB1",		"\x9F\xFA" => "\xEC\x9E\xB2",		"\x9F\xFB" => "\xEC\x9E\xB3",		"\x9F\xFC" => "\xEC\x9E\xB5",		"\x9F\xFD" => "\xEC\x9E\xB6",		"\x9F\xFE" => "\xEC\x9E\xB7",		"\xA0\x41" => "\xEC\x9E\xB8",		"\xA0\x42" => "\xEC\x9E\xB9",		"\xA0\x43" => "\xEC\x9E\xBA",		"\xA0\x44" => "\xEC\x9E\xBB",		"\xA0\x45" => "\xEC\x9E\xBE",		"\xA0\x46" => "\xEC\x9F\x82",		"\xA0\x47" => "\xEC\x9F\x83",		"\xA0\x48" => "\xEC\x9F\x84",		"\xA0\x49" => "\xEC\x9F\x85",		"\xA0\x4A" => "\xEC\x9F\x86",		"\xA0\x4B" => "\xEC\x9F\x87",		"\xA0\x4C" => "\xEC\x9F\x8A",		"\xA0\x4D" => "\xEC\x9F\x8B",		"\xA0\x4E" => "\xEC\x9F\x8D",		"\xA0\x4F" => "\xEC\x9F\x8F",		"\xA0\x50" => "\xEC\x9F\x91",		"\xA0\x51" => "\xEC\x9F\x92",		"\xA0\x52" => "\xEC\x9F\x93",		"\xA0\x53" => "\xEC\x9F\x94",		"\xA0\x54" => "\xEC\x9F\x95",		"\xA0\x55" => "\xEC\x9F\x96",		"\xA0\x56" => "\xEC\x9F\x97",		"\xA0\x57" => "\xEC\x9F\x99",		"\xA0\x58" => "\xEC\x9F\x9A",		"\xA0\x59" => "\xEC\x9F\x9B",		"\xA0\x5A" => "\xEC\x9F\x9C",		"\xA0\x61" => "\xEC\x9F\x9E",		"\xA0\x62" => "\xEC\x9F\x9F",		"\xA0\x63" => "\xEC\x9F\xA0",		"\xA0\x64" => "\xEC\x9F\xA1",		"\xA0\x65" => "\xEC\x9F\xA2",		"\xA0\x66" => "\xEC\x9F\xA3",		"\xA0\x67" => "\xEC\x9F\xA5",		"\xA0\x68" => "\xEC\x9F\xA6",		"\xA0\x69" => "\xEC\x9F\xA7",		"\xA0\x6A" => "\xEC\x9F\xA9",		"\xA0\x6B" => "\xEC\x9F\xAA",		"\xA0\x6C" => "\xEC\x9F\xAB",		"\xA0\x6D" => "\xEC\x9F\xAD",		"\xA0\x6E" => "\xEC\x9F\xAE",		"\xA0\x6F" => "\xEC\x9F\xAF",		"\xA0\x70" => "\xEC\x9F\xB0",		"\xA0\x71" => "\xEC\x9F\xB1",		"\xA0\x72" => "\xEC\x9F\xB2",		"\xA0\x73" => "\xEC\x9F\xB3",		"\xA0\x74" => "\xEC\x9F\xB4",		"\xA0\x75" => "\xEC\x9F\xB5",		"\xA0\x76" => "\xEC\x9F\xB6",		"\xA0\x77" => "\xEC\x9F\xB7",		"\xA0\x78" => "\xEC\x9F\xB8",		"\xA0\x79" => "\xEC\x9F\xB9",		"\xA0\x7A" => "\xEC\x9F\xBA",		"\xA0\x81" => "\xEC\x9F\xBB",		"\xA0\x82" => "\xEC\x9F\xBC",		"\xA0\x83" => "\xEC\x9F\xBD",		"\xA0\x84" => "\xEC\x9F\xBE",		"\xA0\x85" => "\xEC\x9F\xBF",		"\xA0\x86" => "\xEC\xA0\x82",		"\xA0\x87" => "\xEC\xA0\x83",		"\xA0\x88" => "\xEC\xA0\x85",		"\xA0\x89" => "\xEC\xA0\x86",		"\xA0\x8A" => "\xEC\xA0\x87",		"\xA0\x8B" => "\xEC\xA0\x89",		"\xA0\x8C" => "\xEC\xA0\x8B",		"\xA0\x8D" => "\xEC\xA0\x8C",		"\xA0\x8E" => "\xEC\xA0\x8D",		"\xA0\x8F" => "\xEC\xA0\x8E",		"\xA0\x90" => "\xEC\xA0\x8F",		"\xA0\x91" => "\xEC\xA0\x92",		"\xA0\x92" => "\xEC\xA0\x94",		"\xA0\x93" => "\xEC\xA0\x97",		"\xA0\x94" => "\xEC\xA0\x98",		"\xA0\x95" => "\xEC\xA0\x99",		"\xA0\x96" => "\xEC\xA0\x9A",		"\xA0\x97" => "\xEC\xA0\x9B",		"\xA0\x98" => "\xEC\xA0\x9E",		"\xA0\x99" => "\xEC\xA0\x9F",		"\xA0\x9A" => "\xEC\xA0\xA1",		"\xA0\x9B" => "\xEC\xA0\xA2",		"\xA0\x9C" => "\xEC\xA0\xA3",		"\xA0\x9D" => "\xEC\xA0\xA5",		"\xA0\x9E" => "\xEC\xA0\xA6",		"\xA0\x9F" => "\xEC\xA0\xA7",		"\xA0\xA0" => "\xEC\xA0\xA8",		"\xA0\xA1" => "\xEC\xA0\xA9",		"\xA0\xA2" => "\xEC\xA0\xAA",		"\xA0\xA3" => "\xEC\xA0\xAB",		"\xA0\xA4" => "\xEC\xA0\xAE",		"\xA0\xA5" => "\xEC\xA0\xB0",		"\xA0\xA6" => "\xEC\xA0\xB2",		"\xA0\xA7" => "\xEC\xA0\xB3",		"\xA0\xA8" => "\xEC\xA0\xB4",		"\xA0\xA9" => "\xEC\xA0\xB5",		"\xA0\xAA" => "\xEC\xA0\xB6",		"\xA0\xAB" => "\xEC\xA0\xB7",		"\xA0\xAC" => "\xEC\xA0\xB9",		"\xA0\xAD" => "\xEC\xA0\xBA",		"\xA0\xAE" => "\xEC\xA0\xBB",		"\xA0\xAF" => "\xEC\xA0\xBD",		"\xA0\xB0" => "\xEC\xA0\xBE",		"\xA0\xB1" => "\xEC\xA0\xBF",		"\xA0\xB2" => "\xEC\xA1\x81",		"\xA0\xB3" => "\xEC\xA1\x82",		"\xA0\xB4" => "\xEC\xA1\x83",		"\xA0\xB5" => "\xEC\xA1\x84",		"\xA0\xB6" => "\xEC\xA1\x85",		"\xA0\xB7" => "\xEC\xA1\x86",		"\xA0\xB8" => "\xEC\xA1\x87",		"\xA0\xB9" => "\xEC\xA1\x8A",		"\xA0\xBA" => "\xEC\xA1\x8B",		"\xA0\xBB" => "\xEC\xA1\x8E",		"\xA0\xBC" => "\xEC\xA1\x8F",		"\xA0\xBD" => "\xEC\xA1\x90",		"\xA0\xBE" => "\xEC\xA1\x91",		"\xA0\xBF" => "\xEC\xA1\x92",		"\xA0\xC0" => "\xEC\xA1\x93",		"\xA0\xC1" => "\xEC\xA1\x95",		"\xA0\xC2" => "\xEC\xA1\x96",		"\xA0\xC3" => "\xEC\xA1\x97",		"\xA0\xC4" => "\xEC\xA1\x98",		"\xA0\xC5" => "\xEC\xA1\x99",		"\xA0\xC6" => "\xEC\xA1\x9A",		"\xA0\xC7" => "\xEC\xA1\x9B",		"\xA0\xC8" => "\xEC\xA1\x9C",		"\xA0\xC9" => "\xEC\xA1\x9D",		"\xA0\xCA" => "\xEC\xA1\x9E",		"\xA0\xCB" => "\xEC\xA1\x9F",		"\xA0\xCC" => "\xEC\xA1\xA0",		"\xA0\xCD" => "\xEC\xA1\xA1",		"\xA0\xCE" => "\xEC\xA1\xA2",		"\xA0\xCF" => "\xEC\xA1\xA3",		"\xA0\xD0" => "\xEC\xA1\xA4",		"\xA0\xD1" => "\xEC\xA1\xA5",		"\xA0\xD2" => "\xEC\xA1\xA6",		"\xA0\xD3" => "\xEC\xA1\xA7",		"\xA0\xD4" => "\xEC\xA1\xA8",		"\xA0\xD5" => "\xEC\xA1\xA9",		"\xA0\xD6" => "\xEC\xA1\xAA",		"\xA0\xD7" => "\xEC\xA1\xAB",		"\xA0\xD8" => "\xEC\xA1\xAC",		"\xA0\xD9" => "\xEC\xA1\xAD",		"\xA0\xDA" => "\xEC\xA1\xAE",		"\xA0\xDB" => "\xEC\xA1\xAF",		"\xA0\xDC" => "\xEC\xA1\xB2",		"\xA0\xDD" => "\xEC\xA1\xB3",		"\xA0\xDE" => "\xEC\xA1\xB5",		"\xA0\xDF" => "\xEC\xA1\xB6",		"\xA0\xE0" => "\xEC\xA1\xB7",		"\xA0\xE1" => "\xEC\xA1\xB9",		"\xA0\xE2" => "\xEC\xA1\xBB",		"\xA0\xE3" => "\xEC\xA1\xBC",		"\xA0\xE4" => "\xEC\xA1\xBD",		"\xA0\xE5" => "\xEC\xA1\xBE",		"\xA0\xE6" => "\xEC\xA1\xBF",		"\xA0\xE7" => "\xEC\xA2\x82",		"\xA0\xE8" => "\xEC\xA2\x84",		"\xA0\xE9" => "\xEC\xA2\x88",		"\xA0\xEA" => "\xEC\xA2\x89",		"\xA0\xEB" => "\xEC\xA2\x8A",		"\xA0\xEC" => "\xEC\xA2\x8E",		"\xA0\xED" => "\xEC\xA2\x8F",		"\xA0\xEE" => "\xEC\xA2\x90",		"\xA0\xEF" => "\xEC\xA2\x91",		"\xA0\xF0" => "\xEC\xA2\x92",		"\xA0\xF1" => "\xEC\xA2\x93",		"\xA0\xF2" => "\xEC\xA2\x95",		"\xA0\xF3" => "\xEC\xA2\x96",		"\xA0\xF4" => "\xEC\xA2\x97",		"\xA0\xF5" => "\xEC\xA2\x98",		"\xA0\xF6" => "\xEC\xA2\x99",		"\xA0\xF7" => "\xEC\xA2\x9A",		"\xA0\xF8" => "\xEC\xA2\x9B",		"\xA0\xF9" => "\xEC\xA2\x9C",		"\xA0\xFA" => "\xEC\xA2\x9E",		"\xA0\xFB" => "\xEC\xA2\xA0",		"\xA0\xFC" => "\xEC\xA2\xA2",		"\xA0\xFD" => "\xEC\xA2\xA3",		"\xA0\xFE" => "\xEC\xA2\xA4",		"\xA1\x41" => "\xEC\xA2\xA5",		"\xA1\x42" => "\xEC\xA2\xA6",		"\xA1\x43" => "\xEC\xA2\xA7",		"\xA1\x44" => "\xEC\xA2\xA9",		"\xA1\x45" => "\xEC\xA2\xAA",		"\xA1\x46" => "\xEC\xA2\xAB",		"\xA1\x47" => "\xEC\xA2\xAC",		"\xA1\x48" => "\xEC\xA2\xAD",		"\xA1\x49" => "\xEC\xA2\xAE",		"\xA1\x4A" => "\xEC\xA2\xAF",		"\xA1\x4B" => "\xEC\xA2\xB0",		"\xA1\x4C" => "\xEC\xA2\xB1",		"\xA1\x4D" => "\xEC\xA2\xB2",		"\xA1\x4E" => "\xEC\xA2\xB3",		"\xA1\x4F" => "\xEC\xA2\xB4",		"\xA1\x50" => "\xEC\xA2\xB5",		"\xA1\x51" => "\xEC\xA2\xB6",		"\xA1\x52" => "\xEC\xA2\xB7",		"\xA1\x53" => "\xEC\xA2\xB8",		"\xA1\x54" => "\xEC\xA2\xB9",		"\xA1\x55" => "\xEC\xA2\xBA",		"\xA1\x56" => "\xEC\xA2\xBB",		"\xA1\x57" => "\xEC\xA2\xBE",		"\xA1\x58" => "\xEC\xA2\xBF",		"\xA1\x59" => "\xEC\xA3\x80",		"\xA1\x5A" => "\xEC\xA3\x81",		"\xA1\x61" => "\xEC\xA3\x82",		"\xA1\x62" => "\xEC\xA3\x83",		"\xA1\x63" => "\xEC\xA3\x85",		"\xA1\x64" => "\xEC\xA3\x86",		"\xA1\x65" => "\xEC\xA3\x87",		"\xA1\x66" => "\xEC\xA3\x89",		"\xA1\x67" => "\xEC\xA3\x8A",		"\xA1\x68" => "\xEC\xA3\x8B",		"\xA1\x69" => "\xEC\xA3\x8D",		"\xA1\x6A" => "\xEC\xA3\x8E",		"\xA1\x6B" => "\xEC\xA3\x8F",		"\xA1\x6C" => "\xEC\xA3\x90",		"\xA1\x6D" => "\xEC\xA3\x91",		"\xA1\x6E" => "\xEC\xA3\x92",		"\xA1\x6F" => "\xEC\xA3\x93",		"\xA1\x70" => "\xEC\xA3\x96",		"\xA1\x71" => "\xEC\xA3\x98",		"\xA1\x72" => "\xEC\xA3\x9A",		"\xA1\x73" => "\xEC\xA3\x9B",		"\xA1\x74" => "\xEC\xA3\x9C",		"\xA1\x75" => "\xEC\xA3\x9D",		"\xA1\x76" => "\xEC\xA3\x9E",		"\xA1\x77" => "\xEC\xA3\x9F",		"\xA1\x78" => "\xEC\xA3\xA2",		"\xA1\x79" => "\xEC\xA3\xA3",		"\xA1\x7A" => "\xEC\xA3\xA5",		"\xA1\x81" => "\xEC\xA3\xA6",		"\xA1\x82" => "\xEC\xA3\xA7",		"\xA1\x83" => "\xEC\xA3\xA8",		"\xA1\x84" => "\xEC\xA3\xA9",		"\xA1\x85" => "\xEC\xA3\xAA",		"\xA1\x86" => "\xEC\xA3\xAB",		"\xA1\x87" => "\xEC\xA3\xAC",		"\xA1\x88" => "\xEC\xA3\xAD",		"\xA1\x89" => "\xEC\xA3\xAE",		"\xA1\x8A" => "\xEC\xA3\xAF",		"\xA1\x8B" => "\xEC\xA3\xB0",		"\xA1\x8C" => "\xEC\xA3\xB1",		"\xA1\x8D" => "\xEC\xA3\xB2",		"\xA1\x8E" => "\xEC\xA3\xB3",		"\xA1\x8F" => "\xEC\xA3\xB4",		"\xA1\x90" => "\xEC\xA3\xB6",		"\xA1\x91" => "\xEC\xA3\xB7",		"\xA1\x92" => "\xEC\xA3\xB8",		"\xA1\x93" => "\xEC\xA3\xB9",		"\xA1\x94" => "\xEC\xA3\xBA",		"\xA1\x95" => "\xEC\xA3\xBB",		"\xA1\x96" => "\xEC\xA3\xBE",		"\xA1\x97" => "\xEC\xA3\xBF",		"\xA1\x98" => "\xEC\xA4\x81",		"\xA1\x99" => "\xEC\xA4\x82",		"\xA1\x9A" => "\xEC\xA4\x83",		"\xA1\x9B" => "\xEC\xA4\x87",		"\xA1\x9C" => "\xEC\xA4\x88",		"\xA1\x9D" => "\xEC\xA4\x89",		"\xA1\x9E" => "\xEC\xA4\x8A",		"\xA1\x9F" => "\xEC\xA4\x8B",		"\xA1\xA0" => "\xEC\xA4\x8E",		"\xA1\xA1" => "\xE3\x80\x80",		"\xA1\xA2" => "\xE3\x80\x81",		"\xA1\xA3" => "\xE3\x80\x82",		"\xA1\xA4" => "\xC2\xB7",		"\xA1\xA5" => "\xE2\x80\xA5",		"\xA1\xA6" => "\xE2\x80\xA6",		"\xA1\xA7" => "\xC2\xA8",		"\xA1\xA8" => "\xE3\x80\x83",		"\xA1\xA9" => "\xC2\xAD",		"\xA1\xAA" => "\xE2\x80\x95",		"\xA1\xAB" => "\xE2\x88\xA5",		"\xA1\xAC" => "\xEF\xBC\xBC",		"\xA1\xAD" => "\xE2\x88\xBC",		"\xA1\xAE" => "\xE2\x80\x98",		"\xA1\xAF" => "\xE2\x80\x99",		"\xA1\xB0" => "\xE2\x80\x9C",		"\xA1\xB1" => "\xE2\x80\x9D",		"\xA1\xB2" => "\xE3\x80\x94",		"\xA1\xB3" => "\xE3\x80\x95",		"\xA1\xB4" => "\xE3\x80\x88",		"\xA1\xB5" => "\xE3\x80\x89",		"\xA1\xB6" => "\xE3\x80\x8A",		"\xA1\xB7" => "\xE3\x80\x8B",		"\xA1\xB8" => "\xE3\x80\x8C",		"\xA1\xB9" => "\xE3\x80\x8D",		"\xA1\xBA" => "\xE3\x80\x8E",		"\xA1\xBB" => "\xE3\x80\x8F",		"\xA1\xBC" => "\xE3\x80\x90",		"\xA1\xBD" => "\xE3\x80\x91",		"\xA1\xBE" => "\xC2\xB1",		"\xA1\xBF" => "\xC3\x97",		"\xA1\xC0" => "\xC3\xB7",		"\xA1\xC1" => "\xE2\x89\xA0",		"\xA1\xC2" => "\xE2\x89\xA4",		"\xA1\xC3" => "\xE2\x89\xA5",		"\xA1\xC4" => "\xE2\x88\x9E",		"\xA1\xC5" => "\xE2\x88\xB4",		"\xA1\xC6" => "\xC2\xB0",		"\xA1\xC7" => "\xE2\x80\xB2",		"\xA1\xC8" => "\xE2\x80\xB3",		"\xA1\xC9" => "\xE2\x84\x83",		"\xA1\xCA" => "\xE2\x84\xAB",		"\xA1\xCB" => "\xEF\xBF\xA0",		"\xA1\xCC" => "\xEF\xBF\xA1",		"\xA1\xCD" => "\xEF\xBF\xA5",		"\xA1\xCE" => "\xE2\x99\x82",		"\xA1\xCF" => "\xE2\x99\x80",		"\xA1\xD0" => "\xE2\x88\xA0",		"\xA1\xD1" => "\xE2\x8A\xA5",		"\xA1\xD2" => "\xE2\x8C\x92",		"\xA1\xD3" => "\xE2\x88\x82",		"\xA1\xD4" => "\xE2\x88\x87",		"\xA1\xD5" => "\xE2\x89\xA1",		"\xA1\xD6" => "\xE2\x89\x92",		"\xA1\xD7" => "\xC2\xA7",		"\xA1\xD8" => "\xE2\x80\xBB",		"\xA1\xD9" => "\xE2\x98\x86",		"\xA1\xDA" => "\xE2\x98\x85",		"\xA1\xDB" => "\xE2\x97\x8B",		"\xA1\xDC" => "\xE2\x97\x8F",		"\xA1\xDD" => "\xE2\x97\x8E",		"\xA1\xDE" => "\xE2\x97\x87",		"\xA1\xDF" => "\xE2\x97\x86",		"\xA1\xE0" => "\xE2\x96\xA1",		"\xA1\xE1" => "\xE2\x96\xA0",		"\xA1\xE2" => "\xE2\x96\xB3",		"\xA1\xE3" => "\xE2\x96\xB2",		"\xA1\xE4" => "\xE2\x96\xBD",		"\xA1\xE5" => "\xE2\x96\xBC",		"\xA1\xE6" => "\xE2\x86\x92",		"\xA1\xE7" => "\xE2\x86\x90",		"\xA1\xE8" => "\xE2\x86\x91",		"\xA1\xE9" => "\xE2\x86\x93",		"\xA1\xEA" => "\xE2\x86\x94",		"\xA1\xEB" => "\xE3\x80\x93",		"\xA1\xEC" => "\xE2\x89\xAA",		"\xA1\xED" => "\xE2\x89\xAB",		"\xA1\xEE" => "\xE2\x88\x9A",		"\xA1\xEF" => "\xE2\x88\xBD",		"\xA1\xF0" => "\xE2\x88\x9D",		"\xA1\xF1" => "\xE2\x88\xB5",		"\xA1\xF2" => "\xE2\x88\xAB",		"\xA1\xF3" => "\xE2\x88\xAC",		"\xA1\xF4" => "\xE2\x88\x88",		"\xA1\xF5" => "\xE2\x88\x8B",		"\xA1\xF6" => "\xE2\x8A\x86",		"\xA1\xF7" => "\xE2\x8A\x87",		"\xA1\xF8" => "\xE2\x8A\x82",		"\xA1\xF9" => "\xE2\x8A\x83",		"\xA1\xFA" => "\xE2\x88\xAA",		"\xA1\xFB" => "\xE2\x88\xA9",		"\xA1\xFC" => "\xE2\x88\xA7",		"\xA1\xFD" => "\xE2\x88\xA8",		"\xA1\xFE" => "\xEF\xBF\xA2",		"\xA2\x41" => "\xEC\xA4\x90",		"\xA2\x42" => "\xEC\xA4\x92",		"\xA2\x43" => "\xEC\xA4\x93",		"\xA2\x44" => "\xEC\xA4\x94",		"\xA2\x45" => "\xEC\xA4\x95",		"\xA2\x46" => "\xEC\xA4\x96",		"\xA2\x47" => "\xEC\xA4\x97",		"\xA2\x48" => "\xEC\xA4\x99",		"\xA2\x49" => "\xEC\xA4\x9A",		"\xA2\x4A" => "\xEC\xA4\x9B",		"\xA2\x4B" => "\xEC\xA4\x9C",		"\xA2\x4C" => "\xEC\xA4\x9D",		"\xA2\x4D" => "\xEC\xA4\x9E",		"\xA2\x4E" => "\xEC\xA4\x9F",		"\xA2\x4F" => "\xEC\xA4\xA0",		"\xA2\x50" => "\xEC\xA4\xA1",		"\xA2\x51" => "\xEC\xA4\xA2",		"\xA2\x52" => "\xEC\xA4\xA3",		"\xA2\x53" => "\xEC\xA4\xA4",		"\xA2\x54" => "\xEC\xA4\xA5",		"\xA2\x55" => "\xEC\xA4\xA6",		"\xA2\x56" => "\xEC\xA4\xA7",		"\xA2\x57" => "\xEC\xA4\xA8",		"\xA2\x58" => "\xEC\xA4\xA9",		"\xA2\x59" => "\xEC\xA4\xAA",		"\xA2\x5A" => "\xEC\xA4\xAB",		"\xA2\x61" => "\xEC\xA4\xAD",		"\xA2\x62" => "\xEC\xA4\xAE",		"\xA2\x63" => "\xEC\xA4\xAF",		"\xA2\x64" => "\xEC\xA4\xB0",		"\xA2\x65" => "\xEC\xA4\xB1",		"\xA2\x66" => "\xEC\xA4\xB2",		"\xA2\x67" => "\xEC\xA4\xB3",		"\xA2\x68" => "\xEC\xA4\xB5",		"\xA2\x69" => "\xEC\xA4\xB6",		"\xA2\x6A" => "\xEC\xA4\xB7",		"\xA2\x6B" => "\xEC\xA4\xB8",		"\xA2\x6C" => "\xEC\xA4\xB9",		"\xA2\x6D" => "\xEC\xA4\xBA",		"\xA2\x6E" => "\xEC\xA4\xBB",		"\xA2\x6F" => "\xEC\xA4\xBC",		"\xA2\x70" => "\xEC\xA4\xBD",		"\xA2\x71" => "\xEC\xA4\xBE",		"\xA2\x72" => "\xEC\xA4\xBF",		"\xA2\x73" => "\xEC\xA5\x80",		"\xA2\x74" => "\xEC\xA5\x81",		"\xA2\x75" => "\xEC\xA5\x82",		"\xA2\x76" => "\xEC\xA5\x83",		"\xA2\x77" => "\xEC\xA5\x84",		"\xA2\x78" => "\xEC\xA5\x85",		"\xA2\x79" => "\xEC\xA5\x86",		"\xA2\x7A" => "\xEC\xA5\x87",		"\xA2\x81" => "\xEC\xA5\x88",		"\xA2\x82" => "\xEC\xA5\x89",		"\xA2\x83" => "\xEC\xA5\x8A",		"\xA2\x84" => "\xEC\xA5\x8B",		"\xA2\x85" => "\xEC\xA5\x8C",		"\xA2\x86" => "\xEC\xA5\x8D",		"\xA2\x87" => "\xEC\xA5\x8E",		"\xA2\x88" => "\xEC\xA5\x8F",		"\xA2\x89" => "\xEC\xA5\x92",		"\xA2\x8A" => "\xEC\xA5\x93",		"\xA2\x8B" => "\xEC\xA5\x95",		"\xA2\x8C" => "\xEC\xA5\x96",		"\xA2\x8D" => "\xEC\xA5\x97",		"\xA2\x8E" => "\xEC\xA5\x99",		"\xA2\x8F" => "\xEC\xA5\x9A",		"\xA2\x90" => "\xEC\xA5\x9B",		"\xA2\x91" => "\xEC\xA5\x9C",		"\xA2\x92" => "\xEC\xA5\x9D",		"\xA2\x93" => "\xEC\xA5\x9E",		"\xA2\x94" => "\xEC\xA5\x9F",		"\xA2\x95" => "\xEC\xA5\xA2",		"\xA2\x96" => "\xEC\xA5\xA4",		"\xA2\x97" => "\xEC\xA5\xA5",		"\xA2\x98" => "\xEC\xA5\xA6",		"\xA2\x99" => "\xEC\xA5\xA7",		"\xA2\x9A" => "\xEC\xA5\xA8",		"\xA2\x9B" => "\xEC\xA5\xA9",		"\xA2\x9C" => "\xEC\xA5\xAA",		"\xA2\x9D" => "\xEC\xA5\xAB",		"\xA2\x9E" => "\xEC\xA5\xAD",		"\xA2\x9F" => "\xEC\xA5\xAE",		"\xA2\xA0" => "\xEC\xA5\xAF",		"\xA2\xA1" => "\xE2\x87\x92",		"\xA2\xA2" => "\xE2\x87\x94",		"\xA2\xA3" => "\xE2\x88\x80",		"\xA2\xA4" => "\xE2\x88\x83",		"\xA2\xA5" => "\xC2\xB4",		"\xA2\xA6" => "\xEF\xBD\x9E",		"\xA2\xA7" => "\xCB\x87",		"\xA2\xA8" => "\xCB\x98",		"\xA2\xA9" => "\xCB\x9D",		"\xA2\xAA" => "\xCB\x9A",		"\xA2\xAB" => "\xCB\x99",		"\xA2\xAC" => "\xC2\xB8",		"\xA2\xAD" => "\xCB\x9B",		"\xA2\xAE" => "\xC2\xA1",		"\xA2\xAF" => "\xC2\xBF",		"\xA2\xB0" => "\xCB\x90",		"\xA2\xB1" => "\xE2\x88\xAE",		"\xA2\xB2" => "\xE2\x88\x91",		"\xA2\xB3" => "\xE2\x88\x8F",		"\xA2\xB4" => "\xC2\xA4",		"\xA2\xB5" => "\xE2\x84\x89",		"\xA2\xB6" => "\xE2\x80\xB0",		"\xA2\xB7" => "\xE2\x97\x81",		"\xA2\xB8" => "\xE2\x97\x80",		"\xA2\xB9" => "\xE2\x96\xB7",		"\xA2\xBA" => "\xE2\x96\xB6",		"\xA2\xBB" => "\xE2\x99\xA4",		"\xA2\xBC" => "\xE2\x99\xA0",		"\xA2\xBD" => "\xE2\x99\xA1",		"\xA2\xBE" => "\xE2\x99\xA5",		"\xA2\xBF" => "\xE2\x99\xA7",		"\xA2\xC0" => "\xE2\x99\xA3",		"\xA2\xC1" => "\xE2\x8A\x99",		"\xA2\xC2" => "\xE2\x97\x88",		"\xA2\xC3" => "\xE2\x96\xA3",		"\xA2\xC4" => "\xE2\x97\x90",		"\xA2\xC5" => "\xE2\x97\x91",		"\xA2\xC6" => "\xE2\x96\x92",		"\xA2\xC7" => "\xE2\x96\xA4",		"\xA2\xC8" => "\xE2\x96\xA5",		"\xA2\xC9" => "\xE2\x96\xA8",		"\xA2\xCA" => "\xE2\x96\xA7",		"\xA2\xCB" => "\xE2\x96\xA6",		"\xA2\xCC" => "\xE2\x96\xA9",		"\xA2\xCD" => "\xE2\x99\xA8",		"\xA2\xCE" => "\xE2\x98\x8F",		"\xA2\xCF" => "\xE2\x98\x8E",		"\xA2\xD0" => "\xE2\x98\x9C",		"\xA2\xD1" => "\xE2\x98\x9E",		"\xA2\xD2" => "\xC2\xB6",		"\xA2\xD3" => "\xE2\x80\xA0",		"\xA2\xD4" => "\xE2\x80\xA1",		"\xA2\xD5" => "\xE2\x86\x95",		"\xA2\xD6" => "\xE2\x86\x97",		"\xA2\xD7" => "\xE2\x86\x99",		"\xA2\xD8" => "\xE2\x86\x96",		"\xA2\xD9" => "\xE2\x86\x98",		"\xA2\xDA" => "\xE2\x99\xAD",		"\xA2\xDB" => "\xE2\x99\xA9",		"\xA2\xDC" => "\xE2\x99\xAA",		"\xA2\xDD" => "\xE2\x99\xAC",		"\xA2\xDE" => "\xE3\x89\xBF",		"\xA2\xDF" => "\xE3\x88\x9C",		"\xA2\xE0" => "\xE2\x84\x96",		"\xA2\xE1" => "\xE3\x8F\x87",		"\xA2\xE2" => "\xE2\x84\xA2",		"\xA2\xE3" => "\xE3\x8F\x82",		"\xA2\xE4" => "\xE3\x8F\x98",		"\xA2\xE5" => "\xE2\x84\xA1",		"\xA3\x41" => "\xEC\xA5\xB1",		"\xA3\x42" => "\xEC\xA5\xB2",		"\xA3\x43" => "\xEC\xA5\xB3",		"\xA3\x44" => "\xEC\xA5\xB5",		"\xA3\x45" => "\xEC\xA5\xB6",		"\xA3\x46" => "\xEC\xA5\xB7",		"\xA3\x47" => "\xEC\xA5\xB8",		"\xA3\x48" => "\xEC\xA5\xB9",		"\xA3\x49" => "\xEC\xA5\xBA",		"\xA3\x4A" => "\xEC\xA5\xBB",		"\xA3\x4B" => "\xEC\xA5\xBD",		"\xA3\x4C" => "\xEC\xA5\xBE",		"\xA3\x4D" => "\xEC\xA5\xBF",		"\xA3\x4E" => "\xEC\xA6\x80",		"\xA3\x4F" => "\xEC\xA6\x81",		"\xA3\x50" => "\xEC\xA6\x82",		"\xA3\x51" => "\xEC\xA6\x83",		"\xA3\x52" => "\xEC\xA6\x84",		"\xA3\x53" => "\xEC\xA6\x85",		"\xA3\x54" => "\xEC\xA6\x86",		"\xA3\x55" => "\xEC\xA6\x87",		"\xA3\x56" => "\xEC\xA6\x8A",		"\xA3\x57" => "\xEC\xA6\x8B",		"\xA3\x58" => "\xEC\xA6\x8D",		"\xA3\x59" => "\xEC\xA6\x8E",		"\xA3\x5A" => "\xEC\xA6\x8F",		"\xA3\x61" => "\xEC\xA6\x91",		"\xA3\x62" => "\xEC\xA6\x92",		"\xA3\x63" => "\xEC\xA6\x93",		"\xA3\x64" => "\xEC\xA6\x94",		"\xA3\x65" => "\xEC\xA6\x95",		"\xA3\x66" => "\xEC\xA6\x96",		"\xA3\x67" => "\xEC\xA6\x97",		"\xA3\x68" => "\xEC\xA6\x9A",		"\xA3\x69" => "\xEC\xA6\x9C",		"\xA3\x6A" => "\xEC\xA6\x9E",		"\xA3\x6B" => "\xEC\xA6\x9F",		"\xA3\x6C" => "\xEC\xA6\xA0",		"\xA3\x6D" => "\xEC\xA6\xA1",		"\xA3\x6E" => "\xEC\xA6\xA2",		"\xA3\x6F" => "\xEC\xA6\xA3",		"\xA3\x70" => "\xEC\xA6\xA4",		"\xA3\x71" => "\xEC\xA6\xA5",		"\xA3\x72" => "\xEC\xA6\xA6",		"\xA3\x73" => "\xEC\xA6\xA7",		"\xA3\x74" => "\xEC\xA6\xA8",		"\xA3\x75" => "\xEC\xA6\xA9",		"\xA3\x76" => "\xEC\xA6\xAA",		"\xA3\x77" => "\xEC\xA6\xAB",		"\xA3\x78" => "\xEC\xA6\xAC",		"\xA3\x79" => "\xEC\xA6\xAD",		"\xA3\x7A" => "\xEC\xA6\xAE",		"\xA3\x81" => "\xEC\xA6\xAF",		"\xA3\x82" => "\xEC\xA6\xB0",		"\xA3\x83" => "\xEC\xA6\xB1",		"\xA3\x84" => "\xEC\xA6\xB2",		"\xA3\x85" => "\xEC\xA6\xB3",		"\xA3\x86" => "\xEC\xA6\xB4",		"\xA3\x87" => "\xEC\xA6\xB5",		"\xA3\x88" => "\xEC\xA6\xB6",		"\xA3\x89" => "\xEC\xA6\xB7",		"\xA3\x8A" => "\xEC\xA6\xB8",		"\xA3\x8B" => "\xEC\xA6\xB9",		"\xA3\x8C" => "\xEC\xA6\xBA",		"\xA3\x8D" => "\xEC\xA6\xBB",		"\xA3\x8E" => "\xEC\xA6\xBC",		"\xA3\x8F" => "\xEC\xA6\xBD",		"\xA3\x90" => "\xEC\xA6\xBE",		"\xA3\x91" => "\xEC\xA6\xBF",		"\xA3\x92" => "\xEC\xA7\x82",		"\xA3\x93" => "\xEC\xA7\x83",		"\xA3\x94" => "\xEC\xA7\x85",		"\xA3\x95" => "\xEC\xA7\x86",		"\xA3\x96" => "\xEC\xA7\x89",		"\xA3\x97" => "\xEC\xA7\x8B",		"\xA3\x98" => "\xEC\xA7\x8C",		"\xA3\x99" => "\xEC\xA7\x8D",		"\xA3\x9A" => "\xEC\xA7\x8E",		"\xA3\x9B" => "\xEC\xA7\x8F",		"\xA3\x9C" => "\xEC\xA7\x92",		"\xA3\x9D" => "\xEC\xA7\x94",		"\xA3\x9E" => "\xEC\xA7\x97",		"\xA3\x9F" => "\xEC\xA7\x98",		"\xA3\xA0" => "\xEC\xA7\x9B",		"\xA3\xA1" => "\xEF\xBC\x81",		"\xA3\xA2" => "\xEF\xBC\x82",		"\xA3\xA3" => "\xEF\xBC\x83",		"\xA3\xA4" => "\xEF\xBC\x84",		"\xA3\xA5" => "\xEF\xBC\x85",		"\xA3\xA6" => "\xEF\xBC\x86",		"\xA3\xA7" => "\xEF\xBC\x87",		"\xA3\xA8" => "\xEF\xBC\x88",		"\xA3\xA9" => "\xEF\xBC\x89",		"\xA3\xAA" => "\xEF\xBC\x8A",		"\xA3\xAB" => "\xEF\xBC\x8B",		"\xA3\xAC" => "\xEF\xBC\x8C",		"\xA3\xAD" => "\xEF\xBC\x8D",		"\xA3\xAE" => "\xEF\xBC\x8E",		"\xA3\xAF" => "\xEF\xBC\x8F",		"\xA3\xB0" => "\xEF\xBC\x90",		"\xA3\xB1" => "\xEF\xBC\x91",		"\xA3\xB2" => "\xEF\xBC\x92",		"\xA3\xB3" => "\xEF\xBC\x93",		"\xA3\xB4" => "\xEF\xBC\x94",		"\xA3\xB5" => "\xEF\xBC\x95",		"\xA3\xB6" => "\xEF\xBC\x96",		"\xA3\xB7" => "\xEF\xBC\x97",		"\xA3\xB8" => "\xEF\xBC\x98",		"\xA3\xB9" => "\xEF\xBC\x99",		"\xA3\xBA" => "\xEF\xBC\x9A",		"\xA3\xBB" => "\xEF\xBC\x9B",		"\xA3\xBC" => "\xEF\xBC\x9C",		"\xA3\xBD" => "\xEF\xBC\x9D",		"\xA3\xBE" => "\xEF\xBC\x9E",		"\xA3\xBF" => "\xEF\xBC\x9F",		"\xA3\xC0" => "\xEF\xBC\xA0",		"\xA3\xC1" => "\xEF\xBC\xA1",		"\xA3\xC2" => "\xEF\xBC\xA2",		"\xA3\xC3" => "\xEF\xBC\xA3",		"\xA3\xC4" => "\xEF\xBC\xA4",		"\xA3\xC5" => "\xEF\xBC\xA5",		"\xA3\xC6" => "\xEF\xBC\xA6",		"\xA3\xC7" => "\xEF\xBC\xA7",		"\xA3\xC8" => "\xEF\xBC\xA8",		"\xA3\xC9" => "\xEF\xBC\xA9",		"\xA3\xCA" => "\xEF\xBC\xAA",		"\xA3\xCB" => "\xEF\xBC\xAB",		"\xA3\xCC" => "\xEF\xBC\xAC",		"\xA3\xCD" => "\xEF\xBC\xAD",		"\xA3\xCE" => "\xEF\xBC\xAE",		"\xA3\xCF" => "\xEF\xBC\xAF",		"\xA3\xD0" => "\xEF\xBC\xB0",		"\xA3\xD1" => "\xEF\xBC\xB1",		"\xA3\xD2" => "\xEF\xBC\xB2",		"\xA3\xD3" => "\xEF\xBC\xB3",		"\xA3\xD4" => "\xEF\xBC\xB4",		"\xA3\xD5" => "\xEF\xBC\xB5",		"\xA3\xD6" => "\xEF\xBC\xB6",		"\xA3\xD7" => "\xEF\xBC\xB7",		"\xA3\xD8" => "\xEF\xBC\xB8",		"\xA3\xD9" => "\xEF\xBC\xB9",		"\xA3\xDA" => "\xEF\xBC\xBA",		"\xA3\xDB" => "\xEF\xBC\xBB",		"\xA3\xDC" => "\xEF\xBF\xA6",		"\xA3\xDD" => "\xEF\xBC\xBD",		"\xA3\xDE" => "\xEF\xBC\xBE",		"\xA3\xDF" => "\xEF\xBC\xBF",		"\xA3\xE0" => "\xEF\xBD\x80",		"\xA3\xE1" => "\xEF\xBD\x81",		"\xA3\xE2" => "\xEF\xBD\x82",		"\xA3\xE3" => "\xEF\xBD\x83",		"\xA3\xE4" => "\xEF\xBD\x84",		"\xA3\xE5" => "\xEF\xBD\x85",		"\xA3\xE6" => "\xEF\xBD\x86",		"\xA3\xE7" => "\xEF\xBD\x87",		"\xA3\xE8" => "\xEF\xBD\x88",		"\xA3\xE9" => "\xEF\xBD\x89",		"\xA3\xEA" => "\xEF\xBD\x8A",		"\xA3\xEB" => "\xEF\xBD\x8B",		"\xA3\xEC" => "\xEF\xBD\x8C",		"\xA3\xED" => "\xEF\xBD\x8D",		"\xA3\xEE" => "\xEF\xBD\x8E",		"\xA3\xEF" => "\xEF\xBD\x8F",		"\xA3\xF0" => "\xEF\xBD\x90",		"\xA3\xF1" => "\xEF\xBD\x91",		"\xA3\xF2" => "\xEF\xBD\x92",		"\xA3\xF3" => "\xEF\xBD\x93",		"\xA3\xF4" => "\xEF\xBD\x94",		"\xA3\xF5" => "\xEF\xBD\x95",		"\xA3\xF6" => "\xEF\xBD\x96",		"\xA3\xF7" => "\xEF\xBD\x97",		"\xA3\xF8" => "\xEF\xBD\x98",		"\xA3\xF9" => "\xEF\xBD\x99",		"\xA3\xFA" => "\xEF\xBD\x9A",		"\xA3\xFB" => "\xEF\xBD\x9B",		"\xA3\xFC" => "\xEF\xBD\x9C",		"\xA3\xFD" => "\xEF\xBD\x9D",		"\xA3\xFE" => "\xEF\xBF\xA3",		"\xA4\x41" => "\xEC\xA7\x9E",		"\xA4\x42" => "\xEC\xA7\x9F",		"\xA4\x43" => "\xEC\xA7\xA1",		"\xA4\x44" => "\xEC\xA7\xA3",		"\xA4\x45" => "\xEC\xA7\xA5",		"\xA4\x46" => "\xEC\xA7\xA6",		"\xA4\x47" => "\xEC\xA7\xA8",		"\xA4\x48" => "\xEC\xA7\xA9",		"\xA4\x49" => "\xEC\xA7\xAA",		"\xA4\x4A" => "\xEC\xA7\xAB",		"\xA4\x4B" => "\xEC\xA7\xAE",		"\xA4\x4C" => "\xEC\xA7\xB2",		"\xA4\x4D" => "\xEC\xA7\xB3",		"\xA4\x4E" => "\xEC\xA7\xB4",		"\xA4\x4F" => "\xEC\xA7\xB5",		"\xA4\x50" => "\xEC\xA7\xB6",		"\xA4\x51" => "\xEC\xA7\xB7",		"\xA4\x52" => "\xEC\xA7\xBA",		"\xA4\x53" => "\xEC\xA7\xBB",		"\xA4\x54" => "\xEC\xA7\xBD",		"\xA4\x55" => "\xEC\xA7\xBE",		"\xA4\x56" => "\xEC\xA7\xBF",		"\xA4\x57" => "\xEC\xA8\x81",		"\xA4\x58" => "\xEC\xA8\x82",		"\xA4\x59" => "\xEC\xA8\x83",		"\xA4\x5A" => "\xEC\xA8\x84",		"\xA4\x61" => "\xEC\xA8\x85",		"\xA4\x62" => "\xEC\xA8\x86",		"\xA4\x63" => "\xEC\xA8\x87",		"\xA4\x64" => "\xEC\xA8\x8A",		"\xA4\x65" => "\xEC\xA8\x8E",		"\xA4\x66" => "\xEC\xA8\x8F",		"\xA4\x67" => "\xEC\xA8\x90",		"\xA4\x68" => "\xEC\xA8\x91",		"\xA4\x69" => "\xEC\xA8\x92",		"\xA4\x6A" => "\xEC\xA8\x93",		"\xA4\x6B" => "\xEC\xA8\x95",		"\xA4\x6C" => "\xEC\xA8\x96",		"\xA4\x6D" => "\xEC\xA8\x97",		"\xA4\x6E" => "\xEC\xA8\x99",		"\xA4\x6F" => "\xEC\xA8\x9A",		"\xA4\x70" => "\xEC\xA8\x9B",		"\xA4\x71" => "\xEC\xA8\x9C",		"\xA4\x72" => "\xEC\xA8\x9D",		"\xA4\x73" => "\xEC\xA8\x9E",		"\xA4\x74" => "\xEC\xA8\x9F",		"\xA4\x75" => "\xEC\xA8\xA0",		"\xA4\x76" => "\xEC\xA8\xA1",		"\xA4\x77" => "\xEC\xA8\xA2",		"\xA4\x78" => "\xEC\xA8\xA3",		"\xA4\x79" => "\xEC\xA8\xA4",		"\xA4\x7A" => "\xEC\xA8\xA5",		"\xA4\x81" => "\xEC\xA8\xA6",		"\xA4\x82" => "\xEC\xA8\xA7",		"\xA4\x83" => "\xEC\xA8\xA8",		"\xA4\x84" => "\xEC\xA8\xAA",		"\xA4\x85" => "\xEC\xA8\xAB",		"\xA4\x86" => "\xEC\xA8\xAC",		"\xA4\x87" => "\xEC\xA8\xAD",		"\xA4\x88" => "\xEC\xA8\xAE",		"\xA4\x89" => "\xEC\xA8\xAF",		"\xA4\x8A" => "\xEC\xA8\xB0",		"\xA4\x8B" => "\xEC\xA8\xB1",		"\xA4\x8C" => "\xEC\xA8\xB2",		"\xA4\x8D" => "\xEC\xA8\xB3",		"\xA4\x8E" => "\xEC\xA8\xB4",		"\xA4\x8F" => "\xEC\xA8\xB5",		"\xA4\x90" => "\xEC\xA8\xB6",		"\xA4\x91" => "\xEC\xA8\xB7",		"\xA4\x92" => "\xEC\xA8\xB8",		"\xA4\x93" => "\xEC\xA8\xB9",		"\xA4\x94" => "\xEC\xA8\xBA",		"\xA4\x95" => "\xEC\xA8\xBB",		"\xA4\x96" => "\xEC\xA8\xBC",		"\xA4\x97" => "\xEC\xA8\xBD",		"\xA4\x98" => "\xEC\xA8\xBE",		"\xA4\x99" => "\xEC\xA8\xBF",		"\xA4\x9A" => "\xEC\xA9\x80",		"\xA4\x9B" => "\xEC\xA9\x81",		"\xA4\x9C" => "\xEC\xA9\x82",		"\xA4\x9D" => "\xEC\xA9\x83",		"\xA4\x9E" => "\xEC\xA9\x84",		"\xA4\x9F" => "\xEC\xA9\x85",		"\xA4\xA0" => "\xEC\xA9\x86",		"\xA4\xA1" => "\xE3\x84\xB1",		"\xA4\xA2" => "\xE3\x84\xB2",		"\xA4\xA3" => "\xE3\x84\xB3",		"\xA4\xA4" => "\xE3\x84\xB4",		"\xA4\xA5" => "\xE3\x84\xB5",		"\xA4\xA6" => "\xE3\x84\xB6",		"\xA4\xA7" => "\xE3\x84\xB7",		"\xA4\xA8" => "\xE3\x84\xB8",		"\xA4\xA9" => "\xE3\x84\xB9",		"\xA4\xAA" => "\xE3\x84\xBA",		"\xA4\xAB" => "\xE3\x84\xBB",		"\xA4\xAC" => "\xE3\x84\xBC",		"\xA4\xAD" => "\xE3\x84\xBD",		"\xA4\xAE" => "\xE3\x84\xBE",		"\xA4\xAF" => "\xE3\x84\xBF",		"\xA4\xB0" => "\xE3\x85\x80",		"\xA4\xB1" => "\xE3\x85\x81",		"\xA4\xB2" => "\xE3\x85\x82",		"\xA4\xB3" => "\xE3\x85\x83",		"\xA4\xB4" => "\xE3\x85\x84",		"\xA4\xB5" => "\xE3\x85\x85",		"\xA4\xB6" => "\xE3\x85\x86",		"\xA4\xB7" => "\xE3\x85\x87",		"\xA4\xB8" => "\xE3\x85\x88",		"\xA4\xB9" => "\xE3\x85\x89",		"\xA4\xBA" => "\xE3\x85\x8A",		"\xA4\xBB" => "\xE3\x85\x8B",		"\xA4\xBC" => "\xE3\x85\x8C",		"\xA4\xBD" => "\xE3\x85\x8D",		"\xA4\xBE" => "\xE3\x85\x8E",		"\xA4\xBF" => "\xE3\x85\x8F",		"\xA4\xC0" => "\xE3\x85\x90",		"\xA4\xC1" => "\xE3\x85\x91",		"\xA4\xC2" => "\xE3\x85\x92",		"\xA4\xC3" => "\xE3\x85\x93",		"\xA4\xC4" => "\xE3\x85\x94",		"\xA4\xC5" => "\xE3\x85\x95",		"\xA4\xC6" => "\xE3\x85\x96",		"\xA4\xC7" => "\xE3\x85\x97",		"\xA4\xC8" => "\xE3\x85\x98",		"\xA4\xC9" => "\xE3\x85\x99",		"\xA4\xCA" => "\xE3\x85\x9A",		"\xA4\xCB" => "\xE3\x85\x9B",		"\xA4\xCC" => "\xE3\x85\x9C",		"\xA4\xCD" => "\xE3\x85\x9D",		"\xA4\xCE" => "\xE3\x85\x9E",		"\xA4\xCF" => "\xE3\x85\x9F",		"\xA4\xD0" => "\xE3\x85\xA0",		"\xA4\xD1" => "\xE3\x85\xA1",		"\xA4\xD2" => "\xE3\x85\xA2",		"\xA4\xD3" => "\xE3\x85\xA3",		"\xA4\xD4" => "\xE3\x85\xA4",		"\xA4\xD5" => "\xE3\x85\xA5",		"\xA4\xD6" => "\xE3\x85\xA6",		"\xA4\xD7" => "\xE3\x85\xA7",		"\xA4\xD8" => "\xE3\x85\xA8",		"\xA4\xD9" => "\xE3\x85\xA9",		"\xA4\xDA" => "\xE3\x85\xAA",		"\xA4\xDB" => "\xE3\x85\xAB",		"\xA4\xDC" => "\xE3\x85\xAC",		"\xA4\xDD" => "\xE3\x85\xAD",		"\xA4\xDE" => "\xE3\x85\xAE",		"\xA4\xDF" => "\xE3\x85\xAF",		"\xA4\xE0" => "\xE3\x85\xB0",		"\xA4\xE1" => "\xE3\x85\xB1",		"\xA4\xE2" => "\xE3\x85\xB2",		"\xA4\xE3" => "\xE3\x85\xB3",		"\xA4\xE4" => "\xE3\x85\xB4",		"\xA4\xE5" => "\xE3\x85\xB5",		"\xA4\xE6" => "\xE3\x85\xB6",		"\xA4\xE7" => "\xE3\x85\xB7",		"\xA4\xE8" => "\xE3\x85\xB8",		"\xA4\xE9" => "\xE3\x85\xB9",		"\xA4\xEA" => "\xE3\x85\xBA",		"\xA4\xEB" => "\xE3\x85\xBB",		"\xA4\xEC" => "\xE3\x85\xBC",		"\xA4\xED" => "\xE3\x85\xBD",		"\xA4\xEE" => "\xE3\x85\xBE",		"\xA4\xEF" => "\xE3\x85\xBF",		"\xA4\xF0" => "\xE3\x86\x80",		"\xA4\xF1" => "\xE3\x86\x81",		"\xA4\xF2" => "\xE3\x86\x82",		"\xA4\xF3" => "\xE3\x86\x83",		"\xA4\xF4" => "\xE3\x86\x84",		"\xA4\xF5" => "\xE3\x86\x85",		"\xA4\xF6" => "\xE3\x86\x86",		"\xA4\xF7" => "\xE3\x86\x87",		"\xA4\xF8" => "\xE3\x86\x88",		"\xA4\xF9" => "\xE3\x86\x89",		"\xA4\xFA" => "\xE3\x86\x8A",		"\xA4\xFB" => "\xE3\x86\x8B",		"\xA4\xFC" => "\xE3\x86\x8C",		"\xA4\xFD" => "\xE3\x86\x8D",		"\xA4\xFE" => "\xE3\x86\x8E",		"\xA5\x41" => "\xEC\xA9\x87",		"\xA5\x42" => "\xEC\xA9\x88",		"\xA5\x43" => "\xEC\xA9\x89",		"\xA5\x44" => "\xEC\xA9\x8A",		"\xA5\x45" => "\xEC\xA9\x8B",		"\xA5\x46" => "\xEC\xA9\x8E",		"\xA5\x47" => "\xEC\xA9\x8F",		"\xA5\x48" => "\xEC\xA9\x91",		"\xA5\x49" => "\xEC\xA9\x92",		"\xA5\x4A" => "\xEC\xA9\x93",		"\xA5\x4B" => "\xEC\xA9\x95",		"\xA5\x4C" => "\xEC\xA9\x96",		"\xA5\x4D" => "\xEC\xA9\x97",		"\xA5\x4E" => "\xEC\xA9\x98",		"\xA5\x4F" => "\xEC\xA9\x99",		"\xA5\x50" => "\xEC\xA9\x9A",		"\xA5\x51" => "\xEC\xA9\x9B",		"\xA5\x52" => "\xEC\xA9\x9E",		"\xA5\x53" => "\xEC\xA9\xA2",		"\xA5\x54" => "\xEC\xA9\xA3",		"\xA5\x55" => "\xEC\xA9\xA4",		"\xA5\x56" => "\xEC\xA9\xA5",		"\xA5\x57" => "\xEC\xA9\xA6",		"\xA5\x58" => "\xEC\xA9\xA7",		"\xA5\x59" => "\xEC\xA9\xA9",		"\xA5\x5A" => "\xEC\xA9\xAA",		"\xA5\x61" => "\xEC\xA9\xAB",		"\xA5\x62" => "\xEC\xA9\xAC",		"\xA5\x63" => "\xEC\xA9\xAD",		"\xA5\x64" => "\xEC\xA9\xAE",		"\xA5\x65" => "\xEC\xA9\xAF",		"\xA5\x66" => "\xEC\xA9\xB0",		"\xA5\x67" => "\xEC\xA9\xB1",		"\xA5\x68" => "\xEC\xA9\xB2",		"\xA5\x69" => "\xEC\xA9\xB3",		"\xA5\x6A" => "\xEC\xA9\xB4",		"\xA5\x6B" => "\xEC\xA9\xB5",		"\xA5\x6C" => "\xEC\xA9\xB6",		"\xA5\x6D" => "\xEC\xA9\xB7",		"\xA5\x6E" => "\xEC\xA9\xB8",		"\xA5\x6F" => "\xEC\xA9\xB9",		"\xA5\x70" => "\xEC\xA9\xBA",		"\xA5\x71" => "\xEC\xA9\xBB",		"\xA5\x72" => "\xEC\xA9\xBC",		"\xA5\x73" => "\xEC\xA9\xBE",		"\xA5\x74" => "\xEC\xA9\xBF",		"\xA5\x75" => "\xEC\xAA\x80",		"\xA5\x76" => "\xEC\xAA\x81",		"\xA5\x77" => "\xEC\xAA\x82",		"\xA5\x78" => "\xEC\xAA\x83",		"\xA5\x79" => "\xEC\xAA\x85",		"\xA5\x7A" => "\xEC\xAA\x86",		"\xA5\x81" => "\xEC\xAA\x87",		"\xA5\x82" => "\xEC\xAA\x88",		"\xA5\x83" => "\xEC\xAA\x89",		"\xA5\x84" => "\xEC\xAA\x8A",		"\xA5\x85" => "\xEC\xAA\x8B",		"\xA5\x86" => "\xEC\xAA\x8C",		"\xA5\x87" => "\xEC\xAA\x8D",		"\xA5\x88" => "\xEC\xAA\x8E",		"\xA5\x89" => "\xEC\xAA\x8F",		"\xA5\x8A" => "\xEC\xAA\x90",		"\xA5\x8B" => "\xEC\xAA\x91",		"\xA5\x8C" => "\xEC\xAA\x92",		"\xA5\x8D" => "\xEC\xAA\x93",		"\xA5\x8E" => "\xEC\xAA\x94",		"\xA5\x8F" => "\xEC\xAA\x95",		"\xA5\x90" => "\xEC\xAA\x96",		"\xA5\x91" => "\xEC\xAA\x97",		"\xA5\x92" => "\xEC\xAA\x99",		"\xA5\x93" => "\xEC\xAA\x9A",		"\xA5\x94" => "\xEC\xAA\x9B",		"\xA5\x95" => "\xEC\xAA\x9C",		"\xA5\x96" => "\xEC\xAA\x9D",		"\xA5\x97" => "\xEC\xAA\x9E",		"\xA5\x98" => "\xEC\xAA\x9F",		"\xA5\x99" => "\xEC\xAA\xA0",		"\xA5\x9A" => "\xEC\xAA\xA1",		"\xA5\x9B" => "\xEC\xAA\xA2",		"\xA5\x9C" => "\xEC\xAA\xA3",		"\xA5\x9D" => "\xEC\xAA\xA4",		"\xA5\x9E" => "\xEC\xAA\xA5",		"\xA5\x9F" => "\xEC\xAA\xA6",		"\xA5\xA0" => "\xEC\xAA\xA7",		"\xA5\xA1" => "\xE2\x85\xB0",		"\xA5\xA2" => "\xE2\x85\xB1",		"\xA5\xA3" => "\xE2\x85\xB2",		"\xA5\xA4" => "\xE2\x85\xB3",		"\xA5\xA5" => "\xE2\x85\xB4",		"\xA5\xA6" => "\xE2\x85\xB5",		"\xA5\xA7" => "\xE2\x85\xB6",		"\xA5\xA8" => "\xE2\x85\xB7",		"\xA5\xA9" => "\xE2\x85\xB8",		"\xA5\xAA" => "\xE2\x85\xB9",		"\xA5\xB0" => "\xE2\x85\xA0",		"\xA5\xB1" => "\xE2\x85\xA1",		"\xA5\xB2" => "\xE2\x85\xA2",		"\xA5\xB3" => "\xE2\x85\xA3",		"\xA5\xB4" => "\xE2\x85\xA4",		"\xA5\xB5" => "\xE2\x85\xA5",		"\xA5\xB6" => "\xE2\x85\xA6",		"\xA5\xB7" => "\xE2\x85\xA7",		"\xA5\xB8" => "\xE2\x85\xA8",		"\xA5\xB9" => "\xE2\x85\xA9",		"\xA5\xC1" => "\xCE\x91",		"\xA5\xC2" => "\xCE\x92",		"\xA5\xC3" => "\xCE\x93",		"\xA5\xC4" => "\xCE\x94",		"\xA5\xC5" => "\xCE\x95",		"\xA5\xC6" => "\xCE\x96",		"\xA5\xC7" => "\xCE\x97",		"\xA5\xC8" => "\xCE\x98",		"\xA5\xC9" => "\xCE\x99",		"\xA5\xCA" => "\xCE\x9A",		"\xA5\xCB" => "\xCE\x9B",		"\xA5\xCC" => "\xCE\x9C",		"\xA5\xCD" => "\xCE\x9D",		"\xA5\xCE" => "\xCE\x9E",		"\xA5\xCF" => "\xCE\x9F",		"\xA5\xD0" => "\xCE\xA0",		"\xA5\xD1" => "\xCE\xA1",		"\xA5\xD2" => "\xCE\xA3",		"\xA5\xD3" => "\xCE\xA4",		"\xA5\xD4" => "\xCE\xA5",		"\xA5\xD5" => "\xCE\xA6",		"\xA5\xD6" => "\xCE\xA7",		"\xA5\xD7" => "\xCE\xA8",		"\xA5\xD8" => "\xCE\xA9",		"\xA5\xE1" => "\xCE\xB1",		"\xA5\xE2" => "\xCE\xB2",		"\xA5\xE3" => "\xCE\xB3",		"\xA5\xE4" => "\xCE\xB4",		"\xA5\xE5" => "\xCE\xB5",		"\xA5\xE6" => "\xCE\xB6",		"\xA5\xE7" => "\xCE\xB7",		"\xA5\xE8" => "\xCE\xB8",		"\xA5\xE9" => "\xCE\xB9",		"\xA5\xEA" => "\xCE\xBA",		"\xA5\xEB" => "\xCE\xBB",		"\xA5\xEC" => "\xCE\xBC",		"\xA5\xED" => "\xCE\xBD",		"\xA5\xEE" => "\xCE\xBE",		"\xA5\xEF" => "\xCE\xBF",		"\xA5\xF0" => "\xCF\x80",		"\xA5\xF1" => "\xCF\x81",		"\xA5\xF2" => "\xCF\x83",		"\xA5\xF3" => "\xCF\x84",		"\xA5\xF4" => "\xCF\x85",		"\xA5\xF5" => "\xCF\x86",		"\xA5\xF6" => "\xCF\x87",		"\xA5\xF7" => "\xCF\x88",		"\xA5\xF8" => "\xCF\x89",		"\xA6\x41" => "\xEC\xAA\xA8",		"\xA6\x42" => "\xEC\xAA\xA9",		"\xA6\x43" => "\xEC\xAA\xAA",		"\xA6\x44" => "\xEC\xAA\xAB",		"\xA6\x45" => "\xEC\xAA\xAC",		"\xA6\x46" => "\xEC\xAA\xAD",		"\xA6\x47" => "\xEC\xAA\xAE",		"\xA6\x48" => "\xEC\xAA\xAF",		"\xA6\x49" => "\xEC\xAA\xB0",		"\xA6\x4A" => "\xEC\xAA\xB1",		"\xA6\x4B" => "\xEC\xAA\xB2",		"\xA6\x4C" => "\xEC\xAA\xB3",		"\xA6\x4D" => "\xEC\xAA\xB4",		"\xA6\x4E" => "\xEC\xAA\xB5",		"\xA6\x4F" => "\xEC\xAA\xB6",		"\xA6\x50" => "\xEC\xAA\xB7",		"\xA6\x51" => "\xEC\xAA\xB8",		"\xA6\x52" => "\xEC\xAA\xB9",		"\xA6\x53" => "\xEC\xAA\xBA",		"\xA6\x54" => "\xEC\xAA\xBB",		"\xA6\x55" => "\xEC\xAA\xBE",		"\xA6\x56" => "\xEC\xAA\xBF",		"\xA6\x57" => "\xEC\xAB\x81",		"\xA6\x58" => "\xEC\xAB\x82",		"\xA6\x59" => "\xEC\xAB\x83",		"\xA6\x5A" => "\xEC\xAB\x85",		"\xA6\x61" => "\xEC\xAB\x86",		"\xA6\x62" => "\xEC\xAB\x87",		"\xA6\x63" => "\xEC\xAB\x88",		"\xA6\x64" => "\xEC\xAB\x89",		"\xA6\x65" => "\xEC\xAB\x8A",		"\xA6\x66" => "\xEC\xAB\x8B",		"\xA6\x67" => "\xEC\xAB\x8E",		"\xA6\x68" => "\xEC\xAB\x90",		"\xA6\x69" => "\xEC\xAB\x92",		"\xA6\x6A" => "\xEC\xAB\x94",		"\xA6\x6B" => "\xEC\xAB\x95",		"\xA6\x6C" => "\xEC\xAB\x96",		"\xA6\x6D" => "\xEC\xAB\x97",		"\xA6\x6E" => "\xEC\xAB\x9A",		"\xA6\x6F" => "\xEC\xAB\x9B",		"\xA6\x70" => "\xEC\xAB\x9C",		"\xA6\x71" => "\xEC\xAB\x9D",		"\xA6\x72" => "\xEC\xAB\x9E",		"\xA6\x73" => "\xEC\xAB\x9F",		"\xA6\x74" => "\xEC\xAB\xA1",		"\xA6\x75" => "\xEC\xAB\xA2",		"\xA6\x76" => "\xEC\xAB\xA3",		"\xA6\x77" => "\xEC\xAB\xA4",		"\xA6\x78" => "\xEC\xAB\xA5",		"\xA6\x79" => "\xEC\xAB\xA6",		"\xA6\x7A" => "\xEC\xAB\xA7",		"\xA6\x81" => "\xEC\xAB\xA8",		"\xA6\x82" => "\xEC\xAB\xA9",		"\xA6\x83" => "\xEC\xAB\xAA",		"\xA6\x84" => "\xEC\xAB\xAB",		"\xA6\x85" => "\xEC\xAB\xAD",		"\xA6\x86" => "\xEC\xAB\xAE",		"\xA6\x87" => "\xEC\xAB\xAF",		"\xA6\x88" => "\xEC\xAB\xB0",		"\xA6\x89" => "\xEC\xAB\xB1",		"\xA6\x8A" => "\xEC\xAB\xB2",		"\xA6\x8B" => "\xEC\xAB\xB3",		"\xA6\x8C" => "\xEC\xAB\xB5",		"\xA6\x8D" => "\xEC\xAB\xB6",		"\xA6\x8E" => "\xEC\xAB\xB7",		"\xA6\x8F" => "\xEC\xAB\xB8",		"\xA6\x90" => "\xEC\xAB\xB9",		"\xA6\x91" => "\xEC\xAB\xBA",		"\xA6\x92" => "\xEC\xAB\xBB",		"\xA6\x93" => "\xEC\xAB\xBC",		"\xA6\x94" => "\xEC\xAB\xBD",		"\xA6\x95" => "\xEC\xAB\xBE",		"\xA6\x96" => "\xEC\xAB\xBF",		"\xA6\x97" => "\xEC\xAC\x80",		"\xA6\x98" => "\xEC\xAC\x81",		"\xA6\x99" => "\xEC\xAC\x82",		"\xA6\x9A" => "\xEC\xAC\x83",		"\xA6\x9B" => "\xEC\xAC\x84",		"\xA6\x9C" => "\xEC\xAC\x85",		"\xA6\x9D" => "\xEC\xAC\x86",		"\xA6\x9E" => "\xEC\xAC\x87",		"\xA6\x9F" => "\xEC\xAC\x89",		"\xA6\xA0" => "\xEC\xAC\x8A",		"\xA6\xA1" => "\xE2\x94\x80",		"\xA6\xA2" => "\xE2\x94\x82",		"\xA6\xA3" => "\xE2\x94\x8C",		"\xA6\xA4" => "\xE2\x94\x90",		"\xA6\xA5" => "\xE2\x94\x98",		"\xA6\xA6" => "\xE2\x94\x94",		"\xA6\xA7" => "\xE2\x94\x9C",		"\xA6\xA8" => "\xE2\x94\xAC",		"\xA6\xA9" => "\xE2\x94\xA4",		"\xA6\xAA" => "\xE2\x94\xB4",		"\xA6\xAB" => "\xE2\x94\xBC",		"\xA6\xAC" => "\xE2\x94\x81",		"\xA6\xAD" => "\xE2\x94\x83",		"\xA6\xAE" => "\xE2\x94\x8F",		"\xA6\xAF" => "\xE2\x94\x93",		"\xA6\xB0" => "\xE2\x94\x9B",		"\xA6\xB1" => "\xE2\x94\x97",		"\xA6\xB2" => "\xE2\x94\xA3",		"\xA6\xB3" => "\xE2\x94\xB3",		"\xA6\xB4" => "\xE2\x94\xAB",		"\xA6\xB5" => "\xE2\x94\xBB",		"\xA6\xB6" => "\xE2\x95\x8B",		"\xA6\xB7" => "\xE2\x94\xA0",		"\xA6\xB8" => "\xE2\x94\xAF",		"\xA6\xB9" => "\xE2\x94\xA8",		"\xA6\xBA" => "\xE2\x94\xB7",		"\xA6\xBB" => "\xE2\x94\xBF",		"\xA6\xBC" => "\xE2\x94\x9D",		"\xA6\xBD" => "\xE2\x94\xB0",		"\xA6\xBE" => "\xE2\x94\xA5",		"\xA6\xBF" => "\xE2\x94\xB8",		"\xA6\xC0" => "\xE2\x95\x82",		"\xA6\xC1" => "\xE2\x94\x92",		"\xA6\xC2" => "\xE2\x94\x91",		"\xA6\xC3" => "\xE2\x94\x9A",		"\xA6\xC4" => "\xE2\x94\x99",		"\xA6\xC5" => "\xE2\x94\x96",		"\xA6\xC6" => "\xE2\x94\x95",		"\xA6\xC7" => "\xE2\x94\x8E",		"\xA6\xC8" => "\xE2\x94\x8D",		"\xA6\xC9" => "\xE2\x94\x9E",		"\xA6\xCA" => "\xE2\x94\x9F",		"\xA6\xCB" => "\xE2\x94\xA1",		"\xA6\xCC" => "\xE2\x94\xA2",		"\xA6\xCD" => "\xE2\x94\xA6",		"\xA6\xCE" => "\xE2\x94\xA7",		"\xA6\xCF" => "\xE2\x94\xA9",		"\xA6\xD0" => "\xE2\x94\xAA",		"\xA6\xD1" => "\xE2\x94\xAD",		"\xA6\xD2" => "\xE2\x94\xAE",		"\xA6\xD3" => "\xE2\x94\xB1",		"\xA6\xD4" => "\xE2\x94\xB2",		"\xA6\xD5" => "\xE2\x94\xB5",		"\xA6\xD6" => "\xE2\x94\xB6",		"\xA6\xD7" => "\xE2\x94\xB9",		"\xA6\xD8" => "\xE2\x94\xBA",		"\xA6\xD9" => "\xE2\x94\xBD",		"\xA6\xDA" => "\xE2\x94\xBE",		"\xA6\xDB" => "\xE2\x95\x80",		"\xA6\xDC" => "\xE2\x95\x81",		"\xA6\xDD" => "\xE2\x95\x83",		"\xA6\xDE" => "\xE2\x95\x84",		"\xA6\xDF" => "\xE2\x95\x85",		"\xA6\xE0" => "\xE2\x95\x86",		"\xA6\xE1" => "\xE2\x95\x87",		"\xA6\xE2" => "\xE2\x95\x88",		"\xA6\xE3" => "\xE2\x95\x89",		"\xA6\xE4" => "\xE2\x95\x8A",		"\xA7\x41" => "\xEC\xAC\x8B",		"\xA7\x42" => "\xEC\xAC\x8C",		"\xA7\x43" => "\xEC\xAC\x8D",		"\xA7\x44" => "\xEC\xAC\x8E",		"\xA7\x45" => "\xEC\xAC\x8F",		"\xA7\x46" => "\xEC\xAC\x91",		"\xA7\x47" => "\xEC\xAC\x92",		"\xA7\x48" => "\xEC\xAC\x93",		"\xA7\x49" => "\xEC\xAC\x95",		"\xA7\x4A" => "\xEC\xAC\x96",		"\xA7\x4B" => "\xEC\xAC\x97",		"\xA7\x4C" => "\xEC\xAC\x99",		"\xA7\x4D" => "\xEC\xAC\x9A",		"\xA7\x4E" => "\xEC\xAC\x9B",		"\xA7\x4F" => "\xEC\xAC\x9C",		"\xA7\x50" => "\xEC\xAC\x9D",		"\xA7\x51" => "\xEC\xAC\x9E",		"\xA7\x52" => "\xEC\xAC\x9F",		"\xA7\x53" => "\xEC\xAC\xA2",		"\xA7\x54" => "\xEC\xAC\xA3",		"\xA7\x55" => "\xEC\xAC\xA4",		"\xA7\x56" => "\xEC\xAC\xA5",		"\xA7\x57" => "\xEC\xAC\xA6",		"\xA7\x58" => "\xEC\xAC\xA7",		"\xA7\x59" => "\xEC\xAC\xA8",		"\xA7\x5A" => "\xEC\xAC\xA9",		"\xA7\x61" => "\xEC\xAC\xAA",		"\xA7\x62" => "\xEC\xAC\xAB",		"\xA7\x63" => "\xEC\xAC\xAC",		"\xA7\x64" => "\xEC\xAC\xAD",		"\xA7\x65" => "\xEC\xAC\xAE",		"\xA7\x66" => "\xEC\xAC\xAF",		"\xA7\x67" => "\xEC\xAC\xB0",		"\xA7\x68" => "\xEC\xAC\xB1",		"\xA7\x69" => "\xEC\xAC\xB2",		"\xA7\x6A" => "\xEC\xAC\xB3",		"\xA7\x6B" => "\xEC\xAC\xB4",		"\xA7\x6C" => "\xEC\xAC\xB5",		"\xA7\x6D" => "\xEC\xAC\xB6",		"\xA7\x6E" => "\xEC\xAC\xB7",		"\xA7\x6F" => "\xEC\xAC\xB8",		"\xA7\x70" => "\xEC\xAC\xB9",		"\xA7\x71" => "\xEC\xAC\xBA",		"\xA7\x72" => "\xEC\xAC\xBB",		"\xA7\x73" => "\xEC\xAC\xBC",		"\xA7\x74" => "\xEC\xAC\xBD",		"\xA7\x75" => "\xEC\xAC\xBE",		"\xA7\x76" => "\xEC\xAC\xBF",		"\xA7\x77" => "\xEC\xAD\x80",		"\xA7\x78" => "\xEC\xAD\x82",		"\xA7\x79" => "\xEC\xAD\x83",		"\xA7\x7A" => "\xEC\xAD\x84",		"\xA7\x81" => "\xEC\xAD\x85",		"\xA7\x82" => "\xEC\xAD\x86",		"\xA7\x83" => "\xEC\xAD\x87",		"\xA7\x84" => "\xEC\xAD\x8A",		"\xA7\x85" => "\xEC\xAD\x8B",		"\xA7\x86" => "\xEC\xAD\x8D",		"\xA7\x87" => "\xEC\xAD\x8E",		"\xA7\x88" => "\xEC\xAD\x8F",		"\xA7\x89" => "\xEC\xAD\x91",		"\xA7\x8A" => "\xEC\xAD\x92",		"\xA7\x8B" => "\xEC\xAD\x93",		"\xA7\x8C" => "\xEC\xAD\x94",		"\xA7\x8D" => "\xEC\xAD\x95",		"\xA7\x8E" => "\xEC\xAD\x96",		"\xA7\x8F" => "\xEC\xAD\x97",		"\xA7\x90" => "\xEC\xAD\x9A",		"\xA7\x91" => "\xEC\xAD\x9B",		"\xA7\x92" => "\xEC\xAD\x9C",		"\xA7\x93" => "\xEC\xAD\x9E",		"\xA7\x94" => "\xEC\xAD\x9F",		"\xA7\x95" => "\xEC\xAD\xA0",		"\xA7\x96" => "\xEC\xAD\xA1",		"\xA7\x97" => "\xEC\xAD\xA2",		"\xA7\x98" => "\xEC\xAD\xA3",		"\xA7\x99" => "\xEC\xAD\xA5",		"\xA7\x9A" => "\xEC\xAD\xA6",		"\xA7\x9B" => "\xEC\xAD\xA7",		"\xA7\x9C" => "\xEC\xAD\xA8",		"\xA7\x9D" => "\xEC\xAD\xA9",		"\xA7\x9E" => "\xEC\xAD\xAA",		"\xA7\x9F" => "\xEC\xAD\xAB",		"\xA7\xA0" => "\xEC\xAD\xAC",		"\xA7\xA1" => "\xE3\x8E\x95",		"\xA7\xA2" => "\xE3\x8E\x96",		"\xA7\xA3" => "\xE3\x8E\x97",		"\xA7\xA4" => "\xE2\x84\x93",		"\xA7\xA5" => "\xE3\x8E\x98",		"\xA7\xA6" => "\xE3\x8F\x84",		"\xA7\xA7" => "\xE3\x8E\xA3",		"\xA7\xA8" => "\xE3\x8E\xA4",		"\xA7\xA9" => "\xE3\x8E\xA5",		"\xA7\xAA" => "\xE3\x8E\xA6",		"\xA7\xAB" => "\xE3\x8E\x99",		"\xA7\xAC" => "\xE3\x8E\x9A",		"\xA7\xAD" => "\xE3\x8E\x9B",		"\xA7\xAE" => "\xE3\x8E\x9C",		"\xA7\xAF" => "\xE3\x8E\x9D",		"\xA7\xB0" => "\xE3\x8E\x9E",		"\xA7\xB1" => "\xE3\x8E\x9F",		"\xA7\xB2" => "\xE3\x8E\xA0",		"\xA7\xB3" => "\xE3\x8E\xA1",		"\xA7\xB4" => "\xE3\x8E\xA2",		"\xA7\xB5" => "\xE3\x8F\x8A",		"\xA7\xB6" => "\xE3\x8E\x8D",		"\xA7\xB7" => "\xE3\x8E\x8E",		"\xA7\xB8" => "\xE3\x8E\x8F",		"\xA7\xB9" => "\xE3\x8F\x8F",		"\xA7\xBA" => "\xE3\x8E\x88",		"\xA7\xBB" => "\xE3\x8E\x89",		"\xA7\xBC" => "\xE3\x8F\x88",		"\xA7\xBD" => "\xE3\x8E\xA7",		"\xA7\xBE" => "\xE3\x8E\xA8",		"\xA7\xBF" => "\xE3\x8E\xB0",		"\xA7\xC0" => "\xE3\x8E\xB1",		"\xA7\xC1" => "\xE3\x8E\xB2",		"\xA7\xC2" => "\xE3\x8E\xB3",		"\xA7\xC3" => "\xE3\x8E\xB4",		"\xA7\xC4" => "\xE3\x8E\xB5",		"\xA7\xC5" => "\xE3\x8E\xB6",		"\xA7\xC6" => "\xE3\x8E\xB7",		"\xA7\xC7" => "\xE3\x8E\xB8",		"\xA7\xC8" => "\xE3\x8E\xB9",		"\xA7\xC9" => "\xE3\x8E\x80",		"\xA7\xCA" => "\xE3\x8E\x81",		"\xA7\xCB" => "\xE3\x8E\x82",		"\xA7\xCC" => "\xE3\x8E\x83",		"\xA7\xCD" => "\xE3\x8E\x84",		"\xA7\xCE" => "\xE3\x8E\xBA",		"\xA7\xCF" => "\xE3\x8E\xBB",		"\xA7\xD0" => "\xE3\x8E\xBC",		"\xA7\xD1" => "\xE3\x8E\xBD",		"\xA7\xD2" => "\xE3\x8E\xBE",		"\xA7\xD3" => "\xE3\x8E\xBF",		"\xA7\xD4" => "\xE3\x8E\x90",		"\xA7\xD5" => "\xE3\x8E\x91",		"\xA7\xD6" => "\xE3\x8E\x92",		"\xA7\xD7" => "\xE3\x8E\x93",		"\xA7\xD8" => "\xE3\x8E\x94",		"\xA7\xD9" => "\xE2\x84\xA6",		"\xA7\xDA" => "\xE3\x8F\x80",		"\xA7\xDB" => "\xE3\x8F\x81",		"\xA7\xDC" => "\xE3\x8E\x8A",		"\xA7\xDD" => "\xE3\x8E\x8B",		"\xA7\xDE" => "\xE3\x8E\x8C",		"\xA7\xDF" => "\xE3\x8F\x96",		"\xA7\xE0" => "\xE3\x8F\x85",		"\xA7\xE1" => "\xE3\x8E\xAD",		"\xA7\xE2" => "\xE3\x8E\xAE",		"\xA7\xE3" => "\xE3\x8E\xAF",		"\xA7\xE4" => "\xE3\x8F\x9B",		"\xA7\xE5" => "\xE3\x8E\xA9",		"\xA7\xE6" => "\xE3\x8E\xAA",		"\xA7\xE7" => "\xE3\x8E\xAB",		"\xA7\xE8" => "\xE3\x8E\xAC",		"\xA7\xE9" => "\xE3\x8F\x9D",		"\xA7\xEA" => "\xE3\x8F\x90",		"\xA7\xEB" => "\xE3\x8F\x93",		"\xA7\xEC" => "\xE3\x8F\x83",		"\xA7\xED" => "\xE3\x8F\x89",		"\xA7\xEE" => "\xE3\x8F\x9C",		"\xA7\xEF" => "\xE3\x8F\x86",		"\xA8\x41" => "\xEC\xAD\xAD",		"\xA8\x42" => "\xEC\xAD\xAE",		"\xA8\x43" => "\xEC\xAD\xAF",		"\xA8\x44" => "\xEC\xAD\xB0",		"\xA8\x45" => "\xEC\xAD\xB1",		"\xA8\x46" => "\xEC\xAD\xB2",		"\xA8\x47" => "\xEC\xAD\xB3",		"\xA8\x48" => "\xEC\xAD\xB4",		"\xA8\x49" => "\xEC\xAD\xB5",		"\xA8\x4A" => "\xEC\xAD\xB6",		"\xA8\x4B" => "\xEC\xAD\xB7",		"\xA8\x4C" => "\xEC\xAD\xBA",		"\xA8\x4D" => "\xEC\xAD\xBB",		"\xA8\x4E" => "\xEC\xAD\xBC",		"\xA8\x4F" => "\xEC\xAD\xBD",		"\xA8\x50" => "\xEC\xAD\xBE",		"\xA8\x51" => "\xEC\xAD\xBF",		"\xA8\x52" => "\xEC\xAE\x80",		"\xA8\x53" => "\xEC\xAE\x81",		"\xA8\x54" => "\xEC\xAE\x82",		"\xA8\x55" => "\xEC\xAE\x83",		"\xA8\x56" => "\xEC\xAE\x84",		"\xA8\x57" => "\xEC\xAE\x85",		"\xA8\x58" => "\xEC\xAE\x86",		"\xA8\x59" => "\xEC\xAE\x87",		"\xA8\x5A" => "\xEC\xAE\x88",		"\xA8\x61" => "\xEC\xAE\x89",		"\xA8\x62" => "\xEC\xAE\x8A",		"\xA8\x63" => "\xEC\xAE\x8B",		"\xA8\x64" => "\xEC\xAE\x8C",		"\xA8\x65" => "\xEC\xAE\x8D",		"\xA8\x66" => "\xEC\xAE\x8E",		"\xA8\x67" => "\xEC\xAE\x8F",		"\xA8\x68" => "\xEC\xAE\x90",		"\xA8\x69" => "\xEC\xAE\x91",		"\xA8\x6A" => "\xEC\xAE\x92",		"\xA8\x6B" => "\xEC\xAE\x93",		"\xA8\x6C" => "\xEC\xAE\x94",		"\xA8\x6D" => "\xEC\xAE\x95",		"\xA8\x6E" => "\xEC\xAE\x96",		"\xA8\x6F" => "\xEC\xAE\x97",		"\xA8\x70" => "\xEC\xAE\x98",		"\xA8\x71" => "\xEC\xAE\x99",		"\xA8\x72" => "\xEC\xAE\x9A",		"\xA8\x73" => "\xEC\xAE\x9B",		"\xA8\x74" => "\xEC\xAE\x9D",		"\xA8\x75" => "\xEC\xAE\x9E",		"\xA8\x76" => "\xEC\xAE\x9F",		"\xA8\x77" => "\xEC\xAE\xA0",		"\xA8\x78" => "\xEC\xAE\xA1",		"\xA8\x79" => "\xEC\xAE\xA2",		"\xA8\x7A" => "\xEC\xAE\xA3",		"\xA8\x81" => "\xEC\xAE\xA4",		"\xA8\x82" => "\xEC\xAE\xA5",		"\xA8\x83" => "\xEC\xAE\xA6",		"\xA8\x84" => "\xEC\xAE\xA7",		"\xA8\x85" => "\xEC\xAE\xA8",		"\xA8\x86" => "\xEC\xAE\xA9",		"\xA8\x87" => "\xEC\xAE\xAA",		"\xA8\x88" => "\xEC\xAE\xAB",		"\xA8\x89" => "\xEC\xAE\xAC",		"\xA8\x8A" => "\xEC\xAE\xAD",		"\xA8\x8B" => "\xEC\xAE\xAE",		"\xA8\x8C" => "\xEC\xAE\xAF",		"\xA8\x8D" => "\xEC\xAE\xB0",		"\xA8\x8E" => "\xEC\xAE\xB1",		"\xA8\x8F" => "\xEC\xAE\xB2",		"\xA8\x90" => "\xEC\xAE\xB3",		"\xA8\x91" => "\xEC\xAE\xB4",		"\xA8\x92" => "\xEC\xAE\xB5",		"\xA8\x93" => "\xEC\xAE\xB6",		"\xA8\x94" => "\xEC\xAE\xB7",		"\xA8\x95" => "\xEC\xAE\xB9",		"\xA8\x96" => "\xEC\xAE\xBA",		"\xA8\x97" => "\xEC\xAE\xBB",		"\xA8\x98" => "\xEC\xAE\xBC",		"\xA8\x99" => "\xEC\xAE\xBD",		"\xA8\x9A" => "\xEC\xAE\xBE",		"\xA8\x9B" => "\xEC\xAE\xBF",		"\xA8\x9C" => "\xEC\xAF\x80",		"\xA8\x9D" => "\xEC\xAF\x81",		"\xA8\x9E" => "\xEC\xAF\x82",		"\xA8\x9F" => "\xEC\xAF\x83",		"\xA8\xA0" => "\xEC\xAF\x84",		"\xA8\xA1" => "\xC3\x86",		"\xA8\xA2" => "\xC3\x90",		"\xA8\xA3" => "\xC2\xAA",		"\xA8\xA4" => "\xC4\xA6",		"\xA8\xA6" => "\xC4\xB2",		"\xA8\xA8" => "\xC4\xBF",		"\xA8\xA9" => "\xC5\x81",		"\xA8\xAA" => "\xC3\x98",		"\xA8\xAB" => "\xC5\x92",		"\xA8\xAC" => "\xC2\xBA",		"\xA8\xAD" => "\xC3\x9E",		"\xA8\xAE" => "\xC5\xA6",		"\xA8\xAF" => "\xC5\x8A",		"\xA8\xB1" => "\xE3\x89\xA0",		"\xA8\xB2" => "\xE3\x89\xA1",		"\xA8\xB3" => "\xE3\x89\xA2",		"\xA8\xB4" => "\xE3\x89\xA3",		"\xA8\xB5" => "\xE3\x89\xA4",		"\xA8\xB6" => "\xE3\x89\xA5",		"\xA8\xB7" => "\xE3\x89\xA6",		"\xA8\xB8" => "\xE3\x89\xA7",		"\xA8\xB9" => "\xE3\x89\xA8",		"\xA8\xBA" => "\xE3\x89\xA9",		"\xA8\xBB" => "\xE3\x89\xAA",		"\xA8\xBC" => "\xE3\x89\xAB",		"\xA8\xBD" => "\xE3\x89\xAC",		"\xA8\xBE" => "\xE3\x89\xAD",		"\xA8\xBF" => "\xE3\x89\xAE",		"\xA8\xC0" => "\xE3\x89\xAF",		"\xA8\xC1" => "\xE3\x89\xB0",		"\xA8\xC2" => "\xE3\x89\xB1",		"\xA8\xC3" => "\xE3\x89\xB2",		"\xA8\xC4" => "\xE3\x89\xB3",		"\xA8\xC5" => "\xE3\x89\xB4",		"\xA8\xC6" => "\xE3\x89\xB5",		"\xA8\xC7" => "\xE3\x89\xB6",		"\xA8\xC8" => "\xE3\x89\xB7",		"\xA8\xC9" => "\xE3\x89\xB8",		"\xA8\xCA" => "\xE3\x89\xB9",		"\xA8\xCB" => "\xE3\x89\xBA",		"\xA8\xCC" => "\xE3\x89\xBB",		"\xA8\xCD" => "\xE2\x93\x90",		"\xA8\xCE" => "\xE2\x93\x91",		"\xA8\xCF" => "\xE2\x93\x92",		"\xA8\xD0" => "\xE2\x93\x93",		"\xA8\xD1" => "\xE2\x93\x94",		"\xA8\xD2" => "\xE2\x93\x95",		"\xA8\xD3" => "\xE2\x93\x96",		"\xA8\xD4" => "\xE2\x93\x97",		"\xA8\xD5" => "\xE2\x93\x98",		"\xA8\xD6" => "\xE2\x93\x99",		"\xA8\xD7" => "\xE2\x93\x9A",		"\xA8\xD8" => "\xE2\x93\x9B",		"\xA8\xD9" => "\xE2\x93\x9C",		"\xA8\xDA" => "\xE2\x93\x9D",		"\xA8\xDB" => "\xE2\x93\x9E",		"\xA8\xDC" => "\xE2\x93\x9F",		"\xA8\xDD" => "\xE2\x93\xA0",		"\xA8\xDE" => "\xE2\x93\xA1",		"\xA8\xDF" => "\xE2\x93\xA2",		"\xA8\xE0" => "\xE2\x93\xA3",		"\xA8\xE1" => "\xE2\x93\xA4",		"\xA8\xE2" => "\xE2\x93\xA5",		"\xA8\xE3" => "\xE2\x93\xA6",		"\xA8\xE4" => "\xE2\x93\xA7",		"\xA8\xE5" => "\xE2\x93\xA8",		"\xA8\xE6" => "\xE2\x93\xA9",		"\xA8\xE7" => "\xE2\x91\xA0",		"\xA8\xE8" => "\xE2\x91\xA1",		"\xA8\xE9" => "\xE2\x91\xA2",		"\xA8\xEA" => "\xE2\x91\xA3",		"\xA8\xEB" => "\xE2\x91\xA4",		"\xA8\xEC" => "\xE2\x91\xA5",		"\xA8\xED" => "\xE2\x91\xA6",		"\xA8\xEE" => "\xE2\x91\xA7",		"\xA8\xEF" => "\xE2\x91\xA8",		"\xA8\xF0" => "\xE2\x91\xA9",		"\xA8\xF1" => "\xE2\x91\xAA",		"\xA8\xF2" => "\xE2\x91\xAB",		"\xA8\xF3" => "\xE2\x91\xAC",		"\xA8\xF4" => "\xE2\x91\xAD",		"\xA8\xF5" => "\xE2\x91\xAE",		"\xA8\xF6" => "\xC2\xBD",		"\xA8\xF7" => "\xE2\x85\x93",		"\xA8\xF8" => "\xE2\x85\x94",		"\xA8\xF9" => "\xC2\xBC",		"\xA8\xFA" => "\xC2\xBE",		"\xA8\xFB" => "\xE2\x85\x9B",		"\xA8\xFC" => "\xE2\x85\x9C",		"\xA8\xFD" => "\xE2\x85\x9D",		"\xA8\xFE" => "\xE2\x85\x9E",		"\xA9\x41" => "\xEC\xAF\x85",		"\xA9\x42" => "\xEC\xAF\x86",		"\xA9\x43" => "\xEC\xAF\x87",		"\xA9\x44" => "\xEC\xAF\x88",		"\xA9\x45" => "\xEC\xAF\x89",		"\xA9\x46" => "\xEC\xAF\x8A",		"\xA9\x47" => "\xEC\xAF\x8B",		"\xA9\x48" => "\xEC\xAF\x8C",		"\xA9\x49" => "\xEC\xAF\x8D",		"\xA9\x4A" => "\xEC\xAF\x8E",		"\xA9\x4B" => "\xEC\xAF\x8F",		"\xA9\x4C" => "\xEC\xAF\x90",		"\xA9\x4D" => "\xEC\xAF\x91",		"\xA9\x4E" => "\xEC\xAF\x92",		"\xA9\x4F" => "\xEC\xAF\x93",		"\xA9\x50" => "\xEC\xAF\x95",		"\xA9\x51" => "\xEC\xAF\x96",		"\xA9\x52" => "\xEC\xAF\x97",		"\xA9\x53" => "\xEC\xAF\x98",		"\xA9\x54" => "\xEC\xAF\x99",		"\xA9\x55" => "\xEC\xAF\x9A",		"\xA9\x56" => "\xEC\xAF\x9B",		"\xA9\x57" => "\xEC\xAF\x9C",		"\xA9\x58" => "\xEC\xAF\x9D",		"\xA9\x59" => "\xEC\xAF\x9E",		"\xA9\x5A" => "\xEC\xAF\x9F",		"\xA9\x61" => "\xEC\xAF\xA0",		"\xA9\x62" => "\xEC\xAF\xA1",		"\xA9\x63" => "\xEC\xAF\xA2",		"\xA9\x64" => "\xEC\xAF\xA3",		"\xA9\x65" => "\xEC\xAF\xA5",		"\xA9\x66" => "\xEC\xAF\xA6",		"\xA9\x67" => "\xEC\xAF\xA8",		"\xA9\x68" => "\xEC\xAF\xAA",		"\xA9\x69" => "\xEC\xAF\xAB",		"\xA9\x6A" => "\xEC\xAF\xAC",		"\xA9\x6B" => "\xEC\xAF\xAD",		"\xA9\x6C" => "\xEC\xAF\xAE",		"\xA9\x6D" => "\xEC\xAF\xAF",		"\xA9\x6E" => "\xEC\xAF\xB0",		"\xA9\x6F" => "\xEC\xAF\xB1",		"\xA9\x70" => "\xEC\xAF\xB2",		"\xA9\x71" => "\xEC\xAF\xB3",		"\xA9\x72" => "\xEC\xAF\xB4",		"\xA9\x73" => "\xEC\xAF\xB5",		"\xA9\x74" => "\xEC\xAF\xB6",		"\xA9\x75" => "\xEC\xAF\xB7",		"\xA9\x76" => "\xEC\xAF\xB8",		"\xA9\x77" => "\xEC\xAF\xB9",		"\xA9\x78" => "\xEC\xAF\xBA",		"\xA9\x79" => "\xEC\xAF\xBB",		"\xA9\x7A" => "\xEC\xAF\xBC",		"\xA9\x81" => "\xEC\xAF\xBD",		"\xA9\x82" => "\xEC\xAF\xBE",		"\xA9\x83" => "\xEC\xAF\xBF",		"\xA9\x84" => "\xEC\xB0\x80",		"\xA9\x85" => "\xEC\xB0\x81",		"\xA9\x86" => "\xEC\xB0\x82",		"\xA9\x87" => "\xEC\xB0\x83",		"\xA9\x88" => "\xEC\xB0\x84",		"\xA9\x89" => "\xEC\xB0\x85",		"\xA9\x8A" => "\xEC\xB0\x86",		"\xA9\x8B" => "\xEC\xB0\x87",		"\xA9\x8C" => "\xEC\xB0\x88",		"\xA9\x8D" => "\xEC\xB0\x89",		"\xA9\x8E" => "\xEC\xB0\x8A",		"\xA9\x8F" => "\xEC\xB0\x8B",		"\xA9\x90" => "\xEC\xB0\x8E",		"\xA9\x91" => "\xEC\xB0\x8F",		"\xA9\x92" => "\xEC\xB0\x91",		"\xA9\x93" => "\xEC\xB0\x92",		"\xA9\x94" => "\xEC\xB0\x93",		"\xA9\x95" => "\xEC\xB0\x95",		"\xA9\x96" => "\xEC\xB0\x96",		"\xA9\x97" => "\xEC\xB0\x97",		"\xA9\x98" => "\xEC\xB0\x98",		"\xA9\x99" => "\xEC\xB0\x99",		"\xA9\x9A" => "\xEC\xB0\x9A",		"\xA9\x9B" => "\xEC\xB0\x9B",		"\xA9\x9C" => "\xEC\xB0\x9E",		"\xA9\x9D" => "\xEC\xB0\x9F",		"\xA9\x9E" => "\xEC\xB0\xA0",		"\xA9\x9F" => "\xEC\xB0\xA3",		"\xA9\xA0" => "\xEC\xB0\xA4",		"\xA9\xA1" => "\xC3\xA6",		"\xA9\xA2" => "\xC4\x91",		"\xA9\xA3" => "\xC3\xB0",		"\xA9\xA4" => "\xC4\xA7",		"\xA9\xA5" => "\xC4\xB1",		"\xA9\xA6" => "\xC4\xB3",		"\xA9\xA7" => "\xC4\xB8",		"\xA9\xA8" => "\xC5\x80",		"\xA9\xA9" => "\xC5\x82",		"\xA9\xAA" => "\xC3\xB8",		"\xA9\xAB" => "\xC5\x93",		"\xA9\xAC" => "\xC3\x9F",		"\xA9\xAD" => "\xC3\xBE",		"\xA9\xAE" => "\xC5\xA7",		"\xA9\xAF" => "\xC5\x8B",		"\xA9\xB0" => "\xC5\x89",		"\xA9\xB1" => "\xE3\x88\x80",		"\xA9\xB2" => "\xE3\x88\x81",		"\xA9\xB3" => "\xE3\x88\x82",		"\xA9\xB4" => "\xE3\x88\x83",		"\xA9\xB5" => "\xE3\x88\x84",		"\xA9\xB6" => "\xE3\x88\x85",		"\xA9\xB7" => "\xE3\x88\x86",		"\xA9\xB8" => "\xE3\x88\x87",		"\xA9\xB9" => "\xE3\x88\x88",		"\xA9\xBA" => "\xE3\x88\x89",		"\xA9\xBB" => "\xE3\x88\x8A",		"\xA9\xBC" => "\xE3\x88\x8B",		"\xA9\xBD" => "\xE3\x88\x8C",		"\xA9\xBE" => "\xE3\x88\x8D",		"\xA9\xBF" => "\xE3\x88\x8E",		"\xA9\xC0" => "\xE3\x88\x8F",		"\xA9\xC1" => "\xE3\x88\x90",		"\xA9\xC2" => "\xE3\x88\x91",		"\xA9\xC3" => "\xE3\x88\x92",		"\xA9\xC4" => "\xE3\x88\x93",		"\xA9\xC5" => "\xE3\x88\x94",		"\xA9\xC6" => "\xE3\x88\x95",		"\xA9\xC7" => "\xE3\x88\x96",		"\xA9\xC8" => "\xE3\x88\x97",		"\xA9\xC9" => "\xE3\x88\x98",		"\xA9\xCA" => "\xE3\x88\x99",		"\xA9\xCB" => "\xE3\x88\x9A",		"\xA9\xCC" => "\xE3\x88\x9B",		"\xA9\xCD" => "\xE2\x92\x9C",		"\xA9\xCE" => "\xE2\x92\x9D",		"\xA9\xCF" => "\xE2\x92\x9E",		"\xA9\xD0" => "\xE2\x92\x9F",		"\xA9\xD1" => "\xE2\x92\xA0",		"\xA9\xD2" => "\xE2\x92\xA1",		"\xA9\xD3" => "\xE2\x92\xA2",		"\xA9\xD4" => "\xE2\x92\xA3",		"\xA9\xD5" => "\xE2\x92\xA4",		"\xA9\xD6" => "\xE2\x92\xA5",		"\xA9\xD7" => "\xE2\x92\xA6",		"\xA9\xD8" => "\xE2\x92\xA7",		"\xA9\xD9" => "\xE2\x92\xA8",		"\xA9\xDA" => "\xE2\x92\xA9",		"\xA9\xDB" => "\xE2\x92\xAA",		"\xA9\xDC" => "\xE2\x92\xAB",		"\xA9\xDD" => "\xE2\x92\xAC",		"\xA9\xDE" => "\xE2\x92\xAD",		"\xA9\xDF" => "\xE2\x92\xAE",		"\xA9\xE0" => "\xE2\x92\xAF",		"\xA9\xE1" => "\xE2\x92\xB0",		"\xA9\xE2" => "\xE2\x92\xB1",		"\xA9\xE3" => "\xE2\x92\xB2",		"\xA9\xE4" => "\xE2\x92\xB3",		"\xA9\xE5" => "\xE2\x92\xB4",		"\xA9\xE6" => "\xE2\x92\xB5",		"\xA9\xE7" => "\xE2\x91\xB4",		"\xA9\xE8" => "\xE2\x91\xB5",		"\xA9\xE9" => "\xE2\x91\xB6",		"\xA9\xEA" => "\xE2\x91\xB7",		"\xA9\xEB" => "\xE2\x91\xB8",		"\xA9\xEC" => "\xE2\x91\xB9",		"\xA9\xED" => "\xE2\x91\xBA",		"\xA9\xEE" => "\xE2\x91\xBB",		"\xA9\xEF" => "\xE2\x91\xBC",		"\xA9\xF0" => "\xE2\x91\xBD",		"\xA9\xF1" => "\xE2\x91\xBE",		"\xA9\xF2" => "\xE2\x91\xBF",		"\xA9\xF3" => "\xE2\x92\x80",		"\xA9\xF4" => "\xE2\x92\x81",		"\xA9\xF5" => "\xE2\x92\x82",		"\xA9\xF6" => "\xC2\xB9",		"\xA9\xF7" => "\xC2\xB2",		"\xA9\xF8" => "\xC2\xB3",		"\xA9\xF9" => "\xE2\x81\xB4",		"\xA9\xFA" => "\xE2\x81\xBF",		"\xA9\xFB" => "\xE2\x82\x81",		"\xA9\xFC" => "\xE2\x82\x82",		"\xA9\xFD" => "\xE2\x82\x83",		"\xA9\xFE" => "\xE2\x82\x84",		"\xAA\x41" => "\xEC\xB0\xA5",		"\xAA\x42" => "\xEC\xB0\xA6",		"\xAA\x43" => "\xEC\xB0\xAA",		"\xAA\x44" => "\xEC\xB0\xAB",		"\xAA\x45" => "\xEC\xB0\xAD",		"\xAA\x46" => "\xEC\xB0\xAF",		"\xAA\x47" => "\xEC\xB0\xB1",		"\xAA\x48" => "\xEC\xB0\xB2",		"\xAA\x49" => "\xEC\xB0\xB3",		"\xAA\x4A" => "\xEC\xB0\xB4",		"\xAA\x4B" => "\xEC\xB0\xB5",		"\xAA\x4C" => "\xEC\xB0\xB6",		"\xAA\x4D" => "\xEC\xB0\xB7",		"\xAA\x4E" => "\xEC\xB0\xBA",		"\xAA\x4F" => "\xEC\xB0\xBF",		"\xAA\x50" => "\xEC\xB1\x80",		"\xAA\x51" => "\xEC\xB1\x81",		"\xAA\x52" => "\xEC\xB1\x82",		"\xAA\x53" => "\xEC\xB1\x83",		"\xAA\x54" => "\xEC\xB1\x86",		"\xAA\x55" => "\xEC\xB1\x87",		"\xAA\x56" => "\xEC\xB1\x89",		"\xAA\x57" => "\xEC\xB1\x8A",		"\xAA\x58" => "\xEC\xB1\x8B",		"\xAA\x59" => "\xEC\xB1\x8D",		"\xAA\x5A" => "\xEC\xB1\x8E",		"\xAA\x61" => "\xEC\xB1\x8F",		"\xAA\x62" => "\xEC\xB1\x90",		"\xAA\x63" => "\xEC\xB1\x91",		"\xAA\x64" => "\xEC\xB1\x92",		"\xAA\x65" => "\xEC\xB1\x93",		"\xAA\x66" => "\xEC\xB1\x96",		"\xAA\x67" => "\xEC\xB1\x9A",		"\xAA\x68" => "\xEC\xB1\x9B",		"\xAA\x69" => "\xEC\xB1\x9C",		"\xAA\x6A" => "\xEC\xB1\x9D",		"\xAA\x6B" => "\xEC\xB1\x9E",		"\xAA\x6C" => "\xEC\xB1\x9F",		"\xAA\x6D" => "\xEC\xB1\xA1",		"\xAA\x6E" => "\xEC\xB1\xA2",		"\xAA\x6F" => "\xEC\xB1\xA3",		"\xAA\x70" => "\xEC\xB1\xA5",		"\xAA\x71" => "\xEC\xB1\xA7",		"\xAA\x72" => "\xEC\xB1\xA9",		"\xAA\x73" => "\xEC\xB1\xAA",		"\xAA\x74" => "\xEC\xB1\xAB",		"\xAA\x75" => "\xEC\xB1\xAC",		"\xAA\x76" => "\xEC\xB1\xAD",		"\xAA\x77" => "\xEC\xB1\xAE",		"\xAA\x78" => "\xEC\xB1\xAF",		"\xAA\x79" => "\xEC\xB1\xB1",		"\xAA\x7A" => "\xEC\xB1\xB2",		"\xAA\x81" => "\xEC\xB1\xB3",		"\xAA\x82" => "\xEC\xB1\xB4",		"\xAA\x83" => "\xEC\xB1\xB6",		"\xAA\x84" => "\xEC\xB1\xB7",		"\xAA\x85" => "\xEC\xB1\xB8",		"\xAA\x86" => "\xEC\xB1\xB9",		"\xAA\x87" => "\xEC\xB1\xBA",		"\xAA\x88" => "\xEC\xB1\xBB",		"\xAA\x89" => "\xEC\xB1\xBC",		"\xAA\x8A" => "\xEC\xB1\xBD",		"\xAA\x8B" => "\xEC\xB1\xBE",		"\xAA\x8C" => "\xEC\xB1\xBF",		"\xAA\x8D" => "\xEC\xB2\x80",		"\xAA\x8E" => "\xEC\xB2\x81",		"\xAA\x8F" => "\xEC\xB2\x82",		"\xAA\x90" => "\xEC\xB2\x83",		"\xAA\x91" => "\xEC\xB2\x84",		"\xAA\x92" => "\xEC\xB2\x85",		"\xAA\x93" => "\xEC\xB2\x86",		"\xAA\x94" => "\xEC\xB2\x87",		"\xAA\x95" => "\xEC\xB2\x88",		"\xAA\x96" => "\xEC\xB2\x89",		"\xAA\x97" => "\xEC\xB2\x8A",		"\xAA\x98" => "\xEC\xB2\x8B",		"\xAA\x99" => "\xEC\xB2\x8C",		"\xAA\x9A" => "\xEC\xB2\x8D",		"\xAA\x9B" => "\xEC\xB2\x8E",		"\xAA\x9C" => "\xEC\xB2\x8F",		"\xAA\x9D" => "\xEC\xB2\x90",		"\xAA\x9E" => "\xEC\xB2\x91",		"\xAA\x9F" => "\xEC\xB2\x92",		"\xAA\xA0" => "\xEC\xB2\x93",		"\xAA\xA1" => "\xE3\x81\x81",		"\xAA\xA2" => "\xE3\x81\x82",		"\xAA\xA3" => "\xE3\x81\x83",		"\xAA\xA4" => "\xE3\x81\x84",		"\xAA\xA5" => "\xE3\x81\x85",		"\xAA\xA6" => "\xE3\x81\x86",		"\xAA\xA7" => "\xE3\x81\x87",		"\xAA\xA8" => "\xE3\x81\x88",		"\xAA\xA9" => "\xE3\x81\x89",		"\xAA\xAA" => "\xE3\x81\x8A",		"\xAA\xAB" => "\xE3\x81\x8B",		"\xAA\xAC" => "\xE3\x81\x8C",		"\xAA\xAD" => "\xE3\x81\x8D",		"\xAA\xAE" => "\xE3\x81\x8E",		"\xAA\xAF" => "\xE3\x81\x8F",		"\xAA\xB0" => "\xE3\x81\x90",		"\xAA\xB1" => "\xE3\x81\x91",		"\xAA\xB2" => "\xE3\x81\x92",		"\xAA\xB3" => "\xE3\x81\x93",		"\xAA\xB4" => "\xE3\x81\x94",		"\xAA\xB5" => "\xE3\x81\x95",		"\xAA\xB6" => "\xE3\x81\x96",		"\xAA\xB7" => "\xE3\x81\x97",		"\xAA\xB8" => "\xE3\x81\x98",		"\xAA\xB9" => "\xE3\x81\x99",		"\xAA\xBA" => "\xE3\x81\x9A",		"\xAA\xBB" => "\xE3\x81\x9B",		"\xAA\xBC" => "\xE3\x81\x9C",		"\xAA\xBD" => "\xE3\x81\x9D",		"\xAA\xBE" => "\xE3\x81\x9E",		"\xAA\xBF" => "\xE3\x81\x9F",		"\xAA\xC0" => "\xE3\x81\xA0",		"\xAA\xC1" => "\xE3\x81\xA1",		"\xAA\xC2" => "\xE3\x81\xA2",		"\xAA\xC3" => "\xE3\x81\xA3",		"\xAA\xC4" => "\xE3\x81\xA4",		"\xAA\xC5" => "\xE3\x81\xA5",		"\xAA\xC6" => "\xE3\x81\xA6",		"\xAA\xC7" => "\xE3\x81\xA7",		"\xAA\xC8" => "\xE3\x81\xA8",		"\xAA\xC9" => "\xE3\x81\xA9",		"\xAA\xCA" => "\xE3\x81\xAA",		"\xAA\xCB" => "\xE3\x81\xAB",		"\xAA\xCC" => "\xE3\x81\xAC",		"\xAA\xCD" => "\xE3\x81\xAD",		"\xAA\xCE" => "\xE3\x81\xAE",		"\xAA\xCF" => "\xE3\x81\xAF",		"\xAA\xD0" => "\xE3\x81\xB0",		"\xAA\xD1" => "\xE3\x81\xB1",		"\xAA\xD2" => "\xE3\x81\xB2",		"\xAA\xD3" => "\xE3\x81\xB3",		"\xAA\xD4" => "\xE3\x81\xB4",		"\xAA\xD5" => "\xE3\x81\xB5",		"\xAA\xD6" => "\xE3\x81\xB6",		"\xAA\xD7" => "\xE3\x81\xB7",		"\xAA\xD8" => "\xE3\x81\xB8",		"\xAA\xD9" => "\xE3\x81\xB9",		"\xAA\xDA" => "\xE3\x81\xBA",		"\xAA\xDB" => "\xE3\x81\xBB",		"\xAA\xDC" => "\xE3\x81\xBC",		"\xAA\xDD" => "\xE3\x81\xBD",		"\xAA\xDE" => "\xE3\x81\xBE",		"\xAA\xDF" => "\xE3\x81\xBF",		"\xAA\xE0" => "\xE3\x82\x80",		"\xAA\xE1" => "\xE3\x82\x81",		"\xAA\xE2" => "\xE3\x82\x82",		"\xAA\xE3" => "\xE3\x82\x83",		"\xAA\xE4" => "\xE3\x82\x84",		"\xAA\xE5" => "\xE3\x82\x85",		"\xAA\xE6" => "\xE3\x82\x86",		"\xAA\xE7" => "\xE3\x82\x87",		"\xAA\xE8" => "\xE3\x82\x88",		"\xAA\xE9" => "\xE3\x82\x89",		"\xAA\xEA" => "\xE3\x82\x8A",		"\xAA\xEB" => "\xE3\x82\x8B",		"\xAA\xEC" => "\xE3\x82\x8C",		"\xAA\xED" => "\xE3\x82\x8D",		"\xAA\xEE" => "\xE3\x82\x8E",		"\xAA\xEF" => "\xE3\x82\x8F",		"\xAA\xF0" => "\xE3\x82\x90",		"\xAA\xF1" => "\xE3\x82\x91",		"\xAA\xF2" => "\xE3\x82\x92",		"\xAA\xF3" => "\xE3\x82\x93",		"\xAB\x41" => "\xEC\xB2\x94",		"\xAB\x42" => "\xEC\xB2\x95",		"\xAB\x43" => "\xEC\xB2\x96",		"\xAB\x44" => "\xEC\xB2\x97",		"\xAB\x45" => "\xEC\xB2\x9A",		"\xAB\x46" => "\xEC\xB2\x9B",		"\xAB\x47" => "\xEC\xB2\x9D",		"\xAB\x48" => "\xEC\xB2\x9E",		"\xAB\x49" => "\xEC\xB2\x9F",		"\xAB\x4A" => "\xEC\xB2\xA1",		"\xAB\x4B" => "\xEC\xB2\xA2",		"\xAB\x4C" => "\xEC\xB2\xA3",		"\xAB\x4D" => "\xEC\xB2\xA4",		"\xAB\x4E" => "\xEC\xB2\xA5",		"\xAB\x4F" => "\xEC\xB2\xA6",		"\xAB\x50" => "\xEC\xB2\xA7",		"\xAB\x51" => "\xEC\xB2\xAA",		"\xAB\x52" => "\xEC\xB2\xAE",		"\xAB\x53" => "\xEC\xB2\xAF",		"\xAB\x54" => "\xEC\xB2\xB0",		"\xAB\x55" => "\xEC\xB2\xB1",		"\xAB\x56" => "\xEC\xB2\xB2",		"\xAB\x57" => "\xEC\xB2\xB3",		"\xAB\x58" => "\xEC\xB2\xB6",		"\xAB\x59" => "\xEC\xB2\xB7",		"\xAB\x5A" => "\xEC\xB2\xB9",		"\xAB\x61" => "\xEC\xB2\xBA",		"\xAB\x62" => "\xEC\xB2\xBB",		"\xAB\x63" => "\xEC\xB2\xBD",		"\xAB\x64" => "\xEC\xB2\xBE",		"\xAB\x65" => "\xEC\xB2\xBF",		"\xAB\x66" => "\xEC\xB3\x80",		"\xAB\x67" => "\xEC\xB3\x81",		"\xAB\x68" => "\xEC\xB3\x82",		"\xAB\x69" => "\xEC\xB3\x83",		"\xAB\x6A" => "\xEC\xB3\x86",		"\xAB\x6B" => "\xEC\xB3\x88",		"\xAB\x6C" => "\xEC\xB3\x8A",		"\xAB\x6D" => "\xEC\xB3\x8B",		"\xAB\x6E" => "\xEC\xB3\x8C",		"\xAB\x6F" => "\xEC\xB3\x8D",		"\xAB\x70" => "\xEC\xB3\x8E",		"\xAB\x71" => "\xEC\xB3\x8F",		"\xAB\x72" => "\xEC\xB3\x91",		"\xAB\x73" => "\xEC\xB3\x92",		"\xAB\x74" => "\xEC\xB3\x93",		"\xAB\x75" => "\xEC\xB3\x95",		"\xAB\x76" => "\xEC\xB3\x96",		"\xAB\x77" => "\xEC\xB3\x97",		"\xAB\x78" => "\xEC\xB3\x98",		"\xAB\x79" => "\xEC\xB3\x99",		"\xAB\x7A" => "\xEC\xB3\x9A",		"\xAB\x81" => "\xEC\xB3\x9B",		"\xAB\x82" => "\xEC\xB3\x9C",		"\xAB\x83" => "\xEC\xB3\x9D",		"\xAB\x84" => "\xEC\xB3\x9E",		"\xAB\x85" => "\xEC\xB3\x9F",		"\xAB\x86" => "\xEC\xB3\xA0",		"\xAB\x87" => "\xEC\xB3\xA1",		"\xAB\x88" => "\xEC\xB3\xA2",		"\xAB\x89" => "\xEC\xB3\xA3",		"\xAB\x8A" => "\xEC\xB3\xA5",		"\xAB\x8B" => "\xEC\xB3\xA6",		"\xAB\x8C" => "\xEC\xB3\xA7",		"\xAB\x8D" => "\xEC\xB3\xA8",		"\xAB\x8E" => "\xEC\xB3\xA9",		"\xAB\x8F" => "\xEC\xB3\xAA",		"\xAB\x90" => "\xEC\xB3\xAB",		"\xAB\x91" => "\xEC\xB3\xAD",		"\xAB\x92" => "\xEC\xB3\xAE",		"\xAB\x93" => "\xEC\xB3\xAF",		"\xAB\x94" => "\xEC\xB3\xB1",		"\xAB\x95" => "\xEC\xB3\xB2",		"\xAB\x96" => "\xEC\xB3\xB3",		"\xAB\x97" => "\xEC\xB3\xB4",		"\xAB\x98" => "\xEC\xB3\xB5",		"\xAB\x99" => "\xEC\xB3\xB6",		"\xAB\x9A" => "\xEC\xB3\xB7",		"\xAB\x9B" => "\xEC\xB3\xB8",		"\xAB\x9C" => "\xEC\xB3\xB9",		"\xAB\x9D" => "\xEC\xB3\xBA",		"\xAB\x9E" => "\xEC\xB3\xBB",		"\xAB\x9F" => "\xEC\xB3\xBC",		"\xAB\xA0" => "\xEC\xB3\xBD",		"\xAB\xA1" => "\xE3\x82\xA1",		"\xAB\xA2" => "\xE3\x82\xA2",		"\xAB\xA3" => "\xE3\x82\xA3",		"\xAB\xA4" => "\xE3\x82\xA4",		"\xAB\xA5" => "\xE3\x82\xA5",		"\xAB\xA6" => "\xE3\x82\xA6",		"\xAB\xA7" => "\xE3\x82\xA7",		"\xAB\xA8" => "\xE3\x82\xA8",		"\xAB\xA9" => "\xE3\x82\xA9",		"\xAB\xAA" => "\xE3\x82\xAA",		"\xAB\xAB" => "\xE3\x82\xAB",		"\xAB\xAC" => "\xE3\x82\xAC",		"\xAB\xAD" => "\xE3\x82\xAD",		"\xAB\xAE" => "\xE3\x82\xAE",		"\xAB\xAF" => "\xE3\x82\xAF",		"\xAB\xB0" => "\xE3\x82\xB0",		"\xAB\xB1" => "\xE3\x82\xB1",		"\xAB\xB2" => "\xE3\x82\xB2",		"\xAB\xB3" => "\xE3\x82\xB3",		"\xAB\xB4" => "\xE3\x82\xB4",		"\xAB\xB5" => "\xE3\x82\xB5",		"\xAB\xB6" => "\xE3\x82\xB6",		"\xAB\xB7" => "\xE3\x82\xB7",		"\xAB\xB8" => "\xE3\x82\xB8",		"\xAB\xB9" => "\xE3\x82\xB9",		"\xAB\xBA" => "\xE3\x82\xBA",		"\xAB\xBB" => "\xE3\x82\xBB",		"\xAB\xBC" => "\xE3\x82\xBC",		"\xAB\xBD" => "\xE3\x82\xBD",		"\xAB\xBE" => "\xE3\x82\xBE",		"\xAB\xBF" => "\xE3\x82\xBF",		"\xAB\xC0" => "\xE3\x83\x80",		"\xAB\xC1" => "\xE3\x83\x81",		"\xAB\xC2" => "\xE3\x83\x82",		"\xAB\xC3" => "\xE3\x83\x83",		"\xAB\xC4" => "\xE3\x83\x84",		"\xAB\xC5" => "\xE3\x83\x85",		"\xAB\xC6" => "\xE3\x83\x86",		"\xAB\xC7" => "\xE3\x83\x87",		"\xAB\xC8" => "\xE3\x83\x88",		"\xAB\xC9" => "\xE3\x83\x89",		"\xAB\xCA" => "\xE3\x83\x8A",		"\xAB\xCB" => "\xE3\x83\x8B",		"\xAB\xCC" => "\xE3\x83\x8C",		"\xAB\xCD" => "\xE3\x83\x8D",		"\xAB\xCE" => "\xE3\x83\x8E",		"\xAB\xCF" => "\xE3\x83\x8F",		"\xAB\xD0" => "\xE3\x83\x90",		"\xAB\xD1" => "\xE3\x83\x91",		"\xAB\xD2" => "\xE3\x83\x92",		"\xAB\xD3" => "\xE3\x83\x93",		"\xAB\xD4" => "\xE3\x83\x94",		"\xAB\xD5" => "\xE3\x83\x95",		"\xAB\xD6" => "\xE3\x83\x96",		"\xAB\xD7" => "\xE3\x83\x97",		"\xAB\xD8" => "\xE3\x83\x98",		"\xAB\xD9" => "\xE3\x83\x99",		"\xAB\xDA" => "\xE3\x83\x9A",		"\xAB\xDB" => "\xE3\x83\x9B",		"\xAB\xDC" => "\xE3\x83\x9C",		"\xAB\xDD" => "\xE3\x83\x9D",		"\xAB\xDE" => "\xE3\x83\x9E",		"\xAB\xDF" => "\xE3\x83\x9F",		"\xAB\xE0" => "\xE3\x83\xA0",		"\xAB\xE1" => "\xE3\x83\xA1",		"\xAB\xE2" => "\xE3\x83\xA2",		"\xAB\xE3" => "\xE3\x83\xA3",		"\xAB\xE4" => "\xE3\x83\xA4",		"\xAB\xE5" => "\xE3\x83\xA5",		"\xAB\xE6" => "\xE3\x83\xA6",		"\xAB\xE7" => "\xE3\x83\xA7",		"\xAB\xE8" => "\xE3\x83\xA8",		"\xAB\xE9" => "\xE3\x83\xA9",		"\xAB\xEA" => "\xE3\x83\xAA",		"\xAB\xEB" => "\xE3\x83\xAB",		"\xAB\xEC" => "\xE3\x83\xAC",		"\xAB\xED" => "\xE3\x83\xAD",		"\xAB\xEE" => "\xE3\x83\xAE",		"\xAB\xEF" => "\xE3\x83\xAF",		"\xAB\xF0" => "\xE3\x83\xB0",		"\xAB\xF1" => "\xE3\x83\xB1",		"\xAB\xF2" => "\xE3\x83\xB2",		"\xAB\xF3" => "\xE3\x83\xB3",		"\xAB\xF4" => "\xE3\x83\xB4",		"\xAB\xF5" => "\xE3\x83\xB5",		"\xAB\xF6" => "\xE3\x83\xB6",		"\xAC\x41" => "\xEC\xB3\xBE",		"\xAC\x42" => "\xEC\xB3\xBF",		"\xAC\x43" => "\xEC\xB4\x80",		"\xAC\x44" => "\xEC\xB4\x82",		"\xAC\x45" => "\xEC\xB4\x83",		"\xAC\x46" => "\xEC\xB4\x84",		"\xAC\x47" => "\xEC\xB4\x85",		"\xAC\x48" => "\xEC\xB4\x86",		"\xAC\x49" => "\xEC\xB4\x87",		"\xAC\x4A" => "\xEC\xB4\x8A",		"\xAC\x4B" => "\xEC\xB4\x8B",		"\xAC\x4C" => "\xEC\xB4\x8D",		"\xAC\x4D" => "\xEC\xB4\x8E",		"\xAC\x4E" => "\xEC\xB4\x8F",		"\xAC\x4F" => "\xEC\xB4\x91",		"\xAC\x50" => "\xEC\xB4\x92",		"\xAC\x51" => "\xEC\xB4\x93",		"\xAC\x52" => "\xEC\xB4\x94",		"\xAC\x53" => "\xEC\xB4\x95",		"\xAC\x54" => "\xEC\xB4\x96",		"\xAC\x55" => "\xEC\xB4\x97",		"\xAC\x56" => "\xEC\xB4\x9A",		"\xAC\x57" => "\xEC\xB4\x9C",		"\xAC\x58" => "\xEC\xB4\x9E",		"\xAC\x59" => "\xEC\xB4\x9F",		"\xAC\x5A" => "\xEC\xB4\xA0",		"\xAC\x61" => "\xEC\xB4\xA1",		"\xAC\x62" => "\xEC\xB4\xA2",		"\xAC\x63" => "\xEC\xB4\xA3",		"\xAC\x64" => "\xEC\xB4\xA5",		"\xAC\x65" => "\xEC\xB4\xA6",		"\xAC\x66" => "\xEC\xB4\xA7",		"\xAC\x67" => "\xEC\xB4\xA9",		"\xAC\x68" => "\xEC\xB4\xAA",		"\xAC\x69" => "\xEC\xB4\xAB",		"\xAC\x6A" => "\xEC\xB4\xAD",		"\xAC\x6B" => "\xEC\xB4\xAE",		"\xAC\x6C" => "\xEC\xB4\xAF",		"\xAC\x6D" => "\xEC\xB4\xB0",		"\xAC\x6E" => "\xEC\xB4\xB1",		"\xAC\x6F" => "\xEC\xB4\xB2",		"\xAC\x70" => "\xEC\xB4\xB3",		"\xAC\x71" => "\xEC\xB4\xB4",		"\xAC\x72" => "\xEC\xB4\xB5",		"\xAC\x73" => "\xEC\xB4\xB6",		"\xAC\x74" => "\xEC\xB4\xB7",		"\xAC\x75" => "\xEC\xB4\xB8",		"\xAC\x76" => "\xEC\xB4\xBA",		"\xAC\x77" => "\xEC\xB4\xBB",		"\xAC\x78" => "\xEC\xB4\xBC",		"\xAC\x79" => "\xEC\xB4\xBD",		"\xAC\x7A" => "\xEC\xB4\xBE",		"\xAC\x81" => "\xEC\xB4\xBF",		"\xAC\x82" => "\xEC\xB5\x80",		"\xAC\x83" => "\xEC\xB5\x81",		"\xAC\x84" => "\xEC\xB5\x82",		"\xAC\x85" => "\xEC\xB5\x83",		"\xAC\x86" => "\xEC\xB5\x84",		"\xAC\x87" => "\xEC\xB5\x85",		"\xAC\x88" => "\xEC\xB5\x86",		"\xAC\x89" => "\xEC\xB5\x87",		"\xAC\x8A" => "\xEC\xB5\x88",		"\xAC\x8B" => "\xEC\xB5\x89",		"\xAC\x8C" => "\xEC\xB5\x8A",		"\xAC\x8D" => "\xEC\xB5\x8B",		"\xAC\x8E" => "\xEC\xB5\x8C",		"\xAC\x8F" => "\xEC\xB5\x8D",		"\xAC\x90" => "\xEC\xB5\x8E",		"\xAC\x91" => "\xEC\xB5\x8F",		"\xAC\x92" => "\xEC\xB5\x90",		"\xAC\x93" => "\xEC\xB5\x91",		"\xAC\x94" => "\xEC\xB5\x92",		"\xAC\x95" => "\xEC\xB5\x93",		"\xAC\x96" => "\xEC\xB5\x94",		"\xAC\x97" => "\xEC\xB5\x95",		"\xAC\x98" => "\xEC\xB5\x96",		"\xAC\x99" => "\xEC\xB5\x97",		"\xAC\x9A" => "\xEC\xB5\x98",		"\xAC\x9B" => "\xEC\xB5\x99",		"\xAC\x9C" => "\xEC\xB5\x9A",		"\xAC\x9D" => "\xEC\xB5\x9B",		"\xAC\x9E" => "\xEC\xB5\x9D",		"\xAC\x9F" => "\xEC\xB5\x9E",		"\xAC\xA0" => "\xEC\xB5\x9F",		"\xAC\xA1" => "\xD0\x90",		"\xAC\xA2" => "\xD0\x91",		"\xAC\xA3" => "\xD0\x92",		"\xAC\xA4" => "\xD0\x93",		"\xAC\xA5" => "\xD0\x94",		"\xAC\xA6" => "\xD0\x95",		"\xAC\xA7" => "\xD0\x81",		"\xAC\xA8" => "\xD0\x96",		"\xAC\xA9" => "\xD0\x97",		"\xAC\xAA" => "\xD0\x98",		"\xAC\xAB" => "\xD0\x99",		"\xAC\xAC" => "\xD0\x9A",		"\xAC\xAD" => "\xD0\x9B",		"\xAC\xAE" => "\xD0\x9C",		"\xAC\xAF" => "\xD0\x9D",		"\xAC\xB0" => "\xD0\x9E",		"\xAC\xB1" => "\xD0\x9F",		"\xAC\xB2" => "\xD0\xA0",		"\xAC\xB3" => "\xD0\xA1",		"\xAC\xB4" => "\xD0\xA2",		"\xAC\xB5" => "\xD0\xA3",		"\xAC\xB6" => "\xD0\xA4",		"\xAC\xB7" => "\xD0\xA5",		"\xAC\xB8" => "\xD0\xA6",		"\xAC\xB9" => "\xD0\xA7",		"\xAC\xBA" => "\xD0\xA8",		"\xAC\xBB" => "\xD0\xA9",		"\xAC\xBC" => "\xD0\xAA",		"\xAC\xBD" => "\xD0\xAB",		"\xAC\xBE" => "\xD0\xAC",		"\xAC\xBF" => "\xD0\xAD",		"\xAC\xC0" => "\xD0\xAE",		"\xAC\xC1" => "\xD0\xAF",		"\xAC\xD1" => "\xD0\xB0",		"\xAC\xD2" => "\xD0\xB1",		"\xAC\xD3" => "\xD0\xB2",		"\xAC\xD4" => "\xD0\xB3",		"\xAC\xD5" => "\xD0\xB4",		"\xAC\xD6" => "\xD0\xB5",		"\xAC\xD7" => "\xD1\x91",		"\xAC\xD8" => "\xD0\xB6",		"\xAC\xD9" => "\xD0\xB7",		"\xAC\xDA" => "\xD0\xB8",		"\xAC\xDB" => "\xD0\xB9",		"\xAC\xDC" => "\xD0\xBA",		"\xAC\xDD" => "\xD0\xBB",		"\xAC\xDE" => "\xD0\xBC",		"\xAC\xDF" => "\xD0\xBD",		"\xAC\xE0" => "\xD0\xBE",		"\xAC\xE1" => "\xD0\xBF",		"\xAC\xE2" => "\xD1\x80",		"\xAC\xE3" => "\xD1\x81",		"\xAC\xE4" => "\xD1\x82",		"\xAC\xE5" => "\xD1\x83",		"\xAC\xE6" => "\xD1\x84",		"\xAC\xE7" => "\xD1\x85",		"\xAC\xE8" => "\xD1\x86",		"\xAC\xE9" => "\xD1\x87",		"\xAC\xEA" => "\xD1\x88",		"\xAC\xEB" => "\xD1\x89",		"\xAC\xEC" => "\xD1\x8A",		"\xAC\xED" => "\xD1\x8B",		"\xAC\xEE" => "\xD1\x8C",		"\xAC\xEF" => "\xD1\x8D",		"\xAC\xF0" => "\xD1\x8E",		"\xAC\xF1" => "\xD1\x8F",		"\xAD\x41" => "\xEC\xB5\xA1",		"\xAD\x42" => "\xEC\xB5\xA2",		"\xAD\x43" => "\xEC\xB5\xA3",		"\xAD\x44" => "\xEC\xB5\xA5",		"\xAD\x45" => "\xEC\xB5\xA6",		"\xAD\x46" => "\xEC\xB5\xA7",		"\xAD\x47" => "\xEC\xB5\xA8",		"\xAD\x48" => "\xEC\xB5\xA9",		"\xAD\x49" => "\xEC\xB5\xAA",		"\xAD\x4A" => "\xEC\xB5\xAB",		"\xAD\x4B" => "\xEC\xB5\xAE",		"\xAD\x4C" => "\xEC\xB5\xB0",		"\xAD\x4D" => "\xEC\xB5\xB2",		"\xAD\x4E" => "\xEC\xB5\xB3",		"\xAD\x4F" => "\xEC\xB5\xB4",		"\xAD\x50" => "\xEC\xB5\xB5",		"\xAD\x51" => "\xEC\xB5\xB6",		"\xAD\x52" => "\xEC\xB5\xB7",		"\xAD\x53" => "\xEC\xB5\xB9",		"\xAD\x54" => "\xEC\xB5\xBA",		"\xAD\x55" => "\xEC\xB5\xBB",		"\xAD\x56" => "\xEC\xB5\xBC",		"\xAD\x57" => "\xEC\xB5\xBD",		"\xAD\x58" => "\xEC\xB5\xBE",		"\xAD\x59" => "\xEC\xB5\xBF",		"\xAD\x5A" => "\xEC\xB6\x80",		"\xAD\x61" => "\xEC\xB6\x81",		"\xAD\x62" => "\xEC\xB6\x82",		"\xAD\x63" => "\xEC\xB6\x83",		"\xAD\x64" => "\xEC\xB6\x84",		"\xAD\x65" => "\xEC\xB6\x85",		"\xAD\x66" => "\xEC\xB6\x86",		"\xAD\x67" => "\xEC\xB6\x87",		"\xAD\x68" => "\xEC\xB6\x89",		"\xAD\x69" => "\xEC\xB6\x8A",		"\xAD\x6A" => "\xEC\xB6\x8B",		"\xAD\x6B" => "\xEC\xB6\x8C",		"\xAD\x6C" => "\xEC\xB6\x8D",		"\xAD\x6D" => "\xEC\xB6\x8E",		"\xAD\x6E" => "\xEC\xB6\x8F",		"\xAD\x6F" => "\xEC\xB6\x90",		"\xAD\x70" => "\xEC\xB6\x91",		"\xAD\x71" => "\xEC\xB6\x92",		"\xAD\x72" => "\xEC\xB6\x93",		"\xAD\x73" => "\xEC\xB6\x96",		"\xAD\x74" => "\xEC\xB6\x97",		"\xAD\x75" => "\xEC\xB6\x99",		"\xAD\x76" => "\xEC\xB6\x9A",		"\xAD\x77" => "\xEC\xB6\x9B",		"\xAD\x78" => "\xEC\xB6\x9D",		"\xAD\x79" => "\xEC\xB6\x9E",		"\xAD\x7A" => "\xEC\xB6\x9F",		"\xAD\x81" => "\xEC\xB6\xA0",		"\xAD\x82" => "\xEC\xB6\xA1",		"\xAD\x83" => "\xEC\xB6\xA2",		"\xAD\x84" => "\xEC\xB6\xA3",		"\xAD\x85" => "\xEC\xB6\xA6",		"\xAD\x86" => "\xEC\xB6\xA8",		"\xAD\x87" => "\xEC\xB6\xAA",		"\xAD\x88" => "\xEC\xB6\xAB",		"\xAD\x89" => "\xEC\xB6\xAC",		"\xAD\x8A" => "\xEC\xB6\xAD",		"\xAD\x8B" => "\xEC\xB6\xAE",		"\xAD\x8C" => "\xEC\xB6\xAF",		"\xAD\x8D" => "\xEC\xB6\xB1",		"\xAD\x8E" => "\xEC\xB6\xB2",		"\xAD\x8F" => "\xEC\xB6\xB3",		"\xAD\x90" => "\xEC\xB6\xB4",		"\xAD\x91" => "\xEC\xB6\xB5",		"\xAD\x92" => "\xEC\xB6\xB6",		"\xAD\x93" => "\xEC\xB6\xB7",		"\xAD\x94" => "\xEC\xB6\xB8",		"\xAD\x95" => "\xEC\xB6\xB9",		"\xAD\x96" => "\xEC\xB6\xBA",		"\xAD\x97" => "\xEC\xB6\xBB",		"\xAD\x98" => "\xEC\xB6\xBC",		"\xAD\x99" => "\xEC\xB6\xBD",		"\xAD\x9A" => "\xEC\xB6\xBE",		"\xAD\x9B" => "\xEC\xB6\xBF",		"\xAD\x9C" => "\xEC\xB7\x80",		"\xAD\x9D" => "\xEC\xB7\x81",		"\xAD\x9E" => "\xEC\xB7\x82",		"\xAD\x9F" => "\xEC\xB7\x83",		"\xAD\xA0" => "\xEC\xB7\x85",		"\xAE\x41" => "\xEC\xB7\x86",		"\xAE\x42" => "\xEC\xB7\x87",		"\xAE\x43" => "\xEC\xB7\x88",		"\xAE\x44" => "\xEC\xB7\x89",		"\xAE\x45" => "\xEC\xB7\x8A",		"\xAE\x46" => "\xEC\xB7\x8B",		"\xAE\x47" => "\xEC\xB7\x8D",		"\xAE\x48" => "\xEC\xB7\x8E",		"\xAE\x49" => "\xEC\xB7\x8F",		"\xAE\x4A" => "\xEC\xB7\x91",		"\xAE\x4B" => "\xEC\xB7\x92",		"\xAE\x4C" => "\xEC\xB7\x93",		"\xAE\x4D" => "\xEC\xB7\x94",		"\xAE\x4E" => "\xEC\xB7\x95",		"\xAE\x4F" => "\xEC\xB7\x96",		"\xAE\x50" => "\xEC\xB7\x97",		"\xAE\x51" => "\xEC\xB7\x98",		"\xAE\x52" => "\xEC\xB7\x99",		"\xAE\x53" => "\xEC\xB7\x9A",		"\xAE\x54" => "\xEC\xB7\x9B",		"\xAE\x55" => "\xEC\xB7\x9C",		"\xAE\x56" => "\xEC\xB7\x9D",		"\xAE\x57" => "\xEC\xB7\x9E",		"\xAE\x58" => "\xEC\xB7\x9F",		"\xAE\x59" => "\xEC\xB7\xA0",		"\xAE\x5A" => "\xEC\xB7\xA1",		"\xAE\x61" => "\xEC\xB7\xA2",		"\xAE\x62" => "\xEC\xB7\xA3",		"\xAE\x63" => "\xEC\xB7\xA4",		"\xAE\x64" => "\xEC\xB7\xA5",		"\xAE\x65" => "\xEC\xB7\xA6",		"\xAE\x66" => "\xEC\xB7\xA7",		"\xAE\x67" => "\xEC\xB7\xA9",		"\xAE\x68" => "\xEC\xB7\xAA",		"\xAE\x69" => "\xEC\xB7\xAB",		"\xAE\x6A" => "\xEC\xB7\xAD",		"\xAE\x6B" => "\xEC\xB7\xAE",		"\xAE\x6C" => "\xEC\xB7\xAF",		"\xAE\x6D" => "\xEC\xB7\xB1",		"\xAE\x6E" => "\xEC\xB7\xB2",		"\xAE\x6F" => "\xEC\xB7\xB3",		"\xAE\x70" => "\xEC\xB7\xB4",		"\xAE\x71" => "\xEC\xB7\xB5",		"\xAE\x72" => "\xEC\xB7\xB6",		"\xAE\x73" => "\xEC\xB7\xB7",		"\xAE\x74" => "\xEC\xB7\xBA",		"\xAE\x75" => "\xEC\xB7\xBC",		"\xAE\x76" => "\xEC\xB7\xBE",		"\xAE\x77" => "\xEC\xB7\xBF",		"\xAE\x78" => "\xEC\xB8\x80",		"\xAE\x79" => "\xEC\xB8\x81",		"\xAE\x7A" => "\xEC\xB8\x82",		"\xAE\x81" => "\xEC\xB8\x83",		"\xAE\x82" => "\xEC\xB8\x85",		"\xAE\x83" => "\xEC\xB8\x86",		"\xAE\x84" => "\xEC\xB8\x87",		"\xAE\x85" => "\xEC\xB8\x89",		"\xAE\x86" => "\xEC\xB8\x8A",		"\xAE\x87" => "\xEC\xB8\x8B",		"\xAE\x88" => "\xEC\xB8\x8D",		"\xAE\x89" => "\xEC\xB8\x8E",		"\xAE\x8A" => "\xEC\xB8\x8F",		"\xAE\x8B" => "\xEC\xB8\x90",		"\xAE\x8C" => "\xEC\xB8\x91",		"\xAE\x8D" => "\xEC\xB8\x92",		"\xAE\x8E" => "\xEC\xB8\x93",		"\xAE\x8F" => "\xEC\xB8\x95",		"\xAE\x90" => "\xEC\xB8\x96",		"\xAE\x91" => "\xEC\xB8\x97",		"\xAE\x92" => "\xEC\xB8\x98",		"\xAE\x93" => "\xEC\xB8\x9A",		"\xAE\x94" => "\xEC\xB8\x9B",		"\xAE\x95" => "\xEC\xB8\x9C",		"\xAE\x96" => "\xEC\xB8\x9D",		"\xAE\x97" => "\xEC\xB8\x9E",		"\xAE\x98" => "\xEC\xB8\x9F",		"\xAE\x99" => "\xEC\xB8\xA2",		"\xAE\x9A" => "\xEC\xB8\xA3",		"\xAE\x9B" => "\xEC\xB8\xA5",		"\xAE\x9C" => "\xEC\xB8\xA6",		"\xAE\x9D" => "\xEC\xB8\xA7",		"\xAE\x9E" => "\xEC\xB8\xA9",		"\xAE\x9F" => "\xEC\xB8\xAA",		"\xAE\xA0" => "\xEC\xB8\xAB",		"\xAF\x41" => "\xEC\xB8\xAC",		"\xAF\x42" => "\xEC\xB8\xAD",		"\xAF\x43" => "\xEC\xB8\xAE",		"\xAF\x44" => "\xEC\xB8\xAF",		"\xAF\x45" => "\xEC\xB8\xB2",		"\xAF\x46" => "\xEC\xB8\xB4",		"\xAF\x47" => "\xEC\xB8\xB6",		"\xAF\x48" => "\xEC\xB8\xB7",		"\xAF\x49" => "\xEC\xB8\xB8",		"\xAF\x4A" => "\xEC\xB8\xB9",		"\xAF\x4B" => "\xEC\xB8\xBA",		"\xAF\x4C" => "\xEC\xB8\xBB",		"\xAF\x4D" => "\xEC\xB8\xBC",		"\xAF\x4E" => "\xEC\xB8\xBD",		"\xAF\x4F" => "\xEC\xB8\xBE",		"\xAF\x50" => "\xEC\xB8\xBF",		"\xAF\x51" => "\xEC\xB9\x80",		"\xAF\x52" => "\xEC\xB9\x81",		"\xAF\x53" => "\xEC\xB9\x82",		"\xAF\x54" => "\xEC\xB9\x83",		"\xAF\x55" => "\xEC\xB9\x84",		"\xAF\x56" => "\xEC\xB9\x85",		"\xAF\x57" => "\xEC\xB9\x86",		"\xAF\x58" => "\xEC\xB9\x87",		"\xAF\x59" => "\xEC\xB9\x88",		"\xAF\x5A" => "\xEC\xB9\x89",		"\xAF\x61" => "\xEC\xB9\x8A",		"\xAF\x62" => "\xEC\xB9\x8B",		"\xAF\x63" => "\xEC\xB9\x8C",		"\xAF\x64" => "\xEC\xB9\x8D",		"\xAF\x65" => "\xEC\xB9\x8E",		"\xAF\x66" => "\xEC\xB9\x8F",		"\xAF\x67" => "\xEC\xB9\x90",		"\xAF\x68" => "\xEC\xB9\x91",		"\xAF\x69" => "\xEC\xB9\x92",		"\xAF\x6A" => "\xEC\xB9\x93",		"\xAF\x6B" => "\xEC\xB9\x94",		"\xAF\x6C" => "\xEC\xB9\x95",		"\xAF\x6D" => "\xEC\xB9\x96",		"\xAF\x6E" => "\xEC\xB9\x97",		"\xAF\x6F" => "\xEC\xB9\x9A",		"\xAF\x70" => "\xEC\xB9\x9B",		"\xAF\x71" => "\xEC\xB9\x9D",		"\xAF\x72" => "\xEC\xB9\x9E",		"\xAF\x73" => "\xEC\xB9\xA2",		"\xAF\x74" => "\xEC\xB9\xA3",		"\xAF\x75" => "\xEC\xB9\xA4",		"\xAF\x76" => "\xEC\xB9\xA5",		"\xAF\x77" => "\xEC\xB9\xA6",		"\xAF\x78" => "\xEC\xB9\xA7",		"\xAF\x79" => "\xEC\xB9\xAA",		"\xAF\x7A" => "\xEC\xB9\xAC",		"\xAF\x81" => "\xEC\xB9\xAE",		"\xAF\x82" => "\xEC\xB9\xAF",		"\xAF\x83" => "\xEC\xB9\xB0",		"\xAF\x84" => "\xEC\xB9\xB1",		"\xAF\x85" => "\xEC\xB9\xB2",		"\xAF\x86" => "\xEC\xB9\xB3",		"\xAF\x87" => "\xEC\xB9\xB6",		"\xAF\x88" => "\xEC\xB9\xB7",		"\xAF\x89" => "\xEC\xB9\xB9",		"\xAF\x8A" => "\xEC\xB9\xBA",		"\xAF\x8B" => "\xEC\xB9\xBB",		"\xAF\x8C" => "\xEC\xB9\xBD",		"\xAF\x8D" => "\xEC\xB9\xBE",		"\xAF\x8E" => "\xEC\xB9\xBF",		"\xAF\x8F" => "\xEC\xBA\x80",		"\xAF\x90" => "\xEC\xBA\x81",		"\xAF\x91" => "\xEC\xBA\x82",		"\xAF\x92" => "\xEC\xBA\x83",		"\xAF\x93" => "\xEC\xBA\x86",		"\xAF\x94" => "\xEC\xBA\x88",		"\xAF\x95" => "\xEC\xBA\x8A",		"\xAF\x96" => "\xEC\xBA\x8B",		"\xAF\x97" => "\xEC\xBA\x8C",		"\xAF\x98" => "\xEC\xBA\x8D",		"\xAF\x99" => "\xEC\xBA\x8E",		"\xAF\x9A" => "\xEC\xBA\x8F",		"\xAF\x9B" => "\xEC\xBA\x92",		"\xAF\x9C" => "\xEC\xBA\x93",		"\xAF\x9D" => "\xEC\xBA\x95",		"\xAF\x9E" => "\xEC\xBA\x96",		"\xAF\x9F" => "\xEC\xBA\x97",		"\xAF\xA0" => "\xEC\xBA\x99",		"\xB0\x41" => "\xEC\xBA\x9A",		"\xB0\x42" => "\xEC\xBA\x9B",		"\xB0\x43" => "\xEC\xBA\x9C",		"\xB0\x44" => "\xEC\xBA\x9D",		"\xB0\x45" => "\xEC\xBA\x9E",		"\xB0\x46" => "\xEC\xBA\x9F",		"\xB0\x47" => "\xEC\xBA\xA2",		"\xB0\x48" => "\xEC\xBA\xA6",		"\xB0\x49" => "\xEC\xBA\xA7",		"\xB0\x4A" => "\xEC\xBA\xA8",		"\xB0\x4B" => "\xEC\xBA\xA9",		"\xB0\x4C" => "\xEC\xBA\xAA",		"\xB0\x4D" => "\xEC\xBA\xAB",		"\xB0\x4E" => "\xEC\xBA\xAE",		"\xB0\x4F" => "\xEC\xBA\xAF",		"\xB0\x50" => "\xEC\xBA\xB0",		"\xB0\x51" => "\xEC\xBA\xB1",		"\xB0\x52" => "\xEC\xBA\xB2",		"\xB0\x53" => "\xEC\xBA\xB3",		"\xB0\x54" => "\xEC\xBA\xB4",		"\xB0\x55" => "\xEC\xBA\xB5",		"\xB0\x56" => "\xEC\xBA\xB6",		"\xB0\x57" => "\xEC\xBA\xB7",		"\xB0\x58" => "\xEC\xBA\xB8",		"\xB0\x59" => "\xEC\xBA\xB9",		"\xB0\x5A" => "\xEC\xBA\xBA",		"\xB0\x61" => "\xEC\xBA\xBB",		"\xB0\x62" => "\xEC\xBA\xBC",		"\xB0\x63" => "\xEC\xBA\xBD",		"\xB0\x64" => "\xEC\xBA\xBE",		"\xB0\x65" => "\xEC\xBA\xBF",		"\xB0\x66" => "\xEC\xBB\x80",		"\xB0\x67" => "\xEC\xBB\x82",		"\xB0\x68" => "\xEC\xBB\x83",		"\xB0\x69" => "\xEC\xBB\x84",		"\xB0\x6A" => "\xEC\xBB\x85",		"\xB0\x6B" => "\xEC\xBB\x86",		"\xB0\x6C" => "\xEC\xBB\x87",		"\xB0\x6D" => "\xEC\xBB\x88",		"\xB0\x6E" => "\xEC\xBB\x89",		"\xB0\x6F" => "\xEC\xBB\x8A",		"\xB0\x70" => "\xEC\xBB\x8B",		"\xB0\x71" => "\xEC\xBB\x8C",		"\xB0\x72" => "\xEC\xBB\x8D",		"\xB0\x73" => "\xEC\xBB\x8E",		"\xB0\x74" => "\xEC\xBB\x8F",		"\xB0\x75" => "\xEC\xBB\x90",		"\xB0\x76" => "\xEC\xBB\x91",		"\xB0\x77" => "\xEC\xBB\x92",		"\xB0\x78" => "\xEC\xBB\x93",		"\xB0\x79" => "\xEC\xBB\x94",		"\xB0\x7A" => "\xEC\xBB\x95",		"\xB0\x81" => "\xEC\xBB\x96",		"\xB0\x82" => "\xEC\xBB\x97",		"\xB0\x83" => "\xEC\xBB\x98",		"\xB0\x84" => "\xEC\xBB\x99",		"\xB0\x85" => "\xEC\xBB\x9A",		"\xB0\x86" => "\xEC\xBB\x9B",		"\xB0\x87" => "\xEC\xBB\x9C",		"\xB0\x88" => "\xEC\xBB\x9D",		"\xB0\x89" => "\xEC\xBB\x9E",		"\xB0\x8A" => "\xEC\xBB\x9F",		"\xB0\x8B" => "\xEC\xBB\xA0",		"\xB0\x8C" => "\xEC\xBB\xA1",		"\xB0\x8D" => "\xEC\xBB\xA2",		"\xB0\x8E" => "\xEC\xBB\xA3",		"\xB0\x8F" => "\xEC\xBB\xA6",		"\xB0\x90" => "\xEC\xBB\xA7",		"\xB0\x91" => "\xEC\xBB\xA9",		"\xB0\x92" => "\xEC\xBB\xAA",		"\xB0\x93" => "\xEC\xBB\xAD",		"\xB0\x94" => "\xEC\xBB\xAE",		"\xB0\x95" => "\xEC\xBB\xAF",		"\xB0\x96" => "\xEC\xBB\xB0",		"\xB0\x97" => "\xEC\xBB\xB1",		"\xB0\x98" => "\xEC\xBB\xB2",		"\xB0\x99" => "\xEC\xBB\xB3",		"\xB0\x9A" => "\xEC\xBB\xB6",		"\xB0\x9B" => "\xEC\xBB\xBA",		"\xB0\x9C" => "\xEC\xBB\xBB",		"\xB0\x9D" => "\xEC\xBB\xBC",		"\xB0\x9E" => "\xEC\xBB\xBD",		"\xB0\x9F" => "\xEC\xBB\xBE",		"\xB0\xA0" => "\xEC\xBB\xBF",		"\xB0\xA1" => "\xEA\xB0\x80",		"\xB0\xA2" => "\xEA\xB0\x81",		"\xB0\xA3" => "\xEA\xB0\x84",		"\xB0\xA4" => "\xEA\xB0\x87",		"\xB0\xA5" => "\xEA\xB0\x88",		"\xB0\xA6" => "\xEA\xB0\x89",		"\xB0\xA7" => "\xEA\xB0\x8A",		"\xB0\xA8" => "\xEA\xB0\x90",		"\xB0\xA9" => "\xEA\xB0\x91",		"\xB0\xAA" => "\xEA\xB0\x92",		"\xB0\xAB" => "\xEA\xB0\x93",		"\xB0\xAC" => "\xEA\xB0\x94",		"\xB0\xAD" => "\xEA\xB0\x95",		"\xB0\xAE" => "\xEA\xB0\x96",		"\xB0\xAF" => "\xEA\xB0\x97",		"\xB0\xB0" => "\xEA\xB0\x99",		"\xB0\xB1" => "\xEA\xB0\x9A",		"\xB0\xB2" => "\xEA\xB0\x9B",		"\xB0\xB3" => "\xEA\xB0\x9C",		"\xB0\xB4" => "\xEA\xB0\x9D",		"\xB0\xB5" => "\xEA\xB0\xA0",		"\xB0\xB6" => "\xEA\xB0\xA4",		"\xB0\xB7" => "\xEA\xB0\xAC",		"\xB0\xB8" => "\xEA\xB0\xAD",		"\xB0\xB9" => "\xEA\xB0\xAF",		"\xB0\xBA" => "\xEA\xB0\xB0",		"\xB0\xBB" => "\xEA\xB0\xB1",		"\xB0\xBC" => "\xEA\xB0\xB8",		"\xB0\xBD" => "\xEA\xB0\xB9",		"\xB0\xBE" => "\xEA\xB0\xBC",		"\xB0\xBF" => "\xEA\xB1\x80",		"\xB0\xC0" => "\xEA\xB1\x8B",		"\xB0\xC1" => "\xEA\xB1\x8D",		"\xB0\xC2" => "\xEA\xB1\x94",		"\xB0\xC3" => "\xEA\xB1\x98",		"\xB0\xC4" => "\xEA\xB1\x9C",		"\xB0\xC5" => "\xEA\xB1\xB0",		"\xB0\xC6" => "\xEA\xB1\xB1",		"\xB0\xC7" => "\xEA\xB1\xB4",		"\xB0\xC8" => "\xEA\xB1\xB7",		"\xB0\xC9" => "\xEA\xB1\xB8",		"\xB0\xCA" => "\xEA\xB1\xBA",		"\xB0\xCB" => "\xEA\xB2\x80",		"\xB0\xCC" => "\xEA\xB2\x81",		"\xB0\xCD" => "\xEA\xB2\x83",		"\xB0\xCE" => "\xEA\xB2\x84",		"\xB0\xCF" => "\xEA\xB2\x85",		"\xB0\xD0" => "\xEA\xB2\x86",		"\xB0\xD1" => "\xEA\xB2\x89",		"\xB0\xD2" => "\xEA\xB2\x8A",		"\xB0\xD3" => "\xEA\xB2\x8B",		"\xB0\xD4" => "\xEA\xB2\x8C",		"\xB0\xD5" => "\xEA\xB2\x90",		"\xB0\xD6" => "\xEA\xB2\x94",		"\xB0\xD7" => "\xEA\xB2\x9C",		"\xB0\xD8" => "\xEA\xB2\x9D",		"\xB0\xD9" => "\xEA\xB2\x9F",		"\xB0\xDA" => "\xEA\xB2\xA0",		"\xB0\xDB" => "\xEA\xB2\xA1",		"\xB0\xDC" => "\xEA\xB2\xA8",		"\xB0\xDD" => "\xEA\xB2\xA9",		"\xB0\xDE" => "\xEA\xB2\xAA",		"\xB0\xDF" => "\xEA\xB2\xAC",		"\xB0\xE0" => "\xEA\xB2\xAF",		"\xB0\xE1" => "\xEA\xB2\xB0",		"\xB0\xE2" => "\xEA\xB2\xB8",		"\xB0\xE3" => "\xEA\xB2\xB9",		"\xB0\xE4" => "\xEA\xB2\xBB",		"\xB0\xE5" => "\xEA\xB2\xBC",		"\xB0\xE6" => "\xEA\xB2\xBD",		"\xB0\xE7" => "\xEA\xB3\x81",		"\xB0\xE8" => "\xEA\xB3\x84",		"\xB0\xE9" => "\xEA\xB3\x88",		"\xB0\xEA" => "\xEA\xB3\x8C",		"\xB0\xEB" => "\xEA\xB3\x95",		"\xB0\xEC" => "\xEA\xB3\x97",		"\xB0\xED" => "\xEA\xB3\xA0",		"\xB0\xEE" => "\xEA\xB3\xA1",		"\xB0\xEF" => "\xEA\xB3\xA4",		"\xB0\xF0" => "\xEA\xB3\xA7",		"\xB0\xF1" => "\xEA\xB3\xA8",		"\xB0\xF2" => "\xEA\xB3\xAA",		"\xB0\xF3" => "\xEA\xB3\xAC",		"\xB0\xF4" => "\xEA\xB3\xAF",		"\xB0\xF5" => "\xEA\xB3\xB0",		"\xB0\xF6" => "\xEA\xB3\xB1",		"\xB0\xF7" => "\xEA\xB3\xB3",		"\xB0\xF8" => "\xEA\xB3\xB5",		"\xB0\xF9" => "\xEA\xB3\xB6",		"\xB0\xFA" => "\xEA\xB3\xBC",		"\xB0\xFB" => "\xEA\xB3\xBD",		"\xB0\xFC" => "\xEA\xB4\x80",		"\xB0\xFD" => "\xEA\xB4\x84",		"\xB0\xFE" => "\xEA\xB4\x86",		"\xB1\x41" => "\xEC\xBC\x82",		"\xB1\x42" => "\xEC\xBC\x83",		"\xB1\x43" => "\xEC\xBC\x85",		"\xB1\x44" => "\xEC\xBC\x86",		"\xB1\x45" => "\xEC\xBC\x87",		"\xB1\x46" => "\xEC\xBC\x89",		"\xB1\x47" => "\xEC\xBC\x8A",		"\xB1\x48" => "\xEC\xBC\x8B",		"\xB1\x49" => "\xEC\xBC\x8C",		"\xB1\x4A" => "\xEC\xBC\x8D",		"\xB1\x4B" => "\xEC\xBC\x8E",		"\xB1\x4C" => "\xEC\xBC\x8F",		"\xB1\x4D" => "\xEC\xBC\x92",		"\xB1\x4E" => "\xEC\xBC\x94",		"\xB1\x4F" => "\xEC\xBC\x96",		"\xB1\x50" => "\xEC\xBC\x97",		"\xB1\x51" => "\xEC\xBC\x98",		"\xB1\x52" => "\xEC\xBC\x99",		"\xB1\x53" => "\xEC\xBC\x9A",		"\xB1\x54" => "\xEC\xBC\x9B",		"\xB1\x55" => "\xEC\xBC\x9D",		"\xB1\x56" => "\xEC\xBC\x9E",		"\xB1\x57" => "\xEC\xBC\x9F",		"\xB1\x58" => "\xEC\xBC\xA1",		"\xB1\x59" => "\xEC\xBC\xA2",		"\xB1\x5A" => "\xEC\xBC\xA3",		"\xB1\x61" => "\xEC\xBC\xA5",		"\xB1\x62" => "\xEC\xBC\xA6",		"\xB1\x63" => "\xEC\xBC\xA7",		"\xB1\x64" => "\xEC\xBC\xA8",		"\xB1\x65" => "\xEC\xBC\xA9",		"\xB1\x66" => "\xEC\xBC\xAA",		"\xB1\x67" => "\xEC\xBC\xAB",		"\xB1\x68" => "\xEC\xBC\xAE",		"\xB1\x69" => "\xEC\xBC\xB2",		"\xB1\x6A" => "\xEC\xBC\xB3",		"\xB1\x6B" => "\xEC\xBC\xB4",		"\xB1\x6C" => "\xEC\xBC\xB5",		"\xB1\x6D" => "\xEC\xBC\xB6",		"\xB1\x6E" => "\xEC\xBC\xB7",		"\xB1\x6F" => "\xEC\xBC\xB9",		"\xB1\x70" => "\xEC\xBC\xBA",		"\xB1\x71" => "\xEC\xBC\xBB",		"\xB1\x72" => "\xEC\xBC\xBC",		"\xB1\x73" => "\xEC\xBC\xBD",		"\xB1\x74" => "\xEC\xBC\xBE",		"\xB1\x75" => "\xEC\xBC\xBF",		"\xB1\x76" => "\xEC\xBD\x80",		"\xB1\x77" => "\xEC\xBD\x81",		"\xB1\x78" => "\xEC\xBD\x82",		"\xB1\x79" => "\xEC\xBD\x83",		"\xB1\x7A" => "\xEC\xBD\x84",		"\xB1\x81" => "\xEC\xBD\x85",		"\xB1\x82" => "\xEC\xBD\x86",		"\xB1\x83" => "\xEC\xBD\x87",		"\xB1\x84" => "\xEC\xBD\x88",		"\xB1\x85" => "\xEC\xBD\x89",		"\xB1\x86" => "\xEC\xBD\x8A",		"\xB1\x87" => "\xEC\xBD\x8B",		"\xB1\x88" => "\xEC\xBD\x8C",		"\xB1\x89" => "\xEC\xBD\x8D",		"\xB1\x8A" => "\xEC\xBD\x8E",		"\xB1\x8B" => "\xEC\xBD\x8F",		"\xB1\x8C" => "\xEC\xBD\x90",		"\xB1\x8D" => "\xEC\xBD\x91",		"\xB1\x8E" => "\xEC\xBD\x92",		"\xB1\x8F" => "\xEC\xBD\x93",		"\xB1\x90" => "\xEC\xBD\x96",		"\xB1\x91" => "\xEC\xBD\x97",		"\xB1\x92" => "\xEC\xBD\x99",		"\xB1\x93" => "\xEC\xBD\x9A",		"\xB1\x94" => "\xEC\xBD\x9B",		"\xB1\x95" => "\xEC\xBD\x9D",		"\xB1\x96" => "\xEC\xBD\x9E",		"\xB1\x97" => "\xEC\xBD\x9F",		"\xB1\x98" => "\xEC\xBD\xA0",		"\xB1\x99" => "\xEC\xBD\xA1",		"\xB1\x9A" => "\xEC\xBD\xA2",		"\xB1\x9B" => "\xEC\xBD\xA3",		"\xB1\x9C" => "\xEC\xBD\xA6",		"\xB1\x9D" => "\xEC\xBD\xA8",		"\xB1\x9E" => "\xEC\xBD\xAA",		"\xB1\x9F" => "\xEC\xBD\xAB",		"\xB1\xA0" => "\xEC\xBD\xAC",		"\xB1\xA1" => "\xEA\xB4\x8C",		"\xB1\xA2" => "\xEA\xB4\x8D",		"\xB1\xA3" => "\xEA\xB4\x8F",		"\xB1\xA4" => "\xEA\xB4\x91",		"\xB1\xA5" => "\xEA\xB4\x98",		"\xB1\xA6" => "\xEA\xB4\x9C",		"\xB1\xA7" => "\xEA\xB4\xA0",		"\xB1\xA8" => "\xEA\xB4\xA9",		"\xB1\xA9" => "\xEA\xB4\xAC",		"\xB1\xAA" => "\xEA\xB4\xAD",		"\xB1\xAB" => "\xEA\xB4\xB4",		"\xB1\xAC" => "\xEA\xB4\xB5",		"\xB1\xAD" => "\xEA\xB4\xB8",		"\xB1\xAE" => "\xEA\xB4\xBC",		"\xB1\xAF" => "\xEA\xB5\x84",		"\xB1\xB0" => "\xEA\xB5\x85",		"\xB1\xB1" => "\xEA\xB5\x87",		"\xB1\xB2" => "\xEA\xB5\x89",		"\xB1\xB3" => "\xEA\xB5\x90",		"\xB1\xB4" => "\xEA\xB5\x94",		"\xB1\xB5" => "\xEA\xB5\x98",		"\xB1\xB6" => "\xEA\xB5\xA1",		"\xB1\xB7" => "\xEA\xB5\xA3",		"\xB1\xB8" => "\xEA\xB5\xAC",		"\xB1\xB9" => "\xEA\xB5\xAD",		"\xB1\xBA" => "\xEA\xB5\xB0",		"\xB1\xBB" => "\xEA\xB5\xB3",		"\xB1\xBC" => "\xEA\xB5\xB4",		"\xB1\xBD" => "\xEA\xB5\xB5",		"\xB1\xBE" => "\xEA\xB5\xB6",		"\xB1\xBF" => "\xEA\xB5\xBB",		"\xB1\xC0" => "\xEA\xB5\xBC",		"\xB1\xC1" => "\xEA\xB5\xBD",		"\xB1\xC2" => "\xEA\xB5\xBF",		"\xB1\xC3" => "\xEA\xB6\x81",		"\xB1\xC4" => "\xEA\xB6\x82",		"\xB1\xC5" => "\xEA\xB6\x88",		"\xB1\xC6" => "\xEA\xB6\x89",		"\xB1\xC7" => "\xEA\xB6\x8C",		"\xB1\xC8" => "\xEA\xB6\x90",		"\xB1\xC9" => "\xEA\xB6\x9C",		"\xB1\xCA" => "\xEA\xB6\x9D",		"\xB1\xCB" => "\xEA\xB6\xA4",		"\xB1\xCC" => "\xEA\xB6\xB7",		"\xB1\xCD" => "\xEA\xB7\x80",		"\xB1\xCE" => "\xEA\xB7\x81",		"\xB1\xCF" => "\xEA\xB7\x84",		"\xB1\xD0" => "\xEA\xB7\x88",		"\xB1\xD1" => "\xEA\xB7\x90",		"\xB1\xD2" => "\xEA\xB7\x91",		"\xB1\xD3" => "\xEA\xB7\x93",		"\xB1\xD4" => "\xEA\xB7\x9C",		"\xB1\xD5" => "\xEA\xB7\xA0",		"\xB1\xD6" => "\xEA\xB7\xA4",		"\xB1\xD7" => "\xEA\xB7\xB8",		"\xB1\xD8" => "\xEA\xB7\xB9",		"\xB1\xD9" => "\xEA\xB7\xBC",		"\xB1\xDA" => "\xEA\xB7\xBF",		"\xB1\xDB" => "\xEA\xB8\x80",		"\xB1\xDC" => "\xEA\xB8\x81",		"\xB1\xDD" => "\xEA\xB8\x88",		"\xB1\xDE" => "\xEA\xB8\x89",		"\xB1\xDF" => "\xEA\xB8\x8B",		"\xB1\xE0" => "\xEA\xB8\x8D",		"\xB1\xE1" => "\xEA\xB8\x94",		"\xB1\xE2" => "\xEA\xB8\xB0",		"\xB1\xE3" => "\xEA\xB8\xB1",		"\xB1\xE4" => "\xEA\xB8\xB4",		"\xB1\xE5" => "\xEA\xB8\xB7",		"\xB1\xE6" => "\xEA\xB8\xB8",		"\xB1\xE7" => "\xEA\xB8\xBA",		"\xB1\xE8" => "\xEA\xB9\x80",		"\xB1\xE9" => "\xEA\xB9\x81",		"\xB1\xEA" => "\xEA\xB9\x83",		"\xB1\xEB" => "\xEA\xB9\x85",		"\xB1\xEC" => "\xEA\xB9\x86",		"\xB1\xED" => "\xEA\xB9\x8A",		"\xB1\xEE" => "\xEA\xB9\x8C",		"\xB1\xEF" => "\xEA\xB9\x8D",		"\xB1\xF0" => "\xEA\xB9\x8E",		"\xB1\xF1" => "\xEA\xB9\x90",		"\xB1\xF2" => "\xEA\xB9\x94",		"\xB1\xF3" => "\xEA\xB9\x96",		"\xB1\xF4" => "\xEA\xB9\x9C",		"\xB1\xF5" => "\xEA\xB9\x9D",		"\xB1\xF6" => "\xEA\xB9\x9F",		"\xB1\xF7" => "\xEA\xB9\xA0",		"\xB1\xF8" => "\xEA\xB9\xA1",		"\xB1\xF9" => "\xEA\xB9\xA5",		"\xB1\xFA" => "\xEA\xB9\xA8",		"\xB1\xFB" => "\xEA\xB9\xA9",		"\xB1\xFC" => "\xEA\xB9\xAC",		"\xB1\xFD" => "\xEA\xB9\xB0",		"\xB1\xFE" => "\xEA\xB9\xB8",		"\xB2\x41" => "\xEC\xBD\xAD",		"\xB2\x42" => "\xEC\xBD\xAE",		"\xB2\x43" => "\xEC\xBD\xAF",		"\xB2\x44" => "\xEC\xBD\xB2",		"\xB2\x45" => "\xEC\xBD\xB3",		"\xB2\x46" => "\xEC\xBD\xB5",		"\xB2\x47" => "\xEC\xBD\xB6",		"\xB2\x48" => "\xEC\xBD\xB7",		"\xB2\x49" => "\xEC\xBD\xB9",		"\xB2\x4A" => "\xEC\xBD\xBA",		"\xB2\x4B" => "\xEC\xBD\xBB",		"\xB2\x4C" => "\xEC\xBD\xBC",		"\xB2\x4D" => "\xEC\xBD\xBD",		"\xB2\x4E" => "\xEC\xBD\xBE",		"\xB2\x4F" => "\xEC\xBD\xBF",		"\xB2\x50" => "\xEC\xBE\x81",		"\xB2\x51" => "\xEC\xBE\x82",		"\xB2\x52" => "\xEC\xBE\x83",		"\xB2\x53" => "\xEC\xBE\x84",		"\xB2\x54" => "\xEC\xBE\x86",		"\xB2\x55" => "\xEC\xBE\x87",		"\xB2\x56" => "\xEC\xBE\x88",		"\xB2\x57" => "\xEC\xBE\x89",		"\xB2\x58" => "\xEC\xBE\x8A",		"\xB2\x59" => "\xEC\xBE\x8B",		"\xB2\x5A" => "\xEC\xBE\x8D",		"\xB2\x61" => "\xEC\xBE\x8E",		"\xB2\x62" => "\xEC\xBE\x8F",		"\xB2\x63" => "\xEC\xBE\x90",		"\xB2\x64" => "\xEC\xBE\x91",		"\xB2\x65" => "\xEC\xBE\x92",		"\xB2\x66" => "\xEC\xBE\x93",		"\xB2\x67" => "\xEC\xBE\x94",		"\xB2\x68" => "\xEC\xBE\x95",		"\xB2\x69" => "\xEC\xBE\x96",		"\xB2\x6A" => "\xEC\xBE\x97",		"\xB2\x6B" => "\xEC\xBE\x98",		"\xB2\x6C" => "\xEC\xBE\x99",		"\xB2\x6D" => "\xEC\xBE\x9A",		"\xB2\x6E" => "\xEC\xBE\x9B",		"\xB2\x6F" => "\xEC\xBE\x9C",		"\xB2\x70" => "\xEC\xBE\x9D",		"\xB2\x71" => "\xEC\xBE\x9E",		"\xB2\x72" => "\xEC\xBE\x9F",		"\xB2\x73" => "\xEC\xBE\xA0",		"\xB2\x74" => "\xEC\xBE\xA2",		"\xB2\x75" => "\xEC\xBE\xA3",		"\xB2\x76" => "\xEC\xBE\xA4",		"\xB2\x77" => "\xEC\xBE\xA5",		"\xB2\x78" => "\xEC\xBE\xA6",		"\xB2\x79" => "\xEC\xBE\xA7",		"\xB2\x7A" => "\xEC\xBE\xA9",		"\xB2\x81" => "\xEC\xBE\xAA",		"\xB2\x82" => "\xEC\xBE\xAB",		"\xB2\x83" => "\xEC\xBE\xAC",		"\xB2\x84" => "\xEC\xBE\xAD",		"\xB2\x85" => "\xEC\xBE\xAE",		"\xB2\x86" => "\xEC\xBE\xAF",		"\xB2\x87" => "\xEC\xBE\xB1",		"\xB2\x88" => "\xEC\xBE\xB2",		"\xB2\x89" => "\xEC\xBE\xB3",		"\xB2\x8A" => "\xEC\xBE\xB4",		"\xB2\x8B" => "\xEC\xBE\xB5",		"\xB2\x8C" => "\xEC\xBE\xB6",		"\xB2\x8D" => "\xEC\xBE\xB7",		"\xB2\x8E" => "\xEC\xBE\xB8",		"\xB2\x8F" => "\xEC\xBE\xB9",		"\xB2\x90" => "\xEC\xBE\xBA",		"\xB2\x91" => "\xEC\xBE\xBB",		"\xB2\x92" => "\xEC\xBE\xBC",		"\xB2\x93" => "\xEC\xBE\xBD",		"\xB2\x94" => "\xEC\xBE\xBE",		"\xB2\x95" => "\xEC\xBE\xBF",		"\xB2\x96" => "\xEC\xBF\x80",		"\xB2\x97" => "\xEC\xBF\x81",		"\xB2\x98" => "\xEC\xBF\x82",		"\xB2\x99" => "\xEC\xBF\x83",		"\xB2\x9A" => "\xEC\xBF\x85",		"\xB2\x9B" => "\xEC\xBF\x86",		"\xB2\x9C" => "\xEC\xBF\x87",		"\xB2\x9D" => "\xEC\xBF\x88",		"\xB2\x9E" => "\xEC\xBF\x89",		"\xB2\x9F" => "\xEC\xBF\x8A",		"\xB2\xA0" => "\xEC\xBF\x8B",		"\xB2\xA1" => "\xEA\xB9\xB9",		"\xB2\xA2" => "\xEA\xB9\xBB",		"\xB2\xA3" => "\xEA\xB9\xBC",		"\xB2\xA4" => "\xEA\xB9\xBD",		"\xB2\xA5" => "\xEA\xBA\x84",		"\xB2\xA6" => "\xEA\xBA\x85",		"\xB2\xA7" => "\xEA\xBA\x8C",		"\xB2\xA8" => "\xEA\xBA\xBC",		"\xB2\xA9" => "\xEA\xBA\xBD",		"\xB2\xAA" => "\xEA\xBA\xBE",		"\xB2\xAB" => "\xEA\xBB\x80",		"\xB2\xAC" => "\xEA\xBB\x84",		"\xB2\xAD" => "\xEA\xBB\x8C",		"\xB2\xAE" => "\xEA\xBB\x8D",		"\xB2\xAF" => "\xEA\xBB\x8F",		"\xB2\xB0" => "\xEA\xBB\x90",		"\xB2\xB1" => "\xEA\xBB\x91",		"\xB2\xB2" => "\xEA\xBB\x98",		"\xB2\xB3" => "\xEA\xBB\x99",		"\xB2\xB4" => "\xEA\xBB\x9C",		"\xB2\xB5" => "\xEA\xBB\xA8",		"\xB2\xB6" => "\xEA\xBB\xAB",		"\xB2\xB7" => "\xEA\xBB\xAD",		"\xB2\xB8" => "\xEA\xBB\xB4",		"\xB2\xB9" => "\xEA\xBB\xB8",		"\xB2\xBA" => "\xEA\xBB\xBC",		"\xB2\xBB" => "\xEA\xBC\x87",		"\xB2\xBC" => "\xEA\xBC\x88",		"\xB2\xBD" => "\xEA\xBC\x8D",		"\xB2\xBE" => "\xEA\xBC\x90",		"\xB2\xBF" => "\xEA\xBC\xAC",		"\xB2\xC0" => "\xEA\xBC\xAD",		"\xB2\xC1" => "\xEA\xBC\xB0",		"\xB2\xC2" => "\xEA\xBC\xB2",		"\xB2\xC3" => "\xEA\xBC\xB4",		"\xB2\xC4" => "\xEA\xBC\xBC",		"\xB2\xC5" => "\xEA\xBC\xBD",		"\xB2\xC6" => "\xEA\xBC\xBF",		"\xB2\xC7" => "\xEA\xBD\x81",		"\xB2\xC8" => "\xEA\xBD\x82",		"\xB2\xC9" => "\xEA\xBD\x83",		"\xB2\xCA" => "\xEA\xBD\x88",		"\xB2\xCB" => "\xEA\xBD\x89",		"\xB2\xCC" => "\xEA\xBD\x90",		"\xB2\xCD" => "\xEA\xBD\x9C",		"\xB2\xCE" => "\xEA\xBD\x9D",		"\xB2\xCF" => "\xEA\xBD\xA4",		"\xB2\xD0" => "\xEA\xBD\xA5",		"\xB2\xD1" => "\xEA\xBD\xB9",		"\xB2\xD2" => "\xEA\xBE\x80",		"\xB2\xD3" => "\xEA\xBE\x84",		"\xB2\xD4" => "\xEA\xBE\x88",		"\xB2\xD5" => "\xEA\xBE\x90",		"\xB2\xD6" => "\xEA\xBE\x91",		"\xB2\xD7" => "\xEA\xBE\x95",		"\xB2\xD8" => "\xEA\xBE\x9C",		"\xB2\xD9" => "\xEA\xBE\xB8",		"\xB2\xDA" => "\xEA\xBE\xB9",		"\xB2\xDB" => "\xEA\xBE\xBC",		"\xB2\xDC" => "\xEA\xBF\x80",		"\xB2\xDD" => "\xEA\xBF\x87",		"\xB2\xDE" => "\xEA\xBF\x88",		"\xB2\xDF" => "\xEA\xBF\x89",		"\xB2\xE0" => "\xEA\xBF\x8B",		"\xB2\xE1" => "\xEA\xBF\x8D",		"\xB2\xE2" => "\xEA\xBF\x8E",		"\xB2\xE3" => "\xEA\xBF\x94",		"\xB2\xE4" => "\xEA\xBF\x9C",		"\xB2\xE5" => "\xEA\xBF\xA8",		"\xB2\xE6" => "\xEA\xBF\xA9",		"\xB2\xE7" => "\xEA\xBF\xB0",		"\xB2\xE8" => "\xEA\xBF\xB1",		"\xB2\xE9" => "\xEA\xBF\xB4",		"\xB2\xEA" => "\xEA\xBF\xB8",		"\xB2\xEB" => "\xEB\x80\x80",		"\xB2\xEC" => "\xEB\x80\x81",		"\xB2\xED" => "\xEB\x80\x84",		"\xB2\xEE" => "\xEB\x80\x8C",		"\xB2\xEF" => "\xEB\x80\x90",		"\xB2\xF0" => "\xEB\x80\x94",		"\xB2\xF1" => "\xEB\x80\x9C",		"\xB2\xF2" => "\xEB\x80\x9D",		"\xB2\xF3" => "\xEB\x80\xA8",		"\xB2\xF4" => "\xEB\x81\x84",		"\xB2\xF5" => "\xEB\x81\x85",		"\xB2\xF6" => "\xEB\x81\x88",		"\xB2\xF7" => "\xEB\x81\x8A",		"\xB2\xF8" => "\xEB\x81\x8C",		"\xB2\xF9" => "\xEB\x81\x8E",		"\xB2\xFA" => "\xEB\x81\x93",		"\xB2\xFB" => "\xEB\x81\x94",		"\xB2\xFC" => "\xEB\x81\x95",		"\xB2\xFD" => "\xEB\x81\x97",		"\xB2\xFE" => "\xEB\x81\x99",		"\xB3\x41" => "\xEC\xBF\x8C",		"\xB3\x42" => "\xEC\xBF\x8D",		"\xB3\x43" => "\xEC\xBF\x8E",		"\xB3\x44" => "\xEC\xBF\x8F",		"\xB3\x45" => "\xEC\xBF\x90",		"\xB3\x46" => "\xEC\xBF\x91",		"\xB3\x47" => "\xEC\xBF\x92",		"\xB3\x48" => "\xEC\xBF\x93",		"\xB3\x49" => "\xEC\xBF\x94",		"\xB3\x4A" => "\xEC\xBF\x95",		"\xB3\x4B" => "\xEC\xBF\x96",		"\xB3\x4C" => "\xEC\xBF\x97",		"\xB3\x4D" => "\xEC\xBF\x98",		"\xB3\x4E" => "\xEC\xBF\x99",		"\xB3\x4F" => "\xEC\xBF\x9A",		"\xB3\x50" => "\xEC\xBF\x9B",		"\xB3\x51" => "\xEC\xBF\x9C",		"\xB3\x52" => "\xEC\xBF\x9D",		"\xB3\x53" => "\xEC\xBF\x9E",		"\xB3\x54" => "\xEC\xBF\x9F",		"\xB3\x55" => "\xEC\xBF\xA2",		"\xB3\x56" => "\xEC\xBF\xA3",		"\xB3\x57" => "\xEC\xBF\xA5",		"\xB3\x58" => "\xEC\xBF\xA6",		"\xB3\x59" => "\xEC\xBF\xA7",		"\xB3\x5A" => "\xEC\xBF\xA9",		"\xB3\x61" => "\xEC\xBF\xAA",		"\xB3\x62" => "\xEC\xBF\xAB",		"\xB3\x63" => "\xEC\xBF\xAC",		"\xB3\x64" => "\xEC\xBF\xAD",		"\xB3\x65" => "\xEC\xBF\xAE",		"\xB3\x66" => "\xEC\xBF\xAF",		"\xB3\x67" => "\xEC\xBF\xB2",		"\xB3\x68" => "\xEC\xBF\xB4",		"\xB3\x69" => "\xEC\xBF\xB6",		"\xB3\x6A" => "\xEC\xBF\xB7",		"\xB3\x6B" => "\xEC\xBF\xB8",		"\xB3\x6C" => "\xEC\xBF\xB9",		"\xB3\x6D" => "\xEC\xBF\xBA",		"\xB3\x6E" => "\xEC\xBF\xBB",		"\xB3\x6F" => "\xEC\xBF\xBD",		"\xB3\x70" => "\xEC\xBF\xBE",		"\xB3\x71" => "\xEC\xBF\xBF",		"\xB3\x72" => "\xED\x80\x81",		"\xB3\x73" => "\xED\x80\x82",		"\xB3\x74" => "\xED\x80\x83",		"\xB3\x75" => "\xED\x80\x85",		"\xB3\x76" => "\xED\x80\x86",		"\xB3\x77" => "\xED\x80\x87",		"\xB3\x78" => "\xED\x80\x88",		"\xB3\x79" => "\xED\x80\x89",		"\xB3\x7A" => "\xED\x80\x8A",		"\xB3\x81" => "\xED\x80\x8B",		"\xB3\x82" => "\xED\x80\x8C",		"\xB3\x83" => "\xED\x80\x8D",		"\xB3\x84" => "\xED\x80\x8E",		"\xB3\x85" => "\xED\x80\x8F",		"\xB3\x86" => "\xED\x80\x90",		"\xB3\x87" => "\xED\x80\x92",		"\xB3\x88" => "\xED\x80\x93",		"\xB3\x89" => "\xED\x80\x94",		"\xB3\x8A" => "\xED\x80\x95",		"\xB3\x8B" => "\xED\x80\x96",		"\xB3\x8C" => "\xED\x80\x97",		"\xB3\x8D" => "\xED\x80\x99",		"\xB3\x8E" => "\xED\x80\x9A",		"\xB3\x8F" => "\xED\x80\x9B",		"\xB3\x90" => "\xED\x80\x9C",		"\xB3\x91" => "\xED\x80\x9D",		"\xB3\x92" => "\xED\x80\x9E",		"\xB3\x93" => "\xED\x80\x9F",		"\xB3\x94" => "\xED\x80\xA0",		"\xB3\x95" => "\xED\x80\xA1",		"\xB3\x96" => "\xED\x80\xA2",		"\xB3\x97" => "\xED\x80\xA3",		"\xB3\x98" => "\xED\x80\xA4",		"\xB3\x99" => "\xED\x80\xA5",		"\xB3\x9A" => "\xED\x80\xA6",		"\xB3\x9B" => "\xED\x80\xA7",		"\xB3\x9C" => "\xED\x80\xA8",		"\xB3\x9D" => "\xED\x80\xA9",		"\xB3\x9E" => "\xED\x80\xAA",		"\xB3\x9F" => "\xED\x80\xAB",		"\xB3\xA0" => "\xED\x80\xAC",		"\xB3\xA1" => "\xEB\x81\x9D",		"\xB3\xA2" => "\xEB\x81\xBC",		"\xB3\xA3" => "\xEB\x81\xBD",		"\xB3\xA4" => "\xEB\x82\x80",		"\xB3\xA5" => "\xEB\x82\x84",		"\xB3\xA6" => "\xEB\x82\x8C",		"\xB3\xA7" => "\xEB\x82\x8D",		"\xB3\xA8" => "\xEB\x82\x8F",		"\xB3\xA9" => "\xEB\x82\x91",		"\xB3\xAA" => "\xEB\x82\x98",		"\xB3\xAB" => "\xEB\x82\x99",		"\xB3\xAC" => "\xEB\x82\x9A",		"\xB3\xAD" => "\xEB\x82\x9C",		"\xB3\xAE" => "\xEB\x82\x9F",		"\xB3\xAF" => "\xEB\x82\xA0",		"\xB3\xB0" => "\xEB\x82\xA1",		"\xB3\xB1" => "\xEB\x82\xA2",		"\xB3\xB2" => "\xEB\x82\xA8",		"\xB3\xB3" => "\xEB\x82\xA9",		"\xB3\xB4" => "\xEB\x82\xAB",		"\xB3\xB5" => "\xEB\x82\xAC",		"\xB3\xB6" => "\xEB\x82\xAD",		"\xB3\xB7" => "\xEB\x82\xAE",		"\xB3\xB8" => "\xEB\x82\xAF",		"\xB3\xB9" => "\xEB\x82\xB1",		"\xB3\xBA" => "\xEB\x82\xB3",		"\xB3\xBB" => "\xEB\x82\xB4",		"\xB3\xBC" => "\xEB\x82\xB5",		"\xB3\xBD" => "\xEB\x82\xB8",		"\xB3\xBE" => "\xEB\x82\xBC",		"\xB3\xBF" => "\xEB\x83\x84",		"\xB3\xC0" => "\xEB\x83\x85",		"\xB3\xC1" => "\xEB\x83\x87",		"\xB3\xC2" => "\xEB\x83\x88",		"\xB3\xC3" => "\xEB\x83\x89",		"\xB3\xC4" => "\xEB\x83\x90",		"\xB3\xC5" => "\xEB\x83\x91",		"\xB3\xC6" => "\xEB\x83\x94",		"\xB3\xC7" => "\xEB\x83\x98",		"\xB3\xC8" => "\xEB\x83\xA0",		"\xB3\xC9" => "\xEB\x83\xA5",		"\xB3\xCA" => "\xEB\x84\x88",		"\xB3\xCB" => "\xEB\x84\x89",		"\xB3\xCC" => "\xEB\x84\x8B",		"\xB3\xCD" => "\xEB\x84\x8C",		"\xB3\xCE" => "\xEB\x84\x90",		"\xB3\xCF" => "\xEB\x84\x92",		"\xB3\xD0" => "\xEB\x84\x93",		"\xB3\xD1" => "\xEB\x84\x98",		"\xB3\xD2" => "\xEB\x84\x99",		"\xB3\xD3" => "\xEB\x84\x9B",		"\xB3\xD4" => "\xEB\x84\x9C",		"\xB3\xD5" => "\xEB\x84\x9D",		"\xB3\xD6" => "\xEB\x84\xA3",		"\xB3\xD7" => "\xEB\x84\xA4",		"\xB3\xD8" => "\xEB\x84\xA5",		"\xB3\xD9" => "\xEB\x84\xA8",		"\xB3\xDA" => "\xEB\x84\xAC",		"\xB3\xDB" => "\xEB\x84\xB4",		"\xB3\xDC" => "\xEB\x84\xB5",		"\xB3\xDD" => "\xEB\x84\xB7",		"\xB3\xDE" => "\xEB\x84\xB8",		"\xB3\xDF" => "\xEB\x84\xB9",		"\xB3\xE0" => "\xEB\x85\x80",		"\xB3\xE1" => "\xEB\x85\x81",		"\xB3\xE2" => "\xEB\x85\x84",		"\xB3\xE3" => "\xEB\x85\x88",		"\xB3\xE4" => "\xEB\x85\x90",		"\xB3\xE5" => "\xEB\x85\x91",		"\xB3\xE6" => "\xEB\x85\x94",		"\xB3\xE7" => "\xEB\x85\x95",		"\xB3\xE8" => "\xEB\x85\x98",		"\xB3\xE9" => "\xEB\x85\x9C",		"\xB3\xEA" => "\xEB\x85\xA0",		"\xB3\xEB" => "\xEB\x85\xB8",		"\xB3\xEC" => "\xEB\x85\xB9",		"\xB3\xED" => "\xEB\x85\xBC",		"\xB3\xEE" => "\xEB\x86\x80",		"\xB3\xEF" => "\xEB\x86\x82",		"\xB3\xF0" => "\xEB\x86\x88",		"\xB3\xF1" => "\xEB\x86\x89",		"\xB3\xF2" => "\xEB\x86\x8B",		"\xB3\xF3" => "\xEB\x86\x8D",		"\xB3\xF4" => "\xEB\x86\x92",		"\xB3\xF5" => "\xEB\x86\x93",		"\xB3\xF6" => "\xEB\x86\x94",		"\xB3\xF7" => "\xEB\x86\x98",		"\xB3\xF8" => "\xEB\x86\x9C",		"\xB3\xF9" => "\xEB\x86\xA8",		"\xB3\xFA" => "\xEB\x87\x8C",		"\xB3\xFB" => "\xEB\x87\x90",		"\xB3\xFC" => "\xEB\x87\x94",		"\xB3\xFD" => "\xEB\x87\x9C",		"\xB3\xFE" => "\xEB\x87\x9D",		"\xB4\x41" => "\xED\x80\xAE",		"\xB4\x42" => "\xED\x80\xAF",		"\xB4\x43" => "\xED\x80\xB0",		"\xB4\x44" => "\xED\x80\xB1",		"\xB4\x45" => "\xED\x80\xB2",		"\xB4\x46" => "\xED\x80\xB3",		"\xB4\x47" => "\xED\x80\xB6",		"\xB4\x48" => "\xED\x80\xB7",		"\xB4\x49" => "\xED\x80\xB9",		"\xB4\x4A" => "\xED\x80\xBA",		"\xB4\x4B" => "\xED\x80\xBB",		"\xB4\x4C" => "\xED\x80\xBD",		"\xB4\x4D" => "\xED\x80\xBE",		"\xB4\x4E" => "\xED\x80\xBF",		"\xB4\x4F" => "\xED\x81\x80",		"\xB4\x50" => "\xED\x81\x81",		"\xB4\x51" => "\xED\x81\x82",		"\xB4\x52" => "\xED\x81\x83",		"\xB4\x53" => "\xED\x81\x86",		"\xB4\x54" => "\xED\x81\x88",		"\xB4\x55" => "\xED\x81\x8A",		"\xB4\x56" => "\xED\x81\x8B",		"\xB4\x57" => "\xED\x81\x8C",		"\xB4\x58" => "\xED\x81\x8D",		"\xB4\x59" => "\xED\x81\x8E",		"\xB4\x5A" => "\xED\x81\x8F",		"\xB4\x61" => "\xED\x81\x91",		"\xB4\x62" => "\xED\x81\x92",		"\xB4\x63" => "\xED\x81\x93",		"\xB4\x64" => "\xED\x81\x95",		"\xB4\x65" => "\xED\x81\x96",		"\xB4\x66" => "\xED\x81\x97",		"\xB4\x67" => "\xED\x81\x99",		"\xB4\x68" => "\xED\x81\x9A",		"\xB4\x69" => "\xED\x81\x9B",		"\xB4\x6A" => "\xED\x81\x9C",		"\xB4\x6B" => "\xED\x81\x9D",		"\xB4\x6C" => "\xED\x81\x9E",		"\xB4\x6D" => "\xED\x81\x9F",		"\xB4\x6E" => "\xED\x81\xA1",		"\xB4\x6F" => "\xED\x81\xA2",		"\xB4\x70" => "\xED\x81\xA3",		"\xB4\x71" => "\xED\x81\xA4",		"\xB4\x72" => "\xED\x81\xA5",		"\xB4\x73" => "\xED\x81\xA6",		"\xB4\x74" => "\xED\x81\xA7",		"\xB4\x75" => "\xED\x81\xA8",		"\xB4\x76" => "\xED\x81\xA9",		"\xB4\x77" => "\xED\x81\xAA",		"\xB4\x78" => "\xED\x81\xAB",		"\xB4\x79" => "\xED\x81\xAE",		"\xB4\x7A" => "\xED\x81\xAF",		"\xB4\x81" => "\xED\x81\xB1",		"\xB4\x82" => "\xED\x81\xB2",		"\xB4\x83" => "\xED\x81\xB3",		"\xB4\x84" => "\xED\x81\xB5",		"\xB4\x85" => "\xED\x81\xB6",		"\xB4\x86" => "\xED\x81\xB7",		"\xB4\x87" => "\xED\x81\xB8",		"\xB4\x88" => "\xED\x81\xB9",		"\xB4\x89" => "\xED\x81\xBA",		"\xB4\x8A" => "\xED\x81\xBB",		"\xB4\x8B" => "\xED\x81\xBE",		"\xB4\x8C" => "\xED\x81\xBF",		"\xB4\x8D" => "\xED\x82\x80",		"\xB4\x8E" => "\xED\x82\x82",		"\xB4\x8F" => "\xED\x82\x83",		"\xB4\x90" => "\xED\x82\x84",		"\xB4\x91" => "\xED\x82\x85",		"\xB4\x92" => "\xED\x82\x86",		"\xB4\x93" => "\xED\x82\x87",		"\xB4\x94" => "\xED\x82\x88",		"\xB4\x95" => "\xED\x82\x89",		"\xB4\x96" => "\xED\x82\x8A",		"\xB4\x97" => "\xED\x82\x8B",		"\xB4\x98" => "\xED\x82\x8C",		"\xB4\x99" => "\xED\x82\x8D",		"\xB4\x9A" => "\xED\x82\x8E",		"\xB4\x9B" => "\xED\x82\x8F",		"\xB4\x9C" => "\xED\x82\x90",		"\xB4\x9D" => "\xED\x82\x91",		"\xB4\x9E" => "\xED\x82\x92",		"\xB4\x9F" => "\xED\x82\x93",		"\xB4\xA0" => "\xED\x82\x94",		"\xB4\xA1" => "\xEB\x87\x9F",		"\xB4\xA2" => "\xEB\x87\xA8",		"\xB4\xA3" => "\xEB\x87\xA9",		"\xB4\xA4" => "\xEB\x87\xAC",		"\xB4\xA5" => "\xEB\x87\xB0",		"\xB4\xA6" => "\xEB\x87\xB9",		"\xB4\xA7" => "\xEB\x87\xBB",		"\xB4\xA8" => "\xEB\x87\xBD",		"\xB4\xA9" => "\xEB\x88\x84",		"\xB4\xAA" => "\xEB\x88\x85",		"\xB4\xAB" => "\xEB\x88\x88",		"\xB4\xAC" => "\xEB\x88\x8B",		"\xB4\xAD" => "\xEB\x88\x8C",		"\xB4\xAE" => "\xEB\x88\x94",		"\xB4\xAF" => "\xEB\x88\x95",		"\xB4\xB0" => "\xEB\x88\x97",		"\xB4\xB1" => "\xEB\x88\x99",		"\xB4\xB2" => "\xEB\x88\xA0",		"\xB4\xB3" => "\xEB\x88\xB4",		"\xB4\xB4" => "\xEB\x88\xBC",		"\xB4\xB5" => "\xEB\x89\x98",		"\xB4\xB6" => "\xEB\x89\x9C",		"\xB4\xB7" => "\xEB\x89\xA0",		"\xB4\xB8" => "\xEB\x89\xA8",		"\xB4\xB9" => "\xEB\x89\xA9",		"\xB4\xBA" => "\xEB\x89\xB4",		"\xB4\xBB" => "\xEB\x89\xB5",		"\xB4\xBC" => "\xEB\x89\xBC",		"\xB4\xBD" => "\xEB\x8A\x84",		"\xB4\xBE" => "\xEB\x8A\x85",		"\xB4\xBF" => "\xEB\x8A\x89",		"\xB4\xC0" => "\xEB\x8A\x90",		"\xB4\xC1" => "\xEB\x8A\x91",		"\xB4\xC2" => "\xEB\x8A\x94",		"\xB4\xC3" => "\xEB\x8A\x98",		"\xB4\xC4" => "\xEB\x8A\x99",		"\xB4\xC5" => "\xEB\x8A\x9A",		"\xB4\xC6" => "\xEB\x8A\xA0",		"\xB4\xC7" => "\xEB\x8A\xA1",		"\xB4\xC8" => "\xEB\x8A\xA3",		"\xB4\xC9" => "\xEB\x8A\xA5",		"\xB4\xCA" => "\xEB\x8A\xA6",		"\xB4\xCB" => "\xEB\x8A\xAA",		"\xB4\xCC" => "\xEB\x8A\xAC",		"\xB4\xCD" => "\xEB\x8A\xB0",		"\xB4\xCE" => "\xEB\x8A\xB4",		"\xB4\xCF" => "\xEB\x8B\x88",		"\xB4\xD0" => "\xEB\x8B\x89",		"\xB4\xD1" => "\xEB\x8B\x8C",		"\xB4\xD2" => "\xEB\x8B\x90",		"\xB4\xD3" => "\xEB\x8B\x92",		"\xB4\xD4" => "\xEB\x8B\x98",		"\xB4\xD5" => "\xEB\x8B\x99",		"\xB4\xD6" => "\xEB\x8B\x9B",		"\xB4\xD7" => "\xEB\x8B\x9D",		"\xB4\xD8" => "\xEB\x8B\xA2",		"\xB4\xD9" => "\xEB\x8B\xA4",		"\xB4\xDA" => "\xEB\x8B\xA5",		"\xB4\xDB" => "\xEB\x8B\xA6",		"\xB4\xDC" => "\xEB\x8B\xA8",		"\xB4\xDD" => "\xEB\x8B\xAB",		"\xB4\xDE" => "\xEB\x8B\xAC",		"\xB4\xDF" => "\xEB\x8B\xAD",		"\xB4\xE0" => "\xEB\x8B\xAE",		"\xB4\xE1" => "\xEB\x8B\xAF",		"\xB4\xE2" => "\xEB\x8B\xB3",		"\xB4\xE3" => "\xEB\x8B\xB4",		"\xB4\xE4" => "\xEB\x8B\xB5",		"\xB4\xE5" => "\xEB\x8B\xB7",		"\xB4\xE6" => "\xEB\x8B\xB8",		"\xB4\xE7" => "\xEB\x8B\xB9",		"\xB4\xE8" => "\xEB\x8B\xBA",		"\xB4\xE9" => "\xEB\x8B\xBB",		"\xB4\xEA" => "\xEB\x8B\xBF",		"\xB4\xEB" => "\xEB\x8C\x80",		"\xB4\xEC" => "\xEB\x8C\x81",		"\xB4\xED" => "\xEB\x8C\x84",		"\xB4\xEE" => "\xEB\x8C\x88",		"\xB4\xEF" => "\xEB\x8C\x90",		"\xB4\xF0" => "\xEB\x8C\x91",		"\xB4\xF1" => "\xEB\x8C\x93",		"\xB4\xF2" => "\xEB\x8C\x94",		"\xB4\xF3" => "\xEB\x8C\x95",		"\xB4\xF4" => "\xEB\x8C\x9C",		"\xB4\xF5" => "\xEB\x8D\x94",		"\xB4\xF6" => "\xEB\x8D\x95",		"\xB4\xF7" => "\xEB\x8D\x96",		"\xB4\xF8" => "\xEB\x8D\x98",		"\xB4\xF9" => "\xEB\x8D\x9B",		"\xB4\xFA" => "\xEB\x8D\x9C",		"\xB4\xFB" => "\xEB\x8D\x9E",		"\xB4\xFC" => "\xEB\x8D\x9F",		"\xB4\xFD" => "\xEB\x8D\xA4",		"\xB4\xFE" => "\xEB\x8D\xA5",		"\xB5\x41" => "\xED\x82\x95",		"\xB5\x42" => "\xED\x82\x96",		"\xB5\x43" => "\xED\x82\x97",		"\xB5\x44" => "\xED\x82\x98",		"\xB5\x45" => "\xED\x82\x99",		"\xB5\x46" => "\xED\x82\x9A",		"\xB5\x47" => "\xED\x82\x9B",		"\xB5\x48" => "\xED\x82\x9C",		"\xB5\x49" => "\xED\x82\x9D",		"\xB5\x4A" => "\xED\x82\x9E",		"\xB5\x4B" => "\xED\x82\x9F",		"\xB5\x4C" => "\xED\x82\xA0",		"\xB5\x4D" => "\xED\x82\xA1",		"\xB5\x4E" => "\xED\x82\xA2",		"\xB5\x4F" => "\xED\x82\xA3",		"\xB5\x50" => "\xED\x82\xA6",		"\xB5\x51" => "\xED\x82\xA7",		"\xB5\x52" => "\xED\x82\xA9",		"\xB5\x53" => "\xED\x82\xAA",		"\xB5\x54" => "\xED\x82\xAB",		"\xB5\x55" => "\xED\x82\xAD",		"\xB5\x56" => "\xED\x82\xAE",		"\xB5\x57" => "\xED\x82\xAF",		"\xB5\x58" => "\xED\x82\xB0",		"\xB5\x59" => "\xED\x82\xB1",		"\xB5\x5A" => "\xED\x82\xB2",		"\xB5\x61" => "\xED\x82\xB3",		"\xB5\x62" => "\xED\x82\xB6",		"\xB5\x63" => "\xED\x82\xB8",		"\xB5\x64" => "\xED\x82\xBA",		"\xB5\x65" => "\xED\x82\xBB",		"\xB5\x66" => "\xED\x82\xBC",		"\xB5\x67" => "\xED\x82\xBD",		"\xB5\x68" => "\xED\x82\xBE",		"\xB5\x69" => "\xED\x82\xBF",		"\xB5\x6A" => "\xED\x83\x82",		"\xB5\x6B" => "\xED\x83\x83",		"\xB5\x6C" => "\xED\x83\x85",		"\xB5\x6D" => "\xED\x83\x86",		"\xB5\x6E" => "\xED\x83\x87",		"\xB5\x6F" => "\xED\x83\x8A",		"\xB5\x70" => "\xED\x83\x8B",		"\xB5\x71" => "\xED\x83\x8C",		"\xB5\x72" => "\xED\x83\x8D",		"\xB5\x73" => "\xED\x83\x8E",		"\xB5\x74" => "\xED\x83\x8F",		"\xB5\x75" => "\xED\x83\x92",		"\xB5\x76" => "\xED\x83\x96",		"\xB5\x77" => "\xED\x83\x97",		"\xB5\x78" => "\xED\x83\x98",		"\xB5\x79" => "\xED\x83\x99",		"\xB5\x7A" => "\xED\x83\x9A",		"\xB5\x81" => "\xED\x83\x9B",		"\xB5\x82" => "\xED\x83\x9E",		"\xB5\x83" => "\xED\x83\x9F",		"\xB5\x84" => "\xED\x83\xA1",		"\xB5\x85" => "\xED\x83\xA2",		"\xB5\x86" => "\xED\x83\xA3",		"\xB5\x87" => "\xED\x83\xA5",		"\xB5\x88" => "\xED\x83\xA6",		"\xB5\x89" => "\xED\x83\xA7",		"\xB5\x8A" => "\xED\x83\xA8",		"\xB5\x8B" => "\xED\x83\xA9",		"\xB5\x8C" => "\xED\x83\xAA",		"\xB5\x8D" => "\xED\x83\xAB",		"\xB5\x8E" => "\xED\x83\xAE",		"\xB5\x8F" => "\xED\x83\xB2",		"\xB5\x90" => "\xED\x83\xB3",		"\xB5\x91" => "\xED\x83\xB4",		"\xB5\x92" => "\xED\x83\xB5",		"\xB5\x93" => "\xED\x83\xB6",		"\xB5\x94" => "\xED\x83\xB7",		"\xB5\x95" => "\xED\x83\xB9",		"\xB5\x96" => "\xED\x83\xBA",		"\xB5\x97" => "\xED\x83\xBB",		"\xB5\x98" => "\xED\x83\xBC",		"\xB5\x99" => "\xED\x83\xBD",		"\xB5\x9A" => "\xED\x83\xBE",		"\xB5\x9B" => "\xED\x83\xBF",		"\xB5\x9C" => "\xED\x84\x80",		"\xB5\x9D" => "\xED\x84\x81",		"\xB5\x9E" => "\xED\x84\x82",		"\xB5\x9F" => "\xED\x84\x83",		"\xB5\xA0" => "\xED\x84\x84",		"\xB5\xA1" => "\xEB\x8D\xA7",		"\xB5\xA2" => "\xEB\x8D\xA9",		"\xB5\xA3" => "\xEB\x8D\xAB",		"\xB5\xA4" => "\xEB\x8D\xAE",		"\xB5\xA5" => "\xEB\x8D\xB0",		"\xB5\xA6" => "\xEB\x8D\xB1",		"\xB5\xA7" => "\xEB\x8D\xB4",		"\xB5\xA8" => "\xEB\x8D\xB8",		"\xB5\xA9" => "\xEB\x8E\x80",		"\xB5\xAA" => "\xEB\x8E\x81",		"\xB5\xAB" => "\xEB\x8E\x83",		"\xB5\xAC" => "\xEB\x8E\x84",		"\xB5\xAD" => "\xEB\x8E\x85",		"\xB5\xAE" => "\xEB\x8E\x8C",		"\xB5\xAF" => "\xEB\x8E\x90",		"\xB5\xB0" => "\xEB\x8E\x94",		"\xB5\xB1" => "\xEB\x8E\xA0",		"\xB5\xB2" => "\xEB\x8E\xA1",		"\xB5\xB3" => "\xEB\x8E\xA8",		"\xB5\xB4" => "\xEB\x8E\xAC",		"\xB5\xB5" => "\xEB\x8F\x84",		"\xB5\xB6" => "\xEB\x8F\x85",		"\xB5\xB7" => "\xEB\x8F\x88",		"\xB5\xB8" => "\xEB\x8F\x8B",		"\xB5\xB9" => "\xEB\x8F\x8C",		"\xB5\xBA" => "\xEB\x8F\x8E",		"\xB5\xBB" => "\xEB\x8F\x90",		"\xB5\xBC" => "\xEB\x8F\x94",		"\xB5\xBD" => "\xEB\x8F\x95",		"\xB5\xBE" => "\xEB\x8F\x97",		"\xB5\xBF" => "\xEB\x8F\x99",		"\xB5\xC0" => "\xEB\x8F\x9B",		"\xB5\xC1" => "\xEB\x8F\x9D",		"\xB5\xC2" => "\xEB\x8F\xA0",		"\xB5\xC3" => "\xEB\x8F\xA4",		"\xB5\xC4" => "\xEB\x8F\xA8",		"\xB5\xC5" => "\xEB\x8F\xBC",		"\xB5\xC6" => "\xEB\x90\x90",		"\xB5\xC7" => "\xEB\x90\x98",		"\xB5\xC8" => "\xEB\x90\x9C",		"\xB5\xC9" => "\xEB\x90\xA0",		"\xB5\xCA" => "\xEB\x90\xA8",		"\xB5\xCB" => "\xEB\x90\xA9",		"\xB5\xCC" => "\xEB\x90\xAB",		"\xB5\xCD" => "\xEB\x90\xB4",		"\xB5\xCE" => "\xEB\x91\x90",		"\xB5\xCF" => "\xEB\x91\x91",		"\xB5\xD0" => "\xEB\x91\x94",		"\xB5\xD1" => "\xEB\x91\x98",		"\xB5\xD2" => "\xEB\x91\xA0",		"\xB5\xD3" => "\xEB\x91\xA1",		"\xB5\xD4" => "\xEB\x91\xA3",		"\xB5\xD5" => "\xEB\x91\xA5",		"\xB5\xD6" => "\xEB\x91\xAC",		"\xB5\xD7" => "\xEB\x92\x80",		"\xB5\xD8" => "\xEB\x92\x88",		"\xB5\xD9" => "\xEB\x92\x9D",		"\xB5\xDA" => "\xEB\x92\xA4",		"\xB5\xDB" => "\xEB\x92\xA8",		"\xB5\xDC" => "\xEB\x92\xAC",		"\xB5\xDD" => "\xEB\x92\xB5",		"\xB5\xDE" => "\xEB\x92\xB7",		"\xB5\xDF" => "\xEB\x92\xB9",		"\xB5\xE0" => "\xEB\x93\x80",		"\xB5\xE1" => "\xEB\x93\x84",		"\xB5\xE2" => "\xEB\x93\x88",		"\xB5\xE3" => "\xEB\x93\x90",		"\xB5\xE4" => "\xEB\x93\x95",		"\xB5\xE5" => "\xEB\x93\x9C",		"\xB5\xE6" => "\xEB\x93\x9D",		"\xB5\xE7" => "\xEB\x93\xA0",		"\xB5\xE8" => "\xEB\x93\xA3",		"\xB5\xE9" => "\xEB\x93\xA4",		"\xB5\xEA" => "\xEB\x93\xA6",		"\xB5\xEB" => "\xEB\x93\xAC",		"\xB5\xEC" => "\xEB\x93\xAD",		"\xB5\xED" => "\xEB\x93\xAF",		"\xB5\xEE" => "\xEB\x93\xB1",		"\xB5\xEF" => "\xEB\x93\xB8",		"\xB5\xF0" => "\xEB\x94\x94",		"\xB5\xF1" => "\xEB\x94\x95",		"\xB5\xF2" => "\xEB\x94\x98",		"\xB5\xF3" => "\xEB\x94\x9B",		"\xB5\xF4" => "\xEB\x94\x9C",		"\xB5\xF5" => "\xEB\x94\xA4",		"\xB5\xF6" => "\xEB\x94\xA5",		"\xB5\xF7" => "\xEB\x94\xA7",		"\xB5\xF8" => "\xEB\x94\xA8",		"\xB5\xF9" => "\xEB\x94\xA9",		"\xB5\xFA" => "\xEB\x94\xAA",		"\xB5\xFB" => "\xEB\x94\xB0",		"\xB5\xFC" => "\xEB\x94\xB1",		"\xB5\xFD" => "\xEB\x94\xB4",		"\xB5\xFE" => "\xEB\x94\xB8",		"\xB6\x41" => "\xED\x84\x85",		"\xB6\x42" => "\xED\x84\x86",		"\xB6\x43" => "\xED\x84\x87",		"\xB6\x44" => "\xED\x84\x88",		"\xB6\x45" => "\xED\x84\x89",		"\xB6\x46" => "\xED\x84\x8A",		"\xB6\x47" => "\xED\x84\x8B",		"\xB6\x48" => "\xED\x84\x8C",		"\xB6\x49" => "\xED\x84\x8E",		"\xB6\x4A" => "\xED\x84\x8F",		"\xB6\x4B" => "\xED\x84\x90",		"\xB6\x4C" => "\xED\x84\x91",		"\xB6\x4D" => "\xED\x84\x92",		"\xB6\x4E" => "\xED\x84\x93",		"\xB6\x4F" => "\xED\x84\x94",		"\xB6\x50" => "\xED\x84\x95",		"\xB6\x51" => "\xED\x84\x96",		"\xB6\x52" => "\xED\x84\x97",		"\xB6\x53" => "\xED\x84\x98",		"\xB6\x54" => "\xED\x84\x99",		"\xB6\x55" => "\xED\x84\x9A",		"\xB6\x56" => "\xED\x84\x9B",		"\xB6\x57" => "\xED\x84\x9C",		"\xB6\x58" => "\xED\x84\x9D",		"\xB6\x59" => "\xED\x84\x9E",		"\xB6\x5A" => "\xED\x84\x9F",		"\xB6\x61" => "\xED\x84\xA0",		"\xB6\x62" => "\xED\x84\xA1",		"\xB6\x63" => "\xED\x84\xA2",		"\xB6\x64" => "\xED\x84\xA3",		"\xB6\x65" => "\xED\x84\xA4",		"\xB6\x66" => "\xED\x84\xA5",		"\xB6\x67" => "\xED\x84\xA6",		"\xB6\x68" => "\xED\x84\xA7",		"\xB6\x69" => "\xED\x84\xA8",		"\xB6\x6A" => "\xED\x84\xA9",		"\xB6\x6B" => "\xED\x84\xAA",		"\xB6\x6C" => "\xED\x84\xAB",		"\xB6\x6D" => "\xED\x84\xAC",		"\xB6\x6E" => "\xED\x84\xAD",		"\xB6\x6F" => "\xED\x84\xAE",		"\xB6\x70" => "\xED\x84\xAF",		"\xB6\x71" => "\xED\x84\xB2",		"\xB6\x72" => "\xED\x84\xB3",		"\xB6\x73" => "\xED\x84\xB5",		"\xB6\x74" => "\xED\x84\xB6",		"\xB6\x75" => "\xED\x84\xB7",		"\xB6\x76" => "\xED\x84\xB9",		"\xB6\x77" => "\xED\x84\xBB",		"\xB6\x78" => "\xED\x84\xBC",		"\xB6\x79" => "\xED\x84\xBD",		"\xB6\x7A" => "\xED\x84\xBE",		"\xB6\x81" => "\xED\x84\xBF",		"\xB6\x82" => "\xED\x85\x82",		"\xB6\x83" => "\xED\x85\x86",		"\xB6\x84" => "\xED\x85\x87",		"\xB6\x85" => "\xED\x85\x88",		"\xB6\x86" => "\xED\x85\x89",		"\xB6\x87" => "\xED\x85\x8A",		"\xB6\x88" => "\xED\x85\x8B",		"\xB6\x89" => "\xED\x85\x8E",		"\xB6\x8A" => "\xED\x85\x8F",		"\xB6\x8B" => "\xED\x85\x91",		"\xB6\x8C" => "\xED\x85\x92",		"\xB6\x8D" => "\xED\x85\x93",		"\xB6\x8E" => "\xED\x85\x95",		"\xB6\x8F" => "\xED\x85\x96",		"\xB6\x90" => "\xED\x85\x97",		"\xB6\x91" => "\xED\x85\x98",		"\xB6\x92" => "\xED\x85\x99",		"\xB6\x93" => "\xED\x85\x9A",		"\xB6\x94" => "\xED\x85\x9B",		"\xB6\x95" => "\xED\x85\x9E",		"\xB6\x96" => "\xED\x85\xA0",		"\xB6\x97" => "\xED\x85\xA2",		"\xB6\x98" => "\xED\x85\xA3",		"\xB6\x99" => "\xED\x85\xA4",		"\xB6\x9A" => "\xED\x85\xA5",		"\xB6\x9B" => "\xED\x85\xA6",		"\xB6\x9C" => "\xED\x85\xA7",		"\xB6\x9D" => "\xED\x85\xA9",		"\xB6\x9E" => "\xED\x85\xAA",		"\xB6\x9F" => "\xED\x85\xAB",		"\xB6\xA0" => "\xED\x85\xAD",		"\xB6\xA1" => "\xEB\x95\x80",		"\xB6\xA2" => "\xEB\x95\x81",		"\xB6\xA3" => "\xEB\x95\x83",		"\xB6\xA4" => "\xEB\x95\x84",		"\xB6\xA5" => "\xEB\x95\x85",		"\xB6\xA6" => "\xEB\x95\x8B",		"\xB6\xA7" => "\xEB\x95\x8C",		"\xB6\xA8" => "\xEB\x95\x8D",		"\xB6\xA9" => "\xEB\x95\x90",		"\xB6\xAA" => "\xEB\x95\x94",		"\xB6\xAB" => "\xEB\x95\x9C",		"\xB6\xAC" => "\xEB\x95\x9D",		"\xB6\xAD" => "\xEB\x95\x9F",		"\xB6\xAE" => "\xEB\x95\xA0",		"\xB6\xAF" => "\xEB\x95\xA1",		"\xB6\xB0" => "\xEB\x96\xA0",		"\xB6\xB1" => "\xEB\x96\xA1",		"\xB6\xB2" => "\xEB\x96\xA4",		"\xB6\xB3" => "\xEB\x96\xA8",		"\xB6\xB4" => "\xEB\x96\xAA",		"\xB6\xB5" => "\xEB\x96\xAB",		"\xB6\xB6" => "\xEB\x96\xB0",		"\xB6\xB7" => "\xEB\x96\xB1",		"\xB6\xB8" => "\xEB\x96\xB3",		"\xB6\xB9" => "\xEB\x96\xB4",		"\xB6\xBA" => "\xEB\x96\xB5",		"\xB6\xBB" => "\xEB\x96\xBB",		"\xB6\xBC" => "\xEB\x96\xBC",		"\xB6\xBD" => "\xEB\x96\xBD",		"\xB6\xBE" => "\xEB\x97\x80",		"\xB6\xBF" => "\xEB\x97\x84",		"\xB6\xC0" => "\xEB\x97\x8C",		"\xB6\xC1" => "\xEB\x97\x8D",		"\xB6\xC2" => "\xEB\x97\x8F",		"\xB6\xC3" => "\xEB\x97\x90",		"\xB6\xC4" => "\xEB\x97\x91",		"\xB6\xC5" => "\xEB\x97\x98",		"\xB6\xC6" => "\xEB\x97\xAC",		"\xB6\xC7" => "\xEB\x98\x90",		"\xB6\xC8" => "\xEB\x98\x91",		"\xB6\xC9" => "\xEB\x98\x94",		"\xB6\xCA" => "\xEB\x98\x98",		"\xB6\xCB" => "\xEB\x98\xA5",		"\xB6\xCC" => "\xEB\x98\xAC",		"\xB6\xCD" => "\xEB\x98\xB4",		"\xB6\xCE" => "\xEB\x99\x88",		"\xB6\xCF" => "\xEB\x99\xA4",		"\xB6\xD0" => "\xEB\x99\xA8",		"\xB6\xD1" => "\xEB\x9A\x9C",		"\xB6\xD2" => "\xEB\x9A\x9D",		"\xB6\xD3" => "\xEB\x9A\xA0",		"\xB6\xD4" => "\xEB\x9A\xA4",		"\xB6\xD5" => "\xEB\x9A\xAB",		"\xB6\xD6" => "\xEB\x9A\xAC",		"\xB6\xD7" => "\xEB\x9A\xB1",		"\xB6\xD8" => "\xEB\x9B\x94",		"\xB6\xD9" => "\xEB\x9B\xB0",		"\xB6\xDA" => "\xEB\x9B\xB4",		"\xB6\xDB" => "\xEB\x9B\xB8",		"\xB6\xDC" => "\xEB\x9C\x80",		"\xB6\xDD" => "\xEB\x9C\x81",		"\xB6\xDE" => "\xEB\x9C\x85",		"\xB6\xDF" => "\xEB\x9C\xA8",		"\xB6\xE0" => "\xEB\x9C\xA9",		"\xB6\xE1" => "\xEB\x9C\xAC",		"\xB6\xE2" => "\xEB\x9C\xAF",		"\xB6\xE3" => "\xEB\x9C\xB0",		"\xB6\xE4" => "\xEB\x9C\xB8",		"\xB6\xE5" => "\xEB\x9C\xB9",		"\xB6\xE6" => "\xEB\x9C\xBB",		"\xB6\xE7" => "\xEB\x9D\x84",		"\xB6\xE8" => "\xEB\x9D\x88",		"\xB6\xE9" => "\xEB\x9D\x8C",		"\xB6\xEA" => "\xEB\x9D\x94",		"\xB6\xEB" => "\xEB\x9D\x95",		"\xB6\xEC" => "\xEB\x9D\xA0",		"\xB6\xED" => "\xEB\x9D\xA4",		"\xB6\xEE" => "\xEB\x9D\xA8",		"\xB6\xEF" => "\xEB\x9D\xB0",		"\xB6\xF0" => "\xEB\x9D\xB1",		"\xB6\xF1" => "\xEB\x9D\xB3",		"\xB6\xF2" => "\xEB\x9D\xB5",		"\xB6\xF3" => "\xEB\x9D\xBC",		"\xB6\xF4" => "\xEB\x9D\xBD",		"\xB6\xF5" => "\xEB\x9E\x80",		"\xB6\xF6" => "\xEB\x9E\x84",		"\xB6\xF7" => "\xEB\x9E\x8C",		"\xB6\xF8" => "\xEB\x9E\x8D",		"\xB6\xF9" => "\xEB\x9E\x8F",		"\xB6\xFA" => "\xEB\x9E\x90",		"\xB6\xFB" => "\xEB\x9E\x91",		"\xB6\xFC" => "\xEB\x9E\x92",		"\xB6\xFD" => "\xEB\x9E\x96",		"\xB6\xFE" => "\xEB\x9E\x97",		"\xB7\x41" => "\xED\x85\xAE",		"\xB7\x42" => "\xED\x85\xAF",		"\xB7\x43" => "\xED\x85\xB0",		"\xB7\x44" => "\xED\x85\xB1",		"\xB7\x45" => "\xED\x85\xB2",		"\xB7\x46" => "\xED\x85\xB3",		"\xB7\x47" => "\xED\x85\xB4",		"\xB7\x48" => "\xED\x85\xB5",		"\xB7\x49" => "\xED\x85\xB6",		"\xB7\x4A" => "\xED\x85\xB7",		"\xB7\x4B" => "\xED\x85\xB8",		"\xB7\x4C" => "\xED\x85\xB9",		"\xB7\x4D" => "\xED\x85\xBA",		"\xB7\x4E" => "\xED\x85\xBB",		"\xB7\x4F" => "\xED\x85\xBD",		"\xB7\x50" => "\xED\x85\xBE",		"\xB7\x51" => "\xED\x85\xBF",		"\xB7\x52" => "\xED\x86\x80",		"\xB7\x53" => "\xED\x86\x81",		"\xB7\x54" => "\xED\x86\x82",		"\xB7\x55" => "\xED\x86\x83",		"\xB7\x56" => "\xED\x86\x85",		"\xB7\x57" => "\xED\x86\x86",		"\xB7\x58" => "\xED\x86\x87",		"\xB7\x59" => "\xED\x86\x89",		"\xB7\x5A" => "\xED\x86\x8A",		"\xB7\x61" => "\xED\x86\x8B",		"\xB7\x62" => "\xED\x86\x8C",		"\xB7\x63" => "\xED\x86\x8D",		"\xB7\x64" => "\xED\x86\x8E",		"\xB7\x65" => "\xED\x86\x8F",		"\xB7\x66" => "\xED\x86\x90",		"\xB7\x67" => "\xED\x86\x91",		"\xB7\x68" => "\xED\x86\x92",		"\xB7\x69" => "\xED\x86\x93",		"\xB7\x6A" => "\xED\x86\x94",		"\xB7\x6B" => "\xED\x86\x95",		"\xB7\x6C" => "\xED\x86\x96",		"\xB7\x6D" => "\xED\x86\x97",		"\xB7\x6E" => "\xED\x86\x98",		"\xB7\x6F" => "\xED\x86\x99",		"\xB7\x70" => "\xED\x86\x9A",		"\xB7\x71" => "\xED\x86\x9B",		"\xB7\x72" => "\xED\x86\x9C",		"\xB7\x73" => "\xED\x86\x9D",		"\xB7\x74" => "\xED\x86\x9E",		"\xB7\x75" => "\xED\x86\x9F",		"\xB7\x76" => "\xED\x86\xA2",		"\xB7\x77" => "\xED\x86\xA3",		"\xB7\x78" => "\xED\x86\xA5",		"\xB7\x79" => "\xED\x86\xA6",		"\xB7\x7A" => "\xED\x86\xA7",		"\xB7\x81" => "\xED\x86\xA9",		"\xB7\x82" => "\xED\x86\xAA",		"\xB7\x83" => "\xED\x86\xAB",		"\xB7\x84" => "\xED\x86\xAC",		"\xB7\x85" => "\xED\x86\xAD",		"\xB7\x86" => "\xED\x86\xAE",		"\xB7\x87" => "\xED\x86\xAF",		"\xB7\x88" => "\xED\x86\xB2",		"\xB7\x89" => "\xED\x86\xB4",		"\xB7\x8A" => "\xED\x86\xB6",		"\xB7\x8B" => "\xED\x86\xB7",		"\xB7\x8C" => "\xED\x86\xB8",		"\xB7\x8D" => "\xED\x86\xB9",		"\xB7\x8E" => "\xED\x86\xBB",		"\xB7\x8F" => "\xED\x86\xBD",		"\xB7\x90" => "\xED\x86\xBE",		"\xB7\x91" => "\xED\x86\xBF",		"\xB7\x92" => "\xED\x87\x81",		"\xB7\x93" => "\xED\x87\x82",		"\xB7\x94" => "\xED\x87\x83",		"\xB7\x95" => "\xED\x87\x84",		"\xB7\x96" => "\xED\x87\x85",		"\xB7\x97" => "\xED\x87\x86",		"\xB7\x98" => "\xED\x87\x87",		"\xB7\x99" => "\xED\x87\x88",		"\xB7\x9A" => "\xED\x87\x89",		"\xB7\x9B" => "\xED\x87\x8A",		"\xB7\x9C" => "\xED\x87\x8B",		"\xB7\x9D" => "\xED\x87\x8C",		"\xB7\x9E" => "\xED\x87\x8D",		"\xB7\x9F" => "\xED\x87\x8E",		"\xB7\xA0" => "\xED\x87\x8F",		"\xB7\xA1" => "\xEB\x9E\x98",		"\xB7\xA2" => "\xEB\x9E\x99",		"\xB7\xA3" => "\xEB\x9E\x9C",		"\xB7\xA4" => "\xEB\x9E\xA0",		"\xB7\xA5" => "\xEB\x9E\xA8",		"\xB7\xA6" => "\xEB\x9E\xA9",		"\xB7\xA7" => "\xEB\x9E\xAB",		"\xB7\xA8" => "\xEB\x9E\xAC",		"\xB7\xA9" => "\xEB\x9E\xAD",		"\xB7\xAA" => "\xEB\x9E\xB4",		"\xB7\xAB" => "\xEB\x9E\xB5",		"\xB7\xAC" => "\xEB\x9E\xB8",		"\xB7\xAD" => "\xEB\x9F\x87",		"\xB7\xAE" => "\xEB\x9F\x89",		"\xB7\xAF" => "\xEB\x9F\xAC",		"\xB7\xB0" => "\xEB\x9F\xAD",		"\xB7\xB1" => "\xEB\x9F\xB0",		"\xB7\xB2" => "\xEB\x9F\xB4",		"\xB7\xB3" => "\xEB\x9F\xBC",		"\xB7\xB4" => "\xEB\x9F\xBD",		"\xB7\xB5" => "\xEB\x9F\xBF",		"\xB7\xB6" => "\xEB\xA0\x80",		"\xB7\xB7" => "\xEB\xA0\x81",		"\xB7\xB8" => "\xEB\xA0\x87",		"\xB7\xB9" => "\xEB\xA0\x88",		"\xB7\xBA" => "\xEB\xA0\x89",		"\xB7\xBB" => "\xEB\xA0\x8C",		"\xB7\xBC" => "\xEB\xA0\x90",		"\xB7\xBD" => "\xEB\xA0\x98",		"\xB7\xBE" => "\xEB\xA0\x99",		"\xB7\xBF" => "\xEB\xA0\x9B",		"\xB7\xC0" => "\xEB\xA0\x9D",		"\xB7\xC1" => "\xEB\xA0\xA4",		"\xB7\xC2" => "\xEB\xA0\xA5",		"\xB7\xC3" => "\xEB\xA0\xA8",		"\xB7\xC4" => "\xEB\xA0\xAC",		"\xB7\xC5" => "\xEB\xA0\xB4",		"\xB7\xC6" => "\xEB\xA0\xB5",		"\xB7\xC7" => "\xEB\xA0\xB7",		"\xB7\xC8" => "\xEB\xA0\xB8",		"\xB7\xC9" => "\xEB\xA0\xB9",		"\xB7\xCA" => "\xEB\xA1\x80",		"\xB7\xCB" => "\xEB\xA1\x84",		"\xB7\xCC" => "\xEB\xA1\x91",		"\xB7\xCD" => "\xEB\xA1\x93",		"\xB7\xCE" => "\xEB\xA1\x9C",		"\xB7\xCF" => "\xEB\xA1\x9D",		"\xB7\xD0" => "\xEB\xA1\xA0",		"\xB7\xD1" => "\xEB\xA1\xA4",		"\xB7\xD2" => "\xEB\xA1\xAC",		"\xB7\xD3" => "\xEB\xA1\xAD",		"\xB7\xD4" => "\xEB\xA1\xAF",		"\xB7\xD5" => "\xEB\xA1\xB1",		"\xB7\xD6" => "\xEB\xA1\xB8",		"\xB7\xD7" => "\xEB\xA1\xBC",		"\xB7\xD8" => "\xEB\xA2\x8D",		"\xB7\xD9" => "\xEB\xA2\xA8",		"\xB7\xDA" => "\xEB\xA2\xB0",		"\xB7\xDB" => "\xEB\xA2\xB4",		"\xB7\xDC" => "\xEB\xA2\xB8",		"\xB7\xDD" => "\xEB\xA3\x80",		"\xB7\xDE" => "\xEB\xA3\x81",		"\xB7\xDF" => "\xEB\xA3\x83",		"\xB7\xE0" => "\xEB\xA3\x85",		"\xB7\xE1" => "\xEB\xA3\x8C",		"\xB7\xE2" => "\xEB\xA3\x90",		"\xB7\xE3" => "\xEB\xA3\x94",		"\xB7\xE4" => "\xEB\xA3\x9D",		"\xB7\xE5" => "\xEB\xA3\x9F",		"\xB7\xE6" => "\xEB\xA3\xA1",		"\xB7\xE7" => "\xEB\xA3\xA8",		"\xB7\xE8" => "\xEB\xA3\xA9",		"\xB7\xE9" => "\xEB\xA3\xAC",		"\xB7\xEA" => "\xEB\xA3\xB0",		"\xB7\xEB" => "\xEB\xA3\xB8",		"\xB7\xEC" => "\xEB\xA3\xB9",		"\xB7\xED" => "\xEB\xA3\xBB",		"\xB7\xEE" => "\xEB\xA3\xBD",		"\xB7\xEF" => "\xEB\xA4\x84",		"\xB7\xF0" => "\xEB\xA4\x98",		"\xB7\xF1" => "\xEB\xA4\xA0",		"\xB7\xF2" => "\xEB\xA4\xBC",		"\xB7\xF3" => "\xEB\xA4\xBD",		"\xB7\xF4" => "\xEB\xA5\x80",		"\xB7\xF5" => "\xEB\xA5\x84",		"\xB7\xF6" => "\xEB\xA5\x8C",		"\xB7\xF7" => "\xEB\xA5\x8F",		"\xB7\xF8" => "\xEB\xA5\x91",		"\xB7\xF9" => "\xEB\xA5\x98",		"\xB7\xFA" => "\xEB\xA5\x99",		"\xB7\xFB" => "\xEB\xA5\x9C",		"\xB7\xFC" => "\xEB\xA5\xA0",		"\xB7\xFD" => "\xEB\xA5\xA8",		"\xB7\xFE" => "\xEB\xA5\xA9",		"\xB8\x41" => "\xED\x87\x90",		"\xB8\x42" => "\xED\x87\x91",		"\xB8\x43" => "\xED\x87\x92",		"\xB8\x44" => "\xED\x87\x93",		"\xB8\x45" => "\xED\x87\x94",		"\xB8\x46" => "\xED\x87\x95",		"\xB8\x47" => "\xED\x87\x96",		"\xB8\x48" => "\xED\x87\x97",		"\xB8\x49" => "\xED\x87\x99",		"\xB8\x4A" => "\xED\x87\x9A",		"\xB8\x4B" => "\xED\x87\x9B",		"\xB8\x4C" => "\xED\x87\x9C",		"\xB8\x4D" => "\xED\x87\x9D",		"\xB8\x4E" => "\xED\x87\x9E",		"\xB8\x4F" => "\xED\x87\x9F",		"\xB8\x50" => "\xED\x87\xA0",		"\xB8\x51" => "\xED\x87\xA1",		"\xB8\x52" => "\xED\x87\xA2",		"\xB8\x53" => "\xED\x87\xA3",		"\xB8\x54" => "\xED\x87\xA4",		"\xB8\x55" => "\xED\x87\xA5",		"\xB8\x56" => "\xED\x87\xA6",		"\xB8\x57" => "\xED\x87\xA7",		"\xB8\x58" => "\xED\x87\xA8",		"\xB8\x59" => "\xED\x87\xA9",		"\xB8\x5A" => "\xED\x87\xAA",		"\xB8\x61" => "\xED\x87\xAB",		"\xB8\x62" => "\xED\x87\xAC",		"\xB8\x63" => "\xED\x87\xAD",		"\xB8\x64" => "\xED\x87\xAE",		"\xB8\x65" => "\xED\x87\xAF",		"\xB8\x66" => "\xED\x87\xB0",		"\xB8\x67" => "\xED\x87\xB1",		"\xB8\x68" => "\xED\x87\xB2",		"\xB8\x69" => "\xED\x87\xB3",		"\xB8\x6A" => "\xED\x87\xB5",		"\xB8\x6B" => "\xED\x87\xB6",		"\xB8\x6C" => "\xED\x87\xB7",		"\xB8\x6D" => "\xED\x87\xB9",		"\xB8\x6E" => "\xED\x87\xBA",		"\xB8\x6F" => "\xED\x87\xBB",		"\xB8\x70" => "\xED\x87\xBC",		"\xB8\x71" => "\xED\x87\xBD",		"\xB8\x72" => "\xED\x87\xBE",		"\xB8\x73" => "\xED\x87\xBF",		"\xB8\x74" => "\xED\x88\x80",		"\xB8\x75" => "\xED\x88\x81",		"\xB8\x76" => "\xED\x88\x82",		"\xB8\x77" => "\xED\x88\x83",		"\xB8\x78" => "\xED\x88\x84",		"\xB8\x79" => "\xED\x88\x85",		"\xB8\x7A" => "\xED\x88\x86",		"\xB8\x81" => "\xED\x88\x88",		"\xB8\x82" => "\xED\x88\x8A",		"\xB8\x83" => "\xED\x88\x8B",		"\xB8\x84" => "\xED\x88\x8C",		"\xB8\x85" => "\xED\x88\x8D",		"\xB8\x86" => "\xED\x88\x8E",		"\xB8\x87" => "\xED\x88\x8F",		"\xB8\x88" => "\xED\x88\x91",		"\xB8\x89" => "\xED\x88\x92",		"\xB8\x8A" => "\xED\x88\x93",		"\xB8\x8B" => "\xED\x88\x94",		"\xB8\x8C" => "\xED\x88\x95",		"\xB8\x8D" => "\xED\x88\x96",		"\xB8\x8E" => "\xED\x88\x97",		"\xB8\x8F" => "\xED\x88\x98",		"\xB8\x90" => "\xED\x88\x99",		"\xB8\x91" => "\xED\x88\x9A",		"\xB8\x92" => "\xED\x88\x9B",		"\xB8\x93" => "\xED\x88\x9C",		"\xB8\x94" => "\xED\x88\x9D",		"\xB8\x95" => "\xED\x88\x9E",		"\xB8\x96" => "\xED\x88\x9F",		"\xB8\x97" => "\xED\x88\xA0",		"\xB8\x98" => "\xED\x88\xA1",		"\xB8\x99" => "\xED\x88\xA2",		"\xB8\x9A" => "\xED\x88\xA3",		"\xB8\x9B" => "\xED\x88\xA4",		"\xB8\x9C" => "\xED\x88\xA5",		"\xB8\x9D" => "\xED\x88\xA6",		"\xB8\x9E" => "\xED\x88\xA7",		"\xB8\x9F" => "\xED\x88\xA8",		"\xB8\xA0" => "\xED\x88\xA9",		"\xB8\xA1" => "\xEB\xA5\xAB",		"\xB8\xA2" => "\xEB\xA5\xAD",		"\xB8\xA3" => "\xEB\xA5\xB4",		"\xB8\xA4" => "\xEB\xA5\xB5",		"\xB8\xA5" => "\xEB\xA5\xB8",		"\xB8\xA6" => "\xEB\xA5\xBC",		"\xB8\xA7" => "\xEB\xA6\x84",		"\xB8\xA8" => "\xEB\xA6\x85",		"\xB8\xA9" => "\xEB\xA6\x87",		"\xB8\xAA" => "\xEB\xA6\x89",		"\xB8\xAB" => "\xEB\xA6\x8A",		"\xB8\xAC" => "\xEB\xA6\x8D",		"\xB8\xAD" => "\xEB\xA6\x8E",		"\xB8\xAE" => "\xEB\xA6\xAC",		"\xB8\xAF" => "\xEB\xA6\xAD",		"\xB8\xB0" => "\xEB\xA6\xB0",		"\xB8\xB1" => "\xEB\xA6\xB4",		"\xB8\xB2" => "\xEB\xA6\xBC",		"\xB8\xB3" => "\xEB\xA6\xBD",		"\xB8\xB4" => "\xEB\xA6\xBF",		"\xB8\xB5" => "\xEB\xA7\x81",		"\xB8\xB6" => "\xEB\xA7\x88",		"\xB8\xB7" => "\xEB\xA7\x89",		"\xB8\xB8" => "\xEB\xA7\x8C",		"\xB8\xB9" => "\xEB\xA7\x8E",		"\xB8\xBA" => "\xEB\xA7\x8F",		"\xB8\xBB" => "\xEB\xA7\x90",		"\xB8\xBC" => "\xEB\xA7\x91",		"\xB8\xBD" => "\xEB\xA7\x92",		"\xB8\xBE" => "\xEB\xA7\x98",		"\xB8\xBF" => "\xEB\xA7\x99",		"\xB8\xC0" => "\xEB\xA7\x9B",		"\xB8\xC1" => "\xEB\xA7\x9D",		"\xB8\xC2" => "\xEB\xA7\x9E",		"\xB8\xC3" => "\xEB\xA7\xA1",		"\xB8\xC4" => "\xEB\xA7\xA3",		"\xB8\xC5" => "\xEB\xA7\xA4",		"\xB8\xC6" => "\xEB\xA7\xA5",		"\xB8\xC7" => "\xEB\xA7\xA8",		"\xB8\xC8" => "\xEB\xA7\xAC",		"\xB8\xC9" => "\xEB\xA7\xB4",		"\xB8\xCA" => "\xEB\xA7\xB5",		"\xB8\xCB" => "\xEB\xA7\xB7",		"\xB8\xCC" => "\xEB\xA7\xB8",		"\xB8\xCD" => "\xEB\xA7\xB9",		"\xB8\xCE" => "\xEB\xA7\xBA",		"\xB8\xCF" => "\xEB\xA8\x80",		"\xB8\xD0" => "\xEB\xA8\x81",		"\xB8\xD1" => "\xEB\xA8\x88",		"\xB8\xD2" => "\xEB\xA8\x95",		"\xB8\xD3" => "\xEB\xA8\xB8",		"\xB8\xD4" => "\xEB\xA8\xB9",		"\xB8\xD5" => "\xEB\xA8\xBC",		"\xB8\xD6" => "\xEB\xA9\x80",		"\xB8\xD7" => "\xEB\xA9\x82",		"\xB8\xD8" => "\xEB\xA9\x88",		"\xB8\xD9" => "\xEB\xA9\x89",		"\xB8\xDA" => "\xEB\xA9\x8B",		"\xB8\xDB" => "\xEB\xA9\x8D",		"\xB8\xDC" => "\xEB\xA9\x8E",		"\xB8\xDD" => "\xEB\xA9\x93",		"\xB8\xDE" => "\xEB\xA9\x94",		"\xB8\xDF" => "\xEB\xA9\x95",		"\xB8\xE0" => "\xEB\xA9\x98",		"\xB8\xE1" => "\xEB\xA9\x9C",		"\xB8\xE2" => "\xEB\xA9\xA4",		"\xB8\xE3" => "\xEB\xA9\xA5",		"\xB8\xE4" => "\xEB\xA9\xA7",		"\xB8\xE5" => "\xEB\xA9\xA8",		"\xB8\xE6" => "\xEB\xA9\xA9",		"\xB8\xE7" => "\xEB\xA9\xB0",		"\xB8\xE8" => "\xEB\xA9\xB1",		"\xB8\xE9" => "\xEB\xA9\xB4",		"\xB8\xEA" => "\xEB\xA9\xB8",		"\xB8\xEB" => "\xEB\xAA\x83",		"\xB8\xEC" => "\xEB\xAA\x84",		"\xB8\xED" => "\xEB\xAA\x85",		"\xB8\xEE" => "\xEB\xAA\x87",		"\xB8\xEF" => "\xEB\xAA\x8C",		"\xB8\xF0" => "\xEB\xAA\xA8",		"\xB8\xF1" => "\xEB\xAA\xA9",		"\xB8\xF2" => "\xEB\xAA\xAB",		"\xB8\xF3" => "\xEB\xAA\xAC",		"\xB8\xF4" => "\xEB\xAA\xB0",		"\xB8\xF5" => "\xEB\xAA\xB2",		"\xB8\xF6" => "\xEB\xAA\xB8",		"\xB8\xF7" => "\xEB\xAA\xB9",		"\xB8\xF8" => "\xEB\xAA\xBB",		"\xB8\xF9" => "\xEB\xAA\xBD",		"\xB8\xFA" => "\xEB\xAB\x84",		"\xB8\xFB" => "\xEB\xAB\x88",		"\xB8\xFC" => "\xEB\xAB\x98",		"\xB8\xFD" => "\xEB\xAB\x99",		"\xB8\xFE" => "\xEB\xAB\xBC",		"\xB9\x41" => "\xED\x88\xAA",		"\xB9\x42" => "\xED\x88\xAB",		"\xB9\x43" => "\xED\x88\xAE",		"\xB9\x44" => "\xED\x88\xAF",		"\xB9\x45" => "\xED\x88\xB1",		"\xB9\x46" => "\xED\x88\xB2",		"\xB9\x47" => "\xED\x88\xB3",		"\xB9\x48" => "\xED\x88\xB5",		"\xB9\x49" => "\xED\x88\xB6",		"\xB9\x4A" => "\xED\x88\xB7",		"\xB9\x4B" => "\xED\x88\xB8",		"\xB9\x4C" => "\xED\x88\xB9",		"\xB9\x4D" => "\xED\x88\xBA",		"\xB9\x4E" => "\xED\x88\xBB",		"\xB9\x4F" => "\xED\x88\xBE",		"\xB9\x50" => "\xED\x89\x80",		"\xB9\x51" => "\xED\x89\x82",		"\xB9\x52" => "\xED\x89\x83",		"\xB9\x53" => "\xED\x89\x84",		"\xB9\x54" => "\xED\x89\x85",		"\xB9\x55" => "\xED\x89\x86",		"\xB9\x56" => "\xED\x89\x87",		"\xB9\x57" => "\xED\x89\x89",		"\xB9\x58" => "\xED\x89\x8A",		"\xB9\x59" => "\xED\x89\x8B",		"\xB9\x5A" => "\xED\x89\x8C",		"\xB9\x61" => "\xED\x89\x8D",		"\xB9\x62" => "\xED\x89\x8E",		"\xB9\x63" => "\xED\x89\x8F",		"\xB9\x64" => "\xED\x89\x90",		"\xB9\x65" => "\xED\x89\x91",		"\xB9\x66" => "\xED\x89\x92",		"\xB9\x67" => "\xED\x89\x93",		"\xB9\x68" => "\xED\x89\x94",		"\xB9\x69" => "\xED\x89\x95",		"\xB9\x6A" => "\xED\x89\x96",		"\xB9\x6B" => "\xED\x89\x97",		"\xB9\x6C" => "\xED\x89\x98",		"\xB9\x6D" => "\xED\x89\x99",		"\xB9\x6E" => "\xED\x89\x9A",		"\xB9\x6F" => "\xED\x89\x9B",		"\xB9\x70" => "\xED\x89\x9D",		"\xB9\x71" => "\xED\x89\x9E",		"\xB9\x72" => "\xED\x89\x9F",		"\xB9\x73" => "\xED\x89\xA0",		"\xB9\x74" => "\xED\x89\xA1",		"\xB9\x75" => "\xED\x89\xA2",		"\xB9\x76" => "\xED\x89\xA3",		"\xB9\x77" => "\xED\x89\xA5",		"\xB9\x78" => "\xED\x89\xA6",		"\xB9\x79" => "\xED\x89\xA7",		"\xB9\x7A" => "\xED\x89\xA8",		"\xB9\x81" => "\xED\x89\xA9",		"\xB9\x82" => "\xED\x89\xAA",		"\xB9\x83" => "\xED\x89\xAB",		"\xB9\x84" => "\xED\x89\xAC",		"\xB9\x85" => "\xED\x89\xAD",		"\xB9\x86" => "\xED\x89\xAE",		"\xB9\x87" => "\xED\x89\xAF",		"\xB9\x88" => "\xED\x89\xB0",		"\xB9\x89" => "\xED\x89\xB1",		"\xB9\x8A" => "\xED\x89\xB2",		"\xB9\x8B" => "\xED\x89\xB3",		"\xB9\x8C" => "\xED\x89\xB4",		"\xB9\x8D" => "\xED\x89\xB5",		"\xB9\x8E" => "\xED\x89\xB6",		"\xB9\x8F" => "\xED\x89\xB7",		"\xB9\x90" => "\xED\x89\xB8",		"\xB9\x91" => "\xED\x89\xB9",		"\xB9\x92" => "\xED\x89\xBA",		"\xB9\x93" => "\xED\x89\xBB",		"\xB9\x94" => "\xED\x89\xBC",		"\xB9\x95" => "\xED\x89\xBD",		"\xB9\x96" => "\xED\x89\xBE",		"\xB9\x97" => "\xED\x89\xBF",		"\xB9\x98" => "\xED\x8A\x82",		"\xB9\x99" => "\xED\x8A\x83",		"\xB9\x9A" => "\xED\x8A\x85",		"\xB9\x9B" => "\xED\x8A\x86",		"\xB9\x9C" => "\xED\x8A\x87",		"\xB9\x9D" => "\xED\x8A\x89",		"\xB9\x9E" => "\xED\x8A\x8A",		"\xB9\x9F" => "\xED\x8A\x8B",		"\xB9\xA0" => "\xED\x8A\x8C",		"\xB9\xA1" => "\xEB\xAC\x80",		"\xB9\xA2" => "\xEB\xAC\x84",		"\xB9\xA3" => "\xEB\xAC\x8D",		"\xB9\xA4" => "\xEB\xAC\x8F",		"\xB9\xA5" => "\xEB\xAC\x91",		"\xB9\xA6" => "\xEB\xAC\x98",		"\xB9\xA7" => "\xEB\xAC\x9C",		"\xB9\xA8" => "\xEB\xAC\xA0",		"\xB9\xA9" => "\xEB\xAC\xA9",		"\xB9\xAA" => "\xEB\xAC\xAB",		"\xB9\xAB" => "\xEB\xAC\xB4",		"\xB9\xAC" => "\xEB\xAC\xB5",		"\xB9\xAD" => "\xEB\xAC\xB6",		"\xB9\xAE" => "\xEB\xAC\xB8",		"\xB9\xAF" => "\xEB\xAC\xBB",		"\xB9\xB0" => "\xEB\xAC\xBC",		"\xB9\xB1" => "\xEB\xAC\xBD",		"\xB9\xB2" => "\xEB\xAC\xBE",		"\xB9\xB3" => "\xEB\xAD\x84",		"\xB9\xB4" => "\xEB\xAD\x85",		"\xB9\xB5" => "\xEB\xAD\x87",		"\xB9\xB6" => "\xEB\xAD\x89",		"\xB9\xB7" => "\xEB\xAD\x8D",		"\xB9\xB8" => "\xEB\xAD\x8F",		"\xB9\xB9" => "\xEB\xAD\x90",		"\xB9\xBA" => "\xEB\xAD\x94",		"\xB9\xBB" => "\xEB\xAD\x98",		"\xB9\xBC" => "\xEB\xAD\xA1",		"\xB9\xBD" => "\xEB\xAD\xA3",		"\xB9\xBE" => "\xEB\xAD\xAC",		"\xB9\xBF" => "\xEB\xAE\x88",		"\xB9\xC0" => "\xEB\xAE\x8C",		"\xB9\xC1" => "\xEB\xAE\x90",		"\xB9\xC2" => "\xEB\xAE\xA4",		"\xB9\xC3" => "\xEB\xAE\xA8",		"\xB9\xC4" => "\xEB\xAE\xAC",		"\xB9\xC5" => "\xEB\xAE\xB4",		"\xB9\xC6" => "\xEB\xAE\xB7",		"\xB9\xC7" => "\xEB\xAF\x80",		"\xB9\xC8" => "\xEB\xAF\x84",		"\xB9\xC9" => "\xEB\xAF\x88",		"\xB9\xCA" => "\xEB\xAF\x90",		"\xB9\xCB" => "\xEB\xAF\x93",		"\xB9\xCC" => "\xEB\xAF\xB8",		"\xB9\xCD" => "\xEB\xAF\xB9",		"\xB9\xCE" => "\xEB\xAF\xBC",		"\xB9\xCF" => "\xEB\xAF\xBF",		"\xB9\xD0" => "\xEB\xB0\x80",		"\xB9\xD1" => "\xEB\xB0\x82",		"\xB9\xD2" => "\xEB\xB0\x88",		"\xB9\xD3" => "\xEB\xB0\x89",		"\xB9\xD4" => "\xEB\xB0\x8B",		"\xB9\xD5" => "\xEB\xB0\x8C",		"\xB9\xD6" => "\xEB\xB0\x8D",		"\xB9\xD7" => "\xEB\xB0\x8F",		"\xB9\xD8" => "\xEB\xB0\x91",		"\xB9\xD9" => "\xEB\xB0\x94",		"\xB9\xDA" => "\xEB\xB0\x95",		"\xB9\xDB" => "\xEB\xB0\x96",		"\xB9\xDC" => "\xEB\xB0\x97",		"\xB9\xDD" => "\xEB\xB0\x98",		"\xB9\xDE" => "\xEB\xB0\x9B",		"\xB9\xDF" => "\xEB\xB0\x9C",		"\xB9\xE0" => "\xEB\xB0\x9D",		"\xB9\xE1" => "\xEB\xB0\x9E",		"\xB9\xE2" => "\xEB\xB0\x9F",		"\xB9\xE3" => "\xEB\xB0\xA4",		"\xB9\xE4" => "\xEB\xB0\xA5",		"\xB9\xE5" => "\xEB\xB0\xA7",		"\xB9\xE6" => "\xEB\xB0\xA9",		"\xB9\xE7" => "\xEB\xB0\xAD",		"\xB9\xE8" => "\xEB\xB0\xB0",		"\xB9\xE9" => "\xEB\xB0\xB1",		"\xB9\xEA" => "\xEB\xB0\xB4",		"\xB9\xEB" => "\xEB\xB0\xB8",		"\xB9\xEC" => "\xEB\xB1\x80",		"\xB9\xED" => "\xEB\xB1\x81",		"\xB9\xEE" => "\xEB\xB1\x83",		"\xB9\xEF" => "\xEB\xB1\x84",		"\xB9\xF0" => "\xEB\xB1\x85",		"\xB9\xF1" => "\xEB\xB1\x89",		"\xB9\xF2" => "\xEB\xB1\x8C",		"\xB9\xF3" => "\xEB\xB1\x8D",		"\xB9\xF4" => "\xEB\xB1\x90",		"\xB9\xF5" => "\xEB\xB1\x9D",		"\xB9\xF6" => "\xEB\xB2\x84",		"\xB9\xF7" => "\xEB\xB2\x85",		"\xB9\xF8" => "\xEB\xB2\x88",		"\xB9\xF9" => "\xEB\xB2\x8B",		"\xB9\xFA" => "\xEB\xB2\x8C",		"\xB9\xFB" => "\xEB\xB2\x8E",		"\xB9\xFC" => "\xEB\xB2\x94",		"\xB9\xFD" => "\xEB\xB2\x95",		"\xB9\xFE" => "\xEB\xB2\x97",		"\xBA\x41" => "\xED\x8A\x8D",		"\xBA\x42" => "\xED\x8A\x8E",		"\xBA\x43" => "\xED\x8A\x8F",		"\xBA\x44" => "\xED\x8A\x92",		"\xBA\x45" => "\xED\x8A\x93",		"\xBA\x46" => "\xED\x8A\x94",		"\xBA\x47" => "\xED\x8A\x96",		"\xBA\x48" => "\xED\x8A\x97",		"\xBA\x49" => "\xED\x8A\x98",		"\xBA\x4A" => "\xED\x8A\x99",		"\xBA\x4B" => "\xED\x8A\x9A",		"\xBA\x4C" => "\xED\x8A\x9B",		"\xBA\x4D" => "\xED\x8A\x9D",		"\xBA\x4E" => "\xED\x8A\x9E",		"\xBA\x4F" => "\xED\x8A\x9F",		"\xBA\x50" => "\xED\x8A\xA1",		"\xBA\x51" => "\xED\x8A\xA2",		"\xBA\x52" => "\xED\x8A\xA3",		"\xBA\x53" => "\xED\x8A\xA5",		"\xBA\x54" => "\xED\x8A\xA6",		"\xBA\x55" => "\xED\x8A\xA7",		"\xBA\x56" => "\xED\x8A\xA8",		"\xBA\x57" => "\xED\x8A\xA9",		"\xBA\x58" => "\xED\x8A\xAA",		"\xBA\x59" => "\xED\x8A\xAB",		"\xBA\x5A" => "\xED\x8A\xAD",		"\xBA\x61" => "\xED\x8A\xAE",		"\xBA\x62" => "\xED\x8A\xAF",		"\xBA\x63" => "\xED\x8A\xB0",		"\xBA\x64" => "\xED\x8A\xB2",		"\xBA\x65" => "\xED\x8A\xB3",		"\xBA\x66" => "\xED\x8A\xB4",		"\xBA\x67" => "\xED\x8A\xB5",		"\xBA\x68" => "\xED\x8A\xB6",		"\xBA\x69" => "\xED\x8A\xB7",		"\xBA\x6A" => "\xED\x8A\xBA",		"\xBA\x6B" => "\xED\x8A\xBB",		"\xBA\x6C" => "\xED\x8A\xBD",		"\xBA\x6D" => "\xED\x8A\xBE",		"\xBA\x6E" => "\xED\x8B\x81",		"\xBA\x6F" => "\xED\x8B\x83",		"\xBA\x70" => "\xED\x8B\x84",		"\xBA\x71" => "\xED\x8B\x85",		"\xBA\x72" => "\xED\x8B\x86",		"\xBA\x73" => "\xED\x8B\x87",		"\xBA\x74" => "\xED\x8B\x8A",		"\xBA\x75" => "\xED\x8B\x8C",		"\xBA\x76" => "\xED\x8B\x8D",		"\xBA\x77" => "\xED\x8B\x8E",		"\xBA\x78" => "\xED\x8B\x8F",		"\xBA\x79" => "\xED\x8B\x90",		"\xBA\x7A" => "\xED\x8B\x91",		"\xBA\x81" => "\xED\x8B\x92",		"\xBA\x82" => "\xED\x8B\x93",		"\xBA\x83" => "\xED\x8B\x95",		"\xBA\x84" => "\xED\x8B\x96",		"\xBA\x85" => "\xED\x8B\x97",		"\xBA\x86" => "\xED\x8B\x99",		"\xBA\x87" => "\xED\x8B\x9A",		"\xBA\x88" => "\xED\x8B\x9B",		"\xBA\x89" => "\xED\x8B\x9D",		"\xBA\x8A" => "\xED\x8B\x9E",		"\xBA\x8B" => "\xED\x8B\x9F",		"\xBA\x8C" => "\xED\x8B\xA0",		"\xBA\x8D" => "\xED\x8B\xA1",		"\xBA\x8E" => "\xED\x8B\xA2",		"\xBA\x8F" => "\xED\x8B\xA3",		"\xBA\x90" => "\xED\x8B\xA6",		"\xBA\x91" => "\xED\x8B\xA7",		"\xBA\x92" => "\xED\x8B\xA8",		"\xBA\x93" => "\xED\x8B\xA9",		"\xBA\x94" => "\xED\x8B\xAA",		"\xBA\x95" => "\xED\x8B\xAB",		"\xBA\x96" => "\xED\x8B\xAC",		"\xBA\x97" => "\xED\x8B\xAD",		"\xBA\x98" => "\xED\x8B\xAE",		"\xBA\x99" => "\xED\x8B\xAF",		"\xBA\x9A" => "\xED\x8B\xB2",		"\xBA\x9B" => "\xED\x8B\xB3",		"\xBA\x9C" => "\xED\x8B\xB5",		"\xBA\x9D" => "\xED\x8B\xB6",		"\xBA\x9E" => "\xED\x8B\xB7",		"\xBA\x9F" => "\xED\x8B\xB9",		"\xBA\xA0" => "\xED\x8B\xBA",		"\xBA\xA1" => "\xEB\xB2\x99",		"\xBA\xA2" => "\xEB\xB2\x9A",		"\xBA\xA3" => "\xEB\xB2\xA0",		"\xBA\xA4" => "\xEB\xB2\xA1",		"\xBA\xA5" => "\xEB\xB2\xA4",		"\xBA\xA6" => "\xEB\xB2\xA7",		"\xBA\xA7" => "\xEB\xB2\xA8",		"\xBA\xA8" => "\xEB\xB2\xB0",		"\xBA\xA9" => "\xEB\xB2\xB1",		"\xBA\xAA" => "\xEB\xB2\xB3",		"\xBA\xAB" => "\xEB\xB2\xB4",		"\xBA\xAC" => "\xEB\xB2\xB5",		"\xBA\xAD" => "\xEB\xB2\xBC",		"\xBA\xAE" => "\xEB\xB2\xBD",		"\xBA\xAF" => "\xEB\xB3\x80",		"\xBA\xB0" => "\xEB\xB3\x84",		"\xBA\xB1" => "\xEB\xB3\x8D",		"\xBA\xB2" => "\xEB\xB3\x8F",		"\xBA\xB3" => "\xEB\xB3\x90",		"\xBA\xB4" => "\xEB\xB3\x91",		"\xBA\xB5" => "\xEB\xB3\x95",		"\xBA\xB6" => "\xEB\xB3\x98",		"\xBA\xB7" => "\xEB\xB3\x9C",		"\xBA\xB8" => "\xEB\xB3\xB4",		"\xBA\xB9" => "\xEB\xB3\xB5",		"\xBA\xBA" => "\xEB\xB3\xB6",		"\xBA\xBB" => "\xEB\xB3\xB8",		"\xBA\xBC" => "\xEB\xB3\xBC",		"\xBA\xBD" => "\xEB\xB4\x84",		"\xBA\xBE" => "\xEB\xB4\x85",		"\xBA\xBF" => "\xEB\xB4\x87",		"\xBA\xC0" => "\xEB\xB4\x89",		"\xBA\xC1" => "\xEB\xB4\x90",		"\xBA\xC2" => "\xEB\xB4\x94",		"\xBA\xC3" => "\xEB\xB4\xA4",		"\xBA\xC4" => "\xEB\xB4\xAC",		"\xBA\xC5" => "\xEB\xB5\x80",		"\xBA\xC6" => "\xEB\xB5\x88",		"\xBA\xC7" => "\xEB\xB5\x89",		"\xBA\xC8" => "\xEB\xB5\x8C",		"\xBA\xC9" => "\xEB\xB5\x90",		"\xBA\xCA" => "\xEB\xB5\x98",		"\xBA\xCB" => "\xEB\xB5\x99",		"\xBA\xCC" => "\xEB\xB5\xA4",		"\xBA\xCD" => "\xEB\xB5\xA8",		"\xBA\xCE" => "\xEB\xB6\x80",		"\xBA\xCF" => "\xEB\xB6\x81",		"\xBA\xD0" => "\xEB\xB6\x84",		"\xBA\xD1" => "\xEB\xB6\x87",		"\xBA\xD2" => "\xEB\xB6\x88",		"\xBA\xD3" => "\xEB\xB6\x89",		"\xBA\xD4" => "\xEB\xB6\x8A",		"\xBA\xD5" => "\xEB\xB6\x90",		"\xBA\xD6" => "\xEB\xB6\x91",		"\xBA\xD7" => "\xEB\xB6\x93",		"\xBA\xD8" => "\xEB\xB6\x95",		"\xBA\xD9" => "\xEB\xB6\x99",		"\xBA\xDA" => "\xEB\xB6\x9A",		"\xBA\xDB" => "\xEB\xB6\x9C",		"\xBA\xDC" => "\xEB\xB6\xA4",		"\xBA\xDD" => "\xEB\xB6\xB0",		"\xBA\xDE" => "\xEB\xB6\xB8",		"\xBA\xDF" => "\xEB\xB7\x94",		"\xBA\xE0" => "\xEB\xB7\x95",		"\xBA\xE1" => "\xEB\xB7\x98",		"\xBA\xE2" => "\xEB\xB7\x9C",		"\xBA\xE3" => "\xEB\xB7\xA9",		"\xBA\xE4" => "\xEB\xB7\xB0",		"\xBA\xE5" => "\xEB\xB7\xB4",		"\xBA\xE6" => "\xEB\xB7\xB8",		"\xBA\xE7" => "\xEB\xB8\x80",		"\xBA\xE8" => "\xEB\xB8\x83",		"\xBA\xE9" => "\xEB\xB8\x85",		"\xBA\xEA" => "\xEB\xB8\x8C",		"\xBA\xEB" => "\xEB\xB8\x8D",		"\xBA\xEC" => "\xEB\xB8\x90",		"\xBA\xED" => "\xEB\xB8\x94",		"\xBA\xEE" => "\xEB\xB8\x9C",		"\xBA\xEF" => "\xEB\xB8\x9D",		"\xBA\xF0" => "\xEB\xB8\x9F",		"\xBA\xF1" => "\xEB\xB9\x84",		"\xBA\xF2" => "\xEB\xB9\x85",		"\xBA\xF3" => "\xEB\xB9\x88",		"\xBA\xF4" => "\xEB\xB9\x8C",		"\xBA\xF5" => "\xEB\xB9\x8E",		"\xBA\xF6" => "\xEB\xB9\x94",		"\xBA\xF7" => "\xEB\xB9\x95",		"\xBA\xF8" => "\xEB\xB9\x97",		"\xBA\xF9" => "\xEB\xB9\x99",		"\xBA\xFA" => "\xEB\xB9\x9A",		"\xBA\xFB" => "\xEB\xB9\x9B",		"\xBA\xFC" => "\xEB\xB9\xA0",		"\xBA\xFD" => "\xEB\xB9\xA1",		"\xBA\xFE" => "\xEB\xB9\xA4",		"\xBB\x41" => "\xED\x8B\xBB",		"\xBB\x42" => "\xED\x8B\xBC",		"\xBB\x43" => "\xED\x8B\xBD",		"\xBB\x44" => "\xED\x8B\xBE",		"\xBB\x45" => "\xED\x8B\xBF",		"\xBB\x46" => "\xED\x8C\x82",		"\xBB\x47" => "\xED\x8C\x84",		"\xBB\x48" => "\xED\x8C\x86",		"\xBB\x49" => "\xED\x8C\x87",		"\xBB\x4A" => "\xED\x8C\x88",		"\xBB\x4B" => "\xED\x8C\x89",		"\xBB\x4C" => "\xED\x8C\x8A",		"\xBB\x4D" => "\xED\x8C\x8B",		"\xBB\x4E" => "\xED\x8C\x8F",		"\xBB\x4F" => "\xED\x8C\x91",		"\xBB\x50" => "\xED\x8C\x92",		"\xBB\x51" => "\xED\x8C\x93",		"\xBB\x52" => "\xED\x8C\x95",		"\xBB\x53" => "\xED\x8C\x97",		"\xBB\x54" => "\xED\x8C\x98",		"\xBB\x55" => "\xED\x8C\x99",		"\xBB\x56" => "\xED\x8C\x9A",		"\xBB\x57" => "\xED\x8C\x9B",		"\xBB\x58" => "\xED\x8C\x9E",		"\xBB\x59" => "\xED\x8C\xA2",		"\xBB\x5A" => "\xED\x8C\xA3",		"\xBB\x61" => "\xED\x8C\xA4",		"\xBB\x62" => "\xED\x8C\xA6",		"\xBB\x63" => "\xED\x8C\xA7",		"\xBB\x64" => "\xED\x8C\xAA",		"\xBB\x65" => "\xED\x8C\xAB",		"\xBB\x66" => "\xED\x8C\xAD",		"\xBB\x67" => "\xED\x8C\xAE",		"\xBB\x68" => "\xED\x8C\xAF",		"\xBB\x69" => "\xED\x8C\xB1",		"\xBB\x6A" => "\xED\x8C\xB2",		"\xBB\x6B" => "\xED\x8C\xB3",		"\xBB\x6C" => "\xED\x8C\xB4",		"\xBB\x6D" => "\xED\x8C\xB5",		"\xBB\x6E" => "\xED\x8C\xB6",		"\xBB\x6F" => "\xED\x8C\xB7",		"\xBB\x70" => "\xED\x8C\xBA",		"\xBB\x71" => "\xED\x8C\xBE",		"\xBB\x72" => "\xED\x8C\xBF",		"\xBB\x73" => "\xED\x8D\x80",		"\xBB\x74" => "\xED\x8D\x81",		"\xBB\x75" => "\xED\x8D\x82",		"\xBB\x76" => "\xED\x8D\x83",		"\xBB\x77" => "\xED\x8D\x86",		"\xBB\x78" => "\xED\x8D\x87",		"\xBB\x79" => "\xED\x8D\x88",		"\xBB\x7A" => "\xED\x8D\x89",		"\xBB\x81" => "\xED\x8D\x8A",		"\xBB\x82" => "\xED\x8D\x8B",		"\xBB\x83" => "\xED\x8D\x8C",		"\xBB\x84" => "\xED\x8D\x8D",		"\xBB\x85" => "\xED\x8D\x8E",		"\xBB\x86" => "\xED\x8D\x8F",		"\xBB\x87" => "\xED\x8D\x90",		"\xBB\x88" => "\xED\x8D\x91",		"\xBB\x89" => "\xED\x8D\x92",		"\xBB\x8A" => "\xED\x8D\x93",		"\xBB\x8B" => "\xED\x8D\x94",		"\xBB\x8C" => "\xED\x8D\x95",		"\xBB\x8D" => "\xED\x8D\x96",		"\xBB\x8E" => "\xED\x8D\x97",		"\xBB\x8F" => "\xED\x8D\x98",		"\xBB\x90" => "\xED\x8D\x99",		"\xBB\x91" => "\xED\x8D\x9A",		"\xBB\x92" => "\xED\x8D\x9B",		"\xBB\x93" => "\xED\x8D\x9C",		"\xBB\x94" => "\xED\x8D\x9D",		"\xBB\x95" => "\xED\x8D\x9E",		"\xBB\x96" => "\xED\x8D\x9F",		"\xBB\x97" => "\xED\x8D\xA0",		"\xBB\x98" => "\xED\x8D\xA1",		"\xBB\x99" => "\xED\x8D\xA2",		"\xBB\x9A" => "\xED\x8D\xA3",		"\xBB\x9B" => "\xED\x8D\xA4",		"\xBB\x9C" => "\xED\x8D\xA5",		"\xBB\x9D" => "\xED\x8D\xA6",		"\xBB\x9E" => "\xED\x8D\xA7",		"\xBB\x9F" => "\xED\x8D\xA8",		"\xBB\xA0" => "\xED\x8D\xA9",		"\xBB\xA1" => "\xEB\xB9\xA8",		"\xBB\xA2" => "\xEB\xB9\xAA",		"\xBB\xA3" => "\xEB\xB9\xB0",		"\xBB\xA4" => "\xEB\xB9\xB1",		"\xBB\xA5" => "\xEB\xB9\xB3",		"\xBB\xA6" => "\xEB\xB9\xB4",		"\xBB\xA7" => "\xEB\xB9\xB5",		"\xBB\xA8" => "\xEB\xB9\xBB",		"\xBB\xA9" => "\xEB\xB9\xBC",		"\xBB\xAA" => "\xEB\xB9\xBD",		"\xBB\xAB" => "\xEB\xBA\x80",		"\xBB\xAC" => "\xEB\xBA\x84",		"\xBB\xAD" => "\xEB\xBA\x8C",		"\xBB\xAE" => "\xEB\xBA\x8D",		"\xBB\xAF" => "\xEB\xBA\x8F",		"\xBB\xB0" => "\xEB\xBA\x90",		"\xBB\xB1" => "\xEB\xBA\x91",		"\xBB\xB2" => "\xEB\xBA\x98",		"\xBB\xB3" => "\xEB\xBA\x99",		"\xBB\xB4" => "\xEB\xBA\xA8",		"\xBB\xB5" => "\xEB\xBB\x90",		"\xBB\xB6" => "\xEB\xBB\x91",		"\xBB\xB7" => "\xEB\xBB\x94",		"\xBB\xB8" => "\xEB\xBB\x97",		"\xBB\xB9" => "\xEB\xBB\x98",		"\xBB\xBA" => "\xEB\xBB\xA0",		"\xBB\xBB" => "\xEB\xBB\xA3",		"\xBB\xBC" => "\xEB\xBB\xA4",		"\xBB\xBD" => "\xEB\xBB\xA5",		"\xBB\xBE" => "\xEB\xBB\xAC",		"\xBB\xBF" => "\xEB\xBC\x81",		"\xBB\xC0" => "\xEB\xBC\x88",		"\xBB\xC1" => "\xEB\xBC\x89",		"\xBB\xC2" => "\xEB\xBC\x98",		"\xBB\xC3" => "\xEB\xBC\x99",		"\xBB\xC4" => "\xEB\xBC\x9B",		"\xBB\xC5" => "\xEB\xBC\x9C",		"\xBB\xC6" => "\xEB\xBC\x9D",		"\xBB\xC7" => "\xEB\xBD\x80",		"\xBB\xC8" => "\xEB\xBD\x81",		"\xBB\xC9" => "\xEB\xBD\x84",		"\xBB\xCA" => "\xEB\xBD\x88",		"\xBB\xCB" => "\xEB\xBD\x90",		"\xBB\xCC" => "\xEB\xBD\x91",		"\xBB\xCD" => "\xEB\xBD\x95",		"\xBB\xCE" => "\xEB\xBE\x94",		"\xBB\xCF" => "\xEB\xBE\xB0",		"\xBB\xD0" => "\xEB\xBF\x85",		"\xBB\xD1" => "\xEB\xBF\x8C",		"\xBB\xD2" => "\xEB\xBF\x8D",		"\xBB\xD3" => "\xEB\xBF\x90",		"\xBB\xD4" => "\xEB\xBF\x94",		"\xBB\xD5" => "\xEB\xBF\x9C",		"\xBB\xD6" => "\xEB\xBF\x9F",		"\xBB\xD7" => "\xEB\xBF\xA1",		"\xBB\xD8" => "\xEC\x80\xBC",		"\xBB\xD9" => "\xEC\x81\x91",		"\xBB\xDA" => "\xEC\x81\x98",		"\xBB\xDB" => "\xEC\x81\x9C",		"\xBB\xDC" => "\xEC\x81\xA0",		"\xBB\xDD" => "\xEC\x81\xA8",		"\xBB\xDE" => "\xEC\x81\xA9",		"\xBB\xDF" => "\xEC\x82\x90",		"\xBB\xE0" => "\xEC\x82\x91",		"\xBB\xE1" => "\xEC\x82\x94",		"\xBB\xE2" => "\xEC\x82\x98",		"\xBB\xE3" => "\xEC\x82\xA0",		"\xBB\xE4" => "\xEC\x82\xA1",		"\xBB\xE5" => "\xEC\x82\xA3",		"\xBB\xE6" => "\xEC\x82\xA5",		"\xBB\xE7" => "\xEC\x82\xAC",		"\xBB\xE8" => "\xEC\x82\xAD",		"\xBB\xE9" => "\xEC\x82\xAF",		"\xBB\xEA" => "\xEC\x82\xB0",		"\xBB\xEB" => "\xEC\x82\xB3",		"\xBB\xEC" => "\xEC\x82\xB4",		"\xBB\xED" => "\xEC\x82\xB5",		"\xBB\xEE" => "\xEC\x82\xB6",		"\xBB\xEF" => "\xEC\x82\xBC",		"\xBB\xF0" => "\xEC\x82\xBD",		"\xBB\xF1" => "\xEC\x82\xBF",		"\xBB\xF2" => "\xEC\x83\x80",		"\xBB\xF3" => "\xEC\x83\x81",		"\xBB\xF4" => "\xEC\x83\x85",		"\xBB\xF5" => "\xEC\x83\x88",		"\xBB\xF6" => "\xEC\x83\x89",		"\xBB\xF7" => "\xEC\x83\x8C",		"\xBB\xF8" => "\xEC\x83\x90",		"\xBB\xF9" => "\xEC\x83\x98",		"\xBB\xFA" => "\xEC\x83\x99",		"\xBB\xFB" => "\xEC\x83\x9B",		"\xBB\xFC" => "\xEC\x83\x9C",		"\xBB\xFD" => "\xEC\x83\x9D",		"\xBB\xFE" => "\xEC\x83\xA4",		"\xBC\x41" => "\xED\x8D\xAA",		"\xBC\x42" => "\xED\x8D\xAB",		"\xBC\x43" => "\xED\x8D\xAC",		"\xBC\x44" => "\xED\x8D\xAD",		"\xBC\x45" => "\xED\x8D\xAE",		"\xBC\x46" => "\xED\x8D\xAF",		"\xBC\x47" => "\xED\x8D\xB0",		"\xBC\x48" => "\xED\x8D\xB1",		"\xBC\x49" => "\xED\x8D\xB2",		"\xBC\x4A" => "\xED\x8D\xB3",		"\xBC\x4B" => "\xED\x8D\xB4",		"\xBC\x4C" => "\xED\x8D\xB5",		"\xBC\x4D" => "\xED\x8D\xB6",		"\xBC\x4E" => "\xED\x8D\xB7",		"\xBC\x4F" => "\xED\x8D\xB8",		"\xBC\x50" => "\xED\x8D\xB9",		"\xBC\x51" => "\xED\x8D\xBA",		"\xBC\x52" => "\xED\x8D\xBB",		"\xBC\x53" => "\xED\x8D\xBE",		"\xBC\x54" => "\xED\x8D\xBF",		"\xBC\x55" => "\xED\x8E\x81",		"\xBC\x56" => "\xED\x8E\x82",		"\xBC\x57" => "\xED\x8E\x83",		"\xBC\x58" => "\xED\x8E\x85",		"\xBC\x59" => "\xED\x8E\x86",		"\xBC\x5A" => "\xED\x8E\x87",		"\xBC\x61" => "\xED\x8E\x88",		"\xBC\x62" => "\xED\x8E\x89",		"\xBC\x63" => "\xED\x8E\x8A",		"\xBC\x64" => "\xED\x8E\x8B",		"\xBC\x65" => "\xED\x8E\x8E",		"\xBC\x66" => "\xED\x8E\x92",		"\xBC\x67" => "\xED\x8E\x93",		"\xBC\x68" => "\xED\x8E\x94",		"\xBC\x69" => "\xED\x8E\x95",		"\xBC\x6A" => "\xED\x8E\x96",		"\xBC\x6B" => "\xED\x8E\x97",		"\xBC\x6C" => "\xED\x8E\x9A",		"\xBC\x6D" => "\xED\x8E\x9B",		"\xBC\x6E" => "\xED\x8E\x9D",		"\xBC\x6F" => "\xED\x8E\x9E",		"\xBC\x70" => "\xED\x8E\x9F",		"\xBC\x71" => "\xED\x8E\xA1",		"\xBC\x72" => "\xED\x8E\xA2",		"\xBC\x73" => "\xED\x8E\xA3",		"\xBC\x74" => "\xED\x8E\xA4",		"\xBC\x75" => "\xED\x8E\xA5",		"\xBC\x76" => "\xED\x8E\xA6",		"\xBC\x77" => "\xED\x8E\xA7",		"\xBC\x78" => "\xED\x8E\xAA",		"\xBC\x79" => "\xED\x8E\xAC",		"\xBC\x7A" => "\xED\x8E\xAE",		"\xBC\x81" => "\xED\x8E\xAF",		"\xBC\x82" => "\xED\x8E\xB0",		"\xBC\x83" => "\xED\x8E\xB1",		"\xBC\x84" => "\xED\x8E\xB2",		"\xBC\x85" => "\xED\x8E\xB3",		"\xBC\x86" => "\xED\x8E\xB5",		"\xBC\x87" => "\xED\x8E\xB6",		"\xBC\x88" => "\xED\x8E\xB7",		"\xBC\x89" => "\xED\x8E\xB9",		"\xBC\x8A" => "\xED\x8E\xBA",		"\xBC\x8B" => "\xED\x8E\xBB",		"\xBC\x8C" => "\xED\x8E\xBD",		"\xBC\x8D" => "\xED\x8E\xBE",		"\xBC\x8E" => "\xED\x8E\xBF",		"\xBC\x8F" => "\xED\x8F\x80",		"\xBC\x90" => "\xED\x8F\x81",		"\xBC\x91" => "\xED\x8F\x82",		"\xBC\x92" => "\xED\x8F\x83",		"\xBC\x93" => "\xED\x8F\x86",		"\xBC\x94" => "\xED\x8F\x87",		"\xBC\x95" => "\xED\x8F\x8A",		"\xBC\x96" => "\xED\x8F\x8B",		"\xBC\x97" => "\xED\x8F\x8C",		"\xBC\x98" => "\xED\x8F\x8D",		"\xBC\x99" => "\xED\x8F\x8E",		"\xBC\x9A" => "\xED\x8F\x8F",		"\xBC\x9B" => "\xED\x8F\x91",		"\xBC\x9C" => "\xED\x8F\x92",		"\xBC\x9D" => "\xED\x8F\x93",		"\xBC\x9E" => "\xED\x8F\x94",		"\xBC\x9F" => "\xED\x8F\x95",		"\xBC\xA0" => "\xED\x8F\x96",		"\xBC\xA1" => "\xEC\x83\xA5",		"\xBC\xA2" => "\xEC\x83\xA8",		"\xBC\xA3" => "\xEC\x83\xAC",		"\xBC\xA4" => "\xEC\x83\xB4",		"\xBC\xA5" => "\xEC\x83\xB5",		"\xBC\xA6" => "\xEC\x83\xB7",		"\xBC\xA7" => "\xEC\x83\xB9",		"\xBC\xA8" => "\xEC\x84\x80",		"\xBC\xA9" => "\xEC\x84\x84",		"\xBC\xAA" => "\xEC\x84\x88",		"\xBC\xAB" => "\xEC\x84\x90",		"\xBC\xAC" => "\xEC\x84\x95",		"\xBC\xAD" => "\xEC\x84\x9C",		"\xBC\xAE" => "\xEC\x84\x9D",		"\xBC\xAF" => "\xEC\x84\x9E",		"\xBC\xB0" => "\xEC\x84\x9F",		"\xBC\xB1" => "\xEC\x84\xA0",		"\xBC\xB2" => "\xEC\x84\xA3",		"\xBC\xB3" => "\xEC\x84\xA4",		"\xBC\xB4" => "\xEC\x84\xA6",		"\xBC\xB5" => "\xEC\x84\xA7",		"\xBC\xB6" => "\xEC\x84\xAC",		"\xBC\xB7" => "\xEC\x84\xAD",		"\xBC\xB8" => "\xEC\x84\xAF",		"\xBC\xB9" => "\xEC\x84\xB0",		"\xBC\xBA" => "\xEC\x84\xB1",		"\xBC\xBB" => "\xEC\x84\xB6",		"\xBC\xBC" => "\xEC\x84\xB8",		"\xBC\xBD" => "\xEC\x84\xB9",		"\xBC\xBE" => "\xEC\x84\xBC",		"\xBC\xBF" => "\xEC\x85\x80",		"\xBC\xC0" => "\xEC\x85\x88",		"\xBC\xC1" => "\xEC\x85\x89",		"\xBC\xC2" => "\xEC\x85\x8B",		"\xBC\xC3" => "\xEC\x85\x8C",		"\xBC\xC4" => "\xEC\x85\x8D",		"\xBC\xC5" => "\xEC\x85\x94",		"\xBC\xC6" => "\xEC\x85\x95",		"\xBC\xC7" => "\xEC\x85\x98",		"\xBC\xC8" => "\xEC\x85\x9C",		"\xBC\xC9" => "\xEC\x85\xA4",		"\xBC\xCA" => "\xEC\x85\xA5",		"\xBC\xCB" => "\xEC\x85\xA7",		"\xBC\xCC" => "\xEC\x85\xA8",		"\xBC\xCD" => "\xEC\x85\xA9",		"\xBC\xCE" => "\xEC\x85\xB0",		"\xBC\xCF" => "\xEC\x85\xB4",		"\xBC\xD0" => "\xEC\x85\xB8",		"\xBC\xD1" => "\xEC\x86\x85",		"\xBC\xD2" => "\xEC\x86\x8C",		"\xBC\xD3" => "\xEC\x86\x8D",		"\xBC\xD4" => "\xEC\x86\x8E",		"\xBC\xD5" => "\xEC\x86\x90",		"\xBC\xD6" => "\xEC\x86\x94",		"\xBC\xD7" => "\xEC\x86\x96",		"\xBC\xD8" => "\xEC\x86\x9C",		"\xBC\xD9" => "\xEC\x86\x9D",		"\xBC\xDA" => "\xEC\x86\x9F",		"\xBC\xDB" => "\xEC\x86\xA1",		"\xBC\xDC" => "\xEC\x86\xA5",		"\xBC\xDD" => "\xEC\x86\xA8",		"\xBC\xDE" => "\xEC\x86\xA9",		"\xBC\xDF" => "\xEC\x86\xAC",		"\xBC\xE0" => "\xEC\x86\xB0",		"\xBC\xE1" => "\xEC\x86\xBD",		"\xBC\xE2" => "\xEC\x87\x84",		"\xBC\xE3" => "\xEC\x87\x88",		"\xBC\xE4" => "\xEC\x87\x8C",		"\xBC\xE5" => "\xEC\x87\x94",		"\xBC\xE6" => "\xEC\x87\x97",		"\xBC\xE7" => "\xEC\x87\x98",		"\xBC\xE8" => "\xEC\x87\xA0",		"\xBC\xE9" => "\xEC\x87\xA4",		"\xBC\xEA" => "\xEC\x87\xA8",		"\xBC\xEB" => "\xEC\x87\xB0",		"\xBC\xEC" => "\xEC\x87\xB1",		"\xBC\xED" => "\xEC\x87\xB3",		"\xBC\xEE" => "\xEC\x87\xBC",		"\xBC\xEF" => "\xEC\x87\xBD",		"\xBC\xF0" => "\xEC\x88\x80",		"\xBC\xF1" => "\xEC\x88\x84",		"\xBC\xF2" => "\xEC\x88\x8C",		"\xBC\xF3" => "\xEC\x88\x8D",		"\xBC\xF4" => "\xEC\x88\x8F",		"\xBC\xF5" => "\xEC\x88\x91",		"\xBC\xF6" => "\xEC\x88\x98",		"\xBC\xF7" => "\xEC\x88\x99",		"\xBC\xF8" => "\xEC\x88\x9C",		"\xBC\xF9" => "\xEC\x88\x9F",		"\xBC\xFA" => "\xEC\x88\xA0",		"\xBC\xFB" => "\xEC\x88\xA8",		"\xBC\xFC" => "\xEC\x88\xA9",		"\xBC\xFD" => "\xEC\x88\xAB",		"\xBC\xFE" => "\xEC\x88\xAD",		"\xBD\x41" => "\xED\x8F\x97",		"\xBD\x42" => "\xED\x8F\x99",		"\xBD\x43" => "\xED\x8F\x9A",		"\xBD\x44" => "\xED\x8F\x9B",		"\xBD\x45" => "\xED\x8F\x9C",		"\xBD\x46" => "\xED\x8F\x9D",		"\xBD\x47" => "\xED\x8F\x9E",		"\xBD\x48" => "\xED\x8F\x9F",		"\xBD\x49" => "\xED\x8F\xA0",		"\xBD\x4A" => "\xED\x8F\xA2",		"\xBD\x4B" => "\xED\x8F\xA4",		"\xBD\x4C" => "\xED\x8F\xA5",		"\xBD\x4D" => "\xED\x8F\xA6",		"\xBD\x4E" => "\xED\x8F\xA7",		"\xBD\x4F" => "\xED\x8F\xA8",		"\xBD\x50" => "\xED\x8F\xA9",		"\xBD\x51" => "\xED\x8F\xAA",		"\xBD\x52" => "\xED\x8F\xAB",		"\xBD\x53" => "\xED\x8F\xAE",		"\xBD\x54" => "\xED\x8F\xAF",		"\xBD\x55" => "\xED\x8F\xB1",		"\xBD\x56" => "\xED\x8F\xB2",		"\xBD\x57" => "\xED\x8F\xB3",		"\xBD\x58" => "\xED\x8F\xB5",		"\xBD\x59" => "\xED\x8F\xB6",		"\xBD\x5A" => "\xED\x8F\xB7",		"\xBD\x61" => "\xED\x8F\xB8",		"\xBD\x62" => "\xED\x8F\xB9",		"\xBD\x63" => "\xED\x8F\xBA",		"\xBD\x64" => "\xED\x8F\xBB",		"\xBD\x65" => "\xED\x8F\xBE",		"\xBD\x66" => "\xED\x90\x80",		"\xBD\x67" => "\xED\x90\x82",		"\xBD\x68" => "\xED\x90\x83",		"\xBD\x69" => "\xED\x90\x84",		"\xBD\x6A" => "\xED\x90\x85",		"\xBD\x6B" => "\xED\x90\x86",		"\xBD\x6C" => "\xED\x90\x87",		"\xBD\x6D" => "\xED\x90\x89",		"\xBD\x6E" => "\xED\x90\x8A",		"\xBD\x6F" => "\xED\x90\x8B",		"\xBD\x70" => "\xED\x90\x8C",		"\xBD\x71" => "\xED\x90\x8D",		"\xBD\x72" => "\xED\x90\x8E",		"\xBD\x73" => "\xED\x90\x8F",		"\xBD\x74" => "\xED\x90\x90",		"\xBD\x75" => "\xED\x90\x91",		"\xBD\x76" => "\xED\x90\x92",		"\xBD\x77" => "\xED\x90\x93",		"\xBD\x78" => "\xED\x90\x94",		"\xBD\x79" => "\xED\x90\x95",		"\xBD\x7A" => "\xED\x90\x96",		"\xBD\x81" => "\xED\x90\x97",		"\xBD\x82" => "\xED\x90\x98",		"\xBD\x83" => "\xED\x90\x99",		"\xBD\x84" => "\xED\x90\x9A",		"\xBD\x85" => "\xED\x90\x9B",		"\xBD\x86" => "\xED\x90\x9C",		"\xBD\x87" => "\xED\x90\x9E",		"\xBD\x88" => "\xED\x90\x9F",		"\xBD\x89" => "\xED\x90\xA0",		"\xBD\x8A" => "\xED\x90\xA1",		"\xBD\x8B" => "\xED\x90\xA2",		"\xBD\x8C" => "\xED\x90\xA3",		"\xBD\x8D" => "\xED\x90\xA4",		"\xBD\x8E" => "\xED\x90\xA5",		"\xBD\x8F" => "\xED\x90\xA6",		"\xBD\x90" => "\xED\x90\xA7",		"\xBD\x91" => "\xED\x90\xA8",		"\xBD\x92" => "\xED\x90\xA9",		"\xBD\x93" => "\xED\x90\xAA",		"\xBD\x94" => "\xED\x90\xAB",		"\xBD\x95" => "\xED\x90\xAC",		"\xBD\x96" => "\xED\x90\xAD",		"\xBD\x97" => "\xED\x90\xAE",		"\xBD\x98" => "\xED\x90\xAF",		"\xBD\x99" => "\xED\x90\xB0",		"\xBD\x9A" => "\xED\x90\xB1",		"\xBD\x9B" => "\xED\x90\xB2",		"\xBD\x9C" => "\xED\x90\xB3",		"\xBD\x9D" => "\xED\x90\xB4",		"\xBD\x9E" => "\xED\x90\xB5",		"\xBD\x9F" => "\xED\x90\xB6",		"\xBD\xA0" => "\xED\x90\xB7",		"\xBD\xA1" => "\xEC\x88\xAF",		"\xBD\xA2" => "\xEC\x88\xB1",		"\xBD\xA3" => "\xEC\x88\xB2",		"\xBD\xA4" => "\xEC\x88\xB4",		"\xBD\xA5" => "\xEC\x89\x88",		"\xBD\xA6" => "\xEC\x89\x90",		"\xBD\xA7" => "\xEC\x89\x91",		"\xBD\xA8" => "\xEC\x89\x94",		"\xBD\xA9" => "\xEC\x89\x98",		"\xBD\xAA" => "\xEC\x89\xA0",		"\xBD\xAB" => "\xEC\x89\xA5",		"\xBD\xAC" => "\xEC\x89\xAC",		"\xBD\xAD" => "\xEC\x89\xAD",		"\xBD\xAE" => "\xEC\x89\xB0",		"\xBD\xAF" => "\xEC\x89\xB4",		"\xBD\xB0" => "\xEC\x89\xBC",		"\xBD\xB1" => "\xEC\x89\xBD",		"\xBD\xB2" => "\xEC\x89\xBF",		"\xBD\xB3" => "\xEC\x8A\x81",		"\xBD\xB4" => "\xEC\x8A\x88",		"\xBD\xB5" => "\xEC\x8A\x89",		"\xBD\xB6" => "\xEC\x8A\x90",		"\xBD\xB7" => "\xEC\x8A\x98",		"\xBD\xB8" => "\xEC\x8A\x9B",		"\xBD\xB9" => "\xEC\x8A\x9D",		"\xBD\xBA" => "\xEC\x8A\xA4",		"\xBD\xBB" => "\xEC\x8A\xA5",		"\xBD\xBC" => "\xEC\x8A\xA8",		"\xBD\xBD" => "\xEC\x8A\xAC",		"\xBD\xBE" => "\xEC\x8A\xAD",		"\xBD\xBF" => "\xEC\x8A\xB4",		"\xBD\xC0" => "\xEC\x8A\xB5",		"\xBD\xC1" => "\xEC\x8A\xB7",		"\xBD\xC2" => "\xEC\x8A\xB9",		"\xBD\xC3" => "\xEC\x8B\x9C",		"\xBD\xC4" => "\xEC\x8B\x9D",		"\xBD\xC5" => "\xEC\x8B\xA0",		"\xBD\xC6" => "\xEC\x8B\xA3",		"\xBD\xC7" => "\xEC\x8B\xA4",		"\xBD\xC8" => "\xEC\x8B\xAB",		"\xBD\xC9" => "\xEC\x8B\xAC",		"\xBD\xCA" => "\xEC\x8B\xAD",		"\xBD\xCB" => "\xEC\x8B\xAF",		"\xBD\xCC" => "\xEC\x8B\xB1",		"\xBD\xCD" => "\xEC\x8B\xB6",		"\xBD\xCE" => "\xEC\x8B\xB8",		"\xBD\xCF" => "\xEC\x8B\xB9",		"\xBD\xD0" => "\xEC\x8B\xBB",		"\xBD\xD1" => "\xEC\x8B\xBC",		"\xBD\xD2" => "\xEC\x8C\x80",		"\xBD\xD3" => "\xEC\x8C\x88",		"\xBD\xD4" => "\xEC\x8C\x89",		"\xBD\xD5" => "\xEC\x8C\x8C",		"\xBD\xD6" => "\xEC\x8C\x8D",		"\xBD\xD7" => "\xEC\x8C\x93",		"\xBD\xD8" => "\xEC\x8C\x94",		"\xBD\xD9" => "\xEC\x8C\x95",		"\xBD\xDA" => "\xEC\x8C\x98",		"\xBD\xDB" => "\xEC\x8C\x9C",		"\xBD\xDC" => "\xEC\x8C\xA4",		"\xBD\xDD" => "\xEC\x8C\xA5",		"\xBD\xDE" => "\xEC\x8C\xA8",		"\xBD\xDF" => "\xEC\x8C\xA9",		"\xBD\xE0" => "\xEC\x8D\x85",		"\xBD\xE1" => "\xEC\x8D\xA8",		"\xBD\xE2" => "\xEC\x8D\xA9",		"\xBD\xE3" => "\xEC\x8D\xAC",		"\xBD\xE4" => "\xEC\x8D\xB0",		"\xBD\xE5" => "\xEC\x8D\xB2",		"\xBD\xE6" => "\xEC\x8D\xB8",		"\xBD\xE7" => "\xEC\x8D\xB9",		"\xBD\xE8" => "\xEC\x8D\xBC",		"\xBD\xE9" => "\xEC\x8D\xBD",		"\xBD\xEA" => "\xEC\x8E\x84",		"\xBD\xEB" => "\xEC\x8E\x88",		"\xBD\xEC" => "\xEC\x8E\x8C",		"\xBD\xED" => "\xEC\x8F\x80",		"\xBD\xEE" => "\xEC\x8F\x98",		"\xBD\xEF" => "\xEC\x8F\x99",		"\xBD\xF0" => "\xEC\x8F\x9C",		"\xBD\xF1" => "\xEC\x8F\x9F",		"\xBD\xF2" => "\xEC\x8F\xA0",		"\xBD\xF3" => "\xEC\x8F\xA2",		"\xBD\xF4" => "\xEC\x8F\xA8",		"\xBD\xF5" => "\xEC\x8F\xA9",		"\xBD\xF6" => "\xEC\x8F\xAD",		"\xBD\xF7" => "\xEC\x8F\xB4",		"\xBD\xF8" => "\xEC\x8F\xB5",		"\xBD\xF9" => "\xEC\x8F\xB8",		"\xBD\xFA" => "\xEC\x90\x88",		"\xBD\xFB" => "\xEC\x90\x90",		"\xBD\xFC" => "\xEC\x90\xA4",		"\xBD\xFD" => "\xEC\x90\xAC",		"\xBD\xFE" => "\xEC\x90\xB0",		"\xBE\x41" => "\xED\x90\xB8",		"\xBE\x42" => "\xED\x90\xB9",		"\xBE\x43" => "\xED\x90\xBA",		"\xBE\x44" => "\xED\x90\xBB",		"\xBE\x45" => "\xED\x90\xBC",		"\xBE\x46" => "\xED\x90\xBD",		"\xBE\x47" => "\xED\x90\xBE",		"\xBE\x48" => "\xED\x90\xBF",		"\xBE\x49" => "\xED\x91\x81",		"\xBE\x4A" => "\xED\x91\x82",		"\xBE\x4B" => "\xED\x91\x83",		"\xBE\x4C" => "\xED\x91\x85",		"\xBE\x4D" => "\xED\x91\x86",		"\xBE\x4E" => "\xED\x91\x87",		"\xBE\x4F" => "\xED\x91\x88",		"\xBE\x50" => "\xED\x91\x89",		"\xBE\x51" => "\xED\x91\x8A",		"\xBE\x52" => "\xED\x91\x8B",		"\xBE\x53" => "\xED\x91\x8C",		"\xBE\x54" => "\xED\x91\x8D",		"\xBE\x55" => "\xED\x91\x8E",		"\xBE\x56" => "\xED\x91\x8F",		"\xBE\x57" => "\xED\x91\x90",		"\xBE\x58" => "\xED\x91\x91",		"\xBE\x59" => "\xED\x91\x92",		"\xBE\x5A" => "\xED\x91\x93",		"\xBE\x61" => "\xED\x91\x94",		"\xBE\x62" => "\xED\x91\x95",		"\xBE\x63" => "\xED\x91\x96",		"\xBE\x64" => "\xED\x91\x97",		"\xBE\x65" => "\xED\x91\x98",		"\xBE\x66" => "\xED\x91\x99",		"\xBE\x67" => "\xED\x91\x9A",		"\xBE\x68" => "\xED\x91\x9B",		"\xBE\x69" => "\xED\x91\x9D",		"\xBE\x6A" => "\xED\x91\x9E",		"\xBE\x6B" => "\xED\x91\x9F",		"\xBE\x6C" => "\xED\x91\xA1",		"\xBE\x6D" => "\xED\x91\xA2",		"\xBE\x6E" => "\xED\x91\xA3",		"\xBE\x6F" => "\xED\x91\xA5",		"\xBE\x70" => "\xED\x91\xA6",		"\xBE\x71" => "\xED\x91\xA7",		"\xBE\x72" => "\xED\x91\xA8",		"\xBE\x73" => "\xED\x91\xA9",		"\xBE\x74" => "\xED\x91\xAA",		"\xBE\x75" => "\xED\x91\xAB",		"\xBE\x76" => "\xED\x91\xAC",		"\xBE\x77" => "\xED\x91\xAE",		"\xBE\x78" => "\xED\x91\xB0",		"\xBE\x79" => "\xED\x91\xB1",		"\xBE\x7A" => "\xED\x91\xB2",		"\xBE\x81" => "\xED\x91\xB3",		"\xBE\x82" => "\xED\x91\xB4",		"\xBE\x83" => "\xED\x91\xB5",		"\xBE\x84" => "\xED\x91\xB6",		"\xBE\x85" => "\xED\x91\xB7",		"\xBE\x86" => "\xED\x91\xBA",		"\xBE\x87" => "\xED\x91\xBB",		"\xBE\x88" => "\xED\x91\xBD",		"\xBE\x89" => "\xED\x91\xBE",		"\xBE\x8A" => "\xED\x92\x81",		"\xBE\x8B" => "\xED\x92\x83",		"\xBE\x8C" => "\xED\x92\x84",		"\xBE\x8D" => "\xED\x92\x85",		"\xBE\x8E" => "\xED\x92\x86",		"\xBE\x8F" => "\xED\x92\x87",		"\xBE\x90" => "\xED\x92\x8A",		"\xBE\x91" => "\xED\x92\x8C",		"\xBE\x92" => "\xED\x92\x8E",		"\xBE\x93" => "\xED\x92\x8F",		"\xBE\x94" => "\xED\x92\x90",		"\xBE\x95" => "\xED\x92\x91",		"\xBE\x96" => "\xED\x92\x92",		"\xBE\x97" => "\xED\x92\x93",		"\xBE\x98" => "\xED\x92\x95",		"\xBE\x99" => "\xED\x92\x96",		"\xBE\x9A" => "\xED\x92\x97",		"\xBE\x9B" => "\xED\x92\x98",		"\xBE\x9C" => "\xED\x92\x99",		"\xBE\x9D" => "\xED\x92\x9A",		"\xBE\x9E" => "\xED\x92\x9B",		"\xBE\x9F" => "\xED\x92\x9C",		"\xBE\xA0" => "\xED\x92\x9D",		"\xBE\xA1" => "\xEC\x90\xB4",		"\xBE\xA2" => "\xEC\x90\xBC",		"\xBE\xA3" => "\xEC\x90\xBD",		"\xBE\xA4" => "\xEC\x91\x88",		"\xBE\xA5" => "\xEC\x91\xA4",		"\xBE\xA6" => "\xEC\x91\xA5",		"\xBE\xA7" => "\xEC\x91\xA8",		"\xBE\xA8" => "\xEC\x91\xAC",		"\xBE\xA9" => "\xEC\x91\xB4",		"\xBE\xAA" => "\xEC\x91\xB5",		"\xBE\xAB" => "\xEC\x91\xB9",		"\xBE\xAC" => "\xEC\x92\x80",		"\xBE\xAD" => "\xEC\x92\x94",		"\xBE\xAE" => "\xEC\x92\x9C",		"\xBE\xAF" => "\xEC\x92\xB8",		"\xBE\xB0" => "\xEC\x92\xBC",		"\xBE\xB1" => "\xEC\x93\xA9",		"\xBE\xB2" => "\xEC\x93\xB0",		"\xBE\xB3" => "\xEC\x93\xB1",		"\xBE\xB4" => "\xEC\x93\xB4",		"\xBE\xB5" => "\xEC\x93\xB8",		"\xBE\xB6" => "\xEC\x93\xBA",		"\xBE\xB7" => "\xEC\x93\xBF",		"\xBE\xB8" => "\xEC\x94\x80",		"\xBE\xB9" => "\xEC\x94\x81",		"\xBE\xBA" => "\xEC\x94\x8C",		"\xBE\xBB" => "\xEC\x94\x90",		"\xBE\xBC" => "\xEC\x94\x94",		"\xBE\xBD" => "\xEC\x94\x9C",		"\xBE\xBE" => "\xEC\x94\xA8",		"\xBE\xBF" => "\xEC\x94\xA9",		"\xBE\xC0" => "\xEC\x94\xAC",		"\xBE\xC1" => "\xEC\x94\xB0",		"\xBE\xC2" => "\xEC\x94\xB8",		"\xBE\xC3" => "\xEC\x94\xB9",		"\xBE\xC4" => "\xEC\x94\xBB",		"\xBE\xC5" => "\xEC\x94\xBD",		"\xBE\xC6" => "\xEC\x95\x84",		"\xBE\xC7" => "\xEC\x95\x85",		"\xBE\xC8" => "\xEC\x95\x88",		"\xBE\xC9" => "\xEC\x95\x89",		"\xBE\xCA" => "\xEC\x95\x8A",		"\xBE\xCB" => "\xEC\x95\x8C",		"\xBE\xCC" => "\xEC\x95\x8D",		"\xBE\xCD" => "\xEC\x95\x8E",		"\xBE\xCE" => "\xEC\x95\x93",		"\xBE\xCF" => "\xEC\x95\x94",		"\xBE\xD0" => "\xEC\x95\x95",		"\xBE\xD1" => "\xEC\x95\x97",		"\xBE\xD2" => "\xEC\x95\x98",		"\xBE\xD3" => "\xEC\x95\x99",		"\xBE\xD4" => "\xEC\x95\x9D",		"\xBE\xD5" => "\xEC\x95\x9E",		"\xBE\xD6" => "\xEC\x95\xA0",		"\xBE\xD7" => "\xEC\x95\xA1",		"\xBE\xD8" => "\xEC\x95\xA4",		"\xBE\xD9" => "\xEC\x95\xA8",		"\xBE\xDA" => "\xEC\x95\xB0",		"\xBE\xDB" => "\xEC\x95\xB1",		"\xBE\xDC" => "\xEC\x95\xB3",		"\xBE\xDD" => "\xEC\x95\xB4",		"\xBE\xDE" => "\xEC\x95\xB5",		"\xBE\xDF" => "\xEC\x95\xBC",		"\xBE\xE0" => "\xEC\x95\xBD",		"\xBE\xE1" => "\xEC\x96\x80",		"\xBE\xE2" => "\xEC\x96\x84",		"\xBE\xE3" => "\xEC\x96\x87",		"\xBE\xE4" => "\xEC\x96\x8C",		"\xBE\xE5" => "\xEC\x96\x8D",		"\xBE\xE6" => "\xEC\x96\x8F",		"\xBE\xE7" => "\xEC\x96\x91",		"\xBE\xE8" => "\xEC\x96\x95",		"\xBE\xE9" => "\xEC\x96\x97",		"\xBE\xEA" => "\xEC\x96\x98",		"\xBE\xEB" => "\xEC\x96\x9C",		"\xBE\xEC" => "\xEC\x96\xA0",		"\xBE\xED" => "\xEC\x96\xA9",		"\xBE\xEE" => "\xEC\x96\xB4",		"\xBE\xEF" => "\xEC\x96\xB5",		"\xBE\xF0" => "\xEC\x96\xB8",		"\xBE\xF1" => "\xEC\x96\xB9",		"\xBE\xF2" => "\xEC\x96\xBB",		"\xBE\xF3" => "\xEC\x96\xBC",		"\xBE\xF4" => "\xEC\x96\xBD",		"\xBE\xF5" => "\xEC\x96\xBE",		"\xBE\xF6" => "\xEC\x97\x84",		"\xBE\xF7" => "\xEC\x97\x85",		"\xBE\xF8" => "\xEC\x97\x86",		"\xBE\xF9" => "\xEC\x97\x87",		"\xBE\xFA" => "\xEC\x97\x88",		"\xBE\xFB" => "\xEC\x97\x89",		"\xBE\xFC" => "\xEC\x97\x8A",		"\xBE\xFD" => "\xEC\x97\x8C",		"\xBE\xFE" => "\xEC\x97\x8E",		"\xBF\x41" => "\xED\x92\x9E",		"\xBF\x42" => "\xED\x92\x9F",		"\xBF\x43" => "\xED\x92\xA0",		"\xBF\x44" => "\xED\x92\xA1",		"\xBF\x45" => "\xED\x92\xA2",		"\xBF\x46" => "\xED\x92\xA3",		"\xBF\x47" => "\xED\x92\xA4",		"\xBF\x48" => "\xED\x92\xA5",		"\xBF\x49" => "\xED\x92\xA6",		"\xBF\x4A" => "\xED\x92\xA7",		"\xBF\x4B" => "\xED\x92\xA8",		"\xBF\x4C" => "\xED\x92\xAA",		"\xBF\x4D" => "\xED\x92\xAB",		"\xBF\x4E" => "\xED\x92\xAC",		"\xBF\x4F" => "\xED\x92\xAD",		"\xBF\x50" => "\xED\x92\xAE",		"\xBF\x51" => "\xED\x92\xAF",		"\xBF\x52" => "\xED\x92\xB0",		"\xBF\x53" => "\xED\x92\xB1",		"\xBF\x54" => "\xED\x92\xB2",		"\xBF\x55" => "\xED\x92\xB3",		"\xBF\x56" => "\xED\x92\xB4",		"\xBF\x57" => "\xED\x92\xB5",		"\xBF\x58" => "\xED\x92\xB6",		"\xBF\x59" => "\xED\x92\xB7",		"\xBF\x5A" => "\xED\x92\xB8",		"\xBF\x61" => "\xED\x92\xB9",		"\xBF\x62" => "\xED\x92\xBA",		"\xBF\x63" => "\xED\x92\xBB",		"\xBF\x64" => "\xED\x92\xBC",		"\xBF\x65" => "\xED\x92\xBD",		"\xBF\x66" => "\xED\x92\xBE",		"\xBF\x67" => "\xED\x92\xBF",		"\xBF\x68" => "\xED\x93\x80",		"\xBF\x69" => "\xED\x93\x81",		"\xBF\x6A" => "\xED\x93\x82",		"\xBF\x6B" => "\xED\x93\x83",		"\xBF\x6C" => "\xED\x93\x84",		"\xBF\x6D" => "\xED\x93\x85",		"\xBF\x6E" => "\xED\x93\x86",		"\xBF\x6F" => "\xED\x93\x87",		"\xBF\x70" => "\xED\x93\x88",		"\xBF\x71" => "\xED\x93\x89",		"\xBF\x72" => "\xED\x93\x8A",		"\xBF\x73" => "\xED\x93\x8B",		"\xBF\x74" => "\xED\x93\x8D",		"\xBF\x75" => "\xED\x93\x8E",		"\xBF\x76" => "\xED\x93\x8F",		"\xBF\x77" => "\xED\x93\x91",		"\xBF\x78" => "\xED\x93\x92",		"\xBF\x79" => "\xED\x93\x93",		"\xBF\x7A" => "\xED\x93\x95",		"\xBF\x81" => "\xED\x93\x96",		"\xBF\x82" => "\xED\x93\x97",		"\xBF\x83" => "\xED\x93\x98",		"\xBF\x84" => "\xED\x93\x99",		"\xBF\x85" => "\xED\x93\x9A",		"\xBF\x86" => "\xED\x93\x9B",		"\xBF\x87" => "\xED\x93\x9D",		"\xBF\x88" => "\xED\x93\x9E",		"\xBF\x89" => "\xED\x93\xA0",		"\xBF\x8A" => "\xED\x93\xA1",		"\xBF\x8B" => "\xED\x93\xA2",		"\xBF\x8C" => "\xED\x93\xA3",		"\xBF\x8D" => "\xED\x93\xA4",		"\xBF\x8E" => "\xED\x93\xA5",		"\xBF\x8F" => "\xED\x93\xA6",		"\xBF\x90" => "\xED\x93\xA7",		"\xBF\x91" => "\xED\x93\xA9",		"\xBF\x92" => "\xED\x93\xAA",		"\xBF\x93" => "\xED\x93\xAB",		"\xBF\x94" => "\xED\x93\xAD",		"\xBF\x95" => "\xED\x93\xAE",		"\xBF\x96" => "\xED\x93\xAF",		"\xBF\x97" => "\xED\x93\xB1",		"\xBF\x98" => "\xED\x93\xB2",		"\xBF\x99" => "\xED\x93\xB3",		"\xBF\x9A" => "\xED\x93\xB4",		"\xBF\x9B" => "\xED\x93\xB5",		"\xBF\x9C" => "\xED\x93\xB6",		"\xBF\x9D" => "\xED\x93\xB7",		"\xBF\x9E" => "\xED\x93\xB9",		"\xBF\x9F" => "\xED\x93\xBA",		"\xBF\xA0" => "\xED\x93\xBC",		"\xBF\xA1" => "\xEC\x97\x90",		"\xBF\xA2" => "\xEC\x97\x91",		"\xBF\xA3" => "\xEC\x97\x94",		"\xBF\xA4" => "\xEC\x97\x98",		"\xBF\xA5" => "\xEC\x97\xA0",		"\xBF\xA6" => "\xEC\x97\xA1",		"\xBF\xA7" => "\xEC\x97\xA3",		"\xBF\xA8" => "\xEC\x97\xA5",		"\xBF\xA9" => "\xEC\x97\xAC",		"\xBF\xAA" => "\xEC\x97\xAD",		"\xBF\xAB" => "\xEC\x97\xAE",		"\xBF\xAC" => "\xEC\x97\xB0",		"\xBF\xAD" => "\xEC\x97\xB4",		"\xBF\xAE" => "\xEC\x97\xB6",		"\xBF\xAF" => "\xEC\x97\xB7",		"\xBF\xB0" => "\xEC\x97\xBC",		"\xBF\xB1" => "\xEC\x97\xBD",		"\xBF\xB2" => "\xEC\x97\xBE",		"\xBF\xB3" => "\xEC\x97\xBF",		"\xBF\xB4" => "\xEC\x98\x80",		"\xBF\xB5" => "\xEC\x98\x81",		"\xBF\xB6" => "\xEC\x98\x85",		"\xBF\xB7" => "\xEC\x98\x86",		"\xBF\xB8" => "\xEC\x98\x87",		"\xBF\xB9" => "\xEC\x98\x88",		"\xBF\xBA" => "\xEC\x98\x8C",		"\xBF\xBB" => "\xEC\x98\x90",		"\xBF\xBC" => "\xEC\x98\x98",		"\xBF\xBD" => "\xEC\x98\x99",		"\xBF\xBE" => "\xEC\x98\x9B",		"\xBF\xBF" => "\xEC\x98\x9C",		"\xBF\xC0" => "\xEC\x98\xA4",		"\xBF\xC1" => "\xEC\x98\xA5",		"\xBF\xC2" => "\xEC\x98\xA8",		"\xBF\xC3" => "\xEC\x98\xAC",		"\xBF\xC4" => "\xEC\x98\xAD",		"\xBF\xC5" => "\xEC\x98\xAE",		"\xBF\xC6" => "\xEC\x98\xB0",		"\xBF\xC7" => "\xEC\x98\xB3",		"\xBF\xC8" => "\xEC\x98\xB4",		"\xBF\xC9" => "\xEC\x98\xB5",		"\xBF\xCA" => "\xEC\x98\xB7",		"\xBF\xCB" => "\xEC\x98\xB9",		"\xBF\xCC" => "\xEC\x98\xBB",		"\xBF\xCD" => "\xEC\x99\x80",		"\xBF\xCE" => "\xEC\x99\x81",		"\xBF\xCF" => "\xEC\x99\x84",		"\xBF\xD0" => "\xEC\x99\x88",		"\xBF\xD1" => "\xEC\x99\x90",		"\xBF\xD2" => "\xEC\x99\x91",		"\xBF\xD3" => "\xEC\x99\x93",		"\xBF\xD4" => "\xEC\x99\x94",		"\xBF\xD5" => "\xEC\x99\x95",		"\xBF\xD6" => "\xEC\x99\x9C",		"\xBF\xD7" => "\xEC\x99\x9D",		"\xBF\xD8" => "\xEC\x99\xA0",		"\xBF\xD9" => "\xEC\x99\xAC",		"\xBF\xDA" => "\xEC\x99\xAF",		"\xBF\xDB" => "\xEC\x99\xB1",		"\xBF\xDC" => "\xEC\x99\xB8",		"\xBF\xDD" => "\xEC\x99\xB9",		"\xBF\xDE" => "\xEC\x99\xBC",		"\xBF\xDF" => "\xEC\x9A\x80",		"\xBF\xE0" => "\xEC\x9A\x88",		"\xBF\xE1" => "\xEC\x9A\x89",		"\xBF\xE2" => "\xEC\x9A\x8B",		"\xBF\xE3" => "\xEC\x9A\x8D",		"\xBF\xE4" => "\xEC\x9A\x94",		"\xBF\xE5" => "\xEC\x9A\x95",		"\xBF\xE6" => "\xEC\x9A\x98",		"\xBF\xE7" => "\xEC\x9A\x9C",		"\xBF\xE8" => "\xEC\x9A\xA4",		"\xBF\xE9" => "\xEC\x9A\xA5",		"\xBF\xEA" => "\xEC\x9A\xA7",		"\xBF\xEB" => "\xEC\x9A\xA9",		"\xBF\xEC" => "\xEC\x9A\xB0",		"\xBF\xED" => "\xEC\x9A\xB1",		"\xBF\xEE" => "\xEC\x9A\xB4",		"\xBF\xEF" => "\xEC\x9A\xB8",		"\xBF\xF0" => "\xEC\x9A\xB9",		"\xBF\xF1" => "\xEC\x9A\xBA",		"\xBF\xF2" => "\xEC\x9B\x80",		"\xBF\xF3" => "\xEC\x9B\x81",		"\xBF\xF4" => "\xEC\x9B\x83",		"\xBF\xF5" => "\xEC\x9B\x85",		"\xBF\xF6" => "\xEC\x9B\x8C",		"\xBF\xF7" => "\xEC\x9B\x8D",		"\xBF\xF8" => "\xEC\x9B\x90",		"\xBF\xF9" => "\xEC\x9B\x94",		"\xBF\xFA" => "\xEC\x9B\x9C",		"\xBF\xFB" => "\xEC\x9B\x9D",		"\xBF\xFC" => "\xEC\x9B\xA0",		"\xBF\xFD" => "\xEC\x9B\xA1",		"\xBF\xFE" => "\xEC\x9B\xA8",		"\xC0\x41" => "\xED\x93\xBE",		"\xC0\x42" => "\xED\x93\xBF",		"\xC0\x43" => "\xED\x94\x80",		"\xC0\x44" => "\xED\x94\x81",		"\xC0\x45" => "\xED\x94\x82",		"\xC0\x46" => "\xED\x94\x83",		"\xC0\x47" => "\xED\x94\x85",		"\xC0\x48" => "\xED\x94\x86",		"\xC0\x49" => "\xED\x94\x87",		"\xC0\x4A" => "\xED\x94\x89",		"\xC0\x4B" => "\xED\x94\x8A",		"\xC0\x4C" => "\xED\x94\x8B",		"\xC0\x4D" => "\xED\x94\x8D",		"\xC0\x4E" => "\xED\x94\x8E",		"\xC0\x4F" => "\xED\x94\x8F",		"\xC0\x50" => "\xED\x94\x90",		"\xC0\x51" => "\xED\x94\x91",		"\xC0\x52" => "\xED\x94\x92",		"\xC0\x53" => "\xED\x94\x93",		"\xC0\x54" => "\xED\x94\x96",		"\xC0\x55" => "\xED\x94\x98",		"\xC0\x56" => "\xED\x94\x99",		"\xC0\x57" => "\xED\x94\x9A",		"\xC0\x58" => "\xED\x94\x9B",		"\xC0\x59" => "\xED\x94\x9C",		"\xC0\x5A" => "\xED\x94\x9D",		"\xC0\x61" => "\xED\x94\x9E",		"\xC0\x62" => "\xED\x94\x9F",		"\xC0\x63" => "\xED\x94\xA0",		"\xC0\x64" => "\xED\x94\xA1",		"\xC0\x65" => "\xED\x94\xA2",		"\xC0\x66" => "\xED\x94\xA3",		"\xC0\x67" => "\xED\x94\xA4",		"\xC0\x68" => "\xED\x94\xA5",		"\xC0\x69" => "\xED\x94\xA6",		"\xC0\x6A" => "\xED\x94\xA7",		"\xC0\x6B" => "\xED\x94\xA8",		"\xC0\x6C" => "\xED\x94\xA9",		"\xC0\x6D" => "\xED\x94\xAA",		"\xC0\x6E" => "\xED\x94\xAB",		"\xC0\x6F" => "\xED\x94\xAC",		"\xC0\x70" => "\xED\x94\xAD",		"\xC0\x71" => "\xED\x94\xAE",		"\xC0\x72" => "\xED\x94\xAF",		"\xC0\x73" => "\xED\x94\xB0",		"\xC0\x74" => "\xED\x94\xB1",		"\xC0\x75" => "\xED\x94\xB2",		"\xC0\x76" => "\xED\x94\xB3",		"\xC0\x77" => "\xED\x94\xB4",		"\xC0\x78" => "\xED\x94\xB5",		"\xC0\x79" => "\xED\x94\xB6",		"\xC0\x7A" => "\xED\x94\xB7",		"\xC0\x81" => "\xED\x94\xB8",		"\xC0\x82" => "\xED\x94\xB9",		"\xC0\x83" => "\xED\x94\xBA",		"\xC0\x84" => "\xED\x94\xBB",		"\xC0\x85" => "\xED\x94\xBE",		"\xC0\x86" => "\xED\x94\xBF",		"\xC0\x87" => "\xED\x95\x81",		"\xC0\x88" => "\xED\x95\x82",		"\xC0\x89" => "\xED\x95\x83",		"\xC0\x8A" => "\xED\x95\x85",		"\xC0\x8B" => "\xED\x95\x86",		"\xC0\x8C" => "\xED\x95\x87",		"\xC0\x8D" => "\xED\x95\x88",		"\xC0\x8E" => "\xED\x95\x89",		"\xC0\x8F" => "\xED\x95\x8A",		"\xC0\x90" => "\xED\x95\x8B",		"\xC0\x91" => "\xED\x95\x8E",		"\xC0\x92" => "\xED\x95\x90",		"\xC0\x93" => "\xED\x95\x92",		"\xC0\x94" => "\xED\x95\x93",		"\xC0\x95" => "\xED\x95\x94",		"\xC0\x96" => "\xED\x95\x95",		"\xC0\x97" => "\xED\x95\x96",		"\xC0\x98" => "\xED\x95\x97",		"\xC0\x99" => "\xED\x95\x9A",		"\xC0\x9A" => "\xED\x95\x9B",		"\xC0\x9B" => "\xED\x95\x9D",		"\xC0\x9C" => "\xED\x95\x9E",		"\xC0\x9D" => "\xED\x95\x9F",		"\xC0\x9E" => "\xED\x95\xA1",		"\xC0\x9F" => "\xED\x95\xA2",		"\xC0\xA0" => "\xED\x95\xA3",		"\xC0\xA1" => "\xEC\x9B\xA9",		"\xC0\xA2" => "\xEC\x9B\xAC",		"\xC0\xA3" => "\xEC\x9B\xB0",		"\xC0\xA4" => "\xEC\x9B\xB8",		"\xC0\xA5" => "\xEC\x9B\xB9",		"\xC0\xA6" => "\xEC\x9B\xBD",		"\xC0\xA7" => "\xEC\x9C\x84",		"\xC0\xA8" => "\xEC\x9C\x85",		"\xC0\xA9" => "\xEC\x9C\x88",		"\xC0\xAA" => "\xEC\x9C\x8C",		"\xC0\xAB" => "\xEC\x9C\x94",		"\xC0\xAC" => "\xEC\x9C\x95",		"\xC0\xAD" => "\xEC\x9C\x97",		"\xC0\xAE" => "\xEC\x9C\x99",		"\xC0\xAF" => "\xEC\x9C\xA0",		"\xC0\xB0" => "\xEC\x9C\xA1",		"\xC0\xB1" => "\xEC\x9C\xA4",		"\xC0\xB2" => "\xEC\x9C\xA8",		"\xC0\xB3" => "\xEC\x9C\xB0",		"\xC0\xB4" => "\xEC\x9C\xB1",		"\xC0\xB5" => "\xEC\x9C\xB3",		"\xC0\xB6" => "\xEC\x9C\xB5",		"\xC0\xB7" => "\xEC\x9C\xB7",		"\xC0\xB8" => "\xEC\x9C\xBC",		"\xC0\xB9" => "\xEC\x9C\xBD",		"\xC0\xBA" => "\xEC\x9D\x80",		"\xC0\xBB" => "\xEC\x9D\x84",		"\xC0\xBC" => "\xEC\x9D\x8A",		"\xC0\xBD" => "\xEC\x9D\x8C",		"\xC0\xBE" => "\xEC\x9D\x8D",		"\xC0\xBF" => "\xEC\x9D\x8F",		"\xC0\xC0" => "\xEC\x9D\x91",		"\xC0\xC1" => "\xEC\x9D\x92",		"\xC0\xC2" => "\xEC\x9D\x93",		"\xC0\xC3" => "\xEC\x9D\x94",		"\xC0\xC4" => "\xEC\x9D\x95",		"\xC0\xC5" => "\xEC\x9D\x96",		"\xC0\xC6" => "\xEC\x9D\x97",		"\xC0\xC7" => "\xEC\x9D\x98",		"\xC0\xC8" => "\xEC\x9D\x9C",		"\xC0\xC9" => "\xEC\x9D\xA0",		"\xC0\xCA" => "\xEC\x9D\xA8",		"\xC0\xCB" => "\xEC\x9D\xAB",		"\xC0\xCC" => "\xEC\x9D\xB4",		"\xC0\xCD" => "\xEC\x9D\xB5",		"\xC0\xCE" => "\xEC\x9D\xB8",		"\xC0\xCF" => "\xEC\x9D\xBC",		"\xC0\xD0" => "\xEC\x9D\xBD",		"\xC0\xD1" => "\xEC\x9D\xBE",		"\xC0\xD2" => "\xEC\x9E\x83",		"\xC0\xD3" => "\xEC\x9E\x84",		"\xC0\xD4" => "\xEC\x9E\x85",		"\xC0\xD5" => "\xEC\x9E\x87",		"\xC0\xD6" => "\xEC\x9E\x88",		"\xC0\xD7" => "\xEC\x9E\x89",		"\xC0\xD8" => "\xEC\x9E\x8A",		"\xC0\xD9" => "\xEC\x9E\x8E",		"\xC0\xDA" => "\xEC\x9E\x90",		"\xC0\xDB" => "\xEC\x9E\x91",		"\xC0\xDC" => "\xEC\x9E\x94",		"\xC0\xDD" => "\xEC\x9E\x96",		"\xC0\xDE" => "\xEC\x9E\x97",		"\xC0\xDF" => "\xEC\x9E\x98",		"\xC0\xE0" => "\xEC\x9E\x9A",		"\xC0\xE1" => "\xEC\x9E\xA0",		"\xC0\xE2" => "\xEC\x9E\xA1",		"\xC0\xE3" => "\xEC\x9E\xA3",		"\xC0\xE4" => "\xEC\x9E\xA4",		"\xC0\xE5" => "\xEC\x9E\xA5",		"\xC0\xE6" => "\xEC\x9E\xA6",		"\xC0\xE7" => "\xEC\x9E\xAC",		"\xC0\xE8" => "\xEC\x9E\xAD",		"\xC0\xE9" => "\xEC\x9E\xB0",		"\xC0\xEA" => "\xEC\x9E\xB4",		"\xC0\xEB" => "\xEC\x9E\xBC",		"\xC0\xEC" => "\xEC\x9E\xBD",		"\xC0\xED" => "\xEC\x9E\xBF",		"\xC0\xEE" => "\xEC\x9F\x80",		"\xC0\xEF" => "\xEC\x9F\x81",		"\xC0\xF0" => "\xEC\x9F\x88",		"\xC0\xF1" => "\xEC\x9F\x89",		"\xC0\xF2" => "\xEC\x9F\x8C",		"\xC0\xF3" => "\xEC\x9F\x8E",		"\xC0\xF4" => "\xEC\x9F\x90",		"\xC0\xF5" => "\xEC\x9F\x98",		"\xC0\xF6" => "\xEC\x9F\x9D",		"\xC0\xF7" => "\xEC\x9F\xA4",		"\xC0\xF8" => "\xEC\x9F\xA8",		"\xC0\xF9" => "\xEC\x9F\xAC",		"\xC0\xFA" => "\xEC\xA0\x80",		"\xC0\xFB" => "\xEC\xA0\x81",		"\xC0\xFC" => "\xEC\xA0\x84",		"\xC0\xFD" => "\xEC\xA0\x88",		"\xC0\xFE" => "\xEC\xA0\x8A",		"\xC1\x41" => "\xED\x95\xA4",		"\xC1\x42" => "\xED\x95\xA6",		"\xC1\x43" => "\xED\x95\xA7",		"\xC1\x44" => "\xED\x95\xAA",		"\xC1\x45" => "\xED\x95\xAC",		"\xC1\x46" => "\xED\x95\xAE",		"\xC1\x47" => "\xED\x95\xAF",		"\xC1\x48" => "\xED\x95\xB0",		"\xC1\x49" => "\xED\x95\xB1",		"\xC1\x4A" => "\xED\x95\xB2",		"\xC1\x4B" => "\xED\x95\xB3",		"\xC1\x4C" => "\xED\x95\xB6",		"\xC1\x4D" => "\xED\x95\xB7",		"\xC1\x4E" => "\xED\x95\xB9",		"\xC1\x4F" => "\xED\x95\xBA",		"\xC1\x50" => "\xED\x95\xBB",		"\xC1\x51" => "\xED\x95\xBD",		"\xC1\x52" => "\xED\x95\xBE",		"\xC1\x53" => "\xED\x95\xBF",		"\xC1\x54" => "\xED\x96\x80",		"\xC1\x55" => "\xED\x96\x81",		"\xC1\x56" => "\xED\x96\x82",		"\xC1\x57" => "\xED\x96\x83",		"\xC1\x58" => "\xED\x96\x86",		"\xC1\x59" => "\xED\x96\x8A",		"\xC1\x5A" => "\xED\x96\x8B",		"\xC1\x61" => "\xED\x96\x8C",		"\xC1\x62" => "\xED\x96\x8D",		"\xC1\x63" => "\xED\x96\x8E",		"\xC1\x64" => "\xED\x96\x8F",		"\xC1\x65" => "\xED\x96\x91",		"\xC1\x66" => "\xED\x96\x92",		"\xC1\x67" => "\xED\x96\x93",		"\xC1\x68" => "\xED\x96\x94",		"\xC1\x69" => "\xED\x96\x95",		"\xC1\x6A" => "\xED\x96\x96",		"\xC1\x6B" => "\xED\x96\x97",		"\xC1\x6C" => "\xED\x96\x98",		"\xC1\x6D" => "\xED\x96\x99",		"\xC1\x6E" => "\xED\x96\x9A",		"\xC1\x6F" => "\xED\x96\x9B",		"\xC1\x70" => "\xED\x96\x9C",		"\xC1\x71" => "\xED\x96\x9D",		"\xC1\x72" => "\xED\x96\x9E",		"\xC1\x73" => "\xED\x96\x9F",		"\xC1\x74" => "\xED\x96\xA0",		"\xC1\x75" => "\xED\x96\xA1",		"\xC1\x76" => "\xED\x96\xA2",		"\xC1\x77" => "\xED\x96\xA3",		"\xC1\x78" => "\xED\x96\xA4",		"\xC1\x79" => "\xED\x96\xA6",		"\xC1\x7A" => "\xED\x96\xA7",		"\xC1\x81" => "\xED\x96\xA8",		"\xC1\x82" => "\xED\x96\xA9",		"\xC1\x83" => "\xED\x96\xAA",		"\xC1\x84" => "\xED\x96\xAB",		"\xC1\x85" => "\xED\x96\xAC",		"\xC1\x86" => "\xED\x96\xAD",		"\xC1\x87" => "\xED\x96\xAE",		"\xC1\x88" => "\xED\x96\xAF",		"\xC1\x89" => "\xED\x96\xB0",		"\xC1\x8A" => "\xED\x96\xB1",		"\xC1\x8B" => "\xED\x96\xB2",		"\xC1\x8C" => "\xED\x96\xB3",		"\xC1\x8D" => "\xED\x96\xB4",		"\xC1\x8E" => "\xED\x96\xB5",		"\xC1\x8F" => "\xED\x96\xB6",		"\xC1\x90" => "\xED\x96\xB7",		"\xC1\x91" => "\xED\x96\xB8",		"\xC1\x92" => "\xED\x96\xB9",		"\xC1\x93" => "\xED\x96\xBA",		"\xC1\x94" => "\xED\x96\xBB",		"\xC1\x95" => "\xED\x96\xBC",		"\xC1\x96" => "\xED\x96\xBD",		"\xC1\x97" => "\xED\x96\xBE",		"\xC1\x98" => "\xED\x96\xBF",		"\xC1\x99" => "\xED\x97\x80",		"\xC1\x9A" => "\xED\x97\x81",		"\xC1\x9B" => "\xED\x97\x82",		"\xC1\x9C" => "\xED\x97\x83",		"\xC1\x9D" => "\xED\x97\x84",		"\xC1\x9E" => "\xED\x97\x85",		"\xC1\x9F" => "\xED\x97\x86",		"\xC1\xA0" => "\xED\x97\x87",		"\xC1\xA1" => "\xEC\xA0\x90",		"\xC1\xA2" => "\xEC\xA0\x91",		"\xC1\xA3" => "\xEC\xA0\x93",		"\xC1\xA4" => "\xEC\xA0\x95",		"\xC1\xA5" => "\xEC\xA0\x96",		"\xC1\xA6" => "\xEC\xA0\x9C",		"\xC1\xA7" => "\xEC\xA0\x9D",		"\xC1\xA8" => "\xEC\xA0\xA0",		"\xC1\xA9" => "\xEC\xA0\xA4",		"\xC1\xAA" => "\xEC\xA0\xAC",		"\xC1\xAB" => "\xEC\xA0\xAD",		"\xC1\xAC" => "\xEC\xA0\xAF",		"\xC1\xAD" => "\xEC\xA0\xB1",		"\xC1\xAE" => "\xEC\xA0\xB8",		"\xC1\xAF" => "\xEC\xA0\xBC",		"\xC1\xB0" => "\xEC\xA1\x80",		"\xC1\xB1" => "\xEC\xA1\x88",		"\xC1\xB2" => "\xEC\xA1\x89",		"\xC1\xB3" => "\xEC\xA1\x8C",		"\xC1\xB4" => "\xEC\xA1\x8D",		"\xC1\xB5" => "\xEC\xA1\x94",		"\xC1\xB6" => "\xEC\xA1\xB0",		"\xC1\xB7" => "\xEC\xA1\xB1",		"\xC1\xB8" => "\xEC\xA1\xB4",		"\xC1\xB9" => "\xEC\xA1\xB8",		"\xC1\xBA" => "\xEC\xA1\xBA",		"\xC1\xBB" => "\xEC\xA2\x80",		"\xC1\xBC" => "\xEC\xA2\x81",		"\xC1\xBD" => "\xEC\xA2\x83",		"\xC1\xBE" => "\xEC\xA2\x85",		"\xC1\xBF" => "\xEC\xA2\x86",		"\xC1\xC0" => "\xEC\xA2\x87",		"\xC1\xC1" => "\xEC\xA2\x8B",		"\xC1\xC2" => "\xEC\xA2\x8C",		"\xC1\xC3" => "\xEC\xA2\x8D",		"\xC1\xC4" => "\xEC\xA2\x94",		"\xC1\xC5" => "\xEC\xA2\x9D",		"\xC1\xC6" => "\xEC\xA2\x9F",		"\xC1\xC7" => "\xEC\xA2\xA1",		"\xC1\xC8" => "\xEC\xA2\xA8",		"\xC1\xC9" => "\xEC\xA2\xBC",		"\xC1\xCA" => "\xEC\xA2\xBD",		"\xC1\xCB" => "\xEC\xA3\x84",		"\xC1\xCC" => "\xEC\xA3\x88",		"\xC1\xCD" => "\xEC\xA3\x8C",		"\xC1\xCE" => "\xEC\xA3\x94",		"\xC1\xCF" => "\xEC\xA3\x95",		"\xC1\xD0" => "\xEC\xA3\x97",		"\xC1\xD1" => "\xEC\xA3\x99",		"\xC1\xD2" => "\xEC\xA3\xA0",		"\xC1\xD3" => "\xEC\xA3\xA1",		"\xC1\xD4" => "\xEC\xA3\xA4",		"\xC1\xD5" => "\xEC\xA3\xB5",		"\xC1\xD6" => "\xEC\xA3\xBC",		"\xC1\xD7" => "\xEC\xA3\xBD",		"\xC1\xD8" => "\xEC\xA4\x80",		"\xC1\xD9" => "\xEC\xA4\x84",		"\xC1\xDA" => "\xEC\xA4\x85",		"\xC1\xDB" => "\xEC\xA4\x86",		"\xC1\xDC" => "\xEC\xA4\x8C",		"\xC1\xDD" => "\xEC\xA4\x8D",		"\xC1\xDE" => "\xEC\xA4\x8F",		"\xC1\xDF" => "\xEC\xA4\x91",		"\xC1\xE0" => "\xEC\xA4\x98",		"\xC1\xE1" => "\xEC\xA4\xAC",		"\xC1\xE2" => "\xEC\xA4\xB4",		"\xC1\xE3" => "\xEC\xA5\x90",		"\xC1\xE4" => "\xEC\xA5\x91",		"\xC1\xE5" => "\xEC\xA5\x94",		"\xC1\xE6" => "\xEC\xA5\x98",		"\xC1\xE7" => "\xEC\xA5\xA0",		"\xC1\xE8" => "\xEC\xA5\xA1",		"\xC1\xE9" => "\xEC\xA5\xA3",		"\xC1\xEA" => "\xEC\xA5\xAC",		"\xC1\xEB" => "\xEC\xA5\xB0",		"\xC1\xEC" => "\xEC\xA5\xB4",		"\xC1\xED" => "\xEC\xA5\xBC",		"\xC1\xEE" => "\xEC\xA6\x88",		"\xC1\xEF" => "\xEC\xA6\x89",		"\xC1\xF0" => "\xEC\xA6\x8C",		"\xC1\xF1" => "\xEC\xA6\x90",		"\xC1\xF2" => "\xEC\xA6\x98",		"\xC1\xF3" => "\xEC\xA6\x99",		"\xC1\xF4" => "\xEC\xA6\x9B",		"\xC1\xF5" => "\xEC\xA6\x9D",		"\xC1\xF6" => "\xEC\xA7\x80",		"\xC1\xF7" => "\xEC\xA7\x81",		"\xC1\xF8" => "\xEC\xA7\x84",		"\xC1\xF9" => "\xEC\xA7\x87",		"\xC1\xFA" => "\xEC\xA7\x88",		"\xC1\xFB" => "\xEC\xA7\x8A",		"\xC1\xFC" => "\xEC\xA7\x90",		"\xC1\xFD" => "\xEC\xA7\x91",		"\xC1\xFE" => "\xEC\xA7\x93",		"\xC2\x41" => "\xED\x97\x8A",		"\xC2\x42" => "\xED\x97\x8B",		"\xC2\x43" => "\xED\x97\x8D",		"\xC2\x44" => "\xED\x97\x8E",		"\xC2\x45" => "\xED\x97\x8F",		"\xC2\x46" => "\xED\x97\x91",		"\xC2\x47" => "\xED\x97\x93",		"\xC2\x48" => "\xED\x97\x94",		"\xC2\x49" => "\xED\x97\x95",		"\xC2\x4A" => "\xED\x97\x96",		"\xC2\x4B" => "\xED\x97\x97",		"\xC2\x4C" => "\xED\x97\x9A",		"\xC2\x4D" => "\xED\x97\x9C",		"\xC2\x4E" => "\xED\x97\x9E",		"\xC2\x4F" => "\xED\x97\x9F",		"\xC2\x50" => "\xED\x97\xA0",		"\xC2\x51" => "\xED\x97\xA1",		"\xC2\x52" => "\xED\x97\xA2",		"\xC2\x53" => "\xED\x97\xA3",		"\xC2\x54" => "\xED\x97\xA6",		"\xC2\x55" => "\xED\x97\xA7",		"\xC2\x56" => "\xED\x97\xA9",		"\xC2\x57" => "\xED\x97\xAA",		"\xC2\x58" => "\xED\x97\xAB",		"\xC2\x59" => "\xED\x97\xAD",		"\xC2\x5A" => "\xED\x97\xAE",		"\xC2\x61" => "\xED\x97\xAF",		"\xC2\x62" => "\xED\x97\xB0",		"\xC2\x63" => "\xED\x97\xB1",		"\xC2\x64" => "\xED\x97\xB2",		"\xC2\x65" => "\xED\x97\xB3",		"\xC2\x66" => "\xED\x97\xB6",		"\xC2\x67" => "\xED\x97\xB8",		"\xC2\x68" => "\xED\x97\xBA",		"\xC2\x69" => "\xED\x97\xBB",		"\xC2\x6A" => "\xED\x97\xBC",		"\xC2\x6B" => "\xED\x97\xBD",		"\xC2\x6C" => "\xED\x97\xBE",		"\xC2\x6D" => "\xED\x97\xBF",		"\xC2\x6E" => "\xED\x98\x82",		"\xC2\x6F" => "\xED\x98\x83",		"\xC2\x70" => "\xED\x98\x85",		"\xC2\x71" => "\xED\x98\x86",		"\xC2\x72" => "\xED\x98\x87",		"\xC2\x73" => "\xED\x98\x89",		"\xC2\x74" => "\xED\x98\x8A",		"\xC2\x75" => "\xED\x98\x8B",		"\xC2\x76" => "\xED\x98\x8C",		"\xC2\x77" => "\xED\x98\x8D",		"\xC2\x78" => "\xED\x98\x8E",		"\xC2\x79" => "\xED\x98\x8F",		"\xC2\x7A" => "\xED\x98\x92",		"\xC2\x81" => "\xED\x98\x96",		"\xC2\x82" => "\xED\x98\x97",		"\xC2\x83" => "\xED\x98\x98",		"\xC2\x84" => "\xED\x98\x99",		"\xC2\x85" => "\xED\x98\x9A",		"\xC2\x86" => "\xED\x98\x9B",		"\xC2\x87" => "\xED\x98\x9D",		"\xC2\x88" => "\xED\x98\x9E",		"\xC2\x89" => "\xED\x98\x9F",		"\xC2\x8A" => "\xED\x98\xA1",		"\xC2\x8B" => "\xED\x98\xA2",		"\xC2\x8C" => "\xED\x98\xA3",		"\xC2\x8D" => "\xED\x98\xA5",		"\xC2\x8E" => "\xED\x98\xA6",		"\xC2\x8F" => "\xED\x98\xA7",		"\xC2\x90" => "\xED\x98\xA8",		"\xC2\x91" => "\xED\x98\xA9",		"\xC2\x92" => "\xED\x98\xAA",		"\xC2\x93" => "\xED\x98\xAB",		"\xC2\x94" => "\xED\x98\xAC",		"\xC2\x95" => "\xED\x98\xAE",		"\xC2\x96" => "\xED\x98\xAF",		"\xC2\x97" => "\xED\x98\xB0",		"\xC2\x98" => "\xED\x98\xB1",		"\xC2\x99" => "\xED\x98\xB2",		"\xC2\x9A" => "\xED\x98\xB3",		"\xC2\x9B" => "\xED\x98\xB4",		"\xC2\x9C" => "\xED\x98\xB5",		"\xC2\x9D" => "\xED\x98\xB6",		"\xC2\x9E" => "\xED\x98\xB7",		"\xC2\x9F" => "\xED\x98\xBA",		"\xC2\xA0" => "\xED\x98\xBB",		"\xC2\xA1" => "\xEC\xA7\x95",		"\xC2\xA2" => "\xEC\xA7\x96",		"\xC2\xA3" => "\xEC\xA7\x99",		"\xC2\xA4" => "\xEC\xA7\x9A",		"\xC2\xA5" => "\xEC\xA7\x9C",		"\xC2\xA6" => "\xEC\xA7\x9D",		"\xC2\xA7" => "\xEC\xA7\xA0",		"\xC2\xA8" => "\xEC\xA7\xA2",		"\xC2\xA9" => "\xEC\xA7\xA4",		"\xC2\xAA" => "\xEC\xA7\xA7",		"\xC2\xAB" => "\xEC\xA7\xAC",		"\xC2\xAC" => "\xEC\xA7\xAD",		"\xC2\xAD" => "\xEC\xA7\xAF",		"\xC2\xAE" => "\xEC\xA7\xB0",		"\xC2\xAF" => "\xEC\xA7\xB1",		"\xC2\xB0" => "\xEC\xA7\xB8",		"\xC2\xB1" => "\xEC\xA7\xB9",		"\xC2\xB2" => "\xEC\xA7\xBC",		"\xC2\xB3" => "\xEC\xA8\x80",		"\xC2\xB4" => "\xEC\xA8\x88",		"\xC2\xB5" => "\xEC\xA8\x89",		"\xC2\xB6" => "\xEC\xA8\x8B",		"\xC2\xB7" => "\xEC\xA8\x8C",		"\xC2\xB8" => "\xEC\xA8\x8D",		"\xC2\xB9" => "\xEC\xA8\x94",		"\xC2\xBA" => "\xEC\xA8\x98",		"\xC2\xBB" => "\xEC\xA8\xA9",		"\xC2\xBC" => "\xEC\xA9\x8C",		"\xC2\xBD" => "\xEC\xA9\x8D",		"\xC2\xBE" => "\xEC\xA9\x90",		"\xC2\xBF" => "\xEC\xA9\x94",		"\xC2\xC0" => "\xEC\xA9\x9C",		"\xC2\xC1" => "\xEC\xA9\x9D",		"\xC2\xC2" => "\xEC\xA9\x9F",		"\xC2\xC3" => "\xEC\xA9\xA0",		"\xC2\xC4" => "\xEC\xA9\xA1",		"\xC2\xC5" => "\xEC\xA9\xA8",		"\xC2\xC6" => "\xEC\xA9\xBD",		"\xC2\xC7" => "\xEC\xAA\x84",		"\xC2\xC8" => "\xEC\xAA\x98",		"\xC2\xC9" => "\xEC\xAA\xBC",		"\xC2\xCA" => "\xEC\xAA\xBD",		"\xC2\xCB" => "\xEC\xAB\x80",		"\xC2\xCC" => "\xEC\xAB\x84",		"\xC2\xCD" => "\xEC\xAB\x8C",		"\xC2\xCE" => "\xEC\xAB\x8D",		"\xC2\xCF" => "\xEC\xAB\x8F",		"\xC2\xD0" => "\xEC\xAB\x91",		"\xC2\xD1" => "\xEC\xAB\x93",		"\xC2\xD2" => "\xEC\xAB\x98",		"\xC2\xD3" => "\xEC\xAB\x99",		"\xC2\xD4" => "\xEC\xAB\xA0",		"\xC2\xD5" => "\xEC\xAB\xAC",		"\xC2\xD6" => "\xEC\xAB\xB4",		"\xC2\xD7" => "\xEC\xAC\x88",		"\xC2\xD8" => "\xEC\xAC\x90",		"\xC2\xD9" => "\xEC\xAC\x94",		"\xC2\xDA" => "\xEC\xAC\x98",		"\xC2\xDB" => "\xEC\xAC\xA0",		"\xC2\xDC" => "\xEC\xAC\xA1",		"\xC2\xDD" => "\xEC\xAD\x81",		"\xC2\xDE" => "\xEC\xAD\x88",		"\xC2\xDF" => "\xEC\xAD\x89",		"\xC2\xE0" => "\xEC\xAD\x8C",		"\xC2\xE1" => "\xEC\xAD\x90",		"\xC2\xE2" => "\xEC\xAD\x98",		"\xC2\xE3" => "\xEC\xAD\x99",		"\xC2\xE4" => "\xEC\xAD\x9D",		"\xC2\xE5" => "\xEC\xAD\xA4",		"\xC2\xE6" => "\xEC\xAD\xB8",		"\xC2\xE7" => "\xEC\xAD\xB9",		"\xC2\xE8" => "\xEC\xAE\x9C",		"\xC2\xE9" => "\xEC\xAE\xB8",		"\xC2\xEA" => "\xEC\xAF\x94",		"\xC2\xEB" => "\xEC\xAF\xA4",		"\xC2\xEC" => "\xEC\xAF\xA7",		"\xC2\xED" => "\xEC\xAF\xA9",		"\xC2\xEE" => "\xEC\xB0\x8C",		"\xC2\xEF" => "\xEC\xB0\x8D",		"\xC2\xF0" => "\xEC\xB0\x90",		"\xC2\xF1" => "\xEC\xB0\x94",		"\xC2\xF2" => "\xEC\xB0\x9C",		"\xC2\xF3" => "\xEC\xB0\x9D",		"\xC2\xF4" => "\xEC\xB0\xA1",		"\xC2\xF5" => "\xEC\xB0\xA2",		"\xC2\xF6" => "\xEC\xB0\xA7",		"\xC2\xF7" => "\xEC\xB0\xA8",		"\xC2\xF8" => "\xEC\xB0\xA9",		"\xC2\xF9" => "\xEC\xB0\xAC",		"\xC2\xFA" => "\xEC\xB0\xAE",		"\xC2\xFB" => "\xEC\xB0\xB0",		"\xC2\xFC" => "\xEC\xB0\xB8",		"\xC2\xFD" => "\xEC\xB0\xB9",		"\xC2\xFE" => "\xEC\xB0\xBB",		"\xC3\x41" => "\xED\x98\xBD",		"\xC3\x42" => "\xED\x98\xBE",		"\xC3\x43" => "\xED\x98\xBF",		"\xC3\x44" => "\xED\x99\x81",		"\xC3\x45" => "\xED\x99\x82",		"\xC3\x46" => "\xED\x99\x83",		"\xC3\x47" => "\xED\x99\x84",		"\xC3\x48" => "\xED\x99\x86",		"\xC3\x49" => "\xED\x99\x87",		"\xC3\x4A" => "\xED\x99\x8A",		"\xC3\x4B" => "\xED\x99\x8C",		"\xC3\x4C" => "\xED\x99\x8E",		"\xC3\x4D" => "\xED\x99\x8F",		"\xC3\x4E" => "\xED\x99\x90",		"\xC3\x4F" => "\xED\x99\x92",		"\xC3\x50" => "\xED\x99\x93",		"\xC3\x51" => "\xED\x99\x96",		"\xC3\x52" => "\xED\x99\x97",		"\xC3\x53" => "\xED\x99\x99",		"\xC3\x54" => "\xED\x99\x9A",		"\xC3\x55" => "\xED\x99\x9B",		"\xC3\x56" => "\xED\x99\x9D",		"\xC3\x57" => "\xED\x99\x9E",		"\xC3\x58" => "\xED\x99\x9F",		"\xC3\x59" => "\xED\x99\xA0",		"\xC3\x5A" => "\xED\x99\xA1",		"\xC3\x61" => "\xED\x99\xA2",		"\xC3\x62" => "\xED\x99\xA3",		"\xC3\x63" => "\xED\x99\xA4",		"\xC3\x64" => "\xED\x99\xA5",		"\xC3\x65" => "\xED\x99\xA6",		"\xC3\x66" => "\xED\x99\xA8",		"\xC3\x67" => "\xED\x99\xAA",		"\xC3\x68" => "\xED\x99\xAB",		"\xC3\x69" => "\xED\x99\xAC",		"\xC3\x6A" => "\xED\x99\xAD",		"\xC3\x6B" => "\xED\x99\xAE",		"\xC3\x6C" => "\xED\x99\xAF",		"\xC3\x6D" => "\xED\x99\xB2",		"\xC3\x6E" => "\xED\x99\xB3",		"\xC3\x6F" => "\xED\x99\xB5",		"\xC3\x70" => "\xED\x99\xB6",		"\xC3\x71" => "\xED\x99\xB7",		"\xC3\x72" => "\xED\x99\xB8",		"\xC3\x73" => "\xED\x99\xB9",		"\xC3\x74" => "\xED\x99\xBA",		"\xC3\x75" => "\xED\x99\xBB",		"\xC3\x76" => "\xED\x99\xBC",		"\xC3\x77" => "\xED\x99\xBD",		"\xC3\x78" => "\xED\x99\xBE",		"\xC3\x79" => "\xED\x99\xBF",		"\xC3\x7A" => "\xED\x9A\x80",		"\xC3\x81" => "\xED\x9A\x81",		"\xC3\x82" => "\xED\x9A\x82",		"\xC3\x83" => "\xED\x9A\x84",		"\xC3\x84" => "\xED\x9A\x86",		"\xC3\x85" => "\xED\x9A\x87",		"\xC3\x86" => "\xED\x9A\x88",		"\xC3\x87" => "\xED\x9A\x89",		"\xC3\x88" => "\xED\x9A\x8A",		"\xC3\x89" => "\xED\x9A\x8B",		"\xC3\x8A" => "\xED\x9A\x8E",		"\xC3\x8B" => "\xED\x9A\x8F",		"\xC3\x8C" => "\xED\x9A\x91",		"\xC3\x8D" => "\xED\x9A\x92",		"\xC3\x8E" => "\xED\x9A\x93",		"\xC3\x8F" => "\xED\x9A\x95",		"\xC3\x90" => "\xED\x9A\x96",		"\xC3\x91" => "\xED\x9A\x97",		"\xC3\x92" => "\xED\x9A\x98",		"\xC3\x93" => "\xED\x9A\x99",		"\xC3\x94" => "\xED\x9A\x9A",		"\xC3\x95" => "\xED\x9A\x9B",		"\xC3\x96" => "\xED\x9A\x9C",		"\xC3\x97" => "\xED\x9A\x9E",		"\xC3\x98" => "\xED\x9A\xA0",		"\xC3\x99" => "\xED\x9A\xA2",		"\xC3\x9A" => "\xED\x9A\xA3",		"\xC3\x9B" => "\xED\x9A\xA4",		"\xC3\x9C" => "\xED\x9A\xA5",		"\xC3\x9D" => "\xED\x9A\xA6",		"\xC3\x9E" => "\xED\x9A\xA7",		"\xC3\x9F" => "\xED\x9A\xA9",		"\xC3\xA0" => "\xED\x9A\xAA",		"\xC3\xA1" => "\xEC\xB0\xBC",		"\xC3\xA2" => "\xEC\xB0\xBD",		"\xC3\xA3" => "\xEC\xB0\xBE",		"\xC3\xA4" => "\xEC\xB1\x84",		"\xC3\xA5" => "\xEC\xB1\x85",		"\xC3\xA6" => "\xEC\xB1\x88",		"\xC3\xA7" => "\xEC\xB1\x8C",		"\xC3\xA8" => "\xEC\xB1\x94",		"\xC3\xA9" => "\xEC\xB1\x95",		"\xC3\xAA" => "\xEC\xB1\x97",		"\xC3\xAB" => "\xEC\xB1\x98",		"\xC3\xAC" => "\xEC\xB1\x99",		"\xC3\xAD" => "\xEC\xB1\xA0",		"\xC3\xAE" => "\xEC\xB1\xA4",		"\xC3\xAF" => "\xEC\xB1\xA6",		"\xC3\xB0" => "\xEC\xB1\xA8",		"\xC3\xB1" => "\xEC\xB1\xB0",		"\xC3\xB2" => "\xEC\xB1\xB5",		"\xC3\xB3" => "\xEC\xB2\x98",		"\xC3\xB4" => "\xEC\xB2\x99",		"\xC3\xB5" => "\xEC\xB2\x9C",		"\xC3\xB6" => "\xEC\xB2\xA0",		"\xC3\xB7" => "\xEC\xB2\xA8",		"\xC3\xB8" => "\xEC\xB2\xA9",		"\xC3\xB9" => "\xEC\xB2\xAB",		"\xC3\xBA" => "\xEC\xB2\xAC",		"\xC3\xBB" => "\xEC\xB2\xAD",		"\xC3\xBC" => "\xEC\xB2\xB4",		"\xC3\xBD" => "\xEC\xB2\xB5",		"\xC3\xBE" => "\xEC\xB2\xB8",		"\xC3\xBF" => "\xEC\xB2\xBC",		"\xC3\xC0" => "\xEC\xB3\x84",		"\xC3\xC1" => "\xEC\xB3\x85",		"\xC3\xC2" => "\xEC\xB3\x87",		"\xC3\xC3" => "\xEC\xB3\x89",		"\xC3\xC4" => "\xEC\xB3\x90",		"\xC3\xC5" => "\xEC\xB3\x94",		"\xC3\xC6" => "\xEC\xB3\xA4",		"\xC3\xC7" => "\xEC\xB3\xAC",		"\xC3\xC8" => "\xEC\xB3\xB0",		"\xC3\xC9" => "\xEC\xB4\x81",		"\xC3\xCA" => "\xEC\xB4\x88",		"\xC3\xCB" => "\xEC\xB4\x89",		"\xC3\xCC" => "\xEC\xB4\x8C",		"\xC3\xCD" => "\xEC\xB4\x90",		"\xC3\xCE" => "\xEC\xB4\x98",		"\xC3\xCF" => "\xEC\xB4\x99",		"\xC3\xD0" => "\xEC\xB4\x9B",		"\xC3\xD1" => "\xEC\xB4\x9D",		"\xC3\xD2" => "\xEC\xB4\xA4",		"\xC3\xD3" => "\xEC\xB4\xA8",		"\xC3\xD4" => "\xEC\xB4\xAC",		"\xC3\xD5" => "\xEC\xB4\xB9",		"\xC3\xD6" => "\xEC\xB5\x9C",		"\xC3\xD7" => "\xEC\xB5\xA0",		"\xC3\xD8" => "\xEC\xB5\xA4",		"\xC3\xD9" => "\xEC\xB5\xAC",		"\xC3\xDA" => "\xEC\xB5\xAD",		"\xC3\xDB" => "\xEC\xB5\xAF",		"\xC3\xDC" => "\xEC\xB5\xB1",		"\xC3\xDD" => "\xEC\xB5\xB8",		"\xC3\xDE" => "\xEC\xB6\x88",		"\xC3\xDF" => "\xEC\xB6\x94",		"\xC3\xE0" => "\xEC\xB6\x95",		"\xC3\xE1" => "\xEC\xB6\x98",		"\xC3\xE2" => "\xEC\xB6\x9C",		"\xC3\xE3" => "\xEC\xB6\xA4",		"\xC3\xE4" => "\xEC\xB6\xA5",		"\xC3\xE5" => "\xEC\xB6\xA7",		"\xC3\xE6" => "\xEC\xB6\xA9",		"\xC3\xE7" => "\xEC\xB6\xB0",		"\xC3\xE8" => "\xEC\xB7\x84",		"\xC3\xE9" => "\xEC\xB7\x8C",		"\xC3\xEA" => "\xEC\xB7\x90",		"\xC3\xEB" => "\xEC\xB7\xA8",		"\xC3\xEC" => "\xEC\xB7\xAC",		"\xC3\xED" => "\xEC\xB7\xB0",		"\xC3\xEE" => "\xEC\xB7\xB8",		"\xC3\xEF" => "\xEC\xB7\xB9",		"\xC3\xF0" => "\xEC\xB7\xBB",		"\xC3\xF1" => "\xEC\xB7\xBD",		"\xC3\xF2" => "\xEC\xB8\x84",		"\xC3\xF3" => "\xEC\xB8\x88",		"\xC3\xF4" => "\xEC\xB8\x8C",		"\xC3\xF5" => "\xEC\xB8\x94",		"\xC3\xF6" => "\xEC\xB8\x99",		"\xC3\xF7" => "\xEC\xB8\xA0",		"\xC3\xF8" => "\xEC\xB8\xA1",		"\xC3\xF9" => "\xEC\xB8\xA4",		"\xC3\xFA" => "\xEC\xB8\xA8",		"\xC3\xFB" => "\xEC\xB8\xB0",		"\xC3\xFC" => "\xEC\xB8\xB1",		"\xC3\xFD" => "\xEC\xB8\xB3",		"\xC3\xFE" => "\xEC\xB8\xB5",		"\xC4\x41" => "\xED\x9A\xAB",		"\xC4\x42" => "\xED\x9A\xAD",		"\xC4\x43" => "\xED\x9A\xAE",		"\xC4\x44" => "\xED\x9A\xAF",		"\xC4\x45" => "\xED\x9A\xB1",		"\xC4\x46" => "\xED\x9A\xB2",		"\xC4\x47" => "\xED\x9A\xB3",		"\xC4\x48" => "\xED\x9A\xB4",		"\xC4\x49" => "\xED\x9A\xB5",		"\xC4\x4A" => "\xED\x9A\xB6",		"\xC4\x4B" => "\xED\x9A\xB7",		"\xC4\x4C" => "\xED\x9A\xB8",		"\xC4\x4D" => "\xED\x9A\xBA",		"\xC4\x4E" => "\xED\x9A\xBC",		"\xC4\x4F" => "\xED\x9A\xBD",		"\xC4\x50" => "\xED\x9A\xBE",		"\xC4\x51" => "\xED\x9A\xBF",		"\xC4\x52" => "\xED\x9B\x80",		"\xC4\x53" => "\xED\x9B\x81",		"\xC4\x54" => "\xED\x9B\x82",		"\xC4\x55" => "\xED\x9B\x83",		"\xC4\x56" => "\xED\x9B\x86",		"\xC4\x57" => "\xED\x9B\x87",		"\xC4\x58" => "\xED\x9B\x89",		"\xC4\x59" => "\xED\x9B\x8A",		"\xC4\x5A" => "\xED\x9B\x8B",		"\xC4\x61" => "\xED\x9B\x8D",		"\xC4\x62" => "\xED\x9B\x8E",		"\xC4\x63" => "\xED\x9B\x8F",		"\xC4\x64" => "\xED\x9B\x90",		"\xC4\x65" => "\xED\x9B\x92",		"\xC4\x66" => "\xED\x9B\x93",		"\xC4\x67" => "\xED\x9B\x95",		"\xC4\x68" => "\xED\x9B\x96",		"\xC4\x69" => "\xED\x9B\x98",		"\xC4\x6A" => "\xED\x9B\x9A",		"\xC4\x6B" => "\xED\x9B\x9B",		"\xC4\x6C" => "\xED\x9B\x9C",		"\xC4\x6D" => "\xED\x9B\x9D",		"\xC4\x6E" => "\xED\x9B\x9E",		"\xC4\x6F" => "\xED\x9B\x9F",		"\xC4\x70" => "\xED\x9B\xA1",		"\xC4\x71" => "\xED\x9B\xA2",		"\xC4\x72" => "\xED\x9B\xA3",		"\xC4\x73" => "\xED\x9B\xA5",		"\xC4\x74" => "\xED\x9B\xA6",		"\xC4\x75" => "\xED\x9B\xA7",		"\xC4\x76" => "\xED\x9B\xA9",		"\xC4\x77" => "\xED\x9B\xAA",		"\xC4\x78" => "\xED\x9B\xAB",		"\xC4\x79" => "\xED\x9B\xAC",		"\xC4\x7A" => "\xED\x9B\xAD",		"\xC4\x81" => "\xED\x9B\xAE",		"\xC4\x82" => "\xED\x9B\xAF",		"\xC4\x83" => "\xED\x9B\xB1",		"\xC4\x84" => "\xED\x9B\xB2",		"\xC4\x85" => "\xED\x9B\xB3",		"\xC4\x86" => "\xED\x9B\xB4",		"\xC4\x87" => "\xED\x9B\xB6",		"\xC4\x88" => "\xED\x9B\xB7",		"\xC4\x89" => "\xED\x9B\xB8",		"\xC4\x8A" => "\xED\x9B\xB9",		"\xC4\x8B" => "\xED\x9B\xBA",		"\xC4\x8C" => "\xED\x9B\xBB",		"\xC4\x8D" => "\xED\x9B\xBE",		"\xC4\x8E" => "\xED\x9B\xBF",		"\xC4\x8F" => "\xED\x9C\x81",		"\xC4\x90" => "\xED\x9C\x82",		"\xC4\x91" => "\xED\x9C\x83",		"\xC4\x92" => "\xED\x9C\x85",		"\xC4\x93" => "\xED\x9C\x86",		"\xC4\x94" => "\xED\x9C\x87",		"\xC4\x95" => "\xED\x9C\x88",		"\xC4\x96" => "\xED\x9C\x89",		"\xC4\x97" => "\xED\x9C\x8A",		"\xC4\x98" => "\xED\x9C\x8B",		"\xC4\x99" => "\xED\x9C\x8C",		"\xC4\x9A" => "\xED\x9C\x8D",		"\xC4\x9B" => "\xED\x9C\x8E",		"\xC4\x9C" => "\xED\x9C\x8F",		"\xC4\x9D" => "\xED\x9C\x90",		"\xC4\x9E" => "\xED\x9C\x92",		"\xC4\x9F" => "\xED\x9C\x93",		"\xC4\xA0" => "\xED\x9C\x94",		"\xC4\xA1" => "\xEC\xB9\x98",		"\xC4\xA2" => "\xEC\xB9\x99",		"\xC4\xA3" => "\xEC\xB9\x9C",		"\xC4\xA4" => "\xEC\xB9\x9F",		"\xC4\xA5" => "\xEC\xB9\xA0",		"\xC4\xA6" => "\xEC\xB9\xA1",		"\xC4\xA7" => "\xEC\xB9\xA8",		"\xC4\xA8" => "\xEC\xB9\xA9",		"\xC4\xA9" => "\xEC\xB9\xAB",		"\xC4\xAA" => "\xEC\xB9\xAD",		"\xC4\xAB" => "\xEC\xB9\xB4",		"\xC4\xAC" => "\xEC\xB9\xB5",		"\xC4\xAD" => "\xEC\xB9\xB8",		"\xC4\xAE" => "\xEC\xB9\xBC",		"\xC4\xAF" => "\xEC\xBA\x84",		"\xC4\xB0" => "\xEC\xBA\x85",		"\xC4\xB1" => "\xEC\xBA\x87",		"\xC4\xB2" => "\xEC\xBA\x89",		"\xC4\xB3" => "\xEC\xBA\x90",		"\xC4\xB4" => "\xEC\xBA\x91",		"\xC4\xB5" => "\xEC\xBA\x94",		"\xC4\xB6" => "\xEC\xBA\x98",		"\xC4\xB7" => "\xEC\xBA\xA0",		"\xC4\xB8" => "\xEC\xBA\xA1",		"\xC4\xB9" => "\xEC\xBA\xA3",		"\xC4\xBA" => "\xEC\xBA\xA4",		"\xC4\xBB" => "\xEC\xBA\xA5",		"\xC4\xBC" => "\xEC\xBA\xAC",		"\xC4\xBD" => "\xEC\xBA\xAD",		"\xC4\xBE" => "\xEC\xBB\x81",		"\xC4\xBF" => "\xEC\xBB\xA4",		"\xC4\xC0" => "\xEC\xBB\xA5",		"\xC4\xC1" => "\xEC\xBB\xA8",		"\xC4\xC2" => "\xEC\xBB\xAB",		"\xC4\xC3" => "\xEC\xBB\xAC",		"\xC4\xC4" => "\xEC\xBB\xB4",		"\xC4\xC5" => "\xEC\xBB\xB5",		"\xC4\xC6" => "\xEC\xBB\xB7",		"\xC4\xC7" => "\xEC\xBB\xB8",		"\xC4\xC8" => "\xEC\xBB\xB9",		"\xC4\xC9" => "\xEC\xBC\x80",		"\xC4\xCA" => "\xEC\xBC\x81",		"\xC4\xCB" => "\xEC\xBC\x84",		"\xC4\xCC" => "\xEC\xBC\x88",		"\xC4\xCD" => "\xEC\xBC\x90",		"\xC4\xCE" => "\xEC\xBC\x91",		"\xC4\xCF" => "\xEC\xBC\x93",		"\xC4\xD0" => "\xEC\xBC\x95",		"\xC4\xD1" => "\xEC\xBC\x9C",		"\xC4\xD2" => "\xEC\xBC\xA0",		"\xC4\xD3" => "\xEC\xBC\xA4",		"\xC4\xD4" => "\xEC\xBC\xAC",		"\xC4\xD5" => "\xEC\xBC\xAD",		"\xC4\xD6" => "\xEC\xBC\xAF",		"\xC4\xD7" => "\xEC\xBC\xB0",		"\xC4\xD8" => "\xEC\xBC\xB1",		"\xC4\xD9" => "\xEC\xBC\xB8",		"\xC4\xDA" => "\xEC\xBD\x94",		"\xC4\xDB" => "\xEC\xBD\x95",		"\xC4\xDC" => "\xEC\xBD\x98",		"\xC4\xDD" => "\xEC\xBD\x9C",		"\xC4\xDE" => "\xEC\xBD\xA4",		"\xC4\xDF" => "\xEC\xBD\xA5",		"\xC4\xE0" => "\xEC\xBD\xA7",		"\xC4\xE1" => "\xEC\xBD\xA9",		"\xC4\xE2" => "\xEC\xBD\xB0",		"\xC4\xE3" => "\xEC\xBD\xB1",		"\xC4\xE4" => "\xEC\xBD\xB4",		"\xC4\xE5" => "\xEC\xBD\xB8",		"\xC4\xE6" => "\xEC\xBE\x80",		"\xC4\xE7" => "\xEC\xBE\x85",		"\xC4\xE8" => "\xEC\xBE\x8C",		"\xC4\xE9" => "\xEC\xBE\xA1",		"\xC4\xEA" => "\xEC\xBE\xA8",		"\xC4\xEB" => "\xEC\xBE\xB0",		"\xC4\xEC" => "\xEC\xBF\x84",		"\xC4\xED" => "\xEC\xBF\xA0",		"\xC4\xEE" => "\xEC\xBF\xA1",		"\xC4\xEF" => "\xEC\xBF\xA4",		"\xC4\xF0" => "\xEC\xBF\xA8",		"\xC4\xF1" => "\xEC\xBF\xB0",		"\xC4\xF2" => "\xEC\xBF\xB1",		"\xC4\xF3" => "\xEC\xBF\xB3",		"\xC4\xF4" => "\xEC\xBF\xB5",		"\xC4\xF5" => "\xEC\xBF\xBC",		"\xC4\xF6" => "\xED\x80\x80",		"\xC4\xF7" => "\xED\x80\x84",		"\xC4\xF8" => "\xED\x80\x91",		"\xC4\xF9" => "\xED\x80\x98",		"\xC4\xFA" => "\xED\x80\xAD",		"\xC4\xFB" => "\xED\x80\xB4",		"\xC4\xFC" => "\xED\x80\xB5",		"\xC4\xFD" => "\xED\x80\xB8",		"\xC4\xFE" => "\xED\x80\xBC",		"\xC5\x41" => "\xED\x9C\x95",		"\xC5\x42" => "\xED\x9C\x96",		"\xC5\x43" => "\xED\x9C\x97",		"\xC5\x44" => "\xED\x9C\x9A",		"\xC5\x45" => "\xED\x9C\x9B",		"\xC5\x46" => "\xED\x9C\x9D",		"\xC5\x47" => "\xED\x9C\x9E",		"\xC5\x48" => "\xED\x9C\x9F",		"\xC5\x49" => "\xED\x9C\xA1",		"\xC5\x4A" => "\xED\x9C\xA2",		"\xC5\x4B" => "\xED\x9C\xA3",		"\xC5\x4C" => "\xED\x9C\xA4",		"\xC5\x4D" => "\xED\x9C\xA5",		"\xC5\x4E" => "\xED\x9C\xA6",		"\xC5\x4F" => "\xED\x9C\xA7",		"\xC5\x50" => "\xED\x9C\xAA",		"\xC5\x51" => "\xED\x9C\xAC",		"\xC5\x52" => "\xED\x9C\xAE",		"\xC5\x53" => "\xED\x9C\xAF",		"\xC5\x54" => "\xED\x9C\xB0",		"\xC5\x55" => "\xED\x9C\xB1",		"\xC5\x56" => "\xED\x9C\xB2",		"\xC5\x57" => "\xED\x9C\xB3",		"\xC5\x58" => "\xED\x9C\xB6",		"\xC5\x59" => "\xED\x9C\xB7",		"\xC5\x5A" => "\xED\x9C\xB9",		"\xC5\x61" => "\xED\x9C\xBA",		"\xC5\x62" => "\xED\x9C\xBB",		"\xC5\x63" => "\xED\x9C\xBD",		"\xC5\x64" => "\xED\x9C\xBE",		"\xC5\x65" => "\xED\x9C\xBF",		"\xC5\x66" => "\xED\x9D\x80",		"\xC5\x67" => "\xED\x9D\x81",		"\xC5\x68" => "\xED\x9D\x82",		"\xC5\x69" => "\xED\x9D\x83",		"\xC5\x6A" => "\xED\x9D\x85",		"\xC5\x6B" => "\xED\x9D\x86",		"\xC5\x6C" => "\xED\x9D\x88",		"\xC5\x6D" => "\xED\x9D\x8A",		"\xC5\x6E" => "\xED\x9D\x8B",		"\xC5\x6F" => "\xED\x9D\x8C",		"\xC5\x70" => "\xED\x9D\x8D",		"\xC5\x71" => "\xED\x9D\x8E",		"\xC5\x72" => "\xED\x9D\x8F",		"\xC5\x73" => "\xED\x9D\x92",		"\xC5\x74" => "\xED\x9D\x93",		"\xC5\x75" => "\xED\x9D\x95",		"\xC5\x76" => "\xED\x9D\x9A",		"\xC5\x77" => "\xED\x9D\x9B",		"\xC5\x78" => "\xED\x9D\x9C",		"\xC5\x79" => "\xED\x9D\x9D",		"\xC5\x7A" => "\xED\x9D\x9E",		"\xC5\x81" => "\xED\x9D\x9F",		"\xC5\x82" => "\xED\x9D\xA2",		"\xC5\x83" => "\xED\x9D\xA4",		"\xC5\x84" => "\xED\x9D\xA6",		"\xC5\x85" => "\xED\x9D\xA7",		"\xC5\x86" => "\xED\x9D\xA8",		"\xC5\x87" => "\xED\x9D\xAA",		"\xC5\x88" => "\xED\x9D\xAB",		"\xC5\x89" => "\xED\x9D\xAD",		"\xC5\x8A" => "\xED\x9D\xAE",		"\xC5\x8B" => "\xED\x9D\xAF",		"\xC5\x8C" => "\xED\x9D\xB1",		"\xC5\x8D" => "\xED\x9D\xB2",		"\xC5\x8E" => "\xED\x9D\xB3",		"\xC5\x8F" => "\xED\x9D\xB5",		"\xC5\x90" => "\xED\x9D\xB6",		"\xC5\x91" => "\xED\x9D\xB7",		"\xC5\x92" => "\xED\x9D\xB8",		"\xC5\x93" => "\xED\x9D\xB9",		"\xC5\x94" => "\xED\x9D\xBA",		"\xC5\x95" => "\xED\x9D\xBB",		"\xC5\x96" => "\xED\x9D\xBE",		"\xC5\x97" => "\xED\x9D\xBF",		"\xC5\x98" => "\xED\x9E\x80",		"\xC5\x99" => "\xED\x9E\x82",		"\xC5\x9A" => "\xED\x9E\x83",		"\xC5\x9B" => "\xED\x9E\x84",		"\xC5\x9C" => "\xED\x9E\x85",		"\xC5\x9D" => "\xED\x9E\x86",		"\xC5\x9E" => "\xED\x9E\x87",		"\xC5\x9F" => "\xED\x9E\x8A",		"\xC5\xA0" => "\xED\x9E\x8B",		"\xC5\xA1" => "\xED\x81\x84",		"\xC5\xA2" => "\xED\x81\x85",		"\xC5\xA3" => "\xED\x81\x87",		"\xC5\xA4" => "\xED\x81\x89",		"\xC5\xA5" => "\xED\x81\x90",		"\xC5\xA6" => "\xED\x81\x94",		"\xC5\xA7" => "\xED\x81\x98",		"\xC5\xA8" => "\xED\x81\xA0",		"\xC5\xA9" => "\xED\x81\xAC",		"\xC5\xAA" => "\xED\x81\xAD",		"\xC5\xAB" => "\xED\x81\xB0",		"\xC5\xAC" => "\xED\x81\xB4",		"\xC5\xAD" => "\xED\x81\xBC",		"\xC5\xAE" => "\xED\x81\xBD",		"\xC5\xAF" => "\xED\x82\x81",		"\xC5\xB0" => "\xED\x82\xA4",		"\xC5\xB1" => "\xED\x82\xA5",		"\xC5\xB2" => "\xED\x82\xA8",		"\xC5\xB3" => "\xED\x82\xAC",		"\xC5\xB4" => "\xED\x82\xB4",		"\xC5\xB5" => "\xED\x82\xB5",		"\xC5\xB6" => "\xED\x82\xB7",		"\xC5\xB7" => "\xED\x82\xB9",		"\xC5\xB8" => "\xED\x83\x80",		"\xC5\xB9" => "\xED\x83\x81",		"\xC5\xBA" => "\xED\x83\x84",		"\xC5\xBB" => "\xED\x83\x88",		"\xC5\xBC" => "\xED\x83\x89",		"\xC5\xBD" => "\xED\x83\x90",		"\xC5\xBE" => "\xED\x83\x91",		"\xC5\xBF" => "\xED\x83\x93",		"\xC5\xC0" => "\xED\x83\x94",		"\xC5\xC1" => "\xED\x83\x95",		"\xC5\xC2" => "\xED\x83\x9C",		"\xC5\xC3" => "\xED\x83\x9D",		"\xC5\xC4" => "\xED\x83\xA0",		"\xC5\xC5" => "\xED\x83\xA4",		"\xC5\xC6" => "\xED\x83\xAC",		"\xC5\xC7" => "\xED\x83\xAD",		"\xC5\xC8" => "\xED\x83\xAF",		"\xC5\xC9" => "\xED\x83\xB0",		"\xC5\xCA" => "\xED\x83\xB1",		"\xC5\xCB" => "\xED\x83\xB8",		"\xC5\xCC" => "\xED\x84\x8D",		"\xC5\xCD" => "\xED\x84\xB0",		"\xC5\xCE" => "\xED\x84\xB1",		"\xC5\xCF" => "\xED\x84\xB4",		"\xC5\xD0" => "\xED\x84\xB8",		"\xC5\xD1" => "\xED\x84\xBA",		"\xC5\xD2" => "\xED\x85\x80",		"\xC5\xD3" => "\xED\x85\x81",		"\xC5\xD4" => "\xED\x85\x83",		"\xC5\xD5" => "\xED\x85\x84",		"\xC5\xD6" => "\xED\x85\x85",		"\xC5\xD7" => "\xED\x85\x8C",		"\xC5\xD8" => "\xED\x85\x8D",		"\xC5\xD9" => "\xED\x85\x90",		"\xC5\xDA" => "\xED\x85\x94",		"\xC5\xDB" => "\xED\x85\x9C",		"\xC5\xDC" => "\xED\x85\x9D",		"\xC5\xDD" => "\xED\x85\x9F",		"\xC5\xDE" => "\xED\x85\xA1",		"\xC5\xDF" => "\xED\x85\xA8",		"\xC5\xE0" => "\xED\x85\xAC",		"\xC5\xE1" => "\xED\x85\xBC",		"\xC5\xE2" => "\xED\x86\x84",		"\xC5\xE3" => "\xED\x86\x88",		"\xC5\xE4" => "\xED\x86\xA0",		"\xC5\xE5" => "\xED\x86\xA1",		"\xC5\xE6" => "\xED\x86\xA4",		"\xC5\xE7" => "\xED\x86\xA8",		"\xC5\xE8" => "\xED\x86\xB0",		"\xC5\xE9" => "\xED\x86\xB1",		"\xC5\xEA" => "\xED\x86\xB3",		"\xC5\xEB" => "\xED\x86\xB5",		"\xC5\xEC" => "\xED\x86\xBA",		"\xC5\xED" => "\xED\x86\xBC",		"\xC5\xEE" => "\xED\x87\x80",		"\xC5\xEF" => "\xED\x87\x98",		"\xC5\xF0" => "\xED\x87\xB4",		"\xC5\xF1" => "\xED\x87\xB8",		"\xC5\xF2" => "\xED\x88\x87",		"\xC5\xF3" => "\xED\x88\x89",		"\xC5\xF4" => "\xED\x88\x90",		"\xC5\xF5" => "\xED\x88\xAC",		"\xC5\xF6" => "\xED\x88\xAD",		"\xC5\xF7" => "\xED\x88\xB0",		"\xC5\xF8" => "\xED\x88\xB4",		"\xC5\xF9" => "\xED\x88\xBC",		"\xC5\xFA" => "\xED\x88\xBD",		"\xC5\xFB" => "\xED\x88\xBF",		"\xC5\xFC" => "\xED\x89\x81",		"\xC5\xFD" => "\xED\x89\x88",		"\xC5\xFE" => "\xED\x89\x9C",		"\xC6\x41" => "\xED\x9E\x8D",		"\xC6\x42" => "\xED\x9E\x8E",		"\xC6\x43" => "\xED\x9E\x8F",		"\xC6\x44" => "\xED\x9E\x91",		"\xC6\x45" => "\xED\x9E\x92",		"\xC6\x46" => "\xED\x9E\x93",		"\xC6\x47" => "\xED\x9E\x94",		"\xC6\x48" => "\xED\x9E\x95",		"\xC6\x49" => "\xED\x9E\x96",		"\xC6\x4A" => "\xED\x9E\x97",		"\xC6\x4B" => "\xED\x9E\x9A",		"\xC6\x4C" => "\xED\x9E\x9C",		"\xC6\x4D" => "\xED\x9E\x9E",		"\xC6\x4E" => "\xED\x9E\x9F",		"\xC6\x4F" => "\xED\x9E\xA0",		"\xC6\x50" => "\xED\x9E\xA1",		"\xC6\x51" => "\xED\x9E\xA2",		"\xC6\x52" => "\xED\x9E\xA3",		"\xC6\xA1" => "\xED\x89\xA4",		"\xC6\xA2" => "\xED\x8A\x80",		"\xC6\xA3" => "\xED\x8A\x81",		"\xC6\xA4" => "\xED\x8A\x84",		"\xC6\xA5" => "\xED\x8A\x88",		"\xC6\xA6" => "\xED\x8A\x90",		"\xC6\xA7" => "\xED\x8A\x91",		"\xC6\xA8" => "\xED\x8A\x95",		"\xC6\xA9" => "\xED\x8A\x9C",		"\xC6\xAA" => "\xED\x8A\xA0",		"\xC6\xAB" => "\xED\x8A\xA4",		"\xC6\xAC" => "\xED\x8A\xAC",		"\xC6\xAD" => "\xED\x8A\xB1",		"\xC6\xAE" => "\xED\x8A\xB8",		"\xC6\xAF" => "\xED\x8A\xB9",		"\xC6\xB0" => "\xED\x8A\xBC",		"\xC6\xB1" => "\xED\x8A\xBF",		"\xC6\xB2" => "\xED\x8B\x80",		"\xC6\xB3" => "\xED\x8B\x82",		"\xC6\xB4" => "\xED\x8B\x88",		"\xC6\xB5" => "\xED\x8B\x89",		"\xC6\xB6" => "\xED\x8B\x8B",		"\xC6\xB7" => "\xED\x8B\x94",		"\xC6\xB8" => "\xED\x8B\x98",		"\xC6\xB9" => "\xED\x8B\x9C",		"\xC6\xBA" => "\xED\x8B\xA4",		"\xC6\xBB" => "\xED\x8B\xA5",		"\xC6\xBC" => "\xED\x8B\xB0",		"\xC6\xBD" => "\xED\x8B\xB1",		"\xC6\xBE" => "\xED\x8B\xB4",		"\xC6\xBF" => "\xED\x8B\xB8",		"\xC6\xC0" => "\xED\x8C\x80",		"\xC6\xC1" => "\xED\x8C\x81",		"\xC6\xC2" => "\xED\x8C\x83",		"\xC6\xC3" => "\xED\x8C\x85",		"\xC6\xC4" => "\xED\x8C\x8C",		"\xC6\xC5" => "\xED\x8C\x8D",		"\xC6\xC6" => "\xED\x8C\x8E",		"\xC6\xC7" => "\xED\x8C\x90",		"\xC6\xC8" => "\xED\x8C\x94",		"\xC6\xC9" => "\xED\x8C\x96",		"\xC6\xCA" => "\xED\x8C\x9C",		"\xC6\xCB" => "\xED\x8C\x9D",		"\xC6\xCC" => "\xED\x8C\x9F",		"\xC6\xCD" => "\xED\x8C\xA0",		"\xC6\xCE" => "\xED\x8C\xA1",		"\xC6\xCF" => "\xED\x8C\xA5",		"\xC6\xD0" => "\xED\x8C\xA8",		"\xC6\xD1" => "\xED\x8C\xA9",		"\xC6\xD2" => "\xED\x8C\xAC",		"\xC6\xD3" => "\xED\x8C\xB0",		"\xC6\xD4" => "\xED\x8C\xB8",		"\xC6\xD5" => "\xED\x8C\xB9",		"\xC6\xD6" => "\xED\x8C\xBB",		"\xC6\xD7" => "\xED\x8C\xBC",		"\xC6\xD8" => "\xED\x8C\xBD",		"\xC6\xD9" => "\xED\x8D\x84",		"\xC6\xDA" => "\xED\x8D\x85",		"\xC6\xDB" => "\xED\x8D\xBC",		"\xC6\xDC" => "\xED\x8D\xBD",		"\xC6\xDD" => "\xED\x8E\x80",		"\xC6\xDE" => "\xED\x8E\x84",		"\xC6\xDF" => "\xED\x8E\x8C",		"\xC6\xE0" => "\xED\x8E\x8D",		"\xC6\xE1" => "\xED\x8E\x8F",		"\xC6\xE2" => "\xED\x8E\x90",		"\xC6\xE3" => "\xED\x8E\x91",		"\xC6\xE4" => "\xED\x8E\x98",		"\xC6\xE5" => "\xED\x8E\x99",		"\xC6\xE6" => "\xED\x8E\x9C",		"\xC6\xE7" => "\xED\x8E\xA0",		"\xC6\xE8" => "\xED\x8E\xA8",		"\xC6\xE9" => "\xED\x8E\xA9",		"\xC6\xEA" => "\xED\x8E\xAB",		"\xC6\xEB" => "\xED\x8E\xAD",		"\xC6\xEC" => "\xED\x8E\xB4",		"\xC6\xED" => "\xED\x8E\xB8",		"\xC6\xEE" => "\xED\x8E\xBC",		"\xC6\xEF" => "\xED\x8F\x84",		"\xC6\xF0" => "\xED\x8F\x85",		"\xC6\xF1" => "\xED\x8F\x88",		"\xC6\xF2" => "\xED\x8F\x89",		"\xC6\xF3" => "\xED\x8F\x90",		"\xC6\xF4" => "\xED\x8F\x98",		"\xC6\xF5" => "\xED\x8F\xA1",		"\xC6\xF6" => "\xED\x8F\xA3",		"\xC6\xF7" => "\xED\x8F\xAC",		"\xC6\xF8" => "\xED\x8F\xAD",		"\xC6\xF9" => "\xED\x8F\xB0",		"\xC6\xFA" => "\xED\x8F\xB4",		"\xC6\xFB" => "\xED\x8F\xBC",		"\xC6\xFC" => "\xED\x8F\xBD",		"\xC6\xFD" => "\xED\x8F\xBF",		"\xC6\xFE" => "\xED\x90\x81",		"\xC7\xA1" => "\xED\x90\x88",		"\xC7\xA2" => "\xED\x90\x9D",		"\xC7\xA3" => "\xED\x91\x80",		"\xC7\xA4" => "\xED\x91\x84",		"\xC7\xA5" => "\xED\x91\x9C",		"\xC7\xA6" => "\xED\x91\xA0",		"\xC7\xA7" => "\xED\x91\xA4",		"\xC7\xA8" => "\xED\x91\xAD",		"\xC7\xA9" => "\xED\x91\xAF",		"\xC7\xAA" => "\xED\x91\xB8",		"\xC7\xAB" => "\xED\x91\xB9",		"\xC7\xAC" => "\xED\x91\xBC",		"\xC7\xAD" => "\xED\x91\xBF",		"\xC7\xAE" => "\xED\x92\x80",		"\xC7\xAF" => "\xED\x92\x82",		"\xC7\xB0" => "\xED\x92\x88",		"\xC7\xB1" => "\xED\x92\x89",		"\xC7\xB2" => "\xED\x92\x8B",		"\xC7\xB3" => "\xED\x92\x8D",		"\xC7\xB4" => "\xED\x92\x94",		"\xC7\xB5" => "\xED\x92\xA9",		"\xC7\xB6" => "\xED\x93\x8C",		"\xC7\xB7" => "\xED\x93\x90",		"\xC7\xB8" => "\xED\x93\x94",		"\xC7\xB9" => "\xED\x93\x9C",		"\xC7\xBA" => "\xED\x93\x9F",		"\xC7\xBB" => "\xED\x93\xA8",		"\xC7\xBC" => "\xED\x93\xAC",		"\xC7\xBD" => "\xED\x93\xB0",		"\xC7\xBE" => "\xED\x93\xB8",		"\xC7\xBF" => "\xED\x93\xBB",		"\xC7\xC0" => "\xED\x93\xBD",		"\xC7\xC1" => "\xED\x94\x84",		"\xC7\xC2" => "\xED\x94\x88",		"\xC7\xC3" => "\xED\x94\x8C",		"\xC7\xC4" => "\xED\x94\x94",		"\xC7\xC5" => "\xED\x94\x95",		"\xC7\xC6" => "\xED\x94\x97",		"\xC7\xC7" => "\xED\x94\xBC",		"\xC7\xC8" => "\xED\x94\xBD",		"\xC7\xC9" => "\xED\x95\x80",		"\xC7\xCA" => "\xED\x95\x84",		"\xC7\xCB" => "\xED\x95\x8C",		"\xC7\xCC" => "\xED\x95\x8D",		"\xC7\xCD" => "\xED\x95\x8F",		"\xC7\xCE" => "\xED\x95\x91",		"\xC7\xCF" => "\xED\x95\x98",		"\xC7\xD0" => "\xED\x95\x99",		"\xC7\xD1" => "\xED\x95\x9C",		"\xC7\xD2" => "\xED\x95\xA0",		"\xC7\xD3" => "\xED\x95\xA5",		"\xC7\xD4" => "\xED\x95\xA8",		"\xC7\xD5" => "\xED\x95\xA9",		"\xC7\xD6" => "\xED\x95\xAB",		"\xC7\xD7" => "\xED\x95\xAD",		"\xC7\xD8" => "\xED\x95\xB4",		"\xC7\xD9" => "\xED\x95\xB5",		"\xC7\xDA" => "\xED\x95\xB8",		"\xC7\xDB" => "\xED\x95\xBC",		"\xC7\xDC" => "\xED\x96\x84",		"\xC7\xDD" => "\xED\x96\x85",		"\xC7\xDE" => "\xED\x96\x87",		"\xC7\xDF" => "\xED\x96\x88",		"\xC7\xE0" => "\xED\x96\x89",		"\xC7\xE1" => "\xED\x96\x90",		"\xC7\xE2" => "\xED\x96\xA5",		"\xC7\xE3" => "\xED\x97\x88",		"\xC7\xE4" => "\xED\x97\x89",		"\xC7\xE5" => "\xED\x97\x8C",		"\xC7\xE6" => "\xED\x97\x90",		"\xC7\xE7" => "\xED\x97\x92",		"\xC7\xE8" => "\xED\x97\x98",		"\xC7\xE9" => "\xED\x97\x99",		"\xC7\xEA" => "\xED\x97\x9B",		"\xC7\xEB" => "\xED\x97\x9D",		"\xC7\xEC" => "\xED\x97\xA4",		"\xC7\xED" => "\xED\x97\xA5",		"\xC7\xEE" => "\xED\x97\xA8",		"\xC7\xEF" => "\xED\x97\xAC",		"\xC7\xF0" => "\xED\x97\xB4",		"\xC7\xF1" => "\xED\x97\xB5",		"\xC7\xF2" => "\xED\x97\xB7",		"\xC7\xF3" => "\xED\x97\xB9",		"\xC7\xF4" => "\xED\x98\x80",		"\xC7\xF5" => "\xED\x98\x81",		"\xC7\xF6" => "\xED\x98\x84",		"\xC7\xF7" => "\xED\x98\x88",		"\xC7\xF8" => "\xED\x98\x90",		"\xC7\xF9" => "\xED\x98\x91",		"\xC7\xFA" => "\xED\x98\x93",		"\xC7\xFB" => "\xED\x98\x94",		"\xC7\xFC" => "\xED\x98\x95",		"\xC7\xFD" => "\xED\x98\x9C",		"\xC7\xFE" => "\xED\x98\xA0",		"\xC8\xA1" => "\xED\x98\xA4",		"\xC8\xA2" => "\xED\x98\xAD",		"\xC8\xA3" => "\xED\x98\xB8",		"\xC8\xA4" => "\xED\x98\xB9",		"\xC8\xA5" => "\xED\x98\xBC",		"\xC8\xA6" => "\xED\x99\x80",		"\xC8\xA7" => "\xED\x99\x85",		"\xC8\xA8" => "\xED\x99\x88",		"\xC8\xA9" => "\xED\x99\x89",		"\xC8\xAA" => "\xED\x99\x8B",		"\xC8\xAB" => "\xED\x99\x8D",		"\xC8\xAC" => "\xED\x99\x91",		"\xC8\xAD" => "\xED\x99\x94",		"\xC8\xAE" => "\xED\x99\x95",		"\xC8\xAF" => "\xED\x99\x98",		"\xC8\xB0" => "\xED\x99\x9C",		"\xC8\xB1" => "\xED\x99\xA7",		"\xC8\xB2" => "\xED\x99\xA9",		"\xC8\xB3" => "\xED\x99\xB0",		"\xC8\xB4" => "\xED\x99\xB1",		"\xC8\xB5" => "\xED\x99\xB4",		"\xC8\xB6" => "\xED\x9A\x83",		"\xC8\xB7" => "\xED\x9A\x85",		"\xC8\xB8" => "\xED\x9A\x8C",		"\xC8\xB9" => "\xED\x9A\x8D",		"\xC8\xBA" => "\xED\x9A\x90",		"\xC8\xBB" => "\xED\x9A\x94",		"\xC8\xBC" => "\xED\x9A\x9D",		"\xC8\xBD" => "\xED\x9A\x9F",		"\xC8\xBE" => "\xED\x9A\xA1",		"\xC8\xBF" => "\xED\x9A\xA8",		"\xC8\xC0" => "\xED\x9A\xAC",		"\xC8\xC1" => "\xED\x9A\xB0",		"\xC8\xC2" => "\xED\x9A\xB9",		"\xC8\xC3" => "\xED\x9A\xBB",		"\xC8\xC4" => "\xED\x9B\x84",		"\xC8\xC5" => "\xED\x9B\x85",		"\xC8\xC6" => "\xED\x9B\x88",		"\xC8\xC7" => "\xED\x9B\x8C",		"\xC8\xC8" => "\xED\x9B\x91",		"\xC8\xC9" => "\xED\x9B\x94",		"\xC8\xCA" => "\xED\x9B\x97",		"\xC8\xCB" => "\xED\x9B\x99",		"\xC8\xCC" => "\xED\x9B\xA0",		"\xC8\xCD" => "\xED\x9B\xA4",		"\xC8\xCE" => "\xED\x9B\xA8",		"\xC8\xCF" => "\xED\x9B\xB0",		"\xC8\xD0" => "\xED\x9B\xB5",		"\xC8\xD1" => "\xED\x9B\xBC",		"\xC8\xD2" => "\xED\x9B\xBD",		"\xC8\xD3" => "\xED\x9C\x80",		"\xC8\xD4" => "\xED\x9C\x84",		"\xC8\xD5" => "\xED\x9C\x91",		"\xC8\xD6" => "\xED\x9C\x98",		"\xC8\xD7" => "\xED\x9C\x99",		"\xC8\xD8" => "\xED\x9C\x9C",		"\xC8\xD9" => "\xED\x9C\xA0",		"\xC8\xDA" => "\xED\x9C\xA8",		"\xC8\xDB" => "\xED\x9C\xA9",		"\xC8\xDC" => "\xED\x9C\xAB",		"\xC8\xDD" => "\xED\x9C\xAD",		"\xC8\xDE" => "\xED\x9C\xB4",		"\xC8\xDF" => "\xED\x9C\xB5",		"\xC8\xE0" => "\xED\x9C\xB8",		"\xC8\xE1" => "\xED\x9C\xBC",		"\xC8\xE2" => "\xED\x9D\x84",		"\xC8\xE3" => "\xED\x9D\x87",		"\xC8\xE4" => "\xED\x9D\x89",		"\xC8\xE5" => "\xED\x9D\x90",		"\xC8\xE6" => "\xED\x9D\x91",		"\xC8\xE7" => "\xED\x9D\x94",		"\xC8\xE8" => "\xED\x9D\x96",		"\xC8\xE9" => "\xED\x9D\x97",		"\xC8\xEA" => "\xED\x9D\x98",		"\xC8\xEB" => "\xED\x9D\x99",		"\xC8\xEC" => "\xED\x9D\xA0",		"\xC8\xED" => "\xED\x9D\xA1",		"\xC8\xEE" => "\xED\x9D\xA3",		"\xC8\xEF" => "\xED\x9D\xA5",		"\xC8\xF0" => "\xED\x9D\xA9",		"\xC8\xF1" => "\xED\x9D\xAC",		"\xC8\xF2" => "\xED\x9D\xB0",		"\xC8\xF3" => "\xED\x9D\xB4",		"\xC8\xF4" => "\xED\x9D\xBC",		"\xC8\xF5" => "\xED\x9D\xBD",		"\xC8\xF6" => "\xED\x9E\x81",		"\xC8\xF7" => "\xED\x9E\x88",		"\xC8\xF8" => "\xED\x9E\x89",		"\xC8\xF9" => "\xED\x9E\x8C",		"\xC8\xFA" => "\xED\x9E\x90",		"\xC8\xFB" => "\xED\x9E\x98",		"\xC8\xFC" => "\xED\x9E\x99",		"\xC8\xFD" => "\xED\x9E\x9B",		"\xC8\xFE" => "\xED\x9E\x9D",		"\xCA\xA1" => "\xE4\xBC\xBD",		"\xCA\xA2" => "\xE4\xBD\xB3",		"\xCA\xA3" => "\xE5\x81\x87",		"\xCA\xA4" => "\xE5\x83\xB9",		"\xCA\xA5" => "\xE5\x8A\xA0",		"\xCA\xA6" => "\xE5\x8F\xAF",		"\xCA\xA7" => "\xE5\x91\xB5",		"\xCA\xA8" => "\xE5\x93\xA5",		"\xCA\xA9" => "\xE5\x98\x89",		"\xCA\xAA" => "\xE5\xAB\x81",		"\xCA\xAB" => "\xE5\xAE\xB6",		"\xCA\xAC" => "\xE6\x9A\x87",		"\xCA\xAD" => "\xE6\x9E\xB6",		"\xCA\xAE" => "\xE6\x9E\xB7",		"\xCA\xAF" => "\xE6\x9F\xAF",		"\xCA\xB0" => "\xE6\xAD\x8C",		"\xCA\xB1" => "\xE7\x8F\x82",		"\xCA\xB2" => "\xE7\x97\x82",		"\xCA\xB3" => "\xE7\xA8\xBC",		"\xCA\xB4" => "\xE8\x8B\x9B",		"\xCA\xB5" => "\xE8\x8C\x84",		"\xCA\xB6" => "\xE8\xA1\x97",		"\xCA\xB7" => "\xE8\xA2\x88",		"\xCA\xB8" => "\xE8\xA8\xB6",		"\xCA\xB9" => "\xE8\xB3\x88",		"\xCA\xBA" => "\xE8\xB7\x8F",		"\xCA\xBB" => "\xE8\xBB\xBB",		"\xCA\xBC" => "\xE8\xBF\xA6",		"\xCA\xBD" => "\xE9\xA7\x95",		"\xCA\xBE" => "\xE5\x88\xBB",		"\xCA\xBF" => "\xE5\x8D\xB4",		"\xCA\xC0" => "\xE5\x90\x84",		"\xCA\xC1" => "\xE6\x81\xAA",		"\xCA\xC2" => "\xE6\x85\xA4",		"\xCA\xC3" => "\xE6\xAE\xBC",		"\xCA\xC4" => "\xE7\x8F\x8F",		"\xCA\xC5" => "\xE8\x84\x9A",		"\xCA\xC6" => "\xE8\xA6\xBA",		"\xCA\xC7" => "\xE8\xA7\x92",		"\xCA\xC8" => "\xE9\x96\xA3",		"\xCA\xC9" => "\xE4\xBE\x83",		"\xCA\xCA" => "\xE5\x88\x8A",		"\xCA\xCB" => "\xE5\xA2\xBE",		"\xCA\xCC" => "\xE5\xA5\xB8",		"\xCA\xCD" => "\xE5\xA7\xA6",		"\xCA\xCE" => "\xE5\xB9\xB2",		"\xCA\xCF" => "\xE5\xB9\xB9",		"\xCA\xD0" => "\xE6\x87\x87",		"\xCA\xD1" => "\xE6\x8F\x80",		"\xCA\xD2" => "\xE6\x9D\x86",		"\xCA\xD3" => "\xE6\x9F\xAC",		"\xCA\xD4" => "\xE6\xA1\xBF",		"\xCA\xD5" => "\xE6\xBE\x97",		"\xCA\xD6" => "\xE7\x99\x8E",		"\xCA\xD7" => "\xE7\x9C\x8B",		"\xCA\xD8" => "\xE7\xA3\xB5",		"\xCA\xD9" => "\xE7\xA8\x88",		"\xCA\xDA" => "\xE7\xAB\xBF",		"\xCA\xDB" => "\xE7\xB0\xA1",		"\xCA\xDC" => "\xE8\x82\x9D",		"\xCA\xDD" => "\xE8\x89\xAE",		"\xCA\xDE" => "\xE8\x89\xB1",		"\xCA\xDF" => "\xE8\xAB\xAB",		"\xCA\xE0" => "\xE9\x96\x93",		"\xCA\xE1" => "\xE4\xB9\xAB",		"\xCA\xE2" => "\xE5\x96\x9D",		"\xCA\xE3" => "\xE6\x9B\xB7",		"\xCA\xE4" => "\xE6\xB8\xB4",		"\xCA\xE5" => "\xE7\xA2\xA3",		"\xCA\xE6" => "\xE7\xAB\xAD",		"\xCA\xE7" => "\xE8\x91\x9B",		"\xCA\xE8" => "\xE8\xA4\x90",		"\xCA\xE9" => "\xE8\x9D\x8E",		"\xCA\xEA" => "\xE9\x9E\xA8",		"\xCA\xEB" => "\xE5\x8B\x98",		"\xCA\xEC" => "\xE5\x9D\x8E",		"\xCA\xED" => "\xE5\xA0\xAA",		"\xCA\xEE" => "\xE5\xB5\x8C",		"\xCA\xEF" => "\xE6\x84\x9F",		"\xCA\xF0" => "\xE6\x86\xBE",		"\xCA\xF1" => "\xE6\x88\xA1",		"\xCA\xF2" => "\xE6\x95\xA2",		"\xCA\xF3" => "\xE6\x9F\x91",		"\xCA\xF4" => "\xE6\xA9\x84",		"\xCA\xF5" => "\xE6\xB8\x9B",		"\xCA\xF6" => "\xE7\x94\x98",		"\xCA\xF7" => "\xE7\x96\xB3",		"\xCA\xF8" => "\xE7\x9B\xA3",		"\xCA\xF9" => "\xE7\x9E\xB0",		"\xCA\xFA" => "\xE7\xB4\xBA",		"\xCA\xFB" => "\xE9\x82\xAF",		"\xCA\xFC" => "\xE9\x91\x91",		"\xCA\xFD" => "\xE9\x91\x92",		"\xCA\xFE" => "\xE9\xBE\x95",		"\xCB\xA1" => "\xE5\x8C\xA3",		"\xCB\xA2" => "\xE5\xB2\xAC",		"\xCB\xA3" => "\xE7\x94\xB2",		"\xCB\xA4" => "\xE8\x83\x9B",		"\xCB\xA5" => "\xE9\x89\x80",		"\xCB\xA6" => "\xE9\x96\x98",		"\xCB\xA7" => "\xE5\x89\x9B",		"\xCB\xA8" => "\xE5\xA0\x88",		"\xCB\xA9" => "\xE5\xA7\x9C",		"\xCB\xAA" => "\xE5\xB2\xA1",		"\xCB\xAB" => "\xE5\xB4\x97",		"\xCB\xAC" => "\xE5\xBA\xB7",		"\xCB\xAD" => "\xE5\xBC\xBA",		"\xCB\xAE" => "\xE5\xBD\x8A",		"\xCB\xAF" => "\xE6\x85\xB7",		"\xCB\xB0" => "\xE6\xB1\x9F",		"\xCB\xB1" => "\xE7\x95\xBA",		"\xCB\xB2" => "\xE7\x96\x86",		"\xCB\xB3" => "\xE7\xB3\xA0",		"\xCB\xB4" => "\xE7\xB5\xB3",		"\xCB\xB5" => "\xE7\xB6\xB1",		"\xCB\xB6" => "\xE7\xBE\x8C",		"\xCB\xB7" => "\xE8\x85\x94",		"\xCB\xB8" => "\xE8\x88\xA1",		"\xCB\xB9" => "\xE8\x96\x91",		"\xCB\xBA" => "\xE8\xA5\x81",		"\xCB\xBB" => "\xE8\xAC\x9B",		"\xCB\xBC" => "\xE9\x8B\xBC",		"\xCB\xBD" => "\xE9\x99\x8D",		"\xCB\xBE" => "\xE9\xB1\x87",		"\xCB\xBF" => "\xE4\xBB\x8B",		"\xCB\xC0" => "\xE4\xBB\xB7",		"\xCB\xC1" => "\xE5\x80\x8B",		"\xCB\xC2" => "\xE5\x87\xB1",		"\xCB\xC3" => "\xE5\xA1\x8F",		"\xCB\xC4" => "\xE6\x84\xB7",		"\xCB\xC5" => "\xE6\x84\xBE",		"\xCB\xC6" => "\xE6\x85\xA8",		"\xCB\xC7" => "\xE6\x94\xB9",		"\xCB\xC8" => "\xE6\xA7\xAA",		"\xCB\xC9" => "\xE6\xBC\x91",		"\xCB\xCA" => "\xE7\x96\xA5",		"\xCB\xCB" => "\xE7\x9A\x86",		"\xCB\xCC" => "\xE7\x9B\x96",		"\xCB\xCD" => "\xE7\xAE\x87",		"\xCB\xCE" => "\xE8\x8A\xA5",		"\xCB\xCF" => "\xE8\x93\x8B",		"\xCB\xD0" => "\xEF\xA4\x80",		"\xCB\xD1" => "\xE9\x8E\xA7",		"\xCB\xD2" => "\xE9\x96\x8B",		"\xCB\xD3" => "\xE5\x96\x80",		"\xCB\xD4" => "\xE5\xAE\xA2",		"\xCB\xD5" => "\xE5\x9D\x91",		"\xCB\xD6" => "\xEF\xA4\x81",		"\xCB\xD7" => "\xE7\xB2\xB3",		"\xCB\xD8" => "\xE7\xBE\xB9",		"\xCB\xD9" => "\xE9\x86\xB5",		"\xCB\xDA" => "\xE5\x80\xA8",		"\xCB\xDB" => "\xE5\x8E\xBB",		"\xCB\xDC" => "\xE5\xB1\x85",		"\xCB\xDD" => "\xE5\xB7\xA8",		"\xCB\xDE" => "\xE6\x8B\x92",		"\xCB\xDF" => "\xE6\x8D\xAE",		"\xCB\xE0" => "\xE6\x93\x9A",		"\xCB\xE1" => "\xE6\x93\xA7",		"\xCB\xE2" => "\xE6\xB8\xA0",		"\xCB\xE3" => "\xE7\x82\xAC",		"\xCB\xE4" => "\xE7\xA5\x9B",		"\xCB\xE5" => "\xE8\xB7\x9D",		"\xCB\xE6" => "\xE8\xB8\x9E",		"\xCB\xE7" => "\xEF\xA4\x82",		"\xCB\xE8" => "\xE9\x81\xBD",		"\xCB\xE9" => "\xE9\x89\x85",		"\xCB\xEA" => "\xE9\x8B\xB8",		"\xCB\xEB" => "\xE4\xB9\xBE",		"\xCB\xEC" => "\xE4\xBB\xB6",		"\xCB\xED" => "\xE5\x81\xA5",		"\xCB\xEE" => "\xE5\xB7\xBE",		"\xCB\xEF" => "\xE5\xBB\xBA",		"\xCB\xF0" => "\xE6\x84\x86",		"\xCB\xF1" => "\xE6\xA5\x97",		"\xCB\xF2" => "\xE8\x85\xB1",		"\xCB\xF3" => "\xE8\x99\x94",		"\xCB\xF4" => "\xE8\xB9\x87",		"\xCB\xF5" => "\xE9\x8D\xB5",		"\xCB\xF6" => "\xE9\xA8\xAB",		"\xCB\xF7" => "\xE4\xB9\x9E",		"\xCB\xF8" => "\xE5\x82\x91",		"\xCB\xF9" => "\xE6\x9D\xB0",		"\xCB\xFA" => "\xE6\xA1\x80",		"\xCB\xFB" => "\xE5\x84\x89",		"\xCB\xFC" => "\xE5\x8A\x8D",		"\xCB\xFD" => "\xE5\x8A\x92",		"\xCB\xFE" => "\xE6\xAA\xA2",		"\xCC\xA1" => "\xE7\x9E\xBC",		"\xCC\xA2" => "\xE9\x88\x90",		"\xCC\xA3" => "\xE9\xBB\x94",		"\xCC\xA4" => "\xE5\x8A\xAB",		"\xCC\xA5" => "\xE6\x80\xAF",		"\xCC\xA6" => "\xE8\xBF\xB2",		"\xCC\xA7" => "\xE5\x81\x88",		"\xCC\xA8" => "\xE6\x86\xA9",		"\xCC\xA9" => "\xE6\x8F\xAD",		"\xCC\xAA" => "\xE6\x93\x8A",		"\xCC\xAB" => "\xE6\xA0\xBC",		"\xCC\xAC" => "\xE6\xAA\x84",		"\xCC\xAD" => "\xE6\xBF\x80",		"\xCC\xAE" => "\xE8\x86\x88",		"\xCC\xAF" => "\xE8\xA6\xA1",		"\xCC\xB0" => "\xE9\x9A\x94",		"\xCC\xB1" => "\xE5\xA0\x85",		"\xCC\xB2" => "\xE7\x89\xBD",		"\xCC\xB3" => "\xE7\x8A\xAC",		"\xCC\xB4" => "\xE7\x94\x84",		"\xCC\xB5" => "\xE7\xB5\xB9",		"\xCC\xB6" => "\xE7\xB9\xAD",		"\xCC\xB7" => "\xE8\x82\xA9",		"\xCC\xB8" => "\xE8\xA6\x8B",		"\xCC\xB9" => "\xE8\xAD\xB4",		"\xCC\xBA" => "\xE9\x81\xA3",		"\xCC\xBB" => "\xE9\xB5\x91",		"\xCC\xBC" => "\xE6\x8A\x89",		"\xCC\xBD" => "\xE6\xB1\xBA",		"\xCC\xBE" => "\xE6\xBD\x94",		"\xCC\xBF" => "\xE7\xB5\x90",		"\xCC\xC0" => "\xE7\xBC\xBA",		"\xCC\xC1" => "\xE8\xA8\xA3",		"\xCC\xC2" => "\xE5\x85\xBC",		"\xCC\xC3" => "\xE6\x85\x8A",		"\xCC\xC4" => "\xE7\xAE\x9D",		"\xCC\xC5" => "\xE8\xAC\x99",		"\xCC\xC6" => "\xE9\x89\x97",		"\xCC\xC7" => "\xE9\x8E\x8C",		"\xCC\xC8" => "\xE4\xBA\xAC",		"\xCC\xC9" => "\xE4\xBF\x93",		"\xCC\xCA" => "\xE5\x80\x9E",		"\xCC\xCB" => "\xE5\x82\xBE",		"\xCC\xCC" => "\xE5\x84\x86",		"\xCC\xCD" => "\xE5\x8B\x81",		"\xCC\xCE" => "\xE5\x8B\x8D",		"\xCC\xCF" => "\xE5\x8D\xBF",		"\xCC\xD0" => "\xE5\x9D\xB0",		"\xCC\xD1" => "\xE5\xA2\x83",		"\xCC\xD2" => "\xE5\xBA\x9A",		"\xCC\xD3" => "\xE5\xBE\x91",		"\xCC\xD4" => "\xE6\x85\xB6",		"\xCC\xD5" => "\xE6\x86\xAC",		"\xCC\xD6" => "\xE6\x93\x8E",		"\xCC\xD7" => "\xE6\x95\xAC",		"\xCC\xD8" => "\xE6\x99\xAF",		"\xCC\xD9" => "\xE6\x9A\xBB",		"\xCC\xDA" => "\xE6\x9B\xB4",		"\xCC\xDB" => "\xE6\xA2\x97",		"\xCC\xDC" => "\xE6\xB6\x87",		"\xCC\xDD" => "\xE7\x82\x85",		"\xCC\xDE" => "\xE7\x83\xB1",		"\xCC\xDF" => "\xE7\x92\x9F",		"\xCC\xE0" => "\xE7\x92\xA5",		"\xCC\xE1" => "\xE7\x93\x8A",		"\xCC\xE2" => "\xE7\x97\x99",		"\xCC\xE3" => "\xE7\xA1\xAC",		"\xCC\xE4" => "\xE7\xA3\xAC",		"\xCC\xE5" => "\xE7\xAB\x9F",		"\xCC\xE6" => "\xE7\xAB\xB6",		"\xCC\xE7" => "\xE7\xB5\x85",		"\xCC\xE8" => "\xE7\xB6\x93",		"\xCC\xE9" => "\xE8\x80\x95",		"\xCC\xEA" => "\xE8\x80\xBF",		"\xCC\xEB" => "\xE8\x84\x9B",		"\xCC\xEC" => "\xE8\x8E\x96",		"\xCC\xED" => "\xE8\xAD\xA6",		"\xCC\xEE" => "\xE8\xBC\x95",		"\xCC\xEF" => "\xE9\x80\x95",		"\xCC\xF0" => "\xE9\x8F\xA1",		"\xCC\xF1" => "\xE9\xA0\x83",		"\xCC\xF2" => "\xE9\xA0\xB8",		"\xCC\xF3" => "\xE9\xA9\x9A",		"\xCC\xF4" => "\xE9\xAF\xA8",		"\xCC\xF5" => "\xE4\xBF\x82",		"\xCC\xF6" => "\xE5\x95\x93",		"\xCC\xF7" => "\xE5\xA0\xBA",		"\xCC\xF8" => "\xE5\xA5\x91",		"\xCC\xF9" => "\xE5\xAD\xA3",		"\xCC\xFA" => "\xE5\xB1\x86",		"\xCC\xFB" => "\xE6\x82\xB8",		"\xCC\xFC" => "\xE6\x88\x92",		"\xCC\xFD" => "\xE6\xA1\x82",		"\xCC\xFE" => "\xE6\xA2\xB0",		"\xCD\xA1" => "\xE6\xA3\xA8",		"\xCD\xA2" => "\xE6\xBA\xAA",		"\xCD\xA3" => "\xE7\x95\x8C",		"\xCD\xA4" => "\xE7\x99\xB8",		"\xCD\xA5" => "\xE7\xA3\x8E",		"\xCD\xA6" => "\xE7\xA8\xBD",		"\xCD\xA7" => "\xE7\xB3\xBB",		"\xCD\xA8" => "\xE7\xB9\xAB",		"\xCD\xA9" => "\xE7\xB9\xBC",		"\xCD\xAA" => "\xE8\xA8\x88",		"\xCD\xAB" => "\xE8\xAA\xA1",		"\xCD\xAC" => "\xE8\xB0\xBF",		"\xCD\xAD" => "\xE9\x9A\x8E",		"\xCD\xAE" => "\xE9\xB7\x84",		"\xCD\xAF" => "\xE5\x8F\xA4",		"\xCD\xB0" => "\xE5\x8F\xA9",		"\xCD\xB1" => "\xE5\x91\x8A",		"\xCD\xB2" => "\xE5\x91\xB1",		"\xCD\xB3" => "\xE5\x9B\xBA",		"\xCD\xB4" => "\xE5\xA7\x91",		"\xCD\xB5" => "\xE5\xAD\xA4",		"\xCD\xB6" => "\xE5\xB0\xBB",		"\xCD\xB7" => "\xE5\xBA\xAB",		"\xCD\xB8" => "\xE6\x8B\xB7",		"\xCD\xB9" => "\xE6\x94\xB7",		"\xCD\xBA" => "\xE6\x95\x85",		"\xCD\xBB" => "\xE6\x95\xB2",		"\xCD\xBC" => "\xE6\x9A\xA0",		"\xCD\xBD" => "\xE6\x9E\xAF",		"\xCD\xBE" => "\xE6\xA7\x81",		"\xCD\xBF" => "\xE6\xB2\xBD",		"\xCD\xC0" => "\xE7\x97\xBC",		"\xCD\xC1" => "\xE7\x9A\x90",		"\xCD\xC2" => "\xE7\x9D\xBE",		"\xCD\xC3" => "\xE7\xA8\xBF",		"\xCD\xC4" => "\xE7\xBE\x94",		"\xCD\xC5" => "\xE8\x80\x83",		"\xCD\xC6" => "\xE8\x82\xA1",		"\xCD\xC7" => "\xE8\x86\x8F",		"\xCD\xC8" => "\xE8\x8B\xA6",		"\xCD\xC9" => "\xE8\x8B\xBD",		"\xCD\xCA" => "\xE8\x8F\xB0",		"\xCD\xCB" => "\xE8\x97\x81",		"\xCD\xCC" => "\xE8\xA0\xB1",		"\xCD\xCD" => "\xE8\xA2\xB4",		"\xCD\xCE" => "\xE8\xAA\xA5",		"\xCD\xCF" => "\xEF\xA4\x83",		"\xCD\xD0" => "\xE8\xBE\x9C",		"\xCD\xD1" => "\xE9\x8C\xAE",		"\xCD\xD2" => "\xE9\x9B\x87",		"\xCD\xD3" => "\xE9\xA1\xA7",		"\xCD\xD4" => "\xE9\xAB\x98",		"\xCD\xD5" => "\xE9\xBC\x93",		"\xCD\xD6" => "\xE5\x93\xAD",		"\xCD\xD7" => "\xE6\x96\x9B",		"\xCD\xD8" => "\xE6\x9B\xB2",		"\xCD\xD9" => "\xE6\xA2\x8F",		"\xCD\xDA" => "\xE7\xA9\x80",		"\xCD\xDB" => "\xE8\xB0\xB7",		"\xCD\xDC" => "\xE9\xB5\xA0",		"\xCD\xDD" => "\xE5\x9B\xB0",		"\xCD\xDE" => "\xE5\x9D\xA4",		"\xCD\xDF" => "\xE5\xB4\x91",		"\xCD\xE0" => "\xE6\x98\x86",		"\xCD\xE1" => "\xE6\xA2\xB1",		"\xCD\xE2" => "\xE6\xA3\x8D",		"\xCD\xE3" => "\xE6\xBB\xBE",		"\xCD\xE4" => "\xE7\x90\xA8",		"\xCD\xE5" => "\xE8\xA2\x9E",		"\xCD\xE6" => "\xE9\xAF\xA4",		"\xCD\xE7" => "\xE6\xB1\xA8",		"\xCD\xE8" => "\xEF\xA4\x84",		"\xCD\xE9" => "\xE9\xAA\xA8",		"\xCD\xEA" => "\xE4\xBE\x9B",		"\xCD\xEB" => "\xE5\x85\xAC",		"\xCD\xEC" => "\xE5\x85\xB1",		"\xCD\xED" => "\xE5\x8A\x9F",		"\xCD\xEE" => "\xE5\xAD\x94",		"\xCD\xEF" => "\xE5\xB7\xA5",		"\xCD\xF0" => "\xE6\x81\x90",		"\xCD\xF1" => "\xE6\x81\xAD",		"\xCD\xF2" => "\xE6\x8B\xB1",		"\xCD\xF3" => "\xE6\x8E\xA7",		"\xCD\xF4" => "\xE6\x94\xBB",		"\xCD\xF5" => "\xE7\x8F\x99",		"\xCD\xF6" => "\xE7\xA9\xBA",		"\xCD\xF7" => "\xE8\x9A\xA3",		"\xCD\xF8" => "\xE8\xB2\xA2",		"\xCD\xF9" => "\xE9\x9E\x8F",		"\xCD\xFA" => "\xE4\xB8\xB2",		"\xCD\xFB" => "\xE5\xAF\xA1",		"\xCD\xFC" => "\xE6\x88\x88",		"\xCD\xFD" => "\xE6\x9E\x9C",		"\xCD\xFE" => "\xE7\x93\x9C",		"\xCE\xA1" => "\xE7\xA7\x91",		"\xCE\xA2" => "\xE8\x8F\x93",		"\xCE\xA3" => "\xE8\xAA\x87",		"\xCE\xA4" => "\xE8\xAA\xB2",		"\xCE\xA5" => "\xE8\xB7\xA8",		"\xCE\xA6" => "\xE9\x81\x8E",		"\xCE\xA7" => "\xE9\x8D\x8B",		"\xCE\xA8" => "\xE9\xA1\x86",		"\xCE\xA9" => "\xE5\xBB\x93",		"\xCE\xAA" => "\xE6\xA7\xA8",		"\xCE\xAB" => "\xE8\x97\xBF",		"\xCE\xAC" => "\xE9\x83\xAD",		"\xCE\xAD" => "\xEF\xA4\x85",		"\xCE\xAE" => "\xE5\x86\xA0",		"\xCE\xAF" => "\xE5\xAE\x98",		"\xCE\xB0" => "\xE5\xAF\xAC",		"\xCE\xB1" => "\xE6\x85\xA3",		"\xCE\xB2" => "\xE6\xA3\xBA",		"\xCE\xB3" => "\xE6\xAC\xBE",		"\xCE\xB4" => "\xE7\x81\x8C",		"\xCE\xB5" => "\xE7\x90\xAF",		"\xCE\xB6" => "\xE7\x93\x98",		"\xCE\xB7" => "\xE7\xAE\xA1",		"\xCE\xB8" => "\xE7\xBD\x90",		"\xCE\xB9" => "\xE8\x8F\x85",		"\xCE\xBA" => "\xE8\xA7\x80",		"\xCE\xBB" => "\xE8\xB2\xAB",		"\xCE\xBC" => "\xE9\x97\x9C",		"\xCE\xBD" => "\xE9\xA4\xA8",		"\xCE\xBE" => "\xE5\x88\xAE",		"\xCE\xBF" => "\xE6\x81\x9D",		"\xCE\xC0" => "\xE6\x8B\xAC",		"\xCE\xC1" => "\xE9\x80\x82",		"\xCE\xC2" => "\xE4\xBE\x8A",		"\xCE\xC3" => "\xE5\x85\x89",		"\xCE\xC4" => "\xE5\x8C\xA1",		"\xCE\xC5" => "\xE5\xA3\x99",		"\xCE\xC6" => "\xE5\xBB\xA3",		"\xCE\xC7" => "\xE6\x9B\xA0",		"\xCE\xC8" => "\xE6\xB4\xB8",		"\xCE\xC9" => "\xE7\x82\x9A",		"\xCE\xCA" => "\xE7\x8B\x82",		"\xCE\xCB" => "\xE7\x8F\x96",		"\xCE\xCC" => "\xE7\xAD\x90",		"\xCE\xCD" => "\xE8\x83\xB1",		"\xCE\xCE" => "\xE9\x91\x9B",		"\xCE\xCF" => "\xE5\x8D\xA6",		"\xCE\xD0" => "\xE6\x8E\x9B",		"\xCE\xD1" => "\xE7\xBD\xAB",		"\xCE\xD2" => "\xE4\xB9\x96",		"\xCE\xD3" => "\xE5\x82\x80",		"\xCE\xD4" => "\xE5\xA1\x8A",		"\xCE\xD5" => "\xE5\xA3\x9E",		"\xCE\xD6" => "\xE6\x80\xAA",		"\xCE\xD7" => "\xE6\x84\xA7",		"\xCE\xD8" => "\xE6\x8B\x90",		"\xCE\xD9" => "\xE6\xA7\x90",		"\xCE\xDA" => "\xE9\xAD\x81",		"\xCE\xDB" => "\xE5\xAE\x8F",		"\xCE\xDC" => "\xE7\xB4\x98",		"\xCE\xDD" => "\xE8\x82\xB1",		"\xCE\xDE" => "\xE8\xBD\x9F",		"\xCE\xDF" => "\xE4\xBA\xA4",		"\xCE\xE0" => "\xE5\x83\x91",		"\xCE\xE1" => "\xE5\x92\xAC",		"\xCE\xE2" => "\xE5\x96\xAC",		"\xCE\xE3" => "\xE5\xAC\x8C",		"\xCE\xE4" => "\xE5\xB6\xA0",		"\xCE\xE5" => "\xE5\xB7\xA7",		"\xCE\xE6" => "\xE6\x94\xAA",		"\xCE\xE7" => "\xE6\x95\x8E",		"\xCE\xE8" => "\xE6\xA0\xA1",		"\xCE\xE9" => "\xE6\xA9\x8B",		"\xCE\xEA" => "\xE7\x8B\xA1",		"\xCE\xEB" => "\xE7\x9A\x8E",		"\xCE\xEC" => "\xE7\x9F\xAF",		"\xCE\xED" => "\xE7\xB5\x9E",		"\xCE\xEE" => "\xE7\xBF\xB9",		"\xCE\xEF" => "\xE8\x86\xA0",		"\xCE\xF0" => "\xE8\x95\x8E",		"\xCE\xF1" => "\xE8\x9B\x9F",		"\xCE\xF2" => "\xE8\xBC\x83",		"\xCE\xF3" => "\xE8\xBD\x8E",		"\xCE\xF4" => "\xE9\x83\x8A",		"\xCE\xF5" => "\xE9\xA4\x83",		"\xCE\xF6" => "\xE9\xA9\x95",		"\xCE\xF7" => "\xE9\xAE\xAB",		"\xCE\xF8" => "\xE4\xB8\x98",		"\xCE\xF9" => "\xE4\xB9\x85",		"\xCE\xFA" => "\xE4\xB9\x9D",		"\xCE\xFB" => "\xE4\xBB\x87",		"\xCE\xFC" => "\xE4\xBF\xB1",		"\xCE\xFD" => "\xE5\x85\xB7",		"\xCE\xFE" => "\xE5\x8B\xBE",		"\xCF\xA1" => "\xE5\x8D\x80",		"\xCF\xA2" => "\xE5\x8F\xA3",		"\xCF\xA3" => "\xE5\x8F\xA5",		"\xCF\xA4" => "\xE5\x92\x8E",		"\xCF\xA5" => "\xE5\x98\x94",		"\xCF\xA6" => "\xE5\x9D\xB5",		"\xCF\xA7" => "\xE5\x9E\xA2",		"\xCF\xA8" => "\xE5\xAF\x87",		"\xCF\xA9" => "\xE5\xB6\x87",		"\xCF\xAA" => "\xE5\xBB\x90",		"\xCF\xAB" => "\xE6\x87\xBC",		"\xCF\xAC" => "\xE6\x8B\x98",		"\xCF\xAD" => "\xE6\x95\x91",		"\xCF\xAE" => "\xE6\x9E\xB8",		"\xCF\xAF" => "\xE6\x9F\xA9",		"\xCF\xB0" => "\xE6\xA7\x8B",		"\xCF\xB1" => "\xE6\xAD\x90",		"\xCF\xB2" => "\xE6\xAF\x86",		"\xCF\xB3" => "\xE6\xAF\xAC",		"\xCF\xB4" => "\xE6\xB1\x82",		"\xCF\xB5" => "\xE6\xBA\x9D",		"\xCF\xB6" => "\xE7\x81\xB8",		"\xCF\xB7" => "\xE7\x8B\x97",		"\xCF\xB8" => "\xE7\x8E\x96",		"\xCF\xB9" => "\xE7\x90\x83",		"\xCF\xBA" => "\xE7\x9E\xBF",		"\xCF\xBB" => "\xE7\x9F\xA9",		"\xCF\xBC" => "\xE7\xA9\xB6",		"\xCF\xBD" => "\xE7\xB5\xBF",		"\xCF\xBE" => "\xE8\x80\x89",		"\xCF\xBF" => "\xE8\x87\xBC",		"\xCF\xC0" => "\xE8\x88\x85",		"\xCF\xC1" => "\xE8\x88\x8A",		"\xCF\xC2" => "\xE8\x8B\x9F",		"\xCF\xC3" => "\xE8\xA1\xA2",		"\xCF\xC4" => "\xE8\xAC\xB3",		"\xCF\xC5" => "\xE8\xB3\xBC",		"\xCF\xC6" => "\xE8\xBB\x80",		"\xCF\xC7" => "\xE9\x80\x91",		"\xCF\xC8" => "\xE9\x82\xB1",		"\xCF\xC9" => "\xE9\x89\xA4",		"\xCF\xCA" => "\xE9\x8A\xB6",		"\xCF\xCB" => "\xE9\xA7\x92",		"\xCF\xCC" => "\xE9\xA9\x85",		"\xCF\xCD" => "\xE9\xB3\xA9",		"\xCF\xCE" => "\xE9\xB7\x97",		"\xCF\xCF" => "\xE9\xBE\x9C",		"\xCF\xD0" => "\xE5\x9C\x8B",		"\xCF\xD1" => "\xE5\xB1\x80",		"\xCF\xD2" => "\xE8\x8F\x8A",		"\xCF\xD3" => "\xE9\x9E\xA0",		"\xCF\xD4" => "\xE9\x9E\xAB",		"\xCF\xD5" => "\xE9\xBA\xB4",		"\xCF\xD6" => "\xE5\x90\x9B",		"\xCF\xD7" => "\xE7\xAA\x98",		"\xCF\xD8" => "\xE7\xBE\xA4",		"\xCF\xD9" => "\xE8\xA3\x99",		"\xCF\xDA" => "\xE8\xBB\x8D",		"\xCF\xDB" => "\xE9\x83\xA1",		"\xCF\xDC" => "\xE5\xA0\x80",		"\xCF\xDD" => "\xE5\xB1\x88",		"\xCF\xDE" => "\xE6\x8E\x98",		"\xCF\xDF" => "\xE7\xAA\x9F",		"\xCF\xE0" => "\xE5\xAE\xAE",		"\xCF\xE1" => "\xE5\xBC\x93",		"\xCF\xE2" => "\xE7\xA9\xB9",		"\xCF\xE3" => "\xE7\xAA\xAE",		"\xCF\xE4" => "\xE8\x8A\x8E",		"\xCF\xE5" => "\xE8\xBA\xAC",		"\xCF\xE6" => "\xE5\x80\xA6",		"\xCF\xE7" => "\xE5\x88\xB8",		"\xCF\xE8" => "\xE5\x8B\xB8",		"\xCF\xE9" => "\xE5\x8D\xB7",		"\xCF\xEA" => "\xE5\x9C\x88",		"\xCF\xEB" => "\xE6\x8B\xB3",		"\xCF\xEC" => "\xE6\x8D\xB2",		"\xCF\xED" => "\xE6\xAC\x8A",		"\xCF\xEE" => "\xE6\xB7\x83",		"\xCF\xEF" => "\xE7\x9C\xB7",		"\xCF\xF0" => "\xE5\x8E\xA5",		"\xCF\xF1" => "\xE7\x8D\x97",		"\xCF\xF2" => "\xE8\x95\xA8",		"\xCF\xF3" => "\xE8\xB9\xB6",		"\xCF\xF4" => "\xE9\x97\x95",		"\xCF\xF5" => "\xE6\x9C\xBA",		"\xCF\xF6" => "\xE6\xAB\x83",		"\xCF\xF7" => "\xE6\xBD\xB0",		"\xCF\xF8" => "\xE8\xA9\xAD",		"\xCF\xF9" => "\xE8\xBB\x8C",		"\xCF\xFA" => "\xE9\xA5\x8B",		"\xCF\xFB" => "\xEF\xA4\x86",		"\xCF\xFC" => "\xE6\x99\xB7",		"\xCF\xFD" => "\xE6\xAD\xB8",		"\xCF\xFE" => "\xE8\xB2\xB4",		"\xD0\xA1" => "\xE9\xAC\xBC",		"\xD0\xA2" => "\xEF\xA4\x87",		"\xD0\xA3" => "\xE5\x8F\xAB",		"\xD0\xA4" => "\xE5\x9C\xAD",		"\xD0\xA5" => "\xE5\xA5\x8E",		"\xD0\xA6" => "\xE6\x8F\x86",		"\xD0\xA7" => "\xE6\xA7\xBB",		"\xD0\xA8" => "\xE7\x8F\xAA",		"\xD0\xA9" => "\xE7\xA1\x85",		"\xD0\xAA" => "\xE7\xAA\xBA",		"\xD0\xAB" => "\xE7\xAB\x85",		"\xD0\xAC" => "\xE7\xB3\xBE",		"\xD0\xAD" => "\xE8\x91\xB5",		"\xD0\xAE" => "\xE8\xA6\x8F",		"\xD0\xAF" => "\xE8\xB5\xB3",		"\xD0\xB0" => "\xE9\x80\xB5",		"\xD0\xB1" => "\xE9\x96\xA8",		"\xD0\xB2" => "\xE5\x8B\xBB",		"\xD0\xB3" => "\xE5\x9D\x87",		"\xD0\xB4" => "\xE7\x95\x87",		"\xD0\xB5" => "\xE7\xAD\xA0",		"\xD0\xB6" => "\xE8\x8F\x8C",		"\xD0\xB7" => "\xE9\x88\x9E",		"\xD0\xB8" => "\xEF\xA4\x88",		"\xD0\xB9" => "\xE6\xA9\x98",		"\xD0\xBA" => "\xE5\x85\x8B",		"\xD0\xBB" => "\xE5\x89\x8B",		"\xD0\xBC" => "\xE5\x8A\x87",		"\xD0\xBD" => "\xE6\x88\x9F",		"\xD0\xBE" => "\xE6\xA3\x98",		"\xD0\xBF" => "\xE6\xA5\xB5",		"\xD0\xC0" => "\xE9\x9A\x99",		"\xD0\xC1" => "\xE5\x83\x85",		"\xD0\xC2" => "\xE5\x8A\xA4",		"\xD0\xC3" => "\xE5\x8B\xA4",		"\xD0\xC4" => "\xE6\x87\x83",		"\xD0\xC5" => "\xE6\x96\xA4",		"\xD0\xC6" => "\xE6\xA0\xB9",		"\xD0\xC7" => "\xE6\xA7\xBF",		"\xD0\xC8" => "\xE7\x91\xBE",		"\xD0\xC9" => "\xE7\xAD\x8B",		"\xD0\xCA" => "\xE8\x8A\xB9",		"\xD0\xCB" => "\xE8\x8F\xAB",		"\xD0\xCC" => "\xE8\xA6\xB2",		"\xD0\xCD" => "\xE8\xAC\xB9",		"\xD0\xCE" => "\xE8\xBF\x91",		"\xD0\xCF" => "\xE9\xA5\x89",		"\xD0\xD0" => "\xEF\xA4\x89",		"\xD0\xD1" => "\xE4\xBB\x8A",		"\xD0\xD2" => "\xE5\xA6\x97",		"\xD0\xD3" => "\xE6\x93\x92",		"\xD0\xD4" => "\xE6\x98\x91",		"\xD0\xD5" => "\xE6\xAA\x8E",		"\xD0\xD6" => "\xE7\x90\xB4",		"\xD0\xD7" => "\xE7\xA6\x81",		"\xD0\xD8" => "\xE7\xA6\xBD",		"\xD0\xD9" => "\xE8\x8A\xA9",		"\xD0\xDA" => "\xE8\xA1\xBE",		"\xD0\xDB" => "\xE8\xA1\xBF",		"\xD0\xDC" => "\xE8\xA5\x9F",		"\xD0\xDD" => "\xEF\xA4\x8A",		"\xD0\xDE" => "\xE9\x8C\xA6",		"\xD0\xDF" => "\xE4\xBC\x8B",		"\xD0\xE0" => "\xE5\x8F\x8A",		"\xD0\xE1" => "\xE6\x80\xA5",		"\xD0\xE2" => "\xE6\x89\xB1",		"\xD0\xE3" => "\xE6\xB1\xB2",		"\xD0\xE4" => "\xE7\xB4\x9A",		"\xD0\xE5" => "\xE7\xB5\xA6",		"\xD0\xE6" => "\xE4\xBA\x98",		"\xD0\xE7" => "\xE5\x85\xA2",		"\xD0\xE8" => "\xE7\x9F\x9C",		"\xD0\xE9" => "\xE8\x82\xAF",		"\xD0\xEA" => "\xE4\xBC\x81",		"\xD0\xEB" => "\xE4\xBC\x8E",		"\xD0\xEC" => "\xE5\x85\xB6",		"\xD0\xED" => "\xE5\x86\x80",		"\xD0\xEE" => "\xE5\x97\x9C",		"\xD0\xEF" => "\xE5\x99\xA8",		"\xD0\xF0" => "\xE5\x9C\xBB",		"\xD0\xF1" => "\xE5\x9F\xBA",		"\xD0\xF2" => "\xE5\x9F\xBC",		"\xD0\xF3" => "\xE5\xA4\x94",		"\xD0\xF4" => "\xE5\xA5\x87",		"\xD0\xF5" => "\xE5\xA6\x93",		"\xD0\xF6" => "\xE5\xAF\x84",		"\xD0\xF7" => "\xE5\xB2\x90",		"\xD0\xF8" => "\xE5\xB4\x8E",		"\xD0\xF9" => "\xE5\xB7\xB1",		"\xD0\xFA" => "\xE5\xB9\xBE",		"\xD0\xFB" => "\xE5\xBF\x8C",		"\xD0\xFC" => "\xE6\x8A\x80",		"\xD0\xFD" => "\xE6\x97\x97",		"\xD0\xFE" => "\xE6\x97\xA3",		"\xD1\xA1" => "\xE6\x9C\x9E",		"\xD1\xA2" => "\xE6\x9C\x9F",		"\xD1\xA3" => "\xE6\x9D\x9E",		"\xD1\xA4" => "\xE6\xA3\x8B",		"\xD1\xA5" => "\xE6\xA3\x84",		"\xD1\xA6" => "\xE6\xA9\x9F",		"\xD1\xA7" => "\xE6\xAC\xBA",		"\xD1\xA8" => "\xE6\xB0\xA3",		"\xD1\xA9" => "\xE6\xB1\xBD",		"\xD1\xAA" => "\xE6\xB2\x82",		"\xD1\xAB" => "\xE6\xB7\x87",		"\xD1\xAC" => "\xE7\x8E\x98",		"\xD1\xAD" => "\xE7\x90\xA6",		"\xD1\xAE" => "\xE7\x90\xAA",		"\xD1\xAF" => "\xE7\x92\x82",		"\xD1\xB0" => "\xE7\x92\xA3",		"\xD1\xB1" => "\xE7\x95\xB8",		"\xD1\xB2" => "\xE7\x95\xBF",		"\xD1\xB3" => "\xE7\xA2\x81",		"\xD1\xB4" => "\xE7\xA3\xAF",		"\xD1\xB5" => "\xE7\xA5\x81",		"\xD1\xB6" => "\xE7\xA5\x87",		"\xD1\xB7" => "\xE7\xA5\x88",		"\xD1\xB8" => "\xE7\xA5\xBA",		"\xD1\xB9" => "\xE7\xAE\x95",		"\xD1\xBA" => "\xE7\xB4\x80",		"\xD1\xBB" => "\xE7\xB6\xBA",		"\xD1\xBC" => "\xE7\xBE\x88",		"\xD1\xBD" => "\xE8\x80\x86",		"\xD1\xBE" => "\xE8\x80\xAD",		"\xD1\xBF" => "\xE8\x82\x8C",		"\xD1\xC0" => "\xE8\xA8\x98",		"\xD1\xC1" => "\xE8\xAD\x8F",		"\xD1\xC2" => "\xE8\xB1\x88",		"\xD1\xC3" => "\xE8\xB5\xB7",		"\xD1\xC4" => "\xE9\x8C\xA1",		"\xD1\xC5" => "\xE9\x8C\xA4",		"\xD1\xC6" => "\xE9\xA3\xA2",		"\xD1\xC7" => "\xE9\xA5\x91",		"\xD1\xC8" => "\xE9\xA8\x8E",		"\xD1\xC9" => "\xE9\xA8\x8F",		"\xD1\xCA" => "\xE9\xA9\xA5",		"\xD1\xCB" => "\xE9\xBA\x92",		"\xD1\xCC" => "\xE7\xB7\x8A",		"\xD1\xCD" => "\xE4\xBD\xB6",		"\xD1\xCE" => "\xE5\x90\x89",		"\xD1\xCF" => "\xE6\x8B\xAE",		"\xD1\xD0" => "\xE6\xA1\x94",		"\xD1\xD1" => "\xE9\x87\x91",		"\xD1\xD2" => "\xE5\x96\xAB",		"\xD1\xD3" => "\xE5\x84\xBA",		"\xD1\xD4" => "\xEF\xA4\x8B",		"\xD1\xD5" => "\xEF\xA4\x8C",		"\xD1\xD6" => "\xE5\xA8\x9C",		"\xD1\xD7" => "\xE6\x87\xA6",		"\xD1\xD8" => "\xEF\xA4\x8D",		"\xD1\xD9" => "\xE6\x8B\x8F",		"\xD1\xDA" => "\xE6\x8B\xBF",		"\xD1\xDB" => "\xEF\xA4\x8E",		"\xD1\xDC" => "\xEF\xA4\x8F",		"\xD1\xDD" => "\xEF\xA4\x90",		"\xD1\xDE" => "\xEF\xA4\x91",		"\xD1\xDF" => "\xEF\xA4\x92",		"\xD1\xE0" => "\xEF\xA4\x93",		"\xD1\xE1" => "\xE9\x82\xA3",		"\xD1\xE2" => "\xEF\xA4\x94",		"\xD1\xE3" => "\xEF\xA4\x95",		"\xD1\xE4" => "\xEF\xA4\x96",		"\xD1\xE5" => "\xEF\xA4\x97",		"\xD1\xE6" => "\xEF\xA4\x98",		"\xD1\xE7" => "\xE8\xAB\xBE",		"\xD1\xE8" => "\xEF\xA4\x99",		"\xD1\xE9" => "\xEF\xA4\x9A",		"\xD1\xEA" => "\xEF\xA4\x9B",		"\xD1\xEB" => "\xEF\xA4\x9C",		"\xD1\xEC" => "\xE6\x9A\x96",		"\xD1\xED" => "\xEF\xA4\x9D",		"\xD1\xEE" => "\xE7\x85\x96",		"\xD1\xEF" => "\xEF\xA4\x9E",		"\xD1\xF0" => "\xEF\xA4\x9F",		"\xD1\xF1" => "\xE9\x9B\xA3",		"\xD1\xF2" => "\xEF\xA4\xA0",		"\xD1\xF3" => "\xE6\x8D\x8F",		"\xD1\xF4" => "\xE6\x8D\xBA",		"\xD1\xF5" => "\xE5\x8D\x97",		"\xD1\xF6" => "\xEF\xA4\xA1",		"\xD1\xF7" => "\xE6\x9E\x8F",		"\xD1\xF8" => "\xE6\xA5\xA0",		"\xD1\xF9" => "\xE6\xB9\xB3",		"\xD1\xFA" => "\xEF\xA4\xA2",		"\xD1\xFB" => "\xE7\x94\xB7",		"\xD1\xFC" => "\xEF\xA4\xA3",		"\xD1\xFD" => "\xEF\xA4\xA4",		"\xD1\xFE" => "\xEF\xA4\xA5",		"\xD2\xA1" => "\xE7\xB4\x8D",		"\xD2\xA2" => "\xEF\xA4\xA6",		"\xD2\xA3" => "\xEF\xA4\xA7",		"\xD2\xA4" => "\xE8\xA1\xB2",		"\xD2\xA5" => "\xE5\x9B\x8A",		"\xD2\xA6" => "\xE5\xA8\x98",		"\xD2\xA7" => "\xEF\xA4\xA8",		"\xD2\xA8" => "\xEF\xA4\xA9",		"\xD2\xA9" => "\xEF\xA4\xAA",		"\xD2\xAA" => "\xEF\xA4\xAB",		"\xD2\xAB" => "\xEF\xA4\xAC",		"\xD2\xAC" => "\xE4\xB9\x83",		"\xD2\xAD" => "\xEF\xA4\xAD",		"\xD2\xAE" => "\xE5\x85\xA7",		"\xD2\xAF" => "\xE5\xA5\x88",		"\xD2\xB0" => "\xE6\x9F\xB0",		"\xD2\xB1" => "\xE8\x80\x90",		"\xD2\xB2" => "\xEF\xA4\xAE",		"\xD2\xB3" => "\xE5\xA5\xB3",		"\xD2\xB4" => "\xE5\xB9\xB4",		"\xD2\xB5" => "\xE6\x92\x9A",		"\xD2\xB6" => "\xE7\xA7\x8A",		"\xD2\xB7" => "\xE5\xBF\xB5",		"\xD2\xB8" => "\xE6\x81\xAC",		"\xD2\xB9" => "\xE6\x8B\x88",		"\xD2\xBA" => "\xE6\x8D\xBB",		"\xD2\xBB" => "\xE5\xAF\xA7",		"\xD2\xBC" => "\xE5\xAF\x97",		"\xD2\xBD" => "\xE5\x8A\xAA",		"\xD2\xBE" => "\xEF\xA4\xAF",		"\xD2\xBF" => "\xE5\xA5\xB4",		"\xD2\xC0" => "\xE5\xBC\xA9",		"\xD2\xC1" => "\xE6\x80\x92",		"\xD2\xC2" => "\xEF\xA4\xB0",		"\xD2\xC3" => "\xEF\xA4\xB1",		"\xD2\xC4" => "\xEF\xA4\xB2",		"\xD2\xC5" => "\xE7\x91\x99",		"\xD2\xC6" => "\xEF\xA4\xB3",		"\xD2\xC7" => "\xEF\xA4\xB4",		"\xD2\xC8" => "\xEF\xA4\xB5",		"\xD2\xC9" => "\xEF\xA4\xB6",		"\xD2\xCA" => "\xEF\xA4\xB7",		"\xD2\xCB" => "\xEF\xA4\xB8",		"\xD2\xCC" => "\xE9\xA7\x91",		"\xD2\xCD" => "\xEF\xA4\xB9",		"\xD2\xCE" => "\xEF\xA4\xBA",		"\xD2\xCF" => "\xEF\xA4\xBB",		"\xD2\xD0" => "\xEF\xA4\xBC",		"\xD2\xD1" => "\xEF\xA4\xBD",		"\xD2\xD2" => "\xEF\xA4\xBE",		"\xD2\xD3" => "\xEF\xA4\xBF",		"\xD2\xD4" => "\xEF\xA5\x80",		"\xD2\xD5" => "\xEF\xA5\x81",		"\xD2\xD6" => "\xEF\xA5\x82",		"\xD2\xD7" => "\xEF\xA5\x83",		"\xD2\xD8" => "\xE6\xBF\x83",		"\xD2\xD9" => "\xEF\xA5\x84",		"\xD2\xDA" => "\xEF\xA5\x85",		"\xD2\xDB" => "\xE8\x86\xBF",		"\xD2\xDC" => "\xE8\xBE\xB2",		"\xD2\xDD" => "\xE6\x83\xB1",		"\xD2\xDE" => "\xEF\xA5\x86",		"\xD2\xDF" => "\xEF\xA5\x87",		"\xD2\xE0" => "\xE8\x85\xA6",		"\xD2\xE1" => "\xEF\xA5\x88",		"\xD2\xE2" => "\xEF\xA5\x89",		"\xD2\xE3" => "\xE5\xB0\xBF",		"\xD2\xE4" => "\xEF\xA5\x8A",		"\xD2\xE5" => "\xEF\xA5\x8B",		"\xD2\xE6" => "\xEF\xA5\x8C",		"\xD2\xE7" => "\xEF\xA5\x8D",		"\xD2\xE8" => "\xEF\xA5\x8E",		"\xD2\xE9" => "\xEF\xA5\x8F",		"\xD2\xEA" => "\xEF\xA5\x90",		"\xD2\xEB" => "\xEF\xA5\x91",		"\xD2\xEC" => "\xE5\xAB\xA9",		"\xD2\xED" => "\xE8\xA8\xA5",		"\xD2\xEE" => "\xE6\x9D\xBB",		"\xD2\xEF" => "\xE7\xB4\x90",		"\xD2\xF0" => "\xEF\xA5\x92",		"\xD2\xF1" => "\xEF\xA5\x93",		"\xD2\xF2" => "\xEF\xA5\x94",		"\xD2\xF3" => "\xEF\xA5\x95",		"\xD2\xF4" => "\xEF\xA5\x96",		"\xD2\xF5" => "\xEF\xA5\x97",		"\xD2\xF6" => "\xE8\x83\xBD",		"\xD2\xF7" => "\xEF\xA5\x98",		"\xD2\xF8" => "\xEF\xA5\x99",		"\xD2\xF9" => "\xE5\xB0\xBC",		"\xD2\xFA" => "\xE6\xB3\xA5",		"\xD2\xFB" => "\xE5\x8C\xBF",		"\xD2\xFC" => "\xE6\xBA\xBA",		"\xD2\xFD" => "\xE5\xA4\x9A",		"\xD2\xFE" => "\xE8\x8C\xB6",		"\xD3\xA1" => "\xE4\xB8\xB9",		"\xD3\xA2" => "\xE4\xBA\xB6",		"\xD3\xA3" => "\xE4\xBD\x86",		"\xD3\xA4" => "\xE5\x96\xAE",		"\xD3\xA5" => "\xE5\x9C\x98",		"\xD3\xA6" => "\xE5\xA3\x87",		"\xD3\xA7" => "\xE5\xBD\x96",		"\xD3\xA8" => "\xE6\x96\xB7",		"\xD3\xA9" => "\xE6\x97\xA6",		"\xD3\xAA" => "\xE6\xAA\x80",		"\xD3\xAB" => "\xE6\xAE\xB5",		"\xD3\xAC" => "\xE6\xB9\x8D",		"\xD3\xAD" => "\xE7\x9F\xAD",		"\xD3\xAE" => "\xE7\xAB\xAF",		"\xD3\xAF" => "\xE7\xB0\x9E",		"\xD3\xB0" => "\xE7\xB7\x9E",		"\xD3\xB1" => "\xE8\x9B\x8B",		"\xD3\xB2" => "\xE8\xA2\x92",		"\xD3\xB3" => "\xE9\x84\xB2",		"\xD3\xB4" => "\xE9\x8D\x9B",		"\xD3\xB5" => "\xE6\x92\xBB",		"\xD3\xB6" => "\xE6\xBE\xBE",		"\xD3\xB7" => "\xE7\x8D\xBA",		"\xD3\xB8" => "\xE7\x96\xB8",		"\xD3\xB9" => "\xE9\x81\x94",		"\xD3\xBA" => "\xE5\x95\x96",		"\xD3\xBB" => "\xE5\x9D\x8D",		"\xD3\xBC" => "\xE6\x86\xBA",		"\xD3\xBD" => "\xE6\x93\x94",		"\xD3\xBE" => "\xE6\x9B\x87",		"\xD3\xBF" => "\xE6\xB7\xA1",		"\xD3\xC0" => "\xE6\xB9\x9B",		"\xD3\xC1" => "\xE6\xBD\xAD",		"\xD3\xC2" => "\xE6\xBE\xB9",		"\xD3\xC3" => "\xE7\x97\xB0",		"\xD3\xC4" => "\xE8\x81\x83",		"\xD3\xC5" => "\xE8\x86\xBD",		"\xD3\xC6" => "\xE8\x95\x81",		"\xD3\xC7" => "\xE8\xA6\x83",		"\xD3\xC8" => "\xE8\xAB\x87",		"\xD3\xC9" => "\xE8\xAD\x9A",		"\xD3\xCA" => "\xE9\x8C\x9F",		"\xD3\xCB" => "\xE6\xB2\x93",		"\xD3\xCC" => "\xE7\x95\x93",		"\xD3\xCD" => "\xE7\xAD\x94",		"\xD3\xCE" => "\xE8\xB8\x8F",		"\xD3\xCF" => "\xE9\x81\x9D",		"\xD3\xD0" => "\xE5\x94\x90",		"\xD3\xD1" => "\xE5\xA0\x82",		"\xD3\xD2" => "\xE5\xA1\x98",		"\xD3\xD3" => "\xE5\xB9\xA2",		"\xD3\xD4" => "\xE6\x88\x87",		"\xD3\xD5" => "\xE6\x92\x9E",		"\xD3\xD6" => "\xE6\xA3\xA0",		"\xD3\xD7" => "\xE7\x95\xB6",		"\xD3\xD8" => "\xE7\xB3\x96",		"\xD3\xD9" => "\xE8\x9E\xB3",		"\xD3\xDA" => "\xE9\xBB\xA8",		"\xD3\xDB" => "\xE4\xBB\xA3",		"\xD3\xDC" => "\xE5\x9E\x88",		"\xD3\xDD" => "\xE5\x9D\xAE",		"\xD3\xDE" => "\xE5\xA4\xA7",		"\xD3\xDF" => "\xE5\xB0\x8D",		"\xD3\xE0" => "\xE5\xB2\xB1",		"\xD3\xE1" => "\xE5\xB8\xB6",		"\xD3\xE2" => "\xE5\xBE\x85",		"\xD3\xE3" => "\xE6\x88\xB4",		"\xD3\xE4" => "\xE6\x93\xA1",		"\xD3\xE5" => "\xE7\x8E\xB3",		"\xD3\xE6" => "\xE8\x87\xBA",		"\xD3\xE7" => "\xE8\xA2\x8B",		"\xD3\xE8" => "\xE8\xB2\xB8",		"\xD3\xE9" => "\xE9\x9A\x8A",		"\xD3\xEA" => "\xE9\xBB\x9B",		"\xD3\xEB" => "\xE5\xAE\x85",		"\xD3\xEC" => "\xE5\xBE\xB7",		"\xD3\xED" => "\xE6\x82\xB3",		"\xD3\xEE" => "\xE5\x80\x92",		"\xD3\xEF" => "\xE5\x88\x80",		"\xD3\xF0" => "\xE5\x88\xB0",		"\xD3\xF1" => "\xE5\x9C\x96",		"\xD3\xF2" => "\xE5\xA0\xB5",		"\xD3\xF3" => "\xE5\xA1\x97",		"\xD3\xF4" => "\xE5\xB0\x8E",		"\xD3\xF5" => "\xE5\xB1\xA0",		"\xD3\xF6" => "\xE5\xB3\xB6",		"\xD3\xF7" => "\xE5\xB6\x8B",		"\xD3\xF8" => "\xE5\xBA\xA6",		"\xD3\xF9" => "\xE5\xBE\x92",		"\xD3\xFA" => "\xE6\x82\xBC",		"\xD3\xFB" => "\xE6\x8C\x91",		"\xD3\xFC" => "\xE6\x8E\x89",		"\xD3\xFD" => "\xE6\x90\x97",		"\xD3\xFE" => "\xE6\xA1\x83",		"\xD4\xA1" => "\xE6\xA3\xB9",		"\xD4\xA2" => "\xE6\xAB\x82",		"\xD4\xA3" => "\xE6\xB7\x98",		"\xD4\xA4" => "\xE6\xB8\xA1",		"\xD4\xA5" => "\xE6\xBB\x94",		"\xD4\xA6" => "\xE6\xBF\xA4",		"\xD4\xA7" => "\xE7\x87\xBE",		"\xD4\xA8" => "\xE7\x9B\x9C",		"\xD4\xA9" => "\xE7\x9D\xB9",		"\xD4\xAA" => "\xE7\xA6\xB1",		"\xD4\xAB" => "\xE7\xA8\xBB",		"\xD4\xAC" => "\xE8\x90\x84",		"\xD4\xAD" => "\xE8\xA6\xA9",		"\xD4\xAE" => "\xE8\xB3\xAD",		"\xD4\xAF" => "\xE8\xB7\xB3",		"\xD4\xB0" => "\xE8\xB9\x88",		"\xD4\xB1" => "\xE9\x80\x83",		"\xD4\xB2" => "\xE9\x80\x94",		"\xD4\xB3" => "\xE9\x81\x93",		"\xD4\xB4" => "\xE9\x83\xBD",		"\xD4\xB5" => "\xE9\x8D\x8D",		"\xD4\xB6" => "\xE9\x99\xB6",		"\xD4\xB7" => "\xE9\x9F\x9C",		"\xD4\xB8" => "\xE6\xAF\x92",		"\xD4\xB9" => "\xE7\x80\x86",		"\xD4\xBA" => "\xE7\x89\x98",		"\xD4\xBB" => "\xE7\x8A\xA2",		"\xD4\xBC" => "\xE7\x8D\xA8",		"\xD4\xBD" => "\xE7\x9D\xA3",		"\xD4\xBE" => "\xE7\xA6\xBF",		"\xD4\xBF" => "\xE7\xAF\xA4",		"\xD4\xC0" => "\xE7\xBA\x9B",		"\xD4\xC1" => "\xE8\xAE\x80",		"\xD4\xC2" => "\xE5\xA2\xA9",		"\xD4\xC3" => "\xE6\x83\x87",		"\xD4\xC4" => "\xE6\x95\xA6",		"\xD4\xC5" => "\xE6\x97\xBD",		"\xD4\xC6" => "\xE6\x9A\xBE",		"\xD4\xC7" => "\xE6\xB2\x8C",		"\xD4\xC8" => "\xE7\x84\x9E",		"\xD4\xC9" => "\xE7\x87\x89",		"\xD4\xCA" => "\xE8\xB1\x9A",		"\xD4\xCB" => "\xE9\xA0\x93",		"\xD4\xCC" => "\xE4\xB9\xAD",		"\xD4\xCD" => "\xE7\xAA\x81",		"\xD4\xCE" => "\xE4\xBB\x9D",		"\xD4\xCF" => "\xE5\x86\xAC",		"\xD4\xD0" => "\xE5\x87\x8D",		"\xD4\xD1" => "\xE5\x8B\x95",		"\xD4\xD2" => "\xE5\x90\x8C",		"\xD4\xD3" => "\xE6\x86\xA7",		"\xD4\xD4" => "\xE6\x9D\xB1",		"\xD4\xD5" => "\xE6\xA1\x90",		"\xD4\xD6" => "\xE6\xA3\x9F",		"\xD4\xD7" => "\xE6\xB4\x9E",		"\xD4\xD8" => "\xE6\xBD\xBC",		"\xD4\xD9" => "\xE7\x96\xBC",		"\xD4\xDA" => "\xE7\x9E\xB3",		"\xD4\xDB" => "\xE7\xAB\xA5",		"\xD4\xDC" => "\xE8\x83\xB4",		"\xD4\xDD" => "\xE8\x91\xA3",		"\xD4\xDE" => "\xE9\x8A\x85",		"\xD4\xDF" => "\xE5\x85\x9C",		"\xD4\xE0" => "\xE6\x96\x97",		"\xD4\xE1" => "\xE6\x9D\x9C",		"\xD4\xE2" => "\xE6\x9E\x93",		"\xD4\xE3" => "\xE7\x97\x98",		"\xD4\xE4" => "\xE7\xAB\x87",		"\xD4\xE5" => "\xE8\x8D\xB3",		"\xD4\xE6" => "\xEF\xA5\x9A",		"\xD4\xE7" => "\xE8\xB1\x86",		"\xD4\xE8" => "\xE9\x80\x97",		"\xD4\xE9" => "\xE9\xA0\xAD",		"\xD4\xEA" => "\xE5\xB1\xAF",		"\xD4\xEB" => "\xE8\x87\x80",		"\xD4\xEC" => "\xE8\x8A\x9A",		"\xD4\xED" => "\xE9\x81\x81",		"\xD4\xEE" => "\xE9\x81\xAF",		"\xD4\xEF" => "\xE9\x88\x8D",		"\xD4\xF0" => "\xE5\xBE\x97",		"\xD4\xF1" => "\xE5\xB6\x9D",		"\xD4\xF2" => "\xE6\xA9\x99",		"\xD4\xF3" => "\xE7\x87\x88",		"\xD4\xF4" => "\xE7\x99\xBB",		"\xD4\xF5" => "\xE7\xAD\x89",		"\xD4\xF6" => "\xE8\x97\xA4",		"\xD4\xF7" => "\xE8\xAC\x84",		"\xD4\xF8" => "\xE9\x84\xA7",		"\xD4\xF9" => "\xE9\xA8\xB0",		"\xD4\xFA" => "\xE5\x96\x87",		"\xD4\xFB" => "\xE6\x87\xB6",		"\xD4\xFC" => "\xEF\xA5\x9B",		"\xD4\xFD" => "\xE7\x99\xA9",		"\xD4\xFE" => "\xE7\xBE\x85",		"\xD5\xA1" => "\xE8\x98\xBF",		"\xD5\xA2" => "\xE8\x9E\xBA",		"\xD5\xA3" => "\xE8\xA3\xB8",		"\xD5\xA4" => "\xE9\x82\x8F",		"\xD5\xA5" => "\xEF\xA5\x9C",		"\xD5\xA6" => "\xE6\xB4\x9B",		"\xD5\xA7" => "\xE7\x83\x99",		"\xD5\xA8" => "\xE7\x8F\x9E",		"\xD5\xA9" => "\xE7\xB5\xA1",		"\xD5\xAA" => "\xE8\x90\xBD",		"\xD5\xAB" => "\xEF\xA5\x9D",		"\xD5\xAC" => "\xE9\x85\xAA",		"\xD5\xAD" => "\xE9\xA7\xB1",		"\xD5\xAE" => "\xEF\xA5\x9E",		"\xD5\xAF" => "\xE4\xBA\x82",		"\xD5\xB0" => "\xE5\x8D\xB5",		"\xD5\xB1" => "\xE6\xAC\x84",		"\xD5\xB2" => "\xE6\xAC\x92",		"\xD5\xB3" => "\xE7\x80\xBE",		"\xD5\xB4" => "\xE7\x88\x9B",		"\xD5\xB5" => "\xE8\x98\xAD",		"\xD5\xB6" => "\xE9\xB8\x9E",		"\xD5\xB7" => "\xE5\x89\x8C",		"\xD5\xB8" => "\xE8\xBE\xA3",		"\xD5\xB9" => "\xE5\xB5\x90",		"\xD5\xBA" => "\xE6\x93\xA5",		"\xD5\xBB" => "\xE6\x94\xAC",		"\xD5\xBC" => "\xE6\xAC\x96",		"\xD5\xBD" => "\xE6\xBF\xAB",		"\xD5\xBE" => "\xE7\xB1\x83",		"\xD5\xBF" => "\xE7\xBA\x9C",		"\xD5\xC0" => "\xE8\x97\x8D",		"\xD5\xC1" => "\xE8\xA5\xA4",		"\xD5\xC2" => "\xE8\xA6\xBD",		"\xD5\xC3" => "\xE6\x8B\x89",		"\xD5\xC4" => "\xE8\x87\x98",		"\xD5\xC5" => "\xE8\xA0\x9F",		"\xD5\xC6" => "\xE5\xBB\x8A",		"\xD5\xC7" => "\xE6\x9C\x97",		"\xD5\xC8" => "\xE6\xB5\xAA",		"\xD5\xC9" => "\xE7\x8B\xBC",		"\xD5\xCA" => "\xE7\x90\x85",		"\xD5\xCB" => "\xE7\x91\xAF",		"\xD5\xCC" => "\xE8\x9E\x82",		"\xD5\xCD" => "\xE9\x83\x9E",		"\xD5\xCE" => "\xE4\xBE\x86",		"\xD5\xCF" => "\xE5\xB4\x8D",		"\xD5\xD0" => "\xE5\xBE\xA0",		"\xD5\xD1" => "\xE8\x90\x8A",		"\xD5\xD2" => "\xE5\x86\xB7",		"\xD5\xD3" => "\xE6\x8E\xA0",		"\xD5\xD4" => "\xE7\x95\xA5",		"\xD5\xD5" => "\xE4\xBA\xAE",		"\xD5\xD6" => "\xE5\x80\x86",		"\xD5\xD7" => "\xE5\x85\xA9",		"\xD5\xD8" => "\xE5\x87\x89",		"\xD5\xD9" => "\xE6\xA2\x81",		"\xD5\xDA" => "\xE6\xA8\x91",		"\xD5\xDB" => "\xE7\xB2\xAE",		"\xD5\xDC" => "\xE7\xB2\xB1",		"\xD5\xDD" => "\xE7\xB3\xA7",		"\xD5\xDE" => "\xE8\x89\xAF",		"\xD5\xDF" => "\xE8\xAB\x92",		"\xD5\xE0" => "\xE8\xBC\x9B",		"\xD5\xE1" => "\xE9\x87\x8F",		"\xD5\xE2" => "\xE4\xBE\xB6",		"\xD5\xE3" => "\xE5\x84\xB7",		"\xD5\xE4" => "\xE5\x8B\xB5",		"\xD5\xE5" => "\xE5\x91\x82",		"\xD5\xE6" => "\xE5\xBB\xAC",		"\xD5\xE7" => "\xE6\x85\xAE",		"\xD5\xE8" => "\xE6\x88\xBE",		"\xD5\xE9" => "\xE6\x97\x85",		"\xD5\xEA" => "\xE6\xAB\x9A",		"\xD5\xEB" => "\xE6\xBF\xBE",		"\xD5\xEC" => "\xE7\xA4\xAA",		"\xD5\xED" => "\xE8\x97\x9C",		"\xD5\xEE" => "\xE8\xA0\xA3",		"\xD5\xEF" => "\xE9\x96\xAD",		"\xD5\xF0" => "\xE9\xA9\xA2",		"\xD5\xF1" => "\xE9\xA9\xAA",		"\xD5\xF2" => "\xE9\xBA\x97",		"\xD5\xF3" => "\xE9\xBB\x8E",		"\xD5\xF4" => "\xE5\x8A\x9B",		"\xD5\xF5" => "\xE6\x9B\x86",		"\xD5\xF6" => "\xE6\xAD\xB7",		"\xD5\xF7" => "\xE7\x80\x9D",		"\xD5\xF8" => "\xE7\xA4\xAB",		"\xD5\xF9" => "\xE8\xBD\xA2",		"\xD5\xFA" => "\xE9\x9D\x82",		"\xD5\xFB" => "\xE6\x86\x90",		"\xD5\xFC" => "\xE6\x88\x80",		"\xD5\xFD" => "\xE6\x94\xA3",		"\xD5\xFE" => "\xE6\xBC\xA3",		"\xD6\xA1" => "\xE7\x85\x89",		"\xD6\xA2" => "\xE7\x92\x89",		"\xD6\xA3" => "\xE7\xB7\xB4",		"\xD6\xA4" => "\xE8\x81\xAF",		"\xD6\xA5" => "\xE8\x93\xAE",		"\xD6\xA6" => "\xE8\xBC\xA6",		"\xD6\xA7" => "\xE9\x80\xA3",		"\xD6\xA8" => "\xE9\x8D\x8A",		"\xD6\xA9" => "\xE5\x86\xBD",		"\xD6\xAA" => "\xE5\x88\x97",		"\xD6\xAB" => "\xE5\x8A\xA3",		"\xD6\xAC" => "\xE6\xB4\x8C",		"\xD6\xAD" => "\xE7\x83\x88",		"\xD6\xAE" => "\xE8\xA3\x82",		"\xD6\xAF" => "\xE5\xBB\x89",		"\xD6\xB0" => "\xE6\x96\x82",		"\xD6\xB1" => "\xE6\xAE\xAE",		"\xD6\xB2" => "\xE6\xBF\x82",		"\xD6\xB3" => "\xE7\xB0\xBE",		"\xD6\xB4" => "\xE7\x8D\xB5",		"\xD6\xB5" => "\xE4\xBB\xA4",		"\xD6\xB6" => "\xE4\xBC\xB6",		"\xD6\xB7" => "\xE5\x9B\xB9",		"\xD6\xB8" => "\xEF\xA5\x9F",		"\xD6\xB9" => "\xE5\xB2\xBA",		"\xD6\xBA" => "\xE5\xB6\xBA",		"\xD6\xBB" => "\xE6\x80\x9C",		"\xD6\xBC" => "\xE7\x8E\xB2",		"\xD6\xBD" => "\xE7\xAC\xAD",		"\xD6\xBE" => "\xE7\xBE\x9A",		"\xD6\xBF" => "\xE7\xBF\x8E",		"\xD6\xC0" => "\xE8\x81\x86",		"\xD6\xC1" => "\xE9\x80\x9E",		"\xD6\xC2" => "\xE9\x88\xB4",		"\xD6\xC3" => "\xE9\x9B\xB6",		"\xD6\xC4" => "\xE9\x9D\x88",		"\xD6\xC5" => "\xE9\xA0\x98",		"\xD6\xC6" => "\xE9\xBD\xA1",		"\xD6\xC7" => "\xE4\xBE\x8B",		"\xD6\xC8" => "\xE6\xBE\xA7",		"\xD6\xC9" => "\xE7\xA6\xAE",		"\xD6\xCA" => "\xE9\x86\xB4",		"\xD6\xCB" => "\xE9\x9A\xB7",		"\xD6\xCC" => "\xE5\x8B\x9E",		"\xD6\xCD" => "\xEF\xA5\xA0",		"\xD6\xCE" => "\xE6\x92\x88",		"\xD6\xCF" => "\xE6\x93\x84",		"\xD6\xD0" => "\xE6\xAB\x93",		"\xD6\xD1" => "\xE6\xBD\x9E",		"\xD6\xD2" => "\xE7\x80\x98",		"\xD6\xD3" => "\xE7\x88\x90",		"\xD6\xD4" => "\xE7\x9B\xA7",		"\xD6\xD5" => "\xE8\x80\x81",		"\xD6\xD6" => "\xE8\x98\x86",		"\xD6\xD7" => "\xE8\x99\x9C",		"\xD6\xD8" => "\xE8\xB7\xAF",		"\xD6\xD9" => "\xE8\xBC\x85",		"\xD6\xDA" => "\xE9\x9C\xB2",		"\xD6\xDB" => "\xE9\xAD\xAF",		"\xD6\xDC" => "\xE9\xB7\xBA",		"\xD6\xDD" => "\xE9\xB9\xB5",		"\xD6\xDE" => "\xE7\xA2\x8C",		"\xD6\xDF" => "\xE7\xA5\xBF",		"\xD6\xE0" => "\xE7\xB6\xA0",		"\xD6\xE1" => "\xE8\x8F\x89",		"\xD6\xE2" => "\xE9\x8C\x84",		"\xD6\xE3" => "\xE9\xB9\xBF",		"\xD6\xE4" => "\xE9\xBA\x93",		"\xD6\xE5" => "\xE8\xAB\x96",		"\xD6\xE6" => "\xE5\xA3\x9F",		"\xD6\xE7" => "\xE5\xBC\x84",		"\xD6\xE8" => "\xE6\x9C\xA7",		"\xD6\xE9" => "\xE7\x80\xA7",		"\xD6\xEA" => "\xE7\x93\x8F",		"\xD6\xEB" => "\xE7\xB1\xA0",		"\xD6\xEC" => "\xE8\x81\xBE",		"\xD6\xED" => "\xE5\x84\xA1",		"\xD6\xEE" => "\xE7\x80\xA8",		"\xD6\xEF" => "\xE7\x89\xA2",		"\xD6\xF0" => "\xE7\xA3\x8A",		"\xD6\xF1" => "\xE8\xB3\x82",		"\xD6\xF2" => "\xE8\xB3\x9A",		"\xD6\xF3" => "\xE8\xB3\xB4",		"\xD6\xF4" => "\xE9\x9B\xB7",		"\xD6\xF5" => "\xE4\xBA\x86",		"\xD6\xF6" => "\xE5\x83\x9A",		"\xD6\xF7" => "\xE5\xAF\xAE",		"\xD6\xF8" => "\xE5\xBB\x96",		"\xD6\xF9" => "\xE6\x96\x99",		"\xD6\xFA" => "\xE7\x87\x8E",		"\xD6\xFB" => "\xE7\x99\x82",		"\xD6\xFC" => "\xE7\x9E\xAD",		"\xD6\xFD" => "\xE8\x81\x8A",		"\xD6\xFE" => "\xE8\x93\xBC",		"\xD7\xA1" => "\xE9\x81\xBC",		"\xD7\xA2" => "\xE9\xAC\xA7",		"\xD7\xA3" => "\xE9\xBE\x8D",		"\xD7\xA4" => "\xE5\xA3\x98",		"\xD7\xA5" => "\xE5\xA9\x81",		"\xD7\xA6" => "\xE5\xB1\xA2",		"\xD7\xA7" => "\xE6\xA8\x93",		"\xD7\xA8" => "\xE6\xB7\x9A",		"\xD7\xA9" => "\xE6\xBC\x8F",		"\xD7\xAA" => "\xE7\x98\xBB",		"\xD7\xAB" => "\xE7\xB4\xAF",		"\xD7\xAC" => "\xE7\xB8\xB7",		"\xD7\xAD" => "\xE8\x94\x9E",		"\xD7\xAE" => "\xE8\xA4\xB8",		"\xD7\xAF" => "\xE9\x8F\xA4",		"\xD7\xB0" => "\xE9\x99\x8B",		"\xD7\xB1" => "\xE5\x8A\x89",		"\xD7\xB2" => "\xE6\x97\x92",		"\xD7\xB3" => "\xE6\x9F\xB3",		"\xD7\xB4" => "\xE6\xA6\xB4",		"\xD7\xB5" => "\xE6\xB5\x81",		"\xD7\xB6" => "\xE6\xBA\x9C",		"\xD7\xB7" => "\xE7\x80\x8F",		"\xD7\xB8" => "\xE7\x90\x89",		"\xD7\xB9" => "\xE7\x91\xA0",		"\xD7\xBA" => "\xE7\x95\x99",		"\xD7\xBB" => "\xE7\x98\xA4",		"\xD7\xBC" => "\xE7\xA1\xAB",		"\xD7\xBD" => "\xE8\xAC\xAC",		"\xD7\xBE" => "\xE9\xA1\x9E",		"\xD7\xBF" => "\xE5\x85\xAD",		"\xD7\xC0" => "\xE6\x88\xAE",		"\xD7\xC1" => "\xE9\x99\xB8",		"\xD7\xC2" => "\xE4\xBE\x96",		"\xD7\xC3" => "\xE5\x80\xAB",		"\xD7\xC4" => "\xE5\xB4\x99",		"\xD7\xC5" => "\xE6\xB7\xAA",		"\xD7\xC6" => "\xE7\xB6\xB8",		"\xD7\xC7" => "\xE8\xBC\xAA",		"\xD7\xC8" => "\xE5\xBE\x8B",		"\xD7\xC9" => "\xE6\x85\x84",		"\xD7\xCA" => "\xE6\xA0\x97",		"\xD7\xCB" => "\xEF\xA5\xA1",		"\xD7\xCC" => "\xE9\x9A\x86",		"\xD7\xCD" => "\xE5\x8B\x92",		"\xD7\xCE" => "\xE8\x82\x8B",		"\xD7\xCF" => "\xE5\x87\x9C",		"\xD7\xD0" => "\xE5\x87\x8C",		"\xD7\xD1" => "\xE6\xA5\x9E",		"\xD7\xD2" => "\xE7\xA8\x9C",		"\xD7\xD3" => "\xE7\xB6\xBE",		"\xD7\xD4" => "\xE8\x8F\xB1",		"\xD7\xD5" => "\xE9\x99\xB5",		"\xD7\xD6" => "\xE4\xBF\x9A",		"\xD7\xD7" => "\xE5\x88\xA9",		"\xD7\xD8" => "\xE5\x8E\x98",		"\xD7\xD9" => "\xE5\x90\x8F",		"\xD7\xDA" => "\xE5\x94\x8E",		"\xD7\xDB" => "\xE5\xB1\xA5",		"\xD7\xDC" => "\xE6\x82\xA7",		"\xD7\xDD" => "\xE6\x9D\x8E",		"\xD7\xDE" => "\xE6\xA2\xA8",		"\xD7\xDF" => "\xE6\xB5\xAC",		"\xD7\xE0" => "\xE7\x8A\x81",		"\xD7\xE1" => "\xE7\x8B\xB8",		"\xD7\xE2" => "\xE7\x90\x86",		"\xD7\xE3" => "\xE7\x92\x83",		"\xD7\xE4" => "\xEF\xA5\xA2",		"\xD7\xE5" => "\xE7\x97\xA2",		"\xD7\xE6" => "\xE7\xB1\xAC",		"\xD7\xE7" => "\xE7\xBD\xB9",		"\xD7\xE8" => "\xE7\xBE\xB8",		"\xD7\xE9" => "\xE8\x8E\x89",		"\xD7\xEA" => "\xE8\xA3\x8F",		"\xD7\xEB" => "\xE8\xA3\xA1",		"\xD7\xEC" => "\xE9\x87\x8C",		"\xD7\xED" => "\xE9\x87\x90",		"\xD7\xEE" => "\xE9\x9B\xA2",		"\xD7\xEF" => "\xE9\xAF\x89",		"\xD7\xF0" => "\xE5\x90\x9D",		"\xD7\xF1" => "\xE6\xBD\xBE",		"\xD7\xF2" => "\xE7\x87\x90",		"\xD7\xF3" => "\xE7\x92\x98",		"\xD7\xF4" => "\xE8\x97\xBA",		"\xD7\xF5" => "\xE8\xBA\xAA",		"\xD7\xF6" => "\xE9\x9A\xA3",		"\xD7\xF7" => "\xE9\xB1\x97",		"\xD7\xF8" => "\xE9\xBA\x9F",		"\xD7\xF9" => "\xE6\x9E\x97",		"\xD7\xFA" => "\xE6\xB7\x8B",		"\xD7\xFB" => "\xE7\x90\xB3",		"\xD7\xFC" => "\xE8\x87\xA8",		"\xD7\xFD" => "\xE9\x9C\x96",		"\xD7\xFE" => "\xE7\xA0\xAC",		"\xD8\xA1" => "\xE7\xAB\x8B",		"\xD8\xA2" => "\xE7\xAC\xA0",		"\xD8\xA3" => "\xE7\xB2\x92",		"\xD8\xA4" => "\xE6\x91\xA9",		"\xD8\xA5" => "\xE7\x91\xAA",		"\xD8\xA6" => "\xE7\x97\xB2",		"\xD8\xA7" => "\xE7\xA2\xBC",		"\xD8\xA8" => "\xE7\xA3\xA8",		"\xD8\xA9" => "\xE9\xA6\xAC",		"\xD8\xAA" => "\xE9\xAD\x94",		"\xD8\xAB" => "\xE9\xBA\xBB",		"\xD8\xAC" => "\xE5\xAF\x9E",		"\xD8\xAD" => "\xE5\xB9\x95",		"\xD8\xAE" => "\xE6\xBC\xA0",		"\xD8\xAF" => "\xE8\x86\x9C",		"\xD8\xB0" => "\xE8\x8E\xAB",		"\xD8\xB1" => "\xE9\x82\x88",		"\xD8\xB2" => "\xE4\xB8\x87",		"\xD8\xB3" => "\xE5\x8D\x8D",		"\xD8\xB4" => "\xE5\xA8\xA9",		"\xD8\xB5" => "\xE5\xB7\x92",		"\xD8\xB6" => "\xE5\xBD\x8E",		"\xD8\xB7" => "\xE6\x85\xA2",		"\xD8\xB8" => "\xE6\x8C\xBD",		"\xD8\xB9" => "\xE6\x99\xA9",		"\xD8\xBA" => "\xE6\x9B\xBC",		"\xD8\xBB" => "\xE6\xBB\xBF",		"\xD8\xBC" => "\xE6\xBC\xAB",		"\xD8\xBD" => "\xE7\x81\xA3",		"\xD8\xBE" => "\xE7\x9E\x9E",		"\xD8\xBF" => "\xE8\x90\xAC",		"\xD8\xC0" => "\xE8\x94\x93",		"\xD8\xC1" => "\xE8\xA0\xBB",		"\xD8\xC2" => "\xE8\xBC\x93",		"\xD8\xC3" => "\xE9\xA5\x85",		"\xD8\xC4" => "\xE9\xB0\xBB",		"\xD8\xC5" => "\xE5\x94\x9C",		"\xD8\xC6" => "\xE6\x8A\xB9",		"\xD8\xC7" => "\xE6\x9C\xAB",		"\xD8\xC8" => "\xE6\xB2\xAB",		"\xD8\xC9" => "\xE8\x8C\x89",		"\xD8\xCA" => "\xE8\xA5\xAA",		"\xD8\xCB" => "\xE9\x9D\xBA",		"\xD8\xCC" => "\xE4\xBA\xA1",		"\xD8\xCD" => "\xE5\xA6\x84",		"\xD8\xCE" => "\xE5\xBF\x98",		"\xD8\xCF" => "\xE5\xBF\x99",		"\xD8\xD0" => "\xE6\x9C\x9B",		"\xD8\xD1" => "\xE7\xB6\xB2",		"\xD8\xD2" => "\xE7\xBD\x94",		"\xD8\xD3" => "\xE8\x8A\x92",		"\xD8\xD4" => "\xE8\x8C\xAB",		"\xD8\xD5" => "\xE8\x8E\xBD",		"\xD8\xD6" => "\xE8\xBC\x9E",		"\xD8\xD7" => "\xE9\x82\x99",		"\xD8\xD8" => "\xE5\x9F\x8B",		"\xD8\xD9" => "\xE5\xA6\xB9",		"\xD8\xDA" => "\xE5\xAA\x92",		"\xD8\xDB" => "\xE5\xAF\x90",		"\xD8\xDC" => "\xE6\x98\xA7",		"\xD8\xDD" => "\xE6\x9E\x9A",		"\xD8\xDE" => "\xE6\xA2\x85",		"\xD8\xDF" => "\xE6\xAF\x8F",		"\xD8\xE0" => "\xE7\x85\xA4",		"\xD8\xE1" => "\xE7\xBD\xB5",		"\xD8\xE2" => "\xE8\xB2\xB7",		"\xD8\xE3" => "\xE8\xB3\xA3",		"\xD8\xE4" => "\xE9\x82\x81",		"\xD8\xE5" => "\xE9\xAD\x85",		"\xD8\xE6" => "\xE8\x84\x88",		"\xD8\xE7" => "\xE8\xB2\x8A",		"\xD8\xE8" => "\xE9\x99\x8C",		"\xD8\xE9" => "\xE9\xA9\x80",		"\xD8\xEA" => "\xE9\xBA\xA5",		"\xD8\xEB" => "\xE5\xAD\x9F",		"\xD8\xEC" => "\xE6\xB0\x93",		"\xD8\xED" => "\xE7\x8C\x9B",		"\xD8\xEE" => "\xE7\x9B\xB2",		"\xD8\xEF" => "\xE7\x9B\x9F",		"\xD8\xF0" => "\xE8\x90\x8C",		"\xD8\xF1" => "\xE5\x86\xAA",		"\xD8\xF2" => "\xE8\xA6\x93",		"\xD8\xF3" => "\xE5\x85\x8D",		"\xD8\xF4" => "\xE5\x86\x95",		"\xD8\xF5" => "\xE5\x8B\x89",		"\xD8\xF6" => "\xE6\xA3\x89",		"\xD8\xF7" => "\xE6\xB2\x94",		"\xD8\xF8" => "\xE7\x9C\x84",		"\xD8\xF9" => "\xE7\x9C\xA0",		"\xD8\xFA" => "\xE7\xB6\xBF",		"\xD8\xFB" => "\xE7\xB7\xAC",		"\xD8\xFC" => "\xE9\x9D\xA2",		"\xD8\xFD" => "\xE9\xBA\xB5",		"\xD8\xFE" => "\xE6\xBB\x85",		"\xD9\xA1" => "\xE8\x94\x91",		"\xD9\xA2" => "\xE5\x86\xA5",		"\xD9\xA3" => "\xE5\x90\x8D",		"\xD9\xA4" => "\xE5\x91\xBD",		"\xD9\xA5" => "\xE6\x98\x8E",		"\xD9\xA6" => "\xE6\x9A\x9D",		"\xD9\xA7" => "\xE6\xA4\xA7",		"\xD9\xA8" => "\xE6\xBA\x9F",		"\xD9\xA9" => "\xE7\x9A\xBF",		"\xD9\xAA" => "\xE7\x9E\x91",		"\xD9\xAB" => "\xE8\x8C\x97",		"\xD9\xAC" => "\xE8\x93\x82",		"\xD9\xAD" => "\xE8\x9E\x9F",		"\xD9\xAE" => "\xE9\x85\xA9",		"\xD9\xAF" => "\xE9\x8A\x98",		"\xD9\xB0" => "\xE9\xB3\xB4",		"\xD9\xB1" => "\xE8\xA2\x82",		"\xD9\xB2" => "\xE4\xBE\xAE",		"\xD9\xB3" => "\xE5\x86\x92",		"\xD9\xB4" => "\xE5\x8B\x9F",		"\xD9\xB5" => "\xE5\xA7\x86",		"\xD9\xB6" => "\xE5\xB8\xBD",		"\xD9\xB7" => "\xE6\x85\x95",		"\xD9\xB8" => "\xE6\x91\xB8",		"\xD9\xB9" => "\xE6\x91\xB9",		"\xD9\xBA" => "\xE6\x9A\xAE",		"\xD9\xBB" => "\xE6\x9F\x90",		"\xD9\xBC" => "\xE6\xA8\xA1",		"\xD9\xBD" => "\xE6\xAF\x8D",		"\xD9\xBE" => "\xE6\xAF\x9B",		"\xD9\xBF" => "\xE7\x89\x9F",		"\xD9\xC0" => "\xE7\x89\xA1",		"\xD9\xC1" => "\xE7\x91\x81",		"\xD9\xC2" => "\xE7\x9C\xB8",		"\xD9\xC3" => "\xE7\x9F\x9B",		"\xD9\xC4" => "\xE8\x80\x97",		"\xD9\xC5" => "\xE8\x8A\xBC",		"\xD9\xC6" => "\xE8\x8C\x85",		"\xD9\xC7" => "\xE8\xAC\x80",		"\xD9\xC8" => "\xE8\xAC\xA8",		"\xD9\xC9" => "\xE8\xB2\x8C",		"\xD9\xCA" => "\xE6\x9C\xA8",		"\xD9\xCB" => "\xE6\xB2\x90",		"\xD9\xCC" => "\xE7\x89\xA7",		"\xD9\xCD" => "\xE7\x9B\xAE",		"\xD9\xCE" => "\xE7\x9D\xA6",		"\xD9\xCF" => "\xE7\xA9\x86",		"\xD9\xD0" => "\xE9\xB6\xA9",		"\xD9\xD1" => "\xE6\xAD\xBF",		"\xD9\xD2" => "\xE6\xB2\x92",		"\xD9\xD3" => "\xE5\xA4\xA2",		"\xD9\xD4" => "\xE6\x9C\xA6",		"\xD9\xD5" => "\xE8\x92\x99",		"\xD9\xD6" => "\xE5\x8D\xAF",		"\xD9\xD7" => "\xE5\xA2\x93",		"\xD9\xD8" => "\xE5\xA6\x99",		"\xD9\xD9" => "\xE5\xBB\x9F",		"\xD9\xDA" => "\xE6\x8F\x8F",		"\xD9\xDB" => "\xE6\x98\xB4",		"\xD9\xDC" => "\xE6\x9D\xB3",		"\xD9\xDD" => "\xE6\xB8\xBA",		"\xD9\xDE" => "\xE7\x8C\xAB",		"\xD9\xDF" => "\xE7\xAB\x97",		"\xD9\xE0" => "\xE8\x8B\x97",		"\xD9\xE1" => "\xE9\x8C\xA8",		"\xD9\xE2" => "\xE5\x8B\x99",		"\xD9\xE3" => "\xE5\xB7\xAB",		"\xD9\xE4" => "\xE6\x86\xAE",		"\xD9\xE5" => "\xE6\x87\x8B",		"\xD9\xE6" => "\xE6\x88\x8A",		"\xD9\xE7" => "\xE6\x8B\x87",		"\xD9\xE8" => "\xE6\x92\xAB",		"\xD9\xE9" => "\xE6\x97\xA0",		"\xD9\xEA" => "\xE6\xA5\x99",		"\xD9\xEB" => "\xE6\xAD\xA6",		"\xD9\xEC" => "\xE6\xAF\x8B",		"\xD9\xED" => "\xE7\x84\xA1",		"\xD9\xEE" => "\xE7\x8F\xB7",		"\xD9\xEF" => "\xE7\x95\x9D",		"\xD9\xF0" => "\xE7\xB9\x86",		"\xD9\xF1" => "\xE8\x88\x9E",		"\xD9\xF2" => "\xE8\x8C\x82",		"\xD9\xF3" => "\xE8\x95\xAA",		"\xD9\xF4" => "\xE8\xAA\xA3",		"\xD9\xF5" => "\xE8\xB2\xBF",		"\xD9\xF6" => "\xE9\x9C\xA7",		"\xD9\xF7" => "\xE9\xB5\xA1",		"\xD9\xF8" => "\xE5\xA2\xA8",		"\xD9\xF9" => "\xE9\xBB\x98",		"\xD9\xFA" => "\xE5\x80\x91",		"\xD9\xFB" => "\xE5\x88\x8E",		"\xD9\xFC" => "\xE5\x90\xBB",		"\xD9\xFD" => "\xE5\x95\x8F",		"\xD9\xFE" => "\xE6\x96\x87",		"\xDA\xA1" => "\xE6\xB1\xB6",		"\xDA\xA2" => "\xE7\xB4\x8A",		"\xDA\xA3" => "\xE7\xB4\x8B",		"\xDA\xA4" => "\xE8\x81\x9E",		"\xDA\xA5" => "\xE8\x9A\x8A",		"\xDA\xA6" => "\xE9\x96\x80",		"\xDA\xA7" => "\xE9\x9B\xAF",		"\xDA\xA8" => "\xE5\x8B\xBF",		"\xDA\xA9" => "\xE6\xB2\x95",		"\xDA\xAA" => "\xE7\x89\xA9",		"\xDA\xAB" => "\xE5\x91\xB3",		"\xDA\xAC" => "\xE5\xAA\x9A",		"\xDA\xAD" => "\xE5\xB0\xBE",		"\xDA\xAE" => "\xE5\xB5\x8B",		"\xDA\xAF" => "\xE5\xBD\x8C",		"\xDA\xB0" => "\xE5\xBE\xAE",		"\xDA\xB1" => "\xE6\x9C\xAA",		"\xDA\xB2" => "\xE6\xA2\xB6",		"\xDA\xB3" => "\xE6\xA5\xA3",		"\xDA\xB4" => "\xE6\xB8\xBC",		"\xDA\xB5" => "\xE6\xB9\x84",		"\xDA\xB6" => "\xE7\x9C\x89",		"\xDA\xB7" => "\xE7\xB1\xB3",		"\xDA\xB8" => "\xE7\xBE\x8E",		"\xDA\xB9" => "\xE8\x96\x87",		"\xDA\xBA" => "\xE8\xAC\x8E",		"\xDA\xBB" => "\xE8\xBF\xB7",		"\xDA\xBC" => "\xE9\x9D\xA1",		"\xDA\xBD" => "\xE9\xBB\xB4",		"\xDA\xBE" => "\xE5\xB2\xB7",		"\xDA\xBF" => "\xE6\x82\xB6",		"\xDA\xC0" => "\xE6\x84\x8D",		"\xDA\xC1" => "\xE6\x86\xAB",		"\xDA\xC2" => "\xE6\x95\x8F",		"\xDA\xC3" => "\xE6\x97\xBB",		"\xDA\xC4" => "\xE6\x97\xBC",		"\xDA\xC5" => "\xE6\xB0\x91",		"\xDA\xC6" => "\xE6\xB3\xAF",		"\xDA\xC7" => "\xE7\x8E\x9F",		"\xDA\xC8" => "\xE7\x8F\x89",		"\xDA\xC9" => "\xE7\xB7\xA1",		"\xDA\xCA" => "\xE9\x96\x94",		"\xDA\xCB" => "\xE5\xAF\x86",		"\xDA\xCC" => "\xE8\x9C\x9C",		"\xDA\xCD" => "\xE8\xAC\x90",		"\xDA\xCE" => "\xE5\x89\x9D",		"\xDA\xCF" => "\xE5\x8D\x9A",		"\xDA\xD0" => "\xE6\x8B\x8D",		"\xDA\xD1" => "\xE6\x90\x8F",		"\xDA\xD2" => "\xE6\x92\xB2",		"\xDA\xD3" => "\xE6\x9C\xB4",		"\xDA\xD4" => "\xE6\xA8\xB8",		"\xDA\xD5" => "\xE6\xB3\x8A",		"\xDA\xD6" => "\xE7\x8F\x80",		"\xDA\xD7" => "\xE7\x92\x9E",		"\xDA\xD8" => "\xE7\xAE\x94",		"\xDA\xD9" => "\xE7\xB2\x95",		"\xDA\xDA" => "\xE7\xB8\x9B",		"\xDA\xDB" => "\xE8\x86\x8A",		"\xDA\xDC" => "\xE8\x88\xB6",		"\xDA\xDD" => "\xE8\x96\x84",		"\xDA\xDE" => "\xE8\xBF\xAB",		"\xDA\xDF" => "\xE9\x9B\xB9",		"\xDA\xE0" => "\xE9\xA7\x81",		"\xDA\xE1" => "\xE4\xBC\xB4",		"\xDA\xE2" => "\xE5\x8D\x8A",		"\xDA\xE3" => "\xE5\x8F\x8D",		"\xDA\xE4" => "\xE5\x8F\x9B",		"\xDA\xE5" => "\xE6\x8B\x8C",		"\xDA\xE6" => "\xE6\x90\xAC",		"\xDA\xE7" => "\xE6\x94\x80",		"\xDA\xE8" => "\xE6\x96\x91",		"\xDA\xE9" => "\xE6\xA7\x83",		"\xDA\xEA" => "\xE6\xB3\xAE",		"\xDA\xEB" => "\xE6\xBD\x98",		"\xDA\xEC" => "\xE7\x8F\xAD",		"\xDA\xED" => "\xE7\x95\x94",		"\xDA\xEE" => "\xE7\x98\xA2",		"\xDA\xEF" => "\xE7\x9B\xA4",		"\xDA\xF0" => "\xE7\x9B\xBC",		"\xDA\xF1" => "\xE7\xA3\x90",		"\xDA\xF2" => "\xE7\xA3\xBB",		"\xDA\xF3" => "\xE7\xA4\xAC",		"\xDA\xF4" => "\xE7\xB5\x86",		"\xDA\xF5" => "\xE8\x88\xAC",		"\xDA\xF6" => "\xE8\x9F\xA0",		"\xDA\xF7" => "\xE8\xBF\x94",		"\xDA\xF8" => "\xE9\xA0\x92",		"\xDA\xF9" => "\xE9\xA3\xAF",		"\xDA\xFA" => "\xE5\x8B\x83",		"\xDA\xFB" => "\xE6\x8B\x94",		"\xDA\xFC" => "\xE6\x92\xA5",		"\xDA\xFD" => "\xE6\xB8\xA4",		"\xDA\xFE" => "\xE6\xBD\x91",		"\xDB\xA1" => "\xE7\x99\xBC",		"\xDB\xA2" => "\xE8\xB7\x8B",		"\xDB\xA3" => "\xE9\x86\xB1",		"\xDB\xA4" => "\xE9\x89\xA2",		"\xDB\xA5" => "\xE9\xAB\xAE",		"\xDB\xA6" => "\xE9\xAD\x83",		"\xDB\xA7" => "\xE5\x80\xA3",		"\xDB\xA8" => "\xE5\x82\x8D",		"\xDB\xA9" => "\xE5\x9D\x8A",		"\xDB\xAA" => "\xE5\xA6\xA8",		"\xDB\xAB" => "\xE5\xB0\xA8",		"\xDB\xAC" => "\xE5\xB9\x87",		"\xDB\xAD" => "\xE5\xBD\xB7",		"\xDB\xAE" => "\xE6\x88\xBF",		"\xDB\xAF" => "\xE6\x94\xBE",		"\xDB\xB0" => "\xE6\x96\xB9",		"\xDB\xB1" => "\xE6\x97\x81",		"\xDB\xB2" => "\xE6\x98\x89",		"\xDB\xB3" => "\xE6\x9E\x8B",		"\xDB\xB4" => "\xE6\xA6\x9C",		"\xDB\xB5" => "\xE6\xBB\x82",		"\xDB\xB6" => "\xE7\xA3\x85",		"\xDB\xB7" => "\xE7\xB4\xA1",		"\xDB\xB8" => "\xE8\x82\xAA",		"\xDB\xB9" => "\xE8\x86\x80",		"\xDB\xBA" => "\xE8\x88\xAB",		"\xDB\xBB" => "\xE8\x8A\xB3",		"\xDB\xBC" => "\xE8\x92\xA1",		"\xDB\xBD" => "\xE8\x9A\x8C",		"\xDB\xBE" => "\xE8\xA8\xAA",		"\xDB\xBF" => "\xE8\xAC\x97",		"\xDB\xC0" => "\xE9\x82\xA6",		"\xDB\xC1" => "\xE9\x98\xB2",		"\xDB\xC2" => "\xE9\xBE\x90",		"\xDB\xC3" => "\xE5\x80\x8D",		"\xDB\xC4" => "\xE4\xBF\xB3",		"\xDB\xC5" => "\xEF\xA5\xA3",		"\xDB\xC6" => "\xE5\x9F\xB9",		"\xDB\xC7" => "\xE5\xBE\x98",		"\xDB\xC8" => "\xE6\x8B\x9C",		"\xDB\xC9" => "\xE6\x8E\x92",		"\xDB\xCA" => "\xE6\x9D\xAF",		"\xDB\xCB" => "\xE6\xB9\x83",		"\xDB\xCC" => "\xE7\x84\x99",		"\xDB\xCD" => "\xE7\x9B\x83",		"\xDB\xCE" => "\xE8\x83\x8C",		"\xDB\xCF" => "\xE8\x83\x9A",		"\xDB\xD0" => "\xE8\xA3\xB4",		"\xDB\xD1" => "\xE8\xA3\xB5",		"\xDB\xD2" => "\xE8\xA4\x99",		"\xDB\xD3" => "\xE8\xB3\xA0",		"\xDB\xD4" => "\xE8\xBC\xA9",		"\xDB\xD5" => "\xE9\x85\x8D",		"\xDB\xD6" => "\xE9\x99\xAA",		"\xDB\xD7" => "\xE4\xBC\xAF",		"\xDB\xD8" => "\xE4\xBD\xB0",		"\xDB\xD9" => "\xE5\xB8\x9B",		"\xDB\xDA" => "\xE6\x9F\x8F",		"\xDB\xDB" => "\xE6\xA0\xA2",		"\xDB\xDC" => "\xE7\x99\xBD",		"\xDB\xDD" => "\xE7\x99\xBE",		"\xDB\xDE" => "\xE9\xAD\x84",		"\xDB\xDF" => "\xE5\xB9\xA1",		"\xDB\xE0" => "\xE6\xA8\x8A",		"\xDB\xE1" => "\xE7\x85\xA9",		"\xDB\xE2" => "\xE7\x87\x94",		"\xDB\xE3" => "\xE7\x95\xAA",		"\xDB\xE4" => "\xEF\xA5\xA4",		"\xDB\xE5" => "\xE7\xB9\x81",		"\xDB\xE6" => "\xE8\x95\x83",		"\xDB\xE7" => "\xE8\x97\xA9",		"\xDB\xE8" => "\xE9\xA3\x9C",		"\xDB\xE9" => "\xE4\xBC\x90",		"\xDB\xEA" => "\xE7\xAD\x8F",		"\xDB\xEB" => "\xE7\xBD\xB0",		"\xDB\xEC" => "\xE9\x96\xA5",		"\xDB\xED" => "\xE5\x87\xA1",		"\xDB\xEE" => "\xE5\xB8\x86",		"\xDB\xEF" => "\xE6\xA2\xB5",		"\xDB\xF0" => "\xE6\xB0\xBE",		"\xDB\xF1" => "\xE6\xB1\x8E",		"\xDB\xF2" => "\xE6\xB3\x9B",		"\xDB\xF3" => "\xE7\x8A\xAF",		"\xDB\xF4" => "\xE7\xAF\x84",		"\xDB\xF5" => "\xE8\x8C\x83",		"\xDB\xF6" => "\xE6\xB3\x95",		"\xDB\xF7" => "\xE7\x90\xBA",		"\xDB\xF8" => "\xE5\x83\xBB",		"\xDB\xF9" => "\xE5\x8A\x88",		"\xDB\xFA" => "\xE5\xA3\x81",		"\xDB\xFB" => "\xE6\x93\x98",		"\xDB\xFC" => "\xE6\xAA\x97",		"\xDB\xFD" => "\xE7\x92\xA7",		"\xDB\xFE" => "\xE7\x99\x96",		"\xDC\xA1" => "\xE7\xA2\xA7",		"\xDC\xA2" => "\xE8\x98\x97",		"\xDC\xA3" => "\xE9\x97\xA2",		"\xDC\xA4" => "\xE9\x9C\xB9",		"\xDC\xA5" => "\xEF\xA5\xA5",		"\xDC\xA6" => "\xE5\x8D\x9E",		"\xDC\xA7" => "\xE5\xBC\x81",		"\xDC\xA8" => "\xE8\xAE\x8A",		"\xDC\xA9" => "\xE8\xBE\xA8",		"\xDC\xAA" => "\xE8\xBE\xAF",		"\xDC\xAB" => "\xE9\x82\x8A",		"\xDC\xAC" => "\xE5\x88\xA5",		"\xDC\xAD" => "\xE7\x9E\xA5",		"\xDC\xAE" => "\xE9\xB1\x89",		"\xDC\xAF" => "\xE9\xBC\x88",		"\xDC\xB0" => "\xE4\xB8\x99",		"\xDC\xB1" => "\xE5\x80\x82",		"\xDC\xB2" => "\xE5\x85\xB5",		"\xDC\xB3" => "\xE5\xB1\x9B",		"\xDC\xB4" => "\xE5\xB9\xB7",		"\xDC\xB5" => "\xE6\x98\x9E",		"\xDC\xB6" => "\xE6\x98\xBA",		"\xDC\xB7" => "\xE6\x9F\x84",		"\xDC\xB8" => "\xE6\xA3\x85",		"\xDC\xB9" => "\xE7\x82\xB3",		"\xDC\xBA" => "\xE7\x94\x81",		"\xDC\xBB" => "\xE7\x97\x85",		"\xDC\xBC" => "\xE7\xA7\x89",		"\xDC\xBD" => "\xE7\xAB\x9D",		"\xDC\xBE" => "\xE8\xBC\xA7",		"\xDC\xBF" => "\xE9\xA4\xA0",		"\xDC\xC0" => "\xE9\xA8\x88",		"\xDC\xC1" => "\xE4\xBF\x9D",		"\xDC\xC2" => "\xE5\xA0\xA1",		"\xDC\xC3" => "\xE5\xA0\xB1",		"\xDC\xC4" => "\xE5\xAF\xB6",		"\xDC\xC5" => "\xE6\x99\xAE",		"\xDC\xC6" => "\xE6\xAD\xA5",		"\xDC\xC7" => "\xE6\xB4\x91",		"\xDC\xC8" => "\xE6\xB9\xBA",		"\xDC\xC9" => "\xE6\xBD\xBD",		"\xDC\xCA" => "\xE7\x8F\xA4",		"\xDC\xCB" => "\xE7\x94\xAB",		"\xDC\xCC" => "\xE8\x8F\xA9",		"\xDC\xCD" => "\xE8\xA3\x9C",		"\xDC\xCE" => "\xE8\xA4\x93",		"\xDC\xCF" => "\xE8\xAD\x9C",		"\xDC\xD0" => "\xE8\xBC\x94",		"\xDC\xD1" => "\xE4\xBC\x8F",		"\xDC\xD2" => "\xE5\x83\x95",		"\xDC\xD3" => "\xE5\x8C\x90",		"\xDC\xD4" => "\xE5\x8D\x9C",		"\xDC\xD5" => "\xE5\xAE\x93",		"\xDC\xD6" => "\xE5\xBE\xA9",		"\xDC\xD7" => "\xE6\x9C\x8D",		"\xDC\xD8" => "\xE7\xA6\x8F",		"\xDC\xD9" => "\xE8\x85\xB9",		"\xDC\xDA" => "\xE8\x8C\xAF",		"\xDC\xDB" => "\xE8\x94\x94",		"\xDC\xDC" => "\xE8\xA4\x87",		"\xDC\xDD" => "\xE8\xA6\x86",		"\xDC\xDE" => "\xE8\xBC\xB9",		"\xDC\xDF" => "\xE8\xBC\xBB",		"\xDC\xE0" => "\xE9\xA6\xA5",		"\xDC\xE1" => "\xE9\xB0\x92",		"\xDC\xE2" => "\xE6\x9C\xAC",		"\xDC\xE3" => "\xE4\xB9\xB6",		"\xDC\xE4" => "\xE4\xBF\xB8",		"\xDC\xE5" => "\xE5\xA5\x89",		"\xDC\xE6" => "\xE5\xB0\x81",		"\xDC\xE7" => "\xE5\xB3\xAF",		"\xDC\xE8" => "\xE5\xB3\xB0",		"\xDC\xE9" => "\xE6\x8D\xA7",		"\xDC\xEA" => "\xE6\xA3\x92",		"\xDC\xEB" => "\xE7\x83\xBD",		"\xDC\xEC" => "\xE7\x86\xA2",		"\xDC\xED" => "\xE7\x90\xAB",		"\xDC\xEE" => "\xE7\xB8\xAB",		"\xDC\xEF" => "\xE8\x93\xAC",		"\xDC\xF0" => "\xE8\x9C\x82",		"\xDC\xF1" => "\xE9\x80\xA2",		"\xDC\xF2" => "\xE9\x8B\x92",		"\xDC\xF3" => "\xE9\xB3\xB3",		"\xDC\xF4" => "\xE4\xB8\x8D",		"\xDC\xF5" => "\xE4\xBB\x98",		"\xDC\xF6" => "\xE4\xBF\xAF",		"\xDC\xF7" => "\xE5\x82\x85",		"\xDC\xF8" => "\xE5\x89\x96",		"\xDC\xF9" => "\xE5\x89\xAF",		"\xDC\xFA" => "\xE5\x90\xA6",		"\xDC\xFB" => "\xE5\x92\x90",		"\xDC\xFC" => "\xE5\x9F\xA0",		"\xDC\xFD" => "\xE5\xA4\xAB",		"\xDC\xFE" => "\xE5\xA9\xA6",		"\xDD\xA1" => "\xE5\xAD\x9A",		"\xDD\xA2" => "\xE5\xAD\xB5",		"\xDD\xA3" => "\xE5\xAF\x8C",		"\xDD\xA4" => "\xE5\xBA\x9C",		"\xDD\xA5" => "\xEF\xA5\xA6",		"\xDD\xA6" => "\xE6\x89\xB6",		"\xDD\xA7" => "\xE6\x95\xB7",		"\xDD\xA8" => "\xE6\x96\xA7",		"\xDD\xA9" => "\xE6\xB5\xAE",		"\xDD\xAA" => "\xE6\xBA\xA5",		"\xDD\xAB" => "\xE7\x88\xB6",		"\xDD\xAC" => "\xE7\xAC\xA6",		"\xDD\xAD" => "\xE7\xB0\xBF",		"\xDD\xAE" => "\xE7\xBC\xB6",		"\xDD\xAF" => "\xE8\x85\x90",		"\xDD\xB0" => "\xE8\x85\x91",		"\xDD\xB1" => "\xE8\x86\x9A",		"\xDD\xB2" => "\xE8\x89\x80",		"\xDD\xB3" => "\xE8\x8A\x99",		"\xDD\xB4" => "\xE8\x8E\xA9",		"\xDD\xB5" => "\xE8\xA8\x83",		"\xDD\xB6" => "\xE8\xB2\xA0",		"\xDD\xB7" => "\xE8\xB3\xA6",		"\xDD\xB8" => "\xE8\xB3\xBB",		"\xDD\xB9" => "\xE8\xB5\xB4",		"\xDD\xBA" => "\xE8\xB6\xBA",		"\xDD\xBB" => "\xE9\x83\xA8",		"\xDD\xBC" => "\xE9\x87\x9C",		"\xDD\xBD" => "\xE9\x98\x9C",		"\xDD\xBE" => "\xE9\x99\x84",		"\xDD\xBF" => "\xE9\xA7\x99",		"\xDD\xC0" => "\xE9\xB3\xA7",		"\xDD\xC1" => "\xE5\x8C\x97",		"\xDD\xC2" => "\xE5\x88\x86",		"\xDD\xC3" => "\xE5\x90\xA9",		"\xDD\xC4" => "\xE5\x99\xB4",		"\xDD\xC5" => "\xE5\xA2\xB3",		"\xDD\xC6" => "\xE5\xA5\x94",		"\xDD\xC7" => "\xE5\xA5\xAE",		"\xDD\xC8" => "\xE5\xBF\xBF",		"\xDD\xC9" => "\xE6\x86\xA4",		"\xDD\xCA" => "\xE6\x89\xAE",		"\xDD\xCB" => "\xE6\x98\x90",		"\xDD\xCC" => "\xE6\xB1\xBE",		"\xDD\xCD" => "\xE7\x84\x9A",		"\xDD\xCE" => "\xE7\x9B\x86",		"\xDD\xCF" => "\xE7\xB2\x89",		"\xDD\xD0" => "\xE7\xB3\x9E",		"\xDD\xD1" => "\xE7\xB4\x9B",		"\xDD\xD2" => "\xE8\x8A\xAC",		"\xDD\xD3" => "\xE8\xB3\x81",		"\xDD\xD4" => "\xE9\x9B\xB0",		"\xDD\xD5" => "\xEF\xA5\xA7",		"\xDD\xD6" => "\xE4\xBD\x9B",		"\xDD\xD7" => "\xE5\xBC\x97",		"\xDD\xD8" => "\xE5\xBD\xBF",		"\xDD\xD9" => "\xE6\x8B\x82",		"\xDD\xDA" => "\xE5\xB4\xA9",		"\xDD\xDB" => "\xE6\x9C\x8B",		"\xDD\xDC" => "\xE6\xA3\x9A",		"\xDD\xDD" => "\xE7\xA1\xBC",		"\xDD\xDE" => "\xE7\xB9\x83",		"\xDD\xDF" => "\xE9\xB5\xAC",		"\xDD\xE0" => "\xE4\xB8\x95",		"\xDD\xE1" => "\xE5\x82\x99",		"\xDD\xE2" => "\xE5\x8C\x95",		"\xDD\xE3" => "\xE5\x8C\xAA",		"\xDD\xE4" => "\xE5\x8D\x91",		"\xDD\xE5" => "\xE5\xA6\x83",		"\xDD\xE6" => "\xE5\xA9\xA2",		"\xDD\xE7" => "\xE5\xBA\x87",		"\xDD\xE8" => "\xE6\x82\xB2",		"\xDD\xE9" => "\xE6\x86\x8A",		"\xDD\xEA" => "\xE6\x89\x89",		"\xDD\xEB" => "\xE6\x89\xB9",		"\xDD\xEC" => "\xE6\x96\x90",		"\xDD\xED" => "\xE6\x9E\x87",		"\xDD\xEE" => "\xE6\xA6\xA7",		"\xDD\xEF" => "\xE6\xAF\x94",		"\xDD\xF0" => "\xE6\xAF\x96",		"\xDD\xF1" => "\xE6\xAF\x97",		"\xDD\xF2" => "\xE6\xAF\x98",		"\xDD\xF3" => "\xE6\xB2\xB8",		"\xDD\xF4" => "\xEF\xA5\xA8",		"\xDD\xF5" => "\xE7\x90\xB5",		"\xDD\xF6" => "\xE7\x97\xBA",		"\xDD\xF7" => "\xE7\xA0\x92",		"\xDD\xF8" => "\xE7\xA2\x91",		"\xDD\xF9" => "\xE7\xA7\x95",		"\xDD\xFA" => "\xE7\xA7\x98",		"\xDD\xFB" => "\xE7\xB2\x83",		"\xDD\xFC" => "\xE7\xB7\x8B",		"\xDD\xFD" => "\xE7\xBF\xA1",		"\xDD\xFE" => "\xE8\x82\xA5",		"\xDE\xA1" => "\xE8\x84\xBE",		"\xDE\xA2" => "\xE8\x87\x82",		"\xDE\xA3" => "\xE8\x8F\xB2",		"\xDE\xA4" => "\xE8\x9C\x9A",		"\xDE\xA5" => "\xE8\xA3\xA8",		"\xDE\xA6" => "\xE8\xAA\xB9",		"\xDE\xA7" => "\xE8\xAD\xAC",		"\xDE\xA8" => "\xE8\xB2\xBB",		"\xDE\xA9" => "\xE9\x84\x99",		"\xDE\xAA" => "\xE9\x9D\x9E",		"\xDE\xAB" => "\xE9\xA3\x9B",		"\xDE\xAC" => "\xE9\xBC\xBB",		"\xDE\xAD" => "\xE5\x9A\xAC",		"\xDE\xAE" => "\xE5\xAC\xAA",		"\xDE\xAF" => "\xE5\xBD\xAC",		"\xDE\xB0" => "\xE6\x96\x8C",		"\xDE\xB1" => "\xE6\xAA\xB3",		"\xDE\xB2" => "\xE6\xAE\xAF",		"\xDE\xB3" => "\xE6\xB5\x9C",		"\xDE\xB4" => "\xE6\xBF\xB1",		"\xDE\xB5" => "\xE7\x80\x95",		"\xDE\xB6" => "\xE7\x89\x9D",		"\xDE\xB7" => "\xE7\x8E\xAD",		"\xDE\xB8" => "\xE8\xB2\xA7",		"\xDE\xB9" => "\xE8\xB3\x93",		"\xDE\xBA" => "\xE9\xA0\xBB",		"\xDE\xBB" => "\xE6\x86\x91",		"\xDE\xBC" => "\xE6\xB0\xB7",		"\xDE\xBD" => "\xE8\x81\x98",		"\xDE\xBE" => "\xE9\xA8\x81",		"\xDE\xBF" => "\xE4\xB9\x8D",		"\xDE\xC0" => "\xE4\xBA\x8B",		"\xDE\xC1" => "\xE4\xBA\x9B",		"\xDE\xC2" => "\xE4\xBB\x95",		"\xDE\xC3" => "\xE4\xBC\xBA",		"\xDE\xC4" => "\xE4\xBC\xBC",		"\xDE\xC5" => "\xE4\xBD\xBF",		"\xDE\xC6" => "\xE4\xBF\x9F",		"\xDE\xC7" => "\xE5\x83\xBF",		"\xDE\xC8" => "\xE5\x8F\xB2",		"\xDE\xC9" => "\xE5\x8F\xB8",		"\xDE\xCA" => "\xE5\x94\x86",		"\xDE\xCB" => "\xE5\x97\xA3",		"\xDE\xCC" => "\xE5\x9B\x9B",		"\xDE\xCD" => "\xE5\xA3\xAB",		"\xDE\xCE" => "\xE5\xA5\xA2",		"\xDE\xCF" => "\xE5\xA8\x91",		"\xDE\xD0" => "\xE5\xAF\xAB",		"\xDE\xD1" => "\xE5\xAF\xBA",		"\xDE\xD2" => "\xE5\xB0\x84",		"\xDE\xD3" => "\xE5\xB7\xB3",		"\xDE\xD4" => "\xE5\xB8\xAB",		"\xDE\xD5" => "\xE5\xBE\x99",		"\xDE\xD6" => "\xE6\x80\x9D",		"\xDE\xD7" => "\xE6\x8D\xA8",		"\xDE\xD8" => "\xE6\x96\x9C",		"\xDE\xD9" => "\xE6\x96\xAF",		"\xDE\xDA" => "\xE6\x9F\xB6",		"\xDE\xDB" => "\xE6\x9F\xBB",		"\xDE\xDC" => "\xE6\xA2\xAD",		"\xDE\xDD" => "\xE6\xAD\xBB",		"\xDE\xDE" => "\xE6\xB2\x99",		"\xDE\xDF" => "\xE6\xB3\x97",		"\xDE\xE0" => "\xE6\xB8\xA3",		"\xDE\xE1" => "\xE7\x80\x89",		"\xDE\xE2" => "\xE7\x8D\x85",		"\xDE\xE3" => "\xE7\xA0\x82",		"\xDE\xE4" => "\xE7\xA4\xBE",		"\xDE\xE5" => "\xE7\xA5\x80",		"\xDE\xE6" => "\xE7\xA5\xA0",		"\xDE\xE7" => "\xE7\xA7\x81",		"\xDE\xE8" => "\xE7\xAF\xA9",		"\xDE\xE9" => "\xE7\xB4\x97",		"\xDE\xEA" => "\xE7\xB5\xB2",		"\xDE\xEB" => "\xE8\x82\x86",		"\xDE\xEC" => "\xE8\x88\x8D",		"\xDE\xED" => "\xE8\x8E\x8E",		"\xDE\xEE" => "\xE8\x93\x91",		"\xDE\xEF" => "\xE8\x9B\x87",		"\xDE\xF0" => "\xE8\xA3\x9F",		"\xDE\xF1" => "\xE8\xA9\x90",		"\xDE\xF2" => "\xE8\xA9\x9E",		"\xDE\xF3" => "\xE8\xAC\x9D",		"\xDE\xF4" => "\xE8\xB3\x9C",		"\xDE\xF5" => "\xE8\xB5\xA6",		"\xDE\xF6" => "\xE8\xBE\xAD",		"\xDE\xF7" => "\xE9\x82\xAA",		"\xDE\xF8" => "\xE9\xA3\xBC",		"\xDE\xF9" => "\xE9\xA7\x9F",		"\xDE\xFA" => "\xE9\xBA\x9D",		"\xDE\xFB" => "\xE5\x89\x8A",		"\xDE\xFC" => "\xEF\xA5\xA9",		"\xDE\xFD" => "\xE6\x9C\x94",		"\xDE\xFE" => "\xEF\xA5\xAA",		"\xDF\xA1" => "\xE5\x82\x98",		"\xDF\xA2" => "\xE5\x88\xAA",		"\xDF\xA3" => "\xE5\xB1\xB1",		"\xDF\xA4" => "\xE6\x95\xA3",		"\xDF\xA5" => "\xE6\xB1\x95",		"\xDF\xA6" => "\xE7\x8F\x8A",		"\xDF\xA7" => "\xE7\x94\xA3",		"\xDF\xA8" => "\xE7\x96\x9D",		"\xDF\xA9" => "\xE7\xAE\x97",		"\xDF\xAA" => "\xE8\x92\x9C",		"\xDF\xAB" => "\xE9\x85\xB8",		"\xDF\xAC" => "\xE9\x9C\xB0",		"\xDF\xAD" => "\xE4\xB9\xB7",		"\xDF\xAE" => "\xE6\x92\x92",		"\xDF\xAF" => "\xE6\xAE\xBA",		"\xDF\xB0" => "\xE7\x85\x9E",		"\xDF\xB1" => "\xE8\x96\xA9",		"\xDF\xB2" => "\xE4\xB8\x89",		"\xDF\xB3" => "\xEF\xA5\xAB",		"\xDF\xB4" => "\xE6\x9D\x89",		"\xDF\xB5" => "\xE6\xA3\xAE",		"\xDF\xB6" => "\xE6\xB8\x97",		"\xDF\xB7" => "\xE8\x8A\x9F",		"\xDF\xB8" => "\xE8\x94\x98",		"\xDF\xB9" => "\xE8\xA1\xAB",		"\xDF\xBA" => "\xE6\x8F\xB7",		"\xDF\xBB" => "\xE6\xBE\x81",		"\xDF\xBC" => "\xE9\x88\x92",		"\xDF\xBD" => "\xE9\xA2\xAF",		"\xDF\xBE" => "\xE4\xB8\x8A",		"\xDF\xBF" => "\xE5\x82\xB7",		"\xDF\xC0" => "\xE5\x83\x8F",		"\xDF\xC1" => "\xE5\x84\x9F",		"\xDF\xC2" => "\xE5\x95\x86",		"\xDF\xC3" => "\xE5\x96\xAA",		"\xDF\xC4" => "\xE5\x98\x97",		"\xDF\xC5" => "\xE5\xAD\x80",		"\xDF\xC6" => "\xE5\xB0\x99",		"\xDF\xC7" => "\xE5\xB3\xA0",		"\xDF\xC8" => "\xE5\xB8\xB8",		"\xDF\xC9" => "\xE5\xBA\x8A",		"\xDF\xCA" => "\xE5\xBA\xA0",		"\xDF\xCB" => "\xE5\xBB\x82",		"\xDF\xCC" => "\xE6\x83\xB3",		"\xDF\xCD" => "\xE6\xA1\x91",		"\xDF\xCE" => "\xE6\xA9\xA1",		"\xDF\xCF" => "\xE6\xB9\x98",		"\xDF\xD0" => "\xE7\x88\xBD",		"\xDF\xD1" => "\xE7\x89\x80",		"\xDF\xD2" => "\xE7\x8B\x80",		"\xDF\xD3" => "\xE7\x9B\xB8",		"\xDF\xD4" => "\xE7\xA5\xA5",		"\xDF\xD5" => "\xE7\xAE\xB1",		"\xDF\xD6" => "\xE7\xBF\x94",		"\xDF\xD7" => "\xE8\xA3\xB3",		"\xDF\xD8" => "\xE8\xA7\xB4",		"\xDF\xD9" => "\xE8\xA9\xB3",		"\xDF\xDA" => "\xE8\xB1\xA1",		"\xDF\xDB" => "\xE8\xB3\x9E",		"\xDF\xDC" => "\xE9\x9C\x9C",		"\xDF\xDD" => "\xE5\xA1\x9E",		"\xDF\xDE" => "\xE7\x92\xBD",		"\xDF\xDF" => "\xE8\xB3\xBD",		"\xDF\xE0" => "\xE5\x97\x87",		"\xDF\xE1" => "\xEF\xA5\xAC",		"\xDF\xE2" => "\xE7\xA9\xA1",		"\xDF\xE3" => "\xE7\xB4\xA2",		"\xDF\xE4" => "\xE8\x89\xB2",		"\xDF\xE5" => "\xE7\x89\xB2",		"\xDF\xE6" => "\xE7\x94\x9F",		"\xDF\xE7" => "\xE7\x94\xA5",		"\xDF\xE8" => "\xEF\xA5\xAD",		"\xDF\xE9" => "\xE7\xAC\x99",		"\xDF\xEA" => "\xE5\xA2\x85",		"\xDF\xEB" => "\xE5\xA3\xBB",		"\xDF\xEC" => "\xE5\xB6\xBC",		"\xDF\xED" => "\xE5\xBA\x8F",		"\xDF\xEE" => "\xE5\xBA\xB6",		"\xDF\xEF" => "\xE5\xBE\x90",		"\xDF\xF0" => "\xE6\x81\x95",		"\xDF\xF1" => "\xE6\x8A\x92",		"\xDF\xF2" => "\xE6\x8D\xBF",		"\xDF\xF3" => "\xE6\x95\x8D",		"\xDF\xF4" => "\xE6\x9A\x91",		"\xDF\xF5" => "\xE6\x9B\x99",		"\xDF\xF6" => "\xE6\x9B\xB8",		"\xDF\xF7" => "\xE6\xA0\x96",		"\xDF\xF8" => "\xE6\xA3\xB2",		"\xDF\xF9" => "\xE7\x8A\x80",		"\xDF\xFA" => "\xE7\x91\x9E",		"\xDF\xFB" => "\xE7\xAD\xAE",		"\xDF\xFC" => "\xE7\xB5\xAE",		"\xDF\xFD" => "\xE7\xB7\x96",		"\xDF\xFE" => "\xE7\xBD\xB2",		"\xE0\xA1" => "\xE8\x83\xA5",		"\xE0\xA2" => "\xE8\x88\x92",		"\xE0\xA3" => "\xE8\x96\xAF",		"\xE0\xA4" => "\xE8\xA5\xBF",		"\xE0\xA5" => "\xE8\xAA\x93",		"\xE0\xA6" => "\xE9\x80\x9D",		"\xE0\xA7" => "\xE9\x8B\xA4",		"\xE0\xA8" => "\xE9\xBB\x8D",		"\xE0\xA9" => "\xE9\xBC\xA0",		"\xE0\xAA" => "\xE5\xA4\x95",		"\xE0\xAB" => "\xE5\xA5\xAD",		"\xE0\xAC" => "\xE5\xB8\xAD",		"\xE0\xAD" => "\xE6\x83\x9C",		"\xE0\xAE" => "\xE6\x98\x94",		"\xE0\xAF" => "\xE6\x99\xB3",		"\xE0\xB0" => "\xE6\x9E\x90",		"\xE0\xB1" => "\xE6\xB1\x90",		"\xE0\xB2" => "\xE6\xB7\x85",		"\xE0\xB3" => "\xE6\xBD\x9F",		"\xE0\xB4" => "\xE7\x9F\xB3",		"\xE0\xB5" => "\xE7\xA2\xA9",		"\xE0\xB6" => "\xE8\x93\x86",		"\xE0\xB7" => "\xE9\x87\x8B",		"\xE0\xB8" => "\xE9\x8C\xAB",		"\xE0\xB9" => "\xE4\xBB\x99",		"\xE0\xBA" => "\xE5\x83\x8A",		"\xE0\xBB" => "\xE5\x85\x88",		"\xE0\xBC" => "\xE5\x96\x84",		"\xE0\xBD" => "\xE5\xAC\x8B",		"\xE0\xBE" => "\xE5\xAE\xA3",		"\xE0\xBF" => "\xE6\x89\x87",		"\xE0\xC0" => "\xE6\x95\xBE",		"\xE0\xC1" => "\xE6\x97\x8B",		"\xE0\xC2" => "\xE6\xB8\xB2",		"\xE0\xC3" => "\xE7\x85\xBD",		"\xE0\xC4" => "\xE7\x90\x81",		"\xE0\xC5" => "\xE7\x91\x84",		"\xE0\xC6" => "\xE7\x92\x87",		"\xE0\xC7" => "\xE7\x92\xBF",		"\xE0\xC8" => "\xE7\x99\xAC",		"\xE0\xC9" => "\xE7\xA6\xAA",		"\xE0\xCA" => "\xE7\xB7\x9A",		"\xE0\xCB" => "\xE7\xB9\x95",		"\xE0\xCC" => "\xE7\xBE\xA8",		"\xE0\xCD" => "\xE8\x85\xBA",		"\xE0\xCE" => "\xE8\x86\xB3",		"\xE0\xCF" => "\xE8\x88\xB9",		"\xE0\xD0" => "\xE8\x98\x9A",		"\xE0\xD1" => "\xE8\x9F\xAC",		"\xE0\xD2" => "\xE8\xA9\xB5",		"\xE0\xD3" => "\xE8\xB7\xA3",		"\xE0\xD4" => "\xE9\x81\xB8",		"\xE0\xD5" => "\xE9\x8A\x91",		"\xE0\xD6" => "\xE9\x90\xA5",		"\xE0\xD7" => "\xE9\xA5\x8D",		"\xE0\xD8" => "\xE9\xAE\xAE",		"\xE0\xD9" => "\xE5\x8D\xA8",		"\xE0\xDA" => "\xE5\xB1\x91",		"\xE0\xDB" => "\xE6\xA5\x94",		"\xE0\xDC" => "\xE6\xB3\x84",		"\xE0\xDD" => "\xE6\xB4\xA9",		"\xE0\xDE" => "\xE6\xB8\xAB",		"\xE0\xDF" => "\xE8\x88\x8C",		"\xE0\xE0" => "\xE8\x96\x9B",		"\xE0\xE1" => "\xE8\xA4\xBB",		"\xE0\xE2" => "\xE8\xA8\xAD",		"\xE0\xE3" => "\xE8\xAA\xAA",		"\xE0\xE4" => "\xE9\x9B\xAA",		"\xE0\xE5" => "\xE9\xBD\xA7",		"\xE0\xE6" => "\xE5\x89\xA1",		"\xE0\xE7" => "\xE6\x9A\xB9",		"\xE0\xE8" => "\xE6\xAE\xB2",		"\xE0\xE9" => "\xE7\xBA\x96",		"\xE0\xEA" => "\xE8\x9F\xBE",		"\xE0\xEB" => "\xE8\xB4\x8D",		"\xE0\xEC" => "\xE9\x96\x83",		"\xE0\xED" => "\xE9\x99\x9D",		"\xE0\xEE" => "\xE6\x94\x9D",		"\xE0\xEF" => "\xE6\xB6\x89",		"\xE0\xF0" => "\xE7\x87\xAE",		"\xE0\xF1" => "\xEF\xA5\xAE",		"\xE0\xF2" => "\xE5\x9F\x8E",		"\xE0\xF3" => "\xE5\xA7\x93",		"\xE0\xF4" => "\xE5\xAE\xAC",		"\xE0\xF5" => "\xE6\x80\xA7",		"\xE0\xF6" => "\xE6\x83\xBA",		"\xE0\xF7" => "\xE6\x88\x90",		"\xE0\xF8" => "\xE6\x98\x9F",		"\xE0\xF9" => "\xE6\x99\x9F",		"\xE0\xFA" => "\xE7\x8C\xA9",		"\xE0\xFB" => "\xE7\x8F\xB9",		"\xE0\xFC" => "\xE7\x9B\x9B",		"\xE0\xFD" => "\xE7\x9C\x81",		"\xE0\xFE" => "\xE7\xAD\xAC",		"\xE1\xA1" => "\xE8\x81\x96",		"\xE1\xA2" => "\xE8\x81\xB2",		"\xE1\xA3" => "\xE8\x85\xA5",		"\xE1\xA4" => "\xE8\xAA\xA0",		"\xE1\xA5" => "\xE9\x86\x92",		"\xE1\xA6" => "\xE4\xB8\x96",		"\xE1\xA7" => "\xE5\x8B\xA2",		"\xE1\xA8" => "\xE6\xAD\xB2",		"\xE1\xA9" => "\xE6\xB4\x97",		"\xE1\xAA" => "\xE7\xA8\x85",		"\xE1\xAB" => "\xE7\xAC\xB9",		"\xE1\xAC" => "\xE7\xB4\xB0",		"\xE1\xAD" => "\xEF\xA5\xAF",		"\xE1\xAE" => "\xE8\xB2\xB0",		"\xE1\xAF" => "\xE5\x8F\xAC",		"\xE1\xB0" => "\xE5\x98\xAF",		"\xE1\xB1" => "\xE5\xA1\x91",		"\xE1\xB2" => "\xE5\xAE\xB5",		"\xE1\xB3" => "\xE5\xB0\x8F",		"\xE1\xB4" => "\xE5\xB0\x91",		"\xE1\xB5" => "\xE5\xB7\xA2",		"\xE1\xB6" => "\xE6\x89\x80",		"\xE1\xB7" => "\xE6\x8E\x83",		"\xE1\xB8" => "\xE6\x90\x94",		"\xE1\xB9" => "\xE6\x98\xAD",		"\xE1\xBA" => "\xE6\xA2\xB3",		"\xE1\xBB" => "\xE6\xB2\xBC",		"\xE1\xBC" => "\xE6\xB6\x88",		"\xE1\xBD" => "\xE6\xBA\xAF",		"\xE1\xBE" => "\xE7\x80\x9F",		"\xE1\xBF" => "\xE7\x82\xA4",		"\xE1\xC0" => "\xE7\x87\x92",		"\xE1\xC1" => "\xE7\x94\xA6",		"\xE1\xC2" => "\xE7\x96\x8F",		"\xE1\xC3" => "\xE7\x96\x8E",		"\xE1\xC4" => "\xE7\x98\x99",		"\xE1\xC5" => "\xE7\xAC\x91",		"\xE1\xC6" => "\xE7\xAF\xA0",		"\xE1\xC7" => "\xE7\xB0\xAB",		"\xE1\xC8" => "\xE7\xB4\xA0",		"\xE1\xC9" => "\xE7\xB4\xB9",		"\xE1\xCA" => "\xE8\x94\xAC",		"\xE1\xCB" => "\xE8\x95\xAD",		"\xE1\xCC" => "\xE8\x98\x87",		"\xE1\xCD" => "\xE8\xA8\xB4",		"\xE1\xCE" => "\xE9\x80\x8D",		"\xE1\xCF" => "\xE9\x81\xA1",		"\xE1\xD0" => "\xE9\x82\xB5",		"\xE1\xD1" => "\xE9\x8A\xB7",		"\xE1\xD2" => "\xE9\x9F\xB6",		"\xE1\xD3" => "\xE9\xA8\xB7",		"\xE1\xD4" => "\xE4\xBF\x97",		"\xE1\xD5" => "\xE5\xB1\xAC",		"\xE1\xD6" => "\xE6\x9D\x9F",		"\xE1\xD7" => "\xE6\xB6\x91",		"\xE1\xD8" => "\xE7\xB2\x9F",		"\xE1\xD9" => "\xE7\xBA\x8C",		"\xE1\xDA" => "\xE8\xAC\x96",		"\xE1\xDB" => "\xE8\xB4\x96",		"\xE1\xDC" => "\xE9\x80\x9F",		"\xE1\xDD" => "\xE5\xAD\xAB",		"\xE1\xDE" => "\xE5\xB7\xBD",		"\xE1\xDF" => "\xE6\x90\x8D",		"\xE1\xE0" => "\xE8\x93\x80",		"\xE1\xE1" => "\xE9\x81\x9C",		"\xE1\xE2" => "\xE9\xA3\xA1",		"\xE1\xE3" => "\xE7\x8E\x87",		"\xE1\xE4" => "\xE5\xAE\x8B",		"\xE1\xE5" => "\xE6\x82\x9A",		"\xE1\xE6" => "\xE6\x9D\xBE",		"\xE1\xE7" => "\xE6\xB7\x9E",		"\xE1\xE8" => "\xE8\xA8\x9F",		"\xE1\xE9" => "\xE8\xAA\xA6",		"\xE1\xEA" => "\xE9\x80\x81",		"\xE1\xEB" => "\xE9\xA0\x8C",		"\xE1\xEC" => "\xE5\x88\xB7",		"\xE1\xED" => "\xEF\xA5\xB0",		"\xE1\xEE" => "\xE7\x81\x91",		"\xE1\xEF" => "\xE7\xA2\x8E",		"\xE1\xF0" => "\xE9\x8E\x96",		"\xE1\xF1" => "\xE8\xA1\xB0",		"\xE1\xF2" => "\xE9\x87\x97",		"\xE1\xF3" => "\xE4\xBF\xAE",		"\xE1\xF4" => "\xE5\x8F\x97",		"\xE1\xF5" => "\xE5\x97\xBD",		"\xE1\xF6" => "\xE5\x9B\x9A",		"\xE1\xF7" => "\xE5\x9E\x82",		"\xE1\xF8" => "\xE5\xA3\xBD",		"\xE1\xF9" => "\xE5\xAB\x82",		"\xE1\xFA" => "\xE5\xAE\x88",		"\xE1\xFB" => "\xE5\xB2\xAB",		"\xE1\xFC" => "\xE5\xB3\x80",		"\xE1\xFD" => "\xE5\xB8\xA5",		"\xE1\xFE" => "\xE6\x84\x81",		"\xE2\xA1" => "\xE6\x88\x8D",		"\xE2\xA2" => "\xE6\x89\x8B",		"\xE2\xA3" => "\xE6\x8E\x88",		"\xE2\xA4" => "\xE6\x90\x9C",		"\xE2\xA5" => "\xE6\x94\xB6",		"\xE2\xA6" => "\xE6\x95\xB8",		"\xE2\xA7" => "\xE6\xA8\xB9",		"\xE2\xA8" => "\xE6\xAE\x8A",		"\xE2\xA9" => "\xE6\xB0\xB4",		"\xE2\xAA" => "\xE6\xB4\x99",		"\xE2\xAB" => "\xE6\xBC\xB1",		"\xE2\xAC" => "\xE7\x87\xA7",		"\xE2\xAD" => "\xE7\x8B\xA9",		"\xE2\xAE" => "\xE7\x8D\xB8",		"\xE2\xAF" => "\xE7\x90\x87",		"\xE2\xB0" => "\xE7\x92\xB2",		"\xE2\xB1" => "\xE7\x98\xA6",		"\xE2\xB2" => "\xE7\x9D\xA1",		"\xE2\xB3" => "\xE7\xA7\x80",		"\xE2\xB4" => "\xE7\xA9\x97",		"\xE2\xB5" => "\xE7\xAB\xAA",		"\xE2\xB6" => "\xE7\xB2\xB9",		"\xE2\xB7" => "\xE7\xB6\x8F",		"\xE2\xB8" => "\xE7\xB6\xAC",		"\xE2\xB9" => "\xE7\xB9\xA1",		"\xE2\xBA" => "\xE7\xBE\x9E",		"\xE2\xBB" => "\xE8\x84\xA9",		"\xE2\xBC" => "\xE8\x8C\xB1",		"\xE2\xBD" => "\xE8\x92\x90",		"\xE2\xBE" => "\xE8\x93\x9A",		"\xE2\xBF" => "\xE8\x97\xAA",		"\xE2\xC0" => "\xE8\xA2\x96",		"\xE2\xC1" => "\xE8\xAA\xB0",		"\xE2\xC2" => "\xE8\xAE\x90",		"\xE2\xC3" => "\xE8\xBC\xB8",		"\xE2\xC4" => "\xE9\x81\x82",		"\xE2\xC5" => "\xE9\x82\x83",		"\xE2\xC6" => "\xE9\x85\xAC",		"\xE2\xC7" => "\xE9\x8A\x96",		"\xE2\xC8" => "\xE9\x8A\xB9",		"\xE2\xC9" => "\xE9\x9A\x8B",		"\xE2\xCA" => "\xE9\x9A\xA7",		"\xE2\xCB" => "\xE9\x9A\xA8",		"\xE2\xCC" => "\xE9\x9B\x96",		"\xE2\xCD" => "\xE9\x9C\x80",		"\xE2\xCE" => "\xE9\xA0\x88",		"\xE2\xCF" => "\xE9\xA6\x96",		"\xE2\xD0" => "\xE9\xAB\x93",		"\xE2\xD1" => "\xE9\xAC\x9A",		"\xE2\xD2" => "\xE5\x8F\x94",		"\xE2\xD3" => "\xE5\xA1\xBE",		"\xE2\xD4" => "\xE5\xA4\x99",		"\xE2\xD5" => "\xE5\xAD\xB0",		"\xE2\xD6" => "\xE5\xAE\xBF",		"\xE2\xD7" => "\xE6\xB7\x91",		"\xE2\xD8" => "\xE6\xBD\x9A",		"\xE2\xD9" => "\xE7\x86\x9F",		"\xE2\xDA" => "\xE7\x90\xA1",		"\xE2\xDB" => "\xE7\x92\xB9",		"\xE2\xDC" => "\xE8\x82\x85",		"\xE2\xDD" => "\xE8\x8F\xBD",		"\xE2\xDE" => "\xE5\xB7\xA1",		"\xE2\xDF" => "\xE5\xBE\x87",		"\xE2\xE0" => "\xE5\xBE\xAA",		"\xE2\xE1" => "\xE6\x81\x82",		"\xE2\xE2" => "\xE6\x97\xAC",		"\xE2\xE3" => "\xE6\xA0\x92",		"\xE2\xE4" => "\xE6\xA5\xAF",		"\xE2\xE5" => "\xE6\xA9\x93",		"\xE2\xE6" => "\xE6\xAE\x89",		"\xE2\xE7" => "\xE6\xB4\xB5",		"\xE2\xE8" => "\xE6\xB7\xB3",		"\xE2\xE9" => "\xE7\x8F\xA3",		"\xE2\xEA" => "\xE7\x9B\xBE",		"\xE2\xEB" => "\xE7\x9E\xAC",		"\xE2\xEC" => "\xE7\xAD\x8D",		"\xE2\xED" => "\xE7\xB4\x94",		"\xE2\xEE" => "\xE8\x84\xA3",		"\xE2\xEF" => "\xE8\x88\x9C",		"\xE2\xF0" => "\xE8\x8D\x80",		"\xE2\xF1" => "\xE8\x93\xB4",		"\xE2\xF2" => "\xE8\x95\xA3",		"\xE2\xF3" => "\xE8\xA9\xA2",		"\xE2\xF4" => "\xE8\xAB\x84",		"\xE2\xF5" => "\xE9\x86\x87",		"\xE2\xF6" => "\xE9\x8C\x9E",		"\xE2\xF7" => "\xE9\xA0\x86",		"\xE2\xF8" => "\xE9\xA6\xB4",		"\xE2\xF9" => "\xE6\x88\x8C",		"\xE2\xFA" => "\xE8\xA1\x93",		"\xE2\xFB" => "\xE8\xBF\xB0",		"\xE2\xFC" => "\xE9\x89\xA5",		"\xE2\xFD" => "\xE5\xB4\x87",		"\xE2\xFE" => "\xE5\xB4\xA7",		"\xE3\xA1" => "\xE5\xB5\xA9",		"\xE3\xA2" => "\xE7\x91\x9F",		"\xE3\xA3" => "\xE8\x86\x9D",		"\xE3\xA4" => "\xE8\x9D\xA8",		"\xE3\xA5" => "\xE6\xBF\x95",		"\xE3\xA6" => "\xE6\x8B\xBE",		"\xE3\xA7" => "\xE7\xBF\x92",		"\xE3\xA8" => "\xE8\xA4\xB6",		"\xE3\xA9" => "\xE8\xA5\xB2",		"\xE3\xAA" => "\xE4\xB8\x9E",		"\xE3\xAB" => "\xE4\xB9\x98",		"\xE3\xAC" => "\xE5\x83\xA7",		"\xE3\xAD" => "\xE5\x8B\x9D",		"\xE3\xAE" => "\xE5\x8D\x87",		"\xE3\xAF" => "\xE6\x89\xBF",		"\xE3\xB0" => "\xE6\x98\x87",		"\xE3\xB1" => "\xE7\xB9\xA9",		"\xE3\xB2" => "\xE8\xA0\x85",		"\xE3\xB3" => "\xE9\x99\x9E",		"\xE3\xB4" => "\xE4\xBE\x8D",		"\xE3\xB5" => "\xE5\x8C\x99",		"\xE3\xB6" => "\xE5\x98\xB6",		"\xE3\xB7" => "\xE5\xA7\x8B",		"\xE3\xB8" => "\xE5\xAA\xA4",		"\xE3\xB9" => "\xE5\xB0\xB8",		"\xE3\xBA" => "\xE5\xB1\x8E",		"\xE3\xBB" => "\xE5\xB1\x8D",		"\xE3\xBC" => "\xE5\xB8\x82",		"\xE3\xBD" => "\xE5\xBC\x91",		"\xE3\xBE" => "\xE6\x81\x83",		"\xE3\xBF" => "\xE6\x96\xBD",		"\xE3\xC0" => "\xE6\x98\xAF",		"\xE3\xC1" => "\xE6\x99\x82",		"\xE3\xC2" => "\xE6\x9E\xBE",		"\xE3\xC3" => "\xE6\x9F\xB4",		"\xE3\xC4" => "\xE7\x8C\x9C",		"\xE3\xC5" => "\xE7\x9F\xA2",		"\xE3\xC6" => "\xE7\xA4\xBA",		"\xE3\xC7" => "\xE7\xBF\x85",		"\xE3\xC8" => "\xE8\x92\x94",		"\xE3\xC9" => "\xE8\x93\x8D",		"\xE3\xCA" => "\xE8\xA6\x96",		"\xE3\xCB" => "\xE8\xA9\xA6",		"\xE3\xCC" => "\xE8\xA9\xA9",		"\xE3\xCD" => "\xE8\xAB\xA1",		"\xE3\xCE" => "\xE8\xB1\x95",		"\xE3\xCF" => "\xE8\xB1\xBA",		"\xE3\xD0" => "\xE5\x9F\xB4",		"\xE3\xD1" => "\xE5\xAF\x94",		"\xE3\xD2" => "\xE5\xBC\x8F",		"\xE3\xD3" => "\xE6\x81\xAF",		"\xE3\xD4" => "\xE6\x8B\xAD",		"\xE3\xD5" => "\xE6\xA4\x8D",		"\xE3\xD6" => "\xE6\xAE\x96",		"\xE3\xD7" => "\xE6\xB9\x9C",		"\xE3\xD8" => "\xE7\x86\x84",		"\xE3\xD9" => "\xE7\xAF\x92",		"\xE3\xDA" => "\xE8\x9D\x95",		"\xE3\xDB" => "\xE8\xAD\x98",		"\xE3\xDC" => "\xE8\xBB\xBE",		"\xE3\xDD" => "\xE9\xA3\x9F",		"\xE3\xDE" => "\xE9\xA3\xBE",		"\xE3\xDF" => "\xE4\xBC\xB8",		"\xE3\xE0" => "\xE4\xBE\x81",		"\xE3\xE1" => "\xE4\xBF\xA1",		"\xE3\xE2" => "\xE5\x91\xBB",		"\xE3\xE3" => "\xE5\xA8\xA0",		"\xE3\xE4" => "\xE5\xAE\xB8",		"\xE3\xE5" => "\xE6\x84\xBC",		"\xE3\xE6" => "\xE6\x96\xB0",		"\xE3\xE7" => "\xE6\x99\xA8",		"\xE3\xE8" => "\xE7\x87\xBC",		"\xE3\xE9" => "\xE7\x94\xB3",		"\xE3\xEA" => "\xE7\xA5\x9E",		"\xE3\xEB" => "\xE7\xB4\xB3",		"\xE3\xEC" => "\xE8\x85\x8E",		"\xE3\xED" => "\xE8\x87\xA3",		"\xE3\xEE" => "\xE8\x8E\x98",		"\xE3\xEF" => "\xE8\x96\xAA",		"\xE3\xF0" => "\xE8\x97\x8E",		"\xE3\xF1" => "\xE8\x9C\x83",		"\xE3\xF2" => "\xE8\xA8\x8A",		"\xE3\xF3" => "\xE8\xBA\xAB",		"\xE3\xF4" => "\xE8\xBE\x9B",		"\xE3\xF5" => "\xEF\xA5\xB1",		"\xE3\xF6" => "\xE8\xBF\x85",		"\xE3\xF7" => "\xE5\xA4\xB1",		"\xE3\xF8" => "\xE5\xAE\xA4",		"\xE3\xF9" => "\xE5\xAF\xA6",		"\xE3\xFA" => "\xE6\x82\x89",		"\xE3\xFB" => "\xE5\xAF\xA9",		"\xE3\xFC" => "\xE5\xB0\x8B",		"\xE3\xFD" => "\xE5\xBF\x83",		"\xE3\xFE" => "\xE6\xB2\x81",		"\xE4\xA1" => "\xEF\xA5\xB2",		"\xE4\xA2" => "\xE6\xB7\xB1",		"\xE4\xA3" => "\xE7\x80\x8B",		"\xE4\xA4" => "\xE7\x94\x9A",		"\xE4\xA5" => "\xE8\x8A\xAF",		"\xE4\xA6" => "\xE8\xAB\xB6",		"\xE4\xA7" => "\xE4\xBB\x80",		"\xE4\xA8" => "\xE5\x8D\x81",		"\xE4\xA9" => "\xEF\xA5\xB3",		"\xE4\xAA" => "\xE9\x9B\x99",		"\xE4\xAB" => "\xE6\xB0\x8F",		"\xE4\xAC" => "\xE4\xBA\x9E",		"\xE4\xAD" => "\xE4\xBF\x84",		"\xE4\xAE" => "\xE5\x85\x92",		"\xE4\xAF" => "\xE5\x95\x9E",		"\xE4\xB0" => "\xE5\xA8\xA5",		"\xE4\xB1" => "\xE5\xB3\xA8",		"\xE4\xB2" => "\xE6\x88\x91",		"\xE4\xB3" => "\xE7\x89\x99",		"\xE4\xB4" => "\xE8\x8A\xBD",		"\xE4\xB5" => "\xE8\x8E\xAA",		"\xE4\xB6" => "\xE8\x9B\xBE",		"\xE4\xB7" => "\xE8\xA1\x99",		"\xE4\xB8" => "\xE8\xA8\x9D",		"\xE4\xB9" => "\xE9\x98\xBF",		"\xE4\xBA" => "\xE9\x9B\x85",		"\xE4\xBB" => "\xE9\xA4\x93",		"\xE4\xBC" => "\xE9\xB4\x89",		"\xE4\xBD" => "\xE9\xB5\x9D",		"\xE4\xBE" => "\xE5\xA0\x8A",		"\xE4\xBF" => "\xE5\xB2\xB3",		"\xE4\xC0" => "\xE5\xB6\xBD",		"\xE4\xC1" => "\xE5\xB9\x84",		"\xE4\xC2" => "\xE6\x83\xA1",		"\xE4\xC3" => "\xE6\x84\x95",		"\xE4\xC4" => "\xE6\x8F\xA1",		"\xE4\xC5" => "\xE6\xA8\x82",		"\xE4\xC6" => "\xE6\xB8\xA5",		"\xE4\xC7" => "\xE9\x84\x82",		"\xE4\xC8" => "\xE9\x8D\x94",		"\xE4\xC9" => "\xE9\xA1\x8E",		"\xE4\xCA" => "\xE9\xB0\x90",		"\xE4\xCB" => "\xE9\xBD\xB7",		"\xE4\xCC" => "\xE5\xAE\x89",		"\xE4\xCD" => "\xE5\xB2\xB8",		"\xE4\xCE" => "\xE6\x8C\x89",		"\xE4\xCF" => "\xE6\x99\x8F",		"\xE4\xD0" => "\xE6\xA1\x88",		"\xE4\xD1" => "\xE7\x9C\xBC",		"\xE4\xD2" => "\xE9\x9B\x81",		"\xE4\xD3" => "\xE9\x9E\x8D",		"\xE4\xD4" => "\xE9\xA1\x94",		"\xE4\xD5" => "\xE9\xAE\x9F",		"\xE4\xD6" => "\xE6\x96\xA1",		"\xE4\xD7" => "\xE8\xAC\x81",		"\xE4\xD8" => "\xE8\xBB\x8B",		"\xE4\xD9" => "\xE9\x96\xBC",		"\xE4\xDA" => "\xE5\x94\xB5",		"\xE4\xDB" => "\xE5\xB2\xA9",		"\xE4\xDC" => "\xE5\xB7\x96",		"\xE4\xDD" => "\xE5\xBA\xB5",		"\xE4\xDE" => "\xE6\x9A\x97",		"\xE4\xDF" => "\xE7\x99\x8C",		"\xE4\xE0" => "\xE8\x8F\xB4",		"\xE4\xE1" => "\xE9\x97\x87",		"\xE4\xE2" => "\xE5\xA3\x93",		"\xE4\xE3" => "\xE6\x8A\xBC",		"\xE4\xE4" => "\xE7\x8B\x8E",		"\xE4\xE5" => "\xE9\xB4\xA8",		"\xE4\xE6" => "\xE4\xBB\xB0",		"\xE4\xE7" => "\xE5\xA4\xAE",		"\xE4\xE8" => "\xE6\x80\x8F",		"\xE4\xE9" => "\xE6\x98\xBB",		"\xE4\xEA" => "\xE6\xAE\x83",		"\xE4\xEB" => "\xE7\xA7\xA7",		"\xE4\xEC" => "\xE9\xB4\xA6",		"\xE4\xED" => "\xE5\x8E\x93",		"\xE4\xEE" => "\xE5\x93\x80",		"\xE4\xEF" => "\xE5\x9F\x83",		"\xE4\xF0" => "\xE5\xB4\x96",		"\xE4\xF1" => "\xE6\x84\x9B",		"\xE4\xF2" => "\xE6\x9B\x96",		"\xE4\xF3" => "\xE6\xB6\xAF",		"\xE4\xF4" => "\xE7\xA2\x8D",		"\xE4\xF5" => "\xE8\x89\xBE",		"\xE4\xF6" => "\xE9\x9A\x98",		"\xE4\xF7" => "\xE9\x9D\x84",		"\xE4\xF8" => "\xE5\x8E\x84",		"\xE4\xF9" => "\xE6\x89\xBC",		"\xE4\xFA" => "\xE6\x8E\x96",		"\xE4\xFB" => "\xE6\xB6\xB2",		"\xE4\xFC" => "\xE7\xB8\x8A",		"\xE4\xFD" => "\xE8\x85\x8B",		"\xE4\xFE" => "\xE9\xA1\x8D",		"\xE5\xA1" => "\xE6\xAB\xBB",		"\xE5\xA2" => "\xE7\xBD\x8C",		"\xE5\xA3" => "\xE9\xB6\xAF",		"\xE5\xA4" => "\xE9\xB8\x9A",		"\xE5\xA5" => "\xE4\xB9\x9F",		"\xE5\xA6" => "\xE5\x80\xBB",		"\xE5\xA7" => "\xE5\x86\xB6",		"\xE5\xA8" => "\xE5\xA4\x9C",		"\xE5\xA9" => "\xE6\x83\xB9",		"\xE5\xAA" => "\xE6\x8F\xB6",		"\xE5\xAB" => "\xE6\xA4\xB0",		"\xE5\xAC" => "\xE7\x88\xBA",		"\xE5\xAD" => "\xE8\x80\xB6",		"\xE5\xAE" => "\xEF\xA5\xB4",		"\xE5\xAF" => "\xE9\x87\x8E",		"\xE5\xB0" => "\xE5\xBC\xB1",		"\xE5\xB1" => "\xEF\xA5\xB5",		"\xE5\xB2" => "\xEF\xA5\xB6",		"\xE5\xB3" => "\xE7\xB4\x84",		"\xE5\xB4" => "\xE8\x8B\xA5",		"\xE5\xB5" => "\xE8\x91\xAF",		"\xE5\xB6" => "\xE8\x92\xBB",		"\xE5\xB7" => "\xE8\x97\xA5",		"\xE5\xB8" => "\xE8\xBA\x8D",		"\xE5\xB9" => "\xEF\xA5\xB7",		"\xE5\xBA" => "\xE4\xBD\xAF",		"\xE5\xBB" => "\xEF\xA5\xB8",		"\xE5\xBC" => "\xEF\xA5\xB9",		"\xE5\xBD" => "\xE5\xA3\xA4",		"\xE5\xBE" => "\xE5\xAD\x83",		"\xE5\xBF" => "\xE6\x81\x99",		"\xE5\xC0" => "\xE6\x8F\x9A",		"\xE5\xC1" => "\xE6\x94\x98",		"\xE5\xC2" => "\xE6\x95\xAD",		"\xE5\xC3" => "\xE6\x9A\x98",		"\xE5\xC4" => "\xEF\xA5\xBA",		"\xE5\xC5" => "\xE6\xA5\x8A",		"\xE5\xC6" => "\xE6\xA8\xA3",		"\xE5\xC7" => "\xE6\xB4\x8B",		"\xE5\xC8" => "\xE7\x80\x81",		"\xE5\xC9" => "\xE7\x85\xAC",		"\xE5\xCA" => "\xE7\x97\x92",		"\xE5\xCB" => "\xE7\x98\x8D",		"\xE5\xCC" => "\xE7\xA6\xB3",		"\xE5\xCD" => "\xE7\xA9\xB0",		"\xE5\xCE" => "\xEF\xA5\xBB",		"\xE5\xCF" => "\xE7\xBE\x8A",		"\xE5\xD0" => "\xEF\xA5\xBC",		"\xE5\xD1" => "\xE8\xA5\x84",		"\xE5\xD2" => "\xEF\xA5\xBD",		"\xE5\xD3" => "\xE8\xAE\x93",		"\xE5\xD4" => "\xE9\x87\x80",		"\xE5\xD5" => "\xE9\x99\xBD",		"\xE5\xD6" => "\xEF\xA5\xBE",		"\xE5\xD7" => "\xE9\xA4\x8A",		"\xE5\xD8" => "\xE5\x9C\x84",		"\xE5\xD9" => "\xE5\xBE\xA1",		"\xE5\xDA" => "\xE6\x96\xBC",		"\xE5\xDB" => "\xE6\xBC\x81",		"\xE5\xDC" => "\xE7\x98\x80",		"\xE5\xDD" => "\xE7\xA6\xA6",		"\xE5\xDE" => "\xE8\xAA\x9E",		"\xE5\xDF" => "\xE9\xA6\xAD",		"\xE5\xE0" => "\xE9\xAD\x9A",		"\xE5\xE1" => "\xE9\xBD\xAC",		"\xE5\xE2" => "\xE5\x84\x84",		"\xE5\xE3" => "\xE6\x86\xB6",		"\xE5\xE4" => "\xE6\x8A\x91",		"\xE5\xE5" => "\xE6\xAA\x8D",		"\xE5\xE6" => "\xE8\x87\x86",		"\xE5\xE7" => "\xE5\x81\x83",		"\xE5\xE8" => "\xE5\xA0\xB0",		"\xE5\xE9" => "\xE5\xBD\xA6",		"\xE5\xEA" => "\xE7\x84\x89",		"\xE5\xEB" => "\xE8\xA8\x80",		"\xE5\xEC" => "\xE8\xAB\xBA",		"\xE5\xED" => "\xE5\xAD\xBC",		"\xE5\xEE" => "\xE8\x98\x96",		"\xE5\xEF" => "\xE4\xBF\xBA",		"\xE5\xF0" => "\xE5\x84\xBC",		"\xE5\xF1" => "\xE5\x9A\xB4",		"\xE5\xF2" => "\xE5\xA5\x84",		"\xE5\xF3" => "\xE6\x8E\xA9",		"\xE5\xF4" => "\xE6\xB7\xB9",		"\xE5\xF5" => "\xE5\xB6\xAA",		"\xE5\xF6" => "\xE6\xA5\xAD",		"\xE5\xF7" => "\xE5\x86\x86",		"\xE5\xF8" => "\xE4\xBA\x88",		"\xE5\xF9" => "\xE4\xBD\x99",		"\xE5\xFA" => "\xEF\xA5\xBF",		"\xE5\xFB" => "\xEF\xA6\x80",		"\xE5\xFC" => "\xEF\xA6\x81",		"\xE5\xFD" => "\xE5\xA6\x82",		"\xE5\xFE" => "\xEF\xA6\x82",		"\xE6\xA1" => "\xEF\xA6\x83",		"\xE6\xA2" => "\xE6\xAD\x9F",		"\xE6\xA3" => "\xE6\xB1\x9D",		"\xE6\xA4" => "\xEF\xA6\x84",		"\xE6\xA5" => "\xE7\x92\xB5",		"\xE6\xA6" => "\xE7\xA4\x96",		"\xE6\xA7" => "\xEF\xA6\x85",		"\xE6\xA8" => "\xE8\x88\x87",		"\xE6\xA9" => "\xE8\x89\x85",		"\xE6\xAA" => "\xE8\x8C\xB9",		"\xE6\xAB" => "\xE8\xBC\xBF",		"\xE6\xAC" => "\xE8\xBD\x9D",		"\xE6\xAD" => "\xEF\xA6\x86",		"\xE6\xAE" => "\xE9\xA4\x98",		"\xE6\xAF" => "\xEF\xA6\x87",		"\xE6\xB0" => "\xEF\xA6\x88",		"\xE6\xB1" => "\xEF\xA6\x89",		"\xE6\xB2" => "\xE4\xBA\xA6",		"\xE6\xB3" => "\xEF\xA6\x8A",		"\xE6\xB4" => "\xE5\x9F\x9F",		"\xE6\xB5" => "\xE5\xBD\xB9",		"\xE6\xB6" => "\xE6\x98\x93",		"\xE6\xB7" => "\xEF\xA6\x8B",		"\xE6\xB8" => "\xEF\xA6\x8C",		"\xE6\xB9" => "\xE7\x96\xAB",		"\xE6\xBA" => "\xE7\xB9\xB9",		"\xE6\xBB" => "\xE8\xAD\xAF",		"\xE6\xBC" => "\xEF\xA6\x8D",		"\xE6\xBD" => "\xE9\x80\x86",		"\xE6\xBE" => "\xE9\xA9\x9B",		"\xE6\xBF" => "\xE5\x9A\xA5",		"\xE6\xC0" => "\xE5\xA0\xA7",		"\xE6\xC1" => "\xE5\xA7\xB8",		"\xE6\xC2" => "\xE5\xA8\x9F",		"\xE6\xC3" => "\xE5\xAE\xB4",		"\xE6\xC4" => "\xEF\xA6\x8E",		"\xE6\xC5" => "\xE5\xBB\xB6",		"\xE6\xC6" => "\xEF\xA6\x8F",		"\xE6\xC7" => "\xEF\xA6\x90",		"\xE6\xC8" => "\xE6\x8D\x90",		"\xE6\xC9" => "\xE6\x8C\xBB",		"\xE6\xCA" => "\xEF\xA6\x91",		"\xE6\xCB" => "\xE6\xA4\xBD",		"\xE6\xCC" => "\xE6\xB2\x87",		"\xE6\xCD" => "\xE6\xB2\xBF",		"\xE6\xCE" => "\xE6\xB6\x8E",		"\xE6\xCF" => "\xE6\xB6\x93",		"\xE6\xD0" => "\xE6\xB7\xB5",		"\xE6\xD1" => "\xE6\xBC\x94",		"\xE6\xD2" => "\xEF\xA6\x92",		"\xE6\xD3" => "\xE7\x83\x9F",		"\xE6\xD4" => "\xE7\x84\xB6",		"\xE6\xD5" => "\xE7\x85\x99",		"\xE6\xD6" => "\xEF\xA6\x93",		"\xE6\xD7" => "\xE7\x87\x83",		"\xE6\xD8" => "\xE7\x87\x95",		"\xE6\xD9" => "\xEF\xA6\x94",		"\xE6\xDA" => "\xE7\xA1\x8F",		"\xE6\xDB" => "\xE7\xA1\xAF",		"\xE6\xDC" => "\xEF\xA6\x95",		"\xE6\xDD" => "\xE7\xAD\xB5",		"\xE6\xDE" => "\xE7\xB7\xA3",		"\xE6\xDF" => "\xEF\xA6\x96",		"\xE6\xE0" => "\xE7\xB8\xAF",		"\xE6\xE1" => "\xEF\xA6\x97",		"\xE6\xE2" => "\xE8\xA1\x8D",		"\xE6\xE3" => "\xE8\xBB\x9F",		"\xE6\xE4" => "\xEF\xA6\x98",		"\xE6\xE5" => "\xEF\xA6\x99",		"\xE6\xE6" => "\xEF\xA6\x9A",		"\xE6\xE7" => "\xE9\x89\x9B",		"\xE6\xE8" => "\xEF\xA6\x9B",		"\xE6\xE9" => "\xE9\xB3\xB6",		"\xE6\xEA" => "\xEF\xA6\x9C",		"\xE6\xEB" => "\xEF\xA6\x9D",		"\xE6\xEC" => "\xEF\xA6\x9E",		"\xE6\xED" => "\xE6\x82\x85",		"\xE6\xEE" => "\xE6\xB6\x85",		"\xE6\xEF" => "\xEF\xA6\x9F",		"\xE6\xF0" => "\xE7\x86\xB1",		"\xE6\xF1" => "\xEF\xA6\xA0",		"\xE6\xF2" => "\xEF\xA6\xA1",		"\xE6\xF3" => "\xE9\x96\xB1",		"\xE6\xF4" => "\xE5\x8E\xAD",		"\xE6\xF5" => "\xEF\xA6\xA2",		"\xE6\xF6" => "\xEF\xA6\xA3",		"\xE6\xF7" => "\xEF\xA6\xA4",		"\xE6\xF8" => "\xE6\x9F\x93",		"\xE6\xF9" => "\xEF\xA6\xA5",		"\xE6\xFA" => "\xE7\x82\x8E",		"\xE6\xFB" => "\xE7\x84\xB0",		"\xE6\xFC" => "\xE7\x90\xB0",		"\xE6\xFD" => "\xE8\x89\xB6",		"\xE6\xFE" => "\xE8\x8B\x92",		"\xE7\xA1" => "\xEF\xA6\xA6",		"\xE7\xA2" => "\xE9\x96\xBB",		"\xE7\xA3" => "\xE9\xAB\xA5",		"\xE7\xA4" => "\xE9\xB9\xBD",		"\xE7\xA5" => "\xE6\x9B\x84",		"\xE7\xA6" => "\xEF\xA6\xA7",		"\xE7\xA7" => "\xE7\x87\x81",		"\xE7\xA8" => "\xE8\x91\x89",		"\xE7\xA9" => "\xEF\xA6\xA8",		"\xE7\xAA" => "\xEF\xA6\xA9",		"\xE7\xAB" => "\xE5\xA1\x8B",		"\xE7\xAC" => "\xEF\xA6\xAA",		"\xE7\xAD" => "\xEF\xA6\xAB",		"\xE7\xAE" => "\xE5\xB6\xB8",		"\xE7\xAF" => "\xE5\xBD\xB1",		"\xE7\xB0" => "\xEF\xA6\xAC",		"\xE7\xB1" => "\xE6\x98\xA0",		"\xE7\xB2" => "\xE6\x9A\x8E",		"\xE7\xB3" => "\xE6\xA5\xB9",		"\xE7\xB4" => "\xE6\xA6\xAE",		"\xE7\xB5" => "\xE6\xB0\xB8",		"\xE7\xB6" => "\xE6\xB3\xB3",		"\xE7\xB7" => "\xE6\xB8\xB6",		"\xE7\xB8" => "\xE6\xBD\x81",		"\xE7\xB9" => "\xE6\xBF\x9A",		"\xE7\xBA" => "\xE7\x80\x9B",		"\xE7\xBB" => "\xE7\x80\xAF",		"\xE7\xBC" => "\xE7\x85\x90",		"\xE7\xBD" => "\xE7\x87\x9F",		"\xE7\xBE" => "\xE7\x8D\xB0",		"\xE7\xBF" => "\xEF\xA6\xAD",		"\xE7\xC0" => "\xE7\x91\x9B",		"\xE7\xC1" => "\xEF\xA6\xAE",		"\xE7\xC2" => "\xE7\x93\x94",		"\xE7\xC3" => "\xE7\x9B\x88",		"\xE7\xC4" => "\xE7\xA9\x8E",		"\xE7\xC5" => "\xE7\xBA\x93",		"\xE7\xC6" => "\xEF\xA6\xAF",		"\xE7\xC7" => "\xEF\xA6\xB0",		"\xE7\xC8" => "\xE8\x8B\xB1",		"\xE7\xC9" => "\xE8\xA9\xA0",		"\xE7\xCA" => "\xE8\xBF\x8E",		"\xE7\xCB" => "\xEF\xA6\xB1",		"\xE7\xCC" => "\xE9\x8D\x88",		"\xE7\xCD" => "\xEF\xA6\xB2",		"\xE7\xCE" => "\xE9\x9C\x99",		"\xE7\xCF" => "\xEF\xA6\xB3",		"\xE7\xD0" => "\xEF\xA6\xB4",		"\xE7\xD1" => "\xE4\xB9\x82",		"\xE7\xD2" => "\xE5\x80\xAA",		"\xE7\xD3" => "\xEF\xA6\xB5",		"\xE7\xD4" => "\xE5\x88\x88",		"\xE7\xD5" => "\xE5\x8F\xA1",		"\xE7\xD6" => "\xE6\x9B\xB3",		"\xE7\xD7" => "\xE6\xB1\xAD",		"\xE7\xD8" => "\xE6\xBF\x8A",		"\xE7\xD9" => "\xE7\x8C\x8A",		"\xE7\xDA" => "\xE7\x9D\xBF",		"\xE7\xDB" => "\xE7\xA9\xA2",		"\xE7\xDC" => "\xE8\x8A\xAE",		"\xE7\xDD" => "\xE8\x97\x9D",		"\xE7\xDE" => "\xE8\x98\x82",		"\xE7\xDF" => "\xEF\xA6\xB6",		"\xE7\xE0" => "\xE8\xA3\x94",		"\xE7\xE1" => "\xE8\xA9\xA3",		"\xE7\xE2" => "\xE8\xAD\xBD",		"\xE7\xE3" => "\xE8\xB1\xAB",		"\xE7\xE4" => "\xEF\xA6\xB7",		"\xE7\xE5" => "\xE9\x8A\xB3",		"\xE7\xE6" => "\xEF\xA6\xB8",		"\xE7\xE7" => "\xE9\x9C\x93",		"\xE7\xE8" => "\xE9\xA0\x90",		"\xE7\xE9" => "\xE4\xBA\x94",		"\xE7\xEA" => "\xE4\xBC\x8D",		"\xE7\xEB" => "\xE4\xBF\x89",		"\xE7\xEC" => "\xE5\x82\xB2",		"\xE7\xED" => "\xE5\x8D\x88",		"\xE7\xEE" => "\xE5\x90\xBE",		"\xE7\xEF" => "\xE5\x90\xB3",		"\xE7\xF0" => "\xE5\x97\x9A",		"\xE7\xF1" => "\xE5\xA1\xA2",		"\xE7\xF2" => "\xE5\xA2\xBA",		"\xE7\xF3" => "\xE5\xA5\xA7",		"\xE7\xF4" => "\xE5\xA8\x9B",		"\xE7\xF5" => "\xE5\xAF\xA4",		"\xE7\xF6" => "\xE6\x82\x9F",		"\xE7\xF7" => "\xEF\xA6\xB9",		"\xE7\xF8" => "\xE6\x87\x8A",		"\xE7\xF9" => "\xE6\x95\x96",		"\xE7\xFA" => "\xE6\x97\xBF",		"\xE7\xFB" => "\xE6\x99\xA4",		"\xE7\xFC" => "\xE6\xA2\xA7",		"\xE7\xFD" => "\xE6\xB1\x9A",		"\xE7\xFE" => "\xE6\xBE\xB3",		"\xE8\xA1" => "\xE7\x83\x8F",		"\xE8\xA2" => "\xE7\x86\xAC",		"\xE8\xA3" => "\xE7\x8D\x92",		"\xE8\xA4" => "\xE7\xAD\xBD",		"\xE8\xA5" => "\xE8\x9C\x88",		"\xE8\xA6" => "\xE8\xAA\xA4",		"\xE8\xA7" => "\xE9\xB0\xB2",		"\xE8\xA8" => "\xE9\xBC\x87",		"\xE8\xA9" => "\xE5\xB1\x8B",		"\xE8\xAA" => "\xE6\xB2\x83",		"\xE8\xAB" => "\xE7\x8D\x84",		"\xE8\xAC" => "\xE7\x8E\x89",		"\xE8\xAD" => "\xE9\x88\xBA",		"\xE8\xAE" => "\xE6\xBA\xAB",		"\xE8\xAF" => "\xE7\x91\xA5",		"\xE8\xB0" => "\xE7\x98\x9F",		"\xE8\xB1" => "\xE7\xA9\xA9",		"\xE8\xB2" => "\xE7\xB8\x95",		"\xE8\xB3" => "\xE8\x98\x8A",		"\xE8\xB4" => "\xE5\x85\x80",		"\xE8\xB5" => "\xE5\xA3\x85",		"\xE8\xB6" => "\xE6\x93\x81",		"\xE8\xB7" => "\xE7\x93\xAE",		"\xE8\xB8" => "\xE7\x94\x95",		"\xE8\xB9" => "\xE7\x99\xB0",		"\xE8\xBA" => "\xE7\xBF\x81",		"\xE8\xBB" => "\xE9\x82\x95",		"\xE8\xBC" => "\xE9\x9B\x8D",		"\xE8\xBD" => "\xE9\xA5\x94",		"\xE8\xBE" => "\xE6\xB8\xA6",		"\xE8\xBF" => "\xE7\x93\xA6",		"\xE8\xC0" => "\xE7\xAA\xA9",		"\xE8\xC1" => "\xE7\xAA\xAA",		"\xE8\xC2" => "\xE8\x87\xA5",		"\xE8\xC3" => "\xE8\x9B\x99",		"\xE8\xC4" => "\xE8\x9D\xB8",		"\xE8\xC5" => "\xE8\xA8\x9B",		"\xE8\xC6" => "\xE5\xA9\x89",		"\xE8\xC7" => "\xE5\xAE\x8C",		"\xE8\xC8" => "\xE5\xAE\x9B",		"\xE8\xC9" => "\xE6\xA2\xA1",		"\xE8\xCA" => "\xE6\xA4\x80",		"\xE8\xCB" => "\xE6\xB5\xA3",		"\xE8\xCC" => "\xE7\x8E\xA9",		"\xE8\xCD" => "\xE7\x90\x93",		"\xE8\xCE" => "\xE7\x90\xAC",		"\xE8\xCF" => "\xE7\xA2\x97",		"\xE8\xD0" => "\xE7\xB7\xA9",		"\xE8\xD1" => "\xE7\xBF\xAB",		"\xE8\xD2" => "\xE8\x84\x98",		"\xE8\xD3" => "\xE8\x85\x95",		"\xE8\xD4" => "\xE8\x8E\x9E",		"\xE8\xD5" => "\xE8\xB1\x8C",		"\xE8\xD6" => "\xE9\x98\xAE",		"\xE8\xD7" => "\xE9\xA0\x91",		"\xE8\xD8" => "\xE6\x9B\xB0",		"\xE8\xD9" => "\xE5\xBE\x80",		"\xE8\xDA" => "\xE6\x97\xBA",		"\xE8\xDB" => "\xE6\x9E\x89",		"\xE8\xDC" => "\xE6\xB1\xAA",		"\xE8\xDD" => "\xE7\x8E\x8B",		"\xE8\xDE" => "\xE5\x80\xAD",		"\xE8\xDF" => "\xE5\xA8\x83",		"\xE8\xE0" => "\xE6\xAD\xAA",		"\xE8\xE1" => "\xE7\x9F\xAE",		"\xE8\xE2" => "\xE5\xA4\x96",		"\xE8\xE3" => "\xE5\xB5\xAC",		"\xE8\xE4" => "\xE5\xB7\x8D",		"\xE8\xE5" => "\xE7\x8C\xA5",		"\xE8\xE6" => "\xE7\x95\x8F",		"\xE8\xE7" => "\xEF\xA6\xBA",		"\xE8\xE8" => "\xEF\xA6\xBB",		"\xE8\xE9" => "\xE5\x83\xA5",		"\xE8\xEA" => "\xE5\x87\xB9",		"\xE8\xEB" => "\xE5\xA0\xAF",		"\xE8\xEC" => "\xE5\xA4\xAD",		"\xE8\xED" => "\xE5\xA6\x96",		"\xE8\xEE" => "\xE5\xA7\x9A",		"\xE8\xEF" => "\xE5\xAF\xA5",		"\xE8\xF0" => "\xEF\xA6\xBC",		"\xE8\xF1" => "\xEF\xA6\xBD",		"\xE8\xF2" => "\xE5\xB6\xA2",		"\xE8\xF3" => "\xE6\x8B\x97",		"\xE8\xF4" => "\xE6\x90\x96",		"\xE8\xF5" => "\xE6\x92\x93",		"\xE8\xF6" => "\xE6\x93\xBE",		"\xE8\xF7" => "\xEF\xA6\xBE",		"\xE8\xF8" => "\xE6\x9B\x9C",		"\xE8\xF9" => "\xEF\xA6\xBF",		"\xE8\xFA" => "\xE6\xA9\x88",		"\xE8\xFB" => "\xEF\xA7\x80",		"\xE8\xFC" => "\xE7\x87\xBF",		"\xE8\xFD" => "\xE7\x91\xA4",		"\xE8\xFE" => "\xEF\xA7\x81",		"\xE9\xA1" => "\xE7\xAA\x88",		"\xE9\xA2" => "\xE7\xAA\xAF",		"\xE9\xA3" => "\xE7\xB9\x87",		"\xE9\xA4" => "\xE7\xB9\x9E",		"\xE9\xA5" => "\xE8\x80\x80",		"\xE9\xA6" => "\xE8\x85\xB0",		"\xE9\xA7" => "\xEF\xA7\x82",		"\xE9\xA8" => "\xE8\x9F\xAF",		"\xE9\xA9" => "\xE8\xA6\x81",		"\xE9\xAA" => "\xE8\xAC\xA0",		"\xE9\xAB" => "\xE9\x81\x99",		"\xE9\xAC" => "\xEF\xA7\x83",		"\xE9\xAD" => "\xE9\x82\x80",		"\xE9\xAE" => "\xE9\xA5\x92",		"\xE9\xAF" => "\xE6\x85\xBE",		"\xE9\xB0" => "\xE6\xAC\xB2",		"\xE9\xB1" => "\xE6\xB5\xB4",		"\xE9\xB2" => "\xE7\xB8\x9F",		"\xE9\xB3" => "\xE8\xA4\xA5",		"\xE9\xB4" => "\xE8\xBE\xB1",		"\xE9\xB5" => "\xE4\xBF\x91",		"\xE9\xB6" => "\xE5\x82\xAD",		"\xE9\xB7" => "\xE5\x86\x97",		"\xE9\xB8" => "\xE5\x8B\x87",		"\xE9\xB9" => "\xE5\x9F\x87",		"\xE9\xBA" => "\xE5\xA2\x89",		"\xE9\xBB" => "\xE5\xAE\xB9",		"\xE9\xBC" => "\xE5\xBA\xB8",		"\xE9\xBD" => "\xE6\x85\x82",		"\xE9\xBE" => "\xE6\xA6\x95",		"\xE9\xBF" => "\xE6\xB6\x8C",		"\xE9\xC0" => "\xE6\xB9\xA7",		"\xE9\xC1" => "\xE6\xBA\xB6",		"\xE9\xC2" => "\xE7\x86\x94",		"\xE9\xC3" => "\xE7\x91\xA2",		"\xE9\xC4" => "\xE7\x94\xA8",		"\xE9\xC5" => "\xE7\x94\xAC",		"\xE9\xC6" => "\xE8\x81\xB3",		"\xE9\xC7" => "\xE8\x8C\xB8",		"\xE9\xC8" => "\xE8\x93\x89",		"\xE9\xC9" => "\xE8\xB8\x8A",		"\xE9\xCA" => "\xE9\x8E\x94",		"\xE9\xCB" => "\xE9\x8F\x9E",		"\xE9\xCC" => "\xEF\xA7\x84",		"\xE9\xCD" => "\xE4\xBA\x8E",		"\xE9\xCE" => "\xE4\xBD\x91",		"\xE9\xCF" => "\xE5\x81\xB6",		"\xE9\xD0" => "\xE5\x84\xAA",		"\xE9\xD1" => "\xE5\x8F\x88",		"\xE9\xD2" => "\xE5\x8F\x8B",		"\xE9\xD3" => "\xE5\x8F\xB3",		"\xE9\xD4" => "\xE5\xAE\x87",		"\xE9\xD5" => "\xE5\xAF\x93",		"\xE9\xD6" => "\xE5\xB0\xA4",		"\xE9\xD7" => "\xE6\x84\x9A",		"\xE9\xD8" => "\xE6\x86\x82",		"\xE9\xD9" => "\xE6\x97\xB4",		"\xE9\xDA" => "\xE7\x89\x9B",		"\xE9\xDB" => "\xE7\x8E\x97",		"\xE9\xDC" => "\xE7\x91\x80",		"\xE9\xDD" => "\xE7\x9B\x82",		"\xE9\xDE" => "\xE7\xA5\x90",		"\xE9\xDF" => "\xE7\xA6\x91",		"\xE9\xE0" => "\xE7\xA6\xB9",		"\xE9\xE1" => "\xE7\xB4\x86",		"\xE9\xE2" => "\xE7\xBE\xBD",		"\xE9\xE3" => "\xE8\x8A\x8B",		"\xE9\xE4" => "\xE8\x97\x95",		"\xE9\xE5" => "\xE8\x99\x9E",		"\xE9\xE6" => "\xE8\xBF\x82",		"\xE9\xE7" => "\xE9\x81\x87",		"\xE9\xE8" => "\xE9\x83\xB5",		"\xE9\xE9" => "\xE9\x87\xAA",		"\xE9\xEA" => "\xE9\x9A\x85",		"\xE9\xEB" => "\xE9\x9B\xA8",		"\xE9\xEC" => "\xE9\x9B\xA9",		"\xE9\xED" => "\xE5\x8B\x96",		"\xE9\xEE" => "\xE5\xBD\xA7",		"\xE9\xEF" => "\xE6\x97\xAD",		"\xE9\xF0" => "\xE6\x98\xB1",		"\xE9\xF1" => "\xE6\xA0\xAF",		"\xE9\xF2" => "\xE7\x85\x9C",		"\xE9\xF3" => "\xE7\xA8\xB6",		"\xE9\xF4" => "\xE9\x83\x81",		"\xE9\xF5" => "\xE9\xA0\x8A",		"\xE9\xF6" => "\xE4\xBA\x91",		"\xE9\xF7" => "\xEF\xA7\x85",		"\xE9\xF8" => "\xE6\xA9\x92",		"\xE9\xF9" => "\xE6\xAE\x9E",		"\xE9\xFA" => "\xE6\xBE\x90",		"\xE9\xFB" => "\xE7\x86\x89",		"\xE9\xFC" => "\xE8\x80\x98",		"\xE9\xFD" => "\xE8\x8A\xB8",		"\xE9\xFE" => "\xE8\x95\x93",		"\xEA\xA1" => "\xE9\x81\x8B",		"\xEA\xA2" => "\xE9\x9A\x95",		"\xEA\xA3" => "\xE9\x9B\xB2",		"\xEA\xA4" => "\xE9\x9F\xBB",		"\xEA\xA5" => "\xE8\x94\x9A",		"\xEA\xA6" => "\xE9\xAC\xB1",		"\xEA\xA7" => "\xE4\xBA\x90",		"\xEA\xA8" => "\xE7\x86\x8A",		"\xEA\xA9" => "\xE9\x9B\x84",		"\xEA\xAA" => "\xE5\x85\x83",		"\xEA\xAB" => "\xE5\x8E\x9F",		"\xEA\xAC" => "\xE5\x93\xA1",		"\xEA\xAD" => "\xE5\x9C\x93",		"\xEA\xAE" => "\xE5\x9C\x92",		"\xEA\xAF" => "\xE5\x9E\xA3",		"\xEA\xB0" => "\xE5\xAA\x9B",		"\xEA\xB1" => "\xE5\xAB\x84",		"\xEA\xB2" => "\xE5\xAF\x83",		"\xEA\xB3" => "\xE6\x80\xA8",		"\xEA\xB4" => "\xE6\x84\xBF",		"\xEA\xB5" => "\xE6\x8F\xB4",		"\xEA\xB6" => "\xE6\xB2\x85",		"\xEA\xB7" => "\xE6\xB4\xB9",		"\xEA\xB8" => "\xE6\xB9\xB2",		"\xEA\xB9" => "\xE6\xBA\x90",		"\xEA\xBA" => "\xE7\x88\xB0",		"\xEA\xBB" => "\xE7\x8C\xBF",		"\xEA\xBC" => "\xE7\x91\x97",		"\xEA\xBD" => "\xE8\x8B\x91",		"\xEA\xBE" => "\xE8\xA2\x81",		"\xEA\xBF" => "\xE8\xBD\x85",		"\xEA\xC0" => "\xE9\x81\xA0",		"\xEA\xC1" => "\xEF\xA7\x86",		"\xEA\xC2" => "\xE9\x99\xA2",		"\xEA\xC3" => "\xE9\xA1\x98",		"\xEA\xC4" => "\xE9\xB4\x9B",		"\xEA\xC5" => "\xE6\x9C\x88",		"\xEA\xC6" => "\xE8\xB6\x8A",		"\xEA\xC7" => "\xE9\x89\x9E",		"\xEA\xC8" => "\xE4\xBD\x8D",		"\xEA\xC9" => "\xE5\x81\x89",		"\xEA\xCA" => "\xE5\x83\x9E",		"\xEA\xCB" => "\xE5\x8D\xB1",		"\xEA\xCC" => "\xE5\x9C\x8D",		"\xEA\xCD" => "\xE5\xA7\x94",		"\xEA\xCE" => "\xE5\xA8\x81",		"\xEA\xCF" => "\xE5\xB0\x89",		"\xEA\xD0" => "\xE6\x85\xB0",		"\xEA\xD1" => "\xE6\x9A\x90",		"\xEA\xD2" => "\xE6\xB8\xAD",		"\xEA\xD3" => "\xE7\x88\xB2",		"\xEA\xD4" => "\xE7\x91\x8B",		"\xEA\xD5" => "\xE7\xB7\xAF",		"\xEA\xD6" => "\xE8\x83\x83",		"\xEA\xD7" => "\xE8\x90\x8E",		"\xEA\xD8" => "\xE8\x91\xA6",		"\xEA\xD9" => "\xE8\x94\xBF",		"\xEA\xDA" => "\xE8\x9D\x9F",		"\xEA\xDB" => "\xE8\xA1\x9B",		"\xEA\xDC" => "\xE8\xA4\x98",		"\xEA\xDD" => "\xE8\xAC\x82",		"\xEA\xDE" => "\xE9\x81\x95",		"\xEA\xDF" => "\xE9\x9F\x8B",		"\xEA\xE0" => "\xE9\xAD\x8F",		"\xEA\xE1" => "\xE4\xB9\xB3",		"\xEA\xE2" => "\xE4\xBE\x91",		"\xEA\xE3" => "\xE5\x84\x92",		"\xEA\xE4" => "\xE5\x85\xAA",		"\xEA\xE5" => "\xEF\xA7\x87",		"\xEA\xE6" => "\xE5\x94\xAF",		"\xEA\xE7" => "\xE5\x96\xA9",		"\xEA\xE8" => "\xE5\xAD\xBA",		"\xEA\xE9" => "\xE5\xAE\xA5",		"\xEA\xEA" => "\xE5\xB9\xBC",		"\xEA\xEB" => "\xE5\xB9\xBD",		"\xEA\xEC" => "\xE5\xBA\xBE",		"\xEA\xED" => "\xE6\x82\xA0",		"\xEA\xEE" => "\xE6\x83\x9F",		"\xEA\xEF" => "\xE6\x84\x88",		"\xEA\xF0" => "\xE6\x84\x89",		"\xEA\xF1" => "\xE6\x8F\x84",		"\xEA\xF2" => "\xE6\x94\xB8",		"\xEA\xF3" => "\xE6\x9C\x89",		"\xEA\xF4" => "\xEF\xA7\x88",		"\xEA\xF5" => "\xE6\x9F\x94",		"\xEA\xF6" => "\xE6\x9F\x9A",		"\xEA\xF7" => "\xEF\xA7\x89",		"\xEA\xF8" => "\xE6\xA5\xA1",		"\xEA\xF9" => "\xE6\xA5\xA2",		"\xEA\xFA" => "\xE6\xB2\xB9",		"\xEA\xFB" => "\xE6\xB4\xA7",		"\xEA\xFC" => "\xEF\xA7\x8A",		"\xEA\xFD" => "\xE6\xB8\xB8",		"\xEA\xFE" => "\xEF\xA7\x8B",		"\xEB\xA1" => "\xE6\xBF\xA1",		"\xEB\xA2" => "\xE7\x8C\xB6",		"\xEB\xA3" => "\xE7\x8C\xB7",		"\xEB\xA4" => "\xEF\xA7\x8C",		"\xEB\xA5" => "\xE7\x91\x9C",		"\xEB\xA6" => "\xE7\x94\xB1",		"\xEB\xA7" => "\xEF\xA7\x8D",		"\xEB\xA8" => "\xE7\x99\x92",		"\xEB\xA9" => "\xEF\xA7\x8E",		"\xEB\xAA" => "\xEF\xA7\x8F",		"\xEB\xAB" => "\xE7\xB6\xAD",		"\xEB\xAC" => "\xE8\x87\xBE",		"\xEB\xAD" => "\xE8\x90\xB8",		"\xEB\xAE" => "\xE8\xA3\x95",		"\xEB\xAF" => "\xE8\xAA\x98",		"\xEB\xB0" => "\xE8\xAB\x9B",		"\xEB\xB1" => "\xE8\xAB\xAD",		"\xEB\xB2" => "\xE8\xB8\xB0",		"\xEB\xB3" => "\xE8\xB9\x82",		"\xEB\xB4" => "\xE9\x81\x8A",		"\xEB\xB5" => "\xE9\x80\xBE",		"\xEB\xB6" => "\xE9\x81\xBA",		"\xEB\xB7" => "\xE9\x85\x89",		"\xEB\xB8" => "\xE9\x87\x89",		"\xEB\xB9" => "\xE9\x8D\xAE",		"\xEB\xBA" => "\xEF\xA7\x90",		"\xEB\xBB" => "\xEF\xA7\x91",		"\xEB\xBC" => "\xE5\xA0\x89",		"\xEB\xBD" => "\xEF\xA7\x92",		"\xEB\xBE" => "\xE6\xAF\x93",		"\xEB\xBF" => "\xE8\x82\x89",		"\xEB\xC0" => "\xE8\x82\xB2",		"\xEB\xC1" => "\xEF\xA7\x93",		"\xEB\xC2" => "\xEF\xA7\x94",		"\xEB\xC3" => "\xE5\x85\x81",		"\xEB\xC4" => "\xE5\xA5\xAB",		"\xEB\xC5" => "\xE5\xB0\xB9",		"\xEB\xC6" => "\xEF\xA7\x95",		"\xEB\xC7" => "\xEF\xA7\x96",		"\xEB\xC8" => "\xE6\xBD\xA4",		"\xEB\xC9" => "\xE7\x8E\xA7",		"\xEB\xCA" => "\xE8\x83\xA4",		"\xEB\xCB" => "\xE8\xB4\x87",		"\xEB\xCC" => "\xEF\xA7\x97",		"\xEB\xCD" => "\xE9\x88\x97",		"\xEB\xCE" => "\xE9\x96\x8F",		"\xEB\xCF" => "\xEF\xA7\x98",		"\xEB\xD0" => "\xEF\xA7\x99",		"\xEB\xD1" => "\xEF\xA7\x9A",		"\xEB\xD2" => "\xEF\xA7\x9B",		"\xEB\xD3" => "\xE8\x81\xBF",		"\xEB\xD4" => "\xE6\x88\x8E",		"\xEB\xD5" => "\xE7\x80\x9C",		"\xEB\xD6" => "\xE7\xB5\xA8",		"\xEB\xD7" => "\xE8\x9E\x8D",		"\xEB\xD8" => "\xEF\xA7\x9C",		"\xEB\xD9" => "\xE5\x9E\xA0",		"\xEB\xDA" => "\xE6\x81\xA9",		"\xEB\xDB" => "\xE6\x85\x87",		"\xEB\xDC" => "\xE6\xAE\xB7",		"\xEB\xDD" => "\xE8\xAA\xBE",		"\xEB\xDE" => "\xE9\x8A\x80",		"\xEB\xDF" => "\xE9\x9A\xB1",		"\xEB\xE0" => "\xE4\xB9\x99",		"\xEB\xE1" => "\xE5\x90\x9F",		"\xEB\xE2" => "\xE6\xB7\xAB",		"\xEB\xE3" => "\xE8\x94\xAD",		"\xEB\xE4" => "\xE9\x99\xB0",		"\xEB\xE5" => "\xE9\x9F\xB3",		"\xEB\xE6" => "\xE9\xA3\xAE",		"\xEB\xE7" => "\xE6\x8F\x96",		"\xEB\xE8" => "\xE6\xB3\xA3",		"\xEB\xE9" => "\xE9\x82\x91",		"\xEB\xEA" => "\xE5\x87\x9D",		"\xEB\xEB" => "\xE6\x87\x89",		"\xEB\xEC" => "\xE8\x86\xBA",		"\xEB\xED" => "\xE9\xB7\xB9",		"\xEB\xEE" => "\xE4\xBE\x9D",		"\xEB\xEF" => "\xE5\x80\x9A",		"\xEB\xF0" => "\xE5\x84\x80",		"\xEB\xF1" => "\xE5\xAE\x9C",		"\xEB\xF2" => "\xE6\x84\x8F",		"\xEB\xF3" => "\xE6\x87\xBF",		"\xEB\xF4" => "\xE6\x93\xAC",		"\xEB\xF5" => "\xE6\xA4\x85",		"\xEB\xF6" => "\xE6\xAF\x85",		"\xEB\xF7" => "\xE7\x96\x91",		"\xEB\xF8" => "\xE7\x9F\xA3",		"\xEB\xF9" => "\xE7\xBE\xA9",		"\xEB\xFA" => "\xE8\x89\xA4",		"\xEB\xFB" => "\xE8\x96\x8F",		"\xEB\xFC" => "\xE8\x9F\xBB",		"\xEB\xFD" => "\xE8\xA1\xA3",		"\xEB\xFE" => "\xE8\xAA\xBC",		"\xEC\xA1" => "\xE8\xAD\xB0",		"\xEC\xA2" => "\xE9\x86\xAB",		"\xEC\xA3" => "\xE4\xBA\x8C",		"\xEC\xA4" => "\xE4\xBB\xA5",		"\xEC\xA5" => "\xE4\xBC\x8A",		"\xEC\xA6" => "\xEF\xA7\x9D",		"\xEC\xA7" => "\xEF\xA7\x9E",		"\xEC\xA8" => "\xE5\xA4\xB7",		"\xEC\xA9" => "\xE5\xA7\xA8",		"\xEC\xAA" => "\xEF\xA7\x9F",		"\xEC\xAB" => "\xE5\xB7\xB2",		"\xEC\xAC" => "\xE5\xBC\x9B",		"\xEC\xAD" => "\xE5\xBD\x9B",		"\xEC\xAE" => "\xE6\x80\xA1",		"\xEC\xAF" => "\xEF\xA7\xA0",		"\xEC\xB0" => "\xEF\xA7\xA1",		"\xEC\xB1" => "\xEF\xA7\xA2",		"\xEC\xB2" => "\xEF\xA7\xA3",		"\xEC\xB3" => "\xE7\x88\xBE",		"\xEC\xB4" => "\xE7\x8F\xA5",		"\xEC\xB5" => "\xEF\xA7\xA4",		"\xEC\xB6" => "\xE7\x95\xB0",		"\xEC\xB7" => "\xE7\x97\x8D",		"\xEC\xB8" => "\xEF\xA7\xA5",		"\xEC\xB9" => "\xE7\xA7\xBB",		"\xEC\xBA" => "\xEF\xA7\xA6",		"\xEC\xBB" => "\xE8\x80\x8C",		"\xEC\xBC" => "\xE8\x80\xB3",		"\xEC\xBD" => "\xE8\x82\x84",		"\xEC\xBE" => "\xE8\x8B\xA1",		"\xEC\xBF" => "\xE8\x8D\x91",		"\xEC\xC0" => "\xEF\xA7\xA7",		"\xEC\xC1" => "\xEF\xA7\xA8",		"\xEC\xC2" => "\xE8\xB2\xBD",		"\xEC\xC3" => "\xE8\xB2\xB3",		"\xEC\xC4" => "\xE9\x82\x87",		"\xEC\xC5" => "\xEF\xA7\xA9",		"\xEC\xC6" => "\xEF\xA7\xAA",		"\xEC\xC7" => "\xE9\xA3\xB4",		"\xEC\xC8" => "\xE9\xA4\x8C",		"\xEC\xC9" => "\xEF\xA7\xAB",		"\xEC\xCA" => "\xEF\xA7\xAC",		"\xEC\xCB" => "\xE7\x80\xB7",		"\xEC\xCC" => "\xE7\x9B\x8A",		"\xEC\xCD" => "\xE7\xBF\x8A",		"\xEC\xCE" => "\xE7\xBF\x8C",		"\xEC\xCF" => "\xE7\xBF\xBC",		"\xEC\xD0" => "\xE8\xAC\x9A",		"\xEC\xD1" => "\xE4\xBA\xBA",		"\xEC\xD2" => "\xE4\xBB\x81",		"\xEC\xD3" => "\xE5\x88\x83",		"\xEC\xD4" => "\xE5\x8D\xB0",		"\xEC\xD5" => "\xEF\xA7\xAD",		"\xEC\xD6" => "\xE5\x92\xBD",		"\xEC\xD7" => "\xE5\x9B\xA0",		"\xEC\xD8" => "\xE5\xA7\xBB",		"\xEC\xD9" => "\xE5\xAF\x85",		"\xEC\xDA" => "\xE5\xBC\x95",		"\xEC\xDB" => "\xE5\xBF\x8D",		"\xEC\xDC" => "\xE6\xB9\xAE",		"\xEC\xDD" => "\xEF\xA7\xAE",		"\xEC\xDE" => "\xEF\xA7\xAF",		"\xEC\xDF" => "\xE7\xB5\xAA",		"\xEC\xE0" => "\xE8\x8C\xB5",		"\xEC\xE1" => "\xEF\xA7\xB0",		"\xEC\xE2" => "\xE8\x9A\x93",		"\xEC\xE3" => "\xE8\xAA\x8D",		"\xEC\xE4" => "\xEF\xA7\xB1",		"\xEC\xE5" => "\xE9\x9D\xAD",		"\xEC\xE6" => "\xE9\x9D\xB7",		"\xEC\xE7" => "\xEF\xA7\xB2",		"\xEC\xE8" => "\xEF\xA7\xB3",		"\xEC\xE9" => "\xE4\xB8\x80",		"\xEC\xEA" => "\xE4\xBD\x9A",		"\xEC\xEB" => "\xE4\xBD\xBE",		"\xEC\xEC" => "\xE5\xA3\xB9",		"\xEC\xED" => "\xE6\x97\xA5",		"\xEC\xEE" => "\xE6\xBA\xA2",		"\xEC\xEF" => "\xE9\x80\xB8",		"\xEC\xF0" => "\xE9\x8E\xB0",		"\xEC\xF1" => "\xE9\xA6\xB9",		"\xEC\xF2" => "\xE4\xBB\xBB",		"\xEC\xF3" => "\xE5\xA3\xAC",		"\xEC\xF4" => "\xE5\xA6\x8A",		"\xEC\xF5" => "\xE5\xA7\x99",		"\xEC\xF6" => "\xE6\x81\x81",		"\xEC\xF7" => "\xEF\xA7\xB4",		"\xEC\xF8" => "\xEF\xA7\xB5",		"\xEC\xF9" => "\xE7\xA8\x94",		"\xEC\xFA" => "\xEF\xA7\xB6",		"\xEC\xFB" => "\xE8\x8D\x8F",		"\xEC\xFC" => "\xE8\xB3\x83",		"\xEC\xFD" => "\xE5\x85\xA5",		"\xEC\xFE" => "\xE5\x8D\x84",		"\xED\xA1" => "\xEF\xA7\xB7",		"\xED\xA2" => "\xEF\xA7\xB8",		"\xED\xA3" => "\xEF\xA7\xB9",		"\xED\xA4" => "\xE4\xBB\x8D",		"\xED\xA5" => "\xE5\x89\xA9",		"\xED\xA6" => "\xE5\xAD\x95",		"\xED\xA7" => "\xE8\x8A\xBF",		"\xED\xA8" => "\xE4\xBB\x94",		"\xED\xA9" => "\xE5\x88\xBA",		"\xED\xAA" => "\xE5\x92\xA8",		"\xED\xAB" => "\xE5\xA7\x89",		"\xED\xAC" => "\xE5\xA7\xBF",		"\xED\xAD" => "\xE5\xAD\x90",		"\xED\xAE" => "\xE5\xAD\x97",		"\xED\xAF" => "\xE5\xAD\x9C",		"\xED\xB0" => "\xE6\x81\xA3",		"\xED\xB1" => "\xE6\x85\x88",		"\xED\xB2" => "\xE6\xBB\x8B",		"\xED\xB3" => "\xE7\x82\x99",		"\xED\xB4" => "\xE7\x85\xAE",		"\xED\xB5" => "\xE7\x8E\x86",		"\xED\xB6" => "\xE7\x93\xB7",		"\xED\xB7" => "\xE7\x96\xB5",		"\xED\xB8" => "\xE7\xA3\x81",		"\xED\xB9" => "\xE7\xB4\xAB",		"\xED\xBA" => "\xE8\x80\x85",		"\xED\xBB" => "\xE8\x87\xAA",		"\xED\xBC" => "\xE8\x8C\xA8",		"\xED\xBD" => "\xE8\x94\x97",		"\xED\xBE" => "\xE8\x97\x89",		"\xED\xBF" => "\xE8\xAB\xAE",		"\xED\xC0" => "\xE8\xB3\x87",		"\xED\xC1" => "\xE9\x9B\x8C",		"\xED\xC2" => "\xE4\xBD\x9C",		"\xED\xC3" => "\xE5\x8B\xBA",		"\xED\xC4" => "\xE5\x9A\xBC",		"\xED\xC5" => "\xE6\x96\xAB",		"\xED\xC6" => "\xE6\x98\xA8",		"\xED\xC7" => "\xE7\x81\xBC",		"\xED\xC8" => "\xE7\x82\xB8",		"\xED\xC9" => "\xE7\x88\xB5",		"\xED\xCA" => "\xE7\xB6\xBD",		"\xED\xCB" => "\xE8\x8A\x8D",		"\xED\xCC" => "\xE9\x85\x8C",		"\xED\xCD" => "\xE9\x9B\x80",		"\xED\xCE" => "\xE9\xB5\xB2",		"\xED\xCF" => "\xE5\xAD\xB1",		"\xED\xD0" => "\xE6\xA3\xA7",		"\xED\xD1" => "\xE6\xAE\x98",		"\xED\xD2" => "\xE6\xBD\xBA",		"\xED\xD3" => "\xE7\x9B\x9E",		"\xED\xD4" => "\xE5\xB2\x91",		"\xED\xD5" => "\xE6\x9A\xAB",		"\xED\xD6" => "\xE6\xBD\x9B",		"\xED\xD7" => "\xE7\xAE\xB4",		"\xED\xD8" => "\xE7\xB0\xAA",		"\xED\xD9" => "\xE8\xA0\xB6",		"\xED\xDA" => "\xE9\x9B\x9C",		"\xED\xDB" => "\xE4\xB8\x88",		"\xED\xDC" => "\xE4\xBB\x97",		"\xED\xDD" => "\xE5\x8C\xA0",		"\xED\xDE" => "\xE5\xA0\xB4",		"\xED\xDF" => "\xE5\xA2\xBB",		"\xED\xE0" => "\xE5\xA3\xAF",		"\xED\xE1" => "\xE5\xA5\xAC",		"\xED\xE2" => "\xE5\xB0\x87",		"\xED\xE3" => "\xE5\xB8\xB3",		"\xED\xE4" => "\xE5\xBA\x84",		"\xED\xE5" => "\xE5\xBC\xB5",		"\xED\xE6" => "\xE6\x8E\x8C",		"\xED\xE7" => "\xE6\x9A\xB2",		"\xED\xE8" => "\xE6\x9D\x96",		"\xED\xE9" => "\xE6\xA8\x9F",		"\xED\xEA" => "\xE6\xAA\xA3",		"\xED\xEB" => "\xE6\xAC\x8C",		"\xED\xEC" => "\xE6\xBC\xBF",		"\xED\xED" => "\xE7\x89\x86",		"\xED\xEE" => "\xEF\xA7\xBA",		"\xED\xEF" => "\xE7\x8D\x90",		"\xED\xF0" => "\xE7\x92\x8B",		"\xED\xF1" => "\xE7\xAB\xA0",		"\xED\xF2" => "\xE7\xB2\xA7",		"\xED\xF3" => "\xE8\x85\xB8",		"\xED\xF4" => "\xE8\x87\x9F",		"\xED\xF5" => "\xE8\x87\xA7",		"\xED\xF6" => "\xE8\x8E\x8A",		"\xED\xF7" => "\xE8\x91\xAC",		"\xED\xF8" => "\xE8\x94\xA3",		"\xED\xF9" => "\xE8\x96\x94",		"\xED\xFA" => "\xE8\x97\x8F",		"\xED\xFB" => "\xE8\xA3\x9D",		"\xED\xFC" => "\xE8\xB4\x93",		"\xED\xFD" => "\xE9\x86\xAC",		"\xED\xFE" => "\xE9\x95\xB7",		"\xEE\xA1" => "\xE9\x9A\x9C",		"\xEE\xA2" => "\xE5\x86\x8D",		"\xEE\xA3" => "\xE5\x93\x89",		"\xEE\xA4" => "\xE5\x9C\xA8",		"\xEE\xA5" => "\xE5\xAE\xB0",		"\xEE\xA6" => "\xE6\x89\x8D",		"\xEE\xA7" => "\xE6\x9D\x90",		"\xEE\xA8" => "\xE6\xA0\xBD",		"\xEE\xA9" => "\xE6\xA2\x93",		"\xEE\xAA" => "\xE6\xB8\xBD",		"\xEE\xAB" => "\xE6\xBB\x93",		"\xEE\xAC" => "\xE7\x81\xBD",		"\xEE\xAD" => "\xE7\xB8\xA1",		"\xEE\xAE" => "\xE8\xA3\x81",		"\xEE\xAF" => "\xE8\xB2\xA1",		"\xEE\xB0" => "\xE8\xBC\x89",		"\xEE\xB1" => "\xE9\xBD\x8B",		"\xEE\xB2" => "\xE9\xBD\x8E",		"\xEE\xB3" => "\xE7\x88\xAD",		"\xEE\xB4" => "\xE7\xAE\x8F",		"\xEE\xB5" => "\xE8\xAB\x8D",		"\xEE\xB6" => "\xE9\x8C\x9A",		"\xEE\xB7" => "\xE4\xBD\x87",		"\xEE\xB8" => "\xE4\xBD\x8E",		"\xEE\xB9" => "\xE5\x84\xB2",		"\xEE\xBA" => "\xE5\x92\x80",		"\xEE\xBB" => "\xE5\xA7\x90",		"\xEE\xBC" => "\xE5\xBA\x95",		"\xEE\xBD" => "\xE6\x8A\xB5",		"\xEE\xBE" => "\xE6\x9D\xB5",		"\xEE\xBF" => "\xE6\xA5\xAE",		"\xEE\xC0" => "\xE6\xA8\x97",		"\xEE\xC1" => "\xE6\xB2\xAE",		"\xEE\xC2" => "\xE6\xB8\x9A",		"\xEE\xC3" => "\xE7\x8B\x99",		"\xEE\xC4" => "\xE7\x8C\xAA",		"\xEE\xC5" => "\xE7\x96\xBD",		"\xEE\xC6" => "\xE7\xAE\xB8",		"\xEE\xC7" => "\xE7\xB4\xB5",		"\xEE\xC8" => "\xE8\x8B\xA7",		"\xEE\xC9" => "\xE8\x8F\xB9",		"\xEE\xCA" => "\xE8\x91\x97",		"\xEE\xCB" => "\xE8\x97\xB7",		"\xEE\xCC" => "\xE8\xA9\x9B",		"\xEE\xCD" => "\xE8\xB2\xAF",		"\xEE\xCE" => "\xE8\xBA\x87",		"\xEE\xCF" => "\xE9\x80\x99",		"\xEE\xD0" => "\xE9\x82\xB8",		"\xEE\xD1" => "\xE9\x9B\x8E",		"\xEE\xD2" => "\xE9\xBD\x9F",		"\xEE\xD3" => "\xE5\x8B\xA3",		"\xEE\xD4" => "\xE5\x90\x8A",		"\xEE\xD5" => "\xE5\xAB\xA1",		"\xEE\xD6" => "\xE5\xAF\x82",		"\xEE\xD7" => "\xE6\x91\x98",		"\xEE\xD8" => "\xE6\x95\xB5",		"\xEE\xD9" => "\xE6\xBB\xB4",		"\xEE\xDA" => "\xE7\x8B\x84",		"\xEE\xDB" => "\xEF\xA7\xBB",		"\xEE\xDC" => "\xE7\x9A\x84",		"\xEE\xDD" => "\xE7\xA9\x8D",		"\xEE\xDE" => "\xE7\xAC\x9B",		"\xEE\xDF" => "\xE7\xB1\x8D",		"\xEE\xE0" => "\xE7\xB8\xBE",		"\xEE\xE1" => "\xE7\xBF\x9F",		"\xEE\xE2" => "\xE8\x8D\xBB",		"\xEE\xE3" => "\xE8\xAC\xAB",		"\xEE\xE4" => "\xE8\xB3\x8A",		"\xEE\xE5" => "\xE8\xB5\xA4",		"\xEE\xE6" => "\xE8\xB7\xA1",		"\xEE\xE7" => "\xE8\xB9\x9F",		"\xEE\xE8" => "\xE8\xBF\xAA",		"\xEE\xE9" => "\xE8\xBF\xB9",		"\xEE\xEA" => "\xE9\x81\xA9",		"\xEE\xEB" => "\xE9\x8F\x91",		"\xEE\xEC" => "\xE4\xBD\x83",		"\xEE\xED" => "\xE4\xBD\xBA",		"\xEE\xEE" => "\xE5\x82\xB3",		"\xEE\xEF" => "\xE5\x85\xA8",		"\xEE\xF0" => "\xE5\x85\xB8",		"\xEE\xF1" => "\xE5\x89\x8D",		"\xEE\xF2" => "\xE5\x89\xAA",		"\xEE\xF3" => "\xE5\xA1\xA1",		"\xEE\xF4" => "\xE5\xA1\xBC",		"\xEE\xF5" => "\xE5\xA5\xA0",		"\xEE\xF6" => "\xE5\xB0\x88",		"\xEE\xF7" => "\xE5\xB1\x95",		"\xEE\xF8" => "\xE5\xBB\x9B",		"\xEE\xF9" => "\xE6\x82\x9B",		"\xEE\xFA" => "\xE6\x88\xB0",		"\xEE\xFB" => "\xE6\xA0\x93",		"\xEE\xFC" => "\xE6\xAE\xBF",		"\xEE\xFD" => "\xE6\xB0\x88",		"\xEE\xFE" => "\xE6\xBE\xB1",		"\xEF\xA1" => "\xE7\x85\x8E",		"\xEF\xA2" => "\xE7\x90\xA0",		"\xEF\xA3" => "\xE7\x94\xB0",		"\xEF\xA4" => "\xE7\x94\xB8",		"\xEF\xA5" => "\xE7\x95\x91",		"\xEF\xA6" => "\xE7\x99\xB2",		"\xEF\xA7" => "\xE7\xAD\x8C",		"\xEF\xA8" => "\xE7\xAE\x8B",		"\xEF\xA9" => "\xE7\xAE\xAD",		"\xEF\xAA" => "\xE7\xAF\x86",		"\xEF\xAB" => "\xE7\xBA\x8F",		"\xEF\xAC" => "\xE8\xA9\xAE",		"\xEF\xAD" => "\xE8\xBC\xBE",		"\xEF\xAE" => "\xE8\xBD\x89",		"\xEF\xAF" => "\xE9\x88\xBF",		"\xEF\xB0" => "\xE9\x8A\x93",		"\xEF\xB1" => "\xE9\x8C\xA2",		"\xEF\xB2" => "\xE9\x90\xAB",		"\xEF\xB3" => "\xE9\x9B\xBB",		"\xEF\xB4" => "\xE9\xA1\x9A",		"\xEF\xB5" => "\xE9\xA1\xAB",		"\xEF\xB6" => "\xE9\xA4\x9E",		"\xEF\xB7" => "\xE5\x88\x87",		"\xEF\xB8" => "\xE6\x88\xAA",		"\xEF\xB9" => "\xE6\x8A\x98",		"\xEF\xBA" => "\xE6\xB5\x99",		"\xEF\xBB" => "\xE7\x99\xA4",		"\xEF\xBC" => "\xE7\xAB\x8A",		"\xEF\xBD" => "\xE7\xAF\x80",		"\xEF\xBE" => "\xE7\xB5\xB6",		"\xEF\xBF" => "\xE5\x8D\xA0",		"\xEF\xC0" => "\xE5\xB2\xBE",		"\xEF\xC1" => "\xE5\xBA\x97",		"\xEF\xC2" => "\xE6\xBC\xB8",		"\xEF\xC3" => "\xE7\x82\xB9",		"\xEF\xC4" => "\xE7\xB2\x98",		"\xEF\xC5" => "\xE9\x9C\x91",		"\xEF\xC6" => "\xE9\xAE\x8E",		"\xEF\xC7" => "\xE9\xBB\x9E",		"\xEF\xC8" => "\xE6\x8E\xA5",		"\xEF\xC9" => "\xE6\x91\xBA",		"\xEF\xCA" => "\xE8\x9D\xB6",		"\xEF\xCB" => "\xE4\xB8\x81",		"\xEF\xCC" => "\xE4\xBA\x95",		"\xEF\xCD" => "\xE4\xBA\xAD",		"\xEF\xCE" => "\xE5\x81\x9C",		"\xEF\xCF" => "\xE5\x81\xB5",		"\xEF\xD0" => "\xE5\x91\x88",		"\xEF\xD1" => "\xE5\xA7\x83",		"\xEF\xD2" => "\xE5\xAE\x9A",		"\xEF\xD3" => "\xE5\xB9\x80",		"\xEF\xD4" => "\xE5\xBA\xAD",		"\xEF\xD5" => "\xE5\xBB\xB7",		"\xEF\xD6" => "\xE5\xBE\x81",		"\xEF\xD7" => "\xE6\x83\x85",		"\xEF\xD8" => "\xE6\x8C\xBA",		"\xEF\xD9" => "\xE6\x94\xBF",		"\xEF\xDA" => "\xE6\x95\xB4",		"\xEF\xDB" => "\xE6\x97\x8C",		"\xEF\xDC" => "\xE6\x99\xB6",		"\xEF\xDD" => "\xE6\x99\xB8",		"\xEF\xDE" => "\xE6\x9F\xBE",		"\xEF\xDF" => "\xE6\xA5\xA8",		"\xEF\xE0" => "\xE6\xAA\x89",		"\xEF\xE1" => "\xE6\xAD\xA3",		"\xEF\xE2" => "\xE6\xB1\x80",		"\xEF\xE3" => "\xE6\xB7\x80",		"\xEF\xE4" => "\xE6\xB7\xA8",		"\xEF\xE5" => "\xE6\xB8\x9F",		"\xEF\xE6" => "\xE6\xB9\x9E",		"\xEF\xE7" => "\xE7\x80\x9E",		"\xEF\xE8" => "\xE7\x82\xA1",		"\xEF\xE9" => "\xE7\x8E\x8E",		"\xEF\xEA" => "\xE7\x8F\xBD",		"\xEF\xEB" => "\xE7\x94\xBA",		"\xEF\xEC" => "\xE7\x9D\x9B",		"\xEF\xED" => "\xE7\xA2\x87",		"\xEF\xEE" => "\xE7\xA6\x8E",		"\xEF\xEF" => "\xE7\xA8\x8B",		"\xEF\xF0" => "\xE7\xA9\xBD",		"\xEF\xF1" => "\xE7\xB2\xBE",		"\xEF\xF2" => "\xE7\xB6\x8E",		"\xEF\xF3" => "\xE8\x89\x87",		"\xEF\xF4" => "\xE8\xA8\x82",		"\xEF\xF5" => "\xE8\xAB\xAA",		"\xEF\xF6" => "\xE8\xB2\x9E",		"\xEF\xF7" => "\xE9\x84\xAD",		"\xEF\xF8" => "\xE9\x85\x8A",		"\xEF\xF9" => "\xE9\x87\x98",		"\xEF\xFA" => "\xE9\x89\xA6",		"\xEF\xFB" => "\xE9\x8B\x8C",		"\xEF\xFC" => "\xE9\x8C\xA0",		"\xEF\xFD" => "\xE9\x9C\x86",		"\xEF\xFE" => "\xE9\x9D\x96",		"\xF0\xA1" => "\xE9\x9D\x9C",		"\xF0\xA2" => "\xE9\xA0\x82",		"\xF0\xA3" => "\xE9\xBC\x8E",		"\xF0\xA4" => "\xE5\x88\xB6",		"\xF0\xA5" => "\xE5\x8A\x91",		"\xF0\xA6" => "\xE5\x95\xBC",		"\xF0\xA7" => "\xE5\xA0\xA4",		"\xF0\xA8" => "\xE5\xB8\x9D",		"\xF0\xA9" => "\xE5\xBC\x9F",		"\xF0\xAA" => "\xE6\x82\x8C",		"\xF0\xAB" => "\xE6\x8F\x90",		"\xF0\xAC" => "\xE6\xA2\xAF",		"\xF0\xAD" => "\xE6\xBF\x9F",		"\xF0\xAE" => "\xE7\xA5\xAD",		"\xF0\xAF" => "\xE7\xAC\xAC",		"\xF0\xB0" => "\xE8\x87\x8D",		"\xF0\xB1" => "\xE8\x96\xBA",		"\xF0\xB2" => "\xE8\xA3\xBD",		"\xF0\xB3" => "\xE8\xAB\xB8",		"\xF0\xB4" => "\xE8\xB9\x84",		"\xF0\xB5" => "\xE9\x86\x8D",		"\xF0\xB6" => "\xE9\x99\xA4",		"\xF0\xB7" => "\xE9\x9A\x9B",		"\xF0\xB8" => "\xE9\x9C\xBD",		"\xF0\xB9" => "\xE9\xA1\x8C",		"\xF0\xBA" => "\xE9\xBD\x8A",		"\xF0\xBB" => "\xE4\xBF\x8E",		"\xF0\xBC" => "\xE5\x85\x86",		"\xF0\xBD" => "\xE5\x87\x8B",		"\xF0\xBE" => "\xE5\x8A\xA9",		"\xF0\xBF" => "\xE5\x98\xB2",		"\xF0\xC0" => "\xE5\xBC\x94",		"\xF0\xC1" => "\xE5\xBD\xAB",		"\xF0\xC2" => "\xE6\x8E\xAA",		"\xF0\xC3" => "\xE6\x93\x8D",		"\xF0\xC4" => "\xE6\x97\xA9",		"\xF0\xC5" => "\xE6\x99\x81",		"\xF0\xC6" => "\xE6\x9B\xBA",		"\xF0\xC7" => "\xE6\x9B\xB9",		"\xF0\xC8" => "\xE6\x9C\x9D",		"\xF0\xC9" => "\xE6\xA2\x9D",		"\xF0\xCA" => "\xE6\xA3\x97",		"\xF0\xCB" => "\xE6\xA7\xBD",		"\xF0\xCC" => "\xE6\xBC\x95",		"\xF0\xCD" => "\xE6\xBD\xAE",		"\xF0\xCE" => "\xE7\x85\xA7",		"\xF0\xCF" => "\xE7\x87\xA5",		"\xF0\xD0" => "\xE7\x88\xAA",		"\xF0\xD1" => "\xE7\x92\xAA",		"\xF0\xD2" => "\xE7\x9C\xBA",		"\xF0\xD3" => "\xE7\xA5\x96",		"\xF0\xD4" => "\xE7\xA5\x9A",		"\xF0\xD5" => "\xE7\xA7\x9F",		"\xF0\xD6" => "\xE7\xA8\xA0",		"\xF0\xD7" => "\xE7\xAA\x95",		"\xF0\xD8" => "\xE7\xB2\x97",		"\xF0\xD9" => "\xE7\xB3\x9F",		"\xF0\xDA" => "\xE7\xB5\x84",		"\xF0\xDB" => "\xE7\xB9\xB0",		"\xF0\xDC" => "\xE8\x82\x87",		"\xF0\xDD" => "\xE8\x97\xBB",		"\xF0\xDE" => "\xE8\x9A\xA4",		"\xF0\xDF" => "\xE8\xA9\x94",		"\xF0\xE0" => "\xE8\xAA\xBF",		"\xF0\xE1" => "\xE8\xB6\x99",		"\xF0\xE2" => "\xE8\xBA\x81",		"\xF0\xE3" => "\xE9\x80\xA0",		"\xF0\xE4" => "\xE9\x81\xAD",		"\xF0\xE5" => "\xE9\x87\xA3",		"\xF0\xE6" => "\xE9\x98\xBB",		"\xF0\xE7" => "\xE9\x9B\x95",		"\xF0\xE8" => "\xE9\xB3\xA5",		"\xF0\xE9" => "\xE6\x97\x8F",		"\xF0\xEA" => "\xE7\xB0\x87",		"\xF0\xEB" => "\xE8\xB6\xB3",		"\xF0\xEC" => "\xE9\x8F\x83",		"\xF0\xED" => "\xE5\xAD\x98",		"\xF0\xEE" => "\xE5\xB0\x8A",		"\xF0\xEF" => "\xE5\x8D\x92",		"\xF0\xF0" => "\xE6\x8B\x99",		"\xF0\xF1" => "\xE7\x8C\x9D",		"\xF0\xF2" => "\xE5\x80\xA7",		"\xF0\xF3" => "\xE5\xAE\x97",		"\xF0\xF4" => "\xE5\xBE\x9E",		"\xF0\xF5" => "\xE6\x82\xB0",		"\xF0\xF6" => "\xE6\x85\xAB",		"\xF0\xF7" => "\xE6\xA3\x95",		"\xF0\xF8" => "\xE6\xB7\x99",		"\xF0\xF9" => "\xE7\x90\xAE",		"\xF0\xFA" => "\xE7\xA8\xAE",		"\xF0\xFB" => "\xE7\xB5\x82",		"\xF0\xFC" => "\xE7\xB6\x9C",		"\xF0\xFD" => "\xE7\xB8\xB1",		"\xF0\xFE" => "\xE8\x85\xAB",		"\xF1\xA1" => "\xE8\xB8\xAA",		"\xF1\xA2" => "\xE8\xB8\xB5",		"\xF1\xA3" => "\xE9\x8D\xBE",		"\xF1\xA4" => "\xE9\x90\x98",		"\xF1\xA5" => "\xE4\xBD\x90",		"\xF1\xA6" => "\xE5\x9D\x90",		"\xF1\xA7" => "\xE5\xB7\xA6",		"\xF1\xA8" => "\xE5\xBA\xA7",		"\xF1\xA9" => "\xE6\x8C\xAB",		"\xF1\xAA" => "\xE7\xBD\xAA",		"\xF1\xAB" => "\xE4\xB8\xBB",		"\xF1\xAC" => "\xE4\xBD\x8F",		"\xF1\xAD" => "\xE4\xBE\x8F",		"\xF1\xAE" => "\xE5\x81\x9A",		"\xF1\xAF" => "\xE5\xA7\x9D",		"\xF1\xB0" => "\xE8\x83\x84",		"\xF1\xB1" => "\xE5\x91\xAA",		"\xF1\xB2" => "\xE5\x91\xA8",		"\xF1\xB3" => "\xE5\x97\xBE",		"\xF1\xB4" => "\xE5\xA5\x8F",		"\xF1\xB5" => "\xE5\xAE\x99",		"\xF1\xB6" => "\xE5\xB7\x9E",		"\xF1\xB7" => "\xE5\xBB\x9A",		"\xF1\xB8" => "\xE6\x99\x9D",		"\xF1\xB9" => "\xE6\x9C\xB1",		"\xF1\xBA" => "\xE6\x9F\xB1",		"\xF1\xBB" => "\xE6\xA0\xAA",		"\xF1\xBC" => "\xE6\xB3\xA8",		"\xF1\xBD" => "\xE6\xB4\xB2",		"\xF1\xBE" => "\xE6\xB9\x8A",		"\xF1\xBF" => "\xE6\xBE\x8D",		"\xF1\xC0" => "\xE7\x82\xB7",		"\xF1\xC1" => "\xE7\x8F\xA0",		"\xF1\xC2" => "\xE7\x96\x87",		"\xF1\xC3" => "\xE7\xB1\x8C",		"\xF1\xC4" => "\xE7\xB4\x82",		"\xF1\xC5" => "\xE7\xB4\xAC",		"\xF1\xC6" => "\xE7\xB6\xA2",		"\xF1\xC7" => "\xE8\x88\x9F",		"\xF1\xC8" => "\xE8\x9B\x9B",		"\xF1\xC9" => "\xE8\xA8\xBB",		"\xF1\xCA" => "\xE8\xAA\x85",		"\xF1\xCB" => "\xE8\xB5\xB0",		"\xF1\xCC" => "\xE8\xBA\x8A",		"\xF1\xCD" => "\xE8\xBC\xB3",		"\xF1\xCE" => "\xE9\x80\xB1",		"\xF1\xCF" => "\xE9\x85\x8E",		"\xF1\xD0" => "\xE9\x85\x92",		"\xF1\xD1" => "\xE9\x91\x84",		"\xF1\xD2" => "\xE9\xA7\x90",		"\xF1\xD3" => "\xE7\xAB\xB9",		"\xF1\xD4" => "\xE7\xB2\xA5",		"\xF1\xD5" => "\xE4\xBF\x8A",		"\xF1\xD6" => "\xE5\x84\x81",		"\xF1\xD7" => "\xE5\x87\x86",		"\xF1\xD8" => "\xE5\x9F\x88",		"\xF1\xD9" => "\xE5\xAF\xAF",		"\xF1\xDA" => "\xE5\xB3\xBB",		"\xF1\xDB" => "\xE6\x99\x99",		"\xF1\xDC" => "\xE6\xA8\xBD",		"\xF1\xDD" => "\xE6\xB5\x9A",		"\xF1\xDE" => "\xE6\xBA\x96",		"\xF1\xDF" => "\xE6\xBF\xAC",		"\xF1\xE0" => "\xE7\x84\x8C",		"\xF1\xE1" => "\xE7\x95\xAF",		"\xF1\xE2" => "\xE7\xAB\xA3",		"\xF1\xE3" => "\xE8\xA0\xA2",		"\xF1\xE4" => "\xE9\x80\xA1",		"\xF1\xE5" => "\xE9\x81\xB5",		"\xF1\xE6" => "\xE9\x9B\x8B",		"\xF1\xE7" => "\xE9\xA7\xBF",		"\xF1\xE8" => "\xE8\x8C\x81",		"\xF1\xE9" => "\xE4\xB8\xAD",		"\xF1\xEA" => "\xE4\xBB\xB2",		"\xF1\xEB" => "\xE8\xA1\x86",		"\xF1\xEC" => "\xE9\x87\x8D",		"\xF1\xED" => "\xE5\x8D\xBD",		"\xF1\xEE" => "\xE6\xAB\x9B",		"\xF1\xEF" => "\xE6\xA5\xAB",		"\xF1\xF0" => "\xE6\xB1\x81",		"\xF1\xF1" => "\xE8\x91\xBA",		"\xF1\xF2" => "\xE5\xA2\x9E",		"\xF1\xF3" => "\xE6\x86\x8E",		"\xF1\xF4" => "\xE6\x9B\xBE",		"\xF1\xF5" => "\xE6\x8B\xAF",		"\xF1\xF6" => "\xE7\x83\x9D",		"\xF1\xF7" => "\xE7\x94\x91",		"\xF1\xF8" => "\xE7\x97\x87",		"\xF1\xF9" => "\xE7\xB9\x92",		"\xF1\xFA" => "\xE8\x92\xB8",		"\xF1\xFB" => "\xE8\xAD\x89",		"\xF1\xFC" => "\xE8\xB4\x88",		"\xF1\xFD" => "\xE4\xB9\x8B",		"\xF1\xFE" => "\xE5\x8F\xAA",		"\xF2\xA1" => "\xE5\x92\xAB",		"\xF2\xA2" => "\xE5\x9C\xB0",		"\xF2\xA3" => "\xE5\x9D\x80",		"\xF2\xA4" => "\xE5\xBF\x97",		"\xF2\xA5" => "\xE6\x8C\x81",		"\xF2\xA6" => "\xE6\x8C\x87",		"\xF2\xA7" => "\xE6\x91\xAF",		"\xF2\xA8" => "\xE6\x94\xAF",		"\xF2\xA9" => "\xE6\x97\xA8",		"\xF2\xAA" => "\xE6\x99\xBA",		"\xF2\xAB" => "\xE6\x9E\x9D",		"\xF2\xAC" => "\xE6\x9E\xB3",		"\xF2\xAD" => "\xE6\xAD\xA2",		"\xF2\xAE" => "\xE6\xB1\xA0",		"\xF2\xAF" => "\xE6\xB2\x9A",		"\xF2\xB0" => "\xE6\xBC\xAC",		"\xF2\xB1" => "\xE7\x9F\xA5",		"\xF2\xB2" => "\xE7\xA0\xA5",		"\xF2\xB3" => "\xE7\xA5\x89",		"\xF2\xB4" => "\xE7\xA5\x97",		"\xF2\xB5" => "\xE7\xB4\x99",		"\xF2\xB6" => "\xE8\x82\xA2",		"\xF2\xB7" => "\xE8\x84\x82",		"\xF2\xB8" => "\xE8\x87\xB3",		"\xF2\xB9" => "\xE8\x8A\x9D",		"\xF2\xBA" => "\xE8\x8A\xB7",		"\xF2\xBB" => "\xE8\x9C\x98",		"\xF2\xBC" => "\xE8\xAA\x8C",		"\xF2\xBD" => "\xEF\xA7\xBC",		"\xF2\xBE" => "\xE8\xB4\x84",		"\xF2\xBF" => "\xE8\xB6\xBE",		"\xF2\xC0" => "\xE9\x81\xB2",		"\xF2\xC1" => "\xE7\x9B\xB4",		"\xF2\xC2" => "\xE7\xA8\x99",		"\xF2\xC3" => "\xE7\xA8\xB7",		"\xF2\xC4" => "\xE7\xB9\x94",		"\xF2\xC5" => "\xE8\x81\xB7",		"\xF2\xC6" => "\xE5\x94\x87",		"\xF2\xC7" => "\xE5\x97\x94",		"\xF2\xC8" => "\xE5\xA1\xB5",		"\xF2\xC9" => "\xE6\x8C\xAF",		"\xF2\xCA" => "\xE6\x90\xA2",		"\xF2\xCB" => "\xE6\x99\x89",		"\xF2\xCC" => "\xE6\x99\x8B",		"\xF2\xCD" => "\xE6\xA1\xAD",		"\xF2\xCE" => "\xE6\xA6\x9B",		"\xF2\xCF" => "\xE6\xAE\x84",		"\xF2\xD0" => "\xE6\xB4\xA5",		"\xF2\xD1" => "\xE6\xBA\xB1",		"\xF2\xD2" => "\xE7\x8F\x8D",		"\xF2\xD3" => "\xE7\x91\xA8",		"\xF2\xD4" => "\xE7\x92\xA1",		"\xF2\xD5" => "\xE7\x95\x9B",		"\xF2\xD6" => "\xE7\x96\xB9",		"\xF2\xD7" => "\xE7\x9B\xA1",		"\xF2\xD8" => "\xE7\x9C\x9E",		"\xF2\xD9" => "\xE7\x9E\x8B",		"\xF2\xDA" => "\xE7\xA7\xA6",		"\xF2\xDB" => "\xE7\xB8\x89",		"\xF2\xDC" => "\xE7\xB8\x9D",		"\xF2\xDD" => "\xE8\x87\xBB",		"\xF2\xDE" => "\xE8\x94\xAF",		"\xF2\xDF" => "\xE8\xA2\x97",		"\xF2\xE0" => "\xE8\xA8\xBA",		"\xF2\xE1" => "\xE8\xB3\x91",		"\xF2\xE2" => "\xE8\xBB\xAB",		"\xF2\xE3" => "\xE8\xBE\xB0",		"\xF2\xE4" => "\xE9\x80\xB2",		"\xF2\xE5" => "\xE9\x8E\xAD",		"\xF2\xE6" => "\xE9\x99\xA3",		"\xF2\xE7" => "\xE9\x99\xB3",		"\xF2\xE8" => "\xE9\x9C\x87",		"\xF2\xE9" => "\xE4\xBE\x84",		"\xF2\xEA" => "\xE5\x8F\xB1",		"\xF2\xEB" => "\xE5\xA7\xAA",		"\xF2\xEC" => "\xE5\xAB\x89",		"\xF2\xED" => "\xE5\xB8\x99",		"\xF2\xEE" => "\xE6\xA1\x8E",		"\xF2\xEF" => "\xE7\x93\x86",		"\xF2\xF0" => "\xE7\x96\xBE",		"\xF2\xF1" => "\xE7\xA7\xA9",		"\xF2\xF2" => "\xE7\xAA\x92",		"\xF2\xF3" => "\xE8\x86\xA3",		"\xF2\xF4" => "\xE8\x9B\xAD",		"\xF2\xF5" => "\xE8\xB3\xAA",		"\xF2\xF6" => "\xE8\xB7\x8C",		"\xF2\xF7" => "\xE8\xBF\xAD",		"\xF2\xF8" => "\xE6\x96\x9F",		"\xF2\xF9" => "\xE6\x9C\x95",		"\xF2\xFA" => "\xEF\xA7\xBD",		"\xF2\xFB" => "\xE5\x9F\xB7",		"\xF2\xFC" => "\xE6\xBD\x97",		"\xF2\xFD" => "\xE7\xB7\x9D",		"\xF2\xFE" => "\xE8\xBC\xAF",		"\xF3\xA1" => "\xE9\x8F\xB6",		"\xF3\xA2" => "\xE9\x9B\x86",		"\xF3\xA3" => "\xE5\xBE\xB5",		"\xF3\xA4" => "\xE6\x87\xB2",		"\xF3\xA5" => "\xE6\xBE\x84",		"\xF3\xA6" => "\xE4\xB8\x94",		"\xF3\xA7" => "\xE4\xBE\x98",		"\xF3\xA8" => "\xE5\x80\x9F",		"\xF3\xA9" => "\xE5\x8F\x89",		"\xF3\xAA" => "\xE5\x97\x9F",		"\xF3\xAB" => "\xE5\xB5\xAF",		"\xF3\xAC" => "\xE5\xB7\xAE",		"\xF3\xAD" => "\xE6\xAC\xA1",		"\xF3\xAE" => "\xE6\xAD\xA4",		"\xF3\xAF" => "\xE7\xA3\x8B",		"\xF3\xB0" => "\xE7\xAE\x9A",		"\xF3\xB1" => "\xEF\xA7\xBE",		"\xF3\xB2" => "\xE8\xB9\x89",		"\xF3\xB3" => "\xE8\xBB\x8A",		"\xF3\xB4" => "\xE9\x81\xAE",		"\xF3\xB5" => "\xE6\x8D\x89",		"\xF3\xB6" => "\xE6\x90\xBE",		"\xF3\xB7" => "\xE7\x9D\x80",		"\xF3\xB8" => "\xE7\xAA\x84",		"\xF3\xB9" => "\xE9\x8C\xAF",		"\xF3\xBA" => "\xE9\x91\xBF",		"\xF3\xBB" => "\xE9\xBD\xAA",		"\xF3\xBC" => "\xE6\x92\xB0",		"\xF3\xBD" => "\xE6\xBE\xAF",		"\xF3\xBE" => "\xE7\x87\xA6",		"\xF3\xBF" => "\xE7\x92\xA8",		"\xF3\xC0" => "\xE7\x93\x9A",		"\xF3\xC1" => "\xE7\xAB\x84",		"\xF3\xC2" => "\xE7\xB0\x92",		"\xF3\xC3" => "\xE7\xBA\x82",		"\xF3\xC4" => "\xE7\xB2\xB2",		"\xF3\xC5" => "\xE7\xBA\x98",		"\xF3\xC6" => "\xE8\xAE\x9A",		"\xF3\xC7" => "\xE8\xB4\x8A",		"\xF3\xC8" => "\xE9\x91\xBD",		"\xF3\xC9" => "\xE9\xA4\x90",		"\xF3\xCA" => "\xE9\xA5\x8C",		"\xF3\xCB" => "\xE5\x88\xB9",		"\xF3\xCC" => "\xE5\xAF\x9F",		"\xF3\xCD" => "\xE6\x93\xA6",		"\xF3\xCE" => "\xE6\x9C\xAD",		"\xF3\xCF" => "\xE7\xB4\xAE",		"\xF3\xD0" => "\xE5\x83\xAD",		"\xF3\xD1" => "\xE5\x8F\x83",		"\xF3\xD2" => "\xE5\xA1\xB9",		"\xF3\xD3" => "\xE6\x85\x98",		"\xF3\xD4" => "\xE6\x85\x99",		"\xF3\xD5" => "\xE6\x87\xBA",		"\xF3\xD6" => "\xE6\x96\xAC",		"\xF3\xD7" => "\xE7\xAB\x99",		"\xF3\xD8" => "\xE8\xAE\x92",		"\xF3\xD9" => "\xE8\xAE\x96",		"\xF3\xDA" => "\xE5\x80\x89",		"\xF3\xDB" => "\xE5\x80\xA1",		"\xF3\xDC" => "\xE5\x89\xB5",		"\xF3\xDD" => "\xE5\x94\xB1",		"\xF3\xDE" => "\xE5\xA8\xBC",		"\xF3\xDF" => "\xE5\xBB\xA0",		"\xF3\xE0" => "\xE5\xBD\xB0",		"\xF3\xE1" => "\xE6\x84\xB4",		"\xF3\xE2" => "\xE6\x95\x9E",		"\xF3\xE3" => "\xE6\x98\x8C",		"\xF3\xE4" => "\xE6\x98\xB6",		"\xF3\xE5" => "\xE6\x9A\xA2",		"\xF3\xE6" => "\xE6\xA7\x8D",		"\xF3\xE7" => "\xE6\xBB\x84",		"\xF3\xE8" => "\xE6\xBC\xB2",		"\xF3\xE9" => "\xE7\x8C\x96",		"\xF3\xEA" => "\xE7\x98\xA1",		"\xF3\xEB" => "\xE7\xAA\x93",		"\xF3\xEC" => "\xE8\x84\xB9",		"\xF3\xED" => "\xE8\x89\x99",		"\xF3\xEE" => "\xE8\x8F\x96",		"\xF3\xEF" => "\xE8\x92\xBC",		"\xF3\xF0" => "\xE5\x82\xB5",		"\xF3\xF1" => "\xE5\x9F\xB0",		"\xF3\xF2" => "\xE5\xAF\x80",		"\xF3\xF3" => "\xE5\xAF\xA8",		"\xF3\xF4" => "\xE5\xBD\xA9",		"\xF3\xF5" => "\xE6\x8E\xA1",		"\xF3\xF6" => "\xE7\xA0\xA6",		"\xF3\xF7" => "\xE7\xB6\xB5",		"\xF3\xF8" => "\xE8\x8F\x9C",		"\xF3\xF9" => "\xE8\x94\xA1",		"\xF3\xFA" => "\xE9\x87\x87",		"\xF3\xFB" => "\xE9\x87\xB5",		"\xF3\xFC" => "\xE5\x86\x8A",		"\xF3\xFD" => "\xE6\x9F\xB5",		"\xF3\xFE" => "\xE7\xAD\x96",		"\xF4\xA1" => "\xE8\xB2\xAC",		"\xF4\xA2" => "\xE5\x87\x84",		"\xF4\xA3" => "\xE5\xA6\xBB",		"\xF4\xA4" => "\xE6\x82\xBD",		"\xF4\xA5" => "\xE8\x99\x95",		"\xF4\xA6" => "\xE5\x80\x9C",		"\xF4\xA7" => "\xEF\xA7\xBF",		"\xF4\xA8" => "\xE5\x89\x94",		"\xF4\xA9" => "\xE5\xB0\xBA",		"\xF4\xAA" => "\xE6\x85\xBD",		"\xF4\xAB" => "\xE6\x88\x9A",		"\xF4\xAC" => "\xE6\x8B\x93",		"\xF4\xAD" => "\xE6\x93\xB2",		"\xF4\xAE" => "\xE6\x96\xA5",		"\xF4\xAF" => "\xE6\xBB\x8C",		"\xF4\xB0" => "\xE7\x98\xA0",		"\xF4\xB1" => "\xE8\x84\x8A",		"\xF4\xB2" => "\xE8\xB9\xA0",		"\xF4\xB3" => "\xE9\x99\x9F",		"\xF4\xB4" => "\xE9\x9A\xBB",		"\xF4\xB5" => "\xE4\xBB\x9F",		"\xF4\xB6" => "\xE5\x8D\x83",		"\xF4\xB7" => "\xE5\x96\x98",		"\xF4\xB8" => "\xE5\xA4\xA9",		"\xF4\xB9" => "\xE5\xB7\x9D",		"\xF4\xBA" => "\xE6\x93\x85",		"\xF4\xBB" => "\xE6\xB3\x89",		"\xF4\xBC" => "\xE6\xB7\xBA",		"\xF4\xBD" => "\xE7\x8E\x94",		"\xF4\xBE" => "\xE7\xA9\xBF",		"\xF4\xBF" => "\xE8\x88\x9B",		"\xF4\xC0" => "\xE8\x96\xA6",		"\xF4\xC1" => "\xE8\xB3\xA4",		"\xF4\xC2" => "\xE8\xB8\x90",		"\xF4\xC3" => "\xE9\x81\xB7",		"\xF4\xC4" => "\xE9\x87\xA7",		"\xF4\xC5" => "\xE9\x97\xA1",		"\xF4\xC6" => "\xE9\x98\xA1",		"\xF4\xC7" => "\xE9\x9F\x86",		"\xF4\xC8" => "\xE5\x87\xB8",		"\xF4\xC9" => "\xE5\x93\xB2",		"\xF4\xCA" => "\xE5\x96\x86",		"\xF4\xCB" => "\xE5\xBE\xB9",		"\xF4\xCC" => "\xE6\x92\xA4",		"\xF4\xCD" => "\xE6\xBE\x88",		"\xF4\xCE" => "\xE7\xB6\xB4",		"\xF4\xCF" => "\xE8\xBC\x9F",		"\xF4\xD0" => "\xE8\xBD\x8D",		"\xF4\xD1" => "\xE9\x90\xB5",		"\xF4\xD2" => "\xE5\x83\x89",		"\xF4\xD3" => "\xE5\xB0\x96",		"\xF4\xD4" => "\xE6\xB2\xBE",		"\xF4\xD5" => "\xE6\xB7\xBB",		"\xF4\xD6" => "\xE7\x94\x9B",		"\xF4\xD7" => "\xE7\x9E\xBB",		"\xF4\xD8" => "\xE7\xB0\xBD",		"\xF4\xD9" => "\xE7\xB1\xA4",		"\xF4\xDA" => "\xE8\xA9\xB9",		"\xF4\xDB" => "\xE8\xAB\x82",		"\xF4\xDC" => "\xE5\xA0\x9E",		"\xF4\xDD" => "\xE5\xA6\xBE",		"\xF4\xDE" => "\xE5\xB8\x96",		"\xF4\xDF" => "\xE6\x8D\xB7",		"\xF4\xE0" => "\xE7\x89\x92",		"\xF4\xE1" => "\xE7\x96\x8A",		"\xF4\xE2" => "\xE7\x9D\xAB",		"\xF4\xE3" => "\xE8\xAB\x9C",		"\xF4\xE4" => "\xE8\xB2\xBC",		"\xF4\xE5" => "\xE8\xBC\x92",		"\xF4\xE6" => "\xE5\xBB\xB3",		"\xF4\xE7" => "\xE6\x99\xB4",		"\xF4\xE8" => "\xE6\xB7\xB8",		"\xF4\xE9" => "\xE8\x81\xBD",		"\xF4\xEA" => "\xE8\x8F\x81",		"\xF4\xEB" => "\xE8\xAB\x8B",		"\xF4\xEC" => "\xE9\x9D\x91",		"\xF4\xED" => "\xE9\xAF\x96",		"\xF4\xEE" => "\xEF\xA8\x80",		"\xF4\xEF" => "\xE5\x89\x83",		"\xF4\xF0" => "\xE6\x9B\xBF",		"\xF4\xF1" => "\xE6\xB6\x95",		"\xF4\xF2" => "\xE6\xBB\xAF",		"\xF4\xF3" => "\xE7\xB7\xA0",		"\xF4\xF4" => "\xE8\xAB\xA6",		"\xF4\xF5" => "\xE9\x80\xAE",		"\xF4\xF6" => "\xE9\x81\x9E",		"\xF4\xF7" => "\xE9\xAB\x94",		"\xF4\xF8" => "\xE5\x88\x9D",		"\xF4\xF9" => "\xE5\x89\xBF",		"\xF4\xFA" => "\xE5\x93\xA8",		"\xF4\xFB" => "\xE6\x86\x94",		"\xF4\xFC" => "\xE6\x8A\x84",		"\xF4\xFD" => "\xE6\x8B\x9B",		"\xF4\xFE" => "\xE6\xA2\xA2",		"\xF5\xA1" => "\xE6\xA4\x92",		"\xF5\xA2" => "\xE6\xA5\x9A",		"\xF5\xA3" => "\xE6\xA8\xB5",		"\xF5\xA4" => "\xE7\x82\x92",		"\xF5\xA5" => "\xE7\x84\xA6",		"\xF5\xA6" => "\xE7\xA1\x9D",		"\xF5\xA7" => "\xE7\xA4\x81",		"\xF5\xA8" => "\xE7\xA4\x8E",		"\xF5\xA9" => "\xE7\xA7\x92",		"\xF5\xAA" => "\xE7\xA8\x8D",		"\xF5\xAB" => "\xE8\x82\x96",		"\xF5\xAC" => "\xE8\x89\xB8",		"\xF5\xAD" => "\xE8\x8B\x95",		"\xF5\xAE" => "\xE8\x8D\x89",		"\xF5\xAF" => "\xE8\x95\x89",		"\xF5\xB0" => "\xE8\xB2\x82",		"\xF5\xB1" => "\xE8\xB6\x85",		"\xF5\xB2" => "\xE9\x85\xA2",		"\xF5\xB3" => "\xE9\x86\x8B",		"\xF5\xB4" => "\xE9\x86\xAE",		"\xF5\xB5" => "\xE4\xBF\x83",		"\xF5\xB6" => "\xE5\x9B\x91",		"\xF5\xB7" => "\xE7\x87\xAD",		"\xF5\xB8" => "\xE7\x9F\x97",		"\xF5\xB9" => "\xE8\x9C\x80",		"\xF5\xBA" => "\xE8\xA7\xB8",		"\xF5\xBB" => "\xE5\xAF\xB8",		"\xF5\xBC" => "\xE5\xBF\x96",		"\xF5\xBD" => "\xE6\x9D\x91",		"\xF5\xBE" => "\xE9\x82\xA8",		"\xF5\xBF" => "\xE5\x8F\xA2",		"\xF5\xC0" => "\xE5\xA1\x9A",		"\xF5\xC1" => "\xE5\xAF\xB5",		"\xF5\xC2" => "\xE6\x82\xA4",		"\xF5\xC3" => "\xE6\x86\x81",		"\xF5\xC4" => "\xE6\x91\xA0",		"\xF5\xC5" => "\xE7\xB8\xBD",		"\xF5\xC6" => "\xE8\x81\xB0",		"\xF5\xC7" => "\xE8\x94\xA5",		"\xF5\xC8" => "\xE9\x8A\x83",		"\xF5\xC9" => "\xE6\x92\xAE",		"\xF5\xCA" => "\xE5\x82\xAC",		"\xF5\xCB" => "\xE5\xB4\x94",		"\xF5\xCC" => "\xE6\x9C\x80",		"\xF5\xCD" => "\xE5\xA2\x9C",		"\xF5\xCE" => "\xE6\x8A\xBD",		"\xF5\xCF" => "\xE6\x8E\xA8",		"\xF5\xD0" => "\xE6\xA4\x8E",		"\xF5\xD1" => "\xE6\xA5\xB8",		"\xF5\xD2" => "\xE6\xA8\x9E",		"\xF5\xD3" => "\xE6\xB9\xAB",		"\xF5\xD4" => "\xE7\x9A\xBA",		"\xF5\xD5" => "\xE7\xA7\x8B",		"\xF5\xD6" => "\xE8\x8A\xBB",		"\xF5\xD7" => "\xE8\x90\xA9",		"\xF5\xD8" => "\xE8\xAB\x8F",		"\xF5\xD9" => "\xE8\xB6\xA8",		"\xF5\xDA" => "\xE8\xBF\xBD",		"\xF5\xDB" => "\xE9\x84\x92",		"\xF5\xDC" => "\xE9\x85\x8B",		"\xF5\xDD" => "\xE9\x86\x9C",		"\xF5\xDE" => "\xE9\x8C\x90",		"\xF5\xDF" => "\xE9\x8C\x98",		"\xF5\xE0" => "\xE9\x8E\x9A",		"\xF5\xE1" => "\xE9\x9B\x9B",		"\xF5\xE2" => "\xE9\xA8\xB6",		"\xF5\xE3" => "\xE9\xB0\x8D",		"\xF5\xE4" => "\xE4\xB8\x91",		"\xF5\xE5" => "\xE7\x95\x9C",		"\xF5\xE6" => "\xE7\xA5\x9D",		"\xF5\xE7" => "\xE7\xAB\xBA",		"\xF5\xE8" => "\xE7\xAD\x91",		"\xF5\xE9" => "\xE7\xAF\x89",		"\xF5\xEA" => "\xE7\xB8\xAE",		"\xF5\xEB" => "\xE8\x93\x84",		"\xF5\xEC" => "\xE8\xB9\x99",		"\xF5\xED" => "\xE8\xB9\xB4",		"\xF5\xEE" => "\xE8\xBB\xB8",		"\xF5\xEF" => "\xE9\x80\x90",		"\xF5\xF0" => "\xE6\x98\xA5",		"\xF5\xF1" => "\xE6\xA4\xBF",		"\xF5\xF2" => "\xE7\x91\x83",		"\xF5\xF3" => "\xE5\x87\xBA",		"\xF5\xF4" => "\xE6\x9C\xAE",		"\xF5\xF5" => "\xE9\xBB\x9C",		"\xF5\xF6" => "\xE5\x85\x85",		"\xF5\xF7" => "\xE5\xBF\xA0",		"\xF5\xF8" => "\xE6\xB2\x96",		"\xF5\xF9" => "\xE8\x9F\xB2",		"\xF5\xFA" => "\xE8\xA1\x9D",		"\xF5\xFB" => "\xE8\xA1\xB7",		"\xF5\xFC" => "\xE6\x82\xB4",		"\xF5\xFD" => "\xE8\x86\xB5",		"\xF5\xFE" => "\xE8\x90\x83",		"\xF6\xA1" => "\xE8\xB4\x85",		"\xF6\xA2" => "\xE5\x8F\x96",		"\xF6\xA3" => "\xE5\x90\xB9",		"\xF6\xA4" => "\xE5\x98\xB4",		"\xF6\xA5" => "\xE5\xA8\xB6",		"\xF6\xA6" => "\xE5\xB0\xB1",		"\xF6\xA7" => "\xE7\x82\x8A",		"\xF6\xA8" => "\xE7\xBF\xA0",		"\xF6\xA9" => "\xE8\x81\x9A",		"\xF6\xAA" => "\xE8\x84\x86",		"\xF6\xAB" => "\xE8\x87\xAD",		"\xF6\xAC" => "\xE8\xB6\xA3",		"\xF6\xAD" => "\xE9\x86\x89",		"\xF6\xAE" => "\xE9\xA9\x9F",		"\xF6\xAF" => "\xE9\xB7\xB2",		"\xF6\xB0" => "\xE5\x81\xB4",		"\xF6\xB1" => "\xE4\xBB\x84",		"\xF6\xB2" => "\xE5\x8E\xA0",		"\xF6\xB3" => "\xE6\x83\xBB",		"\xF6\xB4" => "\xE6\xB8\xAC",		"\xF6\xB5" => "\xE5\xB1\xA4",		"\xF6\xB6" => "\xE4\xBE\x88",		"\xF6\xB7" => "\xE5\x80\xA4",		"\xF6\xB8" => "\xE5\x97\xA4",		"\xF6\xB9" => "\xE5\xB3\x99",		"\xF6\xBA" => "\xE5\xB9\x9F",		"\xF6\xBB" => "\xE6\x81\xA5",		"\xF6\xBC" => "\xE6\xA2\x94",		"\xF6\xBD" => "\xE6\xB2\xBB",		"\xF6\xBE" => "\xE6\xB7\x84",		"\xF6\xBF" => "\xE7\x86\xBE",		"\xF6\xC0" => "\xE7\x97\x94",		"\xF6\xC1" => "\xE7\x97\xB4",		"\xF6\xC2" => "\xE7\x99\xA1",		"\xF6\xC3" => "\xE7\xA8\x9A",		"\xF6\xC4" => "\xE7\xA9\x89",		"\xF6\xC5" => "\xE7\xB7\x87",		"\xF6\xC6" => "\xE7\xB7\xBB",		"\xF6\xC7" => "\xE7\xBD\xAE",		"\xF6\xC8" => "\xE8\x87\xB4",		"\xF6\xC9" => "\xE8\x9A\xA9",		"\xF6\xCA" => "\xE8\xBC\x9C",		"\xF6\xCB" => "\xE9\x9B\x89",		"\xF6\xCC" => "\xE9\xA6\xB3",		"\xF6\xCD" => "\xE9\xBD\x92",		"\xF6\xCE" => "\xE5\x89\x87",		"\xF6\xCF" => "\xE5\x8B\x85",		"\xF6\xD0" => "\xE9\xA3\xAD",		"\xF6\xD1" => "\xE8\xA6\xAA",		"\xF6\xD2" => "\xE4\xB8\x83",		"\xF6\xD3" => "\xE6\x9F\x92",		"\xF6\xD4" => "\xE6\xBC\x86",		"\xF6\xD5" => "\xE4\xBE\xB5",		"\xF6\xD6" => "\xE5\xAF\xA2",		"\xF6\xD7" => "\xE6\x9E\x95",		"\xF6\xD8" => "\xE6\xB2\x88",		"\xF6\xD9" => "\xE6\xB5\xB8",		"\xF6\xDA" => "\xE7\x90\x9B",		"\xF6\xDB" => "\xE7\xA0\xA7",		"\xF6\xDC" => "\xE9\x87\x9D",		"\xF6\xDD" => "\xE9\x8D\xBC",		"\xF6\xDE" => "\xE8\x9F\x84",		"\xF6\xDF" => "\xE7\xA7\xA4",		"\xF6\xE0" => "\xE7\xA8\xB1",		"\xF6\xE1" => "\xE5\xBF\xAB",		"\xF6\xE2" => "\xE4\xBB\x96",		"\xF6\xE3" => "\xE5\x92\xA4",		"\xF6\xE4" => "\xE5\x94\xBE",		"\xF6\xE5" => "\xE5\xA2\xAE",		"\xF6\xE6" => "\xE5\xA6\xA5",		"\xF6\xE7" => "\xE6\x83\xB0",		"\xF6\xE8" => "\xE6\x89\x93",		"\xF6\xE9" => "\xE6\x8B\x96",		"\xF6\xEA" => "\xE6\x9C\xB6",		"\xF6\xEB" => "\xE6\xA5\x95",		"\xF6\xEC" => "\xE8\x88\xB5",		"\xF6\xED" => "\xE9\x99\x80",		"\xF6\xEE" => "\xE9\xA6\xB1",		"\xF6\xEF" => "\xE9\xA7\x9D",		"\xF6\xF0" => "\xE5\x80\xAC",		"\xF6\xF1" => "\xE5\x8D\x93",		"\xF6\xF2" => "\xE5\x95\x84",		"\xF6\xF3" => "\xE5\x9D\xBC",		"\xF6\xF4" => "\xEF\xA8\x81",		"\xF6\xF5" => "\xE6\x89\x98",		"\xF6\xF6" => "\xEF\xA8\x82",		"\xF6\xF7" => "\xE6\x93\xA2",		"\xF6\xF8" => "\xE6\x99\xAB",		"\xF6\xF9" => "\xE6\x9F\x9D",		"\xF6\xFA" => "\xE6\xBF\x81",		"\xF6\xFB" => "\xE6\xBF\xAF",		"\xF6\xFC" => "\xE7\x90\xA2",		"\xF6\xFD" => "\xE7\x90\xB8",		"\xF6\xFE" => "\xE8\xA8\x97",		"\xF7\xA1" => "\xE9\x90\xB8",		"\xF7\xA2" => "\xE5\x91\x91",		"\xF7\xA3" => "\xE5\x98\x86",		"\xF7\xA4" => "\xE5\x9D\xA6",		"\xF7\xA5" => "\xE5\xBD\x88",		"\xF7\xA6" => "\xE6\x86\x9A",		"\xF7\xA7" => "\xE6\xAD\x8E",		"\xF7\xA8" => "\xE7\x81\x98",		"\xF7\xA9" => "\xE7\x82\xAD",		"\xF7\xAA" => "\xE7\xB6\xBB",		"\xF7\xAB" => "\xE8\xAA\x95",		"\xF7\xAC" => "\xE5\xA5\xAA",		"\xF7\xAD" => "\xE8\x84\xAB",		"\xF7\xAE" => "\xE6\x8E\xA2",		"\xF7\xAF" => "\xE7\x9C\x88",		"\xF7\xB0" => "\xE8\x80\xBD",		"\xF7\xB1" => "\xE8\xB2\xAA",		"\xF7\xB2" => "\xE5\xA1\x94",		"\xF7\xB3" => "\xE6\x90\xAD",		"\xF7\xB4" => "\xE6\xA6\xBB",		"\xF7\xB5" => "\xE5\xAE\x95",		"\xF7\xB6" => "\xE5\xB8\x91",		"\xF7\xB7" => "\xE6\xB9\xAF",		"\xF7\xB8" => "\xEF\xA8\x83",		"\xF7\xB9" => "\xE8\x95\xA9",		"\xF7\xBA" => "\xE5\x85\x8C",		"\xF7\xBB" => "\xE5\x8F\xB0",		"\xF7\xBC" => "\xE5\xA4\xAA",		"\xF7\xBD" => "\xE6\x80\xA0",		"\xF7\xBE" => "\xE6\x85\x8B",		"\xF7\xBF" => "\xE6\xAE\x86",		"\xF7\xC0" => "\xE6\xB1\xB0",		"\xF7\xC1" => "\xE6\xB3\xB0",		"\xF7\xC2" => "\xE7\xAC\x9E",		"\xF7\xC3" => "\xE8\x83\x8E",		"\xF7\xC4" => "\xE8\x8B\x94",		"\xF7\xC5" => "\xE8\xB7\x86",		"\xF7\xC6" => "\xE9\x82\xB0",		"\xF7\xC7" => "\xE9\xA2\xB1",		"\xF7\xC8" => "\xEF\xA8\x84",		"\xF7\xC9" => "\xE6\x93\x87",		"\xF7\xCA" => "\xE6\xBE\xA4",		"\xF7\xCB" => "\xE6\x92\x91",		"\xF7\xCC" => "\xE6\x94\x84",		"\xF7\xCD" => "\xE5\x85\x8E",		"\xF7\xCE" => "\xE5\x90\x90",		"\xF7\xCF" => "\xE5\x9C\x9F",		"\xF7\xD0" => "\xE8\xA8\x8E",		"\xF7\xD1" => "\xE6\x85\x9F",		"\xF7\xD2" => "\xE6\xA1\xB6",		"\xF7\xD3" => "\xEF\xA8\x85",		"\xF7\xD4" => "\xE7\x97\x9B",		"\xF7\xD5" => "\xE7\xAD\x92",		"\xF7\xD6" => "\xE7\xB5\xB1",		"\xF7\xD7" => "\xE9\x80\x9A",		"\xF7\xD8" => "\xE5\xA0\x86",		"\xF7\xD9" => "\xE6\xA7\x8C",		"\xF7\xDA" => "\xE8\x85\xBF",		"\xF7\xDB" => "\xE8\xA4\xAA",		"\xF7\xDC" => "\xE9\x80\x80",		"\xF7\xDD" => "\xE9\xA0\xB9",		"\xF7\xDE" => "\xE5\x81\xB8",		"\xF7\xDF" => "\xE5\xA5\x97",		"\xF7\xE0" => "\xE5\xA6\xAC",		"\xF7\xE1" => "\xE6\x8A\x95",		"\xF7\xE2" => "\xE9\x80\x8F",		"\xF7\xE3" => "\xE9\xAC\xAA",		"\xF7\xE4" => "\xE6\x85\x9D",		"\xF7\xE5" => "\xE7\x89\xB9",		"\xF7\xE6" => "\xE9\x97\x96",		"\xF7\xE7" => "\xE5\x9D\xA1",		"\xF7\xE8" => "\xE5\xA9\x86",		"\xF7\xE9" => "\xE5\xB7\xB4",		"\xF7\xEA" => "\xE6\x8A\x8A",		"\xF7\xEB" => "\xE6\x92\xAD",		"\xF7\xEC" => "\xE6\x93\xBA",		"\xF7\xED" => "\xE6\x9D\xB7",		"\xF7\xEE" => "\xE6\xB3\xA2",		"\xF7\xEF" => "\xE6\xB4\xBE",		"\xF7\xF0" => "\xE7\x88\xAC",		"\xF7\xF1" => "\xE7\x90\xB6",		"\xF7\xF2" => "\xE7\xA0\xB4",		"\xF7\xF3" => "\xE7\xBD\xB7",		"\xF7\xF4" => "\xE8\x8A\xAD",		"\xF7\xF5" => "\xE8\xB7\x9B",		"\xF7\xF6" => "\xE9\xA0\x97",		"\xF7\xF7" => "\xE5\x88\xA4",		"\xF7\xF8" => "\xE5\x9D\x82",		"\xF7\xF9" => "\xE6\x9D\xBF",		"\xF7\xFA" => "\xE7\x89\x88",		"\xF7\xFB" => "\xE7\x93\xA3",		"\xF7\xFC" => "\xE8\xB2\xA9",		"\xF7\xFD" => "\xE8\xBE\xA6",		"\xF7\xFE" => "\xE9\x88\x91",		"\xF8\xA1" => "\xE9\x98\xAA",		"\xF8\xA2" => "\xE5\x85\xAB",		"\xF8\xA3" => "\xE5\x8F\xAD",		"\xF8\xA4" => "\xE6\x8D\x8C",		"\xF8\xA5" => "\xE4\xBD\xA9",		"\xF8\xA6" => "\xE5\x94\x84",		"\xF8\xA7" => "\xE6\x82\x96",		"\xF8\xA8" => "\xE6\x95\x97",		"\xF8\xA9" => "\xE6\xB2\x9B",		"\xF8\xAA" => "\xE6\xB5\xBF",		"\xF8\xAB" => "\xE7\x89\x8C",		"\xF8\xAC" => "\xE7\x8B\xBD",		"\xF8\xAD" => "\xE7\xA8\x97",		"\xF8\xAE" => "\xE8\xA6\x87",		"\xF8\xAF" => "\xE8\xB2\x9D",		"\xF8\xB0" => "\xE5\xBD\xAD",		"\xF8\xB1" => "\xE6\xBE\x8E",		"\xF8\xB2" => "\xE7\x83\xB9",		"\xF8\xB3" => "\xE8\x86\xA8",		"\xF8\xB4" => "\xE6\x84\x8E",		"\xF8\xB5" => "\xE4\xBE\xBF",		"\xF8\xB6" => "\xE5\x81\x8F",		"\xF8\xB7" => "\xE6\x89\x81",		"\xF8\xB8" => "\xE7\x89\x87",		"\xF8\xB9" => "\xE7\xAF\x87",		"\xF8\xBA" => "\xE7\xB7\xA8",		"\xF8\xBB" => "\xE7\xBF\xA9",		"\xF8\xBC" => "\xE9\x81\x8D",		"\xF8\xBD" => "\xE9\x9E\xAD",		"\xF8\xBE" => "\xE9\xA8\x99",		"\xF8\xBF" => "\xE8\xB2\xB6",		"\xF8\xC0" => "\xE5\x9D\xAA",		"\xF8\xC1" => "\xE5\xB9\xB3",		"\xF8\xC2" => "\xE6\x9E\xB0",		"\xF8\xC3" => "\xE8\x90\x8D",		"\xF8\xC4" => "\xE8\xA9\x95",		"\xF8\xC5" => "\xE5\x90\xA0",		"\xF8\xC6" => "\xE5\xAC\x96",		"\xF8\xC7" => "\xE5\xB9\xA3",		"\xF8\xC8" => "\xE5\xBB\xA2",		"\xF8\xC9" => "\xE5\xBC\x8A",		"\xF8\xCA" => "\xE6\x96\x83",		"\xF8\xCB" => "\xE8\x82\xBA",		"\xF8\xCC" => "\xE8\x94\xBD",		"\xF8\xCD" => "\xE9\x96\x89",		"\xF8\xCE" => "\xE9\x99\x9B",		"\xF8\xCF" => "\xE4\xBD\x88",		"\xF8\xD0" => "\xE5\x8C\x85",		"\xF8\xD1" => "\xE5\x8C\x8D",		"\xF8\xD2" => "\xE5\x8C\x8F",		"\xF8\xD3" => "\xE5\x92\x86",		"\xF8\xD4" => "\xE5\x93\xBA",		"\xF8\xD5" => "\xE5\x9C\x83",		"\xF8\xD6" => "\xE5\xB8\x83",		"\xF8\xD7" => "\xE6\x80\x96",		"\xF8\xD8" => "\xE6\x8A\x9B",		"\xF8\xD9" => "\xE6\x8A\xB1",		"\xF8\xDA" => "\xE6\x8D\x95",		"\xF8\xDB" => "\xEF\xA8\x86",		"\xF8\xDC" => "\xE6\xB3\xA1",		"\xF8\xDD" => "\xE6\xB5\xA6",		"\xF8\xDE" => "\xE7\x96\xB1",		"\xF8\xDF" => "\xE7\xA0\xB2",		"\xF8\xE0" => "\xE8\x83\x9E",		"\xF8\xE1" => "\xE8\x84\xAF",		"\xF8\xE2" => "\xE8\x8B\x9E",		"\xF8\xE3" => "\xE8\x91\xA1",		"\xF8\xE4" => "\xE8\x92\xB2",		"\xF8\xE5" => "\xE8\xA2\x8D",		"\xF8\xE6" => "\xE8\xA4\x92",		"\xF8\xE7" => "\xE9\x80\x8B",		"\xF8\xE8" => "\xE9\x8B\xAA",		"\xF8\xE9" => "\xE9\xA3\xBD",		"\xF8\xEA" => "\xE9\xAE\x91",		"\xF8\xEB" => "\xE5\xB9\x85",		"\xF8\xEC" => "\xE6\x9A\xB4",		"\xF8\xED" => "\xE6\x9B\x9D",		"\xF8\xEE" => "\xE7\x80\x91",		"\xF8\xEF" => "\xE7\x88\x86",		"\xF8\xF0" => "\xEF\xA8\x87",		"\xF8\xF1" => "\xE4\xBF\xB5",		"\xF8\xF2" => "\xE5\x89\xBD",		"\xF8\xF3" => "\xE5\xBD\xAA",		"\xF8\xF4" => "\xE6\x85\x93",		"\xF8\xF5" => "\xE6\x9D\x93",		"\xF8\xF6" => "\xE6\xA8\x99",		"\xF8\xF7" => "\xE6\xBC\x82",		"\xF8\xF8" => "\xE7\x93\xA2",		"\xF8\xF9" => "\xE7\xA5\xA8",		"\xF8\xFA" => "\xE8\xA1\xA8",		"\xF8\xFB" => "\xE8\xB1\xB9",		"\xF8\xFC" => "\xE9\xA3\x87",		"\xF8\xFD" => "\xE9\xA3\x84",		"\xF8\xFE" => "\xE9\xA9\x83",		"\xF9\xA1" => "\xE5\x93\x81",		"\xF9\xA2" => "\xE7\xA8\x9F",		"\xF9\xA3" => "\xE6\xA5\x93",		"\xF9\xA4" => "\xE8\xAB\xB7",		"\xF9\xA5" => "\xE8\xB1\x8A",		"\xF9\xA6" => "\xE9\xA2\xA8",		"\xF9\xA7" => "\xE9\xA6\xAE",		"\xF9\xA8" => "\xE5\xBD\xBC",		"\xF9\xA9" => "\xE6\x8A\xAB",		"\xF9\xAA" => "\xE7\x96\xB2",		"\xF9\xAB" => "\xE7\x9A\xAE",		"\xF9\xAC" => "\xE8\xA2\xAB",		"\xF9\xAD" => "\xE9\x81\xBF",		"\xF9\xAE" => "\xE9\x99\x82",		"\xF9\xAF" => "\xE5\x8C\xB9",		"\xF9\xB0" => "\xE5\xBC\xBC",		"\xF9\xB1" => "\xE5\xBF\x85",		"\xF9\xB2" => "\xE6\xB3\x8C",		"\xF9\xB3" => "\xE7\x8F\x8C",		"\xF9\xB4" => "\xE7\x95\xA2",		"\xF9\xB5" => "\xE7\x96\x8B",		"\xF9\xB6" => "\xE7\xAD\x86",		"\xF9\xB7" => "\xE8\x8B\xBE",		"\xF9\xB8" => "\xE9\xA6\x9D",		"\xF9\xB9" => "\xE4\xB9\x8F",		"\xF9\xBA" => "\xE9\x80\xBC",		"\xF9\xBB" => "\xE4\xB8\x8B",		"\xF9\xBC" => "\xE4\xBD\x95",		"\xF9\xBD" => "\xE5\x8E\xA6",		"\xF9\xBE" => "\xE5\xA4\x8F",		"\xF9\xBF" => "\xE5\xBB\x88",		"\xF9\xC0" => "\xE6\x98\xB0",		"\xF9\xC1" => "\xE6\xB2\xB3",		"\xF9\xC2" => "\xE7\x91\x95",		"\xF9\xC3" => "\xE8\x8D\xB7",		"\xF9\xC4" => "\xE8\x9D\xA6",		"\xF9\xC5" => "\xE8\xB3\x80",		"\xF9\xC6" => "\xE9\x81\x90",		"\xF9\xC7" => "\xE9\x9C\x9E",		"\xF9\xC8" => "\xE9\xB0\x95",		"\xF9\xC9" => "\xE5\xA3\x91",		"\xF9\xCA" => "\xE5\xAD\xB8",		"\xF9\xCB" => "\xE8\x99\x90",		"\xF9\xCC" => "\xE8\xAC\x94",		"\xF9\xCD" => "\xE9\xB6\xB4",		"\xF9\xCE" => "\xE5\xAF\x92",		"\xF9\xCF" => "\xE6\x81\xA8",		"\xF9\xD0" => "\xE6\x82\x8D",		"\xF9\xD1" => "\xE6\x97\xB1",		"\xF9\xD2" => "\xE6\xB1\x97",		"\xF9\xD3" => "\xE6\xBC\xA2",		"\xF9\xD4" => "\xE6\xBE\xA3",		"\xF9\xD5" => "\xE7\x80\x9A",		"\xF9\xD6" => "\xE7\xBD\x95",		"\xF9\xD7" => "\xE7\xBF\xB0",		"\xF9\xD8" => "\xE9\x96\x91",		"\xF9\xD9" => "\xE9\x96\x92",		"\xF9\xDA" => "\xE9\x99\x90",		"\xF9\xDB" => "\xE9\x9F\x93",		"\xF9\xDC" => "\xE5\x89\xB2",		"\xF9\xDD" => "\xE8\xBD\x84",		"\xF9\xDE" => "\xE5\x87\xBD",		"\xF9\xDF" => "\xE5\x90\xAB",		"\xF9\xE0" => "\xE5\x92\xB8",		"\xF9\xE1" => "\xE5\x95\xA3",		"\xF9\xE2" => "\xE5\x96\x8A",		"\xF9\xE3" => "\xE6\xAA\xBB",		"\xF9\xE4" => "\xE6\xB6\xB5",		"\xF9\xE5" => "\xE7\xB7\x98",		"\xF9\xE6" => "\xE8\x89\xA6",		"\xF9\xE7" => "\xE9\x8A\x9C",		"\xF9\xE8" => "\xE9\x99\xB7",		"\xF9\xE9" => "\xE9\xB9\xB9",		"\xF9\xEA" => "\xE5\x90\x88",		"\xF9\xEB" => "\xE5\x93\x88",		"\xF9\xEC" => "\xE7\x9B\x92",		"\xF9\xED" => "\xE8\x9B\xA4",		"\xF9\xEE" => "\xE9\x96\xA4",		"\xF9\xEF" => "\xE9\x97\x94",		"\xF9\xF0" => "\xE9\x99\x9C",		"\xF9\xF1" => "\xE4\xBA\xA2",		"\xF9\xF2" => "\xE4\xBC\x89",		"\xF9\xF3" => "\xE5\xA7\xAE",		"\xF9\xF4" => "\xE5\xAB\xA6",		"\xF9\xF5" => "\xE5\xB7\xB7",		"\xF9\xF6" => "\xE6\x81\x92",		"\xF9\xF7" => "\xE6\x8A\x97",		"\xF9\xF8" => "\xE6\x9D\xAD",		"\xF9\xF9" => "\xE6\xA1\x81",		"\xF9\xFA" => "\xE6\xB2\x86",		"\xF9\xFB" => "\xE6\xB8\xAF",		"\xF9\xFC" => "\xE7\xBC\xB8",		"\xF9\xFD" => "\xE8\x82\x9B",		"\xF9\xFE" => "\xE8\x88\xAA",		"\xFA\xA1" => "\xEF\xA8\x88",		"\xFA\xA2" => "\xEF\xA8\x89",		"\xFA\xA3" => "\xE9\xA0\x85",		"\xFA\xA4" => "\xE4\xBA\xA5",		"\xFA\xA5" => "\xE5\x81\x95",		"\xFA\xA6" => "\xE5\x92\xB3",		"\xFA\xA7" => "\xE5\x9E\x93",		"\xFA\xA8" => "\xE5\xA5\x9A",		"\xFA\xA9" => "\xE5\xAD\xA9",		"\xFA\xAA" => "\xE5\xAE\xB3",		"\xFA\xAB" => "\xE6\x87\x88",		"\xFA\xAC" => "\xE6\xA5\xB7",		"\xFA\xAD" => "\xE6\xB5\xB7",		"\xFA\xAE" => "\xE7\x80\xA3",		"\xFA\xAF" => "\xE8\x9F\xB9",		"\xFA\xB0" => "\xE8\xA7\xA3",		"\xFA\xB1" => "\xE8\xA9\xB2",		"\xFA\xB2" => "\xE8\xAB\xA7",		"\xFA\xB3" => "\xE9\x82\x82",		"\xFA\xB4" => "\xE9\xA7\xAD",		"\xFA\xB5" => "\xE9\xAA\xB8",		"\xFA\xB6" => "\xE5\x8A\xBE",		"\xFA\xB7" => "\xE6\xA0\xB8",		"\xFA\xB8" => "\xE5\x80\x96",		"\xFA\xB9" => "\xE5\xB9\xB8",		"\xFA\xBA" => "\xE6\x9D\x8F",		"\xFA\xBB" => "\xE8\x8D\x87",		"\xFA\xBC" => "\xE8\xA1\x8C",		"\xFA\xBD" => "\xE4\xBA\xAB",		"\xFA\xBE" => "\xE5\x90\x91",		"\xFA\xBF" => "\xE5\x9A\xAE",		"\xFA\xC0" => "\xE7\x8F\xA6",		"\xFA\xC1" => "\xE9\x84\x95",		"\xFA\xC2" => "\xE9\x9F\xBF",		"\xFA\xC3" => "\xE9\xA4\x89",		"\xFA\xC4" => "\xE9\xA5\x97",		"\xFA\xC5" => "\xE9\xA6\x99",		"\xFA\xC6" => "\xE5\x99\x93",		"\xFA\xC7" => "\xE5\xA2\x9F",		"\xFA\xC8" => "\xE8\x99\x9B",		"\xFA\xC9" => "\xE8\xA8\xB1",		"\xFA\xCA" => "\xE6\x86\xB2",		"\xFA\xCB" => "\xE6\xAB\xB6",		"\xFA\xCC" => "\xE7\x8D\xBB",		"\xFA\xCD" => "\xE8\xBB\x92",		"\xFA\xCE" => "\xE6\xAD\x87",		"\xFA\xCF" => "\xE9\x9A\xAA",		"\xFA\xD0" => "\xE9\xA9\x97",		"\xFA\xD1" => "\xE5\xA5\x95",		"\xFA\xD2" => "\xE7\x88\x80",		"\xFA\xD3" => "\xE8\xB5\xAB",		"\xFA\xD4" => "\xE9\x9D\xA9",		"\xFA\xD5" => "\xE4\xBF\x94",		"\xFA\xD6" => "\xE5\xB3\xB4",		"\xFA\xD7" => "\xE5\xBC\xA6",		"\xFA\xD8" => "\xE6\x87\xB8",		"\xFA\xD9" => "\xE6\x99\x9B",		"\xFA\xDA" => "\xE6\xB3\xAB",		"\xFA\xDB" => "\xE7\x82\xAB",		"\xFA\xDC" => "\xE7\x8E\x84",		"\xFA\xDD" => "\xE7\x8E\xB9",		"\xFA\xDE" => "\xE7\x8F\xBE",		"\xFA\xDF" => "\xE7\x9C\xA9",		"\xFA\xE0" => "\xE7\x9D\x8D",		"\xFA\xE1" => "\xE7\xB5\x83",		"\xFA\xE2" => "\xE7\xB5\xA2",		"\xFA\xE3" => "\xE7\xB8\xA3",		"\xFA\xE4" => "\xE8\x88\xB7",		"\xFA\xE5" => "\xE8\xA1\x92",		"\xFA\xE6" => "\xEF\xA8\x8A",		"\xFA\xE7" => "\xE8\xB3\xA2",		"\xFA\xE8" => "\xE9\x89\x89",		"\xFA\xE9" => "\xE9\xA1\xAF",		"\xFA\xEA" => "\xE5\xAD\x91",		"\xFA\xEB" => "\xE7\xA9\xB4",		"\xFA\xEC" => "\xE8\xA1\x80",		"\xFA\xED" => "\xE9\xA0\x81",		"\xFA\xEE" => "\xE5\xAB\x8C",		"\xFA\xEF" => "\xE4\xBF\xA0",		"\xFA\xF0" => "\xE5\x8D\x94",		"\xFA\xF1" => "\xE5\xA4\xBE",		"\xFA\xF2" => "\xE5\xB3\xBD",		"\xFA\xF3" => "\xE6\x8C\xBE",		"\xFA\xF4" => "\xE6\xB5\xB9",		"\xFA\xF5" => "\xE7\x8B\xB9",		"\xFA\xF6" => "\xE8\x84\x85",		"\xFA\xF7" => "\xE8\x84\x87",		"\xFA\xF8" => "\xE8\x8E\xA2",		"\xFA\xF9" => "\xE9\x8B\x8F",		"\xFA\xFA" => "\xE9\xA0\xB0",		"\xFA\xFB" => "\xE4\xBA\xA8",		"\xFA\xFC" => "\xE5\x85\x84",		"\xFA\xFD" => "\xE5\x88\x91",		"\xFA\xFE" => "\xE5\x9E\x8B",		"\xFB\xA1" => "\xE5\xBD\xA2",		"\xFB\xA2" => "\xE6\xB3\x82",		"\xFB\xA3" => "\xE6\xBB\x8E",		"\xFB\xA4" => "\xE7\x80\x85",		"\xFB\xA5" => "\xE7\x81\x90",		"\xFB\xA6" => "\xE7\x82\xAF",		"\xFB\xA7" => "\xE7\x86\x92",		"\xFB\xA8" => "\xE7\x8F\xA9",		"\xFB\xA9" => "\xE7\x91\xA9",		"\xFB\xAA" => "\xE8\x8D\x8A",		"\xFB\xAB" => "\xE8\x9E\xA2",		"\xFB\xAC" => "\xE8\xA1\xA1",		"\xFB\xAD" => "\xE9\x80\x88",		"\xFB\xAE" => "\xE9\x82\xA2",		"\xFB\xAF" => "\xE9\x8E\xA3",		"\xFB\xB0" => "\xE9\xA6\xA8",		"\xFB\xB1" => "\xE5\x85\xAE",		"\xFB\xB2" => "\xE5\xBD\x97",		"\xFB\xB3" => "\xE6\x83\xA0",		"\xFB\xB4" => "\xE6\x85\xA7",		"\xFB\xB5" => "\xE6\x9A\xB3",		"\xFB\xB6" => "\xE8\x95\x99",		"\xFB\xB7" => "\xE8\xB9\x8A",		"\xFB\xB8" => "\xE9\x86\xAF",		"\xFB\xB9" => "\xE9\x9E\x8B",		"\xFB\xBA" => "\xE4\xB9\x8E",		"\xFB\xBB" => "\xE4\xBA\x92",		"\xFB\xBC" => "\xE5\x91\xBC",		"\xFB\xBD" => "\xE5\xA3\x95",		"\xFB\xBE" => "\xE5\xA3\xBA",		"\xFB\xBF" => "\xE5\xA5\xBD",		"\xFB\xC0" => "\xE5\xB2\xB5",		"\xFB\xC1" => "\xE5\xBC\xA7",		"\xFB\xC2" => "\xE6\x88\xB6",		"\xFB\xC3" => "\xE6\x89\x88",		"\xFB\xC4" => "\xE6\x98\x8A",		"\xFB\xC5" => "\xE6\x99\xA7",		"\xFB\xC6" => "\xE6\xAF\xAB",		"\xFB\xC7" => "\xE6\xB5\xA9",		"\xFB\xC8" => "\xE6\xB7\x8F",		"\xFB\xC9" => "\xE6\xB9\x96",		"\xFB\xCA" => "\xE6\xBB\xB8",		"\xFB\xCB" => "\xE6\xBE\x94",		"\xFB\xCC" => "\xE6\xBF\xA0",		"\xFB\xCD" => "\xE6\xBF\xA9",		"\xFB\xCE" => "\xE7\x81\x9D",		"\xFB\xCF" => "\xE7\x8B\x90",		"\xFB\xD0" => "\xE7\x90\xA5",		"\xFB\xD1" => "\xE7\x91\x9A",		"\xFB\xD2" => "\xE7\x93\xA0",		"\xFB\xD3" => "\xE7\x9A\x93",		"\xFB\xD4" => "\xE7\xA5\x9C",		"\xFB\xD5" => "\xE7\xB3\x8A",		"\xFB\xD6" => "\xE7\xB8\x9E",		"\xFB\xD7" => "\xE8\x83\xA1",		"\xFB\xD8" => "\xE8\x8A\xA6",		"\xFB\xD9" => "\xE8\x91\xAB",		"\xFB\xDA" => "\xE8\x92\xBF",		"\xFB\xDB" => "\xE8\x99\x8E",		"\xFB\xDC" => "\xE8\x99\x9F",		"\xFB\xDD" => "\xE8\x9D\xB4",		"\xFB\xDE" => "\xE8\xAD\xB7",		"\xFB\xDF" => "\xE8\xB1\xAA",		"\xFB\xE0" => "\xE9\x8E\xAC",		"\xFB\xE1" => "\xE9\xA0\x80",		"\xFB\xE2" => "\xE9\xA1\xA5",		"\xFB\xE3" => "\xE6\x83\x91",		"\xFB\xE4" => "\xE6\x88\x96",		"\xFB\xE5" => "\xE9\x85\xB7",		"\xFB\xE6" => "\xE5\xA9\x9A",		"\xFB\xE7" => "\xE6\x98\x8F",		"\xFB\xE8" => "\xE6\xB7\xB7",		"\xFB\xE9" => "\xE6\xB8\xBE",		"\xFB\xEA" => "\xE7\x90\xBF",		"\xFB\xEB" => "\xE9\xAD\x82",		"\xFB\xEC" => "\xE5\xBF\xBD",		"\xFB\xED" => "\xE6\x83\x9A",		"\xFB\xEE" => "\xE7\xAC\x8F",		"\xFB\xEF" => "\xE5\x93\x84",		"\xFB\xF0" => "\xE5\xBC\x98",		"\xFB\xF1" => "\xE6\xB1\x9E",		"\xFB\xF2" => "\xE6\xB3\x93",		"\xFB\xF3" => "\xE6\xB4\xAA",		"\xFB\xF4" => "\xE7\x83\x98",		"\xFB\xF5" => "\xE7\xB4\x85",		"\xFB\xF6" => "\xE8\x99\xB9",		"\xFB\xF7" => "\xE8\xA8\x8C",		"\xFB\xF8" => "\xE9\xB4\xBB",		"\xFB\xF9" => "\xE5\x8C\x96",		"\xFB\xFA" => "\xE5\x92\x8C",		"\xFB\xFB" => "\xE5\xAC\x85",		"\xFB\xFC" => "\xE6\xA8\xBA",		"\xFB\xFD" => "\xE7\x81\xAB",		"\xFB\xFE" => "\xE7\x95\xB5",		"\xFC\xA1" => "\xE7\xA6\x8D",		"\xFC\xA2" => "\xE7\xA6\xBE",		"\xFC\xA3" => "\xE8\x8A\xB1",		"\xFC\xA4" => "\xE8\x8F\xAF",		"\xFC\xA5" => "\xE8\xA9\xB1",		"\xFC\xA6" => "\xE8\xAD\x81",		"\xFC\xA7" => "\xE8\xB2\xA8",		"\xFC\xA8" => "\xE9\x9D\xB4",		"\xFC\xA9" => "\xEF\xA8\x8B",		"\xFC\xAA" => "\xE6\x93\xB4",		"\xFC\xAB" => "\xE6\x94\xAB",		"\xFC\xAC" => "\xE7\xA2\xBA",		"\xFC\xAD" => "\xE7\xA2\xBB",		"\xFC\xAE" => "\xE7\xA9\xAB",		"\xFC\xAF" => "\xE4\xB8\xB8",		"\xFC\xB0" => "\xE5\x96\x9A",		"\xFC\xB1" => "\xE5\xA5\x90",		"\xFC\xB2" => "\xE5\xAE\xA6",		"\xFC\xB3" => "\xE5\xB9\xBB",		"\xFC\xB4" => "\xE6\x82\xA3",		"\xFC\xB5" => "\xE6\x8F\x9B",		"\xFC\xB6" => "\xE6\xAD\xA1",		"\xFC\xB7" => "\xE6\x99\xA5",		"\xFC\xB8" => "\xE6\xA1\x93",		"\xFC\xB9" => "\xE6\xB8\x99",		"\xFC\xBA" => "\xE7\x85\xA5",		"\xFC\xBB" => "\xE7\x92\xB0",		"\xFC\xBC" => "\xE7\xB4\x88",		"\xFC\xBD" => "\xE9\x82\x84",		"\xFC\xBE" => "\xE9\xA9\xA9",		"\xFC\xBF" => "\xE9\xB0\xA5",		"\xFC\xC0" => "\xE6\xB4\xBB",		"\xFC\xC1" => "\xE6\xBB\x91",		"\xFC\xC2" => "\xE7\x8C\xBE",		"\xFC\xC3" => "\xE8\xB1\x81",		"\xFC\xC4" => "\xE9\x97\x8A",		"\xFC\xC5" => "\xE5\x87\xB0",		"\xFC\xC6" => "\xE5\xB9\x8C",		"\xFC\xC7" => "\xE5\xBE\xA8",		"\xFC\xC8" => "\xE6\x81\x8D",		"\xFC\xC9" => "\xE6\x83\xB6",		"\xFC\xCA" => "\xE6\x84\xB0",		"\xFC\xCB" => "\xE6\x85\x8C",		"\xFC\xCC" => "\xE6\x99\x83",		"\xFC\xCD" => "\xE6\x99\x84",		"\xFC\xCE" => "\xE6\xA6\xA5",		"\xFC\xCF" => "\xE6\xB3\x81",		"\xFC\xD0" => "\xE6\xB9\x9F",		"\xFC\xD1" => "\xE6\xBB\x89",		"\xFC\xD2" => "\xE6\xBD\xA2",		"\xFC\xD3" => "\xE7\x85\x8C",		"\xFC\xD4" => "\xE7\x92\x9C",		"\xFC\xD5" => "\xE7\x9A\x87",		"\xFC\xD6" => "\xE7\xAF\x81",		"\xFC\xD7" => "\xE7\xB0\xA7",		"\xFC\xD8" => "\xE8\x8D\x92",		"\xFC\xD9" => "\xE8\x9D\x97",		"\xFC\xDA" => "\xE9\x81\x91",		"\xFC\xDB" => "\xE9\x9A\x8D",		"\xFC\xDC" => "\xE9\xBB\x83",		"\xFC\xDD" => "\xE5\x8C\xAF",		"\xFC\xDE" => "\xE5\x9B\x9E",		"\xFC\xDF" => "\xE5\xBB\xBB",		"\xFC\xE0" => "\xE5\xBE\x8A",		"\xFC\xE1" => "\xE6\x81\xA2",		"\xFC\xE2" => "\xE6\x82\x94",		"\xFC\xE3" => "\xE6\x87\xB7",		"\xFC\xE4" => "\xE6\x99\xA6",		"\xFC\xE5" => "\xE6\x9C\x83",		"\xFC\xE6" => "\xE6\xAA\x9C",		"\xFC\xE7" => "\xE6\xB7\xAE",		"\xFC\xE8" => "\xE6\xBE\xAE",		"\xFC\xE9" => "\xE7\x81\xB0",		"\xFC\xEA" => "\xE7\x8D\xAA",		"\xFC\xEB" => "\xE7\xB9\xAA",		"\xFC\xEC" => "\xE8\x86\xBE",		"\xFC\xED" => "\xE8\x8C\xB4",		"\xFC\xEE" => "\xE8\x9B\x94",		"\xFC\xEF" => "\xE8\xAA\xA8",		"\xFC\xF0" => "\xE8\xB3\x84",		"\xFC\xF1" => "\xE5\x8A\x83",		"\xFC\xF2" => "\xE7\x8D\xB2",		"\xFC\xF3" => "\xE5\xAE\x96",		"\xFC\xF4" => "\xE6\xA9\xAB",		"\xFC\xF5" => "\xE9\x90\x84",		"\xFC\xF6" => "\xE5\x93\xAE",		"\xFC\xF7" => "\xE5\x9A\x86",		"\xFC\xF8" => "\xE5\xAD\x9D",		"\xFC\xF9" => "\xE6\x95\x88",		"\xFC\xFA" => "\xE6\x96\x85",		"\xFC\xFB" => "\xE6\x9B\x89",		"\xFC\xFC" => "\xE6\xA2\x9F",		"\xFC\xFD" => "\xE6\xB6\x8D",		"\xFC\xFE" => "\xE6\xB7\x86",		"\xFD\xA1" => "\xE7\x88\xBB",		"\xFD\xA2" => "\xE8\x82\xB4",		"\xFD\xA3" => "\xE9\x85\xB5",		"\xFD\xA4" => "\xE9\xA9\x8D",		"\xFD\xA5" => "\xE4\xBE\xAF",		"\xFD\xA6" => "\xE5\x80\x99",		"\xFD\xA7" => "\xE5\x8E\x9A",		"\xFD\xA8" => "\xE5\x90\x8E",		"\xFD\xA9" => "\xE5\x90\xBC",		"\xFD\xAA" => "\xE5\x96\x89",		"\xFD\xAB" => "\xE5\x97\x85",		"\xFD\xAC" => "\xE5\xB8\xBF",		"\xFD\xAD" => "\xE5\xBE\x8C",		"\xFD\xAE" => "\xE6\x9C\xBD",		"\xFD\xAF" => "\xE7\x85\xA6",		"\xFD\xB0" => "\xE7\x8F\x9D",		"\xFD\xB1" => "\xE9\x80\x85",		"\xFD\xB2" => "\xE5\x8B\x9B",		"\xFD\xB3" => "\xE5\x8B\xB3",		"\xFD\xB4" => "\xE5\xA1\xA4",		"\xFD\xB5" => "\xE5\xA3\x8E",		"\xFD\xB6" => "\xE7\x84\x84",		"\xFD\xB7" => "\xE7\x86\x8F",		"\xFD\xB8" => "\xE7\x87\xBB",		"\xFD\xB9" => "\xE8\x96\xB0",		"\xFD\xBA" => "\xE8\xA8\x93",		"\xFD\xBB" => "\xE6\x9A\x88",		"\xFD\xBC" => "\xE8\x96\xA8",		"\xFD\xBD" => "\xE5\x96\xA7",		"\xFD\xBE" => "\xE6\x9A\x84",		"\xFD\xBF" => "\xE7\x85\x8A",		"\xFD\xC0" => "\xE8\x90\xB1",		"\xFD\xC1" => "\xE5\x8D\x89",		"\xFD\xC2" => "\xE5\x96\x99",		"\xFD\xC3" => "\xE6\xAF\x81",		"\xFD\xC4" => "\xE5\xBD\x99",		"\xFD\xC5" => "\xE5\xBE\xBD",		"\xFD\xC6" => "\xE6\x8F\xAE",		"\xFD\xC7" => "\xE6\x9A\x89",		"\xFD\xC8" => "\xE7\x85\x87",		"\xFD\xC9" => "\xE8\xAB\xB1",		"\xFD\xCA" => "\xE8\xBC\x9D",		"\xFD\xCB" => "\xE9\xBA\xBE",		"\xFD\xCC" => "\xE4\xBC\x91",		"\xFD\xCD" => "\xE6\x90\xBA",		"\xFD\xCE" => "\xE7\x83\x8B",		"\xFD\xCF" => "\xE7\x95\xA6",		"\xFD\xD0" => "\xE8\x99\xA7",		"\xFD\xD1" => "\xE6\x81\xA4",		"\xFD\xD2" => "\xE8\xAD\x8E",		"\xFD\xD3" => "\xE9\xB7\xB8",		"\xFD\xD4" => "\xE5\x85\x87",		"\xFD\xD5" => "\xE5\x87\xB6",		"\xFD\xD6" => "\xE5\x8C\x88",		"\xFD\xD7" => "\xE6\xB4\xB6",		"\xFD\xD8" => "\xE8\x83\xB8",		"\xFD\xD9" => "\xE9\xBB\x91",		"\xFD\xDA" => "\xE6\x98\x95",		"\xFD\xDB" => "\xE6\xAC\xA3",		"\xFD\xDC" => "\xE7\x82\x98",		"\xFD\xDD" => "\xE7\x97\x95",		"\xFD\xDE" => "\xE5\x90\x83",		"\xFD\xDF" => "\xE5\xB1\xB9",		"\xFD\xE0" => "\xE7\xB4\x87",		"\xFD\xE1" => "\xE8\xA8\x96",		"\xFD\xE2" => "\xE6\xAC\xA0",		"\xFD\xE3" => "\xE6\xAC\xBD",		"\xFD\xE4" => "\xE6\xAD\x86",		"\xFD\xE5" => "\xE5\x90\xB8",		"\xFD\xE6" => "\xE6\x81\xB0",		"\xFD\xE7" => "\xE6\xB4\xBD",		"\xFD\xE8" => "\xE7\xBF\x95",		"\xFD\xE9" => "\xE8\x88\x88",		"\xFD\xEA" => "\xE5\x83\x96",		"\xFD\xEB" => "\xE5\x87\x9E",		"\xFD\xEC" => "\xE5\x96\x9C",		"\xFD\xED" => "\xE5\x99\xAB",		"\xFD\xEE" => "\xE5\x9B\x8D",		"\xFD\xEF" => "\xE5\xA7\xAC",		"\xFD\xF0" => "\xE5\xAC\x89",		"\xFD\xF1" => "\xE5\xB8\x8C",		"\xFD\xF2" => "\xE6\x86\x99",		"\xFD\xF3" => "\xE6\x86\x98",		"\xFD\xF4" => "\xE6\x88\xB1",		"\xFD\xF5" => "\xE6\x99\x9E",		"\xFD\xF6" => "\xE6\x9B\xA6",		"\xFD\xF7" => "\xE7\x86\x99",		"\xFD\xF8" => "\xE7\x86\xB9",		"\xFD\xF9" => "\xE7\x86\xBA",		"\xFD\xFA" => "\xE7\x8A\xA7",		"\xFD\xFB" => "\xE7\xA6\xA7",		"\xFD\xFC" => "\xE7\xA8\x80",		"\xFD\xFD" => "\xE7\xBE\xB2",		"\xFD\xFE" => "\xE8\xA9\xB0",	);	return strtr($string, $transform);}function big5($string){	static $transform = array(		"\xA1\x40" => "\xE3\x80\x80",		"\xA1\x41" => "\xEF\xBC\x8C",		"\xA1\x42" => "\xE3\x80\x81",		"\xA1\x43" => "\xE3\x80\x82",		"\xA1\x44" => "\xEF\xBC\x8E",		"\xA1\x45" => "\xE2\x80\xA2",		"\xA1\x46" => "\xEF\xBC\x9B",		"\xA1\x47" => "\xEF\xBC\x9A",		"\xA1\x48" => "\xEF\xBC\x9F",		"\xA1\x49" => "\xEF\xBC\x81",		"\xA1\x4A" => "\xEF\xB8\xB0",		"\xA1\x4B" => "\xE2\x80\xA6",		"\xA1\x4C" => "\xE2\x80\xA5",		"\xA1\x4D" => "\xEF\xB9\x90",		"\xA1\x4E" => "\xEF\xBD\xA4",		"\xA1\x4F" => "\xEF\xB9\x92",		"\xA1\x50" => "\xC2\xB7",		"\xA1\x51" => "\xEF\xB9\x94",		"\xA1\x52" => "\xEF\xB9\x95",		"\xA1\x53" => "\xEF\xB9\x96",		"\xA1\x54" => "\xEF\xB9\x97",		"\xA1\x55" => "\xEF\xBD\x9C",		"\xA1\x56" => "\xE2\x80\x93",		"\xA1\x57" => "\xEF\xB8\xB1",		"\xA1\x58" => "\xE2\x80\x94",		"\xA1\x59" => "\xEF\xB8\xB3",		"\xA1\x5A" => "\xEF\xBF\xBD",		"\xA1\x5B" => "\xEF\xB8\xB4",		"\xA1\x5C" => "\xEF\xB9\x8F",		"\xA1\x5D" => "\xEF\xBC\x88",		"\xA1\x5E" => "\xEF\xBC\x89",		"\xA1\x5F" => "\xEF\xB8\xB5",		"\xA1\x60" => "\xEF\xB8\xB6",		"\xA1\x61" => "\xEF\xBD\x9B",		"\xA1\x62" => "\xEF\xBD\x9D",		"\xA1\x63" => "\xEF\xB8\xB7",		"\xA1\x64" => "\xEF\xB8\xB8",		"\xA1\x65" => "\xE3\x80\x94",		"\xA1\x66" => "\xE3\x80\x95",		"\xA1\x67" => "\xEF\xB8\xB9",		"\xA1\x68" => "\xEF\xB8\xBA",		"\xA1\x69" => "\xE3\x80\x90",		"\xA1\x6A" => "\xE3\x80\x91",		"\xA1\x6B" => "\xEF\xB8\xBB",		"\xA1\x6C" => "\xEF\xB8\xBC",		"\xA1\x6D" => "\xE3\x80\x8A",		"\xA1\x6E" => "\xE3\x80\x8B",		"\xA1\x6F" => "\xEF\xB8\xBD",		"\xA1\x70" => "\xEF\xB8\xBE",		"\xA1\x71" => "\xE3\x80\x88",		"\xA1\x72" => "\xE3\x80\x89",		"\xA1\x73" => "\xEF\xB8\xBF",		"\xA1\x74" => "\xEF\xB9\x80",		"\xA1\x75" => "\xE3\x80\x8C",		"\xA1\x76" => "\xE3\x80\x8D",		"\xA1\x77" => "\xEF\xB9\x81",		"\xA1\x78" => "\xEF\xB9\x82",		"\xA1\x79" => "\xE3\x80\x8E",		"\xA1\x7A" => "\xE3\x80\x8F",		"\xA1\x7B" => "\xEF\xB9\x83",		"\xA1\x7C" => "\xEF\xB9\x84",		"\xA1\x7D" => "\xEF\xB9\x99",		"\xA1\x7E" => "\xEF\xB9\x9A",		"\xA1\xA1" => "\xEF\xB9\x9B",		"\xA1\xA2" => "\xEF\xB9\x9C",		"\xA1\xA3" => "\xEF\xB9\x9D",		"\xA1\xA4" => "\xEF\xB9\x9E",		"\xA1\xA5" => "\xE2\x80\x98",		"\xA1\xA6" => "\xE2\x80\x99",		"\xA1\xA7" => "\xE2\x80\x9C",		"\xA1\xA8" => "\xE2\x80\x9D",		"\xA1\xA9" => "\xE3\x80\x9D",		"\xA1\xAA" => "\xE3\x80\x9E",		"\xA1\xAB" => "\xE2\x80\xB5",		"\xA1\xAC" => "\xE2\x80\xB2",		"\xA1\xAD" => "\xEF\xBC\x83",		"\xA1\xAE" => "\xEF\xBC\x86",		"\xA1\xAF" => "\xEF\xBC\x8A",		"\xA1\xB0" => "\xE2\x80\xBB",		"\xA1\xB1" => "\xC2\xA7",		"\xA1\xB2" => "\xE3\x80\x83",		"\xA1\xB3" => "\xE2\x97\x8B",		"\xA1\xB4" => "\xE2\x97\x8F",		"\xA1\xB5" => "\xE2\x96\xB3",		"\xA1\xB6" => "\xE2\x96\xB2",		"\xA1\xB7" => "\xE2\x97\x8E",		"\xA1\xB8" => "\xE2\x98\x86",		"\xA1\xB9" => "\xE2\x98\x85",		"\xA1\xBA" => "\xE2\x97\x87",		"\xA1\xBB" => "\xE2\x97\x86",		"\xA1\xBC" => "\xE2\x96\xA1",		"\xA1\xBD" => "\xE2\x96\xA0",		"\xA1\xBE" => "\xE2\x96\xBD",		"\xA1\xBF" => "\xE2\x96\xBC",		"\xA1\xC0" => "\xE3\x8A\xA3",		"\xA1\xC1" => "\xE2\x84\x85",		"\xA1\xC2" => "\xE2\x80\xBE",		"\xA1\xC3" => "\xEF\xBF\xBD",		"\xA1\xC4" => "\xEF\xBC\xBF",		"\xA1\xC5" => "\xEF\xBF\xBD",		"\xA1\xC6" => "\xEF\xB9\x89",		"\xA1\xC7" => "\xEF\xB9\x8A",		"\xA1\xC8" => "\xEF\xB9\x8D",		"\xA1\xC9" => "\xEF\xB9\x8E",		"\xA1\xCA" => "\xEF\xB9\x8B",		"\xA1\xCB" => "\xEF\xB9\x8C",		"\xA1\xCC" => "\xEF\xB9\x9F",		"\xA1\xCD" => "\xEF\xB9\xA0",		"\xA1\xCE" => "\xEF\xB9\xA1",		"\xA1\xCF" => "\xEF\xBC\x8B",		"\xA1\xD0" => "\xEF\xBC\x8D",		"\xA1\xD1" => "\xC3\x97",		"\xA1\xD2" => "\xC3\xB7",		"\xA1\xD3" => "\xC2\xB1",		"\xA1\xD4" => "\xE2\x88\x9A",		"\xA1\xD5" => "\xEF\xBC\x9C",		"\xA1\xD6" => "\xEF\xBC\x9E",		"\xA1\xD7" => "\xEF\xBC\x9D",		"\xA1\xD8" => "\xE2\x89\xA6",		"\xA1\xD9" => "\xE2\x89\xA7",		"\xA1\xDA" => "\xE2\x89\xA0",		"\xA1\xDB" => "\xE2\x88\x9E",		"\xA1\xDC" => "\xE2\x89\x92",		"\xA1\xDD" => "\xE2\x89\xA1",		"\xA1\xDE" => "\xEF\xB9\xA2",		"\xA1\xDF" => "\xEF\xB9\xA3",		"\xA1\xE0" => "\xEF\xB9\xA4",		"\xA1\xE1" => "\xEF\xB9\xA5",		"\xA1\xE2" => "\xEF\xB9\xA6",		"\xA1\xE3" => "\xE2\x88\xBC",		"\xA1\xE4" => "\xE2\x88\xA9",		"\xA1\xE5" => "\xE2\x88\xAA",		"\xA1\xE6" => "\xE2\x8A\xA5",		"\xA1\xE7" => "\xE2\x88\xA0",		"\xA1\xE8" => "\xE2\x88\x9F",		"\xA1\xE9" => "\xE2\x8A\xBF",		"\xA1\xEA" => "\xE3\x8F\x92",		"\xA1\xEB" => "\xE3\x8F\x91",		"\xA1\xEC" => "\xE2\x88\xAB",		"\xA1\xED" => "\xE2\x88\xAE",		"\xA1\xEE" => "\xE2\x88\xB5",		"\xA1\xEF" => "\xE2\x88\xB4",		"\xA1\xF0" => "\xE2\x99\x80",		"\xA1\xF1" => "\xE2\x99\x82",		"\xA1\xF2" => "\xE2\x99\x81",		"\xA1\xF3" => "\xE2\x98\x89",		"\xA1\xF4" => "\xE2\x86\x91",		"\xA1\xF5" => "\xE2\x86\x93",		"\xA1\xF6" => "\xE2\x86\x90",		"\xA1\xF7" => "\xE2\x86\x92",		"\xA1\xF8" => "\xE2\x86\x96",		"\xA1\xF9" => "\xE2\x86\x97",		"\xA1\xFA" => "\xE2\x86\x99",		"\xA1\xFB" => "\xE2\x86\x98",		"\xA1\xFC" => "\xE2\x88\xA5",		"\xA1\xFD" => "\xE2\x88\xA3",		"\xA1\xFE" => "\xEF\xBF\xBD",		"\xA2\x40" => "\xEF\xBF\xBD",		"\xA2\x41" => "\xEF\xBC\x8F",		"\xA2\x42" => "\xEF\xBC\xBC",		"\xA2\x43" => "\xEF\xBC\x84",		"\xA2\x44" => "\xC2\xA5",		"\xA2\x45" => "\xE3\x80\x92",		"\xA2\x46" => "\xC2\xA2",		"\xA2\x47" => "\xC2\xA3",		"\xA2\x48" => "\xEF\xBC\x85",		"\xA2\x49" => "\xEF\xBC\xA0",		"\xA2\x4A" => "\xE2\x84\x83",		"\xA2\x4B" => "\xE2\x84\x89",		"\xA2\x4C" => "\xEF\xB9\xA9",		"\xA2\x4D" => "\xEF\xB9\xAA",		"\xA2\x4E" => "\xEF\xB9\xAB",		"\xA2\x4F" => "\xE3\x8F\x95",		"\xA2\x50" => "\xE3\x8E\x9C",		"\xA2\x51" => "\xE3\x8E\x9D",		"\xA2\x52" => "\xE3\x8E\x9E",		"\xA2\x53" => "\xE3\x8F\x8E",		"\xA2\x54" => "\xE3\x8E\xA1",		"\xA2\x55" => "\xE3\x8E\x8E",		"\xA2\x56" => "\xE3\x8E\x8F",		"\xA2\x57" => "\xE3\x8F\x84",		"\xA2\x58" => "\xC2\xB0",		"\xA2\x59" => "\xE5\x85\x99",		"\xA2\x5A" => "\xE5\x85\x9B",		"\xA2\x5B" => "\xE5\x85\x9E",		"\xA2\x5C" => "\xE5\x85\x9D",		"\xA2\x5D" => "\xE5\x85\xA1",		"\xA2\x5E" => "\xE5\x85\xA3",		"\xA2\x5F" => "\xE5\x97\xA7",		"\xA2\x60" => "\xE7\x93\xA9",		"\xA2\x61" => "\xE7\xB3\x8E",		"\xA2\x62" => "\xE2\x96\x81",		"\xA2\x63" => "\xE2\x96\x82",		"\xA2\x64" => "\xE2\x96\x83",		"\xA2\x65" => "\xE2\x96\x84",		"\xA2\x66" => "\xE2\x96\x85",		"\xA2\x67" => "\xE2\x96\x86",		"\xA2\x68" => "\xE2\x96\x87",		"\xA2\x69" => "\xE2\x96\x88",		"\xA2\x6A" => "\xE2\x96\x8F",		"\xA2\x6B" => "\xE2\x96\x8E",		"\xA2\x6C" => "\xE2\x96\x8D",		"\xA2\x6D" => "\xE2\x96\x8C",		"\xA2\x6E" => "\xE2\x96\x8B",		"\xA2\x6F" => "\xE2\x96\x8A",		"\xA2\x70" => "\xE2\x96\x89",		"\xA2\x71" => "\xE2\x94\xBC",		"\xA2\x72" => "\xE2\x94\xB4",		"\xA2\x73" => "\xE2\x94\xAC",		"\xA2\x74" => "\xE2\x94\xA4",		"\xA2\x75" => "\xE2\x94\x9C",		"\xA2\x76" => "\xE2\x96\x94",		"\xA2\x77" => "\xE2\x94\x80",		"\xA2\x78" => "\xE2\x94\x82",		"\xA2\x79" => "\xE2\x96\x95",		"\xA2\x7A" => "\xE2\x94\x8C",		"\xA2\x7B" => "\xE2\x94\x90",		"\xA2\x7C" => "\xE2\x94\x94",		"\xA2\x7D" => "\xE2\x94\x98",		"\xA2\x7E" => "\xE2\x95\xAD",		"\xA2\xA1" => "\xE2\x95\xAE",		"\xA2\xA2" => "\xE2\x95\xB0",		"\xA2\xA3" => "\xE2\x95\xAF",		"\xA2\xA4" => "\xE2\x95\x90",		"\xA2\xA5" => "\xE2\x95\x9E",		"\xA2\xA6" => "\xE2\x95\xAA",		"\xA2\xA7" => "\xE2\x95\xA1",		"\xA2\xA8" => "\xE2\x97\xA2",		"\xA2\xA9" => "\xE2\x97\xA3",		"\xA2\xAA" => "\xE2\x97\xA5",		"\xA2\xAB" => "\xE2\x97\xA4",		"\xA2\xAC" => "\xE2\x95\xB1",		"\xA2\xAD" => "\xE2\x95\xB2",		"\xA2\xAE" => "\xE2\x95\xB3",		"\xA2\xAF" => "\xEF\xBC\x90",		"\xA2\xB0" => "\xEF\xBC\x91",		"\xA2\xB1" => "\xEF\xBC\x92",		"\xA2\xB2" => "\xEF\xBC\x93",		"\xA2\xB3" => "\xEF\xBC\x94",		"\xA2\xB4" => "\xEF\xBC\x95",		"\xA2\xB5" => "\xEF\xBC\x96",		"\xA2\xB6" => "\xEF\xBC\x97",		"\xA2\xB7" => "\xEF\xBC\x98",		"\xA2\xB8" => "\xEF\xBC\x99",		"\xA2\xB9" => "\xE2\x85\xA0",		"\xA2\xBA" => "\xE2\x85\xA1",		"\xA2\xBB" => "\xE2\x85\xA2",		"\xA2\xBC" => "\xE2\x85\xA3",		"\xA2\xBD" => "\xE2\x85\xA4",		"\xA2\xBE" => "\xE2\x85\xA5",		"\xA2\xBF" => "\xE2\x85\xA6",		"\xA2\xC0" => "\xE2\x85\xA7",		"\xA2\xC1" => "\xE2\x85\xA8",		"\xA2\xC2" => "\xE2\x85\xA9",		"\xA2\xC3" => "\xE3\x80\xA1",		"\xA2\xC4" => "\xE3\x80\xA2",		"\xA2\xC5" => "\xE3\x80\xA3",		"\xA2\xC6" => "\xE3\x80\xA4",		"\xA2\xC7" => "\xE3\x80\xA5",		"\xA2\xC8" => "\xE3\x80\xA6",		"\xA2\xC9" => "\xE3\x80\xA7",		"\xA2\xCA" => "\xE3\x80\xA8",		"\xA2\xCB" => "\xE3\x80\xA9",		"\xA2\xCC" => "\xEF\xBF\xBD",		"\xA2\xCD" => "\xE5\x8D\x84",		"\xA2\xCE" => "\xEF\xBF\xBD",		"\xA2\xCF" => "\xEF\xBC\xA1",		"\xA2\xD0" => "\xEF\xBC\xA2",		"\xA2\xD1" => "\xEF\xBC\xA3",		"\xA2\xD2" => "\xEF\xBC\xA4",		"\xA2\xD3" => "\xEF\xBC\xA5",		"\xA2\xD4" => "\xEF\xBC\xA6",		"\xA2\xD5" => "\xEF\xBC\xA7",		"\xA2\xD6" => "\xEF\xBC\xA8",		"\xA2\xD7" => "\xEF\xBC\xA9",		"\xA2\xD8" => "\xEF\xBC\xAA",		"\xA2\xD9" => "\xEF\xBC\xAB",		"\xA2\xDA" => "\xEF\xBC\xAC",		"\xA2\xDB" => "\xEF\xBC\xAD",		"\xA2\xDC" => "\xEF\xBC\xAE",		"\xA2\xDD" => "\xEF\xBC\xAF",		"\xA2\xDE" => "\xEF\xBC\xB0",		"\xA2\xDF" => "\xEF\xBC\xB1",		"\xA2\xE0" => "\xEF\xBC\xB2",		"\xA2\xE1" => "\xEF\xBC\xB3",		"\xA2\xE2" => "\xEF\xBC\xB4",		"\xA2\xE3" => "\xEF\xBC\xB5",		"\xA2\xE4" => "\xEF\xBC\xB6",		"\xA2\xE5" => "\xEF\xBC\xB7",		"\xA2\xE6" => "\xEF\xBC\xB8",		"\xA2\xE7" => "\xEF\xBC\xB9",		"\xA2\xE8" => "\xEF\xBC\xBA",		"\xA2\xE9" => "\xEF\xBD\x81",		"\xA2\xEA" => "\xEF\xBD\x82",		"\xA2\xEB" => "\xEF\xBD\x83",		"\xA2\xEC" => "\xEF\xBD\x84",		"\xA2\xED" => "\xEF\xBD\x85",		"\xA2\xEE" => "\xEF\xBD\x86",		"\xA2\xEF" => "\xEF\xBD\x87",		"\xA2\xF0" => "\xEF\xBD\x88",		"\xA2\xF1" => "\xEF\xBD\x89",		"\xA2\xF2" => "\xEF\xBD\x8A",		"\xA2\xF3" => "\xEF\xBD\x8B",		"\xA2\xF4" => "\xEF\xBD\x8C",		"\xA2\xF5" => "\xEF\xBD\x8D",		"\xA2\xF6" => "\xEF\xBD\x8E",		"\xA2\xF7" => "\xEF\xBD\x8F",		"\xA2\xF8" => "\xEF\xBD\x90",		"\xA2\xF9" => "\xEF\xBD\x91",		"\xA2\xFA" => "\xEF\xBD\x92",		"\xA2\xFB" => "\xEF\xBD\x93",		"\xA2\xFC" => "\xEF\xBD\x94",		"\xA2\xFD" => "\xEF\xBD\x95",		"\xA2\xFE" => "\xEF\xBD\x96",		"\xA3\x40" => "\xEF\xBD\x97",		"\xA3\x41" => "\xEF\xBD\x98",		"\xA3\x42" => "\xEF\xBD\x99",		"\xA3\x43" => "\xEF\xBD\x9A",		"\xA3\x44" => "\xCE\x91",		"\xA3\x45" => "\xCE\x92",		"\xA3\x46" => "\xCE\x93",		"\xA3\x47" => "\xCE\x94",		"\xA3\x48" => "\xCE\x95",		"\xA3\x49" => "\xCE\x96",		"\xA3\x4A" => "\xCE\x97",		"\xA3\x4B" => "\xCE\x98",		"\xA3\x4C" => "\xCE\x99",		"\xA3\x4D" => "\xCE\x9A",		"\xA3\x4E" => "\xCE\x9B",		"\xA3\x4F" => "\xCE\x9C",		"\xA3\x50" => "\xCE\x9D",		"\xA3\x51" => "\xCE\x9E",		"\xA3\x52" => "\xCE\x9F",		"\xA3\x53" => "\xCE\xA0",		"\xA3\x54" => "\xCE\xA1",		"\xA3\x55" => "\xCE\xA3",		"\xA3\x56" => "\xCE\xA4",		"\xA3\x57" => "\xCE\xA5",		"\xA3\x58" => "\xCE\xA6",		"\xA3\x59" => "\xCE\xA7",		"\xA3\x5A" => "\xCE\xA8",		"\xA3\x5B" => "\xCE\xA9",		"\xA3\x5C" => "\xCE\xB1",		"\xA3\x5D" => "\xCE\xB2",		"\xA3\x5E" => "\xCE\xB3",		"\xA3\x5F" => "\xCE\xB4",		"\xA3\x60" => "\xCE\xB5",		"\xA3\x61" => "\xCE\xB6",		"\xA3\x62" => "\xCE\xB7",		"\xA3\x63" => "\xCE\xB8",		"\xA3\x64" => "\xCE\xB9",		"\xA3\x65" => "\xCE\xBA",		"\xA3\x66" => "\xCE\xBB",		"\xA3\x67" => "\xCE\xBC",		"\xA3\x68" => "\xCE\xBD",		"\xA3\x69" => "\xCE\xBE",		"\xA3\x6A" => "\xCE\xBF",		"\xA3\x6B" => "\xCF\x80",		"\xA3\x6C" => "\xCF\x81",		"\xA3\x6D" => "\xCF\x83",		"\xA3\x6E" => "\xCF\x84",		"\xA3\x6F" => "\xCF\x85",		"\xA3\x70" => "\xCF\x86",		"\xA3\x71" => "\xCF\x87",		"\xA3\x72" => "\xCF\x88",		"\xA3\x73" => "\xCF\x89",		"\xA3\x74" => "\xE3\x84\x85",		"\xA3\x75" => "\xE3\x84\x86",		"\xA3\x76" => "\xE3\x84\x87",		"\xA3\x77" => "\xE3\x84\x88",		"\xA3\x78" => "\xE3\x84\x89",		"\xA3\x79" => "\xE3\x84\x8A",		"\xA3\x7A" => "\xE3\x84\x8B",		"\xA3\x7B" => "\xE3\x84\x8C",		"\xA3\x7C" => "\xE3\x84\x8D",		"\xA3\x7D" => "\xE3\x84\x8E",		"\xA3\x7E" => "\xE3\x84\x8F",		"\xA3\xA1" => "\xE3\x84\x90",		"\xA3\xA2" => "\xE3\x84\x91",		"\xA3\xA3" => "\xE3\x84\x92",		"\xA3\xA4" => "\xE3\x84\x93",		"\xA3\xA5" => "\xE3\x84\x94",		"\xA3\xA6" => "\xE3\x84\x95",		"\xA3\xA7" => "\xE3\x84\x96",		"\xA3\xA8" => "\xE3\x84\x97",		"\xA3\xA9" => "\xE3\x84\x98",		"\xA3\xAA" => "\xE3\x84\x99",		"\xA3\xAB" => "\xE3\x84\x9A",		"\xA3\xAC" => "\xE3\x84\x9B",		"\xA3\xAD" => "\xE3\x84\x9C",		"\xA3\xAE" => "\xE3\x84\x9D",		"\xA3\xAF" => "\xE3\x84\x9E",		"\xA3\xB0" => "\xE3\x84\x9F",		"\xA3\xB1" => "\xE3\x84\xA0",		"\xA3\xB2" => "\xE3\x84\xA1",		"\xA3\xB3" => "\xE3\x84\xA2",		"\xA3\xB4" => "\xE3\x84\xA3",		"\xA3\xB5" => "\xE3\x84\xA4",		"\xA3\xB6" => "\xE3\x84\xA5",		"\xA3\xB7" => "\xE3\x84\xA6",		"\xA3\xB8" => "\xE3\x84\xA7",		"\xA3\xB9" => "\xE3\x84\xA8",		"\xA3\xBA" => "\xE3\x84\xA9",		"\xA3\xBB" => "\xCB\x99",		"\xA3\xBC" => "\xCB\x89",		"\xA3\xBD" => "\xCB\x8A",		"\xA3\xBE" => "\xCB\x87",		"\xA3\xBF" => "\xCB\x8B",		"\xA4\x40" => "\xE4\xB8\x80",		"\xA4\x41" => "\xE4\xB9\x99",		"\xA4\x42" => "\xE4\xB8\x81",		"\xA4\x43" => "\xE4\xB8\x83",		"\xA4\x44" => "\xE4\xB9\x83",		"\xA4\x45" => "\xE4\xB9\x9D",		"\xA4\x46" => "\xE4\xBA\x86",		"\xA4\x47" => "\xE4\xBA\x8C",		"\xA4\x48" => "\xE4\xBA\xBA",		"\xA4\x49" => "\xE5\x84\xBF",		"\xA4\x4A" => "\xE5\x85\xA5",		"\xA4\x4B" => "\xE5\x85\xAB",		"\xA4\x4C" => "\xE5\x87\xA0",		"\xA4\x4D" => "\xE5\x88\x80",		"\xA4\x4E" => "\xE5\x88\x81",		"\xA4\x4F" => "\xE5\x8A\x9B",		"\xA4\x50" => "\xE5\x8C\x95",		"\xA4\x51" => "\xE5\x8D\x81",		"\xA4\x52" => "\xE5\x8D\x9C",		"\xA4\x53" => "\xE5\x8F\x88",		"\xA4\x54" => "\xE4\xB8\x89",		"\xA4\x55" => "\xE4\xB8\x8B",		"\xA4\x56" => "\xE4\xB8\x88",		"\xA4\x57" => "\xE4\xB8\x8A",		"\xA4\x58" => "\xE4\xB8\xAB",		"\xA4\x59" => "\xE4\xB8\xB8",		"\xA4\x5A" => "\xE5\x87\xA1",		"\xA4\x5B" => "\xE4\xB9\x85",		"\xA4\x5C" => "\xE4\xB9\x88",		"\xA4\x5D" => "\xE4\xB9\x9F",		"\xA4\x5E" => "\xE4\xB9\x9E",		"\xA4\x5F" => "\xE4\xBA\x8E",		"\xA4\x60" => "\xE4\xBA\xA1",		"\xA4\x61" => "\xE5\x85\x80",		"\xA4\x62" => "\xE5\x88\x83",		"\xA4\x63" => "\xE5\x8B\xBA",		"\xA4\x64" => "\xE5\x8D\x83",		"\xA4\x65" => "\xE5\x8F\x89",		"\xA4\x66" => "\xE5\x8F\xA3",		"\xA4\x67" => "\xE5\x9C\x9F",		"\xA4\x68" => "\xE5\xA3\xAB",		"\xA4\x69" => "\xE5\xA4\x95",		"\xA4\x6A" => "\xE5\xA4\xA7",		"\xA4\x6B" => "\xE5\xA5\xB3",		"\xA4\x6C" => "\xE5\xAD\x90",		"\xA4\x6D" => "\xE5\xAD\x91",		"\xA4\x6E" => "\xE5\xAD\x93",		"\xA4\x6F" => "\xE5\xAF\xB8",		"\xA4\x70" => "\xE5\xB0\x8F",		"\xA4\x71" => "\xE5\xB0\xA2",		"\xA4\x72" => "\xE5\xB0\xB8",		"\xA4\x73" => "\xE5\xB1\xB1",		"\xA4\x74" => "\xE5\xB7\x9D",		"\xA4\x75" => "\xE5\xB7\xA5",		"\xA4\x76" => "\xE5\xB7\xB1",		"\xA4\x77" => "\xE5\xB7\xB2",		"\xA4\x78" => "\xE5\xB7\xB3",		"\xA4\x79" => "\xE5\xB7\xBE",		"\xA4\x7A" => "\xE5\xB9\xB2",		"\xA4\x7B" => "\xE5\xBB\xBE",		"\xA4\x7C" => "\xE5\xBC\x8B",		"\xA4\x7D" => "\xE5\xBC\x93",		"\xA4\x7E" => "\xE6\x89\x8D",		"\xA4\xA1" => "\xE4\xB8\x91",		"\xA4\xA2" => "\xE4\xB8\x90",		"\xA4\xA3" => "\xE4\xB8\x8D",		"\xA4\xA4" => "\xE4\xB8\xAD",		"\xA4\xA5" => "\xE4\xB8\xB0",		"\xA4\xA6" => "\xE4\xB8\xB9",		"\xA4\xA7" => "\xE4\xB9\x8B",		"\xA4\xA8" => "\xE5\xB0\xB9",		"\xA4\xA9" => "\xE4\xBA\x88",		"\xA4\xAA" => "\xE4\xBA\x91",		"\xA4\xAB" => "\xE4\xBA\x95",		"\xA4\xAC" => "\xE4\xBA\x92",		"\xA4\xAD" => "\xE4\xBA\x94",		"\xA4\xAE" => "\xE4\xBA\xA2",		"\xA4\xAF" => "\xE4\xBB\x81",		"\xA4\xB0" => "\xE4\xBB\x80",		"\xA4\xB1" => "\xE4\xBB\x83",		"\xA4\xB2" => "\xE4\xBB\x86",		"\xA4\xB3" => "\xE4\xBB\x87",		"\xA4\xB4" => "\xE4\xBB\x8D",		"\xA4\xB5" => "\xE4\xBB\x8A",		"\xA4\xB6" => "\xE4\xBB\x8B",		"\xA4\xB7" => "\xE4\xBB\x84",		"\xA4\xB8" => "\xE5\x85\x83",		"\xA4\xB9" => "\xE5\x85\x81",		"\xA4\xBA" => "\xE5\x85\xA7",		"\xA4\xBB" => "\xE5\x85\xAD",		"\xA4\xBC" => "\xE5\x85\xAE",		"\xA4\xBD" => "\xE5\x85\xAC",		"\xA4\xBE" => "\xE5\x86\x97",		"\xA4\xBF" => "\xE5\x87\xB6",		"\xA4\xC0" => "\xE5\x88\x86",		"\xA4\xC1" => "\xE5\x88\x87",		"\xA4\xC2" => "\xE5\x88\x88",		"\xA4\xC3" => "\xE5\x8B\xBB",		"\xA4\xC4" => "\xE5\x8B\xBE",		"\xA4\xC5" => "\xE5\x8B\xBF",		"\xA4\xC6" => "\xE5\x8C\x96",		"\xA4\xC7" => "\xE5\x8C\xB9",		"\xA4\xC8" => "\xE5\x8D\x88",		"\xA4\xC9" => "\xE5\x8D\x87",		"\xA4\xCA" => "\xE5\x8D\x85",		"\xA4\xCB" => "\xE5\x8D\x9E",		"\xA4\xCC" => "\xE5\x8E\x84",		"\xA4\xCD" => "\xE5\x8F\x8B",		"\xA4\xCE" => "\xE5\x8F\x8A",		"\xA4\xCF" => "\xE5\x8F\x8D",		"\xA4\xD0" => "\xE5\xA3\xAC",		"\xA4\xD1" => "\xE5\xA4\xA9",		"\xA4\xD2" => "\xE5\xA4\xAB",		"\xA4\xD3" => "\xE5\xA4\xAA",		"\xA4\xD4" => "\xE5\xA4\xAD",		"\xA4\xD5" => "\xE5\xAD\x94",		"\xA4\xD6" => "\xE5\xB0\x91",		"\xA4\xD7" => "\xE5\xB0\xA4",		"\xA4\xD8" => "\xE5\xB0\xBA",		"\xA4\xD9" => "\xE5\xB1\xAF",		"\xA4\xDA" => "\xE5\xB7\xB4",		"\xA4\xDB" => "\xE5\xB9\xBB",		"\xA4\xDC" => "\xE5\xBB\xBF",		"\xA4\xDD" => "\xE5\xBC\x94",		"\xA4\xDE" => "\xE5\xBC\x95",		"\xA4\xDF" => "\xE5\xBF\x83",		"\xA4\xE0" => "\xE6\x88\x88",		"\xA4\xE1" => "\xE6\x88\xB6",		"\xA4\xE2" => "\xE6\x89\x8B",		"\xA4\xE3" => "\xE6\x89\x8E",		"\xA4\xE4" => "\xE6\x94\xAF",		"\xA4\xE5" => "\xE6\x96\x87",		"\xA4\xE6" => "\xE6\x96\x97",		"\xA4\xE7" => "\xE6\x96\xA4",		"\xA4\xE8" => "\xE6\x96\xB9",		"\xA4\xE9" => "\xE6\x97\xA5",		"\xA4\xEA" => "\xE6\x9B\xB0",		"\xA4\xEB" => "\xE6\x9C\x88",		"\xA4\xEC" => "\xE6\x9C\xA8",		"\xA4\xED" => "\xE6\xAC\xA0",		"\xA4\xEE" => "\xE6\xAD\xA2",		"\xA4\xEF" => "\xE6\xAD\xB9",		"\xA4\xF0" => "\xE6\xAF\x8B",		"\xA4\xF1" => "\xE6\xAF\x94",		"\xA4\xF2" => "\xE6\xAF\x9B",		"\xA4\xF3" => "\xE6\xB0\x8F",		"\xA4\xF4" => "\xE6\xB0\xB4",		"\xA4\xF5" => "\xE7\x81\xAB",		"\xA4\xF6" => "\xE7\x88\xAA",		"\xA4\xF7" => "\xE7\x88\xB6",		"\xA4\xF8" => "\xE7\x88\xBB",		"\xA4\xF9" => "\xE7\x89\x87",		"\xA4\xFA" => "\xE7\x89\x99",		"\xA4\xFB" => "\xE7\x89\x9B",		"\xA4\xFC" => "\xE7\x8A\xAC",		"\xA4\xFD" => "\xE7\x8E\x8B",		"\xA4\xFE" => "\xE4\xB8\x99",		"\xA5\x40" => "\xE4\xB8\x96",		"\xA5\x41" => "\xE4\xB8\x95",		"\xA5\x42" => "\xE4\xB8\x94",		"\xA5\x43" => "\xE4\xB8\x98",		"\xA5\x44" => "\xE4\xB8\xBB",		"\xA5\x45" => "\xE4\xB9\x8D",		"\xA5\x46" => "\xE4\xB9\x8F",		"\xA5\x47" => "\xE4\xB9\x8E",		"\xA5\x48" => "\xE4\xBB\xA5",		"\xA5\x49" => "\xE4\xBB\x98",		"\xA5\x4A" => "\xE4\xBB\x94",		"\xA5\x4B" => "\xE4\xBB\x95",		"\xA5\x4C" => "\xE4\xBB\x96",		"\xA5\x4D" => "\xE4\xBB\x97",		"\xA5\x4E" => "\xE4\xBB\xA3",		"\xA5\x4F" => "\xE4\xBB\xA4",		"\xA5\x50" => "\xE4\xBB\x99",		"\xA5\x51" => "\xE4\xBB\x9E",		"\xA5\x52" => "\xE5\x85\x85",		"\xA5\x53" => "\xE5\x85\x84",		"\xA5\x54" => "\xE5\x86\x89",		"\xA5\x55" => "\xE5\x86\x8A",		"\xA5\x56" => "\xE5\x86\xAC",		"\xA5\x57" => "\xE5\x87\xB9",		"\xA5\x58" => "\xE5\x87\xBA",		"\xA5\x59" => "\xE5\x87\xB8",		"\xA5\x5A" => "\xE5\x88\x8A",		"\xA5\x5B" => "\xE5\x8A\xA0",		"\xA5\x5C" => "\xE5\x8A\x9F",		"\xA5\x5D" => "\xE5\x8C\x85",		"\xA5\x5E" => "\xE5\x8C\x86",		"\xA5\x5F" => "\xE5\x8C\x97",		"\xA5\x60" => "\xE5\x8C\x9D",		"\xA5\x61" => "\xE4\xBB\x9F",		"\xA5\x62" => "\xE5\x8D\x8A",		"\xA5\x63" => "\xE5\x8D\x89",		"\xA5\x64" => "\xE5\x8D\xA1",		"\xA5\x65" => "\xE5\x8D\xA0",		"\xA5\x66" => "\xE5\x8D\xAF",		"\xA5\x67" => "\xE5\x8D\xAE",		"\xA5\x68" => "\xE5\x8E\xBB",		"\xA5\x69" => "\xE5\x8F\xAF",		"\xA5\x6A" => "\xE5\x8F\xA4",		"\xA5\x6B" => "\xE5\x8F\xB3",		"\xA5\x6C" => "\xE5\x8F\xAC",		"\xA5\x6D" => "\xE5\x8F\xAE",		"\xA5\x6E" => "\xE5\x8F\xA9",		"\xA5\x6F" => "\xE5\x8F\xA8",		"\xA5\x70" => "\xE5\x8F\xBC",		"\xA5\x71" => "\xE5\x8F\xB8",		"\xA5\x72" => "\xE5\x8F\xB5",		"\xA5\x73" => "\xE5\x8F\xAB",		"\xA5\x74" => "\xE5\x8F\xA6",		"\xA5\x75" => "\xE5\x8F\xAA",		"\xA5\x76" => "\xE5\x8F\xB2",		"\xA5\x77" => "\xE5\x8F\xB1",		"\xA5\x78" => "\xE5\x8F\xB0",		"\xA5\x79" => "\xE5\x8F\xA5",		"\xA5\x7A" => "\xE5\x8F\xAD",		"\xA5\x7B" => "\xE5\x8F\xBB",		"\xA5\x7C" => "\xE5\x9B\x9B",		"\xA5\x7D" => "\xE5\x9B\x9A",		"\xA5\x7E" => "\xE5\xA4\x96",		"\xA5\xA1" => "\xE5\xA4\xAE",		"\xA5\xA2" => "\xE5\xA4\xB1",		"\xA5\xA3" => "\xE5\xA5\xB4",		"\xA5\xA4" => "\xE5\xA5\xB6",		"\xA5\xA5" => "\xE5\xAD\x95",		"\xA5\xA6" => "\xE5\xAE\x83",		"\xA5\xA7" => "\xE5\xB0\xBC",		"\xA5\xA8" => "\xE5\xB7\xA8",		"\xA5\xA9" => "\xE5\xB7\xA7",		"\xA5\xAA" => "\xE5\xB7\xA6",		"\xA5\xAB" => "\xE5\xB8\x82",		"\xA5\xAC" => "\xE5\xB8\x83",		"\xA5\xAD" => "\xE5\xB9\xB3",		"\xA5\xAE" => "\xE5\xB9\xBC",		"\xA5\xAF" => "\xE5\xBC\x81",		"\xA5\xB0" => "\xE5\xBC\x98",		"\xA5\xB1" => "\xE5\xBC\x97",		"\xA5\xB2" => "\xE5\xBF\x85",		"\xA5\xB3" => "\xE6\x88\x8A",		"\xA5\xB4" => "\xE6\x89\x93",		"\xA5\xB5" => "\xE6\x89\x94",		"\xA5\xB6" => "\xE6\x89\x92",		"\xA5\xB7" => "\xE6\x89\x91",		"\xA5\xB8" => "\xE6\x96\xA5",		"\xA5\xB9" => "\xE6\x97\xA6",		"\xA5\xBA" => "\xE6\x9C\xAE",		"\xA5\xBB" => "\xE6\x9C\xAC",		"\xA5\xBC" => "\xE6\x9C\xAA",		"\xA5\xBD" => "\xE6\x9C\xAB",		"\xA5\xBE" => "\xE6\x9C\xAD",		"\xA5\xBF" => "\xE6\xAD\xA3",		"\xA5\xC0" => "\xE6\xAF\x8D",		"\xA5\xC1" => "\xE6\xB0\x91",		"\xA5\xC2" => "\xE6\xB0\x90",		"\xA5\xC3" => "\xE6\xB0\xB8",		"\xA5\xC4" => "\xE6\xB1\x81",		"\xA5\xC5" => "\xE6\xB1\x80",		"\xA5\xC6" => "\xE6\xB0\xBE",		"\xA5\xC7" => "\xE7\x8A\xAF",		"\xA5\xC8" => "\xE7\x8E\x84",		"\xA5\xC9" => "\xE7\x8E\x89",		"\xA5\xCA" => "\xE7\x93\x9C",		"\xA5\xCB" => "\xE7\x93\xA6",		"\xA5\xCC" => "\xE7\x94\x98",		"\xA5\xCD" => "\xE7\x94\x9F",		"\xA5\xCE" => "\xE7\x94\xA8",		"\xA5\xCF" => "\xE7\x94\xA9",		"\xA5\xD0" => "\xE7\x94\xB0",		"\xA5\xD1" => "\xE7\x94\xB1",		"\xA5\xD2" => "\xE7\x94\xB2",		"\xA5\xD3" => "\xE7\x94\xB3",		"\xA5\xD4" => "\xE7\x96\x8B",		"\xA5\xD5" => "\xE7\x99\xBD",		"\xA5\xD6" => "\xE7\x9A\xAE",		"\xA5\xD7" => "\xE7\x9A\xBF",		"\xA5\xD8" => "\xE7\x9B\xAE",		"\xA5\xD9" => "\xE7\x9F\x9B",		"\xA5\xDA" => "\xE7\x9F\xA2",		"\xA5\xDB" => "\xE7\x9F\xB3",		"\xA5\xDC" => "\xE7\xA4\xBA",		"\xA5\xDD" => "\xE7\xA6\xBE",		"\xA5\xDE" => "\xE7\xA9\xB4",		"\xA5\xDF" => "\xE7\xAB\x8B",		"\xA5\xE0" => "\xE4\xB8\x9E",		"\xA5\xE1" => "\xE4\xB8\x9F",		"\xA5\xE2" => "\xE4\xB9\x92",		"\xA5\xE3" => "\xE4\xB9\x93",		"\xA5\xE4" => "\xE4\xB9\xA9",		"\xA5\xE5" => "\xE4\xBA\x99",		"\xA5\xE6" => "\xE4\xBA\xA4",		"\xA5\xE7" => "\xE4\xBA\xA6",		"\xA5\xE8" => "\xE4\xBA\xA5",		"\xA5\xE9" => "\xE4\xBB\xBF",		"\xA5\xEA" => "\xE4\xBC\x89",		"\xA5\xEB" => "\xE4\xBC\x99",		"\xA5\xEC" => "\xE4\xBC\x8A",		"\xA5\xED" => "\xE4\xBC\x95",		"\xA5\xEE" => "\xE4\xBC\x8D",		"\xA5\xEF" => "\xE4\xBC\x90",		"\xA5\xF0" => "\xE4\xBC\x91",		"\xA5\xF1" => "\xE4\xBC\x8F",		"\xA5\xF2" => "\xE4\xBB\xB2",		"\xA5\xF3" => "\xE4\xBB\xB6",		"\xA5\xF4" => "\xE4\xBB\xBB",		"\xA5\xF5" => "\xE4\xBB\xB0",		"\xA5\xF6" => "\xE4\xBB\xB3",		"\xA5\xF7" => "\xE4\xBB\xBD",		"\xA5\xF8" => "\xE4\xBC\x81",		"\xA5\xF9" => "\xE4\xBC\x8B",		"\xA5\xFA" => "\xE5\x85\x89",		"\xA5\xFB" => "\xE5\x85\x87",		"\xA5\xFC" => "\xE5\x85\x86",		"\xA5\xFD" => "\xE5\x85\x88",		"\xA5\xFE" => "\xE5\x85\xA8",		"\xA6\x40" => "\xE5\x85\xB1",		"\xA6\x41" => "\xE5\x86\x8D",		"\xA6\x42" => "\xE5\x86\xB0",		"\xA6\x43" => "\xE5\x88\x97",		"\xA6\x44" => "\xE5\x88\x91",		"\xA6\x45" => "\xE5\x88\x92",		"\xA6\x46" => "\xE5\x88\x8E",		"\xA6\x47" => "\xE5\x88\x96",		"\xA6\x48" => "\xE5\x8A\xA3",		"\xA6\x49" => "\xE5\x8C\x88",		"\xA6\x4A" => "\xE5\x8C\xA1",		"\xA6\x4B" => "\xE5\x8C\xA0",		"\xA6\x4C" => "\xE5\x8D\xB0",		"\xA6\x4D" => "\xE5\x8D\xB1",		"\xA6\x4E" => "\xE5\x90\x89",		"\xA6\x4F" => "\xE5\x90\x8F",		"\xA6\x50" => "\xE5\x90\x8C",		"\xA6\x51" => "\xE5\x90\x8A",		"\xA6\x52" => "\xE5\x90\x90",		"\xA6\x53" => "\xE5\x90\x81",		"\xA6\x54" => "\xE5\x90\x8B",		"\xA6\x55" => "\xE5\x90\x84",		"\xA6\x56" => "\xE5\x90\x91",		"\xA6\x57" => "\xE5\x90\x8D",		"\xA6\x58" => "\xE5\x90\x88",		"\xA6\x59" => "\xE5\x90\x83",		"\xA6\x5A" => "\xE5\x90\x8E",		"\xA6\x5B" => "\xE5\x90\x86",		"\xA6\x5C" => "\xE5\x90\x92",		"\xA6\x5D" => "\xE5\x9B\xA0",		"\xA6\x5E" => "\xE5\x9B\x9E",		"\xA6\x5F" => "\xE5\x9B\x9D",		"\xA6\x60" => "\xE5\x9C\xB3",		"\xA6\x61" => "\xE5\x9C\xB0",		"\xA6\x62" => "\xE5\x9C\xA8",		"\xA6\x63" => "\xE5\x9C\xAD",		"\xA6\x64" => "\xE5\x9C\xAC",		"\xA6\x65" => "\xE5\x9C\xAF",		"\xA6\x66" => "\xE5\x9C\xA9",		"\xA6\x67" => "\xE5\xA4\x99",		"\xA6\x68" => "\xE5\xA4\x9A",		"\xA6\x69" => "\xE5\xA4\xB7",		"\xA6\x6A" => "\xE5\xA4\xB8",		"\xA6\x6B" => "\xE5\xA6\x84",		"\xA6\x6C" => "\xE5\xA5\xB8",		"\xA6\x6D" => "\xE5\xA6\x83",		"\xA6\x6E" => "\xE5\xA5\xBD",		"\xA6\x6F" => "\xE5\xA5\xB9",		"\xA6\x70" => "\xE5\xA6\x82",		"\xA6\x71" => "\xE5\xA6\x81",		"\xA6\x72" => "\xE5\xAD\x97",		"\xA6\x73" => "\xE5\xAD\x98",		"\xA6\x74" => "\xE5\xAE\x87",		"\xA6\x75" => "\xE5\xAE\x88",		"\xA6\x76" => "\xE5\xAE\x85",		"\xA6\x77" => "\xE5\xAE\x89",		"\xA6\x78" => "\xE5\xAF\xBA",		"\xA6\x79" => "\xE5\xB0\x96",		"\xA6\x7A" => "\xE5\xB1\xB9",		"\xA6\x7B" => "\xE5\xB7\x9E",		"\xA6\x7C" => "\xE5\xB8\x86",		"\xA6\x7D" => "\xE5\xB9\xB6",		"\xA6\x7E" => "\xE5\xB9\xB4",		"\xA6\xA1" => "\xE5\xBC\x8F",		"\xA6\xA2" => "\xE5\xBC\x9B",		"\xA6\xA3" => "\xE5\xBF\x99",		"\xA6\xA4" => "\xE5\xBF\x96",		"\xA6\xA5" => "\xE6\x88\x8E",		"\xA6\xA6" => "\xE6\x88\x8C",		"\xA6\xA7" => "\xE6\x88\x8D",		"\xA6\xA8" => "\xE6\x88\x90",		"\xA6\xA9" => "\xE6\x89\xA3",		"\xA6\xAA" => "\xE6\x89\x9B",		"\xA6\xAB" => "\xE6\x89\x98",		"\xA6\xAC" => "\xE6\x94\xB6",		"\xA6\xAD" => "\xE6\x97\xA9",		"\xA6\xAE" => "\xE6\x97\xA8",		"\xA6\xAF" => "\xE6\x97\xAC",		"\xA6\xB0" => "\xE6\x97\xAD",		"\xA6\xB1" => "\xE6\x9B\xB2",		"\xA6\xB2" => "\xE6\x9B\xB3",		"\xA6\xB3" => "\xE6\x9C\x89",		"\xA6\xB4" => "\xE6\x9C\xBD",		"\xA6\xB5" => "\xE6\x9C\xB4",		"\xA6\xB6" => "\xE6\x9C\xB1",		"\xA6\xB7" => "\xE6\x9C\xB5",		"\xA6\xB8" => "\xE6\xAC\xA1",		"\xA6\xB9" => "\xE6\xAD\xA4",		"\xA6\xBA" => "\xE6\xAD\xBB",		"\xA6\xBB" => "\xE6\xB0\x96",		"\xA6\xBC" => "\xE6\xB1\x9D",		"\xA6\xBD" => "\xE6\xB1\x97",		"\xA6\xBE" => "\xE6\xB1\x99",		"\xA6\xBF" => "\xE6\xB1\x9F",		"\xA6\xC0" => "\xE6\xB1\xA0",		"\xA6\xC1" => "\xE6\xB1\x90",		"\xA6\xC2" => "\xE6\xB1\x95",		"\xA6\xC3" => "\xE6\xB1\xA1",		"\xA6\xC4" => "\xE6\xB1\x9B",		"\xA6\xC5" => "\xE6\xB1\x8D",		"\xA6\xC6" => "\xE6\xB1\x8E",		"\xA6\xC7" => "\xE7\x81\xB0",		"\xA6\xC8" => "\xE7\x89\x9F",		"\xA6\xC9" => "\xE7\x89\x9D",		"\xA6\xCA" => "\xE7\x99\xBE",		"\xA6\xCB" => "\xE7\xAB\xB9",		"\xA6\xCC" => "\xE7\xB1\xB3",		"\xA6\xCD" => "\xE7\xB3\xB8",		"\xA6\xCE" => "\xE7\xBC\xB6",		"\xA6\xCF" => "\xE7\xBE\x8A",		"\xA6\xD0" => "\xE7\xBE\xBD",		"\xA6\xD1" => "\xE8\x80\x81",		"\xA6\xD2" => "\xE8\x80\x83",		"\xA6\xD3" => "\xE8\x80\x8C",		"\xA6\xD4" => "\xE8\x80\x92",		"\xA6\xD5" => "\xE8\x80\xB3",		"\xA6\xD6" => "\xE8\x81\xBF",		"\xA6\xD7" => "\xE8\x82\x89",		"\xA6\xD8" => "\xE8\x82\x8B",		"\xA6\xD9" => "\xE8\x82\x8C",		"\xA6\xDA" => "\xE8\x87\xA3",		"\xA6\xDB" => "\xE8\x87\xAA",		"\xA6\xDC" => "\xE8\x87\xB3",		"\xA6\xDD" => "\xE8\x87\xBC",		"\xA6\xDE" => "\xE8\x88\x8C",		"\xA6\xDF" => "\xE8\x88\x9B",		"\xA6\xE0" => "\xE8\x88\x9F",		"\xA6\xE1" => "\xE8\x89\xAE",		"\xA6\xE2" => "\xE8\x89\xB2",		"\xA6\xE3" => "\xE8\x89\xBE",		"\xA6\xE4" => "\xE8\x99\xAB",		"\xA6\xE5" => "\xE8\xA1\x80",		"\xA6\xE6" => "\xE8\xA1\x8C",		"\xA6\xE7" => "\xE8\xA1\xA3",		"\xA6\xE8" => "\xE8\xA5\xBF",		"\xA6\xE9" => "\xE9\x98\xA1",		"\xA6\xEA" => "\xE4\xB8\xB2",		"\xA6\xEB" => "\xE4\xBA\xA8",		"\xA6\xEC" => "\xE4\xBD\x8D",		"\xA6\xED" => "\xE4\xBD\x8F",		"\xA6\xEE" => "\xE4\xBD\x87",		"\xA6\xEF" => "\xE4\xBD\x97",		"\xA6\xF0" => "\xE4\xBD\x9E",		"\xA6\xF1" => "\xE4\xBC\xB4",		"\xA6\xF2" => "\xE4\xBD\x9B",		"\xA6\xF3" => "\xE4\xBD\x95",		"\xA6\xF4" => "\xE4\xBC\xB0",		"\xA6\xF5" => "\xE4\xBD\x90",		"\xA6\xF6" => "\xE4\xBD\x91",		"\xA6\xF7" => "\xE4\xBC\xBD",		"\xA6\xF8" => "\xE4\xBC\xBA",		"\xA6\xF9" => "\xE4\xBC\xB8",		"\xA6\xFA" => "\xE4\xBD\x83",		"\xA6\xFB" => "\xE4\xBD\x94",		"\xA6\xFC" => "\xE4\xBC\xBC",		"\xA6\xFD" => "\xE4\xBD\x86",		"\xA6\xFE" => "\xE4\xBD\xA3",		"\xA7\x40" => "\xE4\xBD\x9C",		"\xA7\x41" => "\xE4\xBD\xA0",		"\xA7\x42" => "\xE4\xBC\xAF",		"\xA7\x43" => "\xE4\xBD\x8E",		"\xA7\x44" => "\xE4\xBC\xB6",		"\xA7\x45" => "\xE4\xBD\x99",		"\xA7\x46" => "\xE4\xBD\x9D",		"\xA7\x47" => "\xE4\xBD\x88",		"\xA7\x48" => "\xE4\xBD\x9A",		"\xA7\x49" => "\xE5\x85\x8C",		"\xA7\x4A" => "\xE5\x85\x8B",		"\xA7\x4B" => "\xE5\x85\x8D",		"\xA7\x4C" => "\xE5\x85\xB5",		"\xA7\x4D" => "\xE5\x86\xB6",		"\xA7\x4E" => "\xE5\x86\xB7",		"\xA7\x4F" => "\xE5\x88\xA5",		"\xA7\x50" => "\xE5\x88\xA4",		"\xA7\x51" => "\xE5\x88\xA9",		"\xA7\x52" => "\xE5\x88\xAA",		"\xA7\x53" => "\xE5\x88\xA8",		"\xA7\x54" => "\xE5\x8A\xAB",		"\xA7\x55" => "\xE5\x8A\xA9",		"\xA7\x56" => "\xE5\x8A\xAA",		"\xA7\x57" => "\xE5\x8A\xAC",		"\xA7\x58" => "\xE5\x8C\xA3",		"\xA7\x59" => "\xE5\x8D\xB3",		"\xA7\x5A" => "\xE5\x8D\xB5",		"\xA7\x5B" => "\xE5\x90\x9D",		"\xA7\x5C" => "\xE5\x90\xAD",		"\xA7\x5D" => "\xE5\x90\x9E",		"\xA7\x5E" => "\xE5\x90\xBE",		"\xA7\x5F" => "\xE5\x90\xA6",		"\xA7\x60" => "\xE5\x91\x8E",		"\xA7\x61" => "\xE5\x90\xA7",		"\xA7\x62" => "\xE5\x91\x86",		"\xA7\x63" => "\xE5\x91\x83",		"\xA7\x64" => "\xE5\x90\xB3",		"\xA7\x65" => "\xE5\x91\x88",		"\xA7\x66" => "\xE5\x91\x82",		"\xA7\x67" => "\xE5\x90\x9B",		"\xA7\x68" => "\xE5\x90\xA9",		"\xA7\x69" => "\xE5\x91\x8A",		"\xA7\x6A" => "\xE5\x90\xB9",		"\xA7\x6B" => "\xE5\x90\xBB",		"\xA7\x6C" => "\xE5\x90\xB8",		"\xA7\x6D" => "\xE5\x90\xAE",		"\xA7\x6E" => "\xE5\x90\xB5",		"\xA7\x6F" => "\xE5\x90\xB6",		"\xA7\x70" => "\xE5\x90\xA0",		"\xA7\x71" => "\xE5\x90\xBC",		"\xA7\x72" => "\xE5\x91\x80",		"\xA7\x73" => "\xE5\x90\xB1",		"\xA7\x74" => "\xE5\x90\xAB",		"\xA7\x75" => "\xE5\x90\x9F",		"\xA7\x76" => "\xE5\x90\xAC",		"\xA7\x77" => "\xE5\x9B\xAA",		"\xA7\x78" => "\xE5\x9B\xB0",		"\xA7\x79" => "\xE5\x9B\xA4",		"\xA7\x7A" => "\xE5\x9B\xAB",		"\xA7\x7B" => "\xE5\x9D\x8A",		"\xA7\x7C" => "\xE5\x9D\x91",		"\xA7\x7D" => "\xE5\x9D\x80",		"\xA7\x7E" => "\xE5\x9D\x8D",		"\xA7\xA1" => "\xE5\x9D\x87",		"\xA7\xA2" => "\xE5\x9D\x8E",		"\xA7\xA3" => "\xE5\x9C\xBE",		"\xA7\xA4" => "\xE5\x9D\x90",		"\xA7\xA5" => "\xE5\x9D\x8F",		"\xA7\xA6" => "\xE5\x9C\xBB",		"\xA7\xA7" => "\xE5\xA3\xAF",		"\xA7\xA8" => "\xE5\xA4\xBE",		"\xA7\xA9" => "\xE5\xA6\x9D",		"\xA7\xAA" => "\xE5\xA6\x92",		"\xA7\xAB" => "\xE5\xA6\xA8",		"\xA7\xAC" => "\xE5\xA6\x9E",		"\xA7\xAD" => "\xE5\xA6\xA3",		"\xA7\xAE" => "\xE5\xA6\x99",		"\xA7\xAF" => "\xE5\xA6\x96",		"\xA7\xB0" => "\xE5\xA6\x8D",		"\xA7\xB1" => "\xE5\xA6\xA4",		"\xA7\xB2" => "\xE5\xA6\x93",		"\xA7\xB3" => "\xE5\xA6\x8A",		"\xA7\xB4" => "\xE5\xA6\xA5",		"\xA7\xB5" => "\xE5\xAD\x9D",		"\xA7\xB6" => "\xE5\xAD\x9C",		"\xA7\xB7" => "\xE5\xAD\x9A",		"\xA7\xB8" => "\xE5\xAD\x9B",		"\xA7\xB9" => "\xE5\xAE\x8C",		"\xA7\xBA" => "\xE5\xAE\x8B",		"\xA7\xBB" => "\xE5\xAE\x8F",		"\xA7\xBC" => "\xE5\xB0\xAC",		"\xA7\xBD" => "\xE5\xB1\x80",		"\xA7\xBE" => "\xE5\xB1\x81",		"\xA7\xBF" => "\xE5\xB0\xBF",		"\xA7\xC0" => "\xE5\xB0\xBE",		"\xA7\xC1" => "\xE5\xB2\x90",		"\xA7\xC2" => "\xE5\xB2\x91",		"\xA7\xC3" => "\xE5\xB2\x94",		"\xA7\xC4" => "\xE5\xB2\x8C",		"\xA7\xC5" => "\xE5\xB7\xAB",		"\xA7\xC6" => "\xE5\xB8\x8C",		"\xA7\xC7" => "\xE5\xBA\x8F",		"\xA7\xC8" => "\xE5\xBA\x87",		"\xA7\xC9" => "\xE5\xBA\x8A",		"\xA7\xCA" => "\xE5\xBB\xB7",		"\xA7\xCB" => "\xE5\xBC\x84",		"\xA7\xCC" => "\xE5\xBC\x9F",		"\xA7\xCD" => "\xE5\xBD\xA4",		"\xA7\xCE" => "\xE5\xBD\xA2",		"\xA7\xCF" => "\xE5\xBD\xB7",		"\xA7\xD0" => "\xE5\xBD\xB9",		"\xA7\xD1" => "\xE5\xBF\x98",		"\xA7\xD2" => "\xE5\xBF\x8C",		"\xA7\xD3" => "\xE5\xBF\x97",		"\xA7\xD4" => "\xE5\xBF\x8D",		"\xA7\xD5" => "\xE5\xBF\xB1",		"\xA7\xD6" => "\xE5\xBF\xAB",		"\xA7\xD7" => "\xE5\xBF\xB8",		"\xA7\xD8" => "\xE5\xBF\xAA",		"\xA7\xD9" => "\xE6\x88\x92",		"\xA7\xDA" => "\xE6\x88\x91",		"\xA7\xDB" => "\xE6\x8A\x84",		"\xA7\xDC" => "\xE6\x8A\x97",		"\xA7\xDD" => "\xE6\x8A\x96",		"\xA7\xDE" => "\xE6\x8A\x80",		"\xA7\xDF" => "\xE6\x89\xB6",		"\xA7\xE0" => "\xE6\x8A\x89",		"\xA7\xE1" => "\xE6\x89\xAD",		"\xA7\xE2" => "\xE6\x8A\x8A",		"\xA7\xE3" => "\xE6\x89\xBC",		"\xA7\xE4" => "\xE6\x89\xBE",		"\xA7\xE5" => "\xE6\x89\xB9",		"\xA7\xE6" => "\xE6\x89\xB3",		"\xA7\xE7" => "\xE6\x8A\x92",		"\xA7\xE8" => "\xE6\x89\xAF",		"\xA7\xE9" => "\xE6\x8A\x98",		"\xA7\xEA" => "\xE6\x89\xAE",		"\xA7\xEB" => "\xE6\x8A\x95",		"\xA7\xEC" => "\xE6\x8A\x93",		"\xA7\xED" => "\xE6\x8A\x91",		"\xA7\xEE" => "\xE6\x8A\x86",		"\xA7\xEF" => "\xE6\x94\xB9",		"\xA7\xF0" => "\xE6\x94\xBB",		"\xA7\xF1" => "\xE6\x94\xB8",		"\xA7\xF2" => "\xE6\x97\xB1",		"\xA7\xF3" => "\xE6\x9B\xB4",		"\xA7\xF4" => "\xE6\x9D\x9F",		"\xA7\xF5" => "\xE6\x9D\x8E",		"\xA7\xF6" => "\xE6\x9D\x8F",		"\xA7\xF7" => "\xE6\x9D\x90",		"\xA7\xF8" => "\xE6\x9D\x91",		"\xA7\xF9" => "\xE6\x9D\x9C",		"\xA7\xFA" => "\xE6\x9D\x96",		"\xA7\xFB" => "\xE6\x9D\x9E",		"\xA7\xFC" => "\xE6\x9D\x89",		"\xA7\xFD" => "\xE6\x9D\x86",		"\xA7\xFE" => "\xE6\x9D\xA0",		"\xA8\x40" => "\xE6\x9D\x93",		"\xA8\x41" => "\xE6\x9D\x97",		"\xA8\x42" => "\xE6\xAD\xA5",		"\xA8\x43" => "\xE6\xAF\x8F",		"\xA8\x44" => "\xE6\xB1\x82",		"\xA8\x45" => "\xE6\xB1\x9E",		"\xA8\x46" => "\xE6\xB2\x99",		"\xA8\x47" => "\xE6\xB2\x81",		"\xA8\x48" => "\xE6\xB2\x88",		"\xA8\x49" => "\xE6\xB2\x89",		"\xA8\x4A" => "\xE6\xB2\x85",		"\xA8\x4B" => "\xE6\xB2\x9B",		"\xA8\x4C" => "\xE6\xB1\xAA",		"\xA8\x4D" => "\xE6\xB1\xBA",		"\xA8\x4E" => "\xE6\xB2\x90",		"\xA8\x4F" => "\xE6\xB1\xB0",		"\xA8\x50" => "\xE6\xB2\x8C",		"\xA8\x51" => "\xE6\xB1\xA8",		"\xA8\x52" => "\xE6\xB2\x96",		"\xA8\x53" => "\xE6\xB2\x92",		"\xA8\x54" => "\xE6\xB1\xBD",		"\xA8\x55" => "\xE6\xB2\x83",		"\xA8\x56" => "\xE6\xB1\xB2",		"\xA8\x57" => "\xE6\xB1\xBE",		"\xA8\x58" => "\xE6\xB1\xB4",		"\xA8\x59" => "\xE6\xB2\x86",		"\xA8\x5A" => "\xE6\xB1\xB6",		"\xA8\x5B" => "\xE6\xB2\x8D",		"\xA8\x5C" => "\xE6\xB2\x94",		"\xA8\x5D" => "\xE6\xB2\x98",		"\xA8\x5E" => "\xE6\xB2\x82",		"\xA8\x5F" => "\xE7\x81\xB6",		"\xA8\x60" => "\xE7\x81\xBC",		"\xA8\x61" => "\xE7\x81\xBD",		"\xA8\x62" => "\xE7\x81\xB8",		"\xA8\x63" => "\xE7\x89\xA2",		"\xA8\x64" => "\xE7\x89\xA1",		"\xA8\x65" => "\xE7\x89\xA0",		"\xA8\x66" => "\xE7\x8B\x84",		"\xA8\x67" => "\xE7\x8B\x82",		"\xA8\x68" => "\xE7\x8E\x96",		"\xA8\x69" => "\xE7\x94\xAC",		"\xA8\x6A" => "\xE7\x94\xAB",		"\xA8\x6B" => "\xE7\x94\xB7",		"\xA8\x6C" => "\xE7\x94\xB8",		"\xA8\x6D" => "\xE7\x9A\x82",		"\xA8\x6E" => "\xE7\x9B\xAF",		"\xA8\x6F" => "\xE7\x9F\xA3",		"\xA8\x70" => "\xE7\xA7\x81",		"\xA8\x71" => "\xE7\xA7\x80",		"\xA8\x72" => "\xE7\xA6\xBF",		"\xA8\x73" => "\xE7\xA9\xB6",		"\xA8\x74" => "\xE7\xB3\xBB",		"\xA8\x75" => "\xE7\xBD\x95",		"\xA8\x76" => "\xE8\x82\x96",		"\xA8\x77" => "\xE8\x82\x93",		"\xA8\x78" => "\xE8\x82\x9D",		"\xA8\x79" => "\xE8\x82\x98",		"\xA8\x7A" => "\xE8\x82\x9B",		"\xA8\x7B" => "\xE8\x82\x9A",		"\xA8\x7C" => "\xE8\x82\xB2",		"\xA8\x7D" => "\xE8\x89\xAF",		"\xA8\x7E" => "\xE8\x8A\x92",		"\xA8\xA1" => "\xE8\x8A\x8B",		"\xA8\xA2" => "\xE8\x8A\x8D",		"\xA8\xA3" => "\xE8\xA6\x8B",		"\xA8\xA4" => "\xE8\xA7\x92",		"\xA8\xA5" => "\xE8\xA8\x80",		"\xA8\xA6" => "\xE8\xB0\xB7",		"\xA8\xA7" => "\xE8\xB1\x86",		"\xA8\xA8" => "\xE8\xB1\x95",		"\xA8\xA9" => "\xE8\xB2\x9D",		"\xA8\xAA" => "\xE8\xB5\xA4",		"\xA8\xAB" => "\xE8\xB5\xB0",		"\xA8\xAC" => "\xE8\xB6\xB3",		"\xA8\xAD" => "\xE8\xBA\xAB",		"\xA8\xAE" => "\xE8\xBB\x8A",		"\xA8\xAF" => "\xE8\xBE\x9B",		"\xA8\xB0" => "\xE8\xBE\xB0",		"\xA8\xB1" => "\xE8\xBF\x82",		"\xA8\xB2" => "\xE8\xBF\x86",		"\xA8\xB3" => "\xE8\xBF\x85",		"\xA8\xB4" => "\xE8\xBF\x84",		"\xA8\xB5" => "\xE5\xB7\xA1",		"\xA8\xB6" => "\xE9\x82\x91",		"\xA8\xB7" => "\xE9\x82\xA2",		"\xA8\xB8" => "\xE9\x82\xAA",		"\xA8\xB9" => "\xE9\x82\xA6",		"\xA8\xBA" => "\xE9\x82\xA3",		"\xA8\xBB" => "\xE9\x85\x89",		"\xA8\xBC" => "\xE9\x87\x86",		"\xA8\xBD" => "\xE9\x87\x8C",		"\xA8\xBE" => "\xE9\x98\xB2",		"\xA8\xBF" => "\xE9\x98\xAE",		"\xA8\xC0" => "\xE9\x98\xB1",		"\xA8\xC1" => "\xE9\x98\xAA",		"\xA8\xC2" => "\xE9\x98\xAC",		"\xA8\xC3" => "\xE4\xB8\xA6",		"\xA8\xC4" => "\xE4\xB9\x96",		"\xA8\xC5" => "\xE4\xB9\xB3",		"\xA8\xC6" => "\xE4\xBA\x8B",		"\xA8\xC7" => "\xE4\xBA\x9B",		"\xA8\xC8" => "\xE4\xBA\x9E",		"\xA8\xC9" => "\xE4\xBA\xAB",		"\xA8\xCA" => "\xE4\xBA\xAC",		"\xA8\xCB" => "\xE4\xBD\xAF",		"\xA8\xCC" => "\xE4\xBE\x9D",		"\xA8\xCD" => "\xE4\xBE\x8D",		"\xA8\xCE" => "\xE4\xBD\xB3",		"\xA8\xCF" => "\xE4\xBD\xBF",		"\xA8\xD0" => "\xE4\xBD\xAC",		"\xA8\xD1" => "\xE4\xBE\x9B",		"\xA8\xD2" => "\xE4\xBE\x8B",		"\xA8\xD3" => "\xE4\xBE\x86",		"\xA8\xD4" => "\xE4\xBE\x83",		"\xA8\xD5" => "\xE4\xBD\xB0",		"\xA8\xD6" => "\xE4\xBD\xB5",		"\xA8\xD7" => "\xE4\xBE\x88",		"\xA8\xD8" => "\xE4\xBD\xA9",		"\xA8\xD9" => "\xE4\xBD\xBB",		"\xA8\xDA" => "\xE4\xBE\x96",		"\xA8\xDB" => "\xE4\xBD\xBE",		"\xA8\xDC" => "\xE4\xBE\x8F",		"\xA8\xDD" => "\xE4\xBE\x91",		"\xA8\xDE" => "\xE4\xBD\xBA",		"\xA8\xDF" => "\xE5\x85\x94",		"\xA8\xE0" => "\xE5\x85\x92",		"\xA8\xE1" => "\xE5\x85\x95",		"\xA8\xE2" => "\xE5\x85\xA9",		"\xA8\xE3" => "\xE5\x85\xB7",		"\xA8\xE4" => "\xE5\x85\xB6",		"\xA8\xE5" => "\xE5\x85\xB8",		"\xA8\xE6" => "\xE5\x86\xBD",		"\xA8\xE7" => "\xE5\x87\xBD",		"\xA8\xE8" => "\xE5\x88\xBB",		"\xA8\xE9" => "\xE5\x88\xB8",		"\xA8\xEA" => "\xE5\x88\xB7",		"\xA8\xEB" => "\xE5\x88\xBA",		"\xA8\xEC" => "\xE5\x88\xB0",		"\xA8\xED" => "\xE5\x88\xAE",		"\xA8\xEE" => "\xE5\x88\xB6",		"\xA8\xEF" => "\xE5\x89\x81",		"\xA8\xF0" => "\xE5\x8A\xBE",		"\xA8\xF1" => "\xE5\x8A\xBB",		"\xA8\xF2" => "\xE5\x8D\x92",		"\xA8\xF3" => "\xE5\x8D\x94",		"\xA8\xF4" => "\xE5\x8D\x93",		"\xA8\xF5" => "\xE5\x8D\x91",		"\xA8\xF6" => "\xE5\x8D\xA6",		"\xA8\xF7" => "\xE5\x8D\xB7",		"\xA8\xF8" => "\xE5\x8D\xB8",		"\xA8\xF9" => "\xE5\x8D\xB9",		"\xA8\xFA" => "\xE5\x8F\x96",		"\xA8\xFB" => "\xE5\x8F\x94",		"\xA8\xFC" => "\xE5\x8F\x97",		"\xA8\xFD" => "\xE5\x91\xB3",		"\xA8\xFE" => "\xE5\x91\xB5",		"\xA9\x40" => "\xE5\x92\x96",		"\xA9\x41" => "\xE5\x91\xB8",		"\xA9\x42" => "\xE5\x92\x95",		"\xA9\x43" => "\xE5\x92\x80",		"\xA9\x44" => "\xE5\x91\xBB",		"\xA9\x45" => "\xE5\x91\xB7",		"\xA9\x46" => "\xE5\x92\x84",		"\xA9\x47" => "\xE5\x92\x92",		"\xA9\x48" => "\xE5\x92\x86",		"\xA9\x49" => "\xE5\x91\xBC",		"\xA9\x4A" => "\xE5\x92\x90",		"\xA9\x4B" => "\xE5\x91\xB1",		"\xA9\x4C" => "\xE5\x91\xB6",		"\xA9\x4D" => "\xE5\x92\x8C",		"\xA9\x4E" => "\xE5\x92\x9A",		"\xA9\x4F" => "\xE5\x91\xA2",		"\xA9\x50" => "\xE5\x91\xA8",		"\xA9\x51" => "\xE5\x92\x8B",		"\xA9\x52" => "\xE5\x91\xBD",		"\xA9\x53" => "\xE5\x92\x8E",		"\xA9\x54" => "\xE5\x9B\xBA",		"\xA9\x55" => "\xE5\x9E\x83",		"\xA9\x56" => "\xE5\x9D\xB7",		"\xA9\x57" => "\xE5\x9D\xAA",		"\xA9\x58" => "\xE5\x9D\xA9",		"\xA9\x59" => "\xE5\x9D\xA1",		"\xA9\x5A" => "\xE5\x9D\xA6",		"\xA9\x5B" => "\xE5\x9D\xA4",		"\xA9\x5C" => "\xE5\x9D\xBC",		"\xA9\x5D" => "\xE5\xA4\x9C",		"\xA9\x5E" => "\xE5\xA5\x89",		"\xA9\x5F" => "\xE5\xA5\x87",		"\xA9\x60" => "\xE5\xA5\x88",		"\xA9\x61" => "\xE5\xA5\x84",		"\xA9\x62" => "\xE5\xA5\x94",		"\xA9\x63" => "\xE5\xA6\xBE",		"\xA9\x64" => "\xE5\xA6\xBB",		"\xA9\x65" => "\xE5\xA7\x94",		"\xA9\x66" => "\xE5\xA6\xB9",		"\xA9\x67" => "\xE5\xA6\xAE",		"\xA9\x68" => "\xE5\xA7\x91",		"\xA9\x69" => "\xE5\xA7\x86",		"\xA9\x6A" => "\xE5\xA7\x90",		"\xA9\x6B" => "\xE5\xA7\x8D",		"\xA9\x6C" => "\xE5\xA7\x8B",		"\xA9\x6D" => "\xE5\xA7\x93",		"\xA9\x6E" => "\xE5\xA7\x8A",		"\xA9\x6F" => "\xE5\xA6\xAF",		"\xA9\x70" => "\xE5\xA6\xB3",		"\xA9\x71" => "\xE5\xA7\x92",		"\xA9\x72" => "\xE5\xA7\x85",		"\xA9\x73" => "\xE5\xAD\x9F",		"\xA9\x74" => "\xE5\xAD\xA4",		"\xA9\x75" => "\xE5\xAD\xA3",		"\xA9\x76" => "\xE5\xAE\x97",		"\xA9\x77" => "\xE5\xAE\x9A",		"\xA9\x78" => "\xE5\xAE\x98",		"\xA9\x79" => "\xE5\xAE\x9C",		"\xA9\x7A" => "\xE5\xAE\x99",		"\xA9\x7B" => "\xE5\xAE\x9B",		"\xA9\x7C" => "\xE5\xB0\x9A",		"\xA9\x7D" => "\xE5\xB1\x88",		"\xA9\x7E" => "\xE5\xB1\x85",		"\xA9\xA1" => "\xE5\xB1\x86",		"\xA9\xA2" => "\xE5\xB2\xB7",		"\xA9\xA3" => "\xE5\xB2\xA1",		"\xA9\xA4" => "\xE5\xB2\xB8",		"\xA9\xA5" => "\xE5\xB2\xA9",		"\xA9\xA6" => "\xE5\xB2\xAB",		"\xA9\xA7" => "\xE5\xB2\xB1",		"\xA9\xA8" => "\xE5\xB2\xB3",		"\xA9\xA9" => "\xE5\xB8\x98",		"\xA9\xAA" => "\xE5\xB8\x9A",		"\xA9\xAB" => "\xE5\xB8\x96",		"\xA9\xAC" => "\xE5\xB8\x95",		"\xA9\xAD" => "\xE5\xB8\x9B",		"\xA9\xAE" => "\xE5\xB8\x91",		"\xA9\xAF" => "\xE5\xB9\xB8",		"\xA9\xB0" => "\xE5\xBA\x9A",		"\xA9\xB1" => "\xE5\xBA\x97",		"\xA9\xB2" => "\xE5\xBA\x9C",		"\xA9\xB3" => "\xE5\xBA\x95",		"\xA9\xB4" => "\xE5\xBA\x96",		"\xA9\xB5" => "\xE5\xBB\xB6",		"\xA9\xB6" => "\xE5\xBC\xA6",		"\xA9\xB7" => "\xE5\xBC\xA7",		"\xA9\xB8" => "\xE5\xBC\xA9",		"\xA9\xB9" => "\xE5\xBE\x80",		"\xA9\xBA" => "\xE5\xBE\x81",		"\xA9\xBB" => "\xE5\xBD\xBF",		"\xA9\xBC" => "\xE5\xBD\xBC",		"\xA9\xBD" => "\xE5\xBF\x9D",		"\xA9\xBE" => "\xE5\xBF\xA0",		"\xA9\xBF" => "\xE5\xBF\xBD",		"\xA9\xC0" => "\xE5\xBF\xB5",		"\xA9\xC1" => "\xE5\xBF\xBF",		"\xA9\xC2" => "\xE6\x80\x8F",		"\xA9\xC3" => "\xE6\x80\x94",		"\xA9\xC4" => "\xE6\x80\xAF",		"\xA9\xC5" => "\xE6\x80\xB5",		"\xA9\xC6" => "\xE6\x80\x96",		"\xA9\xC7" => "\xE6\x80\xAA",		"\xA9\xC8" => "\xE6\x80\x95",		"\xA9\xC9" => "\xE6\x80\xA1",		"\xA9\xCA" => "\xE6\x80\xA7",		"\xA9\xCB" => "\xE6\x80\xA9",		"\xA9\xCC" => "\xE6\x80\xAB",		"\xA9\xCD" => "\xE6\x80\x9B",		"\xA9\xCE" => "\xE6\x88\x96",		"\xA9\xCF" => "\xE6\x88\x95",		"\xA9\xD0" => "\xE6\x88\xBF",		"\xA9\xD1" => "\xE6\x88\xBE",		"\xA9\xD2" => "\xE6\x89\x80",		"\xA9\xD3" => "\xE6\x89\xBF",		"\xA9\xD4" => "\xE6\x8B\x89",		"\xA9\xD5" => "\xE6\x8B\x8C",		"\xA9\xD6" => "\xE6\x8B\x84",		"\xA9\xD7" => "\xE6\x8A\xBF",		"\xA9\xD8" => "\xE6\x8B\x82",		"\xA9\xD9" => "\xE6\x8A\xB9",		"\xA9\xDA" => "\xE6\x8B\x92",		"\xA9\xDB" => "\xE6\x8B\x9B",		"\xA9\xDC" => "\xE6\x8A\xAB",		"\xA9\xDD" => "\xE6\x8B\x93",		"\xA9\xDE" => "\xE6\x8B\x94",		"\xA9\xDF" => "\xE6\x8B\x8B",		"\xA9\xE0" => "\xE6\x8B\x88",		"\xA9\xE1" => "\xE6\x8A\xA8",		"\xA9\xE2" => "\xE6\x8A\xBD",		"\xA9\xE3" => "\xE6\x8A\xBC",		"\xA9\xE4" => "\xE6\x8B\x90",		"\xA9\xE5" => "\xE6\x8B\x99",		"\xA9\xE6" => "\xE6\x8B\x87",		"\xA9\xE7" => "\xE6\x8B\x8D",		"\xA9\xE8" => "\xE6\x8A\xB5",		"\xA9\xE9" => "\xE6\x8B\x9A",		"\xA9\xEA" => "\xE6\x8A\xB1",		"\xA9\xEB" => "\xE6\x8B\x98",		"\xA9\xEC" => "\xE6\x8B\x96",		"\xA9\xED" => "\xE6\x8B\x97",		"\xA9\xEE" => "\xE6\x8B\x86",		"\xA9\xEF" => "\xE6\x8A\xAC",		"\xA9\xF0" => "\xE6\x8B\x8E",		"\xA9\xF1" => "\xE6\x94\xBE",		"\xA9\xF2" => "\xE6\x96\xA7",		"\xA9\xF3" => "\xE6\x96\xBC",		"\xA9\xF4" => "\xE6\x97\xBA",		"\xA9\xF5" => "\xE6\x98\x94",		"\xA9\xF6" => "\xE6\x98\x93",		"\xA9\xF7" => "\xE6\x98\x8C",		"\xA9\xF8" => "\xE6\x98\x86",		"\xA9\xF9" => "\xE6\x98\x82",		"\xA9\xFA" => "\xE6\x98\x8E",		"\xA9\xFB" => "\xE6\x98\x80",		"\xA9\xFC" => "\xE6\x98\x8F",		"\xA9\xFD" => "\xE6\x98\x95",		"\xA9\xFE" => "\xE6\x98\x8A",		"\xAA\x40" => "\xE6\x98\x87",		"\xAA\x41" => "\xE6\x9C\x8D",		"\xAA\x42" => "\xE6\x9C\x8B",		"\xAA\x43" => "\xE6\x9D\xAD",		"\xAA\x44" => "\xE6\x9E\x8B",		"\xAA\x45" => "\xE6\x9E\x95",		"\xAA\x46" => "\xE6\x9D\xB1",		"\xAA\x47" => "\xE6\x9E\x9C",		"\xAA\x48" => "\xE6\x9D\xB3",		"\xAA\x49" => "\xE6\x9D\xB7",		"\xAA\x4A" => "\xE6\x9E\x87",		"\xAA\x4B" => "\xE6\x9E\x9D",		"\xAA\x4C" => "\xE6\x9E\x97",		"\xAA\x4D" => "\xE6\x9D\xAF",		"\xAA\x4E" => "\xE6\x9D\xB0",		"\xAA\x4F" => "\xE6\x9D\xBF",		"\xAA\x50" => "\xE6\x9E\x89",		"\xAA\x51" => "\xE6\x9D\xBE",		"\xAA\x52" => "\xE6\x9E\x90",		"\xAA\x53" => "\xE6\x9D\xB5",		"\xAA\x54" => "\xE6\x9E\x9A",		"\xAA\x55" => "\xE6\x9E\x93",		"\xAA\x56" => "\xE6\x9D\xBC",		"\xAA\x57" => "\xE6\x9D\xAA",		"\xAA\x58" => "\xE6\x9D\xB2",		"\xAA\x59" => "\xE6\xAC\xA3",		"\xAA\x5A" => "\xE6\xAD\xA6",		"\xAA\x5B" => "\xE6\xAD\xA7",		"\xAA\x5C" => "\xE6\xAD\xBF",		"\xAA\x5D" => "\xE6\xB0\x93",		"\xAA\x5E" => "\xE6\xB0\x9B",		"\xAA\x5F" => "\xE6\xB3\xA3",		"\xAA\x60" => "\xE6\xB3\xA8",		"\xAA\x61" => "\xE6\xB3\xB3",		"\xAA\x62" => "\xE6\xB2\xB1",		"\xAA\x63" => "\xE6\xB3\x8C",		"\xAA\x64" => "\xE6\xB3\xA5",		"\xAA\x65" => "\xE6\xB2\xB3",		"\xAA\x66" => "\xE6\xB2\xBD",		"\xAA\x67" => "\xE6\xB2\xBE",		"\xAA\x68" => "\xE6\xB2\xBC",		"\xAA\x69" => "\xE6\xB3\xA2",		"\xAA\x6A" => "\xE6\xB2\xAB",		"\xAA\x6B" => "\xE6\xB3\x95",		"\xAA\x6C" => "\xE6\xB3\x93",		"\xAA\x6D" => "\xE6\xB2\xB8",		"\xAA\x6E" => "\xE6\xB3\x84",		"\xAA\x6F" => "\xE6\xB2\xB9",		"\xAA\x70" => "\xE6\xB3\x81",		"\xAA\x71" => "\xE6\xB2\xAE",		"\xAA\x72" => "\xE6\xB3\x97",		"\xAA\x73" => "\xE6\xB3\x85",		"\xAA\x74" => "\xE6\xB3\xB1",		"\xAA\x75" => "\xE6\xB2\xBF",		"\xAA\x76" => "\xE6\xB2\xBB",		"\xAA\x77" => "\xE6\xB3\xA1",		"\xAA\x78" => "\xE6\xB3\x9B",		"\xAA\x79" => "\xE6\xB3\x8A",		"\xAA\x7A" => "\xE6\xB2\xAC",		"\xAA\x7B" => "\xE6\xB3\xAF",		"\xAA\x7C" => "\xE6\xB3\x9C",		"\xAA\x7D" => "\xE6\xB3\x96",		"\xAA\x7E" => "\xE6\xB3\xA0",		"\xAA\xA1" => "\xE7\x82\x95",		"\xAA\xA2" => "\xE7\x82\x8E",		"\xAA\xA3" => "\xE7\x82\x92",		"\xAA\xA4" => "\xE7\x82\x8A",		"\xAA\xA5" => "\xE7\x82\x99",		"\xAA\xA6" => "\xE7\x88\xAC",		"\xAA\xA7" => "\xE7\x88\xAD",		"\xAA\xA8" => "\xE7\x88\xB8",		"\xAA\xA9" => "\xE7\x89\x88",		"\xAA\xAA" => "\xE7\x89\xA7",		"\xAA\xAB" => "\xE7\x89\xA9",		"\xAA\xAC" => "\xE7\x8B\x80",		"\xAA\xAD" => "\xE7\x8B\x8E",		"\xAA\xAE" => "\xE7\x8B\x99",		"\xAA\xAF" => "\xE7\x8B\x97",		"\xAA\xB0" => "\xE7\x8B\x90",		"\xAA\xB1" => "\xE7\x8E\xA9",		"\xAA\xB2" => "\xE7\x8E\xA8",		"\xAA\xB3" => "\xE7\x8E\x9F",		"\xAA\xB4" => "\xE7\x8E\xAB",		"\xAA\xB5" => "\xE7\x8E\xA5",		"\xAA\xB6" => "\xE7\x94\xBD",		"\xAA\xB7" => "\xE7\x96\x9D",		"\xAA\xB8" => "\xE7\x96\x99",		"\xAA\xB9" => "\xE7\x96\x9A",		"\xAA\xBA" => "\xE7\x9A\x84",		"\xAA\xBB" => "\xE7\x9B\x82",		"\xAA\xBC" => "\xE7\x9B\xB2",		"\xAA\xBD" => "\xE7\x9B\xB4",		"\xAA\xBE" => "\xE7\x9F\xA5",		"\xAA\xBF" => "\xE7\x9F\xBD",		"\xAA\xC0" => "\xE7\xA4\xBE",		"\xAA\xC1" => "\xE7\xA5\x80",		"\xAA\xC2" => "\xE7\xA5\x81",		"\xAA\xC3" => "\xE7\xA7\x89",		"\xAA\xC4" => "\xE7\xA7\x88",		"\xAA\xC5" => "\xE7\xA9\xBA",		"\xAA\xC6" => "\xE7\xA9\xB9",		"\xAA\xC7" => "\xE7\xAB\xBA",		"\xAA\xC8" => "\xE7\xB3\xBE",		"\xAA\xC9" => "\xE7\xBD\x94",		"\xAA\xCA" => "\xE7\xBE\x8C",		"\xAA\xCB" => "\xE7\xBE\x8B",		"\xAA\xCC" => "\xE8\x80\x85",		"\xAA\xCD" => "\xE8\x82\xBA",		"\xAA\xCE" => "\xE8\x82\xA5",		"\xAA\xCF" => "\xE8\x82\xA2",		"\xAA\xD0" => "\xE8\x82\xB1",		"\xAA\xD1" => "\xE8\x82\xA1",		"\xAA\xD2" => "\xE8\x82\xAB",		"\xAA\xD3" => "\xE8\x82\xA9",		"\xAA\xD4" => "\xE8\x82\xB4",		"\xAA\xD5" => "\xE8\x82\xAA",		"\xAA\xD6" => "\xE8\x82\xAF",		"\xAA\xD7" => "\xE8\x87\xA5",		"\xAA\xD8" => "\xE8\x87\xBE",		"\xAA\xD9" => "\xE8\x88\x8D",		"\xAA\xDA" => "\xE8\x8A\xB3",		"\xAA\xDB" => "\xE8\x8A\x9D",		"\xAA\xDC" => "\xE8\x8A\x99",		"\xAA\xDD" => "\xE8\x8A\xAD",		"\xAA\xDE" => "\xE8\x8A\xBD",		"\xAA\xDF" => "\xE8\x8A\x9F",		"\xAA\xE0" => "\xE8\x8A\xB9",		"\xAA\xE1" => "\xE8\x8A\xB1",		"\xAA\xE2" => "\xE8\x8A\xAC",		"\xAA\xE3" => "\xE8\x8A\xA5",		"\xAA\xE4" => "\xE8\x8A\xAF",		"\xAA\xE5" => "\xE8\x8A\xB8",		"\xAA\xE6" => "\xE8\x8A\xA3",		"\xAA\xE7" => "\xE8\x8A\xB0",		"\xAA\xE8" => "\xE8\x8A\xBE",		"\xAA\xE9" => "\xE8\x8A\xB7",		"\xAA\xEA" => "\xE8\x99\x8E",		"\xAA\xEB" => "\xE8\x99\xB1",		"\xAA\xEC" => "\xE5\x88\x9D",		"\xAA\xED" => "\xE8\xA1\xA8",		"\xAA\xEE" => "\xE8\xBB\x8B",		"\xAA\xEF" => "\xE8\xBF\x8E",		"\xAA\xF0" => "\xE8\xBF\x94",		"\xAA\xF1" => "\xE8\xBF\x91",		"\xAA\xF2" => "\xE9\x82\xB5",		"\xAA\xF3" => "\xE9\x82\xB8",		"\xAA\xF4" => "\xE9\x82\xB1",		"\xAA\xF5" => "\xE9\x82\xB6",		"\xAA\xF6" => "\xE9\x87\x87",		"\xAA\xF7" => "\xE9\x87\x91",		"\xAA\xF8" => "\xE9\x95\xB7",		"\xAA\xF9" => "\xE9\x96\x80",		"\xAA\xFA" => "\xE9\x98\x9C",		"\xAA\xFB" => "\xE9\x99\x80",		"\xAA\xFC" => "\xE9\x98\xBF",		"\xAA\xFD" => "\xE9\x98\xBB",		"\xAA\xFE" => "\xE9\x99\x84",		"\xAB\x40" => "\xE9\x99\x82",		"\xAB\x41" => "\xE9\x9A\xB9",		"\xAB\x42" => "\xE9\x9B\xA8",		"\xAB\x43" => "\xE9\x9D\x92",		"\xAB\x44" => "\xE9\x9D\x9E",		"\xAB\x45" => "\xE4\xBA\x9F",		"\xAB\x46" => "\xE4\xBA\xAD",		"\xAB\x47" => "\xE4\xBA\xAE",		"\xAB\x48" => "\xE4\xBF\xA1",		"\xAB\x49" => "\xE4\xBE\xB5",		"\xAB\x4A" => "\xE4\xBE\xAF",		"\xAB\x4B" => "\xE4\xBE\xBF",		"\xAB\x4C" => "\xE4\xBF\xA0",		"\xAB\x4D" => "\xE4\xBF\x91",		"\xAB\x4E" => "\xE4\xBF\x8F",		"\xAB\x4F" => "\xE4\xBF\x9D",		"\xAB\x50" => "\xE4\xBF\x83",		"\xAB\x51" => "\xE4\xBE\xB6",		"\xAB\x52" => "\xE4\xBF\x98",		"\xAB\x53" => "\xE4\xBF\x9F",		"\xAB\x54" => "\xE4\xBF\x8A",		"\xAB\x55" => "\xE4\xBF\x97",		"\xAB\x56" => "\xE4\xBE\xAE",		"\xAB\x57" => "\xE4\xBF\x90",		"\xAB\x58" => "\xE4\xBF\x84",		"\xAB\x59" => "\xE4\xBF\x82",		"\xAB\x5A" => "\xE4\xBF\x9A",		"\xAB\x5B" => "\xE4\xBF\x8E",		"\xAB\x5C" => "\xE4\xBF\x9E",		"\xAB\x5D" => "\xE4\xBE\xB7",		"\xAB\x5E" => "\xE5\x85\x97",		"\xAB\x5F" => "\xE5\x86\x92",		"\xAB\x60" => "\xE5\x86\x91",		"\xAB\x61" => "\xE5\x86\xA0",		"\xAB\x62" => "\xE5\x89\x8E",		"\xAB\x63" => "\xE5\x89\x83",		"\xAB\x64" => "\xE5\x89\x8A",		"\xAB\x65" => "\xE5\x89\x8D",		"\xAB\x66" => "\xE5\x89\x8C",		"\xAB\x67" => "\xE5\x89\x8B",		"\xAB\x68" => "\xE5\x89\x87",		"\xAB\x69" => "\xE5\x8B\x87",		"\xAB\x6A" => "\xE5\x8B\x89",		"\xAB\x6B" => "\xE5\x8B\x83",		"\xAB\x6C" => "\xE5\x8B\x81",		"\xAB\x6D" => "\xE5\x8C\x8D",		"\xAB\x6E" => "\xE5\x8D\x97",		"\xAB\x6F" => "\xE5\x8D\xBB",		"\xAB\x70" => "\xE5\x8E\x9A",		"\xAB\x71" => "\xE5\x8F\x9B",		"\xAB\x72" => "\xE5\x92\xAC",		"\xAB\x73" => "\xE5\x93\x80",		"\xAB\x74" => "\xE5\x92\xA8",		"\xAB\x75" => "\xE5\x93\x8E",		"\xAB\x76" => "\xE5\x93\x89",		"\xAB\x77" => "\xE5\x92\xB8",		"\xAB\x78" => "\xE5\x92\xA6",		"\xAB\x79" => "\xE5\x92\xB3",		"\xAB\x7A" => "\xE5\x93\x87",		"\xAB\x7B" => "\xE5\x93\x82",		"\xAB\x7C" => "\xE5\x92\xBD",		"\xAB\x7D" => "\xE5\x92\xAA",		"\xAB\x7E" => "\xE5\x93\x81",		"\xAB\xA1" => "\xE5\x93\x84",		"\xAB\xA2" => "\xE5\x93\x88",		"\xAB\xA3" => "\xE5\x92\xAF",		"\xAB\xA4" => "\xE5\x92\xAB",		"\xAB\xA5" => "\xE5\x92\xB1",		"\xAB\xA6" => "\xE5\x92\xBB",		"\xAB\xA7" => "\xE5\x92\xA9",		"\xAB\xA8" => "\xE5\x92\xA7",		"\xAB\xA9" => "\xE5\x92\xBF",		"\xAB\xAA" => "\xE5\x9B\xBF",		"\xAB\xAB" => "\xE5\x9E\x82",		"\xAB\xAC" => "\xE5\x9E\x8B",		"\xAB\xAD" => "\xE5\x9E\xA0",		"\xAB\xAE" => "\xE5\x9E\xA3",		"\xAB\xAF" => "\xE5\x9E\xA2",		"\xAB\xB0" => "\xE5\x9F\x8E",		"\xAB\xB1" => "\xE5\x9E\xAE",		"\xAB\xB2" => "\xE5\x9E\x93",		"\xAB\xB3" => "\xE5\xA5\x95",		"\xAB\xB4" => "\xE5\xA5\x91",		"\xAB\xB5" => "\xE5\xA5\x8F",		"\xAB\xB6" => "\xE5\xA5\x8E",		"\xAB\xB7" => "\xE5\xA5\x90",		"\xAB\xB8" => "\xE5\xA7\x9C",		"\xAB\xB9" => "\xE5\xA7\x98",		"\xAB\xBA" => "\xE5\xA7\xBF",		"\xAB\xBB" => "\xE5\xA7\xA3",		"\xAB\xBC" => "\xE5\xA7\xA8",		"\xAB\xBD" => "\xE5\xA8\x83",		"\xAB\xBE" => "\xE5\xA7\xA5",		"\xAB\xBF" => "\xE5\xA7\xAA",		"\xAB\xC0" => "\xE5\xA7\x9A",		"\xAB\xC1" => "\xE5\xA7\xA6",		"\xAB\xC2" => "\xE5\xA8\x81",		"\xAB\xC3" => "\xE5\xA7\xBB",		"\xAB\xC4" => "\xE5\xAD\xA9",		"\xAB\xC5" => "\xE5\xAE\xA3",		"\xAB\xC6" => "\xE5\xAE\xA6",		"\xAB\xC7" => "\xE5\xAE\xA4",		"\xAB\xC8" => "\xE5\xAE\xA2",		"\xAB\xC9" => "\xE5\xAE\xA5",		"\xAB\xCA" => "\xE5\xB0\x81",		"\xAB\xCB" => "\xE5\xB1\x8E",		"\xAB\xCC" => "\xE5\xB1\x8F",		"\xAB\xCD" => "\xE5\xB1\x8D",		"\xAB\xCE" => "\xE5\xB1\x8B",		"\xAB\xCF" => "\xE5\xB3\x99",		"\xAB\xD0" => "\xE5\xB3\x92",		"\xAB\xD1" => "\xE5\xB7\xB7",		"\xAB\xD2" => "\xE5\xB8\x9D",		"\xAB\xD3" => "\xE5\xB8\xA5",		"\xAB\xD4" => "\xE5\xB8\x9F",		"\xAB\xD5" => "\xE5\xB9\xBD",		"\xAB\xD6" => "\xE5\xBA\xA0",		"\xAB\xD7" => "\xE5\xBA\xA6",		"\xAB\xD8" => "\xE5\xBB\xBA",		"\xAB\xD9" => "\xE5\xBC\x88",		"\xAB\xDA" => "\xE5\xBC\xAD",		"\xAB\xDB" => "\xE5\xBD\xA5",		"\xAB\xDC" => "\xE5\xBE\x88",		"\xAB\xDD" => "\xE5\xBE\x85",		"\xAB\xDE" => "\xE5\xBE\x8A",		"\xAB\xDF" => "\xE5\xBE\x8B",		"\xAB\xE0" => "\xE5\xBE\x87",		"\xAB\xE1" => "\xE5\xBE\x8C",		"\xAB\xE2" => "\xE5\xBE\x89",		"\xAB\xE3" => "\xE6\x80\x92",		"\xAB\xE4" => "\xE6\x80\x9D",		"\xAB\xE5" => "\xE6\x80\xA0",		"\xAB\xE6" => "\xE6\x80\xA5",		"\xAB\xE7" => "\xE6\x80\x8E",		"\xAB\xE8" => "\xE6\x80\xA8",		"\xAB\xE9" => "\xE6\x81\x8D",		"\xAB\xEA" => "\xE6\x81\xB0",		"\xAB\xEB" => "\xE6\x81\xA8",		"\xAB\xEC" => "\xE6\x81\xA2",		"\xAB\xED" => "\xE6\x81\x86",		"\xAB\xEE" => "\xE6\x81\x83",		"\xAB\xEF" => "\xE6\x81\xAC",		"\xAB\xF0" => "\xE6\x81\xAB",		"\xAB\xF1" => "\xE6\x81\xAA",		"\xAB\xF2" => "\xE6\x81\xA4",		"\xAB\xF3" => "\xE6\x89\x81",		"\xAB\xF4" => "\xE6\x8B\x9C",		"\xAB\xF5" => "\xE6\x8C\x96",		"\xAB\xF6" => "\xE6\x8C\x89",		"\xAB\xF7" => "\xE6\x8B\xBC",		"\xAB\xF8" => "\xE6\x8B\xAD",		"\xAB\xF9" => "\xE6\x8C\x81",		"\xAB\xFA" => "\xE6\x8B\xAE",		"\xAB\xFB" => "\xE6\x8B\xBD",		"\xAB\xFC" => "\xE6\x8C\x87",		"\xAB\xFD" => "\xE6\x8B\xB1",		"\xAB\xFE" => "\xE6\x8B\xB7",		"\xAC\x40" => "\xE6\x8B\xAF",		"\xAC\x41" => "\xE6\x8B\xAC",		"\xAC\x42" => "\xE6\x8B\xBE",		"\xAC\x43" => "\xE6\x8B\xB4",		"\xAC\x44" => "\xE6\x8C\x91",		"\xAC\x45" => "\xE6\x8C\x82",		"\xAC\x46" => "\xE6\x94\xBF",		"\xAC\x47" => "\xE6\x95\x85",		"\xAC\x48" => "\xE6\x96\xAB",		"\xAC\x49" => "\xE6\x96\xBD",		"\xAC\x4A" => "\xE6\x97\xA2",		"\xAC\x4B" => "\xE6\x98\xA5",		"\xAC\x4C" => "\xE6\x98\xAD",		"\xAC\x4D" => "\xE6\x98\xA0",		"\xAC\x4E" => "\xE6\x98\xA7",		"\xAC\x4F" => "\xE6\x98\xAF",		"\xAC\x50" => "\xE6\x98\x9F",		"\xAC\x51" => "\xE6\x98\xA8",		"\xAC\x52" => "\xE6\x98\xB1",		"\xAC\x53" => "\xE6\x98\xA4",		"\xAC\x54" => "\xE6\x9B\xB7",		"\xAC\x55" => "\xE6\x9F\xBF",		"\xAC\x56" => "\xE6\x9F\x93",		"\xAC\x57" => "\xE6\x9F\xB1",		"\xAC\x58" => "\xE6\x9F\x94",		"\xAC\x59" => "\xE6\x9F\x90",		"\xAC\x5A" => "\xE6\x9F\xAC",		"\xAC\x5B" => "\xE6\x9E\xB6",		"\xAC\x5C" => "\xE6\x9E\xAF",		"\xAC\x5D" => "\xE6\x9F\xB5",		"\xAC\x5E" => "\xE6\x9F\xA9",		"\xAC\x5F" => "\xE6\x9F\xAF",		"\xAC\x60" => "\xE6\x9F\x84",		"\xAC\x61" => "\xE6\x9F\x91",		"\xAC\x62" => "\xE6\x9E\xB4",		"\xAC\x63" => "\xE6\x9F\x9A",		"\xAC\x64" => "\xE6\x9F\xA5",		"\xAC\x65" => "\xE6\x9E\xB8",		"\xAC\x66" => "\xE6\x9F\x8F",		"\xAC\x67" => "\xE6\x9F\x9E",		"\xAC\x68" => "\xE6\x9F\xB3",		"\xAC\x69" => "\xE6\x9E\xB0",		"\xAC\x6A" => "\xE6\x9F\x99",		"\xAC\x6B" => "\xE6\x9F\xA2",		"\xAC\x6C" => "\xE6\x9F\x9D",		"\xAC\x6D" => "\xE6\x9F\x92",		"\xAC\x6E" => "\xE6\xAD\xAA",		"\xAC\x6F" => "\xE6\xAE\x83",		"\xAC\x70" => "\xE6\xAE\x86",		"\xAC\x71" => "\xE6\xAE\xB5",		"\xAC\x72" => "\xE6\xAF\x92",		"\xAC\x73" => "\xE6\xAF\x97",		"\xAC\x74" => "\xE6\xB0\x9F",		"\xAC\x75" => "\xE6\xB3\x89",		"\xAC\x76" => "\xE6\xB4\x8B",		"\xAC\x77" => "\xE6\xB4\xB2",		"\xAC\x78" => "\xE6\xB4\xAA",		"\xAC\x79" => "\xE6\xB5\x81",		"\xAC\x7A" => "\xE6\xB4\xA5",		"\xAC\x7B" => "\xE6\xB4\x8C",		"\xAC\x7C" => "\xE6\xB4\xB1",		"\xAC\x7D" => "\xE6\xB4\x9E",		"\xAC\x7E" => "\xE6\xB4\x97",		"\xAC\xA1" => "\xE6\xB4\xBB",		"\xAC\xA2" => "\xE6\xB4\xBD",		"\xAC\xA3" => "\xE6\xB4\xBE",		"\xAC\xA4" => "\xE6\xB4\xB6",		"\xAC\xA5" => "\xE6\xB4\x9B",		"\xAC\xA6" => "\xE6\xB3\xB5",		"\xAC\xA7" => "\xE6\xB4\xB9",		"\xAC\xA8" => "\xE6\xB4\xA7",		"\xAC\xA9" => "\xE6\xB4\xB8",		"\xAC\xAA" => "\xE6\xB4\xA9",		"\xAC\xAB" => "\xE6\xB4\xAE",		"\xAC\xAC" => "\xE6\xB4\xB5",		"\xAC\xAD" => "\xE6\xB4\x8E",		"\xAC\xAE" => "\xE6\xB4\xAB",		"\xAC\xAF" => "\xE7\x82\xAB",		"\xAC\xB0" => "\xE7\x82\xBA",		"\xAC\xB1" => "\xE7\x82\xB3",		"\xAC\xB2" => "\xE7\x82\xAC",		"\xAC\xB3" => "\xE7\x82\xAF",		"\xAC\xB4" => "\xE7\x82\xAD",		"\xAC\xB5" => "\xE7\x82\xB8",		"\xAC\xB6" => "\xE7\x82\xAE",		"\xAC\xB7" => "\xE7\x82\xA4",		"\xAC\xB8" => "\xE7\x88\xB0",		"\xAC\xB9" => "\xE7\x89\xB2",		"\xAC\xBA" => "\xE7\x89\xAF",		"\xAC\xBB" => "\xE7\x89\xB4",		"\xAC\xBC" => "\xE7\x8B\xA9",		"\xAC\xBD" => "\xE7\x8B\xA0",		"\xAC\xBE" => "\xE7\x8B\xA1",		"\xAC\xBF" => "\xE7\x8E\xB7",		"\xAC\xC0" => "\xE7\x8F\x8A",		"\xAC\xC1" => "\xE7\x8E\xBB",		"\xAC\xC2" => "\xE7\x8E\xB2",		"\xAC\xC3" => "\xE7\x8F\x8D",		"\xAC\xC4" => "\xE7\x8F\x80",		"\xAC\xC5" => "\xE7\x8E\xB3",		"\xAC\xC6" => "\xE7\x94\x9A",		"\xAC\xC7" => "\xE7\x94\xAD",		"\xAC\xC8" => "\xE7\x95\x8F",		"\xAC\xC9" => "\xE7\x95\x8C",		"\xAC\xCA" => "\xE7\x95\x8E",		"\xAC\xCB" => "\xE7\x95\x8B",		"\xAC\xCC" => "\xE7\x96\xAB",		"\xAC\xCD" => "\xE7\x96\xA4",		"\xAC\xCE" => "\xE7\x96\xA5",		"\xAC\xCF" => "\xE7\x96\xA2",		"\xAC\xD0" => "\xE7\x96\xA3",		"\xAC\xD1" => "\xE7\x99\xB8",		"\xAC\xD2" => "\xE7\x9A\x86",		"\xAC\xD3" => "\xE7\x9A\x87",		"\xAC\xD4" => "\xE7\x9A\x88",		"\xAC\xD5" => "\xE7\x9B\x88",		"\xAC\xD6" => "\xE7\x9B\x86",		"\xAC\xD7" => "\xE7\x9B\x83",		"\xAC\xD8" => "\xE7\x9B\x85",		"\xAC\xD9" => "\xE7\x9C\x81",		"\xAC\xDA" => "\xE7\x9B\xB9",		"\xAC\xDB" => "\xE7\x9B\xB8",		"\xAC\xDC" => "\xE7\x9C\x89",		"\xAC\xDD" => "\xE7\x9C\x8B",		"\xAC\xDE" => "\xE7\x9B\xBE",		"\xAC\xDF" => "\xE7\x9B\xBC",		"\xAC\xE0" => "\xE7\x9C\x87",		"\xAC\xE1" => "\xE7\x9F\x9C",		"\xAC\xE2" => "\xE7\xA0\x82",		"\xAC\xE3" => "\xE7\xA0\x94",		"\xAC\xE4" => "\xE7\xA0\x8C",		"\xAC\xE5" => "\xE7\xA0\x8D",		"\xAC\xE6" => "\xE7\xA5\x86",		"\xAC\xE7" => "\xE7\xA5\x89",		"\xAC\xE8" => "\xE7\xA5\x88",		"\xAC\xE9" => "\xE7\xA5\x87",		"\xAC\xEA" => "\xE7\xA6\xB9",		"\xAC\xEB" => "\xE7\xA6\xBA",		"\xAC\xEC" => "\xE7\xA7\x91",		"\xAC\xED" => "\xE7\xA7\x92",		"\xAC\xEE" => "\xE7\xA7\x8B",		"\xAC\xEF" => "\xE7\xA9\xBF",		"\xAC\xF0" => "\xE7\xAA\x81",		"\xAC\xF1" => "\xE7\xAB\xBF",		"\xAC\xF2" => "\xE7\xAB\xBD",		"\xAC\xF3" => "\xE7\xB1\xBD",		"\xAC\xF4" => "\xE7\xB4\x82",		"\xAC\xF5" => "\xE7\xB4\x85",		"\xAC\xF6" => "\xE7\xB4\x80",		"\xAC\xF7" => "\xE7\xB4\x89",		"\xAC\xF8" => "\xE7\xB4\x87",		"\xAC\xF9" => "\xE7\xB4\x84",		"\xAC\xFA" => "\xE7\xB4\x86",		"\xAC\xFB" => "\xE7\xBC\xB8",		"\xAC\xFC" => "\xE7\xBE\x8E",		"\xAC\xFD" => "\xE7\xBE\xBF",		"\xAC\xFE" => "\xE8\x80\x84",		"\xAD\x40" => "\xE8\x80\x90",		"\xAD\x41" => "\xE8\x80\x8D",		"\xAD\x42" => "\xE8\x80\x91",		"\xAD\x43" => "\xE8\x80\xB6",		"\xAD\x44" => "\xE8\x83\x96",		"\xAD\x45" => "\xE8\x83\xA5",		"\xAD\x46" => "\xE8\x83\x9A",		"\xAD\x47" => "\xE8\x83\x83",		"\xAD\x48" => "\xE8\x83\x84",		"\xAD\x49" => "\xE8\x83\x8C",		"\xAD\x4A" => "\xE8\x83\xA1",		"\xAD\x4B" => "\xE8\x83\x9B",		"\xAD\x4C" => "\xE8\x83\x8E",		"\xAD\x4D" => "\xE8\x83\x9E",		"\xAD\x4E" => "\xE8\x83\xA4",		"\xAD\x4F" => "\xE8\x83\x9D",		"\xAD\x50" => "\xE8\x87\xB4",		"\xAD\x51" => "\xE8\x88\xA2",		"\xAD\x52" => "\xE8\x8B\xA7",		"\xAD\x53" => "\xE8\x8C\x83",		"\xAD\x54" => "\xE8\x8C\x85",		"\xAD\x55" => "\xE8\x8B\xA3",		"\xAD\x56" => "\xE8\x8B\x9B",		"\xAD\x57" => "\xE8\x8B\xA6",		"\xAD\x58" => "\xE8\x8C\x84",		"\xAD\x59" => "\xE8\x8B\xA5",		"\xAD\x5A" => "\xE8\x8C\x82",		"\xAD\x5B" => "\xE8\x8C\x89",		"\xAD\x5C" => "\xE8\x8B\x92",		"\xAD\x5D" => "\xE8\x8B\x97",		"\xAD\x5E" => "\xE8\x8B\xB1",		"\xAD\x5F" => "\xE8\x8C\x81",		"\xAD\x60" => "\xE8\x8B\x9C",		"\xAD\x61" => "\xE8\x8B\x94",		"\xAD\x62" => "\xE8\x8B\x91",		"\xAD\x63" => "\xE8\x8B\x9E",		"\xAD\x64" => "\xE8\x8B\x93",		"\xAD\x65" => "\xE8\x8B\x9F",		"\xAD\x66" => "\xE8\x8B\xAF",		"\xAD\x67" => "\xE8\x8C\x86",		"\xAD\x68" => "\xE8\x99\x90",		"\xAD\x69" => "\xE8\x99\xB9",		"\xAD\x6A" => "\xE8\x99\xBB",		"\xAD\x6B" => "\xE8\x99\xBA",		"\xAD\x6C" => "\xE8\xA1\x8D",		"\xAD\x6D" => "\xE8\xA1\xAB",		"\xAD\x6E" => "\xE8\xA6\x81",		"\xAD\x6F" => "\xE8\xA7\x94",		"\xAD\x70" => "\xE8\xA8\x88",		"\xAD\x71" => "\xE8\xA8\x82",		"\xAD\x72" => "\xE8\xA8\x83",		"\xAD\x73" => "\xE8\xB2\x9E",		"\xAD\x74" => "\xE8\xB2\xA0",		"\xAD\x75" => "\xE8\xB5\xB4",		"\xAD\x76" => "\xE8\xB5\xB3",		"\xAD\x77" => "\xE8\xB6\xB4",		"\xAD\x78" => "\xE8\xBB\x8D",		"\xAD\x79" => "\xE8\xBB\x8C",		"\xAD\x7A" => "\xE8\xBF\xB0",		"\xAD\x7B" => "\xE8\xBF\xA6",		"\xAD\x7C" => "\xE8\xBF\xA2",		"\xAD\x7D" => "\xE8\xBF\xAA",		"\xAD\x7E" => "\xE8\xBF\xA5",		"\xAD\xA1" => "\xE8\xBF\xAD",		"\xAD\xA2" => "\xE8\xBF\xAB",		"\xAD\xA3" => "\xE8\xBF\xA4",		"\xAD\xA4" => "\xE8\xBF\xA8",		"\xAD\xA5" => "\xE9\x83\x8A",		"\xAD\xA6" => "\xE9\x83\x8E",		"\xAD\xA7" => "\xE9\x83\x81",		"\xAD\xA8" => "\xE9\x83\x83",		"\xAD\xA9" => "\xE9\x85\x8B",		"\xAD\xAA" => "\xE9\x85\x8A",		"\xAD\xAB" => "\xE9\x87\x8D",		"\xAD\xAC" => "\xE9\x96\x82",		"\xAD\xAD" => "\xE9\x99\x90",		"\xAD\xAE" => "\xE9\x99\x8B",		"\xAD\xAF" => "\xE9\x99\x8C",		"\xAD\xB0" => "\xE9\x99\x8D",		"\xAD\xB1" => "\xE9\x9D\xA2",		"\xAD\xB2" => "\xE9\x9D\xA9",		"\xAD\xB3" => "\xE9\x9F\x8B",		"\xAD\xB4" => "\xE9\x9F\xAD",		"\xAD\xB5" => "\xE9\x9F\xB3",		"\xAD\xB6" => "\xE9\xA0\x81",		"\xAD\xB7" => "\xE9\xA2\xA8",		"\xAD\xB8" => "\xE9\xA3\x9B",		"\xAD\xB9" => "\xE9\xA3\x9F",		"\xAD\xBA" => "\xE9\xA6\x96",		"\xAD\xBB" => "\xE9\xA6\x99",		"\xAD\xBC" => "\xE4\xB9\x98",		"\xAD\xBD" => "\xE4\xBA\xB3",		"\xAD\xBE" => "\xE5\x80\x8C",		"\xAD\xBF" => "\xE5\x80\x8D",		"\xAD\xC0" => "\xE5\x80\xA3",		"\xAD\xC1" => "\xE4\xBF\xAF",		"\xAD\xC2" => "\xE5\x80\xA6",		"\xAD\xC3" => "\xE5\x80\xA5",		"\xAD\xC4" => "\xE4\xBF\xB8",		"\xAD\xC5" => "\xE5\x80\xA9",		"\xAD\xC6" => "\xE5\x80\x96",		"\xAD\xC7" => "\xE5\x80\x86",		"\xAD\xC8" => "\xE5\x80\xBC",		"\xAD\xC9" => "\xE5\x80\x9F",		"\xAD\xCA" => "\xE5\x80\x9A",		"\xAD\xCB" => "\xE5\x80\x92",		"\xAD\xCC" => "\xE5\x80\x91",		"\xAD\xCD" => "\xE4\xBF\xBA",		"\xAD\xCE" => "\xE5\x80\x80",		"\xAD\xCF" => "\xE5\x80\x94",		"\xAD\xD0" => "\xE5\x80\xA8",		"\xAD\xD1" => "\xE4\xBF\xB1",		"\xAD\xD2" => "\xE5\x80\xA1",		"\xAD\xD3" => "\xE5\x80\x8B",		"\xAD\xD4" => "\xE5\x80\x99",		"\xAD\xD5" => "\xE5\x80\x98",		"\xAD\xD6" => "\xE4\xBF\xB3",		"\xAD\xD7" => "\xE4\xBF\xAE",		"\xAD\xD8" => "\xE5\x80\xAD",		"\xAD\xD9" => "\xE5\x80\xAA",		"\xAD\xDA" => "\xE4\xBF\xBE",		"\xAD\xDB" => "\xE5\x80\xAB",		"\xAD\xDC" => "\xE5\x80\x89",		"\xAD\xDD" => "\xE5\x85\xBC",		"\xAD\xDE" => "\xE5\x86\xA4",		"\xAD\xDF" => "\xE5\x86\xA5",		"\xAD\xE0" => "\xE5\x86\xA2",		"\xAD\xE1" => "\xE5\x87\x8D",		"\xAD\xE2" => "\xE5\x87\x8C",		"\xAD\xE3" => "\xE5\x87\x86",		"\xAD\xE4" => "\xE5\x87\x8B",		"\xAD\xE5" => "\xE5\x89\x96",		"\xAD\xE6" => "\xE5\x89\x9C",		"\xAD\xE7" => "\xE5\x89\x94",		"\xAD\xE8" => "\xE5\x89\x9B",		"\xAD\xE9" => "\xE5\x89\x9D",		"\xAD\xEA" => "\xE5\x8C\xAA",		"\xAD\xEB" => "\xE5\x8D\xBF",		"\xAD\xEC" => "\xE5\x8E\x9F",		"\xAD\xED" => "\xE5\x8E\x9D",		"\xAD\xEE" => "\xE5\x8F\x9F",		"\xAD\xEF" => "\xE5\x93\xA8",		"\xAD\xF0" => "\xE5\x94\x90",		"\xAD\xF1" => "\xE5\x94\x81",		"\xAD\xF2" => "\xE5\x94\xB7",		"\xAD\xF3" => "\xE5\x93\xBC",		"\xAD\xF4" => "\xE5\x93\xA5",		"\xAD\xF5" => "\xE5\x93\xB2",		"\xAD\xF6" => "\xE5\x94\x86",		"\xAD\xF7" => "\xE5\x93\xBA",		"\xAD\xF8" => "\xE5\x94\x94",		"\xAD\xF9" => "\xE5\x93\xA9",		"\xAD\xFA" => "\xE5\x93\xAD",		"\xAD\xFB" => "\xE5\x93\xA1",		"\xAD\xFC" => "\xE5\x94\x89",		"\xAD\xFD" => "\xE5\x93\xAE",		"\xAD\xFE" => "\xE5\x93\xAA",		"\xAE\x40" => "\xE5\x93\xA6",		"\xAE\x41" => "\xE5\x94\xA7",		"\xAE\x42" => "\xE5\x94\x87",		"\xAE\x43" => "\xE5\x93\xBD",		"\xAE\x44" => "\xE5\x94\x8F",		"\xAE\x45" => "\xE5\x9C\x83",		"\xAE\x46" => "\xE5\x9C\x84",		"\xAE\x47" => "\xE5\x9F\x82",		"\xAE\x48" => "\xE5\x9F\x94",		"\xAE\x49" => "\xE5\x9F\x8B",		"\xAE\x4A" => "\xE5\x9F\x83",		"\xAE\x4B" => "\xE5\xA0\x89",		"\xAE\x4C" => "\xE5\xA4\x8F",		"\xAE\x4D" => "\xE5\xA5\x97",		"\xAE\x4E" => "\xE5\xA5\x98",		"\xAE\x4F" => "\xE5\xA5\x9A",		"\xAE\x50" => "\xE5\xA8\x91",		"\xAE\x51" => "\xE5\xA8\x98",		"\xAE\x52" => "\xE5\xA8\x9C",		"\xAE\x53" => "\xE5\xA8\x9F",		"\xAE\x54" => "\xE5\xA8\x9B",		"\xAE\x55" => "\xE5\xA8\x93",		"\xAE\x56" => "\xE5\xA7\xAC",		"\xAE\x57" => "\xE5\xA8\xA0",		"\xAE\x58" => "\xE5\xA8\xA3",		"\xAE\x59" => "\xE5\xA8\xA9",		"\xAE\x5A" => "\xE5\xA8\xA5",		"\xAE\x5B" => "\xE5\xA8\x8C",		"\xAE\x5C" => "\xE5\xA8\x89",		"\xAE\x5D" => "\xE5\xAD\xAB",		"\xAE\x5E" => "\xE5\xB1\x98",		"\xAE\x5F" => "\xE5\xAE\xB0",		"\xAE\x60" => "\xE5\xAE\xB3",		"\xAE\x61" => "\xE5\xAE\xB6",		"\xAE\x62" => "\xE5\xAE\xB4",		"\xAE\x63" => "\xE5\xAE\xAE",		"\xAE\x64" => "\xE5\xAE\xB5",		"\xAE\x65" => "\xE5\xAE\xB9",		"\xAE\x66" => "\xE5\xAE\xB8",		"\xAE\x67" => "\xE5\xB0\x84",		"\xAE\x68" => "\xE5\xB1\x91",		"\xAE\x69" => "\xE5\xB1\x95",		"\xAE\x6A" => "\xE5\xB1\x90",		"\xAE\x6B" => "\xE5\xB3\xAD",		"\xAE\x6C" => "\xE5\xB3\xBD",		"\xAE\x6D" => "\xE5\xB3\xBB",		"\xAE\x6E" => "\xE5\xB3\xAA",		"\xAE\x6F" => "\xE5\xB3\xA8",		"\xAE\x70" => "\xE5\xB3\xB0",		"\xAE\x71" => "\xE5\xB3\xB6",		"\xAE\x72" => "\xE5\xB4\x81",		"\xAE\x73" => "\xE5\xB3\xB4",		"\xAE\x74" => "\xE5\xB7\xAE",		"\xAE\x75" => "\xE5\xB8\xAD",		"\xAE\x76" => "\xE5\xB8\xAB",		"\xAE\x77" => "\xE5\xBA\xAB",		"\xAE\x78" => "\xE5\xBA\xAD",		"\xAE\x79" => "\xE5\xBA\xA7",		"\xAE\x7A" => "\xE5\xBC\xB1",		"\xAE\x7B" => "\xE5\xBE\x92",		"\xAE\x7C" => "\xE5\xBE\x91",		"\xAE\x7D" => "\xE5\xBE\x90",		"\xAE\x7E" => "\xE6\x81\x99",		"\xAE\xA1" => "\xE6\x81\xA3",		"\xAE\xA2" => "\xE6\x81\xA5",		"\xAE\xA3" => "\xE6\x81\x90",		"\xAE\xA4" => "\xE6\x81\x95",		"\xAE\xA5" => "\xE6\x81\xAD",		"\xAE\xA6" => "\xE6\x81\xA9",		"\xAE\xA7" => "\xE6\x81\xAF",		"\xAE\xA8" => "\xE6\x82\x84",		"\xAE\xA9" => "\xE6\x82\x9F",		"\xAE\xAA" => "\xE6\x82\x9A",		"\xAE\xAB" => "\xE6\x82\x8D",		"\xAE\xAC" => "\xE6\x82\x94",		"\xAE\xAD" => "\xE6\x82\x8C",		"\xAE\xAE" => "\xE6\x82\x85",		"\xAE\xAF" => "\xE6\x82\x96",		"\xAE\xB0" => "\xE6\x89\x87",		"\xAE\xB1" => "\xE6\x8B\xB3",		"\xAE\xB2" => "\xE6\x8C\x88",		"\xAE\xB3" => "\xE6\x8B\xBF",		"\xAE\xB4" => "\xE6\x8D\x8E",		"\xAE\xB5" => "\xE6\x8C\xBE",		"\xAE\xB6" => "\xE6\x8C\xAF",		"\xAE\xB7" => "\xE6\x8D\x95",		"\xAE\xB8" => "\xE6\x8D\x82",		"\xAE\xB9" => "\xE6\x8D\x86",		"\xAE\xBA" => "\xE6\x8D\x8F",		"\xAE\xBB" => "\xE6\x8D\x89",		"\xAE\xBC" => "\xE6\x8C\xBA",		"\xAE\xBD" => "\xE6\x8D\x90",		"\xAE\xBE" => "\xE6\x8C\xBD",		"\xAE\xBF" => "\xE6\x8C\xAA",		"\xAE\xC0" => "\xE6\x8C\xAB",		"\xAE\xC1" => "\xE6\x8C\xA8",		"\xAE\xC2" => "\xE6\x8D\x8D",		"\xAE\xC3" => "\xE6\x8D\x8C",		"\xAE\xC4" => "\xE6\x95\x88",		"\xAE\xC5" => "\xE6\x95\x89",		"\xAE\xC6" => "\xE6\x96\x99",		"\xAE\xC7" => "\xE6\x97\x81",		"\xAE\xC8" => "\xE6\x97\x85",		"\xAE\xC9" => "\xE6\x99\x82",		"\xAE\xCA" => "\xE6\x99\x89",		"\xAE\xCB" => "\xE6\x99\x8F",		"\xAE\xCC" => "\xE6\x99\x83",		"\xAE\xCD" => "\xE6\x99\x92",		"\xAE\xCE" => "\xE6\x99\x8C",		"\xAE\xCF" => "\xE6\x99\x85",		"\xAE\xD0" => "\xE6\x99\x81",		"\xAE\xD1" => "\xE6\x9B\xB8",		"\xAE\xD2" => "\xE6\x9C\x94",		"\xAE\xD3" => "\xE6\x9C\x95",		"\xAE\xD4" => "\xE6\x9C\x97",		"\xAE\xD5" => "\xE6\xA0\xA1",		"\xAE\xD6" => "\xE6\xA0\xB8",		"\xAE\xD7" => "\xE6\xA1\x88",		"\xAE\xD8" => "\xE6\xA1\x86",		"\xAE\xD9" => "\xE6\xA1\x93",		"\xAE\xDA" => "\xE6\xA0\xB9",		"\xAE\xDB" => "\xE6\xA1\x82",		"\xAE\xDC" => "\xE6\xA1\x94",		"\xAE\xDD" => "\xE6\xA0\xA9",		"\xAE\xDE" => "\xE6\xA2\xB3",		"\xAE\xDF" => "\xE6\xA0\x97",		"\xAE\xE0" => "\xE6\xA1\x8C",		"\xAE\xE1" => "\xE6\xA1\x91",		"\xAE\xE2" => "\xE6\xA0\xBD",		"\xAE\xE3" => "\xE6\x9F\xB4",		"\xAE\xE4" => "\xE6\xA1\x90",		"\xAE\xE5" => "\xE6\xA1\x80",		"\xAE\xE6" => "\xE6\xA0\xBC",		"\xAE\xE7" => "\xE6\xA1\x83",		"\xAE\xE8" => "\xE6\xA0\xAA",		"\xAE\xE9" => "\xE6\xA1\x85",		"\xAE\xEA" => "\xE6\xA0\x93",		"\xAE\xEB" => "\xE6\xA0\x98",		"\xAE\xEC" => "\xE6\xA1\x81",		"\xAE\xED" => "\xE6\xAE\x8A",		"\xAE\xEE" => "\xE6\xAE\x89",		"\xAE\xEF" => "\xE6\xAE\xB7",		"\xAE\xF0" => "\xE6\xB0\xA3",		"\xAE\xF1" => "\xE6\xB0\xA7",		"\xAE\xF2" => "\xE6\xB0\xA8",		"\xAE\xF3" => "\xE6\xB0\xA6",		"\xAE\xF4" => "\xE6\xB0\xA4",		"\xAE\xF5" => "\xE6\xB3\xB0",		"\xAE\xF6" => "\xE6\xB5\xAA",		"\xAE\xF7" => "\xE6\xB6\x95",		"\xAE\xF8" => "\xE6\xB6\x88",		"\xAE\xF9" => "\xE6\xB6\x87",		"\xAE\xFA" => "\xE6\xB5\xA6",		"\xAE\xFB" => "\xE6\xB5\xB8",		"\xAE\xFC" => "\xE6\xB5\xB7",		"\xAE\xFD" => "\xE6\xB5\x99",		"\xAE\xFE" => "\xE6\xB6\x93",		"\xAF\x40" => "\xE6\xB5\xAC",		"\xAF\x41" => "\xE6\xB6\x89",		"\xAF\x42" => "\xE6\xB5\xAE",		"\xAF\x43" => "\xE6\xB5\x9A",		"\xAF\x44" => "\xE6\xB5\xB4",		"\xAF\x45" => "\xE6\xB5\xA9",		"\xAF\x46" => "\xE6\xB6\x8C",		"\xAF\x47" => "\xE6\xB6\x8A",		"\xAF\x48" => "\xE6\xB5\xB9",		"\xAF\x49" => "\xE6\xB6\x85",		"\xAF\x4A" => "\xE6\xB5\xA5",		"\xAF\x4B" => "\xE6\xB6\x94",		"\xAF\x4C" => "\xE7\x83\x8A",		"\xAF\x4D" => "\xE7\x83\x98",		"\xAF\x4E" => "\xE7\x83\xA4",		"\xAF\x4F" => "\xE7\x83\x99",		"\xAF\x50" => "\xE7\x83\x88",		"\xAF\x51" => "\xE7\x83\x8F",		"\xAF\x52" => "\xE7\x88\xB9",		"\xAF\x53" => "\xE7\x89\xB9",		"\xAF\x54" => "\xE7\x8B\xBC",		"\xAF\x55" => "\xE7\x8B\xB9",		"\xAF\x56" => "\xE7\x8B\xBD",		"\xAF\x57" => "\xE7\x8B\xB8",		"\xAF\x58" => "\xE7\x8B\xB7",		"\xAF\x59" => "\xE7\x8E\x86",		"\xAF\x5A" => "\xE7\x8F\xAD",		"\xAF\x5B" => "\xE7\x90\x89",		"\xAF\x5C" => "\xE7\x8F\xAE",		"\xAF\x5D" => "\xE7\x8F\xA0",		"\xAF\x5E" => "\xE7\x8F\xAA",		"\xAF\x5F" => "\xE7\x8F\x9E",		"\xAF\x60" => "\xE7\x95\x94",		"\xAF\x61" => "\xE7\x95\x9D",		"\xAF\x62" => "\xE7\x95\x9C",		"\xAF\x63" => "\xE7\x95\x9A",		"\xAF\x64" => "\xE7\x95\x99",		"\xAF\x65" => "\xE7\x96\xBE",		"\xAF\x66" => "\xE7\x97\x85",		"\xAF\x67" => "\xE7\x97\x87",		"\xAF\x68" => "\xE7\x96\xB2",		"\xAF\x69" => "\xE7\x96\xB3",		"\xAF\x6A" => "\xE7\x96\xBD",		"\xAF\x6B" => "\xE7\x96\xBC",		"\xAF\x6C" => "\xE7\x96\xB9",		"\xAF\x6D" => "\xE7\x97\x82",		"\xAF\x6E" => "\xE7\x96\xB8",		"\xAF\x6F" => "\xE7\x9A\x8B",		"\xAF\x70" => "\xE7\x9A\xB0",		"\xAF\x71" => "\xE7\x9B\x8A",		"\xAF\x72" => "\xE7\x9B\x8D",		"\xAF\x73" => "\xE7\x9B\x8E",		"\xAF\x74" => "\xE7\x9C\xA9",		"\xAF\x75" => "\xE7\x9C\x9F",		"\xAF\x76" => "\xE7\x9C\xA0",		"\xAF\x77" => "\xE7\x9C\xA8",		"\xAF\x78" => "\xE7\x9F\xA9",		"\xAF\x79" => "\xE7\xA0\xB0",		"\xAF\x7A" => "\xE7\xA0\xA7",		"\xAF\x7B" => "\xE7\xA0\xB8",		"\xAF\x7C" => "\xE7\xA0\x9D",		"\xAF\x7D" => "\xE7\xA0\xB4",		"\xAF\x7E" => "\xE7\xA0\xB7",		"\xAF\xA1" => "\xE7\xA0\xA5",		"\xAF\xA2" => "\xE7\xA0\xAD",		"\xAF\xA3" => "\xE7\xA0\xA0",		"\xAF\xA4" => "\xE7\xA0\x9F",		"\xAF\xA5" => "\xE7\xA0\xB2",		"\xAF\xA6" => "\xE7\xA5\x95",		"\xAF\xA7" => "\xE7\xA5\x90",		"\xAF\xA8" => "\xE7\xA5\xA0",		"\xAF\xA9" => "\xE7\xA5\x9F",		"\xAF\xAA" => "\xE7\xA5\x96",		"\xAF\xAB" => "\xE7\xA5\x9E",		"\xAF\xAC" => "\xE7\xA5\x9D",		"\xAF\xAD" => "\xE7\xA5\x97",		"\xAF\xAE" => "\xE7\xA5\x9A",		"\xAF\xAF" => "\xE7\xA7\xA4",		"\xAF\xB0" => "\xE7\xA7\xA3",		"\xAF\xB1" => "\xE7\xA7\xA7",		"\xAF\xB2" => "\xE7\xA7\x9F",		"\xAF\xB3" => "\xE7\xA7\xA6",		"\xAF\xB4" => "\xE7\xA7\xA9",		"\xAF\xB5" => "\xE7\xA7\x98",		"\xAF\xB6" => "\xE7\xAA\x84",		"\xAF\xB7" => "\xE7\xAA\x88",		"\xAF\xB8" => "\xE7\xAB\x99",		"\xAF\xB9" => "\xE7\xAC\x86",		"\xAF\xBA" => "\xE7\xAC\x91",		"\xAF\xBB" => "\xE7\xB2\x89",		"\xAF\xBC" => "\xE7\xB4\xA1",		"\xAF\xBD" => "\xE7\xB4\x97",		"\xAF\xBE" => "\xE7\xB4\x8B",		"\xAF\xBF" => "\xE7\xB4\x8A",		"\xAF\xC0" => "\xE7\xB4\xA0",		"\xAF\xC1" => "\xE7\xB4\xA2",		"\xAF\xC2" => "\xE7\xB4\x94",		"\xAF\xC3" => "\xE7\xB4\x90",		"\xAF\xC4" => "\xE7\xB4\x95",		"\xAF\xC5" => "\xE7\xB4\x9A",		"\xAF\xC6" => "\xE7\xB4\x9C",		"\xAF\xC7" => "\xE7\xB4\x8D",		"\xAF\xC8" => "\xE7\xB4\x99",		"\xAF\xC9" => "\xE7\xB4\x9B",		"\xAF\xCA" => "\xE7\xBC\xBA",		"\xAF\xCB" => "\xE7\xBD\x9F",		"\xAF\xCC" => "\xE7\xBE\x94",		"\xAF\xCD" => "\xE7\xBF\x85",		"\xAF\xCE" => "\xE7\xBF\x81",		"\xAF\xCF" => "\xE8\x80\x86",		"\xAF\xD0" => "\xE8\x80\x98",		"\xAF\xD1" => "\xE8\x80\x95",		"\xAF\xD2" => "\xE8\x80\x99",		"\xAF\xD3" => "\xE8\x80\x97",		"\xAF\xD4" => "\xE8\x80\xBD",		"\xAF\xD5" => "\xE8\x80\xBF",		"\xAF\xD6" => "\xE8\x83\xB1",		"\xAF\xD7" => "\xE8\x84\x82",		"\xAF\xD8" => "\xE8\x83\xB0",		"\xAF\xD9" => "\xE8\x84\x85",		"\xAF\xDA" => "\xE8\x83\xAD",		"\xAF\xDB" => "\xE8\x83\xB4",		"\xAF\xDC" => "\xE8\x84\x86",		"\xAF\xDD" => "\xE8\x83\xB8",		"\xAF\xDE" => "\xE8\x83\xB3",		"\xAF\xDF" => "\xE8\x84\x88",		"\xAF\xE0" => "\xE8\x83\xBD",		"\xAF\xE1" => "\xE8\x84\x8A",		"\xAF\xE2" => "\xE8\x83\xBC",		"\xAF\xE3" => "\xE8\x83\xAF",		"\xAF\xE4" => "\xE8\x87\xAD",		"\xAF\xE5" => "\xE8\x87\xAC",		"\xAF\xE6" => "\xE8\x88\x80",		"\xAF\xE7" => "\xE8\x88\x90",		"\xAF\xE8" => "\xE8\x88\xAA",		"\xAF\xE9" => "\xE8\x88\xAB",		"\xAF\xEA" => "\xE8\x88\xA8",		"\xAF\xEB" => "\xE8\x88\xAC",		"\xAF\xEC" => "\xE8\x8A\xBB",		"\xAF\xED" => "\xE8\x8C\xAB",		"\xAF\xEE" => "\xE8\x8D\x92",		"\xAF\xEF" => "\xE8\x8D\x94",		"\xAF\xF0" => "\xE8\x8D\x8A",		"\xAF\xF1" => "\xE8\x8C\xB8",		"\xAF\xF2" => "\xE8\x8D\x90",		"\xAF\xF3" => "\xE8\x8D\x89",		"\xAF\xF4" => "\xE8\x8C\xB5",		"\xAF\xF5" => "\xE8\x8C\xB4",		"\xAF\xF6" => "\xE8\x8D\x8F",		"\xAF\xF7" => "\xE8\x8C\xB2",		"\xAF\xF8" => "\xE8\x8C\xB9",		"\xAF\xF9" => "\xE8\x8C\xB6",		"\xAF\xFA" => "\xE8\x8C\x97",		"\xAF\xFB" => "\xE8\x8D\x80",		"\xAF\xFC" => "\xE8\x8C\xB1",		"\xAF\xFD" => "\xE8\x8C\xA8",		"\xAF\xFE" => "\xE8\x8D\x83",		"\xB0\x40" => "\xE8\x99\x94",		"\xB0\x41" => "\xE8\x9A\x8A",		"\xB0\x42" => "\xE8\x9A\xAA",		"\xB0\x43" => "\xE8\x9A\x93",		"\xB0\x44" => "\xE8\x9A\xA4",		"\xB0\x45" => "\xE8\x9A\xA9",		"\xB0\x46" => "\xE8\x9A\x8C",		"\xB0\x47" => "\xE8\x9A\xA3",		"\xB0\x48" => "\xE8\x9A\x9C",		"\xB0\x49" => "\xE8\xA1\xB0",		"\xB0\x4A" => "\xE8\xA1\xB7",		"\xB0\x4B" => "\xE8\xA2\x81",		"\xB0\x4C" => "\xE8\xA2\x82",		"\xB0\x4D" => "\xE8\xA1\xBD",		"\xB0\x4E" => "\xE8\xA1\xB9",		"\xB0\x4F" => "\xE8\xA8\x98",		"\xB0\x50" => "\xE8\xA8\x90",		"\xB0\x51" => "\xE8\xA8\x8E",		"\xB0\x52" => "\xE8\xA8\x8C",		"\xB0\x53" => "\xE8\xA8\x95",		"\xB0\x54" => "\xE8\xA8\x8A",		"\xB0\x55" => "\xE8\xA8\x97",		"\xB0\x56" => "\xE8\xA8\x93",		"\xB0\x57" => "\xE8\xA8\x96",		"\xB0\x58" => "\xE8\xA8\x8F",		"\xB0\x59" => "\xE8\xA8\x91",		"\xB0\x5A" => "\xE8\xB1\x88",		"\xB0\x5B" => "\xE8\xB1\xBA",		"\xB0\x5C" => "\xE8\xB1\xB9",		"\xB0\x5D" => "\xE8\xB2\xA1",		"\xB0\x5E" => "\xE8\xB2\xA2",		"\xB0\x5F" => "\xE8\xB5\xB7",		"\xB0\x60" => "\xE8\xBA\xAC",		"\xB0\x61" => "\xE8\xBB\x92",		"\xB0\x62" => "\xE8\xBB\x94",		"\xB0\x63" => "\xE8\xBB\x8F",		"\xB0\x64" => "\xE8\xBE\xB1",		"\xB0\x65" => "\xE9\x80\x81",		"\xB0\x66" => "\xE9\x80\x86",		"\xB0\x67" => "\xE8\xBF\xB7",		"\xB0\x68" => "\xE9\x80\x80",		"\xB0\x69" => "\xE8\xBF\xBA",		"\xB0\x6A" => "\xE8\xBF\xB4",		"\xB0\x6B" => "\xE9\x80\x83",		"\xB0\x6C" => "\xE8\xBF\xBD",		"\xB0\x6D" => "\xE9\x80\x85",		"\xB0\x6E" => "\xE8\xBF\xB8",		"\xB0\x6F" => "\xE9\x82\x95",		"\xB0\x70" => "\xE9\x83\xA1",		"\xB0\x71" => "\xE9\x83\x9D",		"\xB0\x72" => "\xE9\x83\xA2",		"\xB0\x73" => "\xE9\x85\x92",		"\xB0\x74" => "\xE9\x85\x8D",		"\xB0\x75" => "\xE9\x85\x8C",		"\xB0\x76" => "\xE9\x87\x98",		"\xB0\x77" => "\xE9\x87\x9D",		"\xB0\x78" => "\xE9\x87\x97",		"\xB0\x79" => "\xE9\x87\x9C",		"\xB0\x7A" => "\xE9\x87\x99",		"\xB0\x7B" => "\xE9\x96\x83",		"\xB0\x7C" => "\xE9\x99\xA2",		"\xB0\x7D" => "\xE9\x99\xA3",		"\xB0\x7E" => "\xE9\x99\xA1",		"\xB0\xA1" => "\xE9\x99\x9B",		"\xB0\xA2" => "\xE9\x99\x9D",		"\xB0\xA3" => "\xE9\x99\xA4",		"\xB0\xA4" => "\xE9\x99\x98",		"\xB0\xA5" => "\xE9\x99\x9E",		"\xB0\xA6" => "\xE9\x9A\xBB",		"\xB0\xA7" => "\xE9\xA3\xA2",		"\xB0\xA8" => "\xE9\xA6\xAC",		"\xB0\xA9" => "\xE9\xAA\xA8",		"\xB0\xAA" => "\xE9\xAB\x98",		"\xB0\xAB" => "\xE9\xAC\xA5",		"\xB0\xAC" => "\xE9\xAC\xB2",		"\xB0\xAD" => "\xE9\xAC\xBC",		"\xB0\xAE" => "\xE4\xB9\xBE",		"\xB0\xAF" => "\xE5\x81\xBA",		"\xB0\xB0" => "\xE5\x81\xBD",		"\xB0\xB1" => "\xE5\x81\x9C",		"\xB0\xB2" => "\xE5\x81\x87",		"\xB0\xB3" => "\xE5\x81\x83",		"\xB0\xB4" => "\xE5\x81\x8C",		"\xB0\xB5" => "\xE5\x81\x9A",		"\xB0\xB6" => "\xE5\x81\x89",		"\xB0\xB7" => "\xE5\x81\xA5",		"\xB0\xB8" => "\xE5\x81\xB6",		"\xB0\xB9" => "\xE5\x81\x8E",		"\xB0\xBA" => "\xE5\x81\x95",		"\xB0\xBB" => "\xE5\x81\xB5",		"\xB0\xBC" => "\xE5\x81\xB4",		"\xB0\xBD" => "\xE5\x81\xB7",		"\xB0\xBE" => "\xE5\x81\x8F",		"\xB0\xBF" => "\xE5\x80\x8F",		"\xB0\xC0" => "\xE5\x81\xAF",		"\xB0\xC1" => "\xE5\x81\xAD",		"\xB0\xC2" => "\xE5\x85\x9C",		"\xB0\xC3" => "\xE5\x86\x95",		"\xB0\xC4" => "\xE5\x87\xB0",		"\xB0\xC5" => "\xE5\x89\xAA",		"\xB0\xC6" => "\xE5\x89\xAF",		"\xB0\xC7" => "\xE5\x8B\x92",		"\xB0\xC8" => "\xE5\x8B\x99",		"\xB0\xC9" => "\xE5\x8B\x98",		"\xB0\xCA" => "\xE5\x8B\x95",		"\xB0\xCB" => "\xE5\x8C\x90",		"\xB0\xCC" => "\xE5\x8C\x8F",		"\xB0\xCD" => "\xE5\x8C\x99",		"\xB0\xCE" => "\xE5\x8C\xBF",		"\xB0\xCF" => "\xE5\x8D\x80",		"\xB0\xD0" => "\xE5\x8C\xBE",		"\xB0\xD1" => "\xE5\x8F\x83",		"\xB0\xD2" => "\xE6\x9B\xBC",		"\xB0\xD3" => "\xE5\x95\x86",		"\xB0\xD4" => "\xE5\x95\xAA",		"\xB0\xD5" => "\xE5\x95\xA6",		"\xB0\xD6" => "\xE5\x95\x84",		"\xB0\xD7" => "\xE5\x95\x9E",		"\xB0\xD8" => "\xE5\x95\xA1",		"\xB0\xD9" => "\xE5\x95\x83",		"\xB0\xDA" => "\xE5\x95\x8A",		"\xB0\xDB" => "\xE5\x94\xB1",		"\xB0\xDC" => "\xE5\x95\x96",		"\xB0\xDD" => "\xE5\x95\x8F",		"\xB0\xDE" => "\xE5\x95\x95",		"\xB0\xDF" => "\xE5\x94\xAF",		"\xB0\xE0" => "\xE5\x95\xA4",		"\xB0\xE1" => "\xE5\x94\xB8",		"\xB0\xE2" => "\xE5\x94\xAE",		"\xB0\xE3" => "\xE5\x95\x9C",		"\xB0\xE4" => "\xE5\x94\xAC",		"\xB0\xE5" => "\xE5\x95\xA3",		"\xB0\xE6" => "\xE5\x94\xB3",		"\xB0\xE7" => "\xE5\x95\x81",		"\xB0\xE8" => "\xE5\x95\x97",		"\xB0\xE9" => "\xE5\x9C\x88",		"\xB0\xEA" => "\xE5\x9C\x8B",		"\xB0\xEB" => "\xE5\x9C\x89",		"\xB0\xEC" => "\xE5\x9F\x9F",		"\xB0\xED" => "\xE5\xA0\x85",		"\xB0\xEE" => "\xE5\xA0\x8A",		"\xB0\xEF" => "\xE5\xA0\x86",		"\xB0\xF0" => "\xE5\x9F\xA0",		"\xB0\xF1" => "\xE5\x9F\xA4",		"\xB0\xF2" => "\xE5\x9F\xBA",		"\xB0\xF3" => "\xE5\xA0\x82",		"\xB0\xF4" => "\xE5\xA0\xB5",		"\xB0\xF5" => "\xE5\x9F\xB7",		"\xB0\xF6" => "\xE5\x9F\xB9",		"\xB0\xF7" => "\xE5\xA4\xA0",		"\xB0\xF8" => "\xE5\xA5\xA2",		"\xB0\xF9" => "\xE5\xA8\xB6",		"\xB0\xFA" => "\xE5\xA9\x81",		"\xB0\xFB" => "\xE5\xA9\x89",		"\xB0\xFC" => "\xE5\xA9\xA6",		"\xB0\xFD" => "\xE5\xA9\xAA",		"\xB0\xFE" => "\xE5\xA9\x80",		"\xB1\x40" => "\xE5\xA8\xBC",		"\xB1\x41" => "\xE5\xA9\xA2",		"\xB1\x42" => "\xE5\xA9\x9A",		"\xB1\x43" => "\xE5\xA9\x86",		"\xB1\x44" => "\xE5\xA9\x8A",		"\xB1\x45" => "\xE5\xAD\xB0",		"\xB1\x46" => "\xE5\xAF\x87",		"\xB1\x47" => "\xE5\xAF\x85",		"\xB1\x48" => "\xE5\xAF\x84",		"\xB1\x49" => "\xE5\xAF\x82",		"\xB1\x4A" => "\xE5\xAE\xBF",		"\xB1\x4B" => "\xE5\xAF\x86",		"\xB1\x4C" => "\xE5\xB0\x89",		"\xB1\x4D" => "\xE5\xB0\x88",		"\xB1\x4E" => "\xE5\xB0\x87",		"\xB1\x4F" => "\xE5\xB1\xA0",		"\xB1\x50" => "\xE5\xB1\x9C",		"\xB1\x51" => "\xE5\xB1\x9D",		"\xB1\x52" => "\xE5\xB4\x87",		"\xB1\x53" => "\xE5\xB4\x86",		"\xB1\x54" => "\xE5\xB4\x8E",		"\xB1\x55" => "\xE5\xB4\x9B",		"\xB1\x56" => "\xE5\xB4\x96",		"\xB1\x57" => "\xE5\xB4\xA2",		"\xB1\x58" => "\xE5\xB4\x91",		"\xB1\x59" => "\xE5\xB4\xA9",		"\xB1\x5A" => "\xE5\xB4\x94",		"\xB1\x5B" => "\xE5\xB4\x99",		"\xB1\x5C" => "\xE5\xB4\xA4",		"\xB1\x5D" => "\xE5\xB4\xA7",		"\xB1\x5E" => "\xE5\xB4\x97",		"\xB1\x5F" => "\xE5\xB7\xA2",		"\xB1\x60" => "\xE5\xB8\xB8",		"\xB1\x61" => "\xE5\xB8\xB6",		"\xB1\x62" => "\xE5\xB8\xB3",		"\xB1\x63" => "\xE5\xB8\xB7",		"\xB1\x64" => "\xE5\xBA\xB7",		"\xB1\x65" => "\xE5\xBA\xB8",		"\xB1\x66" => "\xE5\xBA\xB6",		"\xB1\x67" => "\xE5\xBA\xB5",		"\xB1\x68" => "\xE5\xBA\xBE",		"\xB1\x69" => "\xE5\xBC\xB5",		"\xB1\x6A" => "\xE5\xBC\xB7",		"\xB1\x6B" => "\xE5\xBD\x97",		"\xB1\x6C" => "\xE5\xBD\xAC",		"\xB1\x6D" => "\xE5\xBD\xA9",		"\xB1\x6E" => "\xE5\xBD\xAB",		"\xB1\x6F" => "\xE5\xBE\x97",		"\xB1\x70" => "\xE5\xBE\x99",		"\xB1\x71" => "\xE5\xBE\x9E",		"\xB1\x72" => "\xE5\xBE\x98",		"\xB1\x73" => "\xE5\xBE\xA1",		"\xB1\x74" => "\xE5\xBE\xA0",		"\xB1\x75" => "\xE5\xBE\x9C",		"\xB1\x76" => "\xE6\x81\xBF",		"\xB1\x77" => "\xE6\x82\xA3",		"\xB1\x78" => "\xE6\x82\x89",		"\xB1\x79" => "\xE6\x82\xA0",		"\xB1\x7A" => "\xE6\x82\xA8",		"\xB1\x7B" => "\xE6\x83\x8B",		"\xB1\x7C" => "\xE6\x82\xB4",		"\xB1\x7D" => "\xE6\x83\xA6",		"\xB1\x7E" => "\xE6\x82\xBD",		"\xB1\xA1" => "\xE6\x83\x85",		"\xB1\xA2" => "\xE6\x82\xBB",		"\xB1\xA3" => "\xE6\x82\xB5",		"\xB1\xA4" => "\xE6\x83\x9C",		"\xB1\xA5" => "\xE6\x82\xBC",		"\xB1\xA6" => "\xE6\x83\x98",		"\xB1\xA7" => "\xE6\x83\x95",		"\xB1\xA8" => "\xE6\x83\x86",		"\xB1\xA9" => "\xE6\x83\x9F",		"\xB1\xAA" => "\xE6\x82\xB8",		"\xB1\xAB" => "\xE6\x83\x9A",		"\xB1\xAC" => "\xE6\x83\x87",		"\xB1\xAD" => "\xE6\x88\x9A",		"\xB1\xAE" => "\xE6\x88\x9B",		"\xB1\xAF" => "\xE6\x89\x88",		"\xB1\xB0" => "\xE6\x8E\xA0",		"\xB1\xB1" => "\xE6\x8E\xA7",		"\xB1\xB2" => "\xE6\x8D\xB2",		"\xB1\xB3" => "\xE6\x8E\x96",		"\xB1\xB4" => "\xE6\x8E\xA2",		"\xB1\xB5" => "\xE6\x8E\xA5",		"\xB1\xB6" => "\xE6\x8D\xB7",		"\xB1\xB7" => "\xE6\x8D\xA7",		"\xB1\xB8" => "\xE6\x8E\x98",		"\xB1\xB9" => "\xE6\x8E\xAA",		"\xB1\xBA" => "\xE6\x8D\xB1",		"\xB1\xBB" => "\xE6\x8E\xA9",		"\xB1\xBC" => "\xE6\x8E\x89",		"\xB1\xBD" => "\xE6\x8E\x83",		"\xB1\xBE" => "\xE6\x8E\x9B",		"\xB1\xBF" => "\xE6\x8D\xAB",		"\xB1\xC0" => "\xE6\x8E\xA8",		"\xB1\xC1" => "\xE6\x8E\x84",		"\xB1\xC2" => "\xE6\x8E\x88",		"\xB1\xC3" => "\xE6\x8E\x99",		"\xB1\xC4" => "\xE6\x8E\xA1",		"\xB1\xC5" => "\xE6\x8E\xAC",		"\xB1\xC6" => "\xE6\x8E\x92",		"\xB1\xC7" => "\xE6\x8E\x8F",		"\xB1\xC8" => "\xE6\x8E\x80",		"\xB1\xC9" => "\xE6\x8D\xBB",		"\xB1\xCA" => "\xE6\x8D\xA9",		"\xB1\xCB" => "\xE6\x8D\xA8",		"\xB1\xCC" => "\xE6\x8D\xBA",		"\xB1\xCD" => "\xE6\x95\x9D",		"\xB1\xCE" => "\xE6\x95\x96",		"\xB1\xCF" => "\xE6\x95\x91",		"\xB1\xD0" => "\xE6\x95\x99",		"\xB1\xD1" => "\xE6\x95\x97",		"\xB1\xD2" => "\xE5\x95\x9F",		"\xB1\xD3" => "\xE6\x95\x8F",		"\xB1\xD4" => "\xE6\x95\x98",		"\xB1\xD5" => "\xE6\x95\x95",		"\xB1\xD6" => "\xE6\x95\x94",		"\xB1\xD7" => "\xE6\x96\x9C",		"\xB1\xD8" => "\xE6\x96\x9B",		"\xB1\xD9" => "\xE6\x96\xAC",		"\xB1\xDA" => "\xE6\x97\x8F",		"\xB1\xDB" => "\xE6\x97\x8B",		"\xB1\xDC" => "\xE6\x97\x8C",		"\xB1\xDD" => "\xE6\x97\x8E",		"\xB1\xDE" => "\xE6\x99\x9D",		"\xB1\xDF" => "\xE6\x99\x9A",		"\xB1\xE0" => "\xE6\x99\xA4",		"\xB1\xE1" => "\xE6\x99\xA8",		"\xB1\xE2" => "\xE6\x99\xA6",		"\xB1\xE3" => "\xE6\x99\x9E",		"\xB1\xE4" => "\xE6\x9B\xB9",		"\xB1\xE5" => "\xE5\x8B\x97",		"\xB1\xE6" => "\xE6\x9C\x9B",		"\xB1\xE7" => "\xE6\xA2\x81",		"\xB1\xE8" => "\xE6\xA2\xAF",		"\xB1\xE9" => "\xE6\xA2\xA2",		"\xB1\xEA" => "\xE6\xA2\x93",		"\xB1\xEB" => "\xE6\xA2\xB5",		"\xB1\xEC" => "\xE6\xA1\xBF",		"\xB1\xED" => "\xE6\xA1\xB6",		"\xB1\xEE" => "\xE6\xA2\xB1",		"\xB1\xEF" => "\xE6\xA2\xA7",		"\xB1\xF0" => "\xE6\xA2\x97",		"\xB1\xF1" => "\xE6\xA2\xB0",		"\xB1\xF2" => "\xE6\xA2\x83",		"\xB1\xF3" => "\xE6\xA3\x84",		"\xB1\xF4" => "\xE6\xA2\xAD",		"\xB1\xF5" => "\xE6\xA2\x86",		"\xB1\xF6" => "\xE6\xA2\x85",		"\xB1\xF7" => "\xE6\xA2\x94",		"\xB1\xF8" => "\xE6\xA2\x9D",		"\xB1\xF9" => "\xE6\xA2\xA8",		"\xB1\xFA" => "\xE6\xA2\x9F",		"\xB1\xFB" => "\xE6\xA2\xA1",		"\xB1\xFC" => "\xE6\xA2\x82",		"\xB1\xFD" => "\xE6\xAC\xB2",		"\xB1\xFE" => "\xE6\xAE\xBA",		"\xB2\x40" => "\xE6\xAF\xAB",		"\xB2\x41" => "\xE6\xAF\xAC",		"\xB2\x42" => "\xE6\xB0\xAB",		"\xB2\x43" => "\xE6\xB6\x8E",		"\xB2\x44" => "\xE6\xB6\xBC",		"\xB2\x45" => "\xE6\xB7\xB3",		"\xB2\x46" => "\xE6\xB7\x99",		"\xB2\x47" => "\xE6\xB6\xB2",		"\xB2\x48" => "\xE6\xB7\xA1",		"\xB2\x49" => "\xE6\xB7\x8C",		"\xB2\x4A" => "\xE6\xB7\xA4",		"\xB2\x4B" => "\xE6\xB7\xBB",		"\xB2\x4C" => "\xE6\xB7\xBA",		"\xB2\x4D" => "\xE6\xB8\x85",		"\xB2\x4E" => "\xE6\xB7\x87",		"\xB2\x4F" => "\xE6\xB7\x8B",		"\xB2\x50" => "\xE6\xB6\xAF",		"\xB2\x51" => "\xE6\xB7\x91",		"\xB2\x52" => "\xE6\xB6\xAE",		"\xB2\x53" => "\xE6\xB7\x9E",		"\xB2\x54" => "\xE6\xB7\xB9",		"\xB2\x55" => "\xE6\xB6\xB8",		"\xB2\x56" => "\xE6\xB7\xB7",		"\xB2\x57" => "\xE6\xB7\xB5",		"\xB2\x58" => "\xE6\xB7\x85",		"\xB2\x59" => "\xE6\xB7\x92",		"\xB2\x5A" => "\xE6\xB8\x9A",		"\xB2\x5B" => "\xE6\xB6\xB5",		"\xB2\x5C" => "\xE6\xB7\x9A",		"\xB2\x5D" => "\xE6\xB7\xAB",		"\xB2\x5E" => "\xE6\xB7\x98",		"\xB2\x5F" => "\xE6\xB7\xAA",		"\xB2\x60" => "\xE6\xB7\xB1",		"\xB2\x61" => "\xE6\xB7\xAE",		"\xB2\x62" => "\xE6\xB7\xA8",		"\xB2\x63" => "\xE6\xB7\x86",		"\xB2\x64" => "\xE6\xB7\x84",		"\xB2\x65" => "\xE6\xB6\xAA",		"\xB2\x66" => "\xE6\xB7\xAC",		"\xB2\x67" => "\xE6\xB6\xBF",		"\xB2\x68" => "\xE6\xB7\xA6",		"\xB2\x69" => "\xE7\x83\xB9",		"\xB2\x6A" => "\xE7\x84\x89",		"\xB2\x6B" => "\xE7\x84\x8A",		"\xB2\x6C" => "\xE7\x83\xBD",		"\xB2\x6D" => "\xE7\x83\xAF",		"\xB2\x6E" => "\xE7\x88\xBD",		"\xB2\x6F" => "\xE7\x89\xBD",		"\xB2\x70" => "\xE7\x8A\x81",		"\xB2\x71" => "\xE7\x8C\x9C",		"\xB2\x72" => "\xE7\x8C\x9B",		"\xB2\x73" => "\xE7\x8C\x96",		"\xB2\x74" => "\xE7\x8C\x93",		"\xB2\x75" => "\xE7\x8C\x99",		"\xB2\x76" => "\xE7\x8E\x87",		"\xB2\x77" => "\xE7\x90\x85",		"\xB2\x78" => "\xE7\x90\x8A",		"\xB2\x79" => "\xE7\x90\x83",		"\xB2\x7A" => "\xE7\x90\x86",		"\xB2\x7B" => "\xE7\x8F\xBE",		"\xB2\x7C" => "\xE7\x90\x8D",		"\xB2\x7D" => "\xE7\x93\xA0",		"\xB2\x7E" => "\xE7\x93\xB6",		"\xB2\xA1" => "\xE7\x93\xB7",		"\xB2\xA2" => "\xE7\x94\x9C",		"\xB2\xA3" => "\xE7\x94\xA2",		"\xB2\xA4" => "\xE7\x95\xA5",		"\xB2\xA5" => "\xE7\x95\xA6",		"\xB2\xA6" => "\xE7\x95\xA2",		"\xB2\xA7" => "\xE7\x95\xB0",		"\xB2\xA8" => "\xE7\x96\x8F",		"\xB2\xA9" => "\xE7\x97\x94",		"\xB2\xAA" => "\xE7\x97\x95",		"\xB2\xAB" => "\xE7\x96\xB5",		"\xB2\xAC" => "\xE7\x97\x8A",		"\xB2\xAD" => "\xE7\x97\x8D",		"\xB2\xAE" => "\xE7\x9A\x8E",		"\xB2\xAF" => "\xE7\x9B\x94",		"\xB2\xB0" => "\xE7\x9B\x92",		"\xB2\xB1" => "\xE7\x9B\x9B",		"\xB2\xB2" => "\xE7\x9C\xB7",		"\xB2\xB3" => "\xE7\x9C\xBE",		"\xB2\xB4" => "\xE7\x9C\xBC",		"\xB2\xB5" => "\xE7\x9C\xB6",		"\xB2\xB6" => "\xE7\x9C\xB8",		"\xB2\xB7" => "\xE7\x9C\xBA",		"\xB2\xB8" => "\xE7\xA1\xAB",		"\xB2\xB9" => "\xE7\xA1\x83",		"\xB2\xBA" => "\xE7\xA1\x8E",		"\xB2\xBB" => "\xE7\xA5\xA5",		"\xB2\xBC" => "\xE7\xA5\xA8",		"\xB2\xBD" => "\xE7\xA5\xAD",		"\xB2\xBE" => "\xE7\xA7\xBB",		"\xB2\xBF" => "\xE7\xAA\x92",		"\xB2\xC0" => "\xE7\xAA\x95",		"\xB2\xC1" => "\xE7\xAC\xA0",		"\xB2\xC2" => "\xE7\xAC\xA8",		"\xB2\xC3" => "\xE7\xAC\x9B",		"\xB2\xC4" => "\xE7\xAC\xAC",		"\xB2\xC5" => "\xE7\xAC\xA6",		"\xB2\xC6" => "\xE7\xAC\x99",		"\xB2\xC7" => "\xE7\xAC\x9E",		"\xB2\xC8" => "\xE7\xAC\xAE",		"\xB2\xC9" => "\xE7\xB2\x92",		"\xB2\xCA" => "\xE7\xB2\x97",		"\xB2\xCB" => "\xE7\xB2\x95",		"\xB2\xCC" => "\xE7\xB5\x86",		"\xB2\xCD" => "\xE7\xB5\x83",		"\xB2\xCE" => "\xE7\xB5\xB1",		"\xB2\xCF" => "\xE7\xB4\xAE",		"\xB2\xD0" => "\xE7\xB4\xB9",		"\xB2\xD1" => "\xE7\xB4\xBC",		"\xB2\xD2" => "\xE7\xB5\x80",		"\xB2\xD3" => "\xE7\xB4\xB0",		"\xB2\xD4" => "\xE7\xB4\xB3",		"\xB2\xD5" => "\xE7\xB5\x84",		"\xB2\xD6" => "\xE7\xB4\xAF",		"\xB2\xD7" => "\xE7\xB5\x82",		"\xB2\xD8" => "\xE7\xB4\xB2",		"\xB2\xD9" => "\xE7\xB4\xB1",		"\xB2\xDA" => "\xE7\xBC\xBD",		"\xB2\xDB" => "\xE7\xBE\x9E",		"\xB2\xDC" => "\xE7\xBE\x9A",		"\xB2\xDD" => "\xE7\xBF\x8C",		"\xB2\xDE" => "\xE7\xBF\x8E",		"\xB2\xDF" => "\xE7\xBF\x92",		"\xB2\xE0" => "\xE8\x80\x9C",		"\xB2\xE1" => "\xE8\x81\x8A",		"\xB2\xE2" => "\xE8\x81\x86",		"\xB2\xE3" => "\xE8\x84\xAF",		"\xB2\xE4" => "\xE8\x84\x96",		"\xB2\xE5" => "\xE8\x84\xA3",		"\xB2\xE6" => "\xE8\x84\xAB",		"\xB2\xE7" => "\xE8\x84\xA9",		"\xB2\xE8" => "\xE8\x84\xB0",		"\xB2\xE9" => "\xE8\x84\xA4",		"\xB2\xEA" => "\xE8\x88\x82",		"\xB2\xEB" => "\xE8\x88\xB5",		"\xB2\xEC" => "\xE8\x88\xB7",		"\xB2\xED" => "\xE8\x88\xB6",		"\xB2\xEE" => "\xE8\x88\xB9",		"\xB2\xEF" => "\xE8\x8E\x8E",		"\xB2\xF0" => "\xE8\x8E\x9E",		"\xB2\xF1" => "\xE8\x8E\x98",		"\xB2\xF2" => "\xE8\x8D\xB8",		"\xB2\xF3" => "\xE8\x8E\xA2",		"\xB2\xF4" => "\xE8\x8E\x96",		"\xB2\xF5" => "\xE8\x8E\xBD",		"\xB2\xF6" => "\xE8\x8E\xAB",		"\xB2\xF7" => "\xE8\x8E\x92",		"\xB2\xF8" => "\xE8\x8E\x8A",		"\xB2\xF9" => "\xE8\x8E\x93",		"\xB2\xFA" => "\xE8\x8E\x89",		"\xB2\xFB" => "\xE8\x8E\xA0",		"\xB2\xFC" => "\xE8\x8D\xB7",		"\xB2\xFD" => "\xE8\x8D\xBB",		"\xB2\xFE" => "\xE8\x8D\xBC",		"\xB3\x40" => "\xE8\x8E\x86",		"\xB3\x41" => "\xE8\x8E\xA7",		"\xB3\x42" => "\xE8\x99\x95",		"\xB3\x43" => "\xE5\xBD\xAA",		"\xB3\x44" => "\xE8\x9B\x87",		"\xB3\x45" => "\xE8\x9B\x80",		"\xB3\x46" => "\xE8\x9A\xB6",		"\xB3\x47" => "\xE8\x9B\x84",		"\xB3\x48" => "\xE8\x9A\xB5",		"\xB3\x49" => "\xE8\x9B\x86",		"\xB3\x4A" => "\xE8\x9B\x8B",		"\xB3\x4B" => "\xE8\x9A\xB1",		"\xB3\x4C" => "\xE8\x9A\xAF",		"\xB3\x4D" => "\xE8\x9B\x89",		"\xB3\x4E" => "\xE8\xA1\x93",		"\xB3\x4F" => "\xE8\xA2\x9E",		"\xB3\x50" => "\xE8\xA2\x88",		"\xB3\x51" => "\xE8\xA2\xAB",		"\xB3\x52" => "\xE8\xA2\x92",		"\xB3\x53" => "\xE8\xA2\x96",		"\xB3\x54" => "\xE8\xA2\x8D",		"\xB3\x55" => "\xE8\xA2\x8B",		"\xB3\x56" => "\xE8\xA6\x93",		"\xB3\x57" => "\xE8\xA6\x8F",		"\xB3\x58" => "\xE8\xA8\xAA",		"\xB3\x59" => "\xE8\xA8\x9D",		"\xB3\x5A" => "\xE8\xA8\xA3",		"\xB3\x5B" => "\xE8\xA8\xA5",		"\xB3\x5C" => "\xE8\xA8\xB1",		"\xB3\x5D" => "\xE8\xA8\xAD",		"\xB3\x5E" => "\xE8\xA8\x9F",		"\xB3\x5F" => "\xE8\xA8\x9B",		"\xB3\x60" => "\xE8\xA8\xA2",		"\xB3\x61" => "\xE8\xB1\x89",		"\xB3\x62" => "\xE8\xB1\x9A",		"\xB3\x63" => "\xE8\xB2\xA9",		"\xB3\x64" => "\xE8\xB2\xAC",		"\xB3\x65" => "\xE8\xB2\xAB",		"\xB3\x66" => "\xE8\xB2\xA8",		"\xB3\x67" => "\xE8\xB2\xAA",		"\xB3\x68" => "\xE8\xB2\xA7",		"\xB3\x69" => "\xE8\xB5\xA7",		"\xB3\x6A" => "\xE8\xB5\xA6",		"\xB3\x6B" => "\xE8\xB6\xBE",		"\xB3\x6C" => "\xE8\xB6\xBA",		"\xB3\x6D" => "\xE8\xBB\x9B",		"\xB3\x6E" => "\xE8\xBB\x9F",		"\xB3\x6F" => "\xE9\x80\x99",		"\xB3\x70" => "\xE9\x80\x8D",		"\xB3\x71" => "\xE9\x80\x9A",		"\xB3\x72" => "\xE9\x80\x97",		"\xB3\x73" => "\xE9\x80\xA3",		"\xB3\x74" => "\xE9\x80\x9F",		"\xB3\x75" => "\xE9\x80\x9D",		"\xB3\x76" => "\xE9\x80\x90",		"\xB3\x77" => "\xE9\x80\x95",		"\xB3\x78" => "\xE9\x80\x9E",		"\xB3\x79" => "\xE9\x80\xA0",		"\xB3\x7A" => "\xE9\x80\x8F",		"\xB3\x7B" => "\xE9\x80\xA2",		"\xB3\x7C" => "\xE9\x80\x96",		"\xB3\x7D" => "\xE9\x80\x9B",		"\xB3\x7E" => "\xE9\x80\x94",		"\xB3\xA1" => "\xE9\x83\xA8",		"\xB3\xA2" => "\xE9\x83\xAD",		"\xB3\xA3" => "\xE9\x83\xBD",		"\xB3\xA4" => "\xE9\x85\x97",		"\xB3\xA5" => "\xE9\x87\x8E",		"\xB3\xA6" => "\xE9\x87\xB5",		"\xB3\xA7" => "\xE9\x87\xA6",		"\xB3\xA8" => "\xE9\x87\xA3",		"\xB3\xA9" => "\xE9\x87\xA7",		"\xB3\xAA" => "\xE9\x87\xAD",		"\xB3\xAB" => "\xE9\x87\xA9",		"\xB3\xAC" => "\xE9\x96\x89",		"\xB3\xAD" => "\xE9\x99\xAA",		"\xB3\xAE" => "\xE9\x99\xB5",		"\xB3\xAF" => "\xE9\x99\xB3",		"\xB3\xB0" => "\xE9\x99\xB8",		"\xB3\xB1" => "\xE9\x99\xB0",		"\xB3\xB2" => "\xE9\x99\xB4",		"\xB3\xB3" => "\xE9\x99\xB6",		"\xB3\xB4" => "\xE9\x99\xB7",		"\xB3\xB5" => "\xE9\x99\xAC",		"\xB3\xB6" => "\xE9\x9B\x80",		"\xB3\xB7" => "\xE9\x9B\xAA",		"\xB3\xB8" => "\xE9\x9B\xA9",		"\xB3\xB9" => "\xE7\xAB\xA0",		"\xB3\xBA" => "\xE7\xAB\x9F",		"\xB3\xBB" => "\xE9\xA0\x82",		"\xB3\xBC" => "\xE9\xA0\x83",		"\xB3\xBD" => "\xE9\xAD\x9A",		"\xB3\xBE" => "\xE9\xB3\xA5",		"\xB3\xBF" => "\xE9\xB9\xB5",		"\xB3\xC0" => "\xE9\xB9\xBF",		"\xB3\xC1" => "\xE9\xBA\xA5",		"\xB3\xC2" => "\xE9\xBA\xBB",		"\xB3\xC3" => "\xE5\x82\xA2",		"\xB3\xC4" => "\xE5\x82\x8D",		"\xB3\xC5" => "\xE5\x82\x85",		"\xB3\xC6" => "\xE5\x82\x99",		"\xB3\xC7" => "\xE5\x82\x91",		"\xB3\xC8" => "\xE5\x82\x80",		"\xB3\xC9" => "\xE5\x82\x96",		"\xB3\xCA" => "\xE5\x82\x98",		"\xB3\xCB" => "\xE5\x82\x9A",		"\xB3\xCC" => "\xE6\x9C\x80",		"\xB3\xCD" => "\xE5\x87\xB1",		"\xB3\xCE" => "\xE5\x89\xB2",		"\xB3\xCF" => "\xE5\x89\xB4",		"\xB3\xD0" => "\xE5\x89\xB5",		"\xB3\xD1" => "\xE5\x89\xA9",		"\xB3\xD2" => "\xE5\x8B\x9E",		"\xB3\xD3" => "\xE5\x8B\x9D",		"\xB3\xD4" => "\xE5\x8B\x9B",		"\xB3\xD5" => "\xE5\x8D\x9A",		"\xB3\xD6" => "\xE5\x8E\xA5",		"\xB3\xD7" => "\xE5\x95\xBB",		"\xB3\xD8" => "\xE5\x96\x80",		"\xB3\xD9" => "\xE5\x96\xA7",		"\xB3\xDA" => "\xE5\x95\xBC",		"\xB3\xDB" => "\xE5\x96\x8A",		"\xB3\xDC" => "\xE5\x96\x9D",		"\xB3\xDD" => "\xE5\x96\x98",		"\xB3\xDE" => "\xE5\x96\x82",		"\xB3\xDF" => "\xE5\x96\x9C",		"\xB3\xE0" => "\xE5\x96\xAA",		"\xB3\xE1" => "\xE5\x96\x94",		"\xB3\xE2" => "\xE5\x96\x87",		"\xB3\xE3" => "\xE5\x96\x8B",		"\xB3\xE4" => "\xE5\x96\x83",		"\xB3\xE5" => "\xE5\x96\xB3",		"\xB3\xE6" => "\xE5\x96\xAE",		"\xB3\xE7" => "\xE5\x96\x9F",		"\xB3\xE8" => "\xE5\x94\xBE",		"\xB3\xE9" => "\xE5\x96\xB2",		"\xB3\xEA" => "\xE5\x96\x9A",		"\xB3\xEB" => "\xE5\x96\xBB",		"\xB3\xEC" => "\xE5\x96\xAC",		"\xB3\xED" => "\xE5\x96\xB1",		"\xB3\xEE" => "\xE5\x95\xBE",		"\xB3\xEF" => "\xE5\x96\x89",		"\xB3\xF0" => "\xE5\x96\xAB",		"\xB3\xF1" => "\xE5\x96\x99",		"\xB3\xF2" => "\xE5\x9C\x8D",		"\xB3\xF3" => "\xE5\xA0\xAF",		"\xB3\xF4" => "\xE5\xA0\xAA",		"\xB3\xF5" => "\xE5\xA0\xB4",		"\xB3\xF6" => "\xE5\xA0\xA4",		"\xB3\xF7" => "\xE5\xA0\xB0",		"\xB3\xF8" => "\xE5\xA0\xB1",		"\xB3\xF9" => "\xE5\xA0\xA1",		"\xB3\xFA" => "\xE5\xA0\x9D",		"\xB3\xFB" => "\xE5\xA0\xA0",		"\xB3\xFC" => "\xE5\xA3\xB9",		"\xB3\xFD" => "\xE5\xA3\xBA",		"\xB3\xFE" => "\xE5\xA5\xA0",		"\xB4\x40" => "\xE5\xA9\xB7",		"\xB4\x41" => "\xE5\xAA\x9A",		"\xB4\x42" => "\xE5\xA9\xBF",		"\xB4\x43" => "\xE5\xAA\x92",		"\xB4\x44" => "\xE5\xAA\x9B",		"\xB4\x45" => "\xE5\xAA\xA7",		"\xB4\x46" => "\xE5\xAD\xB3",		"\xB4\x47" => "\xE5\xAD\xB1",		"\xB4\x48" => "\xE5\xAF\x92",		"\xB4\x49" => "\xE5\xAF\x8C",		"\xB4\x4A" => "\xE5\xAF\x93",		"\xB4\x4B" => "\xE5\xAF\x90",		"\xB4\x4C" => "\xE5\xB0\x8A",		"\xB4\x4D" => "\xE5\xB0\x8B",		"\xB4\x4E" => "\xE5\xB0\xB1",		"\xB4\x4F" => "\xE5\xB5\x8C",		"\xB4\x50" => "\xE5\xB5\x90",		"\xB4\x51" => "\xE5\xB4\xB4",		"\xB4\x52" => "\xE5\xB5\x87",		"\xB4\x53" => "\xE5\xB7\xBD",		"\xB4\x54" => "\xE5\xB9\x85",		"\xB4\x55" => "\xE5\xB8\xBD",		"\xB4\x56" => "\xE5\xB9\x80",		"\xB4\x57" => "\xE5\xB9\x83",		"\xB4\x58" => "\xE5\xB9\xBE",		"\xB4\x59" => "\xE5\xBB\x8A",		"\xB4\x5A" => "\xE5\xBB\x81",		"\xB4\x5B" => "\xE5\xBB\x82",		"\xB4\x5C" => "\xE5\xBB\x84",		"\xB4\x5D" => "\xE5\xBC\xBC",		"\xB4\x5E" => "\xE5\xBD\xAD",		"\xB4\x5F" => "\xE5\xBE\xA9",		"\xB4\x60" => "\xE5\xBE\xAA",		"\xB4\x61" => "\xE5\xBE\xA8",		"\xB4\x62" => "\xE6\x83\x91",		"\xB4\x63" => "\xE6\x83\xA1",		"\xB4\x64" => "\xE6\x82\xB2",		"\xB4\x65" => "\xE6\x82\xB6",		"\xB4\x66" => "\xE6\x83\xA0",		"\xB4\x67" => "\xE6\x84\x9C",		"\xB4\x68" => "\xE6\x84\xA3",		"\xB4\x69" => "\xE6\x83\xBA",		"\xB4\x6A" => "\xE6\x84\x95",		"\xB4\x6B" => "\xE6\x83\xB0",		"\xB4\x6C" => "\xE6\x83\xBB",		"\xB4\x6D" => "\xE6\x83\xB4",		"\xB4\x6E" => "\xE6\x85\xA8",		"\xB4\x6F" => "\xE6\x83\xB1",		"\xB4\x70" => "\xE6\x84\x8E",		"\xB4\x71" => "\xE6\x83\xB6",		"\xB4\x72" => "\xE6\x84\x89",		"\xB4\x73" => "\xE6\x84\x80",		"\xB4\x74" => "\xE6\x84\x92",		"\xB4\x75" => "\xE6\x88\x9F",		"\xB4\x76" => "\xE6\x89\x89",		"\xB4\x77" => "\xE6\x8E\xA3",		"\xB4\x78" => "\xE6\x8E\x8C",		"\xB4\x79" => "\xE6\x8F\x8F",		"\xB4\x7A" => "\xE6\x8F\x80",		"\xB4\x7B" => "\xE6\x8F\xA9",		"\xB4\x7C" => "\xE6\x8F\x89",		"\xB4\x7D" => "\xE6\x8F\x86",		"\xB4\x7E" => "\xE6\x8F\x8D",		"\xB4\xA1" => "\xE6\x8F\x92",		"\xB4\xA2" => "\xE6\x8F\xA3",		"\xB4\xA3" => "\xE6\x8F\x90",		"\xB4\xA4" => "\xE6\x8F\xA1",		"\xB4\xA5" => "\xE6\x8F\x96",		"\xB4\xA6" => "\xE6\x8F\xAD",		"\xB4\xA7" => "\xE6\x8F\xAE",		"\xB4\xA8" => "\xE6\x8D\xB6",		"\xB4\xA9" => "\xE6\x8F\xB4",		"\xB4\xAA" => "\xE6\x8F\xAA",		"\xB4\xAB" => "\xE6\x8F\x9B",		"\xB4\xAC" => "\xE6\x91\x92",		"\xB4\xAD" => "\xE6\x8F\x9A",		"\xB4\xAE" => "\xE6\x8F\xB9",		"\xB4\xAF" => "\xE6\x95\x9E",		"\xB4\xB0" => "\xE6\x95\xA6",		"\xB4\xB1" => "\xE6\x95\xA2",		"\xB4\xB2" => "\xE6\x95\xA3",		"\xB4\xB3" => "\xE6\x96\x91",		"\xB4\xB4" => "\xE6\x96\x90",		"\xB4\xB5" => "\xE6\x96\xAF",		"\xB4\xB6" => "\xE6\x99\xAE",		"\xB4\xB7" => "\xE6\x99\xB0",		"\xB4\xB8" => "\xE6\x99\xB4",		"\xB4\xB9" => "\xE6\x99\xB6",		"\xB4\xBA" => "\xE6\x99\xAF",		"\xB4\xBB" => "\xE6\x9A\x91",		"\xB4\xBC" => "\xE6\x99\xBA",		"\xB4\xBD" => "\xE6\x99\xBE",		"\xB4\xBE" => "\xE6\x99\xB7",		"\xB4\xBF" => "\xE6\x9B\xBE",		"\xB4\xC0" => "\xE6\x9B\xBF",		"\xB4\xC1" => "\xE6\x9C\x9F",		"\xB4\xC2" => "\xE6\x9C\x9D",		"\xB4\xC3" => "\xE6\xA3\xBA",		"\xB4\xC4" => "\xE6\xA3\x95",		"\xB4\xC5" => "\xE6\xA3\xA0",		"\xB4\xC6" => "\xE6\xA3\x98",		"\xB4\xC7" => "\xE6\xA3\x97",		"\xB4\xC8" => "\xE6\xA4\x85",		"\xB4\xC9" => "\xE6\xA3\x9F",		"\xB4\xCA" => "\xE6\xA3\xB5",		"\xB4\xCB" => "\xE6\xA3\xAE",		"\xB4\xCC" => "\xE6\xA3\xA7",		"\xB4\xCD" => "\xE6\xA3\xB9",		"\xB4\xCE" => "\xE6\xA3\x92",		"\xB4\xCF" => "\xE6\xA3\xB2",		"\xB4\xD0" => "\xE6\xA3\xA3",		"\xB4\xD1" => "\xE6\xA3\x8B",		"\xB4\xD2" => "\xE6\xA3\x8D",		"\xB4\xD3" => "\xE6\xA4\x8D",		"\xB4\xD4" => "\xE6\xA4\x92",		"\xB4\xD5" => "\xE6\xA4\x8E",		"\xB4\xD6" => "\xE6\xA3\x89",		"\xB4\xD7" => "\xE6\xA3\x9A",		"\xB4\xD8" => "\xE6\xA5\xAE",		"\xB4\xD9" => "\xE6\xA3\xBB",		"\xB4\xDA" => "\xE6\xAC\xBE",		"\xB4\xDB" => "\xE6\xAC\xBA",		"\xB4\xDC" => "\xE6\xAC\xBD",		"\xB4\xDD" => "\xE6\xAE\x98",		"\xB4\xDE" => "\xE6\xAE\x96",		"\xB4\xDF" => "\xE6\xAE\xBC",		"\xB4\xE0" => "\xE6\xAF\xAF",		"\xB4\xE1" => "\xE6\xB0\xAE",		"\xB4\xE2" => "\xE6\xB0\xAF",		"\xB4\xE3" => "\xE6\xB0\xAC",		"\xB4\xE4" => "\xE6\xB8\xAF",		"\xB4\xE5" => "\xE6\xB8\xB8",		"\xB4\xE6" => "\xE6\xB9\x94",		"\xB4\xE7" => "\xE6\xB8\xA1",		"\xB4\xE8" => "\xE6\xB8\xB2",		"\xB4\xE9" => "\xE6\xB9\xA7",		"\xB4\xEA" => "\xE6\xB9\x8A",		"\xB4\xEB" => "\xE6\xB8\xA0",		"\xB4\xEC" => "\xE6\xB8\xA5",		"\xB4\xED" => "\xE6\xB8\xA3",		"\xB4\xEE" => "\xE6\xB8\x9B",		"\xB4\xEF" => "\xE6\xB9\x9B",		"\xB4\xF0" => "\xE6\xB9\x98",		"\xB4\xF1" => "\xE6\xB8\xA4",		"\xB4\xF2" => "\xE6\xB9\x96",		"\xB4\xF3" => "\xE6\xB9\xAE",		"\xB4\xF4" => "\xE6\xB8\xAD",		"\xB4\xF5" => "\xE6\xB8\xA6",		"\xB4\xF6" => "\xE6\xB9\xAF",		"\xB4\xF7" => "\xE6\xB8\xB4",		"\xB4\xF8" => "\xE6\xB9\x8D",		"\xB4\xF9" => "\xE6\xB8\xBA",		"\xB4\xFA" => "\xE6\xB8\xAC",		"\xB4\xFB" => "\xE6\xB9\x83",		"\xB4\xFC" => "\xE6\xB8\x9D",		"\xB4\xFD" => "\xE6\xB8\xBE",		"\xB4\xFE" => "\xE6\xBB\x8B",		"\xB5\x40" => "\xE6\xBA\x89",		"\xB5\x41" => "\xE6\xB8\x99",		"\xB5\x42" => "\xE6\xB9\x8E",		"\xB5\x43" => "\xE6\xB9\xA3",		"\xB5\x44" => "\xE6\xB9\x84",		"\xB5\x45" => "\xE6\xB9\xB2",		"\xB5\x46" => "\xE6\xB9\xA9",		"\xB5\x47" => "\xE6\xB9\x9F",		"\xB5\x48" => "\xE7\x84\x99",		"\xB5\x49" => "\xE7\x84\x9A",		"\xB5\x4A" => "\xE7\x84\xA6",		"\xB5\x4B" => "\xE7\x84\xB0",		"\xB5\x4C" => "\xE7\x84\xA1",		"\xB5\x4D" => "\xE7\x84\xB6",		"\xB5\x4E" => "\xE7\x85\xAE",		"\xB5\x4F" => "\xE7\x84\x9C",		"\xB5\x50" => "\xE7\x89\x8C",		"\xB5\x51" => "\xE7\x8A\x84",		"\xB5\x52" => "\xE7\x8A\x80",		"\xB5\x53" => "\xE7\x8C\xB6",		"\xB5\x54" => "\xE7\x8C\xA5",		"\xB5\x55" => "\xE7\x8C\xB4",		"\xB5\x56" => "\xE7\x8C\xA9",		"\xB5\x57" => "\xE7\x90\xBA",		"\xB5\x58" => "\xE7\x90\xAA",		"\xB5\x59" => "\xE7\x90\xB3",		"\xB5\x5A" => "\xE7\x90\xA2",		"\xB5\x5B" => "\xE7\x90\xA5",		"\xB5\x5C" => "\xE7\x90\xB5",		"\xB5\x5D" => "\xE7\x90\xB6",		"\xB5\x5E" => "\xE7\x90\xB4",		"\xB5\x5F" => "\xE7\x90\xAF",		"\xB5\x60" => "\xE7\x90\x9B",		"\xB5\x61" => "\xE7\x90\xA6",		"\xB5\x62" => "\xE7\x90\xA8",		"\xB5\x63" => "\xE7\x94\xA5",		"\xB5\x64" => "\xE7\x94\xA6",		"\xB5\x65" => "\xE7\x95\xAB",		"\xB5\x66" => "\xE7\x95\xAA",		"\xB5\x67" => "\xE7\x97\xA2",		"\xB5\x68" => "\xE7\x97\x9B",		"\xB5\x69" => "\xE7\x97\xA3",		"\xB5\x6A" => "\xE7\x97\x99",		"\xB5\x6B" => "\xE7\x97\x98",		"\xB5\x6C" => "\xE7\x97\x9E",		"\xB5\x6D" => "\xE7\x97\xA0",		"\xB5\x6E" => "\xE7\x99\xBB",		"\xB5\x6F" => "\xE7\x99\xBC",		"\xB5\x70" => "\xE7\x9A\x96",		"\xB5\x71" => "\xE7\x9A\x93",		"\xB5\x72" => "\xE7\x9A\xB4",		"\xB5\x73" => "\xE7\x9B\x9C",		"\xB5\x74" => "\xE7\x9D\x8F",		"\xB5\x75" => "\xE7\x9F\xAD",		"\xB5\x76" => "\xE7\xA1\x9D",		"\xB5\x77" => "\xE7\xA1\xAC",		"\xB5\x78" => "\xE7\xA1\xAF",		"\xB5\x79" => "\xE7\xA8\x8D",		"\xB5\x7A" => "\xE7\xA8\x88",		"\xB5\x7B" => "\xE7\xA8\x8B",		"\xB5\x7C" => "\xE7\xA8\x85",		"\xB5\x7D" => "\xE7\xA8\x80",		"\xB5\x7E" => "\xE7\xAA\x98",		"\xB5\xA1" => "\xE7\xAA\x97",		"\xB5\xA2" => "\xE7\xAA\x96",		"\xB5\xA3" => "\xE7\xAB\xA5",		"\xB5\xA4" => "\xE7\xAB\xA3",		"\xB5\xA5" => "\xE7\xAD\x89",		"\xB5\xA6" => "\xE7\xAD\x96",		"\xB5\xA7" => "\xE7\xAD\x86",		"\xB5\xA8" => "\xE7\xAD\x90",		"\xB5\xA9" => "\xE7\xAD\x92",		"\xB5\xAA" => "\xE7\xAD\x94",		"\xB5\xAB" => "\xE7\xAD\x8D",		"\xB5\xAC" => "\xE7\xAD\x8B",		"\xB5\xAD" => "\xE7\xAD\x8F",		"\xB5\xAE" => "\xE7\xAD\x91",		"\xB5\xAF" => "\xE7\xB2\x9F",		"\xB5\xB0" => "\xE7\xB2\xA5",		"\xB5\xB1" => "\xE7\xB5\x9E",		"\xB5\xB2" => "\xE7\xB5\x90",		"\xB5\xB3" => "\xE7\xB5\xA8",		"\xB5\xB4" => "\xE7\xB5\x95",		"\xB5\xB5" => "\xE7\xB4\xAB",		"\xB5\xB6" => "\xE7\xB5\xAE",		"\xB5\xB7" => "\xE7\xB5\xB2",		"\xB5\xB8" => "\xE7\xB5\xA1",		"\xB5\xB9" => "\xE7\xB5\xA6",		"\xB5\xBA" => "\xE7\xB5\xA2",		"\xB5\xBB" => "\xE7\xB5\xB0",		"\xB5\xBC" => "\xE7\xB5\xB3",		"\xB5\xBD" => "\xE5\x96\x84",		"\xB5\xBE" => "\xE7\xBF\x94",		"\xB5\xBF" => "\xE7\xBF\x95",		"\xB5\xC0" => "\xE8\x80\x8B",		"\xB5\xC1" => "\xE8\x81\x92",		"\xB5\xC2" => "\xE8\x82\x85",		"\xB5\xC3" => "\xE8\x85\x95",		"\xB5\xC4" => "\xE8\x85\x94",		"\xB5\xC5" => "\xE8\x85\x8B",		"\xB5\xC6" => "\xE8\x85\x91",		"\xB5\xC7" => "\xE8\x85\x8E",		"\xB5\xC8" => "\xE8\x84\xB9",		"\xB5\xC9" => "\xE8\x85\x86",		"\xB5\xCA" => "\xE8\x84\xBE",		"\xB5\xCB" => "\xE8\x85\x8C",		"\xB5\xCC" => "\xE8\x85\x93",		"\xB5\xCD" => "\xE8\x85\xB4",		"\xB5\xCE" => "\xE8\x88\x92",		"\xB5\xCF" => "\xE8\x88\x9C",		"\xB5\xD0" => "\xE8\x8F\xA9",		"\xB5\xD1" => "\xE8\x90\x83",		"\xB5\xD2" => "\xE8\x8F\xB8",		"\xB5\xD3" => "\xE8\x90\x8D",		"\xB5\xD4" => "\xE8\x8F\xA0",		"\xB5\xD5" => "\xE8\x8F\x85",		"\xB5\xD6" => "\xE8\x90\x8B",		"\xB5\xD7" => "\xE8\x8F\x81",		"\xB5\xD8" => "\xE8\x8F\xAF",		"\xB5\xD9" => "\xE8\x8F\xB1",		"\xB5\xDA" => "\xE8\x8F\xB4",		"\xB5\xDB" => "\xE8\x91\x97",		"\xB5\xDC" => "\xE8\x90\x8A",		"\xB5\xDD" => "\xE8\x8F\xB0",		"\xB5\xDE" => "\xE8\x90\x8C",		"\xB5\xDF" => "\xE8\x8F\x8C",		"\xB5\xE0" => "\xE8\x8F\xBD",		"\xB5\xE1" => "\xE8\x8F\xB2",		"\xB5\xE2" => "\xE8\x8F\x8A",		"\xB5\xE3" => "\xE8\x90\xB8",		"\xB5\xE4" => "\xE8\x90\x8E",		"\xB5\xE5" => "\xE8\x90\x84",		"\xB5\xE6" => "\xE8\x8F\x9C",		"\xB5\xE7" => "\xE8\x90\x87",		"\xB5\xE8" => "\xE8\x8F\x94",		"\xB5\xE9" => "\xE8\x8F\x9F",		"\xB5\xEA" => "\xE8\x99\x9B",		"\xB5\xEB" => "\xE8\x9B\x9F",		"\xB5\xEC" => "\xE8\x9B\x99",		"\xB5\xED" => "\xE8\x9B\xAD",		"\xB5\xEE" => "\xE8\x9B\x94",		"\xB5\xEF" => "\xE8\x9B\x9B",		"\xB5\xF0" => "\xE8\x9B\xA4",		"\xB5\xF1" => "\xE8\x9B\x90",		"\xB5\xF2" => "\xE8\x9B\x9E",		"\xB5\xF3" => "\xE8\xA1\x97",		"\xB5\xF4" => "\xE8\xA3\x81",		"\xB5\xF5" => "\xE8\xA3\x82",		"\xB5\xF6" => "\xE8\xA2\xB1",		"\xB5\xF7" => "\xE8\xA6\x83",		"\xB5\xF8" => "\xE8\xA6\x96",		"\xB5\xF9" => "\xE8\xA8\xBB",		"\xB5\xFA" => "\xE8\xA9\xA0",		"\xB5\xFB" => "\xE8\xA9\x95",		"\xB5\xFC" => "\xE8\xA9\x9E",		"\xB5\xFD" => "\xE8\xA8\xBC",		"\xB5\xFE" => "\xE8\xA9\x81",		"\xB6\x40" => "\xE8\xA9\x94",		"\xB6\x41" => "\xE8\xA9\x9B",		"\xB6\x42" => "\xE8\xA9\x90",		"\xB6\x43" => "\xE8\xA9\x86",		"\xB6\x44" => "\xE8\xA8\xB4",		"\xB6\x45" => "\xE8\xA8\xBA",		"\xB6\x46" => "\xE8\xA8\xB6",		"\xB6\x47" => "\xE8\xA9\x96",		"\xB6\x48" => "\xE8\xB1\xA1",		"\xB6\x49" => "\xE8\xB2\x82",		"\xB6\x4A" => "\xE8\xB2\xAF",		"\xB6\x4B" => "\xE8\xB2\xBC",		"\xB6\x4C" => "\xE8\xB2\xB3",		"\xB6\x4D" => "\xE8\xB2\xBD",		"\xB6\x4E" => "\xE8\xB3\x81",		"\xB6\x4F" => "\xE8\xB2\xBB",		"\xB6\x50" => "\xE8\xB3\x80",		"\xB6\x51" => "\xE8\xB2\xB4",		"\xB6\x52" => "\xE8\xB2\xB7",		"\xB6\x53" => "\xE8\xB2\xB6",		"\xB6\x54" => "\xE8\xB2\xBF",		"\xB6\x55" => "\xE8\xB2\xB8",		"\xB6\x56" => "\xE8\xB6\x8A",		"\xB6\x57" => "\xE8\xB6\x85",		"\xB6\x58" => "\xE8\xB6\x81",		"\xB6\x59" => "\xE8\xB7\x8E",		"\xB6\x5A" => "\xE8\xB7\x9D",		"\xB6\x5B" => "\xE8\xB7\x8B",		"\xB6\x5C" => "\xE8\xB7\x9A",		"\xB6\x5D" => "\xE8\xB7\x91",		"\xB6\x5E" => "\xE8\xB7\x8C",		"\xB6\x5F" => "\xE8\xB7\x9B",		"\xB6\x60" => "\xE8\xB7\x86",		"\xB6\x61" => "\xE8\xBB\xBB",		"\xB6\x62" => "\xE8\xBB\xB8",		"\xB6\x63" => "\xE8\xBB\xBC",		"\xB6\x64" => "\xE8\xBE\x9C",		"\xB6\x65" => "\xE9\x80\xAE",		"\xB6\x66" => "\xE9\x80\xB5",		"\xB6\x67" => "\xE9\x80\xB1",		"\xB6\x68" => "\xE9\x80\xB8",		"\xB6\x69" => "\xE9\x80\xB2",		"\xB6\x6A" => "\xE9\x80\xB6",		"\xB6\x6B" => "\xE9\x84\x82",		"\xB6\x6C" => "\xE9\x83\xB5",		"\xB6\x6D" => "\xE9\x84\x89",		"\xB6\x6E" => "\xE9\x83\xBE",		"\xB6\x6F" => "\xE9\x85\xA3",		"\xB6\x70" => "\xE9\x85\xA5",		"\xB6\x71" => "\xE9\x87\x8F",		"\xB6\x72" => "\xE9\x88\x94",		"\xB6\x73" => "\xE9\x88\x95",		"\xB6\x74" => "\xE9\x88\xA3",		"\xB6\x75" => "\xE9\x88\x89",		"\xB6\x76" => "\xE9\x88\x9E",		"\xB6\x77" => "\xE9\x88\x8D",		"\xB6\x78" => "\xE9\x88\x90",		"\xB6\x79" => "\xE9\x88\x87",		"\xB6\x7A" => "\xE9\x88\x91",		"\xB6\x7B" => "\xE9\x96\x94",		"\xB6\x7C" => "\xE9\x96\x8F",		"\xB6\x7D" => "\xE9\x96\x8B",		"\xB6\x7E" => "\xE9\x96\x91",		"\xB6\xA1" => "\xE9\x96\x93",		"\xB6\xA2" => "\xE9\x96\x92",		"\xB6\xA3" => "\xE9\x96\x8E",		"\xB6\xA4" => "\xE9\x9A\x8A",		"\xB6\xA5" => "\xE9\x9A\x8E",		"\xB6\xA6" => "\xE9\x9A\x8B",		"\xB6\xA7" => "\xE9\x99\xBD",		"\xB6\xA8" => "\xE9\x9A\x85",		"\xB6\xA9" => "\xE9\x9A\x86",		"\xB6\xAA" => "\xE9\x9A\x8D",		"\xB6\xAB" => "\xE9\x99\xB2",		"\xB6\xAC" => "\xE9\x9A\x84",		"\xB6\xAD" => "\xE9\x9B\x81",		"\xB6\xAE" => "\xE9\x9B\x85",		"\xB6\xAF" => "\xE9\x9B\x84",		"\xB6\xB0" => "\xE9\x9B\x86",		"\xB6\xB1" => "\xE9\x9B\x87",		"\xB6\xB2" => "\xE9\x9B\xAF",		"\xB6\xB3" => "\xE9\x9B\xB2",		"\xB6\xB4" => "\xE9\x9F\x8C",		"\xB6\xB5" => "\xE9\xA0\x85",		"\xB6\xB6" => "\xE9\xA0\x86",		"\xB6\xB7" => "\xE9\xA0\x88",		"\xB6\xB8" => "\xE9\xA3\xA7",		"\xB6\xB9" => "\xE9\xA3\xAA",		"\xB6\xBA" => "\xE9\xA3\xAF",		"\xB6\xBB" => "\xE9\xA3\xA9",		"\xB6\xBC" => "\xE9\xA3\xB2",		"\xB6\xBD" => "\xE9\xA3\xAD",		"\xB6\xBE" => "\xE9\xA6\xAE",		"\xB6\xBF" => "\xE9\xA6\xAD",		"\xB6\xC0" => "\xE9\xBB\x83",		"\xB6\xC1" => "\xE9\xBB\x8D",		"\xB6\xC2" => "\xE9\xBB\x91",		"\xB6\xC3" => "\xE4\xBA\x82",		"\xB6\xC4" => "\xE5\x82\xAD",		"\xB6\xC5" => "\xE5\x82\xB5",		"\xB6\xC6" => "\xE5\x82\xB2",		"\xB6\xC7" => "\xE5\x82\xB3",		"\xB6\xC8" => "\xE5\x83\x85",		"\xB6\xC9" => "\xE5\x82\xBE",		"\xB6\xCA" => "\xE5\x82\xAC",		"\xB6\xCB" => "\xE5\x82\xB7",		"\xB6\xCC" => "\xE5\x82\xBB",		"\xB6\xCD" => "\xE5\x82\xAF",		"\xB6\xCE" => "\xE5\x83\x87",		"\xB6\xCF" => "\xE5\x89\xBF",		"\xB6\xD0" => "\xE5\x89\xB7",		"\xB6\xD1" => "\xE5\x89\xBD",		"\xB6\xD2" => "\xE5\x8B\x9F",		"\xB6\xD3" => "\xE5\x8B\xA6",		"\xB6\xD4" => "\xE5\x8B\xA4",		"\xB6\xD5" => "\xE5\x8B\xA2",		"\xB6\xD6" => "\xE5\x8B\xA3",		"\xB6\xD7" => "\xE5\x8C\xAF",		"\xB6\xD8" => "\xE5\x97\x9F",		"\xB6\xD9" => "\xE5\x97\xA8",		"\xB6\xDA" => "\xE5\x97\x93",		"\xB6\xDB" => "\xE5\x97\xA6",		"\xB6\xDC" => "\xE5\x97\x8E",		"\xB6\xDD" => "\xE5\x97\x9C",		"\xB6\xDE" => "\xE5\x97\x87",		"\xB6\xDF" => "\xE5\x97\x91",		"\xB6\xE0" => "\xE5\x97\xA3",		"\xB6\xE1" => "\xE5\x97\xA4",		"\xB6\xE2" => "\xE5\x97\xAF",		"\xB6\xE3" => "\xE5\x97\x9A",		"\xB6\xE4" => "\xE5\x97\xA1",		"\xB6\xE5" => "\xE5\x97\x85",		"\xB6\xE6" => "\xE5\x97\x86",		"\xB6\xE7" => "\xE5\x97\xA5",		"\xB6\xE8" => "\xE5\x97\x89",		"\xB6\xE9" => "\xE5\x9C\x92",		"\xB6\xEA" => "\xE5\x9C\x93",		"\xB6\xEB" => "\xE5\xA1\x9E",		"\xB6\xEC" => "\xE5\xA1\x91",		"\xB6\xED" => "\xE5\xA1\x98",		"\xB6\xEE" => "\xE5\xA1\x97",		"\xB6\xEF" => "\xE5\xA1\x9A",		"\xB6\xF0" => "\xE5\xA1\x94",		"\xB6\xF1" => "\xE5\xA1\xAB",		"\xB6\xF2" => "\xE5\xA1\x8C",		"\xB6\xF3" => "\xE5\xA1\xAD",		"\xB6\xF4" => "\xE5\xA1\x8A",		"\xB6\xF5" => "\xE5\xA1\xA2",		"\xB6\xF6" => "\xE5\xA1\x92",		"\xB6\xF7" => "\xE5\xA1\x8B",		"\xB6\xF8" => "\xE5\xA5\xA7",		"\xB6\xF9" => "\xE5\xAB\x81",		"\xB6\xFA" => "\xE5\xAB\x89",		"\xB6\xFB" => "\xE5\xAB\x8C",		"\xB6\xFC" => "\xE5\xAA\xBE",		"\xB6\xFD" => "\xE5\xAA\xBD",		"\xB6\xFE" => "\xE5\xAA\xBC",		"\xB7\x40" => "\xE5\xAA\xB3",		"\xB7\x41" => "\xE5\xAB\x82",		"\xB7\x42" => "\xE5\xAA\xB2",		"\xB7\x43" => "\xE5\xB5\xA9",		"\xB7\x44" => "\xE5\xB5\xAF",		"\xB7\x45" => "\xE5\xB9\x8C",		"\xB7\x46" => "\xE5\xB9\xB9",		"\xB7\x47" => "\xE5\xBB\x89",		"\xB7\x48" => "\xE5\xBB\x88",		"\xB7\x49" => "\xE5\xBC\x92",		"\xB7\x4A" => "\xE5\xBD\x99",		"\xB7\x4B" => "\xE5\xBE\xAC",		"\xB7\x4C" => "\xE5\xBE\xAE",		"\xB7\x4D" => "\xE6\x84\x9A",		"\xB7\x4E" => "\xE6\x84\x8F",		"\xB7\x4F" => "\xE6\x85\x88",		"\xB7\x50" => "\xE6\x84\x9F",		"\xB7\x51" => "\xE6\x83\xB3",		"\xB7\x52" => "\xE6\x84\x9B",		"\xB7\x53" => "\xE6\x83\xB9",		"\xB7\x54" => "\xE6\x84\x81",		"\xB7\x55" => "\xE6\x84\x88",		"\xB7\x56" => "\xE6\x85\x8E",		"\xB7\x57" => "\xE6\x85\x8C",		"\xB7\x58" => "\xE6\x85\x84",		"\xB7\x59" => "\xE6\x85\x8D",		"\xB7\x5A" => "\xE6\x84\xBE",		"\xB7\x5B" => "\xE6\x84\xB4",		"\xB7\x5C" => "\xE6\x84\xA7",		"\xB7\x5D" => "\xE6\x84\x8D",		"\xB7\x5E" => "\xE6\x84\x86",		"\xB7\x5F" => "\xE6\x84\xB7",		"\xB7\x60" => "\xE6\x88\xA1",		"\xB7\x61" => "\xE6\x88\xA2",		"\xB7\x62" => "\xE6\x90\x93",		"\xB7\x63" => "\xE6\x90\xBE",		"\xB7\x64" => "\xE6\x90\x9E",		"\xB7\x65" => "\xE6\x90\xAA",		"\xB7\x66" => "\xE6\x90\xAD",		"\xB7\x67" => "\xE6\x90\xBD",		"\xB7\x68" => "\xE6\x90\xAC",		"\xB7\x69" => "\xE6\x90\x8F",		"\xB7\x6A" => "\xE6\x90\x9C",		"\xB7\x6B" => "\xE6\x90\x94",		"\xB7\x6C" => "\xE6\x90\x8D",		"\xB7\x6D" => "\xE6\x90\xB6",		"\xB7\x6E" => "\xE6\x90\x96",		"\xB7\x6F" => "\xE6\x90\x97",		"\xB7\x70" => "\xE6\x90\x86",		"\xB7\x71" => "\xE6\x95\xAC",		"\xB7\x72" => "\xE6\x96\x9F",		"\xB7\x73" => "\xE6\x96\xB0",		"\xB7\x74" => "\xE6\x9A\x97",		"\xB7\x75" => "\xE6\x9A\x89",		"\xB7\x76" => "\xE6\x9A\x87",		"\xB7\x77" => "\xE6\x9A\x88",		"\xB7\x78" => "\xE6\x9A\x96",		"\xB7\x79" => "\xE6\x9A\x84",		"\xB7\x7A" => "\xE6\x9A\x98",		"\xB7\x7B" => "\xE6\x9A\x8D",		"\xB7\x7C" => "\xE6\x9C\x83",		"\xB7\x7D" => "\xE6\xA6\x94",		"\xB7\x7E" => "\xE6\xA5\xAD",		"\xB7\xA1" => "\xE6\xA5\x9A",		"\xB7\xA2" => "\xE6\xA5\xB7",		"\xB7\xA3" => "\xE6\xA5\xA0",		"\xB7\xA4" => "\xE6\xA5\x94",		"\xB7\xA5" => "\xE6\xA5\xB5",		"\xB7\xA6" => "\xE6\xA4\xB0",		"\xB7\xA7" => "\xE6\xA6\x82",		"\xB7\xA8" => "\xE6\xA5\x8A",		"\xB7\xA9" => "\xE6\xA5\xA8",		"\xB7\xAA" => "\xE6\xA5\xAB",		"\xB7\xAB" => "\xE6\xA5\x9E",		"\xB7\xAC" => "\xE6\xA5\x93",		"\xB7\xAD" => "\xE6\xA5\xB9",		"\xB7\xAE" => "\xE6\xA6\x86",		"\xB7\xAF" => "\xE6\xA5\x9D",		"\xB7\xB0" => "\xE6\xA5\xA3",		"\xB7\xB1" => "\xE6\xA5\x9B",		"\xB7\xB2" => "\xE6\xAD\x87",		"\xB7\xB3" => "\xE6\xAD\xB2",		"\xB7\xB4" => "\xE6\xAF\x80",		"\xB7\xB5" => "\xE6\xAE\xBF",		"\xB7\xB6" => "\xE6\xAF\x93",		"\xB7\xB7" => "\xE6\xAF\xBD",		"\xB7\xB8" => "\xE6\xBA\xA2",		"\xB7\xB9" => "\xE6\xBA\xAF",		"\xB7\xBA" => "\xE6\xBB\x93",		"\xB7\xBB" => "\xE6\xBA\xB6",		"\xB7\xBC" => "\xE6\xBB\x82",		"\xB7\xBD" => "\xE6\xBA\x90",		"\xB7\xBE" => "\xE6\xBA\x9D",		"\xB7\xBF" => "\xE6\xBB\x87",		"\xB7\xC0" => "\xE6\xBB\x85",		"\xB7\xC1" => "\xE6\xBA\xA5",		"\xB7\xC2" => "\xE6\xBA\x98",		"\xB7\xC3" => "\xE6\xBA\xBC",		"\xB7\xC4" => "\xE6\xBA\xBA",		"\xB7\xC5" => "\xE6\xBA\xAB",		"\xB7\xC6" => "\xE6\xBB\x91",		"\xB7\xC7" => "\xE6\xBA\x96",		"\xB7\xC8" => "\xE6\xBA\x9C",		"\xB7\xC9" => "\xE6\xBB\x84",		"\xB7\xCA" => "\xE6\xBB\x94",		"\xB7\xCB" => "\xE6\xBA\xAA",		"\xB7\xCC" => "\xE6\xBA\xA7",		"\xB7\xCD" => "\xE6\xBA\xB4",		"\xB7\xCE" => "\xE7\x85\x8E",		"\xB7\xCF" => "\xE7\x85\x99",		"\xB7\xD0" => "\xE7\x85\xA9",		"\xB7\xD1" => "\xE7\x85\xA4",		"\xB7\xD2" => "\xE7\x85\x89",		"\xB7\xD3" => "\xE7\x85\xA7",		"\xB7\xD4" => "\xE7\x85\x9C",		"\xB7\xD5" => "\xE7\x85\xAC",		"\xB7\xD6" => "\xE7\x85\xA6",		"\xB7\xD7" => "\xE7\x85\x8C",		"\xB7\xD8" => "\xE7\x85\xA5",		"\xB7\xD9" => "\xE7\x85\x9E",		"\xB7\xDA" => "\xE7\x85\x86",		"\xB7\xDB" => "\xE7\x85\xA8",		"\xB7\xDC" => "\xE7\x85\x96",		"\xB7\xDD" => "\xE7\x88\xBA",		"\xB7\xDE" => "\xE7\x89\x92",		"\xB7\xDF" => "\xE7\x8C\xB7",		"\xB7\xE0" => "\xE7\x8D\x85",		"\xB7\xE1" => "\xE7\x8C\xBF",		"\xB7\xE2" => "\xE7\x8C\xBE",		"\xB7\xE3" => "\xE7\x91\xAF",		"\xB7\xE4" => "\xE7\x91\x9A",		"\xB7\xE5" => "\xE7\x91\x95",		"\xB7\xE6" => "\xE7\x91\x9F",		"\xB7\xE7" => "\xE7\x91\x9E",		"\xB7\xE8" => "\xE7\x91\x81",		"\xB7\xE9" => "\xE7\x90\xBF",		"\xB7\xEA" => "\xE7\x91\x99",		"\xB7\xEB" => "\xE7\x91\x9B",		"\xB7\xEC" => "\xE7\x91\x9C",		"\xB7\xED" => "\xE7\x95\xB6",		"\xB7\xEE" => "\xE7\x95\xB8",		"\xB7\xEF" => "\xE7\x98\x80",		"\xB7\xF0" => "\xE7\x97\xB0",		"\xB7\xF1" => "\xE7\x98\x81",		"\xB7\xF2" => "\xE7\x97\xB2",		"\xB7\xF3" => "\xE7\x97\xB1",		"\xB7\xF4" => "\xE7\x97\xBA",		"\xB7\xF5" => "\xE7\x97\xBF",		"\xB7\xF6" => "\xE7\x97\xB4",		"\xB7\xF7" => "\xE7\x97\xB3",		"\xB7\xF8" => "\xE7\x9B\x9E",		"\xB7\xF9" => "\xE7\x9B\x9F",		"\xB7\xFA" => "\xE7\x9D\x9B",		"\xB7\xFB" => "\xE7\x9D\xAB",		"\xB7\xFC" => "\xE7\x9D\xA6",		"\xB7\xFD" => "\xE7\x9D\x9E",		"\xB7\xFE" => "\xE7\x9D\xA3",		"\xB8\x40" => "\xE7\x9D\xB9",		"\xB8\x41" => "\xE7\x9D\xAA",		"\xB8\x42" => "\xE7\x9D\xAC",		"\xB8\x43" => "\xE7\x9D\x9C",		"\xB8\x44" => "\xE7\x9D\xA5",		"\xB8\x45" => "\xE7\x9D\xA8",		"\xB8\x46" => "\xE7\x9D\xA2",		"\xB8\x47" => "\xE7\x9F\xAE",		"\xB8\x48" => "\xE7\xA2\x8E",		"\xB8\x49" => "\xE7\xA2\xB0",		"\xB8\x4A" => "\xE7\xA2\x97",		"\xB8\x4B" => "\xE7\xA2\x98",		"\xB8\x4C" => "\xE7\xA2\x8C",		"\xB8\x4D" => "\xE7\xA2\x89",		"\xB8\x4E" => "\xE7\xA1\xBC",		"\xB8\x4F" => "\xE7\xA2\x91",		"\xB8\x50" => "\xE7\xA2\x93",		"\xB8\x51" => "\xE7\xA1\xBF",		"\xB8\x52" => "\xE7\xA5\xBA",		"\xB8\x53" => "\xE7\xA5\xBF",		"\xB8\x54" => "\xE7\xA6\x81",		"\xB8\x55" => "\xE8\x90\xAC",		"\xB8\x56" => "\xE7\xA6\xBD",		"\xB8\x57" => "\xE7\xA8\x9C",		"\xB8\x58" => "\xE7\xA8\x9A",		"\xB8\x59" => "\xE7\xA8\xA0",		"\xB8\x5A" => "\xE7\xA8\x94",		"\xB8\x5B" => "\xE7\xA8\x9F",		"\xB8\x5C" => "\xE7\xA8\x9E",		"\xB8\x5D" => "\xE7\xAA\x9F",		"\xB8\x5E" => "\xE7\xAA\xA0",		"\xB8\x5F" => "\xE7\xAD\xB7",		"\xB8\x60" => "\xE7\xAF\x80",		"\xB8\x61" => "\xE7\xAD\xA0",		"\xB8\x62" => "\xE7\xAD\xAE",		"\xB8\x63" => "\xE7\xAD\xA7",		"\xB8\x64" => "\xE7\xB2\xB1",		"\xB8\x65" => "\xE7\xB2\xB3",		"\xB8\x66" => "\xE7\xB2\xB5",		"\xB8\x67" => "\xE7\xB6\x93",		"\xB8\x68" => "\xE7\xB5\xB9",		"\xB8\x69" => "\xE7\xB6\x91",		"\xB8\x6A" => "\xE7\xB6\x81",		"\xB8\x6B" => "\xE7\xB6\x8F",		"\xB8\x6C" => "\xE7\xB5\x9B",		"\xB8\x6D" => "\xE7\xBD\xAE",		"\xB8\x6E" => "\xE7\xBD\xA9",		"\xB8\x6F" => "\xE7\xBD\xAA",		"\xB8\x70" => "\xE7\xBD\xB2",		"\xB8\x71" => "\xE7\xBE\xA9",		"\xB8\x72" => "\xE7\xBE\xA8",		"\xB8\x73" => "\xE7\xBE\xA4",		"\xB8\x74" => "\xE8\x81\x96",		"\xB8\x75" => "\xE8\x81\x98",		"\xB8\x76" => "\xE8\x82\x86",		"\xB8\x77" => "\xE8\x82\x84",		"\xB8\x78" => "\xE8\x85\xB1",		"\xB8\x79" => "\xE8\x85\xB0",		"\xB8\x7A" => "\xE8\x85\xB8",		"\xB8\x7B" => "\xE8\x85\xA5",		"\xB8\x7C" => "\xE8\x85\xAE",		"\xB8\x7D" => "\xE8\x85\xB3",		"\xB8\x7E" => "\xE8\x85\xAB",		"\xB8\xA1" => "\xE8\x85\xB9",		"\xB8\xA2" => "\xE8\x85\xBA",		"\xB8\xA3" => "\xE8\x85\xA6",		"\xB8\xA4" => "\xE8\x88\x85",		"\xB8\xA5" => "\xE8\x89\x87",		"\xB8\xA6" => "\xE8\x92\x82",		"\xB8\xA7" => "\xE8\x91\xB7",		"\xB8\xA8" => "\xE8\x90\xBD",		"\xB8\xA9" => "\xE8\x90\xB1",		"\xB8\xAA" => "\xE8\x91\xB5",		"\xB8\xAB" => "\xE8\x91\xA6",		"\xB8\xAC" => "\xE8\x91\xAB",		"\xB8\xAD" => "\xE8\x91\x89",		"\xB8\xAE" => "\xE8\x91\xAC",		"\xB8\xAF" => "\xE8\x91\x9B",		"\xB8\xB0" => "\xE8\x90\xBC",		"\xB8\xB1" => "\xE8\x90\xB5",		"\xB8\xB2" => "\xE8\x91\xA1",		"\xB8\xB3" => "\xE8\x91\xA3",		"\xB8\xB4" => "\xE8\x91\xA9",		"\xB8\xB5" => "\xE8\x91\xAD",		"\xB8\xB6" => "\xE8\x91\x86",		"\xB8\xB7" => "\xE8\x99\x9E",		"\xB8\xB8" => "\xE8\x99\x9C",		"\xB8\xB9" => "\xE8\x99\x9F",		"\xB8\xBA" => "\xE8\x9B\xB9",		"\xB8\xBB" => "\xE8\x9C\x93",		"\xB8\xBC" => "\xE8\x9C\x88",		"\xB8\xBD" => "\xE8\x9C\x87",		"\xB8\xBE" => "\xE8\x9C\x80",		"\xB8\xBF" => "\xE8\x9B\xBE",		"\xB8\xC0" => "\xE8\x9B\xBB",		"\xB8\xC1" => "\xE8\x9C\x82",		"\xB8\xC2" => "\xE8\x9C\x83",		"\xB8\xC3" => "\xE8\x9C\x86",		"\xB8\xC4" => "\xE8\x9C\x8A",		"\xB8\xC5" => "\xE8\xA1\x99",		"\xB8\xC6" => "\xE8\xA3\x9F",		"\xB8\xC7" => "\xE8\xA3\x94",		"\xB8\xC8" => "\xE8\xA3\x99",		"\xB8\xC9" => "\xE8\xA3\x9C",		"\xB8\xCA" => "\xE8\xA3\x98",		"\xB8\xCB" => "\xE8\xA3\x9D",		"\xB8\xCC" => "\xE8\xA3\xA1",		"\xB8\xCD" => "\xE8\xA3\x8A",		"\xB8\xCE" => "\xE8\xA3\x95",		"\xB8\xCF" => "\xE8\xA3\x92",		"\xB8\xD0" => "\xE8\xA6\x9C",		"\xB8\xD1" => "\xE8\xA7\xA3",		"\xB8\xD2" => "\xE8\xA9\xAB",		"\xB8\xD3" => "\xE8\xA9\xB2",		"\xB8\xD4" => "\xE8\xA9\xB3",		"\xB8\xD5" => "\xE8\xA9\xA6",		"\xB8\xD6" => "\xE8\xA9\xA9",		"\xB8\xD7" => "\xE8\xA9\xB0",		"\xB8\xD8" => "\xE8\xAA\x87",		"\xB8\xD9" => "\xE8\xA9\xBC",		"\xB8\xDA" => "\xE8\xA9\xA3",		"\xB8\xDB" => "\xE8\xAA\xA0",		"\xB8\xDC" => "\xE8\xA9\xB1",		"\xB8\xDD" => "\xE8\xAA\x85",		"\xB8\xDE" => "\xE8\xA9\xAD",		"\xB8\xDF" => "\xE8\xA9\xA2",		"\xB8\xE0" => "\xE8\xA9\xAE",		"\xB8\xE1" => "\xE8\xA9\xAC",		"\xB8\xE2" => "\xE8\xA9\xB9",		"\xB8\xE3" => "\xE8\xA9\xBB",		"\xB8\xE4" => "\xE8\xA8\xBE",		"\xB8\xE5" => "\xE8\xA9\xA8",		"\xB8\xE6" => "\xE8\xB1\xA2",		"\xB8\xE7" => "\xE8\xB2\x8A",		"\xB8\xE8" => "\xE8\xB2\x89",		"\xB8\xE9" => "\xE8\xB3\x8A",		"\xB8\xEA" => "\xE8\xB3\x87",		"\xB8\xEB" => "\xE8\xB3\x88",		"\xB8\xEC" => "\xE8\xB3\x84",		"\xB8\xED" => "\xE8\xB2\xB2",		"\xB8\xEE" => "\xE8\xB3\x83",		"\xB8\xEF" => "\xE8\xB3\x82",		"\xB8\xF0" => "\xE8\xB3\x85",		"\xB8\xF1" => "\xE8\xB7\xA1",		"\xB8\xF2" => "\xE8\xB7\x9F",		"\xB8\xF3" => "\xE8\xB7\xA8",		"\xB8\xF4" => "\xE8\xB7\xAF",		"\xB8\xF5" => "\xE8\xB7\xB3",		"\xB8\xF6" => "\xE8\xB7\xBA",		"\xB8\xF7" => "\xE8\xB7\xAA",		"\xB8\xF8" => "\xE8\xB7\xA4",		"\xB8\xF9" => "\xE8\xB7\xA6",		"\xB8\xFA" => "\xE8\xBA\xB2",		"\xB8\xFB" => "\xE8\xBC\x83",		"\xB8\xFC" => "\xE8\xBC\x89",		"\xB8\xFD" => "\xE8\xBB\xBE",		"\xB8\xFE" => "\xE8\xBC\x8A",		"\xB9\x40" => "\xE8\xBE\x9F",		"\xB9\x41" => "\xE8\xBE\xB2",		"\xB9\x42" => "\xE9\x81\x8B",		"\xB9\x43" => "\xE9\x81\x8A",		"\xB9\x44" => "\xE9\x81\x93",		"\xB9\x45" => "\xE9\x81\x82",		"\xB9\x46" => "\xE9\x81\x94",		"\xB9\x47" => "\xE9\x80\xBC",		"\xB9\x48" => "\xE9\x81\x95",		"\xB9\x49" => "\xE9\x81\x90",		"\xB9\x4A" => "\xE9\x81\x87",		"\xB9\x4B" => "\xE9\x81\x8F",		"\xB9\x4C" => "\xE9\x81\x8E",		"\xB9\x4D" => "\xE9\x81\x8D",		"\xB9\x4E" => "\xE9\x81\x91",		"\xB9\x4F" => "\xE9\x80\xBE",		"\xB9\x50" => "\xE9\x81\x81",		"\xB9\x51" => "\xE9\x84\x92",		"\xB9\x52" => "\xE9\x84\x97",		"\xB9\x53" => "\xE9\x85\xAC",		"\xB9\x54" => "\xE9\x85\xAA",		"\xB9\x55" => "\xE9\x85\xA9",		"\xB9\x56" => "\xE9\x87\x89",		"\xB9\x57" => "\xE9\x88\xB7",		"\xB9\x58" => "\xE9\x89\x97",		"\xB9\x59" => "\xE9\x88\xB8",		"\xB9\x5A" => "\xE9\x88\xBD",		"\xB9\x5B" => "\xE9\x89\x80",		"\xB9\x5C" => "\xE9\x88\xBE",		"\xB9\x5D" => "\xE9\x89\x9B",		"\xB9\x5E" => "\xE9\x89\x8B",		"\xB9\x5F" => "\xE9\x89\xA4",		"\xB9\x60" => "\xE9\x89\x91",		"\xB9\x61" => "\xE9\x88\xB4",		"\xB9\x62" => "\xE9\x89\x89",		"\xB9\x63" => "\xE9\x89\x8D",		"\xB9\x64" => "\xE9\x89\x85",		"\xB9\x65" => "\xE9\x88\xB9",		"\xB9\x66" => "\xE9\x88\xBF",		"\xB9\x67" => "\xE9\x89\x9A",		"\xB9\x68" => "\xE9\x96\x98",		"\xB9\x69" => "\xE9\x9A\x98",		"\xB9\x6A" => "\xE9\x9A\x94",		"\xB9\x6B" => "\xE9\x9A\x95",		"\xB9\x6C" => "\xE9\x9B\x8D",		"\xB9\x6D" => "\xE9\x9B\x8B",		"\xB9\x6E" => "\xE9\x9B\x89",		"\xB9\x6F" => "\xE9\x9B\x8A",		"\xB9\x70" => "\xE9\x9B\xB7",		"\xB9\x71" => "\xE9\x9B\xBB",		"\xB9\x72" => "\xE9\x9B\xB9",		"\xB9\x73" => "\xE9\x9B\xB6",		"\xB9\x74" => "\xE9\x9D\x96",		"\xB9\x75" => "\xE9\x9D\xB4",		"\xB9\x76" => "\xE9\x9D\xB6",		"\xB9\x77" => "\xE9\xA0\x90",		"\xB9\x78" => "\xE9\xA0\x91",		"\xB9\x79" => "\xE9\xA0\x93",		"\xB9\x7A" => "\xE9\xA0\x8A",		"\xB9\x7B" => "\xE9\xA0\x92",		"\xB9\x7C" => "\xE9\xA0\x8C",		"\xB9\x7D" => "\xE9\xA3\xBC",		"\xB9\x7E" => "\xE9\xA3\xB4",		"\xB9\xA1" => "\xE9\xA3\xBD",		"\xB9\xA2" => "\xE9\xA3\xBE",		"\xB9\xA3" => "\xE9\xA6\xB3",		"\xB9\xA4" => "\xE9\xA6\xB1",		"\xB9\xA5" => "\xE9\xA6\xB4",		"\xB9\xA6" => "\xE9\xAB\xA1",		"\xB9\xA7" => "\xE9\xB3\xA9",		"\xB9\xA8" => "\xE9\xBA\x82",		"\xB9\xA9" => "\xE9\xBC\x8E",		"\xB9\xAA" => "\xE9\xBC\x93",		"\xB9\xAB" => "\xE9\xBC\xA0",		"\xB9\xAC" => "\xE5\x83\xA7",		"\xB9\xAD" => "\xE5\x83\xAE",		"\xB9\xAE" => "\xE5\x83\xA5",		"\xB9\xAF" => "\xE5\x83\x96",		"\xB9\xB0" => "\xE5\x83\xAD",		"\xB9\xB1" => "\xE5\x83\x9A",		"\xB9\xB2" => "\xE5\x83\x95",		"\xB9\xB3" => "\xE5\x83\x8F",		"\xB9\xB4" => "\xE5\x83\x91",		"\xB9\xB5" => "\xE5\x83\xB1",		"\xB9\xB6" => "\xE5\x83\x8E",		"\xB9\xB7" => "\xE5\x83\xA9",		"\xB9\xB8" => "\xE5\x85\xA2",		"\xB9\xB9" => "\xE5\x87\xB3",		"\xB9\xBA" => "\xE5\x8A\x83",		"\xB9\xBB" => "\xE5\x8A\x82",		"\xB9\xBC" => "\xE5\x8C\xB1",		"\xB9\xBD" => "\xE5\x8E\xAD",		"\xB9\xBE" => "\xE5\x97\xBE",		"\xB9\xBF" => "\xE5\x98\x80",		"\xB9\xC0" => "\xE5\x98\x9B",		"\xB9\xC1" => "\xE5\x98\x97",		"\xB9\xC2" => "\xE5\x97\xBD",		"\xB9\xC3" => "\xE5\x98\x94",		"\xB9\xC4" => "\xE5\x98\x86",		"\xB9\xC5" => "\xE5\x98\x89",		"\xB9\xC6" => "\xE5\x98\x8D",		"\xB9\xC7" => "\xE5\x98\x8E",		"\xB9\xC8" => "\xE5\x97\xB7",		"\xB9\xC9" => "\xE5\x98\x96",		"\xB9\xCA" => "\xE5\x98\x9F",		"\xB9\xCB" => "\xE5\x98\x88",		"\xB9\xCC" => "\xE5\x98\x90",		"\xB9\xCD" => "\xE5\x97\xB6",		"\xB9\xCE" => "\xE5\x9C\x98",		"\xB9\xCF" => "\xE5\x9C\x96",		"\xB9\xD0" => "\xE5\xA1\xB5",		"\xB9\xD1" => "\xE5\xA1\xBE",		"\xB9\xD2" => "\xE5\xA2\x83",		"\xB9\xD3" => "\xE5\xA2\x93",		"\xB9\xD4" => "\xE5\xA2\x8A",		"\xB9\xD5" => "\xE5\xA1\xB9",		"\xB9\xD6" => "\xE5\xA2\x85",		"\xB9\xD7" => "\xE5\xA1\xBD",		"\xB9\xD8" => "\xE5\xA3\xBD",		"\xB9\xD9" => "\xE5\xA4\xA5",		"\xB9\xDA" => "\xE5\xA4\xA2",		"\xB9\xDB" => "\xE5\xA4\xA4",		"\xB9\xDC" => "\xE5\xA5\xAA",		"\xB9\xDD" => "\xE5\xA5\xA9",		"\xB9\xDE" => "\xE5\xAB\xA1",		"\xB9\xDF" => "\xE5\xAB\xA6",		"\xB9\xE0" => "\xE5\xAB\xA9",		"\xB9\xE1" => "\xE5\xAB\x97",		"\xB9\xE2" => "\xE5\xAB\x96",		"\xB9\xE3" => "\xE5\xAB\x98",		"\xB9\xE4" => "\xE5\xAB\xA3",		"\xB9\xE5" => "\xE5\xAD\xB5",		"\xB9\xE6" => "\xE5\xAF\x9E",		"\xB9\xE7" => "\xE5\xAF\xA7",		"\xB9\xE8" => "\xE5\xAF\xA1",		"\xB9\xE9" => "\xE5\xAF\xA5",		"\xB9\xEA" => "\xE5\xAF\xA6",		"\xB9\xEB" => "\xE5\xAF\xA8",		"\xB9\xEC" => "\xE5\xAF\xA2",		"\xB9\xED" => "\xE5\xAF\xA4",		"\xB9\xEE" => "\xE5\xAF\x9F",		"\xB9\xEF" => "\xE5\xB0\x8D",		"\xB9\xF0" => "\xE5\xB1\xA2",		"\xB9\xF1" => "\xE5\xB6\x84",		"\xB9\xF2" => "\xE5\xB6\x87",		"\xB9\xF3" => "\xE5\xB9\x9B",		"\xB9\xF4" => "\xE5\xB9\xA3",		"\xB9\xF5" => "\xE5\xB9\x95",		"\xB9\xF6" => "\xE5\xB9\x97",		"\xB9\xF7" => "\xE5\xB9\x94",		"\xB9\xF8" => "\xE5\xBB\x93",		"\xB9\xF9" => "\xE5\xBB\x96",		"\xB9\xFA" => "\xE5\xBC\x8A",		"\xB9\xFB" => "\xE5\xBD\x86",		"\xB9\xFC" => "\xE5\xBD\xB0",		"\xB9\xFD" => "\xE5\xBE\xB9",		"\xB9\xFE" => "\xE6\x85\x87",		"\xBA\x40" => "\xE6\x84\xBF",		"\xBA\x41" => "\xE6\x85\x8B",		"\xBA\x42" => "\xE6\x85\xB7",		"\xBA\x43" => "\xE6\x85\xA2",		"\xBA\x44" => "\xE6\x85\xA3",		"\xBA\x45" => "\xE6\x85\x9F",		"\xBA\x46" => "\xE6\x85\x9A",		"\xBA\x47" => "\xE6\x85\x98",		"\xBA\x48" => "\xE6\x85\xB5",		"\xBA\x49" => "\xE6\x88\xAA",		"\xBA\x4A" => "\xE6\x92\x87",		"\xBA\x4B" => "\xE6\x91\x98",		"\xBA\x4C" => "\xE6\x91\x94",		"\xBA\x4D" => "\xE6\x92\xA4",		"\xBA\x4E" => "\xE6\x91\xB8",		"\xBA\x4F" => "\xE6\x91\x9F",		"\xBA\x50" => "\xE6\x91\xBA",		"\xBA\x51" => "\xE6\x91\x91",		"\xBA\x52" => "\xE6\x91\xA7",		"\xBA\x53" => "\xE6\x90\xB4",		"\xBA\x54" => "\xE6\x91\xAD",		"\xBA\x55" => "\xE6\x91\xBB",		"\xBA\x56" => "\xE6\x95\xB2",		"\xBA\x57" => "\xE6\x96\xA1",		"\xBA\x58" => "\xE6\x97\x97",		"\xBA\x59" => "\xE6\x97\x96",		"\xBA\x5A" => "\xE6\x9A\xA2",		"\xBA\x5B" => "\xE6\x9A\xA8",		"\xBA\x5C" => "\xE6\x9A\x9D",		"\xBA\x5D" => "\xE6\xA6\x9C",		"\xBA\x5E" => "\xE6\xA6\xA8",		"\xBA\x5F" => "\xE6\xA6\x95",		"\xBA\x60" => "\xE6\xA7\x81",		"\xBA\x61" => "\xE6\xA6\xAE",		"\xBA\x62" => "\xE6\xA7\x93",		"\xBA\x63" => "\xE6\xA7\x8B",		"\xBA\x64" => "\xE6\xA6\x9B",		"\xBA\x65" => "\xE6\xA6\xB7",		"\xBA\x66" => "\xE6\xA6\xBB",		"\xBA\x67" => "\xE6\xA6\xAB",		"\xBA\x68" => "\xE6\xA6\xB4",		"\xBA\x69" => "\xE6\xA7\x90",		"\xBA\x6A" => "\xE6\xA7\x8D",		"\xBA\x6B" => "\xE6\xA6\xAD",		"\xBA\x6C" => "\xE6\xA7\x8C",		"\xBA\x6D" => "\xE6\xA6\xA6",		"\xBA\x6E" => "\xE6\xA7\x83",		"\xBA\x6F" => "\xE6\xA6\xA3",		"\xBA\x70" => "\xE6\xAD\x89",		"\xBA\x71" => "\xE6\xAD\x8C",		"\xBA\x72" => "\xE6\xB0\xB3",		"\xBA\x73" => "\xE6\xBC\xB3",		"\xBA\x74" => "\xE6\xBC\x94",		"\xBA\x75" => "\xE6\xBB\xBE",		"\xBA\x76" => "\xE6\xBC\x93",		"\xBA\x77" => "\xE6\xBB\xB4",		"\xBA\x78" => "\xE6\xBC\xA9",		"\xBA\x79" => "\xE6\xBC\xBE",		"\xBA\x7A" => "\xE6\xBC\xA0",		"\xBA\x7B" => "\xE6\xBC\xAC",		"\xBA\x7C" => "\xE6\xBC\x8F",		"\xBA\x7D" => "\xE6\xBC\x82",		"\xBA\x7E" => "\xE6\xBC\xA2",		"\xBA\xA1" => "\xE6\xBB\xBF",		"\xBA\xA2" => "\xE6\xBB\xAF",		"\xBA\xA3" => "\xE6\xBC\x86",		"\xBA\xA4" => "\xE6\xBC\xB1",		"\xBA\xA5" => "\xE6\xBC\xB8",		"\xBA\xA6" => "\xE6\xBC\xB2",		"\xBA\xA7" => "\xE6\xBC\xA3",		"\xBA\xA8" => "\xE6\xBC\x95",		"\xBA\xA9" => "\xE6\xBC\xAB",		"\xBA\xAA" => "\xE6\xBC\xAF",		"\xBA\xAB" => "\xE6\xBE\x88",		"\xBA\xAC" => "\xE6\xBC\xAA",		"\xBA\xAD" => "\xE6\xBB\xAC",		"\xBA\xAE" => "\xE6\xBC\x81",		"\xBA\xAF" => "\xE6\xBB\xB2",		"\xBA\xB0" => "\xE6\xBB\x8C",		"\xBA\xB1" => "\xE6\xBB\xB7",		"\xBA\xB2" => "\xE7\x86\x94",		"\xBA\xB3" => "\xE7\x86\x99",		"\xBA\xB4" => "\xE7\x85\xBD",		"\xBA\xB5" => "\xE7\x86\x8A",		"\xBA\xB6" => "\xE7\x86\x84",		"\xBA\xB7" => "\xE7\x86\x92",		"\xBA\xB8" => "\xE7\x88\xBE",		"\xBA\xB9" => "\xE7\x8A\x92",		"\xBA\xBA" => "\xE7\x8A\x96",		"\xBA\xBB" => "\xE7\x8D\x84",		"\xBA\xBC" => "\xE7\x8D\x90",		"\xBA\xBD" => "\xE7\x91\xA4",		"\xBA\xBE" => "\xE7\x91\xA3",		"\xBA\xBF" => "\xE7\x91\xAA",		"\xBA\xC0" => "\xE7\x91\xB0",		"\xBA\xC1" => "\xE7\x91\xAD",		"\xBA\xC2" => "\xE7\x94\x84",		"\xBA\xC3" => "\xE7\x96\x91",		"\xBA\xC4" => "\xE7\x98\xA7",		"\xBA\xC5" => "\xE7\x98\x8D",		"\xBA\xC6" => "\xE7\x98\x8B",		"\xBA\xC7" => "\xE7\x98\x89",		"\xBA\xC8" => "\xE7\x98\x93",		"\xBA\xC9" => "\xE7\x9B\xA1",		"\xBA\xCA" => "\xE7\x9B\xA3",		"\xBA\xCB" => "\xE7\x9E\x84",		"\xBA\xCC" => "\xE7\x9D\xBD",		"\xBA\xCD" => "\xE7\x9D\xBF",		"\xBA\xCE" => "\xE7\x9D\xA1",		"\xBA\xCF" => "\xE7\xA3\x81",		"\xBA\xD0" => "\xE7\xA2\x9F",		"\xBA\xD1" => "\xE7\xA2\xA7",		"\xBA\xD2" => "\xE7\xA2\xB3",		"\xBA\xD3" => "\xE7\xA2\xA9",		"\xBA\xD4" => "\xE7\xA2\xA3",		"\xBA\xD5" => "\xE7\xA6\x8E",		"\xBA\xD6" => "\xE7\xA6\x8F",		"\xBA\xD7" => "\xE7\xA6\x8D",		"\xBA\xD8" => "\xE7\xA8\xAE",		"\xBA\xD9" => "\xE7\xA8\xB1",		"\xBA\xDA" => "\xE7\xAA\xAA",		"\xBA\xDB" => "\xE7\xAA\xA9",		"\xBA\xDC" => "\xE7\xAB\xAD",		"\xBA\xDD" => "\xE7\xAB\xAF",		"\xBA\xDE" => "\xE7\xAE\xA1",		"\xBA\xDF" => "\xE7\xAE\x95",		"\xBA\xE0" => "\xE7\xAE\x8B",		"\xBA\xE1" => "\xE7\xAD\xB5",		"\xBA\xE2" => "\xE7\xAE\x97",		"\xBA\xE3" => "\xE7\xAE\x9D",		"\xBA\xE4" => "\xE7\xAE\x94",		"\xBA\xE5" => "\xE7\xAE\x8F",		"\xBA\xE6" => "\xE7\xAE\xB8",		"\xBA\xE7" => "\xE7\xAE\x87",		"\xBA\xE8" => "\xE7\xAE\x84",		"\xBA\xE9" => "\xE7\xB2\xB9",		"\xBA\xEA" => "\xE7\xB2\xBD",		"\xBA\xEB" => "\xE7\xB2\xBE",		"\xBA\xEC" => "\xE7\xB6\xBB",		"\xBA\xED" => "\xE7\xB6\xB0",		"\xBA\xEE" => "\xE7\xB6\x9C",		"\xBA\xEF" => "\xE7\xB6\xBD",		"\xBA\xF0" => "\xE7\xB6\xBE",		"\xBA\xF1" => "\xE7\xB6\xA0",		"\xBA\xF2" => "\xE7\xB7\x8A",		"\xBA\xF3" => "\xE7\xB6\xB4",		"\xBA\xF4" => "\xE7\xB6\xB2",		"\xBA\xF5" => "\xE7\xB6\xB1",		"\xBA\xF6" => "\xE7\xB6\xBA",		"\xBA\xF7" => "\xE7\xB6\xA2",		"\xBA\xF8" => "\xE7\xB6\xBF",		"\xBA\xF9" => "\xE7\xB6\xB5",		"\xBA\xFA" => "\xE7\xB6\xB8",		"\xBA\xFB" => "\xE7\xB6\xAD",		"\xBA\xFC" => "\xE7\xB7\x92",		"\xBA\xFD" => "\xE7\xB7\x87",		"\xBA\xFE" => "\xE7\xB6\xAC",		"\xBB\x40" => "\xE7\xBD\xB0",		"\xBB\x41" => "\xE7\xBF\xA0",		"\xBB\x42" => "\xE7\xBF\xA1",		"\xBB\x43" => "\xE7\xBF\x9F",		"\xBB\x44" => "\xE8\x81\x9E",		"\xBB\x45" => "\xE8\x81\x9A",		"\xBB\x46" => "\xE8\x82\x87",		"\xBB\x47" => "\xE8\x85\x90",		"\xBB\x48" => "\xE8\x86\x80",		"\xBB\x49" => "\xE8\x86\x8F",		"\xBB\x4A" => "\xE8\x86\x88",		"\xBB\x4B" => "\xE8\x86\x8A",		"\xBB\x4C" => "\xE8\x85\xBF",		"\xBB\x4D" => "\xE8\x86\x82",		"\xBB\x4E" => "\xE8\x87\xA7",		"\xBB\x4F" => "\xE8\x87\xBA",		"\xBB\x50" => "\xE8\x88\x87",		"\xBB\x51" => "\xE8\x88\x94",		"\xBB\x52" => "\xE8\x88\x9E",		"\xBB\x53" => "\xE8\x89\x8B",		"\xBB\x54" => "\xE8\x93\x89",		"\xBB\x55" => "\xE8\x92\xBF",		"\xBB\x56" => "\xE8\x93\x86",		"\xBB\x57" => "\xE8\x93\x84",		"\xBB\x58" => "\xE8\x92\x99",		"\xBB\x59" => "\xE8\x92\x9E",		"\xBB\x5A" => "\xE8\x92\xB2",		"\xBB\x5B" => "\xE8\x92\x9C",		"\xBB\x5C" => "\xE8\x93\x8B",		"\xBB\x5D" => "\xE8\x92\xB8",		"\xBB\x5E" => "\xE8\x93\x80",		"\xBB\x5F" => "\xE8\x93\x93",		"\xBB\x60" => "\xE8\x92\x90",		"\xBB\x61" => "\xE8\x92\xBC",		"\xBB\x62" => "\xE8\x93\x91",		"\xBB\x63" => "\xE8\x93\x8A",		"\xBB\x64" => "\xE8\x9C\xBF",		"\xBB\x65" => "\xE8\x9C\x9C",		"\xBB\x66" => "\xE8\x9C\xBB",		"\xBB\x67" => "\xE8\x9C\xA2",		"\xBB\x68" => "\xE8\x9C\xA5",		"\xBB\x69" => "\xE8\x9C\xB4",		"\xBB\x6A" => "\xE8\x9C\x98",		"\xBB\x6B" => "\xE8\x9D\x95",		"\xBB\x6C" => "\xE8\x9C\xB7",		"\xBB\x6D" => "\xE8\x9C\xA9",		"\xBB\x6E" => "\xE8\xA3\xB3",		"\xBB\x6F" => "\xE8\xA4\x82",		"\xBB\x70" => "\xE8\xA3\xB4",		"\xBB\x71" => "\xE8\xA3\xB9",		"\xBB\x72" => "\xE8\xA3\xB8",		"\xBB\x73" => "\xE8\xA3\xBD",		"\xBB\x74" => "\xE8\xA3\xA8",		"\xBB\x75" => "\xE8\xA4\x9A",		"\xBB\x76" => "\xE8\xA3\xAF",		"\xBB\x77" => "\xE8\xAA\xA6",		"\xBB\x78" => "\xE8\xAA\x8C",		"\xBB\x79" => "\xE8\xAA\x9E",		"\xBB\x7A" => "\xE8\xAA\xA3",		"\xBB\x7B" => "\xE8\xAA\x8D",		"\xBB\x7C" => "\xE8\xAA\xA1",		"\xBB\x7D" => "\xE8\xAA\x93",		"\xBB\x7E" => "\xE8\xAA\xA4",		"\xBB\xA1" => "\xE8\xAA\xAA",		"\xBB\xA2" => "\xE8\xAA\xA5",		"\xBB\xA3" => "\xE8\xAA\xA8",		"\xBB\xA4" => "\xE8\xAA\x98",		"\xBB\xA5" => "\xE8\xAA\x91",		"\xBB\xA6" => "\xE8\xAA\x9A",		"\xBB\xA7" => "\xE8\xAA\xA7",		"\xBB\xA8" => "\xE8\xB1\xAA",		"\xBB\xA9" => "\xE8\xB2\x8D",		"\xBB\xAA" => "\xE8\xB2\x8C",		"\xBB\xAB" => "\xE8\xB3\x93",		"\xBB\xAC" => "\xE8\xB3\x91",		"\xBB\xAD" => "\xE8\xB3\x92",		"\xBB\xAE" => "\xE8\xB5\xAB",		"\xBB\xAF" => "\xE8\xB6\x99",		"\xBB\xB0" => "\xE8\xB6\x95",		"\xBB\xB1" => "\xE8\xB7\xBC",		"\xBB\xB2" => "\xE8\xBC\x94",		"\xBB\xB3" => "\xE8\xBC\x92",		"\xBB\xB4" => "\xE8\xBC\x95",		"\xBB\xB5" => "\xE8\xBC\x93",		"\xBB\xB6" => "\xE8\xBE\xA3",		"\xBB\xB7" => "\xE9\x81\xA0",		"\xBB\xB8" => "\xE9\x81\x98",		"\xBB\xB9" => "\xE9\x81\x9C",		"\xBB\xBA" => "\xE9\x81\xA3",		"\xBB\xBB" => "\xE9\x81\x99",		"\xBB\xBC" => "\xE9\x81\x9E",		"\xBB\xBD" => "\xE9\x81\xA2",		"\xBB\xBE" => "\xE9\x81\x9D",		"\xBB\xBF" => "\xE9\x81\x9B",		"\xBB\xC0" => "\xE9\x84\x99",		"\xBB\xC1" => "\xE9\x84\x98",		"\xBB\xC2" => "\xE9\x84\x9E",		"\xBB\xC3" => "\xE9\x85\xB5",		"\xBB\xC4" => "\xE9\x85\xB8",		"\xBB\xC5" => "\xE9\x85\xB7",		"\xBB\xC6" => "\xE9\x85\xB4",		"\xBB\xC7" => "\xE9\x89\xB8",		"\xBB\xC8" => "\xE9\x8A\x80",		"\xBB\xC9" => "\xE9\x8A\x85",		"\xBB\xCA" => "\xE9\x8A\x98",		"\xBB\xCB" => "\xE9\x8A\x96",		"\xBB\xCC" => "\xE9\x89\xBB",		"\xBB\xCD" => "\xE9\x8A\x93",		"\xBB\xCE" => "\xE9\x8A\x9C",		"\xBB\xCF" => "\xE9\x8A\xA8",		"\xBB\xD0" => "\xE9\x89\xBC",		"\xBB\xD1" => "\xE9\x8A\x91",		"\xBB\xD2" => "\xE9\x96\xA1",		"\xBB\xD3" => "\xE9\x96\xA8",		"\xBB\xD4" => "\xE9\x96\xA9",		"\xBB\xD5" => "\xE9\x96\xA3",		"\xBB\xD6" => "\xE9\x96\xA5",		"\xBB\xD7" => "\xE9\x96\xA4",		"\xBB\xD8" => "\xE9\x9A\x99",		"\xBB\xD9" => "\xE9\x9A\x9C",		"\xBB\xDA" => "\xE9\x9A\x9B",		"\xBB\xDB" => "\xE9\x9B\x8C",		"\xBB\xDC" => "\xE9\x9B\x92",		"\xBB\xDD" => "\xE9\x9C\x80",		"\xBB\xDE" => "\xE9\x9D\xBC",		"\xBB\xDF" => "\xE9\x9E\x85",		"\xBB\xE0" => "\xE9\x9F\xB6",		"\xBB\xE1" => "\xE9\xA0\x97",		"\xBB\xE2" => "\xE9\xA0\x98",		"\xBB\xE3" => "\xE9\xA2\xAF",		"\xBB\xE4" => "\xE9\xA2\xB1",		"\xBB\xE5" => "\xE9\xA4\x83",		"\xBB\xE6" => "\xE9\xA4\x85",		"\xBB\xE7" => "\xE9\xA4\x8C",		"\xBB\xE8" => "\xE9\xA4\x89",		"\xBB\xE9" => "\xE9\xA7\x81",		"\xBB\xEA" => "\xE9\xAA\xAF",		"\xBB\xEB" => "\xE9\xAA\xB0",		"\xBB\xEC" => "\xE9\xAB\xA6",		"\xBB\xED" => "\xE9\xAD\x81",		"\xBB\xEE" => "\xE9\xAD\x82",		"\xBB\xEF" => "\xE9\xB3\xB4",		"\xBB\xF0" => "\xE9\xB3\xB6",		"\xBB\xF1" => "\xE9\xB3\xB3",		"\xBB\xF2" => "\xE9\xBA\xBC",		"\xBB\xF3" => "\xE9\xBC\xBB",		"\xBB\xF4" => "\xE9\xBD\x8A",		"\xBB\xF5" => "\xE5\x84\x84",		"\xBB\xF6" => "\xE5\x84\x80",		"\xBB\xF7" => "\xE5\x83\xBB",		"\xBB\xF8" => "\xE5\x83\xB5",		"\xBB\xF9" => "\xE5\x83\xB9",		"\xBB\xFA" => "\xE5\x84\x82",		"\xBB\xFB" => "\xE5\x84\x88",		"\xBB\xFC" => "\xE5\x84\x89",		"\xBB\xFD" => "\xE5\x84\x85",		"\xBB\xFE" => "\xE5\x87\x9C",		"\xBC\x40" => "\xE5\x8A\x87",		"\xBC\x41" => "\xE5\x8A\x88",		"\xBC\x42" => "\xE5\x8A\x89",		"\xBC\x43" => "\xE5\x8A\x8D",		"\xBC\x44" => "\xE5\x8A\x8A",		"\xBC\x45" => "\xE5\x8B\xB0",		"\xBC\x46" => "\xE5\x8E\xB2",		"\xBC\x47" => "\xE5\x98\xAE",		"\xBC\x48" => "\xE5\x98\xBB",		"\xBC\x49" => "\xE5\x98\xB9",		"\xBC\x4A" => "\xE5\x98\xB2",		"\xBC\x4B" => "\xE5\x98\xBF",		"\xBC\x4C" => "\xE5\x98\xB4",		"\xBC\x4D" => "\xE5\x98\xA9",		"\xBC\x4E" => "\xE5\x99\x93",		"\xBC\x4F" => "\xE5\x99\x8E",		"\xBC\x50" => "\xE5\x99\x97",		"\xBC\x51" => "\xE5\x99\xB4",		"\xBC\x52" => "\xE5\x98\xB6",		"\xBC\x53" => "\xE5\x98\xAF",		"\xBC\x54" => "\xE5\x98\xB0",		"\xBC\x55" => "\xE5\xA2\x80",		"\xBC\x56" => "\xE5\xA2\x9F",		"\xBC\x57" => "\xE5\xA2\x9E",		"\xBC\x58" => "\xE5\xA2\xB3",		"\xBC\x59" => "\xE5\xA2\x9C",		"\xBC\x5A" => "\xE5\xA2\xAE",		"\xBC\x5B" => "\xE5\xA2\xA9",		"\xBC\x5C" => "\xE5\xA2\xA6",		"\xBC\x5D" => "\xE5\xA5\xAD",		"\xBC\x5E" => "\xE5\xAC\x89",		"\xBC\x5F" => "\xE5\xAB\xBB",		"\xBC\x60" => "\xE5\xAC\x8B",		"\xBC\x61" => "\xE5\xAB\xB5",		"\xBC\x62" => "\xE5\xAC\x8C",		"\xBC\x63" => "\xE5\xAC\x88",		"\xBC\x64" => "\xE5\xAF\xAE",		"\xBC\x65" => "\xE5\xAF\xAC",		"\xBC\x66" => "\xE5\xAF\xA9",		"\xBC\x67" => "\xE5\xAF\xAB",		"\xBC\x68" => "\xE5\xB1\xA4",		"\xBC\x69" => "\xE5\xB1\xA5",		"\xBC\x6A" => "\xE5\xB6\x9D",		"\xBC\x6B" => "\xE5\xB6\x94",		"\xBC\x6C" => "\xE5\xB9\xA2",		"\xBC\x6D" => "\xE5\xB9\x9F",		"\xBC\x6E" => "\xE5\xB9\xA1",		"\xBC\x6F" => "\xE5\xBB\xA2",		"\xBC\x70" => "\xE5\xBB\x9A",		"\xBC\x71" => "\xE5\xBB\x9F",		"\xBC\x72" => "\xE5\xBB\x9D",		"\xBC\x73" => "\xE5\xBB\xA3",		"\xBC\x74" => "\xE5\xBB\xA0",		"\xBC\x75" => "\xE5\xBD\x88",		"\xBC\x76" => "\xE5\xBD\xB1",		"\xBC\x77" => "\xE5\xBE\xB7",		"\xBC\x78" => "\xE5\xBE\xB5",		"\xBC\x79" => "\xE6\x85\xB6",		"\xBC\x7A" => "\xE6\x85\xA7",		"\xBC\x7B" => "\xE6\x85\xAE",		"\xBC\x7C" => "\xE6\x85\x9D",		"\xBC\x7D" => "\xE6\x85\x95",		"\xBC\x7E" => "\xE6\x86\x82",		"\xBC\xA1" => "\xE6\x85\xBC",		"\xBC\xA2" => "\xE6\x85\xB0",		"\xBC\xA3" => "\xE6\x85\xAB",		"\xBC\xA4" => "\xE6\x85\xBE",		"\xBC\xA5" => "\xE6\x86\xA7",		"\xBC\xA6" => "\xE6\x86\x90",		"\xBC\xA7" => "\xE6\x86\xAB",		"\xBC\xA8" => "\xE6\x86\x8E",		"\xBC\xA9" => "\xE6\x86\xAC",		"\xBC\xAA" => "\xE6\x86\x9A",		"\xBC\xAB" => "\xE6\x86\xA4",		"\xBC\xAC" => "\xE6\x86\x94",		"\xBC\xAD" => "\xE6\x86\xAE",		"\xBC\xAE" => "\xE6\x88\xAE",		"\xBC\xAF" => "\xE6\x91\xA9",		"\xBC\xB0" => "\xE6\x91\xAF",		"\xBC\xB1" => "\xE6\x91\xB9",		"\xBC\xB2" => "\xE6\x92\x9E",		"\xBC\xB3" => "\xE6\x92\xB2",		"\xBC\xB4" => "\xE6\x92\x88",		"\xBC\xB5" => "\xE6\x92\x90",		"\xBC\xB6" => "\xE6\x92\xB0",		"\xBC\xB7" => "\xE6\x92\xA5",		"\xBC\xB8" => "\xE6\x92\x93",		"\xBC\xB9" => "\xE6\x92\x95",		"\xBC\xBA" => "\xE6\x92\xA9",		"\xBC\xBB" => "\xE6\x92\x92",		"\xBC\xBC" => "\xE6\x92\xAE",		"\xBC\xBD" => "\xE6\x92\xAD",		"\xBC\xBE" => "\xE6\x92\xAB",		"\xBC\xBF" => "\xE6\x92\x9A",		"\xBC\xC0" => "\xE6\x92\xAC",		"\xBC\xC1" => "\xE6\x92\x99",		"\xBC\xC2" => "\xE6\x92\xA2",		"\xBC\xC3" => "\xE6\x92\xB3",		"\xBC\xC4" => "\xE6\x95\xB5",		"\xBC\xC5" => "\xE6\x95\xB7",		"\xBC\xC6" => "\xE6\x95\xB8",		"\xBC\xC7" => "\xE6\x9A\xAE",		"\xBC\xC8" => "\xE6\x9A\xAB",		"\xBC\xC9" => "\xE6\x9A\xB4",		"\xBC\xCA" => "\xE6\x9A\xB1",		"\xBC\xCB" => "\xE6\xA8\xA3",		"\xBC\xCC" => "\xE6\xA8\x9F",		"\xBC\xCD" => "\xE6\xA7\xA8",		"\xBC\xCE" => "\xE6\xA8\x81",		"\xBC\xCF" => "\xE6\xA8\x9E",		"\xBC\xD0" => "\xE6\xA8\x99",		"\xBC\xD1" => "\xE6\xA7\xBD",		"\xBC\xD2" => "\xE6\xA8\xA1",		"\xBC\xD3" => "\xE6\xA8\x93",		"\xBC\xD4" => "\xE6\xA8\x8A",		"\xBC\xD5" => "\xE6\xA7\xB3",		"\xBC\xD6" => "\xE6\xA8\x82",		"\xBC\xD7" => "\xE6\xA8\x85",		"\xBC\xD8" => "\xE6\xA7\xAD",		"\xBC\xD9" => "\xE6\xA8\x91",		"\xBC\xDA" => "\xE6\xAD\x90",		"\xBC\xDB" => "\xE6\xAD\x8E",		"\xBC\xDC" => "\xE6\xAE\xA4",		"\xBC\xDD" => "\xE6\xAF\x85",		"\xBC\xDE" => "\xE6\xAF\x86",		"\xBC\xDF" => "\xE6\xBC\xBF",		"\xBC\xE0" => "\xE6\xBD\xBC",		"\xBC\xE1" => "\xE6\xBE\x84",		"\xBC\xE2" => "\xE6\xBD\x91",		"\xBC\xE3" => "\xE6\xBD\xA6",		"\xBC\xE4" => "\xE6\xBD\x94",		"\xBC\xE5" => "\xE6\xBE\x86",		"\xBC\xE6" => "\xE6\xBD\xAD",		"\xBC\xE7" => "\xE6\xBD\x9B",		"\xBC\xE8" => "\xE6\xBD\xB8",		"\xBC\xE9" => "\xE6\xBD\xAE",		"\xBC\xEA" => "\xE6\xBE\x8E",		"\xBC\xEB" => "\xE6\xBD\xBA",		"\xBC\xEC" => "\xE6\xBD\xB0",		"\xBC\xED" => "\xE6\xBD\xA4",		"\xBC\xEE" => "\xE6\xBE\x97",		"\xBC\xEF" => "\xE6\xBD\x98",		"\xBC\xF0" => "\xE6\xBB\x95",		"\xBC\xF1" => "\xE6\xBD\xAF",		"\xBC\xF2" => "\xE6\xBD\xA0",		"\xBC\xF3" => "\xE6\xBD\x9F",		"\xBC\xF4" => "\xE7\x86\x9F",		"\xBC\xF5" => "\xE7\x86\xAC",		"\xBC\xF6" => "\xE7\x86\xB1",		"\xBC\xF7" => "\xE7\x86\xA8",		"\xBC\xF8" => "\xE7\x89\x96",		"\xBC\xF9" => "\xE7\x8A\x9B",		"\xBC\xFA" => "\xE7\x8D\x8E",		"\xBC\xFB" => "\xE7\x8D\x97",		"\xBC\xFC" => "\xE7\x91\xA9",		"\xBC\xFD" => "\xE7\x92\x8B",		"\xBC\xFE" => "\xE7\x92\x83",		"\xBD\x40" => "\xE7\x91\xBE",		"\xBD\x41" => "\xE7\x92\x80",		"\xBD\x42" => "\xE7\x95\xBF",		"\xBD\x43" => "\xE7\x98\xA0",		"\xBD\x44" => "\xE7\x98\xA9",		"\xBD\x45" => "\xE7\x98\x9F",		"\xBD\x46" => "\xE7\x98\xA4",		"\xBD\x47" => "\xE7\x98\xA6",		"\xBD\x48" => "\xE7\x98\xA1",		"\xBD\x49" => "\xE7\x98\xA2",		"\xBD\x4A" => "\xE7\x9A\x9A",		"\xBD\x4B" => "\xE7\x9A\xBA",		"\xBD\x4C" => "\xE7\x9B\xA4",		"\xBD\x4D" => "\xE7\x9E\x8E",		"\xBD\x4E" => "\xE7\x9E\x87",		"\xBD\x4F" => "\xE7\x9E\x8C",		"\xBD\x50" => "\xE7\x9E\x91",		"\xBD\x51" => "\xE7\x9E\x8B",		"\xBD\x52" => "\xE7\xA3\x8B",		"\xBD\x53" => "\xE7\xA3\x85",		"\xBD\x54" => "\xE7\xA2\xBA",		"\xBD\x55" => "\xE7\xA3\x8A",		"\xBD\x56" => "\xE7\xA2\xBE",		"\xBD\x57" => "\xE7\xA3\x95",		"\xBD\x58" => "\xE7\xA2\xBC",		"\xBD\x59" => "\xE7\xA3\x90",		"\xBD\x5A" => "\xE7\xA8\xBF",		"\xBD\x5B" => "\xE7\xA8\xBC",		"\xBD\x5C" => "\xE7\xA9\x80",		"\xBD\x5D" => "\xE7\xA8\xBD",		"\xBD\x5E" => "\xE7\xA8\xB7",		"\xBD\x5F" => "\xE7\xA8\xBB",		"\xBD\x60" => "\xE7\xAA\xAF",		"\xBD\x61" => "\xE7\xAA\xAE",		"\xBD\x62" => "\xE7\xAE\xAD",		"\xBD\x63" => "\xE7\xAE\xB1",		"\xBD\x64" => "\xE7\xAF\x84",		"\xBD\x65" => "\xE7\xAE\xB4",		"\xBD\x66" => "\xE7\xAF\x86",		"\xBD\x67" => "\xE7\xAF\x87",		"\xBD\x68" => "\xE7\xAF\x81",		"\xBD\x69" => "\xE7\xAE\xA0",		"\xBD\x6A" => "\xE7\xAF\x8C",		"\xBD\x6B" => "\xE7\xB3\x8A",		"\xBD\x6C" => "\xE7\xB7\xA0",		"\xBD\x6D" => "\xE7\xB7\xB4",		"\xBD\x6E" => "\xE7\xB7\xAF",		"\xBD\x6F" => "\xE7\xB7\xBB",		"\xBD\x70" => "\xE7\xB7\x98",		"\xBD\x71" => "\xE7\xB7\xAC",		"\xBD\x72" => "\xE7\xB7\x9D",		"\xBD\x73" => "\xE7\xB7\xA8",		"\xBD\x74" => "\xE7\xB7\xA3",		"\xBD\x75" => "\xE7\xB7\x9A",		"\xBD\x76" => "\xE7\xB7\x9E",		"\xBD\x77" => "\xE7\xB7\xA9",		"\xBD\x78" => "\xE7\xB6\x9E",		"\xBD\x79" => "\xE7\xB7\x99",		"\xBD\x7A" => "\xE7\xB7\xB2",		"\xBD\x7B" => "\xE7\xB7\xB9",		"\xBD\x7C" => "\xE7\xBD\xB5",		"\xBD\x7D" => "\xE7\xBD\xB7",		"\xBD\x7E" => "\xE7\xBE\xAF",		"\xBD\xA1" => "\xE7\xBF\xA9",		"\xBD\xA2" => "\xE8\x80\xA6",		"\xBD\xA3" => "\xE8\x86\x9B",		"\xBD\xA4" => "\xE8\x86\x9C",		"\xBD\xA5" => "\xE8\x86\x9D",		"\xBD\xA6" => "\xE8\x86\xA0",		"\xBD\xA7" => "\xE8\x86\x9A",		"\xBD\xA8" => "\xE8\x86\x98",		"\xBD\xA9" => "\xE8\x94\x97",		"\xBD\xAA" => "\xE8\x94\xBD",		"\xBD\xAB" => "\xE8\x94\x9A",		"\xBD\xAC" => "\xE8\x93\xAE",		"\xBD\xAD" => "\xE8\x94\xAC",		"\xBD\xAE" => "\xE8\x94\xAD",		"\xBD\xAF" => "\xE8\x94\x93",		"\xBD\xB0" => "\xE8\x94\x91",		"\xBD\xB1" => "\xE8\x94\xA3",		"\xBD\xB2" => "\xE8\x94\xA1",		"\xBD\xB3" => "\xE8\x94\x94",		"\xBD\xB4" => "\xE8\x93\xAC",		"\xBD\xB5" => "\xE8\x94\xA5",		"\xBD\xB6" => "\xE8\x93\xBF",		"\xBD\xB7" => "\xE8\x94\x86",		"\xBD\xB8" => "\xE8\x9E\x82",		"\xBD\xB9" => "\xE8\x9D\xB4",		"\xBD\xBA" => "\xE8\x9D\xB6",		"\xBD\xBB" => "\xE8\x9D\xA0",		"\xBD\xBC" => "\xE8\x9D\xA6",		"\xBD\xBD" => "\xE8\x9D\xB8",		"\xBD\xBE" => "\xE8\x9D\xA8",		"\xBD\xBF" => "\xE8\x9D\x99",		"\xBD\xC0" => "\xE8\x9D\x97",		"\xBD\xC1" => "\xE8\x9D\x8C",		"\xBD\xC2" => "\xE8\x9D\x93",		"\xBD\xC3" => "\xE8\xA1\x9B",		"\xBD\xC4" => "\xE8\xA1\x9D",		"\xBD\xC5" => "\xE8\xA4\x90",		"\xBD\xC6" => "\xE8\xA4\x87",		"\xBD\xC7" => "\xE8\xA4\x92",		"\xBD\xC8" => "\xE8\xA4\x93",		"\xBD\xC9" => "\xE8\xA4\x95",		"\xBD\xCA" => "\xE8\xA4\x8A",		"\xBD\xCB" => "\xE8\xAA\xBC",		"\xBD\xCC" => "\xE8\xAB\x92",		"\xBD\xCD" => "\xE8\xAB\x87",		"\xBD\xCE" => "\xE8\xAB\x84",		"\xBD\xCF" => "\xE8\xAA\x95",		"\xBD\xD0" => "\xE8\xAB\x8B",		"\xBD\xD1" => "\xE8\xAB\xB8",		"\xBD\xD2" => "\xE8\xAA\xB2",		"\xBD\xD3" => "\xE8\xAB\x89",		"\xBD\xD4" => "\xE8\xAB\x82",		"\xBD\xD5" => "\xE8\xAA\xBF",		"\xBD\xD6" => "\xE8\xAA\xB0",		"\xBD\xD7" => "\xE8\xAB\x96",		"\xBD\xD8" => "\xE8\xAB\x8D",		"\xBD\xD9" => "\xE8\xAA\xB6",		"\xBD\xDA" => "\xE8\xAA\xB9",		"\xBD\xDB" => "\xE8\xAB\x9B",		"\xBD\xDC" => "\xE8\xB1\x8C",		"\xBD\xDD" => "\xE8\xB1\x8E",		"\xBD\xDE" => "\xE8\xB1\xAC",		"\xBD\xDF" => "\xE8\xB3\xA0",		"\xBD\xE0" => "\xE8\xB3\x9E",		"\xBD\xE1" => "\xE8\xB3\xA6",		"\xBD\xE2" => "\xE8\xB3\xA4",		"\xBD\xE3" => "\xE8\xB3\xAC",		"\xBD\xE4" => "\xE8\xB3\xAD",		"\xBD\xE5" => "\xE8\xB3\xA2",		"\xBD\xE6" => "\xE8\xB3\xA3",		"\xBD\xE7" => "\xE8\xB3\x9C",		"\xBD\xE8" => "\xE8\xB3\xAA",		"\xBD\xE9" => "\xE8\xB3\xA1",		"\xBD\xEA" => "\xE8\xB5\xAD",		"\xBD\xEB" => "\xE8\xB6\x9F",		"\xBD\xEC" => "\xE8\xB6\xA3",		"\xBD\xED" => "\xE8\xB8\xAB",		"\xBD\xEE" => "\xE8\xB8\x90",		"\xBD\xEF" => "\xE8\xB8\x9D",		"\xBD\xF0" => "\xE8\xB8\xA2",		"\xBD\xF1" => "\xE8\xB8\x8F",		"\xBD\xF2" => "\xE8\xB8\xA9",		"\xBD\xF3" => "\xE8\xB8\x9F",		"\xBD\xF4" => "\xE8\xB8\xA1",		"\xBD\xF5" => "\xE8\xB8\x9E",		"\xBD\xF6" => "\xE8\xBA\xBA",		"\xBD\xF7" => "\xE8\xBC\x9D",		"\xBD\xF8" => "\xE8\xBC\x9B",		"\xBD\xF9" => "\xE8\xBC\x9F",		"\xBD\xFA" => "\xE8\xBC\xA9",		"\xBD\xFB" => "\xE8\xBC\xA6",		"\xBD\xFC" => "\xE8\xBC\xAA",		"\xBD\xFD" => "\xE8\xBC\x9C",		"\xBD\xFE" => "\xE8\xBC\x9E",		"\xBE\x40" => "\xE8\xBC\xA5",		"\xBE\x41" => "\xE9\x81\xA9",		"\xBE\x42" => "\xE9\x81\xAE",		"\xBE\x43" => "\xE9\x81\xA8",		"\xBE\x44" => "\xE9\x81\xAD",		"\xBE\x45" => "\xE9\x81\xB7",		"\xBE\x46" => "\xE9\x84\xB0",		"\xBE\x47" => "\xE9\x84\xAD",		"\xBE\x48" => "\xE9\x84\xA7",		"\xBE\x49" => "\xE9\x84\xB1",		"\xBE\x4A" => "\xE9\x86\x87",		"\xBE\x4B" => "\xE9\x86\x89",		"\xBE\x4C" => "\xE9\x86\x8B",		"\xBE\x4D" => "\xE9\x86\x83",		"\xBE\x4E" => "\xE9\x8B\x85",		"\xBE\x4F" => "\xE9\x8A\xBB",		"\xBE\x50" => "\xE9\x8A\xB7",		"\xBE\x51" => "\xE9\x8B\xAA",		"\xBE\x52" => "\xE9\x8A\xAC",		"\xBE\x53" => "\xE9\x8B\xA4",		"\xBE\x54" => "\xE9\x8B\x81",		"\xBE\x55" => "\xE9\x8A\xB3",		"\xBE\x56" => "\xE9\x8A\xBC",		"\xBE\x57" => "\xE9\x8B\x92",		"\xBE\x58" => "\xE9\x8B\x87",		"\xBE\x59" => "\xE9\x8B\xB0",		"\xBE\x5A" => "\xE9\x8A\xB2",		"\xBE\x5B" => "\xE9\x96\xAD",		"\xBE\x5C" => "\xE9\x96\xB1",		"\xBE\x5D" => "\xE9\x9C\x84",		"\xBE\x5E" => "\xE9\x9C\x86",		"\xBE\x5F" => "\xE9\x9C\x87",		"\xBE\x60" => "\xE9\x9C\x89",		"\xBE\x61" => "\xE9\x9D\xA0",		"\xBE\x62" => "\xE9\x9E\x8D",		"\xBE\x63" => "\xE9\x9E\x8B",		"\xBE\x64" => "\xE9\x9E\x8F",		"\xBE\x65" => "\xE9\xA0\xA1",		"\xBE\x66" => "\xE9\xA0\xAB",		"\xBE\x67" => "\xE9\xA0\x9C",		"\xBE\x68" => "\xE9\xA2\xB3",		"\xBE\x69" => "\xE9\xA4\x8A",		"\xBE\x6A" => "\xE9\xA4\x93",		"\xBE\x6B" => "\xE9\xA4\x92",		"\xBE\x6C" => "\xE9\xA4\x98",		"\xBE\x6D" => "\xE9\xA7\x9D",		"\xBE\x6E" => "\xE9\xA7\x90",		"\xBE\x6F" => "\xE9\xA7\x9F",		"\xBE\x70" => "\xE9\xA7\x9B",		"\xBE\x71" => "\xE9\xA7\x91",		"\xBE\x72" => "\xE9\xA7\x95",		"\xBE\x73" => "\xE9\xA7\x92",		"\xBE\x74" => "\xE9\xA7\x99",		"\xBE\x75" => "\xE9\xAA\xB7",		"\xBE\x76" => "\xE9\xAB\xAE",		"\xBE\x77" => "\xE9\xAB\xAF",		"\xBE\x78" => "\xE9\xAC\xA7",		"\xBE\x79" => "\xE9\xAD\x85",		"\xBE\x7A" => "\xE9\xAD\x84",		"\xBE\x7B" => "\xE9\xAD\xB7",		"\xBE\x7C" => "\xE9\xAD\xAF",		"\xBE\x7D" => "\xE9\xB4\x86",		"\xBE\x7E" => "\xE9\xB4\x89",		"\xBE\xA1" => "\xE9\xB4\x83",		"\xBE\xA2" => "\xE9\xBA\xA9",		"\xBE\xA3" => "\xE9\xBA\xBE",		"\xBE\xA4" => "\xE9\xBB\x8E",		"\xBE\xA5" => "\xE5\xA2\xA8",		"\xBE\xA6" => "\xE9\xBD\x92",		"\xBE\xA7" => "\xE5\x84\x92",		"\xBE\xA8" => "\xE5\x84\x98",		"\xBE\xA9" => "\xE5\x84\x94",		"\xBE\xAA" => "\xE5\x84\x90",		"\xBE\xAB" => "\xE5\x84\x95",		"\xBE\xAC" => "\xE5\x86\x80",		"\xBE\xAD" => "\xE5\x86\xAA",		"\xBE\xAE" => "\xE5\x87\x9D",		"\xBE\xAF" => "\xE5\x8A\x91",		"\xBE\xB0" => "\xE5\x8A\x93",		"\xBE\xB1" => "\xE5\x8B\xB3",		"\xBE\xB2" => "\xE5\x99\x99",		"\xBE\xB3" => "\xE5\x99\xAB",		"\xBE\xB4" => "\xE5\x99\xB9",		"\xBE\xB5" => "\xE5\x99\xA9",		"\xBE\xB6" => "\xE5\x99\xA4",		"\xBE\xB7" => "\xE5\x99\xB8",		"\xBE\xB8" => "\xE5\x99\xAA",		"\xBE\xB9" => "\xE5\x99\xA8",		"\xBE\xBA" => "\xE5\x99\xA5",		"\xBE\xBB" => "\xE5\x99\xB1",		"\xBE\xBC" => "\xE5\x99\xAF",		"\xBE\xBD" => "\xE5\x99\xAC",		"\xBE\xBE" => "\xE5\x99\xA2",		"\xBE\xBF" => "\xE5\x99\xB6",		"\xBE\xC0" => "\xE5\xA3\x81",		"\xBE\xC1" => "\xE5\xA2\xBE",		"\xBE\xC2" => "\xE5\xA3\x87",		"\xBE\xC3" => "\xE5\xA3\x85",		"\xBE\xC4" => "\xE5\xA5\xAE",		"\xBE\xC5" => "\xE5\xAC\x9D",		"\xBE\xC6" => "\xE5\xAC\xB4",		"\xBE\xC7" => "\xE5\xAD\xB8",		"\xBE\xC8" => "\xE5\xAF\xB0",		"\xBE\xC9" => "\xE5\xB0\x8E",		"\xBE\xCA" => "\xE5\xBD\x8A",		"\xBE\xCB" => "\xE6\x86\xB2",		"\xBE\xCC" => "\xE6\x86\x91",		"\xBE\xCD" => "\xE6\x86\xA9",		"\xBE\xCE" => "\xE6\x86\x8A",		"\xBE\xCF" => "\xE6\x87\x8D",		"\xBE\xD0" => "\xE6\x86\xB6",		"\xBE\xD1" => "\xE6\x86\xBE",		"\xBE\xD2" => "\xE6\x87\x8A",		"\xBE\xD3" => "\xE6\x87\x88",		"\xBE\xD4" => "\xE6\x88\xB0",		"\xBE\xD5" => "\xE6\x93\x85",		"\xBE\xD6" => "\xE6\x93\x81",		"\xBE\xD7" => "\xE6\x93\x8B",		"\xBE\xD8" => "\xE6\x92\xBB",		"\xBE\xD9" => "\xE6\x92\xBC",		"\xBE\xDA" => "\xE6\x93\x9A",		"\xBE\xDB" => "\xE6\x93\x84",		"\xBE\xDC" => "\xE6\x93\x87",		"\xBE\xDD" => "\xE6\x93\x82",		"\xBE\xDE" => "\xE6\x93\x8D",		"\xBE\xDF" => "\xE6\x92\xBF",		"\xBE\xE0" => "\xE6\x93\x92",		"\xBE\xE1" => "\xE6\x93\x94",		"\xBE\xE2" => "\xE6\x92\xBE",		"\xBE\xE3" => "\xE6\x95\xB4",		"\xBE\xE4" => "\xE6\x9B\x86",		"\xBE\xE5" => "\xE6\x9B\x89",		"\xBE\xE6" => "\xE6\x9A\xB9",		"\xBE\xE7" => "\xE6\x9B\x84",		"\xBE\xE8" => "\xE6\x9B\x87",		"\xBE\xE9" => "\xE6\x9A\xB8",		"\xBE\xEA" => "\xE6\xA8\xBD",		"\xBE\xEB" => "\xE6\xA8\xB8",		"\xBE\xEC" => "\xE6\xA8\xBA",		"\xBE\xED" => "\xE6\xA9\x99",		"\xBE\xEE" => "\xE6\xA9\xAB",		"\xBE\xEF" => "\xE6\xA9\x98",		"\xBE\xF0" => "\xE6\xA8\xB9",		"\xBE\xF1" => "\xE6\xA9\x84",		"\xBE\xF2" => "\xE6\xA9\xA2",		"\xBE\xF3" => "\xE6\xA9\xA1",		"\xBE\xF4" => "\xE6\xA9\x8B",		"\xBE\xF5" => "\xE6\xA9\x87",		"\xBE\xF6" => "\xE6\xA8\xB5",		"\xBE\xF7" => "\xE6\xA9\x9F",		"\xBE\xF8" => "\xE6\xA9\x88",		"\xBE\xF9" => "\xE6\xAD\x99",		"\xBE\xFA" => "\xE6\xAD\xB7",		"\xBE\xFB" => "\xE6\xB0\x85",		"\xBE\xFC" => "\xE6\xBF\x82",		"\xBE\xFD" => "\xE6\xBE\xB1",		"\xBE\xFE" => "\xE6\xBE\xA1",		"\xBF\x40" => "\xE6\xBF\x83",		"\xBF\x41" => "\xE6\xBE\xA4",		"\xBF\x42" => "\xE6\xBF\x81",		"\xBF\x43" => "\xE6\xBE\xA7",		"\xBF\x44" => "\xE6\xBE\xB3",		"\xBF\x45" => "\xE6\xBF\x80",		"\xBF\x46" => "\xE6\xBE\xB9",		"\xBF\x47" => "\xE6\xBE\xB6",		"\xBF\x48" => "\xE6\xBE\xA6",		"\xBF\x49" => "\xE6\xBE\xA0",		"\xBF\x4A" => "\xE6\xBE\xB4",		"\xBF\x4B" => "\xE7\x86\xBE",		"\xBF\x4C" => "\xE7\x87\x89",		"\xBF\x4D" => "\xE7\x87\x90",		"\xBF\x4E" => "\xE7\x87\x92",		"\xBF\x4F" => "\xE7\x87\x88",		"\xBF\x50" => "\xE7\x87\x95",		"\xBF\x51" => "\xE7\x86\xB9",		"\xBF\x52" => "\xE7\x87\x8E",		"\xBF\x53" => "\xE7\x87\x99",		"\xBF\x54" => "\xE7\x87\x9C",		"\xBF\x55" => "\xE7\x87\x83",		"\xBF\x56" => "\xE7\x87\x84",		"\xBF\x57" => "\xE7\x8D\xA8",		"\xBF\x58" => "\xE7\x92\x9C",		"\xBF\x59" => "\xE7\x92\xA3",		"\xBF\x5A" => "\xE7\x92\x98",		"\xBF\x5B" => "\xE7\x92\x9F",		"\xBF\x5C" => "\xE7\x92\x9E",		"\xBF\x5D" => "\xE7\x93\xA2",		"\xBF\x5E" => "\xE7\x94\x8C",		"\xBF\x5F" => "\xE7\x94\x8D",		"\xBF\x60" => "\xE7\x98\xB4",		"\xBF\x61" => "\xE7\x98\xB8",		"\xBF\x62" => "\xE7\x98\xBA",		"\xBF\x63" => "\xE7\x9B\xA7",		"\xBF\x64" => "\xE7\x9B\xA5",		"\xBF\x65" => "\xE7\x9E\xA0",		"\xBF\x66" => "\xE7\x9E\x9E",		"\xBF\x67" => "\xE7\x9E\x9F",		"\xBF\x68" => "\xE7\x9E\xA5",		"\xBF\x69" => "\xE7\xA3\xA8",		"\xBF\x6A" => "\xE7\xA3\x9A",		"\xBF\x6B" => "\xE7\xA3\xAC",		"\xBF\x6C" => "\xE7\xA3\xA7",		"\xBF\x6D" => "\xE7\xA6\xA6",		"\xBF\x6E" => "\xE7\xA9\x8D",		"\xBF\x6F" => "\xE7\xA9\x8E",		"\xBF\x70" => "\xE7\xA9\x86",		"\xBF\x71" => "\xE7\xA9\x8C",		"\xBF\x72" => "\xE7\xA9\x8B",		"\xBF\x73" => "\xE7\xAA\xBA",		"\xBF\x74" => "\xE7\xAF\x99",		"\xBF\x75" => "\xE7\xB0\x91",		"\xBF\x76" => "\xE7\xAF\x89",		"\xBF\x77" => "\xE7\xAF\xA4",		"\xBF\x78" => "\xE7\xAF\x9B",		"\xBF\x79" => "\xE7\xAF\xA1",		"\xBF\x7A" => "\xE7\xAF\xA9",		"\xBF\x7B" => "\xE7\xAF\xA6",		"\xBF\x7C" => "\xE7\xB3\x95",		"\xBF\x7D" => "\xE7\xB3\x96",		"\xBF\x7E" => "\xE7\xB8\x8A",		"\xBF\xA1" => "\xE7\xB8\x91",		"\xBF\xA2" => "\xE7\xB8\x88",		"\xBF\xA3" => "\xE7\xB8\x9B",		"\xBF\xA4" => "\xE7\xB8\xA3",		"\xBF\xA5" => "\xE7\xB8\x9E",		"\xBF\xA6" => "\xE7\xB8\x9D",		"\xBF\xA7" => "\xE7\xB8\x89",		"\xBF\xA8" => "\xE7\xB8\x90",		"\xBF\xA9" => "\xE7\xBD\xB9",		"\xBF\xAA" => "\xE7\xBE\xB2",		"\xBF\xAB" => "\xE7\xBF\xB0",		"\xBF\xAC" => "\xE7\xBF\xB1",		"\xBF\xAD" => "\xE7\xBF\xAE",		"\xBF\xAE" => "\xE8\x80\xA8",		"\xBF\xAF" => "\xE8\x86\xB3",		"\xBF\xB0" => "\xE8\x86\xA9",		"\xBF\xB1" => "\xE8\x86\xA8",		"\xBF\xB2" => "\xE8\x87\xBB",		"\xBF\xB3" => "\xE8\x88\x88",		"\xBF\xB4" => "\xE8\x89\x98",		"\xBF\xB5" => "\xE8\x89\x99",		"\xBF\xB6" => "\xE8\x95\x8A",		"\xBF\xB7" => "\xE8\x95\x99",		"\xBF\xB8" => "\xE8\x95\x88",		"\xBF\xB9" => "\xE8\x95\xA8",		"\xBF\xBA" => "\xE8\x95\xA9",		"\xBF\xBB" => "\xE8\x95\x83",		"\xBF\xBC" => "\xE8\x95\x89",		"\xBF\xBD" => "\xE8\x95\xAD",		"\xBF\xBE" => "\xE8\x95\xAA",		"\xBF\xBF" => "\xE8\x95\x9E",		"\xBF\xC0" => "\xE8\x9E\x83",		"\xBF\xC1" => "\xE8\x9E\x9F",		"\xBF\xC2" => "\xE8\x9E\x9E",		"\xBF\xC3" => "\xE8\x9E\xA2",		"\xBF\xC4" => "\xE8\x9E\x8D",		"\xBF\xC5" => "\xE8\xA1\xA1",		"\xBF\xC6" => "\xE8\xA4\xAA",		"\xBF\xC7" => "\xE8\xA4\xB2",		"\xBF\xC8" => "\xE8\xA4\xA5",		"\xBF\xC9" => "\xE8\xA4\xAB",		"\xBF\xCA" => "\xE8\xA4\xA1",		"\xBF\xCB" => "\xE8\xA6\xAA",		"\xBF\xCC" => "\xE8\xA6\xA6",		"\xBF\xCD" => "\xE8\xAB\xA6",		"\xBF\xCE" => "\xE8\xAB\xBA",		"\xBF\xCF" => "\xE8\xAB\xAB",		"\xBF\xD0" => "\xE8\xAB\xB1",		"\xBF\xD1" => "\xE8\xAC\x80",		"\xBF\xD2" => "\xE8\xAB\x9C",		"\xBF\xD3" => "\xE8\xAB\xA7",		"\xBF\xD4" => "\xE8\xAB\xAE",		"\xBF\xD5" => "\xE8\xAB\xBE",		"\xBF\xD6" => "\xE8\xAC\x81",		"\xBF\xD7" => "\xE8\xAC\x82",		"\xBF\xD8" => "\xE8\xAB\xB7",		"\xBF\xD9" => "\xE8\xAB\xAD",		"\xBF\xDA" => "\xE8\xAB\xB3",		"\xBF\xDB" => "\xE8\xAB\xB6",		"\xBF\xDC" => "\xE8\xAB\xBC",		"\xBF\xDD" => "\xE8\xB1\xAB",		"\xBF\xDE" => "\xE8\xB1\xAD",		"\xBF\xDF" => "\xE8\xB2\x93",		"\xBF\xE0" => "\xE8\xB3\xB4",		"\xBF\xE1" => "\xE8\xB9\x84",		"\xBF\xE2" => "\xE8\xB8\xB1",		"\xBF\xE3" => "\xE8\xB8\xB4",		"\xBF\xE4" => "\xE8\xB9\x82",		"\xBF\xE5" => "\xE8\xB8\xB9",		"\xBF\xE6" => "\xE8\xB8\xB5",		"\xBF\xE7" => "\xE8\xBC\xBB",		"\xBF\xE8" => "\xE8\xBC\xAF",		"\xBF\xE9" => "\xE8\xBC\xB8",		"\xBF\xEA" => "\xE8\xBC\xB3",		"\xBF\xEB" => "\xE8\xBE\xA8",		"\xBF\xEC" => "\xE8\xBE\xA6",		"\xBF\xED" => "\xE9\x81\xB5",		"\xBF\xEE" => "\xE9\x81\xB4",		"\xBF\xEF" => "\xE9\x81\xB8",		"\xBF\xF0" => "\xE9\x81\xB2",		"\xBF\xF1" => "\xE9\x81\xBC",		"\xBF\xF2" => "\xE9\x81\xBA",		"\xBF\xF3" => "\xE9\x84\xB4",		"\xBF\xF4" => "\xE9\x86\x92",		"\xBF\xF5" => "\xE9\x8C\xA0",		"\xBF\xF6" => "\xE9\x8C\xB6",		"\xBF\xF7" => "\xE9\x8B\xB8",		"\xBF\xF8" => "\xE9\x8C\xB3",		"\xBF\xF9" => "\xE9\x8C\xAF",		"\xBF\xFA" => "\xE9\x8C\xA2",		"\xBF\xFB" => "\xE9\x8B\xBC",		"\xBF\xFC" => "\xE9\x8C\xAB",		"\xBF\xFD" => "\xE9\x8C\x84",		"\xBF\xFE" => "\xE9\x8C\x9A",		"\xC0\x40" => "\xE9\x8C\x90",		"\xC0\x41" => "\xE9\x8C\xA6",		"\xC0\x42" => "\xE9\x8C\xA1",		"\xC0\x43" => "\xE9\x8C\x95",		"\xC0\x44" => "\xE9\x8C\xAE",		"\xC0\x45" => "\xE9\x8C\x99",		"\xC0\x46" => "\xE9\x96\xBB",		"\xC0\x47" => "\xE9\x9A\xA7",		"\xC0\x48" => "\xE9\x9A\xA8",		"\xC0\x49" => "\xE9\x9A\xAA",		"\xC0\x4A" => "\xE9\x9B\x95",		"\xC0\x4B" => "\xE9\x9C\x8E",		"\xC0\x4C" => "\xE9\x9C\x91",		"\xC0\x4D" => "\xE9\x9C\x96",		"\xC0\x4E" => "\xE9\x9C\x8D",		"\xC0\x4F" => "\xE9\x9C\x93",		"\xC0\x50" => "\xE9\x9C\x8F",		"\xC0\x51" => "\xE9\x9D\x9B",		"\xC0\x52" => "\xE9\x9D\x9C",		"\xC0\x53" => "\xE9\x9D\xA6",		"\xC0\x54" => "\xE9\x9E\x98",		"\xC0\x55" => "\xE9\xA0\xB0",		"\xC0\x56" => "\xE9\xA0\xB8",		"\xC0\x57" => "\xE9\xA0\xBB",		"\xC0\x58" => "\xE9\xA0\xB7",		"\xC0\x59" => "\xE9\xA0\xAD",		"\xC0\x5A" => "\xE9\xA0\xB9",		"\xC0\x5B" => "\xE9\xA0\xA4",		"\xC0\x5C" => "\xE9\xA4\x90",		"\xC0\x5D" => "\xE9\xA4\xA8",		"\xC0\x5E" => "\xE9\xA4\x9E",		"\xC0\x5F" => "\xE9\xA4\x9B",		"\xC0\x60" => "\xE9\xA4\xA1",		"\xC0\x61" => "\xE9\xA4\x9A",		"\xC0\x62" => "\xE9\xA7\xAD",		"\xC0\x63" => "\xE9\xA7\xA2",		"\xC0\x64" => "\xE9\xA7\xB1",		"\xC0\x65" => "\xE9\xAA\xB8",		"\xC0\x66" => "\xE9\xAA\xBC",		"\xC0\x67" => "\xE9\xAB\xBB",		"\xC0\x68" => "\xE9\xAB\xAD",		"\xC0\x69" => "\xE9\xAC\xA8",		"\xC0\x6A" => "\xE9\xAE\x91",		"\xC0\x6B" => "\xE9\xB4\x95",		"\xC0\x6C" => "\xE9\xB4\xA3",		"\xC0\x6D" => "\xE9\xB4\xA6",		"\xC0\x6E" => "\xE9\xB4\xA8",		"\xC0\x6F" => "\xE9\xB4\x92",		"\xC0\x70" => "\xE9\xB4\x9B",		"\xC0\x71" => "\xE9\xBB\x98",		"\xC0\x72" => "\xE9\xBB\x94",		"\xC0\x73" => "\xE9\xBE\x8D",		"\xC0\x74" => "\xE9\xBE\x9C",		"\xC0\x75" => "\xE5\x84\xAA",		"\xC0\x76" => "\xE5\x84\x9F",		"\xC0\x77" => "\xE5\x84\xA1",		"\xC0\x78" => "\xE5\x84\xB2",		"\xC0\x79" => "\xE5\x8B\xB5",		"\xC0\x7A" => "\xE5\x9A\x8E",		"\xC0\x7B" => "\xE5\x9A\x80",		"\xC0\x7C" => "\xE5\x9A\x90",		"\xC0\x7D" => "\xE5\x9A\x85",		"\xC0\x7E" => "\xE5\x9A\x87",		"\xC0\xA1" => "\xE5\x9A\x8F",		"\xC0\xA2" => "\xE5\xA3\x95",		"\xC0\xA3" => "\xE5\xA3\x93",		"\xC0\xA4" => "\xE5\xA3\x91",		"\xC0\xA5" => "\xE5\xA3\x8E",		"\xC0\xA6" => "\xE5\xAC\xB0",		"\xC0\xA7" => "\xE5\xAC\xAA",		"\xC0\xA8" => "\xE5\xAC\xA4",		"\xC0\xA9" => "\xE5\xAD\xBA",		"\xC0\xAA" => "\xE5\xB0\xB7",		"\xC0\xAB" => "\xE5\xB1\xA8",		"\xC0\xAC" => "\xE5\xB6\xBC",		"\xC0\xAD" => "\xE5\xB6\xBA",		"\xC0\xAE" => "\xE5\xB6\xBD",		"\xC0\xAF" => "\xE5\xB6\xB8",		"\xC0\xB0" => "\xE5\xB9\xAB",		"\xC0\xB1" => "\xE5\xBD\x8C",		"\xC0\xB2" => "\xE5\xBE\xBD",		"\xC0\xB3" => "\xE6\x87\x89",		"\xC0\xB4" => "\xE6\x87\x82",		"\xC0\xB5" => "\xE6\x87\x87",		"\xC0\xB6" => "\xE6\x87\xA6",		"\xC0\xB7" => "\xE6\x87\x8B",		"\xC0\xB8" => "\xE6\x88\xB2",		"\xC0\xB9" => "\xE6\x88\xB4",		"\xC0\xBA" => "\xE6\x93\x8E",		"\xC0\xBB" => "\xE6\x93\x8A",		"\xC0\xBC" => "\xE6\x93\x98",		"\xC0\xBD" => "\xE6\x93\xA0",		"\xC0\xBE" => "\xE6\x93\xB0",		"\xC0\xBF" => "\xE6\x93\xA6",		"\xC0\xC0" => "\xE6\x93\xAC",		"\xC0\xC1" => "\xE6\x93\xB1",		"\xC0\xC2" => "\xE6\x93\xA2",		"\xC0\xC3" => "\xE6\x93\xAD",		"\xC0\xC4" => "\xE6\x96\x82",		"\xC0\xC5" => "\xE6\x96\x83",		"\xC0\xC6" => "\xE6\x9B\x99",		"\xC0\xC7" => "\xE6\x9B\x96",		"\xC0\xC8" => "\xE6\xAA\x80",		"\xC0\xC9" => "\xE6\xAA\x94",		"\xC0\xCA" => "\xE6\xAA\x84",		"\xC0\xCB" => "\xE6\xAA\xA2",		"\xC0\xCC" => "\xE6\xAA\x9C",		"\xC0\xCD" => "\xE6\xAB\x9B",		"\xC0\xCE" => "\xE6\xAA\xA3",		"\xC0\xCF" => "\xE6\xA9\xBE",		"\xC0\xD0" => "\xE6\xAA\x97",		"\xC0\xD1" => "\xE6\xAA\x90",		"\xC0\xD2" => "\xE6\xAA\xA0",		"\xC0\xD3" => "\xE6\xAD\x9C",		"\xC0\xD4" => "\xE6\xAE\xAE",		"\xC0\xD5" => "\xE6\xAF\x9A",		"\xC0\xD6" => "\xE6\xB0\x88",		"\xC0\xD7" => "\xE6\xBF\x98",		"\xC0\xD8" => "\xE6\xBF\xB1",		"\xC0\xD9" => "\xE6\xBF\x9F",		"\xC0\xDA" => "\xE6\xBF\xA0",		"\xC0\xDB" => "\xE6\xBF\x9B",		"\xC0\xDC" => "\xE6\xBF\xA4",		"\xC0\xDD" => "\xE6\xBF\xAB",		"\xC0\xDE" => "\xE6\xBF\xAF",		"\xC0\xDF" => "\xE6\xBE\x80",		"\xC0\xE0" => "\xE6\xBF\xAC",		"\xC0\xE1" => "\xE6\xBF\xA1",		"\xC0\xE2" => "\xE6\xBF\xA9",		"\xC0\xE3" => "\xE6\xBF\x95",		"\xC0\xE4" => "\xE6\xBF\xAE",		"\xC0\xE5" => "\xE6\xBF\xB0",		"\xC0\xE6" => "\xE7\x87\xA7",		"\xC0\xE7" => "\xE7\x87\x9F",		"\xC0\xE8" => "\xE7\x87\xAE",		"\xC0\xE9" => "\xE7\x87\xA6",		"\xC0\xEA" => "\xE7\x87\xA5",		"\xC0\xEB" => "\xE7\x87\xAD",		"\xC0\xEC" => "\xE7\x87\xAC",		"\xC0\xED" => "\xE7\x87\xB4",		"\xC0\xEE" => "\xE7\x87\xA0",		"\xC0\xEF" => "\xE7\x88\xB5",		"\xC0\xF0" => "\xE7\x89\x86",		"\xC0\xF1" => "\xE7\x8D\xB0",		"\xC0\xF2" => "\xE7\x8D\xB2",		"\xC0\xF3" => "\xE7\x92\xA9",		"\xC0\xF4" => "\xE7\x92\xB0",		"\xC0\xF5" => "\xE7\x92\xA6",		"\xC0\xF6" => "\xE7\x92\xA8",		"\xC0\xF7" => "\xE7\x99\x86",		"\xC0\xF8" => "\xE7\x99\x82",		"\xC0\xF9" => "\xE7\x99\x8C",		"\xC0\xFA" => "\xE7\x9B\xAA",		"\xC0\xFB" => "\xE7\x9E\xB3",		"\xC0\xFC" => "\xE7\x9E\xAA",		"\xC0\xFD" => "\xE7\x9E\xB0",		"\xC0\xFE" => "\xE7\x9E\xAC",		"\xC1\x40" => "\xE7\x9E\xA7",		"\xC1\x41" => "\xE7\x9E\xAD",		"\xC1\x42" => "\xE7\x9F\xAF",		"\xC1\x43" => "\xE7\xA3\xB7",		"\xC1\x44" => "\xE7\xA3\xBA",		"\xC1\x45" => "\xE7\xA3\xB4",		"\xC1\x46" => "\xE7\xA3\xAF",		"\xC1\x47" => "\xE7\xA4\x81",		"\xC1\x48" => "\xE7\xA6\xA7",		"\xC1\x49" => "\xE7\xA6\xAA",		"\xC1\x4A" => "\xE7\xA9\x97",		"\xC1\x4B" => "\xE7\xAA\xBF",		"\xC1\x4C" => "\xE7\xB0\x87",		"\xC1\x4D" => "\xE7\xB0\x8D",		"\xC1\x4E" => "\xE7\xAF\xBE",		"\xC1\x4F" => "\xE7\xAF\xB7",		"\xC1\x50" => "\xE7\xB0\x8C",		"\xC1\x51" => "\xE7\xAF\xA0",		"\xC1\x52" => "\xE7\xB3\xA0",		"\xC1\x53" => "\xE7\xB3\x9C",		"\xC1\x54" => "\xE7\xB3\x9E",		"\xC1\x55" => "\xE7\xB3\xA2",		"\xC1\x56" => "\xE7\xB3\x9F",		"\xC1\x57" => "\xE7\xB3\x99",		"\xC1\x58" => "\xE7\xB3\x9D",		"\xC1\x59" => "\xE7\xB8\xAE",		"\xC1\x5A" => "\xE7\xB8\xBE",		"\xC1\x5B" => "\xE7\xB9\x86",		"\xC1\x5C" => "\xE7\xB8\xB7",		"\xC1\x5D" => "\xE7\xB8\xB2",		"\xC1\x5E" => "\xE7\xB9\x83",		"\xC1\x5F" => "\xE7\xB8\xAB",		"\xC1\x60" => "\xE7\xB8\xBD",		"\xC1\x61" => "\xE7\xB8\xB1",		"\xC1\x62" => "\xE7\xB9\x85",		"\xC1\x63" => "\xE7\xB9\x81",		"\xC1\x64" => "\xE7\xB8\xB4",		"\xC1\x65" => "\xE7\xB8\xB9",		"\xC1\x66" => "\xE7\xB9\x88",		"\xC1\x67" => "\xE7\xB8\xB5",		"\xC1\x68" => "\xE7\xB8\xBF",		"\xC1\x69" => "\xE7\xB8\xAF",		"\xC1\x6A" => "\xE7\xBD\x84",		"\xC1\x6B" => "\xE7\xBF\xB3",		"\xC1\x6C" => "\xE7\xBF\xBC",		"\xC1\x6D" => "\xE8\x81\xB1",		"\xC1\x6E" => "\xE8\x81\xB2",		"\xC1\x6F" => "\xE8\x81\xB0",		"\xC1\x70" => "\xE8\x81\xAF",		"\xC1\x71" => "\xE8\x81\xB3",		"\xC1\x72" => "\xE8\x87\x86",		"\xC1\x73" => "\xE8\x87\x83",		"\xC1\x74" => "\xE8\x86\xBA",		"\xC1\x75" => "\xE8\x87\x82",		"\xC1\x76" => "\xE8\x87\x80",		"\xC1\x77" => "\xE8\x86\xBF",		"\xC1\x78" => "\xE8\x86\xBD",		"\xC1\x79" => "\xE8\x87\x89",		"\xC1\x7A" => "\xE8\x86\xBE",		"\xC1\x7B" => "\xE8\x87\xA8",		"\xC1\x7C" => "\xE8\x88\x89",		"\xC1\x7D" => "\xE8\x89\xB1",		"\xC1\x7E" => "\xE8\x96\xAA",		"\xC1\xA1" => "\xE8\x96\x84",		"\xC1\xA2" => "\xE8\x95\xBE",		"\xC1\xA3" => "\xE8\x96\x9C",		"\xC1\xA4" => "\xE8\x96\x91",		"\xC1\xA5" => "\xE8\x96\x94",		"\xC1\xA6" => "\xE8\x96\xAF",		"\xC1\xA7" => "\xE8\x96\x9B",		"\xC1\xA8" => "\xE8\x96\x87",		"\xC1\xA9" => "\xE8\x96\xA8",		"\xC1\xAA" => "\xE8\x96\x8A",		"\xC1\xAB" => "\xE8\x99\xA7",		"\xC1\xAC" => "\xE8\x9F\x80",		"\xC1\xAD" => "\xE8\x9F\x91",		"\xC1\xAE" => "\xE8\x9E\xB3",		"\xC1\xAF" => "\xE8\x9F\x92",		"\xC1\xB0" => "\xE8\x9F\x86",		"\xC1\xB1" => "\xE8\x9E\xAB",		"\xC1\xB2" => "\xE8\x9E\xBB",		"\xC1\xB3" => "\xE8\x9E\xBA",		"\xC1\xB4" => "\xE8\x9F\x88",		"\xC1\xB5" => "\xE8\x9F\x8B",		"\xC1\xB6" => "\xE8\xA4\xBB",		"\xC1\xB7" => "\xE8\xA4\xB6",		"\xC1\xB8" => "\xE8\xA5\x84",		"\xC1\xB9" => "\xE8\xA4\xB8",		"\xC1\xBA" => "\xE8\xA4\xBD",		"\xC1\xBB" => "\xE8\xA6\xAC",		"\xC1\xBC" => "\xE8\xAC\x8E",		"\xC1\xBD" => "\xE8\xAC\x97",		"\xC1\xBE" => "\xE8\xAC\x99",		"\xC1\xBF" => "\xE8\xAC\x9B",		"\xC1\xC0" => "\xE8\xAC\x8A",		"\xC1\xC1" => "\xE8\xAC\xA0",		"\xC1\xC2" => "\xE8\xAC\x9D",		"\xC1\xC3" => "\xE8\xAC\x84",		"\xC1\xC4" => "\xE8\xAC\x90",		"\xC1\xC5" => "\xE8\xB1\x81",		"\xC1\xC6" => "\xE8\xB0\xBF",		"\xC1\xC7" => "\xE8\xB1\xB3",		"\xC1\xC8" => "\xE8\xB3\xBA",		"\xC1\xC9" => "\xE8\xB3\xBD",		"\xC1\xCA" => "\xE8\xB3\xBC",		"\xC1\xCB" => "\xE8\xB3\xB8",		"\xC1\xCC" => "\xE8\xB3\xBB",		"\xC1\xCD" => "\xE8\xB6\xA8",		"\xC1\xCE" => "\xE8\xB9\x89",		"\xC1\xCF" => "\xE8\xB9\x8B",		"\xC1\xD0" => "\xE8\xB9\x88",		"\xC1\xD1" => "\xE8\xB9\x8A",		"\xC1\xD2" => "\xE8\xBD\x84",		"\xC1\xD3" => "\xE8\xBC\xBE",		"\xC1\xD4" => "\xE8\xBD\x82",		"\xC1\xD5" => "\xE8\xBD\x85",		"\xC1\xD6" => "\xE8\xBC\xBF",		"\xC1\xD7" => "\xE9\x81\xBF",		"\xC1\xD8" => "\xE9\x81\xBD",		"\xC1\xD9" => "\xE9\x82\x84",		"\xC1\xDA" => "\xE9\x82\x81",		"\xC1\xDB" => "\xE9\x82\x82",		"\xC1\xDC" => "\xE9\x82\x80",		"\xC1\xDD" => "\xE9\x84\xB9",		"\xC1\xDE" => "\xE9\x86\xA3",		"\xC1\xDF" => "\xE9\x86\x9E",		"\xC1\xE0" => "\xE9\x86\x9C",		"\xC1\xE1" => "\xE9\x8D\x8D",		"\xC1\xE2" => "\xE9\x8E\x82",		"\xC1\xE3" => "\xE9\x8C\xA8",		"\xC1\xE4" => "\xE9\x8D\xB5",		"\xC1\xE5" => "\xE9\x8D\x8A",		"\xC1\xE6" => "\xE9\x8D\xA5",		"\xC1\xE7" => "\xE9\x8D\x8B",		"\xC1\xE8" => "\xE9\x8C\x98",		"\xC1\xE9" => "\xE9\x8D\xBE",		"\xC1\xEA" => "\xE9\x8D\xAC",		"\xC1\xEB" => "\xE9\x8D\x9B",		"\xC1\xEC" => "\xE9\x8D\xB0",		"\xC1\xED" => "\xE9\x8D\x9A",		"\xC1\xEE" => "\xE9\x8D\x94",		"\xC1\xEF" => "\xE9\x97\x8A",		"\xC1\xF0" => "\xE9\x97\x8B",		"\xC1\xF1" => "\xE9\x97\x8C",		"\xC1\xF2" => "\xE9\x97\x88",		"\xC1\xF3" => "\xE9\x97\x86",		"\xC1\xF4" => "\xE9\x9A\xB1",		"\xC1\xF5" => "\xE9\x9A\xB8",		"\xC1\xF6" => "\xE9\x9B\x96",		"\xC1\xF7" => "\xE9\x9C\x9C",		"\xC1\xF8" => "\xE9\x9C\x9E",		"\xC1\xF9" => "\xE9\x9E\xA0",		"\xC1\xFA" => "\xE9\x9F\x93",		"\xC1\xFB" => "\xE9\xA1\x86",		"\xC1\xFC" => "\xE9\xA2\xB6",		"\xC1\xFD" => "\xE9\xA4\xB5",		"\xC1\xFE" => "\xE9\xA8\x81",		"\xC2\x40" => "\xE9\xA7\xBF",		"\xC2\x41" => "\xE9\xAE\xAE",		"\xC2\x42" => "\xE9\xAE\xAB",		"\xC2\x43" => "\xE9\xAE\xAA",		"\xC2\x44" => "\xE9\xAE\xAD",		"\xC2\x45" => "\xE9\xB4\xBB",		"\xC2\x46" => "\xE9\xB4\xBF",		"\xC2\x47" => "\xE9\xBA\x8B",		"\xC2\x48" => "\xE9\xBB\x8F",		"\xC2\x49" => "\xE9\xBB\x9E",		"\xC2\x4A" => "\xE9\xBB\x9C",		"\xC2\x4B" => "\xE9\xBB\x9D",		"\xC2\x4C" => "\xE9\xBB\x9B",		"\xC2\x4D" => "\xE9\xBC\xBE",		"\xC2\x4E" => "\xE9\xBD\x8B",		"\xC2\x4F" => "\xE5\x8F\xA2",		"\xC2\x50" => "\xE5\x9A\x95",		"\xC2\x51" => "\xE5\x9A\xAE",		"\xC2\x52" => "\xE5\xA3\x99",		"\xC2\x53" => "\xE5\xA3\x98",		"\xC2\x54" => "\xE5\xAC\xB8",		"\xC2\x55" => "\xE5\xBD\x9D",		"\xC2\x56" => "\xE6\x87\xA3",		"\xC2\x57" => "\xE6\x88\xB3",		"\xC2\x58" => "\xE6\x93\xB4",		"\xC2\x59" => "\xE6\x93\xB2",		"\xC2\x5A" => "\xE6\x93\xBE",		"\xC2\x5B" => "\xE6\x94\x86",		"\xC2\x5C" => "\xE6\x93\xBA",		"\xC2\x5D" => "\xE6\x93\xBB",		"\xC2\x5E" => "\xE6\x93\xB7",		"\xC2\x5F" => "\xE6\x96\xB7",		"\xC2\x60" => "\xE6\x9B\x9C",		"\xC2\x61" => "\xE6\x9C\xA6",		"\xC2\x62" => "\xE6\xAA\xB3",		"\xC2\x63" => "\xE6\xAA\xAC",		"\xC2\x64" => "\xE6\xAB\x83",		"\xC2\x65" => "\xE6\xAA\xBB",		"\xC2\x66" => "\xE6\xAA\xB8",		"\xC2\x67" => "\xE6\xAB\x82",		"\xC2\x68" => "\xE6\xAA\xAE",		"\xC2\x69" => "\xE6\xAA\xAF",		"\xC2\x6A" => "\xE6\xAD\x9F",		"\xC2\x6B" => "\xE6\xAD\xB8",		"\xC2\x6C" => "\xE6\xAE\xAF",		"\xC2\x6D" => "\xE7\x80\x89",		"\xC2\x6E" => "\xE7\x80\x8B",		"\xC2\x6F" => "\xE6\xBF\xBE",		"\xC2\x70" => "\xE7\x80\x86",		"\xC2\x71" => "\xE6\xBF\xBA",		"\xC2\x72" => "\xE7\x80\x91",		"\xC2\x73" => "\xE7\x80\x8F",		"\xC2\x74" => "\xE7\x87\xBB",		"\xC2\x75" => "\xE7\x87\xBC",		"\xC2\x76" => "\xE7\x87\xBE",		"\xC2\x77" => "\xE7\x87\xB8",		"\xC2\x78" => "\xE7\x8D\xB7",		"\xC2\x79" => "\xE7\x8D\xB5",		"\xC2\x7A" => "\xE7\x92\xA7",		"\xC2\x7B" => "\xE7\x92\xBF",		"\xC2\x7C" => "\xE7\x94\x95",		"\xC2\x7D" => "\xE7\x99\x96",		"\xC2\x7E" => "\xE7\x99\x98",		"\xC2\xA1" => "\xE7\x99\x92",		"\xC2\xA2" => "\xE7\x9E\xBD",		"\xC2\xA3" => "\xE7\x9E\xBF",		"\xC2\xA4" => "\xE7\x9E\xBB",		"\xC2\xA5" => "\xE7\x9E\xBC",		"\xC2\xA6" => "\xE7\xA4\x8E",		"\xC2\xA7" => "\xE7\xA6\xAE",		"\xC2\xA8" => "\xE7\xA9\xA1",		"\xC2\xA9" => "\xE7\xA9\xA2",		"\xC2\xAA" => "\xE7\xA9\xA0",		"\xC2\xAB" => "\xE7\xAB\x84",		"\xC2\xAC" => "\xE7\xAB\x85",		"\xC2\xAD" => "\xE7\xB0\xAB",		"\xC2\xAE" => "\xE7\xB0\xA7",		"\xC2\xAF" => "\xE7\xB0\xAA",		"\xC2\xB0" => "\xE7\xB0\x9E",		"\xC2\xB1" => "\xE7\xB0\xA3",		"\xC2\xB2" => "\xE7\xB0\xA1",		"\xC2\xB3" => "\xE7\xB3\xA7",		"\xC2\xB4" => "\xE7\xB9\x94",		"\xC2\xB5" => "\xE7\xB9\x95",		"\xC2\xB6" => "\xE7\xB9\x9E",		"\xC2\xB7" => "\xE7\xB9\x9A",		"\xC2\xB8" => "\xE7\xB9\xA1",		"\xC2\xB9" => "\xE7\xB9\x92",		"\xC2\xBA" => "\xE7\xB9\x99",		"\xC2\xBB" => "\xE7\xBD\x88",		"\xC2\xBC" => "\xE7\xBF\xB9",		"\xC2\xBD" => "\xE7\xBF\xBB",		"\xC2\xBE" => "\xE8\x81\xB7",		"\xC2\xBF" => "\xE8\x81\xB6",		"\xC2\xC0" => "\xE8\x87\x8D",		"\xC2\xC1" => "\xE8\x87\x8F",		"\xC2\xC2" => "\xE8\x88\x8A",		"\xC2\xC3" => "\xE8\x97\x8F",		"\xC2\xC4" => "\xE8\x96\xA9",		"\xC2\xC5" => "\xE8\x97\x8D",		"\xC2\xC6" => "\xE8\x97\x90",		"\xC2\xC7" => "\xE8\x97\x89",		"\xC2\xC8" => "\xE8\x96\xB0",		"\xC2\xC9" => "\xE8\x96\xBA",		"\xC2\xCA" => "\xE8\x96\xB9",		"\xC2\xCB" => "\xE8\x96\xA6",		"\xC2\xCC" => "\xE8\x9F\xAF",		"\xC2\xCD" => "\xE8\x9F\xAC",		"\xC2\xCE" => "\xE8\x9F\xB2",		"\xC2\xCF" => "\xE8\x9F\xA0",		"\xC2\xD0" => "\xE8\xA6\x86",		"\xC2\xD1" => "\xE8\xA6\xB2",		"\xC2\xD2" => "\xE8\xA7\xB4",		"\xC2\xD3" => "\xE8\xAC\xA8",		"\xC2\xD4" => "\xE8\xAC\xB9",		"\xC2\xD5" => "\xE8\xAC\xAC",		"\xC2\xD6" => "\xE8\xAC\xAB",		"\xC2\xD7" => "\xE8\xB1\x90",		"\xC2\xD8" => "\xE8\xB4\x85",		"\xC2\xD9" => "\xE8\xB9\x99",		"\xC2\xDA" => "\xE8\xB9\xA3",		"\xC2\xDB" => "\xE8\xB9\xA6",		"\xC2\xDC" => "\xE8\xB9\xA4",		"\xC2\xDD" => "\xE8\xB9\x9F",		"\xC2\xDE" => "\xE8\xB9\x95",		"\xC2\xDF" => "\xE8\xBB\x80",		"\xC2\xE0" => "\xE8\xBD\x89",		"\xC2\xE1" => "\xE8\xBD\x8D",		"\xC2\xE2" => "\xE9\x82\x87",		"\xC2\xE3" => "\xE9\x82\x83",		"\xC2\xE4" => "\xE9\x82\x88",		"\xC2\xE5" => "\xE9\x86\xAB",		"\xC2\xE6" => "\xE9\x86\xAC",		"\xC2\xE7" => "\xE9\x87\x90",		"\xC2\xE8" => "\xE9\x8E\x94",		"\xC2\xE9" => "\xE9\x8E\x8A",		"\xC2\xEA" => "\xE9\x8E\x96",		"\xC2\xEB" => "\xE9\x8E\xA2",		"\xC2\xEC" => "\xE9\x8E\xB3",		"\xC2\xED" => "\xE9\x8E\xAE",		"\xC2\xEE" => "\xE9\x8E\xAC",		"\xC2\xEF" => "\xE9\x8E\xB0",		"\xC2\xF0" => "\xE9\x8E\x98",		"\xC2\xF1" => "\xE9\x8E\x9A",		"\xC2\xF2" => "\xE9\x8E\x97",		"\xC2\xF3" => "\xE9\x97\x94",		"\xC2\xF4" => "\xE9\x97\x96",		"\xC2\xF5" => "\xE9\x97\x90",		"\xC2\xF6" => "\xE9\x97\x95",		"\xC2\xF7" => "\xE9\x9B\xA2",		"\xC2\xF8" => "\xE9\x9B\x9C",		"\xC2\xF9" => "\xE9\x9B\x99",		"\xC2\xFA" => "\xE9\x9B\x9B",		"\xC2\xFB" => "\xE9\x9B\x9E",		"\xC2\xFC" => "\xE9\x9C\xA4",		"\xC2\xFD" => "\xE9\x9E\xA3",		"\xC2\xFE" => "\xE9\x9E\xA6",		"\xC3\x40" => "\xE9\x9E\xAD",		"\xC3\x41" => "\xE9\x9F\xB9",		"\xC3\x42" => "\xE9\xA1\x8D",		"\xC3\x43" => "\xE9\xA1\x8F",		"\xC3\x44" => "\xE9\xA1\x8C",		"\xC3\x45" => "\xE9\xA1\x8E",		"\xC3\x46" => "\xE9\xA1\x93",		"\xC3\x47" => "\xE9\xA2\xBA",		"\xC3\x48" => "\xE9\xA4\xBE",		"\xC3\x49" => "\xE9\xA4\xBF",		"\xC3\x4A" => "\xE9\xA4\xBD",		"\xC3\x4B" => "\xE9\xA4\xAE",		"\xC3\x4C" => "\xE9\xA6\xA5",		"\xC3\x4D" => "\xE9\xA8\x8E",		"\xC3\x4E" => "\xE9\xAB\x81",		"\xC3\x4F" => "\xE9\xAC\x83",		"\xC3\x50" => "\xE9\xAC\x86",		"\xC3\x51" => "\xE9\xAD\x8F",		"\xC3\x52" => "\xE9\xAD\x8E",		"\xC3\x53" => "\xE9\xAD\x8D",		"\xC3\x54" => "\xE9\xAF\x8A",		"\xC3\x55" => "\xE9\xAF\x89",		"\xC3\x56" => "\xE9\xAF\xBD",		"\xC3\x57" => "\xE9\xAF\x88",		"\xC3\x58" => "\xE9\xAF\x80",		"\xC3\x59" => "\xE9\xB5\x91",		"\xC3\x5A" => "\xE9\xB5\x9D",		"\xC3\x5B" => "\xE9\xB5\xA0",		"\xC3\x5C" => "\xE9\xBB\xA0",		"\xC3\x5D" => "\xE9\xBC\x95",		"\xC3\x5E" => "\xE9\xBC\xAC",		"\xC3\x5F" => "\xE5\x84\xB3",		"\xC3\x60" => "\xE5\x9A\xA5",		"\xC3\x61" => "\xE5\xA3\x9E",		"\xC3\x62" => "\xE5\xA3\x9F",		"\xC3\x63" => "\xE5\xA3\xA2",		"\xC3\x64" => "\xE5\xAF\xB5",		"\xC3\x65" => "\xE9\xBE\x90",		"\xC3\x66" => "\xE5\xBB\xAC",		"\xC3\x67" => "\xE6\x87\xB2",		"\xC3\x68" => "\xE6\x87\xB7",		"\xC3\x69" => "\xE6\x87\xB6",		"\xC3\x6A" => "\xE6\x87\xB5",		"\xC3\x6B" => "\xE6\x94\x80",		"\xC3\x6C" => "\xE6\x94\x8F",		"\xC3\x6D" => "\xE6\x9B\xA0",		"\xC3\x6E" => "\xE6\x9B\x9D",		"\xC3\x6F" => "\xE6\xAB\xA5",		"\xC3\x70" => "\xE6\xAB\x9D",		"\xC3\x71" => "\xE6\xAB\x9A",		"\xC3\x72" => "\xE6\xAB\x93",		"\xC3\x73" => "\xE7\x80\x9B",		"\xC3\x74" => "\xE7\x80\x9F",		"\xC3\x75" => "\xE7\x80\xA8",		"\xC3\x76" => "\xE7\x80\x9A",		"\xC3\x77" => "\xE7\x80\x9D",		"\xC3\x78" => "\xE7\x80\x95",		"\xC3\x79" => "\xE7\x80\x98",		"\xC3\x7A" => "\xE7\x88\x86",		"\xC3\x7B" => "\xE7\x88\x8D",		"\xC3\x7C" => "\xE7\x89\x98",		"\xC3\x7D" => "\xE7\x8A\xA2",		"\xC3\x7E" => "\xE7\x8D\xB8",		"\xC3\xA1" => "\xE7\x8D\xBA",		"\xC3\xA2" => "\xE7\x92\xBD",		"\xC3\xA3" => "\xE7\x93\x8A",		"\xC3\xA4" => "\xE7\x93\xA3",		"\xC3\xA5" => "\xE7\x96\x87",		"\xC3\xA6" => "\xE7\x96\x86",		"\xC3\xA7" => "\xE7\x99\x9F",		"\xC3\xA8" => "\xE7\x99\xA1",		"\xC3\xA9" => "\xE7\x9F\x87",		"\xC3\xAA" => "\xE7\xA4\x99",		"\xC3\xAB" => "\xE7\xA6\xB1",		"\xC3\xAC" => "\xE7\xA9\xAB",		"\xC3\xAD" => "\xE7\xA9\xA9",		"\xC3\xAE" => "\xE7\xB0\xBE",		"\xC3\xAF" => "\xE7\xB0\xBF",		"\xC3\xB0" => "\xE7\xB0\xB8",		"\xC3\xB1" => "\xE7\xB0\xBD",		"\xC3\xB2" => "\xE7\xB0\xB7",		"\xC3\xB3" => "\xE7\xB1\x80",		"\xC3\xB4" => "\xE7\xB9\xAB",		"\xC3\xB5" => "\xE7\xB9\xAD",		"\xC3\xB6" => "\xE7\xB9\xB9",		"\xC3\xB7" => "\xE7\xB9\xA9",		"\xC3\xB8" => "\xE7\xB9\xAA",		"\xC3\xB9" => "\xE7\xBE\x85",		"\xC3\xBA" => "\xE7\xB9\xB3",		"\xC3\xBB" => "\xE7\xBE\xB6",		"\xC3\xBC" => "\xE7\xBE\xB9",		"\xC3\xBD" => "\xE7\xBE\xB8",		"\xC3\xBE" => "\xE8\x87\x98",		"\xC3\xBF" => "\xE8\x97\xA9",		"\xC3\xC0" => "\xE8\x97\x9D",		"\xC3\xC1" => "\xE8\x97\xAA",		"\xC3\xC2" => "\xE8\x97\x95",		"\xC3\xC3" => "\xE8\x97\xA4",		"\xC3\xC4" => "\xE8\x97\xA5",		"\xC3\xC5" => "\xE8\x97\xB7",		"\xC3\xC6" => "\xE8\x9F\xBB",		"\xC3\xC7" => "\xE8\xA0\x85",		"\xC3\xC8" => "\xE8\xA0\x8D",		"\xC3\xC9" => "\xE8\x9F\xB9",		"\xC3\xCA" => "\xE8\x9F\xBE",		"\xC3\xCB" => "\xE8\xA5\xA0",		"\xC3\xCC" => "\xE8\xA5\x9F",		"\xC3\xCD" => "\xE8\xA5\x96",		"\xC3\xCE" => "\xE8\xA5\x9E",		"\xC3\xCF" => "\xE8\xAD\x81",		"\xC3\xD0" => "\xE8\xAD\x9C",		"\xC3\xD1" => "\xE8\xAD\x98",		"\xC3\xD2" => "\xE8\xAD\x89",		"\xC3\xD3" => "\xE8\xAD\x9A",		"\xC3\xD4" => "\xE8\xAD\x8E",		"\xC3\xD5" => "\xE8\xAD\x8F",		"\xC3\xD6" => "\xE8\xAD\x86",		"\xC3\xD7" => "\xE8\xAD\x99",		"\xC3\xD8" => "\xE8\xB4\x88",		"\xC3\xD9" => "\xE8\xB4\x8A",		"\xC3\xDA" => "\xE8\xB9\xBC",		"\xC3\xDB" => "\xE8\xB9\xB2",		"\xC3\xDC" => "\xE8\xBA\x87",		"\xC3\xDD" => "\xE8\xB9\xB6",		"\xC3\xDE" => "\xE8\xB9\xAC",		"\xC3\xDF" => "\xE8\xB9\xBA",		"\xC3\xE0" => "\xE8\xB9\xB4",		"\xC3\xE1" => "\xE8\xBD\x94",		"\xC3\xE2" => "\xE8\xBD\x8E",		"\xC3\xE3" => "\xE8\xBE\xAD",		"\xC3\xE4" => "\xE9\x82\x8A",		"\xC3\xE5" => "\xE9\x82\x8B",		"\xC3\xE6" => "\xE9\x86\xB1",		"\xC3\xE7" => "\xE9\x86\xAE",		"\xC3\xE8" => "\xE9\x8F\xA1",		"\xC3\xE9" => "\xE9\x8F\x91",		"\xC3\xEA" => "\xE9\x8F\x9F",		"\xC3\xEB" => "\xE9\x8F\x83",		"\xC3\xEC" => "\xE9\x8F\x88",		"\xC3\xED" => "\xE9\x8F\x9C",		"\xC3\xEE" => "\xE9\x8F\x9D",		"\xC3\xEF" => "\xE9\x8F\x96",		"\xC3\xF0" => "\xE9\x8F\xA2",		"\xC3\xF1" => "\xE9\x8F\x8D",		"\xC3\xF2" => "\xE9\x8F\x98",		"\xC3\xF3" => "\xE9\x8F\xA4",		"\xC3\xF4" => "\xE9\x8F\x97",		"\xC3\xF5" => "\xE9\x8F\xA8",		"\xC3\xF6" => "\xE9\x97\x9C",		"\xC3\xF7" => "\xE9\x9A\xB4",		"\xC3\xF8" => "\xE9\x9B\xA3",		"\xC3\xF9" => "\xE9\x9C\xAA",		"\xC3\xFA" => "\xE9\x9C\xA7",		"\xC3\xFB" => "\xE9\x9D\xA1",		"\xC3\xFC" => "\xE9\x9F\x9C",		"\xC3\xFD" => "\xE9\x9F\xBB",		"\xC3\xFE" => "\xE9\xA1\x9E",		"\xC4\x40" => "\xE9\xA1\x98",		"\xC4\x41" => "\xE9\xA1\x9B",		"\xC4\x42" => "\xE9\xA2\xBC",		"\xC4\x43" => "\xE9\xA5\x85",		"\xC4\x44" => "\xE9\xA5\x89",		"\xC4\x45" => "\xE9\xA8\x96",		"\xC4\x46" => "\xE9\xA8\x99",		"\xC4\x47" => "\xE9\xAC\x8D",		"\xC4\x48" => "\xE9\xAF\xA8",		"\xC4\x49" => "\xE9\xAF\xA7",		"\xC4\x4A" => "\xE9\xAF\x96",		"\xC4\x4B" => "\xE9\xAF\x9B",		"\xC4\x4C" => "\xE9\xB6\x89",		"\xC4\x4D" => "\xE9\xB5\xA1",		"\xC4\x4E" => "\xE9\xB5\xB2",		"\xC4\x4F" => "\xE9\xB5\xAA",		"\xC4\x50" => "\xE9\xB5\xAC",		"\xC4\x51" => "\xE9\xBA\x92",		"\xC4\x52" => "\xE9\xBA\x97",		"\xC4\x53" => "\xE9\xBA\x93",		"\xC4\x54" => "\xE9\xBA\xB4",		"\xC4\x55" => "\xE5\x8B\xB8",		"\xC4\x56" => "\xE5\x9A\xA8",		"\xC4\x57" => "\xE5\x9A\xB7",		"\xC4\x58" => "\xE5\x9A\xB6",		"\xC4\x59" => "\xE5\x9A\xB4",		"\xC4\x5A" => "\xE5\x9A\xBC",		"\xC4\x5B" => "\xE5\xA3\xA4",		"\xC4\x5C" => "\xE5\xAD\x80",		"\xC4\x5D" => "\xE5\xAD\x83",		"\xC4\x5E" => "\xE5\xAD\xBD",		"\xC4\x5F" => "\xE5\xAF\xB6",		"\xC4\x60" => "\xE5\xB7\x89",		"\xC4\x61" => "\xE6\x87\xB8",		"\xC4\x62" => "\xE6\x87\xBA",		"\xC4\x63" => "\xE6\x94\x98",		"\xC4\x64" => "\xE6\x94\x94",		"\xC4\x65" => "\xE6\x94\x99",		"\xC4\x66" => "\xE6\x9B\xA6",		"\xC4\x67" => "\xE6\x9C\xA7",		"\xC4\x68" => "\xE6\xAB\xAC",		"\xC4\x69" => "\xE7\x80\xBE",		"\xC4\x6A" => "\xE7\x80\xB0",		"\xC4\x6B" => "\xE7\x80\xB2",		"\xC4\x6C" => "\xE7\x88\x90",		"\xC4\x6D" => "\xE7\x8D\xBB",		"\xC4\x6E" => "\xE7\x93\x8F",		"\xC4\x6F" => "\xE7\x99\xA2",		"\xC4\x70" => "\xE7\x99\xA5",		"\xC4\x71" => "\xE7\xA4\xA6",		"\xC4\x72" => "\xE7\xA4\xAA",		"\xC4\x73" => "\xE7\xA4\xAC",		"\xC4\x74" => "\xE7\xA4\xAB",		"\xC4\x75" => "\xE7\xAB\x87",		"\xC4\x76" => "\xE7\xAB\xB6",		"\xC4\x77" => "\xE7\xB1\x8C",		"\xC4\x78" => "\xE7\xB1\x83",		"\xC4\x79" => "\xE7\xB1\x8D",		"\xC4\x7A" => "\xE7\xB3\xAF",		"\xC4\x7B" => "\xE7\xB3\xB0",		"\xC4\x7C" => "\xE8\xBE\xAE",		"\xC4\x7D" => "\xE7\xB9\xBD",		"\xC4\x7E" => "\xE7\xB9\xBC",		"\xC4\xA1" => "\xE7\xBA\x82",		"\xC4\xA2" => "\xE7\xBD\x8C",		"\xC4\xA3" => "\xE8\x80\x80",		"\xC4\xA4" => "\xE8\x87\x9A",		"\xC4\xA5" => "\xE8\x89\xA6",		"\xC4\xA6" => "\xE8\x97\xBB",		"\xC4\xA7" => "\xE8\x97\xB9",		"\xC4\xA8" => "\xE8\x98\x91",		"\xC4\xA9" => "\xE8\x97\xBA",		"\xC4\xAA" => "\xE8\x98\x86",		"\xC4\xAB" => "\xE8\x98\x8B",		"\xC4\xAC" => "\xE8\x98\x87",		"\xC4\xAD" => "\xE8\x98\x8A",		"\xC4\xAE" => "\xE8\xA0\x94",		"\xC4\xAF" => "\xE8\xA0\x95",		"\xC4\xB0" => "\xE8\xA5\xA4",		"\xC4\xB1" => "\xE8\xA6\xBA",		"\xC4\xB2" => "\xE8\xA7\xB8",		"\xC4\xB3" => "\xE8\xAD\xB0",		"\xC4\xB4" => "\xE8\xAD\xAC",		"\xC4\xB5" => "\xE8\xAD\xA6",		"\xC4\xB6" => "\xE8\xAD\xAF",		"\xC4\xB7" => "\xE8\xAD\x9F",		"\xC4\xB8" => "\xE8\xAD\xAB",		"\xC4\xB9" => "\xE8\xB4\x8F",		"\xC4\xBA" => "\xE8\xB4\x8D",		"\xC4\xBB" => "\xE8\xBA\x89",		"\xC4\xBC" => "\xE8\xBA\x81",		"\xC4\xBD" => "\xE8\xBA\x85",		"\xC4\xBE" => "\xE8\xBA\x82",		"\xC4\xBF" => "\xE9\x86\xB4",		"\xC4\xC0" => "\xE9\x87\x8B",		"\xC4\xC1" => "\xE9\x90\x98",		"\xC4\xC2" => "\xE9\x90\x83",		"\xC4\xC3" => "\xE9\x8F\xBD",		"\xC4\xC4" => "\xE9\x97\xA1",		"\xC4\xC5" => "\xE9\x9C\xB0",		"\xC4\xC6" => "\xE9\xA3\x84",		"\xC4\xC7" => "\xE9\xA5\x92",		"\xC4\xC8" => "\xE9\xA5\x91",		"\xC4\xC9" => "\xE9\xA6\xA8",		"\xC4\xCA" => "\xE9\xA8\xAB",		"\xC4\xCB" => "\xE9\xA8\xB0",		"\xC4\xCC" => "\xE9\xA8\xB7",		"\xC4\xCD" => "\xE9\xA8\xB5",		"\xC4\xCE" => "\xE9\xB0\x93",		"\xC4\xCF" => "\xE9\xB0\x8D",		"\xC4\xD0" => "\xE9\xB9\xB9",		"\xC4\xD1" => "\xE9\xBA\xB5",		"\xC4\xD2" => "\xE9\xBB\xA8",		"\xC4\xD3" => "\xE9\xBC\xAF",		"\xC4\xD4" => "\xE9\xBD\x9F",		"\xC4\xD5" => "\xE9\xBD\xA3",		"\xC4\xD6" => "\xE9\xBD\xA1",		"\xC4\xD7" => "\xE5\x84\xB7",		"\xC4\xD8" => "\xE5\x84\xB8",		"\xC4\xD9" => "\xE5\x9B\x81",		"\xC4\xDA" => "\xE5\x9B\x80",		"\xC4\xDB" => "\xE5\x9B\x82",		"\xC4\xDC" => "\xE5\xA4\x94",		"\xC4\xDD" => "\xE5\xB1\xAC",		"\xC4\xDE" => "\xE5\xB7\x8D",		"\xC4\xDF" => "\xE6\x87\xBC",		"\xC4\xE0" => "\xE6\x87\xBE",		"\xC4\xE1" => "\xE6\x94\x9D",		"\xC4\xE2" => "\xE6\x94\x9C",		"\xC4\xE3" => "\xE6\x96\x95",		"\xC4\xE4" => "\xE6\x9B\xA9",		"\xC4\xE5" => "\xE6\xAB\xBB",		"\xC4\xE6" => "\xE6\xAC\x84",		"\xC4\xE7" => "\xE6\xAB\xBA",		"\xC4\xE8" => "\xE6\xAE\xB2",		"\xC4\xE9" => "\xE7\x81\x8C",		"\xC4\xEA" => "\xE7\x88\x9B",		"\xC4\xEB" => "\xE7\x8A\xA7",		"\xC4\xEC" => "\xE7\x93\x96",		"\xC4\xED" => "\xE7\x93\x94",		"\xC4\xEE" => "\xE7\x99\xA9",		"\xC4\xEF" => "\xE7\x9F\x93",		"\xC4\xF0" => "\xE7\xB1\x90",		"\xC4\xF1" => "\xE7\xBA\x8F",		"\xC4\xF2" => "\xE7\xBA\x8C",		"\xC4\xF3" => "\xE7\xBE\xBC",		"\xC4\xF4" => "\xE8\x98\x97",		"\xC4\xF5" => "\xE8\x98\xAD",		"\xC4\xF6" => "\xE8\x98\x9A",		"\xC4\xF7" => "\xE8\xA0\xA3",		"\xC4\xF8" => "\xE8\xA0\xA2",		"\xC4\xF9" => "\xE8\xA0\xA1",		"\xC4\xFA" => "\xE8\xA0\x9F",		"\xC4\xFB" => "\xE8\xA5\xAA",		"\xC4\xFC" => "\xE8\xA5\xAC",		"\xC4\xFD" => "\xE8\xA6\xBD",		"\xC4\xFE" => "\xE8\xAD\xB4",		"\xC5\x40" => "\xE8\xAD\xB7",		"\xC5\x41" => "\xE8\xAD\xBD",		"\xC5\x42" => "\xE8\xB4\x93",		"\xC5\x43" => "\xE8\xBA\x8A",		"\xC5\x44" => "\xE8\xBA\x8D",		"\xC5\x45" => "\xE8\xBA\x8B",		"\xC5\x46" => "\xE8\xBD\x9F",		"\xC5\x47" => "\xE8\xBE\xAF",		"\xC5\x48" => "\xE9\x86\xBA",		"\xC5\x49" => "\xE9\x90\xAE",		"\xC5\x4A" => "\xE9\x90\xB3",		"\xC5\x4B" => "\xE9\x90\xB5",		"\xC5\x4C" => "\xE9\x90\xBA",		"\xC5\x4D" => "\xE9\x90\xB8",		"\xC5\x4E" => "\xE9\x90\xB2",		"\xC5\x4F" => "\xE9\x90\xAB",		"\xC5\x50" => "\xE9\x97\xA2",		"\xC5\x51" => "\xE9\x9C\xB8",		"\xC5\x52" => "\xE9\x9C\xB9",		"\xC5\x53" => "\xE9\x9C\xB2",		"\xC5\x54" => "\xE9\x9F\xBF",		"\xC5\x55" => "\xE9\xA1\xA7",		"\xC5\x56" => "\xE9\xA1\xA5",		"\xC5\x57" => "\xE9\xA5\x97",		"\xC5\x58" => "\xE9\xA9\x85",		"\xC5\x59" => "\xE9\xA9\x83",		"\xC5\x5A" => "\xE9\xA9\x80",		"\xC5\x5B" => "\xE9\xA8\xBE",		"\xC5\x5C" => "\xE9\xAB\x8F",		"\xC5\x5D" => "\xE9\xAD\x94",		"\xC5\x5E" => "\xE9\xAD\x91",		"\xC5\x5F" => "\xE9\xB0\xAD",		"\xC5\x60" => "\xE9\xB0\xA5",		"\xC5\x61" => "\xE9\xB6\xAF",		"\xC5\x62" => "\xE9\xB6\xB4",		"\xC5\x63" => "\xE9\xB7\x82",		"\xC5\x64" => "\xE9\xB6\xB8",		"\xC5\x65" => "\xE9\xBA\x9D",		"\xC5\x66" => "\xE9\xBB\xAF",		"\xC5\x67" => "\xE9\xBC\x99",		"\xC5\x68" => "\xE9\xBD\x9C",		"\xC5\x69" => "\xE9\xBD\xA6",		"\xC5\x6A" => "\xE9\xBD\xA7",		"\xC5\x6B" => "\xE5\x84\xBC",		"\xC5\x6C" => "\xE5\x84\xBB",		"\xC5\x6D" => "\xE5\x9B\x88",		"\xC5\x6E" => "\xE5\x9B\x8A",		"\xC5\x6F" => "\xE5\x9B\x89",		"\xC5\x70" => "\xE5\xAD\xBF",		"\xC5\x71" => "\xE5\xB7\x94",		"\xC5\x72" => "\xE5\xB7\x92",		"\xC5\x73" => "\xE5\xBD\x8E",		"\xC5\x74" => "\xE6\x87\xBF",		"\xC5\x75" => "\xE6\x94\xA4",		"\xC5\x76" => "\xE6\xAC\x8A",		"\xC5\x77" => "\xE6\xAD\xA1",		"\xC5\x78" => "\xE7\x81\x91",		"\xC5\x79" => "\xE7\x81\x98",		"\xC5\x7A" => "\xE7\x8E\x80",		"\xC5\x7B" => "\xE7\x93\xA4",		"\xC5\x7C" => "\xE7\x96\x8A",		"\xC5\x7D" => "\xE7\x99\xAE",		"\xC5\x7E" => "\xE7\x99\xAC",		"\xC5\xA1" => "\xE7\xA6\xB3",		"\xC5\xA2" => "\xE7\xB1\xA0",		"\xC5\xA3" => "\xE7\xB1\x9F",		"\xC5\xA4" => "\xE8\x81\xBE",		"\xC5\xA5" => "\xE8\x81\xBD",		"\xC5\xA6" => "\xE8\x87\x9F",		"\xC5\xA7" => "\xE8\xA5\xB2",		"\xC5\xA8" => "\xE8\xA5\xAF",		"\xC5\xA9" => "\xE8\xA7\xBC",		"\xC5\xAA" => "\xE8\xAE\x80",		"\xC5\xAB" => "\xE8\xB4\x96",		"\xC5\xAC" => "\xE8\xB4\x97",		"\xC5\xAD" => "\xE8\xBA\x91",		"\xC5\xAE" => "\xE8\xBA\x93",		"\xC5\xAF" => "\xE8\xBD\xA1",		"\xC5\xB0" => "\xE9\x85\x88",		"\xC5\xB1" => "\xE9\x91\x84",		"\xC5\xB2" => "\xE9\x91\x91",		"\xC5\xB3" => "\xE9\x91\x92",		"\xC5\xB4" => "\xE9\x9C\xBD",		"\xC5\xB5" => "\xE9\x9C\xBE",		"\xC5\xB6" => "\xE9\x9F\x83",		"\xC5\xB7" => "\xE9\x9F\x81",		"\xC5\xB8" => "\xE9\xA1\xAB",		"\xC5\xB9" => "\xE9\xA5\x95",		"\xC5\xBA" => "\xE9\xA9\x95",		"\xC5\xBB" => "\xE9\xA9\x8D",		"\xC5\xBC" => "\xE9\xAB\x92",		"\xC5\xBD" => "\xE9\xAC\x9A",		"\xC5\xBE" => "\xE9\xB1\x89",		"\xC5\xBF" => "\xE9\xB0\xB1",		"\xC5\xC0" => "\xE9\xB0\xBE",		"\xC5\xC1" => "\xE9\xB0\xBB",		"\xC5\xC2" => "\xE9\xB7\x93",		"\xC5\xC3" => "\xE9\xB7\x97",		"\xC5\xC4" => "\xE9\xBC\xB4",		"\xC5\xC5" => "\xE9\xBD\xAC",		"\xC5\xC6" => "\xE9\xBD\xAA",		"\xC5\xC7" => "\xE9\xBE\x94",		"\xC5\xC8" => "\xE5\x9B\x8C",		"\xC5\xC9" => "\xE5\xB7\x96",		"\xC5\xCA" => "\xE6\x88\x80",		"\xC5\xCB" => "\xE6\x94\xA3",		"\xC5\xCC" => "\xE6\x94\xAB",		"\xC5\xCD" => "\xE6\x94\xAA",		"\xC5\xCE" => "\xE6\x9B\xAC",		"\xC5\xCF" => "\xE6\xAC\x90",		"\xC5\xD0" => "\xE7\x93\x9A",		"\xC5\xD1" => "\xE7\xAB\x8A",		"\xC5\xD2" => "\xE7\xB1\xA4",		"\xC5\xD3" => "\xE7\xB1\xA3",		"\xC5\xD4" => "\xE7\xB1\xA5",		"\xC5\xD5" => "\xE7\xBA\x93",		"\xC5\xD6" => "\xE7\xBA\x96",		"\xC5\xD7" => "\xE7\xBA\x94",		"\xC5\xD8" => "\xE8\x87\xA2",		"\xC5\xD9" => "\xE8\x98\xB8",		"\xC5\xDA" => "\xE8\x98\xBF",		"\xC5\xDB" => "\xE8\xA0\xB1",		"\xC5\xDC" => "\xE8\xAE\x8A",		"\xC5\xDD" => "\xE9\x82\x90",		"\xC5\xDE" => "\xE9\x82\x8F",		"\xC5\xDF" => "\xE9\x91\xA3",		"\xC5\xE0" => "\xE9\x91\xA0",		"\xC5\xE1" => "\xE9\x91\xA4",		"\xC5\xE2" => "\xE9\x9D\xA8",		"\xC5\xE3" => "\xE9\xA1\xAF",		"\xC5\xE4" => "\xE9\xA5\x9C",		"\xC5\xE5" => "\xE9\xA9\x9A",		"\xC5\xE6" => "\xE9\xA9\x9B",		"\xC5\xE7" => "\xE9\xA9\x97",		"\xC5\xE8" => "\xE9\xAB\x93",		"\xC5\xE9" => "\xE9\xAB\x94",		"\xC5\xEA" => "\xE9\xAB\x91",		"\xC5\xEB" => "\xE9\xB1\x94",		"\xC5\xEC" => "\xE9\xB1\x97",		"\xC5\xED" => "\xE9\xB1\x96",		"\xC5\xEE" => "\xE9\xB7\xA5",		"\xC5\xEF" => "\xE9\xBA\x9F",		"\xC5\xF0" => "\xE9\xBB\xB4",		"\xC5\xF1" => "\xE5\x9B\x91",		"\xC5\xF2" => "\xE5\xA3\xA9",		"\xC5\xF3" => "\xE6\x94\xAC",		"\xC5\xF4" => "\xE7\x81\x9E",		"\xC5\xF5" => "\xE7\x99\xB1",		"\xC5\xF6" => "\xE7\x99\xB2",		"\xC5\xF7" => "\xE7\x9F\x97",		"\xC5\xF8" => "\xE7\xBD\x90",		"\xC5\xF9" => "\xE7\xBE\x88",		"\xC5\xFA" => "\xE8\xA0\xB6",		"\xC5\xFB" => "\xE8\xA0\xB9",		"\xC5\xFC" => "\xE8\xA1\xA2",		"\xC5\xFD" => "\xE8\xAE\x93",		"\xC5\xFE" => "\xE8\xAE\x92",		"\xC6\x40" => "\xE8\xAE\x96",		"\xC6\x41" => "\xE8\x89\xB7",		"\xC6\x42" => "\xE8\xB4\x9B",		"\xC6\x43" => "\xE9\x87\x80",		"\xC6\x44" => "\xE9\x91\xAA",		"\xC6\x45" => "\xE9\x9D\x82",		"\xC6\x46" => "\xE9\x9D\x88",		"\xC6\x47" => "\xE9\x9D\x84",		"\xC6\x48" => "\xE9\x9F\x86",		"\xC6\x49" => "\xE9\xA1\xB0",		"\xC6\x4A" => "\xE9\xA9\x9F",		"\xC6\x4B" => "\xE9\xAC\xA2",		"\xC6\x4C" => "\xE9\xAD\x98",		"\xC6\x4D" => "\xE9\xB1\x9F",		"\xC6\x4E" => "\xE9\xB7\xB9",		"\xC6\x4F" => "\xE9\xB7\xBA",		"\xC6\x50" => "\xE9\xB9\xBC",		"\xC6\x51" => "\xE9\xB9\xBD",		"\xC6\x52" => "\xE9\xBC\x87",		"\xC6\x53" => "\xE9\xBD\xB7",		"\xC6\x54" => "\xE9\xBD\xB2",		"\xC6\x55" => "\xE5\xBB\xB3",		"\xC6\x56" => "\xE6\xAC\x96",		"\xC6\x57" => "\xE7\x81\xA3",		"\xC6\x58" => "\xE7\xB1\xAC",		"\xC6\x59" => "\xE7\xB1\xAE",		"\xC6\x5A" => "\xE8\xA0\xBB",		"\xC6\x5B" => "\xE8\xA7\x80",		"\xC6\x5C" => "\xE8\xBA\xA1",		"\xC6\x5D" => "\xE9\x87\x81",		"\xC6\x5E" => "\xE9\x91\xB2",		"\xC6\x5F" => "\xE9\x91\xB0",		"\xC6\x60" => "\xE9\xA1\xB1",		"\xC6\x61" => "\xE9\xA5\x9E",		"\xC6\x62" => "\xE9\xAB\x96",		"\xC6\x63" => "\xE9\xAC\xA3",		"\xC6\x64" => "\xE9\xBB\x8C",		"\xC6\x65" => "\xE7\x81\xA4",		"\xC6\x66" => "\xE7\x9F\x9A",		"\xC6\x67" => "\xE8\xAE\x9A",		"\xC6\x68" => "\xE9\x91\xB7",		"\xC6\x69" => "\xE9\x9F\x89",		"\xC6\x6A" => "\xE9\xA9\xA2",		"\xC6\x6B" => "\xE9\xA9\xA5",		"\xC6\x6C" => "\xE7\xBA\x9C",		"\xC6\x6D" => "\xE8\xAE\x9C",		"\xC6\x6E" => "\xE8\xBA\xAA",		"\xC6\x6F" => "\xE9\x87\x85",		"\xC6\x70" => "\xE9\x91\xBD",		"\xC6\x71" => "\xE9\x91\xBE",		"\xC6\x72" => "\xE9\x91\xBC",		"\xC6\x73" => "\xE9\xB1\xB7",		"\xC6\x74" => "\xE9\xB1\xB8",		"\xC6\x75" => "\xE9\xBB\xB7",		"\xC6\x76" => "\xE8\xB1\x94",		"\xC6\x77" => "\xE9\x91\xBF",		"\xC6\x78" => "\xE9\xB8\x9A",		"\xC6\x79" => "\xE7\x88\xA8",		"\xC6\x7A" => "\xE9\xA9\xAA",		"\xC6\x7B" => "\xE9\xAC\xB1",		"\xC6\x7C" => "\xE9\xB8\x9B",		"\xC6\x7D" => "\xE9\xB8\x9E",		"\xC6\x7E" => "\xE7\xB1\xB2",		"\xC6\xA1" => "\xE3\x83\xBE",		"\xC6\xA2" => "\xE3\x82\x9D",		"\xC6\xA3" => "\xE3\x82\x9E",		"\xC6\xA4" => "\xE3\x80\x85",		"\xC6\xA5" => "\xE3\x81\x81",		"\xC6\xA6" => "\xE3\x81\x82",		"\xC6\xA7" => "\xE3\x81\x83",		"\xC6\xA8" => "\xE3\x81\x84",		"\xC6\xA9" => "\xE3\x81\x85",		"\xC6\xAA" => "\xE3\x81\x86",		"\xC6\xAB" => "\xE3\x81\x87",		"\xC6\xAC" => "\xE3\x81\x88",		"\xC6\xAD" => "\xE3\x81\x89",		"\xC6\xAE" => "\xE3\x81\x8A",		"\xC6\xAF" => "\xE3\x81\x8B",		"\xC6\xB0" => "\xE3\x81\x8C",		"\xC6\xB1" => "\xE3\x81\x8D",		"\xC6\xB2" => "\xE3\x81\x8E",		"\xC6\xB3" => "\xE3\x81\x8F",		"\xC6\xB4" => "\xE3\x81\x90",		"\xC6\xB5" => "\xE3\x81\x91",		"\xC6\xB6" => "\xE3\x81\x92",		"\xC6\xB7" => "\xE3\x81\x93",		"\xC6\xB8" => "\xE3\x81\x94",		"\xC6\xB9" => "\xE3\x81\x95",		"\xC6\xBA" => "\xE3\x81\x96",		"\xC6\xBB" => "\xE3\x81\x97",		"\xC6\xBC" => "\xE3\x81\x98",		"\xC6\xBD" => "\xE3\x81\x99",		"\xC6\xBE" => "\xE3\x81\x9A",		"\xC6\xBF" => "\xE3\x81\x9B",		"\xC6\xC0" => "\xE3\x81\x9C",		"\xC6\xC1" => "\xE3\x81\x9D",		"\xC6\xC2" => "\xE3\x81\x9E",		"\xC6\xC3" => "\xE3\x81\x9F",		"\xC6\xC4" => "\xE3\x81\xA0",		"\xC6\xC5" => "\xE3\x81\xA1",		"\xC6\xC6" => "\xE3\x81\xA2",		"\xC6\xC7" => "\xE3\x81\xA3",		"\xC6\xC8" => "\xE3\x81\xA4",		"\xC6\xC9" => "\xE3\x81\xA5",		"\xC6\xCA" => "\xE3\x81\xA6",		"\xC6\xCB" => "\xE3\x81\xA7",		"\xC6\xCC" => "\xE3\x81\xA8",		"\xC6\xCD" => "\xE3\x81\xA9",		"\xC6\xCE" => "\xE3\x81\xAA",		"\xC6\xCF" => "\xE3\x81\xAB",		"\xC6\xD0" => "\xE3\x81\xAC",		"\xC6\xD1" => "\xE3\x81\xAD",		"\xC6\xD2" => "\xE3\x81\xAE",		"\xC6\xD3" => "\xE3\x81\xAF",		"\xC6\xD4" => "\xE3\x81\xB0",		"\xC6\xD5" => "\xE3\x81\xB1",		"\xC6\xD6" => "\xE3\x81\xB2",		"\xC6\xD7" => "\xE3\x81\xB3",		"\xC6\xD8" => "\xE3\x81\xB4",		"\xC6\xD9" => "\xE3\x81\xB5",		"\xC6\xDA" => "\xE3\x81\xB6",		"\xC6\xDB" => "\xE3\x81\xB7",		"\xC6\xDC" => "\xE3\x81\xB8",		"\xC6\xDD" => "\xE3\x81\xB9",		"\xC6\xDE" => "\xE3\x81\xBA",		"\xC6\xDF" => "\xE3\x81\xBB",		"\xC6\xE0" => "\xE3\x81\xBC",		"\xC6\xE1" => "\xE3\x81\xBD",		"\xC6\xE2" => "\xE3\x81\xBE",		"\xC6\xE3" => "\xE3\x81\xBF",		"\xC6\xE4" => "\xE3\x82\x80",		"\xC6\xE5" => "\xE3\x82\x81",		"\xC6\xE6" => "\xE3\x82\x82",		"\xC6\xE7" => "\xE3\x82\x83",		"\xC6\xE8" => "\xE3\x82\x84",		"\xC6\xE9" => "\xE3\x82\x85",		"\xC6\xEA" => "\xE3\x82\x86",		"\xC6\xEB" => "\xE3\x82\x87",		"\xC6\xEC" => "\xE3\x82\x88",		"\xC6\xED" => "\xE3\x82\x89",		"\xC6\xEE" => "\xE3\x82\x8A",		"\xC6\xEF" => "\xE3\x82\x8B",		"\xC6\xF0" => "\xE3\x82\x8C",		"\xC6\xF1" => "\xE3\x82\x8D",		"\xC6\xF2" => "\xE3\x82\x8E",		"\xC6\xF3" => "\xE3\x82\x8F",		"\xC6\xF4" => "\xE3\x82\x90",		"\xC6\xF5" => "\xE3\x82\x91",		"\xC6\xF6" => "\xE3\x82\x92",		"\xC6\xF7" => "\xE3\x82\x93",		"\xC6\xF8" => "\xE3\x82\xA1",		"\xC6\xF9" => "\xE3\x82\xA2",		"\xC6\xFA" => "\xE3\x82\xA3",		"\xC6\xFB" => "\xE3\x82\xA4",		"\xC6\xFC" => "\xE3\x82\xA5",		"\xC6\xFD" => "\xE3\x82\xA6",		"\xC6\xFE" => "\xE3\x82\xA7",		"\xC7\x40" => "\xE3\x82\xA8",		"\xC7\x41" => "\xE3\x82\xA9",		"\xC7\x42" => "\xE3\x82\xAA",		"\xC7\x43" => "\xE3\x82\xAB",		"\xC7\x44" => "\xE3\x82\xAC",		"\xC7\x45" => "\xE3\x82\xAD",		"\xC7\x46" => "\xE3\x82\xAE",		"\xC7\x47" => "\xE3\x82\xAF",		"\xC7\x48" => "\xE3\x82\xB0",		"\xC7\x49" => "\xE3\x82\xB1",		"\xC7\x4A" => "\xE3\x82\xB2",		"\xC7\x4B" => "\xE3\x82\xB3",		"\xC7\x4C" => "\xE3\x82\xB4",		"\xC7\x4D" => "\xE3\x82\xB5",		"\xC7\x4E" => "\xE3\x82\xB6",		"\xC7\x4F" => "\xE3\x82\xB7",		"\xC7\x50" => "\xE3\x82\xB8",		"\xC7\x51" => "\xE3\x82\xB9",		"\xC7\x52" => "\xE3\x82\xBA",		"\xC7\x53" => "\xE3\x82\xBB",		"\xC7\x54" => "\xE3\x82\xBC",		"\xC7\x55" => "\xE3\x82\xBD",		"\xC7\x56" => "\xE3\x82\xBE",		"\xC7\x57" => "\xE3\x82\xBF",		"\xC7\x58" => "\xE3\x83\x80",		"\xC7\x59" => "\xE3\x83\x81",		"\xC7\x5A" => "\xE3\x83\x82",		"\xC7\x5B" => "\xE3\x83\x83",		"\xC7\x5C" => "\xE3\x83\x84",		"\xC7\x5D" => "\xE3\x83\x85",		"\xC7\x5E" => "\xE3\x83\x86",		"\xC7\x5F" => "\xE3\x83\x87",		"\xC7\x60" => "\xE3\x83\x88",		"\xC7\x61" => "\xE3\x83\x89",		"\xC7\x62" => "\xE3\x83\x8A",		"\xC7\x63" => "\xE3\x83\x8B",		"\xC7\x64" => "\xE3\x83\x8C",		"\xC7\x65" => "\xE3\x83\x8D",		"\xC7\x66" => "\xE3\x83\x8E",		"\xC7\x67" => "\xE3\x83\x8F",		"\xC7\x68" => "\xE3\x83\x90",		"\xC7\x69" => "\xE3\x83\x91",		"\xC7\x6A" => "\xE3\x83\x92",		"\xC7\x6B" => "\xE3\x83\x93",		"\xC7\x6C" => "\xE3\x83\x94",		"\xC7\x6D" => "\xE3\x83\x95",		"\xC7\x6E" => "\xE3\x83\x96",		"\xC7\x6F" => "\xE3\x83\x97",		"\xC7\x70" => "\xE3\x83\x98",		"\xC7\x71" => "\xE3\x83\x99",		"\xC7\x72" => "\xE3\x83\x9A",		"\xC7\x73" => "\xE3\x83\x9B",		"\xC7\x74" => "\xE3\x83\x9C",		"\xC7\x75" => "\xE3\x83\x9D",		"\xC7\x76" => "\xE3\x83\x9E",		"\xC7\x77" => "\xE3\x83\x9F",		"\xC7\x78" => "\xE3\x83\xA0",		"\xC7\x79" => "\xE3\x83\xA1",		"\xC7\x7A" => "\xE3\x83\xA2",		"\xC7\x7B" => "\xE3\x83\xA3",		"\xC7\x7C" => "\xE3\x83\xA4",		"\xC7\x7D" => "\xE3\x83\xA5",		"\xC7\x7E" => "\xE3\x83\xA6",		"\xC7\xA1" => "\xE3\x83\xA7",		"\xC7\xA2" => "\xE3\x83\xA8",		"\xC7\xA3" => "\xE3\x83\xA9",		"\xC7\xA4" => "\xE3\x83\xAA",		"\xC7\xA5" => "\xE3\x83\xAB",		"\xC7\xA6" => "\xE3\x83\xAC",		"\xC7\xA7" => "\xE3\x83\xAD",		"\xC7\xA8" => "\xE3\x83\xAE",		"\xC7\xA9" => "\xE3\x83\xAF",		"\xC7\xAA" => "\xE3\x83\xB0",		"\xC7\xAB" => "\xE3\x83\xB1",		"\xC7\xAC" => "\xE3\x83\xB2",		"\xC7\xAD" => "\xE3\x83\xB3",		"\xC7\xAE" => "\xE3\x83\xB4",		"\xC7\xAF" => "\xE3\x83\xB5",		"\xC7\xB0" => "\xE3\x83\xB6",		"\xC7\xB1" => "\xD0\x94",		"\xC7\xB2" => "\xD0\x95",		"\xC7\xB3" => "\xD0\x81",		"\xC7\xB4" => "\xD0\x96",		"\xC7\xB5" => "\xD0\x97",		"\xC7\xB6" => "\xD0\x98",		"\xC7\xB7" => "\xD0\x99",		"\xC7\xB8" => "\xD0\x9A",		"\xC7\xB9" => "\xD0\x9B",		"\xC7\xBA" => "\xD0\x9C",		"\xC7\xBB" => "\xD0\xA3",		"\xC7\xBC" => "\xD0\xA4",		"\xC7\xBD" => "\xD0\xA5",		"\xC7\xBE" => "\xD0\xA6",		"\xC7\xBF" => "\xD0\xA7",		"\xC7\xC0" => "\xD0\xA8",		"\xC7\xC1" => "\xD0\xA9",		"\xC7\xC2" => "\xD0\xAA",		"\xC7\xC3" => "\xD0\xAB",		"\xC7\xC4" => "\xD0\xAC",		"\xC7\xC5" => "\xD0\xAD",		"\xC7\xC6" => "\xD0\xAE",		"\xC7\xC7" => "\xD0\xAF",		"\xC7\xC8" => "\xD0\xB0",		"\xC7\xC9" => "\xD0\xB1",		"\xC7\xCA" => "\xD0\xB2",		"\xC7\xCB" => "\xD0\xB3",		"\xC7\xCC" => "\xD0\xB4",		"\xC7\xCD" => "\xD0\xB5",		"\xC7\xCE" => "\xD1\x91",		"\xC7\xCF" => "\xD0\xB6",		"\xC7\xD0" => "\xD0\xB7",		"\xC7\xD1" => "\xD0\xB8",		"\xC7\xD2" => "\xD0\xB9",		"\xC7\xD3" => "\xD0\xBA",		"\xC7\xD4" => "\xD0\xBB",		"\xC7\xD5" => "\xD0\xBC",		"\xC7\xD6" => "\xD0\xBD",		"\xC7\xD7" => "\xD0\xBE",		"\xC7\xD8" => "\xD0\xBF",		"\xC7\xD9" => "\xD1\x80",		"\xC7\xDA" => "\xD1\x81",		"\xC7\xDB" => "\xD1\x82",		"\xC7\xDC" => "\xD1\x83",		"\xC7\xDD" => "\xD1\x84",		"\xC7\xDE" => "\xD1\x85",		"\xC7\xDF" => "\xD1\x86",		"\xC7\xE0" => "\xD1\x87",		"\xC7\xE1" => "\xD1\x88",		"\xC7\xE2" => "\xD1\x89",		"\xC7\xE3" => "\xD1\x8A",		"\xC7\xE4" => "\xD1\x8B",		"\xC7\xE5" => "\xD1\x8C",		"\xC7\xE6" => "\xD1\x8D",		"\xC7\xE7" => "\xD1\x8E",		"\xC7\xE8" => "\xD1\x8F",		"\xC7\xE9" => "\xE2\x91\xA0",		"\xC7\xEA" => "\xE2\x91\xA1",		"\xC7\xEB" => "\xE2\x91\xA2",		"\xC7\xEC" => "\xE2\x91\xA3",		"\xC7\xED" => "\xE2\x91\xA4",		"\xC7\xEE" => "\xE2\x91\xA5",		"\xC7\xEF" => "\xE2\x91\xA6",		"\xC7\xF0" => "\xE2\x91\xA7",		"\xC7\xF1" => "\xE2\x91\xA8",		"\xC7\xF2" => "\xE2\x91\xA9",		"\xC7\xF3" => "\xE2\x91\xB4",		"\xC7\xF4" => "\xE2\x91\xB5",		"\xC7\xF5" => "\xE2\x91\xB6",		"\xC7\xF6" => "\xE2\x91\xB7",		"\xC7\xF7" => "\xE2\x91\xB8",		"\xC7\xF8" => "\xE2\x91\xB9",		"\xC7\xF9" => "\xE2\x91\xBA",		"\xC7\xFA" => "\xE2\x91\xBB",		"\xC7\xFB" => "\xE2\x91\xBC",		"\xC7\xFC" => "\xE2\x91\xBD",		"\xC9\x40" => "\xE4\xB9\x82",		"\xC9\x41" => "\xE4\xB9\x9C",		"\xC9\x42" => "\xE5\x87\xB5",		"\xC9\x43" => "\xE5\x8C\x9A",		"\xC9\x44" => "\xE5\x8E\x82",		"\xC9\x45" => "\xE4\xB8\x87",		"\xC9\x46" => "\xE4\xB8\x8C",		"\xC9\x47" => "\xE4\xB9\x87",		"\xC9\x48" => "\xE4\xBA\x8D",		"\xC9\x49" => "\xE5\x9B\x97",		"\xC9\x4A" => "\xEF\xA8\x8C",		"\xC9\x4B" => "\xE5\xB1\xAE",		"\xC9\x4C" => "\xE5\xBD\xB3",		"\xC9\x4D" => "\xE4\xB8\x8F",		"\xC9\x4E" => "\xE5\x86\x87",		"\xC9\x4F" => "\xE4\xB8\x8E",		"\xC9\x50" => "\xE4\xB8\xAE",		"\xC9\x51" => "\xE4\xBA\x93",		"\xC9\x52" => "\xE4\xBB\x82",		"\xC9\x53" => "\xE4\xBB\x89",		"\xC9\x54" => "\xE4\xBB\x88",		"\xC9\x55" => "\xE5\x86\x98",		"\xC9\x56" => "\xE5\x8B\xBC",		"\xC9\x57" => "\xE5\x8D\xAC",		"\xC9\x58" => "\xE5\x8E\xB9",		"\xC9\x59" => "\xE5\x9C\xA0",		"\xC9\x5A" => "\xE5\xA4\x83",		"\xC9\x5B" => "\xE5\xA4\xAC",		"\xC9\x5C" => "\xE5\xB0\x90",		"\xC9\x5D" => "\xE5\xB7\xBF",		"\xC9\x5E" => "\xE6\x97\xA1",		"\xC9\x5F" => "\xE6\xAE\xB3",		"\xC9\x60" => "\xE6\xAF\x8C",		"\xC9\x61" => "\xE6\xB0\x94",		"\xC9\x62" => "\xE7\x88\xBF",		"\xC9\x63" => "\xE4\xB8\xB1",		"\xC9\x64" => "\xE4\xB8\xBC",		"\xC9\x65" => "\xE4\xBB\xA8",		"\xC9\x66" => "\xE4\xBB\x9C",		"\xC9\x67" => "\xE4\xBB\xA9",		"\xC9\x68" => "\xE4\xBB\xA1",		"\xC9\x69" => "\xE4\xBB\x9D",		"\xC9\x6A" => "\xE4\xBB\x9A",		"\xC9\x6B" => "\xE5\x88\x8C",		"\xC9\x6C" => "\xE5\x8C\x9C",		"\xC9\x6D" => "\xE5\x8D\x8C",		"\xC9\x6E" => "\xE5\x9C\xA2",		"\xC9\x6F" => "\xE5\x9C\xA3",		"\xC9\x70" => "\xE5\xA4\x97",		"\xC9\x71" => "\xE5\xA4\xAF",		"\xC9\x72" => "\xE5\xAE\x81",		"\xC9\x73" => "\xE5\xAE\x84",		"\xC9\x74" => "\xE5\xB0\x92",		"\xC9\x75" => "\xE5\xB0\xBB",		"\xC9\x76" => "\xE5\xB1\xB4",		"\xC9\x77" => "\xE5\xB1\xB3",		"\xC9\x78" => "\xE5\xB8\x84",		"\xC9\x79" => "\xE5\xBA\x80",		"\xC9\x7A" => "\xE5\xBA\x82",		"\xC9\x7B" => "\xE5\xBF\x89",		"\xC9\x7C" => "\xE6\x88\x89",		"\xC9\x7D" => "\xE6\x89\x90",		"\xC9\x7E" => "\xE6\xB0\x95",		"\xC9\xA1" => "\xE6\xB0\xB6",		"\xC9\xA2" => "\xE6\xB1\x83",		"\xC9\xA3" => "\xE6\xB0\xBF",		"\xC9\xA4" => "\xE6\xB0\xBB",		"\xC9\xA5" => "\xE7\x8A\xAE",		"\xC9\xA6" => "\xE7\x8A\xB0",		"\xC9\xA7" => "\xE7\x8E\x8A",		"\xC9\xA8" => "\xE7\xA6\xB8",		"\xC9\xA9" => "\xE8\x82\x8A",		"\xC9\xAA" => "\xE9\x98\x9E",		"\xC9\xAB" => "\xE4\xBC\x8E",		"\xC9\xAC" => "\xE4\xBC\x98",		"\xC9\xAD" => "\xE4\xBC\xAC",		"\xC9\xAE" => "\xE4\xBB\xB5",		"\xC9\xAF" => "\xE4\xBC\x94",		"\xC9\xB0" => "\xE4\xBB\xB1",		"\xC9\xB1" => "\xE4\xBC\x80",		"\xC9\xB2" => "\xE4\xBB\xB7",		"\xC9\xB3" => "\xE4\xBC\x88",		"\xC9\xB4" => "\xE4\xBC\x9D",		"\xC9\xB5" => "\xE4\xBC\x82",		"\xC9\xB6" => "\xE4\xBC\x85",		"\xC9\xB7" => "\xE4\xBC\xA2",		"\xC9\xB8" => "\xE4\xBC\x93",		"\xC9\xB9" => "\xE4\xBC\x84",		"\xC9\xBA" => "\xE4\xBB\xB4",		"\xC9\xBB" => "\xE4\xBC\x92",		"\xC9\xBC" => "\xE5\x86\xB1",		"\xC9\xBD" => "\xE5\x88\x93",		"\xC9\xBE" => "\xE5\x88\x89",		"\xC9\xBF" => "\xE5\x88\x90",		"\xC9\xC0" => "\xE5\x8A\xA6",		"\xC9\xC1" => "\xE5\x8C\xA2",		"\xC9\xC2" => "\xE5\x8C\x9F",		"\xC9\xC3" => "\xE5\x8D\x8D",		"\xC9\xC4" => "\xE5\x8E\x8A",		"\xC9\xC5" => "\xE5\x90\x87",		"\xC9\xC6" => "\xE5\x9B\xA1",		"\xC9\xC7" => "\xE5\x9B\x9F",		"\xC9\xC8" => "\xE5\x9C\xAE",		"\xC9\xC9" => "\xE5\x9C\xAA",		"\xC9\xCA" => "\xE5\x9C\xB4",		"\xC9\xCB" => "\xE5\xA4\xBC",		"\xC9\xCC" => "\xE5\xA6\x80",		"\xC9\xCD" => "\xE5\xA5\xBC",		"\xC9\xCE" => "\xE5\xA6\x85",		"\xC9\xCF" => "\xE5\xA5\xBB",		"\xC9\xD0" => "\xE5\xA5\xBE",		"\xC9\xD1" => "\xE5\xA5\xB7",		"\xC9\xD2" => "\xE5\xA5\xBF",		"\xC9\xD3" => "\xE5\xAD\x96",		"\xC9\xD4" => "\xE5\xB0\x95",		"\xC9\xD5" => "\xE5\xB0\xA5",		"\xC9\xD6" => "\xE5\xB1\xBC",		"\xC9\xD7" => "\xE5\xB1\xBA",		"\xC9\xD8" => "\xE5\xB1\xBB",		"\xC9\xD9" => "\xE5\xB1\xBE",		"\xC9\xDA" => "\xE5\xB7\x9F",		"\xC9\xDB" => "\xE5\xB9\xB5",		"\xC9\xDC" => "\xE5\xBA\x84",		"\xC9\xDD" => "\xE5\xBC\x82",		"\xC9\xDE" => "\xE5\xBC\x9A",		"\xC9\xDF" => "\xE5\xBD\xB4",		"\xC9\xE0" => "\xE5\xBF\x95",		"\xC9\xE1" => "\xE5\xBF\x94",		"\xC9\xE2" => "\xE5\xBF\x8F",		"\xC9\xE3" => "\xE6\x89\x9C",		"\xC9\xE4" => "\xE6\x89\x9E",		"\xC9\xE5" => "\xE6\x89\xA4",		"\xC9\xE6" => "\xE6\x89\xA1",		"\xC9\xE7" => "\xE6\x89\xA6",		"\xC9\xE8" => "\xE6\x89\xA2",		"\xC9\xE9" => "\xE6\x89\x99",		"\xC9\xEA" => "\xE6\x89\xA0",		"\xC9\xEB" => "\xE6\x89\x9A",		"\xC9\xEC" => "\xE6\x89\xA5",		"\xC9\xED" => "\xE6\x97\xAF",		"\xC9\xEE" => "\xE6\x97\xAE",		"\xC9\xEF" => "\xE6\x9C\xBE",		"\xC9\xF0" => "\xE6\x9C\xB9",		"\xC9\xF1" => "\xE6\x9C\xB8",		"\xC9\xF2" => "\xE6\x9C\xBB",		"\xC9\xF3" => "\xE6\x9C\xBA",		"\xC9\xF4" => "\xE6\x9C\xBF",		"\xC9\xF5" => "\xE6\x9C\xBC",		"\xC9\xF6" => "\xE6\x9C\xB3",		"\xC9\xF7" => "\xE6\xB0\x98",		"\xC9\xF8" => "\xE6\xB1\x86",		"\xC9\xF9" => "\xE6\xB1\x92",		"\xC9\xFA" => "\xE6\xB1\x9C",		"\xC9\xFB" => "\xE6\xB1\x8F",		"\xC9\xFC" => "\xE6\xB1\x8A",		"\xC9\xFD" => "\xE6\xB1\x94",		"\xC9\xFE" => "\xE6\xB1\x8B",		"\xCA\x40" => "\xE6\xB1\x8C",		"\xCA\x41" => "\xE7\x81\xB1",		"\xCA\x42" => "\xE7\x89\x9E",		"\xCA\x43" => "\xE7\x8A\xB4",		"\xCA\x44" => "\xE7\x8A\xB5",		"\xCA\x45" => "\xE7\x8E\x8E",		"\xCA\x46" => "\xE7\x94\xAA",		"\xCA\x47" => "\xE7\x99\xBF",		"\xCA\x48" => "\xE7\xA9\xB5",		"\xCA\x49" => "\xE7\xBD\x91",		"\xCA\x4A" => "\xE8\x89\xB8",		"\xCA\x4B" => "\xE8\x89\xBC",		"\xCA\x4C" => "\xE8\x8A\x80",		"\xCA\x4D" => "\xE8\x89\xBD",		"\xCA\x4E" => "\xE8\x89\xBF",		"\xCA\x4F" => "\xE8\x99\x8D",		"\xCA\x50" => "\xE8\xA5\xBE",		"\xCA\x51" => "\xE9\x82\x99",		"\xCA\x52" => "\xE9\x82\x97",		"\xCA\x53" => "\xE9\x82\x98",		"\xCA\x54" => "\xE9\x82\x9B",		"\xCA\x55" => "\xE9\x82\x94",		"\xCA\x56" => "\xE9\x98\xA2",		"\xCA\x57" => "\xE9\x98\xA4",		"\xCA\x58" => "\xE9\x98\xA0",		"\xCA\x59" => "\xE9\x98\xA3",		"\xCA\x5A" => "\xE4\xBD\x96",		"\xCA\x5B" => "\xE4\xBC\xBB",		"\xCA\x5C" => "\xE4\xBD\xA2",		"\xCA\x5D" => "\xE4\xBD\x89",		"\xCA\x5E" => "\xE4\xBD\x93",		"\xCA\x5F" => "\xE4\xBD\xA4",		"\xCA\x60" => "\xE4\xBC\xBE",		"\xCA\x61" => "\xE4\xBD\xA7",		"\xCA\x62" => "\xE4\xBD\x92",		"\xCA\x63" => "\xE4\xBD\x9F",		"\xCA\x64" => "\xE4\xBD\x81",		"\xCA\x65" => "\xE4\xBD\x98",		"\xCA\x66" => "\xE4\xBC\xAD",		"\xCA\x67" => "\xE4\xBC\xB3",		"\xCA\x68" => "\xE4\xBC\xBF",		"\xCA\x69" => "\xE4\xBD\xA1",		"\xCA\x6A" => "\xE5\x86\x8F",		"\xCA\x6B" => "\xE5\x86\xB9",		"\xCA\x6C" => "\xE5\x88\x9C",		"\xCA\x6D" => "\xE5\x88\x9E",		"\xCA\x6E" => "\xE5\x88\xA1",		"\xCA\x6F" => "\xE5\x8A\xAD",		"\xCA\x70" => "\xE5\x8A\xAE",		"\xCA\x71" => "\xE5\x8C\x89",		"\xCA\x72" => "\xE5\x8D\xA3",		"\xCA\x73" => "\xE5\x8D\xB2",		"\xCA\x74" => "\xE5\x8E\x8E",		"\xCA\x75" => "\xE5\x8E\x8F",		"\xCA\x76" => "\xE5\x90\xB0",		"\xCA\x77" => "\xE5\x90\xB7",		"\xCA\x78" => "\xE5\x90\xAA",		"\xCA\x79" => "\xE5\x91\x94",		"\xCA\x7A" => "\xE5\x91\x85",		"\xCA\x7B" => "\xE5\x90\x99",		"\xCA\x7C" => "\xE5\x90\x9C",		"\xCA\x7D" => "\xE5\x90\xA5",		"\xCA\x7E" => "\xE5\x90\x98",		"\xCA\xA1" => "\xE5\x90\xBD",		"\xCA\xA2" => "\xE5\x91\x8F",		"\xCA\xA3" => "\xE5\x91\x81",		"\xCA\xA4" => "\xE5\x90\xA8",		"\xCA\xA5" => "\xE5\x90\xA4",		"\xCA\xA6" => "\xE5\x91\x87",		"\xCA\xA7" => "\xE5\x9B\xAE",		"\xCA\xA8" => "\xE5\x9B\xA7",		"\xCA\xA9" => "\xE5\x9B\xA5",		"\xCA\xAA" => "\xE5\x9D\x81",		"\xCA\xAB" => "\xE5\x9D\x85",		"\xCA\xAC" => "\xE5\x9D\x8C",		"\xCA\xAD" => "\xE5\x9D\x89",		"\xCA\xAE" => "\xE5\x9D\x8B",		"\xCA\xAF" => "\xE5\x9D\x92",		"\xCA\xB0" => "\xE5\xA4\x86",		"\xCA\xB1" => "\xE5\xA5\x80",		"\xCA\xB2" => "\xE5\xA6\xA6",		"\xCA\xB3" => "\xE5\xA6\x98",		"\xCA\xB4" => "\xE5\xA6\xA0",		"\xCA\xB5" => "\xE5\xA6\x97",		"\xCA\xB6" => "\xE5\xA6\x8E",		"\xCA\xB7" => "\xE5\xA6\xA2",		"\xCA\xB8" => "\xE5\xA6\x90",		"\xCA\xB9" => "\xE5\xA6\x8F",		"\xCA\xBA" => "\xE5\xA6\xA7",		"\xCA\xBB" => "\xE5\xA6\xA1",		"\xCA\xBC" => "\xE5\xAE\x8E",		"\xCA\xBD" => "\xE5\xAE\x92",		"\xCA\xBE" => "\xE5\xB0\xA8",		"\xCA\xBF" => "\xE5\xB0\xAA",		"\xCA\xC0" => "\xE5\xB2\x8D",		"\xCA\xC1" => "\xE5\xB2\x8F",		"\xCA\xC2" => "\xE5\xB2\x88",		"\xCA\xC3" => "\xE5\xB2\x8B",		"\xCA\xC4" => "\xE5\xB2\x89",		"\xCA\xC5" => "\xE5\xB2\x92",		"\xCA\xC6" => "\xE5\xB2\x8A",		"\xCA\xC7" => "\xE5\xB2\x86",		"\xCA\xC8" => "\xE5\xB2\x93",		"\xCA\xC9" => "\xE5\xB2\x95",		"\xCA\xCA" => "\xE5\xB7\xA0",		"\xCA\xCB" => "\xE5\xB8\x8A",		"\xCA\xCC" => "\xE5\xB8\x8E",		"\xCA\xCD" => "\xE5\xBA\x8B",		"\xCA\xCE" => "\xE5\xBA\x89",		"\xCA\xCF" => "\xE5\xBA\x8C",		"\xCA\xD0" => "\xE5\xBA\x88",		"\xCA\xD1" => "\xE5\xBA\x8D",		"\xCA\xD2" => "\xE5\xBC\x85",		"\xCA\xD3" => "\xE5\xBC\x9D",		"\xCA\xD4" => "\xE5\xBD\xB8",		"\xCA\xD5" => "\xE5\xBD\xB6",		"\xCA\xD6" => "\xE5\xBF\x92",		"\xCA\xD7" => "\xE5\xBF\x91",		"\xCA\xD8" => "\xE5\xBF\x90",		"\xCA\xD9" => "\xE5\xBF\xAD",		"\xCA\xDA" => "\xE5\xBF\xA8",		"\xCA\xDB" => "\xE5\xBF\xAE",		"\xCA\xDC" => "\xE5\xBF\xB3",		"\xCA\xDD" => "\xE5\xBF\xA1",		"\xCA\xDE" => "\xE5\xBF\xA4",		"\xCA\xDF" => "\xE5\xBF\xA3",		"\xCA\xE0" => "\xE5\xBF\xBA",		"\xCA\xE1" => "\xE5\xBF\xAF",		"\xCA\xE2" => "\xE5\xBF\xB7",		"\xCA\xE3" => "\xE5\xBF\xBB",		"\xCA\xE4" => "\xE6\x80\x80",		"\xCA\xE5" => "\xE5\xBF\xB4",		"\xCA\xE6" => "\xE6\x88\xBA",		"\xCA\xE7" => "\xE6\x8A\x83",		"\xCA\xE8" => "\xE6\x8A\x8C",		"\xCA\xE9" => "\xE6\x8A\x8E",		"\xCA\xEA" => "\xE6\x8A\x8F",		"\xCA\xEB" => "\xE6\x8A\x94",		"\xCA\xEC" => "\xE6\x8A\x87",		"\xCA\xED" => "\xE6\x89\xB1",		"\xCA\xEE" => "\xE6\x89\xBB",		"\xCA\xEF" => "\xE6\x89\xBA",		"\xCA\xF0" => "\xE6\x89\xB0",		"\xCA\xF1" => "\xE6\x8A\x81",		"\xCA\xF2" => "\xE6\x8A\x88",		"\xCA\xF3" => "\xE6\x89\xB7",		"\xCA\xF4" => "\xE6\x89\xBD",		"\xCA\xF5" => "\xE6\x89\xB2",		"\xCA\xF6" => "\xE6\x89\xB4",		"\xCA\xF7" => "\xE6\x94\xB7",		"\xCA\xF8" => "\xE6\x97\xB0",		"\xCA\xF9" => "\xE6\x97\xB4",		"\xCA\xFA" => "\xE6\x97\xB3",		"\xCA\xFB" => "\xE6\x97\xB2",		"\xCA\xFC" => "\xE6\x97\xB5",		"\xCA\xFD" => "\xE6\x9D\x85",		"\xCA\xFE" => "\xE6\x9D\x87",		"\xCB\x40" => "\xE6\x9D\x99",		"\xCB\x41" => "\xE6\x9D\x95",		"\xCB\x42" => "\xE6\x9D\x8C",		"\xCB\x43" => "\xE6\x9D\x88",		"\xCB\x44" => "\xE6\x9D\x9D",		"\xCB\x45" => "\xE6\x9D\x8D",		"\xCB\x46" => "\xE6\x9D\x9A",		"\xCB\x47" => "\xE6\x9D\x8B",		"\xCB\x48" => "\xE6\xAF\x90",		"\xCB\x49" => "\xE6\xB0\x99",		"\xCB\x4A" => "\xE6\xB0\x9A",		"\xCB\x4B" => "\xE6\xB1\xB8",		"\xCB\x4C" => "\xE6\xB1\xA7",		"\xCB\x4D" => "\xE6\xB1\xAB",		"\xCB\x4E" => "\xE6\xB2\x84",		"\xCB\x4F" => "\xE6\xB2\x8B",		"\xCB\x50" => "\xE6\xB2\x8F",		"\xCB\x51" => "\xE6\xB1\xB1",		"\xCB\x52" => "\xE6\xB1\xAF",		"\xCB\x53" => "\xE6\xB1\xA9",		"\xCB\x54" => "\xE6\xB2\x9A",		"\xCB\x55" => "\xE6\xB1\xAD",		"\xCB\x56" => "\xE6\xB2\x87",		"\xCB\x57" => "\xE6\xB2\x95",		"\xCB\x58" => "\xE6\xB2\x9C",		"\xCB\x59" => "\xE6\xB1\xA6",		"\xCB\x5A" => "\xE6\xB1\xB3",		"\xCB\x5B" => "\xE6\xB1\xA5",		"\xCB\x5C" => "\xE6\xB1\xBB",		"\xCB\x5D" => "\xE6\xB2\x8E",		"\xCB\x5E" => "\xE7\x81\xB4",		"\xCB\x5F" => "\xE7\x81\xBA",		"\xCB\x60" => "\xE7\x89\xA3",		"\xCB\x61" => "\xE7\x8A\xBF",		"\xCB\x62" => "\xE7\x8A\xBD",		"\xCB\x63" => "\xE7\x8B\x83",		"\xCB\x64" => "\xE7\x8B\x86",		"\xCB\x65" => "\xE7\x8B\x81",		"\xCB\x66" => "\xE7\x8A\xBA",		"\xCB\x67" => "\xE7\x8B\x85",		"\xCB\x68" => "\xE7\x8E\x95",		"\xCB\x69" => "\xE7\x8E\x97",		"\xCB\x6A" => "\xE7\x8E\x93",		"\xCB\x6B" => "\xE7\x8E\x94",		"\xCB\x6C" => "\xE7\x8E\x92",		"\xCB\x6D" => "\xE7\x94\xBA",		"\xCB\x6E" => "\xE7\x94\xB9",		"\xCB\x6F" => "\xE7\x96\x94",		"\xCB\x70" => "\xE7\x96\x95",		"\xCB\x71" => "\xE7\x9A\x81",		"\xCB\x72" => "\xE7\xA4\xBD",		"\xCB\x73" => "\xE8\x80\xB4",		"\xCB\x74" => "\xE8\x82\x95",		"\xCB\x75" => "\xE8\x82\x99",		"\xCB\x76" => "\xE8\x82\x90",		"\xCB\x77" => "\xE8\x82\x92",		"\xCB\x78" => "\xE8\x82\x9C",		"\xCB\x79" => "\xE8\x8A\x90",		"\xCB\x7A" => "\xE8\x8A\x8F",		"\xCB\x7B" => "\xE8\x8A\x85",		"\xCB\x7C" => "\xE8\x8A\x8E",		"\xCB\x7D" => "\xE8\x8A\x91",		"\xCB\x7E" => "\xE8\x8A\x93",		"\xCB\xA1" => "\xE8\x8A\x8A",		"\xCB\xA2" => "\xE8\x8A\x83",		"\xCB\xA3" => "\xE8\x8A\x84",		"\xCB\xA4" => "\xE8\xB1\xB8",		"\xCB\xA5" => "\xE8\xBF\x89",		"\xCB\xA6" => "\xE8\xBE\xBF",		"\xCB\xA7" => "\xE9\x82\x9F",		"\xCB\xA8" => "\xE9\x82\xA1",		"\xCB\xA9" => "\xE9\x82\xA5",		"\xCB\xAA" => "\xE9\x82\x9E",		"\xCB\xAB" => "\xE9\x82\xA7",		"\xCB\xAC" => "\xE9\x82\xA0",		"\xCB\xAD" => "\xE9\x98\xB0",		"\xCB\xAE" => "\xE9\x98\xA8",		"\xCB\xAF" => "\xE9\x98\xAF",		"\xCB\xB0" => "\xE9\x98\xAD",		"\xCB\xB1" => "\xE4\xB8\xB3",		"\xCB\xB2" => "\xE4\xBE\x98",		"\xCB\xB3" => "\xE4\xBD\xBC",		"\xCB\xB4" => "\xE4\xBE\x85",		"\xCB\xB5" => "\xE4\xBD\xBD",		"\xCB\xB6" => "\xE4\xBE\x80",		"\xCB\xB7" => "\xE4\xBE\x87",		"\xCB\xB8" => "\xE4\xBD\xB6",		"\xCB\xB9" => "\xE4\xBD\xB4",		"\xCB\xBA" => "\xE4\xBE\x89",		"\xCB\xBB" => "\xE4\xBE\x84",		"\xCB\xBC" => "\xE4\xBD\xB7",		"\xCB\xBD" => "\xE4\xBD\x8C",		"\xCB\xBE" => "\xE4\xBE\x97",		"\xCB\xBF" => "\xE4\xBD\xAA",		"\xCB\xC0" => "\xE4\xBE\x9A",		"\xCB\xC1" => "\xE4\xBD\xB9",		"\xCB\xC2" => "\xE4\xBE\x81",		"\xCB\xC3" => "\xE4\xBD\xB8",		"\xCB\xC4" => "\xE4\xBE\x90",		"\xCB\xC5" => "\xE4\xBE\x9C",		"\xCB\xC6" => "\xE4\xBE\x94",		"\xCB\xC7" => "\xE4\xBE\x9E",		"\xCB\xC8" => "\xE4\xBE\x92",		"\xCB\xC9" => "\xE4\xBE\x82",		"\xCB\xCA" => "\xE4\xBE\x95",		"\xCB\xCB" => "\xE4\xBD\xAB",		"\xCB\xCC" => "\xE4\xBD\xAE",		"\xCB\xCD" => "\xE5\x86\x9E",		"\xCB\xCE" => "\xE5\x86\xBC",		"\xCB\xCF" => "\xE5\x86\xBE",		"\xCB\xD0" => "\xE5\x88\xB5",		"\xCB\xD1" => "\xE5\x88\xB2",		"\xCB\xD2" => "\xE5\x88\xB3",		"\xCB\xD3" => "\xE5\x89\x86",		"\xCB\xD4" => "\xE5\x88\xB1",		"\xCB\xD5" => "\xE5\x8A\xBC",		"\xCB\xD6" => "\xE5\x8C\x8A",		"\xCB\xD7" => "\xE5\x8C\x8B",		"\xCB\xD8" => "\xE5\x8C\xBC",		"\xCB\xD9" => "\xE5\x8E\x92",		"\xCB\xDA" => "\xE5\x8E\x94",		"\xCB\xDB" => "\xE5\x92\x87",		"\xCB\xDC" => "\xE5\x91\xBF",		"\xCB\xDD" => "\xE5\x92\x81",		"\xCB\xDE" => "\xE5\x92\x91",		"\xCB\xDF" => "\xE5\x92\x82",		"\xCB\xE0" => "\xE5\x92\x88",		"\xCB\xE1" => "\xE5\x91\xAB",		"\xCB\xE2" => "\xE5\x91\xBA",		"\xCB\xE3" => "\xE5\x91\xBE",		"\xCB\xE4" => "\xE5\x91\xA5",		"\xCB\xE5" => "\xE5\x91\xAC",		"\xCB\xE6" => "\xE5\x91\xB4",		"\xCB\xE7" => "\xE5\x91\xA6",		"\xCB\xE8" => "\xE5\x92\x8D",		"\xCB\xE9" => "\xE5\x91\xAF",		"\xCB\xEA" => "\xE5\x91\xA1",		"\xCB\xEB" => "\xE5\x91\xA0",		"\xCB\xEC" => "\xE5\x92\x98",		"\xCB\xED" => "\xE5\x91\xA3",		"\xCB\xEE" => "\xE5\x91\xA7",		"\xCB\xEF" => "\xE5\x91\xA4",		"\xCB\xF0" => "\xE5\x9B\xB7",		"\xCB\xF1" => "\xE5\x9B\xB9",		"\xCB\xF2" => "\xE5\x9D\xAF",		"\xCB\xF3" => "\xE5\x9D\xB2",		"\xCB\xF4" => "\xE5\x9D\xAD",		"\xCB\xF5" => "\xE5\x9D\xAB",		"\xCB\xF6" => "\xE5\x9D\xB1",		"\xCB\xF7" => "\xE5\x9D\xB0",		"\xCB\xF8" => "\xE5\x9D\xB6",		"\xCB\xF9" => "\xE5\x9E\x80",		"\xCB\xFA" => "\xE5\x9D\xB5",		"\xCB\xFB" => "\xE5\x9D\xBB",		"\xCB\xFC" => "\xE5\x9D\xB3",		"\xCB\xFD" => "\xE5\x9D\xB4",		"\xCB\xFE" => "\xE5\x9D\xA2",		"\xCC\x40" => "\xE5\x9D\xA8",		"\xCC\x41" => "\xE5\x9D\xBD",		"\xCC\x42" => "\xE5\xA4\x8C",		"\xCC\x43" => "\xE5\xA5\x85",		"\xCC\x44" => "\xE5\xA6\xB5",		"\xCC\x45" => "\xE5\xA6\xBA",		"\xCC\x46" => "\xE5\xA7\x8F",		"\xCC\x47" => "\xE5\xA7\x8E",		"\xCC\x48" => "\xE5\xA6\xB2",		"\xCC\x49" => "\xE5\xA7\x8C",		"\xCC\x4A" => "\xE5\xA7\x81",		"\xCC\x4B" => "\xE5\xA6\xB6",		"\xCC\x4C" => "\xE5\xA6\xBC",		"\xCC\x4D" => "\xE5\xA7\x83",		"\xCC\x4E" => "\xE5\xA7\x96",		"\xCC\x4F" => "\xE5\xA6\xB1",		"\xCC\x50" => "\xE5\xA6\xBD",		"\xCC\x51" => "\xE5\xA7\x80",		"\xCC\x52" => "\xE5\xA7\x88",		"\xCC\x53" => "\xE5\xA6\xB4",		"\xCC\x54" => "\xE5\xA7\x87",		"\xCC\x55" => "\xE5\xAD\xA2",		"\xCC\x56" => "\xE5\xAD\xA5",		"\xCC\x57" => "\xE5\xAE\x93",		"\xCC\x58" => "\xE5\xAE\x95",		"\xCC\x59" => "\xE5\xB1\x84",		"\xCC\x5A" => "\xE5\xB1\x87",		"\xCC\x5B" => "\xE5\xB2\xAE",		"\xCC\x5C" => "\xE5\xB2\xA4",		"\xCC\x5D" => "\xE5\xB2\xA0",		"\xCC\x5E" => "\xE5\xB2\xB5",		"\xCC\x5F" => "\xE5\xB2\xAF",		"\xCC\x60" => "\xE5\xB2\xA8",		"\xCC\x61" => "\xE5\xB2\xAC",		"\xCC\x62" => "\xE5\xB2\x9F",		"\xCC\x63" => "\xE5\xB2\xA3",		"\xCC\x64" => "\xE5\xB2\xAD",		"\xCC\x65" => "\xE5\xB2\xA2",		"\xCC\x66" => "\xE5\xB2\xAA",		"\xCC\x67" => "\xE5\xB2\xA7",		"\xCC\x68" => "\xE5\xB2\x9D",		"\xCC\x69" => "\xE5\xB2\xA5",		"\xCC\x6A" => "\xE5\xB2\xB6",		"\xCC\x6B" => "\xE5\xB2\xB0",		"\xCC\x6C" => "\xE5\xB2\xA6",		"\xCC\x6D" => "\xE5\xB8\x97",		"\xCC\x6E" => "\xE5\xB8\x94",		"\xCC\x6F" => "\xE5\xB8\x99",		"\xCC\x70" => "\xE5\xBC\xA8",		"\xCC\x71" => "\xE5\xBC\xA2",		"\xCC\x72" => "\xE5\xBC\xA3",		"\xCC\x73" => "\xE5\xBC\xA4",		"\xCC\x74" => "\xE5\xBD\x94",		"\xCC\x75" => "\xE5\xBE\x82",		"\xCC\x76" => "\xE5\xBD\xBE",		"\xCC\x77" => "\xE5\xBD\xBD",		"\xCC\x78" => "\xE5\xBF\x9E",		"\xCC\x79" => "\xE5\xBF\xA5",		"\xCC\x7A" => "\xE6\x80\xAD",		"\xCC\x7B" => "\xE6\x80\xA6",		"\xCC\x7C" => "\xE6\x80\x99",		"\xCC\x7D" => "\xE6\x80\xB2",		"\xCC\x7E" => "\xE6\x80\x8B",		"\xCC\xA1" => "\xE6\x80\xB4",		"\xCC\xA2" => "\xE6\x80\x8A",		"\xCC\xA3" => "\xE6\x80\x97",		"\xCC\xA4" => "\xE6\x80\xB3",		"\xCC\xA5" => "\xE6\x80\x9A",		"\xCC\xA6" => "\xE6\x80\x9E",		"\xCC\xA7" => "\xE6\x80\xAC",		"\xCC\xA8" => "\xE6\x80\xA2",		"\xCC\xA9" => "\xE6\x80\x8D",		"\xCC\xAA" => "\xE6\x80\x90",		"\xCC\xAB" => "\xE6\x80\xAE",		"\xCC\xAC" => "\xE6\x80\x93",		"\xCC\xAD" => "\xE6\x80\x91",		"\xCC\xAE" => "\xE6\x80\x8C",		"\xCC\xAF" => "\xE6\x80\x89",		"\xCC\xB0" => "\xE6\x80\x9C",		"\xCC\xB1" => "\xE6\x88\x94",		"\xCC\xB2" => "\xE6\x88\xBD",		"\xCC\xB3" => "\xE6\x8A\xAD",		"\xCC\xB4" => "\xE6\x8A\xB4",		"\xCC\xB5" => "\xE6\x8B\x91",		"\xCC\xB6" => "\xE6\x8A\xBE",		"\xCC\xB7" => "\xE6\x8A\xAA",		"\xCC\xB8" => "\xE6\x8A\xB6",		"\xCC\xB9" => "\xE6\x8B\x8A",		"\xCC\xBA" => "\xE6\x8A\xAE",		"\xCC\xBB" => "\xE6\x8A\xB3",		"\xCC\xBC" => "\xE6\x8A\xAF",		"\xCC\xBD" => "\xE6\x8A\xBB",		"\xCC\xBE" => "\xE6\x8A\xA9",		"\xCC\xBF" => "\xE6\x8A\xB0",		"\xCC\xC0" => "\xE6\x8A\xB8",		"\xCC\xC1" => "\xE6\x94\xBD",		"\xCC\xC2" => "\xE6\x96\xA8",		"\xCC\xC3" => "\xE6\x96\xBB",		"\xCC\xC4" => "\xE6\x98\x89",		"\xCC\xC5" => "\xE6\x97\xBC",		"\xCC\xC6" => "\xE6\x98\x84",		"\xCC\xC7" => "\xE6\x98\x92",		"\xCC\xC8" => "\xE6\x98\x88",		"\xCC\xC9" => "\xE6\x97\xBB",		"\xCC\xCA" => "\xE6\x98\x83",		"\xCC\xCB" => "\xE6\x98\x8B",		"\xCC\xCC" => "\xE6\x98\x8D",		"\xCC\xCD" => "\xE6\x98\x85",		"\xCC\xCE" => "\xE6\x97\xBD",		"\xCC\xCF" => "\xE6\x98\x91",		"\xCC\xD0" => "\xE6\x98\x90",		"\xCC\xD1" => "\xE6\x9B\xB6",		"\xCC\xD2" => "\xE6\x9C\x8A",		"\xCC\xD3" => "\xE6\x9E\x85",		"\xCC\xD4" => "\xE6\x9D\xAC",		"\xCC\xD5" => "\xE6\x9E\x8E",		"\xCC\xD6" => "\xE6\x9E\x92",		"\xCC\xD7" => "\xE6\x9D\xB6",		"\xCC\xD8" => "\xE6\x9D\xBB",		"\xCC\xD9" => "\xE6\x9E\x98",		"\xCC\xDA" => "\xE6\x9E\x86",		"\xCC\xDB" => "\xE6\x9E\x84",		"\xCC\xDC" => "\xE6\x9D\xB4",		"\xCC\xDD" => "\xE6\x9E\x8D",		"\xCC\xDE" => "\xE6\x9E\x8C",		"\xCC\xDF" => "\xE6\x9D\xBA",		"\xCC\xE0" => "\xE6\x9E\x9F",		"\xCC\xE1" => "\xE6\x9E\x91",		"\xCC\xE2" => "\xE6\x9E\x99",		"\xCC\xE3" => "\xE6\x9E\x83",		"\xCC\xE4" => "\xE6\x9D\xBD",		"\xCC\xE5" => "\xE6\x9E\x81",		"\xCC\xE6" => "\xE6\x9D\xB8",		"\xCC\xE7" => "\xE6\x9D\xB9",		"\xCC\xE8" => "\xE6\x9E\x94",		"\xCC\xE9" => "\xE6\xAC\xA5",		"\xCC\xEA" => "\xE6\xAE\x80",		"\xCC\xEB" => "\xE6\xAD\xBE",		"\xCC\xEC" => "\xE6\xAF\x9E",		"\xCC\xED" => "\xE6\xB0\x9D",		"\xCC\xEE" => "\xE6\xB2\x93",		"\xCC\xEF" => "\xE6\xB3\xAC",		"\xCC\xF0" => "\xE6\xB3\xAB",		"\xCC\xF1" => "\xE6\xB3\xAE",		"\xCC\xF2" => "\xE6\xB3\x99",		"\xCC\xF3" => "\xE6\xB2\xB6",		"\xCC\xF4" => "\xE6\xB3\x94",		"\xCC\xF5" => "\xE6\xB2\xAD",		"\xCC\xF6" => "\xE6\xB3\xA7",		"\xCC\xF7" => "\xE6\xB2\xB7",		"\xCC\xF8" => "\xE6\xB3\x90",		"\xCC\xF9" => "\xE6\xB3\x82",		"\xCC\xFA" => "\xE6\xB2\xBA",		"\xCC\xFB" => "\xE6\xB3\x83",		"\xCC\xFC" => "\xE6\xB3\x86",		"\xCC\xFD" => "\xE6\xB3\xAD",		"\xCC\xFE" => "\xE6\xB3\xB2",		"\xCD\x40" => "\xE6\xB3\x92",		"\xCD\x41" => "\xE6\xB3\x9D",		"\xCD\x42" => "\xE6\xB2\xB4",		"\xCD\x43" => "\xE6\xB2\x8A",		"\xCD\x44" => "\xE6\xB2\x9D",		"\xCD\x45" => "\xE6\xB2\x80",		"\xCD\x46" => "\xE6\xB3\x9E",		"\xCD\x47" => "\xE6\xB3\x80",		"\xCD\x48" => "\xE6\xB4\xB0",		"\xCD\x49" => "\xE6\xB3\x8D",		"\xCD\x4A" => "\xE6\xB3\x87",		"\xCD\x4B" => "\xE6\xB2\xB0",		"\xCD\x4C" => "\xE6\xB3\xB9",		"\xCD\x4D" => "\xE6\xB3\x8F",		"\xCD\x4E" => "\xE6\xB3\xA9",		"\xCD\x4F" => "\xE6\xB3\x91",		"\xCD\x50" => "\xE7\x82\x94",		"\xCD\x51" => "\xE7\x82\x98",		"\xCD\x52" => "\xE7\x82\x85",		"\xCD\x53" => "\xE7\x82\x93",		"\xCD\x54" => "\xE7\x82\x86",		"\xCD\x55" => "\xE7\x82\x84",		"\xCD\x56" => "\xE7\x82\x91",		"\xCD\x57" => "\xE7\x82\x96",		"\xCD\x58" => "\xE7\x82\x82",		"\xCD\x59" => "\xE7\x82\x9A",		"\xCD\x5A" => "\xE7\x82\x83",		"\xCD\x5B" => "\xE7\x89\xAA",		"\xCD\x5C" => "\xE7\x8B\x96",		"\xCD\x5D" => "\xE7\x8B\x8B",		"\xCD\x5E" => "\xE7\x8B\x98",		"\xCD\x5F" => "\xE7\x8B\x89",		"\xCD\x60" => "\xE7\x8B\x9C",		"\xCD\x61" => "\xE7\x8B\x92",		"\xCD\x62" => "\xE7\x8B\x94",		"\xCD\x63" => "\xE7\x8B\x9A",		"\xCD\x64" => "\xE7\x8B\x8C",		"\xCD\x65" => "\xE7\x8B\x91",		"\xCD\x66" => "\xE7\x8E\xA4",		"\xCD\x67" => "\xE7\x8E\xA1",		"\xCD\x68" => "\xE7\x8E\xAD",		"\xCD\x69" => "\xE7\x8E\xA6",		"\xCD\x6A" => "\xE7\x8E\xA2",		"\xCD\x6B" => "\xE7\x8E\xA0",		"\xCD\x6C" => "\xE7\x8E\xAC",		"\xCD\x6D" => "\xE7\x8E\x9D",		"\xCD\x6E" => "\xE7\x93\x9D",		"\xCD\x6F" => "\xE7\x93\xA8",		"\xCD\x70" => "\xE7\x94\xBF",		"\xCD\x71" => "\xE7\x95\x80",		"\xCD\x72" => "\xE7\x94\xBE",		"\xCD\x73" => "\xE7\x96\x8C",		"\xCD\x74" => "\xE7\x96\x98",		"\xCD\x75" => "\xE7\x9A\xAF",		"\xCD\x76" => "\xE7\x9B\xB3",		"\xCD\x77" => "\xE7\x9B\xB1",		"\xCD\x78" => "\xE7\x9B\xB0",		"\xCD\x79" => "\xE7\x9B\xB5",		"\xCD\x7A" => "\xE7\x9F\xB8",		"\xCD\x7B" => "\xE7\x9F\xBC",		"\xCD\x7C" => "\xE7\x9F\xB9",		"\xCD\x7D" => "\xE7\x9F\xBB",		"\xCD\x7E" => "\xE7\x9F\xBA",		"\xCD\xA1" => "\xE7\x9F\xB7",		"\xCD\xA2" => "\xE7\xA5\x82",		"\xCD\xA3" => "\xE7\xA4\xBF",		"\xCD\xA4" => "\xE7\xA7\x85",		"\xCD\xA5" => "\xE7\xA9\xB8",		"\xCD\xA6" => "\xE7\xA9\xBB",		"\xCD\xA7" => "\xE7\xAB\xBB",		"\xCD\xA8" => "\xE7\xB1\xB5",		"\xCD\xA9" => "\xE7\xB3\xBD",		"\xCD\xAA" => "\xE8\x80\xB5",		"\xCD\xAB" => "\xE8\x82\x8F",		"\xCD\xAC" => "\xE8\x82\xAE",		"\xCD\xAD" => "\xE8\x82\xA3",		"\xCD\xAE" => "\xE8\x82\xB8",		"\xCD\xAF" => "\xE8\x82\xB5",		"\xCD\xB0" => "\xE8\x82\xAD",		"\xCD\xB1" => "\xE8\x88\xA0",		"\xCD\xB2" => "\xE8\x8A\xA0",		"\xCD\xB3" => "\xE8\x8B\x80",		"\xCD\xB4" => "\xE8\x8A\xAB",		"\xCD\xB5" => "\xE8\x8A\x9A",		"\xCD\xB6" => "\xE8\x8A\x98",		"\xCD\xB7" => "\xE8\x8A\x9B",		"\xCD\xB8" => "\xE8\x8A\xB5",		"\xCD\xB9" => "\xE8\x8A\xA7",		"\xCD\xBA" => "\xE8\x8A\xAE",		"\xCD\xBB" => "\xE8\x8A\xBC",		"\xCD\xBC" => "\xE8\x8A\x9E",		"\xCD\xBD" => "\xE8\x8A\xBA",		"\xCD\xBE" => "\xE8\x8A\xB4",		"\xCD\xBF" => "\xE8\x8A\xA8",		"\xCD\xC0" => "\xE8\x8A\xA1",		"\xCD\xC1" => "\xE8\x8A\xA9",		"\xCD\xC2" => "\xE8\x8B\x82",		"\xCD\xC3" => "\xE8\x8A\xA4",		"\xCD\xC4" => "\xE8\x8B\x83",		"\xCD\xC5" => "\xE8\x8A\xB6",		"\xCD\xC6" => "\xE8\x8A\xA2",		"\xCD\xC7" => "\xE8\x99\xB0",		"\xCD\xC8" => "\xE8\x99\xAF",		"\xCD\xC9" => "\xE8\x99\xAD",		"\xCD\xCA" => "\xE8\x99\xAE",		"\xCD\xCB" => "\xE8\xB1\x96",		"\xCD\xCC" => "\xE8\xBF\x92",		"\xCD\xCD" => "\xE8\xBF\x8B",		"\xCD\xCE" => "\xE8\xBF\x93",		"\xCD\xCF" => "\xE8\xBF\x8D",		"\xCD\xD0" => "\xE8\xBF\x96",		"\xCD\xD1" => "\xE8\xBF\x95",		"\xCD\xD2" => "\xE8\xBF\x97",		"\xCD\xD3" => "\xE9\x82\xB2",		"\xCD\xD4" => "\xE9\x82\xB4",		"\xCD\xD5" => "\xE9\x82\xAF",		"\xCD\xD6" => "\xE9\x82\xB3",		"\xCD\xD7" => "\xE9\x82\xB0",		"\xCD\xD8" => "\xE9\x98\xB9",		"\xCD\xD9" => "\xE9\x98\xBD",		"\xCD\xDA" => "\xE9\x98\xBC",		"\xCD\xDB" => "\xE9\x98\xBA",		"\xCD\xDC" => "\xE9\x99\x83",		"\xCD\xDD" => "\xE4\xBF\x8D",		"\xCD\xDE" => "\xE4\xBF\x85",		"\xCD\xDF" => "\xE4\xBF\x93",		"\xCD\xE0" => "\xE4\xBE\xB2",		"\xCD\xE1" => "\xE4\xBF\x89",		"\xCD\xE2" => "\xE4\xBF\x8B",		"\xCD\xE3" => "\xE4\xBF\x81",		"\xCD\xE4" => "\xE4\xBF\x94",		"\xCD\xE5" => "\xE4\xBF\x9C",		"\xCD\xE6" => "\xE4\xBF\x99",		"\xCD\xE7" => "\xE4\xBE\xBB",		"\xCD\xE8" => "\xE4\xBE\xB3",		"\xCD\xE9" => "\xE4\xBF\x9B",		"\xCD\xEA" => "\xE4\xBF\x87",		"\xCD\xEB" => "\xE4\xBF\x96",		"\xCD\xEC" => "\xE4\xBE\xBA",		"\xCD\xED" => "\xE4\xBF\x80",		"\xCD\xEE" => "\xE4\xBE\xB9",		"\xCD\xEF" => "\xE4\xBF\xAC",		"\xCD\xF0" => "\xE5\x89\x84",		"\xCD\xF1" => "\xE5\x89\x89",		"\xCD\xF2" => "\xE5\x8B\x80",		"\xCD\xF3" => "\xE5\x8B\x82",		"\xCD\xF4" => "\xE5\x8C\xBD",		"\xCD\xF5" => "\xE5\x8D\xBC",		"\xCD\xF6" => "\xE5\x8E\x97",		"\xCD\xF7" => "\xE5\x8E\x96",		"\xCD\xF8" => "\xE5\x8E\x99",		"\xCD\xF9" => "\xE5\x8E\x98",		"\xCD\xFA" => "\xE5\x92\xBA",		"\xCD\xFB" => "\xE5\x92\xA1",		"\xCD\xFC" => "\xE5\x92\xAD",		"\xCD\xFD" => "\xE5\x92\xA5",		"\xCD\xFE" => "\xE5\x93\x8F",		"\xCE\x40" => "\xE5\x93\x83",		"\xCE\x41" => "\xE8\x8C\x8D",		"\xCE\x42" => "\xE5\x92\xB7",		"\xCE\x43" => "\xE5\x92\xAE",		"\xCE\x44" => "\xE5\x93\x96",		"\xCE\x45" => "\xE5\x92\xB6",		"\xCE\x46" => "\xE5\x93\x85",		"\xCE\x47" => "\xE5\x93\x86",		"\xCE\x48" => "\xE5\x92\xA0",		"\xCE\x49" => "\xE5\x91\xB0",		"\xCE\x4A" => "\xE5\x92\xBC",		"\xCE\x4B" => "\xE5\x92\xA2",		"\xCE\x4C" => "\xE5\x92\xBE",		"\xCE\x4D" => "\xE5\x91\xB2",		"\xCE\x4E" => "\xE5\x93\x9E",		"\xCE\x4F" => "\xE5\x92\xB0",		"\xCE\x50" => "\xE5\x9E\xB5",		"\xCE\x51" => "\xE5\x9E\x9E",		"\xCE\x52" => "\xE5\x9E\x9F",		"\xCE\x53" => "\xE5\x9E\xA4",		"\xCE\x54" => "\xE5\x9E\x8C",		"\xCE\x55" => "\xE5\x9E\x97",		"\xCE\x56" => "\xE5\x9E\x9D",		"\xCE\x57" => "\xE5\x9E\x9B",		"\xCE\x58" => "\xE5\x9E\x94",		"\xCE\x59" => "\xE5\x9E\x98",		"\xCE\x5A" => "\xE5\x9E\x8F",		"\xCE\x5B" => "\xE5\x9E\x99",		"\xCE\x5C" => "\xE5\x9E\xA5",		"\xCE\x5D" => "\xE5\x9E\x9A",		"\xCE\x5E" => "\xE5\x9E\x95",		"\xCE\x5F" => "\xE5\xA3\xB4",		"\xCE\x60" => "\xE5\xA4\x8D",		"\xCE\x61" => "\xE5\xA5\x93",		"\xCE\x62" => "\xE5\xA7\xA1",		"\xCE\x63" => "\xE5\xA7\x9E",		"\xCE\x64" => "\xE5\xA7\xAE",		"\xCE\x65" => "\xE5\xA8\x80",		"\xCE\x66" => "\xE5\xA7\xB1",		"\xCE\x67" => "\xE5\xA7\x9D",		"\xCE\x68" => "\xE5\xA7\xBA",		"\xCE\x69" => "\xE5\xA7\xBD",		"\xCE\x6A" => "\xE5\xA7\xBC",		"\xCE\x6B" => "\xE5\xA7\xB6",		"\xCE\x6C" => "\xE5\xA7\xA4",		"\xCE\x6D" => "\xE5\xA7\xB2",		"\xCE\x6E" => "\xE5\xA7\xB7",		"\xCE\x6F" => "\xE5\xA7\x9B",		"\xCE\x70" => "\xE5\xA7\xA9",		"\xCE\x71" => "\xE5\xA7\xB3",		"\xCE\x72" => "\xE5\xA7\xB5",		"\xCE\x73" => "\xE5\xA7\xA0",		"\xCE\x74" => "\xE5\xA7\xBE",		"\xCE\x75" => "\xE5\xA7\xB4",		"\xCE\x76" => "\xE5\xA7\xAD",		"\xCE\x77" => "\xE5\xAE\xA8",		"\xCE\x78" => "\xE5\xB1\x8C",		"\xCE\x79" => "\xE5\xB3\x90",		"\xCE\x7A" => "\xE5\xB3\x98",		"\xCE\x7B" => "\xE5\xB3\x8C",		"\xCE\x7C" => "\xE5\xB3\x97",		"\xCE\x7D" => "\xE5\xB3\x8B",		"\xCE\x7E" => "\xE5\xB3\x9B",		"\xCE\xA1" => "\xE5\xB3\x9E",		"\xCE\xA2" => "\xE5\xB3\x9A",		"\xCE\xA3" => "\xE5\xB3\x89",		"\xCE\xA4" => "\xE5\xB3\x87",		"\xCE\xA5" => "\xE5\xB3\x8A",		"\xCE\xA6" => "\xE5\xB3\x96",		"\xCE\xA7" => "\xE5\xB3\x93",		"\xCE\xA8" => "\xE5\xB3\x94",		"\xCE\xA9" => "\xE5\xB3\x8F",		"\xCE\xAA" => "\xE5\xB3\x88",		"\xCE\xAB" => "\xE5\xB3\x86",		"\xCE\xAC" => "\xE5\xB3\x8E",		"\xCE\xAD" => "\xE5\xB3\x9F",		"\xCE\xAE" => "\xE5\xB3\xB8",		"\xCE\xAF" => "\xE5\xB7\xB9",		"\xCE\xB0" => "\xE5\xB8\xA1",		"\xCE\xB1" => "\xE5\xB8\xA2",		"\xCE\xB2" => "\xE5\xB8\xA3",		"\xCE\xB3" => "\xE5\xB8\xA0",		"\xCE\xB4" => "\xE5\xB8\xA4",		"\xCE\xB5" => "\xE5\xBA\xB0",		"\xCE\xB6" => "\xE5\xBA\xA4",		"\xCE\xB7" => "\xE5\xBA\xA2",		"\xCE\xB8" => "\xE5\xBA\x9B",		"\xCE\xB9" => "\xE5\xBA\xA3",		"\xCE\xBA" => "\xE5\xBA\xA5",		"\xCE\xBB" => "\xE5\xBC\x87",		"\xCE\xBC" => "\xE5\xBC\xAE",		"\xCE\xBD" => "\xE5\xBD\x96",		"\xCE\xBE" => "\xE5\xBE\x86",		"\xCE\xBF" => "\xE6\x80\xB7",		"\xCE\xC0" => "\xE6\x80\xB9",		"\xCE\xC1" => "\xE6\x81\x94",		"\xCE\xC2" => "\xE6\x81\xB2",		"\xCE\xC3" => "\xE6\x81\x9E",		"\xCE\xC4" => "\xE6\x81\x85",		"\xCE\xC5" => "\xE6\x81\x93",		"\xCE\xC6" => "\xE6\x81\x87",		"\xCE\xC7" => "\xE6\x81\x89",		"\xCE\xC8" => "\xE6\x81\x9B",		"\xCE\xC9" => "\xE6\x81\x8C",		"\xCE\xCA" => "\xE6\x81\x80",		"\xCE\xCB" => "\xE6\x81\x82",		"\xCE\xCC" => "\xE6\x81\x9F",		"\xCE\xCD" => "\xE6\x80\xA4",		"\xCE\xCE" => "\xE6\x81\x84",		"\xCE\xCF" => "\xE6\x81\x98",		"\xCE\xD0" => "\xE6\x81\xA6",		"\xCE\xD1" => "\xE6\x81\xAE",		"\xCE\xD2" => "\xE6\x89\x82",		"\xCE\xD3" => "\xE6\x89\x83",		"\xCE\xD4" => "\xE6\x8B\x8F",		"\xCE\xD5" => "\xE6\x8C\x8D",		"\xCE\xD6" => "\xE6\x8C\x8B",		"\xCE\xD7" => "\xE6\x8B\xB5",		"\xCE\xD8" => "\xE6\x8C\x8E",		"\xCE\xD9" => "\xE6\x8C\x83",		"\xCE\xDA" => "\xE6\x8B\xAB",		"\xCE\xDB" => "\xE6\x8B\xB9",		"\xCE\xDC" => "\xE6\x8C\x8F",		"\xCE\xDD" => "\xE6\x8C\x8C",		"\xCE\xDE" => "\xE6\x8B\xB8",		"\xCE\xDF" => "\xE6\x8B\xB6",		"\xCE\xE0" => "\xE6\x8C\x80",		"\xCE\xE1" => "\xE6\x8C\x93",		"\xCE\xE2" => "\xE6\x8C\x94",		"\xCE\xE3" => "\xE6\x8B\xBA",		"\xCE\xE4" => "\xE6\x8C\x95",		"\xCE\xE5" => "\xE6\x8B\xBB",		"\xCE\xE6" => "\xE6\x8B\xB0",		"\xCE\xE7" => "\xE6\x95\x81",		"\xCE\xE8" => "\xE6\x95\x83",		"\xCE\xE9" => "\xE6\x96\xAA",		"\xCE\xEA" => "\xE6\x96\xBF",		"\xCE\xEB" => "\xE6\x98\xB6",		"\xCE\xEC" => "\xE6\x98\xA1",		"\xCE\xED" => "\xE6\x98\xB2",		"\xCE\xEE" => "\xE6\x98\xB5",		"\xCE\xEF" => "\xE6\x98\x9C",		"\xCE\xF0" => "\xE6\x98\xA6",		"\xCE\xF1" => "\xE6\x98\xA2",		"\xCE\xF2" => "\xE6\x98\xB3",		"\xCE\xF3" => "\xE6\x98\xAB",		"\xCE\xF4" => "\xE6\x98\xBA",		"\xCE\xF5" => "\xE6\x98\x9D",		"\xCE\xF6" => "\xE6\x98\xB4",		"\xCE\xF7" => "\xE6\x98\xB9",		"\xCE\xF8" => "\xE6\x98\xAE",		"\xCE\xF9" => "\xE6\x9C\x8F",		"\xCE\xFA" => "\xE6\x9C\x90",		"\xCE\xFB" => "\xE6\x9F\x81",		"\xCE\xFC" => "\xE6\x9F\xB2",		"\xCE\xFD" => "\xE6\x9F\x88",		"\xCE\xFE" => "\xE6\x9E\xBA",		"\xCF\x40" => "\xE6\x9F\x9C",		"\xCF\x41" => "\xE6\x9E\xBB",		"\xCF\x42" => "\xE6\x9F\xB8",		"\xCF\x43" => "\xE6\x9F\x98",		"\xCF\x44" => "\xE6\x9F\x80",		"\xCF\x45" => "\xE6\x9E\xB7",		"\xCF\x46" => "\xE6\x9F\x85",		"\xCF\x47" => "\xE6\x9F\xAB",		"\xCF\x48" => "\xE6\x9F\xA4",		"\xCF\x49" => "\xE6\x9F\x9F",		"\xCF\x4A" => "\xE6\x9E\xB5",		"\xCF\x4B" => "\xE6\x9F\x8D",		"\xCF\x4C" => "\xE6\x9E\xB3",		"\xCF\x4D" => "\xE6\x9F\xB7",		"\xCF\x4E" => "\xE6\x9F\xB6",		"\xCF\x4F" => "\xE6\x9F\xAE",		"\xCF\x50" => "\xE6\x9F\xA3",		"\xCF\x51" => "\xE6\x9F\x82",		"\xCF\x52" => "\xE6\x9E\xB9",		"\xCF\x53" => "\xE6\x9F\x8E",		"\xCF\x54" => "\xE6\x9F\xA7",		"\xCF\x55" => "\xE6\x9F\xB0",		"\xCF\x56" => "\xE6\x9E\xB2",		"\xCF\x57" => "\xE6\x9F\xBC",		"\xCF\x58" => "\xE6\x9F\x86",		"\xCF\x59" => "\xE6\x9F\xAD",		"\xCF\x5A" => "\xE6\x9F\x8C",		"\xCF\x5B" => "\xE6\x9E\xAE",		"\xCF\x5C" => "\xE6\x9F\xA6",		"\xCF\x5D" => "\xE6\x9F\x9B",		"\xCF\x5E" => "\xE6\x9F\xBA",		"\xCF\x5F" => "\xE6\x9F\x89",		"\xCF\x60" => "\xE6\x9F\x8A",		"\xCF\x61" => "\xE6\x9F\x83",		"\xCF\x62" => "\xE6\x9F\xAA",		"\xCF\x63" => "\xE6\x9F\x8B",		"\xCF\x64" => "\xE6\xAC\xA8",		"\xCF\x65" => "\xE6\xAE\x82",		"\xCF\x66" => "\xE6\xAE\x84",		"\xCF\x67" => "\xE6\xAE\xB6",		"\xCF\x68" => "\xE6\xAF\x96",		"\xCF\x69" => "\xE6\xAF\x98",		"\xCF\x6A" => "\xE6\xAF\xA0",		"\xCF\x6B" => "\xE6\xB0\xA0",		"\xCF\x6C" => "\xE6\xB0\xA1",		"\xCF\x6D" => "\xE6\xB4\xA8",		"\xCF\x6E" => "\xE6\xB4\xB4",		"\xCF\x6F" => "\xE6\xB4\xAD",		"\xCF\x70" => "\xE6\xB4\x9F",		"\xCF\x71" => "\xE6\xB4\xBC",		"\xCF\x72" => "\xE6\xB4\xBF",		"\xCF\x73" => "\xE6\xB4\x92",		"\xCF\x74" => "\xE6\xB4\x8A",		"\xCF\x75" => "\xE6\xB3\x9A",		"\xCF\x76" => "\xE6\xB4\xB3",		"\xCF\x77" => "\xE6\xB4\x84",		"\xCF\x78" => "\xE6\xB4\x99",		"\xCF\x79" => "\xE6\xB4\xBA",		"\xCF\x7A" => "\xE6\xB4\x9A",		"\xCF\x7B" => "\xE6\xB4\x91",		"\xCF\x7C" => "\xE6\xB4\x80",		"\xCF\x7D" => "\xE6\xB4\x9D",		"\xCF\x7E" => "\xE6\xB5\x82",		"\xCF\xA1" => "\xE6\xB4\x81",		"\xCF\xA2" => "\xE6\xB4\x98",		"\xCF\xA3" => "\xE6\xB4\xB7",		"\xCF\xA4" => "\xE6\xB4\x83",		"\xCF\xA5" => "\xE6\xB4\x8F",		"\xCF\xA6" => "\xE6\xB5\x80",		"\xCF\xA7" => "\xE6\xB4\x87",		"\xCF\xA8" => "\xE6\xB4\xA0",		"\xCF\xA9" => "\xE6\xB4\xAC",		"\xCF\xAA" => "\xE6\xB4\x88",		"\xCF\xAB" => "\xE6\xB4\xA2",		"\xCF\xAC" => "\xE6\xB4\x89",		"\xCF\xAD" => "\xE6\xB4\x90",		"\xCF\xAE" => "\xE7\x82\xB7",		"\xCF\xAF" => "\xE7\x82\x9F",		"\xCF\xB0" => "\xE7\x82\xBE",		"\xCF\xB1" => "\xE7\x82\xB1",		"\xCF\xB2" => "\xE7\x82\xB0",		"\xCF\xB3" => "\xE7\x82\xA1",		"\xCF\xB4" => "\xE7\x82\xB4",		"\xCF\xB5" => "\xE7\x82\xB5",		"\xCF\xB6" => "\xE7\x82\xA9",		"\xCF\xB7" => "\xE7\x89\x81",		"\xCF\xB8" => "\xE7\x89\x89",		"\xCF\xB9" => "\xE7\x89\x8A",		"\xCF\xBA" => "\xE7\x89\xAC",		"\xCF\xBB" => "\xE7\x89\xB0",		"\xCF\xBC" => "\xE7\x89\xB3",		"\xCF\xBD" => "\xE7\x89\xAE",		"\xCF\xBE" => "\xE7\x8B\x8A",		"\xCF\xBF" => "\xE7\x8B\xA4",		"\xCF\xC0" => "\xE7\x8B\xA8",		"\xCF\xC1" => "\xE7\x8B\xAB",		"\xCF\xC2" => "\xE7\x8B\x9F",		"\xCF\xC3" => "\xE7\x8B\xAA",		"\xCF\xC4" => "\xE7\x8B\xA6",		"\xCF\xC5" => "\xE7\x8B\xA3",		"\xCF\xC6" => "\xE7\x8E\x85",		"\xCF\xC7" => "\xE7\x8F\x8C",		"\xCF\xC8" => "\xE7\x8F\x82",		"\xCF\xC9" => "\xE7\x8F\x88",		"\xCF\xCA" => "\xE7\x8F\x85",		"\xCF\xCB" => "\xE7\x8E\xB9",		"\xCF\xCC" => "\xE7\x8E\xB6",		"\xCF\xCD" => "\xE7\x8E\xB5",		"\xCF\xCE" => "\xE7\x8E\xB4",		"\xCF\xCF" => "\xE7\x8F\xAB",		"\xCF\xD0" => "\xE7\x8E\xBF",		"\xCF\xD1" => "\xE7\x8F\x87",		"\xCF\xD2" => "\xE7\x8E\xBE",		"\xCF\xD3" => "\xE7\x8F\x83",		"\xCF\xD4" => "\xE7\x8F\x86",		"\xCF\xD5" => "\xE7\x8E\xB8",		"\xCF\xD6" => "\xE7\x8F\x8B",		"\xCF\xD7" => "\xE7\x93\xAC",		"\xCF\xD8" => "\xE7\x93\xAE",		"\xCF\xD9" => "\xE7\x94\xAE",		"\xCF\xDA" => "\xE7\x95\x87",		"\xCF\xDB" => "\xE7\x95\x88",		"\xCF\xDC" => "\xE7\x96\xA7",		"\xCF\xDD" => "\xE7\x96\xAA",		"\xCF\xDE" => "\xE7\x99\xB9",		"\xCF\xDF" => "\xE7\x9B\x84",		"\xCF\xE0" => "\xE7\x9C\x88",		"\xCF\xE1" => "\xE7\x9C\x83",		"\xCF\xE2" => "\xE7\x9C\x84",		"\xCF\xE3" => "\xE7\x9C\x85",		"\xCF\xE4" => "\xE7\x9C\x8A",		"\xCF\xE5" => "\xE7\x9B\xB7",		"\xCF\xE6" => "\xE7\x9B\xBB",		"\xCF\xE7" => "\xE7\x9B\xBA",		"\xCF\xE8" => "\xE7\x9F\xA7",		"\xCF\xE9" => "\xE7\x9F\xA8",		"\xCF\xEA" => "\xE7\xA0\x86",		"\xCF\xEB" => "\xE7\xA0\x91",		"\xCF\xEC" => "\xE7\xA0\x92",		"\xCF\xED" => "\xE7\xA0\x85",		"\xCF\xEE" => "\xE7\xA0\x90",		"\xCF\xEF" => "\xE7\xA0\x8F",		"\xCF\xF0" => "\xE7\xA0\x8E",		"\xCF\xF1" => "\xE7\xA0\x89",		"\xCF\xF2" => "\xE7\xA0\x83",		"\xCF\xF3" => "\xE7\xA0\x93",		"\xCF\xF4" => "\xE7\xA5\x8A",		"\xCF\xF5" => "\xE7\xA5\x8C",		"\xCF\xF6" => "\xE7\xA5\x8B",		"\xCF\xF7" => "\xE7\xA5\x85",		"\xCF\xF8" => "\xE7\xA5\x84",		"\xCF\xF9" => "\xE7\xA7\x95",		"\xCF\xFA" => "\xE7\xA7\x8D",		"\xCF\xFB" => "\xE7\xA7\x8F",		"\xCF\xFC" => "\xE7\xA7\x96",		"\xCF\xFD" => "\xE7\xA7\x8E",		"\xCF\xFE" => "\xE7\xAA\x80",		"\xD0\x40" => "\xE7\xA9\xBE",		"\xD0\x41" => "\xE7\xAB\x91",		"\xD0\x42" => "\xE7\xAC\x80",		"\xD0\x43" => "\xE7\xAC\x81",		"\xD0\x44" => "\xE7\xB1\xBA",		"\xD0\x45" => "\xE7\xB1\xB8",		"\xD0\x46" => "\xE7\xB1\xB9",		"\xD0\x47" => "\xE7\xB1\xBF",		"\xD0\x48" => "\xE7\xB2\x80",		"\xD0\x49" => "\xE7\xB2\x81",		"\xD0\x4A" => "\xE7\xB4\x83",		"\xD0\x4B" => "\xE7\xB4\x88",		"\xD0\x4C" => "\xE7\xB4\x81",		"\xD0\x4D" => "\xE7\xBD\x98",		"\xD0\x4E" => "\xE7\xBE\x91",		"\xD0\x4F" => "\xE7\xBE\x8D",		"\xD0\x50" => "\xE7\xBE\xBE",		"\xD0\x51" => "\xE8\x80\x87",		"\xD0\x52" => "\xE8\x80\x8E",		"\xD0\x53" => "\xE8\x80\x8F",		"\xD0\x54" => "\xE8\x80\x94",		"\xD0\x55" => "\xE8\x80\xB7",		"\xD0\x56" => "\xE8\x83\x98",		"\xD0\x57" => "\xE8\x83\x87",		"\xD0\x58" => "\xE8\x83\xA0",		"\xD0\x59" => "\xE8\x83\x91",		"\xD0\x5A" => "\xE8\x83\x88",		"\xD0\x5B" => "\xE8\x83\x82",		"\xD0\x5C" => "\xE8\x83\x90",		"\xD0\x5D" => "\xE8\x83\x85",		"\xD0\x5E" => "\xE8\x83\xA3",		"\xD0\x5F" => "\xE8\x83\x99",		"\xD0\x60" => "\xE8\x83\x9C",		"\xD0\x61" => "\xE8\x83\x8A",		"\xD0\x62" => "\xE8\x83\x95",		"\xD0\x63" => "\xE8\x83\x89",		"\xD0\x64" => "\xE8\x83\x8F",		"\xD0\x65" => "\xE8\x83\x97",		"\xD0\x66" => "\xE8\x83\xA6",		"\xD0\x67" => "\xE8\x83\x8D",		"\xD0\x68" => "\xE8\x87\xBF",		"\xD0\x69" => "\xE8\x88\xA1",		"\xD0\x6A" => "\xE8\x8A\x94",		"\xD0\x6B" => "\xE8\x8B\x99",		"\xD0\x6C" => "\xE8\x8B\xBE",		"\xD0\x6D" => "\xE8\x8B\xB9",		"\xD0\x6E" => "\xE8\x8C\x87",		"\xD0\x6F" => "\xE8\x8B\xA8",		"\xD0\x70" => "\xE8\x8C\x80",		"\xD0\x71" => "\xE8\x8B\x95",		"\xD0\x72" => "\xE8\x8C\xBA",		"\xD0\x73" => "\xE8\x8B\xAB",		"\xD0\x74" => "\xE8\x8B\x96",		"\xD0\x75" => "\xE8\x8B\xB4",		"\xD0\x76" => "\xE8\x8B\xAC",		"\xD0\x77" => "\xE8\x8B\xA1",		"\xD0\x78" => "\xE8\x8B\xB2",		"\xD0\x79" => "\xE8\x8B\xB5",		"\xD0\x7A" => "\xE8\x8C\x8C",		"\xD0\x7B" => "\xE8\x8B\xBB",		"\xD0\x7C" => "\xE8\x8B\xB6",		"\xD0\x7D" => "\xE8\x8B\xB0",		"\xD0\x7E" => "\xE8\x8B\xAA",		"\xD0\xA1" => "\xE8\x8B\xA4",		"\xD0\xA2" => "\xE8\x8B\xA0",		"\xD0\xA3" => "\xE8\x8B\xBA",		"\xD0\xA4" => "\xE8\x8B\xB3",		"\xD0\xA5" => "\xE8\x8B\xAD",		"\xD0\xA6" => "\xE8\x99\xB7",		"\xD0\xA7" => "\xE8\x99\xB4",		"\xD0\xA8" => "\xE8\x99\xBC",		"\xD0\xA9" => "\xE8\x99\xB3",		"\xD0\xAA" => "\xE8\xA1\x81",		"\xD0\xAB" => "\xE8\xA1\x8E",		"\xD0\xAC" => "\xE8\xA1\xA7",		"\xD0\xAD" => "\xE8\xA1\xAA",		"\xD0\xAE" => "\xE8\xA1\xA9",		"\xD0\xAF" => "\xE8\xA7\x93",		"\xD0\xB0" => "\xE8\xA8\x84",		"\xD0\xB1" => "\xE8\xA8\x87",		"\xD0\xB2" => "\xE8\xB5\xB2",		"\xD0\xB3" => "\xE8\xBF\xA3",		"\xD0\xB4" => "\xE8\xBF\xA1",		"\xD0\xB5" => "\xE8\xBF\xAE",		"\xD0\xB6" => "\xE8\xBF\xA0",		"\xD0\xB7" => "\xE9\x83\xB1",		"\xD0\xB8" => "\xE9\x82\xBD",		"\xD0\xB9" => "\xE9\x82\xBF",		"\xD0\xBA" => "\xE9\x83\x95",		"\xD0\xBB" => "\xE9\x83\x85",		"\xD0\xBC" => "\xE9\x82\xBE",		"\xD0\xBD" => "\xE9\x83\x87",		"\xD0\xBE" => "\xE9\x83\x8B",		"\xD0\xBF" => "\xE9\x83\x88",		"\xD0\xC0" => "\xE9\x87\x94",		"\xD0\xC1" => "\xE9\x87\x93",		"\xD0\xC2" => "\xE9\x99\x94",		"\xD0\xC3" => "\xE9\x99\x8F",		"\xD0\xC4" => "\xE9\x99\x91",		"\xD0\xC5" => "\xE9\x99\x93",		"\xD0\xC6" => "\xE9\x99\x8A",		"\xD0\xC7" => "\xE9\x99\x8E",		"\xD0\xC8" => "\xE5\x80\x9E",		"\xD0\xC9" => "\xE5\x80\x85",		"\xD0\xCA" => "\xE5\x80\x87",		"\xD0\xCB" => "\xE5\x80\x93",		"\xD0\xCC" => "\xE5\x80\xA2",		"\xD0\xCD" => "\xE5\x80\xB0",		"\xD0\xCE" => "\xE5\x80\x9B",		"\xD0\xCF" => "\xE4\xBF\xB5",		"\xD0\xD0" => "\xE4\xBF\xB4",		"\xD0\xD1" => "\xE5\x80\xB3",		"\xD0\xD2" => "\xE5\x80\xB7",		"\xD0\xD3" => "\xE5\x80\xAC",		"\xD0\xD4" => "\xE4\xBF\xB6",		"\xD0\xD5" => "\xE4\xBF\xB7",		"\xD0\xD6" => "\xE5\x80\x97",		"\xD0\xD7" => "\xE5\x80\x9C",		"\xD0\xD8" => "\xE5\x80\xA0",		"\xD0\xD9" => "\xE5\x80\xA7",		"\xD0\xDA" => "\xE5\x80\xB5",		"\xD0\xDB" => "\xE5\x80\xAF",		"\xD0\xDC" => "\xE5\x80\xB1",		"\xD0\xDD" => "\xE5\x80\x8E",		"\xD0\xDE" => "\xE5\x85\x9A",		"\xD0\xDF" => "\xE5\x86\x94",		"\xD0\xE0" => "\xE5\x86\x93",		"\xD0\xE1" => "\xE5\x87\x8A",		"\xD0\xE2" => "\xE5\x87\x84",		"\xD0\xE3" => "\xE5\x87\x85",		"\xD0\xE4" => "\xE5\x87\x88",		"\xD0\xE5" => "\xE5\x87\x8E",		"\xD0\xE6" => "\xE5\x89\xA1",		"\xD0\xE7" => "\xE5\x89\x9A",		"\xD0\xE8" => "\xE5\x89\x92",		"\xD0\xE9" => "\xE5\x89\x9E",		"\xD0\xEA" => "\xE5\x89\x9F",		"\xD0\xEB" => "\xE5\x89\x95",		"\xD0\xEC" => "\xE5\x89\xA2",		"\xD0\xED" => "\xE5\x8B\x8D",		"\xD0\xEE" => "\xE5\x8C\x8E",		"\xD0\xEF" => "\xE5\x8E\x9E",		"\xD0\xF0" => "\xE5\x94\xA6",		"\xD0\xF1" => "\xE5\x93\xA2",		"\xD0\xF2" => "\xE5\x94\x97",		"\xD0\xF3" => "\xE5\x94\x92",		"\xD0\xF4" => "\xE5\x93\xA7",		"\xD0\xF5" => "\xE5\x93\xB3",		"\xD0\xF6" => "\xE5\x93\xA4",		"\xD0\xF7" => "\xE5\x94\x9A",		"\xD0\xF8" => "\xE5\x93\xBF",		"\xD0\xF9" => "\xE5\x94\x84",		"\xD0\xFA" => "\xE5\x94\x88",		"\xD0\xFB" => "\xE5\x93\xAB",		"\xD0\xFC" => "\xE5\x94\x91",		"\xD0\xFD" => "\xE5\x94\x85",		"\xD0\xFE" => "\xE5\x93\xB1",		"\xD1\x40" => "\xE5\x94\x8A",		"\xD1\x41" => "\xE5\x93\xBB",		"\xD1\x42" => "\xE5\x93\xB7",		"\xD1\x43" => "\xE5\x93\xB8",		"\xD1\x44" => "\xE5\x93\xA0",		"\xD1\x45" => "\xE5\x94\x8E",		"\xD1\x46" => "\xE5\x94\x83",		"\xD1\x47" => "\xE5\x94\x8B",		"\xD1\x48" => "\xE5\x9C\x81",		"\xD1\x49" => "\xE5\x9C\x82",		"\xD1\x4A" => "\xE5\x9F\x8C",		"\xD1\x4B" => "\xE5\xA0\xB2",		"\xD1\x4C" => "\xE5\x9F\x95",		"\xD1\x4D" => "\xE5\x9F\x92",		"\xD1\x4E" => "\xE5\x9E\xBA",		"\xD1\x4F" => "\xE5\x9F\x86",		"\xD1\x50" => "\xE5\x9E\xBD",		"\xD1\x51" => "\xE5\x9E\xBC",		"\xD1\x52" => "\xE5\x9E\xB8",		"\xD1\x53" => "\xE5\x9E\xB6",		"\xD1\x54" => "\xE5\x9E\xBF",		"\xD1\x55" => "\xE5\x9F\x87",		"\xD1\x56" => "\xE5\x9F\x90",		"\xD1\x57" => "\xE5\x9E\xB9",		"\xD1\x58" => "\xE5\x9F\x81",		"\xD1\x59" => "\xE5\xA4\x8E",		"\xD1\x5A" => "\xE5\xA5\x8A",		"\xD1\x5B" => "\xE5\xA8\x99",		"\xD1\x5C" => "\xE5\xA8\x96",		"\xD1\x5D" => "\xE5\xA8\xAD",		"\xD1\x5E" => "\xE5\xA8\xAE",		"\xD1\x5F" => "\xE5\xA8\x95",		"\xD1\x60" => "\xE5\xA8\x8F",		"\xD1\x61" => "\xE5\xA8\x97",		"\xD1\x62" => "\xE5\xA8\x8A",		"\xD1\x63" => "\xE5\xA8\x9E",		"\xD1\x64" => "\xE5\xA8\xB3",		"\xD1\x65" => "\xE5\xAD\xAC",		"\xD1\x66" => "\xE5\xAE\xA7",		"\xD1\x67" => "\xE5\xAE\xAD",		"\xD1\x68" => "\xE5\xAE\xAC",		"\xD1\x69" => "\xE5\xB0\x83",		"\xD1\x6A" => "\xE5\xB1\x96",		"\xD1\x6B" => "\xE5\xB1\x94",		"\xD1\x6C" => "\xE5\xB3\xAC",		"\xD1\x6D" => "\xE5\xB3\xBF",		"\xD1\x6E" => "\xE5\xB3\xAE",		"\xD1\x6F" => "\xE5\xB3\xB1",		"\xD1\x70" => "\xE5\xB3\xB7",		"\xD1\x71" => "\xE5\xB4\x80",		"\xD1\x72" => "\xE5\xB3\xB9",		"\xD1\x73" => "\xE5\xB8\xA9",		"\xD1\x74" => "\xE5\xB8\xA8",		"\xD1\x75" => "\xE5\xBA\xA8",		"\xD1\x76" => "\xE5\xBA\xAE",		"\xD1\x77" => "\xE5\xBA\xAA",		"\xD1\x78" => "\xE5\xBA\xAC",		"\xD1\x79" => "\xE5\xBC\xB3",		"\xD1\x7A" => "\xE5\xBC\xB0",		"\xD1\x7B" => "\xE5\xBD\xA7",		"\xD1\x7C" => "\xE6\x81\x9D",		"\xD1\x7D" => "\xE6\x81\x9A",		"\xD1\x7E" => "\xE6\x81\xA7",		"\xD1\xA1" => "\xE6\x81\x81",		"\xD1\xA2" => "\xE6\x82\xA2",		"\xD1\xA3" => "\xE6\x82\x88",		"\xD1\xA4" => "\xE6\x82\x80",		"\xD1\xA5" => "\xE6\x82\x92",		"\xD1\xA6" => "\xE6\x82\x81",		"\xD1\xA7" => "\xE6\x82\x9D",		"\xD1\xA8" => "\xE6\x82\x83",		"\xD1\xA9" => "\xE6\x82\x95",		"\xD1\xAA" => "\xE6\x82\x9B",		"\xD1\xAB" => "\xE6\x82\x97",		"\xD1\xAC" => "\xE6\x82\x87",		"\xD1\xAD" => "\xE6\x82\x9C",		"\xD1\xAE" => "\xE6\x82\x8E",		"\xD1\xAF" => "\xE6\x88\x99",		"\xD1\xB0" => "\xE6\x89\x86",		"\xD1\xB1" => "\xE6\x8B\xB2",		"\xD1\xB2" => "\xE6\x8C\x90",		"\xD1\xB3" => "\xE6\x8D\x96",		"\xD1\xB4" => "\xE6\x8C\xAC",		"\xD1\xB5" => "\xE6\x8D\x84",		"\xD1\xB6" => "\xE6\x8D\x85",		"\xD1\xB7" => "\xE6\x8C\xB6",		"\xD1\xB8" => "\xE6\x8D\x83",		"\xD1\xB9" => "\xE6\x8F\xA4",		"\xD1\xBA" => "\xE6\x8C\xB9",		"\xD1\xBB" => "\xE6\x8D\x8B",		"\xD1\xBC" => "\xE6\x8D\x8A",		"\xD1\xBD" => "\xE6\x8C\xBC",		"\xD1\xBE" => "\xE6\x8C\xA9",		"\xD1\xBF" => "\xE6\x8D\x81",		"\xD1\xC0" => "\xE6\x8C\xB4",		"\xD1\xC1" => "\xE6\x8D\x98",		"\xD1\xC2" => "\xE6\x8D\x94",		"\xD1\xC3" => "\xE6\x8D\x99",		"\xD1\xC4" => "\xE6\x8C\xAD",		"\xD1\xC5" => "\xE6\x8D\x87",		"\xD1\xC6" => "\xE6\x8C\xB3",		"\xD1\xC7" => "\xE6\x8D\x9A",		"\xD1\xC8" => "\xE6\x8D\x91",		"\xD1\xC9" => "\xE6\x8C\xB8",		"\xD1\xCA" => "\xE6\x8D\x97",		"\xD1\xCB" => "\xE6\x8D\x80",		"\xD1\xCC" => "\xE6\x8D\x88",		"\xD1\xCD" => "\xE6\x95\x8A",		"\xD1\xCE" => "\xE6\x95\x86",		"\xD1\xCF" => "\xE6\x97\x86",		"\xD1\xD0" => "\xE6\x97\x83",		"\xD1\xD1" => "\xE6\x97\x84",		"\xD1\xD2" => "\xE6\x97\x82",		"\xD1\xD3" => "\xE6\x99\x8A",		"\xD1\xD4" => "\xE6\x99\x9F",		"\xD1\xD5" => "\xE6\x99\x87",		"\xD1\xD6" => "\xE6\x99\x91",		"\xD1\xD7" => "\xE6\x9C\x92",		"\xD1\xD8" => "\xE6\x9C\x93",		"\xD1\xD9" => "\xE6\xA0\x9F",		"\xD1\xDA" => "\xE6\xA0\x9A",		"\xD1\xDB" => "\xE6\xA1\x89",		"\xD1\xDC" => "\xE6\xA0\xB2",		"\xD1\xDD" => "\xE6\xA0\xB3",		"\xD1\xDE" => "\xE6\xA0\xBB",		"\xD1\xDF" => "\xE6\xA1\x8B",		"\xD1\xE0" => "\xE6\xA1\x8F",		"\xD1\xE1" => "\xE6\xA0\x96",		"\xD1\xE2" => "\xE6\xA0\xB1",		"\xD1\xE3" => "\xE6\xA0\x9C",		"\xD1\xE4" => "\xE6\xA0\xB5",		"\xD1\xE5" => "\xE6\xA0\xAB",		"\xD1\xE6" => "\xE6\xA0\xAD",		"\xD1\xE7" => "\xE6\xA0\xAF",		"\xD1\xE8" => "\xE6\xA1\x8E",		"\xD1\xE9" => "\xE6\xA1\x84",		"\xD1\xEA" => "\xE6\xA0\xB4",		"\xD1\xEB" => "\xE6\xA0\x9D",		"\xD1\xEC" => "\xE6\xA0\x92",		"\xD1\xED" => "\xE6\xA0\x94",		"\xD1\xEE" => "\xE6\xA0\xA6",		"\xD1\xEF" => "\xE6\xA0\xA8",		"\xD1\xF0" => "\xE6\xA0\xAE",		"\xD1\xF1" => "\xE6\xA1\x8D",		"\xD1\xF2" => "\xE6\xA0\xBA",		"\xD1\xF3" => "\xE6\xA0\xA5",		"\xD1\xF4" => "\xE6\xA0\xA0",		"\xD1\xF5" => "\xE6\xAC\xAC",		"\xD1\xF6" => "\xE6\xAC\xAF",		"\xD1\xF7" => "\xE6\xAC\xAD",		"\xD1\xF8" => "\xE6\xAC\xB1",		"\xD1\xF9" => "\xE6\xAC\xB4",		"\xD1\xFA" => "\xE6\xAD\xAD",		"\xD1\xFB" => "\xE8\x82\x82",		"\xD1\xFC" => "\xE6\xAE\x88",		"\xD1\xFD" => "\xE6\xAF\xA6",		"\xD1\xFE" => "\xE6\xAF\xA4",		"\xD2\x40" => "\xE6\xAF\xA8",		"\xD2\x41" => "\xE6\xAF\xA3",		"\xD2\x42" => "\xE6\xAF\xA2",		"\xD2\x43" => "\xE6\xAF\xA7",		"\xD2\x44" => "\xE6\xB0\xA5",		"\xD2\x45" => "\xE6\xB5\xBA",		"\xD2\x46" => "\xE6\xB5\xA3",		"\xD2\x47" => "\xE6\xB5\xA4",		"\xD2\x48" => "\xE6\xB5\xB6",		"\xD2\x49" => "\xE6\xB4\x8D",		"\xD2\x4A" => "\xE6\xB5\xA1",		"\xD2\x4B" => "\xE6\xB6\x92",		"\xD2\x4C" => "\xE6\xB5\x98",		"\xD2\x4D" => "\xE6\xB5\xA2",		"\xD2\x4E" => "\xE6\xB5\xAD",		"\xD2\x4F" => "\xE6\xB5\xAF",		"\xD2\x50" => "\xE6\xB6\x91",		"\xD2\x51" => "\xE6\xB6\x8D",		"\xD2\x52" => "\xE6\xB7\xAF",		"\xD2\x53" => "\xE6\xB5\xBF",		"\xD2\x54" => "\xE6\xB6\x86",		"\xD2\x55" => "\xE6\xB5\x9E",		"\xD2\x56" => "\xE6\xB5\xA7",		"\xD2\x57" => "\xE6\xB5\xA0",		"\xD2\x58" => "\xE6\xB6\x97",		"\xD2\x59" => "\xE6\xB5\xB0",		"\xD2\x5A" => "\xE6\xB5\xBC",		"\xD2\x5B" => "\xE6\xB5\x9F",		"\xD2\x5C" => "\xE6\xB6\x82",		"\xD2\x5D" => "\xE6\xB6\x98",		"\xD2\x5E" => "\xE6\xB4\xAF",		"\xD2\x5F" => "\xE6\xB5\xA8",		"\xD2\x60" => "\xE6\xB6\x8B",		"\xD2\x61" => "\xE6\xB5\xBE",		"\xD2\x62" => "\xE6\xB6\x80",		"\xD2\x63" => "\xE6\xB6\x84",		"\xD2\x64" => "\xE6\xB4\x96",		"\xD2\x65" => "\xE6\xB6\x83",		"\xD2\x66" => "\xE6\xB5\xBB",		"\xD2\x67" => "\xE6\xB5\xBD",		"\xD2\x68" => "\xE6\xB5\xB5",		"\xD2\x69" => "\xE6\xB6\x90",		"\xD2\x6A" => "\xE7\x83\x9C",		"\xD2\x6B" => "\xE7\x83\x93",		"\xD2\x6C" => "\xE7\x83\x91",		"\xD2\x6D" => "\xE7\x83\x9D",		"\xD2\x6E" => "\xE7\x83\x8B",		"\xD2\x6F" => "\xE7\xBC\xB9",		"\xD2\x70" => "\xE7\x83\xA2",		"\xD2\x71" => "\xE7\x83\x97",		"\xD2\x72" => "\xE7\x83\x92",		"\xD2\x73" => "\xE7\x83\x9E",		"\xD2\x74" => "\xE7\x83\xA0",		"\xD2\x75" => "\xE7\x83\x94",		"\xD2\x76" => "\xE7\x83\x8D",		"\xD2\x77" => "\xE7\x83\x85",		"\xD2\x78" => "\xE7\x83\x86",		"\xD2\x79" => "\xE7\x83\x87",		"\xD2\x7A" => "\xE7\x83\x9A",		"\xD2\x7B" => "\xE7\x83\x8E",		"\xD2\x7C" => "\xE7\x83\xA1",		"\xD2\x7D" => "\xE7\x89\x82",		"\xD2\x7E" => "\xE7\x89\xB8",		"\xD2\xA1" => "\xE7\x89\xB7",		"\xD2\xA2" => "\xE7\x89\xB6",		"\xD2\xA3" => "\xE7\x8C\x80",		"\xD2\xA4" => "\xE7\x8B\xBA",		"\xD2\xA5" => "\xE7\x8B\xB4",		"\xD2\xA6" => "\xE7\x8B\xBE",		"\xD2\xA7" => "\xE7\x8B\xB6",		"\xD2\xA8" => "\xE7\x8B\xB3",		"\xD2\xA9" => "\xE7\x8B\xBB",		"\xD2\xAA" => "\xE7\x8C\x81",		"\xD2\xAB" => "\xE7\x8F\x93",		"\xD2\xAC" => "\xE7\x8F\x99",		"\xD2\xAD" => "\xE7\x8F\xA5",		"\xD2\xAE" => "\xE7\x8F\x96",		"\xD2\xAF" => "\xE7\x8E\xBC",		"\xD2\xB0" => "\xE7\x8F\xA7",		"\xD2\xB1" => "\xE7\x8F\xA3",		"\xD2\xB2" => "\xE7\x8F\xA9",		"\xD2\xB3" => "\xE7\x8F\x9C",		"\xD2\xB4" => "\xE7\x8F\x92",		"\xD2\xB5" => "\xE7\x8F\x9B",		"\xD2\xB6" => "\xE7\x8F\x94",		"\xD2\xB7" => "\xE7\x8F\x9D",		"\xD2\xB8" => "\xE7\x8F\x9A",		"\xD2\xB9" => "\xE7\x8F\x97",		"\xD2\xBA" => "\xE7\x8F\x98",		"\xD2\xBB" => "\xE7\x8F\xA8",		"\xD2\xBC" => "\xE7\x93\x9E",		"\xD2\xBD" => "\xE7\x93\x9F",		"\xD2\xBE" => "\xE7\x93\xB4",		"\xD2\xBF" => "\xE7\x93\xB5",		"\xD2\xC0" => "\xE7\x94\xA1",		"\xD2\xC1" => "\xE7\x95\x9B",		"\xD2\xC2" => "\xE7\x95\x9F",		"\xD2\xC3" => "\xE7\x96\xB0",		"\xD2\xC4" => "\xE7\x97\x81",		"\xD2\xC5" => "\xE7\x96\xBB",		"\xD2\xC6" => "\xE7\x97\x84",		"\xD2\xC7" => "\xE7\x97\x80",		"\xD2\xC8" => "\xE7\x96\xBF",		"\xD2\xC9" => "\xE7\x96\xB6",		"\xD2\xCA" => "\xE7\x96\xBA",		"\xD2\xCB" => "\xE7\x9A\x8A",		"\xD2\xCC" => "\xE7\x9B\x89",		"\xD2\xCD" => "\xE7\x9C\x9D",		"\xD2\xCE" => "\xE7\x9C\x9B",		"\xD2\xCF" => "\xE7\x9C\x90",		"\xD2\xD0" => "\xE7\x9C\x93",		"\xD2\xD1" => "\xE7\x9C\x92",		"\xD2\xD2" => "\xE7\x9C\xA3",		"\xD2\xD3" => "\xE7\x9C\x91",		"\xD2\xD4" => "\xE7\x9C\x95",		"\xD2\xD5" => "\xE7\x9C\x99",		"\xD2\xD6" => "\xE7\x9C\x9A",		"\xD2\xD7" => "\xE7\x9C\xA2",		"\xD2\xD8" => "\xE7\x9C\xA7",		"\xD2\xD9" => "\xE7\xA0\xA3",		"\xD2\xDA" => "\xE7\xA0\xAC",		"\xD2\xDB" => "\xE7\xA0\xA2",		"\xD2\xDC" => "\xE7\xA0\xB5",		"\xD2\xDD" => "\xE7\xA0\xAF",		"\xD2\xDE" => "\xE7\xA0\xA8",		"\xD2\xDF" => "\xE7\xA0\xAE",		"\xD2\xE0" => "\xE7\xA0\xAB",		"\xD2\xE1" => "\xE7\xA0\xA1",		"\xD2\xE2" => "\xE7\xA0\xA9",		"\xD2\xE3" => "\xE7\xA0\xB3",		"\xD2\xE4" => "\xE7\xA0\xAA",		"\xD2\xE5" => "\xE7\xA0\xB1",		"\xD2\xE6" => "\xE7\xA5\x94",		"\xD2\xE7" => "\xE7\xA5\x9B",		"\xD2\xE8" => "\xE7\xA5\x8F",		"\xD2\xE9" => "\xE7\xA5\x9C",		"\xD2\xEA" => "\xE7\xA5\x93",		"\xD2\xEB" => "\xE7\xA5\x92",		"\xD2\xEC" => "\xE7\xA5\x91",		"\xD2\xED" => "\xE7\xA7\xAB",		"\xD2\xEE" => "\xE7\xA7\xAC",		"\xD2\xEF" => "\xE7\xA7\xA0",		"\xD2\xF0" => "\xE7\xA7\xAE",		"\xD2\xF1" => "\xE7\xA7\xAD",		"\xD2\xF2" => "\xE7\xA7\xAA",		"\xD2\xF3" => "\xE7\xA7\x9C",		"\xD2\xF4" => "\xE7\xA7\x9E",		"\xD2\xF5" => "\xE7\xA7\x9D",		"\xD2\xF6" => "\xE7\xAA\x86",		"\xD2\xF7" => "\xE7\xAA\x89",		"\xD2\xF8" => "\xE7\xAA\x85",		"\xD2\xF9" => "\xE7\xAA\x8B",		"\xD2\xFA" => "\xE7\xAA\x8C",		"\xD2\xFB" => "\xE7\xAA\x8A",		"\xD2\xFC" => "\xE7\xAA\x87",		"\xD2\xFD" => "\xE7\xAB\x98",		"\xD2\xFE" => "\xE7\xAC\x90",		"\xD3\x40" => "\xE7\xAC\x84",		"\xD3\x41" => "\xE7\xAC\x93",		"\xD3\x42" => "\xE7\xAC\x85",		"\xD3\x43" => "\xE7\xAC\x8F",		"\xD3\x44" => "\xE7\xAC\x88",		"\xD3\x45" => "\xE7\xAC\x8A",		"\xD3\x46" => "\xE7\xAC\x8E",		"\xD3\x47" => "\xE7\xAC\x89",		"\xD3\x48" => "\xE7\xAC\x92",		"\xD3\x49" => "\xE7\xB2\x84",		"\xD3\x4A" => "\xE7\xB2\x91",		"\xD3\x4B" => "\xE7\xB2\x8A",		"\xD3\x4C" => "\xE7\xB2\x8C",		"\xD3\x4D" => "\xE7\xB2\x88",		"\xD3\x4E" => "\xE7\xB2\x8D",		"\xD3\x4F" => "\xE7\xB2\x85",		"\xD3\x50" => "\xE7\xB4\x9E",		"\xD3\x51" => "\xE7\xB4\x9D",		"\xD3\x52" => "\xE7\xB4\x91",		"\xD3\x53" => "\xE7\xB4\x8E",		"\xD3\x54" => "\xE7\xB4\x98",		"\xD3\x55" => "\xE7\xB4\x96",		"\xD3\x56" => "\xE7\xB4\x93",		"\xD3\x57" => "\xE7\xB4\x9F",		"\xD3\x58" => "\xE7\xB4\x92",		"\xD3\x59" => "\xE7\xB4\x8F",		"\xD3\x5A" => "\xE7\xB4\x8C",		"\xD3\x5B" => "\xE7\xBD\x9C",		"\xD3\x5C" => "\xE7\xBD\xA1",		"\xD3\x5D" => "\xE7\xBD\x9E",		"\xD3\x5E" => "\xE7\xBD\xA0",		"\xD3\x5F" => "\xE7\xBD\x9D",		"\xD3\x60" => "\xE7\xBD\x9B",		"\xD3\x61" => "\xE7\xBE\x96",		"\xD3\x62" => "\xE7\xBE\x92",		"\xD3\x63" => "\xE7\xBF\x83",		"\xD3\x64" => "\xE7\xBF\x82",		"\xD3\x65" => "\xE7\xBF\x80",		"\xD3\x66" => "\xE8\x80\x96",		"\xD3\x67" => "\xE8\x80\xBE",		"\xD3\x68" => "\xE8\x80\xB9",		"\xD3\x69" => "\xE8\x83\xBA",		"\xD3\x6A" => "\xE8\x83\xB2",		"\xD3\x6B" => "\xE8\x83\xB9",		"\xD3\x6C" => "\xE8\x83\xB5",		"\xD3\x6D" => "\xE8\x84\x81",		"\xD3\x6E" => "\xE8\x83\xBB",		"\xD3\x6F" => "\xE8\x84\x80",		"\xD3\x70" => "\xE8\x88\x81",		"\xD3\x71" => "\xE8\x88\xAF",		"\xD3\x72" => "\xE8\x88\xA5",		"\xD3\x73" => "\xE8\x8C\xB3",		"\xD3\x74" => "\xE8\x8C\xAD",		"\xD3\x75" => "\xE8\x8D\x84",		"\xD3\x76" => "\xE8\x8C\x99",		"\xD3\x77" => "\xE8\x8D\x91",		"\xD3\x78" => "\xE8\x8C\xA5",		"\xD3\x79" => "\xE8\x8D\x96",		"\xD3\x7A" => "\xE8\x8C\xBF",		"\xD3\x7B" => "\xE8\x8D\x81",		"\xD3\x7C" => "\xE8\x8C\xA6",		"\xD3\x7D" => "\xE8\x8C\x9C",		"\xD3\x7E" => "\xE8\x8C\xA2",		"\xD3\xA1" => "\xE8\x8D\x82",		"\xD3\xA2" => "\xE8\x8D\x8E",		"\xD3\xA3" => "\xE8\x8C\x9B",		"\xD3\xA4" => "\xE8\x8C\xAA",		"\xD3\xA5" => "\xE8\x8C\x88",		"\xD3\xA6" => "\xE8\x8C\xBC",		"\xD3\xA7" => "\xE8\x8D\x8D",		"\xD3\xA8" => "\xE8\x8C\x96",		"\xD3\xA9" => "\xE8\x8C\xA4",		"\xD3\xAA" => "\xE8\x8C\xA0",		"\xD3\xAB" => "\xE8\x8C\xB7",		"\xD3\xAC" => "\xE8\x8C\xAF",		"\xD3\xAD" => "\xE8\x8C\xA9",		"\xD3\xAE" => "\xE8\x8D\x87",		"\xD3\xAF" => "\xE8\x8D\x85",		"\xD3\xB0" => "\xE8\x8D\x8C",		"\xD3\xB1" => "\xE8\x8D\x93",		"\xD3\xB2" => "\xE8\x8C\x9E",		"\xD3\xB3" => "\xE8\x8C\xAC",		"\xD3\xB4" => "\xE8\x8D\x8B",		"\xD3\xB5" => "\xE8\x8C\xA7",		"\xD3\xB6" => "\xE8\x8D\x88",		"\xD3\xB7" => "\xE8\x99\x93",		"\xD3\xB8" => "\xE8\x99\x92",		"\xD3\xB9" => "\xE8\x9A\xA2",		"\xD3\xBA" => "\xE8\x9A\xA8",		"\xD3\xBB" => "\xE8\x9A\x96",		"\xD3\xBC" => "\xE8\x9A\x8D",		"\xD3\xBD" => "\xE8\x9A\x91",		"\xD3\xBE" => "\xE8\x9A\x9E",		"\xD3\xBF" => "\xE8\x9A\x87",		"\xD3\xC0" => "\xE8\x9A\x97",		"\xD3\xC1" => "\xE8\x9A\x86",		"\xD3\xC2" => "\xE8\x9A\x8B",		"\xD3\xC3" => "\xE8\x9A\x9A",		"\xD3\xC4" => "\xE8\x9A\x85",		"\xD3\xC5" => "\xE8\x9A\xA5",		"\xD3\xC6" => "\xE8\x9A\x99",		"\xD3\xC7" => "\xE8\x9A\xA1",		"\xD3\xC8" => "\xE8\x9A\xA7",		"\xD3\xC9" => "\xE8\x9A\x95",		"\xD3\xCA" => "\xE8\x9A\x98",		"\xD3\xCB" => "\xE8\x9A\x8E",		"\xD3\xCC" => "\xE8\x9A\x9D",		"\xD3\xCD" => "\xE8\x9A\x90",		"\xD3\xCE" => "\xE8\x9A\x94",		"\xD3\xCF" => "\xE8\xA1\x83",		"\xD3\xD0" => "\xE8\xA1\x84",		"\xD3\xD1" => "\xE8\xA1\xAD",		"\xD3\xD2" => "\xE8\xA1\xB5",		"\xD3\xD3" => "\xE8\xA1\xB6",		"\xD3\xD4" => "\xE8\xA1\xB2",		"\xD3\xD5" => "\xE8\xA2\x80",		"\xD3\xD6" => "\xE8\xA1\xB1",		"\xD3\xD7" => "\xE8\xA1\xBF",		"\xD3\xD8" => "\xE8\xA1\xAF",		"\xD3\xD9" => "\xE8\xA2\x83",		"\xD3\xDA" => "\xE8\xA1\xBE",		"\xD3\xDB" => "\xE8\xA1\xB4",		"\xD3\xDC" => "\xE8\xA1\xBC",		"\xD3\xDD" => "\xE8\xA8\x92",		"\xD3\xDE" => "\xE8\xB1\x87",		"\xD3\xDF" => "\xE8\xB1\x97",		"\xD3\xE0" => "\xE8\xB1\xBB",		"\xD3\xE1" => "\xE8\xB2\xA4",		"\xD3\xE2" => "\xE8\xB2\xA3",		"\xD3\xE3" => "\xE8\xB5\xB6",		"\xD3\xE4" => "\xE8\xB5\xB8",		"\xD3\xE5" => "\xE8\xB6\xB5",		"\xD3\xE6" => "\xE8\xB6\xB7",		"\xD3\xE7" => "\xE8\xB6\xB6",		"\xD3\xE8" => "\xE8\xBB\x91",		"\xD3\xE9" => "\xE8\xBB\x93",		"\xD3\xEA" => "\xE8\xBF\xBE",		"\xD3\xEB" => "\xE8\xBF\xB5",		"\xD3\xEC" => "\xE9\x80\x82",		"\xD3\xED" => "\xE8\xBF\xBF",		"\xD3\xEE" => "\xE8\xBF\xBB",		"\xD3\xEF" => "\xE9\x80\x84",		"\xD3\xF0" => "\xE8\xBF\xBC",		"\xD3\xF1" => "\xE8\xBF\xB6",		"\xD3\xF2" => "\xE9\x83\x96",		"\xD3\xF3" => "\xE9\x83\xA0",		"\xD3\xF4" => "\xE9\x83\x99",		"\xD3\xF5" => "\xE9\x83\x9A",		"\xD3\xF6" => "\xE9\x83\xA3",		"\xD3\xF7" => "\xE9\x83\x9F",		"\xD3\xF8" => "\xE9\x83\xA5",		"\xD3\xF9" => "\xE9\x83\x98",		"\xD3\xFA" => "\xE9\x83\x9B",		"\xD3\xFB" => "\xE9\x83\x97",		"\xD3\xFC" => "\xE9\x83\x9C",		"\xD3\xFD" => "\xE9\x83\xA4",		"\xD3\xFE" => "\xE9\x85\x90",		"\xD4\x40" => "\xE9\x85\x8E",		"\xD4\x41" => "\xE9\x85\x8F",		"\xD4\x42" => "\xE9\x87\x95",		"\xD4\x43" => "\xE9\x87\xA2",		"\xD4\x44" => "\xE9\x87\x9A",		"\xD4\x45" => "\xE9\x99\x9C",		"\xD4\x46" => "\xE9\x99\x9F",		"\xD4\x47" => "\xE9\x9A\xBC",		"\xD4\x48" => "\xE9\xA3\xA3",		"\xD4\x49" => "\xE9\xAB\x9F",		"\xD4\x4A" => "\xE9\xAC\xAF",		"\xD4\x4B" => "\xE4\xB9\xBF",		"\xD4\x4C" => "\xE5\x81\xB0",		"\xD4\x4D" => "\xE5\x81\xAA",		"\xD4\x4E" => "\xE5\x81\xA1",		"\xD4\x4F" => "\xE5\x81\x9E",		"\xD4\x50" => "\xE5\x81\xA0",		"\xD4\x51" => "\xE5\x81\x93",		"\xD4\x52" => "\xE5\x81\x8B",		"\xD4\x53" => "\xE5\x81\x9D",		"\xD4\x54" => "\xE5\x81\xB2",		"\xD4\x55" => "\xE5\x81\x88",		"\xD4\x56" => "\xE5\x81\x8D",		"\xD4\x57" => "\xE5\x81\x81",		"\xD4\x58" => "\xE5\x81\x9B",		"\xD4\x59" => "\xE5\x81\x8A",		"\xD4\x5A" => "\xE5\x81\xA2",		"\xD4\x5B" => "\xE5\x80\x95",		"\xD4\x5C" => "\xE5\x81\x85",		"\xD4\x5D" => "\xE5\x81\x9F",		"\xD4\x5E" => "\xE5\x81\xA9",		"\xD4\x5F" => "\xE5\x81\xAB",		"\xD4\x60" => "\xE5\x81\xA3",		"\xD4\x61" => "\xE5\x81\xA4",		"\xD4\x62" => "\xE5\x81\x86",		"\xD4\x63" => "\xE5\x81\x80",		"\xD4\x64" => "\xE5\x81\xAE",		"\xD4\x65" => "\xE5\x81\xB3",		"\xD4\x66" => "\xE5\x81\x97",		"\xD4\x67" => "\xE5\x81\x91",		"\xD4\x68" => "\xE5\x87\x90",		"\xD4\x69" => "\xE5\x89\xAB",		"\xD4\x6A" => "\xE5\x89\xAD",		"\xD4\x6B" => "\xE5\x89\xAC",		"\xD4\x6C" => "\xE5\x89\xAE",		"\xD4\x6D" => "\xE5\x8B\x96",		"\xD4\x6E" => "\xE5\x8B\x93",		"\xD4\x6F" => "\xE5\x8C\xAD",		"\xD4\x70" => "\xE5\x8E\x9C",		"\xD4\x71" => "\xE5\x95\xB5",		"\xD4\x72" => "\xE5\x95\xB6",		"\xD4\x73" => "\xE5\x94\xBC",		"\xD4\x74" => "\xE5\x95\x8D",		"\xD4\x75" => "\xE5\x95\x90",		"\xD4\x76" => "\xE5\x94\xB4",		"\xD4\x77" => "\xE5\x94\xAA",		"\xD4\x78" => "\xE5\x95\x91",		"\xD4\x79" => "\xE5\x95\xA2",		"\xD4\x7A" => "\xE5\x94\xB6",		"\xD4\x7B" => "\xE5\x94\xB5",		"\xD4\x7C" => "\xE5\x94\xB0",		"\xD4\x7D" => "\xE5\x95\x92",		"\xD4\x7E" => "\xE5\x95\x85",		"\xD4\xA1" => "\xE5\x94\x8C",		"\xD4\xA2" => "\xE5\x94\xB2",		"\xD4\xA3" => "\xE5\x95\xA5",		"\xD4\xA4" => "\xE5\x95\x8E",		"\xD4\xA5" => "\xE5\x94\xB9",		"\xD4\xA6" => "\xE5\x95\x88",		"\xD4\xA7" => "\xE5\x94\xAD",		"\xD4\xA8" => "\xE5\x94\xBB",		"\xD4\xA9" => "\xE5\x95\x80",		"\xD4\xAA" => "\xE5\x95\x8B",		"\xD4\xAB" => "\xE5\x9C\x8A",		"\xD4\xAC" => "\xE5\x9C\x87",		"\xD4\xAD" => "\xE5\x9F\xBB",		"\xD4\xAE" => "\xE5\xA0\x94",		"\xD4\xAF" => "\xE5\x9F\xA2",		"\xD4\xB0" => "\xE5\x9F\xB6",		"\xD4\xB1" => "\xE5\x9F\x9C",		"\xD4\xB2" => "\xE5\x9F\xB4",		"\xD4\xB3" => "\xE5\xA0\x80",		"\xD4\xB4" => "\xE5\x9F\xAD",		"\xD4\xB5" => "\xE5\x9F\xBD",		"\xD4\xB6" => "\xE5\xA0\x88",		"\xD4\xB7" => "\xE5\x9F\xB8",		"\xD4\xB8" => "\xE5\xA0\x8B",		"\xD4\xB9" => "\xE5\x9F\xB3",		"\xD4\xBA" => "\xE5\x9F\x8F",		"\xD4\xBB" => "\xE5\xA0\x87",		"\xD4\xBC" => "\xE5\x9F\xAE",		"\xD4\xBD" => "\xE5\x9F\xA3",		"\xD4\xBE" => "\xE5\x9F\xB2",		"\xD4\xBF" => "\xE5\x9F\xA5",		"\xD4\xC0" => "\xE5\x9F\xAC",		"\xD4\xC1" => "\xE5\x9F\xA1",		"\xD4\xC2" => "\xE5\xA0\x8E",		"\xD4\xC3" => "\xE5\x9F\xBC",		"\xD4\xC4" => "\xE5\xA0\x90",		"\xD4\xC5" => "\xE5\x9F\xA7",		"\xD4\xC6" => "\xE5\xA0\x81",		"\xD4\xC7" => "\xE5\xA0\x8C",		"\xD4\xC8" => "\xE5\x9F\xB1",		"\xD4\xC9" => "\xE5\x9F\xA9",		"\xD4\xCA" => "\xE5\x9F\xB0",		"\xD4\xCB" => "\xE5\xA0\x8D",		"\xD4\xCC" => "\xE5\xA0\x84",		"\xD4\xCD" => "\xE5\xA5\x9C",		"\xD4\xCE" => "\xE5\xA9\xA0",		"\xD4\xCF" => "\xE5\xA9\x98",		"\xD4\xD0" => "\xE5\xA9\x95",		"\xD4\xD1" => "\xE5\xA9\xA7",		"\xD4\xD2" => "\xE5\xA9\x9E",		"\xD4\xD3" => "\xE5\xA8\xB8",		"\xD4\xD4" => "\xE5\xA8\xB5",		"\xD4\xD5" => "\xE5\xA9\xAD",		"\xD4\xD6" => "\xE5\xA9\x90",		"\xD4\xD7" => "\xE5\xA9\x9F",		"\xD4\xD8" => "\xE5\xA9\xA5",		"\xD4\xD9" => "\xE5\xA9\xAC",		"\xD4\xDA" => "\xE5\xA9\x93",		"\xD4\xDB" => "\xE5\xA9\xA4",		"\xD4\xDC" => "\xE5\xA9\x97",		"\xD4\xDD" => "\xE5\xA9\x83",		"\xD4\xDE" => "\xE5\xA9\x9D",		"\xD4\xDF" => "\xE5\xA9\x92",		"\xD4\xE0" => "\xE5\xA9\x84",		"\xD4\xE1" => "\xE5\xA9\x9B",		"\xD4\xE2" => "\xE5\xA9\x88",		"\xD4\xE3" => "\xE5\xAA\x8E",		"\xD4\xE4" => "\xE5\xA8\xBE",		"\xD4\xE5" => "\xE5\xA9\x8D",		"\xD4\xE6" => "\xE5\xA8\xB9",		"\xD4\xE7" => "\xE5\xA9\x8C",		"\xD4\xE8" => "\xE5\xA9\xB0",		"\xD4\xE9" => "\xE5\xA9\xA9",		"\xD4\xEA" => "\xE5\xA9\x87",		"\xD4\xEB" => "\xE5\xA9\x91",		"\xD4\xEC" => "\xE5\xA9\x96",		"\xD4\xED" => "\xE5\xA9\x82",		"\xD4\xEE" => "\xE5\xA9\x9C",		"\xD4\xEF" => "\xE5\xAD\xB2",		"\xD4\xF0" => "\xE5\xAD\xAE",		"\xD4\xF1" => "\xE5\xAF\x81",		"\xD4\xF2" => "\xE5\xAF\x80",		"\xD4\xF3" => "\xE5\xB1\x99",		"\xD4\xF4" => "\xE5\xB4\x9E",		"\xD4\xF5" => "\xE5\xB4\x8B",		"\xD4\xF6" => "\xE5\xB4\x9D",		"\xD4\xF7" => "\xE5\xB4\x9A",		"\xD4\xF8" => "\xE5\xB4\xA0",		"\xD4\xF9" => "\xE5\xB4\x8C",		"\xD4\xFA" => "\xE5\xB4\xA8",		"\xD4\xFB" => "\xE5\xB4\x8D",		"\xD4\xFC" => "\xE5\xB4\xA6",		"\xD4\xFD" => "\xE5\xB4\xA5",		"\xD4\xFE" => "\xE5\xB4\x8F",		"\xD5\x40" => "\xE5\xB4\xB0",		"\xD5\x41" => "\xE5\xB4\x92",		"\xD5\x42" => "\xE5\xB4\xA3",		"\xD5\x43" => "\xE5\xB4\x9F",		"\xD5\x44" => "\xE5\xB4\xAE",		"\xD5\x45" => "\xE5\xB8\xBE",		"\xD5\x46" => "\xE5\xB8\xB4",		"\xD5\x47" => "\xE5\xBA\xB1",		"\xD5\x48" => "\xE5\xBA\xB4",		"\xD5\x49" => "\xE5\xBA\xB9",		"\xD5\x4A" => "\xE5\xBA\xB2",		"\xD5\x4B" => "\xE5\xBA\xB3",		"\xD5\x4C" => "\xE5\xBC\xB6",		"\xD5\x4D" => "\xE5\xBC\xB8",		"\xD5\x4E" => "\xE5\xBE\x9B",		"\xD5\x4F" => "\xE5\xBE\x96",		"\xD5\x50" => "\xE5\xBE\x9F",		"\xD5\x51" => "\xE6\x82\x8A",		"\xD5\x52" => "\xE6\x82\x90",		"\xD5\x53" => "\xE6\x82\x86",		"\xD5\x54" => "\xE6\x82\xBE",		"\xD5\x55" => "\xE6\x82\xB0",		"\xD5\x56" => "\xE6\x82\xBA",		"\xD5\x57" => "\xE6\x83\x93",		"\xD5\x58" => "\xE6\x83\x94",		"\xD5\x59" => "\xE6\x83\x8F",		"\xD5\x5A" => "\xE6\x83\xA4",		"\xD5\x5B" => "\xE6\x83\x99",		"\xD5\x5C" => "\xE6\x83\x9D",		"\xD5\x5D" => "\xE6\x83\x88",		"\xD5\x5E" => "\xE6\x82\xB1",		"\xD5\x5F" => "\xE6\x83\x9B",		"\xD5\x60" => "\xE6\x82\xB7",		"\xD5\x61" => "\xE6\x83\x8A",		"\xD5\x62" => "\xE6\x82\xBF",		"\xD5\x63" => "\xE6\x83\x83",		"\xD5\x64" => "\xE6\x83\x8D",		"\xD5\x65" => "\xE6\x83\x80",		"\xD5\x66" => "\xE6\x8C\xB2",		"\xD5\x67" => "\xE6\x8D\xA5",		"\xD5\x68" => "\xE6\x8E\x8A",		"\xD5\x69" => "\xE6\x8E\x82",		"\xD5\x6A" => "\xE6\x8D\xBD",		"\xD5\x6B" => "\xE6\x8E\xBD",		"\xD5\x6C" => "\xE6\x8E\x9E",		"\xD5\x6D" => "\xE6\x8E\xAD",		"\xD5\x6E" => "\xE6\x8E\x9D",		"\xD5\x6F" => "\xE6\x8E\x97",		"\xD5\x70" => "\xE6\x8E\xAB",		"\xD5\x71" => "\xE6\x8E\x8E",		"\xD5\x72" => "\xE6\x8D\xAF",		"\xD5\x73" => "\xE6\x8E\x87",		"\xD5\x74" => "\xE6\x8E\x90",		"\xD5\x75" => "\xE6\x8D\xAE",		"\xD5\x76" => "\xE6\x8E\xAF",		"\xD5\x77" => "\xE6\x8D\xB5",		"\xD5\x78" => "\xE6\x8E\x9C",		"\xD5\x79" => "\xE6\x8D\xAD",		"\xD5\x7A" => "\xE6\x8E\xAE",		"\xD5\x7B" => "\xE6\x8D\xBC",		"\xD5\x7C" => "\xE6\x8E\xA4",		"\xD5\x7D" => "\xE6\x8C\xBB",		"\xD5\x7E" => "\xE6\x8E\x9F",		"\xD5\xA1" => "\xE6\x8D\xB8",		"\xD5\xA2" => "\xE6\x8E\x85",		"\xD5\xA3" => "\xE6\x8E\x81",		"\xD5\xA4" => "\xE6\x8E\x91",		"\xD5\xA5" => "\xE6\x8E\x8D",		"\xD5\xA6" => "\xE6\x8D\xB0",		"\xD5\xA7" => "\xE6\x95\x93",		"\xD5\xA8" => "\xE6\x97\x8D",		"\xD5\xA9" => "\xE6\x99\xA5",		"\xD5\xAA" => "\xE6\x99\xA1",		"\xD5\xAB" => "\xE6\x99\x9B",		"\xD5\xAC" => "\xE6\x99\x99",		"\xD5\xAD" => "\xE6\x99\x9C",		"\xD5\xAE" => "\xE6\x99\xA2",		"\xD5\xAF" => "\xE6\x9C\x98",		"\xD5\xB0" => "\xE6\xA1\xB9",		"\xD5\xB1" => "\xE6\xA2\x87",		"\xD5\xB2" => "\xE6\xA2\x90",		"\xD5\xB3" => "\xE6\xA2\x9C",		"\xD5\xB4" => "\xE6\xA1\xAD",		"\xD5\xB5" => "\xE6\xA1\xAE",		"\xD5\xB6" => "\xE6\xA2\xAE",		"\xD5\xB7" => "\xE6\xA2\xAB",		"\xD5\xB8" => "\xE6\xA5\x96",		"\xD5\xB9" => "\xE6\xA1\xAF",		"\xD5\xBA" => "\xE6\xA2\xA3",		"\xD5\xBB" => "\xE6\xA2\xAC",		"\xD5\xBC" => "\xE6\xA2\xA9",		"\xD5\xBD" => "\xE6\xA1\xB5",		"\xD5\xBE" => "\xE6\xA1\xB4",		"\xD5\xBF" => "\xE6\xA2\xB2",		"\xD5\xC0" => "\xE6\xA2\x8F",		"\xD5\xC1" => "\xE6\xA1\xB7",		"\xD5\xC2" => "\xE6\xA2\x92",		"\xD5\xC3" => "\xE6\xA1\xBC",		"\xD5\xC4" => "\xE6\xA1\xAB",		"\xD5\xC5" => "\xE6\xA1\xB2",		"\xD5\xC6" => "\xE6\xA2\xAA",		"\xD5\xC7" => "\xE6\xA2\x80",		"\xD5\xC8" => "\xE6\xA1\xB1",		"\xD5\xC9" => "\xE6\xA1\xBE",		"\xD5\xCA" => "\xE6\xA2\x9B",		"\xD5\xCB" => "\xE6\xA2\x96",		"\xD5\xCC" => "\xE6\xA2\x8B",		"\xD5\xCD" => "\xE6\xA2\xA0",		"\xD5\xCE" => "\xE6\xA2\x89",		"\xD5\xCF" => "\xE6\xA2\xA4",		"\xD5\xD0" => "\xE6\xA1\xB8",		"\xD5\xD1" => "\xE6\xA1\xBB",		"\xD5\xD2" => "\xE6\xA2\x91",		"\xD5\xD3" => "\xE6\xA2\x8C",		"\xD5\xD4" => "\xE6\xA2\x8A",		"\xD5\xD5" => "\xE6\xA1\xBD",		"\xD5\xD6" => "\xE6\xAC\xB6",		"\xD5\xD7" => "\xE6\xAC\xB3",		"\xD5\xD8" => "\xE6\xAC\xB7",		"\xD5\xD9" => "\xE6\xAC\xB8",		"\xD5\xDA" => "\xE6\xAE\x91",		"\xD5\xDB" => "\xE6\xAE\x8F",		"\xD5\xDC" => "\xE6\xAE\x8D",		"\xD5\xDD" => "\xE6\xAE\x8E",		"\xD5\xDE" => "\xE6\xAE\x8C",		"\xD5\xDF" => "\xE6\xB0\xAA",		"\xD5\xE0" => "\xE6\xB7\x80",		"\xD5\xE1" => "\xE6\xB6\xAB",		"\xD5\xE2" => "\xE6\xB6\xB4",		"\xD5\xE3" => "\xE6\xB6\xB3",		"\xD5\xE4" => "\xE6\xB9\xB4",		"\xD5\xE5" => "\xE6\xB6\xAC",		"\xD5\xE6" => "\xE6\xB7\xA9",		"\xD5\xE7" => "\xE6\xB7\xA2",		"\xD5\xE8" => "\xE6\xB6\xB7",		"\xD5\xE9" => "\xE6\xB7\xB6",		"\xD5\xEA" => "\xE6\xB7\x94",		"\xD5\xEB" => "\xE6\xB8\x80",		"\xD5\xEC" => "\xE6\xB7\x88",		"\xD5\xED" => "\xE6\xB7\xA0",		"\xD5\xEE" => "\xE6\xB7\x9F",		"\xD5\xEF" => "\xE6\xB7\x96",		"\xD5\xF0" => "\xE6\xB6\xBE",		"\xD5\xF1" => "\xE6\xB7\xA5",		"\xD5\xF2" => "\xE6\xB7\x9C",		"\xD5\xF3" => "\xE6\xB7\x9D",		"\xD5\xF4" => "\xE6\xB7\x9B",		"\xD5\xF5" => "\xE6\xB7\xB4",		"\xD5\xF6" => "\xE6\xB7\x8A",		"\xD5\xF7" => "\xE6\xB6\xBD",		"\xD5\xF8" => "\xE6\xB7\xAD",		"\xD5\xF9" => "\xE6\xB7\xB0",		"\xD5\xFA" => "\xE6\xB6\xBA",		"\xD5\xFB" => "\xE6\xB7\x95",		"\xD5\xFC" => "\xE6\xB7\x82",		"\xD5\xFD" => "\xE6\xB7\x8F",		"\xD5\xFE" => "\xE6\xB7\x89",		"\xD6\x40" => "\xE6\xB7\x90",		"\xD6\x41" => "\xE6\xB7\xB2",		"\xD6\x42" => "\xE6\xB7\x93",		"\xD6\x43" => "\xE6\xB7\xBD",		"\xD6\x44" => "\xE6\xB7\x97",		"\xD6\x45" => "\xE6\xB7\x8D",		"\xD6\x46" => "\xE6\xB7\xA3",		"\xD6\x47" => "\xE6\xB6\xBB",		"\xD6\x48" => "\xE7\x83\xBA",		"\xD6\x49" => "\xE7\x84\x8D",		"\xD6\x4A" => "\xE7\x83\xB7",		"\xD6\x4B" => "\xE7\x84\x97",		"\xD6\x4C" => "\xE7\x83\xB4",		"\xD6\x4D" => "\xE7\x84\x8C",		"\xD6\x4E" => "\xE7\x83\xB0",		"\xD6\x4F" => "\xE7\x84\x84",		"\xD6\x50" => "\xE7\x83\xB3",		"\xD6\x51" => "\xE7\x84\x90",		"\xD6\x52" => "\xE7\x83\xBC",		"\xD6\x53" => "\xE7\x83\xBF",		"\xD6\x54" => "\xE7\x84\x86",		"\xD6\x55" => "\xE7\x84\x93",		"\xD6\x56" => "\xE7\x84\x80",		"\xD6\x57" => "\xE7\x83\xB8",		"\xD6\x58" => "\xE7\x83\xB6",		"\xD6\x59" => "\xE7\x84\x8B",		"\xD6\x5A" => "\xE7\x84\x82",		"\xD6\x5B" => "\xE7\x84\x8E",		"\xD6\x5C" => "\xE7\x89\xBE",		"\xD6\x5D" => "\xE7\x89\xBB",		"\xD6\x5E" => "\xE7\x89\xBC",		"\xD6\x5F" => "\xE7\x89\xBF",		"\xD6\x60" => "\xE7\x8C\x9D",		"\xD6\x61" => "\xE7\x8C\x97",		"\xD6\x62" => "\xE7\x8C\x87",		"\xD6\x63" => "\xE7\x8C\x91",		"\xD6\x64" => "\xE7\x8C\x98",		"\xD6\x65" => "\xE7\x8C\x8A",		"\xD6\x66" => "\xE7\x8C\x88",		"\xD6\x67" => "\xE7\x8B\xBF",		"\xD6\x68" => "\xE7\x8C\x8F",		"\xD6\x69" => "\xE7\x8C\x9E",		"\xD6\x6A" => "\xE7\x8E\x88",		"\xD6\x6B" => "\xE7\x8F\xB6",		"\xD6\x6C" => "\xE7\x8F\xB8",		"\xD6\x6D" => "\xE7\x8F\xB5",		"\xD6\x6E" => "\xE7\x90\x84",		"\xD6\x6F" => "\xE7\x90\x81",		"\xD6\x70" => "\xE7\x8F\xBD",		"\xD6\x71" => "\xE7\x90\x87",		"\xD6\x72" => "\xE7\x90\x80",		"\xD6\x73" => "\xE7\x8F\xBA",		"\xD6\x74" => "\xE7\x8F\xBC",		"\xD6\x75" => "\xE7\x8F\xBF",		"\xD6\x76" => "\xE7\x90\x8C",		"\xD6\x77" => "\xE7\x90\x8B",		"\xD6\x78" => "\xE7\x8F\xB4",		"\xD6\x79" => "\xE7\x90\x88",		"\xD6\x7A" => "\xE7\x95\xA4",		"\xD6\x7B" => "\xE7\x95\xA3",		"\xD6\x7C" => "\xE7\x97\x8E",		"\xD6\x7D" => "\xE7\x97\x92",		"\xD6\x7E" => "\xE7\x97\x8F",		"\xD6\xA1" => "\xE7\x97\x8B",		"\xD6\xA2" => "\xE7\x97\x8C",		"\xD6\xA3" => "\xE7\x97\x91",		"\xD6\xA4" => "\xE7\x97\x90",		"\xD6\xA5" => "\xE7\x9A\x8F",		"\xD6\xA6" => "\xE7\x9A\x89",		"\xD6\xA7" => "\xE7\x9B\x93",		"\xD6\xA8" => "\xE7\x9C\xB9",		"\xD6\xA9" => "\xE7\x9C\xAF",		"\xD6\xAA" => "\xE7\x9C\xAD",		"\xD6\xAB" => "\xE7\x9C\xB1",		"\xD6\xAC" => "\xE7\x9C\xB2",		"\xD6\xAD" => "\xE7\x9C\xB4",		"\xD6\xAE" => "\xE7\x9C\xB3",		"\xD6\xAF" => "\xE7\x9C\xBD",		"\xD6\xB0" => "\xE7\x9C\xA5",		"\xD6\xB1" => "\xE7\x9C\xBB",		"\xD6\xB2" => "\xE7\x9C\xB5",		"\xD6\xB3" => "\xE7\xA1\x88",		"\xD6\xB4" => "\xE7\xA1\x92",		"\xD6\xB5" => "\xE7\xA1\x89",		"\xD6\xB6" => "\xE7\xA1\x8D",		"\xD6\xB7" => "\xE7\xA1\x8A",		"\xD6\xB8" => "\xE7\xA1\x8C",		"\xD6\xB9" => "\xE7\xA0\xA6",		"\xD6\xBA" => "\xE7\xA1\x85",		"\xD6\xBB" => "\xE7\xA1\x90",		"\xD6\xBC" => "\xE7\xA5\xA4",		"\xD6\xBD" => "\xE7\xA5\xA7",		"\xD6\xBE" => "\xE7\xA5\xA9",		"\xD6\xBF" => "\xE7\xA5\xAA",		"\xD6\xC0" => "\xE7\xA5\xA3",		"\xD6\xC1" => "\xE7\xA5\xAB",		"\xD6\xC2" => "\xE7\xA5\xA1",		"\xD6\xC3" => "\xE7\xA6\xBB",		"\xD6\xC4" => "\xE7\xA7\xBA",		"\xD6\xC5" => "\xE7\xA7\xB8",		"\xD6\xC6" => "\xE7\xA7\xB6",		"\xD6\xC7" => "\xE7\xA7\xB7",		"\xD6\xC8" => "\xE7\xAA\x8F",		"\xD6\xC9" => "\xE7\xAA\x94",		"\xD6\xCA" => "\xE7\xAA\x90",		"\xD6\xCB" => "\xE7\xAC\xB5",		"\xD6\xCC" => "\xE7\xAD\x87",		"\xD6\xCD" => "\xE7\xAC\xB4",		"\xD6\xCE" => "\xE7\xAC\xA5",		"\xD6\xCF" => "\xE7\xAC\xB0",		"\xD6\xD0" => "\xE7\xAC\xA2",		"\xD6\xD1" => "\xE7\xAC\xA4",		"\xD6\xD2" => "\xE7\xAC\xB3",		"\xD6\xD3" => "\xE7\xAC\x98",		"\xD6\xD4" => "\xE7\xAC\xAA",		"\xD6\xD5" => "\xE7\xAC\x9D",		"\xD6\xD6" => "\xE7\xAC\xB1",		"\xD6\xD7" => "\xE7\xAC\xAB",		"\xD6\xD8" => "\xE7\xAC\xAD",		"\xD6\xD9" => "\xE7\xAC\xAF",		"\xD6\xDA" => "\xE7\xAC\xB2",		"\xD6\xDB" => "\xE7\xAC\xB8",		"\xD6\xDC" => "\xE7\xAC\x9A",		"\xD6\xDD" => "\xE7\xAC\xA3",		"\xD6\xDE" => "\xE7\xB2\x94",		"\xD6\xDF" => "\xE7\xB2\x98",		"\xD6\xE0" => "\xE7\xB2\x96",		"\xD6\xE1" => "\xE7\xB2\xA3",		"\xD6\xE2" => "\xE7\xB4\xB5",		"\xD6\xE3" => "\xE7\xB4\xBD",		"\xD6\xE4" => "\xE7\xB4\xB8",		"\xD6\xE5" => "\xE7\xB4\xB6",		"\xD6\xE6" => "\xE7\xB4\xBA",		"\xD6\xE7" => "\xE7\xB5\x85",		"\xD6\xE8" => "\xE7\xB4\xAC",		"\xD6\xE9" => "\xE7\xB4\xA9",		"\xD6\xEA" => "\xE7\xB5\x81",		"\xD6\xEB" => "\xE7\xB5\x87",		"\xD6\xEC" => "\xE7\xB4\xBE",		"\xD6\xED" => "\xE7\xB4\xBF",		"\xD6\xEE" => "\xE7\xB5\x8A",		"\xD6\xEF" => "\xE7\xB4\xBB",		"\xD6\xF0" => "\xE7\xB4\xA8",		"\xD6\xF1" => "\xE7\xBD\xA3",		"\xD6\xF2" => "\xE7\xBE\x95",		"\xD6\xF3" => "\xE7\xBE\x9C",		"\xD6\xF4" => "\xE7\xBE\x9D",		"\xD6\xF5" => "\xE7\xBE\x9B",		"\xD6\xF6" => "\xE7\xBF\x8A",		"\xD6\xF7" => "\xE7\xBF\x8B",		"\xD6\xF8" => "\xE7\xBF\x8D",		"\xD6\xF9" => "\xE7\xBF\x90",		"\xD6\xFA" => "\xE7\xBF\x91",		"\xD6\xFB" => "\xE7\xBF\x87",		"\xD6\xFC" => "\xE7\xBF\x8F",		"\xD6\xFD" => "\xE7\xBF\x89",		"\xD6\xFE" => "\xE8\x80\x9F",		"\xD7\x40" => "\xE8\x80\x9E",		"\xD7\x41" => "\xE8\x80\x9B",		"\xD7\x42" => "\xE8\x81\x87",		"\xD7\x43" => "\xE8\x81\x83",		"\xD7\x44" => "\xE8\x81\x88",		"\xD7\x45" => "\xE8\x84\x98",		"\xD7\x46" => "\xE8\x84\xA5",		"\xD7\x47" => "\xE8\x84\x99",		"\xD7\x48" => "\xE8\x84\x9B",		"\xD7\x49" => "\xE8\x84\xAD",		"\xD7\x4A" => "\xE8\x84\x9F",		"\xD7\x4B" => "\xE8\x84\xAC",		"\xD7\x4C" => "\xE8\x84\x9E",		"\xD7\x4D" => "\xE8\x84\xA1",		"\xD7\x4E" => "\xE8\x84\x95",		"\xD7\x4F" => "\xE8\x84\xA7",		"\xD7\x50" => "\xE8\x84\x9D",		"\xD7\x51" => "\xE8\x84\xA2",		"\xD7\x52" => "\xE8\x88\x91",		"\xD7\x53" => "\xE8\x88\xB8",		"\xD7\x54" => "\xE8\x88\xB3",		"\xD7\x55" => "\xE8\x88\xBA",		"\xD7\x56" => "\xE8\x88\xB4",		"\xD7\x57" => "\xE8\x88\xB2",		"\xD7\x58" => "\xE8\x89\xB4",		"\xD7\x59" => "\xE8\x8E\x90",		"\xD7\x5A" => "\xE8\x8E\xA3",		"\xD7\x5B" => "\xE8\x8E\xA8",		"\xD7\x5C" => "\xE8\x8E\x8D",		"\xD7\x5D" => "\xE8\x8D\xBA",		"\xD7\x5E" => "\xE8\x8D\xB3",		"\xD7\x5F" => "\xE8\x8E\xA4",		"\xD7\x60" => "\xE8\x8D\xB4",		"\xD7\x61" => "\xE8\x8E\x8F",		"\xD7\x62" => "\xE8\x8E\x81",		"\xD7\x63" => "\xE8\x8E\x95",		"\xD7\x64" => "\xE8\x8E\x99",		"\xD7\x65" => "\xE8\x8D\xB5",		"\xD7\x66" => "\xE8\x8E\x94",		"\xD7\x67" => "\xE8\x8E\xA9",		"\xD7\x68" => "\xE8\x8D\xBD",		"\xD7\x69" => "\xE8\x8E\x83",		"\xD7\x6A" => "\xE8\x8E\x8C",		"\xD7\x6B" => "\xE8\x8E\x9D",		"\xD7\x6C" => "\xE8\x8E\x9B",		"\xD7\x6D" => "\xE8\x8E\xAA",		"\xD7\x6E" => "\xE8\x8E\x8B",		"\xD7\x6F" => "\xE8\x8D\xBE",		"\xD7\x70" => "\xE8\x8E\xA5",		"\xD7\x71" => "\xE8\x8E\xAF",		"\xD7\x72" => "\xE8\x8E\x88",		"\xD7\x73" => "\xE8\x8E\x97",		"\xD7\x74" => "\xE8\x8E\xB0",		"\xD7\x75" => "\xE8\x8D\xBF",		"\xD7\x76" => "\xE8\x8E\xA6",		"\xD7\x77" => "\xE8\x8E\x87",		"\xD7\x78" => "\xE8\x8E\xAE",		"\xD7\x79" => "\xE8\x8D\xB6",		"\xD7\x7A" => "\xE8\x8E\x9A",		"\xD7\x7B" => "\xE8\x99\x99",		"\xD7\x7C" => "\xE8\x99\x96",		"\xD7\x7D" => "\xE8\x9A\xBF",		"\xD7\x7E" => "\xE8\x9A\xB7",		"\xD7\xA1" => "\xE8\x9B\x82",		"\xD7\xA2" => "\xE8\x9B\x81",		"\xD7\xA3" => "\xE8\x9B\x85",		"\xD7\xA4" => "\xE8\x9A\xBA",		"\xD7\xA5" => "\xE8\x9A\xB0",		"\xD7\xA6" => "\xE8\x9B\x88",		"\xD7\xA7" => "\xE8\x9A\xB9",		"\xD7\xA8" => "\xE8\x9A\xB3",		"\xD7\xA9" => "\xE8\x9A\xB8",		"\xD7\xAA" => "\xE8\x9B\x8C",		"\xD7\xAB" => "\xE8\x9A\xB4",		"\xD7\xAC" => "\xE8\x9A\xBB",		"\xD7\xAD" => "\xE8\x9A\xBC",		"\xD7\xAE" => "\xE8\x9B\x83",		"\xD7\xAF" => "\xE8\x9A\xBD",		"\xD7\xB0" => "\xE8\x9A\xBE",		"\xD7\xB1" => "\xE8\xA1\x92",		"\xD7\xB2" => "\xE8\xA2\x89",		"\xD7\xB3" => "\xE8\xA2\x95",		"\xD7\xB4" => "\xE8\xA2\xA8",		"\xD7\xB5" => "\xE8\xA2\xA2",		"\xD7\xB6" => "\xE8\xA2\xAA",		"\xD7\xB7" => "\xE8\xA2\x9A",		"\xD7\xB8" => "\xE8\xA2\x91",		"\xD7\xB9" => "\xE8\xA2\xA1",		"\xD7\xBA" => "\xE8\xA2\x9F",		"\xD7\xBB" => "\xE8\xA2\x98",		"\xD7\xBC" => "\xE8\xA2\xA7",		"\xD7\xBD" => "\xE8\xA2\x99",		"\xD7\xBE" => "\xE8\xA2\x9B",		"\xD7\xBF" => "\xE8\xA2\x97",		"\xD7\xC0" => "\xE8\xA2\xA4",		"\xD7\xC1" => "\xE8\xA2\xAC",		"\xD7\xC2" => "\xE8\xA2\x8C",		"\xD7\xC3" => "\xE8\xA2\x93",		"\xD7\xC4" => "\xE8\xA2\x8E",		"\xD7\xC5" => "\xE8\xA6\x82",		"\xD7\xC6" => "\xE8\xA7\x96",		"\xD7\xC7" => "\xE8\xA7\x99",		"\xD7\xC8" => "\xE8\xA7\x95",		"\xD7\xC9" => "\xE8\xA8\xB0",		"\xD7\xCA" => "\xE8\xA8\xA7",		"\xD7\xCB" => "\xE8\xA8\xAC",		"\xD7\xCC" => "\xE8\xA8\x9E",		"\xD7\xCD" => "\xE8\xB0\xB9",		"\xD7\xCE" => "\xE8\xB0\xBB",		"\xD7\xCF" => "\xE8\xB1\x9C",		"\xD7\xD0" => "\xE8\xB1\x9D",		"\xD7\xD1" => "\xE8\xB1\xBD",		"\xD7\xD2" => "\xE8\xB2\xA5",		"\xD7\xD3" => "\xE8\xB5\xBD",		"\xD7\xD4" => "\xE8\xB5\xBB",		"\xD7\xD5" => "\xE8\xB5\xB9",		"\xD7\xD6" => "\xE8\xB6\xBC",		"\xD7\xD7" => "\xE8\xB7\x82",		"\xD7\xD8" => "\xE8\xB6\xB9",		"\xD7\xD9" => "\xE8\xB6\xBF",		"\xD7\xDA" => "\xE8\xB7\x81",		"\xD7\xDB" => "\xE8\xBB\x98",		"\xD7\xDC" => "\xE8\xBB\x9E",		"\xD7\xDD" => "\xE8\xBB\x9D",		"\xD7\xDE" => "\xE8\xBB\x9C",		"\xD7\xDF" => "\xE8\xBB\x97",		"\xD7\xE0" => "\xE8\xBB\xA0",		"\xD7\xE1" => "\xE8\xBB\xA1",		"\xD7\xE2" => "\xE9\x80\xA4",		"\xD7\xE3" => "\xE9\x80\x8B",		"\xD7\xE4" => "\xE9\x80\x91",		"\xD7\xE5" => "\xE9\x80\x9C",		"\xD7\xE6" => "\xE9\x80\x8C",		"\xD7\xE7" => "\xE9\x80\xA1",		"\xD7\xE8" => "\xE9\x83\xAF",		"\xD7\xE9" => "\xE9\x83\xAA",		"\xD7\xEA" => "\xE9\x83\xB0",		"\xD7\xEB" => "\xE9\x83\xB4",		"\xD7\xEC" => "\xE9\x83\xB2",		"\xD7\xED" => "\xE9\x83\xB3",		"\xD7\xEE" => "\xE9\x83\x94",		"\xD7\xEF" => "\xE9\x83\xAB",		"\xD7\xF0" => "\xE9\x83\xAC",		"\xD7\xF1" => "\xE9\x83\xA9",		"\xD7\xF2" => "\xE9\x85\x96",		"\xD7\xF3" => "\xE9\x85\x98",		"\xD7\xF4" => "\xE9\x85\x9A",		"\xD7\xF5" => "\xE9\x85\x93",		"\xD7\xF6" => "\xE9\x85\x95",		"\xD7\xF7" => "\xE9\x87\xAC",		"\xD7\xF8" => "\xE9\x87\xB4",		"\xD7\xF9" => "\xE9\x87\xB1",		"\xD7\xFA" => "\xE9\x87\xB3",		"\xD7\xFB" => "\xE9\x87\xB8",		"\xD7\xFC" => "\xE9\x87\xA4",		"\xD7\xFD" => "\xE9\x87\xB9",		"\xD7\xFE" => "\xE9\x87\xAA",		"\xD8\x40" => "\xE9\x87\xAB",		"\xD8\x41" => "\xE9\x87\xB7",		"\xD8\x42" => "\xE9\x87\xA8",		"\xD8\x43" => "\xE9\x87\xAE",		"\xD8\x44" => "\xE9\x95\xBA",		"\xD8\x45" => "\xE9\x96\x86",		"\xD8\x46" => "\xE9\x96\x88",		"\xD8\x47" => "\xE9\x99\xBC",		"\xD8\x48" => "\xE9\x99\xAD",		"\xD8\x49" => "\xE9\x99\xAB",		"\xD8\x4A" => "\xE9\x99\xB1",		"\xD8\x4B" => "\xE9\x99\xAF",		"\xD8\x4C" => "\xE9\x9A\xBF",		"\xD8\x4D" => "\xE9\x9D\xAA",		"\xD8\x4E" => "\xE9\xA0\x84",		"\xD8\x4F" => "\xE9\xA3\xA5",		"\xD8\x50" => "\xE9\xA6\x97",		"\xD8\x51" => "\xE5\x82\x9B",		"\xD8\x52" => "\xE5\x82\x95",		"\xD8\x53" => "\xE5\x82\x94",		"\xD8\x54" => "\xE5\x82\x9E",		"\xD8\x55" => "\xE5\x82\x8B",		"\xD8\x56" => "\xE5\x82\xA3",		"\xD8\x57" => "\xE5\x82\x83",		"\xD8\x58" => "\xE5\x82\x8C",		"\xD8\x59" => "\xE5\x82\x8E",		"\xD8\x5A" => "\xE5\x82\x9D",		"\xD8\x5B" => "\xE5\x81\xA8",		"\xD8\x5C" => "\xE5\x82\x9C",		"\xD8\x5D" => "\xE5\x82\x92",		"\xD8\x5E" => "\xE5\x82\x82",		"\xD8\x5F" => "\xE5\x82\x87",		"\xD8\x60" => "\xE5\x85\x9F",		"\xD8\x61" => "\xE5\x87\x94",		"\xD8\x62" => "\xE5\x8C\x92",		"\xD8\x63" => "\xE5\x8C\x91",		"\xD8\x64" => "\xE5\x8E\xA4",		"\xD8\x65" => "\xE5\x8E\xA7",		"\xD8\x66" => "\xE5\x96\x91",		"\xD8\x67" => "\xE5\x96\xA8",		"\xD8\x68" => "\xE5\x96\xA5",		"\xD8\x69" => "\xE5\x96\xAD",		"\xD8\x6A" => "\xE5\x95\xB7",		"\xD8\x6B" => "\xE5\x99\x85",		"\xD8\x6C" => "\xE5\x96\xA2",		"\xD8\x6D" => "\xE5\x96\x93",		"\xD8\x6E" => "\xE5\x96\x88",		"\xD8\x6F" => "\xE5\x96\x8F",		"\xD8\x70" => "\xE5\x96\xB5",		"\xD8\x71" => "\xE5\x96\x81",		"\xD8\x72" => "\xE5\x96\xA3",		"\xD8\x73" => "\xE5\x96\x92",		"\xD8\x74" => "\xE5\x96\xA4",		"\xD8\x75" => "\xE5\x95\xBD",		"\xD8\x76" => "\xE5\x96\x8C",		"\xD8\x77" => "\xE5\x96\xA6",		"\xD8\x78" => "\xE5\x95\xBF",		"\xD8\x79" => "\xE5\x96\x95",		"\xD8\x7A" => "\xE5\x96\xA1",		"\xD8\x7B" => "\xE5\x96\x8E",		"\xD8\x7C" => "\xE5\x9C\x8C",		"\xD8\x7D" => "\xE5\xA0\xA9",		"\xD8\x7E" => "\xE5\xA0\xB7",		"\xD8\xA1" => "\xE5\xA0\x99",		"\xD8\xA2" => "\xE5\xA0\x9E",		"\xD8\xA3" => "\xE5\xA0\xA7",		"\xD8\xA4" => "\xE5\xA0\xA3",		"\xD8\xA5" => "\xE5\xA0\xA8",		"\xD8\xA6" => "\xE5\x9F\xB5",		"\xD8\xA7" => "\xE5\xA1\x88",		"\xD8\xA8" => "\xE5\xA0\xA5",		"\xD8\xA9" => "\xE5\xA0\x9C",		"\xD8\xAA" => "\xE5\xA0\x9B",		"\xD8\xAB" => "\xE5\xA0\xB3",		"\xD8\xAC" => "\xE5\xA0\xBF",		"\xD8\xAD" => "\xE5\xA0\xB6",		"\xD8\xAE" => "\xE5\xA0\xAE",		"\xD8\xAF" => "\xE5\xA0\xB9",		"\xD8\xB0" => "\xE5\xA0\xB8",		"\xD8\xB1" => "\xE5\xA0\xAD",		"\xD8\xB2" => "\xE5\xA0\xAC",		"\xD8\xB3" => "\xE5\xA0\xBB",		"\xD8\xB4" => "\xE5\xA5\xA1",		"\xD8\xB5" => "\xE5\xAA\xAF",		"\xD8\xB6" => "\xE5\xAA\x94",		"\xD8\xB7" => "\xE5\xAA\x9F",		"\xD8\xB8" => "\xE5\xA9\xBA",		"\xD8\xB9" => "\xE5\xAA\xA2",		"\xD8\xBA" => "\xE5\xAA\x9E",		"\xD8\xBB" => "\xE5\xA9\xB8",		"\xD8\xBC" => "\xE5\xAA\xA6",		"\xD8\xBD" => "\xE5\xA9\xBC",		"\xD8\xBE" => "\xE5\xAA\xA5",		"\xD8\xBF" => "\xE5\xAA\xAC",		"\xD8\xC0" => "\xE5\xAA\x95",		"\xD8\xC1" => "\xE5\xAA\xAE",		"\xD8\xC2" => "\xE5\xA8\xB7",		"\xD8\xC3" => "\xE5\xAA\x84",		"\xD8\xC4" => "\xE5\xAA\x8A",		"\xD8\xC5" => "\xE5\xAA\x97",		"\xD8\xC6" => "\xE5\xAA\x83",		"\xD8\xC7" => "\xE5\xAA\x8B",		"\xD8\xC8" => "\xE5\xAA\xA9",		"\xD8\xC9" => "\xE5\xA9\xBB",		"\xD8\xCA" => "\xE5\xA9\xBD",		"\xD8\xCB" => "\xE5\xAA\x8C",		"\xD8\xCC" => "\xE5\xAA\x9C",		"\xD8\xCD" => "\xE5\xAA\x8F",		"\xD8\xCE" => "\xE5\xAA\x93",		"\xD8\xCF" => "\xE5\xAA\x9D",		"\xD8\xD0" => "\xE5\xAF\xAA",		"\xD8\xD1" => "\xE5\xAF\x8D",		"\xD8\xD2" => "\xE5\xAF\x8B",		"\xD8\xD3" => "\xE5\xAF\x94",		"\xD8\xD4" => "\xE5\xAF\x91",		"\xD8\xD5" => "\xE5\xAF\x8A",		"\xD8\xD6" => "\xE5\xAF\x8E",		"\xD8\xD7" => "\xE5\xB0\x8C",		"\xD8\xD8" => "\xE5\xB0\xB0",		"\xD8\xD9" => "\xE5\xB4\xB7",		"\xD8\xDA" => "\xE5\xB5\x83",		"\xD8\xDB" => "\xE5\xB5\xAB",		"\xD8\xDC" => "\xE5\xB5\x81",		"\xD8\xDD" => "\xE5\xB5\x8B",		"\xD8\xDE" => "\xE5\xB4\xBF",		"\xD8\xDF" => "\xE5\xB4\xB5",		"\xD8\xE0" => "\xE5\xB5\x91",		"\xD8\xE1" => "\xE5\xB5\x8E",		"\xD8\xE2" => "\xE5\xB5\x95",		"\xD8\xE3" => "\xE5\xB4\xB3",		"\xD8\xE4" => "\xE5\xB4\xBA",		"\xD8\xE5" => "\xE5\xB5\x92",		"\xD8\xE6" => "\xE5\xB4\xBD",		"\xD8\xE7" => "\xE5\xB4\xB1",		"\xD8\xE8" => "\xE5\xB5\x99",		"\xD8\xE9" => "\xE5\xB5\x82",		"\xD8\xEA" => "\xE5\xB4\xB9",		"\xD8\xEB" => "\xE5\xB5\x89",		"\xD8\xEC" => "\xE5\xB4\xB8",		"\xD8\xED" => "\xE5\xB4\xBC",		"\xD8\xEE" => "\xE5\xB4\xB2",		"\xD8\xEF" => "\xE5\xB4\xB6",		"\xD8\xF0" => "\xE5\xB5\x80",		"\xD8\xF1" => "\xE5\xB5\x85",		"\xD8\xF2" => "\xE5\xB9\x84",		"\xD8\xF3" => "\xE5\xB9\x81",		"\xD8\xF4" => "\xE5\xBD\x98",		"\xD8\xF5" => "\xE5\xBE\xA6",		"\xD8\xF6" => "\xE5\xBE\xA5",		"\xD8\xF7" => "\xE5\xBE\xAB",		"\xD8\xF8" => "\xE6\x83\x89",		"\xD8\xF9" => "\xE6\x82\xB9",		"\xD8\xFA" => "\xE6\x83\x8C",		"\xD8\xFB" => "\xE6\x83\xA2",		"\xD8\xFC" => "\xE6\x83\x8E",		"\xD8\xFD" => "\xE6\x83\x84",		"\xD8\xFE" => "\xE6\x84\x94",		"\xD9\x40" => "\xE6\x83\xB2",		"\xD9\x41" => "\xE6\x84\x8A",		"\xD9\x42" => "\xE6\x84\x96",		"\xD9\x43" => "\xE6\x84\x85",		"\xD9\x44" => "\xE6\x83\xB5",		"\xD9\x45" => "\xE6\x84\x93",		"\xD9\x46" => "\xE6\x83\xB8",		"\xD9\x47" => "\xE6\x83\xBC",		"\xD9\x48" => "\xE6\x83\xBE",		"\xD9\x49" => "\xE6\x83\x81",		"\xD9\x4A" => "\xE6\x84\x83",		"\xD9\x4B" => "\xE6\x84\x98",		"\xD9\x4C" => "\xE6\x84\x9D",		"\xD9\x4D" => "\xE6\x84\x90",		"\xD9\x4E" => "\xE6\x83\xBF",		"\xD9\x4F" => "\xE6\x84\x84",		"\xD9\x50" => "\xE6\x84\x8B",		"\xD9\x51" => "\xE6\x89\x8A",		"\xD9\x52" => "\xE6\x8E\x94",		"\xD9\x53" => "\xE6\x8E\xB1",		"\xD9\x54" => "\xE6\x8E\xB0",		"\xD9\x55" => "\xE6\x8F\x8E",		"\xD9\x56" => "\xE6\x8F\xA5",		"\xD9\x57" => "\xE6\x8F\xA8",		"\xD9\x58" => "\xE6\x8F\xAF",		"\xD9\x59" => "\xE6\x8F\x83",		"\xD9\x5A" => "\xE6\x92\x9D",		"\xD9\x5B" => "\xE6\x8F\xB3",		"\xD9\x5C" => "\xE6\x8F\x8A",		"\xD9\x5D" => "\xE6\x8F\xA0",		"\xD9\x5E" => "\xE6\x8F\xB6",		"\xD9\x5F" => "\xE6\x8F\x95",		"\xD9\x60" => "\xE6\x8F\xB2",		"\xD9\x61" => "\xE6\x8F\xB5",		"\xD9\x62" => "\xE6\x91\xA1",		"\xD9\x63" => "\xE6\x8F\x9F",		"\xD9\x64" => "\xE6\x8E\xBE",		"\xD9\x65" => "\xE6\x8F\x9D",		"\xD9\x66" => "\xE6\x8F\x9C",		"\xD9\x67" => "\xE6\x8F\x84",		"\xD9\x68" => "\xE6\x8F\x98",		"\xD9\x69" => "\xE6\x8F\x93",		"\xD9\x6A" => "\xE6\x8F\x82",		"\xD9\x6B" => "\xE6\x8F\x87",		"\xD9\x6C" => "\xE6\x8F\x8C",		"\xD9\x6D" => "\xE6\x8F\x8B",		"\xD9\x6E" => "\xE6\x8F\x88",		"\xD9\x6F" => "\xE6\x8F\xB0",		"\xD9\x70" => "\xE6\x8F\x97",		"\xD9\x71" => "\xE6\x8F\x99",		"\xD9\x72" => "\xE6\x94\xB2",		"\xD9\x73" => "\xE6\x95\xA7",		"\xD9\x74" => "\xE6\x95\xAA",		"\xD9\x75" => "\xE6\x95\xA4",		"\xD9\x76" => "\xE6\x95\x9C",		"\xD9\x77" => "\xE6\x95\xA8",		"\xD9\x78" => "\xE6\x95\xA5",		"\xD9\x79" => "\xE6\x96\x8C",		"\xD9\x7A" => "\xE6\x96\x9D",		"\xD9\x7B" => "\xE6\x96\x9E",		"\xD9\x7C" => "\xE6\x96\xAE",		"\xD9\x7D" => "\xE6\x97\x90",		"\xD9\x7E" => "\xE6\x97\x92",		"\xD9\xA1" => "\xE6\x99\xBC",		"\xD9\xA2" => "\xE6\x99\xAC",		"\xD9\xA3" => "\xE6\x99\xBB",		"\xD9\xA4" => "\xE6\x9A\x80",		"\xD9\xA5" => "\xE6\x99\xB1",		"\xD9\xA6" => "\xE6\x99\xB9",		"\xD9\xA7" => "\xE6\x99\xAA",		"\xD9\xA8" => "\xE6\x99\xB2",		"\xD9\xA9" => "\xE6\x9C\x81",		"\xD9\xAA" => "\xE6\xA4\x8C",		"\xD9\xAB" => "\xE6\xA3\x93",		"\xD9\xAC" => "\xE6\xA4\x84",		"\xD9\xAD" => "\xE6\xA3\x9C",		"\xD9\xAE" => "\xE6\xA4\xAA",		"\xD9\xAF" => "\xE6\xA3\xAC",		"\xD9\xB0" => "\xE6\xA3\xAA",		"\xD9\xB1" => "\xE6\xA3\xB1",		"\xD9\xB2" => "\xE6\xA4\x8F",		"\xD9\xB3" => "\xE6\xA3\x96",		"\xD9\xB4" => "\xE6\xA3\xB7",		"\xD9\xB5" => "\xE6\xA3\xAB",		"\xD9\xB6" => "\xE6\xA3\xA4",		"\xD9\xB7" => "\xE6\xA3\xB6",		"\xD9\xB8" => "\xE6\xA4\x93",		"\xD9\xB9" => "\xE6\xA4\x90",		"\xD9\xBA" => "\xE6\xA3\xB3",		"\xD9\xBB" => "\xE6\xA3\xA1",		"\xD9\xBC" => "\xE6\xA4\x87",		"\xD9\xBD" => "\xE6\xA3\x8C",		"\xD9\xBE" => "\xE6\xA4\x88",		"\xD9\xBF" => "\xE6\xA5\xB0",		"\xD9\xC0" => "\xE6\xA2\xB4",		"\xD9\xC1" => "\xE6\xA4\x91",		"\xD9\xC2" => "\xE6\xA3\xAF",		"\xD9\xC3" => "\xE6\xA3\x86",		"\xD9\xC4" => "\xE6\xA4\x94",		"\xD9\xC5" => "\xE6\xA3\xB8",		"\xD9\xC6" => "\xE6\xA3\x90",		"\xD9\xC7" => "\xE6\xA3\xBD",		"\xD9\xC8" => "\xE6\xA3\xBC",		"\xD9\xC9" => "\xE6\xA3\xA8",		"\xD9\xCA" => "\xE6\xA4\x8B",		"\xD9\xCB" => "\xE6\xA4\x8A",		"\xD9\xCC" => "\xE6\xA4\x97",		"\xD9\xCD" => "\xE6\xA3\x8E",		"\xD9\xCE" => "\xE6\xA3\x88",		"\xD9\xCF" => "\xE6\xA3\x9D",		"\xD9\xD0" => "\xE6\xA3\x9E",		"\xD9\xD1" => "\xE6\xA3\xA6",		"\xD9\xD2" => "\xE6\xA3\xB4",		"\xD9\xD3" => "\xE6\xA3\x91",		"\xD9\xD4" => "\xE6\xA4\x86",		"\xD9\xD5" => "\xE6\xA3\x94",		"\xD9\xD6" => "\xE6\xA3\xA9",		"\xD9\xD7" => "\xE6\xA4\x95",		"\xD9\xD8" => "\xE6\xA4\xA5",		"\xD9\xD9" => "\xE6\xA3\x87",		"\xD9\xDA" => "\xE6\xAC\xB9",		"\xD9\xDB" => "\xE6\xAC\xBB",		"\xD9\xDC" => "\xE6\xAC\xBF",		"\xD9\xDD" => "\xE6\xAC\xBC",		"\xD9\xDE" => "\xE6\xAE\x94",		"\xD9\xDF" => "\xE6\xAE\x97",		"\xD9\xE0" => "\xE6\xAE\x99",		"\xD9\xE1" => "\xE6\xAE\x95",		"\xD9\xE2" => "\xE6\xAE\xBD",		"\xD9\xE3" => "\xE6\xAF\xB0",		"\xD9\xE4" => "\xE6\xAF\xB2",		"\xD9\xE5" => "\xE6\xAF\xB3",		"\xD9\xE6" => "\xE6\xB0\xB0",		"\xD9\xE7" => "\xE6\xB7\xBC",		"\xD9\xE8" => "\xE6\xB9\x86",		"\xD9\xE9" => "\xE6\xB9\x87",		"\xD9\xEA" => "\xE6\xB8\x9F",		"\xD9\xEB" => "\xE6\xB9\x89",		"\xD9\xEC" => "\xE6\xBA\x88",		"\xD9\xED" => "\xE6\xB8\xBC",		"\xD9\xEE" => "\xE6\xB8\xBD",		"\xD9\xEF" => "\xE6\xB9\x85",		"\xD9\xF0" => "\xE6\xB9\xA2",		"\xD9\xF1" => "\xE6\xB8\xAB",		"\xD9\xF2" => "\xE6\xB8\xBF",		"\xD9\xF3" => "\xE6\xB9\x81",		"\xD9\xF4" => "\xE6\xB9\x9D",		"\xD9\xF5" => "\xE6\xB9\xB3",		"\xD9\xF6" => "\xE6\xB8\x9C",		"\xD9\xF7" => "\xE6\xB8\xB3",		"\xD9\xF8" => "\xE6\xB9\x8B",		"\xD9\xF9" => "\xE6\xB9\x80",		"\xD9\xFA" => "\xE6\xB9\x91",		"\xD9\xFB" => "\xE6\xB8\xBB",		"\xD9\xFC" => "\xE6\xB8\x83",		"\xD9\xFD" => "\xE6\xB8\xAE",		"\xD9\xFE" => "\xE6\xB9\x9E",		"\xDA\x40" => "\xE6\xB9\xA8",		"\xDA\x41" => "\xE6\xB9\x9C",		"\xDA\x42" => "\xE6\xB9\xA1",		"\xDA\x43" => "\xE6\xB8\xB1",		"\xDA\x44" => "\xE6\xB8\xA8",		"\xDA\x45" => "\xE6\xB9\xA0",		"\xDA\x46" => "\xE6\xB9\xB1",		"\xDA\x47" => "\xE6\xB9\xAB",		"\xDA\x48" => "\xE6\xB8\xB9",		"\xDA\x49" => "\xE6\xB8\xA2",		"\xDA\x4A" => "\xE6\xB8\xB0",		"\xDA\x4B" => "\xE6\xB9\x93",		"\xDA\x4C" => "\xE6\xB9\xA5",		"\xDA\x4D" => "\xE6\xB8\xA7",		"\xDA\x4E" => "\xE6\xB9\xB8",		"\xDA\x4F" => "\xE6\xB9\xA4",		"\xDA\x50" => "\xE6\xB9\xB7",		"\xDA\x51" => "\xE6\xB9\x95",		"\xDA\x52" => "\xE6\xB9\xB9",		"\xDA\x53" => "\xE6\xB9\x92",		"\xDA\x54" => "\xE6\xB9\xA6",		"\xDA\x55" => "\xE6\xB8\xB5",		"\xDA\x56" => "\xE6\xB8\xB6",		"\xDA\x57" => "\xE6\xB9\x9A",		"\xDA\x58" => "\xE7\x84\xA0",		"\xDA\x59" => "\xE7\x84\x9E",		"\xDA\x5A" => "\xE7\x84\xAF",		"\xDA\x5B" => "\xE7\x83\xBB",		"\xDA\x5C" => "\xE7\x84\xAE",		"\xDA\x5D" => "\xE7\x84\xB1",		"\xDA\x5E" => "\xE7\x84\xA3",		"\xDA\x5F" => "\xE7\x84\xA5",		"\xDA\x60" => "\xE7\x84\xA2",		"\xDA\x61" => "\xE7\x84\xB2",		"\xDA\x62" => "\xE7\x84\x9F",		"\xDA\x63" => "\xE7\x84\xA8",		"\xDA\x64" => "\xE7\x84\xBA",		"\xDA\x65" => "\xE7\x84\x9B",		"\xDA\x66" => "\xE7\x89\x8B",		"\xDA\x67" => "\xE7\x89\x9A",		"\xDA\x68" => "\xE7\x8A\x88",		"\xDA\x69" => "\xE7\x8A\x89",		"\xDA\x6A" => "\xE7\x8A\x86",		"\xDA\x6B" => "\xE7\x8A\x85",		"\xDA\x6C" => "\xE7\x8A\x8B",		"\xDA\x6D" => "\xE7\x8C\x92",		"\xDA\x6E" => "\xE7\x8C\x8B",		"\xDA\x6F" => "\xE7\x8C\xB0",		"\xDA\x70" => "\xE7\x8C\xA2",		"\xDA\x71" => "\xE7\x8C\xB1",		"\xDA\x72" => "\xE7\x8C\xB3",		"\xDA\x73" => "\xE7\x8C\xA7",		"\xDA\x74" => "\xE7\x8C\xB2",		"\xDA\x75" => "\xE7\x8C\xAD",		"\xDA\x76" => "\xE7\x8C\xA6",		"\xDA\x77" => "\xE7\x8C\xA3",		"\xDA\x78" => "\xE7\x8C\xB5",		"\xDA\x79" => "\xE7\x8C\x8C",		"\xDA\x7A" => "\xE7\x90\xAE",		"\xDA\x7B" => "\xE7\x90\xAC",		"\xDA\x7C" => "\xE7\x90\xB0",		"\xDA\x7D" => "\xE7\x90\xAB",		"\xDA\x7E" => "\xE7\x90\x96",		"\xDA\xA1" => "\xE7\x90\x9A",		"\xDA\xA2" => "\xE7\x90\xA1",		"\xDA\xA3" => "\xE7\x90\xAD",		"\xDA\xA4" => "\xE7\x90\xB1",		"\xDA\xA5" => "\xE7\x90\xA4",		"\xDA\xA6" => "\xE7\x90\xA3",		"\xDA\xA7" => "\xE7\x90\x9D",		"\xDA\xA8" => "\xE7\x90\xA9",		"\xDA\xA9" => "\xE7\x90\xA0",		"\xDA\xAA" => "\xE7\x90\xB2",		"\xDA\xAB" => "\xE7\x93\xBB",		"\xDA\xAC" => "\xE7\x94\xAF",		"\xDA\xAD" => "\xE7\x95\xAF",		"\xDA\xAE" => "\xE7\x95\xAC",		"\xDA\xAF" => "\xE7\x97\xA7",		"\xDA\xB0" => "\xE7\x97\x9A",		"\xDA\xB1" => "\xE7\x97\xA1",		"\xDA\xB2" => "\xE7\x97\xA6",		"\xDA\xB3" => "\xE7\x97\x9D",		"\xDA\xB4" => "\xE7\x97\x9F",		"\xDA\xB5" => "\xE7\x97\xA4",		"\xDA\xB6" => "\xE7\x97\x97",		"\xDA\xB7" => "\xE7\x9A\x95",		"\xDA\xB8" => "\xE7\x9A\x92",		"\xDA\xB9" => "\xE7\x9B\x9A",		"\xDA\xBA" => "\xE7\x9D\x86",		"\xDA\xBB" => "\xE7\x9D\x87",		"\xDA\xBC" => "\xE7\x9D\x84",		"\xDA\xBD" => "\xE7\x9D\x8D",		"\xDA\xBE" => "\xE7\x9D\x85",		"\xDA\xBF" => "\xE7\x9D\x8A",		"\xDA\xC0" => "\xE7\x9D\x8E",		"\xDA\xC1" => "\xE7\x9D\x8B",		"\xDA\xC2" => "\xE7\x9D\x8C",		"\xDA\xC3" => "\xE7\x9F\x9E",		"\xDA\xC4" => "\xE7\x9F\xAC",		"\xDA\xC5" => "\xE7\xA1\xA0",		"\xDA\xC6" => "\xE7\xA1\xA4",		"\xDA\xC7" => "\xE7\xA1\xA5",		"\xDA\xC8" => "\xE7\xA1\x9C",		"\xDA\xC9" => "\xE7\xA1\xAD",		"\xDA\xCA" => "\xE7\xA1\xB1",		"\xDA\xCB" => "\xE7\xA1\xAA",		"\xDA\xCC" => "\xE7\xA1\xAE",		"\xDA\xCD" => "\xE7\xA1\xB0",		"\xDA\xCE" => "\xE7\xA1\xA9",		"\xDA\xCF" => "\xE7\xA1\xA8",		"\xDA\xD0" => "\xE7\xA1\x9E",		"\xDA\xD1" => "\xE7\xA1\xA2",		"\xDA\xD2" => "\xE7\xA5\xB4",		"\xDA\xD3" => "\xE7\xA5\xB3",		"\xDA\xD4" => "\xE7\xA5\xB2",		"\xDA\xD5" => "\xE7\xA5\xB0",		"\xDA\xD6" => "\xE7\xA8\x82",		"\xDA\xD7" => "\xE7\xA8\x8A",		"\xDA\xD8" => "\xE7\xA8\x83",		"\xDA\xD9" => "\xE7\xA8\x8C",		"\xDA\xDA" => "\xE7\xA8\x84",		"\xDA\xDB" => "\xE7\xAA\x99",		"\xDA\xDC" => "\xE7\xAB\xA6",		"\xDA\xDD" => "\xE7\xAB\xA4",		"\xDA\xDE" => "\xE7\xAD\x8A",		"\xDA\xDF" => "\xE7\xAC\xBB",		"\xDA\xE0" => "\xE7\xAD\x84",		"\xDA\xE1" => "\xE7\xAD\x88",		"\xDA\xE2" => "\xE7\xAD\x8C",		"\xDA\xE3" => "\xE7\xAD\x8E",		"\xDA\xE4" => "\xE7\xAD\x80",		"\xDA\xE5" => "\xE7\xAD\x98",		"\xDA\xE6" => "\xE7\xAD\x85",		"\xDA\xE7" => "\xE7\xB2\xA2",		"\xDA\xE8" => "\xE7\xB2\x9E",		"\xDA\xE9" => "\xE7\xB2\xA8",		"\xDA\xEA" => "\xE7\xB2\xA1",		"\xDA\xEB" => "\xE7\xB5\x98",		"\xDA\xEC" => "\xE7\xB5\xAF",		"\xDA\xED" => "\xE7\xB5\xA3",		"\xDA\xEE" => "\xE7\xB5\x93",		"\xDA\xEF" => "\xE7\xB5\x96",		"\xDA\xF0" => "\xE7\xB5\xA7",		"\xDA\xF1" => "\xE7\xB5\xAA",		"\xDA\xF2" => "\xE7\xB5\x8F",		"\xDA\xF3" => "\xE7\xB5\xAD",		"\xDA\xF4" => "\xE7\xB5\x9C",		"\xDA\xF5" => "\xE7\xB5\xAB",		"\xDA\xF6" => "\xE7\xB5\x92",		"\xDA\xF7" => "\xE7\xB5\x94",		"\xDA\xF8" => "\xE7\xB5\xA9",		"\xDA\xF9" => "\xE7\xB5\x91",		"\xDA\xFA" => "\xE7\xB5\x9F",		"\xDA\xFB" => "\xE7\xB5\x8E",		"\xDA\xFC" => "\xE7\xBC\xBE",		"\xDA\xFD" => "\xE7\xBC\xBF",		"\xDA\xFE" => "\xE7\xBD\xA5",		"\xDB\x40" => "\xE7\xBD\xA6",		"\xDB\x41" => "\xE7\xBE\xA2",		"\xDB\x42" => "\xE7\xBE\xA0",		"\xDB\x43" => "\xE7\xBE\xA1",		"\xDB\x44" => "\xE7\xBF\x97",		"\xDB\x45" => "\xE8\x81\x91",		"\xDB\x46" => "\xE8\x81\x8F",		"\xDB\x47" => "\xE8\x81\x90",		"\xDB\x48" => "\xE8\x83\xBE",		"\xDB\x49" => "\xE8\x83\x94",		"\xDB\x4A" => "\xE8\x85\x83",		"\xDB\x4B" => "\xE8\x85\x8A",		"\xDB\x4C" => "\xE8\x85\x92",		"\xDB\x4D" => "\xE8\x85\x8F",		"\xDB\x4E" => "\xE8\x85\x87",		"\xDB\x4F" => "\xE8\x84\xBD",		"\xDB\x50" => "\xE8\x85\x8D",		"\xDB\x51" => "\xE8\x84\xBA",		"\xDB\x52" => "\xE8\x87\xA6",		"\xDB\x53" => "\xE8\x87\xAE",		"\xDB\x54" => "\xE8\x87\xB7",		"\xDB\x55" => "\xE8\x87\xB8",		"\xDB\x56" => "\xE8\x87\xB9",		"\xDB\x57" => "\xE8\x88\x84",		"\xDB\x58" => "\xE8\x88\xBC",		"\xDB\x59" => "\xE8\x88\xBD",		"\xDB\x5A" => "\xE8\x88\xBF",		"\xDB\x5B" => "\xE8\x89\xB5",		"\xDB\x5C" => "\xE8\x8C\xBB",		"\xDB\x5D" => "\xE8\x8F\x8F",		"\xDB\x5E" => "\xE8\x8F\xB9",		"\xDB\x5F" => "\xE8\x90\xA3",		"\xDB\x60" => "\xE8\x8F\x80",		"\xDB\x61" => "\xE8\x8F\xA8",		"\xDB\x62" => "\xE8\x90\x92",		"\xDB\x63" => "\xE8\x8F\xA7",		"\xDB\x64" => "\xE8\x8F\xA4",		"\xDB\x65" => "\xE8\x8F\xBC",		"\xDB\x66" => "\xE8\x8F\xB6",		"\xDB\x67" => "\xE8\x90\x90",		"\xDB\x68" => "\xE8\x8F\x86",		"\xDB\x69" => "\xE8\x8F\x88",		"\xDB\x6A" => "\xE8\x8F\xAB",		"\xDB\x6B" => "\xE8\x8F\xA3",		"\xDB\x6C" => "\xE8\x8E\xBF",		"\xDB\x6D" => "\xE8\x90\x81",		"\xDB\x6E" => "\xE8\x8F\x9D",		"\xDB\x6F" => "\xE8\x8F\xA5",		"\xDB\x70" => "\xE8\x8F\x98",		"\xDB\x71" => "\xE8\x8F\xBF",		"\xDB\x72" => "\xE8\x8F\xA1",		"\xDB\x73" => "\xE8\x8F\x8B",		"\xDB\x74" => "\xE8\x8F\x8E",		"\xDB\x75" => "\xE8\x8F\x96",		"\xDB\x76" => "\xE8\x8F\xB5",		"\xDB\x77" => "\xE8\x8F\x89",		"\xDB\x78" => "\xE8\x90\x89",		"\xDB\x79" => "\xE8\x90\x8F",		"\xDB\x7A" => "\xE8\x8F\x9E",		"\xDB\x7B" => "\xE8\x90\x91",		"\xDB\x7C" => "\xE8\x90\x86",		"\xDB\x7D" => "\xE8\x8F\x82",		"\xDB\x7E" => "\xE8\x8F\xB3",		"\xDB\xA1" => "\xE8\x8F\x95",		"\xDB\xA2" => "\xE8\x8F\xBA",		"\xDB\xA3" => "\xE8\x8F\x87",		"\xDB\xA4" => "\xE8\x8F\x91",		"\xDB\xA5" => "\xE8\x8F\xAA",		"\xDB\xA6" => "\xE8\x90\x93",		"\xDB\xA7" => "\xE8\x8F\x83",		"\xDB\xA8" => "\xE8\x8F\xAC",		"\xDB\xA9" => "\xE8\x8F\xAE",		"\xDB\xAA" => "\xE8\x8F\x84",		"\xDB\xAB" => "\xE8\x8F\xBB",		"\xDB\xAC" => "\xE8\x8F\x97",		"\xDB\xAD" => "\xE8\x8F\xA2",		"\xDB\xAE" => "\xE8\x90\x9B",		"\xDB\xAF" => "\xE8\x8F\x9B",		"\xDB\xB0" => "\xE8\x8F\xBE",		"\xDB\xB1" => "\xE8\x9B\x98",		"\xDB\xB2" => "\xE8\x9B\xA2",		"\xDB\xB3" => "\xE8\x9B\xA6",		"\xDB\xB4" => "\xE8\x9B\x93",		"\xDB\xB5" => "\xE8\x9B\xA3",		"\xDB\xB6" => "\xE8\x9B\x9A",		"\xDB\xB7" => "\xE8\x9B\xAA",		"\xDB\xB8" => "\xE8\x9B\x9D",		"\xDB\xB9" => "\xE8\x9B\xAB",		"\xDB\xBA" => "\xE8\x9B\x9C",		"\xDB\xBB" => "\xE8\x9B\xAC",		"\xDB\xBC" => "\xE8\x9B\xA9",		"\xDB\xBD" => "\xE8\x9B\x97",		"\xDB\xBE" => "\xE8\x9B\xA8",		"\xDB\xBF" => "\xE8\x9B\x91",		"\xDB\xC0" => "\xE8\xA1\x88",		"\xDB\xC1" => "\xE8\xA1\x96",		"\xDB\xC2" => "\xE8\xA1\x95",		"\xDB\xC3" => "\xE8\xA2\xBA",		"\xDB\xC4" => "\xE8\xA3\x97",		"\xDB\xC5" => "\xE8\xA2\xB9",		"\xDB\xC6" => "\xE8\xA2\xB8",		"\xDB\xC7" => "\xE8\xA3\x80",		"\xDB\xC8" => "\xE8\xA2\xBE",		"\xDB\xC9" => "\xE8\xA2\xB6",		"\xDB\xCA" => "\xE8\xA2\xBC",		"\xDB\xCB" => "\xE8\xA2\xB7",		"\xDB\xCC" => "\xE8\xA2\xBD",		"\xDB\xCD" => "\xE8\xA2\xB2",		"\xDB\xCE" => "\xE8\xA4\x81",		"\xDB\xCF" => "\xE8\xA3\x89",		"\xDB\xD0" => "\xE8\xA6\x95",		"\xDB\xD1" => "\xE8\xA6\x98",		"\xDB\xD2" => "\xE8\xA6\x97",		"\xDB\xD3" => "\xE8\xA7\x9D",		"\xDB\xD4" => "\xE8\xA7\x9A",		"\xDB\xD5" => "\xE8\xA7\x9B",		"\xDB\xD6" => "\xE8\xA9\x8E",		"\xDB\xD7" => "\xE8\xA9\x8D",		"\xDB\xD8" => "\xE8\xA8\xB9",		"\xDB\xD9" => "\xE8\xA9\x99",		"\xDB\xDA" => "\xE8\xA9\x80",		"\xDB\xDB" => "\xE8\xA9\x97",		"\xDB\xDC" => "\xE8\xA9\x98",		"\xDB\xDD" => "\xE8\xA9\x84",		"\xDB\xDE" => "\xE8\xA9\x85",		"\xDB\xDF" => "\xE8\xA9\x92",		"\xDB\xE0" => "\xE8\xA9\x88",		"\xDB\xE1" => "\xE8\xA9\x91",		"\xDB\xE2" => "\xE8\xA9\x8A",		"\xDB\xE3" => "\xE8\xA9\x8C",		"\xDB\xE4" => "\xE8\xA9\x8F",		"\xDB\xE5" => "\xE8\xB1\x9F",		"\xDB\xE6" => "\xE8\xB2\x81",		"\xDB\xE7" => "\xE8\xB2\x80",		"\xDB\xE8" => "\xE8\xB2\xBA",		"\xDB\xE9" => "\xE8\xB2\xBE",		"\xDB\xEA" => "\xE8\xB2\xB0",		"\xDB\xEB" => "\xE8\xB2\xB9",		"\xDB\xEC" => "\xE8\xB2\xB5",		"\xDB\xED" => "\xE8\xB6\x84",		"\xDB\xEE" => "\xE8\xB6\x80",		"\xDB\xEF" => "\xE8\xB6\x89",		"\xDB\xF0" => "\xE8\xB7\x98",		"\xDB\xF1" => "\xE8\xB7\x93",		"\xDB\xF2" => "\xE8\xB7\x8D",		"\xDB\xF3" => "\xE8\xB7\x87",		"\xDB\xF4" => "\xE8\xB7\x96",		"\xDB\xF5" => "\xE8\xB7\x9C",		"\xDB\xF6" => "\xE8\xB7\x8F",		"\xDB\xF7" => "\xE8\xB7\x95",		"\xDB\xF8" => "\xE8\xB7\x99",		"\xDB\xF9" => "\xE8\xB7\x88",		"\xDB\xFA" => "\xE8\xB7\x97",		"\xDB\xFB" => "\xE8\xB7\x85",		"\xDB\xFC" => "\xE8\xBB\xAF",		"\xDB\xFD" => "\xE8\xBB\xB7",		"\xDB\xFE" => "\xE8\xBB\xBA",		"\xDC\x40" => "\xE8\xBB\xB9",		"\xDC\x41" => "\xE8\xBB\xA6",		"\xDC\x42" => "\xE8\xBB\xAE",		"\xDC\x43" => "\xE8\xBB\xA5",		"\xDC\x44" => "\xE8\xBB\xB5",		"\xDC\x45" => "\xE8\xBB\xA7",		"\xDC\x46" => "\xE8\xBB\xA8",		"\xDC\x47" => "\xE8\xBB\xB6",		"\xDC\x48" => "\xE8\xBB\xAB",		"\xDC\x49" => "\xE8\xBB\xB1",		"\xDC\x4A" => "\xE8\xBB\xAC",		"\xDC\x4B" => "\xE8\xBB\xB4",		"\xDC\x4C" => "\xE8\xBB\xA9",		"\xDC\x4D" => "\xE9\x80\xAD",		"\xDC\x4E" => "\xE9\x80\xB4",		"\xDC\x4F" => "\xE9\x80\xAF",		"\xDC\x50" => "\xE9\x84\x86",		"\xDC\x51" => "\xE9\x84\xAC",		"\xDC\x52" => "\xE9\x84\x84",		"\xDC\x53" => "\xE9\x83\xBF",		"\xDC\x54" => "\xE9\x83\xBC",		"\xDC\x55" => "\xE9\x84\x88",		"\xDC\x56" => "\xE9\x83\xB9",		"\xDC\x57" => "\xE9\x83\xBB",		"\xDC\x58" => "\xE9\x84\x81",		"\xDC\x59" => "\xE9\x84\x80",		"\xDC\x5A" => "\xE9\x84\x87",		"\xDC\x5B" => "\xE9\x84\x85",		"\xDC\x5C" => "\xE9\x84\x83",		"\xDC\x5D" => "\xE9\x85\xA1",		"\xDC\x5E" => "\xE9\x85\xA4",		"\xDC\x5F" => "\xE9\x85\x9F",		"\xDC\x60" => "\xE9\x85\xA2",		"\xDC\x61" => "\xE9\x85\xA0",		"\xDC\x62" => "\xE9\x88\x81",		"\xDC\x63" => "\xE9\x88\x8A",		"\xDC\x64" => "\xE9\x88\xA5",		"\xDC\x65" => "\xE9\x88\x83",		"\xDC\x66" => "\xE9\x88\x9A",		"\xDC\x67" => "\xE9\x88\xA6",		"\xDC\x68" => "\xE9\x88\x8F",		"\xDC\x69" => "\xE9\x88\x8C",		"\xDC\x6A" => "\xE9\x88\x80",		"\xDC\x6B" => "\xE9\x88\x92",		"\xDC\x6C" => "\xE9\x87\xBF",		"\xDC\x6D" => "\xE9\x87\xBD",		"\xDC\x6E" => "\xE9\x88\x86",		"\xDC\x6F" => "\xE9\x88\x84",		"\xDC\x70" => "\xE9\x88\xA7",		"\xDC\x71" => "\xE9\x88\x82",		"\xDC\x72" => "\xE9\x88\x9C",		"\xDC\x73" => "\xE9\x88\xA4",		"\xDC\x74" => "\xE9\x88\x99",		"\xDC\x75" => "\xE9\x88\x97",		"\xDC\x76" => "\xE9\x88\x85",		"\xDC\x77" => "\xE9\x88\x96",		"\xDC\x78" => "\xE9\x95\xBB",		"\xDC\x79" => "\xE9\x96\x8D",		"\xDC\x7A" => "\xE9\x96\x8C",		"\xDC\x7B" => "\xE9\x96\x90",		"\xDC\x7C" => "\xE9\x9A\x87",		"\xDC\x7D" => "\xE9\x99\xBE",		"\xDC\x7E" => "\xE9\x9A\x88",		"\xDC\xA1" => "\xE9\x9A\x89",		"\xDC\xA2" => "\xE9\x9A\x83",		"\xDC\xA3" => "\xE9\x9A\x80",		"\xDC\xA4" => "\xE9\x9B\x82",		"\xDC\xA5" => "\xE9\x9B\x88",		"\xDC\xA6" => "\xE9\x9B\x83",		"\xDC\xA7" => "\xE9\x9B\xB1",		"\xDC\xA8" => "\xE9\x9B\xB0",		"\xDC\xA9" => "\xE9\x9D\xAC",		"\xDC\xAA" => "\xE9\x9D\xB0",		"\xDC\xAB" => "\xE9\x9D\xAE",		"\xDC\xAC" => "\xE9\xA0\x87",		"\xDC\xAD" => "\xE9\xA2\xA9",		"\xDC\xAE" => "\xE9\xA3\xAB",		"\xDC\xAF" => "\xE9\xB3\xA6",		"\xDC\xB0" => "\xE9\xBB\xB9",		"\xDC\xB1" => "\xE4\xBA\x83",		"\xDC\xB2" => "\xE4\xBA\x84",		"\xDC\xB3" => "\xE4\xBA\xB6",		"\xDC\xB4" => "\xE5\x82\xBD",		"\xDC\xB5" => "\xE5\x82\xBF",		"\xDC\xB6" => "\xE5\x83\x86",		"\xDC\xB7" => "\xE5\x82\xAE",		"\xDC\xB8" => "\xE5\x83\x84",		"\xDC\xB9" => "\xE5\x83\x8A",		"\xDC\xBA" => "\xE5\x82\xB4",		"\xDC\xBB" => "\xE5\x83\x88",		"\xDC\xBC" => "\xE5\x83\x82",		"\xDC\xBD" => "\xE5\x82\xB0",		"\xDC\xBE" => "\xE5\x83\x81",		"\xDC\xBF" => "\xE5\x82\xBA",		"\xDC\xC0" => "\xE5\x82\xB1",		"\xDC\xC1" => "\xE5\x83\x8B",		"\xDC\xC2" => "\xE5\x83\x89",		"\xDC\xC3" => "\xE5\x82\xB6",		"\xDC\xC4" => "\xE5\x82\xB8",		"\xDC\xC5" => "\xE5\x87\x97",		"\xDC\xC6" => "\xE5\x89\xBA",		"\xDC\xC7" => "\xE5\x89\xB8",		"\xDC\xC8" => "\xE5\x89\xBB",		"\xDC\xC9" => "\xE5\x89\xBC",		"\xDC\xCA" => "\xE5\x97\x83",		"\xDC\xCB" => "\xE5\x97\x9B",		"\xDC\xCC" => "\xE5\x97\x8C",		"\xDC\xCD" => "\xE5\x97\x90",		"\xDC\xCE" => "\xE5\x97\x8B",		"\xDC\xCF" => "\xE5\x97\x8A",		"\xDC\xD0" => "\xE5\x97\x9D",		"\xDC\xD1" => "\xE5\x97\x80",		"\xDC\xD2" => "\xE5\x97\x94",		"\xDC\xD3" => "\xE5\x97\x84",		"\xDC\xD4" => "\xE5\x97\xA9",		"\xDC\xD5" => "\xE5\x96\xBF",		"\xDC\xD6" => "\xE5\x97\x92",		"\xDC\xD7" => "\xE5\x96\x8D",		"\xDC\xD8" => "\xE5\x97\x8F",		"\xDC\xD9" => "\xE5\x97\x95",		"\xDC\xDA" => "\xE5\x97\xA2",		"\xDC\xDB" => "\xE5\x97\x96",		"\xDC\xDC" => "\xE5\x97\x88",		"\xDC\xDD" => "\xE5\x97\xB2",		"\xDC\xDE" => "\xE5\x97\x8D",		"\xDC\xDF" => "\xE5\x97\x99",		"\xDC\xE0" => "\xE5\x97\x82",		"\xDC\xE1" => "\xE5\x9C\x94",		"\xDC\xE2" => "\xE5\xA1\x93",		"\xDC\xE3" => "\xE5\xA1\xA8",		"\xDC\xE4" => "\xE5\xA1\xA4",		"\xDC\xE5" => "\xE5\xA1\x8F",		"\xDC\xE6" => "\xE5\xA1\x8D",		"\xDC\xE7" => "\xE5\xA1\x89",		"\xDC\xE8" => "\xE5\xA1\xAF",		"\xDC\xE9" => "\xE5\xA1\x95",		"\xDC\xEA" => "\xE5\xA1\x8E",		"\xDC\xEB" => "\xE5\xA1\x9D",		"\xDC\xEC" => "\xE5\xA1\x99",		"\xDC\xED" => "\xE5\xA1\xA5",		"\xDC\xEE" => "\xE5\xA1\x9B",		"\xDC\xEF" => "\xE5\xA0\xBD",		"\xDC\xF0" => "\xE5\xA1\xA3",		"\xDC\xF1" => "\xE5\xA1\xB1",		"\xDC\xF2" => "\xE5\xA3\xBC",		"\xDC\xF3" => "\xE5\xAB\x87",		"\xDC\xF4" => "\xE5\xAB\x84",		"\xDC\xF5" => "\xE5\xAB\x8B",		"\xDC\xF6" => "\xE5\xAA\xBA",		"\xDC\xF7" => "\xE5\xAA\xB8",		"\xDC\xF8" => "\xE5\xAA\xB1",		"\xDC\xF9" => "\xE5\xAA\xB5",		"\xDC\xFA" => "\xE5\xAA\xB0",		"\xDC\xFB" => "\xE5\xAA\xBF",		"\xDC\xFC" => "\xE5\xAB\x88",		"\xDC\xFD" => "\xE5\xAA\xBB",		"\xDC\xFE" => "\xE5\xAB\x86",		"\xDD\x40" => "\xE5\xAA\xB7",		"\xDD\x41" => "\xE5\xAB\x80",		"\xDD\x42" => "\xE5\xAB\x8A",		"\xDD\x43" => "\xE5\xAA\xB4",		"\xDD\x44" => "\xE5\xAA\xB6",		"\xDD\x45" => "\xE5\xAB\x8D",		"\xDD\x46" => "\xE5\xAA\xB9",		"\xDD\x47" => "\xE5\xAA\x90",		"\xDD\x48" => "\xE5\xAF\x96",		"\xDD\x49" => "\xE5\xAF\x98",		"\xDD\x4A" => "\xE5\xAF\x99",		"\xDD\x4B" => "\xE5\xB0\x9F",		"\xDD\x4C" => "\xE5\xB0\xB3",		"\xDD\x4D" => "\xE5\xB5\xB1",		"\xDD\x4E" => "\xE5\xB5\xA3",		"\xDD\x4F" => "\xE5\xB5\x8A",		"\xDD\x50" => "\xE5\xB5\xA5",		"\xDD\x51" => "\xE5\xB5\xB2",		"\xDD\x52" => "\xE5\xB5\xAC",		"\xDD\x53" => "\xE5\xB5\x9E",		"\xDD\x54" => "\xE5\xB5\xA8",		"\xDD\x55" => "\xE5\xB5\xA7",		"\xDD\x56" => "\xE5\xB5\xA2",		"\xDD\x57" => "\xE5\xB7\xB0",		"\xDD\x58" => "\xE5\xB9\x8F",		"\xDD\x59" => "\xE5\xB9\x8E",		"\xDD\x5A" => "\xE5\xB9\x8A",		"\xDD\x5B" => "\xE5\xB9\x8D",		"\xDD\x5C" => "\xE5\xB9\x8B",		"\xDD\x5D" => "\xE5\xBB\x85",		"\xDD\x5E" => "\xE5\xBB\x8C",		"\xDD\x5F" => "\xE5\xBB\x86",		"\xDD\x60" => "\xE5\xBB\x8B",		"\xDD\x61" => "\xE5\xBB\x87",		"\xDD\x62" => "\xE5\xBD\x80",		"\xDD\x63" => "\xE5\xBE\xAF",		"\xDD\x64" => "\xE5\xBE\xAD",		"\xDD\x65" => "\xE6\x83\xB7",		"\xDD\x66" => "\xE6\x85\x89",		"\xDD\x67" => "\xE6\x85\x8A",		"\xDD\x68" => "\xE6\x84\xAB",		"\xDD\x69" => "\xE6\x85\x85",		"\xDD\x6A" => "\xE6\x84\xB6",		"\xDD\x6B" => "\xE6\x84\xB2",		"\xDD\x6C" => "\xE6\x84\xAE",		"\xDD\x6D" => "\xE6\x85\x86",		"\xDD\x6E" => "\xE6\x84\xAF",		"\xDD\x6F" => "\xE6\x85\x8F",		"\xDD\x70" => "\xE6\x84\xA9",		"\xDD\x71" => "\xE6\x85\x80",		"\xDD\x72" => "\xE6\x88\xA0",		"\xDD\x73" => "\xE9\x85\xA8",		"\xDD\x74" => "\xE6\x88\xA3",		"\xDD\x75" => "\xE6\x88\xA5",		"\xDD\x76" => "\xE6\x88\xA4",		"\xDD\x77" => "\xE6\x8F\x85",		"\xDD\x78" => "\xE6\x8F\xB1",		"\xDD\x79" => "\xE6\x8F\xAB",		"\xDD\x7A" => "\xE6\x90\x90",		"\xDD\x7B" => "\xE6\x90\x92",		"\xDD\x7C" => "\xE6\x90\x89",		"\xDD\x7D" => "\xE6\x90\xA0",		"\xDD\x7E" => "\xE6\x90\xA4",		"\xDD\xA1" => "\xE6\x90\xB3",		"\xDD\xA2" => "\xE6\x91\x83",		"\xDD\xA3" => "\xE6\x90\x9F",		"\xDD\xA4" => "\xE6\x90\x95",		"\xDD\xA5" => "\xE6\x90\x98",		"\xDD\xA6" => "\xE6\x90\xB9",		"\xDD\xA7" => "\xE6\x90\xB7",		"\xDD\xA8" => "\xE6\x90\xA2",		"\xDD\xA9" => "\xE6\x90\xA3",		"\xDD\xAA" => "\xE6\x90\x8C",		"\xDD\xAB" => "\xE6\x90\xA6",		"\xDD\xAC" => "\xE6\x90\xB0",		"\xDD\xAD" => "\xE6\x90\xA8",		"\xDD\xAE" => "\xE6\x91\x81",		"\xDD\xAF" => "\xE6\x90\xB5",		"\xDD\xB0" => "\xE6\x90\xAF",		"\xDD\xB1" => "\xE6\x90\x8A",		"\xDD\xB2" => "\xE6\x90\x9A",		"\xDD\xB3" => "\xE6\x91\x80",		"\xDD\xB4" => "\xE6\x90\xA5",		"\xDD\xB5" => "\xE6\x90\xA7",		"\xDD\xB6" => "\xE6\x90\x8B",		"\xDD\xB7" => "\xE6\x8F\xA7",		"\xDD\xB8" => "\xE6\x90\x9B",		"\xDD\xB9" => "\xE6\x90\xAE",		"\xDD\xBA" => "\xE6\x90\xA1",		"\xDD\xBB" => "\xE6\x90\x8E",		"\xDD\xBC" => "\xE6\x95\xAF",		"\xDD\xBD" => "\xE6\x96\x92",		"\xDD\xBE" => "\xE6\x97\x93",		"\xDD\xBF" => "\xE6\x9A\x86",		"\xDD\xC0" => "\xE6\x9A\x8C",		"\xDD\xC1" => "\xE6\x9A\x95",		"\xDD\xC2" => "\xE6\x9A\x90",		"\xDD\xC3" => "\xE6\x9A\x8B",		"\xDD\xC4" => "\xE6\x9A\x8A",		"\xDD\xC5" => "\xE6\x9A\x99",		"\xDD\xC6" => "\xE6\x9A\x94",		"\xDD\xC7" => "\xE6\x99\xB8",		"\xDD\xC8" => "\xE6\x9C\xA0",		"\xDD\xC9" => "\xE6\xA5\xA6",		"\xDD\xCA" => "\xE6\xA5\x9F",		"\xDD\xCB" => "\xE6\xA4\xB8",		"\xDD\xCC" => "\xE6\xA5\x8E",		"\xDD\xCD" => "\xE6\xA5\xA2",		"\xDD\xCE" => "\xE6\xA5\xB1",		"\xDD\xCF" => "\xE6\xA4\xBF",		"\xDD\xD0" => "\xE6\xA5\x85",		"\xDD\xD1" => "\xE6\xA5\xAA",		"\xDD\xD2" => "\xE6\xA4\xB9",		"\xDD\xD3" => "\xE6\xA5\x82",		"\xDD\xD4" => "\xE6\xA5\x97",		"\xDD\xD5" => "\xE6\xA5\x99",		"\xDD\xD6" => "\xE6\xA5\xBA",		"\xDD\xD7" => "\xE6\xA5\x88",		"\xDD\xD8" => "\xE6\xA5\x89",		"\xDD\xD9" => "\xE6\xA4\xB5",		"\xDD\xDA" => "\xE6\xA5\xAC",		"\xDD\xDB" => "\xE6\xA4\xB3",		"\xDD\xDC" => "\xE6\xA4\xBD",		"\xDD\xDD" => "\xE6\xA5\xA5",		"\xDD\xDE" => "\xE6\xA3\xB0",		"\xDD\xDF" => "\xE6\xA5\xB8",		"\xDD\xE0" => "\xE6\xA4\xB4",		"\xDD\xE1" => "\xE6\xA5\xA9",		"\xDD\xE2" => "\xE6\xA5\x80",		"\xDD\xE3" => "\xE6\xA5\xAF",		"\xDD\xE4" => "\xE6\xA5\x84",		"\xDD\xE5" => "\xE6\xA5\xB6",		"\xDD\xE6" => "\xE6\xA5\x98",		"\xDD\xE7" => "\xE6\xA5\x81",		"\xDD\xE8" => "\xE6\xA5\xB4",		"\xDD\xE9" => "\xE6\xA5\x8C",		"\xDD\xEA" => "\xE6\xA4\xBB",		"\xDD\xEB" => "\xE6\xA5\x8B",		"\xDD\xEC" => "\xE6\xA4\xB7",		"\xDD\xED" => "\xE6\xA5\x9C",		"\xDD\xEE" => "\xE6\xA5\x8F",		"\xDD\xEF" => "\xE6\xA5\x91",		"\xDD\xF0" => "\xE6\xA4\xB2",		"\xDD\xF1" => "\xE6\xA5\x92",		"\xDD\xF2" => "\xE6\xA4\xAF",		"\xDD\xF3" => "\xE6\xA5\xBB",		"\xDD\xF4" => "\xE6\xA4\xBC",		"\xDD\xF5" => "\xE6\xAD\x86",		"\xDD\xF6" => "\xE6\xAD\x85",		"\xDD\xF7" => "\xE6\xAD\x83",		"\xDD\xF8" => "\xE6\xAD\x82",		"\xDD\xF9" => "\xE6\xAD\x88",		"\xDD\xFA" => "\xE6\xAD\x81",		"\xDD\xFB" => "\xE6\xAE\x9B",		"\xDD\xFC" => "\xEF\xA8\x8D",		"\xDD\xFD" => "\xE6\xAF\xBB",		"\xDD\xFE" => "\xE6\xAF\xBC",		"\xDE\x40" => "\xE6\xAF\xB9",		"\xDE\x41" => "\xE6\xAF\xB7",		"\xDE\x42" => "\xE6\xAF\xB8",		"\xDE\x43" => "\xE6\xBA\x9B",		"\xDE\x44" => "\xE6\xBB\x96",		"\xDE\x45" => "\xE6\xBB\x88",		"\xDE\x46" => "\xE6\xBA\x8F",		"\xDE\x47" => "\xE6\xBB\x80",		"\xDE\x48" => "\xE6\xBA\x9F",		"\xDE\x49" => "\xE6\xBA\x93",		"\xDE\x4A" => "\xE6\xBA\x94",		"\xDE\x4B" => "\xE6\xBA\xA0",		"\xDE\x4C" => "\xE6\xBA\xB1",		"\xDE\x4D" => "\xE6\xBA\xB9",		"\xDE\x4E" => "\xE6\xBB\x86",		"\xDE\x4F" => "\xE6\xBB\x92",		"\xDE\x50" => "\xE6\xBA\xBD",		"\xDE\x51" => "\xE6\xBB\x81",		"\xDE\x52" => "\xE6\xBA\x9E",		"\xDE\x53" => "\xE6\xBB\x89",		"\xDE\x54" => "\xE6\xBA\xB7",		"\xDE\x55" => "\xE6\xBA\xB0",		"\xDE\x56" => "\xE6\xBB\x8D",		"\xDE\x57" => "\xE6\xBA\xA6",		"\xDE\x58" => "\xE6\xBB\x8F",		"\xDE\x59" => "\xE6\xBA\xB2",		"\xDE\x5A" => "\xE6\xBA\xBE",		"\xDE\x5B" => "\xE6\xBB\x83",		"\xDE\x5C" => "\xE6\xBB\x9C",		"\xDE\x5D" => "\xE6\xBB\x98",		"\xDE\x5E" => "\xE6\xBA\x99",		"\xDE\x5F" => "\xE6\xBA\x92",		"\xDE\x60" => "\xE6\xBA\x8E",		"\xDE\x61" => "\xE6\xBA\x8D",		"\xDE\x62" => "\xE6\xBA\xA4",		"\xDE\x63" => "\xE6\xBA\xA1",		"\xDE\x64" => "\xE6\xBA\xBF",		"\xDE\x65" => "\xE6\xBA\xB3",		"\xDE\x66" => "\xE6\xBB\x90",		"\xDE\x67" => "\xE6\xBB\x8A",		"\xDE\x68" => "\xE6\xBA\x97",		"\xDE\x69" => "\xE6\xBA\xAE",		"\xDE\x6A" => "\xE6\xBA\xA3",		"\xDE\x6B" => "\xE7\x85\x87",		"\xDE\x6C" => "\xE7\x85\x94",		"\xDE\x6D" => "\xE7\x85\x92",		"\xDE\x6E" => "\xE7\x85\xA3",		"\xDE\x6F" => "\xE7\x85\xA0",		"\xDE\x70" => "\xE7\x85\x81",		"\xDE\x71" => "\xE7\x85\x9D",		"\xDE\x72" => "\xE7\x85\xA2",		"\xDE\x73" => "\xE7\x85\xB2",		"\xDE\x74" => "\xE7\x85\xB8",		"\xDE\x75" => "\xE7\x85\xAA",		"\xDE\x76" => "\xE7\x85\xA1",		"\xDE\x77" => "\xE7\x85\x82",		"\xDE\x78" => "\xE7\x85\x98",		"\xDE\x79" => "\xE7\x85\x83",		"\xDE\x7A" => "\xE7\x85\x8B",		"\xDE\x7B" => "\xE7\x85\xB0",		"\xDE\x7C" => "\xE7\x85\x9F",		"\xDE\x7D" => "\xE7\x85\x90",		"\xDE\x7E" => "\xE7\x85\x93",		"\xDE\xA1" => "\xE7\x85\x84",		"\xDE\xA2" => "\xE7\x85\x8D",		"\xDE\xA3" => "\xE7\x85\x9A",		"\xDE\xA4" => "\xE7\x89\x8F",		"\xDE\xA5" => "\xE7\x8A\x8D",		"\xDE\xA6" => "\xE7\x8A\x8C",		"\xDE\xA7" => "\xE7\x8A\x91",		"\xDE\xA8" => "\xE7\x8A\x90",		"\xDE\xA9" => "\xE7\x8A\x8E",		"\xDE\xAA" => "\xE7\x8C\xBC",		"\xDE\xAB" => "\xE7\x8D\x82",		"\xDE\xAC" => "\xE7\x8C\xBB",		"\xDE\xAD" => "\xE7\x8C\xBA",		"\xDE\xAE" => "\xE7\x8D\x80",		"\xDE\xAF" => "\xE7\x8D\x8A",		"\xDE\xB0" => "\xE7\x8D\x89",		"\xDE\xB1" => "\xE7\x91\x84",		"\xDE\xB2" => "\xE7\x91\x8A",		"\xDE\xB3" => "\xE7\x91\x8B",		"\xDE\xB4" => "\xE7\x91\x92",		"\xDE\xB5" => "\xE7\x91\x91",		"\xDE\xB6" => "\xE7\x91\x97",		"\xDE\xB7" => "\xE7\x91\x80",		"\xDE\xB8" => "\xE7\x91\x8F",		"\xDE\xB9" => "\xE7\x91\x90",		"\xDE\xBA" => "\xE7\x91\x8E",		"\xDE\xBB" => "\xE7\x91\x82",		"\xDE\xBC" => "\xE7\x91\x86",		"\xDE\xBD" => "\xE7\x91\x8D",		"\xDE\xBE" => "\xE7\x91\x94",		"\xDE\xBF" => "\xE7\x93\xA1",		"\xDE\xC0" => "\xE7\x93\xBF",		"\xDE\xC1" => "\xE7\x93\xBE",		"\xDE\xC2" => "\xE7\x93\xBD",		"\xDE\xC3" => "\xE7\x94\x9D",		"\xDE\xC4" => "\xE7\x95\xB9",		"\xDE\xC5" => "\xE7\x95\xB7",		"\xDE\xC6" => "\xE6\xA6\x83",		"\xDE\xC7" => "\xE7\x97\xAF",		"\xDE\xC8" => "\xE7\x98\x8F",		"\xDE\xC9" => "\xE7\x98\x83",		"\xDE\xCA" => "\xE7\x97\xB7",		"\xDE\xCB" => "\xE7\x97\xBE",		"\xDE\xCC" => "\xE7\x97\xBC",		"\xDE\xCD" => "\xE7\x97\xB9",		"\xDE\xCE" => "\xE7\x97\xB8",		"\xDE\xCF" => "\xE7\x98\x90",		"\xDE\xD0" => "\xE7\x97\xBB",		"\xDE\xD1" => "\xE7\x97\xB6",		"\xDE\xD2" => "\xE7\x97\xAD",		"\xDE\xD3" => "\xE7\x97\xB5",		"\xDE\xD4" => "\xE7\x97\xBD",		"\xDE\xD5" => "\xE7\x9A\x99",		"\xDE\xD6" => "\xE7\x9A\xB5",		"\xDE\xD7" => "\xE7\x9B\x9D",		"\xDE\xD8" => "\xE7\x9D\x95",		"\xDE\xD9" => "\xE7\x9D\x9F",		"\xDE\xDA" => "\xE7\x9D\xA0",		"\xDE\xDB" => "\xE7\x9D\x92",		"\xDE\xDC" => "\xE7\x9D\x96",		"\xDE\xDD" => "\xE7\x9D\x9A",		"\xDE\xDE" => "\xE7\x9D\xA9",		"\xDE\xDF" => "\xE7\x9D\xA7",		"\xDE\xE0" => "\xE7\x9D\x94",		"\xDE\xE1" => "\xE7\x9D\x99",		"\xDE\xE2" => "\xE7\x9D\xAD",		"\xDE\xE3" => "\xE7\x9F\xA0",		"\xDE\xE4" => "\xE7\xA2\x87",		"\xDE\xE5" => "\xE7\xA2\x9A",		"\xDE\xE6" => "\xE7\xA2\x94",		"\xDE\xE7" => "\xE7\xA2\x8F",		"\xDE\xE8" => "\xE7\xA2\x84",		"\xDE\xE9" => "\xE7\xA2\x95",		"\xDE\xEA" => "\xE7\xA2\x85",		"\xDE\xEB" => "\xE7\xA2\x86",		"\xDE\xEC" => "\xE7\xA2\xA1",		"\xDE\xED" => "\xE7\xA2\x83",		"\xDE\xEE" => "\xE7\xA1\xB9",		"\xDE\xEF" => "\xE7\xA2\x99",		"\xDE\xF0" => "\xE7\xA2\x80",		"\xDE\xF1" => "\xE7\xA2\x96",		"\xDE\xF2" => "\xE7\xA1\xBB",		"\xDE\xF3" => "\xE7\xA5\xBC",		"\xDE\xF4" => "\xE7\xA6\x82",		"\xDE\xF5" => "\xE7\xA5\xBD",		"\xDE\xF6" => "\xE7\xA5\xB9",		"\xDE\xF7" => "\xE7\xA8\x91",		"\xDE\xF8" => "\xE7\xA8\x98",		"\xDE\xF9" => "\xE7\xA8\x99",		"\xDE\xFA" => "\xE7\xA8\x92",		"\xDE\xFB" => "\xE7\xA8\x97",		"\xDE\xFC" => "\xE7\xA8\x95",		"\xDE\xFD" => "\xE7\xA8\xA2",		"\xDE\xFE" => "\xE7\xA8\x93",		"\xDF\x40" => "\xE7\xA8\x9B",		"\xDF\x41" => "\xE7\xA8\x90",		"\xDF\x42" => "\xE7\xAA\xA3",		"\xDF\x43" => "\xE7\xAA\xA2",		"\xDF\x44" => "\xE7\xAA\x9E",		"\xDF\x45" => "\xE7\xAB\xAB",		"\xDF\x46" => "\xE7\xAD\xA6",		"\xDF\x47" => "\xE7\xAD\xA4",		"\xDF\x48" => "\xE7\xAD\xAD",		"\xDF\x49" => "\xE7\xAD\xB4",		"\xDF\x4A" => "\xE7\xAD\xA9",		"\xDF\x4B" => "\xE7\xAD\xB2",		"\xDF\x4C" => "\xE7\xAD\xA5",		"\xDF\x4D" => "\xE7\xAD\xB3",		"\xDF\x4E" => "\xE7\xAD\xB1",		"\xDF\x4F" => "\xE7\xAD\xB0",		"\xDF\x50" => "\xE7\xAD\xA1",		"\xDF\x51" => "\xE7\xAD\xB8",		"\xDF\x52" => "\xE7\xAD\xB6",		"\xDF\x53" => "\xE7\xAD\xA3",		"\xDF\x54" => "\xE7\xB2\xB2",		"\xDF\x55" => "\xE7\xB2\xB4",		"\xDF\x56" => "\xE7\xB2\xAF",		"\xDF\x57" => "\xE7\xB6\x88",		"\xDF\x58" => "\xE7\xB6\x86",		"\xDF\x59" => "\xE7\xB6\x80",		"\xDF\x5A" => "\xE7\xB6\x8D",		"\xDF\x5B" => "\xE7\xB5\xBF",		"\xDF\x5C" => "\xE7\xB6\x85",		"\xDF\x5D" => "\xE7\xB5\xBA",		"\xDF\x5E" => "\xE7\xB6\x8E",		"\xDF\x5F" => "\xE7\xB5\xBB",		"\xDF\x60" => "\xE7\xB6\x83",		"\xDF\x61" => "\xE7\xB5\xBC",		"\xDF\x62" => "\xE7\xB6\x8C",		"\xDF\x63" => "\xE7\xB6\x94",		"\xDF\x64" => "\xE7\xB6\x84",		"\xDF\x65" => "\xE7\xB5\xBD",		"\xDF\x66" => "\xE7\xB6\x92",		"\xDF\x67" => "\xE7\xBD\xAD",		"\xDF\x68" => "\xE7\xBD\xAB",		"\xDF\x69" => "\xE7\xBD\xA7",		"\xDF\x6A" => "\xE7\xBD\xA8",		"\xDF\x6B" => "\xE7\xBD\xAC",		"\xDF\x6C" => "\xE7\xBE\xA6",		"\xDF\x6D" => "\xE7\xBE\xA5",		"\xDF\x6E" => "\xE7\xBE\xA7",		"\xDF\x6F" => "\xE7\xBF\x9B",		"\xDF\x70" => "\xE7\xBF\x9C",		"\xDF\x71" => "\xE8\x80\xA1",		"\xDF\x72" => "\xE8\x85\xA4",		"\xDF\x73" => "\xE8\x85\xA0",		"\xDF\x74" => "\xE8\x85\xB7",		"\xDF\x75" => "\xE8\x85\x9C",		"\xDF\x76" => "\xE8\x85\xA9",		"\xDF\x77" => "\xE8\x85\x9B",		"\xDF\x78" => "\xE8\x85\xA2",		"\xDF\x79" => "\xE8\x85\xB2",		"\xDF\x7A" => "\xE6\x9C\xA1",		"\xDF\x7B" => "\xE8\x85\x9E",		"\xDF\x7C" => "\xE8\x85\xB6",		"\xDF\x7D" => "\xE8\x85\xA7",		"\xDF\x7E" => "\xE8\x85\xAF",		"\xDF\xA1" => "\xE8\x85\x84",		"\xDF\xA2" => "\xE8\x85\xA1",		"\xDF\xA3" => "\xE8\x88\x9D",		"\xDF\xA4" => "\xE8\x89\x89",		"\xDF\xA5" => "\xE8\x89\x84",		"\xDF\xA6" => "\xE8\x89\x80",		"\xDF\xA7" => "\xE8\x89\x82",		"\xDF\xA8" => "\xE8\x89\x85",		"\xDF\xA9" => "\xE8\x93\xB1",		"\xDF\xAA" => "\xE8\x90\xBF",		"\xDF\xAB" => "\xE8\x91\x96",		"\xDF\xAC" => "\xE8\x91\xB6",		"\xDF\xAD" => "\xE8\x91\xB9",		"\xDF\xAE" => "\xE8\x92\x8F",		"\xDF\xAF" => "\xE8\x92\x8D",		"\xDF\xB0" => "\xE8\x91\xA5",		"\xDF\xB1" => "\xE8\x91\x91",		"\xDF\xB2" => "\xE8\x91\x80",		"\xDF\xB3" => "\xE8\x92\x86",		"\xDF\xB4" => "\xE8\x91\xA7",		"\xDF\xB5" => "\xE8\x90\xB0",		"\xDF\xB6" => "\xE8\x91\x8D",		"\xDF\xB7" => "\xE8\x91\xBD",		"\xDF\xB8" => "\xE8\x91\x9A",		"\xDF\xB9" => "\xE8\x91\x99",		"\xDF\xBA" => "\xE8\x91\xB4",		"\xDF\xBB" => "\xE8\x91\xB3",		"\xDF\xBC" => "\xE8\x91\x9D",		"\xDF\xBD" => "\xE8\x94\x87",		"\xDF\xBE" => "\xE8\x91\x9E",		"\xDF\xBF" => "\xE8\x90\xB7",		"\xDF\xC0" => "\xE8\x90\xBA",		"\xDF\xC1" => "\xE8\x90\xB4",		"\xDF\xC2" => "\xE8\x91\xBA",		"\xDF\xC3" => "\xE8\x91\x83",		"\xDF\xC4" => "\xE8\x91\xB8",		"\xDF\xC5" => "\xE8\x90\xB2",		"\xDF\xC6" => "\xE8\x91\x85",		"\xDF\xC7" => "\xE8\x90\xA9",		"\xDF\xC8" => "\xE8\x8F\x99",		"\xDF\xC9" => "\xE8\x91\x8B",		"\xDF\xCA" => "\xE8\x90\xAF",		"\xDF\xCB" => "\xE8\x91\x82",		"\xDF\xCC" => "\xE8\x90\xAD",		"\xDF\xCD" => "\xE8\x91\x9F",		"\xDF\xCE" => "\xE8\x91\xB0",		"\xDF\xCF" => "\xE8\x90\xB9",		"\xDF\xD0" => "\xE8\x91\x8E",		"\xDF\xD1" => "\xE8\x91\x8C",		"\xDF\xD2" => "\xE8\x91\x92",		"\xDF\xD3" => "\xE8\x91\xAF",		"\xDF\xD4" => "\xE8\x93\x85",		"\xDF\xD5" => "\xE8\x92\x8E",		"\xDF\xD6" => "\xE8\x90\xBB",		"\xDF\xD7" => "\xE8\x91\x87",		"\xDF\xD8" => "\xE8\x90\xB6",		"\xDF\xD9" => "\xE8\x90\xB3",		"\xDF\xDA" => "\xE8\x91\xA8",		"\xDF\xDB" => "\xE8\x91\xBE",		"\xDF\xDC" => "\xE8\x91\x84",		"\xDF\xDD" => "\xE8\x90\xAB",		"\xDF\xDE" => "\xE8\x91\xA0",		"\xDF\xDF" => "\xE8\x91\x94",		"\xDF\xE0" => "\xE8\x91\xAE",		"\xDF\xE1" => "\xE8\x91\x90",		"\xDF\xE2" => "\xE8\x9C\x8B",		"\xDF\xE3" => "\xE8\x9C\x84",		"\xDF\xE4" => "\xE8\x9B\xB7",		"\xDF\xE5" => "\xE8\x9C\x8C",		"\xDF\xE6" => "\xE8\x9B\xBA",		"\xDF\xE7" => "\xE8\x9B\x96",		"\xDF\xE8" => "\xE8\x9B\xB5",		"\xDF\xE9" => "\xE8\x9D\x8D",		"\xDF\xEA" => "\xE8\x9B\xB8",		"\xDF\xEB" => "\xE8\x9C\x8E",		"\xDF\xEC" => "\xE8\x9C\x89",		"\xDF\xED" => "\xE8\x9C\x81",		"\xDF\xEE" => "\xE8\x9B\xB6",		"\xDF\xEF" => "\xE8\x9C\x8D",		"\xDF\xF0" => "\xE8\x9C\x85",		"\xDF\xF1" => "\xE8\xA3\x96",		"\xDF\xF2" => "\xE8\xA3\x8B",		"\xDF\xF3" => "\xE8\xA3\x8D",		"\xDF\xF4" => "\xE8\xA3\x8E",		"\xDF\xF5" => "\xE8\xA3\x9E",		"\xDF\xF6" => "\xE8\xA3\x9B",		"\xDF\xF7" => "\xE8\xA3\x9A",		"\xDF\xF8" => "\xE8\xA3\x8C",		"\xDF\xF9" => "\xE8\xA3\x90",		"\xDF\xFA" => "\xE8\xA6\x85",		"\xDF\xFB" => "\xE8\xA6\x9B",		"\xDF\xFC" => "\xE8\xA7\x9F",		"\xDF\xFD" => "\xE8\xA7\xA5",		"\xDF\xFE" => "\xE8\xA7\xA4",		"\xE0\x40" => "\xE8\xA7\xA1",		"\xE0\x41" => "\xE8\xA7\xA0",		"\xE0\x42" => "\xE8\xA7\xA2",		"\xE0\x43" => "\xE8\xA7\x9C",		"\xE0\x44" => "\xE8\xA7\xA6",		"\xE0\x45" => "\xE8\xA9\xB6",		"\xE0\x46" => "\xE8\xAA\x86",		"\xE0\x47" => "\xE8\xA9\xBF",		"\xE0\x48" => "\xE8\xA9\xA1",		"\xE0\x49" => "\xE8\xA8\xBF",		"\xE0\x4A" => "\xE8\xA9\xB7",		"\xE0\x4B" => "\xE8\xAA\x82",		"\xE0\x4C" => "\xE8\xAA\x84",		"\xE0\x4D" => "\xE8\xA9\xB5",		"\xE0\x4E" => "\xE8\xAA\x83",		"\xE0\x4F" => "\xE8\xAA\x81",		"\xE0\x50" => "\xE8\xA9\xB4",		"\xE0\x51" => "\xE8\xA9\xBA",		"\xE0\x52" => "\xE8\xB0\xBC",		"\xE0\x53" => "\xE8\xB1\x8B",		"\xE0\x54" => "\xE8\xB1\x8A",		"\xE0\x55" => "\xE8\xB1\xA5",		"\xE0\x56" => "\xE8\xB1\xA4",		"\xE0\x57" => "\xE8\xB1\xA6",		"\xE0\x58" => "\xE8\xB2\x86",		"\xE0\x59" => "\xE8\xB2\x84",		"\xE0\x5A" => "\xE8\xB2\x85",		"\xE0\x5B" => "\xE8\xB3\x8C",		"\xE0\x5C" => "\xE8\xB5\xA8",		"\xE0\x5D" => "\xE8\xB5\xA9",		"\xE0\x5E" => "\xE8\xB6\x91",		"\xE0\x5F" => "\xE8\xB6\x8C",		"\xE0\x60" => "\xE8\xB6\x8E",		"\xE0\x61" => "\xE8\xB6\x8F",		"\xE0\x62" => "\xE8\xB6\x8D",		"\xE0\x63" => "\xE8\xB6\x93",		"\xE0\x64" => "\xE8\xB6\x94",		"\xE0\x65" => "\xE8\xB6\x90",		"\xE0\x66" => "\xE8\xB6\x92",		"\xE0\x67" => "\xE8\xB7\xB0",		"\xE0\x68" => "\xE8\xB7\xA0",		"\xE0\x69" => "\xE8\xB7\xAC",		"\xE0\x6A" => "\xE8\xB7\xB1",		"\xE0\x6B" => "\xE8\xB7\xAE",		"\xE0\x6C" => "\xE8\xB7\x90",		"\xE0\x6D" => "\xE8\xB7\xA9",		"\xE0\x6E" => "\xE8\xB7\xA3",		"\xE0\x6F" => "\xE8\xB7\xA2",		"\xE0\x70" => "\xE8\xB7\xA7",		"\xE0\x71" => "\xE8\xB7\xB2",		"\xE0\x72" => "\xE8\xB7\xAB",		"\xE0\x73" => "\xE8\xB7\xB4",		"\xE0\x74" => "\xE8\xBC\x86",		"\xE0\x75" => "\xE8\xBB\xBF",		"\xE0\x76" => "\xE8\xBC\x81",		"\xE0\x77" => "\xE8\xBC\x80",		"\xE0\x78" => "\xE8\xBC\x85",		"\xE0\x79" => "\xE8\xBC\x87",		"\xE0\x7A" => "\xE8\xBC\x88",		"\xE0\x7B" => "\xE8\xBC\x82",		"\xE0\x7C" => "\xE8\xBC\x8B",		"\xE0\x7D" => "\xE9\x81\x92",		"\xE0\x7E" => "\xE9\x80\xBF",		"\xE0\xA1" => "\xE9\x81\x84",		"\xE0\xA2" => "\xE9\x81\x89",		"\xE0\xA3" => "\xE9\x80\xBD",		"\xE0\xA4" => "\xE9\x84\x90",		"\xE0\xA5" => "\xE9\x84\x8D",		"\xE0\xA6" => "\xE9\x84\x8F",		"\xE0\xA7" => "\xE9\x84\x91",		"\xE0\xA8" => "\xE9\x84\x96",		"\xE0\xA9" => "\xE9\x84\x94",		"\xE0\xAA" => "\xE9\x84\x8B",		"\xE0\xAB" => "\xE9\x84\x8E",		"\xE0\xAC" => "\xE9\x85\xAE",		"\xE0\xAD" => "\xE9\x85\xAF",		"\xE0\xAE" => "\xE9\x89\x88",		"\xE0\xAF" => "\xE9\x89\x92",		"\xE0\xB0" => "\xE9\x88\xB0",		"\xE0\xB1" => "\xE9\x88\xBA",		"\xE0\xB2" => "\xE9\x89\xA6",		"\xE0\xB3" => "\xE9\x88\xB3",		"\xE0\xB4" => "\xE9\x89\xA5",		"\xE0\xB5" => "\xE9\x89\x9E",		"\xE0\xB6" => "\xE9\x8A\x83",		"\xE0\xB7" => "\xE9\x88\xAE",		"\xE0\xB8" => "\xE9\x89\x8A",		"\xE0\xB9" => "\xE9\x89\x86",		"\xE0\xBA" => "\xE9\x89\xAD",		"\xE0\xBB" => "\xE9\x89\xAC",		"\xE0\xBC" => "\xE9\x89\x8F",		"\xE0\xBD" => "\xE9\x89\xA0",		"\xE0\xBE" => "\xE9\x89\xA7",		"\xE0\xBF" => "\xE9\x89\xAF",		"\xE0\xC0" => "\xE9\x88\xB6",		"\xE0\xC1" => "\xE9\x89\xA1",		"\xE0\xC2" => "\xE9\x89\xB0",		"\xE0\xC3" => "\xE9\x88\xB1",		"\xE0\xC4" => "\xE9\x89\x94",		"\xE0\xC5" => "\xE9\x89\xA3",		"\xE0\xC6" => "\xE9\x89\x90",		"\xE0\xC7" => "\xE9\x89\xB2",		"\xE0\xC8" => "\xE9\x89\x8E",		"\xE0\xC9" => "\xE9\x89\x93",		"\xE0\xCA" => "\xE9\x89\x8C",		"\xE0\xCB" => "\xE9\x89\x96",		"\xE0\xCC" => "\xE9\x88\xB2",		"\xE0\xCD" => "\xE9\x96\x9F",		"\xE0\xCE" => "\xE9\x96\x9C",		"\xE0\xCF" => "\xE9\x96\x9E",		"\xE0\xD0" => "\xE9\x96\x9B",		"\xE0\xD1" => "\xE9\x9A\x92",		"\xE0\xD2" => "\xE9\x9A\x93",		"\xE0\xD3" => "\xE9\x9A\x91",		"\xE0\xD4" => "\xE9\x9A\x97",		"\xE0\xD5" => "\xE9\x9B\x8E",		"\xE0\xD6" => "\xE9\x9B\xBA",		"\xE0\xD7" => "\xE9\x9B\xBD",		"\xE0\xD8" => "\xE9\x9B\xB8",		"\xE0\xD9" => "\xE9\x9B\xB5",		"\xE0\xDA" => "\xE9\x9D\xB3",		"\xE0\xDB" => "\xE9\x9D\xB7",		"\xE0\xDC" => "\xE9\x9D\xB8",		"\xE0\xDD" => "\xE9\x9D\xB2",		"\xE0\xDE" => "\xE9\xA0\x8F",		"\xE0\xDF" => "\xE9\xA0\x8D",		"\xE0\xE0" => "\xE9\xA0\x8E",		"\xE0\xE1" => "\xE9\xA2\xAC",		"\xE0\xE2" => "\xE9\xA3\xB6",		"\xE0\xE3" => "\xE9\xA3\xB9",		"\xE0\xE4" => "\xE9\xA6\xAF",		"\xE0\xE5" => "\xE9\xA6\xB2",		"\xE0\xE6" => "\xE9\xA6\xB0",		"\xE0\xE7" => "\xE9\xA6\xB5",		"\xE0\xE8" => "\xE9\xAA\xAD",		"\xE0\xE9" => "\xE9\xAA\xAB",		"\xE0\xEA" => "\xE9\xAD\x9B",		"\xE0\xEB" => "\xE9\xB3\xAA",		"\xE0\xEC" => "\xE9\xB3\xAD",		"\xE0\xED" => "\xE9\xB3\xA7",		"\xE0\xEE" => "\xE9\xBA\x80",		"\xE0\xEF" => "\xE9\xBB\xBD",		"\xE0\xF0" => "\xE5\x83\xA6",		"\xE0\xF1" => "\xE5\x83\x94",		"\xE0\xF2" => "\xE5\x83\x97",		"\xE0\xF3" => "\xE5\x83\xA8",		"\xE0\xF4" => "\xE5\x83\xB3",		"\xE0\xF5" => "\xE5\x83\x9B",		"\xE0\xF6" => "\xE5\x83\xAA",		"\xE0\xF7" => "\xE5\x83\x9D",		"\xE0\xF8" => "\xE5\x83\xA4",		"\xE0\xF9" => "\xE5\x83\x93",		"\xE0\xFA" => "\xE5\x83\xAC",		"\xE0\xFB" => "\xE5\x83\xB0",		"\xE0\xFC" => "\xE5\x83\xAF",		"\xE0\xFD" => "\xE5\x83\xA3",		"\xE0\xFE" => "\xE5\x83\xA0",		"\xE1\x40" => "\xE5\x87\x98",		"\xE1\x41" => "\xE5\x8A\x80",		"\xE1\x42" => "\xE5\x8A\x81",		"\xE1\x43" => "\xE5\x8B\xA9",		"\xE1\x44" => "\xE5\x8B\xAB",		"\xE1\x45" => "\xE5\x8C\xB0",		"\xE1\x46" => "\xE5\x8E\xAC",		"\xE1\x47" => "\xE5\x98\xA7",		"\xE1\x48" => "\xE5\x98\x95",		"\xE1\x49" => "\xE5\x98\x8C",		"\xE1\x4A" => "\xE5\x98\x92",		"\xE1\x4B" => "\xE5\x97\xBC",		"\xE1\x4C" => "\xE5\x98\x8F",		"\xE1\x4D" => "\xE5\x98\x9C",		"\xE1\x4E" => "\xE5\x98\x81",		"\xE1\x4F" => "\xE5\x98\x93",		"\xE1\x50" => "\xE5\x98\x82",		"\xE1\x51" => "\xE5\x97\xBA",		"\xE1\x52" => "\xE5\x98\x9D",		"\xE1\x53" => "\xE5\x98\x84",		"\xE1\x54" => "\xE5\x97\xBF",		"\xE1\x55" => "\xE5\x97\xB9",		"\xE1\x56" => "\xE5\xA2\x89",		"\xE1\x57" => "\xE5\xA1\xBC",		"\xE1\x58" => "\xE5\xA2\x90",		"\xE1\x59" => "\xE5\xA2\x98",		"\xE1\x5A" => "\xE5\xA2\x86",		"\xE1\x5B" => "\xE5\xA2\x81",		"\xE1\x5C" => "\xE5\xA1\xBF",		"\xE1\x5D" => "\xE5\xA1\xB4",		"\xE1\x5E" => "\xE5\xA2\x8B",		"\xE1\x5F" => "\xE5\xA1\xBA",		"\xE1\x60" => "\xE5\xA2\x87",		"\xE1\x61" => "\xE5\xA2\x91",		"\xE1\x62" => "\xE5\xA2\x8E",		"\xE1\x63" => "\xE5\xA1\xB6",		"\xE1\x64" => "\xE5\xA2\x82",		"\xE1\x65" => "\xE5\xA2\x88",		"\xE1\x66" => "\xE5\xA1\xBB",		"\xE1\x67" => "\xE5\xA2\x94",		"\xE1\x68" => "\xE5\xA2\x8F",		"\xE1\x69" => "\xE5\xA3\xBE",		"\xE1\x6A" => "\xE5\xA5\xAB",		"\xE1\x6B" => "\xE5\xAB\x9C",		"\xE1\x6C" => "\xE5\xAB\xAE",		"\xE1\x6D" => "\xE5\xAB\xA5",		"\xE1\x6E" => "\xE5\xAB\x95",		"\xE1\x6F" => "\xE5\xAB\xAA",		"\xE1\x70" => "\xE5\xAB\x9A",		"\xE1\x71" => "\xE5\xAB\xAD",		"\xE1\x72" => "\xE5\xAB\xAB",		"\xE1\x73" => "\xE5\xAB\xB3",		"\xE1\x74" => "\xE5\xAB\xA2",		"\xE1\x75" => "\xE5\xAB\xA0",		"\xE1\x76" => "\xE5\xAB\x9B",		"\xE1\x77" => "\xE5\xAB\xAC",		"\xE1\x78" => "\xE5\xAB\x9E",		"\xE1\x79" => "\xE5\xAB\x9D",		"\xE1\x7A" => "\xE5\xAB\x99",		"\xE1\x7B" => "\xE5\xAB\xA8",		"\xE1\x7C" => "\xE5\xAB\x9F",		"\xE1\x7D" => "\xE5\xAD\xB7",		"\xE1\x7E" => "\xE5\xAF\xA0",		"\xE1\xA1" => "\xE5\xAF\xA3",		"\xE1\xA2" => "\xE5\xB1\xA3",		"\xE1\xA3" => "\xE5\xB6\x82",		"\xE1\xA4" => "\xE5\xB6\x80",		"\xE1\xA5" => "\xE5\xB5\xBD",		"\xE1\xA6" => "\xE5\xB6\x86",		"\xE1\xA7" => "\xE5\xB5\xBA",		"\xE1\xA8" => "\xE5\xB6\x81",		"\xE1\xA9" => "\xE5\xB5\xB7",		"\xE1\xAA" => "\xE5\xB6\x8A",		"\xE1\xAB" => "\xE5\xB6\x89",		"\xE1\xAC" => "\xE5\xB6\x88",		"\xE1\xAD" => "\xE5\xB5\xBE",		"\xE1\xAE" => "\xE5\xB5\xBC",		"\xE1\xAF" => "\xE5\xB6\x8D",		"\xE1\xB0" => "\xE5\xB5\xB9",		"\xE1\xB1" => "\xE5\xB5\xBF",		"\xE1\xB2" => "\xE5\xB9\x98",		"\xE1\xB3" => "\xE5\xB9\x99",		"\xE1\xB4" => "\xE5\xB9\x93",		"\xE1\xB5" => "\xE5\xBB\x98",		"\xE1\xB6" => "\xE5\xBB\x91",		"\xE1\xB7" => "\xE5\xBB\x97",		"\xE1\xB8" => "\xE5\xBB\x8E",		"\xE1\xB9" => "\xE5\xBB\x9C",		"\xE1\xBA" => "\xE5\xBB\x95",		"\xE1\xBB" => "\xE5\xBB\x99",		"\xE1\xBC" => "\xE5\xBB\x92",		"\xE1\xBD" => "\xE5\xBB\x94",		"\xE1\xBE" => "\xE5\xBD\x84",		"\xE1\xBF" => "\xE5\xBD\x83",		"\xE1\xC0" => "\xE5\xBD\xAF",		"\xE1\xC1" => "\xE5\xBE\xB6",		"\xE1\xC2" => "\xE6\x84\xAC",		"\xE1\xC3" => "\xE6\x84\xA8",		"\xE1\xC4" => "\xE6\x85\x81",		"\xE1\xC5" => "\xE6\x85\x9E",		"\xE1\xC6" => "\xE6\x85\xB1",		"\xE1\xC7" => "\xE6\x85\xB3",		"\xE1\xC8" => "\xE6\x85\x92",		"\xE1\xC9" => "\xE6\x85\x93",		"\xE1\xCA" => "\xE6\x85\xB2",		"\xE1\xCB" => "\xE6\x85\xAC",		"\xE1\xCC" => "\xE6\x86\x80",		"\xE1\xCD" => "\xE6\x85\xB4",		"\xE1\xCE" => "\xE6\x85\x94",		"\xE1\xCF" => "\xE6\x85\xBA",		"\xE1\xD0" => "\xE6\x85\x9B",		"\xE1\xD1" => "\xE6\x85\xA5",		"\xE1\xD2" => "\xE6\x84\xBB",		"\xE1\xD3" => "\xE6\x85\xAA",		"\xE1\xD4" => "\xE6\x85\xA1",		"\xE1\xD5" => "\xE6\x85\x96",		"\xE1\xD6" => "\xE6\x88\xA9",		"\xE1\xD7" => "\xE6\x88\xA7",		"\xE1\xD8" => "\xE6\x88\xAB",		"\xE1\xD9" => "\xE6\x90\xAB",		"\xE1\xDA" => "\xE6\x91\x8D",		"\xE1\xDB" => "\xE6\x91\x9B",		"\xE1\xDC" => "\xE6\x91\x9D",		"\xE1\xDD" => "\xE6\x91\xB4",		"\xE1\xDE" => "\xE6\x91\xB6",		"\xE1\xDF" => "\xE6\x91\xB2",		"\xE1\xE0" => "\xE6\x91\xB3",		"\xE1\xE1" => "\xE6\x91\xBD",		"\xE1\xE2" => "\xE6\x91\xB5",		"\xE1\xE3" => "\xE6\x91\xA6",		"\xE1\xE4" => "\xE6\x92\xA6",		"\xE1\xE5" => "\xE6\x91\x8E",		"\xE1\xE6" => "\xE6\x92\x82",		"\xE1\xE7" => "\xE6\x91\x9E",		"\xE1\xE8" => "\xE6\x91\x9C",		"\xE1\xE9" => "\xE6\x91\x8B",		"\xE1\xEA" => "\xE6\x91\x93",		"\xE1\xEB" => "\xE6\x91\xA0",		"\xE1\xEC" => "\xE6\x91\x90",		"\xE1\xED" => "\xE6\x91\xBF",		"\xE1\xEE" => "\xE6\x90\xBF",		"\xE1\xEF" => "\xE6\x91\xAC",		"\xE1\xF0" => "\xE6\x91\xAB",		"\xE1\xF1" => "\xE6\x91\x99",		"\xE1\xF2" => "\xE6\x91\xA5",		"\xE1\xF3" => "\xE6\x91\xB7",		"\xE1\xF4" => "\xE6\x95\xB3",		"\xE1\xF5" => "\xE6\x96\xA0",		"\xE1\xF6" => "\xE6\x9A\xA1",		"\xE1\xF7" => "\xE6\x9A\xA0",		"\xE1\xF8" => "\xE6\x9A\x9F",		"\xE1\xF9" => "\xE6\x9C\x85",		"\xE1\xFA" => "\xE6\x9C\x84",		"\xE1\xFB" => "\xE6\x9C\xA2",		"\xE1\xFC" => "\xE6\xA6\xB1",		"\xE1\xFD" => "\xE6\xA6\xB6",		"\xE1\xFE" => "\xE6\xA7\x89",		"\xE2\x40" => "\xE6\xA6\xA0",		"\xE2\x41" => "\xE6\xA7\x8E",		"\xE2\x42" => "\xE6\xA6\x96",		"\xE2\x43" => "\xE6\xA6\xB0",		"\xE2\x44" => "\xE6\xA6\xAC",		"\xE2\x45" => "\xE6\xA6\xBC",		"\xE2\x46" => "\xE6\xA6\x91",		"\xE2\x47" => "\xE6\xA6\x99",		"\xE2\x48" => "\xE6\xA6\x8E",		"\xE2\x49" => "\xE6\xA6\xA7",		"\xE2\x4A" => "\xE6\xA6\x8D",		"\xE2\x4B" => "\xE6\xA6\xA9",		"\xE2\x4C" => "\xE6\xA6\xBE",		"\xE2\x4D" => "\xE6\xA6\xAF",		"\xE2\x4E" => "\xE6\xA6\xBF",		"\xE2\x4F" => "\xE6\xA7\x84",		"\xE2\x50" => "\xE6\xA6\xBD",		"\xE2\x51" => "\xE6\xA6\xA4",		"\xE2\x52" => "\xE6\xA7\x94",		"\xE2\x53" => "\xE6\xA6\xB9",		"\xE2\x54" => "\xE6\xA7\x8A",		"\xE2\x55" => "\xE6\xA6\x9A",		"\xE2\x56" => "\xE6\xA7\x8F",		"\xE2\x57" => "\xE6\xA6\xB3",		"\xE2\x58" => "\xE6\xA6\x93",		"\xE2\x59" => "\xE6\xA6\xAA",		"\xE2\x5A" => "\xE6\xA6\xA1",		"\xE2\x5B" => "\xE6\xA6\x9E",		"\xE2\x5C" => "\xE6\xA7\x99",		"\xE2\x5D" => "\xE6\xA6\x97",		"\xE2\x5E" => "\xE6\xA6\x90",		"\xE2\x5F" => "\xE6\xA7\x82",		"\xE2\x60" => "\xE6\xA6\xB5",		"\xE2\x61" => "\xE6\xA6\xA5",		"\xE2\x62" => "\xE6\xA7\x86",		"\xE2\x63" => "\xE6\xAD\x8A",		"\xE2\x64" => "\xE6\xAD\x8D",		"\xE2\x65" => "\xE6\xAD\x8B",		"\xE2\x66" => "\xE6\xAE\x9E",		"\xE2\x67" => "\xE6\xAE\x9F",		"\xE2\x68" => "\xE6\xAE\xA0",		"\xE2\x69" => "\xE6\xAF\x83",		"\xE2\x6A" => "\xE6\xAF\x84",		"\xE2\x6B" => "\xE6\xAF\xBE",		"\xE2\x6C" => "\xE6\xBB\x8E",		"\xE2\x6D" => "\xE6\xBB\xB5",		"\xE2\x6E" => "\xE6\xBB\xB1",		"\xE2\x6F" => "\xE6\xBC\x83",		"\xE2\x70" => "\xE6\xBC\xA5",		"\xE2\x71" => "\xE6\xBB\xB8",		"\xE2\x72" => "\xE6\xBC\xB7",		"\xE2\x73" => "\xE6\xBB\xBB",		"\xE2\x74" => "\xE6\xBC\xAE",		"\xE2\x75" => "\xE6\xBC\x89",		"\xE2\x76" => "\xE6\xBD\x8E",		"\xE2\x77" => "\xE6\xBC\x99",		"\xE2\x78" => "\xE6\xBC\x9A",		"\xE2\x79" => "\xE6\xBC\xA7",		"\xE2\x7A" => "\xE6\xBC\x98",		"\xE2\x7B" => "\xE6\xBC\xBB",		"\xE2\x7C" => "\xE6\xBC\x92",		"\xE2\x7D" => "\xE6\xBB\xAD",		"\xE2\x7E" => "\xE6\xBC\x8A",		"\xE2\xA1" => "\xE6\xBC\xB6",		"\xE2\xA2" => "\xE6\xBD\xB3",		"\xE2\xA3" => "\xE6\xBB\xB9",		"\xE2\xA4" => "\xE6\xBB\xAE",		"\xE2\xA5" => "\xE6\xBC\xAD",		"\xE2\xA6" => "\xE6\xBD\x80",		"\xE2\xA7" => "\xE6\xBC\xB0",		"\xE2\xA8" => "\xE6\xBC\xBC",		"\xE2\xA9" => "\xE6\xBC\xB5",		"\xE2\xAA" => "\xE6\xBB\xAB",		"\xE2\xAB" => "\xE6\xBC\x87",		"\xE2\xAC" => "\xE6\xBC\x8E",		"\xE2\xAD" => "\xE6\xBD\x83",		"\xE2\xAE" => "\xE6\xBC\x85",		"\xE2\xAF" => "\xE6\xBB\xBD",		"\xE2\xB0" => "\xE6\xBB\xB6",		"\xE2\xB1" => "\xE6\xBC\xB9",		"\xE2\xB2" => "\xE6\xBC\x9C",		"\xE2\xB3" => "\xE6\xBB\xBC",		"\xE2\xB4" => "\xE6\xBC\xBA",		"\xE2\xB5" => "\xE6\xBC\x9F",		"\xE2\xB6" => "\xE6\xBC\x8D",		"\xE2\xB7" => "\xE6\xBC\x9E",		"\xE2\xB8" => "\xE6\xBC\x88",		"\xE2\xB9" => "\xE6\xBC\xA1",		"\xE2\xBA" => "\xE7\x86\x87",		"\xE2\xBB" => "\xE7\x86\x90",		"\xE2\xBC" => "\xE7\x86\x89",		"\xE2\xBD" => "\xE7\x86\x80",		"\xE2\xBE" => "\xE7\x86\x85",		"\xE2\xBF" => "\xE7\x86\x82",		"\xE2\xC0" => "\xE7\x86\x8F",		"\xE2\xC1" => "\xE7\x85\xBB",		"\xE2\xC2" => "\xE7\x86\x86",		"\xE2\xC3" => "\xE7\x86\x81",		"\xE2\xC4" => "\xE7\x86\x97",		"\xE2\xC5" => "\xE7\x89\x84",		"\xE2\xC6" => "\xE7\x89\x93",		"\xE2\xC7" => "\xE7\x8A\x97",		"\xE2\xC8" => "\xE7\x8A\x95",		"\xE2\xC9" => "\xE7\x8A\x93",		"\xE2\xCA" => "\xE7\x8D\x83",		"\xE2\xCB" => "\xE7\x8D\x8D",		"\xE2\xCC" => "\xE7\x8D\x91",		"\xE2\xCD" => "\xE7\x8D\x8C",		"\xE2\xCE" => "\xE7\x91\xA2",		"\xE2\xCF" => "\xE7\x91\xB3",		"\xE2\xD0" => "\xE7\x91\xB1",		"\xE2\xD1" => "\xE7\x91\xB5",		"\xE2\xD2" => "\xE7\x91\xB2",		"\xE2\xD3" => "\xE7\x91\xA7",		"\xE2\xD4" => "\xE7\x91\xAE",		"\xE2\xD5" => "\xE7\x94\x80",		"\xE2\xD6" => "\xE7\x94\x82",		"\xE2\xD7" => "\xE7\x94\x83",		"\xE2\xD8" => "\xE7\x95\xBD",		"\xE2\xD9" => "\xE7\x96\x90",		"\xE2\xDA" => "\xE7\x98\x96",		"\xE2\xDB" => "\xE7\x98\x88",		"\xE2\xDC" => "\xE7\x98\x8C",		"\xE2\xDD" => "\xE7\x98\x95",		"\xE2\xDE" => "\xE7\x98\x91",		"\xE2\xDF" => "\xE7\x98\x8A",		"\xE2\xE0" => "\xE7\x98\x94",		"\xE2\xE1" => "\xE7\x9A\xB8",		"\xE2\xE2" => "\xE7\x9E\x81",		"\xE2\xE3" => "\xE7\x9D\xBC",		"\xE2\xE4" => "\xE7\x9E\x85",		"\xE2\xE5" => "\xE7\x9E\x82",		"\xE2\xE6" => "\xE7\x9D\xAE",		"\xE2\xE7" => "\xE7\x9E\x80",		"\xE2\xE8" => "\xE7\x9D\xAF",		"\xE2\xE9" => "\xE7\x9D\xBE",		"\xE2\xEA" => "\xE7\x9E\x83",		"\xE2\xEB" => "\xE7\xA2\xB2",		"\xE2\xEC" => "\xE7\xA2\xAA",		"\xE2\xED" => "\xE7\xA2\xB4",		"\xE2\xEE" => "\xE7\xA2\xAD",		"\xE2\xEF" => "\xE7\xA2\xA8",		"\xE2\xF0" => "\xE7\xA1\xBE",		"\xE2\xF1" => "\xE7\xA2\xAB",		"\xE2\xF2" => "\xE7\xA2\x9E",		"\xE2\xF3" => "\xE7\xA2\xA5",		"\xE2\xF4" => "\xE7\xA2\xA0",		"\xE2\xF5" => "\xE7\xA2\xAC",		"\xE2\xF6" => "\xE7\xA2\xA2",		"\xE2\xF7" => "\xE7\xA2\xA4",		"\xE2\xF8" => "\xE7\xA6\x98",		"\xE2\xF9" => "\xE7\xA6\x8A",		"\xE2\xFA" => "\xE7\xA6\x8B",		"\xE2\xFB" => "\xE7\xA6\x96",		"\xE2\xFC" => "\xE7\xA6\x95",		"\xE2\xFD" => "\xE7\xA6\x94",		"\xE2\xFE" => "\xE7\xA6\x93",		"\xE3\x40" => "\xE7\xA6\x97",		"\xE3\x41" => "\xE7\xA6\x88",		"\xE3\x42" => "\xE7\xA6\x92",		"\xE3\x43" => "\xE7\xA6\x90",		"\xE3\x44" => "\xE7\xA8\xAB",		"\xE3\x45" => "\xE7\xA9\x8A",		"\xE3\x46" => "\xE7\xA8\xB0",		"\xE3\x47" => "\xE7\xA8\xAF",		"\xE3\x48" => "\xE7\xA8\xA8",		"\xE3\x49" => "\xE7\xA8\xA6",		"\xE3\x4A" => "\xE7\xAA\xA8",		"\xE3\x4B" => "\xE7\xAA\xAB",		"\xE3\x4C" => "\xE7\xAA\xAC",		"\xE3\x4D" => "\xE7\xAB\xAE",		"\xE3\x4E" => "\xE7\xAE\x88",		"\xE3\x4F" => "\xE7\xAE\x9C",		"\xE3\x50" => "\xE7\xAE\x8A",		"\xE3\x51" => "\xE7\xAE\x91",		"\xE3\x52" => "\xE7\xAE\x90",		"\xE3\x53" => "\xE7\xAE\x96",		"\xE3\x54" => "\xE7\xAE\x8D",		"\xE3\x55" => "\xE7\xAE\x8C",		"\xE3\x56" => "\xE7\xAE\x9B",		"\xE3\x57" => "\xE7\xAE\x8E",		"\xE3\x58" => "\xE7\xAE\x85",		"\xE3\x59" => "\xE7\xAE\x98",		"\xE3\x5A" => "\xE5\x8A\x84",		"\xE3\x5B" => "\xE7\xAE\x99",		"\xE3\x5C" => "\xE7\xAE\xA4",		"\xE3\x5D" => "\xE7\xAE\x82",		"\xE3\x5E" => "\xE7\xB2\xBB",		"\xE3\x5F" => "\xE7\xB2\xBF",		"\xE3\x60" => "\xE7\xB2\xBC",		"\xE3\x61" => "\xE7\xB2\xBA",		"\xE3\x62" => "\xE7\xB6\xA7",		"\xE3\x63" => "\xE7\xB6\xB7",		"\xE3\x64" => "\xE7\xB7\x82",		"\xE3\x65" => "\xE7\xB6\xA3",		"\xE3\x66" => "\xE7\xB6\xAA",		"\xE3\x67" => "\xE7\xB7\x81",		"\xE3\x68" => "\xE7\xB7\x80",		"\xE3\x69" => "\xE7\xB7\x85",		"\xE3\x6A" => "\xE7\xB6\x9D",		"\xE3\x6B" => "\xE7\xB7\x8E",		"\xE3\x6C" => "\xE7\xB7\x84",		"\xE3\x6D" => "\xE7\xB7\x86",		"\xE3\x6E" => "\xE7\xB7\x8B",		"\xE3\x6F" => "\xE7\xB7\x8C",		"\xE3\x70" => "\xE7\xB6\xAF",		"\xE3\x71" => "\xE7\xB6\xB9",		"\xE3\x72" => "\xE7\xB6\x96",		"\xE3\x73" => "\xE7\xB6\xBC",		"\xE3\x74" => "\xE7\xB6\x9F",		"\xE3\x75" => "\xE7\xB6\xA6",		"\xE3\x76" => "\xE7\xB6\xAE",		"\xE3\x77" => "\xE7\xB6\xA9",		"\xE3\x78" => "\xE7\xB6\xA1",		"\xE3\x79" => "\xE7\xB7\x89",		"\xE3\x7A" => "\xE7\xBD\xB3",		"\xE3\x7B" => "\xE7\xBF\xA2",		"\xE3\x7C" => "\xE7\xBF\xA3",		"\xE3\x7D" => "\xE7\xBF\xA5",		"\xE3\x7E" => "\xE7\xBF\x9E",		"\xE3\xA1" => "\xE8\x80\xA4",		"\xE3\xA2" => "\xE8\x81\x9D",		"\xE3\xA3" => "\xE8\x81\x9C",		"\xE3\xA4" => "\xE8\x86\x89",		"\xE3\xA5" => "\xE8\x86\x86",		"\xE3\xA6" => "\xE8\x86\x83",		"\xE3\xA7" => "\xE8\x86\x87",		"\xE3\xA8" => "\xE8\x86\x8D",		"\xE3\xA9" => "\xE8\x86\x8C",		"\xE3\xAA" => "\xE8\x86\x8B",		"\xE3\xAB" => "\xE8\x88\x95",		"\xE3\xAC" => "\xE8\x92\x97",		"\xE3\xAD" => "\xE8\x92\xA4",		"\xE3\xAE" => "\xE8\x92\xA1",		"\xE3\xAF" => "\xE8\x92\x9F",		"\xE3\xB0" => "\xE8\x92\xBA",		"\xE3\xB1" => "\xE8\x93\x8E",		"\xE3\xB2" => "\xE8\x93\x82",		"\xE3\xB3" => "\xE8\x92\xAC",		"\xE3\xB4" => "\xE8\x92\xAE",		"\xE3\xB5" => "\xE8\x92\xAB",		"\xE3\xB6" => "\xE8\x92\xB9",		"\xE3\xB7" => "\xE8\x92\xB4",		"\xE3\xB8" => "\xE8\x93\x81",		"\xE3\xB9" => "\xE8\x93\x8D",		"\xE3\xBA" => "\xE8\x92\xAA",		"\xE3\xBB" => "\xE8\x92\x9A",		"\xE3\xBC" => "\xE8\x92\xB1",		"\xE3\xBD" => "\xE8\x93\x90",		"\xE3\xBE" => "\xE8\x92\x9D",		"\xE3\xBF" => "\xE8\x92\xA7",		"\xE3\xC0" => "\xE8\x92\xBB",		"\xE3\xC1" => "\xE8\x92\xA2",		"\xE3\xC2" => "\xE8\x92\x94",		"\xE3\xC3" => "\xE8\x93\x87",		"\xE3\xC4" => "\xE8\x93\x8C",		"\xE3\xC5" => "\xE8\x92\x9B",		"\xE3\xC6" => "\xE8\x92\xA9",		"\xE3\xC7" => "\xE8\x92\xAF",		"\xE3\xC8" => "\xE8\x92\xA8",		"\xE3\xC9" => "\xE8\x93\x96",		"\xE3\xCA" => "\xE8\x92\x98",		"\xE3\xCB" => "\xE8\x92\xB6",		"\xE3\xCC" => "\xE8\x93\x8F",		"\xE3\xCD" => "\xE8\x92\xA0",		"\xE3\xCE" => "\xE8\x93\x97",		"\xE3\xCF" => "\xE8\x93\x94",		"\xE3\xD0" => "\xE8\x93\x92",		"\xE3\xD1" => "\xE8\x93\x9B",		"\xE3\xD2" => "\xE8\x92\xB0",		"\xE3\xD3" => "\xE8\x92\x91",		"\xE3\xD4" => "\xE8\x99\xA1",		"\xE3\xD5" => "\xE8\x9C\xB3",		"\xE3\xD6" => "\xE8\x9C\xA3",		"\xE3\xD7" => "\xE8\x9C\xA8",		"\xE3\xD8" => "\xE8\x9D\xAB",		"\xE3\xD9" => "\xE8\x9D\x80",		"\xE3\xDA" => "\xE8\x9C\xAE",		"\xE3\xDB" => "\xE8\x9C\x9E",		"\xE3\xDC" => "\xE8\x9C\xA1",		"\xE3\xDD" => "\xE8\x9C\x99",		"\xE3\xDE" => "\xE8\x9C\x9B",		"\xE3\xDF" => "\xE8\x9D\x83",		"\xE3\xE0" => "\xE8\x9C\xAC",		"\xE3\xE1" => "\xE8\x9D\x81",		"\xE3\xE2" => "\xE8\x9C\xBE",		"\xE3\xE3" => "\xE8\x9D\x86",		"\xE3\xE4" => "\xE8\x9C\xA0",		"\xE3\xE5" => "\xE8\x9C\xB2",		"\xE3\xE6" => "\xE8\x9C\xAA",		"\xE3\xE7" => "\xE8\x9C\xAD",		"\xE3\xE8" => "\xE8\x9C\xBC",		"\xE3\xE9" => "\xE8\x9C\x92",		"\xE3\xEA" => "\xE8\x9C\xBA",		"\xE3\xEB" => "\xE8\x9C\xB1",		"\xE3\xEC" => "\xE8\x9C\xB5",		"\xE3\xED" => "\xE8\x9D\x82",		"\xE3\xEE" => "\xE8\x9C\xA6",		"\xE3\xEF" => "\xE8\x9C\xA7",		"\xE3\xF0" => "\xE8\x9C\xB8",		"\xE3\xF1" => "\xE8\x9C\xA4",		"\xE3\xF2" => "\xE8\x9C\x9A",		"\xE3\xF3" => "\xE8\x9C\xB0",		"\xE3\xF4" => "\xE8\x9C\x91",		"\xE3\xF5" => "\xE8\xA3\xB7",		"\xE3\xF6" => "\xE8\xA3\xA7",		"\xE3\xF7" => "\xE8\xA3\xB1",		"\xE3\xF8" => "\xE8\xA3\xB2",		"\xE3\xF9" => "\xE8\xA3\xBA",		"\xE3\xFA" => "\xE8\xA3\xBE",		"\xE3\xFB" => "\xE8\xA3\xAE",		"\xE3\xFC" => "\xE8\xA3\xBC",		"\xE3\xFD" => "\xE8\xA3\xB6",		"\xE3\xFE" => "\xE8\xA3\xBB",		"\xE4\x40" => "\xE8\xA3\xB0",		"\xE4\x41" => "\xE8\xA3\xAC",		"\xE4\x42" => "\xE8\xA3\xAB",		"\xE4\x43" => "\xE8\xA6\x9D",		"\xE4\x44" => "\xE8\xA6\xA1",		"\xE4\x45" => "\xE8\xA6\x9F",		"\xE4\x46" => "\xE8\xA6\x9E",		"\xE4\x47" => "\xE8\xA7\xA9",		"\xE4\x48" => "\xE8\xA7\xAB",		"\xE4\x49" => "\xE8\xA7\xA8",		"\xE4\x4A" => "\xE8\xAA\xAB",		"\xE4\x4B" => "\xE8\xAA\x99",		"\xE4\x4C" => "\xE8\xAA\x8B",		"\xE4\x4D" => "\xE8\xAA\x92",		"\xE4\x4E" => "\xE8\xAA\x8F",		"\xE4\x4F" => "\xE8\xAA\x96",		"\xE4\x50" => "\xE8\xB0\xBD",		"\xE4\x51" => "\xE8\xB1\xA8",		"\xE4\x52" => "\xE8\xB1\xA9",		"\xE4\x53" => "\xE8\xB3\x95",		"\xE4\x54" => "\xE8\xB3\x8F",		"\xE4\x55" => "\xE8\xB3\x97",		"\xE4\x56" => "\xE8\xB6\x96",		"\xE4\x57" => "\xE8\xB8\x89",		"\xE4\x58" => "\xE8\xB8\x82",		"\xE4\x59" => "\xE8\xB7\xBF",		"\xE4\x5A" => "\xE8\xB8\x8D",		"\xE4\x5B" => "\xE8\xB7\xBD",		"\xE4\x5C" => "\xE8\xB8\x8A",		"\xE4\x5D" => "\xE8\xB8\x83",		"\xE4\x5E" => "\xE8\xB8\x87",		"\xE4\x5F" => "\xE8\xB8\x86",		"\xE4\x60" => "\xE8\xB8\x85",		"\xE4\x61" => "\xE8\xB7\xBE",		"\xE4\x62" => "\xE8\xB8\x80",		"\xE4\x63" => "\xE8\xB8\x84",		"\xE4\x64" => "\xE8\xBC\x90",		"\xE4\x65" => "\xE8\xBC\x91",		"\xE4\x66" => "\xE8\xBC\x8E",		"\xE4\x67" => "\xE8\xBC\x8D",		"\xE4\x68" => "\xE9\x84\xA3",		"\xE4\x69" => "\xE9\x84\x9C",		"\xE4\x6A" => "\xE9\x84\xA0",		"\xE4\x6B" => "\xE9\x84\xA2",		"\xE4\x6C" => "\xE9\x84\x9F",		"\xE4\x6D" => "\xE9\x84\x9D",		"\xE4\x6E" => "\xE9\x84\x9A",		"\xE4\x6F" => "\xE9\x84\xA4",		"\xE4\x70" => "\xE9\x84\xA1",		"\xE4\x71" => "\xE9\x84\x9B",		"\xE4\x72" => "\xE9\x85\xBA",		"\xE4\x73" => "\xE9\x85\xB2",		"\xE4\x74" => "\xE9\x85\xB9",		"\xE4\x75" => "\xE9\x85\xB3",		"\xE4\x76" => "\xE9\x8A\xA5",		"\xE4\x77" => "\xE9\x8A\xA4",		"\xE4\x78" => "\xE9\x89\xB6",		"\xE4\x79" => "\xE9\x8A\x9B",		"\xE4\x7A" => "\xE9\x89\xBA",		"\xE4\x7B" => "\xE9\x8A\xA0",		"\xE4\x7C" => "\xE9\x8A\x94",		"\xE4\x7D" => "\xE9\x8A\xAA",		"\xE4\x7E" => "\xE9\x8A\x8D",		"\xE4\xA1" => "\xE9\x8A\xA6",		"\xE4\xA2" => "\xE9\x8A\x9A",		"\xE4\xA3" => "\xE9\x8A\xAB",		"\xE4\xA4" => "\xE9\x89\xB9",		"\xE4\xA5" => "\xE9\x8A\x97",		"\xE4\xA6" => "\xE9\x89\xBF",		"\xE4\xA7" => "\xE9\x8A\xA3",		"\xE4\xA8" => "\xE9\x8B\xAE",		"\xE4\xA9" => "\xE9\x8A\x8E",		"\xE4\xAA" => "\xE9\x8A\x82",		"\xE4\xAB" => "\xE9\x8A\x95",		"\xE4\xAC" => "\xE9\x8A\xA2",		"\xE4\xAD" => "\xE9\x89\xBD",		"\xE4\xAE" => "\xE9\x8A\x88",		"\xE4\xAF" => "\xE9\x8A\xA1",		"\xE4\xB0" => "\xE9\x8A\x8A",		"\xE4\xB1" => "\xE9\x8A\x86",		"\xE4\xB2" => "\xE9\x8A\x8C",		"\xE4\xB3" => "\xE9\x8A\x99",		"\xE4\xB4" => "\xE9\x8A\xA7",		"\xE4\xB5" => "\xE9\x89\xBE",		"\xE4\xB6" => "\xE9\x8A\x87",		"\xE4\xB7" => "\xE9\x8A\xA9",		"\xE4\xB8" => "\xE9\x8A\x9D",		"\xE4\xB9" => "\xE9\x8A\x8B",		"\xE4\xBA" => "\xE9\x88\xAD",		"\xE4\xBB" => "\xE9\x9A\x9E",		"\xE4\xBC" => "\xE9\x9A\xA1",		"\xE4\xBD" => "\xE9\x9B\xBF",		"\xE4\xBE" => "\xE9\x9D\x98",		"\xE4\xBF" => "\xE9\x9D\xBD",		"\xE4\xC0" => "\xE9\x9D\xBA",		"\xE4\xC1" => "\xE9\x9D\xBE",		"\xE4\xC2" => "\xE9\x9E\x83",		"\xE4\xC3" => "\xE9\x9E\x80",		"\xE4\xC4" => "\xE9\x9E\x82",		"\xE4\xC5" => "\xE9\x9D\xBB",		"\xE4\xC6" => "\xE9\x9E\x84",		"\xE4\xC7" => "\xE9\x9E\x81",		"\xE4\xC8" => "\xE9\x9D\xBF",		"\xE4\xC9" => "\xE9\x9F\x8E",		"\xE4\xCA" => "\xE9\x9F\x8D",		"\xE4\xCB" => "\xE9\xA0\x96",		"\xE4\xCC" => "\xE9\xA2\xAD",		"\xE4\xCD" => "\xE9\xA2\xAE",		"\xE4\xCE" => "\xE9\xA4\x82",		"\xE4\xCF" => "\xE9\xA4\x80",		"\xE4\xD0" => "\xE9\xA4\x87",		"\xE4\xD1" => "\xE9\xA6\x9D",		"\xE4\xD2" => "\xE9\xA6\x9C",		"\xE4\xD3" => "\xE9\xA7\x83",		"\xE4\xD4" => "\xE9\xA6\xB9",		"\xE4\xD5" => "\xE9\xA6\xBB",		"\xE4\xD6" => "\xE9\xA6\xBA",		"\xE4\xD7" => "\xE9\xA7\x82",		"\xE4\xD8" => "\xE9\xA6\xBD",		"\xE4\xD9" => "\xE9\xA7\x87",		"\xE4\xDA" => "\xE9\xAA\xB1",		"\xE4\xDB" => "\xE9\xAB\xA3",		"\xE4\xDC" => "\xE9\xAB\xA7",		"\xE4\xDD" => "\xE9\xAC\xBE",		"\xE4\xDE" => "\xE9\xAC\xBF",		"\xE4\xDF" => "\xE9\xAD\xA0",		"\xE4\xE0" => "\xE9\xAD\xA1",		"\xE4\xE1" => "\xE9\xAD\x9F",		"\xE4\xE2" => "\xE9\xB3\xB1",		"\xE4\xE3" => "\xE9\xB3\xB2",		"\xE4\xE4" => "\xE9\xB3\xB5",		"\xE4\xE5" => "\xE9\xBA\xA7",		"\xE4\xE6" => "\xE5\x83\xBF",		"\xE4\xE7" => "\xE5\x84\x83",		"\xE4\xE8" => "\xE5\x84\xB0",		"\xE4\xE9" => "\xE5\x83\xB8",		"\xE4\xEA" => "\xE5\x84\x86",		"\xE4\xEB" => "\xE5\x84\x87",		"\xE4\xEC" => "\xE5\x83\xB6",		"\xE4\xED" => "\xE5\x83\xBE",		"\xE4\xEE" => "\xE5\x84\x8B",		"\xE4\xEF" => "\xE5\x84\x8C",		"\xE4\xF0" => "\xE5\x83\xBD",		"\xE4\xF1" => "\xE5\x84\x8A",		"\xE4\xF2" => "\xE5\x8A\x8B",		"\xE4\xF3" => "\xE5\x8A\x8C",		"\xE4\xF4" => "\xE5\x8B\xB1",		"\xE4\xF5" => "\xE5\x8B\xAF",		"\xE4\xF6" => "\xE5\x99\x88",		"\xE4\xF7" => "\xE5\x99\x82",		"\xE4\xF8" => "\xE5\x99\x8C",		"\xE4\xF9" => "\xE5\x98\xB5",		"\xE4\xFA" => "\xE5\x99\x81",		"\xE4\xFB" => "\xE5\x99\x8A",		"\xE4\xFC" => "\xE5\x99\x89",		"\xE4\xFD" => "\xE5\x99\x86",		"\xE4\xFE" => "\xE5\x99\x98",		"\xE5\x40" => "\xE5\x99\x9A",		"\xE5\x41" => "\xE5\x99\x80",		"\xE5\x42" => "\xE5\x98\xB3",		"\xE5\x43" => "\xE5\x98\xBD",		"\xE5\x44" => "\xE5\x98\xAC",		"\xE5\x45" => "\xE5\x98\xBE",		"\xE5\x46" => "\xE5\x98\xB8",		"\xE5\x47" => "\xE5\x98\xAA",		"\xE5\x48" => "\xE5\x98\xBA",		"\xE5\x49" => "\xE5\x9C\x9A",		"\xE5\x4A" => "\xE5\xA2\xAB",		"\xE5\x4B" => "\xE5\xA2\x9D",		"\xE5\x4C" => "\xE5\xA2\xB1",		"\xE5\x4D" => "\xE5\xA2\xA0",		"\xE5\x4E" => "\xE5\xA2\xA3",		"\xE5\x4F" => "\xE5\xA2\xAF",		"\xE5\x50" => "\xE5\xA2\xAC",		"\xE5\x51" => "\xE5\xA2\xA5",		"\xE5\x52" => "\xE5\xA2\xA1",		"\xE5\x53" => "\xE5\xA3\xBF",		"\xE5\x54" => "\xE5\xAB\xBF",		"\xE5\x55" => "\xE5\xAB\xB4",		"\xE5\x56" => "\xE5\xAB\xBD",		"\xE5\x57" => "\xE5\xAB\xB7",		"\xE5\x58" => "\xE5\xAB\xB6",		"\xE5\x59" => "\xE5\xAC\x83",		"\xE5\x5A" => "\xE5\xAB\xB8",		"\xE5\x5B" => "\xE5\xAC\x82",		"\xE5\x5C" => "\xE5\xAB\xB9",		"\xE5\x5D" => "\xE5\xAC\x81",		"\xE5\x5E" => "\xE5\xAC\x87",		"\xE5\x5F" => "\xE5\xAC\x85",		"\xE5\x60" => "\xE5\xAC\x8F",		"\xE5\x61" => "\xE5\xB1\xA7",		"\xE5\x62" => "\xE5\xB6\x99",		"\xE5\x63" => "\xE5\xB6\x97",		"\xE5\x64" => "\xE5\xB6\x9F",		"\xE5\x65" => "\xE5\xB6\x92",		"\xE5\x66" => "\xE5\xB6\xA2",		"\xE5\x67" => "\xE5\xB6\x93",		"\xE5\x68" => "\xE5\xB6\x95",		"\xE5\x69" => "\xE5\xB6\xA0",		"\xE5\x6A" => "\xE5\xB6\x9C",		"\xE5\x6B" => "\xE5\xB6\xA1",		"\xE5\x6C" => "\xE5\xB6\x9A",		"\xE5\x6D" => "\xE5\xB6\x9E",		"\xE5\x6E" => "\xE5\xB9\xA9",		"\xE5\x6F" => "\xE5\xB9\x9D",		"\xE5\x70" => "\xE5\xB9\xA0",		"\xE5\x71" => "\xE5\xB9\x9C",		"\xE5\x72" => "\xE7\xB7\xB3",		"\xE5\x73" => "\xE5\xBB\x9B",		"\xE5\x74" => "\xE5\xBB\x9E",		"\xE5\x75" => "\xE5\xBB\xA1",		"\xE5\x76" => "\xE5\xBD\x89",		"\xE5\x77" => "\xE5\xBE\xB2",		"\xE5\x78" => "\xE6\x86\x8B",		"\xE5\x79" => "\xE6\x86\x83",		"\xE5\x7A" => "\xE6\x85\xB9",		"\xE5\x7B" => "\xE6\x86\xB1",		"\xE5\x7C" => "\xE6\x86\xB0",		"\xE5\x7D" => "\xE6\x86\xA2",		"\xE5\x7E" => "\xE6\x86\x89",		"\xE5\xA1" => "\xE6\x86\x9B",		"\xE5\xA2" => "\xE6\x86\x93",		"\xE5\xA3" => "\xE6\x86\xAF",		"\xE5\xA4" => "\xE6\x86\xAD",		"\xE5\xA5" => "\xE6\x86\x9F",		"\xE5\xA6" => "\xE6\x86\x92",		"\xE5\xA7" => "\xE6\x86\xAA",		"\xE5\xA8" => "\xE6\x86\xA1",		"\xE5\xA9" => "\xE6\x86\x8D",		"\xE5\xAA" => "\xE6\x85\xA6",		"\xE5\xAB" => "\xE6\x86\xB3",		"\xE5\xAC" => "\xE6\x88\xAD",		"\xE5\xAD" => "\xE6\x91\xAE",		"\xE5\xAE" => "\xE6\x91\xB0",		"\xE5\xAF" => "\xE6\x92\x96",		"\xE5\xB0" => "\xE6\x92\xA0",		"\xE5\xB1" => "\xE6\x92\x85",		"\xE5\xB2" => "\xE6\x92\x97",		"\xE5\xB3" => "\xE6\x92\x9C",		"\xE5\xB4" => "\xE6\x92\x8F",		"\xE5\xB5" => "\xE6\x92\x8B",		"\xE5\xB6" => "\xE6\x92\x8A",		"\xE5\xB7" => "\xE6\x92\x8C",		"\xE5\xB8" => "\xE6\x92\xA3",		"\xE5\xB9" => "\xE6\x92\x9F",		"\xE5\xBA" => "\xE6\x91\xA8",		"\xE5\xBB" => "\xE6\x92\xB1",		"\xE5\xBC" => "\xE6\x92\x98",		"\xE5\xBD" => "\xE6\x95\xB6",		"\xE5\xBE" => "\xE6\x95\xBA",		"\xE5\xBF" => "\xE6\x95\xB9",		"\xE5\xC0" => "\xE6\x95\xBB",		"\xE5\xC1" => "\xE6\x96\xB2",		"\xE5\xC2" => "\xE6\x96\xB3",		"\xE5\xC3" => "\xE6\x9A\xB5",		"\xE5\xC4" => "\xE6\x9A\xB0",		"\xE5\xC5" => "\xE6\x9A\xA9",		"\xE5\xC6" => "\xE6\x9A\xB2",		"\xE5\xC7" => "\xE6\x9A\xB7",		"\xE5\xC8" => "\xE6\x9A\xAA",		"\xE5\xC9" => "\xE6\x9A\xAF",		"\xE5\xCA" => "\xE6\xA8\x80",		"\xE5\xCB" => "\xE6\xA8\x86",		"\xE5\xCC" => "\xE6\xA8\x97",		"\xE5\xCD" => "\xE6\xA7\xA5",		"\xE5\xCE" => "\xE6\xA7\xB8",		"\xE5\xCF" => "\xE6\xA8\x95",		"\xE5\xD0" => "\xE6\xA7\xB1",		"\xE5\xD1" => "\xE6\xA7\xA4",		"\xE5\xD2" => "\xE6\xA8\xA0",		"\xE5\xD3" => "\xE6\xA7\xBF",		"\xE5\xD4" => "\xE6\xA7\xAC",		"\xE5\xD5" => "\xE6\xA7\xA2",		"\xE5\xD6" => "\xE6\xA8\x9B",		"\xE5\xD7" => "\xE6\xA8\x9D",		"\xE5\xD8" => "\xE6\xA7\xBE",		"\xE5\xD9" => "\xE6\xA8\xA7",		"\xE5\xDA" => "\xE6\xA7\xB2",		"\xE5\xDB" => "\xE6\xA7\xAE",		"\xE5\xDC" => "\xE6\xA8\x94",		"\xE5\xDD" => "\xE6\xA7\xB7",		"\xE5\xDE" => "\xE6\xA7\xA7",		"\xE5\xDF" => "\xE6\xA9\x80",		"\xE5\xE0" => "\xE6\xA8\x88",		"\xE5\xE1" => "\xE6\xA7\xA6",		"\xE5\xE2" => "\xE6\xA7\xBB",		"\xE5\xE3" => "\xE6\xA8\x8D",		"\xE5\xE4" => "\xE6\xA7\xBC",		"\xE5\xE5" => "\xE6\xA7\xAB",		"\xE5\xE6" => "\xE6\xA8\x89",		"\xE5\xE7" => "\xE6\xA8\x84",		"\xE5\xE8" => "\xE6\xA8\x98",		"\xE5\xE9" => "\xE6\xA8\xA5",		"\xE5\xEA" => "\xE6\xA8\x8F",		"\xE5\xEB" => "\xE6\xA7\xB6",		"\xE5\xEC" => "\xE6\xA8\xA6",		"\xE5\xED" => "\xE6\xA8\x87",		"\xE5\xEE" => "\xE6\xA7\xB4",		"\xE5\xEF" => "\xE6\xA8\x96",		"\xE5\xF0" => "\xE6\xAD\x91",		"\xE5\xF1" => "\xE6\xAE\xA5",		"\xE5\xF2" => "\xE6\xAE\xA3",		"\xE5\xF3" => "\xE6\xAE\xA2",		"\xE5\xF4" => "\xE6\xAE\xA6",		"\xE5\xF5" => "\xE6\xB0\x81",		"\xE5\xF6" => "\xE6\xB0\x80",		"\xE5\xF7" => "\xE6\xAF\xBF",		"\xE5\xF8" => "\xE6\xB0\x82",		"\xE5\xF9" => "\xE6\xBD\x81",		"\xE5\xFA" => "\xE6\xBC\xA6",		"\xE5\xFB" => "\xE6\xBD\xBE",		"\xE5\xFC" => "\xE6\xBE\x87",		"\xE5\xFD" => "\xE6\xBF\x86",		"\xE5\xFE" => "\xE6\xBE\x92",		"\xE6\x40" => "\xE6\xBE\x8D",		"\xE6\x41" => "\xE6\xBE\x89",		"\xE6\x42" => "\xE6\xBE\x8C",		"\xE6\x43" => "\xE6\xBD\xA2",		"\xE6\x44" => "\xE6\xBD\x8F",		"\xE6\x45" => "\xE6\xBE\x85",		"\xE6\x46" => "\xE6\xBD\x9A",		"\xE6\x47" => "\xE6\xBE\x96",		"\xE6\x48" => "\xE6\xBD\xB6",		"\xE6\x49" => "\xE6\xBD\xAC",		"\xE6\x4A" => "\xE6\xBE\x82",		"\xE6\x4B" => "\xE6\xBD\x95",		"\xE6\x4C" => "\xE6\xBD\xB2",		"\xE6\x4D" => "\xE6\xBD\x92",		"\xE6\x4E" => "\xE6\xBD\x90",		"\xE6\x4F" => "\xE6\xBD\x97",		"\xE6\x50" => "\xE6\xBE\x94",		"\xE6\x51" => "\xE6\xBE\x93",		"\xE6\x52" => "\xE6\xBD\x9D",		"\xE6\x53" => "\xE6\xBC\x80",		"\xE6\x54" => "\xE6\xBD\xA1",		"\xE6\x55" => "\xE6\xBD\xAB",		"\xE6\x56" => "\xE6\xBD\xBD",		"\xE6\x57" => "\xE6\xBD\xA7",		"\xE6\x58" => "\xE6\xBE\x90",		"\xE6\x59" => "\xE6\xBD\x93",		"\xE6\x5A" => "\xE6\xBE\x8B",		"\xE6\x5B" => "\xE6\xBD\xA9",		"\xE6\x5C" => "\xE6\xBD\xBF",		"\xE6\x5D" => "\xE6\xBE\x95",		"\xE6\x5E" => "\xE6\xBD\xA3",		"\xE6\x5F" => "\xE6\xBD\xB7",		"\xE6\x60" => "\xE6\xBD\xAA",		"\xE6\x61" => "\xE6\xBD\xBB",		"\xE6\x62" => "\xE7\x86\xB2",		"\xE6\x63" => "\xE7\x86\xAF",		"\xE6\x64" => "\xE7\x86\x9B",		"\xE6\x65" => "\xE7\x86\xB0",		"\xE6\x66" => "\xE7\x86\xA0",		"\xE6\x67" => "\xE7\x86\x9A",		"\xE6\x68" => "\xE7\x86\xA9",		"\xE6\x69" => "\xE7\x86\xB5",		"\xE6\x6A" => "\xE7\x86\x9D",		"\xE6\x6B" => "\xE7\x86\xA5",		"\xE6\x6C" => "\xE7\x86\x9E",		"\xE6\x6D" => "\xE7\x86\xA4",		"\xE6\x6E" => "\xE7\x86\xA1",		"\xE6\x6F" => "\xE7\x86\xAA",		"\xE6\x70" => "\xE7\x86\x9C",		"\xE6\x71" => "\xE7\x86\xA7",		"\xE6\x72" => "\xE7\x86\xB3",		"\xE6\x73" => "\xE7\x8A\x98",		"\xE6\x74" => "\xE7\x8A\x9A",		"\xE6\x75" => "\xE7\x8D\x98",		"\xE6\x76" => "\xE7\x8D\x92",		"\xE6\x77" => "\xE7\x8D\x9E",		"\xE6\x78" => "\xE7\x8D\x9F",		"\xE6\x79" => "\xE7\x8D\xA0",		"\xE6\x7A" => "\xE7\x8D\x9D",		"\xE6\x7B" => "\xE7\x8D\x9B",		"\xE6\x7C" => "\xE7\x8D\xA1",		"\xE6\x7D" => "\xE7\x8D\x9A",		"\xE6\x7E" => "\xE7\x8D\x99",		"\xE6\xA1" => "\xE7\x8D\xA2",		"\xE6\xA2" => "\xE7\x92\x87",		"\xE6\xA3" => "\xE7\x92\x89",		"\xE6\xA4" => "\xE7\x92\x8A",		"\xE6\xA5" => "\xE7\x92\x86",		"\xE6\xA6" => "\xE7\x92\x81",		"\xE6\xA7" => "\xE7\x91\xBD",		"\xE6\xA8" => "\xE7\x92\x85",		"\xE6\xA9" => "\xE7\x92\x88",		"\xE6\xAA" => "\xE7\x91\xBC",		"\xE6\xAB" => "\xE7\x91\xB9",		"\xE6\xAC" => "\xE7\x94\x88",		"\xE6\xAD" => "\xE7\x94\x87",		"\xE6\xAE" => "\xE7\x95\xBE",		"\xE6\xAF" => "\xE7\x98\xA5",		"\xE6\xB0" => "\xE7\x98\x9E",		"\xE6\xB1" => "\xE7\x98\x99",		"\xE6\xB2" => "\xE7\x98\x9D",		"\xE6\xB3" => "\xE7\x98\x9C",		"\xE6\xB4" => "\xE7\x98\xA3",		"\xE6\xB5" => "\xE7\x98\x9A",		"\xE6\xB6" => "\xE7\x98\xA8",		"\xE6\xB7" => "\xE7\x98\x9B",		"\xE6\xB8" => "\xE7\x9A\x9C",		"\xE6\xB9" => "\xE7\x9A\x9D",		"\xE6\xBA" => "\xE7\x9A\x9E",		"\xE6\xBB" => "\xE7\x9A\x9B",		"\xE6\xBC" => "\xE7\x9E\x8D",		"\xE6\xBD" => "\xE7\x9E\x8F",		"\xE6\xBE" => "\xE7\x9E\x89",		"\xE6\xBF" => "\xE7\x9E\x88",		"\xE6\xC0" => "\xE7\xA3\x8D",		"\xE6\xC1" => "\xE7\xA2\xBB",		"\xE6\xC2" => "\xE7\xA3\x8F",		"\xE6\xC3" => "\xE7\xA3\x8C",		"\xE6\xC4" => "\xE7\xA3\x91",		"\xE6\xC5" => "\xE7\xA3\x8E",		"\xE6\xC6" => "\xE7\xA3\x94",		"\xE6\xC7" => "\xE7\xA3\x88",		"\xE6\xC8" => "\xE7\xA3\x83",		"\xE6\xC9" => "\xE7\xA3\x84",		"\xE6\xCA" => "\xE7\xA3\x89",		"\xE6\xCB" => "\xE7\xA6\x9A",		"\xE6\xCC" => "\xE7\xA6\xA1",		"\xE6\xCD" => "\xE7\xA6\xA0",		"\xE6\xCE" => "\xE7\xA6\x9C",		"\xE6\xCF" => "\xE7\xA6\xA2",		"\xE6\xD0" => "\xE7\xA6\x9B",		"\xE6\xD1" => "\xE6\xAD\xB6",		"\xE6\xD2" => "\xE7\xA8\xB9",		"\xE6\xD3" => "\xE7\xAA\xB2",		"\xE6\xD4" => "\xE7\xAA\xB4",		"\xE6\xD5" => "\xE7\xAA\xB3",		"\xE6\xD6" => "\xE7\xAE\xB7",		"\xE6\xD7" => "\xE7\xAF\x8B",		"\xE6\xD8" => "\xE7\xAE\xBE",		"\xE6\xD9" => "\xE7\xAE\xAC",		"\xE6\xDA" => "\xE7\xAF\x8E",		"\xE6\xDB" => "\xE7\xAE\xAF",		"\xE6\xDC" => "\xE7\xAE\xB9",		"\xE6\xDD" => "\xE7\xAF\x8A",		"\xE6\xDE" => "\xE7\xAE\xB5",		"\xE6\xDF" => "\xE7\xB3\x85",		"\xE6\xE0" => "\xE7\xB3\x88",		"\xE6\xE1" => "\xE7\xB3\x8C",		"\xE6\xE2" => "\xE7\xB3\x8B",		"\xE6\xE3" => "\xE7\xB7\xB7",		"\xE6\xE4" => "\xE7\xB7\x9B",		"\xE6\xE5" => "\xE7\xB7\xAA",		"\xE6\xE6" => "\xE7\xB7\xA7",		"\xE6\xE7" => "\xE7\xB7\x97",		"\xE6\xE8" => "\xE7\xB7\xA1",		"\xE6\xE9" => "\xE7\xB8\x83",		"\xE6\xEA" => "\xE7\xB7\xBA",		"\xE6\xEB" => "\xE7\xB7\xA6",		"\xE6\xEC" => "\xE7\xB7\xB6",		"\xE6\xED" => "\xE7\xB7\xB1",		"\xE6\xEE" => "\xE7\xB7\xB0",		"\xE6\xEF" => "\xE7\xB7\xAE",		"\xE6\xF0" => "\xE7\xB7\x9F",		"\xE6\xF1" => "\xE7\xBD\xB6",		"\xE6\xF2" => "\xE7\xBE\xAC",		"\xE6\xF3" => "\xE7\xBE\xB0",		"\xE6\xF4" => "\xE7\xBE\xAD",		"\xE6\xF5" => "\xE7\xBF\xAD",		"\xE6\xF6" => "\xE7\xBF\xAB",		"\xE6\xF7" => "\xE7\xBF\xAA",		"\xE6\xF8" => "\xE7\xBF\xAC",		"\xE6\xF9" => "\xE7\xBF\xA6",		"\xE6\xFA" => "\xE7\xBF\xA8",		"\xE6\xFB" => "\xE8\x81\xA4",		"\xE6\xFC" => "\xE8\x81\xA7",		"\xE6\xFD" => "\xE8\x86\xA3",		"\xE6\xFE" => "\xE8\x86\x9F",		"\xE7\x40" => "\xE8\x86\x9E",		"\xE7\x41" => "\xE8\x86\x95",		"\xE7\x42" => "\xE8\x86\xA2",		"\xE7\x43" => "\xE8\x86\x99",		"\xE7\x44" => "\xE8\x86\x97",		"\xE7\x45" => "\xE8\x88\x96",		"\xE7\x46" => "\xE8\x89\x8F",		"\xE7\x47" => "\xE8\x89\x93",		"\xE7\x48" => "\xE8\x89\x92",		"\xE7\x49" => "\xE8\x89\x90",		"\xE7\x4A" => "\xE8\x89\x8E",		"\xE7\x4B" => "\xE8\x89\x91",		"\xE7\x4C" => "\xE8\x94\xA4",		"\xE7\x4D" => "\xE8\x94\xBB",		"\xE7\x4E" => "\xE8\x94\x8F",		"\xE7\x4F" => "\xE8\x94\x80",		"\xE7\x50" => "\xE8\x94\xA9",		"\xE7\x51" => "\xE8\x94\x8E",		"\xE7\x52" => "\xE8\x94\x89",		"\xE7\x53" => "\xE8\x94\x8D",		"\xE7\x54" => "\xE8\x94\x9F",		"\xE7\x55" => "\xE8\x94\x8A",		"\xE7\x56" => "\xE8\x94\xA7",		"\xE7\x57" => "\xE8\x94\x9C",		"\xE7\x58" => "\xE8\x93\xBB",		"\xE7\x59" => "\xE8\x94\xAB",		"\xE7\x5A" => "\xE8\x93\xBA",		"\xE7\x5B" => "\xE8\x94\x88",		"\xE7\x5C" => "\xE8\x94\x8C",		"\xE7\x5D" => "\xE8\x93\xB4",		"\xE7\x5E" => "\xE8\x94\xAA",		"\xE7\x5F" => "\xE8\x93\xB2",		"\xE7\x60" => "\xE8\x94\x95",		"\xE7\x61" => "\xE8\x93\xB7",		"\xE7\x62" => "\xE8\x93\xAB",		"\xE7\x63" => "\xE8\x93\xB3",		"\xE7\x64" => "\xE8\x93\xBC",		"\xE7\x65" => "\xE8\x94\x92",		"\xE7\x66" => "\xE8\x93\xAA",		"\xE7\x67" => "\xE8\x93\xA9",		"\xE7\x68" => "\xE8\x94\x96",		"\xE7\x69" => "\xE8\x93\xBE",		"\xE7\x6A" => "\xE8\x94\xA8",		"\xE7\x6B" => "\xE8\x94\x9D",		"\xE7\x6C" => "\xE8\x94\xAE",		"\xE7\x6D" => "\xE8\x94\x82",		"\xE7\x6E" => "\xE8\x93\xBD",		"\xE7\x6F" => "\xE8\x94\x9E",		"\xE7\x70" => "\xE8\x93\xB6",		"\xE7\x71" => "\xE8\x94\xB1",		"\xE7\x72" => "\xE8\x94\xA6",		"\xE7\x73" => "\xE8\x93\xA7",		"\xE7\x74" => "\xE8\x93\xA8",		"\xE7\x75" => "\xE8\x93\xB0",		"\xE7\x76" => "\xE8\x93\xAF",		"\xE7\x77" => "\xE8\x93\xB9",		"\xE7\x78" => "\xE8\x94\x98",		"\xE7\x79" => "\xE8\x94\xA0",		"\xE7\x7A" => "\xE8\x94\xB0",		"\xE7\x7B" => "\xE8\x94\x8B",		"\xE7\x7C" => "\xE8\x94\x99",		"\xE7\x7D" => "\xE8\x94\xAF",		"\xE7\x7E" => "\xE8\x99\xA2",		"\xE7\xA1" => "\xE8\x9D\x96",		"\xE7\xA2" => "\xE8\x9D\xA3",		"\xE7\xA3" => "\xE8\x9D\xA4",		"\xE7\xA4" => "\xE8\x9D\xB7",		"\xE7\xA5" => "\xE8\x9F\xA1",		"\xE7\xA6" => "\xE8\x9D\xB3",		"\xE7\xA7" => "\xE8\x9D\x98",		"\xE7\xA8" => "\xE8\x9D\x94",		"\xE7\xA9" => "\xE8\x9D\x9B",		"\xE7\xAA" => "\xE8\x9D\x92",		"\xE7\xAB" => "\xE8\x9D\xA1",		"\xE7\xAC" => "\xE8\x9D\x9A",		"\xE7\xAD" => "\xE8\x9D\x91",		"\xE7\xAE" => "\xE8\x9D\x9E",		"\xE7\xAF" => "\xE8\x9D\xAD",		"\xE7\xB0" => "\xE8\x9D\xAA",		"\xE7\xB1" => "\xE8\x9D\x90",		"\xE7\xB2" => "\xE8\x9D\x8E",		"\xE7\xB3" => "\xE8\x9D\x9F",		"\xE7\xB4" => "\xE8\x9D\x9D",		"\xE7\xB5" => "\xE8\x9D\xAF",		"\xE7\xB6" => "\xE8\x9D\xAC",		"\xE7\xB7" => "\xE8\x9D\xBA",		"\xE7\xB8" => "\xE8\x9D\xAE",		"\xE7\xB9" => "\xE8\x9D\x9C",		"\xE7\xBA" => "\xE8\x9D\xA5",		"\xE7\xBB" => "\xE8\x9D\x8F",		"\xE7\xBC" => "\xE8\x9D\xBB",		"\xE7\xBD" => "\xE8\x9D\xB5",		"\xE7\xBE" => "\xE8\x9D\xA2",		"\xE7\xBF" => "\xE8\x9D\xA7",		"\xE7\xC0" => "\xE8\x9D\xA9",		"\xE7\xC1" => "\xE8\xA1\x9A",		"\xE7\xC2" => "\xE8\xA4\x85",		"\xE7\xC3" => "\xE8\xA4\x8C",		"\xE7\xC4" => "\xE8\xA4\x94",		"\xE7\xC5" => "\xE8\xA4\x8B",		"\xE7\xC6" => "\xE8\xA4\x97",		"\xE7\xC7" => "\xE8\xA4\x98",		"\xE7\xC8" => "\xE8\xA4\x99",		"\xE7\xC9" => "\xE8\xA4\x86",		"\xE7\xCA" => "\xE8\xA4\x96",		"\xE7\xCB" => "\xE8\xA4\x91",		"\xE7\xCC" => "\xE8\xA4\x8E",		"\xE7\xCD" => "\xE8\xA4\x89",		"\xE7\xCE" => "\xE8\xA6\xA2",		"\xE7\xCF" => "\xE8\xA6\xA4",		"\xE7\xD0" => "\xE8\xA6\xA3",		"\xE7\xD1" => "\xE8\xA7\xAD",		"\xE7\xD2" => "\xE8\xA7\xB0",		"\xE7\xD3" => "\xE8\xA7\xAC",		"\xE7\xD4" => "\xE8\xAB\x8F",		"\xE7\xD5" => "\xE8\xAB\x86",		"\xE7\xD6" => "\xE8\xAA\xB8",		"\xE7\xD7" => "\xE8\xAB\x93",		"\xE7\xD8" => "\xE8\xAB\x91",		"\xE7\xD9" => "\xE8\xAB\x94",		"\xE7\xDA" => "\xE8\xAB\x95",		"\xE7\xDB" => "\xE8\xAA\xBB",		"\xE7\xDC" => "\xE8\xAB\x97",		"\xE7\xDD" => "\xE8\xAA\xBE",		"\xE7\xDE" => "\xE8\xAB\x80",		"\xE7\xDF" => "\xE8\xAB\x85",		"\xE7\xE0" => "\xE8\xAB\x98",		"\xE7\xE1" => "\xE8\xAB\x83",		"\xE7\xE2" => "\xE8\xAA\xBA",		"\xE7\xE3" => "\xE8\xAA\xBD",		"\xE7\xE4" => "\xE8\xAB\x99",		"\xE7\xE5" => "\xE8\xB0\xBE",		"\xE7\xE6" => "\xE8\xB1\x8D",		"\xE7\xE7" => "\xE8\xB2\x8F",		"\xE7\xE8" => "\xE8\xB3\xA5",		"\xE7\xE9" => "\xE8\xB3\x9F",		"\xE7\xEA" => "\xE8\xB3\x99",		"\xE7\xEB" => "\xE8\xB3\xA8",		"\xE7\xEC" => "\xE8\xB3\x9A",		"\xE7\xED" => "\xE8\xB3\x9D",		"\xE7\xEE" => "\xE8\xB3\xA7",		"\xE7\xEF" => "\xE8\xB6\xA0",		"\xE7\xF0" => "\xE8\xB6\x9C",		"\xE7\xF1" => "\xE8\xB6\xA1",		"\xE7\xF2" => "\xE8\xB6\x9B",		"\xE7\xF3" => "\xE8\xB8\xA0",		"\xE7\xF4" => "\xE8\xB8\xA3",		"\xE7\xF5" => "\xE8\xB8\xA5",		"\xE7\xF6" => "\xE8\xB8\xA4",		"\xE7\xF7" => "\xE8\xB8\xAE",		"\xE7\xF8" => "\xE8\xB8\x95",		"\xE7\xF9" => "\xE8\xB8\x9B",		"\xE7\xFA" => "\xE8\xB8\x96",		"\xE7\xFB" => "\xE8\xB8\x91",		"\xE7\xFC" => "\xE8\xB8\x99",		"\xE7\xFD" => "\xE8\xB8\xA6",		"\xE7\xFE" => "\xE8\xB8\xA7",		"\xE8\x40" => "\xE8\xB8\x94",		"\xE8\x41" => "\xE8\xB8\x92",		"\xE8\x42" => "\xE8\xB8\x98",		"\xE8\x43" => "\xE8\xB8\x93",		"\xE8\x44" => "\xE8\xB8\x9C",		"\xE8\x45" => "\xE8\xB8\x97",		"\xE8\x46" => "\xE8\xB8\x9A",		"\xE8\x47" => "\xE8\xBC\xAC",		"\xE8\x48" => "\xE8\xBC\xA4",		"\xE8\x49" => "\xE8\xBC\x98",		"\xE8\x4A" => "\xE8\xBC\x9A",		"\xE8\x4B" => "\xE8\xBC\xA0",		"\xE8\x4C" => "\xE8\xBC\xA3",		"\xE8\x4D" => "\xE8\xBC\x96",		"\xE8\x4E" => "\xE8\xBC\x97",		"\xE8\x4F" => "\xE9\x81\xB3",		"\xE8\x50" => "\xE9\x81\xB0",		"\xE8\x51" => "\xE9\x81\xAF",		"\xE8\x52" => "\xE9\x81\xA7",		"\xE8\x53" => "\xE9\x81\xAB",		"\xE8\x54" => "\xE9\x84\xAF",		"\xE8\x55" => "\xE9\x84\xAB",		"\xE8\x56" => "\xE9\x84\xA9",		"\xE8\x57" => "\xE9\x84\xAA",		"\xE8\x58" => "\xE9\x84\xB2",		"\xE8\x59" => "\xE9\x84\xA6",		"\xE8\x5A" => "\xE9\x84\xAE",		"\xE8\x5B" => "\xE9\x86\x85",		"\xE8\x5C" => "\xE9\x86\x86",		"\xE8\x5D" => "\xE9\x86\x8A",		"\xE8\x5E" => "\xE9\x86\x81",		"\xE8\x5F" => "\xE9\x86\x82",		"\xE8\x60" => "\xE9\x86\x84",		"\xE8\x61" => "\xE9\x86\x80",		"\xE8\x62" => "\xE9\x8B\x90",		"\xE8\x63" => "\xE9\x8B\x83",		"\xE8\x64" => "\xE9\x8B\x84",		"\xE8\x65" => "\xE9\x8B\x80",		"\xE8\x66" => "\xE9\x8B\x99",		"\xE8\x67" => "\xE9\x8A\xB6",		"\xE8\x68" => "\xE9\x8B\x8F",		"\xE8\x69" => "\xE9\x8B\xB1",		"\xE8\x6A" => "\xE9\x8B\x9F",		"\xE8\x6B" => "\xE9\x8B\x98",		"\xE8\x6C" => "\xE9\x8B\xA9",		"\xE8\x6D" => "\xE9\x8B\x97",		"\xE8\x6E" => "\xE9\x8B\x9D",		"\xE8\x6F" => "\xE9\x8B\x8C",		"\xE8\x70" => "\xE9\x8B\xAF",		"\xE8\x71" => "\xE9\x8B\x82",		"\xE8\x72" => "\xE9\x8B\xA8",		"\xE8\x73" => "\xE9\x8B\x8A",		"\xE8\x74" => "\xE9\x8B\x88",		"\xE8\x75" => "\xE9\x8B\x8E",		"\xE8\x76" => "\xE9\x8B\xA6",		"\xE8\x77" => "\xE9\x8B\x8D",		"\xE8\x78" => "\xE9\x8B\x95",		"\xE8\x79" => "\xE9\x8B\x89",		"\xE8\x7A" => "\xE9\x8B\xA0",		"\xE8\x7B" => "\xE9\x8B\x9E",		"\xE8\x7C" => "\xE9\x8B\xA7",		"\xE8\x7D" => "\xE9\x8B\x91",		"\xE8\x7E" => "\xE9\x8B\x93",		"\xE8\xA1" => "\xE9\x8A\xB5",		"\xE8\xA2" => "\xE9\x8B\xA1",		"\xE8\xA3" => "\xE9\x8B\x86",		"\xE8\xA4" => "\xE9\x8A\xB4",		"\xE8\xA5" => "\xE9\x95\xBC",		"\xE8\xA6" => "\xE9\x96\xAC",		"\xE8\xA7" => "\xE9\x96\xAB",		"\xE8\xA8" => "\xE9\x96\xAE",		"\xE8\xA9" => "\xE9\x96\xB0",		"\xE8\xAA" => "\xE9\x9A\xA4",		"\xE8\xAB" => "\xE9\x9A\xA2",		"\xE8\xAC" => "\xE9\x9B\x93",		"\xE8\xAD" => "\xE9\x9C\x85",		"\xE8\xAE" => "\xE9\x9C\x88",		"\xE8\xAF" => "\xE9\x9C\x82",		"\xE8\xB0" => "\xE9\x9D\x9A",		"\xE8\xB1" => "\xE9\x9E\x8A",		"\xE8\xB2" => "\xE9\x9E\x8E",		"\xE8\xB3" => "\xE9\x9E\x88",		"\xE8\xB4" => "\xE9\x9F\x90",		"\xE8\xB5" => "\xE9\x9F\x8F",		"\xE8\xB6" => "\xE9\xA0\x9E",		"\xE8\xB7" => "\xE9\xA0\x9D",		"\xE8\xB8" => "\xE9\xA0\xA6",		"\xE8\xB9" => "\xE9\xA0\xA9",		"\xE8\xBA" => "\xE9\xA0\xA8",		"\xE8\xBB" => "\xE9\xA0\xA0",		"\xE8\xBC" => "\xE9\xA0\x9B",		"\xE8\xBD" => "\xE9\xA0\xA7",		"\xE8\xBE" => "\xE9\xA2\xB2",		"\xE8\xBF" => "\xE9\xA4\x88",		"\xE8\xC0" => "\xE9\xA3\xBA",		"\xE8\xC1" => "\xE9\xA4\x91",		"\xE8\xC2" => "\xE9\xA4\x94",		"\xE8\xC3" => "\xE9\xA4\x96",		"\xE8\xC4" => "\xE9\xA4\x97",		"\xE8\xC5" => "\xE9\xA4\x95",		"\xE8\xC6" => "\xE9\xA7\x9C",		"\xE8\xC7" => "\xE9\xA7\x8D",		"\xE8\xC8" => "\xE9\xA7\x8F",		"\xE8\xC9" => "\xE9\xA7\x93",		"\xE8\xCA" => "\xE9\xA7\x94",		"\xE8\xCB" => "\xE9\xA7\x8E",		"\xE8\xCC" => "\xE9\xA7\x89",		"\xE8\xCD" => "\xE9\xA7\x96",		"\xE8\xCE" => "\xE9\xA7\x98",		"\xE8\xCF" => "\xE9\xA7\x8B",		"\xE8\xD0" => "\xE9\xA7\x97",		"\xE8\xD1" => "\xE9\xA7\x8C",		"\xE8\xD2" => "\xE9\xAA\xB3",		"\xE8\xD3" => "\xE9\xAB\xAC",		"\xE8\xD4" => "\xE9\xAB\xAB",		"\xE8\xD5" => "\xE9\xAB\xB3",		"\xE8\xD6" => "\xE9\xAB\xB2",		"\xE8\xD7" => "\xE9\xAB\xB1",		"\xE8\xD8" => "\xE9\xAD\x86",		"\xE8\xD9" => "\xE9\xAD\x83",		"\xE8\xDA" => "\xE9\xAD\xA7",		"\xE8\xDB" => "\xE9\xAD\xB4",		"\xE8\xDC" => "\xE9\xAD\xB1",		"\xE8\xDD" => "\xE9\xAD\xA6",		"\xE8\xDE" => "\xE9\xAD\xB6",		"\xE8\xDF" => "\xE9\xAD\xB5",		"\xE8\xE0" => "\xE9\xAD\xB0",		"\xE8\xE1" => "\xE9\xAD\xA8",		"\xE8\xE2" => "\xE9\xAD\xA4",		"\xE8\xE3" => "\xE9\xAD\xAC",		"\xE8\xE4" => "\xE9\xB3\xBC",		"\xE8\xE5" => "\xE9\xB3\xBA",		"\xE8\xE6" => "\xE9\xB3\xBD",		"\xE8\xE7" => "\xE9\xB3\xBF",		"\xE8\xE8" => "\xE9\xB3\xB7",		"\xE8\xE9" => "\xE9\xB4\x87",		"\xE8\xEA" => "\xE9\xB4\x80",		"\xE8\xEB" => "\xE9\xB3\xB9",		"\xE8\xEC" => "\xE9\xB3\xBB",		"\xE8\xED" => "\xE9\xB4\x88",		"\xE8\xEE" => "\xE9\xB4\x85",		"\xE8\xEF" => "\xE9\xB4\x84",		"\xE8\xF0" => "\xE9\xBA\x83",		"\xE8\xF1" => "\xE9\xBB\x93",		"\xE8\xF2" => "\xE9\xBC\x8F",		"\xE8\xF3" => "\xE9\xBC\x90",		"\xE8\xF4" => "\xE5\x84\x9C",		"\xE8\xF5" => "\xE5\x84\x93",		"\xE8\xF6" => "\xE5\x84\x97",		"\xE8\xF7" => "\xE5\x84\x9A",		"\xE8\xF8" => "\xE5\x84\x91",		"\xE8\xF9" => "\xE5\x87\x9E",		"\xE8\xFA" => "\xE5\x8C\xB4",		"\xE8\xFB" => "\xE5\x8F\xA1",		"\xE8\xFC" => "\xE5\x99\xB0",		"\xE8\xFD" => "\xE5\x99\xA0",		"\xE8\xFE" => "\xE5\x99\xAE",		"\xE9\x40" => "\xE5\x99\xB3",		"\xE9\x41" => "\xE5\x99\xA6",		"\xE9\x42" => "\xE5\x99\xA3",		"\xE9\x43" => "\xE5\x99\xAD",		"\xE9\x44" => "\xE5\x99\xB2",		"\xE9\x45" => "\xE5\x99\x9E",		"\xE9\x46" => "\xE5\x99\xB7",		"\xE9\x47" => "\xE5\x9C\x9C",		"\xE9\x48" => "\xE5\x9C\x9B",		"\xE9\x49" => "\xE5\xA3\x88",		"\xE9\x4A" => "\xE5\xA2\xBD",		"\xE9\x4B" => "\xE5\xA3\x89",		"\xE9\x4C" => "\xE5\xA2\xBF",		"\xE9\x4D" => "\xE5\xA2\xBA",		"\xE9\x4E" => "\xE5\xA3\x82",		"\xE9\x4F" => "\xE5\xA2\xBC",		"\xE9\x50" => "\xE5\xA3\x86",		"\xE9\x51" => "\xE5\xAC\x97",		"\xE9\x52" => "\xE5\xAC\x99",		"\xE9\x53" => "\xE5\xAC\x9B",		"\xE9\x54" => "\xE5\xAC\xA1",		"\xE9\x55" => "\xE5\xAC\x94",		"\xE9\x56" => "\xE5\xAC\x93",		"\xE9\x57" => "\xE5\xAC\x90",		"\xE9\x58" => "\xE5\xAC\x96",		"\xE9\x59" => "\xE5\xAC\xA8",		"\xE9\x5A" => "\xE5\xAC\x9A",		"\xE9\x5B" => "\xE5\xAC\xA0",		"\xE9\x5C" => "\xE5\xAC\x9E",		"\xE9\x5D" => "\xE5\xAF\xAF",		"\xE9\x5E" => "\xE5\xB6\xAC",		"\xE9\x5F" => "\xE5\xB6\xB1",		"\xE9\x60" => "\xE5\xB6\xA9",		"\xE9\x61" => "\xE5\xB6\xA7",		"\xE9\x62" => "\xE5\xB6\xB5",		"\xE9\x63" => "\xE5\xB6\xB0",		"\xE9\x64" => "\xE5\xB6\xAE",		"\xE9\x65" => "\xE5\xB6\xAA",		"\xE9\x66" => "\xE5\xB6\xA8",		"\xE9\x67" => "\xE5\xB6\xB2",		"\xE9\x68" => "\xE5\xB6\xAD",		"\xE9\x69" => "\xE5\xB6\xAF",		"\xE9\x6A" => "\xE5\xB6\xB4",		"\xE9\x6B" => "\xE5\xB9\xA7",		"\xE9\x6C" => "\xE5\xB9\xA8",		"\xE9\x6D" => "\xE5\xB9\xA6",		"\xE9\x6E" => "\xE5\xB9\xAF",		"\xE9\x6F" => "\xE5\xBB\xA9",		"\xE9\x70" => "\xE5\xBB\xA7",		"\xE9\x71" => "\xE5\xBB\xA6",		"\xE9\x72" => "\xE5\xBB\xA8",		"\xE9\x73" => "\xE5\xBB\xA5",		"\xE9\x74" => "\xE5\xBD\x8B",		"\xE9\x75" => "\xE5\xBE\xBC",		"\xE9\x76" => "\xE6\x86\x9D",		"\xE9\x77" => "\xE6\x86\xA8",		"\xE9\x78" => "\xE6\x86\x96",		"\xE9\x79" => "\xE6\x87\x85",		"\xE9\x7A" => "\xE6\x86\xB4",		"\xE9\x7B" => "\xE6\x87\x86",		"\xE9\x7C" => "\xE6\x87\x81",		"\xE9\x7D" => "\xE6\x87\x8C",		"\xE9\x7E" => "\xE6\x86\xBA",		"\xE9\xA1" => "\xE6\x86\xBF",		"\xE9\xA2" => "\xE6\x86\xB8",		"\xE9\xA3" => "\xE6\x86\x8C",		"\xE9\xA4" => "\xE6\x93\x97",		"\xE9\xA5" => "\xE6\x93\x96",		"\xE9\xA6" => "\xE6\x93\x90",		"\xE9\xA7" => "\xE6\x93\x8F",		"\xE9\xA8" => "\xE6\x93\x89",		"\xE9\xA9" => "\xE6\x92\xBD",		"\xE9\xAA" => "\xE6\x92\x89",		"\xE9\xAB" => "\xE6\x93\x83",		"\xE9\xAC" => "\xE6\x93\x9B",		"\xE9\xAD" => "\xE6\x93\xB3",		"\xE9\xAE" => "\xE6\x93\x99",		"\xE9\xAF" => "\xE6\x94\xB3",		"\xE9\xB0" => "\xE6\x95\xBF",		"\xE9\xB1" => "\xE6\x95\xBC",		"\xE9\xB2" => "\xE6\x96\xA2",		"\xE9\xB3" => "\xE6\x9B\x88",		"\xE9\xB4" => "\xE6\x9A\xBE",		"\xE9\xB5" => "\xE6\x9B\x80",		"\xE9\xB6" => "\xE6\x9B\x8A",		"\xE9\xB7" => "\xE6\x9B\x8B",		"\xE9\xB8" => "\xE6\x9B\x8F",		"\xE9\xB9" => "\xE6\x9A\xBD",		"\xE9\xBA" => "\xE6\x9A\xBB",		"\xE9\xBB" => "\xE6\x9A\xBA",		"\xE9\xBC" => "\xE6\x9B\x8C",		"\xE9\xBD" => "\xE6\x9C\xA3",		"\xE9\xBE" => "\xE6\xA8\xB4",		"\xE9\xBF" => "\xE6\xA9\xA6",		"\xE9\xC0" => "\xE6\xA9\x89",		"\xE9\xC1" => "\xE6\xA9\xA7",		"\xE9\xC2" => "\xE6\xA8\xB2",		"\xE9\xC3" => "\xE6\xA9\xA8",		"\xE9\xC4" => "\xE6\xA8\xBE",		"\xE9\xC5" => "\xE6\xA9\x9D",		"\xE9\xC6" => "\xE6\xA9\xAD",		"\xE9\xC7" => "\xE6\xA9\xB6",		"\xE9\xC8" => "\xE6\xA9\x9B",		"\xE9\xC9" => "\xE6\xA9\x91",		"\xE9\xCA" => "\xE6\xA8\xA8",		"\xE9\xCB" => "\xE6\xA9\x9A",		"\xE9\xCC" => "\xE6\xA8\xBB",		"\xE9\xCD" => "\xE6\xA8\xBF",		"\xE9\xCE" => "\xE6\xA9\x81",		"\xE9\xCF" => "\xE6\xA9\xAA",		"\xE9\xD0" => "\xE6\xA9\xA4",		"\xE9\xD1" => "\xE6\xA9\x90",		"\xE9\xD2" => "\xE6\xA9\x8F",		"\xE9\xD3" => "\xE6\xA9\x94",		"\xE9\xD4" => "\xE6\xA9\xAF",		"\xE9\xD5" => "\xE6\xA9\xA9",		"\xE9\xD6" => "\xE6\xA9\xA0",		"\xE9\xD7" => "\xE6\xA8\xBC",		"\xE9\xD8" => "\xE6\xA9\x9E",		"\xE9\xD9" => "\xE6\xA9\x96",		"\xE9\xDA" => "\xE6\xA9\x95",		"\xE9\xDB" => "\xE6\xA9\x8D",		"\xE9\xDC" => "\xE6\xA9\x8E",		"\xE9\xDD" => "\xE6\xA9\x86",		"\xE9\xDE" => "\xE6\xAD\x95",		"\xE9\xDF" => "\xE6\xAD\x94",		"\xE9\xE0" => "\xE6\xAD\x96",		"\xE9\xE1" => "\xE6\xAE\xA7",		"\xE9\xE2" => "\xE6\xAE\xAA",		"\xE9\xE3" => "\xE6\xAE\xAB",		"\xE9\xE4" => "\xE6\xAF\x88",		"\xE9\xE5" => "\xE6\xAF\x87",		"\xE9\xE6" => "\xE6\xB0\x84",		"\xE9\xE7" => "\xE6\xB0\x83",		"\xE9\xE8" => "\xE6\xB0\x86",		"\xE9\xE9" => "\xE6\xBE\xAD",		"\xE9\xEA" => "\xE6\xBF\x8B",		"\xE9\xEB" => "\xE6\xBE\xA3",		"\xE9\xEC" => "\xE6\xBF\x87",		"\xE9\xED" => "\xE6\xBE\xBC",		"\xE9\xEE" => "\xE6\xBF\x8E",		"\xE9\xEF" => "\xE6\xBF\x88",		"\xE9\xF0" => "\xE6\xBD\x9E",		"\xE9\xF1" => "\xE6\xBF\x84",		"\xE9\xF2" => "\xE6\xBE\xBD",		"\xE9\xF3" => "\xE6\xBE\x9E",		"\xE9\xF4" => "\xE6\xBF\x8A",		"\xE9\xF5" => "\xE6\xBE\xA8",		"\xE9\xF6" => "\xE7\x80\x84",		"\xE9\xF7" => "\xE6\xBE\xA5",		"\xE9\xF8" => "\xE6\xBE\xAE",		"\xE9\xF9" => "\xE6\xBE\xBA",		"\xE9\xFA" => "\xE6\xBE\xAC",		"\xE9\xFB" => "\xE6\xBE\xAA",		"\xE9\xFC" => "\xE6\xBF\x8F",		"\xE9\xFD" => "\xE6\xBE\xBF",		"\xE9\xFE" => "\xE6\xBE\xB8",		"\xEA\x40" => "\xE6\xBE\xA2",		"\xEA\x41" => "\xE6\xBF\x89",		"\xEA\x42" => "\xE6\xBE\xAB",		"\xEA\x43" => "\xE6\xBF\x8D",		"\xEA\x44" => "\xE6\xBE\xAF",		"\xEA\x45" => "\xE6\xBE\xB2",		"\xEA\x46" => "\xE6\xBE\xB0",		"\xEA\x47" => "\xE7\x87\x85",		"\xEA\x48" => "\xE7\x87\x82",		"\xEA\x49" => "\xE7\x86\xBF",		"\xEA\x4A" => "\xE7\x86\xB8",		"\xEA\x4B" => "\xE7\x87\x96",		"\xEA\x4C" => "\xE7\x87\x80",		"\xEA\x4D" => "\xE7\x87\x81",		"\xEA\x4E" => "\xE7\x87\x8B",		"\xEA\x4F" => "\xE7\x87\x94",		"\xEA\x50" => "\xE7\x87\x8A",		"\xEA\x51" => "\xE7\x87\x87",		"\xEA\x52" => "\xE7\x87\x8F",		"\xEA\x53" => "\xE7\x86\xBD",		"\xEA\x54" => "\xE7\x87\x98",		"\xEA\x55" => "\xE7\x86\xBC",		"\xEA\x56" => "\xE7\x87\x86",		"\xEA\x57" => "\xE7\x87\x9A",		"\xEA\x58" => "\xE7\x87\x9B",		"\xEA\x59" => "\xE7\x8A\x9D",		"\xEA\x5A" => "\xE7\x8A\x9E",		"\xEA\x5B" => "\xE7\x8D\xA9",		"\xEA\x5C" => "\xE7\x8D\xA6",		"\xEA\x5D" => "\xE7\x8D\xA7",		"\xEA\x5E" => "\xE7\x8D\xAC",		"\xEA\x5F" => "\xE7\x8D\xA5",		"\xEA\x60" => "\xE7\x8D\xAB",		"\xEA\x61" => "\xE7\x8D\xAA",		"\xEA\x62" => "\xE7\x91\xBF",		"\xEA\x63" => "\xE7\x92\x9A",		"\xEA\x64" => "\xE7\x92\xA0",		"\xEA\x65" => "\xE7\x92\x94",		"\xEA\x66" => "\xE7\x92\x92",		"\xEA\x67" => "\xE7\x92\x95",		"\xEA\x68" => "\xE7\x92\xA1",		"\xEA\x69" => "\xE7\x94\x8B",		"\xEA\x6A" => "\xE7\x96\x80",		"\xEA\x6B" => "\xE7\x98\xAF",		"\xEA\x6C" => "\xE7\x98\xAD",		"\xEA\x6D" => "\xE7\x98\xB1",		"\xEA\x6E" => "\xE7\x98\xBD",		"\xEA\x6F" => "\xE7\x98\xB3",		"\xEA\x70" => "\xE7\x98\xBC",		"\xEA\x71" => "\xE7\x98\xB5",		"\xEA\x72" => "\xE7\x98\xB2",		"\xEA\x73" => "\xE7\x98\xB0",		"\xEA\x74" => "\xE7\x9A\xBB",		"\xEA\x75" => "\xE7\x9B\xA6",		"\xEA\x76" => "\xE7\x9E\x9A",		"\xEA\x77" => "\xE7\x9E\x9D",		"\xEA\x78" => "\xE7\x9E\xA1",		"\xEA\x79" => "\xE7\x9E\x9C",		"\xEA\x7A" => "\xE7\x9E\x9B",		"\xEA\x7B" => "\xE7\x9E\xA2",		"\xEA\x7C" => "\xE7\x9E\xA3",		"\xEA\x7D" => "\xE7\x9E\x95",		"\xEA\x7E" => "\xE7\x9E\x99",		"\xEA\xA1" => "\xE7\x9E\x97",		"\xEA\xA2" => "\xE7\xA3\x9D",		"\xEA\xA3" => "\xE7\xA3\xA9",		"\xEA\xA4" => "\xE7\xA3\xA5",		"\xEA\xA5" => "\xE7\xA3\xAA",		"\xEA\xA6" => "\xE7\xA3\x9E",		"\xEA\xA7" => "\xE7\xA3\xA3",		"\xEA\xA8" => "\xE7\xA3\x9B",		"\xEA\xA9" => "\xE7\xA3\xA1",		"\xEA\xAA" => "\xE7\xA3\xA2",		"\xEA\xAB" => "\xE7\xA3\xAD",		"\xEA\xAC" => "\xE7\xA3\x9F",		"\xEA\xAD" => "\xE7\xA3\xA0",		"\xEA\xAE" => "\xE7\xA6\xA4",		"\xEA\xAF" => "\xE7\xA9\x84",		"\xEA\xB0" => "\xE7\xA9\x88",		"\xEA\xB1" => "\xE7\xA9\x87",		"\xEA\xB2" => "\xE7\xAA\xB6",		"\xEA\xB3" => "\xE7\xAA\xB8",		"\xEA\xB4" => "\xE7\xAA\xB5",		"\xEA\xB5" => "\xE7\xAA\xB1",		"\xEA\xB6" => "\xE7\xAA\xB7",		"\xEA\xB7" => "\xE7\xAF\x9E",		"\xEA\xB8" => "\xE7\xAF\xA3",		"\xEA\xB9" => "\xE7\xAF\xA7",		"\xEA\xBA" => "\xE7\xAF\x9D",		"\xEA\xBB" => "\xE7\xAF\x95",		"\xEA\xBC" => "\xE7\xAF\xA5",		"\xEA\xBD" => "\xE7\xAF\x9A",		"\xEA\xBE" => "\xE7\xAF\xA8",		"\xEA\xBF" => "\xE7\xAF\xB9",		"\xEA\xC0" => "\xE7\xAF\x94",		"\xEA\xC1" => "\xE7\xAF\xAA",		"\xEA\xC2" => "\xE7\xAF\xA2",		"\xEA\xC3" => "\xE7\xAF\x9C",		"\xEA\xC4" => "\xE7\xAF\xAB",		"\xEA\xC5" => "\xE7\xAF\x98",		"\xEA\xC6" => "\xE7\xAF\x9F",		"\xEA\xC7" => "\xE7\xB3\x92",		"\xEA\xC8" => "\xE7\xB3\x94",		"\xEA\xC9" => "\xE7\xB3\x97",		"\xEA\xCA" => "\xE7\xB3\x90",		"\xEA\xCB" => "\xE7\xB3\x91",		"\xEA\xCC" => "\xE7\xB8\x92",		"\xEA\xCD" => "\xE7\xB8\xA1",		"\xEA\xCE" => "\xE7\xB8\x97",		"\xEA\xCF" => "\xE7\xB8\x8C",		"\xEA\xD0" => "\xE7\xB8\x9F",		"\xEA\xD1" => "\xE7\xB8\xA0",		"\xEA\xD2" => "\xE7\xB8\x93",		"\xEA\xD3" => "\xE7\xB8\x8E",		"\xEA\xD4" => "\xE7\xB8\x9C",		"\xEA\xD5" => "\xE7\xB8\x95",		"\xEA\xD6" => "\xE7\xB8\x9A",		"\xEA\xD7" => "\xE7\xB8\xA2",		"\xEA\xD8" => "\xE7\xB8\x8B",		"\xEA\xD9" => "\xE7\xB8\x8F",		"\xEA\xDA" => "\xE7\xB8\x96",		"\xEA\xDB" => "\xE7\xB8\x8D",		"\xEA\xDC" => "\xE7\xB8\x94",		"\xEA\xDD" => "\xE7\xB8\xA5",		"\xEA\xDE" => "\xE7\xB8\xA4",		"\xEA\xDF" => "\xE7\xBD\x83",		"\xEA\xE0" => "\xE7\xBD\xBB",		"\xEA\xE1" => "\xE7\xBD\xBC",		"\xEA\xE2" => "\xE7\xBD\xBA",		"\xEA\xE3" => "\xE7\xBE\xB1",		"\xEA\xE4" => "\xE7\xBF\xAF",		"\xEA\xE5" => "\xE8\x80\xAA",		"\xEA\xE6" => "\xE8\x80\xA9",		"\xEA\xE7" => "\xE8\x81\xAC",		"\xEA\xE8" => "\xE8\x86\xB1",		"\xEA\xE9" => "\xE8\x86\xA6",		"\xEA\xEA" => "\xE8\x86\xAE",		"\xEA\xEB" => "\xE8\x86\xB9",		"\xEA\xEC" => "\xE8\x86\xB5",		"\xEA\xED" => "\xE8\x86\xAB",		"\xEA\xEE" => "\xE8\x86\xB0",		"\xEA\xEF" => "\xE8\x86\xAC",		"\xEA\xF0" => "\xE8\x86\xB4",		"\xEA\xF1" => "\xE8\x86\xB2",		"\xEA\xF2" => "\xE8\x86\xB7",		"\xEA\xF3" => "\xE8\x86\xA7",		"\xEA\xF4" => "\xE8\x87\xB2",		"\xEA\xF5" => "\xE8\x89\x95",		"\xEA\xF6" => "\xE8\x89\x96",		"\xEA\xF7" => "\xE8\x89\x97",		"\xEA\xF8" => "\xE8\x95\x96",		"\xEA\xF9" => "\xE8\x95\x85",		"\xEA\xFA" => "\xE8\x95\xAB",		"\xEA\xFB" => "\xE8\x95\x8D",		"\xEA\xFC" => "\xE8\x95\x93",		"\xEA\xFD" => "\xE8\x95\xA1",		"\xEA\xFE" => "\xE8\x95\x98",		"\xEB\x40" => "\xE8\x95\x80",		"\xEB\x41" => "\xE8\x95\x86",		"\xEB\x42" => "\xE8\x95\xA4",		"\xEB\x43" => "\xE8\x95\x81",		"\xEB\x44" => "\xE8\x95\xA2",		"\xEB\x45" => "\xE8\x95\x84",		"\xEB\x46" => "\xE8\x95\x91",		"\xEB\x47" => "\xE8\x95\x87",		"\xEB\x48" => "\xE8\x95\xA3",		"\xEB\x49" => "\xE8\x94\xBE",		"\xEB\x4A" => "\xE8\x95\x9B",		"\xEB\x4B" => "\xE8\x95\xB1",		"\xEB\x4C" => "\xE8\x95\x8E",		"\xEB\x4D" => "\xE8\x95\xAE",		"\xEB\x4E" => "\xE8\x95\xB5",		"\xEB\x4F" => "\xE8\x95\x95",		"\xEB\x50" => "\xE8\x95\xA7",		"\xEB\x51" => "\xE8\x95\xA0",		"\xEB\x52" => "\xE8\x96\x8C",		"\xEB\x53" => "\xE8\x95\xA6",		"\xEB\x54" => "\xE8\x95\x9D",		"\xEB\x55" => "\xE8\x95\x94",		"\xEB\x56" => "\xE8\x95\xA5",		"\xEB\x57" => "\xE8\x95\xAC",		"\xEB\x58" => "\xE8\x99\xA3",		"\xEB\x59" => "\xE8\x99\xA5",		"\xEB\x5A" => "\xE8\x99\xA4",		"\xEB\x5B" => "\xE8\x9E\x9B",		"\xEB\x5C" => "\xE8\x9E\x8F",		"\xEB\x5D" => "\xE8\x9E\x97",		"\xEB\x5E" => "\xE8\x9E\x93",		"\xEB\x5F" => "\xE8\x9E\x92",		"\xEB\x60" => "\xE8\x9E\x88",		"\xEB\x61" => "\xE8\x9E\x81",		"\xEB\x62" => "\xE8\x9E\x96",		"\xEB\x63" => "\xE8\x9E\x98",		"\xEB\x64" => "\xE8\x9D\xB9",		"\xEB\x65" => "\xE8\x9E\x87",		"\xEB\x66" => "\xE8\x9E\xA3",		"\xEB\x67" => "\xE8\x9E\x85",		"\xEB\x68" => "\xE8\x9E\x90",		"\xEB\x69" => "\xE8\x9E\x91",		"\xEB\x6A" => "\xE8\x9E\x9D",		"\xEB\x6B" => "\xE8\x9E\x84",		"\xEB\x6C" => "\xE8\x9E\x94",		"\xEB\x6D" => "\xE8\x9E\x9C",		"\xEB\x6E" => "\xE8\x9E\x9A",		"\xEB\x6F" => "\xE8\x9E\x89",		"\xEB\x70" => "\xE8\xA4\x9E",		"\xEB\x71" => "\xE8\xA4\xA6",		"\xEB\x72" => "\xE8\xA4\xB0",		"\xEB\x73" => "\xE8\xA4\xAD",		"\xEB\x74" => "\xE8\xA4\xAE",		"\xEB\x75" => "\xE8\xA4\xA7",		"\xEB\x76" => "\xE8\xA4\xB1",		"\xEB\x77" => "\xE8\xA4\xA2",		"\xEB\x78" => "\xE8\xA4\xA9",		"\xEB\x79" => "\xE8\xA4\xA3",		"\xEB\x7A" => "\xE8\xA4\xAF",		"\xEB\x7B" => "\xE8\xA4\xAC",		"\xEB\x7C" => "\xE8\xA4\x9F",		"\xEB\x7D" => "\xE8\xA7\xB1",		"\xEB\x7E" => "\xE8\xAB\xA0",		"\xEB\xA1" => "\xE8\xAB\xA2",		"\xEB\xA2" => "\xE8\xAB\xB2",		"\xEB\xA3" => "\xE8\xAB\xB4",		"\xEB\xA4" => "\xE8\xAB\xB5",		"\xEB\xA5" => "\xE8\xAB\x9D",		"\xEB\xA6" => "\xE8\xAC\x94",		"\xEB\xA7" => "\xE8\xAB\xA4",		"\xEB\xA8" => "\xE8\xAB\x9F",		"\xEB\xA9" => "\xE8\xAB\xB0",		"\xEB\xAA" => "\xE8\xAB\x88",		"\xEB\xAB" => "\xE8\xAB\x9E",		"\xEB\xAC" => "\xE8\xAB\xA1",		"\xEB\xAD" => "\xE8\xAB\xA8",		"\xEB\xAE" => "\xE8\xAB\xBF",		"\xEB\xAF" => "\xE8\xAB\xAF",		"\xEB\xB0" => "\xE8\xAB\xBB",		"\xEB\xB1" => "\xE8\xB2\x91",		"\xEB\xB2" => "\xE8\xB2\x92",		"\xEB\xB3" => "\xE8\xB2\x90",		"\xEB\xB4" => "\xE8\xB3\xB5",		"\xEB\xB5" => "\xE8\xB3\xAE",		"\xEB\xB6" => "\xE8\xB3\xB1",		"\xEB\xB7" => "\xE8\xB3\xB0",		"\xEB\xB8" => "\xE8\xB3\xB3",		"\xEB\xB9" => "\xE8\xB5\xAC",		"\xEB\xBA" => "\xE8\xB5\xAE",		"\xEB\xBB" => "\xE8\xB6\xA5",		"\xEB\xBC" => "\xE8\xB6\xA7",		"\xEB\xBD" => "\xE8\xB8\xB3",		"\xEB\xBE" => "\xE8\xB8\xBE",		"\xEB\xBF" => "\xE8\xB8\xB8",		"\xEB\xC0" => "\xE8\xB9\x80",		"\xEB\xC1" => "\xE8\xB9\x85",		"\xEB\xC2" => "\xE8\xB8\xB6",		"\xEB\xC3" => "\xE8\xB8\xBC",		"\xEB\xC4" => "\xE8\xB8\xBD",		"\xEB\xC5" => "\xE8\xB9\x81",		"\xEB\xC6" => "\xE8\xB8\xB0",		"\xEB\xC7" => "\xE8\xB8\xBF",		"\xEB\xC8" => "\xE8\xBA\xBD",		"\xEB\xC9" => "\xE8\xBC\xB6",		"\xEB\xCA" => "\xE8\xBC\xAE",		"\xEB\xCB" => "\xE8\xBC\xB5",		"\xEB\xCC" => "\xE8\xBC\xB2",		"\xEB\xCD" => "\xE8\xBC\xB9",		"\xEB\xCE" => "\xE8\xBC\xB7",		"\xEB\xCF" => "\xE8\xBC\xB4",		"\xEB\xD0" => "\xE9\x81\xB6",		"\xEB\xD1" => "\xE9\x81\xB9",		"\xEB\xD2" => "\xE9\x81\xBB",		"\xEB\xD3" => "\xE9\x82\x86",		"\xEB\xD4" => "\xE9\x83\xBA",		"\xEB\xD5" => "\xE9\x84\xB3",		"\xEB\xD6" => "\xE9\x84\xB5",		"\xEB\xD7" => "\xE9\x84\xB6",		"\xEB\xD8" => "\xE9\x86\x93",		"\xEB\xD9" => "\xE9\x86\x90",		"\xEB\xDA" => "\xE9\x86\x91",		"\xEB\xDB" => "\xE9\x86\x8D",		"\xEB\xDC" => "\xE9\x86\x8F",		"\xEB\xDD" => "\xE9\x8C\xA7",		"\xEB\xDE" => "\xE9\x8C\x9E",		"\xEB\xDF" => "\xE9\x8C\x88",		"\xEB\xE0" => "\xE9\x8C\x9F",		"\xEB\xE1" => "\xE9\x8C\x86",		"\xEB\xE2" => "\xE9\x8C\x8F",		"\xEB\xE3" => "\xE9\x8D\xBA",		"\xEB\xE4" => "\xE9\x8C\xB8",		"\xEB\xE5" => "\xE9\x8C\xBC",		"\xEB\xE6" => "\xE9\x8C\x9B",		"\xEB\xE7" => "\xE9\x8C\xA3",		"\xEB\xE8" => "\xE9\x8C\x92",		"\xEB\xE9" => "\xE9\x8C\x81",		"\xEB\xEA" => "\xE9\x8D\x86",		"\xEB\xEB" => "\xE9\x8C\xAD",		"\xEB\xEC" => "\xE9\x8C\x8E",		"\xEB\xED" => "\xE9\x8C\x8D",		"\xEB\xEE" => "\xE9\x8B\x8B",		"\xEB\xEF" => "\xE9\x8C\x9D",		"\xEB\xF0" => "\xE9\x8B\xBA",		"\xEB\xF1" => "\xE9\x8C\xA5",		"\xEB\xF2" => "\xE9\x8C\x93",		"\xEB\xF3" => "\xE9\x8B\xB9",		"\xEB\xF4" => "\xE9\x8B\xB7",		"\xEB\xF5" => "\xE9\x8C\xB4",		"\xEB\xF6" => "\xE9\x8C\x82",		"\xEB\xF7" => "\xE9\x8C\xA4",		"\xEB\xF8" => "\xE9\x8B\xBF",		"\xEB\xF9" => "\xE9\x8C\xA9",		"\xEB\xFA" => "\xE9\x8C\xB9",		"\xEB\xFB" => "\xE9\x8C\xB5",		"\xEB\xFC" => "\xE9\x8C\xAA",		"\xEB\xFD" => "\xE9\x8C\x94",		"\xEB\xFE" => "\xE9\x8C\x8C",		"\xEC\x40" => "\xE9\x8C\x8B",		"\xEC\x41" => "\xE9\x8B\xBE",		"\xEC\x42" => "\xE9\x8C\x89",		"\xEC\x43" => "\xE9\x8C\x80",		"\xEC\x44" => "\xE9\x8B\xBB",		"\xEC\x45" => "\xE9\x8C\x96",		"\xEC\x46" => "\xE9\x96\xBC",		"\xEC\x47" => "\xE9\x97\x8D",		"\xEC\x48" => "\xE9\x96\xBE",		"\xEC\x49" => "\xE9\x96\xB9",		"\xEC\x4A" => "\xE9\x96\xBA",		"\xEC\x4B" => "\xE9\x96\xB6",		"\xEC\x4C" => "\xE9\x96\xBF",		"\xEC\x4D" => "\xE9\x96\xB5",		"\xEC\x4E" => "\xE9\x96\xBD",		"\xEC\x4F" => "\xE9\x9A\xA9",		"\xEC\x50" => "\xE9\x9B\x94",		"\xEC\x51" => "\xE9\x9C\x8B",		"\xEC\x52" => "\xE9\x9C\x92",		"\xEC\x53" => "\xE9\x9C\x90",		"\xEC\x54" => "\xE9\x9E\x99",		"\xEC\x55" => "\xE9\x9E\x97",		"\xEC\x56" => "\xE9\x9E\x94",		"\xEC\x57" => "\xE9\x9F\xB0",		"\xEC\x58" => "\xE9\x9F\xB8",		"\xEC\x59" => "\xE9\xA0\xB5",		"\xEC\x5A" => "\xE9\xA0\xAF",		"\xEC\x5B" => "\xE9\xA0\xB2",		"\xEC\x5C" => "\xE9\xA4\xA4",		"\xEC\x5D" => "\xE9\xA4\x9F",		"\xEC\x5E" => "\xE9\xA4\xA7",		"\xEC\x5F" => "\xE9\xA4\xA9",		"\xEC\x60" => "\xE9\xA6\x9E",		"\xEC\x61" => "\xE9\xA7\xAE",		"\xEC\x62" => "\xE9\xA7\xAC",		"\xEC\x63" => "\xE9\xA7\xA5",		"\xEC\x64" => "\xE9\xA7\xA4",		"\xEC\x65" => "\xE9\xA7\xB0",		"\xEC\x66" => "\xE9\xA7\xA3",		"\xEC\x67" => "\xE9\xA7\xAA",		"\xEC\x68" => "\xE9\xA7\xA9",		"\xEC\x69" => "\xE9\xA7\xA7",		"\xEC\x6A" => "\xE9\xAA\xB9",		"\xEC\x6B" => "\xE9\xAA\xBF",		"\xEC\x6C" => "\xE9\xAA\xB4",		"\xEC\x6D" => "\xE9\xAA\xBB",		"\xEC\x6E" => "\xE9\xAB\xB6",		"\xEC\x6F" => "\xE9\xAB\xBA",		"\xEC\x70" => "\xE9\xAB\xB9",		"\xEC\x71" => "\xE9\xAB\xB7",		"\xEC\x72" => "\xE9\xAC\xB3",		"\xEC\x73" => "\xE9\xAE\x80",		"\xEC\x74" => "\xE9\xAE\x85",		"\xEC\x75" => "\xE9\xAE\x87",		"\xEC\x76" => "\xE9\xAD\xBC",		"\xEC\x77" => "\xE9\xAD\xBE",		"\xEC\x78" => "\xE9\xAD\xBB",		"\xEC\x79" => "\xE9\xAE\x82",		"\xEC\x7A" => "\xE9\xAE\x93",		"\xEC\x7B" => "\xE9\xAE\x92",		"\xEC\x7C" => "\xE9\xAE\x90",		"\xEC\x7D" => "\xE9\xAD\xBA",		"\xEC\x7E" => "\xE9\xAE\x95",		"\xEC\xA1" => "\xE9\xAD\xBD",		"\xEC\xA2" => "\xE9\xAE\x88",		"\xEC\xA3" => "\xE9\xB4\xA5",		"\xEC\xA4" => "\xE9\xB4\x97",		"\xEC\xA5" => "\xE9\xB4\xA0",		"\xEC\xA6" => "\xE9\xB4\x9E",		"\xEC\xA7" => "\xE9\xB4\x94",		"\xEC\xA8" => "\xE9\xB4\xA9",		"\xEC\xA9" => "\xE9\xB4\x9D",		"\xEC\xAA" => "\xE9\xB4\x98",		"\xEC\xAB" => "\xE9\xB4\xA2",		"\xEC\xAC" => "\xE9\xB4\x90",		"\xEC\xAD" => "\xE9\xB4\x99",		"\xEC\xAE" => "\xE9\xB4\x9F",		"\xEC\xAF" => "\xE9\xBA\x88",		"\xEC\xB0" => "\xE9\xBA\x86",		"\xEC\xB1" => "\xE9\xBA\x87",		"\xEC\xB2" => "\xE9\xBA\xAE",		"\xEC\xB3" => "\xE9\xBA\xAD",		"\xEC\xB4" => "\xE9\xBB\x95",		"\xEC\xB5" => "\xE9\xBB\x96",		"\xEC\xB6" => "\xE9\xBB\xBA",		"\xEC\xB7" => "\xE9\xBC\x92",		"\xEC\xB8" => "\xE9\xBC\xBD",		"\xEC\xB9" => "\xE5\x84\xA6",		"\xEC\xBA" => "\xE5\x84\xA5",		"\xEC\xBB" => "\xE5\x84\xA2",		"\xEC\xBC" => "\xE5\x84\xA4",		"\xEC\xBD" => "\xE5\x84\xA0",		"\xEC\xBE" => "\xE5\x84\xA9",		"\xEC\xBF" => "\xE5\x8B\xB4",		"\xEC\xC0" => "\xE5\x9A\x93",		"\xEC\xC1" => "\xE5\x9A\x8C",		"\xEC\xC2" => "\xE5\x9A\x8D",		"\xEC\xC3" => "\xE5\x9A\x86",		"\xEC\xC4" => "\xE5\x9A\x84",		"\xEC\xC5" => "\xE5\x9A\x83",		"\xEC\xC6" => "\xE5\x99\xBE",		"\xEC\xC7" => "\xE5\x9A\x82",		"\xEC\xC8" => "\xE5\x99\xBF",		"\xEC\xC9" => "\xE5\x9A\x81",		"\xEC\xCA" => "\xE5\xA3\x96",		"\xEC\xCB" => "\xE5\xA3\x94",		"\xEC\xCC" => "\xE5\xA3\x8F",		"\xEC\xCD" => "\xE5\xA3\x92",		"\xEC\xCE" => "\xE5\xAC\xAD",		"\xEC\xCF" => "\xE5\xAC\xA5",		"\xEC\xD0" => "\xE5\xAC\xB2",		"\xEC\xD1" => "\xE5\xAC\xA3",		"\xEC\xD2" => "\xE5\xAC\xAC",		"\xEC\xD3" => "\xE5\xAC\xA7",		"\xEC\xD4" => "\xE5\xAC\xA6",		"\xEC\xD5" => "\xE5\xAC\xAF",		"\xEC\xD6" => "\xE5\xAC\xAE",		"\xEC\xD7" => "\xE5\xAD\xBB",		"\xEC\xD8" => "\xE5\xAF\xB1",		"\xEC\xD9" => "\xE5\xAF\xB2",		"\xEC\xDA" => "\xE5\xB6\xB7",		"\xEC\xDB" => "\xE5\xB9\xAC",		"\xEC\xDC" => "\xE5\xB9\xAA",		"\xEC\xDD" => "\xE5\xBE\xBE",		"\xEC\xDE" => "\xE5\xBE\xBB",		"\xEC\xDF" => "\xE6\x87\x83",		"\xEC\xE0" => "\xE6\x86\xB5",		"\xEC\xE1" => "\xE6\x86\xBC",		"\xEC\xE2" => "\xE6\x87\xA7",		"\xEC\xE3" => "\xE6\x87\xA0",		"\xEC\xE4" => "\xE6\x87\xA5",		"\xEC\xE5" => "\xE6\x87\xA4",		"\xEC\xE6" => "\xE6\x87\xA8",		"\xEC\xE7" => "\xE6\x87\x9E",		"\xEC\xE8" => "\xE6\x93\xAF",		"\xEC\xE9" => "\xE6\x93\xA9",		"\xEC\xEA" => "\xE6\x93\xA3",		"\xEC\xEB" => "\xE6\x93\xAB",		"\xEC\xEC" => "\xE6\x93\xA4",		"\xEC\xED" => "\xE6\x93\xA8",		"\xEC\xEE" => "\xE6\x96\x81",		"\xEC\xEF" => "\xE6\x96\x80",		"\xEC\xF0" => "\xE6\x96\xB6",		"\xEC\xF1" => "\xE6\x97\x9A",		"\xEC\xF2" => "\xE6\x9B\x92",		"\xEC\xF3" => "\xE6\xAA\x8D",		"\xEC\xF4" => "\xE6\xAA\x96",		"\xEC\xF5" => "\xE6\xAA\x81",		"\xEC\xF6" => "\xE6\xAA\xA5",		"\xEC\xF7" => "\xE6\xAA\x89",		"\xEC\xF8" => "\xE6\xAA\x9F",		"\xEC\xF9" => "\xE6\xAA\x9B",		"\xEC\xFA" => "\xE6\xAA\xA1",		"\xEC\xFB" => "\xE6\xAA\x9E",		"\xEC\xFC" => "\xE6\xAA\x87",		"\xEC\xFD" => "\xE6\xAA\x93",		"\xEC\xFE" => "\xE6\xAA\x8E",		"\xED\x40" => "\xE6\xAA\x95",		"\xED\x41" => "\xE6\xAA\x83",		"\xED\x42" => "\xE6\xAA\xA8",		"\xED\x43" => "\xE6\xAA\xA4",		"\xED\x44" => "\xE6\xAA\x91",		"\xED\x45" => "\xE6\xA9\xBF",		"\xED\x46" => "\xE6\xAA\xA6",		"\xED\x47" => "\xE6\xAA\x9A",		"\xED\x48" => "\xE6\xAA\x85",		"\xED\x49" => "\xE6\xAA\x8C",		"\xED\x4A" => "\xE6\xAA\x92",		"\xED\x4B" => "\xE6\xAD\x9B",		"\xED\x4C" => "\xE6\xAE\xAD",		"\xED\x4D" => "\xE6\xB0\x89",		"\xED\x4E" => "\xE6\xBF\x8C",		"\xED\x4F" => "\xE6\xBE\xA9",		"\xED\x50" => "\xE6\xBF\xB4",		"\xED\x51" => "\xE6\xBF\x94",		"\xED\x52" => "\xE6\xBF\xA3",		"\xED\x53" => "\xE6\xBF\x9C",		"\xED\x54" => "\xE6\xBF\xAD",		"\xED\x55" => "\xE6\xBF\xA7",		"\xED\x56" => "\xE6\xBF\xA6",		"\xED\x57" => "\xE6\xBF\x9E",		"\xED\x58" => "\xE6\xBF\xB2",		"\xED\x59" => "\xE6\xBF\x9D",		"\xED\x5A" => "\xE6\xBF\xA2",		"\xED\x5B" => "\xE6\xBF\xA8",		"\xED\x5C" => "\xE7\x87\xA1",		"\xED\x5D" => "\xE7\x87\xB1",		"\xED\x5E" => "\xE7\x87\xA8",		"\xED\x5F" => "\xE7\x87\xB2",		"\xED\x60" => "\xE7\x87\xA4",		"\xED\x61" => "\xE7\x87\xB0",		"\xED\x62" => "\xE7\x87\xA2",		"\xED\x63" => "\xE7\x8D\xB3",		"\xED\x64" => "\xE7\x8D\xAE",		"\xED\x65" => "\xE7\x8D\xAF",		"\xED\x66" => "\xE7\x92\x97",		"\xED\x67" => "\xE7\x92\xB2",		"\xED\x68" => "\xE7\x92\xAB",		"\xED\x69" => "\xE7\x92\x90",		"\xED\x6A" => "\xE7\x92\xAA",		"\xED\x6B" => "\xE7\x92\xAD",		"\xED\x6C" => "\xE7\x92\xB1",		"\xED\x6D" => "\xE7\x92\xA5",		"\xED\x6E" => "\xE7\x92\xAF",		"\xED\x6F" => "\xE7\x94\x90",		"\xED\x70" => "\xE7\x94\x91",		"\xED\x71" => "\xE7\x94\x92",		"\xED\x72" => "\xE7\x94\x8F",		"\xED\x73" => "\xE7\x96\x84",		"\xED\x74" => "\xE7\x99\x83",		"\xED\x75" => "\xE7\x99\x88",		"\xED\x76" => "\xE7\x99\x89",		"\xED\x77" => "\xE7\x99\x87",		"\xED\x78" => "\xE7\x9A\xA4",		"\xED\x79" => "\xE7\x9B\xA9",		"\xED\x7A" => "\xE7\x9E\xB5",		"\xED\x7B" => "\xE7\x9E\xAB",		"\xED\x7C" => "\xE7\x9E\xB2",		"\xED\x7D" => "\xE7\x9E\xB7",		"\xED\x7E" => "\xE7\x9E\xB6",		"\xED\xA1" => "\xE7\x9E\xB4",		"\xED\xA2" => "\xE7\x9E\xB1",		"\xED\xA3" => "\xE7\x9E\xA8",		"\xED\xA4" => "\xE7\x9F\xB0",		"\xED\xA5" => "\xE7\xA3\xB3",		"\xED\xA6" => "\xE7\xA3\xBD",		"\xED\xA7" => "\xE7\xA4\x82",		"\xED\xA8" => "\xE7\xA3\xBB",		"\xED\xA9" => "\xE7\xA3\xBC",		"\xED\xAA" => "\xE7\xA3\xB2",		"\xED\xAB" => "\xE7\xA4\x85",		"\xED\xAC" => "\xE7\xA3\xB9",		"\xED\xAD" => "\xE7\xA3\xBE",		"\xED\xAE" => "\xE7\xA4\x84",		"\xED\xAF" => "\xE7\xA6\xAB",		"\xED\xB0" => "\xE7\xA6\xA8",		"\xED\xB1" => "\xE7\xA9\x9C",		"\xED\xB2" => "\xE7\xA9\x9B",		"\xED\xB3" => "\xE7\xA9\x96",		"\xED\xB4" => "\xE7\xA9\x98",		"\xED\xB5" => "\xE7\xA9\x94",		"\xED\xB6" => "\xE7\xA9\x9A",		"\xED\xB7" => "\xE7\xAA\xBE",		"\xED\xB8" => "\xE7\xAB\x80",		"\xED\xB9" => "\xE7\xAB\x81",		"\xED\xBA" => "\xE7\xB0\x85",		"\xED\xBB" => "\xE7\xB0\x8F",		"\xED\xBC" => "\xE7\xAF\xB2",		"\xED\xBD" => "\xE7\xB0\x80",		"\xED\xBE" => "\xE7\xAF\xBF",		"\xED\xBF" => "\xE7\xAF\xBB",		"\xED\xC0" => "\xE7\xB0\x8E",		"\xED\xC1" => "\xE7\xAF\xB4",		"\xED\xC2" => "\xE7\xB0\x8B",		"\xED\xC3" => "\xE7\xAF\xB3",		"\xED\xC4" => "\xE7\xB0\x82",		"\xED\xC5" => "\xE7\xB0\x89",		"\xED\xC6" => "\xE7\xB0\x83",		"\xED\xC7" => "\xE7\xB0\x81",		"\xED\xC8" => "\xE7\xAF\xB8",		"\xED\xC9" => "\xE7\xAF\xBD",		"\xED\xCA" => "\xE7\xB0\x86",		"\xED\xCB" => "\xE7\xAF\xB0",		"\xED\xCC" => "\xE7\xAF\xB1",		"\xED\xCD" => "\xE7\xB0\x90",		"\xED\xCE" => "\xE7\xB0\x8A",		"\xED\xCF" => "\xE7\xB3\xA8",		"\xED\xD0" => "\xE7\xB8\xAD",		"\xED\xD1" => "\xE7\xB8\xBC",		"\xED\xD2" => "\xE7\xB9\x82",		"\xED\xD3" => "\xE7\xB8\xB3",		"\xED\xD4" => "\xE9\xA1\x88",		"\xED\xD5" => "\xE7\xB8\xB8",		"\xED\xD6" => "\xE7\xB8\xAA",		"\xED\xD7" => "\xE7\xB9\x89",		"\xED\xD8" => "\xE7\xB9\x80",		"\xED\xD9" => "\xE7\xB9\x87",		"\xED\xDA" => "\xE7\xB8\xA9",		"\xED\xDB" => "\xE7\xB9\x8C",		"\xED\xDC" => "\xE7\xB8\xB0",		"\xED\xDD" => "\xE7\xB8\xBB",		"\xED\xDE" => "\xE7\xB8\xB6",		"\xED\xDF" => "\xE7\xB9\x84",		"\xED\xE0" => "\xE7\xB8\xBA",		"\xED\xE1" => "\xE7\xBD\x85",		"\xED\xE2" => "\xE7\xBD\xBF",		"\xED\xE3" => "\xE7\xBD\xBE",		"\xED\xE4" => "\xE7\xBD\xBD",		"\xED\xE5" => "\xE7\xBF\xB4",		"\xED\xE6" => "\xE7\xBF\xB2",		"\xED\xE7" => "\xE8\x80\xAC",		"\xED\xE8" => "\xE8\x86\xBB",		"\xED\xE9" => "\xE8\x87\x84",		"\xED\xEA" => "\xE8\x87\x8C",		"\xED\xEB" => "\xE8\x87\x8A",		"\xED\xEC" => "\xE8\x87\x85",		"\xED\xED" => "\xE8\x87\x87",		"\xED\xEE" => "\xE8\x86\xBC",		"\xED\xEF" => "\xE8\x87\xA9",		"\xED\xF0" => "\xE8\x89\x9B",		"\xED\xF1" => "\xE8\x89\x9A",		"\xED\xF2" => "\xE8\x89\x9C",		"\xED\xF3" => "\xE8\x96\x83",		"\xED\xF4" => "\xE8\x96\x80",		"\xED\xF5" => "\xE8\x96\x8F",		"\xED\xF6" => "\xE8\x96\xA7",		"\xED\xF7" => "\xE8\x96\x95",		"\xED\xF8" => "\xE8\x96\xA0",		"\xED\xF9" => "\xE8\x96\x8B",		"\xED\xFA" => "\xE8\x96\xA3",		"\xED\xFB" => "\xE8\x95\xBB",		"\xED\xFC" => "\xE8\x96\xA4",		"\xED\xFD" => "\xE8\x96\x9A",		"\xED\xFE" => "\xE8\x96\x9E",		"\xEE\x40" => "\xE8\x95\xB7",		"\xEE\x41" => "\xE8\x95\xBC",		"\xEE\x42" => "\xE8\x96\x89",		"\xEE\x43" => "\xE8\x96\xA1",		"\xEE\x44" => "\xE8\x95\xBA",		"\xEE\x45" => "\xE8\x95\xB8",		"\xEE\x46" => "\xE8\x95\x97",		"\xEE\x47" => "\xE8\x96\x8E",		"\xEE\x48" => "\xE8\x96\x96",		"\xEE\x49" => "\xE8\x96\x86",		"\xEE\x4A" => "\xE8\x96\x8D",		"\xEE\x4B" => "\xE8\x96\x99",		"\xEE\x4C" => "\xE8\x96\x9D",		"\xEE\x4D" => "\xE8\x96\x81",		"\xEE\x4E" => "\xE8\x96\xA2",		"\xEE\x4F" => "\xE8\x96\x82",		"\xEE\x50" => "\xE8\x96\x88",		"\xEE\x51" => "\xE8\x96\x85",		"\xEE\x52" => "\xE8\x95\xB9",		"\xEE\x53" => "\xE8\x95\xB6",		"\xEE\x54" => "\xE8\x96\x98",		"\xEE\x55" => "\xE8\x96\x90",		"\xEE\x56" => "\xE8\x96\x9F",		"\xEE\x57" => "\xE8\x99\xA8",		"\xEE\x58" => "\xE8\x9E\xBE",		"\xEE\x59" => "\xE8\x9E\xAA",		"\xEE\x5A" => "\xE8\x9E\xAD",		"\xEE\x5B" => "\xE8\x9F\x85",		"\xEE\x5C" => "\xE8\x9E\xB0",		"\xEE\x5D" => "\xE8\x9E\xAC",		"\xEE\x5E" => "\xE8\x9E\xB9",		"\xEE\x5F" => "\xE8\x9E\xB5",		"\xEE\x60" => "\xE8\x9E\xBC",		"\xEE\x61" => "\xE8\x9E\xAE",		"\xEE\x62" => "\xE8\x9F\x89",		"\xEE\x63" => "\xE8\x9F\x83",		"\xEE\x64" => "\xE8\x9F\x82",		"\xEE\x65" => "\xE8\x9F\x8C",		"\xEE\x66" => "\xE8\x9E\xB7",		"\xEE\x67" => "\xE8\x9E\xAF",		"\xEE\x68" => "\xE8\x9F\x84",		"\xEE\x69" => "\xE8\x9F\x8A",		"\xEE\x6A" => "\xE8\x9E\xB4",		"\xEE\x6B" => "\xE8\x9E\xB6",		"\xEE\x6C" => "\xE8\x9E\xBF",		"\xEE\x6D" => "\xE8\x9E\xB8",		"\xEE\x6E" => "\xE8\x9E\xBD",		"\xEE\x6F" => "\xE8\x9F\x9E",		"\xEE\x70" => "\xE8\x9E\xB2",		"\xEE\x71" => "\xE8\xA4\xB5",		"\xEE\x72" => "\xE8\xA4\xB3",		"\xEE\x73" => "\xE8\xA4\xBC",		"\xEE\x74" => "\xE8\xA4\xBE",		"\xEE\x75" => "\xE8\xA5\x81",		"\xEE\x76" => "\xE8\xA5\x92",		"\xEE\x77" => "\xE8\xA4\xB7",		"\xEE\x78" => "\xE8\xA5\x82",		"\xEE\x79" => "\xE8\xA6\xAD",		"\xEE\x7A" => "\xE8\xA6\xAF",		"\xEE\x7B" => "\xE8\xA6\xAE",		"\xEE\x7C" => "\xE8\xA7\xB2",		"\xEE\x7D" => "\xE8\xA7\xB3",		"\xEE\x7E" => "\xE8\xAC\x9E",		"\xEE\xA1" => "\xE8\xAC\x98",		"\xEE\xA2" => "\xE8\xAC\x96",		"\xEE\xA3" => "\xE8\xAC\x91",		"\xEE\xA4" => "\xE8\xAC\x85",		"\xEE\xA5" => "\xE8\xAC\x8B",		"\xEE\xA6" => "\xE8\xAC\xA2",		"\xEE\xA7" => "\xE8\xAC\x8F",		"\xEE\xA8" => "\xE8\xAC\x92",		"\xEE\xA9" => "\xE8\xAC\x95",		"\xEE\xAA" => "\xE8\xAC\x87",		"\xEE\xAB" => "\xE8\xAC\x8D",		"\xEE\xAC" => "\xE8\xAC\x88",		"\xEE\xAD" => "\xE8\xAC\x86",		"\xEE\xAE" => "\xE8\xAC\x9C",		"\xEE\xAF" => "\xE8\xAC\x93",		"\xEE\xB0" => "\xE8\xAC\x9A",		"\xEE\xB1" => "\xE8\xB1\x8F",		"\xEE\xB2" => "\xE8\xB1\xB0",		"\xEE\xB3" => "\xE8\xB1\xB2",		"\xEE\xB4" => "\xE8\xB1\xB1",		"\xEE\xB5" => "\xE8\xB1\xAF",		"\xEE\xB6" => "\xE8\xB2\x95",		"\xEE\xB7" => "\xE8\xB2\x94",		"\xEE\xB8" => "\xE8\xB3\xB9",		"\xEE\xB9" => "\xE8\xB5\xAF",		"\xEE\xBA" => "\xE8\xB9\x8E",		"\xEE\xBB" => "\xE8\xB9\x8D",		"\xEE\xBC" => "\xE8\xB9\x93",		"\xEE\xBD" => "\xE8\xB9\x90",		"\xEE\xBE" => "\xE8\xB9\x8C",		"\xEE\xBF" => "\xE8\xB9\x87",		"\xEE\xC0" => "\xE8\xBD\x83",		"\xEE\xC1" => "\xE8\xBD\x80",		"\xEE\xC2" => "\xE9\x82\x85",		"\xEE\xC3" => "\xE9\x81\xBE",		"\xEE\xC4" => "\xE9\x84\xB8",		"\xEE\xC5" => "\xE9\x86\x9A",		"\xEE\xC6" => "\xE9\x86\xA2",		"\xEE\xC7" => "\xE9\x86\x9B",		"\xEE\xC8" => "\xE9\x86\x99",		"\xEE\xC9" => "\xE9\x86\x9F",		"\xEE\xCA" => "\xE9\x86\xA1",		"\xEE\xCB" => "\xE9\x86\x9D",		"\xEE\xCC" => "\xE9\x86\xA0",		"\xEE\xCD" => "\xE9\x8E\xA1",		"\xEE\xCE" => "\xE9\x8E\x83",		"\xEE\xCF" => "\xE9\x8E\xAF",		"\xEE\xD0" => "\xE9\x8D\xA4",		"\xEE\xD1" => "\xE9\x8D\x96",		"\xEE\xD2" => "\xE9\x8D\x87",		"\xEE\xD3" => "\xE9\x8D\xBC",		"\xEE\xD4" => "\xE9\x8D\x98",		"\xEE\xD5" => "\xE9\x8D\x9C",		"\xEE\xD6" => "\xE9\x8D\xB6",		"\xEE\xD7" => "\xE9\x8D\x89",		"\xEE\xD8" => "\xE9\x8D\x90",		"\xEE\xD9" => "\xE9\x8D\x91",		"\xEE\xDA" => "\xE9\x8D\xA0",		"\xEE\xDB" => "\xE9\x8D\xAD",		"\xEE\xDC" => "\xE9\x8E\x8F",		"\xEE\xDD" => "\xE9\x8D\x8C",		"\xEE\xDE" => "\xE9\x8D\xAA",		"\xEE\xDF" => "\xE9\x8D\xB9",		"\xEE\xE0" => "\xE9\x8D\x97",		"\xEE\xE1" => "\xE9\x8D\x95",		"\xEE\xE2" => "\xE9\x8D\x92",		"\xEE\xE3" => "\xE9\x8D\x8F",		"\xEE\xE4" => "\xE9\x8D\xB1",		"\xEE\xE5" => "\xE9\x8D\xB7",		"\xEE\xE6" => "\xE9\x8D\xBB",		"\xEE\xE7" => "\xE9\x8D\xA1",		"\xEE\xE8" => "\xE9\x8D\x9E",		"\xEE\xE9" => "\xE9\x8D\xA3",		"\xEE\xEA" => "\xE9\x8D\xA7",		"\xEE\xEB" => "\xE9\x8E\x80",		"\xEE\xEC" => "\xE9\x8D\x8E",		"\xEE\xED" => "\xE9\x8D\x99",		"\xEE\xEE" => "\xE9\x97\x87",		"\xEE\xEF" => "\xE9\x97\x80",		"\xEE\xF0" => "\xE9\x97\x89",		"\xEE\xF1" => "\xE9\x97\x83",		"\xEE\xF2" => "\xE9\x97\x85",		"\xEE\xF3" => "\xE9\x96\xB7",		"\xEE\xF4" => "\xE9\x9A\xAE",		"\xEE\xF5" => "\xE9\x9A\xB0",		"\xEE\xF6" => "\xE9\x9A\xAC",		"\xEE\xF7" => "\xE9\x9C\xA0",		"\xEE\xF8" => "\xE9\x9C\x9F",		"\xEE\xF9" => "\xE9\x9C\x98",		"\xEE\xFA" => "\xE9\x9C\x9D",		"\xEE\xFB" => "\xE9\x9C\x99",		"\xEE\xFC" => "\xE9\x9E\x9A",		"\xEE\xFD" => "\xE9\x9E\xA1",		"\xEE\xFE" => "\xE9\x9E\x9C",		"\xEF\x40" => "\xE9\x9E\x9E",		"\xEF\x41" => "\xE9\x9E\x9D",		"\xEF\x42" => "\xE9\x9F\x95",		"\xEF\x43" => "\xE9\x9F\x94",		"\xEF\x44" => "\xE9\x9F\xB1",		"\xEF\x45" => "\xE9\xA1\x81",		"\xEF\x46" => "\xE9\xA1\x84",		"\xEF\x47" => "\xE9\xA1\x8A",		"\xEF\x48" => "\xE9\xA1\x89",		"\xEF\x49" => "\xE9\xA1\x85",		"\xEF\x4A" => "\xE9\xA1\x83",		"\xEF\x4B" => "\xE9\xA4\xA5",		"\xEF\x4C" => "\xE9\xA4\xAB",		"\xEF\x4D" => "\xE9\xA4\xAC",		"\xEF\x4E" => "\xE9\xA4\xAA",		"\xEF\x4F" => "\xE9\xA4\xB3",		"\xEF\x50" => "\xE9\xA4\xB2",		"\xEF\x51" => "\xE9\xA4\xAF",		"\xEF\x52" => "\xE9\xA4\xAD",		"\xEF\x53" => "\xE9\xA4\xB1",		"\xEF\x54" => "\xE9\xA4\xB0",		"\xEF\x55" => "\xE9\xA6\x98",		"\xEF\x56" => "\xE9\xA6\xA3",		"\xEF\x57" => "\xE9\xA6\xA1",		"\xEF\x58" => "\xE9\xA8\x82",		"\xEF\x59" => "\xE9\xA7\xBA",		"\xEF\x5A" => "\xE9\xA7\xB4",		"\xEF\x5B" => "\xE9\xA7\xB7",		"\xEF\x5C" => "\xE9\xA7\xB9",		"\xEF\x5D" => "\xE9\xA7\xB8",		"\xEF\x5E" => "\xE9\xA7\xB6",		"\xEF\x5F" => "\xE9\xA7\xBB",		"\xEF\x60" => "\xE9\xA7\xBD",		"\xEF\x61" => "\xE9\xA7\xBE",		"\xEF\x62" => "\xE9\xA7\xBC",		"\xEF\x63" => "\xE9\xA8\x83",		"\xEF\x64" => "\xE9\xAA\xBE",		"\xEF\x65" => "\xE9\xAB\xBE",		"\xEF\x66" => "\xE9\xAB\xBD",		"\xEF\x67" => "\xE9\xAC\x81",		"\xEF\x68" => "\xE9\xAB\xBC",		"\xEF\x69" => "\xE9\xAD\x88",		"\xEF\x6A" => "\xE9\xAE\x9A",		"\xEF\x6B" => "\xE9\xAE\xA8",		"\xEF\x6C" => "\xE9\xAE\x9E",		"\xEF\x6D" => "\xE9\xAE\x9B",		"\xEF\x6E" => "\xE9\xAE\xA6",		"\xEF\x6F" => "\xE9\xAE\xA1",		"\xEF\x70" => "\xE9\xAE\xA5",		"\xEF\x71" => "\xE9\xAE\xA4",		"\xEF\x72" => "\xE9\xAE\x86",		"\xEF\x73" => "\xE9\xAE\xA2",		"\xEF\x74" => "\xE9\xAE\xA0",		"\xEF\x75" => "\xE9\xAE\xAF",		"\xEF\x76" => "\xE9\xB4\xB3",		"\xEF\x77" => "\xE9\xB5\x81",		"\xEF\x78" => "\xE9\xB5\xA7",		"\xEF\x79" => "\xE9\xB4\xB6",		"\xEF\x7A" => "\xE9\xB4\xAE",		"\xEF\x7B" => "\xE9\xB4\xAF",		"\xEF\x7C" => "\xE9\xB4\xB1",		"\xEF\x7D" => "\xE9\xB4\xB8",		"\xEF\x7E" => "\xE9\xB4\xB0",		"\xEF\xA1" => "\xE9\xB5\x85",		"\xEF\xA2" => "\xE9\xB5\x82",		"\xEF\xA3" => "\xE9\xB5\x83",		"\xEF\xA4" => "\xE9\xB4\xBE",		"\xEF\xA5" => "\xE9\xB4\xB7",		"\xEF\xA6" => "\xE9\xB5\x80",		"\xEF\xA7" => "\xE9\xB4\xBD",		"\xEF\xA8" => "\xE7\xBF\xB5",		"\xEF\xA9" => "\xE9\xB4\xAD",		"\xEF\xAA" => "\xE9\xBA\x8A",		"\xEF\xAB" => "\xE9\xBA\x89",		"\xEF\xAC" => "\xE9\xBA\x8D",		"\xEF\xAD" => "\xE9\xBA\xB0",		"\xEF\xAE" => "\xE9\xBB\x88",		"\xEF\xAF" => "\xE9\xBB\x9A",		"\xEF\xB0" => "\xE9\xBB\xBB",		"\xEF\xB1" => "\xE9\xBB\xBF",		"\xEF\xB2" => "\xE9\xBC\xA4",		"\xEF\xB3" => "\xE9\xBC\xA3",		"\xEF\xB4" => "\xE9\xBC\xA2",		"\xEF\xB5" => "\xE9\xBD\x94",		"\xEF\xB6" => "\xE9\xBE\xA0",		"\xEF\xB7" => "\xE5\x84\xB1",		"\xEF\xB8" => "\xE5\x84\xAD",		"\xEF\xB9" => "\xE5\x84\xAE",		"\xEF\xBA" => "\xE5\x9A\x98",		"\xEF\xBB" => "\xE5\x9A\x9C",		"\xEF\xBC" => "\xE5\x9A\x97",		"\xEF\xBD" => "\xE5\x9A\x9A",		"\xEF\xBE" => "\xE5\x9A\x9D",		"\xEF\xBF" => "\xE5\x9A\x99",		"\xEF\xC0" => "\xE5\xA5\xB0",		"\xEF\xC1" => "\xE5\xAC\xBC",		"\xEF\xC2" => "\xE5\xB1\xA9",		"\xEF\xC3" => "\xE5\xB1\xAA",		"\xEF\xC4" => "\xE5\xB7\x80",		"\xEF\xC5" => "\xE5\xB9\xAD",		"\xEF\xC6" => "\xE5\xB9\xAE",		"\xEF\xC7" => "\xE6\x87\x98",		"\xEF\xC8" => "\xE6\x87\x9F",		"\xEF\xC9" => "\xE6\x87\xAD",		"\xEF\xCA" => "\xE6\x87\xAE",		"\xEF\xCB" => "\xE6\x87\xB1",		"\xEF\xCC" => "\xE6\x87\xAA",		"\xEF\xCD" => "\xE6\x87\xB0",		"\xEF\xCE" => "\xE6\x87\xAB",		"\xEF\xCF" => "\xE6\x87\x96",		"\xEF\xD0" => "\xE6\x87\xA9",		"\xEF\xD1" => "\xE6\x93\xBF",		"\xEF\xD2" => "\xE6\x94\x84",		"\xEF\xD3" => "\xE6\x93\xBD",		"\xEF\xD4" => "\xE6\x93\xB8",		"\xEF\xD5" => "\xE6\x94\x81",		"\xEF\xD6" => "\xE6\x94\x83",		"\xEF\xD7" => "\xE6\x93\xBC",		"\xEF\xD8" => "\xE6\x96\x94",		"\xEF\xD9" => "\xE6\x97\x9B",		"\xEF\xDA" => "\xE6\x9B\x9A",		"\xEF\xDB" => "\xE6\x9B\x9B",		"\xEF\xDC" => "\xE6\x9B\x98",		"\xEF\xDD" => "\xE6\xAB\x85",		"\xEF\xDE" => "\xE6\xAA\xB9",		"\xEF\xDF" => "\xE6\xAA\xBD",		"\xEF\xE0" => "\xE6\xAB\xA1",		"\xEF\xE1" => "\xE6\xAB\x86",		"\xEF\xE2" => "\xE6\xAA\xBA",		"\xEF\xE3" => "\xE6\xAA\xB6",		"\xEF\xE4" => "\xE6\xAA\xB7",		"\xEF\xE5" => "\xE6\xAB\x87",		"\xEF\xE6" => "\xE6\xAA\xB4",		"\xEF\xE7" => "\xE6\xAA\xAD",		"\xEF\xE8" => "\xE6\xAD\x9E",		"\xEF\xE9" => "\xE6\xAF\x89",		"\xEF\xEA" => "\xE6\xB0\x8B",		"\xEF\xEB" => "\xE7\x80\x87",		"\xEF\xEC" => "\xE7\x80\x8C",		"\xEF\xED" => "\xE7\x80\x8D",		"\xEF\xEE" => "\xE7\x80\x81",		"\xEF\xEF" => "\xE7\x80\x85",		"\xEF\xF0" => "\xE7\x80\x94",		"\xEF\xF1" => "\xE7\x80\x8E",		"\xEF\xF2" => "\xE6\xBF\xBF",		"\xEF\xF3" => "\xE7\x80\x80",		"\xEF\xF4" => "\xE6\xBF\xBB",		"\xEF\xF5" => "\xE7\x80\xA6",		"\xEF\xF6" => "\xE6\xBF\xBC",		"\xEF\xF7" => "\xE6\xBF\xB7",		"\xEF\xF8" => "\xE7\x80\x8A",		"\xEF\xF9" => "\xE7\x88\x81",		"\xEF\xFA" => "\xE7\x87\xBF",		"\xEF\xFB" => "\xE7\x87\xB9",		"\xEF\xFC" => "\xE7\x88\x83",		"\xEF\xFD" => "\xE7\x87\xBD",		"\xEF\xFE" => "\xE7\x8D\xB6",		"\xF0\x40" => "\xE7\x92\xB8",		"\xF0\x41" => "\xE7\x93\x80",		"\xF0\x42" => "\xE7\x92\xB5",		"\xF0\x43" => "\xE7\x93\x81",		"\xF0\x44" => "\xE7\x92\xBE",		"\xF0\x45" => "\xE7\x92\xB6",		"\xF0\x46" => "\xE7\x92\xBB",		"\xF0\x47" => "\xE7\x93\x82",		"\xF0\x48" => "\xE7\x94\x94",		"\xF0\x49" => "\xE7\x94\x93",		"\xF0\x4A" => "\xE7\x99\x9C",		"\xF0\x4B" => "\xE7\x99\xA4",		"\xF0\x4C" => "\xE7\x99\x99",		"\xF0\x4D" => "\xE7\x99\x90",		"\xF0\x4E" => "\xE7\x99\x93",		"\xF0\x4F" => "\xE7\x99\x97",		"\xF0\x50" => "\xE7\x99\x9A",		"\xF0\x51" => "\xE7\x9A\xA6",		"\xF0\x52" => "\xE7\x9A\xBD",		"\xF0\x53" => "\xE7\x9B\xAC",		"\xF0\x54" => "\xE7\x9F\x82",		"\xF0\x55" => "\xE7\x9E\xBA",		"\xF0\x56" => "\xE7\xA3\xBF",		"\xF0\x57" => "\xE7\xA4\x8C",		"\xF0\x58" => "\xE7\xA4\x93",		"\xF0\x59" => "\xE7\xA4\x94",		"\xF0\x5A" => "\xE7\xA4\x89",		"\xF0\x5B" => "\xE7\xA4\x90",		"\xF0\x5C" => "\xE7\xA4\x92",		"\xF0\x5D" => "\xE7\xA4\x91",		"\xF0\x5E" => "\xE7\xA6\xAD",		"\xF0\x5F" => "\xE7\xA6\xAC",		"\xF0\x60" => "\xE7\xA9\x9F",		"\xF0\x61" => "\xE7\xB0\x9C",		"\xF0\x62" => "\xE7\xB0\xA9",		"\xF0\x63" => "\xE7\xB0\x99",		"\xF0\x64" => "\xE7\xB0\xA0",		"\xF0\x65" => "\xE7\xB0\x9F",		"\xF0\x66" => "\xE7\xB0\xAD",		"\xF0\x67" => "\xE7\xB0\x9D",		"\xF0\x68" => "\xE7\xB0\xA6",		"\xF0\x69" => "\xE7\xB0\xA8",		"\xF0\x6A" => "\xE7\xB0\xA2",		"\xF0\x6B" => "\xE7\xB0\xA5",		"\xF0\x6C" => "\xE7\xB0\xB0",		"\xF0\x6D" => "\xE7\xB9\x9C",		"\xF0\x6E" => "\xE7\xB9\x90",		"\xF0\x6F" => "\xE7\xB9\x96",		"\xF0\x70" => "\xE7\xB9\xA3",		"\xF0\x71" => "\xE7\xB9\x98",		"\xF0\x72" => "\xE7\xB9\xA2",		"\xF0\x73" => "\xE7\xB9\x9F",		"\xF0\x74" => "\xE7\xB9\x91",		"\xF0\x75" => "\xE7\xB9\xA0",		"\xF0\x76" => "\xE7\xB9\x97",		"\xF0\x77" => "\xE7\xB9\x93",		"\xF0\x78" => "\xE7\xBE\xB5",		"\xF0\x79" => "\xE7\xBE\xB3",		"\xF0\x7A" => "\xE7\xBF\xB7",		"\xF0\x7B" => "\xE7\xBF\xB8",		"\xF0\x7C" => "\xE8\x81\xB5",		"\xF0\x7D" => "\xE8\x87\x91",		"\xF0\x7E" => "\xE8\x87\x92",		"\xF0\xA1" => "\xE8\x87\x90",		"\xF0\xA2" => "\xE8\x89\x9F",		"\xF0\xA3" => "\xE8\x89\x9E",		"\xF0\xA4" => "\xE8\x96\xB4",		"\xF0\xA5" => "\xE8\x97\x86",		"\xF0\xA6" => "\xE8\x97\x80",		"\xF0\xA7" => "\xE8\x97\x83",		"\xF0\xA8" => "\xE8\x97\x82",		"\xF0\xA9" => "\xE8\x96\xB3",		"\xF0\xAA" => "\xE8\x96\xB5",		"\xF0\xAB" => "\xE8\x96\xBD",		"\xF0\xAC" => "\xE8\x97\x87",		"\xF0\xAD" => "\xE8\x97\x84",		"\xF0\xAE" => "\xE8\x96\xBF",		"\xF0\xAF" => "\xE8\x97\x8B",		"\xF0\xB0" => "\xE8\x97\x8E",		"\xF0\xB1" => "\xE8\x97\x88",		"\xF0\xB2" => "\xE8\x97\x85",		"\xF0\xB3" => "\xE8\x96\xB1",		"\xF0\xB4" => "\xE8\x96\xB6",		"\xF0\xB5" => "\xE8\x97\x92",		"\xF0\xB6" => "\xE8\x98\xA4",		"\xF0\xB7" => "\xE8\x96\xB8",		"\xF0\xB8" => "\xE8\x96\xB7",		"\xF0\xB9" => "\xE8\x96\xBE",		"\xF0\xBA" => "\xE8\x99\xA9",		"\xF0\xBB" => "\xE8\x9F\xA7",		"\xF0\xBC" => "\xE8\x9F\xA6",		"\xF0\xBD" => "\xE8\x9F\xA2",		"\xF0\xBE" => "\xE8\x9F\x9B",		"\xF0\xBF" => "\xE8\x9F\xAB",		"\xF0\xC0" => "\xE8\x9F\xAA",		"\xF0\xC1" => "\xE8\x9F\xA5",		"\xF0\xC2" => "\xE8\x9F\x9F",		"\xF0\xC3" => "\xE8\x9F\xB3",		"\xF0\xC4" => "\xE8\x9F\xA4",		"\xF0\xC5" => "\xE8\x9F\x94",		"\xF0\xC6" => "\xE8\x9F\x9C",		"\xF0\xC7" => "\xE8\x9F\x93",		"\xF0\xC8" => "\xE8\x9F\xAD",		"\xF0\xC9" => "\xE8\x9F\x98",		"\xF0\xCA" => "\xE8\x9F\xA3",		"\xF0\xCB" => "\xE8\x9E\xA4",		"\xF0\xCC" => "\xE8\x9F\x97",		"\xF0\xCD" => "\xE8\x9F\x99",		"\xF0\xCE" => "\xE8\xA0\x81",		"\xF0\xCF" => "\xE8\x9F\xB4",		"\xF0\xD0" => "\xE8\x9F\xA8",		"\xF0\xD1" => "\xE8\x9F\x9D",		"\xF0\xD2" => "\xE8\xA5\x93",		"\xF0\xD3" => "\xE8\xA5\x8B",		"\xF0\xD4" => "\xE8\xA5\x8F",		"\xF0\xD5" => "\xE8\xA5\x8C",		"\xF0\xD6" => "\xE8\xA5\x86",		"\xF0\xD7" => "\xE8\xA5\x90",		"\xF0\xD8" => "\xE8\xA5\x91",		"\xF0\xD9" => "\xE8\xA5\x89",		"\xF0\xDA" => "\xE8\xAC\xAA",		"\xF0\xDB" => "\xE8\xAC\xA7",		"\xF0\xDC" => "\xE8\xAC\xA3",		"\xF0\xDD" => "\xE8\xAC\xB3",		"\xF0\xDE" => "\xE8\xAC\xB0",		"\xF0\xDF" => "\xE8\xAC\xB5",		"\xF0\xE0" => "\xE8\xAD\x87",		"\xF0\xE1" => "\xE8\xAC\xAF",		"\xF0\xE2" => "\xE8\xAC\xBC",		"\xF0\xE3" => "\xE8\xAC\xBE",		"\xF0\xE4" => "\xE8\xAC\xB1",		"\xF0\xE5" => "\xE8\xAC\xA5",		"\xF0\xE6" => "\xE8\xAC\xB7",		"\xF0\xE7" => "\xE8\xAC\xA6",		"\xF0\xE8" => "\xE8\xAC\xB6",		"\xF0\xE9" => "\xE8\xAC\xAE",		"\xF0\xEA" => "\xE8\xAC\xA4",		"\xF0\xEB" => "\xE8\xAC\xBB",		"\xF0\xEC" => "\xE8\xAC\xBD",		"\xF0\xED" => "\xE8\xAC\xBA",		"\xF0\xEE" => "\xE8\xB1\x82",		"\xF0\xEF" => "\xE8\xB1\xB5",		"\xF0\xF0" => "\xE8\xB2\x99",		"\xF0\xF1" => "\xE8\xB2\x98",		"\xF0\xF2" => "\xE8\xB2\x97",		"\xF0\xF3" => "\xE8\xB3\xBE",		"\xF0\xF4" => "\xE8\xB4\x84",		"\xF0\xF5" => "\xE8\xB4\x82",		"\xF0\xF6" => "\xE8\xB4\x80",		"\xF0\xF7" => "\xE8\xB9\x9C",		"\xF0\xF8" => "\xE8\xB9\xA2",		"\xF0\xF9" => "\xE8\xB9\xA0",		"\xF0\xFA" => "\xE8\xB9\x97",		"\xF0\xFB" => "\xE8\xB9\x96",		"\xF0\xFC" => "\xE8\xB9\x9E",		"\xF0\xFD" => "\xE8\xB9\xA5",		"\xF0\xFE" => "\xE8\xB9\xA7",		"\xF1\x40" => "\xE8\xB9\x9B",		"\xF1\x41" => "\xE8\xB9\x9A",		"\xF1\x42" => "\xE8\xB9\xA1",		"\xF1\x43" => "\xE8\xB9\x9D",		"\xF1\x44" => "\xE8\xB9\xA9",		"\xF1\x45" => "\xE8\xB9\x94",		"\xF1\x46" => "\xE8\xBD\x86",		"\xF1\x47" => "\xE8\xBD\x87",		"\xF1\x48" => "\xE8\xBD\x88",		"\xF1\x49" => "\xE8\xBD\x8B",		"\xF1\x4A" => "\xE9\x84\xA8",		"\xF1\x4B" => "\xE9\x84\xBA",		"\xF1\x4C" => "\xE9\x84\xBB",		"\xF1\x4D" => "\xE9\x84\xBE",		"\xF1\x4E" => "\xE9\x86\xA8",		"\xF1\x4F" => "\xE9\x86\xA5",		"\xF1\x50" => "\xE9\x86\xA7",		"\xF1\x51" => "\xE9\x86\xAF",		"\xF1\x52" => "\xE9\x86\xAA",		"\xF1\x53" => "\xE9\x8E\xB5",		"\xF1\x54" => "\xE9\x8E\x8C",		"\xF1\x55" => "\xE9\x8E\x92",		"\xF1\x56" => "\xE9\x8E\xB7",		"\xF1\x57" => "\xE9\x8E\x9B",		"\xF1\x58" => "\xE9\x8E\x9D",		"\xF1\x59" => "\xE9\x8E\x89",		"\xF1\x5A" => "\xE9\x8E\xA7",		"\xF1\x5B" => "\xE9\x8E\x8E",		"\xF1\x5C" => "\xE9\x8E\xAA",		"\xF1\x5D" => "\xE9\x8E\x9E",		"\xF1\x5E" => "\xE9\x8E\xA6",		"\xF1\x5F" => "\xE9\x8E\x95",		"\xF1\x60" => "\xE9\x8E\x88",		"\xF1\x61" => "\xE9\x8E\x99",		"\xF1\x62" => "\xE9\x8E\x9F",		"\xF1\x63" => "\xE9\x8E\x8D",		"\xF1\x64" => "\xE9\x8E\xB1",		"\xF1\x65" => "\xE9\x8E\x91",		"\xF1\x66" => "\xE9\x8E\xB2",		"\xF1\x67" => "\xE9\x8E\xA4",		"\xF1\x68" => "\xE9\x8E\xA8",		"\xF1\x69" => "\xE9\x8E\xB4",		"\xF1\x6A" => "\xE9\x8E\xA3",		"\xF1\x6B" => "\xE9\x8E\xA5",		"\xF1\x6C" => "\xE9\x97\x92",		"\xF1\x6D" => "\xE9\x97\x93",		"\xF1\x6E" => "\xE9\x97\x91",		"\xF1\x6F" => "\xE9\x9A\xB3",		"\xF1\x70" => "\xE9\x9B\x97",		"\xF1\x71" => "\xE9\x9B\x9A",		"\xF1\x72" => "\xE5\xB7\x82",		"\xF1\x73" => "\xE9\x9B\x9F",		"\xF1\x74" => "\xE9\x9B\x98",		"\xF1\x75" => "\xE9\x9B\x9D",		"\xF1\x76" => "\xE9\x9C\xA3",		"\xF1\x77" => "\xE9\x9C\xA2",		"\xF1\x78" => "\xE9\x9C\xA5",		"\xF1\x79" => "\xE9\x9E\xAC",		"\xF1\x7A" => "\xE9\x9E\xAE",		"\xF1\x7B" => "\xE9\x9E\xA8",		"\xF1\x7C" => "\xE9\x9E\xAB",		"\xF1\x7D" => "\xE9\x9E\xA4",		"\xF1\x7E" => "\xE9\x9E\xAA",		"\xF1\xA1" => "\xE9\x9E\xA2",		"\xF1\xA2" => "\xE9\x9E\xA5",		"\xF1\xA3" => "\xE9\x9F\x97",		"\xF1\xA4" => "\xE9\x9F\x99",		"\xF1\xA5" => "\xE9\x9F\x96",		"\xF1\xA6" => "\xE9\x9F\x98",		"\xF1\xA7" => "\xE9\x9F\xBA",		"\xF1\xA8" => "\xE9\xA1\x90",		"\xF1\xA9" => "\xE9\xA1\x91",		"\xF1\xAA" => "\xE9\xA1\x92",		"\xF1\xAB" => "\xE9\xA2\xB8",		"\xF1\xAC" => "\xE9\xA5\x81",		"\xF1\xAD" => "\xE9\xA4\xBC",		"\xF1\xAE" => "\xE9\xA4\xBA",		"\xF1\xAF" => "\xE9\xA8\x8F",		"\xF1\xB0" => "\xE9\xA8\x8B",		"\xF1\xB1" => "\xE9\xA8\x89",		"\xF1\xB2" => "\xE9\xA8\x8D",		"\xF1\xB3" => "\xE9\xA8\x84",		"\xF1\xB4" => "\xE9\xA8\x91",		"\xF1\xB5" => "\xE9\xA8\x8A",		"\xF1\xB6" => "\xE9\xA8\x85",		"\xF1\xB7" => "\xE9\xA8\x87",		"\xF1\xB8" => "\xE9\xA8\x86",		"\xF1\xB9" => "\xE9\xAB\x80",		"\xF1\xBA" => "\xE9\xAB\x9C",		"\xF1\xBB" => "\xE9\xAC\x88",		"\xF1\xBC" => "\xE9\xAC\x84",		"\xF1\xBD" => "\xE9\xAC\x85",		"\xF1\xBE" => "\xE9\xAC\xA9",		"\xF1\xBF" => "\xE9\xAC\xB5",		"\xF1\xC0" => "\xE9\xAD\x8A",		"\xF1\xC1" => "\xE9\xAD\x8C",		"\xF1\xC2" => "\xE9\xAD\x8B",		"\xF1\xC3" => "\xE9\xAF\x87",		"\xF1\xC4" => "\xE9\xAF\x86",		"\xF1\xC5" => "\xE9\xAF\x83",		"\xF1\xC6" => "\xE9\xAE\xBF",		"\xF1\xC7" => "\xE9\xAF\x81",		"\xF1\xC8" => "\xE9\xAE\xB5",		"\xF1\xC9" => "\xE9\xAE\xB8",		"\xF1\xCA" => "\xE9\xAF\x93",		"\xF1\xCB" => "\xE9\xAE\xB6",		"\xF1\xCC" => "\xE9\xAF\x84",		"\xF1\xCD" => "\xE9\xAE\xB9",		"\xF1\xCE" => "\xE9\xAE\xBD",		"\xF1\xCF" => "\xE9\xB5\x9C",		"\xF1\xD0" => "\xE9\xB5\x93",		"\xF1\xD1" => "\xE9\xB5\x8F",		"\xF1\xD2" => "\xE9\xB5\x8A",		"\xF1\xD3" => "\xE9\xB5\x9B",		"\xF1\xD4" => "\xE9\xB5\x8B",		"\xF1\xD5" => "\xE9\xB5\x99",		"\xF1\xD6" => "\xE9\xB5\x96",		"\xF1\xD7" => "\xE9\xB5\x8C",		"\xF1\xD8" => "\xE9\xB5\x97",		"\xF1\xD9" => "\xE9\xB5\x92",		"\xF1\xDA" => "\xE9\xB5\x94",		"\xF1\xDB" => "\xE9\xB5\x9F",		"\xF1\xDC" => "\xE9\xB5\x98",		"\xF1\xDD" => "\xE9\xB5\x9A",		"\xF1\xDE" => "\xE9\xBA\x8E",		"\xF1\xDF" => "\xE9\xBA\x8C",		"\xF1\xE0" => "\xE9\xBB\x9F",		"\xF1\xE1" => "\xE9\xBC\x81",		"\xF1\xE2" => "\xE9\xBC\x80",		"\xF1\xE3" => "\xE9\xBC\x96",		"\xF1\xE4" => "\xE9\xBC\xA5",		"\xF1\xE5" => "\xE9\xBC\xAB",		"\xF1\xE6" => "\xE9\xBC\xAA",		"\xF1\xE7" => "\xE9\xBC\xA9",		"\xF1\xE8" => "\xE9\xBC\xA8",		"\xF1\xE9" => "\xE9\xBD\x8C",		"\xF1\xEA" => "\xE9\xBD\x95",		"\xF1\xEB" => "\xE5\x84\xB4",		"\xF1\xEC" => "\xE5\x84\xB5",		"\xF1\xED" => "\xE5\x8A\x96",		"\xF1\xEE" => "\xE5\x8B\xB7",		"\xF1\xEF" => "\xE5\x8E\xB4",		"\xF1\xF0" => "\xE5\x9A\xAB",		"\xF1\xF1" => "\xE5\x9A\xAD",		"\xF1\xF2" => "\xE5\x9A\xA6",		"\xF1\xF3" => "\xE5\x9A\xA7",		"\xF1\xF4" => "\xE5\x9A\xAA",		"\xF1\xF5" => "\xE5\x9A\xAC",		"\xF1\xF6" => "\xE5\xA3\x9A",		"\xF1\xF7" => "\xE5\xA3\x9D",		"\xF1\xF8" => "\xE5\xA3\x9B",		"\xF1\xF9" => "\xE5\xA4\x92",		"\xF1\xFA" => "\xE5\xAC\xBD",		"\xF1\xFB" => "\xE5\xAC\xBE",		"\xF1\xFC" => "\xE5\xAC\xBF",		"\xF1\xFD" => "\xE5\xB7\x83",		"\xF1\xFE" => "\xE5\xB9\xB0",		"\xF2\x40" => "\xE5\xBE\xBF",		"\xF2\x41" => "\xE6\x87\xBB",		"\xF2\x42" => "\xE6\x94\x87",		"\xF2\x43" => "\xE6\x94\x90",		"\xF2\x44" => "\xE6\x94\x8D",		"\xF2\x45" => "\xE6\x94\x89",		"\xF2\x46" => "\xE6\x94\x8C",		"\xF2\x47" => "\xE6\x94\x8E",		"\xF2\x48" => "\xE6\x96\x84",		"\xF2\x49" => "\xE6\x97\x9E",		"\xF2\x4A" => "\xE6\x97\x9D",		"\xF2\x4B" => "\xE6\x9B\x9E",		"\xF2\x4C" => "\xE6\xAB\xA7",		"\xF2\x4D" => "\xE6\xAB\xA0",		"\xF2\x4E" => "\xE6\xAB\x8C",		"\xF2\x4F" => "\xE6\xAB\x91",		"\xF2\x50" => "\xE6\xAB\x99",		"\xF2\x51" => "\xE6\xAB\x8B",		"\xF2\x52" => "\xE6\xAB\x9F",		"\xF2\x53" => "\xE6\xAB\x9C",		"\xF2\x54" => "\xE6\xAB\x90",		"\xF2\x55" => "\xE6\xAB\xAB",		"\xF2\x56" => "\xE6\xAB\x8F",		"\xF2\x57" => "\xE6\xAB\x8D",		"\xF2\x58" => "\xE6\xAB\x9E",		"\xF2\x59" => "\xE6\xAD\xA0",		"\xF2\x5A" => "\xE6\xAE\xB0",		"\xF2\x5B" => "\xE6\xB0\x8C",		"\xF2\x5C" => "\xE7\x80\x99",		"\xF2\x5D" => "\xE7\x80\xA7",		"\xF2\x5E" => "\xE7\x80\xA0",		"\xF2\x5F" => "\xE7\x80\x96",		"\xF2\x60" => "\xE7\x80\xAB",		"\xF2\x61" => "\xE7\x80\xA1",		"\xF2\x62" => "\xE7\x80\xA2",		"\xF2\x63" => "\xE7\x80\xA3",		"\xF2\x64" => "\xE7\x80\xA9",		"\xF2\x65" => "\xE7\x80\x97",		"\xF2\x66" => "\xE7\x80\xA4",		"\xF2\x67" => "\xE7\x80\x9C",		"\xF2\x68" => "\xE7\x80\xAA",		"\xF2\x69" => "\xE7\x88\x8C",		"\xF2\x6A" => "\xE7\x88\x8A",		"\xF2\x6B" => "\xE7\x88\x87",		"\xF2\x6C" => "\xE7\x88\x82",		"\xF2\x6D" => "\xE7\x88\x85",		"\xF2\x6E" => "\xE7\x8A\xA5",		"\xF2\x6F" => "\xE7\x8A\xA6",		"\xF2\x70" => "\xE7\x8A\xA4",		"\xF2\x71" => "\xE7\x8A\xA3",		"\xF2\x72" => "\xE7\x8A\xA1",		"\xF2\x73" => "\xE7\x93\x8B",		"\xF2\x74" => "\xE7\x93\x85",		"\xF2\x75" => "\xE7\x92\xB7",		"\xF2\x76" => "\xE7\x93\x83",		"\xF2\x77" => "\xE7\x94\x96",		"\xF2\x78" => "\xE7\x99\xA0",		"\xF2\x79" => "\xE7\x9F\x89",		"\xF2\x7A" => "\xE7\x9F\x8A",		"\xF2\x7B" => "\xE7\x9F\x84",		"\xF2\x7C" => "\xE7\x9F\xB1",		"\xF2\x7D" => "\xE7\xA4\x9D",		"\xF2\x7E" => "\xE7\xA4\x9B",		"\xF2\xA1" => "\xE7\xA4\xA1",		"\xF2\xA2" => "\xE7\xA4\x9C",		"\xF2\xA3" => "\xE7\xA4\x97",		"\xF2\xA4" => "\xE7\xA4\x9E",		"\xF2\xA5" => "\xE7\xA6\xB0",		"\xF2\xA6" => "\xE7\xA9\xA7",		"\xF2\xA7" => "\xE7\xA9\xA8",		"\xF2\xA8" => "\xE7\xB0\xB3",		"\xF2\xA9" => "\xE7\xB0\xBC",		"\xF2\xAA" => "\xE7\xB0\xB9",		"\xF2\xAB" => "\xE7\xB0\xAC",		"\xF2\xAC" => "\xE7\xB0\xBB",		"\xF2\xAD" => "\xE7\xB3\xAC",		"\xF2\xAE" => "\xE7\xB3\xAA",		"\xF2\xAF" => "\xE7\xB9\xB6",		"\xF2\xB0" => "\xE7\xB9\xB5",		"\xF2\xB1" => "\xE7\xB9\xB8",		"\xF2\xB2" => "\xE7\xB9\xB0",		"\xF2\xB3" => "\xE7\xB9\xB7",		"\xF2\xB4" => "\xE7\xB9\xAF",		"\xF2\xB5" => "\xE7\xB9\xBA",		"\xF2\xB6" => "\xE7\xB9\xB2",		"\xF2\xB7" => "\xE7\xB9\xB4",		"\xF2\xB8" => "\xE7\xB9\xA8",		"\xF2\xB9" => "\xE7\xBD\x8B",		"\xF2\xBA" => "\xE7\xBD\x8A",		"\xF2\xBB" => "\xE7\xBE\x83",		"\xF2\xBC" => "\xE7\xBE\x86",		"\xF2\xBD" => "\xE7\xBE\xB7",		"\xF2\xBE" => "\xE7\xBF\xBD",		"\xF2\xBF" => "\xE7\xBF\xBE",		"\xF2\xC0" => "\xE8\x81\xB8",		"\xF2\xC1" => "\xE8\x87\x97",		"\xF2\xC2" => "\xE8\x87\x95",		"\xF2\xC3" => "\xE8\x89\xA4",		"\xF2\xC4" => "\xE8\x89\xA1",		"\xF2\xC5" => "\xE8\x89\xA3",		"\xF2\xC6" => "\xE8\x97\xAB",		"\xF2\xC7" => "\xE8\x97\xB1",		"\xF2\xC8" => "\xE8\x97\xAD",		"\xF2\xC9" => "\xE8\x97\x99",		"\xF2\xCA" => "\xE8\x97\xA1",		"\xF2\xCB" => "\xE8\x97\xA8",		"\xF2\xCC" => "\xE8\x97\x9A",		"\xF2\xCD" => "\xE8\x97\x97",		"\xF2\xCE" => "\xE8\x97\xAC",		"\xF2\xCF" => "\xE8\x97\xB2",		"\xF2\xD0" => "\xE8\x97\xB8",		"\xF2\xD1" => "\xE8\x97\x98",		"\xF2\xD2" => "\xE8\x97\x9F",		"\xF2\xD3" => "\xE8\x97\xA3",		"\xF2\xD4" => "\xE8\x97\x9C",		"\xF2\xD5" => "\xE8\x97\x91",		"\xF2\xD6" => "\xE8\x97\xB0",		"\xF2\xD7" => "\xE8\x97\xA6",		"\xF2\xD8" => "\xE8\x97\xAF",		"\xF2\xD9" => "\xE8\x97\x9E",		"\xF2\xDA" => "\xE8\x97\xA2",		"\xF2\xDB" => "\xE8\xA0\x80",		"\xF2\xDC" => "\xE8\x9F\xBA",		"\xF2\xDD" => "\xE8\xA0\x83",		"\xF2\xDE" => "\xE8\x9F\xB6",		"\xF2\xDF" => "\xE8\x9F\xB7",		"\xF2\xE0" => "\xE8\xA0\x89",		"\xF2\xE1" => "\xE8\xA0\x8C",		"\xF2\xE2" => "\xE8\xA0\x8B",		"\xF2\xE3" => "\xE8\xA0\x86",		"\xF2\xE4" => "\xE8\x9F\xBC",		"\xF2\xE5" => "\xE8\xA0\x88",		"\xF2\xE6" => "\xE8\x9F\xBF",		"\xF2\xE7" => "\xE8\xA0\x8A",		"\xF2\xE8" => "\xE8\xA0\x82",		"\xF2\xE9" => "\xE8\xA5\xA2",		"\xF2\xEA" => "\xE8\xA5\x9A",		"\xF2\xEB" => "\xE8\xA5\x9B",		"\xF2\xEC" => "\xE8\xA5\x97",		"\xF2\xED" => "\xE8\xA5\xA1",		"\xF2\xEE" => "\xE8\xA5\x9C",		"\xF2\xEF" => "\xE8\xA5\x98",		"\xF2\xF0" => "\xE8\xA5\x9D",		"\xF2\xF1" => "\xE8\xA5\x99",		"\xF2\xF2" => "\xE8\xA6\x88",		"\xF2\xF3" => "\xE8\xA6\xB7",		"\xF2\xF4" => "\xE8\xA6\xB6",		"\xF2\xF5" => "\xE8\xA7\xB6",		"\xF2\xF6" => "\xE8\xAD\x90",		"\xF2\xF7" => "\xE8\xAD\x88",		"\xF2\xF8" => "\xE8\xAD\x8A",		"\xF2\xF9" => "\xE8\xAD\x80",		"\xF2\xFA" => "\xE8\xAD\x93",		"\xF2\xFB" => "\xE8\xAD\x96",		"\xF2\xFC" => "\xE8\xAD\x94",		"\xF2\xFD" => "\xE8\xAD\x8B",		"\xF2\xFE" => "\xE8\xAD\x95",		"\xF3\x40" => "\xE8\xAD\x91",		"\xF3\x41" => "\xE8\xAD\x82",		"\xF3\x42" => "\xE8\xAD\x92",		"\xF3\x43" => "\xE8\xAD\x97",		"\xF3\x44" => "\xE8\xB1\x83",		"\xF3\x45" => "\xE8\xB1\xB7",		"\xF3\x46" => "\xE8\xB1\xB6",		"\xF3\x47" => "\xE8\xB2\x9A",		"\xF3\x48" => "\xE8\xB4\x86",		"\xF3\x49" => "\xE8\xB4\x87",		"\xF3\x4A" => "\xE8\xB4\x89",		"\xF3\x4B" => "\xE8\xB6\xAC",		"\xF3\x4C" => "\xE8\xB6\xAA",		"\xF3\x4D" => "\xE8\xB6\xAD",		"\xF3\x4E" => "\xE8\xB6\xAB",		"\xF3\x4F" => "\xE8\xB9\xAD",		"\xF3\x50" => "\xE8\xB9\xB8",		"\xF3\x51" => "\xE8\xB9\xB3",		"\xF3\x52" => "\xE8\xB9\xAA",		"\xF3\x53" => "\xE8\xB9\xAF",		"\xF3\x54" => "\xE8\xB9\xBB",		"\xF3\x55" => "\xE8\xBB\x82",		"\xF3\x56" => "\xE8\xBD\x92",		"\xF3\x57" => "\xE8\xBD\x91",		"\xF3\x58" => "\xE8\xBD\x8F",		"\xF3\x59" => "\xE8\xBD\x90",		"\xF3\x5A" => "\xE8\xBD\x93",		"\xF3\x5B" => "\xE8\xBE\xB4",		"\xF3\x5C" => "\xE9\x85\x80",		"\xF3\x5D" => "\xE9\x84\xBF",		"\xF3\x5E" => "\xE9\x86\xB0",		"\xF3\x5F" => "\xE9\x86\xAD",		"\xF3\x60" => "\xE9\x8F\x9E",		"\xF3\x61" => "\xE9\x8F\x87",		"\xF3\x62" => "\xE9\x8F\x8F",		"\xF3\x63" => "\xE9\x8F\x82",		"\xF3\x64" => "\xE9\x8F\x9A",		"\xF3\x65" => "\xE9\x8F\x90",		"\xF3\x66" => "\xE9\x8F\xB9",		"\xF3\x67" => "\xE9\x8F\xAC",		"\xF3\x68" => "\xE9\x8F\x8C",		"\xF3\x69" => "\xE9\x8F\x99",		"\xF3\x6A" => "\xE9\x8E\xA9",		"\xF3\x6B" => "\xE9\x8F\xA6",		"\xF3\x6C" => "\xE9\x8F\x8A",		"\xF3\x6D" => "\xE9\x8F\x94",		"\xF3\x6E" => "\xE9\x8F\xAE",		"\xF3\x6F" => "\xE9\x8F\xA3",		"\xF3\x70" => "\xE9\x8F\x95",		"\xF3\x71" => "\xE9\x8F\x84",		"\xF3\x72" => "\xE9\x8F\x8E",		"\xF3\x73" => "\xE9\x8F\x80",		"\xF3\x74" => "\xE9\x8F\x92",		"\xF3\x75" => "\xE9\x8F\xA7",		"\xF3\x76" => "\xE9\x95\xBD",		"\xF3\x77" => "\xE9\x97\x9A",		"\xF3\x78" => "\xE9\x97\x9B",		"\xF3\x79" => "\xE9\x9B\xA1",		"\xF3\x7A" => "\xE9\x9C\xA9",		"\xF3\x7B" => "\xE9\x9C\xAB",		"\xF3\x7C" => "\xE9\x9C\xAC",		"\xF3\x7D" => "\xE9\x9C\xA8",		"\xF3\x7E" => "\xE9\x9C\xA6",		"\xF3\xA1" => "\xE9\x9E\xB3",		"\xF3\xA2" => "\xE9\x9E\xB7",		"\xF3\xA3" => "\xE9\x9E\xB6",		"\xF3\xA4" => "\xE9\x9F\x9D",		"\xF3\xA5" => "\xE9\x9F\x9E",		"\xF3\xA6" => "\xE9\x9F\x9F",		"\xF3\xA7" => "\xE9\xA1\x9C",		"\xF3\xA8" => "\xE9\xA1\x99",		"\xF3\xA9" => "\xE9\xA1\x9D",		"\xF3\xAA" => "\xE9\xA1\x97",		"\xF3\xAB" => "\xE9\xA2\xBF",		"\xF3\xAC" => "\xE9\xA2\xBD",		"\xF3\xAD" => "\xE9\xA2\xBB",		"\xF3\xAE" => "\xE9\xA2\xBE",		"\xF3\xAF" => "\xE9\xA5\x88",		"\xF3\xB0" => "\xE9\xA5\x87",		"\xF3\xB1" => "\xE9\xA5\x83",		"\xF3\xB2" => "\xE9\xA6\xA6",		"\xF3\xB3" => "\xE9\xA6\xA7",		"\xF3\xB4" => "\xE9\xA8\x9A",		"\xF3\xB5" => "\xE9\xA8\x95",		"\xF3\xB6" => "\xE9\xA8\xA5",		"\xF3\xB7" => "\xE9\xA8\x9D",		"\xF3\xB8" => "\xE9\xA8\xA4",		"\xF3\xB9" => "\xE9\xA8\x9B",		"\xF3\xBA" => "\xE9\xA8\xA2",		"\xF3\xBB" => "\xE9\xA8\xA0",		"\xF3\xBC" => "\xE9\xA8\xA7",		"\xF3\xBD" => "\xE9\xA8\xA3",		"\xF3\xBE" => "\xE9\xA8\x9E",		"\xF3\xBF" => "\xE9\xA8\x9C",		"\xF3\xC0" => "\xE9\xA8\x94",		"\xF3\xC1" => "\xE9\xAB\x82",		"\xF3\xC2" => "\xE9\xAC\x8B",		"\xF3\xC3" => "\xE9\xAC\x8A",		"\xF3\xC4" => "\xE9\xAC\x8E",		"\xF3\xC5" => "\xE9\xAC\x8C",		"\xF3\xC6" => "\xE9\xAC\xB7",		"\xF3\xC7" => "\xE9\xAF\xAA",		"\xF3\xC8" => "\xE9\xAF\xAB",		"\xF3\xC9" => "\xE9\xAF\xA0",		"\xF3\xCA" => "\xE9\xAF\x9E",		"\xF3\xCB" => "\xE9\xAF\xA4",		"\xF3\xCC" => "\xE9\xAF\xA6",		"\xF3\xCD" => "\xE9\xAF\xA2",		"\xF3\xCE" => "\xE9\xAF\xB0",		"\xF3\xCF" => "\xE9\xAF\x94",		"\xF3\xD0" => "\xE9\xAF\x97",		"\xF3\xD1" => "\xE9\xAF\xAC",		"\xF3\xD2" => "\xE9\xAF\x9C",		"\xF3\xD3" => "\xE9\xAF\x99",		"\xF3\xD4" => "\xE9\xAF\xA5",		"\xF3\xD5" => "\xE9\xAF\x95",		"\xF3\xD6" => "\xE9\xAF\xA1",		"\xF3\xD7" => "\xE9\xAF\x9A",		"\xF3\xD8" => "\xE9\xB5\xB7",		"\xF3\xD9" => "\xE9\xB6\x81",		"\xF3\xDA" => "\xE9\xB6\x8A",		"\xF3\xDB" => "\xE9\xB6\x84",		"\xF3\xDC" => "\xE9\xB6\x88",		"\xF3\xDD" => "\xE9\xB5\xB1",		"\xF3\xDE" => "\xE9\xB6\x80",		"\xF3\xDF" => "\xE9\xB5\xB8",		"\xF3\xE0" => "\xE9\xB6\x86",		"\xF3\xE1" => "\xE9\xB6\x8B",		"\xF3\xE2" => "\xE9\xB6\x8C",		"\xF3\xE3" => "\xE9\xB5\xBD",		"\xF3\xE4" => "\xE9\xB5\xAB",		"\xF3\xE5" => "\xE9\xB5\xB4",		"\xF3\xE6" => "\xE9\xB5\xB5",		"\xF3\xE7" => "\xE9\xB5\xB0",		"\xF3\xE8" => "\xE9\xB5\xA9",		"\xF3\xE9" => "\xE9\xB6\x85",		"\xF3\xEA" => "\xE9\xB5\xB3",		"\xF3\xEB" => "\xE9\xB5\xBB",		"\xF3\xEC" => "\xE9\xB6\x82",		"\xF3\xED" => "\xE9\xB5\xAF",		"\xF3\xEE" => "\xE9\xB5\xB9",		"\xF3\xEF" => "\xE9\xB5\xBF",		"\xF3\xF0" => "\xE9\xB6\x87",		"\xF3\xF1" => "\xE9\xB5\xA8",		"\xF3\xF2" => "\xE9\xBA\x94",		"\xF3\xF3" => "\xE9\xBA\x91",		"\xF3\xF4" => "\xE9\xBB\x80",		"\xF3\xF5" => "\xE9\xBB\xBC",		"\xF3\xF6" => "\xE9\xBC\xAD",		"\xF3\xF7" => "\xE9\xBD\x80",		"\xF3\xF8" => "\xE9\xBD\x81",		"\xF3\xF9" => "\xE9\xBD\x8D",		"\xF3\xFA" => "\xE9\xBD\x96",		"\xF3\xFB" => "\xE9\xBD\x97",		"\xF3\xFC" => "\xE9\xBD\x98",		"\xF3\xFD" => "\xE5\x8C\xB7",		"\xF3\xFE" => "\xE5\x9A\xB2",		"\xF4\x40" => "\xE5\x9A\xB5",		"\xF4\x41" => "\xE5\x9A\xB3",		"\xF4\x42" => "\xE5\xA3\xA3",		"\xF4\x43" => "\xE5\xAD\x85",		"\xF4\x44" => "\xE5\xB7\x86",		"\xF4\x45" => "\xE5\xB7\x87",		"\xF4\x46" => "\xE5\xBB\xAE",		"\xF4\x47" => "\xE5\xBB\xAF",		"\xF4\x48" => "\xE5\xBF\x80",		"\xF4\x49" => "\xE5\xBF\x81",		"\xF4\x4A" => "\xE6\x87\xB9",		"\xF4\x4B" => "\xE6\x94\x97",		"\xF4\x4C" => "\xE6\x94\x96",		"\xF4\x4D" => "\xE6\x94\x95",		"\xF4\x4E" => "\xE6\x94\x93",		"\xF4\x4F" => "\xE6\x97\x9F",		"\xF4\x50" => "\xE6\x9B\xA8",		"\xF4\x51" => "\xE6\x9B\xA3",		"\xF4\x52" => "\xE6\x9B\xA4",		"\xF4\x53" => "\xE6\xAB\xB3",		"\xF4\x54" => "\xE6\xAB\xB0",		"\xF4\x55" => "\xE6\xAB\xAA",		"\xF4\x56" => "\xE6\xAB\xA8",		"\xF4\x57" => "\xE6\xAB\xB9",		"\xF4\x58" => "\xE6\xAB\xB1",		"\xF4\x59" => "\xE6\xAB\xAE",		"\xF4\x5A" => "\xE6\xAB\xAF",		"\xF4\x5B" => "\xE7\x80\xBC",		"\xF4\x5C" => "\xE7\x80\xB5",		"\xF4\x5D" => "\xE7\x80\xAF",		"\xF4\x5E" => "\xE7\x80\xB7",		"\xF4\x5F" => "\xE7\x80\xB4",		"\xF4\x60" => "\xE7\x80\xB1",		"\xF4\x61" => "\xE7\x81\x82",		"\xF4\x62" => "\xE7\x80\xB8",		"\xF4\x63" => "\xE7\x80\xBF",		"\xF4\x64" => "\xE7\x80\xBA",		"\xF4\x65" => "\xE7\x80\xB9",		"\xF4\x66" => "\xE7\x81\x80",		"\xF4\x67" => "\xE7\x80\xBB",		"\xF4\x68" => "\xE7\x80\xB3",		"\xF4\x69" => "\xE7\x81\x81",		"\xF4\x6A" => "\xE7\x88\x93",		"\xF4\x6B" => "\xE7\x88\x94",		"\xF4\x6C" => "\xE7\x8A\xA8",		"\xF4\x6D" => "\xE7\x8D\xBD",		"\xF4\x6E" => "\xE7\x8D\xBC",		"\xF4\x6F" => "\xE7\x92\xBA",		"\xF4\x70" => "\xE7\x9A\xAB",		"\xF4\x71" => "\xE7\x9A\xAA",		"\xF4\x72" => "\xE7\x9A\xBE",		"\xF4\x73" => "\xE7\x9B\xAD",		"\xF4\x74" => "\xE7\x9F\x8C",		"\xF4\x75" => "\xE7\x9F\x8E",		"\xF4\x76" => "\xE7\x9F\x8F",		"\xF4\x77" => "\xE7\x9F\x8D",		"\xF4\x78" => "\xE7\x9F\xB2",		"\xF4\x79" => "\xE7\xA4\xA5",		"\xF4\x7A" => "\xE7\xA4\xA3",		"\xF4\x7B" => "\xE7\xA4\xA7",		"\xF4\x7C" => "\xE7\xA4\xA8",		"\xF4\x7D" => "\xE7\xA4\xA4",		"\xF4\x7E" => "\xE7\xA4\xA9",		"\xF4\xA1" => "\xE7\xA6\xB2",		"\xF4\xA2" => "\xE7\xA9\xAE",		"\xF4\xA3" => "\xE7\xA9\xAC",		"\xF4\xA4" => "\xE7\xA9\xAD",		"\xF4\xA5" => "\xE7\xAB\xB7",		"\xF4\xA6" => "\xE7\xB1\x89",		"\xF4\xA7" => "\xE7\xB1\x88",		"\xF4\xA8" => "\xE7\xB1\x8A",		"\xF4\xA9" => "\xE7\xB1\x87",		"\xF4\xAA" => "\xE7\xB1\x85",		"\xF4\xAB" => "\xE7\xB3\xAE",		"\xF4\xAC" => "\xE7\xB9\xBB",		"\xF4\xAD" => "\xE7\xB9\xBE",		"\xF4\xAE" => "\xE7\xBA\x81",		"\xF4\xAF" => "\xE7\xBA\x80",		"\xF4\xB0" => "\xE7\xBE\xBA",		"\xF4\xB1" => "\xE7\xBF\xBF",		"\xF4\xB2" => "\xE8\x81\xB9",		"\xF4\xB3" => "\xE8\x87\x9B",		"\xF4\xB4" => "\xE8\x87\x99",		"\xF4\xB5" => "\xE8\x88\x8B",		"\xF4\xB6" => "\xE8\x89\xA8",		"\xF4\xB7" => "\xE8\x89\xA9",		"\xF4\xB8" => "\xE8\x98\xA2",		"\xF4\xB9" => "\xE8\x97\xBF",		"\xF4\xBA" => "\xE8\x98\x81",		"\xF4\xBB" => "\xE8\x97\xBE",		"\xF4\xBC" => "\xE8\x98\x9B",		"\xF4\xBD" => "\xE8\x98\x80",		"\xF4\xBE" => "\xE8\x97\xB6",		"\xF4\xBF" => "\xE8\x98\x84",		"\xF4\xC0" => "\xE8\x98\x89",		"\xF4\xC1" => "\xE8\x98\x85",		"\xF4\xC2" => "\xE8\x98\x8C",		"\xF4\xC3" => "\xE8\x97\xBD",		"\xF4\xC4" => "\xE8\xA0\x99",		"\xF4\xC5" => "\xE8\xA0\x90",		"\xF4\xC6" => "\xE8\xA0\x91",		"\xF4\xC7" => "\xE8\xA0\x97",		"\xF4\xC8" => "\xE8\xA0\x93",		"\xF4\xC9" => "\xE8\xA0\x96",		"\xF4\xCA" => "\xE8\xA5\xA3",		"\xF4\xCB" => "\xE8\xA5\xA6",		"\xF4\xCC" => "\xE8\xA6\xB9",		"\xF4\xCD" => "\xE8\xA7\xB7",		"\xF4\xCE" => "\xE8\xAD\xA0",		"\xF4\xCF" => "\xE8\xAD\xAA",		"\xF4\xD0" => "\xE8\xAD\x9D",		"\xF4\xD1" => "\xE8\xAD\xA8",		"\xF4\xD2" => "\xE8\xAD\xA3",		"\xF4\xD3" => "\xE8\xAD\xA5",		"\xF4\xD4" => "\xE8\xAD\xA7",		"\xF4\xD5" => "\xE8\xAD\xAD",		"\xF4\xD6" => "\xE8\xB6\xAE",		"\xF4\xD7" => "\xE8\xBA\x86",		"\xF4\xD8" => "\xE8\xBA\x88",		"\xF4\xD9" => "\xE8\xBA\x84",		"\xF4\xDA" => "\xE8\xBD\x99",		"\xF4\xDB" => "\xE8\xBD\x96",		"\xF4\xDC" => "\xE8\xBD\x97",		"\xF4\xDD" => "\xE8\xBD\x95",		"\xF4\xDE" => "\xE8\xBD\x98",		"\xF4\xDF" => "\xE8\xBD\x9A",		"\xF4\xE0" => "\xE9\x82\x8D",		"\xF4\xE1" => "\xE9\x85\x83",		"\xF4\xE2" => "\xE9\x85\x81",		"\xF4\xE3" => "\xE9\x86\xB7",		"\xF4\xE4" => "\xE9\x86\xB5",		"\xF4\xE5" => "\xE9\x86\xB2",		"\xF4\xE6" => "\xE9\x86\xB3",		"\xF4\xE7" => "\xE9\x90\x8B",		"\xF4\xE8" => "\xE9\x90\x93",		"\xF4\xE9" => "\xE9\x8F\xBB",		"\xF4\xEA" => "\xE9\x90\xA0",		"\xF4\xEB" => "\xE9\x90\x8F",		"\xF4\xEC" => "\xE9\x90\x94",		"\xF4\xED" => "\xE9\x8F\xBE",		"\xF4\xEE" => "\xE9\x90\x95",		"\xF4\xEF" => "\xE9\x90\x90",		"\xF4\xF0" => "\xE9\x90\xA8",		"\xF4\xF1" => "\xE9\x90\x99",		"\xF4\xF2" => "\xE9\x90\x8D",		"\xF4\xF3" => "\xE9\x8F\xB5",		"\xF4\xF4" => "\xE9\x90\x80",		"\xF4\xF5" => "\xE9\x8F\xB7",		"\xF4\xF6" => "\xE9\x90\x87",		"\xF4\xF7" => "\xE9\x90\x8E",		"\xF4\xF8" => "\xE9\x90\x96",		"\xF4\xF9" => "\xE9\x90\x92",		"\xF4\xFA" => "\xE9\x8F\xBA",		"\xF4\xFB" => "\xE9\x90\x89",		"\xF4\xFC" => "\xE9\x8F\xB8",		"\xF4\xFD" => "\xE9\x90\x8A",		"\xF4\xFE" => "\xE9\x8F\xBF",		"\xF5\x40" => "\xE9\x8F\xBC",		"\xF5\x41" => "\xE9\x90\x8C",		"\xF5\x42" => "\xE9\x8F\xB6",		"\xF5\x43" => "\xE9\x90\x91",		"\xF5\x44" => "\xE9\x90\x86",		"\xF5\x45" => "\xE9\x97\x9E",		"\xF5\x46" => "\xE9\x97\xA0",		"\xF5\x47" => "\xE9\x97\x9F",		"\xF5\x48" => "\xE9\x9C\xAE",		"\xF5\x49" => "\xE9\x9C\xAF",		"\xF5\x4A" => "\xE9\x9E\xB9",		"\xF5\x4B" => "\xE9\x9E\xBB",		"\xF5\x4C" => "\xE9\x9F\xBD",		"\xF5\x4D" => "\xE9\x9F\xBE",		"\xF5\x4E" => "\xE9\xA1\xA0",		"\xF5\x4F" => "\xE9\xA1\xA2",		"\xF5\x50" => "\xE9\xA1\xA3",		"\xF5\x51" => "\xE9\xA1\x9F",		"\xF5\x52" => "\xE9\xA3\x81",		"\xF5\x53" => "\xE9\xA3\x82",		"\xF5\x54" => "\xE9\xA5\x90",		"\xF5\x55" => "\xE9\xA5\x8E",		"\xF5\x56" => "\xE9\xA5\x99",		"\xF5\x57" => "\xE9\xA5\x8C",		"\xF5\x58" => "\xE9\xA5\x8B",		"\xF5\x59" => "\xE9\xA5\x93",		"\xF5\x5A" => "\xE9\xA8\xB2",		"\xF5\x5B" => "\xE9\xA8\xB4",		"\xF5\x5C" => "\xE9\xA8\xB1",		"\xF5\x5D" => "\xE9\xA8\xAC",		"\xF5\x5E" => "\xE9\xA8\xAA",		"\xF5\x5F" => "\xE9\xA8\xB6",		"\xF5\x60" => "\xE9\xA8\xA9",		"\xF5\x61" => "\xE9\xA8\xAE",		"\xF5\x62" => "\xE9\xA8\xB8",		"\xF5\x63" => "\xE9\xA8\xAD",		"\xF5\x64" => "\xE9\xAB\x87",		"\xF5\x65" => "\xE9\xAB\x8A",		"\xF5\x66" => "\xE9\xAB\x86",		"\xF5\x67" => "\xE9\xAC\x90",		"\xF5\x68" => "\xE9\xAC\x92",		"\xF5\x69" => "\xE9\xAC\x91",		"\xF5\x6A" => "\xE9\xB0\x8B",		"\xF5\x6B" => "\xE9\xB0\x88",		"\xF5\x6C" => "\xE9\xAF\xB7",		"\xF5\x6D" => "\xE9\xB0\x85",		"\xF5\x6E" => "\xE9\xB0\x92",		"\xF5\x6F" => "\xE9\xAF\xB8",		"\xF5\x70" => "\xE9\xB1\x80",		"\xF5\x71" => "\xE9\xB0\x87",		"\xF5\x72" => "\xE9\xB0\x8E",		"\xF5\x73" => "\xE9\xB0\x86",		"\xF5\x74" => "\xE9\xB0\x97",		"\xF5\x75" => "\xE9\xB0\x94",		"\xF5\x76" => "\xE9\xB0\x89",		"\xF5\x77" => "\xE9\xB6\x9F",		"\xF5\x78" => "\xE9\xB6\x99",		"\xF5\x79" => "\xE9\xB6\xA4",		"\xF5\x7A" => "\xE9\xB6\x9D",		"\xF5\x7B" => "\xE9\xB6\x92",		"\xF5\x7C" => "\xE9\xB6\x98",		"\xF5\x7D" => "\xE9\xB6\x90",		"\xF5\x7E" => "\xE9\xB6\x9B",		"\xF5\xA1" => "\xE9\xB6\xA0",		"\xF5\xA2" => "\xE9\xB6\x94",		"\xF5\xA3" => "\xE9\xB6\x9C",		"\xF5\xA4" => "\xE9\xB6\xAA",		"\xF5\xA5" => "\xE9\xB6\x97",		"\xF5\xA6" => "\xE9\xB6\xA1",		"\xF5\xA7" => "\xE9\xB6\x9A",		"\xF5\xA8" => "\xE9\xB6\xA2",		"\xF5\xA9" => "\xE9\xB6\xA8",		"\xF5\xAA" => "\xE9\xB6\x9E",		"\xF5\xAB" => "\xE9\xB6\xA3",		"\xF5\xAC" => "\xE9\xB6\xBF",		"\xF5\xAD" => "\xE9\xB6\xA9",		"\xF5\xAE" => "\xE9\xB6\x96",		"\xF5\xAF" => "\xE9\xB6\xA6",		"\xF5\xB0" => "\xE9\xB6\xA7",		"\xF5\xB1" => "\xE9\xBA\x99",		"\xF5\xB2" => "\xE9\xBA\x9B",		"\xF5\xB3" => "\xE9\xBA\x9A",		"\xF5\xB4" => "\xE9\xBB\xA5",		"\xF5\xB5" => "\xE9\xBB\xA4",		"\xF5\xB6" => "\xE9\xBB\xA7",		"\xF5\xB7" => "\xE9\xBB\xA6",		"\xF5\xB8" => "\xE9\xBC\xB0",		"\xF5\xB9" => "\xE9\xBC\xAE",		"\xF5\xBA" => "\xE9\xBD\x9B",		"\xF5\xBB" => "\xE9\xBD\xA0",		"\xF5\xBC" => "\xE9\xBD\x9E",		"\xF5\xBD" => "\xE9\xBD\x9D",		"\xF5\xBE" => "\xE9\xBD\x99",		"\xF5\xBF" => "\xE9\xBE\x91",		"\xF5\xC0" => "\xE5\x84\xBA",		"\xF5\xC1" => "\xE5\x84\xB9",		"\xF5\xC2" => "\xE5\x8A\x98",		"\xF5\xC3" => "\xE5\x8A\x97",		"\xF5\xC4" => "\xE5\x9B\x83",		"\xF5\xC5" => "\xE5\x9A\xBD",		"\xF5\xC6" => "\xE5\x9A\xBE",		"\xF5\xC7" => "\xE5\xAD\x88",		"\xF5\xC8" => "\xE5\xAD\x87",		"\xF5\xC9" => "\xE5\xB7\x8B",		"\xF5\xCA" => "\xE5\xB7\x8F",		"\xF5\xCB" => "\xE5\xBB\xB1",		"\xF5\xCC" => "\xE6\x87\xBD",		"\xF5\xCD" => "\xE6\x94\x9B",		"\xF5\xCE" => "\xE6\xAC\x82",		"\xF5\xCF" => "\xE6\xAB\xBC",		"\xF5\xD0" => "\xE6\xAC\x83",		"\xF5\xD1" => "\xE6\xAB\xB8",		"\xF5\xD2" => "\xE6\xAC\x80",		"\xF5\xD3" => "\xE7\x81\x83",		"\xF5\xD4" => "\xE7\x81\x84",		"\xF5\xD5" => "\xE7\x81\x8A",		"\xF5\xD6" => "\xE7\x81\x88",		"\xF5\xD7" => "\xE7\x81\x89",		"\xF5\xD8" => "\xE7\x81\x85",		"\xF5\xD9" => "\xE7\x81\x86",		"\xF5\xDA" => "\xE7\x88\x9D",		"\xF5\xDB" => "\xE7\x88\x9A",		"\xF5\xDC" => "\xE7\x88\x99",		"\xF5\xDD" => "\xE7\x8D\xBE",		"\xF5\xDE" => "\xE7\x94\x97",		"\xF5\xDF" => "\xE7\x99\xAA",		"\xF5\xE0" => "\xE7\x9F\x90",		"\xF5\xE1" => "\xE7\xA4\xAD",		"\xF5\xE2" => "\xE7\xA4\xB1",		"\xF5\xE3" => "\xE7\xA4\xAF",		"\xF5\xE4" => "\xE7\xB1\x94",		"\xF5\xE5" => "\xE7\xB1\x93",		"\xF5\xE6" => "\xE7\xB3\xB2",		"\xF5\xE7" => "\xE7\xBA\x8A",		"\xF5\xE8" => "\xE7\xBA\x87",		"\xF5\xE9" => "\xE7\xBA\x88",		"\xF5\xEA" => "\xE7\xBA\x8B",		"\xF5\xEB" => "\xE7\xBA\x86",		"\xF5\xEC" => "\xE7\xBA\x8D",		"\xF5\xED" => "\xE7\xBD\x8D",		"\xF5\xEE" => "\xE7\xBE\xBB",		"\xF5\xEF" => "\xE8\x80\xB0",		"\xF5\xF0" => "\xE8\x87\x9D",		"\xF5\xF1" => "\xE8\x98\x98",		"\xF5\xF2" => "\xE8\x98\xAA",		"\xF5\xF3" => "\xE8\x98\xA6",		"\xF5\xF4" => "\xE8\x98\x9F",		"\xF5\xF5" => "\xE8\x98\xA3",		"\xF5\xF6" => "\xE8\x98\x9C",		"\xF5\xF7" => "\xE8\x98\x99",		"\xF5\xF8" => "\xE8\x98\xA7",		"\xF5\xF9" => "\xE8\x98\xAE",		"\xF5\xFA" => "\xE8\x98\xA1",		"\xF5\xFB" => "\xE8\x98\xA0",		"\xF5\xFC" => "\xE8\x98\xA9",		"\xF5\xFD" => "\xE8\x98\x9E",		"\xF5\xFE" => "\xE8\x98\xA5",		"\xF6\x40" => "\xE8\xA0\xA9",		"\xF6\x41" => "\xE8\xA0\x9D",		"\xF6\x42" => "\xE8\xA0\x9B",		"\xF6\x43" => "\xE8\xA0\xA0",		"\xF6\x44" => "\xE8\xA0\xA4",		"\xF6\x45" => "\xE8\xA0\x9C",		"\xF6\x46" => "\xE8\xA0\xAB",		"\xF6\x47" => "\xE8\xA1\x8A",		"\xF6\x48" => "\xE8\xA5\xAD",		"\xF6\x49" => "\xE8\xA5\xA9",		"\xF6\x4A" => "\xE8\xA5\xAE",		"\xF6\x4B" => "\xE8\xA5\xAB",		"\xF6\x4C" => "\xE8\xA7\xBA",		"\xF6\x4D" => "\xE8\xAD\xB9",		"\xF6\x4E" => "\xE8\xAD\xB8",		"\xF6\x4F" => "\xE8\xAD\x85",		"\xF6\x50" => "\xE8\xAD\xBA",		"\xF6\x51" => "\xE8\xAD\xBB",		"\xF6\x52" => "\xE8\xB4\x90",		"\xF6\x53" => "\xE8\xB4\x94",		"\xF6\x54" => "\xE8\xB6\xAF",		"\xF6\x55" => "\xE8\xBA\x8E",		"\xF6\x56" => "\xE8\xBA\x8C",		"\xF6\x57" => "\xE8\xBD\x9E",		"\xF6\x58" => "\xE8\xBD\x9B",		"\xF6\x59" => "\xE8\xBD\x9D",		"\xF6\x5A" => "\xE9\x85\x86",		"\xF6\x5B" => "\xE9\x85\x84",		"\xF6\x5C" => "\xE9\x85\x85",		"\xF6\x5D" => "\xE9\x86\xB9",		"\xF6\x5E" => "\xE9\x90\xBF",		"\xF6\x5F" => "\xE9\x90\xBB",		"\xF6\x60" => "\xE9\x90\xB6",		"\xF6\x61" => "\xE9\x90\xA9",		"\xF6\x62" => "\xE9\x90\xBD",		"\xF6\x63" => "\xE9\x90\xBC",		"\xF6\x64" => "\xE9\x90\xB0",		"\xF6\x65" => "\xE9\x90\xB9",		"\xF6\x66" => "\xE9\x90\xAA",		"\xF6\x67" => "\xE9\x90\xB7",		"\xF6\x68" => "\xE9\x90\xAC",		"\xF6\x69" => "\xE9\x91\x80",		"\xF6\x6A" => "\xE9\x90\xB1",		"\xF6\x6B" => "\xE9\x97\xA5",		"\xF6\x6C" => "\xE9\x97\xA4",		"\xF6\x6D" => "\xE9\x97\xA3",		"\xF6\x6E" => "\xE9\x9C\xB5",		"\xF6\x6F" => "\xE9\x9C\xBA",		"\xF6\x70" => "\xE9\x9E\xBF",		"\xF6\x71" => "\xE9\x9F\xA1",		"\xF6\x72" => "\xE9\xA1\xA4",		"\xF6\x73" => "\xE9\xA3\x89",		"\xF6\x74" => "\xE9\xA3\x86",		"\xF6\x75" => "\xE9\xA3\x80",		"\xF6\x76" => "\xE9\xA5\x98",		"\xF6\x77" => "\xE9\xA5\x96",		"\xF6\x78" => "\xE9\xA8\xB9",		"\xF6\x79" => "\xE9\xA8\xBD",		"\xF6\x7A" => "\xE9\xA9\x86",		"\xF6\x7B" => "\xE9\xA9\x84",		"\xF6\x7C" => "\xE9\xA9\x82",		"\xF6\x7D" => "\xE9\xA9\x81",		"\xF6\x7E" => "\xE9\xA8\xBA",		"\xF6\xA1" => "\xE9\xA8\xBF",		"\xF6\xA2" => "\xE9\xAB\x8D",		"\xF6\xA3" => "\xE9\xAC\x95",		"\xF6\xA4" => "\xE9\xAC\x97",		"\xF6\xA5" => "\xE9\xAC\x98",		"\xF6\xA6" => "\xE9\xAC\x96",		"\xF6\xA7" => "\xE9\xAC\xBA",		"\xF6\xA8" => "\xE9\xAD\x92",		"\xF6\xA9" => "\xE9\xB0\xAB",		"\xF6\xAA" => "\xE9\xB0\x9D",		"\xF6\xAB" => "\xE9\xB0\x9C",		"\xF6\xAC" => "\xE9\xB0\xAC",		"\xF6\xAD" => "\xE9\xB0\xA3",		"\xF6\xAE" => "\xE9\xB0\xA8",		"\xF6\xAF" => "\xE9\xB0\xA9",		"\xF6\xB0" => "\xE9\xB0\xA4",		"\xF6\xB1" => "\xE9\xB0\xA1",		"\xF6\xB2" => "\xE9\xB6\xB7",		"\xF6\xB3" => "\xE9\xB6\xB6",		"\xF6\xB4" => "\xE9\xB6\xBC",		"\xF6\xB5" => "\xE9\xB7\x81",		"\xF6\xB6" => "\xE9\xB7\x87",		"\xF6\xB7" => "\xE9\xB7\x8A",		"\xF6\xB8" => "\xE9\xB7\x8F",		"\xF6\xB9" => "\xE9\xB6\xBE",		"\xF6\xBA" => "\xE9\xB7\x85",		"\xF6\xBB" => "\xE9\xB7\x83",		"\xF6\xBC" => "\xE9\xB6\xBB",		"\xF6\xBD" => "\xE9\xB6\xB5",		"\xF6\xBE" => "\xE9\xB7\x8E",		"\xF6\xBF" => "\xE9\xB6\xB9",		"\xF6\xC0" => "\xE9\xB6\xBA",		"\xF6\xC1" => "\xE9\xB6\xAC",		"\xF6\xC2" => "\xE9\xB7\x88",		"\xF6\xC3" => "\xE9\xB6\xB1",		"\xF6\xC4" => "\xE9\xB6\xAD",		"\xF6\xC5" => "\xE9\xB7\x8C",		"\xF6\xC6" => "\xE9\xB6\xB3",		"\xF6\xC7" => "\xE9\xB7\x8D",		"\xF6\xC8" => "\xE9\xB6\xB2",		"\xF6\xC9" => "\xE9\xB9\xBA",		"\xF6\xCA" => "\xE9\xBA\x9C",		"\xF6\xCB" => "\xE9\xBB\xAB",		"\xF6\xCC" => "\xE9\xBB\xAE",		"\xF6\xCD" => "\xE9\xBB\xAD",		"\xF6\xCE" => "\xE9\xBC\x9B",		"\xF6\xCF" => "\xE9\xBC\x98",		"\xF6\xD0" => "\xE9\xBC\x9A",		"\xF6\xD1" => "\xE9\xBC\xB1",		"\xF6\xD2" => "\xE9\xBD\x8E",		"\xF6\xD3" => "\xE9\xBD\xA5",		"\xF6\xD4" => "\xE9\xBD\xA4",		"\xF6\xD5" => "\xE9\xBE\x92",		"\xF6\xD6" => "\xE4\xBA\xB9",		"\xF6\xD7" => "\xE5\x9B\x86",		"\xF6\xD8" => "\xE5\x9B\x85",		"\xF6\xD9" => "\xE5\x9B\x8B",		"\xF6\xDA" => "\xE5\xA5\xB1",		"\xF6\xDB" => "\xE5\xAD\x8B",		"\xF6\xDC" => "\xE5\xAD\x8C",		"\xF6\xDD" => "\xE5\xB7\x95",		"\xF6\xDE" => "\xE5\xB7\x91",		"\xF6\xDF" => "\xE5\xBB\xB2",		"\xF6\xE0" => "\xE6\x94\xA1",		"\xF6\xE1" => "\xE6\x94\xA0",		"\xF6\xE2" => "\xE6\x94\xA6",		"\xF6\xE3" => "\xE6\x94\xA2",		"\xF6\xE4" => "\xE6\xAC\x8B",		"\xF6\xE5" => "\xE6\xAC\x88",		"\xF6\xE6" => "\xE6\xAC\x89",		"\xF6\xE7" => "\xE6\xB0\x8D",		"\xF6\xE8" => "\xE7\x81\x95",		"\xF6\xE9" => "\xE7\x81\x96",		"\xF6\xEA" => "\xE7\x81\x97",		"\xF6\xEB" => "\xE7\x81\x92",		"\xF6\xEC" => "\xE7\x88\x9E",		"\xF6\xED" => "\xE7\x88\x9F",		"\xF6\xEE" => "\xE7\x8A\xA9",		"\xF6\xEF" => "\xE7\x8D\xBF",		"\xF6\xF0" => "\xE7\x93\x98",		"\xF6\xF1" => "\xE7\x93\x95",		"\xF6\xF2" => "\xE7\x93\x99",		"\xF6\xF3" => "\xE7\x93\x97",		"\xF6\xF4" => "\xE7\x99\xAD",		"\xF6\xF5" => "\xE7\x9A\xAD",		"\xF6\xF6" => "\xE7\xA4\xB5",		"\xF6\xF7" => "\xE7\xA6\xB4",		"\xF6\xF8" => "\xE7\xA9\xB0",		"\xF6\xF9" => "\xE7\xA9\xB1",		"\xF6\xFA" => "\xE7\xB1\x97",		"\xF6\xFB" => "\xE7\xB1\x9C",		"\xF6\xFC" => "\xE7\xB1\x99",		"\xF6\xFD" => "\xE7\xB1\x9B",		"\xF6\xFE" => "\xE7\xB1\x9A",		"\xF7\x40" => "\xE7\xB3\xB4",		"\xF7\x41" => "\xE7\xB3\xB1",		"\xF7\x42" => "\xE7\xBA\x91",		"\xF7\x43" => "\xE7\xBD\x8F",		"\xF7\x44" => "\xE7\xBE\x87",		"\xF7\x45" => "\xE8\x87\x9E",		"\xF7\x46" => "\xE8\x89\xAB",		"\xF7\x47" => "\xE8\x98\xB4",		"\xF7\x48" => "\xE8\x98\xB5",		"\xF7\x49" => "\xE8\x98\xB3",		"\xF7\x4A" => "\xE8\x98\xAC",		"\xF7\x4B" => "\xE8\x98\xB2",		"\xF7\x4C" => "\xE8\x98\xB6",		"\xF7\x4D" => "\xE8\xA0\xAC",		"\xF7\x4E" => "\xE8\xA0\xA8",		"\xF7\x4F" => "\xE8\xA0\xA6",		"\xF7\x50" => "\xE8\xA0\xAA",		"\xF7\x51" => "\xE8\xA0\xA5",		"\xF7\x52" => "\xE8\xA5\xB1",		"\xF7\x53" => "\xE8\xA6\xBF",		"\xF7\x54" => "\xE8\xA6\xBE",		"\xF7\x55" => "\xE8\xA7\xBB",		"\xF7\x56" => "\xE8\xAD\xBE",		"\xF7\x57" => "\xE8\xAE\x84",		"\xF7\x58" => "\xE8\xAE\x82",		"\xF7\x59" => "\xE8\xAE\x86",		"\xF7\x5A" => "\xE8\xAE\x85",		"\xF7\x5B" => "\xE8\xAD\xBF",		"\xF7\x5C" => "\xE8\xB4\x95",		"\xF7\x5D" => "\xE8\xBA\x95",		"\xF7\x5E" => "\xE8\xBA\x94",		"\xF7\x5F" => "\xE8\xBA\x9A",		"\xF7\x60" => "\xE8\xBA\x92",		"\xF7\x61" => "\xE8\xBA\x90",		"\xF7\x62" => "\xE8\xBA\x96",		"\xF7\x63" => "\xE8\xBA\x97",		"\xF7\x64" => "\xE8\xBD\xA0",		"\xF7\x65" => "\xE8\xBD\xA2",		"\xF7\x66" => "\xE9\x85\x87",		"\xF7\x67" => "\xE9\x91\x8C",		"\xF7\x68" => "\xE9\x91\x90",		"\xF7\x69" => "\xE9\x91\x8A",		"\xF7\x6A" => "\xE9\x91\x8B",		"\xF7\x6B" => "\xE9\x91\x8F",		"\xF7\x6C" => "\xE9\x91\x87",		"\xF7\x6D" => "\xE9\x91\x85",		"\xF7\x6E" => "\xE9\x91\x88",		"\xF7\x6F" => "\xE9\x91\x89",		"\xF7\x70" => "\xE9\x91\x86",		"\xF7\x71" => "\xE9\x9C\xBF",		"\xF7\x72" => "\xE9\x9F\xA3",		"\xF7\x73" => "\xE9\xA1\xAA",		"\xF7\x74" => "\xE9\xA1\xA9",		"\xF7\x75" => "\xE9\xA3\x8B",		"\xF7\x76" => "\xE9\xA5\x94",		"\xF7\x77" => "\xE9\xA5\x9B",		"\xF7\x78" => "\xE9\xA9\x8E",		"\xF7\x79" => "\xE9\xA9\x93",		"\xF7\x7A" => "\xE9\xA9\x94",		"\xF7\x7B" => "\xE9\xA9\x8C",		"\xF7\x7C" => "\xE9\xA9\x8F",		"\xF7\x7D" => "\xE9\xA9\x88",		"\xF7\x7E" => "\xE9\xA9\x8A",		"\xF7\xA1" => "\xE9\xA9\x89",		"\xF7\xA2" => "\xE9\xA9\x92",		"\xF7\xA3" => "\xE9\xA9\x90",		"\xF7\xA4" => "\xE9\xAB\x90",		"\xF7\xA5" => "\xE9\xAC\x99",		"\xF7\xA6" => "\xE9\xAC\xAB",		"\xF7\xA7" => "\xE9\xAC\xBB",		"\xF7\xA8" => "\xE9\xAD\x96",		"\xF7\xA9" => "\xE9\xAD\x95",		"\xF7\xAA" => "\xE9\xB1\x86",		"\xF7\xAB" => "\xE9\xB1\x88",		"\xF7\xAC" => "\xE9\xB0\xBF",		"\xF7\xAD" => "\xE9\xB1\x84",		"\xF7\xAE" => "\xE9\xB0\xB9",		"\xF7\xAF" => "\xE9\xB0\xB3",		"\xF7\xB0" => "\xE9\xB1\x81",		"\xF7\xB1" => "\xE9\xB0\xBC",		"\xF7\xB2" => "\xE9\xB0\xB7",		"\xF7\xB3" => "\xE9\xB0\xB4",		"\xF7\xB4" => "\xE9\xB0\xB2",		"\xF7\xB5" => "\xE9\xB0\xBD",		"\xF7\xB6" => "\xE9\xB0\xB6",		"\xF7\xB7" => "\xE9\xB7\x9B",		"\xF7\xB8" => "\xE9\xB7\x92",		"\xF7\xB9" => "\xE9\xB7\x9E",		"\xF7\xBA" => "\xE9\xB7\x9A",		"\xF7\xBB" => "\xE9\xB7\x8B",		"\xF7\xBC" => "\xE9\xB7\x90",		"\xF7\xBD" => "\xE9\xB7\x9C",		"\xF7\xBE" => "\xE9\xB7\x91",		"\xF7\xBF" => "\xE9\xB7\x9F",		"\xF7\xC0" => "\xE9\xB7\xA9",		"\xF7\xC1" => "\xE9\xB7\x99",		"\xF7\xC2" => "\xE9\xB7\x98",		"\xF7\xC3" => "\xE9\xB7\x96",		"\xF7\xC4" => "\xE9\xB7\xB5",		"\xF7\xC5" => "\xE9\xB7\x95",		"\xF7\xC6" => "\xE9\xB7\x9D",		"\xF7\xC7" => "\xE9\xBA\xB6",		"\xF7\xC8" => "\xE9\xBB\xB0",		"\xF7\xC9" => "\xE9\xBC\xB5",		"\xF7\xCA" => "\xE9\xBC\xB3",		"\xF7\xCB" => "\xE9\xBC\xB2",		"\xF7\xCC" => "\xE9\xBD\x82",		"\xF7\xCD" => "\xE9\xBD\xAB",		"\xF7\xCE" => "\xE9\xBE\x95",		"\xF7\xCF" => "\xE9\xBE\xA2",		"\xF7\xD0" => "\xE5\x84\xBD",		"\xF7\xD1" => "\xE5\x8A\x99",		"\xF7\xD2" => "\xE5\xA3\xA8",		"\xF7\xD3" => "\xE5\xA3\xA7",		"\xF7\xD4" => "\xE5\xA5\xB2",		"\xF7\xD5" => "\xE5\xAD\x8D",		"\xF7\xD6" => "\xE5\xB7\x98",		"\xF7\xD7" => "\xE8\xA0\xAF",		"\xF7\xD8" => "\xE5\xBD\x8F",		"\xF7\xD9" => "\xE6\x88\x81",		"\xF7\xDA" => "\xE6\x88\x83",		"\xF7\xDB" => "\xE6\x88\x84",		"\xF7\xDC" => "\xE6\x94\xA9",		"\xF7\xDD" => "\xE6\x94\xA5",		"\xF7\xDE" => "\xE6\x96\x96",		"\xF7\xDF" => "\xE6\x9B\xAB",		"\xF7\xE0" => "\xE6\xAC\x91",		"\xF7\xE1" => "\xE6\xAC\x92",		"\xF7\xE2" => "\xE6\xAC\x8F",		"\xF7\xE3" => "\xE6\xAF\x8A",		"\xF7\xE4" => "\xE7\x81\x9B",		"\xF7\xE5" => "\xE7\x81\x9A",		"\xF7\xE6" => "\xE7\x88\xA2",		"\xF7\xE7" => "\xE7\x8E\x82",		"\xF7\xE8" => "\xE7\x8E\x81",		"\xF7\xE9" => "\xE7\x8E\x83",		"\xF7\xEA" => "\xE7\x99\xB0",		"\xF7\xEB" => "\xE7\x9F\x94",		"\xF7\xEC" => "\xE7\xB1\xA7",		"\xF7\xED" => "\xE7\xB1\xA6",		"\xF7\xEE" => "\xE7\xBA\x95",		"\xF7\xEF" => "\xE8\x89\xAC",		"\xF7\xF0" => "\xE8\x98\xBA",		"\xF7\xF1" => "\xE8\x99\x80",		"\xF7\xF2" => "\xE8\x98\xB9",		"\xF7\xF3" => "\xE8\x98\xBC",		"\xF7\xF4" => "\xE8\x98\xB1",		"\xF7\xF5" => "\xE8\x98\xBB",		"\xF7\xF6" => "\xE8\x98\xBE",		"\xF7\xF7" => "\xE8\xA0\xB0",		"\xF7\xF8" => "\xE8\xA0\xB2",		"\xF7\xF9" => "\xE8\xA0\xAE",		"\xF7\xFA" => "\xE8\xA0\xB3",		"\xF7\xFB" => "\xE8\xA5\xB6",		"\xF7\xFC" => "\xE8\xA5\xB4",		"\xF7\xFD" => "\xE8\xA5\xB3",		"\xF7\xFE" => "\xE8\xA7\xBE",		"\xF8\x40" => "\xE8\xAE\x8C",		"\xF8\x41" => "\xE8\xAE\x8E",		"\xF8\x42" => "\xE8\xAE\x8B",		"\xF8\x43" => "\xE8\xAE\x88",		"\xF8\x44" => "\xE8\xB1\x85",		"\xF8\x45" => "\xE8\xB4\x99",		"\xF8\x46" => "\xE8\xBA\x98",		"\xF8\x47" => "\xE8\xBD\xA4",		"\xF8\x48" => "\xE8\xBD\xA3",		"\xF8\x49" => "\xE9\x86\xBC",		"\xF8\x4A" => "\xE9\x91\xA2",		"\xF8\x4B" => "\xE9\x91\x95",		"\xF8\x4C" => "\xE9\x91\x9D",		"\xF8\x4D" => "\xE9\x91\x97",		"\xF8\x4E" => "\xE9\x91\x9E",		"\xF8\x4F" => "\xE9\x9F\x84",		"\xF8\x50" => "\xE9\x9F\x85",		"\xF8\x51" => "\xE9\xA0\x80",		"\xF8\x52" => "\xE9\xA9\x96",		"\xF8\x53" => "\xE9\xA9\x99",		"\xF8\x54" => "\xE9\xAC\x9E",		"\xF8\x55" => "\xE9\xAC\x9F",		"\xF8\x56" => "\xE9\xAC\xA0",		"\xF8\x57" => "\xE9\xB1\x92",		"\xF8\x58" => "\xE9\xB1\x98",		"\xF8\x59" => "\xE9\xB1\x90",		"\xF8\x5A" => "\xE9\xB1\x8A",		"\xF8\x5B" => "\xE9\xB1\x8D",		"\xF8\x5C" => "\xE9\xB1\x8B",		"\xF8\x5D" => "\xE9\xB1\x95",		"\xF8\x5E" => "\xE9\xB1\x99",		"\xF8\x5F" => "\xE9\xB1\x8C",		"\xF8\x60" => "\xE9\xB1\x8E",		"\xF8\x61" => "\xE9\xB7\xBB",		"\xF8\x62" => "\xE9\xB7\xB7",		"\xF8\x63" => "\xE9\xB7\xAF",		"\xF8\x64" => "\xE9\xB7\xA3",		"\xF8\x65" => "\xE9\xB7\xAB",		"\xF8\x66" => "\xE9\xB7\xB8",		"\xF8\x67" => "\xE9\xB7\xA4",		"\xF8\x68" => "\xE9\xB7\xB6",		"\xF8\x69" => "\xE9\xB7\xA1",		"\xF8\x6A" => "\xE9\xB7\xAE",		"\xF8\x6B" => "\xE9\xB7\xA6",		"\xF8\x6C" => "\xE9\xB7\xB2",		"\xF8\x6D" => "\xE9\xB7\xB0",		"\xF8\x6E" => "\xE9\xB7\xA2",		"\xF8\x6F" => "\xE9\xB7\xAC",		"\xF8\x70" => "\xE9\xB7\xB4",		"\xF8\x71" => "\xE9\xB7\xB3",		"\xF8\x72" => "\xE9\xB7\xA8",		"\xF8\x73" => "\xE9\xB7\xAD",		"\xF8\x74" => "\xE9\xBB\x82",		"\xF8\x75" => "\xE9\xBB\x90",		"\xF8\x76" => "\xE9\xBB\xB2",		"\xF8\x77" => "\xE9\xBB\xB3",		"\xF8\x78" => "\xE9\xBC\x86",		"\xF8\x79" => "\xE9\xBC\x9C",		"\xF8\x7A" => "\xE9\xBC\xB8",		"\xF8\x7B" => "\xE9\xBC\xB7",		"\xF8\x7C" => "\xE9\xBC\xB6",		"\xF8\x7D" => "\xE9\xBD\x83",		"\xF8\x7E" => "\xE9\xBD\x8F",		"\xF8\xA1" => "\xE9\xBD\xB1",		"\xF8\xA2" => "\xE9\xBD\xB0",		"\xF8\xA3" => "\xE9\xBD\xAE",		"\xF8\xA4" => "\xE9\xBD\xAF",		"\xF8\xA5" => "\xE5\x9B\x93",		"\xF8\xA6" => "\xE5\x9B\x8D",		"\xF8\xA7" => "\xE5\xAD\x8E",		"\xF8\xA8" => "\xE5\xB1\xAD",		"\xF8\xA9" => "\xE6\x94\xAD",		"\xF8\xAA" => "\xE6\x9B\xAD",		"\xF8\xAB" => "\xE6\x9B\xAE",		"\xF8\xAC" => "\xE6\xAC\x93",		"\xF8\xAD" => "\xE7\x81\x9F",		"\xF8\xAE" => "\xE7\x81\xA1",		"\xF8\xAF" => "\xE7\x81\x9D",		"\xF8\xB0" => "\xE7\x81\xA0",		"\xF8\xB1" => "\xE7\x88\xA3",		"\xF8\xB2" => "\xE7\x93\x9B",		"\xF8\xB3" => "\xE7\x93\xA5",		"\xF8\xB4" => "\xE7\x9F\x95",		"\xF8\xB5" => "\xE7\xA4\xB8",		"\xF8\xB6" => "\xE7\xA6\xB7",		"\xF8\xB7" => "\xE7\xA6\xB6",		"\xF8\xB8" => "\xE7\xB1\xAA",		"\xF8\xB9" => "\xE7\xBA\x97",		"\xF8\xBA" => "\xE7\xBE\x89",		"\xF8\xBB" => "\xE8\x89\xAD",		"\xF8\xBC" => "\xE8\x99\x83",		"\xF8\xBD" => "\xE8\xA0\xB8",		"\xF8\xBE" => "\xE8\xA0\xB7",		"\xF8\xBF" => "\xE8\xA0\xB5",		"\xF8\xC0" => "\xE8\xA1\x8B",		"\xF8\xC1" => "\xE8\xAE\x94",		"\xF8\xC2" => "\xE8\xAE\x95",		"\xF8\xC3" => "\xE8\xBA\x9E",		"\xF8\xC4" => "\xE8\xBA\x9F",		"\xF8\xC5" => "\xE8\xBA\xA0",		"\xF8\xC6" => "\xE8\xBA\x9D",		"\xF8\xC7" => "\xE9\x86\xBE",		"\xF8\xC8" => "\xE9\x86\xBD",		"\xF8\xC9" => "\xE9\x87\x82",		"\xF8\xCA" => "\xE9\x91\xAB",		"\xF8\xCB" => "\xE9\x91\xA8",		"\xF8\xCC" => "\xE9\x91\xA9",		"\xF8\xCD" => "\xE9\x9B\xA5",		"\xF8\xCE" => "\xE9\x9D\x86",		"\xF8\xCF" => "\xE9\x9D\x83",		"\xF8\xD0" => "\xE9\x9D\x87",		"\xF8\xD1" => "\xE9\x9F\x87",		"\xF8\xD2" => "\xE9\x9F\xA5",		"\xF8\xD3" => "\xE9\xA9\x9E",		"\xF8\xD4" => "\xE9\xAB\x95",		"\xF8\xD5" => "\xE9\xAD\x99",		"\xF8\xD6" => "\xE9\xB1\xA3",		"\xF8\xD7" => "\xE9\xB1\xA7",		"\xF8\xD8" => "\xE9\xB1\xA6",		"\xF8\xD9" => "\xE9\xB1\xA2",		"\xF8\xDA" => "\xE9\xB1\x9E",		"\xF8\xDB" => "\xE9\xB1\xA0",		"\xF8\xDC" => "\xE9\xB8\x82",		"\xF8\xDD" => "\xE9\xB7\xBE",		"\xF8\xDE" => "\xE9\xB8\x87",		"\xF8\xDF" => "\xE9\xB8\x83",		"\xF8\xE0" => "\xE9\xB8\x86",		"\xF8\xE1" => "\xE9\xB8\x85",		"\xF8\xE2" => "\xE9\xB8\x80",		"\xF8\xE3" => "\xE9\xB8\x81",		"\xF8\xE4" => "\xE9\xB8\x89",		"\xF8\xE5" => "\xE9\xB7\xBF",		"\xF8\xE6" => "\xE9\xB7\xBD",		"\xF8\xE7" => "\xE9\xB8\x84",		"\xF8\xE8" => "\xE9\xBA\xA0",		"\xF8\xE9" => "\xE9\xBC\x9E",		"\xF8\xEA" => "\xE9\xBD\x86",		"\xF8\xEB" => "\xE9\xBD\xB4",		"\xF8\xEC" => "\xE9\xBD\xB5",		"\xF8\xED" => "\xE9\xBD\xB6",		"\xF8\xEE" => "\xE5\x9B\x94",		"\xF8\xEF" => "\xE6\x94\xAE",		"\xF8\xF0" => "\xE6\x96\xB8",		"\xF8\xF1" => "\xE6\xAC\x98",		"\xF8\xF2" => "\xE6\xAC\x99",		"\xF8\xF3" => "\xE6\xAC\x97",		"\xF8\xF4" => "\xE6\xAC\x9A",		"\xF8\xF5" => "\xE7\x81\xA2",		"\xF8\xF6" => "\xE7\x88\xA6",		"\xF8\xF7" => "\xE7\x8A\xAA",		"\xF8\xF8" => "\xE7\x9F\x98",		"\xF8\xF9" => "\xE7\x9F\x99",		"\xF8\xFA" => "\xE7\xA4\xB9",		"\xF8\xFB" => "\xE7\xB1\xA9",		"\xF8\xFC" => "\xE7\xB1\xAB",		"\xF8\xFD" => "\xE7\xB3\xB6",		"\xF8\xFE" => "\xE7\xBA\x9A",		"\xF9\x40" => "\xE7\xBA\x98",		"\xF9\x41" => "\xE7\xBA\x9B",		"\xF9\x42" => "\xE7\xBA\x99",		"\xF9\x43" => "\xE8\x87\xA0",		"\xF9\x44" => "\xE8\x87\xA1",		"\xF9\x45" => "\xE8\x99\x86",		"\xF9\x46" => "\xE8\x99\x87",		"\xF9\x47" => "\xE8\x99\x88",		"\xF9\x48" => "\xE8\xA5\xB9",		"\xF9\x49" => "\xE8\xA5\xBA",		"\xF9\x4A" => "\xE8\xA5\xBC",		"\xF9\x4B" => "\xE8\xA5\xBB",		"\xF9\x4C" => "\xE8\xA7\xBF",		"\xF9\x4D" => "\xE8\xAE\x98",		"\xF9\x4E" => "\xE8\xAE\x99",		"\xF9\x4F" => "\xE8\xBA\xA5",		"\xF9\x50" => "\xE8\xBA\xA4",		"\xF9\x51" => "\xE8\xBA\xA3",		"\xF9\x52" => "\xE9\x91\xAE",		"\xF9\x53" => "\xE9\x91\xAD",		"\xF9\x54" => "\xE9\x91\xAF",		"\xF9\x55" => "\xE9\x91\xB1",		"\xF9\x56" => "\xE9\x91\xB3",		"\xF9\x57" => "\xE9\x9D\x89",		"\xF9\x58" => "\xE9\xA1\xB2",		"\xF9\x59" => "\xE9\xA5\x9F",		"\xF9\x5A" => "\xE9\xB1\xA8",		"\xF9\x5B" => "\xE9\xB1\xAE",		"\xF9\x5C" => "\xE9\xB1\xAD",		"\xF9\x5D" => "\xE9\xB8\x8B",		"\xF9\x5E" => "\xE9\xB8\x8D",		"\xF9\x5F" => "\xE9\xB8\x90",		"\xF9\x60" => "\xE9\xB8\x8F",		"\xF9\x61" => "\xE9\xB8\x92",		"\xF9\x62" => "\xE9\xB8\x91",		"\xF9\x63" => "\xE9\xBA\xA1",		"\xF9\x64" => "\xE9\xBB\xB5",		"\xF9\x65" => "\xE9\xBC\x89",		"\xF9\x66" => "\xE9\xBD\x87",		"\xF9\x67" => "\xE9\xBD\xB8",		"\xF9\x68" => "\xE9\xBD\xBB",		"\xF9\x69" => "\xE9\xBD\xBA",		"\xF9\x6A" => "\xE9\xBD\xB9",		"\xF9\x6B" => "\xE5\x9C\x9E",		"\xF9\x6C" => "\xE7\x81\xA6",		"\xF9\x6D" => "\xE7\xB1\xAF",		"\xF9\x6E" => "\xE8\xA0\xBC",		"\xF9\x6F" => "\xE8\xB6\xB2",		"\xF9\x70" => "\xE8\xBA\xA6",		"\xF9\x71" => "\xE9\x87\x83",		"\xF9\x72" => "\xE9\x91\xB4",		"\xF9\x73" => "\xE9\x91\xB8",		"\xF9\x74" => "\xE9\x91\xB6",		"\xF9\x75" => "\xE9\x91\xB5",		"\xF9\x76" => "\xE9\xA9\xA0",		"\xF9\x77" => "\xE9\xB1\xB4",		"\xF9\x78" => "\xE9\xB1\xB3",		"\xF9\x79" => "\xE9\xB1\xB1",		"\xF9\x7A" => "\xE9\xB1\xB5",		"\xF9\x7B" => "\xE9\xB8\x94",		"\xF9\x7C" => "\xE9\xB8\x93",		"\xF9\x7D" => "\xE9\xBB\xB6",		"\xF9\x7E" => "\xE9\xBC\x8A",		"\xF9\xA1" => "\xE9\xBE\xA4",		"\xF9\xA2" => "\xE7\x81\xA8",		"\xF9\xA3" => "\xE7\x81\xA5",		"\xF9\xA4" => "\xE7\xB3\xB7",		"\xF9\xA5" => "\xE8\x99\xAA",		"\xF9\xA6" => "\xE8\xA0\xBE",		"\xF9\xA7" => "\xE8\xA0\xBD",		"\xF9\xA8" => "\xE8\xA0\xBF",		"\xF9\xA9" => "\xE8\xAE\x9E",		"\xF9\xAA" => "\xE8\xB2\x9C",		"\xF9\xAB" => "\xE8\xBA\xA9",		"\xF9\xAC" => "\xE8\xBB\x89",		"\xF9\xAD" => "\xE9\x9D\x8B",		"\xF9\xAE" => "\xE9\xA1\xB3",		"\xF9\xAF" => "\xE9\xA1\xB4",		"\xF9\xB0" => "\xE9\xA3\x8C",		"\xF9\xB1" => "\xE9\xA5\xA1",		"\xF9\xB2" => "\xE9\xA6\xAB",		"\xF9\xB3" => "\xE9\xA9\xA4",		"\xF9\xB4" => "\xE9\xA9\xA6",		"\xF9\xB5" => "\xE9\xA9\xA7",		"\xF9\xB6" => "\xE9\xAC\xA4",		"\xF9\xB7" => "\xE9\xB8\x95",		"\xF9\xB8" => "\xE9\xB8\x97",		"\xF9\xB9" => "\xE9\xBD\x88",		"\xF9\xBA" => "\xE6\x88\x87",		"\xF9\xBB" => "\xE6\xAC\x9E",		"\xF9\xBC" => "\xE7\x88\xA7",		"\xF9\xBD" => "\xE8\x99\x8C",		"\xF9\xBE" => "\xE8\xBA\xA8",		"\xF9\xBF" => "\xE9\x92\x82",		"\xF9\xC0" => "\xE9\x92\x80",		"\xF9\xC1" => "\xE9\x92\x81",		"\xF9\xC2" => "\xE9\xA9\xA9",		"\xF9\xC3" => "\xE9\xA9\xA8",		"\xF9\xC4" => "\xE9\xAC\xAE",		"\xF9\xC5" => "\xE9\xB8\x99",		"\xF9\xC6" => "\xE7\x88\xA9",		"\xF9\xC7" => "\xE8\x99\x8B",		"\xF9\xC8" => "\xE8\xAE\x9F",		"\xF9\xC9" => "\xE9\x92\x83",		"\xF9\xCA" => "\xE9\xB1\xB9",		"\xF9\xCB" => "\xE9\xBA\xB7",		"\xF9\xCC" => "\xE7\x99\xB5",		"\xF9\xCD" => "\xE9\xA9\xAB",		"\xF9\xCE" => "\xE9\xB1\xBA",		"\xF9\xCF" => "\xE9\xB8\x9D",		"\xF9\xD0" => "\xE7\x81\xA9",		"\xF9\xD1" => "\xE7\x81\xAA",		"\xF9\xD2" => "\xE9\xBA\xA4",		"\xF9\xD3" => "\xE9\xBD\xBE",		"\xF9\xD4" => "\xE9\xBD\x89",		"\xF9\xD5" => "\xE9\xBE\x98",	);	return strtr($string, $transform);}?>
<?php/**** @package VC* @version $Id$* @copyright (c) 2006, 2008 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @ignore*/if (!defined('IN_PHPBB')){	exit;}/*** Placeholder for autoload*/if (!class_exists('phpbb_default_captcha')){	include($phpbb_root_path . 'includes/captcha/plugins/captcha_abstract.' . $phpEx);}/*** @package VC*/class phpbb_captcha_nogd extends phpbb_default_captcha{	function phpbb_captcha_nogd()	{		global $phpbb_root_path, $phpEx;		if (!class_exists('captcha'))		{			include_once($phpbb_root_path . 'includes/captcha/captcha_non_gd.' . $phpEx);		}	}	function &get_instance()	{		$instance =& new phpbb_captcha_nogd();		return $instance;	}	function is_available()	{		return true;	}	function get_name()	{		return 'CAPTCHA_NO_GD';	}	function get_class_name()	{		return 'phpbb_captcha_nogd';	}	function acp_page($id, &$module)	{		global $user;		trigger_error($user->lang['CAPTCHA_NO_OPTIONS'] . adm_back_link($module->u_action));	}}?>
<?php/**** @package phpBB3* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @ignore*/define('IN_PHPBB', true);$phpbb_root_path = (defined('PHPBB_ROOT_PATH')) ? PHPBB_ROOT_PATH : './';$phpEx = substr(strrchr(__FILE__, '.'), 1);include($phpbb_root_path . 'common.' . $phpEx);include($phpbb_root_path . 'includes/functions_display.' . $phpEx);// Start session management$user->session_begin();$auth->acl($user->data);$user->setup('mcp');$forum_id		= request_var('f', 0);$post_id		= request_var('p', 0);$pm_id			= request_var('pm', 0);$reason_id		= request_var('reason_id', 0);$report_text	= utf8_normalize_nfc(request_var('report_text', '', true));$user_notify	= ($user->data['is_registered']) ? request_var('notify', 0) : false;$submit = (isset($_POST['submit'])) ? true : false;if (!$post_id && (!$pm_id || !$config['allow_pm_report'])){	trigger_error('NO_POST_SELECTED');}if ($post_id){	$redirect_url = append_sid("{$phpbb_root_path}viewtopic.$phpEx", "f=$forum_id&amp;p=$post_id") . "#p$post_id";	$return_forum_url = append_sid("{$phpbb_root_path}viewforum.$phpEx", "f=$forum_id");	$pm_id = 0;}else{	$redirect_url = append_sid("{$phpbb_root_path}ucp.$phpEx", "i=pm&mode=view&p=$pm_id");	$return_forum_url = '';	$post_id = 0;	$forum_id = 0;}// Has the report been cancelled?if (isset($_POST['cancel'])){	redirect($redirect_url);}if ($post_id){	// Grab all relevant data	$sql = 'SELECT t.*, p.*		FROM ' . POSTS_TABLE . ' p, ' . TOPICS_TABLE . " t		WHERE p.post_id = $post_id			AND p.topic_id = t.topic_id";	$result = $db->sql_query($sql);	$report_data = $db->sql_fetchrow($result);	$db->sql_freeresult($result);	if (!$report_data)	{		trigger_error('POST_NOT_EXIST');	}	$forum_id = (int) ($report_data['forum_id']) ? $report_data['forum_id'] : $forum_id;	$topic_id = (int) $report_data['topic_id'];	$sql = 'SELECT *		FROM ' . FORUMS_TABLE . '		WHERE forum_id = ' . $forum_id;	$result = $db->sql_query($sql);	$forum_data = $db->sql_fetchrow($result);	$db->sql_freeresult($result);	if (!$forum_data)	{		trigger_error('FORUM_NOT_EXIST');	}	// Check required permissions	$acl_check_ary = array('f_list' => 'POST_NOT_EXIST', 'f_read' => 'USER_CANNOT_READ', 'f_report' => 'USER_CANNOT_REPORT');	foreach ($acl_check_ary as $acl => $error)	{		if (!$auth->acl_get($acl, $forum_id))		{			trigger_error($error);		}	}	unset($acl_check_ary);	if ($report_data['post_reported'])	{		$message = $user->lang['ALREADY_REPORTED'];		$message .= '<br /><br />' . sprintf($user->lang['RETURN_TOPIC'], '<a href="' . $redirect_url . '">', '</a>');		$message .= '<br /><br />' . sprintf($user->lang['RETURN_FORUM'], '<a href="' . $return_forum_url . '">', '</a>');		trigger_error($message);	}}else{	// Grab all relevant data	$sql = 'SELECT p.*, pt.*		FROM ' . PRIVMSGS_TABLE . ' p, ' . PRIVMSGS_TO_TABLE . " pt		WHERE p.msg_id = $pm_id			AND p.msg_id = pt.msg_id			AND (p.author_id = " . $user->data['user_id'] . " OR pt.user_id = " . $user->data['user_id'] . ")";	$result = $db->sql_query($sql);	$report_data = $db->sql_fetchrow($result);	$db->sql_freeresult($result);	if (!$report_data)	{		$user->add_lang('ucp');		trigger_error('NO_MESSAGE');	}	if ($report_data['message_reported'])	{		$message = $user->lang['ALREADY_REPORTED_PM'];		$message .= '<br /><br />' . sprintf($user->lang['RETURN_PM'], '<a href="' . $redirect_url . '">', '</a>');		trigger_error($message);	}}// Submit report?if ($submit && $reason_id){	$sql = 'SELECT *		FROM ' . REPORTS_REASONS_TABLE . "		WHERE reason_id = $reason_id";	$result = $db->sql_query($sql);	$row = $db->sql_fetchrow($result);	$db->sql_freeresult($result);	if (!$row || (!$report_text && strtolower($row['reason_title']) == 'other'))	{		trigger_error('EMPTY_REPORT');	}	$sql_ary = array(		'reason_id'		=> (int) $reason_id,		'post_id'		=> $post_id,		'pm_id'			=> $pm_id,		'user_id'		=> (int) $user->data['user_id'],		'user_notify'	=> (int) $user_notify,		'report_closed'	=> 0,		'report_time'	=> (int) time(),		'report_text'	=> (string) $report_text	);	$sql = 'INSERT INTO ' . REPORTS_TABLE . ' ' . $db->sql_build_array('INSERT', $sql_ary);	$db->sql_query($sql);	$report_id = $db->sql_nextid();	if ($post_id)	{		$sql = 'UPDATE ' . POSTS_TABLE . '			SET post_reported = 1			WHERE post_id = ' . $post_id;		$db->sql_query($sql);		if (!$report_data['topic_reported'])		{			$sql = 'UPDATE ' . TOPICS_TABLE . '				SET topic_reported = 1				WHERE topic_id = ' . $report_data['topic_id'] . '					OR topic_moved_id = ' . $report_data['topic_id'];			$db->sql_query($sql);		}		$lang_return = $user->lang['RETURN_TOPIC'];		$lang_success = $user->lang['POST_REPORTED_SUCCESS'];	}	else	{		$sql = 'UPDATE ' . PRIVMSGS_TABLE . '			SET message_reported = 1			WHERE msg_id = ' . $pm_id;		$db->sql_query($sql);		$sql_ary = array(			'msg_id'		=> $pm_id,			'user_id'		=> ANONYMOUS,			'author_id'		=> (int) $report_data['author_id'],			'pm_deleted'	=> 0,			'pm_new'		=> 0,			'pm_unread'		=> 0,			'pm_replied'	=> 0,			'pm_marked'		=> 0,			'pm_forwarded'	=> 0,			'folder_id'		=> PRIVMSGS_INBOX,		);		$sql = 'INSERT INTO ' . PRIVMSGS_TO_TABLE . ' ' . $db->sql_build_array('INSERT', $sql_ary);		$db->sql_query($sql);		$lang_return = $user->lang['RETURN_PM'];		$lang_success = $user->lang['PM_REPORTED_SUCCESS'];	}	meta_refresh(3, $redirect_url);	$message = $lang_success . '<br /><br />' . sprintf($lang_return, '<a href="' . $redirect_url . '">', '</a>');	if ($return_forum_url)	{		$message .= '<br /><br />' . sprintf($user->lang['RETURN_FORUM'], '<a href="' . $return_forum_url . '">', '</a>');	}	trigger_error($message);}// Generate the reasonsdisplay_reasons($reason_id);$page_title = ($pm_id) ? $user->lang['REPORT_MESSAGE'] : $user->lang['REPORT_POST'];$template->assign_vars(array(	'S_REPORT_POST'		=> ($pm_id) ? false : true,	'REPORT_TEXT'		=> $report_text,	'S_REPORT_ACTION'	=> append_sid("{$phpbb_root_path}report.$phpEx", 'f=' . $forum_id . '&amp;p=' . $post_id . '&amp;pm=' . $pm_id),	'S_NOTIFY'			=> $user_notify,	'S_CAN_NOTIFY'		=> ($user->data['is_registered']) ? true : false));generate_forum_nav($forum_data);// Start output of pagepage_header($page_title);$template->set_filenames(array(	'body' => 'report_body.html'));page_footer();?>
<?php/**** @package acp* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @package module_install*/class acp_users_info{	function module()	{		return array(			'filename'	=> 'acp_users',			'title'		=> 'ACP_USER_MANAGEMENT',			'version'	=> '1.0.0',			'modes'		=> array(				'overview'		=> array('title' => 'ACP_MANAGE_USERS', 'auth' => 'acl_a_user', 'cat' => array('ACP_CAT_USERS')),				'feedback'		=> array('title' => 'ACP_USER_FEEDBACK', 'auth' => 'acl_a_user', 'display' => false, 'cat' => array('ACP_CAT_USERS')),				'warnings'		=> array('title' => 'ACP_USER_WARNINGS', 'auth' => 'acl_a_user', 'display' => false, 'cat' => array('ACP_CAT_USERS')),				'profile'		=> array('title' => 'ACP_USER_PROFILE', 'auth' => 'acl_a_user', 'display' => false, 'cat' => array('ACP_CAT_USERS')),				'prefs'			=> array('title' => 'ACP_USER_PREFS', 'auth' => 'acl_a_user', 'display' => false, 'cat' => array('ACP_CAT_USERS')),				'avatar'		=> array('title' => 'ACP_USER_AVATAR', 'auth' => 'acl_a_user', 'display' => false, 'cat' => array('ACP_CAT_USERS')),				'rank'			=> array('title' => 'ACP_USER_RANK', 'auth' => 'acl_a_user', 'display' => false, 'cat' => array('ACP_CAT_USERS')),				'sig'			=> array('title' => 'ACP_USER_SIG', 'auth' => 'acl_a_user', 'display' => false, 'cat' => array('ACP_CAT_USERS')),				'groups'		=> array('title' => 'ACP_USER_GROUPS', 'auth' => 'acl_a_user && acl_a_group', 'display' => false, 'cat' => array('ACP_CAT_USERS')),				'perm'			=> array('title' => 'ACP_USER_PERM', 'auth' => 'acl_a_user && acl_a_viewauth', 'display' => false, 'cat' => array('ACP_CAT_USERS')),				'attach'		=> array('title' => 'ACP_USER_ATTACH', 'auth' => 'acl_a_user', 'display' => false, 'cat' => array('ACP_CAT_USERS')),			),		);	}	function install()	{	}	function uninstall()	{	}}?>
<?php/**** @package VC* @version $Id$* @copyright (c) 2006 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @ignore*/if (!defined('IN_PHPBB')){	exit;}/*** Main non-gd captcha class* @ignore* @package VC*/class captcha{	var $filtered_pngs;	var $width = 320;	var $height = 50;	/**	* Define filtered pngs on init	*/	function captcha()	{		// If we can we will generate a single filtered png, we avoid nastiness via emulation of some Zlib stuff		$this->define_filtered_pngs();	}	/**	* Create the image containing $code with a seed of $seed	*/	function execute($code, $seed)	{		$img_height = $this->height - 10;		$img_width = 0;		mt_srand($seed);		$char_widths = $hold_chars = array();		$code_len = strlen($code);		for ($i = 0; $i < $code_len; $i++)		{			$char = $code[$i];			$width = mt_rand(0, 4);			$raw_width = $this->filtered_pngs[$char]['width'];			$char_widths[$i] = $width;			$img_width += $raw_width - $width;			// Split the char into chunks of $raw_width + 1 length			if (empty($hold_chars[$char]))			{				$hold_chars[$char] = str_split(base64_decode($this->filtered_pngs[$char]['data']), $raw_width + 1);			}		}		$offset_x = mt_rand(0, $this->width - $img_width);		$offset_y = mt_rand(0, $this->height - $img_height);		$image = '';		for ($i = 0; $i < $this->height; $i++)		{			$image .= chr(0);			if ($i > $offset_y && $i < $offset_y + $img_height)			{				for ($j = 0; $j < $offset_x; $j++)				{					$image .= chr(mt_rand(140, 255));				}				for ($j = 0; $j < $code_len; $j++)				{					$image .= $this->randomise(substr($hold_chars[$code{$j}][$i - $offset_y - 1], 1), $char_widths[$j]);				}				for ($j = $offset_x + $img_width; $j < $this->width; $j++)				{					$image .= chr(mt_rand(140, 255));				}			}			else			{				for ($j = 0; $j < $this->width; $j++)				{					$image .= chr(mt_rand(140, 255));				}			}		}		unset($hold_chars);		$image = $this->create_png($image, $this->width, $this->height);		// Output image		header('Content-Type: image/png');		header('Cache-control: no-cache, no-store');		echo $image;		exit;	}	/**	* This is designed to randomise the pixels of the image data within	* certain limits so as to keep it readable. It also varies the image	* width a little	*/	function randomise($scanline, $width)	{		$new_line = '';		$end = strlen($scanline) - ceil($width/2);		for ($i = floor($width/2); $i < $end; $i++)		{			$pixel = ord($scanline{$i});			if ($pixel < 190)			{				$new_line .= chr(mt_rand(0, 205));			}			else if ($pixel > 190)			{				$new_line .= chr(mt_rand(145, 255));			}			else			{				$new_line .= $scanline{$i};			}		}		return $new_line;	}	/**	* This creates a chunk of the given type, with the given data	* of the given length adding the relevant crc	*/	function png_chunk($length, $type, $data)	{		$raw = $type . $data;		return pack('N', $length) . $raw . pack('N', crc32($raw));	}	/**	* Creates greyscale 8bit png - The PNG spec can be found at	* http://www.libpng.org/pub/png/spec/PNG-Contents.html we use	* png because it's a fully recognised open standard and supported	* by practically all modern browsers and OSs	*/	function create_png($raw_image, $width, $height)	{		// SIG		$image = pack('C8', 137, 80, 78, 71, 13, 10, 26, 10);		// IHDR		$raw = pack('N2', $width, $height);		$raw .= pack('C5', 8, 0, 0, 0, 0);		$image .= $this->png_chunk(13, 'IHDR', $raw);		// IDAT		if (@extension_loaded('zlib'))		{			$raw_image = gzcompress($raw_image);			$length = strlen($raw_image);		}		else		{			// The total length of this image, uncompressed, is just a calculation of pixels			$length = ($width + 1) * $height;			// Adler-32 hash generation			// Note: The hash is _backwards_ so we must reverse it			if (@extension_loaded('hash'))			{				$adler_hash = strrev(hash('adler32', $raw_image, true));			}			else if (@extension_loaded('mhash'))			{				$adler_hash = strrev(mhash(MHASH_ADLER32, $raw_image));			}			else			{				// Optimized Adler-32 loop ported from the GNU Classpath project				$temp_length = $length;				$s1 = 1;				$s2 = $index = 0;				while ($temp_length > 0)				{					// We can defer the modulo operation:					// s1 maximally grows from 65521 to 65521 + 255 * 3800					// s2 maximally grows by 3800 * median(s1) = 2090079800 < 2^31					$substract_value = ($temp_length < 3800) ? $temp_length : 3800;					$temp_length -= $substract_value;					while (--$substract_value >= 0)					{						$s1 += ord($raw_image[$index]);						$s2 += $s1;						$index++;					}					$s1 %= 65521;					$s2 %= 65521;				}				$adler_hash = pack('N', ($s2 << 16) | $s1);			}			// This is the same thing as gzcompress($raw_image, 0) but does not need zlib			$raw_image = pack('C3v2', 0x78, 0x01, 0x01, $length, ~$length) . $raw_image . $adler_hash;			// The Zlib header + Adler hash make us add on 11			$length += 11;		}		// IDAT		$image .= $this->png_chunk($length, 'IDAT', $raw_image);		// IEND		$image .= $this->png_chunk(0, 'IEND', '');		return $image;	}	/**	* png image data	* Each 'data' element is base64_encoded uncompressed IDAT	*/	function define_filtered_pngs()	{		$this->filtered_pngs = array(			'0' => array(				'data' => 'AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8A///////////////////olFAkBAAAGDyA4P///M31/////////////wD////////////////0dAgAAAAAAAAAAAAEcPipFGHn////////////AP//////////////6DAAAAAAAAAAAAAAAAAALSEAN+T///////////8A//////////////xAAAAAAAAAAAAAAAAAAAAAACPA/////////////wD/////////////oAAAAAAAAAAAAAAAAAAAAAAAev//////////////AP////////////8oAAAAAAAAPNj/zDAAAAAAAABD//////////////8A////////////1AAAAAAAABjw////5BAAAAAAAADo/////////////wD///////////+QAAAAAAAAbP//////QgAAAAAAAKj/////////////AP///////////1wAAAAAAACs/////8AXAAAAAAAAcP////////////8A////////////OAAAAAAAAND////dNwAAAAAAAABI/////////////wD///////////8gAAAAAAAA4P//7koACwAAAAAAACT/////////////AP///////////wgAAAAAAAD///VqAwaPAAAAAAAAEP////////////8A////////////AAAAAAAAAP/8kQYDavUAAAAAAAAA/////////////wD///////////8AAAAAAAAA/6kNAEru/wAAAAAAAAD/////////////AP///////////wAAAAAAAADAIwA33f//AAAAAAAAAP////////////8A////////////FAAAAAAAADYAI8D///8AAAAAAAAQ/////////////wD///////////8kAAAAAAAAAA2p////5AAAAAAAACD/////////////AP///////////0gAAAAAAAAFkfz////UAAAAAAAAQP////////////8A////////////cAAAAAAAAET1/////7AAAAAAAABo/////////////wD///////////+oAAAAAAAAXfX/////sAAAAAAAAGj/////////////AAAAALgAAAAAAAAwAAAAAAAAAAAAAAD////////////oAAAAAAAACOT////oEAAAAAAAAOD/////////////AP////////////8+AAAAAAAAKMz/zDQAAAAAAAA0//////////////8A////////////7jgAAAAAAAAAAAAAAAAAAAAAAKT//////////////wD///////////VqAwIAAAAAAAAAAAAAAAAAAAA8////////////////AP//////////rQcDaVEAAAAAAAAAAAAAAAAAKOj///////////////8A///////////nblnu/IAIAAAAAAAAAAAAAFzw/////////////////wD////////////79////+iITCAAAAAgSITg////////////////////AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////w==',				'width' => 40			),			'1' => array(				'data' => 'AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////8BAAAAAAAP//////////////////AP////////////////////////9sAAAAAAAA//////////////////8A////////////////////////pAAAAAAAAAD//////////////////wD//////////////////////6wEAAAAAAAAAP//////////////////AP////////////////////h4AAAAAAAAAAAA//////////////////8A//////////////////ygJAAAAAAAAAAAAAD//////////////////wD//////////////9x8HAAAAAAAAAAAAAAAAP//////////////////AP//////////////AAAAAAAAAAAAAAAAAAAA//////////////////8A//////////////8AAAAAAAAAAAAAAAAAAAD//////////////////wD//////////////wAAAAAAAAR4AAAAAAAAAP//////////////////AP//////////////AAAAAAA4zP8AAAAAAAAA//////////////////8A//////////////8AAAA4sP///wAAAAAAAAD//////////////////wD//////////////yR80P//////AAAAAAAAAP//////////////////AP////////////////////////8AAAAAAAAA//////////////////8A/////////////////////////wAAAAAAAAD//////////////////wD/////////////////////////AAAAAAAAAP//////////////////AP////////////////////////8AAAAAAAAA//////////////////8A/////////////////////////wAAAAAAAAD//////////////////wD/////////////////////////AAAAAAAAAP//////////////////AP////////////////////////8AAAAAAAAA//////////////////8A/////////////////////////wAAAAAAAAD//////////////////wD/////////////////////////AAAAAAAAAP//////////////////AP////////////////////////8AAAAAAAAA//////////////////8A/////////////////////////wAAAAAAAAD//////////////////wD/////////////////////////AAAAAAAAAP//////////////////AP////////////////////////8AAAAAAAAA//////////////////8A/////////////////////////wAAAAAAAAD//////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8=',				'width' => 40			),			'2' => array(				'data' => 'AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP/////////////////okFAkCAAABCBIfNT///////////////////8A///////////////8hAgAAAAAAAAAAAAAAFTo/////////////////wD//////////////1QAAAAAAAAAAAAAAAAAACjo////////////////AP////////////+MAAAAAAAAAAAAAAAAAAAAADj///////////////8A////////////9BAAAAAAAAAAAAAAAAAAAAAAALD//////////////wD///////////+gAAAAAAAAAHjs+KwMAAAAAAAAVP//////////////AP///////////1gAAAAAAABM/////6QAAAAAAAAU//////////////8A////////////KAAAAAAAALj/////+AAAAAAAAAD//////////////wD///////////+MfGBMOCAI8P/////wAAAAAAAACP//////////////AP///////////////////////////5wAAAAAAAAw//////////////8A///////////////////////////oFAAAAAAAAHz//////////////wD/////////////////////////6CgAAAAAAAAE3P//////////////AP///////////////////////9ggAAAAAAAAAHT///////////////8A//////////////////////+0DAAAAAAAAAA8+P///////////////wD/////////////////////gAAAAAAAAAAAKOj/////////////////AP//////////////////9FAAAAAAAAAAADzw//////////////////8A/////////////////+g4AAAAAAAAAABk/P///////////////////wD////////////////oKAAAAAAAAAAMqP//////////////////////AP//////////////6CgAAAAAAAAAMNz///////////////////////8A//////////////g4AAAAAAAAAFT0/////////////////////////wD/////////////bAAAAAAAAABU/P//////////////////////////AP///////////8wAAAAAAAAAAAAAAAAAAAAAAAAA//////////////8A////////////SAAAAAAAAAAAAAAAAAAAAAAAAAD//////////////wD//////////9wAAAAAAAAAAAAAAAAAAAAAAAAAAP//////////////AP//////////hAAAAAAAAAAAAAAAAAAAAAAAAAAA//////////////8A//////////9AAAAAAAAAAAAAAAAAAAAAAAAAAAD//////////////wD//////////xAAAAAAAAAAAAAAAAAAAAAAAAAAAP//////////////AP////////////////////////////////////////////////////8=',				'width' => 40			),			'3' => array(				'data' => 'AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD////////////////8sGg0FAAAACA4cLz8////////////////////AP//////////////rBgAAAAAAAAAAAAAACTA//////////////////8A/////////////3QAAAAAAAAAAAAAAAAAAASs/////////////////wD///////////+YAAAAAAAAAAAAAAAAAAAAAAjc////////////////AP//////////6AwAAAAAAAAAAAAAAAAAAAAAAGT///////////////8A//////////94AAAAAAAABJDw/8g4AAAAAAAAHP///////////////wD//////////yAAAAAAAACE/////9gAAAAAAAAA////////////////AP///////////NSwiGQ4FOT//////AAAAAAAABD///////////////8A//////////////////////////+YAAAAAAAAVP///////////////wD//////////////////////P/ggAQAAAAAAATM////////////////AP////////////////////9gAAAAAAAAAAAElP////////////////8A/////////////////////0AAAAAAAAAAHLj//////////////////wD/////////////////////OAAAAAAAAAAwkPj/////////////////AP////////////////////8gAAAAAAAAAAAAINj///////////////8A/////////////////////xAAAAAAAAAAAAAAIPD//////////////wD/////////////////////uOz/4HgEAAAAAAAAhP//////////////AP///////////////////////////3wAAAAAAAAw//////////////8A////////////////////////////6AAAAAAAAAj//////////////wD/////////////////////////////AAAAAAAAAP//////////////AP//////////tJh8YEQoDNz//////+AAAAAAAAAY//////////////8A//////////88AAAAAAAAaP//////dAAAAAAAAEz//////////////wD//////////6QAAAAAAAAAdOD/5HQAAAAAAAAApP//////////////AP///////////CgAAAAAAAAAAAAAAAAAAAAAACD4//////////////8A////////////yAQAAAAAAAAAAAAAAAAAAAAEuP///////////////wD/////////////rAQAAAAAAAAAAAAAAAAABJD/////////////////AP//////////////zDQAAAAAAAAAAAAAACTA//////////////////8A/////////////////8BwOCAAAAAUNGi0/P///////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8=',				'width' => 40			),			'4' => array(				'data' => 'AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP//////////////////////////nAAAAAAAAAD///////////////8A/////////////////////////8AEAAAAAAAAAP///////////////wD////////////////////////gGAAAAAAAAAAA////////////////AP//////////////////////9DAAAAAAAAAAAAD///////////////8A//////////////////////9UAAAAAAAAAAAAAP///////////////wD/////////////////////hAAAAAAAAAAAAAAA////////////////AP///////////////////7QAAAAAAAAAAAAAAAD///////////////8A///////////////////UDAAAAAAUAAAAAAAAAP///////////////wD/////////////////7CQAAAAABMAAAAAAAAAA////////////////AP////////////////xEAAAAAACU/wAAAAAAAAD///////////////8A////////////////cAAAAAAAZP//AAAAAAAAAP///////////////wD//////////////6AAAAAAADz8//8AAAAAAAAA////////////////AP/////////////IBAAAAAAc6P///wAAAAAAAAD///////////////8A////////////5BgAAAAADMz/////AAAAAAAAAP///////////////wD///////////g0AAAAAACk//////8AAAAAAAAA////////////////AP//////////XAAAAAAAfP///////wAAAAAAAAD///////////////8A//////////8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAP///////////wD//////////wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA////////////AP//////////AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD///////////8A//////////8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAP///////////wD//////////wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA////////////AP//////////AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD///////////8A////////////////////////////AAAAAAAAAP///////////////wD///////////////////////////8AAAAAAAAA////////////////AP///////////////////////////wAAAAAAAAD///////////////8A////////////////////////////AAAAAAAAAP///////////////wD///////////////////////////8AAAAAAAAA////////////////AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8=',				'width' => 40			),			'5' => array(				'data' => 'AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP//////////////8AAAAAAAAAAAAAAAAAAAAAAA//////////////8A///////////////MAAAAAAAAAAAAAAAAAAAAAAD//////////////wD//////////////6wAAAAAAAAAAAAAAAAAAAAAAP//////////////AP//////////////iAAAAAAAAAAAAAAAAAAAAAAA//////////////8A//////////////9kAAAAAAAAAAAAAAAAAAAAAAD//////////////wD//////////////0QAAAAAAAAAAAAAAAAAAAAAAP//////////////AP//////////////IAAAAAAAYP////////////////////////////8A//////////////wAAAAAAAB8/////////////////////////////wD/////////////3AAAAAAAAIj/////////////////////////////AP////////////+4AAAAAAAAoLRYHAAEKGTE//////////////////8A/////////////5QAAAAAAAAQAAAAAAAAAABY9P///////////////wD/////////////dAAAAAAAAAAAAAAAAAAAAAA89P//////////////AP////////////9QAAAAAAAAAAAAAAAAAAAAAABg//////////////8A/////////////zAAAAAAAAAAAAAAAAAAAAAAAADQ/////////////wD/////////////IAAAAAAAAGjY/+h4BAAAAAAAAGz/////////////AP//////////////9NS0lHSc//////90AAAAAAAALP////////////8A/////////////////////////////9QAAAAAAAAE/////////////wD//////////////////////////////wAAAAAAAAD/////////////AP/////////////////////////////8AAAAAAAAEP////////////8A////////////pIRwWEAgDOD//////8wAAAAAAAA8/////////////wD///////////9EAAAAAAAAaP//////ZAAAAAAAAHz/////////////AP///////////6QAAAAAAAAAaOD/4GQAAAAAAAAE4P////////////8A/////////////CQAAAAAAAAAAAAAAAAAAAAAAGD//////////////wD/////////////yAQAAAAAAAAAAAAAAAAAAAAc7P//////////////AP//////////////rAwAAAAAAAAAAAAAAAAAGNj///////////////8A////////////////0EAAAAAAAAAAAAAAAFTo/////////////////wD//////////////////8h4QCAAAAAcQHzU////////////////////AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8=',				'width' => 40			),			'6' => array(				'data' => 'AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD///////////////////+0ZCwMAAAUNGjI////////////////////AP/////////////////EMAAAAAAAAAAAAABM6P////////////////8A////////////////lAQAAAAAAAAAAAAAAAAo6P///////////////wD//////////////6wAAAAAAAAAAAAAAAAAAABI////////////////AP/////////////oEAAAAAAAAAAAAAAAAAAAAACw//////////////8A/////////////3AAAAAAAAAoxP/YPAAAAAAAAEj//////////////wD////////////4EAAAAAAACOD////YDCBAVGiAoP//////////////AP///////////7gAAAAAAABY//////////////////////////////8A////////////eAAAAAAAAJT//////////////////////////////wD///////////9MAAAAAAAAvP/IXBgABCx03P//////////////////AP///////////ygAAAAAAADcdAAAAAAAAAAEiP////////////////8A////////////FAAAAAAAAFAAAAAAAAAAAAAAcP///////////////wD///////////8AAAAAAAAAAAAAAAAAAAAAAAAAlP//////////////AP///////////wAAAAAAAAAAAAAAAAAAAAAAAAAQ8P////////////8A////////////AAAAAAAAAABAyP/kZAAAAAAAAACQ/////////////wD///////////8MAAAAAAAALPj/////WAAAAAAAAET/////////////AP///////////yQAAAAAAACY///////MAAAAAAAAFP////////////8A////////////SAAAAAAAAMD///////wAAAAAAAAA/////////////wD///////////9wAAAAAAAAvP///////wAAAAAAAAD/////////////AP///////////7QAAAAAAACI///////UAAAAAAAAJP////////////8A////////////+AwAAAAAACDw/////2wAAAAAAABY/////////////wD/////////////cAAAAAAAADC8/Ox4AAAAAAAAAKj/////////////AP/////////////oEAAAAAAAAAAAAAAAAAAAAAAk/P////////////8A//////////////+oAAAAAAAAAAAAAAAAAAAABLj//////////////wD///////////////+QAAAAAAAAAAAAAAAAAACQ////////////////AP////////////////+0JAAAAAAAAAAAAAAkuP////////////////8A///////////////////8sGg0FAAADCxgqPz//////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8=',				'width' => 40			),			'7' => array(				'data' => 'AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD///////////8AAAAAAAAAAAAAAAAAAAAAAAAAAAD/////////////AP///////////wAAAAAAAAAAAAAAAAAAAAAAAAAAAP////////////8A////////////AAAAAAAAAAAAAAAAAAAAAAAAAAAA/////////////wD///////////8AAAAAAAAAAAAAAAAAAAAAAAAAAAD/////////////AP///////////wAAAAAAAAAAAAAAAAAAAAAAAAAABP////////////8A////////////AAAAAAAAAAAAAAAAAAAAAAAAAAy4/////////////wD//////////////////////////+QUAAAAAAAEuP//////////////AP/////////////////////////8QAAAAAAAAKT///////////////8A/////////////////////////4wAAAAAAAB0/////////////////wD////////////////////////cCAAAAAAANPz/////////////////AP///////////////////////0QAAAAAAATY//////////////////8A//////////////////////+0AAAAAAAAeP///////////////////wD//////////////////////CQAAAAAABTw////////////////////AP////////////////////+gAAAAAAAAkP////////////////////8A/////////////////////ywAAAAAABDw/////////////////////wD///////////////////+4AAAAAAAAbP//////////////////////AP///////////////////1wAAAAAAADQ//////////////////////8A///////////////////4DAAAAAAAMP///////////////////////wD//////////////////7QAAAAAAAB8////////////////////////AP//////////////////aAAAAAAAAMj///////////////////////8A//////////////////8oAAAAAAAM/P///////////////////////wD/////////////////8AAAAAAAAET/////////////////////////AP////////////////+0AAAAAAAAcP////////////////////////8A/////////////////4wAAAAAAACY/////////////////////////wD/////////////////WAAAAAAAAMD/////////////////////////AP////////////////80AAAAAAAA4P////////////////////////8A/////////////////xAAAAAAAAD4/////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8=',				'width' => 40			),			'8' => array(				'data' => 'AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD////////////////////IdDQUAAAEIEiA1P//////////////////AP/////////////////gRAAAAAAAAAAAAAAAROD///////////////8A////////////////0BgAAAAAAAAAAAAAAAAAEMj//////////////wD///////////////AcAAAAAAAAAAAAAAAAAAAAHPD/////////////AP//////////////hAAAAAAAAAAAAAAAAAAAAAAAhP////////////8A//////////////8sAAAAAAAAKMz/zCgAAAAAAAAs/////////////wD//////////////wAAAAAAAADM////zAAAAAAAAAD/////////////AP//////////////BAAAAAAAAP//////AAAAAAAABP////////////8A//////////////8sAAAAAAAAzP///9QAAAAAAAAw/////////////wD//////////////3wAAAAAAAAoyP/YNAAAAAAAAIT/////////////AP//////////////7BgAAAAAAAAAAAAAAAAAAAAc8P////////////8A////////////////xBgAAAAAAAAAAAAAAAAAGNj//////////////wD/////////////////tAQAAAAAAAAAAAAAAACo////////////////AP///////////////HAAAAAAAAAAAAAAAAAAAAB8//////////////8A//////////////9gAAAAAAAAAAAAAAAAAAAAAAB8/////////////wD/////////////wAAAAAAAAABk4P/UWAAAAAAAAATQ////////////AP////////////9UAAAAAAAAaP//////XAAAAAAAAGT///////////8A/////////////xgAAAAAAADg///////cAAAAAAAAJP///////////wD/////////////AAAAAAAAAP////////8AAAAAAAAA////////////AP////////////8AAAAAAAAA4P//////3AAAAAAAAAT///////////8A/////////////ygAAAAAAABg//////9cAAAAAAAALP///////////wD/////////////ZAAAAAAAAABY1P/cXAAAAAAAAABw////////////AP/////////////QAAAAAAAAAAAAAAAAAAAAAAAABNz///////////8A//////////////9gAAAAAAAAAAAAAAAAAAAAAAB0/////////////wD///////////////Q8AAAAAAAAAAAAAAAAAAAAUPz/////////////AP////////////////x4CAAAAAAAAAAAAAAAEIT8//////////////8A///////////////////smFQwGAAAABg0ZKT0/////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8=',				'width' => 40			),			'9' => array(				'data' => 'AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD///////////////////ysYCwMAAAUNGiw/P//////////////////AP////////////////+4JAAAAAAAAAAAAAAkuP////////////////8A////////////////lAQAAAAAAAAAAAAAAAAAkP///////////////wD//////////////8AEAAAAAAAAAAAAAAAAAAAAqP//////////////AP/////////////8JAAAAAAAAAAAAAAAAAAAAAAQ7P////////////8A/////////////6wAAAAAAAAAfOz8vCwAAAAAAABw/////////////wD/////////////WAAAAAAAAHD/////7BgAAAAAAAz4////////////AP////////////8kAAAAAAAA1P//////hAAAAAAAALT///////////8A/////////////wAAAAAAAAD///////+4AAAAAAAAcP///////////wD/////////////AAAAAAAAAPz//////8AAAAAAAABI////////////AP////////////8UAAAAAAAAzP//////lAAAAAAAACT///////////8A/////////////0QAAAAAAABY//////gsAAAAAAAADP///////////wD/////////////kAAAAAAAAABw5P/IPAAAAAAAAAAA////////////AP/////////////wEAAAAAAAAAAAAAAAAAAAAAAAAAD///////////8A//////////////+UAAAAAAAAAAAAAAAAAAAAAAAAAP///////////wD///////////////9wAAAAAAAAAAAAAFAAAAAAAAAU////////////AP////////////////+IBAAAAAAAAABw3AAAAAAAACj///////////8A///////////////////cdCwEABhcxP+8AAAAAAAATP///////////wD//////////////////////////////5AAAAAAAAB4////////////AP//////////////////////////////UAAAAAAAALj///////////8A//////////////+kgGxUQCAM2P///+AIAAAAAAAQ+P///////////wD//////////////0gAAAAAAAA42P/EKAAAAAAAAHD/////////////AP//////////////sAAAAAAAAAAAAAAAAAAAAAAQ6P////////////8A////////////////TAAAAAAAAAAAAAAAAAAAAKz//////////////wD////////////////oKAAAAAAAAAAAAAAAAASU////////////////AP/////////////////sUAAAAAAAAAAAAAAwxP////////////////8A////////////////////yHA0FAAADCxktP///////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8=',				'width' => 40			),			'A' => array(				'data' => 'AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD//////////////////+QAAAAAAAAAAAAAAOT/////////////////AP//////////////////kAAAAAAAAAAAAAAAkP////////////////8A//////////////////88AAAAAAAAAAAAAAA8/////////////////wD/////////////////5AAAAAAAAAAAAAAAAADk////////////////AP////////////////+QAAAAAAAAAAAAAAAAAJD///////////////8A/////////////////zwAAAAAAAAAAAAAAAAAPP///////////////wD////////////////kAAAAAAAAAAgAAAAAAAAA5P//////////////AP///////////////5AAAAAAAAAAgAAAAAAAAACQ//////////////8A////////////////PAAAAAAAAAz8HAAAAAAAADz//////////////wD//////////////+QAAAAAAAAAWP9kAAAAAAAAANz/////////////AP//////////////kAAAAAAAAACk/7wAAAAAAAAAhP////////////8A//////////////88AAAAAAAABOz//BQAAAAAAAAw/////////////wD/////////////4AAAAAAAAAA8////ZAAAAAAAAADc////////////AP////////////+EAAAAAAAAAIj///+8AAAAAAAAAIT///////////8A/////////////zAAAAAAAAAA2P////wQAAAAAAAAMP///////////wD////////////cAAAAAAAAACT//////1wAAAAAAAAA3P//////////AP///////////4QAAAAAAAAAAAAAAAAAAAAAAAAAAACE//////////8A////////////MAAAAAAAAAAAAAAAAAAAAAAAAAAAADD//////////wD//////////9wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAANz/////////AP//////////hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAhP////////8A//////////8wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAw/////////wD/////////3AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADc////////AP////////+EAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIT///////8A/////////zAAAAAAAAAAhP///////////2QAAAAAAAAAMP///////wD////////cAAAAAAAAAADM////////////vAAAAAAAAAAA3P//////AP///////4QAAAAAAAAAHP/////////////4DAAAAAAAAACE//////8A////////MAAAAAAAAABk//////////////9cAAAAAAAAADD//////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8=',				'width' => 40			),			'B' => array(				'data' => 'AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8A//////////8AAAAAAAAAAAAAAAAAAAAAEDh83P///////////////wD//////////wAAAAAAAAAAAAAAAAAAAAAAAAAEhP//////////////AP//////////AAAAAAAAAAAAAAAAAAAAAAAAAAAAeP////////////8A//////////8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAxP///////////wD//////////wAAAAAAAAAAAAAAAAAAAAAAAAAAAABY////////////AP//////////AAAAAAAAAAAAAAAAAAAAAAAAAAAAABT///////////8A//////////8AAAAAAAAAAP/////4zEwAAAAAAAAAAP///////////wD//////////wAAAAAAAAAA////////7AAAAAAAAAAQ////////////AP//////////AAAAAAAAAAD////////sAAAAAAAAAEj///////////8A//////////8AAAAAAAAAAP/////4zEQAAAAAAAAAtP///////////wD//////////wAAAAAAAAAAAAAAAAAAAAAAAAAAAFz/////////////AP//////////AAAAAAAAAAAAAAAAAAAAAAAAAAiA/P////////////8A//////////8AAAAAAAAAAAAAAAAAAAAAAAAIjPj//////////////wD//////////wAAAAAAAAAAAAAAAAAAAAAAAAAAGKz/////////////AP//////////AAAAAAAAAAAAAAAAAAAAAAAAAAAAAJT///////////8A//////////8AAAAAAAAAAAAAAAAAAAAAAAAAAAAABNz//////////wD//////////wAAAAAAAAAA///////sqCAAAAAAAAAAbP//////////AP//////////AAAAAAAAAAD/////////yAAAAAAAAAAs//////////8A//////////8AAAAAAAAAAP//////////AAAAAAAAAAT//////////wD//////////wAAAAAAAAAA/////////7wAAAAAAAAAAP//////////AP//////////AAAAAAAAAAD//////+ikGAAAAAAAAAAY//////////8A//////////8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAFT//////////wD//////////wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAsP//////////AP//////////AAAAAAAAAAAAAAAAAAAAAAAAAAAAADj///////////8A//////////8AAAAAAAAAAAAAAAAAAAAAAAAAAAAc6P///////////wD//////////wAAAAAAAAAAAAAAAAAAAAAAAAAATOj/////////////AP//////////AAAAAAAAAAAAAAAAAAAEIEBkkNj///////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8=',				'width' => 40			),			'C' => array(				'data' => 'AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP//////////////////5JRULBAAAAgkTIDQ//////////////////8A////////////////1FAAAAAAAAAAAAAAAABAyP///////////////wD//////////////4gEAAAAAAAAAAAAAAAAAAAElP//////////////AP////////////9wAAAAAAAAAAAAAAAAAAAAAAAAlP////////////8A////////////kAAAAAAAAAAAAAAAAAAAAAAAAAAEyP///////////wD//////////9wIAAAAAAAAAAAAAAAAAAAAAAAAAAAw////////////AP//////////WAAAAAAAAAAAWMz/8JwQAAAAAAAAAACw//////////8A/////////+wEAAAAAAAAAID//////9QMAAAAAAAAAET//////////wD/////////nAAAAAAAAAAo/P///////3wAAAAABDBspP//////////AP////////9gAAAAAAAAAIz/////////3BxQjMT0//////////////8A/////////zQAAAAAAAAAzP///////////////////////////////wD/////////GAAAAAAAAADo////////////////////////////////AP////////8AAAAAAAAAAP////////////////////////////////8A/////////wAAAAAAAAAA/////////////////////////////////wD/////////AAAAAAAAAAD/////////////////////////////////AP////////8cAAAAAAAAAOj///////////////////////////////8A/////////zgAAAAAAAAA0P/////////kIGio7P///////////////wD/////////bAAAAAAAAACg/////////5wAAAAAMHS49P//////////AP////////+oAAAAAAAAAEz/////////PAAAAAAAAAAc//////////8A//////////QIAAAAAAAAALz//////6QAAAAAAAAAAGT//////////wD//////////3AAAAAAAAAADIzo/+SEBAAAAAAAAAAAyP//////////AP//////////7BAAAAAAAAAAAAAAAAAAAAAAAAAAAED///////////8A////////////rAAAAAAAAAAAAAAAAAAAAAAAAAAE0P///////////wD/////////////fAAAAAAAAAAAAAAAAAAAAAAAAJz/////////////AP//////////////iAQAAAAAAAAAAAAAAAAAAASY//////////////8A////////////////yEAAAAAAAAAAAAAAAAA8yP///////////////wD//////////////////9yIUCwQAAAAIEB4yP//////////////////AP////////////////////////////////////////////////////8=',				'width' => 40			),			'D' => array(				'data' => 'AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD///////////8AAAAAAAAAAAAAAAAADChQkOT/////////////////AP///////////wAAAAAAAAAAAAAAAAAAAAAABGjw//////////////8A////////////AAAAAAAAAAAAAAAAAAAAAAAAACDY/////////////wD///////////8AAAAAAAAAAAAAAAAAAAAAAAAAABjk////////////AP///////////wAAAAAAAAAAAAAAAAAAAAAAAAAAAED///////////8A////////////AAAAAAAAAAAAAAAAAAAAAAAAAAAAAKj//////////wD///////////8AAAAAAAAAAP///+isSAAAAAAAAAAANP//////////AP///////////wAAAAAAAAAA////////hAAAAAAAAAAA2P////////8A////////////AAAAAAAAAAD/////////MAAAAAAAAACQ/////////wD///////////8AAAAAAAAAAP////////+MAAAAAAAAAFj/////////AP///////////wAAAAAAAAAA/////////8gAAAAAAAAAMP////////8A////////////AAAAAAAAAAD/////////5AAAAAAAAAAY/////////wD///////////8AAAAAAAAAAP//////////AAAAAAAAAAD/////////AP///////////wAAAAAAAAAA//////////8AAAAAAAAAAP////////8A////////////AAAAAAAAAAD//////////wAAAAAAAAAA/////////wD///////////8AAAAAAAAAAP/////////wAAAAAAAAABD/////////AP///////////wAAAAAAAAAA/////////9QAAAAAAAAAJP////////8A////////////AAAAAAAAAAD/////////qAAAAAAAAABI/////////wD///////////8AAAAAAAAAAP////////9QAAAAAAAAAHj/////////AP///////////wAAAAAAAAAA////////uAAAAAAAAAAAvP////////8A////////////AAAAAAAAAAD////w0HwEAAAAAAAAACT8/////////wD///////////8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAoP//////////AP///////////wAAAAAAAAAAAAAAAAAAAAAAAAAAADz8//////////8A////////////AAAAAAAAAAAAAAAAAAAAAAAAAAAY6P///////////wD///////////8AAAAAAAAAAAAAAAAAAAAAAAAAKNz/////////////AP///////////wAAAAAAAAAAAAAAAAAAAAAACHT0//////////////8A////////////AAAAAAAAAAAAAAAAABg4bKj0/////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8=',				'width' => 40			),			'E' => array(				'data' => 'AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP//////////AAAAAAAAAAAAAAAAAAAAAAAAAAAAAP////////////8A//////////8AAAAAAAAAAAAAAAAAAAAAAAAAAAAA/////////////wD//////////wAAAAAAAAAAAAAAAAAAAAAAAAAAAAD/////////////AP//////////AAAAAAAAAAAAAAAAAAAAAAAAAAAAAP////////////8A//////////8AAAAAAAAAAAAAAAAAAAAAAAAAAAAA/////////////wD//////////wAAAAAAAAAAAAAAAAAAAAAAAAAAAAD/////////////AP//////////AAAAAAAAAAD///////////////////////////////8A//////////8AAAAAAAAAAP///////////////////////////////wD//////////wAAAAAAAAAA////////////////////////////////AP//////////AAAAAAAAAAD///////////////////////////////8A//////////8AAAAAAAAAAAAAAAAAAAAAAAAAAAD//////////////wD//////////wAAAAAAAAAAAAAAAAAAAAAAAAAAAP//////////////AP//////////AAAAAAAAAAAAAAAAAAAAAAAAAAAA//////////////8A//////////8AAAAAAAAAAAAAAAAAAAAAAAAAAAD//////////////wD//////////wAAAAAAAAAAAAAAAAAAAAAAAAAAAP//////////////AP//////////AAAAAAAAAAAAAAAAAAAAAAAAAAAA//////////////8A//////////8AAAAAAAAAAP///////////////////////////////wD//////////wAAAAAAAAAA////////////////////////////////AP//////////AAAAAAAAAAD///////////////////////////////8A//////////8AAAAAAAAAAP///////////////////////////////wD//////////wAAAAAAAAAA////////////////////////////////AP//////////AAAAAAAAAAAAAAAAAAAAAAAAAAAAAP////////////8A//////////8AAAAAAAAAAAAAAAAAAAAAAAAAAAAA/////////////wD//////////wAAAAAAAAAAAAAAAAAAAAAAAAAAAAD/////////////AP//////////AAAAAAAAAAAAAAAAAAAAAAAAAAAAAP////////////8A//////////8AAAAAAAAAAAAAAAAAAAAAAAAAAAAA/////////////wD//////////wAAAAAAAAAAAAAAAAAAAAAAAAAAAAD/////////////AP////////////////////////////////////////////////////8=',				'width' => 40			),			'F' => array(				'data' => 'AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8A/////////////wAAAAAAAAAAAAAAAAAAAAAAAAAA/////////////wD/////////////AAAAAAAAAAAAAAAAAAAAAAAAAAD/////////////AP////////////8AAAAAAAAAAAAAAAAAAAAAAAAAAP////////////8A/////////////wAAAAAAAAAAAAAAAAAAAAAAAAAA/////////////wD/////////////AAAAAAAAAAAAAAAAAAAAAAAAAAD/////////////AP////////////8AAAAAAAAAAAAAAAAAAAAAAAAAAP////////////8A/////////////wAAAAAAAAAA/////////////////////////////wD/////////////AAAAAAAAAAD/////////////////////////////AP////////////8AAAAAAAAAAP////////////////////////////8A/////////////wAAAAAAAAAA/////////////////////////////wD/////////////AAAAAAAAAAAAAAAAAAAAAAAA////////////////AP////////////8AAAAAAAAAAAAAAAAAAAAAAAD///////////////8A/////////////wAAAAAAAAAAAAAAAAAAAAAAAP///////////////wD/////////////AAAAAAAAAAAAAAAAAAAAAAAA////////////////AP////////////8AAAAAAAAAAAAAAAAAAAAAAAD///////////////8A/////////////wAAAAAAAAAAAAAAAAAAAAAAAP///////////////wD/////////////AAAAAAAAAAD/////////////////////////////AP////////////8AAAAAAAAAAP////////////////////////////8A/////////////wAAAAAAAAAA/////////////////////////////wD/////////////AAAAAAAAAAD/////////////////////////////AP////////////8AAAAAAAAAAP////////////////////////////8A/////////////wAAAAAAAAAA/////////////////////////////wD/////////////AAAAAAAAAAD/////////////////////////////AP////////////8AAAAAAAAAAP////////////////////////////8A/////////////wAAAAAAAAAA/////////////////////////////wD/////////////AAAAAAAAAAD/////////////////////////////AP////////////8AAAAAAAAAAP////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8=',				'width' => 40			),			'G' => array(				'data' => 'AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD//////////////////MB8TCgQAAAACCA4YJzs////////////////AP///////////////JQcAAAAAAAAAAAAAAAAAAhw8P////////////8A/////////////9gwAAAAAAAAAAAAAAAAAAAAAAAk2P///////////wD////////////EDAAAAAAAAAAAAAAAAAAAAAAAAAAc7P//////////AP//////////2AwAAAAAAAAAAAAAAAAAAAAAAAAAAABY//////////8A//////////wwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADQ/////////wD/////////kAAAAAAAAAAAEHzQ/P/gmCAAAAAAAAAAAFz/////////AP////////wcAAAAAAAAACjg////////8CwAAAAAAAAgWP////////8A////////vAAAAAAAAAAI2P//////////yBRAcJjI8P///////////wD///////94AAAAAAAAAGD/////////////////////////////////AP///////0AAAAAAAAAAsP////////////////////////////////8A////////IAAAAAAAAADc/////////////////////////////////wD///////8AAAAAAAAAAP///////wAAAAAAAAAAAAAAAAD/////////AP///////wAAAAAAAAAA////////AAAAAAAAAAAAAAAAAP////////8A////////AAAAAAAAAAD///////8AAAAAAAAAAAAAAAAA/////////wD///////8gAAAAAAAAAOD//////wAAAAAAAAAAAAAAAAD/////////AP///////0AAAAAAAAAAtP//////AAAAAAAAAAAAAAAAAP////////8A////////cAAAAAAAAABw//////8AAAAAAAAAAAAAAAAA/////////wD///////+8AAAAAAAAABDs////////////AAAAAAAAAAD/////////AP////////wYAAAAAAAAADz0//////////AAAAAAAAAAAP////////8A/////////5AAAAAAAAAAACCY4P//3KhcCAAAAAAAAAAA/////////wD/////////+CAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD/////////AP//////////xAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIP////////8A////////////rAQAAAAAAAAAAAAAAAAAAAAAAAAAAGTw/////////wD/////////////vBQAAAAAAAAAAAAAAAAAAAAAADjI////////////AP//////////////8HAQAAAAAAAAAAAAAAAAAEiw//////////////8A//////////////////iwcEAgBAAABCA4aKDk/////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8=',				'width' => 40			),			'H' => array(				'data' => 'AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////8AAAAAAAAAAP///////////wAAAAAAAAAA//////////8A/////////wAAAAAAAAAA////////////AAAAAAAAAAD//////////wD/////////AAAAAAAAAAD///////////8AAAAAAAAAAP//////////AP////////8AAAAAAAAAAP///////////wAAAAAAAAAA//////////8A/////////wAAAAAAAAAA////////////AAAAAAAAAAD//////////wD/////////AAAAAAAAAAD///////////8AAAAAAAAAAP//////////AP////////8AAAAAAAAAAP///////////wAAAAAAAAAA//////////8A/////////wAAAAAAAAAA////////////AAAAAAAAAAD//////////wD/////////AAAAAAAAAAD///////////8AAAAAAAAAAP//////////AP////////8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA//////////8A/////////wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD//////////wD/////////AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAP//////////AP////////8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA//////////8A/////////wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD//////////wD/////////AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAP//////////AP////////8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA//////////8A/////////wAAAAAAAAAA////////////AAAAAAAAAAD//////////wD/////////AAAAAAAAAAD///////////8AAAAAAAAAAP//////////AP////////8AAAAAAAAAAP///////////wAAAAAAAAAA//////////8A/////////wAAAAAAAAAA////////////AAAAAAAAAAD//////////wD/////////AAAAAAAAAAD///////////8AAAAAAAAAAP//////////AP////////8AAAAAAAAAAP///////////wAAAAAAAAAA//////////8A/////////wAAAAAAAAAA////////////AAAAAAAAAAD//////////wD/////////AAAAAAAAAAD///////////8AAAAAAAAAAP//////////AP////////8AAAAAAAAAAP///////////wAAAAAAAAAA//////////8A/////////wAAAAAAAAAA////////////AAAAAAAAAAD//////////wD/////////AAAAAAAAAAD///////////8AAAAAAAAAAP//////////AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8=',				'width' => 40			),			'I' => array(				'data' => 'AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////AAAAAAAAAAAAAAAAAAAAAAAA////////////////AP////////////8AAAAAAAAAAAAAAAAAAAAAAAD///////////////8A/////////////wAAAAAAAAAAAAAAAAAAAAAAAP///////////////wD/////////////AAAAAAAAAAAAAAAAAAAAAAAA////////////////AP////////////8AAAAAAAAAAAAAAAAAAAAAAAD///////////////8A/////////////wAAAAAAAAAAAAAAAAAAAAAAAP///////////////wD/////////////AAAAAAAAAAAAAAAAAAAAAAAA////////////////AP///////////////////wAAAAAAAAAA//////////////////////8A////////////////////AAAAAAAAAAD//////////////////////wD///////////////////8AAAAAAAAAAP//////////////////////AP///////////////////wAAAAAAAAAA//////////////////////8A////////////////////AAAAAAAAAAD//////////////////////wD///////////////////8AAAAAAAAAAP//////////////////////AP///////////////////wAAAAAAAAAA//////////////////////8A////////////////////AAAAAAAAAAD//////////////////////wD///////////////////8AAAAAAAAAAP//////////////////////AP///////////////////wAAAAAAAAAA//////////////////////8A////////////////////AAAAAAAAAAD//////////////////////wD///////////////////8AAAAAAAAAAP//////////////////////AP///////////////////wAAAAAAAAAA//////////////////////8A////////////////////AAAAAAAAAAD//////////////////////wD///////////////////8AAAAAAAAAAP//////////////////////AP////////////8AAAAAAAAAAAAAAAAAAAAAAAD///////////////8A/////////////wAAAAAAAAAAAAAAAAAAAAAAAP///////////////wD/////////////AAAAAAAAAAAAAAAAAAAAAAAA////////////////AP////////////8AAAAAAAAAAAAAAAAAAAAAAAD///////////////8A/////////////wAAAAAAAAAAAAAAAAAAAAAAAP///////////////wD/////////////AAAAAAAAAAAAAAAAAAAAAAAA////////////////AP////////////8AAAAAAAAAAAAAAAAAAAAAAAD///////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8=',				'width' => 40			),			'J' => array(				'data' => 'AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP///////////////////////////wAAAAAAAAAA//////////////8A////////////////////////////AAAAAAAAAAD//////////////wD///////////////////////////8AAAAAAAAAAP//////////////AP///////////////////////////wAAAAAAAAAA//////////////8A////////////////////////////AAAAAAAAAAD//////////////wD///////////////////////////8AAAAAAAAAAP//////////////AP///////////////////////////wAAAAAAAAAA//////////////8A////////////////////////////AAAAAAAAAAD//////////////wD///////////////////////////8AAAAAAAAAAP//////////////AP///////////////////////////wAAAAAAAAAA//////////////8A////////////////////////////AAAAAAAAAAD//////////////wD///////////////////////////8AAAAAAAAAAP//////////////AP///////////////////////////wAAAAAAAAAA//////////////8A////////////////////////////AAAAAAAAAAD//////////////wD///////////////////////////8AAAAAAAAAAP//////////////AP///////////////////////////wAAAAAAAAAA//////////////8A////////////////////////////AAAAAAAAAAj//////////////wD//////////+zMrIxwUDAQ//////wAAAAAAAAAIP//////////////AP//////////DAAAAAAAAADo////2AAAAAAAAAA0//////////////8A//////////8wAAAAAAAAAKj///+YAAAAAAAAAFj//////////////wD//////////2gAAAAAAAAAIND/yBgAAAAAAAAAkP//////////////AP//////////vAAAAAAAAAAAAAAAAAAAAAAAAADc//////////////8A////////////MAAAAAAAAAAAAAAAAAAAAAAAUP///////////////wD////////////EBAAAAAAAAAAAAAAAAAAAABjk////////////////AP////////////+sBAAAAAAAAAAAAAAAAAAY2P////////////////8A///////////////EMAAAAAAAAAAAAAAAVOj//////////////////wD/////////////////vHBAIAAAABg8fNT/////////////////////AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8=',				'width' => 40			),			'K' => array(				'data' => 'AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD///////8AAAAAAAAAAP//////////wAQAAAAAAAAAAABw////////AP///////wAAAAAAAAAA/////////9AMAAAAAAAAAAAAcP////////8A////////AAAAAAAAAAD////////cGAAAAAAAAAAAAHD//////////wD///////8AAAAAAAAAAP//////6CgAAAAAAAAAAABs////////////AP///////wAAAAAAAAAA//////Q0AAAAAAAAAAAAVPz///////////8A////////AAAAAAAAAAD////8RAAAAAAAAAAAAFT8/////////////wD///////8AAAAAAAAAAP///1gAAAAAAAAAAABU/P//////////////AP///////wAAAAAAAAAA//9wAAAAAAAAAAAASPz///////////////8A////////AAAAAAAAAAD/jAAAAAAAAAAAADz0/////////////////wD///////8AAAAAAAAAAKQAAAAAAAAAAAA89P//////////////////AP///////wAAAAAAAAAABAAAAAAAAAAAFPT///////////////////8A////////AAAAAAAAAAAAAAAAAAAAAAAApP///////////////////wD///////8AAAAAAAAAAAAAAAAAAAAAAAAU8P//////////////////AP///////wAAAAAAAAAAAAAAAAAAAAAAAABk//////////////////8A////////AAAAAAAAAAAAAAAAAAAAAAAAAADE/////////////////wD///////8AAAAAAAAAAAAAAAAoEAAAAAAAACz8////////////////AP///////wAAAAAAAAAAAAAAGNiAAAAAAAAAAIj///////////////8A////////AAAAAAAAAAAAABjY//gYAAAAAAAACOD//////////////wD///////8AAAAAAAAAAAAY2P///5wAAAAAAAAASP//////////////AP///////wAAAAAAAAAAGNj//////CgAAAAAAAAAqP////////////8A////////AAAAAAAAAADI////////sAAAAAAAAAAc8P///////////wD///////8AAAAAAAAAAP//////////QAAAAAAAAABs////////////AP///////wAAAAAAAAAA///////////IAAAAAAAAAATI//////////8A////////AAAAAAAAAAD///////////9YAAAAAAAAADD8/////////wD///////8AAAAAAAAAAP///////////9wEAAAAAAAAAJD/////////AP///////wAAAAAAAAAA/////////////3AAAAAAAAAADOT///////8A////////AAAAAAAAAAD/////////////7BAAAAAAAAAAUP///////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8=',				'width' => 40			),			'L' => array(				'data' => 'AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////8AAAAAAAAAAP////////////////////////////8A/////////////wAAAAAAAAAA/////////////////////////////wD/////////////AAAAAAAAAAD/////////////////////////////AP////////////8AAAAAAAAAAP////////////////////////////8A/////////////wAAAAAAAAAA/////////////////////////////wD/////////////AAAAAAAAAAD/////////////////////////////AP////////////8AAAAAAAAAAP////////////////////////////8A/////////////wAAAAAAAAAA/////////////////////////////wD/////////////AAAAAAAAAAD/////////////////////////////AP////////////8AAAAAAAAAAP////////////////////////////8A/////////////wAAAAAAAAAA/////////////////////////////wD/////////////AAAAAAAAAAD/////////////////////////////AP////////////8AAAAAAAAAAP////////////////////////////8A/////////////wAAAAAAAAAA/////////////////////////////wD/////////////AAAAAAAAAAD/////////////////////////////AP////////////8AAAAAAAAAAP////////////////////////////8A/////////////wAAAAAAAAAA/////////////////////////////wD/////////////AAAAAAAAAAD/////////////////////////////AP////////////8AAAAAAAAAAP////////////////////////////8A/////////////wAAAAAAAAAA/////////////////////////////wD/////////////AAAAAAAAAAAAAAAAAAAAAAAAAAD/////////////AP////////////8AAAAAAAAAAAAAAAAAAAAAAAAAAP////////////8A/////////////wAAAAAAAAAAAAAAAAAAAAAAAAAA/////////////wD/////////////AAAAAAAAAAAAAAAAAAAAAAAAAAD/////////////AP////////////8AAAAAAAAAAAAAAAAAAAAAAAAAAP////////////8A/////////////wAAAAAAAAAAAAAAAAAAAAAAAAAA/////////////wD/////////////AAAAAAAAAAAAAAAAAAAAAAAAAAD/////////////AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8=',				'width' => 40			),			'M' => array(				'data' => 'AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8A//////8AAAAAAAAAAAAAAHz//////3wAAAAAAAAAAAAAAP///////wD//////wAAAAAAAAAAAAAATP//////UAAAAAAAAAAAAAAA////////AP//////AAAAAAAAAAAAAAAc//////8cAAAAAAAAAAAAAAD///////8A//////8AAAAAAAAAAAAAAADw////8AAAAAAAAAAAAAAAAP///////wD//////wAAAAAAAAAAAAAAALz////AAAAAAAAAAAAAAAAA////////AP//////AAAAAAAAAAAAAAAAkP///5AAAAAAAAAAAAAAAAD///////8A//////8AAAAAAAAAAAAAAABc////ZAAAAAAAAAAAAAAAAP///////wD//////wAAAAAAAAAoAAAAADD///8wAAAAACQAAAAAAAAA////////AP//////AAAAAAAAAFwAAAAABPz//AgAAAAAXAAAAAAAAAD///////8A//////8AAAAAAAAAkAAAAAAA0P/UAAAAAACQAAAAAAAAAP///////wD//////wAAAAAAAADMAAAAAACg/6gAAAAAAMQAAAAAAAAA////////AP//////AAAAAAAAAPgEAAAAAHD/dAAAAAAE+AAAAAAAAAD///////8A//////8AAAAAAAAA/zQAAAAAQP9IAAAAADD/AAAAAAAAAP///////wD//////wAAAAAAAAD/bAAAAAAQ/xQAAAAAaP8AAAAAAAAA////////AP//////AAAAAAAAAP+gAAAAAADQAAAAAACc/wAAAAAAAAD///////8A//////8AAAAAAAAA/9QAAAAAAGgAAAAAAND/AAAAAAAAAP///////wD//////wAAAAAAAAD//wwAAAAAFAAAAAAM/P8AAAAAAAAA////////AP//////AAAAAAAAAP//RAAAAAAAAAAAADz//wAAAAAAAAD///////8A//////8AAAAAAAAA//94AAAAAAAAAAAAcP//AAAAAAAAAP///////wD//////wAAAAAAAAD//7AAAAAAAAAAAACo//8AAAAAAAAA////////AP//////AAAAAAAAAP//5AAAAAAAAAAAANz//wAAAAAAAAD///////8A//////8AAAAAAAAA////HAAAAAAAAAAQ////AAAAAAAAAP///////wD//////wAAAAAAAAD///9QAAAAAAAAAEz///8AAAAAAAAA////////AP//////AAAAAAAAAP///4gAAAAAAAAAfP///wAAAAAAAAD///////8A//////8AAAAAAAAA////vAAAAAAAAACw////AAAAAAAAAP///////wD//////wAAAAAAAAD////wAAAAAAAAAOz///8AAAAAAAAA////////AP//////AAAAAAAAAP////8sAAAAAAAc/////wAAAAAAAAD///////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8=',				'width' => 40			),			'N' => array(				'data' => 'AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////AAAAAAAAALD/////////////AAAAAAAAAP//////////AP////////8AAAAAAAAAFOj///////////8AAAAAAAAA//////////8A/////////wAAAAAAAAAASP///////////wAAAAAAAAD//////////wD/////////AAAAAAAAAAAAkP//////////AAAAAAAAAP//////////AP////////8AAAAAAAAAAAAI1P////////8AAAAAAAAA//////////8A/////////wAAAAAAAAAAAAAw+P///////wAAAAAAAAD//////////wD/////////AAAAAAAAAAAAAABw////////AAAAAAAAAP//////////AP////////8AAAAAAAAAAAAAAAC8//////8AAAAAAAAA//////////8A/////////wAAAAAAAAAAAAAAABzs/////wAAAAAAAAD//////////wD/////////AAAAAAAAAAAAAAAAAFD/////AAAAAAAAAP//////////AP////////8AAAAAAAAAAAAAAAAAAJz///8AAAAAAAAA//////////8A/////////wAAAAAAAAAUAAAAAAAADNz//wAAAAAAAAD//////////wD/////////AAAAAAAAALQAAAAAAAAANPz/AAAAAAAAAP//////////AP////////8AAAAAAAAA/2wAAAAAAAAAfP8AAAAAAAAA//////////8A/////////wAAAAAAAAD/+CwAAAAAAAAExAAAAAAAAAD//////////wD/////////AAAAAAAAAP//0AQAAAAAAAAgAAAAAAAAAP//////////AP////////8AAAAAAAAA////jAAAAAAAAAAAAAAAAAAA//////////8A/////////wAAAAAAAAD/////RAAAAAAAAAAAAAAAAAD//////////wD/////////AAAAAAAAAP/////kFAAAAAAAAAAAAAAAAP//////////AP////////8AAAAAAAAA//////+sAAAAAAAAAAAAAAAA//////////8A/////////wAAAAAAAAD///////9kAAAAAAAAAAAAAAD//////////wD/////////AAAAAAAAAP////////QkAAAAAAAAAAAAAP//////////AP////////8AAAAAAAAA/////////8wEAAAAAAAAAAAA//////////8A/////////wAAAAAAAAD//////////4QAAAAAAAAAAAD//////////wD/////////AAAAAAAAAP///////////DwAAAAAAAAAAP//////////AP////////8AAAAAAAAA////////////4BAAAAAAAAAA//////////8A/////////wAAAAAAAAD/////////////qAAAAAAAAAD//////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8=',				'width' => 40			),			'O' => array(				'data' => 'AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8A///////////////////0qGw4HAAAABw4aKT0/////////////////wD////////////////wcAwAAAAAAAAAAAAAAAho6P//////////////AP//////////////uBQAAAAAAAAAAAAAAAAAAAAMoP////////////8A/////////////6AEAAAAAAAAAAAAAAAAAAAAAAAAkP///////////wD///////////+4BAAAAAAAAAAAAAAAAAAAAAAAAAAAoP//////////AP//////////8BQAAAAAAAAAAAAAAAAAAAAAAAAAAAAM5P////////8A//////////9wAAAAAAAAAAAsrPD/7KQsAAAAAAAAAABg/////////wD/////////+BAAAAAAAAAAUPj///////hQAAAAAAAAAAjs////////AP////////+sAAAAAAAAABDw//////////AYAAAAAAAAAKD///////8A/////////2wAAAAAAAAAdP///////////3wAAAAAAAAAYP///////wD/////////OAAAAAAAAAC4////////////xAAAAAAAAAAw////////AP////////8cAAAAAAAAAOD////////////oAAAAAAAAABT///////8A/////////wAAAAAAAAAA//////////////8AAAAAAAAAAP///////wD/////////AAAAAAAAAAD//////////////wAAAAAAAAAA////////AP////////8AAAAAAAAAAP/////////////8AAAAAAAAAAD///////8A/////////xwAAAAAAAAA5P///////////+AAAAAAAAAAHP///////wD/////////NAAAAAAAAAC8////////////uAAAAAAAAAA4////////AP////////9oAAAAAAAAAHj///////////98AAAAAAAAAGT///////8A/////////6gAAAAAAAAAGPD/////////+BgAAAAAAAAApP///////wD/////////9AwAAAAAAAAAUPz///////xcAAAAAAAAAAjs////////AP//////////cAAAAAAAAAAALKjs//CwOAAAAAAAAAAAYP////////8A///////////wFAAAAAAAAAAAAAAAAAAAAAAAAAAAAAzk/////////wD///////////+4BAAAAAAAAAAAAAAAAAAAAAAAAAAAoP//////////AP////////////+QAAAAAAAAAAAAAAAAAAAAAAAAAJD///////////8A//////////////+sEAAAAAAAAAAAAAAAAAAAAAyg/////////////wD////////////////oZAgAAAAAAAAAAAAAAARg4P//////////////AP//////////////////9KhsOCAAAAAUMFyc7P////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8=',				'width' => 40			),			'P' => array(				'data' => 'AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP///////////wAAAAAAAAAAAAAAAAAACCxguP////////////////8A////////////AAAAAAAAAAAAAAAAAAAAAAAAOOD//////////////wD///////////8AAAAAAAAAAAAAAAAAAAAAAAAAGOD/////////////AP///////////wAAAAAAAAAAAAAAAAAAAAAAAAAARP////////////8A////////////AAAAAAAAAAAAAAAAAAAAAAAAAAAAxP///////////wD///////////8AAAAAAAAAAAAAAAAAAAAAAAAAAABo////////////AP///////////wAAAAAAAAAA////6JwMAAAAAAAAADD///////////8A////////////AAAAAAAAAAD//////6AAAAAAAAAADP///////////wD///////////8AAAAAAAAAAP//////9AAAAAAAAAAA////////////AP///////////wAAAAAAAAAA///////0AAAAAAAAAAD///////////8A////////////AAAAAAAAAAD//////5gAAAAAAAAAHP///////////wD///////////8AAAAAAAAAAP///9iICAAAAAAAAABI////////////AP///////////wAAAAAAAAAAAAAAAAAAAAAAAAAAAJD///////////8A////////////AAAAAAAAAAAAAAAAAAAAAAAAAAAI6P///////////wD///////////8AAAAAAAAAAAAAAAAAAAAAAAAAAIT/////////////AP///////////wAAAAAAAAAAAAAAAAAAAAAAAABU/P////////////8A////////////AAAAAAAAAAAAAAAAAAAAAAAIhPz//////////////wD///////////8AAAAAAAAAAAAAAAAABCRMkOz/////////////////AP///////////wAAAAAAAAAA//////////////////////////////8A////////////AAAAAAAAAAD//////////////////////////////wD///////////8AAAAAAAAAAP//////////////////////////////AP///////////wAAAAAAAAAA//////////////////////////////8A////////////AAAAAAAAAAD//////////////////////////////wD///////////8AAAAAAAAAAP//////////////////////////////AP///////////wAAAAAAAAAA//////////////////////////////8A////////////AAAAAAAAAAD//////////////////////////////wD///////////8AAAAAAAAAAP//////////////////////////////AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8=',				'width' => 40			),			'Q' => array(				'data' => 'AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////SoaDQcAAAAHDhoqPT///////////////////8A//////////////BwDAAAAAAAAAAAAAAACHDo/////////////////wD///////////+4FAAAAAAAAAAAAAAAAAAAABCo////////////////AP//////////nAQAAAAAAAAAAAAAAAAAAAAAAACQ//////////////8A/////////7gEAAAAAAAAAAAAAAAAAAAAAAAAAACg/////////////wD////////wFAAAAAAAAAAAAAAAAAAAAAAAAAAAAAzo////////////AP///////3AAAAAAAAAAACyo8P/sqCwAAAAAAAAAAGT///////////8A///////4EAAAAAAAAABM+P///////FQAAAAAAAAACPT//////////wD//////7AAAAAAAAAAFPD/////////9BgAAAAAAAAApP//////////AP//////bAAAAAAAAAB4////////////fAAAAAAAAABk//////////8A//////84AAAAAAAAALz///////////+8AAAAAAAAADT//////////wD//////xwAAAAAAAAA6P///////////+QAAAAAAAAAHP//////////AP//////AAAAAAAAAAD//////////////wAAAAAAAAAA//////////8A//////8AAAAAAAAAAP//////////////AAAAAAAAAAD//////////wD//////wAAAAAAAAAA/P////////////8AAAAAAAAAAP//////////AP//////GAAAAAAAAADg////////////4AAAAAAAAAAc//////////8A//////84AAAAAAAAALT////MJHTo//+8AAAAAAAAADT//////////wD//////2wAAAAAAAAAdP///2AAABCg/3wAAAAAAAAAZP//////////AP//////rAAAAAAAAAAY9P/sCAAAAABMGAAAAAAAAACk//////////8A///////4EAAAAAAAAABU/P+0OAAAAAAAAAAAAAAACPT//////////wD///////94AAAAAAAAAAA4sPD/gAAAAAAAAAAAAABk////////////AP////////AcAAAAAAAAAAAAAAAAAAAAAAAAAAAADOT///////////8A/////////7wEAAAAAAAAAAAAAAAAAAAAAAAAAACQ/////////////wD//////////6wEAAAAAAAAAAAAAAAAAAAAAAAAABSs////////////AP///////////7gUAAAAAAAAAAAAAAAAAAAAAAAAAABAwP////////8A//////////////BwDAAAAAAAAAAAAAAABAgAAAAAAAA8/////////wD////////////////0qGg0GAAAABgwXJjkxBgAAAAAALD/////////AP//////////////////////////////////5DQAAAAk/P////////8A////////////////////////////////////+GwAAJD//////////wD//////////////////////////////////////8A49P//////////AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8=',				'width' => 40			),			'R' => array(				'data' => 'AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8A/////////wAAAAAAAAAAAAAAAAAAAAQgOGSk+P///////////////wD/////////AAAAAAAAAAAAAAAAAAAAAAAAAAAcuP//////////////AP////////8AAAAAAAAAAAAAAAAAAAAAAAAAAAAEsP////////////8A/////////wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQ6P///////////wD/////////AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAB8////////////AP////////8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAADD///////////8A/////////wAAAAAAAAAA///////svDgAAAAAAAAACP///////////wD/////////AAAAAAAAAAD/////////7AAAAAAAAAAA////////////AP////////8AAAAAAAAAAP/////////cAAAAAAAAABD///////////8A/////////wAAAAAAAAAA//////DQoCQAAAAAAAAAQP///////////wD/////////AAAAAAAAAAAAAAAAAAAAAAAAAAAAAACU////////////AP////////8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAIPj///////////8A/////////wAAAAAAAAAAAAAAAAAAAAAAAAAAAAzU/////////////wD/////////AAAAAAAAAAAAAAAAAAAAAAAAAAA02P//////////////AP////////8AAAAAAAAAAAAAAAAAAAAAAAxctPz///////////////8A/////////wAAAAAAAAAAAAAAAAAAAAAAAEDY/////////////////wD/////////AAAAAAAAAAD/9LAsAAAAAAAAAAzc////////////////AP////////8AAAAAAAAAAP///+wkAAAAAAAAADD8//////////////8A/////////wAAAAAAAAAA/////8QAAAAAAAAAAJD//////////////wD/////////AAAAAAAAAAD//////1QAAAAAAAAAFPD/////////////AP////////8AAAAAAAAAAP//////3AQAAAAAAAAAgP////////////8A/////////wAAAAAAAAAA////////aAAAAAAAAAAM6P///////////wD/////////AAAAAAAAAAD////////oCAAAAAAAAABs////////////AP////////8AAAAAAAAAAP////////+AAAAAAAAAAATc//////////8A/////////wAAAAAAAAAA//////////AUAAAAAAAAAFj//////////wD/////////AAAAAAAAAAD//////////5AAAAAAAAAAAND/////////AP////////8AAAAAAAAAAP//////////+CQAAAAAAAAAQP////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8=',				'width' => 40			),			'S' => array(				'data' => 'AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP/////////////////8vHBEIAgAAAQgQHC8/P////////////////8A////////////////pCQAAAAAAAAAAAAAAAAcoP///////////////wD//////////////FwAAAAAAAAAAAAAAAAAAAAAXP//////////////AP////////////9oAAAAAAAAAAAAAAAAAAAAAAAAhP////////////8A////////////zAAAAAAAAAAAAAAAAAAAAAAAAAAI6P///////////wD///////////9cAAAAAAAAAAAAAAAAAAAAAAAAAACA////////////AP///////////xgAAAAAAAAAUOD/8KwkAAAAAAAAADj///////////8A////////////AAAAAAAAAAD0/////8wABCAgICxASP///////////wD///////////8MAAAAAAAAAMz/////////////////////////////AP///////////0AAAAAAAAAACFiQxPT///////////////////////8A////////////oAAAAAAAAAAAAAAAADBwtPT//////////////////wD////////////8QAAAAAAAAAAAAAAAAAAACFTA////////////////AP/////////////oOAAAAAAAAAAAAAAAAAAAAABM6P////////////8A///////////////4fAgAAAAAAAAAAAAAAAAAAAAY2P///////////wD/////////////////7IwwAAAAAAAAAAAAAAAAAAAo+P//////////AP/////////////////////koGw0BAAAAAAAAAAAAACU//////////8A///////////////////////////4uFgAAAAAAAAAADz//////////wD//////////2BgSEA0IBwA6P///////5QAAAAAAAAADP//////////AP//////////JAAAAAAAAACc/////////AAAAAAAAAAA//////////8A//////////9YAAAAAAAAACDo///////AAAAAAAAAABT//////////wD//////////6QAAAAAAAAAACCk7P/snBQAAAAAAAAAUP//////////AP//////////+BAAAAAAAAAAAAAAAAAAAAAAAAAAAACs//////////8A////////////kAAAAAAAAAAAAAAAAAAAAAAAAAAAOP///////////wD////////////8RAAAAAAAAAAAAAAAAAAAAAAAABjc////////////AP/////////////0PAAAAAAAAAAAAAAAAAAAAAAg2P////////////8A///////////////8hBQAAAAAAAAAAAAAAAAMdPT//////////////wD/////////////////+LRwSCAMAAAAHDhoqPT/////////////////AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8=',				'width' => 40			),			'T' => array(				'data' => 'AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA////////////AP////////8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD///////////8A/////////wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAP///////////wD/////////AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA////////////AP////////8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD///////////8A/////////wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAP///////////wD///////////////////8AAAAAAAAAAP//////////////////////AP///////////////////wAAAAAAAAAA//////////////////////8A////////////////////AAAAAAAAAAD//////////////////////wD///////////////////8AAAAAAAAAAP//////////////////////AP///////////////////wAAAAAAAAAA//////////////////////8A////////////////////AAAAAAAAAAD//////////////////////wD///////////////////8AAAAAAAAAAP//////////////////////AP///////////////////wAAAAAAAAAA//////////////////////8A////////////////////AAAAAAAAAAD//////////////////////wD///////////////////8AAAAAAAAAAP//////////////////////AP///////////////////wAAAAAAAAAA//////////////////////8A////////////////////AAAAAAAAAAD//////////////////////wD///////////////////8AAAAAAAAAAP//////////////////////AP///////////////////wAAAAAAAAAA//////////////////////8A////////////////////AAAAAAAAAAD//////////////////////wD///////////////////8AAAAAAAAAAP//////////////////////AP///////////////////wAAAAAAAAAA//////////////////////8A////////////////////AAAAAAAAAAD//////////////////////wD///////////////////8AAAAAAAAAAP//////////////////////AP///////////////////wAAAAAAAAAA//////////////////////8A////////////////////AAAAAAAAAAD//////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8=',				'width' => 40			),			'U' => array(				'data' => 'AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////8AAAAAAAAAAP///////////wAAAAAAAAAA//////////8A/////////wAAAAAAAAAA////////////AAAAAAAAAAD//////////wD/////////AAAAAAAAAAD///////////8AAAAAAAAAAP//////////AP////////8AAAAAAAAAAP///////////wAAAAAAAAAA//////////8A/////////wAAAAAAAAAA////////////AAAAAAAAAAD//////////wD/////////AAAAAAAAAAD///////////8AAAAAAAAAAP//////////AP////////8AAAAAAAAAAP///////////wAAAAAAAAAA//////////8A/////////wAAAAAAAAAA////////////AAAAAAAAAAD//////////wD/////////AAAAAAAAAAD///////////8AAAAAAAAAAP//////////AP////////8AAAAAAAAAAP///////////wAAAAAAAAAA//////////8A/////////wAAAAAAAAAA////////////AAAAAAAAAAD//////////wD/////////AAAAAAAAAAD///////////8AAAAAAAAAAP//////////AP////////8AAAAAAAAAAP///////////wAAAAAAAAAA//////////8A/////////wAAAAAAAAAA////////////AAAAAAAAAAD//////////wD/////////AAAAAAAAAAD///////////8AAAAAAAAAAP//////////AP////////8AAAAAAAAAAP///////////wAAAAAAAAAA//////////8A/////////wAAAAAAAAAA////////////AAAAAAAAAAD//////////wD/////////JAAAAAAAAADk/////////+gAAAAAAAAAHP//////////AP////////9MAAAAAAAAAJz/////////nAAAAAAAAABE//////////8A/////////4gAAAAAAAAAHOj//////+ggAAAAAAAAAHz//////////wD/////////0AAAAAAAAAAAIJzs/+ykIAAAAAAAAAAA0P//////////AP//////////QAAAAAAAAAAAAAAAAAAAAAAAAAAAAED///////////8A///////////IBAAAAAAAAAAAAAAAAAAAAAAAAAAE0P///////////wD///////////+YAAAAAAAAAAAAAAAAAAAAAAAAAJj/////////////AP////////////+UBAAAAAAAAAAAAAAAAAAAAASU//////////////8A///////////////IPAAAAAAAAAAAAAAAAAAwyP///////////////wD/////////////////0IxYOCAIAAAEIEiAyP//////////////////AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8=',				'width' => 40			),			'V' => array(				'data' => 'AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD//////zAAAAAAAAAAYP//////////////ZAAAAAAAAAAw////////AP//////kAAAAAAAAAAU/P////////////8UAAAAAAAAAJD///////8A///////oBAAAAAAAAADE////////////xAAAAAAAAAAE7P///////wD///////9MAAAAAAAAAHD///////////94AAAAAAAAAEz/////////AP///////6gAAAAAAAAAJP///////////yQAAAAAAAAArP////////8A////////+BAAAAAAAAAA1P/////////YAAAAAAAAABT4/////////wD/////////aAAAAAAAAACE/////////4QAAAAAAAAAbP//////////AP/////////EAAAAAAAAADT/////////OAAAAAAAAADM//////////8A//////////8kAAAAAAAAAOT//////+QAAAAAAAAAKP///////////wD//////////4QAAAAAAAAAmP//////nAAAAAAAAACI////////////AP//////////5AAAAAAAAABE//////9EAAAAAAAABOT///////////8A////////////QAAAAAAAAAT0////9AgAAAAAAABI/////////////wD///////////+gAAAAAAAAAKT///+kAAAAAAAAAKj/////////////AP////////////QIAAAAAAAAXP///1wAAAAAAAAM+P////////////8A/////////////1wAAAAAAAAM+P/8DAAAAAAAAGT//////////////wD/////////////vAAAAAAAAAC8/7wAAAAAAAAAxP//////////////AP//////////////HAAAAAAAAGj/aAAAAAAAACT///////////////8A//////////////94AAAAAAAAHP8cAAAAAAAAhP///////////////wD//////////////9gAAAAAAAAAkAAAAAAAAADk////////////////AP///////////////zgAAAAAAAAQAAAAAAAAQP////////////////8A////////////////lAAAAAAAAAAAAAAAAACg/////////////////wD////////////////sCAAAAAAAAAAAAAAADPT/////////////////AP////////////////9QAAAAAAAAAAAAAABg//////////////////8A/////////////////7AAAAAAAAAAAAAAAMD//////////////////wD//////////////////BQAAAAAAAAAAAAc////////////////////AP//////////////////cAAAAAAAAAAAAHz///////////////////8A///////////////////MAAAAAAAAAAAA3P///////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8=',				'width' => 40			),			'W' => array(				'data' => 'AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8A//8cAAAAAAAAALz/////4AAAAAAAAAAA6P////+8AAAAAAAAABz//wD//1QAAAAAAAAAjP////+gAAAAAAAAAACo/////4wAAAAAAAAAUP//AP//jAAAAAAAAABU/////2AAAAAAAAAAAGj/////VAAAAAAAAACM//8A///EAAAAAAAAACT/////IAAAAAAAAAAAKP////8kAAAAAAAAAMT//wD///gEAAAAAAAAAPD//+AAAAAAAAAAAAAA6P//8AAAAAAAAAAE9P//AP///zAAAAAAAAAAvP//oAAAAAAAAAAAAACo//+8AAAAAAAAADD///8A////bAAAAAAAAACM//9gAAAAAAAAAAAAAGT//4wAAAAAAAAAaP///wD///+kAAAAAAAAAFT//yAAAAAAAAAAAAAAIP//VAAAAAAAAACc////AP///9gAAAAAAAAAJP/gAAAAAAAAAAAAAAAA4P8kAAAAAAAAANT///8A/////xAAAAAAAAAA8KAAAAAAAAAAAAAAAACg8AAAAAAAAAAQ/////wD/////TAAAAAAAAAC8YAAAAAAAAAAAAAAAAGC8AAAAAAAAAET/////AP////+AAAAAAAAAAIwgAAAAAAAAAAAAAAAAIIwAAAAAAAAAfP////8A/////7gAAAAAAAAANAAAAAAAACwwAAAAAAAANAAAAAAAAACw/////wD/////8AAAAAAAAAAAAAAAAAAAdHgAAAAAAAAAAAAAAAAAAOz/////AP//////KAAAAAAAAAAAAAAAAAC4vAAAAAAAAAAAAAAAAAAg//////8A//////9gAAAAAAAAAAAAAAAACPj4CAAAAAAAAAAAAAAAAFj//////wD//////5QAAAAAAAAAAAAAAABE//9IAAAAAAAAAAAAAAAAkP//////AP//////0AAAAAAAAAAAAAAAAIj//4wAAAAAAAAAAAAAAADI//////8A///////8DAAAAAAAAAAAAAAAzP//1AAAAAAAAAAAAAAABPj//////wD///////88AAAAAAAAAAAAABT/////GAAAAAAAAAAAAAA0////////AP///////3QAAAAAAAAAAAAAWP////9gAAAAAAAAAAAAAHD///////8A////////sAAAAAAAAAAAAACg/////6QAAAAAAAAAAAAApP///////wD////////kAAAAAAAAAAAAAOT/////6AAAAAAAAAAAAADc////////AP////////8cAAAAAAAAAAAo////////MAAAAAAAAAAAEP////////8A/////////1QAAAAAAAAAAHD///////94AAAAAAAAAABM/////////wD/////////jAAAAAAAAAAAtP///////7wAAAAAAAAAAID/////////AP/////////EAAAAAAAAAAT0////////+AgAAAAAAAAAuP////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8=',				'width' => 40			),			'X' => array(				'data' => 'AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD///////9UAAAAAAAAAKz///////////+sAAAAAAAAAFD/////////AP///////+QQAAAAAAAAFOT/////////8BwAAAAAAAAM5P////////8A/////////5gAAAAAAAAATP////////9kAAAAAAAAAJD//////////wD//////////0AAAAAAAAAAoP//////wAAAAAAAAAA0/P//////////AP//////////2AgAAAAAAAAQ4P////gkAAAAAAAABMz///////////8A////////////iAAAAAAAAABA////dAAAAAAAAABw/////////////wD////////////8MAAAAAAAAACU/9AEAAAAAAAAHPD/////////////AP/////////////IBAAAAAAAAAzYMAAAAAAAAACs//////////////8A//////////////90AAAAAAAAABAAAAAAAAAATP///////////////wD///////////////QgAAAAAAAAAAAAAAAAAAzg////////////////AP///////////////7wAAAAAAAAAAAAAAAAAjP////////////////8A/////////////////2AAAAAAAAAAAAAAADD8/////////////////wD/////////////////7BQAAAAAAAAAAAAEyP//////////////////AP/////////////////gDAAAAAAAAAAAAAjY//////////////////8A/////////////////0AAAAAAAAAAAAAAADj8/////////////////wD///////////////+UAAAAAAAAAAAAAAAAAJD/////////////////AP//////////////4AwAAAAAAAAAAAAAAAAADOD///////////////8A//////////////9AAAAAAAAAAAAAAAAAAAAAQP///////////////wD/////////////nAAAAAAAAAAAWAAAAAAAAAAAlP//////////////AP///////////+QQAAAAAAAAAGD/YAAAAAAAAAAM4P////////////8A////////////TAAAAAAAAAAs9P/0LAAAAAAAAABM/////////////wD//////////6AAAAAAAAAADNT////UDAAAAAAAAACg////////////AP/////////kEAAAAAAAAACg//////+gAAAAAAAAABDk//////////8A/////////0wAAAAAAAAAYP////////9gAAAAAAAAAEz//////////wD///////+oAAAAAAAAACz0//////////QsAAAAAAAAAKT/////////AP//////7BQAAAAAAAAM1P///////////9QMAAAAAAAAFOz///////8A//////9UAAAAAAAAAKD//////////////6AAAAAAAAAAVP///////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8=',				'width' => 40			),			'Y' => array(				'data' => 'AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP///////1QAAAAAAAAAAGj//////////2gAAAAAAAAAAFT///////8A////////5BAAAAAAAAAAAMT////////EAAAAAAAAAAAQ5P///////wD/////////mAAAAAAAAAAAKPj/////+CgAAAAAAAAAAJj/////////AP//////////PAAAAAAAAAAAgP////+AAAAAAAAAAAA8//////////8A///////////YCAAAAAAAAAAE2P//2AQAAAAAAAAACNj//////////wD///////////+AAAAAAAAAAAA4//84AAAAAAAAAACA////////////AP////////////woAAAAAAAAAACUlAAAAAAAAAAAKPz///////////8A/////////////8gAAAAAAAAAABAQAAAAAAAAAADI/////////////wD//////////////2wAAAAAAAAAAAAAAAAAAAAAbP//////////////AP//////////////8BwAAAAAAAAAAAAAAAAAABzw//////////////8A////////////////tAAAAAAAAAAAAAAAAAAAtP///////////////wD/////////////////VAAAAAAAAAAAAAAAAFT/////////////////AP/////////////////oEAAAAAAAAAAAAAAQ6P////////////////8A//////////////////+cAAAAAAAAAAAAAJz//////////////////wD///////////////////9AAAAAAAAAAABA////////////////////AP///////////////////9gAAAAAAAAAANj///////////////////8A/////////////////////wAAAAAAAAAA/////////////////////wD/////////////////////AAAAAAAAAAD/////////////////////AP////////////////////8AAAAAAAAAAP////////////////////8A/////////////////////wAAAAAAAAAA/////////////////////wD/////////////////////AAAAAAAAAAD/////////////////////AP////////////////////8AAAAAAAAAAP////////////////////8A/////////////////////wAAAAAAAAAA/////////////////////wD/////////////////////AAAAAAAAAAD/////////////////////AP////////////////////8AAAAAAAAAAP////////////////////8A/////////////////////wAAAAAAAAAA/////////////////////wD/////////////////////AAAAAAAAAAD/////////////////////AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8=',				'width' => 40			),			'Z' => array(				'data' => 'AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8A//////////8AAAAAAAAAAAAAAAAAAAAAAAAAAAD//////////////wD//////////wAAAAAAAAAAAAAAAAAAAAAAAAAAAP//////////////AP//////////AAAAAAAAAAAAAAAAAAAAAAAAAAAA//////////////8A//////////8AAAAAAAAAAAAAAAAAAAAAAAAAAAD//////////////wD//////////wAAAAAAAAAAAAAAAAAAAAAAAAAAAP//////////////AP//////////AAAAAAAAAAAAAAAAAAAAAAAAAAAQ//////////////8A/////////////////////////1AAAAAAAAAABLz//////////////wD///////////////////////98AAAAAAAAAACY////////////////AP//////////////////////pAAAAAAAAAAAaP////////////////8A/////////////////////8QIAAAAAAAAAET8/////////////////wD////////////////////gGAAAAAAAAAAo9P//////////////////AP//////////////////9CwAAAAAAAAAFNz///////////////////8A//////////////////xMAAAAAAAAAATA/////////////////////wD/////////////////eAAAAAAAAAAAnP//////////////////////AP///////////////5wAAAAAAAAAAHT///////////////////////8A///////////////ABAAAAAAAAABM/P///////////////////////wD/////////////3BQAAAAAAAAALPT/////////////////////////AP////////////QoAAAAAAAAABjg//////////////////////////8A///////////8SAAAAAAAAAAExP///////////////////////////wD//////////2wAAAAAAAAAAKD/////////////////////////////AP////////+YAAAAAAAAAAB8//////////////////////////////8A/////////wQAAAAAAAAAAAAAAAAAAAAAAAAAAAAA/////////////wD/////////AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD/////////////AP////////8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAP////////////8A/////////wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA/////////////wD/////////AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD/////////////AP////////8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAP////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8=',				'width' => 40			),		);	}}?>
<?php/**** @package ucp* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @ignore*/if (!defined('IN_PHPBB')){	exit;}/*** ucp_remind* Sending password reminders* @package ucp*/class ucp_remind{	var $u_action;	function main($id, $mode)	{		global $config, $phpbb_root_path, $phpEx;		global $db, $user, $auth, $template;		$username	= request_var('username', '', true);		$email		= strtolower(request_var('email', ''));		$submit		= (isset($_POST['submit'])) ? true : false;		if ($submit)		{			$sql = 'SELECT user_id, username, user_permissions, user_email, user_jabber, user_notify_type, user_type, user_lang, user_inactive_reason				FROM ' . USERS_TABLE . "				WHERE user_email_hash = '" . $db->sql_escape(phpbb_email_hash($email)) . "'					AND username_clean = '" . $db->sql_escape(utf8_clean_string($username)) . "'";			$result = $db->sql_query($sql);			$user_row = $db->sql_fetchrow($result);			$db->sql_freeresult($result);			if (!$user_row)			{				trigger_error('NO_EMAIL_USER');			}			if ($user_row['user_type'] == USER_IGNORE)			{				trigger_error('NO_USER');			}			if ($user_row['user_type'] == USER_INACTIVE)			{				if ($user_row['user_inactive_reason'] == INACTIVE_MANUAL)				{					trigger_error('ACCOUNT_DEACTIVATED');				}				else				{					trigger_error('ACCOUNT_NOT_ACTIVATED');				}			}			// Check users permissions			$auth2 = new auth();			$auth2->acl($user_row);			if (!$auth2->acl_get('u_chgpasswd'))			{				trigger_error('NO_AUTH_PASSWORD_REMINDER');			}			$server_url = generate_board_url();			// Make password at least 8 characters long, make it longer if admin wants to.			// gen_rand_string() however has a limit of 12 or 13.			$user_password = gen_rand_string_friendly(max(8, mt_rand((int) $config['min_pass_chars'], (int) $config['max_pass_chars'])));			// For the activation key a random length between 6 and 10 will do.			$user_actkey = gen_rand_string(mt_rand(6, 10));			$sql = 'UPDATE ' . USERS_TABLE . "				SET user_newpasswd = '" . $db->sql_escape(phpbb_hash($user_password)) . "', user_actkey = '" . $db->sql_escape($user_actkey) . "'				WHERE user_id = " . $user_row['user_id'];			$db->sql_query($sql);			include_once($phpbb_root_path . 'includes/functions_messenger.' . $phpEx);			$messenger = new messenger(false);			$messenger->template('user_activate_passwd', $user_row['user_lang']);			$messenger->to($user_row['user_email'], $user_row['username']);			$messenger->im($user_row['user_jabber'], $user_row['username']);			$messenger->assign_vars(array(				'USERNAME'		=> htmlspecialchars_decode($user_row['username']),				'PASSWORD'		=> htmlspecialchars_decode($user_password),				'U_ACTIVATE'	=> "$server_url/ucp.$phpEx?mode=activate&u={$user_row['user_id']}&k=$user_actkey")			);			$messenger->send($user_row['user_notify_type']);			meta_refresh(3, append_sid("{$phpbb_root_path}index.$phpEx"));			$message = $user->lang['PASSWORD_UPDATED'] . '<br /><br />' . sprintf($user->lang['RETURN_INDEX'], '<a href="' . append_sid("{$phpbb_root_path}index.$phpEx") . '">', '</a>');			trigger_error($message);		}		$template->assign_vars(array(			'USERNAME'			=> $username,			'EMAIL'				=> $email,			'S_PROFILE_ACTION'	=> append_sid($phpbb_root_path . 'ucp.' . $phpEx, 'mode=sendpassword'))		);		$this->tpl_name = 'ucp_remind';		$this->page_title = 'UCP_REMIND';	}}?>
<?php/**** acp_language [English]** @package language* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** DO NOT CHANGE*/if (!defined('IN_PHPBB')){	exit;}if (empty($lang) || !is_array($lang)){	$lang = array();}// DEVELOPERS PLEASE NOTE//// All language files should use UTF-8 as their encoding and the files must not contain a BOM.//// Placeholders can now contain order information, e.g. instead of// 'Page %s of %s' you can (and should) write 'Page %1$s of %2$s', this allows// translators to re-order the output of data while ensuring it remains correct//// You do not need this where single placeholders are used, e.g. 'Message %d' is fine// equally where a string contains only two placeholders which are used to wrap text// in a url you again do not need to specify an order e.g., 'Click %sHERE%s' is fine$lang = array_merge($lang, array(	'ACP_FILES'						=> 'Admin language files',	'ACP_LANGUAGE_PACKS_EXPLAIN'	=> 'Here you are able to install/remove language packs. The default language pack is marked with an asterisk (*).',	'EMAIL_FILES'			=> 'E-mail templates',	'FILE_CONTENTS'				=> 'File contents',	'FILE_FROM_STORAGE'			=> 'File from storage folder',	'HELP_FILES'				=> 'Help files',	'INSTALLED_LANGUAGE_PACKS'	=> 'Installed language packs',	'INVALID_LANGUAGE_PACK'		=> 'The selected language pack seems to be not valid. Please verify the language pack and upload it again if necessary.',	'INVALID_UPLOAD_METHOD'		=> 'The selected upload method is not valid, please choose a different method.',	'LANGUAGE_DETAILS_UPDATED'			=> 'Language details successfully updated.',	'LANGUAGE_ENTRIES'					=> 'Language entries',	'LANGUAGE_ENTRIES_EXPLAIN'			=> 'Here you are able to change existing language pack entries or not already translated ones.<br /><strong>Note:</strong> Once you changed a language file, the changes will be stored within a separate folder for you to download. The changes will not be seen by your users until you replace the original language files at your webspace (by uploading them).',	'LANGUAGE_FILES'					=> 'Language files',	'LANGUAGE_KEY'						=> 'Language key',	'LANGUAGE_PACK_ALREADY_INSTALLED'	=> 'This language pack is already installed.',	'LANGUAGE_PACK_DELETED'				=> 'The language pack <strong>%s</strong> has been removed successfully. All users using this language have been reset to the boards default language.',	'LANGUAGE_PACK_DETAILS'				=> 'Language pack details',	'LANGUAGE_PACK_INSTALLED'			=> 'The language pack <strong>%s</strong> has been successfully installed.',	'LANGUAGE_PACK_CPF_UPDATE'			=> 'The custom profile fields language strings were copied from the default language. Please change them if necessary.',	'LANGUAGE_PACK_ISO'					=> 'ISO',	'LANGUAGE_PACK_LOCALNAME'			=> 'Local name',	'LANGUAGE_PACK_NAME'				=> 'Name',	'LANGUAGE_PACK_NOT_EXIST'			=> 'The selected language pack does not exist.',	'LANGUAGE_PACK_USED_BY'				=> 'Used by (including robots)',	'LANGUAGE_VARIABLE'					=> 'Language variable',	'LANG_AUTHOR'						=> 'Language pack author',	'LANG_ENGLISH_NAME'					=> 'English name',	'LANG_ISO_CODE'						=> 'ISO code',	'LANG_LOCAL_NAME'					=> 'Local name',	'MISSING_LANGUAGE_FILE'		=> 'Missing language file: <strong style="color:red">%s</strong>',	'MISSING_LANG_VARIABLES'	=> 'Missing language variables',	'MODS_FILES'				=> 'MODs language files',	'NO_FILE_SELECTED'				=> 'You havent specified a language file.',	'NO_LANG_ID'					=> 'You havent specified a language pack.',	'NO_REMOVE_DEFAULT_LANG'		=> 'You are not able to remove the default language pack.<br />If you want to remove this language pack, change your boards default language first.',	'NO_UNINSTALLED_LANGUAGE_PACKS'	=> 'No uninstalled language packs',	'REMOVE_FROM_STORAGE_FOLDER'		=> 'Remove from storage folder',	'SELECT_DOWNLOAD_FORMAT'	=> 'Select download format',	'SUBMIT_AND_DOWNLOAD'		=> 'Submit and download file',	'SUBMIT_AND_UPLOAD'			=> 'Submit and upload file',	'THOSE_MISSING_LANG_FILES'			=> 'The following language files are missing from the %s language folder',	'THOSE_MISSING_LANG_VARIABLES'		=> 'The following language variables are missing from the <strong>%s</strong> language pack',	'UNINSTALLED_LANGUAGE_PACKS'	=> 'Uninstalled language packs',	'UNABLE_TO_WRITE_FILE'		=> 'The file could not be written to %s.',	'UPLOAD_COMPLETED'			=> 'The upload was completed successfully.',	'UPLOAD_FAILED'				=> 'The upload failed for unknown reasons. You may need to replace the relevant file manually.',	'UPLOAD_METHOD'				=> 'Upload method',	'UPLOAD_SETTINGS'			=> 'Upload settings',	'WRONG_LANGUAGE_FILE'		=> 'Selected language file is invalid.',));?>
<?php/**** @package phpBB3* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @ignore*/define('IN_PHPBB', true);$phpbb_root_path = (defined('PHPBB_ROOT_PATH')) ? PHPBB_ROOT_PATH : './';$phpEx = substr(strrchr(__FILE__, '.'), 1);include($phpbb_root_path . 'common.' . $phpEx);include($phpbb_root_path . 'includes/functions_display.' . $phpEx);include($phpbb_root_path . 'includes/bbcode.' . $phpEx);// Start session management$user->session_begin();$auth->acl($user->data);// Initial var setup$forum_id	= request_var('f', 0);$topic_id	= request_var('t', 0);$post_id	= request_var('p', 0);$voted_id	= request_var('vote_id', array('' => 0));$voted_id = (sizeof($voted_id) > 1) ? array_unique($voted_id) : $voted_id;$start		= request_var('start', 0);$view		= request_var('view', '');$default_sort_days	= (!empty($user->data['user_post_show_days'])) ? $user->data['user_post_show_days'] : 0;$default_sort_key	= (!empty($user->data['user_post_sortby_type'])) ? $user->data['user_post_sortby_type'] : 't';$default_sort_dir	= (!empty($user->data['user_post_sortby_dir'])) ? $user->data['user_post_sortby_dir'] : 'a';$sort_days	= request_var('st', $default_sort_days);$sort_key	= request_var('sk', $default_sort_key);$sort_dir	= request_var('sd', $default_sort_dir);$update		= request_var('update', false);$s_can_vote = false;/*** @todo normalize?*/$hilit_words	= request_var('hilit', '', true);// Do we have a topic or post id?if (!$topic_id && !$post_id){	trigger_error('NO_TOPIC');}// Find topic id if user requested a newer or older topicif ($view && !$post_id){	if (!$forum_id)	{		$sql = 'SELECT forum_id			FROM ' . TOPICS_TABLE . "			WHERE topic_id = $topic_id";		$result = $db->sql_query($sql);		$forum_id = (int) $db->sql_fetchfield('forum_id');		$db->sql_freeresult($result);		if (!$forum_id)		{			trigger_error('NO_TOPIC');		}	}	if ($view == 'unread')	{		// Get topic tracking info		$topic_tracking_info = get_complete_topic_tracking($forum_id, $topic_id);		$topic_last_read = (isset($topic_tracking_info[$topic_id])) ? $topic_tracking_info[$topic_id] : 0;		$sql = 'SELECT post_id, topic_id, forum_id			FROM ' . POSTS_TABLE . "			WHERE topic_id = $topic_id				" . (($auth->acl_get('m_approve', $forum_id)) ? '' : 'AND post_approved = 1') . "				AND post_time > $topic_last_read				AND forum_id = $forum_id			ORDER BY post_time ASC";		$result = $db->sql_query_limit($sql, 1);		$row = $db->sql_fetchrow($result);		$db->sql_freeresult($result);		if (!$row)		{			$sql = 'SELECT topic_last_post_id as post_id, topic_id, forum_id				FROM ' . TOPICS_TABLE . '				WHERE topic_id = ' . $topic_id;			$result = $db->sql_query($sql);			$row = $db->sql_fetchrow($result);			$db->sql_freeresult($result);		}		if (!$row)		{			// Setup user environment so we can process lang string			$user->setup('viewtopic');			trigger_error('NO_TOPIC');		}		$post_id = $row['post_id'];		$topic_id = $row['topic_id'];	}	else if ($view == 'next' || $view == 'previous')	{		$sql_condition = ($view == 'next') ? '>' : '<';		$sql_ordering = ($view == 'next') ? 'ASC' : 'DESC';		$sql = 'SELECT forum_id, topic_last_post_time			FROM ' . TOPICS_TABLE . '			WHERE topic_id = ' . $topic_id;		$result = $db->sql_query($sql);		$row = $db->sql_fetchrow($result);		$db->sql_freeresult($result);		if (!$row)		{			$user->setup('viewtopic');			// OK, the topic doesn't exist. This error message is not helpful, but technically correct.			trigger_error(($view == 'next') ? 'NO_NEWER_TOPICS' : 'NO_OLDER_TOPICS');		}		else		{			$sql = 'SELECT topic_id, forum_id				FROM ' . TOPICS_TABLE . '				WHERE forum_id = ' . $row['forum_id'] . "					AND topic_moved_id = 0					AND topic_last_post_time $sql_condition {$row['topic_last_post_time']}					" . (($auth->acl_get('m_approve', $row['forum_id'])) ? '' : 'AND topic_approved = 1') . "				ORDER BY topic_last_post_time $sql_ordering";			$result = $db->sql_query_limit($sql, 1);			$row = $db->sql_fetchrow($result);			$db->sql_freeresult($result);			if (!$row)			{				$user->setup('viewtopic');				trigger_error(($view == 'next') ? 'NO_NEWER_TOPICS' : 'NO_OLDER_TOPICS');			}			else			{				$topic_id = $row['topic_id'];				// Check for global announcement correctness?				if (!$row['forum_id'] && !$forum_id)				{					trigger_error('NO_TOPIC');				}				else if ($row['forum_id'])				{					$forum_id = $row['forum_id'];				}			}		}	}	// Check for global announcement correctness?	if ((!isset($row) || !$row['forum_id']) && !$forum_id)	{		trigger_error('NO_TOPIC');	}	else if (isset($row) && $row['forum_id'])	{		$forum_id = $row['forum_id'];	}}// This rather complex gaggle of code handles querying for topics but// also allows for direct linking to a post (and the calculation of which// page the post is on and the correct display of viewtopic)$sql_array = array(	'SELECT'	=> 't.*, f.*',	'FROM'		=> array(FORUMS_TABLE => 'f'),);// Firebird handles two columns of the same name a little differently, this// addresses that by forcing the forum_id to come from the forums table.if ($db->sql_layer === 'firebird'){	$sql_array['SELECT'] = 'f.forum_id AS forum_id, ' . $sql_array['SELECT'];}// The FROM-Order is quite important here, else t.* columns can not be correctly bound.if ($post_id){	$sql_array['SELECT'] .= ', p.post_approved, p.post_time, p.post_id';	$sql_array['FROM'][POSTS_TABLE] = 'p';}// Topics table need to be the last in the chain$sql_array['FROM'][TOPICS_TABLE] = 't';if ($user->data['is_registered']){	$sql_array['SELECT'] .= ', tw.notify_status';	$sql_array['LEFT_JOIN'] = array();	$sql_array['LEFT_JOIN'][] = array(		'FROM'	=> array(TOPICS_WATCH_TABLE => 'tw'),		'ON'	=> 'tw.user_id = ' . $user->data['user_id'] . ' AND t.topic_id = tw.topic_id'	);	if ($config['allow_bookmarks'])	{		$sql_array['SELECT'] .= ', bm.topic_id as bookmarked';		$sql_array['LEFT_JOIN'][] = array(			'FROM'	=> array(BOOKMARKS_TABLE => 'bm'),			'ON'	=> 'bm.user_id = ' . $user->data['user_id'] . ' AND t.topic_id = bm.topic_id'		);	}	if ($config['load_db_lastread'])	{		$sql_array['SELECT'] .= ', tt.mark_time, ft.mark_time as forum_mark_time';		$sql_array['LEFT_JOIN'][] = array(			'FROM'	=> array(TOPICS_TRACK_TABLE => 'tt'),			'ON'	=> 'tt.user_id = ' . $user->data['user_id'] . ' AND t.topic_id = tt.topic_id'		);		$sql_array['LEFT_JOIN'][] = array(			'FROM'	=> array(FORUMS_TRACK_TABLE => 'ft'),			'ON'	=> 'ft.user_id = ' . $user->data['user_id'] . ' AND t.forum_id = ft.forum_id'		);	}}if (!$post_id){	$sql_array['WHERE'] = "t.topic_id = $topic_id";}else{	$sql_array['WHERE'] = "p.post_id = $post_id AND t.topic_id = p.topic_id";}$sql_array['WHERE'] .= ' AND (f.forum_id = t.forum_id';if (!$forum_id){	// If it is a global announcement make sure to set the forum id to a postable forum	$sql_array['WHERE'] .= ' OR (t.topic_type = ' . POST_GLOBAL . '		AND f.forum_type = ' . FORUM_POST . ')';}else{	$sql_array['WHERE'] .= ' OR (t.topic_type = ' . POST_GLOBAL . "		AND f.forum_id = $forum_id)";}$sql_array['WHERE'] .= ')';// Join to forum table on topic forum_id unless topic forum_id is zero// whereupon we join on the forum_id passed as a parameter ... this// is done so navigation, forum name, etc. remain consistent with where// user clicked to view a global topic$sql = $db->sql_build_query('SELECT', $sql_array);$result = $db->sql_query($sql);$topic_data = $db->sql_fetchrow($result);$db->sql_freeresult($result);// link to unapproved post or incorrect linkif (!$topic_data){	// If post_id was submitted, we try at least to display the topic as a last resort...	if ($post_id && $topic_id)	{		redirect(append_sid("{$phpbb_root_path}viewtopic.$phpEx", "t=$topic_id" . (($forum_id) ? "&amp;f=$forum_id" : '')));	}	trigger_error('NO_TOPIC');}$forum_id = (int) $topic_data['forum_id'];// This is for determining where we are (page)if ($post_id){	// are we where we are supposed to be?	if (!$topic_data['post_approved'] && !$auth->acl_get('m_approve', $topic_data['forum_id']))	{		// If post_id was submitted, we try at least to display the topic as a last resort...		if ($topic_id)		{			redirect(append_sid("{$phpbb_root_path}viewtopic.$phpEx", "t=$topic_id" . (($forum_id) ? "&amp;f=$forum_id" : '')));		}		trigger_error('NO_TOPIC');	}	if ($post_id == $topic_data['topic_first_post_id'] || $post_id == $topic_data['topic_last_post_id'])	{		$check_sort = ($post_id == $topic_data['topic_first_post_id']) ? 'd' : 'a';		if ($sort_dir == $check_sort)		{			$topic_data['prev_posts'] = ($auth->acl_get('m_approve', $forum_id)) ? $topic_data['topic_replies_real'] : $topic_data['topic_replies'];		}		else		{			$topic_data['prev_posts'] = 0;		}	}	else	{		$sql = 'SELECT COUNT(p.post_id) AS prev_posts			FROM ' . POSTS_TABLE . " p			WHERE p.topic_id = {$topic_data['topic_id']}				" . ((!$auth->acl_get('m_approve', $forum_id)) ? 'AND p.post_approved = 1' : '');		if ($sort_dir == 'd')		{			$sql .= " AND (p.post_time > {$topic_data['post_time']} OR (p.post_time = {$topic_data['post_time']} AND p.post_id >= {$topic_data['post_id']}))";		}		else		{			$sql .= " AND (p.post_time < {$topic_data['post_time']} OR (p.post_time = {$topic_data['post_time']} AND p.post_id <= {$topic_data['post_id']}))";		}		$result = $db->sql_query($sql);		$row = $db->sql_fetchrow($result);		$db->sql_freeresult($result);		$topic_data['prev_posts'] = $row['prev_posts'] - 1;	}}$topic_id = (int) $topic_data['topic_id'];//$topic_replies = ($auth->acl_get('m_approve', $forum_id)) ? $topic_data['topic_replies_real'] : $topic_data['topic_replies'];// Check sticky/announcement time limitif (($topic_data['topic_type'] == POST_STICKY || $topic_data['topic_type'] == POST_ANNOUNCE) && $topic_data['topic_time_limit'] && ($topic_data['topic_time'] + $topic_data['topic_time_limit']) < time()){	$sql = 'UPDATE ' . TOPICS_TABLE . '		SET topic_type = ' . POST_NORMAL . ', topic_time_limit = 0		WHERE topic_id = ' . $topic_id;	$db->sql_query($sql);	$topic_data['topic_type'] = POST_NORMAL;	$topic_data['topic_time_limit'] = 0;}// Setup look and feel$user->setup('viewtopic', $topic_data['forum_style']);if (!$topic_data['topic_approved'] && !$auth->acl_get('m_approve', $forum_id)){	trigger_error('NO_TOPIC');}// Start auth checkif (!$auth->acl_get('f_read', $forum_id)){	if ($user->data['user_id'] != ANONYMOUS)	{		trigger_error('SORRY_AUTH_READ');	}	login_box('', $user->lang['LOGIN_VIEWFORUM']);}// Forum is passworded ... check whether access has been granted to this// user this session, if not show login boxif ($topic_data['forum_password']){	login_forum_box($topic_data);}// Redirect to login or to the correct post upon emailed notification linksif (isset($_GET['e'])){	$jump_to = request_var('e', 0);	$redirect_url = append_sid("{$phpbb_root_path}viewtopic.$phpEx", "f=$forum_id&amp;t=$topic_id");	if ($user->data['user_id'] == ANONYMOUS)	{		login_box($redirect_url . "&amp;p=$post_id&amp;e=$jump_to", $user->lang['LOGIN_NOTIFY_TOPIC']);	}	if ($jump_to > 0)	{		// We direct the already logged in user to the correct post...		redirect($redirect_url . ((!$post_id) ? "&amp;p=$jump_to" : "&amp;p=$post_id") . "#p$jump_to");	}}// What is start equal to?if ($post_id){	$start = floor(($topic_data['prev_posts']) / $config['posts_per_page']) * $config['posts_per_page'];}// Get topic tracking infoif (!isset($topic_tracking_info)){	$topic_tracking_info = array();	// Get topic tracking info	if ($config['load_db_lastread'] && $user->data['is_registered'])	{		$tmp_topic_data = array($topic_id => $topic_data);		$topic_tracking_info = get_topic_tracking($forum_id, $topic_id, $tmp_topic_data, array($forum_id => $topic_data['forum_mark_time']));		unset($tmp_topic_data);	}	else if ($config['load_anon_lastread'] || $user->data['is_registered'])	{		$topic_tracking_info = get_complete_topic_tracking($forum_id, $topic_id);	}}// Post ordering options$limit_days = array(0 => $user->lang['ALL_POSTS'], 1 => $user->lang['1_DAY'], 7 => $user->lang['7_DAYS'], 14 => $user->lang['2_WEEKS'], 30 => $user->lang['1_MONTH'], 90 => $user->lang['3_MONTHS'], 180 => $user->lang['6_MONTHS'], 365 => $user->lang['1_YEAR']);$sort_by_text = array('a' => $user->lang['AUTHOR'], 't' => $user->lang['POST_TIME'], 's' => $user->lang['SUBJECT']);$sort_by_sql = array('a' => array('u.username_clean', 'p.post_id'), 't' => 'p.post_time', 's' => array('p.post_subject', 'p.post_id'));$join_user_sql = array('a' => true, 't' => false, 's' => false);$s_limit_days = $s_sort_key = $s_sort_dir = $u_sort_param = '';gen_sort_selects($limit_days, $sort_by_text, $sort_days, $sort_key, $sort_dir, $s_limit_days, $s_sort_key, $s_sort_dir, $u_sort_param, $default_sort_days, $default_sort_key, $default_sort_dir);// Obtain correct post count and ordering SQL if user has// requested anything differentif ($sort_days){	$min_post_time = time() - ($sort_days * 86400);	$sql = 'SELECT COUNT(post_id) AS num_posts		FROM ' . POSTS_TABLE . "		WHERE topic_id = $topic_id			AND post_time >= $min_post_time		" . (($auth->acl_get('m_approve', $forum_id)) ? '' : 'AND post_approved = 1');	$result = $db->sql_query($sql);	$total_posts = (int) $db->sql_fetchfield('num_posts');	$db->sql_freeresult($result);	$limit_posts_time = "AND p.post_time >= $min_post_time ";	if (isset($_POST['sort']))	{		$start = 0;	}}else{	$total_posts = $topic_replies + 1;	$limit_posts_time = '';}// Was a highlight request part of the URI?$highlight_match = $highlight = '';if ($hilit_words){	foreach (explode(' ', trim($hilit_words)) as $word)	{		if (trim($word))		{			$word = str_replace('\*', '\w+?', preg_quote($word, '#'));			$word = preg_replace('#(^|\s)\\\\w\*\?(\s|$)#', '$1\w+?$2', $word);			$highlight_match .= (($highlight_match != '') ? '|' : '') . $word;		}	}	$highlight = urlencode($hilit_words);}// Make sure $start is set to the last page if it exceeds the amountif ($start < 0 || $start >= $total_posts){	$start = ($start < 0) ? 0 : floor(($total_posts - 1) / $config['posts_per_page']) * $config['posts_per_page'];}// General Viewtopic URL for return links$viewtopic_url = append_sid("{$phpbb_root_path}viewtopic.$phpEx", "f=$forum_id&amp;t=$topic_id" . (($start == 0) ? '' : "&amp;start=$start") . ((strlen($u_sort_param)) ? "&amp;$u_sort_param" : '') . (($highlight_match) ? "&amp;hilit=$highlight" : ''));// Are we watching this topic?$s_watching_topic = array(	'link'			=> '',	'title'			=> '',	'is_watching'	=> false,);if (($config['email_enable'] || $config['jab_enable']) && $config['allow_topic_notify']){	$notify_status = (isset($topic_data['notify_status'])) ? $topic_data['notify_status'] : null;	watch_topic_forum('topic', $s_watching_topic, $user->data['user_id'], $forum_id, $topic_id, $notify_status, $start, $topic_data['topic_title']);	// Reset forum notification if forum notify is set	if ($config['allow_forum_notify'] && $auth->acl_get('f_subscribe', $forum_id))	{		$s_watching_forum = $s_watching_topic;		watch_topic_forum('forum', $s_watching_forum, $user->data['user_id'], $forum_id, 0);	}}// Bookmarksif ($config['allow_bookmarks'] && $user->data['is_registered'] && request_var('bookmark', 0)){	if (check_link_hash(request_var('hash', ''), "topic_$topic_id"))	{		if (!$topic_data['bookmarked'])		{			$sql = 'INSERT INTO ' . BOOKMARKS_TABLE . ' ' . $db->sql_build_array('INSERT', array(				'user_id'	=> $user->data['user_id'],				'topic_id'	=> $topic_id,			));			$db->sql_query($sql);		}		else		{			$sql = 'DELETE FROM ' . BOOKMARKS_TABLE . "				WHERE user_id = {$user->data['user_id']}					AND topic_id = $topic_id";			$db->sql_query($sql);		}		$message = (($topic_data['bookmarked']) ? $user->lang['BOOKMARK_REMOVED'] : $user->lang['BOOKMARK_ADDED']) . '<br /><br />' . sprintf($user->lang['RETURN_TOPIC'], '<a href="' . $viewtopic_url . '">', '</a>');	}	else	{		$message = $user->lang['BOOKMARK_ERR'] . '<br /><br />' . sprintf($user->lang['RETURN_TOPIC'], '<a href="' . $viewtopic_url . '">', '</a>');	}	meta_refresh(3, $viewtopic_url);	trigger_error($message);}// Grab ranks$ranks = $cache->obtain_ranks();// Grab icons$icons = $cache->obtain_icons();// Grab extensions$extensions = array();if ($topic_data['topic_attachment']){	$extensions = $cache->obtain_attach_extensions($forum_id);}// Forum rules listing$s_forum_rules = '';gen_forum_auth_level('topic', $forum_id, $topic_data['forum_status']);// Quick mod tools$allow_change_type = ($auth->acl_get('m_', $forum_id) || ($user->data['is_registered'] && $user->data['user_id'] == $topic_data['topic_poster'])) ? true : false;$topic_mod = '';$topic_mod .= ($auth->acl_get('m_lock', $forum_id) || ($auth->acl_get('f_user_lock', $forum_id) && $user->data['is_registered'] && $user->data['user_id'] == $topic_data['topic_poster'] && $topic_data['topic_status'] == ITEM_UNLOCKED)) ? (($topic_data['topic_status'] == ITEM_UNLOCKED) ? '<option value="lock">' . $user->lang['LOCK_TOPIC'] . '</option>' : '<option value="unlock">' . $user->lang['UNLOCK_TOPIC'] . '</option>') : '';$topic_mod .= ($auth->acl_get('m_delete', $forum_id)) ? '<option value="delete_topic">' . $user->lang['DELETE_TOPIC'] . '</option>' : '';$topic_mod .= ($auth->acl_get('m_move', $forum_id) && $topic_data['topic_status'] != ITEM_MOVED) ? '<option value="move">' . $user->lang['MOVE_TOPIC'] . '</option>' : '';$topic_mod .= ($auth->acl_get('m_split', $forum_id)) ? '<option value="split">' . $user->lang['SPLIT_TOPIC'] . '</option>' : '';$topic_mod .= ($auth->acl_get('m_merge', $forum_id)) ? '<option value="merge">' . $user->lang['MERGE_POSTS'] . '</option>' : '';$topic_mod .= ($auth->acl_get('m_merge', $forum_id)) ? '<option value="merge_topic">' . $user->lang['MERGE_TOPIC'] . '</option>' : '';$topic_mod .= ($auth->acl_get('m_move', $forum_id)) ? '<option value="fork">' . $user->lang['FORK_TOPIC'] . '</option>' : '';$topic_mod .= ($allow_change_type && $auth->acl_gets('f_sticky', 'f_announce', $forum_id) && $topic_data['topic_type'] != POST_NORMAL) ? '<option value="make_normal">' . $user->lang['MAKE_NORMAL'] . '</option>' : '';$topic_mod .= ($allow_change_type && $auth->acl_get('f_sticky', $forum_id) && $topic_data['topic_type'] != POST_STICKY) ? '<option value="make_sticky">' . $user->lang['MAKE_STICKY'] . '</option>' : '';$topic_mod .= ($allow_change_type && $auth->acl_get('f_announce', $forum_id) && $topic_data['topic_type'] != POST_ANNOUNCE) ? '<option value="make_announce">' . $user->lang['MAKE_ANNOUNCE'] . '</option>' : '';$topic_mod .= ($allow_change_type && $auth->acl_get('f_announce', $forum_id) && $topic_data['topic_type'] != POST_GLOBAL) ? '<option value="make_global">' . $user->lang['MAKE_GLOBAL'] . '</option>' : '';$topic_mod .= ($auth->acl_get('m_', $forum_id)) ? '<option value="topic_logs">' . $user->lang['VIEW_TOPIC_LOGS'] . '</option>' : '';// If we've got a hightlight set pass it on to pagination.$pagination = generate_pagination(append_sid("{$phpbb_root_path}viewtopic.$phpEx", "f=$forum_id&amp;t=$topic_id" . ((strlen($u_sort_param)) ? "&amp;$u_sort_param" : '') . (($highlight_match) ? "&amp;hilit=$highlight" : '')), $total_posts, $config['posts_per_page'], $start);// Navigation linksgenerate_forum_nav($topic_data);// Forum Rulesgenerate_forum_rules($topic_data);// Moderators$forum_moderators = array();if ($config['load_moderators']){	get_moderators($forum_moderators, $forum_id);}// This is only used for print view so ...$server_path = (!$view) ? $phpbb_root_path : generate_board_url() . '/';// Replace naughty words in title$topic_data['topic_title'] = censor_text($topic_data['topic_title']);$s_search_hidden_fields = array(	't' => $topic_id,	'sf' => 'msgonly',);if ($_SID){	$s_search_hidden_fields['sid'] = $_SID;}if (!empty($_EXTRA_URL)){	foreach ($_EXTRA_URL as $url_param)	{		$url_param = explode('=', $url_param, 2);		$s_hidden_fields[$url_param[0]] = $url_param[1];	}}// Send vars to template$template->assign_vars(array(	'FORUM_ID' 		=> $forum_id,	'FORUM_NAME' 	=> $topic_data['forum_name'],	'FORUM_DESC'	=> generate_text_for_display($topic_data['forum_desc'], $topic_data['forum_desc_uid'], $topic_data['forum_desc_bitfield'], $topic_data['forum_desc_options']),	'TOPIC_ID' 		=> $topic_id,	'TOPIC_TITLE' 	=> $topic_data['topic_title'],	'TOPIC_POSTER'	=> $topic_data['topic_poster'],	'TOPIC_AUTHOR_FULL'		=> get_username_string('full', $topic_data['topic_poster'], $topic_data['topic_first_poster_name'], $topic_data['topic_first_poster_colour']),	'TOPIC_AUTHOR_COLOUR'	=> get_username_string('colour', $topic_data['topic_poster'], $topic_data['topic_first_poster_name'], $topic_data['topic_first_poster_colour']),	'TOPIC_AUTHOR'			=> get_username_string('username', $topic_data['topic_poster'], $topic_data['topic_first_poster_name'], $topic_data['topic_first_poster_colour']),	'PAGINATION' 	=> $pagination,	'PAGE_NUMBER' 	=> on_page($total_posts, $config['posts_per_page'], $start),	'TOTAL_POSTS'	=> ($total_posts == 1) ? $user->lang['VIEW_TOPIC_POST'] : sprintf($user->lang['VIEW_TOPIC_POSTS'], $total_posts),	'U_MCP' 		=> ($auth->acl_get('m_', $forum_id)) ? append_sid("{$phpbb_root_path}mcp.$phpEx", "i=main&amp;mode=topic_view&amp;f=$forum_id&amp;t=$topic_id" . (($start == 0) ? '' : "&amp;start=$start") . ((strlen($u_sort_param)) ? "&amp;$u_sort_param" : ''), true, $user->session_id) : '',	'MODERATORS'	=> (isset($forum_moderators[$forum_id]) && sizeof($forum_moderators[$forum_id])) ? implode(', ', $forum_moderators[$forum_id]) : '',	'POST_IMG' 			=> ($topic_data['forum_status'] == ITEM_LOCKED) ? $user->img('button_topic_locked', 'FORUM_LOCKED') : $user->img('button_topic_new', 'POST_NEW_TOPIC'),	'QUOTE_IMG' 		=> $user->img('icon_post_quote', 'REPLY_WITH_QUOTE'),	'REPLY_IMG'			=> ($topic_data['forum_status'] == ITEM_LOCKED || $topic_data['topic_status'] == ITEM_LOCKED) ? $user->img('button_topic_locked', 'TOPIC_LOCKED') : $user->img('button_topic_reply', 'REPLY_TO_TOPIC'),	'EDIT_IMG' 			=> $user->img('icon_post_edit', 'EDIT_POST'),	'DELETE_IMG' 		=> $user->img('icon_post_delete', 'DELETE_POST'),	'INFO_IMG' 			=> $user->img('icon_post_info', 'VIEW_INFO'),	'PROFILE_IMG'		=> $user->img('icon_user_profile', 'READ_PROFILE'),	'SEARCH_IMG' 		=> $user->img('icon_user_search', 'SEARCH_USER_POSTS'),	'PM_IMG' 			=> $user->img('icon_contact_pm', 'SEND_PRIVATE_MESSAGE'),	'EMAIL_IMG' 		=> $user->img('icon_contact_email', 'SEND_EMAIL'),	'WWW_IMG' 			=> $user->img('icon_contact_www', 'VISIT_WEBSITE'),	'ICQ_IMG' 			=> $user->img('icon_contact_icq', 'ICQ'),	'AIM_IMG' 			=> $user->img('icon_contact_aim', 'AIM'),	'MSN_IMG' 			=> $user->img('icon_contact_msnm', 'MSNM'),	'YIM_IMG' 			=> $user->img('icon_contact_yahoo', 'YIM'),	'JABBER_IMG'		=> $user->img('icon_contact_jabber', 'JABBER') ,	'REPORT_IMG'		=> $user->img('icon_post_report', 'REPORT_POST'),	'REPORTED_IMG'		=> $user->img('icon_topic_reported', 'POST_REPORTED'),	'UNAPPROVED_IMG'	=> $user->img('icon_topic_unapproved', 'POST_UNAPPROVED'),	'WARN_IMG'			=> $user->img('icon_user_warn', 'WARN_USER'),	'S_IS_LOCKED'			=> ($topic_data['topic_status'] == ITEM_UNLOCKED && $topic_data['forum_status'] == ITEM_UNLOCKED) ? false : true,	'S_SELECT_SORT_DIR' 	=> $s_sort_dir,	'S_SELECT_SORT_KEY' 	=> $s_sort_key,	'S_SELECT_SORT_DAYS' 	=> $s_limit_days,	'S_SINGLE_MODERATOR'	=> (!empty($forum_moderators[$forum_id]) && sizeof($forum_moderators[$forum_id]) > 1) ? false : true,	'S_TOPIC_ACTION' 		=> append_sid("{$phpbb_root_path}viewtopic.$phpEx", "f=$forum_id&amp;t=$topic_id" . (($start == 0) ? '' : "&amp;start=$start")),	'S_TOPIC_MOD' 			=> ($topic_mod != '') ? '<select name="action" id="quick-mod-select">' . $topic_mod . '</select>' : '',	'S_MOD_ACTION' 			=> append_sid("{$phpbb_root_path}mcp.$phpEx", "f=$forum_id&amp;t=$topic_id" . (($start == 0) ? '' : "&amp;start=$start") . "&amp;quickmod=1&amp;redirect=" . urlencode(str_replace('&amp;', '&', $viewtopic_url)), true, $user->session_id),	'S_VIEWTOPIC'			=> true,	'S_DISPLAY_SEARCHBOX'	=> ($auth->acl_get('u_search') && $auth->acl_get('f_search', $forum_id) && $config['load_search']) ? true : false,	'S_SEARCHBOX_ACTION'	=> append_sid("{$phpbb_root_path}search.$phpEx"),	'S_SEARCH_LOCAL_HIDDEN_FIELDS'	=> build_hidden_fields($s_search_hidden_fields),	'S_DISPLAY_POST_INFO'	=> ($topic_data['forum_type'] == FORUM_POST && ($auth->acl_get('f_post', $forum_id) || $user->data['user_id'] == ANONYMOUS)) ? true : false,	'S_DISPLAY_REPLY_INFO'	=> ($topic_data['forum_type'] == FORUM_POST && ($auth->acl_get('f_reply', $forum_id) || $user->data['user_id'] == ANONYMOUS)) ? true : false,	'S_ENABLE_FEEDS_TOPIC'	=> ($config['feed_topic'] && !phpbb_optionget(FORUM_OPTION_FEED_EXCLUDE, $topic_data['forum_options'])) ? true : false,	'U_TOPIC'				=> "{$server_path}viewtopic.$phpEx?f=$forum_id&amp;t=$topic_id",	'U_FORUM'				=> $server_path,	'U_VIEW_TOPIC' 			=> $viewtopic_url,	'U_VIEW_FORUM' 			=> append_sid("{$phpbb_root_path}viewforum.$phpEx", 'f=' . $forum_id),	'U_VIEW_OLDER_TOPIC'	=> append_sid("{$phpbb_root_path}viewtopic.$phpEx", "f=$forum_id&amp;t=$topic_id&amp;view=previous"),	'U_VIEW_NEWER_TOPIC'	=> append_sid("{$phpbb_root_path}viewtopic.$phpEx", "f=$forum_id&amp;t=$topic_id&amp;view=next"),	'U_PRINT_TOPIC'			=> ($auth->acl_get('f_print', $forum_id)) ? $viewtopic_url . '&amp;view=print' : '',	'U_EMAIL_TOPIC'			=> ($auth->acl_get('f_email', $forum_id) && $config['email_enable']) ? append_sid("{$phpbb_root_path}memberlist.$phpEx", "mode=email&amp;t=$topic_id") : '',	'U_WATCH_TOPIC' 		=> $s_watching_topic['link'],	'L_WATCH_TOPIC' 		=> $s_watching_topic['title'],	'S_WATCHING_TOPIC'		=> $s_watching_topic['is_watching'],	'U_BOOKMARK_TOPIC'		=> ($user->data['is_registered'] && $config['allow_bookmarks']) ? $viewtopic_url . '&amp;bookmark=1&amp;hash=' . generate_link_hash("topic_$topic_id") : '',	'L_BOOKMARK_TOPIC'		=> ($user->data['is_registered'] && $config['allow_bookmarks'] && $topic_data['bookmarked']) ? $user->lang['BOOKMARK_TOPIC_REMOVE'] : $user->lang['BOOKMARK_TOPIC'],	'U_POST_NEW_TOPIC' 		=> ($auth->acl_get('f_post', $forum_id) || $user->data['user_id'] == ANONYMOUS) ? append_sid("{$phpbb_root_path}posting.$phpEx", "mode=post&amp;f=$forum_id") : '',	'U_POST_REPLY_TOPIC' 	=> ($auth->acl_get('f_reply', $forum_id) || $user->data['user_id'] == ANONYMOUS) ? append_sid("{$phpbb_root_path}posting.$phpEx", "mode=reply&amp;f=$forum_id&amp;t=$topic_id") : '',	'U_BUMP_TOPIC'			=> (bump_topic_allowed($forum_id, $topic_data['topic_bumped'], $topic_data['topic_last_post_time'], $topic_data['topic_poster'], $topic_data['topic_last_poster_id'])) ? append_sid("{$phpbb_root_path}posting.$phpEx", "mode=bump&amp;f=$forum_id&amp;t=$topic_id&amp;hash=" . generate_link_hash("topic_$topic_id")) : ''));// Does this topic contain a poll?if (!empty($topic_data['poll_start'])){	$sql = 'SELECT o.*, p.bbcode_bitfield, p.bbcode_uid		FROM ' . POLL_OPTIONS_TABLE . ' o, ' . POSTS_TABLE . " p		WHERE o.topic_id = $topic_id			AND p.post_id = {$topic_data['topic_first_post_id']}			AND p.topic_id = o.topic_id		ORDER BY o.poll_option_id";	$result = $db->sql_query($sql);	$poll_info = array();	while ($row = $db->sql_fetchrow($result))	{		$poll_info[] = $row;	}	$db->sql_freeresult($result);	$cur_voted_id = array();	if ($user->data['is_registered'])	{		$sql = 'SELECT poll_option_id			FROM ' . POLL_VOTES_TABLE . '			WHERE topic_id = ' . $topic_id . '				AND vote_user_id = ' . $user->data['user_id'];		$result = $db->sql_query($sql);		while ($row = $db->sql_fetchrow($result))		{			$cur_voted_id[] = $row['poll_option_id'];		}		$db->sql_freeresult($result);	}	else	{		// Cookie based guest tracking ... I don't like this but hum ho		// it's oft requested. This relies on "nice" users who don't feel		// the need to delete cookies to mess with results.		if (isset($_COOKIE[$config['cookie_name'] . '_poll_' . $topic_id]))		{			$cur_voted_id = explode(',', $_COOKIE[$config['cookie_name'] . '_poll_' . $topic_id]);			$cur_voted_id = array_map('intval', $cur_voted_id);		}	}	// Can not vote at all if no vote permission	$s_can_vote = ($auth->acl_get('f_vote', $forum_id) &&		(($topic_data['poll_length'] != 0 && $topic_data['poll_start'] + $topic_data['poll_length'] > time()) || $topic_data['poll_length'] == 0) &&		$topic_data['topic_status'] != ITEM_LOCKED &&		$topic_data['forum_status'] != ITEM_LOCKED &&		(!sizeof($cur_voted_id) ||		($auth->acl_get('f_votechg', $forum_id) && $topic_data['poll_vote_change']))) ? true : false;	$s_display_results = (!$s_can_vote || ($s_can_vote && sizeof($cur_voted_id)) || $view == 'viewpoll') ? true : false;	if ($update && $s_can_vote)	{		if (!sizeof($voted_id) || sizeof($voted_id) > $topic_data['poll_max_options'] || in_array(VOTE_CONVERTED, $cur_voted_id) || !check_form_key('posting'))		{			$redirect_url = append_sid("{$phpbb_root_path}viewtopic.$phpEx", "f=$forum_id&amp;t=$topic_id" . (($start == 0) ? '' : "&amp;start=$start"));			meta_refresh(5, $redirect_url);			if (!sizeof($voted_id))			{				$message = 'NO_VOTE_OPTION';			}			else if (sizeof($voted_id) > $topic_data['poll_max_options'])			{				$message = 'TOO_MANY_VOTE_OPTIONS';			}			else if (in_array(VOTE_CONVERTED, $cur_voted_id))			{				$message = 'VOTE_CONVERTED';			}			else			{				$message = 'FORM_INVALID';			}			$message = $user->lang[$message] . '<br /><br />' . sprintf($user->lang['RETURN_TOPIC'], '<a href="' . $redirect_url . '">', '</a>');			trigger_error($message);		}		foreach ($voted_id as $option)		{			if (in_array($option, $cur_voted_id))			{				continue;			}			$sql = 'UPDATE ' . POLL_OPTIONS_TABLE . '				SET poll_option_total = poll_option_total + 1				WHERE poll_option_id = ' . (int) $option . '					AND topic_id = ' . (int) $topic_id;			$db->sql_query($sql);			if ($user->data['is_registered'])			{				$sql_ary = array(					'topic_id'			=> (int) $topic_id,					'poll_option_id'	=> (int) $option,					'vote_user_id'		=> (int) $user->data['user_id'],					'vote_user_ip'		=> (string) $user->ip,				);				$sql = 'INSERT INTO ' . POLL_VOTES_TABLE . ' ' . $db->sql_build_array('INSERT', $sql_ary);				$db->sql_query($sql);			}		}		foreach ($cur_voted_id as $option)		{			if (!in_array($option, $voted_id))			{				$sql = 'UPDATE ' . POLL_OPTIONS_TABLE . '					SET poll_option_total = poll_option_total - 1					WHERE poll_option_id = ' . (int) $option . '						AND topic_id = ' . (int) $topic_id;				$db->sql_query($sql);				if ($user->data['is_registered'])				{					$sql = 'DELETE FROM ' . POLL_VOTES_TABLE . '						WHERE topic_id = ' . (int) $topic_id . '							AND poll_option_id = ' . (int) $option . '							AND vote_user_id = ' . (int) $user->data['user_id'];					$db->sql_query($sql);				}			}		}		if ($user->data['user_id'] == ANONYMOUS && !$user->data['is_bot'])		{			$user->set_cookie('poll_' . $topic_id, implode(',', $voted_id), time() + 31536000);		}		$sql = 'UPDATE ' . TOPICS_TABLE . '			SET poll_last_vote = ' . time() . "			WHERE topic_id = $topic_id";		//, topic_last_post_time = ' . time() . " -- for bumping topics with new votes, ignore for now		$db->sql_query($sql);		$redirect_url = append_sid("{$phpbb_root_path}viewtopic.$phpEx", "f=$forum_id&amp;t=$topic_id" . (($start == 0) ? '' : "&amp;start=$start"));		meta_refresh(5, $redirect_url);		trigger_error($user->lang['VOTE_SUBMITTED'] . '<br /><br />' . sprintf($user->lang['RETURN_TOPIC'], '<a href="' . $redirect_url . '">', '</a>'));	}	$poll_total = 0;	foreach ($poll_info as $poll_option)	{		$poll_total += $poll_option['poll_option_total'];	}	if ($poll_info[0]['bbcode_bitfield'])	{		$poll_bbcode = new bbcode();	}	else	{		$poll_bbcode = false;	}	for ($i = 0, $size = sizeof($poll_info); $i < $size; $i++)	{		$poll_info[$i]['poll_option_text'] = censor_text($poll_info[$i]['poll_option_text']);		if ($poll_bbcode !== false)		{			$poll_bbcode->bbcode_second_pass($poll_info[$i]['poll_option_text'], $poll_info[$i]['bbcode_uid'], $poll_option['bbcode_bitfield']);		}		$poll_info[$i]['poll_option_text'] = bbcode_nl2br($poll_info[$i]['poll_option_text']);		$poll_info[$i]['poll_option_text'] = smiley_text($poll_info[$i]['poll_option_text']);	}	$topic_data['poll_title'] = censor_text($topic_data['poll_title']);	if ($poll_bbcode !== false)	{		$poll_bbcode->bbcode_second_pass($topic_data['poll_title'], $poll_info[0]['bbcode_uid'], $poll_info[0]['bbcode_bitfield']);	}	$topic_data['poll_title'] = bbcode_nl2br($topic_data['poll_title']);	$topic_data['poll_title'] = smiley_text($topic_data['poll_title']);	unset($poll_bbcode);	foreach ($poll_info as $poll_option)	{		$option_pct = ($poll_total > 0) ? $poll_option['poll_option_total'] / $poll_total : 0;		$option_pct_txt = sprintf("%.1d%%", round($option_pct * 100));		$template->assign_block_vars('poll_option', array(			'POLL_OPTION_ID' 		=> $poll_option['poll_option_id'],			'POLL_OPTION_CAPTION' 	=> $poll_option['poll_option_text'],			'POLL_OPTION_RESULT' 	=> $poll_option['poll_option_total'],			'POLL_OPTION_PERCENT' 	=> $option_pct_txt,			'POLL_OPTION_PCT'		=> round($option_pct * 100),			'POLL_OPTION_IMG' 		=> $user->img('poll_center', $option_pct_txt, round($option_pct * 250)),			'POLL_OPTION_VOTED'		=> (in_array($poll_option['poll_option_id'], $cur_voted_id)) ? true : false)		);	}	$poll_end = $topic_data['poll_length'] + $topic_data['poll_start'];	$template->assign_vars(array(		'POLL_QUESTION'		=> $topic_data['poll_title'],		'TOTAL_VOTES' 		=> $poll_total,		'POLL_LEFT_CAP_IMG'	=> $user->img('poll_left'),		'POLL_RIGHT_CAP_IMG'=> $user->img('poll_right'),		'L_MAX_VOTES'		=> ($topic_data['poll_max_options'] == 1) ? $user->lang['MAX_OPTION_SELECT'] : sprintf($user->lang['MAX_OPTIONS_SELECT'], $topic_data['poll_max_options']),		'L_POLL_LENGTH'		=> ($topic_data['poll_length']) ? sprintf($user->lang[($poll_end > time()) ? 'POLL_RUN_TILL' : 'POLL_ENDED_AT'], $user->format_date($poll_end)) : '',		'S_HAS_POLL'		=> true,		'S_CAN_VOTE'		=> $s_can_vote,		'S_DISPLAY_RESULTS'	=> $s_display_results,		'S_IS_MULTI_CHOICE'	=> ($topic_data['poll_max_options'] > 1) ? true : false,		'S_POLL_ACTION'		=> $viewtopic_url,		'U_VIEW_RESULTS'	=> $viewtopic_url . '&amp;view=viewpoll')	);	unset($poll_end, $poll_info, $voted_id);}// If the user is trying to reach the second half of the topic, fetch it starting from the end$store_reverse = false;$sql_limit = $config['posts_per_page'];$sql_sort_order = $direction = '';if ($start > $total_posts / 2){	$store_reverse = true;	if ($start + $config['posts_per_page'] > $total_posts)	{		$sql_limit = min($config['posts_per_page'], max(1, $total_posts - $start));	}	// Select the sort order	$direction = (($sort_dir == 'd') ? 'ASC' : 'DESC');	$sql_start = max(0, $total_posts - $sql_limit - $start);}else{	// Select the sort order	$direction = (($sort_dir == 'd') ? 'DESC' : 'ASC');	$sql_start = $start;}if (is_array($sort_by_sql[$sort_key])){	$sql_sort_order = implode(' ' . $direction . ', ', $sort_by_sql[$sort_key]) . ' ' . $direction;}else{	$sql_sort_order = $sort_by_sql[$sort_key] . ' ' . $direction;}// Container for user details, only process once$post_list = $user_cache = $id_cache = $attachments = $attach_list = $rowset = $update_count = $post_edit_list = array();$has_attachments = $display_notice = false;$bbcode_bitfield = '';$i = $i_total = 0;// Go ahead and pull all data for this topic$sql = 'SELECT p.post_id	FROM ' . POSTS_TABLE . ' p' . (($join_user_sql[$sort_key]) ? ', ' . USERS_TABLE . ' u': '') . "	WHERE p.topic_id = $topic_id		" . ((!$auth->acl_get('m_approve', $forum_id)) ? 'AND p.post_approved = 1' : '') . "		" . (($join_user_sql[$sort_key]) ? 'AND u.user_id = p.poster_id': '') . "		$limit_posts_time	ORDER BY $sql_sort_order";$result = $db->sql_query_limit($sql, $sql_limit, $sql_start);$i = ($store_reverse) ? $sql_limit - 1 : 0;while ($row = $db->sql_fetchrow($result)){	$post_list[$i] = (int) $row['post_id'];	($store_reverse) ? $i-- : $i++;}$db->sql_freeresult($result);if (!sizeof($post_list)){	if ($sort_days)	{		trigger_error('NO_POSTS_TIME_FRAME');	}	else	{		trigger_error('NO_TOPIC');	}}// Holding maximum post time for marking topic read// We need to grab it because we do reverse ordering sometimes$max_post_time = 0;$sql = $db->sql_build_query('SELECT', array(	'SELECT'	=> 'u.*, z.friend, z.foe, p.*',	'FROM'		=> array(		USERS_TABLE		=> 'u',		POSTS_TABLE		=> 'p',	),	'LEFT_JOIN'	=> array(		array(			'FROM'	=> array(ZEBRA_TABLE => 'z'),			'ON'	=> 'z.user_id = ' . $user->data['user_id'] . ' AND z.zebra_id = p.poster_id'		)	),	'WHERE'		=> $db->sql_in_set('p.post_id', $post_list) . '		AND u.user_id = p.poster_id'));$result = $db->sql_query($sql);$now = phpbb_gmgetdate(time() + $user->timezone + $user->dst);// Posts are stored in the $rowset array while $attach_list, $user_cache// and the global bbcode_bitfield are builtwhile ($row = $db->sql_fetchrow($result)){	// Set max_post_time	if ($row['post_time'] > $max_post_time)	{		$max_post_time = $row['post_time'];	}	$poster_id = (int) $row['poster_id'];	// Does post have an attachment? If so, add it to the list	if ($row['post_attachment'] && $config['allow_attachments'])	{		$attach_list[] = (int) $row['post_id'];		if ($row['post_approved'])		{			$has_attachments = true;		}	}	$rowset[$row['post_id']] = array(		'hide_post'			=> ($row['foe'] && ($view != 'show' || $post_id != $row['post_id'])) ? true : false,		'post_id'			=> $row['post_id'],		'post_time'			=> $row['post_time'],		'user_id'			=> $row['user_id'],		'username'			=> $row['username'],		'user_colour'		=> $row['user_colour'],		'topic_id'			=> $row['topic_id'],		'forum_id'			=> $row['forum_id'],		'post_subject'		=> $row['post_subject'],		'post_edit_count'	=> $row['post_edit_count'],		'post_edit_time'	=> $row['post_edit_time'],		'post_edit_reason'	=> $row['post_edit_reason'],		'post_edit_user'	=> $row['post_edit_user'],		'post_edit_locked'	=> $row['post_edit_locked'],		// Make sure the icon actually exists		'icon_id'			=> (isset($icons[$row['icon_id']]['img'], $icons[$row['icon_id']]['height'], $icons[$row['icon_id']]['width'])) ? $row['icon_id'] : 0,		'post_attachment'	=> $row['post_attachment'],		'post_approved'		=> $row['post_approved'],		'post_reported'		=> $row['post_reported'],		'post_username'		=> $row['post_username'],		'post_text'			=> $row['post_text'],		'bbcode_uid'		=> $row['bbcode_uid'],		'bbcode_bitfield'	=> $row['bbcode_bitfield'],		'enable_smilies'	=> $row['enable_smilies'],		'enable_sig'		=> $row['enable_sig'],		'friend'			=> $row['friend'],		'foe'				=> $row['foe'],	);	// Define the global bbcode bitfield, will be used to load bbcodes	$bbcode_bitfield = $bbcode_bitfield | base64_decode($row['bbcode_bitfield']);	// Is a signature attached? Are we going to display it?	if ($row['enable_sig'] && $config['allow_sig'] && $user->optionget('viewsigs'))	{		$bbcode_bitfield = $bbcode_bitfield | base64_decode($row['user_sig_bbcode_bitfield']);	}	// Cache various user specific data ... so we don't have to recompute	// this each time the same user appears on this page	if (!isset($user_cache[$poster_id]))	{		if ($poster_id == ANONYMOUS)		{			$user_cache[$poster_id] = array(				'joined'		=> '',				'posts'			=> '',				'from'			=> '',				'sig'					=> '',				'sig_bbcode_uid'		=> '',				'sig_bbcode_bitfield'	=> '',				'online'			=> false,				'avatar'			=> ($user->optionget('viewavatars')) ? get_user_avatar($row['user_avatar'], $row['user_avatar_type'], $row['user_avatar_width'], $row['user_avatar_height']) : '',				'rank_title'		=> '',				'rank_image'		=> '',				'rank_image_src'	=> '',				'sig'				=> '',				'profile'			=> '',				'pm'				=> '',				'email'				=> '',				'www'				=> '',				'icq_status_img'	=> '',				'icq'				=> '',				'aim'				=> '',				'msn'				=> '',				'yim'				=> '',				'jabber'			=> '',				'search'			=> '',				'age'				=> '',				'username'			=> $row['username'],				'user_colour'		=> $row['user_colour'],				'warnings'			=> 0,				'allow_pm'			=> 0,			);			get_user_rank($row['user_rank'], false, $user_cache[$poster_id]['rank_title'], $user_cache[$poster_id]['rank_image'], $user_cache[$poster_id]['rank_image_src']);		}		else		{			$user_sig = '';			// We add the signature to every posters entry because enable_sig is post dependant			if ($row['user_sig'] && $config['allow_sig'] && $user->optionget('viewsigs'))			{				$user_sig = $row['user_sig'];			}			$id_cache[] = $poster_id;			$user_cache[$poster_id] = array(				'joined'		=> $user->format_date($row['user_regdate']),				'posts'			=> $row['user_posts'],				'warnings'		=> (isset($row['user_warnings'])) ? $row['user_warnings'] : 0,				'from'			=> (!empty($row['user_from'])) ? $row['user_from'] : '',				'sig'					=> $user_sig,				'sig_bbcode_uid'		=> (!empty($row['user_sig_bbcode_uid'])) ? $row['user_sig_bbcode_uid'] : '',				'sig_bbcode_bitfield'	=> (!empty($row['user_sig_bbcode_bitfield'])) ? $row['user_sig_bbcode_bitfield'] : '',				'viewonline'	=> $row['user_allow_viewonline'],				'allow_pm'		=> $row['user_allow_pm'],				'avatar'		=> ($user->optionget('viewavatars')) ? get_user_avatar($row['user_avatar'], $row['user_avatar_type'], $row['user_avatar_width'], $row['user_avatar_height']) : '',				'age'			=> '',				'rank_title'		=> '',				'rank_image'		=> '',				'rank_image_src'	=> '',				'username'			=> $row['username'],				'user_colour'		=> $row['user_colour'],				'online'		=> false,				'profile'		=> append_sid("{$phpbb_root_path}memberlist.$phpEx", "mode=viewprofile&amp;u=$poster_id"),				'www'			=> $row['user_website'],				'aim'			=> ($row['user_aim'] && $auth->acl_get('u_sendim')) ? append_sid("{$phpbb_root_path}memberlist.$phpEx", "mode=contact&amp;action=aim&amp;u=$poster_id") : '',				'msn'			=> ($row['user_msnm'] && $auth->acl_get('u_sendim')) ? append_sid("{$phpbb_root_path}memberlist.$phpEx", "mode=contact&amp;action=msnm&amp;u=$poster_id") : '',				'yim'			=> ($row['user_yim']) ? 'http://edit.yahoo.com/config/send_webmesg?.target=' . urlencode($row['user_yim']) . '&amp;.src=pg' : '',				'jabber'		=> ($row['user_jabber'] && $auth->acl_get('u_sendim')) ? append_sid("{$phpbb_root_path}memberlist.$phpEx", "mode=contact&amp;action=jabber&amp;u=$poster_id") : '',				'search'		=> ($auth->acl_get('u_search')) ? append_sid("{$phpbb_root_path}search.$phpEx", "author_id=$poster_id&amp;sr=posts") : '',				'author_full'		=> get_username_string('full', $poster_id, $row['username'], $row['user_colour']),				'author_colour'		=> get_username_string('colour', $poster_id, $row['username'], $row['user_colour']),				'author_username'	=> get_username_string('username', $poster_id, $row['username'], $row['user_colour']),				'author_profile'	=> get_username_string('profile', $poster_id, $row['username'], $row['user_colour']),			);			get_user_rank($row['user_rank'], $row['user_posts'], $user_cache[$poster_id]['rank_title'], $user_cache[$poster_id]['rank_image'], $user_cache[$poster_id]['rank_image_src']);			if ((!empty($row['user_allow_viewemail']) && $auth->acl_get('u_sendemail')) || $auth->acl_get('a_email'))			{				$user_cache[$poster_id]['email'] = ($config['board_email_form'] && $config['email_enable']) ? append_sid("{$phpbb_root_path}memberlist.$phpEx", "mode=email&amp;u=$poster_id") : (($config['board_hide_emails'] && !$auth->acl_get('a_email')) ? '' : 'mailto:' . $row['user_email']);			}			else			{				$user_cache[$poster_id]['email'] = '';			}			if (!empty($row['user_icq']))			{				$user_cache[$poster_id]['icq'] = 'http://www.icq.com/people/' . urlencode($row['user_icq']) . '/';				$user_cache[$poster_id]['icq_status_img'] = '<img src="http://web.icq.com/whitepages/online?icq=' . $row['user_icq'] . '&amp;img=5" width="18" height="18" alt="" />';			}			else			{				$user_cache[$poster_id]['icq_status_img'] = '';				$user_cache[$poster_id]['icq'] = '';			}			if ($config['allow_birthdays'] && !empty($row['user_birthday']))			{				list($bday_day, $bday_month, $bday_year) = array_map('intval', explode('-', $row['user_birthday']));				if ($bday_year)				{					$diff = $now['mon'] - $bday_month;					if ($diff == 0)					{						$diff = ($now['mday'] - $bday_day < 0) ? 1 : 0;					}					else					{						$diff = ($diff < 0) ? 1 : 0;					}					$user_cache[$poster_id]['age'] = (int) ($now['year'] - $bday_year - $diff);				}			}		}	}}$db->sql_freeresult($result);// Load custom profile fieldsif ($config['load_cpf_viewtopic']){	if (!class_exists('custom_profile'))	{		include($phpbb_root_path . 'includes/functions_profile_fields.' . $phpEx);	}	$cp = new custom_profile();	// Grab all profile fields from users in id cache for later use - similar to the poster cache	$profile_fields_tmp = $cp->generate_profile_fields_template('grab', $id_cache);	// filter out fields not to be displayed on viewtopic. Yes, it's a hack, but this shouldn't break any MODs.	$profile_fields_cache = array();	foreach ($profile_fields_tmp as $profile_user_id => $profile_fields)	{		$profile_fields_cache[$profile_user_id] = array();		foreach ($profile_fields as $used_ident => $profile_field)		{			if ($profile_field['data']['field_show_on_vt'])			{				$profile_fields_cache[$profile_user_id][$used_ident] = $profile_field;			}		}	}	unset($profile_fields_tmp);}// Generate online information for userif ($config['load_onlinetrack'] && sizeof($id_cache)){	$sql = 'SELECT session_user_id, MAX(session_time) as online_time, MIN(session_viewonline) AS viewonline		FROM ' . SESSIONS_TABLE . '		WHERE ' . $db->sql_in_set('session_user_id', $id_cache) . '		GROUP BY session_user_id';	$result = $db->sql_query($sql);	$update_time = $config['load_online_time'] * 60;	while ($row = $db->sql_fetchrow($result))	{		$user_cache[$row['session_user_id']]['online'] = (time() - $update_time < $row['online_time'] && (($row['viewonline']) || $auth->acl_get('u_viewonline'))) ? true : false;	}	$db->sql_freeresult($result);}unset($id_cache);// Pull attachment dataif (sizeof($attach_list)){	if ($auth->acl_get('u_download') && $auth->acl_get('f_download', $forum_id))	{		$sql = 'SELECT *			FROM ' . ATTACHMENTS_TABLE . '			WHERE ' . $db->sql_in_set('post_msg_id', $attach_list) . '				AND in_message = 0			ORDER BY filetime DESC, post_msg_id ASC';		$result = $db->sql_query($sql);		while ($row = $db->sql_fetchrow($result))		{			$attachments[$row['post_msg_id']][] = $row;		}		$db->sql_freeresult($result);		// No attachments exist, but post table thinks they do so go ahead and reset post_attach flags		if (!sizeof($attachments))		{			$sql = 'UPDATE ' . POSTS_TABLE . '				SET post_attachment = 0				WHERE ' . $db->sql_in_set('post_id', $attach_list);			$db->sql_query($sql);			// We need to update the topic indicator too if the complete topic is now without an attachment			if (sizeof($rowset) != $total_posts)			{				// Not all posts are displayed so we query the db to find if there's any attachment for this topic				$sql = 'SELECT a.post_msg_id as post_id					FROM ' . ATTACHMENTS_TABLE . ' a, ' . POSTS_TABLE . " p					WHERE p.topic_id = $topic_id						AND p.post_approved = 1						AND p.topic_id = a.topic_id";				$result = $db->sql_query_limit($sql, 1);				$row = $db->sql_fetchrow($result);				$db->sql_freeresult($result);				if (!$row)				{					$sql = 'UPDATE ' . TOPICS_TABLE . "						SET topic_attachment = 0						WHERE topic_id = $topic_id";					$db->sql_query($sql);				}			}			else			{				$sql = 'UPDATE ' . TOPICS_TABLE . "					SET topic_attachment = 0					WHERE topic_id = $topic_id";				$db->sql_query($sql);			}		}		else if ($has_attachments && !$topic_data['topic_attachment'])		{			// Topic has approved attachments but its flag is wrong			$sql = 'UPDATE ' . TOPICS_TABLE . "				SET topic_attachment = 1				WHERE topic_id = $topic_id";			$db->sql_query($sql);			$topic_data['topic_attachment'] = 1;		}	}	else	{		$display_notice = true;	}}// Instantiate BBCode if need beif ($bbcode_bitfield !== ''){	$bbcode = new bbcode(base64_encode($bbcode_bitfield));}$i_total = sizeof($rowset) - 1;$prev_post_id = '';$template->assign_vars(array(	'S_NUM_POSTS' => sizeof($post_list)));// Output the posts$first_unread = $post_unread = false;for ($i = 0, $end = sizeof($post_list); $i < $end; ++$i){	// A non-existing rowset only happens if there was no user present for the entered poster_id	// This could be a broken posts table.	if (!isset($rowset[$post_list[$i]]))	{		continue;	}	$row =& $rowset[$post_list[$i]];	$poster_id = $row['user_id'];	// End signature parsing, only if needed	if ($user_cache[$poster_id]['sig'] && $row['enable_sig'] && empty($user_cache[$poster_id]['sig_parsed']))	{		$user_cache[$poster_id]['sig'] = censor_text($user_cache[$poster_id]['sig']);		if ($user_cache[$poster_id]['sig_bbcode_bitfield'])		{			$bbcode->bbcode_second_pass($user_cache[$poster_id]['sig'], $user_cache[$poster_id]['sig_bbcode_uid'], $user_cache[$poster_id]['sig_bbcode_bitfield']);		}		$user_cache[$poster_id]['sig'] = bbcode_nl2br($user_cache[$poster_id]['sig']);		$user_cache[$poster_id]['sig'] = smiley_text($user_cache[$poster_id]['sig']);		$user_cache[$poster_id]['sig_parsed'] = true;	}	// Parse the message and subject	$message = censor_text($row['post_text']);	// Second parse bbcode here	if ($row['bbcode_bitfield'])	{		$bbcode->bbcode_second_pass($message, $row['bbcode_uid'], $row['bbcode_bitfield']);	}	$message = bbcode_nl2br($message);	$message = smiley_text($message);	if (!empty($attachments[$row['post_id']]))	{		parse_attachments($forum_id, $message, $attachments[$row['post_id']], $update_count);	}	// Replace naughty words such as farty pants	$row['post_subject'] = censor_text($row['post_subject']);	// Highlight active words (primarily for search)	if ($highlight_match)	{		$message = preg_replace('#(?!<.*)(?<!\w)(' . $highlight_match . ')(?!\w|[^<>]*(?:</s(?:cript|tyle))?>)#is', '<span class="posthilit">\1</span>', $message);		$row['post_subject'] = preg_replace('#(?!<.*)(?<!\w)(' . $highlight_match . ')(?!\w|[^<>]*(?:</s(?:cript|tyle))?>)#is', '<span class="posthilit">\1</span>', $row['post_subject']);	}	// Editing information	if (($row['post_edit_count'] && $config['display_last_edited']) || $row['post_edit_reason'])	{		// Get usernames for all following posts if not already stored		if (!sizeof($post_edit_list) && ($row['post_edit_reason'] || ($row['post_edit_user'] && !isset($user_cache[$row['post_edit_user']]))))		{			// Remove all post_ids already parsed (we do not have to check them)			$post_storage_list = (!$store_reverse) ? array_slice($post_list, $i) : array_slice(array_reverse($post_list), $i);			$sql = 'SELECT DISTINCT u.user_id, u.username, u.user_colour				FROM ' . POSTS_TABLE . ' p, ' . USERS_TABLE . ' u				WHERE ' . $db->sql_in_set('p.post_id', $post_storage_list) . '					AND p.post_edit_count <> 0					AND p.post_edit_user <> 0					AND p.post_edit_user = u.user_id';			$result2 = $db->sql_query($sql);			while ($user_edit_row = $db->sql_fetchrow($result2))			{				$post_edit_list[$user_edit_row['user_id']] = $user_edit_row;			}			$db->sql_freeresult($result2);			unset($post_storage_list);		}		$l_edit_time_total = ($row['post_edit_count'] == 1) ? $user->lang['EDITED_TIME_TOTAL'] : $user->lang['EDITED_TIMES_TOTAL'];		if ($row['post_edit_reason'])		{			// User having edited the post also being the post author?			if (!$row['post_edit_user'] || $row['post_edit_user'] == $poster_id)			{				$display_username = get_username_string('full', $poster_id, $row['username'], $row['user_colour'], $row['post_username']);			}			else			{				$display_username = get_username_string('full', $row['post_edit_user'], $post_edit_list[$row['post_edit_user']]['username'], $post_edit_list[$row['post_edit_user']]['user_colour']);			}			$l_edited_by = sprintf($l_edit_time_total, $display_username, $user->format_date($row['post_edit_time'], false, true), $row['post_edit_count']);		}		else		{			if ($row['post_edit_user'] && !isset($user_cache[$row['post_edit_user']]))			{				$user_cache[$row['post_edit_user']] = $post_edit_list[$row['post_edit_user']];			}			// User having edited the post also being the post author?			if (!$row['post_edit_user'] || $row['post_edit_user'] == $poster_id)			{				$display_username = get_username_string('full', $poster_id, $row['username'], $row['user_colour'], $row['post_username']);			}			else			{				$display_username = get_username_string('full', $row['post_edit_user'], $user_cache[$row['post_edit_user']]['username'], $user_cache[$row['post_edit_user']]['user_colour']);			}			$l_edited_by = sprintf($l_edit_time_total, $display_username, $user->format_date($row['post_edit_time'], false, true), $row['post_edit_count']);		}	}	else	{		$l_edited_by = '';	}	// Bump information	if ($topic_data['topic_bumped'] && $row['post_id'] == $topic_data['topic_last_post_id'] && isset($user_cache[$topic_data['topic_bumper']]) )	{		// It is safe to grab the username from the user cache array, we are at the last		// post and only the topic poster and last poster are allowed to bump.		// Admins and mods are bound to the above rules too...		$l_bumped_by = sprintf($user->lang['BUMPED_BY'], $user_cache[$topic_data['topic_bumper']]['username'], $user->format_date($topic_data['topic_last_post_time'], false, true));	}	else	{		$l_bumped_by = '';	}	$cp_row = array();	//	if ($config['load_cpf_viewtopic'])	{		$cp_row = (isset($profile_fields_cache[$poster_id])) ? $cp->generate_profile_fields_template('show', false, $profile_fields_cache[$poster_id]) : array();	}	$post_unread = (isset($topic_tracking_info[$topic_id]) && $row['post_time'] > $topic_tracking_info[$topic_id]) ? true : false;	$s_first_unread = false;	if (!$first_unread && $post_unread)	{		$s_first_unread = $first_unread = true;	}	$edit_allowed = ($user->data['is_registered'] && ($auth->acl_get('m_edit', $forum_id) || (		$user->data['user_id'] == $poster_id &&		$auth->acl_get('f_edit', $forum_id) &&		!$row['post_edit_locked'] &&		($row['post_time'] > time() - ($config['edit_time'] * 60) || !$config['edit_time'])	)));	$delete_allowed = ($user->data['is_registered'] && ($auth->acl_get('m_delete', $forum_id) || (		$user->data['user_id'] == $poster_id &&		$auth->acl_get('f_delete', $forum_id) &&		$topic_data['topic_last_post_id'] == $row['post_id'] &&		($row['post_time'] > time() - ($config['delete_time'] * 60) || !$config['delete_time']) &&		// we do not want to allow removal of the last post if a moderator locked it!		!$row['post_edit_locked']	)));	//	$postrow = array(		'POST_AUTHOR_FULL'		=> ($poster_id != ANONYMOUS) ? $user_cache[$poster_id]['author_full'] : get_username_string('full', $poster_id, $row['username'], $row['user_colour'], $row['post_username']),		'POST_AUTHOR_COLOUR'	=> ($poster_id != ANONYMOUS) ? $user_cache[$poster_id]['author_colour'] : get_username_string('colour', $poster_id, $row['username'], $row['user_colour'], $row['post_username']),		'POST_AUTHOR'			=> ($poster_id != ANONYMOUS) ? $user_cache[$poster_id]['author_username'] : get_username_string('username', $poster_id, $row['username'], $row['user_colour'], $row['post_username']),		'U_POST_AUTHOR'			=> ($poster_id != ANONYMOUS) ? $user_cache[$poster_id]['author_profile'] : get_username_string('profile', $poster_id, $row['username'], $row['user_colour'], $row['post_username']),		'RANK_TITLE'		=> $user_cache[$poster_id]['rank_title'],		'RANK_IMG'			=> $user_cache[$poster_id]['rank_image'],		'RANK_IMG_SRC'		=> $user_cache[$poster_id]['rank_image_src'],		'POSTER_JOINED'		=> $user_cache[$poster_id]['joined'],		'POSTER_POSTS'		=> $user_cache[$poster_id]['posts'],		'POSTER_FROM'		=> $user_cache[$poster_id]['from'],		'POSTER_AVATAR'		=> $user_cache[$poster_id]['avatar'],		'POSTER_WARNINGS'	=> $user_cache[$poster_id]['warnings'],		'POSTER_AGE'		=> $user_cache[$poster_id]['age'],		'POST_DATE'			=> $user->format_date($row['post_time'], false, ($view == 'print') ? true : false),		'POST_SUBJECT'		=> $row['post_subject'],		'MESSAGE'			=> $message,		'SIGNATURE'			=> ($row['enable_sig']) ? $user_cache[$poster_id]['sig'] : '',		'EDITED_MESSAGE'	=> $l_edited_by,		'EDIT_REASON'		=> $row['post_edit_reason'],		'BUMPED_MESSAGE'	=> $l_bumped_by,		'MINI_POST_IMG'			=> ($post_unread) ? $user->img('icon_post_target_unread', 'UNREAD_POST') : $user->img('icon_post_target', 'POST'),		'POST_ICON_IMG'			=> ($topic_data['enable_icons'] && !empty($row['icon_id'])) ? $icons[$row['icon_id']]['img'] : '',		'POST_ICON_IMG_WIDTH'	=> ($topic_data['enable_icons'] && !empty($row['icon_id'])) ? $icons[$row['icon_id']]['width'] : '',		'POST_ICON_IMG_HEIGHT'	=> ($topic_data['enable_icons'] && !empty($row['icon_id'])) ? $icons[$row['icon_id']]['height'] : '',		'ICQ_STATUS_IMG'		=> $user_cache[$poster_id]['icq_status_img'],		'ONLINE_IMG'			=> ($poster_id == ANONYMOUS || !$config['load_onlinetrack']) ? '' : (($user_cache[$poster_id]['online']) ? $user->img('icon_user_online', 'ONLINE') : $user->img('icon_user_offline', 'OFFLINE')),		'S_ONLINE'				=> ($poster_id == ANONYMOUS || !$config['load_onlinetrack']) ? false : (($user_cache[$poster_id]['online']) ? true : false),		'U_EDIT'			=> ($edit_allowed) ? append_sid("{$phpbb_root_path}posting.$phpEx", "mode=edit&amp;f=$forum_id&amp;p={$row['post_id']}") : '',		'U_QUOTE'			=> ($auth->acl_get('f_reply', $forum_id)) ? append_sid("{$phpbb_root_path}posting.$phpEx", "mode=quote&amp;f=$forum_id&amp;p={$row['post_id']}") : '',		'U_INFO'			=> ($auth->acl_get('m_info', $forum_id)) ? append_sid("{$phpbb_root_path}mcp.$phpEx", "i=main&amp;mode=post_details&amp;f=$forum_id&amp;p=" . $row['post_id'], true, $user->session_id) : '',		'U_DELETE'			=> ($delete_allowed) ? append_sid("{$phpbb_root_path}posting.$phpEx", "mode=delete&amp;f=$forum_id&amp;p={$row['post_id']}") : '',		'U_PROFILE'		=> $user_cache[$poster_id]['profile'],		'U_SEARCH'		=> $user_cache[$poster_id]['search'],		'U_PM'			=> ($poster_id != ANONYMOUS && $config['allow_privmsg'] && $auth->acl_get('u_sendpm') && ($user_cache[$poster_id]['allow_pm'] || $auth->acl_gets('a_', 'm_') || $auth->acl_getf_global('m_'))) ? append_sid("{$phpbb_root_path}ucp.$phpEx", 'i=pm&amp;mode=compose&amp;action=quotepost&amp;p=' . $row['post_id']) : '',		'U_EMAIL'		=> $user_cache[$poster_id]['email'],		'U_WWW'			=> $user_cache[$poster_id]['www'],		'U_ICQ'			=> $user_cache[$poster_id]['icq'],		'U_AIM'			=> $user_cache[$poster_id]['aim'],		'U_MSN'			=> $user_cache[$poster_id]['msn'],		'U_YIM'			=> $user_cache[$poster_id]['yim'],		'U_JABBER'		=> $user_cache[$poster_id]['jabber'],		'U_REPORT'			=> ($auth->acl_get('f_report', $forum_id)) ? append_sid("{$phpbb_root_path}report.$phpEx", 'f=' . $forum_id . '&amp;p=' . $row['post_id']) : '',		'U_MCP_REPORT'		=> ($auth->acl_get('m_report', $forum_id)) ? append_sid("{$phpbb_root_path}mcp.$phpEx", 'i=reports&amp;mode=report_details&amp;f=' . $forum_id . '&amp;p=' . $row['post_id'], true, $user->session_id) : '',		'U_MCP_APPROVE'		=> ($auth->acl_get('m_approve', $forum_id)) ? append_sid("{$phpbb_root_path}mcp.$phpEx", 'i=queue&amp;mode=approve_details&amp;f=' . $forum_id . '&amp;p=' . $row['post_id'], true, $user->session_id) : '',		'U_MINI_POST'		=> append_sid("{$phpbb_root_path}viewtopic.$phpEx", 'p=' . $row['post_id']) . (($topic_data['topic_type'] == POST_GLOBAL) ? '&amp;f=' . $forum_id : '') . '#p' . $row['post_id'],		'U_NEXT_POST_ID'	=> ($i < $i_total && isset($rowset[$post_list[$i + 1]])) ? $rowset[$post_list[$i + 1]]['post_id'] : '',		'U_PREV_POST_ID'	=> $prev_post_id,		'U_NOTES'			=> ($auth->acl_getf_global('m_')) ? append_sid("{$phpbb_root_path}mcp.$phpEx", 'i=notes&amp;mode=user_notes&amp;u=' . $poster_id, true, $user->session_id) : '',		'U_WARN'			=> ($auth->acl_get('m_warn') && $poster_id != $user->data['user_id'] && $poster_id != ANONYMOUS) ? append_sid("{$phpbb_root_path}mcp.$phpEx", 'i=warn&amp;mode=warn_post&amp;f=' . $forum_id . '&amp;p=' . $row['post_id'], true, $user->session_id) : '',		'POST_ID'			=> $row['post_id'],		'POST_NUMBER'		=> $i + $start + 1,		'POSTER_ID'			=> $poster_id,		'S_HAS_ATTACHMENTS'	=> (!empty($attachments[$row['post_id']])) ? true : false,		'S_POST_UNAPPROVED'	=> ($row['post_approved']) ? false : true,		'S_POST_REPORTED'	=> ($row['post_reported'] && $auth->acl_get('m_report', $forum_id)) ? true : false,		'S_DISPLAY_NOTICE'	=> $display_notice && $row['post_attachment'],		'S_FRIEND'			=> ($row['friend']) ? true : false,		'S_UNREAD_POST'		=> $post_unread,		'S_FIRST_UNREAD'	=> $s_first_unread,		'S_CUSTOM_FIELDS'	=> (isset($cp_row['row']) && sizeof($cp_row['row'])) ? true : false,		'S_TOPIC_POSTER'	=> ($topic_data['topic_poster'] == $poster_id) ? true : false,		'S_IGNORE_POST'		=> ($row['hide_post']) ? true : false,		'L_IGNORE_POST'		=> ($row['hide_post']) ? sprintf($user->lang['POST_BY_FOE'], get_username_string('full', $poster_id, $row['username'], $row['user_colour'], $row['post_username']), '<a href="' . $viewtopic_url . "&amp;p={$row['post_id']}&amp;view=show#p{$row['post_id']}" . '">', '</a>') : '',	);	if (isset($cp_row['row']) && sizeof($cp_row['row']))	{		$postrow = array_merge($postrow, $cp_row['row']);	}	// Dump vars into template	$template->assign_block_vars('postrow', $postrow);	if (!empty($cp_row['blockrow']))	{		foreach ($cp_row['blockrow'] as $field_data)		{			$template->assign_block_vars('postrow.custom_fields', $field_data);		}	}	// Display not already displayed Attachments for this post, we already parsed them. ;)	if (!empty($attachments[$row['post_id']]))	{		foreach ($attachments[$row['post_id']] as $attachment)		{			$template->assign_block_vars('postrow.attachment', array(				'DISPLAY_ATTACHMENT'	=> $attachment)			);		}	}	$prev_post_id = $row['post_id'];	unset($rowset[$post_list[$i]]);	unset($attachments[$row['post_id']]);}unset($rowset, $user_cache);// Update topic view and if necessary attachment view counters ... but only for humans and if this is the first 'page view'if (isset($user->data['session_page']) && !$user->data['is_bot'] && (strpos($user->data['session_page'], '&t=' . $topic_id) === false || isset($user->data['session_created']))){	$sql = 'UPDATE ' . TOPICS_TABLE . '		SET topic_views = topic_views + 1, topic_last_view_time = ' . time() . "		WHERE topic_id = $topic_id";	$db->sql_query($sql);	// Update the attachment download counts	if (sizeof($update_count))	{		$sql = 'UPDATE ' . ATTACHMENTS_TABLE . '			SET download_count = download_count + 1			WHERE ' . $db->sql_in_set('attach_id', array_unique($update_count));		$db->sql_query($sql);	}}// Get last post time for all global announcements// to keep proper forums trackingif ($topic_data['topic_type'] == POST_GLOBAL){	$sql = 'SELECT topic_last_post_time as forum_last_post_time		FROM ' . TOPICS_TABLE . '		WHERE forum_id = 0		ORDER BY topic_last_post_time DESC';	$result = $db->sql_query_limit($sql, 1);	$topic_data['forum_last_post_time'] = (int) $db->sql_fetchfield('forum_last_post_time');	$db->sql_freeresult($result);	$sql = 'SELECT mark_time as forum_mark_time		FROM ' . FORUMS_TRACK_TABLE . '		WHERE forum_id = 0			AND user_id = ' . $user->data['user_id'];	$result = $db->sql_query($sql);	$topic_data['forum_mark_time'] = (int) $db->sql_fetchfield('forum_mark_time');	$db->sql_freeresult($result);}// Only mark topic if it's currently unread. Also make sure we do not set topic tracking back if earlier pages are viewed.if (isset($topic_tracking_info[$topic_id]) && $topic_data['topic_last_post_time'] > $topic_tracking_info[$topic_id] && $max_post_time > $topic_tracking_info[$topic_id]){	markread('topic', (($topic_data['topic_type'] == POST_GLOBAL) ? 0 : $forum_id), $topic_id, $max_post_time);	// Update forum info	$all_marked_read = update_forum_tracking_info((($topic_data['topic_type'] == POST_GLOBAL) ? 0 : $forum_id), $topic_data['forum_last_post_time'], (isset($topic_data['forum_mark_time'])) ? $topic_data['forum_mark_time'] : false, false);}else{	$all_marked_read = true;}// If there are absolutely no more unread posts in this forum and unread posts shown, we can savely show the #unread linkif ($all_marked_read){	if ($post_unread)	{		$template->assign_vars(array(			'U_VIEW_UNREAD_POST'	=> '#unread',		));	}	else if (isset($topic_tracking_info[$topic_id]) && $topic_data['topic_last_post_time'] > $topic_tracking_info[$topic_id])	{		$template->assign_vars(array(			'U_VIEW_UNREAD_POST'	=> append_sid("{$phpbb_root_path}viewtopic.$phpEx", "f=$forum_id&amp;t=$topic_id&amp;view=unread") . '#unread',		));	}}else if (!$all_marked_read){	$last_page = ((floor($start / $config['posts_per_page']) + 1) == max(ceil($total_posts / $config['posts_per_page']), 1)) ? true : false;	// What can happen is that we are at the last displayed page. If so, we also display the #unread link based in $post_unread	if ($last_page && $post_unread)	{		$template->assign_vars(array(			'U_VIEW_UNREAD_POST'	=> '#unread',		));	}	else if (!$last_page)	{		$template->assign_vars(array(			'U_VIEW_UNREAD_POST'	=> append_sid("{$phpbb_root_path}viewtopic.$phpEx", "f=$forum_id&amp;t=$topic_id&amp;view=unread") . '#unread',		));	}}// let's set up quick_reply$s_quick_reply = false;if ($user->data['is_registered'] && $config['allow_quick_reply'] && ($topic_data['forum_flags'] & FORUM_FLAG_QUICK_REPLY) && $auth->acl_get('f_reply', $forum_id)){	// Quick reply enabled forum	$s_quick_reply = (($topic_data['forum_status'] == ITEM_UNLOCKED && $topic_data['topic_status'] == ITEM_UNLOCKED) || $auth->acl_get('m_edit', $forum_id)) ? true : false;}if ($s_can_vote || $s_quick_reply){	add_form_key('posting');	if ($s_quick_reply)	{		$s_attach_sig	= $config['allow_sig'] && $user->optionget('attachsig') && $auth->acl_get('f_sigs', $forum_id) && $auth->acl_get('u_sig');		$s_smilies		= $config['allow_smilies'] && $user->optionget('smilies') && $auth->acl_get('f_smilies', $forum_id);		$s_bbcode		= $config['allow_bbcode'] && $user->optionget('bbcode') && $auth->acl_get('f_bbcode', $forum_id);		$s_notify		= $config['allow_topic_notify'] && ($user->data['user_notify'] || $s_watching_topic['is_watching']);		$qr_hidden_fields = array(			'topic_cur_post_id'		=> (int) $topic_data['topic_last_post_id'],			'lastclick'				=> (int) time(),			'topic_id'				=> (int) $topic_data['topic_id'],			'forum_id'				=> (int) $forum_id,		);		// Originally we use checkboxes and check with isset(), so we only provide them if they would be checked		(!$s_bbcode)					? $qr_hidden_fields['disable_bbcode'] = 1		: true;		(!$s_smilies)					? $qr_hidden_fields['disable_smilies'] = 1		: true;		(!$config['allow_post_links'])	? $qr_hidden_fields['disable_magic_url'] = 1	: true;		($s_attach_sig)					? $qr_hidden_fields['attach_sig'] = 1			: true;		($s_notify)						? $qr_hidden_fields['notify'] = 1				: true;		($topic_data['topic_status'] == ITEM_LOCKED) ? $qr_hidden_fields['lock_topic'] = 1 : true;		$template->assign_vars(array(			'S_QUICK_REPLY'			=> true,			'U_QR_ACTION'			=> append_sid("{$phpbb_root_path}posting.$phpEx", "mode=reply&amp;f=$forum_id&amp;t=$topic_id"),			'QR_HIDDEN_FIELDS'		=> build_hidden_fields($qr_hidden_fields),			'SUBJECT'				=> 'Re: ' . censor_text($topic_data['topic_title']),		));	}}// now I have the urge to wash my hands :(// We overwrite $_REQUEST['f'] if there is no forum specified// to be able to display the correct online list.// One downside is that the user currently viewing this topic/post is not taken into account.if (empty($_REQUEST['f'])){	$_REQUEST['f'] = $forum_id;}// We need to do the same with the topic_id. See #53025.if (empty($_REQUEST['t']) && !empty($topic_id)){	$_REQUEST['t'] = $topic_id;}// Output the pagepage_header($user->lang['VIEW_TOPIC'] . ' - ' . $topic_data['topic_title'], true, $forum_id);$template->set_filenames(array(	'body' => ($view == 'print') ? 'viewtopic_print.html' : 'viewtopic_body.html'));make_jumpbox(append_sid("{$phpbb_root_path}viewforum.$phpEx"), $forum_id);page_footer();?>
<?php/**** @package acm* @version $Id$* @copyright (c) 2005, 2009 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @ignore*/if (!defined('IN_PHPBB')){	exit;}/*** ACM Null Caching* @package acm*/class acm{	/**	* Set cache path	*/	function acm()	{	}	/**	* Load global cache	*/	function load()	{		return true;	}	/**	* Unload cache object	*/	function unload()	{	}	/**	* Save modified objects	*/	function save()	{	}	/**	* Tidy cache	*/	function tidy()	{		// This cache always has a tidy room.		set_config('cache_last_gc', time(), true);	}	/**	* Get saved cache object	*/	function get($var_name)	{		return false;	}	/**	* Put data into cache	*/	function put($var_name, $var, $ttl = 0)	{	}	/**	* Purge cache data	*/	function purge()	{	}	/**	* Destroy cache data	*/	function destroy($var_name, $table = '')	{	}	/**	* Check if a given cache entry exist	*/	function _exists($var_name)	{		return false;	}	/**	* Load cached sql query	*/	function sql_load($query)	{		return false;	}	/**	* Save sql query	*/	function sql_save($query, &$query_result, $ttl)	{	}	/**	* Ceck if a given sql query exist in cache	*/	function sql_exists($query_id)	{		return false;	}	/**	* Fetch row from cache (database)	*/	function sql_fetchrow($query_id)	{		return false;	}	/**	* Fetch a field from the current row of a cached database result (database)	*/	function sql_fetchfield($query_id, $field)	{		return false;	}	/**	* Seek a specific row in an a cached database result (database)	*/	function sql_rowseek($rownum, $query_id)	{		return false;	}	/**	* Free memory used for a cached database result (database)	*/	function sql_freeresult($query_id)	{		return false;	}}?>
<?php/**** install [English]** @package language* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** DO NOT CHANGE*/if (!defined('IN_PHPBB')){	exit;}if (empty($lang) || !is_array($lang)){	$lang = array();}// DEVELOPERS PLEASE NOTE//// All language files should use UTF-8 as their encoding and the files must not contain a BOM.//// Placeholders can now contain order information, e.g. instead of// 'Page %s of %s' you can (and should) write 'Page %1$s of %2$s', this allows// translators to re-order the output of data while ensuring it remains correct//// You do not need this where single placeholders are used, e.g. 'Message %d' is fine// equally where a string contains only two placeholders which are used to wrap text// in a url you again do not need to specify an order e.g., 'Click %sHERE%s' is fine$lang = array_merge($lang, array(	'ADMIN_CONFIG'				=> 'Administrator configuration',	'ADMIN_PASSWORD'			=> 'Administrator password',	'ADMIN_PASSWORD_CONFIRM'	=> 'Confirm administrator password',	'ADMIN_PASSWORD_EXPLAIN'	=> 'Please enter a password between 6 and 30 characters in length.',	'ADMIN_TEST'				=> 'Check administrator settings',	'ADMIN_USERNAME'			=> 'Administrator username',	'ADMIN_USERNAME_EXPLAIN'	=> 'Please enter a username between 3 and 20 characters in length.',	'APP_MAGICK'				=> 'Imagemagick support [ Attachments ]',	'AUTHOR_NOTES'				=> 'Author notes<br /> %s',	'AVAILABLE'					=> 'Available',	'AVAILABLE_CONVERTORS'		=> 'Available convertors',	'BEGIN_CONVERT'					=> 'Begin conversion',	'BLANK_PREFIX_FOUND'			=> 'A scan of your tables has shown a valid installation using no table prefix.',	'BOARD_NOT_INSTALLED'			=> 'No installation found',	'BOARD_NOT_INSTALLED_EXPLAIN'	=> 'The phpBB Unified Convertor Framework requires a default installation of phpBB3 to function, please <a href="%s">proceed by first installing phpBB3</a>.',	'CATEGORY'					=> 'Category',	'CACHE_STORE'				=> 'Cache type',	'CACHE_STORE_EXPLAIN'		=> 'The physical location where data is cached, filesystem is preferred.',	'CAT_CONVERT'				=> 'Convert',	'CAT_INSTALL'				=> 'Install',	'CAT_OVERVIEW'				=> 'Overview',	'CAT_UPDATE'				=> 'Update',	'CHANGE'					=> 'Change',	'CHECK_TABLE_PREFIX'		=> 'Please check your table prefix and try again.',	'CLEAN_VERIFY'				=> 'Cleaning up and verifying the final structure',	'CLEANING_USERNAMES'		=> 'Cleaning usernames',	'COLLIDING_CLEAN_USERNAME'	=> '<strong>%s</strong> is the clean username for:',	'COLLIDING_USERNAMES_FOUND'	=> 'Colliding usernames were found on your old board. In order to complete the conversion please delete or rename these users so that there is only one user on your old board for each clean username.',	'COLLIDING_USER'			=> ' user id: <strong>%d</strong> username: <strong>%s</strong> (%d posts)',	'CONFIG_CONVERT'			=> 'Converting the configuration',	'CONFIG_FILE_UNABLE_WRITE'	=> 'It was not possible to write the configuration file. Alternative methods for this file to be created are presented below.',	'CONFIG_FILE_WRITTEN'		=> 'The configuration file has been written. You may now proceed to the next step of the installation.',	'CONFIG_PHPBB_EMPTY'		=> 'The phpBB3 config variable for %s is empty.',	'CONFIG_RETRY'				=> 'Retry',	'CONTACT_EMAIL_CONFIRM'		=> 'Confirm contact e-mail',	'CONTINUE_CONVERT'			=> 'Continue conversion',	'CONTINUE_CONVERT_BODY'		=> 'A previous conversion attempt has been determined. You are now able to choose between starting a new conversion or continuing the conversion.',	'CONTINUE_LAST'				=> 'Continue last statements',	'CONTINUE_OLD_CONVERSION'	=> 'Continue previously started conversion',	'CONVERT'					=> 'Convert',	'CONVERT_COMPLETE'			=> 'Conversion completed',	'CONVERT_COMPLETE_EXPLAIN'	=> 'You have now successfully converted your board to phpBB 3.0. You can now login and <a href="../">access your board</a>. Please ensure that the settings were transferred correctly before enabling your board by deleting the install directory. Remember that help on using phpBB is available online via the <a href="http://www.phpbb.com/support/documentation/3.0/">Documentation</a> and the <a href="http://www.phpbb.com/community/viewforum.php?f=46">support forums</a>.',	'CONVERT_INTRO'				=> 'Welcome to the phpBB Unified Convertor Framework',	'CONVERT_INTRO_BODY'		=> 'From here, you are able to import data from other (installed) board systems. The list below shows all the conversion modules currently available. If there is no convertor shown in this list for the board software you wish to convert from, please check our website where further conversion modules may be available for download.',	'CONVERT_NEW_CONVERSION'	=> 'New conversion',	'CONVERT_NOT_EXIST'			=> 'The specified convertor does not exist.',	'CONVERT_OPTIONS'			=> 'Options',	'CONVERT_SETTINGS_VERIFIED'	=> 'The information you entered has been verified. To start the conversion process, please push the button below.',	'CONV_ERR_FATAL'			=> 'Fatal conversion error',	'CONV_ERROR_ATTACH_FTP_DIR'			=> 'FTP upload for attachments is enabled at the old board. Please disable the FTP upload option and make sure a valid upload directory is specified, then copy all attachment files to this new web accessible directory. Once you have done this, restart the convertor.',	'CONV_ERROR_CONFIG_EMPTY'			=> 'There is no configuration information available for the conversion.',	'CONV_ERROR_FORUM_ACCESS'			=> 'Unable to get forum access information.',	'CONV_ERROR_GET_CATEGORIES'			=> 'Unable to get categories.',	'CONV_ERROR_GET_CONFIG'				=> 'Could not retrieve your board configuration.',	'CONV_ERROR_COULD_NOT_READ'			=> 'Unable to access/read %s.',	'CONV_ERROR_GROUP_ACCESS'			=> 'Unable to get group authentication information.',	'CONV_ERROR_INCONSISTENT_GROUPS'	=> 'Inconsistency in groups table detected in add_bots() - you need to add all special groups if you do it manually.',	'CONV_ERROR_INSERT_BOT'				=> 'Unable to insert bot into users table.',	'CONV_ERROR_INSERT_BOTGROUP'		=> 'Unable to insert bot into bots table.',	'CONV_ERROR_INSERT_USER_GROUP'		=> 'Unable to insert user into user_group table.',	'CONV_ERROR_MESSAGE_PARSER'			=> 'Message parser error',	'CONV_ERROR_NO_AVATAR_PATH'			=> 'Note to developer: you must specify $convertor[\'avatar_path\'] to use %s.',	'CONV_ERROR_NO_FORUM_PATH'			=> 'The relative path to the source board has not been specified.',	'CONV_ERROR_NO_GALLERY_PATH'		=> 'Note to developer: you must specify $convertor[\'avatar_gallery_path\'] to use %s.',	'CONV_ERROR_NO_GROUP'				=> 'Group %1$s could not be found in %2$s.',	'CONV_ERROR_NO_RANKS_PATH'			=> 'Note to developer: you must specify $convertor[\'ranks_path\'] to use %s.',	'CONV_ERROR_NO_SMILIES_PATH'		=> 'Note to developer: you must specify $convertor[\'smilies_path\'] to use %s.',	'CONV_ERROR_NO_UPLOAD_DIR'			=> 'Note to developer: you must specify $convertor[\'upload_path\'] to use %s.',	'CONV_ERROR_PERM_SETTING'			=> 'Unable to insert/update permission setting.',	'CONV_ERROR_PM_COUNT'				=> 'Unable to select folder pm count.',	'CONV_ERROR_REPLACE_CATEGORY'		=> 'Unable to insert new forum replacing old category.',	'CONV_ERROR_REPLACE_FORUM'			=> 'Unable to insert new forum replacing old forum.',	'CONV_ERROR_USER_ACCESS'			=> 'Unable to get user authentication information.',	'CONV_ERROR_WRONG_GROUP'			=> 'Wrong group %1$s defined in %2$s.',	'CONV_OPTIONS_BODY'					=> 'This page collects the data required to access the source board. Enter the database details of your former board; the converter will not change anything in the database given below. The source board should be disabled to allow a consistent conversion.',	'CONV_SAVED_MESSAGES'				=> 'Saved messages',	'COULD_NOT_COPY'			=> 'Could not copy file <strong>%1$s</strong> to <strong>%2$s</strong><br /><br />Please check that the target directory exists and is writable by the webserver.',	'COULD_NOT_FIND_PATH'		=> 'Could not find path to your former board. Please check your settings and try again.<br /> %s was specified as the source path.',	'DBMS'						=> 'Database type',	'DB_CONFIG'					=> 'Database configuration',	'DB_CONNECTION'				=> 'Database connection',	'DB_ERR_INSERT'				=> 'Error while processing <code>INSERT</code> query.',	'DB_ERR_LAST'				=> 'Error while processing <var>query_last</var>.',	'DB_ERR_QUERY_FIRST'		=> 'Error while executing <var>query_first</var>.',	'DB_ERR_QUERY_FIRST_TABLE'	=> 'Error while executing <var>query_first</var>, %s (%s).',	'DB_ERR_SELECT'				=> 'Error while running <code>SELECT</code> query.',	'DB_HOST'					=> 'Database server hostname or DSN',	'DB_HOST_EXPLAIN'			=> 'DSN stands for Data Source Name and is relevant only for ODBC installs. On PostgreSQL, use localhost to connect to the local server via UNIX domain socket and 127.0.0.1 to connect via TCP. For SQLite, enter the full path to your database file.',	'DB_NAME'					=> 'Database name',	'DB_PASSWORD'				=> 'Database password',	'DB_PORT'					=> 'Database server port',	'DB_PORT_EXPLAIN'			=> 'Leave this blank unless you know the server operates on a non-standard port.',	'DB_UPDATE_NOT_SUPPORTED'	=> 'We are sorry, but this script does not support updating from versions of phpBB prior to %1$s. The version you currently have installed is %2$s. Please update to a previous version before running this script. Assistance with this is available in the Support Forum on phpBB.com.',	'DB_USERNAME'				=> 'Database username',	'DB_TEST'					=> 'Test connection',	'DEFAULT_LANG'				=> 'Default board language',	'DEFAULT_PREFIX_IS'			=> 'The convertor was not able to find tables with the specified prefix. Please make sure you have entered the correct details for the board you are converting from. The default table prefix for %1$s is <strong>%2$s</strong>.',	'DEV_NO_TEST_FILE'			=> 'No value has been specified for the test_file variable in the convertor. If you are a user of this convertor, you should not be seeing this error, please report this message to the convertor author. If you are a convertor author, you must specify the name of a file which exists in the source board to allow the path to it to be verified.',	'DIRECTORIES_AND_FILES'		=> 'Directory and file setup',	'DISABLE_KEYS'				=> 'Disabling keys',	'DLL_FIREBIRD'				=> 'Firebird',	'DLL_FTP'					=> 'Remote FTP support [ Installation ]',	'DLL_GD'					=> 'GD graphics support [ Visual Confirmation ]',	'DLL_MBSTRING'				=> 'Multi-byte character support',	'DLL_MSSQL'					=> 'MSSQL Server 2000+',	'DLL_MSSQL_ODBC'			=> 'MSSQL Server 2000+ via ODBC',	'DLL_MSSQLNATIVE'			=> 'MSSQL Server 2005+ [ Native ]',	'DLL_MYSQL'					=> 'MySQL',	'DLL_MYSQLI'				=> 'MySQL with MySQLi Extension',	'DLL_ORACLE'				=> 'Oracle',	'DLL_POSTGRES'				=> 'PostgreSQL',	'DLL_SQLITE'				=> 'SQLite',	'DLL_XML'					=> 'XML support [ Jabber ]',	'DLL_ZLIB'					=> 'zlib compression support [ gz, .tar.gz, .zip ]',	'DL_CONFIG'					=> 'Download config',	'DL_CONFIG_EXPLAIN'			=> 'You may download the complete config.php to your own PC. You will then need to upload the file manually, replacing any existing config.php in your phpBB 3.0 root directory. Please remember to upload the file in ASCII format (see your FTP application documentation if you are unsure how to achieve this). When you have uploaded the config.php please click Done to move to the next stage.',	'DL_DOWNLOAD'				=> 'Download',	'DONE'						=> 'Done',	'ENABLE_KEYS'				=> 'Re-enabling keys. This can take a while.',	'FILES_OPTIONAL'			=> 'Optional files and directories',	'FILES_OPTIONAL_EXPLAIN'	=> '<strong>Optional</strong> - These files, directories or permission settings are not required. The installation system will attempt to use various techniques to create them if they do not exist or cannot be written to. However, the presence of these will speed installation.',	'FILES_REQUIRED'			=> 'Files and Directories',	'FILES_REQUIRED_EXPLAIN'	=> '<strong>Required</strong> - In order to function correctly phpBB needs to be able to access or write to certain files or directories. If you see Not Found you need to create the relevant file or directory. If you see Unwritable you need to change the permissions on the file or directory to allow phpBB to write to it.',	'FILLING_TABLE'				=> 'Filling table <strong>%s</strong>',	'FILLING_TABLES'			=> 'Filling tables',	'FIREBIRD_DBMS_UPDATE_REQUIRED'		=> 'phpBB no longer supports Firebird/Interbase prior to Version 2.1. Please update your Firebird installation to at least 2.1.0 before proceeding with the update.',	'FINAL_STEP'				=> 'Process final step',	'FORUM_ADDRESS'				=> 'Board address',	'FORUM_ADDRESS_EXPLAIN'		=> 'This is the URL of your former board, for example <samp>http://www.example.com/phpBB2/</samp>. If an address is entered here and not left empty every instance of this address will be replaced by your new board address within messages, private messages and signatures.',	'FORUM_PATH'				=> 'Board path',	'FORUM_PATH_EXPLAIN'		=> 'This is the <strong>relative</strong> path on disk to your former board from the <strong>root of this phpBB3 installation</strong>.',	'FOUND'						=> 'Found',	'FTP_CONFIG'				=> 'Transfer config by FTP',	'FTP_CONFIG_EXPLAIN'		=> 'phpBB has detected the presence of the FTP module on this server. You may attempt to install your config.php via this if you wish. You will need to supply the information listed below. Remember your username and password are those to your server! (ask your hosting provider for details if you are unsure what these are).',	'FTP_PATH'					=> 'FTP path',	'FTP_PATH_EXPLAIN'			=> 'This is the path from your root directory to that of phpBB, e.g. <samp>htdocs/phpBB3/</samp>.',	'FTP_UPLOAD'				=> 'Upload',	'GPL'						=> 'General Public License',	'INITIAL_CONFIG'			=> 'Basic configuration',	'INITIAL_CONFIG_EXPLAIN'	=> 'Now that install has determined your server can run phpBB you need to supply some specific information. If you do not know how to connect to your database please contact your hosting provider (in the first instance) or use the phpBB support forums. When entering data please ensure you check it thoroughly before continuing.',	'INSTALL_CONGRATS'			=> 'Congratulations!',	'INSTALL_CONGRATS_EXPLAIN'	=> '		You have successfully installed phpBB %1$s. Please proceed by choosing one of the following options:</p>		<h2>Convert an existing board to phpBB3</h2>		<p>The phpBB Unified Convertor Framework supports the conversion of phpBB 2.0.x and other board systems to phpBB3. If you have an existing board that you wish to convert, please <a href="%2$s">proceed to the convertor</a>.</p>		<h2>Go live with your phpBB3!</h2>		<p>Clicking the button below will take you to a form for submitting statistical data to phpBB in your Administration Control Panel (ACP). We would appreciate it if you could help us by sending that information. Afterwards you should take some time to examine the options available to you. Remember that help is available online via the <a href="http://www.phpbb.com/support/documentation/3.0/">Documentation</a>, <a href="%3$s">README</a> and the <a href="http://www.phpbb.com/community/viewforum.php?f=46">Support Forums</a>.</p><p><strong>Please delete, move or rename the install directory before using your board. While this directory exists, only the Administration Control Panel (ACP) will be accessible.</strong>',	'INSTALL_INTRO'				=> 'Welcome to Installation',	'INSTALL_INTRO_BODY'		=> 'With this option, it is possible to install phpBB3 onto your server.</p><p>In order to proceed, you will need your database settings. If you do not know your database settings, please contact your host and ask for them. You will not be able to continue without them. You need:</p>	<ul>		<li>The Database Type - the database you will be using.</li>		<li>The Database server hostname or DSN - the address of the database server.</li>		<li>The Database server port - the port of the database server (most of the time this is not needed).</li>		<li>The Database name - the name of the database on the server.</li>		<li>The Database username and Database password - the login data to access the database.</li>	</ul>	<p><strong>Note:</strong> if you are installing using SQLite, you should enter the full path to your database file in the DSN field and leave the username and password fields blank. For security reasons, you should make sure that the database file is not stored in a location accessible from the web.</p>	<p>phpBB3 supports the following databases:</p>	<ul>		<li>MySQL 3.23 or above (MySQLi supported)</li>		<li>PostgreSQL 7.3+</li>		<li>SQLite 2.8.2+</li>		<li>Firebird 2.1+</li>		<li>MS SQL Server 2000 or above (directly or via ODBC)</li>		<li>MS SQL Server 2005 or above (native)</li>		<li>Oracle</li>	</ul>	<p>Only those databases supported on your server will be displayed.',	'INSTALL_INTRO_NEXT'		=> 'To commence the installation, please press the button below.',	'INSTALL_LOGIN'				=> 'Login',	'INSTALL_NEXT'				=> 'Next stage',	'INSTALL_NEXT_FAIL'			=> 'Some tests failed and you should correct these problems before proceeding to the next stage. Failure to do so may result in an incomplete installation.',	'INSTALL_NEXT_PASS'			=> 'All the basic tests have been passed and you may proceed to the next stage of installation. If you have changed any permissions, modules, etc. and wish to re-test you can do so if you wish.',	'INSTALL_PANEL'				=> 'Installation Panel',	'INSTALL_SEND_CONFIG'		=> 'Unfortunately phpBB could not write the configuration information directly to your config.php. This may be because the file does not exist or is not writable. A number of options will be listed below enabling you to complete installation of config.php.',	'INSTALL_START'				=> 'Start install',	'INSTALL_TEST'				=> 'Test again',	'INST_ERR'					=> 'Installation error',	'INST_ERR_DB_CONNECT'		=> 'Could not connect to the database, see error message below.',	'INST_ERR_DB_FORUM_PATH'	=> 'The database file specified is within your board directory tree. You should put this file in a non web-accessible location.',	'INST_ERR_DB_INVALID_PREFIX'=> 'The prefix you entered is invalid. It must start with a letter and must only contain letters, numbers and underscores.',	'INST_ERR_DB_NO_ERROR'		=> 'No error message given.',	'INST_ERR_DB_NO_MYSQLI'		=> 'The version of MySQL installed on this machine is incompatible with the MySQL with MySQLi Extension option you have selected. Please try the MySQL option instead.',	'INST_ERR_DB_NO_SQLITE'		=> 'The version of the SQLite extension you have installed is too old, it must be upgraded to at least 2.8.2.',	'INST_ERR_DB_NO_ORACLE'		=> 'The version of Oracle installed on this machine requires you to set the <var>NLS_CHARACTERSET</var> parameter to <var>UTF8</var>. Either upgrade your installation to 9.2+ or change the parameter.',	'INST_ERR_DB_NO_FIREBIRD'	=> 'The version of Firebird installed on this machine is older than 2.1, please upgrade to a newer version.',	'INST_ERR_DB_NO_FIREBIRD_PS'=> 'The database you selected for Firebird has a page size less than 8192, it must be at least 8192.',	'INST_ERR_DB_NO_POSTGRES'	=> 'The database you have selected was not created in <var>UNICODE</var> or <var>UTF8</var> encoding. Try installing with a database in <var>UNICODE</var> or <var>UTF8</var> encoding.',	'INST_ERR_DB_NO_NAME'		=> 'No database name specified.',	'INST_ERR_EMAIL_INVALID'	=> 'The e-mail address you entered is invalid.',	'INST_ERR_EMAIL_MISMATCH'	=> 'The e-mails you entered did not match.',	'INST_ERR_FATAL'			=> 'Fatal installation error',	'INST_ERR_FATAL_DB'			=> 'A fatal and unrecoverable database error has occurred. This may be because the specified user does not have appropriate permissions to <code>CREATE TABLES</code> or <code>INSERT</code> data, etc. Further information may be given below. Please contact your hosting provider in the first instance or the support forums of phpBB for further assistance.',	'INST_ERR_FTP_PATH'			=> 'Could not change to the given directory, please check the path.',	'INST_ERR_FTP_LOGIN'		=> 'Could not login to FTP server, check your username and password.',	'INST_ERR_MISSING_DATA'		=> 'You must fill out all fields in this block.',	'INST_ERR_NO_DB'			=> 'Cannot load the PHP module for the selected database type.',	'INST_ERR_PASSWORD_MISMATCH'	=> 'The passwords you entered did not match.',	'INST_ERR_PASSWORD_TOO_LONG'	=> 'The password you entered is too long. The maximum length is 30 characters.',	'INST_ERR_PASSWORD_TOO_SHORT'	=> 'The password you entered is too short. The minimum length is 6 characters.',	'INST_ERR_PREFIX'			=> 'Tables with the specified prefix already exist, please choose an alternative.',	'INST_ERR_PREFIX_INVALID'	=> 'The table prefix you have specified is invalid for your database. Please try another, removing characters such as the hyphen.',	'INST_ERR_PREFIX_TOO_LONG'	=> 'The table prefix you have specified is too long. The maximum length is %d characters.',	'INST_ERR_USER_TOO_LONG'	=> 'The username you entered is too long. The maximum length is 20 characters.',	'INST_ERR_USER_TOO_SHORT'	=> 'The username you entered is too short. The minimum length is 3 characters.',	'INVALID_PRIMARY_KEY'		=> 'Invalid primary key : %s',	'LONG_SCRIPT_EXECUTION'		=> 'Please note that this can take a while... Please do not stop the script.',	// mbstring	'MBSTRING_CHECK'						=> '<samp>mbstring</samp> extension check',	'MBSTRING_CHECK_EXPLAIN'				=> '<strong>Required</strong> - <samp>mbstring</samp> is a PHP extension that provides multibyte string functions. Certain features of mbstring are not compatible with phpBB and must be disabled.',	'MBSTRING_FUNC_OVERLOAD'				=> 'Function overloading',	'MBSTRING_FUNC_OVERLOAD_EXPLAIN'		=> '<var>mbstring.func_overload</var> must be set to either 0 or 4.',	'MBSTRING_ENCODING_TRANSLATION'			=> 'Transparent character encoding',	'MBSTRING_ENCODING_TRANSLATION_EXPLAIN'	=> '<var>mbstring.encoding_translation</var> must be set to 0.',	'MBSTRING_HTTP_INPUT'					=> 'HTTP input character conversion',	'MBSTRING_HTTP_INPUT_EXPLAIN'			=> '<var>mbstring.http_input</var> must be set to <samp>pass</samp>.',	'MBSTRING_HTTP_OUTPUT'					=> 'HTTP output character conversion',	'MBSTRING_HTTP_OUTPUT_EXPLAIN'			=> '<var>mbstring.http_output</var> must be set to <samp>pass</samp>.',	'MAKE_FOLDER_WRITABLE'		=> 'Please make sure that this folder exists and is writable by the webserver then try again:<br /><strong>%s</strong>.',	'MAKE_FOLDERS_WRITABLE'		=> 'Please make sure that these folders exist and are writable by the webserver then try again:<br /><strong>%s</strong>.',	'MYSQL_SCHEMA_UPDATE_REQUIRED'	=> 'Your MySQL database schema for phpBB is outdated. phpBB detected a schema for MySQL 3.x/4.x, but the server runs on MySQL %2$s.<br /><strong>Before you proceed the update, you need to upgrade the schema.</strong><br /><br />Please refer to the <a href="http://www.phpbb.com/kb/article/doesnt-have-a-default-value-errors/">Knowledge Base article about upgrading the MySQL schema</a>. If you encounter problems, please use <a href="http://www.phpbb.com/community/viewforum.php?f=46">our support forums</a>.',	'NAMING_CONFLICT'			=> 'Naming conflict: %s and %s are both aliases<br /><br />%s',	'NEXT_STEP'					=> 'Proceed to next step',	'NOT_FOUND'					=> 'Cannot find',	'NOT_UNDERSTAND'			=> 'Could not understand %s #%d, table %s (%s)',	'NO_CONVERTORS'				=> 'No convertors are available for use.',	'NO_CONVERT_SPECIFIED'		=> 'No convertor specified.',	'NO_LOCATION'				=> 'Cannot determine location. If you know Imagemagick is installed, you may specify the location later within your administration control panel',	'NO_TABLES_FOUND'			=> 'No tables found.',	'OVERVIEW_BODY'				=> 'Welcome to phpBB3!<br /><br />phpBB is the most widely used open source bulletin board solution in the world. phpBB3 is the latest installment in a package line started in 2000. Like its predecessors, phpBB3 is feature-rich, user-friendly, and fully supported by the phpBB Team. phpBB3 greatly improves on what made phpBB2 popular, and adds commonly requested features that were not present in previous versions. We hope it exceeds your expectations.<br /><br />This installation system will guide you through installing phpBB3, updating to the latest version of phpBB3 from past releases, as well as converting to phpBB3 from a different discussion board system (including phpBB2). For more information, we encourage you to read <a href="../docs/INSTALL.html">the installation guide</a>.<br /><br />To read the phpBB3 license or learn about obtaining support and our stance on it, please select the respective options from the side menu. To continue, please select the appropriate tab above.',	'PCRE_UTF_SUPPORT'				=> 'PCRE UTF-8 support',	'PCRE_UTF_SUPPORT_EXPLAIN'		=> 'phpBB will <strong>not</strong> run if your PHP installation is not compiled with UTF-8 support in the PCRE extension.',	'PHP_GETIMAGESIZE_SUPPORT'			=> 'PHP function getimagesize() is available',	'PHP_GETIMAGESIZE_SUPPORT_EXPLAIN'	=> '<strong>Required</strong> - In order for phpBB to function correctly, the getimagesize function needs to be available.',	'PHP_OPTIONAL_MODULE'			=> 'Optional modules',	'PHP_OPTIONAL_MODULE_EXPLAIN'	=> '<strong>Optional</strong> - These modules or applications are optional. However, if they are available they will enable extra features.',	'PHP_SUPPORTED_DB'				=> 'Supported databases',	'PHP_SUPPORTED_DB_EXPLAIN'		=> '<strong>Required</strong> - You must have support for at least one compatible database within PHP. If no database modules are shown as available you should contact your hosting provider or review the relevant PHP installation documentation for advice.',	'PHP_REGISTER_GLOBALS'			=> 'PHP setting <var>register_globals</var> is disabled',	'PHP_REGISTER_GLOBALS_EXPLAIN'	=> 'phpBB will still run if this setting is enabled, but if possible, it is recommended that register_globals is disabled on your PHP install for security reasons.',	'PHP_SAFE_MODE'					=> 'Safe mode',	'PHP_SETTINGS'					=> 'PHP version and settings',	'PHP_SETTINGS_EXPLAIN'			=> '<strong>Required</strong> - You must be running at least version 4.3.3 of PHP in order to install phpBB. If <var>safe mode</var> is displayed below your PHP installation is running in that mode. This will impose limitations on remote administration and similar features.',	'PHP_URL_FOPEN_SUPPORT'			=> 'PHP setting <var>allow_url_fopen</var> is enabled',	'PHP_URL_FOPEN_SUPPORT_EXPLAIN'	=> '<strong>Optional</strong> - This setting is optional, however certain phpBB functions like off-site avatars will not work properly without it.',	'PHP_VERSION_REQD'				=> 'PHP version >= 4.3.3',	'POST_ID'						=> 'Post ID',	'PREFIX_FOUND'					=> 'A scan of your tables has shown a valid installation using <strong>%s</strong> as table prefix.',	'PREPROCESS_STEP'				=> 'Executing pre-processing functions/queries',	'PRE_CONVERT_COMPLETE'			=> 'All pre-conversion steps have successfully been completed. You may now begin the actual conversion process. Please note that you may have to manually do and adjust several things. After conversion, especially check the permissions assigned, rebuild your search index which is not converted and also make sure files got copied correctly, for example avatars and smilies.',	'PROCESS_LAST'					=> 'Processing last statements',	'REFRESH_PAGE'				=> 'Refresh page to continue conversion',	'REFRESH_PAGE_EXPLAIN'		=> 'If set to yes, the convertor will refresh the page to continue the conversion after having finished a step. If this is your first conversion for testing purposes and to determine any errors in advance, we suggest to set this to No.',	'REQUIREMENTS_TITLE'		=> 'Installation compatibility',	'REQUIREMENTS_EXPLAIN'		=> 'Before proceeding with the full installation phpBB will carry out some tests on your server configuration and files to ensure that you are able to install and run phpBB. Please ensure you read through the results thoroughly and do not proceed until all the required tests are passed. If you wish to use any of the features depending on the optional tests, you should ensure that these tests are passed also.',	'RETRY_WRITE'				=> 'Retry writing config',	'RETRY_WRITE_EXPLAIN'		=> 'If you wish you can change the permissions on config.php to allow phpBB to write to it. Should you wish to do that you can click Retry below to try again. Remember to return the permissions on config.php after phpBB has finished installation.',	'SCRIPT_PATH'				=> 'Script path',	'SCRIPT_PATH_EXPLAIN'		=> 'The path where phpBB is located relative to the domain name, e.g. <samp>/phpBB3</samp>.',	'SELECT_LANG'				=> 'Select language',	'SERVER_CONFIG'				=> 'Server configuration',	'SEARCH_INDEX_UNCONVERTED'	=> 'Search index was not converted',	'SEARCH_INDEX_UNCONVERTED_EXPLAIN'	=> 'Your old search index was not converted. Searching will always yield an empty result. To create a new search index go to the Administration Control Panel, select Maintenance and then choose Search index from the submenu.',	'SOFTWARE'					=> 'Board software',	'SPECIFY_OPTIONS'			=> 'Specify conversion options',	'STAGE_ADMINISTRATOR'		=> 'Administrator details',	'STAGE_ADVANCED'			=> 'Advanced settings',	'STAGE_ADVANCED_EXPLAIN'	=> 'The settings on this page are only necessary to set if you know that you require something different from the default. If you are unsure, just proceed to the next page, as these settings can be altered from the Administration Control Panel later.',	'STAGE_CONFIG_FILE'			=> 'Configuration file',	'STAGE_CREATE_TABLE'		=> 'Create database tables',	'STAGE_CREATE_TABLE_EXPLAIN'	=> 'The database tables used by phpBB 3.0 have been created and populated with some initial data. Proceed to the next screen to finish installing phpBB.',	'STAGE_DATABASE'			=> 'Database settings',	'STAGE_FINAL'				=> 'Final stage',	'STAGE_INTRO'				=> 'Introduction',	'STAGE_IN_PROGRESS'			=> 'Conversion in progress',	'STAGE_REQUIREMENTS'		=> 'Requirements',	'STAGE_SETTINGS'			=> 'Settings',	'STARTING_CONVERT'			=> 'Starting conversion process',	'STEP_PERCENT_COMPLETED'	=> 'Step <strong>%d</strong> of <strong>%d</strong>',	'SUB_INTRO'					=> 'Introduction',	'SUB_LICENSE'				=> 'License',	'SUB_SUPPORT'				=> 'Support',	'SUCCESSFUL_CONNECT'		=> 'Successful connection',	'SUPPORT_BODY'				=> 'Full support will be provided for the current stable release of phpBB3, free of charge. This includes:</p><ul><li>installation</li><li>configuration</li><li>technical questions</li><li>problems relating to potential bugs in the software</li><li>updating from Release Candidate (RC) versions to the latest stable version</li><li>converting from phpBB 2.0.x to phpBB3</li><li>converting from other discussion board software to phpBB3 (please see the <a href="http://www.phpbb.com/community/viewforum.php?f=65">Convertors Forum</a>)</li></ul><p>We encourage users still running beta versions of phpBB3 to replace their installation with a fresh copy of the latest version.</p><h2>MODs / Styles</h2><p>For issues relating to MODs, please post in the appropriate <a href="http://www.phpbb.com/community/viewforum.php?f=81">Modifications Forum</a>.<br />For issues relating to styles, templates and imagesets, please post in the appropriate <a href="http://www.phpbb.com/community/viewforum.php?f=80">Styles Forum</a>.<br /><br />If your question relates to a specific package, please post directly in the topic dedicated to the package.</p><h2>Obtaining Support</h2><p><a href="http://www.phpbb.com/community/viewtopic.php?f=14&amp;t=571070">The phpBB Welcome Package</a><br /><a href="http://www.phpbb.com/support/">Support Section</a><br /><a href="http://www.phpbb.com/support/documentation/3.0/quickstart/">Quick Start Guide</a><br /><br />To ensure you stay up to date with the latest news and releases, why not <a href="http://www.phpbb.com/support/">subscribe to our mailing list</a>?<br /><br />',	'SYNC_FORUMS'				=> 'Starting to synchronise forums',	'SYNC_POST_COUNT'			=> 'Synchronising post_counts',	'SYNC_POST_COUNT_ID'		=> 'Synchronising post_counts from <var>entry</var> %1$s to %2$s.',	'SYNC_TOPICS'				=> 'Starting to synchronise topics',	'SYNC_TOPIC_ID'				=> 'Synchronising topics from <var>topic_id</var> %1$s to %2$s.',	'TABLES_MISSING'			=> 'Could not find these tables<br /> <strong>%s</strong>.',	'TABLE_PREFIX'				=> 'Prefix for tables in database',	'TABLE_PREFIX_EXPLAIN'		=> 'The prefix must start with a letter and must only contain letters, numbers and underscores.',	'TABLE_PREFIX_SAME'			=> 'The table prefix needs to be the one used by the software you are converting from.<br /> Specified table prefix was %s.',	'TESTS_PASSED'				=> 'Tests passed',	'TESTS_FAILED'				=> 'Tests failed',	'UNABLE_WRITE_LOCK'			=> 'Unable to write lock file.',	'UNAVAILABLE'				=> 'Unavailable',	'UNWRITABLE'				=> 'Unwritable',	'UPDATE_TOPICS_POSTED'		=> 'Generating topics posted information',	'UPDATE_TOPICS_POSTED_ERR'	=> 'An error occured while generating topics posted information. You can retry this step in the ACP after the conversion process is completed.',	'VERIFY_OPTIONS'			=> 'Verifying conversion options',	'VERSION'					=> 'Version',	'WELCOME_INSTALL'			=> 'Welcome to phpBB3 Installation',	'WRITABLE'					=> 'Writable',));// Updater$lang = array_merge($lang, array(	'ALL_FILES_UP_TO_DATE'		=> 'All files are up to date with the latest phpBB version. You should now <a href="../ucp.php?mode=login">login to your board</a> and check if everything is working fine. Do not forget to delete, rename or move your install directory! Please send us updated information about your server and board configurations from the <a href="../ucp.php?mode=login&amp;redirect=adm/index.php%3Fi=send_statistics%26mode=send_statistics">Send statistics</a> module in your ACP.',	'ARCHIVE_FILE'				=> 'Source file within archive',	'BACK'				=> 'Back',	'BINARY_FILE'		=> 'Binary file',	'BOT'				=> 'Spider/Robot',	'CHANGE_CLEAN_NAMES'			=> 'The method used to make sure a username is not used by multiple users has been changed. There are some users which have the same name when compared with the new method. You have to delete or rename these users to make sure that each name is only used by one user before you can proceed.',	'CHECK_FILES'					=> 'Check files',	'CHECK_FILES_AGAIN'				=> 'Check files again',	'CHECK_FILES_EXPLAIN'			=> 'Within the next step all files will be checked against the update files - this can take a while if this is the first file check.',	'CHECK_FILES_UP_TO_DATE'		=> 'According to your database your version is up to date. You may want to proceed with the file check to make sure all files are really up to date with the latest phpBB version.',	'CHECK_UPDATE_DATABASE'			=> 'Continue update process',	'COLLECTED_INFORMATION'			=> 'File information',	'COLLECTED_INFORMATION_EXPLAIN'	=> 'The list below shows information about the files needing an update. Please read the information in front of every status block to see what they mean and what you may need to do to perform a successful update.',	'COLLECTING_FILE_DIFFS'			=> 'Collecting file differences',	'COMPLETE_LOGIN_TO_BOARD'		=> 'You should now <a href="../ucp.php?mode=login">login to your board</a> and check if everything is working fine. Do not forget to delete, rename or move your install directory!',	'CONTINUE_UPDATE_NOW'			=> 'Continue the update process now',		// Shown within the database update script at the end if called from the updater	'CONTINUE_UPDATE'				=> 'Continue update now',					// Shown after file upload to indicate the update process is not yet finished	'CURRENT_FILE'					=> 'Begin of Conflict - Original File code before update',	'CURRENT_VERSION'				=> 'Current version',	'DATABASE_TYPE'						=> 'Database type',	'DATABASE_UPDATE_INFO_OLD'			=> 'The database update file within the install directory is outdated. Please make sure you uploaded the correct version of the file.',	'DELETE_USER_REMOVE'				=> 'Delete user and remove posts',	'DELETE_USER_RETAIN'				=> 'Delete user but keep posts',	'DESTINATION'						=> 'Destination file',	'DIFF_INLINE'						=> 'Inline',	'DIFF_RAW'							=> 'Raw unified diff',	'DIFF_SEP_EXPLAIN'					=> 'Code block used within the updated/new file',	'DIFF_SIDE_BY_SIDE'					=> 'Side by Side',	'DIFF_UNIFIED'						=> 'Unified diff',	'DO_NOT_UPDATE'						=> 'Do not update this file',	'DONE'								=> 'Done',	'DOWNLOAD'							=> 'Download',	'DOWNLOAD_AS'						=> 'Download as',	'DOWNLOAD_UPDATE_METHOD_BUTTON'		=> 'Download modified files archive (recommended)',	'DOWNLOAD_CONFLICTS'				=> 'Download conflicts for this file',	'DOWNLOAD_CONFLICTS_EXPLAIN'		=> 'Search for &lt;&lt;&lt; to spot conflicts',	'DOWNLOAD_UPDATE_METHOD'			=> 'Download modified files archive',	'DOWNLOAD_UPDATE_METHOD_EXPLAIN'	=> 'Once downloaded you should unpack the archive. You will find the modified files you need to upload to your phpBB root directory within it. Please upload the files to their respective locations then. After you have uploaded all files, please check the files again with the other button below.',	'ERROR'			=> 'Error',	'EDIT_USERNAME'	=> 'Edit username',	'FILE_ALREADY_UP_TO_DATE'		=> 'File is already up to date.',	'FILE_DIFF_NOT_ALLOWED'			=> 'File not allowed to be diffed.',	'FILE_USED'						=> 'Information used from',			// Single file	'FILES_CONFLICT'				=> 'Conflict files',	'FILES_CONFLICT_EXPLAIN'		=> 'The following files are modified and do not represent the original files from the old version. phpBB determined that these files create conflicts if they are tried to be merged. Please investigate the conflicts and try to manually resolve them or continue the update choosing the preferred merging method. If you resolve the conflicts manually check the files again after you modified them. You are also able to choose between the preferred merge method for every file. The first one will result in a file where the conflicting lines from your old file will be lost, the other one will result in losing the changes from the newer file.',	'FILES_MODIFIED'				=> 'Modified files',	'FILES_MODIFIED_EXPLAIN'		=> 'The following files are modified and do not represent the original files from the old version. The updated file will be a merge between your modifications and the new file.',	'FILES_NEW'						=> 'New files',	'FILES_NEW_EXPLAIN'				=> 'The following files currently do not exist within your installation. These files will be added to your installation.',	'FILES_NEW_CONFLICT'			=> 'New conflicting files',	'FILES_NEW_CONFLICT_EXPLAIN'	=> 'The following files are new within the latest version but it has been determined that there is already a file with the same name within the same position. This file will be overwritten by the new file.',	'FILES_NOT_MODIFIED'			=> 'Not modified files',	'FILES_NOT_MODIFIED_EXPLAIN'	=> 'The following files are not modified and represent the original phpBB files from the version you want to update from.',	'FILES_UP_TO_DATE'				=> 'Already updated files',	'FILES_UP_TO_DATE_EXPLAIN'		=> 'The following files are already up to date and do not need to be updated.',	'FTP_SETTINGS'					=> 'FTP settings',	'FTP_UPDATE_METHOD'				=> 'FTP upload',	'INCOMPATIBLE_UPDATE_FILES'		=> 'The update files found are incompatible with your installed version. Your installed version is %1$s and the update file is for updating phpBB %2$s to %3$s.',	'INCOMPLETE_UPDATE_FILES'		=> 'The update files are incomplete.',	'INLINE_UPDATE_SUCCESSFUL'		=> 'The database update was successful. Now you need to continue the update process.',	'KEEP_OLD_NAME'		=> 'Keep username',	'LATEST_VERSION'		=> 'Latest version',	'LINE'					=> 'Line',	'LINE_ADDED'			=> 'Added',	'LINE_MODIFIED'			=> 'Modified',	'LINE_REMOVED'			=> 'Removed',	'LINE_UNMODIFIED'		=> 'Unmodified',	'LOGIN_UPDATE_EXPLAIN'	=> 'In order to update your installation you need to login first.',	'MAPPING_FILE_STRUCTURE'	=> 'To ease the upload here are the file locations which map your phpBB installation.',	'MERGE_MODIFICATIONS_OPTION'	=> 'Merge modifications',	'MERGE_NO_MERGE_NEW_OPTION'	=> 'Do not merge - use new file',	'MERGE_NO_MERGE_MOD_OPTION'	=> 'Do not merge - use currently installed file',	'MERGE_MOD_FILE_OPTION'		=> 'Merge modifications (removes new phpBB code within conflicting block)',	'MERGE_NEW_FILE_OPTION'		=> 'Merge modifications (removes modified code within conflicting block)',	'MERGE_SELECT_ERROR'		=> 'Conflicting file merge modes are not correctly selected.',	'MERGING_FILES'				=> 'Merging differences',	'MERGING_FILES_EXPLAIN'		=> 'Currently collecting final file changes.<br /><br />Please wait until phpBB has completed all operations on changed files.',	'NEW_FILE'						=> 'End of Conflict',	'NEW_USERNAME'					=> 'New username',	'NO_AUTH_UPDATE'				=> 'Not authorised to update',	'NO_ERRORS'						=> 'No errors',	'NO_UPDATE_FILES'				=> 'Not updating the following files',	'NO_UPDATE_FILES_EXPLAIN'		=> 'The following files are new or modified but the directory they normally reside in could not be found on your installation. If this list contains files to other directories than language/ or styles/ than you may have modified your directory structure and the update may be incomplete.',	'NO_UPDATE_FILES_OUTDATED'		=> 'No valid update directory was found, please make sure you uploaded the relevant files.<br /><br />Your installation does <strong>not</strong> seem to be up to date. Updates are available for your version of phpBB %1$s, please visit <a href="http://www.phpbb.com/downloads/" rel="external">http://www.phpbb.com/downloads/</a> to obtain the correct package to update from Version %2$s to Version %3$s.',	'NO_UPDATE_FILES_UP_TO_DATE'	=> 'Your version is up to date. There is no need to run the update tool. If you want to make an integrity check on your files make sure you uploaded the correct update files.',	'NO_UPDATE_INFO'				=> 'Update file information could not be found.',	'NO_UPDATES_REQUIRED'			=> 'No updates required',	'NO_VISIBLE_CHANGES'			=> 'No visible changes',	'NOTICE'						=> 'Notice',	'NUM_CONFLICTS'					=> 'Number of conflicts',	'NUMBER_OF_FILES_COLLECTED'		=> 'Currently differences from %1$d of %2$d files have been checked.<br />Please wait until all files are checked.',	'OLD_UPDATE_FILES'		=> 'Update files are out of date. The update files found are for updating from phpBB %1$s to phpBB %2$s but the latest version of phpBB is %3$s.',	'PACKAGE_UPDATES_TO'				=> 'Current package updates to version',	'PERFORM_DATABASE_UPDATE'			=> 'Perform database update',	'PERFORM_DATABASE_UPDATE_EXPLAIN'	=> 'Below you will find a button to the database update script. The database update can take a while, so please do not stop the execution if it seems to hang. After the database update has been performed just follow the instructions to continue the update process.',	'PREVIOUS_VERSION'					=> 'Previous version',	'PROGRESS'							=> 'Progress',	'RESULT'					=> 'Result',	'RUN_DATABASE_SCRIPT'		=> 'Update my database now',	'SELECT_DIFF_MODE'			=> 'Select diff mode',	'SELECT_DOWNLOAD_FORMAT'	=> 'Select download archive format',	'SELECT_FTP_SETTINGS'		=> 'Select FTP settings',	'SHOW_DIFF_CONFLICT'		=> 'Show differences/conflicts',	'SHOW_DIFF_FINAL'			=> 'Show resulting file',	'SHOW_DIFF_MODIFIED'		=> 'Show merged differences',	'SHOW_DIFF_NEW'				=> 'Show file contents',	'SHOW_DIFF_NEW_CONFLICT'	=> 'Show differences',	'SHOW_DIFF_NOT_MODIFIED'	=> 'Show differences',	'SOME_QUERIES_FAILED'		=> 'Some queries failed, the statements and errors are listed below.',	'SQL'						=> 'SQL',	'SQL_FAILURE_EXPLAIN'		=> 'This is probably nothing to worry about, update will continue. Should this fail to complete you may need to seek help at our support forums. See <a href="../docs/README.html">README</a> for details on how to obtain advice.',	'STAGE_FILE_CHECK'			=> 'Check files',	'STAGE_UPDATE_DB'			=> 'Update database',	'STAGE_UPDATE_FILES'		=> 'Update files',	'STAGE_VERSION_CHECK'		=> 'Version check',	'STATUS_CONFLICT'			=> 'Modified file producing conflicts',	'STATUS_MODIFIED'			=> 'Modified file',	'STATUS_NEW'				=> 'New file',	'STATUS_NEW_CONFLICT'		=> 'Conflicting new file',	'STATUS_NOT_MODIFIED'		=> 'Not modified file',	'STATUS_UP_TO_DATE'			=> 'Already updated file',	'TOGGLE_DISPLAY'			=> 'View/Hide file list',	'TRY_DOWNLOAD_METHOD'		=> 'You may want to try the download modified files method.<br />This method always works and is also the recommended update path.',	'TRY_DOWNLOAD_METHOD_BUTTON'=> 'Try this method now',	'UPDATE_COMPLETED'				=> 'Update completed',	'UPDATE_DATABASE'				=> 'Update database',	'UPDATE_DATABASE_EXPLAIN'		=> 'Within the next step the database will be updated.',	'UPDATE_DATABASE_SCHEMA'		=> 'Updating database schema',	'UPDATE_FILES'					=> 'Update files',	'UPDATE_FILES_NOTICE'			=> 'Please make sure you have updated your board files too, this file is only updating your database.',	'UPDATE_INSTALLATION'			=> 'Update phpBB installation',	'UPDATE_INSTALLATION_EXPLAIN'	=> 'With this option, it is possible to update your phpBB installation to the latest version.<br />During the process all of your files will be checked for their integrity. You are able to review all differences and files before the update.<br /><br />The file update itself can be done in two different ways.</p><h2>Manual Update</h2><p>With this update you only download your personal set of changed files to make sure you do not lose your file modifications you may have done. After you downloaded this package you need to manually upload the files to their correct position under your phpBB root directory. Once done, you are able to do the file check stage again to see if you moved the files to their correct location.</p><h2>Automatic Update with FTP</h2><p>This method is similar to the first one but without the need to download the changed files and uploading them on your own. This will be done for you. In order to use this method you need to know your FTP login details since you will be asked for them. Once finished you will be redirected to the file check again to make sure everything got updated correctly.<br /><br />',	'UPDATE_INSTRUCTIONS'			=> '		<h1>Release announcement</h1>		<p>Please read <a href="%1$s" title="%1$s"><strong>the release announcement for the latest version</strong></a> before you continue your update process, it may contain useful information. It also contains full download links as well as the change log.</p>		<br />		<h1>How to update your installation with the Automatic Update Package</h1>		<p>The recommended way of updating your installation listed here is only valid for the automatic update package. You are also able to update your installation using the methods listed within the INSTALL.html document. The steps for updating phpBB3 automatically are:</p>		<ul style="margin-left: 20px; font-size: 1.1em;">			<li>Go to the <a href="http://www.phpbb.com/downloads/" title="http://www.phpbb.com/downloads/">phpBB.com downloads page</a> and download the "Automatic Update Package" archive.<br /><br /></li>			<li>Unpack the archive.<br /><br /></li>			<li>Upload the complete uncompressed install folder to your phpBB root directory (where your config.php file is).<br /><br /></li>		</ul>		<p>Once uploaded your board will be offline for normal users due to the install directory you uploaded now present.<br /><br />		<strong><a href="%2$s" title="%2$s">Now start the update process by pointing your browser to the install folder</a>.</strong><br />		<br />		You will then be guided through the update process. You will be notified once the update is complete.		</p>	',	'UPDATE_INSTRUCTIONS_INCOMPLETE'	=> '		<h1>Incomplete update detected</h1>		<p>phpBB detected an incomplete automatic update. Please make sure you followed every step within the automatic update tool. Below you will find the link again, or go directly to your install directory.</p>	',	'UPDATE_METHOD'					=> 'Update method',	'UPDATE_METHOD_EXPLAIN'			=> 'You are now able to choose your preferred update method. Using the FTP upload will present you with a form you need to enter your FTP account details into. With this method the files will be automatically moved to the new location and backups of the old files being created by appending .bak to the filename. If you choose to download the modified files you are able to unpack and upload them to their correct location manually later.',	'UPDATE_REQUIRES_FILE'			=> 'The updater requires that the following file is present: %s',	'UPDATE_SUCCESS'				=> 'Update was successful',	'UPDATE_SUCCESS_EXPLAIN'		=> 'Successfully updated all files. The next step involves checking all files again to make sure the files got updated correctly.',	'UPDATE_VERSION_OPTIMIZE'		=> 'Updating version and optimising tables',	'UPDATING_DATA'					=> 'Updating data',	'UPDATING_TO_LATEST_STABLE'		=> 'Updating database to latest stable release',	'UPDATED_VERSION'				=> 'Updated version',	'UPGRADE_INSTRUCTIONS'			=> 'A new feature release <strong>%1$s</strong> is available. Please read <a href="%2$s" title="%2$s"><strong>the release announcement</strong></a> to learn about what it has to offer, and how to upgrade.',	'UPLOAD_METHOD'					=> 'Upload method',	'UPDATE_DB_SUCCESS'				=> 'Database update was successful.',	'USER_ACTIVE'					=> 'Active user',	'USER_INACTIVE'					=> 'Inactive user',	'VERSION_CHECK'					=> 'Version check',	'VERSION_CHECK_EXPLAIN'			=> 'Checks to see if your phpBB installation is up to date.',	'VERSION_NOT_UP_TO_DATE'		=> 'Your phpBB installation is not up to date. Please continue the update process.',	'VERSION_NOT_UP_TO_DATE_ACP'	=> 'Your phpBB installation is not up to date.<br />Below is a link to the release announcement, which contains more information as well as instructions on updating.',	'VERSION_NOT_UP_TO_DATE_TITLE'	=> 'Your phpBB installation is not up to date.',	'VERSION_UP_TO_DATE'			=> 'Your phpBB installation is up to date. Although there are no updates available at this time, you may continue in order to perform a file validity check.',	'VERSION_UP_TO_DATE_ACP'		=> 'Your phpBB installation is up to date. There are no updates available at this time.',	'VIEWING_FILE_CONTENTS'			=> 'Viewing file contents',	'VIEWING_FILE_DIFF'				=> 'Viewing file differences',	'WRONG_INFO_FILE_FORMAT'	=> 'Wrong info file format',));// Default database schema entries...$lang = array_merge($lang, array(	'CONFIG_BOARD_EMAIL_SIG'		=> 'Thanks, The Management',	'CONFIG_SITE_DESC'				=> 'A short text to describe your forum',	'CONFIG_SITENAME'				=> 'yourdomain.com',	'DEFAULT_INSTALL_POST'			=> 'This is an example post in your phpBB3 installation. Everything seems to be working. You may delete this post if you like and continue to set up your board. During the installation process your first category and your first forum are assigned an appropriate set of permissions for the predefined usergroups administrators, bots, global moderators, guests, registered users and registered COPPA users. If you also choose to delete your first category and your first forum, do not forget to assign permissions for all these usergroups for all new categories and forums you create. It is recommended to rename your first category and your first forum and copy permissions from these while creating new categories and forums. Have fun!',	'FORUMS_FIRST_CATEGORY'			=> 'Your first category',	'FORUMS_TEST_FORUM_DESC'		=> 'Description of your first forum.',	'FORUMS_TEST_FORUM_TITLE'		=> 'Your first forum',	'RANKS_SITE_ADMIN_TITLE'		=> 'Site Admin',	'REPORT_WAREZ'					=> 'The post contains links to illegal or pirated software.',	'REPORT_SPAM'					=> 'The reported post has the only purpose to advertise for a website or another product.',	'REPORT_OFF_TOPIC'				=> 'The reported post is off topic.',	'REPORT_OTHER'					=> 'The reported post does not fit into any other category, please use the further information field.',	'SMILIES_ARROW'					=> 'Arrow',	'SMILIES_CONFUSED'				=> 'Confused',	'SMILIES_COOL'					=> 'Cool',	'SMILIES_CRYING'				=> 'Crying or Very Sad',	'SMILIES_EMARRASSED'			=> 'Embarrassed',	'SMILIES_EVIL'					=> 'Evil or Very Mad',	'SMILIES_EXCLAMATION'			=> 'Exclamation',	'SMILIES_GEEK'					=> 'Geek',	'SMILIES_IDEA'					=> 'Idea',	'SMILIES_LAUGHING'				=> 'Laughing',	'SMILIES_MAD'					=> 'Mad',	'SMILIES_MR_GREEN'				=> 'Mr. Green',	'SMILIES_NEUTRAL'				=> 'Neutral',	'SMILIES_QUESTION'				=> 'Question',	'SMILIES_RAZZ'					=> 'Razz',	'SMILIES_ROLLING_EYES'			=> 'Rolling Eyes',	'SMILIES_SAD'					=> 'Sad',	'SMILIES_SHOCKED'				=> 'Shocked',	'SMILIES_SMILE'					=> 'Smile',	'SMILIES_SURPRISED'				=> 'Surprised',	'SMILIES_TWISTED_EVIL'			=> 'Twisted Evil',	'SMILIES_UBER_GEEK'				=> 'Uber Geek',	'SMILIES_VERY_HAPPY'			=> 'Very Happy',	'SMILIES_WINK'					=> 'Wink',	'TOPICS_TOPIC_TITLE'			=> 'Welcome to phpBB3',));?>
<?php/**** @package phpBB3* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @ignore*/if (!defined('IN_PHPBB')){	exit;}/*** Messenger* @package phpBB3*/class messenger{	var $vars, $msg, $extra_headers, $replyto, $from, $subject;	var $addresses = array();	var $mail_priority = MAIL_NORMAL_PRIORITY;	var $use_queue = true;	var $tpl_obj = NULL;	var $tpl_msg = array();	var $eol = "\n";	/**	* Constructor	*/	function messenger($use_queue = true)	{		global $config;		$this->use_queue = (!$config['email_package_size']) ? false : $use_queue;		$this->subject = '';		// Determine EOL character (\n for UNIX, \r\n for Windows and \r for Mac)		$this->eol = (!defined('PHP_EOL')) ? (($eol = strtolower(substr(PHP_OS, 0, 3))) == 'win') ? "\r\n" : (($eol == 'mac') ? "\r" : "\n") : PHP_EOL;		$this->eol = (!$this->eol) ? "\n" : $this->eol;	}	/**	* Resets all the data (address, template file, etc etc) to default	*/	function reset()	{		$this->addresses = $this->extra_headers = array();		$this->vars = $this->msg = $this->replyto = $this->from = '';		$this->mail_priority = MAIL_NORMAL_PRIORITY;	}	/**	* Sets an email address to send to	*/	function to($address, $realname = '')	{		global $config;		if (!trim($address))		{			return;		}		$pos = isset($this->addresses['to']) ? sizeof($this->addresses['to']) : 0;		$this->addresses['to'][$pos]['email'] = trim($address);		// If empty sendmail_path on windows, PHP changes the to line		if (!$config['smtp_delivery'] && DIRECTORY_SEPARATOR == '\\')		{			$this->addresses['to'][$pos]['name'] = '';		}		else		{			$this->addresses['to'][$pos]['name'] = trim($realname);		}	}	/**	* Sets an cc address to send to	*/	function cc($address, $realname = '')	{		if (!trim($address))		{			return;		}		$pos = isset($this->addresses['cc']) ? sizeof($this->addresses['cc']) : 0;		$this->addresses['cc'][$pos]['email'] = trim($address);		$this->addresses['cc'][$pos]['name'] = trim($realname);	}	/**	* Sets an bcc address to send to	*/	function bcc($address, $realname = '')	{		if (!trim($address))		{			return;		}		$pos = isset($this->addresses['bcc']) ? sizeof($this->addresses['bcc']) : 0;		$this->addresses['bcc'][$pos]['email'] = trim($address);		$this->addresses['bcc'][$pos]['name'] = trim($realname);	}	/**	* Sets a im contact to send to	*/	function im($address, $realname = '')	{		// IM-Addresses could be empty		if (!trim($address))		{			return;		}		$pos = isset($this->addresses['im']) ? sizeof($this->addresses['im']) : 0;		$this->addresses['im'][$pos]['uid'] = trim($address);		$this->addresses['im'][$pos]['name'] = trim($realname);	}	/**	* Set the reply to address	*/	function replyto($address)	{		$this->replyto = trim($address);	}	/**	* Set the from address	*/	function from($address)	{		$this->from = trim($address);	}	/**	* set up subject for mail	*/	function subject($subject = '')	{		$this->subject = trim($subject);	}	/**	* set up extra mail headers	*/	function headers($headers)	{		$this->extra_headers[] = trim($headers);	}	/**	* Adds X-AntiAbuse headers	*	* @param array $config		Configuration array	* @param user $user			A user object	*	* @return null	*/	function anti_abuse_headers($config, $user)	{		$this->headers('X-AntiAbuse: Board servername - ' . mail_encode($config['server_name']));		$this->headers('X-AntiAbuse: User_id - ' . $user->data['user_id']);		$this->headers('X-AntiAbuse: Username - ' . mail_encode($user->data['username']));		$this->headers('X-AntiAbuse: User IP - ' . $user->ip);	}	/**	* Set the email priority	*/	function set_mail_priority($priority = MAIL_NORMAL_PRIORITY)	{		$this->mail_priority = $priority;	}	/**	* Set email template to use	*/	function template($template_file, $template_lang = '', $template_path = '')	{		global $config, $phpbb_root_path, $user;		if (!trim($template_file))		{			trigger_error('No template file for emailing set.', E_USER_ERROR);		}		if (!trim($template_lang))		{			// fall back to board default language if the user's language is			// missing $template_file.  If this does not exist either,			// $tpl->set_custom_template will do a trigger_error			$template_lang = basename($config['default_lang']);		}		// tpl_msg now holds a template object we can use to parse the template file		if (!isset($this->tpl_msg[$template_lang . $template_file]))		{			$this->tpl_msg[$template_lang . $template_file] = new template();			$tpl = &$this->tpl_msg[$template_lang . $template_file];			$fallback_template_path = false;			if (!$template_path)			{				$template_path = (!empty($user->lang_path)) ? $user->lang_path : $phpbb_root_path . 'language/';				$template_path .= $template_lang . '/email';				// we can only specify default language fallback when the path is not a custom one for which we				// do not know the default language alternative				if ($template_lang !== basename($config['default_lang']))				{					$fallback_template_path = (!empty($user->lang_path)) ? $user->lang_path : $phpbb_root_path . 'language/';					$fallback_template_path .= basename($config['default_lang']) . '/email';				}			}			$tpl->set_custom_template($template_path, $template_lang . '_email', $fallback_template_path);			$tpl->set_filenames(array(				'body'		=> $template_file . '.txt',			));		}		$this->tpl_obj = &$this->tpl_msg[$template_lang . $template_file];		$this->vars = &$this->tpl_obj->_rootref;		$this->tpl_msg = '';		return true;	}	/**	* assign variables to email template	*/	function assign_vars($vars)	{		if (!is_object($this->tpl_obj))		{			return;		}		$this->tpl_obj->assign_vars($vars);	}	function assign_block_vars($blockname, $vars)	{		if (!is_object($this->tpl_obj))		{			return;		}		$this->tpl_obj->assign_block_vars($blockname, $vars);	}	/**	* Send the mail out to the recipients set previously in var $this->addresses	*/	function send($method = NOTIFY_EMAIL, $break = false)	{		global $config, $user;		// We add some standard variables we always use, no need to specify them always		if (!isset($this->vars['U_BOARD']))		{			$this->assign_vars(array(				'U_BOARD'	=> generate_board_url(),			));		}		if (!isset($this->vars['EMAIL_SIG']))		{			$this->assign_vars(array(				'EMAIL_SIG'	=> str_replace('<br />', "\n", "-- \n" . htmlspecialchars_decode($config['board_email_sig'])),			));		}		if (!isset($this->vars['SITENAME']))		{			$this->assign_vars(array(				'SITENAME'	=> htmlspecialchars_decode($config['sitename']),			));		}		// Parse message through template		$this->msg = trim($this->tpl_obj->assign_display('body'));		// Because we use \n for newlines in the body message we need to fix line encoding errors for those admins who uploaded email template files in the wrong encoding		$this->msg = str_replace("\r\n", "\n", $this->msg);		// We now try and pull a subject from the email body ... if it exists,		// do this here because the subject may contain a variable		$drop_header = '';		$match = array();		if (preg_match('#^(Subject:(.*?))$#m', $this->msg, $match))		{			$this->subject = (trim($match[2]) != '') ? trim($match[2]) : (($this->subject != '') ? $this->subject : $user->lang['NO_EMAIL_SUBJECT']);			$drop_header .= '[\r\n]*?' . preg_quote($match[1], '#');		}		else		{			$this->subject = (($this->subject != '') ? $this->subject : $user->lang['NO_EMAIL_SUBJECT']);		}		if ($drop_header)		{			$this->msg = trim(preg_replace('#' . $drop_header . '#s', '', $this->msg));		}		if ($break)		{			return true;		}		switch ($method)		{			case NOTIFY_EMAIL:				$result = $this->msg_email();			break;			case NOTIFY_IM:				$result = $this->msg_jabber();			break;			case NOTIFY_BOTH:				$result = $this->msg_email();				$this->msg_jabber();			break;		}		$this->reset();		return $result;	}	/**	* Add error message to log	*/	function error($type, $msg)	{		global $user, $phpEx, $phpbb_root_path, $config;		// Session doesn't exist, create it		if (!isset($user->session_id) || $user->session_id === '')		{			$user->session_begin();		}		$calling_page = (!empty($_SERVER['PHP_SELF'])) ? $_SERVER['PHP_SELF'] : $_ENV['PHP_SELF'];		$message = '';		switch ($type)		{			case 'EMAIL':				$message = '<strong>EMAIL/' . (($config['smtp_delivery']) ? 'SMTP' : 'PHP/' . $config['email_function_name'] . '()') . '</strong>';			break;			default:				$message = "<strong>$type</strong>";			break;		}		$message .= '<br /><em>' . htmlspecialchars($calling_page) . '</em><br /><br />' . $msg . '<br />';		add_log('critical', 'LOG_ERROR_' . $type, $message);	}	/**	* Save to queue	*/	function save_queue()	{		global $config;		if ($config['email_package_size'] && $this->use_queue && !empty($this->queue))		{			$this->queue->save();			return;		}	}	/**	* Return email header	*/	function build_header($to, $cc, $bcc)	{		global $config;		// We could use keys here, but we won't do this for 3.0.x to retain backwards compatibility		$headers = array();		$headers[] = 'From: ' . $this->from;		if ($cc)		{			$headers[] = 'Cc: ' . $cc;		}		if ($bcc)		{			$headers[] = 'Bcc: ' . $bcc;		}		$headers[] = 'Reply-To: ' . $this->replyto;		$headers[] = 'Return-Path: <' . $config['board_email'] . '>';		$headers[] = 'Sender: <' . $config['board_email'] . '>';		$headers[] = 'MIME-Version: 1.0';		$headers[] = 'Message-ID: <' . md5(unique_id(time())) . '@' . $config['server_name'] . '>';		$headers[] = 'Date: ' . date('r', time());		$headers[] = 'Content-Type: text/plain; charset=UTF-8'; // format=flowed		$headers[] = 'Content-Transfer-Encoding: 8bit'; // 7bit		$headers[] = 'X-Priority: ' . $this->mail_priority;		$headers[] = 'X-MSMail-Priority: ' . (($this->mail_priority == MAIL_LOW_PRIORITY) ? 'Low' : (($this->mail_priority == MAIL_NORMAL_PRIORITY) ? 'Normal' : 'High'));		$headers[] = 'X-Mailer: phpBB3';		$headers[] = 'X-MimeOLE: phpBB3';		$headers[] = 'X-phpBB-Origin: phpbb://' . str_replace(array('http://', 'https://'), array('', ''), generate_board_url());		if (sizeof($this->extra_headers))		{			$headers = array_merge($headers, $this->extra_headers);		}		return $headers;	}	/**	* Send out emails	*/	function msg_email()	{		global $config, $user;		if (empty($config['email_enable']))		{			return false;		}		// Addresses to send to?		if (empty($this->addresses) || (empty($this->addresses['to']) && empty($this->addresses['cc']) && empty($this->addresses['bcc'])))		{			// Send was successful. ;)			return true;		}		$use_queue = false;		if ($config['email_package_size'] && $this->use_queue)		{			if (empty($this->queue))			{				$this->queue = new queue();				$this->queue->init('email', $config['email_package_size']);			}			$use_queue = true;		}		if (empty($this->replyto))		{			$this->replyto = '<' . $config['board_contact'] . '>';		}		if (empty($this->from))		{			$this->from = '<' . $config['board_contact'] . '>';		}		$encode_eol = ($config['smtp_delivery']) ? "\r\n" : $this->eol;		// Build to, cc and bcc strings		$to = $cc = $bcc = '';		foreach ($this->addresses as $type => $address_ary)		{			if ($type == 'im')			{				continue;			}			foreach ($address_ary as $which_ary)			{				$$type .= (($$type != '') ? ', ' : '') . (($which_ary['name'] != '') ? mail_encode($which_ary['name'], $encode_eol) . ' <' . $which_ary['email'] . '>' : $which_ary['email']);			}		}		// Build header		$headers = $this->build_header($to, $cc, $bcc);		// Send message ...		if (!$use_queue)		{			$mail_to = ($to == '') ? 'undisclosed-recipients:;' : $to;			$err_msg = '';			if ($config['smtp_delivery'])			{				$result = smtpmail($this->addresses, mail_encode($this->subject), wordwrap(utf8_wordwrap($this->msg), 997, "\n", true), $err_msg, $headers);			}			else			{				$result = phpbb_mail($mail_to, $this->subject, $this->msg, $headers, $this->eol, $err_msg);			}			if (!$result)			{				$this->error('EMAIL', $err_msg);				return false;			}		}		else		{			$this->queue->put('email', array(				'to'			=> $to,				'addresses'		=> $this->addresses,				'subject'		=> $this->subject,				'msg'			=> $this->msg,				'headers'		=> $headers)			);		}		return true;	}	/**	* Send jabber message out	*/	function msg_jabber()	{		global $config, $db, $user, $phpbb_root_path, $phpEx;		if (empty($config['jab_enable']) || empty($config['jab_host']) || empty($config['jab_username']) || empty($config['jab_password']))		{			return false;		}		if (empty($this->addresses['im']))		{			// Send was successful. ;)			return true;		}		$use_queue = false;		if ($config['jab_package_size'] && $this->use_queue)		{			if (empty($this->queue))			{				$this->queue = new queue();				$this->queue->init('jabber', $config['jab_package_size']);			}			$use_queue = true;		}		$addresses = array();		foreach ($this->addresses['im'] as $type => $uid_ary)		{			$addresses[] = $uid_ary['uid'];		}		$addresses = array_unique($addresses);		if (!$use_queue)		{			include_once($phpbb_root_path . 'includes/functions_jabber.' . $phpEx);			$this->jabber = new jabber($config['jab_host'], $config['jab_port'], $config['jab_username'], $config['jab_password'], $config['jab_use_ssl']);			if (!$this->jabber->connect())			{				$this->error('JABBER', $user->lang['ERR_JAB_CONNECT'] . '<br />' . $this->jabber->get_log());				return false;			}			if (!$this->jabber->login())			{				$this->error('JABBER', $user->lang['ERR_JAB_AUTH'] . '<br />' . $this->jabber->get_log());				return false;			}			foreach ($addresses as $address)			{				$this->jabber->send_message($address, $this->msg, $this->subject);			}			$this->jabber->disconnect();		}		else		{			$this->queue->put('jabber', array(				'addresses'		=> $addresses,				'subject'		=> $this->subject,				'msg'			=> $this->msg)			);		}		unset($addresses);		return true;	}}/*** handling email and jabber queue* @package phpBB3*/class queue{	var $data = array();	var $queue_data = array();	var $package_size = 0;	var $cache_file = '';	var $eol = "\n";	/**	* constructor	*/	function queue()	{		global $phpEx, $phpbb_root_path;		$this->data = array();		$this->cache_file = "{$phpbb_root_path}cache/queue.$phpEx";		// Determine EOL character (\n for UNIX, \r\n for Windows and \r for Mac)		$this->eol = (!defined('PHP_EOL')) ? (($eol = strtolower(substr(PHP_OS, 0, 3))) == 'win') ? "\r\n" : (($eol == 'mac') ? "\r" : "\n") : PHP_EOL;		$this->eol = (!$this->eol) ? "\n" : $this->eol;	}	/**	* Init a queue object	*/	function init($object, $package_size)	{		$this->data[$object] = array();		$this->data[$object]['package_size'] = $package_size;		$this->data[$object]['data'] = array();	}	/**	* Put object in queue	*/	function put($object, $scope)	{		$this->data[$object]['data'][] = $scope;	}	/**	* Obtains exclusive lock on queue cache file.	* Returns resource representing the lock	*/	function lock()	{		// For systems that can't have two processes opening		// one file for writing simultaneously		if (file_exists($this->cache_file . '.lock'))		{			$mode = 'rb';		}		else		{			$mode = 'wb';		}		$lock_fp = @fopen($this->cache_file . '.lock', $mode);		if ($mode == 'wb')		{			if (!$lock_fp)			{				// Two processes may attempt to create lock file at the same time.				// Have the losing process try opening the lock file again for reading				// on the assumption that the winning process created it				$mode = 'rb';				$lock_fp = @fopen($this->cache_file . '.lock', $mode);			}			else			{				// Only need to set mode when the lock file is written				@chmod($this->cache_file . '.lock', 0666);			}		}		if ($lock_fp)		{			@flock($lock_fp, LOCK_EX);		}		return $lock_fp;	}	/**	* Releases lock on queue cache file, using resource obtained from lock()	*/	function unlock($lock_fp)	{		// lock() will return null if opening lock file, and thus locking, failed.		// Accept null values here so that client code does not need to check them		if ($lock_fp)		{			@flock($lock_fp, LOCK_UN);			fclose($lock_fp);		}	}	/**	* Process queue	* Using lock file	*/	function process()	{		global $db, $config, $phpEx, $phpbb_root_path, $user;		$lock_fp = $this->lock();		set_config('last_queue_run', time(), true);		if (!file_exists($this->cache_file) || filemtime($this->cache_file) > time() - $config['queue_interval'])		{			$this->unlock($lock_fp);			return;		}		include($this->cache_file);		foreach ($this->queue_data as $object => $data_ary)		{			@set_time_limit(0);			if (!isset($data_ary['package_size']))			{				$data_ary['package_size'] = 0;			}			$package_size = $data_ary['package_size'];			$num_items = (!$package_size || sizeof($data_ary['data']) < $package_size) ? sizeof($data_ary['data']) : $package_size;			/*			* This code is commented out because it causes problems on some web hosts.			* The core problem is rather restrictive email sending limits.			* This code is nly useful if you have no such restrictions from the			* web host and the package size setting is wrong.			// If the amount of emails to be sent is way more than package_size than we need to increase it to prevent backlogs...			if (sizeof($data_ary['data']) > $package_size * 2.5)			{				$num_items = sizeof($data_ary['data']);			}			*/			switch ($object)			{				case 'email':					// Delete the email queued objects if mailing is disabled					if (!$config['email_enable'])					{						unset($this->queue_data['email']);						continue 2;					}				break;				case 'jabber':					if (!$config['jab_enable'])					{						unset($this->queue_data['jabber']);						continue 2;					}					include_once($phpbb_root_path . 'includes/functions_jabber.' . $phpEx);					$this->jabber = new jabber($config['jab_host'], $config['jab_port'], $config['jab_username'], $config['jab_password'], $config['jab_use_ssl']);					if (!$this->jabber->connect())					{						messenger::error('JABBER', $user->lang['ERR_JAB_CONNECT']);						continue 2;					}					if (!$this->jabber->login())					{						messenger::error('JABBER', $user->lang['ERR_JAB_AUTH']);						continue 2;					}				break;				default:					$this->unlock($lock_fp);					return;			}			for ($i = 0; $i < $num_items; $i++)			{				// Make variables available...				extract(array_shift($this->queue_data[$object]['data']));				switch ($object)				{					case 'email':						$err_msg = '';						$to = (!$to) ? 'undisclosed-recipients:;' : $to;						if ($config['smtp_delivery'])						{							$result = smtpmail($addresses, mail_encode($subject), wordwrap(utf8_wordwrap($msg), 997, "\n", true), $err_msg, $headers);						}						else						{							$result = phpbb_mail($to, $subject, $msg, $headers, $this->eol, $err_msg);						}						if (!$result)						{							messenger::error('EMAIL', $err_msg);							continue 2;						}					break;					case 'jabber':						foreach ($addresses as $address)						{							if ($this->jabber->send_message($address, $msg, $subject) === false)							{								messenger::error('JABBER', $this->jabber->get_log());								continue 3;							}						}					break;				}			}			// No more data for this object? Unset it			if (!sizeof($this->queue_data[$object]['data']))			{				unset($this->queue_data[$object]);			}			// Post-object processing			switch ($object)			{				case 'jabber':					// Hang about a couple of secs to ensure the messages are					// handled, then disconnect					$this->jabber->disconnect();				break;			}		}		if (!sizeof($this->queue_data))		{			@unlink($this->cache_file);		}		else		{			if ($fp = @fopen($this->cache_file, 'wb'))			{				fwrite($fp, "<?php\nif (!defined('IN_PHPBB')) exit;\n\$this->queue_data = unserialize(" . var_export(serialize($this->queue_data), true) . ");\n\n?>");				fclose($fp);				phpbb_chmod($this->cache_file, CHMOD_READ | CHMOD_WRITE);			}		}		$this->unlock($lock_fp);	}	/**	* Save queue	*/	function save()	{		if (!sizeof($this->data))		{			return;		}		$lock_fp = $this->lock();		if (file_exists($this->cache_file))		{			include($this->cache_file);			foreach ($this->queue_data as $object => $data_ary)			{				if (isset($this->data[$object]) && sizeof($this->data[$object]))				{					$this->data[$object]['data'] = array_merge($data_ary['data'], $this->data[$object]['data']);				}				else				{					$this->data[$object]['data'] = $data_ary['data'];				}			}		}		if ($fp = @fopen($this->cache_file, 'w'))		{			fwrite($fp, "<?php\nif (!defined('IN_PHPBB')) exit;\n\$this->queue_data = unserialize(" . var_export(serialize($this->data), true) . ");\n\n?>");			fclose($fp);			phpbb_chmod($this->cache_file, CHMOD_READ | CHMOD_WRITE);		}		$this->unlock($lock_fp);	}}/*** Replacement or substitute for PHP's mail command*/function smtpmail($addresses, $subject, $message, &$err_msg, $headers = false){	global $config, $user;	// Fix any bare linefeeds in the message to make it RFC821 Compliant.	$message = preg_replace("#(?<!\r)\n#si", "\r\n", $message);	if ($headers !== false)	{		if (!is_array($headers))		{			// Make sure there are no bare linefeeds in the headers			$headers = preg_replace('#(?<!\r)\n#si', "\n", $headers);			$headers = explode("\n", $headers);		}		// Ok this is rather confusing all things considered,		// but we have to grab bcc and cc headers and treat them differently		// Something we really didn't take into consideration originally		$headers_used = array();		foreach ($headers as $header)		{			if (strpos(strtolower($header), 'cc:') === 0 || strpos(strtolower($header), 'bcc:') === 0)			{				continue;			}			$headers_used[] = trim($header);		}		$headers = chop(implode("\r\n", $headers_used));	}	if (trim($subject) == '')	{		$err_msg = (isset($user->lang['NO_EMAIL_SUBJECT'])) ? $user->lang['NO_EMAIL_SUBJECT'] : 'No email subject specified';		return false;	}	if (trim($message) == '')	{		$err_msg = (isset($user->lang['NO_EMAIL_MESSAGE'])) ? $user->lang['NO_EMAIL_MESSAGE'] : 'Email message was blank';		return false;	}	$mail_rcpt = $mail_to = $mail_cc = array();	// Build correct addresses for RCPT TO command and the client side display (TO, CC)	if (isset($addresses['to']) && sizeof($addresses['to']))	{		foreach ($addresses['to'] as $which_ary)		{			$mail_to[] = ($which_ary['name'] != '') ? mail_encode(trim($which_ary['name'])) . ' <' . trim($which_ary['email']) . '>' : '<' . trim($which_ary['email']) . '>';			$mail_rcpt['to'][] = '<' . trim($which_ary['email']) . '>';		}	}	if (isset($addresses['bcc']) && sizeof($addresses['bcc']))	{		foreach ($addresses['bcc'] as $which_ary)		{			$mail_rcpt['bcc'][] = '<' . trim($which_ary['email']) . '>';		}	}	if (isset($addresses['cc']) && sizeof($addresses['cc']))	{		foreach ($addresses['cc'] as $which_ary)		{			$mail_cc[] = ($which_ary['name'] != '') ? mail_encode(trim($which_ary['name'])) . ' <' . trim($which_ary['email']) . '>' : '<' . trim($which_ary['email']) . '>';			$mail_rcpt['cc'][] = '<' . trim($which_ary['email']) . '>';		}	}	$smtp = new smtp_class();	$errno = 0;	$errstr = '';	$smtp->add_backtrace('Connecting to ' . $config['smtp_host'] . ':' . $config['smtp_port']);	// Ok we have error checked as much as we can to this point let's get on it already.	if (!class_exists('phpbb_error_collector'))	{		global $phpbb_root_path, $phpEx;		include($phpbb_root_path . 'includes/error_collector.' . $phpEx);	}	$collector = new phpbb_error_collector;	$collector->install();	$smtp->socket = fsockopen($config['smtp_host'], $config['smtp_port'], $errno, $errstr, 20);	$collector->uninstall();	$error_contents = $collector->format_errors();	if (!$smtp->socket)	{		if ($errstr)		{			$errstr = utf8_convert_message($errstr);		}		$err_msg = (isset($user->lang['NO_CONNECT_TO_SMTP_HOST'])) ? sprintf($user->lang['NO_CONNECT_TO_SMTP_HOST'], $errno, $errstr) : "Could not connect to smtp host : $errno : $errstr";		$err_msg .= ($error_contents) ? '<br /><br />' . htmlspecialchars($error_contents) : '';		return false;	}	// Wait for reply	if ($err_msg = $smtp->server_parse('220', __LINE__))	{		$smtp->close_session($err_msg);		return false;	}	// Let me in. This function handles the complete authentication process	if ($err_msg = $smtp->log_into_server($config['smtp_host'], $config['smtp_username'], $config['smtp_password'], $config['smtp_auth_method']))	{		$smtp->close_session($err_msg);		return false;	}	// From this point onward most server response codes should be 250	// Specify who the mail is from....	$smtp->server_send('MAIL FROM:<' . $config['board_email'] . '>');	if ($err_msg = $smtp->server_parse('250', __LINE__))	{		$smtp->close_session($err_msg);		return false;	}	// Specify each user to send to and build to header.	$to_header = implode(', ', $mail_to);	$cc_header = implode(', ', $mail_cc);	// Now tell the MTA to send the Message to the following people... [TO, BCC, CC]	$rcpt = false;	foreach ($mail_rcpt as $type => $mail_to_addresses)	{		foreach ($mail_to_addresses as $mail_to_address)		{			// Add an additional bit of error checking to the To field.			if (preg_match('#[^ ]+\@[^ ]+#', $mail_to_address))			{				$smtp->server_send("RCPT TO:$mail_to_address");				if ($err_msg = $smtp->server_parse('250', __LINE__))				{					// We continue... if users are not resolved we do not care					if ($smtp->numeric_response_code != 550)					{						$smtp->close_session($err_msg);						return false;					}				}				else				{					$rcpt = true;				}			}		}	}	// We try to send messages even if a few people do not seem to have valid email addresses, but if no one has, we have to exit here.	if (!$rcpt)	{		$user->session_begin();		$err_msg .= '<br /><br />';		$err_msg .= (isset($user->lang['INVALID_EMAIL_LOG'])) ? sprintf($user->lang['INVALID_EMAIL_LOG'], htmlspecialchars($mail_to_address)) : '<strong>' . htmlspecialchars($mail_to_address) . '</strong> possibly an invalid email address?';		$smtp->close_session($err_msg);		return false;	}	// Ok now we tell the server we are ready to start sending data	$smtp->server_send('DATA');	// This is the last response code we look for until the end of the message.	if ($err_msg = $smtp->server_parse('354', __LINE__))	{		$smtp->close_session($err_msg);		return false;	}	// Send the Subject Line...	$smtp->server_send("Subject: $subject");	// Now the To Header.	$to_header = ($to_header == '') ? 'undisclosed-recipients:;' : $to_header;	$smtp->server_send("To: $to_header");	// Now the CC Header.	if ($cc_header != '')	{		$smtp->server_send("CC: $cc_header");	}	// Now any custom headers....	if ($headers !== false)	{		$smtp->server_send("$headers\r\n");	}	// Ok now we are ready for the message...	$smtp->server_send($message);	// Ok the all the ingredients are mixed in let's cook this puppy...	$smtp->server_send('.');	if ($err_msg = $smtp->server_parse('250', __LINE__))	{		$smtp->close_session($err_msg);		return false;	}	// Now tell the server we are done and close the socket...	$smtp->server_send('QUIT');	$smtp->close_session($err_msg);	return true;}/*** SMTP Class* Auth Mechanisms originally taken from the AUTH Modules found within the PHP Extension and Application Repository (PEAR)* See docs/AUTHORS for more details* @package phpBB3*/class smtp_class{	var $server_response = '';	var $socket = 0;	var $responses = array();	var $commands = array();	var $numeric_response_code = 0;	var $backtrace = false;	var $backtrace_log = array();	function smtp_class()	{		// Always create a backtrace for admins to identify SMTP problems		$this->backtrace = true;		$this->backtrace_log = array();	}	/**	* Add backtrace message for debugging	*/	function add_backtrace($message)	{		if ($this->backtrace)		{			$this->backtrace_log[] = utf8_htmlspecialchars($message);		}	}	/**	* Send command to smtp server	*/	function server_send($command, $private_info = false)	{		fputs($this->socket, $command . "\r\n");		(!$private_info) ? $this->add_backtrace("# $command") : $this->add_backtrace('# Omitting sensitive information');		// We could put additional code here	}	/**	* We use the line to give the support people an indication at which command the error occurred	*/	function server_parse($response, $line)	{		global $user;		$this->server_response = '';		$this->responses = array();		$this->numeric_response_code = 0;		while (substr($this->server_response, 3, 1) != ' ')		{			if (!($this->server_response = fgets($this->socket, 256)))			{				return (isset($user->lang['NO_EMAIL_RESPONSE_CODE'])) ? $user->lang['NO_EMAIL_RESPONSE_CODE'] : 'Could not get mail server response codes';			}			$this->responses[] = substr(rtrim($this->server_response), 4);			$this->numeric_response_code = (int) substr($this->server_response, 0, 3);			$this->add_backtrace("LINE: $line <- {$this->server_response}");		}		if (!(substr($this->server_response, 0, 3) == $response))		{			$this->numeric_response_code = (int) substr($this->server_response, 0, 3);			return (isset($user->lang['EMAIL_SMTP_ERROR_RESPONSE'])) ? sprintf($user->lang['EMAIL_SMTP_ERROR_RESPONSE'], $line, $this->server_response) : "Ran into problems sending Mail at <strong>Line $line</strong>. Response: $this->server_response";		}		return 0;	}	/**	* Close session	*/	function close_session(&$err_msg)	{		fclose($this->socket);		if ($this->backtrace)		{			$message = '<h1>Backtrace</h1><p>' . implode('<br />', $this->backtrace_log) . '</p>';			$err_msg .= $message;		}	}	/**	* Log into server and get possible auth codes if neccessary	*/	function log_into_server($hostname, $username, $password, $default_auth_method)	{		global $user;		$err_msg = '';		// Here we try to determine the *real* hostname (reverse DNS entry preferrably)		$local_host = $user->host;		if (function_exists('php_uname'))		{			$local_host = php_uname('n');			// Able to resolve name to IP			if (($addr = @gethostbyname($local_host)) !== $local_host)			{				// Able to resolve IP back to name				if (($name = @gethostbyaddr($addr)) !== $addr)				{					$local_host = $name;				}			}		}		// If we are authenticating through pop-before-smtp, we		// have to login ones before we get authenticated		// NOTE: on some configurations the time between an update of the auth database takes so		// long that the first email send does not work. This is not a biggie on a live board (only		// the install mail will most likely fail) - but on a dynamic ip connection this might produce		// severe problems and is not fixable!		if ($default_auth_method == 'POP-BEFORE-SMTP' && $username && $password)		{			global $config;			$errno = 0;			$errstr = '';			$this->server_send("QUIT");			fclose($this->socket);			$result = $this->pop_before_smtp($hostname, $username, $password);			$username = $password = $default_auth_method = '';			// We need to close the previous session, else the server is not			// able to get our ip for matching...			if (!$this->socket = @fsockopen($config['smtp_host'], $config['smtp_port'], $errno, $errstr, 10))			{				if ($errstr)				{					$errstr = utf8_convert_message($errstr);				}				$err_msg = (isset($user->lang['NO_CONNECT_TO_SMTP_HOST'])) ? sprintf($user->lang['NO_CONNECT_TO_SMTP_HOST'], $errno, $errstr) : "Could not connect to smtp host : $errno : $errstr";				return $err_msg;			}			// Wait for reply			if ($err_msg = $this->server_parse('220', __LINE__))			{				$this->close_session($err_msg);				return $err_msg;			}		}		// Try EHLO first		$this->server_send("EHLO {$local_host}");		if ($err_msg = $this->server_parse('250', __LINE__))		{			// a 503 response code means that we're already authenticated			if ($this->numeric_response_code == 503)			{				return false;			}			// If EHLO fails, we try HELO			$this->server_send("HELO {$local_host}");			if ($err_msg = $this->server_parse('250', __LINE__))			{				return ($this->numeric_response_code == 503) ? false : $err_msg;			}		}		foreach ($this->responses as $response)		{			$response = explode(' ', $response);			$response_code = $response[0];			unset($response[0]);			$this->commands[$response_code] = implode(' ', $response);		}		// If we are not authenticated yet, something might be wrong if no username and passwd passed		if (!$username || !$password)		{			return false;		}		if (!isset($this->commands['AUTH']))		{			return (isset($user->lang['SMTP_NO_AUTH_SUPPORT'])) ? $user->lang['SMTP_NO_AUTH_SUPPORT'] : 'SMTP server does not support authentication';		}		// Get best authentication method		$available_methods = explode(' ', $this->commands['AUTH']);		// Define the auth ordering if the default auth method was not found		$auth_methods = array('PLAIN', 'LOGIN', 'CRAM-MD5', 'DIGEST-MD5');		$method = '';		if (in_array($default_auth_method, $available_methods))		{			$method = $default_auth_method;		}		else		{			foreach ($auth_methods as $_method)			{				if (in_array($_method, $available_methods))				{					$method = $_method;					break;				}			}		}		if (!$method)		{			return (isset($user->lang['NO_SUPPORTED_AUTH_METHODS'])) ? $user->lang['NO_SUPPORTED_AUTH_METHODS'] : 'No supported authentication methods';		}		$method = strtolower(str_replace('-', '_', $method));		return $this->$method($username, $password);	}	/**	* Pop before smtp authentication	*/	function pop_before_smtp($hostname, $username, $password)	{		global $user;		if (!$this->socket = @fsockopen($hostname, 110, $errno, $errstr, 10))		{			if ($errstr)			{				$errstr = utf8_convert_message($errstr);			}			return (isset($user->lang['NO_CONNECT_TO_SMTP_HOST'])) ? sprintf($user->lang['NO_CONNECT_TO_SMTP_HOST'], $errno, $errstr) : "Could not connect to smtp host : $errno : $errstr";		}		$this->server_send("USER $username", true);		if ($err_msg = $this->server_parse('+OK', __LINE__))		{			return $err_msg;		}		$this->server_send("PASS $password", true);		if ($err_msg = $this->server_parse('+OK', __LINE__))		{			return $err_msg;		}		$this->server_send('QUIT');		fclose($this->socket);		return false;	}	/**	* Plain authentication method	*/	function plain($username, $password)	{		$this->server_send('AUTH PLAIN');		if ($err_msg = $this->server_parse('334', __LINE__))		{			return ($this->numeric_response_code == 503) ? false : $err_msg;		}		$base64_method_plain = base64_encode("\0" . $username . "\0" . $password);		$this->server_send($base64_method_plain, true);		if ($err_msg = $this->server_parse('235', __LINE__))		{			return $err_msg;		}		return false;	}	/**	* Login authentication method	*/	function login($username, $password)	{		$this->server_send('AUTH LOGIN');		if ($err_msg = $this->server_parse('334', __LINE__))		{			return ($this->numeric_response_code == 503) ? false : $err_msg;		}		$this->server_send(base64_encode($username), true);		if ($err_msg = $this->server_parse('334', __LINE__))		{			return $err_msg;		}		$this->server_send(base64_encode($password), true);		if ($err_msg = $this->server_parse('235', __LINE__))		{			return $err_msg;		}		return false;	}	/**	* cram_md5 authentication method	*/	function cram_md5($username, $password)	{		$this->server_send('AUTH CRAM-MD5');		if ($err_msg = $this->server_parse('334', __LINE__))		{			return ($this->numeric_response_code == 503) ? false : $err_msg;		}		$md5_challenge = base64_decode($this->responses[0]);		$password = (strlen($password) > 64) ? pack('H32', md5($password)) : ((strlen($password) < 64) ? str_pad($password, 64, chr(0)) : $password);		$md5_digest = md5((substr($password, 0, 64) ^ str_repeat(chr(0x5C), 64)) . (pack('H32', md5((substr($password, 0, 64) ^ str_repeat(chr(0x36), 64)) . $md5_challenge))));		$base64_method_cram_md5 = base64_encode($username . ' ' . $md5_digest);		$this->server_send($base64_method_cram_md5, true);		if ($err_msg = $this->server_parse('235', __LINE__))		{			return $err_msg;		}		return false;	}	/**	* digest_md5 authentication method	* A real pain in the ***	*/	function digest_md5($username, $password)	{		global $config, $user;		$this->server_send('AUTH DIGEST-MD5');		if ($err_msg = $this->server_parse('334', __LINE__))		{			return ($this->numeric_response_code == 503) ? false : $err_msg;		}		$md5_challenge = base64_decode($this->responses[0]);		// Parse the md5 challenge - from AUTH_SASL (PEAR)		$tokens = array();		while (preg_match('/^([a-z-]+)=("[^"]+(?<!\\\)"|[^,]+)/i', $md5_challenge, $matches))		{			// Ignore these as per rfc2831			if ($matches[1] == 'opaque' || $matches[1] == 'domain')			{				$md5_challenge = substr($md5_challenge, strlen($matches[0]) + 1);				continue;			}			// Allowed multiple "realm" and "auth-param"			if (!empty($tokens[$matches[1]]) && ($matches[1] == 'realm' || $matches[1] == 'auth-param'))			{				if (is_array($tokens[$matches[1]]))				{					$tokens[$matches[1]][] = preg_replace('/^"(.*)"$/', '\\1', $matches[2]);				}				else				{					$tokens[$matches[1]] = array($tokens[$matches[1]], preg_replace('/^"(.*)"$/', '\\1', $matches[2]));				}			}			else if (!empty($tokens[$matches[1]])) // Any other multiple instance = failure			{				$tokens = array();				break;			}			else			{				$tokens[$matches[1]] = preg_replace('/^"(.*)"$/', '\\1', $matches[2]);			}			// Remove the just parsed directive from the challenge			$md5_challenge = substr($md5_challenge, strlen($matches[0]) + 1);		}		// Realm		if (empty($tokens['realm']))		{			$tokens['realm'] = (function_exists('php_uname')) ? php_uname('n') : $user->host;		}		// Maxbuf		if (empty($tokens['maxbuf']))		{			$tokens['maxbuf'] = 65536;		}		// Required: nonce, algorithm		if (empty($tokens['nonce']) || empty($tokens['algorithm']))		{			$tokens = array();		}		$md5_challenge = $tokens;		if (!empty($md5_challenge))		{			$str = '';			for ($i = 0; $i < 32; $i++)			{				$str .= chr(mt_rand(0, 255));			}			$cnonce = base64_encode($str);			$digest_uri = 'smtp/' . $config['smtp_host'];			$auth_1 = sprintf('%s:%s:%s', pack('H32', md5(sprintf('%s:%s:%s', $username, $md5_challenge['realm'], $password))), $md5_challenge['nonce'], $cnonce);			$auth_2 = 'AUTHENTICATE:' . $digest_uri;			$response_value = md5(sprintf('%s:%s:00000001:%s:auth:%s', md5($auth_1), $md5_challenge['nonce'], $cnonce, md5($auth_2)));			$input_string = sprintf('username="%s",realm="%s",nonce="%s",cnonce="%s",nc="00000001",qop=auth,digest-uri="%s",response=%s,%d', $username, $md5_challenge['realm'], $md5_challenge['nonce'], $cnonce, $digest_uri, $response_value, $md5_challenge['maxbuf']);		}		else		{			return (isset($user->lang['INVALID_DIGEST_CHALLENGE'])) ? $user->lang['INVALID_DIGEST_CHALLENGE'] : 'Invalid digest challenge';		}		$base64_method_digest_md5 = base64_encode($input_string);		$this->server_send($base64_method_digest_md5, true);		if ($err_msg = $this->server_parse('334', __LINE__))		{			return $err_msg;		}		$this->server_send(' ');		if ($err_msg = $this->server_parse('235', __LINE__))		{			return $err_msg;		}		return false;	}}/*** Encodes the given string for proper display in UTF-8.** This version is using base64 encoded data. The downside of this* is if the mail client does not understand this encoding the user* is basically doomed with an unreadable subject.** Please note that this version fully supports RFC 2045 section 6.8.** @param string $eol End of line we are using (optional to be backwards compatible)*/function mail_encode($str, $eol = "\r\n"){	// define start delimimter, end delimiter and spacer	$start = "=?UTF-8?B?";	$end = "?=";	$delimiter = "$eol ";	// Maximum length is 75. $split_length *must* be a multiple of 4, but <= 75 - strlen($start . $delimiter . $end)!!!	$split_length = 60;	$encoded_str = base64_encode($str);	// If encoded string meets the limits, we just return with the correct data.	if (strlen($encoded_str) <= $split_length)	{		return $start . $encoded_str . $end;	}	// If there is only ASCII data, we just return what we want, correctly splitting the lines.	if (strlen($str) === utf8_strlen($str))	{		return $start . implode($end . $delimiter . $start, str_split($encoded_str, $split_length)) . $end;	}	// UTF-8 data, compose encoded lines	$array = utf8_str_split($str);	$str = '';	while (sizeof($array))	{		$text = '';		while (sizeof($array) && intval((strlen($text . $array[0]) + 2) / 3) << 2 <= $split_length)		{			$text .= array_shift($array);		}		$str .= $start . base64_encode($text) . $end . $delimiter;	}	return substr($str, 0, -strlen($delimiter));}/*** Wrapper for sending out emails with the PHP's mail function*/function phpbb_mail($to, $subject, $msg, $headers, $eol, &$err_msg){	global $config, $phpbb_root_path, $phpEx;	// We use the EOL character for the OS here because the PHP mail function does not correctly transform line endings. On Windows SMTP is used (SMTP is \r\n), on UNIX a command is used...	// Reference: http://bugs.php.net/bug.php?id=15841	$headers = implode($eol, $headers);	if (!class_exists('phpbb_error_collector'))	{		include($phpbb_root_path . 'includes/error_collector.' . $phpEx);	}	$collector = new phpbb_error_collector;	$collector->install();	// On some PHP Versions mail() *may* fail if there are newlines within the subject.	// Newlines are used as a delimiter for lines in mail_encode() according to RFC 2045 section 6.8.	// Because PHP can't decide what is wanted we revert back to the non-RFC-compliant way of separating by one space (Use '' as parameter to mail_encode() results in SPACE used)	$result = $config['email_function_name']($to, mail_encode($subject, ''), wordwrap(utf8_wordwrap($msg), 997, "\n", true), $headers);	$collector->uninstall();	$err_msg = $collector->format_errors();	return $result;}?>
<?php/**** @package phpBB* @version $Id$* @copyright (c) 2011 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @ignore*/if (!defined('IN_PHPBB')){	exit;}class phpbb_error_collector{	var $errors;	function phpbb_error_collector()	{		$this->errors = array();	}	function install()	{		set_error_handler(array(&$this, 'error_handler'));	}	function uninstall()	{		restore_error_handler();	}	function error_handler($errno, $msg_text, $errfile, $errline)	{		$this->errors[] = array($errno, $msg_text, $errfile, $errline);	}	function format_errors()	{		$text = '';		foreach ($this->errors as $error)		{			if (!empty($text))			{				$text .= "<br />\n";			}			list($errno, $msg_text, $errfile, $errline) = $error;			// Prevent leakage of local path to phpBB install			$errfile = phpbb_filter_root_path($errfile);			$text .= "Errno $errno: $msg_text at $errfile line $errline";		}		return $text;	}}
<?php/**** help_faq [English]** @package language* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//***/if (!defined('IN_PHPBB')){	exit;}// DEVELOPERS PLEASE NOTE//// All language files should use UTF-8 as their encoding and the files must not contain a BOM.//// Placeholders can now contain order information, e.g. instead of// 'Page %s of %s' you can (and should) write 'Page %1$s of %2$s', this allows// translators to re-order the output of data while ensuring it remains correct//// You do not need this where single placeholders are used, e.g. 'Message %d' is fine// equally where a string contains only two placeholders which are used to wrap text// in a url you again do not need to specify an order e.g., 'Click %sHERE%s' is fine$help = array(	array(		0 => '--',		1 => 'Login and Registration Issues'	),	array(		0 => 'Why cant I login?',		1 => 'There are several reasons why this could occur. First, ensure your username and password are correct. If they are, contact the board owner to make sure you havent been banned. It is also possible the website owner has a configuration error on their end, and they would need to fix it.'	),	array(		0 => 'Why do I need to register at all?',		1 => 'You may not have to, it is up to the administrator of the board as to whether you need to register in order to post messages. However; registration will give you access to additional features not available to guest users such as definable avatar images, private messaging, emailing of fellow users, usergroup subscription, etc. It only takes a few moments to register so it is recommended you do so.'	),	array(		0 => 'Why do I get logged off automatically?',		1 => 'If you do not check the <em>Log me in automatically</em> box when you login, the board will only keep you logged in for a preset time. This prevents misuse of your account by anyone else. To stay logged in, check the box during login. This is not recommended if you access the board from a shared computer, e.g. library, internet cafe, university computer lab, etc. If you do not see this checkbox, it means the board administrator has disabled this feature.'	),	array(		0 => 'How do I prevent my username appearing in the online user listings?',		1 => 'Within your User Control Panel, under Board preferences, you will find the option <em>Hide your online status</em>. Enable this option with <samp>Yes</samp> and you will only appear to the administrators, moderators and yourself. You will be counted as a hidden user.'	),	array(		0 => 'Ive lost my password!',		1 => 'Dont panic! While your password cannot be retrieved, it can easily be reset. Visit the login page and click <em>Ive forgotten my password</em>. Follow the instructions and you should be able to log in again shortly.'	),	array(		0 => 'I registered but cannot login!',		1 => 'First, check your username and password. If they are correct, then one of two things may have happened. If COPPA support is enabled and you specified being under 13 years old during registration, you will have to follow the instructions you received. Some boards will also require new registrations to be activated, either by yourself or by an administrator before you can logon; this information was present during registration. If you were sent an e-mail, follow the instructions. If you did not receive an e-mail, you may have provided an incorrect e-mail address or the e-mail may have been picked up by a spam filer. If you are sure the e-mail address you provided is correct, try contacting an administrator.'	),	array(		0 => 'I registered in the past but cannot login any more?!',		1 => 'It is possible an administrator has deactivated or deleted your account for some reason. Also, many boards periodically remove users who have not posted for a long time to reduce the size of the database. If this has happened, try registering again and being more involved in discussions.'	),	array(		0 => 'What is COPPA?',		1 => 'COPPA, or the Child Online Privacy and Protection Act of 1998, is a law in the United States requiring websites which can potentially collect information from minors under the age of 13 to have written parental consent or some other method of legal guardian acknowledgment, allowing the collection of personally identifiable information from a minor under the age of 13. If you are unsure if this applies to you as someone trying to register or to the website you are trying to register on, contact legal counsel for assistance. Please note that the phpBB Group cannot provide legal advice and is not a point of contact for legal concerns of any kind, except as outlined below.',	),	array(		0 => 'Why cant I register?',		1 => 'It is possible the website owner has banned your IP address or disallowed the username you are attempting to register. The website owner could have also disabled registration to prevent new visitors from signing up. Contact a board administrator for assistance.',	),	array(		0 => 'What does the Delete all board cookies do?',		1 => 'Delete all board cookies deletes the cookies created by phpBB which keep you authenticated and logged into the board. It also provides functions such as read tracking if they have been enabled by the board owner. If you are having login or logout problems, deleting board cookies may help.',	),	array(		0 => '--',		1 => 'User Preferences and settings'	),	array(		0 => 'How do I change my settings?',		1 => 'If you are a registered user, all your settings are stored in the board database. To alter them, visit your User Control Panel; a link can usually be found at the top of board pages. This system will allow you to change all your settings and preferences.'	),	array(		0 => 'The times are not correct!',		1 => 'It is possible the time displayed is from a timezone different from the one you are in. If this is the case, visit your User Control Panel and change your timezone to match your particular area, e.g. London, Paris, New York, Sydney, etc. Please note that changing the timezone, like most settings, can only be done by registered users. If you are not registered, this is a good time to do so.'	),	array(		0 => 'I changed the timezone and the time is still wrong!',		1 => 'If you are sure you have set the timezone and Summer Time/DST correctly and the time is still incorrect, then the time stored on the server clock is incorrect. Please notify an administrator to correct the problem.'	),	array(		0 => 'My language is not in the list!',		1 => 'Either the administrator has not installed your language or nobody has translated this board into your language. Try asking the board administrator if they can install the language pack you need. If the language pack does not exist, feel free to create a new translation. More information can be found at the phpBB website (see link at the bottom of board pages).'	),	array(		0 => 'How do I show an image along with my username?',		1 => 'There are two images which may appear along with a username when viewing posts. One of them may be an image associated with your rank, generally in the form of stars, blocks or dots, indicating how many posts you have made or your status on the board. Another, usually a larger image, is known as an avatar and is generally unique or personal to each user. It is up to the board administrator to enable avatars and to choose the way in which avatars can be made available. If you are unable to use avatars, contact a board administrator and ask them for their reasons.'	),	array(		0 => 'What is my rank and how do I change it?',		1 => 'Ranks, which appear below your username, indicate the number of posts you have made or identify certain users, e.g. moderators and administrators. In general, you cannot directly change the wording of any board ranks as they are set by the board administrator. Please do not abuse the board by posting unnecessarily just to increase your rank. Most boards will not tolerate this and the moderator or administrator will simply lower your post count.'	),	array(		0 => 'When I click the e-mail link for a user it asks me to login?',		1 => 'Only registered users can send e-mail to other users via the built-in e-mail form, and only if the administrator has enabled this feature. This is to prevent malicious use of the e-mail system by anonymous users.'	),	array(		0 => '--',		1 => 'Posting Issues'	),	array(		0 => 'How do I post a topic in a forum?',		1 => 'To post a new topic in a forum, click the relevant button on either the forum or topic screens. You may need to register before you can post a message. A list of your permissions in each forum is available at the bottom of the forum and topic screens. Example: You can post new topics, You can vote in polls, etc.'	),	array(		0 => 'How do I edit or delete a post?',		1 => 'Unless you are a board administrator or moderator, you can only edit or delete your own posts. You can edit a post by clicking the edit button for the relevant post, sometimes for only a limited time after the post was made. If someone has already replied to the post, you will find a small piece of text output below the post when you return to the topic which lists the number of times you edited it along with the date and time. This will only appear if someone has made a reply; it will not appear if a moderator or administrator edited the post, though they may leave a note as to why theyve edited the post at their own discretion. Please note that normal users cannot delete a post once someone has replied.'	),	array(		0 => 'How do I add a signature to my post?',		1 => 'To add a signature to a post you must first create one via your User Control Panel. Once created, you can check the <em>Attach a signature</em> box on the posting form to add your signature. You can also add a signature by default to all your posts by checking the appropriate radio button in your profile. If you do so, you can still prevent a signature being added to individual posts by un-checking the add signature box within the posting form.'	),	array(		0 => 'How do I create a poll?',		1 => 'When posting a new topic or editing the first post of a topic, click the Poll creation tab below the main posting form; if you cannot see this, you do not have appropriate permissions to create polls. Enter a title and at least two options in the appropriate fields, making sure each option is on a separate line in the textarea. You can also set the number of options users may select during voting under Options per user, a time limit in days for the poll (0 for infinite duration) and lastly the option to allow users to amend their votes.'	),	array(		0 => 'Why cant I add more poll options?',		1 => 'The limit for poll options is set by the board administrator. If you feel you need to add more options to your poll than the allowed amount, contact the board administrator.'	),	array(		0 => 'How do I edit or delete a poll?',		1 => 'As with posts, polls can only be edited by the original poster, a moderator or an administrator. To edit a poll, click to edit the first post in the topic; this always has the poll associated with it. If no one has cast a vote, users can delete the poll or edit any poll option. However, if members have already placed votes, only moderators or administrators can edit or delete it. This prevents the polls options from being changed mid-way through a poll.'	),	array(		0 => 'Why cant I access a forum?',		1 => 'Some forums may be limited to certain users or groups. To view, read, post or perform another action you may need special permissions. Contact a moderator or board administrator to grant you access.'	),	array(		0 => 'Why cant I add attachments?',		1 => 'Attachment permissions are granted on a per forum, per group, or per user basis. The board administrator may not have allowed attachments to be added for the specific forum you are posting in, or perhaps only certain groups can post attachments. Contact the board administrator if you are unsure about why you are unable to add attachments.'	),	array(		0 => 'Why did I receive a warning?',		1 => 'Each board administrator has their own set of rules for their site. If you have broken a rule, you may be issued a warning. Please note that this is the board administrators decision, and the phpBB Group has nothing to do with the warnings on the given site. Contact the board administrator if you are unsure about why you were issued a warning.'	),	array(		0 => 'How can I report posts to a moderator?',		1 => 'If the board administrator has allowed it, you should see a button for reporting posts next to the post you wish to report. Clicking this will walk you through the steps necessary to report the post.'	),	array(		0 => 'What is the Save button for in topic posting?',		1 => 'This allows you to save passages to be completed and submitted at a later date. To reload a saved passage, visit the User Control Panel.'	),	array(		0 => 'Why does my post need to be approved?',		1 => 'The board administrator may have decided that posts in the forum you are posting to require review before submission. It is also possible that the administrator has placed you in a group of users whose posts require review before submission. Please contact the board administrator for further details.'	),	array(		0 => 'How do I bump my topic?',		1 => 'By clicking the Bump topic link when you are viewing it, you can bump the topic to the top of the forum on the first page. However, if you do not see this, then topic bumping may be disabled or the time allowance between bumps has not yet been reached. It is also possible to bump the topic simply by replying to it, however, be sure to follow the board rules when doing so.'	),	array(		0 => '--',		1 => 'Formatting and Topic Types'	),	array(		0 => 'What is BBCode?',		1 => 'BBCode is a special implementation of HTML, offering great formatting control on particular objects in a post. The use of BBCode is granted by the administrator, but it can also be disabled on a per post basis from the posting form. BBCode itself is similar in style to HTML, but tags are enclosed in square brackets [ and ] rather than &lt; and &gt;. For more information on BBCode see the guide which can be accessed from the posting page.'	),	array(		0 => 'Can I use HTML?',		1 => 'No. It is not possible to post HTML on this board and have it rendered as HTML. Most formatting which can be carried out using HTML can be applied using BBCode instead.'	),	array(		0 => 'What are Smilies?',		1 => 'Smilies, or Emoticons, are small images which can be used to express a feeling using a short code, e.g. :) denotes happy, while :( denotes sad. The full list of emoticons can be seen in the posting form. Try not to overuse smilies, however, as they can quickly render a post unreadable and a moderator may edit them out or remove the post altogether. The board administrator may also have set a limit to the number of smilies you may use within a post.'	),	array(		0 => 'Can I post images?',		1 => 'Yes, images can be shown in your posts. If the administrator has allowed attachments, you may be able to upload the image to the board. Otherwise, you must link to an image stored on a publicly accessible web server, e.g. http://www.example.com/my-picture.gif. You cannot link to pictures stored on your own PC (unless it is a publicly accessible server) nor images stored behind authentication mechanisms, e.g. hotmail or yahoo mailboxes, password protected sites, etc. To display the image use the BBCode [img] tag.'	),	array(		0 => 'What are global announcements?',		1 => 'Global announcements contain important information and you should read them whenever possible. They will appear at the top of every forum and within your User Control Panel. Global announcement permissions are granted by the board administrator.'	),	array(		0 => 'What are announcements?',		1 => 'Announcements often contain important information for the forum you are currently reading and you should read them whenever possible. Announcements appear at the top of every page in the forum to which they are posted. As with global announcements, announcement permissions are granted by the board administrator.'	),	array(		0 => 'What are sticky topics?',		1 => 'Sticky topics within the forum appear below announcements and only on the first page. They are often quite important so you should read them whenever possible. As with announcements and global announcements, sticky topic permissions are granted by the board administrator.'	),	array(		0 => 'What are locked topics?',		1 => 'Locked topics are topics where users can no longer reply and any poll it contained was automatically ended. Topics may be locked for many reasons and were set this way by either the forum moderator or board administrator. You may also be able to lock your own topics depending on the permissions you are granted by the board administrator.'	),	array(		0 => 'What are topic icons?',		1 => 'Topic icons are author chosen images associated with posts to indicate their content. The ability to use topic icons depends on the permissions set by the board administrator.'	),	// This block will switch the FAQ-Questions to the second template column	array(		0 => '--',		1 => '--'	),	array(		0 => '--',		1 => 'User Levels and Groups'	),	array(		0 => 'What are Administrators?',		1 => 'Administrators are members assigned with the highest level of control over the entire board. These members can control all facets of board operation, including setting permissions, banning users, creating usergroups or moderators, etc., dependent upon the board founder and what permissions he or she has given the other administrators. They may also have full moderator capabilities in all forums, depending on the settings put forth by the board founder.'	),	array(		0 => 'What are Moderators?',		1 => 'Moderators are individuals (or groups of individuals) who look after the forums from day to day. They have the authority to edit or delete posts and lock, unlock, move, delete and split topics in the forum they moderate. Generally, moderators are present to prevent users from going off-topic or posting abusive or offensive material.'	),	array(		0 => 'What are usergroups?',		1 => 'Usergroups are groups of users that divide the community into manageable sections board administrators can work with. Each user can belong to several groups and each group can be assigned individual permissions. This provides an easy way for administrators to change permissions for many users at once, such as changing moderator permissions or granting users access to a private forum.'	),	array(		0 => 'Where are the usergroups and how do I join one?',		1 => 'You can view all usergroups via the Usergroups link within your User Control Panel. If you would like to join one, proceed by clicking the appropriate button. Not all groups have open access, however. Some may require approval to join, some may be closed and some may even have hidden memberships. If the group is open, you can join it by clicking the appropriate button. If a group requires approval to join you may request to join by clicking the appropriate button. The user group leader will need to approve your request and may ask why you want to join the group. Please do not harass a group leader if they reject your request; they will have their reasons.'	),	array(		0 => 'How do I become a usergroup leader?',		1 => 'A usergroup leader is usually assigned when usergroups are initially created by a board administrator. If you are interested in creating a usergroup, your first point of contact should be an administrator; try sending a private message.',	),	array(		0 => 'Why do some usergroups appear in a different colour?',		1 => 'It is possible for the board administrator to assign a colour to the members of a usergroup to make it easy to identify the members of this group.'	),	array(		0 => 'What is a Default usergroup?',		1 => 'If you are a member of more than one usergroup, your default is used to determine which group colour and group rank should be shown for you by default. The board administrator may grant you permission to change your default usergroup via your User Control Panel.'	),	array(		0 => 'What is The team link?',		1 => 'This page provides you with a list of board staff, including board administrators and moderators and other details such as the forums they moderate.'	),	array(		0 => '--',		1 => 'Private Messaging'	),	array(		0 => 'I cannot send private messages!',		1 => 'There are three reasons for this; you are not registered and/or not logged on, the board administrator has disabled private messaging for the entire board, or the board administrator has prevented you from sending messages. Contact a board administrator for more information.'	),	array(		0 => 'I keep getting unwanted private messages!',		1 => 'You can block a user from sending you private messages by using message rules within your User Control Panel. If you are receiving abusive private messages from a particular user, inform a board administrator; they have the power to prevent a user from sending private messages.'	),	array(		0 => 'I have received a spamming or abusive e-mail from someone on this board!',		1 => 'We are sorry to hear that. The e-mail form feature of this board includes safeguards to try and track users who send such posts, so e-mail the board administrator with a full copy of the e-mail you received. It is very important that this includes the headers that contain the details of the user that sent the e-mail. The board administrator can then take action.'	),	array(		0 => '--',		1 => 'Friends and Foes'	),	array(		0 => 'What are my Friends and Foes lists?',		1 => 'You can use these lists to organise other members of the board. Members added to your friends list will be listed within your User Control Panel for quick access to see their online status and to send them private messages. Subject to template support, posts from these users may also be highlighted. If you add a user to your foes list, any posts they make will be hidden by default.'	),	array(		0 => 'How can I add / remove users to my Friends or Foes list?',		1 => 'You can add users to your list in two ways. Within each users profile, there is a link to add them to either your Friend or Foe list. Alternatively, from your User Control Panel, you can directly add users by entering their member name. You may also remove users from your list using the same page.'	),	array(		0 => '--',		1 => 'Searching the Forums'	),	array(		0 => 'How can I search a forum or forums?',		1 => 'Enter a search term in the search box located on the index, forum or topic pages. Advanced search can be accessed by clicking the Advance Search link which is available on all pages on the forum. How to access the search may depend on the style used.'	),	array(		0 => 'Why does my search return no results?',		1 => 'Your search was probably too vague and included many common terms which are not indexed by phpBB3. Be more specific and use the options available within Advanced search.'	),	array(		0 => 'Why does my search return a blank page!?',		1 => 'Your search returned too many results for the webserver to handle. Use Advanced search and be more specific in the terms used and forums that are to be searched.'	),	array(		0 => 'How do I search for members?',		1 => 'Visit to the Members page and click the Find a member link.'	),	array(		0 => 'How can I find my own posts and topics?',		1 => 'Your own posts can be retrieved either by clicking the Search users posts within the User Control Panel or via your own profile page. To search for your topics, use the Advanced search page and fill in the various options appropriately.'	),	array(		0 => '--',		1 => 'Topic Subscriptions and Bookmarks'	),	array(		0 => 'What is the difference between bookmarking and subscribing?',		1 => 'Bookmarking in phpBB3 is much like bookmarking in your web browser. You arent alerted when theres an update, but you can come back to the topic later. Subscribing, however, will notify you when there is an update to the topic or forum on the board via your preferred method or methods.'	),	array(		0 => 'How do I subscribe to specific forums or topics?',		1 => 'To subscribe to a specific forum, click the Subscribe forum link upon entering the forum. To subscribe to a topic, reply to the topic with the subscribe checkbox checked or click the Subscribe topic link within the topic itself.'	),	array(		0 => 'How do I remove my subscriptions?',		1 => 'To remove your subscriptions, go to your User Control Panel and follow the links to your subscriptions.'	),	array(		0 => '--',		1 => 'Attachments'	),	array(		0 => 'What attachments are allowed on this board?',		1 => 'Each board administrator can allow or disallow certain attachment types. If you are unsure what is allowed to be uploaded, contact the board administrator for assistance.'	),	array(		0 => 'How do I find all my attachments?',		1 => 'To find your list of attachments that you have uploaded, go to your User Control Panel and follow the links to the attachments section.'	),	array(		0 => '--',		1 => 'phpBB 3 Issues'	),	array(		0 => 'Who wrote this bulletin board?',		1 => 'This software (in its unmodified form) is produced, released and is copyright <a href="http://www.phpbb.com/">phpBB Group</a>. It is made available under the GNU General Public License and may be freely distributed. See the link for more details.'	),	array(		0 => 'Why isnt X feature available?',		1 => 'This software was written by and licensed through phpBB Group. If you believe a feature needs to be added, please visit the phpbb.com website and see what phpBB Group have to say. Please do not post feature requests to the board at phpbb.com, the group uses SourceForge to handle tasking of new features. Please read through the forums and see what, if any, our position may already be for a feature and then follow the procedure given there.'	),	array(		0 => 'Who do I contact about abusive and/or legal matters related to this board?',		1 => 'Any of the administrators listed on the The team page should be an appropriate point of contact for your complaints. If this still gets no response then you should contact the owner of the domain (do a <a href="http://www.google.com/search?q=whois">whois lookup</a>) or, if this is running on a free service (e.g. Yahoo!, free.fr, f2s.com, etc.), the management or abuse department of that service. Please note that the phpBB Group has <strong>absolutely no jurisdiction</strong> and cannot in any way be held liable over how, where or by whom this board is used. Do not contact the phpBB Group in relation to any legal (cease and desist, liable, defamatory comment, etc.) matter <strong>not directly related</strong> to the phpBB.com website or the discrete software of phpBB itself. If you do e-mail phpBB Group <strong>about any third party</strong> use of this software then you should expect a terse response or no response at all.'	));?>
<?php/**** @package mcp* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @ignore*/define('IN_PHPBB', true);$phpbb_root_path = (defined('PHPBB_ROOT_PATH')) ? PHPBB_ROOT_PATH : './';$phpEx = substr(strrchr(__FILE__, '.'), 1);include($phpbb_root_path . 'common.' . $phpEx);include($phpbb_root_path . 'includes/functions_admin.' . $phpEx);require($phpbb_root_path . 'includes/functions_module.' . $phpEx);// Start session management$user->session_begin();$auth->acl($user->data);$user->setup('mcp');$module = new p_master();// Setting a variable to let the style designer know where he is...$template->assign_var('S_IN_MCP', true);// Basic parameter data$id = request_var('i', '');if (isset($_REQUEST['mode']) && is_array($_REQUEST['mode'])){	$mode = request_var('mode', array(''));	list($mode, ) = each($mode);}else{	$mode = request_var('mode', '');}// Only Moderators can go beyond this pointif (!$user->data['is_registered']){	if ($user->data['is_bot'])	{		redirect(append_sid("{$phpbb_root_path}index.$phpEx"));	}	login_box('', $user->lang['LOGIN_EXPLAIN_MCP']);}$quickmod = (isset($_REQUEST['quickmod'])) ? true : false;$action = request_var('action', '');$action_ary = request_var('action', array('' => 0));$forum_action = request_var('forum_action', '');if ($forum_action !== '' && !empty($_POST['sort'])){	$action = $forum_action;}if (sizeof($action_ary)){	list($action, ) = each($action_ary);}unset($action_ary);if ($mode == 'topic_logs'){	$id = 'logs';	$quickmod = false;}$post_id = request_var('p', 0);$topic_id = request_var('t', 0);$forum_id = request_var('f', 0);$report_id = request_var('r', 0);$user_id = request_var('u', 0);$username = utf8_normalize_nfc(request_var('username', '', true));if ($post_id){	// We determine the topic and forum id here, to make sure the moderator really has moderative rights on this post	$sql = 'SELECT topic_id, forum_id		FROM ' . POSTS_TABLE . "		WHERE post_id = $post_id";	$result = $db->sql_query($sql);	$row = $db->sql_fetchrow($result);	$db->sql_freeresult($result);	$topic_id = (int) $row['topic_id'];	$forum_id = (int) ($row['forum_id']) ? $row['forum_id'] : $forum_id;}else if ($topic_id){	$sql = 'SELECT forum_id		FROM ' . TOPICS_TABLE . "		WHERE topic_id = $topic_id";	$result = $db->sql_query($sql);	$row = $db->sql_fetchrow($result);	$db->sql_freeresult($result);	$forum_id = (int) $row['forum_id'];}// If the user doesn't have any moderator powers (globally or locally) he can't access the mcpif (!$auth->acl_getf_global('m_')){	// Except he is using one of the quickmod tools for users	$user_quickmod_actions = array(		'lock'			=> 'f_user_lock',		'make_sticky'	=> 'f_sticky',		'make_announce'	=> 'f_announce',		'make_global'	=> 'f_announce',		'make_normal'	=> array('f_announce', 'f_sticky')	);	$allow_user = false;	if ($quickmod && isset($user_quickmod_actions[$action]) && $user->data['is_registered'] && $auth->acl_gets($user_quickmod_actions[$action], $forum_id))	{		$topic_info = get_topic_data(array($topic_id));		if ($topic_info[$topic_id]['topic_poster'] == $user->data['user_id'])		{			$allow_user = true;		}	}	if (!$allow_user)	{		trigger_error('NOT_AUTHORISED');	}}// if the user cannot read the forum he tries to access then we won't allow mcp access eitherif ($forum_id && !$auth->acl_get('f_read', $forum_id)){	trigger_error('NOT_AUTHORISED');}if ($forum_id){	$module->acl_forum_id = $forum_id;}// Instantiate module system and generate list of available modules$module->list_modules('mcp');if ($quickmod){	$mode = 'quickmod';	switch ($action)	{		case 'lock':		case 'unlock':		case 'lock_post':		case 'unlock_post':		case 'make_sticky':		case 'make_announce':		case 'make_global':		case 'make_normal':		case 'fork':		case 'move':		case 'delete_post':		case 'delete_topic':			$module->load('mcp', 'main', 'quickmod');			return;		break;		case 'topic_logs':			// Reset start parameter if we jumped from the quickmod dropdown			if (request_var('start', 0))			{				$_REQUEST['start'] = 0;			}			$module->set_active('logs', 'topic_logs');		break;		case 'merge_topic':			$module->set_active('main', 'forum_view');		break;		case 'split':		case 'merge':			$module->set_active('main', 'topic_view');		break;		default:			trigger_error("$action not allowed as quickmod", E_USER_ERROR);		break;	}}else{	// Select the active module	$module->set_active($id, $mode);}// Hide some of the options if we don't have the relevant information to use themif (!$post_id){	$module->set_display('main', 'post_details', false);	$module->set_display('warn', 'warn_post', false);}if ($mode == '' || $mode == 'unapproved_topics' || $mode == 'unapproved_posts'){	$module->set_display('queue', 'approve_details', false);}if ($mode == '' || $mode == 'reports' || $mode == 'reports_closed' || $mode == 'pm_reports' || $mode == 'pm_reports_closed' || $mode == 'pm_report_details'){	$module->set_display('reports', 'report_details', false);}if ($mode == '' || $mode == 'reports' || $mode == 'reports_closed' || $mode == 'pm_reports' || $mode == 'pm_reports_closed' || $mode == 'report_details'){	$module->set_display('pm_reports', 'pm_report_details', false);}if (!$topic_id){	$module->set_display('main', 'topic_view', false);	$module->set_display('logs', 'topic_logs', false);}if (!$forum_id){	$module->set_display('main', 'forum_view', false);	$module->set_display('logs', 'forum_logs', false);}if (!$user_id && $username == ''){	$module->set_display('notes', 'user_notes', false);	$module->set_display('warn', 'warn_user', false);}// Load and execute the relevant module$module->load_active();// Assign data to the template engine for the list of modules$module->assign_tpl_vars(append_sid("{$phpbb_root_path}mcp.$phpEx"));// Generate urls for letting the moderation control panel being accessed in different modes$template->assign_vars(array(	'U_MCP'			=> append_sid("{$phpbb_root_path}mcp.$phpEx", 'i=main'),	'U_MCP_FORUM'	=> ($forum_id) ? append_sid("{$phpbb_root_path}mcp.$phpEx", "i=main&amp;mode=forum_view&amp;f=$forum_id") : '',	'U_MCP_TOPIC'	=> ($forum_id && $topic_id) ? append_sid("{$phpbb_root_path}mcp.$phpEx", "i=main&amp;mode=topic_view&amp;t=$topic_id") : '',	'U_MCP_POST'	=> ($forum_id && $topic_id && $post_id) ? append_sid("{$phpbb_root_path}mcp.$phpEx", "i=main&amp;mode=post_details&amp;t=$topic_id&amp;p=$post_id") : '',));// Generate the page, do not display/query online list$module->display($module->get_page_title(), false);/*** Functions used to generate additional URL paramters*/function _module__url($mode, &$module_row){	return extra_url();}function _module_notes_url($mode, &$module_row){	if ($mode == 'front')	{		return '';	}	global $user_id;	return ($user_id) ? "&amp;u=$user_id" : '';}function _module_warn_url($mode, &$module_row){	if ($mode == 'front' || $mode == 'list')	{		global $forum_id;		return ($forum_id) ? "&amp;f=$forum_id" : '';	}	if ($mode == 'warn_post')	{		global $forum_id, $post_id;		$url_extra = ($forum_id) ? "&amp;f=$forum_id" : '';		$url_extra .= ($post_id) ? "&amp;p=$post_id" : '';		return $url_extra;	}	else	{		global $user_id;		return ($user_id) ? "&amp;u=$user_id" : '';	}}function _module_main_url($mode, &$module_row){	return extra_url();}function _module_logs_url($mode, &$module_row){	return extra_url();}function _module_ban_url($mode, &$module_row){	return extra_url();}function _module_queue_url($mode, &$module_row){	return extra_url();}function _module_reports_url($mode, &$module_row){	return extra_url();}function extra_url(){	global $forum_id, $topic_id, $post_id, $report_id, $user_id;	$url_extra = '';	$url_extra .= ($forum_id) ? "&amp;f=$forum_id" : '';	$url_extra .= ($topic_id) ? "&amp;t=$topic_id" : '';	$url_extra .= ($post_id) ? "&amp;p=$post_id" : '';	$url_extra .= ($user_id) ? "&amp;u=$user_id" : '';	$url_extra .= ($report_id) ? "&amp;r=$report_id" : '';	return $url_extra;}/*** Get simple topic data*/function get_topic_data($topic_ids, $acl_list = false, $read_tracking = false){	global $auth, $db, $config, $user;	static $rowset = array();	$topics = array();	if (!sizeof($topic_ids))	{		return array();	}	// cache might not contain read tracking info, so we can't use it if read	// tracking information is requested	if (!$read_tracking)	{		$cache_topic_ids = array_intersect($topic_ids, array_keys($rowset));		$topic_ids = array_diff($topic_ids, array_keys($rowset));	}	else	{		$cache_topic_ids = array();	}	if (sizeof($topic_ids))	{		$sql_array = array(			'SELECT'	=> 't.*, f.*',			'FROM'		=> array(				TOPICS_TABLE	=> 't',			),			'LEFT_JOIN'	=> array(				array(					'FROM'	=> array(FORUMS_TABLE => 'f'),					'ON'	=> 'f.forum_id = t.forum_id'				)			),			'WHERE'		=> $db->sql_in_set('t.topic_id', $topic_ids)		);		if ($read_tracking && $config['load_db_lastread'])		{			$sql_array['SELECT'] .= ', tt.mark_time, ft.mark_time as forum_mark_time';			$sql_array['LEFT_JOIN'][] = array(				'FROM'	=> array(TOPICS_TRACK_TABLE => 'tt'),				'ON'	=> 'tt.user_id = ' . $user->data['user_id'] . ' AND t.topic_id = tt.topic_id'			);			$sql_array['LEFT_JOIN'][] = array(				'FROM'	=> array(FORUMS_TRACK_TABLE => 'ft'),				'ON'	=> 'ft.user_id = ' . $user->data['user_id'] . ' AND t.forum_id = ft.forum_id'			);		}		$sql = $db->sql_build_query('SELECT', $sql_array);		$result = $db->sql_query($sql);		while ($row = $db->sql_fetchrow($result))		{			if (!$row['forum_id'])			{				// Global Announcement?				$row['forum_id'] = request_var('f', 0);			}			$rowset[$row['topic_id']] = $row;			if ($acl_list && !$auth->acl_gets($acl_list, $row['forum_id']))			{				continue;			}			$topics[$row['topic_id']] = $row;		}		$db->sql_freeresult($result);	}	foreach ($cache_topic_ids as $id)	{		if (!$acl_list || $auth->acl_gets($acl_list, $rowset[$id]['forum_id']))		{			$topics[$id] = $rowset[$id];		}	}	return $topics;}/*** Get simple post data*/function get_post_data($post_ids, $acl_list = false, $read_tracking = false){	global $db, $auth, $config, $user;	$rowset = array();	if (!sizeof($post_ids))	{		return array();	}	$sql_array = array(		'SELECT'	=> 'p.*, u.*, t.*, f.*',		'FROM'		=> array(			USERS_TABLE		=> 'u',			POSTS_TABLE		=> 'p',			TOPICS_TABLE	=> 't',		),		'LEFT_JOIN'	=> array(			array(				'FROM'	=> array(FORUMS_TABLE => 'f'),				'ON'	=> 'f.forum_id = t.forum_id'			)		),		'WHERE'		=> $db->sql_in_set('p.post_id', $post_ids) . '			AND u.user_id = p.poster_id			AND t.topic_id = p.topic_id',	);	if ($read_tracking && $config['load_db_lastread'])	{		$sql_array['SELECT'] .= ', tt.mark_time, ft.mark_time as forum_mark_time';		$sql_array['LEFT_JOIN'][] = array(			'FROM'	=> array(TOPICS_TRACK_TABLE => 'tt'),			'ON'	=> 'tt.user_id = ' . $user->data['user_id'] . ' AND t.topic_id = tt.topic_id'		);		$sql_array['LEFT_JOIN'][] = array(			'FROM'	=> array(FORUMS_TRACK_TABLE => 'ft'),			'ON'	=> 'ft.user_id = ' . $user->data['user_id'] . ' AND t.forum_id = ft.forum_id'		);	}	$sql = $db->sql_build_query('SELECT', $sql_array);	$result = $db->sql_query($sql);	unset($sql_array);	while ($row = $db->sql_fetchrow($result))	{		if (!$row['forum_id'])		{			// Global Announcement?			$row['forum_id'] = request_var('f', 0);		}		if ($acl_list && !$auth->acl_gets($acl_list, $row['forum_id']))		{			continue;		}		if (!$row['post_approved'] && !$auth->acl_get('m_approve', $row['forum_id']))		{			// Moderators without the permission to approve post should at least not see them. ;)			continue;		}		$rowset[$row['post_id']] = $row;	}	$db->sql_freeresult($result);	return $rowset;}/*** Get simple forum data*/function get_forum_data($forum_id, $acl_list = 'f_list', $read_tracking = false){	global $auth, $db, $user, $config;	$rowset = array();	if (!is_array($forum_id))	{		$forum_id = array($forum_id);	}	if (!sizeof($forum_id))	{		return array();	}	if ($read_tracking && $config['load_db_lastread'])	{		$read_tracking_join = ' LEFT JOIN ' . FORUMS_TRACK_TABLE . ' ft ON (ft.user_id = ' . $user->data['user_id'] . '			AND ft.forum_id = f.forum_id)';		$read_tracking_select = ', ft.mark_time';	}	else	{		$read_tracking_join = $read_tracking_select = '';	}	$sql = "SELECT f.* $read_tracking_select		FROM " . FORUMS_TABLE . " f$read_tracking_join		WHERE " . $db->sql_in_set('f.forum_id', $forum_id);	$result = $db->sql_query($sql);	while ($row = $db->sql_fetchrow($result))	{		if ($acl_list && !$auth->acl_gets($acl_list, $row['forum_id']))		{			continue;		}		if ($auth->acl_get('m_approve', $row['forum_id']))		{			$row['forum_topics'] = $row['forum_topics_real'];		}		$rowset[$row['forum_id']] = $row;	}	$db->sql_freeresult($result);	return $rowset;}/*** Get simple pm data*/function get_pm_data($pm_ids){	global $db, $auth, $config, $user;	$rowset = array();	if (!sizeof($pm_ids))	{		return array();	}	$sql_array = array(		'SELECT'	=> 'p.*, u.*',		'FROM'		=> array(			USERS_TABLE			=> 'u',			PRIVMSGS_TABLE		=> 'p',		),		'WHERE'		=> $db->sql_in_set('p.msg_id', $pm_ids) . '			AND u.user_id = p.author_id',	);	$sql = $db->sql_build_query('SELECT', $sql_array);	$result = $db->sql_query($sql);	unset($sql_array);	while ($row = $db->sql_fetchrow($result))	{		$rowset[$row['msg_id']] = $row;	}	$db->sql_freeresult($result);	return $rowset;}/*** sorting in mcp** @param string $where_sql should either be WHERE (default if ommited) or end with AND or OR** $mode reports and reports_closed: the $where parameters uses aliases p for posts table and r for report table* $mode unapproved_posts: the $where parameters uses aliases p for posts table and t for topic table*/function mcp_sorting($mode, &$sort_days, &$sort_key, &$sort_dir, &$sort_by_sql, &$sort_order_sql, &$total, $forum_id = 0, $topic_id = 0, $where_sql = 'WHERE'){	global $db, $user, $auth, $template;	$sort_days = request_var('st', 0);	$min_time = ($sort_days) ? time() - ($sort_days * 86400) : 0;	switch ($mode)	{		case 'viewforum':			$type = 'topics';			$default_key = 't';			$default_dir = 'd';			$sql = 'SELECT COUNT(topic_id) AS total				FROM ' . TOPICS_TABLE . "				$where_sql forum_id = $forum_id					AND topic_type NOT IN (" . POST_ANNOUNCE . ', ' . POST_GLOBAL . ")					AND topic_last_post_time >= $min_time";			if (!$auth->acl_get('m_approve', $forum_id))			{				$sql .= 'AND topic_approved = 1';			}		break;		case 'viewtopic':			$type = 'posts';			$default_key = 't';			$default_dir = 'a';			$sql = 'SELECT COUNT(post_id) AS total				FROM ' . POSTS_TABLE . "				$where_sql topic_id = $topic_id					AND post_time >= $min_time";			if (!$auth->acl_get('m_approve', $forum_id))			{				$sql .= 'AND post_approved = 1';			}		break;		case 'unapproved_posts':			$type = 'posts';			$default_key = 't';			$default_dir = 'd';			$where_sql .= ($topic_id) ? ' p.topic_id = ' . $topic_id . ' AND' : '';			$sql = 'SELECT COUNT(p.post_id) AS total				FROM ' . POSTS_TABLE . ' p, ' . TOPICS_TABLE . " t				$where_sql " . $db->sql_in_set('p.forum_id', ($forum_id) ? array($forum_id) : array_intersect(get_forum_list('f_read'), get_forum_list('m_approve'))) . '					AND p.post_approved = 0					AND t.topic_id = p.topic_id					AND t.topic_first_post_id <> p.post_id';			if ($min_time)			{				$sql .= ' AND post_time >= ' . $min_time;			}		break;		case 'unapproved_topics':			$type = 'topics';			$default_key = 't';			$default_dir = 'd';			$sql = 'SELECT COUNT(topic_id) AS total				FROM ' . TOPICS_TABLE . "				$where_sql " . $db->sql_in_set('forum_id', ($forum_id) ? array($forum_id) : array_intersect(get_forum_list('f_read'), get_forum_list('m_approve'))) . '					AND topic_approved = 0';			if ($min_time)			{				$sql .= ' AND topic_time >= ' . $min_time;			}		break;		case 'pm_reports':		case 'pm_reports_closed':		case 'reports':		case 'reports_closed':			$pm = (strpos($mode, 'pm_') === 0) ? true : false;			$type = ($pm) ? 'pm_reports' : 'reports';			$default_key = 't';			$default_dir = 'd';			$limit_time_sql = ($min_time) ? "AND r.report_time >= $min_time" : '';			if ($topic_id)			{				$where_sql .= ' p.topic_id = ' . $topic_id . ' AND ';			}			else if ($forum_id)			{				$where_sql .= ' p.forum_id = ' . $forum_id . ' AND ';			}			else if (!$pm)			{				$where_sql .= ' ' . $db->sql_in_set('p.forum_id', get_forum_list(array('!f_read', '!m_report')), true, true) . ' AND ';			}			if ($mode == 'reports' || $mode == 'pm_reports')			{				$where_sql .= ' r.report_closed = 0 AND ';			}			else			{				$where_sql .= ' r.report_closed = 1 AND ';			}			if ($pm)			{				$sql = 'SELECT COUNT(r.report_id) AS total					FROM ' . REPORTS_TABLE . ' r, ' . PRIVMSGS_TABLE . " p					$where_sql r.post_id = 0						AND p.msg_id = r.pm_id						$limit_time_sql";			}			else			{				$sql = 'SELECT COUNT(r.report_id) AS total					FROM ' . REPORTS_TABLE . ' r, ' . POSTS_TABLE . " p					$where_sql r.pm_id = 0						AND p.post_id = r.post_id						$limit_time_sql";			}		break;		case 'viewlogs':			$type = 'logs';			$default_key = 't';			$default_dir = 'd';			$sql = 'SELECT COUNT(log_id) AS total				FROM ' . LOG_TABLE . "				$where_sql " . $db->sql_in_set('forum_id', ($forum_id) ? array($forum_id) : array_intersect(get_forum_list('f_read'), get_forum_list('m_'))) . '					AND log_time >= ' . $min_time . '					AND log_type = ' . LOG_MOD;		break;	}	$sort_key = request_var('sk', $default_key);	$sort_dir = request_var('sd', $default_dir);	$sort_dir_text = array('a' => $user->lang['ASCENDING'], 'd' => $user->lang['DESCENDING']);	switch ($type)	{		case 'topics':			$limit_days = array(0 => $user->lang['ALL_TOPICS'], 1 => $user->lang['1_DAY'], 7 => $user->lang['7_DAYS'], 14 => $user->lang['2_WEEKS'], 30 => $user->lang['1_MONTH'], 90 => $user->lang['3_MONTHS'], 180 => $user->lang['6_MONTHS'], 365 => $user->lang['1_YEAR']);			$sort_by_text = array('a' => $user->lang['AUTHOR'], 't' => $user->lang['POST_TIME'], 'tt' => $user->lang['TOPIC_TIME'], 'r' => $user->lang['REPLIES'], 's' => $user->lang['SUBJECT'], 'v' => $user->lang['VIEWS']);			$sort_by_sql = array('a' => 't.topic_first_poster_name', 't' => 't.topic_last_post_time', 'tt' => 't.topic_time', 'r' => (($auth->acl_get('m_approve', $forum_id)) ? 't.topic_replies_real' : 't.topic_replies'), 's' => 't.topic_title', 'v' => 't.topic_views');			$limit_time_sql = ($min_time) ? "AND t.topic_last_post_time >= $min_time" : '';		break;		case 'posts':			$limit_days = array(0 => $user->lang['ALL_POSTS'], 1 => $user->lang['1_DAY'], 7 => $user->lang['7_DAYS'], 14 => $user->lang['2_WEEKS'], 30 => $user->lang['1_MONTH'], 90 => $user->lang['3_MONTHS'], 180 => $user->lang['6_MONTHS'], 365 => $user->lang['1_YEAR']);			$sort_by_text = array('a' => $user->lang['AUTHOR'], 't' => $user->lang['POST_TIME'], 's' => $user->lang['SUBJECT']);			$sort_by_sql = array('a' => 'u.username_clean', 't' => 'p.post_time', 's' => 'p.post_subject');			$limit_time_sql = ($min_time) ? "AND p.post_time >= $min_time" : '';		break;		case 'reports':			$limit_days = array(0 => $user->lang['ALL_REPORTS'], 1 => $user->lang['1_DAY'], 7 => $user->lang['7_DAYS'], 14 => $user->lang['2_WEEKS'], 30 => $user->lang['1_MONTH'], 90 => $user->lang['3_MONTHS'], 180 => $user->lang['6_MONTHS'], 365 => $user->lang['1_YEAR']);			$sort_by_text = array('a' => $user->lang['AUTHOR'], 'r' => $user->lang['REPORTER'], 'p' => $user->lang['POST_TIME'], 't' => $user->lang['REPORT_TIME'], 's' => $user->lang['SUBJECT']);			$sort_by_sql = array('a' => 'u.username_clean', 'r' => 'ru.username', 'p' => 'p.post_time', 't' => 'r.report_time', 's' => 'p.post_subject');		break;		case 'pm_reports':			$limit_days = array(0 => $user->lang['ALL_REPORTS'], 1 => $user->lang['1_DAY'], 7 => $user->lang['7_DAYS'], 14 => $user->lang['2_WEEKS'], 30 => $user->lang['1_MONTH'], 90 => $user->lang['3_MONTHS'], 180 => $user->lang['6_MONTHS'], 365 => $user->lang['1_YEAR']);			$sort_by_text = array('a' => $user->lang['AUTHOR'], 'r' => $user->lang['REPORTER'], 'p' => $user->lang['POST_TIME'], 't' => $user->lang['REPORT_TIME'], 's' => $user->lang['SUBJECT']);			$sort_by_sql = array('a' => 'u.username_clean', 'r' => 'ru.username', 'p' => 'p.message_time', 't' => 'r.report_time', 's' => 'p.message_subject');		break;		case 'logs':			$limit_days = array(0 => $user->lang['ALL_ENTRIES'], 1 => $user->lang['1_DAY'], 7 => $user->lang['7_DAYS'], 14 => $user->lang['2_WEEKS'], 30 => $user->lang['1_MONTH'], 90 => $user->lang['3_MONTHS'], 180 => $user->lang['6_MONTHS'], 365 => $user->lang['1_YEAR']);			$sort_by_text = array('u' => $user->lang['SORT_USERNAME'], 't' => $user->lang['SORT_DATE'], 'i' => $user->lang['SORT_IP'], 'o' => $user->lang['SORT_ACTION']);			$sort_by_sql = array('u' => 'u.username_clean', 't' => 'l.log_time', 'i' => 'l.log_ip', 'o' => 'l.log_operation');			$limit_time_sql = ($min_time) ? "AND l.log_time >= $min_time" : '';		break;	}	if (!isset($sort_by_sql[$sort_key]))	{		$sort_key = $default_key;	}	$sort_order_sql = $sort_by_sql[$sort_key] . ' ' . (($sort_dir == 'd') ? 'DESC' : 'ASC');	$s_limit_days = $s_sort_key = $s_sort_dir = $sort_url = '';	gen_sort_selects($limit_days, $sort_by_text, $sort_days, $sort_key, $sort_dir, $s_limit_days, $s_sort_key, $s_sort_dir, $sort_url);	$template->assign_vars(array(		'S_SELECT_SORT_DIR'		=> $s_sort_dir,		'S_SELECT_SORT_KEY'		=> $s_sort_key,		'S_SELECT_SORT_DAYS'	=> $s_limit_days)	);	if (($sort_days && $mode != 'viewlogs') || in_array($mode, array('reports', 'unapproved_topics', 'unapproved_posts')) || $where_sql != 'WHERE')	{		$result = $db->sql_query($sql);		$total = (int) $db->sql_fetchfield('total');		$db->sql_freeresult($result);	}	else	{		$total = -1;	}}/*** Validate ids** @param	array	&$ids			The relevant ids to check* @param	string	$table			The table to find the ids in* @param	string	$sql_id			The ids relevant column name* @param	array	$acl_list		A list of permissions the user need to have* @param	mixed	$singe_forum	Limit to one forum id (int) or the first forum found (true)** @return	mixed	False if no ids were able to be retrieved, true if at least one id left.*					Additionally, this value can be the forum_id assigned if $single_forum was set.*					Therefore checking the result for with !== false is the best method.*/function check_ids(&$ids, $table, $sql_id, $acl_list = false, $single_forum = false){	global $db, $auth;	if (!is_array($ids) || empty($ids))	{		return false;	}	$sql = "SELECT $sql_id, forum_id FROM $table		WHERE " . $db->sql_in_set($sql_id, $ids);	$result = $db->sql_query($sql);	$ids = array();	$forum_id = false;	while ($row = $db->sql_fetchrow($result))	{		if ($acl_list && $row['forum_id'] && !$auth->acl_gets($acl_list, $row['forum_id']))		{			continue;		}		if ($acl_list && !$row['forum_id'] && !$auth->acl_getf_global($acl_list))		{			continue;		}		// Limit forum? If not, just assign the id.		if ($single_forum === false)		{			$ids[] = $row[$sql_id];			continue;		}		// Limit forum to a specific forum id?		// This can get really tricky, because we do not want to create a failure on global topics. :)		if ($row['forum_id'])		{			if ($single_forum !== true && $row['forum_id'] == (int) $single_forum)			{				$forum_id = (int) $single_forum;			}			else if ($forum_id === false)			{				$forum_id = $row['forum_id'];			}			if ($row['forum_id'] == $forum_id)			{				$ids[] = $row[$sql_id];			}		}		else		{			// Always add a global topic			$ids[] = $row[$sql_id];		}	}	$db->sql_freeresult($result);	if (!sizeof($ids))	{		return false;	}	// If forum id is false and ids populated we may have only global announcements selected (returning 0 because of (int) $forum_id)	return ($single_forum === false) ? true : (int) $forum_id;}?>
<?php return array(''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'1',''=>'2',''=>'3',''=>'4',''=>'5',''=>'6',''=>'7',''=>'8',''=>'9',''=>'10',''=>'20',''=>'30',''=>'40',''=>'50',''=>'60',''=>'70',''=>'80',''=>'90',''=>'100',''=>'200',''=>'300',''=>'400',''=>'500',''=>'600',''=>'700',''=>'800',''=>'900',''=>'1000',''=>'2000',''=>'3000',''=>'4000',''=>'5000',''=>'6000',''=>'7000',''=>'8000',''=>'9000',''=>'10000',''=>'20000',''=>'30000',''=>'40000',''=>'50000',''=>'60000',''=>'70000',''=>'80000',''=>'90000',''=>'1/4',''=>'1/2',''=>'1',''=>'5',''=>'50',''=>'500',''=>'5000',''=>'50000',''=>'5',''=>'10',''=>'50',''=>'100',''=>'500',''=>'1000',''=>'5000',''=>'5',''=>'10',''=>'50',''=>'100',''=>'500',''=>'1000',''=>'10000',''=>'50000',''=>'10',''=>'1',''=>'1',''=>'1',''=>'2',''=>'2',''=>'2',''=>'2',''=>'5',''=>'10',''=>'10',''=>'10',''=>'10',''=>'10',''=>'30',''=>'50',''=>'50',''=>'50',''=>'50',''=>'100',''=>'300',''=>'500',''=>'500',''=>'500',''=>'500',''=>'500',''=>'1000',''=>'5000',''=>'5',''=>'50',''=>'1/2',''=>'1/2',''=>'2/3',''=>'3/4',''=>'0',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'1',''=>'5',''=>'10',''=>'50',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'90',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'900',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'1',''=>'2',''=>'10',''=>'20',''=>'100',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'0',''=>'1',''=>'2',''=>'3',''=>'4',''=>'5',''=>'6',''=>'7',''=>'8',''=>'9');
<?php/**** @package phpBB3* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @ignore*/if (!defined('IN_PHPBB')){	exit;}/*** BBCode class* @package phpBB3*/class bbcode{	var $bbcode_uid = '';	var $bbcode_bitfield = '';	var $bbcode_cache = array();	var $bbcode_template = array();	var $bbcodes = array();	var $template_bitfield;	var $template_filename = '';	/**	* Constructor	* Init bbcode cache entries if bitfield is specified	*/	function bbcode($bitfield = '')	{		if ($bitfield)		{			$this->bbcode_bitfield = $bitfield;			$this->bbcode_cache_init();		}	}	/**	* Second pass bbcodes	*/	function bbcode_second_pass(&$message, $bbcode_uid = '', $bbcode_bitfield = false)	{		if ($bbcode_uid)		{			$this->bbcode_uid = $bbcode_uid;		}		if ($bbcode_bitfield !== false)		{			$this->bbcode_bitfield = $bbcode_bitfield;			// Init those added with a new bbcode_bitfield (already stored codes will not get parsed again)			$this->bbcode_cache_init();		}		if (!$this->bbcode_bitfield)		{			// Remove the uid from tags that have not been transformed into HTML			if ($this->bbcode_uid)			{				$message = str_replace(':' . $this->bbcode_uid, '', $message);			}			return;		}		$str = array('search' => array(), 'replace' => array());		$preg = array('search' => array(), 'replace' => array());		$bitfield = new bitfield($this->bbcode_bitfield);		$bbcodes_set = $bitfield->get_all_set();		$undid_bbcode_specialchars = false;		foreach ($bbcodes_set as $bbcode_id)		{			if (!empty($this->bbcode_cache[$bbcode_id]))			{				foreach ($this->bbcode_cache[$bbcode_id] as $type => $array)				{					foreach ($array as $search => $replace)					{						${$type}['search'][] = str_replace('$uid', $this->bbcode_uid, $search);						${$type}['replace'][] = $replace;					}					if (sizeof($str['search']))					{						$message = str_replace($str['search'], $str['replace'], $message);						$str = array('search' => array(), 'replace' => array());					}					if (sizeof($preg['search']))					{						// we need to turn the entities back into their original form to allow the						// search patterns to work properly						if (!$undid_bbcode_specialchars)						{							$message = str_replace(array('&#58;', '&#46;'), array(':', '.'), $message);							$undid_bbcode_specialchars = true;						}						$message = preg_replace($preg['search'], $preg['replace'], $message);						$preg = array('search' => array(), 'replace' => array());					}				}			}		}		// Remove the uid from tags that have not been transformed into HTML		$message = str_replace(':' . $this->bbcode_uid, '', $message);	}	/**	* Init bbcode cache	*	* requires: $this->bbcode_bitfield	* sets: $this->bbcode_cache with bbcode templates needed for bbcode_bitfield	*/	function bbcode_cache_init()	{		global $phpbb_root_path, $template, $user;		if (empty($this->template_filename))		{			$this->template_bitfield = new bitfield($user->theme['bbcode_bitfield']);			$this->template_filename = $phpbb_root_path . 'styles/' . $user->theme['template_path'] . '/template/bbcode.html';			if (!@file_exists($this->template_filename))			{				if (isset($user->theme['template_inherits_id']) && $user->theme['template_inherits_id'])				{					$this->template_filename = $phpbb_root_path . 'styles/' . $user->theme['template_inherit_path'] . '/template/bbcode.html';					if (!@file_exists($this->template_filename))					{						trigger_error('The file ' . $this->template_filename . ' is missing.', E_USER_ERROR);					}				}				else				{					trigger_error('The file ' . $this->template_filename . ' is missing.', E_USER_ERROR);				}			}		}		$bbcode_ids = $rowset = $sql = array();		$bitfield = new bitfield($this->bbcode_bitfield);		$bbcodes_set = $bitfield->get_all_set();		foreach ($bbcodes_set as $bbcode_id)		{			if (isset($this->bbcode_cache[$bbcode_id]))			{				// do not try to re-cache it if it's already in				continue;			}			$bbcode_ids[] = $bbcode_id;			if ($bbcode_id > NUM_CORE_BBCODES)			{				$sql[] = $bbcode_id;			}		}		if (sizeof($sql))		{			global $db;			$sql = 'SELECT *				FROM ' . BBCODES_TABLE . '				WHERE ' . $db->sql_in_set('bbcode_id', $sql);			$result = $db->sql_query($sql, 3600);			while ($row = $db->sql_fetchrow($result))			{				// To circumvent replacing newlines with <br /> for the generated html,				// we use carriage returns here. They are later changed back to newlines				$row['bbcode_tpl'] = str_replace("\n", "\r", $row['bbcode_tpl']);				$row['second_pass_replace'] = str_replace("\n", "\r", $row['second_pass_replace']);				$rowset[$row['bbcode_id']] = $row;			}			$db->sql_freeresult($result);		}		foreach ($bbcode_ids as $bbcode_id)		{			switch ($bbcode_id)			{				case 0:					$this->bbcode_cache[$bbcode_id] = array(						'str' => array(							'[/quote:$uid]'	=> $this->bbcode_tpl('quote_close', $bbcode_id)						),						'preg' => array(							'#\[quote(?:=&quot;(.*?)&quot;)?:$uid\]((?!\[quote(?:=&quot;.*?&quot;)?:$uid\]).)?#ise'	=> "\$this->bbcode_second_pass_quote('\$1', '\$2')"						)					);				break;				case 1:					$this->bbcode_cache[$bbcode_id] = array(						'str' => array(							'[b:$uid]'	=> $this->bbcode_tpl('b_open', $bbcode_id),							'[/b:$uid]'	=> $this->bbcode_tpl('b_close', $bbcode_id),						)					);				break;				case 2:					$this->bbcode_cache[$bbcode_id] = array(						'str' => array(							'[i:$uid]'	=> $this->bbcode_tpl('i_open', $bbcode_id),							'[/i:$uid]'	=> $this->bbcode_tpl('i_close', $bbcode_id),						)					);				break;				case 3:					$this->bbcode_cache[$bbcode_id] = array(						'preg' => array(							'#\[url:$uid\]((.*?))\[/url:$uid\]#s'			=> $this->bbcode_tpl('url', $bbcode_id),							'#\[url=([^\[]+?):$uid\](.*?)\[/url:$uid\]#s'	=> $this->bbcode_tpl('url', $bbcode_id),						)					);				break;				case 4:					if ($user->optionget('viewimg'))					{						$this->bbcode_cache[$bbcode_id] = array(							'preg' => array(								'#\[img:$uid\](.*?)\[/img:$uid\]#s'		=> $this->bbcode_tpl('img', $bbcode_id),							)						);					}					else					{						$this->bbcode_cache[$bbcode_id] = array(							'preg' => array(								'#\[img:$uid\](.*?)\[/img:$uid\]#s'		=> str_replace('$2', '[ img ]', $this->bbcode_tpl('url', $bbcode_id, true)),							)						);					}				break;				case 5:					$this->bbcode_cache[$bbcode_id] = array(						'preg' => array(							'#\[size=([\-\+]?\d+):$uid\](.*?)\[/size:$uid\]#s'	=> $this->bbcode_tpl('size', $bbcode_id),						)					);				break;				case 6:					$this->bbcode_cache[$bbcode_id] = array(						'preg' => array(							'!\[color=(#[0-9a-f]{3}|#[0-9a-f]{6}|[a-z\-]+):$uid\](.*?)\[/color:$uid\]!is'	=> $this->bbcode_tpl('color', $bbcode_id),						)					);				break;				case 7:					$this->bbcode_cache[$bbcode_id] = array(						'str' => array(							'[u:$uid]'	=> $this->bbcode_tpl('u_open', $bbcode_id),							'[/u:$uid]'	=> $this->bbcode_tpl('u_close', $bbcode_id),						)					);				break;				case 8:					$this->bbcode_cache[$bbcode_id] = array(						'preg' => array(							'#\[code(?:=([a-z]+))?:$uid\](.*?)\[/code:$uid\]#ise'	=> "\$this->bbcode_second_pass_code('\$1', '\$2')",						)					);				break;				case 9:					$this->bbcode_cache[$bbcode_id] = array(						'preg' => array(							'#(\[\/?(list|\*):[mou]?:?$uid\])[\n]{1}#'	=> "\$1",							'#(\[list=([^\[]+):$uid\])[\n]{1}#'			=> "\$1",							'#\[list=([^\[]+):$uid\]#e'					=> "\$this->bbcode_list('\$1')",						),						'str' => array(							'[list:$uid]'		=> $this->bbcode_tpl('ulist_open_default', $bbcode_id),							'[/list:u:$uid]'	=> $this->bbcode_tpl('ulist_close', $bbcode_id),							'[/list:o:$uid]'	=> $this->bbcode_tpl('olist_close', $bbcode_id),							'[*:$uid]'			=> $this->bbcode_tpl('listitem', $bbcode_id),							'[/*:$uid]'			=> $this->bbcode_tpl('listitem_close', $bbcode_id),							'[/*:m:$uid]'		=> $this->bbcode_tpl('listitem_close', $bbcode_id)						),					);				break;				case 10:					$this->bbcode_cache[$bbcode_id] = array(						'preg' => array(							'#\[email:$uid\]((.*?))\[/email:$uid\]#is'			=> $this->bbcode_tpl('email', $bbcode_id),							'#\[email=([^\[]+):$uid\](.*?)\[/email:$uid\]#is'	=> $this->bbcode_tpl('email', $bbcode_id)						)					);				break;				case 11:					if ($user->optionget('viewflash'))					{						$this->bbcode_cache[$bbcode_id] = array(							'preg' => array(								'#\[flash=([0-9]+),([0-9]+):$uid\](.*?)\[/flash:$uid\]#'	=> $this->bbcode_tpl('flash', $bbcode_id),							)						);					}					else					{						$this->bbcode_cache[$bbcode_id] = array(							'preg' => array(								'#\[flash=([0-9]+),([0-9]+):$uid\](.*?)\[/flash:$uid\]#'	=> str_replace('$1', '$3', str_replace('$2', '[ flash ]', $this->bbcode_tpl('url', $bbcode_id, true)))							)						);					}				break;				case 12:					$this->bbcode_cache[$bbcode_id] = array(						'str'	=> array(							'[/attachment:$uid]'	=> $this->bbcode_tpl('inline_attachment_close', $bbcode_id)						),						'preg'	=> array(							'#\[attachment=([0-9]+):$uid\]#'	=> $this->bbcode_tpl('inline_attachment_open', $bbcode_id)						)					);				break;				default:					if (isset($rowset[$bbcode_id]))					{						if ($this->template_bitfield->get($bbcode_id))						{							// The bbcode requires a custom template to be loaded							if (!$bbcode_tpl = $this->bbcode_tpl($rowset[$bbcode_id]['bbcode_tag'], $bbcode_id))							{								// For some reason, the required template seems not to be available, use the default template								$bbcode_tpl = (!empty($rowset[$bbcode_id]['second_pass_replace'])) ? $rowset[$bbcode_id]['second_pass_replace'] : $rowset[$bbcode_id]['bbcode_tpl'];							}							else							{								// In order to use templates with custom bbcodes we need								// to replace all {VARS} to corresponding backreferences								// Note that backreferences are numbered from bbcode_match								if (preg_match_all('/\{(URL|LOCAL_URL|EMAIL|TEXT|SIMPLETEXT|INTTEXT|IDENTIFIER|COLOR|NUMBER)[0-9]*\}/', $rowset[$bbcode_id]['bbcode_match'], $m))								{									foreach ($m[0] as $i => $tok)									{										$bbcode_tpl = str_replace($tok, '$' . ($i + 1), $bbcode_tpl);									}								}							}						}						else						{							// Default template							$bbcode_tpl = (!empty($rowset[$bbcode_id]['second_pass_replace'])) ? $rowset[$bbcode_id]['second_pass_replace'] : $rowset[$bbcode_id]['bbcode_tpl'];						}						// Replace {L_*} lang strings						$bbcode_tpl = preg_replace('/{L_([A-Z_]+)}/e', "(!empty(\$user->lang['\$1'])) ? \$user->lang['\$1'] : ucwords(strtolower(str_replace('_', ' ', '\$1')))", $bbcode_tpl);						if (!empty($rowset[$bbcode_id]['second_pass_replace']))						{							// The custom BBCode requires second-pass pattern replacements							$this->bbcode_cache[$bbcode_id] = array(								'preg' => array($rowset[$bbcode_id]['second_pass_match'] => $bbcode_tpl)							);						}						else						{							$this->bbcode_cache[$bbcode_id] = array(								'str' => array($rowset[$bbcode_id]['second_pass_match'] => $bbcode_tpl)							);						}					}					else					{						$this->bbcode_cache[$bbcode_id] = false;					}				break;			}		}	}	/**	* Return bbcode template	*/	function bbcode_tpl($tpl_name, $bbcode_id = -1, $skip_bitfield_check = false)	{		static $bbcode_hardtpl = array();		if (empty($bbcode_hardtpl))		{			global $user;			$bbcode_hardtpl = array(				'b_open'	=> '<span style="font-weight: bold">',				'b_close'	=> '</span>',				'i_open'	=> '<span style="font-style: italic">',				'i_close'	=> '</span>',				'u_open'	=> '<span style="text-decoration: underline">',				'u_close'	=> '</span>',				'img'		=> '<img src="$1" alt="' . $user->lang['IMAGE'] . '" />',				'size'		=> '<span style="font-size: $1%; line-height: normal">$2</span>',				'color'		=> '<span style="color: $1">$2</span>',				'email'		=> '<a href="mailto:$1">$2</a>'			);		}		if ($bbcode_id != -1 && !$skip_bitfield_check && !$this->template_bitfield->get($bbcode_id))		{			return (isset($bbcode_hardtpl[$tpl_name])) ? $bbcode_hardtpl[$tpl_name] : false;		}		if (empty($this->bbcode_template))		{			if (($tpl = file_get_contents($this->template_filename)) === false)			{				trigger_error('Could not load bbcode template', E_USER_ERROR);			}			// replace \ with \\ and then ' with \'.			$tpl = str_replace('\\', '\\\\', $tpl);			$tpl = str_replace("'", "\'", $tpl);			// strip newlines and indent			$tpl = preg_replace("/\n[\n\r\s\t]*/", '', $tpl);			// Turn template blocks into PHP assignment statements for the values of $bbcode_tpl..			$this->bbcode_template = array();			$matches = preg_match_all('#<!-- BEGIN (.*?) -->(.*?)<!-- END (?:.*?) -->#', $tpl, $match);			for ($i = 0; $i < $matches; $i++)			{				if (empty($match[1][$i]))				{					continue;				}				$this->bbcode_template[$match[1][$i]] = $this->bbcode_tpl_replace($match[1][$i], $match[2][$i]);			}		}		return (isset($this->bbcode_template[$tpl_name])) ? $this->bbcode_template[$tpl_name] : ((isset($bbcode_hardtpl[$tpl_name])) ? $bbcode_hardtpl[$tpl_name] : false);	}	/**	* Return bbcode template replacement	*/	function bbcode_tpl_replace($tpl_name, $tpl)	{		global $user;		static $replacements = array(			'quote_username_open'	=> array('{USERNAME}'	=> '$1'),			'color'					=> array('{COLOR}'		=> '$1', '{TEXT}'			=> '$2'),			'size'					=> array('{SIZE}'		=> '$1', '{TEXT}'			=> '$2'),			'img'					=> array('{URL}'		=> '$1'),			'flash'					=> array('{WIDTH}'		=> '$1', '{HEIGHT}'			=> '$2', '{URL}'	=> '$3'),			'url'					=> array('{URL}'		=> '$1', '{DESCRIPTION}'	=> '$2'),			'email'					=> array('{EMAIL}'		=> '$1', '{DESCRIPTION}'	=> '$2')		);		$tpl = preg_replace('/{L_([A-Z_]+)}/e', "(!empty(\$user->lang['\$1'])) ? \$user->lang['\$1'] : ucwords(strtolower(str_replace('_', ' ', '\$1')))", $tpl);		if (!empty($replacements[$tpl_name]))		{			$tpl = strtr($tpl, $replacements[$tpl_name]);		}		return trim($tpl);	}	/**	* Second parse list bbcode	*/	function bbcode_list($type)	{		if ($type == '')		{			$tpl = 'ulist_open_default';			$type = 'default';		}		else if ($type == 'i')		{			$tpl = 'olist_open';			$type = 'lower-roman';		}		else if ($type == 'I')		{			$tpl = 'olist_open';			$type = 'upper-roman';		}		else if (preg_match('#^(disc|circle|square)$#i', $type))		{			$tpl = 'ulist_open';			$type = strtolower($type);		}		else if (preg_match('#^[a-z]$#', $type))		{			$tpl = 'olist_open';			$type = 'lower-alpha';		}		else if (preg_match('#[A-Z]#', $type))		{			$tpl = 'olist_open';			$type = 'upper-alpha';		}		else if (is_numeric($type))		{			$tpl = 'olist_open';			$type = 'decimal';		}		else		{			$tpl = 'olist_open';			$type = 'decimal';		}		return str_replace('{LIST_TYPE}', $type, $this->bbcode_tpl($tpl));	}	/**	* Second parse quote tag	*/	function bbcode_second_pass_quote($username, $quote)	{		// when using the /e modifier, preg_replace slashes double-quotes but does not		// seem to slash anything else		$quote = str_replace('\"', '"', $quote);		$username = str_replace('\"', '"', $username);		// remove newline at the beginning		if ($quote == "\n")		{			$quote = '';		}		$quote = (($username) ? str_replace('$1', $username, $this->bbcode_tpl('quote_username_open')) : $this->bbcode_tpl('quote_open')) . $quote;		return $quote;	}	/**	* Second parse code tag	*/	function bbcode_second_pass_code($type, $code)	{		// when using the /e modifier, preg_replace slashes double-quotes but does not		// seem to slash anything else		$code = str_replace('\"', '"', $code);		switch ($type)		{			case 'php':				// Not the english way, but valid because of hardcoded syntax highlighting				if (strpos($code, '<span class="syntaxdefault"><br /></span>') === 0)				{					$code = substr($code, 41);				}			// no break;			default:				$code = str_replace("\t", '&nbsp; &nbsp;', $code);				$code = str_replace('  ', '&nbsp; ', $code);				$code = str_replace('  ', ' &nbsp;', $code);				$code = str_replace("\n ", "\n&nbsp;", $code);				// keep space at the beginning				if (!empty($code) && $code[0] == ' ')				{					$code = '&nbsp;' . substr($code, 1);				}				// remove newline at the beginning				if (!empty($code) && $code[0] == "\n")				{					$code = substr($code, 1);				}			break;		}		$code = $this->bbcode_tpl('code_open') . $code . $this->bbcode_tpl('code_close');		return $code;	}}?>
<?php/**** acp_modules [English]** @package language* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** DO NOT CHANGE*/if (!defined('IN_PHPBB')){	exit;}if (empty($lang) || !is_array($lang)){	$lang = array();}// DEVELOPERS PLEASE NOTE//// All language files should use UTF-8 as their encoding and the files must not contain a BOM.//// Placeholders can now contain order information, e.g. instead of// 'Page %s of %s' you can (and should) write 'Page %1$s of %2$s', this allows// translators to re-order the output of data while ensuring it remains correct//// You do not need this where single placeholders are used, e.g. 'Message %d' is fine// equally where a string contains only two placeholders which are used to wrap text// in a url you again do not need to specify an order e.g., 'Click %sHERE%s' is fine$lang = array_merge($lang, array(	'ACP_MODULE_MANAGEMENT_EXPLAIN'	=> 'Here you are able to manage all kind of modules. Please note that the ACP has a three-level menu structure (Category -> Category -> Module) whereby the others having a two-level menu structure (Category -> Module) which must be kept. Please also be aware that you may lock out yourself if you disable or delete the modules responsible for the module management itself.',	'ADD_MODULE'					=> 'Add module',	'ADD_MODULE_CONFIRM'			=> 'Are you sure you want to add the selected module with the selected mode?',	'ADD_MODULE_TITLE'				=> 'Add module',	'CANNOT_REMOVE_MODULE'	=> 'Unable to remove module, it has assigned children. Please remove or move all children before performing this action.',	'CATEGORY'				=> 'Category',	'CHOOSE_MODE'			=> 'Choose module mode',	'CHOOSE_MODE_EXPLAIN'	=> 'Choose the modules mode being used.',	'CHOOSE_MODULE'			=> 'Choose module',	'CHOOSE_MODULE_EXPLAIN'	=> 'Choose the file being called by this module.',	'CREATE_MODULE'			=> 'Create new module',	'DEACTIVATED_MODULE'	=> 'Deactivated module',	'DELETE_MODULE'			=> 'Delete module',	'DELETE_MODULE_CONFIRM'	=> 'Are you sure you want to remove this module?',	'EDIT_MODULE'			=> 'Edit module',	'EDIT_MODULE_EXPLAIN'	=> 'Here you are able to enter module specific settings.',	'HIDDEN_MODULE'			=> 'Hidden module',	'MODULE'					=> 'Module',	'MODULE_ADDED'				=> 'Module successfully added.',	'MODULE_DELETED'			=> 'Module successfully removed.',	'MODULE_DISPLAYED'			=> 'Module displayed',	'MODULE_DISPLAYED_EXPLAIN'	=> 'If you do not wish to display this module, but want to use it, set this to no.',	'MODULE_EDITED'				=> 'Module successfully edited.',	'MODULE_ENABLED'			=> 'Module enabled',	'MODULE_LANGNAME'			=> 'Module language name',	'MODULE_LANGNAME_EXPLAIN'	=> 'Enter the displayed module name. Use language constant if name is served from language file.',	'MODULE_TYPE'				=> 'Module type',	'NO_CATEGORY_TO_MODULE'	=> 'Unable to turn category into module. Please remove/move all children before performing this action.',	'NO_MODULE'				=> 'No module found.',	'NO_MODULE_ID'			=> 'No module id specified.',	'NO_MODULE_LANGNAME'	=> 'No module language name specified.',	'NO_PARENT'				=> 'No Parent',	'PARENT'				=> 'Parent',	'PARENT_NO_EXIST'		=> 'Parent does not exist.',	'SELECT_MODULE'			=> 'Select a module',));?>
<?php/**** @package acp* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @package module_install*/class acp_modules_info{	function module()	{		return array(			'filename'	=> 'acp_modules',			'title'		=> 'ACP_MODULE_MANAGEMENT',			'version'	=> '1.0.0',			'modes'		=> array(				'acp'		=> array('title' => 'ACP', 'auth' => 'acl_a_modules', 'cat' => array('ACP_MODULE_MANAGEMENT')),				'ucp'		=> array('title' => 'UCP', 'auth' => 'acl_a_modules', 'cat' => array('ACP_MODULE_MANAGEMENT')),				'mcp'		=> array('title' => 'MCP', 'auth' => 'acl_a_modules', 'cat' => array('ACP_MODULE_MANAGEMENT')),			),		);	}	function install()	{	}	function uninstall()	{	}}?>
<?php/**** @package acp* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @ignore*/if (!defined('IN_PHPBB')){	exit;}/*** - Able to check for new module versions (modes changed/adjusted/added/removed)* Icons for:* - module enabled and displayed (common)* - module enabled and not displayed* - module deactivated* - category (enabled)* - category disabled*//*** @package acp*/class acp_modules{	var $module_class = '';	var $parent_id;	var $u_action;	function main($id, $mode)	{		global $db, $user, $auth, $template, $module;		global $config, $phpbb_admin_path, $phpbb_root_path, $phpEx;		// Set a global define for modules we might include (the author is able to prevent execution of code by checking this constant)		define('MODULE_INCLUDE', true);		$user->add_lang('acp/modules');		$this->tpl_name = 'acp_modules';		// module class		$this->module_class = $mode;		if ($this->module_class == 'ucp')		{			$user->add_lang('ucp');		}		else if ($this->module_class == 'mcp')		{			$user->add_lang('mcp');		}		if ($module->p_class != $this->module_class)		{			$module->add_mod_info($this->module_class);		}		$this->page_title = strtoupper($this->module_class);		$this->parent_id = request_var('parent_id', 0);		$module_id = request_var('m', 0);		$action = request_var('action', '');		$errors = array();		switch ($action)		{			case 'delete':				if (!$module_id)				{					trigger_error($user->lang['NO_MODULE_ID'] . adm_back_link($this->u_action . '&amp;parent_id=' . $this->parent_id), E_USER_WARNING);				}				if (confirm_box(true))				{					// Make sure we are not directly within a module					if ($module_id == $this->parent_id)					{						$sql = 'SELECT parent_id							FROM ' . MODULES_TABLE . '							WHERE module_id = ' . $module_id;						$result = $db->sql_query($sql);						$this->parent_id = (int) $db->sql_fetchfield('parent_id');						$db->sql_freeresult($result);					}					$errors = $this->delete_module($module_id);					if (!sizeof($errors))					{						$this->remove_cache_file();						trigger_error($user->lang['MODULE_DELETED'] . adm_back_link($this->u_action . '&amp;parent_id=' . $this->parent_id));					}				}				else				{					confirm_box(false, 'DELETE_MODULE', build_hidden_fields(array(						'i'			=> $id,						'mode'		=> $mode,						'parent_id'	=> $this->parent_id,						'module_id'	=> $module_id,						'action'	=> $action,					)));				}			break;						case 'enable':			case 'disable':				if (!$module_id)				{					trigger_error($user->lang['NO_MODULE_ID'] . adm_back_link($this->u_action . '&amp;parent_id=' . $this->parent_id), E_USER_WARNING);				}				$sql = 'SELECT *					FROM ' . MODULES_TABLE . "					WHERE module_class = '" . $db->sql_escape($this->module_class) . "'						AND module_id = $module_id";				$result = $db->sql_query($sql);				$row = $db->sql_fetchrow($result);				$db->sql_freeresult($result);				if (!$row)				{					trigger_error($user->lang['NO_MODULE'] . adm_back_link($this->u_action . '&amp;parent_id=' . $this->parent_id), E_USER_WARNING);				}				$sql = 'UPDATE ' . MODULES_TABLE . '					SET module_enabled = ' . (($action == 'enable') ? 1 : 0) . "					WHERE module_class = '" . $db->sql_escape($this->module_class) . "'						AND module_id = $module_id";				$db->sql_query($sql);				add_log('admin', 'LOG_MODULE_' . strtoupper($action), $this->lang_name($row['module_langname']));				$this->remove_cache_file();			break;			case 'move_up':			case 'move_down':				if (!$module_id)				{					trigger_error($user->lang['NO_MODULE_ID'] . adm_back_link($this->u_action . '&amp;parent_id=' . $this->parent_id), E_USER_WARNING);				}				$sql = 'SELECT *					FROM ' . MODULES_TABLE . "					WHERE module_class = '" . $db->sql_escape($this->module_class) . "'						AND module_id = $module_id";				$result = $db->sql_query($sql);				$row = $db->sql_fetchrow($result);				$db->sql_freeresult($result);				if (!$row)				{					trigger_error($user->lang['NO_MODULE'] . adm_back_link($this->u_action . '&amp;parent_id=' . $this->parent_id), E_USER_WARNING);				}				$move_module_name = $this->move_module_by($row, $action, 1);				if ($move_module_name !== false)				{					add_log('admin', 'LOG_MODULE_' . strtoupper($action), $this->lang_name($row['module_langname']), $move_module_name);					$this->remove_cache_file();				}					break;			case 'quickadd':				$quick_install = request_var('quick_install', '');				if (confirm_box(true))				{					if (!$quick_install || strpos($quick_install, '::') === false)					{						break;					}					list($module_basename, $module_mode) = explode('::', $quick_install);					// Check if module name and mode exist...					$fileinfo = $this->get_module_infos($module_basename);					$fileinfo = $fileinfo[$module_basename];					if (isset($fileinfo['modes'][$module_mode]))					{						$module_data = array(							'module_basename'	=> $module_basename,							'module_enabled'	=> 0,							'module_display'	=> (isset($fileinfo['modes'][$module_mode]['display'])) ? $fileinfo['modes'][$module_mode]['display'] : 1,							'parent_id'			=> $this->parent_id,							'module_class'		=> $this->module_class,							'module_langname'	=> $fileinfo['modes'][$module_mode]['title'],							'module_mode'		=> $module_mode,							'module_auth'		=> $fileinfo['modes'][$module_mode]['auth'],						);						$errors = $this->update_module_data($module_data);						if (!sizeof($errors))						{							$this->remove_cache_file();								trigger_error($user->lang['MODULE_ADDED'] . adm_back_link($this->u_action . '&amp;parent_id=' . $this->parent_id));						}					}				}				else				{					confirm_box(false, 'ADD_MODULE', build_hidden_fields(array(						'i'			=> $id,						'mode'		=> $mode,						'parent_id'	=> $this->parent_id,						'action'	=> 'quickadd',						'quick_install'	=> $quick_install,					)));				}			break;			case 'edit':				if (!$module_id)				{					trigger_error($user->lang['NO_MODULE_ID'] . adm_back_link($this->u_action . '&amp;parent_id=' . $this->parent_id), E_USER_WARNING);				}								$module_row = $this->get_module_row($module_id);			// no break			case 'add':				if ($action == 'add')				{					$module_row = array(						'module_basename'	=> '',						'module_enabled'	=> 0,						'module_display'	=> 1,						'parent_id'			=> 0,						'module_langname'	=> utf8_normalize_nfc(request_var('module_langname', '', true)),						'module_mode'		=> '',						'module_auth'		=> '',					);				}								$module_data = array();				$module_data['module_basename'] = request_var('module_basename', (string) $module_row['module_basename']);				$module_data['module_enabled'] = request_var('module_enabled', (int) $module_row['module_enabled']);				$module_data['module_display'] = request_var('module_display', (int) $module_row['module_display']);				$module_data['parent_id'] = request_var('module_parent_id', (int) $module_row['parent_id']);				$module_data['module_class'] = $this->module_class;				$module_data['module_langname'] = utf8_normalize_nfc(request_var('module_langname', (string) $module_row['module_langname'], true));				$module_data['module_mode'] = request_var('module_mode', (string) $module_row['module_mode']);				$submit = (isset($_POST['submit'])) ? true : false;				if ($submit)				{					if (!$module_data['module_langname'])					{						trigger_error($user->lang['NO_MODULE_LANGNAME'] . adm_back_link($this->u_action . '&amp;parent_id=' . $this->parent_id), E_USER_WARNING);					}					$module_type = request_var('module_type', 'category');					if ($module_type == 'category')					{						$module_data['module_basename'] = $module_data['module_mode'] = $module_data['module_auth'] = '';						$module_data['module_display'] = 1;					}					if ($action == 'edit')					{						$module_data['module_id'] = $module_id;					}					// Adjust auth row					if ($module_data['module_basename'] && $module_data['module_mode'])					{						$fileinfo = $this->get_module_infos($module_data['module_basename']);						$module_data['module_auth'] = $fileinfo[$module_data['module_basename']]['modes'][$module_data['module_mode']]['auth'];					}					$errors = $this->update_module_data($module_data);					if (!sizeof($errors))					{						$this->remove_cache_file();							trigger_error((($action == 'add') ? $user->lang['MODULE_ADDED'] : $user->lang['MODULE_EDITED']) . adm_back_link($this->u_action . '&amp;parent_id=' . $this->parent_id));					}				}				// Category/not category?				$is_cat = (!$module_data['module_basename']) ? true : false;				// Get module information				$module_infos = $this->get_module_infos();				// Build name options				$s_name_options = $s_mode_options = '';				foreach ($module_infos as $option => $values)				{					if (!$module_data['module_basename'])					{						$module_data['module_basename'] = $option;					}					// Name options					$s_name_options .= '<option value="' . $option . '"' . (($option == $module_data['module_basename']) ? ' selected="selected"' : '') . '>' . $this->lang_name($values['title']) . ' [' . $this->module_class . '_' . $option . ']</option>';					$template->assign_block_vars('m_names', array('NAME' => $option, 'A_NAME' => addslashes($option)));					// Build module modes					foreach ($values['modes'] as $m_mode => $m_values)					{						if ($option == $module_data['module_basename'])						{							$s_mode_options .= '<option value="' . $m_mode . '"' . (($m_mode == $module_data['module_mode']) ? ' selected="selected"' : '') . '>' . $this->lang_name($m_values['title']) . '</option>';						}												$template->assign_block_vars('m_names.modes', array(							'OPTION'		=> $m_mode,							'VALUE'			=> $this->lang_name($m_values['title']),							'A_OPTION'		=> addslashes($m_mode),							'A_VALUE'		=> addslashes($this->lang_name($m_values['title'])))						);					}				}								$s_cat_option = '<option value="0"' . (($module_data['parent_id'] == 0) ? ' selected="selected"' : '') . '>' . $user->lang['NO_PARENT'] . '</option>';				$template->assign_vars(array_merge(array(					'S_EDIT_MODULE'		=> true,					'S_IS_CAT'			=> $is_cat,					'S_CAT_OPTIONS'		=> $s_cat_option . $this->make_module_select($module_data['parent_id'], ($action == 'edit') ? $module_row['module_id'] : false, false, false, false, true),					'S_MODULE_NAMES'	=> $s_name_options,					'S_MODULE_MODES'	=> $s_mode_options,					'U_BACK'			=> $this->u_action . '&amp;parent_id=' . $this->parent_id,					'U_EDIT_ACTION'		=> $this->u_action . '&amp;parent_id=' . $this->parent_id,					'L_TITLE'			=> $user->lang[strtoupper($action) . '_MODULE'],										'MODULENAME'		=> $this->lang_name($module_data['module_langname']),					'ACTION'			=> $action,					'MODULE_ID'			=> $module_id,				),					array_change_key_case($module_data, CASE_UPPER))				);				if (sizeof($errors))				{					$template->assign_vars(array(						'S_ERROR'	=> true,						'ERROR_MSG'	=> implode('<br />', $errors))					);				}				return;			break;		}		// Default management page		if (sizeof($errors))		{			$template->assign_vars(array(				'S_ERROR'	=> true,				'ERROR_MSG'	=> implode('<br />', $errors))			);		}		if (!$this->parent_id)		{			$navigation = strtoupper($this->module_class);		}		else		{			$navigation = '<a href="' . $this->u_action . '">' . strtoupper($this->module_class) . '</a>';			$modules_nav = $this->get_module_branch($this->parent_id, 'parents', 'descending');			foreach ($modules_nav as $row)			{				$langname = $this->lang_name($row['module_langname']);				if ($row['module_id'] == $this->parent_id)				{					$navigation .= ' -&gt; ' . $langname;				}				else				{					$navigation .= ' -&gt; <a href="' . $this->u_action . '&amp;parent_id=' . $row['module_id'] . '">' . $langname . '</a>';				}			}		}		// Jumpbox		$module_box = $this->make_module_select($this->parent_id, false, false, false, false);		$sql = 'SELECT *			FROM ' . MODULES_TABLE . "			WHERE parent_id = {$this->parent_id}				AND module_class = '" . $db->sql_escape($this->module_class) . "'			ORDER BY left_id";		$result = $db->sql_query($sql);		if ($row = $db->sql_fetchrow($result))		{			do			{				$langname = $this->lang_name($row['module_langname']);				if (!$row['module_enabled'])				{					$module_image = '<img src="images/icon_folder_lock.gif" alt="' . $user->lang['DEACTIVATED_MODULE'] .'" />';				}				else				{					$module_image = (!$row['module_basename'] || $row['left_id'] + 1 != $row['right_id']) ? '<img src="images/icon_subfolder.gif" alt="' . $user->lang['CATEGORY'] . '" />' : '<img src="images/icon_folder.gif" alt="' . $user->lang['MODULE'] . '" />';				}				$url = $this->u_action . '&amp;parent_id=' . $this->parent_id . '&amp;m=' . $row['module_id'];				$template->assign_block_vars('modules', array(					'MODULE_IMAGE'		=> $module_image,					'MODULE_TITLE'		=> $langname,					'MODULE_ENABLED'	=> ($row['module_enabled']) ? true : false,					'MODULE_DISPLAYED'	=> ($row['module_display']) ? true : false,					'S_ACP_CAT_SYSTEM'			=> ($this->module_class == 'acp' && $row['module_langname'] == 'ACP_CAT_SYSTEM') ? true : false,					'S_ACP_MODULE_MANAGEMENT'	=> ($this->module_class == 'acp' && ($row['module_basename'] == 'modules' || $row['module_langname'] == 'ACP_MODULE_MANAGEMENT')) ? true : false,					'U_MODULE'			=> $this->u_action . '&amp;parent_id=' . $row['module_id'],					'U_MOVE_UP'			=> $url . '&amp;action=move_up',					'U_MOVE_DOWN'		=> $url . '&amp;action=move_down',					'U_EDIT'			=> $url . '&amp;action=edit',					'U_DELETE'			=> $url . '&amp;action=delete',					'U_ENABLE'			=> $url . '&amp;action=enable',					'U_DISABLE'			=> $url . '&amp;action=disable')				);			}			while ($row = $db->sql_fetchrow($result));		}		else if ($this->parent_id)		{			$row = $this->get_module_row($this->parent_id);			$url = $this->u_action . '&amp;parent_id=' . $this->parent_id . '&amp;m=' . $row['module_id'];			$template->assign_vars(array(				'S_NO_MODULES'		=> true,				'MODULE_TITLE'		=> $langname,				'MODULE_ENABLED'	=> ($row['module_enabled']) ? true : false,				'MODULE_DISPLAYED'	=> ($row['module_display']) ? true : false,				'U_EDIT'			=> $url . '&amp;action=edit',				'U_DELETE'			=> $url . '&amp;action=delete',				'U_ENABLE'			=> $url . '&amp;action=enable',				'U_DISABLE'			=> $url . '&amp;action=disable')			);		}		$db->sql_freeresult($result);		// Quick adding module		$module_infos = $this->get_module_infos();		// Build quick options		$s_install_options = '';		foreach ($module_infos as $option => $values)		{			// Name options			$s_install_options .= '<optgroup label="' . $this->lang_name($values['title']) . ' [' . $this->module_class . '_' . $option . ']">';			// Build module modes			foreach ($values['modes'] as $m_mode => $m_values)			{				$s_install_options .= '<option value="' . $option . '::' . $m_mode . '">&nbsp; &nbsp;' . $this->lang_name($m_values['title']) . '</option>';			}			$s_install_options .= '</optgroup>';		}		$template->assign_vars(array(			'U_SEL_ACTION'		=> $this->u_action,			'U_ACTION'			=> $this->u_action . '&amp;parent_id=' . $this->parent_id,			'NAVIGATION'		=> $navigation,			'MODULE_BOX'		=> $module_box,			'PARENT_ID'			=> $this->parent_id,			'S_INSTALL_OPTIONS'	=> $s_install_options,			)		);	}	/**	* Get row for specified module	*/	function get_module_row($module_id)	{		global $db, $user;		$sql = 'SELECT *			FROM ' . MODULES_TABLE . "			WHERE module_class = '" . $db->sql_escape($this->module_class) . "'				AND module_id = $module_id";		$result = $db->sql_query($sql);		$row = $db->sql_fetchrow($result);		$db->sql_freeresult($result);				if (!$row)		{			trigger_error($user->lang['NO_MODULE'] . adm_back_link($this->u_action . '&amp;parent_id=' . $this->parent_id), E_USER_WARNING);		}		return $row;	}		/**	* Get available module information from module files	*/	function get_module_infos($module = '', $module_class = false)	{		global $phpbb_root_path, $phpEx;				$module_class = ($module_class === false) ? $this->module_class : $module_class;		$directory = $phpbb_root_path . 'includes/' . $module_class . '/info/';		$fileinfo = array();		if (!$module)		{			$dh = @opendir($directory);			if (!$dh)			{				return $fileinfo;			}			while (($file = readdir($dh)) !== false)			{				// Is module?				if (preg_match('/^' . $module_class . '_.+\.' . $phpEx . '$/', $file))				{					$class = str_replace(".$phpEx", '', $file) . '_info';					if (!class_exists($class))					{						include($directory . $file);					}					// Get module title tag					if (class_exists($class))					{						$c_class = new $class();						$module_info = $c_class->module();						$fileinfo[str_replace($module_class . '_', '', $module_info['filename'])] = $module_info;					}				}			}			closedir($dh);			ksort($fileinfo);		}		else		{			$filename = $module_class . '_' . basename($module);			$class = $module_class . '_' . basename($module) . '_info';			if (!class_exists($class))			{				include($directory . $filename . '.' . $phpEx);			}			// Get module title tag			if (class_exists($class))			{				$c_class = new $class();				$module_info = $c_class->module();				$fileinfo[str_replace($module_class . '_', '', $module_info['filename'])] = $module_info;			}		}				return $fileinfo;	}	/**	* Simple version of jumpbox, just lists modules	*/	function make_module_select($select_id = false, $ignore_id = false, $ignore_acl = false, $ignore_nonpost = false, $ignore_emptycat = true, $ignore_noncat = false)	{		global $db, $user, $auth, $config;		$sql = 'SELECT module_id, module_enabled, module_basename, parent_id, module_langname, left_id, right_id, module_auth			FROM ' . MODULES_TABLE . "			WHERE module_class = '" . $db->sql_escape($this->module_class) . "'			ORDER BY left_id ASC";		$result = $db->sql_query($sql);		$right = $iteration = 0;		$padding_store = array('0' => '');		$module_list = $padding = '';		while ($row = $db->sql_fetchrow($result))		{			if ($row['left_id'] < $right)			{				$padding .= '&nbsp; &nbsp;';				$padding_store[$row['parent_id']] = $padding;			}			else if ($row['left_id'] > $right + 1)			{				$padding = (isset($padding_store[$row['parent_id']])) ? $padding_store[$row['parent_id']] : '';			}			$right = $row['right_id'];			if (!$ignore_acl && $row['module_auth'])			{				// We use zero as the forum id to check - global setting.				if (!p_master::module_auth($row['module_auth'], 0))				{					continue;				}			}			// ignore this module?			if ((is_array($ignore_id) && in_array($row['module_id'], $ignore_id)) || $row['module_id'] == $ignore_id)			{				continue;			}			// empty category			if (!$row['module_basename'] && ($row['left_id'] + 1 == $row['right_id']) && $ignore_emptycat)			{				continue;			}			// ignore non-category?			if ($row['module_basename'] && $ignore_noncat)			{				continue;			}			$selected = (is_array($select_id)) ? ((in_array($row['module_id'], $select_id)) ? ' selected="selected"' : '') : (($row['module_id'] == $select_id) ? ' selected="selected"' : '');			$langname = $this->lang_name($row['module_langname']);			$module_list .= '<option value="' . $row['module_id'] . '"' . $selected . ((!$row['module_enabled']) ? ' class="disabled"' : '') . '>' . $padding . $langname . '</option>';			$iteration++;		}		$db->sql_freeresult($result);		unset($padding_store);		return $module_list;	}	/**	* Get module branch	*/	function get_module_branch($module_id, $type = 'all', $order = 'descending', $include_module = true)	{		global $db;		switch ($type)		{			case 'parents':				$condition = 'm1.left_id BETWEEN m2.left_id AND m2.right_id';			break;			case 'children':				$condition = 'm2.left_id BETWEEN m1.left_id AND m1.right_id';			break;			default:				$condition = 'm2.left_id BETWEEN m1.left_id AND m1.right_id OR m1.left_id BETWEEN m2.left_id AND m2.right_id';			break;		}		$rows = array();		$sql = 'SELECT m2.*			FROM ' . MODULES_TABLE . ' m1			LEFT JOIN ' . MODULES_TABLE . " m2 ON ($condition)			WHERE m1.module_class = '" . $db->sql_escape($this->module_class) . "'				AND m2.module_class = '" . $db->sql_escape($this->module_class) . "'				AND m1.module_id = $module_id			ORDER BY m2.left_id " . (($order == 'descending') ? 'ASC' : 'DESC');		$result = $db->sql_query($sql);		while ($row = $db->sql_fetchrow($result))		{			if (!$include_module && $row['module_id'] == $module_id)			{				continue;			}			$rows[] = $row;		}		$db->sql_freeresult($result);		return $rows;	}	/**	* Remove modules cache file	*/	function remove_cache_file()	{		global $cache;		// Sanitise for future path use, it's escaped as appropriate for queries		$p_class = str_replace(array('.', '/', '\\'), '', basename($this->module_class));				$cache->destroy('_modules_' . $p_class);		// Additionally remove sql cache		$cache->destroy('sql', MODULES_TABLE);	}	/**	* Return correct language name	*/	function lang_name($module_langname)	{		global $user;		return (!empty($user->lang[$module_langname])) ? $user->lang[$module_langname] : $module_langname;	}	/**	* Update/Add module	*	* @param bool $run_inline if set to true errors will be returned and no logs being written	*/	function update_module_data(&$module_data, $run_inline = false)	{		global $db, $user;		if (!isset($module_data['module_id']))		{			// no module_id means we're creating a new category/module			if ($module_data['parent_id'])			{				$sql = 'SELECT left_id, right_id					FROM ' . MODULES_TABLE . "					WHERE module_class = '" . $db->sql_escape($module_data['module_class']) . "'						AND module_id = " . (int) $module_data['parent_id'];				$result = $db->sql_query($sql);				$row = $db->sql_fetchrow($result);				$db->sql_freeresult($result);				if (!$row)				{					if ($run_inline)					{						return 'PARENT_NO_EXIST';					}					trigger_error($user->lang['PARENT_NO_EXIST'] . adm_back_link($this->u_action . '&amp;parent_id=' . $this->parent_id), E_USER_WARNING);				}				// Workaround				$row['left_id'] = (int) $row['left_id'];				$row['right_id'] = (int) $row['right_id'];				$sql = 'UPDATE ' . MODULES_TABLE . "					SET left_id = left_id + 2, right_id = right_id + 2					WHERE module_class = '" . $db->sql_escape($module_data['module_class']) . "'						AND left_id > {$row['right_id']}";				$db->sql_query($sql);				$sql = 'UPDATE ' . MODULES_TABLE . "					SET right_id = right_id + 2					WHERE module_class = '" . $db->sql_escape($module_data['module_class']) . "'						AND {$row['left_id']} BETWEEN left_id AND right_id";				$db->sql_query($sql);				$module_data['left_id'] = (int) $row['right_id'];				$module_data['right_id'] = (int) $row['right_id'] + 1;			}			else			{				$sql = 'SELECT MAX(right_id) AS right_id					FROM ' . MODULES_TABLE . "					WHERE module_class = '" . $db->sql_escape($module_data['module_class']) . "'";				$result = $db->sql_query($sql);				$row = $db->sql_fetchrow($result);				$db->sql_freeresult($result);				$module_data['left_id'] = (int) $row['right_id'] + 1;				$module_data['right_id'] = (int) $row['right_id'] + 2;			}			$sql = 'INSERT INTO ' . MODULES_TABLE . ' ' . $db->sql_build_array('INSERT', $module_data);			$db->sql_query($sql);			$module_data['module_id'] = $db->sql_nextid();			if (!$run_inline)			{				add_log('admin', 'LOG_MODULE_ADD', $this->lang_name($module_data['module_langname']));			}		}		else		{			$row = $this->get_module_row($module_data['module_id']);			if ($module_data['module_basename'] && !$row['module_basename'])			{				// we're turning a category into a module				$branch = $this->get_module_branch($module_data['module_id'], 'children', 'descending', false);				if (sizeof($branch))				{					return array($user->lang['NO_CATEGORY_TO_MODULE']);				}			}			if ($row['parent_id'] != $module_data['parent_id'])			{				$this->move_module($module_data['module_id'], $module_data['parent_id']);			}			$update_ary = $module_data;			unset($update_ary['module_id']);			$sql = 'UPDATE ' . MODULES_TABLE . '				SET ' . $db->sql_build_array('UPDATE', $update_ary) . "				WHERE module_class = '" . $db->sql_escape($module_data['module_class']) . "'					AND module_id = " . (int) $module_data['module_id'];			$db->sql_query($sql);			if (!$run_inline)			{				add_log('admin', 'LOG_MODULE_EDIT', $this->lang_name($module_data['module_langname']));			}		}		return array();	}	/**	* Move module around the tree	*/	function move_module($from_module_id, $to_parent_id)	{		global $db;		$moved_modules = $this->get_module_branch($from_module_id, 'children', 'descending');		$from_data = $moved_modules[0];		$diff = sizeof($moved_modules) * 2;		$moved_ids = array();		for ($i = 0; $i < sizeof($moved_modules); ++$i)		{			$moved_ids[] = $moved_modules[$i]['module_id'];		}		// Resync parents		$sql = 'UPDATE ' . MODULES_TABLE . "			SET right_id = right_id - $diff			WHERE module_class = '" . $db->sql_escape($this->module_class) . "'				AND left_id < " . (int) $from_data['right_id'] . '				AND right_id > ' . (int) $from_data['right_id'];		$db->sql_query($sql);		// Resync righthand side of tree		$sql = 'UPDATE ' . MODULES_TABLE . "			SET left_id = left_id - $diff, right_id = right_id - $diff			WHERE module_class = '" . $db->sql_escape($this->module_class) . "'				AND left_id > " . (int) $from_data['right_id'];		$db->sql_query($sql);		if ($to_parent_id > 0)		{			$to_data = $this->get_module_row($to_parent_id);			// Resync new parents			$sql = 'UPDATE ' . MODULES_TABLE . "				SET right_id = right_id + $diff				WHERE module_class = '" . $db->sql_escape($this->module_class) . "'					AND " . (int) $to_data['right_id'] . ' BETWEEN left_id AND right_id					AND ' . $db->sql_in_set('module_id', $moved_ids, true);			$db->sql_query($sql);			// Resync the righthand side of the tree			$sql = 'UPDATE ' . MODULES_TABLE . "				SET left_id = left_id + $diff, right_id = right_id + $diff				WHERE module_class = '" . $db->sql_escape($this->module_class) . "'					AND left_id > " . (int) $to_data['right_id'] . '					AND ' . $db->sql_in_set('module_id', $moved_ids, true);			$db->sql_query($sql);			// Resync moved branch			$to_data['right_id'] += $diff;			if ($to_data['right_id'] > $from_data['right_id'])			{				$diff = '+ ' . ($to_data['right_id'] - $from_data['right_id'] - 1);			}			else			{				$diff = '- ' . abs($to_data['right_id'] - $from_data['right_id'] - 1);			}		}		else		{			$sql = 'SELECT MAX(right_id) AS right_id				FROM ' . MODULES_TABLE . "				WHERE module_class = '" . $db->sql_escape($this->module_class) . "'					AND " . $db->sql_in_set('module_id', $moved_ids, true);			$result = $db->sql_query($sql);			$row = $db->sql_fetchrow($result);			$db->sql_freeresult($result);			$diff = '+ ' . (int) ($row['right_id'] - $from_data['left_id'] + 1);		}		$sql = 'UPDATE ' . MODULES_TABLE . "			SET left_id = left_id $diff, right_id = right_id $diff			WHERE module_class = '" . $db->sql_escape($this->module_class) . "'				AND " . $db->sql_in_set('module_id', $moved_ids);		$db->sql_query($sql);	}	/**	* Remove module from tree	*/	function delete_module($module_id)	{		global $db, $user;		$row = $this->get_module_row($module_id);		$branch = $this->get_module_branch($module_id, 'children', 'descending', false);		if (sizeof($branch))		{			return array($user->lang['CANNOT_REMOVE_MODULE']);		}		// If not move		$diff = 2;		$sql = 'DELETE FROM ' . MODULES_TABLE . "			WHERE module_class = '" . $db->sql_escape($this->module_class) . "'				AND module_id = $module_id";		$db->sql_query($sql);		$row['right_id'] = (int) $row['right_id'];		$row['left_id'] = (int) $row['left_id'];		// Resync tree		$sql = 'UPDATE ' . MODULES_TABLE . "			SET right_id = right_id - $diff			WHERE module_class = '" . $db->sql_escape($this->module_class) . "'				AND left_id < {$row['right_id']} AND right_id > {$row['right_id']}";		$db->sql_query($sql);		$sql = 'UPDATE ' . MODULES_TABLE . "			SET left_id = left_id - $diff, right_id = right_id - $diff			WHERE module_class = '" . $db->sql_escape($this->module_class) . "'				AND left_id > {$row['right_id']}";		$db->sql_query($sql);		add_log('admin', 'LOG_MODULE_REMOVED', $this->lang_name($row['module_langname']));		return array();	}	/**	* Move module position by $steps up/down	*/	function move_module_by($module_row, $action = 'move_up', $steps = 1)	{		global $db;		/**		* Fetch all the siblings between the module's current spot		* and where we want to move it to. If there are less than $steps		* siblings between the current spot and the target then the		* module will move as far as possible		*/		$sql = 'SELECT module_id, left_id, right_id, module_langname			FROM ' . MODULES_TABLE . "			WHERE module_class = '" . $db->sql_escape($this->module_class) . "'				AND parent_id = " . (int) $module_row['parent_id'] . '				AND ' . (($action == 'move_up') ? 'right_id < ' . (int) $module_row['right_id'] . ' ORDER BY right_id DESC' : 'left_id > ' . (int) $module_row['left_id'] . ' ORDER BY left_id ASC');		$result = $db->sql_query_limit($sql, $steps);		$target = array();		while ($row = $db->sql_fetchrow($result))		{			$target = $row;		}		$db->sql_freeresult($result);		if (!sizeof($target))		{			// The module is already on top or bottom			return false;		}		/**		* $left_id and $right_id define the scope of the nodes that are affected by the move.		* $diff_up and $diff_down are the values to substract or add to each node's left_id		* and right_id in order to move them up or down.		* $move_up_left and $move_up_right define the scope of the nodes that are moving		* up. Other nodes in the scope of ($left_id, $right_id) are considered to move down.		*/		if ($action == 'move_up')		{			$left_id = (int) $target['left_id'];			$right_id = (int) $module_row['right_id'];			$diff_up = (int) ($module_row['left_id'] - $target['left_id']);			$diff_down = (int) ($module_row['right_id'] + 1 - $module_row['left_id']);			$move_up_left = (int) $module_row['left_id'];			$move_up_right = (int) $module_row['right_id'];		}		else		{			$left_id = (int) $module_row['left_id'];			$right_id = (int) $target['right_id'];			$diff_up = (int) ($module_row['right_id'] + 1 - $module_row['left_id']);			$diff_down = (int) ($target['right_id'] - $module_row['right_id']);			$move_up_left = (int) ($module_row['right_id'] + 1);			$move_up_right = (int) $target['right_id'];		}		// Now do the dirty job		$sql = 'UPDATE ' . MODULES_TABLE . "			SET left_id = left_id + CASE				WHEN left_id BETWEEN {$move_up_left} AND {$move_up_right} THEN -{$diff_up}				ELSE {$diff_down}			END,			right_id = right_id + CASE				WHEN right_id BETWEEN {$move_up_left} AND {$move_up_right} THEN -{$diff_up}				ELSE {$diff_down}			END			WHERE module_class = '" . $db->sql_escape($this->module_class) . "'				AND left_id BETWEEN {$left_id} AND {$right_id}				AND right_id BETWEEN {$left_id} AND {$right_id}";		$db->sql_query($sql);		$this->remove_cache_file();		return $this->lang_name($target['module_langname']);	}}?>
<?php return array(''=>'');
<?php/**** @package phpBB3* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//***//*** @ignore*/define('IN_PHPBB', true);$phpbb_root_path = (defined('PHPBB_ROOT_PATH')) ? PHPBB_ROOT_PATH : './';$phpEx = substr(strrchr(__FILE__, '.'), 1);include($phpbb_root_path . 'common.' . $phpEx);include($phpbb_root_path . 'includes/functions_display.' . $phpEx);// Start session management$user->session_begin();$auth->acl($user->data);$user->setup('viewforum');display_forums('', $config['load_moderators']);// Set some stats, get posts count from forums data if we... hum... retrieve all forums data$total_posts	= $config['num_posts'];$total_topics	= $config['num_topics'];$total_users	= $config['num_users'];$l_total_user_s = ($total_users == 0) ? 'TOTAL_USERS_ZERO' : 'TOTAL_USERS_OTHER';$l_total_post_s = ($total_posts == 0) ? 'TOTAL_POSTS_ZERO' : 'TOTAL_POSTS_OTHER';$l_total_topic_s = ($total_topics == 0) ? 'TOTAL_TOPICS_ZERO' : 'TOTAL_TOPICS_OTHER';// Grab group details for legend displayif ($auth->acl_gets('a_group', 'a_groupadd', 'a_groupdel')){	$sql = 'SELECT group_id, group_name, group_colour, group_type		FROM ' . GROUPS_TABLE . '		WHERE group_legend = 1		ORDER BY group_name ASC';}else{	$sql = 'SELECT g.group_id, g.group_name, g.group_colour, g.group_type		FROM ' . GROUPS_TABLE . ' g		LEFT JOIN ' . USER_GROUP_TABLE . ' ug			ON (				g.group_id = ug.group_id				AND ug.user_id = ' . $user->data['user_id'] . '				AND ug.user_pending = 0			)		WHERE g.group_legend = 1			AND (g.group_type <> ' . GROUP_HIDDEN . ' OR ug.user_id = ' . $user->data['user_id'] . ')		ORDER BY g.group_name ASC';}$result = $db->sql_query($sql);$legend = array();while ($row = $db->sql_fetchrow($result)){	$colour_text = ($row['group_colour']) ? ' style="color:#' . $row['group_colour'] . '"' : '';	$group_name = ($row['group_type'] == GROUP_SPECIAL) ? $user->lang['G_' . $row['group_name']] : $row['group_name'];	if ($row['group_name'] == 'BOTS' || ($user->data['user_id'] != ANONYMOUS && !$auth->acl_get('u_viewprofile')))	{		$legend[] = '<span' . $colour_text . '>' . $group_name . '</span>';	}	else	{		$legend[] = '<a' . $colour_text . ' href="' . append_sid("{$phpbb_root_path}memberlist.$phpEx", 'mode=group&amp;g=' . $row['group_id']) . '">' . $group_name . '</a>';	}}$db->sql_freeresult($result);$legend = implode(', ', $legend);// Generate birthday list if required ...$birthday_list = '';if ($config['load_birthdays'] && $config['allow_birthdays'] && $auth->acl_gets('u_viewprofile', 'a_user', 'a_useradd', 'a_userdel')){	$now = phpbb_gmgetdate(time() + $user->timezone + $user->dst);	// Display birthdays of 29th february on 28th february in non-leap-years	$leap_year_birthdays = '';	if ($now['mday'] == 28 && $now['mon'] == 2 && !$user->format_date(time(), 'L'))	{		$leap_year_birthdays = " OR user_birthday LIKE '" . $db->sql_escape(sprintf('%2d-%2d-', 29, 2)) . "%'";	}	$sql = 'SELECT u.user_id, u.username, u.user_colour, u.user_birthday		FROM ' . USERS_TABLE . ' u		LEFT JOIN ' . BANLIST_TABLE . " b ON (u.user_id = b.ban_userid)		WHERE (b.ban_id IS NULL			OR b.ban_exclude = 1)			AND (u.user_birthday LIKE '" . $db->sql_escape(sprintf('%2d-%2d-', $now['mday'], $now['mon'])) . "%' $leap_year_birthdays)			AND u.user_type IN (" . USER_NORMAL . ', ' . USER_FOUNDER . ')';	$result = $db->sql_query($sql);	while ($row = $db->sql_fetchrow($result))	{		$birthday_list .= (($birthday_list != '') ? ', ' : '') . get_username_string('full', $row['user_id'], $row['username'], $row['user_colour']);		if ($age = (int) substr($row['user_birthday'], -4))		{			$birthday_list .= ' (' . max(0, $now['year'] - $age) . ')';		}	}	$db->sql_freeresult($result);}// Assign index specific vars$template->assign_vars(array(	'TOTAL_POSTS'	=> sprintf($user->lang[$l_total_post_s], $total_posts),	'TOTAL_TOPICS'	=> sprintf($user->lang[$l_total_topic_s], $total_topics),	'TOTAL_USERS'	=> sprintf($user->lang[$l_total_user_s], $total_users),	'NEWEST_USER'	=> sprintf($user->lang['NEWEST_USER'], get_username_string('full', $config['newest_user_id'], $config['newest_username'], $config['newest_user_colour'])),	'LEGEND'		=> $legend,	'BIRTHDAY_LIST'	=> $birthday_list,	'FORUM_IMG'				=> $user->img('forum_read', 'NO_UNREAD_POSTS'),	'FORUM_UNREAD_IMG'			=> $user->img('forum_unread', 'UNREAD_POSTS'),	'FORUM_LOCKED_IMG'		=> $user->img('forum_read_locked', 'NO_UNREAD_POSTS_LOCKED'),	'FORUM_UNREAD_LOCKED_IMG'	=> $user->img('forum_unread_locked', 'UNREAD_POSTS_LOCKED'),	'S_LOGIN_ACTION'			=> append_sid("{$phpbb_root_path}ucp.$phpEx", 'mode=login'),	'S_DISPLAY_BIRTHDAY_LIST'	=> ($config['load_birthdays']) ? true : false,	'U_MARK_FORUMS'		=> ($user->data['is_registered'] || $config['load_anon_lastread']) ? append_sid("{$phpbb_root_path}index.$phpEx", 'hash=' . generate_link_hash('global') . '&amp;mark=forums') : '',	'U_MCP'				=> ($auth->acl_get('m_') || $auth->acl_getf_global('m_')) ? append_sid("{$phpbb_root_path}mcp.$phpEx", 'i=main&amp;mode=front', true, $user->session_id) : ''));// Output pagepage_header($user->lang['INDEX']);$template->set_filenames(array(	'body' => 'index_body.html'));page_footer();?>
<?php/**** @package acp* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @ignore*/if (!defined('IN_PHPBB')){	exit;}/*** @package acp*/class acp_disallow{	var $u_action;	function main($id, $mode)	{		global $db, $user, $auth, $template, $cache;		global $config, $phpbb_root_path, $phpbb_admin_path, $phpEx;		include($phpbb_root_path . 'includes/functions_user.' . $phpEx);		$user->add_lang('acp/posting');		// Set up general vars		$this->tpl_name = 'acp_disallow';		$this->page_title = 'ACP_DISALLOW_USERNAMES';		$form_key = 'acp_disallow';		add_form_key($form_key);		$disallow = (isset($_POST['disallow'])) ? true : false;		$allow = (isset($_POST['allow'])) ? true : false;		if (($allow || $disallow) && !check_form_key($form_key))		{			trigger_error($user->lang['FORM_INVALID'] . adm_back_link($this->u_action), E_USER_WARNING);		}		if ($disallow)		{			$disallowed_user = str_replace('*', '%', utf8_normalize_nfc(request_var('disallowed_user', '', true)));			if (!$disallowed_user)			{				trigger_error($user->lang['NO_USERNAME_SPECIFIED'] . adm_back_link($this->u_action), E_USER_WARNING);			}			$sql = 'SELECT disallow_id				FROM ' . DISALLOW_TABLE . "				WHERE disallow_username = '" . $db->sql_escape($disallowed_user) . "'";			$result = $db->sql_query($sql);			$row = $db->sql_fetchrow($result);			$db->sql_freeresult($result);			if ($row)			{				trigger_error($user->lang['DISALLOWED_ALREADY'] . adm_back_link($this->u_action), E_USER_WARNING);			}			$sql = 'INSERT INTO ' . DISALLOW_TABLE . ' ' . $db->sql_build_array('INSERT', array('disallow_username' => $disallowed_user));			$db->sql_query($sql);			$cache->destroy('_disallowed_usernames');			$message = $user->lang['DISALLOW_SUCCESSFUL'];			add_log('admin', 'LOG_DISALLOW_ADD', str_replace('%', '*', $disallowed_user));			trigger_error($message . adm_back_link($this->u_action));		}		else if ($allow)		{			$disallowed_id = request_var('disallowed_id', 0);			if (!$disallowed_id)			{				trigger_error($user->lang['NO_USERNAME_SPECIFIED'] . adm_back_link($this->u_action), E_USER_WARNING);			}			$sql = 'DELETE FROM ' . DISALLOW_TABLE . '				WHERE disallow_id = ' . $disallowed_id;			$db->sql_query($sql);			$cache->destroy('_disallowed_usernames');			add_log('admin', 'LOG_DISALLOW_DELETE');			trigger_error($user->lang['DISALLOWED_DELETED'] . adm_back_link($this->u_action));		}		// Grab the current list of disallowed usernames...		$sql = 'SELECT *			FROM ' . DISALLOW_TABLE;		$result = $db->sql_query($sql);		$disallow_select = '';		while ($row = $db->sql_fetchrow($result))		{			$disallow_select .= '<option value="' . $row['disallow_id'] . '">' . str_replace('%', '*', $row['disallow_username']) . '</option>';		}		$db->sql_freeresult($result);		$template->assign_vars(array(			'U_ACTION'				=> $this->u_action,			'S_DISALLOWED_NAMES'	=> $disallow_select)		);	}}?>
<?php/**** @package ucp* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @package module_install*/class ucp_main_info{	function module()	{		return array(			'filename'	=> 'ucp_main',			'title'		=> 'UCP_MAIN',			'version'	=> '1.0.0',			'modes'		=> array(				'front'			=> array('title' => 'UCP_MAIN_FRONT', 'auth' => '', 'cat' => array('UCP_MAIN')),				'subscribed'	=> array('title' => 'UCP_MAIN_SUBSCRIBED', 'auth' => '', 'cat' => array('UCP_MAIN')),				'bookmarks'		=> array('title' => 'UCP_MAIN_BOOKMARKS', 'auth' => 'cfg_allow_bookmarks', 'cat' => array('UCP_MAIN')),				'drafts'		=> array('title' => 'UCP_MAIN_DRAFTS', 'auth' => '', 'cat' => array('UCP_MAIN')),			),		);	}	function install()	{	}	function uninstall()	{	}}?>
<?php/**** @package acp* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @ignore*/if (!defined('IN_PHPBB')){	exit;}/*** @todo [words] check regular expressions for special char replacements (stored specialchared in db)* @package acp*/class acp_words{	var $u_action;	function main($id, $mode)	{		global $db, $user, $auth, $template, $cache;		global $config, $phpbb_root_path, $phpbb_admin_path, $phpEx;		$user->add_lang('acp/posting');		// Set up general vars		$action = request_var('action', '');		$action = (isset($_POST['add'])) ? 'add' : ((isset($_POST['save'])) ? 'save' : $action);		$s_hidden_fields = '';		$word_info = array();		$this->tpl_name = 'acp_words';		$this->page_title = 'ACP_WORDS';		$form_name = 'acp_words';		add_form_key($form_name);		switch ($action)		{			case 'edit':				$word_id = request_var('id', 0);				if (!$word_id)				{					trigger_error($user->lang['NO_WORD'] . adm_back_link($this->u_action), E_USER_WARNING);				}				$sql = 'SELECT *					FROM ' . WORDS_TABLE . "					WHERE word_id = $word_id";				$result = $db->sql_query($sql);				$word_info = $db->sql_fetchrow($result);				$db->sql_freeresult($result);				$s_hidden_fields .= '<input type="hidden" name="id" value="' . $word_id . '" />';			case 'add':				$template->assign_vars(array(					'S_EDIT_WORD'		=> true,					'U_ACTION'			=> $this->u_action,					'U_BACK'			=> $this->u_action,					'WORD'				=> (isset($word_info['word'])) ? $word_info['word'] : '',					'REPLACEMENT'		=> (isset($word_info['replacement'])) ? $word_info['replacement'] : '',					'S_HIDDEN_FIELDS'	=> $s_hidden_fields)				);				return;			break;			case 'save':				if (!check_form_key($form_name))				{					trigger_error($user->lang['FORM_INVALID']. adm_back_link($this->u_action), E_USER_WARNING);				}				$word_id		= request_var('id', 0);				$word			= utf8_normalize_nfc(request_var('word', '', true));				$replacement	= utf8_normalize_nfc(request_var('replacement', '', true));				if ($word === '' || $replacement === '')				{					trigger_error($user->lang['ENTER_WORD'] . adm_back_link($this->u_action), E_USER_WARNING);				}				// Replace multiple consecutive asterisks with single one as those are not needed				$word = preg_replace('#\*{2,}#', '*', $word);				$sql_ary = array(					'word'			=> $word,					'replacement'	=> $replacement				);								if ($word_id)				{					$db->sql_query('UPDATE ' . WORDS_TABLE . ' SET ' . $db->sql_build_array('UPDATE', $sql_ary) . ' WHERE word_id = ' . $word_id);				}				else				{					$db->sql_query('INSERT INTO ' . WORDS_TABLE . ' ' . $db->sql_build_array('INSERT', $sql_ary));				}				$cache->destroy('_word_censors');				$log_action = ($word_id) ? 'LOG_WORD_EDIT' : 'LOG_WORD_ADD';				add_log('admin', $log_action, $word);				$message = ($word_id) ? $user->lang['WORD_UPDATED'] : $user->lang['WORD_ADDED'];				trigger_error($message . adm_back_link($this->u_action));			break;			case 'delete':				$word_id = request_var('id', 0);				if (!$word_id)				{					trigger_error($user->lang['NO_WORD'] . adm_back_link($this->u_action), E_USER_WARNING);				}				if (confirm_box(true))				{					$sql = 'SELECT word						FROM ' . WORDS_TABLE . "						WHERE word_id = $word_id";					$result = $db->sql_query($sql);					$deleted_word = $db->sql_fetchfield('word');					$db->sql_freeresult($result);					$sql = 'DELETE FROM ' . WORDS_TABLE . "						WHERE word_id = $word_id";					$db->sql_query($sql);					$cache->destroy('_word_censors');					add_log('admin', 'LOG_WORD_DELETE', $deleted_word);					trigger_error($user->lang['WORD_REMOVED'] . adm_back_link($this->u_action));				}				else				{					confirm_box(false, $user->lang['CONFIRM_OPERATION'], build_hidden_fields(array(						'i'			=> $id,						'mode'		=> $mode,						'id'		=> $word_id,						'action'	=> 'delete',					)));				}			break;		}		$template->assign_vars(array(			'U_ACTION'			=> $this->u_action,			'S_HIDDEN_FIELDS'	=> $s_hidden_fields)		);		$sql = 'SELECT *			FROM ' . WORDS_TABLE . '			ORDER BY word';		$result = $db->sql_query($sql);		while ($row = $db->sql_fetchrow($result))		{			$template->assign_block_vars('words', array(				'WORD'			=> $row['word'],				'REPLACEMENT'	=> $row['replacement'],				'U_EDIT'		=> $this->u_action . '&amp;action=edit&amp;id=' . $row['word_id'],				'U_DELETE'		=> $this->u_action . '&amp;action=delete&amp;id=' . $row['word_id'])			);		}		$db->sql_freeresult($result);	}}?>
<?php/**** @package ucp* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @ignore*/if (!defined('IN_PHPBB')){	exit;}/*** ucp_register* Board registration* @package ucp*/class ucp_register{	var $u_action;	function main($id, $mode)	{		global $config, $db, $user, $auth, $template, $phpbb_root_path, $phpEx;		//		if ($config['require_activation'] == USER_ACTIVATION_DISABLE)		{			trigger_error('UCP_REGISTER_DISABLE');		}		include($phpbb_root_path . 'includes/functions_profile_fields.' . $phpEx);		$coppa			= (isset($_REQUEST['coppa'])) ? ((!empty($_REQUEST['coppa'])) ? 1 : 0) : false;		$agreed			= (!empty($_POST['agreed'])) ? 1 : 0;		$submit			= (isset($_POST['submit'])) ? true : false;		$change_lang	= request_var('change_lang', '');		$user_lang		= request_var('lang', $user->lang_name);		if ($agreed)		{			add_form_key('ucp_register');		}		else		{			add_form_key('ucp_register_terms');		}		if ($change_lang || $user_lang != $config['default_lang'])		{			$use_lang = ($change_lang) ? basename($change_lang) : basename($user_lang);			if (!validate_language_iso_name($use_lang))			{				if ($change_lang)				{					$submit = false;					// Setting back agreed to let the user view the agreement in his/her language					$agreed = (empty($_GET['change_lang'])) ? 0 : $agreed;				}				$user->lang_name = $user_lang = $use_lang;				$user->lang = array();				$user->data['user_lang'] = $user->lang_name;				$user->add_lang(array('common', 'ucp'));			}			else			{				$change_lang = '';				$user_lang = $user->lang_name;			}		}		$cp = new custom_profile();		$error = $cp_data = $cp_error = array();		if (!$agreed || ($coppa === false && $config['coppa_enable']) || ($coppa && !$config['coppa_enable']))		{			$add_lang = ($change_lang) ? '&amp;change_lang=' . urlencode($change_lang) : '';			$add_coppa = ($coppa !== false) ? '&amp;coppa=' . $coppa : '';			$s_hidden_fields = array(				'change_lang'	=> $change_lang,			);			// If we change the language, we want to pass on some more possible parameter.			if ($change_lang)			{				// We do not include the password				$s_hidden_fields = array_merge($s_hidden_fields, array(					'username'			=> utf8_normalize_nfc(request_var('username', '', true)),					'email'				=> strtolower(request_var('email', '')),					'email_confirm'		=> strtolower(request_var('email_confirm', '')),					'lang'				=> $user->lang_name,					'tz'				=> request_var('tz', (float) $config['board_timezone']),				));			}			// Checking amount of available languages			$sql = 'SELECT lang_id				FROM ' . LANG_TABLE;			$result = $db->sql_query($sql);			$lang_row = array();			while ($row = $db->sql_fetchrow($result))			{				$lang_row[] = $row;			}			$db->sql_freeresult($result);			if ($coppa === false && $config['coppa_enable'])			{				$now = getdate();				$coppa_birthday = $user->format_date(mktime($now['hours'] + $user->data['user_dst'], $now['minutes'], $now['seconds'], $now['mon'], $now['mday'] - 1, $now['year'] - 13), $user->lang['DATE_FORMAT']);				unset($now);				$template->assign_vars(array(					'S_LANG_OPTIONS'	=> (sizeof($lang_row) > 1) ? language_select($user_lang) : '',					'L_COPPA_NO'		=> sprintf($user->lang['UCP_COPPA_BEFORE'], $coppa_birthday),					'L_COPPA_YES'		=> sprintf($user->lang['UCP_COPPA_ON_AFTER'], $coppa_birthday),					'U_COPPA_NO'		=> append_sid("{$phpbb_root_path}ucp.$phpEx", 'mode=register&amp;coppa=0' . $add_lang),					'U_COPPA_YES'		=> append_sid("{$phpbb_root_path}ucp.$phpEx", 'mode=register&amp;coppa=1' . $add_lang),					'S_SHOW_COPPA'		=> true,					'S_HIDDEN_FIELDS'	=> build_hidden_fields($s_hidden_fields),					'S_UCP_ACTION'		=> append_sid("{$phpbb_root_path}ucp.$phpEx", 'mode=register' . $add_lang),				));			}			else			{				$template->assign_vars(array(					'S_LANG_OPTIONS'	=> (sizeof($lang_row) > 1) ? language_select($user_lang) : '',					'L_TERMS_OF_USE'	=> sprintf($user->lang['TERMS_OF_USE_CONTENT'], $config['sitename'], generate_board_url()),					'S_SHOW_COPPA'		=> false,					'S_REGISTRATION'	=> true,					'S_HIDDEN_FIELDS'	=> build_hidden_fields($s_hidden_fields),					'S_UCP_ACTION'		=> append_sid("{$phpbb_root_path}ucp.$phpEx", 'mode=register' . $add_lang . $add_coppa),					)				);			}			unset($lang_row);			$this->tpl_name = 'ucp_agreement';			return;		}		// The CAPTCHA kicks in here. We can't help that the information gets lost on language change. 		if ($config['enable_confirm'])		{			include($phpbb_root_path . 'includes/captcha/captcha_factory.' . $phpEx);			$captcha =& phpbb_captcha_factory::get_instance($config['captcha_plugin']);			$captcha->init(CONFIRM_REG);		}		// Try to manually determine the timezone and adjust the dst if the server date/time complies with the default setting +/- 1		$timezone = date('Z') / 3600;		$is_dst = date('I');		if ($config['board_timezone'] == $timezone || $config['board_timezone'] == ($timezone - 1))		{			$timezone = ($is_dst) ? $timezone - 1 : $timezone;			if (!isset($user->lang['tz_zones'][(string) $timezone]))			{				$timezone = $config['board_timezone'];			}		}		else		{			$is_dst = $config['board_dst'];			$timezone = $config['board_timezone'];		}		$data = array(			'username'			=> utf8_normalize_nfc(request_var('username', '', true)),			'new_password'		=> request_var('new_password', '', true),			'password_confirm'	=> request_var('password_confirm', '', true),			'email'				=> strtolower(request_var('email', '')),			'email_confirm'		=> strtolower(request_var('email_confirm', '')),			'lang'				=> basename(request_var('lang', $user->lang_name)),			'tz'				=> request_var('tz', (float) $timezone),		);		// Check and initialize some variables if needed		if ($submit)		{			$error = validate_data($data, array(				'username'			=> array(					array('string', false, $config['min_name_chars'], $config['max_name_chars']),					array('username', '')),				'new_password'		=> array(					array('string', false, $config['min_pass_chars'], $config['max_pass_chars']),					array('password')),				'password_confirm'	=> array('string', false, $config['min_pass_chars'], $config['max_pass_chars']),				'email'				=> array(					array('string', false, 6, 60),					array('email')),				'email_confirm'		=> array('string', false, 6, 60),				'tz'				=> array('num', false, -14, 14),				'lang'				=> array('language_iso_name'),			));			if (!check_form_key('ucp_register'))			{				$error[] = $user->lang['FORM_INVALID'];			}			// Replace "error" strings with their real, localised form			$error = preg_replace('#^([A-Z_]+)$#e', "(!empty(\$user->lang['\\1'])) ? \$user->lang['\\1'] : '\\1'", $error);			if ($config['enable_confirm'])			{				$vc_response = $captcha->validate($data);				if ($vc_response !== false)				{					$error[] = $vc_response;				}				if ($config['max_reg_attempts'] && $captcha->get_attempt_count() > $config['max_reg_attempts'])				{					$error[] = $user->lang['TOO_MANY_REGISTERS'];				}			}			// DNSBL check			if ($config['check_dnsbl'])			{				if (($dnsbl = $user->check_dnsbl('register')) !== false)				{					$error[] = sprintf($user->lang['IP_BLACKLISTED'], $user->ip, $dnsbl[1]);				}			}			// validate custom profile fields			$cp->submit_cp_field('register', $user->get_iso_lang_id(), $cp_data, $error);			if (!sizeof($error))			{				if ($data['new_password'] != $data['password_confirm'])				{					$error[] = $user->lang['NEW_PASSWORD_ERROR'];				}				if ($data['email'] != $data['email_confirm'])				{					$error[] = $user->lang['NEW_EMAIL_ERROR'];				}			}			if (!sizeof($error))			{				$server_url = generate_board_url();				// Which group by default?				$group_name = ($coppa) ? 'REGISTERED_COPPA' : 'REGISTERED';				$sql = 'SELECT group_id					FROM ' . GROUPS_TABLE . "					WHERE group_name = '" . $db->sql_escape($group_name) . "'						AND group_type = " . GROUP_SPECIAL;				$result = $db->sql_query($sql);				$row = $db->sql_fetchrow($result);				$db->sql_freeresult($result);				if (!$row)				{					trigger_error('NO_GROUP');				}				$group_id = $row['group_id'];				if (($coppa ||					$config['require_activation'] == USER_ACTIVATION_SELF ||					$config['require_activation'] == USER_ACTIVATION_ADMIN) && $config['email_enable'])				{					$user_actkey = gen_rand_string(mt_rand(6, 10));					$user_type = USER_INACTIVE;					$user_inactive_reason = INACTIVE_REGISTER;					$user_inactive_time = time();				}				else				{					$user_type = USER_NORMAL;					$user_actkey = '';					$user_inactive_reason = 0;					$user_inactive_time = 0;				}				$user_row = array(					'username'				=> $data['username'],					'user_password'			=> phpbb_hash($data['new_password']),					'user_email'			=> $data['email'],					'group_id'				=> (int) $group_id,					'user_timezone'			=> (float) $data['tz'],					'user_dst'				=> $is_dst,					'user_lang'				=> $data['lang'],					'user_type'				=> $user_type,					'user_actkey'			=> $user_actkey,					'user_ip'				=> $user->ip,					'user_regdate'			=> time(),					'user_inactive_reason'	=> $user_inactive_reason,					'user_inactive_time'	=> $user_inactive_time,				);				if ($config['new_member_post_limit'])				{					$user_row['user_new'] = 1;				}				// Register user...				$user_id = user_add($user_row, $cp_data);				// This should not happen, because the required variables are listed above...				if ($user_id === false)				{					trigger_error('NO_USER', E_USER_ERROR);				}				// Okay, captcha, your job is done.				if ($config['enable_confirm'] && isset($captcha))				{					$captcha->reset();				}				if ($coppa && $config['email_enable'])				{					$message = $user->lang['ACCOUNT_COPPA'];					$email_template = 'coppa_welcome_inactive';				}				else if ($config['require_activation'] == USER_ACTIVATION_SELF && $config['email_enable'])				{					$message = $user->lang['ACCOUNT_INACTIVE'];					$email_template = 'user_welcome_inactive';				}				else if ($config['require_activation'] == USER_ACTIVATION_ADMIN && $config['email_enable'])				{					$message = $user->lang['ACCOUNT_INACTIVE_ADMIN'];					$email_template = 'admin_welcome_inactive';				}				else				{					$message = $user->lang['ACCOUNT_ADDED'];					$email_template = 'user_welcome';				}				if ($config['email_enable'])				{					include_once($phpbb_root_path . 'includes/functions_messenger.' . $phpEx);					$messenger = new messenger(false);					$messenger->template($email_template, $data['lang']);					$messenger->to($data['email'], $data['username']);					$messenger->anti_abuse_headers($config, $user);					$messenger->assign_vars(array(						'WELCOME_MSG'	=> htmlspecialchars_decode(sprintf($user->lang['WELCOME_SUBJECT'], $config['sitename'])),						'USERNAME'		=> htmlspecialchars_decode($data['username']),						'PASSWORD'		=> htmlspecialchars_decode($data['new_password']),						'U_ACTIVATE'	=> "$server_url/ucp.$phpEx?mode=activate&u=$user_id&k=$user_actkey")					);					if ($coppa)					{						$messenger->assign_vars(array(							'FAX_INFO'		=> $config['coppa_fax'],							'MAIL_INFO'		=> $config['coppa_mail'],							'EMAIL_ADDRESS'	=> $data['email'])						);					}					$messenger->send(NOTIFY_EMAIL);					if ($config['require_activation'] == USER_ACTIVATION_ADMIN)					{						// Grab an array of user_id's with a_user permissions ... these users can activate a user						$admin_ary = $auth->acl_get_list(false, 'a_user', false);						$admin_ary = (!empty($admin_ary[0]['a_user'])) ? $admin_ary[0]['a_user'] : array();						// Also include founders						$where_sql = ' WHERE user_type = ' . USER_FOUNDER;						if (sizeof($admin_ary))						{							$where_sql .= ' OR ' . $db->sql_in_set('user_id', $admin_ary);						}						$sql = 'SELECT user_id, username, user_email, user_lang, user_jabber, user_notify_type							FROM ' . USERS_TABLE . ' ' .							$where_sql;						$result = $db->sql_query($sql);						while ($row = $db->sql_fetchrow($result))						{							$messenger->template('admin_activate', $row['user_lang']);							$messenger->to($row['user_email'], $row['username']);							$messenger->im($row['user_jabber'], $row['username']);							$messenger->assign_vars(array(								'USERNAME'			=> htmlspecialchars_decode($data['username']),								'U_USER_DETAILS'	=> "$server_url/memberlist.$phpEx?mode=viewprofile&u=$user_id",								'U_ACTIVATE'		=> "$server_url/ucp.$phpEx?mode=activate&u=$user_id&k=$user_actkey")							);							$messenger->send($row['user_notify_type']);						}						$db->sql_freeresult($result);					}				}				$message = $message . '<br /><br />' . sprintf($user->lang['RETURN_INDEX'], '<a href="' . append_sid("{$phpbb_root_path}index.$phpEx") . '">', '</a>');				trigger_error($message);			}		}		$s_hidden_fields = array(			'agreed'		=> 'true',			'change_lang'	=> 0,		);		if ($config['coppa_enable'])		{			$s_hidden_fields['coppa'] = $coppa;		}		if ($config['enable_confirm'])		{			$s_hidden_fields = array_merge($s_hidden_fields, $captcha->get_hidden_fields());		}		$s_hidden_fields = build_hidden_fields($s_hidden_fields);		$confirm_image = '';		// Visual Confirmation - Show images		if ($config['enable_confirm'])		{			$template->assign_vars(array(				'CAPTCHA_TEMPLATE'		=> $captcha->get_template(),			));		}		//		$l_reg_cond = '';		switch ($config['require_activation'])		{			case USER_ACTIVATION_SELF:				$l_reg_cond = $user->lang['UCP_EMAIL_ACTIVATE'];			break;			case USER_ACTIVATION_ADMIN:				$l_reg_cond = $user->lang['UCP_ADMIN_ACTIVATE'];			break;		}		$template->assign_vars(array(			'ERROR'				=> (sizeof($error)) ? implode('<br />', $error) : '',			'USERNAME'			=> $data['username'],			'PASSWORD'			=> $data['new_password'],			'PASSWORD_CONFIRM'	=> $data['password_confirm'],			'EMAIL'				=> $data['email'],			'EMAIL_CONFIRM'		=> $data['email_confirm'],			'L_REG_COND'				=> $l_reg_cond,			'L_USERNAME_EXPLAIN'		=> sprintf($user->lang[$config['allow_name_chars'] . '_EXPLAIN'], $config['min_name_chars'], $config['max_name_chars']),			'L_PASSWORD_EXPLAIN'		=> sprintf($user->lang[$config['pass_complex'] . '_EXPLAIN'], $config['min_pass_chars'], $config['max_pass_chars']),			'S_LANG_OPTIONS'	=> language_select($data['lang']),			'S_TZ_OPTIONS'		=> tz_select($data['tz']),			'S_CONFIRM_REFRESH'	=> ($config['enable_confirm'] && $config['confirm_refresh']) ? true : false,			'S_REGISTRATION'	=> true,			'S_COPPA'			=> $coppa,			'S_HIDDEN_FIELDS'	=> $s_hidden_fields,			'S_UCP_ACTION'		=> append_sid("{$phpbb_root_path}ucp.$phpEx", 'mode=register'),		));		//		$user->profile_fields = array();		// Generate profile fields -> Template Block Variable profile_fields		$cp->generate_profile_fields('register', $user->get_iso_lang_id());		//		$this->tpl_name = 'ucp_register';		$this->page_title = 'UCP_REGISTRATION';	}}?>
<?php/**** @package mcp* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @package module_install*/class mcp_notes_info{	function module()	{		return array(			'filename'	=> 'mcp_notes',			'title'		=> 'MCP_NOTES',			'version'	=> '1.0.0',			'modes'		=> array(				'front'				=> array('title' => 'MCP_NOTES_FRONT', 'auth' => '', 'cat' => array('MCP_NOTES')),				'user_notes'		=> array('title' => 'MCP_NOTES_USER', 'auth' => '', 'cat' => array('MCP_NOTES')),			),		);	}	function install()	{	}	function uninstall()	{	}}?>
<?php/**** @package phpBB3* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @ignore*/if (!defined('IN_PHPBB')){	exit;}/*** gen_sort_selects()* make_jumpbox()* bump_topic_allowed()* get_context()* decode_message()* strip_bbcode()* generate_text_for_display()* generate_text_for_storage()* generate_text_for_edit()* make_clickable_callback()* make_clickable()* censor_text()* bbcode_nl2br()* smiley_text()* parse_attachments()* extension_allowed()* truncate_string()* get_username_string()* class bitfield*//*** Generate sort selection fields*/function gen_sort_selects(&$limit_days, &$sort_by_text, &$sort_days, &$sort_key, &$sort_dir, &$s_limit_days, &$s_sort_key, &$s_sort_dir, &$u_sort_param, $def_st = false, $def_sk = false, $def_sd = false){	global $user;	$sort_dir_text = array('a' => $user->lang['ASCENDING'], 'd' => $user->lang['DESCENDING']);	$sorts = array(		'st'	=> array(			'key'		=> 'sort_days',			'default'	=> $def_st,			'options'	=> $limit_days,			'output'	=> &$s_limit_days,		),		'sk'	=> array(			'key'		=> 'sort_key',			'default'	=> $def_sk,			'options'	=> $sort_by_text,			'output'	=> &$s_sort_key,		),		'sd'	=> array(			'key'		=> 'sort_dir',			'default'	=> $def_sd,			'options'	=> $sort_dir_text,			'output'	=> &$s_sort_dir,		),	);	$u_sort_param  = '';	foreach ($sorts as $name => $sort_ary)	{		$key = $sort_ary['key'];		$selected = $$sort_ary['key'];		// Check if the key is selectable. If not, we reset to the default or first key found.		// This ensures the values are always valid. We also set $sort_dir/sort_key/etc. to the		// correct value, else the protection is void. ;)		if (!isset($sort_ary['options'][$selected]))		{			if ($sort_ary['default'] !== false)			{				$selected = $$key = $sort_ary['default'];			}			else			{				@reset($sort_ary['options']);				$selected = $$key = key($sort_ary['options']);			}		}		$sort_ary['output'] = '<select name="' . $name . '" id="' . $name . '">';		foreach ($sort_ary['options'] as $option => $text)		{			$sort_ary['output'] .= '<option value="' . $option . '"' . (($selected == $option) ? ' selected="selected"' : '') . '>' . $text . '</option>';		}		$sort_ary['output'] .= '</select>';		$u_sort_param .= ($selected !== $sort_ary['default']) ? ((strlen($u_sort_param)) ? '&amp;' : '') . "{$name}={$selected}" : '';	}	return;}/*** Generate Jumpbox*/function make_jumpbox($action, $forum_id = false, $select_all = false, $acl_list = false, $force_display = false){	global $config, $auth, $template, $user, $db;	// We only return if the jumpbox is not forced to be displayed (in case it is needed for functionality)	if (!$config['load_jumpbox'] && $force_display === false)	{		return;	}	$sql = 'SELECT forum_id, forum_name, parent_id, forum_type, left_id, right_id		FROM ' . FORUMS_TABLE . '		ORDER BY left_id ASC';	$result = $db->sql_query($sql, 600);	$right = $padding = 0;	$padding_store = array('0' => 0);	$display_jumpbox = false;	$iteration = 0;	// Sometimes it could happen that forums will be displayed here not be displayed within the index page	// This is the result of forums not displayed at index, having list permissions and a parent of a forum with no permissions.	// If this happens, the padding could be "broken"	while ($row = $db->sql_fetchrow($result))	{		if ($row['left_id'] < $right)		{			$padding++;			$padding_store[$row['parent_id']] = $padding;		}		else if ($row['left_id'] > $right + 1)		{			// Ok, if the $padding_store for this parent is empty there is something wrong. For now we will skip over it.			// @todo digging deep to find out "how" this can happen.			$padding = (isset($padding_store[$row['parent_id']])) ? $padding_store[$row['parent_id']] : $padding;		}		$right = $row['right_id'];		if ($row['forum_type'] == FORUM_CAT && ($row['left_id'] + 1 == $row['right_id']))		{			// Non-postable forum with no subforums, don't display			continue;		}		if (!$auth->acl_get('f_list', $row['forum_id']))		{			// if the user does not have permissions to list this forum skip			continue;		}		if ($acl_list && !$auth->acl_gets($acl_list, $row['forum_id']))		{			continue;		}		if (!$display_jumpbox)		{			$template->assign_block_vars('jumpbox_forums', array(				'FORUM_ID'		=> ($select_all) ? 0 : -1,				'FORUM_NAME'	=> ($select_all) ? $user->lang['ALL_FORUMS'] : $user->lang['SELECT_FORUM'],				'S_FORUM_COUNT'	=> $iteration)			);			$iteration++;			$display_jumpbox = true;		}		$template->assign_block_vars('jumpbox_forums', array(			'FORUM_ID'		=> $row['forum_id'],			'FORUM_NAME'	=> $row['forum_name'],			'SELECTED'		=> ($row['forum_id'] == $forum_id) ? ' selected="selected"' : '',			'S_FORUM_COUNT'	=> $iteration,			'S_IS_CAT'		=> ($row['forum_type'] == FORUM_CAT) ? true : false,			'S_IS_LINK'		=> ($row['forum_type'] == FORUM_LINK) ? true : false,			'S_IS_POST'		=> ($row['forum_type'] == FORUM_POST) ? true : false)		);		for ($i = 0; $i < $padding; $i++)		{			$template->assign_block_vars('jumpbox_forums.level', array());		}		$iteration++;	}	$db->sql_freeresult($result);	unset($padding_store);	$template->assign_vars(array(		'S_DISPLAY_JUMPBOX'	=> $display_jumpbox,		'S_JUMPBOX_ACTION'	=> $action)	);	return;}/*** Bump Topic Check - used by posting and viewtopic*/function bump_topic_allowed($forum_id, $topic_bumped, $last_post_time, $topic_poster, $last_topic_poster){	global $config, $auth, $user;	// Check permission and make sure the last post was not already bumped	if (!$auth->acl_get('f_bump', $forum_id) || $topic_bumped)	{		return false;	}	// Check bump time range, is the user really allowed to bump the topic at this time?	$bump_time = ($config['bump_type'] == 'm') ? $config['bump_interval'] * 60 : (($config['bump_type'] == 'h') ? $config['bump_interval'] * 3600 : $config['bump_interval'] * 86400);	// Check bump time	if ($last_post_time + $bump_time > time())	{		return false;	}	// Check bumper, only topic poster and last poster are allowed to bump	if ($topic_poster != $user->data['user_id'] && $last_topic_poster != $user->data['user_id'])	{		return false;	}	// A bump time of 0 will completely disable the bump feature... not intended but might be useful.	return $bump_time;}/*** Generates a text with approx. the specified length which contains the specified words and their context** @param	string	$text	The full text from which context shall be extracted* @param	string	$words	An array of words which should be contained in the result, has to be a valid part of a PCRE pattern (escape with preg_quote!)* @param	int		$length	The desired length of the resulting text, however the result might be shorter or longer than this value** @return	string			Context of the specified words separated by "..."*/function get_context($text, $words, $length = 400){	// first replace all whitespaces with single spaces	$text = preg_replace('/ +/', ' ', strtr($text, "\t\n\r\x0C ", '     '));	// we need to turn the entities back into their original form, to not cut the message in between them	$entities = array('&lt;', '&gt;', '&#91;', '&#93;', '&#46;', '&#58;', '&#058;');	$characters = array('<', '>', '[', ']', '.', ':', ':');	$text = str_replace($entities, $characters, $text);	$word_indizes = array();	if (sizeof($words))	{		$match = '';		// find the starting indizes of all words		foreach ($words as $word)		{			if ($word)			{				if (preg_match('#(?:[^\w]|^)(' . $word . ')(?:[^\w]|$)#i', $text, $match))				{					if (empty($match[1]))					{						continue;					}					$pos = utf8_strpos($text, $match[1]);					if ($pos !== false)					{						$word_indizes[] = $pos;					}				}			}		}		unset($match);		if (sizeof($word_indizes))		{			$word_indizes = array_unique($word_indizes);			sort($word_indizes);			$wordnum = sizeof($word_indizes);			// number of characters on the right and left side of each word			$sequence_length = (int) ($length / (2 * $wordnum)) - 2;			$final_text = '';			$word = $j = 0;			$final_text_index = -1;			// cycle through every character in the original text			for ($i = $word_indizes[$word], $n = utf8_strlen($text); $i < $n; $i++)			{				// if the current position is the start of one of the words then append $sequence_length characters to the final text				if (isset($word_indizes[$word]) && ($i == $word_indizes[$word]))				{					if ($final_text_index < $i - $sequence_length - 1)					{						$final_text .= '... ' . preg_replace('#^([^ ]*)#', '', utf8_substr($text, $i - $sequence_length, $sequence_length));					}					else					{						// if the final text is already nearer to the current word than $sequence_length we only append the text						// from its current index on and distribute the unused length to all other sequenes						$sequence_length += (int) (($final_text_index - $i + $sequence_length + 1) / (2 * $wordnum));						$final_text .= utf8_substr($text, $final_text_index + 1, $i - $final_text_index - 1);					}					$final_text_index = $i - 1;					// add the following characters to the final text (see below)					$word++;					$j = 1;				}				if ($j > 0)				{					// add the character to the final text and increment the sequence counter					$final_text .= utf8_substr($text, $i, 1);					$final_text_index++;					$j++;					// if this is a whitespace then check whether we are done with this sequence					if (utf8_substr($text, $i, 1) == ' ')					{						// only check whether we have to exit the context generation completely if we haven't already reached the end anyway						if ($i + 4 < $n)						{							if (($j > $sequence_length && $word >= $wordnum) || utf8_strlen($final_text) > $length)							{								$final_text .= ' ...';								break;							}						}						else						{							// make sure the text really reaches the end							$j -= 4;						}						// stop context generation and wait for the next word						if ($j > $sequence_length)						{							$j = 0;						}					}				}			}			return str_replace($characters, $entities, $final_text);		}	}	if (!sizeof($words) || !sizeof($word_indizes))	{		return str_replace($characters, $entities, ((utf8_strlen($text) >= $length + 3) ? utf8_substr($text, 0, $length) . '...' : $text));	}}/*** Decode text whereby text is coming from the db and expected to be pre-parsed content* We are placing this outside of the message parser because we are often in need of it...*/function decode_message(&$message, $bbcode_uid = ''){	global $config;	if ($bbcode_uid)	{		$match = array('<br />', "[/*:m:$bbcode_uid]", ":u:$bbcode_uid", ":o:$bbcode_uid", ":$bbcode_uid");		$replace = array("\n", '', '', '', '');	}	else	{		$match = array('<br />');		$replace = array("\n");	}	$message = str_replace($match, $replace, $message);	$match = get_preg_expression('bbcode_htm');	$replace = array('\1', '\1', '\2', '\1', '', '');	$message = preg_replace($match, $replace, $message);}/*** Strips all bbcode from a text and returns the plain content*/function strip_bbcode(&$text, $uid = ''){	if (!$uid)	{		$uid = '[0-9a-z]{5,}';	}	$text = preg_replace("#\[\/?[a-z0-9\*\+\-]+(?:=(?:&quot;.*&quot;|[^\]]*))?(?::[a-z])?(\:$uid)\]#", ' ', $text);	$match = get_preg_expression('bbcode_htm');	$replace = array('\1', '\1', '\2', '\1', '', '');	$text = preg_replace($match, $replace, $text);}/*** For display of custom parsed text on user-facing pages* Expects $text to be the value directly from the database (stored value)*/function generate_text_for_display($text, $uid, $bitfield, $flags){	static $bbcode;	if (!$text)	{		return '';	}	$text = censor_text($text);	// Parse bbcode if bbcode uid stored and bbcode enabled	if ($uid && ($flags & OPTION_FLAG_BBCODE))	{		if (!class_exists('bbcode'))		{			global $phpbb_root_path, $phpEx;			include($phpbb_root_path . 'includes/bbcode.' . $phpEx);		}		if (empty($bbcode))		{			$bbcode = new bbcode($bitfield);		}		else		{			$bbcode->bbcode($bitfield);		}		$bbcode->bbcode_second_pass($text, $uid);	}	$text = bbcode_nl2br($text);	$text = smiley_text($text, !($flags & OPTION_FLAG_SMILIES));	return $text;}/*** For parsing custom parsed text to be stored within the database.* This function additionally returns the uid and bitfield that needs to be stored.* Expects $text to be the value directly from request_var() and in it's non-parsed form*/function generate_text_for_storage(&$text, &$uid, &$bitfield, &$flags, $allow_bbcode = false, $allow_urls = false, $allow_smilies = false){	global $phpbb_root_path, $phpEx;	$uid = $bitfield = '';	$flags = (($allow_bbcode) ? OPTION_FLAG_BBCODE : 0) + (($allow_smilies) ? OPTION_FLAG_SMILIES : 0) + (($allow_urls) ? OPTION_FLAG_LINKS : 0);	if (!$text)	{		return;	}	if (!class_exists('parse_message'))	{		include($phpbb_root_path . 'includes/message_parser.' . $phpEx);	}	$message_parser = new parse_message($text);	$message_parser->parse($allow_bbcode, $allow_urls, $allow_smilies);	$text = $message_parser->message;	$uid = $message_parser->bbcode_uid;	// If the bbcode_bitfield is empty, there is no need for the uid to be stored.	if (!$message_parser->bbcode_bitfield)	{		$uid = '';	}	$bitfield = $message_parser->bbcode_bitfield;	return;}/*** For decoding custom parsed text for edits as well as extracting the flags* Expects $text to be the value directly from the database (pre-parsed content)*/function generate_text_for_edit($text, $uid, $flags){	global $phpbb_root_path, $phpEx;	decode_message($text, $uid);	return array(		'allow_bbcode'	=> ($flags & OPTION_FLAG_BBCODE) ? 1 : 0,		'allow_smilies'	=> ($flags & OPTION_FLAG_SMILIES) ? 1 : 0,		'allow_urls'	=> ($flags & OPTION_FLAG_LINKS) ? 1 : 0,		'text'			=> $text	);}/*** A subroutine of make_clickable used with preg_replace* It places correct HTML around an url, shortens the displayed text* and makes sure no entities are inside URLs*/function make_clickable_callback($type, $whitespace, $url, $relative_url, $class){	$orig_url		= $url;	$orig_relative	= $relative_url;	$append			= '';	$url			= htmlspecialchars_decode($url);	$relative_url	= htmlspecialchars_decode($relative_url);	// make sure no HTML entities were matched	$chars = array('<', '>', '"');	$split = false;	foreach ($chars as $char)	{		$next_split = strpos($url, $char);		if ($next_split !== false)		{			$split = ($split !== false) ? min($split, $next_split) : $next_split;		}	}	if ($split !== false)	{		// an HTML entity was found, so the URL has to end before it		$append			= substr($url, $split) . $relative_url;		$url			= substr($url, 0, $split);		$relative_url	= '';	}	else if ($relative_url)	{		// same for $relative_url		$split = false;		foreach ($chars as $char)		{			$next_split = strpos($relative_url, $char);			if ($next_split !== false)			{				$split = ($split !== false) ? min($split, $next_split) : $next_split;			}		}		if ($split !== false)		{			$append			= substr($relative_url, $split);			$relative_url	= substr($relative_url, 0, $split);		}	}	// if the last character of the url is a punctuation mark, exclude it from the url	$last_char = ($relative_url) ? $relative_url[strlen($relative_url) - 1] : $url[strlen($url) - 1];	switch ($last_char)	{		case '.':		case '?':		case '!':		case ':':		case ',':			$append = $last_char;			if ($relative_url)			{				$relative_url = substr($relative_url, 0, -1);			}			else			{				$url = substr($url, 0, -1);			}		break;		// set last_char to empty here, so the variable can be used later to		// check whether a character was removed		default:			$last_char = '';		break;	}	$short_url = (strlen($url) > 55) ? substr($url, 0, 39) . ' ... ' . substr($url, -10) : $url;	switch ($type)	{		case MAGIC_URL_LOCAL:			$tag			= 'l';			$relative_url	= preg_replace('/[&?]sid=[0-9a-f]{32}$/', '', preg_replace('/([&?])sid=[0-9a-f]{32}&/', '$1', $relative_url));			$url			= $url . '/' . $relative_url;			$text			= $relative_url;			// this url goes to http://domain.tld/path/to/board/ which			// would result in an empty link if treated as local so			// don't touch it and let MAGIC_URL_FULL take care of it.			if (!$relative_url)			{				return $whitespace . $orig_url . '/' . $orig_relative; // slash is taken away by relative url pattern			}		break;		case MAGIC_URL_FULL:			$tag	= 'm';			$text	= $short_url;		break;		case MAGIC_URL_WWW:			$tag	= 'w';			$url	= 'http://' . $url;			$text	= $short_url;		break;		case MAGIC_URL_EMAIL:			$tag	= 'e';			$text	= $short_url;			$url	= 'mailto:' . $url;		break;	}	$url	= htmlspecialchars($url);	$text	= htmlspecialchars($text);	$append	= htmlspecialchars($append);	$html	= "$whitespace<!-- $tag --><a$class href=\"$url\">$text</a><!-- $tag -->$append";	return $html;}/*** make_clickable function** Replace magic urls of form http://xxx.xxx., www.xxx. and xxx@xxx.xxx.* Cuts down displayed size of link if over 50 chars, turns absolute links* into relative versions when the server/script path matches the link*/function make_clickable($text, $server_url = false, $class = 'postlink'){	if ($server_url === false)	{		$server_url = generate_board_url();	}	static $magic_url_match;	static $magic_url_replace;	static $static_class;	if (!is_array($magic_url_match) || $static_class != $class)	{		$static_class = $class;		$class = ($static_class) ? ' class="' . $static_class . '"' : '';		$local_class = ($static_class) ? ' class="' . $static_class . '-local"' : '';		$magic_url_match = $magic_url_replace = array();		// Be sure to not let the matches cross over. ;)		// relative urls for this board		$magic_url_match[] = '#(^|[\n\t (>.])(' . preg_quote($server_url, '#') . ')/(' . get_preg_expression('relative_url_inline') . ')#ie';		$magic_url_replace[] = "make_clickable_callback(MAGIC_URL_LOCAL, '\$1', '\$2', '\$3', '$local_class')";		// matches a xxxx://aaaaa.bbb.cccc. ...		$magic_url_match[] = '#(^|[\n\t (>.])(' . get_preg_expression('url_inline') . ')#ie';		$magic_url_replace[] = "make_clickable_callback(MAGIC_URL_FULL, '\$1', '\$2', '', '$class')";		// matches a "www.xxxx.yyyy[/zzzz]" kinda lazy URL thing		$magic_url_match[] = '#(^|[\n\t (>])(' . get_preg_expression('www_url_inline') . ')#ie';		$magic_url_replace[] = "make_clickable_callback(MAGIC_URL_WWW, '\$1', '\$2', '', '$class')";		// matches an email@domain type address at the start of a line, or after a space or after what might be a BBCode.		$magic_url_match[] = '/(^|[\n\t (>])(' . get_preg_expression('email') . ')/ie';		$magic_url_replace[] = "make_clickable_callback(MAGIC_URL_EMAIL, '\$1', '\$2', '', '')";	}	return preg_replace($magic_url_match, $magic_url_replace, $text);}/*** Censoring*/function censor_text($text){	static $censors;	// Nothing to do?	if ($text === '')	{		return '';	}	// We moved the word censor checks in here because we call this function quite often - and then only need to do the check once	if (!isset($censors) || !is_array($censors))	{		global $config, $user, $auth, $cache;		// We check here if the user is having viewing censors disabled (and also allowed to do so).		if (!$user->optionget('viewcensors') && $config['allow_nocensors'] && $auth->acl_get('u_chgcensors'))		{			$censors = array();		}		else		{			$censors = $cache->obtain_word_list();		}	}	if (sizeof($censors))	{		return preg_replace($censors['match'], $censors['replace'], $text);	}	return $text;}/*** custom version of nl2br which takes custom BBCodes into account*/function bbcode_nl2br($text){	// custom BBCodes might contain carriage returns so they	// are not converted into <br /> so now revert that	$text = str_replace(array("\n", "\r"), array('<br />', "\n"), $text);	return $text;}/*** Smiley processing*/function smiley_text($text, $force_option = false){	global $config, $user, $phpbb_root_path;	if ($force_option || !$config['allow_smilies'] || !$user->optionget('viewsmilies'))	{		return preg_replace('#<!\-\- s(.*?) \-\-><img src="\{SMILIES_PATH\}\/.*? \/><!\-\- s\1 \-\->#', '\1', $text);	}	else	{		$root_path = (defined('PHPBB_USE_BOARD_URL_PATH') && PHPBB_USE_BOARD_URL_PATH) ? generate_board_url() . '/' : $phpbb_root_path;		return preg_replace('#<!\-\- s(.*?) \-\-><img src="\{SMILIES_PATH\}\/(.*?) \/><!\-\- s\1 \-\->#', '<img src="' . $root_path . $config['smilies_path'] . '/\2 />', $text);	}}/*** General attachment parsing** @param mixed $forum_id The forum id the attachments are displayed in (false if in private message)* @param string &$message The post/private message* @param array &$attachments The attachments to parse for (inline) display. The attachments array will hold templated data after parsing.* @param array &$update_count The attachment counts to be updated - will be filled* @param bool $preview If set to true the attachments are parsed for preview. Within preview mode the comments are fetched from the given $attachments array and not fetched from the database.*/function parse_attachments($forum_id, &$message, &$attachments, &$update_count, $preview = false){	if (!sizeof($attachments))	{		return;	}	global $template, $cache, $user;	global $extensions, $config, $phpbb_root_path, $phpEx;	//	$compiled_attachments = array();	if (!isset($template->filename['attachment_tpl']))	{		$template->set_filenames(array(			'attachment_tpl'	=> 'attachment.html')		);	}	if (empty($extensions) || !is_array($extensions))	{		$extensions = $cache->obtain_attach_extensions($forum_id);	}	// Look for missing attachment information...	$attach_ids = array();	foreach ($attachments as $pos => $attachment)	{		// If is_orphan is set, we need to retrieve the attachments again...		if (!isset($attachment['extension']) && !isset($attachment['physical_filename']))		{			$attach_ids[(int) $attachment['attach_id']] = $pos;		}	}	// Grab attachments (security precaution)	if (sizeof($attach_ids))	{		global $db;		$new_attachment_data = array();		$sql = 'SELECT *			FROM ' . ATTACHMENTS_TABLE . '			WHERE ' . $db->sql_in_set('attach_id', array_keys($attach_ids));		$result = $db->sql_query($sql);		while ($row = $db->sql_fetchrow($result))		{			if (!isset($attach_ids[$row['attach_id']]))			{				continue;			}			// If we preview attachments we will set some retrieved values here			if ($preview)			{				$row['attach_comment'] = $attachments[$attach_ids[$row['attach_id']]]['attach_comment'];			}			$new_attachment_data[$attach_ids[$row['attach_id']]] = $row;		}		$db->sql_freeresult($result);		$attachments = $new_attachment_data;		unset($new_attachment_data);	}	// Sort correctly	if ($config['display_order'])	{		// Ascending sort		krsort($attachments);	}	else	{		// Descending sort		ksort($attachments);	}	foreach ($attachments as $attachment)	{		if (!sizeof($attachment))		{			continue;		}		// We need to reset/empty the _file block var, because this function might be called more than once		$template->destroy_block_vars('_file');		$block_array = array();		// Some basics...		$attachment['extension'] = strtolower(trim($attachment['extension']));		$filename = $phpbb_root_path . $config['upload_path'] . '/' . utf8_basename($attachment['physical_filename']);		$thumbnail_filename = $phpbb_root_path . $config['upload_path'] . '/thumb_' . utf8_basename($attachment['physical_filename']);		$upload_icon = '';		if (isset($extensions[$attachment['extension']]))		{			if ($user->img('icon_topic_attach', '') && !$extensions[$attachment['extension']]['upload_icon'])			{				$upload_icon = $user->img('icon_topic_attach', '');			}			else if ($extensions[$attachment['extension']]['upload_icon'])			{				$upload_icon = '<img src="' . $phpbb_root_path . $config['upload_icons_path'] . '/' . trim($extensions[$attachment['extension']]['upload_icon']) . '" alt="" />';			}		}		$filesize = get_formatted_filesize($attachment['filesize'], false);		$comment = bbcode_nl2br(censor_text($attachment['attach_comment']));		$block_array += array(			'UPLOAD_ICON'		=> $upload_icon,			'FILESIZE'			=> $filesize['value'],			'SIZE_LANG'			=> $filesize['unit'],			'DOWNLOAD_NAME'		=> utf8_basename($attachment['real_filename']),			'COMMENT'			=> $comment,		);		$denied = false;		if (!extension_allowed($forum_id, $attachment['extension'], $extensions))		{			$denied = true;			$block_array += array(				'S_DENIED'			=> true,				'DENIED_MESSAGE'	=> sprintf($user->lang['EXTENSION_DISABLED_AFTER_POSTING'], $attachment['extension'])			);		}		if (!$denied)		{			$l_downloaded_viewed = $download_link = '';			$display_cat = $extensions[$attachment['extension']]['display_cat'];			if ($display_cat == ATTACHMENT_CATEGORY_IMAGE)			{				if ($attachment['thumbnail'])				{					$display_cat = ATTACHMENT_CATEGORY_THUMB;				}				else				{					if ($config['img_display_inlined'])					{						if ($config['img_link_width'] || $config['img_link_height'])						{							$dimension = @getimagesize($filename);							// If the dimensions could not be determined or the image being 0x0 we display it as a link for safety purposes							if ($dimension === false || empty($dimension[0]) || empty($dimension[1]))							{								$display_cat = ATTACHMENT_CATEGORY_NONE;							}							else							{								$display_cat = ($dimension[0] <= $config['img_link_width'] && $dimension[1] <= $config['img_link_height']) ? ATTACHMENT_CATEGORY_IMAGE : ATTACHMENT_CATEGORY_NONE;							}						}					}					else					{						$display_cat = ATTACHMENT_CATEGORY_NONE;					}				}			}			// Make some descisions based on user options being set.			if (($display_cat == ATTACHMENT_CATEGORY_IMAGE || $display_cat == ATTACHMENT_CATEGORY_THUMB) && !$user->optionget('viewimg'))			{				$display_cat = ATTACHMENT_CATEGORY_NONE;			}			if ($display_cat == ATTACHMENT_CATEGORY_FLASH && !$user->optionget('viewflash'))			{				$display_cat = ATTACHMENT_CATEGORY_NONE;			}			$download_link = append_sid("{$phpbb_root_path}download/file.$phpEx", 'id=' . $attachment['attach_id']);			switch ($display_cat)			{				// Images				case ATTACHMENT_CATEGORY_IMAGE:					$l_downloaded_viewed = 'VIEWED_COUNT';					$inline_link = append_sid("{$phpbb_root_path}download/file.$phpEx", 'id=' . $attachment['attach_id']);					$download_link .= '&amp;mode=view';					$block_array += array(						'S_IMAGE'		=> true,						'U_INLINE_LINK'		=> $inline_link,					);					$update_count[] = $attachment['attach_id'];				break;				// Images, but display Thumbnail				case ATTACHMENT_CATEGORY_THUMB:					$l_downloaded_viewed = 'VIEWED_COUNT';					$thumbnail_link = append_sid("{$phpbb_root_path}download/file.$phpEx", 'id=' . $attachment['attach_id'] . '&amp;t=1');					$download_link .= '&amp;mode=view';					$block_array += array(						'S_THUMBNAIL'		=> true,						'THUMB_IMAGE'		=> $thumbnail_link,					);					$update_count[] = $attachment['attach_id'];				break;				// Windows Media Streams				case ATTACHMENT_CATEGORY_WM:					$l_downloaded_viewed = 'VIEWED_COUNT';					// Giving the filename directly because within the wm object all variables are in local context making it impossible					// to validate against a valid session (all params can differ)					// $download_link = $filename;					$block_array += array(						'U_FORUM'		=> generate_board_url(),						'ATTACH_ID'		=> $attachment['attach_id'],						'S_WM_FILE'		=> true,					);					// Viewed/Heared File ... update the download count					$update_count[] = $attachment['attach_id'];				break;				// Real Media Streams				case ATTACHMENT_CATEGORY_RM:				case ATTACHMENT_CATEGORY_QUICKTIME:					$l_downloaded_viewed = 'VIEWED_COUNT';					$block_array += array(						'S_RM_FILE'			=> ($display_cat == ATTACHMENT_CATEGORY_RM) ? true : false,						'S_QUICKTIME_FILE'	=> ($display_cat == ATTACHMENT_CATEGORY_QUICKTIME) ? true : false,						'U_FORUM'			=> generate_board_url(),						'ATTACH_ID'			=> $attachment['attach_id'],					);					// Viewed/Heared File ... update the download count					$update_count[] = $attachment['attach_id'];				break;				// Macromedia Flash Files				case ATTACHMENT_CATEGORY_FLASH:					list($width, $height) = @getimagesize($filename);					$l_downloaded_viewed = 'VIEWED_COUNT';					$block_array += array(						'S_FLASH_FILE'	=> true,						'WIDTH'			=> $width,						'HEIGHT'		=> $height,						'U_VIEW_LINK'	=> $download_link . '&amp;view=1',					);					// Viewed/Heared File ... update the download count					$update_count[] = $attachment['attach_id'];				break;				default:					$l_downloaded_viewed = 'DOWNLOAD_COUNT';					$block_array += array(						'S_FILE'		=> true,					);				break;			}			$l_download_count = (!isset($attachment['download_count']) || $attachment['download_count'] == 0) ? $user->lang[$l_downloaded_viewed . '_NONE'] : (($attachment['download_count'] == 1) ? sprintf($user->lang[$l_downloaded_viewed], $attachment['download_count']) : sprintf($user->lang[$l_downloaded_viewed . 'S'], $attachment['download_count']));			$block_array += array(				'U_DOWNLOAD_LINK'		=> $download_link,				'L_DOWNLOAD_COUNT'		=> $l_download_count			);		}		$template->assign_block_vars('_file', $block_array);		$compiled_attachments[] = $template->assign_display('attachment_tpl');	}	$attachments = $compiled_attachments;	unset($compiled_attachments);	$tpl_size = sizeof($attachments);	$unset_tpl = array();	preg_match_all('#<!\-\- ia([0-9]+) \-\->(.*?)<!\-\- ia\1 \-\->#', $message, $matches, PREG_PATTERN_ORDER);	$replace = array();	foreach ($matches[0] as $num => $capture)	{		// Flip index if we are displaying the reverse way		$index = ($config['display_order']) ? ($tpl_size-($matches[1][$num] + 1)) : $matches[1][$num];		$replace['from'][] = $matches[0][$num];		$replace['to'][] = (isset($attachments[$index])) ? $attachments[$index] : sprintf($user->lang['MISSING_INLINE_ATTACHMENT'], $matches[2][array_search($index, $matches[1])]);		$unset_tpl[] = $index;	}	if (isset($replace['from']))	{		$message = str_replace($replace['from'], $replace['to'], $message);	}	$unset_tpl = array_unique($unset_tpl);	// Needed to let not display the inlined attachments at the end of the post again	foreach ($unset_tpl as $index)	{		unset($attachments[$index]);	}}/*** Check if extension is allowed to be posted.** @param mixed $forum_id The forum id to check or false if private message* @param string $extension The extension to check, for example zip.* @param array &$extensions The extension array holding the information from the cache (will be obtained if empty)** @return bool False if the extension is not allowed to be posted, else true.*/function extension_allowed($forum_id, $extension, &$extensions){	if (empty($extensions))	{		global $cache;		$extensions = $cache->obtain_attach_extensions($forum_id);	}	return (!isset($extensions['_allowed_'][$extension])) ? false : true;}/*** Truncates string while retaining special characters if going over the max length* The default max length is 60 at the moment* The maximum storage length is there to fit the string within the given length. The string may be further truncated due to html entities.* For example: string given is 'a "quote"' (length: 9), would be a stored as 'a &quot;quote&quot;' (length: 19)** @param string $string The text to truncate to the given length. String is specialchared.* @param int $max_length Maximum length of string (multibyte character count as 1 char / Html entity count as 1 char)* @param int $max_store_length Maximum character length of string (multibyte character count as 1 char / Html entity count as entity chars).* @param bool $allow_reply Allow Re: in front of string * 	NOTE: This parameter can cause undesired behavior (returning strings longer than $max_store_length) and is deprecated. * @param string $append String to be appended*/function truncate_string($string, $max_length = 60, $max_store_length = 255, $allow_reply = false, $append = ''){	$chars = array();	$strip_reply = false;	$stripped = false;	if ($allow_reply && strpos($string, 'Re: ') === 0)	{		$strip_reply = true;		$string = substr($string, 4);	}	$_chars = utf8_str_split(htmlspecialchars_decode($string));	$chars = array_map('utf8_htmlspecialchars', $_chars);	// Now check the length ;)	if (sizeof($chars) > $max_length)	{		// Cut off the last elements from the array		$string = implode('', array_slice($chars, 0, $max_length - utf8_strlen($append)));		$stripped = true;	}	// Due to specialchars, we may not be able to store the string...	if (utf8_strlen($string) > $max_store_length)	{		// let's split again, we do not want half-baked strings where entities are split		$_chars = utf8_str_split(htmlspecialchars_decode($string));		$chars = array_map('utf8_htmlspecialchars', $_chars);		do		{			array_pop($chars);			$string = implode('', $chars);		}		while (!empty($chars) && utf8_strlen($string) > $max_store_length);	}	if ($strip_reply)	{		$string = 'Re: ' . $string;	}	if ($append != '' && $stripped)	{		$string = $string . $append;	}	return $string;}/*** Get username details for placing into templates.* This function caches all modes on first call, except for no_profile and anonymous user - determined by $user_id.** @param string $mode Can be profile (for getting an url to the profile), username (for obtaining the username), colour (for obtaining the user colour), full (for obtaining a html string representing a coloured link to the users profile) or no_profile (the same as full but forcing no profile link)* @param int $user_id The users id* @param string $username The users name* @param string $username_colour The users colour* @param string $guest_username optional parameter to specify the guest username. It will be used in favor of the GUEST language variable then.* @param string $custom_profile_url optional parameter to specify a profile url. The user id get appended to this url as &amp;u={user_id}** @return string A string consisting of what is wanted based on $mode.* @author BartVB, Acyd Burn*/function get_username_string($mode, $user_id, $username, $username_colour = '', $guest_username = false, $custom_profile_url = false){	static $_profile_cache;	// We cache some common variables we need within this function	if (empty($_profile_cache))	{		global $phpbb_root_path, $phpEx;		$_profile_cache['base_url'] = append_sid("{$phpbb_root_path}memberlist.$phpEx", 'mode=viewprofile&amp;u={USER_ID}');		$_profile_cache['tpl_noprofile'] = '{USERNAME}';		$_profile_cache['tpl_noprofile_colour'] = '<span style="color: {USERNAME_COLOUR};" class="username-coloured">{USERNAME}</span>';		$_profile_cache['tpl_profile'] = '<a href="{PROFILE_URL}">{USERNAME}</a>';		$_profile_cache['tpl_profile_colour'] = '<a href="{PROFILE_URL}" style="color: {USERNAME_COLOUR};" class="username-coloured">{USERNAME}</a>';	}	global $user, $auth;	// This switch makes sure we only run code required for the mode	switch ($mode)	{		case 'full':		case 'no_profile':		case 'colour':			// Build correct username colour			$username_colour = ($username_colour) ? '#' . $username_colour : '';			// Return colour			if ($mode == 'colour')			{				return $username_colour;			}		// no break;		case 'username':			// Build correct username			if ($guest_username === false)			{				$username = ($username) ? $username : $user->lang['GUEST'];			}			else			{				$username = ($user_id && $user_id != ANONYMOUS) ? $username : ((!empty($guest_username)) ? $guest_username : $user->lang['GUEST']);			}			// Return username			if ($mode == 'username')			{				return $username;			}		// no break;		case 'profile':			// Build correct profile url - only show if not anonymous and permission to view profile if registered user			// For anonymous the link leads to a login page.			if ($user_id && $user_id != ANONYMOUS && ($user->data['user_id'] == ANONYMOUS || $auth->acl_get('u_viewprofile')))			{				$profile_url = ($custom_profile_url !== false) ? $custom_profile_url . '&amp;u=' . (int) $user_id : str_replace(array('={USER_ID}', '=%7BUSER_ID%7D'), '=' . (int) $user_id, $_profile_cache['base_url']);			}			else			{				$profile_url = '';			}			// Return profile			if ($mode == 'profile')			{				return $profile_url;			}		// no break;	}	if (($mode == 'full' && !$profile_url) || $mode == 'no_profile')	{		return str_replace(array('{USERNAME_COLOUR}', '{USERNAME}'), array($username_colour, $username), (!$username_colour) ? $_profile_cache['tpl_noprofile'] : $_profile_cache['tpl_noprofile_colour']);	}	return str_replace(array('{PROFILE_URL}', '{USERNAME_COLOUR}', '{USERNAME}'), array($profile_url, $username_colour, $username), (!$username_colour) ? $_profile_cache['tpl_profile'] : $_profile_cache['tpl_profile_colour']);}/*** @package phpBB3*/class bitfield{	var $data;	function bitfield($bitfield = '')	{		$this->data = base64_decode($bitfield);	}	/**	*/	function get($n)	{		// Get the ($n / 8)th char		$byte = $n >> 3;		if (strlen($this->data) >= $byte + 1)		{			$c = $this->data[$byte];			// Lookup the ($n % 8)th bit of the byte			$bit = 7 - ($n & 7);			return (bool) (ord($c) & (1 << $bit));		}		else		{			return false;		}	}	function set($n)	{		$byte = $n >> 3;		$bit = 7 - ($n & 7);		if (strlen($this->data) >= $byte + 1)		{			$this->data[$byte] = $this->data[$byte] | chr(1 << $bit);		}		else		{			$this->data .= str_repeat("\0", $byte - strlen($this->data));			$this->data .= chr(1 << $bit);		}	}	function clear($n)	{		$byte = $n >> 3;		if (strlen($this->data) >= $byte + 1)		{			$bit = 7 - ($n & 7);			$this->data[$byte] = $this->data[$byte] &~ chr(1 << $bit);		}	}	function get_blob()	{		return $this->data;	}	function get_base64()	{		return base64_encode($this->data);	}	function get_bin()	{		$bin = '';		$len = strlen($this->data);		for ($i = 0; $i < $len; ++$i)		{			$bin .= str_pad(decbin(ord($this->data[$i])), 8, '0', STR_PAD_LEFT);		}		return $bin;	}	function get_all_set()	{		return array_keys(array_filter(str_split($this->get_bin())));	}	function merge($bitfield)	{		$this->data = $this->data | $bitfield->get_blob();	}}?>
<?php/**** @package phpBB3* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @ignore*/define('IN_PHPBB', true);define('ADMIN_START', true);$phpbb_root_path = (defined('PHPBB_ROOT_PATH')) ? PHPBB_ROOT_PATH : './../';$phpEx = substr(strrchr(__FILE__, '.'), 1);include($phpbb_root_path . 'common.' . $phpEx);// Start session management$user->session_begin(false);$auth->acl($user->data);$user->setup();// Set custom template for admin area$template->set_custom_template($phpbb_root_path . 'adm/style', 'admin');$template->set_filenames(array(	'body' => 'colour_swatch.html'));$form = request_var('form', '');$name = request_var('name', '');// We validate form and name here, only id/class allowed$form = (!preg_match('/^[a-z0-9_-]+$/i', $form)) ? '' : $form;$name = (!preg_match('/^[a-z0-9_-]+$/i', $name)) ? '' : $name;$template->assign_vars(array(	'OPENER'		=> $form,	'NAME'			=> $name,	'T_IMAGES_PATH'	=> "{$phpbb_root_path}images/",	'S_USER_LANG'			=> $user->lang['USER_LANG'],	'S_CONTENT_DIRECTION'	=> $user->lang['DIRECTION'],	'S_CONTENT_ENCODING'	=> 'UTF-8',));$template->display('body');garbage_collection();?>
<?php/**** @package mcp* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @package module_install*/class mcp_pm_reports_info{	function module()	{		return array(			'filename'	=> 'mcp_pm_reports',			'title'		=> 'MCP_PM_REPORTS',			'version'	=> '1.0.0',			'modes'		=> array(				'pm_reports'			=> array('title' => 'MCP_PM_REPORTS_OPEN', 'auth' => 'aclf_m_report', 'cat' => array('MCP_REPORTS')),				'pm_reports_closed'	=> array('title' => 'MCP_PM_REPORTS_CLOSED', 'auth' => 'aclf_m_report', 'cat' => array('MCP_REPORTS')),				'pm_report_details'	=> array('title' => 'MCP_PM_REPORT_DETAILS', 'auth' => 'aclf_m_report', 'cat' => array('MCP_REPORTS')),			),		);	}	function install()	{	}	function uninstall()	{	}}?>
<?php/**** @package acm* @copyright (c) 2011 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @ignore*/if (!defined('IN_PHPBB')){	exit;}// Include the abstract baseif (!class_exists('acm_memory')){	require("{$phpbb_root_path}includes/acm/acm_memory.$phpEx");}if (!defined('PHPBB_ACM_REDIS_PORT')){	define('PHPBB_ACM_REDIS_PORT', 6379);}if (!defined('PHPBB_ACM_REDIS_HOST')){	define('PHPBB_ACM_REDIS_HOST', 'localhost');}/*** ACM for Redis** Compatible with the php extension phpredis available* at https://github.com/nicolasff/phpredis** @package acm*/class acm extends acm_memory{	var $extension = 'redis';	var $redis;	function acm()	{		// Call the parent constructor		parent::acm_memory();		$this->redis = new Redis();		$this->redis->connect(PHPBB_ACM_REDIS_HOST, PHPBB_ACM_REDIS_PORT);		if (defined('PHPBB_ACM_REDIS_PASSWORD'))		{			if (!$this->redis->auth(PHPBB_ACM_REDIS_PASSWORD))			{				global $acm_type;				trigger_error("Incorrect password for the ACM module $acm_type.", E_USER_ERROR);			}		}		$this->redis->setOption(Redis::OPT_SERIALIZER, Redis::SERIALIZER_PHP);		$this->redis->setOption(Redis::OPT_PREFIX, $this->key_prefix);		if (defined('PHPBB_ACM_REDIS_DB'))		{			if (!$this->redis->select(PHPBB_ACM_REDIS_DB))			{				global $acm_type;				trigger_error("Incorrect database for the ACM module $acm_type.", E_USER_ERROR);			}		}	}	/**	* Unload the cache resources	*	* @return void	*/	function unload()	{		parent::unload();		$this->redis->close();	}	/**	* Purge cache data	*	* @return void	*/	function purge()	{		$this->redis->flushDB();		parent::purge();	}	/**	* Fetch an item from the cache	*	* @access protected	* @param string $var Cache key	* @return mixed Cached data	*/	function _read($var)	{		return $this->redis->get($var);	}	/**	* Store data in the cache	*	* @access protected	* @param string $var Cache key	* @param mixed $data Data to store	* @param int $ttl Time-to-live of cached data	* @return bool True if the operation succeeded	*/	function _write($var, $data, $ttl = 2592000)	{		return $this->redis->setex($var, $ttl, $data);	}	/**	* Remove an item from the cache	*	* @access protected	* @param string $var Cache key	* @return bool True if the operation succeeded	*/	function _delete($var)	{		if ($this->redis->delete($var) > 0)		{			return true;		}		return false;	}}
<?php/**** @package phpBB3* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @ignore*/define('IN_PHPBB', true);$phpbb_root_path = (defined('PHPBB_ROOT_PATH')) ? PHPBB_ROOT_PATH : './../';$phpEx = substr(strrchr(__FILE__, '.'), 1);// Thank you sun.if (isset($_SERVER['CONTENT_TYPE'])){	if ($_SERVER['CONTENT_TYPE'] === 'application/x-java-archive')	{		exit;	}}else if (isset($_SERVER['HTTP_USER_AGENT']) && strpos($_SERVER['HTTP_USER_AGENT'], 'Java') !== false){	exit;}if (isset($_GET['avatar'])){	require($phpbb_root_path . 'includes/startup.' . $phpEx);	require($phpbb_root_path . 'config.' . $phpEx);	if (!defined('PHPBB_INSTALLED') || empty($dbms) || empty($acm_type))	{		exit;	}	require($phpbb_root_path . 'includes/acm/acm_' . $acm_type . '.' . $phpEx);	require($phpbb_root_path . 'includes/cache.' . $phpEx);	require($phpbb_root_path . 'includes/db/' . $dbms . '.' . $phpEx);	require($phpbb_root_path . 'includes/constants.' . $phpEx);	require($phpbb_root_path . 'includes/functions.' . $phpEx);	$db = new $sql_db();	$cache = new cache();	// Connect to DB	if (!@$db->sql_connect($dbhost, $dbuser, $dbpasswd, $dbname, $dbport, false, false))	{		exit;	}	unset($dbpasswd);	// worst-case default	$browser = (!empty($_SERVER['HTTP_USER_AGENT'])) ? htmlspecialchars((string) $_SERVER['HTTP_USER_AGENT']) : 'msie 6.0';	$config = $cache->obtain_config();	$filename = request_var('avatar', '');	$avatar_group = false;	$exit = false;	if (isset($filename[0]) && $filename[0] === 'g')	{		$avatar_group = true;		$filename = substr($filename, 1);	}	// '==' is not a bug - . as the first char is as bad as no dot at all	if (strpos($filename, '.') == false)	{		send_status_line(403, 'Forbidden');		$exit = true;	}	if (!$exit)	{		$ext		= substr(strrchr($filename, '.'), 1);		$stamp		= (int) substr(stristr($filename, '_'), 1);		$filename	= (int) $filename;		$exit = set_modified_headers($stamp, $browser);	}	if (!$exit && !in_array($ext, array('png', 'gif', 'jpg', 'jpeg')))	{		// no way such an avatar could exist. They are not following the rules, stop the show.		send_status_line(403, 'Forbidden');		$exit = true;	}	if (!$exit)	{		if (!$filename)		{			// no way such an avatar could exist. They are not following the rules, stop the show.			send_status_line(403, 'Forbidden');		}		else		{			send_avatar_to_browser(($avatar_group ? 'g' : '') . $filename . '.' . $ext, $browser);		}	}	file_gc();}// implicit else: we are not in avatar modeinclude($phpbb_root_path . 'common.' . $phpEx);$download_id = request_var('id', 0);$mode = request_var('mode', '');$thumbnail = request_var('t', false);// Start session management, do not update session page.$user->session_begin(false);$auth->acl($user->data);$user->setup('viewtopic');if (!$download_id){	send_status_line(404, 'Not Found');	trigger_error('NO_ATTACHMENT_SELECTED');}if (!$config['allow_attachments'] && !$config['allow_pm_attach']){	send_status_line(404, 'Not Found');	trigger_error('ATTACHMENT_FUNCTIONALITY_DISABLED');}$sql = 'SELECT attach_id, in_message, post_msg_id, extension, is_orphan, poster_id, filetime	FROM ' . ATTACHMENTS_TABLE . "	WHERE attach_id = $download_id";$result = $db->sql_query_limit($sql, 1);$attachment = $db->sql_fetchrow($result);$db->sql_freeresult($result);if (!$attachment){	send_status_line(404, 'Not Found');	trigger_error('ERROR_NO_ATTACHMENT');}if ((!$attachment['in_message'] && !$config['allow_attachments']) || ($attachment['in_message'] && !$config['allow_pm_attach'])){	send_status_line(404, 'Not Found');	trigger_error('ATTACHMENT_FUNCTIONALITY_DISABLED');}$row = array();if ($attachment['is_orphan']){	// We allow admins having attachment permissions to see orphan attachments...	$own_attachment = ($auth->acl_get('a_attach') || $attachment['poster_id'] == $user->data['user_id']) ? true : false;	if (!$own_attachment || ($attachment['in_message'] && !$auth->acl_get('u_pm_download')) || (!$attachment['in_message'] && !$auth->acl_get('u_download')))	{		send_status_line(404, 'Not Found');		trigger_error('ERROR_NO_ATTACHMENT');	}	// Obtain all extensions...	$extensions = $cache->obtain_attach_extensions(true);}else{	if (!$attachment['in_message'])	{		//		$sql = 'SELECT p.forum_id, f.forum_password, f.parent_id			FROM ' . POSTS_TABLE . ' p, ' . FORUMS_TABLE . ' f			WHERE p.post_id = ' . $attachment['post_msg_id'] . '				AND p.forum_id = f.forum_id';		$result = $db->sql_query_limit($sql, 1);		$row = $db->sql_fetchrow($result);		$db->sql_freeresult($result);		// Global announcement?		$f_download = (!$row) ? $auth->acl_getf_global('f_download') : $auth->acl_get('f_download', $row['forum_id']);		if ($auth->acl_get('u_download') && $f_download)		{			if ($row && $row['forum_password'])			{				// Do something else ... ?				login_forum_box($row);			}		}		else		{			send_status_line(403, 'Forbidden');			trigger_error('SORRY_AUTH_VIEW_ATTACH');		}	}	else	{		$row['forum_id'] = false;		if (!$auth->acl_get('u_pm_download'))		{			send_status_line(403, 'Forbidden');			trigger_error('SORRY_AUTH_VIEW_ATTACH');		}		// Check if the attachment is within the users scope...		$sql = 'SELECT user_id, author_id			FROM ' . PRIVMSGS_TO_TABLE . '			WHERE msg_id = ' . $attachment['post_msg_id'];		$result = $db->sql_query($sql);		$allowed = false;		while ($user_row = $db->sql_fetchrow($result))		{			if ($user->data['user_id'] == $user_row['user_id'] || $user->data['user_id'] == $user_row['author_id'])			{				$allowed = true;				break;			}		}		$db->sql_freeresult($result);		if (!$allowed)		{			send_status_line(403, 'Forbidden');			trigger_error('ERROR_NO_ATTACHMENT');		}	}	// disallowed?	$extensions = array();	if (!extension_allowed($row['forum_id'], $attachment['extension'], $extensions))	{		send_status_line(404, 'Forbidden');		trigger_error(sprintf($user->lang['EXTENSION_DISABLED_AFTER_POSTING'], $attachment['extension']));	}}if (!download_allowed()){	send_status_line(403, 'Forbidden');	trigger_error($user->lang['LINKAGE_FORBIDDEN']);}$download_mode = (int) $extensions[$attachment['extension']]['download_mode'];// Fetching filename here to prevent sniffing of filename$sql = 'SELECT attach_id, is_orphan, in_message, post_msg_id, extension, physical_filename, real_filename, mimetype, filetime	FROM ' . ATTACHMENTS_TABLE . "	WHERE attach_id = $download_id";$result = $db->sql_query_limit($sql, 1);$attachment = $db->sql_fetchrow($result);$db->sql_freeresult($result);if (!$attachment){	send_status_line(404, 'Not Found');	trigger_error('ERROR_NO_ATTACHMENT');}$attachment['physical_filename'] = utf8_basename($attachment['physical_filename']);$display_cat = $extensions[$attachment['extension']]['display_cat'];if (($display_cat == ATTACHMENT_CATEGORY_IMAGE || $display_cat == ATTACHMENT_CATEGORY_THUMB) && !$user->optionget('viewimg')){	$display_cat = ATTACHMENT_CATEGORY_NONE;}if ($display_cat == ATTACHMENT_CATEGORY_FLASH && !$user->optionget('viewflash')){	$display_cat = ATTACHMENT_CATEGORY_NONE;}if ($thumbnail){	$attachment['physical_filename'] = 'thumb_' . $attachment['physical_filename'];}else if (($display_cat == ATTACHMENT_CATEGORY_NONE/* || $display_cat == ATTACHMENT_CATEGORY_IMAGE*/) && !$attachment['is_orphan']){	// Update download count	$sql = 'UPDATE ' . ATTACHMENTS_TABLE . '		SET download_count = download_count + 1		WHERE attach_id = ' . $attachment['attach_id'];	$db->sql_query($sql);}if ($display_cat == ATTACHMENT_CATEGORY_IMAGE && $mode === 'view' && (strpos($attachment['mimetype'], 'image') === 0) && ((strpos(strtolower($user->browser), 'msie') !== false) && (strpos(strtolower($user->browser), 'msie 8.0') === false))){	wrap_img_in_html(append_sid($phpbb_root_path . 'download/file.' . $phpEx, 'id=' . $attachment['attach_id']), $attachment['real_filename']);	file_gc();}else{	// Determine the 'presenting'-method	if ($download_mode == PHYSICAL_LINK)	{		// This presenting method should no longer be used		if (!@is_dir($phpbb_root_path . $config['upload_path']))		{			send_status_line(500, 'Internal Server Error');			trigger_error($user->lang['PHYSICAL_DOWNLOAD_NOT_POSSIBLE']);		}		redirect($phpbb_root_path . $config['upload_path'] . '/' . $attachment['physical_filename']);		file_gc();	}	else	{		send_file_to_browser($attachment, $config['upload_path'], $display_cat);		file_gc();	}}/*** A simplified function to deliver avatars* The argument needs to be checked before calling this function.*/function send_avatar_to_browser($file, $browser){	global $config, $phpbb_root_path;	$prefix = $config['avatar_salt'] . '_';	$image_dir = $config['avatar_path'];	// Adjust image_dir path (no trailing slash)	if (substr($image_dir, -1, 1) == '/' || substr($image_dir, -1, 1) == '\\')	{		$image_dir = substr($image_dir, 0, -1) . '/';	}	$image_dir = str_replace(array('../', '..\\', './', '.\\'), '', $image_dir);	if ($image_dir && ($image_dir[0] == '/' || $image_dir[0] == '\\'))	{		$image_dir = '';	}	$file_path = $phpbb_root_path . $image_dir . '/' . $prefix . $file;	if ((@file_exists($file_path) && @is_readable($file_path)) && !headers_sent())	{		header('Pragma: public');		$image_data = @getimagesize($file_path);		header('Content-Type: ' . image_type_to_mime_type($image_data[2]));		if (strpos(strtolower($browser), 'msie') !== false && strpos(strtolower($browser), 'msie 8.0') === false)		{			header('Content-Disposition: attachment; ' . header_filename($file));			if (strpos(strtolower($browser), 'msie 6.0') !== false)			{				header('Expires: -1');			}			else			{				header('Expires: ' . gmdate('D, d M Y H:i:s \G\M\T', time() + 31536000));			}		}		else		{			header('Content-Disposition: inline; ' . header_filename($file));			header('Expires: ' . gmdate('D, d M Y H:i:s \G\M\T', time() + 31536000));		}		$size = @filesize($file_path);		if ($size)		{			header("Content-Length: $size");		}		if (@readfile($file_path) == false)		{			$fp = @fopen($file_path, 'rb');			if ($fp !== false)			{				while (!feof($fp))				{					echo fread($fp, 8192);				}				fclose($fp);			}		}		flush();	}	else	{		send_status_line(404, 'Not Found');	}}/*** Wraps an url into a simple html page. Used to display attachments in IE.* this is a workaround for now; might be moved to template system later* direct any complaints to 1 Microsoft Way, Redmond*/function wrap_img_in_html($src, $title){	echo '<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-Strict.dtd">';	echo '<html>';	echo '<head>';	echo '<meta http-equiv="content-type" content="text/html; charset=UTF-8" />';	echo '<title>' . $title . '</title>';	echo '</head>';	echo '<body>';	echo '<div>';	echo '<img src="' . $src . '" alt="' . $title . '" />';	echo '</div>';	echo '</body>';	echo '</html>';}/*** Send file to browser*/function send_file_to_browser($attachment, $upload_dir, $category){	global $user, $db, $config, $phpbb_root_path;	$filename = $phpbb_root_path . $upload_dir . '/' . $attachment['physical_filename'];	if (!@file_exists($filename))	{		send_status_line(404, 'Not Found');		trigger_error($user->lang['ERROR_NO_ATTACHMENT'] . '<br /><br />' . sprintf($user->lang['FILE_NOT_FOUND_404'], $filename));	}	// Correct the mime type - we force application/octetstream for all files, except images	// Please do not change this, it is a security precaution	if ($category != ATTACHMENT_CATEGORY_IMAGE || strpos($attachment['mimetype'], 'image') !== 0)	{		$attachment['mimetype'] = (strpos(strtolower($user->browser), 'msie') !== false || strpos(strtolower($user->browser), 'opera') !== false) ? 'application/octetstream' : 'application/octet-stream';	}	if (@ob_get_length())	{		@ob_end_clean();	}	// Now send the File Contents to the Browser	$size = @filesize($filename);	// To correctly display further errors we need to make sure we are using the correct headers for both (unsetting content-length may not work)	// Check if headers already sent or not able to get the file contents.	if (headers_sent() || !@file_exists($filename) || !@is_readable($filename))	{		// PHP track_errors setting On?		if (!empty($php_errormsg))		{			send_status_line(500, 'Internal Server Error');			trigger_error($user->lang['UNABLE_TO_DELIVER_FILE'] . '<br />' . sprintf($user->lang['TRACKED_PHP_ERROR'], $php_errormsg));		}		send_status_line(500, 'Internal Server Error');		trigger_error('UNABLE_TO_DELIVER_FILE');	}	// Now the tricky part... let's dance	header('Pragma: public');	/**	* Commented out X-Sendfile support. To not expose the physical filename within the header if xsendfile is absent we need to look into methods of checking it's status.	*	* Try X-Sendfile since it is much more server friendly - only works if the path is *not* outside of the root path...	* lighttpd has core support for it. An apache2 module is available at http://celebnamer.celebworld.ws/stuff/mod_xsendfile/	*	* Not really ideal, but should work fine...	* <code>	*	if (strpos($upload_dir, '/') !== 0 && strpos($upload_dir, '../') === false)	*	{	*		header('X-Sendfile: ' . $filename);	*	}	* </code>	*/	// Send out the Headers. Do not set Content-Disposition to inline please, it is a security measure for users using the Internet Explorer.	$is_ie8 = (strpos(strtolower($user->browser), 'msie 8.0') !== false);	header('Content-Type: ' . $attachment['mimetype']);	if ($is_ie8)	{		header('X-Content-Type-Options: nosniff');	}	if ($category == ATTACHMENT_CATEGORY_FLASH && request_var('view', 0) === 1)	{		// We use content-disposition: inline for flash files and view=1 to let it correctly play with flash player 10 - any other disposition will fail to play inline		header('Content-Disposition: inline');	}	else	{		if (empty($user->browser) || (!$is_ie8 && (strpos(strtolower($user->browser), 'msie') !== false)))		{			header('Content-Disposition: attachment; ' . header_filename(htmlspecialchars_decode($attachment['real_filename'])));			if (empty($user->browser) || (strpos(strtolower($user->browser), 'msie 6.0') !== false))			{				header('expires: -1');			}		}		else		{			header('Content-Disposition: ' . ((strpos($attachment['mimetype'], 'image') === 0) ? 'inline' : 'attachment') . '; ' . header_filename(htmlspecialchars_decode($attachment['real_filename'])));			if ($is_ie8 && (strpos($attachment['mimetype'], 'image') !== 0))			{				header('X-Download-Options: noopen');			}		}	}	if ($size)	{		header("Content-Length: $size");	}	// Close the db connection before sending the file	$db->sql_close();	if (!set_modified_headers($attachment['filetime'], $user->browser))	{		// Try to deliver in chunks		@set_time_limit(0);		$fp = @fopen($filename, 'rb');		if ($fp !== false)		{			while (!feof($fp))			{				echo fread($fp, 8192);			}			fclose($fp);		}		else		{			@readfile($filename);		}		flush();	}	file_gc();}/*** Get a browser friendly UTF-8 encoded filename*/function header_filename($file){	$user_agent = (!empty($_SERVER['HTTP_USER_AGENT'])) ? htmlspecialchars((string) $_SERVER['HTTP_USER_AGENT']) : '';	// There be dragons here.	// Not many follows the RFC...	if (strpos($user_agent, 'MSIE') !== false || strpos($user_agent, 'Safari') !== false || strpos($user_agent, 'Konqueror') !== false)	{		return "filename=" . rawurlencode($file);	}	// follow the RFC for extended filename for the rest	return "filename*=UTF-8''" . rawurlencode($file);}/*** Check if downloading item is allowed*/function download_allowed(){	global $config, $user, $db;	if (!$config['secure_downloads'])	{		return true;	}	$url = (!empty($_SERVER['HTTP_REFERER'])) ? trim($_SERVER['HTTP_REFERER']) : trim(getenv('HTTP_REFERER'));	if (!$url)	{		return ($config['secure_allow_empty_referer']) ? true : false;	}	// Split URL into domain and script part	$url = @parse_url($url);	if ($url === false)	{		return ($config['secure_allow_empty_referer']) ? true : false;	}	$hostname = $url['host'];	unset($url);	$allowed = ($config['secure_allow_deny']) ? false : true;	$iplist = array();	if (($ip_ary = @gethostbynamel($hostname)) !== false)	{		foreach ($ip_ary as $ip)		{			if ($ip)			{				$iplist[] = $ip;			}		}	}	// Check for own server...	$server_name = $user->host;	// Forcing server vars is the only way to specify/override the protocol	if ($config['force_server_vars'] || !$server_name)	{		$server_name = $config['server_name'];	}	if (preg_match('#^.*?' . preg_quote($server_name, '#') . '.*?$#i', $hostname))	{		$allowed = true;	}	// Get IP's and Hostnames	if (!$allowed)	{		$sql = 'SELECT site_ip, site_hostname, ip_exclude			FROM ' . SITELIST_TABLE;		$result = $db->sql_query($sql);		while ($row = $db->sql_fetchrow($result))		{			$site_ip = trim($row['site_ip']);			$site_hostname = trim($row['site_hostname']);			if ($site_ip)			{				foreach ($iplist as $ip)				{					if (preg_match('#^' . str_replace('\*', '.*?', preg_quote($site_ip, '#')) . '$#i', $ip))					{						if ($row['ip_exclude'])						{							$allowed = ($config['secure_allow_deny']) ? false : true;							break 2;						}						else						{							$allowed = ($config['secure_allow_deny']) ? true : false;						}					}				}			}			if ($site_hostname)			{				if (preg_match('#^' . str_replace('\*', '.*?', preg_quote($site_hostname, '#')) . '$#i', $hostname))				{					if ($row['ip_exclude'])					{						$allowed = ($config['secure_allow_deny']) ? false : true;						break;					}					else					{						$allowed = ($config['secure_allow_deny']) ? true : false;					}				}			}		}		$db->sql_freeresult($result);	}	return $allowed;}/*** Check if the browser has the file already and set the appropriate headers-* @returns false if a resend is in order.*/function set_modified_headers($stamp, $browser){	// let's see if we have to send the file at all	$last_load 	=  isset($_SERVER['HTTP_IF_MODIFIED_SINCE']) ? strtotime(trim($_SERVER['HTTP_IF_MODIFIED_SINCE'])) : false;	if ((strpos(strtolower($browser), 'msie 6.0') === false) && (strpos(strtolower($browser), 'msie 8.0') === false))	{		if ($last_load !== false && $last_load >= $stamp)		{			send_status_line(304, 'Not Modified');			// seems that we need those too ... browsers			header('Pragma: public');			header('Expires: ' . gmdate('D, d M Y H:i:s \G\M\T', time() + 31536000));			return true;		}		else		{			header('Last-Modified: ' . gmdate('D, d M Y H:i:s', $stamp) . ' GMT');		}	}	return false;}function file_gc(){	global $cache, $db;	if (!empty($cache))	{		$cache->unload();	}	$db->sql_close();	exit;}?>
<?php/**** @package acp* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @package module_install*/class acp_search_info{	function module()	{		return array(			'filename'	=> 'acp_search',			'title'		=> 'ACP_SEARCH',			'version'	=> '1.0.0',			'modes'		=> array(				'settings'	=> array('title' => 'ACP_SEARCH_SETTINGS', 'auth' => 'acl_a_search', 'cat' => array('ACP_SERVER_CONFIGURATION')),				'index'		=> array('title' => 'ACP_SEARCH_INDEX', 'auth' => 'acl_a_search', 'cat' => array('ACP_CAT_DATABASE')),			),		);	}	function install()	{	}	function uninstall()	{	}}?>
<?php/**** @package install* @version $Id$* @copyright (c) 2006 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//***/if (!defined('IN_INSTALL')){	// Someone has tried to access the file direct. This is not a good idea, so exit	exit;}if (!empty($setmodules)){	$module[] = array(		'module_type'		=> 'install',		'module_title'		=> 'CONVERT',		'module_filename'	=> substr(basename(__FILE__), 0, -strlen($phpEx)-1),		'module_order'		=> 20,		'module_subs'		=> '',		'module_stages'		=> array('INTRO', 'SETTINGS', 'IN_PROGRESS', 'FINAL'),		'module_reqs'		=> ''	);}/*** Class holding all convertor-specific details.* @package install*/class convert{	var $options = array();	var $convertor_tag = '';	var $src_dbms = '';	var $src_dbhost = '';	var $src_dbport = '';	var $src_dbuser = '';	var $src_dbpasswd = '';	var $src_dbname = '';	var $src_table_prefix = '';	var $convertor_data = array();	var $tables = array();	var $config_schema = array();	var $convertor = array();	var $src_truncate_statement = 'DELETE FROM ';	var $truncate_statement = 'DELETE FROM ';	var $fulltext_search;	// Batch size, can be adjusted by the conversion file	// For big boards a value of 6000 seems to be optimal	var $batch_size = 2000;	// Number of rows to be inserted at once (extended insert) if supported	// For installations having enough memory a value of 60 may be good.	var $num_wait_rows = 20;	// Mysqls internal recoding engine messing up with our (better) functions? We at least support more encodings than mysql so should use it in favor.	var $mysql_convert = false;	var $p_master;	function convert(&$p_master)	{		$this->p_master = &$p_master;	}}/*** Convert class for conversions* @package install*/class install_convert extends module{	/**	* Variables used while converting, they are accessible from the global variable $convert	*/	function install_convert(&$p_master)	{		$this->p_master = &$p_master;	}	function main($mode, $sub)	{		global $lang, $template, $phpbb_root_path, $phpEx, $cache, $config, $language, $table_prefix;		global $convert;		$this->tpl_name = 'install_convert';		$this->mode = $mode;		$convert = new convert($this->p_master);		switch ($sub)		{			case 'intro':				// Try opening config file				// @todo If phpBB is not installed, we need to do a cut-down installation here				// For now, we redirect to the installation script instead				if (@file_exists($phpbb_root_path . 'config.' . $phpEx))				{					include($phpbb_root_path . 'config.' . $phpEx);				}				if (!defined('PHPBB_INSTALLED'))				{					$template->assign_vars(array(						'S_NOT_INSTALLED'		=> true,						'TITLE'					=> $lang['BOARD_NOT_INSTALLED'],						'BODY'					=> sprintf($lang['BOARD_NOT_INSTALLED_EXPLAIN'], append_sid($phpbb_root_path . 'install/index.' . $phpEx, 'mode=install&amp;language=' . $language)),					));					return;				}				require($phpbb_root_path . 'config.' . $phpEx);				require($phpbb_root_path . 'includes/constants.' . $phpEx);				require($phpbb_root_path . 'includes/db/' . $dbms . '.' . $phpEx);				require($phpbb_root_path . 'includes/functions_convert.' . $phpEx);				$db = new $sql_db();				$db->sql_connect($dbhost, $dbuser, $dbpasswd, $dbname, $dbport, false, true);				unset($dbpasswd);				// We need to fill the config to let internal functions correctly work				$sql = 'SELECT *					FROM ' . CONFIG_TABLE;				$result = $db->sql_query($sql);				$config = array();				while ($row = $db->sql_fetchrow($result))				{					$config[$row['config_name']] = $row['config_value'];				}				$db->sql_freeresult($result);				// Detect if there is already a conversion in progress at this point and offer to resume				// It's quite possible that the user will get disconnected during a large conversion so they need to be able to resume it				$new_conversion = request_var('new_conv', 0);				if ($new_conversion)				{					$config['convert_progress'] = '';					$config['convert_db_server'] = '';					$config['convert_db_user'] = '';					$db->sql_query('DELETE FROM ' . CONFIG_TABLE . "						WHERE config_name = 'convert_progress'							OR config_name = 'convert_db_server'							OR config_name = 'convert_db_user'"					);				}				// Let's see if there is a conversion in the works...				$options = array();				if (!empty($config['convert_progress']) && !empty($config['convert_db_server']) && !empty($config['convert_db_user']) && !empty($config['convert_options']))				{					$options = unserialize($config['convert_progress']);					$options = array_merge($options, unserialize($config['convert_db_server']), unserialize($config['convert_db_user']), unserialize($config['convert_options']));				}				// This information should have already been checked once, but do it again for safety				if (!empty($options) && !empty($options['tag']) &&					isset($options['dbms']) &&					isset($options['dbhost']) &&					isset($options['dbport']) &&					isset($options['dbuser']) &&					isset($options['dbpasswd']) &&					isset($options['dbname']) &&					isset($options['table_prefix']))				{					$this->page_title = $lang['CONTINUE_CONVERT'];					$template->assign_vars(array(						'TITLE'			=> $lang['CONTINUE_CONVERT'],						'BODY'			=> $lang['CONTINUE_CONVERT_BODY'],						'L_NEW'			=> $lang['CONVERT_NEW_CONVERSION'],						'L_CONTINUE'	=> $lang['CONTINUE_OLD_CONVERSION'],						'S_CONTINUE'	=> true,						'U_NEW_ACTION'		=> $this->p_master->module_url . "?mode={$this->mode}&amp;sub=intro&amp;new_conv=1&amp;language=$language",						'U_CONTINUE_ACTION'	=> $this->p_master->module_url . "?mode={$this->mode}&amp;sub=in_progress&amp;tag={$options['tag']}{$options['step']}&amp;language=$language",					));					return;				}				$this->list_convertors($sub);			break;			case 'settings':				$this->get_convert_settings($sub);			break;			case 'in_progress':				$this->convert_data($sub);			break;			case 'final':				$this->page_title = $lang['CONVERT_COMPLETE'];				$template->assign_vars(array(					'TITLE'		=> $lang['CONVERT_COMPLETE'],					'BODY'		=> $lang['CONVERT_COMPLETE_EXPLAIN'],				));				// If we reached this step (conversion completed) we want to purge the cache and log the user out.				// This is for making sure the session get not screwed due to the 3.0.x users table being completely new.				$cache->purge();				require($phpbb_root_path . 'config.' . $phpEx);				require($phpbb_root_path . 'includes/constants.' . $phpEx);				require($phpbb_root_path . 'includes/db/' . $dbms . '.' . $phpEx);				require($phpbb_root_path . 'includes/functions_convert.' . $phpEx);				$db = new $sql_db();				$db->sql_connect($dbhost, $dbuser, $dbpasswd, $dbname, $dbport, false, true);				unset($dbpasswd);				$sql = 'SELECT config_value					FROM ' . CONFIG_TABLE . '					WHERE config_name = \'search_type\'';				$result = $db->sql_query($sql);				if ($db->sql_fetchfield('config_value') != 'fulltext_mysql')				{					$template->assign_vars(array(						'S_ERROR_BOX'	=> true,						'ERROR_TITLE'	=> $lang['SEARCH_INDEX_UNCONVERTED'],						'ERROR_MSG'		=> $lang['SEARCH_INDEX_UNCONVERTED_EXPLAIN'],					));				}				switch ($db->sql_layer)				{					case 'sqlite':					case 'firebird':						$db->sql_query('DELETE FROM ' . SESSIONS_KEYS_TABLE);						$db->sql_query('DELETE FROM ' . SESSIONS_TABLE);					break;					default:						$db->sql_query('TRUNCATE TABLE ' . SESSIONS_KEYS_TABLE);						$db->sql_query('TRUNCATE TABLE ' . SESSIONS_TABLE);					break;				}			break;		}	}	/**	* Generate a list of all available conversion modules	*/	function list_convertors($sub)	{		global $lang, $language, $template, $phpbb_root_path, $phpEx;		$this->page_title = $lang['SUB_INTRO'];		$template->assign_vars(array(			'TITLE'		=> $lang['CONVERT_INTRO'],			'BODY'		=> $lang['CONVERT_INTRO_BODY'],			'L_AUTHOR'					=> $lang['AUTHOR'],			'L_AVAILABLE_CONVERTORS'	=> $lang['AVAILABLE_CONVERTORS'],			'L_CONVERT'					=> $lang['CONVERT'],			'L_NO_CONVERTORS'			=> $lang['NO_CONVERTORS'],			'L_OPTIONS'					=> $lang['CONVERT_OPTIONS'],			'L_SOFTWARE'				=> $lang['SOFTWARE'],			'L_VERSION'					=> $lang['VERSION'],			'S_LIST'	=> true,		));		$convertors = $sort = array();		$get_info = true;		$handle = @opendir('./convertors/');		if (!$handle)		{			$this->error('Unable to access the convertors directory', __LINE__, __FILE__);		}		while ($entry = readdir($handle))		{			if (preg_match('/^convert_([a-z0-9_]+).' . $phpEx . '$/i', $entry, $m))			{				include('./convertors/' . $entry);				if (isset($convertor_data))				{					$sort[strtolower($convertor_data['forum_name'])] = sizeof($convertors);					$convertors[] = array(						'tag'			=>	$m[1],						'forum_name'	=>	$convertor_data['forum_name'],						'version'		=>	$convertor_data['version'],						'dbms'			=>	$convertor_data['dbms'],						'dbhost'		=>	$convertor_data['dbhost'],						'dbport'		=>	$convertor_data['dbport'],						'dbuser'		=>	$convertor_data['dbuser'],						'dbpasswd'		=>	$convertor_data['dbpasswd'],						'dbname'		=>	$convertor_data['dbname'],						'table_prefix'	=>	$convertor_data['table_prefix'],						'author'		=>	$convertor_data['author']					);				}				unset($convertor_data);			}		}		closedir($handle);		@ksort($sort);		foreach ($sort as $void => $index)		{			$template->assign_block_vars('convertors', array(				'AUTHOR'	=> $convertors[$index]['author'],				'SOFTWARE'	=> $convertors[$index]['forum_name'],				'VERSION'	=> $convertors[$index]['version'],				'U_CONVERT'	=> $this->p_master->module_url . "?mode={$this->mode}&amp;language=$language&amp;sub=settings&amp;tag=" . $convertors[$index]['tag'],			));		}	}	/**	*/	function get_convert_settings($sub)	{		global $lang, $language, $template, $db, $phpbb_root_path, $phpEx, $config, $cache;		require($phpbb_root_path . 'config.' . $phpEx);		require($phpbb_root_path . 'includes/constants.' . $phpEx);		require($phpbb_root_path . 'includes/db/' . $dbms . '.' . $phpEx);		require($phpbb_root_path . 'includes/functions_convert.' . $phpEx);		$db = new $sql_db();		$db->sql_connect($dbhost, $dbuser, $dbpasswd, $dbname, $dbport, false, true);		unset($dbpasswd);		$this->page_title = $lang['STAGE_SETTINGS'];		// We need to fill the config to let internal functions correctly work		$sql = 'SELECT *			FROM ' . CONFIG_TABLE;		$result = $db->sql_query($sql);		$config = array();		while ($row = $db->sql_fetchrow($result))		{			$config[$row['config_name']] = $row['config_value'];		}		$db->sql_freeresult($result);		$convertor_tag = request_var('tag', '');		if (empty($convertor_tag))		{			$this->p_master->error($lang['NO_CONVERT_SPECIFIED'], __LINE__, __FILE__);		}		$get_info = true;		// check security implications of direct inclusion		$convertor_tag = basename($convertor_tag);		if (!file_exists('./convertors/convert_' . $convertor_tag . '.' . $phpEx))		{			$this->p_master->error($lang['CONVERT_NOT_EXIST'], __LINE__, __FILE__);		}		include('./convertors/convert_' . $convertor_tag . '.' . $phpEx);		// The test_file is a file that should be present in the location of the old board.		if (!isset($test_file))		{			$this->p_master->error($lang['DEV_NO_TEST_FILE'], __LINE__, __FILE__);		}		$submit = (isset($_POST['submit'])) ? true : false;		$src_dbms			= request_var('src_dbms', $convertor_data['dbms']);		$src_dbhost			= request_var('src_dbhost', $convertor_data['dbhost']);		$src_dbport			= request_var('src_dbport', $convertor_data['dbport']);		$src_dbuser			= request_var('src_dbuser', $convertor_data['dbuser']);		$src_dbpasswd		= request_var('src_dbpasswd', $convertor_data['dbpasswd']);		$src_dbname			= request_var('src_dbname', $convertor_data['dbname']);		$src_table_prefix	= request_var('src_table_prefix', $convertor_data['table_prefix']);		$forum_path			= request_var('forum_path', $convertor_data['forum_path']);		$refresh			= request_var('refresh', 1);		// Default URL of the old board		// @todo Are we going to use this for attempting to convert URL references in posts, or should we remove it?		//		-> We should convert old urls to the new relative urls format		// $src_url = request_var('src_url', 'Not in use at the moment');		// strip trailing slash from old forum path		$forum_path = (strlen($forum_path) && $forum_path[strlen($forum_path) - 1] == '/') ? substr($forum_path, 0, -1) : $forum_path;		$error = array();		if ($submit)		{			if (!@file_exists('./../' . $forum_path . '/' . $test_file))			{				$error[] = sprintf($lang['COULD_NOT_FIND_PATH'], $forum_path);			}			$connect_test = false;			$available_dbms = get_available_dbms(false, true, true);			if (!isset($available_dbms[$src_dbms]) || !$available_dbms[$src_dbms]['AVAILABLE'])			{				$error['db'][] = $lang['INST_ERR_NO_DB'];				$connect_test = false;			}			else			{				$connect_test = connect_check_db(true, $error, $available_dbms[$src_dbms], $src_table_prefix, $src_dbhost, $src_dbuser, htmlspecialchars_decode($src_dbpasswd), $src_dbname, $src_dbport, true, ($src_dbms == $dbms) ? false : true, false);			}			// The forum prefix of the old and the new forum can only be the same if two different databases are used.			if ($src_table_prefix == $table_prefix && $src_dbms == $dbms && $src_dbhost == $dbhost && $src_dbport == $dbport && $src_dbname == $dbname)			{				$error[] = sprintf($lang['TABLE_PREFIX_SAME'], $src_table_prefix);			}			// Check table prefix			if (!sizeof($error))			{				// initiate database connection to old db if old and new db differ				global $src_db, $same_db;				$src_db = $same_db = false;				if ($src_dbms != $dbms || $src_dbhost != $dbhost || $src_dbport != $dbport || $src_dbname != $dbname || $src_dbuser != $dbuser)				{					$sql_db = 'dbal_' . $src_dbms;					$src_db = new $sql_db();					$src_db->sql_connect($src_dbhost, $src_dbuser, htmlspecialchars_decode($src_dbpasswd), $src_dbname, $src_dbport, false, true);					$same_db = false;				}				else				{					$src_db = $db;					$same_db = true;				}				$src_db->sql_return_on_error(true);				$db->sql_return_on_error(true);				// Try to select one row from the first table to see if the prefix is OK				$result = $src_db->sql_query_limit('SELECT * FROM ' . $src_table_prefix . $tables[0], 1);				if (!$result)				{					$prefixes = array();					$tables_existing = get_tables($src_db);					$tables_existing = array_map('strtolower', $tables_existing);					foreach ($tables_existing as $table_name)					{						compare_table($tables, $table_name, $prefixes);					}					unset($tables_existing);					foreach ($prefixes as $prefix => $count)					{						if ($count >= sizeof($tables))						{							$possible_prefix = $prefix;							break;						}					}					$msg = '';					if (!empty($convertor_data['table_prefix']))					{						$msg .= sprintf($lang['DEFAULT_PREFIX_IS'], $convertor_data['forum_name'], $convertor_data['table_prefix']);					}					if (!empty($possible_prefix))					{						$msg .= '<br />';						$msg .= ($possible_prefix == '*') ? $lang['BLANK_PREFIX_FOUND'] : sprintf($lang['PREFIX_FOUND'], $possible_prefix);						$src_table_prefix = ($possible_prefix == '*') ? '' : $possible_prefix;					}					$error[] = $msg;				}				$src_db->sql_freeresult($result);				$src_db->sql_return_on_error(false);			}			if (!sizeof($error))			{				// Save convertor Status				set_config('convert_progress', serialize(array(					'step'			=> '',					'table_prefix'	=> $src_table_prefix,					'tag'			=> $convertor_tag,				)), true);				set_config('convert_db_server', serialize(array(					'dbms'			=> $src_dbms,					'dbhost'		=> $src_dbhost,					'dbport'		=> $src_dbport,					'dbname'		=> $src_dbname,				)), true);				set_config('convert_db_user', serialize(array(					'dbuser'		=> $src_dbuser,					'dbpasswd'		=> $src_dbpasswd,				)), true);				// Save options				set_config('convert_options', serialize(array('forum_path' => './../' . $forum_path, 'refresh' => $refresh)), true);				$template->assign_block_vars('checks', array(					'TITLE'		=> $lang['VERIFY_OPTIONS'],					'RESULT'	=> $lang['CONVERT_SETTINGS_VERIFIED'],				));				$template->assign_vars(array(					'L_SUBMIT'	=> $lang['BEGIN_CONVERT'],//					'S_HIDDEN'	=> $s_hidden_fields,					'U_ACTION'	=> $this->p_master->module_url . "?mode={$this->mode}&amp;sub=in_progress&amp;tag=$convertor_tag&amp;language=$language",				));				return;			}			else			{				$template->assign_block_vars('checks', array(					'TITLE'		=> $lang['VERIFY_OPTIONS'],					'RESULT'	=> '<b style="color:red">' . implode('<br />', $error) . '</b>',				));			}		} // end submit		foreach ($this->convert_options as $config_key => $vars)		{			if (!is_array($vars) && strpos($config_key, 'legend') === false)			{				continue;			}			if (strpos($config_key, 'legend') !== false)			{				$template->assign_block_vars('options', array(					'S_LEGEND'		=> true,					'LEGEND'		=> $lang[$vars])				);				continue;			}			$options = isset($vars['options']) ? $vars['options'] : '';			$template->assign_block_vars('options', array(				'KEY'			=> $config_key,				'TITLE'			=> $lang[$vars['lang']],				'S_EXPLAIN'		=> $vars['explain'],				'S_LEGEND'		=> false,				'TITLE_EXPLAIN'	=> ($vars['explain']) ? $lang[$vars['lang'] . '_EXPLAIN'] : '',				'CONTENT'		=> $this->p_master->input_field($config_key, $vars['type'], $$config_key, $options),				)			);		}		$template->assign_vars(array(			'TITLE'		=> $lang['STAGE_SETTINGS'],			'BODY'		=> $lang['CONV_OPTIONS_BODY'],			'L_SUBMIT'	=> $lang['BEGIN_CONVERT'],			'U_ACTION'	=> $this->p_master->module_url . "?mode={$this->mode}&amp;sub=settings&amp;tag=$convertor_tag&amp;language=$language",		));	}	/**	* The function which does the actual work (or dispatches it to the relevant places)	*/	function convert_data($sub)	{		global $template, $user, $phpbb_root_path, $phpEx, $db, $lang, $config, $cache;		global $convert, $convert_row, $message_parser, $skip_rows, $language;		require($phpbb_root_path . 'config.' . $phpEx);		require($phpbb_root_path . 'includes/constants.' . $phpEx);		require($phpbb_root_path . 'includes/db/' . $dbms . '.' . $phpEx);		require($phpbb_root_path . 'includes/functions_convert.' . $phpEx);		$db = new $sql_db();		$db->sql_connect($dbhost, $dbuser, $dbpasswd, $dbname, $dbport, false, true);		unset($dbpasswd);		$sql = 'SELECT *			FROM ' . CONFIG_TABLE;		$result = $db->sql_query($sql);		$config = array();		while ($row = $db->sql_fetchrow($result))		{			$config[$row['config_name']] = $row['config_value'];		}		$db->sql_freeresult($result);		// Override a couple of config variables for the duration		$config['max_quote_depth'] = 0;		// @todo Need to confirm that max post length in source is <= max post length in destination or there may be interesting formatting issues		$config['max_post_chars'] = $config['min_post_chars'] = 0;		// Set up a user as well. We _should_ have enough of a database here at this point to do this		// and it helps for any core code we call		$user->session_begin();		$user->page = $user->extract_current_page($phpbb_root_path);		// This is a little bit of a fudge, but it allows the language entries to be available to the		// core code without us loading them again		$user->lang = &$lang;		$this->page_title = $user->lang['STAGE_IN_PROGRESS'];		$convert->options = array();		if (isset($config['convert_progress']))		{			$convert->options = unserialize($config['convert_progress']);			$convert->options = array_merge($convert->options, unserialize($config['convert_db_server']), unserialize($config['convert_db_user']), unserialize($config['convert_options']));		}		// This information should have already been checked once, but do it again for safety		if (empty($convert->options) || empty($convert->options['tag']) ||			!isset($convert->options['dbms']) ||			!isset($convert->options['dbhost']) ||			!isset($convert->options['dbport']) ||			!isset($convert->options['dbuser']) ||			!isset($convert->options['dbpasswd']) ||			!isset($convert->options['dbname']) ||			!isset($convert->options['table_prefix']))		{			$this->p_master->error($user->lang['NO_CONVERT_SPECIFIED'], __LINE__, __FILE__);		}		// Make some short variables accessible, for easier referencing		$convert->convertor_tag = basename($convert->options['tag']);		$convert->src_dbms = $convert->options['dbms'];		$convert->src_dbhost = $convert->options['dbhost'];		$convert->src_dbport = $convert->options['dbport'];		$convert->src_dbuser = $convert->options['dbuser'];		$convert->src_dbpasswd = $convert->options['dbpasswd'];		$convert->src_dbname = $convert->options['dbname'];		$convert->src_table_prefix = $convert->options['table_prefix'];		// initiate database connection to old db if old and new db differ		global $src_db, $same_db;		$src_db = $same_db = null;		if ($convert->src_dbms != $dbms || $convert->src_dbhost != $dbhost || $convert->src_dbport != $dbport || $convert->src_dbname != $dbname || $convert->src_dbuser != $dbuser)		{			if ($convert->src_dbms != $dbms)			{				require($phpbb_root_path . 'includes/db/' . $convert->src_dbms . '.' . $phpEx);			}			$sql_db = 'dbal_' . $convert->src_dbms;			$src_db = new $sql_db();			$src_db->sql_connect($convert->src_dbhost, $convert->src_dbuser, htmlspecialchars_decode($convert->src_dbpasswd), $convert->src_dbname, $convert->src_dbport, false, true);			$same_db = false;		}		else		{			$src_db = $db;			$same_db = true;		}		$convert->mysql_convert = false;		switch ($src_db->sql_layer)		{			case 'sqlite':			case 'firebird':				$convert->src_truncate_statement = 'DELETE FROM ';			break;			// Thanks MySQL, for silently converting...			case 'mysql':			case 'mysql4':				if (version_compare($src_db->sql_server_info(true, false), '4.1.3', '>='))				{					$convert->mysql_convert = true;				}				$convert->src_truncate_statement = 'TRUNCATE TABLE ';			break;			case 'mysqli':				$convert->mysql_convert = true;				$convert->src_truncate_statement = 'TRUNCATE TABLE ';			break;			default:				$convert->src_truncate_statement = 'TRUNCATE TABLE ';			break;		}		if ($convert->mysql_convert && !$same_db)		{			$src_db->sql_query("SET NAMES 'binary'");		}		switch ($db->sql_layer)		{			case 'sqlite':			case 'firebird':				$convert->truncate_statement = 'DELETE FROM ';			break;			default:				$convert->truncate_statement = 'TRUNCATE TABLE ';			break;		}		$get_info = false;		// check security implications of direct inclusion		if (!file_exists('./convertors/convert_' . $convert->convertor_tag . '.' . $phpEx))		{			$this->p_master->error($user->lang['CONVERT_NOT_EXIST'], __LINE__, __FILE__);		}		if (file_exists('./convertors/functions_' . $convert->convertor_tag . '.' . $phpEx))		{			include('./convertors/functions_' . $convert->convertor_tag . '.' . $phpEx);		}		$get_info = true;		include('./convertors/convert_' . $convert->convertor_tag . '.' . $phpEx);		// Map some variables...		$convert->convertor_data = $convertor_data;		$convert->tables = $tables;		$convert->config_schema = $config_schema;		// Now include the real data		$get_info = false;		include('./convertors/convert_' . $convert->convertor_tag . '.' . $phpEx);		$convert->convertor_data = $convertor_data;		$convert->tables = $tables;		$convert->config_schema = $config_schema;		$convert->convertor = $convertor;		// The test_file is a file that should be present in the location of the old board.		if (!file_exists($convert->options['forum_path'] . '/' . $test_file))		{			$this->p_master->error(sprintf($user->lang['COULD_NOT_FIND_PATH'], $convert->options['forum_path']), __LINE__, __FILE__);		}		$search_type = basename(trim($config['search_type']));		// For conversions we are a bit less strict and set to a search backend we know exist...		if (!file_exists($phpbb_root_path . 'includes/search/' . $search_type . '.' . $phpEx))		{			$search_type = 'fulltext_native';			set_config('search_type', $search_type);		}		if (!file_exists($phpbb_root_path . 'includes/search/' . $search_type . '.' . $phpEx))		{			trigger_error('NO_SUCH_SEARCH_MODULE');		}		require($phpbb_root_path . 'includes/search/' . $search_type . '.' . $phpEx);		$error = false;		$convert->fulltext_search = new $search_type($error);		if ($error)		{			trigger_error($error);		}		include($phpbb_root_path . 'includes/message_parser.' . $phpEx);		$message_parser = new parse_message();		$jump = request_var('jump', 0);		$final_jump = request_var('final_jump', 0);		$sync_batch = request_var('sync_batch', -1);		$last_statement = request_var('last', 0);		// We are running sync...		if ($sync_batch >= 0)		{			$this->sync_forums($sync_batch);			return;		}		if ($jump)		{			$this->jump($jump, $last_statement);			return;		}		if ($final_jump)		{			$this->final_jump($final_jump);			return;		}		$current_table = request_var('current_table', 0);		$old_current_table = min(-1, $current_table - 1);		$skip_rows = request_var('skip_rows', 0);		if (!$current_table && !$skip_rows)		{			if (empty($_REQUEST['confirm']))			{				// If avatars / ranks / smilies folders are specified make sure they are writable				$bad_folders = array();				$local_paths = array(					'avatar_path'			=> path($config['avatar_path']),					'avatar_gallery_path'	=> path($config['avatar_gallery_path']),					'icons_path'			=> path($config['icons_path']),					'ranks_path'			=> path($config['ranks_path']),					'smilies_path'			=> path($config['smilies_path'])				);				foreach ($local_paths as $folder => $local_path)				{					if (isset($convert->convertor[$folder]))					{						if (empty($convert->convertor['test_file']))						{							// test_file is mandantory at the moment so this should never be reached, but just in case...							$this->p_master->error($user->lang['DEV_NO_TEST_FILE'], __LINE__, __FILE__);						}						if (!$local_path || !phpbb_is_writable($phpbb_root_path . $local_path))						{							if (!$local_path)							{								$bad_folders[] = sprintf($user->lang['CONFIG_PHPBB_EMPTY'], $folder);							}							else							{								$bad_folders[] = $local_path;							}						}					}				}				if (sizeof($bad_folders))				{					$msg = (sizeof($bad_folders) == 1) ? $user->lang['MAKE_FOLDER_WRITABLE'] : $user->lang['MAKE_FOLDERS_WRITABLE'];					sort($bad_folders);					$this->p_master->error(sprintf($msg, implode('<br />', $bad_folders)), __LINE__, __FILE__, true);					$template->assign_vars(array(						'L_SUBMIT'	=> $user->lang['INSTALL_TEST'],						'U_ACTION'	=> $this->p_master->module_url . "?mode={$this->mode}&amp;sub=in_progress&amp;tag={$convert->convertor_tag}&amp;language=$language",					));					return;				}				// Grab all the tables used in convertor				$missing_tables = $tables_list = $aliases = array();				foreach ($convert->convertor['schema'] as $schema)				{					// Skip those not used (because of addons/plugins not detected)					if (!$schema['target'])					{						continue;					}					foreach ($schema as $key => $val)					{						// we're dealing with an array like:						// array('forum_status',			'forums.forum_status',				'is_item_locked')						if (is_int($key) && !empty($val[1]))						{							$temp_data = $val[1];							if (!is_array($temp_data))							{								$temp_data = array($temp_data);							}							foreach ($temp_data as $val)							{								if (preg_match('/([a-z0-9_]+)\.([a-z0-9_]+)\)* ?A?S? ?([a-z0-9_]*?)\.?([a-z0-9_]*)$/i', $val, $m))								{									$table = $convert->src_table_prefix . $m[1];									$tables_list[$table] = $table;									if (!empty($m[3]))									{										$aliases[] = $convert->src_table_prefix . $m[3];									}								}							}						}						// 'left_join'		=> 'topics LEFT JOIN vote_desc ON topics.topic_id = vote_desc.topic_id AND topics.topic_vote = 1'						else if ($key == 'left_join')						{							// Convert the value if it wasn't an array already.							if (!is_array($val))							{								$val = array($val);							}							for ($j = 0; $j < sizeof($val); ++$j)							{								if (preg_match('/LEFT JOIN ([a-z0-9_]+) AS ([a-z0-9_]+)/i', $val[$j], $m))								{									$table = $convert->src_table_prefix . $m[1];									$tables_list[$table] = $table;									if (!empty($m[2]))									{										$aliases[] = $convert->src_table_prefix . $m[2];									}								}							}						}					}				}				// Remove aliased tables from $tables_list				foreach ($aliases as $alias)				{					unset($tables_list[$alias]);				}				// Check if the tables that we need exist				$src_db->sql_return_on_error(true);				foreach ($tables_list as $table => $null)				{					$sql = 'SELECT 1 FROM ' . $table;					$_result = $src_db->sql_query_limit($sql, 1);					if (!$_result)					{						$missing_tables[] = $table;					}					$src_db->sql_freeresult($_result);				}				$src_db->sql_return_on_error(false);				// Throw an error if some tables are missing				// We used to do some guessing here, but since we have a suggestion of possible values earlier, I don't see it adding anything here to do it again				if (sizeof($missing_tables) == sizeof($tables_list))				{					$this->p_master->error($user->lang['NO_TABLES_FOUND'] . ' ' . $user->lang['CHECK_TABLE_PREFIX'], __LINE__, __FILE__);				}				else if (sizeof($missing_tables))				{					$this->p_master->error(sprintf($user->lang['TABLES_MISSING'], implode(', ', $missing_tables)) . '<br /><br />' . $user->lang['CHECK_TABLE_PREFIX'], __LINE__, __FILE__);				}				$url = $this->save_convert_progress('&amp;confirm=1');				$msg = $user->lang['PRE_CONVERT_COMPLETE'];				if ($convert->convertor_data['author_notes'])				{					$msg .= '</p><p>' . sprintf($user->lang['AUTHOR_NOTES'], $convert->convertor_data['author_notes']);				}				$template->assign_vars(array(					'L_SUBMIT'		=> $user->lang['CONTINUE_CONVERT'],					'L_MESSAGE'		=> $msg,					'U_ACTION'		=> $url,				));				return;			} // if (empty($_REQUEST['confirm']))			$template->assign_block_vars('checks', array(				'S_LEGEND'		=> true,				'LEGEND'		=> $user->lang['STARTING_CONVERT'],			));			// Convert the config table and load the settings of the old board			if (!empty($convert->config_schema))			{				restore_config($convert->config_schema);				// Override a couple of config variables for the duration				$config['max_quote_depth'] = 0;				// @todo Need to confirm that max post length in source is <= max post length in destination or there may be interesting formatting issues				$config['max_post_chars'] = $config['min_post_chars'] = 0;			}			$template->assign_block_vars('checks', array(				'TITLE'		=> $user->lang['CONFIG_CONVERT'],				'RESULT'	=> $user->lang['DONE'],			));			// Now process queries and execute functions that have to be executed prior to the conversion			if (!empty($convert->convertor['execute_first']))			{				eval($convert->convertor['execute_first']);			}			if (!empty($convert->convertor['query_first']))			{				if (!is_array($convert->convertor['query_first']))				{					$convert->convertor['query_first'] = array('target', array($convert->convertor['query_first']));				}				else if (!is_array($convert->convertor['query_first'][0]))				{					$convert->convertor['query_first'] = array(array($convert->convertor['query_first'][0], $convert->convertor['query_first'][1]));				}				foreach ($convert->convertor['query_first'] as $query_first)				{					if ($query_first[0] == 'src')					{						if ($convert->mysql_convert && $same_db)						{							$src_db->sql_query("SET NAMES 'binary'");						}						$src_db->sql_query($query_first[1]);						if ($convert->mysql_convert && $same_db)						{							$src_db->sql_query("SET NAMES 'utf8'");						}					}					else					{						$db->sql_query($query_first[1]);					}				}			}			$template->assign_block_vars('checks', array(				'TITLE'		=> $user->lang['PREPROCESS_STEP'],				'RESULT'	=> $user->lang['DONE'],			));		} // if (!$current_table && !$skip_rows)		$template->assign_block_vars('checks', array(			'S_LEGEND'		=> true,			'LEGEND'		=> $user->lang['FILLING_TABLES'],		));		// This loop takes one target table and processes it		while ($current_table < sizeof($convert->convertor['schema']))		{			$schema = $convert->convertor['schema'][$current_table];			// The target table isn't set, this can be because a module (for example the attachement mod) is taking care of this.			if (empty($schema['target']))			{				$current_table++;				continue;			}			$template->assign_block_vars('checks', array(				'TITLE'	=> sprintf($user->lang['FILLING_TABLE'], $schema['target']),			));			// This is only the case when we first start working on the tables.			if (!$skip_rows)			{				// process execute_first and query_first for this table...				if (!empty($schema['execute_first']))				{					eval($schema['execute_first']);				}				if (!empty($schema['query_first']))				{					if (!is_array($schema['query_first']))					{						$schema['query_first'] = array('target', array($schema['query_first']));					}					else if (!is_array($schema['query_first'][0]))					{						$schema['query_first'] = array(array($schema['query_first'][0], $schema['query_first'][1]));					}					foreach ($schema['query_first'] as $query_first)					{						if ($query_first[0] == 'src')						{							if ($convert->mysql_convert && $same_db)							{								$src_db->sql_query("SET NAMES 'binary'");							}							$src_db->sql_query($query_first[1]);							if ($convert->mysql_convert && $same_db)							{								$src_db->sql_query("SET NAMES 'utf8'");							}						}						else						{							$db->sql_query($query_first[1]);						}					}				}				if (!empty($schema['autoincrement']))				{					switch ($db->sql_layer)					{						case 'postgres':							$db->sql_query("SELECT SETVAL('" . $schema['target'] . "_seq',(select case when max(" . $schema['autoincrement'] . ")>0 then max(" . $schema['autoincrement'] . ")+1 else 1 end from " . $schema['target'] . '));');						break;						case 'oracle':							$result = $db->sql_query('SELECT MAX(' . $schema['autoincrement'] . ') as max_id FROM ' . $schema['target']);							$row = $db->sql_fetchrow($result);							$db->sql_freeresult($result);							$largest_id = (int) $row['max_id'];							if ($largest_id)							{								$db->sql_query('DROP SEQUENCE ' . $schema['target'] . '_seq');								$db->sql_query('CREATE SEQUENCE ' . $schema['target'] . '_seq START WITH ' . ($largest_id + 1));							}						break;					}				}			}			// Process execute_always for this table			// This is for code which needs to be executed on every pass of this table if			// it gets split because of time restrictions			if (!empty($schema['execute_always']))			{				eval($schema['execute_always']);			}			//			// Set up some variables			//			// $waiting_rows	holds rows for multirows insertion (MySQL only)			// $src_tables		holds unique tables with aliases to select from			// $src_fields		will quickly refer source fields (or aliases) corresponding to the current index			// $select_fields	holds the names of the fields to retrieve			//			$sql_data = array(				'source_fields'		=> array(),				'target_fields'		=> array(),				'source_tables'		=> array(),				'select_fields'		=> array(),			);			// This statement is building the keys for later insertion.			$insert_query = $this->build_insert_query($schema, $sql_data, $current_table);			// If no source table is affected, we skip the table			if (empty($sql_data['source_tables']))			{				$skip_rows = 0;				$current_table++;				continue;			}			$distinct = (!empty($schema['distinct'])) ? 'DISTINCT ' : '';			$sql = 'SELECT ' . $distinct . implode(', ', $sql_data['select_fields']) . " \nFROM " . implode(', ', $sql_data['source_tables']);			// Where			$sql .= (!empty($schema['where'])) ? "\nWHERE (" . $schema['where'] . ')' : '';			// Group By			if (!empty($schema['group_by']))			{				$schema['group_by'] = array($schema['group_by']);				foreach ($sql_data['select_fields'] as $select)				{					$alias = strpos(strtolower($select), ' as ');					$select = ($alias) ? substr($select, 0, $alias) : $select;					if (!in_array($select, $schema['group_by']))					{						$schema['group_by'][] = $select;					}				}			}			$sql .= (!empty($schema['group_by'])) ? "\nGROUP BY " . implode(', ', $schema['group_by']) : '';			// Having			$sql .= (!empty($schema['having'])) ? "\nHAVING " . $schema['having'] : '';			// Order By			if (empty($schema['order_by']) && !empty($schema['primary']))			{				$schema['order_by'] = $schema['primary'];			}			$sql .= (!empty($schema['order_by'])) ? "\nORDER BY " . $schema['order_by'] : '';			// Counting basically holds the amount of rows processed.			$counting = -1;			$batch_time = 0;			while ($counting === -1 || ($counting >= $convert->batch_size && still_on_time()))			{				$old_current_table = $current_table;				$rows = '';				$waiting_rows = array();				if (!empty($batch_time))				{					$mtime = explode(' ', microtime());					$mtime = $mtime[0] + $mtime[1];					$rows = ceil($counting/($mtime - $batch_time)) . " rows/s ($counting rows) | ";				}				$template->assign_block_vars('checks', array(					'TITLE'		=> "skip_rows = $skip_rows",					'RESULT'	=> $rows . ((defined('DEBUG_EXTRA') && function_exists('memory_get_usage')) ? ceil(memory_get_usage()/1024) . ' ' . $user->lang['KIB'] : ''),				));				$mtime = explode(' ', microtime());				$batch_time = $mtime[0] + $mtime[1];				if ($convert->mysql_convert && $same_db)				{					$src_db->sql_query("SET NAMES 'binary'");				}				// Take skip rows into account and only fetch batch_size amount of rows				$___result = $src_db->sql_query_limit($sql, $convert->batch_size, $skip_rows);				if ($convert->mysql_convert && $same_db)				{					$src_db->sql_query("SET NAMES 'utf8'");				}				// This loop processes each row				$counting = 0;				$convert->row = $convert_row = array();				if (!empty($schema['autoincrement']))				{					switch ($db->sql_layer)					{						case 'mssql':						case 'mssql_odbc':						case 'mssqlnative':							$db->sql_query('SET IDENTITY_INSERT ' . $schema['target'] . ' ON');						break;					}				}				// Now handle the rows until time is over or no more rows to process...				while ($counting === 0 || still_on_time())				{					$convert_row = $src_db->sql_fetchrow($___result);					if (!$convert_row)					{						// move to the next batch or table						break;					}					// With this we are able to always save the last state					$convert->row = $convert_row;					// Increment the counting variable, it stores the number of rows we have processed					$counting++;					$insert_values = array();					$sql_flag = $this->process_row($schema, $sql_data, $insert_values);					if ($sql_flag === true)					{						switch ($db->sql_layer)						{							// If MySQL, we'll wait to have num_wait_rows rows to submit at once							case 'mysql':							case 'mysql4':							case 'mysqli':								$waiting_rows[] = '(' . implode(', ', $insert_values) . ')';								if (sizeof($waiting_rows) >= $convert->num_wait_rows)								{									$errored = false;									$db->sql_return_on_error(true);									if (!$db->sql_query($insert_query . implode(', ', $waiting_rows)))									{										$errored = true;									}									$db->sql_return_on_error(false);									if ($errored)									{										$db->sql_return_on_error(true);										// Because it errored out we will try to insert the rows one by one... most of the time this										// is caused by duplicate entries - but we also do not want to miss one...										foreach ($waiting_rows as $waiting_sql)										{											if (!$db->sql_query($insert_query . $waiting_sql))											{												$this->p_master->db_error($user->lang['DB_ERR_INSERT'], htmlspecialchars($insert_query . $waiting_sql) . '<br /><br />' . htmlspecialchars(print_r($db->_sql_error(), true)), __LINE__, __FILE__, true);											}										}										$db->sql_return_on_error(false);									}									$waiting_rows = array();								}							break;							default:								$insert_sql = $insert_query . '(' . implode(', ', $insert_values) . ')';								$db->sql_return_on_error(true);								if (!$db->sql_query($insert_sql))								{									$this->p_master->db_error($user->lang['DB_ERR_INSERT'], htmlspecialchars($insert_sql) . '<br /><br />' . htmlspecialchars(print_r($db->_sql_error(), true)), __LINE__, __FILE__, true);								}								$db->sql_return_on_error(false);								$waiting_rows = array();							break;						}					}					$skip_rows++;				}				$src_db->sql_freeresult($___result);				// We might still have some rows waiting				if (sizeof($waiting_rows))				{					$errored = false;					$db->sql_return_on_error(true);					if (!$db->sql_query($insert_query . implode(', ', $waiting_rows)))					{						$errored = true;					}					$db->sql_return_on_error(false);					if ($errored)					{						$db->sql_return_on_error(true);						// Because it errored out we will try to insert the rows one by one... most of the time this						// is caused by duplicate entries - but we also do not want to miss one...						foreach ($waiting_rows as $waiting_sql)						{							$db->sql_query($insert_query . $waiting_sql);							$this->p_master->db_error($user->lang['DB_ERR_INSERT'], htmlspecialchars($insert_query . $waiting_sql) . '<br /><br />' . htmlspecialchars(print_r($db->_sql_error(), true)), __LINE__, __FILE__, true);						}						$db->sql_return_on_error(false);					}					$waiting_rows = array();				}				if (!empty($schema['autoincrement']))				{					switch ($db->sql_layer)					{						case 'mssql':						case 'mssql_odbc':						case 'mssqlnative':							$db->sql_query('SET IDENTITY_INSERT ' . $schema['target'] . ' OFF');						break;						case 'postgres':							$db->sql_query("SELECT SETVAL('" . $schema['target'] . "_seq',(select case when max(" . $schema['autoincrement'] . ")>0 then max(" . $schema['autoincrement'] . ")+1 else 1 end from " . $schema['target'] . '));');						break;						case 'oracle':							$result = $db->sql_query('SELECT MAX(' . $schema['autoincrement'] . ') as max_id FROM ' . $schema['target']);							$row = $db->sql_fetchrow($result);							$db->sql_freeresult($result);							$largest_id = (int) $row['max_id'];							if ($largest_id)							{								$db->sql_query('DROP SEQUENCE ' . $schema['target'] . '_seq');								$db->sql_query('CREATE SEQUENCE ' . $schema['target'] . '_seq START WITH ' . ($largest_id + 1));							}						break;					}				}			}			// When we reach this point, either the current table has been processed or we're running out of time.			if (still_on_time() && $counting < $convert->batch_size/* && !defined('DEBUG_EXTRA')*/)			{				$skip_rows = 0;				$current_table++;			}			else			{/*				if (still_on_time() && $counting < $convert->batch_size)				{					$skip_rows = 0;					$current_table++;				}*/				// Looks like we ran out of time.				$url = $this->save_convert_progress('&amp;current_table=' . $current_table . '&amp;skip_rows=' . $skip_rows);				$current_table++;//				$percentage = ($skip_rows == 0) ? 0 : floor(100 / ($total_rows / $skip_rows));				$msg = sprintf($user->lang['STEP_PERCENT_COMPLETED'], $current_table, sizeof($convert->convertor['schema']));				$template->assign_vars(array(					'L_MESSAGE'		=> $msg,					'L_SUBMIT'		=> $user->lang['CONTINUE_CONVERT'],					'U_ACTION'		=> $url,				));				$this->meta_refresh($url);				return;			}		}		// Process execute_last then we'll be done		$url = $this->save_convert_progress('&amp;jump=1');		$template->assign_vars(array(			'L_SUBMIT'		=> $user->lang['FINAL_STEP'],			'U_ACTION'		=> $url,		));		$this->meta_refresh($url);		return;	}	/**	* Sync function being executed at the middle, some functions need to be executed after a successful sync.	*/	function sync_forums($sync_batch)	{		global $template, $user, $db, $phpbb_root_path, $phpEx, $config, $cache;		global $convert;		$template->assign_block_vars('checks', array(			'S_LEGEND'	=> true,			'LEGEND'	=> $user->lang['SYNC_TOPICS'],		));		$batch_size = $convert->batch_size;		$sql = 'SELECT MIN(topic_id) as min_value, MAX(topic_id) AS max_value			FROM ' . TOPICS_TABLE;		$result = $db->sql_query($sql);		$row = $db->sql_fetchrow($result);		$db->sql_freeresult($result);		// Set values of minimum/maximum primary value for this table.		$primary_min = $row['min_value'];		$primary_max = $row['max_value'];		if ($sync_batch == 0)		{			$sync_batch = (int) $primary_min;		}		if ($sync_batch == 0)		{			$sync_batch = 1;		}		// Fetch a batch of rows, process and insert them.		while ($sync_batch <= $primary_max && still_on_time())		{			$end = ($sync_batch + $batch_size - 1);			// Sync all topics in batch mode...			sync('topic_approved', 'range', 'topic_id BETWEEN ' . $sync_batch . ' AND ' . $end, true, false);			sync('topic', 'range', 'topic_id BETWEEN ' . $sync_batch . ' AND ' . $end, true, true);			$template->assign_block_vars('checks', array(				'TITLE'		=> sprintf($user->lang['SYNC_TOPIC_ID'], $sync_batch, ($sync_batch + $batch_size)) . ((defined('DEBUG_EXTRA') && function_exists('memory_get_usage')) ? ' [' . ceil(memory_get_usage()/1024) . ' ' . $user->lang['KIB'] . ']' : ''),				'RESULT'	=> $user->lang['DONE'],			));			$sync_batch += $batch_size;		}		if ($sync_batch >= $primary_max)		{			$url = $this->save_convert_progress('&amp;final_jump=1');			$template->assign_vars(array(				'L_SUBMIT'		=> $user->lang['CONTINUE_CONVERT'],				'U_ACTION'		=> $url,			));			$this->meta_refresh($url);			return;		}		else		{			$sync_batch--;		}		$url = $this->save_convert_progress('&amp;sync_batch=' . $sync_batch);		$template->assign_vars(array(			'L_SUBMIT'		=> $user->lang['CONTINUE_CONVERT'],			'U_ACTION'		=> $url,		));		$this->meta_refresh($url);		return;	}	/**	* Save the convertor status	*/	function save_convert_progress($step)	{		global $convert, $language;		// Save convertor Status		set_config('convert_progress', serialize(array(			'step'			=> $step,			'table_prefix'	=> $convert->src_table_prefix,			'tag'			=> $convert->convertor_tag,		)), true);		set_config('convert_db_server', serialize(array(			'dbms'			=> $convert->src_dbms,			'dbhost'		=> $convert->src_dbhost,			'dbport'		=> $convert->src_dbport,			'dbname'		=> $convert->src_dbname,		)), true);		set_config('convert_db_user', serialize(array(			'dbuser'		=> $convert->src_dbuser,			'dbpasswd'		=> $convert->src_dbpasswd,		)), true);		return $this->p_master->module_url . "?mode={$this->mode}&amp;sub=in_progress&amp;tag={$convert->convertor_tag}$step&amp;language=$language";	}	/**	* Finish conversion, the last function to be called.	*/	function finish_conversion()	{		global $db, $phpbb_root_path, $phpEx, $convert, $config, $language, $user, $template;		$db->sql_query('DELETE FROM ' . CONFIG_TABLE . "			WHERE config_name = 'convert_progress'				OR config_name = 'convert_options'				OR config_name = 'convert_db_server'				OR config_name = 'convert_db_user'");		$db->sql_query('DELETE FROM ' . SESSIONS_TABLE);		@unlink($phpbb_root_path . 'cache/data_global.' . $phpEx);		cache_moderators();		// And finally, add a note to the log		add_log('admin', 'LOG_INSTALL_CONVERTED', $convert->convertor_data['forum_name'], $config['version']);		$url = $this->p_master->module_url . "?mode={$this->mode}&amp;sub=final&amp;language=$language";		$template->assign_vars(array(			'L_SUBMIT'		=> $user->lang['FINAL_STEP'],			'U_ACTION'		=> $url,		));		$this->meta_refresh($url);		return;	}	/**	* This function marks the steps after syncing	*/	function final_jump($final_jump)	{		global $template, $user, $src_db, $same_db, $db, $phpbb_root_path, $phpEx, $config, $cache;		global $convert;		$template->assign_block_vars('checks', array(			'S_LEGEND'	=> true,			'LEGEND'	=> $user->lang['PROCESS_LAST'],		));		if ($final_jump == 1)		{			$db->sql_return_on_error(true);			update_topics_posted();			$template->assign_block_vars('checks', array(				'TITLE'		=> $user->lang['UPDATE_TOPICS_POSTED'],				'RESULT'	=> $user->lang['DONE'],			));			if ($db->sql_error_triggered)			{				$template->assign_vars(array(					'S_ERROR_BOX'	=> true,					'ERROR_TITLE'	=> $user->lang['UPDATE_TOPICS_POSTED'],					'ERROR_MSG'		=> $user->lang['UPDATE_TOPICS_POSTED_ERR'],				));			}			$db->sql_return_on_error(false);			$this->finish_conversion();			return;		}	}	/**	* This function marks the steps before syncing (jump=1)	*/	function jump($jump, $last_statement)	{		global $template, $user, $src_db, $same_db, $db, $phpbb_root_path, $phpEx, $config, $cache;		global $convert;		$template->assign_block_vars('checks', array(			'S_LEGEND'	=> true,			'LEGEND'	=> $user->lang['PROCESS_LAST'],		));		if ($jump == 1)		{			// Execute 'last' statements/queries			if (!empty($convert->convertor['execute_last']))			{				if (!is_array($convert->convertor['execute_last']))				{					eval($convert->convertor['execute_last']);				}				else				{					while ($last_statement < sizeof($convert->convertor['execute_last']))					{						eval($convert->convertor['execute_last'][$last_statement]);						$template->assign_block_vars('checks', array(							'TITLE'		=> $convert->convertor['execute_last'][$last_statement],							'RESULT'	=> $user->lang['DONE'],						));						$last_statement++;						$url = $this->save_convert_progress('&amp;jump=1&amp;last=' . $last_statement);						$percentage = ($last_statement == 0) ? 0 : floor(100 / (sizeof($convert->convertor['execute_last']) / $last_statement));						$msg = sprintf($user->lang['STEP_PERCENT_COMPLETED'], $last_statement, sizeof($convert->convertor['execute_last']), $percentage);						$template->assign_vars(array(							'L_SUBMIT'		=> $user->lang['CONTINUE_LAST'],							'L_MESSAGE'		=> $msg,							'U_ACTION'		=> $url,						));						$this->meta_refresh($url);						return;					}				}			}			if (!empty($convert->convertor['query_last']))			{				if (!is_array($convert->convertor['query_last']))				{					$convert->convertor['query_last'] = array('target', array($convert->convertor['query_last']));				}				else if (!is_array($convert->convertor['query_last'][0]))				{					$convert->convertor['query_last'] = array(array($convert->convertor['query_last'][0], $convert->convertor['query_last'][1]));				}				foreach ($convert->convertor['query_last'] as $query_last)				{					if ($query_last[0] == 'src')					{						if ($convert->mysql_convert && $same_db)						{							$src_db->sql_query("SET NAMES 'binary'");						}						$src_db->sql_query($query_last[1]);						if ($convert->mysql_convert && $same_db)						{							$src_db->sql_query("SET NAMES 'utf8'");						}					}					else					{						$db->sql_query($query_last[1]);					}				}			}			// Sanity check			$db->sql_return_on_error(false);			$src_db->sql_return_on_error(false);			fix_empty_primary_groups();			$sql = 'SELECT MIN(user_regdate) AS board_startdate				FROM ' . USERS_TABLE;			$result = $db->sql_query($sql);			$row = $db->sql_fetchrow($result);			$db->sql_freeresult($result);			if (!isset($config['board_startdate']) || ($row['board_startdate'] < $config['board_startdate'] && $row['board_startdate'] > 0))			{				set_config('board_startdate', $row['board_startdate']);				$db->sql_query('UPDATE ' . USERS_TABLE . ' SET user_regdate = ' . $row['board_startdate'] . ' WHERE user_id = ' . ANONYMOUS);			}			update_dynamic_config();			$template->assign_block_vars('checks', array(				'TITLE'		=> $user->lang['CLEAN_VERIFY'],				'RESULT'	=> $user->lang['DONE'],			));			$url = $this->save_convert_progress('&amp;jump=2');			$template->assign_vars(array(				'L_SUBMIT'		=> $user->lang['CONTINUE_CONVERT'],				'U_ACTION'		=> $url,			));			$this->meta_refresh($url);			return;		}		if ($jump == 2)		{			$db->sql_query('UPDATE ' . USERS_TABLE . " SET user_permissions = ''");			// TODO: sync() is likely going to bomb out on forums with a considerable amount of topics.			// TODO: the sync function is able to handle FROM-TO values, we should use them here (batch processing)			sync('forum', '', '', false, true);			$cache->destroy('sql', FORUMS_TABLE);			$template->assign_block_vars('checks', array(				'TITLE'		=> $user->lang['SYNC_FORUMS'],				'RESULT'	=> $user->lang['DONE'],			));			// Continue with synchronizing the forums...			$url = $this->save_convert_progress('&amp;sync_batch=0');			$template->assign_vars(array(				'L_SUBMIT'		=> $user->lang['CONTINUE_CONVERT'],				'U_ACTION'		=> $url,			));			$this->meta_refresh($url);			return;		}	}	function build_insert_query(&$schema, &$sql_data, $current_table)	{		global $db, $user;		global $convert;		// Can we use IGNORE with this DBMS?		$sql_ignore = (strpos($db->sql_layer, 'mysql') === 0 && !defined('DEBUG_EXTRA')) ? 'IGNORE ' : '';		$insert_query = 'INSERT ' . $sql_ignore . 'INTO ' . $schema['target'] . ' (';		$aliases = array();		$sql_data = array(			'source_fields'		=> array(),			'target_fields'		=> array(),			'source_tables'		=> array(),			'select_fields'		=> array(),		);		foreach ($schema as $key => $val)		{			// Example: array('group_name',				'extension_groups.group_name',		'htmlspecialchars'),			if (is_int($key))			{				if (!empty($val[0]))				{					// Target fields					$sql_data['target_fields'][$val[0]] = $key;					$insert_query .= $val[0] . ', ';				}				if (!is_array($val[1]))				{					$val[1] = array($val[1]);				}				foreach ($val[1] as $valkey => $value_1)				{					// This should cover about any case:					//					// table.field					=> SELECT table.field				FROM table					// table.field AS alias			=> SELECT table.field	AS alias	FROM table					// table.field AS table2.alias	=> SELECT table2.field	AS alias	FROM table table2					// table.field AS table2.field	=> SELECT table2.field				FROM table table2					//					if (preg_match('/^([a-z0-9_]+)\.([a-z0-9_]+)( +AS +(([a-z0-9_]+?)\.)?([a-z0-9_]+))?$/i', $value_1, $m))					{						// There is 'AS ...' in the field names						if (!empty($m[3]))						{							$value_1 = ($m[2] == $m[6]) ? $m[1] . '.' . $m[2] : $m[1] . '.' . $m[2] . ' AS ' . $m[6];							// Table alias: store it then replace the source table with it							if (!empty($m[5]) && $m[5] != $m[1])							{								$aliases[$m[5]] = $m[1];								$value_1 = str_replace($m[1] . '.' . $m[2], $m[5] . '.' . $m[2], $value_1);							}						}						else						{							// No table alias							$sql_data['source_tables'][$m[1]] = (empty($convert->src_table_prefix)) ? $m[1] : $convert->src_table_prefix . $m[1] . ' ' . $m[1];						}						$sql_data['select_fields'][$value_1] = $value_1;						$sql_data['source_fields'][$key][$valkey] = (!empty($m[6])) ? $m[6] : $m[2];					}				}			}			else if ($key == 'where' || $key == 'group_by' || $key == 'order_by' || $key == 'having')			{				if (@preg_match_all('/([a-z0-9_]+)\.([a-z0-9_]+)/i', $val, $m))				{					foreach ($m[1] as $value)					{						$sql_data['source_tables'][$value] = (empty($convert->src_table_prefix)) ? $value : $convert->src_table_prefix . $value . ' ' . $value;					}				}			}		}		// Add the aliases to the list of tables		foreach ($aliases as $alias => $table)		{			$sql_data['source_tables'][$alias] = $convert->src_table_prefix . $table . ' ' . $alias;		}		// 'left_join'		=> 'forums LEFT JOIN forum_prune ON forums.forum_id = forum_prune.forum_id',		if (!empty($schema['left_join']))		{			if (!is_array($schema['left_join']))			{				$schema['left_join'] = array($schema['left_join']);			}			foreach ($schema['left_join'] as $left_join)			{				// This won't handle concatened LEFT JOINs				if (!preg_match('/([a-z0-9_]+) LEFT JOIN ([a-z0-9_]+) A?S? ?([a-z0-9_]*?) ?(ON|USING)(.*)/i', $left_join, $m))				{					$this->p_master->error(sprintf($user->lang['NOT_UNDERSTAND'], 'LEFT JOIN', $left_join, $current_table, $schema['target']), __LINE__, __FILE__);				}				if (!empty($aliases[$m[2]]))				{					if (!empty($m[3]))					{						$this->p_master->error(sprintf($user->lang['NAMING_CONFLICT'], $m[2], $m[3], $schema['left_join']), __LINE__, __FILE__);					}					$m[2] = $aliases[$m[2]];					$m[3] = $m[2];				}				$right_table = $convert->src_table_prefix . $m[2];				if (!empty($m[3]))				{					unset($sql_data['source_tables'][$m[3]]);				}				else if ($m[2] != $m[1])				{					unset($sql_data['source_tables'][$m[2]]);				}				if (strpos($sql_data['source_tables'][$m[1]], "\nLEFT JOIN") !== false)				{					$sql_data['source_tables'][$m[1]] = '(' . $sql_data['source_tables'][$m[1]] . ")\nLEFT JOIN $right_table";				}				else				{					$sql_data['source_tables'][$m[1]] .= "\nLEFT JOIN $right_table";				}				if (!empty($m[3]))				{					unset($sql_data['source_tables'][$m[3]]);					$sql_data['source_tables'][$m[1]] .= ' AS ' . $m[3];				}				else if (!empty($convert->src_table_prefix))				{					$sql_data['source_tables'][$m[1]] .= ' AS ' . $m[2];				}				$sql_data['source_tables'][$m[1]] .= ' ' . $m[4] . $m[5];			}		}		// Remove ", " from the end of the insert query		$insert_query = substr($insert_query, 0, -2) . ') VALUES ';		return $insert_query;	}	/**	* Function for processing the currently handled row	*/	function process_row(&$schema, &$sql_data, &$insert_values)	{		global $template, $user, $phpbb_root_path, $phpEx, $db, $lang, $config, $cache;		global $convert, $convert_row;		$sql_flag = false;		foreach ($schema as $key => $fields)		{			// We are only interested in the lines with:			// array('comment', 'attachments_desc.comment', 'htmlspecialchars'),			if (is_int($key))			{				if (!is_array($fields[1]))				{					$fields[1] = array($fields[1]);				}				$firstkey_set = false;				$firstkey = 0;				foreach ($fields[1] as $inner_key => $inner_value)				{					if (!$firstkey_set)					{						$firstkey = $inner_key;						$firstkey_set = true;					}					$src_field = isset($sql_data['source_fields'][$key][$inner_key]) ? $sql_data['source_fields'][$key][$inner_key] : '';					if (!empty($src_field))					{						$fields[1][$inner_key] = $convert->row[$src_field];					}				}				if (!empty($fields[0]))				{					// We have a target field, if we haven't set $sql_flag yet it will be set to TRUE.					// If a function has already set it to FALSE it won't change it.					if ($sql_flag === false)					{						$sql_flag = true;					}					// No function assigned?					if (empty($fields[2]))					{						$value = $fields[1][$firstkey];					}					else if (is_array($fields[2]))					{						// Execute complex function/eval/typecast						$value = $fields[1];						foreach ($fields[2] as $type => $execution)						{							if (strpos($type, 'typecast') === 0)							{								if (!is_array($value))								{									$value = array($value);								}								$value = $value[0];								settype($value, $execution);							}							else if (strpos($type, 'function') === 0)							{								if (!is_array($value))								{									$value = array($value);								}								$value = call_user_func_array($execution, $value);							}							else if (strpos($type, 'execute') === 0)							{								if (!is_array($value))								{									$value = array($value);								}								$execution = str_replace('{RESULT}', '$value', $execution);								$execution = str_replace('{VALUE}', '$value', $execution);								eval($execution);							}						}					}					else					{						$value = call_user_func_array($fields[2], $fields[1]);					}					if (is_null($value))					{						$value = '';					}					$insert_values[] = $db->_sql_validate_value($value);				}				else if (!empty($fields[2]))				{					if (is_array($fields[2]))					{						// Execute complex function/eval/typecast						$value = '';						foreach ($fields[2] as $type => $execution)						{							if (strpos($type, 'typecast') === 0)							{								$value = settype($value, $execution);							}							else if (strpos($type, 'function') === 0)							{								if (!is_array($value))								{									$value = array($value);								}								$value = call_user_func_array($execution, $value);							}							else if (strpos($type, 'execute') === 0)							{								if (!is_array($value))								{									$value = array($value);								}								$execution = str_replace('{RESULT}', '$value', $execution);								$execution = str_replace('{VALUE}', '$value', $execution);								eval($execution);							}						}					}					else					{						call_user_func_array($fields[2], $fields[1]);					}				}			}		}		return $sql_flag;	}	/**	* Own meta refresh function to be able to change the global time used	*/	function meta_refresh($url)	{		global $convert, $template;		if ($convert->options['refresh'])		{			// Because we should not rely on correct settings, we simply use the relative path here directly.			$template->assign_vars(array(				'S_REFRESH'	=> true,				'META'		=> '<meta http-equiv="refresh" content="5;url=' . $url . '" />')			);		}	}	/**	* The information below will be used to build the input fields presented to the user	*/	var $convert_options = array(		'legend1'			=> 'SPECIFY_OPTIONS',		'src_dbms'			=> array('lang' => 'DBMS',			'type' => 'select', 'options' => 'dbms_select(\'{VALUE}\', true)', 'explain' => false),		'src_dbhost'		=> array('lang' => 'DB_HOST',		'type' => 'text:25:100', 'explain' => true),		'src_dbport'		=> array('lang' => 'DB_PORT',		'type' => 'text:25:100', 'explain' => true),		'src_dbname'		=> array('lang' => 'DB_NAME',		'type' => 'text:25:100', 'explain' => false),		'src_dbuser'		=> array('lang' => 'DB_USERNAME',	'type' => 'text:25:100', 'explain' => false),		'src_dbpasswd'		=> array('lang' => 'DB_PASSWORD',	'type' => 'password:25:100', 'explain' => false),		'src_table_prefix'	=> array('lang' => 'TABLE_PREFIX',	'type' => 'text:25:100', 'explain' => false),		//'src_url'			=> array('lang' => 'FORUM_ADDRESS',	'type' => 'text:50:100', 'explain' => true),		'forum_path'		=> array('lang' => 'FORUM_PATH',	'type' => 'text:25:100', 'explain' => true),		'refresh'			=> array('lang' => 'REFRESH_PAGE',	'type' => 'radio:yes_no', 'explain' => true),	);}?>
<?php return array(''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'1',''=>'10',''=>'20',''=>'100',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'1',''=>'2',''=>'3',''=>'4',''=>'10',''=>'20',''=>'100',''=>'1000');
<?php/**** acp_forums [English]** @package language* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** DO NOT CHANGE*/if (!defined('IN_PHPBB')){	exit;}if (empty($lang) || !is_array($lang)){	$lang = array();}// DEVELOPERS PLEASE NOTE//// All language files should use UTF-8 as their encoding and the files must not contain a BOM.//// Placeholders can now contain order information, e.g. instead of// 'Page %s of %s' you can (and should) write 'Page %1$s of %2$s', this allows// translators to re-order the output of data while ensuring it remains correct//// You do not need this where single placeholders are used, e.g. 'Message %d' is fine// equally where a string contains only two placeholders which are used to wrap text// in a url you again do not need to specify an order e.g., 'Click %sHERE%s' is fine// Forum Admin$lang = array_merge($lang, array(	'AUTO_PRUNE_DAYS'			=> 'Auto-prune post age',	'AUTO_PRUNE_DAYS_EXPLAIN'	=> 'Number of days since last post after which topic is removed.',	'AUTO_PRUNE_FREQ'			=> 'Auto-prune frequency',	'AUTO_PRUNE_FREQ_EXPLAIN'	=> 'Time in days between pruning events.',	'AUTO_PRUNE_VIEWED'			=> 'Auto-prune post viewed age',	'AUTO_PRUNE_VIEWED_EXPLAIN'	=> 'Number of days since topic was viewed after which topic is removed.',	'CONTINUE'						=> 'Continue',	'COPY_PERMISSIONS'				=> 'Copy permissions from',	'COPY_PERMISSIONS_EXPLAIN'		=> 'To ease up the permission setup for your new forum, you can copy the permissions of an existing forum.',	'COPY_PERMISSIONS_ADD_EXPLAIN'	=> 'Once created, the forum will have the same permissions as the one you select here. If no forum is selected the newly created forum will not be visible until permissions had been set.',	'COPY_PERMISSIONS_EDIT_EXPLAIN'	=> 'If you select to copy permissions, the forum will have the same permissions as the one you select here. This will overwrite any permissions you have previously set for this forum with the permissions of the forum you select here. If no forum is selected the current permissions will be kept.',	'COPY_TO_ACL'					=> 'Alternatively, you are also able to %sset up new permissions%s for this forum.',	'CREATE_FORUM'					=> 'Create new forum',	'DECIDE_MOVE_DELETE_CONTENT'		=> 'Delete content or move to forum',	'DECIDE_MOVE_DELETE_SUBFORUMS'		=> 'Delete subforums or move to forum',	'DEFAULT_STYLE'						=> 'Default style',	'DELETE_ALL_POSTS'					=> 'Delete posts',	'DELETE_SUBFORUMS'					=> 'Delete subforums and posts',	'DISPLAY_ACTIVE_TOPICS'				=> 'Enable active topics',	'DISPLAY_ACTIVE_TOPICS_EXPLAIN'		=> 'If set to yes active topics in selected subforums will be displayed under this category.',	'EDIT_FORUM'					=> 'Edit forum',	'ENABLE_INDEXING'				=> 'Enable search indexing',	'ENABLE_INDEXING_EXPLAIN'		=> 'If set to yes posts made to this forum will be indexed for searching.',	'ENABLE_POST_REVIEW'			=> 'Enable post review',	'ENABLE_POST_REVIEW_EXPLAIN'	=> 'If set to yes users are able to review their post if new posts were made to the topic while users wrote theirs. This should be disabled for chat forums.',	'ENABLE_QUICK_REPLY'			=> 'Enable quick reply',	'ENABLE_QUICK_REPLY_EXPLAIN'	=> 'Enables the quick reply in this forum. This setting is not considered if the quick reply is disabled board wide. The quick reply will only be displayed for users who have permission to post in this forum.',	'ENABLE_RECENT'					=> 'Display active topics',	'ENABLE_RECENT_EXPLAIN'			=> 'If set to yes topics made to this forum will be shown in the active topics list.',	'ENABLE_TOPIC_ICONS'			=> 'Enable topic icons',	'FORUM_ADMIN'						=> 'Forum administration',	'FORUM_ADMIN_EXPLAIN'				=> 'In phpBB3 everything is forum based. A category is just a special type of forum. Each forum can have an unlimited number of sub-forums and you can determine whether each may be posted to or not (i.e. whether it acts like an old category). Here you can add, edit, delete, lock, unlock individual forums as well as set certain additional controls. If your posts and topics have got out of sync you can also resynchronise a forum. <strong>You need to copy or set appropriate permissions for newly created forums to have them displayed.</strong>',	'FORUM_AUTO_PRUNE'					=> 'Enable auto-pruning',	'FORUM_AUTO_PRUNE_EXPLAIN'			=> 'Prunes the forum of topics, set the frequency/age parameters below.',	'FORUM_CREATED'						=> 'Forum created successfully.',	'FORUM_DATA_NEGATIVE'				=> 'Pruning parameters cannot be negative.',	'FORUM_DESC_TOO_LONG'				=> 'The forum description is too long, it must be less than 4000 characters.',	'FORUM_DELETE'						=> 'Delete forum',	'FORUM_DELETE_EXPLAIN'				=> 'The form below will allow you to delete a forum. If the forum is postable you are able to decide where you want to put all topics (or forums) it contained.',	'FORUM_DELETED'						=> 'Forum successfully deleted.',	'FORUM_DESC'						=> 'Description',	'FORUM_DESC_EXPLAIN'				=> 'Any HTML markup entered here will be displayed as is.',	'FORUM_EDIT_EXPLAIN'				=> 'The form below will allow you to customise this forum. Please note that moderation and post count controls are set via forum permissions for each user or usergroup.',	'FORUM_IMAGE'						=> 'Forum image',	'FORUM_IMAGE_EXPLAIN'				=> 'Location, relative to the phpBB root directory, of an additional image to associate with this forum.',	'FORUM_IMAGE_NO_EXIST'				=> 'The specified forum image does not exist',	'FORUM_LINK_EXPLAIN'				=> 'Full URL (including the protocol, i.e.: <samp>http://</samp>) to the destination location that clicking this forum will take the user, e.g.: <samp>http://www.phpbb.com/</samp>.',	'FORUM_LINK_TRACK'					=> 'Track link redirects',	'FORUM_LINK_TRACK_EXPLAIN'			=> 'Records the number of times a forum link was clicked.',	'FORUM_NAME'						=> 'Forum name',	'FORUM_NAME_EMPTY'					=> 'You must enter a name for this forum.',	'FORUM_PARENT'						=> 'Parent forum',	'FORUM_PASSWORD'					=> 'Forum password',	'FORUM_PASSWORD_CONFIRM'			=> 'Confirm forum password',	'FORUM_PASSWORD_CONFIRM_EXPLAIN'	=> 'Only needs to be set if a forum password is entered.',	'FORUM_PASSWORD_EXPLAIN'			=> 'Defines a password for this forum, use the permission system in preference.',	'FORUM_PASSWORD_UNSET'				=> 'Remove forum password',	'FORUM_PASSWORD_UNSET_EXPLAIN'		=> 'Check here if you want to remove the forum password.',	'FORUM_PASSWORD_OLD'				=> 'The forum password is using an old hashing method and should be changed.',	'FORUM_PASSWORD_MISMATCH'			=> 'The passwords you entered did not match.',	'FORUM_PRUNE_SETTINGS'				=> 'Forum prune settings',	'FORUM_RESYNCED'					=> 'Forum %s successfully resynced',	'FORUM_RULES_EXPLAIN'				=> 'Forum rules are displayed at any page within the given forum.',	'FORUM_RULES_LINK'					=> 'Link to forum rules',	'FORUM_RULES_LINK_EXPLAIN'			=> 'You are able to enter the URL of the page/post containing your forum rules here. This setting will override the forum rules text you specified.',	'FORUM_RULES_PREVIEW'				=> 'Forum rules preview',	'FORUM_RULES_TOO_LONG'				=> 'The forum rules must be less than 4000 characters.',	'FORUM_SETTINGS'					=> 'Forum settings',	'FORUM_STATUS'						=> 'Forum status',	'FORUM_STYLE'						=> 'Forum style',	'FORUM_TOPICS_PAGE'					=> 'Topics per page',	'FORUM_TOPICS_PAGE_EXPLAIN'			=> 'If non-zero this value will override the default topics per page setting.',	'FORUM_TYPE'						=> 'Forum type',	'FORUM_UPDATED'						=> 'Forum information updated successfully.',	'FORUM_WITH_SUBFORUMS_NOT_TO_LINK'		=> 'You want to change a postable forum having subforums to a link. Please move all subforums out of this forum before you proceed, because after changing to a link you are no longer able to see the subforums currently connected to this forum.',	'GENERAL_FORUM_SETTINGS'	=> 'General forum settings',	'LINK'						=> 'Link',	'LIST_INDEX'				=> 'List subforum in parent-forums legend',	'LIST_INDEX_EXPLAIN'		=> 'Displays this forum on the index and elsewhere as a link within the legend of its parent-forum if the parent-forums List subforums in legend option is enabled.',	'LIST_SUBFORUMS'			=> 'List subforums in legend',	'LIST_SUBFORUMS_EXPLAIN'	=> 'Displays this forums subforums on the index and elsewhere as a link within the legend if their List subforum in parent-forums legend option is enabled.',	'LOCKED'					=> 'Locked',	'MOVE_POSTS_NO_POSTABLE_FORUM'	=> 'The forum you selected for moving the posts to is not postable. Please select a postable forum.',	'MOVE_POSTS_TO'					=> 'Move posts to',	'MOVE_SUBFORUMS_TO'				=> 'Move subforums to',	'NO_DESTINATION_FORUM'			=> 'You have not specified a forum to move content to.',	'NO_FORUM_ACTION'				=> 'No action defined for what happens with the forum content.',	'NO_PARENT'						=> 'No parent',	'NO_PERMISSIONS'				=> 'Do not copy permissions',	'NO_PERMISSION_FORUM_ADD'		=> 'You do not have the necessary permissions to add forums.',	'NO_PERMISSION_FORUM_DELETE'	=> 'You do not have the necessary permissions to delete forums.',	'PARENT_IS_LINK_FORUM'		=> 'The parent you specified is a forum link. Link forums are not able to hold other forums, please specify a category or forum as the parent forum.',	'PARENT_NOT_EXIST'			=> 'Parent does not exist.',	'PRUNE_ANNOUNCEMENTS'		=> 'Prune announcements',	'PRUNE_STICKY'				=> 'Prune stickies',	'PRUNE_OLD_POLLS'			=> 'Prune old polls',	'PRUNE_OLD_POLLS_EXPLAIN'	=> 'Removes topics with polls not voted in for post age days.',	'REDIRECT_ACL'	=> 'Now you are able to %sset permissions%s for this forum.',	'SYNC_IN_PROGRESS'			=> 'Synchronizing forum',	'SYNC_IN_PROGRESS_EXPLAIN'	=> 'Currently resyncing topic range %1$d/%2$d.',	'TYPE_CAT'			=> 'Category',	'TYPE_FORUM'		=> 'Forum',	'TYPE_LINK'			=> 'Link',	'UNLOCKED'			=> 'Unlocked',));?>
<?php/**** @package acp* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @package module_install*/class acp_profile_info{	function module()	{		return array(			'filename'	=> 'acp_profile',			'title'		=> 'ACP_CUSTOM_PROFILE_FIELDS',			'version'	=> '1.0.0',			'modes'		=> array(				'profile'	=> array('title' => 'ACP_CUSTOM_PROFILE_FIELDS', 'auth' => 'acl_a_profile', 'cat' => array('ACP_CAT_USERS')),			),		);	}	function install()	{	}	function uninstall()	{	}}?>
