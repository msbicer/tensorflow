<?php/**** @package install* @version $Id$* @copyright (c) 2006 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License** @todo check for writable cache/store/files directory*//***/if (!defined('IN_INSTALL')){	// Someone has tried to access the file directly. This is not a good idea, so exit	exit;}if (!empty($setmodules)){	// If phpBB is not installed we do not include this module	if (@file_exists($phpbb_root_path . 'config.' . $phpEx) && !@file_exists($phpbb_root_path . 'cache/install_lock'))	{		include_once($phpbb_root_path . 'config.' . $phpEx);		if (!defined('PHPBB_INSTALLED'))		{			return;		}	}	else	{		return;	}	$module[] = array(		'module_type'		=> 'update',		'module_title'		=> 'UPDATE',		'module_filename'	=> substr(basename(__FILE__), 0, -strlen($phpEx)-1),		'module_order'		=> 30,		'module_subs'		=> '',		'module_stages'		=> array('INTRO', 'VERSION_CHECK', 'UPDATE_DB', 'FILE_CHECK', 'UPDATE_FILES'),		'module_reqs'		=> ''	);}/*** Update Installation* @package install*/class install_update extends module{	var $p_master;	var $update_info;	var $old_location;	var $new_location;	var $latest_version;	var $current_version;	var $unequal_version;	var $update_to_version;	// Set to false	var $test_update = false;	function install_update(&$p_master)	{		$this->p_master = &$p_master;	}	function main($mode, $sub)	{		global $template, $phpEx, $phpbb_root_path, $user, $db, $config, $cache, $auth, $language;		$this->tpl_name = 'install_update';		$this->page_title = 'UPDATE_INSTALLATION';		$this->unequal_version = false;		$this->old_location = $phpbb_root_path . 'install/update/old/';		$this->new_location = $phpbb_root_path . 'install/update/new/';		// Init DB		require($phpbb_root_path . 'config.' . $phpEx);		require($phpbb_root_path . 'includes/db/' . $dbms . '.' . $phpEx);		require($phpbb_root_path . 'includes/constants.' . $phpEx);		// Special options for conflicts/modified files		define('MERGE_NO_MERGE_NEW', 1);		define('MERGE_NO_MERGE_MOD', 2);		define('MERGE_NEW_FILE', 3);		define('MERGE_MOD_FILE', 4);		$db = new $sql_db();		// Connect to DB		$db->sql_connect($dbhost, $dbuser, $dbpasswd, $dbname, $dbport, false, false);		// We do not need this any longer, unset for safety purposes		unset($dbpasswd);		$config = array();		$sql = 'SELECT config_name, config_value			FROM ' . CONFIG_TABLE;		$result = $db->sql_query($sql);		while ($row = $db->sql_fetchrow($result))		{			$config[$row['config_name']] = $row['config_value'];		}		$db->sql_freeresult($result);		// Force template recompile		$config['load_tplcompile'] = 1;		// First of all, init the user session		$user->session_begin();		$auth->acl($user->data);		// Overwrite user's language with the selected one.		// Config needs to be changed to ensure that guests also get the selected language.		$config_default_lang = $config['default_lang'];		$config['default_lang'] = $language;		$user->data['user_lang'] = $language;		$user->setup(array('common', 'acp/common', 'acp/board', 'install', 'posting'));		// Reset the default_lang		$config['default_lang'] = $config_default_lang;		unset($config_default_lang);		// If we are within the intro page we need to make sure we get up-to-date version info		if ($sub == 'intro')		{			$cache->destroy('_version_info');		}		// Set custom template again. ;)		$template->set_custom_template('../adm/style', 'admin');		// still, the acp template is never stored in the database		$user->theme['template_storedb'] = false;		$template->assign_vars(array(			'S_USER_LANG'			=> $user->lang['USER_LANG'],			'S_CONTENT_DIRECTION'	=> $user->lang['DIRECTION'],			'S_CONTENT_ENCODING'	=> 'UTF-8',			'S_CONTENT_FLOW_BEGIN'	=> ($user->lang['DIRECTION'] == 'ltr') ? 'left' : 'right',			'S_CONTENT_FLOW_END'	=> ($user->lang['DIRECTION'] == 'ltr') ? 'right' : 'left',		));		// Get current and latest version		if (($latest_version = $cache->get('_version_info')) === false)		{			$this->latest_version = $this->get_file('version_info');			$cache->put('_version_info', $this->latest_version);		}		else		{			$this->latest_version = $latest_version;		}		// For the current version we trick a bit. ;)		$this->current_version = (!empty($config['version_update_from'])) ? $config['version_update_from'] : $config['version'];		$up_to_date = (version_compare(str_replace('rc', 'RC', strtolower($this->current_version)), str_replace('rc', 'RC', strtolower($this->latest_version)), '<')) ? false : true;		// Check for a valid update directory, else point the user to the phpbb.com website		if (!file_exists($phpbb_root_path . 'install/update') || !file_exists($phpbb_root_path . 'install/update/index.' . $phpEx) || !file_exists($this->old_location) || !file_exists($this->new_location))		{			$template->assign_vars(array(				'S_ERROR'		=> true,				'ERROR_MSG'		=> ($up_to_date) ? $user->lang['NO_UPDATE_FILES_UP_TO_DATE'] : sprintf($user->lang['NO_UPDATE_FILES_OUTDATED'], $config['version'], $this->current_version, $this->latest_version))			);			return;		}		$this->update_info = $this->get_file('update_info');		// Make sure the update directory holds the correct information		// Since admins are able to run the update/checks more than once we only check if the current version is lower or equal than the version to which we update to.		if (version_compare(str_replace('rc', 'RC', strtolower($this->current_version)), str_replace('rc', 'RC', strtolower($this->update_info['version']['to'])), '>'))		{			$template->assign_vars(array(				'S_ERROR'		=> true,				'ERROR_MSG'		=> sprintf($user->lang['INCOMPATIBLE_UPDATE_FILES'], $config['version'], $this->update_info['version']['from'], $this->update_info['version']['to']))			);			return;		}		// Check if the update files are actually meant to update from the current version		if ($this->current_version != $this->update_info['version']['from'])		{			$this->unequal_version = true;			$template->assign_vars(array(				'S_ERROR'	=> true,				'ERROR_MSG'	=> sprintf($user->lang['INCOMPATIBLE_UPDATE_FILES'], $this->current_version, $this->update_info['version']['from'], $this->update_info['version']['to']),			));		}		// Check if the update files stored are for the latest version...		if ($this->latest_version != $this->update_info['version']['to'])		{			$this->unequal_version = true;			$template->assign_vars(array(				'S_WARNING'		=> true,				'WARNING_MSG'	=> sprintf($user->lang['OLD_UPDATE_FILES'], $this->update_info['version']['from'], $this->update_info['version']['to'], $this->latest_version))			);		}		// We store the "update to" version, because it is not always the latest. ;)		$this->update_to_version = $this->update_info['version']['to'];		// Fill DB version		if (empty($config['dbms_version']))		{			set_config('dbms_version', $db->sql_server_info(true));		}		if ($this->test_update === false)		{			// Got the updater template itself updated? If so, we are able to directly use it - but only if all three files are present			if (in_array('adm/style/install_update.html', $this->update_info['files']))			{				$this->tpl_name = '../../install/update/new/adm/style/install_update';			}			// What about the language file? Got it updated?			if (in_array('language/en/install.' . $phpEx, $this->update_info['files']))			{				$lang = array();				include($this->new_location . 'language/en/install.' . $phpEx);				// only add new keys to user's language in english				$new_keys = array_diff(array_keys($lang), array_keys($user->lang));				foreach ($new_keys as $i => $new_key)				{					$user->lang[$new_key] = $lang[$new_key];				}			}		}		// Include renderer and engine		$this->include_file('includes/diff/diff.' . $phpEx);		$this->include_file('includes/diff/engine.' . $phpEx);		$this->include_file('includes/diff/renderer.' . $phpEx);		// Make sure we stay at the file check if checking the files again		if (!empty($_POST['check_again']))		{			$sub = $this->p_master->sub = 'file_check';		}		switch ($sub)		{			case 'intro':				$this->page_title = 'UPDATE_INSTALLATION';				$template->assign_vars(array(					'S_INTRO'		=> true,					'U_ACTION'		=> append_sid($this->p_master->module_url, "language=$language&amp;mode=$mode&amp;sub=version_check"),				));				// Make sure the update list is destroyed.				$cache->destroy('_update_list');				$cache->destroy('_diff_files');				$cache->destroy('_expected_files');			break;			case 'version_check':				$this->page_title = 'STAGE_VERSION_CHECK';				$template->assign_vars(array(					'S_UP_TO_DATE'		=> $up_to_date,					'S_VERSION_CHECK'	=> true,					'U_ACTION'				=> append_sid($this->p_master->module_url, "language=$language&amp;mode=$mode&amp;sub=file_check"),					'U_DB_UPDATE_ACTION'	=> append_sid($this->p_master->module_url, "language=$language&amp;mode=$mode&amp;sub=update_db"),					'LATEST_VERSION'	=> $this->latest_version,					'CURRENT_VERSION'	=> $this->current_version)				);				// Print out version the update package updates to				if ($this->unequal_version)				{					$template->assign_var('PACKAGE_VERSION', $this->update_info['version']['to']);				}				// Since some people try to update to RC releases, but phpBB.com tells them the last version is the version they currently run				// we are faced with the updater thinking the database schema is up-to-date; which it is, but should be updated none-the-less				// We now try to cope with this by triggering the update process				if (version_compare(str_replace('rc', 'RC', strtolower($this->current_version)), str_replace('rc', 'RC', strtolower($this->update_info['version']['to'])), '<'))				{					$template->assign_vars(array(						'S_UP_TO_DATE'		=> false,					));				}			break;			case 'update_db':				// Make sure the database update is valid for the latest version				$valid = false;				$updates_to_version = '';				if (file_exists($phpbb_root_path . 'install/database_update.' . $phpEx))				{					include_once($phpbb_root_path . 'install/database_update.' . $phpEx);					if ($updates_to_version === $this->update_info['version']['to'])					{						$valid = true;					}				}				// Should not happen at all				if (!$valid)				{					trigger_error($user->lang['DATABASE_UPDATE_INFO_OLD'], E_USER_ERROR);				}				// Just a precaution				$cache->purge();				// Redirect the user to the database update script with some explanations...				$template->assign_vars(array(					'S_DB_UPDATE'			=> true,					'S_DB_UPDATE_FINISHED'	=> ($config['version'] == $this->update_info['version']['to']) ? true : false,					'U_DB_UPDATE'			=> append_sid($phpbb_root_path . 'install/database_update.' . $phpEx, 'type=1&amp;language=' . $user->data['user_lang']),					'U_DB_UPDATE_ACTION'	=> append_sid($this->p_master->module_url, "language=$language&amp;mode=$mode&amp;sub=update_db"),					'U_ACTION'				=> append_sid($this->p_master->module_url, "language=$language&amp;mode=$mode&amp;sub=file_check"),				));			break;			case 'file_check':				// retrieve info on what changes should have already been made to the files.				$expected_files = $cache->get('_expected_files');				if (!$expected_files)				{					$expected_files = array();				}				// Now make sure the previous file collection is no longer valid...				$cache->destroy('_diff_files');				$this->page_title = 'STAGE_FILE_CHECK';				// Now make sure our update list is correct if the admin refreshes				$action = request_var('action', '');				// We are directly within an update. To make sure our update list is correct we check its status.				$update_list = (!empty($_POST['check_again'])) ? false : $cache->get('_update_list');				$modified = ($update_list !== false) ? @filemtime($cache->cache_dir . 'data_update_list.' . $phpEx) : 0;				// Make sure the list is up-to-date				if ($update_list !== false)				{					$get_new_list = false;					foreach ($this->update_info['files'] as $file)					{						if (file_exists($phpbb_root_path . $file) && filemtime($phpbb_root_path . $file) > $modified)						{							$get_new_list = true;							break;						}					}				}				else				{					$get_new_list = true;				}				if (!$get_new_list && $update_list['status'] != -1)				{					$get_new_list = true;				}				if ($get_new_list)				{					$this->get_update_structure($update_list, $expected_files);					$cache->put('_update_list', $update_list);					// Refresh the page if we are still not finished...					if ($update_list['status'] != -1)					{						$refresh_url = append_sid($this->p_master->module_url, "language=$language&amp;mode=$mode&amp;sub=file_check");						meta_refresh(2, $refresh_url);						$template->assign_vars(array(							'S_IN_PROGRESS'		=> true,							'S_COLLECTED'		=> (int) $update_list['status'],							'S_TO_COLLECT'		=> sizeof($this->update_info['files']),							'L_IN_PROGRESS'				=> $user->lang['COLLECTING_FILE_DIFFS'],							'L_IN_PROGRESS_EXPLAIN'		=> sprintf($user->lang['NUMBER_OF_FILES_COLLECTED'], (int) $update_list['status'], sizeof($this->update_info['files'])),						));						return;					}				}				if ($action == 'diff')				{					$this->show_diff($update_list);					return;				}				if (sizeof($update_list['no_update']))				{					$template->assign_vars(array(						'S_NO_UPDATE_FILES'		=> true,						'NO_UPDATE_FILES'		=> implode(', ', array_map('htmlspecialchars', $update_list['no_update'])))					);				}				$new_expected_files = array();				// Now assign the list to the template				foreach ($update_list as $status => $filelist)				{					if ($status == 'no_update' || !sizeof($filelist) || $status == 'status')					{						continue;					}/*					$template->assign_block_vars('files', array(						'S_STATUS'		=> true,						'STATUS'		=> $status,						'L_STATUS'		=> $user->lang['STATUS_' . strtoupper($status)],						'TITLE'			=> $user->lang['FILES_' . strtoupper($status)],						'EXPLAIN'		=> $user->lang['FILES_' . strtoupper($status) . '_EXPLAIN'],						)					);*/					foreach ($filelist as $file_struct)					{						$s_binary = (!empty($this->update_info['binary']) && in_array($file_struct['filename'], $this->update_info['binary'])) ? true : false;						$filename = htmlspecialchars($file_struct['filename']);						if (strrpos($filename, '/') !== false)						{							$dir_part = substr($filename, 0, strrpos($filename, '/') + 1);							$file_part = substr($filename, strrpos($filename, '/') + 1);						}						else						{							$dir_part = '';							$file_part = $filename;						}						$diff_url = append_sid($this->p_master->module_url, "language=$language&amp;mode=$mode&amp;sub=file_check&amp;action=diff&amp;status=$status&amp;file=" . urlencode($file_struct['filename']));						if (isset($file_struct['as_expected']) && $file_struct['as_expected'])						{							$new_expected_files[$file_struct['filename']] = $expected_files[$file_struct['filename']];						}						else						{							$template->assign_block_vars($status, array(								'STATUS'			=> $status,								'FILENAME'			=> $filename,								'DIR_PART'			=> $dir_part,								'FILE_PART'			=> $file_part,								'NUM_CONFLICTS'		=> (isset($file_struct['conflicts'])) ? $file_struct['conflicts'] : 0,								'S_CUSTOM'			=> ($file_struct['custom']) ? true : false,								'S_BINARY'			=> $s_binary,								'CUSTOM_ORIGINAL'	=> ($file_struct['custom']) ? $file_struct['original'] : '',								'U_SHOW_DIFF'		=> $diff_url,								'L_SHOW_DIFF'		=> ($status != 'up_to_date') ? $user->lang['SHOW_DIFF_' . strtoupper($status)] : '',								'U_VIEW_MOD_FILE'		=> $diff_url . '&amp;op=' . MERGE_MOD_FILE,								'U_VIEW_NEW_FILE'		=> $diff_url . '&amp;op=' . MERGE_NEW_FILE,								'U_VIEW_NO_MERGE_MOD'	=> $diff_url . '&amp;op=' . MERGE_NO_MERGE_MOD,								'U_VIEW_NO_MERGE_NEW'	=> $diff_url . '&amp;op=' . MERGE_NO_MERGE_NEW,							));						}					}				}				$cache->put('_expected_files', $new_expected_files);				$all_up_to_date = true;				foreach ($update_list as $status => $filelist)				{					if ($status != 'up_to_date' && $status != 'custom' && $status != 'status' && sizeof($filelist))					{						$all_up_to_date = false;						break;					}				}				$template->assign_vars(array(					'S_FILE_CHECK'			=> true,					'S_ALL_UP_TO_DATE'		=> $all_up_to_date,					'S_VERSION_UP_TO_DATE'	=> $up_to_date,					'U_ACTION'				=> append_sid($this->p_master->module_url, "language=$language&amp;mode=$mode&amp;sub=file_check"),					'U_UPDATE_ACTION'		=> append_sid($this->p_master->module_url, "language=$language&amp;mode=$mode&amp;sub=update_files"),					'U_DB_UPDATE_ACTION'	=> append_sid($this->p_master->module_url, "language=$language&amp;mode=$mode&amp;sub=update_db"),				));				if ($all_up_to_date)				{					// Add database update to log					add_log('admin', 'LOG_UPDATE_PHPBB', $this->current_version, $this->update_to_version);					// Refresh prosilver css data - this may cause some unhappy users, but					$sql = 'SELECT *						FROM ' . STYLES_THEME_TABLE . "						WHERE LOWER(theme_name) = 'prosilver'";					$result = $db->sql_query($sql);					$theme = $db->sql_fetchrow($result);					$db->sql_freeresult($result);					if ($theme)					{						$recache = (empty($theme['theme_data'])) ? true : false;						$update_time = time();						// We test for stylesheet.css because it is faster and most likely the only file changed on common themes						if (!$recache && $theme['theme_mtime'] < @filemtime("{$phpbb_root_path}styles/" . $theme['theme_path'] . '/theme/stylesheet.css'))						{							$recache = true;							$update_time = @filemtime("{$phpbb_root_path}styles/" . $theme['theme_path'] . '/theme/stylesheet.css');						}						else if (!$recache)						{							$last_change = $theme['theme_mtime'];							$dir = @opendir("{$phpbb_root_path}styles/{$theme['theme_path']}/theme");							if ($dir)							{								while (($entry = readdir($dir)) !== false)								{									if (substr(strrchr($entry, '.'), 1) == 'css' && $last_change < @filemtime("{$phpbb_root_path}styles/{$theme['theme_path']}/theme/{$entry}"))									{										$recache = true;										break;									}								}								closedir($dir);							}						}						if ($recache)						{							// Instead of re-caching here, we simply remove theme_data... HAR HAR HAR (think about a carribean pirate)							$sql = 'UPDATE ' . STYLES_THEME_TABLE . " SET theme_data = ''								WHERE theme_id = " . $theme['theme_id'];							$db->sql_query($sql);							$cache->destroy('sql', STYLES_THEME_TABLE);							$cache->destroy('sql', STYLES_TABLE);						}					}					$db->sql_return_on_error(true);					$db->sql_query('DELETE FROM ' . CONFIG_TABLE . " WHERE config_name = 'version_update_from'");					$db->sql_return_on_error(false);					$cache->purge();				}			break;			case 'update_files':				$this->page_title = 'STAGE_UPDATE_FILES';				$s_hidden_fields = '';				$params = array();				$conflicts = request_var('conflict', array('' => 0));				$modified = request_var('modified', array('' => 0));				foreach ($conflicts as $filename => $merge_option)				{					$s_hidden_fields .= '<input type="hidden" name="conflict[' . htmlspecialchars($filename) . ']" value="' . $merge_option . '" />';					$params[] = 'conflict[' . urlencode($filename) . ']=' . urlencode($merge_option);				}				foreach ($modified as $filename => $merge_option)				{					if (!$merge_option)					{						continue;					}					$s_hidden_fields .= '<input type="hidden" name="modified[' . htmlspecialchars($filename) . ']" value="' . $merge_option . '" />';					$params[] = 'modified[' . urlencode($filename) . ']=' . urlencode($merge_option);				}				$no_update = request_var('no_update', array(0 => ''));				foreach ($no_update as $index => $filename)				{					$s_hidden_fields .= '<input type="hidden" name="no_update[]" value="' . htmlspecialchars($filename) . '" />';					$params[] = 'no_update[]=' . urlencode($filename);				}				// Before the user is choosing his preferred method, let's create the content list...				$update_list = $cache->get('_update_list');				if ($update_list === false)				{					trigger_error($user->lang['NO_UPDATE_INFO'], E_USER_ERROR);				}				// Check if the conflicts data is valid				if (sizeof($conflicts))				{					$conflict_filenames = array();					foreach ($update_list['conflict'] as $files)					{						$conflict_filenames[] = $files['filename'];					}					$new_conflicts = array();					foreach ($conflicts as $filename => $diff_method)					{						if (in_array($filename, $conflict_filenames))						{							$new_conflicts[$filename] = $diff_method;						}					}					$conflicts = $new_conflicts;				}				// Build list for modifications				if (sizeof($modified))				{					$modified_filenames = array();					foreach ($update_list['modified'] as $files)					{						$modified_filenames[] = $files['filename'];					}					$new_modified = array();					foreach ($modified as $filename => $diff_method)					{						if (in_array($filename, $modified_filenames))						{							$new_modified[$filename] = $diff_method;						}					}					$modified = $new_modified;				}				// Check number of conflicting files, they need to be equal. For modified files the number can differ				if (sizeof($update_list['conflict']) != sizeof($conflicts))				{					trigger_error($user->lang['MERGE_SELECT_ERROR'], E_USER_ERROR);				}				// Before we do anything, let us diff the files and store the raw file information "somewhere"				$get_files = false;				$file_list = $cache->get('_diff_files');				$expected_files = $cache->get('_expected_files');				if ($file_list === false || $file_list['status'] != -1)				{					$get_files = true;				}				if ($get_files)				{					if ($file_list === false)					{						$file_list = array(							'status'	=> 0,						);					}					if (!isset($expected_files) || $expected_files === false)					{						$expected_files = array();					}					$processed = 0;					foreach ($update_list as $status => $files)					{						if (!is_array($files))						{							continue;						}						foreach ($files as $file_struct)						{							// Skip this file if the user selected to not update it							if (in_array($file_struct['filename'], $no_update))							{								$expected_files[$file_struct['filename']] = false;								continue;							}							// Already handled... then skip of course...							if (isset($file_list[$file_struct['filename']]))							{								continue;							}							// Refresh if we reach 5 diffs...							if ($processed >= 5)							{								$cache->put('_diff_files', $file_list);								if (!empty($_REQUEST['download']))								{									$params[] = 'download=1';								}								$redirect_url = append_sid($this->p_master->module_url, "language=$language&amp;mode=$mode&amp;sub=update_files&amp;" . implode('&amp;', $params));								meta_refresh(3, $redirect_url);								$template->assign_vars(array(									'S_IN_PROGRESS'			=> true,									'L_IN_PROGRESS'			=> $user->lang['MERGING_FILES'],									'L_IN_PROGRESS_EXPLAIN'	=> $user->lang['MERGING_FILES_EXPLAIN'],								));								return;							}							if (file_exists($phpbb_root_path . $file_struct['filename']))							{								$contents = file_get_contents($phpbb_root_path . $file_struct['filename']);								if (isset($expected_files[$file_struct['filename']]) && md5($contents) == $expected_files[$file_struct['filename']])								{									continue;								}							}							$original_filename = ($file_struct['custom']) ? $file_struct['original'] : $file_struct['filename'];							switch ($status)							{								case 'modified':									$option = (isset($modified[$file_struct['filename']])) ? $modified[$file_struct['filename']] : 0;									switch ($option)									{										case MERGE_NO_MERGE_NEW:											$contents = file_get_contents($this->new_location . $original_filename);										break;										case MERGE_NO_MERGE_MOD:											$contents = file_get_contents($phpbb_root_path . $file_struct['filename']);										break;										default:											$diff = $this->return_diff($this->old_location . $original_filename, $phpbb_root_path . $file_struct['filename'], $this->new_location . $original_filename);											$contents = implode("\n", $diff->merged_output());											unset($diff);										break;									}									$expected_files[$file_struct['filename']] = md5($contents);									$file_list[$file_struct['filename']] = '_file_' . md5($file_struct['filename']);									$cache->put($file_list[$file_struct['filename']], base64_encode($contents));									$file_list['status']++;									$processed++;								break;								case 'conflict':									$option = $conflicts[$file_struct['filename']];									$contents = '';									switch ($option)									{										case MERGE_NO_MERGE_NEW:											$contents = file_get_contents($this->new_location . $original_filename);										break;										case MERGE_NO_MERGE_MOD:											$contents = file_get_contents($phpbb_root_path . $file_struct['filename']);										break;										default:											$diff = $this->return_diff($this->old_location . $original_filename, $phpbb_root_path . $file_struct['filename'], $this->new_location . $original_filename);											if ($option == MERGE_NEW_FILE)											{												$contents = implode("\n", $diff->merged_new_output());											}											else if ($option == MERGE_MOD_FILE)											{												$contents = implode("\n", $diff->merged_orig_output());											}											else											{												unset($diff);												break 2;											}											unset($diff);										break;									}									$expected_files[$file_struct['filename']] = md5($contents);									$file_list[$file_struct['filename']] = '_file_' . md5($file_struct['filename']);									$cache->put($file_list[$file_struct['filename']], base64_encode($contents));									$file_list['status']++;									$processed++;								break;							}						}					}					$cache->put('_expected_files', $expected_files);				}				$file_list['status'] = -1;				$cache->put('_diff_files', $file_list);				if (!empty($_REQUEST['download']))				{					$this->include_file('includes/functions_compress.' . $phpEx);					$use_method = request_var('use_method', '');					$methods = array('.tar');					$available_methods = array('.tar.gz' => 'zlib', '.tar.bz2' => 'bz2', '.zip' => 'zlib');					foreach ($available_methods as $type => $module)					{						if (!@extension_loaded($module))						{							continue;						}						$methods[] = $type;					}					// Let the user decide in which format he wants to have the pack					if (!$use_method)					{						$this->page_title = 'SELECT_DOWNLOAD_FORMAT';						$radio_buttons = '';						foreach ($methods as $method)						{							$radio_buttons .= '<label><input type="radio"' . ((!$radio_buttons) ? ' id="use_method"' : '') . ' class="radio" value="' . $method . '" name="use_method" /> ' . $method . '</label>';						}						$template->assign_vars(array(							'S_DOWNLOAD_FILES'		=> true,							'U_ACTION'				=> append_sid($this->p_master->module_url, "language=$language&amp;mode=$mode&amp;sub=update_files"),							'RADIO_BUTTONS'			=> $radio_buttons,							'S_HIDDEN_FIELDS'		=> $s_hidden_fields)						);						// To ease the update process create a file location map						$update_list = $cache->get('_update_list');						$script_path = ($config['force_server_vars']) ? (($config['script_path'] == '/') ? '/' : $config['script_path'] . '/') : $user->page['root_script_path'];						foreach ($update_list as $status => $files)						{							if ($status == 'up_to_date' || $status == 'no_update' || $status == 'status')							{								continue;							}							foreach ($files as $file_struct)							{								if (in_array($file_struct['filename'], $no_update))								{									continue;								}								$template->assign_block_vars('location', array(									'SOURCE'		=> htmlspecialchars($file_struct['filename']),									'DESTINATION'	=> $script_path . htmlspecialchars($file_struct['filename']),								));							}						}						return;					}					if (!in_array($use_method, $methods))					{						$use_method = '.tar';					}					$update_mode = 'download';				}				else				{					$this->include_file('includes/functions_transfer.' . $phpEx);					// Choose FTP, if not available use fsock...					$method = basename(request_var('method', ''));					$submit = (isset($_POST['submit'])) ? true : false;					$test_ftp_connection = request_var('test_connection', '');					if (!$method || !class_exists($method))					{						$method = 'ftp';						$methods = transfer::methods();						if (!in_array('ftp', $methods))						{							$method = $methods[0];						}					}					$test_connection = false;					if ($test_ftp_connection || $submit)					{						$transfer = new $method(request_var('host', ''), request_var('username', ''), request_var('password', ''), request_var('root_path', ''), request_var('port', ''), request_var('timeout', ''));						$test_connection = $transfer->open_session();						// Make sure that the directory is correct by checking for the existence of common.php						if ($test_connection === true)						{							// Check for common.php file							if (!$transfer->file_exists($phpbb_root_path, 'common.' . $phpEx))							{								$test_connection = 'ERR_WRONG_PATH_TO_PHPBB';							}						}						$transfer->close_session();						// Make sure the login details are correct before continuing						if ($submit && $test_connection !== true)						{							$submit = false;							$test_ftp_connection = true;						}					}					$s_hidden_fields .= build_hidden_fields(array('method' => $method));					if (!$submit)					{						$this->page_title = 'SELECT_FTP_SETTINGS';						if (!class_exists($method))						{							trigger_error('Method does not exist.', E_USER_ERROR);						}						$requested_data = call_user_func(array($method, 'data'));						foreach ($requested_data as $data => $default)						{							$template->assign_block_vars('data', array(								'DATA'		=> $data,								'NAME'		=> $user->lang[strtoupper($method . '_' . $data)],								'EXPLAIN'	=> $user->lang[strtoupper($method . '_' . $data) . '_EXPLAIN'],								'DEFAULT'	=> (!empty($_REQUEST[$data])) ? request_var($data, '') : $default							));						}						$template->assign_vars(array(							'S_CONNECTION_SUCCESS'		=> ($test_ftp_connection && $test_connection === true) ? true : false,							'S_CONNECTION_FAILED'		=> ($test_ftp_connection && $test_connection !== true) ? true : false,							'ERROR_MSG'					=> ($test_ftp_connection && $test_connection !== true) ? $user->lang[$test_connection] : '',							'S_FTP_UPLOAD'		=> true,							'UPLOAD_METHOD'		=> $method,							'U_ACTION'			=> append_sid($this->p_master->module_url, "language=$language&amp;mode=$mode&amp;sub=update_files"),							'U_DOWNLOAD_METHOD'	=> append_sid($this->p_master->module_url, "language=$language&amp;mode=$mode&amp;sub=update_files&amp;download=1"),							'S_HIDDEN_FIELDS'	=> $s_hidden_fields,						));						return;					}					$update_mode = 'upload';				}				// Now update the installation or download the archive...				$download_filename = 'update_' . $this->update_info['version']['from'] . '_to_' . $this->update_info['version']['to'];				$archive_filename = $download_filename . '_' . time() . '_' . unique_id();				// Now init the connection				if ($update_mode == 'download')				{					if (function_exists('phpbb_is_writable') && !phpbb_is_writable($phpbb_root_path . 'store/'))					{						trigger_error(sprintf('The directory %s is not writable.', $phpbb_root_path . 'store/'), E_USER_ERROR);					}					if ($use_method == '.zip')					{						$compress = new compress_zip('w', $phpbb_root_path . 'store/' . $archive_filename . $use_method);					}					else					{						$compress = new compress_tar('w', $phpbb_root_path . 'store/' . $archive_filename . $use_method, $use_method);					}				}				else				{					$transfer = new $method(request_var('host', ''), request_var('username', ''), request_var('password', ''), request_var('root_path', ''), request_var('port', ''), request_var('timeout', ''));					$transfer->open_session();				}				// Ok, go through the update list and do the operations based on their status				foreach ($update_list as $status => $files)				{					if (!is_array($files))					{						continue;					}					foreach ($files as $file_struct)					{						// Skip this file if the user selected to not update it						if (in_array($file_struct['filename'], $no_update))						{							continue;						}						$original_filename = ($file_struct['custom']) ? $file_struct['original'] : $file_struct['filename'];						switch ($status)						{							case 'new':							case 'new_conflict':							case 'not_modified':								if ($update_mode == 'download')								{									$compress->add_custom_file($this->new_location . $original_filename, $file_struct['filename']);								}								else								{									if ($status != 'new')									{										$transfer->rename($file_struct['filename'], $file_struct['filename'] . '.bak');									}									// New directory too?									$dirname = dirname($file_struct['filename']);									if ($dirname && !file_exists($phpbb_root_path . $dirname))									{										$transfer->make_dir($dirname);									}									$transfer->copy_file($this->new_location . $original_filename, $file_struct['filename']);								}							break;							case 'modified':								$contents = base64_decode($cache->get($file_list[$file_struct['filename']]));								if ($update_mode == 'download')								{									$compress->add_data($contents, $file_struct['filename']);								}								else								{									// @todo add option to specify if a backup file should be created?									$transfer->rename($file_struct['filename'], $file_struct['filename'] . '.bak');									$transfer->write_file($file_struct['filename'], $contents);								}							break;							case 'conflict':								$contents = base64_decode($cache->get($file_list[$file_struct['filename']]));								if ($update_mode == 'download')								{									$compress->add_data($contents, $file_struct['filename']);								}								else								{									$transfer->rename($file_struct['filename'], $file_struct['filename'] . '.bak');									$transfer->write_file($file_struct['filename'], $contents);								}							break;						}					}				}				if ($update_mode == 'download')				{					$compress->close();					$compress->download($archive_filename, $download_filename);					@unlink($phpbb_root_path . 'store/' . $archive_filename . $use_method);					exit;				}				else				{					$transfer->close_session();					$template->assign_vars(array(						'S_UPLOAD_SUCCESS'	=> true,						'U_ACTION'			=> append_sid($this->p_master->module_url, "language=$language&amp;mode=$mode&amp;sub=file_check"))					);					return;				}			break;		}	}	/**	* Show file diff	*/	function show_diff(&$update_list)	{		global $phpbb_root_path, $template, $user;		$this->tpl_name = 'install_update_diff';		// Got the diff template itself updated? If so, we are able to directly use it		if (in_array('adm/style/install_update_diff.html', $this->update_info['files']))		{			$this->tpl_name = '../../install/update/new/adm/style/install_update_diff';		}		$this->page_title = 'VIEWING_FILE_DIFF';		$status = request_var('status', '');		$file = request_var('file', '');		$diff_mode = request_var('diff_mode', 'inline');		// First of all make sure the file is within our file update list with the correct status		$found_entry = array();		foreach ($update_list[$status] as $index => $file_struct)		{			if ($file_struct['filename'] === $file)			{				$found_entry = $update_list[$status][$index];			}		}		if (empty($found_entry))		{			trigger_error($user->lang['FILE_DIFF_NOT_ALLOWED'], E_USER_ERROR);		}		// If the status is 'up_to_date' then we do not need to show a diff		if ($status == 'up_to_date')		{			trigger_error($user->lang['FILE_ALREADY_UP_TO_DATE'], E_USER_ERROR);		}		$original_file = ($found_entry['custom']) ? $found_entry['original'] : $file;		// Get the correct diff		switch ($status)		{			case 'conflict':				$option = request_var('op', 0);				switch ($option)				{					case MERGE_NO_MERGE_NEW:					case MERGE_NO_MERGE_MOD:						$diff = $this->return_diff(array(), ($option == MERGE_NO_MERGE_NEW) ? $this->new_location . $original_file : $phpbb_root_path . $file);						$template->assign_var('S_DIFF_NEW_FILE', true);						$diff_mode = 'inline';						$this->page_title = 'VIEWING_FILE_CONTENTS';					break;					// Merge differences and use new phpBB code for conflicted blocks					case MERGE_NEW_FILE:					case MERGE_MOD_FILE:						$diff = $this->return_diff($this->old_location . $original_file, $phpbb_root_path . $file, $this->new_location . $original_file);						$template->assign_vars(array(							'S_DIFF_CONFLICT_FILE'	=> true,							'NUM_CONFLICTS'			=> $diff->get_num_conflicts())						);						$diff = $this->return_diff($phpbb_root_path . $file, ($option == MERGE_NEW_FILE) ? $diff->merged_new_output() : $diff->merged_orig_output());					break;					// Download conflict file					default:						$diff = $this->return_diff($this->old_location . $original_file, $phpbb_root_path . $file, $this->new_location . $original_file);						header('Pragma: no-cache');						header("Content-Type: application/octetstream; name=\"$file\"");						header("Content-disposition: attachment; filename=$file");						@set_time_limit(0);						echo implode("\n", $diff->get_conflicts_content());						flush();						exit;					break;				}			break;			case 'modified':				$option = request_var('op', 0);				switch ($option)				{					case MERGE_NO_MERGE_NEW:					case MERGE_NO_MERGE_MOD:						$diff = $this->return_diff(array(), ($option == MERGE_NO_MERGE_NEW) ? $this->new_location . $original_file : $phpbb_root_path . $file);						$template->assign_var('S_DIFF_NEW_FILE', true);						$diff_mode = 'inline';						$this->page_title = 'VIEWING_FILE_CONTENTS';					break;					default:						$diff = $this->return_diff($this->old_location . $original_file, $phpbb_root_path . $original_file, $this->new_location . $file);						$diff = $this->return_diff($phpbb_root_path . $file, $diff->merged_output());					break;				}			break;			case 'not_modified':			case 'new_conflict':				$diff = $this->return_diff($phpbb_root_path . $file, $this->new_location . $original_file);			break;			case 'new':				$diff = $this->return_diff(array(), $this->new_location . $original_file);				$template->assign_var('S_DIFF_NEW_FILE', true);				$diff_mode = 'inline';				$this->page_title = 'VIEWING_FILE_CONTENTS';			break;		}		$diff_mode_options = '';		foreach (array('side_by_side', 'inline', 'unified', 'raw') as $option)		{			$diff_mode_options .= '<option value="' . $option . '"' . (($diff_mode == $option) ? ' selected="selected"' : '') . '>' . $user->lang['DIFF_' . strtoupper($option)] . '</option>';		}		// Now the correct renderer		$render_class = 'diff_renderer_' . $diff_mode;		if (!class_exists($render_class))		{			trigger_error('Chosen diff mode is not supported', E_USER_ERROR);		}		$renderer = new $render_class();		$template->assign_vars(array(			'DIFF_CONTENT'			=> $renderer->get_diff_content($diff),			'DIFF_MODE'				=> $diff_mode,			'S_DIFF_MODE_OPTIONS'	=> $diff_mode_options,			'S_SHOW_DIFF'			=> true,		));		unset($diff, $renderer);	}	/**	* Collect all file status infos we need for the update by diffing all files	*/	function get_update_structure(&$update_list, $expected_files)	{		global $phpbb_root_path, $phpEx, $user;		if ($update_list === false)		{			$update_list = array(				'up_to_date'	=> array(),				'new'			=> array(),				'not_modified'	=> array(),				'modified'		=> array(),				'new_conflict'	=> array(),				'conflict'		=> array(),				'no_update'		=> array(),				'status'		=> 0,			);		}		/* if (!empty($this->update_info['custom']))		{			foreach ($this->update_info['custom'] as $original_file => $file_ary)			{				foreach ($file_ary as $index => $file)				{					$this->make_update_diff($update_list, $original_file, $file, true);				}			}		} */		// Get a list of those files which are completely new by checking with file_exists...		$num_bytes_processed = 0;		foreach ($this->update_info['files'] as $index => $file)		{			if (is_int($update_list['status']) && $index < $update_list['status'])			{				continue;			}			if ($num_bytes_processed >= 500 * 1024)			{				return;			}			if (!file_exists($phpbb_root_path . $file))			{				// Make sure the update files are consistent by checking if the file is in new_files...				if (!file_exists($this->new_location . $file))				{					trigger_error($user->lang['INCOMPLETE_UPDATE_FILES'], E_USER_ERROR);				}				// If the file exists within the old directory the file got removed and we will write it back				// not a biggie, but we might want to state this circumstance separately later.				//	if (file_exists($this->old_location . $file))				//	{				//		$update_list['removed'][] = $file;				//	}				/* Only include a new file as new if the underlying path exist				// The path normally do not exist if the original style or language has been removed				if (file_exists($phpbb_root_path . dirname($file)))				{					$this->get_custom_info($update_list['new'], $file);					$update_list['new'][] = array('filename' => $file, 'custom' => false);				}				else				{					// Do not include style-related or language-related content					if (strpos($file, 'styles/') !== 0 && strpos($file, 'language/') !== 0)					{						$update_list['no_update'][] = $file;					}				}*/				if (file_exists($phpbb_root_path . dirname($file)) || (strpos($file, 'styles/') !== 0 && strpos($file, 'language/') !== 0))				{					$this->get_custom_info($update_list['new'], $file);					$update_list['new'][] = array('filename' => $file, 'custom' => false);				}				// unset($this->update_info['files'][$index]);			}			else			{				// not modified?				$this->make_update_diff($update_list, $file, $file, $expected_files);			}			$num_bytes_processed += (file_exists($this->new_location . $file)) ? filesize($this->new_location . $file) : 100 * 1024;			$update_list['status']++;		}		$update_list['status'] = -1;/*		if (!sizeof($this->update_info['files']))		{			return $update_list;		}		// Now diff the remaining files to get information about their status (not modified/modified/up-to-date)		// not modified?		foreach ($this->update_info['files'] as $index => $file)		{			$this->make_update_diff($update_list, $file, $file);		}		// Now to the styles...		if (empty($this->update_info['custom']))		{			return $update_list;		}		foreach ($this->update_info['custom'] as $original_file => $file_ary)		{			foreach ($file_ary as $index => $file)			{				$this->make_update_diff($update_list, $original_file, $file, true);			}		}		return $update_list;*/	}	/**	* Compare files for storage in update_list	*/	function make_update_diff(&$update_list, $original_file, $file, $expected_files, $custom = false)	{		global $phpbb_root_path, $user;		$update_ary = array('filename' => $file, 'custom' => $custom, 'as_expected' => false);		if ($custom)		{			$update_ary['original'] = $original_file;		}		if (file_exists($phpbb_root_path . $file))		{			$content = file_get_contents($phpbb_root_path . $file);			if (isset($expected_files[$file]) && // the user already selected what to do with this file				($expected_files[$file] === false || // the user wanted this file to stay the same, so just assume it's alright				$expected_files[$file] === md5($content)))			{				// the file contains what it was supposed to contain after the merge				$update_ary['as_expected'] = true;				$update_ary['was_ignored'] = ($expected_files[$file] === false);				$update_list['up_to_date'][] = $update_ary;				return;			}		}		// we only want to know if the files are successfully merged and newlines could result in errors (duplicate addition of lines and such things)		// Therefore we check for empty diffs with two methods, preserving newlines and not preserving them (which mostly works best, therefore the first option)		// On a successfull update the new location file exists but the old one does not exist.		// Check for this circumstance, the new file need to be up-to-date with the current file then...		if (!file_exists($this->old_location . $original_file) && file_exists($this->new_location . $original_file) && file_exists($phpbb_root_path . $file))		{			$tmp = array(				'file1'		=> file_get_contents($this->new_location . $original_file),				'file2'		=> $content,			);			// We need to diff the contents here to make sure the file is really the one we expect			$diff = new diff($tmp['file1'], $tmp['file2'], false);			$empty = $diff->is_empty();			unset($tmp, $diff);			// if there are no differences we have an up-to-date file...			if ($empty)			{				$update_list['up_to_date'][] = $update_ary;				return;			}			// If no other status matches we have another file in the way...			$update_list['new_conflict'][] = $update_ary;			return;		}		// Old file removed?		if (file_exists($this->old_location . $original_file) && !file_exists($this->new_location . $original_file))		{			return;		}		// Check for existance, else abort immediately		if (!file_exists($this->old_location . $original_file) || !file_exists($this->new_location . $original_file))		{			trigger_error($user->lang['INCOMPLETE_UPDATE_FILES'], E_USER_ERROR);		}		$preserve_cr_ary = array(false, true);		foreach ($preserve_cr_ary as $preserve_cr)		{			$tmp = array(				'file1'		=> file_get_contents($this->old_location . $original_file),				'file2'		=> $content,			);			// We need to diff the contents here to make sure the file is really the one we expect			$diff = new diff($tmp['file1'], $tmp['file2'], $preserve_cr);			$empty_1 = $diff->is_empty();			unset($tmp, $diff);			$tmp = array(				'file1'		=> file_get_contents($this->new_location . $original_file),				'file2'		=> $content,			);			$diff = new diff($tmp['file1'], $tmp['file2'], $preserve_cr);			$empty_2 = $diff->is_empty();			unset($tmp, $diff);			// If the file is not modified we are finished here...			if ($empty_1)			{				// Further check if it is already up to date - it could happen that non-modified files				// slip through				if ($empty_2)				{					$update_list['up_to_date'][] = $update_ary;					return;				}				$update_list['not_modified'][] = $update_ary;				return;			}			// If the file had been modified then we need to check if it is already up to date			// if there are no differences we have an up-to-date file...			if ($empty_2)			{				$update_list['up_to_date'][] = $update_ary;				return;			}		}		$conflicts = false;		foreach ($preserve_cr_ary as $preserve_cr)		{			// if the file is modified we try to make sure a merge succeed			$tmp = array(				'orig'		=> file_get_contents($this->old_location . $original_file),				'final1'	=> file_get_contents($phpbb_root_path . $file),				'final2'	=> file_get_contents($this->new_location . $original_file),			);			$diff = new diff3($tmp['orig'], $tmp['final1'], $tmp['final2'], $preserve_cr);			unset($tmp);			if (!$diff->get_num_conflicts())			{				$tmp = array(					'file1'		=> file_get_contents($phpbb_root_path . $file),					'file2'		=> implode("\n", $diff->merged_output()),				);				// now compare the merged output with the original file to see if the modified file is up to date				$diff2 = new diff($tmp['file1'], $tmp['file2'], $preserve_cr);				$empty = $diff2->is_empty();				unset($diff, $diff2);				if ($empty)				{					$update_list['up_to_date'][] = $update_ary;					return;				}				// If we preserve cr tag it as modified because the conflict would not show in this mode anyway				if ($preserve_cr)				{					$update_list['modified'][] = $update_ary;					return;				}			}			else			{				// There is one special case... users having merged with a conflicting file... we need to check this				$tmp = array(					'file1'		=> file_get_contents($phpbb_root_path . $file),					'file2'		=> implode("\n", $diff->merged_new_output()),				);				$diff2 = new diff($tmp['file1'], $tmp['file2'], $preserve_cr);				$empty = $diff2->is_empty();				if (!$empty)				{					unset($tmp, $diff2);					// We check if the user merged with his output					$tmp = array(						'file1'		=> file_get_contents($phpbb_root_path . $file),						'file2'		=> implode("\n", $diff->merged_orig_output()),					);					$diff2 = new diff($tmp['file1'], $tmp['file2'], $preserve_cr);					$empty = $diff2->is_empty();				}				if (!$empty)				{					$conflicts = $diff->get_num_conflicts();				}				unset($diff, $diff2);				if ($empty)				{					// A conflict got resolved...					$update_list['up_to_date'][] = $update_ary;					return;				}			}		}		if ($conflicts !== false)		{			$update_ary['conflicts'] = $conflicts;			$update_list['conflict'][] = $update_ary;			return;		}		// If no other status matches we have a modified file...		$update_list['modified'][] = $update_ary;	}	/**	* Update update_list with custom new files	*/	function get_custom_info(&$update_list, $file)	{		if (empty($this->update_info['custom']))		{			return;		}		if (isset($this->update_info['custom'][$file]))		{			foreach ($this->update_info['custom'][$file] as $_file)			{				$update_list[] = array('filename' => $_file, 'custom' => true, 'original' => $file);			}		}	}	/**	* Get remote file	*/	function get_file($mode)	{		global $user, $db;		$errstr = '';		$errno = 0;		switch ($mode)		{			case 'version_info':				global $phpbb_root_path, $phpEx;				$info = get_remote_file('www.phpbb.com', '/updatecheck', ((defined('PHPBB_QA')) ? '30x_qa.txt' : '30x.txt'), $errstr, $errno);				if ($info !== false)				{					$info = explode("\n", $info);					$info = trim($info[0]);				}				if ($this->test_update !== false)				{					$info = $this->test_update;				}				// If info is false the fsockopen function may not be working. Instead get the latest version from our update file (and pray it is up-to-date)				if ($info === false)				{					$update_info = array();					include($phpbb_root_path . 'install/update/index.' . $phpEx);					$info = (empty($update_info) || !is_array($update_info)) ? false : $update_info;					if ($info !== false)					{						$info = (!empty($info['version']['to'])) ? trim($info['version']['to']) : false;					}				}			break;			case 'update_info':				global $phpbb_root_path, $phpEx;				$update_info = array();				include($phpbb_root_path . 'install/update/index.' . $phpEx);				$info = (empty($update_info) || !is_array($update_info)) ? false : $update_info;				$errstr = ($info === false) ? $user->lang['WRONG_INFO_FILE_FORMAT'] : '';				if ($info !== false)				{					// We assume that all file extensions have been renamed to .$phpEx,					// if someone is using a non .php file extension for php files.					// However, in $update_info['files'] we use hardcoded .php.					// We therefore replace .php with .$phpEx.					$info['files'] = preg_replace('/\.php$/i', ".$phpEx", $info['files']);					// Adjust the update info file to hold some specific style-related information					$info['custom'] = array();/*					// Get custom installed styles...					$sql = 'SELECT template_name, template_path						FROM ' . STYLES_TEMPLATE_TABLE . "						WHERE LOWER(template_name) NOT IN ('subsilver2', 'prosilver')";					$result = $db->sql_query($sql);					$templates = array();					while ($row = $db->sql_fetchrow($result))					{						$templates[] = $row;					}					$db->sql_freeresult($result);					if (sizeof($templates))					{						foreach ($info['files'] as $filename)						{							// Template update?							if (strpos(strtolower($filename), 'styles/prosilver/template/') === 0)							{								foreach ($templates as $row)								{									$info['custom'][$filename][] = str_replace('/prosilver/', '/' . $row['template_path'] . '/', $filename);								}							}						}					}*/				}			break;			default:				trigger_error('Mode for getting remote file not specified', E_USER_ERROR);			break;		}		if ($info === false)		{			trigger_error($errstr, E_USER_ERROR);		}		return $info;	}	/**	* Function for including files...	*/	function include_file($filename)	{		global $phpbb_root_path, $phpEx;		if (!empty($this->update_info['files']) && in_array($filename, $this->update_info['files']))		{			include_once($this->new_location . $filename);		}		else		{			include_once($phpbb_root_path . $filename);		}	}	/**	* Wrapper for returning a diff object	*/	function return_diff()	{		$args = func_get_args();		$three_way_diff = (func_num_args() > 2) ? true : false;		$file1 = array_shift($args);		$file2 = array_shift($args);		$tmp['file1'] = (!empty($file1) && is_string($file1)) ? file_get_contents($file1) : $file1;		$tmp['file2'] = (!empty($file2) && is_string($file2)) ? file_get_contents($file2) : $file2;		if ($three_way_diff)		{			$file3 = array_shift($args);			$tmp['file3'] = (!empty($file3) && is_string($file3)) ? file_get_contents($file3) : $file3;			$diff = new diff3($tmp['file1'], $tmp['file2'], $tmp['file3']);		}		else		{			$diff = new diff($tmp['file1'], $tmp['file2']);		}		unset($tmp);		return $diff;	}}?>
<?php/*** Adjust username_clean column.** You should make a backup from your users table in case something goes wrong*/die("Please read the first lines of this script for instructions on how to enable it");set_time_limit(0);define('IN_PHPBB', true);$phpbb_root_path = './../';$phpEx = substr(strrchr(__FILE__, '.'), 1);include($phpbb_root_path . 'common.'.$phpEx);// Start session management$user->session_begin();$auth->acl($user->data);$user->setup();$echos = 0;$sql = 'SELECT user_id, username	FROM ' . USERS_TABLE;$result = $db->sql_query($sql);while ($row = $db->sql_fetchrow($result)){	$sql = 'UPDATE ' . USERS_TABLE . "		SET username_clean = '" . $db->sql_escape(utf8_clean_string($row['username'])) . "'		WHERE user_id = " . $row['user_id'];	$db->sql_query($sql);	if ($echos > 200)	{		echo '<br />' . "\n";		$echos = 0;	}	echo '.';	$echos++;	flush();}$db->sql_freeresult($result);echo 'FINISHED';// Done$db->sql_close();?>
<?php/**** help_faq [English]** @package language* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//***/if (!defined('IN_PHPBB')){	exit;}// DEVELOPERS PLEASE NOTE//// All language files should use UTF-8 as their encoding and the files must not contain a BOM.//// Placeholders can now contain order information, e.g. instead of// 'Page %s of %s' you can (and should) write 'Page %1$s of %2$s', this allows// translators to re-order the output of data while ensuring it remains correct//// You do not need this where single placeholders are used, e.g. 'Message %d' is fine// equally where a string contains only two placeholders which are used to wrap text// in a url you again do not need to specify an order e.g., 'Click %sHERE%s' is fine$help = array(	array(		0 => '--',		1 => 'Login and Registration Issues'	),	array(		0 => 'Why cant I login?',		1 => 'There are several reasons why this could occur. First, ensure your username and password are correct. If they are, contact the board owner to make sure you havent been banned. It is also possible the website owner has a configuration error on their end, and they would need to fix it.'	),	array(		0 => 'Why do I need to register at all?',		1 => 'You may not have to, it is up to the administrator of the board as to whether you need to register in order to post messages. However; registration will give you access to additional features not available to guest users such as definable avatar images, private messaging, emailing of fellow users, usergroup subscription, etc. It only takes a few moments to register so it is recommended you do so.'	),	array(		0 => 'Why do I get logged off automatically?',		1 => 'If you do not check the <em>Log me in automatically</em> box when you login, the board will only keep you logged in for a preset time. This prevents misuse of your account by anyone else. To stay logged in, check the box during login. This is not recommended if you access the board from a shared computer, e.g. library, internet cafe, university computer lab, etc. If you do not see this checkbox, it means the board administrator has disabled this feature.'	),	array(		0 => 'How do I prevent my username appearing in the online user listings?',		1 => 'Within your User Control Panel, under Board preferences, you will find the option <em>Hide your online status</em>. Enable this option with <samp>Yes</samp> and you will only appear to the administrators, moderators and yourself. You will be counted as a hidden user.'	),	array(		0 => 'Ive lost my password!',		1 => 'Dont panic! While your password cannot be retrieved, it can easily be reset. Visit the login page and click <em>Ive forgotten my password</em>. Follow the instructions and you should be able to log in again shortly.'	),	array(		0 => 'I registered but cannot login!',		1 => 'First, check your username and password. If they are correct, then one of two things may have happened. If COPPA support is enabled and you specified being under 13 years old during registration, you will have to follow the instructions you received. Some boards will also require new registrations to be activated, either by yourself or by an administrator before you can logon; this information was present during registration. If you were sent an e-mail, follow the instructions. If you did not receive an e-mail, you may have provided an incorrect e-mail address or the e-mail may have been picked up by a spam filer. If you are sure the e-mail address you provided is correct, try contacting an administrator.'	),	array(		0 => 'I registered in the past but cannot login any more?!',		1 => 'It is possible an administrator has deactivated or deleted your account for some reason. Also, many boards periodically remove users who have not posted for a long time to reduce the size of the database. If this has happened, try registering again and being more involved in discussions.'	),	array(		0 => 'What is COPPA?',		1 => 'COPPA, or the Child Online Privacy and Protection Act of 1998, is a law in the United States requiring websites which can potentially collect information from minors under the age of 13 to have written parental consent or some other method of legal guardian acknowledgment, allowing the collection of personally identifiable information from a minor under the age of 13. If you are unsure if this applies to you as someone trying to register or to the website you are trying to register on, contact legal counsel for assistance. Please note that the phpBB Group cannot provide legal advice and is not a point of contact for legal concerns of any kind, except as outlined below.',	),	array(		0 => 'Why cant I register?',		1 => 'It is possible the website owner has banned your IP address or disallowed the username you are attempting to register. The website owner could have also disabled registration to prevent new visitors from signing up. Contact a board administrator for assistance.',	),	array(		0 => 'What does the Delete all board cookies do?',		1 => 'Delete all board cookies deletes the cookies created by phpBB which keep you authenticated and logged into the board. It also provides functions such as read tracking if they have been enabled by the board owner. If you are having login or logout problems, deleting board cookies may help.',	),	array(		0 => '--',		1 => 'User Preferences and settings'	),	array(		0 => 'How do I change my settings?',		1 => 'If you are a registered user, all your settings are stored in the board database. To alter them, visit your User Control Panel; a link can usually be found at the top of board pages. This system will allow you to change all your settings and preferences.'	),	array(		0 => 'The times are not correct!',		1 => 'It is possible the time displayed is from a timezone different from the one you are in. If this is the case, visit your User Control Panel and change your timezone to match your particular area, e.g. London, Paris, New York, Sydney, etc. Please note that changing the timezone, like most settings, can only be done by registered users. If you are not registered, this is a good time to do so.'	),	array(		0 => 'I changed the timezone and the time is still wrong!',		1 => 'If you are sure you have set the timezone and Summer Time/DST correctly and the time is still incorrect, then the time stored on the server clock is incorrect. Please notify an administrator to correct the problem.'	),	array(		0 => 'My language is not in the list!',		1 => 'Either the administrator has not installed your language or nobody has translated this board into your language. Try asking the board administrator if they can install the language pack you need. If the language pack does not exist, feel free to create a new translation. More information can be found at the phpBB website (see link at the bottom of board pages).'	),	array(		0 => 'How do I show an image along with my username?',		1 => 'There are two images which may appear along with a username when viewing posts. One of them may be an image associated with your rank, generally in the form of stars, blocks or dots, indicating how many posts you have made or your status on the board. Another, usually a larger image, is known as an avatar and is generally unique or personal to each user. It is up to the board administrator to enable avatars and to choose the way in which avatars can be made available. If you are unable to use avatars, contact a board administrator and ask them for their reasons.'	),	array(		0 => 'What is my rank and how do I change it?',		1 => 'Ranks, which appear below your username, indicate the number of posts you have made or identify certain users, e.g. moderators and administrators. In general, you cannot directly change the wording of any board ranks as they are set by the board administrator. Please do not abuse the board by posting unnecessarily just to increase your rank. Most boards will not tolerate this and the moderator or administrator will simply lower your post count.'	),	array(		0 => 'When I click the e-mail link for a user it asks me to login?',		1 => 'Only registered users can send e-mail to other users via the built-in e-mail form, and only if the administrator has enabled this feature. This is to prevent malicious use of the e-mail system by anonymous users.'	),	array(		0 => '--',		1 => 'Posting Issues'	),	array(		0 => 'How do I post a topic in a forum?',		1 => 'To post a new topic in a forum, click the relevant button on either the forum or topic screens. You may need to register before you can post a message. A list of your permissions in each forum is available at the bottom of the forum and topic screens. Example: You can post new topics, You can vote in polls, etc.'	),	array(		0 => 'How do I edit or delete a post?',		1 => 'Unless you are a board administrator or moderator, you can only edit or delete your own posts. You can edit a post by clicking the edit button for the relevant post, sometimes for only a limited time after the post was made. If someone has already replied to the post, you will find a small piece of text output below the post when you return to the topic which lists the number of times you edited it along with the date and time. This will only appear if someone has made a reply; it will not appear if a moderator or administrator edited the post, though they may leave a note as to why theyve edited the post at their own discretion. Please note that normal users cannot delete a post once someone has replied.'	),	array(		0 => 'How do I add a signature to my post?',		1 => 'To add a signature to a post you must first create one via your User Control Panel. Once created, you can check the <em>Attach a signature</em> box on the posting form to add your signature. You can also add a signature by default to all your posts by checking the appropriate radio button in your profile. If you do so, you can still prevent a signature being added to individual posts by un-checking the add signature box within the posting form.'	),	array(		0 => 'How do I create a poll?',		1 => 'When posting a new topic or editing the first post of a topic, click the Poll creation tab below the main posting form; if you cannot see this, you do not have appropriate permissions to create polls. Enter a title and at least two options in the appropriate fields, making sure each option is on a separate line in the textarea. You can also set the number of options users may select during voting under Options per user, a time limit in days for the poll (0 for infinite duration) and lastly the option to allow users to amend their votes.'	),	array(		0 => 'Why cant I add more poll options?',		1 => 'The limit for poll options is set by the board administrator. If you feel you need to add more options to your poll than the allowed amount, contact the board administrator.'	),	array(		0 => 'How do I edit or delete a poll?',		1 => 'As with posts, polls can only be edited by the original poster, a moderator or an administrator. To edit a poll, click to edit the first post in the topic; this always has the poll associated with it. If no one has cast a vote, users can delete the poll or edit any poll option. However, if members have already placed votes, only moderators or administrators can edit or delete it. This prevents the polls options from being changed mid-way through a poll.'	),	array(		0 => 'Why cant I access a forum?',		1 => 'Some forums may be limited to certain users or groups. To view, read, post or perform another action you may need special permissions. Contact a moderator or board administrator to grant you access.'	),	array(		0 => 'Why cant I add attachments?',		1 => 'Attachment permissions are granted on a per forum, per group, or per user basis. The board administrator may not have allowed attachments to be added for the specific forum you are posting in, or perhaps only certain groups can post attachments. Contact the board administrator if you are unsure about why you are unable to add attachments.'	),	array(		0 => 'Why did I receive a warning?',		1 => 'Each board administrator has their own set of rules for their site. If you have broken a rule, you may be issued a warning. Please note that this is the board administrators decision, and the phpBB Group has nothing to do with the warnings on the given site. Contact the board administrator if you are unsure about why you were issued a warning.'	),	array(		0 => 'How can I report posts to a moderator?',		1 => 'If the board administrator has allowed it, you should see a button for reporting posts next to the post you wish to report. Clicking this will walk you through the steps necessary to report the post.'	),	array(		0 => 'What is the Save button for in topic posting?',		1 => 'This allows you to save passages to be completed and submitted at a later date. To reload a saved passage, visit the User Control Panel.'	),	array(		0 => 'Why does my post need to be approved?',		1 => 'The board administrator may have decided that posts in the forum you are posting to require review before submission. It is also possible that the administrator has placed you in a group of users whose posts require review before submission. Please contact the board administrator for further details.'	),	array(		0 => 'How do I bump my topic?',		1 => 'By clicking the Bump topic link when you are viewing it, you can bump the topic to the top of the forum on the first page. However, if you do not see this, then topic bumping may be disabled or the time allowance between bumps has not yet been reached. It is also possible to bump the topic simply by replying to it, however, be sure to follow the board rules when doing so.'	),	array(		0 => '--',		1 => 'Formatting and Topic Types'	),	array(		0 => 'What is BBCode?',		1 => 'BBCode is a special implementation of HTML, offering great formatting control on particular objects in a post. The use of BBCode is granted by the administrator, but it can also be disabled on a per post basis from the posting form. BBCode itself is similar in style to HTML, but tags are enclosed in square brackets [ and ] rather than &lt; and &gt;. For more information on BBCode see the guide which can be accessed from the posting page.'	),	array(		0 => 'Can I use HTML?',		1 => 'No. It is not possible to post HTML on this board and have it rendered as HTML. Most formatting which can be carried out using HTML can be applied using BBCode instead.'	),	array(		0 => 'What are Smilies?',		1 => 'Smilies, or Emoticons, are small images which can be used to express a feeling using a short code, e.g. :) denotes happy, while :( denotes sad. The full list of emoticons can be seen in the posting form. Try not to overuse smilies, however, as they can quickly render a post unreadable and a moderator may edit them out or remove the post altogether. The board administrator may also have set a limit to the number of smilies you may use within a post.'	),	array(		0 => 'Can I post images?',		1 => 'Yes, images can be shown in your posts. If the administrator has allowed attachments, you may be able to upload the image to the board. Otherwise, you must link to an image stored on a publicly accessible web server, e.g. http://www.example.com/my-picture.gif. You cannot link to pictures stored on your own PC (unless it is a publicly accessible server) nor images stored behind authentication mechanisms, e.g. hotmail or yahoo mailboxes, password protected sites, etc. To display the image use the BBCode [img] tag.'	),	array(		0 => 'What are global announcements?',		1 => 'Global announcements contain important information and you should read them whenever possible. They will appear at the top of every forum and within your User Control Panel. Global announcement permissions are granted by the board administrator.'	),	array(		0 => 'What are announcements?',		1 => 'Announcements often contain important information for the forum you are currently reading and you should read them whenever possible. Announcements appear at the top of every page in the forum to which they are posted. As with global announcements, announcement permissions are granted by the board administrator.'	),	array(		0 => 'What are sticky topics?',		1 => 'Sticky topics within the forum appear below announcements and only on the first page. They are often quite important so you should read them whenever possible. As with announcements and global announcements, sticky topic permissions are granted by the board administrator.'	),	array(		0 => 'What are locked topics?',		1 => 'Locked topics are topics where users can no longer reply and any poll it contained was automatically ended. Topics may be locked for many reasons and were set this way by either the forum moderator or board administrator. You may also be able to lock your own topics depending on the permissions you are granted by the board administrator.'	),	array(		0 => 'What are topic icons?',		1 => 'Topic icons are author chosen images associated with posts to indicate their content. The ability to use topic icons depends on the permissions set by the board administrator.'	),	// This block will switch the FAQ-Questions to the second template column	array(		0 => '--',		1 => '--'	),	array(		0 => '--',		1 => 'User Levels and Groups'	),	array(		0 => 'What are Administrators?',		1 => 'Administrators are members assigned with the highest level of control over the entire board. These members can control all facets of board operation, including setting permissions, banning users, creating usergroups or moderators, etc., dependent upon the board founder and what permissions he or she has given the other administrators. They may also have full moderator capabilities in all forums, depending on the settings put forth by the board founder.'	),	array(		0 => 'What are Moderators?',		1 => 'Moderators are individuals (or groups of individuals) who look after the forums from day to day. They have the authority to edit or delete posts and lock, unlock, move, delete and split topics in the forum they moderate. Generally, moderators are present to prevent users from going off-topic or posting abusive or offensive material.'	),	array(		0 => 'What are usergroups?',		1 => 'Usergroups are groups of users that divide the community into manageable sections board administrators can work with. Each user can belong to several groups and each group can be assigned individual permissions. This provides an easy way for administrators to change permissions for many users at once, such as changing moderator permissions or granting users access to a private forum.'	),	array(		0 => 'Where are the usergroups and how do I join one?',		1 => 'You can view all usergroups via the Usergroups link within your User Control Panel. If you would like to join one, proceed by clicking the appropriate button. Not all groups have open access, however. Some may require approval to join, some may be closed and some may even have hidden memberships. If the group is open, you can join it by clicking the appropriate button. If a group requires approval to join you may request to join by clicking the appropriate button. The user group leader will need to approve your request and may ask why you want to join the group. Please do not harass a group leader if they reject your request; they will have their reasons.'	),	array(		0 => 'How do I become a usergroup leader?',		1 => 'A usergroup leader is usually assigned when usergroups are initially created by a board administrator. If you are interested in creating a usergroup, your first point of contact should be an administrator; try sending a private message.',	),	array(		0 => 'Why do some usergroups appear in a different colour?',		1 => 'It is possible for the board administrator to assign a colour to the members of a usergroup to make it easy to identify the members of this group.'	),	array(		0 => 'What is a Default usergroup?',		1 => 'If you are a member of more than one usergroup, your default is used to determine which group colour and group rank should be shown for you by default. The board administrator may grant you permission to change your default usergroup via your User Control Panel.'	),	array(		0 => 'What is The team link?',		1 => 'This page provides you with a list of board staff, including board administrators and moderators and other details such as the forums they moderate.'	),	array(		0 => '--',		1 => 'Private Messaging'	),	array(		0 => 'I cannot send private messages!',		1 => 'There are three reasons for this; you are not registered and/or not logged on, the board administrator has disabled private messaging for the entire board, or the board administrator has prevented you from sending messages. Contact a board administrator for more information.'	),	array(		0 => 'I keep getting unwanted private messages!',		1 => 'You can block a user from sending you private messages by using message rules within your User Control Panel. If you are receiving abusive private messages from a particular user, inform a board administrator; they have the power to prevent a user from sending private messages.'	),	array(		0 => 'I have received a spamming or abusive e-mail from someone on this board!',		1 => 'We are sorry to hear that. The e-mail form feature of this board includes safeguards to try and track users who send such posts, so e-mail the board administrator with a full copy of the e-mail you received. It is very important that this includes the headers that contain the details of the user that sent the e-mail. The board administrator can then take action.'	),	array(		0 => '--',		1 => 'Friends and Foes'	),	array(		0 => 'What are my Friends and Foes lists?',		1 => 'You can use these lists to organise other members of the board. Members added to your friends list will be listed within your User Control Panel for quick access to see their online status and to send them private messages. Subject to template support, posts from these users may also be highlighted. If you add a user to your foes list, any posts they make will be hidden by default.'	),	array(		0 => 'How can I add / remove users to my Friends or Foes list?',		1 => 'You can add users to your list in two ways. Within each users profile, there is a link to add them to either your Friend or Foe list. Alternatively, from your User Control Panel, you can directly add users by entering their member name. You may also remove users from your list using the same page.'	),	array(		0 => '--',		1 => 'Searching the Forums'	),	array(		0 => 'How can I search a forum or forums?',		1 => 'Enter a search term in the search box located on the index, forum or topic pages. Advanced search can be accessed by clicking the Advance Search link which is available on all pages on the forum. How to access the search may depend on the style used.'	),	array(		0 => 'Why does my search return no results?',		1 => 'Your search was probably too vague and included many common terms which are not indexed by phpBB3. Be more specific and use the options available within Advanced search.'	),	array(		0 => 'Why does my search return a blank page!?',		1 => 'Your search returned too many results for the webserver to handle. Use Advanced search and be more specific in the terms used and forums that are to be searched.'	),	array(		0 => 'How do I search for members?',		1 => 'Visit to the Members page and click the Find a member link.'	),	array(		0 => 'How can I find my own posts and topics?',		1 => 'Your own posts can be retrieved either by clicking the Search users posts within the User Control Panel or via your own profile page. To search for your topics, use the Advanced search page and fill in the various options appropriately.'	),	array(		0 => '--',		1 => 'Topic Subscriptions and Bookmarks'	),	array(		0 => 'What is the difference between bookmarking and subscribing?',		1 => 'Bookmarking in phpBB3 is much like bookmarking in your web browser. You arent alerted when theres an update, but you can come back to the topic later. Subscribing, however, will notify you when there is an update to the topic or forum on the board via your preferred method or methods.'	),	array(		0 => 'How do I subscribe to specific forums or topics?',		1 => 'To subscribe to a specific forum, click the Subscribe forum link upon entering the forum. To subscribe to a topic, reply to the topic with the subscribe checkbox checked or click the Subscribe topic link within the topic itself.'	),	array(		0 => 'How do I remove my subscriptions?',		1 => 'To remove your subscriptions, go to your User Control Panel and follow the links to your subscriptions.'	),	array(		0 => '--',		1 => 'Attachments'	),	array(		0 => 'What attachments are allowed on this board?',		1 => 'Each board administrator can allow or disallow certain attachment types. If you are unsure what is allowed to be uploaded, contact the board administrator for assistance.'	),	array(		0 => 'How do I find all my attachments?',		1 => 'To find your list of attachments that you have uploaded, go to your User Control Panel and follow the links to the attachments section.'	),	array(		0 => '--',		1 => 'phpBB 3 Issues'	),	array(		0 => 'Who wrote this bulletin board?',		1 => 'This software (in its unmodified form) is produced, released and is copyright <a href="http://www.phpbb.com/">phpBB Group</a>. It is made available under the GNU General Public License and may be freely distributed. See the link for more details.'	),	array(		0 => 'Why isnt X feature available?',		1 => 'This software was written by and licensed through phpBB Group. If you believe a feature needs to be added, please visit the phpbb.com website and see what phpBB Group have to say. Please do not post feature requests to the board at phpbb.com, the group uses SourceForge to handle tasking of new features. Please read through the forums and see what, if any, our position may already be for a feature and then follow the procedure given there.'	),	array(		0 => 'Who do I contact about abusive and/or legal matters related to this board?',		1 => 'Any of the administrators listed on the The team page should be an appropriate point of contact for your complaints. If this still gets no response then you should contact the owner of the domain (do a <a href="http://www.google.com/search?q=whois">whois lookup</a>) or, if this is running on a free service (e.g. Yahoo!, free.fr, f2s.com, etc.), the management or abuse department of that service. Please note that the phpBB Group has <strong>absolutely no jurisdiction</strong> and cannot in any way be held liable over how, where or by whom this board is used. Do not contact the phpBB Group in relation to any legal (cease and desist, liable, defamatory comment, etc.) matter <strong>not directly related</strong> to the phpBB.com website or the discrete software of phpBB itself. If you do e-mail phpBB Group <strong>about any third party</strong> use of this software then you should expect a terse response or no response at all.'	));?>
<?php return array(''=>'i',''=>'!',''=>'a',''=>' ',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'o',''=>'o',''=>'',''=>' ',''=>' ',''=>' ',''=>' ',''=>' ',''=>' ',''=>' ',''=>' ',''=>' ',''=>' ',''=>' ',''=>' ',''=>' ',''=>' ',''=>' ',''=>'`',''=>'`',''=>'',''=>'^',''=>'^',''=>'_',''=>'_',''=>'_',''=>'_',''=>'',''=>'-',''=>'-',''=>'-',''=>'-',''=>'-',''=>'-',''=>'',''=>'',''=>'',''=>',',''=>',',''=>'',''=>'',''=>';',''=>';',''=>':',''=>':',''=>':',''=>':',''=>'::=',''=>'.',''=>'.',''=>'.',''=>'..',''=>'...',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'4',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'L',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'(',''=>'(1)',''=>'(l)',''=>'(10)',''=>'(11)',''=>'(12)',''=>'(13)',''=>'(14)',''=>'(15)',''=>'(16)',''=>'(17)',''=>'(18)',''=>'(19)',''=>'(2)',''=>'(20)',''=>'(3)',''=>'(4)',''=>'(5)',''=>'(6)',''=>'(7)',''=>'(8)',''=>'(9)',''=>'(a)',''=>'(b)',''=>'(c)',''=>'(d)',''=>'(e)',''=>'(f)',''=>'(g)',''=>'(h)',''=>'(i)',''=>'(j)',''=>'(k)',''=>'(m)',''=>'(n)',''=>'(o)',''=>'(p)',''=>'(q)',''=>'(r)',''=>'(s)',''=>'(t)',''=>'(u)',''=>'(v)',''=>'(w)',''=>'(x)',''=>'(y)',''=>'(z)',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>')',''=>'[',''=>'[',''=>']',''=>']',''=>'{',''=>'}',''=>'',''=>'',''=>'',''=>'',''=>'@',''=>'*',''=>'/',''=>'/',''=>'/',''=>'\\',''=>'&',''=>'#',''=>'%',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'','\''=>'',''=>'',''=>'',''=>'',''=>'',''=>'','"'=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'+',''=>'+',''=>'<',''=>'<',''=>'=',''=>'==',''=>'===',''=>'>',''=>'>',''=>'',''=>'',''=>'~',''=>'~',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'$',''=>'',''=>'Y',''=>'W',''=>'0',''=>'0',''=>'0',''=>'0',''=>'0',''=>'0',''=>'0',''=>'0',''=>'0',''=>'0',''=>'0',''=>'0',''=>'0',''=>'0',''=>'0',''=>'0',''=>'0',''=>'0',''=>'0',''=>'0',''=>'0',''=>'0',''=>'0',''=>'0',''=>'0',''=>'0',''=>'0',''=>'0',''=>'0',''=>'0',''=>'0',''=>'0',''=>'0',''=>'0',''=>'0',''=>'0',''=>'0',''=>'0',''=>'0',''=>'0',''=>'0',''=>'0',''=>'0',''=>'0',''=>'',''=>'',''=>'0',''=>'1',''=>'1',''=>'1',''=>'1',''=>'1',''=>'1',''=>'1',''=>'1',''=>'1',''=>'1',''=>'1',''=>'1',''=>'1',''=>'1',''=>'1',''=>'1',''=>'1',''=>'1',''=>'1','l'=>'l',''=>'l',''=>'1',''=>'l',''=>'l',''=>'l',''=>'l',''=>'l',''=>'l',''=>'l',''=>'l',''=>'l',''=>'l',''=>'l',''=>'l',''=>'l',''=>'l',''=>'l',''=>'l',''=>'l',''=>'l',''=>'l',''=>'',''=>'l',''=>'l',''=>'l',''=>'l',''=>'',''=>'1.',''=>'l',''=>'1',''=>'',''=>'10.',''=>'10',''=>'10',''=>'10',''=>'11.',''=>'11',''=>'11',''=>'11',''=>'12.',''=>'12',''=>'12',''=>'12',''=>'13.',''=>'13',''=>'13',''=>'14.',''=>'14',''=>'14',''=>'15.',''=>'15',''=>'15',''=>'16.',''=>'16',''=>'16',''=>'17.',''=>'17',''=>'17',''=>'18.',''=>'18',''=>'18',''=>'19.',''=>'19',''=>'19',''=>'lj',''=>'1',''=>'1',''=>'1',''=>'2',''=>'2',''=>'2',''=>'2',''=>'2',''=>'2',''=>'2',''=>'',''=>'',''=>'2.',''=>'20.',''=>'20',''=>'20',''=>'21',''=>'21',''=>'22',''=>'22',''=>'23',''=>'23',''=>'24',''=>'24',''=>'25',''=>'26',''=>'27',''=>'28',''=>'29',''=>'2',''=>'2',''=>'2',''=>'3',''=>'3',''=>'3',''=>'3',''=>'3',''=>'3',''=>'',''=>'',''=>'3.',''=>'30',''=>'31',''=>'3',''=>'3',''=>'3',''=>'4',''=>'4',''=>'4',''=>'4',''=>'4',''=>'4',''=>'4',''=>'',''=>'4.',''=>'4',''=>'4',''=>'4',''=>'4',''=>'5',''=>'5',''=>'5',''=>'5',''=>'5',''=>'5',''=>'',''=>'5.',''=>'5',''=>'5',''=>'5',''=>'6',''=>'6',''=>'6',''=>'6',''=>'6',''=>'6',''=>'6',''=>'',''=>'6.',''=>'6',''=>'6',''=>'6',''=>'7',''=>'7',''=>'7',''=>'7',''=>'7',''=>'7',''=>'',''=>'',''=>'7.',''=>'7',''=>'7',''=>'7',''=>'8',''=>'8',''=>'8',''=>'8',''=>'8',''=>'8',''=>'8',''=>'8',''=>'8',''=>'8',''=>'',''=>'',''=>'8.',''=>'8',''=>'8',''=>'8',''=>'9',''=>'9',''=>'9',''=>'9',''=>'9',''=>'9',''=>'9',''=>'9',''=>'9',''=>'',''=>'',''=>'9.',''=>'9',''=>'9',''=>'9',''=>'a',''=>'a',''=>'a',''=>'a',''=>'a',''=>'a',''=>'a',''=>'a',''=>'a',''=>'a',''=>'a',''=>'a',''=>'a',''=>'a',''=>'a/c',''=>'a/s',''=>'ae',''=>'b',''=>'b',''=>'b',''=>'b',''=>'b',''=>'b',''=>'b',''=>'b',''=>'b',''=>'b',''=>'b',''=>'b',''=>'b',''=>'b',''=>'b',''=>'b',''=>'b',''=>'c',''=>'c',''=>'c',''=>'c',''=>'c',''=>'c',''=>'c',''=>'c',''=>'c',''=>'c',''=>'c',''=>'c',''=>'c',''=>'c',''=>'c',''=>'c',''=>'c',''=>'c',''=>'c',''=>'c',''=>'c/o',''=>'c/u',''=>'d',''=>'d',''=>'d',''=>'d',''=>'d',''=>'d',''=>'d',''=>'d',''=>'d',''=>'d',''=>'d',''=>'d',''=>'d',''=>'d',''=>'d',''=>'d',''=>'d',''=>'d',''=>'d',''=>'d',''=>'dz',''=>'d',''=>'e',''=>'e',''=>'e',''=>'e',''=>'e',''=>'e',''=>'e',''=>'e',''=>'e',''=>'e',''=>'e',''=>'e',''=>'e',''=>'e',''=>'e',''=>'E',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'f',''=>'f',''=>'f',''=>'f',''=>'f',''=>'f',''=>'f',''=>'f',''=>'f',''=>'f',''=>'f',''=>'f',''=>'f',''=>'f',''=>'f',''=>'g',''=>'g',''=>'g',''=>'g',''=>'g',''=>'g',''=>'g',''=>'g',''=>'g',''=>'g',''=>'g',''=>'g',''=>'g',''=>'g',''=>'g',''=>'g',''=>'g',''=>'h',''=>'h',''=>'h',''=>'h',''=>'h',''=>'h',''=>'h',''=>'h',''=>'h',''=>'h',''=>'h',''=>'h',''=>'h',''=>'h',''=>'h',''=>'h',''=>'h',''=>'',''=>'',''=>'',''=>'',''=>'i',''=>'i',''=>'i',''=>'i',''=>'i',''=>'i',''=>'i',''=>'i',''=>'i',''=>'i',''=>'i',''=>'i',''=>'i',''=>'i',''=>'i',''=>'i',''=>'i',''=>'i',''=>'i',''=>'i',''=>'i',''=>'i',''=>'i',''=>'i',''=>'i',''=>'i',''=>'i',''=>'i',''=>'ii',''=>'iii',''=>'ij',''=>'iv',''=>'ix',''=>'j',''=>'j',''=>'j',''=>'j',''=>'j',''=>'j',''=>'j',''=>'j',''=>'j',''=>'j',''=>'j',''=>'j',''=>'j',''=>'j',''=>'j',''=>'j',''=>'',''=>'k',''=>'k',''=>'k',''=>'k',''=>'k',''=>'k',''=>'k',''=>'k',''=>'k',''=>'k',''=>'k',''=>'k',''=>'k',''=>'k',''=>'k',''=>'m',''=>'m',''=>'m',''=>'m',''=>'m',''=>'m',''=>'m',''=>'m',''=>'m',''=>'m',''=>'m',''=>'m',''=>'m',''=>'m',''=>'m',''=>'m',''=>'n',''=>'n',''=>'n',''=>'n',''=>'n',''=>'n',''=>'n',''=>'n',''=>'n',''=>'n',''=>'n',''=>'n',''=>'n',''=>'n',''=>'N',''=>'N',''=>'N',''=>'N',''=>'N',''=>'N',''=>'N',''=>'N',''=>'N',''=>'N',''=>'N',''=>'N',''=>'N',''=>'N',''=>'N',''=>'N',''=>'N',''=>'',''=>'n',''=>'n',''=>'n',''=>'n',''=>'n',''=>'n',''=>'n',''=>'nj',''=>'o',''=>'o',''=>'o',''=>'o',''=>'o',''=>'o',''=>'o',''=>'o',''=>'o',''=>'o',''=>'o',''=>'o',''=>'o',''=>'o',''=>'o',''=>'o',''=>'o',''=>'o',''=>'o',''=>'o',''=>'o',''=>'o',''=>'o',''=>'oe',''=>'o',''=>'p',''=>'p',''=>'p',''=>'p',''=>'p',''=>'p',''=>'p',''=>'p',''=>'p',''=>'p',''=>'p',''=>'p',''=>'p',''=>'p',''=>'p',''=>'p',''=>'p',''=>'p',''=>'p',''=>'p',''=>'p',''=>'p',''=>'p',''=>'p',''=>'p',''=>'p',''=>'q',''=>'q',''=>'q',''=>'q',''=>'q',''=>'q',''=>'q',''=>'q',''=>'q',''=>'q',''=>'q',''=>'q',''=>'q',''=>'q',''=>'Q',''=>'Q',''=>'Q',''=>'Q',''=>'Q',''=>'Q',''=>'Q',''=>'Q',''=>'Q',''=>'Q',''=>'Q',''=>'Q',''=>'q',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'r',''=>'r',''=>'r',''=>'r',''=>'r',''=>'r',''=>'r',''=>'r',''=>'r',''=>'r',''=>'r',''=>'r',''=>'r',''=>'r',''=>'r',''=>'r',''=>'s',''=>'s',''=>'s',''=>'s',''=>'s',''=>'s',''=>'s',''=>'s',''=>'s',''=>'s',''=>'s',''=>'s',''=>'s',''=>'s',''=>'s',''=>'s',''=>'',''=>'',''=>'',''=>'',''=>'t',''=>'t',''=>'t',''=>'t',''=>'t',''=>'t',''=>'t',''=>'t',''=>'t',''=>'t',''=>'t',''=>'t',''=>'t',''=>'t',''=>'T',''=>'T',''=>'T',''=>'T',''=>'T',''=>'T',''=>'T',''=>'T',''=>'T',''=>'T',''=>'T',''=>'T',''=>'T',''=>'T',''=>'T',''=>'T',''=>'T',''=>'t',''=>'',''=>'',''=>'t',''=>'u',''=>'u',''=>'u',''=>'u',''=>'u',''=>'u',''=>'u',''=>'u',''=>'u',''=>'u',''=>'u',''=>'u',''=>'u',''=>'u',''=>'u',''=>'u',''=>'u',''=>'u',''=>'u',''=>'u',''=>'u',''=>'U',''=>'U',''=>'U',''=>'U',''=>'U',''=>'U',''=>'U',''=>'U',''=>'U',''=>'U',''=>'U',''=>'U',''=>'v',''=>'v',''=>'v',''=>'v',''=>'v',''=>'v',''=>'v',''=>'v',''=>'v',''=>'v',''=>'v',''=>'v',''=>'v',''=>'v',''=>'v',''=>'v',''=>'v',''=>'v',''=>'v',''=>'v',''=>'vi',''=>'vii',''=>'viii',''=>'w',''=>'w',''=>'w',''=>'w',''=>'w',''=>'w',''=>'w',''=>'w',''=>'w',''=>'w',''=>'w',''=>'w',''=>'w',''=>'w',''=>'w',''=>'W',''=>'W',''=>'W',''=>'W',''=>'W',''=>'W',''=>'W',''=>'W',''=>'W',''=>'W',''=>'W',''=>'W',''=>'x',''=>'x',''=>'x',''=>'x',''=>'x',''=>'x',''=>'x',''=>'x',''=>'x',''=>'x',''=>'x',''=>'x',''=>'x',''=>'x',''=>'x',''=>'x',''=>'X',''=>'X',''=>'X',''=>'X',''=>'X',''=>'X',''=>'X',''=>'X',''=>'X',''=>'X',''=>'X',''=>'X',''=>'X',''=>'X',''=>'X',''=>'X',''=>'X',''=>'X',''=>'xi',''=>'xii',''=>'y',''=>'y',''=>'y',''=>'y',''=>'y',''=>'y',''=>'y',''=>'y',''=>'y',''=>'y',''=>'y',''=>'y',''=>'y',''=>'y',''=>'y',''=>'z',''=>'z',''=>'z',''=>'z',''=>'z',''=>'z',''=>'z',''=>'z',''=>'z',''=>'z',''=>'z',''=>'z',''=>'z',''=>'z',''=>'z',''=>'z',''=>'z',''=>'','?'=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'','!'=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'Y',''=>'Y',''=>'Y',''=>'Y',''=>'Y',''=>'Y',''=>'Y',''=>'Y',''=>'Y',''=>'Y',''=>'Y',''=>'Y',''=>'Y',''=>'Y',''=>'Y',''=>'Y',''=>'Y',''=>'Y',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'ae',''=>'r',''=>'r',''=>'',''=>'',''=>'i',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'o',''=>'o',''=>'c',''=>'',''=>'y',''=>'y',''=>'h',''=>'',''=>'',''=>'',''=>'',''=>'q',''=>'n',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>' ',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'   ',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'o',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'y',''=>'A',''=>'A',''=>'A',''=>'A',''=>'A',''=>'A',''=>'A',''=>'A',''=>'A',''=>'A',''=>'A',''=>'A',''=>'A',''=>'A',''=>'A',''=>'A',''=>'A',''=>'A',''=>'J',''=>'J',''=>'J',''=>'J',''=>'J',''=>'J',''=>'J',''=>'J',''=>'J',''=>'J',''=>'J',''=>'J',''=>'J',''=>'J',''=>'E',''=>'E',''=>'E',''=>'E',''=>'E',''=>'E',''=>'E',''=>'E',''=>'E',''=>'E',''=>'E',''=>'E',''=>'E',''=>'E',''=>'E',''=>'E',''=>'E',''=>'E',''=>'E',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'w',''=>'M',''=>'M',''=>'M',''=>'M',''=>'M',''=>'M',''=>'M',''=>'M',''=>'M',''=>'M',''=>'M',''=>'M',''=>'M',''=>'M',''=>'M',''=>'M',''=>'M',''=>'M',''=>'H',''=>'H',''=>'H',''=>'H',''=>'H',''=>'H',''=>'H',''=>'H',''=>'H',''=>'H',''=>'H',''=>'H',''=>'H',''=>'H',''=>'H',''=>'H',''=>'H',''=>'H',''=>'G',''=>'G',''=>'G',''=>'G',''=>'G',''=>'G',''=>'G',''=>'G',''=>'G',''=>'G',''=>'G',''=>'G',''=>'G',''=>'G',''=>'Z',''=>'Z',''=>'Z',''=>'Z',''=>'Z',''=>'Z',''=>'Z',''=>'Z',''=>'Z',''=>'Z',''=>'Z',''=>'Z',''=>'Z',''=>'Z',''=>'Z',''=>'Z',''=>'Z',''=>'Z',''=>'S',''=>'S',''=>'S',''=>'S',''=>'S',''=>'S',''=>'S',''=>'S',''=>'S',''=>'S',''=>'S',''=>'S',''=>'S',''=>'S',''=>'V',''=>'V',''=>'V',''=>'V',''=>'V',''=>'V',''=>'V',''=>'V',''=>'V',''=>'V',''=>'V',''=>'V',''=>'V',''=>'L',''=>'L',''=>'L',''=>'L',''=>'L',''=>'L',''=>'L',''=>'L',''=>'L',''=>'L',''=>'L',''=>'L',''=>'L',''=>'C',''=>'C',''=>'C',''=>'C',''=>'C',''=>'C',''=>'C',''=>'C',''=>'C',''=>'C',''=>'C',''=>'C',''=>'C',''=>'C',''=>'C',''=>'C',''=>'C',''=>'C',''=>'C',''=>'C',''=>'P',''=>'P',''=>'P',''=>'P',''=>'P',''=>'P',''=>'P',''=>'P',''=>'P',''=>'P',''=>'P',''=>'P',''=>'P',''=>'P',''=>'P',''=>'P',''=>'P',''=>'P',''=>'K',''=>'K',''=>'K',''=>'K',''=>'K',''=>'K',''=>'K',''=>'K',''=>'K',''=>'K',''=>'K',''=>'K',''=>'K',''=>'K',''=>'K',''=>'K',''=>'K',''=>'K',''=>'B',''=>'B',''=>'B',''=>'B',''=>'B',''=>'B',''=>'B',''=>'B',''=>'B',''=>'B',''=>'B',''=>'B',''=>'B',''=>'B',''=>'B',''=>'B',''=>'B',''=>'B',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'P',''=>'d',''=>'J',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'P',''=>'P',''=>'',''=>'d',''=>'d',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'J',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'x',''=>'x',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'P',''=>'',''=>'d',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'R',''=>'R',''=>'R',''=>'R',''=>'R',''=>'R',''=>'R',''=>'R',''=>'R',''=>'R',''=>'R',''=>'R',''=>'R',''=>'',''=>'',''=>'',''=>'',''=>'J',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'J',''=>'',''=>'',''=>'',''=>'F',''=>'F',''=>'F',''=>'F',''=>'F',''=>'F',''=>'F',''=>'F',''=>'F',''=>'F',''=>'F',''=>'F',''=>'F',''=>'F',''=>'D',''=>'D',''=>'D',''=>'D',''=>'D',''=>'D',''=>'D',''=>'D',''=>'D',''=>'D',''=>'D',''=>'D',''=>'D',''=>'D',''=>'D',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'','|'=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'C',''=>'F',''=>'',''=>'FAX',''=>'N',''=>'No',''=>'Q',''=>'Rs',''=>'T',''=>'TEL',''=>'U',''=>'W',''=>'W',''=>'X',''=>'Y',''=>'',''=>'',''=>'',''=>'c',''=>'Y',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'b',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'a',''=>'b',''=>'b',''=>'c',''=>'d',''=>'d',''=>'e',''=>'',''=>'',''=>'',''=>'f',''=>'g',''=>'h',''=>'h',''=>'h',''=>'h',''=>'i',''=>'i',''=>'i',''=>'j',''=>'j',''=>'m',''=>'n',''=>'n',''=>'o',''=>'o',''=>'o',''=>'o',''=>'o',''=>'o',''=>'o',''=>'o',''=>'o',''=>'o',''=>'o',''=>'o',''=>'p',''=>'p',''=>'',''=>'q',''=>'',''=>'',''=>'r',''=>'r',''=>'s',''=>'u',''=>'u',''=>'v',''=>'v',''=>'w',''=>'w',''=>'x',''=>'x',''=>'y',''=>'y',''=>'',''=>'',''=>'',''=>'',''=>'i',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'A',''=>'J',''=>'H',''=>'V',''=>'P',''=>'B',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'A',''=>'B',''=>'C',''=>'D',''=>'E',''=>'F',''=>'G',''=>'H',''=>'J',''=>'K',''=>'L',''=>'M',''=>'P',''=>'R',''=>'S',''=>'V',''=>'Z');
<?php/**** @package mcp* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @package module_install*/class mcp_logs_info{	function module()	{		return array(			'filename'	=> 'mcp_logs',			'title'		=> 'MCP_LOGS',			'version'	=> '1.0.0',			'modes'		=> array(				'front'			=> array('title' => 'MCP_LOGS_FRONT', 'auth' => 'acl_m_ || aclf_m_', 'cat' => array('MCP_LOGS')),				'forum_logs'	=> array('title' => 'MCP_LOGS_FORUM_VIEW', 'auth' => 'acl_m_,$id', 'cat' => array('MCP_LOGS')),				'topic_logs'	=> array('title' => 'MCP_LOGS_TOPIC_VIEW', 'auth' => 'acl_m_,$id', 'cat' => array('MCP_LOGS')),			),		);	}	function install()	{	}	function uninstall()	{	}}?>
<?php/**** @package acp* @version $Id$* @copyright (c) 2006 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @package module_install*/class acp_inactive_info{	function module()	{		return array(			'filename'	=> 'acp_inactive',			'title'		=> 'ACP_INACTIVE_USERS',			'version'	=> '1.0.0',			'modes'		=> array(				'list'		=> array('title' => 'ACP_INACTIVE_USERS', 'auth' => 'acl_a_user', 'cat' => array('ACP_CAT_USERS')),			),		);	}	function install()	{	}	function uninstall()	{	}}?>
<?php/**** viewforum [English]** @package language* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** DO NOT CHANGE*/if (!defined('IN_PHPBB')){	exit;}if (empty($lang) || !is_array($lang)){	$lang = array();}// DEVELOPERS PLEASE NOTE//// All language files should use UTF-8 as their encoding and the files must not contain a BOM.//// Placeholders can now contain order information, e.g. instead of// 'Page %s of %s' you can (and should) write 'Page %1$s of %2$s', this allows// translators to re-order the output of data while ensuring it remains correct//// You do not need this where single placeholders are used, e.g. 'Message %d' is fine// equally where a string contains only two placeholders which are used to wrap text// in a url you again do not need to specify an order e.g., 'Click %sHERE%s' is fine$lang = array_merge($lang, array(	'ACTIVE_TOPICS'			=> 'Active topics',	'ANNOUNCEMENTS'			=> 'Announcements',	'FORUM_PERMISSIONS'		=> 'Forum permissions',	'ICON_ANNOUNCEMENT'		=> 'Announcement',	'ICON_STICKY'			=> 'Sticky',	'LOGIN_NOTIFY_FORUM'	=> 'You have been notified about this forum, please login to view it.',	'MARK_TOPICS_READ'		=> 'Mark topics read',	'NEW_POSTS_HOT'			=> 'New posts [ Popular ]',	// Not used anymore	'NEW_POSTS_LOCKED'		=> 'New posts [ Locked ]',	// Not used anymore	'NO_NEW_POSTS_HOT'		=> 'No new posts [ Popular ]',	// Not used anymore	'NO_NEW_POSTS_LOCKED'	=> 'No new posts [ Locked ]',	// Not used anymore	'NO_READ_ACCESS'		=> 'You do not have the required permissions to read topics within this forum.',	'NO_UNREAD_POSTS_HOT'		=> 'No unread posts [ Popular ]',	'NO_UNREAD_POSTS_LOCKED'	=> 'No unread posts [ Locked ]',	'POST_FORUM_LOCKED'		=> 'Forum is locked',	'TOPICS_MARKED'			=> 'The topics for this forum have now been marked read.',	'UNREAD_POSTS_HOT'		=> 'Unread posts [ Popular ]',	'UNREAD_POSTS_LOCKED'	=> 'Unread posts [ Locked ]',	'VIEW_FORUM'			=> 'View forum',	'VIEW_FORUM_TOPIC'		=> '1 topic',	'VIEW_FORUM_TOPICS'		=> '%d topics',));?>
<?php/**** @package VC* @version $Id$* @copyright (c) 2005 2008 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @ignore*/if (!defined('IN_PHPBB')){	exit;}/*** ucp_confirm* Visual confirmation** Note to potential users of this code ...** Remember this is released under the _GPL_ and is subject* to that licence. Do not incorporate this within software* released or distributed in any way under a licence other* than the GPL. We will be watching ... ;)** @package VC*/class ucp_confirm{	var $u_action;	function main($id, $mode)	{		global $db, $user, $phpbb_root_path, $config, $phpEx;		include($phpbb_root_path . 'includes/captcha/captcha_factory.' . $phpEx);		$captcha = phpbb_captcha_factory::get_instance($config['captcha_plugin']);		$captcha->init(request_var('type', 0));		$captcha->execute();		garbage_collection();		exit_handler();	}}?>
<?php/**** @package phpBB3* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @ignore*/define('IN_PHPBB', true);$phpbb_root_path = (defined('PHPBB_ROOT_PATH')) ? PHPBB_ROOT_PATH : './';$phpEx = substr(strrchr(__FILE__, '.'), 1);include($phpbb_root_path . 'common.' . $phpEx);include($phpbb_root_path . 'includes/functions_display.' . $phpEx);// Start session management$user->session_begin();$auth->acl($user->data);$user->setup(array('memberlist', 'groups'));// Grab data$mode		= request_var('mode', '');$action		= request_var('action', '');$user_id	= request_var('u', ANONYMOUS);$username	= request_var('un', '', true);$group_id	= request_var('g', 0);$topic_id	= request_var('t', 0);// Check our mode...if (!in_array($mode, array('', 'group', 'viewprofile', 'email', 'contact', 'searchuser', 'leaders'))){	trigger_error('NO_MODE');}switch ($mode){	case 'email':	break;	default:		// Can this user view profiles/memberlist?		if (!$auth->acl_gets('u_viewprofile', 'a_user', 'a_useradd', 'a_userdel'))		{			if ($user->data['user_id'] != ANONYMOUS)			{				trigger_error('NO_VIEW_USERS');			}			login_box('', ((isset($user->lang['LOGIN_EXPLAIN_' . strtoupper($mode)])) ? $user->lang['LOGIN_EXPLAIN_' . strtoupper($mode)] : $user->lang['LOGIN_EXPLAIN_MEMBERLIST']));		}	break;}$start	= request_var('start', 0);$submit = (isset($_POST['submit'])) ? true : false;$default_key = 'c';$sort_key = request_var('sk', $default_key);$sort_dir = request_var('sd', 'a');// Grab rank information for later$ranks = $cache->obtain_ranks();// What do you want to do today? ... oops, I think that line is taken ...switch ($mode){	case 'leaders':		// Display a listing of board admins, moderators		include($phpbb_root_path . 'includes/functions_user.' . $phpEx);		$page_title = $user->lang['THE_TEAM'];		$template_html = 'memberlist_leaders.html';		$user_ary = $auth->acl_get_list(false, array('a_', 'm_'), false);		$admin_id_ary = $global_mod_id_ary = $mod_id_ary = $forum_id_ary = array();		foreach ($user_ary as $forum_id => $forum_ary)		{			foreach ($forum_ary as $auth_option => $id_ary)			{				if (!$forum_id)				{					if ($auth_option == 'a_')					{						$admin_id_ary = array_merge($admin_id_ary, $id_ary);					}					else					{						$global_mod_id_ary = array_merge($global_mod_id_ary, $id_ary);					}					continue;				}				else				{					$mod_id_ary = array_merge($mod_id_ary, $id_ary);				}				if ($forum_id)				{					foreach ($id_ary as $id)					{						$forum_id_ary[$id][] = $forum_id;					}				}			}		}		$admin_id_ary = array_unique($admin_id_ary);		$global_mod_id_ary = array_unique($global_mod_id_ary);		$mod_id_ary = array_merge($mod_id_ary, $global_mod_id_ary);		$mod_id_ary = array_unique($mod_id_ary);		// Admin group id...		$sql = 'SELECT group_id			FROM ' . GROUPS_TABLE . "			WHERE group_name = 'ADMINISTRATORS'";		$result = $db->sql_query($sql);		$admin_group_id = (int) $db->sql_fetchfield('group_id');		$db->sql_freeresult($result);		// Get group memberships for the admin id ary...		$admin_memberships = group_memberships($admin_group_id, $admin_id_ary);		$admin_user_ids = array();		if (!empty($admin_memberships))		{			// ok, we only need the user ids...			foreach ($admin_memberships as $row)			{				$admin_user_ids[$row['user_id']] = true;			}		}		unset($admin_memberships);		$sql = 'SELECT forum_id, forum_name			FROM ' . FORUMS_TABLE;		$result = $db->sql_query($sql);		$forums = array();		while ($row = $db->sql_fetchrow($result))		{			$forums[$row['forum_id']] = $row['forum_name'];		}		$db->sql_freeresult($result);		$sql = $db->sql_build_query('SELECT', array(			'SELECT'	=> 'u.user_id, u.group_id as default_group, u.username, u.username_clean, u.user_colour, u.user_rank, u.user_posts, u.user_allow_pm, g.group_id, g.group_name, g.group_colour, g.group_type, ug.user_id as ug_user_id',			'FROM'		=> array(				USERS_TABLE		=> 'u',				GROUPS_TABLE	=> 'g'			),			'LEFT_JOIN'	=> array(				array(					'FROM'	=> array(USER_GROUP_TABLE => 'ug'),					'ON'	=> 'ug.group_id = g.group_id AND ug.user_pending = 0 AND ug.user_id = ' . $user->data['user_id']				)			),			'WHERE'		=> $db->sql_in_set('u.user_id', array_unique(array_merge($admin_id_ary, $mod_id_ary)), false, true) . '				AND u.group_id = g.group_id',			'ORDER_BY'	=> 'g.group_name ASC, u.username_clean ASC'		));		$result = $db->sql_query($sql);		while ($row = $db->sql_fetchrow($result))		{			$which_row = (in_array($row['user_id'], $admin_id_ary)) ? 'admin' : 'mod';			// We sort out admins not within the 'Administrators' group.			// Else, we will list those as admin only having the permission to view logs for example.			if ($which_row == 'admin' && empty($admin_user_ids[$row['user_id']]))			{				// Remove from admin_id_ary, because the user may be a mod instead				unset($admin_id_ary[array_search($row['user_id'], $admin_id_ary)]);				if (!in_array($row['user_id'], $mod_id_ary) && !in_array($row['user_id'], $global_mod_id_ary))				{					continue;				}				else				{					$which_row = 'mod';				}			}			$s_forum_select = '';			$undisclosed_forum = false;			if (isset($forum_id_ary[$row['user_id']]) && !in_array($row['user_id'], $global_mod_id_ary))			{				if ($which_row == 'mod' && sizeof(array_diff(array_keys($forums), $forum_id_ary[$row['user_id']])))				{					foreach ($forum_id_ary[$row['user_id']] as $forum_id)					{						if (isset($forums[$forum_id]))						{							if ($auth->acl_get('f_list', $forum_id))							{								$s_forum_select .= '<option value="">' . $forums[$forum_id] . '</option>';							}							else							{								$undisclosed_forum = true;							}						}					}				}			}			// If the mod is only moderating non-viewable forums we skip the user. There is no gain in displaying the person then...			if (!$s_forum_select && $undisclosed_forum)			{//				$s_forum_select = '<option value="">' . $user->lang['FORUM_UNDISCLOSED'] . '</option>';				continue;			}			// The person is moderating several "public" forums, therefore the person should be listed, but not giving the real group name if hidden.			if ($row['group_type'] == GROUP_HIDDEN && !$auth->acl_gets('a_group', 'a_groupadd', 'a_groupdel') && $row['ug_user_id'] != $user->data['user_id'])			{				$group_name = $user->lang['GROUP_UNDISCLOSED'];				$u_group = '';			}			else			{				$group_name = ($row['group_type'] == GROUP_SPECIAL) ? $user->lang['G_' . $row['group_name']] : $row['group_name'];				$u_group = append_sid("{$phpbb_root_path}memberlist.$phpEx", 'mode=group&amp;g=' . $row['group_id']);			}			$rank_title = $rank_img = '';			get_user_rank($row['user_rank'], (($row['user_id'] == ANONYMOUS) ? false : $row['user_posts']), $rank_title, $rank_img, $rank_img_src);			$template->assign_block_vars($which_row, array(				'USER_ID'		=> $row['user_id'],				'FORUMS'		=> $s_forum_select,				'RANK_TITLE'	=> $rank_title,				'GROUP_NAME'	=> $group_name,				'GROUP_COLOR'	=> $row['group_colour'],				'RANK_IMG'		=> $rank_img,				'RANK_IMG_SRC'	=> $rank_img_src,				'U_GROUP'			=> $u_group,				'U_PM'				=> ($config['allow_privmsg'] && $auth->acl_get('u_sendpm') && ($row['user_allow_pm'] || $auth->acl_gets('a_', 'm_') || $auth->acl_getf_global('m_'))) ? append_sid("{$phpbb_root_path}ucp.$phpEx", 'i=pm&amp;mode=compose&amp;u=' . $row['user_id']) : '',				'USERNAME_FULL'		=> get_username_string('full', $row['user_id'], $row['username'], $row['user_colour']),				'USERNAME'			=> get_username_string('username', $row['user_id'], $row['username'], $row['user_colour']),				'USER_COLOR'		=> get_username_string('colour', $row['user_id'], $row['username'], $row['user_colour']),				'U_VIEW_PROFILE'	=> get_username_string('profile', $row['user_id'], $row['username'], $row['user_colour']),			));		}		$db->sql_freeresult($result);		$template->assign_vars(array(			'PM_IMG'		=> $user->img('icon_contact_pm', $user->lang['SEND_PRIVATE_MESSAGE']))		);	break;	case 'contact':		$page_title = $user->lang['IM_USER'];		$template_html = 'memberlist_im.html';		if (!$auth->acl_get('u_sendim'))		{			trigger_error('NOT_AUTHORISED');		}		$presence_img = '';		switch ($action)		{			case 'aim':				$lang = 'AIM';				$sql_field = 'user_aim';				$s_select = 'S_SEND_AIM';				$s_action = '';			break;			case 'msnm':				$lang = 'MSNM';				$sql_field = 'user_msnm';				$s_select = 'S_SEND_MSNM';				$s_action = '';			break;			case 'jabber':				$lang = 'JABBER';				$sql_field = 'user_jabber';				$s_select = (@extension_loaded('xml') && $config['jab_enable']) ? 'S_SEND_JABBER' : 'S_NO_SEND_JABBER';				$s_action = append_sid("{$phpbb_root_path}memberlist.$phpEx", "mode=contact&amp;action=$action&amp;u=$user_id");			break;			default:				trigger_error('NO_MODE', E_USER_ERROR);			break;		}		// Grab relevant data		$sql = "SELECT user_id, username, user_email, user_lang, $sql_field			FROM " . USERS_TABLE . "			WHERE user_id = $user_id				AND user_type IN (" . USER_NORMAL . ', ' . USER_FOUNDER . ')';		$result = $db->sql_query($sql);		$row = $db->sql_fetchrow($result);		$db->sql_freeresult($result);		if (!$row)		{			trigger_error('NO_USER');		}		else if (empty($row[$sql_field]))		{			trigger_error('IM_NO_DATA');		}		// Post data grab actions		switch ($action)		{			case 'jabber':				add_form_key('memberlist_messaging');				if ($submit && @extension_loaded('xml') && $config['jab_enable'])				{					if (check_form_key('memberlist_messaging'))					{						include_once($phpbb_root_path . 'includes/functions_messenger.' . $phpEx);						$subject = sprintf($user->lang['IM_JABBER_SUBJECT'], $user->data['username'], $config['server_name']);						$message = utf8_normalize_nfc(request_var('message', '', true));						if (empty($message))						{							trigger_error('EMPTY_MESSAGE_IM');						}						$messenger = new messenger(false);						$messenger->template('profile_send_im', $row['user_lang']);						$messenger->subject(htmlspecialchars_decode($subject));						$messenger->replyto($user->data['user_email']);						$messenger->im($row['user_jabber'], $row['username']);						$messenger->assign_vars(array(							'BOARD_CONTACT'	=> $config['board_contact'],							'FROM_USERNAME'	=> htmlspecialchars_decode($user->data['username']),							'TO_USERNAME'	=> htmlspecialchars_decode($row['username']),							'MESSAGE'		=> htmlspecialchars_decode($message))						);						$messenger->send(NOTIFY_IM);						$s_select = 'S_SENT_JABBER';					}					else					{						trigger_error('FORM_INVALID');					}				}			break;		}		// Send vars to the template		$template->assign_vars(array(			'IM_CONTACT'	=> $row[$sql_field],			'A_IM_CONTACT'	=> addslashes($row[$sql_field]),			'U_AIM_CONTACT'	=> ($action == 'aim') ? 'aim:addbuddy?screenname=' . urlencode($row[$sql_field]) : '',			'U_AIM_MESSAGE'	=> ($action == 'aim') ? 'aim:goim?screenname=' . urlencode($row[$sql_field]) . '&amp;message=' . urlencode($config['sitename']) : '',			'USERNAME'		=> $row['username'],			'CONTACT_NAME'	=> $row[$sql_field],			'SITENAME'		=> $config['sitename'],			'PRESENCE_IMG'		=> $presence_img,			'L_SEND_IM_EXPLAIN'	=> $user->lang['IM_' . $lang],			'L_IM_SENT_JABBER'	=> sprintf($user->lang['IM_SENT_JABBER'], $row['username']),			$s_select			=> true,			'S_IM_ACTION'		=> $s_action)		);	break;	case 'viewprofile':		// Display a profile		if ($user_id == ANONYMOUS && !$username)		{			trigger_error('NO_USER');		}		// Get user...		$sql = 'SELECT *			FROM ' . USERS_TABLE . '			WHERE ' . (($username) ? "username_clean = '" . $db->sql_escape(utf8_clean_string($username)) . "'" : "user_id = $user_id");		$result = $db->sql_query($sql);		$member = $db->sql_fetchrow($result);		$db->sql_freeresult($result);		if (!$member)		{			trigger_error('NO_USER');		}		// a_user admins and founder are able to view inactive users and bots to be able to manage them more easily		// Normal users are able to see at least users having only changed their profile settings but not yet reactivated.		if (!$auth->acl_get('a_user') && $user->data['user_type'] != USER_FOUNDER)		{			if ($member['user_type'] == USER_IGNORE)			{				trigger_error('NO_USER');			}			else if ($member['user_type'] == USER_INACTIVE && $member['user_inactive_reason'] != INACTIVE_PROFILE)			{				trigger_error('NO_USER');			}		}		$user_id = (int) $member['user_id'];		// Get group memberships		// Also get visiting user's groups to determine hidden group memberships if necessary.		$auth_hidden_groups = ($user_id === (int) $user->data['user_id'] || $auth->acl_gets('a_group', 'a_groupadd', 'a_groupdel')) ? true : false;		$sql_uid_ary = ($auth_hidden_groups) ? array($user_id) : array($user_id, (int) $user->data['user_id']);		// Do the SQL thang		$sql = 'SELECT g.group_id, g.group_name, g.group_type, ug.user_id			FROM ' . GROUPS_TABLE . ' g, ' . USER_GROUP_TABLE . ' ug			WHERE ' . $db->sql_in_set('ug.user_id', $sql_uid_ary) . '				AND g.group_id = ug.group_id				AND ug.user_pending = 0';		$result = $db->sql_query($sql);		// Divide data into profile data and current user data		$profile_groups = $user_groups = array();		while ($row = $db->sql_fetchrow($result))		{			$row['user_id'] = (int) $row['user_id'];			$row['group_id'] = (int) $row['group_id'];			if ($row['user_id'] == $user_id)			{				$profile_groups[] = $row;			}			else			{				$user_groups[$row['group_id']] = $row['group_id'];			}		}		$db->sql_freeresult($result);		// Filter out hidden groups and sort groups by name		$group_data = $group_sort = array();		foreach ($profile_groups as $row)		{			if ($row['group_type'] == GROUP_SPECIAL)			{				// Lookup group name in language dictionary				if (isset($user->lang['G_' . $row['group_name']]))				{					$row['group_name'] = $user->lang['G_' . $row['group_name']];				}			}			else if (!$auth_hidden_groups && $row['group_type'] == GROUP_HIDDEN && !isset($user_groups[$row['group_id']]))			{				// Skip over hidden groups the user cannot see				continue;			}			$group_sort[$row['group_id']] = utf8_clean_string($row['group_name']);			$group_data[$row['group_id']] = $row;		}		unset($profile_groups);		unset($user_groups);		asort($group_sort);		$group_options = '';		foreach ($group_sort as $group_id => $null)		{			$row = $group_data[$group_id];			$group_options .= '<option value="' . $row['group_id'] . '"' . (($row['group_id'] == $member['group_id']) ? ' selected="selected"' : '') . '>' . $row['group_name'] . '</option>';		}		unset($group_data);		unset($group_sort);		// What colour is the zebra		$sql = 'SELECT friend, foe			FROM ' . ZEBRA_TABLE . "			WHERE zebra_id = $user_id				AND user_id = {$user->data['user_id']}";		$result = $db->sql_query($sql);		$row = $db->sql_fetchrow($result);		$foe = ($row['foe']) ? true : false;		$friend = ($row['friend']) ? true : false;		$db->sql_freeresult($result);		if ($config['load_onlinetrack'])		{			$sql = 'SELECT MAX(session_time) AS session_time, MIN(session_viewonline) AS session_viewonline				FROM ' . SESSIONS_TABLE . "				WHERE session_user_id = $user_id";			$result = $db->sql_query($sql);			$row = $db->sql_fetchrow($result);			$db->sql_freeresult($result);			$member['session_time'] = (isset($row['session_time'])) ? $row['session_time'] : 0;			$member['session_viewonline'] = (isset($row['session_viewonline'])) ? $row['session_viewonline'] :	0;			unset($row);		}		if ($config['load_user_activity'])		{			display_user_activity($member);		}		// Do the relevant calculations		$memberdays = max(1, round((time() - $member['user_regdate']) / 86400));		$posts_per_day = $member['user_posts'] / $memberdays;		$percentage = ($config['num_posts']) ? min(100, ($member['user_posts'] / $config['num_posts']) * 100) : 0;		if ($member['user_sig'])		{			$member['user_sig'] = censor_text($member['user_sig']);			if ($member['user_sig_bbcode_bitfield'])			{				include_once($phpbb_root_path . 'includes/bbcode.' . $phpEx);				$bbcode = new bbcode();				$bbcode->bbcode_second_pass($member['user_sig'], $member['user_sig_bbcode_uid'], $member['user_sig_bbcode_bitfield']);			}			$member['user_sig'] = bbcode_nl2br($member['user_sig']);			$member['user_sig'] = smiley_text($member['user_sig']);		}		$poster_avatar = get_user_avatar($member['user_avatar'], $member['user_avatar_type'], $member['user_avatar_width'], $member['user_avatar_height']);		// We need to check if the modules 'zebra' ('friends' & 'foes' mode),  'notes' ('user_notes' mode) and  'warn' ('warn_user' mode) are accessible to decide if we can display appropriate links		$zebra_enabled = $friends_enabled = $foes_enabled = $user_notes_enabled = $warn_user_enabled = false;		// Only check if the user is logged in		if ($user->data['is_registered'])		{			if (!class_exists('p_master'))			{				include($phpbb_root_path . 'includes/functions_module.' . $phpEx);			}			$module = new p_master();			$module->list_modules('ucp');			$module->list_modules('mcp');			$user_notes_enabled = ($module->loaded('notes', 'user_notes')) ? true : false;			$warn_user_enabled = ($module->loaded('warn', 'warn_user')) ? true : false;			$zebra_enabled = ($module->loaded('zebra')) ? true : false;			$friends_enabled = ($module->loaded('zebra', 'friends')) ? true : false;			$foes_enabled = ($module->loaded('zebra', 'foes')) ? true : false;			unset($module);		}		$template->assign_vars(show_profile($member, $user_notes_enabled, $warn_user_enabled));		// Custom Profile Fields		$profile_fields = array();		if ($config['load_cpf_viewprofile'])		{			include_once($phpbb_root_path . 'includes/functions_profile_fields.' . $phpEx);			$cp = new custom_profile();			$profile_fields = $cp->generate_profile_fields_template('grab', $user_id);			$profile_fields = (isset($profile_fields[$user_id])) ? $cp->generate_profile_fields_template('show', false, $profile_fields[$user_id]) : array();		}		// If the user has m_approve permission or a_user permission, then list then display unapproved posts		if ($auth->acl_getf_global('m_approve') || $auth->acl_get('a_user'))		{			$sql = 'SELECT COUNT(post_id) as posts_in_queue				FROM ' . POSTS_TABLE . '				WHERE poster_id = ' . $user_id . '					AND post_approved = 0';			$result = $db->sql_query($sql);			$member['posts_in_queue'] = (int) $db->sql_fetchfield('posts_in_queue');			$db->sql_freeresult($result);		}		else		{			$member['posts_in_queue'] = 0;		}		$template->assign_vars(array(			'L_POSTS_IN_QUEUE'	=> $user->lang('NUM_POSTS_IN_QUEUE', $member['posts_in_queue']),			'POSTS_DAY'			=> sprintf($user->lang['POST_DAY'], $posts_per_day),			'POSTS_PCT'			=> sprintf($user->lang['POST_PCT'], $percentage),			'OCCUPATION'	=> (!empty($member['user_occ'])) ? censor_text($member['user_occ']) : '',			'INTERESTS'		=> (!empty($member['user_interests'])) ? censor_text($member['user_interests']) : '',			'SIGNATURE'		=> $member['user_sig'],			'POSTS_IN_QUEUE'=> $member['posts_in_queue'],			'AVATAR_IMG'	=> $poster_avatar,			'PM_IMG'		=> $user->img('icon_contact_pm', $user->lang['SEND_PRIVATE_MESSAGE']),			'EMAIL_IMG'		=> $user->img('icon_contact_email', $user->lang['EMAIL']),			'WWW_IMG'		=> $user->img('icon_contact_www', $user->lang['WWW']),			'ICQ_IMG'		=> $user->img('icon_contact_icq', $user->lang['ICQ']),			'AIM_IMG'		=> $user->img('icon_contact_aim', $user->lang['AIM']),			'MSN_IMG'		=> $user->img('icon_contact_msnm', $user->lang['MSNM']),			'YIM_IMG'		=> $user->img('icon_contact_yahoo', $user->lang['YIM']),			'JABBER_IMG'	=> $user->img('icon_contact_jabber', $user->lang['JABBER']),			'SEARCH_IMG'	=> $user->img('icon_user_search', $user->lang['SEARCH']),			'S_PROFILE_ACTION'	=> append_sid("{$phpbb_root_path}memberlist.$phpEx", 'mode=group'),			'S_GROUP_OPTIONS'	=> $group_options,			'S_CUSTOM_FIELDS'	=> (isset($profile_fields['row']) && sizeof($profile_fields['row'])) ? true : false,			'U_USER_ADMIN'			=> ($auth->acl_get('a_user')) ? append_sid("{$phpbb_root_path}adm/index.$phpEx", 'i=users&amp;mode=overview&amp;u=' . $user_id, true, $user->session_id) : '',			'U_USER_BAN'			=> ($auth->acl_get('m_ban') && $user_id != $user->data['user_id']) ? append_sid("{$phpbb_root_path}mcp.$phpEx", 'i=ban&amp;mode=user&amp;u=' . $user_id, true, $user->session_id) : '',			'U_MCP_QUEUE'			=> ($auth->acl_getf_global('m_approve')) ? append_sid("{$phpbb_root_path}mcp.$phpEx", 'i=queue', true, $user->session_id) : '',			'U_SWITCH_PERMISSIONS'	=> ($auth->acl_get('a_switchperm') && $user->data['user_id'] != $user_id) ? append_sid("{$phpbb_root_path}ucp.$phpEx", "mode=switch_perm&amp;u={$user_id}&amp;hash=" . generate_link_hash('switchperm')) : '',			'S_USER_NOTES'		=> ($user_notes_enabled) ? true : false,			'S_WARN_USER'		=> ($warn_user_enabled) ? true : false,			'S_ZEBRA'			=> ($user->data['user_id'] != $user_id && $user->data['is_registered'] && $zebra_enabled) ? true : false,			'U_ADD_FRIEND'		=> (!$friend && !$foe && $friends_enabled) ? append_sid("{$phpbb_root_path}ucp.$phpEx", 'i=zebra&amp;add=' . urlencode(htmlspecialchars_decode($member['username']))) : '',			'U_ADD_FOE'			=> (!$friend && !$foe && $foes_enabled) ? append_sid("{$phpbb_root_path}ucp.$phpEx", 'i=zebra&amp;mode=foes&amp;add=' . urlencode(htmlspecialchars_decode($member['username']))) : '',			'U_REMOVE_FRIEND'	=> ($friend && $friends_enabled) ? append_sid("{$phpbb_root_path}ucp.$phpEx", 'i=zebra&amp;remove=1&amp;usernames[]=' . $user_id) : '',			'U_REMOVE_FOE'		=> ($foe && $foes_enabled) ? append_sid("{$phpbb_root_path}ucp.$phpEx", 'i=zebra&amp;remove=1&amp;mode=foes&amp;usernames[]=' . $user_id) : '',		));		if (!empty($profile_fields['row']))		{			$template->assign_vars($profile_fields['row']);		}		if (!empty($profile_fields['blockrow']))		{			foreach ($profile_fields['blockrow'] as $field_data)			{				$template->assign_block_vars('custom_fields', $field_data);			}		}		// Inactive reason/account?		if ($member['user_type'] == USER_INACTIVE)		{			$user->add_lang('acp/common');			$inactive_reason = $user->lang['INACTIVE_REASON_UNKNOWN'];			switch ($member['user_inactive_reason'])			{				case INACTIVE_REGISTER:					$inactive_reason = $user->lang['INACTIVE_REASON_REGISTER'];				break;				case INACTIVE_PROFILE:					$inactive_reason = $user->lang['INACTIVE_REASON_PROFILE'];				break;				case INACTIVE_MANUAL:					$inactive_reason = $user->lang['INACTIVE_REASON_MANUAL'];				break;				case INACTIVE_REMIND:					$inactive_reason = $user->lang['INACTIVE_REASON_REMIND'];				break;			}			$template->assign_vars(array(				'S_USER_INACTIVE'		=> true,				'USER_INACTIVE_REASON'	=> $inactive_reason)			);		}		// Now generate page title		$page_title = sprintf($user->lang['VIEWING_PROFILE'], $member['username']);		$template_html = 'memberlist_view.html';	break;	case 'email':		// Send an email		$page_title = $user->lang['SEND_EMAIL'];		$template_html = 'memberlist_email.html';		add_form_key('memberlist_email');		if (!$config['email_enable'])		{			trigger_error('EMAIL_DISABLED');		}		if (!$auth->acl_get('u_sendemail'))		{			trigger_error('NO_EMAIL');		}		// Are we trying to abuse the facility?		if (time() - $user->data['user_emailtime'] < $config['flood_interval'])		{			trigger_error('FLOOD_EMAIL_LIMIT');		}		// Determine action...		$user_id = request_var('u', 0);		$topic_id = request_var('t', 0);		// Send email to user...		if ($user_id)		{			if ($user_id == ANONYMOUS || !$config['board_email_form'])			{				trigger_error('NO_EMAIL');			}			// Get the appropriate username, etc.			$sql = 'SELECT username, user_email, user_allow_viewemail, user_lang, user_jabber, user_notify_type				FROM ' . USERS_TABLE . "				WHERE user_id = $user_id					AND user_type IN (" . USER_NORMAL . ', ' . USER_FOUNDER . ')';			$result = $db->sql_query($sql);			$row = $db->sql_fetchrow($result);			$db->sql_freeresult($result);			if (!$row)			{				trigger_error('NO_USER');			}			// Can we send email to this user?			if (!$row['user_allow_viewemail'] && !$auth->acl_get('a_user'))			{				trigger_error('NO_EMAIL');			}		}		else if ($topic_id)		{			// Send topic heads-up to email address			$sql = 'SELECT forum_id, topic_title				FROM ' . TOPICS_TABLE . "				WHERE topic_id = $topic_id";			$result = $db->sql_query($sql);			$row = $db->sql_fetchrow($result);			$db->sql_freeresult($result);			if (!$row)			{				trigger_error('NO_TOPIC');			}			if ($row['forum_id'])			{				if (!$auth->acl_get('f_read', $row['forum_id']))				{					trigger_error('SORRY_AUTH_READ');				}				if (!$auth->acl_get('f_email', $row['forum_id']))				{					trigger_error('NO_EMAIL');				}			}			else			{				// If global announcement, we need to check if the user is able to at least read and email in one forum...				if (!$auth->acl_getf_global('f_read'))				{					trigger_error('SORRY_AUTH_READ');				}				if (!$auth->acl_getf_global('f_email'))				{					trigger_error('NO_EMAIL');				}			}		}		else		{			trigger_error('NO_EMAIL');		}		$error = array();		$name		= utf8_normalize_nfc(request_var('name', '', true));		$email		= request_var('email', '');		$email_lang = request_var('lang', $config['default_lang']);		$subject	= utf8_normalize_nfc(request_var('subject', '', true));		$message	= utf8_normalize_nfc(request_var('message', '', true));		$cc			= (isset($_POST['cc_email'])) ? true : false;		$submit		= (isset($_POST['submit'])) ? true : false;		if ($submit)		{			if (!check_form_key('memberlist_email'))			{				$error[] = 'FORM_INVALID';			}			if ($user_id)			{				if (!$subject)				{					$error[] = $user->lang['EMPTY_SUBJECT_EMAIL'];				}				if (!$message)				{					$error[] = $user->lang['EMPTY_MESSAGE_EMAIL'];				}				$name = $row['username'];				$email_lang = $row['user_lang'];				$email = $row['user_email'];			}			else			{				if (!$email || !preg_match('/^' . get_preg_expression('email') . '$/i', $email))				{					$error[] = $user->lang['EMPTY_ADDRESS_EMAIL'];				}				if (!$name)				{					$error[] = $user->lang['EMPTY_NAME_EMAIL'];				}			}			if (!sizeof($error))			{				$sql = 'UPDATE ' . USERS_TABLE . '					SET user_emailtime = ' . time() . '					WHERE user_id = ' . $user->data['user_id'];				$result = $db->sql_query($sql);				include_once($phpbb_root_path . 'includes/functions_messenger.' . $phpEx);				$messenger = new messenger(false);				$email_tpl = ($user_id) ? 'profile_send_email' : 'email_notify';				$mail_to_users = array();				$mail_to_users[] = array(					'email_lang'		=> $email_lang,					'email'				=> $email,					'name'				=> $name,					'username'			=> ($user_id) ? $row['username'] : '',					'to_name'			=> $name,					'user_jabber'		=> ($user_id) ? $row['user_jabber'] : '',					'user_notify_type'	=> ($user_id) ? $row['user_notify_type'] : NOTIFY_EMAIL,					'topic_title'		=> (!$user_id) ? $row['topic_title'] : '',					'forum_id'			=> (!$user_id) ? $row['forum_id'] : 0,				);				// Ok, now the same email if CC specified, but without exposing the users email address				if ($cc)				{					$mail_to_users[] = array(						'email_lang'		=> $user->data['user_lang'],						'email'				=> $user->data['user_email'],						'name'				=> $user->data['username'],						'username'			=> $user->data['username'],						'to_name'			=> $name,						'user_jabber'		=> $user->data['user_jabber'],						'user_notify_type'	=> ($user_id) ? $user->data['user_notify_type'] : NOTIFY_EMAIL,						'topic_title'		=> (!$user_id) ? $row['topic_title'] : '',						'forum_id'			=> (!$user_id) ? $row['forum_id'] : 0,					);				}				foreach ($mail_to_users as $row)				{					$messenger->template($email_tpl, $row['email_lang']);					$messenger->replyto($user->data['user_email']);					$messenger->to($row['email'], $row['name']);					if ($user_id)					{						$messenger->subject(htmlspecialchars_decode($subject));						$messenger->im($row['user_jabber'], $row['username']);						$notify_type = $row['user_notify_type'];					}					else					{						$notify_type = NOTIFY_EMAIL;					}					$messenger->anti_abuse_headers($config, $user);					$messenger->assign_vars(array(						'BOARD_CONTACT'	=> $config['board_contact'],						'TO_USERNAME'	=> htmlspecialchars_decode($row['to_name']),						'FROM_USERNAME'	=> htmlspecialchars_decode($user->data['username']),						'MESSAGE'		=> htmlspecialchars_decode($message))					);					if ($topic_id)					{						$messenger->assign_vars(array(							'TOPIC_NAME'	=> htmlspecialchars_decode($row['topic_title']),							'U_TOPIC'		=> generate_board_url() . "/viewtopic.$phpEx?f=" . $row['forum_id'] . "&t=$topic_id")						);					}					$messenger->send($notify_type);				}				meta_refresh(3, append_sid("{$phpbb_root_path}index.$phpEx"));				$message = ($user_id) ? sprintf($user->lang['RETURN_INDEX'], '<a href="' . append_sid("{$phpbb_root_path}index.$phpEx") . '">', '</a>') : sprintf($user->lang['RETURN_TOPIC'],  '<a href="' . append_sid("{$phpbb_root_path}viewtopic.$phpEx", "f={$row['forum_id']}&amp;t=$topic_id") . '">', '</a>');				trigger_error($user->lang['EMAIL_SENT'] . '<br /><br />' . $message);			}		}		if ($user_id)		{			$template->assign_vars(array(				'S_SEND_USER'	=> true,				'USERNAME'		=> $row['username'],				'L_EMAIL_BODY_EXPLAIN'	=> $user->lang['EMAIL_BODY_EXPLAIN'],				'S_POST_ACTION'			=> append_sid("{$phpbb_root_path}memberlist.$phpEx", 'mode=email&amp;u=' . $user_id))			);		}		else		{			$template->assign_vars(array(				'EMAIL'				=> $email,				'NAME'				=> $name,				'S_LANG_OPTIONS'	=> language_select($email_lang),				'L_EMAIL_BODY_EXPLAIN'	=> $user->lang['EMAIL_TOPIC_EXPLAIN'],				'S_POST_ACTION'			=> append_sid("{$phpbb_root_path}memberlist.$phpEx", 'mode=email&amp;t=' . $topic_id))			);		}		$template->assign_vars(array(			'ERROR_MESSAGE'		=> (sizeof($error)) ? implode('<br />', $error) : '',			'SUBJECT'			=> $subject,			'MESSAGE'			=> $message,			)		);	break;	case 'group':	default:		// The basic memberlist		$page_title = $user->lang['MEMBERLIST'];		$template_html = 'memberlist_body.html';		// Sorting		$sort_key_text = array('a' => $user->lang['SORT_USERNAME'], 'b' => $user->lang['SORT_LOCATION'], 'c' => $user->lang['SORT_JOINED'], 'd' => $user->lang['SORT_POST_COUNT'], 'f' => $user->lang['WEBSITE'], 'g' => $user->lang['ICQ'], 'h' => $user->lang['AIM'], 'i' => $user->lang['MSNM'], 'j' => $user->lang['YIM'], 'k' => $user->lang['JABBER']);		$sort_key_sql = array('a' => 'u.username_clean', 'b' => 'u.user_from', 'c' => 'u.user_regdate', 'd' => 'u.user_posts', 'f' => 'u.user_website', 'g' => 'u.user_icq', 'h' => 'u.user_aim', 'i' => 'u.user_msnm', 'j' => 'u.user_yim', 'k' => 'u.user_jabber');		if ($auth->acl_get('a_user'))		{			$sort_key_text['e'] = $user->lang['SORT_EMAIL'];			$sort_key_sql['e'] = 'u.user_email';		}		if ($auth->acl_get('u_viewonline'))		{			$sort_key_text['l'] = $user->lang['SORT_LAST_ACTIVE'];			$sort_key_sql['l'] = 'u.user_lastvisit';		}		$sort_key_text['m'] = $user->lang['SORT_RANK'];		$sort_key_sql['m'] = 'u.user_rank';		$sort_dir_text = array('a' => $user->lang['ASCENDING'], 'd' => $user->lang['DESCENDING']);		$s_sort_key = '';		foreach ($sort_key_text as $key => $value)		{			$selected = ($sort_key == $key) ? ' selected="selected"' : '';			$s_sort_key .= '<option value="' . $key . '"' . $selected . '>' . $value . '</option>';		}		$s_sort_dir = '';		foreach ($sort_dir_text as $key => $value)		{			$selected = ($sort_dir == $key) ? ' selected="selected"' : '';			$s_sort_dir .= '<option value="' . $key . '"' . $selected . '>' . $value . '</option>';		}		// Additional sorting options for user search ... if search is enabled, if not		// then only admins can make use of this (for ACP functionality)		$sql_select = $sql_where_data = $sql_from = $sql_where = $order_by = '';		$form			= request_var('form', '');		$field			= request_var('field', '');		$select_single 	= request_var('select_single', false);		// Search URL parameters, if any of these are in the URL we do a search		$search_params = array('username', 'email', 'icq', 'aim', 'yahoo', 'msn', 'jabber', 'search_group_id', 'joined_select', 'active_select', 'count_select', 'joined', 'active', 'count', 'ip');		// We validate form and field here, only id/class allowed		$form = (!preg_match('/^[a-z0-9_-]+$/i', $form)) ? '' : $form;		$field = (!preg_match('/^[a-z0-9_-]+$/i', $field)) ? '' : $field;		if (($mode == 'searchuser' || sizeof(array_intersect(array_keys($_GET), $search_params)) > 0) && ($config['load_search'] || $auth->acl_get('a_')))		{			$username	= request_var('username', '', true);			$email		= strtolower(request_var('email', ''));			$icq		= request_var('icq', '');			$aim		= request_var('aim', '');			$yahoo		= request_var('yahoo', '');			$msn		= request_var('msn', '');			$jabber		= request_var('jabber', '');			$search_group_id	= request_var('search_group_id', 0);			// when using these, make sure that we actually have values defined in $find_key_match			$joined_select	= request_var('joined_select', 'lt');			$active_select	= request_var('active_select', 'lt');			$count_select	= request_var('count_select', 'eq');			$joined			= explode('-', request_var('joined', ''));			$active			= explode('-', request_var('active', ''));			$count			= (request_var('count', '') !== '') ? request_var('count', 0) : '';			$ipdomain		= request_var('ip', '');			$find_key_match = array('lt' => '<', 'gt' => '>', 'eq' => '=');			$find_count = array('lt' => $user->lang['LESS_THAN'], 'eq' => $user->lang['EQUAL_TO'], 'gt' => $user->lang['MORE_THAN']);			$s_find_count = '';			foreach ($find_count as $key => $value)			{				$selected = ($count_select == $key) ? ' selected="selected"' : '';				$s_find_count .= '<option value="' . $key . '"' . $selected . '>' . $value . '</option>';			}			$find_time = array('lt' => $user->lang['BEFORE'], 'gt' => $user->lang['AFTER']);			$s_find_join_time = '';			foreach ($find_time as $key => $value)			{				$selected = ($joined_select == $key) ? ' selected="selected"' : '';				$s_find_join_time .= '<option value="' . $key . '"' . $selected . '>' . $value . '</option>';			}			$s_find_active_time = '';			foreach ($find_time as $key => $value)			{				$selected = ($active_select == $key) ? ' selected="selected"' : '';				$s_find_active_time .= '<option value="' . $key . '"' . $selected . '>' . $value . '</option>';			}			$sql_where .= ($username) ? ' AND u.username_clean ' . $db->sql_like_expression(str_replace('*', $db->any_char, utf8_clean_string($username))) : '';			$sql_where .= ($auth->acl_get('a_user') && $email) ? ' AND u.user_email ' . $db->sql_like_expression(str_replace('*', $db->any_char, $email)) . ' ' : '';			$sql_where .= ($icq) ? ' AND u.user_icq ' . $db->sql_like_expression(str_replace('*', $db->any_char, $icq)) . ' ' : '';			$sql_where .= ($aim) ? ' AND u.user_aim ' . $db->sql_like_expression(str_replace('*', $db->any_char, $aim)) . ' ' : '';			$sql_where .= ($yahoo) ? ' AND u.user_yim ' . $db->sql_like_expression(str_replace('*', $db->any_char, $yahoo)) . ' ' : '';			$sql_where .= ($msn) ? ' AND u.user_msnm ' . $db->sql_like_expression(str_replace('*', $db->any_char, $msn)) . ' ' : '';			$sql_where .= ($jabber) ? ' AND u.user_jabber ' . $db->sql_like_expression(str_replace('*', $db->any_char, $jabber)) . ' ' : '';			$sql_where .= (is_numeric($count) && isset($find_key_match[$count_select])) ? ' AND u.user_posts ' . $find_key_match[$count_select] . ' ' . (int) $count . ' ' : '';			if (isset($find_key_match[$joined_select]) && sizeof($joined) == 3)			{				// Before PHP 5.1 an error value -1 can be returned instead of false.				// Theoretically gmmktime() can also legitimately return -1 as an actual timestamp.				// But since we do not pass the $second parameter to gmmktime(),				// an actual unix timestamp -1 cannot be returned in this case.				// Thus we can check whether it is -1 and treat -1 as an error.				$joined_time = gmmktime(0, 0, 0, (int) $joined[1], (int) $joined[2], (int) $joined[0]);				if ($joined_time !== false && $joined_time !== -1)				{					$sql_where .= " AND u.user_regdate " . $find_key_match[$joined_select] . ' ' . $joined_time;				}			}			if (isset($find_key_match[$active_select]) && sizeof($active) == 3 && $auth->acl_get('u_viewonline'))			{				$active_time = gmmktime(0, 0, 0, (int) $active[1], (int) $active[2], (int) $active[0]);				if ($active_time !== false && $active_time !== -1)				{					$sql_where .= " AND u.user_lastvisit " . $find_key_match[$active_select] . ' ' . $active_time;				}			}			$sql_where .= ($search_group_id) ? " AND u.user_id = ug.user_id AND ug.group_id = $search_group_id AND ug.user_pending = 0 " : '';			if ($search_group_id)			{				$sql_from = ', ' . USER_GROUP_TABLE . ' ug ';			}			if ($ipdomain && $auth->acl_getf_global('m_info'))			{				if (strspn($ipdomain, 'abcdefghijklmnopqrstuvwxyz'))				{					$hostnames = gethostbynamel($ipdomain);					if ($hostnames !== false)					{						$ips = "'" . implode('\', \'', array_map(array($db, 'sql_escape'), preg_replace('#([0-9]{1,3}\.[0-9]{1,3}[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3})#', "\\1", gethostbynamel($ipdomain)))) . "'";					}					else					{						$ips = false;					}				}				else				{					$ips = "'" . str_replace('*', '%', $db->sql_escape($ipdomain)) . "'";				}				if ($ips === false)				{					// A minor fudge but it does the job :D					$sql_where .= " AND u.user_id = 0";				}				else				{					$ip_forums = array_keys($auth->acl_getf('m_info', true));					$sql = 'SELECT DISTINCT poster_id						FROM ' . POSTS_TABLE . '						WHERE poster_ip ' . ((strpos($ips, '%') !== false) ? 'LIKE' : 'IN') . " ($ips)							AND forum_id IN (0, " . implode(', ', $ip_forums) . ')';					$result = $db->sql_query($sql);					if ($row = $db->sql_fetchrow($result))					{						$ip_sql = array();						do						{							$ip_sql[] = $row['poster_id'];						}						while ($row = $db->sql_fetchrow($result));						$sql_where .= ' AND ' . $db->sql_in_set('u.user_id', $ip_sql);					}					else					{						// A minor fudge but it does the job :D						$sql_where .= " AND u.user_id = 0";					}					unset($ip_forums);					$db->sql_freeresult($result);				}			}		}		$first_char = request_var('first_char', '');		if ($first_char == 'other')		{			for ($i = 97; $i < 123; $i++)			{				$sql_where .= ' AND u.username_clean NOT ' . $db->sql_like_expression(chr($i) . $db->any_char);			}		}		else if ($first_char)		{			$sql_where .= ' AND u.username_clean ' . $db->sql_like_expression(substr($first_char, 0, 1) . $db->any_char);		}		// Are we looking at a usergroup? If so, fetch additional info		// and further restrict the user info query		if ($mode == 'group')		{			// We JOIN here to save a query for determining membership for hidden groups. ;)			$sql = 'SELECT g.*, ug.user_id				FROM ' . GROUPS_TABLE . ' g				LEFT JOIN ' . USER_GROUP_TABLE . ' ug ON (ug.user_pending = 0 AND ug.user_id = ' . $user->data['user_id'] . " AND ug.group_id = $group_id)				WHERE g.group_id = $group_id";			$result = $db->sql_query($sql);			$group_row = $db->sql_fetchrow($result);			$db->sql_freeresult($result);			if (!$group_row)			{				trigger_error('NO_GROUP');			}			switch ($group_row['group_type'])			{				case GROUP_OPEN:					$group_row['l_group_type'] = 'OPEN';				break;				case GROUP_CLOSED:					$group_row['l_group_type'] = 'CLOSED';				break;				case GROUP_HIDDEN:					$group_row['l_group_type'] = 'HIDDEN';					// Check for membership or special permissions					if (!$auth->acl_gets('a_group', 'a_groupadd', 'a_groupdel') && $group_row['user_id'] != $user->data['user_id'])					{						trigger_error('NO_GROUP');					}				break;				case GROUP_SPECIAL:					$group_row['l_group_type'] = 'SPECIAL';				break;				case GROUP_FREE:					$group_row['l_group_type'] = 'FREE';				break;			}			// Misusing the avatar function for displaying group avatars...			$avatar_img = get_user_avatar($group_row['group_avatar'], $group_row['group_avatar_type'], $group_row['group_avatar_width'], $group_row['group_avatar_height'], 'GROUP_AVATAR');			$rank_title = $rank_img = $rank_img_src = '';			if ($group_row['group_rank'])			{				if (isset($ranks['special'][$group_row['group_rank']]))				{					$rank_title = $ranks['special'][$group_row['group_rank']]['rank_title'];				}				$rank_img = (!empty($ranks['special'][$group_row['group_rank']]['rank_image'])) ? '<img src="' . $config['ranks_path'] . '/' . $ranks['special'][$group_row['group_rank']]['rank_image'] . '" alt="' . $ranks['special'][$group_row['group_rank']]['rank_title'] . '" title="' . $ranks['special'][$group_row['group_rank']]['rank_title'] . '" /><br />' : '';				$rank_img_src = (!empty($ranks['special'][$group_row['group_rank']]['rank_image'])) ? $config['ranks_path'] . '/' . $ranks['special'][$group_row['group_rank']]['rank_image'] : '';			}			else			{				$rank_title = '';				$rank_img = '';				$rank_img_src = '';			}			$template->assign_vars(array(				'GROUP_DESC'	=> generate_text_for_display($group_row['group_desc'], $group_row['group_desc_uid'], $group_row['group_desc_bitfield'], $group_row['group_desc_options']),				'GROUP_NAME'	=> ($group_row['group_type'] == GROUP_SPECIAL) ? $user->lang['G_' . $group_row['group_name']] : $group_row['group_name'],				'GROUP_COLOR'	=> $group_row['group_colour'],				'GROUP_TYPE'	=> $user->lang['GROUP_IS_' . $group_row['l_group_type']],				'GROUP_RANK'	=> $rank_title,				'AVATAR_IMG'	=> $avatar_img,				'RANK_IMG'		=> $rank_img,				'RANK_IMG_SRC'	=> $rank_img_src,				'U_PM'			=> ($auth->acl_get('u_sendpm') && $auth->acl_get('u_masspm_group') && $group_row['group_receive_pm'] && $config['allow_privmsg'] && $config['allow_mass_pm']) ? append_sid("{$phpbb_root_path}ucp.$phpEx", 'i=pm&amp;mode=compose&amp;g=' . $group_id) : '',)			);			$sql_select = ', ug.group_leader';			$sql_from = ', ' . USER_GROUP_TABLE . ' ug ';			$order_by = 'ug.group_leader DESC, ';			$sql_where .= " AND ug.user_pending = 0 AND u.user_id = ug.user_id AND ug.group_id = $group_id";			$sql_where_data = " AND u.user_id = ug.user_id AND ug.group_id = $group_id";		}		// Sorting and order		if (!isset($sort_key_sql[$sort_key]))		{			$sort_key = $default_key;		}		$order_by .= $sort_key_sql[$sort_key] . ' ' . (($sort_dir == 'a') ? 'ASC' : 'DESC');		// Unfortunately we must do this here for sorting by rank, else the sort order is applied wrongly		if ($sort_key == 'm')		{			$order_by .= ', u.user_posts DESC';		}		// Count the users ...		if ($sql_where)		{			$sql = 'SELECT COUNT(u.user_id) AS total_users				FROM ' . USERS_TABLE . " u$sql_from				WHERE u.user_type IN (" . USER_NORMAL . ', ' . USER_FOUNDER . ")				$sql_where";			$result = $db->sql_query($sql);			$total_users = (int) $db->sql_fetchfield('total_users');			$db->sql_freeresult($result);		}		else		{			$total_users = $config['num_users'];		}		// Build a relevant pagination_url		$params = $sort_params = array();		// We do not use request_var() here directly to save some calls (not all variables are set)		$check_params = array(			'g'				=> array('g', 0),			'sk'			=> array('sk', $default_key),			'sd'			=> array('sd', 'a'),			'form'			=> array('form', ''),			'field'			=> array('field', ''),			'select_single'	=> array('select_single', $select_single),			'username'		=> array('username', '', true),			'email'			=> array('email', ''),			'icq'			=> array('icq', ''),			'aim'			=> array('aim', ''),			'yahoo'			=> array('yahoo', ''),			'msn'			=> array('msn', ''),			'jabber'		=> array('jabber', ''),			'search_group_id'	=> array('search_group_id', 0),			'joined_select'	=> array('joined_select', 'lt'),			'active_select'	=> array('active_select', 'lt'),			'count_select'	=> array('count_select', 'eq'),			'joined'		=> array('joined', ''),			'active'		=> array('active', ''),			'count'			=> (request_var('count', '') !== '') ? array('count', 0) : array('count', ''),			'ip'			=> array('ip', ''),			'first_char'	=> array('first_char', ''),		);		$u_first_char_params = array();		foreach ($check_params as $key => $call)		{			if (!isset($_REQUEST[$key]))			{				continue;			}			$param = call_user_func_array('request_var', $call);			$param = urlencode($key) . '=' . ((is_string($param)) ? urlencode($param) : $param);			$params[] = $param;			if ($key != 'first_char')			{				$u_first_char_params[] = $param;			}			if ($key != 'sk' && $key != 'sd')			{				$sort_params[] = $param;			}		}		$u_hide_find_member = append_sid("{$phpbb_root_path}memberlist.$phpEx", "start=$start" . (!empty($params) ? '&amp;' . implode('&amp;', $params) : ''));		if ($mode)		{			$params[] = "mode=$mode";		}		$sort_params[] = "mode=$mode";		$pagination_url = append_sid("{$phpbb_root_path}memberlist.$phpEx", implode('&amp;', $params));		$sort_url = append_sid("{$phpbb_root_path}memberlist.$phpEx", implode('&amp;', $sort_params));		unset($search_params, $sort_params);		$u_first_char_params = implode('&amp;', $u_first_char_params);		$u_first_char_params .= ($u_first_char_params) ? '&amp;' : '';		$first_characters = array();		$first_characters[''] = $user->lang['ALL'];		for ($i = 97; $i < 123; $i++)		{			$first_characters[chr($i)] = chr($i - 32);		}		$first_characters['other'] = $user->lang['OTHER'];		foreach ($first_characters as $char => $desc)		{			$template->assign_block_vars('first_char', array(				'DESC'			=> $desc,				'VALUE'			=> $char,				'S_SELECTED'	=> ($first_char == $char) ? true : false,				'U_SORT'		=> append_sid("{$phpbb_root_path}memberlist.$phpEx", $u_first_char_params . 'first_char=' . $char) . '#memberlist',			));		}		// Some search user specific data		if ($mode == 'searchuser' && ($config['load_search'] || $auth->acl_get('a_')))		{			$group_selected = request_var('search_group_id', 0);			$s_group_select = '<option value="0"' . ((!$group_selected) ? ' selected="selected"' : '') . '>&nbsp;</option>';			$group_ids = array();			/**			* @todo add this to a separate function (function is responsible for returning the groups the user is able to see based on the users group membership)			*/			if ($auth->acl_gets('a_group', 'a_groupadd', 'a_groupdel'))			{				$sql = 'SELECT group_id, group_name, group_type					FROM ' . GROUPS_TABLE;				if (!$config['coppa_enable'])				{					$sql .= " WHERE group_name <> 'REGISTERED_COPPA'";				}				$sql .= ' ORDER BY group_name ASC';			}			else			{				$sql = 'SELECT g.group_id, g.group_name, g.group_type					FROM ' . GROUPS_TABLE . ' g					LEFT JOIN ' . USER_GROUP_TABLE . ' ug						ON (							g.group_id = ug.group_id							AND ug.user_id = ' . $user->data['user_id'] . '							AND ug.user_pending = 0						)					WHERE (g.group_type <> ' . GROUP_HIDDEN . ' OR ug.user_id = ' . $user->data['user_id'] . ')';				if (!$config['coppa_enable'])				{					$sql .= " AND g.group_name <> 'REGISTERED_COPPA'";				}				$sql .= ' ORDER BY g.group_name ASC';			}			$result = $db->sql_query($sql);			while ($row = $db->sql_fetchrow($result))			{				$group_ids[] = $row['group_id'];				$s_group_select .= '<option value="' . $row['group_id'] . '"' . (($group_selected == $row['group_id']) ? ' selected="selected"' : '') . '>' . (($row['group_type'] == GROUP_SPECIAL) ? $user->lang['G_' . $row['group_name']] : $row['group_name']) . '</option>';			}			$db->sql_freeresult($result);			if ($group_selected !== 0 && !in_array($group_selected, $group_ids))			{				trigger_error('NO_GROUP');			}			$template->assign_vars(array(				'USERNAME'	=> $username,				'EMAIL'		=> $email,				'ICQ'		=> $icq,				'AIM'		=> $aim,				'YAHOO'		=> $yahoo,				'MSNM'		=> $msn,				'JABBER'	=> $jabber,				'JOINED'	=> implode('-', $joined),				'ACTIVE'	=> implode('-', $active),				'COUNT'		=> $count,				'IP'		=> $ipdomain,				'S_IP_SEARCH_ALLOWED'	=> ($auth->acl_getf_global('m_info')) ? true : false,				'S_EMAIL_SEARCH_ALLOWED'=> ($auth->acl_get('a_user')) ? true : false,				'S_IN_SEARCH_POPUP'		=> ($form && $field) ? true : false,				'S_SEARCH_USER'			=> true,				'S_FORM_NAME'			=> $form,				'S_FIELD_NAME'			=> $field,				'S_SELECT_SINGLE'		=> $select_single,				'S_COUNT_OPTIONS'		=> $s_find_count,				'S_SORT_OPTIONS'		=> $s_sort_key,				'S_JOINED_TIME_OPTIONS'	=> $s_find_join_time,				'S_ACTIVE_TIME_OPTIONS'	=> $s_find_active_time,				'S_GROUP_SELECT'		=> $s_group_select,				'S_USER_SEARCH_ACTION'	=> append_sid("{$phpbb_root_path}memberlist.$phpEx", "mode=searchuser&amp;form=$form&amp;field=$field"))			);		}		// Get us some users :D		$sql = "SELECT u.user_id			FROM " . USERS_TABLE . " u				$sql_from			WHERE u.user_type IN (" . USER_NORMAL . ', ' . USER_FOUNDER . ")				$sql_where			ORDER BY $order_by";		$result = $db->sql_query_limit($sql, $config['topics_per_page'], $start);		$user_list = array();		while ($row = $db->sql_fetchrow($result))		{			$user_list[] = (int) $row['user_id'];		}		$db->sql_freeresult($result);		$leaders_set = false;		// So, did we get any users?		if (sizeof($user_list))		{			// Session time?! Session time...			$sql = 'SELECT session_user_id, MAX(session_time) AS session_time				FROM ' . SESSIONS_TABLE . '				WHERE session_time >= ' . (time() - $config['session_length']) . '					AND ' . $db->sql_in_set('session_user_id', $user_list) . '				GROUP BY session_user_id';			$result = $db->sql_query($sql);			$session_times = array();			while ($row = $db->sql_fetchrow($result))			{				$session_times[$row['session_user_id']] = $row['session_time'];			}			$db->sql_freeresult($result);			// Do the SQL thang			if ($mode == 'group')			{				$sql = "SELECT u.*						$sql_select					FROM " . USERS_TABLE . " u						$sql_from					WHERE " . $db->sql_in_set('u.user_id', $user_list) . "						$sql_where_data";			}			else			{				$sql = 'SELECT *					FROM ' . USERS_TABLE . '					WHERE ' . $db->sql_in_set('user_id', $user_list);			}			$result = $db->sql_query($sql);			$id_cache = array();			while ($row = $db->sql_fetchrow($result))			{				$row['session_time'] = (!empty($session_times[$row['user_id']])) ? $session_times[$row['user_id']] : 0;				$row['last_visit'] = (!empty($row['session_time'])) ? $row['session_time'] : $row['user_lastvisit'];				$id_cache[$row['user_id']] = $row;			}			$db->sql_freeresult($result);			// Load custom profile fields			if ($config['load_cpf_memberlist'])			{				include_once($phpbb_root_path . 'includes/functions_profile_fields.' . $phpEx);				$cp = new custom_profile();				// Grab all profile fields from users in id cache for later use - similar to the poster cache				$profile_fields_cache = $cp->generate_profile_fields_template('grab', $user_list);			}			// If we sort by last active date we need to adjust the id cache due to user_lastvisit not being the last active date...			if ($sort_key == 'l')			{//				uasort($id_cache, create_function('$first, $second', "return (\$first['last_visit'] == \$second['last_visit']) ? 0 : ((\$first['last_visit'] < \$second['last_visit']) ? $lesser_than : ($lesser_than * -1));"));				usort($user_list,  '_sort_last_active');			}			for ($i = 0, $end = sizeof($user_list); $i < $end; ++$i)			{				$user_id = $user_list[$i];				$row =& $id_cache[$user_id];				$is_leader = (isset($row['group_leader']) && $row['group_leader']) ? true : false;				$leaders_set = ($leaders_set || $is_leader);				$cp_row = array();				if ($config['load_cpf_memberlist'])				{					$cp_row = (isset($profile_fields_cache[$user_id])) ? $cp->generate_profile_fields_template('show', false, $profile_fields_cache[$user_id]) : array();				}				$memberrow = array_merge(show_profile($row), array(					'ROW_NUMBER'		=> $i + ($start + 1),					'S_CUSTOM_PROFILE'	=> (isset($cp_row['row']) && sizeof($cp_row['row'])) ? true : false,					'S_GROUP_LEADER'	=> $is_leader,					'U_VIEW_PROFILE'	=> append_sid("{$phpbb_root_path}memberlist.$phpEx", 'mode=viewprofile&amp;u=' . $user_id))				);				if (isset($cp_row['row']) && sizeof($cp_row['row']))				{					$memberrow = array_merge($memberrow, $cp_row['row']);				}				$template->assign_block_vars('memberrow', $memberrow);				if (isset($cp_row['blockrow']) && sizeof($cp_row['blockrow']))				{					foreach ($cp_row['blockrow'] as $field_data)					{						$template->assign_block_vars('memberrow.custom_fields', $field_data);					}				}				unset($id_cache[$user_id]);			}		}		// Generate page		$template->assign_vars(array(			'PAGINATION'	=> generate_pagination($pagination_url, $total_users, $config['topics_per_page'], $start),			'PAGE_NUMBER'	=> on_page($total_users, $config['topics_per_page'], $start),			'TOTAL_USERS'	=> ($total_users == 1) ? $user->lang['LIST_USER'] : sprintf($user->lang['LIST_USERS'], $total_users),			'PROFILE_IMG'	=> $user->img('icon_user_profile', $user->lang['PROFILE']),			'PM_IMG'		=> $user->img('icon_contact_pm', $user->lang['SEND_PRIVATE_MESSAGE']),			'EMAIL_IMG'		=> $user->img('icon_contact_email', $user->lang['EMAIL']),			'WWW_IMG'		=> $user->img('icon_contact_www', $user->lang['WWW']),			'ICQ_IMG'		=> $user->img('icon_contact_icq', $user->lang['ICQ']),			'AIM_IMG'		=> $user->img('icon_contact_aim', $user->lang['AIM']),			'MSN_IMG'		=> $user->img('icon_contact_msnm', $user->lang['MSNM']),			'YIM_IMG'		=> $user->img('icon_contact_yahoo', $user->lang['YIM']),			'JABBER_IMG'	=> $user->img('icon_contact_jabber', $user->lang['JABBER']),			'SEARCH_IMG'	=> $user->img('icon_user_search', $user->lang['SEARCH']),			'U_FIND_MEMBER'			=> ($config['load_search'] || $auth->acl_get('a_')) ? append_sid("{$phpbb_root_path}memberlist.$phpEx", 'mode=searchuser' . (($start) ? "&amp;start=$start" : '') . (!empty($params) ? '&amp;' . implode('&amp;', $params) : '')) : '',			'U_HIDE_FIND_MEMBER'	=> ($mode == 'searchuser') ? $u_hide_find_member : '',			'U_SORT_USERNAME'		=> $sort_url . '&amp;sk=a&amp;sd=' . (($sort_key == 'a' && $sort_dir == 'a') ? 'd' : 'a'),			'U_SORT_FROM'			=> $sort_url . '&amp;sk=b&amp;sd=' . (($sort_key == 'b' && $sort_dir == 'a') ? 'd' : 'a'),			'U_SORT_JOINED'			=> $sort_url . '&amp;sk=c&amp;sd=' . (($sort_key == 'c' && $sort_dir == 'a') ? 'd' : 'a'),			'U_SORT_POSTS'			=> $sort_url . '&amp;sk=d&amp;sd=' . (($sort_key == 'd' && $sort_dir == 'a') ? 'd' : 'a'),			'U_SORT_EMAIL'			=> $sort_url . '&amp;sk=e&amp;sd=' . (($sort_key == 'e' && $sort_dir == 'a') ? 'd' : 'a'),			'U_SORT_WEBSITE'		=> $sort_url . '&amp;sk=f&amp;sd=' . (($sort_key == 'f' && $sort_dir == 'a') ? 'd' : 'a'),			'U_SORT_LOCATION'		=> $sort_url . '&amp;sk=b&amp;sd=' . (($sort_key == 'b' && $sort_dir == 'a') ? 'd' : 'a'),			'U_SORT_ICQ'			=> $sort_url . '&amp;sk=g&amp;sd=' . (($sort_key == 'g' && $sort_dir == 'a') ? 'd' : 'a'),			'U_SORT_AIM'			=> $sort_url . '&amp;sk=h&amp;sd=' . (($sort_key == 'h' && $sort_dir == 'a') ? 'd' : 'a'),			'U_SORT_MSN'			=> $sort_url . '&amp;sk=i&amp;sd=' . (($sort_key == 'i' && $sort_dir == 'a') ? 'd' : 'a'),			'U_SORT_YIM'			=> $sort_url . '&amp;sk=j&amp;sd=' . (($sort_key == 'j' && $sort_dir == 'a') ? 'd' : 'a'),			'U_SORT_ACTIVE'			=> ($auth->acl_get('u_viewonline')) ? $sort_url . '&amp;sk=l&amp;sd=' . (($sort_key == 'l' && $sort_dir == 'a') ? 'd' : 'a') : '',			'U_SORT_RANK'			=> $sort_url . '&amp;sk=m&amp;sd=' . (($sort_key == 'm' && $sort_dir == 'a') ? 'd' : 'a'),			'U_LIST_CHAR'			=> $sort_url . '&amp;sk=a&amp;sd=' . (($sort_key == 'l' && $sort_dir == 'a') ? 'd' : 'a'),			'S_SHOW_GROUP'		=> ($mode == 'group') ? true : false,			'S_VIEWONLINE'		=> $auth->acl_get('u_viewonline'),			'S_LEADERS_SET'		=> $leaders_set,			'S_MODE_SELECT'		=> $s_sort_key,			'S_ORDER_SELECT'	=> $s_sort_dir,			'S_MODE_ACTION'		=> $pagination_url)		);}// Output the pagepage_header($page_title, false);$template->set_filenames(array(	'body' => $template_html));make_jumpbox(append_sid("{$phpbb_root_path}viewforum.$phpEx"));page_footer();/*** Prepare profile data*/function show_profile($data, $user_notes_enabled = false, $warn_user_enabled = false){	global $config, $auth, $template, $user, $phpEx, $phpbb_root_path;	$username = $data['username'];	$user_id = $data['user_id'];	$rank_title = $rank_img = $rank_img_src = '';	get_user_rank($data['user_rank'], (($user_id == ANONYMOUS) ? false : $data['user_posts']), $rank_title, $rank_img, $rank_img_src);	if ((!empty($data['user_allow_viewemail']) && $auth->acl_get('u_sendemail')) || $auth->acl_get('a_user'))	{		$email = ($config['board_email_form'] && $config['email_enable']) ? append_sid("{$phpbb_root_path}memberlist.$phpEx", 'mode=email&amp;u=' . $user_id) : (($config['board_hide_emails'] && !$auth->acl_get('a_user')) ? '' : 'mailto:' . $data['user_email']);	}	else	{		$email = '';	}	if ($config['load_onlinetrack'])	{		$update_time = $config['load_online_time'] * 60;		$online = (time() - $update_time < $data['session_time'] && ((isset($data['session_viewonline']) && $data['session_viewonline']) || $auth->acl_get('u_viewonline'))) ? true : false;	}	else	{		$online = false;	}	if ($data['user_allow_viewonline'] || $auth->acl_get('u_viewonline'))	{		$last_visit = (!empty($data['session_time'])) ? $data['session_time'] : $data['user_lastvisit'];	}	else	{		$last_visit = '';	}	$age = '';	if ($config['allow_birthdays'] && $data['user_birthday'])	{		list($bday_day, $bday_month, $bday_year) = array_map('intval', explode('-', $data['user_birthday']));		if ($bday_year)		{			$now = phpbb_gmgetdate(time() + $user->timezone + $user->dst);			$diff = $now['mon'] - $bday_month;			if ($diff == 0)			{				$diff = ($now['mday'] - $bday_day < 0) ? 1 : 0;			}			else			{				$diff = ($diff < 0) ? 1 : 0;			}			$age = max(0, (int) ($now['year'] - $bday_year - $diff));		}	}	// Dump it out to the template	return array(		'AGE'			=> $age,		'RANK_TITLE'	=> $rank_title,		'JOINED'		=> $user->format_date($data['user_regdate']),		'VISITED'		=> (empty($last_visit)) ? ' - ' : $user->format_date($last_visit),		'POSTS'			=> ($data['user_posts']) ? $data['user_posts'] : 0,		'WARNINGS'		=> isset($data['user_warnings']) ? $data['user_warnings'] : 0,		'USERNAME_FULL'		=> get_username_string('full', $user_id, $username, $data['user_colour']),		'USERNAME'			=> get_username_string('username', $user_id, $username, $data['user_colour']),		'USER_COLOR'		=> get_username_string('colour', $user_id, $username, $data['user_colour']),		'U_VIEW_PROFILE'	=> get_username_string('profile', $user_id, $username, $data['user_colour']),		'A_USERNAME'		=> addslashes(get_username_string('username', $user_id, $username, $data['user_colour'])),		'AVATAR_IMG'		=> get_user_avatar($data['user_avatar'], $data['user_avatar_type'], $data['user_avatar_width'], $data['user_avatar_height']),		'ONLINE_IMG'		=> (!$config['load_onlinetrack']) ? '' : (($online) ? $user->img('icon_user_online', 'ONLINE') : $user->img('icon_user_offline', 'OFFLINE')),		'S_ONLINE'			=> ($config['load_onlinetrack'] && $online) ? true : false,		'RANK_IMG'			=> $rank_img,		'RANK_IMG_SRC'		=> $rank_img_src,		'ICQ_STATUS_IMG'	=> (!empty($data['user_icq'])) ? '<img src="http://web.icq.com/whitepages/online?icq=' . $data['user_icq'] . '&amp;img=5" width="18" height="18" />' : '',		'S_JABBER_ENABLED'	=> ($config['jab_enable']) ? true : false,		'S_WARNINGS'	=> ($auth->acl_getf_global('m_') || $auth->acl_get('m_warn')) ? true : false,		'U_SEARCH_USER'	=> ($auth->acl_get('u_search')) ? append_sid("{$phpbb_root_path}search.$phpEx", "author_id=$user_id&amp;sr=posts") : '',		'U_NOTES'		=> ($user_notes_enabled && $auth->acl_getf_global('m_')) ? append_sid("{$phpbb_root_path}mcp.$phpEx", 'i=notes&amp;mode=user_notes&amp;u=' . $user_id, true, $user->session_id) : '',		'U_WARN'		=> ($warn_user_enabled && $auth->acl_get('m_warn')) ? append_sid("{$phpbb_root_path}mcp.$phpEx", 'i=warn&amp;mode=warn_user&amp;u=' . $user_id, true, $user->session_id) : '',		'U_PM'			=> ($config['allow_privmsg'] && $auth->acl_get('u_sendpm') && ($data['user_allow_pm'] || $auth->acl_gets('a_', 'm_') || $auth->acl_getf_global('m_'))) ? append_sid("{$phpbb_root_path}ucp.$phpEx", 'i=pm&amp;mode=compose&amp;u=' . $user_id) : '',		'U_EMAIL'		=> $email,		'U_WWW'			=> (!empty($data['user_website'])) ? $data['user_website'] : '',		'U_SHORT_WWW'			=> (!empty($data['user_website'])) ? ((strlen($data['user_website']) > 55) ? substr($data['user_website'], 0, 39) . ' ... ' . substr($data['user_website'], -10) : $data['user_website']) : '',		'U_ICQ'			=> ($data['user_icq']) ? 'http://www.icq.com/people/' . urlencode($data['user_icq']) . '/' : '',		'U_AIM'			=> ($data['user_aim'] && $auth->acl_get('u_sendim')) ? append_sid("{$phpbb_root_path}memberlist.$phpEx", 'mode=contact&amp;action=aim&amp;u=' . $user_id) : '',		'U_YIM'			=> ($data['user_yim']) ? 'http://edit.yahoo.com/config/send_webmesg?.target=' . urlencode($data['user_yim']) . '&amp;.src=pg' : '',		'U_MSN'			=> ($data['user_msnm'] && $auth->acl_get('u_sendim')) ? append_sid("{$phpbb_root_path}memberlist.$phpEx", 'mode=contact&amp;action=msnm&amp;u=' . $user_id) : '',		'U_JABBER'		=> ($data['user_jabber'] && $auth->acl_get('u_sendim')) ? append_sid("{$phpbb_root_path}memberlist.$phpEx", 'mode=contact&amp;action=jabber&amp;u=' . $user_id) : '',		'LOCATION'		=> ($data['user_from']) ? $data['user_from'] : '',		'USER_ICQ'			=> $data['user_icq'],		'USER_AIM'			=> $data['user_aim'],		'USER_YIM'			=> $data['user_yim'],		'USER_MSN'			=> $data['user_msnm'],		'USER_JABBER'		=> $data['user_jabber'],		'USER_JABBER_IMG'	=> ($data['user_jabber']) ? $user->img('icon_contact_jabber', $data['user_jabber']) : '',		'L_VIEWING_PROFILE'	=> sprintf($user->lang['VIEWING_PROFILE'], $username),	);}function _sort_last_active($first, $second){	global $id_cache, $sort_dir;	$lesser_than = ($sort_dir === 'd') ? -1 : 1;	if (isset($id_cache[$first]['group_leader']) && $id_cache[$first]['group_leader'] && (!isset($id_cache[$second]['group_leader']) || !$id_cache[$second]['group_leader']))	{		return -1;	}	else if (isset($id_cache[$second]['group_leader']) && (!isset($id_cache[$first]['group_leader']) || !$id_cache[$first]['group_leader']) && $id_cache[$second]['group_leader'])	{		return 1;	}	else	{		return $lesser_than * (int) ($id_cache[$first]['last_visit'] - $id_cache[$second]['last_visit']);	}}?>
<?php/**** @package search* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @ignore*/if (!defined('IN_PHPBB')){	exit;}/*** @ignore*/define('SEARCH_RESULT_NOT_IN_CACHE', 0);define('SEARCH_RESULT_IN_CACHE', 1);define('SEARCH_RESULT_INCOMPLETE', 2);/*** search_backend* optional base class for search plugins providing simple caching based on ACM* and functions to retrieve ignore_words and synonyms* @package search*/class search_backend{	var $ignore_words = array();	var $match_synonym = array();	var $replace_synonym = array();	function search_backend(&$error)	{		// This class cannot be used as a search plugin		$error = true;	}	/**	* Retrieves a language dependend list of words that should be ignored by the search	*/	function get_ignore_words()	{		if (!sizeof($this->ignore_words))		{			global $user, $phpEx;			$words = array();			if (file_exists("{$user->lang_path}{$user->lang_name}/search_ignore_words.$phpEx"))			{				// include the file containing ignore words				include("{$user->lang_path}{$user->lang_name}/search_ignore_words.$phpEx");			}			$this->ignore_words = $words;			unset($words);		}	}	/**	* Stores a list of synonyms that should be replaced in $this->match_synonym and $this->replace_synonym and caches them	*/	function get_synonyms()	{		if (!sizeof($this->match_synonym))		{			global $user, $phpEx;			$synonyms = array();			if (file_exists("{$user->lang_path}{$user->lang_name}/search_synonyms.$phpEx"))			{				// include the file containing synonyms				include("{$user->lang_path}{$user->lang_name}/search_synonyms.$phpEx");			}			$this->match_synonym = array_keys($synonyms);			$this->replace_synonym = array_values($synonyms);			unset($synonyms);		}	}	/**	* Retrieves cached search results	*	* @param int &$result_count will contain the number of all results for the search (not only for the current page)	* @param array &$id_ary is filled with the ids belonging to the requested page that are stored in the cache	*	* @return int SEARCH_RESULT_NOT_IN_CACHE or SEARCH_RESULT_IN_CACHE or SEARCH_RESULT_INCOMPLETE	*/	function obtain_ids($search_key, &$result_count, &$id_ary, $start, $per_page, $sort_dir)	{		global $cache;		if (!($stored_ids = $cache->get('_search_results_' . $search_key)))		{			// no search results cached for this search_key			return SEARCH_RESULT_NOT_IN_CACHE;		}		else		{			$result_count = $stored_ids[-1];			$reverse_ids = ($stored_ids[-2] != $sort_dir) ? true : false;			$complete = true;			// change the start to the actual end of the current request if the sort direction differs			// from the dirction in the cache and reverse the ids later			if ($reverse_ids)			{				$start = $result_count - $start - $per_page;				// the user requested a page past the last index				if ($start < 0)				{					return SEARCH_RESULT_NOT_IN_CACHE;				}			}			for ($i = $start, $n = $start + $per_page; ($i < $n) && ($i < $result_count); $i++)			{				if (!isset($stored_ids[$i]))				{					$complete = false;				}				else				{					$id_ary[] = $stored_ids[$i];				}			}			unset($stored_ids);			if ($reverse_ids)			{				$id_ary = array_reverse($id_ary);			}			if (!$complete)			{				return SEARCH_RESULT_INCOMPLETE;			}			return SEARCH_RESULT_IN_CACHE;		}	}	/**	* Caches post/topic ids	*	* @param array &$id_ary contains a list of post or topic ids that shall be cached, the first element	* 	must have the absolute index $start in the result set.	*/	function save_ids($search_key, $keywords, $author_ary, $result_count, &$id_ary, $start, $sort_dir)	{		global $cache, $config, $db, $user;		$length = min(sizeof($id_ary), $config['search_block_size']);		// nothing to cache so exit		if (!$length)		{			return;		}		$store_ids = array_slice($id_ary, 0, $length);		// create a new resultset if there is none for this search_key yet		// or add the ids to the existing resultset		if (!($store = $cache->get('_search_results_' . $search_key)))		{			// add the current keywords to the recent searches in the cache which are listed on the search page			if (!empty($keywords) || sizeof($author_ary))			{				$sql = 'SELECT search_time					FROM ' . SEARCH_RESULTS_TABLE . '					WHERE search_key = \'' . $db->sql_escape($search_key) . '\'';				$result = $db->sql_query($sql);				if (!$db->sql_fetchrow($result))				{					$sql_ary = array(						'search_key'		=> $search_key,						'search_time'		=> time(),						'search_keywords'	=> $keywords,						'search_authors'	=> ' ' . implode(' ', $author_ary) . ' '					);					$sql = 'INSERT INTO ' . SEARCH_RESULTS_TABLE . ' ' . $db->sql_build_array('INSERT', $sql_ary);					$db->sql_query($sql);				}				$db->sql_freeresult($result);			}			$sql = 'UPDATE ' . USERS_TABLE . '				SET user_last_search = ' . time() . '				WHERE user_id = ' . $user->data['user_id'];			$db->sql_query($sql);			$store = array(-1 => $result_count, -2 => $sort_dir);			$id_range = range($start, $start + $length - 1);		}		else		{			// we use one set of results for both sort directions so we have to calculate the indizes			// for the reversed array and we also have to reverse the ids themselves			if ($store[-2] != $sort_dir)			{				$store_ids = array_reverse($store_ids);				$id_range = range($store[-1] - $start - $length, $store[-1] - $start - 1);			}			else			{				$id_range = range($start, $start + $length - 1);			}		}		$store_ids = array_combine($id_range, $store_ids);		// append the ids		if (is_array($store_ids))		{			$store += $store_ids;			// if the cache is too big			if (sizeof($store) - 2 > 20 * $config['search_block_size'])			{				// remove everything in front of two blocks in front of the current start index				for ($i = 0, $n = $id_range[0] - 2 * $config['search_block_size']; $i < $n; $i++)				{					if (isset($store[$i]))					{						unset($store[$i]);					}				}				// remove everything after two blocks after the current stop index				end($id_range);				for ($i = $store[-1] - 1, $n = current($id_range) + 2 * $config['search_block_size']; $i > $n; $i--)				{					if (isset($store[$i]))					{						unset($store[$i]);					}				}			}			$cache->put('_search_results_' . $search_key, $store, $config['search_store_results']);			$sql = 'UPDATE ' . SEARCH_RESULTS_TABLE . '				SET search_time = ' . time() . '				WHERE search_key = \'' . $db->sql_escape($search_key) . '\'';			$db->sql_query($sql);		}		unset($store);		unset($store_ids);		unset($id_range);	}	/**	* Removes old entries from the search results table and removes searches with keywords that contain a word in $words.	*/	function destroy_cache($words, $authors = false)	{		global $db, $cache, $config;		// clear all searches that searched for the specified words		if (sizeof($words))		{			$sql_where = '';			foreach ($words as $word)			{				$sql_where .= " OR search_keywords " . $db->sql_like_expression($db->any_char . $word . $db->any_char);			}			$sql = 'SELECT search_key				FROM ' . SEARCH_RESULTS_TABLE . "				WHERE search_keywords LIKE '%*%' $sql_where";			$result = $db->sql_query($sql);			while ($row = $db->sql_fetchrow($result))			{				$cache->destroy('_search_results_' . $row['search_key']);			}			$db->sql_freeresult($result);		}		// clear all searches that searched for the specified authors		if (is_array($authors) && sizeof($authors))		{			$sql_where = '';			foreach ($authors as $author)			{				$sql_where .= (($sql_where) ? ' OR ' : '') . 'search_authors LIKE \'% ' . (int) $author . ' %\'';			}			$sql = 'SELECT search_key				FROM ' . SEARCH_RESULTS_TABLE . "				WHERE $sql_where";			$result = $db->sql_query($sql);			while ($row = $db->sql_fetchrow($result))			{				$cache->destroy('_search_results_' . $row['search_key']);			}			$db->sql_freeresult($result);		}		$sql = 'DELETE			FROM ' . SEARCH_RESULTS_TABLE . '			WHERE search_time < ' . (time() - $config['search_store_results']);		$db->sql_query($sql);	}}?>
<?php/**** @package acp* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @package module_install*/class acp_bots_info{	function module()	{		return array(			'filename'	=> 'acp_bots',			'title'		=> 'ACP_BOTS',			'version'	=> '1.0.0',			'modes'		=> array(				'bots'		=> array('title' => 'ACP_BOTS', 'auth' => 'acl_a_bots', 'cat' => array('ACP_GENERAL_TASKS')),			),		);	}	function install()	{	}	function uninstall()	{	}}?>
<?php/**** @package acp* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @package module_install*/class acp_permission_roles_info{	function module()	{		return array(			'filename'	=> 'acp_permission_roles',			'title'		=> 'ACP_PERMISSION_ROLES',			'version'	=> '1.0.0',			'modes'		=> array(				'admin_roles'		=> array('title' => 'ACP_ADMIN_ROLES', 'auth' => 'acl_a_roles && acl_a_aauth', 'cat' => array('ACP_PERMISSION_ROLES')),				'user_roles'		=> array('title' => 'ACP_USER_ROLES', 'auth' => 'acl_a_roles && acl_a_uauth', 'cat' => array('ACP_PERMISSION_ROLES')),				'mod_roles'			=> array('title' => 'ACP_MOD_ROLES', 'auth' => 'acl_a_roles && acl_a_mauth', 'cat' => array('ACP_PERMISSION_ROLES')),				'forum_roles'		=> array('title' => 'ACP_FORUM_ROLES', 'auth' => 'acl_a_roles && acl_a_fauth', 'cat' => array('ACP_PERMISSION_ROLES')),			),		);	}	function install()	{	}	function uninstall()	{	}}?>
<?php/**** @package phpBB3* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @ignore*/define('IN_PHPBB', true);$phpbb_root_path = (defined('PHPBB_ROOT_PATH')) ? PHPBB_ROOT_PATH : './../';$phpEx = substr(strrchr(__FILE__, '.'), 1);// Thank you sun.if (isset($_SERVER['CONTENT_TYPE'])){	if ($_SERVER['CONTENT_TYPE'] === 'application/x-java-archive')	{		exit;	}}else if (isset($_SERVER['HTTP_USER_AGENT']) && strpos($_SERVER['HTTP_USER_AGENT'], 'Java') !== false){	exit;}if (isset($_GET['avatar'])){	require($phpbb_root_path . 'includes/startup.' . $phpEx);	require($phpbb_root_path . 'config.' . $phpEx);	if (!defined('PHPBB_INSTALLED') || empty($dbms) || empty($acm_type))	{		exit;	}	require($phpbb_root_path . 'includes/acm/acm_' . $acm_type . '.' . $phpEx);	require($phpbb_root_path . 'includes/cache.' . $phpEx);	require($phpbb_root_path . 'includes/db/' . $dbms . '.' . $phpEx);	require($phpbb_root_path . 'includes/constants.' . $phpEx);	require($phpbb_root_path . 'includes/functions.' . $phpEx);	$db = new $sql_db();	$cache = new cache();	// Connect to DB	if (!@$db->sql_connect($dbhost, $dbuser, $dbpasswd, $dbname, $dbport, false, false))	{		exit;	}	unset($dbpasswd);	// worst-case default	$browser = (!empty($_SERVER['HTTP_USER_AGENT'])) ? htmlspecialchars((string) $_SERVER['HTTP_USER_AGENT']) : 'msie 6.0';	$config = $cache->obtain_config();	$filename = request_var('avatar', '');	$avatar_group = false;	$exit = false;	if (isset($filename[0]) && $filename[0] === 'g')	{		$avatar_group = true;		$filename = substr($filename, 1);	}	// '==' is not a bug - . as the first char is as bad as no dot at all	if (strpos($filename, '.') == false)	{		send_status_line(403, 'Forbidden');		$exit = true;	}	if (!$exit)	{		$ext		= substr(strrchr($filename, '.'), 1);		$stamp		= (int) substr(stristr($filename, '_'), 1);		$filename	= (int) $filename;		$exit = set_modified_headers($stamp, $browser);	}	if (!$exit && !in_array($ext, array('png', 'gif', 'jpg', 'jpeg')))	{		// no way such an avatar could exist. They are not following the rules, stop the show.		send_status_line(403, 'Forbidden');		$exit = true;	}	if (!$exit)	{		if (!$filename)		{			// no way such an avatar could exist. They are not following the rules, stop the show.			send_status_line(403, 'Forbidden');		}		else		{			send_avatar_to_browser(($avatar_group ? 'g' : '') . $filename . '.' . $ext, $browser);		}	}	file_gc();}// implicit else: we are not in avatar modeinclude($phpbb_root_path . 'common.' . $phpEx);$download_id = request_var('id', 0);$mode = request_var('mode', '');$thumbnail = request_var('t', false);// Start session management, do not update session page.$user->session_begin(false);$auth->acl($user->data);$user->setup('viewtopic');if (!$download_id){	send_status_line(404, 'Not Found');	trigger_error('NO_ATTACHMENT_SELECTED');}if (!$config['allow_attachments'] && !$config['allow_pm_attach']){	send_status_line(404, 'Not Found');	trigger_error('ATTACHMENT_FUNCTIONALITY_DISABLED');}$sql = 'SELECT attach_id, in_message, post_msg_id, extension, is_orphan, poster_id, filetime	FROM ' . ATTACHMENTS_TABLE . "	WHERE attach_id = $download_id";$result = $db->sql_query_limit($sql, 1);$attachment = $db->sql_fetchrow($result);$db->sql_freeresult($result);if (!$attachment){	send_status_line(404, 'Not Found');	trigger_error('ERROR_NO_ATTACHMENT');}if ((!$attachment['in_message'] && !$config['allow_attachments']) || ($attachment['in_message'] && !$config['allow_pm_attach'])){	send_status_line(404, 'Not Found');	trigger_error('ATTACHMENT_FUNCTIONALITY_DISABLED');}$row = array();if ($attachment['is_orphan']){	// We allow admins having attachment permissions to see orphan attachments...	$own_attachment = ($auth->acl_get('a_attach') || $attachment['poster_id'] == $user->data['user_id']) ? true : false;	if (!$own_attachment || ($attachment['in_message'] && !$auth->acl_get('u_pm_download')) || (!$attachment['in_message'] && !$auth->acl_get('u_download')))	{		send_status_line(404, 'Not Found');		trigger_error('ERROR_NO_ATTACHMENT');	}	// Obtain all extensions...	$extensions = $cache->obtain_attach_extensions(true);}else{	if (!$attachment['in_message'])	{		//		$sql = 'SELECT p.forum_id, f.forum_password, f.parent_id			FROM ' . POSTS_TABLE . ' p, ' . FORUMS_TABLE . ' f			WHERE p.post_id = ' . $attachment['post_msg_id'] . '				AND p.forum_id = f.forum_id';		$result = $db->sql_query_limit($sql, 1);		$row = $db->sql_fetchrow($result);		$db->sql_freeresult($result);		// Global announcement?		$f_download = (!$row) ? $auth->acl_getf_global('f_download') : $auth->acl_get('f_download', $row['forum_id']);		if ($auth->acl_get('u_download') && $f_download)		{			if ($row && $row['forum_password'])			{				// Do something else ... ?				login_forum_box($row);			}		}		else		{			send_status_line(403, 'Forbidden');			trigger_error('SORRY_AUTH_VIEW_ATTACH');		}	}	else	{		$row['forum_id'] = false;		if (!$auth->acl_get('u_pm_download'))		{			send_status_line(403, 'Forbidden');			trigger_error('SORRY_AUTH_VIEW_ATTACH');		}		// Check if the attachment is within the users scope...		$sql = 'SELECT user_id, author_id			FROM ' . PRIVMSGS_TO_TABLE . '			WHERE msg_id = ' . $attachment['post_msg_id'];		$result = $db->sql_query($sql);		$allowed = false;		while ($user_row = $db->sql_fetchrow($result))		{			if ($user->data['user_id'] == $user_row['user_id'] || $user->data['user_id'] == $user_row['author_id'])			{				$allowed = true;				break;			}		}		$db->sql_freeresult($result);		if (!$allowed)		{			send_status_line(403, 'Forbidden');			trigger_error('ERROR_NO_ATTACHMENT');		}	}	// disallowed?	$extensions = array();	if (!extension_allowed($row['forum_id'], $attachment['extension'], $extensions))	{		send_status_line(404, 'Forbidden');		trigger_error(sprintf($user->lang['EXTENSION_DISABLED_AFTER_POSTING'], $attachment['extension']));	}}if (!download_allowed()){	send_status_line(403, 'Forbidden');	trigger_error($user->lang['LINKAGE_FORBIDDEN']);}$download_mode = (int) $extensions[$attachment['extension']]['download_mode'];// Fetching filename here to prevent sniffing of filename$sql = 'SELECT attach_id, is_orphan, in_message, post_msg_id, extension, physical_filename, real_filename, mimetype, filetime	FROM ' . ATTACHMENTS_TABLE . "	WHERE attach_id = $download_id";$result = $db->sql_query_limit($sql, 1);$attachment = $db->sql_fetchrow($result);$db->sql_freeresult($result);if (!$attachment){	send_status_line(404, 'Not Found');	trigger_error('ERROR_NO_ATTACHMENT');}$attachment['physical_filename'] = utf8_basename($attachment['physical_filename']);$display_cat = $extensions[$attachment['extension']]['display_cat'];if (($display_cat == ATTACHMENT_CATEGORY_IMAGE || $display_cat == ATTACHMENT_CATEGORY_THUMB) && !$user->optionget('viewimg')){	$display_cat = ATTACHMENT_CATEGORY_NONE;}if ($display_cat == ATTACHMENT_CATEGORY_FLASH && !$user->optionget('viewflash')){	$display_cat = ATTACHMENT_CATEGORY_NONE;}if ($thumbnail){	$attachment['physical_filename'] = 'thumb_' . $attachment['physical_filename'];}else if (($display_cat == ATTACHMENT_CATEGORY_NONE/* || $display_cat == ATTACHMENT_CATEGORY_IMAGE*/) && !$attachment['is_orphan']){	// Update download count	$sql = 'UPDATE ' . ATTACHMENTS_TABLE . '		SET download_count = download_count + 1		WHERE attach_id = ' . $attachment['attach_id'];	$db->sql_query($sql);}if ($display_cat == ATTACHMENT_CATEGORY_IMAGE && $mode === 'view' && (strpos($attachment['mimetype'], 'image') === 0) && ((strpos(strtolower($user->browser), 'msie') !== false) && (strpos(strtolower($user->browser), 'msie 8.0') === false))){	wrap_img_in_html(append_sid($phpbb_root_path . 'download/file.' . $phpEx, 'id=' . $attachment['attach_id']), $attachment['real_filename']);	file_gc();}else{	// Determine the 'presenting'-method	if ($download_mode == PHYSICAL_LINK)	{		// This presenting method should no longer be used		if (!@is_dir($phpbb_root_path . $config['upload_path']))		{			send_status_line(500, 'Internal Server Error');			trigger_error($user->lang['PHYSICAL_DOWNLOAD_NOT_POSSIBLE']);		}		redirect($phpbb_root_path . $config['upload_path'] . '/' . $attachment['physical_filename']);		file_gc();	}	else	{		send_file_to_browser($attachment, $config['upload_path'], $display_cat);		file_gc();	}}/*** A simplified function to deliver avatars* The argument needs to be checked before calling this function.*/function send_avatar_to_browser($file, $browser){	global $config, $phpbb_root_path;	$prefix = $config['avatar_salt'] . '_';	$image_dir = $config['avatar_path'];	// Adjust image_dir path (no trailing slash)	if (substr($image_dir, -1, 1) == '/' || substr($image_dir, -1, 1) == '\\')	{		$image_dir = substr($image_dir, 0, -1) . '/';	}	$image_dir = str_replace(array('../', '..\\', './', '.\\'), '', $image_dir);	if ($image_dir && ($image_dir[0] == '/' || $image_dir[0] == '\\'))	{		$image_dir = '';	}	$file_path = $phpbb_root_path . $image_dir . '/' . $prefix . $file;	if ((@file_exists($file_path) && @is_readable($file_path)) && !headers_sent())	{		header('Pragma: public');		$image_data = @getimagesize($file_path);		header('Content-Type: ' . image_type_to_mime_type($image_data[2]));		if (strpos(strtolower($browser), 'msie') !== false && strpos(strtolower($browser), 'msie 8.0') === false)		{			header('Content-Disposition: attachment; ' . header_filename($file));			if (strpos(strtolower($browser), 'msie 6.0') !== false)			{				header('Expires: -1');			}			else			{				header('Expires: ' . gmdate('D, d M Y H:i:s \G\M\T', time() + 31536000));			}		}		else		{			header('Content-Disposition: inline; ' . header_filename($file));			header('Expires: ' . gmdate('D, d M Y H:i:s \G\M\T', time() + 31536000));		}		$size = @filesize($file_path);		if ($size)		{			header("Content-Length: $size");		}		if (@readfile($file_path) == false)		{			$fp = @fopen($file_path, 'rb');			if ($fp !== false)			{				while (!feof($fp))				{					echo fread($fp, 8192);				}				fclose($fp);			}		}		flush();	}	else	{		send_status_line(404, 'Not Found');	}}/*** Wraps an url into a simple html page. Used to display attachments in IE.* this is a workaround for now; might be moved to template system later* direct any complaints to 1 Microsoft Way, Redmond*/function wrap_img_in_html($src, $title){	echo '<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-Strict.dtd">';	echo '<html>';	echo '<head>';	echo '<meta http-equiv="content-type" content="text/html; charset=UTF-8" />';	echo '<title>' . $title . '</title>';	echo '</head>';	echo '<body>';	echo '<div>';	echo '<img src="' . $src . '" alt="' . $title . '" />';	echo '</div>';	echo '</body>';	echo '</html>';}/*** Send file to browser*/function send_file_to_browser($attachment, $upload_dir, $category){	global $user, $db, $config, $phpbb_root_path;	$filename = $phpbb_root_path . $upload_dir . '/' . $attachment['physical_filename'];	if (!@file_exists($filename))	{		send_status_line(404, 'Not Found');		trigger_error($user->lang['ERROR_NO_ATTACHMENT'] . '<br /><br />' . sprintf($user->lang['FILE_NOT_FOUND_404'], $filename));	}	// Correct the mime type - we force application/octetstream for all files, except images	// Please do not change this, it is a security precaution	if ($category != ATTACHMENT_CATEGORY_IMAGE || strpos($attachment['mimetype'], 'image') !== 0)	{		$attachment['mimetype'] = (strpos(strtolower($user->browser), 'msie') !== false || strpos(strtolower($user->browser), 'opera') !== false) ? 'application/octetstream' : 'application/octet-stream';	}	if (@ob_get_length())	{		@ob_end_clean();	}	// Now send the File Contents to the Browser	$size = @filesize($filename);	// To correctly display further errors we need to make sure we are using the correct headers for both (unsetting content-length may not work)	// Check if headers already sent or not able to get the file contents.	if (headers_sent() || !@file_exists($filename) || !@is_readable($filename))	{		// PHP track_errors setting On?		if (!empty($php_errormsg))		{			send_status_line(500, 'Internal Server Error');			trigger_error($user->lang['UNABLE_TO_DELIVER_FILE'] . '<br />' . sprintf($user->lang['TRACKED_PHP_ERROR'], $php_errormsg));		}		send_status_line(500, 'Internal Server Error');		trigger_error('UNABLE_TO_DELIVER_FILE');	}	// Now the tricky part... let's dance	header('Pragma: public');	/**	* Commented out X-Sendfile support. To not expose the physical filename within the header if xsendfile is absent we need to look into methods of checking it's status.	*	* Try X-Sendfile since it is much more server friendly - only works if the path is *not* outside of the root path...	* lighttpd has core support for it. An apache2 module is available at http://celebnamer.celebworld.ws/stuff/mod_xsendfile/	*	* Not really ideal, but should work fine...	* <code>	*	if (strpos($upload_dir, '/') !== 0 && strpos($upload_dir, '../') === false)	*	{	*		header('X-Sendfile: ' . $filename);	*	}	* </code>	*/	// Send out the Headers. Do not set Content-Disposition to inline please, it is a security measure for users using the Internet Explorer.	$is_ie8 = (strpos(strtolower($user->browser), 'msie 8.0') !== false);	header('Content-Type: ' . $attachment['mimetype']);	if ($is_ie8)	{		header('X-Content-Type-Options: nosniff');	}	if ($category == ATTACHMENT_CATEGORY_FLASH && request_var('view', 0) === 1)	{		// We use content-disposition: inline for flash files and view=1 to let it correctly play with flash player 10 - any other disposition will fail to play inline		header('Content-Disposition: inline');	}	else	{		if (empty($user->browser) || (!$is_ie8 && (strpos(strtolower($user->browser), 'msie') !== false)))		{			header('Content-Disposition: attachment; ' . header_filename(htmlspecialchars_decode($attachment['real_filename'])));			if (empty($user->browser) || (strpos(strtolower($user->browser), 'msie 6.0') !== false))			{				header('expires: -1');			}		}		else		{			header('Content-Disposition: ' . ((strpos($attachment['mimetype'], 'image') === 0) ? 'inline' : 'attachment') . '; ' . header_filename(htmlspecialchars_decode($attachment['real_filename'])));			if ($is_ie8 && (strpos($attachment['mimetype'], 'image') !== 0))			{				header('X-Download-Options: noopen');			}		}	}	if ($size)	{		header("Content-Length: $size");	}	// Close the db connection before sending the file	$db->sql_close();	if (!set_modified_headers($attachment['filetime'], $user->browser))	{		// Try to deliver in chunks		@set_time_limit(0);		$fp = @fopen($filename, 'rb');		if ($fp !== false)		{			while (!feof($fp))			{				echo fread($fp, 8192);			}			fclose($fp);		}		else		{			@readfile($filename);		}		flush();	}	file_gc();}/*** Get a browser friendly UTF-8 encoded filename*/function header_filename($file){	$user_agent = (!empty($_SERVER['HTTP_USER_AGENT'])) ? htmlspecialchars((string) $_SERVER['HTTP_USER_AGENT']) : '';	// There be dragons here.	// Not many follows the RFC...	if (strpos($user_agent, 'MSIE') !== false || strpos($user_agent, 'Safari') !== false || strpos($user_agent, 'Konqueror') !== false)	{		return "filename=" . rawurlencode($file);	}	// follow the RFC for extended filename for the rest	return "filename*=UTF-8''" . rawurlencode($file);}/*** Check if downloading item is allowed*/function download_allowed(){	global $config, $user, $db;	if (!$config['secure_downloads'])	{		return true;	}	$url = (!empty($_SERVER['HTTP_REFERER'])) ? trim($_SERVER['HTTP_REFERER']) : trim(getenv('HTTP_REFERER'));	if (!$url)	{		return ($config['secure_allow_empty_referer']) ? true : false;	}	// Split URL into domain and script part	$url = @parse_url($url);	if ($url === false)	{		return ($config['secure_allow_empty_referer']) ? true : false;	}	$hostname = $url['host'];	unset($url);	$allowed = ($config['secure_allow_deny']) ? false : true;	$iplist = array();	if (($ip_ary = @gethostbynamel($hostname)) !== false)	{		foreach ($ip_ary as $ip)		{			if ($ip)			{				$iplist[] = $ip;			}		}	}	// Check for own server...	$server_name = $user->host;	// Forcing server vars is the only way to specify/override the protocol	if ($config['force_server_vars'] || !$server_name)	{		$server_name = $config['server_name'];	}	if (preg_match('#^.*?' . preg_quote($server_name, '#') . '.*?$#i', $hostname))	{		$allowed = true;	}	// Get IP's and Hostnames	if (!$allowed)	{		$sql = 'SELECT site_ip, site_hostname, ip_exclude			FROM ' . SITELIST_TABLE;		$result = $db->sql_query($sql);		while ($row = $db->sql_fetchrow($result))		{			$site_ip = trim($row['site_ip']);			$site_hostname = trim($row['site_hostname']);			if ($site_ip)			{				foreach ($iplist as $ip)				{					if (preg_match('#^' . str_replace('\*', '.*?', preg_quote($site_ip, '#')) . '$#i', $ip))					{						if ($row['ip_exclude'])						{							$allowed = ($config['secure_allow_deny']) ? false : true;							break 2;						}						else						{							$allowed = ($config['secure_allow_deny']) ? true : false;						}					}				}			}			if ($site_hostname)			{				if (preg_match('#^' . str_replace('\*', '.*?', preg_quote($site_hostname, '#')) . '$#i', $hostname))				{					if ($row['ip_exclude'])					{						$allowed = ($config['secure_allow_deny']) ? false : true;						break;					}					else					{						$allowed = ($config['secure_allow_deny']) ? true : false;					}				}			}		}		$db->sql_freeresult($result);	}	return $allowed;}/*** Check if the browser has the file already and set the appropriate headers-* @returns false if a resend is in order.*/function set_modified_headers($stamp, $browser){	// let's see if we have to send the file at all	$last_load 	=  isset($_SERVER['HTTP_IF_MODIFIED_SINCE']) ? strtotime(trim($_SERVER['HTTP_IF_MODIFIED_SINCE'])) : false;	if ((strpos(strtolower($browser), 'msie 6.0') === false) && (strpos(strtolower($browser), 'msie 8.0') === false))	{		if ($last_load !== false && $last_load >= $stamp)		{			send_status_line(304, 'Not Modified');			// seems that we need those too ... browsers			header('Pragma: public');			header('Expires: ' . gmdate('D, d M Y H:i:s \G\M\T', time() + 31536000));			return true;		}		else		{			header('Last-Modified: ' . gmdate('D, d M Y H:i:s', $stamp) . ' GMT');		}	}	return false;}function file_gc(){	global $cache, $db;	if (!empty($cache))	{		$cache->unload();	}	$db->sql_close();	exit;}?>
<?php/*** Repair bbcodes converted with RC6** You should make a backup from your users, posts and privmsgs table in case something goes wrong* Forum descriptions and rules need to be re-submitted manually**/die("Please read the first lines of this script for instructions on how to enable it");set_time_limit(0);@ini_set('memory_limit', '512M');define('IN_PHPBB', true);$phpbb_root_path = './../';$phpEx = substr(strrchr(__FILE__, '.'), 1);include($phpbb_root_path . 'common.'.$phpEx);// Start session management$user->session_begin();$auth->acl($user->data);$user->setup();$echos = 0;// Adjust user signatures$sql = 'SELECT user_id, user_sig, user_sig_bbcode_uid	FROM ' . USERS_TABLE . '	ORDER BY user_id ASC';$result = $db->sql_query($sql);while ($row = $db->sql_fetchrow($result)){	$bbcode_uid = $row['user_sig_bbcode_uid'];	// Only if a bbcode uid is present, the signature present and a size tag used...	if (!empty($bbcode_uid) && strpos($row['user_sig'], $bbcode_uid) === false)	{		$row['user_sig'] = preg_replace('/\:[0-9a-z]{8}\]/', ":$bbcode_uid]", $row['user_sig']);		$sql = 'UPDATE ' . USERS_TABLE . " SET user_sig = '" . $db->sql_escape($row['user_sig']) . "'			WHERE user_id = " . $row['user_id'];		$db->sql_query($sql);		if ($echos > 200)		{			echo '<br />User: ' . "{$row['user_id']}\n";			$echos = 0;		}		echo '.';		$echos++;		flush();	}}$db->sql_freeresult($result);// Now adjust posts$sql = 'SELECT post_id, post_text, bbcode_uid, enable_bbcode	FROM ' . POSTS_TABLE . '	ORDER BY post_id ASC';$result = $db->sql_query($sql);while ($row = $db->sql_fetchrow($result)){	$bbcode_uid = $row['bbcode_uid'];	// Only if a bbcode uid is present, bbcode enabled and a size tag used...	if ($row['enable_bbcode'] && !empty($bbcode_uid) && strpos($row['post_text'], $bbcode_uid) === false)	{		$row['post_text'] = preg_replace('/\:[0-9a-z]{8}\]/', ":$bbcode_uid]", $row['post_text']);				$sql = 'UPDATE ' . POSTS_TABLE . " SET post_text = '" . $db->sql_escape($row['post_text']) . "'			WHERE post_id = " . $row['post_id'];		$db->sql_query($sql);		if ($echos > 200)		{			echo '<br />Post: ' . "{$row['post_id']} \n";			$echos = 0;		}		echo '.';		$echos++;		flush();	}}$db->sql_freeresult($result);// Now to the private messages$sql = 'SELECT msg_id, message_text, bbcode_uid, enable_bbcode	FROM ' . PRIVMSGS_TABLE;$result = $db->sql_query($sql);while ($row = $db->sql_fetchrow($result)){	$bbcode_uid = $row['bbcode_uid'];	// Only if a bbcode uid is present, bbcode enabled and a size tag used...	if ($row['enable_bbcode'] && !empty($bbcode_uid) && strpos($row['message_text'], $bbcode_uid) === false)	{		$row['message_text'] = preg_replace('/\:[0-9a-z]{8}\]/', ":$bbcode_uid]", $row['message_text']);				$sql = 'UPDATE ' . PRIVMSGS_TABLE . " SET message_text = '" . $db->sql_escape($row['message_text']) . "'			WHERE msg_id = " . $row['msg_id'];		$db->sql_query($sql);		if ($echos > 200)		{			echo '<br />' . "\n";			$echos = 0;		}		echo '.';		$echos++;		flush();	}}$db->sql_freeresult($result);// Done$db->sql_close();echo 'done';?>
<?php/**** @package ucp* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @ignore*/if (!defined('IN_PHPBB')){	exit;}/*** ucp_main* UCP Front Panel* @package ucp*/class ucp_main{	var $p_master;	var $u_action;	function ucp_main(&$p_master)	{		$this->p_master = &$p_master;	}	function main($id, $mode)	{		global $config, $db, $user, $auth, $template, $phpbb_root_path, $phpEx;		switch ($mode)		{			case 'front':				$user->add_lang('memberlist');				$sql_from = TOPICS_TABLE . ' t ';				$sql_select = '';				if ($config['load_db_track'])				{					$sql_from .= ' LEFT JOIN ' . TOPICS_POSTED_TABLE . ' tp ON (tp.topic_id = t.topic_id						AND tp.user_id = ' . $user->data['user_id'] . ')';					$sql_select .= ', tp.topic_posted';				}				if ($config['load_db_lastread'])				{					$sql_from .= ' LEFT JOIN ' . TOPICS_TRACK_TABLE . ' tt ON (tt.topic_id = t.topic_id						AND tt.user_id = ' . $user->data['user_id'] . ')';					$sql_select .= ', tt.mark_time';				}				$topic_type = $user->lang['VIEW_TOPIC_GLOBAL'];				$folder = 'global_read';				$folder_new = 'global_unread';				// Get cleaned up list... return only those forums not having the f_read permission				$forum_ary = $auth->acl_getf('!f_read', true);				$forum_ary = array_unique(array_keys($forum_ary));				// Determine first forum the user is able to read into - for global announcement link				$sql = 'SELECT forum_id					FROM ' . FORUMS_TABLE . '					WHERE forum_type = ' . FORUM_POST;				if (sizeof($forum_ary))				{					$sql .= ' AND ' . $db->sql_in_set('forum_id', $forum_ary, true);				}				$result = $db->sql_query_limit($sql, 1);				$g_forum_id = (int) $db->sql_fetchfield('forum_id');				$db->sql_freeresult($result);				$sql = "SELECT t.* $sql_select					FROM $sql_from					WHERE t.forum_id = 0						AND t.topic_type = " . POST_GLOBAL . '					ORDER BY t.topic_last_post_time DESC';				$topic_list = $rowset = array();				// If the user can't see any forums, he can't read any posts because fid of 0 is invalid				if ($g_forum_id)				{					$result = $db->sql_query($sql);					while ($row = $db->sql_fetchrow($result))					{						$topic_list[] = $row['topic_id'];						$rowset[$row['topic_id']] = $row;					}					$db->sql_freeresult($result);				}				$topic_tracking_info = array();				if ($config['load_db_lastread'])				{					$topic_tracking_info = get_topic_tracking(0, $topic_list, $rowset, false, $topic_list);				}				else				{					$topic_tracking_info = get_complete_topic_tracking(0, $topic_list, $topic_list);				}				foreach ($topic_list as $topic_id)				{					$row = &$rowset[$topic_id];					$forum_id = $row['forum_id'];					$topic_id = $row['topic_id'];					$unread_topic = (isset($topic_tracking_info[$topic_id]) && $row['topic_last_post_time'] > $topic_tracking_info[$topic_id]) ? true : false;					$folder_img = ($unread_topic) ? $folder_new : $folder;					$folder_alt = ($unread_topic) ? 'UNREAD_POSTS' : (($row['topic_status'] == ITEM_LOCKED) ? 'TOPIC_LOCKED' : 'NO_UNREAD_POSTS');					if ($row['topic_status'] == ITEM_LOCKED)					{						$folder_img .= '_locked';					}					// Posted image?					if (!empty($row['topic_posted']) && $row['topic_posted'])					{						$folder_img .= '_mine';					}					$template->assign_block_vars('topicrow', array(						'FORUM_ID'					=> $forum_id,						'TOPIC_ID'					=> $topic_id,						'TOPIC_AUTHOR'				=> get_username_string('username', $row['topic_poster'], $row['topic_first_poster_name'], $row['topic_first_poster_colour']),						'TOPIC_AUTHOR_COLOUR'		=> get_username_string('colour', $row['topic_poster'], $row['topic_first_poster_name'], $row['topic_first_poster_colour']),						'TOPIC_AUTHOR_FULL'			=> get_username_string('full', $row['topic_poster'], $row['topic_first_poster_name'], $row['topic_first_poster_colour']),						'FIRST_POST_TIME'			=> $user->format_date($row['topic_time']),						'LAST_POST_SUBJECT'			=> censor_text($row['topic_last_post_subject']),						'LAST_POST_TIME'			=> $user->format_date($row['topic_last_post_time']),						'LAST_VIEW_TIME'			=> $user->format_date($row['topic_last_view_time']),						'LAST_POST_AUTHOR'			=> get_username_string('username', $row['topic_last_poster_id'], $row['topic_last_poster_name'], $row['topic_last_poster_colour']),						'LAST_POST_AUTHOR_COLOUR'	=> get_username_string('colour', $row['topic_last_poster_id'], $row['topic_last_poster_name'], $row['topic_last_poster_colour']),						'LAST_POST_AUTHOR_FULL'		=> get_username_string('full', $row['topic_last_poster_id'], $row['topic_last_poster_name'], $row['topic_last_poster_colour']),						'TOPIC_TITLE'				=> censor_text($row['topic_title']),						'TOPIC_TYPE'				=> $topic_type,						'TOPIC_FOLDER_IMG'		=> $user->img($folder_img, $folder_alt),						'TOPIC_FOLDER_IMG_SRC'	=> $user->img($folder_img, $folder_alt, false, '', 'src'),						'ATTACH_ICON_IMG'		=> ($auth->acl_get('u_download') && $auth->acl_get('f_download', $forum_id) && $row['topic_attachment']) ? $user->img('icon_topic_attach', '') : '',						'S_USER_POSTED'		=> (!empty($row['topic_posted']) && $row['topic_posted']) ? true : false,						'S_UNREAD'			=> $unread_topic,						'U_TOPIC_AUTHOR'		=> get_username_string('profile', $row['topic_poster'], $row['topic_first_poster_name'], $row['topic_first_poster_colour']),						'U_LAST_POST'			=> append_sid("{$phpbb_root_path}viewtopic.$phpEx", "f=$g_forum_id&amp;t=$topic_id&amp;p=" . $row['topic_last_post_id']) . '#p' . $row['topic_last_post_id'],						'U_LAST_POST_AUTHOR'	=> get_username_string('profile', $row['topic_last_poster_id'], $row['topic_last_poster_name'], $row['topic_last_poster_colour']),						'U_NEWEST_POST'			=> append_sid("{$phpbb_root_path}viewtopic.$phpEx", "f=$g_forum_id&amp;t=$topic_id&amp;view=unread") . '#unread',						'U_VIEW_TOPIC'			=> append_sid("{$phpbb_root_path}viewtopic.$phpEx", "f=$g_forum_id&amp;t=$topic_id"))					);				}				if ($config['load_user_activity'])				{					if (!function_exists('display_user_activity'))					{						include_once($phpbb_root_path . 'includes/functions_display.' . $phpEx);					}					display_user_activity($user->data);				}				// Do the relevant calculations				$memberdays = max(1, round((time() - $user->data['user_regdate']) / 86400));				$posts_per_day = $user->data['user_posts'] / $memberdays;				$percentage = ($config['num_posts']) ? min(100, ($user->data['user_posts'] / $config['num_posts']) * 100) : 0;				$template->assign_vars(array(					'USER_COLOR'		=> (!empty($user->data['user_colour'])) ? $user->data['user_colour'] : '',					'JOINED'			=> $user->format_date($user->data['user_regdate']),					'VISITED'			=> (empty($last_visit)) ? ' - ' : $user->format_date($last_visit),					'WARNINGS'			=> ($user->data['user_warnings']) ? $user->data['user_warnings'] : 0,					'POSTS'				=> ($user->data['user_posts']) ? $user->data['user_posts'] : 0,					'POSTS_DAY'			=> sprintf($user->lang['POST_DAY'], $posts_per_day),					'POSTS_PCT'			=> sprintf($user->lang['POST_PCT'], $percentage),					'OCCUPATION'	=> (!empty($row['user_occ'])) ? $row['user_occ'] : '',					'INTERESTS'		=> (!empty($row['user_interests'])) ? $row['user_interests'] : '',//					'S_GROUP_OPTIONS'	=> $group_options,					'U_SEARCH_USER'		=> ($auth->acl_get('u_search')) ? append_sid("{$phpbb_root_path}search.$phpEx", 'author_id=' . $user->data['user_id'] . '&amp;sr=posts') : '',				));			break;			case 'subscribed':				include($phpbb_root_path . 'includes/functions_display.' . $phpEx);				$user->add_lang('viewforum');				add_form_key('ucp_front_subscribed');				$unwatch = (isset($_POST['unwatch'])) ? true : false;				if ($unwatch)				{					if (check_form_key('ucp_front_subscribed'))					{						$forums = array_keys(request_var('f', array(0 => 0)));						$topics = array_keys(request_var('t', array(0 => 0)));						$msg = '';						if (sizeof($forums) || sizeof($topics))						{							$l_unwatch = '';							if (sizeof($forums))							{								$sql = 'DELETE FROM ' . FORUMS_WATCH_TABLE . '									WHERE ' . $db->sql_in_set('forum_id', $forums) . '										AND user_id = ' . $user->data['user_id'];								$db->sql_query($sql);								$l_unwatch .= '_FORUMS';							}							if (sizeof($topics))							{								$sql = 'DELETE FROM ' . TOPICS_WATCH_TABLE . '									WHERE ' . $db->sql_in_set('topic_id', $topics) . '										AND user_id = ' . $user->data['user_id'];								$db->sql_query($sql);								$l_unwatch .= '_TOPICS';							}							$msg = $user->lang['UNWATCHED' . $l_unwatch];						}						else						{							$msg = $user->lang['NO_WATCHED_SELECTED'];						}					}					else					{						$msg = $user->lang['FORM_INVALID'];					}					$message = $msg . '<br /><br />' . sprintf($user->lang['RETURN_UCP'], '<a href="' . append_sid("{$phpbb_root_path}ucp.$phpEx", "i=$id&amp;mode=subscribed") . '">', '</a>');					meta_refresh(3, append_sid("{$phpbb_root_path}ucp.$phpEx", "i=$id&amp;mode=subscribed"));					trigger_error($message);				}				$forbidden_forums = array();				if ($config['allow_forum_notify'])				{					$forbidden_forums = $auth->acl_getf('!f_read', true);					$forbidden_forums = array_unique(array_keys($forbidden_forums));					$sql_array = array(						'SELECT'	=> 'f.*',						'FROM'		=> array(							FORUMS_WATCH_TABLE	=> 'fw',							FORUMS_TABLE		=> 'f'						),						'WHERE'		=> 'fw.user_id = ' . $user->data['user_id'] . '							AND f.forum_id = fw.forum_id							AND ' . $db->sql_in_set('f.forum_id', $forbidden_forums, true, true),						'ORDER_BY'	=> 'left_id'					);					if ($config['load_db_lastread'])					{						$sql_array['LEFT_JOIN'] = array(							array(								'FROM'	=> array(FORUMS_TRACK_TABLE => 'ft'),								'ON'	=> 'ft.user_id = ' . $user->data['user_id'] . ' AND ft.forum_id = f.forum_id'							)						);						$sql_array['SELECT'] .= ', ft.mark_time ';					}					else					{						$tracking_topics = (isset($_COOKIE[$config['cookie_name'] . '_track'])) ? ((STRIP) ? stripslashes($_COOKIE[$config['cookie_name'] . '_track']) : $_COOKIE[$config['cookie_name'] . '_track']) : '';						$tracking_topics = ($tracking_topics) ? tracking_unserialize($tracking_topics) : array();					}					$sql = $db->sql_build_query('SELECT', $sql_array);					$result = $db->sql_query($sql);					while ($row = $db->sql_fetchrow($result))					{						$forum_id = $row['forum_id'];						if ($config['load_db_lastread'])						{							$forum_check = (!empty($row['mark_time'])) ? $row['mark_time'] : $user->data['user_lastmark'];						}						else						{							$forum_check = (isset($tracking_topics['f'][$forum_id])) ? (int) (base_convert($tracking_topics['f'][$forum_id], 36, 10) + $config['board_startdate']) : $user->data['user_lastmark'];						}						$unread_forum = ($row['forum_last_post_time'] > $forum_check) ? true : false;						// Which folder should we display?						if ($row['forum_status'] == ITEM_LOCKED)						{							$folder_image = ($unread_forum) ? 'forum_unread_locked' : 'forum_read_locked';							$folder_alt = 'FORUM_LOCKED';						}						else						{							$folder_image = ($unread_forum) ? 'forum_unread' : 'forum_read';							$folder_alt = ($unread_forum) ? 'UNREAD_POSTS' : 'NO_UNREAD_POSTS';						}						// Create last post link information, if appropriate						if ($row['forum_last_post_id'])						{							$last_post_time = $user->format_date($row['forum_last_post_time']);							$last_post_url = append_sid("{$phpbb_root_path}viewtopic.$phpEx", "f=$forum_id&amp;p=" . $row['forum_last_post_id']) . '#p' . $row['forum_last_post_id'];						}						else						{							$last_post_time = $last_post_url = '';						}						$template->assign_block_vars('forumrow', array(							'FORUM_ID'				=> $forum_id,							'FORUM_FOLDER_IMG'		=> $user->img($folder_image, $folder_alt),							'FORUM_FOLDER_IMG_SRC'	=> $user->img($folder_image, $folder_alt, false, '', 'src'),							'FORUM_IMAGE'			=> ($row['forum_image']) ? '<img src="' . $phpbb_root_path . $row['forum_image'] . '" alt="' . $user->lang[$folder_alt] . '" />' : '',							'FORUM_IMAGE_SRC'		=> ($row['forum_image']) ? $phpbb_root_path . $row['forum_image'] : '',							'FORUM_NAME'			=> $row['forum_name'],							'FORUM_DESC'			=> generate_text_for_display($row['forum_desc'], $row['forum_desc_uid'], $row['forum_desc_bitfield'], $row['forum_desc_options']),							'LAST_POST_SUBJECT'		=> $row['forum_last_post_subject'],							'LAST_POST_TIME'		=> $last_post_time,							'LAST_POST_AUTHOR'			=> get_username_string('username', $row['forum_last_poster_id'], $row['forum_last_poster_name'], $row['forum_last_poster_colour']),							'LAST_POST_AUTHOR_COLOUR'	=> get_username_string('colour', $row['forum_last_poster_id'], $row['forum_last_poster_name'], $row['forum_last_poster_colour']),							'LAST_POST_AUTHOR_FULL'		=> get_username_string('full', $row['forum_last_poster_id'], $row['forum_last_poster_name'], $row['forum_last_poster_colour']),							'U_LAST_POST_AUTHOR'		=> get_username_string('profile', $row['forum_last_poster_id'], $row['forum_last_poster_name'], $row['forum_last_poster_colour']),							'U_LAST_POST'			=> $last_post_url,							'U_VIEWFORUM'			=> append_sid("{$phpbb_root_path}viewforum.$phpEx", 'f=' . $row['forum_id']))						);					}					$db->sql_freeresult($result);				}				// Subscribed Topics				if ($config['allow_topic_notify'])				{					if (empty($forbidden_forums))					{						$forbidden_forums = $auth->acl_getf('!f_read', true);						$forbidden_forums = array_unique(array_keys($forbidden_forums));					}					$this->assign_topiclist('subscribed', $forbidden_forums);				}				$template->assign_vars(array(					'S_TOPIC_NOTIFY'		=> $config['allow_topic_notify'],					'S_FORUM_NOTIFY'		=> $config['allow_forum_notify'],				));			break;			case 'bookmarks':				if (!$config['allow_bookmarks'])				{					$template->assign_vars(array(						'S_NO_DISPLAY_BOOKMARKS'	=> true)					);					break;				}				include($phpbb_root_path . 'includes/functions_display.' . $phpEx);				$user->add_lang('viewforum');				if (isset($_POST['unbookmark']))				{					$s_hidden_fields = array('unbookmark' => 1);					$topics = (isset($_POST['t'])) ? array_keys(request_var('t', array(0 => 0))) : array();					$url = $this->u_action;					if (!sizeof($topics))					{						trigger_error('NO_BOOKMARKS_SELECTED');					}					foreach ($topics as $topic_id)					{						$s_hidden_fields['t'][$topic_id] = 1;					}					if (confirm_box(true))					{						$sql = 'DELETE FROM ' . BOOKMARKS_TABLE . '							WHERE user_id = ' . $user->data['user_id'] . '								AND ' . $db->sql_in_set('topic_id', $topics);						$db->sql_query($sql);						meta_refresh(3, $url);						$message = $user->lang['BOOKMARKS_REMOVED'] . '<br /><br />' . sprintf($user->lang['RETURN_UCP'], '<a href="' . $url . '">', '</a>');						trigger_error($message);					}					else					{						confirm_box(false, 'REMOVE_SELECTED_BOOKMARKS', build_hidden_fields($s_hidden_fields));					}				}				$forbidden_forums = $auth->acl_getf('!f_read', true);				$forbidden_forums = array_unique(array_keys($forbidden_forums));				$this->assign_topiclist('bookmarks', $forbidden_forums);			break;			case 'drafts':				$pm_drafts = ($this->p_master->p_name == 'pm') ? true : false;				$template->assign_var('S_SHOW_DRAFTS', true);				$user->add_lang('posting');				$edit		= (isset($_REQUEST['edit'])) ? true : false;				$submit		= (isset($_POST['submit'])) ? true : false;				$draft_id	= ($edit) ? intval($_REQUEST['edit']) : 0;				$delete		= (isset($_POST['delete'])) ? true : false;				$s_hidden_fields = ($edit) ? '<input type="hidden" name="edit" value="' . $draft_id . '" />' : '';				$draft_subject = $draft_message = '';				add_form_key('ucp_draft');				if ($delete)				{					if (check_form_key('ucp_draft'))					{						$drafts = array_keys(request_var('d', array(0 => 0)));						if (sizeof($drafts))						{							$sql = 'DELETE FROM ' . DRAFTS_TABLE . '								WHERE ' . $db->sql_in_set('draft_id', $drafts) . '									AND user_id = ' . $user->data['user_id'];							$db->sql_query($sql);						}						$msg = $user->lang['DRAFTS_DELETED'];						unset($drafts);					}					else					{						$msg = $user->lang['FORM_INVALID'];					}					$message = $msg . '<br /><br />' . sprintf($user->lang['RETURN_UCP'], '<a href="' . $this->u_action . '">', '</a>');					meta_refresh(3, $this->u_action);					trigger_error($message);				}				if ($submit && $edit)				{					$draft_subject = utf8_normalize_nfc(request_var('subject', '', true));					$draft_message = utf8_normalize_nfc(request_var('message', '', true));					if (check_form_key('ucp_draft'))					{						if ($draft_message && $draft_subject)						{							$draft_row = array(								'draft_subject' => $draft_subject,								'draft_message' => $draft_message							);							$sql = 'UPDATE ' . DRAFTS_TABLE . '								SET ' . $db->sql_build_array('UPDATE', $draft_row) . "								WHERE draft_id = $draft_id									AND user_id = " . $user->data['user_id'];							$db->sql_query($sql);							$message = $user->lang['DRAFT_UPDATED'] . '<br /><br />' . sprintf($user->lang['RETURN_UCP'], '<a href="' . $this->u_action . '">', '</a>');							meta_refresh(3, $this->u_action);							trigger_error($message);						}						else						{							$template->assign_var('ERROR', ($draft_message == '') ? $user->lang['EMPTY_DRAFT'] : (($draft_subject == '') ? $user->lang['EMPTY_DRAFT_TITLE'] : ''));						}					}					else					{						$template->assign_var('ERROR', $user->lang['FORM_INVALID']);					}				}				if (!$pm_drafts)				{					$sql = 'SELECT d.*, f.forum_name						FROM ' . DRAFTS_TABLE . ' d, ' . FORUMS_TABLE . ' f						WHERE d.user_id = ' . $user->data['user_id'] . ' ' .							(($edit) ? "AND d.draft_id = $draft_id" : '') . '							AND f.forum_id = d.forum_id						ORDER BY d.save_time DESC';				}				else				{					$sql = 'SELECT * FROM ' . DRAFTS_TABLE . '						WHERE user_id = ' . $user->data['user_id'] . ' ' .							(($edit) ? "AND draft_id = $draft_id" : '') . '							AND forum_id = 0							AND topic_id = 0						ORDER BY save_time DESC';				}				$result = $db->sql_query($sql);				$draftrows = $topic_ids = array();				while ($row = $db->sql_fetchrow($result))				{					if ($row['topic_id'])					{						$topic_ids[] = (int) $row['topic_id'];					}					$draftrows[] = $row;				}				$db->sql_freeresult($result);				if (sizeof($topic_ids))				{					$sql = 'SELECT topic_id, forum_id, topic_title						FROM ' . TOPICS_TABLE . '						WHERE ' . $db->sql_in_set('topic_id', array_unique($topic_ids));					$result = $db->sql_query($sql);					while ($row = $db->sql_fetchrow($result))					{						$topic_rows[$row['topic_id']] = $row;					}					$db->sql_freeresult($result);				}				unset($topic_ids);				$template->assign_var('S_EDIT_DRAFT', $edit);				$row_count = 0;				foreach ($draftrows as $draft)				{					$link_topic = $link_forum = $link_pm = false;					$insert_url = $view_url = $title = '';					if (isset($topic_rows[$draft['topic_id']]) && $auth->acl_get('f_read', $topic_rows[$draft['topic_id']]['forum_id']))					{						$link_topic = true;						$view_url = append_sid("{$phpbb_root_path}viewtopic.$phpEx", 'f=' . $topic_rows[$draft['topic_id']]['forum_id'] . '&amp;t=' . $draft['topic_id']);						$title = $topic_rows[$draft['topic_id']]['topic_title'];						$insert_url = append_sid("{$phpbb_root_path}posting.$phpEx", 'f=' . $topic_rows[$draft['topic_id']]['forum_id'] . '&amp;t=' . $draft['topic_id'] . '&amp;mode=reply&amp;d=' . $draft['draft_id']);					}					else if ($auth->acl_get('f_read', $draft['forum_id']))					{						$link_forum = true;						$view_url = append_sid("{$phpbb_root_path}viewforum.$phpEx", 'f=' . $draft['forum_id']);						$title = $draft['forum_name'];						$insert_url = append_sid("{$phpbb_root_path}posting.$phpEx", 'f=' . $draft['forum_id'] . '&amp;mode=post&amp;d=' . $draft['draft_id']);					}					else if ($pm_drafts)					{						$link_pm = true;						$insert_url = append_sid("{$phpbb_root_path}ucp.$phpEx", "i=$id&amp;mode=compose&amp;d=" . $draft['draft_id']);					}					$template_row = array(						'DATE'			=> $user->format_date($draft['save_time']),						'DRAFT_MESSAGE'	=> ($submit) ? $draft_message : $draft['draft_message'],						'DRAFT_SUBJECT'	=> ($submit) ? $draft_subject : $draft['draft_subject'],						'TITLE'			=> $title,						'DRAFT_ID'	=> $draft['draft_id'],						'FORUM_ID'	=> $draft['forum_id'],						'TOPIC_ID'	=> $draft['topic_id'],						'U_VIEW'		=> $view_url,						'U_VIEW_EDIT'	=> $this->u_action . '&amp;edit=' . $draft['draft_id'],						'U_INSERT'		=> $insert_url,						'S_LINK_TOPIC'		=> $link_topic,						'S_LINK_FORUM'		=> $link_forum,						'S_LINK_PM'			=> $link_pm,						'S_HIDDEN_FIELDS'	=> $s_hidden_fields					);					$row_count++;					($edit) ? $template->assign_vars($template_row) : $template->assign_block_vars('draftrow', $template_row);				}				if (!$edit)				{					$template->assign_var('S_DRAFT_ROWS', $row_count);				}			break;		}		$template->assign_vars(array(			'L_TITLE'			=> $user->lang['UCP_MAIN_' . strtoupper($mode)],			'S_DISPLAY_MARK_ALL'	=> ($mode == 'watched' || ($mode == 'drafts' && !isset($_GET['edit']))) ? true : false,			'S_HIDDEN_FIELDS'		=> (isset($s_hidden_fields)) ? $s_hidden_fields : '',			'S_UCP_ACTION'			=> $this->u_action,			'LAST_POST_IMG'			=> $user->img('icon_topic_latest', 'VIEW_LATEST_POST'),			'NEWEST_POST_IMG'		=> $user->img('icon_topic_newest', 'VIEW_NEWEST_POST'),		));		// Set desired template		$this->tpl_name = 'ucp_main_' . $mode;		$this->page_title = 'UCP_MAIN_' . strtoupper($mode);	}	/**	* Build and assign topiclist for bookmarks/subscribed topics	*/	function assign_topiclist($mode = 'subscribed', $forbidden_forum_ary = array())	{		global $user, $db, $template, $config, $cache, $auth, $phpbb_root_path, $phpEx;		$table = ($mode == 'subscribed') ? TOPICS_WATCH_TABLE : BOOKMARKS_TABLE;		$start = request_var('start', 0);		// Grab icons		$icons = $cache->obtain_icons();		$sql_array = array(			'SELECT'	=> 'COUNT(t.topic_id) as topics_count',			'FROM'		=> array(				$table			=> 'i',				TOPICS_TABLE	=> 't'			),			'WHERE'		=>	'i.topic_id = t.topic_id				AND i.user_id = ' . $user->data['user_id'] . '				AND ' . $db->sql_in_set('t.forum_id', $forbidden_forum_ary, true, true),		);		$sql = $db->sql_build_query('SELECT', $sql_array);		$result = $db->sql_query($sql);		$topics_count = (int) $db->sql_fetchfield('topics_count');		$db->sql_freeresult($result);		if ($topics_count)		{			$template->assign_vars(array(				'PAGINATION'	=> generate_pagination($this->u_action, $topics_count, $config['topics_per_page'], $start),				'PAGE_NUMBER'	=> on_page($topics_count, $config['topics_per_page'], $start),				'TOTAL_TOPICS'	=> ($topics_count == 1) ? $user->lang['VIEW_FORUM_TOPIC'] : sprintf($user->lang['VIEW_FORUM_TOPICS'], $topics_count))			);		}		if ($mode == 'subscribed')		{			$sql_array = array(				'SELECT'	=> 't.*, f.forum_name',				'FROM'		=> array(					TOPICS_WATCH_TABLE	=> 'tw',					TOPICS_TABLE		=> 't'				),				'WHERE'		=> 'tw.user_id = ' . $user->data['user_id'] . '					AND t.topic_id = tw.topic_id					AND ' . $db->sql_in_set('t.forum_id', $forbidden_forum_ary, true, true),				'ORDER_BY'	=> 't.topic_last_post_time DESC'			);			$sql_array['LEFT_JOIN'] = array();		}		else		{			$sql_array = array(				'SELECT'	=> 't.*, f.forum_name, b.topic_id as b_topic_id',				'FROM'		=> array(					BOOKMARKS_TABLE		=> 'b',				),				'WHERE'		=> 'b.user_id = ' . $user->data['user_id'] . '					AND ' . $db->sql_in_set('f.forum_id', $forbidden_forum_ary, true, true),				'ORDER_BY'	=> 't.topic_last_post_time DESC'			);			$sql_array['LEFT_JOIN'] = array();			$sql_array['LEFT_JOIN'][] = array('FROM' => array(TOPICS_TABLE => 't'), 'ON' => 'b.topic_id = t.topic_id');		}		$sql_array['LEFT_JOIN'][] = array('FROM' => array(FORUMS_TABLE => 'f'), 'ON' => 't.forum_id = f.forum_id');		if ($config['load_db_lastread'])		{			$sql_array['LEFT_JOIN'][] = array('FROM' => array(FORUMS_TRACK_TABLE => 'ft'), 'ON' => 'ft.forum_id = t.forum_id AND ft.user_id = ' . $user->data['user_id']);			$sql_array['LEFT_JOIN'][] = array('FROM' => array(TOPICS_TRACK_TABLE => 'tt'), 'ON' => 'tt.topic_id = t.topic_id AND tt.user_id = ' . $user->data['user_id']);			$sql_array['SELECT'] .= ', tt.mark_time, ft.mark_time AS forum_mark_time';		}		if ($config['load_db_track'])		{			$sql_array['LEFT_JOIN'][] = array('FROM' => array(TOPICS_POSTED_TABLE => 'tp'), 'ON' => 'tp.topic_id = t.topic_id AND tp.user_id = ' . $user->data['user_id']);			$sql_array['SELECT'] .= ', tp.topic_posted';		}		$sql = $db->sql_build_query('SELECT', $sql_array);		$result = $db->sql_query_limit($sql, $config['topics_per_page'], $start);		$topic_list = $topic_forum_list = $global_announce_list = $rowset = array();		while ($row = $db->sql_fetchrow($result))		{			$topic_id = (isset($row['b_topic_id'])) ? $row['b_topic_id'] : $row['topic_id'];			$topic_list[] = $topic_id;			$rowset[$topic_id] = $row;			$topic_forum_list[$row['forum_id']]['forum_mark_time'] = ($config['load_db_lastread']) ? $row['forum_mark_time'] : 0;			$topic_forum_list[$row['forum_id']]['topics'][] = $topic_id;			if ($row['topic_type'] == POST_GLOBAL)			{				$global_announce_list[] = $topic_id;			}		}		$db->sql_freeresult($result);		$topic_tracking_info = array();		if ($config['load_db_lastread'])		{			foreach ($topic_forum_list as $f_id => $topic_row)			{				$topic_tracking_info += get_topic_tracking($f_id, $topic_row['topics'], $rowset, array($f_id => $topic_row['forum_mark_time']), ($f_id == 0) ? $global_announce_list : false);			}		}		else		{			foreach ($topic_forum_list as $f_id => $topic_row)			{				$topic_tracking_info += get_complete_topic_tracking($f_id, $topic_row['topics'], $global_announce_list);			}		}		foreach ($topic_list as $topic_id)		{			$row = &$rowset[$topic_id];			$forum_id = $row['forum_id'];			$topic_id = (isset($row['b_topic_id'])) ? $row['b_topic_id'] : $row['topic_id'];			$unread_topic = (isset($topic_tracking_info[$topic_id]) && $row['topic_last_post_time'] > $topic_tracking_info[$topic_id]) ? true : false;			// Replies			$replies = ($auth->acl_get('m_approve', $forum_id)) ? $row['topic_replies_real'] : $row['topic_replies'];			if ($row['topic_status'] == ITEM_MOVED && !empty($row['topic_moved_id']))			{				$topic_id = $row['topic_moved_id'];			}			// Get folder img, topic status/type related information			$folder_img = $folder_alt = $topic_type = '';			topic_status($row, $replies, $unread_topic, $folder_img, $folder_alt, $topic_type);			$view_topic_url_params = "f=$forum_id&amp;t=$topic_id";			$view_topic_url = append_sid("{$phpbb_root_path}viewtopic.$phpEx", $view_topic_url_params);			// Send vars to template			$template->assign_block_vars('topicrow', array(				'FORUM_ID'					=> $forum_id,				'TOPIC_ID'					=> $topic_id,				'FIRST_POST_TIME'			=> $user->format_date($row['topic_time']),				'LAST_POST_SUBJECT'			=> $row['topic_last_post_subject'],				'LAST_POST_TIME'			=> $user->format_date($row['topic_last_post_time']),				'LAST_VIEW_TIME'			=> $user->format_date($row['topic_last_view_time']),				'TOPIC_AUTHOR'				=> get_username_string('username', $row['topic_poster'], $row['topic_first_poster_name'], $row['topic_first_poster_colour']),				'TOPIC_AUTHOR_COLOUR'		=> get_username_string('colour', $row['topic_poster'], $row['topic_first_poster_name'], $row['topic_first_poster_colour']),				'TOPIC_AUTHOR_FULL'			=> get_username_string('full', $row['topic_poster'], $row['topic_first_poster_name'], $row['topic_first_poster_colour']),				'U_TOPIC_AUTHOR'			=> get_username_string('profile', $row['topic_poster'], $row['topic_first_poster_name'], $row['topic_first_poster_colour']),				'LAST_POST_AUTHOR'			=> get_username_string('username', $row['topic_last_poster_id'], $row['topic_last_poster_name'], $row['topic_last_poster_colour']),				'LAST_POST_AUTHOR_COLOUR'	=> get_username_string('colour', $row['topic_last_poster_id'], $row['topic_last_poster_name'], $row['topic_last_poster_colour']),				'LAST_POST_AUTHOR_FULL'		=> get_username_string('full', $row['topic_last_poster_id'], $row['topic_last_poster_name'], $row['topic_last_poster_colour']),				'U_LAST_POST_AUTHOR'		=> get_username_string('profile', $row['topic_last_poster_id'], $row['topic_last_poster_name'], $row['topic_last_poster_colour']),				'S_DELETED_TOPIC'	=> (!$row['topic_id']) ? true : false,				'S_GLOBAL_TOPIC'	=> (!$forum_id) ? true : false,				'PAGINATION'		=> topic_generate_pagination($replies, append_sid("{$phpbb_root_path}viewtopic.$phpEx", 'f=' . (($row['forum_id']) ? $row['forum_id'] : $forum_id) . "&amp;t=$topic_id")),				'REPLIES'			=> $replies,				'VIEWS'				=> $row['topic_views'],				'TOPIC_TITLE'		=> censor_text($row['topic_title']),				'TOPIC_TYPE'		=> $topic_type,				'FORUM_NAME'		=> $row['forum_name'],				'TOPIC_FOLDER_IMG'		=> $user->img($folder_img, $folder_alt),				'TOPIC_FOLDER_IMG_SRC'	=> $user->img($folder_img, $folder_alt, false, '', 'src'),				'TOPIC_FOLDER_IMG_ALT'	=> $user->lang[$folder_alt],				'TOPIC_ICON_IMG'		=> (!empty($icons[$row['icon_id']])) ? $icons[$row['icon_id']]['img'] : '',				'TOPIC_ICON_IMG_WIDTH'	=> (!empty($icons[$row['icon_id']])) ? $icons[$row['icon_id']]['width'] : '',				'TOPIC_ICON_IMG_HEIGHT'	=> (!empty($icons[$row['icon_id']])) ? $icons[$row['icon_id']]['height'] : '',				'ATTACH_ICON_IMG'		=> ($auth->acl_get('u_download') && $auth->acl_get('f_download', $forum_id) && $row['topic_attachment']) ? $user->img('icon_topic_attach', $user->lang['TOTAL_ATTACHMENTS']) : '',				'S_TOPIC_TYPE'			=> $row['topic_type'],				'S_USER_POSTED'			=> (!empty($row['topic_posted'])) ? true : false,				'S_UNREAD_TOPIC'		=> $unread_topic,				'U_NEWEST_POST'			=> append_sid("{$phpbb_root_path}viewtopic.$phpEx", $view_topic_url_params . '&amp;view=unread') . '#unread',				'U_LAST_POST'			=> append_sid("{$phpbb_root_path}viewtopic.$phpEx", $view_topic_url_params . '&amp;p=' . $row['topic_last_post_id']) . '#p' . $row['topic_last_post_id'],				'U_VIEW_TOPIC'			=> $view_topic_url,				'U_VIEW_FORUM'			=> append_sid("{$phpbb_root_path}viewforum.$phpEx", 'f=' . $forum_id),			));		}	}}?>
<?php/**** @package acp* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @package module_install*/class acp_php_info_info{	function module()	{		return array(			'filename'	=> 'acp_php_info',			'title'		=> 'ACP_PHP_INFO',			'version'	=> '1.0.0',			'modes'		=> array(				'info'		=> array('title' => 'ACP_PHP_INFO', 'auth' => 'acl_a_phpinfo', 'cat' => array('ACP_GENERAL_TASKS')),			),		);	}	function install()	{	}	function uninstall()	{	}}?>
<?php/**** @package diff* @version $Id$* @copyright (c) 2006 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @ignore*/if (!defined('IN_PHPBB')){	exit;}/*** Code from pear.php.net, Text_Diff-1.1.0 package* http://pear.php.net/package/Text_Diff/ (native engine)** Modified by phpBB Group to meet our coding standards* and being able to integrate into phpBB** Class used internally by Text_Diff to actually compute the diffs. This* class is implemented using native PHP code.** The algorithm used here is mostly lifted from the perl module* Algorithm::Diff (version 1.06) by Ned Konz, which is available at:* http://www.perl.com/CPAN/authors/id/N/NE/NEDKONZ/Algorithm-Diff-1.06.zip** More ideas are taken from: http://www.ics.uci.edu/~eppstein/161/960229.html** Some ideas (and a bit of code) are taken from analyze.c, of GNU* diffutils-2.7, which can be found at:* ftp://gnudist.gnu.org/pub/gnu/diffutils/diffutils-2.7.tar.gz** Some ideas (subdivision by NCHUNKS > 2, and some optimizations) are from* Geoffrey T. Dairiki <dairiki@dairiki.org>. The original PHP version of this* code was written by him, and is used/adapted with his permission.** Copyright 2004-2008 The Horde Project (http://www.horde.org/)** @author  Geoffrey T. Dairiki <dairiki@dairiki.org>* @package diff** @access private*/class diff_engine{	/**	* If set to true we trim all lines before we compare them. This ensures that sole space/tab changes do not trigger diffs.	*/	var $skip_whitespace_changes = true;	function diff(&$from_lines, &$to_lines, $preserve_cr = true)	{		// Remove empty lines...		// If preserve_cr is true, we basically only change \r\n and bare \r to \n to get the same carriage returns for both files		// If it is false, we try to only use \n once per line and ommit all empty lines to be able to get a proper data diff		if (is_array($from_lines))		{			$from_lines = implode("\n", $from_lines);		}		if (is_array($to_lines))		{			$to_lines = implode("\n", $to_lines);		}		if ($preserve_cr)		{			$from_lines = explode("\n", str_replace("\r", "\n", str_replace("\r\n", "\n", $from_lines)));			$to_lines = explode("\n", str_replace("\r", "\n", str_replace("\r\n", "\n", $to_lines)));		}		else		{			$from_lines = explode("\n", preg_replace('#[\n\r]+#', "\n", $from_lines));			$to_lines = explode("\n", preg_replace('#[\n\r]+#', "\n", $to_lines));		}		$n_from = sizeof($from_lines);		$n_to = sizeof($to_lines);		$this->xchanged = $this->ychanged = $this->xv = $this->yv = $this->xind = $this->yind = array();		unset($this->seq, $this->in_seq, $this->lcs);		// Skip leading common lines.		for ($skip = 0; $skip < $n_from && $skip < $n_to; $skip++)		{			if (trim($from_lines[$skip]) !== trim($to_lines[$skip]))			{				break;			}			$this->xchanged[$skip] = $this->ychanged[$skip] = false;		}		// Skip trailing common lines.		$xi = $n_from;		$yi = $n_to;		for ($endskip = 0; --$xi > $skip && --$yi > $skip; $endskip++)		{			if (trim($from_lines[$xi]) !== trim($to_lines[$yi]))			{				break;			}			$this->xchanged[$xi] = $this->ychanged[$yi] = false;		}		// Ignore lines which do not exist in both files.		for ($xi = $skip; $xi < $n_from - $endskip; $xi++)		{			if ($this->skip_whitespace_changes) $xhash[trim($from_lines[$xi])] = 1; else $xhash[$from_lines[$xi]] = 1;		}		for ($yi = $skip; $yi < $n_to - $endskip; $yi++)		{			$line = ($this->skip_whitespace_changes) ? trim($to_lines[$yi]) : $to_lines[$yi];			if (($this->ychanged[$yi] = empty($xhash[$line])))			{				continue;			}			$yhash[$line] = 1;			$this->yv[] = $line;			$this->yind[] = $yi;		}		for ($xi = $skip; $xi < $n_from - $endskip; $xi++)		{			$line = ($this->skip_whitespace_changes) ? trim($from_lines[$xi]) : $from_lines[$xi];			if (($this->xchanged[$xi] = empty($yhash[$line])))			{				continue;			}			$this->xv[] = $line;			$this->xind[] = $xi;		}		// Find the LCS.		$this->_compareseq(0, sizeof($this->xv), 0, sizeof($this->yv));		// Merge edits when possible.		if ($this->skip_whitespace_changes)		{			$from_lines_clean = array_map('trim', $from_lines);			$to_lines_clean = array_map('trim', $to_lines);			$this->_shift_boundaries($from_lines_clean, $this->xchanged, $this->ychanged);			$this->_shift_boundaries($to_lines_clean, $this->ychanged, $this->xchanged);			unset($from_lines_clean, $to_lines_clean);		}		else		{			$this->_shift_boundaries($from_lines, $this->xchanged, $this->ychanged);			$this->_shift_boundaries($to_lines, $this->ychanged, $this->xchanged);		}		// Compute the edit operations.		$edits = array();		$xi = $yi = 0;		while ($xi < $n_from || $yi < $n_to)		{			// Skip matching "snake".			$copy = array();			while ($xi < $n_from && $yi < $n_to && !$this->xchanged[$xi] && !$this->ychanged[$yi])			{				$copy[] = $from_lines[$xi++];				$yi++;			}			if ($copy)			{				$edits[] = new diff_op_copy($copy);			}			// Find deletes & adds.			$delete = array();			while ($xi < $n_from && $this->xchanged[$xi])			{				$delete[] = $from_lines[$xi++];			}			$add = array();			while ($yi < $n_to && $this->ychanged[$yi])			{				$add[] = $to_lines[$yi++];			}			if ($delete && $add)			{				$edits[] = new diff_op_change($delete, $add);			}			else if ($delete)			{				$edits[] = new diff_op_delete($delete);			}			else if ($add)			{				$edits[] = new diff_op_add($add);			}		}		return $edits;	}	/**	* Divides the Largest Common Subsequence (LCS) of the sequences (XOFF,	* XLIM) and (YOFF, YLIM) into NCHUNKS approximately equally sized segments.	*	* Returns (LCS, PTS).  LCS is the length of the LCS. PTS is an array of	* NCHUNKS+1 (X, Y) indexes giving the diving points between sub	* sequences.  The first sub-sequence is contained in (X0, X1), (Y0, Y1),	* the second in (X1, X2), (Y1, Y2) and so on.  Note that (X0, Y0) ==	* (XOFF, YOFF) and (X[NCHUNKS], Y[NCHUNKS]) == (XLIM, YLIM).	*	* This function assumes that the first lines of the specified portions of	* the two files do not match, and likewise that the last lines do not	* match.  The caller must trim matching lines from the beginning and end	* of the portions it is going to specify.	*/	function _diag($xoff, $xlim, $yoff, $ylim, $nchunks)	{		$flip = false;		if ($xlim - $xoff > $ylim - $yoff)		{			// Things seems faster (I'm not sure I understand why) when the shortest sequence is in X.			$flip = true;			list($xoff, $xlim, $yoff, $ylim) = array($yoff, $ylim, $xoff, $xlim);		}		if ($flip)		{			for ($i = $ylim - 1; $i >= $yoff; $i--)			{				$ymatches[$this->xv[$i]][] = $i;			}		}		else		{			for ($i = $ylim - 1; $i >= $yoff; $i--)			{				$ymatches[$this->yv[$i]][] = $i;			}		}		$this->lcs = 0;		$this->seq[0]= $yoff - 1;		$this->in_seq = array();		$ymids[0] = array();		$numer = $xlim - $xoff + $nchunks - 1;		$x = $xoff;		for ($chunk = 0; $chunk < $nchunks; $chunk++)		{			if ($chunk > 0)			{				for ($i = 0; $i <= $this->lcs; $i++)				{					$ymids[$i][$chunk - 1] = $this->seq[$i];				}			}			$x1 = $xoff + (int)(($numer + ($xlim - $xoff) * $chunk) / $nchunks);			for (; $x < $x1; $x++)			{				$line = $flip ? $this->yv[$x] : $this->xv[$x];				if (empty($ymatches[$line]))				{					continue;				}				$matches = $ymatches[$line];				reset($matches);				while (list(, $y) = each($matches))				{					if (empty($this->in_seq[$y]))					{						$k = $this->_lcs_pos($y);						$ymids[$k] = $ymids[$k - 1];						break;					}				}				// no reset() here				while (list(, $y) = each($matches))				{					if ($y > $this->seq[$k - 1])					{						// Optimization: this is a common case: next match is just replacing previous match.						$this->in_seq[$this->seq[$k]] = false;						$this->seq[$k] = $y;						$this->in_seq[$y] = 1;					}					else if (empty($this->in_seq[$y]))					{						$k = $this->_lcs_pos($y);						$ymids[$k] = $ymids[$k - 1];					}				}			}		}		$seps[] = $flip ? array($yoff, $xoff) : array($xoff, $yoff);		$ymid = $ymids[$this->lcs];		for ($n = 0; $n < $nchunks - 1; $n++)		{			$x1 = $xoff + (int)(($numer + ($xlim - $xoff) * $n) / $nchunks);			$y1 = $ymid[$n] + 1;			$seps[] = $flip ? array($y1, $x1) : array($x1, $y1);		}		$seps[] = $flip ? array($ylim, $xlim) : array($xlim, $ylim);		return array($this->lcs, $seps);	}	function _lcs_pos($ypos)	{		$end = $this->lcs;		if ($end == 0 || $ypos > $this->seq[$end])		{			$this->seq[++$this->lcs] = $ypos;			$this->in_seq[$ypos] = 1;			return $this->lcs;		}		$beg = 1;		while ($beg < $end)		{			$mid = (int)(($beg + $end) / 2);			if ($ypos > $this->seq[$mid])			{				$beg = $mid + 1;			}			else			{				$end = $mid;			}		}		$this->in_seq[$this->seq[$end]] = false;		$this->seq[$end] = $ypos;		$this->in_seq[$ypos] = 1;		return $end;	}	/**	* Finds LCS of two sequences.	*	* The results are recorded in the vectors $this->{x,y}changed[], by	* storing a 1 in the element for each line that is an insertion or	* deletion (ie. is not in the LCS).	*	* The subsequence of file 0 is (XOFF, XLIM) and likewise for file 1.	*	* Note that XLIM, YLIM are exclusive bounds.  All line numbers are	* origin-0 and discarded lines are not counted.	*/	function _compareseq($xoff, $xlim, $yoff, $ylim)	{		// Slide down the bottom initial diagonal.		while ($xoff < $xlim && $yoff < $ylim && $this->xv[$xoff] == $this->yv[$yoff])		{			++$xoff;			++$yoff;		}		// Slide up the top initial diagonal.		while ($xlim > $xoff && $ylim > $yoff && $this->xv[$xlim - 1] == $this->yv[$ylim - 1])		{			--$xlim;			--$ylim;		}		if ($xoff == $xlim || $yoff == $ylim)		{			$lcs = 0;		}		else		{			// This is ad hoc but seems to work well.			// $nchunks = sqrt(min($xlim - $xoff, $ylim - $yoff) / 2.5);			// $nchunks = max(2,min(8,(int)$nchunks));			$nchunks = min(7, $xlim - $xoff, $ylim - $yoff) + 1;			list($lcs, $seps) = $this->_diag($xoff, $xlim, $yoff, $ylim, $nchunks);		}		if ($lcs == 0)		{			// X and Y sequences have no common subsequence: mark all changed.			while ($yoff < $ylim)			{				$this->ychanged[$this->yind[$yoff++]] = 1;			}			while ($xoff < $xlim)			{				$this->xchanged[$this->xind[$xoff++]] = 1;			}		}		else		{			// Use the partitions to split this problem into subproblems.			reset($seps);			$pt1 = $seps[0];			while ($pt2 = next($seps))			{				$this->_compareseq($pt1[0], $pt2[0], $pt1[1], $pt2[1]);				$pt1 = $pt2;			}		}	}	/**	* Adjusts inserts/deletes of identical lines to join changes as much as possible.	*	* We do something when a run of changed lines include a line at one end	* and has an excluded, identical line at the other.  We are free to	* choose which identical line is included. 'compareseq' usually chooses	* the one at the beginning, but usually it is cleaner to consider the	* following identical line to be the "change".	*	* This is extracted verbatim from analyze.c (GNU diffutils-2.7).	*/	function _shift_boundaries($lines, &$changed, $other_changed)	{		$i = 0;		$j = 0;		$len = sizeof($lines);		$other_len = sizeof($other_changed);		while (1)		{			// Scan forward to find the beginning of another run of			// changes. Also keep track of the corresponding point in the other file.			//			// Throughout this code, $i and $j are adjusted together so that			// the first $i elements of $changed and the first $j elements of			// $other_changed both contain the same number of zeros (unchanged lines).			//			// Furthermore, $j is always kept so that $j == $other_len or $other_changed[$j] == false.			while ($j < $other_len && $other_changed[$j])			{				$j++;			}			while ($i < $len && ! $changed[$i])			{				$i++;				$j++;				while ($j < $other_len && $other_changed[$j])				{					$j++;				}			}			if ($i == $len)			{				break;			}			$start = $i;			// Find the end of this run of changes.			while (++$i < $len && $changed[$i])			{				continue;			}			do			{				// Record the length of this run of changes, so that we can later determine whether the run has grown.				$runlength = $i - $start;				// Move the changed region back, so long as the previous unchanged line matches the last changed one.				// This merges with previous changed regions.				while ($start > 0 && $lines[$start - 1] == $lines[$i - 1])				{					$changed[--$start] = 1;					$changed[--$i] = false;					while ($start > 0 && $changed[$start - 1])					{						$start--;					}					while ($other_changed[--$j])					{						continue;					}				}				// Set CORRESPONDING to the end of the changed run, at the last point where it corresponds to a changed run in the				// other file. CORRESPONDING == LEN means no such point has been found.				$corresponding = $j < $other_len ? $i : $len;				// Move the changed region forward, so long as the first changed line matches the following unchanged one.				// This merges with following changed regions.				// Do this second, so that if there are no merges, the changed region is moved forward as far as possible.				while ($i < $len && $lines[$start] == $lines[$i])				{					$changed[$start++] = false;					$changed[$i++] = 1;					while ($i < $len && $changed[$i])					{						$i++;					}					$j++;					if ($j < $other_len && $other_changed[$j])					{						$corresponding = $i;						while ($j < $other_len && $other_changed[$j])						{							$j++;						}					}				}			}			while ($runlength != $i - $start);			// If possible, move the fully-merged run of changes back to a corresponding run in the other file.			while ($corresponding < $i)			{				$changed[--$start] = 1;				$changed[--$i] = 0;				while ($other_changed[--$j])				{					continue;				}			}		}	}}?>
<?php/*** Only adjust bitfields, do not rewrite text...* All new parsings have the img, flash and quote modes set to true** You should make a backup from your users, posts and privmsgs table in case something goes wrong* Forum descriptions and rules need to be re-submitted manually.*/die("Please read the first lines of this script for instructions on how to enable it");set_time_limit(0);define('IN_PHPBB', true);$phpbb_root_path = './../';$phpEx = substr(strrchr(__FILE__, '.'), 1);include($phpbb_root_path . 'common.'.$phpEx);include($phpbb_root_path . 'includes/message_parser.' . $phpEx);// Start session management$user->session_begin();$auth->acl($user->data);$user->setup();$echos = 0;// Adjust user signatures$message_parser = new parse_message();$message_parser->mode = 'sig';$message_parser->bbcode_init();$sql = 'SELECT user_id, user_sig, user_sig_bbcode_uid, user_sig_bbcode_bitfield	FROM ' . USERS_TABLE;$result = $db->sql_query($sql);while ($row = $db->sql_fetchrow($result)){	// Convert bbcodes back to their normal form	if ($row['user_sig_bbcode_uid'] && $row['user_sig'])	{		decode_message($row['user_sig'], $row['user_sig_bbcode_uid']);		$message_parser->message = $row['user_sig'];		$message_parser->prepare_bbcodes();		$message_parser->parse_bbcode();		$bitfield = $message_parser->bbcode_bitfield;		$sql = 'UPDATE ' . USERS_TABLE . " SET user_sig_bbcode_bitfield = '" . $db->sql_escape($bitfield) . "'			WHERE user_id = " . $row['user_id'];		$db->sql_query($sql);		if ($echos > 200)		{			echo '<br />' . "\n";			$echos = 0;		}		echo '.';		$echos++;		flush();	}	else	{		$sql = 'UPDATE ' . USERS_TABLE . " SET user_sig_bbcode_bitfield = ''			WHERE user_id = " . $row['user_id'];		$db->sql_query($sql);	}}$db->sql_freeresult($result);// Now adjust posts$message_parser = new parse_message();$message_parser->mode = 'post';$message_parser->bbcode_init();// Update posts$sql = 'SELECT post_id, post_text, bbcode_uid, enable_bbcode, enable_smilies, enable_sig	FROM ' . POSTS_TABLE;$result = $db->sql_query($sql);while ($row = $db->sql_fetchrow($result)){	// Convert bbcodes back to their normal form	if ($row['enable_bbcode'])	{		decode_message($row['post_text'], $row['bbcode_uid']);		$message_parser->message = $row['post_text'];		$message_parser->prepare_bbcodes();		$message_parser->parse_bbcode();		$bitfield = $message_parser->bbcode_bitfield;		$sql = 'UPDATE ' . POSTS_TABLE . " SET bbcode_bitfield = '" . $db->sql_escape($bitfield) . "'			WHERE post_id = " . $row['post_id'];		$db->sql_query($sql);		if ($echos > 200)		{			echo '<br />' . "\n";			$echos = 0;		}		echo '.';		$echos++;		flush();	}	else	{		$sql = 'UPDATE ' . POSTS_TABLE . " SET bbcode_bitfield = ''			WHERE post_id = " . $row['post_id'];		$db->sql_query($sql);	}}$db->sql_freeresult($result);// Now to the private messages$message_parser = new parse_message();$message_parser->mode = 'post';$message_parser->bbcode_init();// Update pms$sql = 'SELECT msg_id, message_text, bbcode_uid, enable_bbcode	FROM ' . PRIVMSGS_TABLE;$result = $db->sql_query($sql);while ($row = $db->sql_fetchrow($result)){	// Convert bbcodes back to their normal form	if ($row['enable_bbcode'])	{		decode_message($row['message_text'], $row['bbcode_uid']);		$message_parser->message = $row['message_text'];		$message_parser->prepare_bbcodes();		$message_parser->parse_bbcode();		$bitfield = $message_parser->bbcode_bitfield;		$sql = 'UPDATE ' . PRIVMSGS_TABLE . " SET bbcode_bitfield = '" . $db->sql_escape($bitfield) . "'			WHERE msg_id = " . $row['msg_id'];		$db->sql_query($sql);		if ($echos > 200)		{			echo '<br />' . "\n";			$echos = 0;		}		echo '.';		$echos++;		flush();	}	else	{		$sql = 'UPDATE ' . PRIVMSGS_TABLE . " SET bbcode_bitfield = ''			WHERE msg_id = " . $row['msg_id'];		$db->sql_query($sql);	}}$db->sql_freeresult($result);// Done$db->sql_close();?>
<?php/**** @package acm* @version $Id$* @copyright (c) 2005, 2009 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @ignore*/if (!defined('IN_PHPBB')){	exit;}// Include the abstract baseif (!class_exists('acm_memory')){	require("{$phpbb_root_path}includes/acm/acm_memory.$phpEx");}/*** ACM for APC* @package acm*/class acm extends acm_memory{	var $extension = 'apc';	/**	* Purge cache data	*	* @return void	*/	function purge()	{		apc_clear_cache('user');		parent::purge();	}	/**	* Fetch an item from the cache	*	* @access protected	* @param string $var Cache key	* @return mixed Cached data	*/	function _read($var)	{		return apc_fetch($this->key_prefix . $var);	}	/**	* Store data in the cache	*	* @access protected	* @param string $var Cache key	* @param mixed $data Data to store	* @param int $ttl Time-to-live of cached data	* @return bool True if the operation succeeded	*/	function _write($var, $data, $ttl = 2592000)	{		return apc_store($this->key_prefix . $var, $data, $ttl);	}	/**	* Remove an item from the cache	*	* @access protected	* @param string $var Cache key	* @return bool True if the operation succeeded	*/	function _delete($var)	{		return apc_delete($this->key_prefix . $var);	}}?>
<?php/**** acp_database [English]** @package language* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** DO NOT CHANGE*/if (!defined('IN_PHPBB')){	exit;}if (empty($lang) || !is_array($lang)){	$lang = array();}// DEVELOPERS PLEASE NOTE//// All language files should use UTF-8 as their encoding and the files must not contain a BOM.//// Placeholders can now contain order information, e.g. instead of// 'Page %s of %s' you can (and should) write 'Page %1$s of %2$s', this allows// translators to re-order the output of data while ensuring it remains correct//// You do not need this where single placeholders are used, e.g. 'Message %d' is fine// equally where a string contains only two placeholders which are used to wrap text// in a url you again do not need to specify an order e.g., 'Click %sHERE%s' is fine// Database Backup/Restore$lang = array_merge($lang, array(	'ACP_BACKUP_EXPLAIN'	=> 'Here you can backup all your phpBB related data. You may store the resulting archive in your <samp>store/</samp> folder or download it directly. Depending on your server configuration you may be able to compress the file in a number of formats.',	'ACP_RESTORE_EXPLAIN'	=> 'This will perform a full restore of all phpBB tables from a saved file. If your server supports it you may use a gzip or bzip2 compressed text file and it will automatically be decompressed. <strong>WARNING</strong> This will overwrite any existing data. The restore may take a long time to process please do not move from this page till it is complete. Backups are stored in the <samp>store/</samp> folder and are assumed to be generated by phpBBs backup functionality. Restoring backups that were not created by the built in system may or may not work.',	'BACKUP_DELETE'		=> 'The backup file has been deleted successfully.',	'BACKUP_INVALID'	=> 'The selected file to backup is invalid.',	'BACKUP_OPTIONS'	=> 'Backup options',	'BACKUP_SUCCESS'	=> 'The backup file has been created successfully.',	'BACKUP_TYPE'		=> 'Backup type',	'DATABASE'			=> 'Database utilities',	'DATA_ONLY'			=> 'Data only',	'DELETE_BACKUP'		=> 'Delete backup',	'DELETE_SELECTED_BACKUP'	=> 'Are you sure you want to delete the selected backup?',	'DESELECT_ALL'		=> 'Deselect all',	'DOWNLOAD_BACKUP'	=> 'Download backup',	'FILE_TYPE'			=> 'File type',	'FILE_WRITE_FAIL'	=> 'Unable to write file to storage folder.',	'FULL_BACKUP'		=> 'Full',	'RESTORE_FAILURE'		=> 'The backup file may be corrupt.',	'RESTORE_OPTIONS'		=> 'Restore options',	'RESTORE_SELECTED_BACKUP'	=> 'Are you sure you want to restore the selected backup?',	'RESTORE_SUCCESS'		=> 'The database has been successfully restored.<br /><br />Your board should be back to the state it was when the backup was made.',	'SELECT_ALL'			=> 'Select all',	'SELECT_FILE'			=> 'Select a file',	'START_BACKUP'			=> 'Start backup',	'START_RESTORE'			=> 'Start restore',	'STORE_AND_DOWNLOAD'	=> 'Store and download',	'STORE_LOCAL'			=> 'Store file locally',	'STRUCTURE_ONLY'		=> 'Structure only',	'TABLE_SELECT'		=> 'Table select',	'TABLE_SELECT_ERROR'=> 'You must select at least one table.',));?>
<?php/**** search_ignore_words [English]** @package language* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**/if (!defined('IN_PHPBB')){	exit;}$words = array(	'a',	'about',	'after',	'ago',	'all',	'almost',	'along',	'alot',	'also',	'am',	'an',	'and',	'answer',	'any',	'anybody',	'anybodys',	'anywhere',	'are',	'arent',	'around',	'as',	'ask',	'askd',	'at',	'bad',	'be',	'because',	'been',	'before',	'being',	'best',	'better',	'between',	'big',	'btw',	'but',	'by',	'can',	'cant',	'come',	'could',	'couldnt',	'day',	'days',	'days',	'did',	'didnt',	'do',	'does',	'doesnt',	'dont',	'down',	'each',	'etc',	'either',	'else',	'even',	'ever',	'every',	'everybody',	'everybodys',	'everyone',	'far',	'find',	'for',	'found',	'from',	'get',	'go',	'going',	'gone',	'good',	'got',	'gotten',	'had',	'has',	'have',	'havent',	'having',	'her',	'here',	'hers',	'him',	'his',	'home',	'how',	'hows',	'href',	'I',	'Ive',	'if',	'in',	'ini',	'into',	'is',	'isnt',	'it',	'its',	'its',	'just',	'know',	'large',	'less',	'like',	'liked',	'little',	'looking',	'look',	'looked',	'looking',	'lot',	'maybe',	'many',	'me',	'more',	'most',	'much',	'must',	'mustnt',	'my',	'near',	'need',	'never',	'new',	'news',	'no',	'none',	'not',	'nothing',	'now',	'of',	'off',	'often',	'old',	'on',	'once',	'only',	'oops',	'or',	'other',	'our',	'ours',	'out',	'over',	'page',	'please',	'put',	'question',	'questions',	'questioned',	'quote',	'rather',	'really',	'recent',	'said',	'saw',	'say',	'says',	'she',	'see',	'sees',	'should',	'sites',	'small',	'so',	'some',	'something',	'sometime',	'somewhere',	'soon',	'take',	'than',	'true',	'thank',	'that',	'thatd',	'thats',	'the',	'their',	'theirs',	'theres',	'theirs',	'them',	'then',	'there',	'these',	'they',	'theyll',	'theyd',	'theyre',	'this',	'those',	'though',	'through',	'thus',	'time',	'times',	'to',	'too',	'under',	'until',	'untrue',	'up',	'upon',	'use',	'users',	'version',	'very',	'via',	'want',	'was',	'way',	'we',	'well',	'went',	'were',	'werent',	'what',	'when',	'where',	'which',	'who',	'whom',	'whose',	'why',	'wide',	'will',	'with',	'within',	'without',	'wont',	'world',	'worse',	'worst',	'would',	'wrote',	'www',	'yes',	'yet',	'you',	'youd',	'youll',	'your',	'youre',	'yours',	'AFAIK',	'IIRC',	'LOL',	'ROTF',	'ROTFLMAO',	'YMMV',);?>
<?php/**** @package acm* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @ignore*/if (!defined('IN_PHPBB')){	exit;}/*** Class for grabbing/handling cached entries, extends acm_file or acm_db depending on the setup* @package acm*/class cache extends acm{	/**	* Get config values	*/	function obtain_config()	{		global $db;		if (($config = $this->get('config')) !== false)		{			$sql = 'SELECT config_name, config_value				FROM ' . CONFIG_TABLE . '				WHERE is_dynamic = 1';			$result = $db->sql_query($sql);			while ($row = $db->sql_fetchrow($result))			{				$config[$row['config_name']] = $row['config_value'];			}			$db->sql_freeresult($result);		}		else		{			$config = $cached_config = array();			$sql = 'SELECT config_name, config_value, is_dynamic				FROM ' . CONFIG_TABLE;			$result = $db->sql_query($sql);			while ($row = $db->sql_fetchrow($result))			{				if (!$row['is_dynamic'])				{					$cached_config[$row['config_name']] = $row['config_value'];				}				$config[$row['config_name']] = $row['config_value'];			}			$db->sql_freeresult($result);			$this->put('config', $cached_config);		}		return $config;	}	/**	* Obtain list of naughty words and build preg style replacement arrays for use by the	* calling script	*/	function obtain_word_list()	{		global $db;		if (($censors = $this->get('_word_censors')) === false)		{			$sql = 'SELECT word, replacement				FROM ' . WORDS_TABLE;			$result = $db->sql_query($sql);			$censors = array();			while ($row = $db->sql_fetchrow($result))			{				$censors['match'][] = get_censor_preg_expression($row['word']);				$censors['replace'][] = $row['replacement'];			}			$db->sql_freeresult($result);			$this->put('_word_censors', $censors);		}		return $censors;	}	/**	* Obtain currently listed icons	*/	function obtain_icons()	{		if (($icons = $this->get('_icons')) === false)		{			global $db;			// Topic icons			$sql = 'SELECT *				FROM ' . ICONS_TABLE . '				ORDER BY icons_order';			$result = $db->sql_query($sql);			$icons = array();			while ($row = $db->sql_fetchrow($result))			{				$icons[$row['icons_id']]['img'] = $row['icons_url'];				$icons[$row['icons_id']]['width'] = (int) $row['icons_width'];				$icons[$row['icons_id']]['height'] = (int) $row['icons_height'];				$icons[$row['icons_id']]['display'] = (bool) $row['display_on_posting'];			}			$db->sql_freeresult($result);			$this->put('_icons', $icons);		}		return $icons;	}	/**	* Obtain ranks	*/	function obtain_ranks()	{		if (($ranks = $this->get('_ranks')) === false)		{			global $db;			$sql = 'SELECT *				FROM ' . RANKS_TABLE . '				ORDER BY rank_min DESC';			$result = $db->sql_query($sql);			$ranks = array();			while ($row = $db->sql_fetchrow($result))			{				if ($row['rank_special'])				{					$ranks['special'][$row['rank_id']] = array(						'rank_title'	=>	$row['rank_title'],						'rank_image'	=>	$row['rank_image']					);				}				else				{					$ranks['normal'][] = array(						'rank_title'	=>	$row['rank_title'],						'rank_min'		=>	$row['rank_min'],						'rank_image'	=>	$row['rank_image']					);				}			}			$db->sql_freeresult($result);			$this->put('_ranks', $ranks);		}		return $ranks;	}	/**	* Obtain allowed extensions	*	* @param mixed $forum_id If false then check for private messaging, if int then check for forum id. If true, then only return extension informations.	*	* @return array allowed extensions array.	*/	function obtain_attach_extensions($forum_id)	{		if (($extensions = $this->get('_extensions')) === false)		{			global $db;			$extensions = array(				'_allowed_post'	=> array(),				'_allowed_pm'	=> array(),			);			// The rule is to only allow those extensions defined. ;)			$sql = 'SELECT e.extension, g.*				FROM ' . EXTENSIONS_TABLE . ' e, ' . EXTENSION_GROUPS_TABLE . ' g				WHERE e.group_id = g.group_id					AND (g.allow_group = 1 OR g.allow_in_pm = 1)';			$result = $db->sql_query($sql);			while ($row = $db->sql_fetchrow($result))			{				$extension = strtolower(trim($row['extension']));				$extensions[$extension] = array(					'display_cat'	=> (int) $row['cat_id'],					'download_mode'	=> (int) $row['download_mode'],					'upload_icon'	=> trim($row['upload_icon']),					'max_filesize'	=> (int) $row['max_filesize'],					'allow_group'	=> $row['allow_group'],					'allow_in_pm'	=> $row['allow_in_pm'],				);				$allowed_forums = ($row['allowed_forums']) ? unserialize(trim($row['allowed_forums'])) : array();				// Store allowed extensions forum wise				if ($row['allow_group'])				{					$extensions['_allowed_post'][$extension] = (!sizeof($allowed_forums)) ? 0 : $allowed_forums;				}				if ($row['allow_in_pm'])				{					$extensions['_allowed_pm'][$extension] = 0;				}			}			$db->sql_freeresult($result);			$this->put('_extensions', $extensions);		}		// Forum post		if ($forum_id === false)		{			// We are checking for private messages, therefore we only need to get the pm extensions...			$return = array('_allowed_' => array());			foreach ($extensions['_allowed_pm'] as $extension => $check)			{				$return['_allowed_'][$extension] = 0;				$return[$extension] = $extensions[$extension];			}			$extensions = $return;		}		else if ($forum_id === true)		{			return $extensions;		}		else		{			$forum_id = (int) $forum_id;			$return = array('_allowed_' => array());			foreach ($extensions['_allowed_post'] as $extension => $check)			{				// Check for allowed forums				if (is_array($check))				{					$allowed = (!in_array($forum_id, $check)) ? false : true;				}				else				{					$allowed = true;				}				if ($allowed)				{					$return['_allowed_'][$extension] = 0;					$return[$extension] = $extensions[$extension];				}			}			$extensions = $return;		}		if (!isset($extensions['_allowed_']))		{			$extensions['_allowed_'] = array();		}		return $extensions;	}	/**	* Obtain active bots	*/	function obtain_bots()	{		if (($bots = $this->get('_bots')) === false)		{			global $db;			switch ($db->sql_layer)			{				case 'mssql':				case 'mssql_odbc':				case 'mssqlnative':					$sql = 'SELECT user_id, bot_agent, bot_ip						FROM ' . BOTS_TABLE . '						WHERE bot_active = 1					ORDER BY LEN(bot_agent) DESC';				break;				case 'firebird':					$sql = 'SELECT user_id, bot_agent, bot_ip						FROM ' . BOTS_TABLE . '						WHERE bot_active = 1					ORDER BY CHAR_LENGTH(bot_agent) DESC';				break;				// LENGTH supported by MySQL, IBM DB2 and Oracle for sure...				default:					$sql = 'SELECT user_id, bot_agent, bot_ip						FROM ' . BOTS_TABLE . '						WHERE bot_active = 1					ORDER BY LENGTH(bot_agent) DESC';				break;			}			$result = $db->sql_query($sql);			$bots = array();			while ($row = $db->sql_fetchrow($result))			{				$bots[] = $row;			}			$db->sql_freeresult($result);			$this->put('_bots', $bots);		}		return $bots;	}	/**	* Obtain cfg file data	*/	function obtain_cfg_items($theme)	{		global $config, $phpbb_root_path;		$parsed_items = array(			'theme'		=> array(),			'template'	=> array(),			'imageset'	=> array()		);		foreach ($parsed_items as $key => $parsed_array)		{			$parsed_array = $this->get('_cfg_' . $key . '_' . $theme[$key . '_path']);			if ($parsed_array === false)			{				$parsed_array = array();			}			$reparse = false;			$filename = $phpbb_root_path . 'styles/' . $theme[$key . '_path'] . '/' . $key . '/' . $key . '.cfg';			if (!file_exists($filename))			{				continue;			}			if (!isset($parsed_array['filetime']) || (($config['load_tplcompile'] && @filemtime($filename) > $parsed_array['filetime'])))			{				$reparse = true;			}			// Re-parse cfg file			if ($reparse)			{				$parsed_array = parse_cfg_file($filename);				$parsed_array['filetime'] = @filemtime($filename);				$this->put('_cfg_' . $key . '_' . $theme[$key . '_path'], $parsed_array);			}			$parsed_items[$key] = $parsed_array;		}		return $parsed_items;	}	/**	* Obtain disallowed usernames	*/	function obtain_disallowed_usernames()	{		if (($usernames = $this->get('_disallowed_usernames')) === false)		{			global $db;			$sql = 'SELECT disallow_username				FROM ' . DISALLOW_TABLE;			$result = $db->sql_query($sql);			$usernames = array();			while ($row = $db->sql_fetchrow($result))			{				$usernames[] = str_replace('%', '.*?', preg_quote(utf8_clean_string($row['disallow_username']), '#'));			}			$db->sql_freeresult($result);			$this->put('_disallowed_usernames', $usernames);		}		return $usernames;	}	/**	* Obtain hooks...	*/	function obtain_hooks()	{		global $phpbb_root_path, $phpEx;		if (($hook_files = $this->get('_hooks')) === false)		{			$hook_files = array();			// Now search for hooks...			$dh = @opendir($phpbb_root_path . 'includes/hooks/');			if ($dh)			{				while (($file = readdir($dh)) !== false)				{					if (strpos($file, 'hook_') === 0 && substr($file, -(strlen($phpEx) + 1)) === '.' . $phpEx)					{						$hook_files[] = substr($file, 0, -(strlen($phpEx) + 1));					}				}				closedir($dh);			}			$this->put('_hooks', $hook_files);		}		return $hook_files;	}}?>
<?php/*** Adds class="postlink" to magic urls** You should make a backup from your users, posts and privmsgs table in case something goes wrong* Forum descriptions and rules need to be re-submitted manually.*/die("Please read the first lines of this script for instructions on how to enable it");set_time_limit(0);define('IN_PHPBB', true);$phpbb_root_path = './../';$phpEx = substr(strrchr(__FILE__, '.'), 1);include($phpbb_root_path . 'common.'.$phpEx);// Start session management$user->session_begin();$auth->acl($user->data);$user->setup();$echos = 0;$replace = array(	'<!-- l --><a href="',	'<!-- m --><a href="',	'<!-- w --><a href="',);$with = array(	'<!-- l --><a class="postlink-local" href="',	'<!-- m --><a class="postlink" href="',	'<!-- w --><a class="postlink" href="',);// Adjust user signatures$sql = 'SELECT user_id, user_sig	FROM ' . USERS_TABLE;$result = $db->sql_query($sql);while ($row = $db->sql_fetchrow($result)){	$new_content = str_replace($replace, $with, $row['user_sig']);	if ($new_content != $row['user_sig'])	{		$sql = 'UPDATE ' . USERS_TABLE . " SET user_sig = '" . $db->sql_escape($new_content) . "'			WHERE user_id = " . $row['user_id'];		$db->sql_query($sql);		if ($echos > 200)		{			echo '<br />' . "\n";			$echos = 0;		}		echo '.';		$echos++;		flush();	}}$db->sql_freeresult($result);// Now adjust posts$sql = 'SELECT post_id, post_text	FROM ' . POSTS_TABLE;$result = $db->sql_query($sql);while ($row = $db->sql_fetchrow($result)){	$new_content = str_replace($replace, $with, $row['post_text']);	if ($row['post_text'] != $new_content)	{		$sql = 'UPDATE ' . POSTS_TABLE . " SET post_text = '" . $db->sql_escape($new_content) . "'			WHERE post_id = " . $row['post_id'];		$db->sql_query($sql);		if ($echos > 200)		{			echo '<br />' . "\n";			$echos = 0;		}		echo '.';		$echos++;		flush();	}}$db->sql_freeresult($result);// Now to the private messages$sql = 'SELECT msg_id, message_text	FROM ' . PRIVMSGS_TABLE;$result = $db->sql_query($sql);while ($row = $db->sql_fetchrow($result)){	$new_content = str_replace($replace, $with, $row['message_text']);	if ($row['message_text'] != $new_content)	{		$sql = 'UPDATE ' . PRIVMSGS_TABLE . " SET bbcode_bitfield = '" . $db->sql_escape($new_content) . "'			WHERE msg_id = " . $row['msg_id'];		$db->sql_query($sql);		if ($echos > 200)		{			echo '<br />' . "\n";			$echos = 0;		}		echo '.';		$echos++;		flush();	}}$db->sql_freeresult($result);// Done$db->sql_close();?>
<?php/**** @package mcp* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @package module_install*/class mcp_pm_reports_info{	function module()	{		return array(			'filename'	=> 'mcp_pm_reports',			'title'		=> 'MCP_PM_REPORTS',			'version'	=> '1.0.0',			'modes'		=> array(				'pm_reports'			=> array('title' => 'MCP_PM_REPORTS_OPEN', 'auth' => 'aclf_m_report', 'cat' => array('MCP_REPORTS')),				'pm_reports_closed'	=> array('title' => 'MCP_PM_REPORTS_CLOSED', 'auth' => 'aclf_m_report', 'cat' => array('MCP_REPORTS')),				'pm_report_details'	=> array('title' => 'MCP_PM_REPORT_DETAILS', 'auth' => 'aclf_m_report', 'cat' => array('MCP_REPORTS')),			),		);	}	function install()	{	}	function uninstall()	{	}}?>
<?php/**** @package ucp* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @package module_install*/class ucp_zebra_info{	function module()	{		return array(			'filename'	=> 'ucp_zebra',			'title'		=> 'UCP_ZEBRA',			'version'	=> '1.0.0',			'modes'		=> array(				'friends'		=> array('title' => 'UCP_ZEBRA_FRIENDS', 'auth' => '', 'cat' => array('UCP_ZEBRA')),				'foes'			=> array('title' => 'UCP_ZEBRA_FOES', 'auth' => '', 'cat' => array('UCP_ZEBRA')),			),		);	}	function install()	{	}	function uninstall()	{	}}?>
<?php/**** @package phpBB3* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//***/define('IN_PHPBB', true);define('IN_CRON', true);$phpbb_root_path = (defined('PHPBB_ROOT_PATH')) ? PHPBB_ROOT_PATH : './';$phpEx = substr(strrchr(__FILE__, '.'), 1);include($phpbb_root_path . 'common.' . $phpEx);// Do not update users last page entry$user->session_begin(false);$auth->acl($user->data);$cron_type = request_var('cron_type', '');// Output transparent gifheader('Cache-Control: no-cache');header('Content-type: image/gif');header('Content-length: 43');echo base64_decode('R0lGODlhAQABAIAAAP///wAAACH5BAEAAAAALAAAAAABAAEAAAICRAEAOw==');// Flush here to prevent browser from showing the page as loading while running cron.flush();if (!isset($config['cron_lock'])){	set_config('cron_lock', '0', true);}// make sure cron doesn't run multiple times in parallelif ($config['cron_lock']){	// if the other process is running more than an hour already we have to assume it	// aborted without cleaning the lock	$time = explode(' ', $config['cron_lock']);	$time = $time[0];	if ($time + 3600 >= time())	{		exit;	}}define('CRON_ID', time() . ' ' . unique_id());$sql = 'UPDATE ' . CONFIG_TABLE . "	SET config_value = '" . $db->sql_escape(CRON_ID) . "'	WHERE config_name = 'cron_lock' AND config_value = '" . $db->sql_escape($config['cron_lock']) . "'";$db->sql_query($sql);// another cron process altered the table between script start and UPDATE query so exitif ($db->sql_affectedrows() != 1){	exit;}/*** Run cron-like action* Real cron-based layer will be introduced in 3.2*/switch ($cron_type){	case 'queue':		if (time() - $config['queue_interval'] <= $config['last_queue_run'] || !file_exists($phpbb_root_path . 'cache/queue.' . $phpEx))		{			break;		}		include_once($phpbb_root_path . 'includes/functions_messenger.' . $phpEx);		$queue = new queue();		$queue->process();	break;	case 'tidy_cache':		if (time() - $config['cache_gc'] <= $config['cache_last_gc'] || !method_exists($cache, 'tidy'))		{			break;		}		$cache->tidy();	break;	case 'tidy_search':				// Select the search method		$search_type = basename($config['search_type']);		if (time() - $config['search_gc'] <= $config['search_last_gc'] || !file_exists($phpbb_root_path . 'includes/search/' . $search_type . '.' . $phpEx))		{			break;		}		include_once("{$phpbb_root_path}includes/search/$search_type.$phpEx");		// We do some additional checks in the module to ensure it can actually be utilised		$error = false;		$search = new $search_type($error);		if ($error)		{			break;		}		$search->tidy();	break;	case 'tidy_warnings':		if (time() - $config['warnings_gc'] <= $config['warnings_last_gc'])		{			break;		}		include_once($phpbb_root_path . 'includes/functions_admin.' . $phpEx);		tidy_warnings();	break;	case 'tidy_database':		if (time() - $config['database_gc'] <= $config['database_last_gc'])		{			break;		}		include_once($phpbb_root_path . 'includes/functions_admin.' . $phpEx);		tidy_database();	break;	case 'tidy_sessions':		if (time() - $config['session_gc'] <= $config['session_last_gc'])		{			break;		}		$user->session_gc();	break;	case 'prune_forum':		$forum_id = request_var('f', 0);		$sql = 'SELECT forum_id, prune_next, enable_prune, prune_days, prune_viewed, forum_flags, prune_freq			FROM ' . FORUMS_TABLE . "			WHERE forum_id = $forum_id";		$result = $db->sql_query($sql);		$row = $db->sql_fetchrow($result);		$db->sql_freeresult($result);		if (!$row)		{			break;		}		// Do the forum Prune thang		if ($row['prune_next'] < time() && $row['enable_prune'])		{			include_once($phpbb_root_path . 'includes/functions_admin.' . $phpEx);			if ($row['prune_days'])			{				auto_prune($row['forum_id'], 'posted', $row['forum_flags'], $row['prune_days'], $row['prune_freq']);			}			if ($row['prune_viewed'])			{				auto_prune($row['forum_id'], 'viewed', $row['forum_flags'], $row['prune_viewed'], $row['prune_freq']);			}		}	break;}// Unloading cache and closing db after having done the dirty work.unlock_cron();garbage_collection();exit;/*** Unlock cron script*/function unlock_cron(){	global $db;	$sql = 'UPDATE ' . CONFIG_TABLE . "		SET config_value = '0'		WHERE config_name = 'cron_lock' AND config_value = '" . $db->sql_escape(CRON_ID) . "'";	$db->sql_query($sql);}?>
<?php/**** @package acp* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @package module_install*/class acp_reasons_info{	function module()	{		return array(			'filename'	=> 'acp_reasons',			'title'		=> 'ACP_REASONS',			'version'	=> '1.0.0',			'modes'		=> array(				'main'		=> array('title' => 'ACP_MANAGE_REASONS', 'auth' => 'acl_a_reasons', 'cat' => array('ACP_GENERAL_TASKS')),			),		);	}	function install()	{	}	function uninstall()	{	}}?>
<?php/**** @package acp* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License*//*** @ignore*/if (!defined('IN_PHPBB')){	exit;}/*** @package acp*/class acp_captcha{	var $u_action;	function main($id, $mode)	{		global $db, $user, $auth, $template;		global $config, $phpbb_root_path, $phpbb_admin_path, $phpEx;		$user->add_lang('acp/board');		include($phpbb_root_path . 'includes/captcha/captcha_factory.' . $phpEx);		$captchas = phpbb_captcha_factory::get_captcha_types();		$selected = request_var('select_captcha', $config['captcha_plugin']);		$selected = (isset($captchas['available'][$selected]) || isset($captchas['unavailable'][$selected])) ? $selected : $config['captcha_plugin'];		$configure = request_var('configure', false);		// Oh, they are just here for the view		if (isset($_GET['captcha_demo']))		{			$this->deliver_demo($selected);		}		// Delegate		if ($configure)		{			$config_captcha =& phpbb_captcha_factory::get_instance($selected);			$config_captcha->acp_page($id, $this);		}		else		{			$config_vars = array(				'enable_confirm'		=> array('tpl' => 'REG_ENABLE', 'default' => false),				'enable_post_confirm'	=> array('tpl' => 'POST_ENABLE', 'default' => false),				'confirm_refresh'		=> array('tpl' => 'CONFIRM_REFRESH', 'default' => false),				'max_reg_attempts'		=> array('tpl' => 'REG_LIMIT', 'default' => 0),				'max_login_attempts'		=> array('tpl' => 'MAX_LOGIN_ATTEMPTS', 'default' => 0),			);			$this->tpl_name = 'acp_captcha';			$this->page_title = 'ACP_VC_SETTINGS';			$form_key = 'acp_captcha';			add_form_key($form_key);			$submit = request_var('main_submit', false);			if ($submit && check_form_key($form_key))			{				foreach ($config_vars as $config_var => $options)				{					set_config($config_var, request_var($config_var, $options['default']));				}				if ($selected !== $config['captcha_plugin'])				{					// sanity check					if (isset($captchas['available'][$selected]))					{						$old_captcha =& phpbb_captcha_factory::get_instance($config['captcha_plugin']);						$old_captcha->uninstall();						set_config('captcha_plugin', $selected);						$new_captcha =& phpbb_captcha_factory::get_instance($config['captcha_plugin']);						$new_captcha->install();						add_log('admin', 'LOG_CONFIG_VISUAL');					}					else					{						trigger_error($user->lang['CAPTCHA_UNAVAILABLE'] . adm_back_link($this->u_action), E_USER_WARNING);					}				}				trigger_error($user->lang['CONFIG_UPDATED'] . adm_back_link($this->u_action));			}			else if ($submit)			{				trigger_error($user->lang['FORM_INVALID'] . adm_back_link(), E_USER_WARNING);			}			else			{				$captcha_select = '';				foreach ($captchas['available'] as $value => $title)				{					$current = ($selected !== false && $value == $selected) ? ' selected="selected"' : '';					$captcha_select .= '<option value="' . $value . '"' . $current . '>' . $user->lang[$title] . '</option>';				}				foreach ($captchas['unavailable'] as $value => $title)				{					$current = ($selected !== false && $value == $selected) ? ' selected="selected"' : '';					$captcha_select .= '<option value="' . $value . '"' . $current . ' class="disabled-option">' . $user->lang[$title] . '</option>';				}				$demo_captcha =& phpbb_captcha_factory::get_instance($selected);				foreach ($config_vars as $config_var => $options)				{					$template->assign_var($options['tpl'], (isset($_POST[$config_var])) ? request_var($config_var, $options['default']) : $config[$config_var]) ;				}				$template->assign_vars(array(					'CAPTCHA_PREVIEW_TPL'	=> $demo_captcha->get_demo_template($id),					'S_CAPTCHA_HAS_CONFIG'	=> $demo_captcha->has_config(),					'CAPTCHA_SELECT'		=> $captcha_select,				));			}		}	}	/**	* Entry point for delivering image CAPTCHAs in the ACP.	*/	function deliver_demo($selected)	{		global $db, $user, $config;		$captcha =& phpbb_captcha_factory::get_instance($selected);		$captcha->init(CONFIRM_REG);		$captcha->execute_demo();		garbage_collection();		exit_handler();	}}?>
<?php//// Security message://// This script is potentially dangerous.// Remove or comment the next line (die(".... ) to enable this script.// Do NOT FORGET to either remove this script or disable it after you have used it.//die("Please read the first lines of this script for instructions on how to enable it");// IP regular expressions$dec_octet = '(?:\d{1,2}|1\d\d|2[0-4]\d|25[0-5])';$h16 = '[\dA-F]{1,4}';$ipv4 = "(?:$dec_octet\.){3}$dec_octet";$ls32 = "(?:$h16:$h16|$ipv4)";$ipv6_construct = array(	array(false,	'',		'{6}',	$ls32),	array(false,	'::',	'{0,5}', "(?:$h16(?::$h16)?|$ipv4)"),	array('',		':',	'{4}',	$ls32),	array('{1,2}',	':',	'{3}',	$ls32),	array('{1,3}',	':',	'{2}',	$ls32),	array('{1,4}',	':',	'',		$ls32),	array('{1,5}',	':',	false,	$ls32),	array('{1,6}',	':',	false,	$h16),	array('{1,7}',	':',	false,	''),	array(false, '::', false, ''));$ipv6 = '(?:';foreach ($ipv6_construct as $ip_type){	$ipv6 .= '(?:';	if ($ip_type[0] !== false)	{		$ipv6 .= "(?:$h16:)" . $ip_type[0];	}	$ipv6 .= $ip_type[1];	if ($ip_type[2] !== false)	{		$ipv6 .= "(?:$h16:)" . $ip_type[2];	}	$ipv6 .= $ip_type[3] . ')|';}$ipv6 = substr($ipv6, 0, -1) . ')';echo 'IPv4: ' . $ipv4 . "<br />\nIPv6: " . $ipv6 . "<br />\n";// URL regular expressions$pct_encoded = "%[\dA-F]{2}";$unreserved = 'a-z0-9\-._~';$sub_delims = '!$&\'()*+,;=';$pchar = "(?:[$unreserved$sub_delims:@|]+|$pct_encoded)"; // rfc: no "|"$scheme = '[a-z][a-z\d+\-.]*';$reg_name = "(?:[$unreserved$sub_delims:@|]+|$pct_encoded)+"; // rfc: * instead of + and no "|" and no "@" and no ":" (included instead of userinfo)//$userinfo = "(?:(?:[$unreserved$sub_delims:]+|$pct_encoded))*";$ipv4_simple = '[0-9.]+';$ipv6_simple = '\[[a-z0-9.]+:[a-z0-9.]+:[a-z0-9.:]+\]';$host = "(?:$reg_name|$ipv4_simple|$ipv6_simple)";$port = '\d*';//$authority = "(?:$userinfo@)?$host(?::$port)?";$authority = "$host(?::$port)?";$segment = "$pchar*";$path_abempty = "(?:/$segment)*";$hier_part = "/{2}$authority$path_abempty";$query = "(?:[$unreserved$sub_delims:@/?|]+|$pct_encoded)*"; // pchar | "/" | "?", rfc: no "|"$fragment = $query;$url =  "$scheme:$hier_part(?:\?$query)?(?:\#$fragment)?";echo 'URL: ' . $url . "<br />\n";// no scheme, shortened authority, but host has to start with www.$www_url =  "www\.$reg_name(?::$port)?$path_abempty(?:\?$query)?(?:\#$fragment)?";echo 'www.URL: ' . $www_url . "<br />\n";// no schema and no authority$relative_url = "$segment$path_abempty(?:\?$query)?(?:\#$fragment)?";echo 'relative URL: ' . $relative_url . "<br />\n";?>
<?php/**** @package phpBB3* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @ignore*/define('IN_PHPBB', true);$phpbb_root_path = (defined('PHPBB_ROOT_PATH')) ? PHPBB_ROOT_PATH : './';$phpEx = substr(strrchr(__FILE__, '.'), 1);include($phpbb_root_path . 'common.' . $phpEx);// Start session management$user->session_begin();$auth->acl($user->data);$user->setup('memberlist');// Get and set some variables$mode		= request_var('mode', '');$session_id	= request_var('s', '');$start		= request_var('start', 0);$sort_key	= request_var('sk', 'b');$sort_dir	= request_var('sd', 'd');$show_guests= ($config['load_online_guests']) ? request_var('sg', 0) : 0;// Can this user view profiles/memberlist?if (!$auth->acl_gets('u_viewprofile', 'a_user', 'a_useradd', 'a_userdel')){	if ($user->data['user_id'] != ANONYMOUS)	{		trigger_error('NO_VIEW_USERS');	}	login_box('', $user->lang['LOGIN_EXPLAIN_VIEWONLINE']);}$sort_key_text = array('a' => $user->lang['SORT_USERNAME'], 'b' => $user->lang['SORT_JOINED'], 'c' => $user->lang['SORT_LOCATION']);$sort_key_sql = array('a' => 'u.username_clean', 'b' => 's.session_time', 'c' => 's.session_page');// Sorting and orderif (!isset($sort_key_text[$sort_key])){	$sort_key = 'b';}$order_by = $sort_key_sql[$sort_key] . ' ' . (($sort_dir == 'a') ? 'ASC' : 'DESC');// Whois requestedif ($mode == 'whois' && $auth->acl_get('a_') && $session_id){	include($phpbb_root_path . 'includes/functions_user.' . $phpEx);	$sql = 'SELECT u.user_id, u.username, u.user_type, s.session_ip		FROM ' . USERS_TABLE . ' u, ' . SESSIONS_TABLE . " s		WHERE s.session_id = '" . $db->sql_escape($session_id) . "'			AND	u.user_id = s.session_user_id";	$result = $db->sql_query($sql);	if ($row = $db->sql_fetchrow($result))	{		$template->assign_var('WHOIS', user_ipwhois($row['session_ip']));	}	$db->sql_freeresult($result);	// Output the page	page_header($user->lang['WHO_IS_ONLINE']);	$template->set_filenames(array(		'body' => 'viewonline_whois.html')	);	make_jumpbox(append_sid("{$phpbb_root_path}viewforum.$phpEx"));	page_footer();}// Forum info$sql = 'SELECT forum_id, forum_name, parent_id, forum_type, left_id, right_id	FROM ' . FORUMS_TABLE . '	ORDER BY left_id ASC';$result = $db->sql_query($sql, 600);$forum_data = array();while ($row = $db->sql_fetchrow($result)){	$forum_data[$row['forum_id']] = $row;}$db->sql_freeresult($result);$guest_counter = 0;// Get number of online guests (if we do not display them)if (!$show_guests){	switch ($db->sql_layer)	{		case 'sqlite':			$sql = 'SELECT COUNT(session_ip) as num_guests				FROM (					SELECT DISTINCT session_ip						FROM ' . SESSIONS_TABLE . '						WHERE session_user_id = ' . ANONYMOUS . '							AND session_time >= ' . (time() - ($config['load_online_time'] * 60)) .				')';		break;		default:			$sql = 'SELECT COUNT(DISTINCT session_ip) as num_guests				FROM ' . SESSIONS_TABLE . '				WHERE session_user_id = ' . ANONYMOUS . '					AND session_time >= ' . (time() - ($config['load_online_time'] * 60));		break;	}	$result = $db->sql_query($sql);	$guest_counter = (int) $db->sql_fetchfield('num_guests');	$db->sql_freeresult($result);}// Get user list$sql = 'SELECT u.user_id, u.username, u.username_clean, u.user_type, u.user_colour, s.session_id, s.session_time, s.session_page, s.session_ip, s.session_browser, s.session_viewonline, s.session_forum_id	FROM ' . USERS_TABLE . ' u, ' . SESSIONS_TABLE . ' s	WHERE u.user_id = s.session_user_id		AND s.session_time >= ' . (time() - ($config['load_online_time'] * 60)) .		((!$show_guests) ? ' AND s.session_user_id <> ' . ANONYMOUS : '') . '	ORDER BY ' . $order_by;$result = $db->sql_query($sql);$prev_id = $prev_ip = $user_list = array();$logged_visible_online = $logged_hidden_online = $counter = 0;while ($row = $db->sql_fetchrow($result)){	if ($row['user_id'] != ANONYMOUS && !isset($prev_id[$row['user_id']]))	{		$view_online = $s_user_hidden = false;		$user_colour = ($row['user_colour']) ? ' style="color:#' . $row['user_colour'] . '" class="username-coloured"' : '';		$username_full = ($row['user_type'] != USER_IGNORE) ? get_username_string('full', $row['user_id'], $row['username'], $row['user_colour']) : '<span' . $user_colour . '>' . $row['username'] . '</span>';		if (!$row['session_viewonline'])		{			$view_online = ($auth->acl_get('u_viewonline')) ? true : false;			$logged_hidden_online++;			$username_full = '<em>' . $username_full . '</em>';			$s_user_hidden = true;		}		else		{			$view_online = true;			$logged_visible_online++;		}		$prev_id[$row['user_id']] = 1;		if ($view_online)		{			$counter++;		}		if (!$view_online || $counter > $start + $config['topics_per_page'] || $counter <= $start)		{			continue;		}	}	else if ($show_guests && $row['user_id'] == ANONYMOUS && !isset($prev_ip[$row['session_ip']]))	{		$prev_ip[$row['session_ip']] = 1;		$guest_counter++;		$counter++;		if ($counter > $start + $config['topics_per_page'] || $counter <= $start)		{			continue;		}		$s_user_hidden = false;		$username_full = get_username_string('full', $row['user_id'], $user->lang['GUEST']);	}	else	{		continue;	}	preg_match('#^([a-z0-9/_-]+)#i', $row['session_page'], $on_page);	if (!sizeof($on_page))	{		$on_page[1] = '';	}	switch ($on_page[1])	{		case 'index':			$location = $user->lang['INDEX'];			$location_url = append_sid("{$phpbb_root_path}index.$phpEx");		break;		case 'adm/index':			$location = $user->lang['ACP'];			$location_url = append_sid("{$phpbb_root_path}index.$phpEx");		break;		case 'posting':		case 'viewforum':		case 'viewtopic':			$forum_id = $row['session_forum_id'];			if ($forum_id && $auth->acl_get('f_list', $forum_id))			{				$location = '';				$location_url = append_sid("{$phpbb_root_path}viewforum.$phpEx", 'f=' . $forum_id);				if ($forum_data[$forum_id]['forum_type'] == FORUM_LINK)				{					$location = sprintf($user->lang['READING_LINK'], $forum_data[$forum_id]['forum_name']);					break;				}				switch ($on_page[1])				{					case 'posting':						preg_match('#mode=([a-z]+)#', $row['session_page'], $on_page);						$posting_mode = (!empty($on_page[1])) ? $on_page[1] : '';						switch ($posting_mode)						{							case 'reply':							case 'quote':								$location = sprintf($user->lang['REPLYING_MESSAGE'], $forum_data[$forum_id]['forum_name']);							break;							default:								$location = sprintf($user->lang['POSTING_MESSAGE'], $forum_data[$forum_id]['forum_name']);							break;						}					break;					case 'viewtopic':						$location = sprintf($user->lang['READING_TOPIC'], $forum_data[$forum_id]['forum_name']);					break;					case 'viewforum':						$location = sprintf($user->lang['READING_FORUM'], $forum_data[$forum_id]['forum_name']);					break;				}			}			else			{				$location = $user->lang['INDEX'];				$location_url = append_sid("{$phpbb_root_path}index.$phpEx");			}		break;		case 'search':			$location = $user->lang['SEARCHING_FORUMS'];			$location_url = append_sid("{$phpbb_root_path}search.$phpEx");		break;		case 'faq':			$location = $user->lang['VIEWING_FAQ'];			$location_url = append_sid("{$phpbb_root_path}faq.$phpEx");		break;		case 'viewonline':			$location = $user->lang['VIEWING_ONLINE'];			$location_url = append_sid("{$phpbb_root_path}viewonline.$phpEx");		break;		case 'memberlist':			$location = (strpos($row['session_page'], 'mode=viewprofile') !== false) ? $user->lang['VIEWING_MEMBER_PROFILE'] : $user->lang['VIEWING_MEMBERS'];			$location_url = append_sid("{$phpbb_root_path}memberlist.$phpEx");		break;		case 'mcp':			$location = $user->lang['VIEWING_MCP'];			$location_url = append_sid("{$phpbb_root_path}index.$phpEx");		break;		case 'ucp':			$location = $user->lang['VIEWING_UCP'];			// Grab some common modules			$url_params = array(				'mode=register'		=> 'VIEWING_REGISTER',				'i=pm&mode=compose'	=> 'POSTING_PRIVATE_MESSAGE',				'i=pm&'				=> 'VIEWING_PRIVATE_MESSAGES',				'i=profile&'		=> 'CHANGING_PROFILE',				'i=prefs&'			=> 'CHANGING_PREFERENCES',			);			foreach ($url_params as $param => $lang)			{				if (strpos($row['session_page'], $param) !== false)				{					$location = $user->lang[$lang];					break;				}			}			$location_url = append_sid("{$phpbb_root_path}index.$phpEx");		break;		case 'download/file':			$location = $user->lang['DOWNLOADING_FILE'];			$location_url = append_sid("{$phpbb_root_path}index.$phpEx");		break;		case 'report':			$location = $user->lang['REPORTING_POST'];			$location_url = append_sid("{$phpbb_root_path}index.$phpEx");		break;		default:			$location = $user->lang['INDEX'];			$location_url = append_sid("{$phpbb_root_path}index.$phpEx");		break;	}	$template->assign_block_vars('user_row', array(		'USERNAME' 			=> $row['username'],		'USERNAME_COLOUR'	=> $row['user_colour'],		'USERNAME_FULL'		=> $username_full,		'LASTUPDATE'		=> $user->format_date($row['session_time']),		'FORUM_LOCATION'	=> $location,		'USER_IP'			=> ($auth->acl_get('a_')) ? (($mode == 'lookup' && $session_id == $row['session_id']) ? gethostbyaddr($row['session_ip']) : $row['session_ip']) : '',		'USER_BROWSER'		=> ($auth->acl_get('a_user')) ? $row['session_browser'] : '',		'U_USER_PROFILE'	=> ($row['user_type'] != USER_IGNORE) ? get_username_string('profile', $row['user_id'], '') : '',		'U_USER_IP'			=> append_sid("{$phpbb_root_path}viewonline.$phpEx", 'mode=lookup' . (($mode != 'lookup' || $row['session_id'] != $session_id) ? '&amp;s=' . $row['session_id'] : '') . "&amp;sg=$show_guests&amp;start=$start&amp;sk=$sort_key&amp;sd=$sort_dir"),		'U_WHOIS'			=> append_sid("{$phpbb_root_path}viewonline.$phpEx", 'mode=whois&amp;s=' . $row['session_id']),		'U_FORUM_LOCATION'	=> $location_url,		'S_USER_HIDDEN'		=> $s_user_hidden,		'S_GUEST'			=> ($row['user_id'] == ANONYMOUS) ? true : false,		'S_USER_TYPE'		=> $row['user_type'],	));}$db->sql_freeresult($result);unset($prev_id, $prev_ip);// Generate reg/hidden/guest online text$vars_online = array(	'REG'	=> array('logged_visible_online', 'l_r_user_s'),	'HIDDEN'=> array('logged_hidden_online', 'l_h_user_s'),	'GUEST'	=> array('guest_counter', 'l_g_user_s'));foreach ($vars_online as $l_prefix => $var_ary){	switch ($$var_ary[0])	{		case 0:			$$var_ary[1] = $user->lang[$l_prefix . '_USERS_ZERO_ONLINE'];		break;		case 1:			$$var_ary[1] = $user->lang[$l_prefix . '_USER_ONLINE'];		break;		default:			$$var_ary[1] = $user->lang[$l_prefix . '_USERS_ONLINE'];		break;	}}unset($vars_online);$pagination = generate_pagination(append_sid("{$phpbb_root_path}viewonline.$phpEx", "sg=$show_guests&amp;sk=$sort_key&amp;sd=$sort_dir"), $counter, $config['topics_per_page'], $start);// Grab group details for legend displayif ($auth->acl_gets('a_group', 'a_groupadd', 'a_groupdel')){	$sql = 'SELECT group_id, group_name, group_colour, group_type		FROM ' . GROUPS_TABLE . '		WHERE group_legend = 1		ORDER BY group_name ASC';}else{	$sql = 'SELECT g.group_id, g.group_name, g.group_colour, g.group_type		FROM ' . GROUPS_TABLE . ' g		LEFT JOIN ' . USER_GROUP_TABLE . ' ug			ON (				g.group_id = ug.group_id				AND ug.user_id = ' . $user->data['user_id'] . '				AND ug.user_pending = 0			)		WHERE g.group_legend = 1			AND (g.group_type <> ' . GROUP_HIDDEN . ' OR ug.user_id = ' . $user->data['user_id'] . ')		ORDER BY g.group_name ASC';}$result = $db->sql_query($sql);$legend = '';while ($row = $db->sql_fetchrow($result)){	if ($row['group_name'] == 'BOTS')	{		$legend .= (($legend != '') ? ', ' : '') . '<span style="color:#' . $row['group_colour'] . '">' . $user->lang['G_BOTS'] . '</span>';	}	else	{		$legend .= (($legend != '') ? ', ' : '') . '<a style="color:#' . $row['group_colour'] . '" href="' . append_sid("{$phpbb_root_path}memberlist.$phpEx", 'mode=group&amp;g=' . $row['group_id']) . '">' . (($row['group_type'] == GROUP_SPECIAL) ? $user->lang['G_' . $row['group_name']] : $row['group_name']) . '</a>';	}}$db->sql_freeresult($result);// Refreshing the page every 60 seconds...meta_refresh(60, append_sid("{$phpbb_root_path}viewonline.$phpEx", "sg=$show_guests&amp;sk=$sort_key&amp;sd=$sort_dir&amp;start=$start"));// Send data to template$template->assign_vars(array(	'TOTAL_REGISTERED_USERS_ONLINE'	=> sprintf($l_r_user_s, $logged_visible_online) . sprintf($l_h_user_s, $logged_hidden_online),	'TOTAL_GUEST_USERS_ONLINE'		=> sprintf($l_g_user_s, $guest_counter),	'LEGEND'						=> $legend,	'PAGINATION'					=> $pagination,	'PAGE_NUMBER'					=> on_page($counter, $config['topics_per_page'], $start),	'U_SORT_USERNAME'		=> append_sid("{$phpbb_root_path}viewonline.$phpEx", 'sk=a&amp;sd=' . (($sort_key == 'a' && $sort_dir == 'a') ? 'd' : 'a') . '&amp;sg=' . ((int) $show_guests)),	'U_SORT_UPDATED'		=> append_sid("{$phpbb_root_path}viewonline.$phpEx", 'sk=b&amp;sd=' . (($sort_key == 'b' && $sort_dir == 'a') ? 'd' : 'a') . '&amp;sg=' . ((int) $show_guests)),	'U_SORT_LOCATION'		=> append_sid("{$phpbb_root_path}viewonline.$phpEx", 'sk=c&amp;sd=' . (($sort_key == 'c' && $sort_dir == 'a') ? 'd' : 'a') . '&amp;sg=' . ((int) $show_guests)),	'U_SWITCH_GUEST_DISPLAY'	=> append_sid("{$phpbb_root_path}viewonline.$phpEx", 'sg=' . ((int) !$show_guests)),	'L_SWITCH_GUEST_DISPLAY'	=> ($show_guests) ? $user->lang['HIDE_GUESTS'] : $user->lang['DISPLAY_GUESTS'],	'S_SWITCH_GUEST_DISPLAY'	=> ($config['load_online_guests']) ? true : false));// We do not need to load the who is online box here. ;)$config['load_online'] = false;// Output the pagepage_header($user->lang['WHO_IS_ONLINE']);$template->set_filenames(array(	'body' => 'viewonline_body.html'));make_jumpbox(append_sid("{$phpbb_root_path}viewforum.$phpEx"));page_footer();?>
<?php/**** @package phpBB3* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @ignore*/define('IN_PHPBB', true);$phpbb_root_path = (defined('PHPBB_ROOT_PATH')) ? PHPBB_ROOT_PATH : './';$phpEx = substr(strrchr(__FILE__, '.'), 1);include($phpbb_root_path . 'common.' . $phpEx);// Start session management$user->session_begin();$auth->acl($user->data);$user->setup();$mode = request_var('mode', '');// Load the appropriate faq fileswitch ($mode){	case 'bbcode':		$l_title = $user->lang['BBCODE_GUIDE'];		$user->add_lang('bbcode', false, true);	break;	default:		$l_title = $user->lang['FAQ_EXPLAIN'];		$user->add_lang('faq', false, true);	break;}// Pull the array data from the lang pack$switch_column = $found_switch = false;$help_blocks = array();foreach ($user->help as $help_ary){	if ($help_ary[0] == '--')	{		if ($help_ary[1] == '--')		{			$switch_column = true;			$found_switch = true;			continue;		}		$template->assign_block_vars('faq_block', array(			'BLOCK_TITLE'		=> $help_ary[1],			'SWITCH_COLUMN'		=> $switch_column,		));		if ($switch_column)		{			$switch_column = false;		}		continue;	}	$template->assign_block_vars('faq_block.faq_row', array(		'FAQ_QUESTION'		=> $help_ary[0],		'FAQ_ANSWER'		=> $help_ary[1])	);}// Lets build a page ...$template->assign_vars(array(	'L_FAQ_TITLE'				=> $l_title,	'L_BACK_TO_TOP'				=> $user->lang['BACK_TO_TOP'],	'SWITCH_COLUMN_MANUALLY'	=> (!$found_switch) ? true : false,));page_header($l_title, false);$template->set_filenames(array(	'body' => 'faq_body.html'));make_jumpbox(append_sid("{$phpbb_root_path}viewforum.$phpEx"));page_footer();?>
<?php/**** @package mcp* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @ignore*/if (!defined('IN_PHPBB')){	exit;}/*** @package mcp*/class mcp_ban{	var $u_action;	function main($id, $mode)	{		global $config, $db, $user, $auth, $template, $cache;		global $phpbb_root_path, $phpEx;		include($phpbb_root_path . 'includes/functions_user.' . $phpEx);		// Include the admin banning interface...		include($phpbb_root_path . 'includes/acp/acp_ban.' . $phpEx);		$bansubmit		= (isset($_POST['bansubmit'])) ? true : false;		$unbansubmit	= (isset($_POST['unbansubmit'])) ? true : false;		$current_time	= time();		$user->add_lang(array('acp/ban', 'acp/users'));		$this->tpl_name = 'mcp_ban';		// Ban submitted?		if ($bansubmit)		{			// Grab the list of entries			$ban				= request_var('ban', '', ($mode === 'user') ? true : false);			if ($mode === 'user')			{				$ban = utf8_normalize_nfc($ban);			}			$ban_len			= request_var('banlength', 0);			$ban_len_other		= request_var('banlengthother', '');			$ban_exclude		= request_var('banexclude', 0);			$ban_reason			= utf8_normalize_nfc(request_var('banreason', '', true));			$ban_give_reason	= utf8_normalize_nfc(request_var('bangivereason', '', true));			if ($ban)			{				if (confirm_box(true))				{					user_ban($mode, $ban, $ban_len, $ban_len_other, $ban_exclude, $ban_reason, $ban_give_reason);					trigger_error($user->lang['BAN_UPDATE_SUCCESSFUL'] . '<br /><br /><a href="' . $this->u_action . '">&laquo; ' . $user->lang['BACK_TO_PREV'] . '</a>');				}				else				{					confirm_box(false, $user->lang['CONFIRM_OPERATION'], build_hidden_fields(array(						'mode'				=> $mode,						'ban'				=> $ban,						'bansubmit'			=> true,						'banlength'			=> $ban_len,						'banlengthother'	=> $ban_len_other,						'banexclude'		=> $ban_exclude,						'banreason'			=> $ban_reason,						'bangivereason'		=> $ban_give_reason)));				}			}		}		else if ($unbansubmit)		{			$ban = request_var('unban', array(''));			if ($ban)			{				if (confirm_box(true))				{					user_unban($mode, $ban);					trigger_error($user->lang['BAN_UPDATE_SUCCESSFUL'] . '<br /><br /><a href="' . $this->u_action . '">&laquo; ' . $user->lang['BACK_TO_PREV'] . '</a>');				}				else				{					confirm_box(false, $user->lang['CONFIRM_OPERATION'], build_hidden_fields(array(						'mode'			=> $mode,						'unbansubmit'	=> true,						'unban'			=> $ban)));				}			}		}		// Ban length options		$ban_end_text = array(0 => $user->lang['PERMANENT'], 30 => $user->lang['30_MINS'], 60 => $user->lang['1_HOUR'], 360 => $user->lang['6_HOURS'], 1440 => $user->lang['1_DAY'], 10080 => $user->lang['7_DAYS'], 20160 => $user->lang['2_WEEKS'], 40320 => $user->lang['1_MONTH'], -1 => $user->lang['UNTIL'] . ' -&gt; ');		$ban_end_options = '';		foreach ($ban_end_text as $length => $text)		{			$ban_end_options .= '<option value="' . $length . '">' . $text . '</option>';		}		// Define language vars		$this->page_title = $user->lang[strtoupper($mode) . '_BAN'];		$l_ban_explain = $user->lang[strtoupper($mode) . '_BAN_EXPLAIN'];		$l_ban_exclude_explain = $user->lang[strtoupper($mode) . '_BAN_EXCLUDE_EXPLAIN'];		$l_unban_title = $user->lang[strtoupper($mode) . '_UNBAN'];		$l_unban_explain = $user->lang[strtoupper($mode) . '_UNBAN_EXPLAIN'];		$l_no_ban_cell = $user->lang[strtoupper($mode) . '_NO_BANNED'];		switch ($mode)		{			case 'user':				$l_ban_cell = $user->lang['USERNAME'];			break;			case 'ip':				$l_ban_cell = $user->lang['IP_HOSTNAME'];			break;			case 'email':				$l_ban_cell = $user->lang['EMAIL_ADDRESS'];			break;		}		acp_ban::display_ban_options($mode);		$template->assign_vars(array(			'L_TITLE'				=> $this->page_title,			'L_EXPLAIN'				=> $l_ban_explain,			'L_UNBAN_TITLE'			=> $l_unban_title,			'L_UNBAN_EXPLAIN'		=> $l_unban_explain,			'L_BAN_CELL'			=> $l_ban_cell,			'L_BAN_EXCLUDE_EXPLAIN'	=> $l_ban_exclude_explain,			'L_NO_BAN_CELL'			=> $l_no_ban_cell,			'S_USERNAME_BAN'	=> ($mode == 'user') ? true : false,			'U_ACTION'			=> $this->u_action,			'U_FIND_USERNAME'	=> append_sid("{$phpbb_root_path}memberlist.$phpEx", 'mode=searchuser&amp;form=mcp_ban&amp;field=ban'),		));		if ($mode === 'email' && !$auth->acl_get('a_user'))		{			return;		}		// As a "service" we will check if any post id is specified and populate the username of the poster id if given		$post_id = request_var('p', 0);		$user_id = request_var('u', 0);		$username = $pre_fill = false;		if ($user_id && $user_id <> ANONYMOUS)		{			$sql = 'SELECT username, user_email, user_ip				FROM ' . USERS_TABLE . '				WHERE user_id = ' . $user_id;			$result = $db->sql_query($sql);			switch ($mode)			{				case 'user':					$pre_fill = (string) $db->sql_fetchfield('username');				break;								case 'ip':					$pre_fill = (string) $db->sql_fetchfield('user_ip');				break;				case 'email':					$pre_fill = (string) $db->sql_fetchfield('user_email');				break;			}			$db->sql_freeresult($result);		}		else if ($post_id)		{			$post_info = get_post_data($post_id, 'm_ban');			if (sizeof($post_info) && !empty($post_info[$post_id]))			{				switch ($mode)				{					case 'user':						$pre_fill = $post_info[$post_id]['username'];					break;					case 'ip':						$pre_fill = $post_info[$post_id]['poster_ip'];					break;					case 'email':						$pre_fill = $post_info[$post_id]['user_email'];					break;				}			}		}		if ($pre_fill)		{			// left for legacy template compatibility			$template->assign_var('USERNAMES', $pre_fill);			$template->assign_var('BAN_QUANTIFIER', $pre_fill);		}	}}?>
<?php/*** acp_permissions_phpbb (phpBB Permission Set) [English]** @package language* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License*//*** DO NOT CHANGE*/if (!defined('IN_PHPBB')){	exit;}if (empty($lang) || !is_array($lang)){	$lang = array();}// DEVELOPERS PLEASE NOTE//// All language files should use UTF-8 as their encoding and the files must not contain a BOM.//// Placeholders can now contain order information, e.g. instead of// 'Page %s of %s' you can (and should) write 'Page %1$s of %2$s', this allows// translators to re-order the output of data while ensuring it remains correct//// You do not need this where single placeholders are used, e.g. 'Message %d' is fine// equally where a string contains only two placeholders which are used to wrap text// in a url you again do not need to specify an order e.g., 'Click %sHERE%s' is fine/***	MODDERS PLEASE NOTE**	You are able to put your permission sets into a separate file too by*	prefixing the new file with permissions_ and putting it into the acp*	language folder.**	An example of how the file could look like:**	<code>**	if (empty($lang) || !is_array($lang))*	{*		$lang = array();*	}**	// Adding new category*	$lang['permission_cat']['bugs'] = 'Bugs';**	// Adding new permission set*	$lang['permission_type']['bug_'] = 'Bug Permissions';**	// Adding the permissions*	$lang = array_merge($lang, array(*		'acl_bug_view'		=> array('lang' => 'Can view bug reports', 'cat' => 'bugs'),*		'acl_bug_post'		=> array('lang' => 'Can post bugs', 'cat' => 'post'), // Using a phpBB category here*	));**	</code>*/// Define categories and permission types$lang = array_merge($lang, array(	'permission_cat'	=> array(		'actions'		=> 'Actions',		'content'		=> 'Content',		'forums'		=> 'Forums',		'misc'			=> 'Misc',		'permissions'	=> 'Permissions',		'pm'			=> 'Private messages',		'polls'			=> 'Polls',		'post'			=> 'Post',		'post_actions'	=> 'Post actions',		'posting'		=> 'Posting',		'profile'		=> 'Profile',		'settings'		=> 'Settings',		'topic_actions'	=> 'Topic actions',		'user_group'	=> 'Users &amp; Groups',	),	// With defining 'global' here we are able to specify what is printed out if the permission is within the global scope.	'permission_type'	=> array(		'u_'			=> 'User permissions',		'a_'			=> 'Admin permissions',		'm_'			=> 'Moderator permissions',		'f_'			=> 'Forum permissions',		'global'		=> array(			'm_'			=> 'Global moderator permissions',		),	),));// User Permissions$lang = array_merge($lang, array(	'acl_u_viewprofile'	=> array('lang' => 'Can view profiles, memberlist and online list', 'cat' => 'profile'),	'acl_u_chgname'		=> array('lang' => 'Can change username', 'cat' => 'profile'),	'acl_u_chgpasswd'	=> array('lang' => 'Can change password', 'cat' => 'profile'),	'acl_u_chgemail'	=> array('lang' => 'Can change e-mail address', 'cat' => 'profile'),	'acl_u_chgavatar'	=> array('lang' => 'Can change avatar', 'cat' => 'profile'),	'acl_u_chggrp'		=> array('lang' => 'Can change default usergroup', 'cat' => 'profile'),	'acl_u_attach'		=> array('lang' => 'Can attach files', 'cat' => 'post'),	'acl_u_download'	=> array('lang' => 'Can download files', 'cat' => 'post'),	'acl_u_savedrafts'	=> array('lang' => 'Can save drafts', 'cat' => 'post'),	'acl_u_chgcensors'	=> array('lang' => 'Can disable word censors', 'cat' => 'post'),	'acl_u_sig'			=> array('lang' => 'Can use signature', 'cat' => 'post'),	'acl_u_sendpm'		=> array('lang' => 'Can send private messages', 'cat' => 'pm'),	'acl_u_masspm'		=> array('lang' => 'Can send messages to multiple users', 'cat' => 'pm'),	'acl_u_masspm_group'=> array('lang' => 'Can send messages to groups', 'cat' => 'pm'),	'acl_u_readpm'		=> array('lang' => 'Can read private messages', 'cat' => 'pm'),	'acl_u_pm_edit'		=> array('lang' => 'Can edit own private messages', 'cat' => 'pm'),	'acl_u_pm_delete'	=> array('lang' => 'Can remove private messages from own folder', 'cat' => 'pm'),	'acl_u_pm_forward'	=> array('lang' => 'Can forward private messages', 'cat' => 'pm'),	'acl_u_pm_emailpm'	=> array('lang' => 'Can e-mail private messages', 'cat' => 'pm'),	'acl_u_pm_printpm'	=> array('lang' => 'Can print private messages', 'cat' => 'pm'),	'acl_u_pm_attach'	=> array('lang' => 'Can attach files in private messages', 'cat' => 'pm'),	'acl_u_pm_download'	=> array('lang' => 'Can download files in private messages', 'cat' => 'pm'),	'acl_u_pm_bbcode'	=> array('lang' => 'Can use BBCode in private messages', 'cat' => 'pm'),	'acl_u_pm_smilies'	=> array('lang' => 'Can use smilies in private messages', 'cat' => 'pm'),	'acl_u_pm_img'		=> array('lang' => 'Can use [img] BBCode tag in private messages', 'cat' => 'pm'),	'acl_u_pm_flash'	=> array('lang' => 'Can use [flash] BBCode tag in private messages', 'cat' => 'pm'),	'acl_u_sendemail'	=> array('lang' => 'Can send e-mails', 'cat' => 'misc'),	'acl_u_sendim'		=> array('lang' => 'Can send instant messages', 'cat' => 'misc'),	'acl_u_ignoreflood'	=> array('lang' => 'Can ignore flood limit', 'cat' => 'misc'),	'acl_u_hideonline'	=> array('lang' => 'Can hide online status', 'cat' => 'misc'),	'acl_u_viewonline'	=> array('lang' => 'Can view hidden online users', 'cat' => 'misc'),	'acl_u_search'		=> array('lang' => 'Can search board', 'cat' => 'misc'),));// Forum Permissions$lang = array_merge($lang, array(	'acl_f_list'		=> array('lang' => 'Can see forum', 'cat' => 'post'),	'acl_f_read'		=> array('lang' => 'Can read forum', 'cat' => 'post'),	'acl_f_post'		=> array('lang' => 'Can start new topics', 'cat' => 'post'),	'acl_f_reply'		=> array('lang' => 'Can reply to topics', 'cat' => 'post'),	'acl_f_icons'		=> array('lang' => 'Can use topic/post icons', 'cat' => 'post'),	'acl_f_announce'	=> array('lang' => 'Can post announcements', 'cat' => 'post'),	'acl_f_sticky'		=> array('lang' => 'Can post stickies', 'cat' => 'post'),	'acl_f_poll'		=> array('lang' => 'Can create polls', 'cat' => 'polls'),	'acl_f_vote'		=> array('lang' => 'Can vote in polls', 'cat' => 'polls'),	'acl_f_votechg'		=> array('lang' => 'Can change existing vote', 'cat' => 'polls'),	'acl_f_attach'		=> array('lang' => 'Can attach files', 'cat' => 'content'),	'acl_f_download'	=> array('lang' => 'Can download files', 'cat' => 'content'),	'acl_f_sigs'		=> array('lang' => 'Can use signatures', 'cat' => 'content'),	'acl_f_bbcode'		=> array('lang' => 'Can use BBCode', 'cat' => 'content'),	'acl_f_smilies'		=> array('lang' => 'Can use smilies', 'cat' => 'content'),	'acl_f_img'			=> array('lang' => 'Can use [img] BBCode tag', 'cat' => 'content'),	'acl_f_flash'		=> array('lang' => 'Can use [flash] BBCode tag', 'cat' => 'content'),	'acl_f_edit'		=> array('lang' => 'Can edit own posts', 'cat' => 'actions'),	'acl_f_delete'		=> array('lang' => 'Can delete own posts', 'cat' => 'actions'),	'acl_f_user_lock'	=> array('lang' => 'Can lock own topics', 'cat' => 'actions'),	'acl_f_bump'		=> array('lang' => 'Can bump topics', 'cat' => 'actions'),	'acl_f_report'		=> array('lang' => 'Can report posts', 'cat' => 'actions'),	'acl_f_subscribe'	=> array('lang' => 'Can subscribe forum', 'cat' => 'actions'),	'acl_f_print'		=> array('lang' => 'Can print topics', 'cat' => 'actions'),	'acl_f_email'		=> array('lang' => 'Can e-mail topics', 'cat' => 'actions'),	'acl_f_search'		=> array('lang' => 'Can search the forum', 'cat' => 'misc'),	'acl_f_ignoreflood' => array('lang' => 'Can ignore flood limit', 'cat' => 'misc'),	'acl_f_postcount'	=> array('lang' => 'Increment post counter<br /><em>Please note that this setting only affects new posts.</em>', 'cat' => 'misc'),	'acl_f_noapprove'	=> array('lang' => 'Can post without approval', 'cat' => 'misc'),));// Moderator Permissions$lang = array_merge($lang, array(	'acl_m_edit'		=> array('lang' => 'Can edit posts', 'cat' => 'post_actions'),	'acl_m_delete'		=> array('lang' => 'Can delete posts', 'cat' => 'post_actions'),	'acl_m_approve'		=> array('lang' => 'Can approve posts', 'cat' => 'post_actions'),	'acl_m_report'		=> array('lang' => 'Can close and delete reports', 'cat' => 'post_actions'),	'acl_m_chgposter'	=> array('lang' => 'Can change post author', 'cat' => 'post_actions'),	'acl_m_move'	=> array('lang' => 'Can move topics', 'cat' => 'topic_actions'),	'acl_m_lock'	=> array('lang' => 'Can lock topics', 'cat' => 'topic_actions'),	'acl_m_split'	=> array('lang' => 'Can split topics', 'cat' => 'topic_actions'),	'acl_m_merge'	=> array('lang' => 'Can merge topics', 'cat' => 'topic_actions'),	'acl_m_info'	=> array('lang' => 'Can view post details', 'cat' => 'misc'),	'acl_m_warn'	=> array('lang' => 'Can issue warnings<br /><em>This setting is only assigned globally. It is not forum based.</em>', 'cat' => 'misc'), // This moderator setting is only global (and not local)	'acl_m_ban'		=> array('lang' => 'Can manage bans<br /><em>This setting is only assigned globally. It is not forum based.</em>', 'cat' => 'misc'), // This moderator setting is only global (and not local)));// Admin Permissions$lang = array_merge($lang, array(	'acl_a_board'		=> array('lang' => 'Can alter board settings/check for updates', 'cat' => 'settings'),	'acl_a_server'		=> array('lang' => 'Can alter server/communication settings', 'cat' => 'settings'),	'acl_a_jabber'		=> array('lang' => 'Can alter Jabber settings', 'cat' => 'settings'),	'acl_a_phpinfo'		=> array('lang' => 'Can view php settings', 'cat' => 'settings'),	'acl_a_forum'		=> array('lang' => 'Can manage forums', 'cat' => 'forums'),	'acl_a_forumadd'	=> array('lang' => 'Can add new forums', 'cat' => 'forums'),	'acl_a_forumdel'	=> array('lang' => 'Can delete forums', 'cat' => 'forums'),	'acl_a_prune'		=> array('lang' => 'Can prune forums', 'cat' => 'forums'),	'acl_a_icons'		=> array('lang' => 'Can alter topic/post icons and smilies', 'cat' => 'posting'),	'acl_a_words'		=> array('lang' => 'Can alter word censors', 'cat' => 'posting'),	'acl_a_bbcode'		=> array('lang' => 'Can define BBCode tags', 'cat' => 'posting'),	'acl_a_attach'		=> array('lang' => 'Can alter attachment related settings', 'cat' => 'posting'),	'acl_a_user'		=> array('lang' => 'Can manage users<br /><em>This also includes seeing the users browser agent within the viewonline list.</em>', 'cat' => 'user_group'),	'acl_a_userdel'		=> array('lang' => 'Can delete/prune users', 'cat' => 'user_group'),	'acl_a_group'		=> array('lang' => 'Can manage groups', 'cat' => 'user_group'),	'acl_a_groupadd'	=> array('lang' => 'Can add new groups', 'cat' => 'user_group'),	'acl_a_groupdel'	=> array('lang' => 'Can delete groups', 'cat' => 'user_group'),	'acl_a_ranks'		=> array('lang' => 'Can manage ranks', 'cat' => 'user_group'),	'acl_a_profile'		=> array('lang' => 'Can manage custom profile fields', 'cat' => 'user_group'),	'acl_a_names'		=> array('lang' => 'Can manage disallowed names', 'cat' => 'user_group'),	'acl_a_ban'			=> array('lang' => 'Can manage bans', 'cat' => 'user_group'),	'acl_a_viewauth'	=> array('lang' => 'Can view permission masks', 'cat' => 'permissions'),	'acl_a_authgroups'	=> array('lang' => 'Can alter permissions for individual groups', 'cat' => 'permissions'),	'acl_a_authusers'	=> array('lang' => 'Can alter permissions for individual users', 'cat' => 'permissions'),	'acl_a_fauth'		=> array('lang' => 'Can alter forum permission class', 'cat' => 'permissions'),	'acl_a_mauth'		=> array('lang' => 'Can alter moderator permission class', 'cat' => 'permissions'),	'acl_a_aauth'		=> array('lang' => 'Can alter admin permission class', 'cat' => 'permissions'),	'acl_a_uauth'		=> array('lang' => 'Can alter user permission class', 'cat' => 'permissions'),	'acl_a_roles'		=> array('lang' => 'Can manage roles', 'cat' => 'permissions'),	'acl_a_switchperm'	=> array('lang' => 'Can use others permissions', 'cat' => 'permissions'),	'acl_a_styles'		=> array('lang' => 'Can manage styles', 'cat' => 'misc'),	'acl_a_viewlogs'	=> array('lang' => 'Can view logs', 'cat' => 'misc'),	'acl_a_clearlogs'	=> array('lang' => 'Can clear logs', 'cat' => 'misc'),	'acl_a_modules'		=> array('lang' => 'Can manage modules', 'cat' => 'misc'),	'acl_a_language'	=> array('lang' => 'Can manage language packs', 'cat' => 'misc'),	'acl_a_email'		=> array('lang' => 'Can send mass e-mail', 'cat' => 'misc'),	'acl_a_bots'		=> array('lang' => 'Can manage bots', 'cat' => 'misc'),	'acl_a_reasons'		=> array('lang' => 'Can manage report/denial reasons', 'cat' => 'misc'),	'acl_a_backup'		=> array('lang' => 'Can backup/restore database', 'cat' => 'misc'),	'acl_a_search'		=> array('lang' => 'Can manage search backends and settings', 'cat' => 'misc'),));?>
<?php/**** acp_profile [English]** @package language* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** DO NOT CHANGE*/if (!defined('IN_PHPBB')){	exit;}if (empty($lang) || !is_array($lang)){	$lang = array();}// DEVELOPERS PLEASE NOTE//// All language files should use UTF-8 as their encoding and the files must not contain a BOM.//// Placeholders can now contain order information, e.g. instead of// 'Page %s of %s' you can (and should) write 'Page %1$s of %2$s', this allows// translators to re-order the output of data while ensuring it remains correct//// You do not need this where single placeholders are used, e.g. 'Message %d' is fine// equally where a string contains only two placeholders which are used to wrap text// in a url you again do not need to specify an order e.g., 'Click %sHERE%s' is fine// Custom profile fields$lang = array_merge($lang, array(	'ADDED_PROFILE_FIELD'	=> 'Successfully added custom profile field.',	'ALPHA_ONLY'			=> 'Alphanumeric only',	'ALPHA_SPACERS'			=> 'Alphanumeric and spacers',	'ALWAYS_TODAY'			=> 'Always the current date',	'BOOL_ENTRIES_EXPLAIN'	=> 'Enter your options now',	'BOOL_TYPE_EXPLAIN'		=> 'Define the type, either a checkbox or radio buttons. A checkbox will only be displayed if it is checked for a given user. In that case the <strong>second</strong> language option will be used. Radio buttons will display regardless of their value.',	'CHANGED_PROFILE_FIELD'		=> 'Successfully changed profile field.',	'CHARS_ANY'					=> 'Any character',	'CHECKBOX'					=> 'Checkbox',	'COLUMNS'					=> 'Columns',	'CP_LANG_DEFAULT_VALUE'		=> 'Default value',	'CP_LANG_EXPLAIN'			=> 'Field description',	'CP_LANG_EXPLAIN_EXPLAIN'	=> 'The explanation for this field presented to the user.',	'CP_LANG_NAME'				=> 'Field name/title presented to the user',	'CP_LANG_OPTIONS'			=> 'Options',	'CREATE_NEW_FIELD'			=> 'Create new field',	'CUSTOM_FIELDS_NOT_TRANSLATED'	=> 'At least one custom profile field has not yet been translated. Please enter the required information by clicking on the Translate link.',	'DEFAULT_ISO_LANGUAGE'			=> 'Default language [%s]',	'DEFAULT_LANGUAGE_NOT_FILLED'	=> 'The language entries for the default language are not filled for this profile field.',	'DEFAULT_VALUE'					=> 'Default value',	'DELETE_PROFILE_FIELD'			=> 'Remove profile field',	'DELETE_PROFILE_FIELD_CONFIRM'	=> 'Are you sure you want to delete this profile field?',	'DISPLAY_AT_PROFILE'			=> 'Display in user control panel',	'DISPLAY_AT_PROFILE_EXPLAIN'	=> 'The user is able to change this profile field within the user control panel.',	'DISPLAY_AT_REGISTER'			=> 'Display on registration screen',	'DISPLAY_AT_REGISTER_EXPLAIN'	=> 'If this option is enabled, the field will be displayed on registration.',	'DISPLAY_ON_VT'					=> 'Display on viewtopic screen',	'DISPLAY_ON_VT_EXPLAIN'			=> 'If this option is enabled, the field will be displayed in the mini-profile on the topic screen.',	'DISPLAY_PROFILE_FIELD'			=> 'Publicly display profile field',	'DISPLAY_PROFILE_FIELD_EXPLAIN'	=> 'The profile field will be shown in all locations allowed within the load settings. Setting this to no will hide the field from topic pages, profiles and the memberlist.',	'DROPDOWN_ENTRIES_EXPLAIN'		=> 'Enter your options now, every option in one line.',	'EDIT_DROPDOWN_LANG_EXPLAIN'	=> 'Please note that you are able to change your options text and also able to add new options to the end. It is not advised to add new options between existing options - this could result in wrong options assigned to your users. This can also happen if you remove options in-between. Removing options from the end result in users having assigned this item now reverting back to the default one.',	'EMPTY_FIELD_IDENT'				=> 'Empty field identification',	'EMPTY_USER_FIELD_NAME'			=> 'Please enter a field name/title',	'ENTRIES'						=> 'Entries',	'EVERYTHING_OK'					=> 'Everything OK',	'FIELD_BOOL'				=> 'Boolean (Yes/No)',	'FIELD_DATE'				=> 'Date',	'FIELD_DESCRIPTION'			=> 'Field description',	'FIELD_DESCRIPTION_EXPLAIN'	=> 'The explanation for this field presented to the user.',	'FIELD_DROPDOWN'			=> 'Dropdown box',	'FIELD_IDENT'				=> 'Field identification',	'FIELD_IDENT_ALREADY_EXIST'	=> 'The chosen field identification already exist. Please choose another name.',	'FIELD_IDENT_EXPLAIN'		=> 'The field identification is a name to identify the profile field within the database and the templates.',	'FIELD_INT'					=> 'Numbers',	'FIELD_LENGTH'				=> 'Length of input box',	'FIELD_NOT_FOUND'			=> 'Profile field not found.',	'FIELD_STRING'				=> 'Single text field',	'FIELD_TEXT'				=> 'Textarea',	'FIELD_TYPE'				=> 'Field type',	'FIELD_TYPE_EXPLAIN'		=> 'You are not able to change the field type later.',	'FIELD_VALIDATION'			=> 'Field validation',	'FIRST_OPTION'				=> 'First option',	'HIDE_PROFILE_FIELD'			=> 'Hide profile field',	'HIDE_PROFILE_FIELD_EXPLAIN'	=> 'Hide the profile field from all other users except the user, administrators and moderators who are still able to see this field. If the Display in user control panel option is disabled, the user will not be able to see or change this field and the field can only be changed by administrators.',	'INVALID_CHARS_FIELD_IDENT'	=> 'Field identification can only contain lowercase a-z and _',	'INVALID_FIELD_IDENT_LEN'	=> 'Field identification can only be 17 characters long',	'ISO_LANGUAGE'				=> 'Language [%s]',	'LANG_SPECIFIC_OPTIONS'		=> 'Language specific options [<strong>%s</strong>]',	'MAX_FIELD_CHARS'		=> 'Maximum number of characters',	'MAX_FIELD_NUMBER'		=> 'Highest allowed number',	'MIN_FIELD_CHARS'		=> 'Minimum number of characters',	'MIN_FIELD_NUMBER'		=> 'Lowest allowed number',	'NO_FIELD_ENTRIES'			=> 'No entries defined',	'NO_FIELD_ID'				=> 'No field id specified.',	'NO_FIELD_TYPE'				=> 'No Field type specified.',	'NO_VALUE_OPTION'			=> 'Option equal to non entered value',	'NO_VALUE_OPTION_EXPLAIN'	=> 'Value for a non-entry. If the field is required, the user gets an error if he choose the option selected here.',	'NUMBERS_ONLY'				=> 'Only numbers (0-9)',	'PROFILE_BASIC_OPTIONS'		=> 'Basic options',	'PROFILE_FIELD_ACTIVATED'	=> 'Profile field successfully activated.',	'PROFILE_FIELD_DEACTIVATED'	=> 'Profile field successfully deactivated.',	'PROFILE_LANG_OPTIONS'		=> 'Language specific options',	'PROFILE_TYPE_OPTIONS'		=> 'Profile type specific options',	'RADIO_BUTTONS'				=> 'Radio buttons',	'REMOVED_PROFILE_FIELD'		=> 'Successfully removed profile field.',	'REQUIRED_FIELD'			=> 'Required field',	'REQUIRED_FIELD_EXPLAIN'	=> 'Force profile field to be filled out or specified by user or administrator. If display at registration screen option is disabled, the field will only be required when the user edits their profile.',	'ROWS'						=> 'Rows',	'SAVE'							=> 'Save',	'SECOND_OPTION'					=> 'Second option',	'STEP_1_EXPLAIN_CREATE'			=> 'Here you can enter the first basic parameters of your new profile field. This information is needed for the second step where youll be able to set remaining options and tweak your profile field further.',	'STEP_1_EXPLAIN_EDIT'			=> 'Here you can change the basic parameters of your profile field. The relevant options are re-calculated within the second step.',	'STEP_1_TITLE_CREATE'			=> 'Add profile field',	'STEP_1_TITLE_EDIT'				=> 'Edit profile field',	'STEP_2_EXPLAIN_CREATE'			=> 'Here you are able to define some common options you may want to adjust.',	'STEP_2_EXPLAIN_EDIT'			=> 'Here you are able to change some common options.<br /><strong>Please note that changes to profile fields will not affect existing profile fields entered by your users.</strong>',	'STEP_2_TITLE_CREATE'			=> 'Profile type specific options',	'STEP_2_TITLE_EDIT'				=> 'Profile type specific options',	'STEP_3_EXPLAIN_CREATE'			=> 'Since you have more than one board language installed, you have to fill out the remaining language items too. The profile field will work with the default language enabled, you are able to fill out the remaining language items later too.',	'STEP_3_EXPLAIN_EDIT'			=> 'Since you have more than one board language installed, you now can change or add the remaining language items too. The profile field will work with the default language enabled.',	'STEP_3_TITLE_CREATE'			=> 'Remaining language definitions',	'STEP_3_TITLE_EDIT'				=> 'Language definitions',	'STRING_DEFAULT_VALUE_EXPLAIN'	=> 'Enter a default phrase to be displayed, a default value. Leave empty if you want to show it empty at the first place.',	'TEXT_DEFAULT_VALUE_EXPLAIN'	=> 'Enter a default text to be displayed, a default value. Leave empty if you want to show it empty at the first place.',	'TRANSLATE'						=> 'Translate',	'USER_FIELD_NAME'	=> 'Field name/title presented to the user',	'VISIBILITY_OPTION'				=> 'Visibility options',));?>
<?php return array(''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'ff',''=>'fi',''=>'fl',''=>'',''=>'',''=>'',''=>'st',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'0',''=>'1',''=>'2',''=>'3',''=>'4',''=>'5',''=>'6',''=>'7',''=>'8',''=>'9',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'');
<?php/**** @package acp* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @package module_install*/class acp_users_info{	function module()	{		return array(			'filename'	=> 'acp_users',			'title'		=> 'ACP_USER_MANAGEMENT',			'version'	=> '1.0.0',			'modes'		=> array(				'overview'		=> array('title' => 'ACP_MANAGE_USERS', 'auth' => 'acl_a_user', 'cat' => array('ACP_CAT_USERS')),				'feedback'		=> array('title' => 'ACP_USER_FEEDBACK', 'auth' => 'acl_a_user', 'display' => false, 'cat' => array('ACP_CAT_USERS')),				'warnings'		=> array('title' => 'ACP_USER_WARNINGS', 'auth' => 'acl_a_user', 'display' => false, 'cat' => array('ACP_CAT_USERS')),				'profile'		=> array('title' => 'ACP_USER_PROFILE', 'auth' => 'acl_a_user', 'display' => false, 'cat' => array('ACP_CAT_USERS')),				'prefs'			=> array('title' => 'ACP_USER_PREFS', 'auth' => 'acl_a_user', 'display' => false, 'cat' => array('ACP_CAT_USERS')),				'avatar'		=> array('title' => 'ACP_USER_AVATAR', 'auth' => 'acl_a_user', 'display' => false, 'cat' => array('ACP_CAT_USERS')),				'rank'			=> array('title' => 'ACP_USER_RANK', 'auth' => 'acl_a_user', 'display' => false, 'cat' => array('ACP_CAT_USERS')),				'sig'			=> array('title' => 'ACP_USER_SIG', 'auth' => 'acl_a_user', 'display' => false, 'cat' => array('ACP_CAT_USERS')),				'groups'		=> array('title' => 'ACP_USER_GROUPS', 'auth' => 'acl_a_user && acl_a_group', 'display' => false, 'cat' => array('ACP_CAT_USERS')),				'perm'			=> array('title' => 'ACP_USER_PERM', 'auth' => 'acl_a_user && acl_a_viewauth', 'display' => false, 'cat' => array('ACP_CAT_USERS')),				'attach'		=> array('title' => 'ACP_USER_ATTACH', 'auth' => 'acl_a_user', 'display' => false, 'cat' => array('ACP_CAT_USERS')),			),		);	}	function install()	{	}	function uninstall()	{	}}?>
<?php/**** @package ucp* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @package module_install*/class ucp_main_info{	function module()	{		return array(			'filename'	=> 'ucp_main',			'title'		=> 'UCP_MAIN',			'version'	=> '1.0.0',			'modes'		=> array(				'front'			=> array('title' => 'UCP_MAIN_FRONT', 'auth' => '', 'cat' => array('UCP_MAIN')),				'subscribed'	=> array('title' => 'UCP_MAIN_SUBSCRIBED', 'auth' => '', 'cat' => array('UCP_MAIN')),				'bookmarks'		=> array('title' => 'UCP_MAIN_BOOKMARKS', 'auth' => 'cfg_allow_bookmarks', 'cat' => array('UCP_MAIN')),				'drafts'		=> array('title' => 'UCP_MAIN_DRAFTS', 'auth' => '', 'cat' => array('UCP_MAIN')),			),		);	}	function install()	{	}	function uninstall()	{	}}?>
<?php/**** @package phpBB3* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @ignore*/define('IN_PHPBB', true);$phpbb_root_path = (defined('PHPBB_ROOT_PATH')) ? PHPBB_ROOT_PATH : './';$phpEx = substr(strrchr(__FILE__, '.'), 1);include($phpbb_root_path . 'common.' . $phpEx);include($phpbb_root_path . 'includes/functions_display.' . $phpEx);// Start session management$user->session_begin();$auth->acl($user->data);$user->setup('mcp');$forum_id		= request_var('f', 0);$post_id		= request_var('p', 0);$pm_id			= request_var('pm', 0);$reason_id		= request_var('reason_id', 0);$report_text	= utf8_normalize_nfc(request_var('report_text', '', true));$user_notify	= ($user->data['is_registered']) ? request_var('notify', 0) : false;$submit = (isset($_POST['submit'])) ? true : false;if (!$post_id && (!$pm_id || !$config['allow_pm_report'])){	trigger_error('NO_POST_SELECTED');}if ($post_id){	$redirect_url = append_sid("{$phpbb_root_path}viewtopic.$phpEx", "f=$forum_id&amp;p=$post_id") . "#p$post_id";	$return_forum_url = append_sid("{$phpbb_root_path}viewforum.$phpEx", "f=$forum_id");	$pm_id = 0;}else{	$redirect_url = append_sid("{$phpbb_root_path}ucp.$phpEx", "i=pm&mode=view&p=$pm_id");	$return_forum_url = '';	$post_id = 0;	$forum_id = 0;}// Has the report been cancelled?if (isset($_POST['cancel'])){	redirect($redirect_url);}if ($post_id){	// Grab all relevant data	$sql = 'SELECT t.*, p.*		FROM ' . POSTS_TABLE . ' p, ' . TOPICS_TABLE . " t		WHERE p.post_id = $post_id			AND p.topic_id = t.topic_id";	$result = $db->sql_query($sql);	$report_data = $db->sql_fetchrow($result);	$db->sql_freeresult($result);	if (!$report_data)	{		trigger_error('POST_NOT_EXIST');	}	$forum_id = (int) ($report_data['forum_id']) ? $report_data['forum_id'] : $forum_id;	$topic_id = (int) $report_data['topic_id'];	$sql = 'SELECT *		FROM ' . FORUMS_TABLE . '		WHERE forum_id = ' . $forum_id;	$result = $db->sql_query($sql);	$forum_data = $db->sql_fetchrow($result);	$db->sql_freeresult($result);	if (!$forum_data)	{		trigger_error('FORUM_NOT_EXIST');	}	// Check required permissions	$acl_check_ary = array('f_list' => 'POST_NOT_EXIST', 'f_read' => 'USER_CANNOT_READ', 'f_report' => 'USER_CANNOT_REPORT');	foreach ($acl_check_ary as $acl => $error)	{		if (!$auth->acl_get($acl, $forum_id))		{			trigger_error($error);		}	}	unset($acl_check_ary);	if ($report_data['post_reported'])	{		$message = $user->lang['ALREADY_REPORTED'];		$message .= '<br /><br />' . sprintf($user->lang['RETURN_TOPIC'], '<a href="' . $redirect_url . '">', '</a>');		$message .= '<br /><br />' . sprintf($user->lang['RETURN_FORUM'], '<a href="' . $return_forum_url . '">', '</a>');		trigger_error($message);	}}else{	// Grab all relevant data	$sql = 'SELECT p.*, pt.*		FROM ' . PRIVMSGS_TABLE . ' p, ' . PRIVMSGS_TO_TABLE . " pt		WHERE p.msg_id = $pm_id			AND p.msg_id = pt.msg_id			AND (p.author_id = " . $user->data['user_id'] . " OR pt.user_id = " . $user->data['user_id'] . ")";	$result = $db->sql_query($sql);	$report_data = $db->sql_fetchrow($result);	$db->sql_freeresult($result);	if (!$report_data)	{		$user->add_lang('ucp');		trigger_error('NO_MESSAGE');	}	if ($report_data['message_reported'])	{		$message = $user->lang['ALREADY_REPORTED_PM'];		$message .= '<br /><br />' . sprintf($user->lang['RETURN_PM'], '<a href="' . $redirect_url . '">', '</a>');		trigger_error($message);	}}// Submit report?if ($submit && $reason_id){	$sql = 'SELECT *		FROM ' . REPORTS_REASONS_TABLE . "		WHERE reason_id = $reason_id";	$result = $db->sql_query($sql);	$row = $db->sql_fetchrow($result);	$db->sql_freeresult($result);	if (!$row || (!$report_text && strtolower($row['reason_title']) == 'other'))	{		trigger_error('EMPTY_REPORT');	}	$sql_ary = array(		'reason_id'		=> (int) $reason_id,		'post_id'		=> $post_id,		'pm_id'			=> $pm_id,		'user_id'		=> (int) $user->data['user_id'],		'user_notify'	=> (int) $user_notify,		'report_closed'	=> 0,		'report_time'	=> (int) time(),		'report_text'	=> (string) $report_text	);	$sql = 'INSERT INTO ' . REPORTS_TABLE . ' ' . $db->sql_build_array('INSERT', $sql_ary);	$db->sql_query($sql);	$report_id = $db->sql_nextid();	if ($post_id)	{		$sql = 'UPDATE ' . POSTS_TABLE . '			SET post_reported = 1			WHERE post_id = ' . $post_id;		$db->sql_query($sql);		if (!$report_data['topic_reported'])		{			$sql = 'UPDATE ' . TOPICS_TABLE . '				SET topic_reported = 1				WHERE topic_id = ' . $report_data['topic_id'] . '					OR topic_moved_id = ' . $report_data['topic_id'];			$db->sql_query($sql);		}		$lang_return = $user->lang['RETURN_TOPIC'];		$lang_success = $user->lang['POST_REPORTED_SUCCESS'];	}	else	{		$sql = 'UPDATE ' . PRIVMSGS_TABLE . '			SET message_reported = 1			WHERE msg_id = ' . $pm_id;		$db->sql_query($sql);		$sql_ary = array(			'msg_id'		=> $pm_id,			'user_id'		=> ANONYMOUS,			'author_id'		=> (int) $report_data['author_id'],			'pm_deleted'	=> 0,			'pm_new'		=> 0,			'pm_unread'		=> 0,			'pm_replied'	=> 0,			'pm_marked'		=> 0,			'pm_forwarded'	=> 0,			'folder_id'		=> PRIVMSGS_INBOX,		);		$sql = 'INSERT INTO ' . PRIVMSGS_TO_TABLE . ' ' . $db->sql_build_array('INSERT', $sql_ary);		$db->sql_query($sql);		$lang_return = $user->lang['RETURN_PM'];		$lang_success = $user->lang['PM_REPORTED_SUCCESS'];	}	meta_refresh(3, $redirect_url);	$message = $lang_success . '<br /><br />' . sprintf($lang_return, '<a href="' . $redirect_url . '">', '</a>');	if ($return_forum_url)	{		$message .= '<br /><br />' . sprintf($user->lang['RETURN_FORUM'], '<a href="' . $return_forum_url . '">', '</a>');	}	trigger_error($message);}// Generate the reasonsdisplay_reasons($reason_id);$page_title = ($pm_id) ? $user->lang['REPORT_MESSAGE'] : $user->lang['REPORT_POST'];$template->assign_vars(array(	'S_REPORT_POST'		=> ($pm_id) ? false : true,	'REPORT_TEXT'		=> $report_text,	'S_REPORT_ACTION'	=> append_sid("{$phpbb_root_path}report.$phpEx", 'f=' . $forum_id . '&amp;p=' . $post_id . '&amp;pm=' . $pm_id),	'S_NOTIFY'			=> $user_notify,	'S_CAN_NOTIFY'		=> ($user->data['is_registered']) ? true : false));generate_forum_nav($forum_data);// Start output of pagepage_header($page_title);$template->set_filenames(array(	'body' => 'report_body.html'));page_footer();?>
<?php/**** @package install* @version $Id$* @copyright (c) 2006 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** NOTE to potential convertor authors. Please use this file to get* familiar with the structure since we added some bare explanations here.** Since this file gets included more than once on one page you are not able to add functions to it.* Instead use a functions_ file.** @ignore*/if (!defined('IN_PHPBB')){	exit;}include($phpbb_root_path . 'config.' . $phpEx);unset($dbpasswd);/*** $convertor_data provides some basic information about this convertor which is* used on the initial list of convertors and to populate the default settings*/$convertor_data = array(	'forum_name'	=> 'phpBB 2.0.x',	'version'		=> '1.0.3',	'phpbb_version'	=> '3.0.10',	'author'		=> '<a href="http://www.phpbb.com/">phpBB Group</a>',	'dbms'			=> $dbms,	'dbhost'		=> $dbhost,	'dbport'		=> $dbport,	'dbuser'		=> $dbuser,	'dbpasswd'		=> '',	'dbname'		=> $dbname,	'table_prefix'	=> 'phpbb_',	'forum_path'	=> '../forums',	'author_notes'	=> '',);/*** $tables is a list of the tables (minus prefix) which we expect to find in the* source forum. It is used to guess the prefix if the specified prefix is incorrect*/$tables = array(	'auth_access',	'banlist',	'categories',	'disallow',	'forum_prune',	'forums',	'groups',	'posts',	'posts_text',	'privmsgs',	'privmsgs_text',	'ranks',	'smilies',	'topics',	'topics_watch',	'user_group',	'users',	'vote_desc',	'vote_results',	'vote_voters',	'words');/*** $config_schema details how the board configuration information is stored in the source forum.** 'table_format' can take the value 'file' to indicate a config file. In this case array_name* is set to indicate the name of the array the config values are stored in* Example of using a file:* $config_schema = array(* 	'table_format'	=>	'file',* 	'filename'	=>	'NAME OF FILE', // If the file is not in the root directory, the path needs to be added with no leading slash* 	'array_name' => 'NAME OF ARRAY', // Only used if the configuration file stores the setting in an array.* 	'settings'		=>	array(*        'board_email' => 'SUPPORT_EMAIL', // target config name => source target name* 	)* );* 'table_format' can be an array if the values are stored in a table which is an assosciative array* (as per phpBB 2.0.x)* If left empty, values are assumed to be stored in a table where each config setting is* a column (as per phpBB 1.x)** In either of the latter cases 'table_name' indicates the name of the table in the database** 'settings' is an array which maps the name of the config directive in the source forum* to the config directive in phpBB3. It can either be a direct mapping or use a function.* Please note that the contents of the old config value are passed to the function, therefore* an in-built function requiring the variable passed by reference is not able to be used. Since* empty() is such a function we created the function is_empty() to be used instead.*/$config_schema = array(	'table_name'	=>	'config',	'table_format'	=>	array('config_name' => 'config_value'),	'settings'		=>	array(		'allow_bbcode'			=> 'allow_bbcode',		'allow_smilies'			=> 'allow_smilies',		'allow_sig'				=> 'allow_sig',		'allow_namechange'		=> 'allow_namechange',		'allow_avatar_local'	=> 'allow_avatar_local',		'allow_avatar_remote'	=> 'allow_avatar_remote',		'allow_avatar_upload'	=> 'allow_avatar_upload',		'board_disable'			=> 'board_disable',		'sitename'				=> 'phpbb_set_encoding(sitename)',		'site_desc'				=> 'phpbb_set_encoding(site_desc)',		'session_length'		=> 'session_length',		'board_email_sig'		=> 'phpbb_set_encoding(board_email_sig)',		'posts_per_page'		=> 'posts_per_page',		'topics_per_page'		=> 'topics_per_page',		'enable_confirm'		=> 'enable_confirm',		'board_email_form'		=> 'board_email_form',		'override_user_style'	=> 'override_user_style',		'hot_threshold'			=> 'hot_threshold',		'max_poll_options'		=> 'max_poll_options',		'max_sig_chars'			=> 'max_sig_chars',		'pm_max_msgs'			=> 'max_inbox_privmsgs',		'smtp_delivery'			=> 'smtp_delivery',		'smtp_host'				=> 'smtp_host',		'smtp_username'			=> 'smtp_username',		'smtp_password'			=> 'smtp_password',		'require_activation'	=> 'require_activation',		'flood_interval'		=> 'flood_interval',		'avatar_filesize'		=> 'avatar_filesize',		'avatar_max_width'		=> 'avatar_max_width',		'avatar_max_height'		=> 'avatar_max_height',		'default_dateformat'	=> 'phpbb_set_encoding(default_dateformat)',		'board_timezone'		=> 'board_timezone',		'allow_privmsg'			=> 'not(privmsg_disable)',		'gzip_compress'			=> 'gzip_compress',		'coppa_enable'			=> '!is_empty(coppa_mail)',		'coppa_fax'				=> 'coppa_fax',		'coppa_mail'			=> 'coppa_mail',		'record_online_users'	=> 'record_online_users',		'record_online_date'	=> 'record_online_date',		'board_startdate'		=> 'board_startdate',	));/*** $test_file is the name of a file which is present on the source* forum which can be used to check that the path specified by the* user was correct*/$test_file = 'modcp.php';/*** If this is set then we are not generating the first page of information but getting the conversion information.*/if (!$get_info){	// Test to see if the birthday MOD is installed on the source forum	// Niels' birthday mod	if (get_config_value('birthday_required') !== false || get_config_value('bday_require') !== false)	{		define('MOD_BIRTHDAY', true);	}	// TerraFrost's validated birthday mod	if (get_config_value('bday_require') !== false)	{		define('MOD_BIRTHDAY_TERRA', true);	}	// Test to see if the attachment MOD is installed on the source forum	// If it is, we will convert this data as well	$src_db->sql_return_on_error(true);	$sql = "SELECT config_value		FROM {$convert->src_table_prefix}attachments_config		WHERE config_name = 'upload_dir'";	$result = $src_db->sql_query($sql);	if ($result && $row = $src_db->sql_fetchrow($result))	{		// Here the constant is defined		define('MOD_ATTACHMENT', true);		// Here i add more tables to be checked in the old forum		$tables += array(			'attachments',			'attachments_desc',			'extensions',			'extension_groups'		);		$src_db->sql_freeresult($result);	}	else if ($result)	{		$src_db->sql_freeresult($result);	}	/**	* Tests for further MODs can be included here.	* Please use constants for this, prefixing them with MOD_	*/	$src_db->sql_return_on_error(false);	// Now let us set a temporary config variable for user id incrementing	$sql = "SELECT user_id		FROM {$convert->src_table_prefix}users		WHERE user_id = 1";	$result = $src_db->sql_query($sql);	$user_id = (int) $src_db->sql_fetchfield('user_id');	$src_db->sql_freeresult($result);	// If there is a user id 1, we need to increment user ids. :/	if ($user_id === 1)	{		// Try to get the maximum user id possible...		$sql = "SELECT MAX(user_id) AS max_user_id			FROM {$convert->src_table_prefix}users";		$result = $src_db->sql_query($sql);		$user_id = (int) $src_db->sql_fetchfield('max_user_id');		$src_db->sql_freeresult($result);		set_config('increment_user_id', ($user_id + 1), true);	}	else	{		set_config('increment_user_id', 0, true);	}	// Overwrite maximum avatar width/height	@define('DEFAULT_AVATAR_X_CUSTOM', get_config_value('avatar_max_width'));	@define('DEFAULT_AVATAR_Y_CUSTOM', get_config_value('avatar_max_height'));	// additional table used only during conversion	@define('USERCONV_TABLE', $table_prefix . 'userconv');/***	Description on how to use the convertor framework.**	'schema' Syntax Description*		-> 'target'			=> Target Table. If not specified the next table will be handled*		-> 'primary'		=> Primary Key. If this is specified then this table is processed in batches*		-> 'query_first'	=> array('target' or 'src', Query to execute before beginning the process*								(if more than one then specified as array))*		-> 'function_first'	=> Function to execute before beginning the process (if more than one then specified as array)*								(This is mostly useful if variables need to be given to the converting process)*		-> 'test_file'		=> This is not used at the moment but should be filled with a file from the old installation**		// DB Functions*		'distinct'	=> Add DISTINCT to the select query*		'where'		=> Add WHERE to the select query*		'group_by'	=> Add GROUP BY to the select query*		'left_join'	=> Add LEFT JOIN to the select query (if more than one joins specified as array)*		'having'	=> Add HAVING to the select query**		// DB INSERT array*		This one consist of three parameters*		First Parameter:*							The key need to be filled within the target table*							If this is empty, the target table gets not assigned the source value*		Second Parameter:*							Source value. If the first parameter is specified, it will be assigned this value.*							If the first parameter is empty, this only gets added to the select query*		Third Parameter:*							Custom Function. Function to execute while storing source value into target table.*							The functions return value get stored.*							The function parameter consist of the value of the second parameter.**							types:*								- empty string == execute nothing*								- string == function to execute*								- array == complex execution instructions**		Complex execution instructions:*		@todo test complex execution instructions - in theory they will work fine**							By defining an array as the third parameter you are able to define some statements to be executed. The key*							is defining what to execute, numbers can be appended...**							'function' => execute function*							'execute' => run code, whereby all occurrences of {VALUE} get replaced by the last returned value.*										The result *must* be assigned/stored to {RESULT}.*							'typecast'	=> typecast value**							The returned variables will be made always available to the next function to continue to work with.**							example (variable inputted is an integer of 1):**							array(*								'function1'		=> 'increment_by_one',		// returned variable is 2*								'typecast'		=> 'string',				// typecast variable to be a string*								'execute'		=> '{RESULT} = {VALUE} . ' is good';', // returned variable is '2 is good'*								'function2'		=> 'replace_good_with_bad',				// returned variable is '2 is bad'*							),**/	$convertor = array(		'test_file'				=> 'viewtopic.php',		'avatar_path'			=> get_config_value('avatar_path') . '/',		'avatar_gallery_path'	=> get_config_value('avatar_gallery_path') . '/',		'smilies_path'			=> get_config_value('smilies_path') . '/',		'upload_path'			=> (defined('MOD_ATTACHMENT')) ? phpbb_get_files_dir() . '/' : '',		'thumbnails'			=> (defined('MOD_ATTACHMENT')) ? array('thumbs/', 't_') : '',		'ranks_path'			=> false, // phpBB 2.0.x had no config value for a ranks path		// We empty some tables to have clean data available		'query_first'			=> array(			array('target', $convert->truncate_statement . SEARCH_RESULTS_TABLE),			array('target', $convert->truncate_statement . SEARCH_WORDLIST_TABLE),			array('target', $convert->truncate_statement . SEARCH_WORDMATCH_TABLE),			array('target', $convert->truncate_statement . LOG_TABLE),		),//	with this you are able to import all attachment files on the fly. For large boards this is not an option, therefore commented out by default.//	Instead every file gets copied while processing the corresponding attachment entry.//		if (defined("MOD_ATTACHMENT")) { import_attachment_files(); phpbb_copy_thumbnails(); }		// phpBB2 allowed some similar usernames to coexist which would have the same		// username_clean in phpBB3 which is not possible, so we'll give the admin a list		// of user ids and usernames and let him deicde what he wants to do with them		'execute_first'	=> '			phpbb_create_userconv_table();			import_avatar_gallery();			if (defined("MOD_ATTACHMENT")) phpbb_import_attach_config();			phpbb_insert_forums();		',		'execute_last'	=> array('			add_bots();		', '			update_folder_pm_count();		', '			update_unread_count();		', '			phpbb_convert_authentication(\'start\');		', '			phpbb_convert_authentication(\'first\');		', '			phpbb_convert_authentication(\'second\');		', '			phpbb_convert_authentication(\'third\');		'),		'schema' => array(			array(				'target'	=> USERCONV_TABLE,				'query_first'   => array('target', $convert->truncate_statement . USERCONV_TABLE),				array('user_id',			'users.user_id', 	''),				array('username_clean',		'users.username',	array('function1' => 'phpbb_set_encoding', 'function2' => 'utf8_clean_string')),			),			array(				'target'		=> (defined('MOD_ATTACHMENT')) ? ATTACHMENTS_TABLE : '',				'primary'		=> 'attachments.attach_id',				'query_first'	=> (defined('MOD_ATTACHMENT')) ? array('target', $convert->truncate_statement . ATTACHMENTS_TABLE) : '',				'autoincrement'	=> 'attach_id',				array('attach_id',				'attachments.attach_id',				''),				array('post_msg_id',			'attachments.post_id',					''),				array('topic_id',				'posts.topic_id',						''),				array('in_message',				0,										''),				array('is_orphan',				0,										''),				array('poster_id',				'attachments.user_id_1 AS poster_id',	'phpbb_user_id'),				array('physical_filename',		'attachments_desc.physical_filename',	'import_attachment'),				array('real_filename',			'attachments_desc.real_filename',		'phpbb_set_encoding'),				array('download_count',			'attachments_desc.download_count',		''),				array('attach_comment',			'attachments_desc.comment',				array('function1' => 'phpbb_set_encoding', 'function2' => 'utf8_htmlspecialchars')),				array('extension',				'attachments_desc.extension',			''),				array('mimetype',				'attachments_desc.mimetype',			''),				array('filesize',				'attachments_desc.filesize',			''),				array('filetime',				'attachments_desc.filetime',			''),				array('thumbnail',				'attachments_desc.thumbnail',			''),				'where'			=> 'attachments_desc.attach_id = attachments.attach_id AND attachments.privmsgs_id = 0 AND posts.post_id = attachments.post_id',				'group_by'		=> 'attachments.attach_id'			),			array(				'target'		=> (defined('MOD_ATTACHMENT')) ? ATTACHMENTS_TABLE : '',				'primary'		=> 'attachments.attach_id',				'autoincrement'	=> 'attach_id',				array('attach_id',				'attachments.attach_id',				''),				array('post_msg_id',			'attachments.privmsgs_id',				''),				array('topic_id',				0,										''),				array('in_message',				1,										''),				array('is_orphan',				0,										''),				array('poster_id',				'attachments.user_id_1 AS poster_id',	'phpbb_user_id'),				array('physical_filename',		'attachments_desc.physical_filename',	'import_attachment'),				array('real_filename',			'attachments_desc.real_filename',		''),				array('download_count',			'attachments_desc.download_count',		''),				array('attach_comment',			'attachments_desc.comment',				array('function1' => 'phpbb_set_encoding', 'function2' => 'utf8_htmlspecialchars')),				array('extension',				'attachments_desc.extension',			''),				array('mimetype',				'attachments_desc.mimetype',			''),				array('filesize',				'attachments_desc.filesize',			''),				array('filetime',				'attachments_desc.filetime',			''),				array('thumbnail',				'attachments_desc.thumbnail',			''),				'where'			=> 'attachments_desc.attach_id = attachments.attach_id AND attachments.post_id = 0',				'group_by'		=> 'attachments.attach_id'			),			array(				'target'		=> (defined('MOD_ATTACHMENT')) ? EXTENSIONS_TABLE : '',				'query_first'	=> (defined('MOD_ATTACHMENT')) ? array('target', $convert->truncate_statement . EXTENSIONS_TABLE) : '',				'autoincrement'	=> 'extension_id',				array('extension_id',			'extensions.ext_id',				''),				array('group_id',				'extensions.group_id',				''),				array('extension',				'extensions.extension',				''),			),			array(				'target'		=> (defined('MOD_ATTACHMENT')) ? EXTENSION_GROUPS_TABLE : '',				'query_first'	=> (defined('MOD_ATTACHMENT')) ? array('target', $convert->truncate_statement . EXTENSION_GROUPS_TABLE) : '',				'autoincrement'	=> 'group_id',				array('group_id',				'extension_groups.group_id',			''),				array('group_name',				'extension_groups.group_name',			array('function1' => 'phpbb_set_encoding', 'function2' => 'utf8_htmlspecialchars')),				array('cat_id',					'extension_groups.cat_id',				'phpbb_attachment_category'),				array('allow_group',			'extension_groups.allow_group',			''),				array('download_mode',			1,										''),				array('upload_icon',			'',										''),				array('max_filesize',			'extension_groups.max_filesize',		''),				array('allowed_forums',			'extension_groups.forum_permissions',	'phpbb_attachment_forum_perms'),				array('allow_in_pm',			1,										''),			),			array(				'target'		=> BANLIST_TABLE,				'execute_first'	=> 'phpbb_check_username_collisions();',				'query_first'	=> array('target', $convert->truncate_statement . BANLIST_TABLE),				array('ban_ip',					'banlist.ban_ip',					'decode_ban_ip'),				array('ban_userid',				'banlist.ban_userid',				'phpbb_user_id'),				array('ban_email',				'banlist.ban_email',				''),				array('ban_reason',				'',									''),				array('ban_give_reason',		'',									''),				'where'			=> "banlist.ban_ip NOT LIKE '%.%'",			),			array(				'target'		=> BANLIST_TABLE,				array('ban_ip',					'banlist.ban_ip',	''),				array('ban_userid',				0,					''),				array('ban_email',				'',					''),				array('ban_reason',				'',					''),				array('ban_give_reason',		'',					''),				'where'			=> "banlist.ban_ip LIKE '%.%'",			),			array(				'target'		=> DISALLOW_TABLE,				'query_first'	=> array('target', $convert->truncate_statement . DISALLOW_TABLE),				array('disallow_username',		'disallow.disallow_username',				'phpbb_disallowed_username'),			),			array(				'target'		=> RANKS_TABLE,				'query_first'	=> array('target', $convert->truncate_statement . RANKS_TABLE),				'autoincrement'	=> 'rank_id',				array('rank_id',					'ranks.rank_id',				''),				array('rank_title',					'ranks.rank_title',				array('function1' => 'phpbb_set_default_encoding', 'function2' => 'utf8_htmlspecialchars')),				array('rank_min',					'ranks.rank_min',				array('typecast' => 'int', 'execute' => '{RESULT} = ({VALUE}[0] < 0) ? 0 : {VALUE}[0];')),				array('rank_special',				'ranks.rank_special',			''),				array('rank_image',					'ranks.rank_image',				'import_rank'),			),			array(				'target'		=> TOPICS_TABLE,				'query_first'	=> array('target', $convert->truncate_statement . TOPICS_TABLE),				'primary'		=> 'topics.topic_id',				'autoincrement'	=> 'topic_id',				array('topic_id',				'topics.topic_id',					''),				array('forum_id',				'topics.forum_id',					''),				array('icon_id',				0,									''),				array('topic_poster',			'topics.topic_poster AS poster_id',	'phpbb_user_id'),				array('topic_attachment',		((defined('MOD_ATTACHMENT')) ? 'topics.topic_attachment' : 0), ''),				array('topic_title',			'topics.topic_title',				'phpbb_set_encoding'),				array('topic_time',				'topics.topic_time',				''),				array('topic_views',			'topics.topic_views',				''),				array('topic_replies',			'topics.topic_replies',				''),				array('topic_replies_real',		'topics.topic_replies',				''),				array('topic_last_post_id',		'topics.topic_last_post_id',		''),				array('topic_status',			'topics.topic_status',				'is_topic_locked'),				array('topic_moved_id',			0,									''),				array('topic_type',				'topics.topic_type',				'phpbb_convert_topic_type'),				array('topic_first_post_id',	'topics.topic_first_post_id',		''),				array('topic_last_view_time',	'posts.post_time',					'intval'),				array('poll_title',				'vote_desc.vote_text',				array('function1' => 'null_to_str', 'function2' => 'phpbb_set_encoding', 'function3' => 'htmlspecialchars_decode', 'function4' => 'utf8_htmlspecialchars')),				array('poll_start',				'vote_desc.vote_start',				'null_to_zero'),				array('poll_length',			'vote_desc.vote_length',			'null_to_zero'),				array('poll_max_options',		1,									''),				array('poll_vote_change',		0,									''),				'left_join'		=>	array (	'topics LEFT JOIN vote_desc ON topics.topic_id = vote_desc.topic_id AND topics.topic_vote = 1',											'topics LEFT JOIN posts ON topics.topic_last_post_id = posts.post_id',									),				'where'			=> 'topics.topic_moved_id = 0',			),			array(				'target'		=> TOPICS_TABLE,				'primary'		=> 'topics.topic_id',				'autoincrement'	=> 'topic_id',				array('topic_id',				'topics.topic_id',					''),				array('forum_id',				'topics.forum_id',					''),				array('icon_id',				0,									''),				array('topic_poster',			'topics.topic_poster AS poster_id',	'phpbb_user_id'),				array('topic_attachment',		((defined('MOD_ATTACHMENT')) ? 'topics.topic_attachment' : 0), ''),				array('topic_title',			'topics.topic_title',				'phpbb_set_encoding'),				array('topic_time',				'topics.topic_time',				''),				array('topic_views',			'topics.topic_views',				''),				array('topic_replies',			'topics.topic_replies',				''),				array('topic_replies_real',		'topics.topic_replies',				''),				array('topic_last_post_id',		'topics.topic_last_post_id',		''),				array('topic_status',			ITEM_MOVED,							''),				array('topic_moved_id',			'topics.topic_moved_id',			''),				array('topic_type',				'topics.topic_type',				'phpbb_convert_topic_type'),				array('topic_first_post_id',	'topics.topic_first_post_id',		''),				array('poll_title',				'vote_desc.vote_text',				array('function1' => 'null_to_str', 'function2' => 'phpbb_set_encoding', 'function3' => 'htmlspecialchars_decode', 'function4' => 'utf8_htmlspecialchars')),				array('poll_start',				'vote_desc.vote_start',				'null_to_zero'),				array('poll_length',			'vote_desc.vote_length',			'null_to_zero'),				array('poll_max_options',		1,									''),				array('poll_vote_change',		0,									''),				'left_join'		=> 'topics LEFT JOIN vote_desc ON topics.topic_id = vote_desc.topic_id AND topics.topic_vote = 1',				'where'			=> 'topics.topic_moved_id <> 0',			),			array(				'target'		=> TOPICS_WATCH_TABLE,				'primary'		=> 'topics_watch.topic_id',				'query_first'	=> array('target', $convert->truncate_statement . TOPICS_WATCH_TABLE),				array('topic_id',				'topics_watch.topic_id',			''),				array('user_id',				'topics_watch.user_id',				'phpbb_user_id'),				array('notify_status',			'topics_watch.notify_status',		''),			),			array(				'target'		=> SMILIES_TABLE,				'query_first'	=> array('target', $convert->truncate_statement . SMILIES_TABLE),				'autoincrement'	=> 'smiley_id',				array('smiley_id',				'smilies.smilies_id',				''),				array('code',					'smilies.code',						array('function1' => 'phpbb_smilie_html_decode', 'function2' => 'phpbb_set_encoding', 'function3' => 'utf8_htmlspecialchars')),				array('emotion',				'smilies.emoticon',					'phpbb_set_encoding'),				array('smiley_url',				'smilies.smile_url',				'import_smiley'),				array('smiley_width',			'smilies.smile_url',				'get_smiley_width'),				array('smiley_height',			'smilies.smile_url',				'get_smiley_height'),				array('smiley_order',			'smilies.smilies_id',				''),				array('display_on_posting',		'smilies.smilies_id',				'get_smiley_display'),				'order_by'		=> 'smilies.smilies_id ASC',			),			array(				'target'		=> POLL_OPTIONS_TABLE,				'primary'		=> 'vote_results.vote_option_id',				'query_first'	=> array('target', $convert->truncate_statement . POLL_OPTIONS_TABLE),				array('poll_option_id',			'vote_results.vote_option_id',		''),				array('topic_id',				'vote_desc.topic_id',				''),				array('',						'topics.topic_poster AS poster_id',	'phpbb_user_id'),				array('poll_option_text',		'vote_results.vote_option_text',	array('function1' => 'phpbb_set_encoding', 'function2' => 'htmlspecialchars_decode', 'function3' => 'utf8_htmlspecialchars')),				array('poll_option_total',		'vote_results.vote_result',			''),				'where'			=> 'vote_results.vote_id = vote_desc.vote_id',				'left_join'		=> 'vote_desc LEFT JOIN topics ON topics.topic_id = vote_desc.topic_id',			),			array(				'target'		=> POLL_VOTES_TABLE,				'primary'		=> 'vote_desc.topic_id',				'query_first'	=> array('target', $convert->truncate_statement . POLL_VOTES_TABLE),				array('poll_option_id',			VOTE_CONVERTED,						''),				array('topic_id',				'vote_desc.topic_id',				''),				array('vote_user_id',			'vote_voters.vote_user_id',			'phpbb_user_id'),				array('vote_user_ip',			'vote_voters.vote_user_ip',			'decode_ip'),				'where'			=> 'vote_voters.vote_id = vote_desc.vote_id',			),			array(				'target'		=> WORDS_TABLE,				'primary'		=> 'words.word_id',				'query_first'	=> array('target', $convert->truncate_statement . WORDS_TABLE),				'autoincrement'	=> 'word_id',				array('word_id',				'words.word_id',					''),				array('word',					'words.word',						'phpbb_set_encoding'),				array('replacement',			'words.replacement',				'phpbb_set_encoding'),			),			array(				'target'		=> POSTS_TABLE,				'primary'		=> 'posts.post_id',				'autoincrement'	=> 'post_id',				'query_first'	=> array('target', $convert->truncate_statement . POSTS_TABLE),				'execute_first'	=> '					$config["max_post_chars"] = 0;					$config["min_post_chars"] = 0;					$config["max_quote_depth"] = 0;				',				array('post_id',				'posts.post_id',					''),				array('topic_id',				'posts.topic_id',					''),				array('forum_id',				'posts.forum_id',					''),				array('poster_id',				'posts.poster_id',					'phpbb_user_id'),				array('icon_id',				0,									''),				array('poster_ip',				'posts.poster_ip',					'decode_ip'),				array('post_time',				'posts.post_time',					''),				array('enable_bbcode',			'posts.enable_bbcode',				''),				array('',						'posts.enable_html',				''),				array('enable_smilies',			'posts.enable_smilies',				''),				array('enable_sig',				'posts.enable_sig',					''),				array('enable_magic_url',		1,									''),				array('post_username',			'posts.post_username',				'phpbb_set_encoding'),				array('post_subject',			'posts_text.post_subject',			'phpbb_set_encoding'),				array('post_attachment',		((defined('MOD_ATTACHMENT')) ? 'posts.post_attachment' : 0), ''),				array('post_edit_time',			'posts.post_edit_time',				array('typecast' => 'int')),				array('post_edit_count',		'posts.post_edit_count',			''),				array('post_edit_reason',		'',									''),				array('post_edit_user',			'',									'phpbb_post_edit_user'),				array('bbcode_uid',				'posts.post_time',					'make_uid'),				array('post_text',				'posts_text.post_text',				'phpbb_prepare_message'),				array('',						'posts_text.bbcode_uid AS old_bbcode_uid',			''),				array('bbcode_bitfield',		'',									'get_bbcode_bitfield'),				array('post_checksum',			'',									''),				// Commented out inline search indexing, this takes up a LOT of time. :D				// @todo We either need to enable this or call the rebuild search functionality post convert/*				array('',						'',									'search_indexing'),				array('',						'posts_text.post_text AS message',	''),				array('',						'posts_text.post_subject AS title',	''),*/				'where'			=>	'posts.post_id = posts_text.post_id'			),			array(				'target'		=> PRIVMSGS_TABLE,				'primary'		=> 'privmsgs.privmsgs_id',				'autoincrement'	=> 'msg_id',				'query_first'	=> array(					array('target', $convert->truncate_statement . PRIVMSGS_TABLE),					array('target', $convert->truncate_statement . PRIVMSGS_RULES_TABLE),				),				'execute_first'	=> '					$config["max_post_chars"] = 0;					$config["min_post_chars"] = 0;					$config["max_quote_depth"] = 0;				',				array('msg_id',					'privmsgs.privmsgs_id',				''),				array('root_level',				0,									''),				array('author_id',				'privmsgs.privmsgs_from_userid AS poster_id',	'phpbb_user_id'),				array('icon_id',				0,									''),				array('author_ip',				'privmsgs.privmsgs_ip',				'decode_ip'),				array('message_time',			'privmsgs.privmsgs_date',			''),				array('enable_bbcode',			'privmsgs.privmsgs_enable_bbcode AS enable_bbcode',	''),				array('',						'privmsgs.privmsgs_enable_html AS enable_html',	''),				array('enable_smilies',			'privmsgs.privmsgs_enable_smilies AS enable_smilies',	''),				array('enable_magic_url',		1,									''),				array('enable_sig',				'privmsgs.privmsgs_attach_sig',		''),				array('message_subject',		'privmsgs.privmsgs_subject',		'phpbb_set_encoding'), // Already specialchared in 2.0.x				array('message_attachment',		((defined('MOD_ATTACHMENT')) ? 'privmsgs.privmsgs_attachment' : 0), ''),				array('message_edit_reason',	'',									''),				array('message_edit_user',		0,									''),				array('message_edit_time',		0,									''),				array('message_edit_count',		0,									''),				array('bbcode_uid',				'privmsgs.privmsgs_date AS post_time',	'make_uid'),				array('message_text',			'privmsgs_text.privmsgs_text',			'phpbb_prepare_message'),				array('',						'privmsgs_text.privmsgs_bbcode_uid AS old_bbcode_uid',			''),				array('bbcode_bitfield',		'',										'get_bbcode_bitfield'),				array('to_address',				'privmsgs.privmsgs_to_userid',			'phpbb_privmsgs_to_userid'),				array('bcc_address',			'',										''),				'where'			=>	'privmsgs.privmsgs_id = privmsgs_text.privmsgs_text_id'			),			array(				'target'		=> PRIVMSGS_FOLDER_TABLE,				'primary'		=> 'users.user_id',				'query_first'	=> array('target', $convert->truncate_statement . PRIVMSGS_FOLDER_TABLE),				array('user_id',				'users.user_id',						'phpbb_user_id'),				array('folder_name',			$user->lang['CONV_SAVED_MESSAGES'],		''),				array('pm_count',				0,										''),				'where'			=> 'users.user_id <> -1',			),			// Inbox			array(				'target'		=> PRIVMSGS_TO_TABLE,				'primary'		=> 'privmsgs.privmsgs_id',				'query_first'	=> array('target', $convert->truncate_statement . PRIVMSGS_TO_TABLE),				array('msg_id',					'privmsgs.privmsgs_id',					''),				array('user_id',				'privmsgs.privmsgs_to_userid',			'phpbb_user_id'),				array('author_id',				'privmsgs.privmsgs_from_userid',		'phpbb_user_id'),				array('pm_deleted',				0,										''),				array('pm_new',					'privmsgs.privmsgs_type',				'phpbb_new_pm'),				array('pm_unread',				'privmsgs.privmsgs_type',				'phpbb_unread_pm'),				array('pm_replied',				0,										''),				array('pm_marked',				0,										''),				array('pm_forwarded',			0,										''),				array('folder_id',				PRIVMSGS_INBOX,							''),				'where'			=> 'privmsgs.privmsgs_id = privmsgs_text.privmsgs_text_id										AND (privmsgs.privmsgs_type = 0 OR privmsgs.privmsgs_type = 1 OR privmsgs.privmsgs_type = 5)',			),			// Outbox			array(				'target'		=> PRIVMSGS_TO_TABLE,				'primary'		=> 'privmsgs.privmsgs_id',				array('msg_id',					'privmsgs.privmsgs_id',					''),				array('user_id',				'privmsgs.privmsgs_from_userid',		'phpbb_user_id'),				array('author_id',				'privmsgs.privmsgs_from_userid',		'phpbb_user_id'),				array('pm_deleted',				0,										''),				array('pm_new',					0,										''),				array('pm_unread',				0,										''),				array('pm_replied',				0,										''),				array('pm_marked',				0,										''),				array('pm_forwarded',			0,										''),				array('folder_id',				PRIVMSGS_OUTBOX,						''),				'where'			=> 'privmsgs.privmsgs_id = privmsgs_text.privmsgs_text_id										AND (privmsgs.privmsgs_type = 1 OR privmsgs.privmsgs_type = 5)',			),			// Sentbox			array(				'target'		=> PRIVMSGS_TO_TABLE,				'primary'		=> 'privmsgs.privmsgs_id',				array('msg_id',					'privmsgs.privmsgs_id',					''),				array('user_id',				'privmsgs.privmsgs_from_userid',		'phpbb_user_id'),				array('author_id',				'privmsgs.privmsgs_from_userid',		'phpbb_user_id'),				array('pm_deleted',				0,										''),				array('pm_new',					'privmsgs.privmsgs_type',				'phpbb_new_pm'),				array('pm_unread',				'privmsgs.privmsgs_type',				'phpbb_unread_pm'),				array('pm_replied',				0,										''),				array('pm_marked',				0,										''),				array('pm_forwarded',			0,										''),				array('folder_id',				PRIVMSGS_SENTBOX,						''),				'where'			=> 'privmsgs.privmsgs_id = privmsgs_text.privmsgs_text_id										AND privmsgs.privmsgs_type = 2',			),			// Savebox (SAVED IN)			array(				'target'		=> PRIVMSGS_TO_TABLE,				'primary'		=> 'privmsgs.privmsgs_id',				array('msg_id',					'privmsgs.privmsgs_id',					''),				array('user_id',				'privmsgs.privmsgs_to_userid',			'phpbb_user_id'),				array('author_id',				'privmsgs.privmsgs_from_userid',		'phpbb_user_id'),				array('pm_deleted',				0,										''),				array('pm_new',					'privmsgs.privmsgs_type',				'phpbb_new_pm'),				array('pm_unread',				'privmsgs.privmsgs_type',				'phpbb_unread_pm'),				array('pm_replied',				0,										''),				array('pm_marked',				0,										''),				array('pm_forwarded',			0,										''),				array('folder_id',				'privmsgs.privmsgs_to_userid',			'phpbb_get_savebox_id'),				'where'			=> 'privmsgs.privmsgs_id = privmsgs_text.privmsgs_text_id										AND privmsgs.privmsgs_type = 3',			),			// Savebox (SAVED OUT)			array(				'target'		=> PRIVMSGS_TO_TABLE,				'primary'		=> 'privmsgs.privmsgs_id',				array('msg_id',					'privmsgs.privmsgs_id',					''),				array('user_id',				'privmsgs.privmsgs_from_userid',		'phpbb_user_id'),				array('author_id',				'privmsgs.privmsgs_from_userid',		'phpbb_user_id'),				array('pm_deleted',				0,										''),				array('pm_new',					'privmsgs.privmsgs_type',				'phpbb_new_pm'),				array('pm_unread',				'privmsgs.privmsgs_type',				'phpbb_unread_pm'),				array('pm_replied',				0,										''),				array('pm_marked',				0,										''),				array('pm_forwarded',			0,										''),				array('folder_id',				'privmsgs.privmsgs_from_userid',		'phpbb_get_savebox_id'),				'where'			=> 'privmsgs.privmsgs_id = privmsgs_text.privmsgs_text_id										AND privmsgs.privmsgs_type = 4',			),			array(				'target'		=> GROUPS_TABLE,				'autoincrement'	=> 'group_id',				'query_first'	=> array('target', $convert->truncate_statement . GROUPS_TABLE),				array('group_id',				'groups.group_id',					''),				array('group_type',				'groups.group_type',				'phpbb_convert_group_type'),				array('group_display',			0,									''),				array('group_legend',			0,									''),				array('group_name',				'groups.group_name',				'phpbb_convert_group_name'), // phpbb_set_encoding called in phpbb_convert_group_name				array('group_desc',				'groups.group_description',			'phpbb_set_encoding'),				'where'			=> 'groups.group_single_user = 0',			),			array(				'target'		=> USER_GROUP_TABLE,				'query_first'	=> array('target', $convert->truncate_statement . USER_GROUP_TABLE),				'execute_first'	=> '					add_default_groups();				',				array('group_id',		'groups.group_id',					''),				array('user_id',		'groups.group_moderator',			'phpbb_user_id'),				array('group_leader',	1,									''),				array('user_pending',	0,									''),				'where'			=> 'groups.group_single_user = 0 AND groups.group_moderator <> 0',			),			array(				'target'		=> USER_GROUP_TABLE,				array('group_id',		'user_group.group_id',				''),				array('user_id',		'user_group.user_id',				'phpbb_user_id'),				array('group_leader',	0,									''),				array('user_pending',	'user_group.user_pending',			''),				'where'			=> 'user_group.group_id = groups.group_id AND groups.group_single_user = 0 AND groups.group_moderator <> user_group.user_id',			),			array(				'target'		=> USERS_TABLE,				'primary'		=> 'users.user_id',				'autoincrement'	=> 'user_id',				'query_first'	=> array(					array('target', 'DELETE FROM ' . USERS_TABLE . ' WHERE user_id <> ' . ANONYMOUS),					array('target', $convert->truncate_statement . BOTS_TABLE)				),				'execute_last'	=> '					remove_invalid_users();				',				array('user_id',				'users.user_id',					'phpbb_user_id'),				array('',						'users.user_id AS poster_id',		'phpbb_user_id'),				array('user_type',				'users.user_active',				'set_user_type'),				array('group_id',				'users.user_level',					'phpbb_set_primary_group'),				array('user_regdate',			'users.user_regdate',				''),				array('username',				'users.username',					'phpbb_set_default_encoding'), // recode to utf8 with default lang				array('username_clean',			'users.username',					array('function1' => 'phpbb_set_default_encoding', 'function2' => 'utf8_clean_string')),				array('user_password',			'users.user_password',				'phpbb_hash'),				array('user_pass_convert',		1,									''),				array('user_posts',				'users.user_posts',					'intval'),				array('user_email',				'users.user_email',					'strtolower'),				array('user_email_hash',		'users.user_email',					'gen_email_hash'),				array('user_birthday',			((defined('MOD_BIRTHDAY')) ? 'users.user_birthday' : ''),	'phpbb_get_birthday'),				array('user_lastvisit',			'users.user_lastvisit',				'intval'),				array('user_lastmark',			'users.user_lastvisit',				'intval'),				array('user_lang',				$config['default_lang'],			''),				array('',						'users.user_lang',					''),				array('user_timezone',			'users.user_timezone',				'floatval'),				array('user_dateformat',		'users.user_dateformat',			array('function1' => 'phpbb_set_encoding', 'function2' => 'fill_dateformat')),				array('user_inactive_reason',	'',									'phpbb_inactive_reason'),				array('user_inactive_time',		'',									'phpbb_inactive_time'),				array('user_interests',			'users.user_interests',				array('function1' => 'phpbb_set_encoding')),				array('user_occ',				'users.user_occ',					array('function1' => 'phpbb_set_encoding')),				array('user_website',			'users.user_website',				'validate_website'),				array('user_jabber',			'',									''),				array('user_msnm',				'users.user_msnm',					array('function1' => 'phpbb_set_encoding')),				array('user_yim',				'users.user_yim',					array('function1' => 'phpbb_set_encoding')),				array('user_aim',				'users.user_aim',					array('function1' => 'phpbb_set_encoding')),				array('user_icq',				'users.user_icq',					array('function1' => 'phpbb_set_encoding')),				array('user_from',				'users.user_from',					array('function1' => 'phpbb_set_encoding')),				array('user_rank',				'users.user_rank',					'intval'),				array('user_permissions',		'',									''),				array('user_avatar',			'users.user_avatar',				'phpbb_import_avatar'),				array('user_avatar_type',		'users.user_avatar_type',			'phpbb_avatar_type'),				array('user_avatar_width',		'users.user_avatar',				'phpbb_get_avatar_width'),				array('user_avatar_height',		'users.user_avatar',				'phpbb_get_avatar_height'),				array('user_new_privmsg',		'users.user_new_privmsg',			''),				array('user_unread_privmsg',	0,									''), //'users.user_unread_privmsg'				array('user_last_privmsg',		'users.user_last_privmsg',			'intval'),				array('user_emailtime',			'users.user_emailtime',				'null_to_zero'),				array('user_notify',			'users.user_notify',				'intval'),				array('user_notify_pm',			'users.user_notify_pm',				'intval'),				array('user_notify_type',		NOTIFY_EMAIL,						''),				array('user_allow_pm',			'users.user_allow_pm',				'intval'),				array('user_allow_viewonline',	'users.user_allow_viewonline',		'intval'),				array('user_allow_viewemail',	'users.user_viewemail',				'intval'),				array('user_actkey',			'users.user_actkey',				''),				array('user_newpasswd',			'',									''), // Users need to re-request their password...				array('user_style',				$config['default_style'],			''),				array('user_options',			'',									'set_user_options'),				array('',						'users.user_popup_pm AS popuppm',	''),				array('',						'users.user_allowhtml AS html',		''),				array('',						'users.user_allowbbcode AS bbcode',	''),				array('',						'users.user_allowsmile AS smile',	''),				array('',						'users.user_attachsig AS attachsig',''),				array('user_sig_bbcode_uid',		'users.user_regdate',							'make_uid'),				array('user_sig',					'users.user_sig',								'phpbb_prepare_message'),				array('',							'users.user_sig_bbcode_uid AS old_bbcode_uid',	''),				array('user_sig_bbcode_bitfield',	'',												'get_bbcode_bitfield'),				array('',							'users.user_regdate AS post_time',				''),				'where'			=> 'users.user_id <> -1',			),		),	);}?>
<?php return array(''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'0',''=>'1',''=>'2',''=>'3',''=>'4',''=>'5',''=>'6',''=>'7',''=>'8',''=>'9',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'0',''=>'1',''=>'2',''=>'3',''=>'4',''=>'5',''=>'6',''=>'7',''=>'8',''=>'9',''=>'',''=>'',''=>'1',''=>'2',''=>'3',''=>'4',''=>'',''=>'16',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'0',''=>'1',''=>'2',''=>'3',''=>'4',''=>'5',''=>'6',''=>'7',''=>'8',''=>'9',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'0',''=>'1',''=>'2',''=>'3',''=>'4',''=>'5',''=>'6',''=>'7',''=>'8',''=>'9',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'0',''=>'1',''=>'2',''=>'3',''=>'4',''=>'5',''=>'6',''=>'7',''=>'8',''=>'9',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'0',''=>'1',''=>'2',''=>'3',''=>'4',''=>'5',''=>'6',''=>'7',''=>'8',''=>'9',''=>'10',''=>'100',''=>'1000',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'0',''=>'1',''=>'2',''=>'3',''=>'4',''=>'5',''=>'6',''=>'7',''=>'8',''=>'9',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'0',''=>'1',''=>'2',''=>'3',''=>'4',''=>'5',''=>'6',''=>'7',''=>'8',''=>'9',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'0',''=>'1',''=>'2',''=>'3',''=>'4',''=>'5',''=>'6',''=>'7',''=>'8',''=>'9',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'0',''=>'1',''=>'2',''=>'3',''=>'4',''=>'5',''=>'6',''=>'7',''=>'8',''=>'9',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'0',''=>'1',''=>'2',''=>'3',''=>'4',''=>'5',''=>'6',''=>'7',''=>'8',''=>'9',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'0',''=>'1',''=>'2',''=>'3',''=>'4',''=>'5',''=>'6',''=>'7',''=>'8',''=>'9',''=>'1/2',''=>'3/2',''=>'5/2',''=>'7/2',''=>'9/2',''=>'11/2',''=>'13/2',''=>'15/2',''=>'17/2',''=>'-1/2',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'');
<?php/**** @package acp* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @package module_install*/class acp_main_info{	function module()	{		return array(			'filename'	=> 'acp_main',			'title'		=> 'ACP_INDEX',			'version'	=> '1.0.0',			'modes'		=> array(				'main'		=> array('title' => 'ACP_INDEX', 'auth' => '', 'cat' => array('ACP_CAT_GENERAL')),			),		);	}	function install()	{	}	function uninstall()	{	}}?>
<?php/**** @package VC* @version $Id$* @copyright (c) 2006, 2008 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @ignore*/if (!defined('IN_PHPBB')){	exit;}/*** Placeholder for autoload*/if (!class_exists('phpbb_default_captcha')){	include($phpbb_root_path . 'includes/captcha/plugins/captcha_abstract.' . $phpEx);}/*** @package VC*/class phpbb_captcha_gd_wave extends phpbb_default_captcha{	function phpbb_captcha_gd_wave()	{		global $phpbb_root_path, $phpEx;		if (!class_exists('captcha'))		{			include_once($phpbb_root_path . 'includes/captcha/captcha_gd_wave.' . $phpEx);		}	}	function get_instance()	{		return new phpbb_captcha_gd_wave();	}	function is_available()	{		global $phpbb_root_path, $phpEx;		if (@extension_loaded('gd'))		{			return true;		}		if (!function_exists('can_load_dll'))		{			include($phpbb_root_path . 'includes/functions_install.' . $phpEx);		}		return can_load_dll('gd');	}	function get_name()	{		return 'CAPTCHA_GD_3D';	}	function get_class_name()	{		return 'phpbb_captcha_gd_wave';	}	function acp_page($id, &$module)	{		global $config, $db, $template, $user;		trigger_error($user->lang['CAPTCHA_NO_OPTIONS'] . adm_back_link($module->u_action));	}}?>
<?php/**** @package ucp* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @ignore*/if (!defined('IN_PHPBB')){	exit;}/*** Compose private message* Called from ucp_pm with mode == 'compose'*/function compose_pm($id, $mode, $action, $user_folders = array()){	global $template, $db, $auth, $user;	global $phpbb_root_path, $phpEx, $config;	// Damn php and globals - i know, this is horrible	// Needed for handle_message_list_actions()	global $refresh, $submit, $preview;	include($phpbb_root_path . 'includes/functions_posting.' . $phpEx);	include($phpbb_root_path . 'includes/functions_display.' . $phpEx);	include($phpbb_root_path . 'includes/message_parser.' . $phpEx);	if (!$action)	{		$action = 'post';	}	add_form_key('ucp_pm_compose');	// Grab only parameters needed here	$to_user_id		= request_var('u', 0);	$to_group_id	= request_var('g', 0);	$msg_id			= request_var('p', 0);	$draft_id		= request_var('d', 0);	$lastclick		= request_var('lastclick', 0);	// Reply to all triggered (quote/reply)	$reply_to_all	= request_var('reply_to_all', 0);	// Do NOT use request_var or specialchars here	$address_list	= isset($_REQUEST['address_list']) ? $_REQUEST['address_list'] : array();	if (!is_array($address_list))	{		$address_list = array();	}	$submit		= (isset($_POST['post'])) ? true : false;	$preview	= (isset($_POST['preview'])) ? true : false;	$save		= (isset($_POST['save'])) ? true : false;	$load		= (isset($_POST['load'])) ? true : false;	$cancel		= (isset($_POST['cancel']) && !isset($_POST['save'])) ? true : false;	$delete		= (isset($_POST['delete'])) ? true : false;	$remove_u	= (isset($_REQUEST['remove_u'])) ? true : false;	$remove_g	= (isset($_REQUEST['remove_g'])) ? true : false;	$add_to		= (isset($_REQUEST['add_to'])) ? true : false;	$add_bcc	= (isset($_REQUEST['add_bcc'])) ? true : false;	$refresh	= isset($_POST['add_file']) || isset($_POST['delete_file']) || $save || $load		|| $remove_u || $remove_g || $add_to || $add_bcc;	$action		= ($delete && !$preview && !$refresh && $submit) ? 'delete' : $action;	$select_single = ($config['allow_mass_pm'] && $auth->acl_get('u_masspm')) ? false : true;	$error = array();	$current_time = time();	// Was cancel pressed? If so then redirect to the appropriate page	if ($cancel || ($current_time - $lastclick < 2 && $submit))	{		if ($msg_id)		{			redirect(append_sid("{$phpbb_root_path}ucp.$phpEx", 'i=pm&amp;mode=view&amp;action=view_message&amp;p=' . $msg_id));		}		redirect(append_sid("{$phpbb_root_path}ucp.$phpEx", 'i=pm'));	}	// Since viewtopic.php language entries are used in several modes,	// we include the language file here	$user->add_lang('viewtopic');	// Output PM_TO box if message composing	if ($action != 'edit')	{		// Add groups to PM box		if ($config['allow_mass_pm'] && $auth->acl_get('u_masspm_group'))		{			$sql = 'SELECT g.group_id, g.group_name, g.group_type				FROM ' . GROUPS_TABLE . ' g';			if (!$auth->acl_gets('a_group', 'a_groupadd', 'a_groupdel'))			{				$sql .= ' LEFT JOIN ' . USER_GROUP_TABLE . ' ug					ON (						g.group_id = ug.group_id						AND ug.user_id = ' . $user->data['user_id'] . '						AND ug.user_pending = 0					)					WHERE (g.group_type <> ' . GROUP_HIDDEN . ' OR ug.user_id = ' . $user->data['user_id'] . ')';			}			$sql .= ($auth->acl_gets('a_group', 'a_groupadd', 'a_groupdel')) ? ' WHERE ' : ' AND ';			$sql .= 'g.group_receive_pm = 1				ORDER BY g.group_type DESC, g.group_name ASC';			$result = $db->sql_query($sql);			$group_options = '';			while ($row = $db->sql_fetchrow($result))			{				$group_options .= '<option' . (($row['group_type'] == GROUP_SPECIAL) ? ' class="sep"' : '') . ' value="' . $row['group_id'] . '">' . (($row['group_type'] == GROUP_SPECIAL) ? $user->lang['G_' . $row['group_name']] : $row['group_name']) . '</option>';			}			$db->sql_freeresult($result);		}		$template->assign_vars(array(			'S_SHOW_PM_BOX'		=> true,			'S_ALLOW_MASS_PM'	=> ($config['allow_mass_pm'] && $auth->acl_get('u_masspm')) ? true : false,			'S_GROUP_OPTIONS'	=> ($config['allow_mass_pm'] && $auth->acl_get('u_masspm_group')) ? $group_options : '',			'U_FIND_USERNAME'	=> append_sid("{$phpbb_root_path}memberlist.$phpEx", "mode=searchuser&amp;form=postform&amp;field=username_list&amp;select_single=$select_single"),		));	}	$sql = '';	$folder_id = 0;	// What is all this following SQL for? Well, we need to know	// some basic information in all cases before we do anything.	switch ($action)	{		case 'post':			if (!$auth->acl_get('u_sendpm'))			{				trigger_error('NO_AUTH_SEND_MESSAGE');			}		break;		case 'reply':		case 'quote':		case 'forward':		case 'quotepost':			if (!$msg_id)			{				trigger_error('NO_MESSAGE');			}			if (!$auth->acl_get('u_sendpm'))			{				trigger_error('NO_AUTH_SEND_MESSAGE');			}			if ($action == 'quotepost')			{				$sql = 'SELECT p.post_id as msg_id, p.forum_id, p.post_text as message_text, p.poster_id as author_id, p.post_time as message_time, p.bbcode_bitfield, p.bbcode_uid, p.enable_sig, p.enable_smilies, p.enable_magic_url, t.topic_title as message_subject, u.username as quote_username					FROM ' . POSTS_TABLE . ' p, ' . TOPICS_TABLE . ' t, ' . USERS_TABLE . " u					WHERE p.post_id = $msg_id						AND t.topic_id = p.topic_id						AND u.user_id = p.poster_id";			}			else			{				$sql = 'SELECT t.folder_id, p.*, u.username as quote_username					FROM ' . PRIVMSGS_TO_TABLE . ' t, ' . PRIVMSGS_TABLE . ' p, ' . USERS_TABLE . ' u					WHERE t.user_id = ' . $user->data['user_id'] . "						AND p.author_id = u.user_id						AND t.msg_id = p.msg_id						AND p.msg_id = $msg_id";			}		break;		case 'edit':			if (!$msg_id)			{				trigger_error('NO_MESSAGE');			}			// check for outbox (not read) status, we do not allow editing if one user already having the message			$sql = 'SELECT p.*, t.folder_id				FROM ' . PRIVMSGS_TO_TABLE . ' t, ' . PRIVMSGS_TABLE . ' p				WHERE t.user_id = ' . $user->data['user_id'] . '					AND t.folder_id = ' . PRIVMSGS_OUTBOX . "					AND t.msg_id = $msg_id					AND t.msg_id = p.msg_id";		break;		case 'delete':			if (!$auth->acl_get('u_pm_delete'))			{				trigger_error('NO_AUTH_DELETE_MESSAGE');			}			if (!$msg_id)			{				trigger_error('NO_MESSAGE');			}			$sql = 'SELECT msg_id, pm_unread, pm_new, author_id, folder_id				FROM ' . PRIVMSGS_TO_TABLE . '				WHERE user_id = ' . $user->data['user_id'] . "					AND msg_id = $msg_id";		break;		case 'smilies':			generate_smilies('window', 0);		break;		default:			trigger_error('NO_ACTION_MODE', E_USER_ERROR);		break;	}	if ($action == 'forward' && (!$config['forward_pm'] || !$auth->acl_get('u_pm_forward')))	{		trigger_error('NO_AUTH_FORWARD_MESSAGE');	}	if ($action == 'edit' && !$auth->acl_get('u_pm_edit'))	{		trigger_error('NO_AUTH_EDIT_MESSAGE');	}	if ($sql)	{		$result = $db->sql_query($sql);		$post = $db->sql_fetchrow($result);		$db->sql_freeresult($result);		if (!$post)		{			// If editing it could be the recipient already read the message...			if ($action == 'edit')			{				$sql = 'SELECT p.*, t.folder_id					FROM ' . PRIVMSGS_TO_TABLE . ' t, ' . PRIVMSGS_TABLE . ' p					WHERE t.user_id = ' . $user->data['user_id'] . "						AND t.msg_id = $msg_id						AND t.msg_id = p.msg_id";				$result = $db->sql_query($sql);				$post = $db->sql_fetchrow($result);				$db->sql_freeresult($result);				if ($post)				{					trigger_error('NO_EDIT_READ_MESSAGE');				}			}			trigger_error('NO_MESSAGE');		}		if ($action == 'quotepost')		{			if (($post['forum_id'] && !$auth->acl_get('f_read', $post['forum_id'])) || (!$post['forum_id'] && !$auth->acl_getf_global('f_read')))			{				trigger_error('NOT_AUTHORISED');			}			// Passworded forum?			if ($post['forum_id'])			{				$sql = 'SELECT forum_password					FROM ' . FORUMS_TABLE . '					WHERE forum_id = ' . (int) $post['forum_id'];				$result = $db->sql_query($sql);				$forum_password = (string) $db->sql_fetchfield('forum_password');				$db->sql_freeresult($result);				if ($forum_password)				{					login_forum_box(array(						'forum_id'			=> $post['forum_id'],						'forum_password'	=> $forum_password,					));				}			}		}		$msg_id			= (int) $post['msg_id'];		$folder_id		= (isset($post['folder_id'])) ? $post['folder_id'] : 0;		$message_text	= (isset($post['message_text'])) ? $post['message_text'] : '';		if ((!$post['author_id'] || ($post['author_id'] == ANONYMOUS && $action != 'delete')) && $msg_id)		{			trigger_error('NO_AUTHOR');		}		if ($action == 'quotepost')		{			// Decode text for message display			decode_message($message_text, $post['bbcode_uid']);		}		if ($action != 'delete')		{			$enable_urls = $post['enable_magic_url'];			$enable_sig = (isset($post['enable_sig'])) ? $post['enable_sig'] : 0;			$message_attachment = (isset($post['message_attachment'])) ? $post['message_attachment'] : 0;			$message_subject = $post['message_subject'];			$message_time = $post['message_time'];			$bbcode_uid = $post['bbcode_uid'];			$quote_username = (isset($post['quote_username'])) ? $post['quote_username'] : '';			$icon_id = (isset($post['icon_id'])) ? $post['icon_id'] : 0;			if (($action == 'reply' || $action == 'quote' || $action == 'quotepost') && !sizeof($address_list) && !$refresh && !$submit && !$preview)			{				// Add the original author as the recipient if quoting a post or only replying and not having checked "reply to all"				if ($action == 'quotepost' || !$reply_to_all)				{					$address_list = array('u' => array($post['author_id'] => 'to'));				}				else				{					// We try to include every previously listed member from the TO Header - Reply to all					$address_list = rebuild_header(array('to' => $post['to_address']));					// Add the author (if he is already listed then this is no shame (it will be overwritten))					$address_list['u'][$post['author_id']] = 'to';					// Now, make sure the user itself is not listed. ;)					if (isset($address_list['u'][$user->data['user_id']]))					{						unset($address_list['u'][$user->data['user_id']]);					}				}			}			else if ($action == 'edit' && !sizeof($address_list) && !$refresh && !$submit && !$preview)			{				// Rebuild TO and BCC Header				$address_list = rebuild_header(array('to' => $post['to_address'], 'bcc' => $post['bcc_address']));			}			if ($action == 'quotepost')			{				$check_value = 0;			}			else			{				$check_value = (($post['enable_bbcode']+1) << 8) + (($post['enable_smilies']+1) << 4) + (($enable_urls+1) << 2) + (($post['enable_sig']+1) << 1);			}		}	}	else	{		$message_attachment = 0;		$message_text = $message_subject = '';		if ($to_user_id && $action == 'post')		{			$address_list['u'][$to_user_id] = 'to';		}		else if ($to_group_id && $action == 'post')		{			$address_list['g'][$to_group_id] = 'to';		}		$check_value = 0;	}	if (($to_group_id || isset($address_list['g'])) && (!$config['allow_mass_pm'] || !$auth->acl_get('u_masspm_group')))	{		trigger_error('NO_AUTH_GROUP_MESSAGE');	}	if ($action == 'edit' && !$refresh && !$preview && !$submit)	{		if (!($message_time > time() - ($config['pm_edit_time'] * 60) || !$config['pm_edit_time']))		{			trigger_error('CANNOT_EDIT_MESSAGE_TIME');		}	}	if ($action == 'post')	{		$template->assign_var('S_NEW_MESSAGE', true);	}	if (!isset($icon_id))	{		$icon_id = 0;	}	$message_parser = new parse_message();	$message_parser->message = ($action == 'reply') ? '' : $message_text;	unset($message_text);	$s_action = append_sid("{$phpbb_root_path}ucp.$phpEx", "i=$id&amp;mode=$mode&amp;action=$action", true, $user->session_id);	$s_action .= (($folder_id) ? "&amp;f=$folder_id" : '') . (($msg_id) ? "&amp;p=$msg_id" : '');	// Delete triggered ?	if ($action == 'delete')	{		// Folder id has been determined by the SQL Statement		// $folder_id = request_var('f', PRIVMSGS_NO_BOX);		// Do we need to confirm ?		if (confirm_box(true))		{			delete_pm($user->data['user_id'], $msg_id, $folder_id);			// jump to next message in "history"? nope, not for the moment. But able to be included later.			$meta_info = append_sid("{$phpbb_root_path}ucp.$phpEx", "i=pm&amp;folder=$folder_id");			$message = $user->lang['MESSAGE_DELETED'];			meta_refresh(3, $meta_info);			$message .= '<br /><br />' . sprintf($user->lang['RETURN_FOLDER'], '<a href="' . $meta_info . '">', '</a>');			trigger_error($message);		}		else		{			$s_hidden_fields = array(				'p'			=> $msg_id,				'f'			=> $folder_id,				'action'	=> 'delete'			);			// "{$phpbb_root_path}ucp.$phpEx?i=pm&amp;mode=compose"			confirm_box(false, 'DELETE_MESSAGE', build_hidden_fields($s_hidden_fields));		}		redirect(append_sid("{$phpbb_root_path}ucp.$phpEx", 'i=pm&amp;mode=view&amp;action=view_message&amp;p=' . $msg_id));	}	// Get maximum number of allowed recipients	$sql = 'SELECT MAX(g.group_max_recipients) as max_recipients		FROM ' . GROUPS_TABLE . ' g, ' . USER_GROUP_TABLE . ' ug		WHERE ug.user_id = ' . $user->data['user_id'] . '			AND ug.user_pending = 0			AND ug.group_id = g.group_id';	$result = $db->sql_query($sql);	$max_recipients = (int) $db->sql_fetchfield('max_recipients');	$db->sql_freeresult($result);	$max_recipients = (!$max_recipients) ? $config['pm_max_recipients'] : $max_recipients;	// If this is a quote/reply "to all"... we may increase the max_recpients to the number of original recipients	if (($action == 'reply' || $action == 'quote') && $max_recipients && $reply_to_all)	{		// We try to include every previously listed member from the TO Header		$list = rebuild_header(array('to' => $post['to_address']));		// Can be an empty array too ;)		$list = (!empty($list['u'])) ? $list['u'] : array();		$list[$post['author_id']] = 'to';		if (isset($list[$user->data['user_id']]))		{			unset($list[$user->data['user_id']]);		}		$max_recipients = ($max_recipients < sizeof($list)) ? sizeof($list) : $max_recipients;		unset($list);	}	// Handle User/Group adding/removing	handle_message_list_actions($address_list, $error, $remove_u, $remove_g, $add_to, $add_bcc);	// Check mass pm to group permission	if ((!$config['allow_mass_pm'] || !$auth->acl_get('u_masspm_group')) && !empty($address_list['g']))	{		$address_list = array();		$error[] = $user->lang['NO_AUTH_GROUP_MESSAGE'];	}	// Check mass pm to users permission	if ((!$config['allow_mass_pm'] || !$auth->acl_get('u_masspm')) && num_recipients($address_list) > 1)	{		$address_list = get_recipients($address_list, 1);		$error[] = $user->lang('TOO_MANY_RECIPIENTS', 1);	}	// Check for too many recipients	if (!empty($address_list['u']) && $max_recipients && sizeof($address_list['u']) > $max_recipients)	{		$address_list = get_recipients($address_list, $max_recipients);		$error[] = $user->lang('TOO_MANY_RECIPIENTS', $max_recipients);	}	// Always check if the submitted attachment data is valid and belongs to the user.	// Further down (especially in submit_post()) we do not check this again.	$message_parser->get_submitted_attachment_data();	if ($message_attachment && !$submit && !$refresh && !$preview && $action == 'edit')	{		// Do not change to SELECT *		$sql = 'SELECT attach_id, is_orphan, attach_comment, real_filename			FROM ' . ATTACHMENTS_TABLE . "			WHERE post_msg_id = $msg_id				AND in_message = 1				AND is_orphan = 0			ORDER BY filetime DESC";		$result = $db->sql_query($sql);		$message_parser->attachment_data = array_merge($message_parser->attachment_data, $db->sql_fetchrowset($result));		$db->sql_freeresult($result);	}	if (!in_array($action, array('quote', 'edit', 'delete', 'forward')))	{		$enable_sig		= ($config['allow_sig'] && $config['allow_sig_pm'] && $auth->acl_get('u_sig') && $user->optionget('attachsig'));		$enable_smilies	= ($config['allow_smilies'] && $auth->acl_get('u_pm_smilies') && $user->optionget('smilies'));		$enable_bbcode	= ($config['allow_bbcode'] && $auth->acl_get('u_pm_bbcode') && $user->optionget('bbcode'));		$enable_urls	= true;	}	$enable_magic_url = $drafts = false;	// User own some drafts?	if ($auth->acl_get('u_savedrafts') && $action != 'delete')	{		$sql = 'SELECT draft_id			FROM ' . DRAFTS_TABLE . '			WHERE forum_id = 0				AND topic_id = 0				AND user_id = ' . $user->data['user_id'] .				(($draft_id) ? " AND draft_id <> $draft_id" : '');		$result = $db->sql_query_limit($sql, 1);		$row = $db->sql_fetchrow($result);		$db->sql_freeresult($result);		if ($row)		{			$drafts = true;		}	}	if ($action == 'edit')	{		$message_parser->bbcode_uid = $bbcode_uid;	}	$bbcode_status	= ($config['allow_bbcode'] && $config['auth_bbcode_pm'] && $auth->acl_get('u_pm_bbcode')) ? true : false;	$smilies_status	= ($config['allow_smilies'] && $config['auth_smilies_pm'] && $auth->acl_get('u_pm_smilies')) ? true : false;	$img_status		= ($config['auth_img_pm'] && $auth->acl_get('u_pm_img')) ? true : false;	$flash_status	= ($config['auth_flash_pm'] && $auth->acl_get('u_pm_flash')) ? true : false;	$url_status		= ($config['allow_post_links']) ? true : false;	// Save Draft	if ($save && $auth->acl_get('u_savedrafts'))	{		$subject = utf8_normalize_nfc(request_var('subject', '', true));		$subject = (!$subject && $action != 'post') ? $user->lang['NEW_MESSAGE'] : $subject;		$message = utf8_normalize_nfc(request_var('message', '', true));		if ($subject && $message)		{			if (confirm_box(true))			{				$sql = 'INSERT INTO ' . DRAFTS_TABLE . ' ' . $db->sql_build_array('INSERT', array(					'user_id'		=> $user->data['user_id'],					'topic_id'		=> 0,					'forum_id'		=> 0,					'save_time'		=> $current_time,					'draft_subject'	=> $subject,					'draft_message'	=> $message					)				);				$db->sql_query($sql);				$redirect_url = append_sid("{$phpbb_root_path}ucp.$phpEx", "i=pm&amp;mode=$mode");				meta_refresh(3, $redirect_url);				$message = $user->lang['DRAFT_SAVED'] . '<br /><br />' . sprintf($user->lang['RETURN_UCP'], '<a href="' . $redirect_url . '">', '</a>');				trigger_error($message);			}			else			{				$s_hidden_fields = build_hidden_fields(array(					'mode'		=> $mode,					'action'	=> $action,					'save'		=> true,					'subject'	=> $subject,					'message'	=> $message,					'u'			=> $to_user_id,					'g'			=> $to_group_id,					'p'			=> $msg_id)				);				$s_hidden_fields .= build_address_field($address_list);				confirm_box(false, 'SAVE_DRAFT', $s_hidden_fields);			}		}		else		{			if (utf8_clean_string($subject) === '')			{				$error[] = $user->lang['EMPTY_MESSAGE_SUBJECT'];			}			if (utf8_clean_string($message) === '')			{				$error[] = $user->lang['TOO_FEW_CHARS'];			}		}		unset($subject, $message);	}	// Load Draft	if ($draft_id && $auth->acl_get('u_savedrafts'))	{		$sql = 'SELECT draft_subject, draft_message			FROM ' . DRAFTS_TABLE . "			WHERE draft_id = $draft_id				AND topic_id = 0				AND forum_id = 0				AND user_id = " . $user->data['user_id'];		$result = $db->sql_query_limit($sql, 1);		if ($row = $db->sql_fetchrow($result))		{			$message_parser->message = $row['draft_message'];			$message_subject = $row['draft_subject'];			$template->assign_var('S_DRAFT_LOADED', true);		}		else		{			$draft_id = 0;		}		$db->sql_freeresult($result);	}	// Load Drafts	if ($load && $drafts)	{		load_drafts(0, 0, $id, $action, $msg_id);	}	if ($submit || $preview || $refresh)	{		if (($submit || $preview) && !check_form_key('ucp_pm_compose'))		{			$error[] = $user->lang['FORM_INVALID'];		}		$subject = utf8_normalize_nfc(request_var('subject', '', true));		$message_parser->message = utf8_normalize_nfc(request_var('message', '', true));		$icon_id			= request_var('icon', 0);		$enable_bbcode 		= (!$bbcode_status || isset($_POST['disable_bbcode'])) ? false : true;		$enable_smilies		= (!$smilies_status || isset($_POST['disable_smilies'])) ? false : true;		$enable_urls 		= (isset($_POST['disable_magic_url'])) ? 0 : 1;		$enable_sig			= (!$config['allow_sig'] ||!$config['allow_sig_pm']) ? false : ((isset($_POST['attach_sig'])) ? true : false);		if ($submit)		{			$status_switch	= (($enable_bbcode+1) << 8) + (($enable_smilies+1) << 4) + (($enable_urls+1) << 2) + (($enable_sig+1) << 1);			$status_switch = ($status_switch != $check_value);		}		else		{			$status_switch = 1;		}		// Parse Attachments - before checksum is calculated		$message_parser->parse_attachments('fileupload', $action, 0, $submit, $preview, $refresh, true);		if (sizeof($message_parser->warn_msg) && !($remove_u || $remove_g || $add_to || $add_bcc))		{			$error[] = implode('<br />', $message_parser->warn_msg);			$message_parser->warn_msg = array();		}		// Parse message		$message_parser->parse($enable_bbcode, ($config['allow_post_links']) ? $enable_urls : false, $enable_smilies, $img_status, $flash_status, true, $config['allow_post_links']);		// On a refresh we do not care about message parsing errors		if (sizeof($message_parser->warn_msg) && !$refresh)		{			$error[] = implode('<br />', $message_parser->warn_msg);		}		if ($action != 'edit' && !$preview && !$refresh && $config['flood_interval'] && !$auth->acl_get('u_ignoreflood'))		{			// Flood check			$last_post_time = $user->data['user_lastpost_time'];			if ($last_post_time)			{				if ($last_post_time && ($current_time - $last_post_time) < intval($config['flood_interval']))				{					$error[] = $user->lang['FLOOD_ERROR'];				}			}		}		// Subject defined		if ($submit)		{			if (utf8_clean_string($subject) === '')			{				$error[] = $user->lang['EMPTY_MESSAGE_SUBJECT'];			}			if (!sizeof($address_list))			{				$error[] = $user->lang['NO_RECIPIENT'];			}		}		// Store message, sync counters		if (!sizeof($error) && $submit)		{			$pm_data = array(				'msg_id'				=> (int) $msg_id,				'from_user_id'			=> $user->data['user_id'],				'from_user_ip'			=> $user->ip,				'from_username'			=> $user->data['username'],				'reply_from_root_level'	=> (isset($post['root_level'])) ? (int) $post['root_level'] : 0,				'reply_from_msg_id'		=> (int) $msg_id,				'icon_id'				=> (int) $icon_id,				'enable_sig'			=> (bool) $enable_sig,				'enable_bbcode'			=> (bool) $enable_bbcode,				'enable_smilies'		=> (bool) $enable_smilies,				'enable_urls'			=> (bool) $enable_urls,				'bbcode_bitfield'		=> $message_parser->bbcode_bitfield,				'bbcode_uid'			=> $message_parser->bbcode_uid,				'message'				=> $message_parser->message,				'attachment_data'		=> $message_parser->attachment_data,				'filename_data'			=> $message_parser->filename_data,				'address_list'			=> $address_list			);			// ((!$message_subject) ? $subject : $message_subject)			$msg_id = submit_pm($action, $subject, $pm_data);			$return_message_url = append_sid("{$phpbb_root_path}ucp.$phpEx", 'i=pm&amp;mode=view&amp;p=' . $msg_id);			$inbox_folder_url = append_sid("{$phpbb_root_path}ucp.$phpEx", 'i=pm&amp;folder=inbox');			$outbox_folder_url = append_sid("{$phpbb_root_path}ucp.$phpEx", 'i=pm&amp;folder=outbox');			$folder_url = '';			if (($folder_id > 0) && isset($user_folders[$folder_id]))			{				$folder_url = append_sid("{$phpbb_root_path}ucp.$phpEx", 'i=pm&amp;folder=' . $folder_id);			}			$return_box_url = ($action === 'post' || $action === 'edit') ? $outbox_folder_url : $inbox_folder_url;			$return_box_lang = ($action === 'post' || $action === 'edit') ? 'PM_OUTBOX' : 'PM_INBOX';			$message = $user->lang['MESSAGE_STORED'] . '<br /><br />' . sprintf($user->lang['VIEW_PRIVATE_MESSAGE'], '<a href="' . $return_message_url . '">', '</a>');			$last_click_type = 'CLICK_RETURN_FOLDER';			if ($folder_url)			{				$message .= '<br /><br />' . sprintf($user->lang['CLICK_RETURN_FOLDER'], '<a href="' . $folder_url . '">', '</a>', $user_folders[$folder_id]['folder_name']);				$last_click_type = 'CLICK_GOTO_FOLDER';			}			$message .= '<br /><br />' . sprintf($user->lang[$last_click_type], '<a href="' . $return_box_url . '">', '</a>', $user->lang[$return_box_lang]);			meta_refresh(3, $return_message_url);			trigger_error($message);		}		$message_subject = $subject;	}	// Preview	if (!sizeof($error) && $preview)	{		$preview_message = $message_parser->format_display($enable_bbcode, $enable_urls, $enable_smilies, false);		$preview_signature = $user->data['user_sig'];		$preview_signature_uid = $user->data['user_sig_bbcode_uid'];		$preview_signature_bitfield = $user->data['user_sig_bbcode_bitfield'];		// Signature		if ($enable_sig && $config['allow_sig'] && $preview_signature)		{			$parse_sig = new parse_message($preview_signature);			$parse_sig->bbcode_uid = $preview_signature_uid;			$parse_sig->bbcode_bitfield = $preview_signature_bitfield;			$parse_sig->format_display($config['allow_sig_bbcode'], $config['allow_sig_links'], $config['allow_sig_smilies']);			$preview_signature = $parse_sig->message;			unset($parse_sig);		}		else		{			$preview_signature = '';		}		// Attachment Preview		if (sizeof($message_parser->attachment_data))		{			$template->assign_var('S_HAS_ATTACHMENTS', true);			$update_count = array();			$attachment_data = $message_parser->attachment_data;			parse_attachments(false, $preview_message, $attachment_data, $update_count, true);			foreach ($attachment_data as $i => $attachment)			{				$template->assign_block_vars('attachment', array(					'DISPLAY_ATTACHMENT'	=> $attachment)				);			}			unset($attachment_data);		}		$preview_subject = censor_text($subject);		if (!sizeof($error))		{			$template->assign_vars(array(				'PREVIEW_SUBJECT'		=> $preview_subject,				'PREVIEW_MESSAGE'		=> $preview_message,				'PREVIEW_SIGNATURE'		=> $preview_signature,				'S_DISPLAY_PREVIEW'		=> true)			);		}		unset($message_text);	}	// Decode text for message display	$bbcode_uid = (($action == 'quote' || $action == 'forward') && !$preview && !$refresh && (!sizeof($error) || (sizeof($error) && !$submit))) ? $bbcode_uid : $message_parser->bbcode_uid;	$message_parser->decode_message($bbcode_uid);	if (($action == 'quote' || $action == 'quotepost') && !$preview && !$refresh && !$submit)	{		if ($action == 'quotepost')		{			$post_id = request_var('p', 0);			if ($config['allow_post_links'])			{				$message_link = "[url=" . generate_board_url() . "/viewtopic.$phpEx?p={$post_id}#p{$post_id}]{$user->lang['SUBJECT']}: {$message_subject}[/url]\n\n";			}			else			{				$message_link = $user->lang['SUBJECT'] . ': ' . $message_subject . " (" . generate_board_url() . "/viewtopic.$phpEx?p={$post_id}#p{$post_id})\n\n";			}		}		else		{			$message_link = '';		}		$message_parser->message = $message_link . '[quote=&quot;' . $quote_username . '&quot;]' . censor_text(trim($message_parser->message)) . "[/quote]\n";	}	if (($action == 'reply' || $action == 'quote' || $action == 'quotepost') && !$preview && !$refresh)	{		$message_subject = ((!preg_match('/^Re:/', $message_subject)) ? 'Re: ' : '') . censor_text($message_subject);	}	if ($action == 'forward' && !$preview && !$refresh && !$submit)	{		$fwd_to_field = write_pm_addresses(array('to' => $post['to_address']), 0, true);		if ($config['allow_post_links'])		{			$quote_username_text = '[url=' . generate_board_url() . "/memberlist.$phpEx?mode=viewprofile&amp;u={$post['author_id']}]{$quote_username}[/url]";		}		else		{			$quote_username_text = $quote_username . ' (' . generate_board_url() . "/memberlist.$phpEx?mode=viewprofile&amp;u={$post['author_id']})";		}		$forward_text = array();		$forward_text[] = $user->lang['FWD_ORIGINAL_MESSAGE'];		$forward_text[] = sprintf($user->lang['FWD_SUBJECT'], censor_text($message_subject));		$forward_text[] = sprintf($user->lang['FWD_DATE'], $user->format_date($message_time, false, true));		$forward_text[] = sprintf($user->lang['FWD_FROM'], $quote_username_text);		$forward_text[] = sprintf($user->lang['FWD_TO'], implode(', ', $fwd_to_field['to']));		$message_parser->message = implode("\n", $forward_text) . "\n\n[quote=&quot;{$quote_username}&quot;]\n" . censor_text(trim($message_parser->message)) . "\n[/quote]";		$message_subject = ((!preg_match('/^Fwd:/', $message_subject)) ? 'Fwd: ' : '') . censor_text($message_subject);	}	$attachment_data = $message_parser->attachment_data;	$filename_data = $message_parser->filename_data;	$message_text = $message_parser->message;	// MAIN PM PAGE BEGINS HERE	// Generate smiley listing	generate_smilies('inline', 0);	// Generate PM Icons	$s_pm_icons = false;	if ($config['enable_pm_icons'])	{		$s_pm_icons = posting_gen_topic_icons($action, $icon_id);	}	// Generate inline attachment select box	posting_gen_inline_attachments($attachment_data);	// Build address list for display	// array('u' => array($author_id => 'to'));	if (sizeof($address_list))	{		// Get Usernames and Group Names		$result = array();		if (!empty($address_list['u']))		{			$sql = 'SELECT user_id as id, username as name, user_colour as colour				FROM ' . USERS_TABLE . '				WHERE ' . $db->sql_in_set('user_id', array_map('intval', array_keys($address_list['u']))) . '				ORDER BY username_clean ASC';			$result['u'] = $db->sql_query($sql);		}		if (!empty($address_list['g']))		{			$sql = 'SELECT g.group_id AS id, g.group_name AS name, g.group_colour AS colour, g.group_type				FROM ' . GROUPS_TABLE . ' g';			if (!$auth->acl_gets('a_group', 'a_groupadd', 'a_groupdel'))			{				$sql .= ' LEFT JOIN ' . USER_GROUP_TABLE . ' ug					ON (						g.group_id = ug.group_id						AND ug.user_id = ' . $user->data['user_id'] . '						AND ug.user_pending = 0					)					WHERE (g.group_type <> ' . GROUP_HIDDEN . ' OR ug.user_id = ' . $user->data['user_id'] . ')';			}			$sql .= ($auth->acl_gets('a_group', 'a_groupadd', 'a_groupdel')) ? ' WHERE ' : ' AND ';			$sql .= 'g.group_receive_pm = 1				AND ' . $db->sql_in_set('g.group_id', array_map('intval', array_keys($address_list['g']))) . '				ORDER BY g.group_name ASC';			$result['g'] = $db->sql_query($sql);		}		$u = $g = array();		$_types = array('u', 'g');		foreach ($_types as $type)		{			if (isset($result[$type]) && $result[$type])			{				while ($row = $db->sql_fetchrow($result[$type]))				{					if ($type == 'g')					{						$row['name'] = ($row['group_type'] == GROUP_SPECIAL) ? $user->lang['G_' . $row['name']] : $row['name'];					}					${$type}[$row['id']] = array('name' => $row['name'], 'colour' => $row['colour']);				}				$db->sql_freeresult($result[$type]);			}		}		// Now Build the address list		$plain_address_field = '';		foreach ($address_list as $type => $adr_ary)		{			foreach ($adr_ary as $id => $field)			{				if (!isset(${$type}[$id]))				{					unset($address_list[$type][$id]);					continue;				}				$field = ($field == 'to') ? 'to' : 'bcc';				$type = ($type == 'u') ? 'u' : 'g';				$id = (int) $id;				$tpl_ary = array(					'IS_GROUP'	=> ($type == 'g') ? true : false,					'IS_USER'	=> ($type == 'u') ? true : false,					'UG_ID'		=> $id,					'NAME'		=> ${$type}[$id]['name'],					'COLOUR'	=> (${$type}[$id]['colour']) ? '#' . ${$type}[$id]['colour'] : '',					'TYPE'		=> $type,				);				if ($type == 'u')				{					$tpl_ary = array_merge($tpl_ary, array(						'U_VIEW'		=> get_username_string('profile', $id, ${$type}[$id]['name'], ${$type}[$id]['colour']),						'NAME_FULL'		=> get_username_string('full', $id, ${$type}[$id]['name'], ${$type}[$id]['colour']),					));				}				else				{					$tpl_ary = array_merge($tpl_ary, array(						'U_VIEW'		=> append_sid("{$phpbb_root_path}memberlist.$phpEx", 'mode=group&amp;g=' . $id),					));				}				$template->assign_block_vars($field . '_recipient', $tpl_ary);			}		}	}	// Build hidden address list	$s_hidden_address_field = build_address_field($address_list);	$bbcode_checked		= (isset($enable_bbcode)) ? !$enable_bbcode : (($config['allow_bbcode'] && $auth->acl_get('u_pm_bbcode')) ? !$user->optionget('bbcode') : 1);	$smilies_checked	= (isset($enable_smilies)) ? !$enable_smilies : (($config['allow_smilies'] && $auth->acl_get('u_pm_smilies')) ? !$user->optionget('smilies') : 1);	$urls_checked		= (isset($enable_urls)) ? !$enable_urls : 0;	$sig_checked		= $enable_sig;	switch ($action)	{		case 'post':			$page_title = $user->lang['POST_NEW_PM'];		break;		case 'quote':			$page_title = $user->lang['POST_QUOTE_PM'];		break;		case 'quotepost':			$page_title = $user->lang['POST_PM_POST'];		break;		case 'reply':			$page_title = $user->lang['POST_REPLY_PM'];		break;		case 'edit':			$page_title = $user->lang['POST_EDIT_PM'];		break;		case 'forward':			$page_title = $user->lang['POST_FORWARD_PM'];		break;		default:			trigger_error('NO_ACTION_MODE', E_USER_ERROR);		break;	}	$s_hidden_fields = '<input type="hidden" name="lastclick" value="' . $current_time . '" />';	$s_hidden_fields .= (isset($check_value)) ? '<input type="hidden" name="status_switch" value="' . $check_value . '" />' : '';	$s_hidden_fields .= ($draft_id || isset($_REQUEST['draft_loaded'])) ? '<input type="hidden" name="draft_loaded" value="' . ((isset($_REQUEST['draft_loaded'])) ? intval($_REQUEST['draft_loaded']) : $draft_id) . '" />' : '';	$form_enctype = (@ini_get('file_uploads') == '0' || strtolower(@ini_get('file_uploads')) == 'off' || !$config['allow_pm_attach'] || !$auth->acl_get('u_pm_attach')) ? '' : ' enctype="multipart/form-data"';	// Start assigning vars for main posting page ...	$template->assign_vars(array(		'L_POST_A'					=> $page_title,		'L_ICON'					=> $user->lang['PM_ICON'],		'L_MESSAGE_BODY_EXPLAIN'	=> (intval($config['max_post_chars'])) ? sprintf($user->lang['MESSAGE_BODY_EXPLAIN'], intval($config['max_post_chars'])) : '',		'SUBJECT'				=> (isset($message_subject)) ? $message_subject : '',		'MESSAGE'				=> $message_text,		'BBCODE_STATUS'			=> ($bbcode_status) ? sprintf($user->lang['BBCODE_IS_ON'], '<a href="' . append_sid("{$phpbb_root_path}faq.$phpEx", 'mode=bbcode') . '">', '</a>') : sprintf($user->lang['BBCODE_IS_OFF'], '<a href="' . append_sid("{$phpbb_root_path}faq.$phpEx", 'mode=bbcode') . '">', '</a>'),		'IMG_STATUS'			=> ($img_status) ? $user->lang['IMAGES_ARE_ON'] : $user->lang['IMAGES_ARE_OFF'],		'FLASH_STATUS'			=> ($flash_status) ? $user->lang['FLASH_IS_ON'] : $user->lang['FLASH_IS_OFF'],		'SMILIES_STATUS'		=> ($smilies_status) ? $user->lang['SMILIES_ARE_ON'] : $user->lang['SMILIES_ARE_OFF'],		'URL_STATUS'			=> ($url_status) ? $user->lang['URL_IS_ON'] : $user->lang['URL_IS_OFF'],		'MAX_FONT_SIZE'			=> (int) $config['max_post_font_size'],		'MINI_POST_IMG'			=> $user->img('icon_post_target', $user->lang['PM']),		'ERROR'					=> (sizeof($error)) ? implode('<br />', $error) : '',		'MAX_RECIPIENTS'		=> ($config['allow_mass_pm'] && ($auth->acl_get('u_masspm') || $auth->acl_get('u_masspm_group'))) ? $max_recipients : 0,		'S_COMPOSE_PM'			=> true,		'S_EDIT_POST'			=> ($action == 'edit'),		'S_SHOW_PM_ICONS'		=> $s_pm_icons,		'S_BBCODE_ALLOWED'		=> ($bbcode_status) ? 1 : 0,		'S_BBCODE_CHECKED'		=> ($bbcode_checked) ? ' checked="checked"' : '',		'S_SMILIES_ALLOWED'		=> $smilies_status,		'S_SMILIES_CHECKED'		=> ($smilies_checked) ? ' checked="checked"' : '',		'S_SIG_ALLOWED'			=> ($config['allow_sig'] && $config['allow_sig_pm'] && $auth->acl_get('u_sig')),		'S_SIGNATURE_CHECKED'	=> ($sig_checked) ? ' checked="checked"' : '',		'S_LINKS_ALLOWED'		=> $url_status,		'S_MAGIC_URL_CHECKED'	=> ($urls_checked) ? ' checked="checked"' : '',		'S_SAVE_ALLOWED'		=> ($auth->acl_get('u_savedrafts') && $action != 'edit') ? true : false,		'S_HAS_DRAFTS'			=> ($auth->acl_get('u_savedrafts') && $drafts),		'S_FORM_ENCTYPE'		=> $form_enctype,		'S_BBCODE_IMG'			=> $img_status,		'S_BBCODE_FLASH'		=> $flash_status,		'S_BBCODE_QUOTE'		=> true,		'S_BBCODE_URL'			=> $url_status,		'S_POST_ACTION'				=> $s_action,		'S_HIDDEN_ADDRESS_FIELD'	=> $s_hidden_address_field,		'S_HIDDEN_FIELDS'			=> $s_hidden_fields,		'S_CLOSE_PROGRESS_WINDOW'	=> isset($_POST['add_file']),		'U_PROGRESS_BAR'			=> append_sid("{$phpbb_root_path}posting.$phpEx", 'f=0&amp;mode=popup'),		'UA_PROGRESS_BAR'			=> addslashes(append_sid("{$phpbb_root_path}posting.$phpEx", 'f=0&amp;mode=popup')),	));	// Build custom bbcodes array	display_custom_bbcodes();	// Show attachment box for adding attachments if true	$allowed = ($auth->acl_get('u_pm_attach') && $config['allow_pm_attach'] && $form_enctype);	// Attachment entry	posting_gen_attachment_entry($attachment_data, $filename_data, $allowed);	// Message History	if ($action == 'reply' || $action == 'quote' || $action == 'forward')	{		if (message_history($msg_id, $user->data['user_id'], $post, array(), true))		{			$template->assign_var('S_DISPLAY_HISTORY', true);		}	}}/*** For composing messages, handle list actions*/function handle_message_list_actions(&$address_list, &$error, $remove_u, $remove_g, $add_to, $add_bcc){	global $auth, $db, $user;	// Delete User [TO/BCC]	if ($remove_u && !empty($_REQUEST['remove_u']) && is_array($_REQUEST['remove_u']))	{		$remove_user_id = array_keys($_REQUEST['remove_u']);		if (isset($remove_user_id[0]))		{			unset($address_list['u'][(int) $remove_user_id[0]]);		}	}	// Delete Group [TO/BCC]	if ($remove_g && !empty($_REQUEST['remove_g']) && is_array($_REQUEST['remove_g']))	{		$remove_group_id = array_keys($_REQUEST['remove_g']);		if (isset($remove_group_id[0]))		{			unset($address_list['g'][(int) $remove_group_id[0]]);		}	}	// Add Selected Groups	$group_list = request_var('group_list', array(0));	// Build usernames to add	$usernames = request_var('username', '', true);	$usernames = (empty($usernames)) ? array() : array($usernames);	$username_list = request_var('username_list', '', true);	if ($username_list)	{		$usernames = array_merge($usernames, explode("\n", $username_list));	}	// If add to or add bcc not pressed, users could still have usernames listed they want to add...	if (!$add_to && !$add_bcc && (sizeof($group_list) || sizeof($usernames)))	{		$add_to = true;		global $refresh, $submit, $preview;		$refresh = true;		$submit = false;		// Preview is only true if there was also a message entered		if (request_var('message', ''))		{			$preview = true;		}	}	// Add User/Group [TO]	if ($add_to || $add_bcc)	{		$type = ($add_to) ? 'to' : 'bcc';		if (sizeof($group_list))		{			foreach ($group_list as $group_id)			{				$address_list['g'][$group_id] = $type;			}		}		// User ID's to add...		$user_id_ary = array();		// Reveal the correct user_ids		if (sizeof($usernames))		{			$user_id_ary = array();			user_get_id_name($user_id_ary, $usernames, array(USER_NORMAL, USER_FOUNDER, USER_INACTIVE));			// If there are users not existing, we will at least print a notice...			if (!sizeof($user_id_ary))			{				$error[] = $user->lang['PM_NO_USERS'];			}		}		// Add Friends if specified		$friend_list = (isset($_REQUEST['add_' . $type]) && is_array($_REQUEST['add_' . $type])) ? array_map('intval', array_keys($_REQUEST['add_' . $type])) : array();		$user_id_ary = array_merge($user_id_ary, $friend_list);		foreach ($user_id_ary as $user_id)		{			if ($user_id == ANONYMOUS)			{				continue;			}			$address_list['u'][$user_id] = $type;		}	}	// Check for disallowed recipients	if (!empty($address_list['u']))	{		// We need to check their PM status (do they want to receive PM's?)		// Only check if not a moderator or admin, since they are allowed to override this user setting		if (!$auth->acl_gets('a_', 'm_') && !$auth->acl_getf_global('m_'))		{			$sql = 'SELECT user_id				FROM ' . USERS_TABLE . '				WHERE ' . $db->sql_in_set('user_id', array_keys($address_list['u'])) . '					AND user_allow_pm = 0';			$result = $db->sql_query($sql);			$removed = false;			while ($row = $db->sql_fetchrow($result))			{				$removed = true;				unset($address_list['u'][$row['user_id']]);			}			$db->sql_freeresult($result);			// print a notice about users not being added who do not want to receive pms			if ($removed)			{				$error[] = $user->lang['PM_USERS_REMOVED_NO_PM'];			}		}	}}/*** Build the hidden field for the recipients. Needed, as the variable is not read via request_var.*/function build_address_field($address_list){	$s_hidden_address_field = '';	foreach ($address_list as $type => $adr_ary)	{		foreach ($adr_ary as $id => $field)		{			$s_hidden_address_field .= '<input type="hidden" name="address_list[' . (($type == 'u') ? 'u' : 'g') . '][' . (int) $id . ']" value="' . (($field == 'to') ? 'to' : 'bcc') . '" />';		}	}	return $s_hidden_address_field;}/*** Return number of private message recipients*/function num_recipients($address_list){	$num_recipients = 0;	foreach ($address_list as $field => $adr_ary)	{		$num_recipients += sizeof($adr_ary);	}	return $num_recipients;}/*** Get number of 'num_recipients' recipients from first position*/function get_recipients($address_list, $num_recipients = 1){	$recipient = array();	$count = 0;	foreach ($address_list as $field => $adr_ary)	{		foreach ($adr_ary as $id => $type)		{			if ($count >= $num_recipients)			{				break 2;			}			$recipient[$field][$id] = $type;			$count++;		}	}	return $recipient;}?>
<?php/**** @package ucp* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @package module_install*/class ucp_profile_info{	function module()	{		return array(			'filename'	=> 'ucp_profile',			'title'		=> 'UCP_PROFILE',			'version'	=> '1.0.0',			'modes'		=> array(				'profile_info'	=> array('title' => 'UCP_PROFILE_PROFILE_INFO', 'auth' => '', 'cat' => array('UCP_PROFILE')),				'signature'		=> array('title' => 'UCP_PROFILE_SIGNATURE', 'auth' => '', 'cat' => array('UCP_PROFILE')),				'avatar'		=> array('title' => 'UCP_PROFILE_AVATAR', 'auth' => 'cfg_allow_avatar && (cfg_allow_avatar_local || cfg_allow_avatar_remote || cfg_allow_avatar_upload || cfg_allow_avatar_remote_upload)', 'cat' => array('UCP_PROFILE')),				'reg_details'	=> array('title' => 'UCP_PROFILE_REG_DETAILS', 'auth' => '', 'cat' => array('UCP_PROFILE')),			),		);	}	function install()	{	}	function uninstall()	{	}}?>
<?php return array(''=>'',''=>'',''=>'0',''=>'1',''=>'2',''=>'3',''=>'4',''=>'5',''=>'6',''=>'7',''=>'8',''=>'9',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'10',''=>'20',''=>'30',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'1',''=>'2',''=>'3',''=>'4',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'1',''=>'2',''=>'3',''=>'4',''=>'5',''=>'6',''=>'7',''=>'8',''=>'9',''=>'10',''=>'21',''=>'22',''=>'23',''=>'24',''=>'25',''=>'26',''=>'27',''=>'28',''=>'29',''=>'30',''=>'31',''=>'32',''=>'33',''=>'34',''=>'35',''=>'1',''=>'2',''=>'3',''=>'4',''=>'5',''=>'6',''=>'7',''=>'8',''=>'9',''=>'10',''=>'36',''=>'37',''=>'38',''=>'39',''=>'40',''=>'41',''=>'42',''=>'43',''=>'44',''=>'45',''=>'46',''=>'47',''=>'48',''=>'49',''=>'50',''=>'');
<?php return array('A'=>'a','B'=>'b','C'=>'c','D'=>'d','E'=>'e','F'=>'f','G'=>'g','H'=>'h','I'=>'i','J'=>'j','K'=>'k','L'=>'l','M'=>'m','N'=>'n','O'=>'o','P'=>'p','Q'=>'q','R'=>'r','S'=>'s','T'=>'t','U'=>'u','V'=>'v','W'=>'w','X'=>'x','Y'=>'y','Z'=>'z',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'s',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'k',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'');
<?php/**** @package acm* @copyright (c) 2011 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @ignore*/if (!defined('IN_PHPBB')){	exit;}// Include the abstract baseif (!class_exists('acm_memory')){	require("{$phpbb_root_path}includes/acm/acm_memory.$phpEx");}if (!defined('PHPBB_ACM_REDIS_PORT')){	define('PHPBB_ACM_REDIS_PORT', 6379);}if (!defined('PHPBB_ACM_REDIS_HOST')){	define('PHPBB_ACM_REDIS_HOST', 'localhost');}/*** ACM for Redis** Compatible with the php extension phpredis available* at https://github.com/nicolasff/phpredis** @package acm*/class acm extends acm_memory{	var $extension = 'redis';	var $redis;	function acm()	{		// Call the parent constructor		parent::acm_memory();		$this->redis = new Redis();		$this->redis->connect(PHPBB_ACM_REDIS_HOST, PHPBB_ACM_REDIS_PORT);		if (defined('PHPBB_ACM_REDIS_PASSWORD'))		{			if (!$this->redis->auth(PHPBB_ACM_REDIS_PASSWORD))			{				global $acm_type;				trigger_error("Incorrect password for the ACM module $acm_type.", E_USER_ERROR);			}		}		$this->redis->setOption(Redis::OPT_SERIALIZER, Redis::SERIALIZER_PHP);		$this->redis->setOption(Redis::OPT_PREFIX, $this->key_prefix);		if (defined('PHPBB_ACM_REDIS_DB'))		{			if (!$this->redis->select(PHPBB_ACM_REDIS_DB))			{				global $acm_type;				trigger_error("Incorrect database for the ACM module $acm_type.", E_USER_ERROR);			}		}	}	/**	* Unload the cache resources	*	* @return void	*/	function unload()	{		parent::unload();		$this->redis->close();	}	/**	* Purge cache data	*	* @return void	*/	function purge()	{		$this->redis->flushDB();		parent::purge();	}	/**	* Fetch an item from the cache	*	* @access protected	* @param string $var Cache key	* @return mixed Cached data	*/	function _read($var)	{		return $this->redis->get($var);	}	/**	* Store data in the cache	*	* @access protected	* @param string $var Cache key	* @param mixed $data Data to store	* @param int $ttl Time-to-live of cached data	* @return bool True if the operation succeeded	*/	function _write($var, $data, $ttl = 2592000)	{		return $this->redis->setex($var, $ttl, $data);	}	/**	* Remove an item from the cache	*	* @access protected	* @param string $var Cache key	* @return bool True if the operation succeeded	*/	function _delete($var)	{		if ($this->redis->delete($var) > 0)		{			return true;		}		return false;	}}
<?php/**** @package acp* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @package module_install*/class acp_bbcodes_info{	function module()	{		return array(			'filename'	=> 'acp_bbcodes',			'title'		=> 'ACP_BBCODES',			'version'	=> '1.0.0',			'modes'		=> array(				'bbcodes'		=> array('title' => 'ACP_BBCODES', 'auth' => 'acl_a_bbcode', 'cat' => array('ACP_MESSAGES')),			),		);	}	function install()	{	}	function uninstall()	{	}}?>
<?php/**** @package acp* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @ignore*/if (!defined('IN_PHPBB')){	exit;}/*** @package acp*/class acp_php_info{	var $u_action;	function main($id, $mode)	{		global $db, $user, $auth, $template;		global $config, $phpbb_root_path, $phpbb_admin_path, $phpEx;		if ($mode != 'info')		{			trigger_error('NO_MODE', E_USER_ERROR);		}		$this->tpl_name = 'acp_php_info';		$this->page_title = 'ACP_PHP_INFO';		ob_start();		phpinfo(INFO_GENERAL | INFO_CONFIGURATION | INFO_MODULES | INFO_VARIABLES);		$phpinfo = ob_get_clean();		$phpinfo = trim($phpinfo);		// Here we play around a little with the PHP Info HTML to try and stylise		// it along phpBB's lines ... hopefully without breaking anything. The idea		// for this was nabbed from the PHP annotated manual		preg_match_all('#<body[^>]*>(.*)</body>#si', $phpinfo, $output);		if (empty($phpinfo) || empty($output))		{			trigger_error('NO_PHPINFO_AVAILABLE', E_USER_WARNING);		}		$output = $output[1][0];		// expose_php can make the image not exist		if (preg_match('#<a[^>]*><img[^>]*></a>#', $output))		{			$output = preg_replace('#<tr class="v"><td>(.*?<a[^>]*><img[^>]*></a>)(.*?)</td></tr>#s', '<tr class="row1"><td><table class="type2"><tr><td>\2</td><td>\1</td></tr></table></td></tr>', $output);		}		else		{			$output = preg_replace('#<tr class="v"><td>(.*?)</td></tr>#s', '<tr class="row1"><td><table class="type2"><tr><td>\1</td></tr></table></td></tr>', $output);		}		$output = preg_replace('#<table[^>]+>#i', '<table>', $output);		$output = preg_replace('#<img border="0"#i', '<img', $output);		$output = str_replace(array('class="e"', 'class="v"', 'class="h"', '<hr />', '<font', '</font>'), array('class="row1"', 'class="row2"', '', '', '<span', '</span>'), $output);		// Fix invalid anchor names (eg "module_Zend Optimizer")		$output = preg_replace_callback('#<a name="([^"]+)">#', array($this, 'remove_spaces'), $output);		if (empty($output))		{			trigger_error('NO_PHPINFO_AVAILABLE', E_USER_WARNING);		}		$orig_output = $output;		preg_match_all('#<div class="center">(.*)</div>#siU', $output, $output);		$output = (!empty($output[1][0])) ? $output[1][0] : $orig_output;		$template->assign_var('PHPINFO', $output);	}		function remove_spaces($matches)	{		return '<a name="' . str_replace(' ', '_', $matches[1]) . '">';	}}?>
<?php/**** @package phpBB3* @copyright (c) 2011 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//***/if (!defined('IN_PHPBB')){	exit;}// Report all errors, except notices and deprecation messagesif (!defined('E_DEPRECATED')){	define('E_DEPRECATED', 8192);}error_reporting(E_ALL & ~E_NOTICE & ~E_DEPRECATED);/** Remove variables created by register_globals from the global scope* Thanks to Matt Kavanagh*/function deregister_globals(){	$not_unset = array(		'GLOBALS'	=> true,		'_GET'		=> true,		'_POST'		=> true,		'_COOKIE'	=> true,		'_REQUEST'	=> true,		'_SERVER'	=> true,		'_SESSION'	=> true,		'_ENV'		=> true,		'_FILES'	=> true,		'phpEx'		=> true,		'phpbb_root_path'	=> true	);	// Not only will array_merge and array_keys give a warning if	// a parameter is not an array, array_merge will actually fail.	// So we check if _SESSION has been initialised.	if (!isset($_SESSION) || !is_array($_SESSION))	{		$_SESSION = array();	}	// Merge all into one extremely huge array; unset this later	$input = array_merge(		array_keys($_GET),		array_keys($_POST),		array_keys($_COOKIE),		array_keys($_SERVER),		array_keys($_SESSION),		array_keys($_ENV),		array_keys($_FILES)	);	foreach ($input as $varname)	{		if (isset($not_unset[$varname]))		{			// Hacking attempt. No point in continuing unless it's a COOKIE (so a cookie called GLOBALS doesn't lock users out completely)			if ($varname !== 'GLOBALS' || isset($_GET['GLOBALS']) || isset($_POST['GLOBALS']) || isset($_SERVER['GLOBALS']) || isset($_SESSION['GLOBALS']) || isset($_ENV['GLOBALS']) || isset($_FILES['GLOBALS']))			{				exit;			}			else			{				$cookie = &$_COOKIE;				while (isset($cookie['GLOBALS']))				{					if (!is_array($cookie['GLOBALS']))					{						break;					}					foreach ($cookie['GLOBALS'] as $registered_var => $value)					{						if (!isset($not_unset[$registered_var]))						{							unset($GLOBALS[$registered_var]);						}					}					$cookie = &$cookie['GLOBALS'];				}			}		}		unset($GLOBALS[$varname]);	}	unset($input);}// Register globals and magic quotes have been dropped in PHP 5.4if (version_compare(PHP_VERSION, '5.4.0-dev', '>=')){	/**	* @ignore	*/	define('STRIP', false);}else{	@set_magic_quotes_runtime(0);	// Be paranoid with passed vars	if (@ini_get('register_globals') == '1' || strtolower(@ini_get('register_globals')) == 'on' || !function_exists('ini_get'))	{		deregister_globals();	}	define('STRIP', (get_magic_quotes_gpc()) ? true : false);}// Prevent date/time functions from throwing E_WARNING on PHP 5.3 by setting a default timezoneif (function_exists('date_default_timezone_set') && function_exists('date_default_timezone_get')){	// For PHP 5.1.0 the date/time functions have been rewritten	// and setting a timezone is required prior to calling any date/time function.	// Since PHP 5.2.0 calls to date/time functions without having a timezone set	// result in E_STRICT errors being thrown.	// Note: We already exclude E_STRICT errors	// (to be exact: they are not included in E_ALL in PHP 5.2)	// In PHP 5.3.0 the error level has been raised to E_WARNING which causes problems	// because we show E_WARNING errors and do not set a default timezone.	// This is because we have our own timezone handling and work in UTC only anyway.	// So what we basically want to do is set our timezone to UTC,	// but we don't know what other scripts (such as bridges) are involved,	// so we check whether a timezone is already set by calling date_default_timezone_get().	// Unfortunately, date_default_timezone_get() itself might throw E_WARNING	// if no timezone has been set, so we have to keep it quiet with @.	// date_default_timezone_get() tries to guess the correct timezone first	// and then falls back to UTC when everything fails.	// We just set the timezone to whatever date_default_timezone_get() returns.	date_default_timezone_set(@date_default_timezone_get());}$starttime = explode(' ', microtime());$starttime = $starttime[1] + $starttime[0];
<?php/**** @package install* @version $Id$* @copyright (c) 2006 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @ignore*/if (!defined('IN_PHPBB')){	exit;}/*** Default avatar width/height* @ignore*/define('DEFAULT_AVATAR_X', 80);define('DEFAULT_AVATAR_Y', 80);// Global functions - all functions can be used by convertors// SIMPLE FUNCTIONS/*** Return the preceding value*/function dec($var){	return --$var;}/*** Return the next value*/function inc($var){	return ++$var;}/*** Return whether the value is positive*/function is_positive($n){	return ($n > 0) ? 1 : 0;}/*** Boolean inverse of the value*/function not($var){	return ($var) ? 0 : 1;}/*** Convert a textual value to it's equivalent boolean value** @param string $str String to convert (converts yes, on, y, 1 and true to boolean true)* @return boolean The equivalent value*/function str_to_bool($str){	$str = strtolower($str);	return ($str == 'yes' || $str == 'on' || $str == 'y' || $str == 'true' || $str == '1') ? true : false;}/*** Function to mimic php's empty() function (it is the same)*/function is_empty($mixed){	return empty($mixed);}/*** Convert the name of a user's primary group to the appropriate equivalent phpBB group id** @param string $status The name of the group* @return int The group_id corresponding to the equivalent group*/function str_to_primary_group($status){	switch (ucfirst(strtolower($status)))	{		case 'Administrator':			return get_group_id('administrators');		break;		case 'Super moderator':		case 'Global moderator':		case 'Moderator':			return get_group_id('global_moderators');		break;		case 'Guest':		case 'Anonymous':			return get_group_id('guests');		break;		default:			return get_group_id('registered');		break;	}}/*** Convert a boolean into the appropriate phpBB constant indicating whether the item is locked*/function is_item_locked($bool){	return ($bool) ? ITEM_LOCKED : ITEM_UNLOCKED;}/*** Convert a value from days to seconds*/function days_to_seconds($days){	return ($days * 86400);}/*** Determine whether a user is anonymous and return the appropriate new user_id*/function is_user_anonymous($user_id){	return ($user_id > ANONYMOUS) ? $user_id : ANONYMOUS;}/*** Generate a key value based on existing values** @param int $pad Amount to add to the maximum value* @return int Key value*/function auto_id($pad = 0){	global $auto_id, $convert_row;	if (!empty($convert_row['max_id']))	{		return $convert_row['max_id'] + $pad;	}	return $auto_id + $pad;}/*** Convert a boolean into the appropriate phpBB constant indicating whether the user is active*/function set_user_type($user_active){	return ($user_active) ? USER_NORMAL : USER_INACTIVE;}/*** Convert a value from minutes to hours*/function minutes_to_hours($minutes){	return ($minutes / 3600);}/*** Return the group_id for a given group name*/function get_group_id($group_name){	global $db, $group_mapping;	if (empty($group_mapping))	{		$sql = 'SELECT group_name, group_id			FROM ' . GROUPS_TABLE;		$result = $db->sql_query($sql);		$group_mapping = array();		while ($row = $db->sql_fetchrow($result))		{			$group_mapping[strtoupper($row['group_name'])] = (int) $row['group_id'];		}		$db->sql_freeresult($result);	}	if (!sizeof($group_mapping))	{		add_default_groups();		return get_group_id($group_name);	}	if (isset($group_mapping[strtoupper($group_name)]))	{		return $group_mapping[strtoupper($group_name)];	}	return $group_mapping['REGISTERED'];}/*** Generate the email hash stored in the users table** Note: Deprecated, calls should directly go to phpbb_email_hash()*/function gen_email_hash($email){	return phpbb_email_hash($email);}/*** Convert a boolean into the appropriate phpBB constant indicating whether the topic is locked*/function is_topic_locked($bool){	return (!empty($bool)) ? ITEM_LOCKED : ITEM_UNLOCKED;}/*** Generate a bbcode_uid value*/function make_uid($timestamp){	static $last_timestamp, $last_uid;	if (empty($last_timestamp) || $timestamp != $last_timestamp)	{		$last_uid = substr(base_convert(unique_id(), 16, 36), 0, BBCODE_UID_LEN);	}	$last_timestamp = $timestamp;	return $last_uid;}/*** Validate a website address*/function validate_website($url){	if ($url === 'http://')	{		return '';	}	else if (!preg_match('#^[a-z0-9]+://#i', $url) && strlen($url) > 0)	{		return 'http://' . $url;	}	return $url;}/*** Convert nulls to zeros for fields which allowed a NULL value in the source but not the destination*/function null_to_zero($value){	return ($value === NULL) ? 0 : $value;}/*** Convert nulls to empty strings for fields which allowed a NULL value in the source but not the destination*/function null_to_str($value){	return ($value === NULL) ? '' : $value;}// EXTENDED FUNCTIONS/*** Get old config value*/function get_config_value($config_name){	static $convert_config;	if (!isset($convert_config))	{		$convert_config = get_config();	}	if (!isset($convert_config[$config_name]))	{		return false;	}	return (empty($convert_config[$config_name])) ? '' : $convert_config[$config_name];}/*** Convert an IP address from the hexadecimal notation to normal dotted-quad notation*/function decode_ip($int_ip){	if (!$int_ip)	{		return $int_ip;	}	$hexipbang = explode('.', chunk_split($int_ip, 2, '.'));	// Any mod changing the way ips are stored? Then we are not able to convert and enter the ip "as is" to not "destroy" anything...	if (sizeof($hexipbang) < 4)	{		return $int_ip;	}	return hexdec($hexipbang[0]) . '.' . hexdec($hexipbang[1]) . '.' . hexdec($hexipbang[2]) . '.' . hexdec($hexipbang[3]);}/*** Reverse the encoding of wild-carded bans*/function decode_ban_ip($int_ip){	return str_replace('255', '*', decode_ip($int_ip));}/*** Determine the MIME-type of a specified filename* This does not actually inspect the file, but simply uses the file extension*/function mimetype($filename){	if (!preg_match('/\.([a-z0-9]+)$/i', $filename, $m))	{		return 'application/octet-stream';	}	switch (strtolower($m[1]))	{		case 'zip':		return 'application/zip';		case 'jpeg':	return 'image/jpeg';		case 'jpg':		return 'image/jpeg';		case 'jpe':		return 'image/jpeg';		case 'png':		return 'image/png';		case 'gif':		return 'image/gif';		case 'htm':		case 'html':	return 'text/html';		case 'tif':		return 'image/tiff';		case 'tiff':	return 'image/tiff';		case 'ras':		return 'image/x-cmu-raster';		case 'pnm':		return 'image/x-portable-anymap';		case 'pbm':		return 'image/x-portable-bitmap';		case 'pgm':		return 'image/x-portable-graymap';		case 'ppm':		return 'image/x-portable-pixmap';		case 'rgb':		return 'image/x-rgb';		case 'xbm':		return 'image/x-xbitmap';		case 'xpm':		return 'image/x-xpixmap';		case 'xwd':		return 'image/x-xwindowdump';		case 'z':		return 'application/x-compress';		case 'gtar':	return 'application/x-gtar';		case 'tgz':		return 'application/x-gtar';		case 'gz':		return 'application/x-gzip';		case 'tar':		return 'application/x-tar';		case 'xls':		return 'application/excel';		case 'pdf':		return 'application/pdf';		case 'ppt':		return 'application/powerpoint';		case 'rm':		return 'application/vnd.rn-realmedia';		case 'wma':		return 'audio/x-ms-wma';		case 'swf':		return 'application/x-shockwave-flash';		case 'ief':		return 'image/ief';		case 'doc':		case 'dot':		case 'wrd':		return 'application/msword';		case 'ai':		case 'eps':		case 'ps':		return 'application/postscript';		case 'asc':		case 'txt':		case 'c':		case 'cc':		case 'h':		case 'hh':		case 'cpp':		case 'hpp':		case 'php':		case 'php3':	return 'text/plain';		default: 		return 'application/octet-stream';	}}/*** Obtain the dimensions of all remotely hosted avatars* This should only be called from execute_last* There can be significant network overhead if there are a large number of remote avatars* @todo Look at the option of allowing the user to decide whether this is called or to force the dimensions*/function remote_avatar_dims(){	global $db;	$sql = 'SELECT user_id, user_avatar		FROM ' . USERS_TABLE . '		WHERE user_avatar_type = ' . AVATAR_REMOTE;	$result = $db->sql_query($sql);	$remote_avatars = array();	while ($row = $db->sql_fetchrow($result))	{		$remote_avatars[(int) $row['user_id']] = $row['user_avatar'];	}	$db->sql_freeresult($result);	foreach ($remote_avatars as $user_id => $avatar)	{		$width = (int) get_remote_avatar_dim($avatar, 0);		$height = (int) get_remote_avatar_dim($avatar, 1);		$sql = 'UPDATE ' . USERS_TABLE . '			SET user_avatar_width = ' . (int) $width . ', user_avatar_height = ' . (int) $height . '			WHERE user_id = ' . $user_id;		$db->sql_query($sql);	}}function import_avatar_gallery($gallery_name = '', $subdirs_as_galleries = false){	global $config, $convert, $phpbb_root_path, $user;	$relative_path = empty($convert->convertor['source_path_absolute']);	if (empty($convert->convertor['avatar_gallery_path']))	{		$convert->p_master->error(sprintf($user->lang['CONV_ERROR_NO_GALLERY_PATH'], 'import_avatar_gallery()'), __LINE__, __FILE__);	}	$src_path = relative_base(path($convert->convertor['avatar_gallery_path'], $relative_path), $relative_path);	if (is_dir($src_path))	{		// Do not die on failure... safe mode restrictions may be in effect.		copy_dir($convert->convertor['avatar_gallery_path'], path($config['avatar_gallery_path']) . $gallery_name, !$subdirs_as_galleries, false, false, $relative_path);		// only doing 1 level deep. (ibf 1.x)		// notes: ibf has 2 tiers: directly in the avatar directory for base gallery (handled in the above statement), plus subdirs(handled below).		// recursive subdirs ignored. -- i don't know if other forums support recursive galleries. if they do, this following code could be upgraded to be recursive.		if ($subdirs_as_galleries)		{			$dirlist = array();			if ($handle = @opendir($src_path))			{				while ($entry = readdir($handle))				{					if ($entry[0] == '.' || $entry == 'CVS' || $entry == 'index.htm')					{						continue;					}					if (is_dir($src_path . $entry))					{						$dirlist[] = $entry;					}				}				closedir($handle);			}			else if ($dir = @dir($src_path))			{				while ($entry = $dir->read())				{					if ($entry[0] == '.' || $entry == 'CVS' || $entry == 'index.htm')					{						continue;					}					if (is_dir($src_path . $entry))					{						$dirlist[] = $entry;					}				}				$dir->close();			}			for ($i = 0; $i < sizeof($dirlist); ++$i)			{				$dir = $dirlist[$i];				// Do not die on failure... safe mode restrictions may be in effect.				copy_dir(path($convert->convertor['avatar_gallery_path'], $relative_path) . $dir, path($config['avatar_gallery_path']) . $dir, true, false, false, $relative_path);			}		}	}}function import_attachment_files($category_name = ''){	global $config, $convert, $phpbb_root_path, $db, $user;	$sql = 'SELECT config_value AS upload_path		FROM ' . CONFIG_TABLE . "		WHERE config_name = 'upload_path'";	$result = $db->sql_query($sql);	$config['upload_path'] = $db->sql_fetchfield('upload_path');	$db->sql_freeresult($result);	$relative_path = empty($convert->convertor['source_path_absolute']);	if (empty($convert->convertor['upload_path']))	{		$convert->p_master->error(sprintf($user->lang['CONV_ERROR_NO_UPLOAD_DIR'], 'import_attachment_files()'), __LINE__, __FILE__);	}	if (is_dir(relative_base(path($convert->convertor['upload_path'], $relative_path), $relative_path)))	{		copy_dir($convert->convertor['upload_path'], path($config['upload_path']) . $category_name, true, false, true, $relative_path);	}}function attachment_forum_perms($forum_id){	if (!is_array($forum_id))	{		$forum_id = array($forum_id);	}	return serialize($forum_id);}// base64todec function// -> from php manual?function base64_unpack($string){	$chars = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ+-';	$base = strlen($chars);	$length = strlen($string);	$number = 0;	for ($i = 1; $i <= $length; $i++)	{		$pos = $length - $i;		$operand = strpos($chars, substr($string, $pos, 1));		$exponent = pow($base, $i-1);		$dec_value = $operand * $exponent;		$number += $dec_value;	}	return $number;}function _import_check($config_var, $source, $use_target){	global $convert, $config;	$result = array(		'orig_source'	=> $source,		'copied'		=> false,		'relative_path'	=> (empty($convert->convertor['source_path_absolute'])) ? true : false,	);	// copy file will prepend $phpBB_root_path	$target = $config[$config_var] . '/' . utf8_basename(($use_target === false) ? $source : $use_target);	if (!empty($convert->convertor[$config_var]) && strpos($source, $convert->convertor[$config_var]) !== 0)	{		$source = $convert->convertor[$config_var] . $source;	}	$result['source'] = $source;	if (file_exists(relative_base($source, $result['relative_path'], __LINE__, __FILE__)))	{		$result['copied'] = copy_file($source, $target, false, false, $result['relative_path']);	}	if ($result['copied'])	{		$result['target'] = utf8_basename($target);	}	else	{		$result['target'] = ($use_target !== false) ? $result['orig_source'] : utf8_basename($target);	}	return $result;}function import_attachment($source, $use_target = false){	if (empty($source))	{		return '';	}	global $convert, $phpbb_root_path, $config, $user;	if (empty($convert->convertor['upload_path']))	{		$convert->p_master->error(sprintf($user->lang['CONV_ERROR_NO_UPLOAD_DIR'], 'import_attachment()'), __LINE__, __FILE__);	}	$result = _import_check('upload_path', $source, $use_target);	if ($result['copied'])	{		// Thumbnails?		if (is_array($convert->convertor['thumbnails']))		{			$thumb_dir = $convert->convertor['thumbnails'][0];			$thumb_prefix = $convert->convertor['thumbnails'][1];			$thumb_source = $thumb_dir . $thumb_prefix . utf8_basename($result['source']);			if (strpos($thumb_source, $convert->convertor['upload_path']) !== 0)			{				$thumb_source = $convert->convertor['upload_path'] . $thumb_source;			}			$thumb_target = $config['upload_path'] . '/thumb_' . $result['target'];			if (file_exists(relative_base($thumb_source, $result['relative_path'], __LINE__, __FILE__)))			{				copy_file($thumb_source, $thumb_target, false, false, $result['relative_path']);			}		}	}	return $result['target'];}function import_rank($source, $use_target = false){	if (empty($source))	{		return '';	}	global $convert, $phpbb_root_path, $config, $user;	if (!isset($convert->convertor['ranks_path']))	{		$convert->p_master->error(sprintf($user->lang['CONV_ERROR_NO_RANKS_PATH'], 'import_rank()'), __LINE__, __FILE__);	}	$result = _import_check('ranks_path', $source, $use_target);	return $result['target'];}function import_smiley($source, $use_target = false){	if (empty($source))	{		return '';	}	global $convert, $phpbb_root_path, $config, $user;	if (!isset($convert->convertor['smilies_path']))	{		$convert->p_master->error(sprintf($user->lang['CONV_ERROR_NO_SMILIES_PATH'], 'import_smiley()'), __LINE__, __FILE__);	}	$result = _import_check('smilies_path', $source, $use_target);	return $result['target'];}/**/function import_avatar($source, $use_target = false, $user_id = false){	if (empty($source) || preg_match('#^https?:#i', $source) || preg_match('#blank\.(gif|png)$#i', $source))	{		return;	}	global $convert, $phpbb_root_path, $config, $user;	if (!isset($convert->convertor['avatar_path']))	{		$convert->p_master->error(sprintf($user->lang['CONV_ERROR_NO_AVATAR_PATH'], 'import_avatar()'), __LINE__, __FILE__);	}	if ($use_target === false && $user_id !== false)	{		$use_target = $config['avatar_salt'] . '_' . $user_id . '.' . substr(strrchr($source, '.'), 1);	}	$result = _import_check('avatar_path', $source, $use_target);	return ((!empty($user_id)) ? $user_id : $use_target) . '.' . substr(strrchr($source, '.'), 1);}/*** @todo all image dimension functions below (there are a *lot*) should get revisited and converted to one or two functions (no more needed, really).*//*** Calculate the size of the specified image* Called from the following functions for calculating the size of specific image types*/function get_image_dim($source){	if (empty($source))	{		return array(0, 0);	}	global $convert;	$relative_path = empty($convert->convertor['source_path_absolute']);	if (file_exists(relative_base($source, $relative_path)))	{		$image = relative_base($source, $relative_path);		return @getimagesize($image);	}	return false;}/*** Obtain the width of the specified smilie*/function get_smiley_width($src){	return get_smiley_dim($src, 0);}/*** Obtain the height of the specified smilie*/function get_smiley_height($src){	return get_smiley_dim($src, 1);}/*** Obtain the size of the specified smilie (using the cache if possible) and cache the value*/function get_smiley_dim($source, $axis){	if (empty($source))	{		return 15;	}	static $smiley_cache = array();	if (isset($smiley_cache[$source]))	{		return $smiley_cache[$source][$axis];	}	global $convert, $phpbb_root_path, $config, $user;	$orig_source = $source;	if (!isset($convert->convertor['smilies_path']))	{		$convert->p_master->error(sprintf($user->lang['CONV_ERROR_NO_SMILIES_PATH'], 'get_smiley_dim()'), __LINE__, __FILE__);	}	if (!empty($convert->convertor['smilies_path']) && strpos($source, $convert->convertor['smilies_path']) !== 0)	{		$source = $convert->convertor['smilies_path'] . $source;	}	$smiley_cache[$orig_source] = get_image_dim($source);	if (empty($smiley_cache[$orig_source]) || empty($smiley_cache[$orig_source][0]) || empty($smiley_cache[$orig_source][1]))	{		$smiley_cache[$orig_source] = array(15, 15);		return 15;	}	return $smiley_cache[$orig_source][$axis];}/*** Obtain the width of the specified avatar*/function get_avatar_width($src, $func = false, $arg1 = false, $arg2 = false){	return get_avatar_dim($src, 0, $func, $arg1, $arg2);}/*** Obtain the height of the specified avatar*/function get_avatar_height($src, $func = false, $arg1 = false, $arg2 = false){	return get_avatar_dim($src, 1, $func, $arg1, $arg2);}/***/function get_avatar_dim($src, $axis, $func = false, $arg1 = false, $arg2 = false){	$avatar_type = AVATAR_UPLOAD;	if ($func)	{		if ($arg1 || $arg2)		{			$ary = array($arg1);			if ($arg2)			{				$ary[] = $arg2;			}			$avatar_type = call_user_func_array($func, $ary);		}		else		{			$avatar_type = call_user_func($func);		}	}	switch ($avatar_type)	{		case AVATAR_UPLOAD:			return get_upload_avatar_dim($src, $axis);		break;		case AVATAR_GALLERY:			return get_gallery_avatar_dim($src, $axis);		break;		case AVATAR_REMOTE:			 // see notes on this functions usage and (hopefully) model $func to avoid this accordingly			return get_remote_avatar_dim($src, $axis);		break;		default:			$default_x = (defined('DEFAULT_AVATAR_X_CUSTOM')) ? DEFAULT_AVATAR_X_CUSTOM : DEFAULT_AVATAR_X;			$default_y = (defined('DEFAULT_AVATAR_Y_CUSTOM')) ? DEFAULT_AVATAR_Y_CUSTOM : DEFAULT_AVATAR_Y;			return $axis ? $default_y : $default_x;		break;	}}/*** Obtain the size of the specified uploaded avatar (using the cache if possible) and cache the value*/function get_upload_avatar_dim($source, $axis){	static $cachedims = false;	static $cachekey = false;	if (empty($source))	{		return 0;	}	if ($cachekey == $source)	{		return $cachedims[$axis];	}	$orig_source = $source;	if (substr($source, 0, 7) == 'upload:')	{		$source = substr($source, 7);	}	global $convert, $phpbb_root_path, $config, $user;	if (!isset($convert->convertor['avatar_path']))	{		$convert->p_master->error(sprintf($user->lang['CONV_ERROR_NO_AVATAR_PATH'], 'get_upload_avatar_dim()'), __LINE__, __FILE__);	}	if (!empty($convert->convertor['avatar_path']) && strpos($source, $convert->convertor['avatar_path']) !== 0)	{		$source = path($convert->convertor['avatar_path'], empty($convert->convertor['source_path_absolute'])) . $source;	}	$cachedims = get_image_dim($source);	if (empty($cachedims) || empty($cachedims[0]) || empty($cachedims[1]))	{		$default_x = (defined('DEFAULT_AVATAR_X_CUSTOM')) ? DEFAULT_AVATAR_X_CUSTOM : DEFAULT_AVATAR_X;		$default_y = (defined('DEFAULT_AVATAR_Y_CUSTOM')) ? DEFAULT_AVATAR_Y_CUSTOM : DEFAULT_AVATAR_Y;		$cachedims = array($default_x, $default_y);	}	return $cachedims[$axis];}/*** Obtain the size of the specified gallery avatar (using the cache if possible) and cache the value*/function get_gallery_avatar_dim($source, $axis){	if (empty($source))	{		return 0;	}	static $avatar_cache = array();	if (isset($avatar_cache[$source]))	{		return $avatar_cache[$source][$axis];	}	global $convert, $phpbb_root_path, $config, $user;	$orig_source = $source;	if (!isset($convert->convertor['avatar_gallery_path']))	{		$convert->p_master->error(sprintf($user->lang['CONV_ERROR_NO_GALLERY_PATH'], 'get_gallery_avatar_dim()'), __LINE__, __FILE__);	}	if (!empty($convert->convertor['avatar_gallery_path']) && strpos($source, $convert->convertor['avatar_gallery_path']) !== 0)	{		$source = path($convert->convertor['avatar_gallery_path'], empty($convert->convertor['source_path_absolute'])) . $source;	}	$avatar_cache[$orig_source] = get_image_dim($source);	if (empty($avatar_cache[$orig_source]) || empty($avatar_cache[$orig_source][0]) || empty($avatar_cache[$orig_source][1]))	{		$default_x = (defined('DEFAULT_AVATAR_X_CUSTOM')) ? DEFAULT_AVATAR_X_CUSTOM : DEFAULT_AVATAR_X;		$default_y = (defined('DEFAULT_AVATAR_Y_CUSTOM')) ? DEFAULT_AVATAR_Y_CUSTOM : DEFAULT_AVATAR_Y;		$avatar_cache[$orig_source] = array($default_x, $default_y);	}	return $avatar_cache[$orig_source][$axis];}/*** Obtain the size of the specified remote avatar (using the cache if possible) and cache the value* Whilst it's unlikely that remote avatars will be duplicated, it is possible so caching seems the best option* This should only be called from a post processing step due to the possibility of network timeouts*/function get_remote_avatar_dim($src, $axis){	if (empty($src))	{		return 0;	}	static $remote_avatar_cache = array();	// an ugly hack: we assume that the dimensions of each remote avatar are accessed exactly twice (x and y)	if (isset($remote_avatar_cache[$src]))	{		$retval = $remote_avatar_cache[$src][$axis];		unset($remote_avatar_cache);		return $retval;	}	$url_info = @parse_url($src);	if (empty($url_info['host']))	{		return 0;	}	$host = $url_info['host'];	$port = (isset($url_info['port'])) ? $url_info['port'] : 0;	$protocol = (isset($url_info['scheme'])) ? $url_info['scheme'] : 'http';	if (empty($port))	{		switch(strtolower($protocol))		{			case 'ftp':				$port = 21;				break;			case 'https':				$port = 443;				break;			default:				$port = 80;		}	}	$timeout = @ini_get('default_socket_timeout');	@ini_set('default_socket_timeout', 2);	// We're just trying to reach the server to avoid timeouts	$fp = @fsockopen($host, $port, $errno, $errstr, 1);	if ($fp)	{		$remote_avatar_cache[$src] = @getimagesize($src);		fclose($fp);	}	$default_x 	= (defined('DEFAULT_AVATAR_X_CUSTOM')) ? DEFAULT_AVATAR_X_CUSTOM : DEFAULT_AVATAR_X;	$default_y 	= (defined('DEFAULT_AVATAR_Y_CUSTOM')) ? DEFAULT_AVATAR_Y_CUSTOM : DEFAULT_AVATAR_Y;	$default 	= array($default_x, $default_y);	if (empty($remote_avatar_cache[$src]) || empty($remote_avatar_cache[$src][0]) || empty($remote_avatar_cache[$src][1]))	{		$remote_avatar_cache[$src] = $default;	}	else	{		// We trust gallery and uploaded avatars to conform to the size settings; we might have to adjust here		if ($remote_avatar_cache[$src][0] > $default_x || $remote_avatar_cache[$src][1] > $default_y)		{			$bigger = ($remote_avatar_cache[$src][0] > $remote_avatar_cache[$src][1]) ? 0 : 1;			$ratio = $default[$bigger] / $remote_avatar_cache[$src][$bigger];			$remote_avatar_cache[$src][0] = (int)($remote_avatar_cache[$src][0] * $ratio);			$remote_avatar_cache[$src][1] = (int)($remote_avatar_cache[$src][1] * $ratio);		}	}	@ini_set('default_socket_timeout', $timeout);	return $remote_avatar_cache[$src][$axis];}function set_user_options(){	global $convert_row;	// Key need to be set in row, else default value is chosen	$keyoptions = array(		'viewimg'		=> array('bit' => 0, 'default' => 1),		'viewflash'		=> array('bit' => 1, 'default' => 1),		'viewsmilies'	=> array('bit' => 2, 'default' => 1),		'viewsigs'		=> array('bit' => 3, 'default' => 1),		'viewavatars'	=> array('bit' => 4, 'default' => 1),		'viewcensors'	=> array('bit' => 5, 'default' => 1),		'attachsig'		=> array('bit' => 6, 'default' => 0),		'bbcode'		=> array('bit' => 8, 'default' => 1),		'smilies'		=> array('bit' => 9, 'default' => 1),		'popuppm'		=> array('bit' => 10, 'default' => 0),		'sig_bbcode'	=> array('bit' => 15, 'default' => 1),		'sig_smilies'	=> array('bit' => 16, 'default' => 1),		'sig_links'		=> array('bit' => 17, 'default' => 1),	);	$option_field = 0;	foreach ($keyoptions as $key => $key_ary)	{		$value = (isset($convert_row[$key])) ? (int) $convert_row[$key] : $key_ary['default'];		if ($value && !($option_field & 1 << $key_ary['bit']))		{			$option_field += 1 << $key_ary['bit'];		}	}	return $option_field;}/*** Index messages on the fly as we convert them* @todo naderman, can you check that this works with the new search plugins as it's use is currently disabled (and thus untested)function search_indexing($message = ''){	global $fulltext_search, $convert_row;	if (!isset($convert_row['post_id']))	{		return;	}	if (!$message)	{		if (!isset($convert_row['message']))		{			return;		}		$message = $convert_row['message'];	}	$title = (isset($convert_row['title'])) ? $convert_row['title'] : '';	$fulltext_search->index('post', $convert_row['post_id'], $message, $title, $convert_row['poster_id'], $convert_row['forum_id']);}*/function make_unique_filename($filename){	if (!strlen($filename))	{		$filename = md5(unique_id()) . '.dat';	}	else if ($filename[0] == '.')	{		$filename = md5(unique_id()) . $filename;	}	else if (preg_match('/\.([a-z]+)$/i', $filename, $m))	{		$filename = preg_replace('/\.([a-z]+)$/i', '_' . md5(unique_id()) . '.\1', $filename);	}	else	{		$filename .= '_' . md5(unique_id()) . '.dat';	}	return $filename;}function words_unique(&$words){	reset($words);	$return_array = array();	$word = current($words);	do	{		$return_array[$word] = $word;	}	while ($word = next($words));	return $return_array;}/*** Adds a user to the specified group and optionally makes them a group leader* This function does not create the group if it does not exist and so should only be called after the groups have been created*/function add_user_group($group_id, $user_id, $group_leader=false){	global $convert, $phpbb_root_path, $config, $user, $db;	$sql = 'INSERT INTO ' . USER_GROUP_TABLE . ' ' . $db->sql_build_array('INSERT', array(		'group_id'		=> $group_id,		'user_id'		=> $user_id,		'group_leader'	=> ($group_leader) ? 1 : 0,		'user_pending'	=> 0));	$db->sql_query($sql);}// STANDALONE FUNCTIONS/*** Add users to the pre-defined "special" groups** @param string $group The name of the special group to add to* @param string $select_query An SQL query to retrieve the user(s) to add to the group*/function user_group_auth($group, $select_query, $use_src_db){	global $convert, $phpbb_root_path, $config, $user, $db, $src_db, $same_db;	if (!in_array($group, array('guests', 'registered', 'registered_coppa', 'global_moderators', 'administrators', 'bots')))	{		$convert->p_master->error(sprintf($user->lang['CONV_ERROR_WRONG_GROUP'], $group, 'user_group_auth()'), __LINE__, __FILE__, true);		return;	}	$sql = 'SELECT group_id		FROM ' . GROUPS_TABLE . "		WHERE group_name = '" . $db->sql_escape(strtoupper($group)) . "'";	$result = $db->sql_query($sql);	$group_id = (int) $db->sql_fetchfield('group_id');	$db->sql_freeresult($result);	if (!$group_id)	{		$convert->p_master->error(sprintf($user->lang['CONV_ERROR_NO_GROUP'], $group, 'user_group_auth()'), __LINE__, __FILE__, true);		return;	}	if ($same_db || !$use_src_db)	{		$sql = 'INSERT INTO ' . USER_GROUP_TABLE . ' (user_id, group_id, user_pending)			' . str_replace('{' . strtoupper($group) . '}', $group_id . ', 0', $select_query);		$db->sql_query($sql);	}	else	{		$result = $src_db->sql_query(str_replace('{' . strtoupper($group) . '}', $group_id . ' ', $select_query));		while ($row = $src_db->sql_fetchrow($result))		{			// this might become quite a lot of INSERTS unfortunately			$sql = 'INSERT INTO ' . USER_GROUP_TABLE . " (user_id, group_id, user_pending)				VALUES ({$row['user_id']}, $group_id, 0)";			$db->sql_query($sql);		}		$src_db->sql_freeresult($result);	}}/*** Retrieves configuration information from the source forum and caches it as an array* Both database and file driven configuration formats can be handled* (the type used is specified in $config_schema, see convert_phpbb20.php for more details)*/function get_config(){	static $convert_config;	global $user;	if (isset($convert_config))	{		return $convert_config;	}	global $src_db, $same_db, $phpbb_root_path, $config;	global $convert;	if ($convert->config_schema['table_format'] != 'file')	{		if ($convert->mysql_convert && $same_db)		{			$src_db->sql_query("SET NAMES 'binary'");		}		$sql = 'SELECT * FROM ' . $convert->src_table_prefix . $convert->config_schema['table_name'];		$result = $src_db->sql_query($sql);		$row = $src_db->sql_fetchrow($result);		if (!$row)		{			$convert->p_master->error($user->lang['CONV_ERROR_GET_CONFIG'], __LINE__, __FILE__);		}	}	if (is_array($convert->config_schema['table_format']))	{		$convert_config = array();		list($key, $val) = each($convert->config_schema['table_format']);		do		{			$convert_config[$row[$key]] = $row[$val];		}		while ($row = $src_db->sql_fetchrow($result));		$src_db->sql_freeresult($result);		if ($convert->mysql_convert && $same_db)		{			$src_db->sql_query("SET NAMES 'utf8'");		}	}	else if ($convert->config_schema['table_format'] == 'file')	{		$filename = $convert->options['forum_path'] . '/' . $convert->config_schema['filename'];		if (!file_exists($filename))		{			$convert->p_master->error($user->lang['FILE_NOT_FOUND'] . ': ' . $filename, __LINE__, __FILE__);		}		if (isset($convert->config_schema['array_name']))		{			unset($convert->config_schema['array_name']);		}		$convert_config = extract_variables_from_file($filename);		if (!empty($convert->config_schema['array_name']))		{			$convert_config = $convert_config[$convert->config_schema['array_name']];		}	}	else	{		$convert_config = $row;		if ($convert->mysql_convert && $same_db)		{			$src_db->sql_query("SET NAMES 'utf8'");		}	}	if (!sizeof($convert_config))	{		$convert->p_master->error($user->lang['CONV_ERROR_CONFIG_EMPTY'], __LINE__, __FILE__);	}	return $convert_config;}/*** Transfers the relevant configuration information from the source forum* The mapping of fields is specified in $config_schema, see convert_phpbb20.php for more details*/function restore_config($schema){	global $db, $config;	$convert_config = get_config();	foreach ($schema['settings'] as $config_name => $src)	{		if (preg_match('/(.*)\((.*)\)/', $src, $m))		{			$var = (empty($m[2]) || empty($convert_config[$m[2]])) ? "''" : "'" . addslashes($convert_config[$m[2]]) . "'";			$exec = '$config_value = ' . $m[1] . '(' . $var . ');';			eval($exec);		}		else		{			if ($schema['table_format'] != 'file' || empty($schema['array_name']))			{				$config_value = (isset($convert_config[$src])) ? $convert_config[$src] : '';			}			else if (!empty($schema['array_name']))			{				$src_ary = $schema['array_name'];				$config_value = (isset($convert_config[$src_ary][$src])) ? $convert_config[$src_ary][$src] : '';			}   		}		if ($config_value !== '')		{			// Most are...			if (is_string($config_value))			{				$config_value = truncate_string(utf8_htmlspecialchars($config_value), 255, 255, false);			}			set_config($config_name, $config_value);		}	}}/*** Update the count of PM's in custom folders for all users*/function update_folder_pm_count(){	global $db, $convert, $user;	$sql = 'SELECT user_id, folder_id, COUNT(msg_id) as num_messages		FROM ' . PRIVMSGS_TO_TABLE . '		WHERE folder_id NOT IN (' . PRIVMSGS_NO_BOX . ', ' . PRIVMSGS_HOLD_BOX . ', ' . PRIVMSGS_INBOX . ', ' . PRIVMSGS_OUTBOX . ', ' . PRIVMSGS_SENTBOX . ')		GROUP BY folder_id, user_id';	$result = $db->sql_query($sql);	while ($row = $db->sql_fetchrow($result))	{		$db->sql_query('UPDATE ' . PRIVMSGS_FOLDER_TABLE . ' SET pm_count = ' . $row['num_messages'] . '			WHERE user_id = ' . $row['user_id'] . ' AND folder_id = ' . $row['folder_id']);	}	$db->sql_freeresult($result);}// Functions mainly used by the main convertor scriptfunction path($path, $path_relative = true){	if ($path === false)	{		return '';	}	if (substr($path, -1) != '/')	{		$path .= '/';	}	if (!$path_relative)	{		return $path;	}	if (substr($path, 0, 1) == '/')	{		$path = substr($path, 1);	}	return $path;}/*** Extract the variables defined in a configuration file* @todo As noted by Xore we need to look at this from a security perspective*/function extract_variables_from_file($_filename){	include($_filename);	$vars = get_defined_vars();	unset($vars['_filename']);	return $vars;}function get_path($src_path, $src_url, $test_file){	global $config, $phpbb_root_path, $phpEx;	$board_config = get_config();	$test_file = preg_replace('/\.php$/i', ".$phpEx", $test_file);	$src_path = path($src_path);	if (@file_exists($phpbb_root_path . $src_path . $test_file))	{		return $src_path;	}	if (!empty($src_url) && !empty($board_config['server_name']))	{		if (!preg_match('#https?://([^/]+)(.*)#i', $src_url, $m))		{			return false;		}		if ($m[1] != $board_config['server_name'])		{			return false;		}		$url_parts = explode('/', $m[2]);		if (substr($src_url, -1) != '/')		{			if (preg_match('/.*\.([a-z0-9]{3,4})$/i', $url_parts[sizeof($url_parts) - 1]))			{				$url_parts[sizeof($url_parts) - 1] = '';			}			else			{				$url_parts[] = '';			}		}		$script_path = $board_config['script_path'];		if (substr($script_path, -1) == '/')		{			$script_path = substr($script_path, 0, -1);		}		$path_array = array();		$phpbb_parts = explode('/', $script_path);		for ($i = 0; $i < sizeof($url_parts); ++$i)		{			if ($i < sizeof($phpbb_parts[$i]) && $url_parts[$i] == $phpbb_parts[$i])			{				$path_array[] = $url_parts[$i];				unset($url_parts[$i]);			}			else			{				$path = '';				for ($j = $i; $j < sizeof($phpbb_parts); ++$j)				{					$path .= '../';				}				$path .= implode('/', $url_parts);				break;			}		}		if (!empty($path))		{			if (@file_exists($phpbb_root_path . $path . $test_file))			{				return $path;			}		}	}	return false;}function compare_table($tables, $tablename, &$prefixes){	for ($i = 0, $table_size = sizeof($tables); $i < $table_size; ++$i)	{		if (preg_match('/(.*)' . $tables[$i] . '$/', $tablename, $m))		{			if (empty($m[1]))			{				$m[1] = '*';			}			if (isset($prefixes[$m[1]]))			{				$prefixes[$m[1]]++;			}			else			{				$prefixes[$m[1]] = 1;			}		}	}}/*** Grant permissions to a specified user or group** @param string $ug_type user|group|user_role|group_role* @param mixed $forum_id forum ids (array|int|0) -> 0 == all forums* @param mixed $ug_id [int] user_id|group_id : [string] usergroup name* @param mixed $acl_list [string] acl entry : [array] acl entries : [string] role entry* @param int $setting ACL_YES|ACL_NO|ACL_NEVER*/function mass_auth($ug_type, $forum_id, $ug_id, $acl_list, $setting = ACL_NO){	global $db, $convert, $user, $config;	static $acl_option_ids, $group_ids;	if (($ug_type == 'group' || $ug_type == 'group_role') && is_string($ug_id))	{		if (!isset($group_ids[$ug_id]))		{			$sql = 'SELECT group_id				FROM ' . GROUPS_TABLE . "				WHERE group_name = '" . $db->sql_escape(strtoupper($ug_id)) . "'";			$result = $db->sql_query_limit($sql, 1);			$id = (int) $db->sql_fetchfield('group_id');			$db->sql_freeresult($result);			if (!$id)			{				return;			}			$group_ids[$ug_id] = $id;		}		$ug_id = (int) $group_ids[$ug_id];	}	$table = ($ug_type == 'user' || $ug_type == 'user_role') ? ACL_USERS_TABLE : ACL_GROUPS_TABLE;	$id_field = ($ug_type == 'user' || $ug_type == 'user_role') ? 'user_id' : 'group_id';	// Role based permissions are the simplest to handle so check for them first	if ($ug_type == 'user_role' || $ug_type == 'group_role')	{		if (is_numeric($forum_id))		{			$sql = 'SELECT role_id				FROM ' . ACL_ROLES_TABLE . "				WHERE role_name = 'ROLE_" . $db->sql_escape($acl_list) . "'";			$result = $db->sql_query_limit($sql, 1);			$row = $db->sql_fetchrow($result);			$db->sql_freeresult($result);			// If we have no role id there is something wrong here			if ($row)			{				$sql = "INSERT INTO $table ($id_field, forum_id, auth_role_id) VALUES ($ug_id, $forum_id, " . $row['role_id'] . ')';				$db->sql_query($sql);			}		}		return;	}	// Build correct parameters	$auth = array();	if (!is_array($acl_list))	{		$auth = array($acl_list => $setting);	}	else	{		foreach ($acl_list as $auth_option)		{			$auth[$auth_option] = $setting;		}	}	unset($acl_list);	if (!is_array($forum_id))	{		$forum_id = array($forum_id);	}	// Set any flags as required	foreach ($auth as $auth_option => $acl_setting)	{		$flag = substr($auth_option, 0, strpos($auth_option, '_') + 1);		if (empty($auth[$flag]))		{			$auth[$flag] = $acl_setting;		}	}	if (!is_array($acl_option_ids) || empty($acl_option_ids))	{		$sql = 'SELECT auth_option_id, auth_option			FROM ' . ACL_OPTIONS_TABLE;		$result = $db->sql_query($sql);		while ($row = $db->sql_fetchrow($result))		{			$acl_option_ids[$row['auth_option']] = $row['auth_option_id'];		}		$db->sql_freeresult($result);	}	$sql_forum = 'AND ' . $db->sql_in_set('a.forum_id', array_map('intval', $forum_id), false, true);	$sql = ($ug_type == 'user') ? 'SELECT o.auth_option_id, o.auth_option, a.forum_id, a.auth_setting FROM ' . ACL_USERS_TABLE . ' a, ' . ACL_OPTIONS_TABLE . " o WHERE a.auth_option_id = o.auth_option_id $sql_forum AND a.user_id = $ug_id" : 'SELECT o.auth_option_id, o.auth_option, a.forum_id, a.auth_setting FROM ' . ACL_GROUPS_TABLE . ' a, ' . ACL_OPTIONS_TABLE . " o WHERE a.auth_option_id = o.auth_option_id $sql_forum AND a.group_id = $ug_id";	$result = $db->sql_query($sql);	$cur_auth = array();	while ($row = $db->sql_fetchrow($result))	{		$cur_auth[$row['forum_id']][$row['auth_option_id']] = $row['auth_setting'];	}	$db->sql_freeresult($result);	$sql_ary = array();	foreach ($forum_id as $forum)	{		foreach ($auth as $auth_option => $setting)		{			$auth_option_id = $acl_option_ids[$auth_option];			if (!$auth_option_id)			{				continue;			}			switch ($setting)			{				case ACL_NO:					if (isset($cur_auth[$forum][$auth_option_id]))					{						$sql_ary['delete'][] = "DELETE FROM $table							WHERE forum_id = $forum								AND auth_option_id = $auth_option_id								AND $id_field = $ug_id";					}				break;				default:					if (!isset($cur_auth[$forum][$auth_option_id]))					{						$sql_ary['insert'][] = "$ug_id, $forum, $auth_option_id, $setting";					}					else if ($cur_auth[$forum][$auth_option_id] != $setting)					{						$sql_ary['update'][] = "UPDATE " . $table . "							SET auth_setting = $setting							WHERE $id_field = $ug_id								AND forum_id = $forum								AND auth_option_id = $auth_option_id";					}			}		}	}	unset($cur_auth);	$sql = '';	foreach ($sql_ary as $sql_type => $sql_subary)	{		switch ($sql_type)		{			case 'insert':				switch ($db->sql_layer)				{					case 'mysql':					case 'mysql4':						$sql = 'VALUES ' . implode(', ', preg_replace('#^(.*?)$#', '(\1)', $sql_subary));					break;					case 'mssql':					case 'sqlite':					case 'mssqlnative':						$sql = implode(' UNION ALL ', preg_replace('#^(.*?)$#', 'SELECT \1', $sql_subary));					break;					default:						foreach ($sql_subary as $sql)						{							$sql = "INSERT INTO $table ($id_field, forum_id, auth_option_id, auth_setting) VALUES ($sql)";							$db->sql_query($sql);							$sql = '';						}				}				if ($sql != '')				{					$sql = "INSERT INTO $table ($id_field, forum_id, auth_option_id, auth_setting) $sql";					$db->sql_query($sql);				}			break;			case 'update':			case 'delete':				foreach ($sql_subary as $sql)				{					$db->sql_query($sql);					$sql = '';				}			break;		}		unset($sql_ary[$sql_type]);	}	unset($sql_ary);}/*** Update the count of unread private messages for all users*/function update_unread_count(){	global $db;	$sql = 'SELECT user_id, COUNT(msg_id) as num_messages		FROM ' . PRIVMSGS_TO_TABLE . '		WHERE pm_unread = 1			AND folder_id <> ' . PRIVMSGS_OUTBOX . '		GROUP BY user_id';	$result = $db->sql_query($sql);	while ($row = $db->sql_fetchrow($result))	{		$db->sql_query('UPDATE ' . USERS_TABLE . ' SET user_unread_privmsg = ' . $row['num_messages'] . '			WHERE user_id = ' . $row['user_id']);	}	$db->sql_freeresult($result);}/*** Add any of the pre-defined "special" groups which are missing from the database*/function add_default_groups(){	global $db;	$default_groups = array(		'GUESTS'			=> array('', 0, 0),		'REGISTERED'		=> array('', 0, 0),		'REGISTERED_COPPA'	=> array('', 0, 0),		'GLOBAL_MODERATORS'	=> array('00AA00', 1, 0),		'ADMINISTRATORS'	=> array('AA0000', 1, 1),		'BOTS'				=> array('9E8DA7', 0, 0),		'NEWLY_REGISTERED'		=> array('', 0, 0),	);	$sql = 'SELECT *		FROM ' . GROUPS_TABLE . '		WHERE ' . $db->sql_in_set('group_name', array_keys($default_groups));	$result = $db->sql_query($sql);	while ($row = $db->sql_fetchrow($result))	{		unset($default_groups[strtoupper($row['group_name'])]);	}	$db->sql_freeresult($result);	$sql_ary = array();	foreach ($default_groups as $name => $data)	{		$sql_ary[] = array(			'group_name'			=> (string) $name,			'group_desc'			=> '',			'group_desc_uid'		=> '',			'group_desc_bitfield'	=> '',			'group_type'			=> GROUP_SPECIAL,			'group_colour'			=> (string) $data[0],			'group_legend'			=> (int) $data[1],			'group_founder_manage'	=> (int) $data[2]		);	}	if (sizeof($sql_ary))	{		$db->sql_multi_insert(GROUPS_TABLE, $sql_ary);	}}/*** Sync post count. We might need to do this in batches.*/function sync_post_count($offset, $limit){	global $db;	$sql = 'SELECT COUNT(post_id) AS num_posts, poster_id			FROM ' . POSTS_TABLE . '			WHERE post_postcount = 1				AND post_approved = 1			GROUP BY poster_id			ORDER BY poster_id';	$result = $db->sql_query_limit($sql, $limit, $offset);	while ($row = $db->sql_fetchrow($result))	{		$db->sql_query('UPDATE ' . USERS_TABLE . " SET user_posts = {$row['num_posts']} WHERE user_id = {$row['poster_id']}");	}	$db->sql_freeresult($result);}/*** Add the search bots into the database* This code should be used in execute_last if the source database did not have bots* If you are converting bots this function should not be called* @todo We might want to look at sharing the bot list between the install code and this code for consistancy*/function add_bots(){	global $db, $convert, $user, $config, $phpbb_root_path, $phpEx;	$db->sql_query($convert->truncate_statement . BOTS_TABLE);	$sql = 'SELECT group_id FROM ' . GROUPS_TABLE . " WHERE group_name = 'BOTS'";	$result = $db->sql_query($sql);	$group_id = (int) $db->sql_fetchfield('group_id', false, $result);	$db->sql_freeresult($result);	if (!$group_id)	{		add_default_groups();		$sql = 'SELECT group_id FROM ' . GROUPS_TABLE . " WHERE group_name = 'BOTS'";		$result = $db->sql_query($sql);		$group_id = (int) $db->sql_fetchfield('group_id', false, $result);		$db->sql_freeresult($result);		if (!$group_id)		{			global $install;			$install->error($user->lang['CONV_ERROR_INCONSISTENT_GROUPS'], __LINE__, __FILE__);		}	}	$bots = array(		'AdsBot [Google]'			=> array('AdsBot-Google', ''),		'Alexa [Bot]'				=> array('ia_archiver', ''),		'Alta Vista [Bot]'			=> array('Scooter/', ''),		'Ask Jeeves [Bot]'			=> array('Ask Jeeves', ''),		'Baidu [Spider]'			=> array('Baiduspider+(', ''),		'Bing [Bot]'				=> array('bingbot/', ''),		'Exabot [Bot]'				=> array('Exabot/', ''),		'FAST Enterprise [Crawler]'	=> array('FAST Enterprise Crawler', ''),		'FAST WebCrawler [Crawler]'	=> array('FAST-WebCrawler/', ''),		'Francis [Bot]'				=> array('http://www.neomo.de/', ''),		'Gigabot [Bot]'				=> array('Gigabot/', ''),		'Google Adsense [Bot]'		=> array('Mediapartners-Google', ''),		'Google Desktop'			=> array('Google Desktop', ''),		'Google Feedfetcher'		=> array('Feedfetcher-Google', ''),		'Google [Bot]'				=> array('Googlebot', ''),		'Heise IT-Markt [Crawler]'	=> array('heise-IT-Markt-Crawler', ''),		'Heritrix [Crawler]'		=> array('heritrix/1.', ''),		'IBM Research [Bot]'		=> array('ibm.com/cs/crawler', ''),		'ICCrawler - ICjobs'		=> array('ICCrawler - ICjobs', ''),		'ichiro [Crawler]'			=> array('ichiro/2', ''),		'Majestic-12 [Bot]'			=> array('MJ12bot/', ''),		'Metager [Bot]'				=> array('MetagerBot/', ''),		'MSN NewsBlogs'				=> array('msnbot-NewsBlogs/', ''),		'MSN [Bot]'					=> array('msnbot/', ''),		'MSNbot Media'				=> array('msnbot-media/', ''),		'NG-Search [Bot]'			=> array('NG-Search/', ''),		'Nutch [Bot]'				=> array('http://lucene.apache.org/nutch/', ''),		'Nutch/CVS [Bot]'			=> array('NutchCVS/', ''),		'OmniExplorer [Bot]'		=> array('OmniExplorer_Bot/', ''),		'Online link [Validator]'	=> array('online link validator', ''),		'psbot [Picsearch]'			=> array('psbot/0', ''),		'Seekport [Bot]'			=> array('Seekbot/', ''),		'Sensis [Crawler]'			=> array('Sensis Web Crawler', ''),		'SEO Crawler'				=> array('SEO search Crawler/', ''),		'Seoma [Crawler]'			=> array('Seoma [SEO Crawler]', ''),		'SEOSearch [Crawler]'		=> array('SEOsearch/', ''),		'Snappy [Bot]'				=> array('Snappy/1.1 ( http://www.urltrends.com/ )', ''),		'Steeler [Crawler]'			=> array('http://www.tkl.iis.u-tokyo.ac.jp/~crawler/', ''),		'Synoo [Bot]'				=> array('SynooBot/', ''),		'Telekom [Bot]'				=> array('crawleradmin.t-info@telekom.de', ''),		'TurnitinBot [Bot]'			=> array('TurnitinBot/', ''),		'Voyager [Bot]'				=> array('voyager/1.0', ''),		'W3 [Sitesearch]'			=> array('W3 SiteSearch Crawler', ''),		'W3C [Linkcheck]'			=> array('W3C-checklink/', ''),		'W3C [Validator]'			=> array('W3C_*Validator', ''),		'WiseNut [Bot]'				=> array('http://www.WISEnutbot.com', ''),		'YaCy [Bot]'				=> array('yacybot', ''),		'Yahoo MMCrawler [Bot]'		=> array('Yahoo-MMCrawler/', ''),		'Yahoo Slurp [Bot]'			=> array('Yahoo! DE Slurp', ''),		'Yahoo [Bot]'				=> array('Yahoo! Slurp', ''),		'YahooSeeker [Bot]'			=> array('YahooSeeker/', ''),	);	if (!function_exists('user_add'))	{		include($phpbb_root_path . 'includes/functions_user.' . $phpEx);	}	foreach ($bots as $bot_name => $bot_ary)	{		$user_row = array(			'user_type'				=> USER_IGNORE,			'group_id'				=> $group_id,			'username'				=> $bot_name,			'user_regdate'			=> time(),			'user_password'			=> '',			'user_colour'			=> '9E8DA7',			'user_email'			=> '',			'user_lang'				=> $config['default_lang'],			'user_style'			=> 1,			'user_timezone'			=> 0,			'user_allow_massemail'	=> 0,		);		$user_id = user_add($user_row);		if ($user_id)		{			$sql = 'INSERT INTO ' . BOTS_TABLE . ' ' . $db->sql_build_array('INSERT', array(				'bot_active'	=> 1,				'bot_name'		=> $bot_name,				'user_id'		=> $user_id,				'bot_agent'		=> $bot_ary[0],				'bot_ip'		=> $bot_ary[1])			);			$db->sql_query($sql);		}	}}/*** Update any dynamic configuration variables after the conversion is finished* @todo Confirm that this updates all relevant values since it has not necessarily been kept in sync with all changes*/function update_dynamic_config(){	global $db, $config;	// Get latest username	$sql = 'SELECT user_id, username, user_colour		FROM ' . USERS_TABLE . '		WHERE user_type IN (' . USER_NORMAL . ', ' . USER_FOUNDER . ')';	if (!empty($config['increment_user_id']))	{		$sql .= ' AND user_id <> ' . $config['increment_user_id'];	}	$sql .= ' ORDER BY user_id DESC';	$result = $db->sql_query_limit($sql, 1);	$row = $db->sql_fetchrow($result);	$db->sql_freeresult($result);	if ($row)	{		set_config('newest_user_id', $row['user_id'], true);		set_config('newest_username', $row['username'], true);		set_config('newest_user_colour', $row['user_colour'], true);	}//	Also do not reset record online user/date. There will be old data or the fresh data from the schema.//	set_config('record_online_users', 1, true);//	set_config('record_online_date', time(), true);	$sql = 'SELECT COUNT(post_id) AS stat		FROM ' . POSTS_TABLE . '		WHERE post_approved = 1';	$result = $db->sql_query($sql);	$row = $db->sql_fetchrow($result);	$db->sql_freeresult($result);	set_config('num_posts', (int) $row['stat'], true);	$sql = 'SELECT COUNT(topic_id) AS stat		FROM ' . TOPICS_TABLE . '		WHERE topic_approved = 1';	$result = $db->sql_query($sql);	$row = $db->sql_fetchrow($result);	$db->sql_freeresult($result);	set_config('num_topics', (int) $row['stat'], true);	$sql = 'SELECT COUNT(user_id) AS stat		FROM ' . USERS_TABLE . '		WHERE user_type IN (' . USER_NORMAL . ',' . USER_FOUNDER . ')';	$result = $db->sql_query($sql);	$row = $db->sql_fetchrow($result);	$db->sql_freeresult($result);	set_config('num_users', (int) $row['stat'], true);	$sql = 'SELECT COUNT(attach_id) as stat		FROM ' . ATTACHMENTS_TABLE . '		WHERE is_orphan = 0';	$result = $db->sql_query($sql);	set_config('num_files', (int) $db->sql_fetchfield('stat'), true);	$db->sql_freeresult($result);	$sql = 'SELECT SUM(filesize) as stat		FROM ' . ATTACHMENTS_TABLE . '		WHERE is_orphan = 0';	$result = $db->sql_query($sql);	set_config('upload_dir_size', (float) $db->sql_fetchfield('stat'), true);	$db->sql_freeresult($result);	/**	* We do not resync users post counts - this can be done by the admin after conversion if wanted.	$sql = 'SELECT COUNT(post_id) AS num_posts, poster_id		FROM ' . POSTS_TABLE . '		WHERE post_postcount = 1		GROUP BY poster_id';	$result = $db->sql_query($sql);	while ($row = $db->sql_fetchrow($result))	{		$db->sql_query('UPDATE ' . USERS_TABLE . " SET user_posts = {$row['num_posts']} WHERE user_id = {$row['poster_id']}");	}	$db->sql_freeresult($result);	*/}/*** Updates topics_posted entries*/function update_topics_posted(){	global $db, $config;	switch ($db->sql_layer)	{		case 'sqlite':		case 'firebird':			$db->sql_query('DELETE FROM ' . TOPICS_POSTED_TABLE);		break;		default:			$db->sql_query('TRUNCATE TABLE ' . TOPICS_POSTED_TABLE);		break;	}	// This can get really nasty... therefore we only do the last six months	$get_from_time = time() - (6 * 4 * 7 * 24 * 60 * 60);	// Select forum ids, do not include categories	$sql = 'SELECT forum_id		FROM ' . FORUMS_TABLE . '		WHERE forum_type <> ' . FORUM_CAT;	$result = $db->sql_query($sql);	$forum_ids = array();	while ($row = $db->sql_fetchrow($result))	{		$forum_ids[] = $row['forum_id'];	}	$db->sql_freeresult($result);	// Any global announcements? ;)	$forum_ids[] = 0;	// Now go through the forums and get us some topics...	foreach ($forum_ids as $forum_id)	{		$sql = 'SELECT p.poster_id, p.topic_id			FROM ' . POSTS_TABLE . ' p, ' . TOPICS_TABLE . ' t			WHERE t.forum_id = ' . $forum_id . '				AND t.topic_moved_id = 0				AND t.topic_last_post_time > ' . $get_from_time . '				AND t.topic_id = p.topic_id				AND p.poster_id <> ' . ANONYMOUS . '			GROUP BY p.poster_id, p.topic_id';		$result = $db->sql_query($sql);		$posted = array();		while ($row = $db->sql_fetchrow($result))		{			$posted[$row['poster_id']][] = $row['topic_id'];		}		$db->sql_freeresult($result);		$sql_ary = array();		foreach ($posted as $user_id => $topic_row)		{			foreach ($topic_row as $topic_id)			{				$sql_ary[] = array(					'user_id'		=> (int) $user_id,					'topic_id'		=> (int) $topic_id,					'topic_posted'	=> 1,				);			}		}		unset($posted);		if (sizeof($sql_ary))		{			$db->sql_multi_insert(TOPICS_POSTED_TABLE, $sql_ary);		}	}}/*** Ensure that all users have a default group specified and update related information such as their colour*/function fix_empty_primary_groups(){	global $db;	// Set group ids for users not already having it	$sql = 'UPDATE ' . USERS_TABLE . ' SET group_id = ' . get_group_id('registered') . '		WHERE group_id = 0 AND user_type = ' . USER_INACTIVE;	$db->sql_query($sql);	$sql = 'UPDATE ' . USERS_TABLE . ' SET group_id = ' . get_group_id('registered') . '		WHERE group_id = 0 AND user_type = ' . USER_NORMAL;	$db->sql_query($sql);	$db->sql_query('UPDATE ' . USERS_TABLE . ' SET group_id = ' . get_group_id('guests') . ' WHERE user_id = ' . ANONYMOUS);	$sql = 'SELECT user_id FROM ' . USER_GROUP_TABLE . ' WHERE group_id = ' . get_group_id('administrators');	$result = $db->sql_query($sql);	$user_ids = array();	while ($row = $db->sql_fetchrow($result))	{		$user_ids[] = $row['user_id'];	}	$db->sql_freeresult($result);	if (sizeof($user_ids))	{		$db->sql_query('UPDATE ' . USERS_TABLE . ' SET group_id = ' . get_group_id('administrators') . '			WHERE group_id = 0 AND ' . $db->sql_in_set('user_id', $user_ids));	}	$sql = 'SELECT user_id FROM ' . USER_GROUP_TABLE . ' WHERE group_id = ' . get_group_id('global_moderators');	$user_ids = array();	while ($row = $db->sql_fetchrow($result))	{		$user_ids[] = $row['user_id'];	}	$db->sql_freeresult($result);	if (sizeof($user_ids))	{		$db->sql_query('UPDATE ' . USERS_TABLE . ' SET group_id = ' . get_group_id('global_moderators') . '			WHERE group_id = 0 AND ' . $db->sql_in_set('user_id', $user_ids));	}	// Set user colour	$sql = 'SELECT group_id, group_colour FROM ' . GROUPS_TABLE . "		WHERE group_colour <> ''";	$result = $db->sql_query($sql);	while ($row = $db->sql_fetchrow($result))	{		$db->sql_query('UPDATE ' . USERS_TABLE . " SET user_colour = '{$row['group_colour']}' WHERE group_id = {$row['group_id']}");	}	$db->sql_freeresult($result);}/*** Cleanly remove invalid user entries after converting the users table...*/function remove_invalid_users(){	global $convert, $db, $phpEx, $phpbb_root_path;	// username_clean is UNIQUE	$sql = 'SELECT user_id		FROM ' . USERS_TABLE . "		WHERE username_clean = ''";	$result = $db->sql_query($sql);	$row = $db->sql_fetchrow($result);	$db->sql_freeresult($result);	if ($row)	{		if (!function_exists('user_delete'))		{			include($phpbb_root_path . 'includes/functions_user.' . $phpEx);		}		user_delete('remove', $row['user_id']);	}}function convert_bbcode($message, $convert_size = true, $extended_bbcodes = false){	static $orig, $repl, $origx, $replx, $str_from, $str_to;	if (empty($orig))	{		$orig = $repl = array();		$orig[] = '#\[(php|sql)\](.*?)\[/(php|sql)\]#is';		$repl[] = '[code]\2[/code]';		$orig[] = '#\[font=[^\]]+\](.*?)\[/font\]#is';		$repl[] = '\1';		$orig[] = '#\[align=[a-z]+\](.*?)\[/align\]#is';		$repl[] = '\1';		$orig[] = '#\[/list=.*?\]#is';		$repl[] = '[/list]';		$origx = array(			'#\[glow[^\]]+\](.*?)\[/glow\]#is',			'#\[shadow[^\]]+\](.*?)\[/shadow\]#is',			'#\[flash[^\]]+\](.*?)\[/flash\]#is'		);		$replx = array(			'\1',			'\1',			'[url=\1]Flash[/url]'		);		$str_from = array(			'[ftp]',	'[/ftp]',			'[ftp=',	'[/ftp]',			'[pre]',	'[/pre]',			'[table]',	'[/table]',			'[td]',		'[/td]',			'[tr]',		'[/tr]',			'[s]',		'[/s]',			'[left]',	'[/left]',			'[right]',	'[/right]',			'[center]',	'[/center]',			'[sub]',	'[/sub]',			'[sup]',	'[/sup]',			'[tt]',		'[/tt]',			'[move]',	'[/move]',			'[hr]'		);		$str_to = array(			'[url]',	'[/url]',			'[url=',	'[/url]',			'[code]',	'[/code]',			"\n",		'',			'',			'',			"\n",		'',			'',			'',			'',			'',			'',			'',			'',			'',			'',			'',			'',			'',			'',			'',			'',			'',			"\n\n"		);		for ($i = 0; $i < sizeof($str_from); ++$i)		{			$origx[] = '#\\' . str_replace(']', '\\]', $str_from[$i]) . '#is';			$replx[] = $str_to[$i];		}	}	if (preg_match_all('#\[email=([^\]]+)\](.*?)\[/email\]#i', $message, $m))	{		for ($i = 0; $i < sizeof($m[1]); ++$i)		{			if ($m[1][$i] == $m[2][$i])			{				$message = str_replace($m[0][$i], '[email]' . $m[1][$i] . '[/email]', $message);			}			else			{				$message = str_replace($m[0][$i], $m[2][$i] . ' ([email]' . $m[1][$i] . '[/email])', $message);			}		}	}	if ($convert_size && preg_match('#\[size=[0-9]+\].*?\[/size\]#i', $message))	{		$size = array(9, 9, 12, 15, 18, 24, 29, 29, 29, 29);		$message = preg_replace('#\[size=([0-9]+)\](.*?)\[/size\]#i', '[size=\1]\2[/size]', $message);		$message = preg_replace('#\[size=[0-9]{2,}\](.*?)\[/size\]#i', '[size=29]\1[/size]', $message);		for ($i = sizeof($size); $i; )		{			$i--;			$message = str_replace('[size=' . $i . ']', '[size=' . $size[$i] . ']', $message);		}	}	if ($extended_bbcodes)	{		$message = preg_replace($origx, $replx, $message);	}	$message = preg_replace($orig, $repl, $message);	return $message;}function copy_file($src, $trg, $overwrite = false, $die_on_failure = true, $source_relative_path = true){	global $convert, $phpbb_root_path, $config, $user, $db;	if (substr($trg, -1) == '/')	{		$trg .= utf8_basename($src);	}	$src_path = relative_base($src, $source_relative_path, __LINE__, __FILE__);	$trg_path = $trg;	if (!$overwrite && @file_exists($trg_path))	{		return true;	}	if (!@file_exists($src_path))	{		return;	}	$path = $phpbb_root_path;	$parts = explode('/', $trg);	unset($parts[sizeof($parts) - 1]);	for ($i = 0; $i < sizeof($parts); ++$i)	{		$path .= $parts[$i] . '/';		if (!is_dir($path))		{			@mkdir($path, 0777);		}	}	if (!phpbb_is_writable($path))	{		@chmod($path, 0777);	}	if (!@copy($src_path, $phpbb_root_path . $trg_path))	{		$convert->p_master->error(sprintf($user->lang['COULD_NOT_COPY'], $src_path, $phpbb_root_path . $trg_path), __LINE__, __FILE__, !$die_on_failure);		return;	}	if ($perm = @fileperms($src_path))	{		@chmod($phpbb_root_path . $trg_path, $perm);	}	return true;}function copy_dir($src, $trg, $copy_subdirs = true, $overwrite = false, $die_on_failure = true, $source_relative_path = true){	global $convert, $phpbb_root_path, $config, $user, $db;	$dirlist = $filelist = $bad_dirs = array();	$src = path($src, $source_relative_path);	$trg = path($trg);	$src_path = relative_base($src, $source_relative_path, __LINE__, __FILE__);	$trg_path = $phpbb_root_path . $trg;	if (!is_dir($trg_path))	{		@mkdir($trg_path, 0777);		@chmod($trg_path, 0777);	}	if (!phpbb_is_writable($trg_path))	{		$bad_dirs[] = path($config['script_path']) . $trg;	}	if ($handle = @opendir($src_path))	{		while ($entry = readdir($handle))		{			if ($entry[0] == '.' || $entry == 'CVS' || $entry == 'index.htm')			{				continue;			}			if (is_dir($src_path . $entry))			{				$dirlist[] = $entry;			}			else			{				$filelist[] = $entry;			}		}		closedir($handle);	}	else if ($dir = @dir($src_path))	{		while ($entry = $dir->read())		{			if ($entry[0] == '.' || $entry == 'CVS' || $entry == 'index.htm')			{				continue;			}			if (is_dir($src_path . $entry))			{				$dirlist[] = $entry;			}			else			{				$filelist[] = $entry;			}		}		$dir->close();	}	else	{		$convert->p_master->error(sprintf($user->lang['CONV_ERROR_COULD_NOT_READ'], relative_base($src, $source_relative_path)), __LINE__, __FILE__);	}	if ($copy_subdirs)	{		for ($i = 0; $i < sizeof($dirlist); ++$i)		{			$dir = $dirlist[$i];			if ($dir == 'CVS')			{				continue;			}			if (!is_dir($trg_path . $dir))			{				@mkdir($trg_path . $dir, 0777);				@chmod($trg_path . $dir, 0777);			}			if (!phpbb_is_writable($trg_path . $dir))			{				$bad_dirs[] = $trg . $dir;				$bad_dirs[] = $trg_path . $dir;			}			if (!sizeof($bad_dirs))			{				copy_dir($src . $dir, $trg . $dir, true, $overwrite, $die_on_failure, $source_relative_path);			}		}	}	if (sizeof($bad_dirs))	{		$str = (sizeof($bad_dirs) == 1) ? $user->lang['MAKE_FOLDER_WRITABLE'] : $user->lang['MAKE_FOLDERS_WRITABLE'];		sort($bad_dirs);		$convert->p_master->error(sprintf($str, implode('<br />', $bad_dirs)), __LINE__, __FILE__);	}	for ($i = 0; $i < sizeof($filelist); ++$i)	{		copy_file($src . $filelist[$i], $trg . $filelist[$i], $overwrite, $die_on_failure, $source_relative_path);	}}function relative_base($path, $is_relative = true, $line = false, $file = false){	global $convert, $phpbb_root_path, $config, $user, $db;	if (!$is_relative)	{		return $path;	}	if (empty($convert->options['forum_path']) && $is_relative)	{		$line = $line ? $line : __LINE__;		$file = $file ? $file : __FILE__;		$convert->p_master->error($user->lang['CONV_ERROR_NO_FORUM_PATH'], $line, $file);	}	return $convert->options['forum_path'] . '/' . $path;}function get_smiley_display(){	static $smiley_count = 0;	$smiley_count++;	return ($smiley_count < 50) ? 1 : 0;}function fill_dateformat($user_dateformat){	global $config;	return ((empty($user_dateformat)) ? $config['default_dateformat'] : $user_dateformat);}?>
<?php/**** acp_search [English]** @package language* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** DO NOT CHANGE*/if (!defined('IN_PHPBB')){	exit;}if (empty($lang) || !is_array($lang)){	$lang = array();}// DEVELOPERS PLEASE NOTE//// All language files should use UTF-8 as their encoding and the files must not contain a BOM.//// Placeholders can now contain order information, e.g. instead of// 'Page %s of %s' you can (and should) write 'Page %1$s of %2$s', this allows// translators to re-order the output of data while ensuring it remains correct//// You do not need this where single placeholders are used, e.g. 'Message %d' is fine// equally where a string contains only two placeholders which are used to wrap text// in a url you again do not need to specify an order e.g., 'Click %sHERE%s' is fine$lang = array_merge($lang, array(	'ACP_SEARCH_INDEX_EXPLAIN'				=> 'Here you can manage the search backends indexes. Since you normally use only one backend you should delete all indexes that you do not make use of. After altering some of the search settings (e.g. the number of minimum/maximum chars) it might be worth recreating the index so it reflects those changes.',	'ACP_SEARCH_SETTINGS_EXPLAIN'			=> 'Here you can define what search backend will be used for indexing posts and performing searches. You can set various options that can influence how much processing these actions require. Some of these settings are the same for all search engine backends.',	'COMMON_WORD_THRESHOLD'					=> 'Common word threshold',	'COMMON_WORD_THRESHOLD_EXPLAIN'			=> 'Words which are contained in a greater percentage of all posts will be regarded as common. Common words are ignored in search queries. Set to zero to disable. Only takes effect if there are more than 100 posts. If you want words that are currently regarded as common to be reconsidered you have to recreate the index.',	'CONFIRM_SEARCH_BACKEND'				=> 'Are you sure you wish to switch to a different search backend? After changing the search backend you will have to create an index for the new search backend. If you dont plan on switching back to the old search backend you can also delete the old backends index in order to free system resources.',	'CONTINUE_DELETING_INDEX'				=> 'Continue previous index removal process',	'CONTINUE_DELETING_INDEX_EXPLAIN'		=> 'An index removal process has been started. In order to access the search index page you will have to complete it or cancel it.',	'CONTINUE_INDEXING'						=> 'Continue previous indexing process',	'CONTINUE_INDEXING_EXPLAIN'				=> 'An indexing process has been started. In order to access the search index page you will have to complete it or cancel it.',	'CREATE_INDEX'							=> 'Create index',	'DELETE_INDEX'							=> 'Delete index',	'DELETING_INDEX_IN_PROGRESS'			=> 'Deleting the index in progress',	'DELETING_INDEX_IN_PROGRESS_EXPLAIN'	=> 'The search backend is currently cleaning its index. This can take a few minutes.',	'FULLTEXT_MYSQL_INCOMPATIBLE_VERSION'	=> 'The MySQL fulltext backend can only be used with MySQL4 and above.',	'FULLTEXT_MYSQL_NOT_MYISAM'				=> 'MySQL fulltext indexes can only be used with MyISAM tables.',	'FULLTEXT_MYSQL_TOTAL_POSTS'			=> 'Total number of indexed posts',	'FULLTEXT_MYSQL_MBSTRING'				=> 'Support for non-latin UTF-8 characters using mbstring:',	'FULLTEXT_MYSQL_PCRE'					=> 'Support for non-latin UTF-8 characters using PCRE:',	'FULLTEXT_MYSQL_MBSTRING_EXPLAIN'		=> 'If PCRE does not have unicode character properties, the search backend will try to use mbstrings regular expression engine.',	'FULLTEXT_MYSQL_PCRE_EXPLAIN'			=> 'This search backend requires PCRE unicode character properties, only available in PHP 4.4, 5.1 and above, if you want to search for non-latin characters.',	'FULLTEXT_MYSQL_MIN_SEARCH_CHARS_EXPLAIN'	=> 'Words with at least this many characters will be indexed for searching. You or your host can only change this setting by changing the mysql configuration.',	'FULLTEXT_MYSQL_MAX_SEARCH_CHARS_EXPLAIN'	=> 'Words with no more than this many characters will be indexed for searching. You or your host can only change this setting by changing the mysql configuration.',	'GENERAL_SEARCH_SETTINGS'				=> 'General search settings',	'GO_TO_SEARCH_INDEX'					=> 'Go to search index page',	'INDEX_STATS'							=> 'Index statistics',	'INDEXING_IN_PROGRESS'					=> 'Indexing in progress',	'INDEXING_IN_PROGRESS_EXPLAIN'			=> 'The search backend is currently indexing all posts on the board. This can take from a few minutes to a few hours depending on your boards size.',	'LIMIT_SEARCH_LOAD'						=> 'Search page system load limit',	'LIMIT_SEARCH_LOAD_EXPLAIN'				=> 'If the 1 minute system load exceeds this value the search page will go offline, 1.0 equals ~100% utilisation of one processor. This only functions on UNIX based servers.',	'MAX_SEARCH_CHARS'						=> 'Max characters indexed by search',	'MAX_SEARCH_CHARS_EXPLAIN'				=> 'Words with no more than this many characters will be indexed for searching.',	'MAX_NUM_SEARCH_KEYWORDS'				=> 'Maximum number of allowed keywords',	'MAX_NUM_SEARCH_KEYWORDS_EXPLAIN'		=> 'Maximum number of words the user is able to search for. A value of 0 allows an unlimited number of words.',	'MIN_SEARCH_CHARS'						=> 'Min characters indexed by search',	'MIN_SEARCH_CHARS_EXPLAIN'				=> 'Words with at least this many characters will be indexed for searching.',	'MIN_SEARCH_AUTHOR_CHARS'				=> 'Min author name characters',	'MIN_SEARCH_AUTHOR_CHARS_EXPLAIN'		=> 'Users have to enter at least this many characters of the name when performing a wildcard author search. If the authors username is shorter than this number you can still search for the authors posts by entering the complete username.',	'PROGRESS_BAR'							=> 'Progress bar',	'SEARCH_GUEST_INTERVAL'					=> 'Guest search flood interval',	'SEARCH_GUEST_INTERVAL_EXPLAIN'			=> 'Number of seconds guests must wait between searches. If one guest searches all others have to wait until the time interval passed.',	'SEARCH_INDEX_CREATE_REDIRECT'			=> 'All posts up to post id %1$d have now been indexed, of which %2$d posts were within this step.<br />The current rate of indexing is approximately %3$.1f posts per second.<br />Indexing in progress',	'SEARCH_INDEX_DELETE_REDIRECT'			=> 'All posts up to post id %1$d have been removed from the search index.<br />Deleting in progress',	'SEARCH_INDEX_CREATED'					=> 'Successfully indexed all posts in the board database.',	'SEARCH_INDEX_REMOVED'					=> 'Successfully deleted the search index for this backend.',	'SEARCH_INTERVAL'						=> 'User search flood interval',	'SEARCH_INTERVAL_EXPLAIN'				=> 'Number of seconds users must wait between searches. This interval is checked independently for each user.',	'SEARCH_STORE_RESULTS'					=> 'Search result cache length',	'SEARCH_STORE_RESULTS_EXPLAIN'			=> 'Cached search results will expire after this time, in seconds. Set to 0 if you want to disable search cache.',	'SEARCH_TYPE'							=> 'Search backend',	'SEARCH_TYPE_EXPLAIN'					=> 'phpBB allows you to choose the backend that is used for searching text in post contents. By default the search will use phpBBs own fulltext search.',	'SWITCHED_SEARCH_BACKEND'				=> 'You switched the search backend. In order to use the new search backend you should make sure that there is an index for the backend you chose.',	'TOTAL_WORDS'							=> 'Total number of indexed words',	'TOTAL_MATCHES'							=> 'Total number of word to post relations indexed',	'YES_SEARCH'							=> 'Enable search facilities',	'YES_SEARCH_EXPLAIN'					=> 'Enables user facing search functionality including member search.',	'YES_SEARCH_UPDATE'						=> 'Enable fulltext updating',	'YES_SEARCH_UPDATE_EXPLAIN'				=> 'Updating of fulltext indexes when posting, overridden if search is disabled.',));?>
<?php/**** @package acp* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @ignore*/if (!defined('IN_PHPBB')){	exit;}/*** @package acp*/class acp_ranks{	var $u_action;	function main($id, $mode)	{		global $db, $user, $auth, $template, $cache;		global $config, $phpbb_root_path, $phpbb_admin_path, $phpEx;		$user->add_lang('acp/posting');		// Set up general vars		$action = request_var('action', '');		$action = (isset($_POST['add'])) ? 'add' : $action;		$action = (isset($_POST['save'])) ? 'save' : $action;		$rank_id = request_var('id', 0);		$this->tpl_name = 'acp_ranks';		$this->page_title = 'ACP_MANAGE_RANKS';		$form_name = 'acp_ranks';		add_form_key($form_name);		switch ($action)		{			case 'save':				if (!check_form_key($form_name))				{					trigger_error($user->lang['FORM_INVALID']. adm_back_link($this->u_action), E_USER_WARNING);				}				$rank_title = utf8_normalize_nfc(request_var('title', '', true));				$special_rank = request_var('special_rank', 0);				$min_posts = ($special_rank) ? 0 : request_var('min_posts', 0);				$rank_image = request_var('rank_image', '');				// The rank image has to be a jpg, gif or png				if ($rank_image != '' && !preg_match('#(\.gif|\.png|\.jpg|\.jpeg)$#i', $rank_image))				{					$rank_image = '';				}				if (!$rank_title)				{					trigger_error($user->lang['NO_RANK_TITLE'] . adm_back_link($this->u_action), E_USER_WARNING);				}				$sql_ary = array(					'rank_title'		=> $rank_title,					'rank_special'		=> $special_rank,					'rank_min'			=> $min_posts,					'rank_image'		=> htmlspecialchars_decode($rank_image)				);								if ($rank_id)				{					$sql = 'UPDATE ' . RANKS_TABLE . ' SET ' . $db->sql_build_array('UPDATE', $sql_ary) . " WHERE rank_id = $rank_id";					$message = $user->lang['RANK_UPDATED'];					add_log('admin', 'LOG_RANK_UPDATED', $rank_title);				}				else				{					$sql = 'INSERT INTO ' . RANKS_TABLE . ' ' . $db->sql_build_array('INSERT', $sql_ary);					$message = $user->lang['RANK_ADDED'];					add_log('admin', 'LOG_RANK_ADDED', $rank_title);				}				$db->sql_query($sql);				$cache->destroy('_ranks');				trigger_error($message . adm_back_link($this->u_action));			break;			case 'delete':				if (!$rank_id)				{					trigger_error($user->lang['MUST_SELECT_RANK'] . adm_back_link($this->u_action), E_USER_WARNING);				}				if (confirm_box(true))				{					$sql = 'SELECT rank_title						FROM ' . RANKS_TABLE . '						WHERE rank_id = ' . $rank_id;					$result = $db->sql_query($sql);					$rank_title = (string) $db->sql_fetchfield('rank_title');					$db->sql_freeresult($result);					$sql = 'DELETE FROM ' . RANKS_TABLE . "						WHERE rank_id = $rank_id";					$db->sql_query($sql);					$sql = 'UPDATE ' . USERS_TABLE . "						SET user_rank = 0						WHERE user_rank = $rank_id";					$db->sql_query($sql);					$cache->destroy('_ranks');					add_log('admin', 'LOG_RANK_REMOVED', $rank_title);				}				else				{					confirm_box(false, $user->lang['CONFIRM_OPERATION'], build_hidden_fields(array(						'i'			=> $id,						'mode'		=> $mode,						'rank_id'	=> $rank_id,						'action'	=> 'delete',					)));				}			break;			case 'edit':			case 'add':				$data = $ranks = $existing_imgs = array();								$sql = 'SELECT *					FROM ' . RANKS_TABLE . '					ORDER BY rank_min ASC, rank_special ASC';				$result = $db->sql_query($sql);				while ($row = $db->sql_fetchrow($result))				{					$existing_imgs[] = $row['rank_image'];					if ($action == 'edit' && $rank_id == $row['rank_id'])					{						$ranks = $row;					}				}				$db->sql_freeresult($result);				$imglist = filelist($phpbb_root_path . $config['ranks_path'], '');				$edit_img = $filename_list = '';				foreach ($imglist as $path => $img_ary)				{					sort($img_ary);					foreach ($img_ary as $img)					{						$img = $path . $img;						if ($ranks && $img == $ranks['rank_image'])						{							$selected = ' selected="selected"';							$edit_img = $img;						}						else						{							$selected = '';						}						if (strlen($img) > 255)						{							continue;						}						$filename_list .= '<option value="' . htmlspecialchars($img) . '"' . $selected . '>' . $img . ((in_array($img, $existing_imgs)) ? ' ' . $user->lang['RANK_IMAGE_IN_USE'] : '') . '</option>';					}				}				$filename_list = '<option value=""' . (($edit_img == '') ? ' selected="selected"' : '') . '>----------</option>' . $filename_list;				unset($existing_imgs, $imglist);				$template->assign_vars(array(					'S_EDIT'			=> true,					'U_BACK'			=> $this->u_action,					'RANKS_PATH'		=> $phpbb_root_path . $config['ranks_path'],					'U_ACTION'			=> $this->u_action . '&amp;id=' . $rank_id,					'RANK_TITLE'		=> (isset($ranks['rank_title'])) ? $ranks['rank_title'] : '',					'S_FILENAME_LIST'	=> $filename_list,					'RANK_IMAGE'		=> ($edit_img) ? $phpbb_root_path . $config['ranks_path'] . '/' . $edit_img : $phpbb_admin_path . 'images/spacer.gif',					'S_SPECIAL_RANK'	=> (isset($ranks['rank_special']) && $ranks['rank_special']) ? true : false,					'MIN_POSTS'			=> (isset($ranks['rank_min']) && !$ranks['rank_special']) ? $ranks['rank_min'] : 0)				);										return;			break;		}			$template->assign_vars(array(			'U_ACTION'		=> $this->u_action)		);		$sql = 'SELECT *			FROM ' . RANKS_TABLE . '			ORDER BY rank_special DESC, rank_min ASC, rank_title ASC';		$result = $db->sql_query($sql);		while ($row = $db->sql_fetchrow($result))		{			$template->assign_block_vars('ranks', array(				'S_RANK_IMAGE'		=> ($row['rank_image']) ? true : false,				'S_SPECIAL_RANK'	=> ($row['rank_special']) ? true : false,				'RANK_IMAGE'		=> $phpbb_root_path . $config['ranks_path'] . '/' . $row['rank_image'],				'RANK_TITLE'		=> $row['rank_title'],				'MIN_POSTS'			=> $row['rank_min'],				'U_EDIT'			=> $this->u_action . '&amp;action=edit&amp;id=' . $row['rank_id'],				'U_DELETE'			=> $this->u_action . '&amp;action=delete&amp;id=' . $row['rank_id'])			);			}		$db->sql_freeresult($result);	}}?>
<?php/**** @package phpBB3* @version $Id$* @copyright (c) 2007 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @ignore*/if (!defined('IN_PHPBB')){	exit;}/*** phpBB Hook Class* @package phpBB3*/class phpbb_hook{	/**	* Registered hooks	*/	var $hooks = array();	/**	* Results returned by functions called	*/	var $hook_result = array();	/**	* internal pointer	*/	var $current_hook = NULL;	/**	* Initialize hook class.	*	* @param array $valid_hooks array containing the hookable functions/methods	*/	function phpbb_hook($valid_hooks)	{		foreach ($valid_hooks as $_null => $method)		{			$this->add_hook($method);		}		if (function_exists('phpbb_hook_register'))		{			phpbb_hook_register($this);		}	}	/**	* Register function/method to be called within hook	* This function is normally called by the modification/application to attach/register the functions.	*	* @param mixed $definition Declaring function (with __FUNCTION__) or class with array(__CLASS__, __FUNCTION__)	* @param mixed $hook The replacement function/method to be called. Passing function name or array with object/class definition	* @param string $mode Specify the priority/chain mode. 'normal' -> hook gets appended to the chain. 'standalone' -> only the specified hook gets called - later hooks are not able to overwrite this (E_NOTICE is triggered then). 'first' -> hook is called as the first one within the chain. 'last' -> hook is called as the last one within the chain.	*/	function register($definition, $hook, $mode = 'normal')	{		$class = (!is_array($definition)) ? '__global' : $definition[0];		$function = (!is_array($definition)) ? $definition : $definition[1];		// Method able to be hooked?		if (isset($this->hooks[$class][$function]))		{			switch ($mode)			{				case 'standalone':					if (!isset($this->hooks[$class][$function]['standalone']))					{						$this->hooks[$class][$function] = array('standalone' => $hook);					}					else					{						trigger_error('Hook not able to be called standalone, previous hook already standalone.', E_NOTICE);					}				break;				case 'first':				case 'last':					$this->hooks[$class][$function][$mode][] = $hook;				break;				case 'normal':				default:					$this->hooks[$class][$function]['normal'][] = $hook;				break;			}		}	}	/**	* Calling all functions/methods attached to a specified hook.	* Called by the function allowing hooks...	*	* @param mixed $definition Declaring function (with __FUNCTION__) or class with array(__CLASS__, __FUNCTION__)	* @return bool False if no hook got executed, true otherwise	*/	function call_hook($definition)	{		$class = (!is_array($definition)) ? '__global' : $definition[0];		$function = (!is_array($definition)) ? $definition : $definition[1];		if (!empty($this->hooks[$class][$function]))		{			// Developer tries to call a hooked function within the hooked function...			if ($this->current_hook !== NULL && $this->current_hook['class'] === $class && $this->current_hook['function'] === $function)			{				return false;			}			// Call the hook with the arguments attached and store result			$arguments = func_get_args();			$this->current_hook = array('class' => $class, 'function' => $function);			$arguments[0] = &$this;			// Call the hook chain...			if (isset($this->hooks[$class][$function]['standalone']))			{				$this->hook_result[$class][$function] = call_user_func_array($this->hooks[$class][$function]['standalone'], $arguments);			}			else			{				foreach (array('first', 'normal', 'last') as $mode)				{					if (!isset($this->hooks[$class][$function][$mode]))					{						continue;					}					foreach ($this->hooks[$class][$function][$mode] as $hook)					{						$this->hook_result[$class][$function] = call_user_func_array($hook, $arguments);					}				}			}			$this->current_hook = NULL;			return true;		}		$this->current_hook = NULL;		return false;	}	/**	* Get result from previously called functions/methods for the same hook	*	* @param mixed $definition Declaring function (with __FUNCTION__) or class with array(__CLASS__, __FUNCTION__)	* @return mixed False if nothing returned if there is no result, else array('result' => ... )	*/	function previous_hook_result($definition)	{		$class = (!is_array($definition)) ? '__global' : $definition[0];		$function = (!is_array($definition)) ? $definition : $definition[1];		if (!empty($this->hooks[$class][$function]) && isset($this->hook_result[$class][$function]))		{			return array('result' => $this->hook_result[$class][$function]);		}		return false;	}	/**	* Check if the called functions/methods returned something.	*	* @param mixed $definition Declaring function (with __FUNCTION__) or class with array(__CLASS__, __FUNCTION__)	* @return bool True if results are there, false if not	*/	function hook_return($definition)	{		$class = (!is_array($definition)) ? '__global' : $definition[0];		$function = (!is_array($definition)) ? $definition : $definition[1];		if (!empty($this->hooks[$class][$function]) && isset($this->hook_result[$class][$function]))		{			return true;		}		return false;	}	/**	* Give actual result from called functions/methods back.	*	* @param mixed $definition Declaring function (with __FUNCTION__) or class with array(__CLASS__, __FUNCTION__)	* @return mixed The result	*/	function hook_return_result($definition)	{		$class = (!is_array($definition)) ? '__global' : $definition[0];		$function = (!is_array($definition)) ? $definition : $definition[1];		if (!empty($this->hooks[$class][$function]) && isset($this->hook_result[$class][$function]))		{			$result = $this->hook_result[$class][$function];			unset($this->hook_result[$class][$function]);			return $result;		}		return;	}	/**	* Add new function to the allowed hooks.	*	* @param mixed $definition Declaring function (with __FUNCTION__) or class with array(__CLASS__, __FUNCTION__)	*/	function add_hook($definition)	{		if (!is_array($definition))		{			$definition = array('__global', $definition);		}		$this->hooks[$definition[0]][$definition[1]] = array();	}	/**	* Remove function from the allowed hooks.	*	* @param mixed $definition Declaring function (with __FUNCTION__) or class with array(__CLASS__, __FUNCTION__)	*/	function remove_hook($definition)	{		$class = (!is_array($definition)) ? '__global' : $definition[0];		$function = (!is_array($definition)) ? $definition : $definition[1];		if (isset($this->hooks[$class][$function]))		{			unset($this->hooks[$class][$function]);			if (isset($this->hook_result[$class][$function]))			{				unset($this->hook_result[$class][$function]);			}		}	}}?>
<?php/**** LDAP auth plug-in for phpBB3** Authentication plug-ins is largely down to Sergey Kanareykin, our thanks to him.** @package login* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @ignore*/if (!defined('IN_PHPBB')){	exit;}/*** Connect to ldap server* Only allow changing authentication to ldap if we can connect to the ldap server* Called in acp_board while setting authentication plugins*/function init_ldap(){	global $config, $user;	if (!@extension_loaded('ldap'))	{		return $user->lang['LDAP_NO_LDAP_EXTENSION'];	}	$config['ldap_port'] = (int) $config['ldap_port'];	if ($config['ldap_port'])	{		$ldap = @ldap_connect($config['ldap_server'], $config['ldap_port']);	}	else	{		$ldap = @ldap_connect($config['ldap_server']);	}	if (!$ldap)	{		return $user->lang['LDAP_NO_SERVER_CONNECTION'];	}	@ldap_set_option($ldap, LDAP_OPT_PROTOCOL_VERSION, 3);	@ldap_set_option($ldap, LDAP_OPT_REFERRALS, 0);	if ($config['ldap_user'] || $config['ldap_password'])	{		if (!@ldap_bind($ldap, htmlspecialchars_decode($config['ldap_user']), htmlspecialchars_decode($config['ldap_password'])))		{			return $user->lang['LDAP_INCORRECT_USER_PASSWORD'];		}	}	// ldap_connect only checks whether the specified server is valid, so the connection might still fail	$search = @ldap_search(		$ldap,		htmlspecialchars_decode($config['ldap_base_dn']),		ldap_user_filter($user->data['username']),		(empty($config['ldap_email'])) ?			array(htmlspecialchars_decode($config['ldap_uid'])) :			array(htmlspecialchars_decode($config['ldap_uid']), htmlspecialchars_decode($config['ldap_email'])),		0,		1	);	if ($search === false)	{		return $user->lang['LDAP_SEARCH_FAILED'];	}	$result = @ldap_get_entries($ldap, $search);	@ldap_close($ldap);	if (!is_array($result) || sizeof($result) < 2)	{		return sprintf($user->lang['LDAP_NO_IDENTITY'], $user->data['username']);	}	if (!empty($config['ldap_email']) && !isset($result[0][htmlspecialchars_decode($config['ldap_email'])]))	{		return $user->lang['LDAP_NO_EMAIL'];	}	return false;}/*** Login function*/function login_ldap(&$username, &$password){	global $db, $config, $user;	// do not allow empty password	if (!$password)	{		return array(			'status'	=> LOGIN_ERROR_PASSWORD,			'error_msg'	=> 'NO_PASSWORD_SUPPLIED',			'user_row'	=> array('user_id' => ANONYMOUS),		);	}	if (!$username)	{		return array(			'status'	=> LOGIN_ERROR_USERNAME,			'error_msg'	=> 'LOGIN_ERROR_USERNAME',			'user_row'	=> array('user_id' => ANONYMOUS),		);	}	if (!@extension_loaded('ldap'))	{		return array(			'status'		=> LOGIN_ERROR_EXTERNAL_AUTH,			'error_msg'		=> 'LDAP_NO_LDAP_EXTENSION',			'user_row'		=> array('user_id' => ANONYMOUS),		);	}	$config['ldap_port'] = (int) $config['ldap_port'];	if ($config['ldap_port'])	{		$ldap = @ldap_connect($config['ldap_server'], $config['ldap_port']);	}	else	{		$ldap = @ldap_connect($config['ldap_server']);	}	if (!$ldap)	{		return array(			'status'		=> LOGIN_ERROR_EXTERNAL_AUTH,			'error_msg'		=> 'LDAP_NO_SERVER_CONNECTION',			'user_row'		=> array('user_id' => ANONYMOUS),		);	}	@ldap_set_option($ldap, LDAP_OPT_PROTOCOL_VERSION, 3);	@ldap_set_option($ldap, LDAP_OPT_REFERRALS, 0);	if ($config['ldap_user'] || $config['ldap_password'])	{		if (!@ldap_bind($ldap, htmlspecialchars_decode($config['ldap_user']), htmlspecialchars_decode($config['ldap_password'])))		{			return $user->lang['LDAP_NO_SERVER_CONNECTION'];		}	}	$search = @ldap_search(		$ldap,		htmlspecialchars_decode($config['ldap_base_dn']),		ldap_user_filter($username),		(empty($config['ldap_email'])) ?			array(htmlspecialchars_decode($config['ldap_uid'])) :			array(htmlspecialchars_decode($config['ldap_uid']), htmlspecialchars_decode($config['ldap_email'])),		0,		1	);	$ldap_result = @ldap_get_entries($ldap, $search);	if (is_array($ldap_result) && sizeof($ldap_result) > 1)	{		if (@ldap_bind($ldap, $ldap_result[0]['dn'], htmlspecialchars_decode($password)))		{			@ldap_close($ldap);			$sql ='SELECT user_id, username, user_password, user_passchg, user_email, user_type				FROM ' . USERS_TABLE . "				WHERE username_clean = '" . $db->sql_escape(utf8_clean_string($username)) . "'";			$result = $db->sql_query($sql);			$row = $db->sql_fetchrow($result);			$db->sql_freeresult($result);			if ($row)			{				unset($ldap_result);				// User inactive...				if ($row['user_type'] == USER_INACTIVE || $row['user_type'] == USER_IGNORE)				{					return array(						'status'		=> LOGIN_ERROR_ACTIVE,						'error_msg'		=> 'ACTIVE_ERROR',						'user_row'		=> $row,					);				}				// Successful login... set user_login_attempts to zero...				return array(					'status'		=> LOGIN_SUCCESS,					'error_msg'		=> false,					'user_row'		=> $row,				);			}			else			{				// retrieve default group id				$sql = 'SELECT group_id					FROM ' . GROUPS_TABLE . "					WHERE group_name = '" . $db->sql_escape('REGISTERED') . "'						AND group_type = " . GROUP_SPECIAL;				$result = $db->sql_query($sql);				$row = $db->sql_fetchrow($result);				$db->sql_freeresult($result);				if (!$row)				{					trigger_error('NO_GROUP');				}				// generate user account data				$ldap_user_row = array(					'username'		=> $username,					'user_password'	=> phpbb_hash($password),					'user_email'	=> (!empty($config['ldap_email'])) ? utf8_htmlspecialchars($ldap_result[0][htmlspecialchars_decode($config['ldap_email'])][0]) : '',					'group_id'		=> (int) $row['group_id'],					'user_type'		=> USER_NORMAL,					'user_ip'		=> $user->ip,					'user_new'		=> ($config['new_member_post_limit']) ? 1 : 0,				);				unset($ldap_result);				// this is the user's first login so create an empty profile				return array(					'status'		=> LOGIN_SUCCESS_CREATE_PROFILE,					'error_msg'		=> false,					'user_row'		=> $ldap_user_row,				);			}		}		else		{			unset($ldap_result);			@ldap_close($ldap);			// Give status about wrong password...			return array(				'status'		=> LOGIN_ERROR_PASSWORD,				'error_msg'		=> 'LOGIN_ERROR_PASSWORD',				'user_row'		=> array('user_id' => ANONYMOUS),			);		}	}	@ldap_close($ldap);	return array(		'status'	=> LOGIN_ERROR_USERNAME,		'error_msg'	=> 'LOGIN_ERROR_USERNAME',		'user_row'	=> array('user_id' => ANONYMOUS),	);}/*** Generates a filter string for ldap_search to find a user** @param	$username	string	Username identifying the searched user** @return				string	A filter string for ldap_search*/function ldap_user_filter($username){	global $config;	$filter = '(' . $config['ldap_uid'] . '=' . ldap_escape(htmlspecialchars_decode($username)) . ')';	if ($config['ldap_user_filter'])	{		$_filter = ($config['ldap_user_filter'][0] == '(' && substr($config['ldap_user_filter'], -1) == ')') ? $config['ldap_user_filter'] : "({$config['ldap_user_filter']})";		$filter = "(&{$filter}{$_filter})";	}	return $filter;}/*** Escapes an LDAP AttributeValue*/function ldap_escape($string){	return str_replace(array('*', '\\', '(', ')'), array('\\*', '\\\\', '\\(', '\\)'), $string);}/*** This function is used to output any required fields in the authentication* admin panel. It also defines any required configuration table fields.*/function acp_ldap(&$new){	global $user;	$tpl = '	<dl>		<dt><label for="ldap_server">' . $user->lang['LDAP_SERVER'] . ':</label><br /><span>' . $user->lang['LDAP_SERVER_EXPLAIN'] . '</span></dt>		<dd><input type="text" id="ldap_server" size="40" name="config[ldap_server]" value="' . $new['ldap_server'] . '" /></dd>	</dl>	<dl>		<dt><label for="ldap_port">' . $user->lang['LDAP_PORT'] . ':</label><br /><span>' . $user->lang['LDAP_PORT_EXPLAIN'] . '</span></dt>		<dd><input type="text" id="ldap_port" size="40" name="config[ldap_port]" value="' . $new['ldap_port'] . '" /></dd>	</dl>	<dl>		<dt><label for="ldap_dn">' . $user->lang['LDAP_DN'] . ':</label><br /><span>' . $user->lang['LDAP_DN_EXPLAIN'] . '</span></dt>		<dd><input type="text" id="ldap_dn" size="40" name="config[ldap_base_dn]" value="' . $new['ldap_base_dn'] . '" /></dd>	</dl>	<dl>		<dt><label for="ldap_uid">' . $user->lang['LDAP_UID'] . ':</label><br /><span>' . $user->lang['LDAP_UID_EXPLAIN'] . '</span></dt>		<dd><input type="text" id="ldap_uid" size="40" name="config[ldap_uid]" value="' . $new['ldap_uid'] . '" /></dd>	</dl>	<dl>		<dt><label for="ldap_user_filter">' . $user->lang['LDAP_USER_FILTER'] . ':</label><br /><span>' . $user->lang['LDAP_USER_FILTER_EXPLAIN'] . '</span></dt>		<dd><input type="text" id="ldap_user_filter" size="40" name="config[ldap_user_filter]" value="' . $new['ldap_user_filter'] . '" /></dd>	</dl>	<dl>		<dt><label for="ldap_email">' . $user->lang['LDAP_EMAIL'] . ':</label><br /><span>' . $user->lang['LDAP_EMAIL_EXPLAIN'] . '</span></dt>		<dd><input type="text" id="ldap_email" size="40" name="config[ldap_email]" value="' . $new['ldap_email'] . '" /></dd>	</dl>	<dl>		<dt><label for="ldap_user">' . $user->lang['LDAP_USER'] . ':</label><br /><span>' . $user->lang['LDAP_USER_EXPLAIN'] . '</span></dt>		<dd><input type="text" id="ldap_user" size="40" name="config[ldap_user]" value="' . $new['ldap_user'] . '" /></dd>	</dl>	<dl>		<dt><label for="ldap_password">' . $user->lang['LDAP_PASSWORD'] . ':</label><br /><span>' . $user->lang['LDAP_PASSWORD_EXPLAIN'] . '</span></dt>		<dd><input type="password" id="ldap_password" size="40" name="config[ldap_password]" value="' . $new['ldap_password'] . '" autocomplete="off" /></dd>	</dl>	';	// These are fields required in the config table	return array(		'tpl'		=> $tpl,		'config'	=> array('ldap_server', 'ldap_port', 'ldap_base_dn', 'ldap_uid', 'ldap_user_filter', 'ldap_email', 'ldap_user', 'ldap_password')	);}?>
<?php/**** @package acp* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @package module_install*/class acp_icons_info{	function module()	{		return array(			'filename'	=> 'acp_icons',			'title'		=> 'ACP_ICONS_SMILIES',			'version'	=> '1.0.0',			'modes'		=> array(				'icons'		=> array('title' => 'ACP_ICONS', 'auth' => 'acl_a_icons', 'cat' => array('ACP_MESSAGES')),				'smilies'	=> array('title' => 'ACP_SMILIES', 'auth' => 'acl_a_icons', 'cat' => array('ACP_MESSAGES')),			),		);	}	function install()	{	}	function uninstall()	{	}}?>
<?php/**** recaptcha [English]** @package language* @version $Id$* @copyright (c) 2009 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** DO NOT CHANGE*/if (!defined('IN_PHPBB')){	exit;}if (empty($lang) || !is_array($lang)){	$lang = array();}// DEVELOPERS PLEASE NOTE//// All language files should use UTF-8 as their encoding and the files must not contain a BOM.//// Placeholders can now contain order information, e.g. instead of// 'Page %s of %s' you can (and should) write 'Page %1$s of %2$s', this allows// translators to re-order the output of data while ensuring it remains correct//// You do not need this where single placeholders are used, e.g. 'Message %d' is fine// equally where a string contains only two placeholders which are used to wrap text// in a url you again do not need to specify an order e.g., 'Click %sHERE%s' is fine$lang = array_merge($lang, array(	'RECAPTCHA_LANG'				=> 'en',	'RECAPTCHA_NOT_AVAILABLE'		=> 'In order to use reCaptcha, you must create an account on <a href="http://www.google.com/recaptcha">www.google.com/recaptcha</a>.',	'CAPTCHA_RECAPTCHA'				=> 'reCaptcha',	'RECAPTCHA_INCORRECT'			=> 'The visual confirmation code you submitted was incorrect',	'RECAPTCHA_PUBLIC'				=> 'Public reCaptcha key',	'RECAPTCHA_PUBLIC_EXPLAIN'		=> 'Your public reCaptcha key. Keys can be obtained on <a href="http://www.google.com/recaptcha">www.google.com/recaptcha</a>.',	'RECAPTCHA_PRIVATE'				=> 'Private reCaptcha key',	'RECAPTCHA_PRIVATE_EXPLAIN'		=> 'Your private reCaptcha key. Keys can be obtained on <a href="http://www.google.com/recaptcha">www.google.com/recaptcha</a>.',	'RECAPTCHA_EXPLAIN'				=> 'In an effort to prevent automatic submissions, we require that you enter both of the words displayed into the text field underneath.',));?>
<?php/**** @package acp* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @package module_install*/class acp_modules_info{	function module()	{		return array(			'filename'	=> 'acp_modules',			'title'		=> 'ACP_MODULE_MANAGEMENT',			'version'	=> '1.0.0',			'modes'		=> array(				'acp'		=> array('title' => 'ACP', 'auth' => 'acl_a_modules', 'cat' => array('ACP_MODULE_MANAGEMENT')),				'ucp'		=> array('title' => 'UCP', 'auth' => 'acl_a_modules', 'cat' => array('ACP_MODULE_MANAGEMENT')),				'mcp'		=> array('title' => 'MCP', 'auth' => 'acl_a_modules', 'cat' => array('ACP_MODULE_MANAGEMENT')),			),		);	}	function install()	{	}	function uninstall()	{	}}?>
<?php/**** @package ucp* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @package module_install*/class ucp_groups_info{	function module()	{		return array(			'filename'	=> 'ucp_groups',			'title'		=> 'UCP_USERGROUPS',			'version'	=> '1.0.0',			'modes'		=> array(				'membership'	=> array('title' => 'UCP_USERGROUPS_MEMBER', 'auth' => '', 'cat' => array('UCP_USERGROUPS')),				'manage'		=> array('title' => 'UCP_USERGROUPS_MANAGE', 'auth' => '', 'cat' => array('UCP_USERGROUPS')),			),		);	}	function install()	{	}	function uninstall()	{	}}?>
<?php/**** @package install* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//***/if ( !defined('IN_INSTALL') ){	// Someone has tried to access the file direct. This is not a good idea, so exit	exit;}if (!empty($setmodules)){	$module[] = array(		'module_type'		=> 'install',		'module_title'		=> 'OVERVIEW',		'module_filename'	=> substr(basename(__FILE__), 0, -strlen($phpEx)-1),		'module_order'		=> 0,		'module_subs'		=> array('INTRO', 'LICENSE', 'SUPPORT'),		'module_stages'		=> '',		'module_reqs'		=> ''	);}/*** Main Tab - Installation* @package install*/class install_main extends module{	function install_main(&$p_master)	{		$this->p_master = &$p_master;	}	function main($mode, $sub)	{		global $lang, $template, $language;		switch ($sub)		{			case 'intro' :				$title = $lang['SUB_INTRO'];				$body = $lang['OVERVIEW_BODY'];			break;			case 'license' :				$title = $lang['GPL'];				$body = implode("<br/>\n", file('../docs/COPYING'));			break;			case 'support' :				$title = $lang['SUB_SUPPORT'];				$body = $lang['SUPPORT_BODY'];			break;		}		$this->tpl_name = 'install_main';		$this->page_title = $title;		$template->assign_vars(array(			'TITLE'		=> $title,			'BODY'		=> $body,			'S_LANG_SELECT'	=> '<select id="language" name="language">' . $this->p_master->inst_language_select($language) . '</select>',		));	}}?>
<?php/**** help_bbcode [English]** @package language* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//***/if (!defined('IN_PHPBB')){	exit;}// DEVELOPERS PLEASE NOTE//// All language files should use UTF-8 as their encoding and the files must not contain a BOM.//// Placeholders can now contain order information, e.g. instead of// 'Page %s of %s' you can (and should) write 'Page %1$s of %2$s', this allows// translators to re-order the output of data while ensuring it remains correct//// You do not need this where single placeholders are used, e.g. 'Message %d' is fine// equally where a string contains only two placeholders which are used to wrap text// in a url you again do not need to specify an order e.g., 'Click %sHERE%s' is fine$help = array(	array(		0 => '--',		1 => 'Introduction'	),	array(		0 => 'What is BBCode?',		1 => 'BBCode is a special implementation of HTML. Whether you can actually use BBCode in your posts on the forum is determined by the administrator. In addition you can disable BBCode on a per post basis via the posting form. BBCode itself is similar in style to HTML, tags are enclosed in square brackets [ and ] rather than &lt; and &gt; and it offers greater control over what and how something is displayed. Depending on the template you are using you may find adding BBCode to your posts is made much easier through a clickable interface above the message area on the posting form. Even with this you may find the following guide useful.'	),	array(		0 => '--',		1 => 'Text Formatting'	),	array(		0 => 'How to create bold, italic and underlined text',		1 => 'BBCode includes tags to allow you to quickly change the basic style of your text. This is achieved in the following ways: <ul><li>To make a piece of text bold enclose it in <strong>[b][/b]</strong>, e.g. <br /><br /><strong>[b]</strong>Hello<strong>[/b]</strong><br /><br />will become <strong>Hello</strong></li><li>For underlining use <strong>[u][/u]</strong>, for example:<br /><br /><strong>[u]</strong>Good Morning<strong>[/u]</strong><br /><br />becomes <span style="text-decoration: underline">Good Morning</span></li><li>To italicise text use <strong>[i][/i]</strong>, e.g.<br /><br />This is <strong>[i]</strong>Great!<strong>[/i]</strong><br /><br />would give This is <i>Great!</i></li></ul>'	),	array(		0 => 'How to change the text colour or size',		1 => 'To alter the colour or size of your text the following tags can be used. Keep in mind that how the output appears will depend on the viewers browser and system: <ul><li>Changing the colour of text is achieved by wrapping it in <strong>[color=][/color]</strong>. You can specify either a recognised colour name (eg. red, blue, yellow, etc.) or the hexadecimal triplet alternative, e.g. #FFFFFF, #000000. For example, to create red text you could use:<br /><br /><strong>[color=red]</strong>Hello!<strong>[/color]</strong><br /><br />or<br /><br /><strong>[color=#FF0000]</strong>Hello!<strong>[/color]</strong><br /><br />Both will output <span style="color:red">Hello!</span></li><li>Changing the text size is achieved in a similar way using <strong>[size=][/size]</strong>. This tag is dependent on the template the user has selected but the recommended format is a numerical value representing the text size in percent, starting at 20 (very small) through to 200 (very large) by default. For example:<br /><br /><strong>[size=30]</strong>SMALL<strong>[/size]</strong><br /><br />will generally be <span style="font-size:30%;">SMALL</span><br /><br />whereas:<br /><br /><strong>[size=200]</strong>HUGE!<strong>[/size]</strong><br /><br />will be <span style="font-size:200%;">HUGE!</span></li></ul>'	),	array(		0 => 'Can I combine formatting tags?',		1 => 'Yes, of course you can, for example to get someones attention you may write:<br /><br /><strong>[size=200][color=red][b]</strong>LOOK AT ME!<strong>[/b][/color][/size]</strong><br /><br />this would output <span style="color:red;font-size:200%;"><strong>LOOK AT ME!</strong></span><br /><br />We dont recommend you output lots of text that looks like this though! Remember it is up to you, the poster, to ensure tags are closed correctly. For example the following is incorrect:<br /><br /><strong>[b][u]</strong>This is wrong<strong>[/b][/u]</strong>'	),	array(		0 => '--',		1 => 'Quoting and outputting fixed-width text'	),	array(		0 => 'Quoting text in replies',		1 => 'There are two ways you can quote text, with a reference or without.<ul><li>When you utilise the Quote function to reply to a post on the board you should notice that the post text is added to the message window enclosed in a <strong>[quote=&quot;&quot;][/quote]</strong> block. This method allows you to quote with a reference to a person or whatever else you choose to put! For example to quote a piece of text Mr. Blobby wrote you would enter:<br /><br /><strong>[quote=&quot;Mr. Blobby&quot;]</strong>The text Mr. Blobby wrote would go here<strong>[/quote]</strong><br /><br />The resulting output will automatically add &quot;Mr. Blobby wrote:&quot; before the actual text. Remember you <strong>must</strong> include the quotation marks &quot;&quot; around the name you are quoting, they are not optional.</li><li>The second method allows you to blindly quote something. To utilise this enclose the text in <strong>[quote][/quote]</strong> tags. When you view the message it will simply show the text within a quotation block.</li></ul>'	),	array(		0 => 'Outputting code or fixed width data',		1 => 'If you want to output a piece of code or in fact anything that requires a fixed width, e.g. Courier type font you should enclose the text in <strong>[code][/code]</strong> tags, e.g.<br /><br /><strong>[code]</strong>echo &quot;This is some code&quot;;<strong>[/code]</strong><br /><br />All formatting used within <strong>[code][/code]</strong> tags is retained when you later view it. PHP syntax highlighting can be enabled using <strong>[code=php][/code]</strong> and is recommended when posting PHP code samples as it improves readability.'	),	array(		0 => '--',		1 => 'Generating lists'	),	array(		0 => 'Creating an Unordered list',		1 => 'BBCode supports two types of lists, unordered and ordered. They are essentially the same as their HTML equivalents. An unordered list outputs each item in your list sequentially one after the other indenting each with a bullet character. To create an unordered list you use <strong>[list][/list]</strong> and define each item within the list using <strong>[*]</strong>. For example to list your favourite colours you could use:<br /><br /><strong>[list]</strong><br /><strong>[*]</strong>Red<br /><strong>[*]</strong>Blue<br /><strong>[*]</strong>Yellow<br /><strong>[/list]</strong><br /><br />This would generate the following list:<ul><li>Red</li><li>Blue</li><li>Yellow</li></ul>'	),	array(		0 => 'Creating an Ordered list',		1 => 'The second type of list, an ordered list, gives you control over what is output before each item. To create an ordered list you use <strong>[list=1][/list]</strong> to create a numbered list or alternatively <strong>[list=a][/list]</strong> for an alphabetical list. As with the unordered list, items are specified using <strong>[*]</strong>. For example:<br /><br /><strong>[list=1]</strong><br /><strong>[*]</strong>Go to the shops<br /><strong>[*]</strong>Buy a new computer<br /><strong>[*]</strong>Swear at computer when it crashes<br /><strong>[/list]</strong><br /><br />will generate the following:<ol style="list-style-type: decimal;"><li>Go to the shops</li><li>Buy a new computer</li><li>Swear at computer when it crashes</li></ol>Whereas for an alphabetical list you would use:<br /><br /><strong>[list=a]</strong><br /><strong>[*]</strong>The first possible answer<br /><strong>[*]</strong>The second possible answer<br /><strong>[*]</strong>The third possible answer<br /><strong>[/list]</strong><br /><br />giving<ol style="list-style-type: lower-alpha"><li>The first possible answer</li><li>The second possible answer</li><li>The third possible answer</li></ol>'	),	// This block will switch the FAQ-Questions to the second template column	array(		0 => '--',		1 => '--'	),	array(		0 => '--',		1 => 'Creating Links'	),	array(		0 => 'Linking to another site',		1 => 'phpBB BBCode supports a number of ways of creating URIs (Uniform Resource Indicators) better known as URLs.<ul><li>The first of these uses the <strong>[url=][/url]</strong> tag, whatever you type after the = sign will cause the contents of that tag to act as a URL. For example to link to phpBB.com you could use:<br /><br /><strong>[url=http://www.phpbb.com/]</strong>Visit phpBB!<strong>[/url]</strong><br /><br />This would generate the following link, <a href="http://www.phpbb.com/">Visit phpBB!</a> Please notice that the link opens in the same window or a new window depending on the users browser preferences.</li><li>If you want the URL itself displayed as the link you can do this by simply using:<br /><br /><strong>[url]</strong>http://www.phpbb.com/<strong>[/url]</strong><br /><br />This would generate the following link, <a href="http://www.phpbb.com/">http://www.phpbb.com/</a></li><li>Additionally, phpBB features something called <i>Magic Links</i>, this will turn any syntactically correct URL into a link without you needing to specify any tags or even the leading http://. For example typing www.phpbb.com into your message will automatically lead to <a href="http://www.phpbb.com/">www.phpbb.com</a> being output when you view the message.</li><li>The same thing applies equally to e-mail addresses, you can either specify an address explicitly for example:<br /><br /><strong>[email]</strong>no.one@domain.adr<strong>[/email]</strong><br /><br />which will output <a href="mailto:no.one@domain.adr">no.one@domain.adr</a> or you can just type no.one@domain.adr into your message and it will be automatically converted when you view.</li></ul>As with all the BBCode tags you can wrap URLs around any of the other tags such as <strong>[img][/img]</strong> (see next entry), <strong>[b][/b]</strong>, etc. As with the formatting tags it is up to you to ensure the correct open and close order is following, for example:<br /><br /><strong>[url=http://www.google.com/][img]</strong>http://www.google.com/intl/en_ALL/images/logo.gif<strong>[/url][/img]</strong><br /><br />is <span style="text-decoration: underline">not</span> correct which may lead to your post being deleted so take care.'	),	array(		0 => '--',		1 => 'Showing images in posts'	),	array(		0 => 'Adding an image to a post',		1 => 'phpBB BBCode incorporates a tag for including images in your posts. Two very important things to remember when using this tag are: many users do not appreciate lots of images being shown in posts and secondly the image you display must already be available on the internet (it cannot exist only on your computer for example, unless you run a webserver!). To display an image you must surround the URL pointing to the image with <strong>[img][/img]</strong> tags. For example:<br /><br /><strong>[img]</strong>http://www.google.com/intl/en_ALL/images/logo.gif<strong>[/img]</strong><br /><br />As noted in the URL section above you can wrap an image in a <strong>[url][/url]</strong> tag if you wish, e.g.<br /><br /><strong>[url=http://www.google.com/][img]</strong>http://www.google.com/intl/en_ALL/images/logo.gif<strong>[/img][/url]</strong><br /><br />would generate:<br /><br /><a href="http://www.google.com/"><img src="http://www.google.com/intl/en_ALL/images/logo.gif" alt="" /></a>'	),	array(		0 => 'Adding attachments into a post',		1 => 'Attachments can now be placed in any part of a post by using the new <strong>[attachment=][/attachment]</strong> BBCode, if the attachments functionality has been enabled by a board administrator and if you are given the appropriate permissions to create attachments. Within the posting screen is a drop-down box (respectively a button) for placing attachments inline.'	),	array(		0 => '--',		1 => 'Other matters'	),	array(		0 => 'Can I add my own tags?',		1 => 'If you are an administrator on this board and have the proper permissions, you can add further BBCodes through the Custom BBCodes section.'	));?>
<?php/**** @package install* @version $Id$* @copyright (c) 2007 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @ignore*/if (!defined('IN_PHPBB')){	exit;}/*** A wrapper function for the normalizer which takes care of including the class if required and modifies the passed strings* to be in NFC (Normalization Form Composition).** @param	mixed	$strings	a string or an array of strings to normalize* @return	mixed				the normalized content, preserving array keys if array given.*/function utf8_new_normalize_nfc($strings){	if (empty($strings))	{		return $strings;	}	if (!is_array($strings))	{		utf_new_normalizer::nfc($strings);	}	else if (is_array($strings))	{		foreach ($strings as $key => $string)		{			if (is_array($string))			{				foreach ($string as $_key => $_string)				{					utf_new_normalizer::nfc($strings[$key][$_key]);				}			}			else			{				utf_new_normalizer::nfc($strings[$key]);			}		}	}	return $strings;}class utf_new_normalizer{	/**	* Validate, cleanup and normalize a string	*	* The ultimate convenience function! Clean up invalid UTF-8 sequences,	* and convert to Normal Form C, canonical composition.	*	* @param	string	&$str	The dirty string	* @return	string			The same string, all shiny and cleaned-up	*/	function cleanup(&$str)	{		// The string below is the list of all autorized characters, sorted by frequency in latin text		$pos = strspn($str, "\x20\x65\x69\x61\x73\x6E\x74\x72\x6F\x6C\x75\x64\x5D\x5B\x63\x6D\x70\x27\x0A\x67\x7C\x68\x76\x2E\x66\x62\x2C\x3A\x3D\x2D\x71\x31\x30\x43\x32\x2A\x79\x78\x29\x28\x4C\x39\x41\x53\x2F\x50\x22\x45\x6A\x4D\x49\x6B\x33\x3E\x35\x54\x3C\x44\x34\x7D\x42\x7B\x38\x46\x77\x52\x36\x37\x55\x47\x4E\x3B\x4A\x7A\x56\x23\x48\x4F\x57\x5F\x26\x21\x4B\x3F\x58\x51\x25\x59\x5C\x09\x5A\x2B\x7E\x5E\x24\x40\x60\x7F\x0D");		$len = strlen($str);		if ($pos == $len)		{			// ASCII strings with no special chars return immediately			return;		}		// Note: we do not check for $GLOBALS['utf_canonical_decomp']. It is assumed they are always loaded together		if (!isset($GLOBALS['utf_nfc_qc']))		{			global $phpbb_root_path, $phpEx;			include($phpbb_root_path . 'includes/utf/data/utf_nfc_qc.' . $phpEx);		}		if (!isset($GLOBALS['utf_canonical_decomp']))		{			global $phpbb_root_path, $phpEx;			include($phpbb_root_path . 'includes/utf/data/utf_canonical_decomp.' . $phpEx);		}		// Replace any byte in the range 0x00..0x1F, except for \r, \n and \t		// We replace those characters with a 0xFF byte, which is illegal in UTF-8 and will in turn be replaced with a UTF replacement char		$str = strtr(			$str,			"\x00\x01\x02\x03\x04\x05\x06\x07\x08\x0B\x0C\x0E\x0F\x10\x11\x12\x13\x14\x15\x16\x17\x18\x19\x1A\x1B\x1C\x1D\x1E\x1F",			"\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF"		);		$str = utf_new_normalizer::recompose($str, $pos, $len, $GLOBALS['utf_nfc_qc'], $GLOBALS['utf_canonical_decomp']);	}	/**	* Validate and normalize a UTF string to NFC	*	* @param	string	&$str	Unchecked UTF string	* @return	string			The string, validated and in normal form	*/	function nfc(&$str)	{		$pos = strspn($str, UTF8_ASCII_RANGE);		$len = strlen($str);		if ($pos == $len)		{			// ASCII strings return immediately			return;		}		if (!isset($GLOBALS['utf_nfc_qc']))		{			global $phpbb_root_path, $phpEx;			include($phpbb_root_path . 'includes/utf/data/utf_nfc_qc.' . $phpEx);		}		if (!isset($GLOBALS['utf_canonical_decomp']))		{			global $phpbb_root_path, $phpEx;			include($phpbb_root_path . 'includes/utf/data/utf_canonical_decomp.' . $phpEx);		}		$str = utf_new_normalizer::recompose($str, $pos, $len, $GLOBALS['utf_nfc_qc'], $GLOBALS['utf_canonical_decomp']);	}	/**	* Validate and normalize a UTF string to NFKC	*	* @param	string	&$str	Unchecked UTF string	* @return	string			The string, validated and in normal form	*/	function nfkc(&$str)	{		$pos = strspn($str, UTF8_ASCII_RANGE);		$len = strlen($str);		if ($pos == $len)		{			// ASCII strings return immediately			return;		}		if (!isset($GLOBALS['utf_nfkc_qc']))		{			global $phpbb_root_path, $phpEx;			include($phpbb_root_path . 'includes/utf/data/utf_nfkc_qc.' . $phpEx);		}		if (!isset($GLOBALS['utf_compatibility_decomp']))		{			global $phpbb_root_path, $phpEx;			include($phpbb_root_path . 'includes/utf/data/utf_compatibility_decomp.' . $phpEx);		}		$str = utf_new_normalizer::recompose($str, $pos, $len, $GLOBALS['utf_nfkc_qc'], $GLOBALS['utf_compatibility_decomp']);	}	/**	* Recompose a UTF string	*	* @param	string	$str			Unchecked UTF string	* @param	integer	$pos			Position of the first UTF char (in bytes)	* @param	integer	$len			Length of the string (in bytes)	* @param	array	&$qc			Quick-check array, passed by reference but never modified	* @param	array	&$decomp_map	Decomposition mapping, passed by reference but never modified	* @return	string					The string, validated and recomposed	*	* @access	private	*/	function recompose($str, $pos, $len, &$qc, &$decomp_map)	{		global $utf_canonical_comp;		// Load the canonical composition table		if (!isset($utf_canonical_comp))		{			global $phpbb_root_path, $phpEx;			include($phpbb_root_path . 'includes/utf/data/utf_canonical_comp.' . $phpEx);		}		return utf_normalizer::recompose($str, $pos, $len, $qc, $decomp_map);	}}?>
<?php return array(''=>'');
<?php/**** @package acp* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @package module_install*/class acp_update_info{	function module()	{		return array(			'filename'	=> 'acp_update',			'title'		=> 'ACP_UPDATE',			'version'	=> '1.0.0',			'modes'		=> array(				'version_check'		=> array('title' => 'ACP_VERSION_CHECK', 'auth' => 'acl_a_board', 'cat' => array('ACP_AUTOMATION')),			),		);	}	function install()	{	}	function uninstall()	{	}}?>
<?php/**** @package ucp* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @ignore*/if (!defined('IN_PHPBB')){	exit;}/*** ucp_profile* Changing profile settings** @todo what about pertaining user_sig_options?* @package ucp*/class ucp_profile{	var $u_action;	function main($id, $mode)	{		global $config, $db, $user, $auth, $template, $phpbb_root_path, $phpEx;		$user->add_lang('posting');		$preview	= (!empty($_POST['preview'])) ? true : false;		$submit		= (!empty($_POST['submit'])) ? true : false;		$delete		= (!empty($_POST['delete'])) ? true : false;		$error = $data = array();		$s_hidden_fields = '';		switch ($mode)		{			case 'reg_details':				$data = array(					'username'			=> utf8_normalize_nfc(request_var('username', $user->data['username'], true)),					'email'				=> strtolower(request_var('email', $user->data['user_email'])),					'email_confirm'		=> strtolower(request_var('email_confirm', '')),					'new_password'		=> request_var('new_password', '', true),					'cur_password'		=> request_var('cur_password', '', true),					'password_confirm'	=> request_var('password_confirm', '', true),				);				add_form_key('ucp_reg_details');				if ($submit)				{					// Do not check cur_password, it is the old one.					$check_ary = array(						'new_password'		=> array(							array('string', true, $config['min_pass_chars'], $config['max_pass_chars']),							array('password')),						'password_confirm'	=> array('string', true, $config['min_pass_chars'], $config['max_pass_chars']),						'email'				=> array(							array('string', false, 6, 60),							array('email')),						'email_confirm'		=> array('string', true, 6, 60),					);					if ($auth->acl_get('u_chgname') && $config['allow_namechange'])					{						$check_ary['username'] = array(							array('string', false, $config['min_name_chars'], $config['max_name_chars']),							array('username'),						);					}					$error = validate_data($data, $check_ary);					if ($auth->acl_get('u_chgemail') && $data['email'] != $user->data['user_email'] && $data['email_confirm'] != $data['email'])					{						$error[] = ($data['email_confirm']) ? 'NEW_EMAIL_ERROR' : 'NEW_EMAIL_CONFIRM_EMPTY';					}					if ($auth->acl_get('u_chgpasswd') && $data['new_password'] && $data['password_confirm'] != $data['new_password'])					{						$error[] = ($data['password_confirm']) ? 'NEW_PASSWORD_ERROR' : 'NEW_PASSWORD_CONFIRM_EMPTY';					}					// Only check the new password against the previous password if there have been no errors					if (!sizeof($error) && $auth->acl_get('u_chgpasswd') && $data['new_password'] && phpbb_check_hash($data['new_password'], $user->data['user_password']))					{						$error[] = 'SAME_PASSWORD_ERROR';					}					if (!phpbb_check_hash($data['cur_password'], $user->data['user_password']))					{						$error[] = ($data['cur_password']) ? 'CUR_PASSWORD_ERROR' : 'CUR_PASSWORD_EMPTY';					}					if (!check_form_key('ucp_reg_details'))					{						$error[] = 'FORM_INVALID';					}					if (!sizeof($error))					{						$sql_ary = array(							'username'			=> ($auth->acl_get('u_chgname') && $config['allow_namechange']) ? $data['username'] : $user->data['username'],							'username_clean'	=> ($auth->acl_get('u_chgname') && $config['allow_namechange']) ? utf8_clean_string($data['username']) : $user->data['username_clean'],							'user_email'		=> ($auth->acl_get('u_chgemail')) ? $data['email'] : $user->data['user_email'],							'user_email_hash'	=> ($auth->acl_get('u_chgemail')) ? phpbb_email_hash($data['email']) : $user->data['user_email_hash'],							'user_password'		=> ($auth->acl_get('u_chgpasswd') && $data['new_password']) ? phpbb_hash($data['new_password']) : $user->data['user_password'],							'user_passchg'		=> ($auth->acl_get('u_chgpasswd') && $data['new_password']) ? time() : 0,						);						if ($auth->acl_get('u_chgname') && $config['allow_namechange'] && $data['username'] != $user->data['username'])						{							add_log('user', $user->data['user_id'], 'LOG_USER_UPDATE_NAME', $user->data['username'], $data['username']);						}						if ($auth->acl_get('u_chgpasswd') && $data['new_password'] && !phpbb_check_hash($data['new_password'], $user->data['user_password']))						{							$user->reset_login_keys();							add_log('user', $user->data['user_id'], 'LOG_USER_NEW_PASSWORD', $data['username']);						}						if ($auth->acl_get('u_chgemail') && $data['email'] != $user->data['user_email'])						{							add_log('user', $user->data['user_id'], 'LOG_USER_UPDATE_EMAIL', $data['username'], $user->data['user_email'], $data['email']);						}						$message = 'PROFILE_UPDATED';						if ($auth->acl_get('u_chgemail') && $config['email_enable'] && $data['email'] != $user->data['user_email'] && $user->data['user_type'] != USER_FOUNDER && ($config['require_activation'] == USER_ACTIVATION_SELF || $config['require_activation'] == USER_ACTIVATION_ADMIN))						{							$message = ($config['require_activation'] == USER_ACTIVATION_SELF) ? 'ACCOUNT_EMAIL_CHANGED' : 'ACCOUNT_EMAIL_CHANGED_ADMIN';							include_once($phpbb_root_path . 'includes/functions_messenger.' . $phpEx);							$server_url = generate_board_url();							$user_actkey = gen_rand_string(mt_rand(6, 10));							$messenger = new messenger(false);							$template_file = ($config['require_activation'] == USER_ACTIVATION_ADMIN) ? 'user_activate_inactive' : 'user_activate';							$messenger->template($template_file, $user->data['user_lang']);							$messenger->to($data['email'], $data['username']);							$messenger->anti_abuse_headers($config, $user);							$messenger->assign_vars(array(								'USERNAME'		=> htmlspecialchars_decode($data['username']),								'U_ACTIVATE'	=> "$server_url/ucp.$phpEx?mode=activate&u={$user->data['user_id']}&k=$user_actkey")							);							$messenger->send(NOTIFY_EMAIL);							if ($config['require_activation'] == USER_ACTIVATION_ADMIN)							{								// Grab an array of user_id's with a_user permissions ... these users can activate a user								$admin_ary = $auth->acl_get_list(false, 'a_user', false);								$admin_ary = (!empty($admin_ary[0]['a_user'])) ? $admin_ary[0]['a_user'] : array();								// Also include founders								$where_sql = ' WHERE user_type = ' . USER_FOUNDER;								if (sizeof($admin_ary))								{									$where_sql .= ' OR ' . $db->sql_in_set('user_id', $admin_ary);								}								$sql = 'SELECT user_id, username, user_email, user_lang, user_jabber, user_notify_type									FROM ' . USERS_TABLE . ' ' .									$where_sql;								$result = $db->sql_query($sql);								while ($row = $db->sql_fetchrow($result))								{									$messenger->template('admin_activate', $row['user_lang']);									$messenger->to($row['user_email'], $row['username']);									$messenger->im($row['user_jabber'], $row['username']);									$messenger->assign_vars(array(										'USERNAME'			=> htmlspecialchars_decode($data['username']),										'U_USER_DETAILS'	=> "$server_url/memberlist.$phpEx?mode=viewprofile&u={$user->data['user_id']}",										'U_ACTIVATE'		=> "$server_url/ucp.$phpEx?mode=activate&u={$user->data['user_id']}&k=$user_actkey")									);									$messenger->send($row['user_notify_type']);								}								$db->sql_freeresult($result);							}							user_active_flip('deactivate', $user->data['user_id'], INACTIVE_PROFILE);							// Because we want the profile to be reactivated we set user_newpasswd to empty (else the reactivation will fail)							$sql_ary['user_actkey'] = $user_actkey;							$sql_ary['user_newpasswd'] = '';						}						if (sizeof($sql_ary))						{							$sql = 'UPDATE ' . USERS_TABLE . '								SET ' . $db->sql_build_array('UPDATE', $sql_ary) . '								WHERE user_id = ' . $user->data['user_id'];							$db->sql_query($sql);						}						// Need to update config, forum, topic, posting, messages, etc.						if ($data['username'] != $user->data['username'] && $auth->acl_get('u_chgname') && $config['allow_namechange'])						{							user_update_name($user->data['username'], $data['username']);						}						// Now, we can remove the user completely (kill the session) - NOT BEFORE!!!						if (!empty($sql_ary['user_actkey']))						{							meta_refresh(5, append_sid($phpbb_root_path . 'index.' . $phpEx));							$message = $user->lang[$message] . '<br /><br />' . sprintf($user->lang['RETURN_INDEX'], '<a href="' . append_sid($phpbb_root_path . 'index.' . $phpEx) . '">', '</a>');							// Because the user gets deactivated we log him out too, killing his session							$user->session_kill();						}						else						{							meta_refresh(3, $this->u_action);							$message = $user->lang[$message] . '<br /><br />' . sprintf($user->lang['RETURN_UCP'], '<a href="' . $this->u_action . '">', '</a>');						}						trigger_error($message);					}					// Replace "error" strings with their real, localised form					$error = preg_replace('#^([A-Z_]+)$#e', "(!empty(\$user->lang['\\1'])) ? \$user->lang['\\1'] : '\\1'", $error);				}				$template->assign_vars(array(					'ERROR'				=> (sizeof($error)) ? implode('<br />', $error) : '',					'USERNAME'			=> $data['username'],					'EMAIL'				=> $data['email'],					'PASSWORD_CONFIRM'	=> $data['password_confirm'],					'NEW_PASSWORD'		=> $data['new_password'],					'CUR_PASSWORD'		=> '',					'L_USERNAME_EXPLAIN'		=> sprintf($user->lang[$config['allow_name_chars'] . '_EXPLAIN'], $config['min_name_chars'], $config['max_name_chars']),					'L_CHANGE_PASSWORD_EXPLAIN'	=> sprintf($user->lang[$config['pass_complex'] . '_EXPLAIN'], $config['min_pass_chars'], $config['max_pass_chars']),					'S_FORCE_PASSWORD'	=> ($auth->acl_get('u_chgpasswd') && $config['chg_passforce'] && $user->data['user_passchg'] < time() - ($config['chg_passforce'] * 86400)) ? true : false,					'S_CHANGE_USERNAME' => ($config['allow_namechange'] && $auth->acl_get('u_chgname')) ? true : false,					'S_CHANGE_EMAIL'	=> ($auth->acl_get('u_chgemail')) ? true : false,					'S_CHANGE_PASSWORD'	=> ($auth->acl_get('u_chgpasswd')) ? true : false)				);			break;			case 'profile_info':				include($phpbb_root_path . 'includes/functions_profile_fields.' . $phpEx);				$cp = new custom_profile();				$cp_data = $cp_error = array();				$data = array(					'icq'			=> request_var('icq', $user->data['user_icq']),					'aim'			=> request_var('aim', $user->data['user_aim']),					'msn'			=> request_var('msn', $user->data['user_msnm']),					'yim'			=> request_var('yim', $user->data['user_yim']),					'jabber'		=> utf8_normalize_nfc(request_var('jabber', $user->data['user_jabber'], true)),					'website'		=> request_var('website', $user->data['user_website']),					'location'		=> utf8_normalize_nfc(request_var('location', $user->data['user_from'], true)),					'occupation'	=> utf8_normalize_nfc(request_var('occupation', $user->data['user_occ'], true)),					'interests'		=> utf8_normalize_nfc(request_var('interests', $user->data['user_interests'], true)),				);				if ($config['allow_birthdays'])				{					$data['bday_day'] = $data['bday_month'] = $data['bday_year'] = 0;					if ($user->data['user_birthday'])					{						list($data['bday_day'], $data['bday_month'], $data['bday_year']) = explode('-', $user->data['user_birthday']);					}					$data['bday_day'] = request_var('bday_day', $data['bday_day']);					$data['bday_month'] = request_var('bday_month', $data['bday_month']);					$data['bday_year'] = request_var('bday_year', $data['bday_year']);					$data['user_birthday'] = sprintf('%2d-%2d-%4d', $data['bday_day'], $data['bday_month'], $data['bday_year']);				}				add_form_key('ucp_profile_info');				if ($submit)				{					$validate_array = array(						'icq'			=> array(							array('string', true, 3, 15),							array('match', true, '#^[0-9]+$#i')),						'aim'			=> array('string', true, 3, 255),						'msn'			=> array('string', true, 5, 255),						'jabber'		=> array(							array('string', true, 5, 255),							array('jabber')),						'yim'			=> array('string', true, 5, 255),						'website'		=> array(							array('string', true, 12, 255),							array('match', true, '#^http[s]?://(.*?\.)*?[a-z0-9\-]+\.[a-z]{2,4}#i')),						'location'		=> array('string', true, 2, 100),						'occupation'	=> array('string', true, 2, 500),						'interests'		=> array('string', true, 2, 500),					);					if ($config['allow_birthdays'])					{						$validate_array = array_merge($validate_array, array(							'bday_day'		=> array('num', true, 1, 31),							'bday_month'	=> array('num', true, 1, 12),							'bday_year'		=> array('num', true, 1901, gmdate('Y', time()) + 50),							'user_birthday' => array('date', true),						));					}					$error = validate_data($data, $validate_array);					// validate custom profile fields					$cp->submit_cp_field('profile', $user->get_iso_lang_id(), $cp_data, $cp_error);					if (sizeof($cp_error))					{						$error = array_merge($error, $cp_error);					}					if (!check_form_key('ucp_profile_info'))					{						$error[] = 'FORM_INVALID';					}					if (!sizeof($error))					{						$data['notify'] = $user->data['user_notify_type'];						if ($data['notify'] == NOTIFY_IM && (!$config['jab_enable'] || !$data['jabber'] || !@extension_loaded('xml')))						{							// User has not filled in a jabber address (Or one of the modules is disabled or jabber is disabled)							// Disable notify by Jabber now for this user.							$data['notify'] = NOTIFY_EMAIL;						}						$sql_ary = array(							'user_icq'		=> $data['icq'],							'user_aim'		=> $data['aim'],							'user_msnm'		=> $data['msn'],							'user_yim'		=> $data['yim'],							'user_jabber'	=> $data['jabber'],							'user_website'	=> $data['website'],							'user_from'		=> $data['location'],							'user_occ'		=> $data['occupation'],							'user_interests'=> $data['interests'],							'user_notify_type'	=> $data['notify'],						);						if ($config['allow_birthdays'])						{							$sql_ary['user_birthday'] = $data['user_birthday'];						}						$sql = 'UPDATE ' . USERS_TABLE . '							SET ' . $db->sql_build_array('UPDATE', $sql_ary) . '							WHERE user_id = ' . $user->data['user_id'];						$db->sql_query($sql);						// Update Custom Fields						$cp->update_profile_field_data($user->data['user_id'], $cp_data);						meta_refresh(3, $this->u_action);						$message = $user->lang['PROFILE_UPDATED'] . '<br /><br />' . sprintf($user->lang['RETURN_UCP'], '<a href="' . $this->u_action . '">', '</a>');						trigger_error($message);					}					// Replace "error" strings with their real, localised form					$error = preg_replace('#^([A-Z_]+)$#e', "(!empty(\$user->lang['\\1'])) ? \$user->lang['\\1'] : '\\1'", $error);				}				if ($config['allow_birthdays'])				{					$s_birthday_day_options = '<option value="0"' . ((!$data['bday_day']) ? ' selected="selected"' : '') . '>--</option>';					for ($i = 1; $i < 32; $i++)					{						$selected = ($i == $data['bday_day']) ? ' selected="selected"' : '';						$s_birthday_day_options .= "<option value=\"$i\"$selected>$i</option>";					}					$s_birthday_month_options = '<option value="0"' . ((!$data['bday_month']) ? ' selected="selected"' : '') . '>--</option>';					for ($i = 1; $i < 13; $i++)					{						$selected = ($i == $data['bday_month']) ? ' selected="selected"' : '';						$s_birthday_month_options .= "<option value=\"$i\"$selected>$i</option>";					}					$s_birthday_year_options = '';					$now = getdate();					$s_birthday_year_options = '<option value="0"' . ((!$data['bday_year']) ? ' selected="selected"' : '') . '>--</option>';					for ($i = $now['year'] - 100; $i <= $now['year']; $i++)					{						$selected = ($i == $data['bday_year']) ? ' selected="selected"' : '';						$s_birthday_year_options .= "<option value=\"$i\"$selected>$i</option>";					}					unset($now);					$template->assign_vars(array(						'S_BIRTHDAY_DAY_OPTIONS'	=> $s_birthday_day_options,						'S_BIRTHDAY_MONTH_OPTIONS'	=> $s_birthday_month_options,						'S_BIRTHDAY_YEAR_OPTIONS'	=> $s_birthday_year_options,						'S_BIRTHDAYS_ENABLED'		=> true,					));				}				$template->assign_vars(array(					'ERROR'		=> (sizeof($error)) ? implode('<br />', $error) : '',					'ICQ'		=> $data['icq'],					'YIM'		=> $data['yim'],					'AIM'		=> $data['aim'],					'MSN'		=> $data['msn'],					'JABBER'	=> $data['jabber'],					'WEBSITE'	=> $data['website'],					'LOCATION'	=> $data['location'],					'OCCUPATION'=> $data['occupation'],					'INTERESTS'	=> $data['interests'],				));				// Get additional profile fields and assign them to the template block var 'profile_fields'				$user->get_profile_fields($user->data['user_id']);				$cp->generate_profile_fields('profile', $user->get_iso_lang_id());			break;			case 'signature':				if (!$auth->acl_get('u_sig'))				{					trigger_error('NO_AUTH_SIGNATURE');				}				include($phpbb_root_path . 'includes/functions_posting.' . $phpEx);				include($phpbb_root_path . 'includes/functions_display.' . $phpEx);				$enable_bbcode	= ($config['allow_sig_bbcode']) ? (bool) $user->optionget('sig_bbcode') : false;				$enable_smilies	= ($config['allow_sig_smilies']) ? (bool) $user->optionget('sig_smilies') : false;				$enable_urls	= ($config['allow_sig_links']) ? (bool) $user->optionget('sig_links') : false;				$signature		= utf8_normalize_nfc(request_var('signature', (string) $user->data['user_sig'], true));				add_form_key('ucp_sig');				if ($submit || $preview)				{					include($phpbb_root_path . 'includes/message_parser.' . $phpEx);					$enable_bbcode	= ($config['allow_sig_bbcode']) ? ((request_var('disable_bbcode', false)) ? false : true) : false;					$enable_smilies	= ($config['allow_sig_smilies']) ? ((request_var('disable_smilies', false)) ? false : true) : false;					$enable_urls	= ($config['allow_sig_links']) ? ((request_var('disable_magic_url', false)) ? false : true) : false;					if (!sizeof($error))					{						$message_parser = new parse_message($signature);						// Allowing Quote BBCode						$message_parser->parse($enable_bbcode, $enable_urls, $enable_smilies, $config['allow_sig_img'], $config['allow_sig_flash'], true, $config['allow_sig_links'], true, 'sig');						if (sizeof($message_parser->warn_msg))						{							$error[] = implode('<br />', $message_parser->warn_msg);						}						if (!check_form_key('ucp_sig'))						{							$error[] = 'FORM_INVALID';						}						if (!sizeof($error) && $submit)						{							$user->optionset('sig_bbcode', $enable_bbcode);							$user->optionset('sig_smilies', $enable_smilies);							$user->optionset('sig_links', $enable_urls);							$sql_ary = array(								'user_sig'					=> (string) $message_parser->message,								'user_options'				=> $user->data['user_options'],								'user_sig_bbcode_uid'		=> (string) $message_parser->bbcode_uid,								'user_sig_bbcode_bitfield'	=> $message_parser->bbcode_bitfield							);							$sql = 'UPDATE ' . USERS_TABLE . '								SET ' . $db->sql_build_array('UPDATE', $sql_ary) . '								WHERE user_id = ' . $user->data['user_id'];							$db->sql_query($sql);							$message = $user->lang['PROFILE_UPDATED'] . '<br /><br />' . sprintf($user->lang['RETURN_UCP'], '<a href="' . $this->u_action . '">', '</a>');							trigger_error($message);						}					}					// Replace "error" strings with their real, localised form					$error = preg_replace('#^([A-Z_]+)$#e', "(!empty(\$user->lang['\\1'])) ? \$user->lang['\\1'] : '\\1'", $error);				}				$signature_preview = '';				if ($preview)				{					// Now parse it for displaying					$signature_preview = $message_parser->format_display($enable_bbcode, $enable_urls, $enable_smilies, false);					unset($message_parser);				}				decode_message($signature, $user->data['user_sig_bbcode_uid']);				$template->assign_vars(array(					'ERROR'				=> (sizeof($error)) ? implode('<br />', $error) : '',					'SIGNATURE'			=> $signature,					'SIGNATURE_PREVIEW'	=> $signature_preview,					'S_BBCODE_CHECKED' 		=> (!$enable_bbcode) ? ' checked="checked"' : '',					'S_SMILIES_CHECKED' 	=> (!$enable_smilies) ? ' checked="checked"' : '',					'S_MAGIC_URL_CHECKED' 	=> (!$enable_urls) ? ' checked="checked"' : '',					'BBCODE_STATUS'			=> ($config['allow_sig_bbcode']) ? sprintf($user->lang['BBCODE_IS_ON'], '<a href="' . append_sid("{$phpbb_root_path}faq.$phpEx", 'mode=bbcode') . '">', '</a>') : sprintf($user->lang['BBCODE_IS_OFF'], '<a href="' . append_sid("{$phpbb_root_path}faq.$phpEx", 'mode=bbcode') . '">', '</a>'),					'SMILIES_STATUS'		=> ($config['allow_sig_smilies']) ? $user->lang['SMILIES_ARE_ON'] : $user->lang['SMILIES_ARE_OFF'],					'IMG_STATUS'			=> ($config['allow_sig_img']) ? $user->lang['IMAGES_ARE_ON'] : $user->lang['IMAGES_ARE_OFF'],					'FLASH_STATUS'			=> ($config['allow_sig_flash']) ? $user->lang['FLASH_IS_ON'] : $user->lang['FLASH_IS_OFF'],					'URL_STATUS'			=> ($config['allow_sig_links']) ? $user->lang['URL_IS_ON'] : $user->lang['URL_IS_OFF'],					'MAX_FONT_SIZE'			=> (int) $config['max_sig_font_size'],					'L_SIGNATURE_EXPLAIN'	=> sprintf($user->lang['SIGNATURE_EXPLAIN'], $config['max_sig_chars']),					'S_BBCODE_ALLOWED'		=> $config['allow_sig_bbcode'],					'S_SMILIES_ALLOWED'		=> $config['allow_sig_smilies'],					'S_BBCODE_IMG'			=> ($config['allow_sig_img']) ? true : false,					'S_BBCODE_FLASH'		=> ($config['allow_sig_flash']) ? true : false,					'S_LINKS_ALLOWED'		=> ($config['allow_sig_links']) ? true : false)				);				// Build custom bbcodes array				display_custom_bbcodes();			break;			case 'avatar':				include($phpbb_root_path . 'includes/functions_display.' . $phpEx);				$display_gallery = request_var('display_gallery', '0');				$avatar_select = basename(request_var('avatar_select', ''));				$category = basename(request_var('category', ''));				$can_upload = (file_exists($phpbb_root_path . $config['avatar_path']) && phpbb_is_writable($phpbb_root_path . $config['avatar_path']) && $auth->acl_get('u_chgavatar') && (@ini_get('file_uploads') || strtolower(@ini_get('file_uploads')) == 'on')) ? true : false;				add_form_key('ucp_avatar');				if ($submit)				{					if (check_form_key('ucp_avatar'))					{						if (avatar_process_user($error, false, $can_upload))						{							meta_refresh(3, $this->u_action);							$message = $user->lang['PROFILE_UPDATED'] . '<br /><br />' . sprintf($user->lang['RETURN_UCP'], '<a href="' . $this->u_action . '">', '</a>');							trigger_error($message);						}					}					else					{						$error[] = 'FORM_INVALID';					}					// Replace "error" strings with their real, localised form					$error = preg_replace('#^([A-Z_]+)$#e', "(!empty(\$user->lang['\\1'])) ? \$user->lang['\\1'] : '\\1'", $error);				}				if (!$config['allow_avatar'] && $user->data['user_avatar_type'])				{					$error[] = $user->lang['AVATAR_NOT_ALLOWED'];				}				else if ((($user->data['user_avatar_type'] == AVATAR_UPLOAD) && !$config['allow_avatar_upload']) ||				 (($user->data['user_avatar_type'] == AVATAR_REMOTE) && !$config['allow_avatar_remote']) ||				 (($user->data['user_avatar_type'] == AVATAR_GALLERY) && !$config['allow_avatar_local']))				{					$error[] = $user->lang['AVATAR_TYPE_NOT_ALLOWED'];				}				$template->assign_vars(array(					'ERROR'			=> (sizeof($error)) ? implode('<br />', $error) : '',					'AVATAR'		=> get_user_avatar($user->data['user_avatar'], $user->data['user_avatar_type'], $user->data['user_avatar_width'], $user->data['user_avatar_height'], 'USER_AVATAR', true),					'AVATAR_SIZE'	=> $config['avatar_filesize'],					'U_GALLERY'		=> append_sid("{$phpbb_root_path}ucp.$phpEx", 'i=profile&amp;mode=avatar&amp;display_gallery=1'),					'S_FORM_ENCTYPE'	=> ($can_upload && ($config['allow_avatar_upload'] || $config['allow_avatar_remote_upload'])) ? ' enctype="multipart/form-data"' : '',					'L_AVATAR_EXPLAIN'	=> sprintf($user->lang['AVATAR_EXPLAIN'], $config['avatar_max_width'], $config['avatar_max_height'], $config['avatar_filesize'] / 1024),				));				if ($config['allow_avatar'] && $display_gallery && $auth->acl_get('u_chgavatar') && $config['allow_avatar_local'])				{					avatar_gallery($category, $avatar_select, 4);				}				else if ($config['allow_avatar'])				{					$avatars_enabled = (($can_upload && ($config['allow_avatar_upload'] || $config['allow_avatar_remote_upload'])) || ($auth->acl_get('u_chgavatar') && ($config['allow_avatar_local'] || $config['allow_avatar_remote']))) ? true : false;					$template->assign_vars(array(						'AVATAR_WIDTH'	=> request_var('width', $user->data['user_avatar_width']),						'AVATAR_HEIGHT'	=> request_var('height', $user->data['user_avatar_height']),						'S_AVATARS_ENABLED'		=> $avatars_enabled,						'S_UPLOAD_AVATAR_FILE'	=> ($can_upload && $config['allow_avatar_upload']) ? true : false,						'S_UPLOAD_AVATAR_URL'	=> ($can_upload && $config['allow_avatar_remote_upload']) ? true : false,						'S_LINK_AVATAR'			=> ($auth->acl_get('u_chgavatar') && $config['allow_avatar_remote']) ? true : false,						'S_DISPLAY_GALLERY'		=> ($auth->acl_get('u_chgavatar') && $config['allow_avatar_local']) ? true : false)					);				}			break;		}		$template->assign_vars(array(			'L_TITLE'	=> $user->lang['UCP_PROFILE_' . strtoupper($mode)],			'S_HIDDEN_FIELDS'	=> $s_hidden_fields,			'S_UCP_ACTION'		=> $this->u_action)		);		// Set desired template		$this->tpl_name = 'ucp_profile_' . $mode;		$this->page_title = 'UCP_PROFILE_' . strtoupper($mode);	}}?>
<?php/**** @package acp* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License** @todo add cron intervals to server settings? (database_gc, queue_interval, session_gc, search_gc, cache_gc, warnings_gc)*//*** @ignore*/if (!defined('IN_PHPBB')){	exit;}/*** @package acp*/class acp_board{	var $u_action;	var $new_config = array();	function main($id, $mode)	{		global $db, $user, $auth, $template;		global $config, $phpbb_root_path, $phpbb_admin_path, $phpEx;		global $cache;		$user->add_lang('acp/board');		$action	= request_var('action', '');		$submit = (isset($_POST['submit']) || isset($_POST['allow_quick_reply_enable'])) ? true : false;		$form_key = 'acp_board';		add_form_key($form_key);		/**		*	Validation types are:		*		string, int, bool,		*		script_path (absolute path in url - beginning with / and no trailing slash),		*		rpath (relative), rwpath (realtive, writable), path (relative path, but able to escape the root), wpath (writable)		*/		switch ($mode)		{			case 'settings':				$display_vars = array(					'title'	=> 'ACP_BOARD_SETTINGS',					'vars'	=> array(						'legend1'				=> 'ACP_BOARD_SETTINGS',						'sitename'				=> array('lang' => 'SITE_NAME',				'validate' => 'string',	'type' => 'text:40:255', 'explain' => false),						'site_desc'				=> array('lang' => 'SITE_DESC',				'validate' => 'string',	'type' => 'text:40:255', 'explain' => false),						'board_disable'			=> array('lang' => 'DISABLE_BOARD',			'validate' => 'bool',	'type' => 'custom', 'method' => 'board_disable', 'explain' => true),						'board_disable_msg'		=> false,						'default_lang'			=> array('lang' => 'DEFAULT_LANGUAGE',		'validate' => 'lang',	'type' => 'select', 'function' => 'language_select', 'params' => array('{CONFIG_VALUE}'), 'explain' => false),						'default_dateformat'	=> array('lang' => 'DEFAULT_DATE_FORMAT',	'validate' => 'string',	'type' => 'custom', 'method' => 'dateformat_select', 'explain' => true),						'board_timezone'		=> array('lang' => 'SYSTEM_TIMEZONE',		'validate' => 'string',	'type' => 'select', 'function' => 'tz_select', 'params' => array('{CONFIG_VALUE}', 1), 'explain' => true),						'board_dst'				=> array('lang' => 'SYSTEM_DST',			'validate' => 'bool',	'type' => 'radio:yes_no', 'explain' => false),						'default_style'			=> array('lang' => 'DEFAULT_STYLE',			'validate' => 'int',	'type' => 'select', 'function' => 'style_select', 'params' => array('{CONFIG_VALUE}', false), 'explain' => false),						'override_user_style'	=> array('lang' => 'OVERRIDE_STYLE',		'validate' => 'bool',	'type' => 'radio:yes_no', 'explain' => true),						'legend2'				=> 'WARNINGS',						'warnings_expire_days'	=> array('lang' => 'WARNINGS_EXPIRE',		'validate' => 'int',	'type' => 'text:3:4', 'explain' => true, 'append' => ' ' . $user->lang['DAYS']),						'legend3'					=> 'ACP_SUBMIT_CHANGES',					)				);			break;			case 'features':				$display_vars = array(					'title'	=> 'ACP_BOARD_FEATURES',					'vars'	=> array(						'legend1'				=> 'ACP_BOARD_FEATURES',						'allow_privmsg'			=> array('lang' => 'BOARD_PM',				'validate' => 'bool',	'type' => 'radio:yes_no', 'explain' => true),						'allow_topic_notify'	=> array('lang' => 'ALLOW_TOPIC_NOTIFY',	'validate' => 'bool',	'type' => 'radio:yes_no', 'explain' => false),						'allow_forum_notify'	=> array('lang' => 'ALLOW_FORUM_NOTIFY',	'validate' => 'bool',	'type' => 'radio:yes_no', 'explain' => false),						'allow_namechange'		=> array('lang' => 'ALLOW_NAME_CHANGE',		'validate' => 'bool',	'type' => 'radio:yes_no', 'explain' => false),						'allow_attachments'		=> array('lang' => 'ALLOW_ATTACHMENTS',		'validate' => 'bool',	'type' => 'radio:yes_no', 'explain' => false),						'allow_pm_attach'		=> array('lang' => 'ALLOW_PM_ATTACHMENTS',	'validate' => 'bool',	'type' => 'radio:yes_no', 'explain' => false),						'allow_pm_report'		=> array('lang' => 'ALLOW_PM_REPORT',		'validate' => 'bool',	'type' => 'radio:yes_no', 'explain' => true),						'allow_bbcode'			=> array('lang' => 'ALLOW_BBCODE',			'validate' => 'bool',	'type' => 'radio:yes_no', 'explain' => false),						'allow_smilies'			=> array('lang' => 'ALLOW_SMILIES',			'validate' => 'bool',	'type' => 'radio:yes_no', 'explain' => false),						'allow_sig'				=> array('lang' => 'ALLOW_SIG',				'validate' => 'bool',	'type' => 'radio:yes_no', 'explain' => false),						'allow_nocensors'		=> array('lang' => 'ALLOW_NO_CENSORS',		'validate' => 'bool',	'type' => 'radio:yes_no', 'explain' => true),						'allow_bookmarks'		=> array('lang' => 'ALLOW_BOOKMARKS',		'validate' => 'bool',	'type' => 'radio:yes_no', 'explain' => true),						'allow_birthdays'		=> array('lang' => 'ALLOW_BIRTHDAYS',		'validate' => 'bool',	'type' => 'radio:yes_no', 'explain' => true),						'allow_quick_reply'		=> array('lang' => 'ALLOW_QUICK_REPLY',		'validate' => 'bool',	'type' => 'custom', 'method' => 'quick_reply', 'explain' => true),						'legend2'				=> 'ACP_LOAD_SETTINGS',						'load_birthdays'		=> array('lang' => 'YES_BIRTHDAYS',			'validate' => 'bool',	'type' => 'radio:yes_no', 'explain' => true),						'load_moderators'		=> array('lang' => 'YES_MODERATORS',		'validate' => 'bool',	'type' => 'radio:yes_no', 'explain' => false),						'load_jumpbox'			=> array('lang' => 'YES_JUMPBOX',			'validate' => 'bool',	'type' => 'radio:yes_no', 'explain' => false),						'load_cpf_memberlist'	=> array('lang' => 'LOAD_CPF_MEMBERLIST',	'validate' => 'bool',	'type' => 'radio:yes_no', 'explain' => false),						'load_cpf_viewprofile'	=> array('lang' => 'LOAD_CPF_VIEWPROFILE',	'validate' => 'bool',	'type' => 'radio:yes_no', 'explain' => false),						'load_cpf_viewtopic'	=> array('lang' => 'LOAD_CPF_VIEWTOPIC',	'validate' => 'bool',	'type' => 'radio:yes_no', 'explain' => false),						'legend3'					=> 'ACP_SUBMIT_CHANGES',					)				);			break;			case 'avatar':				$display_vars = array(					'title'	=> 'ACP_AVATAR_SETTINGS',					'vars'	=> array(						'legend1'				=> 'ACP_AVATAR_SETTINGS',						'avatar_min_width'		=> array('lang' => 'MIN_AVATAR_SIZE', 'validate' => 'int:0', 'type' => false, 'method' => false, 'explain' => false,),						'avatar_min_height'		=> array('lang' => 'MIN_AVATAR_SIZE', 'validate' => 'int:0', 'type' => false, 'method' => false, 'explain' => false,),						'avatar_max_width'		=> array('lang' => 'MAX_AVATAR_SIZE', 'validate' => 'int:0', 'type' => false, 'method' => false, 'explain' => false,),						'avatar_max_height'		=> array('lang' => 'MAX_AVATAR_SIZE', 'validate' => 'int:0', 'type' => false, 'method' => false, 'explain' => false,),						'allow_avatar'			=> array('lang' => 'ALLOW_AVATARS',			'validate' => 'bool',	'type' => 'radio:yes_no', 'explain' => true),						'allow_avatar_local'	=> array('lang' => 'ALLOW_LOCAL',			'validate' => 'bool',	'type' => 'radio:yes_no', 'explain' => false),						'allow_avatar_remote'	=> array('lang' => 'ALLOW_REMOTE',			'validate' => 'bool',	'type' => 'radio:yes_no', 'explain' => true),						'allow_avatar_upload'	=> array('lang' => 'ALLOW_UPLOAD',			'validate' => 'bool',	'type' => 'radio:yes_no', 'explain' => false),						'allow_avatar_remote_upload'=> array('lang' => 'ALLOW_REMOTE_UPLOAD', 'validate' => 'bool',	'type' => 'radio:yes_no', 'explain' => true),						'avatar_filesize'		=> array('lang' => 'MAX_FILESIZE',			'validate' => 'int:0',	'type' => 'text:4:10', 'explain' => true, 'append' => ' ' . $user->lang['BYTES']),						'avatar_min'			=> array('lang' => 'MIN_AVATAR_SIZE',		'validate' => 'int:0',	'type' => 'dimension:3:4', 'explain' => true, 'append' => ' ' . $user->lang['PIXEL']),						'avatar_max'			=> array('lang' => 'MAX_AVATAR_SIZE',		'validate' => 'int:0',	'type' => 'dimension:3:4', 'explain' => true, 'append' => ' ' . $user->lang['PIXEL']),						'avatar_path'			=> array('lang' => 'AVATAR_STORAGE_PATH',	'validate' => 'rwpath',	'type' => 'text:20:255', 'explain' => true),						'avatar_gallery_path'	=> array('lang' => 'AVATAR_GALLERY_PATH',	'validate' => 'rpath',	'type' => 'text:20:255', 'explain' => true)					)				);			break;			case 'message':				$display_vars = array(					'title'	=> 'ACP_MESSAGE_SETTINGS',					'lang'	=> 'ucp',					'vars'	=> array(						'legend1'				=> 'GENERAL_SETTINGS',						'allow_privmsg'			=> array('lang' => 'BOARD_PM',				'validate' => 'bool',	'type' => 'radio:yes_no', 'explain' => true),						'pm_max_boxes'			=> array('lang' => 'BOXES_MAX',				'validate' => 'int:0',	'type' => 'text:4:4', 'explain' => true),						'pm_max_msgs'			=> array('lang' => 'BOXES_LIMIT',			'validate' => 'int:0',	'type' => 'text:4:4', 'explain' => true),						'full_folder_action'	=> array('lang' => 'FULL_FOLDER_ACTION',	'validate' => 'int',	'type' => 'select', 'method' => 'full_folder_select', 'explain' => true),						'pm_edit_time'			=> array('lang' => 'PM_EDIT_TIME',			'validate' => 'int:0',	'type' => 'text:5:5', 'explain' => true, 'append' => ' ' . $user->lang['MINUTES']),						'pm_max_recipients'		=> array('lang' => 'PM_MAX_RECIPIENTS',		'validate' => 'int:0',	'type' => 'text:5:5', 'explain' => true),						'legend2'				=> 'GENERAL_OPTIONS',						'allow_mass_pm'			=> array('lang' => 'ALLOW_MASS_PM',			'validate' => 'bool',	'type' => 'radio:yes_no', 'explain' => false),						'auth_bbcode_pm'		=> array('lang' => 'ALLOW_BBCODE_PM',		'validate' => 'bool',	'type' => 'radio:yes_no', 'explain' => false),						'auth_smilies_pm'		=> array('lang' => 'ALLOW_SMILIES_PM',		'validate' => 'bool',	'type' => 'radio:yes_no', 'explain' => false),						'allow_pm_attach'		=> array('lang' => 'ALLOW_PM_ATTACHMENTS',	'validate' => 'bool',	'type' => 'radio:yes_no', 'explain' => false),						'allow_sig_pm'			=> array('lang' => 'ALLOW_SIG_PM',			'validate' => 'bool',	'type' => 'radio:yes_no', 'explain' => false),						'print_pm'				=> array('lang' => 'ALLOW_PRINT_PM',		'validate' => 'bool',	'type' => 'radio:yes_no', 'explain' => false),						'forward_pm'			=> array('lang' => 'ALLOW_FORWARD_PM',		'validate' => 'bool',	'type' => 'radio:yes_no', 'explain' => false),						'auth_img_pm'			=> array('lang' => 'ALLOW_IMG_PM',			'validate' => 'bool',	'type' => 'radio:yes_no', 'explain' => false),						'auth_flash_pm'			=> array('lang' => 'ALLOW_FLASH_PM',		'validate' => 'bool',	'type' => 'radio:yes_no', 'explain' => true),						'enable_pm_icons'		=> array('lang' => 'ENABLE_PM_ICONS',		'validate' => 'bool',	'type' => 'radio:yes_no', 'explain' => false),						'legend3'					=> 'ACP_SUBMIT_CHANGES',					)				);			break;			case 'post':				$display_vars = array(					'title'	=> 'ACP_POST_SETTINGS',					'vars'	=> array(						'legend1'				=> 'GENERAL_OPTIONS',						'allow_topic_notify'	=> array('lang' => 'ALLOW_TOPIC_NOTIFY',	'validate' => 'bool',	'type' => 'radio:yes_no', 'explain' => false),						'allow_forum_notify'	=> array('lang' => 'ALLOW_FORUM_NOTIFY',	'validate' => 'bool',	'type' => 'radio:yes_no', 'explain' => false),						'allow_bbcode'			=> array('lang' => 'ALLOW_BBCODE',			'validate' => 'bool',	'type' => 'radio:yes_no', 'explain' => false),						'allow_post_flash'		=> array('lang' => 'ALLOW_POST_FLASH',		'validate' => 'bool',	'type' => 'radio:yes_no', 'explain' => true),						'allow_smilies'			=> array('lang' => 'ALLOW_SMILIES',			'validate' => 'bool',	'type' => 'radio:yes_no', 'explain' => false),						'allow_post_links'		=> array('lang' => 'ALLOW_POST_LINKS',		'validate' => 'bool',	'type' => 'radio:yes_no', 'explain' => true),						'allow_nocensors'		=> array('lang' => 'ALLOW_NO_CENSORS',		'validate' => 'bool',	'type' => 'radio:yes_no', 'explain' => true),						'allow_bookmarks'		=> array('lang' => 'ALLOW_BOOKMARKS',		'validate' => 'bool',	'type' => 'radio:yes_no', 'explain' => true),						'enable_post_confirm'	=> array('lang' => 'VISUAL_CONFIRM_POST',	'validate' => 'bool',	'type' => 'radio:yes_no', 'explain' => true),						'allow_quick_reply'		=> array('lang' => 'ALLOW_QUICK_REPLY',		'validate' => 'bool',	'type' => 'custom', 'method' => 'quick_reply', 'explain' => true),						'legend2'				=> 'POSTING',						'bump_type'				=> false,						'edit_time'				=> array('lang' => 'EDIT_TIME',				'validate' => 'int:0',		'type' => 'text:5:5', 'explain' => true, 'append' => ' ' . $user->lang['MINUTES']),						'delete_time'			=> array('lang' => 'DELETE_TIME',			'validate' => 'int:0',		'type' => 'text:5:5', 'explain' => true, 'append' => ' ' . $user->lang['MINUTES']),						'display_last_edited'	=> array('lang' => 'DISPLAY_LAST_EDITED',	'validate' => 'bool',		'type' => 'radio:yes_no', 'explain' => true),						'flood_interval'		=> array('lang' => 'FLOOD_INTERVAL',		'validate' => 'int:0',		'type' => 'text:3:10', 'explain' => true, 'append' => ' ' . $user->lang['SECONDS']),						'bump_interval'			=> array('lang' => 'BUMP_INTERVAL',			'validate' => 'int:0',		'type' => 'custom', 'method' => 'bump_interval', 'explain' => true),						'topics_per_page'		=> array('lang' => 'TOPICS_PER_PAGE',		'validate' => 'int:1',		'type' => 'text:3:4', 'explain' => false),						'posts_per_page'		=> array('lang' => 'POSTS_PER_PAGE',		'validate' => 'int:1',		'type' => 'text:3:4', 'explain' => false),						'smilies_per_page'		=> array('lang' => 'SMILIES_PER_PAGE',		'validate' => 'int:1',		'type' => 'text:3:4', 'explain' => false),						'hot_threshold'			=> array('lang' => 'HOT_THRESHOLD',			'validate' => 'int:0',		'type' => 'text:3:4', 'explain' => true),						'max_poll_options'		=> array('lang' => 'MAX_POLL_OPTIONS',		'validate' => 'int:2:127',	'type' => 'text:4:4', 'explain' => false),						'max_post_chars'		=> array('lang' => 'CHAR_LIMIT',			'validate' => 'int:0',		'type' => 'text:4:6', 'explain' => true),						'min_post_chars'		=> array('lang' => 'MIN_CHAR_LIMIT',		'validate' => 'int:1',		'type' => 'text:4:6', 'explain' => true),						'max_post_smilies'		=> array('lang' => 'SMILIES_LIMIT',			'validate' => 'int:0',		'type' => 'text:4:4', 'explain' => true),						'max_post_urls'			=> array('lang' => 'MAX_POST_URLS',			'validate' => 'int:0',		'type' => 'text:5:4', 'explain' => true),						'max_post_font_size'	=> array('lang' => 'MAX_POST_FONT_SIZE',	'validate' => 'int:0',		'type' => 'text:5:4', 'explain' => true, 'append' => ' %'),						'max_quote_depth'		=> array('lang' => 'QUOTE_DEPTH_LIMIT',		'validate' => 'int:0',		'type' => 'text:4:4', 'explain' => true),						'max_post_img_width'	=> array('lang' => 'MAX_POST_IMG_WIDTH',	'validate' => 'int:0',		'type' => 'text:5:4', 'explain' => true, 'append' => ' ' . $user->lang['PIXEL']),						'max_post_img_height'	=> array('lang' => 'MAX_POST_IMG_HEIGHT',	'validate' => 'int:0',		'type' => 'text:5:4', 'explain' => true, 'append' => ' ' . $user->lang['PIXEL']),						'legend3'					=> 'ACP_SUBMIT_CHANGES',					)				);			break;			case 'signature':				$display_vars = array(					'title'	=> 'ACP_SIGNATURE_SETTINGS',					'vars'	=> array(						'legend1'				=> 'GENERAL_OPTIONS',						'allow_sig'				=> array('lang' => 'ALLOW_SIG',				'validate' => 'bool',	'type' => 'radio:yes_no', 'explain' => false),						'allow_sig_bbcode'		=> array('lang' => 'ALLOW_SIG_BBCODE',		'validate' => 'bool',	'type' => 'radio:yes_no', 'explain' => false),						'allow_sig_img'			=> array('lang' => 'ALLOW_SIG_IMG',			'validate' => 'bool',	'type' => 'radio:yes_no', 'explain' => false),						'allow_sig_flash'		=> array('lang' => 'ALLOW_SIG_FLASH',		'validate' => 'bool',	'type' => 'radio:yes_no', 'explain' => false),						'allow_sig_smilies'		=> array('lang' => 'ALLOW_SIG_SMILIES',		'validate' => 'bool',	'type' => 'radio:yes_no', 'explain' => false),						'allow_sig_links'		=> array('lang' => 'ALLOW_SIG_LINKS',		'validate' => 'bool',	'type' => 'radio:yes_no', 'explain' => true),						'legend2'				=> 'GENERAL_SETTINGS',						'max_sig_chars'			=> array('lang' => 'MAX_SIG_LENGTH',		'validate' => 'int:0',	'type' => 'text:5:4', 'explain' => true),						'max_sig_urls'			=> array('lang' => 'MAX_SIG_URLS',			'validate' => 'int:0',	'type' => 'text:5:4', 'explain' => true),						'max_sig_font_size'		=> array('lang' => 'MAX_SIG_FONT_SIZE',		'validate' => 'int:0',	'type' => 'text:5:4', 'explain' => true, 'append' => ' %'),						'max_sig_smilies'		=> array('lang' => 'MAX_SIG_SMILIES',		'validate' => 'int:0',	'type' => 'text:5:4', 'explain' => true),						'max_sig_img_width'		=> array('lang' => 'MAX_SIG_IMG_WIDTH',		'validate' => 'int:0',	'type' => 'text:5:4', 'explain' => true, 'append' => ' ' . $user->lang['PIXEL']),						'max_sig_img_height'	=> array('lang' => 'MAX_SIG_IMG_HEIGHT',	'validate' => 'int:0',	'type' => 'text:5:4', 'explain' => true, 'append' => ' ' . $user->lang['PIXEL']),						'legend3'					=> 'ACP_SUBMIT_CHANGES',					)				);			break;			case 'registration':				$display_vars = array(					'title'	=> 'ACP_REGISTER_SETTINGS',					'vars'	=> array(						'legend1'				=> 'GENERAL_SETTINGS',						'max_name_chars'		=> array('lang' => 'USERNAME_LENGTH', 'validate' => 'int:8:180', 'type' => false, 'method' => false, 'explain' => false,),						'max_pass_chars'		=> array('lang' => 'PASSWORD_LENGTH', 'validate' => 'int:8:255', 'type' => false, 'method' => false, 'explain' => false,),						'require_activation'	=> array('lang' => 'ACC_ACTIVATION',	'validate' => 'int',	'type' => 'custom', 'method' => 'select_acc_activation', 'explain' => true),						'new_member_post_limit'	=> array('lang' => 'NEW_MEMBER_POST_LIMIT', 'validate' => 'int:0:255', 'type' => 'text:4:4', 'explain' => true, 'append' => ' ' . $user->lang['POSTS']),						'new_member_group_default'=> array('lang' => 'NEW_MEMBER_GROUP_DEFAULT', 'validate' => 'bool', 'type' => 'radio:yes_no', 'explain' => true),						'min_name_chars'		=> array('lang' => 'USERNAME_LENGTH',	'validate' => 'int:1',	'type' => 'custom:5:180', 'method' => 'username_length', 'explain' => true),						'min_pass_chars'		=> array('lang' => 'PASSWORD_LENGTH',	'validate' => 'int:1',	'type' => 'custom', 'method' => 'password_length', 'explain' => true),						'allow_name_chars'		=> array('lang' => 'USERNAME_CHARS',	'validate' => 'string',	'type' => 'select', 'method' => 'select_username_chars', 'explain' => true),						'pass_complex'			=> array('lang' => 'PASSWORD_TYPE',		'validate' => 'string',	'type' => 'select', 'method' => 'select_password_chars', 'explain' => true),						'chg_passforce'			=> array('lang' => 'FORCE_PASS_CHANGE',	'validate' => 'int:0',	'type' => 'text:3:3', 'explain' => true, 'append' => ' ' . $user->lang['DAYS']),						'legend2'				=> 'GENERAL_OPTIONS',						'allow_namechange'		=> array('lang' => 'ALLOW_NAME_CHANGE',		'validate' => 'bool',	'type' => 'radio:yes_no', 'explain' => false),						'allow_emailreuse'		=> array('lang' => 'ALLOW_EMAIL_REUSE',		'validate' => 'bool',	'type' => 'radio:yes_no', 'explain' => true),						'enable_confirm'		=> array('lang' => 'VISUAL_CONFIRM_REG',	'validate' => 'bool',	'type' => 'radio:yes_no', 'explain' => true),						'max_login_attempts'	=> array('lang' => 'MAX_LOGIN_ATTEMPTS',	'validate' => 'int:0',	'type' => 'text:3:3', 'explain' => true),						'max_reg_attempts'		=> array('lang' => 'REG_LIMIT',				'validate' => 'int:0',	'type' => 'text:4:4', 'explain' => true),						'legend3'			=> 'COPPA',						'coppa_enable'		=> array('lang' => 'ENABLE_COPPA',		'validate' => 'bool',	'type' => 'radio:yes_no', 'explain' => true),						'coppa_mail'		=> array('lang' => 'COPPA_MAIL',		'validate' => 'string',	'type' => 'textarea:5:40', 'explain' => true),						'coppa_fax'			=> array('lang' => 'COPPA_FAX',			'validate' => 'string',	'type' => 'text:25:100', 'explain' => false),						'legend4'			=> 'ACP_SUBMIT_CHANGES',					)				);			break;			case 'feed':				$display_vars = array(					'title'	=> 'ACP_FEED_MANAGEMENT',					'vars'	=> array(						'legend1'					=> 'ACP_FEED_GENERAL',						'feed_enable'				=> array('lang' => 'ACP_FEED_ENABLE',				'validate' => 'bool',	'type' => 'radio:enabled_disabled',	'explain' => true ),						'feed_item_statistics'		=> array('lang' => 'ACP_FEED_ITEM_STATISTICS',		'validate' => 'bool',	'type' => 'radio:enabled_disabled',	'explain' => true),						'feed_http_auth'			=> array('lang' => 'ACP_FEED_HTTP_AUTH',			'validate' => 'bool',	'type' => 'radio:enabled_disabled',	'explain' => true),						'legend2'					=> 'ACP_FEED_POST_BASED',						'feed_limit_post'			=> array('lang' => 'ACP_FEED_LIMIT',				'validate' => 'int:5',	'type' => 'text:3:4',				'explain' => true),						'feed_overall'				=> array('lang' => 'ACP_FEED_OVERALL',				'validate' => 'bool',	'type' => 'radio:enabled_disabled',	'explain' => true ),						'feed_forum'				=> array('lang' => 'ACP_FEED_FORUM',				'validate' => 'bool',	'type' => 'radio:enabled_disabled',	'explain' => true ),						'feed_topic'				=> array('lang' => 'ACP_FEED_TOPIC',				'validate' => 'bool',	'type' => 'radio:enabled_disabled',	'explain' => true ),						'legend3'					=> 'ACP_FEED_TOPIC_BASED',						'feed_limit_topic'			=> array('lang' => 'ACP_FEED_LIMIT',				'validate' => 'int:5',	'type' => 'text:3:4',				'explain' => true),						'feed_topics_new'			=> array('lang' => 'ACP_FEED_TOPICS_NEW',			'validate' => 'bool',	'type' => 'radio:enabled_disabled',	'explain' => true ),						'feed_topics_active'		=> array('lang' => 'ACP_FEED_TOPICS_ACTIVE',		'validate' => 'bool',	'type' => 'radio:enabled_disabled',	'explain' => true ),						'feed_news_id'				=> array('lang' => 'ACP_FEED_NEWS',					'validate' => 'string',	'type' => 'custom', 'method' => 'select_news_forums', 'explain' => true),						'legend4'					=> 'ACP_FEED_SETTINGS_OTHER',						'feed_overall_forums'		=> array('lang'	=> 'ACP_FEED_OVERALL_FORUMS',		'validate' => 'bool',	'type' => 'radio:enabled_disabled',	'explain' => true ),						'feed_exclude_id'			=> array('lang' => 'ACP_FEED_EXCLUDE_ID',			'validate' => 'string',	'type' => 'custom', 'method' => 'select_exclude_forums', 'explain' => true),					)				);			break;			case 'cookie':				$display_vars = array(					'title'	=> 'ACP_COOKIE_SETTINGS',					'vars'	=> array(						'legend1'		=> 'ACP_COOKIE_SETTINGS',						'cookie_domain'	=> array('lang' => 'COOKIE_DOMAIN',	'validate' => 'string',	'type' => 'text::255', 'explain' => false),						'cookie_name'	=> array('lang' => 'COOKIE_NAME',	'validate' => 'string',	'type' => 'text::16', 'explain' => false),						'cookie_path'	=> array('lang'	=> 'COOKIE_PATH',	'validate' => 'string',	'type' => 'text::255', 'explain' => false),						'cookie_secure'	=> array('lang' => 'COOKIE_SECURE',	'validate' => 'bool',	'type' => 'radio:disabled_enabled', 'explain' => true)					)				);			break;			case 'load':				$display_vars = array(					'title'	=> 'ACP_LOAD_SETTINGS',					'vars'	=> array(						'legend1'			=> 'GENERAL_SETTINGS',						'limit_load'		=> array('lang' => 'LIMIT_LOAD',		'validate' => 'string',	'type' => 'text:4:4', 'explain' => true),						'session_length'	=> array('lang' => 'SESSION_LENGTH',	'validate' => 'int:60',	'type' => 'text:5:10', 'explain' => true, 'append' => ' ' . $user->lang['SECONDS']),						'active_sessions'	=> array('lang' => 'LIMIT_SESSIONS',	'validate' => 'int:0',	'type' => 'text:4:4', 'explain' => true),						'load_online_time'	=> array('lang' => 'ONLINE_LENGTH',		'validate' => 'int:0',	'type' => 'text:4:3', 'explain' => true, 'append' => ' ' . $user->lang['MINUTES']),						'legend2'				=> 'GENERAL_OPTIONS',						'load_db_track'			=> array('lang' => 'YES_POST_MARKING',		'validate' => 'bool',	'type' => 'radio:yes_no', 'explain' => true),						'load_db_lastread'		=> array('lang' => 'YES_READ_MARKING',		'validate' => 'bool',	'type' => 'radio:yes_no', 'explain' => true),						'load_anon_lastread'	=> array('lang' => 'YES_ANON_READ_MARKING',	'validate' => 'bool',	'type' => 'radio:yes_no', 'explain' => true),						'load_online'			=> array('lang' => 'YES_ONLINE',			'validate' => 'bool',	'type' => 'radio:yes_no', 'explain' => true),						'load_online_guests'	=> array('lang' => 'YES_ONLINE_GUESTS',		'validate' => 'bool',	'type' => 'radio:yes_no', 'explain' => true),						'load_onlinetrack'		=> array('lang' => 'YES_ONLINE_TRACK',		'validate' => 'bool',	'type' => 'radio:yes_no', 'explain' => true),						'load_birthdays'		=> array('lang' => 'YES_BIRTHDAYS',			'validate' => 'bool',	'type' => 'radio:yes_no', 'explain' => true),						'load_unreads_search'	=> array('lang' => 'YES_UNREAD_SEARCH',		'validate' => 'bool',	'type' => 'radio:yes_no', 'explain' => false),						'load_moderators'		=> array('lang' => 'YES_MODERATORS',		'validate' => 'bool',	'type' => 'radio:yes_no', 'explain' => false),						'load_jumpbox'			=> array('lang' => 'YES_JUMPBOX',			'validate' => 'bool',	'type' => 'radio:yes_no', 'explain' => false),						'load_user_activity'	=> array('lang' => 'LOAD_USER_ACTIVITY',	'validate' => 'bool',	'type' => 'radio:yes_no', 'explain' => true),						'load_tplcompile'		=> array('lang' => 'RECOMPILE_STYLES',	'validate' => 'bool',	'type' => 'radio:yes_no', 'explain' => true),						'legend3'				=> 'CUSTOM_PROFILE_FIELDS',						'load_cpf_memberlist'	=> array('lang' => 'LOAD_CPF_MEMBERLIST',	'validate' => 'bool',	'type' => 'radio:yes_no', 'explain' => false),						'load_cpf_viewprofile'	=> array('lang' => 'LOAD_CPF_VIEWPROFILE',	'validate' => 'bool',	'type' => 'radio:yes_no', 'explain' => false),						'load_cpf_viewtopic'	=> array('lang' => 'LOAD_CPF_VIEWTOPIC',	'validate' => 'bool',	'type' => 'radio:yes_no', 'explain' => false),						'legend4'					=> 'ACP_SUBMIT_CHANGES',					)				);			break;			case 'auth':				$display_vars = array(					'title'	=> 'ACP_AUTH_SETTINGS',					'vars'	=> array(						'legend1'		=> 'ACP_AUTH_SETTINGS',						'auth_method'	=> array('lang' => 'AUTH_METHOD',	'validate' => 'string',	'type' => 'select', 'method' => 'select_auth_method', 'explain' => false)					)				);			break;			case 'server':				$display_vars = array(					'title'	=> 'ACP_SERVER_SETTINGS',					'vars'	=> array(						'legend1'				=> 'ACP_SERVER_SETTINGS',						'gzip_compress'			=> array('lang' => 'ENABLE_GZIP',		'validate' => 'bool',	'type' => 'radio:yes_no', 'explain' => true),						'legend2'				=> 'PATH_SETTINGS',						'smilies_path'			=> array('lang' => 'SMILIES_PATH',		'validate' => 'rpath',	'type' => 'text:20:255', 'explain' => true),						'icons_path'			=> array('lang' => 'ICONS_PATH',		'validate' => 'rpath',	'type' => 'text:20:255', 'explain' => true),						'upload_icons_path'		=> array('lang' => 'UPLOAD_ICONS_PATH',	'validate' => 'rpath',	'type' => 'text:20:255', 'explain' => true),						'ranks_path'			=> array('lang' => 'RANKS_PATH',		'validate' => 'rpath',	'type' => 'text:20:255', 'explain' => true),						'legend3'				=> 'SERVER_URL_SETTINGS',						'force_server_vars'		=> array('lang' => 'FORCE_SERVER_VARS',	'validate' => 'bool',			'type' => 'radio:yes_no', 'explain' => true),						'server_protocol'		=> array('lang' => 'SERVER_PROTOCOL',	'validate' => 'string',			'type' => 'text:10:10', 'explain' => true),						'server_name'			=> array('lang' => 'SERVER_NAME',		'validate' => 'string',			'type' => 'text:40:255', 'explain' => true),						'server_port'			=> array('lang' => 'SERVER_PORT',		'validate' => 'int:0',			'type' => 'text:5:5', 'explain' => true),						'script_path'			=> array('lang' => 'SCRIPT_PATH',		'validate' => 'script_path',	'type' => 'text::255', 'explain' => true),						'legend4'					=> 'ACP_SUBMIT_CHANGES',					)				);			break;			case 'security':				$display_vars = array(					'title'	=> 'ACP_SECURITY_SETTINGS',					'vars'	=> array(						'legend1'				=> 'ACP_SECURITY_SETTINGS',						'allow_autologin'		=> array('lang' => 'ALLOW_AUTOLOGIN',		'validate' => 'bool',	'type' => 'radio:yes_no', 'explain' => true),						'max_autologin_time'	=> array('lang' => 'AUTOLOGIN_LENGTH',		'validate' => 'int:0',	'type' => 'text:5:5', 'explain' => true, 'append' => ' ' . $user->lang['DAYS']),						'ip_check'				=> array('lang' => 'IP_VALID',				'validate' => 'int',	'type' => 'custom', 'method' => 'select_ip_check', 'explain' => true),						'browser_check'			=> array('lang' => 'BROWSER_VALID',			'validate' => 'bool',	'type' => 'radio:yes_no', 'explain' => true),						'forwarded_for_check'	=> array('lang' => 'FORWARDED_FOR_VALID',	'validate' => 'bool',	'type' => 'radio:yes_no', 'explain' => true),						'referer_validation'	=> array('lang' => 'REFERER_VALID',		'validate' => 'int:0:3','type' => 'custom', 'method' => 'select_ref_check', 'explain' => true),						'check_dnsbl'			=> array('lang' => 'CHECK_DNSBL',			'validate' => 'bool',	'type' => 'radio:yes_no', 'explain' => true),						'email_check_mx'		=> array('lang' => 'EMAIL_CHECK_MX',		'validate' => 'bool',	'type' => 'radio:yes_no', 'explain' => true),						'pass_complex'			=> array('lang' => 'PASSWORD_TYPE',			'validate' => 'string',	'type' => 'select', 'method' => 'select_password_chars', 'explain' => true),						'chg_passforce'			=> array('lang' => 'FORCE_PASS_CHANGE',		'validate' => 'int:0',	'type' => 'text:3:3', 'explain' => true, 'append' => ' ' . $user->lang['DAYS']),						'max_login_attempts'	=> array('lang' => 'MAX_LOGIN_ATTEMPTS',	'validate' => 'int:0',	'type' => 'text:3:3', 'explain' => true),						'ip_login_limit_max'	=> array('lang' => 'IP_LOGIN_LIMIT_MAX',	'validate' => 'int:0',	'type' => 'text:3:3', 'explain' => true),						'ip_login_limit_time'	=> array('lang' => 'IP_LOGIN_LIMIT_TIME',	'validate' => 'int:0',	'type' => 'text:5:5', 'explain' => true, 'append' => ' ' . $user->lang['SECONDS']),						'ip_login_limit_use_forwarded'	=> array('lang' => 'IP_LOGIN_LIMIT_USE_FORWARDED',	'validate' => 'bool',	'type' => 'radio:yes_no', 'explain' => true),						'tpl_allow_php'			=> array('lang' => 'TPL_ALLOW_PHP',			'validate' => 'bool',	'type' => 'radio:yes_no', 'explain' => true),						'form_token_lifetime'	=> array('lang' => 'FORM_TIME_MAX',			'validate' => 'int:-1',	'type' => 'text:5:5', 'explain' => true, 'append' => ' ' . $user->lang['SECONDS']),						'form_token_sid_guests'	=> array('lang' => 'FORM_SID_GUESTS',		'validate' => 'bool',	'type' => 'radio:yes_no', 'explain' => true),					)				);			break;			case 'email':				$display_vars = array(					'title'	=> 'ACP_EMAIL_SETTINGS',					'vars'	=> array(						'legend1'				=> 'GENERAL_SETTINGS',						'email_enable'			=> array('lang' => 'ENABLE_EMAIL',			'validate' => 'bool',	'type' => 'radio:enabled_disabled', 'explain' => true),						'board_email_form'		=> array('lang' => 'BOARD_EMAIL_FORM',		'validate' => 'bool',	'type' => 'radio:enabled_disabled', 'explain' => true),						'email_function_name'	=> array('lang' => 'EMAIL_FUNCTION_NAME',	'validate' => 'string',	'type' => 'text:20:50', 'explain' => true),						'email_package_size'	=> array('lang' => 'EMAIL_PACKAGE_SIZE',	'validate' => 'int:0',	'type' => 'text:5:5', 'explain' => true),						'board_contact'			=> array('lang' => 'CONTACT_EMAIL',			'validate' => 'string',	'type' => 'text:25:100', 'explain' => true),						'board_email'			=> array('lang' => 'ADMIN_EMAIL',			'validate' => 'string',	'type' => 'text:25:100', 'explain' => true),						'board_email_sig'		=> array('lang' => 'EMAIL_SIG',				'validate' => 'string',	'type' => 'textarea:5:30', 'explain' => true),						'board_hide_emails'		=> array('lang' => 'BOARD_HIDE_EMAILS',		'validate' => 'bool',	'type' => 'radio:yes_no', 'explain' => true),						'legend2'				=> 'SMTP_SETTINGS',						'smtp_delivery'			=> array('lang' => 'USE_SMTP',				'validate' => 'bool',	'type' => 'radio:yes_no', 'explain' => true),						'smtp_host'				=> array('lang' => 'SMTP_SERVER',			'validate' => 'string',	'type' => 'text:25:50', 'explain' => false),						'smtp_port'				=> array('lang' => 'SMTP_PORT',				'validate' => 'int:0',	'type' => 'text:4:5', 'explain' => true),						'smtp_auth_method'		=> array('lang' => 'SMTP_AUTH_METHOD',		'validate' => 'string',	'type' => 'select', 'method' => 'mail_auth_select', 'explain' => true),						'smtp_username'			=> array('lang' => 'SMTP_USERNAME',			'validate' => 'string',	'type' => 'text:25:255', 'explain' => true),						'smtp_password'			=> array('lang' => 'SMTP_PASSWORD',			'validate' => 'string',	'type' => 'password:25:255', 'explain' => true),						'legend3'					=> 'ACP_SUBMIT_CHANGES',					)				);			break;			default:				trigger_error('NO_MODE', E_USER_ERROR);			break;		}		if (isset($display_vars['lang']))		{			$user->add_lang($display_vars['lang']);		}		$this->new_config = $config;		$cfg_array = (isset($_REQUEST['config'])) ? utf8_normalize_nfc(request_var('config', array('' => ''), true)) : $this->new_config;		$error = array();		// We validate the complete config if whished		validate_config_vars($display_vars['vars'], $cfg_array, $error);		if ($submit && !check_form_key($form_key))		{			$error[] = $user->lang['FORM_INVALID'];		}		// Do not write values if there is an error		if (sizeof($error))		{			$submit = false;		}		// We go through the display_vars to make sure no one is trying to set variables he/she is not allowed to...		foreach ($display_vars['vars'] as $config_name => $null)		{			if (!isset($cfg_array[$config_name]) || strpos($config_name, 'legend') !== false)			{				continue;			}			if ($config_name == 'auth_method' || $config_name == 'feed_news_id' || $config_name == 'feed_exclude_id')			{				continue;			}			$this->new_config[$config_name] = $config_value = $cfg_array[$config_name];			if ($config_name == 'email_function_name')			{				$this->new_config['email_function_name'] = trim(str_replace(array('(', ')'), array('', ''), $this->new_config['email_function_name']));				$this->new_config['email_function_name'] = (empty($this->new_config['email_function_name']) || !function_exists($this->new_config['email_function_name'])) ? 'mail' : $this->new_config['email_function_name'];				$config_value = $this->new_config['email_function_name'];			}			if ($submit)			{				set_config($config_name, $config_value);				if ($config_name == 'allow_quick_reply' && isset($_POST['allow_quick_reply_enable']))				{					enable_bitfield_column_flag(FORUMS_TABLE, 'forum_flags', log(FORUM_FLAG_QUICK_REPLY, 2));				}			}		}		// Store news and exclude ids		if ($mode == 'feed' && $submit)		{			$cache->destroy('_feed_news_forum_ids');			$cache->destroy('_feed_excluded_forum_ids');			$this->store_feed_forums(FORUM_OPTION_FEED_NEWS, 'feed_news_id');			$this->store_feed_forums(FORUM_OPTION_FEED_EXCLUDE, 'feed_exclude_id');		}		if ($mode == 'auth')		{			// Retrieve a list of auth plugins and check their config values			$auth_plugins = array();			$dp = @opendir($phpbb_root_path . 'includes/auth');			if ($dp)			{				while (($file = readdir($dp)) !== false)				{					if (preg_match('#^auth_(.*?)\.' . $phpEx . '$#', $file))					{						$auth_plugins[] = basename(preg_replace('#^auth_(.*?)\.' . $phpEx . '$#', '\1', $file));					}				}				closedir($dp);				sort($auth_plugins);			}			$updated_auth_settings = false;			$old_auth_config = array();			foreach ($auth_plugins as $method)			{				if ($method && file_exists($phpbb_root_path . 'includes/auth/auth_' . $method . '.' . $phpEx))				{					include_once($phpbb_root_path . 'includes/auth/auth_' . $method . '.' . $phpEx);					$method = 'acp_' . $method;					if (function_exists($method))					{						if ($fields = $method($this->new_config))						{							// Check if we need to create config fields for this plugin and save config when submit was pressed							foreach ($fields['config'] as $field)							{								if (!isset($config[$field]))								{									set_config($field, '');								}								if (!isset($cfg_array[$field]) || strpos($field, 'legend') !== false)								{									continue;								}								$old_auth_config[$field] = $this->new_config[$field];								$config_value = $cfg_array[$field];								$this->new_config[$field] = $config_value;								if ($submit)								{									$updated_auth_settings = true;									set_config($field, $config_value);								}							}						}						unset($fields);					}				}			}			if ($submit && (($cfg_array['auth_method'] != $this->new_config['auth_method']) || $updated_auth_settings))			{				$method = basename($cfg_array['auth_method']);				if ($method && in_array($method, $auth_plugins))				{					include_once($phpbb_root_path . 'includes/auth/auth_' . $method . '.' . $phpEx);					$method = 'init_' . $method;					if (function_exists($method))					{						if ($error = $method())						{							foreach ($old_auth_config as $config_name => $config_value)							{								set_config($config_name, $config_value);							}							trigger_error($error . adm_back_link($this->u_action), E_USER_WARNING);						}					}					set_config('auth_method', basename($cfg_array['auth_method']));				}				else				{					trigger_error('NO_AUTH_PLUGIN', E_USER_ERROR);				}			}		}		if ($submit)		{			add_log('admin', 'LOG_CONFIG_' . strtoupper($mode));			trigger_error($user->lang['CONFIG_UPDATED'] . adm_back_link($this->u_action));		}		$this->tpl_name = 'acp_board';		$this->page_title = $display_vars['title'];		$template->assign_vars(array(			'L_TITLE'			=> $user->lang[$display_vars['title']],			'L_TITLE_EXPLAIN'	=> $user->lang[$display_vars['title'] . '_EXPLAIN'],			'S_ERROR'			=> (sizeof($error)) ? true : false,			'ERROR_MSG'			=> implode('<br />', $error),			'U_ACTION'			=> $this->u_action)		);		// Output relevant page		foreach ($display_vars['vars'] as $config_key => $vars)		{			if (!is_array($vars) && strpos($config_key, 'legend') === false)			{				continue;			}			if (strpos($config_key, 'legend') !== false)			{				$template->assign_block_vars('options', array(					'S_LEGEND'		=> true,					'LEGEND'		=> (isset($user->lang[$vars])) ? $user->lang[$vars] : $vars)				);				continue;			}			$type = explode(':', $vars['type']);			$l_explain = '';			if ($vars['explain'] && isset($vars['lang_explain']))			{				$l_explain = (isset($user->lang[$vars['lang_explain']])) ? $user->lang[$vars['lang_explain']] : $vars['lang_explain'];			}			else if ($vars['explain'])			{				$l_explain = (isset($user->lang[$vars['lang'] . '_EXPLAIN'])) ? $user->lang[$vars['lang'] . '_EXPLAIN'] : '';			}			$content = build_cfg_template($type, $config_key, $this->new_config, $config_key, $vars);			if (empty($content))			{				continue;			}			$template->assign_block_vars('options', array(				'KEY'			=> $config_key,				'TITLE'			=> (isset($user->lang[$vars['lang']])) ? $user->lang[$vars['lang']] : $vars['lang'],				'S_EXPLAIN'		=> $vars['explain'],				'TITLE_EXPLAIN'	=> $l_explain,				'CONTENT'		=> $content,				)			);			unset($display_vars['vars'][$config_key]);		}		if ($mode == 'auth')		{			$template->assign_var('S_AUTH', true);			foreach ($auth_plugins as $method)			{				if ($method && file_exists($phpbb_root_path . 'includes/auth/auth_' . $method . '.' . $phpEx))				{					$method = 'acp_' . $method;					if (function_exists($method))					{						$fields = $method($this->new_config);						if ($fields['tpl'])						{							$template->assign_block_vars('auth_tpl', array(								'TPL'	=> $fields['tpl'])							);						}						unset($fields);					}				}			}		}	}	/**	* Select auth method	*/	function select_auth_method($selected_method, $key = '')	{		global $phpbb_root_path, $phpEx;		$auth_plugins = array();		$dp = @opendir($phpbb_root_path . 'includes/auth');		if (!$dp)		{			return '';		}		while (($file = readdir($dp)) !== false)		{			if (preg_match('#^auth_(.*?)\.' . $phpEx . '$#', $file))			{				$auth_plugins[] = preg_replace('#^auth_(.*?)\.' . $phpEx . '$#', '\1', $file);			}		}		closedir($dp);		sort($auth_plugins);		$auth_select = '';		foreach ($auth_plugins as $method)		{			$selected = ($selected_method == $method) ? ' selected="selected"' : '';			$auth_select .= '<option value="' . $method . '"' . $selected . '>' . ucfirst($method) . '</option>';		}		return $auth_select;	}	/**	* Select mail authentication method	*/	function mail_auth_select($selected_method, $key = '')	{		global $user;		$auth_methods = array('PLAIN', 'LOGIN', 'CRAM-MD5', 'DIGEST-MD5', 'POP-BEFORE-SMTP');		$s_smtp_auth_options = '';		foreach ($auth_methods as $method)		{			$s_smtp_auth_options .= '<option value="' . $method . '"' . (($selected_method == $method) ? ' selected="selected"' : '') . '>' . $user->lang['SMTP_' . str_replace('-', '_', $method)] . '</option>';		}		return $s_smtp_auth_options;	}	/**	* Select full folder action	*/	function full_folder_select($value, $key = '')	{		global $user;		return '<option value="1"' . (($value == 1) ? ' selected="selected"' : '') . '>' . $user->lang['DELETE_OLDEST_MESSAGES'] . '</option><option value="2"' . (($value == 2) ? ' selected="selected"' : '') . '>' . $user->lang['HOLD_NEW_MESSAGES_SHORT'] . '</option>';	}	/**	* Select ip validation	*/	function select_ip_check($value, $key = '')	{		$radio_ary = array(4 => 'ALL', 3 => 'CLASS_C', 2 => 'CLASS_B', 0 => 'NO_IP_VALIDATION');		return h_radio('config[ip_check]', $radio_ary, $value, $key);	}	/**	* Select referer validation	*/	function select_ref_check($value, $key = '')	{		$radio_ary = array(REFERER_VALIDATE_PATH => 'REF_PATH', REFERER_VALIDATE_HOST => 'REF_HOST', REFERER_VALIDATE_NONE => 'NO_REF_VALIDATION');		return h_radio('config[referer_validation]', $radio_ary, $value, $key);	}	/**	* Select account activation method	*/	function select_acc_activation($value, $key = '')	{		global $user, $config;		$radio_ary = array(			USER_ACTIVATION_DISABLE => 'ACC_DISABLE',			USER_ACTIVATION_NONE => 'ACC_NONE',		);		if ($config['email_enable'])		{			$radio_ary[USER_ACTIVATION_SELF] = 'ACC_USER';			$radio_ary[USER_ACTIVATION_ADMIN] = 'ACC_ADMIN';		}		$radio_text = h_radio('config[require_activation]', $radio_ary, $value, 'require_activation', $key, '<br />');		return $radio_text;	}	/**	* Maximum/Minimum username length	*/	function username_length($value, $key = '')	{		global $user;		return '<input id="' . $key . '" type="text" size="3" maxlength="3" name="config[min_name_chars]" value="' . $value . '" /> ' . $user->lang['MIN_CHARS'] . '&nbsp;&nbsp;<input type="text" size="3" maxlength="3" name="config[max_name_chars]" value="' . $this->new_config['max_name_chars'] . '" /> ' . $user->lang['MAX_CHARS'];	}	/**	* Allowed chars in usernames	*/	function select_username_chars($selected_value, $key)	{		global $user;		$user_char_ary = array('USERNAME_CHARS_ANY', 'USERNAME_ALPHA_ONLY', 'USERNAME_ALPHA_SPACERS', 'USERNAME_LETTER_NUM', 'USERNAME_LETTER_NUM_SPACERS', 'USERNAME_ASCII');		$user_char_options = '';		foreach ($user_char_ary as $user_type)		{			$selected = ($selected_value == $user_type) ? ' selected="selected"' : '';			$user_char_options .= '<option value="' . $user_type . '"' . $selected . '>' . $user->lang[$user_type] . '</option>';		}		return $user_char_options;	}	/**	* Maximum/Minimum password length	*/	function password_length($value, $key)	{		global $user;		return '<input id="' . $key . '" type="text" size="3" maxlength="3" name="config[min_pass_chars]" value="' . $value . '" /> ' . $user->lang['MIN_CHARS'] . '&nbsp;&nbsp;<input type="text" size="3" maxlength="3" name="config[max_pass_chars]" value="' . $this->new_config['max_pass_chars'] . '" /> ' . $user->lang['MAX_CHARS'];	}	/**	* Required chars in passwords	*/	function select_password_chars($selected_value, $key)	{		global $user;		$pass_type_ary = array('PASS_TYPE_ANY', 'PASS_TYPE_CASE', 'PASS_TYPE_ALPHA', 'PASS_TYPE_SYMBOL');		$pass_char_options = '';		foreach ($pass_type_ary as $pass_type)		{			$selected = ($selected_value == $pass_type) ? ' selected="selected"' : '';			$pass_char_options .= '<option value="' . $pass_type . '"' . $selected . '>' . $user->lang[$pass_type] . '</option>';		}		return $pass_char_options;	}	/**	* Select bump interval	*/	function bump_interval($value, $key)	{		global $user;		$s_bump_type = '';		$types = array('m' => 'MINUTES', 'h' => 'HOURS', 'd' => 'DAYS');		foreach ($types as $type => $lang)		{			$selected = ($this->new_config['bump_type'] == $type) ? ' selected="selected"' : '';			$s_bump_type .= '<option value="' . $type . '"' . $selected . '>' . $user->lang[$lang] . '</option>';		}		return '<input id="' . $key . '" type="text" size="3" maxlength="4" name="config[bump_interval]" value="' . $value . '" />&nbsp;<select name="config[bump_type]">' . $s_bump_type . '</select>';	}	/**	* Board disable option and message	*/	function board_disable($value, $key)	{		global $user;		$radio_ary = array(1 => 'YES', 0 => 'NO');		return h_radio('config[board_disable]', $radio_ary, $value) . '<br /><input id="' . $key . '" type="text" name="config[board_disable_msg]" maxlength="255" size="40" value="' . $this->new_config['board_disable_msg'] . '" />';	}	/**	* Global quick reply enable/disable setting and button to enable in all forums	*/	function quick_reply($value, $key)	{		global $user;		$radio_ary = array(1 => 'YES', 0 => 'NO');		return h_radio('config[allow_quick_reply]', $radio_ary, $value) .			'<br /><br /><input class="button2" type="submit" id="' . $key . '_enable" name="' . $key . '_enable" value="' . $user->lang['ALLOW_QUICK_REPLY_BUTTON'] . '" />';	}	/**	* Select default dateformat	*/	function dateformat_select($value, $key)	{		global $user, $config;		// Let the format_date function operate with the acp values		$old_tz = $user->timezone;		$old_dst = $user->dst;		$user->timezone = $config['board_timezone'] * 3600;		$user->dst = $config['board_dst'] * 3600;		$dateformat_options = '';		foreach ($user->lang['dateformats'] as $format => $null)		{			$dateformat_options .= '<option value="' . $format . '"' . (($format == $value) ? ' selected="selected"' : '') . '>';			$dateformat_options .= $user->format_date(time(), $format, false) . ((strpos($format, '|') !== false) ? $user->lang['VARIANT_DATE_SEPARATOR'] . $user->format_date(time(), $format, true) : '');			$dateformat_options .= '</option>';		}		$dateformat_options .= '<option value="custom"';		if (!isset($user->lang['dateformats'][$value]))		{			$dateformat_options .= ' selected="selected"';		}		$dateformat_options .= '>' . $user->lang['CUSTOM_DATEFORMAT'] . '</option>';		// Reset users date options		$user->timezone = $old_tz;		$user->dst = $old_dst;		return "<select name=\"dateoptions\" id=\"dateoptions\" onchange=\"if (this.value == 'custom') { document.getElementById('" . addslashes($key) . "').value = '" . addslashes($value) . "'; } else { document.getElementById('" . addslashes($key) . "').value = this.value; }\">$dateformat_options</select>		<input type=\"text\" name=\"config[$key]\" id=\"$key\" value=\"$value\" maxlength=\"30\" />";	}	/**	* Select multiple forums	*/	function select_news_forums($value, $key)	{		global $user, $config;		$forum_list = make_forum_select(false, false, true, true, true, false, true);		// Build forum options		$s_forum_options = '<select id="' . $key . '" name="' . $key . '[]" multiple="multiple">';		foreach ($forum_list as $f_id => $f_row)		{			$f_row['selected'] = phpbb_optionget(FORUM_OPTION_FEED_NEWS, $f_row['forum_options']);			$s_forum_options .= '<option value="' . $f_id . '"' . (($f_row['selected']) ? ' selected="selected"' : '') . (($f_row['disabled']) ? ' disabled="disabled" class="disabled-option"' : '') . '>' . $f_row['padding'] . $f_row['forum_name'] . '</option>';		}		$s_forum_options .= '</select>';		return $s_forum_options;	}	function select_exclude_forums($value, $key)	{		global $user, $config;		$forum_list = make_forum_select(false, false, true, true, true, false, true);		// Build forum options		$s_forum_options = '<select id="' . $key . '" name="' . $key . '[]" multiple="multiple">';		foreach ($forum_list as $f_id => $f_row)		{			$f_row['selected'] = phpbb_optionget(FORUM_OPTION_FEED_EXCLUDE, $f_row['forum_options']);			$s_forum_options .= '<option value="' . $f_id . '"' . (($f_row['selected']) ? ' selected="selected"' : '') . (($f_row['disabled']) ? ' disabled="disabled" class="disabled-option"' : '') . '>' . $f_row['padding'] . $f_row['forum_name'] . '</option>';		}		$s_forum_options .= '</select>';		return $s_forum_options;	}	function store_feed_forums($option, $key)	{		global $db, $cache;		// Get key		$values = request_var($key, array(0 => 0));		// Empty option bit for all forums		$sql = 'UPDATE ' . FORUMS_TABLE . '			SET forum_options = forum_options - ' . (1 << $option) . '			WHERE ' . $db->sql_bit_and('forum_options', $option, '<> 0');		$db->sql_query($sql);		// Already emptied for all...		if (sizeof($values))		{			// Set for selected forums			$sql = 'UPDATE ' . FORUMS_TABLE . '				SET forum_options = forum_options + ' . (1 << $option) . '				WHERE ' . $db->sql_in_set('forum_id', $values);			$db->sql_query($sql);		}		// Empty sql cache for forums table because options changed		$cache->destroy('sql', FORUMS_TABLE);	}}?>
<?php/**** search_synonyms [English]** @package language* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**/if (!defined('IN_PHPBB')){	exit;}$synonyms = array(	'abcense'			=> 'absence',	'abridgement'		=> 'abridgment',	'accomodate'		=> 'accommodate',	'acknowledgment'	=> 'acknowledgement',	'airplane'			=> 'aeroplane',	'allright'			=> 'alright ',	'andy'				=> 'andrew',	'anemia'			=> 'anaemia',	'anemic'			=> 'anaemic',	'anesthesia'		=> 'anaesthesia',	'apologize'			=> 'apologise',	'archean'			=> 'archaean',	'archeology'		=> 'archaeology',	'archeozoic'		=> 'archaeozoic',	'armor'				=> 'armour',	'artic'				=> 'arctic',	'attachment'		=> 'attachement',	'attendence'		=> 'attendance',	'barbecue'	=> 'barbeque',	'behavior'	=> 'behaviour',	'biassed'	=> 'biased',	'biol'		=> 'biology',	'buletin'	=> 'bulletin',	'calender'	=> 'calendar',	'canceled'	=> 'cancelled',	'car'		=> 'automobile',	'catalog'	=> 'catalogue',	'cenozoic'	=> 'caenozoic',	'center'	=> 'centre',	'check'		=> 'cheque',	'color'		=> 'colour',	'comission'	=> 'commission',	'comittee'	=> 'committee',	'commitee'	=> 'committee',	'conceed'	=> 'concede',	'creating'	=> 'createing',	'curiculum'	=> 'curriculum',	'defense'		=> 'defence',	'develope'		=> 'develop',	'discription'	=> 'description',	'dulness'		=> 'dullness',	'encyclopedia'	=> 'encyclopaedia',	'enroll'		=> 'enrol',	'esthetic'		=> 'aesthetic',	'etiology'		=> 'aetiology',	'exhorbitant'	=> 'exorbitant',	'exhuberant'	=> 'exuberant',	'existance'		=> 'existence',	'favorite'		=> 'favourite',	'fetus'			=> 'foetus',	'ficticious'	=> 'fictitious',	'flavor'		=> 'flavour',	'flourescent'	=> 'fluorescent',	'foriegn'		=> 'foreign',	'fourty'		=> 'forty',	'gage'			=> 'gauge',	'geneology'		=> 'genealogy',	'grammer'		=> 'grammar',	'gray'			=> 'grey',	'guerilla'		=> 'guerrilla',	'gynecology'	=> 'gynaecology',	'harbor'		=> 'harbour',	'heighth'		=> 'height',	'hemaglobin'	=> 'haemaglobin',	'hematin'		=> 'haematin',	'hematite'		=> 'haematite',	'hematology'	=> 'haematology',	'honor'			=> 'honour',	'innoculate'	=> 'inoculate',	'installment'	=> 'instalment',	'irrelevent'	=> 'irrelevant',	'irrevelant'	=> 'irrelevant',	'jeweler'	=> 'jeweller',	'judgment'	=> 'judgement',	'labeled'	=> 'labelled',	'labor'		=> 'labour',	'laborer'	=> 'labourer',	'laborers'	=> 'labourers',	'laboring'	=> 'labouring',	'licence'	=> 'license',	'liesure'	=> 'leisure',	'liquify'	=> 'liquefy',	'maintainance'	=> 'maintenance',	'maintenence'	=> 'maintenance',	'medieval'		=> 'mediaeval',	'meter'			=> 'metre',	'milage'		=> 'mileage',	'millipede'		=> 'millepede',	'miscelaneous'	=> 'miscellaneous',	'morgage'		=> 'mortgage',	'noticable'	=> 'noticeable',	'occurence'	=> 'occurrence',	'offense'	=> 'offence',	'ommision'	=> 'omission',	'ommission'	=> 'omission',	'optimize'	=> 'optimise',	'organize'	=> 'organise',	'pajamas'			=> 'pyjamas',	'paleography'		=> 'palaeography',	'paleolithic'		=> 'palaeolithic',	'paleontological'	=> 'palaeontological',	'paleontologist'	=> 'palaeontologist',	'paleontology'		=> 'palaeontology',	'paleozoic'			=> 'palaeozoic',	'pamplet'			=> 'pamphlet',	'paralell'			=> 'parallel',	'parl'				=> 'parliament',	'parlt'				=> 'parliament',	'pediatric'			=> 'paediatric',	'pediatrician'		=> 'paediatrician',	'pediatrics'		=> 'paediatrics',	'pedodontia'		=> 'paedodontia',	'pedodontics'		=> 'paedodontics',	'personel'			=> 'personnel',	'practise'			=> 'practice',	'program'			=> 'programme',	'psych'				=> 'psychology',	'questionaire'	=> 'questionnaire',	'rarify'		=> 'rarefy',	'reccomend'		=> 'recommend',	'recieve'		=> 'receive',	'resistence'	=> 'resistance',	'restaraunt'	=> 'restaurant',	'savior'			=> 'saviour',	'sep'				=> 'september',	'seperate'			=> 'separate',	'sept'				=> 'september',	'sieze'				=> 'seize',	'summarize'			=> 'summarise',	'summerize'			=> 'summarise',	'superceed'			=> 'supercede',	'superintendant'	=> 'superintendent',	'supersede'			=> 'supercede',	'suprise'			=> 'surprise',	'surprize'			=> 'surprise',	'synchronise'		=> 'synchronize',	'temperary'		=> 'temporary',	'theater'		=> 'theatre',	'threshhold'	=> 'threshold',	'transfered'	=> 'transferred',	'truely'		=> 'truly',	'truley'		=> 'truly',	'useable'	=> 'usable',	'valor'	=> 'valour',	'vigor'	=> 'vigour',	'vol'	=> 'volume',	'whack'		=> 'wack',	'withold'	=> 'withhold',	'yeild'	=> 'yield',);?>
<?php return array(''=>'',''=>'');
<?php return array(''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'');
<?php/**** @package phpBB3* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @ignore*/if (!defined('IN_PHPBB')){	exit;}/*** Messenger* @package phpBB3*/class messenger{	var $vars, $msg, $extra_headers, $replyto, $from, $subject;	var $addresses = array();	var $mail_priority = MAIL_NORMAL_PRIORITY;	var $use_queue = true;	var $tpl_obj = NULL;	var $tpl_msg = array();	var $eol = "\n";	/**	* Constructor	*/	function messenger($use_queue = true)	{		global $config;		$this->use_queue = (!$config['email_package_size']) ? false : $use_queue;		$this->subject = '';		// Determine EOL character (\n for UNIX, \r\n for Windows and \r for Mac)		$this->eol = (!defined('PHP_EOL')) ? (($eol = strtolower(substr(PHP_OS, 0, 3))) == 'win') ? "\r\n" : (($eol == 'mac') ? "\r" : "\n") : PHP_EOL;		$this->eol = (!$this->eol) ? "\n" : $this->eol;	}	/**	* Resets all the data (address, template file, etc etc) to default	*/	function reset()	{		$this->addresses = $this->extra_headers = array();		$this->vars = $this->msg = $this->replyto = $this->from = '';		$this->mail_priority = MAIL_NORMAL_PRIORITY;	}	/**	* Sets an email address to send to	*/	function to($address, $realname = '')	{		global $config;		if (!trim($address))		{			return;		}		$pos = isset($this->addresses['to']) ? sizeof($this->addresses['to']) : 0;		$this->addresses['to'][$pos]['email'] = trim($address);		// If empty sendmail_path on windows, PHP changes the to line		if (!$config['smtp_delivery'] && DIRECTORY_SEPARATOR == '\\')		{			$this->addresses['to'][$pos]['name'] = '';		}		else		{			$this->addresses['to'][$pos]['name'] = trim($realname);		}	}	/**	* Sets an cc address to send to	*/	function cc($address, $realname = '')	{		if (!trim($address))		{			return;		}		$pos = isset($this->addresses['cc']) ? sizeof($this->addresses['cc']) : 0;		$this->addresses['cc'][$pos]['email'] = trim($address);		$this->addresses['cc'][$pos]['name'] = trim($realname);	}	/**	* Sets an bcc address to send to	*/	function bcc($address, $realname = '')	{		if (!trim($address))		{			return;		}		$pos = isset($this->addresses['bcc']) ? sizeof($this->addresses['bcc']) : 0;		$this->addresses['bcc'][$pos]['email'] = trim($address);		$this->addresses['bcc'][$pos]['name'] = trim($realname);	}	/**	* Sets a im contact to send to	*/	function im($address, $realname = '')	{		// IM-Addresses could be empty		if (!trim($address))		{			return;		}		$pos = isset($this->addresses['im']) ? sizeof($this->addresses['im']) : 0;		$this->addresses['im'][$pos]['uid'] = trim($address);		$this->addresses['im'][$pos]['name'] = trim($realname);	}	/**	* Set the reply to address	*/	function replyto($address)	{		$this->replyto = trim($address);	}	/**	* Set the from address	*/	function from($address)	{		$this->from = trim($address);	}	/**	* set up subject for mail	*/	function subject($subject = '')	{		$this->subject = trim($subject);	}	/**	* set up extra mail headers	*/	function headers($headers)	{		$this->extra_headers[] = trim($headers);	}	/**	* Adds X-AntiAbuse headers	*	* @param array $config		Configuration array	* @param user $user			A user object	*	* @return null	*/	function anti_abuse_headers($config, $user)	{		$this->headers('X-AntiAbuse: Board servername - ' . mail_encode($config['server_name']));		$this->headers('X-AntiAbuse: User_id - ' . $user->data['user_id']);		$this->headers('X-AntiAbuse: Username - ' . mail_encode($user->data['username']));		$this->headers('X-AntiAbuse: User IP - ' . $user->ip);	}	/**	* Set the email priority	*/	function set_mail_priority($priority = MAIL_NORMAL_PRIORITY)	{		$this->mail_priority = $priority;	}	/**	* Set email template to use	*/	function template($template_file, $template_lang = '', $template_path = '')	{		global $config, $phpbb_root_path, $user;		if (!trim($template_file))		{			trigger_error('No template file for emailing set.', E_USER_ERROR);		}		if (!trim($template_lang))		{			// fall back to board default language if the user's language is			// missing $template_file.  If this does not exist either,			// $tpl->set_custom_template will do a trigger_error			$template_lang = basename($config['default_lang']);		}		// tpl_msg now holds a template object we can use to parse the template file		if (!isset($this->tpl_msg[$template_lang . $template_file]))		{			$this->tpl_msg[$template_lang . $template_file] = new template();			$tpl = &$this->tpl_msg[$template_lang . $template_file];			$fallback_template_path = false;			if (!$template_path)			{				$template_path = (!empty($user->lang_path)) ? $user->lang_path : $phpbb_root_path . 'language/';				$template_path .= $template_lang . '/email';				// we can only specify default language fallback when the path is not a custom one for which we				// do not know the default language alternative				if ($template_lang !== basename($config['default_lang']))				{					$fallback_template_path = (!empty($user->lang_path)) ? $user->lang_path : $phpbb_root_path . 'language/';					$fallback_template_path .= basename($config['default_lang']) . '/email';				}			}			$tpl->set_custom_template($template_path, $template_lang . '_email', $fallback_template_path);			$tpl->set_filenames(array(				'body'		=> $template_file . '.txt',			));		}		$this->tpl_obj = &$this->tpl_msg[$template_lang . $template_file];		$this->vars = &$this->tpl_obj->_rootref;		$this->tpl_msg = '';		return true;	}	/**	* assign variables to email template	*/	function assign_vars($vars)	{		if (!is_object($this->tpl_obj))		{			return;		}		$this->tpl_obj->assign_vars($vars);	}	function assign_block_vars($blockname, $vars)	{		if (!is_object($this->tpl_obj))		{			return;		}		$this->tpl_obj->assign_block_vars($blockname, $vars);	}	/**	* Send the mail out to the recipients set previously in var $this->addresses	*/	function send($method = NOTIFY_EMAIL, $break = false)	{		global $config, $user;		// We add some standard variables we always use, no need to specify them always		if (!isset($this->vars['U_BOARD']))		{			$this->assign_vars(array(				'U_BOARD'	=> generate_board_url(),			));		}		if (!isset($this->vars['EMAIL_SIG']))		{			$this->assign_vars(array(				'EMAIL_SIG'	=> str_replace('<br />', "\n", "-- \n" . htmlspecialchars_decode($config['board_email_sig'])),			));		}		if (!isset($this->vars['SITENAME']))		{			$this->assign_vars(array(				'SITENAME'	=> htmlspecialchars_decode($config['sitename']),			));		}		// Parse message through template		$this->msg = trim($this->tpl_obj->assign_display('body'));		// Because we use \n for newlines in the body message we need to fix line encoding errors for those admins who uploaded email template files in the wrong encoding		$this->msg = str_replace("\r\n", "\n", $this->msg);		// We now try and pull a subject from the email body ... if it exists,		// do this here because the subject may contain a variable		$drop_header = '';		$match = array();		if (preg_match('#^(Subject:(.*?))$#m', $this->msg, $match))		{			$this->subject = (trim($match[2]) != '') ? trim($match[2]) : (($this->subject != '') ? $this->subject : $user->lang['NO_EMAIL_SUBJECT']);			$drop_header .= '[\r\n]*?' . preg_quote($match[1], '#');		}		else		{			$this->subject = (($this->subject != '') ? $this->subject : $user->lang['NO_EMAIL_SUBJECT']);		}		if ($drop_header)		{			$this->msg = trim(preg_replace('#' . $drop_header . '#s', '', $this->msg));		}		if ($break)		{			return true;		}		switch ($method)		{			case NOTIFY_EMAIL:				$result = $this->msg_email();			break;			case NOTIFY_IM:				$result = $this->msg_jabber();			break;			case NOTIFY_BOTH:				$result = $this->msg_email();				$this->msg_jabber();			break;		}		$this->reset();		return $result;	}	/**	* Add error message to log	*/	function error($type, $msg)	{		global $user, $phpEx, $phpbb_root_path, $config;		// Session doesn't exist, create it		if (!isset($user->session_id) || $user->session_id === '')		{			$user->session_begin();		}		$calling_page = (!empty($_SERVER['PHP_SELF'])) ? $_SERVER['PHP_SELF'] : $_ENV['PHP_SELF'];		$message = '';		switch ($type)		{			case 'EMAIL':				$message = '<strong>EMAIL/' . (($config['smtp_delivery']) ? 'SMTP' : 'PHP/' . $config['email_function_name'] . '()') . '</strong>';			break;			default:				$message = "<strong>$type</strong>";			break;		}		$message .= '<br /><em>' . htmlspecialchars($calling_page) . '</em><br /><br />' . $msg . '<br />';		add_log('critical', 'LOG_ERROR_' . $type, $message);	}	/**	* Save to queue	*/	function save_queue()	{		global $config;		if ($config['email_package_size'] && $this->use_queue && !empty($this->queue))		{			$this->queue->save();			return;		}	}	/**	* Return email header	*/	function build_header($to, $cc, $bcc)	{		global $config;		// We could use keys here, but we won't do this for 3.0.x to retain backwards compatibility		$headers = array();		$headers[] = 'From: ' . $this->from;		if ($cc)		{			$headers[] = 'Cc: ' . $cc;		}		if ($bcc)		{			$headers[] = 'Bcc: ' . $bcc;		}		$headers[] = 'Reply-To: ' . $this->replyto;		$headers[] = 'Return-Path: <' . $config['board_email'] . '>';		$headers[] = 'Sender: <' . $config['board_email'] . '>';		$headers[] = 'MIME-Version: 1.0';		$headers[] = 'Message-ID: <' . md5(unique_id(time())) . '@' . $config['server_name'] . '>';		$headers[] = 'Date: ' . date('r', time());		$headers[] = 'Content-Type: text/plain; charset=UTF-8'; // format=flowed		$headers[] = 'Content-Transfer-Encoding: 8bit'; // 7bit		$headers[] = 'X-Priority: ' . $this->mail_priority;		$headers[] = 'X-MSMail-Priority: ' . (($this->mail_priority == MAIL_LOW_PRIORITY) ? 'Low' : (($this->mail_priority == MAIL_NORMAL_PRIORITY) ? 'Normal' : 'High'));		$headers[] = 'X-Mailer: phpBB3';		$headers[] = 'X-MimeOLE: phpBB3';		$headers[] = 'X-phpBB-Origin: phpbb://' . str_replace(array('http://', 'https://'), array('', ''), generate_board_url());		if (sizeof($this->extra_headers))		{			$headers = array_merge($headers, $this->extra_headers);		}		return $headers;	}	/**	* Send out emails	*/	function msg_email()	{		global $config, $user;		if (empty($config['email_enable']))		{			return false;		}		// Addresses to send to?		if (empty($this->addresses) || (empty($this->addresses['to']) && empty($this->addresses['cc']) && empty($this->addresses['bcc'])))		{			// Send was successful. ;)			return true;		}		$use_queue = false;		if ($config['email_package_size'] && $this->use_queue)		{			if (empty($this->queue))			{				$this->queue = new queue();				$this->queue->init('email', $config['email_package_size']);			}			$use_queue = true;		}		if (empty($this->replyto))		{			$this->replyto = '<' . $config['board_contact'] . '>';		}		if (empty($this->from))		{			$this->from = '<' . $config['board_contact'] . '>';		}		$encode_eol = ($config['smtp_delivery']) ? "\r\n" : $this->eol;		// Build to, cc and bcc strings		$to = $cc = $bcc = '';		foreach ($this->addresses as $type => $address_ary)		{			if ($type == 'im')			{				continue;			}			foreach ($address_ary as $which_ary)			{				$$type .= (($$type != '') ? ', ' : '') . (($which_ary['name'] != '') ? mail_encode($which_ary['name'], $encode_eol) . ' <' . $which_ary['email'] . '>' : $which_ary['email']);			}		}		// Build header		$headers = $this->build_header($to, $cc, $bcc);		// Send message ...		if (!$use_queue)		{			$mail_to = ($to == '') ? 'undisclosed-recipients:;' : $to;			$err_msg = '';			if ($config['smtp_delivery'])			{				$result = smtpmail($this->addresses, mail_encode($this->subject), wordwrap(utf8_wordwrap($this->msg), 997, "\n", true), $err_msg, $headers);			}			else			{				$result = phpbb_mail($mail_to, $this->subject, $this->msg, $headers, $this->eol, $err_msg);			}			if (!$result)			{				$this->error('EMAIL', $err_msg);				return false;			}		}		else		{			$this->queue->put('email', array(				'to'			=> $to,				'addresses'		=> $this->addresses,				'subject'		=> $this->subject,				'msg'			=> $this->msg,				'headers'		=> $headers)			);		}		return true;	}	/**	* Send jabber message out	*/	function msg_jabber()	{		global $config, $db, $user, $phpbb_root_path, $phpEx;		if (empty($config['jab_enable']) || empty($config['jab_host']) || empty($config['jab_username']) || empty($config['jab_password']))		{			return false;		}		if (empty($this->addresses['im']))		{			// Send was successful. ;)			return true;		}		$use_queue = false;		if ($config['jab_package_size'] && $this->use_queue)		{			if (empty($this->queue))			{				$this->queue = new queue();				$this->queue->init('jabber', $config['jab_package_size']);			}			$use_queue = true;		}		$addresses = array();		foreach ($this->addresses['im'] as $type => $uid_ary)		{			$addresses[] = $uid_ary['uid'];		}		$addresses = array_unique($addresses);		if (!$use_queue)		{			include_once($phpbb_root_path . 'includes/functions_jabber.' . $phpEx);			$this->jabber = new jabber($config['jab_host'], $config['jab_port'], $config['jab_username'], $config['jab_password'], $config['jab_use_ssl']);			if (!$this->jabber->connect())			{				$this->error('JABBER', $user->lang['ERR_JAB_CONNECT'] . '<br />' . $this->jabber->get_log());				return false;			}			if (!$this->jabber->login())			{				$this->error('JABBER', $user->lang['ERR_JAB_AUTH'] . '<br />' . $this->jabber->get_log());				return false;			}			foreach ($addresses as $address)			{				$this->jabber->send_message($address, $this->msg, $this->subject);			}			$this->jabber->disconnect();		}		else		{			$this->queue->put('jabber', array(				'addresses'		=> $addresses,				'subject'		=> $this->subject,				'msg'			=> $this->msg)			);		}		unset($addresses);		return true;	}}/*** handling email and jabber queue* @package phpBB3*/class queue{	var $data = array();	var $queue_data = array();	var $package_size = 0;	var $cache_file = '';	var $eol = "\n";	/**	* constructor	*/	function queue()	{		global $phpEx, $phpbb_root_path;		$this->data = array();		$this->cache_file = "{$phpbb_root_path}cache/queue.$phpEx";		// Determine EOL character (\n for UNIX, \r\n for Windows and \r for Mac)		$this->eol = (!defined('PHP_EOL')) ? (($eol = strtolower(substr(PHP_OS, 0, 3))) == 'win') ? "\r\n" : (($eol == 'mac') ? "\r" : "\n") : PHP_EOL;		$this->eol = (!$this->eol) ? "\n" : $this->eol;	}	/**	* Init a queue object	*/	function init($object, $package_size)	{		$this->data[$object] = array();		$this->data[$object]['package_size'] = $package_size;		$this->data[$object]['data'] = array();	}	/**	* Put object in queue	*/	function put($object, $scope)	{		$this->data[$object]['data'][] = $scope;	}	/**	* Obtains exclusive lock on queue cache file.	* Returns resource representing the lock	*/	function lock()	{		// For systems that can't have two processes opening		// one file for writing simultaneously		if (file_exists($this->cache_file . '.lock'))		{			$mode = 'rb';		}		else		{			$mode = 'wb';		}		$lock_fp = @fopen($this->cache_file . '.lock', $mode);		if ($mode == 'wb')		{			if (!$lock_fp)			{				// Two processes may attempt to create lock file at the same time.				// Have the losing process try opening the lock file again for reading				// on the assumption that the winning process created it				$mode = 'rb';				$lock_fp = @fopen($this->cache_file . '.lock', $mode);			}			else			{				// Only need to set mode when the lock file is written				@chmod($this->cache_file . '.lock', 0666);			}		}		if ($lock_fp)		{			@flock($lock_fp, LOCK_EX);		}		return $lock_fp;	}	/**	* Releases lock on queue cache file, using resource obtained from lock()	*/	function unlock($lock_fp)	{		// lock() will return null if opening lock file, and thus locking, failed.		// Accept null values here so that client code does not need to check them		if ($lock_fp)		{			@flock($lock_fp, LOCK_UN);			fclose($lock_fp);		}	}	/**	* Process queue	* Using lock file	*/	function process()	{		global $db, $config, $phpEx, $phpbb_root_path, $user;		$lock_fp = $this->lock();		set_config('last_queue_run', time(), true);		if (!file_exists($this->cache_file) || filemtime($this->cache_file) > time() - $config['queue_interval'])		{			$this->unlock($lock_fp);			return;		}		include($this->cache_file);		foreach ($this->queue_data as $object => $data_ary)		{			@set_time_limit(0);			if (!isset($data_ary['package_size']))			{				$data_ary['package_size'] = 0;			}			$package_size = $data_ary['package_size'];			$num_items = (!$package_size || sizeof($data_ary['data']) < $package_size) ? sizeof($data_ary['data']) : $package_size;			/*			* This code is commented out because it causes problems on some web hosts.			* The core problem is rather restrictive email sending limits.			* This code is nly useful if you have no such restrictions from the			* web host and the package size setting is wrong.			// If the amount of emails to be sent is way more than package_size than we need to increase it to prevent backlogs...			if (sizeof($data_ary['data']) > $package_size * 2.5)			{				$num_items = sizeof($data_ary['data']);			}			*/			switch ($object)			{				case 'email':					// Delete the email queued objects if mailing is disabled					if (!$config['email_enable'])					{						unset($this->queue_data['email']);						continue 2;					}				break;				case 'jabber':					if (!$config['jab_enable'])					{						unset($this->queue_data['jabber']);						continue 2;					}					include_once($phpbb_root_path . 'includes/functions_jabber.' . $phpEx);					$this->jabber = new jabber($config['jab_host'], $config['jab_port'], $config['jab_username'], $config['jab_password'], $config['jab_use_ssl']);					if (!$this->jabber->connect())					{						messenger::error('JABBER', $user->lang['ERR_JAB_CONNECT']);						continue 2;					}					if (!$this->jabber->login())					{						messenger::error('JABBER', $user->lang['ERR_JAB_AUTH']);						continue 2;					}				break;				default:					$this->unlock($lock_fp);					return;			}			for ($i = 0; $i < $num_items; $i++)			{				// Make variables available...				extract(array_shift($this->queue_data[$object]['data']));				switch ($object)				{					case 'email':						$err_msg = '';						$to = (!$to) ? 'undisclosed-recipients:;' : $to;						if ($config['smtp_delivery'])						{							$result = smtpmail($addresses, mail_encode($subject), wordwrap(utf8_wordwrap($msg), 997, "\n", true), $err_msg, $headers);						}						else						{							$result = phpbb_mail($to, $subject, $msg, $headers, $this->eol, $err_msg);						}						if (!$result)						{							messenger::error('EMAIL', $err_msg);							continue 2;						}					break;					case 'jabber':						foreach ($addresses as $address)						{							if ($this->jabber->send_message($address, $msg, $subject) === false)							{								messenger::error('JABBER', $this->jabber->get_log());								continue 3;							}						}					break;				}			}			// No more data for this object? Unset it			if (!sizeof($this->queue_data[$object]['data']))			{				unset($this->queue_data[$object]);			}			// Post-object processing			switch ($object)			{				case 'jabber':					// Hang about a couple of secs to ensure the messages are					// handled, then disconnect					$this->jabber->disconnect();				break;			}		}		if (!sizeof($this->queue_data))		{			@unlink($this->cache_file);		}		else		{			if ($fp = @fopen($this->cache_file, 'wb'))			{				fwrite($fp, "<?php\nif (!defined('IN_PHPBB')) exit;\n\$this->queue_data = unserialize(" . var_export(serialize($this->queue_data), true) . ");\n\n?>");				fclose($fp);				phpbb_chmod($this->cache_file, CHMOD_READ | CHMOD_WRITE);			}		}		$this->unlock($lock_fp);	}	/**	* Save queue	*/	function save()	{		if (!sizeof($this->data))		{			return;		}		$lock_fp = $this->lock();		if (file_exists($this->cache_file))		{			include($this->cache_file);			foreach ($this->queue_data as $object => $data_ary)			{				if (isset($this->data[$object]) && sizeof($this->data[$object]))				{					$this->data[$object]['data'] = array_merge($data_ary['data'], $this->data[$object]['data']);				}				else				{					$this->data[$object]['data'] = $data_ary['data'];				}			}		}		if ($fp = @fopen($this->cache_file, 'w'))		{			fwrite($fp, "<?php\nif (!defined('IN_PHPBB')) exit;\n\$this->queue_data = unserialize(" . var_export(serialize($this->data), true) . ");\n\n?>");			fclose($fp);			phpbb_chmod($this->cache_file, CHMOD_READ | CHMOD_WRITE);		}		$this->unlock($lock_fp);	}}/*** Replacement or substitute for PHP's mail command*/function smtpmail($addresses, $subject, $message, &$err_msg, $headers = false){	global $config, $user;	// Fix any bare linefeeds in the message to make it RFC821 Compliant.	$message = preg_replace("#(?<!\r)\n#si", "\r\n", $message);	if ($headers !== false)	{		if (!is_array($headers))		{			// Make sure there are no bare linefeeds in the headers			$headers = preg_replace('#(?<!\r)\n#si', "\n", $headers);			$headers = explode("\n", $headers);		}		// Ok this is rather confusing all things considered,		// but we have to grab bcc and cc headers and treat them differently		// Something we really didn't take into consideration originally		$headers_used = array();		foreach ($headers as $header)		{			if (strpos(strtolower($header), 'cc:') === 0 || strpos(strtolower($header), 'bcc:') === 0)			{				continue;			}			$headers_used[] = trim($header);		}		$headers = chop(implode("\r\n", $headers_used));	}	if (trim($subject) == '')	{		$err_msg = (isset($user->lang['NO_EMAIL_SUBJECT'])) ? $user->lang['NO_EMAIL_SUBJECT'] : 'No email subject specified';		return false;	}	if (trim($message) == '')	{		$err_msg = (isset($user->lang['NO_EMAIL_MESSAGE'])) ? $user->lang['NO_EMAIL_MESSAGE'] : 'Email message was blank';		return false;	}	$mail_rcpt = $mail_to = $mail_cc = array();	// Build correct addresses for RCPT TO command and the client side display (TO, CC)	if (isset($addresses['to']) && sizeof($addresses['to']))	{		foreach ($addresses['to'] as $which_ary)		{			$mail_to[] = ($which_ary['name'] != '') ? mail_encode(trim($which_ary['name'])) . ' <' . trim($which_ary['email']) . '>' : '<' . trim($which_ary['email']) . '>';			$mail_rcpt['to'][] = '<' . trim($which_ary['email']) . '>';		}	}	if (isset($addresses['bcc']) && sizeof($addresses['bcc']))	{		foreach ($addresses['bcc'] as $which_ary)		{			$mail_rcpt['bcc'][] = '<' . trim($which_ary['email']) . '>';		}	}	if (isset($addresses['cc']) && sizeof($addresses['cc']))	{		foreach ($addresses['cc'] as $which_ary)		{			$mail_cc[] = ($which_ary['name'] != '') ? mail_encode(trim($which_ary['name'])) . ' <' . trim($which_ary['email']) . '>' : '<' . trim($which_ary['email']) . '>';			$mail_rcpt['cc'][] = '<' . trim($which_ary['email']) . '>';		}	}	$smtp = new smtp_class();	$errno = 0;	$errstr = '';	$smtp->add_backtrace('Connecting to ' . $config['smtp_host'] . ':' . $config['smtp_port']);	// Ok we have error checked as much as we can to this point let's get on it already.	if (!class_exists('phpbb_error_collector'))	{		global $phpbb_root_path, $phpEx;		include($phpbb_root_path . 'includes/error_collector.' . $phpEx);	}	$collector = new phpbb_error_collector;	$collector->install();	$smtp->socket = fsockopen($config['smtp_host'], $config['smtp_port'], $errno, $errstr, 20);	$collector->uninstall();	$error_contents = $collector->format_errors();	if (!$smtp->socket)	{		if ($errstr)		{			$errstr = utf8_convert_message($errstr);		}		$err_msg = (isset($user->lang['NO_CONNECT_TO_SMTP_HOST'])) ? sprintf($user->lang['NO_CONNECT_TO_SMTP_HOST'], $errno, $errstr) : "Could not connect to smtp host : $errno : $errstr";		$err_msg .= ($error_contents) ? '<br /><br />' . htmlspecialchars($error_contents) : '';		return false;	}	// Wait for reply	if ($err_msg = $smtp->server_parse('220', __LINE__))	{		$smtp->close_session($err_msg);		return false;	}	// Let me in. This function handles the complete authentication process	if ($err_msg = $smtp->log_into_server($config['smtp_host'], $config['smtp_username'], $config['smtp_password'], $config['smtp_auth_method']))	{		$smtp->close_session($err_msg);		return false;	}	// From this point onward most server response codes should be 250	// Specify who the mail is from....	$smtp->server_send('MAIL FROM:<' . $config['board_email'] . '>');	if ($err_msg = $smtp->server_parse('250', __LINE__))	{		$smtp->close_session($err_msg);		return false;	}	// Specify each user to send to and build to header.	$to_header = implode(', ', $mail_to);	$cc_header = implode(', ', $mail_cc);	// Now tell the MTA to send the Message to the following people... [TO, BCC, CC]	$rcpt = false;	foreach ($mail_rcpt as $type => $mail_to_addresses)	{		foreach ($mail_to_addresses as $mail_to_address)		{			// Add an additional bit of error checking to the To field.			if (preg_match('#[^ ]+\@[^ ]+#', $mail_to_address))			{				$smtp->server_send("RCPT TO:$mail_to_address");				if ($err_msg = $smtp->server_parse('250', __LINE__))				{					// We continue... if users are not resolved we do not care					if ($smtp->numeric_response_code != 550)					{						$smtp->close_session($err_msg);						return false;					}				}				else				{					$rcpt = true;				}			}		}	}	// We try to send messages even if a few people do not seem to have valid email addresses, but if no one has, we have to exit here.	if (!$rcpt)	{		$user->session_begin();		$err_msg .= '<br /><br />';		$err_msg .= (isset($user->lang['INVALID_EMAIL_LOG'])) ? sprintf($user->lang['INVALID_EMAIL_LOG'], htmlspecialchars($mail_to_address)) : '<strong>' . htmlspecialchars($mail_to_address) . '</strong> possibly an invalid email address?';		$smtp->close_session($err_msg);		return false;	}	// Ok now we tell the server we are ready to start sending data	$smtp->server_send('DATA');	// This is the last response code we look for until the end of the message.	if ($err_msg = $smtp->server_parse('354', __LINE__))	{		$smtp->close_session($err_msg);		return false;	}	// Send the Subject Line...	$smtp->server_send("Subject: $subject");	// Now the To Header.	$to_header = ($to_header == '') ? 'undisclosed-recipients:;' : $to_header;	$smtp->server_send("To: $to_header");	// Now the CC Header.	if ($cc_header != '')	{		$smtp->server_send("CC: $cc_header");	}	// Now any custom headers....	if ($headers !== false)	{		$smtp->server_send("$headers\r\n");	}	// Ok now we are ready for the message...	$smtp->server_send($message);	// Ok the all the ingredients are mixed in let's cook this puppy...	$smtp->server_send('.');	if ($err_msg = $smtp->server_parse('250', __LINE__))	{		$smtp->close_session($err_msg);		return false;	}	// Now tell the server we are done and close the socket...	$smtp->server_send('QUIT');	$smtp->close_session($err_msg);	return true;}/*** SMTP Class* Auth Mechanisms originally taken from the AUTH Modules found within the PHP Extension and Application Repository (PEAR)* See docs/AUTHORS for more details* @package phpBB3*/class smtp_class{	var $server_response = '';	var $socket = 0;	var $responses = array();	var $commands = array();	var $numeric_response_code = 0;	var $backtrace = false;	var $backtrace_log = array();	function smtp_class()	{		// Always create a backtrace for admins to identify SMTP problems		$this->backtrace = true;		$this->backtrace_log = array();	}	/**	* Add backtrace message for debugging	*/	function add_backtrace($message)	{		if ($this->backtrace)		{			$this->backtrace_log[] = utf8_htmlspecialchars($message);		}	}	/**	* Send command to smtp server	*/	function server_send($command, $private_info = false)	{		fputs($this->socket, $command . "\r\n");		(!$private_info) ? $this->add_backtrace("# $command") : $this->add_backtrace('# Omitting sensitive information');		// We could put additional code here	}	/**	* We use the line to give the support people an indication at which command the error occurred	*/	function server_parse($response, $line)	{		global $user;		$this->server_response = '';		$this->responses = array();		$this->numeric_response_code = 0;		while (substr($this->server_response, 3, 1) != ' ')		{			if (!($this->server_response = fgets($this->socket, 256)))			{				return (isset($user->lang['NO_EMAIL_RESPONSE_CODE'])) ? $user->lang['NO_EMAIL_RESPONSE_CODE'] : 'Could not get mail server response codes';			}			$this->responses[] = substr(rtrim($this->server_response), 4);			$this->numeric_response_code = (int) substr($this->server_response, 0, 3);			$this->add_backtrace("LINE: $line <- {$this->server_response}");		}		if (!(substr($this->server_response, 0, 3) == $response))		{			$this->numeric_response_code = (int) substr($this->server_response, 0, 3);			return (isset($user->lang['EMAIL_SMTP_ERROR_RESPONSE'])) ? sprintf($user->lang['EMAIL_SMTP_ERROR_RESPONSE'], $line, $this->server_response) : "Ran into problems sending Mail at <strong>Line $line</strong>. Response: $this->server_response";		}		return 0;	}	/**	* Close session	*/	function close_session(&$err_msg)	{		fclose($this->socket);		if ($this->backtrace)		{			$message = '<h1>Backtrace</h1><p>' . implode('<br />', $this->backtrace_log) . '</p>';			$err_msg .= $message;		}	}	/**	* Log into server and get possible auth codes if neccessary	*/	function log_into_server($hostname, $username, $password, $default_auth_method)	{		global $user;		$err_msg = '';		// Here we try to determine the *real* hostname (reverse DNS entry preferrably)		$local_host = $user->host;		if (function_exists('php_uname'))		{			$local_host = php_uname('n');			// Able to resolve name to IP			if (($addr = @gethostbyname($local_host)) !== $local_host)			{				// Able to resolve IP back to name				if (($name = @gethostbyaddr($addr)) !== $addr)				{					$local_host = $name;				}			}		}		// If we are authenticating through pop-before-smtp, we		// have to login ones before we get authenticated		// NOTE: on some configurations the time between an update of the auth database takes so		// long that the first email send does not work. This is not a biggie on a live board (only		// the install mail will most likely fail) - but on a dynamic ip connection this might produce		// severe problems and is not fixable!		if ($default_auth_method == 'POP-BEFORE-SMTP' && $username && $password)		{			global $config;			$errno = 0;			$errstr = '';			$this->server_send("QUIT");			fclose($this->socket);			$result = $this->pop_before_smtp($hostname, $username, $password);			$username = $password = $default_auth_method = '';			// We need to close the previous session, else the server is not			// able to get our ip for matching...			if (!$this->socket = @fsockopen($config['smtp_host'], $config['smtp_port'], $errno, $errstr, 10))			{				if ($errstr)				{					$errstr = utf8_convert_message($errstr);				}				$err_msg = (isset($user->lang['NO_CONNECT_TO_SMTP_HOST'])) ? sprintf($user->lang['NO_CONNECT_TO_SMTP_HOST'], $errno, $errstr) : "Could not connect to smtp host : $errno : $errstr";				return $err_msg;			}			// Wait for reply			if ($err_msg = $this->server_parse('220', __LINE__))			{				$this->close_session($err_msg);				return $err_msg;			}		}		// Try EHLO first		$this->server_send("EHLO {$local_host}");		if ($err_msg = $this->server_parse('250', __LINE__))		{			// a 503 response code means that we're already authenticated			if ($this->numeric_response_code == 503)			{				return false;			}			// If EHLO fails, we try HELO			$this->server_send("HELO {$local_host}");			if ($err_msg = $this->server_parse('250', __LINE__))			{				return ($this->numeric_response_code == 503) ? false : $err_msg;			}		}		foreach ($this->responses as $response)		{			$response = explode(' ', $response);			$response_code = $response[0];			unset($response[0]);			$this->commands[$response_code] = implode(' ', $response);		}		// If we are not authenticated yet, something might be wrong if no username and passwd passed		if (!$username || !$password)		{			return false;		}		if (!isset($this->commands['AUTH']))		{			return (isset($user->lang['SMTP_NO_AUTH_SUPPORT'])) ? $user->lang['SMTP_NO_AUTH_SUPPORT'] : 'SMTP server does not support authentication';		}		// Get best authentication method		$available_methods = explode(' ', $this->commands['AUTH']);		// Define the auth ordering if the default auth method was not found		$auth_methods = array('PLAIN', 'LOGIN', 'CRAM-MD5', 'DIGEST-MD5');		$method = '';		if (in_array($default_auth_method, $available_methods))		{			$method = $default_auth_method;		}		else		{			foreach ($auth_methods as $_method)			{				if (in_array($_method, $available_methods))				{					$method = $_method;					break;				}			}		}		if (!$method)		{			return (isset($user->lang['NO_SUPPORTED_AUTH_METHODS'])) ? $user->lang['NO_SUPPORTED_AUTH_METHODS'] : 'No supported authentication methods';		}		$method = strtolower(str_replace('-', '_', $method));		return $this->$method($username, $password);	}	/**	* Pop before smtp authentication	*/	function pop_before_smtp($hostname, $username, $password)	{		global $user;		if (!$this->socket = @fsockopen($hostname, 110, $errno, $errstr, 10))		{			if ($errstr)			{				$errstr = utf8_convert_message($errstr);			}			return (isset($user->lang['NO_CONNECT_TO_SMTP_HOST'])) ? sprintf($user->lang['NO_CONNECT_TO_SMTP_HOST'], $errno, $errstr) : "Could not connect to smtp host : $errno : $errstr";		}		$this->server_send("USER $username", true);		if ($err_msg = $this->server_parse('+OK', __LINE__))		{			return $err_msg;		}		$this->server_send("PASS $password", true);		if ($err_msg = $this->server_parse('+OK', __LINE__))		{			return $err_msg;		}		$this->server_send('QUIT');		fclose($this->socket);		return false;	}	/**	* Plain authentication method	*/	function plain($username, $password)	{		$this->server_send('AUTH PLAIN');		if ($err_msg = $this->server_parse('334', __LINE__))		{			return ($this->numeric_response_code == 503) ? false : $err_msg;		}		$base64_method_plain = base64_encode("\0" . $username . "\0" . $password);		$this->server_send($base64_method_plain, true);		if ($err_msg = $this->server_parse('235', __LINE__))		{			return $err_msg;		}		return false;	}	/**	* Login authentication method	*/	function login($username, $password)	{		$this->server_send('AUTH LOGIN');		if ($err_msg = $this->server_parse('334', __LINE__))		{			return ($this->numeric_response_code == 503) ? false : $err_msg;		}		$this->server_send(base64_encode($username), true);		if ($err_msg = $this->server_parse('334', __LINE__))		{			return $err_msg;		}		$this->server_send(base64_encode($password), true);		if ($err_msg = $this->server_parse('235', __LINE__))		{			return $err_msg;		}		return false;	}	/**	* cram_md5 authentication method	*/	function cram_md5($username, $password)	{		$this->server_send('AUTH CRAM-MD5');		if ($err_msg = $this->server_parse('334', __LINE__))		{			return ($this->numeric_response_code == 503) ? false : $err_msg;		}		$md5_challenge = base64_decode($this->responses[0]);		$password = (strlen($password) > 64) ? pack('H32', md5($password)) : ((strlen($password) < 64) ? str_pad($password, 64, chr(0)) : $password);		$md5_digest = md5((substr($password, 0, 64) ^ str_repeat(chr(0x5C), 64)) . (pack('H32', md5((substr($password, 0, 64) ^ str_repeat(chr(0x36), 64)) . $md5_challenge))));		$base64_method_cram_md5 = base64_encode($username . ' ' . $md5_digest);		$this->server_send($base64_method_cram_md5, true);		if ($err_msg = $this->server_parse('235', __LINE__))		{			return $err_msg;		}		return false;	}	/**	* digest_md5 authentication method	* A real pain in the ***	*/	function digest_md5($username, $password)	{		global $config, $user;		$this->server_send('AUTH DIGEST-MD5');		if ($err_msg = $this->server_parse('334', __LINE__))		{			return ($this->numeric_response_code == 503) ? false : $err_msg;		}		$md5_challenge = base64_decode($this->responses[0]);		// Parse the md5 challenge - from AUTH_SASL (PEAR)		$tokens = array();		while (preg_match('/^([a-z-]+)=("[^"]+(?<!\\\)"|[^,]+)/i', $md5_challenge, $matches))		{			// Ignore these as per rfc2831			if ($matches[1] == 'opaque' || $matches[1] == 'domain')			{				$md5_challenge = substr($md5_challenge, strlen($matches[0]) + 1);				continue;			}			// Allowed multiple "realm" and "auth-param"			if (!empty($tokens[$matches[1]]) && ($matches[1] == 'realm' || $matches[1] == 'auth-param'))			{				if (is_array($tokens[$matches[1]]))				{					$tokens[$matches[1]][] = preg_replace('/^"(.*)"$/', '\\1', $matches[2]);				}				else				{					$tokens[$matches[1]] = array($tokens[$matches[1]], preg_replace('/^"(.*)"$/', '\\1', $matches[2]));				}			}			else if (!empty($tokens[$matches[1]])) // Any other multiple instance = failure			{				$tokens = array();				break;			}			else			{				$tokens[$matches[1]] = preg_replace('/^"(.*)"$/', '\\1', $matches[2]);			}			// Remove the just parsed directive from the challenge			$md5_challenge = substr($md5_challenge, strlen($matches[0]) + 1);		}		// Realm		if (empty($tokens['realm']))		{			$tokens['realm'] = (function_exists('php_uname')) ? php_uname('n') : $user->host;		}		// Maxbuf		if (empty($tokens['maxbuf']))		{			$tokens['maxbuf'] = 65536;		}		// Required: nonce, algorithm		if (empty($tokens['nonce']) || empty($tokens['algorithm']))		{			$tokens = array();		}		$md5_challenge = $tokens;		if (!empty($md5_challenge))		{			$str = '';			for ($i = 0; $i < 32; $i++)			{				$str .= chr(mt_rand(0, 255));			}			$cnonce = base64_encode($str);			$digest_uri = 'smtp/' . $config['smtp_host'];			$auth_1 = sprintf('%s:%s:%s', pack('H32', md5(sprintf('%s:%s:%s', $username, $md5_challenge['realm'], $password))), $md5_challenge['nonce'], $cnonce);			$auth_2 = 'AUTHENTICATE:' . $digest_uri;			$response_value = md5(sprintf('%s:%s:00000001:%s:auth:%s', md5($auth_1), $md5_challenge['nonce'], $cnonce, md5($auth_2)));			$input_string = sprintf('username="%s",realm="%s",nonce="%s",cnonce="%s",nc="00000001",qop=auth,digest-uri="%s",response=%s,%d', $username, $md5_challenge['realm'], $md5_challenge['nonce'], $cnonce, $digest_uri, $response_value, $md5_challenge['maxbuf']);		}		else		{			return (isset($user->lang['INVALID_DIGEST_CHALLENGE'])) ? $user->lang['INVALID_DIGEST_CHALLENGE'] : 'Invalid digest challenge';		}		$base64_method_digest_md5 = base64_encode($input_string);		$this->server_send($base64_method_digest_md5, true);		if ($err_msg = $this->server_parse('334', __LINE__))		{			return $err_msg;		}		$this->server_send(' ');		if ($err_msg = $this->server_parse('235', __LINE__))		{			return $err_msg;		}		return false;	}}/*** Encodes the given string for proper display in UTF-8.** This version is using base64 encoded data. The downside of this* is if the mail client does not understand this encoding the user* is basically doomed with an unreadable subject.** Please note that this version fully supports RFC 2045 section 6.8.** @param string $eol End of line we are using (optional to be backwards compatible)*/function mail_encode($str, $eol = "\r\n"){	// define start delimimter, end delimiter and spacer	$start = "=?UTF-8?B?";	$end = "?=";	$delimiter = "$eol ";	// Maximum length is 75. $split_length *must* be a multiple of 4, but <= 75 - strlen($start . $delimiter . $end)!!!	$split_length = 60;	$encoded_str = base64_encode($str);	// If encoded string meets the limits, we just return with the correct data.	if (strlen($encoded_str) <= $split_length)	{		return $start . $encoded_str . $end;	}	// If there is only ASCII data, we just return what we want, correctly splitting the lines.	if (strlen($str) === utf8_strlen($str))	{		return $start . implode($end . $delimiter . $start, str_split($encoded_str, $split_length)) . $end;	}	// UTF-8 data, compose encoded lines	$array = utf8_str_split($str);	$str = '';	while (sizeof($array))	{		$text = '';		while (sizeof($array) && intval((strlen($text . $array[0]) + 2) / 3) << 2 <= $split_length)		{			$text .= array_shift($array);		}		$str .= $start . base64_encode($text) . $end . $delimiter;	}	return substr($str, 0, -strlen($delimiter));}/*** Wrapper for sending out emails with the PHP's mail function*/function phpbb_mail($to, $subject, $msg, $headers, $eol, &$err_msg){	global $config, $phpbb_root_path, $phpEx;	// We use the EOL character for the OS here because the PHP mail function does not correctly transform line endings. On Windows SMTP is used (SMTP is \r\n), on UNIX a command is used...	// Reference: http://bugs.php.net/bug.php?id=15841	$headers = implode($eol, $headers);	if (!class_exists('phpbb_error_collector'))	{		include($phpbb_root_path . 'includes/error_collector.' . $phpEx);	}	$collector = new phpbb_error_collector;	$collector->install();	// On some PHP Versions mail() *may* fail if there are newlines within the subject.	// Newlines are used as a delimiter for lines in mail_encode() according to RFC 2045 section 6.8.	// Because PHP can't decide what is wanted we revert back to the non-RFC-compliant way of separating by one space (Use '' as parameter to mail_encode() results in SPACE used)	$result = $config['email_function_name']($to, mail_encode($subject, ''), wordwrap(utf8_wordwrap($msg), 997, "\n", true), $headers);	$collector->uninstall();	$err_msg = $collector->format_errors();	return $result;}?>
<?php/*** Corrects user_email_hash values if DB moved from 32-bit system to 64-bit system or vice versa.* The CRC32 function in PHP generates different results for both systems.* @PHP dev team: no, a hexdec() applied to it does not solve the issue. And please document it.**/die("Please read the first lines of this script for instructions on how to enable it");set_time_limit(0);define('IN_PHPBB', true);$phpbb_root_path = './../';$phpEx = substr(strrchr(__FILE__, '.'), 1);include($phpbb_root_path . 'common.' . $phpEx);// Start session management$user->session_begin();$auth->acl($user->data);$user->setup();$start = request_var('start', 0);$num_items = 1000;echo '<br />Updating user email hashes' . "\n";$sql = 'SELECT user_id, user_email	FROM ' . USERS_TABLE . '	ORDER BY user_id ASC';$result = $db->sql_query($sql);$echos = 0;while ($row = $db->sql_fetchrow($result)){	$echos++;	$sql = 'UPDATE ' . USERS_TABLE . "		SET user_email_hash = '" . $db->sql_escape(phpbb_email_hash($row['user_email'])) . "'		WHERE user_id = " . (int) $row['user_id'];	$db->sql_query($sql);	if ($echos == 200)	{		echo '<br />';		$echos = 0;	}	echo '.';	flush();}$db->sql_freeresult($result);echo 'FINISHED';// Done$db->sql_close();?>
<?php/**** @package install* @version $Id$* @copyright (c) 2006 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**/if (!defined('IN_PHPBB')){	exit;}/*** Helper functions for phpBB 2.0.x to phpBB 3.0.x conversion*//*** Set forum flags - only prune old polls by default*/function phpbb_forum_flags(){	// Set forum flags	$forum_flags = 0;	// FORUM_FLAG_LINK_TRACK	$forum_flags += 0;	// FORUM_FLAG_PRUNE_POLL	$forum_flags += FORUM_FLAG_PRUNE_POLL;	// FORUM_FLAG_PRUNE_ANNOUNCE	$forum_flags += 0;	// FORUM_FLAG_PRUNE_STICKY	$forum_flags += 0;	// FORUM_FLAG_ACTIVE_TOPICS	$forum_flags += 0;	// FORUM_FLAG_POST_REVIEW	$forum_flags += FORUM_FLAG_POST_REVIEW;	return $forum_flags;}/*** Insert/Convert forums*/function phpbb_insert_forums(){	global $db, $src_db, $same_db, $convert, $user, $config;	$db->sql_query($convert->truncate_statement . FORUMS_TABLE);	// Determine the highest id used within the old forums table (we add the categories after the forum ids)	$sql = 'SELECT MAX(forum_id) AS max_forum_id		FROM ' . $convert->src_table_prefix . 'forums';	$result = $src_db->sql_query($sql);	$max_forum_id = (int) $src_db->sql_fetchfield('max_forum_id');	$src_db->sql_freeresult($result);	$max_forum_id++;	// pruning disabled globally?	$sql = "SELECT config_value		FROM {$convert->src_table_prefix}config		WHERE config_name = 'prune_enable'";	$result = $src_db->sql_query($sql);	$prune_enabled = (int) $src_db->sql_fetchfield('config_value');	$src_db->sql_freeresult($result);	// Insert categories	$sql = 'SELECT cat_id, cat_title		FROM ' . $convert->src_table_prefix . 'categories		ORDER BY cat_order';	if ($convert->mysql_convert && $same_db)	{		$src_db->sql_query("SET NAMES 'binary'");	}	$result = $src_db->sql_query($sql);	if ($convert->mysql_convert && $same_db)	{		$src_db->sql_query("SET NAMES 'utf8'");	}	switch ($db->sql_layer)	{		case 'mssql':		case 'mssql_odbc':		case 'mssqlnative':			$db->sql_query('SET IDENTITY_INSERT ' . FORUMS_TABLE . ' ON');		break;	}	$cats_added = array();	while ($row = $src_db->sql_fetchrow($result))	{		$sql_ary = array(			'forum_id'		=> (int) $max_forum_id,			'forum_name'	=> ($row['cat_title']) ? htmlspecialchars(phpbb_set_default_encoding($row['cat_title']), ENT_COMPAT, 'UTF-8') : $user->lang['CATEGORY'],			'parent_id'		=> 0,			'forum_parents'	=> '',			'forum_desc'	=> '',			'forum_type'	=> FORUM_CAT,			'forum_status'	=> ITEM_UNLOCKED,			'forum_rules'	=> '',		);		$sql = 'SELECT MAX(right_id) AS right_id			FROM ' . FORUMS_TABLE;		$_result = $db->sql_query($sql);		$cat_row = $db->sql_fetchrow($_result);		$db->sql_freeresult($_result);		$sql_ary['left_id'] = (int) ($cat_row['right_id'] + 1);		$sql_ary['right_id'] = (int) ($cat_row['right_id'] + 2);		$sql = 'INSERT INTO ' . FORUMS_TABLE . ' ' . $db->sql_build_array('INSERT', $sql_ary);		$db->sql_query($sql);		$cats_added[$row['cat_id']] = $max_forum_id;		$max_forum_id++;	}	$src_db->sql_freeresult($result);	// There may be installations having forums with non-existant category ids.	// We try to catch them and add them to an "unknown" category instead of leaving them out.	$sql = 'SELECT cat_id		FROM ' . $convert->src_table_prefix . 'forums		GROUP BY cat_id';	$result = $src_db->sql_query($sql);	$unknown_cat_id = false;	while ($row = $src_db->sql_fetchrow($result))	{		// Catch those categories not been added before		if (!isset($cats_added[$row['cat_id']]))		{			$unknown_cat_id = true;		}	}	$src_db->sql_freeresult($result);	// Is there at least one category not known?	if ($unknown_cat_id === true)	{		$unknown_cat_id = 'ghost';		$sql_ary = array(			'forum_id'		=> (int) $max_forum_id,			'forum_name'	=> (string) $user->lang['CATEGORY'],			'parent_id'		=> 0,			'forum_parents'	=> '',			'forum_desc'	=> '',			'forum_type'	=> FORUM_CAT,			'forum_status'	=> ITEM_UNLOCKED,			'forum_rules'	=> '',		);		$sql = 'SELECT MAX(right_id) AS right_id			FROM ' . FORUMS_TABLE;		$_result = $db->sql_query($sql);		$cat_row = $db->sql_fetchrow($_result);		$db->sql_freeresult($_result);		$sql_ary['left_id'] = (int) ($cat_row['right_id'] + 1);		$sql_ary['right_id'] = (int) ($cat_row['right_id'] + 2);		$sql = 'INSERT INTO ' . FORUMS_TABLE . ' ' . $db->sql_build_array('INSERT', $sql_ary);		$db->sql_query($sql);		$cats_added[$unknown_cat_id] = $max_forum_id;		$max_forum_id++;	}	// Now insert the forums	$sql = 'SELECT f.forum_id, f.forum_name, f.cat_id, f.forum_desc, f.forum_status, f.prune_enable, f.prune_next, fp.prune_days, fp.prune_freq FROM ' . $convert->src_table_prefix . 'forums f		LEFT JOIN ' . $convert->src_table_prefix . 'forum_prune fp ON f.forum_id = fp.forum_id		GROUP BY f.forum_id, f.forum_name, f.cat_id, f.forum_desc, f.forum_status, f.prune_enable, f.prune_next, f.forum_order, fp.prune_days, fp.prune_freq		ORDER BY f.cat_id, f.forum_order';	if ($convert->mysql_convert && $same_db)	{		$src_db->sql_query("SET NAMES 'binary'");	}	$result = $src_db->sql_query($sql);	if ($convert->mysql_convert && $same_db)	{		$src_db->sql_query("SET NAMES 'utf8'");	}	while ($row = $src_db->sql_fetchrow($result))	{		// Some might have forums here with an id not being "possible"...		// To be somewhat friendly we "change" the category id for those to a previously created ghost category		if (!isset($cats_added[$row['cat_id']]) && $unknown_cat_id !== false)		{			$row['cat_id'] = $unknown_cat_id;		}		if (!isset($cats_added[$row['cat_id']]))		{			continue;		}		// Define the new forums sql ary		$sql_ary = array(			'forum_id'			=> (int) $row['forum_id'],			'forum_name'		=> htmlspecialchars(phpbb_set_default_encoding($row['forum_name']), ENT_COMPAT, 'UTF-8'),			'parent_id'			=> (int) $cats_added[$row['cat_id']],			'forum_parents'		=> '',			'forum_desc'		=> htmlspecialchars(phpbb_set_default_encoding($row['forum_desc']), ENT_COMPAT, 'UTF-8'),			'forum_type'		=> FORUM_POST,			'forum_status'		=> is_item_locked($row['forum_status']),			'enable_prune'		=> ($prune_enabled) ? (int)$row['prune_enable'] : 0,			'prune_next'		=> (int) null_to_zero($row['prune_next']),			'prune_days'		=> (int) null_to_zero($row['prune_days']),			'prune_viewed'		=> 0,			'prune_freq'		=> (int) null_to_zero($row['prune_freq']),			'forum_flags'		=> phpbb_forum_flags(),			'forum_options'		=> 0,			// Default values			'forum_desc_bitfield'		=> '',			'forum_desc_options'		=> 7,			'forum_desc_uid'			=> '',			'forum_link'				=> '',			'forum_password'			=> '',			'forum_style'				=> 0,			'forum_image'				=> '',			'forum_rules'				=> '',			'forum_rules_link'			=> '',			'forum_rules_bitfield'		=> '',			'forum_rules_options'		=> 7,			'forum_rules_uid'			=> '',			'forum_topics_per_page'		=> 0,			'forum_posts'				=> 0,			'forum_topics'				=> 0,			'forum_topics_real'			=> 0,			'forum_last_post_id'		=> 0,			'forum_last_poster_id'		=> 0,			'forum_last_post_subject'	=> '',			'forum_last_post_time'		=> 0,			'forum_last_poster_name'	=> '',			'forum_last_poster_colour'	=> '',			'display_on_index'			=> 1,			'enable_indexing'			=> 1,			'enable_icons'				=> 0,		);		// Now add the forums with proper left/right ids		$sql = 'SELECT left_id, right_id			FROM ' . FORUMS_TABLE . '			WHERE forum_id = ' . $cats_added[$row['cat_id']];		$_result = $db->sql_query($sql);		$cat_row = $db->sql_fetchrow($_result);		$db->sql_freeresult($_result);		$sql = 'UPDATE ' . FORUMS_TABLE . '			SET left_id = left_id + 2, right_id = right_id + 2			WHERE left_id > ' . $cat_row['right_id'];		$db->sql_query($sql);		$sql = 'UPDATE ' . FORUMS_TABLE . '			SET right_id = right_id + 2			WHERE ' . $cat_row['left_id'] . ' BETWEEN left_id AND right_id';		$db->sql_query($sql);		$sql_ary['left_id'] = (int) $cat_row['right_id'];		$sql_ary['right_id'] = (int) ($cat_row['right_id'] + 1);		$sql = 'INSERT INTO ' . FORUMS_TABLE . ' ' . $db->sql_build_array('INSERT', $sql_ary);		$db->sql_query($sql);	}	$src_db->sql_freeresult($result);	switch ($db->sql_layer)	{		case 'postgres':			$db->sql_query("SELECT SETVAL('" . FORUMS_TABLE . "_seq',(select case when max(forum_id)>0 then max(forum_id)+1 else 1 end from " . FORUMS_TABLE . '));');		break;		case 'mssql':		case 'mssql_odbc':		case 'mssqlnative':			$db->sql_query('SET IDENTITY_INSERT ' . FORUMS_TABLE . ' OFF');		break;		case 'oracle':			$result = $db->sql_query('SELECT MAX(forum_id) as max_id FROM ' . FORUMS_TABLE);			$row = $db->sql_fetchrow($result);			$db->sql_freeresult($result);			$largest_id = (int) $row['max_id'];			if ($largest_id)			{				$db->sql_query('DROP SEQUENCE ' . FORUMS_TABLE . '_seq');				$db->sql_query('CREATE SEQUENCE ' . FORUMS_TABLE . '_seq START WITH ' . ($largest_id + 1));			}		break;	}}/*** Function for recoding text with the default language** @param string $text text to recode to utf8* @param bool $grab_user_lang if set to true the function tries to use $convert_row['user_lang'] (and falls back to $convert_row['poster_id']) instead of the boards default language*/function phpbb_set_encoding($text, $grab_user_lang = true){	global $lang_enc_array, $convert_row;	global $convert, $phpEx;	/*static $lang_enc_array = array(		'korean'						=> 'euc-kr',		'serbian'						=> 'windows-1250',		'polish'						=> 'iso-8859-2',		'kurdish'						=> 'windows-1254',		'slovak'						=> 'Windows-1250',		'russian'						=> 'windows-1251',		'estonian'						=> 'iso-8859-4',		'chinese_simplified'			=> 'gb2312',		'macedonian'					=> 'windows-1251',		'azerbaijani'					=> 'UTF-8',		'romanian'						=> 'iso-8859-2',		'romanian_diacritice'			=> 'iso-8859-2',		'lithuanian'					=> 'windows-1257',		'turkish'						=> 'iso-8859-9',		'ukrainian'						=> 'windows-1251',		'japanese'						=> 'shift_jis',		'hungarian'						=> 'ISO-8859-2',		'romanian_no_diacritics'		=> 'iso-8859-2',		'mongolian'						=> 'UTF-8',		'slovenian'						=> 'windows-1250',		'bosnian'						=> 'windows-1250',		'czech'							=> 'Windows-1250',		'farsi'							=> 'Windows-1256',		'croatian'						=> 'windows-1250',		'greek'							=> 'iso-8859-7',		'russian_tu'					=> 'windows-1251',		'sakha'							=> 'UTF-8',		'serbian_cyrillic'				=> 'windows-1251',		'bulgarian'						=> 'windows-1251',		'chinese_traditional_taiwan'	=> 'big5',		'chinese_traditional'			=> 'big5',		'arabic'						=> 'windows-1256',		'hebrew'						=> 'WINDOWS-1255',		'thai'							=> 'windows-874',		//'chinese_traditional_taiwan'	=> 'utf-8' // custom modified, we may have to do an include :-(	);*/	if (empty($lang_enc_array))	{		$lang_enc_array = array();	}	$get_lang = trim(get_config_value('default_lang'));	// Do we need the users language encoding?	if ($grab_user_lang && !empty($convert_row))	{		if (!empty($convert_row['user_lang']))		{			$get_lang = trim($convert_row['user_lang']);		}		else if (!empty($convert_row['poster_id']))		{			global $src_db, $same_db;			if ($convert->mysql_convert && $same_db)			{				$src_db->sql_query("SET NAMES 'binary'");			}			$sql = 'SELECT user_lang				FROM ' . $convert->src_table_prefix . 'users				WHERE user_id = ' . (int) $convert_row['poster_id'];			$result = $src_db->sql_query($sql);			$get_lang = (string) $src_db->sql_fetchfield('user_lang');			$src_db->sql_freeresult($result);			if ($convert->mysql_convert && $same_db)			{				$src_db->sql_query("SET NAMES 'utf8'");			}			$get_lang = (!trim($get_lang)) ? trim(get_config_value('default_lang')) : trim($get_lang);		}	}	if (!isset($lang_enc_array[$get_lang]))	{		$filename = $convert->options['forum_path'] . '/language/lang_' . $get_lang . '/lang_main.' . $phpEx;		if (!file_exists($filename))		{			$get_lang = trim(get_config_value('default_lang'));		}		if (!isset($lang_enc_array[$get_lang]))		{			include($convert->options['forum_path'] . '/language/lang_' . $get_lang . '/lang_main.' . $phpEx);			$lang_enc_array[$get_lang] = $lang['ENCODING'];			unset($lang);		}	}	$encoding = $lang_enc_array[$get_lang];	return utf8_recode($text, $lang_enc_array[$get_lang]);}/*** Same as phpbb_set_encoding, but forcing boards default language*/function phpbb_set_default_encoding($text){	return phpbb_set_encoding($text, false);}/*** Convert Birthday from Birthday MOD to phpBB Format*/function phpbb_get_birthday($birthday = ''){	if (defined('MOD_BIRTHDAY_TERRA'))	{		$birthday = (string) $birthday;		// stored as month, day, year		if (!$birthday)		{			return ' 0- 0-   0';		}		// We use the original mod code to retrieve the birthday (not ideal)		preg_match('/(..)(..)(....)/', sprintf('%08d', $birthday), $birthday_parts);		$month = $birthday_parts[1];		$day = $birthday_parts[2];		$year =  $birthday_parts[3];		return sprintf('%2d-%2d-%4d', $day, $month, $year);	}	else	{		$birthday = (int) $birthday;		if (!$birthday || $birthday == 999999 || ((version_compare(PHP_VERSION, '5.1.0') < 0) && $birthday < 0))		{			return ' 0- 0-   0';		}		// The birthday mod from niels is using this code to transform to day/month/year		return sprintf('%2d-%2d-%4d', gmdate('j', $birthday * 86400 + 1), gmdate('n', $birthday * 86400 + 1), gmdate('Y', $birthday * 86400 + 1));	}}/*** Return correct user id value* Everyone's id will be one higher to allow the guest/anonymous user to have a positive id as well*/function phpbb_user_id($user_id){	global $config;	// Increment user id if the old forum is having a user with the id 1	if (!isset($config['increment_user_id']))	{		global $src_db, $same_db, $convert;		if ($convert->mysql_convert && $same_db)		{			$src_db->sql_query("SET NAMES 'binary'");		}		// Now let us set a temporary config variable for user id incrementing		$sql = "SELECT user_id			FROM {$convert->src_table_prefix}users			WHERE user_id = 1";		$result = $src_db->sql_query($sql);		$id = (int) $src_db->sql_fetchfield('user_id');		$src_db->sql_freeresult($result);		// Try to get the maximum user id possible...		$sql = "SELECT MAX(user_id) AS max_user_id			FROM {$convert->src_table_prefix}users";		$result = $src_db->sql_query($sql);		$max_id = (int) $src_db->sql_fetchfield('max_user_id');		$src_db->sql_freeresult($result);		if ($convert->mysql_convert && $same_db)		{			$src_db->sql_query("SET NAMES 'utf8'");		}		// If there is a user id 1, we need to increment user ids. :/		if ($id === 1)		{			set_config('increment_user_id', ($max_id + 1), true);			$config['increment_user_id'] = $max_id + 1;		}		else		{			set_config('increment_user_id', 0, true);			$config['increment_user_id'] = 0;		}	}	// If the old user id is -1 in 2.0.x it is the anonymous user...	if ($user_id == -1)	{		return ANONYMOUS;	}	if (!empty($config['increment_user_id']) && $user_id == 1)	{		return $config['increment_user_id'];	}	// A user id of 0 can happen, for example within the ban table if no user is banned...	// Within the posts and topics table this can be "dangerous" but is the fault of the user	// having mods installed (a poster id of 0 is not possible in 2.0.x).	// Therefore, we return the user id "as is".	return (int) $user_id;}/* Copy additional table fields from old forum to new forum if user wants this (for Mod compatibility for example)function phpbb_copy_table_fields(){}*//*** Convert authentication* user, group and forum table has to be filled in order to work*/function phpbb_convert_authentication($mode){	global $db, $src_db, $same_db, $convert, $user, $config, $cache;	if ($mode == 'start')	{		$db->sql_query($convert->truncate_statement . ACL_USERS_TABLE);		$db->sql_query($convert->truncate_statement . ACL_GROUPS_TABLE);		// What we will do is handling all 2.0.x admins as founder to replicate what is common in 2.0.x.		// After conversion the main admin need to make sure he is removing permissions and the founder status if wanted.		// Grab user ids of users with user_level of ADMIN		$sql = "SELECT user_id			FROM {$convert->src_table_prefix}users			WHERE user_level = 1			ORDER BY user_regdate ASC";		$result = $src_db->sql_query($sql);		while ($row = $src_db->sql_fetchrow($result))		{			$user_id = (int) phpbb_user_id($row['user_id']);			// Set founder admin...			$sql = 'UPDATE ' . USERS_TABLE . '				SET user_type = ' . USER_FOUNDER . "				WHERE user_id = $user_id";			$db->sql_query($sql);		}		$src_db->sql_freeresult($result);		$sql = 'SELECT group_id			FROM ' . GROUPS_TABLE . "			WHERE group_name = '" . $db->sql_escape('BOTS') . "'";		$result = $db->sql_query($sql);		$bot_group_id = (int) $db->sql_fetchfield('group_id');		$db->sql_freeresult($result);	}	// Grab forum auth information	$sql = "SELECT *		FROM {$convert->src_table_prefix}forums";	$result = $src_db->sql_query($sql);	$forum_access = array();	while ($row = $src_db->sql_fetchrow($result))	{		$forum_access[$row['forum_id']] = $row;	}	$src_db->sql_freeresult($result);	if ($convert->mysql_convert && $same_db)	{		$src_db->sql_query("SET NAMES 'binary'");	}	// Grab user auth information from 2.0.x board	$sql = "SELECT ug.user_id, aa.*		FROM {$convert->src_table_prefix}auth_access aa, {$convert->src_table_prefix}user_group ug, {$convert->src_table_prefix}groups g, {$convert->src_table_prefix}forums f		WHERE g.group_id = aa.group_id			AND g.group_single_user = 1			AND ug.group_id = g.group_id			AND f.forum_id = aa.forum_id";	$result = $src_db->sql_query($sql);	$user_access = array();	while ($row = $src_db->sql_fetchrow($result))	{		$user_access[$row['forum_id']][] = $row;	}	$src_db->sql_freeresult($result);	// Grab group auth information	$sql = "SELECT g.group_id, aa.*		FROM {$convert->src_table_prefix}auth_access aa, {$convert->src_table_prefix}groups g		WHERE g.group_id = aa.group_id			AND g.group_single_user <> 1";	$result = $src_db->sql_query($sql);	$group_access = array();	while ($row = $src_db->sql_fetchrow($result))	{		$group_access[$row['forum_id']][] = $row;	}	$src_db->sql_freeresult($result);	if ($convert->mysql_convert && $same_db)	{		$src_db->sql_query("SET NAMES 'utf8'");	}	// Add Forum Access List	$auth_map = array(		'auth_view'			=> array('f_', 'f_list'),		'auth_read'			=> array('f_read', 'f_search'),		'auth_post'			=> array('f_post', 'f_bbcode', 'f_smilies', 'f_img', 'f_sigs', 'f_postcount', 'f_report', 'f_subscribe', 'f_print', 'f_email'),		'auth_reply'		=> 'f_reply',		'auth_edit'			=> 'f_edit',		'auth_delete'		=> 'f_delete',		'auth_pollcreate'	=> 'f_poll',		'auth_vote'			=> 'f_vote',		'auth_announce'		=> 'f_announce',		'auth_sticky'		=> 'f_sticky',		'auth_attachments'	=> array('f_attach', 'f_download'),		'auth_download'		=> 'f_download',	);	// Define the ACL constants used in 2.0 to make the code slightly more readable	define('AUTH_ALL', 0);	define('AUTH_REG', 1);	define('AUTH_ACL', 2);	define('AUTH_MOD', 3);	define('AUTH_ADMIN', 5);	// A mapping of the simple permissions used by 2.0	$simple_auth_ary = array(		'public'			=> array(			'auth_view'			=> AUTH_ALL,			'auth_read'			=> AUTH_ALL,			'auth_post'			=> AUTH_ALL,			'auth_reply'		=> AUTH_ALL,			'auth_edit'			=> AUTH_REG,			'auth_delete'		=> AUTH_REG,			'auth_sticky'		=> AUTH_MOD,			'auth_announce'		=> AUTH_MOD,			'auth_vote'			=> AUTH_REG,			'auth_pollcreate'	=> AUTH_REG,		),		'registered'		=> array(			'auth_view'			=> AUTH_ALL,			'auth_read'			=> AUTH_ALL,			'auth_post'			=> AUTH_REG,			'auth_reply'		=> AUTH_REG,			'auth_edit'			=> AUTH_REG,			'auth_delete'		=> AUTH_REG,			'auth_sticky'		=> AUTH_MOD,			'auth_announce'		=> AUTH_MOD,			'auth_vote'			=> AUTH_REG,			'auth_pollcreate'	=> AUTH_REG,		),		'registered_hidden'	=> array(			'auth_view'			=> AUTH_REG,			'auth_read'			=> AUTH_REG,			'auth_post'			=> AUTH_REG,			'auth_reply'		=> AUTH_REG,			'auth_edit'			=> AUTH_REG,			'auth_delete'		=> AUTH_REG,			'auth_sticky'		=> AUTH_MOD,			'auth_announce'		=> AUTH_MOD,			'auth_vote'			=> AUTH_REG,			'auth_pollcreate'	=> AUTH_REG,		),		'private'			=> array(			'auth_view'			=> AUTH_ALL,			'auth_read'			=> AUTH_ACL,			'auth_post'			=> AUTH_ACL,			'auth_reply'		=> AUTH_ACL,			'auth_edit'			=> AUTH_ACL,			'auth_delete'		=> AUTH_ACL,			'auth_sticky'		=> AUTH_ACL,			'auth_announce'		=> AUTH_MOD,			'auth_vote'			=> AUTH_ACL,			'auth_pollcreate'	=> AUTH_ACL,		),		'private_hidden'	=> array(			'auth_view'			=> AUTH_ACL,			'auth_read'			=> AUTH_ACL,			'auth_post'			=> AUTH_ACL,			'auth_reply'		=> AUTH_ACL,			'auth_edit'			=> AUTH_ACL,			'auth_delete'		=> AUTH_ACL,			'auth_sticky'		=> AUTH_ACL,			'auth_announce'		=> AUTH_MOD,			'auth_vote'			=> AUTH_ACL,			'auth_pollcreate'	=> AUTH_ACL,		),		'moderator'			=> array(			'auth_view'			=> AUTH_ALL,			'auth_read'			=> AUTH_MOD,			'auth_post'			=> AUTH_MOD,			'auth_reply'		=> AUTH_MOD,			'auth_edit'			=> AUTH_MOD,			'auth_delete'		=> AUTH_MOD,			'auth_sticky'		=> AUTH_MOD,			'auth_announce'		=> AUTH_MOD,			'auth_vote'			=> AUTH_MOD,			'auth_pollcreate'	=> AUTH_MOD,		),		'moderator_hidden'	=> array(			'auth_view'			=> AUTH_MOD,			'auth_read'			=> AUTH_MOD,			'auth_post'			=> AUTH_MOD,			'auth_reply'		=> AUTH_MOD,			'auth_edit'			=> AUTH_MOD,			'auth_delete'		=> AUTH_MOD,			'auth_sticky'		=> AUTH_MOD,			'auth_announce'		=> AUTH_MOD,			'auth_vote'			=> AUTH_MOD,			'auth_pollcreate'	=> AUTH_MOD,		),	);	if ($mode == 'start')	{		user_group_auth('guests', 'SELECT user_id, {GUESTS} FROM ' . USERS_TABLE . ' WHERE user_id = ' . ANONYMOUS, false);		user_group_auth('registered', 'SELECT user_id, {REGISTERED} FROM ' . USERS_TABLE . ' WHERE user_id <> ' . ANONYMOUS . " AND group_id <> $bot_group_id", false);		// Selecting from old table		if (!empty($config['increment_user_id']))		{			$auth_sql = 'SELECT user_id, {ADMINISTRATORS} FROM ' . $convert->src_table_prefix . 'users WHERE user_level = 1 AND user_id <> 1';			user_group_auth('administrators', $auth_sql, true);			$auth_sql = 'SELECT ' . $config['increment_user_id'] . ' as user_id, {ADMINISTRATORS} FROM ' . $convert->src_table_prefix . 'users WHERE user_level = 1 AND user_id = 1';			user_group_auth('administrators', $auth_sql, true);		}		else		{			$auth_sql = 'SELECT user_id, {ADMINISTRATORS} FROM ' . $convert->src_table_prefix . 'users WHERE user_level = 1';			user_group_auth('administrators', $auth_sql, true);		}		if (!empty($config['increment_user_id']))		{			$auth_sql = 'SELECT user_id, {GLOBAL_MODERATORS} FROM ' . $convert->src_table_prefix . 'users WHERE user_level = 1 AND user_id <> 1';			user_group_auth('global_moderators', $auth_sql, true);			$auth_sql = 'SELECT ' . $config['increment_user_id'] . ' as user_id, {GLOBAL_MODERATORS} FROM ' . $convert->src_table_prefix . 'users WHERE user_level = 1 AND user_id = 1';			user_group_auth('global_moderators', $auth_sql, true);		}		else		{			$auth_sql = 'SELECT user_id, {GLOBAL_MODERATORS} FROM ' . $convert->src_table_prefix . 'users WHERE user_level = 1';			user_group_auth('global_moderators', $auth_sql, true);		}	}	else if ($mode == 'first')	{		// Go through all 2.0.x forums		foreach ($forum_access as $forum)		{			$new_forum_id = (int) $forum['forum_id'];			// Administrators have full access to all forums whatever happens			mass_auth('group_role', $new_forum_id, 'administrators', 'FORUM_FULL');			$matched_type = '';			foreach ($simple_auth_ary as $key => $auth_levels)			{				$matched = 1;				foreach ($auth_levels as $k => $level)				{					if ($forum[$k] != $auth_levels[$k])					{						$matched = 0;					}				}				if ($matched)				{					$matched_type = $key;					break;				}			}			switch ($matched_type)			{				case 'public':					mass_auth('group_role', $new_forum_id, 'guests', 'FORUM_LIMITED');					mass_auth('group_role', $new_forum_id, 'registered', 'FORUM_LIMITED_POLLS');					mass_auth('group_role', $new_forum_id, 'bots', 'FORUM_BOT');				break;				case 'registered':					mass_auth('group_role', $new_forum_id, 'guests', 'FORUM_READONLY');					mass_auth('group_role', $new_forum_id, 'bots', 'FORUM_BOT');				// no break;				case 'registered_hidden':					mass_auth('group_role', $new_forum_id, 'registered', 'FORUM_POLLS');				break;				case 'private':				case 'private_hidden':				case 'moderator':				case 'moderator_hidden':				default:					// The permissions don't match a simple set, so we're going to have to map them directly					// No post approval for all, in 2.0.x this feature does not exist					mass_auth('group', $new_forum_id, 'guests', 'f_noapprove', ACL_YES);					mass_auth('group', $new_forum_id, 'registered', 'f_noapprove', ACL_YES);					// Go through authentication map					foreach ($auth_map as $old_auth_key => $new_acl)					{						// If old authentication key does not exist we continue						// This is helpful for mods adding additional authentication fields, we need to add them to the auth_map array						if (!isset($forum[$old_auth_key]))						{							continue;						}						// Now set the new ACL correctly						switch ($forum[$old_auth_key])						{							// AUTH_ALL							case AUTH_ALL:								mass_auth('group', $new_forum_id, 'guests', $new_acl, ACL_YES);								mass_auth('group', $new_forum_id, 'bots', $new_acl, ACL_YES);								mass_auth('group', $new_forum_id, 'registered', $new_acl, ACL_YES);							break;							// AUTH_REG							case AUTH_REG:								mass_auth('group', $new_forum_id, 'registered', $new_acl, ACL_YES);							break;							// AUTH_ACL							case AUTH_ACL:								// Go through the old group access list for this forum								if (isset($group_access[$forum['forum_id']]))								{									foreach ($group_access[$forum['forum_id']] as $index => $access)									{										// We only check for ACL_YES equivalence entry										if (isset($access[$old_auth_key]) && $access[$old_auth_key] == 1)										{											mass_auth('group', $new_forum_id, (int) $access['group_id'], $new_acl, ACL_YES);										}									}								}								if (isset($user_access[$forum['forum_id']]))								{									foreach ($user_access[$forum['forum_id']] as $index => $access)									{										// We only check for ACL_YES equivalence entry										if (isset($access[$old_auth_key]) && $access[$old_auth_key] == 1)										{											mass_auth('user', $new_forum_id, (int) phpbb_user_id($access['user_id']), $new_acl, ACL_YES);										}									}								}							break;							// AUTH_MOD							case AUTH_MOD:								if (isset($group_access[$forum['forum_id']]))								{									foreach ($group_access[$forum['forum_id']] as $index => $access)									{										// We only check for ACL_YES equivalence entry										if (isset($access[$old_auth_key]) && $access[$old_auth_key] == 1)										{											mass_auth('group', $new_forum_id, (int) $access['group_id'], $new_acl, ACL_YES);										}									}								}								if (isset($user_access[$forum['forum_id']]))								{									foreach ($user_access[$forum['forum_id']] as $index => $access)									{										// We only check for ACL_YES equivalence entry										if (isset($access[$old_auth_key]) && $access[$old_auth_key] == 1)										{											mass_auth('user', $new_forum_id, (int) phpbb_user_id($access['user_id']), $new_acl, ACL_YES);										}									}								}							break;						}					}				break;			}		}	}	else if ($mode == 'second')	{		// Assign permission roles and other default permissions		// guests having u_download and u_search ability		$db->sql_query('INSERT INTO ' . ACL_GROUPS_TABLE . ' (group_id, forum_id, auth_option_id, auth_role_id, auth_setting) SELECT ' . get_group_id('guests') . ', 0, auth_option_id, 0, 1 FROM ' . ACL_OPTIONS_TABLE . " WHERE auth_option IN ('u_', 'u_download', 'u_search')");		// administrators/global mods having full user features		mass_auth('group_role', 0, 'administrators', 'USER_FULL');		mass_auth('group_role', 0, 'global_moderators', 'USER_FULL');		// By default all converted administrators are given full access		mass_auth('group_role', 0, 'administrators', 'ADMIN_FULL');		// All registered users are assigned the standard user role		mass_auth('group_role', 0, 'registered', 'USER_STANDARD');		mass_auth('group_role', 0, 'registered_coppa', 'USER_STANDARD');		// Instead of administrators being global moderators we give the MOD_FULL role to global mods (admins already assigned to this group)		mass_auth('group_role', 0, 'global_moderators', 'MOD_FULL');		// And now those who have had their avatar rights removed get assigned a more restrictive role		$sql = 'SELECT user_id FROM ' . $convert->src_table_prefix . 'users			WHERE user_allowavatar = 0				AND user_id > 0';		$result = $src_db->sql_query($sql);		while ($row = $src_db->sql_fetchrow($result))		{			mass_auth('user_role', 0, (int) phpbb_user_id($row['user_id']), 'USER_NOAVATAR');		}		$src_db->sql_freeresult($result);		// And the same for those who have had their PM rights removed		$sql = 'SELECT user_id FROM ' . $convert->src_table_prefix . 'users			WHERE user_allow_pm = 0				AND user_id > 0';		$result = $src_db->sql_query($sql);		while ($row = $src_db->sql_fetchrow($result))		{			mass_auth('user_role', 0, (int) phpbb_user_id($row['user_id']), 'USER_NOPM');		}		$src_db->sql_freeresult($result);	}	else if ($mode == 'third')	{		// And now the moderators		// We make sure that they have at least standard access to the forums they moderate in addition to the moderating permissions		$mod_post_map = array(			'auth_announce'		=> 'f_announce',			'auth_sticky'		=> 'f_sticky'		);		foreach ($user_access as $forum_id => $access_map)		{			$forum_id = (int) $forum_id;			foreach ($access_map as $access)			{				if (isset($access['auth_mod']) && $access['auth_mod'] == 1)				{					mass_auth('user_role', $forum_id, (int) phpbb_user_id($access['user_id']), 'MOD_STANDARD');					mass_auth('user_role', $forum_id, (int) phpbb_user_id($access['user_id']), 'FORUM_STANDARD');					foreach ($mod_post_map as $old => $new)					{						if (isset($forum_access[$forum_id]) && isset($forum_access[$forum_id][$old]) && $forum_access[$forum_id][$old] == AUTH_MOD)						{							mass_auth('user', $forum_id, (int) phpbb_user_id($access['user_id']), $new, ACL_YES);						}					}				}			}		}		foreach ($group_access as $forum_id => $access_map)		{			$forum_id = (int) $forum_id;			foreach ($access_map as $access)			{				if (isset($access['auth_mod']) && $access['auth_mod'] == 1)				{					mass_auth('group_role', $forum_id, (int) $access['group_id'], 'MOD_STANDARD');					mass_auth('group_role', $forum_id, (int) $access['group_id'], 'FORUM_STANDARD');					foreach ($mod_post_map as $old => $new)					{						if (isset($forum_access[$forum_id]) && isset($forum_access[$forum_id][$old]) && $forum_access[$forum_id][$old] == AUTH_MOD)						{							mass_auth('group', $forum_id, (int) $access['group_id'], $new, ACL_YES);						}					}				}			}		}		// We grant everyone readonly access to the categories to ensure that the forums are visible		$sql = 'SELECT forum_id, forum_name, parent_id, left_id, right_id			FROM ' . FORUMS_TABLE . '			ORDER BY left_id ASC';		$result = $db->sql_query($sql);		$parent_forums = $forums = array();		while ($row = $db->sql_fetchrow($result))		{			if ($row['parent_id'] == 0)			{				mass_auth('group_role', $row['forum_id'], 'administrators', 'FORUM_FULL');				mass_auth('group_role', $row['forum_id'], 'global_moderators', 'FORUM_FULL');				$parent_forums[] = $row;			}			else			{				$forums[] = $row;			}		}		$db->sql_freeresult($result);		global $auth;		// Let us see which groups have access to these forums...		foreach ($parent_forums as $row)		{			// Get the children			$branch = $forum_ids = array();			foreach ($forums as $key => $_row)			{				if ($_row['left_id'] > $row['left_id'] && $_row['left_id'] < $row['right_id'])				{					$branch[] = $_row;					$forum_ids[] = $_row['forum_id'];					continue;				}			}			if (sizeof($forum_ids))			{				// Now make sure the user is able to read these forums				$hold_ary = $auth->acl_group_raw_data(false, 'f_list', $forum_ids);				if (empty($hold_ary))				{					continue;				}				foreach ($hold_ary as $g_id => $f_id_ary)				{					$set_group = false;					foreach ($f_id_ary as $f_id => $auth_ary)					{						foreach ($auth_ary as $auth_option => $setting)						{							if ($setting == ACL_YES)							{								$set_group = true;								break 2;							}						}					}					if ($set_group)					{						mass_auth('group', $row['forum_id'], $g_id, 'f_list', ACL_YES);					}				}			}		}	}}/*** Set primary group.* Really simple and only based on user_level (remaining groups will be assigned later)*/function phpbb_set_primary_group($user_level){	global $convert_row;	if ($user_level == 1)	{		return get_group_id('administrators');	}/*	else if ($user_level == 2)	{		return get_group_id('global_moderators');	}	else if ($user_level == 0 && $convert_row['user_active'])*/	else if ($convert_row['user_active'])	{		return get_group_id('registered');	}	return 0;}/*** Convert the group name, making sure to avoid conflicts with 3.0 special groups*/function phpbb_convert_group_name($group_name){	$default_groups = array(		'GUESTS',		'REGISTERED',		'REGISTERED_COPPA',		'GLOBAL_MODERATORS',		'ADMINISTRATORS',		'BOTS',	);	if (in_array(strtoupper($group_name), $default_groups))	{		return 'phpBB2 - ' . $group_name;	}	return phpbb_set_default_encoding($group_name);}/*** Convert the group type constants*/function phpbb_convert_group_type($group_type){	switch ($group_type)	{		case 0:			return GROUP_OPEN;		break;		case 1:			return GROUP_CLOSED;		break;		case 2:			return GROUP_HIDDEN;		break;	}	// Never return GROUP_SPECIAL here, because only phpBB3's default groups are allowed to have this type set.	return GROUP_HIDDEN;}/*** Convert the topic type constants*/function phpbb_convert_topic_type($topic_type){	switch ($topic_type)	{		case 0:			return POST_NORMAL;		break;		case 1:			return POST_STICKY;		break;		case 2:			return POST_ANNOUNCE;		break;		case 3:			return POST_GLOBAL;		break;	}	return POST_NORMAL;}function phpbb_replace_size($matches){	return '[size=' . min(200, ceil(100.0 * (((double) $matches[1])/12.0))) . ':' . $matches[2] . ']';}/*** Reparse the message stripping out the bbcode_uid values and adding new ones and setting the bitfield* @todo What do we want to do about HTML in messages - currently it gets converted to the entities, but there may be some objections to this*/function phpbb_prepare_message($message){	global $phpbb_root_path, $phpEx, $db, $convert, $user, $config, $cache, $convert_row, $message_parser;	if (!$message)	{		$convert->row['mp_bbcode_bitfield'] = $convert_row['mp_bbcode_bitfield'] = 0;		return '';	}	// Decode phpBB 2.0.x Message	if (isset($convert->row['old_bbcode_uid']) && $convert->row['old_bbcode_uid'] != '')	{		// Adjust size...		if (strpos($message, '[size=') !== false)		{			$message = preg_replace_callback('/\[size=(\d*):(' . $convert->row['old_bbcode_uid'] . ')\]/', 'phpbb_replace_size', $message);		}		$message = preg_replace('/\:(([a-z0-9]:)?)' . $convert->row['old_bbcode_uid'] . '/s', '', $message);	}	if (strpos($message, '[quote=') !== false)	{		$message = preg_replace('/\[quote="(.*?)"\]/s', '[quote=&quot;\1&quot;]', $message);		$message = preg_replace('/\[quote=\\\"(.*?)\\\"\]/s', '[quote=&quot;\1&quot;]', $message);		// let's hope that this solves more problems than it causes. Deal with escaped quotes.		$message = str_replace('\"', '&quot;', $message);		$message = str_replace('\&quot;', '&quot;', $message);	}	// Already the new user id ;)	$user_id = $convert->row['poster_id'];	$message = str_replace('<br />', "\n", $message);	$message = str_replace('<', '&lt;', $message);	$message = str_replace('>', '&gt;', $message);	// make the post UTF-8	$message = phpbb_set_encoding($message);	$message_parser->warn_msg = array(); // Reset the errors from the previous message	$message_parser->bbcode_uid = make_uid($convert->row['post_time']);	$message_parser->message = $message;	unset($message);	// Make sure options are set.//	$enable_html = (!isset($row['enable_html'])) ? false : $row['enable_html'];	$enable_bbcode = (!isset($convert->row['enable_bbcode'])) ? true : $convert->row['enable_bbcode'];	$enable_smilies = (!isset($convert->row['enable_smilies'])) ? true : $convert->row['enable_smilies'];	$enable_magic_url = (!isset($convert->row['enable_magic_url'])) ? true : $convert->row['enable_magic_url'];	// parse($allow_bbcode, $allow_magic_url, $allow_smilies, $allow_img_bbcode = true, $allow_flash_bbcode = true, $allow_quote_bbcode = true, $allow_url_bbcode = true, $update_this_message = true, $mode = 'post')	$message_parser->parse($enable_bbcode, $enable_magic_url, $enable_smilies);	if (sizeof($message_parser->warn_msg))	{		$msg_id = isset($convert->row['post_id']) ? $convert->row['post_id'] : $convert->row['privmsgs_id'];		$convert->p_master->error('<span style="color:red">' . $user->lang['POST_ID'] . ': ' . $msg_id . ' ' . $user->lang['CONV_ERROR_MESSAGE_PARSER'] . ': <br /><br />' . implode('<br />', $message_parser->warn_msg), __LINE__, __FILE__, true);	}	$convert->row['mp_bbcode_bitfield'] = $convert_row['mp_bbcode_bitfield'] = $message_parser->bbcode_bitfield;	$message = $message_parser->message;	unset($message_parser->message);	return $message;}/*** Return the bitfield calculated by the previous function*/function get_bbcode_bitfield(){	global $convert_row;	return $convert_row['mp_bbcode_bitfield'];}/*** Determine the last user to edit a post* In practice we only tracked edits by the original poster in 2.0.x so this will only be set if they had edited their own post*/function phpbb_post_edit_user(){	global $convert_row, $config;	if (isset($convert_row['post_edit_count']))	{		return phpbb_user_id($convert_row['poster_id']);	}	return 0;}/*** Obtain the path to uploaded files on the 2.0.x forum* This is only used if the Attachment MOD was installed*/function phpbb_get_files_dir(){	if (!defined('MOD_ATTACHMENT'))	{		return;	}	global $src_db, $same_db, $convert, $user, $config, $cache;	if ($convert->mysql_convert && $same_db)	{		$src_db->sql_query("SET NAMES 'binary'");	}	$sql = 'SELECT config_value AS upload_dir		FROM ' . $convert->src_table_prefix . "attachments_config		WHERE config_name = 'upload_dir'";	$result = $src_db->sql_query($sql);	$upload_path = $src_db->sql_fetchfield('upload_dir');	$src_db->sql_freeresult($result);	$sql = 'SELECT config_value AS ftp_upload		FROM ' . $convert->src_table_prefix . "attachments_config		WHERE config_name = 'allow_ftp_upload'";	$result = $src_db->sql_query($sql);	$ftp_upload = (int) $src_db->sql_fetchfield('ftp_upload');	$src_db->sql_freeresult($result);	if ($convert->mysql_convert && $same_db)	{		$src_db->sql_query("SET NAMES 'utf8'");	}	if ($ftp_upload)	{		$convert->p_master->error($user->lang['CONV_ERROR_ATTACH_FTP_DIR'], __LINE__, __FILE__);	}	return $upload_path;}/*** Copy thumbnails of uploaded images from the 2.0.x forum* This is only used if the Attachment MOD was installed*/function phpbb_copy_thumbnails(){	global $db, $convert, $user, $config, $cache, $phpbb_root_path;	$src_path = $convert->options['forum_path'] . '/' . phpbb_get_files_dir() . '/thumbs/';	if ($handle = @opendir($src_path))	{		while ($entry = readdir($handle))		{			if ($entry[0] == '.')			{				continue;			}			if (is_dir($src_path . $entry))			{				continue;			}			else			{				copy_file($src_path . $entry, $config['upload_path'] . '/' . preg_replace('/^t_/', 'thumb_', $entry));				@unlink($phpbb_root_path . $config['upload_path'] . '/thumbs/' . $entry);			}		}		closedir($handle);	}}/*** Convert the attachment category constants* This is only used if the Attachment MOD was installed*/function phpbb_attachment_category($cat_id){	switch ($cat_id)	{		case 1:			return ATTACHMENT_CATEGORY_IMAGE;		break;		case 2:			return ATTACHMENT_CATEGORY_WM;		break;		case 3:			return ATTACHMENT_CATEGORY_FLASH;		break;	}	return ATTACHMENT_CATEGORY_NONE;}/*** Obtain list of forums in which different attachment categories can be used*/function phpbb_attachment_forum_perms($forum_permissions){	if (empty($forum_permissions))	{		return '';	}	// Decode forum permissions	$forum_ids = array();	$one_char_encoding = '#';	$two_char_encoding = '.';	$auth_len = 1;	for ($pos = 0; $pos < strlen($forum_permissions); $pos += $auth_len)	{		$forum_auth = substr($forum_permissions, $pos, 1);		if ($forum_auth == $one_char_encoding)		{			$auth_len = 1;			continue;		}		else if ($forum_auth == $two_char_encoding)		{			$auth_len = 2;			$pos--;			continue;		}		$forum_auth = substr($forum_permissions, $pos, $auth_len);		$forum_id = base64_unpack($forum_auth);		$forum_ids[] = (int) $forum_id;	}	if (sizeof($forum_ids))	{		return attachment_forum_perms($forum_ids);	}	return '';}/*** Convert the avatar type constants*/function phpbb_avatar_type($type){	switch ($type)	{		case 1:			return AVATAR_UPLOAD;		break;		case 2:			return AVATAR_REMOTE;		break;		case 3:			return AVATAR_GALLERY;		break;	}	return 0;}/*** Just undos the replacing of '<' and '>'*/function  phpbb_smilie_html_decode($code){	$code = str_replace('&lt;', '<', $code);	return str_replace('&gt;', '>', $code);}/*** Transfer avatars, copying the image if it was uploaded*/function phpbb_import_avatar($user_avatar){	global $convert_row;	if (!$convert_row['user_avatar_type'])	{		return '';	}	else if ($convert_row['user_avatar_type'] == 1)	{		// Uploaded avatar		return import_avatar($user_avatar, false, $convert_row['user_id']);	}	else if ($convert_row['user_avatar_type'] == 2)	{		// Remote avatar		return $user_avatar;	}	else if ($convert_row['user_avatar_type'] == 3)	{		// Gallery avatar		return $user_avatar;	}	return '';}/*** Find out about the avatar's dimensions*/function phpbb_get_avatar_height($user_avatar){	global $convert_row;	if (empty($convert_row['user_avatar_type']))	{		return 0;	}	return get_avatar_height($user_avatar, 'phpbb_avatar_type', $convert_row['user_avatar_type']);}/*** Find out about the avatar's dimensions*/function phpbb_get_avatar_width($user_avatar){	global $convert_row;	if (empty($convert_row['user_avatar_type']))	{		return 0;	}	return get_avatar_width($user_avatar, 'phpbb_avatar_type', $convert_row['user_avatar_type']);}/*** Calculate the correct to_address field for private messages*/function phpbb_privmsgs_to_userid($to_userid){	global $config;	return 'u_' . phpbb_user_id($to_userid);}/*** Calculate whether a private message was unread using the bitfield*/function phpbb_unread_pm($pm_type){	return ($pm_type == 5) ? 1 : 0;}/*** Calculate whether a private message was new using the bitfield*/function phpbb_new_pm($pm_type){	return ($pm_type == 1) ? 1 : 0;}/*** Obtain the folder_id for the custom folder created to replace the savebox from 2.0.x (used to store saved private messages)*/function phpbb_get_savebox_id($user_id){	global $db;	$user_id = phpbb_user_id($user_id);	// Only one custom folder, check only one	$sql = 'SELECT folder_id		FROM ' . PRIVMSGS_FOLDER_TABLE . '		WHERE user_id = ' . $user_id;	$result = $db->sql_query_limit($sql, 1);	$folder_id = (int) $db->sql_fetchfield('folder_id');	$db->sql_freeresult($result);	return $folder_id;}/*** Transfer attachment specific configuration options* These were not stored in the main config table on 2.0.x* This is only used if the Attachment MOD was installed*/function phpbb_import_attach_config(){	global $db, $src_db, $same_db, $convert, $config;	if ($convert->mysql_convert && $same_db)	{		$src_db->sql_query("SET NAMES 'binary'");	}	$sql = 'SELECT *		FROM ' . $convert->src_table_prefix . 'attachments_config';	$result = $src_db->sql_query($sql);	if ($convert->mysql_convert && $same_db)	{		$src_db->sql_query("SET NAMES 'utf8'");	}	$attach_config = array();	while ($row = $src_db->sql_fetchrow($result))	{		$attach_config[$row['config_name']] = $row['config_value'];	}	$src_db->sql_freeresult($result);	set_config('allow_attachments', 1);	// old attachment mod? Must be very old if this entry do not exist...	if (!empty($attach_config['display_order']))	{		set_config('display_order', $attach_config['display_order']);	}	set_config('max_filesize', $attach_config['max_filesize']);	set_config('max_filesize_pm', $attach_config['max_filesize_pm']);	set_config('attachment_quota', $attach_config['attachment_quota']);	set_config('max_attachments', $attach_config['max_attachments']);	set_config('max_attachments_pm', $attach_config['max_attachments_pm']);	set_config('allow_pm_attach', $attach_config['allow_pm_attach']);	set_config('img_display_inlined', $attach_config['img_display_inlined']);	set_config('img_max_width', $attach_config['img_max_width']);	set_config('img_max_height', $attach_config['img_max_height']);	set_config('img_link_width', $attach_config['img_link_width']);	set_config('img_link_height', $attach_config['img_link_height']);	set_config('img_create_thumbnail', $attach_config['img_create_thumbnail']);	set_config('img_max_thumb_width', 400);	set_config('img_min_thumb_filesize', $attach_config['img_min_thumb_filesize']);	set_config('img_imagick', $attach_config['img_imagick']);}/*** Calculate the date a user became inactive*/function phpbb_inactive_time(){	global $convert_row;	if ($convert_row['user_active'])	{		return 0;	}	if ($convert_row['user_lastvisit'])	{		return $convert_row['user_lastvisit'];	}	return $convert_row['user_regdate'];}/*** Calculate the reason a user became inactive* We can't actually tell the difference between a manual deactivation and one for profile changes* from the data available to assume the latter*/function phpbb_inactive_reason(){	global $convert_row;	if ($convert_row['user_active'])	{		return 0;	}	if ($convert_row['user_lastvisit'])	{		return INACTIVE_PROFILE;	}	return INACTIVE_REGISTER;}/*** Adjust 2.0.x disallowed names to 3.0.x format*/function phpbb_disallowed_username($username){	// Replace * with %	$username = phpbb_set_default_encoding(str_replace('*', '%', $username));	return utf8_htmlspecialchars($username);}/*** Checks whether there are any usernames on the old board that would map to the same* username_clean on phpBB3. Prints out a list if any exist and exits.*/function phpbb_create_userconv_table(){	global $db, $src_db, $convert, $table_prefix, $user, $lang;	$map_dbms = '';	switch ($db->sql_layer)	{		case 'mysql':			$map_dbms = 'mysql_40';		break;		case 'mysql4':			if (version_compare($db->sql_server_info(true), '4.1.3', '>='))			{				$map_dbms = 'mysql_41';			}			else			{				$map_dbms = 'mysql_40';			}		break;		case 'mysqli':			$map_dbms = 'mysql_41';		break;		case 'mssql':		case 'mssql_odbc':		case 'mssqlnative':			$map_dbms = 'mssql';		break;		default:			$map_dbms = $db->sql_layer;		break;	}	// create a temporary table in which we store the clean usernames	$drop_sql = 'DROP TABLE ' . USERCONV_TABLE;	switch ($map_dbms)	{		case 'firebird':			$create_sql = 'CREATE TABLE ' . USERCONV_TABLE . ' (				user_id INTEGER NOT NULL,				username_clean VARCHAR(255) CHARACTER SET UTF8 DEFAULT \'\' NOT NULL COLLATE UNICODE			)';		break;		case 'mssql':			$create_sql = 'CREATE TABLE [' . USERCONV_TABLE . '] (				[user_id] [int] NOT NULL ,				[username_clean] [varchar] (255) DEFAULT (\'\') NOT NULL			)';		break;		case 'mysql_40':			$create_sql = 'CREATE TABLE ' . USERCONV_TABLE . ' (				user_id mediumint(8) NOT NULL,				username_clean blob NOT NULL			)';		break;		case 'mysql_41':			$create_sql = 'CREATE TABLE ' . USERCONV_TABLE . ' (				user_id mediumint(8) NOT NULL,				username_clean varchar(255) DEFAULT \'\' NOT NULL			) CHARACTER SET `utf8` COLLATE `utf8_bin`';		break;		case 'oracle':			$create_sql = 'CREATE TABLE ' . USERCONV_TABLE . ' (				user_id number(8) NOT NULL,				username_clean varchar2(255) DEFAULT \'\'			)';		break;		case 'postgres':			$create_sql = 'CREATE TABLE ' . USERCONV_TABLE . ' (				user_id INT4 DEFAULT \'0\',				username_clean varchar_ci DEFAULT \'\' NOT NULL			)';		break;		case 'sqlite':			$create_sql = 'CREATE TABLE ' . USERCONV_TABLE . ' (				user_id INTEGER NOT NULL DEFAULT \'0\',				username_clean varchar(255) NOT NULL DEFAULT \'\'			)';		break;	}	$db->sql_return_on_error(true);	$db->sql_query($drop_sql);	$db->sql_return_on_error(false);	$db->sql_query($create_sql);}function phpbb_check_username_collisions(){	global $db, $src_db, $convert, $table_prefix, $user, $lang;	// now find the clean version of the usernames that collide	$sql = 'SELECT username_clean		FROM ' . USERCONV_TABLE .'		GROUP BY username_clean		HAVING COUNT(user_id) > 1';	$result = $db->sql_query($sql);	$colliding_names = array();	while ($row = $db->sql_fetchrow($result))	{		$colliding_names[] = $row['username_clean'];	}	$db->sql_freeresult($result);	// there was at least one collision, the admin will have to solve it before conversion can continue	if (sizeof($colliding_names))	{		$sql = 'SELECT user_id, username_clean			FROM ' . USERCONV_TABLE . '			WHERE ' . $db->sql_in_set('username_clean', $colliding_names);		$result = $db->sql_query($sql);		unset($colliding_names);		$colliding_user_ids = array();		while ($row = $db->sql_fetchrow($result))		{			$colliding_user_ids[(int) $row['user_id']] = $row['username_clean'];		}		$db->sql_freeresult($result);		$sql = 'SELECT username, user_id, user_posts			FROM ' . $convert->src_table_prefix . 'users			WHERE ' . $src_db->sql_in_set('user_id', array_keys($colliding_user_ids));		$result = $src_db->sql_query($sql);		$colliding_users = array();		while ($row = $src_db->sql_fetchrow($result))		{			$row['user_id'] = (int) $row['user_id'];			if (isset($colliding_user_ids[$row['user_id']]))			{				$colliding_users[$colliding_user_ids[$row['user_id']]][] = $row;			}		}		$src_db->sql_freeresult($result);		unset($colliding_user_ids);		$list = '';		foreach ($colliding_users as $username_clean => $users)		{			$list .= sprintf($user->lang['COLLIDING_CLEAN_USERNAME'], $username_clean) . "<br />\n";			foreach ($users as $i => $row)			{				$list .= sprintf($user->lang['COLLIDING_USER'], $row['user_id'], phpbb_set_default_encoding($row['username']), $row['user_posts']) . "<br />\n";			}		}		$lang['INST_ERR_FATAL'] = $user->lang['CONV_ERR_FATAL'];		$convert->p_master->error('<span style="color:red">' . $user->lang['COLLIDING_USERNAMES_FOUND'] . '</span></b><br /><br />' . $list . '<b>', __LINE__, __FILE__);	}	$drop_sql = 'DROP TABLE ' . USERCONV_TABLE;	$db->sql_query($drop_sql);}?>
<?php/**** @package acp* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @ignore*/if (!defined('IN_PHPBB')){	exit;}/*** @package acp*/class acp_prune{	var $u_action;	function main($id, $mode)	{		global $user, $phpEx, $phpbb_admin_path, $phpbb_root_path;		$user->add_lang('acp/prune');		include_once($phpbb_root_path . 'includes/functions_user.' . $phpEx);		switch ($mode)		{			case 'forums':				$this->tpl_name = 'acp_prune_forums';				$this->page_title = 'ACP_PRUNE_FORUMS';				$this->prune_forums($id, $mode);			break;			case 'users':				$this->tpl_name = 'acp_prune_users';				$this->page_title = 'ACP_PRUNE_USERS';				$this->prune_users($id, $mode);			break;		}	}	/**	* Prune forums	*/	function prune_forums($id, $mode)	{		global $db, $user, $auth, $template, $cache;		global $config, $phpbb_root_path, $phpbb_admin_path, $phpEx;		$all_forums = request_var('all_forums', 0);		$forum_id = request_var('f', array(0));		$submit = (isset($_POST['submit'])) ? true : false;		if ($all_forums)		{			$sql = 'SELECT forum_id				FROM ' . FORUMS_TABLE . '				ORDER BY left_id';			$result = $db->sql_query($sql);			$forum_id = array();			while ($row = $db->sql_fetchrow($result))			{				$forum_id[] = $row['forum_id'];			}			$db->sql_freeresult($result);		}		if ($submit)		{			if (confirm_box(true))			{				$prune_posted = request_var('prune_days', 0);				$prune_viewed = request_var('prune_vieweddays', 0);				$prune_all = (!$prune_posted && !$prune_viewed) ? true : false;						$prune_flags = 0;				$prune_flags += (request_var('prune_old_polls', 0)) ? 2 : 0;				$prune_flags += (request_var('prune_announce', 0)) ? 4 : 0;				$prune_flags += (request_var('prune_sticky', 0)) ? 8 : 0;				// Convert days to seconds for timestamp functions...				$prunedate_posted = time() - ($prune_posted * 86400);				$prunedate_viewed = time() - ($prune_viewed * 86400);				$template->assign_vars(array(					'S_PRUNED'		=> true)				);				$sql_forum = (sizeof($forum_id)) ? ' AND ' . $db->sql_in_set('forum_id', $forum_id) : '';				// Get a list of forum's or the data for the forum that we are pruning.				$sql = 'SELECT forum_id, forum_name					FROM ' . FORUMS_TABLE . '					WHERE forum_type = ' . FORUM_POST . "						$sql_forum					ORDER BY left_id ASC";				$result = $db->sql_query($sql);				if ($row = $db->sql_fetchrow($result))				{					$prune_ids = array();					$p_result['topics'] = 0;					$p_result['posts'] = 0;					$log_data = '';								do					{						if (!$auth->acl_get('f_list', $row['forum_id']))						{							continue;						}						if ($prune_all)						{							$p_result = prune($row['forum_id'], 'posted', time(), $prune_flags, false);						}						else						{							if ($prune_posted)							{								$return = prune($row['forum_id'], 'posted', $prunedate_posted, $prune_flags, false);								$p_result['topics'] += $return['topics'];								$p_result['posts'] += $return['posts'];							}										if ($prune_viewed)							{								$return = prune($row['forum_id'], 'viewed', $prunedate_viewed, $prune_flags, false);								$p_result['topics'] += $return['topics'];								$p_result['posts'] += $return['posts'];							}						}						$prune_ids[] = $row['forum_id'];						$template->assign_block_vars('pruned', array(							'FORUM_NAME'	=> $row['forum_name'],							'NUM_TOPICS'	=> $p_result['topics'],							'NUM_POSTS'		=> $p_result['posts'])						);								$log_data .= (($log_data != '') ? ', ' : '') . $row['forum_name'];					}					while ($row = $db->sql_fetchrow($result));							// Sync all pruned forums at once					sync('forum', 'forum_id', $prune_ids, true, true);					add_log('admin', 'LOG_PRUNE', $log_data);				}				$db->sql_freeresult($result);				return;			}			else			{				confirm_box(false, $user->lang['PRUNE_FORUM_CONFIRM'], build_hidden_fields(array(					'i'				=> $id,					'mode'			=> $mode,					'submit'		=> 1,					'all_forums'	=> $all_forums,					'f'				=> $forum_id,					'prune_days'		=> request_var('prune_days', 0),					'prune_vieweddays'	=> request_var('prune_vieweddays', 0),					'prune_old_polls'	=> request_var('prune_old_polls', 0),					'prune_announce'	=> request_var('prune_announce', 0),					'prune_sticky'		=> request_var('prune_sticky', 0),				)));			}		}		// If they haven't selected a forum for pruning yet then		// display a select box to use for pruning.		if (!sizeof($forum_id))		{			$template->assign_vars(array(				'U_ACTION'			=> $this->u_action,				'S_SELECT_FORUM'	=> true,				'S_FORUM_OPTIONS'	=> make_forum_select(false, false, false))			);		}		else		{			$sql = 'SELECT forum_id, forum_name				FROM ' . FORUMS_TABLE . '				WHERE ' . $db->sql_in_set('forum_id', $forum_id);			$result = $db->sql_query($sql);			$row = $db->sql_fetchrow($result);			if (!$row)			{				$db->sql_freeresult($result);				trigger_error($user->lang['NO_FORUM'] . adm_back_link($this->u_action), E_USER_WARNING);			}			$forum_list = $s_hidden_fields = '';			do			{				$forum_list .= (($forum_list != '') ? ', ' : '') . '<b>' . $row['forum_name'] . '</b>';				$s_hidden_fields .= '<input type="hidden" name="f[]" value="' . $row['forum_id'] . '" />';			}			while ($row = $db->sql_fetchrow($result));			$db->sql_freeresult($result);			$l_selected_forums = (sizeof($forum_id) == 1) ? 'SELECTED_FORUM' : 'SELECTED_FORUMS';			$template->assign_vars(array(				'L_SELECTED_FORUMS'		=> $user->lang[$l_selected_forums],				'U_ACTION'				=> $this->u_action,				'U_BACK'				=> $this->u_action,				'FORUM_LIST'			=> $forum_list,				'S_HIDDEN_FIELDS'		=> $s_hidden_fields)			);		}	}	/**	* Prune users	*/	function prune_users($id, $mode)	{		global $db, $user, $auth, $template, $cache;		global $config, $phpbb_root_path, $phpbb_admin_path, $phpEx;		$user->add_lang('memberlist');		$prune = (isset($_POST['prune'])) ? true : false;		if ($prune)		{			$action = request_var('action', 'deactivate');			$deleteposts = request_var('deleteposts', 0);			if (confirm_box(true))			{				$user_ids = $usernames = array();				$this->get_prune_users($user_ids, $usernames);				if (sizeof($user_ids))				{					if ($action == 'deactivate')					{						user_active_flip('deactivate', $user_ids);						$l_log = 'LOG_PRUNE_USER_DEAC';					}					else if ($action == 'delete')					{						if ($deleteposts)						{							foreach ($user_ids as $user_id)							{								user_delete('remove', $user_id);							}														$l_log = 'LOG_PRUNE_USER_DEL_DEL';						}						else						{							foreach ($user_ids as $user_id)							{								user_delete('retain', $user_id, $usernames[$user_id]);							}							$l_log = 'LOG_PRUNE_USER_DEL_ANON';						}					}					add_log('admin', $l_log, implode(', ', $usernames));					$msg = $user->lang['USER_' . strtoupper($action) . '_SUCCESS'];				}				else				{					$msg = $user->lang['USER_PRUNE_FAILURE'];				}				trigger_error($msg . adm_back_link($this->u_action));			}			else			{				// We list the users which will be pruned...				$user_ids = $usernames = array();				$this->get_prune_users($user_ids, $usernames);				if (!sizeof($user_ids))				{					trigger_error($user->lang['USER_PRUNE_FAILURE'] . adm_back_link($this->u_action), E_USER_WARNING);				}				// Assign to template				foreach ($user_ids as $user_id)				{					$template->assign_block_vars('users', array(						'USERNAME'			=> $usernames[$user_id],						'U_PROFILE'			=> append_sid($phpbb_root_path . 'memberlist.' . $phpEx, 'mode=viewprofile&amp;u=' . $user_id),						'U_USER_ADMIN'		=> ($auth->acl_get('a_user')) ? append_sid("{$phpbb_admin_path}index.$phpEx", 'i=users&amp;mode=overview&amp;u=' . $user_id, true, $user->session_id) : '',					));				}				$template->assign_vars(array(					'S_DEACTIVATE'		=> ($action == 'deactivate') ? true : false,					'S_DELETE'			=> ($action == 'delete') ? true : false,				));				confirm_box(false, $user->lang['CONFIRM_OPERATION'], build_hidden_fields(array(					'i'				=> $id,					'mode'			=> $mode,					'prune'			=> 1,					'users'			=> utf8_normalize_nfc(request_var('users', '', true)),					'username'		=> utf8_normalize_nfc(request_var('username', '', true)),					'email'			=> request_var('email', ''),					'joined_select'	=> request_var('joined_select', ''),					'joined'		=> request_var('joined', ''),					'active_select'	=> request_var('active_select', ''),					'active'		=> request_var('active', ''),					'count_select'	=> request_var('count_select', ''),					'count'			=> request_var('count', ''),					'deleteposts'	=> request_var('deleteposts', 0),					'action'		=> request_var('action', ''),				)), 'confirm_body_prune.html');			}		}		$find_count = array('lt' => $user->lang['LESS_THAN'], 'eq' => $user->lang['EQUAL_TO'], 'gt' => $user->lang['MORE_THAN']);		$s_find_count = '';		foreach ($find_count as $key => $value)		{			$selected = ($key == 'eq') ? ' selected="selected"' : '';			$s_find_count .= '<option value="' . $key . '"' . $selected . '>' . $value . '</option>';		}		$find_time = array('lt' => $user->lang['BEFORE'], 'gt' => $user->lang['AFTER']);		$s_find_join_time = '';		foreach ($find_time as $key => $value)		{			$s_find_join_time .= '<option value="' . $key . '">' . $value . '</option>';		}				$s_find_active_time = '';		foreach ($find_time as $key => $value)		{			$s_find_active_time .= '<option value="' . $key . '">' . $value . '</option>';		}		$template->assign_vars(array(			'U_ACTION'			=> $this->u_action,			'S_JOINED_OPTIONS'	=> $s_find_join_time,			'S_ACTIVE_OPTIONS'	=> $s_find_active_time,			'S_COUNT_OPTIONS'	=> $s_find_count,			'U_FIND_USERNAME'	=> append_sid("{$phpbb_root_path}memberlist.$phpEx", 'mode=searchuser&amp;form=acp_prune&amp;field=users'),		));	}	/**	* Get user_ids/usernames from those being pruned	*/	function get_prune_users(&$user_ids, &$usernames)	{		global $user, $db;		$users = utf8_normalize_nfc(request_var('users', '', true));				if ($users)		{			$users = explode("\n", $users);			$where_sql = ' AND ' . $db->sql_in_set('username_clean', array_map('utf8_clean_string', $users));		}		else		{			$username = utf8_normalize_nfc(request_var('username', '', true));			$email = request_var('email', '');			$joined_select = request_var('joined_select', 'lt');			$active_select = request_var('active_select', 'lt');			$count_select = request_var('count_select', 'eq');			$joined = request_var('joined', '');			$active = request_var('active', '');			$active = ($active) ? explode('-', $active) : array();			$joined = ($joined) ? explode('-', $joined) : array();			if ((sizeof($active) && sizeof($active) != 3) || (sizeof($joined) && sizeof($joined) != 3))			{				trigger_error($user->lang['WRONG_ACTIVE_JOINED_DATE'] . adm_back_link($this->u_action), E_USER_WARNING);			}			$count = request_var('count', '');			$key_match = array('lt' => '<', 'gt' => '>', 'eq' => '=');			$sort_by_types = array('username', 'user_email', 'user_posts', 'user_regdate', 'user_lastvisit');			$where_sql = '';			$where_sql .= ($username) ? ' AND username_clean ' . $db->sql_like_expression(str_replace('*', $db->any_char, utf8_clean_string($username))) : '';			$where_sql .= ($email) ? ' AND user_email ' . $db->sql_like_expression(str_replace('*', $db->any_char, $email)) . ' ' : '';			$where_sql .= (sizeof($joined)) ? " AND user_regdate " . $key_match[$joined_select] . ' ' . gmmktime(0, 0, 0, (int) $joined[1], (int) $joined[2], (int) $joined[0]) : '';			$where_sql .= ($count !== '') ? " AND user_posts " . $key_match[$count_select] . ' ' . (int) $count . ' ' : '';			// First handle pruning of users who never logged in, last active date is 0000-00-00			if (sizeof($active) && (int) $active[0] == 0 && (int) $active[1] == 0 && (int) $active[2] == 0)			{				$where_sql .= ' AND user_lastvisit = 0';			}						else if (sizeof($active) && $active_select != 'lt')			{				$where_sql .= ' AND user_lastvisit ' . $key_match[$active_select] . ' ' . gmmktime(0, 0, 0, (int) $active[1], (int) $active[2], (int) $active[0]);			}			else if (sizeof($active))			{				$where_sql .= ' AND (user_lastvisit > 0 AND user_lastvisit < ' . gmmktime(0, 0, 0, (int) $active[1], (int) $active[2], (int) $active[0]) . ')';			}		}		// Protect the admin, do not prune if no options are given...		if (!$where_sql)		{			return;		}		// Get bot ids		$sql = 'SELECT user_id			FROM ' . BOTS_TABLE;		$result = $db->sql_query($sql);		$bot_ids = array();		while ($row = $db->sql_fetchrow($result))		{			$bot_ids[] = $row['user_id'];		}		$db->sql_freeresult($result);		// Do not prune founder members		$sql = 'SELECT user_id, username			FROM ' . USERS_TABLE . '			WHERE user_id <> ' . ANONYMOUS . '				AND user_type <> ' . USER_FOUNDER . "			$where_sql";		$result = $db->sql_query($sql);		$where_sql = '';		$user_ids = $usernames = array();		while ($row = $db->sql_fetchrow($result))		{			// Do not prune bots and the user currently pruning.			if ($row['user_id'] != $user->data['user_id'] && !in_array($row['user_id'], $bot_ids))			{				$user_ids[] = $row['user_id'];				$usernames[$row['user_id']] = $row['username'];			}		}		$db->sql_freeresult($result);	}}?>
<?php/**** @package phpBB3* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @ignore*/if (!defined('IN_PHPBB')){	exit;}/*** Transfer class, wrapper for ftp/sftp/ssh* @package phpBB3*/class transfer{	var $connection;	var $host;	var $port;	var $username;	var $password;	var $timeout;	var $root_path;	var $tmp_path;	var $file_perms;	var $dir_perms;	/**	* Constructor - init some basic values	*/	function transfer()	{		global $phpbb_root_path;		$this->file_perms	= 0644;		$this->dir_perms	= 0777;		// We use the store directory as temporary path to circumvent open basedir restrictions		$this->tmp_path = $phpbb_root_path . 'store/';	}	/**	* Write file to location	*/	function write_file($destination_file = '', $contents = '')	{		global $phpbb_root_path;		$destination_file = $this->root_path . str_replace($phpbb_root_path, '', $destination_file);		// need to create a temp file and then move that temp file.		// ftp functions can only move files around and can't create.		// This means that the users will need to have access to write		// temporary files or have write access on a folder within phpBB		// like the cache folder. If the user can't do either, then		// he/she needs to use the fsock ftp method		$temp_name = tempnam($this->tmp_path, 'transfer_');		@unlink($temp_name);		$fp = @fopen($temp_name, 'w');		if (!$fp)		{			trigger_error('Unable to create temporary file ' . $temp_name, E_USER_ERROR);		}		@fwrite($fp, $contents);		@fclose($fp);		$result = $this->overwrite_file($temp_name, $destination_file);		// remove temporary file now		@unlink($temp_name);		return $result;	}	/**	* Moving file into location. If the destination file already exists it gets overwritten	*/	function overwrite_file($source_file, $destination_file)	{		/**		* @todo generally think about overwriting files in another way, by creating a temporary file and then renaming it		* @todo check for the destination file existance too		*/		$this->_delete($destination_file);		$result = $this->_put($source_file, $destination_file);		$this->_chmod($destination_file, $this->file_perms);		return $result;	}	/**	* Create directory structure	*/	function make_dir($dir)	{		global $phpbb_root_path;		$dir = str_replace($phpbb_root_path, '', $dir);		$dir = explode('/', $dir);		$dirs = '';		for ($i = 0, $total = sizeof($dir); $i < $total; $i++)		{			$result = true;			if (strpos($dir[$i], '.') === 0)			{				continue;			}			$cur_dir = $dir[$i] . '/';			if (!file_exists($phpbb_root_path . $dirs . $cur_dir))			{				// create the directory				$result = $this->_mkdir($dir[$i]);				$this->_chmod($dir[$i], $this->dir_perms);			}			$this->_chdir($this->root_path . $dirs . $dir[$i]);			$dirs .= $cur_dir;		}		$this->_chdir($this->root_path);		/**		* @todo stack result into array to make sure every path creation has been taken care of		*/		return $result;	}	/**	* Copy file from source location to destination location	*/	function copy_file($from_loc, $to_loc)	{		global $phpbb_root_path;		$from_loc = ((strpos($from_loc, $phpbb_root_path) !== 0) ? $phpbb_root_path : '') . $from_loc;		$to_loc = $this->root_path . str_replace($phpbb_root_path, '', $to_loc);		if (!file_exists($from_loc))		{			return false;		}		$result = $this->overwrite_file($from_loc, $to_loc);		return $result;	}	/**	* Remove file	*/	function delete_file($file)	{		global $phpbb_root_path;		$file = $this->root_path . str_replace($phpbb_root_path, '', $file);		return $this->_delete($file);	}	/**	* Remove directory	* @todo remove child directories?	*/	function remove_dir($dir)	{		global $phpbb_root_path;		$dir = $this->root_path . str_replace($phpbb_root_path, '', $dir);		return $this->_rmdir($dir);	}	/**	* Rename a file or folder	*/	function rename($old_handle, $new_handle)	{		global $phpbb_root_path;		$old_handle = $this->root_path . str_replace($phpbb_root_path, '', $old_handle);		return $this->_rename($old_handle, $new_handle);	}	/**	* Check if a specified file exist...	*/	function file_exists($directory, $filename)	{		global $phpbb_root_path;		$directory = $this->root_path . str_replace($phpbb_root_path, '', $directory);		$this->_chdir($directory);		$result = $this->_ls();		if ($result !== false && is_array($result))		{			return (in_array($filename, $result)) ? true : false;		}		return false;	}	/**	* Open session	*/	function open_session()	{		return $this->_init();	}	/**	* Close current session	*/	function close_session()	{		return $this->_close();	}	/**	* Determine methods able to be used	*/	function methods()	{		$methods = array();		$disabled_functions = explode(',', @ini_get('disable_functions'));		if (@extension_loaded('ftp'))		{			$methods[] = 'ftp';		}		if (!in_array('fsockopen', $disabled_functions))		{			$methods[] = 'ftp_fsock';		}		return $methods;	}}/*** FTP transfer class* @package phpBB3*/class ftp extends transfer{	/**	* Standard parameters for FTP session	*/	function ftp($host, $username, $password, $root_path, $port = 21, $timeout = 10)	{		$this->host			= $host;		$this->port			= $port;		$this->username		= $username;		$this->password		= $password;		$this->timeout		= $timeout;		// Make sure $this->root_path is layed out the same way as the $user->page['root_script_path'] value (/ at the end)		$this->root_path	= str_replace('\\', '/', $this->root_path);		if (!empty($root_path))		{			$this->root_path = (($root_path[0] != '/' ) ? '/' : '') . $root_path . ((substr($root_path, -1, 1) == '/') ? '' : '/');		}		// Init some needed values		transfer::transfer();		return;	}	/**	* Requests data	*/	function data()	{		global $user;		return array(			'host'		=> 'localhost',			'username'	=> 'anonymous',			'password'	=> '',			'root_path'	=> $user->page['root_script_path'],			'port'		=> 21,			'timeout'	=> 10		);	}	/**	* Init FTP Session	* @access private	*/	function _init()	{		// connect to the server		$this->connection = @ftp_connect($this->host, $this->port, $this->timeout);		if (!$this->connection)		{			return 'ERR_CONNECTING_SERVER';		}		// login to the server		if (!@ftp_login($this->connection, $this->username, $this->password))		{			return 'ERR_UNABLE_TO_LOGIN';		}		// attempt to turn pasv mode on		@ftp_pasv($this->connection, true);		// change to the root directory		if (!$this->_chdir($this->root_path))		{			return 'ERR_CHANGING_DIRECTORY';		}		return true;	}	/**	* Create Directory (MKDIR)	* @access private	*/	function _mkdir($dir)	{		return @ftp_mkdir($this->connection, $dir);	}	/**	* Remove directory (RMDIR)	* @access private	*/	function _rmdir($dir)	{		return @ftp_rmdir($this->connection, $dir);	}	/**	* Rename file	* @access private	*/	function _rename($old_handle, $new_handle)	{		return @ftp_rename($this->connection, $old_handle, $new_handle);	}	/**	* Change current working directory (CHDIR)	* @access private	*/	function _chdir($dir = '')	{		if ($dir && $dir !== '/')		{			if (substr($dir, -1, 1) == '/')			{				$dir = substr($dir, 0, -1);			}		}		return @ftp_chdir($this->connection, $dir);	}	/**	* change file permissions (CHMOD)	* @access private	*/	function _chmod($file, $perms)	{		if (function_exists('ftp_chmod'))		{			$err = @ftp_chmod($this->connection, $perms, $file);		}		else		{			// Unfortunatly CHMOD is not expecting an octal value...			// We need to transform the integer (which was an octal) to an octal representation (to get the int) and then pass as is. ;)			$chmod_cmd = 'CHMOD ' . base_convert($perms, 10, 8) . ' ' . $file;			$err = $this->_site($chmod_cmd);		}		return $err;	}	/**	* Upload file to location (PUT)	* @access private	*/	function _put($from_file, $to_file)	{		// get the file extension		$file_extension = strtolower(substr(strrchr($to_file, '.'), 1));		// We only use the BINARY file mode to cicumvent rewrite actions from ftp server (mostly linefeeds being replaced)		$mode = FTP_BINARY;		$to_dir = dirname($to_file);		$to_file = basename($to_file);		$this->_chdir($to_dir);		$result = @ftp_put($this->connection, $to_file, $from_file, $mode);		$this->_chdir($this->root_path);		return $result;	}	/**	* Delete file (DELETE)	* @access private	*/	function _delete($file)	{		return @ftp_delete($this->connection, $file);	}	/**	* Close ftp session (CLOSE)	* @access private	*/	function _close()	{		if (!$this->connection)		{			return false;		}		return @ftp_quit($this->connection);	}	/**	* Return current working directory (CWD)	* At the moment not used by parent class	* @access private	*/	function _cwd()	{		return @ftp_pwd($this->connection);	}	/**	* Return list of files in a given directory (LS)	* @access private	*/	function _ls($dir = './')	{		$list = @ftp_nlist($this->connection, $dir);		// See bug #46295 - Some FTP daemons don't like './'		if ($dir === './')		{			// Let's try some alternatives			$list = (empty($list)) ? @ftp_nlist($this->connection, '.') : $list;			$list = (empty($list)) ? @ftp_nlist($this->connection, '') : $list;		}		// Return on error		if ($list === false)		{			return false;		}		// Remove path if prepended		foreach ($list as $key => $item)		{			// Use same separator for item and dir			$item = str_replace('\\', '/', $item);			$dir = str_replace('\\', '/', $dir);			if (!empty($dir) && strpos($item, $dir) === 0)			{				$item = substr($item, strlen($dir));			}			$list[$key] = $item;		}		return $list;	}	/**	* FTP SITE command (ftp-only function)	* @access private	*/	function _site($command)	{		return @ftp_site($this->connection, $command);	}}/*** FTP fsock transfer class** @author wGEric* @package phpBB3*/class ftp_fsock extends transfer{	var $data_connection;	/**	* Standard parameters for FTP session	*/	function ftp_fsock($host, $username, $password, $root_path, $port = 21, $timeout = 10)	{		$this->host			= $host;		$this->port			= $port;		$this->username		= $username;		$this->password		= $password;		$this->timeout		= $timeout;		// Make sure $this->root_path is layed out the same way as the $user->page['root_script_path'] value (/ at the end)		$this->root_path	= str_replace('\\', '/', $this->root_path);		if (!empty($root_path))		{			$this->root_path = (($root_path[0] != '/' ) ? '/' : '') . $root_path . ((substr($root_path, -1, 1) == '/') ? '' : '/');		}		// Init some needed values		transfer::transfer();		return;	}	/**	* Requests data	*/	function data()	{		global $user;		return array(			'host'		=> 'localhost',			'username'	=> 'anonymous',			'password'	=> '',			'root_path'	=> $user->page['root_script_path'],			'port'		=> 21,			'timeout'	=> 10		);	}	/**	* Init FTP Session	* @access private	*/	function _init()	{		$errno = 0;		$errstr = '';		// connect to the server		$this->connection = @fsockopen($this->host, $this->port, $errno, $errstr, $this->timeout);		if (!$this->connection || !$this->_check_command())		{			return 'ERR_CONNECTING_SERVER';		}		@stream_set_timeout($this->connection, $this->timeout);		// login		if (!$this->_send_command('USER', $this->username))		{			return 'ERR_UNABLE_TO_LOGIN';		}		if (!$this->_send_command('PASS', $this->password))		{			return 'ERR_UNABLE_TO_LOGIN';		}		// change to the root directory		if (!$this->_chdir($this->root_path))		{			return 'ERR_CHANGING_DIRECTORY';		}		return true;	}	/**	* Create Directory (MKDIR)	* @access private	*/	function _mkdir($dir)	{		return $this->_send_command('MKD', $dir);	}	/**	* Remove directory (RMDIR)	* @access private	*/	function _rmdir($dir)	{		return $this->_send_command('RMD', $dir);	}	/**	* Rename File	* @access private	*/	function _rename($old_handle, $new_handle)	{		$this->_send_command('RNFR', $old_handle);		return $this->_send_command('RNTO', $new_handle);	}	/**	* Change current working directory (CHDIR)	* @access private	*/	function _chdir($dir = '')	{		if ($dir && $dir !== '/')		{			if (substr($dir, -1, 1) == '/')			{				$dir = substr($dir, 0, -1);			}		}		return $this->_send_command('CWD', $dir);	}	/**	* change file permissions (CHMOD)	* @access private	*/	function _chmod($file, $perms)	{		// Unfortunatly CHMOD is not expecting an octal value...		// We need to transform the integer (which was an octal) to an octal representation (to get the int) and then pass as is. ;)		return $this->_send_command('SITE CHMOD', base_convert($perms, 10, 8) . ' ' . $file);	}	/**	* Upload file to location (PUT)	* @access private	*/	function _put($from_file, $to_file)	{		// We only use the BINARY file mode to cicumvent rewrite actions from ftp server (mostly linefeeds being replaced)		// 'I' == BINARY		// 'A' == ASCII		if (!$this->_send_command('TYPE', 'I'))		{			return false;		}		// open the connection to send file over		if (!$this->_open_data_connection())		{			return false;		}		$this->_send_command('STOR', $to_file, false);		// send the file		$fp = @fopen($from_file, 'rb');		while (!@feof($fp))		{			@fwrite($this->data_connection, @fread($fp, 4096));		}		@fclose($fp);		// close connection		$this->_close_data_connection();		return $this->_check_command();	}	/**	* Delete file (DELETE)	* @access private	*/	function _delete($file)	{		return $this->_send_command('DELE', $file);	}	/**	* Close ftp session (CLOSE)	* @access private	*/	function _close()	{		if (!$this->connection)		{			return false;		}		return $this->_send_command('QUIT');	}	/**	* Return current working directory (CWD)	* At the moment not used by parent class	* @access private	*/	function _cwd()	{		$this->_send_command('PWD', '', false);		return preg_replace('#^[0-9]{3} "(.+)" .+\r\n#', '\\1', $this->_check_command(true));	}	/**	* Return list of files in a given directory (LS)	* @access private	*/	function _ls($dir = './')	{		if (!$this->_open_data_connection())		{			return false;		}		$this->_send_command('NLST', $dir);		$list = array();		while (!@feof($this->data_connection))		{			$filename = preg_replace('#[\r\n]#', '', @fgets($this->data_connection, 512));			if ($filename !== '')			{				$list[] = $filename;			}		}		$this->_close_data_connection();		// Clear buffer		$this->_check_command();		// See bug #46295 - Some FTP daemons don't like './'		if ($dir === './' && empty($list))		{			// Let's try some alternatives			$list = $this->_ls('.');			if (empty($list))			{				$list = $this->_ls('');			}			return $list;		}		// Remove path if prepended		foreach ($list as $key => $item)		{			// Use same separator for item and dir			$item = str_replace('\\', '/', $item);			$dir = str_replace('\\', '/', $dir);			if (!empty($dir) && strpos($item, $dir) === 0)			{				$item = substr($item, strlen($dir));			}			$list[$key] = $item;		}		return $list;	}	/**	* Send a command to server (FTP fsock only function)	* @access private	*/	function _send_command($command, $args = '', $check = true)	{		if (!empty($args))		{			$command = "$command $args";		}		fwrite($this->connection, $command . "\r\n");		if ($check === true && !$this->_check_command())		{			return false;		}		return true;	}	/**	* Opens a connection to send data (FTP fosck only function)	* @access private	*/	function _open_data_connection()	{		// Try to find out whether we have a IPv4 or IPv6 (control) connection		if (function_exists('stream_socket_get_name'))		{			$socket_name = stream_socket_get_name($this->connection, true);			$server_ip = substr($socket_name, 0, strrpos($socket_name, ':'));		}		if (!isset($server_ip) || preg_match(get_preg_expression('ipv4'), $server_ip))		{			// Passive mode			$this->_send_command('PASV', '', false);			if (!$ip_port = $this->_check_command(true))			{				return false;			}			// open the connection to start sending the file			if (!preg_match('#[0-9]{1,3},[0-9]{1,3},[0-9]{1,3},[0-9]{1,3},[0-9]+,[0-9]+#', $ip_port, $temp))			{				// bad ip and port				return false;			}			$temp = explode(',', $temp[0]);			$server_ip = $temp[0] . '.' . $temp[1] . '.' . $temp[2] . '.' . $temp[3];			$server_port = $temp[4] * 256 + $temp[5];		}		else		{			// Extended Passive Mode - RFC2428			$this->_send_command('EPSV', '', false);			if (!$epsv_response = $this->_check_command(true))			{				return false;			}			// Response looks like "229 Entering Extended Passive Mode (|||12345|)"			// where 12345 is the tcp port for the data connection			if (!preg_match('#\(\|\|\|([0-9]+)\|\)#', $epsv_response, $match))			{				return false;			}			$server_port = (int) $match[1];			// fsockopen expects IPv6 address in square brackets			$server_ip = "[$server_ip]";		}		$errno = 0;		$errstr = '';		if (!$this->data_connection = @fsockopen($server_ip, $server_port, $errno, $errstr, $this->timeout))		{			return false;		}		@stream_set_timeout($this->data_connection, $this->timeout);		return true;	}	/**	* Closes a connection used to send data	* @access private	*/	function _close_data_connection()	{		return @fclose($this->data_connection);	}	/**	* Check to make sure command was successful (FTP fsock only function)	* @access private	*/	function _check_command($return = false)	{		$response = '';		do		{			$result = @fgets($this->connection, 512);			$response .= $result;		}		while (substr($result, 3, 1) !== ' ');		if (!preg_match('#^[123]#', $response))		{			return false;		}		return ($return) ? $response : true;	}}?>
<?php/**** @package ucp* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @ignore*/if (!defined('IN_PHPBB')){	exit;}/*** View private message*/function view_message($id, $mode, $folder_id, $msg_id, $folder, $message_row){	global $user, $template, $auth, $db, $cache;	global $phpbb_root_path, $phpEx, $config;	$user->add_lang(array('viewtopic', 'memberlist'));	$msg_id		= (int) $msg_id;	$folder_id	= (int) $folder_id;	$author_id	= (int) $message_row['author_id'];	$view		= request_var('view', '');	// Not able to view message, it was deleted by the sender	if ($message_row['pm_deleted'])	{		$meta_info = append_sid("{$phpbb_root_path}ucp.$phpEx", "i=pm&amp;folder=$folder_id");		$message = $user->lang['NO_AUTH_READ_REMOVED_MESSAGE'];		$message .= '<br /><br />' . sprintf($user->lang['RETURN_FOLDER'], '<a href="' . $meta_info . '">', '</a>');		trigger_error($message);	}	// Do not allow hold messages to be seen	if ($folder_id == PRIVMSGS_HOLD_BOX)	{		trigger_error('NO_AUTH_READ_HOLD_MESSAGE');	}	// Grab icons	$icons = $cache->obtain_icons();	$bbcode = false;	// Instantiate BBCode if need be	if ($message_row['bbcode_bitfield'])	{		include($phpbb_root_path . 'includes/bbcode.' . $phpEx);		$bbcode = new bbcode($message_row['bbcode_bitfield']);	}	// Assign TO/BCC Addresses to template	write_pm_addresses(array('to' => $message_row['to_address'], 'bcc' => $message_row['bcc_address']), $author_id);	$user_info = get_user_information($author_id, $message_row);	// Parse the message and subject	$message = censor_text($message_row['message_text']);	// Second parse bbcode here	if ($message_row['bbcode_bitfield'])	{		$bbcode->bbcode_second_pass($message, $message_row['bbcode_uid'], $message_row['bbcode_bitfield']);	}	// Always process smilies after parsing bbcodes	$message = bbcode_nl2br($message);	$message = smiley_text($message);	// Replace naughty words such as farty pants	$message_row['message_subject'] = censor_text($message_row['message_subject']);	// Editing information	if ($message_row['message_edit_count'] && $config['display_last_edited'])	{		$l_edit_time_total = ($message_row['message_edit_count'] == 1) ? $user->lang['EDITED_TIME_TOTAL'] : $user->lang['EDITED_TIMES_TOTAL'];		$l_edited_by = '<br /><br />' . sprintf($l_edit_time_total, (!$message_row['message_edit_user']) ? $message_row['username'] : $message_row['message_edit_user'], $user->format_date($message_row['message_edit_time'], false, true), $message_row['message_edit_count']);	}	else	{		$l_edited_by = '';	}	// Pull attachment data	$display_notice = false;	$attachments = array();	if ($message_row['message_attachment'] && $config['allow_pm_attach'])	{		if ($auth->acl_get('u_pm_download'))		{			$sql = 'SELECT *				FROM ' . ATTACHMENTS_TABLE . "				WHERE post_msg_id = $msg_id					AND in_message = 1				ORDER BY filetime DESC, post_msg_id ASC";			$result = $db->sql_query($sql);			while ($row = $db->sql_fetchrow($result))			{				$attachments[] = $row;			}			$db->sql_freeresult($result);			// No attachments exist, but message table thinks they do so go ahead and reset attach flags			if (!sizeof($attachments))			{				$sql = 'UPDATE ' . PRIVMSGS_TABLE . "					SET message_attachment = 0					WHERE msg_id = $msg_id";				$db->sql_query($sql);			}		}		else		{			$display_notice = true;		}	}	// Assign inline attachments	if (!empty($attachments))	{		$update_count = array();		parse_attachments(false, $message, $attachments, $update_count);		// Update the attachment download counts		if (sizeof($update_count))		{			$sql = 'UPDATE ' . ATTACHMENTS_TABLE . '				SET download_count = download_count + 1				WHERE ' . $db->sql_in_set('attach_id', array_unique($update_count));			$db->sql_query($sql);		}	}	$user_info['sig'] = '';	$signature = ($message_row['enable_sig'] && $config['allow_sig'] && $auth->acl_get('u_sig') && $user->optionget('viewsigs')) ? $user_info['user_sig'] : '';	// End signature parsing, only if needed	if ($signature)	{		$signature = censor_text($signature);		if ($user_info['user_sig_bbcode_bitfield'])		{			if ($bbcode === false)			{				include($phpbb_root_path . 'includes/bbcode.' . $phpEx);				$bbcode = new bbcode($user_info['user_sig_bbcode_bitfield']);			}			$bbcode->bbcode_second_pass($signature, $user_info['user_sig_bbcode_uid'], $user_info['user_sig_bbcode_bitfield']);		}		$signature = bbcode_nl2br($signature);		$signature = smiley_text($signature);	}	$url = append_sid("{$phpbb_root_path}ucp.$phpEx", 'i=pm');	// Number of "to" recipients	$num_recipients = (int) preg_match_all('/:?(u|g)_([0-9]+):?/', $message_row['to_address'], $match);	$bbcode_status	= ($config['allow_bbcode'] && $config['auth_bbcode_pm'] && $auth->acl_get('u_pm_bbcode')) ? true : false;	$template->assign_vars(array(		'MESSAGE_AUTHOR_FULL'		=> get_username_string('full', $author_id, $user_info['username'], $user_info['user_colour'], $user_info['username']),		'MESSAGE_AUTHOR_COLOUR'		=> get_username_string('colour', $author_id, $user_info['username'], $user_info['user_colour'], $user_info['username']),		'MESSAGE_AUTHOR'			=> get_username_string('username', $author_id, $user_info['username'], $user_info['user_colour'], $user_info['username']),		'U_MESSAGE_AUTHOR'			=> get_username_string('profile', $author_id, $user_info['username'], $user_info['user_colour'], $user_info['username']),		'RANK_TITLE'		=> $user_info['rank_title'],		'RANK_IMG'			=> $user_info['rank_image'],		'AUTHOR_AVATAR'		=> (isset($user_info['avatar'])) ? $user_info['avatar'] : '',		'AUTHOR_JOINED'		=> $user->format_date($user_info['user_regdate']),		'AUTHOR_POSTS'		=> (int) $user_info['user_posts'],		'AUTHOR_FROM'		=> (!empty($user_info['user_from'])) ? $user_info['user_from'] : '',		'ONLINE_IMG'		=> (!$config['load_onlinetrack']) ? '' : ((isset($user_info['online']) && $user_info['online']) ? $user->img('icon_user_online', $user->lang['ONLINE']) : $user->img('icon_user_offline', $user->lang['OFFLINE'])),		'S_ONLINE'			=> (!$config['load_onlinetrack']) ? false : ((isset($user_info['online']) && $user_info['online']) ? true : false),		'DELETE_IMG'		=> $user->img('icon_post_delete', $user->lang['DELETE_MESSAGE']),		'INFO_IMG'			=> $user->img('icon_post_info', $user->lang['VIEW_PM_INFO']),		'PROFILE_IMG'		=> $user->img('icon_user_profile', $user->lang['READ_PROFILE']),		'EMAIL_IMG'			=> $user->img('icon_contact_email', $user->lang['SEND_EMAIL']),		'QUOTE_IMG'			=> $user->img('icon_post_quote', $user->lang['POST_QUOTE_PM']),		'REPLY_IMG'			=> $user->img('button_pm_reply', $user->lang['POST_REPLY_PM']),		'REPORT_IMG'		=> $user->img('icon_post_report', 'REPORT_PM'),		'EDIT_IMG'			=> $user->img('icon_post_edit', $user->lang['POST_EDIT_PM']),		'MINI_POST_IMG'		=> $user->img('icon_post_target', $user->lang['PM']),		'SENT_DATE'			=> ($view == 'print') ? $user->format_date($message_row['message_time'], false, true) : $user->format_date($message_row['message_time']),		'SUBJECT'			=> $message_row['message_subject'],		'MESSAGE'			=> $message,		'SIGNATURE'			=> ($message_row['enable_sig']) ? $signature : '',		'EDITED_MESSAGE'	=> $l_edited_by,		'MESSAGE_ID'		=> $message_row['msg_id'],		'U_PM'			=> ($config['allow_privmsg'] && $auth->acl_get('u_sendpm') && ($user_info['user_allow_pm'] || $auth->acl_gets('a_', 'm_') || $auth->acl_getf_global('m_'))) ? append_sid("{$phpbb_root_path}ucp.$phpEx", 'i=pm&amp;mode=compose&amp;u=' . $author_id) : '',		'U_WWW'			=> (!empty($user_info['user_website'])) ? $user_info['user_website'] : '',		'U_ICQ'			=> ($user_info['user_icq']) ? 'http://www.icq.com/people/' . urlencode($user_info['user_icq']) . '/' : '',		'U_AIM'			=> ($user_info['user_aim'] && $auth->acl_get('u_sendim')) ? append_sid("{$phpbb_root_path}memberlist.$phpEx", 'mode=contact&amp;action=aim&amp;u=' . $author_id) : '',		'U_YIM'			=> ($user_info['user_yim']) ? 'http://edit.yahoo.com/config/send_webmesg?.target=' . urlencode($user_info['user_yim']) . '&amp;.src=pg' : '',		'U_MSN'			=> ($user_info['user_msnm'] && $auth->acl_get('u_sendim')) ? append_sid("{$phpbb_root_path}memberlist.$phpEx", 'mode=contact&amp;action=msnm&amp;u=' . $author_id) : '',		'U_JABBER'		=> ($user_info['user_jabber'] && $auth->acl_get('u_sendim')) ? append_sid("{$phpbb_root_path}memberlist.$phpEx", 'mode=contact&amp;action=jabber&amp;u=' . $author_id) : '',		'U_DELETE'			=> ($auth->acl_get('u_pm_delete')) ? "$url&amp;mode=compose&amp;action=delete&amp;f=$folder_id&amp;p=" . $message_row['msg_id'] : '',		'U_EMAIL'			=> $user_info['email'],		'U_REPORT'			=> ($config['allow_pm_report']) ? append_sid("{$phpbb_root_path}report.$phpEx", "pm=" . $message_row['msg_id']) : '',		'U_QUOTE'			=> ($auth->acl_get('u_sendpm') && $author_id != ANONYMOUS) ? "$url&amp;mode=compose&amp;action=quote&amp;f=$folder_id&amp;p=" . $message_row['msg_id'] : '',		'U_EDIT'			=> (($message_row['message_time'] > time() - ($config['pm_edit_time'] * 60) || !$config['pm_edit_time']) && $folder_id == PRIVMSGS_OUTBOX && $auth->acl_get('u_pm_edit')) ? "$url&amp;mode=compose&amp;action=edit&amp;f=$folder_id&amp;p=" . $message_row['msg_id'] : '',		'U_POST_REPLY_PM'	=> ($auth->acl_get('u_sendpm') && $author_id != ANONYMOUS) ? "$url&amp;mode=compose&amp;action=reply&amp;f=$folder_id&amp;p=" . $message_row['msg_id'] : '',		'U_POST_REPLY_ALL'	=> ($auth->acl_get('u_sendpm') && $author_id != ANONYMOUS) ? "$url&amp;mode=compose&amp;action=reply&amp;f=$folder_id&amp;reply_to_all=1&amp;p=" . $message_row['msg_id'] : '',		'U_PREVIOUS_PM'		=> "$url&amp;f=$folder_id&amp;p=" . $message_row['msg_id'] . "&amp;view=previous",		'U_NEXT_PM'			=> "$url&amp;f=$folder_id&amp;p=" . $message_row['msg_id'] . "&amp;view=next",		'U_PM_ACTION'		=> $url . '&amp;mode=compose&amp;f=' . $folder_id . '&amp;p=' . $message_row['msg_id'],		'S_HAS_ATTACHMENTS'	=> (sizeof($attachments)) ? true : false,		'S_DISPLAY_NOTICE'	=> $display_notice && $message_row['message_attachment'],		'S_AUTHOR_DELETED'	=> ($author_id == ANONYMOUS) ? true : false,		'S_SPECIAL_FOLDER'	=> in_array($folder_id, array(PRIVMSGS_NO_BOX, PRIVMSGS_OUTBOX)),		'S_PM_RECIPIENTS'	=> $num_recipients,		'S_BBCODE_ALLOWED'	=> ($bbcode_status) ? 1 : 0,		'U_PRINT_PM'		=> ($config['print_pm'] && $auth->acl_get('u_pm_printpm')) ? "$url&amp;f=$folder_id&amp;p=" . $message_row['msg_id'] . "&amp;view=print" : '',		'U_FORWARD_PM'		=> ($config['forward_pm'] && $auth->acl_get('u_sendpm') && $auth->acl_get('u_pm_forward')) ? "$url&amp;mode=compose&amp;action=forward&amp;f=$folder_id&amp;p=" . $message_row['msg_id'] : '')	);	// Display not already displayed Attachments for this post, we already parsed them. ;)	if (isset($attachments) && sizeof($attachments))	{		foreach ($attachments as $attachment)		{			$template->assign_block_vars('attachment', array(				'DISPLAY_ATTACHMENT'	=> $attachment)			);		}	}	if (!isset($_REQUEST['view']) || $_REQUEST['view'] != 'print')	{		// Message History		if (message_history($msg_id, $user->data['user_id'], $message_row, $folder))		{			$template->assign_var('S_DISPLAY_HISTORY', true);		}	}}/*** Get user information (only for message display)*/function get_user_information($user_id, $user_row){	global $db, $auth, $user, $cache;	global $phpbb_root_path, $phpEx, $config;	if (!$user_id)	{		return array();	}	if (empty($user_row))	{		$sql = 'SELECT *			FROM ' . USERS_TABLE . '			WHERE user_id = ' . (int) $user_id;		$result = $db->sql_query($sql);		$user_row = $db->sql_fetchrow($result);		$db->sql_freeresult($result);	}	// Some standard values	$user_row['online'] = false;	$user_row['rank_title'] = $user_row['rank_image'] = $user_row['rank_image_src'] = $user_row['email'] = '';	// Generate online information for user	if ($config['load_onlinetrack'])	{		$sql = 'SELECT session_user_id, MAX(session_time) as online_time, MIN(session_viewonline) AS viewonline			FROM ' . SESSIONS_TABLE . "			WHERE session_user_id = $user_id			GROUP BY session_user_id";		$result = $db->sql_query_limit($sql, 1);		$row = $db->sql_fetchrow($result);		$db->sql_freeresult($result);		$update_time = $config['load_online_time'] * 60;		if ($row)		{			$user_row['online'] = (time() - $update_time < $row['online_time'] && ($row['viewonline'] || $auth->acl_get('u_viewonline'))) ? true : false;		}	}	if (!function_exists('get_user_avatar'))	{		include($phpbb_root_path . 'includes/functions_display.' . $phpEx);	}	$user_row['avatar'] = ($user->optionget('viewavatars')) ? get_user_avatar($user_row['user_avatar'], $user_row['user_avatar_type'], $user_row['user_avatar_width'], $user_row['user_avatar_height']) : '';	get_user_rank($user_row['user_rank'], $user_row['user_posts'], $user_row['rank_title'], $user_row['rank_image'], $user_row['rank_image_src']);	if ((!empty($user_row['user_allow_viewemail']) && $auth->acl_get('u_sendemail')) || $auth->acl_get('a_email'))	{		$user_row['email'] = ($config['board_email_form'] && $config['email_enable']) ? append_sid("{$phpbb_root_path}memberlist.$phpEx", "mode=email&amp;u=$user_id") : ((($config['board_hide_emails'] && !$auth->acl_get('a_email')) || empty($user_row['user_email'])) ? '' : 'mailto:' . $user_row['user_email']);	}	return $user_row;}?>
<?php/**** @package acp* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @ignore*/if (!defined('IN_PHPBB')){	exit;}/*** @todo [smilies] check regular expressions for special char replacements (stored specialchared in db)* @package acp*/class acp_icons{	var $u_action;	function main($id, $mode)	{		global $db, $user, $auth, $template, $cache;		global $config, $phpbb_root_path, $phpbb_admin_path, $phpEx;		$user->add_lang('acp/posting');		// Set up general vars		$action = request_var('action', '');		$action = (isset($_POST['add'])) ? 'add' : $action;		$action = (isset($_POST['edit'])) ? 'edit' : $action;		$action = (isset($_POST['import'])) ? 'import' : $action;		$icon_id = request_var('id', 0);		$mode = ($mode == 'smilies') ? 'smilies' : 'icons';		$this->tpl_name = 'acp_icons';		// What are we working on?		switch ($mode)		{			case 'smilies':				$table = SMILIES_TABLE;				$lang = 'SMILIES';				$fields = 'smiley';				$img_path = $config['smilies_path'];			break;			case 'icons':				$table = ICONS_TABLE;				$lang = 'ICONS';				$fields = 'icons';				$img_path = $config['icons_path'];			break;		}		$this->page_title = 'ACP_' . $lang;		// Clear some arrays		$_images = $_paks = array();		$notice = '';		// Grab file list of paks and images		if ($action == 'edit' || $action == 'add' || $action == 'import')		{			$imglist = filelist($phpbb_root_path . $img_path, '');			foreach ($imglist as $path => $img_ary)			{				if (empty($img_ary))				{					continue;				}				asort($img_ary, SORT_STRING);				foreach ($img_ary as $img)				{					$img_size = getimagesize($phpbb_root_path . $img_path . '/' . $path . $img);					if (!$img_size[0] || !$img_size[1] || strlen($img) > 255)					{						continue;					}					// adjust the width and height to be lower than 128px while perserving the aspect ratio (for icons)					if ($mode == 'icons')					{						if ($img_size[0] > 127 && $img_size[0] > $img_size[1])						{							$img_size[1] = (int) ($img_size[1] * (127 / $img_size[0]));							$img_size[0] = 127;						}						else if ($img_size[1] > 127)						{							$img_size[0] = (int) ($img_size[0] * (127 / $img_size[1]));							$img_size[1] = 127;						}					}					$_images[$path . $img]['file'] = $path . $img;					$_images[$path . $img]['width'] = $img_size[0];					$_images[$path . $img]['height'] = $img_size[1];				}			}			unset($imglist);			if ($dir = @opendir($phpbb_root_path . $img_path))			{				while (($file = readdir($dir)) !== false)				{					if (is_file($phpbb_root_path . $img_path . '/' . $file) && preg_match('#\.pak$#i', $file))					{						$_paks[] = $file;					}				}				closedir($dir);				if (!empty($_paks))				{					asort($_paks, SORT_STRING);				}			}		}		// What shall we do today? Oops, I believe that's trademarked ...		switch ($action)		{			case 'edit':				unset($_images);				$_images = array();			// no break;			case 'add':				$smilies = $default_row = array();				$smiley_options = $order_list = $add_order_list = '';				if ($action == 'add' && $mode == 'smilies')				{					$sql = 'SELECT *						FROM ' . SMILIES_TABLE . '						ORDER BY smiley_order';					$result = $db->sql_query($sql);					while ($row = $db->sql_fetchrow($result))					{						if (empty($smilies[$row['smiley_url']]))						{							$smilies[$row['smiley_url']] = $row;						}					}					$db->sql_freeresult($result);					if (sizeof($smilies))					{						foreach ($smilies as $row)						{							$selected = false;							if (!$smiley_options)							{								$selected = true;								$default_row = $row;							}							$smiley_options .= '<option value="' . $row['smiley_url'] . '"' . (($selected) ? ' selected="selected"' : '') . '>' . $row['smiley_url'] . '</option>';							$template->assign_block_vars('smile', array(								'SMILEY_URL'	=> addslashes($row['smiley_url']),								'CODE'			=> addslashes($row['code']),								'EMOTION'		=> addslashes($row['emotion']),								'WIDTH'			=> $row['smiley_width'],								'HEIGHT'		=> $row['smiley_height'],								'ORDER'			=> $row['smiley_order'] + 1,							));						}					}				}				$sql = "SELECT *					FROM $table					ORDER BY {$fields}_order " . (($icon_id || $action == 'add') ? 'DESC' : 'ASC');				$result = $db->sql_query($sql);				$data = array();				$after = false;				$display = 0;				$order_lists = array('', '');				$add_order_lists = array('', '');				$display_count = 0;				while ($row = $db->sql_fetchrow($result))				{					if ($action == 'add')					{						unset($_images[$row[$fields . '_url']]);					}					if ($row[$fields . '_id'] == $icon_id)					{						$after = true;						$display = $row['display_on_posting'];						$data[$row[$fields . '_url']] = $row;					}					else					{						if ($action == 'edit' && !$icon_id)						{							$data[$row[$fields . '_url']] = $row;						}						$selected = '';						if (!empty($after))						{							$selected = ' selected="selected"';							$after = false;						}						if ($row['display_on_posting'])						{							$display_count++;						}						$after_txt = ($mode == 'smilies') ? $row['code'] : $row['icons_url'];						$order_lists[$row['display_on_posting']] = '<option value="' . ($row[$fields . '_order'] + 1) . '"' . $selected . '>' . sprintf($user->lang['AFTER_' . $lang], ' -&gt; ' . $after_txt) . '</option>' . $order_lists[$row['display_on_posting']];						if (!empty($default_row))						{							$add_order_lists[$row['display_on_posting']] = '<option value="' . ($row[$fields . '_order'] + 1) . '"' . (($row[$fields . '_id'] == $default_row['smiley_id']) ? ' selected="selected"' : '') . '>' . sprintf($user->lang['AFTER_' . $lang], ' -&gt; ' . $after_txt) . '</option>' . $add_order_lists[$row['display_on_posting']];						}					}				}				$db->sql_freeresult($result);				$order_list = '<option value="1"' . ((!isset($after)) ? ' selected="selected"' : '') . '>' . $user->lang['FIRST'] . '</option>';				$add_order_list = '<option value="1">' . $user->lang['FIRST'] . '</option>';				if ($action == 'add')				{					$data = $_images;				}				$colspan = (($mode == 'smilies') ? 7 : 5);				$colspan += ($icon_id) ? 1 : 0;				$colspan += ($action == 'add') ? 2 : 0;				$template->assign_vars(array(					'S_EDIT'		=> true,					'S_SMILIES'		=> ($mode == 'smilies') ? true : false,					'S_ADD'			=> ($action == 'add') ? true : false,					'S_ORDER_LIST_DISPLAY'		=> $order_list . $order_lists[1],					'S_ORDER_LIST_UNDISPLAY'	=> $order_list . $order_lists[0],					'S_ORDER_LIST_DISPLAY_COUNT'	=> $display_count + 1,					'L_TITLE'		=> $user->lang['ACP_' . $lang],					'L_EXPLAIN'		=> $user->lang['ACP_' . $lang . '_EXPLAIN'],					'L_CONFIG'		=> $user->lang[$lang . '_CONFIG'],					'L_URL'			=> $user->lang[$lang . '_URL'],					'L_LOCATION'	=> $user->lang[$lang . '_LOCATION'],					'L_WIDTH'		=> $user->lang[$lang . '_WIDTH'],					'L_HEIGHT'		=> $user->lang[$lang . '_HEIGHT'],					'L_ORDER'		=> $user->lang[$lang . '_ORDER'],					'L_NO_ICONS'	=> $user->lang['NO_' . $lang . '_' . strtoupper($action)],					'COLSPAN'		=> $colspan,					'ID'			=> $icon_id,					'U_BACK'		=> $this->u_action,					'U_ACTION'		=> $this->u_action . '&amp;action=' . (($action == 'add') ? 'create' : 'modify'),				));				foreach ($data as $img => $img_row)				{					$template->assign_block_vars('items', array(						'IMG'		=> $img,						'A_IMG'		=> addslashes($img),						'IMG_SRC'	=> $phpbb_root_path . $img_path . '/' . $img,						'CODE'		=> ($mode == 'smilies' && isset($img_row['code'])) ? $img_row['code'] : '',						'EMOTION'	=> ($mode == 'smilies' && isset($img_row['emotion'])) ? $img_row['emotion'] : '',						'S_ID'				=> (isset($img_row[$fields . '_id'])) ? true : false,						'ID'				=> (isset($img_row[$fields . '_id'])) ? $img_row[$fields . '_id'] : 0,						'WIDTH'				=> (!empty($img_row[$fields .'_width'])) ? $img_row[$fields .'_width'] : $img_row['width'],						'HEIGHT'			=> (!empty($img_row[$fields .'_height'])) ? $img_row[$fields .'_height'] : $img_row['height'],						'POSTING_CHECKED'	=> (!empty($img_row['display_on_posting']) || $action == 'add') ? ' checked="checked"' : '',					));				}				// Ok, another row for adding an addition code for a pre-existing image...				if ($action == 'add' && $mode == 'smilies' && sizeof($smilies))				{					$template->assign_vars(array(						'S_ADD_CODE'		=> true,						'S_IMG_OPTIONS'		=> $smiley_options,						'S_ADD_ORDER_LIST_DISPLAY'		=> $add_order_list . $add_order_lists[1],						'S_ADD_ORDER_LIST_UNDISPLAY'	=> $add_order_list . $add_order_lists[0],						'IMG_SRC'			=> $phpbb_root_path . $img_path . '/' . $default_row['smiley_url'],						'IMG_PATH'			=> $img_path,						'PHPBB_ROOT_PATH'	=> $phpbb_root_path,						'CODE'				=> $default_row['code'],						'EMOTION'			=> $default_row['emotion'],						'WIDTH'				=> $default_row['smiley_width'],						'HEIGHT'			=> $default_row['smiley_height'],					));				}				return;			break;			case 'create':			case 'modify':				// Get items to create/modify				$images = (isset($_POST['image'])) ? array_keys(request_var('image', array('' => 0))) : array();				// Now really get the items				$image_id		= (isset($_POST['id'])) ? request_var('id', array('' => 0)) : array();				$image_order	= (isset($_POST['order'])) ? request_var('order', array('' => 0)) : array();				$image_width	= (isset($_POST['width'])) ? request_var('width', array('' => 0)) : array();				$image_height	= (isset($_POST['height'])) ? request_var('height', array('' => 0)) : array();				$image_add		= (isset($_POST['add_img'])) ? request_var('add_img', array('' => 0)) : array();				$image_emotion	= utf8_normalize_nfc(request_var('emotion', array('' => ''), true));				$image_code		= utf8_normalize_nfc(request_var('code', array('' => ''), true));				$image_display_on_posting = (isset($_POST['display_on_posting'])) ? request_var('display_on_posting', array('' => 0)) : array();				// Ok, add the relevant bits if we are adding new codes to existing emoticons...				if (!empty($_POST['add_additional_code']))				{					$add_image			= request_var('add_image', '');					$add_code			= utf8_normalize_nfc(request_var('add_code', '', true));					$add_emotion		= utf8_normalize_nfc(request_var('add_emotion', '', true));					if ($add_image && $add_emotion && $add_code)					{						$images[] = $add_image;						$image_add[$add_image] = true;						$image_code[$add_image] = $add_code;						$image_emotion[$add_image] = $add_emotion;						$image_width[$add_image] = request_var('add_width', 0);						$image_height[$add_image] = request_var('add_height', 0);						if (!empty($_POST['add_display_on_posting']))						{							$image_display_on_posting[$add_image] = 1;						}						$image_order[$add_image] = request_var('add_order', 0);					}				}				if ($mode == 'smilies' && $action == 'create')				{					$smiley_count = $this->item_count($table);					$addable_smileys_count = sizeof($images);					foreach ($images as $image)					{						if (!isset($image_add[$image]))						{							--$addable_smileys_count;						}					}					if ($smiley_count + $addable_smileys_count > SMILEY_LIMIT)					{						trigger_error(sprintf($user->lang['TOO_MANY_SMILIES'], SMILEY_LIMIT) . adm_back_link($this->u_action), E_USER_WARNING);					}				}				$icons_updated = 0;				$errors = array();				foreach ($images as $image)				{					if ($mode == 'smilies' && ($image_emotion[$image] == '' || $image_code[$image] == ''))					{						$errors[$image] = 'SMILIE_NO_' . (($image_emotion[$image] == '') ? 'EMOTION' : 'CODE');					}					else if ($action == 'create' && !isset($image_add[$image]))					{						// skip images where add wasn't checked					}					else if (!file_exists($phpbb_root_path . $img_path . '/' . $image))					{						$errors[$image] = 'SMILIE_NO_FILE';					}					else					{						if ($image_width[$image] == 0 || $image_height[$image] == 0)						{							$img_size = getimagesize($phpbb_root_path . $img_path . '/' . $image);							$image_width[$image] = $img_size[0];							$image_height[$image] = $img_size[1];						}						// Adjust image width/height for icons						if ($mode == 'icons')						{							if ($image_width[$image] > 127 && $image_width[$image] > $image_height[$image])							{								$image_height[$image] = (int) ($image_height[$image] * (127 / $image_width[$image]));								$image_width[$image] = 127;							}							else if ($image_height[$image] > 127)							{								$image_width[$image] = (int) ($image_width[$image] * (127 / $image_height[$image]));								$image_height[$image] = 127;							}						}						$img_sql = array(							$fields . '_url'		=> $image,							$fields . '_width'		=> $image_width[$image],							$fields . '_height'		=> $image_height[$image],							'display_on_posting'	=> (isset($image_display_on_posting[$image])) ? 1 : 0,						);						if ($mode == 'smilies')						{							$img_sql = array_merge($img_sql, array(								'emotion'	=> $image_emotion[$image],								'code'		=> $image_code[$image])							);						}						// Image_order holds the 'new' order value						if (!empty($image_order[$image]))						{							$img_sql = array_merge($img_sql, array(								$fields . '_order'	=>	$image_order[$image])							);							// Since we always add 'after' an item, we just need to increase all following + the current by one							$sql = "UPDATE $table								SET {$fields}_order = {$fields}_order + 1								WHERE {$fields}_order >= {$image_order[$image]}";							$db->sql_query($sql);							// If we adjust the order, we need to adjust all other orders too - they became inaccurate...							foreach ($image_order as $_image => $_order)							{								if ($_image == $image)								{									continue;								}								if ($_order >= $image_order[$image])								{									$image_order[$_image]++;								}							}						}						if ($action == 'modify'  && !empty($image_id[$image]))						{							$sql = "UPDATE $table								SET " . $db->sql_build_array('UPDATE', $img_sql) . "								WHERE {$fields}_id = " . $image_id[$image];							$db->sql_query($sql);							$icons_updated++;						}						else if ($action !== 'modify')						{							$sql = "INSERT INTO $table " . $db->sql_build_array('INSERT', $img_sql);							$db->sql_query($sql);							$icons_updated++;						} 					}				}				$cache->destroy('_icons');				$cache->destroy('sql', $table);				$level = E_USER_NOTICE;				switch ($icons_updated)				{					case 0:						$suc_lang = "{$lang}_NONE";						$level = E_USER_WARNING;						break;					case 1:						$suc_lang = "{$lang}_ONE";						break;					default:						$suc_lang = $lang;				}				$errormsgs = '';				foreach ($errors as $img => $error)				{					$errormsgs .= '<br />' . sprintf($user->lang[$error], $img);				}				if ($action == 'modify')				{					trigger_error($user->lang[$suc_lang . '_EDITED'] . $errormsgs . adm_back_link($this->u_action), $level);				}				else				{					trigger_error($user->lang[$suc_lang . '_ADDED'] . $errormsgs . adm_back_link($this->u_action), $level);				}			break;			case 'import':				$pak = request_var('pak', '');				$current = request_var('current', '');				if ($pak != '')				{					$order = 0;					if (!($pak_ary = @file($phpbb_root_path . $img_path . '/' . $pak)))					{						trigger_error($user->lang['PAK_FILE_NOT_READABLE'] . adm_back_link($this->u_action), E_USER_WARNING);					}					// Make sure the pak_ary is valid					foreach ($pak_ary as $pak_entry)					{						if (preg_match_all("#'(.*?)', ?#", $pak_entry, $data))						{							if ((sizeof($data[1]) != 4 && $mode == 'icons') ||								((sizeof($data[1]) != 6 || (empty($data[1][4]) || empty($data[1][5]))) && $mode == 'smilies' ))							{								trigger_error($user->lang['WRONG_PAK_TYPE'] . adm_back_link($this->u_action), E_USER_WARNING);							}						}						else						{							trigger_error($user->lang['WRONG_PAK_TYPE'] . adm_back_link($this->u_action), E_USER_WARNING);						}					}					// The user has already selected a smilies_pak file					if ($current == 'delete')					{						switch ($db->sql_layer)						{							case 'sqlite':							case 'firebird':								$db->sql_query('DELETE FROM ' . $table);							break;							default:								$db->sql_query('TRUNCATE TABLE ' . $table);							break;						}						switch ($mode)						{							case 'smilies':							break;							case 'icons':								// Reset all icon_ids								$db->sql_query('UPDATE ' . TOPICS_TABLE . ' SET icon_id = 0');								$db->sql_query('UPDATE ' . POSTS_TABLE . ' SET icon_id = 0');							break;						}					}					else					{						$cur_img = array();						$field_sql = ($mode == 'smilies') ? 'code' : 'icons_url';						$sql = "SELECT $field_sql							FROM $table";						$result = $db->sql_query($sql);						while ($row = $db->sql_fetchrow($result))						{							++$order;							$cur_img[$row[$field_sql]] = 1;						}						$db->sql_freeresult($result);					}					if ($mode == 'smilies')					{						$smiley_count = $this->item_count($table);						if ($smiley_count + sizeof($pak_ary) > SMILEY_LIMIT)						{							trigger_error(sprintf($user->lang['TOO_MANY_SMILIES'], SMILEY_LIMIT) . adm_back_link($this->u_action), E_USER_WARNING);						}					}					foreach ($pak_ary as $pak_entry)					{						$data = array();						if (preg_match_all("#'(.*?)', ?#", $pak_entry, $data))						{							if ((sizeof($data[1]) != 4 && $mode == 'icons') ||								(sizeof($data[1]) != 6 && $mode == 'smilies'))							{								trigger_error($user->lang['WRONG_PAK_TYPE'] . adm_back_link($this->u_action), E_USER_WARNING);							}							// Stripslash here because it got addslashed before... (on export)							$img = stripslashes($data[1][0]);							$width = stripslashes($data[1][1]);							$height = stripslashes($data[1][2]);							$display_on_posting = stripslashes($data[1][3]);							if (isset($data[1][4]) && isset($data[1][5]))							{								$emotion = stripslashes($data[1][4]);								$code = stripslashes($data[1][5]);							}							if ($current == 'replace' &&								(($mode == 'smilies' && !empty($cur_img[$code])) ||								($mode == 'icons' && !empty($cur_img[$img]))))							{								$replace_sql = ($mode == 'smilies') ? $code : $img;								$sql = array(									$fields . '_url'		=> $img,									$fields . '_height'		=> (int) $height,									$fields . '_width'		=> (int) $width,									'display_on_posting'	=> (int) $display_on_posting,								);								if ($mode == 'smilies')								{									$sql = array_merge($sql, array(										'emotion'				=> $emotion,									));								}								$sql = "UPDATE $table SET " . $db->sql_build_array('UPDATE', $sql) . "									WHERE $field_sql = '" . $db->sql_escape($replace_sql) . "'";								$db->sql_query($sql);							}							else							{								++$order;								$sql = array(									$fields . '_url'	=> $img,									$fields . '_height'	=> (int) $height,									$fields . '_width'	=> (int) $width,									$fields . '_order'	=> (int) $order,									'display_on_posting'=> (int) $display_on_posting,								);								if ($mode == 'smilies')								{									$sql = array_merge($sql, array(										'code'				=> $code,										'emotion'			=> $emotion,									));								}								$db->sql_query("INSERT INTO $table " . $db->sql_build_array('INSERT', $sql));							}						}					}					$cache->destroy('_icons');					$cache->destroy('sql', $table);					trigger_error($user->lang[$lang . '_IMPORT_SUCCESS'] . adm_back_link($this->u_action));				}				else				{					$pak_options = '';					foreach ($_paks as $pak)					{						$pak_options .= '<option value="' . $pak . '">' . htmlspecialchars($pak) . '</option>';					}					$template->assign_vars(array(						'S_CHOOSE_PAK'		=> true,						'S_PAK_OPTIONS'		=> $pak_options,						'L_TITLE'			=> $user->lang['ACP_' . $lang],						'L_EXPLAIN'			=> $user->lang['ACP_' . $lang . '_EXPLAIN'],						'L_NO_PAK_OPTIONS'	=> $user->lang['NO_' . $lang . '_PAK'],						'L_CURRENT'			=> $user->lang['CURRENT_' . $lang],						'L_CURRENT_EXPLAIN'	=> $user->lang['CURRENT_' . $lang . '_EXPLAIN'],						'L_IMPORT_SUBMIT'	=> $user->lang['IMPORT_' . $lang],						'U_BACK'		=> $this->u_action,						'U_ACTION'		=> $this->u_action . '&amp;action=import',						)					);				}			break;			case 'export':				$this->page_title = 'EXPORT_' . $lang;				$this->tpl_name = 'message_body';				$template->assign_vars(array(					'MESSAGE_TITLE'		=> $user->lang['EXPORT_' . $lang],					'MESSAGE_TEXT'		=> sprintf($user->lang['EXPORT_' . $lang . '_EXPLAIN'], '<a href="' . $this->u_action . '&amp;action=send">', '</a>'),					'S_USER_NOTICE'		=> true,					)				);				return;			break;			case 'send':				$sql = "SELECT *					FROM $table					ORDER BY {$fields}_order";				$result = $db->sql_query($sql);				$pak = '';				while ($row = $db->sql_fetchrow($result))				{					$pak .= "'" . addslashes($row[$fields . '_url']) . "', ";					$pak .= "'" . addslashes($row[$fields . '_width']) . "', ";					$pak .= "'" . addslashes($row[$fields . '_height']) . "', ";					$pak .= "'" . addslashes($row['display_on_posting']) . "', ";					if ($mode == 'smilies')					{						$pak .= "'" . addslashes($row['emotion']) . "', ";						$pak .= "'" . addslashes($row['code']) . "', ";					}					$pak .= "\n";				}				$db->sql_freeresult($result);				if ($pak != '')				{					garbage_collection();					header('Pragma: public');					// Send out the Headers					header('Content-Type: text/x-delimtext; name="' . $mode . '.pak"');					header('Content-Disposition: inline; filename="' . $mode . '.pak"');					echo $pak;					flush();					exit;				}				else				{					trigger_error($user->lang['NO_' . strtoupper($fields) . '_EXPORT'] . adm_back_link($this->u_action), E_USER_WARNING);				}			break;			case 'delete':				if (confirm_box(true))				{					$sql = "DELETE FROM $table						WHERE {$fields}_id = $icon_id";					$db->sql_query($sql);					switch ($mode)					{						case 'smilies':						break;						case 'icons':							// Reset appropriate icon_ids							$db->sql_query('UPDATE ' . TOPICS_TABLE . "								SET icon_id = 0								WHERE icon_id = $icon_id");							$db->sql_query('UPDATE ' . POSTS_TABLE . "								SET icon_id = 0								WHERE icon_id = $icon_id");						break;					}					$notice = $user->lang[$lang . '_DELETED'];					$cache->destroy('_icons');					$cache->destroy('sql', $table);				}				else				{					confirm_box(false, $user->lang['CONFIRM_OPERATION'], build_hidden_fields(array(						'i'			=> $id,						'mode'		=> $mode,						'id'		=> $icon_id,						'action'	=> 'delete',					)));				}			break;			case 'move_up':			case 'move_down':				// Get current order id...				$sql = "SELECT {$fields}_order as current_order					FROM $table					WHERE {$fields}_id = $icon_id";				$result = $db->sql_query($sql);				$current_order = (int) $db->sql_fetchfield('current_order');				$db->sql_freeresult($result);				if ($current_order == 0 && $action == 'move_up')				{					break;				}				// on move_down, switch position with next order_id...				// on move_up, switch position with previous order_id...				$switch_order_id = ($action == 'move_down') ? $current_order + 1 : $current_order - 1;				//				$sql = "UPDATE $table					SET {$fields}_order = $current_order					WHERE {$fields}_order = $switch_order_id						AND {$fields}_id <> $icon_id";				$db->sql_query($sql);				// Only update the other entry too if the previous entry got updated				if ($db->sql_affectedrows())				{					$sql = "UPDATE $table						SET {$fields}_order = $switch_order_id						WHERE {$fields}_order = $current_order							AND {$fields}_id = $icon_id";					$db->sql_query($sql);				}				$cache->destroy('_icons');				$cache->destroy('sql', $table);			break;		}		// By default, check that image_order is valid and fix it if necessary		$sql = "SELECT {$fields}_id AS order_id, {$fields}_order AS fields_order			FROM $table			ORDER BY display_on_posting DESC, {$fields}_order";		$result = $db->sql_query($sql);		if ($row = $db->sql_fetchrow($result))		{			$order = 0;			do			{				++$order;				if ($row['fields_order'] != $order)				{					$db->sql_query("UPDATE $table						SET {$fields}_order = $order						WHERE {$fields}_id = " . $row['order_id']);				}			}			while ($row = $db->sql_fetchrow($result));		}		$db->sql_freeresult($result);		$template->assign_vars(array(			'L_TITLE'			=> $user->lang['ACP_' . $lang],			'L_EXPLAIN'			=> $user->lang['ACP_' . $lang . '_EXPLAIN'],			'L_IMPORT'			=> $user->lang['IMPORT_' . $lang],			'L_EXPORT'			=> $user->lang['EXPORT_' . $lang],			'L_NOT_DISPLAYED'	=> $user->lang[$lang . '_NOT_DISPLAYED'],			'L_ICON_ADD'		=> $user->lang['ADD_' . $lang],			'L_ICON_EDIT'		=> $user->lang['EDIT_' . $lang],			'NOTICE'			=> $notice,			'COLSPAN'			=> ($mode == 'smilies') ? 5 : 3,			'S_SMILIES'			=> ($mode == 'smilies') ? true : false,			'U_ACTION'			=> $this->u_action,			'U_IMPORT'			=> $this->u_action . '&amp;action=import',			'U_EXPORT'			=> $this->u_action . '&amp;action=export',			)		);		$spacer = false;		$pagination_start = request_var('start', 0);		$item_count = $this->item_count($table);		$sql = "SELECT *			FROM $table			ORDER BY {$fields}_order ASC";		$result = $db->sql_query_limit($sql, $config['smilies_per_page'], $pagination_start);		while ($row = $db->sql_fetchrow($result))		{			$alt_text = ($mode == 'smilies') ? $row['code'] : '';			$template->assign_block_vars('items', array(				'S_SPACER'		=> (!$spacer && !$row['display_on_posting']) ? true : false,				'ALT_TEXT'		=> $alt_text,				'IMG_SRC'		=> $phpbb_root_path . $img_path . '/' . $row[$fields . '_url'],				'WIDTH'			=> $row[$fields . '_width'],				'HEIGHT'		=> $row[$fields . '_height'],				'CODE'			=> (isset($row['code'])) ? $row['code'] : '',				'EMOTION'		=> (isset($row['emotion'])) ? $row['emotion'] : '',				'U_EDIT'		=> $this->u_action . '&amp;action=edit&amp;id=' . $row[$fields . '_id'],				'U_DELETE'		=> $this->u_action . '&amp;action=delete&amp;id=' . $row[$fields . '_id'],				'U_MOVE_UP'		=> $this->u_action . '&amp;action=move_up&amp;id=' . $row[$fields . '_id'] . '&amp;start=' . $pagination_start,				'U_MOVE_DOWN'	=> $this->u_action . '&amp;action=move_down&amp;id=' . $row[$fields . '_id'] . '&amp;start=' . $pagination_start,			));			if (!$spacer && !$row['display_on_posting'])			{				$spacer = true;			}		}		$db->sql_freeresult($result);		$template->assign_var('PAGINATION',			generate_pagination($this->u_action, $item_count, $config['smilies_per_page'], $pagination_start, true)		);	}	/**	 * Returns the count of smilies or icons in the database	 *	 * @param string $table The table of items to count.	 * @return int number of items	 */	/* private */ function item_count($table)	{		global $db;		$sql = "SELECT COUNT(*) AS item_count			FROM $table";		$result = $db->sql_query($sql);		$item_count = (int) $db->sql_fetchfield('item_count');		$db->sql_freeresult($result);		return $item_count;	}}?>
<?php/**** captcha_qa [English]** @package language* @version $Id$* @copyright (c) 2009 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** DO NOT CHANGE*/if (!defined('IN_PHPBB')){	exit;}if (empty($lang) || !is_array($lang)){	$lang = array();}// DEVELOPERS PLEASE NOTE//// All language files should use UTF-8 as their encoding and the files must not contain a BOM.//// Placeholders can now contain order information, e.g. instead of// 'Page %s of %s' you can (and should) write 'Page %1$s of %2$s', this allows// translators to re-order the output of data while ensuring it remains correct//// You do not need this where single placeholders are used, e.g. 'Message %d' is fine// equally where a string contains only two placeholders which are used to wrap text// in a url you again do not need to specify an order e.g., 'Click %sHERE%s' is fine$lang = array_merge($lang, array(	'CAPTCHA_QA'				=> 'Q&amp;A',	'CONFIRM_QUESTION_EXPLAIN'	=> 'This question is a means of preventing automated form submissions by spambots.',	'CONFIRM_QUESTION_WRONG'	=> 'You have provided an invalid answer to the question.',	'QUESTION_ANSWERS'			=> 'Answers',	'ANSWERS_EXPLAIN'			=> 'Please enter valid answers to the question, one per line.',	'CONFIRM_QUESTION'			=> 'Question',	'ANSWER'					=> 'Answer',	'EDIT_QUESTION'				=> 'Edit Question',	'QUESTIONS'					=> 'Questions',	'QUESTIONS_EXPLAIN'			=> 'For every form submission where you have enabled the Q&amp;A plugin, users will be asked one of the questions specified here. To use this plugin at least one question must be set in the default language. These questions should be easy for your target audience to answer but beyond the ability of a bot capable of running a Google search. Using a large and regularly changed set of questions will yield the best results. Enable the strict setting if your question relies on mixed case, punctuation or whitespace.',	'QUESTION_DELETED'			=> 'Question deleted',	'QUESTION_LANG'				=> 'Language',	'QUESTION_LANG_EXPLAIN'		=> 'The language this question and its answers are written in.',	'QUESTION_STRICT'			=> 'Strict check',	'QUESTION_STRICT_EXPLAIN'	=> 'Enable to enforce mixed case, punctuation and whitespace.',	'QUESTION_TEXT'				=> 'Question',	'QUESTION_TEXT_EXPLAIN'		=> 'The question presented to the user.',	'QA_ERROR_MSG'				=> 'Please fill in all fields and enter at least one answer.',	'QA_LAST_QUESTION'			=> 'You cannot delete all questions while the plugin is active.',));?>
