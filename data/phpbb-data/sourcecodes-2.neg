<?php/**** @package install* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//***/if (!defined('IN_INSTALL')){	// Someone has tried to access the file direct. This is not a good idea, so exit	exit;}if (!empty($setmodules)){	// If phpBB is already installed we do not include this module	if (@file_exists($phpbb_root_path . 'config.' . $phpEx) && !file_exists($phpbb_root_path . 'cache/install_lock'))	{		include_once($phpbb_root_path . 'config.' . $phpEx);		if (defined('PHPBB_INSTALLED'))		{			return;		}	}	$module[] = array(		'module_type'		=> 'install',		'module_title'		=> 'INSTALL',		'module_filename'	=> substr(basename(__FILE__), 0, -strlen($phpEx)-1),		'module_order'		=> 10,		'module_subs'		=> '',		'module_stages'		=> array('INTRO', 'REQUIREMENTS', 'DATABASE', 'ADMINISTRATOR', 'CONFIG_FILE', 'ADVANCED', 'CREATE_TABLE', 'FINAL'),		'module_reqs'		=> ''	);}/*** Installation* @package install*/class install_install extends module{	function install_install(&$p_master)	{		$this->p_master = &$p_master;	}	function main($mode, $sub)	{		global $lang, $template, $language, $phpbb_root_path;		switch ($sub)		{			case 'intro':				$this->page_title = $lang['SUB_INTRO'];				$template->assign_vars(array(					'TITLE'			=> $lang['INSTALL_INTRO'],					'BODY'			=> $lang['INSTALL_INTRO_BODY'],					'L_SUBMIT'		=> $lang['NEXT_STEP'],					'S_LANG_SELECT'	=> '<select id="language" name="language">' . $this->p_master->inst_language_select($language) . '</select>',					'U_ACTION'		=> $this->p_master->module_url . "?mode=$mode&amp;sub=requirements&amp;language=$language",				));			break;			case 'requirements':				$this->check_server_requirements($mode, $sub);			break;			case 'database':				$this->obtain_database_settings($mode, $sub);			break;			case 'administrator':				$this->obtain_admin_settings($mode, $sub);			break;			case 'config_file':				$this->create_config_file($mode, $sub);			break;			case 'advanced':				$this->obtain_advanced_settings($mode, $sub);			break;			case 'create_table':				$this->load_schema($mode, $sub);			break;			case 'final':				$this->build_search_index($mode, $sub);				$this->add_modules($mode, $sub);				$this->add_language($mode, $sub);				$this->add_bots($mode, $sub);				$this->email_admin($mode, $sub);				// Remove the lock file				@unlink($phpbb_root_path . 'cache/install_lock');			break;		}		$this->tpl_name = 'install_install';	}	/**	* Checks that the server we are installing on meets the requirements for running phpBB	*/	function check_server_requirements($mode, $sub)	{		global $lang, $template, $phpbb_root_path, $phpEx, $language;		$this->page_title = $lang['STAGE_REQUIREMENTS'];		$template->assign_vars(array(			'TITLE'		=> $lang['REQUIREMENTS_TITLE'],			'BODY'		=> $lang['REQUIREMENTS_EXPLAIN'],		));		$passed = array('php' => false, 'db' => false, 'files' => false, 'pcre' => false, 'imagesize' => false,);		// Test for basic PHP settings		$template->assign_block_vars('checks', array(			'S_LEGEND'			=> true,			'LEGEND'			=> $lang['PHP_SETTINGS'],			'LEGEND_EXPLAIN'	=> $lang['PHP_SETTINGS_EXPLAIN'],		));		// Test the minimum PHP version		$php_version = PHP_VERSION;		if (version_compare($php_version, '4.3.3') < 0)		{			$result = '<strong style="color:red">' . $lang['NO'] . '</strong>';		}		else		{			$passed['php'] = true;			// We also give feedback on whether we're running in safe mode			$result = '<strong style="color:green">' . $lang['YES'];			if (@ini_get('safe_mode') == '1' || strtolower(@ini_get('safe_mode')) == 'on')			{				$result .= ', ' . $lang['PHP_SAFE_MODE'];			}			$result .= '</strong>';		}		$template->assign_block_vars('checks', array(			'TITLE'			=> $lang['PHP_VERSION_REQD'],			'RESULT'		=> $result,			'S_EXPLAIN'		=> false,			'S_LEGEND'		=> false,		));		// Check for register_globals being enabled		if (@ini_get('register_globals') == '1' || strtolower(@ini_get('register_globals')) == 'on')		{			$result = '<strong style="color:red">' . $lang['NO'] . '</strong>';		}		else		{			$result = '<strong style="color:green">' . $lang['YES'] . '</strong>';		}		$template->assign_block_vars('checks', array(			'TITLE'			=> $lang['PHP_REGISTER_GLOBALS'],			'TITLE_EXPLAIN'	=> $lang['PHP_REGISTER_GLOBALS_EXPLAIN'],			'RESULT'		=> $result,			'S_EXPLAIN'		=> true,			'S_LEGEND'		=> false,		));		// Check for url_fopen		if (@ini_get('allow_url_fopen') == '1' || strtolower(@ini_get('allow_url_fopen')) == 'on')		{			$result = '<strong style="color:green">' . $lang['YES'] . '</strong>';		}		else		{			$result = '<strong style="color:red">' . $lang['NO'] . '</strong>';		}		$template->assign_block_vars('checks', array(			'TITLE'			=> $lang['PHP_URL_FOPEN_SUPPORT'],			'TITLE_EXPLAIN'	=> $lang['PHP_URL_FOPEN_SUPPORT_EXPLAIN'],			'RESULT'		=> $result,			'S_EXPLAIN'		=> true,			'S_LEGEND'		=> false,		));		// Check for getimagesize		if (@function_exists('getimagesize'))		{			$passed['imagesize'] = true;			$result = '<strong style="color:green">' . $lang['YES'] . '</strong>';		}		else		{			$result = '<strong style="color:red">' . $lang['NO'] . '</strong>';		}		$template->assign_block_vars('checks', array(			'TITLE'			=> $lang['PHP_GETIMAGESIZE_SUPPORT'],			'TITLE_EXPLAIN'	=> $lang['PHP_GETIMAGESIZE_SUPPORT_EXPLAIN'],			'RESULT'		=> $result,			'S_EXPLAIN'		=> true,			'S_LEGEND'		=> false,		));		// Check for PCRE UTF-8 support		if (@preg_match('//u', ''))		{			$passed['pcre'] = true;			$result = '<strong style="color:green">' . $lang['YES'] . '</strong>';		}		else		{			$result = '<strong style="color:red">' . $lang['NO'] . '</strong>';		}		$template->assign_block_vars('checks', array(			'TITLE'			=> $lang['PCRE_UTF_SUPPORT'],			'TITLE_EXPLAIN'	=> $lang['PCRE_UTF_SUPPORT_EXPLAIN'],			'RESULT'		=> $result,			'S_EXPLAIN'		=> true,			'S_LEGEND'		=> false,		));/***		Better not enabling and adding to the loaded extensions due to the specific requirements needed		if (!@extension_loaded('mbstring'))		{			can_load_dll('mbstring');		}*/		$passed['mbstring'] = true;		if (@extension_loaded('mbstring'))		{			// Test for available database modules			$template->assign_block_vars('checks', array(				'S_LEGEND'			=> true,				'LEGEND'			=> $lang['MBSTRING_CHECK'],				'LEGEND_EXPLAIN'	=> $lang['MBSTRING_CHECK_EXPLAIN'],			));			$checks = array(				array('func_overload', '&', MB_OVERLOAD_MAIL|MB_OVERLOAD_STRING),				array('encoding_translation', '!=', 0),				array('http_input', '!=', 'pass'),				array('http_output', '!=', 'pass')			);			foreach ($checks as $mb_checks)			{				$ini_val = @ini_get('mbstring.' . $mb_checks[0]);				switch ($mb_checks[1])				{					case '&':						if (intval($ini_val) & $mb_checks[2])						{							$result = '<strong style="color:red">' . $lang['NO'] . '</strong>';							$passed['mbstring'] = false;						}						else						{							$result = '<strong style="color:green">' . $lang['YES'] . '</strong>';						}					break;					case '!=':						if ($ini_val != $mb_checks[2])						{							$result = '<strong style="color:red">' . $lang['NO'] . '</strong>';							$passed['mbstring'] = false;						}						else						{							$result = '<strong style="color:green">' . $lang['YES'] . '</strong>';						}					break;				}				$template->assign_block_vars('checks', array(					'TITLE'			=> $lang['MBSTRING_' . strtoupper($mb_checks[0])],					'TITLE_EXPLAIN'	=> $lang['MBSTRING_' . strtoupper($mb_checks[0]) . '_EXPLAIN'],					'RESULT'		=> $result,					'S_EXPLAIN'		=> true,					'S_LEGEND'		=> false,				));			}		}		// Test for available database modules		$template->assign_block_vars('checks', array(			'S_LEGEND'			=> true,			'LEGEND'			=> $lang['PHP_SUPPORTED_DB'],			'LEGEND_EXPLAIN'	=> $lang['PHP_SUPPORTED_DB_EXPLAIN'],		));		$available_dbms = get_available_dbms(false, true);		$passed['db'] = $available_dbms['ANY_DB_SUPPORT'];		unset($available_dbms['ANY_DB_SUPPORT']);		foreach ($available_dbms as $db_name => $db_ary)		{			if (!$db_ary['AVAILABLE'])			{				$template->assign_block_vars('checks', array(					'TITLE'		=> $lang['DLL_' . strtoupper($db_name)],					'RESULT'	=> '<span style="color:red">' . $lang['UNAVAILABLE'] . '</span>',					'S_EXPLAIN'	=> false,					'S_LEGEND'	=> false,				));			}			else			{				$template->assign_block_vars('checks', array(					'TITLE'		=> $lang['DLL_' . strtoupper($db_name)],					'RESULT'	=> '<strong style="color:green">' . $lang['AVAILABLE'] . '</strong>',					'S_EXPLAIN'	=> false,					'S_LEGEND'	=> false,				));			}		}		// Test for other modules		$template->assign_block_vars('checks', array(			'S_LEGEND'			=> true,			'LEGEND'			=> $lang['PHP_OPTIONAL_MODULE'],			'LEGEND_EXPLAIN'	=> $lang['PHP_OPTIONAL_MODULE_EXPLAIN'],		));		foreach ($this->php_dlls_other as $dll)		{			if (!@extension_loaded($dll))			{				if (!can_load_dll($dll))				{					$template->assign_block_vars('checks', array(						'TITLE'		=> $lang['DLL_' . strtoupper($dll)],						'RESULT'	=> '<strong style="color:red">' . $lang['UNAVAILABLE'] . '</strong>',						'S_EXPLAIN'	=> false,						'S_LEGEND'	=> false,					));					continue;				}			}			$template->assign_block_vars('checks', array(				'TITLE'		=> $lang['DLL_' . strtoupper($dll)],				'RESULT'	=> '<strong style="color:green">' . $lang['AVAILABLE'] . '</strong>',				'S_EXPLAIN'	=> false,				'S_LEGEND'	=> false,			));		}		// Can we find Imagemagick anywhere on the system?		$exe = (DIRECTORY_SEPARATOR == '\\') ? '.exe' : '';		$magic_home = getenv('MAGICK_HOME');		$img_imagick = '';		if (empty($magic_home))		{			$locations = array('C:/WINDOWS/', 'C:/WINNT/', 'C:/WINDOWS/SYSTEM/', 'C:/WINNT/SYSTEM/', 'C:/WINDOWS/SYSTEM32/', 'C:/WINNT/SYSTEM32/', '/usr/bin/', '/usr/sbin/', '/usr/local/bin/', '/usr/local/sbin/', '/opt/', '/usr/imagemagick/', '/usr/bin/imagemagick/');			$path_locations = str_replace('\\', '/', (explode(($exe) ? ';' : ':', getenv('PATH'))));			$locations = array_merge($path_locations, $locations);			foreach ($locations as $location)			{				// The path might not end properly, fudge it				if (substr($location, -1, 1) !== '/')				{					$location .= '/';				}				if (@file_exists($location) && @is_readable($location . 'mogrify' . $exe) && @filesize($location . 'mogrify' . $exe) > 3000)				{					$img_imagick = str_replace('\\', '/', $location);					continue;				}			}		}		else		{			$img_imagick = str_replace('\\', '/', $magic_home);		}		$template->assign_block_vars('checks', array(			'TITLE'		=> $lang['APP_MAGICK'],			'RESULT'	=> ($img_imagick) ? '<strong style="color:green">' . $lang['AVAILABLE'] . ', ' . $img_imagick . '</strong>' : '<strong style="color:blue">' . $lang['NO_LOCATION'] . '</strong>',			'S_EXPLAIN'	=> false,			'S_LEGEND'	=> false,		));		// Check permissions on files/directories we need access to		$template->assign_block_vars('checks', array(			'S_LEGEND'			=> true,			'LEGEND'			=> $lang['FILES_REQUIRED'],			'LEGEND_EXPLAIN'	=> $lang['FILES_REQUIRED_EXPLAIN'],		));		$directories = array('cache/', 'files/', 'store/');		umask(0);		$passed['files'] = true;		foreach ($directories as $dir)		{			$exists = $write = false;			// Try to create the directory if it does not exist			if (!file_exists($phpbb_root_path . $dir))			{				@mkdir($phpbb_root_path . $dir, 0777);				phpbb_chmod($phpbb_root_path . $dir, CHMOD_READ | CHMOD_WRITE);			}			// Now really check			if (file_exists($phpbb_root_path . $dir) && is_dir($phpbb_root_path . $dir))			{				phpbb_chmod($phpbb_root_path . $dir, CHMOD_READ | CHMOD_WRITE);				$exists = true;			}			// Now check if it is writable by storing a simple file			$fp = @fopen($phpbb_root_path . $dir . 'test_lock', 'wb');			if ($fp !== false)			{				$write = true;			}			@fclose($fp);			@unlink($phpbb_root_path . $dir . 'test_lock');			$passed['files'] = ($exists && $write && $passed['files']) ? true : false;			$exists = ($exists) ? '<strong style="color:green">' . $lang['FOUND'] . '</strong>' : '<strong style="color:red">' . $lang['NOT_FOUND'] . '</strong>';			$write = ($write) ? ', <strong style="color:green">' . $lang['WRITABLE'] . '</strong>' : (($exists) ? ', <strong style="color:red">' . $lang['UNWRITABLE'] . '</strong>' : '');			$template->assign_block_vars('checks', array(				'TITLE'		=> $dir,				'RESULT'	=> $exists . $write,				'S_EXPLAIN'	=> false,				'S_LEGEND'	=> false,			));		}		// Check permissions on files/directories it would be useful access to		$template->assign_block_vars('checks', array(			'S_LEGEND'			=> true,			'LEGEND'			=> $lang['FILES_OPTIONAL'],			'LEGEND_EXPLAIN'	=> $lang['FILES_OPTIONAL_EXPLAIN'],		));		$directories = array('config.' . $phpEx, 'images/avatars/upload/');		foreach ($directories as $dir)		{			$write = $exists = true;			if (file_exists($phpbb_root_path . $dir))			{				if (!phpbb_is_writable($phpbb_root_path . $dir))				{					$write = false;				}			}			else			{				$write = $exists = false;			}			$exists_str = ($exists) ? '<strong style="color:green">' . $lang['FOUND'] . '</strong>' : '<strong style="color:red">' . $lang['NOT_FOUND'] . '</strong>';			$write_str = ($write) ? ', <strong style="color:green">' . $lang['WRITABLE'] . '</strong>' : (($exists) ? ', <strong style="color:red">' . $lang['UNWRITABLE'] . '</strong>' : '');			$template->assign_block_vars('checks', array(				'TITLE'		=> $dir,				'RESULT'	=> $exists_str . $write_str,				'S_EXPLAIN'	=> false,				'S_LEGEND'	=> false,			));		}		// And finally where do we want to go next (well today is taken isn't it :P)		$s_hidden_fields = ($img_imagick) ? '<input type="hidden" name="img_imagick" value="' . addslashes($img_imagick) . '" />' : '';		$url = (!in_array(false, $passed)) ? $this->p_master->module_url . "?mode=$mode&amp;sub=database&amp;language=$language" : $this->p_master->module_url . "?mode=$mode&amp;sub=requirements&amp;language=$language	";		$submit = (!in_array(false, $passed)) ? $lang['INSTALL_START'] : $lang['INSTALL_TEST'];		$template->assign_vars(array(			'L_SUBMIT'	=> $submit,			'S_HIDDEN'	=> $s_hidden_fields,			'U_ACTION'	=> $url,		));	}	/**	* Obtain the information required to connect to the database	*/	function obtain_database_settings($mode, $sub)	{		global $lang, $template, $phpEx;		$this->page_title = $lang['STAGE_DATABASE'];		// Obtain any submitted data		$data = $this->get_submitted_data();		$connect_test = false;		$error = array();		$available_dbms = get_available_dbms(false, true);		// Has the user opted to test the connection?		if (isset($_POST['testdb']))		{			if (!isset($available_dbms[$data['dbms']]) || !$available_dbms[$data['dbms']]['AVAILABLE'])			{				$error[] = $lang['INST_ERR_NO_DB'];				$connect_test = false;			}			else if (!preg_match(get_preg_expression('table_prefix'), $data['table_prefix']))			{				$error[] = $lang['INST_ERR_DB_INVALID_PREFIX'];				$connect_test = false;			}			else			{				$connect_test = connect_check_db(true, $error, $available_dbms[$data['dbms']], $data['table_prefix'], $data['dbhost'], $data['dbuser'], htmlspecialchars_decode($data['dbpasswd']), $data['dbname'], $data['dbport']);			}			$template->assign_block_vars('checks', array(				'S_LEGEND'			=> true,				'LEGEND'			=> $lang['DB_CONNECTION'],				'LEGEND_EXPLAIN'	=> false,			));			if ($connect_test)			{				$template->assign_block_vars('checks', array(					'TITLE'		=> $lang['DB_TEST'],					'RESULT'	=> '<strong style="color:green">' . $lang['SUCCESSFUL_CONNECT'] . '</strong>',					'S_EXPLAIN'	=> false,					'S_LEGEND'	=> false,				));			}			else			{				$template->assign_block_vars('checks', array(					'TITLE'		=> $lang['DB_TEST'],					'RESULT'	=> '<strong style="color:red">' . implode('<br />', $error) . '</strong>',					'S_EXPLAIN'	=> false,					'S_LEGEND'	=> false,				));			}		}		if (!$connect_test)		{			// Update the list of available DBMS modules to only contain those which can be used			$available_dbms_temp = array();			foreach ($available_dbms as $type => $dbms_ary)			{				if (!$dbms_ary['AVAILABLE'])				{					continue;				}				$available_dbms_temp[$type] = $dbms_ary;			}			$available_dbms = &$available_dbms_temp;			// And now for the main part of this page			$data['table_prefix'] = (!empty($data['table_prefix']) ? $data['table_prefix'] : 'phpbb_');			foreach ($this->db_config_options as $config_key => $vars)			{				if (!is_array($vars) && strpos($config_key, 'legend') === false)				{					continue;				}				if (strpos($config_key, 'legend') !== false)				{					$template->assign_block_vars('options', array(						'S_LEGEND'		=> true,						'LEGEND'		=> $lang[$vars])					);					continue;				}				$options = isset($vars['options']) ? $vars['options'] : '';				$template->assign_block_vars('options', array(					'KEY'			=> $config_key,					'TITLE'			=> $lang[$vars['lang']],					'S_EXPLAIN'		=> $vars['explain'],					'S_LEGEND'		=> false,					'TITLE_EXPLAIN'	=> ($vars['explain']) ? $lang[$vars['lang'] . '_EXPLAIN'] : '',					'CONTENT'		=> $this->p_master->input_field($config_key, $vars['type'], $data[$config_key], $options),					)				);			}		}		// And finally where do we want to go next (well today is taken isn't it :P)		$s_hidden_fields = ($data['img_imagick']) ? '<input type="hidden" name="img_imagick" value="' . addslashes($data['img_imagick']) . '" />' : '';		$s_hidden_fields .= '<input type="hidden" name="language" value="' . $data['language'] . '" />';		if ($connect_test)		{			foreach ($this->db_config_options as $config_key => $vars)			{				if (!is_array($vars))				{					continue;				}				$s_hidden_fields .= '<input type="hidden" name="' . $config_key . '" value="' . $data[$config_key] . '" />';			}		}		$url = ($connect_test) ? $this->p_master->module_url . "?mode=$mode&amp;sub=administrator" : $this->p_master->module_url . "?mode=$mode&amp;sub=database";		$s_hidden_fields .= ($connect_test) ? '' : '<input type="hidden" name="testdb" value="true" />';		$submit = $lang['NEXT_STEP'];		$template->assign_vars(array(			'L_SUBMIT'	=> $submit,			'S_HIDDEN'	=> $s_hidden_fields,			'U_ACTION'	=> $url,		));	}	/**	* Obtain the administrator's name, password and email address	*/	function obtain_admin_settings($mode, $sub)	{		global $lang, $template, $phpEx;		$this->page_title = $lang['STAGE_ADMINISTRATOR'];		// Obtain any submitted data		$data = $this->get_submitted_data();		if ($data['dbms'] == '')		{			// Someone's been silly and tried calling this page direct			// So we send them back to the start to do it again properly			$this->p_master->redirect("index.$phpEx?mode=install");		}		$s_hidden_fields = ($data['img_imagick']) ? '<input type="hidden" name="img_imagick" value="' . addslashes($data['img_imagick']) . '" />' : '';		$passed = false;		$data['default_lang'] = ($data['default_lang'] !== '') ? $data['default_lang'] : $data['language'];		if (isset($_POST['check']))		{			$error = array();			// Check the entered email address and password			if ($data['admin_name'] == '' || $data['admin_pass1'] == '' || $data['admin_pass2'] == '' || $data['board_email1'] == '' || $data['board_email2'] == '')			{				$error[] = $lang['INST_ERR_MISSING_DATA'];			}			if ($data['admin_pass1'] != $data['admin_pass2'] && $data['admin_pass1'] != '')			{				$error[] = $lang['INST_ERR_PASSWORD_MISMATCH'];			}			// Test against the default username rules			if ($data['admin_name'] != '' && utf8_strlen($data['admin_name']) < 3)			{				$error[] = $lang['INST_ERR_USER_TOO_SHORT'];			}			if ($data['admin_name'] != '' && utf8_strlen($data['admin_name']) > 20)			{				$error[] = $lang['INST_ERR_USER_TOO_LONG'];			}			// Test against the default password rules			if ($data['admin_pass1'] != '' && utf8_strlen($data['admin_pass1']) < 6)			{				$error[] = $lang['INST_ERR_PASSWORD_TOO_SHORT'];			}			if ($data['admin_pass1'] != '' && utf8_strlen($data['admin_pass1']) > 30)			{				$error[] = $lang['INST_ERR_PASSWORD_TOO_LONG'];			}			if ($data['board_email1'] != $data['board_email2'] && $data['board_email1'] != '')			{				$error[] = $lang['INST_ERR_EMAIL_MISMATCH'];			}			if ($data['board_email1'] != '' && !preg_match('/^' . get_preg_expression('email') . '$/i', $data['board_email1']))			{				$error[] = $lang['INST_ERR_EMAIL_INVALID'];			}			$template->assign_block_vars('checks', array(				'S_LEGEND'			=> true,				'LEGEND'			=> $lang['STAGE_ADMINISTRATOR'],				'LEGEND_EXPLAIN'	=> false,			));			if (!sizeof($error))			{				$passed = true;				$template->assign_block_vars('checks', array(					'TITLE'		=> $lang['ADMIN_TEST'],					'RESULT'	=> '<strong style="color:green">' . $lang['TESTS_PASSED'] . '</strong>',					'S_EXPLAIN'	=> false,					'S_LEGEND'	=> false,				));			}			else			{				$template->assign_block_vars('checks', array(					'TITLE'		=> $lang['ADMIN_TEST'],					'RESULT'	=> '<strong style="color:red">' . implode('<br />', $error) . '</strong>',					'S_EXPLAIN'	=> false,					'S_LEGEND'	=> false,				));			}		}		if (!$passed)		{			foreach ($this->admin_config_options as $config_key => $vars)			{				if (!is_array($vars) && strpos($config_key, 'legend') === false)				{					continue;				}				if (strpos($config_key, 'legend') !== false)				{					$template->assign_block_vars('options', array(						'S_LEGEND'		=> true,						'LEGEND'		=> $lang[$vars])					);					continue;				}				$options = isset($vars['options']) ? $vars['options'] : '';				$template->assign_block_vars('options', array(					'KEY'			=> $config_key,					'TITLE'			=> $lang[$vars['lang']],					'S_EXPLAIN'		=> $vars['explain'],					'S_LEGEND'		=> false,					'TITLE_EXPLAIN'	=> ($vars['explain']) ? $lang[$vars['lang'] . '_EXPLAIN'] : '',					'CONTENT'		=> $this->p_master->input_field($config_key, $vars['type'], $data[$config_key], $options),					)				);			}		}		else		{			foreach ($this->admin_config_options as $config_key => $vars)			{				if (!is_array($vars))				{					continue;				}				$s_hidden_fields .= '<input type="hidden" name="' . $config_key . '" value="' . $data[$config_key] . '" />';			}		}		$s_hidden_fields .= ($data['img_imagick']) ? '<input type="hidden" name="img_imagick" value="' . addslashes($data['img_imagick']) . '" />' : '';		$s_hidden_fields .= '<input type="hidden" name="language" value="' . $data['language'] . '" />';		foreach ($this->db_config_options as $config_key => $vars)		{			if (!is_array($vars))			{				continue;			}			$s_hidden_fields .= '<input type="hidden" name="' . $config_key . '" value="' . $data[$config_key] . '" />';		}		$submit = $lang['NEXT_STEP'];		$url = ($passed) ? $this->p_master->module_url . "?mode=$mode&amp;sub=config_file" : $this->p_master->module_url . "?mode=$mode&amp;sub=administrator";		$s_hidden_fields .= ($passed) ? '' : '<input type="hidden" name="check" value="true" />';		$template->assign_vars(array(			'L_SUBMIT'	=> $submit,			'S_HIDDEN'	=> $s_hidden_fields,			'U_ACTION'	=> $url,		));	}	/**	* Writes the config file to disk, or if unable to do so offers alternative methods	*/	function create_config_file($mode, $sub)	{		global $lang, $template, $phpbb_root_path, $phpEx;		$this->page_title = $lang['STAGE_CONFIG_FILE'];		// Obtain any submitted data		$data = $this->get_submitted_data();		if ($data['dbms'] == '')		{			// Someone's been silly and tried calling this page direct			// So we send them back to the start to do it again properly			$this->p_master->redirect("index.$phpEx?mode=install");		}		$s_hidden_fields = ($data['img_imagick']) ? '<input type="hidden" name="img_imagick" value="' . addslashes($data['img_imagick']) . '" />' : '';		$s_hidden_fields .= '<input type="hidden" name="language" value="' . $data['language'] . '" />';		$written = false;		// Create a list of any PHP modules we wish to have loaded		$load_extensions = array();		$available_dbms = get_available_dbms($data['dbms']);		$check_exts = array_merge(array($available_dbms[$data['dbms']]['MODULE']), $this->php_dlls_other);		foreach ($check_exts as $dll)		{			if (!@extension_loaded($dll))			{				if (!can_load_dll($dll))				{					continue;				}				$load_extensions[] = $dll . '.' . PHP_SHLIB_SUFFIX;			}		}		// Create a lock file to indicate that there is an install in progress		$fp = @fopen($phpbb_root_path . 'cache/install_lock', 'wb');		if ($fp === false)		{			// We were unable to create the lock file - abort			$this->p_master->error($lang['UNABLE_WRITE_LOCK'], __LINE__, __FILE__);		}		@fclose($fp);		@chmod($phpbb_root_path . 'cache/install_lock', 0777);		$load_extensions = implode(',', $load_extensions);		// Time to convert the data provided into a config file		$config_data = "<?php\n";		$config_data .= "// phpBB 3.0.x auto-generated configuration file\n// Do not change anything in this file!\n";		$config_data_array = array(			'dbms'			=> $available_dbms[$data['dbms']]['DRIVER'],			'dbhost'		=> $data['dbhost'],			'dbport'		=> $data['dbport'],			'dbname'		=> $data['dbname'],			'dbuser'		=> $data['dbuser'],			'dbpasswd'		=> htmlspecialchars_decode($data['dbpasswd']),			'table_prefix'	=> $data['table_prefix'],			'acm_type'		=> 'file',			'load_extensions'	=> $load_extensions,		);		foreach ($config_data_array as $key => $value)		{			$config_data .= "\${$key} = '" . str_replace("'", "\\'", str_replace('\\', '\\\\', $value)) . "';\n";		}		unset($config_data_array);		$config_data .= "\n@define('PHPBB_INSTALLED', true);\n";		$config_data .= "// @define('DEBUG', true);\n";		$config_data .= "// @define('DEBUG_EXTRA', true);\n";		$config_data .= '?' . '>'; // Done this to prevent highlighting editors getting confused!		// Attempt to write out the config file directly. If it works, this is the easiest way to do it ...		if ((file_exists($phpbb_root_path . 'config.' . $phpEx) && phpbb_is_writable($phpbb_root_path . 'config.' . $phpEx)) || phpbb_is_writable($phpbb_root_path))		{			// Assume it will work ... if nothing goes wrong below			$written = true;			if (!($fp = @fopen($phpbb_root_path . 'config.' . $phpEx, 'w')))			{				// Something went wrong ... so let's try another method				$written = false;			}			if (!(@fwrite($fp, $config_data)))			{				// Something went wrong ... so let's try another method				$written = false;			}			@fclose($fp);			if ($written)			{				// We may revert back to chmod() if we see problems with users not able to change their config.php file directly				phpbb_chmod($phpbb_root_path . 'config.' . $phpEx, CHMOD_READ);			}		}		if (isset($_POST['dldone']))		{			// Do a basic check to make sure that the file has been uploaded			// Note that all we check is that the file has _something_ in it			// We don't compare the contents exactly - if they can't upload			// a single file correctly, it's likely they will have other problems....			if (filesize($phpbb_root_path . 'config.' . $phpEx) > 10)			{				$written = true;			}		}		$config_options = array_merge($this->db_config_options, $this->admin_config_options);		foreach ($config_options as $config_key => $vars)		{			if (!is_array($vars))			{				continue;			}			$s_hidden_fields .= '<input type="hidden" name="' . $config_key . '" value="' . $data[$config_key] . '" />';		}		if (!$written)		{			// OK, so it didn't work let's try the alternatives			if (isset($_POST['dlconfig']))			{				// They want a copy of the file to download, so send the relevant headers and dump out the data				header("Content-Type: text/x-delimtext; name=\"config.$phpEx\"");				header("Content-disposition: attachment; filename=config.$phpEx");				echo $config_data;				exit;			}			// The option to download the config file is always available, so output it here			$template->assign_vars(array(				'BODY'					=> $lang['CONFIG_FILE_UNABLE_WRITE'],				'L_DL_CONFIG'			=> $lang['DL_CONFIG'],				'L_DL_CONFIG_EXPLAIN'	=> $lang['DL_CONFIG_EXPLAIN'],				'L_DL_DONE'				=> $lang['DONE'],				'L_DL_DOWNLOAD'			=> $lang['DL_DOWNLOAD'],				'S_HIDDEN'				=> $s_hidden_fields,				'S_SHOW_DOWNLOAD'		=> true,				'U_ACTION'				=> $this->p_master->module_url . "?mode=$mode&amp;sub=config_file",			));			return;		}		else		{			$template->assign_vars(array(				'BODY'		=> $lang['CONFIG_FILE_WRITTEN'],				'L_SUBMIT'	=> $lang['NEXT_STEP'],				'S_HIDDEN'	=> $s_hidden_fields,				'U_ACTION'	=> $this->p_master->module_url . "?mode=$mode&amp;sub=advanced",			));			return;		}	}	/**	* Provide an opportunity to customise some advanced settings during the install	* in case it is necessary for them to be set to access later	*/	function obtain_advanced_settings($mode, $sub)	{		global $lang, $template, $phpEx;		$this->page_title = $lang['STAGE_ADVANCED'];		// Obtain any submitted data		$data = $this->get_submitted_data();		if ($data['dbms'] == '')		{			// Someone's been silly and tried calling this page direct			// So we send them back to the start to do it again properly			$this->p_master->redirect("index.$phpEx?mode=install");		}		$s_hidden_fields = ($data['img_imagick']) ? '<input type="hidden" name="img_imagick" value="' . addslashes($data['img_imagick']) . '" />' : '';		$s_hidden_fields .= '<input type="hidden" name="language" value="' . $data['language'] . '" />';		// HTTP_HOST is having the correct browser url in most cases...		$server_name = (!empty($_SERVER['HTTP_HOST'])) ? strtolower($_SERVER['HTTP_HOST']) : ((!empty($_SERVER['SERVER_NAME'])) ? $_SERVER['SERVER_NAME'] : getenv('SERVER_NAME'));		// HTTP HOST can carry a port number...		if (strpos($server_name, ':') !== false)		{			$server_name = substr($server_name, 0, strpos($server_name, ':'));		}		$data['email_enable'] = ($data['email_enable'] !== '') ? $data['email_enable'] : true;		$data['server_name'] = ($data['server_name'] !== '') ? $data['server_name'] : $server_name;		$data['server_port'] = ($data['server_port'] !== '') ? $data['server_port'] : ((!empty($_SERVER['SERVER_PORT'])) ? (int) $_SERVER['SERVER_PORT'] : (int) getenv('SERVER_PORT'));		$data['server_protocol'] = ($data['server_protocol'] !== '') ? $data['server_protocol'] : ((isset($_SERVER['HTTPS']) && $_SERVER['HTTPS'] == 'on') ? 'https://' : 'http://');		$data['cookie_secure'] = ($data['cookie_secure'] !== '') ? $data['cookie_secure'] : ((isset($_SERVER['HTTPS']) && $_SERVER['HTTPS'] == 'on') ? true : false);		if ($data['script_path'] === '')		{			$name = (!empty($_SERVER['PHP_SELF'])) ? $_SERVER['PHP_SELF'] : getenv('PHP_SELF');			if (!$name)			{				$name = (!empty($_SERVER['REQUEST_URI'])) ? $_SERVER['REQUEST_URI'] : getenv('REQUEST_URI');			}			// Replace backslashes and doubled slashes (could happen on some proxy setups)			$name = str_replace(array('\\', '//', '/install'), '/', $name);			$data['script_path'] = trim(dirname($name));		}		foreach ($this->advanced_config_options as $config_key => $vars)		{			if (!is_array($vars) && strpos($config_key, 'legend') === false)			{				continue;			}			if (strpos($config_key, 'legend') !== false)			{				$template->assign_block_vars('options', array(					'S_LEGEND'		=> true,					'LEGEND'		=> $lang[$vars])				);				continue;			}			$options = isset($vars['options']) ? $vars['options'] : '';			$template->assign_block_vars('options', array(				'KEY'			=> $config_key,				'TITLE'			=> $lang[$vars['lang']],				'S_EXPLAIN'		=> $vars['explain'],				'S_LEGEND'		=> false,				'TITLE_EXPLAIN'	=> ($vars['explain']) ? $lang[$vars['lang'] . '_EXPLAIN'] : '',				'CONTENT'		=> $this->p_master->input_field($config_key, $vars['type'], $data[$config_key], $options),				)			);		}		$config_options = array_merge($this->db_config_options, $this->admin_config_options);		foreach ($config_options as $config_key => $vars)		{			if (!is_array($vars))			{				continue;			}			$s_hidden_fields .= '<input type="hidden" name="' . $config_key . '" value="' . $data[$config_key] . '" />';		}		$submit = $lang['NEXT_STEP'];		$url = $this->p_master->module_url . "?mode=$mode&amp;sub=create_table";		$template->assign_vars(array(			'BODY'		=> $lang['STAGE_ADVANCED_EXPLAIN'],			'L_SUBMIT'	=> $submit,			'S_HIDDEN'	=> $s_hidden_fields,			'U_ACTION'	=> $url,		));	}	/**	* Load the contents of the schema into the database and then alter it based on what has been input during the installation	*/	function load_schema($mode, $sub)	{		global $db, $lang, $template, $phpbb_root_path, $phpEx;		$this->page_title = $lang['STAGE_CREATE_TABLE'];		$s_hidden_fields = '';		// Obtain any submitted data		$data = $this->get_submitted_data();		if ($data['dbms'] == '')		{			// Someone's been silly and tried calling this page direct			// So we send them back to the start to do it again properly			$this->p_master->redirect("index.$phpEx?mode=install");		}		// HTTP_HOST is having the correct browser url in most cases...		$server_name = (!empty($_SERVER['HTTP_HOST'])) ? strtolower($_SERVER['HTTP_HOST']) : ((!empty($_SERVER['SERVER_NAME'])) ? $_SERVER['SERVER_NAME'] : getenv('SERVER_NAME'));		$referer = (!empty($_SERVER['HTTP_REFERER'])) ? strtolower($_SERVER['HTTP_REFERER']) : getenv('HTTP_REFERER');		// HTTP HOST can carry a port number...		if (strpos($server_name, ':') !== false)		{			$server_name = substr($server_name, 0, strpos($server_name, ':'));		}		$cookie_domain = ($data['server_name'] != '') ? $data['server_name'] : $server_name;		// Try to come up with the best solution for cookie domain...		if (strpos($cookie_domain, 'www.') === 0)		{			$cookie_domain = str_replace('www.', '.', $cookie_domain);		}		// If we get here and the extension isn't loaded it should be safe to just go ahead and load it		$available_dbms = get_available_dbms($data['dbms']);		if (!isset($available_dbms[$data['dbms']]))		{			// Someone's been silly and tried providing a non-existant dbms			$this->p_master->redirect("index.$phpEx?mode=install");		}		$dbms = $available_dbms[$data['dbms']]['DRIVER'];		// Load the appropriate database class if not already loaded		include($phpbb_root_path . 'includes/db/' . $dbms . '.' . $phpEx);		// Instantiate the database		$db = new $sql_db();		$db->sql_connect($data['dbhost'], $data['dbuser'], htmlspecialchars_decode($data['dbpasswd']), $data['dbname'], $data['dbport'], false, false);		// NOTE: trigger_error does not work here.		$db->sql_return_on_error(true);		// If mysql is chosen, we need to adjust the schema filename slightly to reflect the correct version. ;)		if ($data['dbms'] == 'mysql')		{			if (version_compare($db->sql_server_info(true), '4.1.3', '>='))			{				$available_dbms[$data['dbms']]['SCHEMA'] .= '_41';			}			else			{				$available_dbms[$data['dbms']]['SCHEMA'] .= '_40';			}		}		// Ok we have the db info go ahead and read in the relevant schema		// and work on building the table		$dbms_schema = 'schemas/' . $available_dbms[$data['dbms']]['SCHEMA'] . '_schema.sql';		// How should we treat this schema?		$remove_remarks = $available_dbms[$data['dbms']]['COMMENTS'];		$delimiter = $available_dbms[$data['dbms']]['DELIM'];		$sql_query = @file_get_contents($dbms_schema);		$sql_query = preg_replace('#phpbb_#i', $data['table_prefix'], $sql_query);		$remove_remarks($sql_query);		$sql_query = split_sql_file($sql_query, $delimiter);		foreach ($sql_query as $sql)		{			//$sql = trim(str_replace('|', ';', $sql));			if (!$db->sql_query($sql))			{				$error = $db->sql_error();				$this->p_master->db_error($error['message'], $sql, __LINE__, __FILE__);			}		}		unset($sql_query);		// Ok tables have been built, let's fill in the basic information		$sql_query = file_get_contents('schemas/schema_data.sql');		// Deal with any special comments		switch ($data['dbms'])		{			case 'mssql':			case 'mssql_odbc':			case 'mssqlnative':				$sql_query = preg_replace('#\# MSSQL IDENTITY (phpbb_[a-z_]+) (ON|OFF) \##s', 'SET IDENTITY_INSERT \1 \2;', $sql_query);			break;			case 'postgres':				$sql_query = preg_replace('#\# POSTGRES (BEGIN|COMMIT) \##s', '\1; ', $sql_query);			break;		}		// Change prefix		$sql_query = preg_replace('# phpbb_([^\s]*) #i', ' ' . $data['table_prefix'] . '\1 ', $sql_query);		// Change language strings...		$sql_query = preg_replace_callback('#\{L_([A-Z0-9\-_]*)\}#s', 'adjust_language_keys_callback', $sql_query);		// Since there is only one schema file we know the comment style and are able to remove it directly with remove_remarks		remove_remarks($sql_query);		$sql_query = split_sql_file($sql_query, ';');		foreach ($sql_query as $sql)		{			//$sql = trim(str_replace('|', ';', $sql));			if (!$db->sql_query($sql))			{				$error = $db->sql_error();				$this->p_master->db_error($error['message'], $sql, __LINE__, __FILE__);			}		}		unset($sql_query);		$current_time = time();		$user_ip = (!empty($_SERVER['REMOTE_ADDR'])) ? htmlspecialchars($_SERVER['REMOTE_ADDR']) : '';		$user_ip = (stripos($user_ip, '::ffff:') === 0) ? substr($user_ip, 7) : $user_ip;		if ($data['script_path'] !== '/')		{			// Adjust destination path (no trailing slash)			if (substr($data['script_path'], -1) == '/')			{				$data['script_path'] = substr($data['script_path'], 0, -1);			}			$data['script_path'] = str_replace(array('../', './'), '', $data['script_path']);			if ($data['script_path'][0] != '/')			{				$data['script_path'] = '/' . $data['script_path'];			}		}		// Set default config and post data, this applies to all DB's		$sql_ary = array(			'INSERT INTO ' . $data['table_prefix'] . "config (config_name, config_value)				VALUES ('board_startdate', '$current_time')",			'INSERT INTO ' . $data['table_prefix'] . "config (config_name, config_value)				VALUES ('default_lang', '" . $db->sql_escape($data['default_lang']) . "')",			'UPDATE ' . $data['table_prefix'] . "config				SET config_value = '" . $db->sql_escape($data['img_imagick']) . "'				WHERE config_name = 'img_imagick'",			'UPDATE ' . $data['table_prefix'] . "config				SET config_value = '" . $db->sql_escape($data['server_name']) . "'				WHERE config_name = 'server_name'",			'UPDATE ' . $data['table_prefix'] . "config				SET config_value = '" . $db->sql_escape($data['server_port']) . "'				WHERE config_name = 'server_port'",			'UPDATE ' . $data['table_prefix'] . "config				SET config_value = '" . $db->sql_escape($data['board_email1']) . "'				WHERE config_name = 'board_email'",			'UPDATE ' . $data['table_prefix'] . "config				SET config_value = '" . $db->sql_escape($data['board_email1']) . "'				WHERE config_name = 'board_contact'",			'UPDATE ' . $data['table_prefix'] . "config				SET config_value = '" . $db->sql_escape($cookie_domain) . "'				WHERE config_name = 'cookie_domain'",			'UPDATE ' . $data['table_prefix'] . "config				SET config_value = '" . $db->sql_escape($lang['default_dateformat']) . "'				WHERE config_name = 'default_dateformat'",			'UPDATE ' . $data['table_prefix'] . "config				SET config_value = '" . $db->sql_escape($data['email_enable']) . "'				WHERE config_name = 'email_enable'",			'UPDATE ' . $data['table_prefix'] . "config				SET config_value = '" . $db->sql_escape($data['smtp_delivery']) . "'				WHERE config_name = 'smtp_delivery'",			'UPDATE ' . $data['table_prefix'] . "config				SET config_value = '" . $db->sql_escape($data['smtp_host']) . "'				WHERE config_name = 'smtp_host'",			'UPDATE ' . $data['table_prefix'] . "config				SET config_value = '" . $db->sql_escape($data['smtp_auth']) . "'				WHERE config_name = 'smtp_auth_method'",			'UPDATE ' . $data['table_prefix'] . "config				SET config_value = '" . $db->sql_escape($data['smtp_user']) . "'				WHERE config_name = 'smtp_username'",			'UPDATE ' . $data['table_prefix'] . "config				SET config_value = '" . $db->sql_escape($data['smtp_pass']) . "'				WHERE config_name = 'smtp_password'",			'UPDATE ' . $data['table_prefix'] . "config				SET config_value = '" . $db->sql_escape($data['cookie_secure']) . "'				WHERE config_name = 'cookie_secure'",			'UPDATE ' . $data['table_prefix'] . "config				SET config_value = '" . $db->sql_escape($data['force_server_vars']) . "'				WHERE config_name = 'force_server_vars'",			'UPDATE ' . $data['table_prefix'] . "config				SET config_value = '" . $db->sql_escape($data['script_path']) . "'				WHERE config_name = 'script_path'",			'UPDATE ' . $data['table_prefix'] . "config				SET config_value = '" . $db->sql_escape($data['server_protocol']) . "'				WHERE config_name = 'server_protocol'",			'UPDATE ' . $data['table_prefix'] . "config				SET config_value = '" . $db->sql_escape($data['admin_name']) . "'				WHERE config_name = 'newest_username'",			'UPDATE ' . $data['table_prefix'] . "config				SET config_value = '" . md5(mt_rand()) . "'				WHERE config_name = 'avatar_salt'",			'UPDATE ' . $data['table_prefix'] . "users				SET username = '" . $db->sql_escape($data['admin_name']) . "', user_password='" . $db->sql_escape(md5($data['admin_pass1'])) . "', user_ip = '" . $db->sql_escape($user_ip) . "', user_lang = '" . $db->sql_escape($data['default_lang']) . "', user_email='" . $db->sql_escape($data['board_email1']) . "', user_dateformat='" . $db->sql_escape($lang['default_dateformat']) . "', user_email_hash = " . $db->sql_escape(phpbb_email_hash($data['board_email1'])) . ", username_clean = '" . $db->sql_escape(utf8_clean_string($data['admin_name'])) . "'				WHERE username = 'Admin'",			'UPDATE ' . $data['table_prefix'] . "moderator_cache				SET username = '" . $db->sql_escape($data['admin_name']) . "'				WHERE username = 'Admin'",			'UPDATE ' . $data['table_prefix'] . "forums				SET forum_last_poster_name = '" . $db->sql_escape($data['admin_name']) . "'				WHERE forum_last_poster_name = 'Admin'",			'UPDATE ' . $data['table_prefix'] . "topics				SET topic_first_poster_name = '" . $db->sql_escape($data['admin_name']) . "', topic_last_poster_name = '" . $db->sql_escape($data['admin_name']) . "'				WHERE topic_first_poster_name = 'Admin'					OR topic_last_poster_name = 'Admin'",			'UPDATE ' . $data['table_prefix'] . "users				SET user_regdate = $current_time",			'UPDATE ' . $data['table_prefix'] . "posts				SET post_time = $current_time, poster_ip = '" . $db->sql_escape($user_ip) . "'",			'UPDATE ' . $data['table_prefix'] . "topics				SET topic_time = $current_time, topic_last_post_time = $current_time",			'UPDATE ' . $data['table_prefix'] . "forums				SET forum_last_post_time = $current_time",			'UPDATE ' . $data['table_prefix'] . "config				SET config_value = '" . $db->sql_escape($db->sql_server_info(true)) . "'				WHERE config_name = 'dbms_version'",		);		if (@extension_loaded('gd') || can_load_dll('gd'))		{			$sql_ary[] = 'UPDATE ' . $data['table_prefix'] . "config				SET config_value = 'phpbb_captcha_gd'				WHERE config_name = 'captcha_plugin'";			$sql_ary[] = 'UPDATE ' . $data['table_prefix'] . "config				SET config_value = '1'				WHERE config_name = 'captcha_gd'";		}		$ref = substr($referer, strpos($referer, '://') + 3);		if (!(stripos($ref, $server_name) === 0))		{			$sql_ary[] = 'UPDATE ' . $data['table_prefix'] . "config				SET config_value = '0'				WHERE config_name = 'referer_validation'";		}		// We set a (semi-)unique cookie name to bypass login issues related to the cookie name.		$cookie_name = 'phpbb3_';		$rand_str = md5(mt_rand());		$rand_str = str_replace('0', 'z', base_convert($rand_str, 16, 35));		$rand_str = substr($rand_str, 0, 5);		$cookie_name .= strtolower($rand_str);		$sql_ary[] = 'UPDATE ' . $data['table_prefix'] . "config			SET config_value = '" . $db->sql_escape($cookie_name) . "'			WHERE config_name = 'cookie_name'";		foreach ($sql_ary as $sql)		{			//$sql = trim(str_replace('|', ';', $sql));			if (!$db->sql_query($sql))			{				$error = $db->sql_error();				$this->p_master->db_error($error['message'], $sql, __LINE__, __FILE__);			}		}		$submit = $lang['NEXT_STEP'];		$url = $this->p_master->module_url . "?mode=$mode&amp;sub=final";		$template->assign_vars(array(			'BODY'		=> $lang['STAGE_CREATE_TABLE_EXPLAIN'],			'L_SUBMIT'	=> $submit,			'S_HIDDEN'	=> build_hidden_fields($data),			'U_ACTION'	=> $url,		));	}	/**	* Build the search index...	*/	function build_search_index($mode, $sub)	{		global $db, $lang, $phpbb_root_path, $phpEx, $config;		// Obtain any submitted data		$data = $this->get_submitted_data();		$table_prefix = $data['table_prefix'];		// If we get here and the extension isn't loaded it should be safe to just go ahead and load it		$available_dbms = get_available_dbms($data['dbms']);		if (!isset($available_dbms[$data['dbms']]))		{			// Someone's been silly and tried providing a non-existant dbms			$this->p_master->redirect("index.$phpEx?mode=install");		}		$dbms = $available_dbms[$data['dbms']]['DRIVER'];		// Load the appropriate database class if not already loaded		include($phpbb_root_path . 'includes/db/' . $dbms . '.' . $phpEx);		// Instantiate the database		$db = new $sql_db();		$db->sql_connect($data['dbhost'], $data['dbuser'], htmlspecialchars_decode($data['dbpasswd']), $data['dbname'], $data['dbport'], false, false);		// NOTE: trigger_error does not work here.		$db->sql_return_on_error(true);		include_once($phpbb_root_path . 'includes/constants.' . $phpEx);		include_once($phpbb_root_path . 'includes/search/fulltext_native.' . $phpEx);		// Fill the config array - it is needed by those functions we call		$sql = 'SELECT *			FROM ' . CONFIG_TABLE;		$result = $db->sql_query($sql);		$config = array();		while ($row = $db->sql_fetchrow($result))		{			$config[$row['config_name']] = $row['config_value'];		}		$db->sql_freeresult($result);		$error = false;		$search = new fulltext_native($error);		$sql = 'SELECT post_id, post_subject, post_text, poster_id, forum_id			FROM ' . POSTS_TABLE;		$result = $db->sql_query($sql);		while ($row = $db->sql_fetchrow($result))		{			$search->index('post', $row['post_id'], $row['post_text'], $row['post_subject'], $row['poster_id'], $row['forum_id']);		}		$db->sql_freeresult($result);	}	/**	* Populate the module tables	*/	function add_modules($mode, $sub)	{		global $db, $lang, $phpbb_root_path, $phpEx;		include_once($phpbb_root_path . 'includes/acp/acp_modules.' . $phpEx);		$_module = new acp_modules();		$module_classes = array('acp', 'mcp', 'ucp');		// Add categories		foreach ($module_classes as $module_class)		{			$categories = array();			// Set the module class			$_module->module_class = $module_class;			foreach ($this->module_categories[$module_class] as $cat_name => $subs)			{				$module_data = array(					'module_basename'	=> '',					'module_enabled'	=> 1,					'module_display'	=> 1,					'parent_id'			=> 0,					'module_class'		=> $module_class,					'module_langname'	=> $cat_name,					'module_mode'		=> '',					'module_auth'		=> '',				);				// Add category				$_module->update_module_data($module_data, true);				// Check for last sql error happened				if ($db->sql_error_triggered)				{					$error = $db->sql_error($db->sql_error_sql);					$this->p_master->db_error($error['message'], $db->sql_error_sql, __LINE__, __FILE__);				}				$categories[$cat_name]['id'] = (int) $module_data['module_id'];				$categories[$cat_name]['parent_id'] = 0;				// Create sub-categories...				if (is_array($subs))				{					foreach ($subs as $level2_name)					{						$module_data = array(							'module_basename'	=> '',							'module_enabled'	=> 1,							'module_display'	=> 1,							'parent_id'			=> (int) $categories[$cat_name]['id'],							'module_class'		=> $module_class,							'module_langname'	=> $level2_name,							'module_mode'		=> '',							'module_auth'		=> '',						);						$_module->update_module_data($module_data, true);						// Check for last sql error happened						if ($db->sql_error_triggered)						{							$error = $db->sql_error($db->sql_error_sql);							$this->p_master->db_error($error['message'], $db->sql_error_sql, __LINE__, __FILE__);						}						$categories[$level2_name]['id'] = (int) $module_data['module_id'];						$categories[$level2_name]['parent_id'] = (int) $categories[$cat_name]['id'];					}				}			}			// Get the modules we want to add... returned sorted by name			$module_info = $_module->get_module_infos('', $module_class);			foreach ($module_info as $module_basename => $fileinfo)			{				foreach ($fileinfo['modes'] as $module_mode => $row)				{					foreach ($row['cat'] as $cat_name)					{						if (!isset($categories[$cat_name]))						{							continue;						}						$module_data = array(							'module_basename'	=> $module_basename,							'module_enabled'	=> 1,							'module_display'	=> (isset($row['display'])) ? (int) $row['display'] : 1,							'parent_id'			=> (int) $categories[$cat_name]['id'],							'module_class'		=> $module_class,							'module_langname'	=> $row['title'],							'module_mode'		=> $module_mode,							'module_auth'		=> $row['auth'],						);						$_module->update_module_data($module_data, true);						// Check for last sql error happened						if ($db->sql_error_triggered)						{							$error = $db->sql_error($db->sql_error_sql);							$this->p_master->db_error($error['message'], $db->sql_error_sql, __LINE__, __FILE__);						}					}				}			}			// Move some of the modules around since the code above will put them in the wrong place			if ($module_class == 'acp')			{				// Move main module 4 up...				$sql = 'SELECT *					FROM ' . MODULES_TABLE . "					WHERE module_basename = 'main'						AND module_class = 'acp'						AND module_mode = 'main'";				$result = $db->sql_query($sql);				$row = $db->sql_fetchrow($result);				$db->sql_freeresult($result);				$_module->move_module_by($row, 'move_up', 4);				// Move permissions intro screen module 4 up...				$sql = 'SELECT *					FROM ' . MODULES_TABLE . "					WHERE module_basename = 'permissions'						AND module_class = 'acp'						AND module_mode = 'intro'";				$result = $db->sql_query($sql);				$row = $db->sql_fetchrow($result);				$db->sql_freeresult($result);				$_module->move_module_by($row, 'move_up', 4);				// Move manage users screen module 5 up...				$sql = 'SELECT *					FROM ' . MODULES_TABLE . "					WHERE module_basename = 'users'						AND module_class = 'acp'						AND module_mode = 'overview'";				$result = $db->sql_query($sql);				$row = $db->sql_fetchrow($result);				$db->sql_freeresult($result);				$_module->move_module_by($row, 'move_up', 5);			}			if ($module_class == 'ucp')			{				// Move attachment module 4 down...				$sql = 'SELECT *					FROM ' . MODULES_TABLE . "					WHERE module_basename = 'attachments'						AND module_class = 'ucp'						AND module_mode = 'attachments'";				$result = $db->sql_query($sql);				$row = $db->sql_fetchrow($result);				$db->sql_freeresult($result);				$_module->move_module_by($row, 'move_down', 4);			}			// And now for the special ones			// (these are modules which appear in multiple categories and thus get added manually to some for more control)			if (isset($this->module_extras[$module_class]))			{				foreach ($this->module_extras[$module_class] as $cat_name => $mods)				{					$sql = 'SELECT module_id, left_id, right_id						FROM ' . MODULES_TABLE . "						WHERE module_langname = '" . $db->sql_escape($cat_name) . "'							AND module_class = '" . $db->sql_escape($module_class) . "'";					$result = $db->sql_query_limit($sql, 1);					$row2 = $db->sql_fetchrow($result);					$db->sql_freeresult($result);					foreach ($mods as $mod_name)					{						$sql = 'SELECT *							FROM ' . MODULES_TABLE . "							WHERE module_langname = '" . $db->sql_escape($mod_name) . "'								AND module_class = '" . $db->sql_escape($module_class) . "'								AND module_basename <> ''";						$result = $db->sql_query_limit($sql, 1);						$row = $db->sql_fetchrow($result);						$db->sql_freeresult($result);						$module_data = array(							'module_basename'	=> $row['module_basename'],							'module_enabled'	=> (int) $row['module_enabled'],							'module_display'	=> (int) $row['module_display'],							'parent_id'			=> (int) $row2['module_id'],							'module_class'		=> $row['module_class'],							'module_langname'	=> $row['module_langname'],							'module_mode'		=> $row['module_mode'],							'module_auth'		=> $row['module_auth'],						);						$_module->update_module_data($module_data, true);						// Check for last sql error happened						if ($db->sql_error_triggered)						{							$error = $db->sql_error($db->sql_error_sql);							$this->p_master->db_error($error['message'], $db->sql_error_sql, __LINE__, __FILE__);						}					}				}			}			$_module->remove_cache_file();		}	}	/**	* Populate the language tables	*/	function add_language($mode, $sub)	{		global $db, $lang, $phpbb_root_path, $phpEx;		$dir = @opendir($phpbb_root_path . 'language');		if (!$dir)		{			$this->error('Unable to access the language directory', __LINE__, __FILE__);		}		while (($file = readdir($dir)) !== false)		{			$path = $phpbb_root_path . 'language/' . $file;			if ($file == '.' || $file == '..' || is_link($path) || is_file($path) || $file == 'CVS')			{				continue;			}			if (is_dir($path) && file_exists($path . '/iso.txt'))			{				$lang_file = file("$path/iso.txt");				$lang_pack = array(					'lang_iso'			=> basename($path),					'lang_dir'			=> basename($path),					'lang_english_name'	=> trim(htmlspecialchars($lang_file[0])),					'lang_local_name'	=> trim(htmlspecialchars($lang_file[1], ENT_COMPAT, 'UTF-8')),					'lang_author'		=> trim(htmlspecialchars($lang_file[2], ENT_COMPAT, 'UTF-8')),				);				$db->sql_query('INSERT INTO ' . LANG_TABLE . ' ' . $db->sql_build_array('INSERT', $lang_pack));				if ($db->sql_error_triggered)				{					$error = $db->sql_error($db->sql_error_sql);					$this->p_master->db_error($error['message'], $db->sql_error_sql, __LINE__, __FILE__);				}				$valid_localized = array(					'icon_back_top', 'icon_contact_aim', 'icon_contact_email', 'icon_contact_icq', 'icon_contact_jabber', 'icon_contact_msnm', 'icon_contact_pm', 'icon_contact_yahoo', 'icon_contact_www', 'icon_post_delete', 'icon_post_edit', 'icon_post_info', 'icon_post_quote', 'icon_post_report', 'icon_user_online', 'icon_user_offline', 'icon_user_profile', 'icon_user_search', 'icon_user_warn', 'button_pm_forward', 'button_pm_new', 'button_pm_reply', 'button_topic_locked', 'button_topic_new', 'button_topic_reply',				);				$sql_ary = array();				$sql = 'SELECT *					FROM ' . STYLES_IMAGESET_TABLE;				$result = $db->sql_query($sql);				while ($imageset_row = $db->sql_fetchrow($result))				{					if (@file_exists("{$phpbb_root_path}styles/{$imageset_row['imageset_path']}/imageset/{$lang_pack['lang_iso']}/imageset.cfg"))					{						$cfg_data_imageset_data = parse_cfg_file("{$phpbb_root_path}styles/{$imageset_row['imageset_path']}/imageset/{$lang_pack['lang_iso']}/imageset.cfg");						foreach ($cfg_data_imageset_data as $image_name => $value)						{							if (strpos($value, '*') !== false)							{								if (substr($value, -1, 1) === '*')								{									list($image_filename, $image_height) = explode('*', $value);									$image_width = 0;								}								else								{									list($image_filename, $image_height, $image_width) = explode('*', $value);								}							}							else							{								$image_filename = $value;								$image_height = $image_width = 0;							}							if (strpos($image_name, 'img_') === 0 && $image_filename)							{								$image_name = substr($image_name, 4);								if (in_array($image_name, $valid_localized))								{									$sql_ary[] = array(										'image_name'		=> (string) $image_name,										'image_filename'	=> (string) $image_filename,										'image_height'		=> (int) $image_height,										'image_width'		=> (int) $image_width,										'imageset_id'		=> (int) $imageset_row['imageset_id'],										'image_lang'		=> (string) $lang_pack['lang_iso'],									);								}							}						}					}				}				$db->sql_freeresult($result);				if (sizeof($sql_ary))				{					$db->sql_multi_insert(STYLES_IMAGESET_DATA_TABLE, $sql_ary);					if ($db->sql_error_triggered)					{						$error = $db->sql_error($db->sql_error_sql);						$this->p_master->db_error($error['message'], $db->sql_error_sql, __LINE__, __FILE__);					}				}			}		}		closedir($dir);	}	/**	* Add search robots to the database	*/	function add_bots($mode, $sub)	{		global $db, $lang, $phpbb_root_path, $phpEx, $config;		// Obtain any submitted data		$data = $this->get_submitted_data();		// Fill the config array - it is needed by those functions we call		$sql = 'SELECT *			FROM ' . CONFIG_TABLE;		$result = $db->sql_query($sql);		$config = array();		while ($row = $db->sql_fetchrow($result))		{			$config[$row['config_name']] = $row['config_value'];		}		$db->sql_freeresult($result);		$sql = 'SELECT group_id			FROM ' . GROUPS_TABLE . "			WHERE group_name = 'BOTS'";		$result = $db->sql_query($sql);		$group_id = (int) $db->sql_fetchfield('group_id');		$db->sql_freeresult($result);		if (!$group_id)		{			// If we reach this point then something has gone very wrong			$this->p_master->error($lang['NO_GROUP'], __LINE__, __FILE__);		}		if (!function_exists('user_add'))		{			include($phpbb_root_path . 'includes/functions_user.' . $phpEx);		}		foreach ($this->bot_list as $bot_name => $bot_ary)		{			$user_row = array(				'user_type'				=> USER_IGNORE,				'group_id'				=> $group_id,				'username'				=> $bot_name,				'user_regdate'			=> time(),				'user_password'			=> '',				'user_colour'			=> '9E8DA7',				'user_email'			=> '',				'user_lang'				=> $data['default_lang'],				'user_style'			=> 1,				'user_timezone'			=> 0,				'user_dateformat'		=> $lang['default_dateformat'],				'user_allow_massemail'	=> 0,			);			$user_id = user_add($user_row);			if (!$user_id)			{				// If we can't insert this user then continue to the next one to avoid inconsistent data				$this->p_master->db_error('Unable to insert bot into users table', $db->sql_error_sql, __LINE__, __FILE__, true);				continue;			}			$sql = 'INSERT INTO ' . BOTS_TABLE . ' ' . $db->sql_build_array('INSERT', array(				'bot_active'	=> 1,				'bot_name'		=> (string) $bot_name,				'user_id'		=> (int) $user_id,				'bot_agent'		=> (string) $bot_ary[0],				'bot_ip'		=> (string) $bot_ary[1],			));			$result = $db->sql_query($sql);		}	}	/**	* Sends an email to the board administrator with their password and some useful links	*/	function email_admin($mode, $sub)	{		global $auth, $config, $db, $lang, $template, $user, $phpbb_root_path, $phpEx;		$this->page_title = $lang['STAGE_FINAL'];		// Obtain any submitted data		$data = $this->get_submitted_data();		$sql = 'SELECT *			FROM ' . CONFIG_TABLE;		$result = $db->sql_query($sql);		$config = array();		while ($row = $db->sql_fetchrow($result))		{			$config[$row['config_name']] = $row['config_value'];		}		$db->sql_freeresult($result);		$user->session_begin();		$auth->login($data['admin_name'], $data['admin_pass1'], false, true, true);		// OK, Now that we've reached this point we can be confident that everything		// is installed and working......I hope :)		// So it's time to send an email to the administrator confirming the details		// they entered		if ($config['email_enable'])		{			include_once($phpbb_root_path . 'includes/functions_messenger.' . $phpEx);			$messenger = new messenger(false);			$messenger->template('installed', $data['language']);			$messenger->to($data['board_email1'], $data['admin_name']);			$messenger->anti_abuse_headers($config, $user);			$messenger->assign_vars(array(				'USERNAME'		=> htmlspecialchars_decode($data['admin_name']),				'PASSWORD'		=> htmlspecialchars_decode($data['admin_pass1']))			);			$messenger->send(NOTIFY_EMAIL);		}		// And finally, add a note to the log		add_log('admin', 'LOG_INSTALL_INSTALLED', $config['version']);		$template->assign_vars(array(			'TITLE'		=> $lang['INSTALL_CONGRATS'],			'BODY'		=> sprintf($lang['INSTALL_CONGRATS_EXPLAIN'], $config['version'], append_sid($phpbb_root_path . 'install/index.' . $phpEx, 'mode=convert&amp;language=' . $data['language']), '../docs/README.html'),			'L_SUBMIT'	=> $lang['INSTALL_LOGIN'],			'U_ACTION'	=> append_sid($phpbb_root_path . 'adm/index.' . $phpEx, 'i=send_statistics&amp;mode=send_statistics'),		));	}	/**	* Generate a list of available mail server authentication methods	*/	function mail_auth_select($selected_method)	{		global $lang;		$auth_methods = array('PLAIN', 'LOGIN', 'CRAM-MD5', 'DIGEST-MD5', 'POP-BEFORE-SMTP');		$s_smtp_auth_options = '';		foreach ($auth_methods as $method)		{			$s_smtp_auth_options .= '<option value="' . $method . '"' . (($selected_method == $method) ? ' selected="selected"' : '') . '>' . $lang['SMTP_' . str_replace('-', '_', $method)] . '</option>';		}		return $s_smtp_auth_options;	}	/**	* Get submitted data	*/	function get_submitted_data()	{		return array(			'language'		=> basename(request_var('language', '')),			'dbms'			=> request_var('dbms', ''),			'dbhost'		=> request_var('dbhost', ''),			'dbport'		=> request_var('dbport', ''),			'dbuser'		=> request_var('dbuser', ''),			'dbpasswd'		=> request_var('dbpasswd', '', true),			'dbname'		=> request_var('dbname', ''),			'table_prefix'	=> request_var('table_prefix', ''),			'default_lang'	=> basename(request_var('default_lang', '')),			'admin_name'	=> utf8_normalize_nfc(request_var('admin_name', '', true)),			'admin_pass1'	=> request_var('admin_pass1', '', true),			'admin_pass2'	=> request_var('admin_pass2', '', true),			'board_email1'	=> strtolower(request_var('board_email1', '')),			'board_email2'	=> strtolower(request_var('board_email2', '')),			'img_imagick'	=> request_var('img_imagick', ''),			'ftp_path'		=> request_var('ftp_path', ''),			'ftp_user'		=> request_var('ftp_user', ''),			'ftp_pass'		=> request_var('ftp_pass', ''),			'email_enable'	=> request_var('email_enable', ''),			'smtp_delivery'	=> request_var('smtp_delivery', ''),			'smtp_host'		=> request_var('smtp_host', ''),			'smtp_auth'		=> request_var('smtp_auth', ''),			'smtp_user'		=> request_var('smtp_user', ''),			'smtp_pass'		=> request_var('smtp_pass', ''),			'cookie_secure'	=> request_var('cookie_secure', ''),			'force_server_vars'	=> request_var('force_server_vars', ''),			'server_protocol'	=> request_var('server_protocol', ''),			'server_name'	=> request_var('server_name', ''),			'server_port'	=> request_var('server_port', ''),			'script_path'	=> request_var('script_path', ''),		);	}	/**	* The information below will be used to build the input fields presented to the user	*/	var $db_config_options = array(		'legend1'				=> 'DB_CONFIG',		'dbms'					=> array('lang' => 'DBMS',			'type' => 'select', 'options' => 'dbms_select(\'{VALUE}\')', 'explain' => false),		'dbhost'				=> array('lang' => 'DB_HOST',		'type' => 'text:25:100', 'explain' => true),		'dbport'				=> array('lang' => 'DB_PORT',		'type' => 'text:25:100', 'explain' => true),		'dbname'				=> array('lang' => 'DB_NAME',		'type' => 'text:25:100', 'explain' => false),		'dbuser'				=> array('lang' => 'DB_USERNAME',	'type' => 'text:25:100', 'explain' => false),		'dbpasswd'				=> array('lang' => 'DB_PASSWORD',	'type' => 'password:25:100', 'explain' => false),		'table_prefix'			=> array('lang' => 'TABLE_PREFIX',	'type' => 'text:25:100', 'explain' => true),	);	var $admin_config_options = array(		'legend1'				=> 'ADMIN_CONFIG',		'default_lang'			=> array('lang' => 'DEFAULT_LANG',				'type' => 'select', 'options' => '$this->module->inst_language_select(\'{VALUE}\')', 'explain' => false),		'admin_name'			=> array('lang' => 'ADMIN_USERNAME',			'type' => 'text:25:100', 'explain' => true),		'admin_pass1'			=> array('lang' => 'ADMIN_PASSWORD',			'type' => 'password:25:100', 'explain' => true),		'admin_pass2'			=> array('lang' => 'ADMIN_PASSWORD_CONFIRM',	'type' => 'password:25:100', 'explain' => false),		'board_email1'			=> array('lang' => 'CONTACT_EMAIL',				'type' => 'text:25:100', 'explain' => false),		'board_email2'			=> array('lang' => 'CONTACT_EMAIL_CONFIRM',		'type' => 'text:25:100', 'explain' => false),	);	var $advanced_config_options = array(		'legend1'				=> 'ACP_EMAIL_SETTINGS',		'email_enable'			=> array('lang' => 'ENABLE_EMAIL',		'type' => 'radio:enabled_disabled', 'explain' => true),		'smtp_delivery'			=> array('lang' => 'USE_SMTP',			'type' => 'radio:yes_no', 'explain' => true),		'smtp_host'				=> array('lang' => 'SMTP_SERVER',		'type' => 'text:25:50', 'explain' => false),		'smtp_auth'				=> array('lang' => 'SMTP_AUTH_METHOD',	'type' => 'select', 'options' => '$this->module->mail_auth_select(\'{VALUE}\')', 'explain' => true),		'smtp_user'				=> array('lang' => 'SMTP_USERNAME',		'type' => 'text:25:255', 'explain' => true),		'smtp_pass'				=> array('lang' => 'SMTP_PASSWORD',		'type' => 'password:25:255', 'explain' => true),		'legend2'				=> 'SERVER_URL_SETTINGS',		'cookie_secure'			=> array('lang' => 'COOKIE_SECURE',		'type' => 'radio:enabled_disabled', 'explain' => true),		'force_server_vars'		=> array('lang' => 'FORCE_SERVER_VARS',	'type' => 'radio:yes_no', 'explain' => true),		'server_protocol'		=> array('lang' => 'SERVER_PROTOCOL',	'type' => 'text:10:10', 'explain' => true),		'server_name'			=> array('lang' => 'SERVER_NAME',		'type' => 'text:40:255', 'explain' => true),		'server_port'			=> array('lang' => 'SERVER_PORT',		'type' => 'text:5:5', 'explain' => true),		'script_path'			=> array('lang' => 'SCRIPT_PATH',		'type' => 'text::255', 'explain' => true),	);	/**	* Specific PHP modules we may require for certain optional or extended features	*/	var $php_dlls_other = array('zlib', 'ftp', 'gd', 'xml');	/**	* A list of the web-crawlers/bots we recognise by default	*	* Candidates but not included:	* 'Accoona [Bot]'				'Accoona-AI-Agent/'	* 'ASPseek [Crawler]'			'ASPseek/'	* 'Boitho [Crawler]'			'boitho.com-dc/'	* 'Bunnybot [Bot]'				'powered by www.buncat.de'	* 'Cosmix [Bot]'				'cfetch/'	* 'Crawler Search [Crawler]'	'.Crawler-Search.de'	* 'Findexa [Crawler]'			'Findexa Crawler ('	* 'GBSpider [Spider]'			'GBSpider v'	* 'genie [Bot]'					'genieBot ('	* 'Hogsearch [Bot]'				'oegp v. 1.3.0'	* 'Insuranco [Bot]'				'InsurancoBot'	* 'IRLbot [Bot]'				'http://irl.cs.tamu.edu/crawler'	* 'ISC Systems [Bot]'			'ISC Systems iRc Search'	* 'Jyxobot [Bot]'				'Jyxobot/'	* 'Kraehe [Metasuche]'			'-DIE-KRAEHE- META-SEARCH-ENGINE/'	* 'LinkWalker'					'LinkWalker'	* 'MMSBot [Bot]'				'http://www.mmsweb.at/bot.html'	* 'Naver [Bot]'					'nhnbot@naver.com)'	* 'NetResearchServer'			'NetResearchServer/'	* 'Nimble [Crawler]'			'NimbleCrawler'	* 'Ocelli [Bot]'				'Ocelli/'	* 'Onsearch [Bot]'				'onCHECK-Robot'	* 'Orange [Spider]'				'OrangeSpider'	* 'Sproose [Bot]'				'http://www.sproose.com/bot'	* 'Susie [Sync]'				'!Susie (http://www.sync2it.com/susie)'	* 'Tbot [Bot]'					'Tbot/'	* 'Thumbshots [Capture]'		'thumbshots-de-Bot'	* 'Vagabondo [Crawler]'			'http://webagent.wise-guys.nl/'	* 'Walhello [Bot]'				'appie 1.1 (www.walhello.com)'	* 'WissenOnline [Bot]'			'WissenOnline-Bot'	* 'WWWeasel [Bot]'				'WWWeasel Robot v'	* 'Xaldon [Spider]'				'Xaldon WebSpider'	*/	var $bot_list = array(		'AdsBot [Google]'			=> array('AdsBot-Google', ''),		'Alexa [Bot]'				=> array('ia_archiver', ''),		'Alta Vista [Bot]'			=> array('Scooter/', ''),		'Ask Jeeves [Bot]'			=> array('Ask Jeeves', ''),		'Baidu [Spider]'			=> array('Baiduspider+(', ''),		'Bing [Bot]'                => array('bingbot/', ''),		'Exabot [Bot]'				=> array('Exabot/', ''),		'FAST Enterprise [Crawler]'	=> array('FAST Enterprise Crawler', ''),		'FAST WebCrawler [Crawler]'	=> array('FAST-WebCrawler/', ''),		'Francis [Bot]'				=> array('http://www.neomo.de/', ''),		'Gigabot [Bot]'				=> array('Gigabot/', ''),		'Google Adsense [Bot]'		=> array('Mediapartners-Google', ''),		'Google Desktop'			=> array('Google Desktop', ''),		'Google Feedfetcher'		=> array('Feedfetcher-Google', ''),		'Google [Bot]'				=> array('Googlebot', ''),		'Heise IT-Markt [Crawler]'	=> array('heise-IT-Markt-Crawler', ''),		'Heritrix [Crawler]'		=> array('heritrix/1.', ''),		'IBM Research [Bot]'		=> array('ibm.com/cs/crawler', ''),		'ICCrawler - ICjobs'		=> array('ICCrawler - ICjobs', ''),		'ichiro [Crawler]'			=> array('ichiro/', ''),		'Majestic-12 [Bot]'			=> array('MJ12bot/', ''),		'Metager [Bot]'				=> array('MetagerBot/', ''),		'MSN NewsBlogs'				=> array('msnbot-NewsBlogs/', ''),		'MSN [Bot]'					=> array('msnbot/', ''),		'MSNbot Media'				=> array('msnbot-media/', ''),		'NG-Search [Bot]'			=> array('NG-Search/', ''),		'Nutch [Bot]'				=> array('http://lucene.apache.org/nutch/', ''),		'Nutch/CVS [Bot]'			=> array('NutchCVS/', ''),		'OmniExplorer [Bot]'		=> array('OmniExplorer_Bot/', ''),		'Online link [Validator]'	=> array('online link validator', ''),		'psbot [Picsearch]'			=> array('psbot/0', ''),		'Seekport [Bot]'			=> array('Seekbot/', ''),		'Sensis [Crawler]'			=> array('Sensis Web Crawler', ''),		'SEO Crawler'				=> array('SEO search Crawler/', ''),		'Seoma [Crawler]'			=> array('Seoma [SEO Crawler]', ''),		'SEOSearch [Crawler]'		=> array('SEOsearch/', ''),		'Snappy [Bot]'				=> array('Snappy/1.1 ( http://www.urltrends.com/ )', ''),		'Steeler [Crawler]'			=> array('http://www.tkl.iis.u-tokyo.ac.jp/~crawler/', ''),		'Synoo [Bot]'				=> array('SynooBot/', ''),		'Telekom [Bot]'				=> array('crawleradmin.t-info@telekom.de', ''),		'TurnitinBot [Bot]'			=> array('TurnitinBot/', ''),		'Voyager [Bot]'				=> array('voyager/1.0', ''),		'W3 [Sitesearch]'			=> array('W3 SiteSearch Crawler', ''),		'W3C [Linkcheck]'			=> array('W3C-checklink/', ''),		'W3C [Validator]'			=> array('W3C_*Validator', ''),		'WiseNut [Bot]'				=> array('http://www.WISEnutbot.com', ''),		'YaCy [Bot]'				=> array('yacybot', ''),		'Yahoo MMCrawler [Bot]'		=> array('Yahoo-MMCrawler/', ''),		'Yahoo Slurp [Bot]'			=> array('Yahoo! DE Slurp', ''),		'Yahoo [Bot]'				=> array('Yahoo! Slurp', ''),		'YahooSeeker [Bot]'			=> array('YahooSeeker/', ''),	);	/**	* Define the module structure so that we can populate the database without	* needing to hard-code module_id values	*/	var $module_categories = array(		'acp'	=> array(			'ACP_CAT_GENERAL'		=> array(				'ACP_QUICK_ACCESS',				'ACP_BOARD_CONFIGURATION',				'ACP_CLIENT_COMMUNICATION',				'ACP_SERVER_CONFIGURATION',			),			'ACP_CAT_FORUMS'		=> array(				'ACP_MANAGE_FORUMS',				'ACP_FORUM_BASED_PERMISSIONS',			),			'ACP_CAT_POSTING'		=> array(				'ACP_MESSAGES',				'ACP_ATTACHMENTS',			),			'ACP_CAT_USERGROUP'		=> array(				'ACP_CAT_USERS',				'ACP_GROUPS',				'ACP_USER_SECURITY',			),			'ACP_CAT_PERMISSIONS'	=> array(				'ACP_GLOBAL_PERMISSIONS',				'ACP_FORUM_BASED_PERMISSIONS',				'ACP_PERMISSION_ROLES',				'ACP_PERMISSION_MASKS',			),			'ACP_CAT_STYLES'		=> array(				'ACP_STYLE_MANAGEMENT',				'ACP_STYLE_COMPONENTS',			),			'ACP_CAT_MAINTENANCE'	=> array(				'ACP_FORUM_LOGS',				'ACP_CAT_DATABASE',			),			'ACP_CAT_SYSTEM'		=> array(				'ACP_AUTOMATION',				'ACP_GENERAL_TASKS',				'ACP_MODULE_MANAGEMENT',			),			'ACP_CAT_DOT_MODS'		=> null,		),		'mcp'	=> array(			'MCP_MAIN'		=> null,			'MCP_QUEUE'		=> null,			'MCP_REPORTS'	=> null,			'MCP_NOTES'		=> null,			'MCP_WARN'		=> null,			'MCP_LOGS'		=> null,			'MCP_BAN'		=> null,		),		'ucp'	=> array(			'UCP_MAIN'			=> null,			'UCP_PROFILE'		=> null,			'UCP_PREFS'			=> null,			'UCP_PM'			=> null,			'UCP_USERGROUPS'	=> null,			'UCP_ZEBRA'			=> null,		),	);	var $module_extras = array(		'acp'	=> array(			'ACP_QUICK_ACCESS' => array(				'ACP_MANAGE_USERS',				'ACP_GROUPS_MANAGE',				'ACP_MANAGE_FORUMS',				'ACP_MOD_LOGS',				'ACP_BOTS',				'ACP_PHP_INFO',			),			'ACP_FORUM_BASED_PERMISSIONS' => array(				'ACP_FORUM_PERMISSIONS',				'ACP_FORUM_PERMISSIONS_COPY',				'ACP_FORUM_MODERATORS',				'ACP_USERS_FORUM_PERMISSIONS',				'ACP_GROUPS_FORUM_PERMISSIONS',			),		),	);}?>
<?php/**** acp_attachments [English]** @package language* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** DO NOT CHANGE*/if (!defined('IN_PHPBB')){	exit;}if (empty($lang) || !is_array($lang)){	$lang = array();}// DEVELOPERS PLEASE NOTE//// All language files should use UTF-8 as their encoding and the files must not contain a BOM.//// Placeholders can now contain order information, e.g. instead of// 'Page %s of %s' you can (and should) write 'Page %1$s of %2$s', this allows// translators to re-order the output of data while ensuring it remains correct//// You do not need this where single placeholders are used, e.g. 'Message %d' is fine// equally where a string contains only two placeholders which are used to wrap text// in a url you again do not need to specify an order e.g., 'Click %sHERE%s' is fine$lang = array_merge($lang, array(	'ACP_ATTACHMENT_SETTINGS_EXPLAIN'	=> 'Here you can configure the main settings for attachments and the associated special categories.',	'ACP_EXTENSION_GROUPS_EXPLAIN'		=> 'Here you can add, delete, modify or disable your extension groups. Further options include the assignment of a special category to them, changing the download mechanism and defining an upload icon which will be displayed in front of the attachment which belongs to the group.',	'ACP_MANAGE_EXTENSIONS_EXPLAIN'		=> 'Here you can manage your allowed extensions. To activate your extensions, please refer to the extension groups management panel. We strongly recommend not to allow scripting extensions (such as <code>php</code>, <code>php3</code>, <code>php4</code>, <code>phtml</code>, <code>pl</code>, <code>cgi</code>, <code>py</code>, <code>rb</code>, <code>asp</code>, <code>aspx</code>, and so forth).',	'ACP_ORPHAN_ATTACHMENTS_EXPLAIN'	=> 'Here you are able to see orphaned files. This happens mostly if users are attaching files but not submitting the post. You are able to delete the files or attach them to existing posts. Attaching to posts requires a valid post ID, you have to determine this ID by yourself. This will assign the already uploaded attachment to the post you entered.',	'ADD_EXTENSION'						=> 'Add extension',	'ADD_EXTENSION_GROUP'				=> 'Add extension group',	'ADMIN_UPLOAD_ERROR'				=> 'Errors while trying to attach file: %s.',	'ALLOWED_FORUMS'					=> 'Allowed forums',	'ALLOWED_FORUMS_EXPLAIN'			=> 'Able to post the assigned extensions at the selected (or all if selected) forums.',	'ALLOWED_IN_PM_POST'				=> 'Allowed',	'ALLOW_ATTACHMENTS'					=> 'Allow attachments',	'ALLOW_ALL_FORUMS'					=> 'Allow all forums',	'ALLOW_IN_PM'						=> 'Allowed in private messaging',	'ALLOW_PM_ATTACHMENTS'				=> 'Allow attachments in private messages',	'ALLOW_SELECTED_FORUMS'				=> 'Only forums selected below',	'ASSIGNED_EXTENSIONS'				=> 'Assigned extensions',	'ASSIGNED_GROUP'					=> 'Assigned extension group',	'ATTACH_EXTENSIONS_URL'				=> 'Extensions',	'ATTACH_EXT_GROUPS_URL'				=> 'Extension groups',	'ATTACH_ID'							=> 'ID',	'ATTACH_MAX_FILESIZE'				=> 'Maximum file size',	'ATTACH_MAX_FILESIZE_EXPLAIN'		=> 'Maximum size of each file, with 0 being unlimited.',	'ATTACH_MAX_PM_FILESIZE'			=> 'Maximum file size messaging',	'ATTACH_MAX_PM_FILESIZE_EXPLAIN'	=> 'Maximum size of each file, with 0 being unlimited, attached to a private message.',	'ATTACH_ORPHAN_URL'					=> 'Orphan attachments',	'ATTACH_POST_ID'					=> 'Post ID',	'ATTACH_QUOTA'						=> 'Total attachment quota',	'ATTACH_QUOTA_EXPLAIN'				=> 'Maximum drive space available for attachments for the whole board, with 0 being unlimited.',	'ATTACH_TO_POST'					=> 'Attach file to post',	'CAT_FLASH_FILES'			=> 'Flash files',	'CAT_IMAGES'				=> 'Images',	'CAT_QUICKTIME_FILES'		=> 'Quicktime media files',	'CAT_RM_FILES'				=> 'RealMedia media files',	'CAT_WM_FILES'				=> 'Windows Media media files',	'CHECK_CONTENT'				=> 'Check attachment files',	'CHECK_CONTENT_EXPLAIN'		=> 'Some browsers can be tricked to assume an incorrect mimetype for uploaded files. This option ensures that such files likely to cause this are rejected.',	'CREATE_GROUP'				=> 'Create new group',	'CREATE_THUMBNAIL'			=> 'Create thumbnail',	'CREATE_THUMBNAIL_EXPLAIN'	=> 'Create a thumbnail in all possible situations.',	'DEFINE_ALLOWED_IPS'			=> 'Define allowed IPs/hostnames',	'DEFINE_DISALLOWED_IPS'			=> 'Define disallowed IPs/hostnames',	'DOWNLOAD_ADD_IPS_EXPLAIN'		=> 'To specify several different IPs or hostnames enter each on a new line. To specify a range of IP addresses separate the start and end with a hyphen (-), to specify a wildcard use *.',	'DOWNLOAD_REMOVE_IPS_EXPLAIN'	=> 'You can remove (or un-exclude) multiple IP addresses in one go using the appropriate combination of mouse and keyboard for your computer and browser. Excluded IPs have a blue background.',	'DISPLAY_INLINED'				=> 'Display images inline',	'DISPLAY_INLINED_EXPLAIN'		=> 'If set to No image attachments will show as a link.',	'DISPLAY_ORDER'					=> 'Attachment display order',	'DISPLAY_ORDER_EXPLAIN'			=> 'Display attachments ordered by time.',	'EDIT_EXTENSION_GROUP'			=> 'Edit extension group',	'EXCLUDE_ENTERED_IP'			=> 'Enable this to exclude the entered IP/hostname.',	'EXCLUDE_FROM_ALLOWED_IP'		=> 'Exclude IP from allowed IPs/hostnames',	'EXCLUDE_FROM_DISALLOWED_IP'	=> 'Exclude IP from disallowed IPs/hostnames',	'EXTENSIONS_UPDATED'			=> 'Extensions successfully updated.',	'EXTENSION_EXIST'				=> 'The extension %s already exists.',	'EXTENSION_GROUP'				=> 'Extension group',	'EXTENSION_GROUPS'				=> 'Extension groups',	'EXTENSION_GROUP_DELETED'		=> 'Extension group successfully deleted.',	'EXTENSION_GROUP_EXIST'			=> 'The extension group %s already exists.',	'EXT_GROUP_ARCHIVES'			=> 'Archives',	'EXT_GROUP_DOCUMENTS'			=> 'Documents',	'EXT_GROUP_DOWNLOADABLE_FILES'	=> 'Downloadable Files',	'EXT_GROUP_FLASH_FILES'			=> 'Flash Files',	'EXT_GROUP_IMAGES'				=> 'Images',	'EXT_GROUP_PLAIN_TEXT'			=> 'Plain Text',	'EXT_GROUP_QUICKTIME_MEDIA'		=> 'Quicktime Media',	'EXT_GROUP_REAL_MEDIA'			=> 'Real Media',	'EXT_GROUP_WINDOWS_MEDIA'		=> 'Windows Media',	'GO_TO_EXTENSIONS'		=> 'Go to extension management screen',	'GROUP_NAME'			=> 'Group name',	'IMAGE_LINK_SIZE'			=> 'Image link dimensions',	'IMAGE_LINK_SIZE_EXPLAIN'	=> 'Display image attachment as an inline text link if image is larger than this. To disable this behaviour, set the values to 0px by 0px.',	'IMAGICK_PATH'				=> 'Imagemagick path',	'IMAGICK_PATH_EXPLAIN'		=> 'Full path to the imagemagick convert application, e.g. <samp>/usr/bin/</samp>.',	'MAX_ATTACHMENTS'				=> 'Maximum number of attachments per post',	'MAX_ATTACHMENTS_PM'			=> 'Maximum number of attachments per private message',	'MAX_EXTGROUP_FILESIZE'			=> 'Maximum file size',	'MAX_IMAGE_SIZE'				=> 'Maximum image dimensions',	'MAX_IMAGE_SIZE_EXPLAIN'		=> 'Maximum size of image attachments. Set both values to 0px by 0px to disable dimension checking.',	'MAX_THUMB_WIDTH'				=> 'Maximum thumbnail width in pixel',	'MAX_THUMB_WIDTH_EXPLAIN'		=> 'A generated thumbnail will not exceed the width set here.',	'MIN_THUMB_FILESIZE'			=> 'Minimum thumbnail file size',	'MIN_THUMB_FILESIZE_EXPLAIN'	=> 'Do not create a thumbnail for images smaller than this.',	'MODE_INLINE'					=> 'Inline',	'MODE_PHYSICAL'					=> 'Physical',	'NOT_ALLOWED_IN_PM'			=> 'Only allowed in posts',	'NOT_ALLOWED_IN_PM_POST'	=> 'Not allowed',	'NOT_ASSIGNED'				=> 'Not assigned',	'NO_EXT_GROUP'				=> 'None',	'NO_EXT_GROUP_NAME'			=> 'No group name entered',	'NO_EXT_GROUP_SPECIFIED'	=> 'No extension group specified.',	'NO_FILE_CAT'				=> 'None',	'NO_IMAGE'					=> 'No image',	'NO_THUMBNAIL_SUPPORT'		=> 'Thumbnail support has been disabled. For proper functionality either the GD extension need to be available or imagemagick being installed. Both were not found.',	'NO_UPLOAD_DIR'				=> 'The upload directory you specified does not exist.',	'NO_WRITE_UPLOAD'			=> 'The upload directory you specified cannot be written to. Please alter the permissions to allow the webserver to write to it.',	'ONLY_ALLOWED_IN_PM'	=> 'Only allowed in private messages',	'ORDER_ALLOW_DENY'		=> 'Allow',	'ORDER_DENY_ALLOW'		=> 'Deny',	'REMOVE_ALLOWED_IPS'		=> 'Remove or un-exclude <em>allowed</em> IPs/hostnames',	'REMOVE_DISALLOWED_IPS'		=> 'Remove or un-exclude <em>disallowed</em> IPs/hostnames',	'SEARCH_IMAGICK'				=> 'Search for Imagemagick',	'SECURE_ALLOW_DENY'				=> 'Allow/Deny list',	'SECURE_ALLOW_DENY_EXPLAIN'		=> 'Change the default behaviour when secure downloads are enabled of the Allow/Deny list to that of a <strong>whitelist</strong> (Allow) or a <strong>blacklist</strong> (Deny).',	'SECURE_DOWNLOADS'				=> 'Enable secure downloads',	'SECURE_DOWNLOADS_EXPLAIN'		=> 'With this option enabled, downloads are limited to IPs/hostnames you define.',	'SECURE_DOWNLOAD_NOTICE'		=> 'Secure Downloads are not enabled. The settings below will be applied after enabling secure downloads.',	'SECURE_DOWNLOAD_UPDATE_SUCCESS'=> 'The IP list has been updated successfully.',	'SECURE_EMPTY_REFERRER'			=> 'Allow empty referrer',	'SECURE_EMPTY_REFERRER_EXPLAIN'	=> 'Secure downloads are based on referrers. Do you want to allow downloads for those omitting the referrer?',	'SETTINGS_CAT_IMAGES'			=> 'Image category settings',	'SPECIAL_CATEGORY'				=> 'Special category',	'SPECIAL_CATEGORY_EXPLAIN'		=> 'Special categories differ between the way presented within posts.',	'SUCCESSFULLY_UPLOADED'			=> 'Successfully uploaded.',	'SUCCESS_EXTENSION_GROUP_ADD'	=> 'Extension group successfully added.',	'SUCCESS_EXTENSION_GROUP_EDIT'	=> 'Extension group successfully updated.',	'UPLOADING_FILES'				=> 'Uploading files',	'UPLOADING_FILE_TO'				=> 'Uploading file %1$s to post number %2$d',	'UPLOAD_DENIED_FORUM'			=> 'You do not have the permission to upload files to forum %s.',	'UPLOAD_DIR'					=> 'Upload directory',	'UPLOAD_DIR_EXPLAIN'			=> 'Storage path for attachments. Please note that if you change this directory while already having uploaded attachments you need to manually copy the files to their new location.',	'UPLOAD_ICON'					=> 'Upload icon',	'UPLOAD_NOT_DIR'				=> 'The upload location you specified does not appear to be a directory.',));?>
<?php/**** @package acp* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @ignore*/if (!defined('IN_PHPBB')){	exit;}/*** @package acp*/class acp_profile{	var $u_action;	var $edit_lang_id;	var $lang_defs;	function main($id, $mode)	{		global $config, $db, $user, $auth, $template, $cache;		global $phpbb_root_path, $phpbb_admin_path, $phpEx, $table_prefix;		include($phpbb_root_path . 'includes/functions_posting.' . $phpEx);		include($phpbb_root_path . 'includes/functions_user.' . $phpEx);		include($phpbb_root_path . 'includes/functions_profile_fields.' . $phpEx);		$user->add_lang(array('ucp', 'acp/profile'));		$this->tpl_name = 'acp_profile';		$this->page_title = 'ACP_CUSTOM_PROFILE_FIELDS';		$action = (isset($_POST['create'])) ? 'create' : request_var('action', '');		$error = array();		$s_hidden_fields = '';		// Define some default values for each field type		$default_values = array(			FIELD_STRING	=> array('field_length' => 10, 'field_minlen' => 0, 'field_maxlen' => 20, 'field_validation' => '.*', 'field_novalue' => '', 'field_default_value' => ''),			FIELD_TEXT		=> array('field_length' => '5|80', 'field_minlen' => 0, 'field_maxlen' => 1000, 'field_validation' => '.*', 'field_novalue' => '', 'field_default_value' => ''),			FIELD_INT		=> array('field_length' => 5, 'field_minlen' => 0, 'field_maxlen' => 100, 'field_validation' => '', 'field_novalue' => 0, 'field_default_value' => 0),			FIELD_DATE		=> array('field_length' => 10, 'field_minlen' => 10, 'field_maxlen' => 10, 'field_validation' => '', 'field_novalue' => ' 0- 0-   0', 'field_default_value' => ' 0- 0-   0'),			FIELD_BOOL		=> array('field_length' => 1, 'field_minlen' => 0, 'field_maxlen' => 0, 'field_validation' => '', 'field_novalue' => 0, 'field_default_value' => 0),			FIELD_DROPDOWN	=> array('field_length' => 0, 'field_minlen' => 0, 'field_maxlen' => 5, 'field_validation' => '', 'field_novalue' => 0, 'field_default_value' => 0),		);		$cp = new custom_profile_admin();		// Build Language array		// Based on this, we decide which elements need to be edited later and which language items are missing		$this->lang_defs = array();		$sql = 'SELECT lang_id, lang_iso			FROM ' . LANG_TABLE . '			ORDER BY lang_english_name';		$result = $db->sql_query($sql);		while ($row = $db->sql_fetchrow($result))		{			// Make some arrays with all available languages			$this->lang_defs['id'][$row['lang_id']] = $row['lang_iso'];			$this->lang_defs['iso'][$row['lang_iso']] = $row['lang_id'];		}		$db->sql_freeresult($result);		$sql = 'SELECT field_id, lang_id			FROM ' . PROFILE_LANG_TABLE . '			ORDER BY lang_id';		$result = $db->sql_query($sql);		while ($row = $db->sql_fetchrow($result))		{			// Which languages are available for each item			$this->lang_defs['entry'][$row['field_id']][] = $row['lang_id'];		}		$db->sql_freeresult($result);		// Have some fields been defined?		if (isset($this->lang_defs['entry']))		{			foreach ($this->lang_defs['entry'] as $field_id => $field_ary)			{				// Fill an array with the languages that are missing for each field				$this->lang_defs['diff'][$field_id] = array_diff(array_values($this->lang_defs['iso']), $field_ary);			}		}		switch ($action)		{			case 'delete':				$field_id = request_var('field_id', 0);				if (!$field_id)				{					trigger_error($user->lang['NO_FIELD_ID'] . adm_back_link($this->u_action), E_USER_WARNING);				}				if (confirm_box(true))				{					$sql = 'SELECT field_ident						FROM ' . PROFILE_FIELDS_TABLE . "						WHERE field_id = $field_id";					$result = $db->sql_query($sql);					$field_ident = (string) $db->sql_fetchfield('field_ident');					$db->sql_freeresult($result);					$db->sql_transaction('begin');					$db->sql_query('DELETE FROM ' . PROFILE_FIELDS_TABLE . " WHERE field_id = $field_id");					$db->sql_query('DELETE FROM ' . PROFILE_FIELDS_LANG_TABLE . " WHERE field_id = $field_id");					$db->sql_query('DELETE FROM ' . PROFILE_LANG_TABLE . " WHERE field_id = $field_id");					switch ($db->sql_layer)					{						case 'sqlite':							$sql = "SELECT sql								FROM sqlite_master								WHERE type = 'table'									AND name = '" . PROFILE_FIELDS_DATA_TABLE . "'								ORDER BY type DESC, name;";							$result = $db->sql_query($sql);							$row = $db->sql_fetchrow($result);							$db->sql_freeresult($result);							// Create a temp table and populate it, destroy the existing one							$db->sql_query(preg_replace('#CREATE\s+TABLE\s+"?' . PROFILE_FIELDS_DATA_TABLE . '"?#i', 'CREATE TEMPORARY TABLE ' . PROFILE_FIELDS_DATA_TABLE . '_temp', $row['sql']));							$db->sql_query('INSERT INTO ' . PROFILE_FIELDS_DATA_TABLE . '_temp SELECT * FROM ' . PROFILE_FIELDS_DATA_TABLE);							$db->sql_query('DROP TABLE ' . PROFILE_FIELDS_DATA_TABLE);							preg_match('#\((.*)\)#s', $row['sql'], $matches);							$new_table_cols = trim($matches[1]);							$old_table_cols = preg_split('/,(?=[\\sa-z])/im', $new_table_cols);							$column_list = array();							foreach ($old_table_cols as $declaration)							{								$entities = preg_split('#\s+#', trim($declaration));								if ($entities[0] == 'PRIMARY')								{									continue;								}								if ($entities[0] !== 'pf_' . $field_ident)								{									$column_list[] = $entities[0];								}							}							$columns = implode(',', $column_list);							$new_table_cols = preg_replace('/' . 'pf_' . $field_ident . '[^,]+,/', '', $new_table_cols);							// create a new table and fill it up. destroy the temp one							$db->sql_query('CREATE TABLE ' . PROFILE_FIELDS_DATA_TABLE . ' (' . $new_table_cols . ');');							$db->sql_query('INSERT INTO ' . PROFILE_FIELDS_DATA_TABLE . ' (' . $columns . ') SELECT ' . $columns . ' FROM ' . PROFILE_FIELDS_DATA_TABLE . '_temp;');							$db->sql_query('DROP TABLE ' . PROFILE_FIELDS_DATA_TABLE . '_temp');						break;						default:							$db->sql_query('ALTER TABLE ' . PROFILE_FIELDS_DATA_TABLE . " DROP COLUMN pf_$field_ident");					}					$order = 0;					$sql = 'SELECT *						FROM ' . PROFILE_FIELDS_TABLE . '						ORDER BY field_order';					$result = $db->sql_query($sql);					while ($row = $db->sql_fetchrow($result))					{						$order++;						if ($row['field_order'] != $order)						{							$sql = 'UPDATE ' . PROFILE_FIELDS_TABLE . "								SET field_order = $order								WHERE field_id = {$row['field_id']}";							$db->sql_query($sql);						}					}					$db->sql_freeresult($result);					$db->sql_transaction('commit');					add_log('admin', 'LOG_PROFILE_FIELD_REMOVED', $field_ident);					trigger_error($user->lang['REMOVED_PROFILE_FIELD'] . adm_back_link($this->u_action));				}				else				{					confirm_box(false, 'DELETE_PROFILE_FIELD', build_hidden_fields(array(						'i'			=> $id,						'mode'		=> $mode,						'action'	=> $action,						'field_id'	=> $field_id,					)));				}			break;			case 'activate':				$field_id = request_var('field_id', 0);				if (!$field_id)				{					trigger_error($user->lang['NO_FIELD_ID'] . adm_back_link($this->u_action), E_USER_WARNING);				}				$sql = 'SELECT lang_id					FROM ' . LANG_TABLE . "					WHERE lang_iso = '" . $db->sql_escape($config['default_lang']) . "'";				$result = $db->sql_query($sql);				$default_lang_id = (int) $db->sql_fetchfield('lang_id');				$db->sql_freeresult($result);				if (!in_array($default_lang_id, $this->lang_defs['entry'][$field_id]))				{					trigger_error($user->lang['DEFAULT_LANGUAGE_NOT_FILLED'] . adm_back_link($this->u_action), E_USER_WARNING);				}				$sql = 'UPDATE ' . PROFILE_FIELDS_TABLE . "					SET field_active = 1					WHERE field_id = $field_id";				$db->sql_query($sql);				$sql = 'SELECT field_ident					FROM ' . PROFILE_FIELDS_TABLE . "					WHERE field_id = $field_id";				$result = $db->sql_query($sql);				$field_ident = (string) $db->sql_fetchfield('field_ident');				$db->sql_freeresult($result);				add_log('admin', 'LOG_PROFILE_FIELD_ACTIVATE', $field_ident);				trigger_error($user->lang['PROFILE_FIELD_ACTIVATED'] . adm_back_link($this->u_action));			break;			case 'deactivate':				$field_id = request_var('field_id', 0);				if (!$field_id)				{					trigger_error($user->lang['NO_FIELD_ID'] . adm_back_link($this->u_action), E_USER_WARNING);				}				$sql = 'UPDATE ' . PROFILE_FIELDS_TABLE . "					SET field_active = 0					WHERE field_id = $field_id";				$db->sql_query($sql);				$sql = 'SELECT field_ident					FROM ' . PROFILE_FIELDS_TABLE . "					WHERE field_id = $field_id";				$result = $db->sql_query($sql);				$field_ident = (string) $db->sql_fetchfield('field_ident');				$db->sql_freeresult($result);				add_log('admin', 'LOG_PROFILE_FIELD_DEACTIVATE', $field_ident);				trigger_error($user->lang['PROFILE_FIELD_DEACTIVATED'] . adm_back_link($this->u_action));			break;			case 'move_up':			case 'move_down':				$field_order = request_var('order', 0);				$order_total = $field_order * 2 + (($action == 'move_up') ? -1 : 1);				$sql = 'UPDATE ' . PROFILE_FIELDS_TABLE . "					SET field_order = $order_total - field_order					WHERE field_order IN ($field_order, " . (($action == 'move_up') ? $field_order - 1 : $field_order + 1) . ')';				$db->sql_query($sql);			break;			case 'create':			case 'edit':				$field_id = request_var('field_id', 0);				$step = request_var('step', 1);				$submit = (isset($_REQUEST['next']) || isset($_REQUEST['prev'])) ? true : false;				$save = (isset($_REQUEST['save'])) ? true : false;				// The language id of default language				$this->edit_lang_id = $this->lang_defs['iso'][$config['default_lang']];				// We are editing... we need to grab basic things				if ($action == 'edit')				{					if (!$field_id)					{						trigger_error($user->lang['NO_FIELD_ID'] . adm_back_link($this->u_action), E_USER_WARNING);					}					$sql = 'SELECT l.*, f.*						FROM ' . PROFILE_LANG_TABLE . ' l, ' . PROFILE_FIELDS_TABLE . ' f						WHERE l.lang_id = ' . $this->edit_lang_id . "							AND f.field_id = $field_id							AND l.field_id = f.field_id";					$result = $db->sql_query($sql);					$field_row = $db->sql_fetchrow($result);					$db->sql_freeresult($result);					if (!$field_row)					{						// Some admin changed the default language?						$sql = 'SELECT l.*, f.*							FROM ' . PROFILE_LANG_TABLE . ' l, ' . PROFILE_FIELDS_TABLE . ' f							WHERE l.lang_id <> ' . $this->edit_lang_id . "							AND f.field_id = $field_id							AND l.field_id = f.field_id";						$result = $db->sql_query($sql);						$field_row = $db->sql_fetchrow($result);						$db->sql_freeresult($result);						if (!$field_row)						{							trigger_error($user->lang['FIELD_NOT_FOUND'] . adm_back_link($this->u_action), E_USER_WARNING);						}						$this->edit_lang_id = $field_row['lang_id'];					}					$field_type = $field_row['field_type'];					// Get language entries					$sql = 'SELECT *						FROM ' . PROFILE_FIELDS_LANG_TABLE . '						WHERE lang_id = ' . $this->edit_lang_id . "							AND field_id = $field_id						ORDER BY option_id ASC";					$result = $db->sql_query($sql);					$lang_options = array();					while ($row = $db->sql_fetchrow($result))					{						$lang_options[$row['option_id']] = $row['lang_value'];					}					$db->sql_freeresult($result);					$s_hidden_fields = '<input type="hidden" name="field_id" value="' . $field_id . '" />';				}				else				{					// We are adding a new field, define basic params					$lang_options = $field_row = array();					$field_type = request_var('field_type', 0);					if (!$field_type)					{						trigger_error($user->lang['NO_FIELD_TYPE'] . adm_back_link($this->u_action), E_USER_WARNING);					}					$field_row = array_merge($default_values[$field_type], array(						'field_ident'		=> str_replace(' ', '_', utf8_clean_string(request_var('field_ident', '', true))),						'field_required'	=> 0,						'field_hide'		=> 0,						'field_show_profile'=> 0,						'field_no_view'		=> 0,						'field_show_on_reg'	=> 0,						'field_show_on_vt'	=> 0,						'lang_name'			=> utf8_normalize_nfc(request_var('field_ident', '', true)),						'lang_explain'		=> '',						'lang_default_value'=> '')					);					$s_hidden_fields = '<input type="hidden" name="field_type" value="' . $field_type . '" />';				}				// $exclude contains the data we gather in each step				$exclude = array(					1	=> array('field_ident', 'lang_name', 'lang_explain', 'field_option_none', 'field_show_on_reg', 'field_show_on_vt', 'field_required', 'field_hide', 'field_show_profile', 'field_no_view'),					2	=> array('field_length', 'field_maxlen', 'field_minlen', 'field_validation', 'field_novalue', 'field_default_value'),					3	=> array('l_lang_name', 'l_lang_explain', 'l_lang_default_value', 'l_lang_options')				);				// Text-based fields require the lang_default_value to be excluded				if ($field_type == FIELD_STRING || $field_type == FIELD_TEXT)				{					$exclude[1][] = 'lang_default_value';				}				// option-specific fields require lang_options to be excluded				if ($field_type == FIELD_BOOL || $field_type == FIELD_DROPDOWN)				{					$exclude[1][] = 'lang_options';				}				$cp->vars['field_ident']		= ($action == 'create' && $step == 1) ? utf8_clean_string(request_var('field_ident', $field_row['field_ident'], true)) : request_var('field_ident', $field_row['field_ident']);				$cp->vars['lang_name']			= utf8_normalize_nfc(request_var('lang_name', $field_row['lang_name'], true));				$cp->vars['lang_explain']		= utf8_normalize_nfc(request_var('lang_explain', $field_row['lang_explain'], true));				$cp->vars['lang_default_value']	= utf8_normalize_nfc(request_var('lang_default_value', $field_row['lang_default_value'], true));				// Visibility Options...				$visibility_ary = array(					'field_required',					'field_show_on_reg',					'field_show_on_vt',					'field_show_profile',					'field_hide',				);				foreach ($visibility_ary as $val)				{					$cp->vars[$val] = ($submit || $save) ? request_var($val, 0) : $field_row[$val];				}				$cp->vars['field_no_view'] = request_var('field_no_view', (int) $field_row['field_no_view']);				// A boolean field expects an array as the lang options				if ($field_type == FIELD_BOOL)				{					$options = utf8_normalize_nfc(request_var('lang_options', array(''), true));				}				else				{					$options = utf8_normalize_nfc(request_var('lang_options', '', true));				}				// If the user has submitted a form with options (i.e. dropdown field)				if ($options)				{					$exploded_options = (is_array($options)) ? $options : explode("\n", $options);					if (sizeof($exploded_options) == sizeof($lang_options) || $action == 'create')					{						// The number of options in the field is equal to the number of options already in the database						// Or we are creating a new dropdown list.						$cp->vars['lang_options'] = $exploded_options;					}					else if ($action == 'edit')					{						// Changing the number of options? (We remove and re-create the option fields)						$cp->vars['lang_options'] = $exploded_options;					}				}				else				{					$cp->vars['lang_options'] = $lang_options;				}				// step 2				foreach ($exclude[2] as $key)				{					$var = utf8_normalize_nfc(request_var($key, $field_row[$key], true));					// Manipulate the intended variables a little bit if needed					if ($field_type == FIELD_DROPDOWN && $key == 'field_maxlen')					{						// Get the number of options if this key is 'field_maxlen'						$var = sizeof(explode("\n", utf8_normalize_nfc(request_var('lang_options', '', true))));					}					else if ($field_type == FIELD_TEXT && $key == 'field_length')					{						if (isset($_REQUEST['rows']))						{							$cp->vars['rows'] = request_var('rows', 0);							$cp->vars['columns'] = request_var('columns', 0);							$var = $cp->vars['rows'] . '|' . $cp->vars['columns'];						}						else						{							$row_col = explode('|', $var);							$cp->vars['rows'] = $row_col[0];							$cp->vars['columns'] = $row_col[1];						}					}					else if ($field_type == FIELD_DATE && $key == 'field_default_value')					{						$always_now = request_var('always_now', -1);						if ($always_now == 1 || ($always_now === -1 && $var == 'now'))						{							$now = getdate();							$cp->vars['field_default_value_day'] = $now['mday'];							$cp->vars['field_default_value_month'] = $now['mon'];							$cp->vars['field_default_value_year'] = $now['year'];							$var = $_POST['field_default_value'] = 'now';						}						else						{							if (isset($_REQUEST['field_default_value_day']))							{								$cp->vars['field_default_value_day'] = request_var('field_default_value_day', 0);								$cp->vars['field_default_value_month'] = request_var('field_default_value_month', 0);								$cp->vars['field_default_value_year'] = request_var('field_default_value_year', 0);								$var = $_POST['field_default_value'] = sprintf('%2d-%2d-%4d', $cp->vars['field_default_value_day'], $cp->vars['field_default_value_month'], $cp->vars['field_default_value_year']);							}							else							{								list($cp->vars['field_default_value_day'], $cp->vars['field_default_value_month'], $cp->vars['field_default_value_year']) = explode('-', $var);							}						}					}					/* else if ($field_type == FIELD_BOOL && $key == 'field_default_value')					{						// Get the number of options if this key is 'field_maxlen'						$var = request_var('field_default_value', 0);					}*/					else if ($field_type == FIELD_INT && $key == 'field_default_value')					{						// Permit an empty string						if ($action == 'create' && request_var('field_default_value', '') === '')						{							$var = '';						}					}					$cp->vars[$key] = $var;				}				// step 3 - all arrays				if ($action == 'edit')				{					// Get language entries					$sql = 'SELECT *						FROM ' . PROFILE_FIELDS_LANG_TABLE . '						WHERE lang_id <> ' . $this->edit_lang_id . "							AND field_id = $field_id						ORDER BY option_id ASC";					$result = $db->sql_query($sql);					$l_lang_options = array();					while ($row = $db->sql_fetchrow($result))					{						$l_lang_options[$row['lang_id']][$row['option_id']] = $row['lang_value'];					}					$db->sql_freeresult($result);					$sql = 'SELECT lang_id, lang_name, lang_explain, lang_default_value						FROM ' . PROFILE_LANG_TABLE . '						WHERE lang_id <> ' . $this->edit_lang_id . "							AND field_id = $field_id						ORDER BY lang_id ASC";					$result = $db->sql_query($sql);					$l_lang_name = $l_lang_explain = $l_lang_default_value = array();					while ($row = $db->sql_fetchrow($result))					{						$l_lang_name[$row['lang_id']] = $row['lang_name'];						$l_lang_explain[$row['lang_id']] = $row['lang_explain'];						$l_lang_default_value[$row['lang_id']] = $row['lang_default_value'];					}					$db->sql_freeresult($result);				}				foreach ($exclude[3] as $key)				{					$cp->vars[$key] = utf8_normalize_nfc(request_var($key, array(0 => ''), true));					if (!$cp->vars[$key] && $action == 'edit')					{						$cp->vars[$key] = $$key;					}					else if ($key == 'l_lang_options' && $field_type == FIELD_BOOL)					{						$cp->vars[$key] = utf8_normalize_nfc(request_var($key, array(0 => array('')), true));					}					else if ($key == 'l_lang_options' && is_array($cp->vars[$key]))					{						foreach ($cp->vars[$key] as $lang_id => $options)						{							$cp->vars[$key][$lang_id] = explode("\n", $options);						}					}				}				// Check for general issues in every step				if ($submit) //  && $step == 1				{					// Check values for step 1					if ($cp->vars['field_ident'] == '')					{						$error[] = $user->lang['EMPTY_FIELD_IDENT'];					}					if (!preg_match('/^[a-z_]+$/', $cp->vars['field_ident']))					{						$error[] = $user->lang['INVALID_CHARS_FIELD_IDENT'];					}					if (strlen($cp->vars['field_ident']) > 17)					{						$error[] = $user->lang['INVALID_FIELD_IDENT_LEN'];					}					if ($cp->vars['lang_name'] == '')					{						$error[] = $user->lang['EMPTY_USER_FIELD_NAME'];					}					if ($field_type == FIELD_DROPDOWN && !sizeof($cp->vars['lang_options']))					{						$error[] = $user->lang['NO_FIELD_ENTRIES'];					}					if ($field_type == FIELD_BOOL && (empty($cp->vars['lang_options'][0]) || empty($cp->vars['lang_options'][1])))					{						$error[] = $user->lang['NO_FIELD_ENTRIES'];					}					// Check for already existing field ident					if ($action != 'edit')					{						$sql = 'SELECT field_ident							FROM ' . PROFILE_FIELDS_TABLE . "							WHERE field_ident = '" . $db->sql_escape($cp->vars['field_ident']) . "'";						$result = $db->sql_query($sql);						$row = $db->sql_fetchrow($result);						$db->sql_freeresult($result);						if ($row)						{							$error[] = $user->lang['FIELD_IDENT_ALREADY_EXIST'];						}					}				}				$step = (isset($_REQUEST['next'])) ? $step + 1 : ((isset($_REQUEST['prev'])) ? $step - 1 : $step);				if (sizeof($error))				{					$step--;					$submit = false;				}				// Build up the specific hidden fields				foreach ($exclude as $num => $key_ary)				{					if ($num == $step)					{						continue;					}					$_new_key_ary = array();					foreach ($key_ary as $key)					{						if ($field_type == FIELD_TEXT && $key == 'field_length' && isset($_REQUEST['rows']))						{							$cp->vars['rows'] = request_var('rows', 0);							$cp->vars['columns'] = request_var('columns', 0);							$_new_key_ary[$key] = $cp->vars['rows'] . '|' . $cp->vars['columns'];						}						else if ($field_type == FIELD_DATE && $key == 'field_default_value')						{							$always_now = request_var('always_now', 0);							if ($always_now)							{								$_new_key_ary[$key] = 'now';							}							else if (isset($_REQUEST['field_default_value_day']))							{								$cp->vars['field_default_value_day'] = request_var('field_default_value_day', 0);								$cp->vars['field_default_value_month'] = request_var('field_default_value_month', 0);								$cp->vars['field_default_value_year'] = request_var('field_default_value_year', 0);								$_new_key_ary[$key]  = sprintf('%2d-%2d-%4d', $cp->vars['field_default_value_day'], $cp->vars['field_default_value_month'], $cp->vars['field_default_value_year']);							}						}						else if ($field_type == FIELD_BOOL && $key == 'l_lang_options' && isset($_REQUEST['l_lang_options']))						{							$_new_key_ary[$key] = utf8_normalize_nfc(request_var($key, array(array('')), true));						}						else						{							if (!isset($_REQUEST[$key]))							{								$var = false;							}							else if ($key == 'field_ident' && isset($cp->vars[$key]))							{								$_new_key_ary[$key]= $cp->vars[$key];							}							else							{								$_new_key_ary[$key] = (is_array($_REQUEST[$key])) ? utf8_normalize_nfc(request_var($key, array(''), true)) : utf8_normalize_nfc(request_var($key, '', true));							}						}					}					$s_hidden_fields .= build_hidden_fields($_new_key_ary);				}				if (!sizeof($error))				{					if ($step == 3 && (sizeof($this->lang_defs['iso']) == 1 || $save))					{						$this->save_profile_field($cp, $field_type, $action);					}					else if ($action == 'edit' && $save)					{						$this->save_profile_field($cp, $field_type, $action);					}				}				$template->assign_vars(array(					'S_EDIT'			=> true,					'S_EDIT_MODE'		=> ($action == 'edit') ? true : false,					'ERROR_MSG'			=> (sizeof($error)) ? implode('<br />', $error) : '',					'L_TITLE'			=> $user->lang['STEP_' . $step . '_TITLE_' . strtoupper($action)],					'L_EXPLAIN'			=> $user->lang['STEP_' . $step . '_EXPLAIN_' . strtoupper($action)],					'U_ACTION'			=> $this->u_action . "&amp;action=$action&amp;step=$step",					'U_BACK'			=> $this->u_action)				);				// Now go through the steps				switch ($step)				{					// Create basic options - only small differences between field types					case 1:						// Build common create options						$template->assign_vars(array(							'S_STEP_ONE'		=> true,							'S_FIELD_REQUIRED'	=> ($cp->vars['field_required']) ? true : false,							'S_SHOW_ON_REG'		=> ($cp->vars['field_show_on_reg']) ? true : false,							'S_SHOW_ON_VT'		=> ($cp->vars['field_show_on_vt']) ? true : false,							'S_FIELD_HIDE'		=> ($cp->vars['field_hide']) ? true : false,							'S_SHOW_PROFILE'	=> ($cp->vars['field_show_profile']) ? true : false,							'S_FIELD_NO_VIEW'	=> ($cp->vars['field_no_view']) ? true : false,							'L_LANG_SPECIFIC'	=> sprintf($user->lang['LANG_SPECIFIC_OPTIONS'], $config['default_lang']),							'FIELD_TYPE'		=> $user->lang['FIELD_' . strtoupper($cp->profile_types[$field_type])],							'FIELD_IDENT'		=> $cp->vars['field_ident'],							'LANG_NAME'			=> $cp->vars['lang_name'],							'LANG_EXPLAIN'		=> $cp->vars['lang_explain'])						);						// String and Text needs to set default values here...						if ($field_type == FIELD_STRING || $field_type == FIELD_TEXT)						{							$template->assign_vars(array(								'S_TEXT'		=> ($field_type == FIELD_TEXT) ? true : false,								'S_STRING'		=> ($field_type == FIELD_STRING) ? true : false,								'L_DEFAULT_VALUE_EXPLAIN'	=> $user->lang[strtoupper($cp->profile_types[$field_type]) . '_DEFAULT_VALUE_EXPLAIN'],								'LANG_DEFAULT_VALUE'		=> $cp->vars['lang_default_value'])							);						}						if ($field_type == FIELD_BOOL || $field_type == FIELD_DROPDOWN)						{							// Initialize these array elements if we are creating a new field							if (!sizeof($cp->vars['lang_options']))							{								if ($field_type == FIELD_BOOL)								{									// No options have been defined for a boolean field.									$cp->vars['lang_options'][0] = '';									$cp->vars['lang_options'][1] = '';								}								else								{									// No options have been defined for the dropdown menu									$cp->vars['lang_options'] = array();								}							}							$template->assign_vars(array(								'S_BOOL'		=> ($field_type == FIELD_BOOL) ? true : false,								'S_DROPDOWN'	=> ($field_type == FIELD_DROPDOWN) ? true : false,								'L_LANG_OPTIONS_EXPLAIN'	=> $user->lang[strtoupper($cp->profile_types[$field_type]) . '_ENTRIES_EXPLAIN'],								'LANG_OPTIONS'				=> ($field_type == FIELD_DROPDOWN) ? implode("\n", $cp->vars['lang_options']) : '',								'FIRST_LANG_OPTION'			=> ($field_type == FIELD_BOOL) ? $cp->vars['lang_options'][0] : '',								'SECOND_LANG_OPTION'		=> ($field_type == FIELD_BOOL) ? $cp->vars['lang_options'][1] : '')							);						}					break;					case 2:						$template->assign_vars(array(							'S_STEP_TWO'		=> true,							'L_NEXT_STEP'			=> (sizeof($this->lang_defs['iso']) == 1) ? $user->lang['SAVE'] : $user->lang['PROFILE_LANG_OPTIONS'])						);						// Build options based on profile type						$function = 'get_' . $cp->profile_types[$field_type] . '_options';						$options = $cp->$function();						foreach ($options as $num => $option_ary)						{							$template->assign_block_vars('option', $option_ary);						}					break;					// Define remaining language variables					case 3:						$template->assign_var('S_STEP_THREE', true);						$options = $this->build_language_options($cp, $field_type, $action);						foreach ($options as $lang_id => $lang_ary)						{							$template->assign_block_vars('options', array(								'LANGUAGE'		=> sprintf($user->lang[(($lang_id == $this->edit_lang_id) ? 'DEFAULT_' : '') . 'ISO_LANGUAGE'], $lang_ary['lang_iso']))							);							foreach ($lang_ary['fields'] as $field_ident => $field_ary)							{								$template->assign_block_vars('options.field', array(									'L_TITLE'		=> $field_ary['TITLE'],									'L_EXPLAIN'		=> (isset($field_ary['EXPLAIN'])) ? $field_ary['EXPLAIN'] : '',									'FIELD'			=> $field_ary['FIELD'])								);							}						}					break;				}				$template->assign_vars(array(					'S_HIDDEN_FIELDS'	=> $s_hidden_fields)				);				return;			break;		}		$sql = 'SELECT *			FROM ' . PROFILE_FIELDS_TABLE . '			ORDER BY field_order';		$result = $db->sql_query($sql);		$s_one_need_edit = false;		while ($row = $db->sql_fetchrow($result))		{			$active_lang = (!$row['field_active']) ? 'ACTIVATE' : 'DEACTIVATE';			$active_value = (!$row['field_active']) ? 'activate' : 'deactivate';			$id = $row['field_id'];			$s_need_edit = (sizeof($this->lang_defs['diff'][$row['field_id']])) ? true : false;			if ($s_need_edit)			{				$s_one_need_edit = true;			}			$template->assign_block_vars('fields', array(				'FIELD_IDENT'		=> $row['field_ident'],				'FIELD_TYPE'		=> $user->lang['FIELD_' . strtoupper($cp->profile_types[$row['field_type']])],				'L_ACTIVATE_DEACTIVATE'		=> $user->lang[$active_lang],				'U_ACTIVATE_DEACTIVATE'		=> $this->u_action . "&amp;action=$active_value&amp;field_id=$id",				'U_EDIT'					=> $this->u_action . "&amp;action=edit&amp;field_id=$id",				'U_TRANSLATE'				=> $this->u_action . "&amp;action=edit&amp;field_id=$id&amp;step=3",				'U_DELETE'					=> $this->u_action . "&amp;action=delete&amp;field_id=$id",				'U_MOVE_UP'					=> $this->u_action . "&amp;action=move_up&amp;order={$row['field_order']}",				'U_MOVE_DOWN'				=> $this->u_action . "&amp;action=move_down&amp;order={$row['field_order']}",				'S_NEED_EDIT'				=> $s_need_edit)			);		}		$db->sql_freeresult($result);		// At least one option field needs editing?		if ($s_one_need_edit)		{			$template->assign_var('S_NEED_EDIT', true);		}		$s_select_type = '';		foreach ($cp->profile_types as $key => $value)		{			$s_select_type .= '<option value="' . $key . '">' . $user->lang['FIELD_' . strtoupper($value)] . '</option>';		}		$template->assign_vars(array(			'U_ACTION'			=> $this->u_action,			'S_TYPE_OPTIONS'	=> $s_select_type)		);	}	/**	* Build all Language specific options	*/	function build_language_options(&$cp, $field_type, $action = 'create')	{		global $user, $config, $db;		$default_lang_id = (!empty($this->edit_lang_id)) ? $this->edit_lang_id : $this->lang_defs['iso'][$config['default_lang']];		$sql = 'SELECT lang_id, lang_iso			FROM ' . LANG_TABLE . '			WHERE lang_id <> ' . (int) $default_lang_id . '			ORDER BY lang_english_name';		$result = $db->sql_query($sql);		$languages = array();		while ($row = $db->sql_fetchrow($result))		{			$languages[$row['lang_id']] = $row['lang_iso'];		}		$db->sql_freeresult($result);		$options = array();		$options['lang_name'] = 'string';		if ($cp->vars['lang_explain'])		{			$options['lang_explain'] = 'text';		}		switch ($field_type)		{			case FIELD_BOOL:				$options['lang_options'] = 'two_options';			break;			case FIELD_DROPDOWN:				$options['lang_options'] = 'optionfield';			break;			case FIELD_TEXT:			case FIELD_STRING:				if (strlen($cp->vars['lang_default_value']))				{					$options['lang_default_value'] = ($field_type == FIELD_STRING) ? 'string' : 'text';				}			break;		}		$lang_options = array();		foreach ($options as $field => $field_type)		{			$lang_options[1]['lang_iso'] = $this->lang_defs['id'][$default_lang_id];			$lang_options[1]['fields'][$field] = array(				'TITLE'		=> $user->lang['CP_' . strtoupper($field)],				'FIELD'		=> '<dd>' . ((is_array($cp->vars[$field])) ? implode('<br />', $cp->vars[$field]) : bbcode_nl2br($cp->vars[$field])) . '</dd>'			);			if (isset($user->lang['CP_' . strtoupper($field) . '_EXPLAIN']))			{				$lang_options[1]['fields'][$field]['EXPLAIN'] = $user->lang['CP_' . strtoupper($field) . '_EXPLAIN'];			}		}		foreach ($languages as $lang_id => $lang_iso)		{			$lang_options[$lang_id]['lang_iso'] = $lang_iso;			foreach ($options as $field => $field_type)			{				$value = ($action == 'create') ? utf8_normalize_nfc(request_var('l_' . $field, array(0 => ''), true)) : $cp->vars['l_' . $field];				if ($field == 'lang_options')				{					$var = (!isset($cp->vars['l_lang_options'][$lang_id]) || !is_array($cp->vars['l_lang_options'][$lang_id])) ? $cp->vars['lang_options'] : $cp->vars['l_lang_options'][$lang_id];					switch ($field_type)					{						case 'two_options':							$lang_options[$lang_id]['fields'][$field] = array(								'TITLE'		=> $user->lang['CP_' . strtoupper($field)],								'FIELD'		=> '											<dd><input class="medium" name="l_' . $field . '[' . $lang_id . '][]" value="' . ((isset($value[$lang_id][0])) ? $value[$lang_id][0] : $var[0]) . '" /> ' . $user->lang['FIRST_OPTION'] . '</dd>											<dd><input class="medium" name="l_' . $field . '[' . $lang_id . '][]" value="' . ((isset($value[$lang_id][1])) ? $value[$lang_id][1] : $var[1]) . '" /> ' . $user->lang['SECOND_OPTION'] . '</dd>'							);						break;						case 'optionfield':							$value = ((isset($value[$lang_id])) ? ((is_array($value[$lang_id])) ?  implode("\n", $value[$lang_id]) : $value[$lang_id]) : implode("\n", $var));							$lang_options[$lang_id]['fields'][$field] = array(								'TITLE'		=> $user->lang['CP_' . strtoupper($field)],								'FIELD'		=> '<dd><textarea name="l_' . $field . '[' . $lang_id . ']" rows="7" cols="80">' . $value . '</textarea></dd>'							);						break;					}					if (isset($user->lang['CP_' . strtoupper($field) . '_EXPLAIN']))					{						$lang_options[$lang_id]['fields'][$field]['EXPLAIN'] = $user->lang['CP_' . strtoupper($field) . '_EXPLAIN'];					}				}				else				{					$var = ($action == 'create' || !is_array($cp->vars[$field])) ? $cp->vars[$field] : $cp->vars[$field][$lang_id];					$lang_options[$lang_id]['fields'][$field] = array(						'TITLE'		=> $user->lang['CP_' . strtoupper($field)],						'FIELD'		=> ($field_type == 'string') ? '<dd><input class="medium" type="text" name="l_' . $field . '[' . $lang_id . ']" value="' . ((isset($value[$lang_id])) ? $value[$lang_id] : $var) . '" /></dd>' : '<dd><textarea name="l_' . $field . '[' . $lang_id . ']" rows="3" cols="80">' . ((isset($value[$lang_id])) ? $value[$lang_id] : $var) . '</textarea></dd>'					);					if (isset($user->lang['CP_' . strtoupper($field) . '_EXPLAIN']))					{						$lang_options[$lang_id]['fields'][$field]['EXPLAIN'] = $user->lang['CP_' . strtoupper($field) . '_EXPLAIN'];					}				}			}		}		return $lang_options;	}	/**	* Save Profile Field	*/	function save_profile_field(&$cp, $field_type, $action = 'create')	{		global $db, $config, $user;		$field_id = request_var('field_id', 0);		// Collect all information, if something is going wrong, abort the operation		$profile_sql = $profile_lang = $empty_lang = $profile_lang_fields = array();		$default_lang_id = (!empty($this->edit_lang_id)) ? $this->edit_lang_id : $this->lang_defs['iso'][$config['default_lang']];		if ($action == 'create')		{			$sql = 'SELECT MAX(field_order) as max_field_order				FROM ' . PROFILE_FIELDS_TABLE;			$result = $db->sql_query($sql);			$new_field_order = (int) $db->sql_fetchfield('max_field_order');			$db->sql_freeresult($result);			$field_ident = $cp->vars['field_ident'];		}		// Save the field		$profile_fields = array(			'field_length'			=> $cp->vars['field_length'],			'field_minlen'			=> $cp->vars['field_minlen'],			'field_maxlen'			=> $cp->vars['field_maxlen'],			'field_novalue'			=> $cp->vars['field_novalue'],			'field_default_value'	=> $cp->vars['field_default_value'],			'field_validation'		=> $cp->vars['field_validation'],			'field_required'		=> $cp->vars['field_required'],			'field_show_on_reg'		=> $cp->vars['field_show_on_reg'],			'field_show_on_vt'		=> $cp->vars['field_show_on_vt'],			'field_hide'			=> $cp->vars['field_hide'],			'field_show_profile'	=> $cp->vars['field_show_profile'],			'field_no_view'			=> $cp->vars['field_no_view']		);		if ($action == 'create')		{			$profile_fields += array(				'field_type'		=> $field_type,				'field_ident'		=> $field_ident,				'field_name'		=> $field_ident,				'field_order'		=> $new_field_order + 1,				'field_active'		=> 1			);			$sql = 'INSERT INTO ' . PROFILE_FIELDS_TABLE . ' ' . $db->sql_build_array('INSERT', $profile_fields);			$db->sql_query($sql);			$field_id = $db->sql_nextid();		}		else		{			$sql = 'UPDATE ' . PROFILE_FIELDS_TABLE . '				SET ' . $db->sql_build_array('UPDATE', $profile_fields) . "				WHERE field_id = $field_id";			$db->sql_query($sql);		}		if ($action == 'create')		{			$field_ident = 'pf_' . $field_ident;			$profile_sql[] = $this->add_field_ident($field_ident, $field_type);		}		$sql_ary = array(			'lang_name'				=> $cp->vars['lang_name'],			'lang_explain'			=> $cp->vars['lang_explain'],			'lang_default_value'	=> $cp->vars['lang_default_value']		);		if ($action == 'create')		{			$sql_ary['field_id'] = $field_id;			$sql_ary['lang_id'] = $default_lang_id;			$profile_sql[] = 'INSERT INTO ' . PROFILE_LANG_TABLE . ' ' . $db->sql_build_array('INSERT', $sql_ary);		}		else		{			$this->update_insert(PROFILE_LANG_TABLE, $sql_ary, array('field_id' => $field_id, 'lang_id' => $default_lang_id));		}		if (is_array($cp->vars['l_lang_name']) && sizeof($cp->vars['l_lang_name']))		{			foreach ($cp->vars['l_lang_name'] as $lang_id => $data)			{				if (($cp->vars['lang_name'] != '' && $cp->vars['l_lang_name'][$lang_id] == '')					|| ($cp->vars['lang_explain'] != '' && $cp->vars['l_lang_explain'][$lang_id] == '')					|| ($cp->vars['lang_default_value'] != '' && $cp->vars['l_lang_default_value'][$lang_id] == ''))				{					$empty_lang[$lang_id] = true;					break;				}				if (!isset($empty_lang[$lang_id]))				{					$profile_lang[] = array(						'field_id'		=> $field_id,						'lang_id'		=> $lang_id,						'lang_name'		=> $cp->vars['l_lang_name'][$lang_id],						'lang_explain'	=> (isset($cp->vars['l_lang_explain'][$lang_id])) ? $cp->vars['l_lang_explain'][$lang_id] : '',						'lang_default_value'	=> (isset($cp->vars['l_lang_default_value'][$lang_id])) ? $cp->vars['l_lang_default_value'][$lang_id] : ''					);				}			}			foreach ($empty_lang as $lang_id => $NULL)			{				$sql = 'DELETE FROM ' . PROFILE_LANG_TABLE . "					WHERE field_id = $field_id					AND lang_id = " . (int) $lang_id;				$db->sql_query($sql);			}		}		// These are always arrays because the key is the language id...		$cp->vars['l_lang_name']			= utf8_normalize_nfc(request_var('l_lang_name', array(0 => ''), true));		$cp->vars['l_lang_explain']			= utf8_normalize_nfc(request_var('l_lang_explain', array(0 => ''), true));		$cp->vars['l_lang_default_value']	= utf8_normalize_nfc(request_var('l_lang_default_value', array(0 => ''), true));		if ($field_type != FIELD_BOOL)		{			$cp->vars['l_lang_options']			= utf8_normalize_nfc(request_var('l_lang_options', array(0 => ''), true));		}		else		{			/**			* @todo check if this line is correct...			$cp->vars['l_lang_default_value']	= request_var('l_lang_default_value', array(0 => array('')), true);			*/			$cp->vars['l_lang_options']	= utf8_normalize_nfc(request_var('l_lang_options', array(0 => array('')), true));		}		if ($cp->vars['lang_options'])		{			if (!is_array($cp->vars['lang_options']))			{				$cp->vars['lang_options'] = explode("\n", $cp->vars['lang_options']);			}			if ($action != 'create')			{				$sql = 'DELETE FROM ' . PROFILE_FIELDS_LANG_TABLE . "					WHERE field_id = $field_id						AND lang_id = " . (int) $default_lang_id;				$db->sql_query($sql);			}			foreach ($cp->vars['lang_options'] as $option_id => $value)			{				$sql_ary = array(					'field_type'	=> (int) $field_type,					'lang_value'	=> $value				);				if ($action == 'create')				{					$sql_ary['field_id'] = $field_id;					$sql_ary['lang_id'] = $default_lang_id;					$sql_ary['option_id'] = (int) $option_id;					$profile_sql[] = 'INSERT INTO ' . PROFILE_FIELDS_LANG_TABLE . ' ' . $db->sql_build_array('INSERT', $sql_ary);				}				else				{					$this->update_insert(PROFILE_FIELDS_LANG_TABLE, $sql_ary, array(						'field_id'	=> $field_id,						'lang_id'	=> (int) $default_lang_id,						'option_id'	=> (int) $option_id)					);				}			}		}		if (is_array($cp->vars['l_lang_options']) && sizeof($cp->vars['l_lang_options']))		{			$empty_lang = array();			foreach ($cp->vars['l_lang_options'] as $lang_id => $lang_ary)			{				if (!is_array($lang_ary))				{					$lang_ary = explode("\n", $lang_ary);				}				if (sizeof($lang_ary) != sizeof($cp->vars['lang_options']))				{					$empty_lang[$lang_id] = true;				}				if (!isset($empty_lang[$lang_id]))				{					if ($action != 'create')					{						$sql = 'DELETE FROM ' . PROFILE_FIELDS_LANG_TABLE . "							WHERE field_id = $field_id							AND lang_id = " . (int) $lang_id;						$db->sql_query($sql);					}					foreach ($lang_ary as $option_id => $value)					{						$profile_lang_fields[] = array(							'field_id'		=> (int) $field_id,							'lang_id'		=> (int) $lang_id,							'option_id'		=> (int) $option_id,							'field_type'	=> (int) $field_type,							'lang_value'	=> $value						);					}				}			}			foreach ($empty_lang as $lang_id => $NULL)			{				$sql = 'DELETE FROM ' . PROFILE_FIELDS_LANG_TABLE . "					WHERE field_id = $field_id					AND lang_id = " . (int) $lang_id;				$db->sql_query($sql);			}		}		foreach ($profile_lang as $sql)		{			if ($action == 'create')			{				$profile_sql[] = 'INSERT INTO ' . PROFILE_LANG_TABLE . ' ' . $db->sql_build_array('INSERT', $sql);			}			else			{				$lang_id = $sql['lang_id'];				unset($sql['lang_id'], $sql['field_id']);				$this->update_insert(PROFILE_LANG_TABLE, $sql, array('lang_id' => (int) $lang_id, 'field_id' => $field_id));			}		}		if (sizeof($profile_lang_fields))		{			foreach ($profile_lang_fields as $sql)			{				if ($action == 'create')				{					$profile_sql[] = 'INSERT INTO ' . PROFILE_FIELDS_LANG_TABLE . ' ' . $db->sql_build_array('INSERT', $sql);				}				else				{					$lang_id = $sql['lang_id'];					$option_id = $sql['option_id'];					unset($sql['lang_id'], $sql['field_id'], $sql['option_id']);					$this->update_insert(PROFILE_FIELDS_LANG_TABLE, $sql, array(						'lang_id'	=> $lang_id,						'field_id'	=> $field_id,						'option_id'	=> $option_id)					);				}			}		}		$db->sql_transaction('begin');		if ($action == 'create')		{			foreach ($profile_sql as $sql)			{				$db->sql_query($sql);			}		}		$db->sql_transaction('commit');		if ($action == 'edit')		{			add_log('admin', 'LOG_PROFILE_FIELD_EDIT', $cp->vars['field_ident'] . ':' . $cp->vars['lang_name']);			trigger_error($user->lang['CHANGED_PROFILE_FIELD'] . adm_back_link($this->u_action));		}		else		{			add_log('admin', 'LOG_PROFILE_FIELD_CREATE', substr($field_ident, 3) . ':' . $cp->vars['lang_name']);			trigger_error($user->lang['ADDED_PROFILE_FIELD'] . adm_back_link($this->u_action));		}	}	/**	* Update, then insert if not successfull	*/	function update_insert($table, $sql_ary, $where_fields)	{		global $db;		$where_sql = array();		$check_key = '';		foreach ($where_fields as $key => $value)		{			$check_key = (!$check_key) ? $key : $check_key;			$where_sql[] = $key . ' = ' . ((is_string($value)) ? "'" . $db->sql_escape($value) . "'" : (int) $value);		}		if (!sizeof($where_sql))		{			return;		}		$sql = "SELECT $check_key			FROM $table			WHERE " . implode(' AND ', $where_sql);		$result = $db->sql_query($sql);		$row = $db->sql_fetchrow($result);		$db->sql_freeresult($result);		if (!$row)		{			$sql_ary = array_merge($where_fields, $sql_ary);			if (sizeof($sql_ary))			{				$db->sql_query("INSERT INTO $table " . $db->sql_build_array('INSERT', $sql_ary));			}		}		else		{			if (sizeof($sql_ary))			{				$sql = "UPDATE $table SET " . $db->sql_build_array('UPDATE', $sql_ary) . '					WHERE ' . implode(' AND ', $where_sql);				$db->sql_query($sql);			}		}	}	/**	* Return sql statement for adding a new field ident (profile field) to the profile fields data table	*/	function add_field_ident($field_ident, $field_type)	{		global $db;		switch ($db->sql_layer)		{			case 'mysql':			case 'mysql4':			case 'mysqli':				// We are defining the biggest common value, because of the possibility to edit the min/max values of each field.				$sql = 'ALTER TABLE ' . PROFILE_FIELDS_DATA_TABLE . " ADD `$field_ident` ";				switch ($field_type)				{					case FIELD_STRING:						$sql .= ' VARCHAR(255) ';					break;					case FIELD_DATE:						$sql .= 'VARCHAR(10) ';					break;					case FIELD_TEXT:						$sql .= "TEXT";		//						ADD {$field_ident}_bbcode_uid VARCHAR(5) NOT NULL,		//						ADD {$field_ident}_bbcode_bitfield INT(11) UNSIGNED";					break;					case FIELD_BOOL:						$sql .= 'TINYINT(2) ';					break;					case FIELD_DROPDOWN:						$sql .= 'MEDIUMINT(8) ';					break;					case FIELD_INT:						$sql .= 'BIGINT(20) ';					break;				}			break;			case 'sqlite':				switch ($field_type)				{					case FIELD_STRING:						$type = ' VARCHAR(255) ';					break;					case FIELD_DATE:						$type = 'VARCHAR(10) ';					break;					case FIELD_TEXT:						$type = "TEXT(65535)";		//						ADD {$field_ident}_bbcode_uid VARCHAR(5) NOT NULL,		//						ADD {$field_ident}_bbcode_bitfield INT(11) UNSIGNED";					break;					case FIELD_BOOL:						$type = 'TINYINT(2) ';					break;					case FIELD_DROPDOWN:						$type = 'MEDIUMINT(8) ';					break;					case FIELD_INT:						$type = 'BIGINT(20) ';					break;				}				// We are defining the biggest common value, because of the possibility to edit the min/max values of each field.				if (version_compare(sqlite_libversion(), '3.0') == -1)				{					$sql = "SELECT sql						FROM sqlite_master						WHERE type = 'table'							AND name = '" . PROFILE_FIELDS_DATA_TABLE . "'						ORDER BY type DESC, name;";					$result = $db->sql_query($sql);					$row = $db->sql_fetchrow($result);					$db->sql_freeresult($result);					// Create a temp table and populate it, destroy the existing one					$db->sql_query(preg_replace('#CREATE\s+TABLE\s+"?' . PROFILE_FIELDS_DATA_TABLE . '"?#i', 'CREATE TEMPORARY TABLE ' . PROFILE_FIELDS_DATA_TABLE . '_temp', $row['sql']));					$db->sql_query('INSERT INTO ' . PROFILE_FIELDS_DATA_TABLE . '_temp SELECT * FROM ' . PROFILE_FIELDS_DATA_TABLE);					$db->sql_query('DROP TABLE ' . PROFILE_FIELDS_DATA_TABLE);					preg_match('#\((.*)\)#s', $row['sql'], $matches);					$new_table_cols = trim($matches[1]);					$old_table_cols = explode(',', $new_table_cols);					$column_list = array();					foreach ($old_table_cols as $declaration)					{						$entities = preg_split('#\s+#', trim($declaration));						if ($entities[0] == 'PRIMARY')						{							continue;						}						$column_list[] = $entities[0];					}					$columns = implode(',', $column_list);					$new_table_cols = $field_ident . ' ' . $type . ',' . $new_table_cols;					// create a new table and fill it up. destroy the temp one					$db->sql_query('CREATE TABLE ' . PROFILE_FIELDS_DATA_TABLE . ' (' . $new_table_cols . ');');					$db->sql_query('INSERT INTO ' . PROFILE_FIELDS_DATA_TABLE . ' (' . $columns . ') SELECT ' . $columns . ' FROM ' . PROFILE_FIELDS_DATA_TABLE . '_temp;');					$db->sql_query('DROP TABLE ' . PROFILE_FIELDS_DATA_TABLE . '_temp');				}				else				{					$sql = 'ALTER TABLE ' . PROFILE_FIELDS_DATA_TABLE . " ADD $field_ident [$type]";				}			break;			case 'mssql':			case 'mssql_odbc':			case 'mssqlnative':				// We are defining the biggest common value, because of the possibility to edit the min/max values of each field.				$sql = 'ALTER TABLE [' . PROFILE_FIELDS_DATA_TABLE . "] ADD [$field_ident] ";				switch ($field_type)				{					case FIELD_STRING:						$sql .= ' [VARCHAR] (255) ';					break;					case FIELD_DATE:						$sql .= '[VARCHAR] (10) ';					break;					case FIELD_TEXT:						$sql .= "[TEXT]";		//						ADD {$field_ident}_bbcode_uid [VARCHAR] (5) NOT NULL,		//						ADD {$field_ident}_bbcode_bitfield [INT] UNSIGNED";					break;					case FIELD_BOOL:					case FIELD_DROPDOWN:						$sql .= '[INT] ';					break;					case FIELD_INT:						$sql .= '[FLOAT] ';					break;				}			break;			case 'postgres':				// We are defining the biggest common value, because of the possibility to edit the min/max values of each field.				$sql = 'ALTER TABLE ' . PROFILE_FIELDS_DATA_TABLE . " ADD COLUMN \"$field_ident\" ";				switch ($field_type)				{					case FIELD_STRING:						$sql .= ' VARCHAR(255) ';					break;					case FIELD_DATE:						$sql .= 'VARCHAR(10) ';					break;					case FIELD_TEXT:						$sql .= "TEXT";		//						ADD {$field_ident}_bbcode_uid VARCHAR(5) NOT NULL,		//						ADD {$field_ident}_bbcode_bitfield INT4 UNSIGNED";					break;					case FIELD_BOOL:						$sql .= 'INT2 ';					break;					case FIELD_DROPDOWN:						$sql .= 'INT4 ';					break;					case FIELD_INT:						$sql .= 'INT8 ';					break;				}			break;			case 'firebird':				// We are defining the biggest common value, because of the possibility to edit the min/max values of each field.				$sql = 'ALTER TABLE ' . PROFILE_FIELDS_DATA_TABLE . ' ADD "' . strtoupper($field_ident) . '" ';				switch ($field_type)				{					case FIELD_STRING:						$sql .= ' VARCHAR(255) ';					break;					case FIELD_DATE:						$sql .= 'VARCHAR(10) ';					break;					case FIELD_TEXT:						$sql .= "BLOB SUB_TYPE TEXT";		//						ADD {$field_ident}_bbcode_uid VARCHAR(5) NOT NULL,		//						ADD {$field_ident}_bbcode_bitfield INTEGER UNSIGNED";					break;					case FIELD_BOOL:					case FIELD_DROPDOWN:						$sql .= 'INTEGER ';					break;					case FIELD_INT:						$sql .= 'DOUBLE PRECISION ';					break;				}			break;			case 'oracle':				// We are defining the biggest common value, because of the possibility to edit the min/max values of each field.				$sql = 'ALTER TABLE ' . PROFILE_FIELDS_DATA_TABLE . " ADD $field_ident ";				switch ($field_type)				{					case FIELD_STRING:						$sql .= ' VARCHAR2(255) ';					break;					case FIELD_DATE:						$sql .= 'VARCHAR2(10) ';					break;					case FIELD_TEXT:						$sql .= "CLOB";		//						ADD {$field_ident}_bbcode_uid VARCHAR2(5) NOT NULL,		//						ADD {$field_ident}_bbcode_bitfield NUMBER(11) UNSIGNED";					break;					case FIELD_BOOL:						$sql .= 'NUMBER(2) ';					break;					case FIELD_DROPDOWN:						$sql .= 'NUMBER(8) ';					break;					case FIELD_INT:						$sql .= 'NUMBER(20) ';					break;				}			break;		}		return $sql;	}}?>
<?php/**** @package dbal* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @ignore*/if (!defined('IN_PHPBB')){	exit;}include_once($phpbb_root_path . 'includes/db/dbal.' . $phpEx);/*** MySQLi Database Abstraction Layer* mysqli-extension has to be compiled with:* MySQL 4.1+ or MySQL 5.0+* @package dbal*/class dbal_mysqli extends dbal{	var $multi_insert = true;	/**	* Connect to server	*/	function sql_connect($sqlserver, $sqluser, $sqlpassword, $database, $port = false, $persistency = false , $new_link = false)	{		// Mysqli extension supports persistent connection since PHP 5.3.0		$this->persistency = (version_compare(PHP_VERSION, '5.3.0', '>=')) ? $persistency : false;		$this->user = $sqluser;		// If persistent connection, set dbhost to localhost when empty and prepend it with 'p:' prefix		$this->server = ($this->persistency) ? 'p:' . (($sqlserver) ? $sqlserver : 'localhost') : $sqlserver;		$this->dbname = $database;		$port = (!$port) ? NULL : $port;		// If port is set and it is not numeric, most likely mysqli socket is set.		// Try to map it to the $socket parameter.		$socket = NULL;		if ($port)		{			if (is_numeric($port))			{				$port = (int) $port;			}			else			{				$socket = $port;				$port = NULL;			}		}		$this->db_connect_id = @mysqli_connect($this->server, $this->user, $sqlpassword, $this->dbname, $port, $socket);		if ($this->db_connect_id && $this->dbname != '')		{			@mysqli_query($this->db_connect_id, "SET NAMES 'utf8'");			// enforce strict mode on databases that support it			if (version_compare($this->sql_server_info(true), '5.0.2', '>='))			{				$result = @mysqli_query($this->db_connect_id, 'SELECT @@session.sql_mode AS sql_mode');				$row = @mysqli_fetch_assoc($result);				@mysqli_free_result($result);				$modes = array_map('trim', explode(',', $row['sql_mode']));				// TRADITIONAL includes STRICT_ALL_TABLES and STRICT_TRANS_TABLES				if (!in_array('TRADITIONAL', $modes))				{					if (!in_array('STRICT_ALL_TABLES', $modes))					{						$modes[] = 'STRICT_ALL_TABLES';					}					if (!in_array('STRICT_TRANS_TABLES', $modes))					{						$modes[] = 'STRICT_TRANS_TABLES';					}				}				$mode = implode(',', $modes);				@mysqli_query($this->db_connect_id, "SET SESSION sql_mode='{$mode}'");			}			return $this->db_connect_id;		}		return $this->sql_error('');	}	/**	* Version information about used database	* @param bool $use_cache If true, it is safe to retrieve the value from the cache	* @return string sql server version	*/	function sql_server_info($raw = false, $use_cache = true)	{		global $cache;		if (!$use_cache || empty($cache) || ($this->sql_server_version = $cache->get('mysqli_version')) === false)		{			$result = @mysqli_query($this->db_connect_id, 'SELECT VERSION() AS version');			$row = @mysqli_fetch_assoc($result);			@mysqli_free_result($result);			$this->sql_server_version = $row['version'];			if (!empty($cache) && $use_cache)			{				$cache->put('mysqli_version', $this->sql_server_version);			}		}		return ($raw) ? $this->sql_server_version : 'MySQL(i) ' . $this->sql_server_version;	}	/**	* SQL Transaction	* @access private	*/	function _sql_transaction($status = 'begin')	{		switch ($status)		{			case 'begin':				return @mysqli_autocommit($this->db_connect_id, false);			break;			case 'commit':				$result = @mysqli_commit($this->db_connect_id);				@mysqli_autocommit($this->db_connect_id, true);				return $result;			break;			case 'rollback':				$result = @mysqli_rollback($this->db_connect_id);				@mysqli_autocommit($this->db_connect_id, true);				return $result;			break;		}		return true;	}	/**	* Base query method	*	* @param	string	$query		Contains the SQL query which shall be executed	* @param	int		$cache_ttl	Either 0 to avoid caching or the time in seconds which the result shall be kept in cache	* @return	mixed				When casted to bool the returned value returns true on success and false on failure	*	* @access	public	*/	function sql_query($query = '', $cache_ttl = 0)	{		if ($query != '')		{			global $cache;			// EXPLAIN only in extra debug mode			if (defined('DEBUG_EXTRA'))			{				$this->sql_report('start', $query);			}			$this->query_result = ($cache_ttl && method_exists($cache, 'sql_load')) ? $cache->sql_load($query) : false;			$this->sql_add_num_queries($this->query_result);			if ($this->query_result === false)			{				if (($this->query_result = @mysqli_query($this->db_connect_id, $query)) === false)				{					$this->sql_error($query);				}				if (defined('DEBUG_EXTRA'))				{					$this->sql_report('stop', $query);				}				if ($cache_ttl && method_exists($cache, 'sql_save'))				{					$cache->sql_save($query, $this->query_result, $cache_ttl);				}			}			else if (defined('DEBUG_EXTRA'))			{				$this->sql_report('fromcache', $query);			}		}		else		{			return false;		}		return $this->query_result;	}	/**	* Build LIMIT query	*/	function _sql_query_limit($query, $total, $offset = 0, $cache_ttl = 0)	{		$this->query_result = false;		// if $total is set to 0 we do not want to limit the number of rows		if ($total == 0)		{			// MySQL 4.1+ no longer supports -1 in limit queries			$total = '18446744073709551615';		}		$query .= "\n LIMIT " . ((!empty($offset)) ? $offset . ', ' . $total : $total);		return $this->sql_query($query, $cache_ttl);	}	/**	* Return number of affected rows	*/	function sql_affectedrows()	{		return ($this->db_connect_id) ? @mysqli_affected_rows($this->db_connect_id) : false;	}	/**	* Fetch current row	*/	function sql_fetchrow($query_id = false)	{		global $cache;		if ($query_id === false)		{			$query_id = $this->query_result;		}		if (!is_object($query_id) && isset($cache->sql_rowset[$query_id]))		{			return $cache->sql_fetchrow($query_id);		}		if ($query_id !== false)		{			$result = @mysqli_fetch_assoc($query_id);			return $result !== null ? $result : false;		}		return false;	}	/**	* Seek to given row number	* rownum is zero-based	*/	function sql_rowseek($rownum, &$query_id)	{		global $cache;		if ($query_id === false)		{			$query_id = $this->query_result;		}		if (!is_object($query_id) && isset($cache->sql_rowset[$query_id]))		{			return $cache->sql_rowseek($rownum, $query_id);		}		return ($query_id !== false) ? @mysqli_data_seek($query_id, $rownum) : false;	}	/**	* Get last inserted id after insert statement	*/	function sql_nextid()	{		return ($this->db_connect_id) ? @mysqli_insert_id($this->db_connect_id) : false;	}	/**	* Free sql result	*/	function sql_freeresult($query_id = false)	{		global $cache;		if ($query_id === false)		{			$query_id = $this->query_result;		}		if (!is_object($query_id) && isset($cache->sql_rowset[$query_id]))		{			return $cache->sql_freeresult($query_id);		}		return @mysqli_free_result($query_id);	}	/**	* Escape string used in sql query	*/	function sql_escape($msg)	{		return @mysqli_real_escape_string($this->db_connect_id, $msg);	}	/**	* Build LIKE expression	* @access private	*/	function _sql_like_expression($expression)	{		return $expression;	}	/**	* Build db-specific query data	* @access private	*/	function _sql_custom_build($stage, $data)	{		switch ($stage)		{			case 'FROM':				$data = '(' . $data . ')';			break;		}		return $data;	}	/**	* return sql error array	* @access private	*/	function _sql_error()	{		if (!$this->db_connect_id)		{			return array(				'message'	=> @mysqli_connect_error(),				'code'		=> @mysqli_connect_errno()			);		}		return array(			'message'	=> @mysqli_error($this->db_connect_id),			'code'		=> @mysqli_errno($this->db_connect_id)		);	}	/**	* Close sql connection	* @access private	*/	function _sql_close()	{		return @mysqli_close($this->db_connect_id);	}	/**	* Build db-specific report	* @access private	*/	function _sql_report($mode, $query = '')	{		static $test_prof;		// current detection method, might just switch to see the existance of INFORMATION_SCHEMA.PROFILING		if ($test_prof === null)		{			$test_prof = false;			if (strpos(mysqli_get_server_info($this->db_connect_id), 'community') !== false)			{				$ver = mysqli_get_server_version($this->db_connect_id);				if ($ver >= 50037 && $ver < 50100)				{					$test_prof = true;				}			}		}		switch ($mode)		{			case 'start':				$explain_query = $query;				if (preg_match('/UPDATE ([a-z0-9_]+).*?WHERE(.*)/s', $query, $m))				{					$explain_query = 'SELECT * FROM ' . $m[1] . ' WHERE ' . $m[2];				}				else if (preg_match('/DELETE FROM ([a-z0-9_]+).*?WHERE(.*)/s', $query, $m))				{					$explain_query = 'SELECT * FROM ' . $m[1] . ' WHERE ' . $m[2];				}				if (preg_match('/^SELECT/', $explain_query))				{					$html_table = false;					// begin profiling					if ($test_prof)					{						@mysqli_query($this->db_connect_id, 'SET profiling = 1;');					}					if ($result = @mysqli_query($this->db_connect_id, "EXPLAIN $explain_query"))					{						while ($row = @mysqli_fetch_assoc($result))						{							$html_table = $this->sql_report('add_select_row', $query, $html_table, $row);						}					}					@mysqli_free_result($result);					if ($html_table)					{						$this->html_hold .= '</table>';					}					if ($test_prof)					{						$html_table = false;						// get the last profile						if ($result = @mysqli_query($this->db_connect_id, 'SHOW PROFILE ALL;'))						{							$this->html_hold .= '<br />';							while ($row = @mysqli_fetch_assoc($result))							{								// make <unknown> HTML safe								if (!empty($row['Source_function']))								{									$row['Source_function'] = str_replace(array('<', '>'), array('&lt;', '&gt;'), $row['Source_function']);								}								// remove unsupported features								foreach ($row as $key => $val)								{									if ($val === null)									{										unset($row[$key]);									}								}								$html_table = $this->sql_report('add_select_row', $query, $html_table, $row);							}						}						@mysqli_free_result($result);						if ($html_table)						{							$this->html_hold .= '</table>';						}						@mysqli_query($this->db_connect_id, 'SET profiling = 0;');					}				}			break;			case 'fromcache':				$endtime = explode(' ', microtime());				$endtime = $endtime[0] + $endtime[1];				$result = @mysqli_query($this->db_connect_id, $query);				while ($void = @mysqli_fetch_assoc($result))				{					// Take the time spent on parsing rows into account				}				@mysqli_free_result($result);				$splittime = explode(' ', microtime());				$splittime = $splittime[0] + $splittime[1];				$this->sql_report('record_fromcache', $query, $endtime, $splittime);			break;		}	}}?>
<?php/**** @package phpBB3* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**/if (php_sapi_name() != 'cli'){	die("This program must be run from the command line.\n");}//// Security message://// This script is potentially dangerous.// Remove or comment the next line (die(".... ) to enable this script.// Do NOT FORGET to either remove this script or disable it after you have used it.//die("Please read the first lines of this script for instructions on how to enable it");set_time_limit(0);define('IN_PHPBB', true);$phpbb_root_path = '../';$phpEx = substr(strrchr(__FILE__, '.'), 1);echo "Checking for required files\n";download('http://www.unicode.org/Public/UNIDATA/CompositionExclusions.txt');download('http://www.unicode.org/Public/UNIDATA/DerivedNormalizationProps.txt');download('http://www.unicode.org/Public/UNIDATA/UnicodeData.txt');echo "\n";require_once($phpbb_root_path . 'includes/utf/utf_normalizer.' . $phpEx);$file_contents = array();/*** Generate some Hangul/Jamo stuff*/echo "\nGenerating Hangul and Jamo tables\n";for ($i = 0; $i < UNICODE_HANGUL_LCOUNT; ++$i){	$utf_char = cp_to_utf(UNICODE_HANGUL_LBASE + $i);	$file_contents['utf_normalizer_common']['utf_jamo_index'][$utf_char] = $i * UNICODE_HANGUL_VCOUNT * UNICODE_HANGUL_TCOUNT + UNICODE_HANGUL_SBASE;	$file_contents['utf_normalizer_common']['utf_jamo_type'][$utf_char] = UNICODE_JAMO_L;}for ($i = 0; $i < UNICODE_HANGUL_VCOUNT; ++$i){	$utf_char = cp_to_utf(UNICODE_HANGUL_VBASE + $i);	$file_contents['utf_normalizer_common']['utf_jamo_index'][$utf_char] = $i * UNICODE_HANGUL_TCOUNT;	$file_contents['utf_normalizer_common']['utf_jamo_type'][$utf_char] = UNICODE_JAMO_V;}for ($i = 0; $i < UNICODE_HANGUL_TCOUNT; ++$i){	$utf_char = cp_to_utf(UNICODE_HANGUL_TBASE + $i);	$file_contents['utf_normalizer_common']['utf_jamo_index'][$utf_char] = $i;	$file_contents['utf_normalizer_common']['utf_jamo_type'][$utf_char] = UNICODE_JAMO_T;}/*** Load the CompositionExclusions table*/echo "Loading CompositionExclusion\n";$fp = fopen('CompositionExclusions.txt', 'rt');$exclude = array();while (!feof($fp)){	$line = fgets($fp, 1024);	if (!strpos(' 0123456789ABCDEFabcdef', $line[0]))	{		continue;	}	$cp = strtok($line, ' ');	if ($pos = strpos($cp, '..'))	{		$start = hexdec(substr($cp, 0, $pos));		$end = hexdec(substr($cp, $pos + 2));		for ($i = $start; $i < $end; ++$i)		{			$exclude[$i] = 1;		}	}	else	{		$exclude[hexdec($cp)] = 1;	}}fclose($fp);/*** Load QuickCheck tables*/echo "Generating QuickCheck tables\n";$fp = fopen('DerivedNormalizationProps.txt', 'rt');while (!feof($fp)){	$line = fgets($fp, 1024);	if (!strpos(' 0123456789ABCDEFabcdef', $line[0]))	{		continue;	}	$p = array_map('trim', explode(';', strtok($line, '#')));	/**	* Capture only NFC_QC, NFKC_QC	*/	if (!preg_match('#^NFK?C_QC$#', $p[1]))	{		continue;	}	if ($pos = strpos($p[0], '..'))	{		$start = hexdec(substr($p[0], 0, $pos));		$end = hexdec(substr($p[0], $pos + 2));	}	else	{		$start = $end = hexdec($p[0]);	}	if ($start >= UTF8_HANGUL_FIRST && $end <= UTF8_HANGUL_LAST)	{		/**		* We do not store Hangul syllables in the array		*/		continue;	}	if ($p[2] == 'M')	{		$val = UNICODE_QC_MAYBE;	}	else	{		$val = UNICODE_QC_NO;	}	if ($p[1] == 'NFKC_QC')	{		$file = 'utf_nfkc_qc';	}	else	{		$file = 'utf_nfc_qc';	}	for ($i = $start; $i <= $end; ++$i)	{		/**		* The vars have the same name as the file: $utf_nfc_qc is in utf_nfc_qc.php		*/		$file_contents[$file][$file][cp_to_utf($i)] = $val;	}}fclose($fp);/*** Do mappings*/echo "Loading Unicode decomposition mappings\n";$fp = fopen($phpbb_root_path . 'develop/UnicodeData.txt', 'rt');$map = array();while (!feof($fp)){	$p = explode(';', fgets($fp, 1024));	$cp = hexdec($p[0]);	if (!empty($p[3]))	{		/**		* Store combining class > 0		*/		$file_contents['utf_normalizer_common']['utf_combining_class'][cp_to_utf($cp)] = (int) $p[3];	}	if (!isset($p[5]) || !preg_match_all('#[0-9A-F]+#', strip_tags($p[5]), $m))	{		continue;	}	if (strpos($p[5], '>'))	{		$map['NFKD'][$cp] = implode(' ', array_map('hexdec', $m[0]));	}	else	{		$map['NFD'][$cp] = $map['NFKD'][$cp] = implode(' ', array_map('hexdec', $m[0]));	}}fclose($fp);/*** Build the canonical composition table*/echo "Generating the Canonical Composition table\n";foreach ($map['NFD'] as $cp => $decomp_seq){	if (!strpos($decomp_seq, ' ') || isset($exclude[$cp]))	{		/**		* Singletons are excluded from canonical composition		*/		continue;	}	$utf_seq = implode('', array_map('cp_to_utf', explode(' ', $decomp_seq)));	if (!isset($file_contents['utf_canonical_comp']['utf_canonical_comp'][$utf_seq]))	{		$file_contents['utf_canonical_comp']['utf_canonical_comp'][$utf_seq] = cp_to_utf($cp);	}}/*** Decompose the NF[K]D mappings recursively and prepare the file contents*/echo "Generating the Canonical and Compatibility Decomposition tables\n\n";foreach ($map as $type => $decomp_map){	foreach ($decomp_map as $cp => $decomp_seq)	{		$decomp_map[$cp] = decompose($decomp_map, $decomp_seq);	}	unset($decomp_seq);	if ($type == 'NFKD')	{		$file = 'utf_compatibility_decomp';		$var = 'utf_compatibility_decomp';	}	else	{		$file = 'utf_canonical_decomp';		$var = 'utf_canonical_decomp';	}	/**	* Generate the corresponding file	*/	foreach ($decomp_map as $cp => $decomp_seq)	{		$file_contents[$file][$var][cp_to_utf($cp)] = implode('', array_map('cp_to_utf', explode(' ', $decomp_seq)));	}}/*** Generate and/or alter the files*/foreach ($file_contents as $file => $contents){	/**	* Generate a new file	*/	echo "Writing to $file.$phpEx\n";	if (!$fp = fopen($phpbb_root_path . 'includes/utf/data/' . $file . '.' . $phpEx, 'wb'))	{		trigger_error('Cannot open ' . $file . ' for write');	}	fwrite($fp, '<?php');	foreach ($contents as $var => $val)	{		fwrite($fp, "\n\$GLOBALS[" . my_var_export($var) . ']=' . my_var_export($val) . ";");	}	fclose($fp);}echo "\n*** UTF-8 normalization tables done\n\n";/*** Now we'll generate the files needed by the search indexer*/echo "Generating search indexer tables\n";$fp = fopen($phpbb_root_path . 'develop/UnicodeData.txt', 'rt');$map = array();while ($line = fgets($fp, 1024)){	/**	* The current line is split, $m[0] hold the codepoint in hexadecimal and	* all other fields numbered as in http://www.unicode.org/Public/UNIDATA/UCD.html#UnicodeData.txt	*/	$m = explode(';', $line);	/**	* @var	integer	$cp			Current char codepoint	* @var	string	$utf_char	UTF-8 representation of current char	*/	$cp = hexdec($m[0]);	$utf_char = cp_to_utf($cp);	/**	* $m[2] holds the "General Category" of the character	* @link http://www.unicode.org/Public/UNIDATA/UCD.html#General_Category_Values	*/	switch ($m[2][0])	{		case 'L':			/**			* We allow all letters and map them to their lowercased counterpart on the fly			*/			$map_to_hex = (isset($m[13][0])) ? $m[13] : $m[0];			if (preg_match('#^LATIN.*(?:LETTER|LIGATURE) ([A-Z]{2}(?![A-Z]))$#', $m[1], $capture))			{				/**				* Special hack for some latin ligatures. Using the name of a character				* is bad practice, but for now it works well enough.				*				* @todo Note that ligatures with combining marks such as U+01E2 are				* not supported at this time				*/				$map[$cp] = strtolower($capture[1]);			}			else if (isset($m[13][0]))			{				/**				* If the letter has a lowercased form, use it				*/				$map[$cp] = hex_to_utf($m[13]);			}			else			{				/**				* In all other cases, map the letter to itself				*/				$map[$cp] = $utf_char;			}			break;		case 'M':			/**			* We allow all marks, they are mapped to themselves			*/			$map[$cp] = $utf_char;			break;		case 'N':			/**			* We allow all numbers, but we map them to their numeric value whenever			* possible. The numeric value (field #8) is in ASCII already			*			* @todo Note that fractions such as U+00BD will be converted to something			* like "1/2", with a slash. However, "1/2" entered in ASCII is converted			* to "1 2". This will have to be fixed.			*/			$map[$cp] = (isset($m[8][0])) ? $m[8] : $utf_char;			break;		default:			/**			* Everything else is ignored, skip to the next line			*/			continue 2;	}}fclose($fp);/*** Add some cheating*/$cheats = array(	'00DF'	=>	'ss',		#	German sharp S	'00C5'	=>	'ae',		#	Capital A with diaeresis	'00E4'	=>	'ae',		#	Small A with diaeresis	'00D6'	=>	'oe',		#	Capital O with diaeresis	'00F6'	=>	'oe',		#	Small O with diaeresis	'00DC'	=>	'ue',		#	Capital U with diaeresis	'00FC'	=>	'ue',		#	Small U with diaeresis);/*** Add our "cheat replacements" to the map*/foreach ($cheats as $hex => $map_to){	$map[hexdec($hex)] = $map_to;}/*** Split the map into smaller blocks*/$file_contents = array();foreach ($map as $cp => $map_to){	$file_contents[$cp >> 11][cp_to_utf($cp)] = $map_to;}unset($map);foreach ($file_contents as $idx => $contents){	echo "Writing to search_indexer_$idx.$phpEx\n";	$fp = fopen($phpbb_root_path . 'includes/utf/data/search_indexer_' . $idx . '.' . $phpEx, 'wb');	fwrite($fp, '<?php return ' . my_var_export($contents) . ';');	fclose($fp);}echo "\n*** Search indexer tables done\n\n";die("\nAll done!\n");//////////////////////////////////////////////////////////////////////////////////                             Internal functions                             ///////////////////////////////////////////////////////////////////////////////////*** Decompose a sequence recusively** @param	array	$decomp_map	Decomposition mapping, passed by reference* @param	string	$decomp_seq	Decomposition sequence as decimal codepoints separated with a space* @return	string				Decomposition sequence, fully decomposed*/function decompose(&$decomp_map, $decomp_seq){	$ret = array();	foreach (explode(' ', $decomp_seq) as $cp)	{		if (isset($decomp_map[$cp]))		{			$ret[] = decompose($decomp_map, $decomp_map[$cp]);		}		else		{			$ret[] = $cp;		}	}	return implode(' ', $ret);}/*** Return a parsable string representation of a variable** This is function is limited to array/strings/integers** @param	mixed	$var		Variable* @return	string				PHP code representing the variable*/function my_var_export($var){	if (is_array($var))	{		$lines = array();		foreach ($var as $k => $v)		{			$lines[] = my_var_export($k) . '=>' . my_var_export($v);		}		return 'array(' . implode(',', $lines) . ')';	}	else if (is_string($var))	{		return "'" . str_replace(array('\\', "'"), array('\\\\', "\\'"), $var) . "'";	}	else	{		return $var;	}}/*** Download a file to the develop/ dir** @param	string	$url		URL of the file to download* @return	void*/function download($url){	global $phpbb_root_path;	if (file_exists($phpbb_root_path . 'develop/' . basename($url)))	{		return;	}	echo 'Downloading from ', $url, ' ';	if (!$fpr = fopen($url, 'rb'))	{		die("Can't download from $url\nPlease download it yourself and put it in the develop/ dir, kthxbai");	}	if (!$fpw = fopen($phpbb_root_path . 'develop/' . basename($url), 'wb'))	{		die("Can't open develop/" . basename($url) . " for output... please check your permissions or something");	}	$i = 0;	$chunk = 32768;	$done = '';	while (!feof($fpr))	{		$i += fwrite($fpw, fread($fpr, $chunk));		echo str_repeat("\x08", strlen($done));		$done = ($i >> 10) . ' KiB';		echo $done;	}	fclose($fpr);	fclose($fpw);	echo "\n";}/*** Convert a codepoint in hexadecimal to a UTF-8 char** @param	string	$hex		Codepoint, in hexadecimal* @return	string				UTF-8 char*/function hex_to_utf($hex){	return cp_to_utf(hexdec($hex));}/*** Return a UTF string formed from a sequence of codepoints in hexadecimal** @param	string	$seq		Sequence of codepoints, separated with a space* @return	string				UTF-8 string*/function hexseq_to_utf($seq){	return implode('', array_map('hex_to_utf', explode(' ', $seq)));}/*** Convert a codepoint to a UTF-8 char** @param	integer	$cp			Unicode codepoint* @return	string				UTF-8 string*/function cp_to_utf($cp){	if ($cp > 0xFFFF)	{		return chr(0xF0 | ($cp >> 18)) . chr(0x80 | (($cp >> 12) & 0x3F)) . chr(0x80 | (($cp >> 6) & 0x3F)) . chr(0x80 | ($cp & 0x3F));	}	else if ($cp > 0x7FF)	{		return chr(0xE0 | ($cp >> 12)) . chr(0x80 | (($cp >> 6) & 0x3F)) . chr(0x80 | ($cp & 0x3F));	}	else if ($cp > 0x7F)	{		return chr(0xC0 | ($cp >> 6)) . chr(0x80 | ($cp & 0x3F));	}	else	{		return chr($cp);	}}
<?php/**** @package dbal* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @ignore*/if (!defined('IN_PHPBB')){	exit;}include_once($phpbb_root_path . 'includes/db/dbal.' . $phpEx);/*** MSSQL Database Abstraction Layer* Minimum Requirement is MSSQL 2000+* @package dbal*/class dbal_mssql extends dbal{	/**	* Connect to server	*/	function sql_connect($sqlserver, $sqluser, $sqlpassword, $database, $port = false, $persistency = false, $new_link = false)	{		$this->persistency = $persistency;		$this->user = $sqluser;		$this->dbname = $database;		$port_delimiter = (defined('PHP_OS') && substr(PHP_OS, 0, 3) === 'WIN') ? ',' : ':';		$this->server = $sqlserver . (($port) ? $port_delimiter . $port : '');		@ini_set('mssql.charset', 'UTF-8');		@ini_set('mssql.textlimit', 2147483647);		@ini_set('mssql.textsize', 2147483647);		if (version_compare(PHP_VERSION, '5.1.0', '>=') || (version_compare(PHP_VERSION, '5.0.0-dev', '<=') && version_compare(PHP_VERSION, '4.4.1', '>=')))		{			$this->db_connect_id = ($this->persistency) ? @mssql_pconnect($this->server, $this->user, $sqlpassword, $new_link) : @mssql_connect($this->server, $this->user, $sqlpassword, $new_link);		}		else		{			$this->db_connect_id = ($this->persistency) ? @mssql_pconnect($this->server, $this->user, $sqlpassword) : @mssql_connect($this->server, $this->user, $sqlpassword);		}		if ($this->db_connect_id && $this->dbname != '')		{			if (!@mssql_select_db($this->dbname, $this->db_connect_id))			{				@mssql_close($this->db_connect_id);				return false;			}		}		return ($this->db_connect_id) ? $this->db_connect_id : $this->sql_error('');	}	/**	* Version information about used database	* @param bool $raw if true, only return the fetched sql_server_version	* @param bool $use_cache If true, it is safe to retrieve the value from the cache	* @return string sql server version	*/	function sql_server_info($raw = false, $use_cache = true)	{		global $cache;		if (!$use_cache || empty($cache) || ($this->sql_server_version = $cache->get('mssql_version')) === false)		{			$result_id = @mssql_query("SELECT SERVERPROPERTY('productversion'), SERVERPROPERTY('productlevel'), SERVERPROPERTY('edition')", $this->db_connect_id);			$row = false;			if ($result_id)			{				$row = @mssql_fetch_assoc($result_id);				@mssql_free_result($result_id);			}			$this->sql_server_version = ($row) ? trim(implode(' ', $row)) : 0;			if (!empty($cache) && $use_cache)			{				$cache->put('mssql_version', $this->sql_server_version);			}		}		if ($raw)		{			return $this->sql_server_version;		}		return ($this->sql_server_version) ? 'MSSQL<br />' . $this->sql_server_version : 'MSSQL';	}	/**	* SQL Transaction	* @access private	*/	function _sql_transaction($status = 'begin')	{		switch ($status)		{			case 'begin':				return @mssql_query('BEGIN TRANSACTION', $this->db_connect_id);			break;			case 'commit':				return @mssql_query('COMMIT TRANSACTION', $this->db_connect_id);			break;			case 'rollback':				return @mssql_query('ROLLBACK TRANSACTION', $this->db_connect_id);			break;		}		return true;	}	/**	* Base query method	*	* @param	string	$query		Contains the SQL query which shall be executed	* @param	int		$cache_ttl	Either 0 to avoid caching or the time in seconds which the result shall be kept in cache	* @return	mixed				When casted to bool the returned value returns true on success and false on failure	*	* @access	public	*/	function sql_query($query = '', $cache_ttl = 0)	{		if ($query != '')		{			global $cache;			// EXPLAIN only in extra debug mode			if (defined('DEBUG_EXTRA'))			{				$this->sql_report('start', $query);			}			$this->query_result = ($cache_ttl && method_exists($cache, 'sql_load')) ? $cache->sql_load($query) : false;			$this->sql_add_num_queries($this->query_result);			if ($this->query_result === false)			{				if (($this->query_result = @mssql_query($query, $this->db_connect_id)) === false)				{					$this->sql_error($query);				}				if (defined('DEBUG_EXTRA'))				{					$this->sql_report('stop', $query);				}				if ($cache_ttl && method_exists($cache, 'sql_save'))				{					$this->open_queries[(int) $this->query_result] = $this->query_result;					$cache->sql_save($query, $this->query_result, $cache_ttl);				}				else if (strpos($query, 'SELECT') === 0 && $this->query_result)				{					$this->open_queries[(int) $this->query_result] = $this->query_result;				}			}			else if (defined('DEBUG_EXTRA'))			{				$this->sql_report('fromcache', $query);			}		}		else		{			return false;		}		return $this->query_result;	}	/**	* Build LIMIT query	*/	function _sql_query_limit($query, $total, $offset = 0, $cache_ttl = 0)	{		$this->query_result = false;		// Since TOP is only returning a set number of rows we won't need it if total is set to 0 (return all rows)		if ($total)		{			// We need to grab the total number of rows + the offset number of rows to get the correct result			if (strpos($query, 'SELECT DISTINCT') === 0)			{				$query = 'SELECT DISTINCT TOP ' . ($total + $offset) . ' ' . substr($query, 15);			}			else			{				$query = 'SELECT TOP ' . ($total + $offset) . ' ' . substr($query, 6);			}		}		$result = $this->sql_query($query, $cache_ttl);		// Seek by $offset rows		if ($offset)		{			$this->sql_rowseek($offset, $result);		}		return $result;	}	/**	* Return number of affected rows	*/	function sql_affectedrows()	{		return ($this->db_connect_id) ? @mssql_rows_affected($this->db_connect_id) : false;	}	/**	* Fetch current row	*/	function sql_fetchrow($query_id = false)	{		global $cache;		if ($query_id === false)		{			$query_id = $this->query_result;		}		if (isset($cache->sql_rowset[$query_id]))		{			return $cache->sql_fetchrow($query_id);		}		if ($query_id === false)		{			return false;		}		$row = @mssql_fetch_assoc($query_id);		// I hope i am able to remove this later... hopefully only a PHP or MSSQL bug		if ($row)		{			foreach ($row as $key => $value)			{				$row[$key] = ($value === ' ' || $value === NULL) ? '' : $value;			}		}		return $row;	}	/**	* Seek to given row number	* rownum is zero-based	*/	function sql_rowseek($rownum, &$query_id)	{		global $cache;		if ($query_id === false)		{			$query_id = $this->query_result;		}		if (isset($cache->sql_rowset[$query_id]))		{			return $cache->sql_rowseek($rownum, $query_id);		}		return ($query_id !== false) ? @mssql_data_seek($query_id, $rownum) : false;	}	/**	* Get last inserted id after insert statement	*/	function sql_nextid()	{		$result_id = @mssql_query('SELECT SCOPE_IDENTITY()', $this->db_connect_id);		if ($result_id)		{			if ($row = @mssql_fetch_assoc($result_id))			{				@mssql_free_result($result_id);				return $row['computed'];			}			@mssql_free_result($result_id);		}		return false;	}	/**	* Free sql result	*/	function sql_freeresult($query_id = false)	{		global $cache;		if ($query_id === false)		{			$query_id = $this->query_result;		}		if (isset($cache->sql_rowset[$query_id]))		{			return $cache->sql_freeresult($query_id);		}		if (isset($this->open_queries[$query_id]))		{			unset($this->open_queries[$query_id]);			return @mssql_free_result($query_id);		}		return false;	}	/**	* Escape string used in sql query	*/	function sql_escape($msg)	{		return str_replace(array("'", "\0"), array("''", ''), $msg);	}	/**	* Build LIKE expression	* @access private	*/	function _sql_like_expression($expression)	{		return $expression . " ESCAPE '\\'";	}	/**	* return sql error array	* @access private	*/	function _sql_error()	{		$error = array(			'message'	=> @mssql_get_last_message(),			'code'		=> ''		);		// Get error code number		$result_id = @mssql_query('SELECT @@ERROR as code', $this->db_connect_id);		if ($result_id)		{			$row = @mssql_fetch_assoc($result_id);			$error['code'] = $row['code'];			@mssql_free_result($result_id);		}		// Get full error message if possible		$sql = 'SELECT CAST(description as varchar(255)) as message			FROM master.dbo.sysmessages			WHERE error = ' . $error['code'];		$result_id = @mssql_query($sql);				if ($result_id)		{			$row = @mssql_fetch_assoc($result_id);			if (!empty($row['message']))			{				$error['message'] .= '<br />' . $row['message'];			}			@mssql_free_result($result_id);		}		return $error;	}	/**	* Build db-specific query data	* @access private	*/	function _sql_custom_build($stage, $data)	{		return $data;	}	/**	* Close sql connection	* @access private	*/	function _sql_close()	{		return @mssql_close($this->db_connect_id);	}	/**	* Build db-specific report	* @access private	*/	function _sql_report($mode, $query = '')	{		switch ($mode)		{			case 'start':				$html_table = false;				@mssql_query('SET SHOWPLAN_TEXT ON;', $this->db_connect_id);				if ($result = @mssql_query($query, $this->db_connect_id))				{					@mssql_next_result($result);					while ($row = @mssql_fetch_row($result))					{						$html_table = $this->sql_report('add_select_row', $query, $html_table, $row);					}				}				@mssql_query('SET SHOWPLAN_TEXT OFF;', $this->db_connect_id);				@mssql_free_result($result);				if ($html_table)				{					$this->html_hold .= '</table>';				}			break;			case 'fromcache':				$endtime = explode(' ', microtime());				$endtime = $endtime[0] + $endtime[1];				$result = @mssql_query($query, $this->db_connect_id);				while ($void = @mssql_fetch_assoc($result))				{					// Take the time spent on parsing rows into account				}				@mssql_free_result($result);				$splittime = explode(' ', microtime());				$splittime = $splittime[0] + $splittime[1];				$this->sql_report('record_fromcache', $query, $endtime, $splittime);			break;		}	}}?>
<?php/**** @package search* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @ignore*/if (!defined('IN_PHPBB')){	exit;}/*** @ignore*/include_once($phpbb_root_path . 'includes/search/search.' . $phpEx);/*** fulltext_mysql* Fulltext search for MySQL* @package search*/class fulltext_mysql extends search_backend{	var $stats = array();	var $word_length = array();	var $split_words = array();	var $search_query;	var $common_words = array();	var $pcre_properties = false;	var $mbstring_regex = false;	function fulltext_mysql(&$error)	{		global $config;		$this->word_length = array('min' => $config['fulltext_mysql_min_word_len'], 'max' => $config['fulltext_mysql_max_word_len']);		if (version_compare(PHP_VERSION, '5.1.0', '>=') || (version_compare(PHP_VERSION, '5.0.0-dev', '<=') && version_compare(PHP_VERSION, '4.4.0', '>=')))		{			// While this is the proper range of PHP versions, PHP may not be linked with the bundled PCRE lib and instead with an older version			if (@preg_match('/\p{L}/u', 'a') !== false)			{				$this->pcre_properties = true;			}		}		if (function_exists('mb_ereg'))		{			$this->mbstring_regex = true;			mb_regex_encoding('UTF-8');		}		$error = false;	}	/**	* Checks for correct MySQL version and stores min/max word length in the config	*/	function init()	{		global $db, $user;		if ($db->sql_layer != 'mysql4' && $db->sql_layer != 'mysqli')		{			return $user->lang['FULLTEXT_MYSQL_INCOMPATIBLE_VERSION'];		}		$result = $db->sql_query('SHOW TABLE STATUS LIKE \'' . POSTS_TABLE . '\'');		$info = $db->sql_fetchrow($result);		$db->sql_freeresult($result);		$engine = '';		if (isset($info['Engine']))		{			$engine = $info['Engine'];		}		else if (isset($info['Type']))		{			$engine = $info['Type'];		}		if ($engine != 'MyISAM')		{			return $user->lang['FULLTEXT_MYSQL_NOT_MYISAM'];		}		$sql = 'SHOW VARIABLES			LIKE \'ft\_%\'';		$result = $db->sql_query($sql);		$mysql_info = array();		while ($row = $db->sql_fetchrow($result))		{			$mysql_info[$row['Variable_name']] = $row['Value'];		}		$db->sql_freeresult($result);		set_config('fulltext_mysql_max_word_len', $mysql_info['ft_max_word_len']);		set_config('fulltext_mysql_min_word_len', $mysql_info['ft_min_word_len']);		return false;	}	/**	* Splits keywords entered by a user into an array of words stored in $this->split_words	* Stores the tidied search query in $this->search_query	*	* @param string &$keywords Contains the keyword as entered by the user	* @param string $terms is either 'all' or 'any'	* @return bool false if no valid keywords were found and otherwise true	*/	function split_keywords(&$keywords, $terms)	{		global $config, $user;		if ($terms == 'all')		{			$match		= array('#\sand\s#iu', '#\sor\s#iu', '#\snot\s#iu', '#(^|\s)\+#', '#(^|\s)-#', '#(^|\s)\|#');			$replace	= array(' +', ' |', ' -', ' +', ' -', ' |');			$keywords = preg_replace($match, $replace, $keywords);		}		// Filter out as above		$split_keywords = preg_replace("#[\n\r\t]+#", ' ', trim(htmlspecialchars_decode($keywords)));		// Split words		if ($this->pcre_properties)		{			$split_keywords = preg_replace('#([^\p{L}\p{N}\'*"()])#u', '$1$1', str_replace('\'\'', '\' \'', trim($split_keywords)));		}		else if ($this->mbstring_regex)		{			$split_keywords = mb_ereg_replace('([^\w\'*"()])', '\\1\\1', str_replace('\'\'', '\' \'', trim($split_keywords)));		}		else		{			$split_keywords = preg_replace('#([^\w\'*"()])#u', '$1$1', str_replace('\'\'', '\' \'', trim($split_keywords)));		}		if ($this->pcre_properties)		{			$matches = array();			preg_match_all('#(?:[^\p{L}\p{N}*"()]|^)([+\-|]?(?:[\p{L}\p{N}*"()]+\'?)*[\p{L}\p{N}*"()])(?:[^\p{L}\p{N}*"()]|$)#u', $split_keywords, $matches);			$this->split_words = $matches[1];		}		else if ($this->mbstring_regex)		{			mb_ereg_search_init($split_keywords, '(?:[^\w*"()]|^)([+\-|]?(?:[\w*"()]+\'?)*[\w*"()])(?:[^\w*"()]|$)');			while (($word = mb_ereg_search_regs()))			{				$this->split_words[] = $word[1];			}		}		else		{			$matches = array();			preg_match_all('#(?:[^\w*"()]|^)([+\-|]?(?:[\w*"()]+\'?)*[\w*"()])(?:[^\w*"()]|$)#u', $split_keywords, $matches);			$this->split_words = $matches[1];		}		// We limit the number of allowed keywords to minimize load on the database		if ($config['max_num_search_keywords'] && sizeof($this->split_words) > $config['max_num_search_keywords'])		{			trigger_error($user->lang('MAX_NUM_SEARCH_KEYWORDS_REFINE', $config['max_num_search_keywords'], sizeof($this->split_words)));		}		// to allow phrase search, we need to concatenate quoted words		$tmp_split_words = array();		$phrase = '';		foreach ($this->split_words as $word)		{			if ($phrase)			{				$phrase .= ' ' . $word;				if (strpos($word, '"') !== false && substr_count($word, '"') % 2 == 1)				{					$tmp_split_words[] = $phrase;					$phrase = '';				}			}			else if (strpos($word, '"') !== false && substr_count($word, '"') % 2 == 1)			{				$phrase = $word;			}			else			{				$tmp_split_words[] = $word . ' ';			}		}		if ($phrase)		{			$tmp_split_words[] = $phrase;		}		$this->split_words = $tmp_split_words;		unset($tmp_split_words);		unset($phrase);		foreach ($this->split_words as $i => $word)		{			$clean_word = preg_replace('#^[+\-|"]#', '', $word);			// check word length			$clean_len = utf8_strlen(str_replace('*', '', $clean_word));			if (($clean_len < $config['fulltext_mysql_min_word_len']) || ($clean_len > $config['fulltext_mysql_max_word_len']))			{				$this->common_words[] = $word;				unset($this->split_words[$i]);			}		}		if ($terms == 'any')		{			$this->search_query = '';			foreach ($this->split_words as $word)			{				if ((strpos($word, '+') === 0) || (strpos($word, '-') === 0) || (strpos($word, '|') === 0))				{					$word = substr($word, 1);				}				$this->search_query .= $word . ' ';			}		}		else		{			$this->search_query = '';			foreach ($this->split_words as $word)			{				if ((strpos($word, '+') === 0) || (strpos($word, '-') === 0))				{					$this->search_query .= $word . ' ';				}				else if (strpos($word, '|') === 0)				{					$this->search_query .= substr($word, 1) . ' ';				}				else				{					$this->search_query .= '+' . $word . ' ';				}			}		}		$this->search_query = utf8_htmlspecialchars($this->search_query);		if ($this->search_query)		{			$this->split_words = array_values($this->split_words);			sort($this->split_words);			return true;		}		return false;	}	/**	* Turns text into an array of words	*/	function split_message($text)	{		global $config;		// Split words		if ($this->pcre_properties)		{			$text = preg_replace('#([^\p{L}\p{N}\'*])#u', '$1$1', str_replace('\'\'', '\' \'', trim($text)));		}		else if ($this->mbstring_regex)		{			$text = mb_ereg_replace('([^\w\'*])', '\\1\\1', str_replace('\'\'', '\' \'', trim($text)));		}		else		{			$text = preg_replace('#([^\w\'*])#u', '$1$1', str_replace('\'\'', '\' \'', trim($text)));		}		if ($this->pcre_properties)		{			$matches = array();			preg_match_all('#(?:[^\p{L}\p{N}*]|^)([+\-|]?(?:[\p{L}\p{N}*]+\'?)*[\p{L}\p{N}*])(?:[^\p{L}\p{N}*]|$)#u', $text, $matches);			$text = $matches[1];		}		else if ($this->mbstring_regex)		{			mb_ereg_search_init($text, '(?:[^\w*]|^)([+\-|]?(?:[\w*]+\'?)*[\w*])(?:[^\w*]|$)');			$text = array();			while (($word = mb_ereg_search_regs()))			{				$text[] = $word[1];			}		}		else		{			$matches = array();			preg_match_all('#(?:[^\w*]|^)([+\-|]?(?:[\w*]+\'?)*[\w*])(?:[^\w*]|$)#u', $text, $matches);			$text = $matches[1];		}		// remove too short or too long words		$text = array_values($text);		for ($i = 0, $n = sizeof($text); $i < $n; $i++)		{			$text[$i] = trim($text[$i]);			if (utf8_strlen($text[$i]) < $config['fulltext_mysql_min_word_len'] || utf8_strlen($text[$i]) > $config['fulltext_mysql_max_word_len'])			{				unset($text[$i]);			}		}		return array_values($text);	}	/**	* Performs a search on keywords depending on display specific params. You have to run split_keywords() first.	*	* @param	string		$type				contains either posts or topics depending on what should be searched for	* @param	string		$fields				contains either titleonly (topic titles should be searched), msgonly (only message bodies should be searched), firstpost (only subject and body of the first post should be searched) or all (all post bodies and subjects should be searched)	* @param	string		$terms				is either 'all' (use query as entered, words without prefix should default to "have to be in field") or 'any' (ignore search query parts and just return all posts that contain any of the specified words)	* @param	array		$sort_by_sql		contains SQL code for the ORDER BY part of a query	* @param	string		$sort_key			is the key of $sort_by_sql for the selected sorting	* @param	string		$sort_dir			is either a or d representing ASC and DESC	* @param	string		$sort_days			specifies the maximum amount of days a post may be old	* @param	array		$ex_fid_ary			specifies an array of forum ids which should not be searched	* @param	array		$m_approve_fid_ary	specifies an array of forum ids in which the searcher is allowed to view unapproved posts	* @param	int			$topic_id			is set to 0 or a topic id, if it is not 0 then only posts in this topic should be searched	* @param	array		$author_ary			an array of author ids if the author should be ignored during the search the array is empty	* @param	string		$author_name		specifies the author match, when ANONYMOUS is also a search-match	* @param	array		&$id_ary			passed by reference, to be filled with ids for the page specified by $start and $per_page, should be ordered	* @param	int			$start				indicates the first index of the page	* @param	int			$per_page			number of ids each page is supposed to contain	* @return	boolean|int						total number of results	*	* @access	public	*/	function keyword_search($type, $fields, $terms, $sort_by_sql, $sort_key, $sort_dir, $sort_days, $ex_fid_ary, $m_approve_fid_ary, $topic_id, $author_ary, $author_name, &$id_ary, $start, $per_page)	{		global $config, $db;		// No keywords? No posts.		if (!$this->search_query)		{			return false;		}		// generate a search_key from all the options to identify the results		$search_key = md5(implode('#', array(			implode(', ', $this->split_words),			$type,			$fields,			$terms,			$sort_days,			$sort_key,			$topic_id,			implode(',', $ex_fid_ary),			implode(',', $m_approve_fid_ary),			implode(',', $author_ary)		)));		// try reading the results from cache		$result_count = 0;		if ($this->obtain_ids($search_key, $result_count, $id_ary, $start, $per_page, $sort_dir) == SEARCH_RESULT_IN_CACHE)		{			return $result_count;		}		$id_ary = array();		$join_topic = ($type == 'posts') ? false : true;		// Build sql strings for sorting		$sql_sort = $sort_by_sql[$sort_key] . (($sort_dir == 'a') ? ' ASC' : ' DESC');		$sql_sort_table = $sql_sort_join = '';		switch ($sql_sort[0])		{			case 'u':				$sql_sort_table	= USERS_TABLE . ' u, ';				$sql_sort_join	= ($type == 'posts') ? ' AND u.user_id = p.poster_id ' : ' AND u.user_id = t.topic_poster ';			break;			case 't':				$join_topic = true;			break;			case 'f':				$sql_sort_table	= FORUMS_TABLE . ' f, ';				$sql_sort_join	= ' AND f.forum_id = p.forum_id ';			break;		}		// Build some display specific sql strings		switch ($fields)		{			case 'titleonly':				$sql_match = 'p.post_subject';				$sql_match_where = ' AND p.post_id = t.topic_first_post_id';				$join_topic = true;			break;			case 'msgonly':				$sql_match = 'p.post_text';				$sql_match_where = '';			break;			case 'firstpost':				$sql_match = 'p.post_subject, p.post_text';				$sql_match_where = ' AND p.post_id = t.topic_first_post_id';				$join_topic = true;			break;			default:				$sql_match = 'p.post_subject, p.post_text';				$sql_match_where = '';			break;		}		if (!sizeof($m_approve_fid_ary))		{			$m_approve_fid_sql = ' AND p.post_approved = 1';		}		else if ($m_approve_fid_ary === array(-1))		{			$m_approve_fid_sql = '';		}		else		{			$m_approve_fid_sql = ' AND (p.post_approved = 1 OR ' . $db->sql_in_set('p.forum_id', $m_approve_fid_ary, true) . ')';		}		$sql_select			= (!$result_count) ? 'SQL_CALC_FOUND_ROWS ' : '';		$sql_select			= ($type == 'posts') ? $sql_select . 'p.post_id' : 'DISTINCT ' . $sql_select . 't.topic_id';		$sql_from			= ($join_topic) ? TOPICS_TABLE . ' t, ' : '';		$field				= ($type == 'posts') ? 'post_id' : 'topic_id';		if (sizeof($author_ary) && $author_name)		{			// first one matches post of registered users, second one guests and deleted users			$sql_author = ' AND (' . $db->sql_in_set('p.poster_id', array_diff($author_ary, array(ANONYMOUS)), false, true) . ' OR p.post_username ' . $author_name . ')';		}		else if (sizeof($author_ary))		{			$sql_author = ' AND ' . $db->sql_in_set('p.poster_id', $author_ary);		}		else		{			$sql_author = '';		}		$sql_where_options = $sql_sort_join;		$sql_where_options .= ($topic_id) ? ' AND p.topic_id = ' . $topic_id : '';		$sql_where_options .= ($join_topic) ? ' AND t.topic_id = p.topic_id' : '';		$sql_where_options .= (sizeof($ex_fid_ary)) ? ' AND ' . $db->sql_in_set('p.forum_id', $ex_fid_ary, true) : '';		$sql_where_options .= $m_approve_fid_sql;		$sql_where_options .= $sql_author;		$sql_where_options .= ($sort_days) ? ' AND p.post_time >= ' . (time() - ($sort_days * 86400)) : '';		$sql_where_options .= $sql_match_where;		$sql = "SELECT $sql_select			FROM $sql_from$sql_sort_table" . POSTS_TABLE . " p			WHERE MATCH ($sql_match) AGAINST ('" . $db->sql_escape(htmlspecialchars_decode($this->search_query)) . "' IN BOOLEAN MODE)				$sql_where_options			ORDER BY $sql_sort";		$result = $db->sql_query_limit($sql, $config['search_block_size'], $start);		while ($row = $db->sql_fetchrow($result))		{			$id_ary[] = (int) $row[$field];		}		$db->sql_freeresult($result);		$id_ary = array_unique($id_ary);		if (!sizeof($id_ary))		{			return false;		}		// if the total result count is not cached yet, retrieve it from the db		if (!$result_count)		{			$sql = 'SELECT FOUND_ROWS() as result_count';			$result = $db->sql_query($sql);			$result_count = (int) $db->sql_fetchfield('result_count');			$db->sql_freeresult($result);			if (!$result_count)			{				return false;			}		}		// store the ids, from start on then delete anything that isn't on the current page because we only need ids for one page		$this->save_ids($search_key, implode(' ', $this->split_words), $author_ary, $result_count, $id_ary, $start, $sort_dir);		$id_ary = array_slice($id_ary, 0, (int) $per_page);		return $result_count;	}	/**	* Performs a search on an author's posts without caring about message contents. Depends on display specific params	*	* @param	string		$type				contains either posts or topics depending on what should be searched for	* @param	boolean		$firstpost_only		if true, only topic starting posts will be considered	* @param	array		$sort_by_sql		contains SQL code for the ORDER BY part of a query	* @param	string		$sort_key			is the key of $sort_by_sql for the selected sorting	* @param	string		$sort_dir			is either a or d representing ASC and DESC	* @param	string		$sort_days			specifies the maximum amount of days a post may be old	* @param	array		$ex_fid_ary			specifies an array of forum ids which should not be searched	* @param	array		$m_approve_fid_ary	specifies an array of forum ids in which the searcher is allowed to view unapproved posts	* @param	int			$topic_id			is set to 0 or a topic id, if it is not 0 then only posts in this topic should be searched	* @param	array		$author_ary			an array of author ids	* @param	string		$author_name		specifies the author match, when ANONYMOUS is also a search-match	* @param	array		&$id_ary			passed by reference, to be filled with ids for the page specified by $start and $per_page, should be ordered	* @param	int			$start				indicates the first index of the page	* @param	int			$per_page			number of ids each page is supposed to contain	* @return	boolean|int						total number of results	*	* @access	public	*/	function author_search($type, $firstpost_only, $sort_by_sql, $sort_key, $sort_dir, $sort_days, $ex_fid_ary, $m_approve_fid_ary, $topic_id, $author_ary, $author_name, &$id_ary, $start, $per_page)	{		global $config, $db;		// No author? No posts.		if (!sizeof($author_ary))		{			return 0;		}		// generate a search_key from all the options to identify the results		$search_key = md5(implode('#', array(			'',			$type,			($firstpost_only) ? 'firstpost' : '',			'',			'',			$sort_days,			$sort_key,			$topic_id,			implode(',', $ex_fid_ary),			implode(',', $m_approve_fid_ary),			implode(',', $author_ary),			$author_name,		)));		// try reading the results from cache		$result_count = 0;		if ($this->obtain_ids($search_key, $result_count, $id_ary, $start, $per_page, $sort_dir) == SEARCH_RESULT_IN_CACHE)		{			return $result_count;		}		$id_ary = array();		// Create some display specific sql strings		if ($author_name)		{			// first one matches post of registered users, second one guests and deleted users			$sql_author = '(' . $db->sql_in_set('p.poster_id', array_diff($author_ary, array(ANONYMOUS)), false, true) . ' OR p.post_username ' . $author_name . ')';		}		else		{			$sql_author = $db->sql_in_set('p.poster_id', $author_ary);		}		$sql_fora		= (sizeof($ex_fid_ary)) ? ' AND ' . $db->sql_in_set('p.forum_id', $ex_fid_ary, true) : '';		$sql_topic_id	= ($topic_id) ? ' AND p.topic_id = ' . (int) $topic_id : '';		$sql_time		= ($sort_days) ? ' AND p.post_time >= ' . (time() - ($sort_days * 86400)) : '';		$sql_firstpost = ($firstpost_only) ? ' AND p.post_id = t.topic_first_post_id' : '';		// Build sql strings for sorting		$sql_sort = $sort_by_sql[$sort_key] . (($sort_dir == 'a') ? ' ASC' : ' DESC');		$sql_sort_table = $sql_sort_join = '';		switch ($sql_sort[0])		{			case 'u':				$sql_sort_table	= USERS_TABLE . ' u, ';				$sql_sort_join	= ($type == 'posts') ? ' AND u.user_id = p.poster_id ' : ' AND u.user_id = t.topic_poster ';			break;			case 't':				$sql_sort_table	= ($type == 'posts' && !$firstpost_only) ? TOPICS_TABLE . ' t, ' : '';				$sql_sort_join	= ($type == 'posts' && !$firstpost_only) ? ' AND t.topic_id = p.topic_id ' : '';			break;			case 'f':				$sql_sort_table	= FORUMS_TABLE . ' f, ';				$sql_sort_join	= ' AND f.forum_id = p.forum_id ';			break;		}		if (!sizeof($m_approve_fid_ary))		{			$m_approve_fid_sql = ' AND p.post_approved = 1';		}		else if ($m_approve_fid_ary == array(-1))		{			$m_approve_fid_sql = '';		}		else		{			$m_approve_fid_sql = ' AND (p.post_approved = 1 OR ' . $db->sql_in_set('p.forum_id', $m_approve_fid_ary, true) . ')';		}		// If the cache was completely empty count the results		$calc_results = ($result_count) ? '' : 'SQL_CALC_FOUND_ROWS ';		// Build the query for really selecting the post_ids		if ($type == 'posts')		{			$sql = "SELECT {$calc_results}p.post_id				FROM " . $sql_sort_table . POSTS_TABLE . ' p' . (($firstpost_only) ? ', ' . TOPICS_TABLE . ' t ' : ' ') . "				WHERE $sql_author					$sql_topic_id					$sql_firstpost					$m_approve_fid_sql					$sql_fora					$sql_sort_join					$sql_time				ORDER BY $sql_sort";			$field = 'post_id';		}		else		{			$sql = "SELECT {$calc_results}t.topic_id				FROM " . $sql_sort_table . TOPICS_TABLE . ' t, ' . POSTS_TABLE . " p				WHERE $sql_author					$sql_topic_id					$sql_firstpost					$m_approve_fid_sql					$sql_fora					AND t.topic_id = p.topic_id					$sql_sort_join					$sql_time				GROUP BY t.topic_id				ORDER BY $sql_sort";			$field = 'topic_id';		}		// Only read one block of posts from the db and then cache it		$result = $db->sql_query_limit($sql, $config['search_block_size'], $start);		while ($row = $db->sql_fetchrow($result))		{			$id_ary[] = (int) $row[$field];		}		$db->sql_freeresult($result);		// retrieve the total result count if needed		if (!$result_count)		{			$sql = 'SELECT FOUND_ROWS() as result_count';			$result = $db->sql_query($sql);			$result_count = (int) $db->sql_fetchfield('result_count');			$db->sql_freeresult($result);			if (!$result_count)			{				return false;			}		}		if (sizeof($id_ary))		{			$this->save_ids($search_key, '', $author_ary, $result_count, $id_ary, $start, $sort_dir);			$id_ary = array_slice($id_ary, 0, $per_page);			return $result_count;		}		return false;	}	/**	* Destroys cached search results, that contained one of the new words in a post so the results won't be outdated.	*	* @param string $mode contains the post mode: edit, post, reply, quote ...	*/	function index($mode, $post_id, &$message, &$subject, $poster_id, $forum_id)	{		global $db;		// Split old and new post/subject to obtain array of words		$split_text = $this->split_message($message);		$split_title = ($subject) ? $this->split_message($subject) : array();		$words = array_unique(array_merge($split_text, $split_title));		unset($split_text);		unset($split_title);		// destroy cached search results containing any of the words removed or added		$this->destroy_cache($words, array($poster_id));		unset($words);	}	/**	* Destroy cached results, that might be outdated after deleting a post	*/	function index_remove($post_ids, $author_ids, $forum_ids)	{		$this->destroy_cache(array(), $author_ids);	}	/**	* Destroy old cache entries	*/	function tidy()	{		global $db, $config;		// destroy too old cached search results		$this->destroy_cache(array());		set_config('search_last_gc', time(), true);	}	/**	* Create fulltext index	*/	function create_index($acp_module, $u_action)	{		global $db;		// Make sure we can actually use MySQL with fulltext indexes		if ($error = $this->init())		{			return $error;		}		if (empty($this->stats))		{			$this->get_stats();		}		$alter = array();		if (!isset($this->stats['post_subject']))		{			if ($db->sql_layer == 'mysqli' || version_compare($db->sql_server_info(true), '4.1.3', '>='))			{				//$alter[] = 'MODIFY post_subject varchar(100) COLLATE utf8_unicode_ci DEFAULT \'\' NOT NULL';			}			else			{				$alter[] = 'MODIFY post_subject text NOT NULL';			}			$alter[] = 'ADD FULLTEXT (post_subject)';		}		if (!isset($this->stats['post_text']))		{			if ($db->sql_layer == 'mysqli' || version_compare($db->sql_server_info(true), '4.1.3', '>='))			{				$alter[] = 'MODIFY post_text mediumtext COLLATE utf8_unicode_ci NOT NULL';			}			else			{				$alter[] = 'MODIFY post_text mediumtext NOT NULL';			}			$alter[] = 'ADD FULLTEXT (post_text)';		}		if (!isset($this->stats['post_content']))		{			$alter[] = 'ADD FULLTEXT post_content (post_subject, post_text)';		}		if (sizeof($alter))		{			$db->sql_query('ALTER TABLE ' . POSTS_TABLE . ' ' . implode(', ', $alter));		}		$db->sql_query('TRUNCATE TABLE ' . SEARCH_RESULTS_TABLE);		return false;	}	/**	* Drop fulltext index	*/	function delete_index($acp_module, $u_action)	{		global $db;		// Make sure we can actually use MySQL with fulltext indexes		if ($error = $this->init())		{			return $error;		}		if (empty($this->stats))		{			$this->get_stats();		}		$alter = array();		if (isset($this->stats['post_subject']))		{			$alter[] = 'DROP INDEX post_subject';		}		if (isset($this->stats['post_text']))		{			$alter[] = 'DROP INDEX post_text';		}		if (isset($this->stats['post_content']))		{			$alter[] = 'DROP INDEX post_content';		}		if (sizeof($alter))		{			$db->sql_query('ALTER TABLE ' . POSTS_TABLE . ' ' . implode(', ', $alter));		}		$db->sql_query('TRUNCATE TABLE ' . SEARCH_RESULTS_TABLE);		return false;	}	/**	* Returns true if both FULLTEXT indexes exist	*/	function index_created()	{		if (empty($this->stats))		{			$this->get_stats();		}		return (isset($this->stats['post_text']) && isset($this->stats['post_subject']) && isset($this->stats['post_content'])) ? true : false;	}	/**	* Returns an associative array containing information about the indexes	*/	function index_stats()	{		global $user;		if (empty($this->stats))		{			$this->get_stats();		}		return array(			$user->lang['FULLTEXT_MYSQL_TOTAL_POSTS']			=> ($this->index_created()) ? $this->stats['total_posts'] : 0,		);	}	function get_stats()	{		global $db;		if (strpos($db->sql_layer, 'mysql') === false)		{			$this->stats = array();			return;		}		$sql = 'SHOW INDEX			FROM ' . POSTS_TABLE;		$result = $db->sql_query($sql);		while ($row = $db->sql_fetchrow($result))		{			// deal with older MySQL versions which didn't use Index_type			$index_type = (isset($row['Index_type'])) ? $row['Index_type'] : $row['Comment'];			if ($index_type == 'FULLTEXT')			{				if ($row['Key_name'] == 'post_text')				{					$this->stats['post_text'] = $row;				}				else if ($row['Key_name'] == 'post_subject')				{					$this->stats['post_subject'] = $row;				}				else if ($row['Key_name'] == 'post_content')				{					$this->stats['post_content'] = $row;				}			}		}		$db->sql_freeresult($result);		$sql = 'SELECT COUNT(post_id) as total_posts			FROM ' . POSTS_TABLE;		$result = $db->sql_query($sql);		$this->stats['total_posts'] = (int) $db->sql_fetchfield('total_posts');		$db->sql_freeresult($result);	}	/**	* Display a note, that UTF-8 support is not available with certain versions of PHP	*/	function acp()	{		global $user, $config;		$tpl = '		<dl>			<dt><label>' . $user->lang['FULLTEXT_MYSQL_PCRE'] . '</label><br /><span>' . $user->lang['FULLTEXT_MYSQL_PCRE_EXPLAIN'] . '</span></dt>			<dd>' . (($this->pcre_properties) ? $user->lang['YES'] : $user->lang['NO']) . ' (PHP ' . PHP_VERSION . ')</dd>		</dl>		<dl>			<dt><label>' . $user->lang['FULLTEXT_MYSQL_MBSTRING'] . '</label><br /><span>' . $user->lang['FULLTEXT_MYSQL_MBSTRING_EXPLAIN'] . '</span></dt>			<dd>' . (($this->mbstring_regex) ? $user->lang['YES'] : $user->lang['NO']). '</dd>		</dl>		<dl>			<dt><label>' . $user->lang['MIN_SEARCH_CHARS'] . ':</label><br /><span>' . $user->lang['FULLTEXT_MYSQL_MIN_SEARCH_CHARS_EXPLAIN'] . '</span></dt>			<dd>' . $config['fulltext_mysql_min_word_len'] . '</dd>		</dl>		<dl>			<dt><label>' . $user->lang['MAX_SEARCH_CHARS'] . ':</label><br /><span>' . $user->lang['FULLTEXT_MYSQL_MAX_SEARCH_CHARS_EXPLAIN'] . '</span></dt>			<dd>' . $config['fulltext_mysql_max_word_len'] . '</dd>		</dl>		';		// These are fields required in the config table		return array(			'tpl'		=> $tpl,			'config'	=> array()		);	}}?>
<?php/**** @package acp* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//***/define('IN_PHPBB', true);define('ADMIN_START', true);define('NEED_SID', true);// Include files$phpbb_root_path = (defined('PHPBB_ROOT_PATH')) ? PHPBB_ROOT_PATH : './../';$phpEx = substr(strrchr(__FILE__, '.'), 1);require($phpbb_root_path . 'common.' . $phpEx);require($phpbb_root_path . 'includes/functions_admin.' . $phpEx);require($phpbb_root_path . 'includes/functions_module.' . $phpEx);// Start session management$user->session_begin();$auth->acl($user->data);$user->setup('acp/common');// End session management// Have they authenticated (again) as an admin for this session?if (!isset($user->data['session_admin']) || !$user->data['session_admin']){	login_box('', $user->lang['LOGIN_ADMIN_CONFIRM'], $user->lang['LOGIN_ADMIN_SUCCESS'], true, false);}// Is user any type of admin? No, then stop here, each script needs to// check specific permissions but this is a catchallif (!$auth->acl_get('a_')){	trigger_error('NO_ADMIN');}// We define the admin variables now, because the user is now able to use the admin related features...define('IN_ADMIN', true);$phpbb_admin_path = (defined('PHPBB_ADMIN_PATH')) ? PHPBB_ADMIN_PATH : './';// Some oft used variables$safe_mode		= (@ini_get('safe_mode') == '1' || strtolower(@ini_get('safe_mode')) === 'on') ? true : false;$file_uploads	= (@ini_get('file_uploads') == '1' || strtolower(@ini_get('file_uploads')) === 'on') ? true : false;$module_id		= request_var('i', '');$mode			= request_var('mode', '');// Set custom template for admin area$template->set_custom_template($phpbb_admin_path . 'style', 'admin');$template->assign_var('T_TEMPLATE_PATH', $phpbb_admin_path . 'style');// the acp template is never stored in the database$user->theme['template_storedb'] = false;// Instantiate new module$module = new p_master();// Instantiate module system and generate list of available modules$module->list_modules('acp');// Select the active module$module->set_active($module_id, $mode);// Assign data to the template engine for the list of modules// We do this before loading the active module for correct menu display in trigger_error$module->assign_tpl_vars(append_sid("{$phpbb_admin_path}index.$phpEx"));// Load and execute the relevant module$module->load_active();// Generate the pageadm_page_header($module->get_page_title());$template->set_filenames(array(	'body' => $module->get_tpl_name(),));adm_page_footer();/*** Header for acp pages*/function adm_page_header($page_title){	global $config, $db, $user, $template;	global $phpbb_root_path, $phpbb_admin_path, $phpEx, $SID, $_SID;	if (defined('HEADER_INC'))	{		return;	}	define('HEADER_INC', true);	// gzip_compression	if ($config['gzip_compress'])	{		if (@extension_loaded('zlib') && !headers_sent())		{			ob_start('ob_gzhandler');		}	}	$template->assign_vars(array(		'PAGE_TITLE'			=> $page_title,		'USERNAME'				=> $user->data['username'],		'SID'					=> $SID,		'_SID'					=> $_SID,		'SESSION_ID'			=> $user->session_id,		'ROOT_PATH'				=> $phpbb_admin_path,		'U_LOGOUT'				=> append_sid("{$phpbb_root_path}ucp.$phpEx", 'mode=logout'),		'U_ADM_LOGOUT'			=> append_sid("{$phpbb_admin_path}index.$phpEx", 'action=admlogout'),		'U_ADM_INDEX'			=> append_sid("{$phpbb_admin_path}index.$phpEx"),		'U_INDEX'				=> append_sid("{$phpbb_root_path}index.$phpEx"),		'T_IMAGES_PATH'			=> "{$phpbb_root_path}images/",		'T_SMILIES_PATH'		=> "{$phpbb_root_path}{$config['smilies_path']}/",		'T_AVATAR_PATH'			=> "{$phpbb_root_path}{$config['avatar_path']}/",		'T_AVATAR_GALLERY_PATH'	=> "{$phpbb_root_path}{$config['avatar_gallery_path']}/",		'T_ICONS_PATH'			=> "{$phpbb_root_path}{$config['icons_path']}/",		'T_RANKS_PATH'			=> "{$phpbb_root_path}{$config['ranks_path']}/",		'T_UPLOAD_PATH'			=> "{$phpbb_root_path}{$config['upload_path']}/",		'ICON_MOVE_UP'				=> '<img src="' . $phpbb_admin_path . 'images/icon_up.gif" alt="' . $user->lang['MOVE_UP'] . '" title="' . $user->lang['MOVE_UP'] . '" />',		'ICON_MOVE_UP_DISABLED'		=> '<img src="' . $phpbb_admin_path . 'images/icon_up_disabled.gif" alt="' . $user->lang['MOVE_UP'] . '" title="' . $user->lang['MOVE_UP'] . '" />',		'ICON_MOVE_DOWN'			=> '<img src="' . $phpbb_admin_path . 'images/icon_down.gif" alt="' . $user->lang['MOVE_DOWN'] . '" title="' . $user->lang['MOVE_DOWN'] . '" />',		'ICON_MOVE_DOWN_DISABLED'	=> '<img src="' . $phpbb_admin_path . 'images/icon_down_disabled.gif" alt="' . $user->lang['MOVE_DOWN'] . '" title="' . $user->lang['MOVE_DOWN'] . '" />',		'ICON_EDIT'					=> '<img src="' . $phpbb_admin_path . 'images/icon_edit.gif" alt="' . $user->lang['EDIT'] . '" title="' . $user->lang['EDIT'] . '" />',		'ICON_EDIT_DISABLED'		=> '<img src="' . $phpbb_admin_path . 'images/icon_edit_disabled.gif" alt="' . $user->lang['EDIT'] . '" title="' . $user->lang['EDIT'] . '" />',		'ICON_DELETE'				=> '<img src="' . $phpbb_admin_path . 'images/icon_delete.gif" alt="' . $user->lang['DELETE'] . '" title="' . $user->lang['DELETE'] . '" />',		'ICON_DELETE_DISABLED'		=> '<img src="' . $phpbb_admin_path . 'images/icon_delete_disabled.gif" alt="' . $user->lang['DELETE'] . '" title="' . $user->lang['DELETE'] . '" />',		'ICON_SYNC'					=> '<img src="' . $phpbb_admin_path . 'images/icon_sync.gif" alt="' . $user->lang['RESYNC'] . '" title="' . $user->lang['RESYNC'] . '" />',		'ICON_SYNC_DISABLED'		=> '<img src="' . $phpbb_admin_path . 'images/icon_sync_disabled.gif" alt="' . $user->lang['RESYNC'] . '" title="' . $user->lang['RESYNC'] . '" />',		'S_USER_LANG'			=> $user->lang['USER_LANG'],		'S_CONTENT_DIRECTION'	=> $user->lang['DIRECTION'],		'S_CONTENT_ENCODING'	=> 'UTF-8',		'S_CONTENT_FLOW_BEGIN'	=> ($user->lang['DIRECTION'] == 'ltr') ? 'left' : 'right',		'S_CONTENT_FLOW_END'	=> ($user->lang['DIRECTION'] == 'ltr') ? 'right' : 'left',	));	// application/xhtml+xml not used because of IE	header('Content-type: text/html; charset=UTF-8');	header('Cache-Control: private, no-cache="set-cookie"');	header('Expires: 0');	header('Pragma: no-cache');	return;}/*** Page footer for acp pages*/function adm_page_footer($copyright_html = true){	global $db, $config, $template, $user, $auth, $cache;	global $starttime, $phpbb_root_path, $phpbb_admin_path, $phpEx;	// Output page creation time	if (defined('DEBUG'))	{		$mtime = explode(' ', microtime());		$totaltime = $mtime[0] + $mtime[1] - $starttime;		if (!empty($_REQUEST['explain']) && $auth->acl_get('a_') && defined('DEBUG_EXTRA') && method_exists($db, 'sql_report'))		{			$db->sql_report('display');		}		$debug_output = sprintf('Time : %.3fs | ' . $db->sql_num_queries() . ' Queries | GZIP : ' . (($config['gzip_compress']) ? 'On' : 'Off') . (($user->load) ? ' | Load : ' . $user->load : ''), $totaltime);		if ($auth->acl_get('a_') && defined('DEBUG_EXTRA'))		{			if (function_exists('memory_get_usage'))			{				if ($memory_usage = memory_get_usage())				{					global $base_memory_usage;					$memory_usage -= $base_memory_usage;					$memory_usage = get_formatted_filesize($memory_usage);					$debug_output .= ' | Memory Usage: ' . $memory_usage;				}			}			$debug_output .= ' | <a href="' . build_url() . '&amp;explain=1">Explain</a>';		}	}	$template->assign_vars(array(		'DEBUG_OUTPUT'		=> (defined('DEBUG')) ? $debug_output : '',		'TRANSLATION_INFO'	=> (!empty($user->lang['TRANSLATION_INFO'])) ? $user->lang['TRANSLATION_INFO'] : '',		'S_COPYRIGHT_HTML'	=> $copyright_html,		'VERSION'			=> $config['version'])	);	$template->display('body');	garbage_collection();	exit_handler();}/*** Generate back link for acp pages*/function adm_back_link($u_action){	global $user;	return '<br /><br /><a href="' . $u_action . '">&laquo; ' . $user->lang['BACK_TO_PREV'] . '</a>';}/*** Build select field options in acp pages*/function build_select($option_ary, $option_default = false){	global $user;	$html = '';	foreach ($option_ary as $value => $title)	{		$selected = ($option_default !== false && $value == $option_default) ? ' selected="selected"' : '';		$html .= '<option value="' . $value . '"' . $selected . '>' . $user->lang[$title] . '</option>';	}	return $html;}/*** Build radio fields in acp pages*/function h_radio($name, $input_ary, $input_default = false, $id = false, $key = false, $separator = ''){	global $user;	$html = '';	$id_assigned = false;	foreach ($input_ary as $value => $title)	{		$selected = ($input_default !== false && $value == $input_default) ? ' checked="checked"' : '';		$html .= '<label><input type="radio" name="' . $name . '"' . (($id && !$id_assigned) ? ' id="' . $id . '"' : '') . ' value="' . $value . '"' . $selected . (($key) ? ' accesskey="' . $key . '"' : '') . ' class="radio" /> ' . $user->lang[$title] . '</label>' . $separator;		$id_assigned = true;	}	return $html;}/*** Build configuration template for acp configuration pages*/function build_cfg_template($tpl_type, $key, &$new, $config_key, $vars){	global $user, $module;	$tpl = '';	$name = 'config[' . $config_key . ']';	// Make sure there is no notice printed out for non-existent config options (we simply set them)	if (!isset($new[$config_key]))	{		$new[$config_key] = '';	}	switch ($tpl_type[0])	{		case 'text':		case 'password':			$size = (int) $tpl_type[1];			$maxlength = (int) $tpl_type[2];			$tpl = '<input id="' . $key . '" type="' . $tpl_type[0] . '"' . (($size) ? ' size="' . $size . '"' : '') . ' maxlength="' . (($maxlength) ? $maxlength : 255) . '" name="' . $name . '" value="' . $new[$config_key] . '"' . (($tpl_type[0] === 'password') ?  ' autocomplete="off"' : '') . ' />';		break;		case 'dimension':			$size = (int) $tpl_type[1];			$maxlength = (int) $tpl_type[2];			$tpl = '<input id="' . $key . '" type="text"' . (($size) ? ' size="' . $size . '"' : '') . ' maxlength="' . (($maxlength) ? $maxlength : 255) . '" name="config[' . $config_key . '_width]" value="' . $new[$config_key . '_width'] . '" /> x <input type="text"' . (($size) ? ' size="' . $size . '"' : '') . ' maxlength="' . (($maxlength) ? $maxlength : 255) . '" name="config[' . $config_key . '_height]" value="' . $new[$config_key . '_height'] . '" />';		break;		case 'textarea':			$rows = (int) $tpl_type[1];			$cols = (int) $tpl_type[2];			$tpl = '<textarea id="' . $key . '" name="' . $name . '" rows="' . $rows . '" cols="' . $cols . '">' . $new[$config_key] . '</textarea>';		break;		case 'radio':			$key_yes	= ($new[$config_key]) ? ' checked="checked"' : '';			$key_no		= (!$new[$config_key]) ? ' checked="checked"' : '';			$tpl_type_cond = explode('_', $tpl_type[1]);			$type_no = ($tpl_type_cond[0] == 'disabled' || $tpl_type_cond[0] == 'enabled') ? false : true;			$tpl_no = '<label><input type="radio" name="' . $name . '" value="0"' . $key_no . ' class="radio" /> ' . (($type_no) ? $user->lang['NO'] : $user->lang['DISABLED']) . '</label>';			$tpl_yes = '<label><input type="radio" id="' . $key . '" name="' . $name . '" value="1"' . $key_yes . ' class="radio" /> ' . (($type_no) ? $user->lang['YES'] : $user->lang['ENABLED']) . '</label>';			$tpl = ($tpl_type_cond[0] == 'yes' || $tpl_type_cond[0] == 'enabled') ? $tpl_yes . $tpl_no : $tpl_no . $tpl_yes;		break;		case 'select':		case 'custom':			$return = '';			if (isset($vars['method']))			{				$call = array($module->module, $vars['method']);			}			else if (isset($vars['function']))			{				$call = $vars['function'];			}			else			{				break;			}			if (isset($vars['params']))			{				$args = array();				foreach ($vars['params'] as $value)				{					switch ($value)					{						case '{CONFIG_VALUE}':							$value = $new[$config_key];						break;						case '{KEY}':							$value = $key;						break;					}					$args[] = $value;				}			}			else			{				$args = array($new[$config_key], $key);			}			$return = call_user_func_array($call, $args);			if ($tpl_type[0] == 'select')			{				$tpl = '<select id="' . $key . '" name="' . $name . '">' . $return . '</select>';			}			else			{				$tpl = $return;			}		break;		default:		break;	}	if (isset($vars['append']))	{		$tpl .= $vars['append'];	}	return $tpl;}/*** Going through a config array and validate values, writing errors to $error. The validation method  accepts parameters separated by ':' for string and int.* The first parameter defines the type to be used, the second the lower bound and the third the upper bound. Only the type is required.*/function validate_config_vars($config_vars, &$cfg_array, &$error){	global $phpbb_root_path, $user;	$type	= 0;	$min	= 1;	$max	= 2;	foreach ($config_vars as $config_name => $config_definition)	{		if (!isset($cfg_array[$config_name]) || strpos($config_name, 'legend') !== false)		{			continue;		}		if (!isset($config_definition['validate']))		{			continue;		}		$validator = explode(':', $config_definition['validate']);		// Validate a bit. ;) (0 = type, 1 = min, 2= max)		switch ($validator[$type])		{			case 'string':				$length = utf8_strlen($cfg_array[$config_name]);				// the column is a VARCHAR				$validator[$max] = (isset($validator[$max])) ? min(255, $validator[$max]) : 255;				if (isset($validator[$min]) && $length < $validator[$min])				{					$error[] = sprintf($user->lang['SETTING_TOO_SHORT'], $user->lang[$config_definition['lang']], $validator[$min]);				}				else if (isset($validator[$max]) && $length > $validator[2])				{					$error[] = sprintf($user->lang['SETTING_TOO_LONG'], $user->lang[$config_definition['lang']], $validator[$max]);				}			break;			case 'bool':				$cfg_array[$config_name] = ($cfg_array[$config_name]) ? 1 : 0;			break;			case 'int':				$cfg_array[$config_name] = (int) $cfg_array[$config_name];				if (isset($validator[$min]) && $cfg_array[$config_name] < $validator[$min])				{					$error[] = sprintf($user->lang['SETTING_TOO_LOW'], $user->lang[$config_definition['lang']], $validator[$min]);				}				else if (isset($validator[$max]) && $cfg_array[$config_name] > $validator[$max])				{					$error[] = sprintf($user->lang['SETTING_TOO_BIG'], $user->lang[$config_definition['lang']], $validator[$max]);				}				if (strpos($config_name, '_max') !== false)				{					// Min/max pairs of settings should ensure that min <= max					// Replace _max with _min to find the name of the minimum					// corresponding configuration variable					$min_name = str_replace('_max', '_min', $config_name);					if (isset($cfg_array[$min_name]) && is_numeric($cfg_array[$min_name]) && $cfg_array[$config_name] < $cfg_array[$min_name])					{						// A minimum value exists and the maximum value is less than it						$error[] = sprintf($user->lang['SETTING_TOO_LOW'], $user->lang[$config_definition['lang']], (int) $cfg_array[$min_name]);					}				}			break;			// Absolute path			case 'script_path':				if (!$cfg_array[$config_name])				{					break;				}				$destination = str_replace('\\', '/', $cfg_array[$config_name]);				if ($destination !== '/')				{					// Adjust destination path (no trailing slash)					if (substr($destination, -1, 1) == '/')					{						$destination = substr($destination, 0, -1);					}					$destination = str_replace(array('../', './'), '', $destination);					if ($destination[0] != '/')					{						$destination = '/' . $destination;					}				}				$cfg_array[$config_name] = trim($destination);			break;			// Absolute path			case 'lang':				if (!$cfg_array[$config_name])				{					break;				}				$cfg_array[$config_name] = basename($cfg_array[$config_name]);				if (!file_exists($phpbb_root_path . 'language/' . $cfg_array[$config_name] . '/'))				{					$error[] = $user->lang['WRONG_DATA_LANG'];				}			break;			// Relative path (appended $phpbb_root_path)			case 'rpath':			case 'rwpath':				if (!$cfg_array[$config_name])				{					break;				}				$destination = $cfg_array[$config_name];				// Adjust destination path (no trailing slash)				if (substr($destination, -1, 1) == '/' || substr($destination, -1, 1) == '\\')				{					$destination = substr($destination, 0, -1);				}				$destination = str_replace(array('../', '..\\', './', '.\\'), '', $destination);				if ($destination && ($destination[0] == '/' || $destination[0] == "\\"))				{					$destination = '';				}				$cfg_array[$config_name] = trim($destination);			// Path being relative (still prefixed by phpbb_root_path), but with the ability to escape the root dir...			case 'path':			case 'wpath':				if (!$cfg_array[$config_name])				{					break;				}				$cfg_array[$config_name] = trim($cfg_array[$config_name]);				// Make sure no NUL byte is present...				if (strpos($cfg_array[$config_name], "\0") !== false || strpos($cfg_array[$config_name], '%00') !== false)				{					$cfg_array[$config_name] = '';					break;				}				if (!file_exists($phpbb_root_path . $cfg_array[$config_name]))				{					$error[] = sprintf($user->lang['DIRECTORY_DOES_NOT_EXIST'], $cfg_array[$config_name]);				}				if (file_exists($phpbb_root_path . $cfg_array[$config_name]) && !is_dir($phpbb_root_path . $cfg_array[$config_name]))				{					$error[] = sprintf($user->lang['DIRECTORY_NOT_DIR'], $cfg_array[$config_name]);				}				// Check if the path is writable				if ($config_definition['validate'] == 'wpath' || $config_definition['validate'] == 'rwpath')				{					if (file_exists($phpbb_root_path . $cfg_array[$config_name]) && !phpbb_is_writable($phpbb_root_path . $cfg_array[$config_name]))					{						$error[] = sprintf($user->lang['DIRECTORY_NOT_WRITABLE'], $cfg_array[$config_name]);					}				}			break;		}	}	return;}/*** Checks whatever or not a variable is OK for use in the Database* param mixed $value_ary An array of the form array(array('lang' => ..., 'value' => ..., 'column_type' =>))'* param mixed $error The error array*/function validate_range($value_ary, &$error){	global $user;	$column_types = array(		'BOOL'	=> array('php_type' => 'int', 		'min' => 0, 				'max' => 1),		'USINT'	=> array('php_type' => 'int',		'min' => 0, 				'max' => 65535),		'UINT'	=> array('php_type' => 'int', 		'min' => 0, 				'max' => (int) 0x7fffffff),		// Do not use (int) 0x80000000 - it evaluates to different		// values on 32-bit and 64-bit systems.		// Apparently -2147483648 is a float on 32-bit systems,		// despite fitting in an int, thus explicit cast is needed.		'INT'	=> array('php_type' => 'int', 		'min' => (int) -2147483648,	'max' => (int) 0x7fffffff),		'TINT'	=> array('php_type' => 'int',		'min' => -128,				'max' => 127),		'VCHAR'	=> array('php_type' => 'string', 	'min' => 0, 				'max' => 255),	);	foreach ($value_ary as $value)	{		$column = explode(':', $value['column_type']);		$max = $min = 0;		$type = 0;		if (!isset($column_types[$column[0]]))		{			continue;		}		else		{			$type = $column_types[$column[0]];		}		switch ($type['php_type'])		{			case 'string' :				$max = (isset($column[1])) ? min($column[1],$type['max']) : $type['max'];				if (utf8_strlen($value['value']) > $max)				{					$error[] = sprintf($user->lang['SETTING_TOO_LONG'], $user->lang[$value['lang']], $max);				}			break;			case 'int':				$min = (isset($column[1])) ? max($column[1],$type['min']) : $type['min'];				$max = (isset($column[2])) ? min($column[2],$type['max']) : $type['max'];				if ($value['value'] < $min)				{					$error[] = sprintf($user->lang['SETTING_TOO_LOW'], $user->lang[$value['lang']], $min);				}				else if ($value['value'] > $max)				{					$error[] = sprintf($user->lang['SETTING_TOO_BIG'], $user->lang[$value['lang']], $max);				}			break;		}	}}?>
<?php/**** @package phpBB3* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**/if (php_sapi_name() != 'cli'){	die("This program must be run from the command line.\n");}//// Security message://// This script is potentially dangerous.// Remove or comment the next line (die(".... ) to enable this script.// Do NOT FORGET to either remove this script or disable it after you have used it.//die("Please read the first lines of this script for instructions on how to enable it");set_time_limit(0);define('IN_PHPBB', true);$phpbb_root_path = '../';$phpEx = substr(strrchr(__FILE__, '.'), 1);echo "Checking for required files\n";download('http://unicode.org/Public/UNIDATA/CaseFolding.txt');echo "\n";/*** Load the CaseFolding table*/echo "Loading CaseFolding\n";$unidata = file_get_contents('CaseFolding.txt');function utf8_chr($cp){    if ($cp > 0xFFFF)    {        return chr(0xF0 | ($cp >> 18)) . chr(0x80 | (($cp >> 12) & 0x3F)) . chr(0x80 | (($cp >> 6) & 0x3F)) . chr(0x80 | ($cp & 0x3F));    }    else if ($cp > 0x7FF)    {        return chr(0xE0 | ($cp >> 12)) . chr(0x80 | (($cp >> 6) & 0x3F)) . chr(0x80 | ($cp & 0x3F));    }    else if ($cp > 0x7F)    {        return chr(0xC0 | ($cp >> 6)) . chr(0x80 | ($cp & 0x3F));    }    else    {        return chr($cp);    }}preg_match_all('/^([0-9A-F]+); ([CFS]); ([0-9A-F]+(?: [0-9A-F]+)*);/im', $unidata, $array, PREG_SET_ORDER);$uniarray = array();foreach ($array as $value){    $uniarray[$value[2]][utf8_chr(hexdec((string)$value[1]))] = implode(array_map('utf8_chr', array_map('hexdec', explode(' ', $value[3]))));}foreach ($uniarray as $idx => $contents){	echo "Writing to case_fold_$idx.$phpEx\n";	$fp = fopen($phpbb_root_path . 'includes/utf/data/case_fold_' . strtolower($idx) . '.' . $phpEx, 'wb');	fwrite($fp, '<?php return ' . my_var_export($contents) . ';');	fclose($fp);}/*** Return a parsable string representation of a variable** This is function is limited to array/strings/integers** @param	mixed	$var		Variable* @return	string				PHP code representing the variable*/function my_var_export($var){	if (is_array($var))	{		$lines = array();		foreach ($var as $k => $v)		{			$lines[] = my_var_export($k) . '=>' . my_var_export($v);		}		return 'array(' . implode(',', $lines) . ')';	}	else if (is_string($var))	{		return "'" . str_replace(array('\\', "'"), array('\\\\', "\\'"), $var) . "'";	}	else	{		return $var;	}}/*** Download a file to the develop/ dir** @param	string	$url		URL of the file to download* @return	void*/function download($url){	global $phpbb_root_path;	if (file_exists($phpbb_root_path . 'develop/' . basename($url)))	{		return;	}	echo 'Downloading from ', $url, ' ';	if (!$fpr = fopen($url, 'rb'))	{		die("Can't download from $url\nPlease download it yourself and put it in the develop/ dir, kthxbai");	}	if (!$fpw = fopen($phpbb_root_path . 'develop/' . basename($url), 'wb'))	{		die("Can't open develop/" . basename($url) . " for output... please check your permissions or something");	}	$i = 0;	$chunk = 32768;	$done = '';	while (!feof($fpr))	{		$i += fwrite($fpw, fread($fpr, $chunk));		echo str_repeat("\x08", strlen($done));		$done = ($i >> 10) . ' KiB';		echo $done;	}	fclose($fpr);	fclose($fpw);	echo "\n";}?>
<?php/**** acp_common [English]** @package language* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** DO NOT CHANGE*/if (!defined('IN_PHPBB')){	exit;}if (empty($lang) || !is_array($lang)){	$lang = array();}// DEVELOPERS PLEASE NOTE//// All language files should use UTF-8 as their encoding and the files must not contain a BOM.//// Placeholders can now contain order information, e.g. instead of// 'Page %s of %s' you can (and should) write 'Page %1$s of %2$s', this allows// translators to re-order the output of data while ensuring it remains correct//// You do not need this where single placeholders are used, e.g. 'Message %d' is fine// equally where a string contains only two placeholders which are used to wrap text// in a url you again do not need to specify an order e.g., 'Click %sHERE%s' is fine// Common$lang = array_merge($lang, array(	'ACP_ADMINISTRATORS'		=> 'Administrators',	'ACP_ADMIN_LOGS'			=> 'Admin log',	'ACP_ADMIN_ROLES'			=> 'Admin roles',	'ACP_ATTACHMENTS'			=> 'Attachments',	'ACP_ATTACHMENT_SETTINGS'	=> 'Attachment settings',	'ACP_AUTH_SETTINGS'			=> 'Authentication',	'ACP_AUTOMATION'			=> 'Automation',	'ACP_AVATAR_SETTINGS'		=> 'Avatar settings',	'ACP_BACKUP'				=> 'Backup',	'ACP_BAN'					=> 'Banning',	'ACP_BAN_EMAILS'			=> 'Ban e-mails',	'ACP_BAN_IPS'				=> 'Ban IPs',	'ACP_BAN_USERNAMES'			=> 'Ban usernames',	'ACP_BBCODES'				=> 'BBCodes',	'ACP_BOARD_CONFIGURATION'	=> 'Board configuration',	'ACP_BOARD_FEATURES'		=> 'Board features',	'ACP_BOARD_MANAGEMENT'		=> 'Board management',	'ACP_BOARD_SETTINGS'		=> 'Board settings',	'ACP_BOTS'					=> 'Spiders/Robots',	'ACP_CAPTCHA'				=> 'CAPTCHA',	'ACP_CAT_DATABASE'			=> 'Database',	'ACP_CAT_DOT_MODS'			=> '.MODs',	'ACP_CAT_FORUMS'			=> 'Forums',	'ACP_CAT_GENERAL'			=> 'General',	'ACP_CAT_MAINTENANCE'		=> 'Maintenance',	'ACP_CAT_PERMISSIONS'		=> 'Permissions',	'ACP_CAT_POSTING'			=> 'Posting',	'ACP_CAT_STYLES'			=> 'Styles',	'ACP_CAT_SYSTEM'			=> 'System',	'ACP_CAT_USERGROUP'			=> 'Users and Groups',	'ACP_CAT_USERS'				=> 'Users',	'ACP_CLIENT_COMMUNICATION'	=> 'Client communication',	'ACP_COOKIE_SETTINGS'		=> 'Cookie settings',	'ACP_CRITICAL_LOGS'			=> 'Error log',	'ACP_CUSTOM_PROFILE_FIELDS'	=> 'Custom profile fields',	'ACP_DATABASE'				=> 'Database management',	'ACP_DISALLOW'				=> 'Disallow',	'ACP_DISALLOW_USERNAMES'	=> 'Disallow usernames',	'ACP_EMAIL_SETTINGS'		=> 'E-mail settings',	'ACP_EXTENSION_GROUPS'		=> 'Manage extension groups',	'ACP_FORUM_BASED_PERMISSIONS'	=> 'Forum based permissions',	'ACP_FORUM_LOGS'				=> 'Forum logs',	'ACP_FORUM_MANAGEMENT'			=> 'Forum management',	'ACP_FORUM_MODERATORS'			=> 'Forum moderators',	'ACP_FORUM_PERMISSIONS'			=> 'Forum permissions',	'ACP_FORUM_PERMISSIONS_COPY'	=> 'Copy forum permissions',	'ACP_FORUM_ROLES'				=> 'Forum roles',	'ACP_GENERAL_CONFIGURATION'		=> 'General configuration',	'ACP_GENERAL_TASKS'				=> 'General tasks',	'ACP_GLOBAL_MODERATORS'			=> 'Global moderators',	'ACP_GLOBAL_PERMISSIONS'		=> 'Global permissions',	'ACP_GROUPS'					=> 'Groups',	'ACP_GROUPS_FORUM_PERMISSIONS'	=> 'Groups forum permissions',	'ACP_GROUPS_MANAGE'				=> 'Manage groups',	'ACP_GROUPS_MANAGEMENT'			=> 'Group management',	'ACP_GROUPS_PERMISSIONS'		=> 'Groups permissions',	'ACP_ICONS'					=> 'Topic icons',	'ACP_ICONS_SMILIES'			=> 'Topic icons/smilies',	'ACP_IMAGESETS'				=> 'Imagesets',	'ACP_INACTIVE_USERS'		=> 'Inactive users',	'ACP_INDEX'					=> 'ACP index',	'ACP_JABBER_SETTINGS'		=> 'Jabber settings',	'ACP_LANGUAGE'				=> 'Language management',	'ACP_LANGUAGE_PACKS'		=> 'Language packs',	'ACP_LOAD_SETTINGS'			=> 'Load settings',	'ACP_LOGGING'				=> 'Logging',	'ACP_MAIN'					=> 'ACP index',	'ACP_MANAGE_EXTENSIONS'		=> 'Manage extensions',	'ACP_MANAGE_FORUMS'			=> 'Manage forums',	'ACP_MANAGE_RANKS'			=> 'Manage ranks',	'ACP_MANAGE_REASONS'		=> 'Manage report/denial reasons',	'ACP_MANAGE_USERS'			=> 'Manage users',	'ACP_MASS_EMAIL'			=> 'Mass e-mail',	'ACP_MESSAGES'				=> 'Messages',	'ACP_MESSAGE_SETTINGS'		=> 'Private message settings',	'ACP_MODULE_MANAGEMENT'		=> 'Module management',	'ACP_MOD_LOGS'				=> 'Moderator log',	'ACP_MOD_ROLES'				=> 'Moderator roles',	'ACP_NO_ITEMS'				=> 'There are no items yet.',	'ACP_ORPHAN_ATTACHMENTS'	=> 'Orphaned attachments',	'ACP_PERMISSIONS'			=> 'Permissions',	'ACP_PERMISSION_MASKS'		=> 'Permission masks',	'ACP_PERMISSION_ROLES'		=> 'Permission roles',	'ACP_PERMISSION_TRACE'		=> 'Permission trace',	'ACP_PHP_INFO'				=> 'PHP information',	'ACP_POST_SETTINGS'			=> 'Post settings',	'ACP_PRUNE_FORUMS'			=> 'Prune forums',	'ACP_PRUNE_USERS'			=> 'Prune users',	'ACP_PRUNING'				=> 'Pruning',	'ACP_QUICK_ACCESS'			=> 'Quick access',	'ACP_RANKS'					=> 'Ranks',	'ACP_REASONS'				=> 'Report/denial reasons',	'ACP_REGISTER_SETTINGS'		=> 'User registration settings',	'ACP_RESTORE'				=> 'Restore',	'ACP_FEED'					=> 'Feed management',	'ACP_FEED_SETTINGS'			=> 'Feed settings',	'ACP_SEARCH'				=> 'Search configuration',	'ACP_SEARCH_INDEX'			=> 'Search index',	'ACP_SEARCH_SETTINGS'		=> 'Search settings',	'ACP_SECURITY_SETTINGS'		=> 'Security settings',	'ACP_SEND_STATISTICS'		=> 'Send statistical information',	'ACP_SERVER_CONFIGURATION'	=> 'Server configuration',	'ACP_SERVER_SETTINGS'		=> 'Server settings',	'ACP_SIGNATURE_SETTINGS'	=> 'Signature settings',	'ACP_SMILIES'				=> 'Smilies',	'ACP_STYLE_COMPONENTS'		=> 'Style components',	'ACP_STYLE_MANAGEMENT'		=> 'Style management',	'ACP_STYLES'				=> 'Styles',	'ACP_SUBMIT_CHANGES'		=> 'Submit changes',	'ACP_TEMPLATES'				=> 'Templates',	'ACP_THEMES'				=> 'Themes',	'ACP_UPDATE'					=> 'Updating',	'ACP_USERS_FORUM_PERMISSIONS'	=> 'Users forum permissions',	'ACP_USERS_LOGS'				=> 'User logs',	'ACP_USERS_PERMISSIONS'			=> 'Users permissions',	'ACP_USER_ATTACH'				=> 'Attachments',	'ACP_USER_AVATAR'				=> 'Avatar',	'ACP_USER_FEEDBACK'				=> 'Feedback',	'ACP_USER_GROUPS'				=> 'Groups',	'ACP_USER_MANAGEMENT'			=> 'User management',	'ACP_USER_OVERVIEW'				=> 'Overview',	'ACP_USER_PERM'					=> 'Permissions',	'ACP_USER_PREFS'				=> 'Preferences',	'ACP_USER_PROFILE'				=> 'Profile',	'ACP_USER_RANK'					=> 'Rank',	'ACP_USER_ROLES'				=> 'User roles',	'ACP_USER_SECURITY'				=> 'User security',	'ACP_USER_SIG'					=> 'Signature',	'ACP_USER_WARNINGS'				=> 'Warnings',	'ACP_VC_SETTINGS'					=> 'Spambot countermeasures',	'ACP_VC_CAPTCHA_DISPLAY'			=> 'CAPTCHA image preview',	'ACP_VERSION_CHECK'					=> 'Check for updates',	'ACP_VIEW_ADMIN_PERMISSIONS'		=> 'View administrative permissions',	'ACP_VIEW_FORUM_MOD_PERMISSIONS'	=> 'View forum moderation permissions',	'ACP_VIEW_FORUM_PERMISSIONS'		=> 'View forum-based permissions',	'ACP_VIEW_GLOBAL_MOD_PERMISSIONS'	=> 'View global moderation permissions',	'ACP_VIEW_USER_PERMISSIONS'			=> 'View user-based permissions',	'ACP_WORDS'					=> 'Word censoring',	'ACTION'				=> 'Action',	'ACTIONS'				=> 'Actions',	'ACTIVATE'				=> 'Activate',	'ADD'					=> 'Add',	'ADMIN'					=> 'Administration',	'ADMIN_INDEX'			=> 'Admin index',	'ADMIN_PANEL'			=> 'Administration Control Panel',	'ADM_LOGOUT'			=> 'ACP&nbsp;Logout',	'ADM_LOGGED_OUT'		=> 'Successfully logged out from Administration Control Panel',	'BACK'					=> 'Back',	'COLOUR_SWATCH'			=> 'Web-safe colour swatch',	'CONFIG_UPDATED'		=> 'Configuration updated successfully.',	'DEACTIVATE'				=> 'Deactivate',	'DIRECTORY_DOES_NOT_EXIST'	=> 'The entered path %s does not exist.',	'DIRECTORY_NOT_DIR'			=> 'The entered path %s is not a directory.',	'DIRECTORY_NOT_WRITABLE'	=> 'The entered path %s is not writable.',	'DISABLE'					=> 'Disable',	'DOWNLOAD'					=> 'Download',	'DOWNLOAD_AS'				=> 'Download as',	'DOWNLOAD_STORE'			=> 'Download or store file',	'DOWNLOAD_STORE_EXPLAIN'	=> 'You may directly download the file or save it in your <samp>store/</samp> folder.',	'EDIT'					=> 'Edit',	'ENABLE'				=> 'Enable',	'EXPORT_DOWNLOAD'		=> 'Download',	'EXPORT_STORE'			=> 'Store',	'GENERAL_OPTIONS'		=> 'General options',	'GENERAL_SETTINGS'		=> 'General settings',	'GLOBAL_MASK'			=> 'Global permission mask',	'INSTALL'				=> 'Install',	'IP'					=> 'User IP',	'IP_HOSTNAME'			=> 'IP addresses or hostnames',	'LOGGED_IN_AS'			=> 'You are logged in as:',	'LOGIN_ADMIN'			=> 'To administer the board you must be an authenticated user.',	'LOGIN_ADMIN_CONFIRM'	=> 'To administer the board you must re-authenticate yourself.',	'LOGIN_ADMIN_SUCCESS'	=> 'You have successfully authenticated and will now be redirected to the Administration Control Panel.',	'LOOK_UP_FORUM'			=> 'Select a forum',	'LOOK_UP_FORUMS_EXPLAIN'=> 'You are able to select more than one forum.',	'MANAGE'				=> 'Manage',	'MENU_TOGGLE'			=> 'Hide or display the side menu',	'MORE'					=> 'More',			// Not used at the moment	'MORE_INFORMATION'		=> 'More information ',	'MOVE_DOWN'				=> 'Move down',	'MOVE_UP'				=> 'Move up',	'NOTIFY'				=> 'Notification',	'NO_ADMIN'				=> 'You are not authorised to administer this board.',	'NO_EMAILS_DEFINED'		=> 'No valid e-mail addresses found.',	'NO_PASSWORD_SUPPLIED'	=> 'You need to enter your password to access the Administration Control Panel.',	'OFF'					=> 'Off',	'ON'					=> 'On',	'PARSE_BBCODE'						=> 'Parse BBCode',	'PARSE_SMILIES'						=> 'Parse smilies',	'PARSE_URLS'						=> 'Parse links',	'PERMISSIONS_TRANSFERRED'			=> 'Permissions transferred',	'PERMISSIONS_TRANSFERRED_EXPLAIN'	=> 'You currently have the permissions from %1$s. You are able to browse the board with this users permissions, but not access the administration control panel since admin permissions were not transferred. You can <a href="%2$s"><strong>revert to your permission set</strong></a> at any time.',	'PROCEED_TO_ACP'					=> '%sProceed to the ACP%s',	'REMIND'							=> 'Remind',	'RESYNC'							=> 'Resynchronise',	'RETURN_TO'							=> 'Return to',	'SELECT_ANONYMOUS'		=> 'Select anonymous user',	'SELECT_OPTION'			=> 'Select option',	'SETTING_TOO_LOW'		=> 'The provided value for the setting %1$s is too low. The minimum acceptable value is %2$d.',	'SETTING_TOO_BIG'		=> 'The provided value for the setting %1$s is too high. The maximum acceptable value is %2$d.',	'SETTING_TOO_LONG'		=> 'The provided value for the setting %1$s is too long. The maximum acceptable length is %2$d.',	'SETTING_TOO_SHORT'		=> 'The provided value for the setting %1$s is too short. The minimum acceptable length is %2$d.',	'SHOW_ALL_OPERATIONS'	=> 'Show all operations',	'UCP'					=> 'User Control Panel',	'USERNAMES_EXPLAIN'		=> 'Place each username on a separate line.',	'USER_CONTROL_PANEL'	=> 'User Control Panel',	'WARNING'				=> 'Warning',));// PHP info$lang = array_merge($lang, array(	'ACP_PHP_INFO_EXPLAIN'	=> 'This page lists information on the version of PHP installed on this server. It includes details of loaded modules, available variables and default settings. This information may be useful when diagnosing problems. Please be aware that some hosting companies will limit what information is displayed here for security reasons. You are advised to not give out any details on this page except when asked by <a href="http://www.phpbb.com/about/team/">official team members</a> on the support forums.',	'NO_PHPINFO_AVAILABLE'	=> 'Information about your PHP configuration is unable to be determined. Phpinfo() has been disabled for security reasons.',));// Logs$lang = array_merge($lang, array(	'ACP_ADMIN_LOGS_EXPLAIN'	=> 'This lists all the actions carried out by board administrators. You can sort by username, date, IP or action. If you have appropriate permissions you can also clear individual operations or the log as a whole.',	'ACP_CRITICAL_LOGS_EXPLAIN'	=> 'This lists the actions carried out by the board itself. This log provides you with information you are able to use for solving specific problems, for example non-delivery of e-mails. You can sort by username, date, IP or action. If you have appropriate permissions you can also clear individual operations or the log as a whole.',	'ACP_MOD_LOGS_EXPLAIN'		=> 'This lists all actions done on forums, topics and posts as well as actions carried out on users by moderators, including banning. You can sort by username, date, IP or action. If you have appropriate permissions you can also clear individual operations or the log as a whole.',	'ACP_USERS_LOGS_EXPLAIN'	=> 'This lists all actions carried out by users or on users (reports, warnings and user notes).',	'ALL_ENTRIES'				=> 'All entries',	'DISPLAY_LOG'	=> 'Display entries from previous',	'NO_ENTRIES'	=> 'No log entries for this period.',	'SORT_IP'		=> 'IP address',	'SORT_DATE'		=> 'Date',	'SORT_ACTION'	=> 'Log action',));// Index page$lang = array_merge($lang, array(	'ADMIN_INTRO'				=> 'Thank you for choosing phpBB as your board solution. This screen will give you a quick overview of all the various statistics of your board. The links on the left hand side of this screen allow you to control every aspect of your board experience. Each page will have instructions on how to use the tools.',	'ADMIN_LOG'					=> 'Logged administrator actions',	'ADMIN_LOG_INDEX_EXPLAIN'	=> 'This gives an overview of the last five actions carried out by board administrators. A full copy of the log can be viewed from the appropriate menu item or following the link below.',	'AVATAR_DIR_SIZE'			=> 'Avatar directory size',	'BOARD_STARTED'		=> 'Board started',	'BOARD_VERSION'		=> 'Board version',	'DATABASE_SERVER_INFO'	=> 'Database server',	'DATABASE_SIZE'			=> 'Database size',	// Enviroment configuration checks, mbstring related	'ERROR_MBSTRING_FUNC_OVERLOAD'					=> 'Function overloading is improperly configured',	'ERROR_MBSTRING_FUNC_OVERLOAD_EXPLAIN'			=> '<var>mbstring.func_overload</var> must be set to either 0 or 4. You can check the current value on the <samp>PHP information</samp> page.',	'ERROR_MBSTRING_ENCODING_TRANSLATION'			=> 'Transparent character encoding is improperly configured',	'ERROR_MBSTRING_ENCODING_TRANSLATION_EXPLAIN'	=> '<var>mbstring.encoding_translation</var> must be set to 0. You can check the current value on the <samp>PHP information</samp> page.',	'ERROR_MBSTRING_HTTP_INPUT'						=> 'HTTP input character conversion is improperly configured',	'ERROR_MBSTRING_HTTP_INPUT_EXPLAIN'				=> '<var>mbstring.http_input</var> must be set to <samp>pass</samp>. You can check the current value on the <samp>PHP information</samp> page.',	'ERROR_MBSTRING_HTTP_OUTPUT'					=> 'HTTP output character conversion is improperly configured',	'ERROR_MBSTRING_HTTP_OUTPUT_EXPLAIN'			=> '<var>mbstring.http_output</var> must be set to <samp>pass</samp>. You can check the current value on the <samp>PHP information</samp> page.',	'FILES_PER_DAY'		=> 'Attachments per day',	'FORUM_STATS'		=> 'Board statistics',	'GZIP_COMPRESSION'	=> 'GZip compression',	'NOT_AVAILABLE'		=> 'Not available',	'NUMBER_FILES'		=> 'Number of attachments',	'NUMBER_POSTS'		=> 'Number of posts',	'NUMBER_TOPICS'		=> 'Number of topics',	'NUMBER_USERS'		=> 'Number of users',	'NUMBER_ORPHAN'		=> 'Orphan attachments',	'PHP_VERSION_OLD'	=> 'The version of PHP on this server will no longer be supported by future versions of phpBB. %sDetails%s',	'POSTS_PER_DAY'		=> 'Posts per day',	'PURGE_CACHE'			=> 'Purge the cache',	'PURGE_CACHE_CONFIRM'	=> 'Are you sure you wish to purge the cache?',	'PURGE_CACHE_EXPLAIN'	=> 'Purge all cache related items, this includes any cached template files or queries.',	'PURGE_SESSIONS'			=> 'Purge all sessions',	'PURGE_SESSIONS_CONFIRM'	=> 'Are you sure you wish to purge all sessions? This will log out all users.',	'PURGE_SESSIONS_EXPLAIN'	=> 'Purge all sessions. This will log out all users by truncating the session table.',	'RESET_DATE'					=> 'Reset boards start date',	'RESET_DATE_CONFIRM'			=> 'Are you sure you wish to reset the boards start date?',	'RESET_ONLINE'					=> 'Reset most users ever online',	'RESET_ONLINE_CONFIRM'			=> 'Are you sure you wish to reset the most users ever online counter?',	'RESYNC_POSTCOUNTS'				=> 'Resynchronise post counts',	'RESYNC_POSTCOUNTS_EXPLAIN'		=> 'Only existing posts will be taken into consideration. Pruned posts will not be counted.',	'RESYNC_POSTCOUNTS_CONFIRM'		=> 'Are you sure you wish to resynchronise post counts?',	'RESYNC_POST_MARKING'			=> 'Resynchronise dotted topics',	'RESYNC_POST_MARKING_CONFIRM'	=> 'Are you sure you wish to resynchronise dotted topics?',	'RESYNC_POST_MARKING_EXPLAIN'	=> 'First unmarks all topics and then correctly marks topics that have seen any activity during the past six months.',	'RESYNC_STATS'					=> 'Resynchronise statistics',	'RESYNC_STATS_CONFIRM'			=> 'Are you sure you wish to resynchronise statistics?',	'RESYNC_STATS_EXPLAIN'			=> 'Recalculates the total number of posts, topics, users and files.',	'RUN'							=> 'Run now',	'STATISTIC'					=> 'Statistic',	'STATISTIC_RESYNC_OPTIONS'	=> 'Resynchronise or reset statistics',	'TOPICS_PER_DAY'	=> 'Topics per day',	'UPLOAD_DIR_SIZE'	=> 'Size of posted attachments',	'USERS_PER_DAY'		=> 'Users per day',	'VALUE'						=> 'Value',	'VERSIONCHECK_FAIL'			=> 'Failed to obtain latest version information.',	'VERSIONCHECK_FORCE_UPDATE'	=> 'Re-Check version',	'VIEW_ADMIN_LOG'			=> 'View administrator log',	'VIEW_INACTIVE_USERS'		=> 'View inactive users',	'WELCOME_PHPBB'			=> 'Welcome to phpBB',	'WRITABLE_CONFIG'		=> 'Your config file (config.php) is currently world-writable. We strongly encourage you to change the permissions to 640 or at least to 644 (for example: <a href="http://en.wikipedia.org/wiki/Chmod" rel="external">chmod</a> 640 config.php).',));// Inactive Users$lang = array_merge($lang, array(	'INACTIVE_DATE'					=> 'Inactive date',	'INACTIVE_REASON'				=> 'Reason',	'INACTIVE_REASON_MANUAL'		=> 'Account deactivated by administrator',	'INACTIVE_REASON_PROFILE'		=> 'Profile details changed',	'INACTIVE_REASON_REGISTER'		=> 'Newly registered account',	'INACTIVE_REASON_REMIND'		=> 'Forced user account reactivation',	'INACTIVE_REASON_UNKNOWN'		=> 'Unknown',	'INACTIVE_USERS'				=> 'Inactive users',	'INACTIVE_USERS_EXPLAIN'		=> 'This is a list of users who have registered but whose accounts are inactive. You can activate, delete or remind (by sending an e-mail) these users if you wish.',	'INACTIVE_USERS_EXPLAIN_INDEX'	=> 'This is a list of the last 10 registered users who have inactive accounts. A full list is available from the appropriate menu item or by following the link below from where you can activate, delete or remind (by sending an e-mail) these users if you wish.',	'NO_INACTIVE_USERS'	=> 'No inactive users',	'SORT_INACTIVE'		=> 'Inactive date',	'SORT_LAST_VISIT'	=> 'Last visit',	'SORT_REASON'		=> 'Reason',	'SORT_REG_DATE'		=> 'Registration date',	'SORT_LAST_REMINDER'=> 'Last reminded',	'SORT_REMINDER'		=> 'Reminder sent',	'USER_IS_INACTIVE'		=> 'User is inactive',));// Send statistics page$lang = array_merge($lang, array(	'EXPLAIN_SEND_STATISTICS'	=> 'Please send information about your server and board configurations to phpBB for statistical analysis. All information that could identify you or your website has been removed - the data is entirely <strong>anonymous</strong>. We base decisions about future phpBB versions on this information. The statistics are made available publically. We also share this data with the PHP project, the programming language phpBB is made with.',	'EXPLAIN_SHOW_STATISTICS'	=> 'Using the button below you can preview all variables that will be transmitted.',	'DONT_SEND_STATISTICS'		=> 'Return to the ACP if you do not wish to send statistical information to phpBB.',	'GO_ACP_MAIN'				=> 'Go to the ACP start page',	'HIDE_STATISTICS'			=> 'Hide details',	'SEND_STATISTICS'			=> 'Send statistical information',	'SHOW_STATISTICS'			=> 'Show details',	'THANKS_SEND_STATISTICS'	=> 'Thank you for submitting your information.',));// Log Entries$lang = array_merge($lang, array(	'LOG_ACL_ADD_USER_GLOBAL_U_'		=> '<strong>Added or edited users user permissions</strong><br /> %s',	'LOG_ACL_ADD_GROUP_GLOBAL_U_'		=> '<strong>Added or edited groups user permissions</strong><br /> %s',	'LOG_ACL_ADD_USER_GLOBAL_M_'		=> '<strong>Added or edited users global moderator permissions</strong><br /> %s',	'LOG_ACL_ADD_GROUP_GLOBAL_M_'		=> '<strong>Added or edited groups global moderator permissions</strong><br /> %s',	'LOG_ACL_ADD_USER_GLOBAL_A_'		=> '<strong>Added or edited users administrator permissions</strong><br /> %s',	'LOG_ACL_ADD_GROUP_GLOBAL_A_'		=> '<strong>Added or edited groups administrator permissions</strong><br /> %s',	'LOG_ACL_ADD_ADMIN_GLOBAL_A_'		=> '<strong>Added or edited Administrators</strong><br /> %s',	'LOG_ACL_ADD_MOD_GLOBAL_M_'			=> '<strong>Added or edited Global Moderators</strong><br /> %s',	'LOG_ACL_ADD_USER_LOCAL_F_'			=> '<strong>Added or edited users forum access</strong> from %1$s<br /> %2$s',	'LOG_ACL_ADD_USER_LOCAL_M_'			=> '<strong>Added or edited users forum moderator access</strong> from %1$s<br /> %2$s',	'LOG_ACL_ADD_GROUP_LOCAL_F_'		=> '<strong>Added or edited groups forum access</strong> from %1$s<br /> %2$s',	'LOG_ACL_ADD_GROUP_LOCAL_M_'		=> '<strong>Added or edited groups forum moderator access</strong> from %1$s<br /> %2$s',	'LOG_ACL_ADD_MOD_LOCAL_M_'			=> '<strong>Added or edited Moderators</strong> from %1$s<br /> %2$s',	'LOG_ACL_ADD_FORUM_LOCAL_F_'		=> '<strong>Added or edited forum permissions</strong> from %1$s<br /> %2$s',	'LOG_ACL_DEL_ADMIN_GLOBAL_A_'		=> '<strong>Removed Administrators</strong><br /> %s',	'LOG_ACL_DEL_MOD_GLOBAL_M_'			=> '<strong>Removed Global Moderators</strong><br /> %s',	'LOG_ACL_DEL_MOD_LOCAL_M_'			=> '<strong>Removed Moderators</strong> from %1$s<br /> %2$s',	'LOG_ACL_DEL_FORUM_LOCAL_F_'		=> '<strong>Removed User/Group forum permissions</strong> from %1$s<br /> %2$s',	'LOG_ACL_TRANSFER_PERMISSIONS'		=> '<strong>Permissions transferred from</strong><br /> %s',	'LOG_ACL_RESTORE_PERMISSIONS'		=> '<strong>Own permissions restored after using permissions from</strong><br /> %s',	'LOG_ADMIN_AUTH_FAIL'		=> '<strong>Failed administration login attempt</strong>',	'LOG_ADMIN_AUTH_SUCCESS'	=> '<strong>Successful administration login</strong>',	'LOG_ATTACHMENTS_DELETED'	=> '<strong>Removed user attachments</strong><br /> %s',	'LOG_ATTACH_EXT_ADD'		=> '<strong>Added or edited attachment extension</strong><br /> %s',	'LOG_ATTACH_EXT_DEL'		=> '<strong>Removed attachment extension</strong><br /> %s',	'LOG_ATTACH_EXT_UPDATE'		=> '<strong>Updated attachment extension</strong><br /> %s',	'LOG_ATTACH_EXTGROUP_ADD'	=> '<strong>Added extension group</strong><br /> %s',	'LOG_ATTACH_EXTGROUP_EDIT'	=> '<strong>Edited extension group</strong><br /> %s',	'LOG_ATTACH_EXTGROUP_DEL'	=> '<strong>Removed extension group</strong><br /> %s',	'LOG_ATTACH_FILEUPLOAD'		=> '<strong>Orphan File uploaded to Post</strong><br /> ID %1$d - %2$s',	'LOG_ATTACH_ORPHAN_DEL'		=> '<strong>Orphan Files deleted</strong><br /> %s',	'LOG_BAN_EXCLUDE_USER'	=> '<strong>Excluded user from ban</strong> for reason <em>%1$s</em><br /> %2$s',	'LOG_BAN_EXCLUDE_IP'	=> '<strong>Excluded IP from ban</strong> for reason <em>%1$s</em><br /> %2$s',	'LOG_BAN_EXCLUDE_EMAIL' => '<strong>Excluded e-mail from ban</strong> for reason <em>%1$s</em><br /> %2$s',	'LOG_BAN_USER'			=> '<strong>Banned user</strong> for reason <em>%1$s</em><br /> %2$s',	'LOG_BAN_IP'			=> '<strong>Banned IP</strong> for reason <em>%1$s</em><br /> %2$s',	'LOG_BAN_EMAIL'			=> '<strong>Banned e-mail</strong> for reason <em>%1$s</em><br /> %2$s',	'LOG_UNBAN_USER'		=> '<strong>Unbanned user</strong><br /> %s',	'LOG_UNBAN_IP'			=> '<strong>Unbanned IP</strong><br /> %s',	'LOG_UNBAN_EMAIL'		=> '<strong>Unbanned e-mail</strong><br /> %s',	'LOG_BBCODE_ADD'		=> '<strong>Added new BBCode</strong><br /> %s',	'LOG_BBCODE_EDIT'		=> '<strong>Edited BBCode</strong><br /> %s',	'LOG_BBCODE_DELETE'		=> '<strong>Deleted BBCode</strong><br /> %s',	'LOG_BOT_ADDED'		=> '<strong>New bot added</strong><br /> %s',	'LOG_BOT_DELETE'	=> '<strong>Deleted bot</strong><br /> %s',	'LOG_BOT_UPDATED'	=> '<strong>Existing bot updated</strong><br /> %s',	'LOG_CLEAR_ADMIN'		=> '<strong>Cleared admin log</strong>',	'LOG_CLEAR_CRITICAL'	=> '<strong>Cleared error log</strong>',	'LOG_CLEAR_MOD'			=> '<strong>Cleared moderator log</strong>',	'LOG_CLEAR_USER'		=> '<strong>Cleared user log</strong><br /> %s',	'LOG_CLEAR_USERS'		=> '<strong>Cleared user logs</strong>',	'LOG_CONFIG_ATTACH'			=> '<strong>Altered attachment settings</strong>',	'LOG_CONFIG_AUTH'			=> '<strong>Altered authentication settings</strong>',	'LOG_CONFIG_AVATAR'			=> '<strong>Altered avatar settings</strong>',	'LOG_CONFIG_COOKIE'			=> '<strong>Altered cookie settings</strong>',	'LOG_CONFIG_EMAIL'			=> '<strong>Altered e-mail settings</strong>',	'LOG_CONFIG_FEATURES'		=> '<strong>Altered board features</strong>',	'LOG_CONFIG_LOAD'			=> '<strong>Altered load settings</strong>',	'LOG_CONFIG_MESSAGE'		=> '<strong>Altered private message settings</strong>',	'LOG_CONFIG_POST'			=> '<strong>Altered post settings</strong>',	'LOG_CONFIG_REGISTRATION'	=> '<strong>Altered user registration settings</strong>',	'LOG_CONFIG_FEED'			=> '<strong>Altered syndication feeds settings</strong>',	'LOG_CONFIG_SEARCH'			=> '<strong>Altered search settings</strong>',	'LOG_CONFIG_SECURITY'		=> '<strong>Altered security settings</strong>',	'LOG_CONFIG_SERVER'			=> '<strong>Altered server settings</strong>',	'LOG_CONFIG_SETTINGS'		=> '<strong>Altered board settings</strong>',	'LOG_CONFIG_SIGNATURE'		=> '<strong>Altered signature settings</strong>',	'LOG_CONFIG_VISUAL'			=> '<strong>Altered anti-spambot settings</strong>',	'LOG_APPROVE_TOPIC'			=> '<strong>Approved topic</strong><br /> %s',	'LOG_BUMP_TOPIC'			=> '<strong>User bumped topic</strong><br /> %s',	'LOG_DELETE_POST'			=> '<strong>Deleted post %1$s written by</strong><br /> %2$s',	'LOG_DELETE_SHADOW_TOPIC'	=> '<strong>Deleted shadow topic</strong><br /> %s',	'LOG_DELETE_TOPIC'			=> '<strong>Deleted topic %1$s written by</strong><br /> %2$s',	'LOG_FORK'					=> '<strong>Copied topic</strong><br /> from %s',	'LOG_LOCK'					=> '<strong>Locked topic</strong><br /> %s',	'LOG_LOCK_POST'				=> '<strong>Locked post</strong><br /> %s',	'LOG_MERGE'					=> '<strong>Merged posts</strong> into topic<br /> %s',	'LOG_MOVE'					=> '<strong>Moved topic</strong><br /> from %1$s to %2$s',	'LOG_PM_REPORT_CLOSED'		=> '<strong>Closed PM report</strong><br /> %s',	'LOG_PM_REPORT_DELETED'		=> '<strong>Deleted PM report</strong><br /> %s',	'LOG_POST_APPROVED'			=> '<strong>Approved post</strong><br /> %s',	'LOG_POST_DISAPPROVED'		=> '<strong>Disapproved post %1$s with the following reason</strong><br /> %2$s',	'LOG_POST_EDITED'			=> '<strong>Edited post %1$s written by</strong><br /> %2$s',	'LOG_REPORT_CLOSED'			=> '<strong>Closed report</strong><br /> %s',	'LOG_REPORT_DELETED'		=> '<strong>Deleted report</strong><br /> %s',	'LOG_SPLIT_DESTINATION'		=> '<strong>Moved split posts</strong><br /> to %s',	'LOG_SPLIT_SOURCE'			=> '<strong>Split posts</strong><br /> from %s',	'LOG_TOPIC_APPROVED'		=> '<strong>Approved topic</strong><br /> %s',	'LOG_TOPIC_DISAPPROVED'		=> '<strong>Disapproved topic %1$s with the following reason</strong><br />%2$s',	'LOG_TOPIC_RESYNC'			=> '<strong>Resynchronised topic counters</strong><br /> %s',	'LOG_TOPIC_TYPE_CHANGED'	=> '<strong>Changed topic type</strong><br /> %s',	'LOG_UNLOCK'				=> '<strong>Unlocked topic</strong><br /> %s',	'LOG_UNLOCK_POST'			=> '<strong>Unlocked post</strong><br /> %s',	'LOG_DISALLOW_ADD'		=> '<strong>Added disallowed username</strong><br /> %s',	'LOG_DISALLOW_DELETE'	=> '<strong>Deleted disallowed username</strong>',	'LOG_DB_BACKUP'			=> '<strong>Database backup</strong>',	'LOG_DB_DELETE'			=> '<strong>Deleted database backup</strong>',	'LOG_DB_RESTORE'		=> '<strong>Restored database backup</strong>',	'LOG_DOWNLOAD_EXCLUDE_IP'	=> '<strong>Excluded IP/hostname from download list</strong><br /> %s',	'LOG_DOWNLOAD_IP'			=> '<strong>Added IP/hostname to download list</strong><br /> %s',	'LOG_DOWNLOAD_REMOVE_IP'	=> '<strong>Removed IP/hostname from download list</strong><br /> %s',	'LOG_ERROR_JABBER'		=> '<strong>Jabber error</strong><br /> %s',	'LOG_ERROR_EMAIL'		=> '<strong>E-mail error</strong><br /> %s',	'LOG_FORUM_ADD'							=> '<strong>Created new forum</strong><br /> %s',	'LOG_FORUM_COPIED_PERMISSIONS'			=> '<strong>Copied forum permissions</strong> from %1$s<br /> %2$s',	'LOG_FORUM_DEL_FORUM'					=> '<strong>Deleted forum</strong><br /> %s',	'LOG_FORUM_DEL_FORUMS'					=> '<strong>Deleted forum and its subforums</strong><br /> %s',	'LOG_FORUM_DEL_MOVE_FORUMS'				=> '<strong>Deleted forum and moved subforums</strong> to %1$s<br /> %2$s',	'LOG_FORUM_DEL_MOVE_POSTS'				=> '<strong>Deleted forum and moved posts </strong> to %1$s<br /> %2$s',	'LOG_FORUM_DEL_MOVE_POSTS_FORUMS'		=> '<strong>Deleted forum and its subforums, moved posts</strong> to %1$s<br /> %2$s',	'LOG_FORUM_DEL_MOVE_POSTS_MOVE_FORUMS'	=> '<strong>Deleted forum, moved posts</strong> to %1$s <strong>and subforums</strong> to %2$s<br /> %3$s',	'LOG_FORUM_DEL_POSTS'					=> '<strong>Deleted forum and its posts</strong><br /> %s',	'LOG_FORUM_DEL_POSTS_FORUMS'			=> '<strong>Deleted forum, its posts and subforums</strong><br /> %s',	'LOG_FORUM_DEL_POSTS_MOVE_FORUMS'		=> '<strong>Deleted forum and its posts, moved subforums</strong> to %1$s<br /> %2$s',	'LOG_FORUM_EDIT'						=> '<strong>Edited forum details</strong><br /> %s',	'LOG_FORUM_MOVE_DOWN'					=> '<strong>Moved forum</strong> %1$s <strong>below</strong> %2$s',	'LOG_FORUM_MOVE_UP'						=> '<strong>Moved forum</strong> %1$s <strong>above</strong> %2$s',	'LOG_FORUM_SYNC'						=> '<strong>Re-synchronised forum</strong><br /> %s',	'LOG_GENERAL_ERROR'	=> '<strong>A general error occured</strong>: %1$s <br /> %2$s',	'LOG_GROUP_CREATED'		=> '<strong>New usergroup created</strong><br /> %s',	'LOG_GROUP_DEFAULTS'	=> '<strong>Group %1$s made default for members</strong><br /> %2$s',	'LOG_GROUP_DELETE'		=> '<strong>Usergroup deleted</strong><br /> %s',	'LOG_GROUP_DEMOTED'		=> '<strong>Leaders demoted in usergroup</strong> %1$s<br /> %2$s',	'LOG_GROUP_PROMOTED'	=> '<strong>Members promoted to leader in usergroup</strong> %1$s<br /> %2$s',	'LOG_GROUP_REMOVE'		=> '<strong>Members removed from usergroup</strong> %1$s<br /> %2$s',	'LOG_GROUP_UPDATED'		=> '<strong>Usergroup details updated</strong><br /> %s',	'LOG_MODS_ADDED'		=> '<strong>Added new leaders to usergroup</strong> %1$s<br /> %2$s',	'LOG_USERS_ADDED'		=> '<strong>Added new members to usergroup</strong> %1$s<br /> %2$s',	'LOG_USERS_APPROVED'	=> '<strong>Users approved in usergroup</strong> %1$s<br /> %2$s',	'LOG_USERS_PENDING'		=> '<strong>Users requested to join group %1$s and need to be approved</strong><br /> %2$s',	'LOG_IMAGE_GENERATION_ERROR'	=> '<strong>Error while creating image</strong><br /> Error in %1$s on line %2$s: %3$s',	'LOG_IMAGESET_ADD_DB'			=> '<strong>Added new imageset to database</strong><br /> %s',	'LOG_IMAGESET_ADD_FS'			=> '<strong>Add new imageset on filesystem</strong><br /> %s',	'LOG_IMAGESET_DELETE'			=> '<strong>Deleted imageset</strong><br /> %s',	'LOG_IMAGESET_EDIT_DETAILS'		=> '<strong>Edited imageset details</strong><br /> %s',	'LOG_IMAGESET_EDIT'				=> '<strong>Edited imageset</strong><br /> %s',	'LOG_IMAGESET_EXPORT'			=> '<strong>Exported imageset</strong><br /> %s',	'LOG_IMAGESET_LANG_MISSING'		=> '<strong>Imageset misses %2$s localisation</strong><br /> %1$s',	'LOG_IMAGESET_LANG_REFRESHED'	=> '<strong>Refreshed %2$s localisation of imageset</strong><br /> %1$s',	'LOG_IMAGESET_REFRESHED'		=> '<strong>Refreshed imageset</strong><br /> %s',	'LOG_INACTIVE_ACTIVATE'	=> '<strong>Activated inactive users</strong><br /> %s',	'LOG_INACTIVE_DELETE'	=> '<strong>Deleted inactive users</strong><br /> %s',	'LOG_INACTIVE_REMIND'	=> '<strong>Sent reminder e-mails to inactive users</strong><br /> %s',	'LOG_INSTALL_CONVERTED'	=> '<strong>Converted from %1$s to phpBB %2$s</strong>',	'LOG_INSTALL_INSTALLED'	=> '<strong>Installed phpBB %s</strong>',	'LOG_IP_BROWSER_FORWARDED_CHECK'	=> '<strong>Session IP/browser/X_FORWARDED_FOR check failed</strong><br />User IP <em>%1$s</em> checked against session IP <em>%2$s</em>, user browser string <em>%3$s</em> checked against session browser string <em>%4$s</em> and user X_FORWARDED_FOR string <em>%5$s</em> checked against session X_FORWARDED_FOR string <em>%6$s</em>.',	'LOG_JAB_CHANGED'			=> '<strong>Jabber account changed</strong>',	'LOG_JAB_PASSCHG'			=> '<strong>Jabber password changed</strong>',	'LOG_JAB_REGISTER'			=> '<strong>Jabber account registered</strong>',	'LOG_JAB_SETTINGS_CHANGED'	=> '<strong>Jabber settings changed</strong>',	'LOG_LANGUAGE_PACK_DELETED'		=> '<strong>Deleted language pack</strong><br /> %s',	'LOG_LANGUAGE_PACK_INSTALLED'	=> '<strong>Installed language pack</strong><br /> %s',	'LOG_LANGUAGE_PACK_UPDATED'		=> '<strong>Updated language pack details</strong><br /> %s',	'LOG_LANGUAGE_FILE_REPLACED'	=> '<strong>Replaced language file</strong><br /> %s',	'LOG_LANGUAGE_FILE_SUBMITTED'	=> '<strong>Submitted language file and placed in store folder</strong><br /> %s',	'LOG_MASS_EMAIL'		=> '<strong>Sent mass e-mail</strong><br /> %s',	'LOG_MCP_CHANGE_POSTER'	=> '<strong>Changed poster in topic %1$s</strong><br /> from %2$s to %3$s',	'LOG_MODULE_DISABLE'	=> '<strong>Module disabled</strong><br /> %s',	'LOG_MODULE_ENABLE'		=> '<strong>Module enabled</strong><br /> %s',	'LOG_MODULE_MOVE_DOWN'	=> '<strong>Module moved down</strong><br /> %1$s below %2$s',	'LOG_MODULE_MOVE_UP'	=> '<strong>Module moved up</strong><br /> %1$s above %2$s',	'LOG_MODULE_REMOVED'	=> '<strong>Module removed</strong><br /> %s',	'LOG_MODULE_ADD'		=> '<strong>Module added</strong><br /> %s',	'LOG_MODULE_EDIT'		=> '<strong>Module edited</strong><br /> %s',	'LOG_A_ROLE_ADD'		=> '<strong>Admin role added</strong><br /> %s',	'LOG_A_ROLE_EDIT'		=> '<strong>Admin role edited</strong><br /> %s',	'LOG_A_ROLE_REMOVED'	=> '<strong>Admin role removed</strong><br /> %s',	'LOG_F_ROLE_ADD'		=> '<strong>Forum role added</strong><br /> %s',	'LOG_F_ROLE_EDIT'		=> '<strong>Forum role edited</strong><br /> %s',	'LOG_F_ROLE_REMOVED'	=> '<strong>Forum role removed</strong><br /> %s',	'LOG_M_ROLE_ADD'		=> '<strong>Moderator role added</strong><br /> %s',	'LOG_M_ROLE_EDIT'		=> '<strong>Moderator role edited</strong><br /> %s',	'LOG_M_ROLE_REMOVED'	=> '<strong>Moderator role removed</strong><br /> %s',	'LOG_U_ROLE_ADD'		=> '<strong>User role added</strong><br /> %s',	'LOG_U_ROLE_EDIT'		=> '<strong>User role edited</strong><br /> %s',	'LOG_U_ROLE_REMOVED'	=> '<strong>User role removed</strong><br /> %s',	'LOG_PROFILE_FIELD_ACTIVATE'	=> '<strong>Profile field activated</strong><br /> %s',	'LOG_PROFILE_FIELD_CREATE'		=> '<strong>Profile field added</strong><br /> %s',	'LOG_PROFILE_FIELD_DEACTIVATE'	=> '<strong>Profile field deactivated</strong><br /> %s',	'LOG_PROFILE_FIELD_EDIT'		=> '<strong>Profile field changed</strong><br /> %s',	'LOG_PROFILE_FIELD_REMOVED'		=> '<strong>Profile field removed</strong><br /> %s',	'LOG_PRUNE'					=> '<strong>Pruned forums</strong><br /> %s',	'LOG_AUTO_PRUNE'			=> '<strong>Auto-pruned forums</strong><br /> %s',	'LOG_PRUNE_USER_DEAC'		=> '<strong>Users deactivated</strong><br /> %s',	'LOG_PRUNE_USER_DEL_DEL'	=> '<strong>Users pruned and posts deleted</strong><br /> %s',	'LOG_PRUNE_USER_DEL_ANON'	=> '<strong>Users pruned and posts retained</strong><br /> %s',	'LOG_PURGE_CACHE'			=> '<strong>Purged cache</strong>',	'LOG_PURGE_SESSIONS'		=> '<strong>Purged sessions</strong>',	'LOG_RANK_ADDED'		=> '<strong>Added new rank</strong><br /> %s',	'LOG_RANK_REMOVED'		=> '<strong>Removed rank</strong><br /> %s',	'LOG_RANK_UPDATED'		=> '<strong>Updated rank</strong><br /> %s',	'LOG_REASON_ADDED'		=> '<strong>Added report/denial reason</strong><br /> %s',	'LOG_REASON_REMOVED'	=> '<strong>Removed report/denial reason</strong><br /> %s',	'LOG_REASON_UPDATED'	=> '<strong>Updated report/denial reason</strong><br /> %s',	'LOG_REFERER_INVALID'		=> '<strong>Referer validation failed</strong><br />Referer was <em>%1$s</em>. The request was rejected and the session killed.',	'LOG_RESET_DATE'			=> '<strong>Board start date reset</strong>',	'LOG_RESET_ONLINE'			=> '<strong>Most users online reset</strong>',	'LOG_RESYNC_POSTCOUNTS'		=> '<strong>User post counts resynchronised</strong>',	'LOG_RESYNC_POST_MARKING'	=> '<strong>Dotted topics resynchronised</strong>',	'LOG_RESYNC_STATS'			=> '<strong>Post, topic and user statistics resynchronised</strong>',	'LOG_SEARCH_INDEX_CREATED'	=> '<strong>Created search index for</strong><br /> %s',	'LOG_SEARCH_INDEX_REMOVED'	=> '<strong>Removed search index for</strong><br /> %s',	'LOG_STYLE_ADD'				=> '<strong>Added new style</strong><br /> %s',	'LOG_STYLE_DELETE'			=> '<strong>Deleted style</strong><br /> %s',	'LOG_STYLE_EDIT_DETAILS'	=> '<strong>Edited style</strong><br /> %s',	'LOG_STYLE_EXPORT'			=> '<strong>Exported style</strong><br /> %s',	'LOG_TEMPLATE_ADD_DB'			=> '<strong>Added new template set to database</strong><br /> %s',	'LOG_TEMPLATE_ADD_FS'			=> '<strong>Add new template set on filesystem</strong><br /> %s',	'LOG_TEMPLATE_CACHE_CLEARED'	=> '<strong>Deleted cached versions of template files in template set <em>%1$s</em></strong><br /> %2$s',	'LOG_TEMPLATE_DELETE'			=> '<strong>Deleted template set</strong><br /> %s',	'LOG_TEMPLATE_EDIT'				=> '<strong>Edited template set <em>%1$s</em></strong><br /> %2$s',	'LOG_TEMPLATE_EDIT_DETAILS'		=> '<strong>Edited template details</strong><br /> %s',	'LOG_TEMPLATE_EXPORT'			=> '<strong>Exported template set</strong><br /> %s',	'LOG_TEMPLATE_REFRESHED'		=> '<strong>Refreshed template set</strong><br /> %s',	'LOG_THEME_ADD_DB'			=> '<strong>Added new theme to database</strong><br /> %s',	'LOG_THEME_ADD_FS'			=> '<strong>Add new theme on filesystem</strong><br /> %s',	'LOG_THEME_DELETE'			=> '<strong>Theme deleted</strong><br /> %s',	'LOG_THEME_EDIT_DETAILS'	=> '<strong>Edited theme details</strong><br /> %s',	'LOG_THEME_EDIT'			=> '<strong>Edited theme <em>%1$s</em></strong>',	'LOG_THEME_EDIT_FILE'		=> '<strong>Edited theme <em>%1$s</em></strong><br /> Modified file <em>%2$s</em>',	'LOG_THEME_EXPORT'			=> '<strong>Exported theme</strong><br /> %s',	'LOG_THEME_REFRESHED'		=> '<strong>Refreshed theme</strong><br /> %s',	'LOG_UPDATE_DATABASE'	=> '<strong>Updated Database from version %1$s to version %2$s</strong>',	'LOG_UPDATE_PHPBB'		=> '<strong>Updated phpBB from version %1$s to version %2$s</strong>',	'LOG_USER_ACTIVE'		=> '<strong>User activated</strong><br /> %s',	'LOG_USER_BAN_USER'		=> '<strong>Banned User via user management</strong> for reason <em>%1$s</em><br /> %2$s',	'LOG_USER_BAN_IP'		=> '<strong>Banned IP via user management</strong> for reason <em>%1$s</em><br /> %2$s',	'LOG_USER_BAN_EMAIL'	=> '<strong>Banned e-mail via user management</strong> for reason <em>%1$s</em><br /> %2$s',	'LOG_USER_DELETED'		=> '<strong>Deleted user</strong><br /> %s',	'LOG_USER_DEL_ATTACH'	=> '<strong>Removed all attachments made by the user</strong><br /> %s',	'LOG_USER_DEL_AVATAR'	=> '<strong>Removed user avatar</strong><br /> %s',	'LOG_USER_DEL_OUTBOX'	=> '<strong>Emptied user outbox</strong><br /> %s',	'LOG_USER_DEL_POSTS'	=> '<strong>Removed all posts made by the user</strong><br /> %s',	'LOG_USER_DEL_SIG'		=> '<strong>Removed user signature</strong><br /> %s',	'LOG_USER_INACTIVE'		=> '<strong>User deactivated</strong><br /> %s',	'LOG_USER_MOVE_POSTS'	=> '<strong>Moved user posts</strong><br /> posts by %1$s to forum %2$s',	'LOG_USER_NEW_PASSWORD'	=> '<strong>Changed user password</strong><br /> %s',	'LOG_USER_REACTIVATE'	=> '<strong>Forced user account reactivation</strong><br /> %s',	'LOG_USER_REMOVED_NR'	=> '<strong>Removed newly registered flag from user</strong><br /> %s',	'LOG_USER_UPDATE_EMAIL'	=> '<strong>User %1$s changed e-mail</strong><br /> from %2$s to %3$s',	'LOG_USER_UPDATE_NAME'	=> '<strong>Changed username</strong><br /> from %1$s to %2$s',	'LOG_USER_USER_UPDATE'	=> '<strong>Updated user details</strong><br /> %s',	'LOG_USER_ACTIVE_USER'		=> '<strong>User account activated</strong>',	'LOG_USER_DEL_AVATAR_USER'	=> '<strong>User avatar removed</strong>',	'LOG_USER_DEL_SIG_USER'		=> '<strong>User signature removed</strong>',	'LOG_USER_FEEDBACK'			=> '<strong>Added user feedback</strong><br /> %s',	'LOG_USER_GENERAL'			=> '<strong>Entry added:</strong><br /> %s',	'LOG_USER_INACTIVE_USER'	=> '<strong>User account de-activated</strong>',	'LOG_USER_LOCK'				=> '<strong>User locked own topic</strong><br /> %s',	'LOG_USER_MOVE_POSTS_USER'	=> '<strong>Moved all posts to forum</strong> %s',	'LOG_USER_REACTIVATE_USER'	=> '<strong>Forced user account reactivation</strong>',	'LOG_USER_UNLOCK'			=> '<strong>User unlocked own topic</strong><br /> %s',	'LOG_USER_WARNING'			=> '<strong>Added user warning</strong><br /> %s',	'LOG_USER_WARNING_BODY'		=> '<strong>The following warning was issued to this user</strong><br /> %s',	'LOG_USER_GROUP_CHANGE'			=> '<strong>User changed default group</strong><br /> %s',	'LOG_USER_GROUP_DEMOTE'			=> '<strong>User demoted as leaders from usergroup</strong><br /> %s',	'LOG_USER_GROUP_JOIN'			=> '<strong>User joined group</strong><br /> %s',	'LOG_USER_GROUP_JOIN_PENDING'	=> '<strong>User joined group and needs to be approved</strong><br /> %s',	'LOG_USER_GROUP_RESIGN'			=> '<strong>User resigned membership from group</strong><br /> %s',	'LOG_WARNING_DELETED'		=> '<strong>Deleted user warning</strong><br /> %s',	'LOG_WARNINGS_DELETED'		=> '<strong>Deleted %2$s user warnings</strong><br /> %1$s', // Example: '<strong>Deleted 2 user warnings</strong><br /> username'	'LOG_WARNINGS_DELETED_ALL'	=> '<strong>Deleted all user warnings</strong><br /> %s',	'LOG_WORD_ADD'			=> '<strong>Added word censor</strong><br /> %s',	'LOG_WORD_DELETE'		=> '<strong>Deleted word censor</strong><br /> %s',	'LOG_WORD_EDIT'			=> '<strong>Edited word censor</strong><br /> %s',));?>
<?php/**** mcp [English]** @package language* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** DO NOT CHANGE*/if (!defined('IN_PHPBB')){	exit;}if (empty($lang) || !is_array($lang)){	$lang = array();}// DEVELOPERS PLEASE NOTE//// All language files should use UTF-8 as their encoding and the files must not contain a BOM.//// Placeholders can now contain order information, e.g. instead of// 'Page %s of %s' you can (and should) write 'Page %1$s of %2$s', this allows// translators to re-order the output of data while ensuring it remains correct//// You do not need this where single placeholders are used, e.g. 'Message %d' is fine// equally where a string contains only two placeholders which are used to wrap text// in a url you again do not need to specify an order e.g., 'Click %sHERE%s' is fine$lang = array_merge($lang, array(	'ACTION'				=> 'Action',	'ACTION_NOTE'			=> 'Action/Note',	'ADD_FEEDBACK'			=> 'Add feedback',	'ADD_FEEDBACK_EXPLAIN'	=> 'If you would like to add a report on this please fill out the following form. Only use plain text; HTML, BBCode, etc. are not permitted.',	'ADD_WARNING'			=> 'Add warning',	'ADD_WARNING_EXPLAIN'	=> 'To send a warning to this user please fill out the following form. Only use plain text; HTML, BBCode, etc. are not permitted.',	'ALL_ENTRIES'			=> 'All entries',	'ALL_NOTES_DELETED'		=> 'Successfully removed all user notes.',	'ALL_REPORTS'			=> 'All reports',	'ALREADY_REPORTED'		=> 'This post has already been reported.',	'ALREADY_REPORTED_PM'	=> 'This private message has already been reported.',	'ALREADY_WARNED'		=> 'A warning has already been issued for this post.',	'APPROVE'				=> 'Approve',	'APPROVE_POST'			=> 'Approve post',	'APPROVE_POST_CONFIRM'	=> 'Are you sure you want to approve this post?',	'APPROVE_POSTS'			=> 'Approve posts',	'APPROVE_POSTS_CONFIRM'	=> 'Are you sure you want to approve the selected posts?',	'CANNOT_MOVE_SAME_FORUM'=> 'You cannot move a topic to the forum its already in.',	'CANNOT_WARN_ANONYMOUS'	=> 'You cannot warn unregistered guest users.',	'CANNOT_WARN_SELF'		=> 'You cannot warn yourself.',	'CAN_LEAVE_BLANK'		=> 'This can be left blank.',	'CHANGE_POSTER'			=> 'Change poster',	'CLOSE_PM_REPORT'		=> 'Close PM report',	'CLOSE_PM_REPORT_CONFIRM'	=> 'Are you sure you want to close the selected PM report?',	'CLOSE_PM_REPORTS'		=> 'Close PM reports',	'CLOSE_PM_REPORTS_CONFIRM'	=> 'Are you sure you want to close the selected PM reports?',	'CLOSE_REPORT'			=> 'Close report',	'CLOSE_REPORT_CONFIRM'	=> 'Are you sure you want to close the selected report?',	'CLOSE_REPORTS'			=> 'Close reports',	'CLOSE_REPORTS_CONFIRM'	=> 'Are you sure you want to close the selected reports?',	'DELETE_PM_REPORT'			=> 'Delete PM report',	'DELETE_PM_REPORT_CONFIRM'	=> 'Are you sure you want to delete the selected PM report?',	'DELETE_PM_REPORTS'			=> 'Delete PM reports',	'DELETE_PM_REPORTS_CONFIRM'	=> 'Are you sure you want to delete the selected PM reports?',	'DELETE_POSTS'				=> 'Delete posts',	'DELETE_POSTS_CONFIRM'		=> 'Are you sure you want to delete these posts?',	'DELETE_POST_CONFIRM'		=> 'Are you sure you want to delete this post?',	'DELETE_REPORT'				=> 'Delete report',	'DELETE_REPORT_CONFIRM'		=> 'Are you sure you want to delete the selected report?',	'DELETE_REPORTS'			=> 'Delete reports',	'DELETE_REPORTS_CONFIRM'	=> 'Are you sure you want to delete the selected reports?',	'DELETE_SHADOW_TOPIC'		=> 'Delete shadow topic',	'DELETE_TOPICS'				=> 'Delete selected topics',	'DELETE_TOPICS_CONFIRM'		=> 'Are you sure you want to delete these topics?',	'DELETE_TOPIC_CONFIRM'		=> 'Are you sure you want to delete this topic?',	'DISAPPROVE'				=> 'Disapprove',	'DISAPPROVE_REASON'			=> 'Reason for disapproval',	'DISAPPROVE_POST'			=> 'Disapprove post',	'DISAPPROVE_POST_CONFIRM'	=> 'Are you sure you want to disapprove this post?',	'DISAPPROVE_POSTS'			=> 'Disapprove posts',	'DISAPPROVE_POSTS_CONFIRM'	=> 'Are you sure you want to disapprove the selected posts?',	'DISPLAY_LOG'				=> 'Display entries from previous',	'DISPLAY_OPTIONS'			=> 'Display options',	'EMPTY_REPORT'					=> 'You must enter a description when selecting this reason.',	'EMPTY_TOPICS_REMOVED_WARNING'	=> 'Please note that one or several topics have been removed from the database because they were or become empty.',	'FEEDBACK'				=> 'Feedback',	'FORK'					=> 'Copy',	'FORK_TOPIC'			=> 'Copy topic',	'FORK_TOPIC_CONFIRM'	=> 'Are you sure you want to copy this topic?',	'FORK_TOPICS'			=> 'Copy selected topics',	'FORK_TOPICS_CONFIRM'	=> 'Are you sure you want to copy the selected topics?',	'FORUM_DESC'			=> 'Description',	'FORUM_NAME'			=> 'Forum name',	'FORUM_NOT_EXIST'		=> 'The forum you selected does not exist.',	'FORUM_NOT_POSTABLE'	=> 'The forum you selected cannot be posted to.',	'FORUM_STATUS'			=> 'Forum status',	'FORUM_STYLE'			=> 'Forum style',	'GLOBAL_ANNOUNCEMENT'	=> 'Global announcement',	'IP_INFO'				=> 'IP address information',	'IPS_POSTED_FROM'		=> 'IP addresses this user has posted from',	'LATEST_LOGS'				=> 'Latest 5 logged actions',	'LATEST_REPORTED'			=> 'Latest 5 reports',	'LATEST_REPORTED_PMS'		=> 'Latest 5 PM reports',	'LATEST_UNAPPROVED'			=> 'Latest 5 posts awaiting approval',	'LATEST_WARNING_TIME'		=> 'Latest warning issued',	'LATEST_WARNINGS'			=> 'Latest 5 warnings',	'LEAVE_SHADOW'				=> 'Leave shadow topic in place',	'LIST_REPORT'				=> '1 report',	'LIST_REPORTS'				=> '%d reports',	'LOCK'						=> 'Lock',	'LOCK_POST_POST'			=> 'Lock post',	'LOCK_POST_POST_CONFIRM'	=> 'Are you sure you want to prevent editing this post?',	'LOCK_POST_POSTS'			=> 'Lock selected posts',	'LOCK_POST_POSTS_CONFIRM'	=> 'Are you sure you want to prevent editing the selected posts?',	'LOCK_TOPIC_CONFIRM'		=> 'Are you sure you want to lock this topic?',	'LOCK_TOPICS'				=> 'Lock selected topics',	'LOCK_TOPICS_CONFIRM'		=> 'Are you sure you want to lock all selected topics?',	'LOGS_CURRENT_TOPIC'		=> 'Currently viewing logs of:',	'LOGIN_EXPLAIN_MCP'			=> 'To moderate this forum you must login.',	'LOGVIEW_VIEWTOPIC'			=> 'View topic',	'LOGVIEW_VIEWLOGS'			=> 'View topic log',	'LOGVIEW_VIEWFORUM'			=> 'View forum',	'LOOKUP_ALL'				=> 'Look up all IPs',	'LOOKUP_IP'					=> 'Look up IP',	'MARKED_NOTES_DELETED'		=> 'Successfully removed all marked user notes.',	'MCP_ADD'						=> 'Add a warning',	'MCP_BAN'					=> 'Banning',	'MCP_BAN_EMAILS'			=> 'Ban e-mails',	'MCP_BAN_IPS'				=> 'Ban IPs',	'MCP_BAN_USERNAMES'			=> 'Ban Usernames',	'MCP_LOGS'						=> 'Moderator logs',	'MCP_LOGS_FRONT'				=> 'Front page',	'MCP_LOGS_FORUM_VIEW'			=> 'Forum logs',	'MCP_LOGS_TOPIC_VIEW'			=> 'Topic logs',	'MCP_MAIN'						=> 'Main',	'MCP_MAIN_FORUM_VIEW'			=> 'View forum',	'MCP_MAIN_FRONT'				=> 'Front page',	'MCP_MAIN_POST_DETAILS'			=> 'Post details',	'MCP_MAIN_TOPIC_VIEW'			=> 'View topic',	'MCP_MAKE_ANNOUNCEMENT'			=> 'Modify to Announcement',	'MCP_MAKE_ANNOUNCEMENT_CONFIRM'	=> 'Are you sure you want to change this topic to an Announcement?',	'MCP_MAKE_ANNOUNCEMENTS'		=> 'Modify to Announcements',	'MCP_MAKE_ANNOUNCEMENTS_CONFIRM'=> 'Are you sure you want to change the selected topics to Announcements?',	'MCP_MAKE_GLOBAL'				=> 'Modify to Global announcement',	'MCP_MAKE_GLOBAL_CONFIRM'		=> 'Are you sure you want to change this topic to a Global announcement?',	'MCP_MAKE_GLOBALS'				=> 'Modify to Global announcements',	'MCP_MAKE_GLOBALS_CONFIRM'		=> 'Are you sure you want to change the selected topics to Global announcements?',	'MCP_MAKE_STICKY'				=> 'Modify to Sticky',	'MCP_MAKE_STICKY_CONFIRM'		=> 'Are you sure you want to change this topic to a Sticky?',	'MCP_MAKE_STICKIES'				=> 'Modify to Stickies',	'MCP_MAKE_STICKIES_CONFIRM'		=> 'Are you sure you want to change the selected topics to Stickies?',	'MCP_MAKE_NORMAL'				=> 'Modify to Standard Topic',	'MCP_MAKE_NORMAL_CONFIRM'		=> 'Are you sure you want to change this topic to a Standard Topic?',	'MCP_MAKE_NORMALS'				=> 'Modify to Standard Topics',	'MCP_MAKE_NORMALS_CONFIRM'		=> 'Are you sure you want to change the selected topics to Standard Topics?',	'MCP_NOTES'						=> 'User notes',	'MCP_NOTES_FRONT'				=> 'Front page',	'MCP_NOTES_USER'				=> 'User details',	'MCP_POST_REPORTS'				=> 'Reports issued on this post',	'MCP_PM_REPORTS'				=> 'Reported PMs',	'MCP_PM_REPORT_DETAILS'			=> 'PM Report details',	'MCP_PM_REPORTS_CLOSED'			=> 'Closed PM reports',	'MCP_PM_REPORTS_CLOSED_EXPLAIN'	=> 'This is a list of all reports about private messages which have previously been resolved.',	'MCP_PM_REPORTS_OPEN'			=> 'Open PM reports',	'MCP_PM_REPORTS_OPEN_EXPLAIN'	=> 'This is a list of all reported private messages which are still to be handled.',	'MCP_REPORTS'					=> 'Reported messages',	'MCP_REPORT_DETAILS'			=> 'Report details',	'MCP_REPORTS_CLOSED'			=> 'Closed reports',	'MCP_REPORTS_CLOSED_EXPLAIN'	=> 'This is a list of all reports about posts which have previously been resolved.',	'MCP_REPORTS_OPEN'				=> 'Open reports',	'MCP_REPORTS_OPEN_EXPLAIN'		=> 'This is a list of all reported posts which are still to be handled.',	'MCP_QUEUE'								=> 'Moderation queue',	'MCP_QUEUE_APPROVE_DETAILS'				=> 'Approve details',	'MCP_QUEUE_UNAPPROVED_POSTS'			=> 'Posts awaiting approval',	'MCP_QUEUE_UNAPPROVED_POSTS_EXPLAIN'	=> 'This is a list of all posts which require approving before they will be visible to users.',	'MCP_QUEUE_UNAPPROVED_TOPICS'			=> 'Topics awaiting approval',	'MCP_QUEUE_UNAPPROVED_TOPICS_EXPLAIN'	=> 'This is a list of all topics which require approving before they will be visible to users.',	'MCP_VIEW_USER'			=> 'View warnings for a specific user',	'MCP_WARN'				=> 'Warnings',	'MCP_WARN_FRONT'		=> 'Front page',	'MCP_WARN_LIST'			=> 'List warnings',	'MCP_WARN_POST'			=> 'Warn for specific post',	'MCP_WARN_USER'			=> 'Warn user',	'MERGE_POSTS_CONFIRM'	=> 'Are you sure you want to move the selected posts?',	'MERGE_TOPIC_EXPLAIN'	=> 'Using the form below you can move selected posts into another topic. The posts will be split from this topic and merged into the other topic. These posts will not be reordered and will appear as if the users posted them to the new topic.<br />Please enter the destination topic id or click on Select topic to search for one.',	'MERGE_TOPIC_ID'		=> 'Destination topic identification number',	'MERGE_TOPICS'			=> 'Merge topics',	'MERGE_TOPICS_CONFIRM'	=> 'Are you sure you want to merge the selected topics?',	'MODERATE_FORUM'		=> 'Moderate forum',	'MODERATE_TOPIC'		=> 'Moderate topic',	'MODERATE_POST'			=> 'Moderate post',	'MOD_OPTIONS'			=> 'Moderator options',	'MORE_INFO'				=> 'Further information',	'MOST_WARNINGS'			=> 'Users with most warnings',	'MOVE_TOPIC_CONFIRM'	=> 'Are you sure you want to move the topic into a new forum?',	'MOVE_TOPICS'			=> 'Move selected topics',	'MOVE_TOPICS_CONFIRM'	=> 'Are you sure you want to move the selected topics into a new forum?',	'NOTIFY_POSTER_APPROVAL'		=> 'Notify poster about approval?',	'NOTIFY_POSTER_DISAPPROVAL'		=> 'Notify poster about disapproval?',	'NOTIFY_USER_WARN'				=> 'Notify user about warning?',	'NOT_MODERATOR'					=> 'You are not a moderator of this forum.',	'NO_DESTINATION_FORUM'			=> 'Please select a forum for destination.',	'NO_DESTINATION_FORUM_FOUND'	=> 'There is no destination forum available.',	'NO_ENTRIES'					=> 'No log entries for this period.',	'NO_FEEDBACK'					=> 'No feedback exists for this user.',	'NO_FINAL_TOPIC_SELECTED'		=> 'You have to select a destination topic for merging posts.',	'NO_MATCHES_FOUND'				=> 'No matches found.',	'NO_POST'						=> 'You have to select a post in order to warn the user for a post.',	'NO_POST_REPORT'				=> 'This post was not reported.',	'NO_POST_SELECTED'				=> 'You must select at least one post to perform this action.',	'NO_REASON_DISAPPROVAL'			=> 'Please give an appropriate reason for disapproval.',	'NO_REPORT'						=> 'No report found',	'NO_REPORTS'					=> 'No reports found',	'NO_REPORT_SELECTED'			=> 'You must select at least one report to perform this action.',	'NO_TOPIC_ICON'					=> 'None',	'NO_TOPIC_SELECTED'				=> 'You must select at least one topic to perform this action.',	'NO_TOPICS_QUEUE'				=> 'There are no topics waiting for approval.',	'ONLY_TOPIC'			=> 'Only topic %s',	'OTHER_USERS'			=> 'Other users posting from this IP',	'PM_REPORT_CLOSED_SUCCESS'	=> 'The selected PM report has been closed successfully.',	'PM_REPORT_DELETED_SUCCESS'	=> 'The selected PM report has been deleted successfully.',	'PM_REPORTED_SUCCESS'		=> 'This private message has been successfully reported.',	'PM_REPORT_TOTAL'			=> 'In total there is <strong>1</strong> PM report to review.',	'PM_REPORTS_CLOSED_SUCCESS'	=> 'The selected PM reports have been closed successfully.',	'PM_REPORTS_DELETED_SUCCESS'=> 'The selected PM reports have been deleted successfully.',	'PM_REPORTS_TOTAL'			=> 'In total there are <strong>%d</strong> PM reports to review.',	'PM_REPORTS_ZERO_TOTAL'		=> 'There are no PM reports to review.',	'PM_REPORT_DETAILS'			=> 'Private message report details',	'POSTER'					=> 'Poster',	'POSTS_APPROVED_SUCCESS'	=> 'The selected posts have been approved.',	'POSTS_DELETED_SUCCESS'		=> 'The selected posts have been successfully removed from the database.',	'POSTS_DISAPPROVED_SUCCESS'	=> 'The selected posts have been disapproved.',	'POSTS_LOCKED_SUCCESS'		=> 'The selected posts have been locked successfully.',	'POSTS_MERGED_SUCCESS'		=> 'The selected posts have been merged.',	'POSTS_UNLOCKED_SUCCESS'	=> 'The selected posts have been unlocked successfully.',	'POSTS_PER_PAGE'			=> 'Posts per page',	'POSTS_PER_PAGE_EXPLAIN'	=> '(Set to 0 to view all posts.)',	'POST_APPROVED_SUCCESS'		=> 'The selected post has been approved.',	'POST_DELETED_SUCCESS'		=> 'The selected post has been successfully removed from the database.',	'POST_DISAPPROVED_SUCCESS'	=> 'The selected post has been disapproved.',	'POST_LOCKED_SUCCESS'		=> 'Post locked successfully.',	'POST_NOT_EXIST'			=> 'The post you requested does not exist.',	'POST_REPORTED_SUCCESS'		=> 'This post has been successfully reported.',	'POST_UNLOCKED_SUCCESS'		=> 'Post unlocked successfully.',	'READ_USERNOTES'			=> 'User notes',	'READ_WARNINGS'				=> 'User warnings',	'REPORTER'					=> 'Reporter',	'REPORTED'					=> 'Reported',	'REPORTED_BY'				=> 'Reported by',	'REPORTED_ON_DATE'			=> 'on',	'REPORTS_CLOSED_SUCCESS'	=> 'The selected reports have been closed successfully.',	'REPORTS_DELETED_SUCCESS'	=> 'The selected reports have been deleted successfully.',	'REPORTS_TOTAL'				=> 'In total there are <strong>%d</strong> reports to review.',	'REPORTS_ZERO_TOTAL'		=> 'There are no reports to review.',	'REPORT_CLOSED'				=> 'This report has already been closed.',	'REPORT_CLOSED_SUCCESS'		=> 'The selected report has been closed successfully.',	'REPORT_DELETED_SUCCESS'	=> 'The selected report has been deleted successfully.',	'REPORT_DETAILS'			=> 'Report details',	'REPORT_MESSAGE'			=> 'Report this message',	'REPORT_MESSAGE_EXPLAIN'	=> 'Use this form to report the selected private message. Reporting should generally be used only if the message breaks forum rules. <strong>Reporting a private message will make its contents visible to all moderators.</strong>',	'REPORT_NOTIFY'				=> 'Notify me',	'REPORT_NOTIFY_EXPLAIN'		=> 'Informs you when your report is dealt with.',	'REPORT_POST_EXPLAIN'		=> 'Use this form to report the selected post to the forum moderators and board administrators. Reporting should generally be used only if the post breaks forum rules.',	'REPORT_REASON'				=> 'Report reason',	'REPORT_TIME'				=> 'Report time',	'REPORT_TOTAL'				=> 'In total there is <strong>1</strong> report to review.',	'RESYNC'					=> 'Resync',	'RETURN_MESSAGE'			=> '%sReturn to the message%s',	'RETURN_NEW_FORUM'			=> '%sGo to the new forum%s',	'RETURN_NEW_TOPIC'			=> '%sGo to the new topic%s',	'RETURN_PM'					=> '%sReturn to the private message%s',	'RETURN_POST'				=> '%sReturn to the post%s',	'RETURN_QUEUE'				=> '%sReturn to the queue%s',	'RETURN_REPORTS'			=> '%sReturn to the reports%s',	'RETURN_TOPIC_SIMPLE'		=> '%sReturn to the topic%s',	'SEARCH_POSTS_BY_USER'				=> 'Search posts by',	'SELECT_ACTION'						=> 'Select desired action',	'SELECT_FORUM_GLOBAL_ANNOUNCEMENT'	=> 'Please select the forum you wish this global announcement to be displayed.',	'SELECT_FORUM_GLOBAL_ANNOUNCEMENTS'	=> 'One or more of the selected topics are global announcements. Please select the forum you wish these to be displayed.',	'SELECT_MERGE'						=> 'Select for merge',	'SELECT_TOPICS_FROM'				=> 'Select topics from',	'SELECT_TOPIC'						=> 'Select topic',	'SELECT_USER'						=> 'Select user',	'SORT_ACTION'						=> 'Log action',	'SORT_DATE'							=> 'Date',	'SORT_IP'							=> 'IP address',	'SORT_WARNINGS'						=> 'Warnings',	'SPLIT_AFTER'						=> 'Split topic from selected post onwards',	'SPLIT_FORUM'						=> 'Forum for new topic',	'SPLIT_POSTS'						=> 'Split selected posts',	'SPLIT_SUBJECT'						=> 'New topic title',	'SPLIT_TOPIC_ALL'					=> 'Split topic from selected posts',	'SPLIT_TOPIC_ALL_CONFIRM'			=> 'Are you sure you want to split this topic?',	'SPLIT_TOPIC_BEYOND'				=> 'Split topic at selected post',	'SPLIT_TOPIC_BEYOND_CONFIRM'		=> 'Are you sure you want to split this topic at the selected post?',	'SPLIT_TOPIC_EXPLAIN'				=> 'Using the form below you can split a topic in two, either by selecting the posts individually or by splitting at a selected post.',	'THIS_PM_IP'				=> 'IP for this private message',	'THIS_POST_IP'				=> 'IP for this post',	'TOPICS_APPROVED_SUCCESS'	=> 'The selected topics have been approved.',	'TOPICS_DELETED_SUCCESS'	=> 'The selected topics have been successfully removed from the database.',	'TOPICS_DISAPPROVED_SUCCESS'=> 'The selected topics have been disapproved.',	'TOPICS_FORKED_SUCCESS'		=> 'The selected topics have been copied successfully.',	'TOPICS_LOCKED_SUCCESS'		=> 'The selected topics have been locked.',	'TOPICS_MOVED_SUCCESS'		=> 'The selected topics have been moved successfully.',	'TOPICS_RESYNC_SUCCESS'		=> 'The selected topics have been resynchronised.',	'TOPICS_TYPE_CHANGED'		=> 'Topic types changed successfully.',	'TOPICS_UNLOCKED_SUCCESS'	=> 'The selected topics have been unlocked.',	'TOPIC_APPROVED_SUCCESS'	=> 'The selected topic has been approved.',	'TOPIC_DELETED_SUCCESS'		=> 'The selected topic has been successfully removed from the database.',	'TOPIC_DISAPPROVED_SUCCESS'	=> 'The selected topic has been disapproved.',	'TOPIC_FORKED_SUCCESS'		=> 'The selected topic has been copied successfully.',	'TOPIC_LOCKED_SUCCESS'		=> 'The selected topic has been locked.',	'TOPIC_MOVED_SUCCESS'		=> 'The selected topic has been moved successfully.',	'TOPIC_NOT_EXIST'			=> 'The topic you selected does not exist.',	'TOPIC_RESYNC_SUCCESS'		=> 'The selected topic has been resynchronised.',	'TOPIC_SPLIT_SUCCESS'		=> 'The selected topic has been split successfully.',	'TOPIC_TIME'				=> 'Topic time',	'TOPIC_TYPE_CHANGED'		=> 'Topic type changed successfully.',	'TOPIC_UNLOCKED_SUCCESS'	=> 'The selected topic has been unlocked.',	'TOTAL_WARNINGS'			=> 'Total Warnings',	'UNAPPROVED_POSTS_TOTAL'		=> 'In total there are <strong>%d</strong> posts waiting for approval.',	'UNAPPROVED_POSTS_ZERO_TOTAL'	=> 'There are no posts waiting for approval.',	'UNAPPROVED_POST_TOTAL'			=> 'In total there is <strong>1</strong> post waiting for approval.',	'UNLOCK'						=> 'Unlock',	'UNLOCK_POST'					=> 'Unlock post',	'UNLOCK_POST_EXPLAIN'			=> 'Allow editing',	'UNLOCK_POST_POST'				=> 'Unlock post',	'UNLOCK_POST_POST_CONFIRM'		=> 'Are you sure you want to allow editing this post?',	'UNLOCK_POST_POSTS'				=> 'Unlock selected posts',	'UNLOCK_POST_POSTS_CONFIRM'		=> 'Are you sure you want to allow editing the selected posts?',	'UNLOCK_TOPIC'					=> 'Unlock topic',	'UNLOCK_TOPIC_CONFIRM'			=> 'Are you sure you want to unlock this topic?',	'UNLOCK_TOPICS'					=> 'Unlock selected topics',	'UNLOCK_TOPICS_CONFIRM'			=> 'Are you sure you want to unlock all selected topics?',	'USER_CANNOT_POST'				=> 'You cannot post in this forum.',	'USER_CANNOT_REPORT'			=> 'You cannot report posts in this forum.',	'USER_FEEDBACK_ADDED'			=> 'User feedback added successfully.',	'USER_WARNING_ADDED'			=> 'User warned successfully.',	'VIEW_DETAILS'			=> 'View details',	'VIEW_PM'				=> 'View private message',	'VIEW_POST'				=> 'View post',	'WARNED_USERS'			=> 'Warned users',	'WARNED_USERS_EXPLAIN'	=> 'This is a list of users with unexpired warnings issued to them.',	'WARNING_PM_BODY'		=> 'The following is a warning which has been issued to you by an administrator or moderator of this site.[quote]%s[/quote]',	'WARNING_PM_SUBJECT'	=> 'Board warning issued',	'WARNING_POST_DEFAULT'	=> 'This is a warning regarding the following post made by you: %s .',	'WARNINGS_ZERO_TOTAL'	=> 'No warnings exist.',	'YOU_SELECTED_TOPIC'	=> 'You selected topic number %d: %s.',	'report_reasons'		=> array(		'TITLE'	=> array(			'WAREZ'		=> 'Warez',			'SPAM'		=> 'Spam',			'OFF_TOPIC'	=> 'Off-topic',			'OTHER'		=> 'Other',		),		'DESCRIPTION' => array(			'WAREZ'		=> 'The message contains links to illegal or pirated software.',			'SPAM'		=> 'The reported message has the only purpose to advertise for a website or another product.',			'OFF_TOPIC'	=> 'The reported message is off topic.',			'OTHER'		=> 'The reported message does not fit into any other category, please use the further information field.',		)	),));?>
<?php/**** @package acp* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @ignore*/if (!defined('IN_PHPBB')){	exit;}/*** @package acp*/class acp_styles{	var $u_action;	var $style_cfg;	var $template_cfg;	var $theme_cfg;	var $imageset_cfg;	var $imageset_keys;	function main($id, $mode)	{		global $db, $user, $auth, $template, $cache;		global $config, $phpbb_root_path, $phpbb_admin_path, $phpEx;		// Hardcoded template bitfield to add for new templates		$bitfield = new bitfield();		$bitfield->set(0);		$bitfield->set(1);		$bitfield->set(2);		$bitfield->set(3);		$bitfield->set(4);		$bitfield->set(8);		$bitfield->set(9);		$bitfield->set(11);		$bitfield->set(12);		define('TEMPLATE_BITFIELD', $bitfield->get_base64());		unset($bitfield);		$user->add_lang('acp/styles');		$this->tpl_name = 'acp_styles';		$this->page_title = 'ACP_CAT_STYLES';		$action = request_var('action', '');		$action = (isset($_POST['add'])) ? 'add' : $action;		$style_id = request_var('id', 0);		// Fill the configuration variables		$this->style_cfg = $this->template_cfg = $this->theme_cfg = $this->imageset_cfg = '## phpBB {MODE} configuration file## @package phpBB3# @copyright (c) 2005 phpBB Group# @license http://opensource.org/licenses/gpl-license.php GNU Public License### At the left is the name, please do not change this# At the right the value is entered# For on/off options the valid values are on, off, 1, 0, true and false## Values get trimmed, if you want to add a space in front or at the end of# the value, then enclose the value with single or double quotes.# Single and double quotes do not need to be escaped.### General Information about this {MODE}name = {NAME}copyright = {COPYRIGHT}version = {VERSION}';		$this->theme_cfg .= '# Some configuration options## You have to turn this option on if you want to use the# path template variables ({T_IMAGESET_PATH} for example) within# your css file.# This is mostly the case if you want to use language specific# images within your css file.#parse_css_file = {PARSE_CSS_FILE}';		$this->template_cfg .= '# Some configuration options## You can use this function to inherit templates from another template.# The template of the given name has to be installed.# Templates cannot inherit from inheriting templates.#';		$this->imageset_keys = array(			'logos' => array(				'site_logo',			),			'buttons'	=> array(				'icon_back_top', 'icon_contact_aim', 'icon_contact_email', 'icon_contact_icq', 'icon_contact_jabber', 'icon_contact_msnm', 'icon_contact_pm', 'icon_contact_yahoo', 'icon_contact_www', 'icon_post_delete', 'icon_post_edit', 'icon_post_info', 'icon_post_quote', 'icon_post_report', 'icon_user_online', 'icon_user_offline', 'icon_user_profile', 'icon_user_search', 'icon_user_warn', 'button_pm_forward', 'button_pm_new', 'button_pm_reply', 'button_topic_locked', 'button_topic_new', 'button_topic_reply',			),			'icons'		=> array(				'icon_post_target', 'icon_post_target_unread', 'icon_topic_attach', 'icon_topic_latest', 'icon_topic_newest', 'icon_topic_reported', 'icon_topic_unapproved', 'icon_friend', 'icon_foe',			),			'forums'	=> array(				'forum_link', 'forum_read', 'forum_read_locked', 'forum_read_subforum', 'forum_unread', 'forum_unread_locked', 'forum_unread_subforum', 'subforum_read', 'subforum_unread'			),			'folders'	=> array(				'topic_moved', 'topic_read', 'topic_read_mine', 'topic_read_hot', 'topic_read_hot_mine', 'topic_read_locked', 'topic_read_locked_mine', 'topic_unread', 'topic_unread_mine', 'topic_unread_hot', 'topic_unread_hot_mine', 'topic_unread_locked', 'topic_unread_locked_mine', 'sticky_read', 'sticky_read_mine', 'sticky_read_locked', 'sticky_read_locked_mine', 'sticky_unread', 'sticky_unread_mine', 'sticky_unread_locked', 'sticky_unread_locked_mine', 'announce_read', 'announce_read_mine', 'announce_read_locked', 'announce_read_locked_mine', 'announce_unread', 'announce_unread_mine', 'announce_unread_locked', 'announce_unread_locked_mine', 'global_read', 'global_read_mine', 'global_read_locked', 'global_read_locked_mine', 'global_unread', 'global_unread_mine', 'global_unread_locked', 'global_unread_locked_mine', 'pm_read', 'pm_unread',			),			'polls'		=> array(				'poll_left', 'poll_center', 'poll_right',			),			'ui'		=> array(				'upload_bar',			),			'user'		=> array(				'user_icon1', 'user_icon2', 'user_icon3', 'user_icon4', 'user_icon5', 'user_icon6', 'user_icon7', 'user_icon8', 'user_icon9', 'user_icon10',			),		);		// Execute overall actions		switch ($action)		{			case 'delete':				if ($style_id)				{					$this->remove($mode, $style_id);					return;				}			break;			case 'export':				if ($style_id)				{					$this->export($mode, $style_id);					return;				}			break;			case 'install':				$this->install($mode);				return;			break;			case 'add':				$this->add($mode);				return;			break;			case 'details':				if ($style_id)				{					$this->details($mode, $style_id);					return;				}			break;			case 'edit':				if ($style_id)				{					switch ($mode)					{						case 'imageset':							return $this->edit_imageset($style_id);						case 'template':							return $this->edit_template($style_id);						case 'theme':							return $this->edit_theme($style_id);					}				}			break;			case 'cache':				if ($style_id)				{					switch ($mode)					{						case 'template':							return $this->template_cache($style_id);					}				}			break;		}		switch ($mode)		{			case 'style':				switch ($action)				{					case 'activate':					case 'deactivate':						if ($style_id == $config['default_style'])						{							trigger_error($user->lang['DEACTIVATE_DEFAULT'] . adm_back_link($this->u_action), E_USER_WARNING);						}						if (($action == 'deactivate' && confirm_box(true)) || $action == 'activate')						{							$sql = 'UPDATE ' . STYLES_TABLE . '								SET style_active = ' . (($action == 'activate') ? 1 : 0) . '								WHERE style_id = ' . $style_id;							$db->sql_query($sql);							// Set style to default for any member using deactivated style							if ($action == 'deactivate')							{								$sql = 'UPDATE ' . USERS_TABLE . '									SET user_style = ' . $config['default_style'] . "									WHERE user_style = $style_id";								$db->sql_query($sql);								$sql = 'UPDATE ' . FORUMS_TABLE . '									SET forum_style = 0									WHERE forum_style = ' . $style_id;								$db->sql_query($sql);							}						}						else if ($action == 'deactivate')						{							$s_hidden_fields = array(								'i'			=> $id,								'mode'		=> $mode,								'action'	=> $action,								'style_id'	=> $style_id,							);							confirm_box(false, $user->lang['CONFIRM_OPERATION'], build_hidden_fields($s_hidden_fields));						}					break;				}				$this->frontend('style', array('details'), array('export', 'delete'));			break;			case 'template':				switch ($action)				{					// Refresh template data stored in db and clear cache					case 'refresh':						$sql = 'SELECT *							FROM ' . STYLES_TEMPLATE_TABLE . "							WHERE template_id = $style_id";						$result = $db->sql_query($sql);						$template_row = $db->sql_fetchrow($result);						$db->sql_freeresult($result);						if (!$template_row)						{							trigger_error($user->lang['NO_TEMPLATE'] . adm_back_link($this->u_action), E_USER_WARNING);						}						if (confirm_box(true))						{							$template_refreshed = '';							// Only refresh database if the template is stored in the database							if ($template_row['template_storedb'] && file_exists("{$phpbb_root_path}styles/{$template_row['template_path']}/template/"))							{								$filelist = array('' => array());								$sql = 'SELECT template_filename, template_mtime									FROM ' . STYLES_TEMPLATE_DATA_TABLE . "									WHERE template_id = $style_id";								$result = $db->sql_query($sql);								while ($row = $db->sql_fetchrow($result))								{//									if (@filemtime("{$phpbb_root_path}styles/{$template_row['template_path']}/template/" . $row['template_filename']) > $row['template_mtime'])//									{										// get folder info from the filename										if (($slash_pos = strrpos($row['template_filename'], '/')) === false)										{											$filelist[''][] = $row['template_filename'];										}										else										{											$filelist[substr($row['template_filename'], 0, $slash_pos + 1)][] = substr($row['template_filename'], $slash_pos + 1, strlen($row['template_filename']) - $slash_pos - 1);										}//									}								}								$db->sql_freeresult($result);								$this->store_templates('update', $style_id, $template_row['template_path'], $filelist);								unset($filelist);								$template_refreshed = $user->lang['TEMPLATE_REFRESHED'] . '<br />';								add_log('admin', 'LOG_TEMPLATE_REFRESHED', $template_row['template_name']);							}							$this->clear_template_cache($template_row);							trigger_error($template_refreshed . $user->lang['TEMPLATE_CACHE_CLEARED'] . adm_back_link($this->u_action));						}						else						{							confirm_box(false, ($template_row['template_storedb']) ? $user->lang['CONFIRM_TEMPLATE_REFRESH'] : $user->lang['CONFIRM_TEMPLATE_CLEAR_CACHE'], build_hidden_fields(array(								'i'			=> $id,								'mode'		=> $mode,								'action'	=> $action,								'id'		=> $style_id							)));						}					break;				}				$this->frontend('template', array('edit', 'cache', 'details'), array('refresh', 'export', 'delete'));			break;			case 'theme':				switch ($action)				{					// Refresh theme data stored in the database					case 'refresh':						$sql = 'SELECT *							FROM ' . STYLES_THEME_TABLE . "							WHERE theme_id = $style_id";						$result = $db->sql_query($sql);						$theme_row = $db->sql_fetchrow($result);						$db->sql_freeresult($result);						if (!$theme_row)						{							trigger_error($user->lang['NO_THEME'] . adm_back_link($this->u_action), E_USER_WARNING);						}						if (!$theme_row['theme_storedb'])						{							trigger_error($user->lang['THEME_ERR_REFRESH_FS'] . adm_back_link($this->u_action), E_USER_WARNING);						}						if (confirm_box(true))						{							if ($theme_row['theme_storedb'] && file_exists("{$phpbb_root_path}styles/{$theme_row['theme_path']}/theme/stylesheet.css"))							{								// Save CSS contents								$sql_ary = array(									'theme_mtime'	=> (int) filemtime("{$phpbb_root_path}styles/{$theme_row['theme_path']}/theme/stylesheet.css"),									'theme_data'	=> $this->db_theme_data($theme_row)								);								$sql = 'UPDATE ' . STYLES_THEME_TABLE . ' SET ' . $db->sql_build_array('UPDATE', $sql_ary) . "									WHERE theme_id = $style_id";								$db->sql_query($sql);								$cache->destroy('sql', STYLES_THEME_TABLE);								add_log('admin', 'LOG_THEME_REFRESHED', $theme_row['theme_name']);								trigger_error($user->lang['THEME_REFRESHED'] . adm_back_link($this->u_action));							}						}						else						{							confirm_box(false, $user->lang['CONFIRM_THEME_REFRESH'], build_hidden_fields(array(								'i'			=> $id,								'mode'		=> $mode,								'action'	=> $action,								'id'		=> $style_id							)));						}					break;				}				$this->frontend('theme', array('edit', 'details'), array('refresh', 'export', 'delete'));			break;			case 'imageset':				switch ($action)				{					case 'refresh':						$sql = 'SELECT *							FROM ' . STYLES_IMAGESET_TABLE . "							WHERE imageset_id = $style_id";						$result = $db->sql_query($sql);						$imageset_row = $db->sql_fetchrow($result);						$db->sql_freeresult($result);						if (!$imageset_row)						{							trigger_error($user->lang['NO_IMAGESET'] . adm_back_link($this->u_action), E_USER_WARNING);						}						if (confirm_box(true))						{							$sql_ary = array();							$imageset_definitions = array();							foreach ($this->imageset_keys as $topic => $key_array)							{								$imageset_definitions = array_merge($imageset_definitions, $key_array);							}							$cfg_data_imageset = parse_cfg_file("{$phpbb_root_path}styles/{$imageset_row['imageset_path']}/imageset/imageset.cfg");							$db->sql_transaction('begin');							$sql = 'DELETE FROM ' . STYLES_IMAGESET_DATA_TABLE . '								WHERE imageset_id = ' . $style_id;							$result = $db->sql_query($sql);							foreach ($cfg_data_imageset as $image_name => $value)							{								if (strpos($value, '*') !== false)								{									if (substr($value, -1, 1) === '*')									{										list($image_filename, $image_height) = explode('*', $value);										$image_width = 0;									}									else									{										list($image_filename, $image_height, $image_width) = explode('*', $value);									}								}								else								{									$image_filename = $value;									$image_height = $image_width = 0;								}								if (strpos($image_name, 'img_') === 0 && $image_filename)								{									$image_name = substr($image_name, 4);									if (in_array($image_name, $imageset_definitions))									{										$sql_ary[] = array(											'image_name'		=> (string) $image_name,											'image_filename'	=> (string) $image_filename,											'image_height'		=> (int) $image_height,											'image_width'		=> (int) $image_width,											'imageset_id'		=> (int) $style_id,											'image_lang'		=> '',										);									}								}							}							$sql = 'SELECT lang_dir								FROM ' . LANG_TABLE;							$result = $db->sql_query($sql);							while ($row = $db->sql_fetchrow($result))							{								if (@file_exists("{$phpbb_root_path}styles/{$imageset_row['imageset_path']}/imageset/{$row['lang_dir']}/imageset.cfg"))								{									$cfg_data_imageset_data = parse_cfg_file("{$phpbb_root_path}styles/{$imageset_row['imageset_path']}/imageset/{$row['lang_dir']}/imageset.cfg");									foreach ($cfg_data_imageset_data as $image_name => $value)									{										if (strpos($value, '*') !== false)										{											if (substr($value, -1, 1) === '*')											{												list($image_filename, $image_height) = explode('*', $value);												$image_width = 0;											}											else											{												list($image_filename, $image_height, $image_width) = explode('*', $value);											}										}										else										{											$image_filename = $value;											$image_height = $image_width = 0;										}										if (strpos($image_name, 'img_') === 0 && $image_filename)										{											$image_name = substr($image_name, 4);											if (in_array($image_name, $imageset_definitions))											{												$sql_ary[] = array(													'image_name'		=> (string) $image_name,													'image_filename'	=> (string) $image_filename,													'image_height'		=> (int) $image_height,													'image_width'		=> (int) $image_width,													'imageset_id'		=> (int) $style_id,													'image_lang'		=> (string) $row['lang_dir'],												);											}										}									}								}							}							$db->sql_freeresult($result);							$db->sql_multi_insert(STYLES_IMAGESET_DATA_TABLE, $sql_ary);							$db->sql_transaction('commit');							$cache->destroy('sql', STYLES_IMAGESET_DATA_TABLE);							$cache->destroy('imageset_site_logo_md5');							add_log('admin', 'LOG_IMAGESET_REFRESHED', $imageset_row['imageset_name']);							trigger_error($user->lang['IMAGESET_REFRESHED'] . adm_back_link($this->u_action));						}						else						{							confirm_box(false, $user->lang['CONFIRM_IMAGESET_REFRESH'], build_hidden_fields(array(								'i'			=> $id,								'mode'		=> $mode,								'action'	=> $action,								'id'		=> $style_id							)));						}					break;				}				$this->frontend('imageset', array('edit', 'details'), array('refresh', 'export', 'delete'));			break;		}	}	/**	* Build Frontend with supplied options	*/	function frontend($mode, $options, $actions)	{		global $user, $template, $db, $config, $phpbb_root_path, $phpEx;		$sql_from = '';		$style_count = array();		switch ($mode)		{			case 'style':				$sql_from = STYLES_TABLE;				$sql = 'SELECT user_style, COUNT(user_style) AS style_count					FROM ' . USERS_TABLE . '					GROUP BY user_style';				$result = $db->sql_query($sql);				while ($row = $db->sql_fetchrow($result))				{					$style_count[$row['user_style']] = $row['style_count'];				}				$db->sql_freeresult($result);			break;			case 'template':				$sql_from = STYLES_TEMPLATE_TABLE;			break;			case 'theme':				$sql_from = STYLES_THEME_TABLE;			break;			case 'imageset':				$sql_from = STYLES_IMAGESET_TABLE;			break;		}		$l_prefix = strtoupper($mode);		$this->page_title = 'ACP_' . $l_prefix . 'S';		$template->assign_vars(array(			'S_FRONTEND'		=> true,			'S_STYLE'			=> ($mode == 'style') ? true : false,			'L_TITLE'			=> $user->lang[$this->page_title],			'L_EXPLAIN'			=> $user->lang[$this->page_title . '_EXPLAIN'],			'L_NAME'			=> $user->lang[$l_prefix . '_NAME'],			'L_INSTALLED'		=> $user->lang['INSTALLED_' . $l_prefix],			'L_UNINSTALLED'		=> $user->lang['UNINSTALLED_' . $l_prefix],			'L_NO_UNINSTALLED'	=> $user->lang['NO_UNINSTALLED_' . $l_prefix],			'L_CREATE'			=> $user->lang['CREATE_' . $l_prefix],			'U_ACTION'			=> $this->u_action,			)		);		$sql = "SELECT *			FROM $sql_from";		$result = $db->sql_query($sql);		$installed = array();		$basis_options = '<option class="sep" value="">' . $user->lang['OPTIONAL_BASIS'] . '</option>';		while ($row = $db->sql_fetchrow($result))		{			$installed[] = $row[$mode . '_name'];			$basis_options .= '<option value="' . $row[$mode . '_id'] . '">' . $row[$mode . '_name'] . '</option>';			$stylevis = ($mode == 'style' && !$row['style_active']) ? 'activate' : 'deactivate';			$s_options = array();			foreach ($options as $option)			{				$s_options[] = '<a href="' . $this->u_action . "&amp;action=$option&amp;id=" . $row[$mode . '_id'] . '">' . $user->lang[strtoupper($option)] . '</a>';			}			$s_actions = array();			foreach ($actions as $option)			{				$s_actions[] = '<a href="' . $this->u_action . "&amp;action=$option&amp;id=" . $row[$mode . '_id'] . '">' . $user->lang[strtoupper($option)] . '</a>';			}			$template->assign_block_vars('installed', array(				'S_DEFAULT_STYLE'		=> ($mode == 'style' && $row['style_id'] == $config['default_style']) ? true : false,				'U_EDIT'				=> $this->u_action . '&amp;action=' . (($mode == 'style') ? 'details' : 'edit') . '&amp;id=' . $row[$mode . '_id'],				'U_STYLE_ACT_DEACT'		=> $this->u_action . '&amp;action=' . $stylevis . '&amp;id=' . $row[$mode . '_id'],				'L_STYLE_ACT_DEACT'		=> $user->lang['STYLE_' . strtoupper($stylevis)],				'S_OPTIONS'				=> implode(' | ', $s_options),				'S_ACTIONS'				=> implode(' | ', $s_actions),				'U_PREVIEW'				=> ($mode == 'style') ? append_sid("{$phpbb_root_path}index.$phpEx", "$mode=" . $row[$mode . '_id']) : '',				'NAME'					=> $row[$mode . '_name'],				'STYLE_COUNT'			=> ($mode == 'style' && isset($style_count[$row['style_id']])) ? $style_count[$row['style_id']] : 0,				)			);		}		$db->sql_freeresult($result);		// Grab uninstalled items		$new_ary = $cfg = array();		$dp = @opendir("{$phpbb_root_path}styles");		if ($dp)		{			while (($file = readdir($dp)) !== false)			{				if ($file[0] == '.' || !is_dir($phpbb_root_path . 'styles/' . $file))				{					continue;				}				$subpath = ($mode != 'style') ? "$mode/" : '';				if (file_exists("{$phpbb_root_path}styles/$file/$subpath$mode.cfg"))				{					if ($cfg = file("{$phpbb_root_path}styles/$file/$subpath$mode.cfg"))					{						$items = parse_cfg_file('', $cfg);						$name = (isset($items['name'])) ? trim($items['name']) : false;						if ($name && !in_array($name, $installed))						{							$new_ary[] = array(								'path'		=> $file,								'name'		=> $name,								'copyright'	=> $items['copyright'],							);						}					}				}			}			closedir($dp);		}		unset($installed);		if (sizeof($new_ary))		{			foreach ($new_ary as $cfg)			{				$template->assign_block_vars('uninstalled', array(					'NAME'			=> $cfg['name'],					'COPYRIGHT'		=> $cfg['copyright'],					'U_INSTALL'		=> $this->u_action . '&amp;action=install&amp;path=' . urlencode($cfg['path']))				);			}		}		unset($new_ary);		$template->assign_vars(array(			'S_BASIS_OPTIONS'		=> $basis_options)		);	}	/**	* Provides a template editor which allows saving changes to template files on the filesystem or in the database.	*	* @param int $template_id specifies which template set is being edited	*/	function edit_template($template_id)	{		global $phpbb_root_path, $phpEx, $config, $db, $cache, $user, $template, $safe_mode;		if (defined('PHPBB_DISABLE_ACP_EDITOR'))		{			trigger_error($user->lang['EDITOR_DISABLED'] . adm_back_link($this->u_action));		}		$this->page_title = 'EDIT_TEMPLATE';		$filelist = $filelist_cats = array();		$template_data	= utf8_normalize_nfc(request_var('template_data', '', true));		$template_data	= htmlspecialchars_decode($template_data);		$template_file	= utf8_normalize_nfc(request_var('template_file', '', true));		$text_rows		= max(5, min(999, request_var('text_rows', 20)));		$save_changes	= (isset($_POST['save'])) ? true : false;		// make sure template_file path doesn't go upwards		$template_file = preg_replace('#\.{2,}#', '.', $template_file);		// Retrieve some information about the template		$sql = 'SELECT template_storedb, template_path, template_name			FROM ' . STYLES_TEMPLATE_TABLE . "			WHERE template_id = $template_id";		$result = $db->sql_query($sql);		$template_info = $db->sql_fetchrow($result);		$db->sql_freeresult($result);		if (!$template_info)		{			trigger_error($user->lang['NO_TEMPLATE'] . adm_back_link($this->u_action), E_USER_WARNING);		}		if ($save_changes && !check_form_key('acp_styles'))		{			trigger_error($user->lang['FORM_INVALID'] . adm_back_link($this->u_action), E_USER_WARNING);		}		else if (!$save_changes)		{			add_form_key('acp_styles');		}		// save changes to the template if the user submitted any		if ($save_changes && $template_file)		{			// Get the filesystem location of the current file			$file = "{$phpbb_root_path}styles/{$template_info['template_path']}/template/$template_file";			$additional = '';			// If the template is stored on the filesystem try to write the file else store it in the database			if (!$safe_mode && !$template_info['template_storedb'] && file_exists($file) && phpbb_is_writable($file))			{				if (!($fp = @fopen($file, 'wb')))				{					// File exists and is writeable, but still not able to be written to					trigger_error(sprintf($user->lang['TEMPLATE_FILE_NOT_WRITABLE'], htmlspecialchars($template_file)) . adm_back_link($this->u_action), E_USER_WARNING);				}				fwrite($fp, $template_data);				fclose($fp);			}			else			{				$db->sql_transaction('begin');				// If it's not stored in the db yet, then update the template setting and store all template files in the db				if (!$template_info['template_storedb'])				{					if ($super = $this->get_super('template', $template_id))					{						$this->store_in_db('template', $super['template_id']);					}					else					{						$this->store_in_db('template', $template_id);					}					add_log('admin', 'LOG_TEMPLATE_EDIT_DETAILS', $template_info['template_name']);					$additional .= '<br />' . $user->lang['EDIT_TEMPLATE_STORED_DB'];				}				// Update the template_data table entry for this template file				$sql = 'UPDATE ' . STYLES_TEMPLATE_DATA_TABLE . "					SET template_data = '" . $db->sql_escape($template_data) . "', template_mtime = " . time() . "					WHERE template_id = $template_id						AND template_filename = '" . $db->sql_escape($template_file) . "'";				$db->sql_query($sql);				$db->sql_transaction('commit');			}			// destroy the cached version of the template (filename without extension)			$this->clear_template_cache($template_info, array(substr($template_file, 0, -5)));			$cache->destroy('sql', STYLES_TABLE);			add_log('admin', 'LOG_TEMPLATE_EDIT', $template_info['template_name'], $template_file);			trigger_error($user->lang['TEMPLATE_FILE_UPDATED'] . $additional . adm_back_link($this->u_action . "&amp;action=edit&amp;id=$template_id&amp;text_rows=$text_rows&amp;template_file=$template_file"));		}		// Generate a category array containing template filenames		if (!$template_info['template_storedb'])		{			$template_path = "{$phpbb_root_path}styles/{$template_info['template_path']}/template";			$filelist = filelist($template_path, '', 'html');			$filelist[''] = array_diff($filelist[''], array('bbcode.html'));			if ($template_file)			{				if (!file_exists($template_path . "/$template_file") || !($template_data = file_get_contents($template_path . "/$template_file")))				{					trigger_error($user->lang['NO_TEMPLATE'] . adm_back_link($this->u_action), E_USER_WARNING);				}			}		}		else		{			$sql = 'SELECT *				FROM ' . STYLES_TEMPLATE_DATA_TABLE . "				WHERE template_id = $template_id";			$result = $db->sql_query($sql);			$filelist = array('' => array());			while ($row = $db->sql_fetchrow($result))			{				$file_info = pathinfo($row['template_filename']);				if (($file_info['basename'] != 'bbcode') && ($file_info['extension'] == 'html'))				{					if (($file_info['dirname'] == '.') || empty($file_info['dirname']))					{						$filelist[''][] = $row['template_filename'];					}					else					{						$filelist[$file_info['dirname'] . '/'][] = $file_info['basename'];					}				}				if ($row['template_filename'] == $template_file)				{					$template_data = $row['template_data'];				}			}			$db->sql_freeresult($result);			unset($file_info);		}		if (empty($filelist['']))		{			trigger_error($user->lang['NO_TEMPLATE'] . adm_back_link($this->u_action), E_USER_WARNING);		}		// Now create the categories		$filelist_cats[''] = array();		foreach ($filelist as $pathfile => $file_ary)		{			// Use the directory name as category name			if (!empty($pathfile))			{				$filelist_cats[$pathfile] = array();				foreach ($file_ary as $file)				{					$filelist_cats[$pathfile][$pathfile . $file] = $file;				}			}			// or if it's in the main category use the word before the first underscore to group files			else			{				$cats = array();				foreach ($file_ary as $file)				{					$cats[] = substr($file, 0, strpos($file, '_'));					$filelist_cats[substr($file, 0, strpos($file, '_'))][$file] = $file;				}				$cats = array_values(array_unique($cats));				// we don't need any single element categories so put them into the misc '' category				for ($i = 0, $n = sizeof($cats); $i < $n; $i++)				{					if (sizeof($filelist_cats[$cats[$i]]) == 1 && $cats[$i] !== '')					{						$filelist_cats[''][key($filelist_cats[$cats[$i]])] = current($filelist_cats[$cats[$i]]);						unset($filelist_cats[$cats[$i]]);					}				}				unset($cats);			}		}		unset($filelist);		// Generate list of categorised template files		$tpl_options = '';		ksort($filelist_cats);		foreach ($filelist_cats as $category => $tpl_ary)		{			ksort($tpl_ary);			if (!empty($category))			{				$tpl_options .= '<option class="sep" value="">' . $category . '</option>';			}			foreach ($tpl_ary as $filename => $file)			{				$selected = ($template_file == $filename) ? ' selected="selected"' : '';				$tpl_options .= '<option value="' . $filename . '"' . $selected . '>' . $file . '</option>';			}		}		$template->assign_vars(array(			'S_EDIT_TEMPLATE'	=> true,			'S_HIDDEN_FIELDS'	=> build_hidden_fields(array('template_file' => $template_file)),			'S_TEMPLATES'		=> $tpl_options,			'U_ACTION'			=> $this->u_action . "&amp;action=edit&amp;id=$template_id&amp;text_rows=$text_rows",			'U_BACK'			=> $this->u_action,			'L_EDIT'			=> $user->lang['EDIT_TEMPLATE'],			'L_EDIT_EXPLAIN'	=> $user->lang['EDIT_TEMPLATE_EXPLAIN'],			'L_EDITOR'			=> $user->lang['TEMPLATE_EDITOR'],			'L_EDITOR_HEIGHT'	=> $user->lang['TEMPLATE_EDITOR_HEIGHT'],			'L_FILE'			=> $user->lang['TEMPLATE_FILE'],			'L_SELECT'			=> $user->lang['SELECT_TEMPLATE'],			'L_SELECTED'		=> $user->lang['SELECTED_TEMPLATE'],			'L_SELECTED_FILE'	=> $user->lang['SELECTED_TEMPLATE_FILE'],			'SELECTED_TEMPLATE'	=> $template_info['template_name'],			'TEMPLATE_FILE'		=> $template_file,			'TEMPLATE_DATA'		=> utf8_htmlspecialchars($template_data),			'TEXT_ROWS'			=> $text_rows)		);	}	/**	* Allows the admin to view cached versions of template files and clear single template cache files	*	* @param int $template_id specifies which template's cache is shown	*/	function template_cache($template_id)	{		global $phpbb_root_path, $phpEx, $config, $db, $cache, $user, $template;		$source		= str_replace('/', '.', request_var('source', ''));		$file_ary	= array_diff(request_var('delete', array('')), array(''));		$submit		= isset($_POST['submit']) ? true : false;		$sql = 'SELECT *			FROM ' . STYLES_TEMPLATE_TABLE . "			WHERE template_id = $template_id";		$result = $db->sql_query($sql);		$template_row = $db->sql_fetchrow($result);		$db->sql_freeresult($result);		if (!$template_row)		{			trigger_error($user->lang['NO_TEMPLATE'] . adm_back_link($this->u_action), E_USER_WARNING);		}		// User wants to delete one or more files ...		if ($submit && $file_ary)		{			$this->clear_template_cache($template_row, $file_ary);			trigger_error($user->lang['TEMPLATE_CACHE_CLEARED'] . adm_back_link($this->u_action . "&amp;action=cache&amp;id=$template_id"));		}		$cache_prefix = 'tpl_' . str_replace('_', '-', $template_row['template_path']);		// Someone wants to see the cached source ... so we'll highlight it,		// add line numbers and indent it appropriately. This could be nasty		// on larger source files ...		if ($source && file_exists("{$phpbb_root_path}cache/{$cache_prefix}_$source.html.$phpEx"))		{			adm_page_header($user->lang['TEMPLATE_CACHE']);			$template->set_filenames(array(				'body'	=> 'viewsource.html')			);			$template->assign_vars(array(				'FILENAME'	=> str_replace('.', '/', $source) . '.html')			);			$code = str_replace(array("\r\n", "\r"), array("\n", "\n"), file_get_contents("{$phpbb_root_path}cache/{$cache_prefix}_$source.html.$phpEx"));			$conf = array('highlight.bg', 'highlight.comment', 'highlight.default', 'highlight.html', 'highlight.keyword', 'highlight.string');			foreach ($conf as $ini_var)			{				@ini_set($ini_var, str_replace('highlight.', 'syntax', $ini_var));			}			$marker = 'MARKER' . time();			$code = highlight_string(str_replace("\n", $marker, $code), true);			$code = str_replace($marker, "\n", $code);			$str_from = array('<span style="color: ', '<font color="syntax', '</font>', '<code>', '</code>','[', ']', '.', ':');			$str_to = array('<span class="', '<span class="syntax', '</span>', '', '', '&#91;', '&#93;', '&#46;', '&#58;');			$code = str_replace($str_from, $str_to, $code);			$code = preg_replace('#^(<span class="[a-z_]+">)\n?(.*?)\n?(</span>)$#ism', '$1$2$3', $code);			$code = substr($code, strlen('<span class="syntaxhtml">'));			$code = substr($code, 0, -1 * strlen('</ span>'));			$code = explode("\n", $code);			foreach ($code as $key => $line)			{				$template->assign_block_vars('source', array(					'LINENUM'	=> $key + 1,					'LINE'		=> preg_replace('#([^ ;])&nbsp;([^ &])#', '$1 $2', $line))				);				unset($code[$key]);			}			adm_page_footer();		}		$filemtime = array();		if ($template_row['template_storedb'])		{			$ids = array();			if (isset($template_row['template_inherits_id']) && $template_row['template_inherits_id'])			{				$ids[] = $template_row['template_inherits_id'];			}			$ids[] = $template_row['template_id'];			$filemtime 			= array();			$file_template_db	= array();			foreach ($ids as $id)			{				$sql = 'SELECT template_filename, template_mtime					FROM ' . STYLES_TEMPLATE_DATA_TABLE . "					WHERE template_id = $id";				$result = $db->sql_query($sql);				while ($row = $db->sql_fetchrow($result))				{					$filemtime[$row['template_filename']] = $row['template_mtime'];					$file_template_db[$row['template_filename']] = $id;				}				$db->sql_freeresult($result);			}		}		// Get a list of cached template files and then retrieve additional information about them		$file_ary = $this->template_cache_filelist($template_row['template_path']);		foreach ($file_ary as $file)		{			$file		= str_replace('/', '.', $file);			// perform some dirty guessing to get the path right.			// We assume that three dots in a row were '../'			$tpl_file	= str_replace('.', '/', $file);			$tpl_file	= str_replace('///', '../', $tpl_file);			$filename = "{$cache_prefix}_$file.html.$phpEx";			if (!file_exists("{$phpbb_root_path}cache/$filename"))			{				continue;			}			$file_tpl = "{$phpbb_root_path}styles/{$template_row['template_path']}/template/$tpl_file.html";			$inherited = false;			if (isset($template_row['template_inherits_id']) && $template_row['template_inherits_id'])			{				if (!$template_row['template_storedb'])				{					if (!file_exists($file_tpl))					{						$file_tpl = "{$phpbb_root_path}styles/{$template_row['template_inherit_path']}/template/$tpl_file.html";						$inherited = true;					}				}				else				{					if ($file_template_db[$file . '.html'] == $template_row['template_inherits_id'])					{						$file_tpl = "{$phpbb_root_path}styles/{$template_row['template_inherit_path']}/template/$tpl_file.html";						$inherited = true;					}				}			}			// Correct the filename if it is stored in database and the file is in a subfolder.			if ($template_row['template_storedb'])			{				$file = str_replace('.', '/', $file);			}			$template->assign_block_vars('file', array(				'U_VIEWSOURCE'	=> $this->u_action . "&amp;action=cache&amp;id=$template_id&amp;source=$file",				'CACHED'		=> $user->format_date(filemtime("{$phpbb_root_path}cache/$filename")),				'FILENAME'		=> $file,				'FILENAME_PATH'	=> $file_tpl,				'FILESIZE'		=> get_formatted_filesize(filesize("{$phpbb_root_path}cache/$filename")),				'MODIFIED'		=> $user->format_date((!$template_row['template_storedb']) ? filemtime($file_tpl) : $filemtime[$file . '.html']))			);		}		unset($filemtime);		$template->assign_vars(array(			'S_CACHE'			=> true,			'S_TEMPLATE'		=> true,			'U_ACTION'			=> $this->u_action . "&amp;action=cache&amp;id=$template_id",			'U_BACK'			=> $this->u_action)		);	}	/**	* Provides a css editor and a basic easier to use stylesheet editing tool for less experienced (or lazy) users	*	* @param int $theme_id specifies which theme is being edited	*/	function edit_theme($theme_id)	{		global $phpbb_root_path, $phpEx, $config, $db, $cache, $user, $template, $safe_mode;		$this->page_title = 'EDIT_THEME';		$filelist = $filelist_cats = array();		$theme_data		= utf8_normalize_nfc(request_var('template_data', '', true));		$theme_data		= htmlspecialchars_decode($theme_data);		$theme_file		= utf8_normalize_nfc(request_var('template_file', '', true));		$text_rows		= max(5, min(999, request_var('text_rows', 20)));		$save_changes	= (isset($_POST['save'])) ? true : false;		// make sure theme_file path doesn't go upwards		$theme_file = str_replace('..', '.', $theme_file);		// Retrieve some information about the theme		$sql = 'SELECT theme_storedb, theme_path, theme_name, theme_data			FROM ' . STYLES_THEME_TABLE . "			WHERE theme_id = $theme_id";		$result = $db->sql_query($sql);		if (!($theme_info = $db->sql_fetchrow($result)))		{			trigger_error($user->lang['NO_THEME'] . adm_back_link($this->u_action), E_USER_WARNING);		}		$db->sql_freeresult($result);		// save changes to the theme if the user submitted any		if ($save_changes)		{			// Get the filesystem location of the current file			$file = "{$phpbb_root_path}styles/{$theme_info['theme_path']}/theme/$theme_file";			$additional = '';			$message = $user->lang['THEME_UPDATED'];			// If the theme is stored on the filesystem try to write the file else store it in the database			if (!$safe_mode && !$theme_info['theme_storedb'] && file_exists($file) && phpbb_is_writable($file))			{				if (!($fp = @fopen($file, 'wb')))				{					trigger_error($user->lang['NO_THEME'] . adm_back_link($this->u_action), E_USER_WARNING);				}				fwrite($fp, $theme_data);				fclose($fp);			}			else			{				// Write stylesheet to db				$sql_ary = array(					'theme_mtime'		=> time(),					'theme_storedb'		=> 1,					'theme_data'		=> $this->db_theme_data($theme_info, $theme_data),				);				$sql = 'UPDATE ' . STYLES_THEME_TABLE . '					SET ' . $db->sql_build_array('UPDATE', $sql_ary) . '					WHERE theme_id = ' . $theme_id;				$db->sql_query($sql);				$cache->destroy('sql', STYLES_THEME_TABLE);				// notify the user if the theme was not stored in the db before his modification				if (!$theme_info['theme_storedb'])				{					add_log('admin', 'LOG_THEME_EDIT_DETAILS', $theme_info['theme_name']);					$message .= '<br />' . $user->lang['EDIT_THEME_STORED_DB'];				}			}			$cache->destroy('sql', STYLES_THEME_TABLE);			add_log('admin', (!$theme_info['theme_storedb']) ? 'LOG_THEME_EDIT_FILE' : 'LOG_THEME_EDIT', $theme_info['theme_name'], (!$theme_info['theme_storedb']) ? $theme_file : '');			trigger_error($message . adm_back_link($this->u_action . "&amp;action=edit&amp;id=$theme_id&amp;template_file=$theme_file&amp;text_rows=$text_rows"));		}		// Generate a category array containing theme filenames		if (!$theme_info['theme_storedb'])		{			$theme_path = "{$phpbb_root_path}styles/{$theme_info['theme_path']}/theme";			$filelist = filelist($theme_path, '', 'css');			if ($theme_file)			{				if (!file_exists($theme_path . "/$theme_file") || !($theme_data = file_get_contents($theme_path . "/$theme_file")))				{					trigger_error($user->lang['NO_THEME'] . adm_back_link($this->u_action), E_USER_WARNING);				}			}		}		else		{			$theme_data = &$theme_info['theme_data'];		}		// Now create the categories		$filelist_cats[''] = array();		foreach ($filelist as $pathfile => $file_ary)		{			// Use the directory name as category name			if (!empty($pathfile))			{				$filelist_cats[$pathfile] = array();				foreach ($file_ary as $file)				{					$filelist_cats[$pathfile][$pathfile . $file] = $file;				}			}			// or if it's in the main category use the word before the first underscore to group files			else			{				$cats = array();				foreach ($file_ary as $file)				{					$cats[] = substr($file, 0, strpos($file, '_'));					$filelist_cats[substr($file, 0, strpos($file, '_'))][$file] = $file;				}				$cats = array_values(array_unique($cats));				// we don't need any single element categories so put them into the misc '' category				for ($i = 0, $n = sizeof($cats); $i < $n; $i++)				{					if (sizeof($filelist_cats[$cats[$i]]) == 1 && $cats[$i] !== '')					{						$filelist_cats[''][key($filelist_cats[$cats[$i]])] = current($filelist_cats[$cats[$i]]);						unset($filelist_cats[$cats[$i]]);					}				}				unset($cats);			}		}		unset($filelist);		// Generate list of categorised theme files		$tpl_options = '';		ksort($filelist_cats);		foreach ($filelist_cats as $category => $tpl_ary)		{			ksort($tpl_ary);			if (!empty($category))			{				$tpl_options .= '<option class="sep" value="">' . $category . '</option>';			}			foreach ($tpl_ary as $filename => $file)			{				$selected = ($theme_file == $filename) ? ' selected="selected"' : '';				$tpl_options .= '<option value="' . $filename . '"' . $selected . '>' . $file . '</option>';			}		}		$template->assign_vars(array(			'S_EDIT_THEME'		=> true,			'S_HIDDEN_FIELDS'	=> build_hidden_fields(array('template_file' => $theme_file)),			'S_THEME_IN_DB'		=> $theme_info['theme_storedb'],			'S_TEMPLATES'		=> $tpl_options,			'U_ACTION'			=> $this->u_action . "&amp;action=edit&amp;id=$theme_id&amp;text_rows=$text_rows",			'U_BACK'			=> $this->u_action,			'L_EDIT'			=> $user->lang['EDIT_THEME'],			'L_EDIT_EXPLAIN'	=> $user->lang['EDIT_THEME_EXPLAIN'],			'L_EDITOR'			=> $user->lang['THEME_EDITOR'],			'L_EDITOR_HEIGHT'	=> $user->lang['THEME_EDITOR_HEIGHT'],			'L_FILE'			=> $user->lang['THEME_FILE'],			'L_SELECT'			=> $user->lang['SELECT_THEME'],			'L_SELECTED'		=> $user->lang['SELECTED_THEME'],			'L_SELECTED_FILE'	=> $user->lang['SELECTED_THEME_FILE'],			'SELECTED_TEMPLATE'	=> $theme_info['theme_name'],			'TEMPLATE_FILE'		=> $theme_file,			'TEMPLATE_DATA'		=> utf8_htmlspecialchars($theme_data),			'TEXT_ROWS'			=> $text_rows)		);	}	/**	* Edit imagesets	*	* @param int $imageset_id specifies which imageset is being edited	*/	function edit_imageset($imageset_id)	{		global $db, $user, $phpbb_root_path, $cache, $template;		$this->page_title = 'EDIT_IMAGESET';		if (!$imageset_id)		{			trigger_error($user->lang['NO_IMAGESET'] . adm_back_link($this->u_action), E_USER_WARNING);		}		$update		= (isset($_POST['update'])) ? true : false;		$imgname	= request_var('imgname', 'site_logo');		$imgname	= preg_replace('#[^a-z0-9\-+_]#i', '', $imgname);		$sql_extra = $imgnamelang = '';		$sql = 'SELECT imageset_path, imageset_name			FROM ' . STYLES_IMAGESET_TABLE . "			WHERE imageset_id = $imageset_id";		$result = $db->sql_query($sql);		$imageset_row = $db->sql_fetchrow($result);		$db->sql_freeresult($result);		if (!$imageset_row)		{			trigger_error($user->lang['NO_IMAGESET'] . adm_back_link($this->u_action), E_USER_WARNING);		}		$imageset_path		= $imageset_row['imageset_path'];		$imageset_name		= $imageset_row['imageset_name'];		if (strpos($imgname, '-') !== false)		{			list($imgname, $imgnamelang) = explode('-', $imgname);			$sql_extra = " AND image_lang IN ('" . $db->sql_escape($imgnamelang) . "', '')";		}		$sql = 'SELECT image_filename, image_width, image_height, image_lang, image_id			FROM ' . STYLES_IMAGESET_DATA_TABLE . "			WHERE imageset_id = $imageset_id				AND image_name = '" . $db->sql_escape($imgname) . "'$sql_extra";		$result = $db->sql_query($sql);		$imageset_data_row = $db->sql_fetchrow($result);		$db->sql_freeresult($result);		$image_filename	= $imageset_data_row['image_filename'];		$image_width	= $imageset_data_row['image_width'];		$image_height	= $imageset_data_row['image_height'];		$image_lang		= $imageset_data_row['image_lang'];		$image_id		= $imageset_data_row['image_id'];		$imgsize		= ($imageset_data_row['image_width'] && $imageset_data_row['image_height']) ? 1 : 0;		// Check to see whether the selected image exists in the table		$valid_name = ($update) ? false : true;		foreach ($this->imageset_keys as $category => $img_ary)		{			if (in_array($imgname, $img_ary))			{				$valid_name = true;				break;			}		}		if ($update && isset($_POST['imgpath']) && $valid_name)		{			// If imgwidth and imgheight are non-zero grab the actual size			// from the image itself ... we ignore width settings for the poll center image			$imgwidth	= request_var('imgwidth', 0);			$imgheight	= request_var('imgheight', 0);			$imgsize	= request_var('imgsize', 0);			$imgpath	= request_var('imgpath', '');			$imgpath	= str_replace('..', '.', $imgpath);			// If no dimensions selected, we reset width and height to 0 ;)			if (!$imgsize)			{				$imgwidth = $imgheight = 0;			}			$imglang = '';			if ($imgpath && !file_exists("{$phpbb_root_path}styles/$imageset_path/imageset/$imgpath"))			{				trigger_error($user->lang['NO_IMAGE_ERROR'] . adm_back_link($this->u_action), E_USER_WARNING);			}			// Determine width/height. If dimensions included and no width/height given, we detect them automatically...			if ($imgsize && $imgpath)			{				if (!$imgwidth || !$imgheight)				{					list($imgwidth_file, $imgheight_file) = getimagesize("{$phpbb_root_path}styles/$imageset_path/imageset/$imgpath");					$imgwidth = ($imgwidth) ? $imgwidth : $imgwidth_file;					$imgheight = ($imgheight) ? $imgheight : $imgheight_file;				}				$imgwidth	= ($imgname != 'poll_center') ? (int) $imgwidth : 0;				$imgheight	= (int) $imgheight;			}			if (strpos($imgpath, '/') !== false)			{				list($imglang, $imgfilename) = explode('/', $imgpath);			}			else			{				$imgfilename = $imgpath;			}			$sql_ary = array(				'image_filename'	=> (string) $imgfilename,				'image_width'		=> (int) $imgwidth,				'image_height'		=> (int) $imgheight,				'image_lang'		=> (string) $imglang,			);			// already exists			if ($imageset_data_row)			{				$sql = 'UPDATE ' . STYLES_IMAGESET_DATA_TABLE . '					SET ' . $db->sql_build_array('UPDATE', $sql_ary) . "					WHERE image_id = $image_id";				$db->sql_query($sql);			}			// does not exist			else if (!$imageset_data_row)			{				$sql_ary['image_name']	= $imgname;				$sql_ary['imageset_id']	= (int) $imageset_id;				$db->sql_query('INSERT INTO ' . STYLES_IMAGESET_DATA_TABLE . ' ' . $db->sql_build_array('INSERT', $sql_ary));			}			$cache->destroy('sql', STYLES_IMAGESET_DATA_TABLE);			add_log('admin', 'LOG_IMAGESET_EDIT', $imageset_name);			$template->assign_var('SUCCESS', true);			$image_filename = $imgfilename;			$image_width	= $imgwidth;			$image_height	= $imgheight;			$image_lang		= $imglang;		}		$imglang = '';		$imagesetlist = array('nolang' => array(), 'lang' => array());		$langs = array();		$dir = "{$phpbb_root_path}styles/$imageset_path/imageset";		$dp = @opendir($dir);		if ($dp)		{			while (($file = readdir($dp)) !== false)			{				if ($file[0] != '.' && strtoupper($file) != 'CVS' && !is_file($dir . '/' . $file) && !is_link($dir . '/' . $file))				{					$langs[] = $file;				}				else if (preg_match('#\.(?:gif|jpg|png)$#', $file))				{					$imagesetlist['nolang'][] = $file;				}			}			if ($sql_extra)			{				$dp2 = @opendir("$dir/$imgnamelang");				if ($dp2)				{					while (($file2 = readdir($dp2)) !== false)					{						if (preg_match('#\.(?:gif|jpg|png)$#', $file2))						{							$imagesetlist['lang'][] = "$imgnamelang/$file2";						}					}					closedir($dp2);				}			}			closedir($dp);		}		// Generate list of image options		$img_options = '';		foreach ($this->imageset_keys as $category => $img_ary)		{			$template->assign_block_vars('category', array(				'NAME'			=> $user->lang['IMG_CAT_' . strtoupper($category)]			));			foreach ($img_ary as $img)			{				if ($category == 'buttons')				{					foreach ($langs as $language)					{						$template->assign_block_vars('category.images', array(							'SELECTED'			=> ($img == $imgname && $language == $imgnamelang),							'VALUE'				=> $img . '-' . $language,							'TEXT'				=> $user->lang['IMG_' . strtoupper($img)] . ' [ ' . $language . ' ]'						));					}				}				else				{					$template->assign_block_vars('category.images', array(						'SELECTED'			=> ($img == $imgname),						'VALUE'				=> $img,						'TEXT'				=> (($category == 'custom') ? $img : $user->lang['IMG_' . strtoupper($img)])					));				}			}		}		// Make sure the list of possible images is sorted alphabetically		sort($imagesetlist['lang']);		sort($imagesetlist['nolang']);		$image_found = false;		$img_val = '';		foreach ($imagesetlist as $type => $img_ary)		{			if ($type !== 'lang' || $sql_extra)			{				$template->assign_block_vars('imagesetlist', array(					'TYPE'	=> ($type == 'lang')				));			}			foreach ($img_ary as $img)			{				$imgtext = preg_replace('/^([^\/]+\/)/', '', $img);				$selected = (!empty($imgname) && strpos($image_filename, $imgtext) !== false);				if ($selected)				{					$image_found = true;					$img_val = htmlspecialchars($img);				}				$template->assign_block_vars('imagesetlist.images', array(					'SELECTED'			=> $selected,					'TEXT'				=> $imgtext,					'VALUE'				=> htmlspecialchars($img)				));			}		}		$imgsize_bool = (!empty($imgname) && $image_width && $image_height) ? true : false;		$image_request = '../styles/' . $imageset_path . '/imageset/' . ($image_lang ? $imgnamelang . '/' : '') . $image_filename;		$template->assign_vars(array(			'S_EDIT_IMAGESET'	=> true,			'L_TITLE'			=> $user->lang[$this->page_title],			'L_EXPLAIN'			=> $user->lang[$this->page_title . '_EXPLAIN'],			'IMAGE_OPTIONS'		=> $img_options,			'IMAGE_SIZE'		=> $image_width,			'IMAGE_HEIGHT'		=> $image_height,			'IMAGE_REQUEST'		=> (empty($image_filename)) ? 'images/no_image.png' : $image_request,			'U_ACTION'			=> $this->u_action . "&amp;action=edit&amp;id=$imageset_id",			'U_BACK'			=> $this->u_action,			'NAME'				=> $imageset_name,			'A_NAME'			=> addslashes($imageset_name),			'PATH'				=> $imageset_path,			'A_PATH'			=> addslashes($imageset_path),			'ERROR'				=> !$valid_name,			'IMG_SRC'			=> ($image_found) ? '../styles/' . $imageset_path . '/imageset/' . $img_val : 'images/no_image.png',			'IMAGE_SELECT'		=> $image_found		));	}	/**	* Remove style/template/theme/imageset	*/	function remove($mode, $style_id)	{		global $db, $template, $user, $phpbb_root_path, $cache, $config;		$new_id = request_var('new_id', 0);		$update = (isset($_POST['update'])) ? true : false;		$sql_where = '';		switch ($mode)		{			case 'style':				$sql_from = STYLES_TABLE;				$sql_select = 'style_id, style_name, template_id, theme_id, imageset_id';				$sql_where = 'AND style_active = 1';			break;			case 'template':				$sql_from = STYLES_TEMPLATE_TABLE;				$sql_select = 'template_id, template_name, template_path, template_storedb';			break;			case 'theme':				$sql_from = STYLES_THEME_TABLE;				$sql_select = 'theme_id, theme_name, theme_path, theme_storedb';			break;			case 'imageset':				$sql_from = STYLES_IMAGESET_TABLE;				$sql_select = 'imageset_id, imageset_name, imageset_path';			break;		}		if ($mode === 'template' && ($conflicts = $this->check_inheritance($mode, $style_id)))		{			$l_type = strtoupper($mode);			$msg = $user->lang[$l_type . '_DELETE_DEPENDENT'];			foreach ($conflicts as $id => $values)			{				$msg .= '<br />' . $values['template_name'];			}			trigger_error($msg . adm_back_link($this->u_action), E_USER_WARNING);		}		$l_prefix = strtoupper($mode);		$sql = "SELECT $sql_select			FROM $sql_from			WHERE {$mode}_id = $style_id";		$result = $db->sql_query($sql);		$style_row = $db->sql_fetchrow($result);		$db->sql_freeresult($result);		if (!$style_row)		{			trigger_error($user->lang['NO_' . $l_prefix] . adm_back_link($this->u_action), E_USER_WARNING);		}		$s_only_component = $this->display_component_options($mode, $style_row[$mode . '_id'], $style_row);		if ($s_only_component)		{			trigger_error($user->lang['ONLY_' . $l_prefix] . adm_back_link($this->u_action), E_USER_WARNING);		}		if ($update)		{			if ($mode == 'style')			{				$sql = "DELETE FROM $sql_from					WHERE {$mode}_id = $style_id";				$db->sql_query($sql);				$sql = 'UPDATE ' . USERS_TABLE . "					SET user_style = $new_id					WHERE user_style = $style_id";				$db->sql_query($sql);				$sql = 'UPDATE ' . FORUMS_TABLE . "					SET forum_style = $new_id					WHERE forum_style = $style_id";				$db->sql_query($sql);				if ($style_id == $config['default_style'])				{					set_config('default_style', $new_id);				}				// Remove the components				$components = array('template', 'theme', 'imageset');				foreach ($components as $component)				{					$new_id = request_var('new_' . $component . '_id', 0);					$component_id = $style_row[$component . '_id'];					$this->remove_component($component, $component_id, $new_id, $style_id);				}			}			else			{				$this->remove_component($mode, $style_id, $new_id);			}			$cache->destroy('sql', STYLES_TABLE);			add_log('admin', 'LOG_' . $l_prefix . '_DELETE', $style_row[$mode . '_name']);			$message = ($mode != 'style') ? $l_prefix . '_DELETED_FS' : $l_prefix . '_DELETED';			trigger_error($user->lang[$message] . adm_back_link($this->u_action));		}		$this->page_title = 'DELETE_' . $l_prefix;		$template->assign_vars(array(			'S_DELETE'			=> true,			'L_TITLE'			=> $user->lang[$this->page_title],			'L_EXPLAIN'			=> $user->lang[$this->page_title . '_EXPLAIN'],			'L_NAME'			=> $user->lang[$l_prefix . '_NAME'],			'L_REPLACE'			=> $user->lang['REPLACE_' . $l_prefix],			'L_REPLACE_EXPLAIN'	=> $user->lang['REPLACE_' . $l_prefix . '_EXPLAIN'],			'U_ACTION'		=> $this->u_action . "&amp;action=delete&amp;id=$style_id",			'U_BACK'		=> $this->u_action,			'NAME'			=> $style_row[$mode . '_name'],			)		);		if ($mode == 'style')		{			$template->assign_vars(array(				'S_DELETE_STYLE'		=> true,			));		}	}	/**	* Remove template/theme/imageset entry from the database	*/	function remove_component($component, $component_id, $new_id, $style_id = false)	{		global $db;		if (($new_id == 0) || ($component === 'template' && ($conflicts = $this->check_inheritance($component, $component_id))))		{			// We can not delete the template, as the user wants to keep the component or an other template is inheriting from this one.			return;		}		$component_in_use = array();		if ($component != 'style')		{			$component_in_use = $this->component_in_use($component, $component_id, $style_id);		}		if (($new_id == -1) && !empty($component_in_use))		{			// We can not delete the component, as it is still in use			return;		}		if ($component == 'imageset')		{			$sql = 'DELETE FROM ' . STYLES_IMAGESET_DATA_TABLE . "				WHERE imageset_id = $component_id";			$db->sql_query($sql);		}		switch ($component)		{			case 'template':				$sql_from = STYLES_TEMPLATE_TABLE;			break;			case 'theme':				$sql_from = STYLES_THEME_TABLE;			break;			case 'imageset':				$sql_from = STYLES_IMAGESET_TABLE;;			break;		}		$sql = "DELETE FROM $sql_from			WHERE {$component}_id = $component_id";		$db->sql_query($sql);		$sql = 'UPDATE ' . STYLES_TABLE . "			SET {$component}_id = $new_id			WHERE {$component}_id = $component_id";		$db->sql_query($sql);	}	/**	* Display the options which can be used to replace a style/template/theme/imageset	*	* @return boolean Returns true if the component is the only component and can not be deleted.	*/	function display_component_options($component, $component_id, $style_row = false, $style_id = false)	{		global $db, $template, $user;		$is_only_component = true;		$component_in_use = array();		if ($component != 'style')		{			$component_in_use = $this->component_in_use($component, $component_id, $style_id);		}		$sql_where = '';		switch ($component)		{			case 'style':				$sql_from = STYLES_TABLE;				$sql_where = 'WHERE style_active = 1';			break;			case 'template':				$sql_from = STYLES_TEMPLATE_TABLE;				$sql_where = 'WHERE template_inherits_id <> ' . $component_id;			break;			case 'theme':				$sql_from = STYLES_THEME_TABLE;			break;			case 'imageset':				$sql_from = STYLES_IMAGESET_TABLE;			break;		}		$s_options = '';		if (($component != 'style') && empty($component_in_use))		{			// If it is not in use, there must be another component			$is_only_component = false;			$sql = "SELECT {$component}_id, {$component}_name				FROM $sql_from				WHERE {$component}_id = {$component_id}";			$result = $db->sql_query($sql);			$row = $db->sql_fetchrow($result);			$db->sql_freeresult($result);			$s_options .= '<option value="-1" selected="selected">' . $user->lang['DELETE_' . strtoupper($component)] . '</option>';			$s_options .= '<option value="0">' . sprintf($user->lang['KEEP_' . strtoupper($component)], $row[$component . '_name']) . '</option>';		}		else		{			$sql = "SELECT {$component}_id, {$component}_name				FROM $sql_from				$sql_where				ORDER BY {$component}_name ASC";			$result = $db->sql_query($sql);			$s_keep_option = $s_options = '';			while ($row = $db->sql_fetchrow($result))			{				if ($row[$component . '_id'] != $component_id)				{					$is_only_component = false;					$s_options .= '<option value="' . $row[$component . '_id'] . '">' . sprintf($user->lang['REPLACE_WITH_OPTION'], $row[$component . '_name']) . '</option>';				}				else if ($component != 'style')				{					$s_keep_option = '<option value="0" selected="selected">' . sprintf($user->lang['KEEP_' . strtoupper($component)], $row[$component . '_name']) . '</option>';				}			}			$db->sql_freeresult($result);			$s_options = $s_keep_option . $s_options;		}		if (!$style_row)		{			$template->assign_var('S_REPLACE_' . strtoupper($component) . '_OPTIONS', $s_options);		}		else		{			$template->assign_var('S_REPLACE_OPTIONS', $s_options);			if ($component == 'style')			{				$components = array('template', 'theme', 'imageset');				foreach ($components as $component)				{					$this->display_component_options($component, $style_row[$component . '_id'], false, $component_id, true);				}			}		}		return $is_only_component;	}	/**	* Check whether the component is still used by another style or component	*/	function component_in_use($component, $component_id, $style_id = false)	{		global $db;		$component_in_use = array();		if ($style_id)		{			$sql = 'SELECT style_id, style_name				FROM ' . STYLES_TABLE . "				WHERE {$component}_id = {$component_id}					AND style_id <> {$style_id}				ORDER BY style_name ASC";		}		else		{			$sql = 'SELECT style_id, style_name				FROM ' . STYLES_TABLE . "				WHERE {$component}_id = {$component_id}				ORDER BY style_name ASC";		}		$result = $db->sql_query($sql);		while ($row = $db->sql_fetchrow($result))		{			$component_in_use[] = $row['style_name'];		}		$db->sql_freeresult($result);		if ($component === 'template' && ($conflicts = $this->check_inheritance($component, $component_id)))		{			foreach ($conflicts as $temp_id => $conflict_data)			{				$component_in_use[] = $conflict_data['template_name'];			}		}		return $component_in_use;	}	/**	* Export style or style elements	*/	function export($mode, $style_id)	{		global $db, $template, $user, $phpbb_root_path, $cache, $phpEx, $config;		$update = (isset($_POST['update'])) ? true : false;		$inc_template = request_var('inc_template', 0);		$inc_theme = request_var('inc_theme', 0);		$inc_imageset = request_var('inc_imageset', 0);		$store = request_var('store', 0);		$format = request_var('format', '');		$error = array();		$methods = array('tar');		$available_methods = array('tar.gz' => 'zlib', 'tar.bz2' => 'bz2', 'zip' => 'zlib');		foreach ($available_methods as $type => $module)		{			if (!@extension_loaded($module))			{				continue;			}			$methods[] = $type;		}		if (!in_array($format, $methods))		{			$format = 'tar';		}		switch ($mode)		{			case 'style':				if ($update && ($inc_template + $inc_theme + $inc_imageset) < 1)				{					$error[] = $user->lang['STYLE_ERR_MORE_ELEMENTS'];				}				$name = 'style_name';				$sql_select = 's.style_id, s.style_name, s.style_copyright';				$sql_select .= ($inc_template) ? ', t.*' : ', t.template_name';				$sql_select .= ($inc_theme) ? ', c.*' : ', c.theme_name';				$sql_select .= ($inc_imageset) ? ', i.*' : ', i.imageset_name';				$sql_from = STYLES_TABLE . ' s, ' . STYLES_TEMPLATE_TABLE . ' t, ' . STYLES_THEME_TABLE . ' c, ' . STYLES_IMAGESET_TABLE . ' i';				$sql_where = "s.style_id = $style_id AND t.template_id = s.template_id AND c.theme_id = s.theme_id AND i.imageset_id = s.imageset_id";				$l_prefix = 'STYLE';			break;			case 'template':				$name = 'template_name';				$sql_select = '*';				$sql_from = STYLES_TEMPLATE_TABLE;				$sql_where = "template_id = $style_id";				$l_prefix = 'TEMPLATE';			break;			case 'theme':				$name = 'theme_name';				$sql_select = '*';				$sql_from = STYLES_THEME_TABLE;				$sql_where = "theme_id = $style_id";				$l_prefix = 'THEME';			break;			case 'imageset':				$name = 'imageset_name';				$sql_select = '*';				$sql_from = STYLES_IMAGESET_TABLE;				$sql_where = "imageset_id = $style_id";				$l_prefix = 'IMAGESET';			break;		}		if ($update && !sizeof($error))		{			$sql = "SELECT $sql_select				FROM $sql_from				WHERE $sql_where";			$result = $db->sql_query($sql);			$style_row = $db->sql_fetchrow($result);			$db->sql_freeresult($result);			if (!$style_row)			{				trigger_error($user->lang['NO_' . $l_prefix] . adm_back_link($this->u_action), E_USER_WARNING);			}			$var_ary = array('style_id', 'style_name', 'style_copyright', 'template_id', 'template_name', 'template_path', 'template_copyright', 'template_storedb', 'template_inherits_id', 'bbcode_bitfield', 'theme_id', 'theme_name', 'theme_path', 'theme_copyright', 'theme_storedb', 'theme_mtime', 'theme_data', 'imageset_id', 'imageset_name', 'imageset_path', 'imageset_copyright');			foreach ($var_ary as $var)			{				if (!isset($style_row[$var]))				{					$style_row[$var] = '';				}			}			$files = $data = array();			if ($mode == 'style')			{				$style_cfg = str_replace(array('{MODE}', '{NAME}', '{COPYRIGHT}', '{VERSION}'), array($mode, $style_row['style_name'], $style_row['style_copyright'], $config['version']), $this->style_cfg);				$style_cfg .= (!$inc_template) ? "\nrequired_template = {$style_row['template_name']}" : '';				$style_cfg .= (!$inc_theme) ? "\nrequired_theme = {$style_row['theme_name']}" : '';				$style_cfg .= (!$inc_imageset) ? "\nrequired_imageset = {$style_row['imageset_name']}" : '';				$data[] = array(					'src'		=> $style_cfg,					'prefix'	=> 'style.cfg'				);				unset($style_cfg);			}			// Export template core code			if ($mode == 'template' || $inc_template)			{				$template_cfg = str_replace(array('{MODE}', '{NAME}', '{COPYRIGHT}', '{VERSION}'), array($mode, $style_row['template_name'], $style_row['template_copyright'], $config['version']), $this->template_cfg);				$use_template_name = '';				// Add the inherit from variable, depending on it's use...				if ($style_row['template_inherits_id'])				{					// Get the template name					$sql = 'SELECT template_name						FROM ' . STYLES_TEMPLATE_TABLE . '						WHERE template_id = ' . (int) $style_row['template_inherits_id'];					$result = $db->sql_query($sql);					$use_template_name = (string) $db->sql_fetchfield('template_name');					$db->sql_freeresult($result);				}				$template_cfg .= ($use_template_name) ? "\ninherit_from = $use_template_name" : "\n#inherit_from = ";				$template_cfg .= "\n\nbbcode_bitfield = {$style_row['bbcode_bitfield']}";				$data[] = array(					'src'		=> $template_cfg,					'prefix'	=> 'template/template.cfg'				);				// This is potentially nasty memory-wise ...				if (!$style_row['template_storedb'])				{					$files[] = array(						'src'		=> "styles/{$style_row['template_path']}/template/",						'prefix-'	=> "styles/{$style_row['template_path']}/",						'prefix+'	=> false,						'exclude'	=> 'template.cfg'					);				}				else				{					$sql = 'SELECT template_filename, template_data						FROM ' . STYLES_TEMPLATE_DATA_TABLE . "						WHERE template_id = {$style_row['template_id']}";					$result = $db->sql_query($sql);					while ($row = $db->sql_fetchrow($result))					{						$data[] = array(							'src' => $row['template_data'],							'prefix' => 'template/' . $row['template_filename']						);					}					$db->sql_freeresult($result);				}				unset($template_cfg);			}			// Export theme core code			if ($mode == 'theme' || $inc_theme)			{				$theme_cfg = str_replace(array('{MODE}', '{NAME}', '{COPYRIGHT}', '{VERSION}'), array($mode, $style_row['theme_name'], $style_row['theme_copyright'], $config['version']), $this->theme_cfg);				// Read old cfg file				$items = $cache->obtain_cfg_items($style_row);				$items = $items['theme'];				if (!isset($items['parse_css_file']))				{					$items['parse_css_file'] = 'off';				}				$theme_cfg = str_replace(array('{PARSE_CSS_FILE}'), array($items['parse_css_file']), $theme_cfg);				$files[] = array(					'src'		=> "styles/{$style_row['theme_path']}/theme/",					'prefix-'	=> "styles/{$style_row['theme_path']}/",					'prefix+'	=> false,					'exclude'	=> ($style_row['theme_storedb']) ? 'stylesheet.css,theme.cfg' : 'theme.cfg'				);				$data[] = array(					'src'		=> $theme_cfg,					'prefix'	=> 'theme/theme.cfg'				);				if ($style_row['theme_storedb'])				{					$data[] = array(						'src'		=> $style_row['theme_data'],						'prefix'	=> 'theme/stylesheet.css'					);				}				unset($items, $theme_cfg);			}			// Export imageset core code			if ($mode == 'imageset' || $inc_imageset)			{				$imageset_cfg = str_replace(array('{MODE}', '{NAME}', '{COPYRIGHT}', '{VERSION}'), array($mode, $style_row['imageset_name'], $style_row['imageset_copyright'], $config['version']), $this->imageset_cfg);				$imageset_main = array();				$sql = 'SELECT image_filename, image_name, image_height, image_width					FROM ' . STYLES_IMAGESET_DATA_TABLE . "					WHERE imageset_id = $style_id						AND image_lang = ''";				$result = $db->sql_query($sql);				while ($row = $db->sql_fetchrow($result))				{					$imageset_main[$row['image_name']] = $row['image_filename'] . ($row['image_height'] ? '*' . $row['image_height']: '') . ($row['image_width'] ? '*' . $row['image_width']: '');				}				$db->sql_freeresult($result);				foreach ($this->imageset_keys as $topic => $key_array)				{					foreach ($key_array as $key)					{						if (isset($imageset_main[$key]))						{							$imageset_cfg .= "\nimg_" . $key . ' = ' . str_replace("styles/{$style_row['imageset_path']}/imageset/", '{PATH}', $imageset_main[$key]);						}					}				}				$files[] = array(					'src'		=> "styles/{$style_row['imageset_path']}/imageset/",					'prefix-'	=> "styles/{$style_row['imageset_path']}/",					'prefix+'	=> false,					'exclude'	=> 'imageset.cfg'				);				$data[] = array(					'src'		=> trim($imageset_cfg),					'prefix'	=> 'imageset/imageset.cfg'				);				end($data);				$imageset_root = "{$phpbb_root_path}styles/{$style_row['imageset_path']}/imageset/";				if ($dh = @opendir($imageset_root))				{					while (($fname = readdir($dh)) !== false)					{						if ($fname[0] != '.' && $fname != 'CVS' && is_dir("$imageset_root$fname"))						{							$files[key($files)]['exclude'] .= ',' . $fname . '/imageset.cfg';						}					}					closedir($dh);				}				$imageset_lang = array();				$sql = 'SELECT image_filename, image_name, image_height, image_width, image_lang					FROM ' . STYLES_IMAGESET_DATA_TABLE . "					WHERE imageset_id = $style_id						AND image_lang <> ''";				$result = $db->sql_query($sql);				while ($row = $db->sql_fetchrow($result))				{					$imageset_lang[$row['image_lang']][$row['image_name']] = $row['image_filename'] . ($row['image_height'] ? '*' . $row['image_height']: '') . ($row['image_width'] ? '*' . $row['image_width']: '');				}				$db->sql_freeresult($result);				foreach ($imageset_lang as $lang => $imageset_localized)				{					$imageset_cfg = str_replace(array('{MODE}', '{NAME}', '{COPYRIGHT}', '{VERSION}'), array($mode, $style_row['imageset_name'], $style_row['imageset_copyright'], $config['version']), $this->imageset_cfg);					foreach ($this->imageset_keys as $topic => $key_array)					{						foreach ($key_array as $key)						{							if (isset($imageset_localized[$key]))							{								$imageset_cfg .= "\nimg_" . $key . ' = ' . str_replace("styles/{$style_row['imageset_path']}/imageset/", '{PATH}', $imageset_localized[$key]);							}						}					}					$data[] = array(						'src'		=> trim($imageset_cfg),						'prefix'	=> 'imageset/' . $lang . '/imageset.cfg'					);				}				unset($imageset_cfg);			}			switch ($format)			{				case 'tar':					$ext = '.tar';				break;				case 'zip':					$ext = '.zip';				break;				case 'tar.gz':					$ext = '.tar.gz';				break;				case 'tar.bz2':					$ext = '.tar.bz2';				break;				default:					$error[] = $user->lang[$l_prefix . '_ERR_ARCHIVE'];			}			if (!sizeof($error))			{				include($phpbb_root_path . 'includes/functions_compress.' . $phpEx);				if ($mode == 'style')				{					$path = preg_replace('#[^\w-]+#', '_', $style_row['style_name']);				}				else				{					$path = $style_row[$mode . '_path'];				}				if ($format == 'zip')				{					$compress = new compress_zip('w', $phpbb_root_path . "store/$path$ext");				}				else				{					$compress = new compress_tar('w', $phpbb_root_path . "store/$path$ext", $ext);				}				if (sizeof($files))				{					foreach ($files as $file_ary)					{						$compress->add_file($file_ary['src'], $file_ary['prefix-'], $file_ary['prefix+'], $file_ary['exclude']);					}				}				if (sizeof($data))				{					foreach ($data as $data_ary)					{						$compress->add_data($data_ary['src'], $data_ary['prefix']);					}				}				$compress->close();				add_log('admin', 'LOG_' . $l_prefix . '_EXPORT', $style_row[$mode . '_name']);				if (!$store)				{					$compress->download($path);					@unlink("{$phpbb_root_path}store/$path$ext");					exit;				}				trigger_error(sprintf($user->lang[$l_prefix . '_EXPORTED'], "store/$path$ext") . adm_back_link($this->u_action));			}		}		$sql = "SELECT {$mode}_id, {$mode}_name			FROM " . (($mode == 'style') ? STYLES_TABLE : $sql_from) . "			WHERE {$mode}_id = $style_id";		$result = $db->sql_query($sql);		$style_row = $db->sql_fetchrow($result);		$db->sql_freeresult($result);		if (!$style_row)		{			trigger_error($user->lang['NO_' . $l_prefix] . adm_back_link($this->u_action), E_USER_WARNING);		}		$this->page_title = $l_prefix . '_EXPORT';		$format_buttons = '';		foreach ($methods as $method)		{			$format_buttons .= '<label><input type="radio"' . ((!$format_buttons) ? ' id="format"' : '') . ' class="radio" value="' . $method . '" name="format"' . (($method == $format) ? ' checked="checked"' : '') . ' /> ' . $method . '</label>';		}		$template->assign_vars(array(			'S_EXPORT'		=> true,			'S_ERROR_MSG'	=> (sizeof($error)) ? true : false,			'S_STYLE'		=> ($mode == 'style') ? true : false,			'L_TITLE'		=> $user->lang[$this->page_title],			'L_EXPLAIN'		=> $user->lang[$this->page_title . '_EXPLAIN'],			'L_NAME'		=> $user->lang[$l_prefix . '_NAME'],			'U_ACTION'		=> $this->u_action . '&amp;action=export&amp;id=' . $style_id,			'U_BACK'		=> $this->u_action,			'ERROR_MSG'			=> (sizeof($error)) ? implode('<br />', $error) : '',			'NAME'				=> $style_row[$mode . '_name'],			'FORMAT_BUTTONS'	=> $format_buttons)		);	}	/**	* Display details	*/	function details($mode, $style_id)	{		global $template, $db, $config, $user, $safe_mode, $cache, $phpbb_root_path;		$update = (isset($_POST['update'])) ? true : false;		$l_type = strtoupper($mode);		$error = array();		$element_ary = array('template' => STYLES_TEMPLATE_TABLE, 'theme' => STYLES_THEME_TABLE, 'imageset' => STYLES_IMAGESET_TABLE);		switch ($mode)		{			case 'style':				$sql_from = STYLES_TABLE;			break;			case 'template':				$sql_from = STYLES_TEMPLATE_TABLE;			break;			case 'theme':				$sql_from = STYLES_THEME_TABLE;			break;			case 'imageset':				$sql_from = STYLES_IMAGESET_TABLE;			break;		}		$sql = "SELECT *			FROM $sql_from			WHERE {$mode}_id = $style_id";		$result = $db->sql_query($sql);		$style_row = $db->sql_fetchrow($result);		$db->sql_freeresult($result);		if (!$style_row)		{			trigger_error($user->lang['NO_' . $l_type] . adm_back_link($this->u_action), E_USER_WARNING);		}		$style_row['style_default'] = ($mode == 'style' && $config['default_style'] == $style_id) ? 1 : 0;		if ($update)		{			$name = utf8_normalize_nfc(request_var('name', '', true));			$copyright = utf8_normalize_nfc(request_var('copyright', '', true));			$template_id = request_var('template_id', 0);			$theme_id = request_var('theme_id', 0);			$imageset_id = request_var('imageset_id', 0);			$style_active = request_var('style_active', 0);			$style_default = request_var('style_default', 0);			$store_db = request_var('store_db', 0);			// If the admin selected the style to be the default style, but forgot to activate it... we will do it for him			if ($style_default)			{				$style_active = 1;			}			$sql = "SELECT {$mode}_id, {$mode}_name				FROM $sql_from				WHERE {$mode}_id <> $style_id				AND LOWER({$mode}_name) = '" . $db->sql_escape(strtolower($name)) . "'";			$result = $db->sql_query($sql);			$conflict = $db->sql_fetchrow($result);			$db->sql_freeresult($result);			if ($mode == 'style' && (!$template_id || !$theme_id || !$imageset_id))			{				$error[] = $user->lang['STYLE_ERR_NO_IDS'];			}			if ($mode == 'style' && $style_row['style_active'] && !$style_active && $config['default_style'] == $style_id)			{				$error[] = $user->lang['DEACTIVATE_DEFAULT'];			}			if (!$name || $conflict)			{				$error[] = $user->lang[$l_type . '_ERR_STYLE_NAME'];			}			if ($mode === 'theme' || $mode === 'template')			{				// a rather elaborate check we have to do here once to avoid trouble later				$check = "{$phpbb_root_path}styles/" . $style_row["{$mode}_path"] . (($mode === 'theme') ? '/theme/stylesheet.css' : '/template');				if (($style_row["{$mode}_storedb"] != $store_db) && !$store_db && ($safe_mode || !phpbb_is_writable($check)))				{					$error[] = $user->lang['EDIT_' . strtoupper($mode) . '_STORED_DB'];					$store_db = 1;				}				// themes which have to be parsed have to go into db				if ($mode == 'theme')				{					$cfg = parse_cfg_file("{$phpbb_root_path}styles/" . $style_row["{$mode}_path"] . "/theme/theme.cfg");					if (isset($cfg['parse_css_file']) && $cfg['parse_css_file'] && !$store_db)					{						$error[] = $user->lang['EDIT_THEME_STORE_PARSED'];						$store_db = 1;					}				}			}			if (!sizeof($error))			{				// Check length settings				if (utf8_strlen($name) > 30)				{					$error[] = $user->lang[$l_type . '_ERR_NAME_LONG'];				}				if (utf8_strlen($copyright) > 60)				{					$error[] = $user->lang[$l_type . '_ERR_COPY_LONG'];				}			}		}		if ($update && sizeof($error))		{			$style_row = array_merge($style_row, array(				'template_id'			=> $template_id,				'theme_id'				=> $theme_id,				'imageset_id'			=> $imageset_id,				'style_active'			=> $style_active,				$mode . '_storedb'		=> $store_db,				$mode . '_name'			=> $name,				$mode . '_copyright'	=> $copyright)			);		}		// User has submitted form and no errors have occurred		if ($update && !sizeof($error))		{			$sql_ary = array(				$mode . '_name'			=> $name,				$mode . '_copyright'	=> $copyright			);			switch ($mode)			{				case 'style':					$sql_ary += array(						'template_id'		=> (int) $template_id,						'theme_id'			=> (int) $theme_id,						'imageset_id'		=> (int) $imageset_id,						'style_active'		=> (int) $style_active,					);				break;				case 'imageset':				break;				case 'theme':					if ($style_row['theme_storedb'] != $store_db)					{						$theme_data = '';						if (!$style_row['theme_storedb'])						{							$theme_data = $this->db_theme_data($style_row);						}						else if (!$store_db && !$safe_mode && phpbb_is_writable("{$phpbb_root_path}styles/{$style_row['theme_path']}/theme/stylesheet.css"))						{							$store_db = 1;							$theme_data = $style_row['theme_data'];							if ($fp = @fopen("{$phpbb_root_path}styles/{$style_row['theme_path']}/theme/stylesheet.css", 'wb'))							{								$store_db = (@fwrite($fp, str_replace("styles/{$style_row['theme_path']}/theme/", './', $theme_data))) ? 0 : 1;							}							fclose($fp);						}						$sql_ary += array(							'theme_mtime'	=> ($store_db) ? filemtime("{$phpbb_root_path}styles/{$style_row['theme_path']}/theme/stylesheet.css") : 0,							'theme_storedb'	=> $store_db,							'theme_data'	=> ($store_db) ? $theme_data : '',						);					}				break;				case 'template':					if ($style_row['template_storedb'] != $store_db)					{						if ($super = $this->get_super($mode, $style_row['template_id']))						{							$error[] = (sprintf($user->lang["{$l_type}_INHERITS"], $super['template_name']));							$sql_ary = array();						}						else						{							if (!$store_db && !$safe_mode && phpbb_is_writable("{$phpbb_root_path}styles/{$style_row['template_path']}/template"))							{								$err = $this->store_in_fs('template', $style_row['template_id']);								if ($err)								{									$error += $err;								}							}							else if ($store_db)							{								$this->store_in_db('template', $style_row['template_id']);							}							else							{								// We no longer store within the db, but are also not able to update the file structure								// Since the admin want to switch this, we adhere to his decision. But we also need to remove the cache								$sql = 'DELETE FROM ' . STYLES_TEMPLATE_DATA_TABLE . "									WHERE template_id = $style_id";								$db->sql_query($sql);							}							$sql_ary += array(								'template_storedb'	=> $store_db,							);						}					}				break;			}			if (sizeof($sql_ary))			{				$sql = "UPDATE $sql_from					SET " . $db->sql_build_array('UPDATE', $sql_ary) . "					WHERE {$mode}_id = $style_id";				$db->sql_query($sql);				// Making this the default style?				if ($mode == 'style' && $style_default)				{					set_config('default_style', $style_id);				}			}			$cache->destroy('sql', STYLES_TABLE);			add_log('admin', 'LOG_' . $l_type . '_EDIT_DETAILS', $name);			if (sizeof($error))			{				trigger_error(implode('<br />', $error) . adm_back_link($this->u_action), E_USER_WARNING);			}			else			{				trigger_error($user->lang[$l_type . '_DETAILS_UPDATED'] . adm_back_link($this->u_action));			}		}		if ($mode == 'style')		{			foreach ($element_ary as $element => $table)			{				$sql = "SELECT {$element}_id, {$element}_name					FROM $table					ORDER BY {$element}_id ASC";				$result = $db->sql_query($sql);				${$element . '_options'} = '';				while ($row = $db->sql_fetchrow($result))				{					$selected = ($row[$element . '_id'] == $style_row[$element . '_id']) ? ' selected="selected"' : '';					${$element . '_options'} .= '<option value="' . $row[$element . '_id'] . '"' . $selected . '>' . $row[$element . '_name'] . '</option>';				}				$db->sql_freeresult($result);			}		}		if ($mode == 'template')		{			$super = array();			if (isset($style_row[$mode . '_inherits_id']) && $style_row['template_inherits_id'])			{				$super = $this->get_super($mode, $style_row['template_id']);			}		}		$this->page_title = 'EDIT_DETAILS_' . $l_type;		$template->assign_vars(array(			'S_DETAILS'				=> true,			'S_ERROR_MSG'			=> (sizeof($error)) ? true : false,			'S_STYLE'				=> ($mode == 'style') ? true : false,			'S_TEMPLATE'			=> ($mode == 'template') ? true : false,			'S_THEME'				=> ($mode == 'theme') ? true : false,			'S_IMAGESET'			=> ($mode == 'imageset') ? true : false,			'S_STORE_DB'			=> (isset($style_row[$mode . '_storedb'])) ? $style_row[$mode . '_storedb'] : 0,			'S_STORE_DB_DISABLED'	=> (isset($style_row[$mode . '_inherits_id'])) ? $style_row[$mode . '_inherits_id'] : 0,			'S_STYLE_ACTIVE'		=> (isset($style_row['style_active'])) ? $style_row['style_active'] : 0,			'S_STYLE_DEFAULT'		=> (isset($style_row['style_default'])) ? $style_row['style_default'] : 0,			'S_SUPERTEMPLATE'		=> (isset($style_row[$mode . '_inherits_id']) && $style_row[$mode . '_inherits_id']) ? $super['template_name'] : 0,			'S_TEMPLATE_OPTIONS'	=> ($mode == 'style') ? $template_options : '',			'S_THEME_OPTIONS'		=> ($mode == 'style') ? $theme_options : '',			'S_IMAGESET_OPTIONS'	=> ($mode == 'style') ? $imageset_options : '',			'U_ACTION'		=> $this->u_action . '&amp;action=details&amp;id=' . $style_id,			'U_BACK'		=> $this->u_action,			'L_TITLE'				=> $user->lang[$this->page_title],			'L_EXPLAIN'				=> $user->lang[$this->page_title . '_EXPLAIN'],			'L_NAME'				=> $user->lang[$l_type . '_NAME'],			'L_LOCATION'			=> ($mode == 'template' || $mode == 'theme') ? $user->lang[$l_type . '_LOCATION'] : '',			'L_LOCATION_EXPLAIN'	=> ($mode == 'template' || $mode == 'theme') ? $user->lang[$l_type . '_LOCATION_EXPLAIN'] : '',			'ERROR_MSG'		=> (sizeof($error)) ? implode('<br />', $error) : '',			'NAME'			=> $style_row[$mode . '_name'],			'COPYRIGHT'		=> $style_row[$mode . '_copyright'],			)		);	}	/**	* Load css file contents	*/	function load_css_file($path, $filename)	{		global $phpbb_root_path;		$file = "{$phpbb_root_path}styles/$path/theme/$filename";		if (file_exists($file) && ($content = file_get_contents($file)))		{			$content = trim($content);		}		else		{			$content = '';		}		if (defined('DEBUG'))		{			$content = "/* BEGIN @include $filename */ \n $content \n /* END @include $filename */ \n";		}		return $content;	}	/**	* Returns a string containing the value that should be used for the theme_data column in the theme database table.	* Includes contents of files loaded via @import	*	* @param array $theme_row is an associative array containing the theme's current database entry	* @param mixed $stylesheet can either be the new content for the stylesheet or false to load from the standard file	* @param string $root_path should only be used in case you want to use a different root path than "{$phpbb_root_path}styles/{$theme_row['theme_path']}"	*	* @return string Stylesheet data for theme_data column in the theme table	*/	function db_theme_data($theme_row, $stylesheet = false, $root_path = '')	{		global $phpbb_root_path;		if (!$root_path)		{			$root_path = $phpbb_root_path . 'styles/' . $theme_row['theme_path'];		}		if (!$stylesheet)		{			$stylesheet = '';			if (file_exists($root_path . '/theme/stylesheet.css'))			{				$stylesheet = file_get_contents($root_path . '/theme/stylesheet.css');			}		}		// Match CSS imports		$matches = array();		preg_match_all('/@import url\((["\'])(.*)\1\);/i', $stylesheet, $matches);		// remove commented stylesheets (very simple parser, allows only whitespace		// around an @import statement)		preg_match_all('#/\*\s*@import url\((["\'])(.*)\1\);\s\*/#i', $stylesheet, $commented);		$matches[2] = array_diff($matches[2], $commented[2]);		if (sizeof($matches))		{			foreach ($matches[0] as $idx => $match)			{				if (isset($matches[2][$idx]))				{					$stylesheet = str_replace($match, acp_styles::load_css_file($theme_row['theme_path'], $matches[2][$idx]), $stylesheet);				}			}		}		// adjust paths		return str_replace('./', 'styles/' . $theme_row['theme_path'] . '/theme/', $stylesheet);	}	/**	* Store template files into db	*/	function store_templates($mode, $style_id, $template_path, $filelist)	{		global $phpbb_root_path, $phpEx, $db;		$template_path = $template_path . '/template/';		$includes = array();		foreach ($filelist as $pathfile => $file_ary)		{			foreach ($file_ary as $file)			{				if (!($fp = @fopen("{$phpbb_root_path}styles/$template_path$pathfile$file", 'r')))				{					trigger_error("Could not open {$phpbb_root_path}styles/$template_path$pathfile$file", E_USER_ERROR);				}				$filesize = filesize("{$phpbb_root_path}styles/$template_path$pathfile$file");				if ($filesize)				{					$template_data = fread($fp, $filesize);				}				fclose($fp);				if (!$filesize)				{					// File is empty					continue;				}				if (preg_match_all('#<!-- INCLUDE (.*?\.html) -->#is', $template_data, $matches))				{					foreach ($matches[1] as $match)					{						$includes[trim($match)][] = $file;					}				}			}		}		foreach ($filelist as $pathfile => $file_ary)		{			foreach ($file_ary as $file)			{				// Skip index.				if (strpos($file, 'index.') === 0)				{					continue;				}				// We could do this using extended inserts ... but that could be one				// heck of a lot of data ...				$sql_ary = array(					'template_id'			=> (int) $style_id,					'template_filename'		=> "$pathfile$file",					'template_included'		=> (isset($includes[$file])) ? implode(':', $includes[$file]) . ':' : '',					'template_mtime'		=> (int) filemtime("{$phpbb_root_path}styles/$template_path$pathfile$file"),					'template_data'			=> (string) file_get_contents("{$phpbb_root_path}styles/$template_path$pathfile$file"),				);				if ($mode == 'insert')				{					$sql = 'INSERT INTO ' . STYLES_TEMPLATE_DATA_TABLE . ' ' . $db->sql_build_array('INSERT', $sql_ary);				}				else				{					$sql = 'UPDATE ' . STYLES_TEMPLATE_DATA_TABLE . ' SET ' . $db->sql_build_array('UPDATE', $sql_ary) . "						WHERE template_id = $style_id							AND template_filename = '" . $db->sql_escape("$pathfile$file") . "'";				}				$db->sql_query($sql);			}		}	}	/**	* Returns an array containing all template filenames for one template that are currently cached.	*	* @param string $template_path contains the name of the template's folder in /styles/	*	* @return array of filenames that exist in /styles/$template_path/template/ (without extension!)	*/	function template_cache_filelist($template_path)	{		global $phpbb_root_path, $phpEx, $user;		$cache_prefix = 'tpl_' . str_replace('_', '-', $template_path);		if (!($dp = @opendir("{$phpbb_root_path}cache")))		{			trigger_error($user->lang['TEMPLATE_ERR_CACHE_READ'] . adm_back_link($this->u_action), E_USER_WARNING);		}		$file_ary = array();		while ($file = readdir($dp))		{			if ($file[0] == '.')			{				continue;			}			if (is_file($phpbb_root_path . 'cache/' . $file) && (strpos($file, $cache_prefix) === 0))			{				$file_ary[] = str_replace('.', '/', preg_replace('#^' . preg_quote($cache_prefix, '#') . '_(.*?)\.html\.' . $phpEx . '$#i', '\1', $file));			}		}		closedir($dp);		return $file_ary;	}	/**	* Destroys cached versions of template files	*	* @param array $template_row contains the template's row in the STYLES_TEMPLATE_TABLE database table	* @param mixed $file_ary is optional and may contain an array of template file names which should be refreshed in the cache.	*	The file names should be the original template file names and not the cache file names.	*/	function clear_template_cache($template_row, $file_ary = false)	{		global $phpbb_root_path, $phpEx, $user;		$cache_prefix = 'tpl_' . str_replace('_', '-', $template_row['template_path']);		if (!$file_ary || !is_array($file_ary))		{			$file_ary = $this->template_cache_filelist($template_row['template_path']);			$log_file_list = $user->lang['ALL_FILES'];		}		else		{			$log_file_list = implode(', ', $file_ary);		}		foreach ($file_ary as $file)		{			$file = str_replace('/', '.', $file);			$file = "{$phpbb_root_path}cache/{$cache_prefix}_$file.html.$phpEx";			if (file_exists($file) && is_file($file))			{				@unlink($file);			}		}		unset($file_ary);		add_log('admin', 'LOG_TEMPLATE_CACHE_CLEARED', $template_row['template_name'], $log_file_list);	}	/**	* Install Style/Template/Theme/Imageset	*/	function install($mode)	{		global $phpbb_root_path, $phpEx, $config, $db, $cache, $user, $template;		$l_type = strtoupper($mode);		$error = $installcfg = $style_row = array();		$root_path = $cfg_file = '';		$element_ary = array('template' => STYLES_TEMPLATE_TABLE, 'theme' => STYLES_THEME_TABLE, 'imageset' => STYLES_IMAGESET_TABLE);		$install_path = request_var('path', '');		$update = (isset($_POST['update'])) ? true : false;		// Installing, obtain cfg file contents		if ($install_path)		{			$root_path = $phpbb_root_path . 'styles/' . $install_path . '/';			$cfg_file = ($mode == 'style') ? "$root_path$mode.cfg" : "$root_path$mode/$mode.cfg";			if (!file_exists($cfg_file))			{				$error[] = $user->lang[$l_type . '_ERR_NOT_' . $l_type];			}			else			{				$installcfg = parse_cfg_file($cfg_file);			}		}		// Installing		if (sizeof($installcfg))		{			$name		= $installcfg['name'];			$copyright	= $installcfg['copyright'];			$version	= $installcfg['version'];			$style_row = array(				$mode . '_id'			=> 0,				$mode . '_name'			=> '',				$mode . '_copyright'	=> ''			);			switch ($mode)			{				case 'style':					$style_row = array(						'style_id'			=> 0,						'style_name'		=> $installcfg['name'],						'style_copyright'	=> $installcfg['copyright']					);					$reqd_template = (isset($installcfg['required_template'])) ? $installcfg['required_template'] : false;					$reqd_theme = (isset($installcfg['required_theme'])) ? $installcfg['required_theme'] : false;					$reqd_imageset = (isset($installcfg['required_imageset'])) ? $installcfg['required_imageset'] : false;					// Check to see if each element is already installed, if it is grab the id					foreach ($element_ary as $element => $table)					{						$style_row = array_merge($style_row, array(							$element . '_id'			=> 0,							$element . '_name'			=> '',							$element . '_copyright'		=> '')						);			 			$this->test_installed($element, $error, (${'reqd_' . $element}) ? $phpbb_root_path . 'styles/' . $reqd_template . '/' : $root_path, ${'reqd_' . $element}, $style_row[$element . '_id'], $style_row[$element . '_name'], $style_row[$element . '_copyright']);						if (!$style_row[$element . '_name'])						{							$style_row[$element . '_name'] = $reqd_template;						}						// Merge other information to installcfg... if present						$cfg_file = $phpbb_root_path . 'styles/' . $install_path . '/' . $element . '/' . $element . '.cfg';						if (file_exists($cfg_file))						{							$cfg_contents = parse_cfg_file($cfg_file);							// Merge only specific things. We may need them later.							foreach (array('inherit_from', 'parse_css_file') as $key)							{								if (!empty($cfg_contents[$key]) && !isset($installcfg[$key]))								{									$installcfg[$key] = $cfg_contents[$key];								}							}						}					}				break;				case 'template':					$this->test_installed('template', $error, $root_path, false, $style_row['template_id'], $style_row['template_name'], $style_row['template_copyright']);				break;				case 'theme':					$this->test_installed('theme', $error, $root_path, false, $style_row['theme_id'], $style_row['theme_name'], $style_row['theme_copyright']);				break;				case 'imageset':					$this->test_installed('imageset', $error, $root_path, false, $style_row['imageset_id'], $style_row['imageset_name'], $style_row['imageset_copyright']);				break;			}		}		else		{			trigger_error($user->lang['NO_' . $l_type] . adm_back_link($this->u_action), E_USER_WARNING);		}		$style_row['store_db'] = request_var('store_db', 0);		$style_row['style_active'] = request_var('style_active', 1);		$style_row['style_default'] = request_var('style_default', 0);		// User has submitted form and no errors have occurred		if ($update && !sizeof($error))		{			if ($mode == 'style')			{				foreach ($element_ary as $element => $table)				{					${$element . '_root_path'} = (${'reqd_' . $element}) ? $phpbb_root_path . 'styles/' . ${'reqd_' . $element} . '/' : false;					${$element . '_path'} = (${'reqd_' . $element}) ? ${'reqd_' . $element} : false;				}				$this->install_style($error, 'install', $root_path, $style_row['style_id'], $style_row['style_name'], $install_path, $style_row['style_copyright'], $style_row['style_active'], $style_row['style_default'], $style_row, $template_root_path, $template_path, $theme_root_path, $theme_path, $imageset_root_path, $imageset_path);			}			else			{				$style_row['store_db'] = $this->install_element($mode, $error, 'install', $root_path, $style_row[$mode . '_id'], $style_row[$mode . '_name'], $install_path, $style_row[$mode . '_copyright'], $style_row['store_db']);			}			if (!sizeof($error))			{				$cache->destroy('sql', STYLES_TABLE);				$message = ($style_row['store_db']) ? '_ADDED_DB' : '_ADDED';				trigger_error($user->lang[$l_type . $message] . adm_back_link($this->u_action));			}		}		$this->page_title = 'INSTALL_' . $l_type;		$template->assign_vars(array(			'S_DETAILS'			=> true,			'S_INSTALL'			=> true,			'S_ERROR_MSG'		=> (sizeof($error)) ? true : false,			'S_LOCATION'		=> (isset($installcfg['inherit_from']) && $installcfg['inherit_from']) ? false : true,			'S_STYLE'			=> ($mode == 'style') ? true : false,			'S_TEMPLATE'		=> ($mode == 'template') ? true : false,			'S_SUPERTEMPLATE'	=> (isset($installcfg['inherit_from'])) ? $installcfg['inherit_from'] : '',			'S_THEME'			=> ($mode == 'theme') ? true : false,			'S_STORE_DB'			=> (isset($style_row[$mode . '_storedb'])) ? $style_row[$mode . '_storedb'] : 0,			'S_STYLE_ACTIVE'		=> (isset($style_row['style_active'])) ? $style_row['style_active'] : 0,			'S_STYLE_DEFAULT'		=> (isset($style_row['style_default'])) ? $style_row['style_default'] : 0,			'U_ACTION'			=> $this->u_action . "&amp;action=install&amp;path=" . urlencode($install_path),			'U_BACK'			=> $this->u_action,			'L_TITLE'				=> $user->lang[$this->page_title],			'L_EXPLAIN'				=> $user->lang[$this->page_title . '_EXPLAIN'],			'L_NAME'				=> $user->lang[$l_type . '_NAME'],			'L_LOCATION'			=> ($mode == 'template' || $mode == 'theme') ? $user->lang[$l_type . '_LOCATION'] : '',			'L_LOCATION_EXPLAIN'	=> ($mode == 'template' || $mode == 'theme') ? $user->lang[$l_type . '_LOCATION_EXPLAIN'] : '',			'ERROR_MSG'			=> (sizeof($error)) ? implode('<br />', $error) : '',			'NAME'				=> $style_row[$mode . '_name'],			'COPYRIGHT'			=> $style_row[$mode . '_copyright'],			'TEMPLATE_NAME'		=> ($mode == 'style') ? $style_row['template_name'] : '',			'THEME_NAME'		=> ($mode == 'style') ? $style_row['theme_name'] : '',			'IMAGESET_NAME'		=> ($mode == 'style') ? $style_row['imageset_name'] : '')		);	}	/**	* Add new style	*/	function add($mode)	{		global $phpbb_root_path, $phpEx, $config, $db, $cache, $user, $template;		$l_type = strtoupper($mode);		$element_ary = array('template' => STYLES_TEMPLATE_TABLE, 'theme' => STYLES_THEME_TABLE, 'imageset' => STYLES_IMAGESET_TABLE);		$error = array();		$style_row = array(			$mode . '_name'			=> utf8_normalize_nfc(request_var('name', '', true)),			$mode . '_copyright'	=> utf8_normalize_nfc(request_var('copyright', '', true)),			'template_id'			=> 0,			'theme_id'				=> 0,			'imageset_id'			=> 0,			'store_db'				=> request_var('store_db', 0),			'style_active'			=> request_var('style_active', 1),			'style_default'			=> request_var('style_default', 0),		);		$basis = request_var('basis', 0);		$update = (isset($_POST['update'])) ? true : false;		if ($basis)		{			switch ($mode)			{				case 'style':					$sql_select = 'template_id, theme_id, imageset_id';					$sql_from = STYLES_TABLE;				break;				case 'template':					$sql_select = 'template_id';					$sql_from = STYLES_TEMPLATE_TABLE;				break;				case 'theme':					$sql_select = 'theme_id';					$sql_from = STYLES_THEME_TABLE;				break;				case 'imageset':					$sql_select = 'imageset_id';					$sql_from = STYLES_IMAGESET_TABLE;				break;			}			$sql = "SELECT $sql_select				FROM $sql_from				WHERE {$mode}_id = $basis";			$result = $db->sql_query($sql);			$row = $db->sql_fetchrow($result);			$db->sql_freeresult($result);			if (!$row)			{				$error[] = $user->lang['NO_' . $l_type];			}			if (!sizeof($error))			{				$style_row['template_id']	= (isset($row['template_id'])) ? $row['template_id'] : $style_row['template_id'];				$style_row['theme_id']		= (isset($row['theme_id'])) ? $row['theme_id'] : $style_row['theme_id'];				$style_row['imageset_id']	= (isset($row['imageset_id'])) ? $row['imageset_id'] : $style_row['imageset_id'];			}		}		if ($update)		{			$style_row['template_id'] = request_var('template_id', $style_row['template_id']);			$style_row['theme_id'] = request_var('theme_id', $style_row['theme_id']);			$style_row['imageset_id'] = request_var('imageset_id', $style_row['imageset_id']);			if ($mode == 'style' && (!$style_row['template_id'] || !$style_row['theme_id'] || !$style_row['imageset_id']))			{				$error[] = $user->lang['STYLE_ERR_NO_IDS'];			}		}		// User has submitted form and no errors have occurred		if ($update && !sizeof($error))		{			if ($mode == 'style')			{				$style_row['style_id'] = 0;				$this->install_style($error, 'add', '', $style_row['style_id'], $style_row['style_name'], '', $style_row['style_copyright'], $style_row['style_active'], $style_row['style_default'], $style_row);			}			if (!sizeof($error))			{				$cache->destroy('sql', STYLES_TABLE);				$message = ($style_row['store_db']) ? '_ADDED_DB' : '_ADDED';				trigger_error($user->lang[$l_type . $message] . adm_back_link($this->u_action));			}		}		if ($mode == 'style')		{			foreach ($element_ary as $element => $table)			{				$sql = "SELECT {$element}_id, {$element}_name					FROM $table					ORDER BY {$element}_id ASC";				$result = $db->sql_query($sql);				${$element . '_options'} = '';				while ($row = $db->sql_fetchrow($result))				{					$selected = ($row[$element . '_id'] == $style_row[$element . '_id']) ? ' selected="selected"' : '';					${$element . '_options'} .= '<option value="' . $row[$element . '_id'] . '"' . $selected . '>' . $row[$element . '_name'] . '</option>';				}				$db->sql_freeresult($result);			}		}		$this->page_title = 'ADD_' . $l_type;		$template->assign_vars(array(			'S_DETAILS'			=> true,			'S_ADD'				=> true,			'S_ERROR_MSG'		=> (sizeof($error)) ? true : false,			'S_STYLE'			=> ($mode == 'style') ? true : false,			'S_TEMPLATE'		=> ($mode == 'template') ? true : false,			'S_THEME'			=> ($mode == 'theme') ? true : false,			'S_BASIS'			=> ($basis) ? true : false,			'S_STORE_DB'			=> (isset($style_row['storedb'])) ? $style_row['storedb'] : 0,			'S_STYLE_ACTIVE'		=> (isset($style_row['style_active'])) ? $style_row['style_active'] : 0,			'S_STYLE_DEFAULT'		=> (isset($style_row['style_default'])) ? $style_row['style_default'] : 0,			'S_TEMPLATE_OPTIONS'	=> ($mode == 'style') ? $template_options : '',			'S_THEME_OPTIONS'		=> ($mode == 'style') ? $theme_options : '',			'S_IMAGESET_OPTIONS'	=> ($mode == 'style') ? $imageset_options : '',			'U_ACTION'			=> $this->u_action . '&amp;action=add&amp;basis=' . $basis,			'U_BACK'			=> $this->u_action,			'L_TITLE'				=> $user->lang[$this->page_title],			'L_EXPLAIN'				=> $user->lang[$this->page_title . '_EXPLAIN'],			'L_NAME'				=> $user->lang[$l_type . '_NAME'],			'L_LOCATION'			=> ($mode == 'template' || $mode == 'theme') ? $user->lang[$l_type . '_LOCATION'] : '',			'L_LOCATION_EXPLAIN'	=> ($mode == 'template' || $mode == 'theme') ? $user->lang[$l_type . '_LOCATION_EXPLAIN'] : '',			'ERROR_MSG'			=> (sizeof($error)) ? implode('<br />', $error) : '',			'NAME'				=> $style_row[$mode . '_name'],			'COPYRIGHT'			=> $style_row[$mode . '_copyright'])		);	}	/**					$reqd_template = (isset($installcfg['required_template'])) ? $installcfg['required_template'] : false;					$reqd_theme = (isset($installcfg['required_theme'])) ? $installcfg['required_theme'] : false;					$reqd_imageset = (isset($installcfg['required_imageset'])) ? $installcfg['required_imageset'] : false;					// Check to see if each element is already installed, if it is grab the id					foreach ($element_ary as $element => $table)					{						$style_row = array_merge($style_row, array(							$element . '_id'			=> 0,							$element . '_name'			=> '',							$element . '_copyright'		=> '')						);			 			$this->test_installed($element, $error, $root_path, ${'reqd_' . $element}, $style_row[$element . '_id'], $style_row[$element . '_name'], $style_row[$element . '_copyright']);	* Is this element installed? If not, grab its cfg details	*/	function test_installed($element, &$error, $root_path, $reqd_name, &$id, &$name, &$copyright)	{		global $db, $user;		switch ($element)		{			case 'template':				$sql_from = STYLES_TEMPLATE_TABLE;			break;			case 'theme':				$sql_from = STYLES_THEME_TABLE;			break;			case 'imageset':				$sql_from = STYLES_IMAGESET_TABLE;			break;		}		$l_element = strtoupper($element);		$chk_name = ($reqd_name !== false) ? $reqd_name : $name;		$sql = "SELECT {$element}_id, {$element}_name			FROM $sql_from			WHERE {$element}_name = '" . $db->sql_escape($chk_name) . "'";		$result = $db->sql_query($sql);		if ($row = $db->sql_fetchrow($result))		{			$name = $row[$element . '_name'];			$id = $row[$element . '_id'];		}		else		{			if (!($cfg = @file("$root_path$element/$element.cfg")))			{				$error[] = sprintf($user->lang['REQUIRES_' . $l_element], $reqd_name);				return false;			}			$cfg = parse_cfg_file("$root_path$element/$element.cfg", $cfg);			$name = $cfg['name'];			$copyright = $cfg['copyright'];			$id = 0;			unset($cfg);		}		$db->sql_freeresult($result);	}	/**	* Install/Add style	*/	function install_style(&$error, $action, $root_path, &$id, $name, $path, $copyright, $active, $default, &$style_row, $template_root_path = false, $template_path = false, $theme_root_path = false, $theme_path = false, $imageset_root_path = false, $imageset_path = false)	{		global $config, $db, $user;		$element_ary = array('template', 'theme', 'imageset');		if (!$name)		{			$error[] = $user->lang['STYLE_ERR_STYLE_NAME'];		}		// Check length settings		if (utf8_strlen($name) > 30)		{			$error[] = $user->lang['STYLE_ERR_NAME_LONG'];		}		if (utf8_strlen($copyright) > 60)		{			$error[] = $user->lang['STYLE_ERR_COPY_LONG'];		}		// Check if the name already exist		$sql = 'SELECT style_id			FROM ' . STYLES_TABLE . "			WHERE style_name = '" . $db->sql_escape($name) . "'";		$result = $db->sql_query($sql);		$row = $db->sql_fetchrow($result);		$db->sql_freeresult($result);		if ($row)		{			$error[] = $user->lang['STYLE_ERR_NAME_EXIST'];		}		if (sizeof($error))		{			return false;		}		foreach ($element_ary as $element)		{			// Zero id value ... need to install element ... run usual checks			// and do the install if necessary			if (!$style_row[$element . '_id'])			{				$this->install_element($element, $error, $action, (${$element . '_root_path'}) ? ${$element . '_root_path'} : $root_path, $style_row[$element . '_id'], $style_row[$element . '_name'], (${$element . '_path'}) ? ${$element . '_path'} : $path, $style_row[$element . '_copyright']);			}		}		if (!$style_row['template_id'] || !$style_row['theme_id'] || !$style_row['imageset_id'])		{			$error[] = $user->lang['STYLE_ERR_NO_IDS'];		}		if (sizeof($error))		{			return false;		}		$db->sql_transaction('begin');		$sql_ary = array(			'style_name'		=> $name,			'style_copyright'	=> $copyright,			'style_active'		=> (int) $active,			'template_id'		=> (int) $style_row['template_id'],			'theme_id'			=> (int) $style_row['theme_id'],			'imageset_id'		=> (int) $style_row['imageset_id'],		);		$sql = 'INSERT INTO ' . STYLES_TABLE . '			' . $db->sql_build_array('INSERT', $sql_ary);		$db->sql_query($sql);		$id = $db->sql_nextid();		if ($default)		{			$sql = 'UPDATE ' . USERS_TABLE . "				SET user_style = $id				WHERE user_style = " . $config['default_style'];			$db->sql_query($sql);			set_config('default_style', $id);		}		$db->sql_transaction('commit');		add_log('admin', 'LOG_STYLE_ADD', $name);	}	/**	* Install/add an element, doing various checks as we go	*/	function install_element($mode, &$error, $action, $root_path, &$id, $name, $path, $copyright, $store_db = 0)	{		global $phpbb_root_path, $db, $user;		// we parse the cfg here (again)		$cfg_data = parse_cfg_file("$root_path$mode/$mode.cfg");		switch ($mode)		{			case 'template':				$sql_from = STYLES_TEMPLATE_TABLE;			break;			case 'theme':				$sql_from = STYLES_THEME_TABLE;			break;			case 'imageset':				$sql_from = STYLES_IMAGESET_TABLE;			break;		}		$l_type = strtoupper($mode);		if (!$name)		{			$error[] = $user->lang[$l_type . '_ERR_STYLE_NAME'];		}		// Check length settings		if (utf8_strlen($name) > 30)		{			$error[] = $user->lang[$l_type . '_ERR_NAME_LONG'];		}		if (utf8_strlen($copyright) > 60)		{			$error[] = $user->lang[$l_type . '_ERR_COPY_LONG'];		}		// Check if the name already exist		$sql = "SELECT {$mode}_id			FROM $sql_from			WHERE {$mode}_name = '" . $db->sql_escape($name) . "'";		$result = $db->sql_query($sql);		$row = $db->sql_fetchrow($result);		$db->sql_freeresult($result);		if ($row)		{			// If it exist, we just use the style on installation			if ($action == 'install')			{				$id = $row[$mode . '_id'];				return false;			}			$error[] = $user->lang[$l_type . '_ERR_NAME_EXIST'];		}		if (isset($cfg_data['inherit_from']) && $cfg_data['inherit_from'])		{			if ($mode === 'template')			{				$select_bf = ', bbcode_bitfield';			}			else			{				$select_bf = '';			}			$sql = "SELECT {$mode}_id, {$mode}_name, {$mode}_path, {$mode}_storedb $select_bf				FROM $sql_from				WHERE {$mode}_name = '" . $db->sql_escape($cfg_data['inherit_from']) . "'					AND {$mode}_inherits_id = 0";			$result = $db->sql_query($sql);			$row = $db->sql_fetchrow($result);			$db->sql_freeresult($result);			if (!$row)			{				$error[] = sprintf($user->lang[$l_type . '_ERR_REQUIRED_OR_INCOMPLETE'], $cfg_data['inherit_from']);			}			else			{				$inherit_id = $row["{$mode}_id"];				$inherit_path = $row["{$mode}_path"];				$inherit_bf = ($mode === 'template') ? $row["bbcode_bitfield"] : false;				$cfg_data['store_db'] = $row["{$mode}_storedb"];				$store_db = $row["{$mode}_storedb"];			}		}		else		{			$inherit_id = 0;			$inherit_path = '';			$inherit_bf = false;		}		if (sizeof($error))		{			return false;		}		$sql_ary = array(			$mode . '_name'			=> $name,			$mode . '_copyright'	=> $copyright,			$mode . '_path'			=> $path,		);		switch ($mode)		{			case 'template':				// We check if the template author defined a different bitfield				if (!empty($cfg_data['template_bitfield']))				{					$sql_ary['bbcode_bitfield'] = $cfg_data['template_bitfield'];				}				else if ($inherit_bf)				{					$sql_ary['bbcode_bitfield'] = $inherit_bf;				}				else				{					$sql_ary['bbcode_bitfield'] = TEMPLATE_BITFIELD;				}				// We set a pre-defined bitfield here which we may use further in 3.2				$sql_ary += array(					'template_storedb'		=> $store_db,				);				if (isset($cfg_data['inherit_from']) && $cfg_data['inherit_from'])				{					$sql_ary += array(						'template_inherits_id'	=> $inherit_id,						'template_inherit_path' => $inherit_path,					);				}			break;			case 'theme':				// We are only interested in the theme configuration for now				if (isset($cfg_data['parse_css_file']) && $cfg_data['parse_css_file'])				{					$store_db = 1;				}				$sql_ary += array(					'theme_storedb'	=> $store_db,					'theme_data'	=> ($store_db) ? $this->db_theme_data($sql_ary, false, $root_path) : '',					'theme_mtime'	=> (int) filemtime("{$phpbb_root_path}styles/$path/theme/stylesheet.css")				);			break;			// all the heavy lifting is done later			case 'imageset':			break;		}		$db->sql_transaction('begin');		$sql = "INSERT INTO $sql_from			" . $db->sql_build_array('INSERT', $sql_ary);		$db->sql_query($sql);		$id = $db->sql_nextid();		if ($mode == 'template' && $store_db)		{			$filelist = filelist("{$root_path}template", '', 'html');			$this->store_templates('insert', $id, $path, $filelist);		}		else if ($mode == 'imageset')		{			$cfg_data = parse_cfg_file("$root_path$mode/imageset.cfg");			$imageset_definitions = array();			foreach ($this->imageset_keys as $topic => $key_array)			{				$imageset_definitions = array_merge($imageset_definitions, $key_array);			}			foreach ($cfg_data as $key => $value)			{				if (strpos($value, '*') !== false)				{					if (substr($value, -1, 1) === '*')					{						list($image_filename, $image_height) = explode('*', $value);						$image_width = 0;					}					else					{						list($image_filename, $image_height, $image_width) = explode('*', $value);					}				}				else				{					$image_filename = $value;					$image_height = $image_width = 0;				}				if (strpos($key, 'img_') === 0 && $image_filename)				{					$key = substr($key, 4);					if (in_array($key, $imageset_definitions))					{						$sql_ary = array(							'image_name'		=> $key,							'image_filename'	=> str_replace('{PATH}', "styles/$path/imageset/", trim($image_filename)),							'image_height'		=> (int) $image_height,							'image_width'		=> (int) $image_width,							'imageset_id'		=> (int) $id,							'image_lang'		=> '',						);						$db->sql_query('INSERT INTO ' . STYLES_IMAGESET_DATA_TABLE . ' ' . $db->sql_build_array('INSERT', $sql_ary));					}				}			}			unset($cfg_data);			$sql = 'SELECT lang_dir				FROM ' . LANG_TABLE;			$result = $db->sql_query($sql);			while ($row = $db->sql_fetchrow($result))			{				if (@file_exists("$root_path$mode/{$row['lang_dir']}/imageset.cfg"))				{					$cfg_data_imageset_data = parse_cfg_file("$root_path$mode/{$row['lang_dir']}/imageset.cfg");					foreach ($cfg_data_imageset_data as $image_name => $value)					{						if (strpos($value, '*') !== false)						{							if (substr($value, -1, 1) === '*')							{								list($image_filename, $image_height) = explode('*', $value);								$image_width = 0;							}							else							{								list($image_filename, $image_height, $image_width) = explode('*', $value);							}						}						else						{							$image_filename = $value;							$image_height = $image_width = 0;						}						if (strpos($image_name, 'img_') === 0 && $image_filename)						{							$image_name = substr($image_name, 4);							if (in_array($image_name, $imageset_definitions))							{								$sql_ary = array(									'image_name'		=> $image_name,									'image_filename'	=> $image_filename,									'image_height'		=> (int) $image_height,									'image_width'		=> (int) $image_width,									'imageset_id'		=> (int) $id,									'image_lang'		=> $row['lang_dir'],								);								$db->sql_query('INSERT INTO ' . STYLES_IMAGESET_DATA_TABLE . ' ' . $db->sql_build_array('INSERT', $sql_ary));							}						}					}					unset($cfg_data_imageset_data);				}			}			$db->sql_freeresult($result);		}		$db->sql_transaction('commit');		$log = ($store_db) ? 'LOG_' . $l_type . '_ADD_DB' : 'LOG_' . $l_type . '_ADD_FS';		add_log('admin', $log, $name);		// Return store_db in case it had to be altered		return $store_db;	}	/**	* Checks downwards dependencies	*	* @access public	* @param string $mode The element type to check - only template is supported	* @param int $id The template id	* @returns false if no component inherits, array with name, path and id for each subtemplate otherwise	*/	function check_inheritance($mode, $id)	{		global $db;		$l_type = strtoupper($mode);		switch ($mode)		{			case 'template':				$sql_from = STYLES_TEMPLATE_TABLE;			break;			case 'theme':				$sql_from = STYLES_THEME_TABLE;			break;			case 'imageset':				$sql_from = STYLES_IMAGESET_TABLE;			break;		}		$sql = "SELECT {$mode}_id, {$mode}_name, {$mode}_path			FROM $sql_from			WHERE {$mode}_inherits_id = " . (int) $id;		$result = $db->sql_query($sql);		$names = array();		while ($row = $db->sql_fetchrow($result))		{			$names[$row["{$mode}_id"]] = array(				"{$mode}_id" => $row["{$mode}_id"],				"{$mode}_name" => $row["{$mode}_name"],				"{$mode}_path" => $row["{$mode}_path"],			);		}		$db->sql_freeresult($result);		if (sizeof($names))		{			return $names;		}		else		{			return false;		}	}	/**	* Checks upwards dependencies	*	* @access public	* @param string $mode The element type to check - only template is supported	* @param int $id The template id	* @returns false if the component does not inherit, array with name, path and id otherwise	*/	function get_super($mode, $id)	{		global $db;		$l_type = strtoupper($mode);		switch ($mode)		{			case 'template':				$sql_from = STYLES_TEMPLATE_TABLE;			break;			case 'theme':				$sql_from = STYLES_THEME_TABLE;			break;			case 'imageset':				$sql_from = STYLES_IMAGESET_TABLE;			break;		}		$sql = "SELECT {$mode}_inherits_id			FROM $sql_from			WHERE {$mode}_id = " . (int) $id;		$result = $db->sql_query_limit($sql, 1);		if ($row = $db->sql_fetchrow($result))		{			$db->sql_freeresult($result);		}		else		{			return false;		}		$super_id = $row["{$mode}_inherits_id"];		$sql = "SELECT {$mode}_id, {$mode}_name, {$mode}_path			FROM $sql_from			WHERE {$mode}_id = " . (int) $super_id;		$result = $db->sql_query_limit($sql, 1);		if ($row = $db->sql_fetchrow($result))		{			$db->sql_freeresult($result);			return $row;		}		return false;	}	/**	* Moves a template set and its subtemplates to the database	*	* @access public	* @param string $mode The component to move - only template is supported	* @param int $id The template id	*/	function store_in_db($mode, $id)	{		global $db, $user;		$error = array();		$l_type = strtoupper($mode);		if ($super = $this->get_super($mode, $id))		{			$error[] = (sprintf($user->lang["{$l_type}_INHERITS"], $super['template_name']));			return $error;		}		$sql = "SELECT {$mode}_id, {$mode}_name, {$mode}_path			FROM " . STYLES_TEMPLATE_TABLE . '			WHERE template_id = ' . (int) $id;		$result = $db->sql_query_limit($sql, 1);		if ($row = $db->sql_fetchrow($result))		{			$db->sql_freeresult($result);			$subs = $this->check_inheritance($mode, $id);			$this->_store_in_db($mode, $id, $row["{$mode}_path"]);			if ($subs && sizeof($subs))			{				foreach ($subs as $sub_id => $sub)				{					if ($err = $this->_store_in_db($mode, $sub["{$mode}_id"], $sub["{$mode}_path"]))					{						$error[] = $err;					}				}			}		}		if (sizeof($error))		{			return $error;		}		return false;	}	/**	* Moves a template set to the database	*	* @access private	* @param string $mode The component to move - only template is supported	* @param int $id The template id	* @param string $path TThe path to the template files	*/	function _store_in_db($mode, $id, $path)	{		global $phpbb_root_path, $db;		$filelist = filelist("{$phpbb_root_path}styles/{$path}/template", '', 'html');		$this->store_templates('insert', $id, $path, $filelist);		// Okay, we do the query here -shouldn't be triggered often.		$sql = 'UPDATE ' . STYLES_TEMPLATE_TABLE . '						SET template_storedb = 1						WHERE template_id = ' . $id;		$db->sql_query($sql);	}	/**	* Moves a template set and its subtemplates to the filesystem	*	* @access public	* @param string $mode The component to move - only template is supported	* @param int $id The template id	*/	function store_in_fs($mode, $id)	{		global $db, $user;		$error = array();		$l_type = strtoupper($mode);		if ($super = $this->get_super($mode, $id))		{			$error[] = (sprintf($user->lang["{$l_type}_INHERITS"], $super['template_name']));			return($error);		}		$sql = "SELECT {$mode}_id, {$mode}_name, {$mode}_path			FROM " . STYLES_TEMPLATE_TABLE . '			WHERE template_id = ' . (int) $id;		$result = $db->sql_query_limit($sql, 1);		if ($row = $db->sql_fetchrow($result))		{			$db->sql_freeresult($result);			if (!sizeof($error))			{				$subs = $this->check_inheritance($mode, $id);				$this->_store_in_fs($mode, $id, $row["{$mode}_path"]);				if ($subs && sizeof($subs))				{					foreach ($subs as $sub_id => $sub)					{						$this->_store_in_fs($mode, $sub["{$mode}_id"], $sub["{$mode}_path"]);					}				}			}			if (sizeof($error))			{				$this->store_in_db($id, $mode);				return $error;			}		}		return false;	}	/**	* Moves a template set to the filesystem	*	* @access private	* @param string $mode The component to move - only template is supported	* @param int $id The template id	* @param string $path The path to the template	*/	function _store_in_fs($mode, $id, $path)	{		global $phpbb_root_path, $db, $user, $safe_mode;		$store_db = 0;		$error = array();		if (!$safe_mode && phpbb_is_writable("{$phpbb_root_path}styles/{$path}/template"))		{			$sql = 'SELECT *					FROM ' . STYLES_TEMPLATE_DATA_TABLE . "					WHERE template_id = $id";			$result = $db->sql_query($sql);			while ($row = $db->sql_fetchrow($result))			{				if (!($fp = @fopen("{$phpbb_root_path}styles/{$path}/template/" . $row['template_filename'], 'wb')))				{					$store_db = 1;					$error[] = $user->lang['EDIT_TEMPLATE_STORED_DB'];					break;				}				fwrite($fp, $row['template_data']);				fclose($fp);			}			$db->sql_freeresult($result);			if (!$store_db)			{				$sql = 'DELETE FROM ' . STYLES_TEMPLATE_DATA_TABLE . "						WHERE template_id = $id";				$db->sql_query($sql);			}		}		if (sizeof($error))		{			return $error;		}		$sql = 'UPDATE ' . STYLES_TEMPLATE_TABLE . '				SET template_storedb = 0				WHERE template_id = ' . $id;		$db->sql_query($sql);		return false;	}}?>
<?php/**** @package phpBB3* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//***/if (!defined('IN_PHPBB')){	exit;}/*	Ability to simply add own rules by doing three things:		1) Add an appropriate constant		2) Add a new check array to the global_privmsgs_rules variable and the condition array (if one is required)		3) Add a new language variable to ucp.php		The user is then able to select the new rule. It will be checked against and handled as specified.		To add new actions (yes, checks can be added here too) to the rule management, the core code has to be modified.*/define('RULE_IS_LIKE', 1);		// Is Likedefine('RULE_IS_NOT_LIKE', 2);	// Is Not Likedefine('RULE_IS', 3);			// Isdefine('RULE_IS_NOT', 4);		// Is Notdefine('RULE_BEGINS_WITH', 5);	// Begins withdefine('RULE_ENDS_WITH', 6);	// Ends withdefine('RULE_IS_FRIEND', 7);	// Is Frienddefine('RULE_IS_FOE', 8);		// Is Foedefine('RULE_IS_USER', 9);		// Is Userdefine('RULE_IS_GROUP', 10);	// Is In Usergroupdefine('RULE_ANSWERED', 11);	// Answereddefine('RULE_FORWARDED', 12);	// Forwardeddefine('RULE_TO_GROUP', 14);	// Usergroupdefine('RULE_TO_ME', 15);		// Medefine('ACTION_PLACE_INTO_FOLDER', 1);define('ACTION_MARK_AS_READ', 2);define('ACTION_MARK_AS_IMPORTANT', 3);define('ACTION_DELETE_MESSAGE', 4);define('CHECK_SUBJECT', 1);define('CHECK_SENDER', 2);define('CHECK_MESSAGE', 3);define('CHECK_STATUS', 4);define('CHECK_TO', 5);/*** Global private message rules* These rules define what to do if a rule is hit*/$global_privmsgs_rules = array(	CHECK_SUBJECT	=> array(		RULE_IS_LIKE		=> array('check0' => 'message_subject', 'function' => 'preg_match("/" . preg_quote({STRING}, "/") . "/i", {CHECK0})'),		RULE_IS_NOT_LIKE	=> array('check0' => 'message_subject', 'function' => '!(preg_match("/" . preg_quote({STRING}, "/") . "/i", {CHECK0}))'),		RULE_IS				=> array('check0' => 'message_subject', 'function' => '{CHECK0} == {STRING}'),		RULE_IS_NOT			=> array('check0' => 'message_subject', 'function' => '{CHECK0} != {STRING}'),		RULE_BEGINS_WITH	=> array('check0' => 'message_subject', 'function' => 'preg_match("/^" . preg_quote({STRING}, "/") . "/i", {CHECK0})'),		RULE_ENDS_WITH		=> array('check0' => 'message_subject', 'function' => 'preg_match("/" . preg_quote({STRING}, "/") . "$/i", {CHECK0})'),	),	CHECK_SENDER	=> array(		RULE_IS_LIKE		=> array('check0' => 'username', 'function' => 'preg_match("/" . preg_quote({STRING}, "/") . "/i", {CHECK0})'),		RULE_IS_NOT_LIKE	=> array('check0' => 'username', 'function' => '!(preg_match("/" . preg_quote({STRING}, "/") . "/i", {CHECK0}))'),		RULE_IS				=> array('check0' => 'username', 'function' => '{CHECK0} == {STRING}'),		RULE_IS_NOT			=> array('check0' => 'username', 'function' => '{CHECK0} != {STRING}'),		RULE_BEGINS_WITH	=> array('check0' => 'username', 'function' => 'preg_match("/^" . preg_quote({STRING}, "/") . "/i", {CHECK0})'),		RULE_ENDS_WITH		=> array('check0' => 'username', 'function' => 'preg_match("/" . preg_quote({STRING}, "/") . "$/i", {CHECK0})'),		RULE_IS_FRIEND		=> array('check0' => 'friend', 'function' => '{CHECK0} == 1'),		RULE_IS_FOE			=> array('check0' => 'foe', 'function' => '{CHECK0} == 1'),		RULE_IS_USER		=> array('check0' => 'author_id', 'function' => '{CHECK0} == {USER_ID}'),		RULE_IS_GROUP		=> array('check0' => 'author_in_group', 'function' => 'in_array({GROUP_ID}, {CHECK0})'),	),	CHECK_MESSAGE	=> array(		RULE_IS_LIKE		=> array('check0' => 'message_text', 'function' => 'preg_match("/" . preg_quote({STRING}, "/") . "/i", {CHECK0})'),		RULE_IS_NOT_LIKE	=> array('check0' => 'message_text', 'function' => '!(preg_match("/" . preg_quote({STRING}, "/") . "/i", {CHECK0}))'),		RULE_IS				=> array('check0' => 'message_text', 'function' => '{CHECK0} == {STRING}'),		RULE_IS_NOT			=> array('check0' => 'message_text', 'function' => '{CHECK0} != {STRING}'),	),	CHECK_STATUS	=> array(		RULE_ANSWERED		=> array('check0' => 'pm_replied', 'function' => '{CHECK0} == 1'),		RULE_FORWARDED		=> array('check0' => 'pm_forwarded', 'function' => '{CHECK0} == 1'),	),	CHECK_TO		=> array(		RULE_TO_GROUP		=> array('check0' => 'to', 'check1' => 'bcc', 'check2' => 'user_in_group', 'function' => 'in_array("g_" . {CHECK2}, {CHECK0}) || in_array("g_" . {CHECK2}, {CHECK1})'),		RULE_TO_ME			=> array('check0' => 'to', 'check1' => 'bcc', 'function' => 'in_array("u_" . $user_id, {CHECK0}) || in_array("u_" . $user_id, {CHECK1})'),	));/*** This is for defining which condition fields to show for which Rule*/$global_rule_conditions = array(	RULE_IS_LIKE		=> 'text',	RULE_IS_NOT_LIKE	=> 'text',	RULE_IS				=> 'text',	RULE_IS_NOT			=> 'text',	RULE_BEGINS_WITH	=> 'text',	RULE_ENDS_WITH		=> 'text',	RULE_IS_USER		=> 'user',	RULE_IS_GROUP		=> 'group');/*** Get all folder*/function get_folder($user_id, $folder_id = false){	global $db, $user, $template;	global $phpbb_root_path, $phpEx;	$folder = array();	// Get folder information	$sql = 'SELECT folder_id, COUNT(msg_id) as num_messages, SUM(pm_unread) as num_unread		FROM ' . PRIVMSGS_TO_TABLE . "		WHERE user_id = $user_id			AND folder_id <> " . PRIVMSGS_NO_BOX . '		GROUP BY folder_id';	$result = $db->sql_query($sql);	$num_messages = $num_unread = array();	while ($row = $db->sql_fetchrow($result))	{		$num_messages[(int) $row['folder_id']] = $row['num_messages'];		$num_unread[(int) $row['folder_id']] = $row['num_unread'];	}	$db->sql_freeresult($result);	// Make sure the default boxes are defined	$available_folder = array(PRIVMSGS_INBOX, PRIVMSGS_OUTBOX, PRIVMSGS_SENTBOX);	foreach ($available_folder as $default_folder)	{		if (!isset($num_messages[$default_folder]))		{			$num_messages[$default_folder] = 0;		}		if (!isset($num_unread[$default_folder]))		{			$num_unread[$default_folder] = 0;		}	}	// Adjust unread status for outbox	$num_unread[PRIVMSGS_OUTBOX] = $num_messages[PRIVMSGS_OUTBOX];	$folder[PRIVMSGS_INBOX] = array(		'folder_name'		=> $user->lang['PM_INBOX'],		'num_messages'		=> $num_messages[PRIVMSGS_INBOX],		'unread_messages'	=> $num_unread[PRIVMSGS_INBOX]	);	// Custom Folder	$sql = 'SELECT folder_id, folder_name, pm_count		FROM ' . PRIVMSGS_FOLDER_TABLE . "			WHERE user_id = $user_id";	$result = $db->sql_query($sql);	while ($row = $db->sql_fetchrow($result))	{		$folder[$row['folder_id']] = array(			'folder_name'		=> $row['folder_name'],			'num_messages'		=> $row['pm_count'],			'unread_messages'	=> ((isset($num_unread[$row['folder_id']])) ? $num_unread[$row['folder_id']] : 0)		);	}	$db->sql_freeresult($result);	$folder[PRIVMSGS_OUTBOX] = array(		'folder_name'		=> $user->lang['PM_OUTBOX'],		'num_messages'		=> $num_messages[PRIVMSGS_OUTBOX],		'unread_messages'	=> $num_unread[PRIVMSGS_OUTBOX]	);	$folder[PRIVMSGS_SENTBOX] = array(		'folder_name'		=> $user->lang['PM_SENTBOX'],		'num_messages'		=> $num_messages[PRIVMSGS_SENTBOX],		'unread_messages'	=> $num_unread[PRIVMSGS_SENTBOX]	);	// Define Folder Array for template designers (and for making custom folders usable by the template too)	foreach ($folder as $f_id => $folder_ary)	{		$folder_id_name = ($f_id == PRIVMSGS_INBOX) ? 'inbox' : (($f_id == PRIVMSGS_OUTBOX) ? 'outbox' : 'sentbox');		$template->assign_block_vars('folder', array(			'FOLDER_ID'			=> $f_id,			'FOLDER_NAME'		=> $folder_ary['folder_name'],			'NUM_MESSAGES'		=> $folder_ary['num_messages'],			'UNREAD_MESSAGES'	=> $folder_ary['unread_messages'],			'U_FOLDER'			=> ($f_id > 0) ? append_sid("{$phpbb_root_path}ucp.$phpEx", 'i=pm&amp;folder=' . $f_id) : append_sid("{$phpbb_root_path}ucp.$phpEx", 'i=pm&amp;folder=' . $folder_id_name),			'S_CUR_FOLDER'		=> ($f_id === $folder_id) ? true : false,			'S_UNREAD_MESSAGES'	=> ($folder_ary['unread_messages']) ? true : false,			'S_CUSTOM_FOLDER'	=> ($f_id > 0) ? true : false)		);	}	if ($folder_id !== false && !isset($folder[$folder_id]))	{		trigger_error('UNKNOWN_FOLDER');	}	return $folder;}/*** Delete Messages From Sentbox* we are doing this here because this saves us a bunch of checks and queries*/function clean_sentbox($num_sentbox_messages){	global $db, $user, $config;	// Check Message Limit	if ($user->data['message_limit'] && $num_sentbox_messages > $user->data['message_limit'])	{		// Delete old messages		$sql = 'SELECT t.msg_id			FROM ' . PRIVMSGS_TO_TABLE . ' t, ' . PRIVMSGS_TABLE . ' p			WHERE t.msg_id = p.msg_id				AND t.user_id = ' . $user->data['user_id'] . '				AND t.folder_id = ' . PRIVMSGS_SENTBOX . '			ORDER BY p.message_time ASC';		$result = $db->sql_query_limit($sql, ($num_sentbox_messages - $user->data['message_limit']));		$delete_ids = array();		while ($row = $db->sql_fetchrow($result))		{			$delete_ids[] = $row['msg_id'];		}		$db->sql_freeresult($result);		delete_pm($user->data['user_id'], $delete_ids, PRIVMSGS_SENTBOX);	}}/*** Check Rule against Message Information*/function check_rule(&$rules, &$rule_row, &$message_row, $user_id){	global $user, $config;	if (!isset($rules[$rule_row['rule_check']][$rule_row['rule_connection']]))	{		return false;	}	$check_ary = $rules[$rule_row['rule_check']][$rule_row['rule_connection']];	// Replace Check Literals	$evaluate = $check_ary['function'];	$evaluate = preg_replace('/{(CHECK[0-9])}/', '$message_row[$check_ary[strtolower("\1")]]', $evaluate);	// Replace Rule Literals	$evaluate = preg_replace('/{(STRING|USER_ID|GROUP_ID)}/', '$rule_row["rule_" . strtolower("\1")]', $evaluate);	// Evil Statement	$result = false;	eval('$result = (' . $evaluate . ') ? true : false;');	if (!$result)	{		return false;	}	switch ($rule_row['rule_action'])	{		case ACTION_PLACE_INTO_FOLDER:			return array('action' => $rule_row['rule_action'], 'folder_id' => $rule_row['rule_folder_id']);		break;		case ACTION_MARK_AS_READ:		case ACTION_MARK_AS_IMPORTANT:			return array('action' => $rule_row['rule_action'], 'pm_unread' => $message_row['pm_unread'], 'pm_marked' => $message_row['pm_marked']);		break;		case ACTION_DELETE_MESSAGE:			global $db, $auth;			// Check for admins/mods - users are not allowed to remove those messages...			// We do the check here to make sure the data we use is consistent			$sql = 'SELECT user_id, user_type, user_permissions				FROM ' . USERS_TABLE . '				WHERE user_id = ' . (int) $message_row['author_id'];			$result = $db->sql_query($sql);			$userdata = $db->sql_fetchrow($result);			$db->sql_freeresult($result);			$auth2 = new auth();			$auth2->acl($userdata);			if (!$auth2->acl_get('a_') && !$auth2->acl_get('m_') && !$auth2->acl_getf_global('m_'))			{				return array('action' => $rule_row['rule_action'], 'pm_unread' => $message_row['pm_unread'], 'pm_marked' => $message_row['pm_marked']);			}			return false;		break;		default:			return false;	}	return false;}/*** Update user PM count*/function update_pm_counts(){	global $user, $db;	// Update unread count	$sql = 'SELECT COUNT(msg_id) as num_messages		FROM ' . PRIVMSGS_TO_TABLE . '		WHERE pm_unread = 1			AND folder_id <> ' . PRIVMSGS_OUTBOX . '			AND user_id = ' . $user->data['user_id'];	$result = $db->sql_query($sql);	$user->data['user_unread_privmsg'] = (int) $db->sql_fetchfield('num_messages');	$db->sql_freeresult($result);	// Update new pm count	$sql = 'SELECT COUNT(msg_id) as num_messages		FROM ' . PRIVMSGS_TO_TABLE . '		WHERE pm_new = 1			AND folder_id IN (' . PRIVMSGS_NO_BOX . ', ' . PRIVMSGS_HOLD_BOX . ')			AND user_id = ' . $user->data['user_id'];	$result = $db->sql_query($sql);	$user->data['user_new_privmsg'] = (int) $db->sql_fetchfield('num_messages');	$db->sql_freeresult($result);	$db->sql_query('UPDATE ' . USERS_TABLE . ' SET ' . $db->sql_build_array('UPDATE', array(		'user_unread_privmsg'	=> (int) $user->data['user_unread_privmsg'],		'user_new_privmsg'		=> (int) $user->data['user_new_privmsg'],	)) . ' WHERE user_id = ' . $user->data['user_id']);	// Ok, here we need to repair something, other boxes than privmsgs_no_box and privmsgs_hold_box should not carry the pm_new flag.	if (!$user->data['user_new_privmsg'])	{		$sql = 'UPDATE ' . PRIVMSGS_TO_TABLE . '			SET pm_new = 0			WHERE pm_new = 1				AND folder_id NOT IN (' . PRIVMSGS_NO_BOX . ', ' . PRIVMSGS_HOLD_BOX . ')				AND user_id = ' . $user->data['user_id'];		$db->sql_query($sql);	}}/*** Place new messages into appropriate folder*/function place_pm_into_folder(&$global_privmsgs_rules, $release = false){	global $db, $user, $config;	if (!$user->data['user_new_privmsg'])	{		return array('not_moved' => 0, 'removed' => 0);	}	$user_message_rules = (int) $user->data['user_message_rules'];	$user_id = (int) $user->data['user_id'];	$action_ary = $move_into_folder = array();	$num_removed = 0;	// Newly processing on-hold messages	if ($release)	{		$sql = 'UPDATE ' . PRIVMSGS_TO_TABLE . '			SET folder_id = ' . PRIVMSGS_NO_BOX . '			WHERE folder_id = ' . PRIVMSGS_HOLD_BOX . "				AND user_id = $user_id";		$db->sql_query($sql);	}	// Get those messages not yet placed into any box	$retrieve_sql = 'SELECT t.*, p.*, u.username, u.user_id, u.group_id		FROM ' . PRIVMSGS_TO_TABLE . ' t, ' . PRIVMSGS_TABLE . ' p, ' . USERS_TABLE . " u		WHERE t.user_id = $user_id			AND p.author_id = u.user_id			AND t.folder_id = " . PRIVMSGS_NO_BOX . '			AND t.msg_id = p.msg_id';	// Just place into the appropriate arrays if no rules need to be checked	if (!$user_message_rules)	{		$result = $db->sql_query($retrieve_sql);		while ($row = $db->sql_fetchrow($result))		{			$action_ary[$row['msg_id']][] = array('action' => false);		}		$db->sql_freeresult($result);	}	else	{		$user_rules = $zebra = $check_rows = array();		$user_ids = $memberships = array();		// First of all, grab all rules and retrieve friends/foes		$sql = 'SELECT *			FROM ' . PRIVMSGS_RULES_TABLE . "			WHERE user_id = $user_id";		$result = $db->sql_query($sql);		$user_rules = $db->sql_fetchrowset($result);		$db->sql_freeresult($result);		if (sizeof($user_rules))		{			$sql = 'SELECT zebra_id, friend, foe				FROM ' . ZEBRA_TABLE . "				WHERE user_id = $user_id";			$result = $db->sql_query($sql);			while ($row = $db->sql_fetchrow($result))			{				$zebra[$row['zebra_id']] = $row;			}			$db->sql_freeresult($result);		}		// Now build a bare-bone check_row array		$result = $db->sql_query($retrieve_sql);		while ($row = $db->sql_fetchrow($result))		{			$check_rows[] = array_merge($row, array(				'to'				=> explode(':', $row['to_address']),				'bcc'				=> explode(':', $row['bcc_address']),				'friend'			=> (isset($zebra[$row['author_id']])) ? $zebra[$row['author_id']]['friend'] : 0,				'foe'				=> (isset($zebra[$row['author_id']])) ? $zebra[$row['author_id']]['foe'] : 0,				'user_in_group'		=> array($user->data['group_id']),				'author_in_group'	=> array())			);			$user_ids[] = $row['user_id'];		}		$db->sql_freeresult($result);		// Retrieve user memberships		if (sizeof($user_ids))		{			$sql = 'SELECT *				FROM ' . USER_GROUP_TABLE . '				WHERE ' . $db->sql_in_set('user_id', $user_ids) . '					AND user_pending = 0';			$result = $db->sql_query($sql);			while ($row = $db->sql_fetchrow($result))			{				$memberships[$row['user_id']][] = $row['group_id'];			}			$db->sql_freeresult($result);		}		// Now place into the appropriate folder		foreach ($check_rows as $row)		{			// Add membership if set			if (isset($memberships[$row['author_id']]))			{				$row['author_in_group'] = $memberships[$row['user_id']];			}			// Check Rule - this should be very quick since we have all information we need			$is_match = false;			foreach ($user_rules as $rule_row)			{				if (($action = check_rule($global_privmsgs_rules, $rule_row, $row, $user_id)) !== false)				{					$is_match = true;					$action_ary[$row['msg_id']][] = $action;				}			}			if (!$is_match)			{				$action_ary[$row['msg_id']][] = array('action' => false);			}		}		unset($user_rules, $zebra, $check_rows, $user_ids, $memberships);	}	// We place actions into arrays, to save queries.	$sql = $unread_ids = $delete_ids = $important_ids = array();	foreach ($action_ary as $msg_id => $msg_ary)	{		// It is allowed to execute actions more than once, except placing messages into folder		$folder_action = $message_removed = false;		foreach ($msg_ary as $pos => $rule_ary)		{			if ($folder_action && $rule_ary['action'] == ACTION_PLACE_INTO_FOLDER)			{				continue;			}			switch ($rule_ary['action'])			{				case ACTION_PLACE_INTO_FOLDER:					// Folder actions have precedence, so we will remove any other ones					$folder_action = true;					$move_into_folder[(int) $rule_ary['folder_id']][] = $msg_id;				break;				case ACTION_MARK_AS_READ:					if ($rule_ary['pm_unread'])					{						$unread_ids[] = $msg_id;					}				break;				case ACTION_DELETE_MESSAGE:					$delete_ids[] = $msg_id;					$message_removed = true;				break;				case ACTION_MARK_AS_IMPORTANT:					if (!$rule_ary['pm_marked'])					{						$important_ids[] = $msg_id;					}				break;			}		}		// We place this here because it could happen that the messages are doubled if a rule marks a message and then moves it into a specific		// folder. Here we simply move the message into the INBOX if it gets not removed and also not put into a custom folder.		if (!$folder_action && !$message_removed)		{			$move_into_folder[PRIVMSGS_INBOX][] = $msg_id;		}	}	// Do not change the order of processing	// The number of queries needed to be executed here highly depends on the defined rules and are	// only gone through if new messages arrive.	// Delete messages	if (sizeof($delete_ids))	{		$num_removed += sizeof($delete_ids);		delete_pm($user_id, $delete_ids, PRIVMSGS_NO_BOX);	}	// Set messages to Unread	if (sizeof($unread_ids))	{		$sql = 'UPDATE ' . PRIVMSGS_TO_TABLE . '			SET pm_unread = 0			WHERE ' . $db->sql_in_set('msg_id', $unread_ids) . "				AND user_id = $user_id				AND folder_id = " . PRIVMSGS_NO_BOX;		$db->sql_query($sql);	}	// mark messages as important	if (sizeof($important_ids))	{		$sql = 'UPDATE ' . PRIVMSGS_TO_TABLE . '			SET pm_marked = 1 - pm_marked			WHERE folder_id = ' . PRIVMSGS_NO_BOX . "				AND user_id = $user_id				AND " . $db->sql_in_set('msg_id', $important_ids);		$db->sql_query($sql);	}	// Move into folder	$folder = array();	if (sizeof($move_into_folder))	{		// Determine Full Folder Action - we need the move to folder id later eventually		$full_folder_action = ($user->data['user_full_folder'] == FULL_FOLDER_NONE) ? ($config['full_folder_action'] - (FULL_FOLDER_NONE*(-1))) : $user->data['user_full_folder'];		$sql_folder = array_keys($move_into_folder);		if ($full_folder_action >= 0)		{			$sql_folder[] = $full_folder_action;		}		$sql = 'SELECT folder_id, pm_count			FROM ' . PRIVMSGS_FOLDER_TABLE . '			WHERE ' . $db->sql_in_set('folder_id', $sql_folder) . "				AND user_id = $user_id";		$result = $db->sql_query($sql);		while ($row = $db->sql_fetchrow($result))		{			$folder[(int) $row['folder_id']] = (int) $row['pm_count'];		}		$db->sql_freeresult($result);		unset($sql_folder);		if (isset($move_into_folder[PRIVMSGS_INBOX]))		{			$sql = 'SELECT COUNT(msg_id) as num_messages				FROM ' . PRIVMSGS_TO_TABLE . "				WHERE user_id = $user_id					AND folder_id = " . PRIVMSGS_INBOX;			$result = $db->sql_query($sql);			$folder[PRIVMSGS_INBOX] = (int) $db->sql_fetchfield('num_messages');			$db->sql_freeresult($result);		}	}	// Here we have ideally only one folder to move into	foreach ($move_into_folder as $folder_id => $msg_ary)	{		$dest_folder = $folder_id;		$full_folder_action = FULL_FOLDER_NONE;		// Check Message Limit - we calculate with the complete array, most of the time it is one message		// But we are making sure that the other way around works too (more messages in queue than allowed to be stored)		if ($user->data['message_limit'] && $folder[$folder_id] && ($folder[$folder_id] + sizeof($msg_ary)) > $user->data['message_limit'])		{			$full_folder_action = ($user->data['user_full_folder'] == FULL_FOLDER_NONE) ? ($config['full_folder_action'] - (FULL_FOLDER_NONE*(-1))) : $user->data['user_full_folder'];			// If destination folder itself is full...			if ($full_folder_action >= 0 && ($folder[$full_folder_action] + sizeof($msg_ary)) > $user->data['message_limit'])			{				$full_folder_action = $config['full_folder_action'] - (FULL_FOLDER_NONE*(-1));			}			// If Full Folder Action is to move to another folder, we simply adjust the destination folder			if ($full_folder_action >= 0)			{				$dest_folder = $full_folder_action;			}			else if ($full_folder_action == FULL_FOLDER_DELETE)			{				// Delete some messages. NOTE: Ordered by msg_id here instead of message_time!				$sql = 'SELECT msg_id					FROM ' . PRIVMSGS_TO_TABLE . "					WHERE user_id = $user_id						AND folder_id = $dest_folder					ORDER BY msg_id ASC";				$result = $db->sql_query_limit($sql, (($folder[$dest_folder] + sizeof($msg_ary)) - $user->data['message_limit']));				$delete_ids = array();				while ($row = $db->sql_fetchrow($result))				{					$delete_ids[] = $row['msg_id'];				}				$db->sql_freeresult($result);				$num_removed += sizeof($delete_ids);				delete_pm($user_id, $delete_ids, $dest_folder);			}		}		//		if ($full_folder_action == FULL_FOLDER_HOLD)		{			$sql = 'UPDATE ' . PRIVMSGS_TO_TABLE . '				SET folder_id = ' . PRIVMSGS_HOLD_BOX . '				WHERE folder_id = ' . PRIVMSGS_NO_BOX . "					AND user_id = $user_id					AND " . $db->sql_in_set('msg_id', $msg_ary);			$db->sql_query($sql);		}		else		{			$sql = 'UPDATE ' . PRIVMSGS_TO_TABLE . "				SET folder_id = $dest_folder, pm_new = 0				WHERE folder_id = " . PRIVMSGS_NO_BOX . "					AND user_id = $user_id					AND pm_new = 1					AND " . $db->sql_in_set('msg_id', $msg_ary);			$db->sql_query($sql);			if ($dest_folder != PRIVMSGS_INBOX)			{				$sql = 'UPDATE ' . PRIVMSGS_FOLDER_TABLE . '					SET pm_count = pm_count + ' . (int) $db->sql_affectedrows() . "					WHERE folder_id = $dest_folder						AND user_id = $user_id";				$db->sql_query($sql);			}		}	}	if (sizeof($action_ary))	{		// Move from OUTBOX to SENTBOX		// We are not checking any full folder status here... SENTBOX is a special treatment (old messages get deleted)		$sql = 'UPDATE ' . PRIVMSGS_TO_TABLE . '			SET folder_id = ' . PRIVMSGS_SENTBOX . '			WHERE folder_id = ' . PRIVMSGS_OUTBOX . '				AND ' . $db->sql_in_set('msg_id', array_keys($action_ary));		$db->sql_query($sql);	}	// Update new/unread count	update_pm_counts();	// Now check how many messages got not moved...	$sql = 'SELECT COUNT(msg_id) as num_messages		FROM ' . PRIVMSGS_TO_TABLE . "		WHERE user_id = $user_id			AND folder_id = " . PRIVMSGS_HOLD_BOX;	$result = $db->sql_query($sql);	$num_not_moved = (int) $db->sql_fetchfield('num_messages');	$db->sql_freeresult($result);	return array('not_moved' => $num_not_moved, 'removed' => $num_removed);}/*** Move PM from one to another folder*/function move_pm($user_id, $message_limit, $move_msg_ids, $dest_folder, $cur_folder_id){	global $db, $user;	global $phpbb_root_path, $phpEx;	$num_moved = 0;	if (!is_array($move_msg_ids))	{		$move_msg_ids = array($move_msg_ids);	}	if (sizeof($move_msg_ids) && !in_array($dest_folder, array(PRIVMSGS_NO_BOX, PRIVMSGS_OUTBOX, PRIVMSGS_SENTBOX)) &&		!in_array($cur_folder_id, array(PRIVMSGS_NO_BOX, PRIVMSGS_OUTBOX)) && $cur_folder_id != $dest_folder)	{		// We have to check the destination folder ;)		if ($dest_folder != PRIVMSGS_INBOX)		{			$sql = 'SELECT folder_id, folder_name, pm_count				FROM ' . PRIVMSGS_FOLDER_TABLE . "				WHERE folder_id = $dest_folder					AND user_id = $user_id";			$result = $db->sql_query($sql);			$row = $db->sql_fetchrow($result);			$db->sql_freeresult($result);			if (!$row)			{				trigger_error('NOT_AUTHORISED');			}			if ($message_limit && $row['pm_count'] + sizeof($move_msg_ids) > $message_limit)			{				$message = sprintf($user->lang['NOT_ENOUGH_SPACE_FOLDER'], $row['folder_name']) . '<br /><br />';				$message .= sprintf($user->lang['CLICK_RETURN_FOLDER'], '<a href="' . append_sid("{$phpbb_root_path}ucp.$phpEx", 'i=pm&amp;folder=' . $row['folder_id']) . '">', '</a>', $row['folder_name']);				trigger_error($message);			}		}		else		{			$sql = 'SELECT COUNT(msg_id) as num_messages				FROM ' . PRIVMSGS_TO_TABLE . '				WHERE folder_id = ' . PRIVMSGS_INBOX . "					AND user_id = $user_id";			$result = $db->sql_query($sql);			$num_messages = (int) $db->sql_fetchfield('num_messages');			$db->sql_freeresult($result);			if ($message_limit && $num_messages + sizeof($move_msg_ids) > $message_limit)			{				$message = sprintf($user->lang['NOT_ENOUGH_SPACE_FOLDER'], $user->lang['PM_INBOX']) . '<br /><br />';				$message .= sprintf($user->lang['CLICK_RETURN_FOLDER'], '<a href="' . append_sid("{$phpbb_root_path}ucp.$phpEx", 'i=pm&amp;folder=inbox') . '">', '</a>', $user->lang['PM_INBOX']);				trigger_error($message);			}		}		$sql = 'UPDATE ' . PRIVMSGS_TO_TABLE . "			SET folder_id = $dest_folder			WHERE folder_id = $cur_folder_id				AND user_id = $user_id				AND " . $db->sql_in_set('msg_id', $move_msg_ids);		$db->sql_query($sql);		$num_moved = $db->sql_affectedrows();		// Update pm counts		if ($num_moved)		{			if (!in_array($cur_folder_id, array(PRIVMSGS_INBOX, PRIVMSGS_OUTBOX, PRIVMSGS_SENTBOX)))			{				$sql = 'UPDATE ' . PRIVMSGS_FOLDER_TABLE . "					SET pm_count = pm_count - $num_moved					WHERE folder_id = $cur_folder_id						AND user_id = $user_id";				$db->sql_query($sql);			}			if ($dest_folder != PRIVMSGS_INBOX)			{				$sql = 'UPDATE ' . PRIVMSGS_FOLDER_TABLE . "					SET pm_count = pm_count + $num_moved					WHERE folder_id = $dest_folder						AND user_id = $user_id";				$db->sql_query($sql);			}		}	}	else if (in_array($cur_folder_id, array(PRIVMSGS_NO_BOX, PRIVMSGS_OUTBOX)))	{		trigger_error('CANNOT_MOVE_SPECIAL');	}	return $num_moved;}/*** Update unread message status*/function update_unread_status($unread, $msg_id, $user_id, $folder_id){	if (!$unread)	{		return;	}	global $db, $user;	$sql = 'UPDATE ' . PRIVMSGS_TO_TABLE . "		SET pm_unread = 0		WHERE msg_id = $msg_id			AND user_id = $user_id			AND folder_id = $folder_id";	$db->sql_query($sql);	$sql = 'UPDATE ' . USERS_TABLE . "		SET user_unread_privmsg = user_unread_privmsg - 1		WHERE user_id = $user_id";	$db->sql_query($sql);	if ($user->data['user_id'] == $user_id)	{		$user->data['user_unread_privmsg']--;		// Try to cope with previous wrong conversions...		if ($user->data['user_unread_privmsg'] < 0)		{			$sql = 'UPDATE ' . USERS_TABLE . "				SET user_unread_privmsg = 0				WHERE user_id = $user_id";			$db->sql_query($sql);			$user->data['user_unread_privmsg'] = 0;		}	}}/*** Handle all actions possible with marked messages*/function handle_mark_actions($user_id, $mark_action){	global $db, $user, $phpbb_root_path, $phpEx;	$msg_ids		= request_var('marked_msg_id', array(0));	$cur_folder_id	= request_var('cur_folder_id', PRIVMSGS_NO_BOX);	$confirm		= (isset($_POST['confirm'])) ? true : false;	if (!sizeof($msg_ids))	{		return false;	}	switch ($mark_action)	{		case 'mark_important':			$sql = 'UPDATE ' . PRIVMSGS_TO_TABLE . "				SET pm_marked = 1 - pm_marked				WHERE folder_id = $cur_folder_id					AND user_id = $user_id					AND " . $db->sql_in_set('msg_id', $msg_ids);			$db->sql_query($sql);		break;		case 'delete_marked':			global $auth;			if (!$auth->acl_get('u_pm_delete'))			{				trigger_error('NO_AUTH_DELETE_MESSAGE');			}			if (confirm_box(true))			{				delete_pm($user_id, $msg_ids, $cur_folder_id);				$success_msg = (sizeof($msg_ids) == 1) ? 'MESSAGE_DELETED' : 'MESSAGES_DELETED';				$redirect = append_sid("{$phpbb_root_path}ucp.$phpEx", 'i=pm&amp;folder=' . $cur_folder_id);				meta_refresh(3, $redirect);				trigger_error($user->lang[$success_msg] . '<br /><br />' . sprintf($user->lang['RETURN_FOLDER'], '<a href="' . $redirect . '">', '</a>'));			}			else			{				$s_hidden_fields = array(					'cur_folder_id'	=> $cur_folder_id,					'mark_option'	=> 'delete_marked',					'submit_mark'	=> true,					'marked_msg_id'	=> $msg_ids				);				confirm_box(false, 'DELETE_MARKED_PM', build_hidden_fields($s_hidden_fields));			}		break;		default:			return false;	}	return true;}/*** Delete PM(s)*/function delete_pm($user_id, $msg_ids, $folder_id){	global $db, $user, $phpbb_root_path, $phpEx;	$user_id	= (int) $user_id;	$folder_id	= (int) $folder_id;	if (!$user_id)	{		return false;	}	if (!is_array($msg_ids))	{		if (!$msg_ids)		{			return false;		}		$msg_ids = array($msg_ids);	}	if (!sizeof($msg_ids))	{		return false;	}	// Get PM Information for later deleting	$sql = 'SELECT msg_id, pm_unread, pm_new		FROM ' . PRIVMSGS_TO_TABLE . '		WHERE ' . $db->sql_in_set('msg_id', array_map('intval', $msg_ids)) . "			AND folder_id = $folder_id			AND user_id = $user_id";	$result = $db->sql_query($sql);	$delete_rows = array();	$num_unread = $num_new = $num_deleted = 0;	while ($row = $db->sql_fetchrow($result))	{		$num_unread += (int) $row['pm_unread'];		$num_new += (int) $row['pm_new'];		$delete_rows[$row['msg_id']] = 1;	}	$db->sql_freeresult($result);	unset($msg_ids);	if (!sizeof($delete_rows))	{		return false;	}	$db->sql_transaction('begin');	// if no one has read the message yet (meaning it is in users outbox)	// then mark the message as deleted...	if ($folder_id == PRIVMSGS_OUTBOX)	{		// Remove PM from Outbox		$sql = 'DELETE FROM ' . PRIVMSGS_TO_TABLE . "			WHERE user_id = $user_id AND folder_id = " . PRIVMSGS_OUTBOX . '				AND ' . $db->sql_in_set('msg_id', array_keys($delete_rows));		$db->sql_query($sql);		// Update PM Information for safety		$sql = 'UPDATE ' . PRIVMSGS_TABLE . " SET message_text = ''			WHERE " . $db->sql_in_set('msg_id', array_keys($delete_rows));		$db->sql_query($sql);		// Set delete flag for those intended to receive the PM		// We do not remove the message actually, to retain some basic information (sent time for example)		$sql = 'UPDATE ' . PRIVMSGS_TO_TABLE . '			SET pm_deleted = 1			WHERE ' . $db->sql_in_set('msg_id', array_keys($delete_rows));		$db->sql_query($sql);		$num_deleted = $db->sql_affectedrows();	}	else	{		// Delete private message data		$sql = 'DELETE FROM ' . PRIVMSGS_TO_TABLE . "			WHERE user_id = $user_id				AND folder_id = $folder_id				AND " . $db->sql_in_set('msg_id', array_keys($delete_rows));		$db->sql_query($sql);		$num_deleted = $db->sql_affectedrows();	}	// if folder id is user defined folder then decrease pm_count	if (!in_array($folder_id, array(PRIVMSGS_INBOX, PRIVMSGS_OUTBOX, PRIVMSGS_SENTBOX, PRIVMSGS_NO_BOX)))	{		$sql = 'UPDATE ' . PRIVMSGS_FOLDER_TABLE . "			SET pm_count = pm_count - $num_deleted			WHERE folder_id = $folder_id";		$db->sql_query($sql);	}	// Update unread and new status field	if ($num_unread || $num_new)	{		$set_sql = ($num_unread) ? 'user_unread_privmsg = user_unread_privmsg - ' . $num_unread : '';		if ($num_new)		{			$set_sql .= ($set_sql != '') ? ', ' : '';			$set_sql .= 'user_new_privmsg = user_new_privmsg - ' . $num_new;		}		$db->sql_query('UPDATE ' . USERS_TABLE . " SET $set_sql WHERE user_id = $user_id");		$user->data['user_new_privmsg'] -= $num_new;		$user->data['user_unread_privmsg'] -= $num_unread;	}	// Now we have to check which messages we can delete completely	$sql = 'SELECT msg_id		FROM ' . PRIVMSGS_TO_TABLE . '		WHERE ' . $db->sql_in_set('msg_id', array_keys($delete_rows));	$result = $db->sql_query($sql);	while ($row = $db->sql_fetchrow($result))	{		unset($delete_rows[$row['msg_id']]);	}	$db->sql_freeresult($result);	$delete_ids = array_keys($delete_rows);	if (sizeof($delete_ids))	{		// Check if there are any attachments we need to remove		if (!function_exists('delete_attachments'))		{			include($phpbb_root_path . 'includes/functions_admin.' . $phpEx);		}		delete_attachments('message', $delete_ids, false);		$sql = 'DELETE FROM ' . PRIVMSGS_TABLE . '			WHERE ' . $db->sql_in_set('msg_id', $delete_ids);		$db->sql_query($sql);	}	$db->sql_transaction('commit');	return true;}/*** Rebuild message header*/function rebuild_header($check_ary){	global $db;	$address = array();	foreach ($check_ary as $check_type => $address_field)	{		// Split Addresses into users and groups		preg_match_all('/:?(u|g)_([0-9]+):?/', $address_field, $match);		$u = $g = array();		foreach ($match[1] as $id => $type)		{			${$type}[] = (int) $match[2][$id];		}		$_types = array('u', 'g');		foreach ($_types as $type)		{			if (sizeof($$type))			{				foreach ($$type as $id)				{					$address[$type][$id] = $check_type;				}			}		}	}	return $address;}/*** Print out/assign recipient information*/function write_pm_addresses($check_ary, $author_id, $plaintext = false){	global $db, $user, $template, $phpbb_root_path, $phpEx;	$addresses = array();	foreach ($check_ary as $check_type => $address_field)	{		if (!is_array($address_field))		{			// Split Addresses into users and groups			preg_match_all('/:?(u|g)_([0-9]+):?/', $address_field, $match);			$u = $g = array();			foreach ($match[1] as $id => $type)			{				${$type}[] = (int) $match[2][$id];			}		}		else		{			$u = $address_field['u'];			$g = $address_field['g'];		}		$address = array();		if (sizeof($u))		{			$sql = 'SELECT user_id, username, user_colour				FROM ' . USERS_TABLE . '				WHERE ' . $db->sql_in_set('user_id', $u);			$result = $db->sql_query($sql);			while ($row = $db->sql_fetchrow($result))			{				if ($check_type == 'to' || $author_id == $user->data['user_id'] || $row['user_id'] == $user->data['user_id'])				{					if ($plaintext)					{						$address[] = $row['username'];					}					else					{						$address['user'][$row['user_id']] = array('name' => $row['username'], 'colour' => $row['user_colour']);					}				}			}			$db->sql_freeresult($result);		}		if (sizeof($g))		{			if ($plaintext)			{				$sql = 'SELECT group_name, group_type					FROM ' . GROUPS_TABLE . '						WHERE ' . $db->sql_in_set('group_id', $g);				$result = $db->sql_query($sql);				while ($row = $db->sql_fetchrow($result))				{					if ($check_type == 'to' || $author_id == $user->data['user_id'] || $row['user_id'] == $user->data['user_id'])					{						$address[] = ($row['group_type'] == GROUP_SPECIAL) ? $user->lang['G_' . $row['group_name']] : $row['group_name'];					}				}				$db->sql_freeresult($result);			}			else			{				$sql = 'SELECT g.group_id, g.group_name, g.group_colour, g.group_type, ug.user_id					FROM ' . GROUPS_TABLE . ' g, ' . USER_GROUP_TABLE . ' ug						WHERE ' . $db->sql_in_set('g.group_id', $g) . '						AND g.group_id = ug.group_id						AND ug.user_pending = 0';				$result = $db->sql_query($sql);				while ($row = $db->sql_fetchrow($result))				{					if (!isset($address['group'][$row['group_id']]))					{						if ($check_type == 'to' || $author_id == $user->data['user_id'] || $row['user_id'] == $user->data['user_id'])						{							$row['group_name'] = ($row['group_type'] == GROUP_SPECIAL) ? $user->lang['G_' . $row['group_name']] : $row['group_name'];							$address['group'][$row['group_id']] = array('name' => $row['group_name'], 'colour' => $row['group_colour']);						}					}					if (isset($address['user'][$row['user_id']]))					{						$address['user'][$row['user_id']]['in_group'] = $row['group_id'];					}				}				$db->sql_freeresult($result);			}		}		if (sizeof($address) && !$plaintext)		{			$template->assign_var('S_' . strtoupper($check_type) . '_RECIPIENT', true);			foreach ($address as $type => $adr_ary)			{				foreach ($adr_ary as $id => $row)				{					$tpl_ary = array(						'IS_GROUP'	=> ($type == 'group') ? true : false,						'IS_USER'	=> ($type == 'user') ? true : false,						'UG_ID'		=> $id,						'NAME'		=> $row['name'],						'COLOUR'	=> ($row['colour']) ? '#' . $row['colour'] : '',						'TYPE'		=> $type,					);					if ($type == 'user')					{						$tpl_ary = array_merge($tpl_ary, array(							'U_VIEW'		=> get_username_string('profile', $id, $row['name'], $row['colour']),							'NAME_FULL'		=> get_username_string('full', $id, $row['name'], $row['colour']),						));					}					else					{						$tpl_ary = array_merge($tpl_ary, array(							'U_VIEW'		=> append_sid("{$phpbb_root_path}memberlist.$phpEx", 'mode=group&amp;g=' . $id),						));					}					$template->assign_block_vars($check_type . '_recipient', $tpl_ary);				}			}		}		$addresses[$check_type] = $address;	}	return $addresses;}/*** Get folder status*/function get_folder_status($folder_id, $folder){	global $db, $user, $config;	if (isset($folder[$folder_id]))	{		$folder = $folder[$folder_id];	}	else	{		return false;	}	$return = array(		'folder_name'	=> $folder['folder_name'],		'cur'			=> $folder['num_messages'],		'remaining'		=> ($user->data['message_limit']) ? $user->data['message_limit'] - $folder['num_messages'] : 0,		'max'			=> $user->data['message_limit'],		'percent'		=> ($user->data['message_limit']) ? (($user->data['message_limit'] > 0) ? round(($folder['num_messages'] / $user->data['message_limit']) * 100) : 100) : 0,	);	$return['message']	= sprintf($user->lang['FOLDER_STATUS_MSG'], $return['percent'], $return['cur'], $return['max']);	return $return;}//// COMPOSE MESSAGES///*** Submit PM*/function submit_pm($mode, $subject, &$data, $put_in_outbox = true){	global $db, $auth, $config, $phpEx, $template, $user, $phpbb_root_path;	// We do not handle erasing pms here	if ($mode == 'delete')	{		return false;	}	$current_time = time();	// Collect some basic information about which tables and which rows to update/insert	$sql_data = array();	$root_level = 0;	// Recipient Information	$recipients = $to = $bcc = array();	if ($mode != 'edit')	{		// Build Recipient List		// u|g => array($user_id => 'to'|'bcc')		$_types = array('u', 'g');		foreach ($_types as $ug_type)		{			if (isset($data['address_list'][$ug_type]) && sizeof($data['address_list'][$ug_type]))			{				foreach ($data['address_list'][$ug_type] as $id => $field)				{					$id = (int) $id;					// Do not rely on the address list being "valid"					if (!$id || ($ug_type == 'u' && $id == ANONYMOUS))					{						continue;					}					$field = ($field == 'to') ? 'to' : 'bcc';					if ($ug_type == 'u')					{						$recipients[$id] = $field;					}					${$field}[] = $ug_type . '_' . $id;				}			}		}		if (isset($data['address_list']['g']) && sizeof($data['address_list']['g']))		{			// We need to check the PM status of group members (do they want to receive PM's?)			// Only check if not a moderator or admin, since they are allowed to override this user setting			$sql_allow_pm = (!$auth->acl_gets('a_', 'm_') && !$auth->acl_getf_global('m_')) ? ' AND u.user_allow_pm = 1' : '';			$sql = 'SELECT u.user_type, ug.group_id, ug.user_id				FROM ' . USERS_TABLE . ' u, ' . USER_GROUP_TABLE . ' ug				WHERE ' . $db->sql_in_set('ug.group_id', array_keys($data['address_list']['g'])) . '					AND ug.user_pending = 0					AND u.user_id = ug.user_id					AND u.user_type IN (' . USER_NORMAL . ', ' . USER_FOUNDER . ')' .					$sql_allow_pm;			$result = $db->sql_query($sql);			while ($row = $db->sql_fetchrow($result))			{				// Additionally, do not include the sender if he is in the group he wants to send to. ;)				if ($row['user_id'] === $user->data['user_id'])				{					continue;				}				$field = ($data['address_list']['g'][$row['group_id']] == 'to') ? 'to' : 'bcc';				$recipients[$row['user_id']] = $field;			}			$db->sql_freeresult($result);		}		if (!sizeof($recipients))		{			trigger_error('NO_RECIPIENT');		}	}	// First of all make sure the subject are having the correct length.	$subject = truncate_string($subject);	$db->sql_transaction('begin');	$sql = '';	switch ($mode)	{		case 'reply':		case 'quote':			$root_level = ($data['reply_from_root_level']) ? $data['reply_from_root_level'] : $data['reply_from_msg_id'];			// Set message_replied switch for this user			$sql = 'UPDATE ' . PRIVMSGS_TO_TABLE . '				SET pm_replied = 1				WHERE user_id = ' . $data['from_user_id'] . '					AND msg_id = ' . $data['reply_from_msg_id'];		// no break		case 'forward':		case 'post':		case 'quotepost':			$sql_data = array(				'root_level'		=> $root_level,				'author_id'			=> $data['from_user_id'],				'icon_id'			=> $data['icon_id'],				'author_ip'			=> $data['from_user_ip'],				'message_time'		=> $current_time,				'enable_bbcode'		=> $data['enable_bbcode'],				'enable_smilies'	=> $data['enable_smilies'],				'enable_magic_url'	=> $data['enable_urls'],				'enable_sig'		=> $data['enable_sig'],				'message_subject'	=> $subject,				'message_text'		=> $data['message'],				'message_attachment'=> (!empty($data['attachment_data'])) ? 1 : 0,				'bbcode_bitfield'	=> $data['bbcode_bitfield'],				'bbcode_uid'		=> $data['bbcode_uid'],				'to_address'		=> implode(':', $to),				'bcc_address'		=> implode(':', $bcc),				'message_reported'	=> 0,			);		break;		case 'edit':			$sql_data = array(				'icon_id'			=> $data['icon_id'],				'message_edit_time'	=> $current_time,				'enable_bbcode'		=> $data['enable_bbcode'],				'enable_smilies'	=> $data['enable_smilies'],				'enable_magic_url'	=> $data['enable_urls'],				'enable_sig'		=> $data['enable_sig'],				'message_subject'	=> $subject,				'message_text'		=> $data['message'],				'message_attachment'=> (!empty($data['attachment_data'])) ? 1 : 0,				'bbcode_bitfield'	=> $data['bbcode_bitfield'],				'bbcode_uid'		=> $data['bbcode_uid']			);		break;	}	if (sizeof($sql_data))	{		$query = '';		if ($mode == 'post' || $mode == 'reply' || $mode == 'quote' || $mode == 'quotepost' || $mode == 'forward')		{			$db->sql_query('INSERT INTO ' . PRIVMSGS_TABLE . ' ' . $db->sql_build_array('INSERT', $sql_data));			$data['msg_id'] = $db->sql_nextid();		}		else if ($mode == 'edit')		{			$sql = 'UPDATE ' . PRIVMSGS_TABLE . '				SET message_edit_count = message_edit_count + 1, ' . $db->sql_build_array('UPDATE', $sql_data) . '				WHERE msg_id = ' . $data['msg_id'];			$db->sql_query($sql);		}	}	if ($mode != 'edit')	{		if ($sql)		{			$db->sql_query($sql);		}		unset($sql);		$sql_ary = array();		foreach ($recipients as $user_id => $type)		{			$sql_ary[] = array(				'msg_id'		=> (int) $data['msg_id'],				'user_id'		=> (int) $user_id,				'author_id'		=> (int) $data['from_user_id'],				'folder_id'		=> PRIVMSGS_NO_BOX,				'pm_new'		=> 1,				'pm_unread'		=> 1,				'pm_forwarded'	=> ($mode == 'forward') ? 1 : 0			);		}		$db->sql_multi_insert(PRIVMSGS_TO_TABLE, $sql_ary);		$sql = 'UPDATE ' . USERS_TABLE . '			SET user_new_privmsg = user_new_privmsg + 1, user_unread_privmsg = user_unread_privmsg + 1, user_last_privmsg = ' . time() . '			WHERE ' . $db->sql_in_set('user_id', array_keys($recipients));		$db->sql_query($sql);		// Put PM into outbox		if ($put_in_outbox)		{			$db->sql_query('INSERT INTO ' . PRIVMSGS_TO_TABLE . ' ' . $db->sql_build_array('INSERT', array(				'msg_id'		=> (int) $data['msg_id'],				'user_id'		=> (int) $data['from_user_id'],				'author_id'		=> (int) $data['from_user_id'],				'folder_id'		=> PRIVMSGS_OUTBOX,				'pm_new'		=> 0,				'pm_unread'		=> 0,				'pm_forwarded'	=> ($mode == 'forward') ? 1 : 0))			);		}	}	// Set user last post time	if ($mode == 'reply' || $mode == 'quote' || $mode == 'quotepost' || $mode == 'forward' || $mode == 'post')	{		$sql = 'UPDATE ' . USERS_TABLE . "			SET user_lastpost_time = $current_time			WHERE user_id = " . $data['from_user_id'];		$db->sql_query($sql);	}	// Submit Attachments	if (!empty($data['attachment_data']) && $data['msg_id'] && in_array($mode, array('post', 'reply', 'quote', 'quotepost', 'edit', 'forward')))	{		$space_taken = $files_added = 0;		$orphan_rows = array();		foreach ($data['attachment_data'] as $pos => $attach_row)		{			$orphan_rows[(int) $attach_row['attach_id']] = array();		}		if (sizeof($orphan_rows))		{			$sql = 'SELECT attach_id, filesize, physical_filename				FROM ' . ATTACHMENTS_TABLE . '				WHERE ' . $db->sql_in_set('attach_id', array_keys($orphan_rows)) . '					AND in_message = 1					AND is_orphan = 1					AND poster_id = ' . $user->data['user_id'];			$result = $db->sql_query($sql);			$orphan_rows = array();			while ($row = $db->sql_fetchrow($result))			{				$orphan_rows[$row['attach_id']] = $row;			}			$db->sql_freeresult($result);		}		foreach ($data['attachment_data'] as $pos => $attach_row)		{			if ($attach_row['is_orphan'] && !isset($orphan_rows[$attach_row['attach_id']]))			{				continue;			}			if (!$attach_row['is_orphan'])			{				// update entry in db if attachment already stored in db and filespace				$sql = 'UPDATE ' . ATTACHMENTS_TABLE . "					SET attach_comment = '" . $db->sql_escape($attach_row['attach_comment']) . "'					WHERE attach_id = " . (int) $attach_row['attach_id'] . '						AND is_orphan = 0';				$db->sql_query($sql);			}			else			{				// insert attachment into db				if (!@file_exists($phpbb_root_path . $config['upload_path'] . '/' . utf8_basename($orphan_rows[$attach_row['attach_id']]['physical_filename'])))				{					continue;				}				$space_taken += $orphan_rows[$attach_row['attach_id']]['filesize'];				$files_added++;				$attach_sql = array(					'post_msg_id'		=> $data['msg_id'],					'topic_id'			=> 0,					'is_orphan'			=> 0,					'poster_id'			=> $data['from_user_id'],					'attach_comment'	=> $attach_row['attach_comment'],				);				$sql = 'UPDATE ' . ATTACHMENTS_TABLE . ' SET ' . $db->sql_build_array('UPDATE', $attach_sql) . '					WHERE attach_id = ' . $attach_row['attach_id'] . '						AND is_orphan = 1						AND poster_id = ' . $user->data['user_id'];				$db->sql_query($sql);			}		}		if ($space_taken && $files_added)		{			set_config_count('upload_dir_size', $space_taken, true);			set_config_count('num_files', $files_added, true);		}	}	// Delete draft if post was loaded...	$draft_id = request_var('draft_loaded', 0);	if ($draft_id)	{		$sql = 'DELETE FROM ' . DRAFTS_TABLE . "			WHERE draft_id = $draft_id				AND user_id = " . $data['from_user_id'];		$db->sql_query($sql);	}	$db->sql_transaction('commit');	// Send Notifications	if ($mode != 'edit')	{		pm_notification($mode, $data['from_username'], $recipients, $subject, $data['message'], $data['msg_id']);	}	return $data['msg_id'];}/*** PM Notification*/function pm_notification($mode, $author, $recipients, $subject, $message, $msg_id){	global $db, $user, $config, $phpbb_root_path, $phpEx, $auth;	$subject = censor_text($subject);	unset($recipients[ANONYMOUS], $recipients[$user->data['user_id']]);	if (!sizeof($recipients))	{		return;	}	// Get banned User ID's	$sql = 'SELECT ban_userid		FROM ' . BANLIST_TABLE . '		WHERE ' . $db->sql_in_set('ban_userid', array_map('intval', array_keys($recipients))) . '			AND ban_exclude = 0';	$result = $db->sql_query($sql);	while ($row = $db->sql_fetchrow($result))	{		unset($recipients[$row['ban_userid']]);	}	$db->sql_freeresult($result);	if (!sizeof($recipients))	{		return;	}	$sql = 'SELECT user_id, username, user_email, user_lang, user_notify_pm, user_notify_type, user_jabber		FROM ' . USERS_TABLE . '		WHERE ' . $db->sql_in_set('user_id', array_map('intval', array_keys($recipients)));	$result = $db->sql_query($sql);	$msg_list_ary = array();	while ($row = $db->sql_fetchrow($result))	{		if ($row['user_notify_pm'] == 1 && trim($row['user_email']))		{			$msg_list_ary[] = array(				'method'	=> $row['user_notify_type'],				'email'		=> $row['user_email'],				'jabber'	=> $row['user_jabber'],				'name'		=> $row['username'],				'lang'		=> $row['user_lang']			);		}	}	$db->sql_freeresult($result);	if (!sizeof($msg_list_ary))	{		return;	}	include_once($phpbb_root_path . 'includes/functions_messenger.' . $phpEx);	$messenger = new messenger();	foreach ($msg_list_ary as $pos => $addr)	{		$messenger->template('privmsg_notify', $addr['lang']);		$messenger->to($addr['email'], $addr['name']);		$messenger->im($addr['jabber'], $addr['name']);		$messenger->assign_vars(array(			'SUBJECT'		=> htmlspecialchars_decode($subject),			'AUTHOR_NAME'	=> htmlspecialchars_decode($author),			'USERNAME'		=> htmlspecialchars_decode($addr['name']),			'U_INBOX'			=> generate_board_url() . "/ucp.$phpEx?i=pm&folder=inbox",			'U_VIEW_MESSAGE'	=> generate_board_url() . "/ucp.$phpEx?i=pm&mode=view&p=$msg_id",		));		$messenger->send($addr['method']);	}	unset($msg_list_ary);	$messenger->save_queue();	unset($messenger);}/*** Display Message History*/function message_history($msg_id, $user_id, $message_row, $folder, $in_post_mode = false){	global $db, $user, $config, $template, $phpbb_root_path, $phpEx, $auth, $bbcode;	// Select all receipts and the author from the pm we currently view, to only display their pm-history	$sql = 'SELECT author_id, user_id		FROM ' . PRIVMSGS_TO_TABLE . "		WHERE msg_id = $msg_id			AND folder_id <> " . PRIVMSGS_HOLD_BOX;	$result = $db->sql_query($sql);	$recipients = array();	while ($row = $db->sql_fetchrow($result))	{		$recipients[] = (int) $row['user_id'];		$recipients[] = (int) $row['author_id'];	}	$db->sql_freeresult($result);	$recipients = array_unique($recipients);	// Get History Messages (could be newer)	$sql = 'SELECT t.*, p.*, u.*		FROM ' . PRIVMSGS_TABLE . ' p, ' . PRIVMSGS_TO_TABLE . ' t, ' . USERS_TABLE . ' u		WHERE t.msg_id = p.msg_id			AND p.author_id = u.user_id			AND t.folder_id NOT IN (' . PRIVMSGS_NO_BOX . ', ' . PRIVMSGS_HOLD_BOX . ')			AND ' . $db->sql_in_set('t.author_id', $recipients, false, true) . "			AND t.user_id = $user_id";	// We no longer need those.	unset($recipients);	if (!$message_row['root_level'])	{		$sql .= " AND (p.root_level = $msg_id OR (p.root_level = 0 AND p.msg_id = $msg_id))";	}	else	{		$sql .= " AND (p.root_level = " . $message_row['root_level'] . ' OR p.msg_id = ' . $message_row['root_level'] . ')';	}	$sql .= ' ORDER BY p.message_time DESC';	$result = $db->sql_query($sql);	$row = $db->sql_fetchrow($result);	if (!$row)	{		$db->sql_freeresult($result);		return false;	}	$title = $row['message_subject'];	$rowset = array();	$bbcode_bitfield = '';	$folder_url = append_sid("{$phpbb_root_path}ucp.$phpEx", 'i=pm') . '&amp;folder=';	do	{		$folder_id = (int) $row['folder_id'];		$row['folder'][] = (isset($folder[$folder_id])) ? '<a href="' . $folder_url . $folder_id . '">' . $folder[$folder_id]['folder_name'] . '</a>' : $user->lang['UNKNOWN_FOLDER'];		if (isset($rowset[$row['msg_id']]))		{			$rowset[$row['msg_id']]['folder'][] = (isset($folder[$folder_id])) ? '<a href="' . $folder_url . $folder_id . '">' . $folder[$folder_id]['folder_name'] . '</a>' : $user->lang['UNKNOWN_FOLDER'];		}		else		{			$rowset[$row['msg_id']] = $row;			$bbcode_bitfield = $bbcode_bitfield | base64_decode($row['bbcode_bitfield']);		}	}	while ($row = $db->sql_fetchrow($result));	$db->sql_freeresult($result);	if (sizeof($rowset) == 1 && !$in_post_mode)	{		return false;	}	// Instantiate BBCode class	if ((empty($bbcode) || $bbcode === false) && $bbcode_bitfield !== '')	{		if (!class_exists('bbcode'))		{			include($phpbb_root_path . 'includes/bbcode.' . $phpEx);		}		$bbcode = new bbcode(base64_encode($bbcode_bitfield));	}	$title = censor_text($title);	$url = append_sid("{$phpbb_root_path}ucp.$phpEx", 'i=pm');	$next_history_pm = $previous_history_pm = $prev_id = 0;	// Re-order rowset to be able to get the next/prev message rows...	$rowset = array_values($rowset);	for ($i = 0, $size = sizeof($rowset); $i < $size; $i++)	{		$row = &$rowset[$i];		$id = (int) $row['msg_id'];		$author_id	= $row['author_id'];		$folder_id	= (int) $row['folder_id'];		$subject	= $row['message_subject'];		$message	= $row['message_text'];		$message = censor_text($message);		$decoded_message = false;		if ($in_post_mode && $auth->acl_get('u_sendpm') && $author_id != ANONYMOUS)		{			$decoded_message = $message;			decode_message($decoded_message, $row['bbcode_uid']);			$decoded_message = bbcode_nl2br($decoded_message);		}		if ($row['bbcode_bitfield'])		{			$bbcode->bbcode_second_pass($message, $row['bbcode_uid'], $row['bbcode_bitfield']);		}		$message = bbcode_nl2br($message);		$message = smiley_text($message, !$row['enable_smilies']);		$subject = censor_text($subject);		if ($id == $msg_id)		{			$next_history_pm = (isset($rowset[$i + 1])) ? (int) $rowset[$i + 1]['msg_id'] : 0;			$previous_history_pm = $prev_id;		}		$template->assign_block_vars('history_row', array(			'MESSAGE_AUTHOR_QUOTE'		=> (($decoded_message) ? addslashes(get_username_string('username', $author_id, $row['username'], $row['user_colour'], $row['username'])) : ''),			'MESSAGE_AUTHOR_FULL'		=> get_username_string('full', $author_id, $row['username'], $row['user_colour'], $row['username']),			'MESSAGE_AUTHOR_COLOUR'		=> get_username_string('colour', $author_id, $row['username'], $row['user_colour'], $row['username']),			'MESSAGE_AUTHOR'			=> get_username_string('username', $author_id, $row['username'], $row['user_colour'], $row['username']),			'U_MESSAGE_AUTHOR'			=> get_username_string('profile', $author_id, $row['username'], $row['user_colour'], $row['username']),			'SUBJECT'			=> $subject,			'SENT_DATE'			=> $user->format_date($row['message_time']),			'MESSAGE'			=> $message,			'FOLDER'			=> implode(', ', $row['folder']),			'DECODED_MESSAGE'	=> $decoded_message,			'S_CURRENT_MSG'		=> ($row['msg_id'] == $msg_id),			'S_AUTHOR_DELETED'	=> ($author_id == ANONYMOUS) ? true : false,			'S_IN_POST_MODE'	=> $in_post_mode,			'MSG_ID'			=> $row['msg_id'],			'U_VIEW_MESSAGE'	=> "$url&amp;f=$folder_id&amp;p=" . $row['msg_id'],			'U_QUOTE'			=> (!$in_post_mode && $auth->acl_get('u_sendpm') && $author_id != ANONYMOUS) ? "$url&amp;mode=compose&amp;action=quote&amp;f=" . $folder_id . "&amp;p=" . $row['msg_id'] : '',			'U_POST_REPLY_PM'	=> ($author_id != $user->data['user_id'] && $author_id != ANONYMOUS && $auth->acl_get('u_sendpm')) ? "$url&amp;mode=compose&amp;action=reply&amp;f=$folder_id&amp;p=" . $row['msg_id'] : '')		);		unset($rowset[$i]);		$prev_id = $id;	}	$template->assign_vars(array(		'QUOTE_IMG'			=> $user->img('icon_post_quote', $user->lang['REPLY_WITH_QUOTE']),		'HISTORY_TITLE'		=> $title,		'U_VIEW_NEXT_HISTORY'		=> ($next_history_pm) ? "$url&amp;p=" . $next_history_pm : '',		'U_VIEW_PREVIOUS_HISTORY'	=> ($previous_history_pm) ? "$url&amp;p=" . $previous_history_pm : '',	));	return true;}/*** Set correct users max messages in PM folder.* If several group memberships define different amount of messages, the highest will be chosen.*/function set_user_message_limit(){	global $user, $db, $config;	// Get maximum about from user memberships - if it is 0, there is no limit set and we use the maximum value within the config.	$sql = 'SELECT MAX(g.group_message_limit) as max_message_limit		FROM ' . GROUPS_TABLE . ' g, ' . USER_GROUP_TABLE . ' ug		WHERE ug.user_id = ' . $user->data['user_id'] . '			AND ug.user_pending = 0			AND ug.group_id = g.group_id';	$result = $db->sql_query($sql);	$message_limit = (int) $db->sql_fetchfield('max_message_limit');	$db->sql_freeresult($result);	$user->data['message_limit'] = (!$message_limit) ? $config['pm_max_msgs'] : $message_limit;}/*** Generates an array of coloured recipient names from a list of PMs - (groups & users)** @param	array	$pm_by_id	An array of rows from PRIVMSGS_TABLE, keys are the msg_ids.** @return	array				2D Array: array(msg_id => array('username or group string', ...), ...)*								Usernames are generated with {@link get_username_string get_username_string}*								Groups are coloured and have a link to the membership page*/function get_recipient_strings($pm_by_id){	global $db, $phpbb_root_path, $phpEx, $user;	$address_list = $recipient_list = $address = array();	$_types = array('u', 'g');	foreach ($pm_by_id as $message_id => $row)	{		$address[$message_id] = rebuild_header(array('to' => $row['to_address'], 'bcc' => $row['bcc_address']));		foreach ($_types as $ug_type)		{			if (isset($address[$message_id][$ug_type]) && sizeof($address[$message_id][$ug_type]))			{				foreach ($address[$message_id][$ug_type] as $ug_id => $in_to)				{					$recipient_list[$ug_type][$ug_id] = array('name' => $user->lang['NA'], 'colour' => '');				}			}		}	}	foreach ($_types as $ug_type)	{		if (!empty($recipient_list[$ug_type]))		{			if ($ug_type == 'u')			{				$sql = 'SELECT user_id as id, username as name, user_colour as colour					FROM ' . USERS_TABLE . '					WHERE ';			}			else			{				$sql = 'SELECT group_id as id, group_name as name, group_colour as colour, group_type					FROM ' . GROUPS_TABLE . '					WHERE ';			}			$sql .= $db->sql_in_set(($ug_type == 'u') ? 'user_id' : 'group_id', array_map('intval', array_keys($recipient_list[$ug_type])));			$result = $db->sql_query($sql);			while ($row = $db->sql_fetchrow($result))			{				if ($ug_type == 'g')				{					$row['name'] = ($row['group_type'] == GROUP_SPECIAL) ? $user->lang['G_' . $row['name']] : $row['name'];				}				$recipient_list[$ug_type][$row['id']] = array('name' => $row['name'], 'colour' => $row['colour']);			}			$db->sql_freeresult($result);		}	}	foreach ($address as $message_id => $adr_ary)	{		foreach ($adr_ary as $type => $id_ary)		{			foreach ($id_ary as $ug_id => $_id)			{				if ($type == 'u')				{					$address_list[$message_id][] = get_username_string('full', $ug_id, $recipient_list[$type][$ug_id]['name'], $recipient_list[$type][$ug_id]['colour']);				}				else				{					$user_colour = ($recipient_list[$type][$ug_id]['colour']) ? ' style="font-weight: bold; color:#' . $recipient_list[$type][$ug_id]['colour'] . '"' : '';					$link = '<a href="' . append_sid("{$phpbb_root_path}memberlist.$phpEx", 'mode=group&amp;g=' . $ug_id) . '"' . $user_colour . '>';					$address_list[$message_id][] = $link . $recipient_list[$type][$ug_id]['name'] . (($link) ? '</a>' : '');				}			}		}	}	return $address_list;}?>
<?php/**** @package phpBB3* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @ignore*/if (!defined('IN_PHPBB')){	exit;}/*** Custom Profile Fields* @package phpBB3*/class custom_profile{	var $profile_types = array(FIELD_INT => 'int', FIELD_STRING => 'string', FIELD_TEXT => 'text', FIELD_BOOL => 'bool', FIELD_DROPDOWN => 'dropdown', FIELD_DATE => 'date');	var $profile_cache = array();	var $options_lang = array();	/**	* Assign editable fields to template, mode can be profile (for profile change) or register (for registration)	* Called by ucp_profile and ucp_register	* @access public	*/	function generate_profile_fields($mode, $lang_id)	{		global $db, $template, $auth;		$sql_where = '';		switch ($mode)		{			case 'register':				// If the field is required we show it on the registration page				$sql_where .= ' AND f.field_show_on_reg = 1';			break;			case 'profile':				// Show hidden fields to moderators/admins				if (!$auth->acl_gets('a_', 'm_') && !$auth->acl_getf_global('m_'))				{					$sql_where .= ' AND f.field_show_profile = 1';				}			break;			default:				trigger_error('Wrong profile mode specified', E_USER_ERROR);			break;		}		$sql = 'SELECT l.*, f.*			FROM ' . PROFILE_LANG_TABLE . ' l, ' . PROFILE_FIELDS_TABLE . " f			WHERE f.field_active = 1				$sql_where				AND l.lang_id = $lang_id				AND l.field_id = f.field_id			ORDER BY f.field_order";		$result = $db->sql_query($sql);		while ($row = $db->sql_fetchrow($result))		{			// Return templated field			$tpl_snippet = $this->process_field_row('change', $row);			// Some types are multivalue, we can't give them a field_id as we would not know which to pick			$type = (int) $row['field_type'];			$template->assign_block_vars('profile_fields', array(				'LANG_NAME'		=> $row['lang_name'],				'LANG_EXPLAIN'	=> $row['lang_explain'],				'FIELD'			=> $tpl_snippet,				'FIELD_ID'		=> ($type == FIELD_DATE || ($type == FIELD_BOOL && $row['field_length'] == '1')) ? '' : 'pf_' . $row['field_ident'],				'S_REQUIRED'	=> ($row['field_required']) ? true : false)			);		}		$db->sql_freeresult($result);	}	/**	* Validate entered profile field data	* @access public	*/	function validate_profile_field($field_type, &$field_value, $field_data)	{		switch ($field_type)		{			case FIELD_DATE:				$field_validate = explode('-', $field_value);				$day = (isset($field_validate[0])) ? (int) $field_validate[0] : 0;				$month = (isset($field_validate[1])) ? (int) $field_validate[1] : 0;				$year = (isset($field_validate[2])) ? (int) $field_validate[2] : 0;				if ((!$day || !$month || !$year) && !$field_data['field_required'])				{					return false;				}				if ((!$day || !$month || !$year) && $field_data['field_required'])				{					return 'FIELD_REQUIRED';				}				if ($day < 0 || $day > 31 || $month < 0 || $month > 12 || ($year < 1901 && $year > 0) || $year > gmdate('Y', time()) + 50)				{					return 'FIELD_INVALID_DATE';				}				if (checkdate($month, $day, $year) === false)				{					return 'FIELD_INVALID_DATE';				}			break;			case FIELD_BOOL:				$field_value = (bool) $field_value;							if (!$field_value && $field_data['field_required'])				{					return 'FIELD_REQUIRED';				}			break;			case FIELD_INT:				if (trim($field_value) === '' && !$field_data['field_required'])				{					return false;				}								$field_value = (int) $field_value;				if ($field_value < $field_data['field_minlen'])				{					return 'FIELD_TOO_SMALL';				}				else if ($field_value > $field_data['field_maxlen'])				{					return 'FIELD_TOO_LARGE';				}			break;			case FIELD_DROPDOWN:				$field_value = (int) $field_value;				// retrieve option lang data if necessary				if (!isset($this->options_lang[$field_data['field_id']]) || !isset($this->options_lang[$field_data['field_id']][$field_data['lang_id']]) || !sizeof($this->options_lang[$file_data['field_id']][$field_data['lang_id']]))				{					$this->get_option_lang($field_data['field_id'], $field_data['lang_id'], FIELD_DROPDOWN, false);				}				if (!isset($this->options_lang[$field_data['field_id']][$field_data['lang_id']][$field_value]))				{					return 'FIELD_INVALID_VALUE';				}				if ($field_value == $field_data['field_novalue'] && $field_data['field_required'])				{					return 'FIELD_REQUIRED';				}			break;			case FIELD_STRING:			case FIELD_TEXT:				if (trim($field_value) === '' && !$field_data['field_required'])				{					return false;				}				else if (trim($field_value) === '' && $field_data['field_required'])				{					return 'FIELD_REQUIRED';				}				if ($field_data['field_minlen'] && utf8_strlen($field_value) < $field_data['field_minlen'])				{					return 'FIELD_TOO_SHORT';				}				else if ($field_data['field_maxlen'] && utf8_strlen($field_value) > $field_data['field_maxlen'])				{					return 'FIELD_TOO_LONG';				}				if (!empty($field_data['field_validation']) && $field_data['field_validation'] != '.*')				{					$field_validate = ($field_type == FIELD_STRING) ? $field_value : bbcode_nl2br($field_value);					if (!preg_match('#^' . str_replace('\\\\', '\\', $field_data['field_validation']) . '$#i', $field_validate))					{						return 'FIELD_INVALID_CHARS';					}				}			break;		}		return false;	}	/**	* Build profile cache, used for display	* @access private	*/	function build_cache()	{		global $db, $user, $auth;		$this->profile_cache = array();		// Display hidden/no_view fields for admin/moderator		$sql = 'SELECT l.*, f.*			FROM ' . PROFILE_LANG_TABLE . ' l, ' . PROFILE_FIELDS_TABLE . ' f			WHERE l.lang_id = ' . $user->get_iso_lang_id() . '				AND f.field_active = 1 ' .				((!$auth->acl_gets('a_', 'm_') && !$auth->acl_getf_global('m_')) ? '	AND f.field_hide = 0 ' : '') . '				AND f.field_no_view = 0				AND l.field_id = f.field_id			ORDER BY f.field_order';		$result = $db->sql_query($sql);		while ($row = $db->sql_fetchrow($result))		{			$this->profile_cache[$row['field_ident']] = $row;		}		$db->sql_freeresult($result);	}	/**	* Get language entries for options and store them here for later use	*/	function get_option_lang($field_id, $lang_id, $field_type, $preview)	{		global $db;		if ($preview)		{			$lang_options = (!is_array($this->vars['lang_options'])) ? explode("\n", $this->vars['lang_options']) : $this->vars['lang_options'];			foreach ($lang_options as $num => $var)			{				$this->options_lang[$field_id][$lang_id][($num + 1)] = $var;			}		}		else		{			$sql = 'SELECT option_id, lang_value				FROM ' . PROFILE_FIELDS_LANG_TABLE . "					WHERE field_id = $field_id					AND lang_id = $lang_id					AND field_type = $field_type				ORDER BY option_id";			$result = $db->sql_query($sql);			while ($row = $db->sql_fetchrow($result))			{				$this->options_lang[$field_id][$lang_id][($row['option_id'] + 1)] = $row['lang_value'];			}			$db->sql_freeresult($result);		}	}	/**	* Submit profile field for validation	* @access public	*/	function submit_cp_field($mode, $lang_id, &$cp_data, &$cp_error)	{		global $auth, $db, $user;		$sql_where = '';		switch ($mode)		{			case 'register':				// If the field is required we show it on the registration page				$sql_where .= ' AND f.field_show_on_reg = 1';			break;			case 'profile':				// Show hidden fields to moderators/admins				if (!$auth->acl_gets('a_', 'm_') && !$auth->acl_getf_global('m_'))				{					$sql_where .= ' AND f.field_show_profile = 1';				}			break;			default:				trigger_error('Wrong profile mode specified', E_USER_ERROR);			break;		}		$sql = 'SELECT l.*, f.*			FROM ' . PROFILE_LANG_TABLE . ' l, ' . PROFILE_FIELDS_TABLE . " f			WHERE l.lang_id = $lang_id				AND f.field_active = 1				$sql_where				AND l.field_id = f.field_id			ORDER BY f.field_order";		$result = $db->sql_query($sql);		while ($row = $db->sql_fetchrow($result))		{			$cp_data['pf_' . $row['field_ident']] = $this->get_profile_field($row);			$check_value = $cp_data['pf_' . $row['field_ident']];			if (($cp_result = $this->validate_profile_field($row['field_type'], $check_value, $row)) !== false)			{				// If not and only showing common error messages, use this one				$error = '';				switch ($cp_result)				{					case 'FIELD_INVALID_DATE':					case 'FIELD_INVALID_VALUE':					case 'FIELD_REQUIRED':						$error = sprintf($user->lang[$cp_result], $row['lang_name']);					break;					case 'FIELD_TOO_SHORT':					case 'FIELD_TOO_SMALL':						$error = sprintf($user->lang[$cp_result], $row['lang_name'], $row['field_minlen']);					break;					case 'FIELD_TOO_LONG':					case 'FIELD_TOO_LARGE':						$error = sprintf($user->lang[$cp_result], $row['lang_name'], $row['field_maxlen']);					break;					case 'FIELD_INVALID_CHARS':						switch ($row['field_validation'])						{							case '[0-9]+':								$error = sprintf($user->lang[$cp_result . '_NUMBERS_ONLY'], $row['lang_name']);							break;							case '[\w]+':								$error = sprintf($user->lang[$cp_result . '_ALPHA_ONLY'], $row['lang_name']);							break;							case '[\w_\+\. \-\[\]]+':								$error = sprintf($user->lang[$cp_result . '_SPACERS_ONLY'], $row['lang_name']);							break;						}					break;				}				if ($error != '')				{					$cp_error[] = $error;				}			}		}		$db->sql_freeresult($result);	}	/**	* Update profile field data directly	*/	function update_profile_field_data($user_id, &$cp_data)	{		global $db;		if (!sizeof($cp_data))		{			return;		}		switch ($db->sql_layer)		{			case 'oracle':			case 'firebird':			case 'postgres':				$right_delim = $left_delim = '"';			break;			case 'sqlite':			case 'mssql':			case 'mssql_odbc':			case 'mssqlnative':				$right_delim = ']';				$left_delim = '[';			break;			case 'mysql':			case 'mysql4':			case 'mysqli':				$right_delim = $left_delim = '`';			break;		}		// use new array for the UPDATE; changes in the key do not affect the original array		$cp_data_sql = array();		foreach ($cp_data as $key => $value)		{			// Firebird is case sensitive with delimiter			$cp_data_sql[$left_delim . (($db->sql_layer == 'firebird' || $db->sql_layer == 'oracle') ? strtoupper($key) : $key) . $right_delim] = $value;		}		$sql = 'UPDATE ' . PROFILE_FIELDS_DATA_TABLE . '			SET ' . $db->sql_build_array('UPDATE', $cp_data_sql) . "			WHERE user_id = $user_id";		$db->sql_query($sql);		if (!$db->sql_affectedrows())		{			$cp_data_sql['user_id'] = (int) $user_id;			$db->sql_return_on_error(true);			$sql = 'INSERT INTO ' . PROFILE_FIELDS_DATA_TABLE . ' ' . $db->sql_build_array('INSERT', $cp_data_sql);			$db->sql_query($sql);			$db->sql_return_on_error(false);		}	}	/**	* Assign fields to template, used for viewprofile, viewtopic and memberlist (if load setting is enabled)	* This is directly connected to the user -> mode == grab is to grab the user specific fields, mode == show is for assigning the row to the template	* @access public	*/	function generate_profile_fields_template($mode, $user_id = 0, $profile_row = false)	{		global $db;		if ($mode == 'grab')		{			if (!is_array($user_id))			{				$user_id = array($user_id);			}			if (!sizeof($this->profile_cache))			{				$this->build_cache();			}			if (!sizeof($user_id))			{				return array();			}			$sql = 'SELECT *				FROM ' . PROFILE_FIELDS_DATA_TABLE . '				WHERE ' . $db->sql_in_set('user_id', array_map('intval', $user_id));			$result = $db->sql_query($sql);			$field_data = array();			while ($row = $db->sql_fetchrow($result))			{				$field_data[$row['user_id']] = $row;			}			$db->sql_freeresult($result);			$user_fields = array();			// Go through the fields in correct order			foreach (array_keys($this->profile_cache) as $used_ident)			{				foreach ($field_data as $user_id => $row)				{					$user_fields[$user_id][$used_ident]['value'] = $row['pf_' . $used_ident];					$user_fields[$user_id][$used_ident]['data'] = $this->profile_cache[$used_ident];				}			}			return $user_fields;		}		else if ($mode == 'show')		{			// $profile_row == $user_fields[$row['user_id']];			$tpl_fields = array();			$tpl_fields['row'] = $tpl_fields['blockrow'] = array();			foreach ($profile_row as $ident => $ident_ary)			{				$value = $this->get_profile_value($ident_ary);				if ($value === NULL)				{					continue;				}				$tpl_fields['row'] += array(					'PROFILE_' . strtoupper($ident) . '_VALUE'	=> $value,					'PROFILE_' . strtoupper($ident) . '_TYPE'	=> $ident_ary['data']['field_type'],					'PROFILE_' . strtoupper($ident) . '_NAME'	=> $ident_ary['data']['lang_name'],					'PROFILE_' . strtoupper($ident) . '_EXPLAIN'=> $ident_ary['data']['lang_explain'],					'S_PROFILE_' . strtoupper($ident)			=> true				);				$tpl_fields['blockrow'][] = array(					'PROFILE_FIELD_VALUE'	=> $value,					'PROFILE_FIELD_TYPE'	=> $ident_ary['data']['field_type'],					'PROFILE_FIELD_NAME'	=> $ident_ary['data']['lang_name'],					'PROFILE_FIELD_EXPLAIN'	=> $ident_ary['data']['lang_explain'],					'S_PROFILE_' . strtoupper($ident)		=> true				);			}			return $tpl_fields;		}		else		{			trigger_error('Wrong mode for custom profile', E_USER_ERROR);		}	}	/**	* Get Profile Value for display	*/	function get_profile_value($ident_ary)	{		$value = $ident_ary['value'];		$field_type = $ident_ary['data']['field_type'];		switch ($this->profile_types[$field_type])		{			case 'int':				if ($value === '')				{					return NULL;				}				return (int) $value;			break;			case 'string':			case 'text':				if (!$value)				{					return NULL;				}				$value = make_clickable($value);				$value = censor_text($value);				$value = bbcode_nl2br($value);				return $value;			break;			// case 'datetime':			case 'date':				$date = explode('-', $value);				$day = (isset($date[0])) ? (int) $date[0] : 0;				$month = (isset($date[1])) ? (int) $date[1] : 0;				$year = (isset($date[2])) ? (int) $date[2] : 0;				if (!$day && !$month && !$year)				{					return NULL;				}				else if ($day && $month && $year)				{					global $user;					// Date should display as the same date for every user regardless of timezone, so remove offset					// to compensate for the offset added by user::format_date()					return $user->format_date(gmmktime(0, 0, 0, $month, $day, $year) - ($user->timezone + $user->dst), $user->lang['DATE_FORMAT'], true);				}				return $value;			break;			case 'dropdown':				$field_id = $ident_ary['data']['field_id'];				$lang_id = $ident_ary['data']['lang_id'];				if (!isset($this->options_lang[$field_id][$lang_id]))				{					$this->get_option_lang($field_id, $lang_id, FIELD_DROPDOWN, false);				}				if ($value == $ident_ary['data']['field_novalue'])				{					return NULL;				}				$value = (int) $value;				// User not having a value assigned				if (!isset($this->options_lang[$field_id][$lang_id][$value]))				{					return NULL;				}				return $this->options_lang[$field_id][$lang_id][$value];			break;			case 'bool':				$field_id = $ident_ary['data']['field_id'];				$lang_id = $ident_ary['data']['lang_id'];				if (!isset($this->options_lang[$field_id][$lang_id]))				{					$this->get_option_lang($field_id, $lang_id, FIELD_BOOL, false);				}				if ($ident_ary['data']['field_length'] == 1)				{					return (isset($this->options_lang[$field_id][$lang_id][(int) $value])) ? $this->options_lang[$field_id][$lang_id][(int) $value] : NULL;				}				else if (!$value)				{					return NULL;				}				else				{					return $this->options_lang[$field_id][$lang_id][(int) ($value) + 1];				}			break;			default:				trigger_error('Unknown profile type', E_USER_ERROR);			break;		}	}	/**	* Get field value for registration/profile	* @access private	*/	function get_var($field_validation, &$profile_row, $default_value, $preview)	{		global $user;		$profile_row['field_ident'] = (isset($profile_row['var_name'])) ? $profile_row['var_name'] : 'pf_' . $profile_row['field_ident'];		$user_ident = $profile_row['field_ident'];		// checkbox - only testing for isset		if ($profile_row['field_type'] == FIELD_BOOL && $profile_row['field_length'] == 2)		{			$value = (isset($_REQUEST[$profile_row['field_ident']])) ? true : ((!isset($user->profile_fields[$user_ident]) || $preview) ? $default_value : $user->profile_fields[$user_ident]);		}		else if ($profile_row['field_type'] == FIELD_INT)		{			if (isset($_REQUEST[$profile_row['field_ident']]))			{				$value = ($_REQUEST[$profile_row['field_ident']] === '') ? NULL : request_var($profile_row['field_ident'], $default_value);			}			else			{				if (!$preview && array_key_exists($user_ident, $user->profile_fields) && is_null($user->profile_fields[$user_ident]))				{					$value = NULL;				}				else if (!isset($user->profile_fields[$user_ident]) || $preview)				{					$value = $default_value;				}				else				{					$value = $user->profile_fields[$user_ident];				}			}			return (is_null($value) || $value === '') ? '' : (int) $value;		}		else		{			$value = (isset($_REQUEST[$profile_row['field_ident']])) ? request_var($profile_row['field_ident'], $default_value, true) : ((!isset($user->profile_fields[$user_ident]) || $preview) ? $default_value : $user->profile_fields[$user_ident]);			if (gettype($value) == 'string')			{				$value = utf8_normalize_nfc($value);			}		}		switch ($field_validation)		{			case 'int':				return (int) $value;			break;		}		return $value;	}	/**	* Process int-type	* @access private	*/	function generate_int($profile_row, $preview = false)	{		global $template;		$profile_row['field_value'] = $this->get_var('int', $profile_row, $profile_row['field_default_value'], $preview);		$template->assign_block_vars($this->profile_types[$profile_row['field_type']], array_change_key_case($profile_row, CASE_UPPER));	}	/**	* Process date-type	* @access private	*/	function generate_date($profile_row, $preview = false)	{		global $user, $template;		$profile_row['field_ident'] = (isset($profile_row['var_name'])) ? $profile_row['var_name'] : 'pf_' . $profile_row['field_ident'];		$user_ident = $profile_row['field_ident'];		$now = getdate();		if (!isset($_REQUEST[$profile_row['field_ident'] . '_day']))		{			if ($profile_row['field_default_value'] == 'now')			{				$profile_row['field_default_value'] = sprintf('%2d-%2d-%4d', $now['mday'], $now['mon'], $now['year']);			}			list($day, $month, $year) = explode('-', ((!isset($user->profile_fields[$user_ident]) || $preview) ? $profile_row['field_default_value'] : $user->profile_fields[$user_ident]));		}		else		{			if ($preview && $profile_row['field_default_value'] == 'now')			{				$profile_row['field_default_value'] = sprintf('%2d-%2d-%4d', $now['mday'], $now['mon'], $now['year']);				list($day, $month, $year) = explode('-', ((!isset($user->profile_fields[$user_ident]) || $preview) ? $profile_row['field_default_value'] : $user->profile_fields[$user_ident]));			}			else			{				$day = request_var($profile_row['field_ident'] . '_day', 0);				$month = request_var($profile_row['field_ident'] . '_month', 0);				$year = request_var($profile_row['field_ident'] . '_year', 0);			}		}		$profile_row['s_day_options'] = '<option value="0"' . ((!$day) ? ' selected="selected"' : '') . '>--</option>';		for ($i = 1; $i < 32; $i++)		{			$profile_row['s_day_options'] .= '<option value="' . $i . '"' . (($i == $day) ? ' selected="selected"' : '') . ">$i</option>";		}		$profile_row['s_month_options'] = '<option value="0"' . ((!$month) ? ' selected="selected"' : '') . '>--</option>';		for ($i = 1; $i < 13; $i++)		{			$profile_row['s_month_options'] .= '<option value="' . $i . '"' . (($i == $month) ? ' selected="selected"' : '') . ">$i</option>";		}		$profile_row['s_year_options'] = '<option value="0"' . ((!$year) ? ' selected="selected"' : '') . '>--</option>';		for ($i = $now['year'] - 100; $i <= $now['year'] + 100; $i++)		{			$profile_row['s_year_options'] .= '<option value="' . $i . '"' . (($i == $year) ? ' selected="selected"' : '') . ">$i</option>";		}		unset($now);		$profile_row['field_value'] = 0;		$template->assign_block_vars($this->profile_types[$profile_row['field_type']], array_change_key_case($profile_row, CASE_UPPER));	}	/**	* Process bool-type	* @access private	*/	function generate_bool($profile_row, $preview = false)	{		global $template;		$value = $this->get_var('int', $profile_row, $profile_row['field_default_value'], $preview);		$profile_row['field_value'] = $value;		$template->assign_block_vars($this->profile_types[$profile_row['field_type']], array_change_key_case($profile_row, CASE_UPPER));		if ($profile_row['field_length'] == 1)		{			if (!isset($this->options_lang[$profile_row['field_id']][$profile_row['lang_id']]) || !sizeof($this->options_lang[$profile_row['field_id']][$profile_row['lang_id']]))			{				$this->get_option_lang($profile_row['field_id'], $profile_row['lang_id'], FIELD_BOOL, $preview);			}			foreach ($this->options_lang[$profile_row['field_id']][$profile_row['lang_id']] as $option_id => $option_value)			{				$template->assign_block_vars('bool.options', array(					'OPTION_ID'	=> $option_id,					'CHECKED'	=> ($value == $option_id) ? ' checked="checked"' : '',					'VALUE'		=> $option_value)				);			}		}	}	/**	* Process string-type	* @access private	*/	function generate_string($profile_row, $preview = false)	{		global $template;		$profile_row['field_value'] = $this->get_var('string', $profile_row, $profile_row['lang_default_value'], $preview);		$template->assign_block_vars($this->profile_types[$profile_row['field_type']], array_change_key_case($profile_row, CASE_UPPER));	}	/**	* Process text-type	* @access private	*/	function generate_text($profile_row, $preview = false)	{		global $template;		global $user, $phpEx, $phpbb_root_path;		$field_length = explode('|', $profile_row['field_length']);		$profile_row['field_rows'] = $field_length[0];		$profile_row['field_cols'] = $field_length[1];		$profile_row['field_value'] = $this->get_var('string', $profile_row, $profile_row['lang_default_value'], $preview);		$template->assign_block_vars($this->profile_types[$profile_row['field_type']], array_change_key_case($profile_row, CASE_UPPER));	}	/**	* Process dropdown-type	* @access private	*/	function generate_dropdown($profile_row, $preview = false)	{		global $user, $template;		$value = $this->get_var('int', $profile_row, $profile_row['field_default_value'], $preview);		if (!isset($this->options_lang[$profile_row['field_id']]) || !isset($this->options_lang[$profile_row['field_id']][$profile_row['lang_id']]) || !sizeof($this->options_lang[$profile_row['field_id']][$profile_row['lang_id']]))		{			$this->get_option_lang($profile_row['field_id'], $profile_row['lang_id'], FIELD_DROPDOWN, $preview);		}		$profile_row['field_value'] = $value;		$template->assign_block_vars($this->profile_types[$profile_row['field_type']], array_change_key_case($profile_row, CASE_UPPER));		foreach ($this->options_lang[$profile_row['field_id']][$profile_row['lang_id']] as $option_id => $option_value)		{			$template->assign_block_vars('dropdown.options', array(				'OPTION_ID'	=> $option_id,				'SELECTED'	=> ($value == $option_id) ? ' selected="selected"' : '',				'VALUE'		=> $option_value)			);		}	}	/**	* Return Templated value/field. Possible values for $mode are:	* change == user is able to set/enter profile values; preview == just show the value	* @access private	*/	function process_field_row($mode, $profile_row)	{		global $template;		$preview = ($mode == 'preview') ? true : false;		// set template filename		$template->set_filenames(array(			'cp_body'		=> 'custom_profile_fields.html')		);		// empty previously filled blockvars		foreach ($this->profile_types as $field_case => $field_type)		{			$template->destroy_block_vars($field_type);		}		// Assign template variables		$type_func = 'generate_' . $this->profile_types[$profile_row['field_type']];		$this->$type_func($profile_row, $preview);		// Return templated data		return $template->assign_display('cp_body');	}	/**	* Build Array for user insertion into custom profile fields table	*/	function build_insert_sql_array($cp_data)	{		global $db, $user, $auth;		$sql_not_in = array();		foreach ($cp_data as $key => $null)		{			$sql_not_in[] = (strncmp($key, 'pf_', 3) === 0) ? substr($key, 3) : $key;		}		$sql = 'SELECT f.field_type, f.field_ident, f.field_default_value, l.lang_default_value			FROM ' . PROFILE_LANG_TABLE . ' l, ' . PROFILE_FIELDS_TABLE . ' f			WHERE l.lang_id = ' . $user->get_iso_lang_id() . '				' . ((sizeof($sql_not_in)) ? ' AND ' . $db->sql_in_set('f.field_ident', $sql_not_in, true) : '') . '				AND l.field_id = f.field_id';		$result = $db->sql_query($sql);		while ($row = $db->sql_fetchrow($result))		{			if ($row['field_default_value'] == 'now' && $row['field_type'] == FIELD_DATE)			{				$now = getdate();				$row['field_default_value'] = sprintf('%2d-%2d-%4d', $now['mday'], $now['mon'], $now['year']);			}			else if ($row['field_default_value'] === '' && $row['field_type'] == FIELD_INT)			{				// We cannot insert an empty string into an integer column.				$row['field_default_value'] = NULL;			}			$cp_data['pf_' . $row['field_ident']] = (in_array($row['field_type'], array(FIELD_TEXT, FIELD_STRING))) ? $row['lang_default_value'] : $row['field_default_value'];		}		$db->sql_freeresult($result);		return $cp_data;	}	/**	* Get profile field value on submit	* @access private	*/	function get_profile_field($profile_row)	{		global $phpbb_root_path, $phpEx;		global $config;		$var_name = 'pf_' . $profile_row['field_ident'];		switch ($profile_row['field_type'])		{			case FIELD_DATE:				if (!isset($_REQUEST[$var_name . '_day']))				{					if ($profile_row['field_default_value'] == 'now')					{						$now = getdate();						$profile_row['field_default_value'] = sprintf('%2d-%2d-%4d', $now['mday'], $now['mon'], $now['year']);					}					list($day, $month, $year) = explode('-', $profile_row['field_default_value']);				}				else				{					$day = request_var($var_name . '_day', 0);					$month = request_var($var_name . '_month', 0);					$year = request_var($var_name . '_year', 0);				}				$var = sprintf('%2d-%2d-%4d', $day, $month, $year);			break;			case FIELD_BOOL:				// Checkbox				if ($profile_row['field_length'] == 2)				{					$var = (isset($_REQUEST[$var_name])) ? 1 : 0;				}				else				{					$var = request_var($var_name, (int) $profile_row['field_default_value']);				}			break;			case FIELD_STRING:			case FIELD_TEXT:				$var = utf8_normalize_nfc(request_var($var_name, (string) $profile_row['field_default_value'], true));			break;			case FIELD_INT:				if (isset($_REQUEST[$var_name]) && $_REQUEST[$var_name] === '')				{					$var = NULL;				}				else				{					$var = request_var($var_name, (int) $profile_row['field_default_value']);				}			break;			case FIELD_DROPDOWN:				$var = request_var($var_name, (int) $profile_row['field_default_value']);			break;			default:				$var = request_var($var_name, $profile_row['field_default_value']);			break;		}		return $var;	}}/*** Custom Profile Fields ACP* @package phpBB3*/class custom_profile_admin extends custom_profile{	var $vars = array();	/**	* Return possible validation options	*/	function validate_options()	{		global $user;		$validate_ary = array('CHARS_ANY' => '.*', 'NUMBERS_ONLY' => '[0-9]+', 'ALPHA_ONLY' => '[\w]+', 'ALPHA_SPACERS' => '[\w_\+\. \-\[\]]+');		$validate_options = '';		foreach ($validate_ary as $lang => $value)		{			$selected = ($this->vars['field_validation'] == $value) ? ' selected="selected"' : '';			$validate_options .= '<option value="' . $value . '"' . $selected . '>' . $user->lang[$lang] . '</option>';		}		return $validate_options;	}	/**	* Get string options for second step in ACP	*/	function get_string_options()	{		global $user;		$options = array(			0 => array('TITLE' => $user->lang['FIELD_LENGTH'],		'FIELD' => '<input type="text" name="field_length" size="5" value="' . $this->vars['field_length'] . '" />'),			1 => array('TITLE' => $user->lang['MIN_FIELD_CHARS'],	'FIELD' => '<input type="text" name="field_minlen" size="5" value="' . $this->vars['field_minlen'] . '" />'),			2 => array('TITLE' => $user->lang['MAX_FIELD_CHARS'],	'FIELD' => '<input type="text" name="field_maxlen" size="5" value="' . $this->vars['field_maxlen'] . '" />'),			3 => array('TITLE' => $user->lang['FIELD_VALIDATION'],	'FIELD' => '<select name="field_validation">' . $this->validate_options() . '</select>')		);		return $options;	}	/**	* Get text options for second step in ACP	*/	function get_text_options()	{		global $user;		$options = array(			0 => array('TITLE' => $user->lang['FIELD_LENGTH'],		'FIELD' => '<input name="rows" size="5" value="' . $this->vars['rows'] . '" /> ' . $user->lang['ROWS'] . '</dd><dd><input name="columns" size="5" value="' . $this->vars['columns'] . '" /> ' . $user->lang['COLUMNS'] . ' <input type="hidden" name="field_length" value="' . $this->vars['field_length'] . '" />'),			1 => array('TITLE' => $user->lang['MIN_FIELD_CHARS'],	'FIELD' => '<input type="text" name="field_minlen" size="10" value="' . $this->vars['field_minlen'] . '" />'),			2 => array('TITLE' => $user->lang['MAX_FIELD_CHARS'],	'FIELD' => '<input type="text" name="field_maxlen" size="10" value="' . $this->vars['field_maxlen'] . '" />'),			3 => array('TITLE' => $user->lang['FIELD_VALIDATION'],	'FIELD' => '<select name="field_validation">' . $this->validate_options() . '</select>')		);		return $options;	}	/**	* Get int options for second step in ACP	*/	function get_int_options()	{		global $user;		$options = array(			0 => array('TITLE' => $user->lang['FIELD_LENGTH'],		'FIELD' => '<input type="text" name="field_length" size="5" value="' . $this->vars['field_length'] . '" />'),			1 => array('TITLE' => $user->lang['MIN_FIELD_NUMBER'],	'FIELD' => '<input type="text" name="field_minlen" size="5" value="' . $this->vars['field_minlen'] . '" />'),			2 => array('TITLE' => $user->lang['MAX_FIELD_NUMBER'],	'FIELD' => '<input type="text" name="field_maxlen" size="5" value="' . $this->vars['field_maxlen'] . '" />'),			3 => array('TITLE' => $user->lang['DEFAULT_VALUE'],		'FIELD' => '<input type="post" name="field_default_value" value="' . $this->vars['field_default_value'] . '" />')		);		return $options;	}	/**	* Get bool options for second step in ACP	*/	function get_bool_options()	{		global $user, $config, $lang_defs;		$default_lang_id = $lang_defs['iso'][$config['default_lang']];		$profile_row = array(			'var_name'				=> 'field_default_value',			'field_id'				=> 1,			'lang_name'				=> $this->vars['lang_name'],			'lang_explain'			=> $this->vars['lang_explain'],			'lang_id'				=> $default_lang_id,			'field_default_value'	=> $this->vars['field_default_value'],			'field_ident'			=> 'field_default_value',			'field_type'			=> FIELD_BOOL,			'field_length'			=> $this->vars['field_length'],			'lang_options'			=> $this->vars['lang_options']		);		$options = array(			0 => array('TITLE' => $user->lang['FIELD_TYPE'], 'EXPLAIN' => $user->lang['BOOL_TYPE_EXPLAIN'], 'FIELD' => '<label><input type="radio" class="radio" name="field_length" value="1"' . (($this->vars['field_length'] == 1) ? ' checked="checked"' : '') . ' onchange="document.getElementById(\'add_profile_field\').submit();" /> ' . $user->lang['RADIO_BUTTONS'] . '</label><label><input type="radio" class="radio" name="field_length" value="2"' . (($this->vars['field_length'] == 2) ? ' checked="checked"' : '') . ' onchange="document.getElementById(\'add_profile_field\').submit();" /> ' . $user->lang['CHECKBOX'] . '</label>'),			1 => array('TITLE' => $user->lang['DEFAULT_VALUE'], 'FIELD' => $this->process_field_row('preview', $profile_row))		);		return $options;	}	/**	* Get dropdown options for second step in ACP	*/	function get_dropdown_options()	{		global $user, $config, $lang_defs;		$default_lang_id = $lang_defs['iso'][$config['default_lang']];		$profile_row[0] = array(			'var_name'				=> 'field_default_value',			'field_id'				=> 1,			'lang_name'				=> $this->vars['lang_name'],			'lang_explain'			=> $this->vars['lang_explain'],			'lang_id'				=> $default_lang_id,			'field_default_value'	=> $this->vars['field_default_value'],			'field_ident'			=> 'field_default_value',			'field_type'			=> FIELD_DROPDOWN,			'lang_options'			=> $this->vars['lang_options']		);		$profile_row[1] = $profile_row[0];		$profile_row[1]['var_name'] = 'field_novalue';		$profile_row[1]['field_ident'] = 'field_novalue';		$profile_row[1]['field_default_value']	= $this->vars['field_novalue'];		$options = array(			0 => array('TITLE' => $user->lang['DEFAULT_VALUE'], 'FIELD' => $this->process_field_row('preview', $profile_row[0])),			1 => array('TITLE' => $user->lang['NO_VALUE_OPTION'], 'EXPLAIN' => $user->lang['NO_VALUE_OPTION_EXPLAIN'], 'FIELD' => $this->process_field_row('preview', $profile_row[1]))		);		return $options;	}	/**	* Get date options for second step in ACP	*/	function get_date_options()	{		global $user, $config, $lang_defs;		$default_lang_id = $lang_defs['iso'][$config['default_lang']];		$profile_row = array(			'var_name'				=> 'field_default_value',			'lang_name'				=> $this->vars['lang_name'],			'lang_explain'			=> $this->vars['lang_explain'],			'lang_id'				=> $default_lang_id,			'field_default_value'	=> $this->vars['field_default_value'],			'field_ident'			=> 'field_default_value',			'field_type'			=> FIELD_DATE,			'field_length'			=> $this->vars['field_length']		);		$always_now = request_var('always_now', -1);		if ($always_now == -1)		{			$s_checked = ($this->vars['field_default_value'] == 'now') ? true : false;		}		else		{			$s_checked = ($always_now) ? true : false;		}		$options = array(			0 => array('TITLE' => $user->lang['DEFAULT_VALUE'],	'FIELD' => $this->process_field_row('preview', $profile_row)),			1 => array('TITLE' => $user->lang['ALWAYS_TODAY'],	'FIELD' => '<label><input type="radio" class="radio" name="always_now" value="1"' . (($s_checked) ? ' checked="checked"' : '') . ' onchange="document.getElementById(\'add_profile_field\').submit();" /> ' . $user->lang['YES'] . '</label><label><input type="radio" class="radio" name="always_now" value="0"' . ((!$s_checked) ? ' checked="checked"' : '') . ' onchange="document.getElementById(\'add_profile_field\').submit();" /> ' . $user->lang['NO'] . '</label>'),		);		return $options;	}}?>
<?php/**** @package phpBB3* @version $Id$* @copyright (c) 2006 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License** This file creates SQL statements to upgrade phpBB on MySQL 3.x/4.0.x to 4.1.x/5.x**///// Security message://// This script is potentially dangerous.// Remove or comment the next line (die(".... ) to enable this script.// Do NOT FORGET to either remove this script or disable it after you have used it.//die("Please read the first lines of this script for instructions on how to enable it");define('IN_PHPBB', true);$phpbb_root_path = (defined('PHPBB_ROOT_PATH')) ? PHPBB_ROOT_PATH : './';$phpEx = substr(strrchr(__FILE__, '.'), 1);include($phpbb_root_path . 'common.' . $phpEx);$prefix = $table_prefix;$newline = "\n";if (PHP_SAPI !== 'cli'){	$newline = '<br>';}$sql = 'DESCRIBE ' . POSTS_TABLE . ' post_text';$result = $db->sql_query($sql);$row = $db->sql_fetchrow($result);$db->sql_freeresult($result);$mysql_indexer = $drop_index = false;if (strtolower($row['Type']) === 'mediumtext'){	$mysql_indexer = true;}if (strtolower($row['Key']) === 'mul'){	$drop_index = true;}echo "USE $dbname;$newline$newline";@set_time_limit(0);$schema_data = get_schema_struct();$dbms_type_map = array(	'mysql_41'	=> array(		'INT:'		=> 'int(%d)',		'BINT'		=> 'bigint(20)',		'UINT'		=> 'mediumint(8) UNSIGNED',		'UINT:'		=> 'int(%d) UNSIGNED',		'TINT:'		=> 'tinyint(%d)',		'USINT'		=> 'smallint(4) UNSIGNED',		'BOOL'		=> 'tinyint(1) UNSIGNED',		'VCHAR'		=> 'varchar(255)',		'VCHAR:'	=> 'varchar(%d)',		'CHAR:'		=> 'char(%d)',		'XSTEXT'	=> 'text',		'XSTEXT_UNI'=> 'varchar(100)',		'STEXT'		=> 'text',		'STEXT_UNI'	=> 'varchar(255)',		'TEXT'		=> 'text',		'TEXT_UNI'	=> 'text',		'MTEXT'		=> 'mediumtext',		'MTEXT_UNI'	=> 'mediumtext',		'TIMESTAMP'	=> 'int(11) UNSIGNED',		'DECIMAL'	=> 'decimal(5,2)',		'DECIMAL:'	=> 'decimal(%d,2)',		'PDECIMAL'	=> 'decimal(6,3)',		'PDECIMAL:'	=> 'decimal(%d,3)',		'VCHAR_UNI'	=> 'varchar(255)',		'VCHAR_UNI:'=> 'varchar(%d)',		'VCHAR_CI'	=> 'varchar(255)',		'VARBINARY'	=> 'varbinary(255)',	),	'mysql_40'	=> array(		'INT:'		=> 'int(%d)',		'BINT'		=> 'bigint(20)',		'UINT'		=> 'mediumint(8) UNSIGNED',		'UINT:'		=> 'int(%d) UNSIGNED',		'TINT:'		=> 'tinyint(%d)',		'USINT'		=> 'smallint(4) UNSIGNED',		'BOOL'		=> 'tinyint(1) UNSIGNED',		'VCHAR'		=> 'varbinary(255)',		'VCHAR:'	=> 'varbinary(%d)',		'CHAR:'		=> 'binary(%d)',		'XSTEXT'	=> 'blob',		'XSTEXT_UNI'=> 'blob',		'STEXT'		=> 'blob',		'STEXT_UNI'	=> 'blob',		'TEXT'		=> 'blob',		'TEXT_UNI'	=> 'blob',		'MTEXT'		=> 'mediumblob',		'MTEXT_UNI'	=> 'mediumblob',		'TIMESTAMP'	=> 'int(11) UNSIGNED',		'DECIMAL'	=> 'decimal(5,2)',		'DECIMAL:'	=> 'decimal(%d,2)',		'PDECIMAL'	=> 'decimal(6,3)',		'PDECIMAL:'	=> 'decimal(%d,3)',		'VCHAR_UNI'	=> 'blob',		'VCHAR_UNI:'=> array('varbinary(%d)', 'limit' => array('mult', 3, 255, 'blob')),		'VCHAR_CI'	=> 'blob',		'VARBINARY'	=> 'varbinary(255)',	),);foreach ($schema_data as $table_name => $table_data){	$table_name = str_replace('phpbb_', $prefix, $table_name);	// Write comment about table	echo "# Table: '{$table_name}'$newline";	// Create Table statement	$generator = $textimage = false;	// Do we need to DROP a fulltext index before we alter the table?	if ($table_name == ($prefix . 'posts') && $drop_index)	{		echo "ALTER TABLE {$table_name}{$newline}";		echo "DROP INDEX post_text,{$newline}DROP INDEX post_subject,{$newline}DROP INDEX post_content;{$newline}{$newline}";	}	$line = "ALTER TABLE {$table_name} $newline";	// Table specific so we don't get overlap	$modded_array = array();	// Write columns one by one...	foreach ($table_data['COLUMNS'] as $column_name => $column_data)	{		// Get type		if (strpos($column_data[0], ':') !== false)		{			list($orig_column_type, $column_length) = explode(':', $column_data[0]);			$column_type = sprintf($dbms_type_map['mysql_41'][$orig_column_type . ':'], $column_length);			if (isset($dbms_type_map['mysql_40'][$orig_column_type . ':']['limit'][0]))			{				switch ($dbms_type_map['mysql_40'][$orig_column_type . ':']['limit'][0])				{					case 'mult':						if (($column_length * $dbms_type_map['mysql_40'][$orig_column_type . ':']['limit'][1]) > $dbms_type_map['mysql_40'][$orig_column_type . ':']['limit'][2])						{							$modded_array[$column_name] = $column_type;						}					break;				}			}			$orig_column_type .= ':';		}		else		{			$orig_column_type = $column_data[0];			$other_column_type = $dbms_type_map['mysql_40'][$column_data[0]];			if ($other_column_type == 'text' || $other_column_type == 'blob')			{				$modded_array[$column_name] = $column_type;			}			$column_type = $dbms_type_map['mysql_41'][$column_data[0]];		}		// Adjust default value if db-dependant specified		if (is_array($column_data[1]))		{			$column_data[1] = (isset($column_data[1][$dbms])) ? $column_data[1][$dbms] : $column_data[1]['default'];		}		$line .= "\tMODIFY {$column_name} {$column_type} ";		// For hexadecimal values do not use single quotes		if (!is_null($column_data[1]) && substr($column_type, -4) !== 'text' && substr($column_type, -4) !== 'blob')		{			$line .= (strpos($column_data[1], '0x') === 0) ? "DEFAULT {$column_data[1]} " : "DEFAULT '{$column_data[1]}' ";		}		$line .= 'NOT NULL';		if (isset($column_data[2]))		{			if ($column_data[2] == 'auto_increment')			{				$line .= ' auto_increment';			}			else if ($column_data[2] == 'true_sort')			{				$line .= ' COLLATE utf8_unicode_ci';			}			else if ($column_data[2] == 'no_sort')			{				$line .= ' COLLATE utf8_bin';			}		}		else if (preg_match('/(?:var)?char|(?:medium)?text/i', $column_type))		{			$line .= ' COLLATE utf8_bin';		}		$line .= ",$newline";	}	// Write Keys	if (isset($table_data['KEYS']))	{		foreach ($table_data['KEYS'] as $key_name => $key_data)		{			$temp = '';			if (!is_array($key_data[1]))			{				$key_data[1] = array($key_data[1]);			}			$temp .= ($key_data[0] == 'INDEX') ? "\tADD KEY" : '';			$temp .= ($key_data[0] == 'UNIQUE') ? "\tADD UNIQUE" : '';			$repair = false;			foreach ($key_data[1] as $key => $col_name)			{				if (isset($modded_array[$col_name]))				{					$repair = true;				}			}			if ($repair)			{				$line .= "\tDROP INDEX " . $key_name . ",$newline";				$line .= $temp;				$line .= ' ' . $key_name . ' (' . implode(', ', $key_data[1]) . "),$newline";			}		}	}	//$line .= "\tCONVERT TO CHARACTER SET `utf8`$newline";	$line .= "\tDEFAULT CHARSET=utf8 COLLATE=utf8_bin;$newline$newline";	echo $line . "$newline";	// Do we now need to re-add the fulltext index? ;)	if ($table_name == ($prefix . 'posts') && $drop_index)	{		echo "ALTER TABLE $table_name ADD FULLTEXT (post_subject), ADD FULLTEXT (post_text), ADD FULLTEXT post_content (post_subject, post_text);{$newline}";	}}/*** Define the basic structure* The format:*		array('{TABLE_NAME}' => {TABLE_DATA})*		{TABLE_DATA}:*			COLUMNS = array({column_name} = array({column_type}, {default}, {auto_increment}))*			PRIMARY_KEY = {column_name(s)}*			KEYS = array({key_name} = array({key_type}, {column_name(s)})),**	Column Types:*	INT:x		=> SIGNED int(x)*	BINT		=> BIGINT*	UINT		=> mediumint(8) UNSIGNED*	UINT:x		=> int(x) UNSIGNED*	TINT:x		=> tinyint(x)*	USINT		=> smallint(4) UNSIGNED (for _order columns)*	BOOL		=> tinyint(1) UNSIGNED*	VCHAR		=> varchar(255)*	CHAR:x		=> char(x)*	XSTEXT_UNI	=> text for storing 100 characters (topic_title for example)*	STEXT_UNI	=> text for storing 255 characters (normal input field with a max of 255 single-byte chars) - same as VCHAR_UNI*	TEXT_UNI	=> text for storing 3000 characters (short text, descriptions, comments, etc.)*	MTEXT_UNI	=> mediumtext (post text, large text)*	VCHAR:x		=> varchar(x)*	TIMESTAMP	=> int(11) UNSIGNED*	DECIMAL		=> decimal number (5,2)*	DECIMAL:	=> decimal number (x,2)*	PDECIMAL	=> precision decimal number (6,3)*	PDECIMAL:	=> precision decimal number (x,3)*	VCHAR_UNI	=> varchar(255) BINARY*	VCHAR_CI	=> varchar_ci for postgresql, others VCHAR*/function get_schema_struct(){	$schema_data = array();	$schema_data['phpbb_attachments'] = array(		'COLUMNS'		=> array(			'attach_id'			=> array('UINT', NULL, 'auto_increment'),			'post_msg_id'		=> array('UINT', 0),			'topic_id'			=> array('UINT', 0),			'in_message'		=> array('BOOL', 0),			'poster_id'			=> array('UINT', 0),			'is_orphan'			=> array('BOOL', 1),			'physical_filename'	=> array('VCHAR', ''),			'real_filename'		=> array('VCHAR', ''),			'download_count'	=> array('UINT', 0),			'attach_comment'	=> array('TEXT_UNI', ''),			'extension'			=> array('VCHAR:100', ''),			'mimetype'			=> array('VCHAR:100', ''),			'filesize'			=> array('UINT:20', 0),			'filetime'			=> array('TIMESTAMP', 0),			'thumbnail'			=> array('BOOL', 0),		),		'PRIMARY_KEY'	=> 'attach_id',		'KEYS'			=> array(			'filetime'			=> array('INDEX', 'filetime'),			'post_msg_id'		=> array('INDEX', 'post_msg_id'),			'topic_id'			=> array('INDEX', 'topic_id'),			'poster_id'			=> array('INDEX', 'poster_id'),			'is_orphan'			=> array('INDEX', 'is_orphan'),		),	);	$schema_data['phpbb_acl_groups'] = array(		'COLUMNS'		=> array(			'group_id'			=> array('UINT', 0),			'forum_id'			=> array('UINT', 0),			'auth_option_id'	=> array('UINT', 0),			'auth_role_id'		=> array('UINT', 0),			'auth_setting'		=> array('TINT:2', 0),		),		'KEYS'			=> array(			'group_id'		=> array('INDEX', 'group_id'),			'auth_opt_id'	=> array('INDEX', 'auth_option_id'),			'auth_role_id'	=> array('INDEX', 'auth_role_id'),		),	);	$schema_data['phpbb_acl_options'] = array(		'COLUMNS'		=> array(			'auth_option_id'	=> array('UINT', NULL, 'auto_increment'),			'auth_option'		=> array('VCHAR:50', ''),			'is_global'			=> array('BOOL', 0),			'is_local'			=> array('BOOL', 0),			'founder_only'		=> array('BOOL', 0),		),		'PRIMARY_KEY'	=> 'auth_option_id',		'KEYS'			=> array(			'auth_option'		=> array('UNIQUE', 'auth_option'),		),	);	$schema_data['phpbb_acl_roles'] = array(		'COLUMNS'		=> array(			'role_id'			=> array('UINT', NULL, 'auto_increment'),			'role_name'			=> array('VCHAR_UNI', ''),			'role_description'	=> array('TEXT_UNI', ''),			'role_type'			=> array('VCHAR:10', ''),			'role_order'		=> array('USINT', 0),		),		'PRIMARY_KEY'	=> 'role_id',		'KEYS'			=> array(			'role_type'			=> array('INDEX', 'role_type'),			'role_order'		=> array('INDEX', 'role_order'),		),	);	$schema_data['phpbb_acl_roles_data'] = array(		'COLUMNS'		=> array(			'role_id'			=> array('UINT', 0),			'auth_option_id'	=> array('UINT', 0),			'auth_setting'		=> array('TINT:2', 0),		),		'PRIMARY_KEY'	=> array('role_id', 'auth_option_id'),		'KEYS'			=> array(			'ath_op_id'			=> array('INDEX', 'auth_option_id'),		),	);	$schema_data['phpbb_acl_users'] = array(		'COLUMNS'		=> array(			'user_id'			=> array('UINT', 0),			'forum_id'			=> array('UINT', 0),			'auth_option_id'	=> array('UINT', 0),			'auth_role_id'		=> array('UINT', 0),			'auth_setting'		=> array('TINT:2', 0),		),		'KEYS'			=> array(			'user_id'			=> array('INDEX', 'user_id'),			'auth_option_id'	=> array('INDEX', 'auth_option_id'),			'auth_role_id'		=> array('INDEX', 'auth_role_id'),		),	);	$schema_data['phpbb_banlist'] = array(		'COLUMNS'		=> array(			'ban_id'			=> array('UINT', NULL, 'auto_increment'),			'ban_userid'		=> array('UINT', 0),			'ban_ip'			=> array('VCHAR:40', ''),			'ban_email'			=> array('VCHAR_UNI:100', ''),			'ban_start'			=> array('TIMESTAMP', 0),			'ban_end'			=> array('TIMESTAMP', 0),			'ban_exclude'		=> array('BOOL', 0),			'ban_reason'		=> array('VCHAR_UNI', ''),			'ban_give_reason'	=> array('VCHAR_UNI', ''),		),		'PRIMARY_KEY'			=> 'ban_id',		'KEYS'			=> array(			'ban_end'			=> array('INDEX', 'ban_end'),			'ban_user'			=> array('INDEX', array('ban_userid', 'ban_exclude')),			'ban_email'			=> array('INDEX', array('ban_email', 'ban_exclude')),			'ban_ip'			=> array('INDEX', array('ban_ip', 'ban_exclude')),		),	);	$schema_data['phpbb_bbcodes'] = array(		'COLUMNS'		=> array(			'bbcode_id'				=> array('USINT', 0),			'bbcode_tag'			=> array('VCHAR:16', ''),			'bbcode_helpline'		=> array('VCHAR_UNI', ''),			'display_on_posting'	=> array('BOOL', 0),			'bbcode_match'			=> array('TEXT_UNI', ''),			'bbcode_tpl'			=> array('MTEXT_UNI', ''),			'first_pass_match'		=> array('MTEXT_UNI', ''),			'first_pass_replace'	=> array('MTEXT_UNI', ''),			'second_pass_match'		=> array('MTEXT_UNI', ''),			'second_pass_replace'	=> array('MTEXT_UNI', ''),		),		'PRIMARY_KEY'	=> 'bbcode_id',		'KEYS'			=> array(			'display_on_post'		=> array('INDEX', 'display_on_posting'),		),	);	$schema_data['phpbb_bookmarks'] = array(		'COLUMNS'		=> array(			'topic_id'			=> array('UINT', 0),			'user_id'			=> array('UINT', 0),		),		'PRIMARY_KEY'			=> array('topic_id', 'user_id'),	);	$schema_data['phpbb_bots'] = array(		'COLUMNS'		=> array(			'bot_id'			=> array('UINT', NULL, 'auto_increment'),			'bot_active'		=> array('BOOL', 1),			'bot_name'			=> array('STEXT_UNI', ''),			'user_id'			=> array('UINT', 0),			'bot_agent'			=> array('VCHAR', ''),			'bot_ip'			=> array('VCHAR', ''),		),		'PRIMARY_KEY'	=> 'bot_id',		'KEYS'			=> array(			'bot_active'		=> array('INDEX', 'bot_active'),		),	);	$schema_data['phpbb_config'] = array(		'COLUMNS'		=> array(			'config_name'		=> array('VCHAR', ''),			'config_value'		=> array('VCHAR_UNI', ''),			'is_dynamic'		=> array('BOOL', 0),		),		'PRIMARY_KEY'	=> 'config_name',		'KEYS'			=> array(			'is_dynamic'		=> array('INDEX', 'is_dynamic'),		),	);	$schema_data['phpbb_confirm'] = array(		'COLUMNS'		=> array(			'confirm_id'		=> array('CHAR:32', ''),			'session_id'		=> array('CHAR:32', ''),			'confirm_type'		=> array('TINT:3', 0),			'code'				=> array('VCHAR:8', ''),			'seed'				=> array('UINT:10', 0),			'attempts'			=> array('UINT', 0),		),		'PRIMARY_KEY'	=> array('session_id', 'confirm_id'),		'KEYS'			=> array(			'confirm_type'		=> array('INDEX', 'confirm_type'),		),	);	$schema_data['phpbb_disallow'] = array(		'COLUMNS'		=> array(			'disallow_id'		=> array('UINT', NULL, 'auto_increment'),			'disallow_username'	=> array('VCHAR_UNI:255', ''),		),		'PRIMARY_KEY'	=> 'disallow_id',	);	$schema_data['phpbb_drafts'] = array(		'COLUMNS'		=> array(			'draft_id'			=> array('UINT', NULL, 'auto_increment'),			'user_id'			=> array('UINT', 0),			'topic_id'			=> array('UINT', 0),			'forum_id'			=> array('UINT', 0),			'save_time'			=> array('TIMESTAMP', 0),			'draft_subject'		=> array('STEXT_UNI', ''),			'draft_message'		=> array('MTEXT_UNI', ''),		),		'PRIMARY_KEY'	=> 'draft_id',		'KEYS'			=> array(			'save_time'			=> array('INDEX', 'save_time'),		),	);	$schema_data['phpbb_extensions'] = array(		'COLUMNS'		=> array(			'extension_id'		=> array('UINT', NULL, 'auto_increment'),			'group_id'			=> array('UINT', 0),			'extension'			=> array('VCHAR:100', ''),		),		'PRIMARY_KEY'	=> 'extension_id',	);	$schema_data['phpbb_extension_groups'] = array(		'COLUMNS'		=> array(			'group_id'			=> array('UINT', NULL, 'auto_increment'),			'group_name'		=> array('VCHAR_UNI', ''),			'cat_id'			=> array('TINT:2', 0),			'allow_group'		=> array('BOOL', 0),			'download_mode'		=> array('BOOL', 1),			'upload_icon'		=> array('VCHAR', ''),			'max_filesize'		=> array('UINT:20', 0),			'allowed_forums'	=> array('TEXT', ''),			'allow_in_pm'		=> array('BOOL', 0),		),		'PRIMARY_KEY'	=> 'group_id',	);	$schema_data['phpbb_forums'] = array(		'COLUMNS'		=> array(			'forum_id'				=> array('UINT', NULL, 'auto_increment'),			'parent_id'				=> array('UINT', 0),			'left_id'				=> array('UINT', 0),			'right_id'				=> array('UINT', 0),			'forum_parents'			=> array('MTEXT', ''),			'forum_name'			=> array('STEXT_UNI', ''),			'forum_desc'			=> array('TEXT_UNI', ''),			'forum_desc_bitfield'	=> array('VCHAR:255', ''),			'forum_desc_options'	=> array('UINT:11', 7),			'forum_desc_uid'		=> array('VCHAR:8', ''),			'forum_link'			=> array('VCHAR_UNI', ''),			'forum_password'		=> array('VCHAR_UNI:40', ''),			'forum_style'			=> array('UINT', 0),			'forum_image'			=> array('VCHAR', ''),			'forum_rules'			=> array('TEXT_UNI', ''),			'forum_rules_link'		=> array('VCHAR_UNI', ''),			'forum_rules_bitfield'	=> array('VCHAR:255', ''),			'forum_rules_options'	=> array('UINT:11', 7),			'forum_rules_uid'		=> array('VCHAR:8', ''),			'forum_topics_per_page'	=> array('TINT:4', 0),			'forum_type'			=> array('TINT:4', 0),			'forum_status'			=> array('TINT:4', 0),			'forum_posts'			=> array('UINT', 0),			'forum_topics'			=> array('UINT', 0),			'forum_topics_real'		=> array('UINT', 0),			'forum_last_post_id'	=> array('UINT', 0),			'forum_last_poster_id'	=> array('UINT', 0),			'forum_last_post_subject' => array('STEXT_UNI', ''),			'forum_last_post_time'	=> array('TIMESTAMP', 0),			'forum_last_poster_name'=> array('VCHAR_UNI', ''),			'forum_last_poster_colour'=> array('VCHAR:6', ''),			'forum_flags'			=> array('TINT:4', 32),			'forum_options'			=> array('UINT:20', 0),			'display_subforum_list'	=> array('BOOL', 1),			'display_on_index'		=> array('BOOL', 1),			'enable_indexing'		=> array('BOOL', 1),			'enable_icons'			=> array('BOOL', 1),			'enable_prune'			=> array('BOOL', 0),			'prune_next'			=> array('TIMESTAMP', 0),			'prune_days'			=> array('UINT', 0),			'prune_viewed'			=> array('UINT', 0),			'prune_freq'			=> array('UINT', 0),		),		'PRIMARY_KEY'	=> 'forum_id',		'KEYS'			=> array(			'left_right_id'			=> array('INDEX', array('left_id', 'right_id')),			'forum_lastpost_id'		=> array('INDEX', 'forum_last_post_id'),		),	);	$schema_data['phpbb_forums_access'] = array(		'COLUMNS'		=> array(			'forum_id'				=> array('UINT', 0),			'user_id'				=> array('UINT', 0),			'session_id'			=> array('CHAR:32', ''),		),		'PRIMARY_KEY'	=> array('forum_id', 'user_id', 'session_id'),	);	$schema_data['phpbb_forums_track'] = array(		'COLUMNS'		=> array(			'user_id'				=> array('UINT', 0),			'forum_id'				=> array('UINT', 0),			'mark_time'				=> array('TIMESTAMP', 0),		),		'PRIMARY_KEY'	=> array('user_id', 'forum_id'),	);	$schema_data['phpbb_forums_watch'] = array(		'COLUMNS'		=> array(			'forum_id'				=> array('UINT', 0),			'user_id'				=> array('UINT', 0),			'notify_status'			=> array('BOOL', 0),		),		'KEYS'			=> array(			'forum_id'				=> array('INDEX', 'forum_id'),			'user_id'				=> array('INDEX', 'user_id'),			'notify_stat'			=> array('INDEX', 'notify_status'),		),	);	$schema_data['phpbb_groups'] = array(		'COLUMNS'		=> array(			'group_id'				=> array('UINT', NULL, 'auto_increment'),			'group_type'			=> array('TINT:4', 1),			'group_founder_manage'	=> array('BOOL', 0),			'group_skip_auth'		=> array('BOOL', 0),			'group_name'			=> array('VCHAR_CI', ''),			'group_desc'			=> array('TEXT_UNI', ''),			'group_desc_bitfield'	=> array('VCHAR:255', ''),			'group_desc_options'	=> array('UINT:11', 7),			'group_desc_uid'		=> array('VCHAR:8', ''),			'group_display'			=> array('BOOL', 0),			'group_avatar'			=> array('VCHAR', ''),			'group_avatar_type'		=> array('TINT:2', 0),			'group_avatar_width'	=> array('USINT', 0),			'group_avatar_height'	=> array('USINT', 0),			'group_rank'			=> array('UINT', 0),			'group_colour'			=> array('VCHAR:6', ''),			'group_sig_chars'		=> array('UINT', 0),			'group_receive_pm'		=> array('BOOL', 0),			'group_message_limit'	=> array('UINT', 0),			'group_max_recipients'	=> array('UINT', 0),			'group_legend'			=> array('BOOL', 1),		),		'PRIMARY_KEY'	=> 'group_id',		'KEYS'			=> array(			'group_legend_name'		=> array('INDEX', array('group_legend', 'group_name')),		),	);	$schema_data['phpbb_icons'] = array(		'COLUMNS'		=> array(			'icons_id'				=> array('UINT', NULL, 'auto_increment'),			'icons_url'				=> array('VCHAR', ''),			'icons_width'			=> array('TINT:4', 0),			'icons_height'			=> array('TINT:4', 0),			'icons_order'			=> array('UINT', 0),			'display_on_posting'	=> array('BOOL', 1),		),		'PRIMARY_KEY'	=> 'icons_id',		'KEYS'			=> array(			'display_on_posting'	=> array('INDEX', 'display_on_posting'),		),	);	$schema_data['phpbb_lang'] = array(		'COLUMNS'		=> array(			'lang_id'				=> array('TINT:4', NULL, 'auto_increment'),			'lang_iso'				=> array('VCHAR:30', ''),			'lang_dir'				=> array('VCHAR:30', ''),			'lang_english_name'		=> array('VCHAR_UNI:100', ''),			'lang_local_name'		=> array('VCHAR_UNI:255', ''),			'lang_author'			=> array('VCHAR_UNI:255', ''),		),		'PRIMARY_KEY'	=> 'lang_id',		'KEYS'			=> array(			'lang_iso'				=> array('INDEX', 'lang_iso'),		),	);	$schema_data['phpbb_log'] = array(		'COLUMNS'		=> array(			'log_id'				=> array('UINT', NULL, 'auto_increment'),			'log_type'				=> array('TINT:4', 0),			'user_id'				=> array('UINT', 0),			'forum_id'				=> array('UINT', 0),			'topic_id'				=> array('UINT', 0),			'reportee_id'			=> array('UINT', 0),			'log_ip'				=> array('VCHAR:40', ''),			'log_time'				=> array('TIMESTAMP', 0),			'log_operation'			=> array('TEXT_UNI', ''),			'log_data'				=> array('MTEXT_UNI', ''),		),		'PRIMARY_KEY'	=> 'log_id',		'KEYS'			=> array(			'log_type'				=> array('INDEX', 'log_type'),			'forum_id'				=> array('INDEX', 'forum_id'),			'topic_id'				=> array('INDEX', 'topic_id'),			'reportee_id'			=> array('INDEX', 'reportee_id'),			'user_id'				=> array('INDEX', 'user_id'),		),	);	$schema_data['phpbb_moderator_cache'] = array(		'COLUMNS'		=> array(			'forum_id'				=> array('UINT', 0),			'user_id'				=> array('UINT', 0),			'username'				=> array('VCHAR_UNI:255', ''),			'group_id'				=> array('UINT', 0),			'group_name'			=> array('VCHAR_UNI', ''),			'display_on_index'		=> array('BOOL', 1),		),		'KEYS'			=> array(			'disp_idx'				=> array('INDEX', 'display_on_index'),			'forum_id'				=> array('INDEX', 'forum_id'),		),	);	$schema_data['phpbb_modules'] = array(		'COLUMNS'		=> array(			'module_id'				=> array('UINT', NULL, 'auto_increment'),			'module_enabled'		=> array('BOOL', 1),			'module_display'		=> array('BOOL', 1),			'module_basename'		=> array('VCHAR', ''),			'module_class'			=> array('VCHAR:10', ''),			'parent_id'				=> array('UINT', 0),			'left_id'				=> array('UINT', 0),			'right_id'				=> array('UINT', 0),			'module_langname'		=> array('VCHAR', ''),			'module_mode'			=> array('VCHAR', ''),			'module_auth'			=> array('VCHAR', ''),		),		'PRIMARY_KEY'	=> 'module_id',		'KEYS'			=> array(			'left_right_id'			=> array('INDEX', array('left_id', 'right_id')),			'module_enabled'		=> array('INDEX', 'module_enabled'),			'class_left_id'			=> array('INDEX', array('module_class', 'left_id')),		),	);	$schema_data['phpbb_poll_options'] = array(		'COLUMNS'		=> array(			'poll_option_id'		=> array('TINT:4', 0),			'topic_id'				=> array('UINT', 0),			'poll_option_text'		=> array('TEXT_UNI', ''),			'poll_option_total'		=> array('UINT', 0),		),		'KEYS'			=> array(			'poll_opt_id'			=> array('INDEX', 'poll_option_id'),			'topic_id'				=> array('INDEX', 'topic_id'),		),	);	$schema_data['phpbb_poll_votes'] = array(		'COLUMNS'		=> array(			'topic_id'				=> array('UINT', 0),			'poll_option_id'		=> array('TINT:4', 0),			'vote_user_id'			=> array('UINT', 0),			'vote_user_ip'			=> array('VCHAR:40', ''),		),		'KEYS'			=> array(			'topic_id'				=> array('INDEX', 'topic_id'),			'vote_user_id'			=> array('INDEX', 'vote_user_id'),			'vote_user_ip'			=> array('INDEX', 'vote_user_ip'),		),	);	$schema_data['phpbb_posts'] = array(		'COLUMNS'		=> array(			'post_id'				=> array('UINT', NULL, 'auto_increment'),			'topic_id'				=> array('UINT', 0),			'forum_id'				=> array('UINT', 0),			'poster_id'				=> array('UINT', 0),			'icon_id'				=> array('UINT', 0),			'poster_ip'				=> array('VCHAR:40', ''),			'post_time'				=> array('TIMESTAMP', 0),			'post_approved'			=> array('BOOL', 1),			'post_reported'			=> array('BOOL', 0),			'enable_bbcode'			=> array('BOOL', 1),			'enable_smilies'		=> array('BOOL', 1),			'enable_magic_url'		=> array('BOOL', 1),			'enable_sig'			=> array('BOOL', 1),			'post_username'			=> array('VCHAR_UNI:255', ''),			'post_subject'			=> array('STEXT_UNI', '', 'true_sort'),			'post_text'				=> array('MTEXT_UNI', ''),			'post_checksum'			=> array('VCHAR:32', ''),			'post_attachment'		=> array('BOOL', 0),			'bbcode_bitfield'		=> array('VCHAR:255', ''),			'bbcode_uid'			=> array('VCHAR:8', ''),			'post_postcount'		=> array('BOOL', 1),			'post_edit_time'		=> array('TIMESTAMP', 0),			'post_edit_reason'		=> array('STEXT_UNI', ''),			'post_edit_user'		=> array('UINT', 0),			'post_edit_count'		=> array('USINT', 0),			'post_edit_locked'		=> array('BOOL', 0),		),		'PRIMARY_KEY'	=> 'post_id',		'KEYS'			=> array(			'forum_id'				=> array('INDEX', 'forum_id'),			'topic_id'				=> array('INDEX', 'topic_id'),			'poster_ip'				=> array('INDEX', 'poster_ip'),			'poster_id'				=> array('INDEX', 'poster_id'),			'post_approved'			=> array('INDEX', 'post_approved'),			'post_username'			=> array('INDEX', 'post_username'),			'tid_post_time'			=> array('INDEX', array('topic_id', 'post_time')),		),	);	$schema_data['phpbb_privmsgs'] = array(		'COLUMNS'		=> array(			'msg_id'				=> array('UINT', NULL, 'auto_increment'),			'root_level'			=> array('UINT', 0),			'author_id'				=> array('UINT', 0),			'icon_id'				=> array('UINT', 0),			'author_ip'				=> array('VCHAR:40', ''),			'message_time'			=> array('TIMESTAMP', 0),			'enable_bbcode'			=> array('BOOL', 1),			'enable_smilies'		=> array('BOOL', 1),			'enable_magic_url'		=> array('BOOL', 1),			'enable_sig'			=> array('BOOL', 1),			'message_subject'		=> array('STEXT_UNI', ''),			'message_text'			=> array('MTEXT_UNI', ''),			'message_edit_reason'	=> array('STEXT_UNI', ''),			'message_edit_user'		=> array('UINT', 0),			'message_attachment'	=> array('BOOL', 0),			'bbcode_bitfield'		=> array('VCHAR:255', ''),			'bbcode_uid'			=> array('VCHAR:8', ''),			'message_edit_time'		=> array('TIMESTAMP', 0),			'message_edit_count'	=> array('USINT', 0),			'to_address'			=> array('TEXT_UNI', ''),			'bcc_address'			=> array('TEXT_UNI', ''),			'message_reported'		=> array('BOOL', 0),		),		'PRIMARY_KEY'	=> 'msg_id',		'KEYS'			=> array(			'author_ip'				=> array('INDEX', 'author_ip'),			'message_time'			=> array('INDEX', 'message_time'),			'author_id'				=> array('INDEX', 'author_id'),			'root_level'			=> array('INDEX', 'root_level'),		),	);	$schema_data['phpbb_privmsgs_folder'] = array(		'COLUMNS'		=> array(			'folder_id'				=> array('UINT', NULL, 'auto_increment'),			'user_id'				=> array('UINT', 0),			'folder_name'			=> array('VCHAR_UNI', ''),			'pm_count'				=> array('UINT', 0),		),		'PRIMARY_KEY'	=> 'folder_id',		'KEYS'			=> array(			'user_id'				=> array('INDEX', 'user_id'),		),	);	$schema_data['phpbb_privmsgs_rules'] = array(		'COLUMNS'		=> array(			'rule_id'				=> array('UINT', NULL, 'auto_increment'),			'user_id'				=> array('UINT', 0),			'rule_check'			=> array('UINT', 0),			'rule_connection'		=> array('UINT', 0),			'rule_string'			=> array('VCHAR_UNI', ''),			'rule_user_id'			=> array('UINT', 0),			'rule_group_id'			=> array('UINT', 0),			'rule_action'			=> array('UINT', 0),			'rule_folder_id'		=> array('INT:11', 0),		),		'PRIMARY_KEY'	=> 'rule_id',		'KEYS'			=> array(			'user_id'				=> array('INDEX', 'user_id'),		),	);	$schema_data['phpbb_privmsgs_to'] = array(		'COLUMNS'		=> array(			'msg_id'				=> array('UINT', 0),			'user_id'				=> array('UINT', 0),			'author_id'				=> array('UINT', 0),			'pm_deleted'			=> array('BOOL', 0),			'pm_new'				=> array('BOOL', 1),			'pm_unread'				=> array('BOOL', 1),			'pm_replied'			=> array('BOOL', 0),			'pm_marked'				=> array('BOOL', 0),			'pm_forwarded'			=> array('BOOL', 0),			'folder_id'				=> array('INT:11', 0),		),		'KEYS'			=> array(			'msg_id'				=> array('INDEX', 'msg_id'),			'author_id'				=> array('INDEX', 'author_id'),			'usr_flder_id'			=> array('INDEX', array('user_id', 'folder_id')),		),	);	$schema_data['phpbb_profile_fields'] = array(		'COLUMNS'		=> array(			'field_id'				=> array('UINT', NULL, 'auto_increment'),			'field_name'			=> array('VCHAR_UNI', ''),			'field_type'			=> array('TINT:4', 0),			'field_ident'			=> array('VCHAR:20', ''),			'field_length'			=> array('VCHAR:20', ''),			'field_minlen'			=> array('VCHAR', ''),			'field_maxlen'			=> array('VCHAR', ''),			'field_novalue'			=> array('VCHAR_UNI', ''),			'field_default_value'	=> array('VCHAR_UNI', ''),			'field_validation'		=> array('VCHAR_UNI:20', ''),			'field_required'		=> array('BOOL', 0),			'field_show_on_reg'		=> array('BOOL', 0),			'field_show_on_vt'		=> array('BOOL', 0),			'field_show_profile'	=> array('BOOL', 0),			'field_hide'			=> array('BOOL', 0),			'field_no_view'			=> array('BOOL', 0),			'field_active'			=> array('BOOL', 0),			'field_order'			=> array('UINT', 0),		),		'PRIMARY_KEY'	=> 'field_id',		'KEYS'			=> array(			'fld_type'			=> array('INDEX', 'field_type'),			'fld_ordr'			=> array('INDEX', 'field_order'),		),	);	$schema_data['phpbb_profile_fields_data'] = array(		'COLUMNS'		=> array(			'user_id'				=> array('UINT', 0),		),		'PRIMARY_KEY'	=> 'user_id',	);	$schema_data['phpbb_profile_fields_lang'] = array(		'COLUMNS'		=> array(			'field_id'				=> array('UINT', 0),			'lang_id'				=> array('UINT', 0),			'option_id'				=> array('UINT', 0),			'field_type'			=> array('TINT:4', 0),			'lang_value'			=> array('VCHAR_UNI', ''),		),		'PRIMARY_KEY'	=> array('field_id', 'lang_id', 'option_id'),	);	$schema_data['phpbb_profile_lang'] = array(		'COLUMNS'		=> array(			'field_id'				=> array('UINT', 0),			'lang_id'				=> array('UINT', 0),			'lang_name'				=> array('VCHAR_UNI', ''),			'lang_explain'			=> array('TEXT_UNI', ''),			'lang_default_value'	=> array('VCHAR_UNI', ''),		),		'PRIMARY_KEY'	=> array('field_id', 'lang_id'),	);	$schema_data['phpbb_ranks'] = array(		'COLUMNS'		=> array(			'rank_id'				=> array('UINT', NULL, 'auto_increment'),			'rank_title'			=> array('VCHAR_UNI', ''),			'rank_min'				=> array('UINT', 0),			'rank_special'			=> array('BOOL', 0),			'rank_image'			=> array('VCHAR', ''),		),		'PRIMARY_KEY'	=> 'rank_id',	);	$schema_data['phpbb_reports'] = array(		'COLUMNS'		=> array(			'report_id'				=> array('UINT', NULL, 'auto_increment'),			'reason_id'				=> array('USINT', 0),			'post_id'				=> array('UINT', 0),			'pm_id'					=> array('UINT', 0),			'user_id'				=> array('UINT', 0),			'user_notify'			=> array('BOOL', 0),			'report_closed'			=> array('BOOL', 0),			'report_time'			=> array('TIMESTAMP', 0),			'report_text'			=> array('MTEXT_UNI', ''),		),		'PRIMARY_KEY'	=> 'report_id',		'KEYS'			=> array(			'post_id'			=> array('INDEX', 'post_id'),			'pm_id'				=> array('INDEX', 'pm_id'),		),	);	$schema_data['phpbb_reports_reasons'] = array(		'COLUMNS'		=> array(			'reason_id'				=> array('USINT', NULL, 'auto_increment'),			'reason_title'			=> array('VCHAR_UNI', ''),			'reason_description'	=> array('MTEXT_UNI', ''),			'reason_order'			=> array('USINT', 0),		),		'PRIMARY_KEY'	=> 'reason_id',	);	$schema_data['phpbb_search_results'] = array(		'COLUMNS'		=> array(			'search_key'			=> array('VCHAR:32', ''),			'search_time'			=> array('TIMESTAMP', 0),			'search_keywords'		=> array('MTEXT_UNI', ''),			'search_authors'		=> array('MTEXT', ''),		),		'PRIMARY_KEY'	=> 'search_key',	);	$schema_data['phpbb_search_wordlist'] = array(		'COLUMNS'		=> array(			'word_id'			=> array('UINT', NULL, 'auto_increment'),			'word_text'			=> array('VCHAR_UNI', ''),			'word_common'		=> array('BOOL', 0),			'word_count'		=> array('UINT', 0),		),		'PRIMARY_KEY'	=> 'word_id',		'KEYS'			=> array(			'wrd_txt'			=> array('UNIQUE', 'word_text'),			'wrd_cnt'			=> array('INDEX', 'word_count'),		),	);	$schema_data['phpbb_search_wordmatch'] = array(		'COLUMNS'		=> array(			'post_id'			=> array('UINT', 0),			'word_id'			=> array('UINT', 0),			'title_match'		=> array('BOOL', 0),		),		'KEYS'			=> array(			'unq_mtch'			=> array('UNIQUE', array('word_id', 'post_id', 'title_match')),			'word_id'			=> array('INDEX', 'word_id'),			'post_id'			=> array('INDEX', 'post_id'),		),	);	$schema_data['phpbb_sessions'] = array(		'COLUMNS'		=> array(			'session_id'			=> array('CHAR:32', ''),			'session_user_id'		=> array('UINT', 0),			'session_forum_id'		=> array('UINT', 0),			'session_last_visit'	=> array('TIMESTAMP', 0),			'session_start'			=> array('TIMESTAMP', 0),			'session_time'			=> array('TIMESTAMP', 0),			'session_ip'			=> array('VCHAR:40', ''),			'session_browser'		=> array('VCHAR:150', ''),			'session_forwarded_for'	=> array('VCHAR:255', ''),			'session_page'			=> array('VCHAR_UNI', ''),			'session_viewonline'	=> array('BOOL', 1),			'session_autologin'		=> array('BOOL', 0),			'session_admin'			=> array('BOOL', 0),		),		'PRIMARY_KEY'	=> 'session_id',		'KEYS'			=> array(			'session_time'		=> array('INDEX', 'session_time'),			'session_user_id'	=> array('INDEX', 'session_user_id'),			'session_fid'		=> array('INDEX', 'session_forum_id'),		),	);	$schema_data['phpbb_sessions_keys'] = array(		'COLUMNS'		=> array(			'key_id'			=> array('CHAR:32', ''),			'user_id'			=> array('UINT', 0),			'last_ip'			=> array('VCHAR:40', ''),			'last_login'		=> array('TIMESTAMP', 0),		),		'PRIMARY_KEY'	=> array('key_id', 'user_id'),		'KEYS'			=> array(			'last_login'		=> array('INDEX', 'last_login'),		),	);	$schema_data['phpbb_sitelist'] = array(		'COLUMNS'		=> array(			'site_id'		=> array('UINT', NULL, 'auto_increment'),			'site_ip'		=> array('VCHAR:40', ''),			'site_hostname'	=> array('VCHAR', ''),			'ip_exclude'	=> array('BOOL', 0),		),		'PRIMARY_KEY'		=> 'site_id',	);	$schema_data['phpbb_smilies'] = array(		'COLUMNS'		=> array(			'smiley_id'			=> array('UINT', NULL, 'auto_increment'),			// We may want to set 'code' to VCHAR:50 or check if unicode support is possible... at the moment only ASCII characters are allowed.			'code'				=> array('VCHAR_UNI:50', ''),			'emotion'			=> array('VCHAR_UNI:50', ''),			'smiley_url'		=> array('VCHAR:50', ''),			'smiley_width'		=> array('USINT', 0),			'smiley_height'		=> array('USINT', 0),			'smiley_order'		=> array('UINT', 0),			'display_on_posting'=> array('BOOL', 1),		),		'PRIMARY_KEY'	=> 'smiley_id',		'KEYS'			=> array(			'display_on_post'		=> array('INDEX', 'display_on_posting'),		),	);	$schema_data['phpbb_styles'] = array(		'COLUMNS'		=> array(			'style_id'				=> array('UINT', NULL, 'auto_increment'),			'style_name'			=> array('VCHAR_UNI:255', ''),			'style_copyright'		=> array('VCHAR_UNI', ''),			'style_active'			=> array('BOOL', 1),			'template_id'			=> array('UINT', 0),			'theme_id'				=> array('UINT', 0),			'imageset_id'			=> array('UINT', 0),		),		'PRIMARY_KEY'	=> 'style_id',		'KEYS'			=> array(			'style_name'		=> array('UNIQUE', 'style_name'),			'template_id'		=> array('INDEX', 'template_id'),			'theme_id'			=> array('INDEX', 'theme_id'),			'imageset_id'		=> array('INDEX', 'imageset_id'),		),	);	$schema_data['phpbb_styles_template'] = array(		'COLUMNS'		=> array(			'template_id'			=> array('UINT', NULL, 'auto_increment'),			'template_name'			=> array('VCHAR_UNI:255', ''),			'template_copyright'	=> array('VCHAR_UNI', ''),			'template_path'			=> array('VCHAR:100', ''),			'bbcode_bitfield'		=> array('VCHAR:255', 'kNg='),			'template_storedb'		=> array('BOOL', 0),			'template_inherits_id'		=> array('UINT:4', 0),			'template_inherit_path'		=> array('VCHAR', ''),		),		'PRIMARY_KEY'	=> 'template_id',		'KEYS'			=> array(			'tmplte_nm'				=> array('UNIQUE', 'template_name'),		),	);	$schema_data['phpbb_styles_template_data'] = array(		'COLUMNS'		=> array(			'template_id'			=> array('UINT', 0),			'template_filename'		=> array('VCHAR:100', ''),			'template_included'		=> array('TEXT', ''),			'template_mtime'		=> array('TIMESTAMP', 0),			'template_data'			=> array('MTEXT_UNI', ''),		),		'KEYS'			=> array(			'tid'					=> array('INDEX', 'template_id'),			'tfn'					=> array('INDEX', 'template_filename'),		),	);	$schema_data['phpbb_styles_theme'] = array(		'COLUMNS'		=> array(			'theme_id'				=> array('UINT', NULL, 'auto_increment'),			'theme_name'			=> array('VCHAR_UNI:255', ''),			'theme_copyright'		=> array('VCHAR_UNI', ''),			'theme_path'			=> array('VCHAR:100', ''),			'theme_storedb'			=> array('BOOL', 0),			'theme_mtime'			=> array('TIMESTAMP', 0),			'theme_data'			=> array('MTEXT_UNI', ''),		),		'PRIMARY_KEY'	=> 'theme_id',		'KEYS'			=> array(			'theme_name'		=> array('UNIQUE', 'theme_name'),		),	);	$schema_data['phpbb_styles_imageset'] = array(		'COLUMNS'		=> array(			'imageset_id'				=> array('UINT', NULL, 'auto_increment'),			'imageset_name'				=> array('VCHAR_UNI:255', ''),			'imageset_copyright'		=> array('VCHAR_UNI', ''),			'imageset_path'				=> array('VCHAR:100', ''),		),		'PRIMARY_KEY'		=> 'imageset_id',		'KEYS'				=> array(			'imgset_nm'			=> array('UNIQUE', 'imageset_name'),		),	);	$schema_data['phpbb_styles_imageset_data'] = array(		'COLUMNS'		=> array(			'image_id'				=> array('UINT', NULL, 'auto_increment'),			'image_name'			=> array('VCHAR:200', ''),			'image_filename'		=> array('VCHAR:200', ''),			'image_lang'			=> array('VCHAR:30', ''),			'image_height'			=> array('USINT', 0),			'image_width'			=> array('USINT', 0),			'imageset_id'			=> array('UINT', 0),		),		'PRIMARY_KEY'		=> 'image_id',		'KEYS'				=> array(			'i_d'			=> array('INDEX', 'imageset_id'),		),	);	$schema_data['phpbb_topics'] = array(		'COLUMNS'		=> array(			'topic_id'					=> array('UINT', NULL, 'auto_increment'),			'forum_id'					=> array('UINT', 0),			'icon_id'					=> array('UINT', 0),			'topic_attachment'			=> array('BOOL', 0),			'topic_approved'			=> array('BOOL', 1),			'topic_reported'			=> array('BOOL', 0),			'topic_title'				=> array('STEXT_UNI', '', 'true_sort'),			'topic_poster'				=> array('UINT', 0),			'topic_time'				=> array('TIMESTAMP', 0),			'topic_time_limit'			=> array('TIMESTAMP', 0),			'topic_views'				=> array('UINT', 0),			'topic_replies'				=> array('UINT', 0),			'topic_replies_real'		=> array('UINT', 0),			'topic_status'				=> array('TINT:3', 0),			'topic_type'				=> array('TINT:3', 0),			'topic_first_post_id'		=> array('UINT', 0),			'topic_first_poster_name'	=> array('VCHAR_UNI', ''),			'topic_first_poster_colour'	=> array('VCHAR:6', ''),			'topic_last_post_id'		=> array('UINT', 0),			'topic_last_poster_id'		=> array('UINT', 0),			'topic_last_poster_name'	=> array('VCHAR_UNI', ''),			'topic_last_poster_colour'	=> array('VCHAR:6', ''),			'topic_last_post_subject'	=> array('STEXT_UNI', ''),			'topic_last_post_time'		=> array('TIMESTAMP', 0),			'topic_last_view_time'		=> array('TIMESTAMP', 0),			'topic_moved_id'			=> array('UINT', 0),			'topic_bumped'				=> array('BOOL', 0),			'topic_bumper'				=> array('UINT', 0),			'poll_title'				=> array('STEXT_UNI', ''),			'poll_start'				=> array('TIMESTAMP', 0),			'poll_length'				=> array('TIMESTAMP', 0),			'poll_max_options'			=> array('TINT:4', 1),			'poll_last_vote'			=> array('TIMESTAMP', 0),			'poll_vote_change'			=> array('BOOL', 0),		),		'PRIMARY_KEY'	=> 'topic_id',		'KEYS'			=> array(			'forum_id'			=> array('INDEX', 'forum_id'),			'forum_id_type'		=> array('INDEX', array('forum_id', 'topic_type')),			'last_post_time'	=> array('INDEX', 'topic_last_post_time'),			'topic_approved'	=> array('INDEX', 'topic_approved'),			'forum_appr_last'	=> array('INDEX', array('forum_id', 'topic_approved', 'topic_last_post_id')),			'fid_time_moved'	=> array('INDEX', array('forum_id', 'topic_last_post_time', 'topic_moved_id')),		),	);	$schema_data['phpbb_topics_track'] = array(		'COLUMNS'		=> array(			'user_id'			=> array('UINT', 0),			'topic_id'			=> array('UINT', 0),			'forum_id'			=> array('UINT', 0),			'mark_time'			=> array('TIMESTAMP', 0),		),		'PRIMARY_KEY'	=> array('user_id', 'topic_id'),		'KEYS'			=> array(			'topic_id'			=> array('INDEX', 'topic_id'),			'forum_id'			=> array('INDEX', 'forum_id'),		),	);	$schema_data['phpbb_topics_posted'] = array(		'COLUMNS'		=> array(			'user_id'			=> array('UINT', 0),			'topic_id'			=> array('UINT', 0),			'topic_posted'		=> array('BOOL', 0),		),		'PRIMARY_KEY'	=> array('user_id', 'topic_id'),	);	$schema_data['phpbb_topics_watch'] = array(		'COLUMNS'		=> array(			'topic_id'			=> array('UINT', 0),			'user_id'			=> array('UINT', 0),			'notify_status'		=> array('BOOL', 0),		),		'KEYS'			=> array(			'topic_id'			=> array('INDEX', 'topic_id'),			'user_id'			=> array('INDEX', 'user_id'),			'notify_stat'		=> array('INDEX', 'notify_status'),		),	);	$schema_data['phpbb_user_group'] = array(		'COLUMNS'		=> array(			'group_id'			=> array('UINT', 0),			'user_id'			=> array('UINT', 0),			'group_leader'		=> array('BOOL', 0),			'user_pending'		=> array('BOOL', 1),		),		'KEYS'			=> array(			'group_id'			=> array('INDEX', 'group_id'),			'user_id'			=> array('INDEX', 'user_id'),			'group_leader'		=> array('INDEX', 'group_leader'),		),	);	$schema_data['phpbb_users'] = array(		'COLUMNS'		=> array(			'user_id'					=> array('UINT', NULL, 'auto_increment'),			'user_type'					=> array('TINT:2', 0),			'group_id'					=> array('UINT', 3),			'user_permissions'			=> array('MTEXT', ''),			'user_perm_from'			=> array('UINT', 0),			'user_ip'					=> array('VCHAR:40', ''),			'user_regdate'				=> array('TIMESTAMP', 0),			'username'					=> array('VCHAR_CI', ''),			'username_clean'			=> array('VCHAR_CI', ''),			'user_password'				=> array('VCHAR_UNI:40', ''),			'user_passchg'				=> array('TIMESTAMP', 0),			'user_pass_convert'			=> array('BOOL', 0),			'user_email'				=> array('VCHAR_UNI:100', ''),			'user_email_hash'			=> array('BINT', 0),			'user_birthday'				=> array('VCHAR:10', ''),			'user_lastvisit'			=> array('TIMESTAMP', 0),			'user_lastmark'				=> array('TIMESTAMP', 0),			'user_lastpost_time'		=> array('TIMESTAMP', 0),			'user_lastpage'				=> array('VCHAR_UNI:200', ''),			'user_last_confirm_key'		=> array('VCHAR:10', ''),			'user_last_search'			=> array('TIMESTAMP', 0),			'user_warnings'				=> array('TINT:4', 0),			'user_last_warning'			=> array('TIMESTAMP', 0),			'user_login_attempts'		=> array('TINT:4', 0),			'user_inactive_reason'		=> array('TINT:2', 0),			'user_inactive_time'		=> array('TIMESTAMP', 0),			'user_posts'				=> array('UINT', 0),			'user_lang'					=> array('VCHAR:30', ''),			'user_timezone'				=> array('DECIMAL', 0),			'user_dst'					=> array('BOOL', 0),			'user_dateformat'			=> array('VCHAR_UNI:30', 'd M Y H:i'),			'user_style'				=> array('UINT', 0),			'user_rank'					=> array('UINT', 0),			'user_colour'				=> array('VCHAR:6', ''),			'user_new_privmsg'			=> array('INT:4', 0),			'user_unread_privmsg'		=> array('INT:4', 0),			'user_last_privmsg'			=> array('TIMESTAMP', 0),			'user_message_rules'		=> array('BOOL', 0),			'user_full_folder'			=> array('INT:11', -3),			'user_emailtime'			=> array('TIMESTAMP', 0),			'user_topic_show_days'		=> array('USINT', 0),			'user_topic_sortby_type'	=> array('VCHAR:1', 't'),			'user_topic_sortby_dir'		=> array('VCHAR:1', 'd'),			'user_post_show_days'		=> array('USINT', 0),			'user_post_sortby_type'		=> array('VCHAR:1', 't'),			'user_post_sortby_dir'		=> array('VCHAR:1', 'a'),			'user_notify'				=> array('BOOL', 0),			'user_notify_pm'			=> array('BOOL', 1),			'user_notify_type'			=> array('TINT:4', 0),			'user_allow_pm'				=> array('BOOL', 1),			'user_allow_viewonline'		=> array('BOOL', 1),			'user_allow_viewemail'		=> array('BOOL', 1),			'user_allow_massemail'		=> array('BOOL', 1),			'user_options'				=> array('UINT:11', 230271),			'user_avatar'				=> array('VCHAR', ''),			'user_avatar_type'			=> array('TINT:2', 0),			'user_avatar_width'			=> array('USINT', 0),			'user_avatar_height'		=> array('USINT', 0),			'user_sig'					=> array('MTEXT_UNI', ''),			'user_sig_bbcode_uid'		=> array('VCHAR:8', ''),			'user_sig_bbcode_bitfield'	=> array('VCHAR:255', ''),			'user_from'					=> array('VCHAR_UNI:100', ''),			'user_icq'					=> array('VCHAR:15', ''),			'user_aim'					=> array('VCHAR_UNI', ''),			'user_yim'					=> array('VCHAR_UNI', ''),			'user_msnm'					=> array('VCHAR_UNI', ''),			'user_jabber'				=> array('VCHAR_UNI', ''),			'user_website'				=> array('VCHAR_UNI:200', ''),			'user_occ'					=> array('TEXT_UNI', ''),			'user_interests'			=> array('TEXT_UNI', ''),			'user_actkey'				=> array('VCHAR:32', ''),			'user_newpasswd'			=> array('VCHAR_UNI:40', ''),			'user_form_salt'			=> array('VCHAR_UNI:32', ''),			'user_new'					=> array('BOOL', 1),			'user_reminded'				=> array('TINT:4', 0),			'user_reminded_time'		=> array('TIMESTAMP', 0),		),		'PRIMARY_KEY'	=> 'user_id',		'KEYS'			=> array(			'user_birthday'				=> array('INDEX', 'user_birthday'),			'user_email_hash'			=> array('INDEX', 'user_email_hash'),			'user_type'					=> array('INDEX', 'user_type'),			'username_clean'			=> array('UNIQUE', 'username_clean'),		),	);	$schema_data['phpbb_warnings'] = array(		'COLUMNS'		=> array(			'warning_id'			=> array('UINT', NULL, 'auto_increment'),			'user_id'				=> array('UINT', 0),			'post_id'				=> array('UINT', 0),			'log_id'				=> array('UINT', 0),			'warning_time'			=> array('TIMESTAMP', 0),		),		'PRIMARY_KEY'	=> 'warning_id',	);	$schema_data['phpbb_words'] = array(		'COLUMNS'		=> array(			'word_id'				=> array('UINT', NULL, 'auto_increment'),			'word'					=> array('VCHAR_UNI', ''),			'replacement'			=> array('VCHAR_UNI', ''),		),		'PRIMARY_KEY'	=> 'word_id',	);	$schema_data['phpbb_zebra'] = array(		'COLUMNS'		=> array(			'user_id'				=> array('UINT', 0),			'zebra_id'				=> array('UINT', 0),			'friend'				=> array('BOOL', 0),			'foe'					=> array('BOOL', 0),		),		'PRIMARY_KEY'	=> array('user_id', 'zebra_id'),	);	return $schema_data;}?>
<?php/**** @package mcp* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @ignore*/if (!defined('IN_PHPBB')){	exit;}/*** View topic in MCP*/function mcp_topic_view($id, $mode, $action){	global $phpEx, $phpbb_root_path, $config;	global $template, $db, $user, $auth, $cache;	$url = append_sid("{$phpbb_root_path}mcp.$phpEx?" . extra_url());	$user->add_lang('viewtopic');	$topic_id = request_var('t', 0);	$topic_info = get_topic_data(array($topic_id), false, true);	if (!sizeof($topic_info))	{		trigger_error('TOPIC_NOT_EXIST');	}	$topic_info = $topic_info[$topic_id];	// Set up some vars	$icon_id		= request_var('icon', 0);	$subject		= utf8_normalize_nfc(request_var('subject', '', true));	$start			= request_var('start', 0);	$sort_days_old	= request_var('st_old', 0);	$forum_id		= request_var('f', 0);	$to_topic_id	= request_var('to_topic_id', 0);	$to_forum_id	= request_var('to_forum_id', 0);	$sort			= isset($_POST['sort']) ? true : false;	$submitted_id_list	= request_var('post_ids', array(0));	$checked_ids = $post_id_list = request_var('post_id_list', array(0));	// Split Topic?	if ($action == 'split_all' || $action == 'split_beyond')	{		if (!$sort)		{			split_topic($action, $topic_id, $to_forum_id, $subject);		}		$action = 'split';	}	// Merge Posts?	if ($action == 'merge_posts')	{		if (!$sort)		{			merge_posts($topic_id, $to_topic_id);		}		$action = 'merge';	}	if ($action == 'split' && !$subject)	{		$subject = $topic_info['topic_title'];	}	// Approve posts?	if ($action == 'approve' && $auth->acl_get('m_approve', $topic_info['forum_id']))	{		include($phpbb_root_path . 'includes/mcp/mcp_queue.' . $phpEx);		include_once($phpbb_root_path . 'includes/functions_posting.' . $phpEx);		include_once($phpbb_root_path . 'includes/functions_messenger.' . $phpEx);		if (!sizeof($post_id_list))		{			trigger_error('NO_POST_SELECTED');		}		if (!$sort)		{			approve_post($post_id_list, $id, $mode);		}	}	// Jumpbox, sort selects and that kind of things	make_jumpbox($url . "&amp;i=$id&amp;mode=forum_view", $topic_info['forum_id'], false, 'm_', true);	$where_sql = ($action == 'reports') ? 'WHERE post_reported = 1 AND ' : 'WHERE';	$sort_days = $total = 0;	$sort_key = $sort_dir = '';	$sort_by_sql = $sort_order_sql = array();	mcp_sorting('viewtopic', $sort_days, $sort_key, $sort_dir, $sort_by_sql, $sort_order_sql, $total, $topic_info['forum_id'], $topic_id, $where_sql);	$limit_time_sql = ($sort_days) ? 'AND p.post_time >= ' . (time() - ($sort_days * 86400)) : '';	if ($total == -1)	{		if ($auth->acl_get('m_approve', $topic_info['forum_id']))		{			$total = $topic_info['topic_replies_real'] + 1;		}		else		{			$total = $topic_info['topic_replies'] + 1;		}	}	$posts_per_page = max(0, request_var('posts_per_page', intval($config['posts_per_page'])));	if ($posts_per_page == 0)	{		$posts_per_page = $total;	}	if ((!empty($sort_days_old) && $sort_days_old != $sort_days) || $total <= $posts_per_page)	{		$start = 0;	}	// Make sure $start is set to the last page if it exceeds the amount	if ($start < 0 || $start >= $total)	{		$start = ($start < 0) ? 0 : floor(($total - 1) / $posts_per_page) * $posts_per_page;	}	$sql = 'SELECT u.username, u.username_clean, u.user_colour, p.*		FROM ' . POSTS_TABLE . ' p, ' . USERS_TABLE . ' u		WHERE ' . (($action == 'reports') ? 'p.post_reported = 1 AND ' : '') . '			p.topic_id = ' . $topic_id . ' ' .			((!$auth->acl_get('m_approve', $topic_info['forum_id'])) ? ' AND p.post_approved = 1 ' : '') . '			AND p.poster_id = u.user_id ' .			$limit_time_sql . '		ORDER BY ' . $sort_order_sql;	$result = $db->sql_query_limit($sql, $posts_per_page, $start);	$rowset = $post_id_list = array();	$bbcode_bitfield = '';	while ($row = $db->sql_fetchrow($result))	{		$rowset[] = $row;		$post_id_list[] = $row['post_id'];		$bbcode_bitfield = $bbcode_bitfield | base64_decode($row['bbcode_bitfield']);	}	$db->sql_freeresult($result);	if ($bbcode_bitfield !== '')	{		include_once($phpbb_root_path . 'includes/bbcode.' . $phpEx);		$bbcode = new bbcode(base64_encode($bbcode_bitfield));	}	$topic_tracking_info = array();	// Get topic tracking info	if ($config['load_db_lastread'])	{		$tmp_topic_data = array($topic_id => $topic_info);		$topic_tracking_info = get_topic_tracking($topic_info['forum_id'], $topic_id, $tmp_topic_data, array($topic_info['forum_id'] => $topic_info['forum_mark_time']));		unset($tmp_topic_data);	}	else	{		$topic_tracking_info = get_complete_topic_tracking($topic_info['forum_id'], $topic_id);	}	$has_unapproved_posts = false;	// Grab extensions	$extensions = $attachments = array();	if ($topic_info['topic_attachment'] && sizeof($post_id_list))	{		$extensions = $cache->obtain_attach_extensions($topic_info['forum_id']);		// Get attachments...		if ($auth->acl_get('u_download') && $auth->acl_get('f_download', $topic_info['forum_id']))		{			$sql = 'SELECT *				FROM ' . ATTACHMENTS_TABLE . '				WHERE ' . $db->sql_in_set('post_msg_id', $post_id_list) . '					AND in_message = 0				ORDER BY filetime DESC, post_msg_id ASC';			$result = $db->sql_query($sql);			while ($row = $db->sql_fetchrow($result))			{				$attachments[$row['post_msg_id']][] = $row;			}			$db->sql_freeresult($result);		}	}	foreach ($rowset as $i => $row)	{		$message = $row['post_text'];		$post_subject = ($row['post_subject'] != '') ? $row['post_subject'] : $topic_info['topic_title'];		if ($row['bbcode_bitfield'])		{			$bbcode->bbcode_second_pass($message, $row['bbcode_uid'], $row['bbcode_bitfield']);		}		$message = bbcode_nl2br($message);		$message = smiley_text($message);		if (!empty($attachments[$row['post_id']]))		{			$update_count = array();			parse_attachments($topic_info['forum_id'], $message, $attachments[$row['post_id']], $update_count);		}		if (!$row['post_approved'])		{			$has_unapproved_posts = true;		}		$post_unread = (isset($topic_tracking_info[$topic_id]) && $row['post_time'] > $topic_tracking_info[$topic_id]) ? true : false;		$template->assign_block_vars('postrow', array(			'POST_AUTHOR_FULL'		=> get_username_string('full', $row['poster_id'], $row['username'], $row['user_colour'], $row['post_username']),			'POST_AUTHOR_COLOUR'	=> get_username_string('colour', $row['poster_id'], $row['username'], $row['user_colour'], $row['post_username']),			'POST_AUTHOR'			=> get_username_string('username', $row['poster_id'], $row['username'], $row['user_colour'], $row['post_username']),			'U_POST_AUTHOR'			=> get_username_string('profile', $row['poster_id'], $row['username'], $row['user_colour'], $row['post_username']),			'POST_DATE'		=> $user->format_date($row['post_time']),			'POST_SUBJECT'	=> $post_subject,			'MESSAGE'		=> $message,			'POST_ID'		=> $row['post_id'],			'RETURN_TOPIC'	=> sprintf($user->lang['RETURN_TOPIC'], '<a href="' . append_sid("{$phpbb_root_path}viewtopic.$phpEx", 't=' . $topic_id) . '">', '</a>'),			'MINI_POST_IMG'			=> ($post_unread) ? $user->img('icon_post_target_unread', 'UNREAD_POST') : $user->img('icon_post_target', 'POST'),			'S_POST_REPORTED'	=> ($row['post_reported'] && $auth->acl_get('m_report', $topic_info['forum_id'])),			'S_POST_UNAPPROVED'	=> (!$row['post_approved'] && $auth->acl_get('m_approve', $topic_info['forum_id'])),			'S_CHECKED'			=> (($submitted_id_list && !in_array(intval($row['post_id']), $submitted_id_list)) || in_array(intval($row['post_id']), $checked_ids)) ? true : false,			'S_HAS_ATTACHMENTS'	=> (!empty($attachments[$row['post_id']])) ? true : false,			'U_POST_DETAILS'	=> "$url&amp;i=$id&amp;p={$row['post_id']}&amp;mode=post_details" . (($forum_id) ? "&amp;f=$forum_id" : ''),			'U_MCP_APPROVE'		=> ($auth->acl_get('m_approve', $topic_info['forum_id'])) ? append_sid("{$phpbb_root_path}mcp.$phpEx", 'i=queue&amp;mode=approve_details&amp;f=' . $topic_info['forum_id'] . '&amp;p=' . $row['post_id']) : '',			'U_MCP_REPORT'		=> ($auth->acl_get('m_report', $topic_info['forum_id'])) ? append_sid("{$phpbb_root_path}mcp.$phpEx", 'i=reports&amp;mode=report_details&amp;f=' . $topic_info['forum_id'] . '&amp;p=' . $row['post_id']) : '')		);		// Display not already displayed Attachments for this post, we already parsed them. ;)		if (!empty($attachments[$row['post_id']]))		{			foreach ($attachments[$row['post_id']] as $attachment)			{				$template->assign_block_vars('postrow.attachment', array(					'DISPLAY_ATTACHMENT'	=> $attachment)				);			}		}		unset($rowset[$i]);	}	// Display topic icons for split topic	$s_topic_icons = false;	if ($auth->acl_gets('m_split', 'm_merge', (int) $topic_info['forum_id']))	{		include_once($phpbb_root_path . 'includes/functions_posting.' . $phpEx);		$s_topic_icons = posting_gen_topic_icons('', $icon_id);		// Has the user selected a topic for merge?		if ($to_topic_id)		{			$to_topic_info = get_topic_data(array($to_topic_id), 'm_merge');			if (!sizeof($to_topic_info))			{				$to_topic_id = 0;			}			else			{				$to_topic_info = $to_topic_info[$to_topic_id];				if (!$to_topic_info['enable_icons'] || $auth->acl_get('!f_icons', $topic_info['forum_id']))				{					$s_topic_icons = false;				}			}		}	}	$s_hidden_fields = build_hidden_fields(array(		'st_old'	=> $sort_days,		'post_ids'	=> $post_id_list,	));	$template->assign_vars(array(		'TOPIC_TITLE'		=> $topic_info['topic_title'],		'U_VIEW_TOPIC'		=> append_sid("{$phpbb_root_path}viewtopic.$phpEx", 'f=' . $topic_info['forum_id'] . '&amp;t=' . $topic_info['topic_id']),		'TO_TOPIC_ID'		=> $to_topic_id,		'TO_TOPIC_INFO'		=> ($to_topic_id) ? sprintf($user->lang['YOU_SELECTED_TOPIC'], $to_topic_id, '<a href="' . append_sid("{$phpbb_root_path}viewtopic.$phpEx", 'f=' . $to_topic_info['forum_id'] . '&amp;t=' . $to_topic_id) . '">' . $to_topic_info['topic_title'] . '</a>') : '',		'SPLIT_SUBJECT'		=> $subject,		'POSTS_PER_PAGE'	=> $posts_per_page,		'ACTION'			=> $action,		'REPORTED_IMG'		=> $user->img('icon_topic_reported', 'POST_REPORTED'),		'UNAPPROVED_IMG'	=> $user->img('icon_topic_unapproved', 'POST_UNAPPROVED'),		'INFO_IMG'			=> $user->img('icon_post_info', 'VIEW_INFO'),		'S_MCP_ACTION'		=> "$url&amp;i=$id&amp;mode=$mode&amp;action=$action&amp;start=$start",		'S_FORUM_SELECT'	=> ($to_forum_id) ? make_forum_select($to_forum_id, false, false, true, true, true) : make_forum_select($topic_info['forum_id'], false, false, true, true, true),		'S_CAN_SPLIT'		=> ($auth->acl_get('m_split', $topic_info['forum_id'])) ? true : false,		'S_CAN_MERGE'		=> ($auth->acl_get('m_merge', $topic_info['forum_id'])) ? true : false,		'S_CAN_DELETE'		=> ($auth->acl_get('m_delete', $topic_info['forum_id'])) ? true : false,		'S_CAN_APPROVE'		=> ($has_unapproved_posts && $auth->acl_get('m_approve', $topic_info['forum_id'])) ? true : false,		'S_CAN_LOCK'		=> ($auth->acl_get('m_lock', $topic_info['forum_id'])) ? true : false,		'S_CAN_REPORT'		=> ($auth->acl_get('m_report', $topic_info['forum_id'])) ? true : false,		'S_REPORT_VIEW'		=> ($action == 'reports') ? true : false,		'S_MERGE_VIEW'		=> ($action == 'merge') ? true : false,		'S_SPLIT_VIEW'		=> ($action == 'split') ? true : false,		'S_HIDDEN_FIELDS'	=> $s_hidden_fields,		'S_SHOW_TOPIC_ICONS'	=> $s_topic_icons,		'S_TOPIC_ICON'			=> $icon_id,		'U_SELECT_TOPIC'	=> "$url&amp;i=$id&amp;mode=forum_view&amp;action=merge_select" . (($forum_id) ? "&amp;f=$forum_id" : ''),		'RETURN_TOPIC'		=> sprintf($user->lang['RETURN_TOPIC'], '<a href="' . append_sid("{$phpbb_root_path}viewtopic.$phpEx", "f={$topic_info['forum_id']}&amp;t={$topic_info['topic_id']}&amp;start=$start") . '">', '</a>'),		'RETURN_FORUM'		=> sprintf($user->lang['RETURN_FORUM'], '<a href="' . append_sid("{$phpbb_root_path}viewforum.$phpEx", "f={$topic_info['forum_id']}&amp;start=$start") . '">', '</a>'),		'PAGE_NUMBER'		=> on_page($total, $posts_per_page, $start),		'PAGINATION'		=> (!$posts_per_page) ? '' : generate_pagination(append_sid("{$phpbb_root_path}mcp.$phpEx", "i=$id&amp;t={$topic_info['topic_id']}&amp;mode=$mode&amp;action=$action&amp;to_topic_id=$to_topic_id&amp;posts_per_page=$posts_per_page&amp;st=$sort_days&amp;sk=$sort_key&amp;sd=$sort_dir"), $total, $posts_per_page, $start),		'TOTAL_POSTS'		=> ($total == 1) ? $user->lang['VIEW_TOPIC_POST'] : sprintf($user->lang['VIEW_TOPIC_POSTS'], $total),	));}/*** Split topic*/function split_topic($action, $topic_id, $to_forum_id, $subject){	global $db, $template, $user, $phpEx, $phpbb_root_path, $auth, $config;	$post_id_list	= request_var('post_id_list', array(0));	$forum_id		= request_var('forum_id', 0);	$start			= request_var('start', 0);	if (!sizeof($post_id_list))	{		$template->assign_var('MESSAGE', $user->lang['NO_POST_SELECTED']);		return;	}	if (!check_ids($post_id_list, POSTS_TABLE, 'post_id', array('m_split')))	{		return;	}	$post_id = $post_id_list[0];	$post_info = get_post_data(array($post_id));	if (!sizeof($post_info))	{		$template->assign_var('MESSAGE', $user->lang['NO_POST_SELECTED']);		return;	}	$post_info = $post_info[$post_id];	$subject = trim($subject);	// Make some tests	if (!$subject)	{		$template->assign_var('MESSAGE', $user->lang['EMPTY_SUBJECT']);		return;	}	if ($to_forum_id <= 0)	{		$template->assign_var('MESSAGE', $user->lang['NO_DESTINATION_FORUM']);		return;	}	$forum_info = get_forum_data(array($to_forum_id), 'f_post');	if (!sizeof($forum_info))	{		$template->assign_var('MESSAGE', $user->lang['USER_CANNOT_POST']);		return;	}	$forum_info = $forum_info[$to_forum_id];	if ($forum_info['forum_type'] != FORUM_POST)	{		$template->assign_var('MESSAGE', $user->lang['FORUM_NOT_POSTABLE']);		return;	}	$redirect = request_var('redirect', build_url(array('quickmod')));	$s_hidden_fields = build_hidden_fields(array(		'i'				=> 'main',		'post_id_list'	=> $post_id_list,		'f'				=> $forum_id,		'mode'			=> 'topic_view',		'start'			=> $start,		'action'		=> $action,		't'				=> $topic_id,		'redirect'		=> $redirect,		'subject'		=> $subject,		'to_forum_id'	=> $to_forum_id,		'icon'			=> request_var('icon', 0))	);	$success_msg = $return_link = '';	if (confirm_box(true))	{		if ($action == 'split_beyond')		{			$sort_days = $total = 0;			$sort_key = $sort_dir = '';			$sort_by_sql = $sort_order_sql = array();			mcp_sorting('viewtopic', $sort_days, $sort_key, $sort_dir, $sort_by_sql, $sort_order_sql, $total, $forum_id, $topic_id);			$limit_time_sql = ($sort_days) ? 'AND t.topic_last_post_time >= ' . (time() - ($sort_days * 86400)) : '';			if ($sort_order_sql[0] == 'u')			{				$sql = 'SELECT p.post_id, p.forum_id, p.post_approved					FROM ' . POSTS_TABLE . ' p, ' . USERS_TABLE . " u					WHERE p.topic_id = $topic_id						AND p.poster_id = u.user_id						$limit_time_sql					ORDER BY $sort_order_sql";			}			else			{				$sql = 'SELECT p.post_id, p.forum_id, p.post_approved					FROM ' . POSTS_TABLE . " p					WHERE p.topic_id = $topic_id						$limit_time_sql					ORDER BY $sort_order_sql";			}			$result = $db->sql_query_limit($sql, 0, $start);			$store = false;			$post_id_list = array();			while ($row = $db->sql_fetchrow($result))			{				// If split from selected post (split_beyond), we split the unapproved items too.				if (!$row['post_approved'] && !$auth->acl_get('m_approve', $row['forum_id']))				{//					continue;				}				// Start to store post_ids as soon as we see the first post that was selected				if ($row['post_id'] == $post_id)				{					$store = true;				}				if ($store)				{					$post_id_list[] = $row['post_id'];				}			}			$db->sql_freeresult($result);		}		if (!sizeof($post_id_list))		{			trigger_error('NO_POST_SELECTED');		}		$icon_id = request_var('icon', 0);		$sql_ary = array(			'forum_id'		=> $to_forum_id,			'topic_title'	=> $subject,			'icon_id'		=> $icon_id,			'topic_approved'=> 1		);		$sql = 'INSERT INTO ' . TOPICS_TABLE . ' ' . $db->sql_build_array('INSERT', $sql_ary);		$db->sql_query($sql);		$to_topic_id = $db->sql_nextid();		move_posts($post_id_list, $to_topic_id);		$topic_info = get_topic_data(array($topic_id));		$topic_info = $topic_info[$topic_id];		add_log('mod', $to_forum_id, $to_topic_id, 'LOG_SPLIT_DESTINATION', $subject);		add_log('mod', $forum_id, $topic_id, 'LOG_SPLIT_SOURCE', $topic_info['topic_title']);		// Change topic title of first post		$sql = 'UPDATE ' . POSTS_TABLE . "			SET post_subject = '" . $db->sql_escape($subject) . "'			WHERE post_id = {$post_id_list[0]}";		$db->sql_query($sql);		$success_msg = 'TOPIC_SPLIT_SUCCESS';		// Update forum statistics		set_config_count('num_topics', 1, true);		// Link back to both topics		$return_link = sprintf($user->lang['RETURN_TOPIC'], '<a href="' . append_sid("{$phpbb_root_path}viewtopic.$phpEx", 'f=' . $post_info['forum_id'] . '&amp;t=' . $post_info['topic_id']) . '">', '</a>') . '<br /><br />' . sprintf($user->lang['RETURN_NEW_TOPIC'], '<a href="' . append_sid("{$phpbb_root_path}viewtopic.$phpEx", 'f=' . $to_forum_id . '&amp;t=' . $to_topic_id) . '">', '</a>');	}	else	{		confirm_box(false, ($action == 'split_all') ? 'SPLIT_TOPIC_ALL' : 'SPLIT_TOPIC_BEYOND', $s_hidden_fields);	}	$redirect = request_var('redirect', "index.$phpEx");	$redirect = reapply_sid($redirect);	if (!$success_msg)	{		return;	}	else	{		meta_refresh(3, append_sid("{$phpbb_root_path}viewtopic.$phpEx", "f=$to_forum_id&amp;t=$to_topic_id"));		trigger_error($user->lang[$success_msg] . '<br /><br />' . $return_link);	}}/*** Merge selected posts into selected topic*/function merge_posts($topic_id, $to_topic_id){	global $db, $template, $user, $phpEx, $phpbb_root_path, $auth;	if (!$to_topic_id)	{		$template->assign_var('MESSAGE', $user->lang['NO_FINAL_TOPIC_SELECTED']);		return;	}	$topic_data = get_topic_data(array($to_topic_id), 'm_merge');	if (!sizeof($topic_data))	{		$template->assign_var('MESSAGE', $user->lang['NO_FINAL_TOPIC_SELECTED']);		return;	}	$topic_data = $topic_data[$to_topic_id];	$post_id_list	= request_var('post_id_list', array(0));	$start			= request_var('start', 0);	if (!sizeof($post_id_list))	{		$template->assign_var('MESSAGE', $user->lang['NO_POST_SELECTED']);		return;	}	if (!check_ids($post_id_list, POSTS_TABLE, 'post_id', array('m_merge')))	{		return;	}	$redirect = request_var('redirect', build_url(array('quickmod')));	$s_hidden_fields = build_hidden_fields(array(		'i'				=> 'main',		'post_id_list'	=> $post_id_list,		'to_topic_id'	=> $to_topic_id,		'mode'			=> 'topic_view',		'action'		=> 'merge_posts',		'start'			=> $start,		'redirect'		=> $redirect,		't'				=> $topic_id)	);	$success_msg = $return_link = '';	if (confirm_box(true))	{		$to_forum_id = $topic_data['forum_id'];		move_posts($post_id_list, $to_topic_id);		add_log('mod', $to_forum_id, $to_topic_id, 'LOG_MERGE', $topic_data['topic_title']);		// Message and return links		$success_msg = 'POSTS_MERGED_SUCCESS';		// Does the original topic still exist? If yes, link back to it		$sql = 'SELECT forum_id			FROM ' . TOPICS_TABLE . '			WHERE topic_id = ' . $topic_id;		$result = $db->sql_query_limit($sql, 1);		$row = $db->sql_fetchrow($result);		$db->sql_freeresult($result);		if ($row)		{			$return_link .= sprintf($user->lang['RETURN_TOPIC'], '<a href="' . append_sid("{$phpbb_root_path}viewtopic.$phpEx", 'f=' . $row['forum_id'] . '&amp;t=' . $topic_id) . '">', '</a>');		}		else		{			// If the topic no longer exist, we will update the topic watch table.			// To not let it error out on users watching both topics, we just return on an error...			$db->sql_return_on_error(true);			$db->sql_query('UPDATE ' . TOPICS_WATCH_TABLE . ' SET topic_id = ' . (int) $to_topic_id . ' WHERE topic_id = ' . (int) $topic_id);			$db->sql_return_on_error(false);			$db->sql_query('DELETE FROM ' . TOPICS_WATCH_TABLE . ' WHERE topic_id = ' . (int) $topic_id);		}		// Link to the new topic		$return_link .= (($return_link) ? '<br /><br />' : '') . sprintf($user->lang['RETURN_NEW_TOPIC'], '<a href="' . append_sid("{$phpbb_root_path}viewtopic.$phpEx", 'f=' . $to_forum_id . '&amp;t=' . $to_topic_id) . '">', '</a>');	}	else	{		confirm_box(false, 'MERGE_POSTS', $s_hidden_fields);	}	$redirect = request_var('redirect', "index.$phpEx");	$redirect = reapply_sid($redirect);	if (!$success_msg)	{		return;	}	else	{		meta_refresh(3, append_sid("{$phpbb_root_path}viewtopic.$phpEx", "f=$to_forum_id&amp;t=$to_topic_id"));		trigger_error($user->lang[$success_msg] . '<br /><br />' . $return_link);	}}?>
<?php/**** @package mcp* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @ignore*/if (!defined('IN_PHPBB')){	exit;}/*** mcp_warn* Handling warning the users* @package mcp*/class mcp_warn{	var $p_master;	var $u_action;	function mcp_warn(&$p_master)	{		$this->p_master = &$p_master;	}	function main($id, $mode)	{		global $auth, $db, $user, $template;		global $config, $phpbb_root_path, $phpEx;		$action = request_var('action', array('' => ''));		if (is_array($action))		{			list($action, ) = each($action);		}		$this->page_title = 'MCP_WARN';		add_form_key('mcp_warn');		switch ($mode)		{			case 'front':				$this->mcp_warn_front_view();				$this->tpl_name = 'mcp_warn_front';			break;			case 'list':				$this->mcp_warn_list_view($action);				$this->tpl_name = 'mcp_warn_list';			break;			case 'warn_post':				$this->mcp_warn_post_view($action);				$this->tpl_name = 'mcp_warn_post';			break;			case 'warn_user':				$this->mcp_warn_user_view($action);				$this->tpl_name = 'mcp_warn_user';			break;		}	}	/**	* Generates the summary on the main page of the warning module	*/	function mcp_warn_front_view()	{		global $phpEx, $phpbb_root_path, $config;		global $template, $db, $user, $auth;		$template->assign_vars(array(			'U_FIND_USERNAME'	=> append_sid("{$phpbb_root_path}memberlist.$phpEx", 'mode=searchuser&amp;form=mcp&amp;field=username&amp;select_single=true'),			'U_POST_ACTION'		=> append_sid("{$phpbb_root_path}mcp.$phpEx", 'i=warn&amp;mode=warn_user'),		));		// Obtain a list of the 5 naughtiest users....		// These are the 5 users with the highest warning count		$highest = array();		$count = 0;		view_warned_users($highest, $count, 5);		foreach ($highest as $row)		{			$template->assign_block_vars('highest', array(				'U_NOTES'		=> append_sid("{$phpbb_root_path}mcp.$phpEx", 'i=notes&amp;mode=user_notes&amp;u=' . $row['user_id']),				'USERNAME_FULL'		=> get_username_string('full', $row['user_id'], $row['username'], $row['user_colour']),				'USERNAME'			=> $row['username'],				'USERNAME_COLOUR'	=> ($row['user_colour']) ? '#' . $row['user_colour'] : '',				'U_USER'			=> append_sid("{$phpbb_root_path}memberlist.$phpEx", 'mode=viewprofile&amp;u=' . $row['user_id']),				'WARNING_TIME'	=> $user->format_date($row['user_last_warning']),				'WARNINGS'		=> $row['user_warnings'],			));		}		// And now the 5 most recent users to get in trouble		$sql = 'SELECT u.user_id, u.username, u.username_clean, u.user_colour, u.user_warnings, w.warning_time			FROM ' . USERS_TABLE . ' u, ' . WARNINGS_TABLE . ' w			WHERE u.user_id = w.user_id			ORDER BY w.warning_time DESC';		$result = $db->sql_query_limit($sql, 5);		while ($row = $db->sql_fetchrow($result))		{			$template->assign_block_vars('latest', array(				'U_NOTES'		=> append_sid("{$phpbb_root_path}mcp.$phpEx", 'i=notes&amp;mode=user_notes&amp;u=' . $row['user_id']),				'USERNAME_FULL'		=> get_username_string('full', $row['user_id'], $row['username'], $row['user_colour']),				'USERNAME'			=> $row['username'],				'USERNAME_COLOUR'	=> ($row['user_colour']) ? '#' . $row['user_colour'] : '',				'U_USER'			=> append_sid("{$phpbb_root_path}memberlist.$phpEx", 'mode=viewprofile&amp;u=' . $row['user_id']),				'WARNING_TIME'	=> $user->format_date($row['warning_time']),				'WARNINGS'		=> $row['user_warnings'],			));		}		$db->sql_freeresult($result);	}	/**	* Lists all users with warnings	*/	function mcp_warn_list_view($action)	{		global $phpEx, $phpbb_root_path, $config;		global $template, $db, $user, $auth;		$user->add_lang('memberlist');		$start	= request_var('start', 0);		$st		= request_var('st', 0);		$sk		= request_var('sk', 'b');		$sd		= request_var('sd', 'd');		$limit_days = array(0 => $user->lang['ALL_ENTRIES'], 1 => $user->lang['1_DAY'], 7 => $user->lang['7_DAYS'], 14 => $user->lang['2_WEEKS'], 30 => $user->lang['1_MONTH'], 90 => $user->lang['3_MONTHS'], 180 => $user->lang['6_MONTHS'], 365 => $user->lang['1_YEAR']);		$sort_by_text = array('a' => $user->lang['SORT_USERNAME'], 'b' => $user->lang['SORT_DATE'], 'c' => $user->lang['SORT_WARNINGS']);		$sort_by_sql = array('a' => 'username_clean', 'b' => 'user_last_warning', 'c' => 'user_warnings');		$s_limit_days = $s_sort_key = $s_sort_dir = $u_sort_param = '';		gen_sort_selects($limit_days, $sort_by_text, $st, $sk, $sd, $s_limit_days, $s_sort_key, $s_sort_dir, $u_sort_param);		// Define where and sort sql for use in displaying logs		$sql_where = ($st) ? (time() - ($st * 86400)) : 0;		$sql_sort = $sort_by_sql[$sk] . ' ' . (($sd == 'd') ? 'DESC' : 'ASC');		$users = array();		$user_count = 0;		view_warned_users($users, $user_count, $config['topics_per_page'], $start, $sql_where, $sql_sort);		foreach ($users as $row)		{			$template->assign_block_vars('user', array(				'U_NOTES'		=> append_sid("{$phpbb_root_path}mcp.$phpEx", 'i=notes&amp;mode=user_notes&amp;u=' . $row['user_id']),				'USERNAME_FULL'		=> get_username_string('full', $row['user_id'], $row['username'], $row['user_colour']),				'USERNAME'			=> $row['username'],				'USERNAME_COLOUR'	=> ($row['user_colour']) ? '#' . $row['user_colour'] : '',				'U_USER'			=> append_sid("{$phpbb_root_path}memberlist.$phpEx", 'mode=viewprofile&amp;u=' . $row['user_id']),				'WARNING_TIME'	=> $user->format_date($row['user_last_warning']),				'WARNINGS'		=> $row['user_warnings'],			));		}		$template->assign_vars(array(			'U_POST_ACTION'			=> $this->u_action,			'S_CLEAR_ALLOWED'		=> ($auth->acl_get('a_clearlogs')) ? true : false,			'S_SELECT_SORT_DIR'		=> $s_sort_dir,			'S_SELECT_SORT_KEY'		=> $s_sort_key,			'S_SELECT_SORT_DAYS'	=> $s_limit_days,			'PAGE_NUMBER'		=> on_page($user_count, $config['topics_per_page'], $start),			'PAGINATION'		=> generate_pagination(append_sid("{$phpbb_root_path}mcp.$phpEx", "i=warn&amp;mode=list&amp;st=$st&amp;sk=$sk&amp;sd=$sd"), $user_count, $config['topics_per_page'], $start),			'TOTAL_USERS'		=> ($user_count == 1) ? $user->lang['LIST_USER'] : sprintf($user->lang['LIST_USERS'], $user_count),		));	}	/**	* Handles warning the user when the warning is for a specific post	*/	function mcp_warn_post_view($action)	{		global $phpEx, $phpbb_root_path, $config;		global $template, $db, $user, $auth;		$post_id = request_var('p', 0);		$forum_id = request_var('f', 0);		$notify = (isset($_REQUEST['notify_user'])) ? true : false;		$warning = utf8_normalize_nfc(request_var('warning', '', true));		$sql = 'SELECT u.*, p.*			FROM ' . POSTS_TABLE . ' p, ' . USERS_TABLE . " u			WHERE p.post_id = $post_id				AND u.user_id = p.poster_id";		$result = $db->sql_query($sql);		$user_row = $db->sql_fetchrow($result);		$db->sql_freeresult($result);		if (!$user_row)		{			trigger_error('NO_POST');		}		// There is no point issuing a warning to ignored users (ie anonymous and bots)		if ($user_row['user_type'] == USER_IGNORE)		{			trigger_error('CANNOT_WARN_ANONYMOUS');		}		// Prevent someone from warning themselves		if ($user_row['user_id'] == $user->data['user_id'])		{			trigger_error('CANNOT_WARN_SELF');		}		// Check if there is already a warning for this post to prevent multiple		// warnings for the same offence		$sql = 'SELECT post_id			FROM ' . WARNINGS_TABLE . "			WHERE post_id = $post_id";		$result = $db->sql_query($sql);		$row = $db->sql_fetchrow($result);		$db->sql_freeresult($result);		if ($row)		{			trigger_error('ALREADY_WARNED');		}		$user_id = $user_row['user_id'];		if (strpos($this->u_action, "&amp;f=$forum_id&amp;p=$post_id") === false)		{			$this->p_master->adjust_url("&amp;f=$forum_id&amp;p=$post_id");			$this->u_action .= "&amp;f=$forum_id&amp;p=$post_id";		}		// Check if can send a notification		if ($config['allow_privmsg'])		{			$auth2 = new auth();			$auth2->acl($user_row);			$s_can_notify = ($auth2->acl_get('u_readpm')) ? true : false;			unset($auth2);		}		else		{			$s_can_notify = false;		}		// Prevent against clever people		if ($notify && !$s_can_notify)		{			$notify = false;		}		if ($warning && $action == 'add_warning')		{			if (check_form_key('mcp_warn'))			{				add_warning($user_row, $warning, $notify, $post_id);				$msg = $user->lang['USER_WARNING_ADDED'];			}			else			{				$msg = $user->lang['FORM_INVALID'];			}			$redirect = append_sid("{$phpbb_root_path}mcp.$phpEx", "i=notes&amp;mode=user_notes&amp;u=$user_id");			meta_refresh(2, $redirect);			trigger_error($msg . '<br /><br />' . sprintf($user->lang['RETURN_PAGE'], '<a href="' . $redirect . '">', '</a>'));		}		// OK, they didn't submit a warning so lets build the page for them to do so		// We want to make the message available here as a reminder		// Parse the message and subject		$message = censor_text($user_row['post_text']);		// Second parse bbcode here		if ($user_row['bbcode_bitfield'])		{			include_once($phpbb_root_path . 'includes/bbcode.' . $phpEx);			$bbcode = new bbcode($user_row['bbcode_bitfield']);			$bbcode->bbcode_second_pass($message, $user_row['bbcode_uid'], $user_row['bbcode_bitfield']);		}		$message = bbcode_nl2br($message);		$message = smiley_text($message);		// Generate the appropriate user information for the user we are looking at		if (!function_exists('get_user_avatar'))		{			include($phpbb_root_path . 'includes/functions_display.' . $phpEx);		}		$rank_title = $rank_img = '';		$avatar_img = get_user_avatar($user_row['user_avatar'], $user_row['user_avatar_type'], $user_row['user_avatar_width'], $user_row['user_avatar_height']);		$template->assign_vars(array(			'U_POST_ACTION'		=> $this->u_action,			'POST'				=> $message,			'USERNAME'			=> $user_row['username'],			'USER_COLOR'		=> (!empty($user_row['user_colour'])) ? $user_row['user_colour'] : '',			'RANK_TITLE'		=> $rank_title,			'JOINED'			=> $user->format_date($user_row['user_regdate']),			'POSTS'				=> ($user_row['user_posts']) ? $user_row['user_posts'] : 0,			'WARNINGS'			=> ($user_row['user_warnings']) ? $user_row['user_warnings'] : 0,			'AVATAR_IMG'		=> $avatar_img,			'RANK_IMG'			=> $rank_img,			'L_WARNING_POST_DEFAULT'	=> sprintf($user->lang['WARNING_POST_DEFAULT'], generate_board_url() . "/viewtopic.$phpEx?f=$forum_id&amp;p=$post_id#p$post_id"),			'S_CAN_NOTIFY'		=> $s_can_notify,		));	}	/**	* Handles warning the user	*/	function mcp_warn_user_view($action)	{		global $phpEx, $phpbb_root_path, $config, $module;		global $template, $db, $user, $auth;		$user_id = request_var('u', 0);		$username = request_var('username', '', true);		$notify = (isset($_REQUEST['notify_user'])) ? true : false;		$warning = utf8_normalize_nfc(request_var('warning', '', true));		$sql_where = ($user_id) ? "user_id = $user_id" : "username_clean = '" . $db->sql_escape(utf8_clean_string($username)) . "'";		$sql = 'SELECT *			FROM ' . USERS_TABLE . '			WHERE ' . $sql_where;		$result = $db->sql_query($sql);		$user_row = $db->sql_fetchrow($result);		$db->sql_freeresult($result);		if (!$user_row)		{			trigger_error('NO_USER');		}		// Prevent someone from warning themselves		if ($user_row['user_id'] == $user->data['user_id'])		{			trigger_error('CANNOT_WARN_SELF');		}		$user_id = $user_row['user_id'];		if (strpos($this->u_action, "&amp;u=$user_id") === false)		{			$this->p_master->adjust_url('&amp;u=' . $user_id);			$this->u_action .= "&amp;u=$user_id";		}		// Check if can send a notification		if ($config['allow_privmsg'])		{			$auth2 = new auth();			$auth2->acl($user_row);			$s_can_notify = ($auth2->acl_get('u_readpm')) ? true : false;			unset($auth2);		}		else		{			$s_can_notify = false;		}		// Prevent against clever people		if ($notify && !$s_can_notify)		{			$notify = false;		}		if ($warning && $action == 'add_warning')		{			if (check_form_key('mcp_warn'))			{				add_warning($user_row, $warning, $notify);				$msg = $user->lang['USER_WARNING_ADDED'];			}			else			{				$msg = $user->lang['FORM_INVALID'];			}			$redirect = append_sid("{$phpbb_root_path}mcp.$phpEx", "i=notes&amp;mode=user_notes&amp;u=$user_id");			meta_refresh(2, $redirect);			trigger_error($msg . '<br /><br />' . sprintf($user->lang['RETURN_PAGE'], '<a href="' . $redirect . '">', '</a>'));		}		// Generate the appropriate user information for the user we are looking at		if (!function_exists('get_user_avatar'))		{			include($phpbb_root_path . 'includes/functions_display.' . $phpEx);		}		$rank_title = $rank_img = '';		$avatar_img = get_user_avatar($user_row['user_avatar'], $user_row['user_avatar_type'], $user_row['user_avatar_width'], $user_row['user_avatar_height']);		// OK, they didn't submit a warning so lets build the page for them to do so		$template->assign_vars(array(			'U_POST_ACTION'		=> $this->u_action,			'RANK_TITLE'		=> $rank_title,			'JOINED'			=> $user->format_date($user_row['user_regdate']),			'POSTS'				=> ($user_row['user_posts']) ? $user_row['user_posts'] : 0,			'WARNINGS'			=> ($user_row['user_warnings']) ? $user_row['user_warnings'] : 0,			'USERNAME_FULL'		=> get_username_string('full', $user_row['user_id'], $user_row['username'], $user_row['user_colour']),			'USERNAME_COLOUR'	=> get_username_string('colour', $user_row['user_id'], $user_row['username'], $user_row['user_colour']),			'USERNAME'			=> get_username_string('username', $user_row['user_id'], $user_row['username'], $user_row['user_colour']),			'U_PROFILE'			=> get_username_string('profile', $user_row['user_id'], $user_row['username'], $user_row['user_colour']),			'AVATAR_IMG'		=> $avatar_img,			'RANK_IMG'			=> $rank_img,			'S_CAN_NOTIFY'		=> $s_can_notify,		));		return $user_id;	}}/*** Insert the warning into the database*/function add_warning($user_row, $warning, $send_pm = true, $post_id = 0){	global $phpEx, $phpbb_root_path, $config;	global $template, $db, $user, $auth;	if ($send_pm)	{		include_once($phpbb_root_path . 'includes/functions_privmsgs.' . $phpEx);		include_once($phpbb_root_path . 'includes/message_parser.' . $phpEx);		$user_row['user_lang'] = (file_exists($phpbb_root_path . 'language/' . $user_row['user_lang'] . "/mcp.$phpEx")) ? $user_row['user_lang'] : $config['default_lang'];		include($phpbb_root_path . 'language/' . basename($user_row['user_lang']) . "/mcp.$phpEx");		$message_parser = new parse_message();		$message_parser->message = sprintf($lang['WARNING_PM_BODY'], $warning);		$message_parser->parse(true, true, true, false, false, true, true);		$pm_data = array(			'from_user_id'			=> $user->data['user_id'],			'from_user_ip'			=> $user->ip,			'from_username'			=> $user->data['username'],			'enable_sig'			=> false,			'enable_bbcode'			=> true,			'enable_smilies'		=> true,			'enable_urls'			=> false,			'icon_id'				=> 0,			'bbcode_bitfield'		=> $message_parser->bbcode_bitfield,			'bbcode_uid'			=> $message_parser->bbcode_uid,			'message'				=> $message_parser->message,			'address_list'			=> array('u' => array($user_row['user_id'] => 'to')),		);		submit_pm('post', $lang['WARNING_PM_SUBJECT'], $pm_data, false);	}	add_log('admin', 'LOG_USER_WARNING', $user_row['username']);	$log_id = add_log('user', $user_row['user_id'], 'LOG_USER_WARNING_BODY', $warning);	$sql_ary = array(		'user_id'		=> $user_row['user_id'],		'post_id'		=> $post_id,		'log_id'		=> $log_id,		'warning_time'	=> time(),	);	$db->sql_query('INSERT INTO ' . WARNINGS_TABLE . ' ' . $db->sql_build_array('INSERT', $sql_ary));	$sql = 'UPDATE ' . USERS_TABLE . '		SET user_warnings = user_warnings + 1,			user_last_warning = ' . time() . '		WHERE user_id = ' . $user_row['user_id'];	$db->sql_query($sql);	// We add this to the mod log too for moderators to see that a specific user got warned.	$sql = 'SELECT forum_id, topic_id		FROM ' . POSTS_TABLE . '		WHERE post_id = ' . $post_id;	$result = $db->sql_query($sql);	$row = $db->sql_fetchrow($result);	$db->sql_freeresult($result);	add_log('mod', $row['forum_id'], $row['topic_id'], 'LOG_USER_WARNING', $user_row['username']);}?>
<?php/**** @package dbal* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @ignore*/if (!defined('IN_PHPBB')){	exit;}include_once($phpbb_root_path . 'includes/db/dbal.' . $phpEx);/*** Unified ODBC functions* Unified ODBC functions support any database having ODBC driver, for example Adabas D, IBM DB2, iODBC, Solid, Sybase SQL Anywhere...* Here we only support MSSQL Server 2000+ because of the provided schema** @note number of bytes returned for returning data depends on odbc.defaultlrl php.ini setting.* If it is limited to 4K for example only 4K of data is returned max, resulting in incomplete theme data for example.* @note odbc.defaultbinmode may affect UTF8 characters** @package dbal*/class dbal_mssql_odbc extends dbal{	var $last_query_text = '';	/**	* Connect to server	*/	function sql_connect($sqlserver, $sqluser, $sqlpassword, $database, $port = false, $persistency = false, $new_link = false)	{		$this->persistency = $persistency;		$this->user = $sqluser;		$this->dbname = $database;		$port_delimiter = (defined('PHP_OS') && substr(PHP_OS, 0, 3) === 'WIN') ? ',' : ':';		$this->server = $sqlserver . (($port) ? $port_delimiter . $port : '');		$max_size = @ini_get('odbc.defaultlrl');		if (!empty($max_size))		{			$unit = strtolower(substr($max_size, -1, 1));			$max_size = (int) $max_size;			if ($unit == 'k')			{				$max_size = floor($max_size / 1024);			}			else if ($unit == 'g')			{				$max_size *= 1024;			}			else if (is_numeric($unit))			{				$max_size = floor((int) ($max_size . $unit) / 1048576);			}			$max_size = max(8, $max_size) . 'M';			@ini_set('odbc.defaultlrl', $max_size);		}		$this->db_connect_id = ($this->persistency) ? @odbc_pconnect($this->server, $this->user, $sqlpassword) : @odbc_connect($this->server, $this->user, $sqlpassword);		return ($this->db_connect_id) ? $this->db_connect_id : $this->sql_error('');	}	/**	* Version information about used database	* @param bool $raw if true, only return the fetched sql_server_version	* @param bool $use_cache If true, it is safe to retrieve the value from the cache	* @return string sql server version	*/	function sql_server_info($raw = false, $use_cache = true)	{		global $cache;		if (!$use_cache || empty($cache) || ($this->sql_server_version = $cache->get('mssqlodbc_version')) === false)		{			$result_id = @odbc_exec($this->db_connect_id, "SELECT SERVERPROPERTY('productversion'), SERVERPROPERTY('productlevel'), SERVERPROPERTY('edition')");			$row = false;			if ($result_id)			{				$row = @odbc_fetch_array($result_id);				@odbc_free_result($result_id);			}			$this->sql_server_version = ($row) ? trim(implode(' ', $row)) : 0;			if (!empty($cache) && $use_cache)			{				$cache->put('mssqlodbc_version', $this->sql_server_version);			}		}		if ($raw)		{			return $this->sql_server_version;		}		return ($this->sql_server_version) ? 'MSSQL (ODBC)<br />' . $this->sql_server_version : 'MSSQL (ODBC)';	}	/**	* SQL Transaction	* @access private	*/	function _sql_transaction($status = 'begin')	{		switch ($status)		{			case 'begin':				return @odbc_exec($this->db_connect_id, 'BEGIN TRANSACTION');			break;			case 'commit':				return @odbc_exec($this->db_connect_id, 'COMMIT TRANSACTION');			break;			case 'rollback':				return @odbc_exec($this->db_connect_id, 'ROLLBACK TRANSACTION');			break;		}		return true;	}	/**	* Base query method	*	* @param	string	$query		Contains the SQL query which shall be executed	* @param	int		$cache_ttl	Either 0 to avoid caching or the time in seconds which the result shall be kept in cache	* @return	mixed				When casted to bool the returned value returns true on success and false on failure	*	* @access	public	*/	function sql_query($query = '', $cache_ttl = 0)	{		if ($query != '')		{			global $cache;			// EXPLAIN only in extra debug mode			if (defined('DEBUG_EXTRA'))			{				$this->sql_report('start', $query);			}			$this->last_query_text = $query;			$this->query_result = ($cache_ttl && method_exists($cache, 'sql_load')) ? $cache->sql_load($query) : false;			$this->sql_add_num_queries($this->query_result);			if ($this->query_result === false)			{				if (($this->query_result = @odbc_exec($this->db_connect_id, $query)) === false)				{					$this->sql_error($query);				}				if (defined('DEBUG_EXTRA'))				{					$this->sql_report('stop', $query);				}				if ($cache_ttl && method_exists($cache, 'sql_save'))				{					$this->open_queries[(int) $this->query_result] = $this->query_result;					$cache->sql_save($query, $this->query_result, $cache_ttl);				}				else if (strpos($query, 'SELECT') === 0 && $this->query_result)				{					$this->open_queries[(int) $this->query_result] = $this->query_result;				}			}			else if (defined('DEBUG_EXTRA'))			{				$this->sql_report('fromcache', $query);			}		}		else		{			return false;		}		return $this->query_result;	}	/**	* Build LIMIT query	*/	function _sql_query_limit($query, $total, $offset = 0, $cache_ttl = 0)	{		$this->query_result = false;		// Since TOP is only returning a set number of rows we won't need it if total is set to 0 (return all rows)		if ($total)		{			// We need to grab the total number of rows + the offset number of rows to get the correct result			if (strpos($query, 'SELECT DISTINCT') === 0)			{				$query = 'SELECT DISTINCT TOP ' . ($total + $offset) . ' ' . substr($query, 15);			}			else			{				$query = 'SELECT TOP ' . ($total + $offset) . ' ' . substr($query, 6);			}		}		$result = $this->sql_query($query, $cache_ttl);		// Seek by $offset rows		if ($offset)		{			$this->sql_rowseek($offset, $result);		}		return $result;	}	/**	* Return number of affected rows	*/	function sql_affectedrows()	{		return ($this->db_connect_id) ? @odbc_num_rows($this->query_result) : false;	}	/**	* Fetch current row	* @note number of bytes returned depends on odbc.defaultlrl php.ini setting. If it is limited to 4K for example only 4K of data is returned max.	*/	function sql_fetchrow($query_id = false, $debug = false)	{		global $cache;		if ($query_id === false)		{			$query_id = $this->query_result;		}		if (isset($cache->sql_rowset[$query_id]))		{			return $cache->sql_fetchrow($query_id);		}		return ($query_id !== false) ? @odbc_fetch_array($query_id) : false;	}	/**	* Seek to given row number	* rownum is zero-based	*/	function sql_rowseek($rownum, &$query_id)	{		global $cache;		if ($query_id === false)		{			$query_id = $this->query_result;		}		if (isset($cache->sql_rowset[$query_id]))		{			return $cache->sql_rowseek($rownum, $query_id);		}		if ($query_id === false)		{			return false;		}		$this->sql_freeresult($query_id);		$query_id = $this->sql_query($this->last_query_text);		if ($query_id === false)		{			return false;		}		// We do not fetch the row for rownum == 0 because then the next resultset would be the second row		for ($i = 0; $i < $rownum; $i++)		{			if (!$this->sql_fetchrow($query_id))			{				return false;			}		}		return true;	}	/**	* Get last inserted id after insert statement	*/	function sql_nextid()	{		$result_id = @odbc_exec($this->db_connect_id, 'SELECT @@IDENTITY');		if ($result_id)		{			if (@odbc_fetch_array($result_id))			{				$id = @odbc_result($result_id, 1);				@odbc_free_result($result_id);				return $id;			}			@odbc_free_result($result_id);		}		return false;	}	/**	* Free sql result	*/	function sql_freeresult($query_id = false)	{		global $cache;		if ($query_id === false)		{			$query_id = $this->query_result;		}		if (isset($cache->sql_rowset[$query_id]))		{			return $cache->sql_freeresult($query_id);		}		if (isset($this->open_queries[(int) $query_id]))		{			unset($this->open_queries[(int) $query_id]);			return @odbc_free_result($query_id);		}		return false;	}	/**	* Escape string used in sql query	*/	function sql_escape($msg)	{		return str_replace(array("'", "\0"), array("''", ''), $msg);	}	/**	* Build LIKE expression	* @access private	*/	function _sql_like_expression($expression)	{		return $expression . " ESCAPE '\\'";	}	/**	* Build db-specific query data	* @access private	*/	function _sql_custom_build($stage, $data)	{		return $data;	}	/**	* return sql error array	* @access private	*/	function _sql_error()	{		return array(			'message'	=> @odbc_errormsg(),			'code'		=> @odbc_error()		);	}	/**	* Close sql connection	* @access private	*/	function _sql_close()	{		return @odbc_close($this->db_connect_id);	}	/**	* Build db-specific report	* @access private	*/	function _sql_report($mode, $query = '')	{		switch ($mode)		{			case 'start':			break;			case 'fromcache':				$endtime = explode(' ', microtime());				$endtime = $endtime[0] + $endtime[1];				$result = @odbc_exec($this->db_connect_id, $query);				while ($void = @odbc_fetch_array($result))				{					// Take the time spent on parsing rows into account				}				@odbc_free_result($result);				$splittime = explode(' ', microtime());				$splittime = $splittime[0] + $splittime[1];				$this->sql_report('record_fromcache', $query, $endtime, $splittime);			break;		}	}}?>
<?php/**** @package phpBB3* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @ignore*/if (!defined('IN_PHPBB')){	exit;}/*** Fill smiley templates (or just the variables) with smilies, either in a window or inline*/function generate_smilies($mode, $forum_id){	global $auth, $db, $user, $config, $template;	global $phpEx, $phpbb_root_path;	$start = request_var('start', 0);	if ($mode == 'window')	{		if ($forum_id)		{			$sql = 'SELECT forum_style				FROM ' . FORUMS_TABLE . "				WHERE forum_id = $forum_id";			$result = $db->sql_query_limit($sql, 1);			$row = $db->sql_fetchrow($result);			$db->sql_freeresult($result);			$user->setup('posting', (int) $row['forum_style']);		}		else		{			$user->setup('posting');		}		page_header($user->lang['SMILIES']);		$sql = 'SELECT COUNT(smiley_id) AS item_count			FROM ' . SMILIES_TABLE . '			GROUP BY smiley_url';		$result = $db->sql_query($sql, 3600);		$smiley_count = 0;		while ($row = $db->sql_fetchrow($result))		{			++$smiley_count;		}		$db->sql_freeresult($result);		$template->set_filenames(array(			'body' => 'posting_smilies.html')		);		$template->assign_var('PAGINATION',			generate_pagination(append_sid("{$phpbb_root_path}posting.$phpEx", 'mode=smilies&amp;f=' . $forum_id),				$smiley_count, $config['smilies_per_page'], $start, true)		);	}	$display_link = false;	if ($mode == 'inline')	{		$sql = 'SELECT smiley_id			FROM ' . SMILIES_TABLE . '			WHERE display_on_posting = 0';		$result = $db->sql_query_limit($sql, 1, 0, 3600);		if ($row = $db->sql_fetchrow($result))		{			$display_link = true;		}		$db->sql_freeresult($result);	}	if ($mode == 'window')	{		$sql = 'SELECT smiley_url, MIN(emotion) as emotion, MIN(code) AS code, smiley_width, smiley_height, MIN(smiley_order) AS min_smiley_order			FROM ' . SMILIES_TABLE . '			GROUP BY smiley_url, smiley_width, smiley_height			ORDER BY min_smiley_order';		$result = $db->sql_query_limit($sql, $config['smilies_per_page'], $start, 3600);	}	else	{		$sql = 'SELECT *			FROM ' . SMILIES_TABLE . '			WHERE display_on_posting = 1			ORDER BY smiley_order';		$result = $db->sql_query($sql, 3600);	}	$smilies = array();	while ($row = $db->sql_fetchrow($result))	{		if (empty($smilies[$row['smiley_url']]))		{			$smilies[$row['smiley_url']] = $row;		}	}	$db->sql_freeresult($result);	if (sizeof($smilies))	{		$root_path = (defined('PHPBB_USE_BOARD_URL_PATH') && PHPBB_USE_BOARD_URL_PATH) ? generate_board_url() . '/' : $phpbb_root_path;		foreach ($smilies as $row)		{			$template->assign_block_vars('smiley', array(				'SMILEY_CODE'	=> $row['code'],				'A_SMILEY_CODE'	=> addslashes($row['code']),				'SMILEY_IMG'	=> $root_path . $config['smilies_path'] . '/' . $row['smiley_url'],				'SMILEY_WIDTH'	=> $row['smiley_width'],				'SMILEY_HEIGHT'	=> $row['smiley_height'],				'SMILEY_DESC'	=> $row['emotion'])			);		}	}	if ($mode == 'inline' && $display_link)	{		$template->assign_vars(array(			'S_SHOW_SMILEY_LINK' 	=> true,			'U_MORE_SMILIES' 		=> append_sid("{$phpbb_root_path}posting.$phpEx", 'mode=smilies&amp;f=' . $forum_id))		);	}	if ($mode == 'window')	{		page_footer();	}}/*** Update last post information* Should be used instead of sync() if only the last post information are out of sync... faster** @param	string	$type				Can be forum|topic* @param	mixed	$ids				topic/forum ids* @param	bool	$return_update_sql	true: SQL query shall be returned, false: execute SQL*/function update_post_information($type, $ids, $return_update_sql = false){	global $db;	if (empty($ids))	{		return;	}	if (!is_array($ids))	{		$ids = array($ids);	}	$update_sql = $empty_forums = $not_empty_forums = array();	if ($type != 'topic')	{		$topic_join = ', ' . TOPICS_TABLE . ' t';		$topic_condition = 'AND t.topic_id = p.topic_id AND t.topic_approved = 1';	}	else	{		$topic_join = '';		$topic_condition = '';	}	if (sizeof($ids) == 1)	{		$sql = 'SELECT MAX(p.post_id) as last_post_id			FROM ' . POSTS_TABLE . " p $topic_join			WHERE " . $db->sql_in_set('p.' . $type . '_id', $ids) . "				$topic_condition				AND p.post_approved = 1";	}	else	{		$sql = 'SELECT p.' . $type . '_id, MAX(p.post_id) as last_post_id			FROM ' . POSTS_TABLE . " p $topic_join			WHERE " . $db->sql_in_set('p.' . $type . '_id', $ids) . "				$topic_condition				AND p.post_approved = 1			GROUP BY p.{$type}_id";	}	$result = $db->sql_query($sql);	$last_post_ids = array();	while ($row = $db->sql_fetchrow($result))	{		if (sizeof($ids) == 1)		{			$row[$type . '_id'] = $ids[0];		}		if ($type == 'forum')		{			$not_empty_forums[] = $row['forum_id'];			if (empty($row['last_post_id']))			{				$empty_forums[] = $row['forum_id'];			}		}		$last_post_ids[] = $row['last_post_id'];	}	$db->sql_freeresult($result);	if ($type == 'forum')	{		$empty_forums = array_merge($empty_forums, array_diff($ids, $not_empty_forums));		foreach ($empty_forums as $void => $forum_id)		{			$update_sql[$forum_id][] = 'forum_last_post_id = 0';			$update_sql[$forum_id][] = "forum_last_post_subject = ''";			$update_sql[$forum_id][] = 'forum_last_post_time = 0';			$update_sql[$forum_id][] = 'forum_last_poster_id = 0';			$update_sql[$forum_id][] = "forum_last_poster_name = ''";			$update_sql[$forum_id][] = "forum_last_poster_colour = ''";		}	}	if (sizeof($last_post_ids))	{		$sql = 'SELECT p.' . $type . '_id, p.post_id, p.post_subject, p.post_time, p.poster_id, p.post_username, u.user_id, u.username, u.user_colour			FROM ' . POSTS_TABLE . ' p, ' . USERS_TABLE . ' u			WHERE p.poster_id = u.user_id				AND ' . $db->sql_in_set('p.post_id', $last_post_ids);		$result = $db->sql_query($sql);		while ($row = $db->sql_fetchrow($result))		{			$update_sql[$row["{$type}_id"]][] = $type . '_last_post_id = ' . (int) $row['post_id'];			$update_sql[$row["{$type}_id"]][] = "{$type}_last_post_subject = '" . $db->sql_escape($row['post_subject']) . "'";			$update_sql[$row["{$type}_id"]][] = $type . '_last_post_time = ' . (int) $row['post_time'];			$update_sql[$row["{$type}_id"]][] = $type . '_last_poster_id = ' . (int) $row['poster_id'];			$update_sql[$row["{$type}_id"]][] = "{$type}_last_poster_colour = '" . $db->sql_escape($row['user_colour']) . "'";			$update_sql[$row["{$type}_id"]][] = "{$type}_last_poster_name = '" . (($row['poster_id'] == ANONYMOUS) ? $db->sql_escape($row['post_username']) : $db->sql_escape($row['username'])) . "'";		}		$db->sql_freeresult($result);	}	unset($empty_forums, $ids, $last_post_ids);	if ($return_update_sql || !sizeof($update_sql))	{		return $update_sql;	}	$table = ($type == 'forum') ? FORUMS_TABLE : TOPICS_TABLE;	foreach ($update_sql as $update_id => $update_sql_ary)	{		$sql = "UPDATE $table			SET " . implode(', ', $update_sql_ary) . "			WHERE {$type}_id = $update_id";		$db->sql_query($sql);	}	return;}/*** Generate Topic Icons for display*/function posting_gen_topic_icons($mode, $icon_id){	global $phpbb_root_path, $config, $template, $cache;	// Grab icons	$icons = $cache->obtain_icons();	if (!$icon_id)	{		$template->assign_var('S_NO_ICON_CHECKED', ' checked="checked"');	}	if (sizeof($icons))	{		foreach ($icons as $id => $data)		{			if ($data['display'])			{				$template->assign_block_vars('topic_icon', array(					'ICON_ID'		=> $id,					'ICON_IMG'		=> $phpbb_root_path . $config['icons_path'] . '/' . $data['img'],					'ICON_WIDTH'	=> $data['width'],					'ICON_HEIGHT'	=> $data['height'],					'S_CHECKED'			=> ($id == $icon_id) ? true : false,					'S_ICON_CHECKED'	=> ($id == $icon_id) ? ' checked="checked"' : '')				);			}		}		return true;	}	return false;}/*** Build topic types able to be selected*/function posting_gen_topic_types($forum_id, $cur_topic_type = POST_NORMAL){	global $auth, $user, $template, $topic_type;	$toggle = false;	$topic_types = array(		'sticky'	=> array('const' => POST_STICKY, 'lang' => 'POST_STICKY'),		'announce'	=> array('const' => POST_ANNOUNCE, 'lang' => 'POST_ANNOUNCEMENT'),		'global'	=> array('const' => POST_GLOBAL, 'lang' => 'POST_GLOBAL')	);	$topic_type_array = array();	foreach ($topic_types as $auth_key => $topic_value)	{		// We do not have a special post global announcement permission		$auth_key = ($auth_key == 'global') ? 'announce' : $auth_key;		if ($auth->acl_get('f_' . $auth_key, $forum_id))		{			$toggle = true;			$topic_type_array[] = array(				'VALUE'			=> $topic_value['const'],				'S_CHECKED'		=> ($cur_topic_type == $topic_value['const'] || ($forum_id == 0 && $topic_value['const'] == POST_GLOBAL)) ? ' checked="checked"' : '',				'L_TOPIC_TYPE'	=> $user->lang[$topic_value['lang']]			);		}	}	if ($toggle)	{		$topic_type_array = array_merge(array(0 => array(			'VALUE'			=> POST_NORMAL,			'S_CHECKED'		=> ($cur_topic_type == POST_NORMAL) ? ' checked="checked"' : '',			'L_TOPIC_TYPE'	=> $user->lang['POST_NORMAL'])),			$topic_type_array		);		foreach ($topic_type_array as $array)		{			$template->assign_block_vars('topic_type', $array);		}		$template->assign_vars(array(			'S_TOPIC_TYPE_STICKY'	=> ($auth->acl_get('f_sticky', $forum_id)),			'S_TOPIC_TYPE_ANNOUNCE'	=> ($auth->acl_get('f_announce', $forum_id)))		);	}	return $toggle;}//// Attachment related functions///*** Upload Attachment - filedata is generated here* Uses upload class*/function upload_attachment($form_name, $forum_id, $local = false, $local_storage = '', $is_message = false, $local_filedata = false){	global $auth, $user, $config, $db, $cache;	global $phpbb_root_path, $phpEx;	$filedata = array(		'error'	=> array()	);	include_once($phpbb_root_path . 'includes/functions_upload.' . $phpEx);	$upload = new fileupload();	if ($config['check_attachment_content'] && isset($config['mime_triggers']))	{		$upload->set_disallowed_content(explode('|', $config['mime_triggers']));	}	if (!$local)	{		$filedata['post_attach'] = ($upload->is_valid($form_name)) ? true : false;	}	else	{		$filedata['post_attach'] = true;	}	if (!$filedata['post_attach'])	{		$filedata['error'][] = $user->lang['NO_UPLOAD_FORM_FOUND'];		return $filedata;	}	$extensions = $cache->obtain_attach_extensions((($is_message) ? false : (int) $forum_id));	$upload->set_allowed_extensions(array_keys($extensions['_allowed_']));	$file = ($local) ? $upload->local_upload($local_storage, $local_filedata) : $upload->form_upload($form_name);	if ($file->init_error)	{		$filedata['post_attach'] = false;		return $filedata;	}	$cat_id = (isset($extensions[$file->get('extension')]['display_cat'])) ? $extensions[$file->get('extension')]['display_cat'] : ATTACHMENT_CATEGORY_NONE;	// Make sure the image category only holds valid images...	if ($cat_id == ATTACHMENT_CATEGORY_IMAGE && !$file->is_image())	{		$file->remove();		// If this error occurs a user tried to exploit an IE Bug by renaming extensions		// Since the image category is displaying content inline we need to catch this.		trigger_error($user->lang['ATTACHED_IMAGE_NOT_IMAGE']);	}	// Do we have to create a thumbnail?	$filedata['thumbnail'] = ($cat_id == ATTACHMENT_CATEGORY_IMAGE && $config['img_create_thumbnail']) ? 1 : 0;	// Check Image Size, if it is an image	if (!$auth->acl_get('a_') && !$auth->acl_get('m_', $forum_id) && $cat_id == ATTACHMENT_CATEGORY_IMAGE)	{		$file->upload->set_allowed_dimensions(0, 0, $config['img_max_width'], $config['img_max_height']);	}	// Admins and mods are allowed to exceed the allowed filesize	if (!$auth->acl_get('a_') && !$auth->acl_get('m_', $forum_id))	{		if (!empty($extensions[$file->get('extension')]['max_filesize']))		{			$allowed_filesize = $extensions[$file->get('extension')]['max_filesize'];		}		else		{			$allowed_filesize = ($is_message) ? $config['max_filesize_pm'] : $config['max_filesize'];		}		$file->upload->set_max_filesize($allowed_filesize);	}	$file->clean_filename('unique', $user->data['user_id'] . '_');	// Are we uploading an image *and* this image being within the image category? Only then perform additional image checks.	$no_image = ($cat_id == ATTACHMENT_CATEGORY_IMAGE) ? false : true;	$file->move_file($config['upload_path'], false, $no_image);	if (sizeof($file->error))	{		$file->remove();		$filedata['error'] = array_merge($filedata['error'], $file->error);		$filedata['post_attach'] = false;		return $filedata;	}	$filedata['filesize'] = $file->get('filesize');	$filedata['mimetype'] = $file->get('mimetype');	$filedata['extension'] = $file->get('extension');	$filedata['physical_filename'] = $file->get('realname');	$filedata['real_filename'] = $file->get('uploadname');	$filedata['filetime'] = time();	// Check our complete quota	if ($config['attachment_quota'])	{		if ($config['upload_dir_size'] + $file->get('filesize') > $config['attachment_quota'])		{			$filedata['error'][] = $user->lang['ATTACH_QUOTA_REACHED'];			$filedata['post_attach'] = false;			$file->remove();			return $filedata;		}	}	// Check free disk space	if ($free_space = @disk_free_space($phpbb_root_path . $config['upload_path']))	{		if ($free_space <= $file->get('filesize'))		{			$filedata['error'][] = $user->lang['ATTACH_QUOTA_REACHED'];			$filedata['post_attach'] = false;			$file->remove();			return $filedata;		}	}	// Create Thumbnail	if ($filedata['thumbnail'])	{		$source = $file->get('destination_file');		$destination = $file->get('destination_path') . '/thumb_' . $file->get('realname');		if (!create_thumbnail($source, $destination, $file->get('mimetype')))		{			$filedata['thumbnail'] = 0;		}	}	return $filedata;}/*** Calculate the needed size for Thumbnail*/function get_img_size_format($width, $height){	global $config;	// Maximum Width the Image can take	$max_width = ($config['img_max_thumb_width']) ? $config['img_max_thumb_width'] : 400;	if ($width > $height)	{		return array(			round($width * ($max_width / $width)),			round($height * ($max_width / $width))		);	}	else	{		return array(			round($width * ($max_width / $height)),			round($height * ($max_width / $height))		);	}}/*** Return supported image types*/function get_supported_image_types($type = false){	if (@extension_loaded('gd'))	{		$format = imagetypes();		$new_type = 0;		if ($type !== false)		{			// Type is one of the IMAGETYPE constants - it is fetched from getimagesize()			// We do not use the constants here, because some were not available in PHP 4.3.x			switch ($type)			{				// GIF				case 1:					$new_type = ($format & IMG_GIF) ? IMG_GIF : false;				break;				// JPG, JPC, JP2				case 2:				case 9:				case 10:				case 11:				case 12:					$new_type = ($format & IMG_JPG) ? IMG_JPG : false;				break;				// PNG				case 3:					$new_type = ($format & IMG_PNG) ? IMG_PNG : false;				break;				// WBMP				case 15:					$new_type = ($format & IMG_WBMP) ? IMG_WBMP : false;				break;			}		}		else		{			$new_type = array();			$go_through_types = array(IMG_GIF, IMG_JPG, IMG_PNG, IMG_WBMP);			foreach ($go_through_types as $check_type)			{				if ($format & $check_type)				{					$new_type[] = $check_type;				}			}		}		return array(			'gd'		=> ($new_type) ? true : false,			'format'	=> $new_type,			'version'	=> (function_exists('imagecreatetruecolor')) ? 2 : 1		);	}	return array('gd' => false);}/*** Create Thumbnail*/function create_thumbnail($source, $destination, $mimetype){	global $config;	$min_filesize = (int) $config['img_min_thumb_filesize'];	$img_filesize = (file_exists($source)) ? @filesize($source) : false;	if (!$img_filesize || $img_filesize <= $min_filesize)	{		return false;	}	$dimension = @getimagesize($source);	if ($dimension === false)	{		return false;	}	list($width, $height, $type, ) = $dimension;	if (empty($width) || empty($height))	{		return false;	}	list($new_width, $new_height) = get_img_size_format($width, $height);	// Do not create a thumbnail if the resulting width/height is bigger than the original one	if ($new_width >= $width && $new_height >= $height)	{		return false;	}	$used_imagick = false;	// Only use imagemagick if defined and the passthru function not disabled	if ($config['img_imagick'] && function_exists('passthru'))	{		if (substr($config['img_imagick'], -1) !== '/')		{			$config['img_imagick'] .= '/';		}		@passthru(escapeshellcmd($config['img_imagick']) . 'convert' . ((defined('PHP_OS') && preg_match('#^win#i', PHP_OS)) ? '.exe' : '') . ' -quality 85 -geometry ' . $new_width . 'x' . $new_height . ' "' . str_replace('\\', '/', $source) . '" "' . str_replace('\\', '/', $destination) . '"');		if (file_exists($destination))		{			$used_imagick = true;		}	}	if (!$used_imagick)	{		$type = get_supported_image_types($type);		if ($type['gd'])		{			// If the type is not supported, we are not able to create a thumbnail			if ($type['format'] === false)			{				return false;			}			switch ($type['format'])			{				case IMG_GIF:					$image = @imagecreatefromgif($source);				break;				case IMG_JPG:					@ini_set('gd.jpeg_ignore_warning', 1);					$image = @imagecreatefromjpeg($source);				break;				case IMG_PNG:					$image = @imagecreatefrompng($source);				break;				case IMG_WBMP:					$image = @imagecreatefromwbmp($source);				break;			}			if (empty($image))			{				return false;			}			if ($type['version'] == 1)			{				$new_image = imagecreate($new_width, $new_height);				if ($new_image === false)				{					return false;				}				imagecopyresized($new_image, $image, 0, 0, 0, 0, $new_width, $new_height, $width, $height);			}			else			{				$new_image = imagecreatetruecolor($new_width, $new_height);				if ($new_image === false)				{					return false;				}				// Preserve alpha transparency (png for example)				@imagealphablending($new_image, false);				@imagesavealpha($new_image, true);				imagecopyresampled($new_image, $image, 0, 0, 0, 0, $new_width, $new_height, $width, $height);			}			// If we are in safe mode create the destination file prior to using the gd functions to circumvent a PHP bug			if (@ini_get('safe_mode') || @strtolower(ini_get('safe_mode')) == 'on')			{				@touch($destination);			}			switch ($type['format'])			{				case IMG_GIF:					imagegif($new_image, $destination);				break;				case IMG_JPG:					imagejpeg($new_image, $destination, 90);				break;				case IMG_PNG:					imagepng($new_image, $destination);				break;				case IMG_WBMP:					imagewbmp($new_image, $destination);				break;			}			imagedestroy($new_image);		}		else		{			return false;		}	}	if (!file_exists($destination))	{		return false;	}	phpbb_chmod($destination, CHMOD_READ | CHMOD_WRITE);	return true;}/*** Assign Inline attachments (build option fields)*/function posting_gen_inline_attachments(&$attachment_data){	global $template;	if (sizeof($attachment_data))	{		$s_inline_attachment_options = '';		foreach ($attachment_data as $i => $attachment)		{			$s_inline_attachment_options .= '<option value="' . $i . '">' . utf8_basename($attachment['real_filename']) . '</option>';		}		$template->assign_var('S_INLINE_ATTACHMENT_OPTIONS', $s_inline_attachment_options);		return true;	}	return false;}/*** Generate inline attachment entry*/function posting_gen_attachment_entry($attachment_data, &$filename_data, $show_attach_box = true){	global $template, $config, $phpbb_root_path, $phpEx, $user, $auth;	// Some default template variables	$template->assign_vars(array(		'S_SHOW_ATTACH_BOX'	=> $show_attach_box,		'S_HAS_ATTACHMENTS'	=> sizeof($attachment_data),		'FILESIZE'			=> $config['max_filesize'],		'FILE_COMMENT'		=> (isset($filename_data['filecomment'])) ? $filename_data['filecomment'] : '',	));	if (sizeof($attachment_data))	{		// We display the posted attachments within the desired order.		($config['display_order']) ? krsort($attachment_data) : ksort($attachment_data);		foreach ($attachment_data as $count => $attach_row)		{			$hidden = '';			$attach_row['real_filename'] = utf8_basename($attach_row['real_filename']);			foreach ($attach_row as $key => $value)			{				$hidden .= '<input type="hidden" name="attachment_data[' . $count . '][' . $key . ']" value="' . $value . '" />';			}			$download_link = append_sid("{$phpbb_root_path}download/file.$phpEx", 'mode=view&amp;id=' . (int) $attach_row['attach_id'], true, ($attach_row['is_orphan']) ? $user->session_id : false);			$template->assign_block_vars('attach_row', array(				'FILENAME'			=> utf8_basename($attach_row['real_filename']),				'A_FILENAME'		=> addslashes(utf8_basename($attach_row['real_filename'])),				'FILE_COMMENT'		=> $attach_row['attach_comment'],				'ATTACH_ID'			=> $attach_row['attach_id'],				'S_IS_ORPHAN'		=> $attach_row['is_orphan'],				'ASSOC_INDEX'		=> $count,				'U_VIEW_ATTACHMENT'	=> $download_link,				'S_HIDDEN'			=> $hidden)			);		}	}	return sizeof($attachment_data);}//// General Post functions///*** Load Drafts*/function load_drafts($topic_id = 0, $forum_id = 0, $id = 0, $pm_action = '', $msg_id = 0){	global $user, $db, $template, $auth;	global $phpbb_root_path, $phpEx;	$topic_ids = $forum_ids = $draft_rows = array();	// Load those drafts not connected to forums/topics	// If forum_id == 0 AND topic_id == 0 then this is a PM draft	if (!$topic_id && !$forum_id)	{		$sql_and = ' AND d.forum_id = 0 AND d.topic_id = 0';	}	else	{		$sql_and = '';		$sql_and .= ($forum_id) ? ' AND d.forum_id = ' . (int) $forum_id : '';		$sql_and .= ($topic_id) ? ' AND d.topic_id = ' . (int) $topic_id : '';	}	$sql = 'SELECT d.*, f.forum_id, f.forum_name		FROM ' . DRAFTS_TABLE . ' d		LEFT JOIN ' . FORUMS_TABLE . ' f ON (f.forum_id = d.forum_id)			WHERE d.user_id = ' . $user->data['user_id'] . "			$sql_and		ORDER BY d.save_time DESC";	$result = $db->sql_query($sql);	while ($row = $db->sql_fetchrow($result))	{		if ($row['topic_id'])		{			$topic_ids[] = (int) $row['topic_id'];		}		$draft_rows[] = $row;	}	$db->sql_freeresult($result);	if (!sizeof($draft_rows))	{		return;	}	$topic_rows = array();	if (sizeof($topic_ids))	{		$sql = 'SELECT topic_id, forum_id, topic_title			FROM ' . TOPICS_TABLE . '			WHERE ' . $db->sql_in_set('topic_id', array_unique($topic_ids));		$result = $db->sql_query($sql);		while ($row = $db->sql_fetchrow($result))		{			$topic_rows[$row['topic_id']] = $row;		}		$db->sql_freeresult($result);	}	unset($topic_ids);	$template->assign_var('S_SHOW_DRAFTS', true);	foreach ($draft_rows as $draft)	{		$link_topic = $link_forum = $link_pm = false;		$insert_url = $view_url = $title = '';		if (isset($topic_rows[$draft['topic_id']])			&& (				($topic_rows[$draft['topic_id']]['forum_id'] && $auth->acl_get('f_read', $topic_rows[$draft['topic_id']]['forum_id']))				||				(!$topic_rows[$draft['topic_id']]['forum_id'] && $auth->acl_getf_global('f_read'))			))		{			$topic_forum_id = ($topic_rows[$draft['topic_id']]['forum_id']) ? $topic_rows[$draft['topic_id']]['forum_id'] : $forum_id;			$link_topic = true;			$view_url = append_sid("{$phpbb_root_path}viewtopic.$phpEx", 'f=' . $topic_forum_id . '&amp;t=' . $draft['topic_id']);			$title = $topic_rows[$draft['topic_id']]['topic_title'];			$insert_url = append_sid("{$phpbb_root_path}posting.$phpEx", 'f=' . $topic_forum_id . '&amp;t=' . $draft['topic_id'] . '&amp;mode=reply&amp;d=' . $draft['draft_id']);		}		else if ($draft['forum_id'] && $auth->acl_get('f_read', $draft['forum_id']))		{			$link_forum = true;			$view_url = append_sid("{$phpbb_root_path}viewforum.$phpEx", 'f=' . $draft['forum_id']);			$title = $draft['forum_name'];			$insert_url = append_sid("{$phpbb_root_path}posting.$phpEx", 'f=' . $draft['forum_id'] . '&amp;mode=post&amp;d=' . $draft['draft_id']);		}		else		{			// Either display as PM draft if forum_id and topic_id are empty or if access to the forums has been denied afterwards...			$link_pm = true;			$insert_url = append_sid("{$phpbb_root_path}ucp.$phpEx", "i=$id&amp;mode=compose&amp;d={$draft['draft_id']}" . (($pm_action) ? "&amp;action=$pm_action" : '') . (($msg_id) ? "&amp;p=$msg_id" : ''));		}		$template->assign_block_vars('draftrow', array(			'DRAFT_ID'		=> $draft['draft_id'],			'DATE'			=> $user->format_date($draft['save_time']),			'DRAFT_SUBJECT'	=> $draft['draft_subject'],			'TITLE'			=> $title,			'U_VIEW'		=> $view_url,			'U_INSERT'		=> $insert_url,			'S_LINK_PM'		=> $link_pm,			'S_LINK_TOPIC'	=> $link_topic,			'S_LINK_FORUM'	=> $link_forum)		);	}}/*** Topic Review*/function topic_review($topic_id, $forum_id, $mode = 'topic_review', $cur_post_id = 0, $show_quote_button = true){	global $user, $auth, $db, $template, $bbcode, $cache;	global $config, $phpbb_root_path, $phpEx;	// Go ahead and pull all data for this topic	$sql = 'SELECT p.post_id		FROM ' . POSTS_TABLE . ' p' . "		WHERE p.topic_id = $topic_id			" . ((!$auth->acl_get('m_approve', $forum_id)) ? 'AND p.post_approved = 1' : '') . '			' . (($mode == 'post_review') ? " AND p.post_id > $cur_post_id" : '') . '			' . (($mode == 'post_review_edit') ? " AND p.post_id = $cur_post_id" : '') . '		ORDER BY p.post_time ';	$sql .= ($mode == 'post_review') ? 'ASC' : 'DESC';	$result = $db->sql_query_limit($sql, $config['posts_per_page']);	$post_list = array();	while ($row = $db->sql_fetchrow($result))	{		$post_list[] = $row['post_id'];	}	$db->sql_freeresult($result);	if (!sizeof($post_list))	{		return false;	}	// Handle 'post_review_edit' like 'post_review' from now on	if ($mode == 'post_review_edit')	{		$mode = 'post_review';	}	$sql = $db->sql_build_query('SELECT', array(		'SELECT'	=> 'u.username, u.user_id, u.user_colour, p.*, z.friend, z.foe',		'FROM'		=> array(			USERS_TABLE		=> 'u',			POSTS_TABLE		=> 'p',		),		'LEFT_JOIN'	=> array(			array(				'FROM'	=> array(ZEBRA_TABLE => 'z'),				'ON'	=> 'z.user_id = ' . $user->data['user_id'] . ' AND z.zebra_id = p.poster_id'			)		),		'WHERE'		=> $db->sql_in_set('p.post_id', $post_list) . '			AND u.user_id = p.poster_id'	));	$result = $db->sql_query($sql);	$bbcode_bitfield = '';	$rowset = array();	$has_attachments = false;	while ($row = $db->sql_fetchrow($result))	{		$rowset[$row['post_id']] = $row;		$bbcode_bitfield = $bbcode_bitfield | base64_decode($row['bbcode_bitfield']);		if ($row['post_attachment'])		{			$has_attachments = true;		}	}	$db->sql_freeresult($result);	// Instantiate BBCode class	if (!isset($bbcode) && $bbcode_bitfield !== '')	{		include_once($phpbb_root_path . 'includes/bbcode.' . $phpEx);		$bbcode = new bbcode(base64_encode($bbcode_bitfield));	}	// Grab extensions	$extensions = $attachments = array();	if ($has_attachments && $auth->acl_get('u_download') && $auth->acl_get('f_download', $forum_id))	{		$extensions = $cache->obtain_attach_extensions($forum_id);		// Get attachments...		$sql = 'SELECT *			FROM ' . ATTACHMENTS_TABLE . '			WHERE ' . $db->sql_in_set('post_msg_id', $post_list) . '				AND in_message = 0			ORDER BY filetime DESC, post_msg_id ASC';		$result = $db->sql_query($sql);		while ($row = $db->sql_fetchrow($result))		{			$attachments[$row['post_msg_id']][] = $row;		}		$db->sql_freeresult($result);	}	for ($i = 0, $end = sizeof($post_list); $i < $end; ++$i)	{		// A non-existing rowset only happens if there was no user present for the entered poster_id		// This could be a broken posts table.		if (!isset($rowset[$post_list[$i]]))		{			continue;		}		$row =& $rowset[$post_list[$i]];		$poster_id		= $row['user_id'];		$post_subject	= $row['post_subject'];		$message		= censor_text($row['post_text']);		$decoded_message = false;		if ($show_quote_button && $auth->acl_get('f_reply', $forum_id))		{			$decoded_message = $message;			decode_message($decoded_message, $row['bbcode_uid']);			$decoded_message = bbcode_nl2br($decoded_message);		}		if ($row['bbcode_bitfield'])		{			$bbcode->bbcode_second_pass($message, $row['bbcode_uid'], $row['bbcode_bitfield']);		}		$message = bbcode_nl2br($message);		$message = smiley_text($message, !$row['enable_smilies']);		if (!empty($attachments[$row['post_id']]))		{			$update_count = array();			parse_attachments($forum_id, $message, $attachments[$row['post_id']], $update_count);		}		$post_subject = censor_text($post_subject);		$post_anchor = ($mode == 'post_review') ? 'ppr' . $row['post_id'] : 'pr' . $row['post_id'];		$u_show_post = append_sid($phpbb_root_path . 'viewtopic.' . $phpEx, "f=$forum_id&amp;t=$topic_id&amp;p={$row['post_id']}&amp;view=show#p{$row['post_id']}");		$template->assign_block_vars($mode . '_row', array(			'POST_AUTHOR_FULL'		=> get_username_string('full', $poster_id, $row['username'], $row['user_colour'], $row['post_username']),			'POST_AUTHOR_COLOUR'	=> get_username_string('colour', $poster_id, $row['username'], $row['user_colour'], $row['post_username']),			'POST_AUTHOR'			=> get_username_string('username', $poster_id, $row['username'], $row['user_colour'], $row['post_username']),			'U_POST_AUTHOR'			=> get_username_string('profile', $poster_id, $row['username'], $row['user_colour'], $row['post_username']),			'S_HAS_ATTACHMENTS'	=> (!empty($attachments[$row['post_id']])) ? true : false,			'S_FRIEND'			=> ($row['friend']) ? true : false,			'S_IGNORE_POST'		=> ($row['foe']) ? true : false,			'L_IGNORE_POST'		=> ($row['foe']) ? sprintf($user->lang['POST_BY_FOE'], get_username_string('full', $poster_id, $row['username'], $row['user_colour'], $row['post_username']), "<a href=\"{$u_show_post}\" onclick=\"dE('{$post_anchor}', 1); return false;\">", '</a>') : '',			'POST_SUBJECT'		=> $post_subject,			'MINI_POST_IMG'		=> $user->img('icon_post_target', $user->lang['POST']),			'POST_DATE'			=> $user->format_date($row['post_time']),			'MESSAGE'			=> $message,			'DECODED_MESSAGE'	=> $decoded_message,			'POST_ID'			=> $row['post_id'],			'U_MINI_POST'		=> append_sid("{$phpbb_root_path}viewtopic.$phpEx", 'p=' . $row['post_id']) . '#p' . $row['post_id'],			'U_MCP_DETAILS'		=> ($auth->acl_get('m_info', $forum_id)) ? append_sid("{$phpbb_root_path}mcp.$phpEx", 'i=main&amp;mode=post_details&amp;f=' . $forum_id . '&amp;p=' . $row['post_id'], true, $user->session_id) : '',			'POSTER_QUOTE'		=> ($show_quote_button && $auth->acl_get('f_reply', $forum_id)) ? addslashes(get_username_string('username', $poster_id, $row['username'], $row['user_colour'], $row['post_username'])) : '')		);		// Display not already displayed Attachments for this post, we already parsed them. ;)		if (!empty($attachments[$row['post_id']]))		{			foreach ($attachments[$row['post_id']] as $attachment)			{				$template->assign_block_vars($mode . '_row.attachment', array(					'DISPLAY_ATTACHMENT'	=> $attachment)				);			}		}		unset($rowset[$post_list[$i]]);	}	if ($mode == 'topic_review')	{		$template->assign_var('QUOTE_IMG', $user->img('icon_post_quote', $user->lang['REPLY_WITH_QUOTE']));	}	return true;}/*** User Notification*/function user_notification($mode, $subject, $topic_title, $forum_name, $forum_id, $topic_id, $post_id){	global $db, $user, $config, $phpbb_root_path, $phpEx, $auth;	$topic_notification = ($mode == 'reply' || $mode == 'quote') ? true : false;	$forum_notification = ($mode == 'post') ? true : false;	if (!$topic_notification && !$forum_notification)	{		trigger_error('NO_MODE');	}	if (($topic_notification && !$config['allow_topic_notify']) || ($forum_notification && !$config['allow_forum_notify']))	{		return;	}	$topic_title = ($topic_notification) ? $topic_title : $subject;	$topic_title = censor_text($topic_title);	// Get banned User ID's	$sql = 'SELECT ban_userid		FROM ' . BANLIST_TABLE . '		WHERE ban_userid <> 0			AND ban_exclude <> 1';	$result = $db->sql_query($sql);	$sql_ignore_users = ANONYMOUS . ', ' . $user->data['user_id'];	while ($row = $db->sql_fetchrow($result))	{		$sql_ignore_users .= ', ' . (int) $row['ban_userid'];	}	$db->sql_freeresult($result);	$notify_rows = array();	// -- get forum_userids	|| topic_userids	$sql = 'SELECT u.user_id, u.username, u.user_email, u.user_lang, u.user_notify_type, u.user_jabber		FROM ' . (($topic_notification) ? TOPICS_WATCH_TABLE : FORUMS_WATCH_TABLE) . ' w, ' . USERS_TABLE . ' u		WHERE w.' . (($topic_notification) ? 'topic_id' : 'forum_id') . ' = ' . (($topic_notification) ? $topic_id : $forum_id) . "			AND w.user_id NOT IN ($sql_ignore_users)			AND w.notify_status = " . NOTIFY_YES . '			AND u.user_type IN (' . USER_NORMAL . ', ' . USER_FOUNDER . ')			AND u.user_id = w.user_id';	$result = $db->sql_query($sql);	while ($row = $db->sql_fetchrow($result))	{		$notify_rows[$row['user_id']] = array(			'user_id'		=> $row['user_id'],			'username'		=> $row['username'],			'user_email'	=> $row['user_email'],			'user_jabber'	=> $row['user_jabber'],			'user_lang'		=> $row['user_lang'],			'notify_type'	=> ($topic_notification) ? 'topic' : 'forum',			'template'		=> ($topic_notification) ? 'topic_notify' : 'newtopic_notify',			'method'		=> $row['user_notify_type'],			'allowed'		=> false		);	}	$db->sql_freeresult($result);	// forum notification is sent to those not already receiving topic notifications	if ($topic_notification)	{		if (sizeof($notify_rows))		{			$sql_ignore_users .= ', ' . implode(', ', array_keys($notify_rows));		}		$sql = 'SELECT u.user_id, u.username, u.user_email, u.user_lang, u.user_notify_type, u.user_jabber			FROM ' . FORUMS_WATCH_TABLE . ' fw, ' . USERS_TABLE . " u			WHERE fw.forum_id = $forum_id				AND fw.user_id NOT IN ($sql_ignore_users)				AND fw.notify_status = " . NOTIFY_YES . '				AND u.user_type IN (' . USER_NORMAL . ', ' . USER_FOUNDER . ')				AND u.user_id = fw.user_id';		$result = $db->sql_query($sql);		while ($row = $db->sql_fetchrow($result))		{			$notify_rows[$row['user_id']] = array(				'user_id'		=> $row['user_id'],				'username'		=> $row['username'],				'user_email'	=> $row['user_email'],				'user_jabber'	=> $row['user_jabber'],				'user_lang'		=> $row['user_lang'],				'notify_type'	=> 'forum',				'template'		=> 'forum_notify',				'method'		=> $row['user_notify_type'],				'allowed'		=> false			);		}		$db->sql_freeresult($result);	}	if (!sizeof($notify_rows))	{		return;	}	// Make sure users are allowed to read the forum	foreach ($auth->acl_get_list(array_keys($notify_rows), 'f_read', $forum_id) as $forum_id => $forum_ary)	{		foreach ($forum_ary as $auth_option => $user_ary)		{			foreach ($user_ary as $user_id)			{				$notify_rows[$user_id]['allowed'] = true;			}		}	}	// Now, we have to do a little step before really sending, we need to distinguish our users a little bit. ;)	$msg_users = $delete_ids = $update_notification = array();	foreach ($notify_rows as $user_id => $row)	{		if (!$row['allowed'] || !trim($row['user_email']))		{			$delete_ids[$row['notify_type']][] = $row['user_id'];		}		else		{			$msg_users[] = $row;			$update_notification[$row['notify_type']][] = $row['user_id'];		}	}	unset($notify_rows);	// Now, we are able to really send out notifications	if (sizeof($msg_users))	{		include_once($phpbb_root_path . 'includes/functions_messenger.' . $phpEx);		$messenger = new messenger();		$msg_list_ary = array();		foreach ($msg_users as $row)		{			$pos = (!isset($msg_list_ary[$row['template']])) ? 0 : sizeof($msg_list_ary[$row['template']]);			$msg_list_ary[$row['template']][$pos]['method']	= $row['method'];			$msg_list_ary[$row['template']][$pos]['email']	= $row['user_email'];			$msg_list_ary[$row['template']][$pos]['jabber']	= $row['user_jabber'];			$msg_list_ary[$row['template']][$pos]['name']	= $row['username'];			$msg_list_ary[$row['template']][$pos]['lang']	= $row['user_lang'];			$msg_list_ary[$row['template']][$pos]['user_id']= $row['user_id'];		}		unset($msg_users);		foreach ($msg_list_ary as $email_template => $email_list)		{			foreach ($email_list as $addr)			{				$messenger->template($email_template, $addr['lang']);				$messenger->to($addr['email'], $addr['name']);				$messenger->im($addr['jabber'], $addr['name']);				$messenger->assign_vars(array(					'USERNAME'		=> htmlspecialchars_decode($addr['name']),					'TOPIC_TITLE'	=> htmlspecialchars_decode($topic_title),					'FORUM_NAME'	=> htmlspecialchars_decode($forum_name),					'U_FORUM'				=> generate_board_url() . "/viewforum.$phpEx?f=$forum_id",					'U_TOPIC'				=> generate_board_url() . "/viewtopic.$phpEx?f=$forum_id&t=$topic_id",					'U_NEWEST_POST'			=> generate_board_url() . "/viewtopic.$phpEx?f=$forum_id&t=$topic_id&p=$post_id&e=$post_id",					'U_STOP_WATCHING_TOPIC'	=> generate_board_url() . "/viewtopic.$phpEx?uid={$addr['user_id']}&f=$forum_id&t=$topic_id&unwatch=topic",					'U_STOP_WATCHING_FORUM'	=> generate_board_url() . "/viewforum.$phpEx?uid={$addr['user_id']}&f=$forum_id&unwatch=forum",				));				$messenger->send($addr['method']);			}		}		unset($msg_list_ary);		$messenger->save_queue();	}	// Handle the DB updates	$db->sql_transaction('begin');	if (!empty($update_notification['topic']))	{		$sql = 'UPDATE ' . TOPICS_WATCH_TABLE . '			SET notify_status = ' . NOTIFY_NO . "			WHERE topic_id = $topic_id				AND " . $db->sql_in_set('user_id', $update_notification['topic']);		$db->sql_query($sql);	}	if (!empty($update_notification['forum']))	{		$sql = 'UPDATE ' . FORUMS_WATCH_TABLE . '			SET notify_status = ' . NOTIFY_NO . "			WHERE forum_id = $forum_id				AND " . $db->sql_in_set('user_id', $update_notification['forum']);		$db->sql_query($sql);	}	// Now delete the user_ids not authorised to receive notifications on this topic/forum	if (!empty($delete_ids['topic']))	{		$sql = 'DELETE FROM ' . TOPICS_WATCH_TABLE . "			WHERE topic_id = $topic_id				AND " . $db->sql_in_set('user_id', $delete_ids['topic']);		$db->sql_query($sql);	}	if (!empty($delete_ids['forum']))	{		$sql = 'DELETE FROM ' . FORUMS_WATCH_TABLE . "			WHERE forum_id = $forum_id				AND " . $db->sql_in_set('user_id', $delete_ids['forum']);		$db->sql_query($sql);	}	$db->sql_transaction('commit');}//// Post handling functions///*** Delete Post*/function delete_post($forum_id, $topic_id, $post_id, &$data){	global $db, $user, $auth;	global $config, $phpEx, $phpbb_root_path;	// Specify our post mode	$post_mode = 'delete';	if (($data['topic_first_post_id'] === $data['topic_last_post_id']) && $data['topic_replies_real'] == 0)	{		$post_mode = 'delete_topic';	}	else if ($data['topic_first_post_id'] == $post_id)	{		$post_mode = 'delete_first_post';	}	else if ($data['topic_last_post_id'] == $post_id)	{		$post_mode = 'delete_last_post';	}	$sql_data = array();	$next_post_id = false;	include_once($phpbb_root_path . 'includes/functions_admin.' . $phpEx);	$db->sql_transaction('begin');	// we must make sure to update forums that contain the shadow'd topic	if ($post_mode == 'delete_topic')	{		$shadow_forum_ids = array();		$sql = 'SELECT forum_id			FROM ' . TOPICS_TABLE . '			WHERE ' . $db->sql_in_set('topic_moved_id', $topic_id);		$result = $db->sql_query($sql);		while ($row = $db->sql_fetchrow($result))		{			if (!isset($shadow_forum_ids[(int) $row['forum_id']]))			{				$shadow_forum_ids[(int) $row['forum_id']] = 1;			}			else			{				$shadow_forum_ids[(int) $row['forum_id']]++;			}		}		$db->sql_freeresult($result);	}	if (!delete_posts('post_id', array($post_id), false, false))	{		// Try to delete topic, we may had an previous error causing inconsistency		if ($post_mode == 'delete_topic')		{			delete_topics('topic_id', array($topic_id), false);		}		trigger_error('ALREADY_DELETED');	}	$db->sql_transaction('commit');	// Collect the necessary information for updating the tables	$sql_data[FORUMS_TABLE] = '';	switch ($post_mode)	{		case 'delete_topic':			foreach ($shadow_forum_ids as $updated_forum => $topic_count)			{				// counting is fun! we only have to do sizeof($forum_ids) number of queries,				// even if the topic is moved back to where its shadow lives (we count how many times it is in a forum)				$db->sql_query('UPDATE ' . FORUMS_TABLE . ' SET forum_topics_real = forum_topics_real - ' . $topic_count . ', forum_topics = forum_topics - ' . $topic_count . ' WHERE forum_id = ' . $updated_forum);				update_post_information('forum', $updated_forum);			}			delete_topics('topic_id', array($topic_id), false);			if ($data['topic_type'] != POST_GLOBAL)			{				$sql_data[FORUMS_TABLE] .= 'forum_topics_real = forum_topics_real - 1';				$sql_data[FORUMS_TABLE] .= ($data['topic_approved']) ? ', forum_posts = forum_posts - 1, forum_topics = forum_topics - 1' : '';			}			$update_sql = update_post_information('forum', $forum_id, true);			if (sizeof($update_sql))			{				$sql_data[FORUMS_TABLE] .= ($sql_data[FORUMS_TABLE]) ? ', ' : '';				$sql_data[FORUMS_TABLE] .= implode(', ', $update_sql[$forum_id]);			}		break;		case 'delete_first_post':			$sql = 'SELECT p.post_id, p.poster_id, p.post_time, p.post_username, u.username, u.user_colour				FROM ' . POSTS_TABLE . ' p, ' . USERS_TABLE . " u				WHERE p.topic_id = $topic_id					AND p.poster_id = u.user_id				ORDER BY p.post_time ASC";			$result = $db->sql_query_limit($sql, 1);			$row = $db->sql_fetchrow($result);			$db->sql_freeresult($result);			if ($data['topic_type'] != POST_GLOBAL)			{				$sql_data[FORUMS_TABLE] = ($data['post_approved']) ? 'forum_posts = forum_posts - 1' : '';			}			$sql_data[TOPICS_TABLE] = 'topic_poster = ' . intval($row['poster_id']) . ', topic_first_post_id = ' . intval($row['post_id']) . ", topic_first_poster_colour = '" . $db->sql_escape($row['user_colour']) . "', topic_first_poster_name = '" . (($row['poster_id'] == ANONYMOUS) ? $db->sql_escape($row['post_username']) : $db->sql_escape($row['username'])) . "', topic_time = " . (int) $row['post_time'];			// Decrementing topic_replies here is fine because this case only happens if there is more than one post within the topic - basically removing one "reply"			$sql_data[TOPICS_TABLE] .= ', topic_replies_real = topic_replies_real - 1' . (($data['post_approved']) ? ', topic_replies = topic_replies - 1' : '');			$next_post_id = (int) $row['post_id'];		break;		case 'delete_last_post':			if ($data['topic_type'] != POST_GLOBAL)			{				$sql_data[FORUMS_TABLE] = ($data['post_approved']) ? 'forum_posts = forum_posts - 1' : '';			}			$update_sql = update_post_information('forum', $forum_id, true);			if (sizeof($update_sql))			{				$sql_data[FORUMS_TABLE] .= ($sql_data[FORUMS_TABLE]) ? ', ' : '';				$sql_data[FORUMS_TABLE] .= implode(', ', $update_sql[$forum_id]);			}			$sql_data[TOPICS_TABLE] = 'topic_bumped = 0, topic_bumper = 0, topic_replies_real = topic_replies_real - 1' . (($data['post_approved']) ? ', topic_replies = topic_replies - 1' : '');			$update_sql = update_post_information('topic', $topic_id, true);			if (sizeof($update_sql))			{				$sql_data[TOPICS_TABLE] .= ', ' . implode(', ', $update_sql[$topic_id]);				$next_post_id = (int) str_replace('topic_last_post_id = ', '', $update_sql[$topic_id][0]);			}			else			{				$sql = 'SELECT MAX(post_id) as last_post_id					FROM ' . POSTS_TABLE . "					WHERE topic_id = $topic_id " .						((!$auth->acl_get('m_approve', $forum_id)) ? 'AND post_approved = 1' : '');				$result = $db->sql_query($sql);				$row = $db->sql_fetchrow($result);				$db->sql_freeresult($result);				$next_post_id = (int) $row['last_post_id'];			}		break;		case 'delete':			$sql = 'SELECT post_id				FROM ' . POSTS_TABLE . "				WHERE topic_id = $topic_id " .					((!$auth->acl_get('m_approve', $forum_id)) ? 'AND post_approved = 1' : '') . '					AND post_time > ' . $data['post_time'] . '				ORDER BY post_time ASC';			$result = $db->sql_query_limit($sql, 1);			$row = $db->sql_fetchrow($result);			$db->sql_freeresult($result);			if ($data['topic_type'] != POST_GLOBAL)			{				$sql_data[FORUMS_TABLE] = ($data['post_approved']) ? 'forum_posts = forum_posts - 1' : '';			}			$sql_data[TOPICS_TABLE] = 'topic_replies_real = topic_replies_real - 1' . (($data['post_approved']) ? ', topic_replies = topic_replies - 1' : '');			$next_post_id = (int) $row['post_id'];		break;	}	if (($post_mode == 'delete') || ($post_mode == 'delete_last_post') || ($post_mode == 'delete_first_post'))	{		$sql = 'SELECT 1 AS has_attachments			FROM ' . ATTACHMENTS_TABLE . '			WHERE topic_id = ' . $topic_id;		$result = $db->sql_query_limit($sql, 1);		$has_attachments = (int) $db->sql_fetchfield('has_attachments');		$db->sql_freeresult($result);		if (!$has_attachments)		{			$sql_data[TOPICS_TABLE] .= ', topic_attachment = 0';		}	}//	$sql_data[USERS_TABLE] = ($data['post_postcount']) ? 'user_posts = user_posts - 1' : '';	$db->sql_transaction('begin');	$where_sql = array(		FORUMS_TABLE	=> "forum_id = $forum_id",		TOPICS_TABLE	=> "topic_id = $topic_id",		USERS_TABLE		=> 'user_id = ' . $data['poster_id']	);	foreach ($sql_data as $table => $update_sql)	{		if ($update_sql)		{			$db->sql_query("UPDATE $table SET $update_sql WHERE " . $where_sql[$table]);		}	}	// Adjust posted info for this user by looking for a post by him/her within this topic...	if ($post_mode != 'delete_topic' && $config['load_db_track'] && $data['poster_id'] != ANONYMOUS)	{		$sql = 'SELECT poster_id			FROM ' . POSTS_TABLE . '			WHERE topic_id = ' . $topic_id . '				AND poster_id = ' . $data['poster_id'];		$result = $db->sql_query_limit($sql, 1);		$poster_id = (int) $db->sql_fetchfield('poster_id');		$db->sql_freeresult($result);		// The user is not having any more posts within this topic		if (!$poster_id)		{			$sql = 'DELETE FROM ' . TOPICS_POSTED_TABLE . '				WHERE topic_id = ' . $topic_id . '					AND user_id = ' . $data['poster_id'];			$db->sql_query($sql);		}	}	$db->sql_transaction('commit');	if ($data['post_reported'] && ($post_mode != 'delete_topic'))	{		sync('topic_reported', 'topic_id', array($topic_id));	}	return $next_post_id;}/*** Submit Post* @todo Split up and create lightweight, simple API for this.*/function submit_post($mode, $subject, $username, $topic_type, &$poll, &$data, $update_message = true, $update_search_index = true){	global $db, $auth, $user, $config, $phpEx, $template, $phpbb_root_path;	// We do not handle erasing posts here	if ($mode == 'delete')	{		return false;	}	$current_time = time();	if ($mode == 'post')	{		$post_mode = 'post';		$update_message = true;	}	else if ($mode != 'edit')	{		$post_mode = 'reply';		$update_message = true;	}	else if ($mode == 'edit')	{		$post_mode = ($data['topic_replies_real'] == 0) ? 'edit_topic' : (($data['topic_first_post_id'] == $data['post_id']) ? 'edit_first_post' : (($data['topic_last_post_id'] == $data['post_id']) ? 'edit_last_post' : 'edit'));	}	// First of all make sure the subject and topic title are having the correct length.	// To achieve this without cutting off between special chars we convert to an array and then count the elements.	$subject = truncate_string($subject);	$data['topic_title'] = truncate_string($data['topic_title']);	// Collect some basic information about which tables and which rows to update/insert	$sql_data = $topic_row = array();	$poster_id = ($mode == 'edit') ? $data['poster_id'] : (int) $user->data['user_id'];	// Retrieve some additional information if not present	if ($mode == 'edit' && (!isset($data['post_approved']) || !isset($data['topic_approved']) || $data['post_approved'] === false || $data['topic_approved'] === false))	{		$sql = 'SELECT p.post_approved, t.topic_type, t.topic_replies, t.topic_replies_real, t.topic_approved			FROM ' . TOPICS_TABLE . ' t, ' . POSTS_TABLE . ' p			WHERE t.topic_id = p.topic_id				AND p.post_id = ' . $data['post_id'];		$result = $db->sql_query($sql);		$topic_row = $db->sql_fetchrow($result);		$db->sql_freeresult($result);		$data['topic_approved'] = $topic_row['topic_approved'];		$data['post_approved'] = $topic_row['post_approved'];	}	// This variable indicates if the user is able to post or put into the queue - it is used later for all code decisions regarding approval	// The variable name should be $post_approved, because it indicates if the post is approved or not	$post_approval = 1;	// Check the permissions for post approval. Moderators are not affected.	if (!$auth->acl_get('f_noapprove', $data['forum_id']) && !$auth->acl_get('m_approve', $data['forum_id']))	{		// Post not approved, but in queue		$post_approval = 0;	}	// Mods are able to force approved/unapproved posts. True means the post is approved, false the post is unapproved	if (isset($data['force_approved_state']))	{		$post_approval = ($data['force_approved_state']) ? 1 : 0;	}	// Start the transaction here	$db->sql_transaction('begin');	// Collect Information	switch ($post_mode)	{		case 'post':		case 'reply':			$sql_data[POSTS_TABLE]['sql'] = array(				'forum_id'			=> ($topic_type == POST_GLOBAL) ? 0 : $data['forum_id'],				'poster_id'			=> (int) $user->data['user_id'],				'icon_id'			=> $data['icon_id'],				'poster_ip'			=> $user->ip,				'post_time'			=> $current_time,				'post_approved'		=> $post_approval,				'enable_bbcode'		=> $data['enable_bbcode'],				'enable_smilies'	=> $data['enable_smilies'],				'enable_magic_url'	=> $data['enable_urls'],				'enable_sig'		=> $data['enable_sig'],				'post_username'		=> (!$user->data['is_registered']) ? $username : '',				'post_subject'		=> $subject,				'post_text'			=> $data['message'],				'post_checksum'		=> $data['message_md5'],				'post_attachment'	=> (!empty($data['attachment_data'])) ? 1 : 0,				'bbcode_bitfield'	=> $data['bbcode_bitfield'],				'bbcode_uid'		=> $data['bbcode_uid'],				'post_postcount'	=> ($auth->acl_get('f_postcount', $data['forum_id'])) ? 1 : 0,				'post_edit_locked'	=> $data['post_edit_locked']			);		break;		case 'edit_first_post':		case 'edit':		case 'edit_last_post':		case 'edit_topic':			// If edit reason is given always display edit info			// If editing last post then display no edit info			// If m_edit permission then display no edit info			// If normal edit display edit info			// Display edit info if edit reason given or user is editing his post, which is not the last within the topic.			if ($data['post_edit_reason'] || (!$auth->acl_get('m_edit', $data['forum_id']) && ($post_mode == 'edit' || $post_mode == 'edit_first_post')))			{				$data['post_edit_reason']		= truncate_string($data['post_edit_reason'], 255, 255, false);				$sql_data[POSTS_TABLE]['sql']	= array(					'post_edit_time'	=> $current_time,					'post_edit_reason'	=> $data['post_edit_reason'],					'post_edit_user'	=> (int) $data['post_edit_user'],				);				$sql_data[POSTS_TABLE]['stat'][] = 'post_edit_count = post_edit_count + 1';			}			else if (!$data['post_edit_reason'] && $mode == 'edit' && $auth->acl_get('m_edit', $data['forum_id']))			{				$sql_data[POSTS_TABLE]['sql'] = array(					'post_edit_reason'	=> '',				);			}			// If the person editing this post is different to the one having posted then we will add a log entry stating the edit			// Could be simplified by only adding to the log if the edit is not tracked - but this may confuse admins/mods			if ($user->data['user_id'] != $poster_id)			{				$log_subject = ($subject) ? $subject : $data['topic_title'];				add_log('mod', $data['forum_id'], $data['topic_id'], 'LOG_POST_EDITED', $log_subject, (!empty($username)) ? $username : $user->lang['GUEST']);			}			if (!isset($sql_data[POSTS_TABLE]['sql']))			{				$sql_data[POSTS_TABLE]['sql'] = array();			}			$sql_data[POSTS_TABLE]['sql'] = array_merge($sql_data[POSTS_TABLE]['sql'], array(				'forum_id'			=> ($topic_type == POST_GLOBAL) ? 0 : $data['forum_id'],				'poster_id'			=> $data['poster_id'],				'icon_id'			=> $data['icon_id'],				'post_approved'		=> (!$post_approval) ? 0 : $data['post_approved'],				'enable_bbcode'		=> $data['enable_bbcode'],				'enable_smilies'	=> $data['enable_smilies'],				'enable_magic_url'	=> $data['enable_urls'],				'enable_sig'		=> $data['enable_sig'],				'post_username'		=> ($username && $data['poster_id'] == ANONYMOUS) ? $username : '',				'post_subject'		=> $subject,				'post_checksum'		=> $data['message_md5'],				'post_attachment'	=> (!empty($data['attachment_data'])) ? 1 : 0,				'bbcode_bitfield'	=> $data['bbcode_bitfield'],				'bbcode_uid'		=> $data['bbcode_uid'],				'post_edit_locked'	=> $data['post_edit_locked'])			);			if ($update_message)			{				$sql_data[POSTS_TABLE]['sql']['post_text'] = $data['message'];			}		break;	}	$post_approved = $sql_data[POSTS_TABLE]['sql']['post_approved'];	$topic_row = array();	// And the topic ladies and gentlemen	switch ($post_mode)	{		case 'post':			$sql_data[TOPICS_TABLE]['sql'] = array(				'topic_poster'				=> (int) $user->data['user_id'],				'topic_time'				=> $current_time,				'topic_last_view_time'		=> $current_time,				'forum_id'					=> ($topic_type == POST_GLOBAL) ? 0 : $data['forum_id'],				'icon_id'					=> $data['icon_id'],				'topic_approved'			=> $post_approval,				'topic_title'				=> $subject,				'topic_first_poster_name'	=> (!$user->data['is_registered'] && $username) ? $username : (($user->data['user_id'] != ANONYMOUS) ? $user->data['username'] : ''),				'topic_first_poster_colour'	=> $user->data['user_colour'],				'topic_type'				=> $topic_type,				'topic_time_limit'			=> ($topic_type == POST_STICKY || $topic_type == POST_ANNOUNCE) ? ($data['topic_time_limit'] * 86400) : 0,				'topic_attachment'			=> (!empty($data['attachment_data'])) ? 1 : 0,			);			if (isset($poll['poll_options']) && !empty($poll['poll_options']))			{				$poll_start = ($poll['poll_start']) ? $poll['poll_start'] : $current_time;				$poll_length = $poll['poll_length'] * 86400;				if ($poll_length < 0)				{					$poll_start = $poll_start + $poll_length;					if ($poll_start < 0)					{						$poll_start = 0;					}					$poll_length = 1;				}				$sql_data[TOPICS_TABLE]['sql'] = array_merge($sql_data[TOPICS_TABLE]['sql'], array(					'poll_title'		=> $poll['poll_title'],					'poll_start'		=> $poll_start,					'poll_max_options'	=> $poll['poll_max_options'],					'poll_length'		=> $poll_length,					'poll_vote_change'	=> $poll['poll_vote_change'])				);			}			$sql_data[USERS_TABLE]['stat'][] = "user_lastpost_time = $current_time" . (($auth->acl_get('f_postcount', $data['forum_id']) && $post_approval) ? ', user_posts = user_posts + 1' : '');			if ($topic_type != POST_GLOBAL)			{				if ($post_approval)				{					$sql_data[FORUMS_TABLE]['stat'][] = 'forum_posts = forum_posts + 1';				}				$sql_data[FORUMS_TABLE]['stat'][] = 'forum_topics_real = forum_topics_real + 1' . (($post_approval) ? ', forum_topics = forum_topics + 1' : '');			}		break;		case 'reply':			$sql_data[TOPICS_TABLE]['stat'][] = 'topic_last_view_time = ' . $current_time . ',				topic_replies_real = topic_replies_real + 1,				topic_bumped = 0,				topic_bumper = 0' .				(($post_approval) ? ', topic_replies = topic_replies + 1' : '') .				((!empty($data['attachment_data']) || (isset($data['topic_attachment']) && $data['topic_attachment'])) ? ', topic_attachment = 1' : '');			$sql_data[USERS_TABLE]['stat'][] = "user_lastpost_time = $current_time" . (($auth->acl_get('f_postcount', $data['forum_id']) && $post_approval) ? ', user_posts = user_posts + 1' : '');			if ($post_approval && $topic_type != POST_GLOBAL)			{				$sql_data[FORUMS_TABLE]['stat'][] = 'forum_posts = forum_posts + 1';			}		break;		case 'edit_topic':		case 'edit_first_post':			if (isset($poll['poll_options']))			{				$poll_start = ($poll['poll_start'] || empty($poll['poll_options'])) ? $poll['poll_start'] : $current_time;				$poll_length = $poll['poll_length'] * 86400;				if ($poll_length < 0)				{					$poll_start = $poll_start + $poll_length;					if ($poll_start < 0)					{						$poll_start = 0;					}					$poll_length = 1;				}			}			$sql_data[TOPICS_TABLE]['sql'] = array(				'forum_id'					=> ($topic_type == POST_GLOBAL) ? 0 : $data['forum_id'],				'icon_id'					=> $data['icon_id'],				'topic_approved'			=> (!$post_approval) ? 0 : $data['topic_approved'],				'topic_title'				=> $subject,				'topic_first_poster_name'	=> $username,				'topic_type'				=> $topic_type,				'topic_time_limit'			=> ($topic_type == POST_STICKY || $topic_type == POST_ANNOUNCE) ? ($data['topic_time_limit'] * 86400) : 0,				'poll_title'				=> (isset($poll['poll_options'])) ? $poll['poll_title'] : '',				'poll_start'				=> (isset($poll['poll_options'])) ? $poll_start : 0,				'poll_max_options'			=> (isset($poll['poll_options'])) ? $poll['poll_max_options'] : 1,				'poll_length'				=> (isset($poll['poll_options'])) ? $poll_length : 0,				'poll_vote_change'			=> (isset($poll['poll_vote_change'])) ? $poll['poll_vote_change'] : 0,				'topic_last_view_time'		=> $current_time,				'topic_attachment'			=> (!empty($data['attachment_data'])) ? 1 : (isset($data['topic_attachment']) ? $data['topic_attachment'] : 0),			);			// Correctly set back the topic replies and forum posts... only if the topic was approved before and now gets disapproved			if (!$post_approval && $data['topic_approved'])			{				// Do we need to grab some topic informations?				if (!sizeof($topic_row))				{					$sql = 'SELECT topic_type, topic_replies, topic_replies_real, topic_approved						FROM ' . TOPICS_TABLE . '						WHERE topic_id = ' . $data['topic_id'];					$result = $db->sql_query($sql);					$topic_row = $db->sql_fetchrow($result);					$db->sql_freeresult($result);				}				// If this is the only post remaining we do not need to decrement topic_replies.				// Also do not decrement if first post - then the topic_replies will not be adjusted if approving the topic again.				// If this is an edited topic or the first post the topic gets completely disapproved later on...				$sql_data[FORUMS_TABLE]['stat'][] = 'forum_topics = forum_topics - 1';				$sql_data[FORUMS_TABLE]['stat'][] = 'forum_posts = forum_posts - ' . ($topic_row['topic_replies'] + 1);				set_config_count('num_topics', -1, true);				set_config_count('num_posts', ($topic_row['topic_replies'] + 1) * (-1), true);				// Only decrement this post, since this is the one non-approved now				if ($auth->acl_get('f_postcount', $data['forum_id']))				{					$sql_data[USERS_TABLE]['stat'][] = 'user_posts = user_posts - 1';				}			}		break;		case 'edit':		case 'edit_last_post':			// Correctly set back the topic replies and forum posts... but only if the post was approved before.			if (!$post_approval && $data['post_approved'])			{				$sql_data[TOPICS_TABLE]['stat'][] = 'topic_replies = topic_replies - 1, topic_last_view_time = ' . $current_time;				$sql_data[FORUMS_TABLE]['stat'][] = 'forum_posts = forum_posts - 1';				set_config_count('num_posts', -1, true);				if ($auth->acl_get('f_postcount', $data['forum_id']))				{					$sql_data[USERS_TABLE]['stat'][] = 'user_posts = user_posts - 1';				}			}		break;	}	// Submit new topic	if ($post_mode == 'post')	{		$sql = 'INSERT INTO ' . TOPICS_TABLE . ' ' .			$db->sql_build_array('INSERT', $sql_data[TOPICS_TABLE]['sql']);		$db->sql_query($sql);		$data['topic_id'] = $db->sql_nextid();		$sql_data[POSTS_TABLE]['sql'] = array_merge($sql_data[POSTS_TABLE]['sql'], array(			'topic_id' => $data['topic_id'])		);		unset($sql_data[TOPICS_TABLE]['sql']);	}	// Submit new post	if ($post_mode == 'post' || $post_mode == 'reply')	{		if ($post_mode == 'reply')		{			$sql_data[POSTS_TABLE]['sql'] = array_merge($sql_data[POSTS_TABLE]['sql'], array(				'topic_id' => $data['topic_id'])			);		}		$sql = 'INSERT INTO ' . POSTS_TABLE . ' ' . $db->sql_build_array('INSERT', $sql_data[POSTS_TABLE]['sql']);		$db->sql_query($sql);		$data['post_id'] = $db->sql_nextid();		if ($post_mode == 'post')		{			$sql_data[TOPICS_TABLE]['sql'] = array(				'topic_first_post_id'		=> $data['post_id'],				'topic_last_post_id'		=> $data['post_id'],				'topic_last_post_time'		=> $current_time,				'topic_last_poster_id'		=> (int) $user->data['user_id'],				'topic_last_poster_name'	=> (!$user->data['is_registered'] && $username) ? $username : (($user->data['user_id'] != ANONYMOUS) ? $user->data['username'] : ''),				'topic_last_poster_colour'	=> $user->data['user_colour'],				'topic_last_post_subject'	=> (string) $subject,			);		}		unset($sql_data[POSTS_TABLE]['sql']);	}	$make_global = false;	// Are we globalising or unglobalising?	if ($post_mode == 'edit_first_post' || $post_mode == 'edit_topic')	{		if (!sizeof($topic_row))		{			$sql = 'SELECT topic_type, topic_replies, topic_replies_real, topic_approved, topic_last_post_id				FROM ' . TOPICS_TABLE . '				WHERE topic_id = ' . $data['topic_id'];			$result = $db->sql_query($sql);			$topic_row = $db->sql_fetchrow($result);			$db->sql_freeresult($result);		}		// globalise/unglobalise?		if (($topic_row['topic_type'] != POST_GLOBAL && $topic_type == POST_GLOBAL) || ($topic_row['topic_type'] == POST_GLOBAL && $topic_type != POST_GLOBAL))		{			if (!empty($sql_data[FORUMS_TABLE]['stat']) && implode('', $sql_data[FORUMS_TABLE]['stat']))			{				$db->sql_query('UPDATE ' . FORUMS_TABLE . ' SET ' . implode(', ', $sql_data[FORUMS_TABLE]['stat']) . ' WHERE forum_id = ' . $data['forum_id']);			}			$make_global = true;			$sql_data[FORUMS_TABLE]['stat'] = array();		}		// globalise		if ($topic_row['topic_type'] != POST_GLOBAL && $topic_type == POST_GLOBAL)		{			// Decrement topic/post count			$sql_data[FORUMS_TABLE]['stat'][] = 'forum_posts = forum_posts - ' . ($topic_row['topic_replies_real'] + 1);			$sql_data[FORUMS_TABLE]['stat'][] = 'forum_topics_real = forum_topics_real - 1' . (($topic_row['topic_approved']) ? ', forum_topics = forum_topics - 1' : '');			// Update forum_ids for all posts			$sql = 'UPDATE ' . POSTS_TABLE . '				SET forum_id = 0				WHERE topic_id = ' . $data['topic_id'];			$db->sql_query($sql);		}		// unglobalise		else if ($topic_row['topic_type'] == POST_GLOBAL && $topic_type != POST_GLOBAL)		{			// Increment topic/post count			$sql_data[FORUMS_TABLE]['stat'][] = 'forum_posts = forum_posts + ' . ($topic_row['topic_replies_real'] + 1);			$sql_data[FORUMS_TABLE]['stat'][] = 'forum_topics_real = forum_topics_real + 1' . (($topic_row['topic_approved']) ? ', forum_topics = forum_topics + 1' : '');			// Update forum_ids for all posts			$sql = 'UPDATE ' . POSTS_TABLE . '				SET forum_id = ' . $data['forum_id'] . '				WHERE topic_id = ' . $data['topic_id'];			$db->sql_query($sql);		}	}	// Update the topics table	if (isset($sql_data[TOPICS_TABLE]['sql']))	{		$sql = 'UPDATE ' . TOPICS_TABLE . '			SET ' . $db->sql_build_array('UPDATE', $sql_data[TOPICS_TABLE]['sql']) . '			WHERE topic_id = ' . $data['topic_id'];		$db->sql_query($sql);	}	// Update the posts table	if (isset($sql_data[POSTS_TABLE]['sql']))	{		$sql = 'UPDATE ' . POSTS_TABLE . '			SET ' . $db->sql_build_array('UPDATE', $sql_data[POSTS_TABLE]['sql']) . '			WHERE post_id = ' . $data['post_id'];		$db->sql_query($sql);	}	// Update Poll Tables	if (isset($poll['poll_options']))	{		$cur_poll_options = array();		if ($mode == 'edit')		{			$sql = 'SELECT *				FROM ' . POLL_OPTIONS_TABLE . '				WHERE topic_id = ' . $data['topic_id'] . '				ORDER BY poll_option_id';			$result = $db->sql_query($sql);			$cur_poll_options = array();			while ($row = $db->sql_fetchrow($result))			{				$cur_poll_options[] = $row;			}			$db->sql_freeresult($result);		}		$sql_insert_ary = array();		for ($i = 0, $size = sizeof($poll['poll_options']); $i < $size; $i++)		{			if (strlen(trim($poll['poll_options'][$i])))			{				if (empty($cur_poll_options[$i]))				{					// If we add options we need to put them to the end to be able to preserve votes...					$sql_insert_ary[] = array(						'poll_option_id'	=> (int) sizeof($cur_poll_options) + 1 + sizeof($sql_insert_ary),						'topic_id'			=> (int) $data['topic_id'],						'poll_option_text'	=> (string) $poll['poll_options'][$i]					);				}				else if ($poll['poll_options'][$i] != $cur_poll_options[$i])				{					$sql = 'UPDATE ' . POLL_OPTIONS_TABLE . "						SET poll_option_text = '" . $db->sql_escape($poll['poll_options'][$i]) . "'						WHERE poll_option_id = " . $cur_poll_options[$i]['poll_option_id'] . '							AND topic_id = ' . $data['topic_id'];					$db->sql_query($sql);				}			}		}		$db->sql_multi_insert(POLL_OPTIONS_TABLE, $sql_insert_ary);		if (sizeof($poll['poll_options']) < sizeof($cur_poll_options))		{			$sql = 'DELETE FROM ' . POLL_OPTIONS_TABLE . '				WHERE poll_option_id > ' . sizeof($poll['poll_options']) . '					AND topic_id = ' . $data['topic_id'];			$db->sql_query($sql);		}		// If edited, we would need to reset votes (since options can be re-ordered above, you can't be sure if the change is for changing the text or adding an option		if ($mode == 'edit' && sizeof($poll['poll_options']) != sizeof($cur_poll_options))		{			$db->sql_query('DELETE FROM ' . POLL_VOTES_TABLE . ' WHERE topic_id = ' . $data['topic_id']);			$db->sql_query('UPDATE ' . POLL_OPTIONS_TABLE . ' SET poll_option_total = 0 WHERE topic_id = ' . $data['topic_id']);		}	}	// Submit Attachments	if (!empty($data['attachment_data']) && $data['post_id'] && in_array($mode, array('post', 'reply', 'quote', 'edit')))	{		$space_taken = $files_added = 0;		$orphan_rows = array();		foreach ($data['attachment_data'] as $pos => $attach_row)		{			$orphan_rows[(int) $attach_row['attach_id']] = array();		}		if (sizeof($orphan_rows))		{			$sql = 'SELECT attach_id, filesize, physical_filename				FROM ' . ATTACHMENTS_TABLE . '				WHERE ' . $db->sql_in_set('attach_id', array_keys($orphan_rows)) . '					AND is_orphan = 1					AND poster_id = ' . $user->data['user_id'];			$result = $db->sql_query($sql);			$orphan_rows = array();			while ($row = $db->sql_fetchrow($result))			{				$orphan_rows[$row['attach_id']] = $row;			}			$db->sql_freeresult($result);		}		foreach ($data['attachment_data'] as $pos => $attach_row)		{			if ($attach_row['is_orphan'] && !isset($orphan_rows[$attach_row['attach_id']]))			{				continue;			}			if (!$attach_row['is_orphan'])			{				// update entry in db if attachment already stored in db and filespace				$sql = 'UPDATE ' . ATTACHMENTS_TABLE . "					SET attach_comment = '" . $db->sql_escape($attach_row['attach_comment']) . "'					WHERE attach_id = " . (int) $attach_row['attach_id'] . '						AND is_orphan = 0';				$db->sql_query($sql);			}			else			{				// insert attachment into db				if (!@file_exists($phpbb_root_path . $config['upload_path'] . '/' . utf8_basename($orphan_rows[$attach_row['attach_id']]['physical_filename'])))				{					continue;				}				$space_taken += $orphan_rows[$attach_row['attach_id']]['filesize'];				$files_added++;				$attach_sql = array(					'post_msg_id'		=> $data['post_id'],					'topic_id'			=> $data['topic_id'],					'is_orphan'			=> 0,					'poster_id'			=> $poster_id,					'attach_comment'	=> $attach_row['attach_comment'],				);				$sql = 'UPDATE ' . ATTACHMENTS_TABLE . ' SET ' . $db->sql_build_array('UPDATE', $attach_sql) . '					WHERE attach_id = ' . $attach_row['attach_id'] . '						AND is_orphan = 1						AND poster_id = ' . $user->data['user_id'];				$db->sql_query($sql);			}		}		if ($space_taken && $files_added)		{			set_config_count('upload_dir_size', $space_taken, true);			set_config_count('num_files', $files_added, true);		}	}	// we need to update the last forum information	// only applicable if the topic is not global and it is approved	// we also check to make sure we are not dealing with globaling the latest topic (pretty rare but still needs to be checked)	if ($topic_type != POST_GLOBAL && !$make_global && ($post_approved || !$data['post_approved']))	{		// the last post makes us update the forum table. This can happen if...		// We make a new topic		// We reply to a topic		// We edit the last post in a topic and this post is the latest in the forum (maybe)		// We edit the only post in the topic		// We edit the first post in the topic and all the other posts are not approved		if (($post_mode == 'post' || $post_mode == 'reply') && $post_approved)		{			$sql_data[FORUMS_TABLE]['stat'][] = 'forum_last_post_id = ' . $data['post_id'];			$sql_data[FORUMS_TABLE]['stat'][] = "forum_last_post_subject = '" . $db->sql_escape($subject) . "'";			$sql_data[FORUMS_TABLE]['stat'][] = 'forum_last_post_time = ' . $current_time;			$sql_data[FORUMS_TABLE]['stat'][] = 'forum_last_poster_id = ' . (int) $user->data['user_id'];			$sql_data[FORUMS_TABLE]['stat'][] = "forum_last_poster_name = '" . $db->sql_escape((!$user->data['is_registered'] && $username) ? $username : (($user->data['user_id'] != ANONYMOUS) ? $user->data['username'] : '')) . "'";			$sql_data[FORUMS_TABLE]['stat'][] = "forum_last_poster_colour = '" . $db->sql_escape($user->data['user_colour']) . "'";		}		else if ($post_mode == 'edit_last_post' || $post_mode == 'edit_topic' || ($post_mode == 'edit_first_post' && !$data['topic_replies']))		{			// this does not _necessarily_ mean that we must update the info again,			// it just means that we might have to			$sql = 'SELECT forum_last_post_id, forum_last_post_subject				FROM ' . FORUMS_TABLE . '				WHERE forum_id = ' . (int) $data['forum_id'];			$result = $db->sql_query($sql);			$row = $db->sql_fetchrow($result);			$db->sql_freeresult($result);			// this post is the latest post in the forum, better update			if ($row['forum_last_post_id'] == $data['post_id'])			{				// If post approved and subject changed, or poster is anonymous, we need to update the forum_last* rows				if ($post_approved && ($row['forum_last_post_subject'] !== $subject || $data['poster_id'] == ANONYMOUS))				{					// the post's subject changed					if ($row['forum_last_post_subject'] !== $subject)					{						$sql_data[FORUMS_TABLE]['stat'][] = 'forum_last_post_subject = \'' . $db->sql_escape($subject) . '\'';					}					// Update the user name if poster is anonymous... just in case an admin changed it					if ($data['poster_id'] == ANONYMOUS)					{						$sql_data[FORUMS_TABLE]['stat'][] = "forum_last_poster_name = '" . $db->sql_escape($username) . "'";					}				}				else if ($data['post_approved'] !== $post_approved)				{					// we need a fresh change of socks, everything has become invalidated					$sql = 'SELECT MAX(topic_last_post_id) as last_post_id						FROM ' . TOPICS_TABLE . '						WHERE forum_id = ' . (int) $data['forum_id'] . '							AND topic_approved = 1';					$result = $db->sql_query($sql);					$row = $db->sql_fetchrow($result);					$db->sql_freeresult($result);					// any posts left in this forum?					if (!empty($row['last_post_id']))					{						$sql = 'SELECT p.post_id, p.post_subject, p.post_time, p.poster_id, p.post_username, u.user_id, u.username, u.user_colour							FROM ' . POSTS_TABLE . ' p, ' . USERS_TABLE . ' u							WHERE p.poster_id = u.user_id								AND p.post_id = ' . (int) $row['last_post_id'];						$result = $db->sql_query($sql);						$row = $db->sql_fetchrow($result);						$db->sql_freeresult($result);						// salvation, a post is found! jam it into the forums table						$sql_data[FORUMS_TABLE]['stat'][] = 'forum_last_post_id = ' . (int) $row['post_id'];						$sql_data[FORUMS_TABLE]['stat'][] = "forum_last_post_subject = '" . $db->sql_escape($row['post_subject']) . "'";						$sql_data[FORUMS_TABLE]['stat'][] = 'forum_last_post_time = ' . (int) $row['post_time'];						$sql_data[FORUMS_TABLE]['stat'][] = 'forum_last_poster_id = ' . (int) $row['poster_id'];						$sql_data[FORUMS_TABLE]['stat'][] = "forum_last_poster_name = '" . $db->sql_escape(($row['poster_id'] == ANONYMOUS) ? $row['post_username'] : $row['username']) . "'";						$sql_data[FORUMS_TABLE]['stat'][] = "forum_last_poster_colour = '" . $db->sql_escape($row['user_colour']) . "'";					}					else					{						// just our luck, the last topic in the forum has just been turned unapproved...						$sql_data[FORUMS_TABLE]['stat'][] = 'forum_last_post_id = 0';						$sql_data[FORUMS_TABLE]['stat'][] = "forum_last_post_subject = ''";						$sql_data[FORUMS_TABLE]['stat'][] = 'forum_last_post_time = 0';						$sql_data[FORUMS_TABLE]['stat'][] = 'forum_last_poster_id = 0';						$sql_data[FORUMS_TABLE]['stat'][] = "forum_last_poster_name = ''";						$sql_data[FORUMS_TABLE]['stat'][] = "forum_last_poster_colour = ''";					}				}			}		}	}	else if ($make_global)	{		// somebody decided to be a party pooper, we must recalculate the whole shebang (maybe)		$sql = 'SELECT forum_last_post_id			FROM ' . FORUMS_TABLE . '			WHERE forum_id = ' . (int) $data['forum_id'];		$result = $db->sql_query($sql);		$forum_row = $db->sql_fetchrow($result);		$db->sql_freeresult($result);		// we made a topic global, go get new data		if ($topic_row['topic_type'] != POST_GLOBAL && $topic_type == POST_GLOBAL && $forum_row['forum_last_post_id'] == $topic_row['topic_last_post_id'])		{			// we need a fresh change of socks, everything has become invalidated			$sql = 'SELECT MAX(topic_last_post_id) as last_post_id				FROM ' . TOPICS_TABLE . '				WHERE forum_id = ' . (int) $data['forum_id'] . '					AND topic_approved = 1';			$result = $db->sql_query($sql);			$row = $db->sql_fetchrow($result);			$db->sql_freeresult($result);			// any posts left in this forum?			if (!empty($row['last_post_id']))			{				$sql = 'SELECT p.post_id, p.post_subject, p.post_time, p.poster_id, p.post_username, u.user_id, u.username, u.user_colour					FROM ' . POSTS_TABLE . ' p, ' . USERS_TABLE . ' u					WHERE p.poster_id = u.user_id						AND p.post_id = ' . (int) $row['last_post_id'];				$result = $db->sql_query($sql);				$row = $db->sql_fetchrow($result);				$db->sql_freeresult($result);				// salvation, a post is found! jam it into the forums table				$sql_data[FORUMS_TABLE]['stat'][] = 'forum_last_post_id = ' . (int) $row['post_id'];				$sql_data[FORUMS_TABLE]['stat'][] = "forum_last_post_subject = '" . $db->sql_escape($row['post_subject']) . "'";				$sql_data[FORUMS_TABLE]['stat'][] = 'forum_last_post_time = ' . (int) $row['post_time'];				$sql_data[FORUMS_TABLE]['stat'][] = 'forum_last_poster_id = ' . (int) $row['poster_id'];				$sql_data[FORUMS_TABLE]['stat'][] = "forum_last_poster_name = '" . $db->sql_escape(($row['poster_id'] == ANONYMOUS) ? $row['post_username'] : $row['username']) . "'";				$sql_data[FORUMS_TABLE]['stat'][] = "forum_last_poster_colour = '" . $db->sql_escape($row['user_colour']) . "'";			}			else			{				// just our luck, the last topic in the forum has just been globalized...				$sql_data[FORUMS_TABLE]['stat'][] = 'forum_last_post_id = 0';				$sql_data[FORUMS_TABLE]['stat'][] = "forum_last_post_subject = ''";				$sql_data[FORUMS_TABLE]['stat'][] = 'forum_last_post_time = 0';				$sql_data[FORUMS_TABLE]['stat'][] = 'forum_last_poster_id = 0';				$sql_data[FORUMS_TABLE]['stat'][] = "forum_last_poster_name = ''";				$sql_data[FORUMS_TABLE]['stat'][] = "forum_last_poster_colour = ''";			}		}		else if ($topic_row['topic_type'] == POST_GLOBAL && $topic_type != POST_GLOBAL && $forum_row['forum_last_post_id'] < $topic_row['topic_last_post_id'])		{			// this post has a higher id, it is newer			$sql = 'SELECT p.post_id, p.post_subject, p.post_time, p.poster_id, p.post_username, u.user_id, u.username, u.user_colour				FROM ' . POSTS_TABLE . ' p, ' . USERS_TABLE . ' u				WHERE p.poster_id = u.user_id					AND p.post_id = ' . (int) $topic_row['topic_last_post_id'];			$result = $db->sql_query($sql);			$row = $db->sql_fetchrow($result);			$db->sql_freeresult($result);			// salvation, a post is found! jam it into the forums table			$sql_data[FORUMS_TABLE]['stat'][] = 'forum_last_post_id = ' . (int) $row['post_id'];			$sql_data[FORUMS_TABLE]['stat'][] = "forum_last_post_subject = '" . $db->sql_escape($row['post_subject']) . "'";			$sql_data[FORUMS_TABLE]['stat'][] = 'forum_last_post_time = ' . (int) $row['post_time'];			$sql_data[FORUMS_TABLE]['stat'][] = 'forum_last_poster_id = ' . (int) $row['poster_id'];			$sql_data[FORUMS_TABLE]['stat'][] = "forum_last_poster_name = '" . $db->sql_escape(($row['poster_id'] == ANONYMOUS) ? $row['post_username'] : $row['username']) . "'";			$sql_data[FORUMS_TABLE]['stat'][] = "forum_last_poster_colour = '" . $db->sql_escape($row['user_colour']) . "'";		}	}	// topic sync time!	// simply, we update if it is a reply or the last post is edited	if ($post_approved)	{		// reply requires the whole thing		if ($post_mode == 'reply')		{			$sql_data[TOPICS_TABLE]['stat'][] = 'topic_last_post_id = ' . (int) $data['post_id'];			$sql_data[TOPICS_TABLE]['stat'][] = 'topic_last_poster_id = ' . (int) $user->data['user_id'];			$sql_data[TOPICS_TABLE]['stat'][] = "topic_last_poster_name = '" . $db->sql_escape((!$user->data['is_registered'] && $username) ? $username : (($user->data['user_id'] != ANONYMOUS) ? $user->data['username'] : '')) . "'";			$sql_data[TOPICS_TABLE]['stat'][] = "topic_last_poster_colour = '" . (($user->data['user_id'] != ANONYMOUS) ? $db->sql_escape($user->data['user_colour']) : '') . "'";			$sql_data[TOPICS_TABLE]['stat'][] = "topic_last_post_subject = '" . $db->sql_escape($subject) . "'";			$sql_data[TOPICS_TABLE]['stat'][] = 'topic_last_post_time = ' . (int) $current_time;		}		else if ($post_mode == 'edit_last_post' || $post_mode == 'edit_topic' || ($post_mode == 'edit_first_post' && !$data['topic_replies']))		{			// only the subject can be changed from edit			$sql_data[TOPICS_TABLE]['stat'][] = "topic_last_post_subject = '" . $db->sql_escape($subject) . "'";			// Maybe not only the subject, but also changing anonymous usernames. ;)			if ($data['poster_id'] == ANONYMOUS)			{				$sql_data[TOPICS_TABLE]['stat'][] = "topic_last_poster_name = '" . $db->sql_escape($username) . "'";			}		}	}	else if (!$data['post_approved'] && ($post_mode == 'edit_last_post' || $post_mode == 'edit_topic' || ($post_mode == 'edit_first_post' && !$data['topic_replies'])))	{		// like having the rug pulled from under us		$sql = 'SELECT MAX(post_id) as last_post_id			FROM ' . POSTS_TABLE . '			WHERE topic_id = ' . (int) $data['topic_id'] . '				AND post_approved = 1';		$result = $db->sql_query($sql);		$row = $db->sql_fetchrow($result);		$db->sql_freeresult($result);		// any posts left in this forum?		if (!empty($row['last_post_id']))		{			$sql = 'SELECT p.post_id, p.post_subject, p.post_time, p.poster_id, p.post_username, u.user_id, u.username, u.user_colour				FROM ' . POSTS_TABLE . ' p, ' . USERS_TABLE . ' u				WHERE p.poster_id = u.user_id					AND p.post_id = ' . (int) $row['last_post_id'];			$result = $db->sql_query($sql);			$row = $db->sql_fetchrow($result);			$db->sql_freeresult($result);			// salvation, a post is found! jam it into the topics table			$sql_data[TOPICS_TABLE]['stat'][] = 'topic_last_post_id = ' . (int) $row['post_id'];			$sql_data[TOPICS_TABLE]['stat'][] = "topic_last_post_subject = '" . $db->sql_escape($row['post_subject']) . "'";			$sql_data[TOPICS_TABLE]['stat'][] = 'topic_last_post_time = ' . (int) $row['post_time'];			$sql_data[TOPICS_TABLE]['stat'][] = 'topic_last_poster_id = ' . (int) $row['poster_id'];			$sql_data[TOPICS_TABLE]['stat'][] = "topic_last_poster_name = '" . $db->sql_escape(($row['poster_id'] == ANONYMOUS) ? $row['post_username'] : $row['username']) . "'";			$sql_data[TOPICS_TABLE]['stat'][] = "topic_last_poster_colour = '" . $db->sql_escape($row['user_colour']) . "'";		}	}	// Update total post count, do not consider moderated posts/topics	if ($post_approval)	{		if ($post_mode == 'post')		{			set_config_count('num_topics', 1, true);			set_config_count('num_posts', 1, true);		}		if ($post_mode == 'reply')		{			set_config_count('num_posts', 1, true);		}	}	// Update forum stats	$where_sql = array(POSTS_TABLE => 'post_id = ' . $data['post_id'], TOPICS_TABLE => 'topic_id = ' . $data['topic_id'], FORUMS_TABLE => 'forum_id = ' . $data['forum_id'], USERS_TABLE => 'user_id = ' . $poster_id);	foreach ($sql_data as $table => $update_ary)	{		if (isset($update_ary['stat']) && implode('', $update_ary['stat']))		{			$sql = "UPDATE $table SET " . implode(', ', $update_ary['stat']) . ' WHERE ' . $where_sql[$table];			$db->sql_query($sql);		}	}	// Delete topic shadows (if any exist). We do not need a shadow topic for an global announcement	if ($make_global)	{		$sql = 'DELETE FROM ' . TOPICS_TABLE . '			WHERE topic_moved_id = ' . $data['topic_id'];		$db->sql_query($sql);	}	// Committing the transaction before updating search index	$db->sql_transaction('commit');	// Delete draft if post was loaded...	$draft_id = request_var('draft_loaded', 0);	if ($draft_id)	{		$sql = 'DELETE FROM ' . DRAFTS_TABLE . "			WHERE draft_id = $draft_id				AND user_id = {$user->data['user_id']}";		$db->sql_query($sql);	}	// Index message contents	if ($update_search_index && $data['enable_indexing'])	{		// Select the search method and do some additional checks to ensure it can actually be utilised		$search_type = basename($config['search_type']);		if (!file_exists($phpbb_root_path . 'includes/search/' . $search_type . '.' . $phpEx))		{			trigger_error('NO_SUCH_SEARCH_MODULE');		}		if (!class_exists($search_type))		{			include("{$phpbb_root_path}includes/search/$search_type.$phpEx");		}		$error = false;		$search = new $search_type($error);		if ($error)		{			trigger_error($error);		}		$search->index($mode, $data['post_id'], $data['message'], $subject, $poster_id, ($topic_type == POST_GLOBAL) ? 0 : $data['forum_id']);	}	// Topic Notification, do not change if moderator is changing other users posts...	if ($user->data['user_id'] == $poster_id)	{		if (!$data['notify_set'] && $data['notify'])		{			$sql = 'INSERT INTO ' . TOPICS_WATCH_TABLE . ' (user_id, topic_id)				VALUES (' . $user->data['user_id'] . ', ' . $data['topic_id'] . ')';			$db->sql_query($sql);		}		else if (($config['email_enable'] || $config['jab_enable']) && $data['notify_set'] && !$data['notify'])		{			$sql = 'DELETE FROM ' . TOPICS_WATCH_TABLE . '				WHERE user_id = ' . $user->data['user_id'] . '					AND topic_id = ' . $data['topic_id'];			$db->sql_query($sql);		}	}	if ($mode == 'post' || $mode == 'reply' || $mode == 'quote')	{		// Mark this topic as posted to		markread('post', $data['forum_id'], $data['topic_id']);	}	// Mark this topic as read	// We do not use post_time here, this is intended (post_time can have a date in the past if editing a message)	markread('topic', (($topic_type == POST_GLOBAL) ? 0 : $data['forum_id']), $data['topic_id'], time());	//	if ($config['load_db_lastread'] && $user->data['is_registered'])	{		$sql = 'SELECT mark_time			FROM ' . FORUMS_TRACK_TABLE . '			WHERE user_id = ' . $user->data['user_id'] . '				AND forum_id = ' . (($topic_type == POST_GLOBAL) ? 0 : $data['forum_id']);		$result = $db->sql_query($sql);		$f_mark_time = (int) $db->sql_fetchfield('mark_time');		$db->sql_freeresult($result);	}	else if ($config['load_anon_lastread'] || $user->data['is_registered'])	{		$f_mark_time = false;	}	if (($config['load_db_lastread'] && $user->data['is_registered']) || $config['load_anon_lastread'] || $user->data['is_registered'])	{		// Update forum info		if ($topic_type == POST_GLOBAL)		{			$sql = 'SELECT MAX(topic_last_post_time) as forum_last_post_time				FROM ' . TOPICS_TABLE . '				WHERE forum_id = 0';		}		else		{			$sql = 'SELECT forum_last_post_time				FROM ' . FORUMS_TABLE . '				WHERE forum_id = ' . $data['forum_id'];		}		$result = $db->sql_query($sql);		$forum_last_post_time = (int) $db->sql_fetchfield('forum_last_post_time');		$db->sql_freeresult($result);		update_forum_tracking_info((($topic_type == POST_GLOBAL) ? 0 : $data['forum_id']), $forum_last_post_time, $f_mark_time, false);	}	// Send Notifications	if (($mode == 'reply' || $mode == 'quote' || $mode == 'post') && $post_approval)	{		user_notification($mode, $subject, $data['topic_title'], $data['forum_name'], $data['forum_id'], $data['topic_id'], $data['post_id']);	}	$params = $add_anchor = '';	if ($post_approval)	{		$params .= '&amp;t=' . $data['topic_id'];		if ($mode != 'post')		{			$params .= '&amp;p=' . $data['post_id'];			$add_anchor = '#p' . $data['post_id'];		}	}	else if ($mode != 'post' && $post_mode != 'edit_first_post' && $post_mode != 'edit_topic')	{		$params .= '&amp;t=' . $data['topic_id'];	}	$url = (!$params) ? "{$phpbb_root_path}viewforum.$phpEx" : "{$phpbb_root_path}viewtopic.$phpEx";	$url = append_sid($url, 'f=' . $data['forum_id'] . $params) . $add_anchor;	return $url;}/*** Handle topic bumping* @param int $forum_id The ID of the forum the topic is being bumped belongs to* @param int $topic_id The ID of the topic is being bumping* @param array $post_data Passes some topic parameters:*				- 'topic_title'*				- 'topic_last_post_id'*				- 'topic_last_poster_id'*				- 'topic_last_post_subject'*				- 'topic_last_poster_name'*				- 'topic_last_poster_colour'* @param int $bump_time The time at which topic was bumped, usually it is a current time as obtained via time(). * @return string An URL to the bumped topic, example: ./viewtopic.php?forum_id=1&amptopic_id=2&ampp=3#p3*/function phpbb_bump_topic($forum_id, $topic_id, $post_data, $bump_time = false){	global $config, $db, $user, $phpEx, $phpbb_root_path;	if ($bump_time === false)	{		$bump_time = time();	}	// Begin bumping	$db->sql_transaction('begin');	// Update the topic's last post post_time	$sql = 'UPDATE ' . POSTS_TABLE . "		SET post_time = $bump_time		WHERE post_id = {$post_data['topic_last_post_id']}			AND topic_id = $topic_id";	$db->sql_query($sql);	// Sync the topic's last post time, the rest of the topic's last post data isn't changed	$sql = 'UPDATE ' . TOPICS_TABLE . "		SET topic_last_post_time = $bump_time,			topic_bumped = 1,			topic_bumper = " . $user->data['user_id'] . "		WHERE topic_id = $topic_id";	$db->sql_query($sql);	// Update the forum's last post info	$sql = 'UPDATE ' . FORUMS_TABLE . "		SET forum_last_post_id = " . $post_data['topic_last_post_id'] . ",			forum_last_poster_id = " . $post_data['topic_last_poster_id'] . ",			forum_last_post_subject = '" . $db->sql_escape($post_data['topic_last_post_subject']) . "',			forum_last_post_time = $bump_time,			forum_last_poster_name = '" . $db->sql_escape($post_data['topic_last_poster_name']) . "',			forum_last_poster_colour = '" . $db->sql_escape($post_data['topic_last_poster_colour']) . "'		WHERE forum_id = $forum_id";	$db->sql_query($sql);	// Update bumper's time of the last posting to prevent flood	$sql = 'UPDATE ' . USERS_TABLE . "		SET user_lastpost_time = $bump_time		WHERE user_id = " . $user->data['user_id'];	$db->sql_query($sql);	$db->sql_transaction('commit');	// Mark this topic as posted to	markread('post', $forum_id, $topic_id, $bump_time);	// Mark this topic as read	markread('topic', $forum_id, $topic_id, $bump_time);	// Update forum tracking info	if ($config['load_db_lastread'] && $user->data['is_registered'])	{		$sql = 'SELECT mark_time			FROM ' . FORUMS_TRACK_TABLE . '			WHERE user_id = ' . $user->data['user_id'] . '				AND forum_id = ' . $forum_id;		$result = $db->sql_query($sql);		$f_mark_time = (int) $db->sql_fetchfield('mark_time');		$db->sql_freeresult($result);	}	else if ($config['load_anon_lastread'] || $user->data['is_registered'])	{		$f_mark_time = false;	}	if (($config['load_db_lastread'] && $user->data['is_registered']) || $config['load_anon_lastread'] || $user->data['is_registered'])	{		// Update forum info		$sql = 'SELECT forum_last_post_time			FROM ' . FORUMS_TABLE . '			WHERE forum_id = ' . $forum_id;		$result = $db->sql_query($sql);		$forum_last_post_time = (int) $db->sql_fetchfield('forum_last_post_time');		$db->sql_freeresult($result);		update_forum_tracking_info($forum_id, $forum_last_post_time, $f_mark_time, false);	}	add_log('mod', $forum_id, $topic_id, 'LOG_BUMP_TOPIC', $post_data['topic_title']);	$url = append_sid("{$phpbb_root_path}viewtopic.$phpEx", "f=$forum_id&amp;t=$topic_id&amp;p={$post_data['topic_last_post_id']}") . "#p{$post_data['topic_last_post_id']}";	return $url;}?>
<?php/**** @package phpBB3* @version $Id$* @copyright (c) 2009, 2010 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** This script will check your database for potentially dangerous flash BBCode tags*///// Security message://// This script is potentially dangerous.// Remove or comment the next line (die(".... ) to enable this script.// Do NOT FORGET to either remove this script or disable it after you have used it.//die("Please read the first lines of this script for instructions on how to enable it\n");/***/define('IN_PHPBB', true);$phpbb_root_path = (defined('PHPBB_ROOT_PATH')) ? PHPBB_ROOT_PATH : './';$phpEx = substr(strrchr(__FILE__, '.'), 1);include($phpbb_root_path . 'common.' . $phpEx);if (php_sapi_name() != 'cli'){	header('Content-Type: text/plain');}check_table_flash_bbcodes(POSTS_TABLE, 'post_id', 'post_text', 'bbcode_uid', 'bbcode_bitfield');check_table_flash_bbcodes(PRIVMSGS_TABLE, 'msg_id', 'message_text', 'bbcode_uid', 'bbcode_bitfield');check_table_flash_bbcodes(USERS_TABLE, 'user_id', 'user_sig', 'user_sig_bbcode_uid', 'user_sig_bbcode_bitfield');check_table_flash_bbcodes(FORUMS_TABLE, 'forum_id', 'forum_desc', 'forum_desc_uid', 'forum_desc_bitfield');check_table_flash_bbcodes(FORUMS_TABLE, 'forum_id', 'forum_rules', 'forum_rules_uid', 'forum_rules_bitfield');check_table_flash_bbcodes(GROUPS_TABLE, 'group_id', 'group_desc', 'group_desc_uid', 'group_desc_bitfield');echo "If potentially dangerous flash bbcodes were found, please reparse the posts using the Support Toolkit (http://www.phpbb.com/support/stk/) and/or file a ticket in the Incident Tracker (http://www.phpbb.com/incidents/).\n";function check_table_flash_bbcodes($table_name, $id_field, $content_field, $uid_field, $bitfield_field){	echo "Checking $content_field on $table_name\n";	$ids = get_table_flash_bbcode_pkids($table_name, $id_field, $content_field, $uid_field, $bitfield_field);	$size = sizeof($ids);	if ($size)	{		echo "Found $size potentially dangerous flash bbcodes.\n";		echo "$id_field: " . implode(', ', $ids) . "\n";	}	else	{		echo "No potentially dangerous flash bbcodes found.\n";	}	echo "\n";}function get_table_flash_bbcode_pkids($table_name, $id_field, $content_field, $uid_field, $bitfield_field){	global $db;	$ids = array();	$sql = "SELECT $id_field, $content_field, $uid_field, $bitfield_field		FROM $table_name		WHERE $content_field LIKE '%[/flash:%'			AND $bitfield_field <> ''";	$result = $db->sql_query($sql);	while ($row = $db->sql_fetchrow($result))	{		$uid = $row[$uid_field];		// thanks support toolkit		$content = html_entity_decode_utf8($row[$content_field]);		set_var($content, $content, 'string', true);		$content = utf8_normalize_nfc($content);		$bitfield_data = $row[$bitfield_field];		if (!is_valid_flash_bbcode($content, $uid) && has_flash_enabled($bitfield_data))		{			$ids[] = (int) $row[$id_field];		}	}	$db->sql_freeresult($result);	return $ids;}function get_flash_regex($uid){	return "#\[flash=([0-9]+),([0-9]+):$uid\](.*?)\[/flash:$uid\]#";}// extract all valid flash bbcodes// check if the bbcode content is a valid URL for each matchfunction is_valid_flash_bbcode($cleaned_content, $uid){	$regex = get_flash_regex($uid);	$url_regex = get_preg_expression('url');	$www_url_regex = get_preg_expression('www_url');	if (preg_match_all($regex, $cleaned_content, $matches))	{		foreach ($matches[3] as $flash_url)		{			if (!preg_match("#^($url_regex|$www_url_regex)$#i", $flash_url))			{				return false;			}		}	}	return true;}// check if a bitfield includes flash// 11 = flash bitfunction has_flash_enabled($bitfield_data){	$bitfield = new bitfield($bitfield_data);	return $bitfield->get(11);}// taken from support toolkitfunction html_entity_decode_utf8($string){	static $trans_tbl;	// replace numeric entities	$string = preg_replace('~&#x([0-9a-f]+);~ei', 'code2utf8(hexdec("\\1"))', $string);	$string = preg_replace('~&#([0-9]+);~e', 'code2utf8(\\1)', $string);	// replace literal entities	if (!isset($trans_tbl))	{		$trans_tbl = array();		foreach (get_html_translation_table(HTML_ENTITIES) as $val=>$key)			$trans_tbl[$key] = utf8_encode($val);	}	return strtr($string, $trans_tbl);}// taken from support toolkit// Returns the utf string corresponding to the unicode value (from php.net, courtesy - romans@void.lv)function code2utf8($num){	if ($num < 128) return chr($num);	if ($num < 2048) return chr(($num >> 6) + 192) . chr(($num & 63) + 128);	if ($num < 65536) return chr(($num >> 12) + 224) . chr((($num >> 6) & 63) + 128) . chr(($num & 63) + 128);	if ($num < 2097152) return chr(($num >> 18) + 240) . chr((($num >> 12) & 63) + 128) . chr((($num >> 6) & 63) + 128) . chr(($num & 63) + 128);	return '';}
<?php/**** @package install* @version $Id$* @copyright (c) 2006 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @ignore*/if (!defined('IN_PHPBB')){	exit;}/*** Determine if we are able to load a specified PHP module and do so if possible*/function can_load_dll($dll){	// SQLite2 is a tricky thing, from 5.0.0 it requires PDO; if PDO is not loaded we must state that SQLite is unavailable	// as the installer doesn't understand that the extension has a prerequisite.	//	// On top of this sometimes the SQLite extension is compiled for a different version of PDO	// by some Linux distributions which causes phpBB to bomb out with a blank page.	//	// Net result we'll disable automatic inclusion of SQLite support	//	// See: r9618 and #56105	if ($dll == 'sqlite')	{		return false;	}	return ((@ini_get('enable_dl') || strtolower(@ini_get('enable_dl')) == 'on') && (!@ini_get('safe_mode') || strtolower(@ini_get('safe_mode')) == 'off') && function_exists('dl') && @dl($dll . '.' . PHP_SHLIB_SUFFIX)) ? true : false;}/*** Returns an array of available DBMS with some data, if a DBMS is specified it will only* return data for that DBMS and will load its extension if necessary.*/function get_available_dbms($dbms = false, $return_unavailable = false, $only_20x_options = false){	global $lang;	$available_dbms = array(		'firebird'	=> array(			'LABEL'			=> 'FireBird',			'SCHEMA'		=> 'firebird',			'MODULE'		=> 'interbase',			'DELIM'			=> ';;',			'COMMENTS'		=> 'remove_remarks',			'DRIVER'		=> 'firebird',			'AVAILABLE'		=> true,			'2.0.x'			=> false,		),		'mysqli'	=> array(			'LABEL'			=> 'MySQL with MySQLi Extension',			'SCHEMA'		=> 'mysql_41',			'MODULE'		=> 'mysqli',			'DELIM'			=> ';',			'COMMENTS'		=> 'remove_remarks',			'DRIVER'		=> 'mysqli',			'AVAILABLE'		=> true,			'2.0.x'			=> true,		),		'mysql'		=> array(			'LABEL'			=> 'MySQL',			'SCHEMA'		=> 'mysql',			'MODULE'		=> 'mysql',			'DELIM'			=> ';',			'COMMENTS'		=> 'remove_remarks',			'DRIVER'		=> 'mysql',			'AVAILABLE'		=> true,			'2.0.x'			=> true,		),		'mssql'		=> array(			'LABEL'			=> 'MS SQL Server 2000+',			'SCHEMA'		=> 'mssql',			'MODULE'		=> 'mssql',			'DELIM'			=> 'GO',			'COMMENTS'		=> 'remove_comments',			'DRIVER'		=> 'mssql',			'AVAILABLE'		=> true,			'2.0.x'			=> true,		),		'mssql_odbc'=>	array(			'LABEL'			=> 'MS SQL Server [ ODBC ]',			'SCHEMA'		=> 'mssql',			'MODULE'		=> 'odbc',			'DELIM'			=> 'GO',			'COMMENTS'		=> 'remove_comments',			'DRIVER'		=> 'mssql_odbc',			'AVAILABLE'		=> true,			'2.0.x'			=> true,		),		'mssqlnative'		=> array(			'LABEL'			=> 'MS SQL Server 2005+ [ Native ]',			'SCHEMA'		=> 'mssql',			'MODULE'		=> 'sqlsrv',			'DELIM'			=> 'GO',			'COMMENTS'		=> 'remove_comments',			'DRIVER'		=> 'mssqlnative',			'AVAILABLE'		=> true,			'2.0.x'			=> false,		),					'oracle'	=>	array(			'LABEL'			=> 'Oracle',			'SCHEMA'		=> 'oracle',			'MODULE'		=> 'oci8',			'DELIM'			=> '/',			'COMMENTS'		=> 'remove_comments',			'DRIVER'		=> 'oracle',			'AVAILABLE'		=> true,			'2.0.x'			=> false,		),		'postgres' => array(			'LABEL'			=> 'PostgreSQL 7.x/8.x',			'SCHEMA'		=> 'postgres',			'MODULE'		=> 'pgsql',			'DELIM'			=> ';',			'COMMENTS'		=> 'remove_comments',			'DRIVER'		=> 'postgres',			'AVAILABLE'		=> true,			'2.0.x'			=> true,		),		'sqlite'		=> array(			'LABEL'			=> 'SQLite',			'SCHEMA'		=> 'sqlite',			'MODULE'		=> 'sqlite',			'DELIM'			=> ';',			'COMMENTS'		=> 'remove_remarks',			'DRIVER'		=> 'sqlite',			'AVAILABLE'		=> true,			'2.0.x'			=> false,		),	);	if ($dbms)	{		if (isset($available_dbms[$dbms]))		{			$available_dbms = array($dbms => $available_dbms[$dbms]);		}		else		{			return array();		}	}	// now perform some checks whether they are really available	foreach ($available_dbms as $db_name => $db_ary)	{		if ($only_20x_options && !$db_ary['2.0.x'])		{			if ($return_unavailable)			{				$available_dbms[$db_name]['AVAILABLE'] = false;			}			else			{				unset($available_dbms[$db_name]);			}			continue;		}		$dll = $db_ary['MODULE'];		if (!@extension_loaded($dll))		{			if (!can_load_dll($dll))			{				if ($return_unavailable)				{					$available_dbms[$db_name]['AVAILABLE'] = false;				}				else				{					unset($available_dbms[$db_name]);				}				continue;			}		}		$any_db_support = true;	}	if ($return_unavailable)	{		$available_dbms['ANY_DB_SUPPORT'] = $any_db_support;	}	return $available_dbms;}/*** Generate the drop down of available database options*/function dbms_select($default = '', $only_20x_options = false){	global $lang;	$available_dbms = get_available_dbms(false, false, $only_20x_options);	$dbms_options = '';	foreach ($available_dbms as $dbms_name => $details)	{		$selected = ($dbms_name == $default) ? ' selected="selected"' : '';		$dbms_options .= '<option value="' . $dbms_name . '"' . $selected .'>' . $lang['DLL_' . strtoupper($dbms_name)] . '</option>';	}	return $dbms_options;}/*** Get tables of a database** @deprecated*/function get_tables(&$db){	if (!class_exists('phpbb_db_tools'))	{		global $phpbb_root_path, $phpEx;		require($phpbb_root_path . 'includes/db/db_tools.' . $phpEx);	}	$db_tools = new phpbb_db_tools($db);	return $db_tools->sql_list_tables();}/*** Used to test whether we are able to connect to the database the user has specified* and identify any problems (eg there are already tables with the names we want to use* @param	array	$dbms should be of the format of an element of the array returned by {@link get_available_dbms get_available_dbms()}*					necessary extensions should be loaded already*/function connect_check_db($error_connect, &$error, $dbms_details, $table_prefix, $dbhost, $dbuser, $dbpasswd, $dbname, $dbport, $prefix_may_exist = false, $load_dbal = true, $unicode_check = true){	global $phpbb_root_path, $phpEx, $config, $lang;	$dbms = $dbms_details['DRIVER'];	if ($load_dbal)	{		// Include the DB layer		include($phpbb_root_path . 'includes/db/' . $dbms . '.' . $phpEx);	}	// Instantiate it and set return on error true	$sql_db = 'dbal_' . $dbms;	$db = new $sql_db();	$db->sql_return_on_error(true);	// Check that we actually have a database name before going any further.....	if ($dbms_details['DRIVER'] != 'sqlite' && $dbms_details['DRIVER'] != 'oracle' && $dbname === '')	{		$error[] = $lang['INST_ERR_DB_NO_NAME'];		return false;	}	// Make sure we don't have a daft user who thinks having the SQLite database in the forum directory is a good idea	if ($dbms_details['DRIVER'] == 'sqlite' && stripos(phpbb_realpath($dbhost), phpbb_realpath('../')) === 0)	{		$error[] = $lang['INST_ERR_DB_FORUM_PATH'];		return false;	}	// Check the prefix length to ensure that index names are not too long and does not contain invalid characters	switch ($dbms_details['DRIVER'])	{		case 'mysql':		case 'mysqli':			if (strspn($table_prefix, '-./\\') !== 0)			{				$error[] = $lang['INST_ERR_PREFIX_INVALID'];				return false;			}		// no break;		case 'postgres':			$prefix_length = 36;		break;		case 'mssql':		case 'mssql_odbc':		case 'mssqlnative':			$prefix_length = 90;		break;		case 'sqlite':			$prefix_length = 200;		break;		case 'firebird':		case 'oracle':			$prefix_length = 6;		break;	}	if (strlen($table_prefix) > $prefix_length)	{		$error[] = sprintf($lang['INST_ERR_PREFIX_TOO_LONG'], $prefix_length);		return false;	}	// Try and connect ...	if (is_array($db->sql_connect($dbhost, $dbuser, $dbpasswd, $dbname, $dbport, false, true)))	{		$db_error = $db->sql_error();		$error[] = $lang['INST_ERR_DB_CONNECT'] . '<br />' . (($db_error['message']) ? $db_error['message'] : $lang['INST_ERR_DB_NO_ERROR']);	}	else	{		// Likely matches for an existing phpBB installation		if (!$prefix_may_exist)		{			$temp_prefix = strtolower($table_prefix);			$table_ary = array($temp_prefix . 'attachments', $temp_prefix . 'config', $temp_prefix . 'sessions', $temp_prefix . 'topics', $temp_prefix . 'users');			$tables = get_tables($db);			$tables = array_map('strtolower', $tables);			$table_intersect = array_intersect($tables, $table_ary);			if (sizeof($table_intersect))			{				$error[] = $lang['INST_ERR_PREFIX'];			}		}		// Make sure that the user has selected a sensible DBAL for the DBMS actually installed		switch ($dbms_details['DRIVER'])		{			case 'mysqli':				if (version_compare(mysqli_get_server_info($db->db_connect_id), '4.1.3', '<'))				{					$error[] = $lang['INST_ERR_DB_NO_MYSQLI'];				}			break;			case 'sqlite':				if (version_compare(sqlite_libversion(), '2.8.2', '<'))				{					$error[] = $lang['INST_ERR_DB_NO_SQLITE'];				}			break;			case 'firebird':				// check the version of FB, use some hackery if we can't get access to the server info				if ($db->service_handle !== false && function_exists('ibase_server_info'))				{					$val = @ibase_server_info($db->service_handle, IBASE_SVC_SERVER_VERSION);					preg_match('#V([\d.]+)#', $val, $match);					if ($match[1] < 2)					{						$error[] = $lang['INST_ERR_DB_NO_FIREBIRD'];					}					$db_info = @ibase_db_info($db->service_handle, $dbname, IBASE_STS_HDR_PAGES);					preg_match('/^\\s*Page size\\s*(\\d+)/m', $db_info, $regs);					$page_size = intval($regs[1]);					if ($page_size < 8192)					{						$error[] = $lang['INST_ERR_DB_NO_FIREBIRD_PS'];					}				}				else				{					$sql = "SELECT *						FROM RDB$FUNCTIONS						WHERE RDB$SYSTEM_FLAG IS NULL							AND RDB$FUNCTION_NAME = 'CHAR_LENGTH'";					$result = $db->sql_query($sql);					$row = $db->sql_fetchrow($result);					$db->sql_freeresult($result);					// if its a UDF, its too old					if ($row)					{						$error[] = $lang['INST_ERR_DB_NO_FIREBIRD'];					}					else					{						$sql = 'SELECT 1 FROM RDB$DATABASE							WHERE BIN_AND(10, 1) = 0';						$result = $db->sql_query($sql);						if (!$result) // This can only fail if BIN_AND is not defined						{							$error[] = $lang['INST_ERR_DB_NO_FIREBIRD'];						}						$db->sql_freeresult($result);					}					// Setup the stuff for our random table					$char_array = array_merge(range('A', 'Z'), range('0', '9'));					$char_len = mt_rand(7, 9);					$char_array_len = sizeof($char_array) - 1;					$final = '';					for ($i = 0; $i < $char_len; $i++)					{						$final .= $char_array[mt_rand(0, $char_array_len)];					}					// Create some random table					$sql = 'CREATE TABLE ' . $final . " (						FIELD1 VARCHAR(255) CHARACTER SET UTF8 DEFAULT '' NOT NULL COLLATE UNICODE,						FIELD2 INTEGER DEFAULT 0 NOT NULL);";					$db->sql_query($sql);					// Create an index that should fail if the page size is less than 8192					$sql = 'CREATE INDEX ' . $final . ' ON ' . $final . '(FIELD1, FIELD2);';					$db->sql_query($sql);					if (ibase_errmsg() !== false)					{						$error[] = $lang['INST_ERR_DB_NO_FIREBIRD_PS'];					}					else					{						// Kill the old table						$db->sql_query('DROP TABLE ' . $final . ';');					}					unset($final);				}			break;			case 'oracle':				if ($unicode_check)				{					$sql = "SELECT *						FROM NLS_DATABASE_PARAMETERS						WHERE PARAMETER = 'NLS_RDBMS_VERSION'							OR PARAMETER = 'NLS_CHARACTERSET'";					$result = $db->sql_query($sql);					while ($row = $db->sql_fetchrow($result))					{						$stats[$row['parameter']] = $row['value'];					}					$db->sql_freeresult($result);					if (version_compare($stats['NLS_RDBMS_VERSION'], '9.2', '<') && $stats['NLS_CHARACTERSET'] !== 'UTF8')					{						$error[] = $lang['INST_ERR_DB_NO_ORACLE'];					}				}			break;			case 'postgres':				if ($unicode_check)				{					$sql = "SHOW server_encoding;";					$result = $db->sql_query($sql);					$row = $db->sql_fetchrow($result);					$db->sql_freeresult($result);					if ($row['server_encoding'] !== 'UNICODE' && $row['server_encoding'] !== 'UTF8')					{						$error[] = $lang['INST_ERR_DB_NO_POSTGRES'];					}				}			break;		}	}	if ($error_connect && (!isset($error) || !sizeof($error)))	{		return true;	}	return false;}/*** remove_remarks will strip the sql comment lines out of an uploaded sql file*/function remove_remarks(&$sql){	$sql = preg_replace('/\n{2,}/', "\n", preg_replace('/^#.*$/m', "\n", $sql));}/*** split_sql_file will split an uploaded sql file into single sql statements.* Note: expects trim() to have already been run on $sql.*/function split_sql_file($sql, $delimiter){	$sql = str_replace("\r" , '', $sql);	$data = preg_split('/' . preg_quote($delimiter, '/') . '$/m', $sql);	$data = array_map('trim', $data);	// The empty case	$end_data = end($data);	if (empty($end_data))	{		unset($data[key($data)]);	}	return $data;}/*** For replacing {L_*} strings with preg_replace_callback*/function adjust_language_keys_callback($matches){	if (!empty($matches[1]))	{		global $lang, $db;		return (!empty($lang[$matches[1]])) ? $db->sql_escape($lang[$matches[1]]) : $db->sql_escape($matches[1]);	}}?>
<?php/**** @package phpBB3* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @ignore*/define('IN_PHPBB', true);$phpbb_root_path = (defined('PHPBB_ROOT_PATH')) ? PHPBB_ROOT_PATH : './';$phpEx = substr(strrchr(__FILE__, '.'), 1);include($phpbb_root_path . 'common.' . $phpEx);include($phpbb_root_path . 'includes/functions_display.' . $phpEx);// Start session$user->session_begin();$auth->acl($user->data);// Start initial var setup$forum_id	= request_var('f', 0);$mark_read	= request_var('mark', '');$start		= request_var('start', 0);$default_sort_days	= (!empty($user->data['user_topic_show_days'])) ? $user->data['user_topic_show_days'] : 0;$default_sort_key	= (!empty($user->data['user_topic_sortby_type'])) ? $user->data['user_topic_sortby_type'] : 't';$default_sort_dir	= (!empty($user->data['user_topic_sortby_dir'])) ? $user->data['user_topic_sortby_dir'] : 'd';$sort_days	= request_var('st', $default_sort_days);$sort_key	= request_var('sk', $default_sort_key);$sort_dir	= request_var('sd', $default_sort_dir);// Check if the user has actually sent a forum ID with his/her request// If not give them a nice error page.if (!$forum_id){	trigger_error('NO_FORUM');}$sql_from = FORUMS_TABLE . ' f';$lastread_select = '';// Grab appropriate forum dataif ($config['load_db_lastread'] && $user->data['is_registered']){	$sql_from .= ' LEFT JOIN ' . FORUMS_TRACK_TABLE . ' ft ON (ft.user_id = ' . $user->data['user_id'] . '		AND ft.forum_id = f.forum_id)';	$lastread_select .= ', ft.mark_time';}if ($user->data['is_registered']){	$sql_from .= ' LEFT JOIN ' . FORUMS_WATCH_TABLE . ' fw ON (fw.forum_id = f.forum_id AND fw.user_id = ' . $user->data['user_id'] . ')';	$lastread_select .= ', fw.notify_status';}$sql = "SELECT f.* $lastread_select	FROM $sql_from	WHERE f.forum_id = $forum_id";$result = $db->sql_query($sql);$forum_data = $db->sql_fetchrow($result);$db->sql_freeresult($result);if (!$forum_data){	trigger_error('NO_FORUM');}// Configure style, language, etc.$user->setup('viewforum', $forum_data['forum_style']);// Redirect to login upon emailed notification linksif (isset($_GET['e']) && !$user->data['is_registered']){	login_box('', $user->lang['LOGIN_NOTIFY_FORUM']);}// Permissions checkif (!$auth->acl_gets('f_list', 'f_read', $forum_id) || ($forum_data['forum_type'] == FORUM_LINK && $forum_data['forum_link'] && !$auth->acl_get('f_read', $forum_id))){	if ($user->data['user_id'] != ANONYMOUS)	{		trigger_error('SORRY_AUTH_READ');	}	login_box('', $user->lang['LOGIN_VIEWFORUM']);}// Forum is passworded ... check whether access has been granted to this// user this session, if not show login boxif ($forum_data['forum_password']){	login_forum_box($forum_data);}// Is this forum a link? ... User got here either because the// number of clicks is being tracked or they guessed the idif ($forum_data['forum_type'] == FORUM_LINK && $forum_data['forum_link']){	// Does it have click tracking enabled?	if ($forum_data['forum_flags'] & FORUM_FLAG_LINK_TRACK)	{		$sql = 'UPDATE ' . FORUMS_TABLE . '			SET forum_posts = forum_posts + 1			WHERE forum_id = ' . $forum_id;		$db->sql_query($sql);	}	// We redirect to the url. The third parameter indicates that external redirects are allowed.	redirect($forum_data['forum_link'], false, true);	return;}// Build navigation linksgenerate_forum_nav($forum_data);// Forum Rulesif ($auth->acl_get('f_read', $forum_id)){	generate_forum_rules($forum_data);}// Do we have subforums?$active_forum_ary = $moderators = array();if ($forum_data['left_id'] != $forum_data['right_id'] - 1){	list($active_forum_ary, $moderators) = display_forums($forum_data, $config['load_moderators'], $config['load_moderators']);}else{	$template->assign_var('S_HAS_SUBFORUM', false);	if ($config['load_moderators'])	{		get_moderators($moderators, $forum_id);	}}// Dump out the page header and load viewforum templatepage_header($user->lang['VIEW_FORUM'] . ' - ' . $forum_data['forum_name'], true, $forum_id);$template->set_filenames(array(	'body' => 'viewforum_body.html'));make_jumpbox(append_sid("{$phpbb_root_path}viewforum.$phpEx"), $forum_id);$template->assign_vars(array(	'U_VIEW_FORUM'			=> append_sid("{$phpbb_root_path}viewforum.$phpEx", "f=$forum_id" . (($start == 0) ? '' : "&amp;start=$start")),));// Not postable forum or showing active topics?if (!($forum_data['forum_type'] == FORUM_POST || (($forum_data['forum_flags'] & FORUM_FLAG_ACTIVE_TOPICS) && $forum_data['forum_type'] == FORUM_CAT))){	page_footer();}// Ok, if someone has only list-access, we only display the forum list.// We also make this circumstance available to the template in case we want to display a notice. ;)if (!$auth->acl_get('f_read', $forum_id)){	$template->assign_vars(array(		'S_NO_READ_ACCESS'		=> true,	));	page_footer();}// Handle marking postsif ($mark_read == 'topics'){	$token = request_var('hash', '');	if (check_link_hash($token, 'global'))	{		// Add 0 to forums array to mark global announcements correctly		markread('topics', array($forum_id, 0));	}	$redirect_url = append_sid("{$phpbb_root_path}viewforum.$phpEx", 'f=' . $forum_id);	meta_refresh(3, $redirect_url);	trigger_error($user->lang['TOPICS_MARKED'] . '<br /><br />' . sprintf($user->lang['RETURN_FORUM'], '<a href="' . $redirect_url . '">', '</a>'));}// Is a forum specific topic count required?if ($forum_data['forum_topics_per_page']){	$config['topics_per_page'] = $forum_data['forum_topics_per_page'];}// Do the forum Prune thang - cron type job ...if ($forum_data['prune_next'] < time() && $forum_data['enable_prune']){	$template->assign_var('RUN_CRON_TASK', '<img src="' . append_sid($phpbb_root_path . 'cron.' . $phpEx, 'cron_type=prune_forum&amp;f=' . $forum_id) . '" alt="cron" width="1" height="1" />');}// Forum rules and subscription info$s_watching_forum = array(	'link'			=> '',	'title'			=> '',	'is_watching'	=> false,);if (($config['email_enable'] || $config['jab_enable']) && $config['allow_forum_notify'] && $forum_data['forum_type'] == FORUM_POST && ($auth->acl_get('f_subscribe', $forum_id) || $user->data['user_id'] == ANONYMOUS)){	$notify_status = (isset($forum_data['notify_status'])) ? $forum_data['notify_status'] : NULL;	watch_topic_forum('forum', $s_watching_forum, $user->data['user_id'], $forum_id, 0, $notify_status, $start, $forum_data['forum_name']);}$s_forum_rules = '';gen_forum_auth_level('forum', $forum_id, $forum_data['forum_status']);// Topic ordering options$limit_days = array(0 => $user->lang['ALL_TOPICS'], 1 => $user->lang['1_DAY'], 7 => $user->lang['7_DAYS'], 14 => $user->lang['2_WEEKS'], 30 => $user->lang['1_MONTH'], 90 => $user->lang['3_MONTHS'], 180 => $user->lang['6_MONTHS'], 365 => $user->lang['1_YEAR']);$sort_by_text = array('a' => $user->lang['AUTHOR'], 't' => $user->lang['POST_TIME'], 'r' => $user->lang['REPLIES'], 's' => $user->lang['SUBJECT'], 'v' => $user->lang['VIEWS']);$sort_by_sql = array('a' => 't.topic_first_poster_name', 't' => 't.topic_last_post_time', 'r' => 't.topic_replies', 's' => 't.topic_title', 'v' => 't.topic_views');$s_limit_days = $s_sort_key = $s_sort_dir = $u_sort_param = '';gen_sort_selects($limit_days, $sort_by_text, $sort_days, $sort_key, $sort_dir, $s_limit_days, $s_sort_key, $s_sort_dir, $u_sort_param, $default_sort_days, $default_sort_key, $default_sort_dir);// Limit topics to certain time frame, obtain correct topic count// global announcements must not be counted, normal announcements have to// be counted, as forum_topics(_real) includes themif ($sort_days){	$min_post_time = time() - ($sort_days * 86400);	$sql = 'SELECT COUNT(topic_id) AS num_topics		FROM ' . TOPICS_TABLE . "		WHERE forum_id = $forum_id			AND ((topic_type <> " . POST_GLOBAL . " AND topic_last_post_time >= $min_post_time)				OR topic_type = " . POST_ANNOUNCE . ")		" . (($auth->acl_get('m_approve', $forum_id)) ? '' : 'AND topic_approved = 1');	$result = $db->sql_query($sql);	$topics_count = (int) $db->sql_fetchfield('num_topics');	$db->sql_freeresult($result);	if (isset($_POST['sort']))	{		$start = 0;	}	$sql_limit_time = "AND t.topic_last_post_time >= $min_post_time";	// Make sure we have information about day selection ready	$template->assign_var('S_SORT_DAYS', true);}else{	$topics_count = ($auth->acl_get('m_approve', $forum_id)) ? $forum_data['forum_topics_real'] : $forum_data['forum_topics'];	$sql_limit_time = '';}// Make sure $start is set to the last page if it exceeds the amountif ($start < 0 || $start > $topics_count){	$start = ($start < 0) ? 0 : floor(($topics_count - 1) / $config['topics_per_page']) * $config['topics_per_page'];}// Basic pagewide vars$post_alt = ($forum_data['forum_status'] == ITEM_LOCKED) ? $user->lang['FORUM_LOCKED'] : $user->lang['POST_NEW_TOPIC'];// Display active topics?$s_display_active = ($forum_data['forum_type'] == FORUM_CAT && ($forum_data['forum_flags'] & FORUM_FLAG_ACTIVE_TOPICS)) ? true : false;$s_search_hidden_fields = array('fid' => array($forum_id));if ($_SID){	$s_search_hidden_fields['sid'] = $_SID;}if (!empty($_EXTRA_URL)){	foreach ($_EXTRA_URL as $url_param)	{		$url_param = explode('=', $url_param, 2);		$s_hidden_fields[$url_param[0]] = $url_param[1];	}}$template->assign_vars(array(	'MODERATORS'	=> (!empty($moderators[$forum_id])) ? implode(', ', $moderators[$forum_id]) : '',	'POST_IMG'					=> ($forum_data['forum_status'] == ITEM_LOCKED) ? $user->img('button_topic_locked', $post_alt) : $user->img('button_topic_new', $post_alt),	'NEWEST_POST_IMG'			=> $user->img('icon_topic_newest', 'VIEW_NEWEST_POST'),	'LAST_POST_IMG'				=> $user->img('icon_topic_latest', 'VIEW_LATEST_POST'),	'FOLDER_IMG'				=> $user->img('topic_read', 'NO_UNREAD_POSTS'),	'FOLDER_UNREAD_IMG'			=> $user->img('topic_unread', 'UNREAD_POSTS'),	'FOLDER_HOT_IMG'			=> $user->img('topic_read_hot', 'NO_UNREAD_POSTS_HOT'),	'FOLDER_HOT_UNREAD_IMG'		=> $user->img('topic_unread_hot', 'UNREAD_POSTS_HOT'),	'FOLDER_LOCKED_IMG'			=> $user->img('topic_read_locked', 'NO_UNREAD_POSTS_LOCKED'),	'FOLDER_LOCKED_UNREAD_IMG'	=> $user->img('topic_unread_locked', 'UNREAD_POSTS_LOCKED'),	'FOLDER_STICKY_IMG'			=> $user->img('sticky_read', 'POST_STICKY'),	'FOLDER_STICKY_UNREAD_IMG'	=> $user->img('sticky_unread', 'POST_STICKY'),	'FOLDER_ANNOUNCE_IMG'		=> $user->img('announce_read', 'POST_ANNOUNCEMENT'),	'FOLDER_ANNOUNCE_UNREAD_IMG'=> $user->img('announce_unread', 'POST_ANNOUNCEMENT'),	'FOLDER_MOVED_IMG'			=> $user->img('topic_moved', 'TOPIC_MOVED'),	'REPORTED_IMG'				=> $user->img('icon_topic_reported', 'TOPIC_REPORTED'),	'UNAPPROVED_IMG'			=> $user->img('icon_topic_unapproved', 'TOPIC_UNAPPROVED'),	'GOTO_PAGE_IMG'				=> $user->img('icon_post_target', 'GOTO_PAGE'),	'L_NO_TOPICS' 			=> ($forum_data['forum_status'] == ITEM_LOCKED) ? $user->lang['POST_FORUM_LOCKED'] : $user->lang['NO_TOPICS'],	'S_DISPLAY_POST_INFO'	=> ($forum_data['forum_type'] == FORUM_POST && ($auth->acl_get('f_post', $forum_id) || $user->data['user_id'] == ANONYMOUS)) ? true : false,	'S_IS_POSTABLE'			=> ($forum_data['forum_type'] == FORUM_POST) ? true : false,	'S_USER_CAN_POST'		=> ($auth->acl_get('f_post', $forum_id)) ? true : false,	'S_DISPLAY_ACTIVE'		=> $s_display_active,	'S_SELECT_SORT_DIR'		=> $s_sort_dir,	'S_SELECT_SORT_KEY'		=> $s_sort_key,	'S_SELECT_SORT_DAYS'	=> $s_limit_days,	'S_TOPIC_ICONS'			=> ($s_display_active && sizeof($active_forum_ary)) ? max($active_forum_ary['enable_icons']) : (($forum_data['enable_icons']) ? true : false),	'S_WATCH_FORUM_LINK'	=> $s_watching_forum['link'],	'S_WATCH_FORUM_TITLE'	=> $s_watching_forum['title'],	'S_WATCHING_FORUM'		=> $s_watching_forum['is_watching'],	'S_FORUM_ACTION'		=> append_sid("{$phpbb_root_path}viewforum.$phpEx", "f=$forum_id" . (($start == 0) ? '' : "&amp;start=$start")),	'S_DISPLAY_SEARCHBOX'	=> ($auth->acl_get('u_search') && $auth->acl_get('f_search', $forum_id) && $config['load_search']) ? true : false,	'S_SEARCHBOX_ACTION'	=> append_sid("{$phpbb_root_path}search.$phpEx"),	'S_SEARCH_LOCAL_HIDDEN_FIELDS'	=> build_hidden_fields($s_search_hidden_fields),	'S_SINGLE_MODERATOR'	=> (!empty($moderators[$forum_id]) && sizeof($moderators[$forum_id]) > 1) ? false : true,	'S_IS_LOCKED'			=> ($forum_data['forum_status'] == ITEM_LOCKED) ? true : false,	'S_VIEWFORUM'			=> true,	'U_MCP'				=> ($auth->acl_get('m_', $forum_id)) ? append_sid("{$phpbb_root_path}mcp.$phpEx", "f=$forum_id&amp;i=main&amp;mode=forum_view", true, $user->session_id) : '',	'U_POST_NEW_TOPIC'	=> ($auth->acl_get('f_post', $forum_id) || $user->data['user_id'] == ANONYMOUS) ? append_sid("{$phpbb_root_path}posting.$phpEx", 'mode=post&amp;f=' . $forum_id) : '',	'U_VIEW_FORUM'		=> append_sid("{$phpbb_root_path}viewforum.$phpEx", "f=$forum_id" . ((strlen($u_sort_param)) ? "&amp;$u_sort_param" : '') . (($start == 0) ? '' : "&amp;start=$start")),	'U_MARK_TOPICS'		=> ($user->data['is_registered'] || $config['load_anon_lastread']) ? append_sid("{$phpbb_root_path}viewforum.$phpEx", 'hash=' . generate_link_hash('global') . "&amp;f=$forum_id&amp;mark=topics") : '',));// Grab icons$icons = $cache->obtain_icons();// Grab all topic data$rowset = $announcement_list = $topic_list = $global_announce_list = array();$sql_array = array(	'SELECT'	=> 't.*',	'FROM'		=> array(		TOPICS_TABLE		=> 't'	),	'LEFT_JOIN'	=> array(),);$sql_approved = ($auth->acl_get('m_approve', $forum_id)) ? '' : 'AND t.topic_approved = 1';if ($user->data['is_registered']){	if ($config['load_db_track'])	{		$sql_array['LEFT_JOIN'][] = array('FROM' => array(TOPICS_POSTED_TABLE => 'tp'), 'ON' => 'tp.topic_id = t.topic_id AND tp.user_id = ' . $user->data['user_id']);		$sql_array['SELECT'] .= ', tp.topic_posted';	}	if ($config['load_db_lastread'])	{		$sql_array['LEFT_JOIN'][] = array('FROM' => array(TOPICS_TRACK_TABLE => 'tt'), 'ON' => 'tt.topic_id = t.topic_id AND tt.user_id = ' . $user->data['user_id']);		$sql_array['SELECT'] .= ', tt.mark_time';		if ($s_display_active && sizeof($active_forum_ary))		{			$sql_array['LEFT_JOIN'][] = array('FROM' => array(FORUMS_TRACK_TABLE => 'ft'), 'ON' => 'ft.forum_id = t.forum_id AND ft.user_id = ' . $user->data['user_id']);			$sql_array['SELECT'] .= ', ft.mark_time AS forum_mark_time';		}	}}if ($forum_data['forum_type'] == FORUM_POST){	// Obtain announcements ... removed sort ordering, sort by time in all cases	$sql = $db->sql_build_query('SELECT', array(		'SELECT'	=> $sql_array['SELECT'],		'FROM'		=> $sql_array['FROM'],		'LEFT_JOIN'	=> $sql_array['LEFT_JOIN'],		'WHERE'		=> 't.forum_id IN (' . $forum_id . ', 0)			AND t.topic_type IN (' . POST_ANNOUNCE . ', ' . POST_GLOBAL . ')',		'ORDER_BY'	=> 't.topic_time DESC',	));	$result = $db->sql_query($sql);	while ($row = $db->sql_fetchrow($result))	{		if (!$row['topic_approved'] && !$auth->acl_get('m_approve', $row['forum_id']))		{			// Do not display announcements that are waiting for approval.			continue;		}		$rowset[$row['topic_id']] = $row;		$announcement_list[] = $row['topic_id'];		if ($row['topic_type'] == POST_GLOBAL)		{			$global_announce_list[$row['topic_id']] = true;		}		else		{			$topics_count--;		}	}	$db->sql_freeresult($result);}// If the user is trying to reach late pages, start searching from the end$store_reverse = false;$sql_limit = $config['topics_per_page'];if ($start > $topics_count / 2){	$store_reverse = true;	if ($start + $config['topics_per_page'] > $topics_count)	{		$sql_limit = min($config['topics_per_page'], max(1, $topics_count - $start));	}	// Select the sort order	$sql_sort_order = $sort_by_sql[$sort_key] . ' ' . (($sort_dir == 'd') ? 'ASC' : 'DESC');	$sql_start = max(0, $topics_count - $sql_limit - $start);}else{	// Select the sort order	$sql_sort_order = $sort_by_sql[$sort_key] . ' ' . (($sort_dir == 'd') ? 'DESC' : 'ASC');	$sql_start = $start;}if ($forum_data['forum_type'] == FORUM_POST || !sizeof($active_forum_ary)){	$sql_where = 't.forum_id = ' . $forum_id;}else if (empty($active_forum_ary['exclude_forum_id'])){	$sql_where = $db->sql_in_set('t.forum_id', $active_forum_ary['forum_id']);}else{	$get_forum_ids = array_diff($active_forum_ary['forum_id'], $active_forum_ary['exclude_forum_id']);	$sql_where = (sizeof($get_forum_ids)) ? $db->sql_in_set('t.forum_id', $get_forum_ids) : 't.forum_id = ' . $forum_id;}// Grab just the sorted topic ids$sql = 'SELECT t.topic_id	FROM ' . TOPICS_TABLE . " t	WHERE $sql_where		AND t.topic_type IN (" . POST_NORMAL . ', ' . POST_STICKY . ")		$sql_approved		$sql_limit_time	ORDER BY t.topic_type " . ((!$store_reverse) ? 'DESC' : 'ASC') . ', ' . $sql_sort_order;$result = $db->sql_query_limit($sql, $sql_limit, $sql_start);while ($row = $db->sql_fetchrow($result)){	$topic_list[] = (int) $row['topic_id'];}$db->sql_freeresult($result);// For storing shadow topics$shadow_topic_list = array();if (sizeof($topic_list)){	// SQL array for obtaining topics/stickies	$sql_array = array(		'SELECT'		=> $sql_array['SELECT'],		'FROM'			=> $sql_array['FROM'],		'LEFT_JOIN'		=> $sql_array['LEFT_JOIN'],		'WHERE'			=> $db->sql_in_set('t.topic_id', $topic_list),	);	// If store_reverse, then first obtain topics, then stickies, else the other way around...	// Funnily enough you typically save one query if going from the last page to the middle (store_reverse) because	// the number of stickies are not known	$sql = $db->sql_build_query('SELECT', $sql_array);	$result = $db->sql_query($sql);	while ($row = $db->sql_fetchrow($result))	{		if ($row['topic_status'] == ITEM_MOVED)		{			$shadow_topic_list[$row['topic_moved_id']] = $row['topic_id'];		}		$rowset[$row['topic_id']] = $row;	}	$db->sql_freeresult($result);}// If we have some shadow topics, update the rowset to reflect their topic informationif (sizeof($shadow_topic_list)){	$sql = 'SELECT *		FROM ' . TOPICS_TABLE . '		WHERE ' . $db->sql_in_set('topic_id', array_keys($shadow_topic_list));	$result = $db->sql_query($sql);	while ($row = $db->sql_fetchrow($result))	{		$orig_topic_id = $shadow_topic_list[$row['topic_id']];		// If the shadow topic is already listed within the rowset (happens for active topics for example), then do not include it...		if (isset($rowset[$row['topic_id']]))		{			// We need to remove any trace regarding this topic. :)			unset($rowset[$orig_topic_id]);			unset($topic_list[array_search($orig_topic_id, $topic_list)]);			$topics_count--;			continue;		}		// Do not include those topics the user has no permission to access		if (!$auth->acl_get('f_read', $row['forum_id']))		{			// We need to remove any trace regarding this topic. :)			unset($rowset[$orig_topic_id]);			unset($topic_list[array_search($orig_topic_id, $topic_list)]);			$topics_count--;			continue;		}		// We want to retain some values		$row = array_merge($row, array(			'topic_moved_id'	=> $rowset[$orig_topic_id]['topic_moved_id'],			'topic_status'		=> $rowset[$orig_topic_id]['topic_status'],			'topic_type'		=> $rowset[$orig_topic_id]['topic_type'],			'topic_title'		=> $rowset[$orig_topic_id]['topic_title'],		));		// Shadow topics are never reported		$row['topic_reported'] = 0;		$rowset[$orig_topic_id] = $row;	}	$db->sql_freeresult($result);}unset($shadow_topic_list);// Ok, adjust topics count for active topics listif ($s_display_active){	$topics_count = 1;}// We need to readd the local announcements to the forums total topic count, otherwise the number is different from the one on the forum list$total_topic_count = $topics_count + sizeof($announcement_list) - sizeof($global_announce_list);$template->assign_vars(array(	'PAGINATION'	=> generate_pagination(append_sid("{$phpbb_root_path}viewforum.$phpEx", "f=$forum_id" . ((strlen($u_sort_param)) ? "&amp;$u_sort_param" : '')), $topics_count, $config['topics_per_page'], $start),	'PAGE_NUMBER'	=> on_page($topics_count, $config['topics_per_page'], $start),	'TOTAL_TOPICS'	=> ($s_display_active) ? false : (($total_topic_count == 1) ? $user->lang['VIEW_FORUM_TOPIC'] : sprintf($user->lang['VIEW_FORUM_TOPICS'], $total_topic_count))));$topic_list = ($store_reverse) ? array_merge($announcement_list, array_reverse($topic_list)) : array_merge($announcement_list, $topic_list);$topic_tracking_info = $tracking_topics = array();// Okay, lets dump out the page ...if (sizeof($topic_list)){	$mark_forum_read = true;	$mark_time_forum = 0;	// Active topics?	if ($s_display_active && sizeof($active_forum_ary))	{		// Generate topic forum list...		$topic_forum_list = array();		foreach ($rowset as $t_id => $row)		{			$topic_forum_list[$row['forum_id']]['forum_mark_time'] = ($config['load_db_lastread'] && $user->data['is_registered'] && isset($row['forum_mark_time'])) ? $row['forum_mark_time'] : 0;			$topic_forum_list[$row['forum_id']]['topics'][] = $t_id;		}		if ($config['load_db_lastread'] && $user->data['is_registered'])		{			foreach ($topic_forum_list as $f_id => $topic_row)			{				$topic_tracking_info += get_topic_tracking($f_id, $topic_row['topics'], $rowset, array($f_id => $topic_row['forum_mark_time']), false);			}		}		else if ($config['load_anon_lastread'] || $user->data['is_registered'])		{			foreach ($topic_forum_list as $f_id => $topic_row)			{				$topic_tracking_info += get_complete_topic_tracking($f_id, $topic_row['topics'], false);			}		}		unset($topic_forum_list);	}	else	{		if ($config['load_db_lastread'] && $user->data['is_registered'])		{			$topic_tracking_info = get_topic_tracking($forum_id, $topic_list, $rowset, array($forum_id => $forum_data['mark_time']), $global_announce_list);			$mark_time_forum = (!empty($forum_data['mark_time'])) ? $forum_data['mark_time'] : $user->data['user_lastmark'];		}		else if ($config['load_anon_lastread'] || $user->data['is_registered'])		{			$topic_tracking_info = get_complete_topic_tracking($forum_id, $topic_list, $global_announce_list);			if (!$user->data['is_registered'])			{				$user->data['user_lastmark'] = (isset($tracking_topics['l'])) ? (int) (base_convert($tracking_topics['l'], 36, 10) + $config['board_startdate']) : 0;			}			$mark_time_forum = (isset($tracking_topics['f'][$forum_id])) ? (int) (base_convert($tracking_topics['f'][$forum_id], 36, 10) + $config['board_startdate']) : $user->data['user_lastmark'];		}	}	$s_type_switch = 0;	foreach ($topic_list as $topic_id)	{		$row = &$rowset[$topic_id];		$topic_forum_id = ($row['forum_id']) ? (int) $row['forum_id'] : $forum_id;		// This will allow the style designer to output a different header		// or even separate the list of announcements from sticky and normal topics		$s_type_switch_test = ($row['topic_type'] == POST_ANNOUNCE || $row['topic_type'] == POST_GLOBAL) ? 1 : 0;		// Replies		$replies = ($auth->acl_get('m_approve', $topic_forum_id)) ? $row['topic_replies_real'] : $row['topic_replies'];		if ($row['topic_status'] == ITEM_MOVED)		{			$topic_id = $row['topic_moved_id'];			$unread_topic = false;		}		else		{			$unread_topic = (isset($topic_tracking_info[$topic_id]) && $row['topic_last_post_time'] > $topic_tracking_info[$topic_id]) ? true : false;		}		// Get folder img, topic status/type related information		$folder_img = $folder_alt = $topic_type = '';		topic_status($row, $replies, $unread_topic, $folder_img, $folder_alt, $topic_type);		// Generate all the URIs ...		$view_topic_url_params = 'f=' . $topic_forum_id . '&amp;t=' . $topic_id;		$view_topic_url = append_sid("{$phpbb_root_path}viewtopic.$phpEx", $view_topic_url_params);		$topic_unapproved = (!$row['topic_approved'] && $auth->acl_get('m_approve', $topic_forum_id)) ? true : false;		$posts_unapproved = ($row['topic_approved'] && $row['topic_replies'] < $row['topic_replies_real'] && $auth->acl_get('m_approve', $topic_forum_id)) ? true : false;		$u_mcp_queue = ($topic_unapproved || $posts_unapproved) ? append_sid("{$phpbb_root_path}mcp.$phpEx", 'i=queue&amp;mode=' . (($topic_unapproved) ? 'approve_details' : 'unapproved_posts') . "&amp;t=$topic_id", true, $user->session_id) : '';		// Send vars to template		$template->assign_block_vars('topicrow', array(			'FORUM_ID'					=> $topic_forum_id,			'TOPIC_ID'					=> $topic_id,			'TOPIC_AUTHOR'				=> get_username_string('username', $row['topic_poster'], $row['topic_first_poster_name'], $row['topic_first_poster_colour']),			'TOPIC_AUTHOR_COLOUR'		=> get_username_string('colour', $row['topic_poster'], $row['topic_first_poster_name'], $row['topic_first_poster_colour']),			'TOPIC_AUTHOR_FULL'			=> get_username_string('full', $row['topic_poster'], $row['topic_first_poster_name'], $row['topic_first_poster_colour']),			'FIRST_POST_TIME'			=> $user->format_date($row['topic_time']),			'LAST_POST_SUBJECT'			=> censor_text($row['topic_last_post_subject']),			'LAST_POST_TIME'			=> $user->format_date($row['topic_last_post_time']),			'LAST_VIEW_TIME'			=> $user->format_date($row['topic_last_view_time']),			'LAST_POST_AUTHOR'			=> get_username_string('username', $row['topic_last_poster_id'], $row['topic_last_poster_name'], $row['topic_last_poster_colour']),			'LAST_POST_AUTHOR_COLOUR'	=> get_username_string('colour', $row['topic_last_poster_id'], $row['topic_last_poster_name'], $row['topic_last_poster_colour']),			'LAST_POST_AUTHOR_FULL'		=> get_username_string('full', $row['topic_last_poster_id'], $row['topic_last_poster_name'], $row['topic_last_poster_colour']),			'PAGINATION'		=> topic_generate_pagination($replies, $view_topic_url),			'REPLIES'			=> $replies,			'VIEWS'				=> $row['topic_views'],			'TOPIC_TITLE'		=> censor_text($row['topic_title']),			'TOPIC_TYPE'		=> $topic_type,			'TOPIC_FOLDER_IMG'		=> $user->img($folder_img, $folder_alt),			'TOPIC_FOLDER_IMG_SRC'	=> $user->img($folder_img, $folder_alt, false, '', 'src'),			'TOPIC_FOLDER_IMG_ALT'	=> $user->lang[$folder_alt],			'TOPIC_FOLDER_IMG_WIDTH'=> $user->img($folder_img, '', false, '', 'width'),			'TOPIC_FOLDER_IMG_HEIGHT'	=> $user->img($folder_img, '', false, '', 'height'),			'TOPIC_ICON_IMG'		=> (!empty($icons[$row['icon_id']])) ? $icons[$row['icon_id']]['img'] : '',			'TOPIC_ICON_IMG_WIDTH'	=> (!empty($icons[$row['icon_id']])) ? $icons[$row['icon_id']]['width'] : '',			'TOPIC_ICON_IMG_HEIGHT'	=> (!empty($icons[$row['icon_id']])) ? $icons[$row['icon_id']]['height'] : '',			'ATTACH_ICON_IMG'		=> ($auth->acl_get('u_download') && $auth->acl_get('f_download', $topic_forum_id) && $row['topic_attachment']) ? $user->img('icon_topic_attach', $user->lang['TOTAL_ATTACHMENTS']) : '',			'UNAPPROVED_IMG'		=> ($topic_unapproved || $posts_unapproved) ? $user->img('icon_topic_unapproved', ($topic_unapproved) ? 'TOPIC_UNAPPROVED' : 'POSTS_UNAPPROVED') : '',			'S_TOPIC_TYPE'			=> $row['topic_type'],			'S_USER_POSTED'			=> (isset($row['topic_posted']) && $row['topic_posted']) ? true : false,			'S_UNREAD_TOPIC'		=> $unread_topic,			'S_TOPIC_REPORTED'		=> (!empty($row['topic_reported']) && $auth->acl_get('m_report', $topic_forum_id)) ? true : false,			'S_TOPIC_UNAPPROVED'	=> $topic_unapproved,			'S_POSTS_UNAPPROVED'	=> $posts_unapproved,			'S_HAS_POLL'			=> ($row['poll_start']) ? true : false,			'S_POST_ANNOUNCE'		=> ($row['topic_type'] == POST_ANNOUNCE) ? true : false,			'S_POST_GLOBAL'			=> ($row['topic_type'] == POST_GLOBAL) ? true : false,			'S_POST_STICKY'			=> ($row['topic_type'] == POST_STICKY) ? true : false,			'S_TOPIC_LOCKED'		=> ($row['topic_status'] == ITEM_LOCKED) ? true : false,			'S_TOPIC_MOVED'			=> ($row['topic_status'] == ITEM_MOVED) ? true : false,			'U_NEWEST_POST'			=> append_sid("{$phpbb_root_path}viewtopic.$phpEx", $view_topic_url_params . '&amp;view=unread') . '#unread',			'U_LAST_POST'			=> append_sid("{$phpbb_root_path}viewtopic.$phpEx", $view_topic_url_params . '&amp;p=' . $row['topic_last_post_id']) . '#p' . $row['topic_last_post_id'],			'U_LAST_POST_AUTHOR'	=> get_username_string('profile', $row['topic_last_poster_id'], $row['topic_last_poster_name'], $row['topic_last_poster_colour']),			'U_TOPIC_AUTHOR'		=> get_username_string('profile', $row['topic_poster'], $row['topic_first_poster_name'], $row['topic_first_poster_colour']),			'U_VIEW_TOPIC'			=> $view_topic_url,			'U_MCP_REPORT'			=> append_sid("{$phpbb_root_path}mcp.$phpEx", 'i=reports&amp;mode=reports&amp;f=' . $topic_forum_id . '&amp;t=' . $topic_id, true, $user->session_id),			'U_MCP_QUEUE'			=> $u_mcp_queue,			'S_TOPIC_TYPE_SWITCH'	=> ($s_type_switch == $s_type_switch_test) ? -1 : $s_type_switch_test)		);		$s_type_switch = ($row['topic_type'] == POST_ANNOUNCE || $row['topic_type'] == POST_GLOBAL) ? 1 : 0;		if ($unread_topic)		{			$mark_forum_read = false;		}		unset($rowset[$topic_id]);	}}// This is rather a fudge but it's the best I can think of without requiring information// on all topics (as we do in 2.0.x). It looks for unread or new topics, if it doesn't find// any it updates the forum last read cookie. This requires that the user visit the forum// after reading a topicif ($forum_data['forum_type'] == FORUM_POST && sizeof($topic_list) && $mark_forum_read){	update_forum_tracking_info($forum_id, $forum_data['forum_last_post_time'], false, $mark_time_forum);}page_footer();?>
<?php/**** @package acp* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @ignore*/if (!defined('IN_PHPBB')){	exit;}/*** @package acp*/class acp_users{	var $u_action;	var $p_master;	function acp_users(&$p_master)	{		$this->p_master = &$p_master;	}	function main($id, $mode)	{		global $config, $db, $user, $auth, $template, $cache;		global $phpbb_root_path, $phpbb_admin_path, $phpEx, $table_prefix, $file_uploads;		$user->add_lang(array('posting', 'ucp', 'acp/users'));		$this->tpl_name = 'acp_users';		$this->page_title = 'ACP_USER_' . strtoupper($mode);		$error		= array();		$username	= utf8_normalize_nfc(request_var('username', '', true));		$user_id	= request_var('u', 0);		$action		= request_var('action', '');		$submit		= (isset($_POST['update']) && !isset($_POST['cancel'])) ? true : false;		$form_name = 'acp_users';		add_form_key($form_name);		// Whois (special case)		if ($action == 'whois')		{			include($phpbb_root_path . 'includes/functions_user.' . $phpEx);			$this->page_title = 'WHOIS';			$this->tpl_name = 'simple_body';			$user_ip = request_var('user_ip', '');			$domain = gethostbyaddr($user_ip);			$ipwhois = user_ipwhois($user_ip);			$template->assign_vars(array(				'MESSAGE_TITLE'		=> sprintf($user->lang['IP_WHOIS_FOR'], $domain),				'MESSAGE_TEXT'		=> nl2br($ipwhois))			);			return;		}		// Show user selection mask		if (!$username && !$user_id)		{			$this->page_title = 'SELECT_USER';			$template->assign_vars(array(				'U_ACTION'			=> $this->u_action,				'ANONYMOUS_USER_ID'	=> ANONYMOUS,				'S_SELECT_USER'		=> true,				'U_FIND_USERNAME'	=> append_sid("{$phpbb_root_path}memberlist.$phpEx", 'mode=searchuser&amp;form=select_user&amp;field=username&amp;select_single=true'),			));			return;		}		if (!$user_id)		{			$sql = 'SELECT user_id				FROM ' . USERS_TABLE . "				WHERE username_clean = '" . $db->sql_escape(utf8_clean_string($username)) . "'";			$result = $db->sql_query($sql);			$user_id = (int) $db->sql_fetchfield('user_id');			$db->sql_freeresult($result);			if (!$user_id)			{				trigger_error($user->lang['NO_USER'] . adm_back_link($this->u_action), E_USER_WARNING);			}		}		// Generate content for all modes		$sql = 'SELECT u.*, s.*			FROM ' . USERS_TABLE . ' u				LEFT JOIN ' . SESSIONS_TABLE . ' s ON (s.session_user_id = u.user_id)			WHERE u.user_id = ' . $user_id . '			ORDER BY s.session_time DESC';		$result = $db->sql_query_limit($sql, 1);		$user_row = $db->sql_fetchrow($result);		$db->sql_freeresult($result);		if (!$user_row)		{			trigger_error($user->lang['NO_USER'] . adm_back_link($this->u_action), E_USER_WARNING);		}		// Generate overall "header" for user admin		$s_form_options = '';		// Build modes dropdown list		$sql = 'SELECT module_mode, module_auth			FROM ' . MODULES_TABLE . "			WHERE module_basename = 'users'				AND module_enabled = 1				AND module_class = 'acp'			ORDER BY left_id, module_mode";		$result = $db->sql_query($sql);		$dropdown_modes = array();		while ($row = $db->sql_fetchrow($result))		{			if (!$this->p_master->module_auth($row['module_auth']))			{				continue;			}			$dropdown_modes[$row['module_mode']] = true;		}		$db->sql_freeresult($result);		foreach ($dropdown_modes as $module_mode => $null)		{			$selected = ($mode == $module_mode) ? ' selected="selected"' : '';			$s_form_options .= '<option value="' . $module_mode . '"' . $selected . '>' . $user->lang['ACP_USER_' . strtoupper($module_mode)] . '</option>';		}		$template->assign_vars(array(			'U_BACK'			=> $this->u_action,			'U_MODE_SELECT'		=> append_sid("{$phpbb_admin_path}index.$phpEx", "i=$id&amp;u=$user_id"),			'U_ACTION'			=> $this->u_action . '&amp;u=' . $user_id,			'S_FORM_OPTIONS'	=> $s_form_options,			'MANAGED_USERNAME'	=> $user_row['username'])		);		// Prevent normal users/admins change/view founders if they are not a founder by themselves		if ($user->data['user_type'] != USER_FOUNDER && $user_row['user_type'] == USER_FOUNDER)		{			trigger_error($user->lang['NOT_MANAGE_FOUNDER'] . adm_back_link($this->u_action), E_USER_WARNING);		}		switch ($mode)		{			case 'overview':				include($phpbb_root_path . 'includes/functions_user.' . $phpEx);				$user->add_lang('acp/ban');				$delete			= request_var('delete', 0);				$delete_type	= request_var('delete_type', '');				$ip				= request_var('ip', 'ip');				if ($submit)				{					// You can't delete the founder					if ($delete && $user_row['user_type'] != USER_FOUNDER)					{						if (!$auth->acl_get('a_userdel'))						{							trigger_error($user->lang['NO_AUTH_OPERATION'] . adm_back_link($this->u_action . '&amp;u=' . $user_id), E_USER_WARNING);						}						// Check if the user wants to remove himself or the guest user account						if ($user_id == ANONYMOUS)						{							trigger_error($user->lang['CANNOT_REMOVE_ANONYMOUS'] . adm_back_link($this->u_action . '&amp;u=' . $user_id), E_USER_WARNING);						}						if ($user_id == $user->data['user_id'])						{							trigger_error($user->lang['CANNOT_REMOVE_YOURSELF'] . adm_back_link($this->u_action . '&amp;u=' . $user_id), E_USER_WARNING);						}						if ($delete_type)						{							if (confirm_box(true))							{								user_delete($delete_type, $user_id, $user_row['username']);								add_log('admin', 'LOG_USER_DELETED', $user_row['username']);								trigger_error($user->lang['USER_DELETED'] . adm_back_link($this->u_action));							}							else							{								confirm_box(false, $user->lang['CONFIRM_OPERATION'], build_hidden_fields(array(									'u'				=> $user_id,									'i'				=> $id,									'mode'			=> $mode,									'action'		=> $action,									'update'		=> true,									'delete'		=> 1,									'delete_type'	=> $delete_type))								);							}						}						else						{							trigger_error($user->lang['NO_MODE'] . adm_back_link($this->u_action . '&amp;u=' . $user_id), E_USER_WARNING);						}					}					// Handle quicktool actions					switch ($action)					{						case 'banuser':						case 'banemail':						case 'banip':							if ($user_id == $user->data['user_id'])							{								trigger_error($user->lang['CANNOT_BAN_YOURSELF'] . adm_back_link($this->u_action . '&amp;u=' . $user_id), E_USER_WARNING);							}							if ($user_id == ANONYMOUS)							{								trigger_error($user->lang['CANNOT_BAN_ANONYMOUS'] . adm_back_link($this->u_action . '&amp;u=' . $user_id), E_USER_WARNING);							}							if ($user_row['user_type'] == USER_FOUNDER)							{								trigger_error($user->lang['CANNOT_BAN_FOUNDER'] . adm_back_link($this->u_action . '&amp;u=' . $user_id), E_USER_WARNING);							}							if (!check_form_key($form_name))							{								trigger_error($user->lang['FORM_INVALID'] . adm_back_link($this->u_action . '&amp;u=' . $user_id), E_USER_WARNING);							}							$ban = array();							switch ($action)							{								case 'banuser':									$ban[] = $user_row['username'];									$reason = 'USER_ADMIN_BAN_NAME_REASON';									$log = 'LOG_USER_BAN_USER';								break;								case 'banemail':									$ban[] = $user_row['user_email'];									$reason = 'USER_ADMIN_BAN_EMAIL_REASON';									$log = 'LOG_USER_BAN_EMAIL';								break;								case 'banip':									$ban[] = $user_row['user_ip'];									$sql = 'SELECT DISTINCT poster_ip										FROM ' . POSTS_TABLE . "										WHERE poster_id = $user_id";									$result = $db->sql_query($sql);									while ($row = $db->sql_fetchrow($result))									{										$ban[] = $row['poster_ip'];									}									$db->sql_freeresult($result);									$reason = 'USER_ADMIN_BAN_IP_REASON';									$log = 'LOG_USER_BAN_IP';								break;							}							$ban_reason = utf8_normalize_nfc(request_var('ban_reason', $user->lang[$reason], true));							$ban_give_reason = utf8_normalize_nfc(request_var('ban_give_reason', '', true));							// Log not used at the moment, we simply utilize the ban function.							$result = user_ban(substr($action, 3), $ban, 0, 0, 0, $ban_reason, $ban_give_reason);							trigger_error((($result === false) ? $user->lang['BAN_ALREADY_ENTERED'] : $user->lang['BAN_SUCCESSFUL']) . adm_back_link($this->u_action . '&amp;u=' . $user_id));						break;						case 'reactivate':							if ($user_id == $user->data['user_id'])							{								trigger_error($user->lang['CANNOT_FORCE_REACT_YOURSELF'] . adm_back_link($this->u_action . '&amp;u=' . $user_id), E_USER_WARNING);							}							if (!check_form_key($form_name))							{								trigger_error($user->lang['FORM_INVALID'] . adm_back_link($this->u_action . '&amp;u=' . $user_id), E_USER_WARNING);							}							if ($user_row['user_type'] == USER_FOUNDER)							{								trigger_error($user->lang['CANNOT_FORCE_REACT_FOUNDER'] . adm_back_link($this->u_action . '&amp;u=' . $user_id), E_USER_WARNING);							}							if ($user_row['user_type'] == USER_IGNORE)							{								trigger_error($user->lang['CANNOT_FORCE_REACT_BOT'] . adm_back_link($this->u_action . '&amp;u=' . $user_id), E_USER_WARNING);							}							if ($config['email_enable'])							{								include_once($phpbb_root_path . 'includes/functions_messenger.' . $phpEx);								$server_url = generate_board_url();								$user_actkey = gen_rand_string(mt_rand(6, 10));								$email_template = ($user_row['user_type'] == USER_NORMAL) ? 'user_reactivate_account' : 'user_resend_inactive';								if ($user_row['user_type'] == USER_NORMAL)								{									user_active_flip('deactivate', $user_id, INACTIVE_REMIND);									$sql = 'UPDATE ' . USERS_TABLE . "										SET user_actkey = '" . $db->sql_escape($user_actkey) . "'										WHERE user_id = $user_id";									$db->sql_query($sql);								}								else								{									// Grabbing the last confirm key - we only send a reminder									$sql = 'SELECT user_actkey										FROM ' . USERS_TABLE . '										WHERE user_id = ' . $user_id;									$result = $db->sql_query($sql);									$user_actkey = (string) $db->sql_fetchfield('user_actkey');									$db->sql_freeresult($result);								}								$messenger = new messenger(false);								$messenger->template($email_template, $user_row['user_lang']);								$messenger->to($user_row['user_email'], $user_row['username']);								$messenger->anti_abuse_headers($config, $user);								$messenger->assign_vars(array(									'WELCOME_MSG'	=> htmlspecialchars_decode(sprintf($user->lang['WELCOME_SUBJECT'], $config['sitename'])),									'USERNAME'		=> htmlspecialchars_decode($user_row['username']),									'U_ACTIVATE'	=> "$server_url/ucp.$phpEx?mode=activate&u={$user_row['user_id']}&k=$user_actkey")								);								$messenger->send(NOTIFY_EMAIL);								add_log('admin', 'LOG_USER_REACTIVATE', $user_row['username']);								add_log('user', $user_id, 'LOG_USER_REACTIVATE_USER');								trigger_error($user->lang['FORCE_REACTIVATION_SUCCESS'] . adm_back_link($this->u_action . '&amp;u=' . $user_id));							}						break;						case 'active':							if ($user_id == $user->data['user_id'])							{								// It is only deactivation since the user is already activated (else he would not have reached this page)								trigger_error($user->lang['CANNOT_DEACTIVATE_YOURSELF'] . adm_back_link($this->u_action . '&amp;u=' . $user_id), E_USER_WARNING);							}							if (!check_form_key($form_name))							{								trigger_error($user->lang['FORM_INVALID'] . adm_back_link($this->u_action . '&amp;u=' . $user_id), E_USER_WARNING);							}							if ($user_row['user_type'] == USER_FOUNDER)							{								trigger_error($user->lang['CANNOT_DEACTIVATE_FOUNDER'] . adm_back_link($this->u_action . '&amp;u=' . $user_id), E_USER_WARNING);							}							if ($user_row['user_type'] == USER_IGNORE)							{								trigger_error($user->lang['CANNOT_DEACTIVATE_BOT'] . adm_back_link($this->u_action . '&amp;u=' . $user_id), E_USER_WARNING);							}							user_active_flip('flip', $user_id);							if ($user_row['user_type'] == USER_INACTIVE)							{								if ($config['require_activation'] == USER_ACTIVATION_ADMIN)								{									include_once($phpbb_root_path . 'includes/functions_messenger.' . $phpEx);									$messenger = new messenger(false);									$messenger->template('admin_welcome_activated', $user_row['user_lang']);									$messenger->to($user_row['user_email'], $user_row['username']);									$messenger->anti_abuse_headers($config, $user);									$messenger->assign_vars(array(										'USERNAME'	=> htmlspecialchars_decode($user_row['username']))									);									$messenger->send(NOTIFY_EMAIL);								}							}							$message = ($user_row['user_type'] == USER_INACTIVE) ? 'USER_ADMIN_ACTIVATED' : 'USER_ADMIN_DEACTIVED';							$log = ($user_row['user_type'] == USER_INACTIVE) ? 'LOG_USER_ACTIVE' : 'LOG_USER_INACTIVE';							add_log('admin', $log, $user_row['username']);							add_log('user', $user_id, $log . '_USER');							trigger_error($user->lang[$message] . adm_back_link($this->u_action . '&amp;u=' . $user_id));						break;						case 'delsig':							if (!check_form_key($form_name))							{								trigger_error($user->lang['FORM_INVALID'] . adm_back_link($this->u_action . '&amp;u=' . $user_id), E_USER_WARNING);							}							$sql_ary = array(								'user_sig'					=> '',								'user_sig_bbcode_uid'		=> '',								'user_sig_bbcode_bitfield'	=> ''							);							$sql = 'UPDATE ' . USERS_TABLE . ' SET ' . $db->sql_build_array('UPDATE', $sql_ary) . "								WHERE user_id = $user_id";							$db->sql_query($sql);							add_log('admin', 'LOG_USER_DEL_SIG', $user_row['username']);							add_log('user', $user_id, 'LOG_USER_DEL_SIG_USER');							trigger_error($user->lang['USER_ADMIN_SIG_REMOVED'] . adm_back_link($this->u_action . '&amp;u=' . $user_id));						break;						case 'delavatar':							if (!check_form_key($form_name))							{								trigger_error($user->lang['FORM_INVALID'] . adm_back_link($this->u_action . '&amp;u=' . $user_id), E_USER_WARNING);							}							$sql_ary = array(								'user_avatar'			=> '',								'user_avatar_type'		=> 0,								'user_avatar_width'		=> 0,								'user_avatar_height'	=> 0,							);							$sql = 'UPDATE ' . USERS_TABLE . '								SET ' . $db->sql_build_array('UPDATE', $sql_ary) . "								WHERE user_id = $user_id";							$db->sql_query($sql);							// Delete old avatar if present							if ($user_row['user_avatar'] && $user_row['user_avatar_type'] != AVATAR_GALLERY)							{								avatar_delete('user', $user_row);							}							add_log('admin', 'LOG_USER_DEL_AVATAR', $user_row['username']);							add_log('user', $user_id, 'LOG_USER_DEL_AVATAR_USER');							trigger_error($user->lang['USER_ADMIN_AVATAR_REMOVED'] . adm_back_link($this->u_action . '&amp;u=' . $user_id));						break;						case 'delposts':							if (confirm_box(true))							{								// Delete posts, attachments, etc.								delete_posts('poster_id', $user_id);								add_log('admin', 'LOG_USER_DEL_POSTS', $user_row['username']);								trigger_error($user->lang['USER_POSTS_DELETED'] . adm_back_link($this->u_action . '&amp;u=' . $user_id));							}							else							{								confirm_box(false, $user->lang['CONFIRM_OPERATION'], build_hidden_fields(array(									'u'				=> $user_id,									'i'				=> $id,									'mode'			=> $mode,									'action'		=> $action,									'update'		=> true))								);							}						break;						case 'delattach':							if (confirm_box(true))							{								delete_attachments('user', $user_id);								add_log('admin', 'LOG_USER_DEL_ATTACH', $user_row['username']);								trigger_error($user->lang['USER_ATTACHMENTS_REMOVED'] . adm_back_link($this->u_action . '&amp;u=' . $user_id));							}							else							{								confirm_box(false, $user->lang['CONFIRM_OPERATION'], build_hidden_fields(array(									'u'				=> $user_id,									'i'				=> $id,									'mode'			=> $mode,									'action'		=> $action,									'update'		=> true))								);							}						break;						case 'deloutbox':							if (confirm_box(true))							{								$msg_ids = array();								$lang = 'EMPTY';								$sql = 'SELECT msg_id									FROM ' . PRIVMSGS_TO_TABLE . "									WHERE author_id = $user_id										AND folder_id = " . PRIVMSGS_OUTBOX;								$result = $db->sql_query($sql);								if ($row = $db->sql_fetchrow($result))								{									if (!function_exists('delete_pm'))									{										include($phpbb_root_path . 'includes/functions_privmsgs.' . $phpEx);									}									do									{										$msg_ids[] = (int) $row['msg_id'];									}									while ($row = $db->sql_fetchrow($result));									$db->sql_freeresult($result);									delete_pm($user_id, $msg_ids, PRIVMSGS_OUTBOX);									add_log('admin', 'LOG_USER_DEL_OUTBOX', $user_row['username']);									$lang = 'EMPTIED';								}								$db->sql_freeresult($result);								trigger_error($user->lang['USER_OUTBOX_' . $lang] . adm_back_link($this->u_action . '&amp;u=' . $user_id));							}							else							{								confirm_box(false, $user->lang['CONFIRM_OPERATION'], build_hidden_fields(array(									'u'				=> $user_id,									'i'				=> $id,									'mode'			=> $mode,									'action'		=> $action,									'update'		=> true))								);							}						break;						case 'moveposts':							if (!check_form_key($form_name))							{								trigger_error($user->lang['FORM_INVALID'] . adm_back_link($this->u_action . '&amp;u=' . $user_id), E_USER_WARNING);							}							$user->add_lang('acp/forums');							$new_forum_id = request_var('new_f', 0);							if (!$new_forum_id)							{								$this->page_title = 'USER_ADMIN_MOVE_POSTS';								$template->assign_vars(array(									'S_SELECT_FORUM'		=> true,									'U_ACTION'				=> $this->u_action . "&amp;action=$action&amp;u=$user_id",									'U_BACK'				=> $this->u_action . "&amp;u=$user_id",									'S_FORUM_OPTIONS'		=> make_forum_select(false, false, false, true))								);								return;							}							// Is the new forum postable to?							$sql = 'SELECT forum_name, forum_type								FROM ' . FORUMS_TABLE . "								WHERE forum_id = $new_forum_id";							$result = $db->sql_query($sql);							$forum_info = $db->sql_fetchrow($result);							$db->sql_freeresult($result);							if (!$forum_info)							{								trigger_error($user->lang['NO_FORUM'] . adm_back_link($this->u_action . '&amp;u=' . $user_id), E_USER_WARNING);							}							if ($forum_info['forum_type'] != FORUM_POST)							{								trigger_error($user->lang['MOVE_POSTS_NO_POSTABLE_FORUM'] . adm_back_link($this->u_action . '&amp;u=' . $user_id), E_USER_WARNING);							}							// Two stage?							// Move topics comprising only posts from this user							$topic_id_ary = $move_topic_ary = $move_post_ary = $new_topic_id_ary = array();							$forum_id_ary = array($new_forum_id);							$sql = 'SELECT topic_id, COUNT(post_id) AS total_posts								FROM ' . POSTS_TABLE . "								WHERE poster_id = $user_id									AND forum_id <> $new_forum_id								GROUP BY topic_id";							$result = $db->sql_query($sql);							while ($row = $db->sql_fetchrow($result))							{								$topic_id_ary[$row['topic_id']] = $row['total_posts'];							}							$db->sql_freeresult($result);							if (sizeof($topic_id_ary))							{								$sql = 'SELECT topic_id, forum_id, topic_title, topic_replies, topic_replies_real, topic_attachment									FROM ' . TOPICS_TABLE . '									WHERE ' . $db->sql_in_set('topic_id', array_keys($topic_id_ary));								$result = $db->sql_query($sql);								while ($row = $db->sql_fetchrow($result))								{									if (max($row['topic_replies'], $row['topic_replies_real']) + 1 == $topic_id_ary[$row['topic_id']])									{										$move_topic_ary[] = $row['topic_id'];									}									else									{										$move_post_ary[$row['topic_id']]['title'] = $row['topic_title'];										$move_post_ary[$row['topic_id']]['attach'] = ($row['topic_attachment']) ? 1 : 0;									}									$forum_id_ary[] = $row['forum_id'];								}								$db->sql_freeresult($result);							}							// Entire topic comprises posts by this user, move these topics							if (sizeof($move_topic_ary))							{								move_topics($move_topic_ary, $new_forum_id, false);							}							if (sizeof($move_post_ary))							{								// Create new topic								// Update post_ids, report_ids, attachment_ids								foreach ($move_post_ary as $topic_id => $post_ary)								{									// Create new topic									$sql = 'INSERT INTO ' . TOPICS_TABLE . ' ' . $db->sql_build_array('INSERT', array(										'topic_poster'				=> $user_id,										'topic_time'				=> time(),										'forum_id' 					=> $new_forum_id,										'icon_id'					=> 0,										'topic_approved'			=> 1,										'topic_title' 				=> $post_ary['title'],										'topic_first_poster_name'	=> $user_row['username'],										'topic_type'				=> POST_NORMAL,										'topic_time_limit'			=> 0,										'topic_attachment'			=> $post_ary['attach'])									);									$db->sql_query($sql);									$new_topic_id = $db->sql_nextid();									// Move posts									$sql = 'UPDATE ' . POSTS_TABLE . "										SET forum_id = $new_forum_id, topic_id = $new_topic_id										WHERE topic_id = $topic_id											AND poster_id = $user_id";									$db->sql_query($sql);									if ($post_ary['attach'])									{										$sql = 'UPDATE ' . ATTACHMENTS_TABLE . "											SET topic_id = $new_topic_id											WHERE topic_id = $topic_id												AND poster_id = $user_id";										$db->sql_query($sql);									}									$new_topic_id_ary[] = $new_topic_id;								}							}							$forum_id_ary = array_unique($forum_id_ary);							$topic_id_ary = array_unique(array_merge(array_keys($topic_id_ary), $new_topic_id_ary));							if (sizeof($topic_id_ary))							{								sync('topic_reported', 'topic_id', $topic_id_ary);								sync('topic', 'topic_id', $topic_id_ary);							}							if (sizeof($forum_id_ary))							{								sync('forum', 'forum_id', $forum_id_ary, false, true);							}							add_log('admin', 'LOG_USER_MOVE_POSTS', $user_row['username'], $forum_info['forum_name']);							add_log('user', $user_id, 'LOG_USER_MOVE_POSTS_USER', $forum_info['forum_name']);							trigger_error($user->lang['USER_POSTS_MOVED'] . adm_back_link($this->u_action . '&amp;u=' . $user_id));						break;						case 'leave_nr':							if (confirm_box(true))							{								remove_newly_registered($user_id, $user_row);								add_log('admin', 'LOG_USER_REMOVED_NR', $user_row['username']);								trigger_error($user->lang['USER_LIFTED_NR'] . adm_back_link($this->u_action . '&amp;u=' . $user_id));							}							else							{								confirm_box(false, $user->lang['CONFIRM_OPERATION'], build_hidden_fields(array(									'u'				=> $user_id,									'i'				=> $id,									'mode'			=> $mode,									'action'		=> $action,									'update'		=> true))								);							}						break;					}					// Handle registration info updates					$data = array(						'username'			=> utf8_normalize_nfc(request_var('user', $user_row['username'], true)),						'user_founder'		=> request_var('user_founder', ($user_row['user_type'] == USER_FOUNDER) ? 1 : 0),						'email'				=> strtolower(request_var('user_email', $user_row['user_email'])),						'email_confirm'		=> strtolower(request_var('email_confirm', '')),						'new_password'		=> request_var('new_password', '', true),						'password_confirm'	=> request_var('password_confirm', '', true),					);					// Validation data - we do not check the password complexity setting here					$check_ary = array(						'new_password'		=> array(							array('string', true, $config['min_pass_chars'], $config['max_pass_chars']),							array('password')),						'password_confirm'	=> array('string', true, $config['min_pass_chars'], $config['max_pass_chars']),					);					// Check username if altered					if ($data['username'] != $user_row['username'])					{						$check_ary += array(							'username'			=> array(								array('string', false, $config['min_name_chars'], $config['max_name_chars']),								array('username', $user_row['username'])							),						);					}					// Check email if altered					if ($data['email'] != $user_row['user_email'])					{						$check_ary += array(							'email'				=> array(								array('string', false, 6, 60),								array('email', $user_row['user_email'])							),							'email_confirm'		=> array('string', true, 6, 60)						);					}					$error = validate_data($data, $check_ary);					if ($data['new_password'] && $data['password_confirm'] != $data['new_password'])					{						$error[] = 'NEW_PASSWORD_ERROR';					}					if ($data['email'] != $user_row['user_email'] && $data['email_confirm'] != $data['email'])					{						$error[] = 'NEW_EMAIL_ERROR';					}					if (!check_form_key($form_name))					{						$error[] = 'FORM_INVALID';					}					// Which updates do we need to do?					$update_username = ($user_row['username'] != $data['username']) ? $data['username'] : false;					$update_password = ($data['new_password'] && !phpbb_check_hash($data['new_password'], $user_row['user_password'])) ? true : false;					$update_email = ($data['email'] != $user_row['user_email']) ? $data['email'] : false;					if (!sizeof($error))					{						$sql_ary = array();						if ($user_row['user_type'] != USER_FOUNDER || $user->data['user_type'] == USER_FOUNDER)						{							// Only allow founders updating the founder status...							if ($user->data['user_type'] == USER_FOUNDER)							{								// Setting a normal member to be a founder								if ($data['user_founder'] && $user_row['user_type'] != USER_FOUNDER)								{									// Make sure the user is not setting an Inactive or ignored user to be a founder									if ($user_row['user_type'] == USER_IGNORE)									{										trigger_error($user->lang['CANNOT_SET_FOUNDER_IGNORED'] . adm_back_link($this->u_action . '&amp;u=' . $user_id), E_USER_WARNING);									}									if ($user_row['user_type'] == USER_INACTIVE)									{										trigger_error($user->lang['CANNOT_SET_FOUNDER_INACTIVE'] . adm_back_link($this->u_action . '&amp;u=' . $user_id), E_USER_WARNING);									}									$sql_ary['user_type'] = USER_FOUNDER;								}								else if (!$data['user_founder'] && $user_row['user_type'] == USER_FOUNDER)								{									// Check if at least one founder is present									$sql = 'SELECT user_id										FROM ' . USERS_TABLE . '										WHERE user_type = ' . USER_FOUNDER . '											AND user_id <> ' . $user_id;									$result = $db->sql_query_limit($sql, 1);									$row = $db->sql_fetchrow($result);									$db->sql_freeresult($result);									if ($row)									{										$sql_ary['user_type'] = USER_NORMAL;									}									else									{										trigger_error($user->lang['AT_LEAST_ONE_FOUNDER'] . adm_back_link($this->u_action . '&amp;u=' . $user_id), E_USER_WARNING);									}								}							}						}						if ($update_username !== false)						{							$sql_ary['username'] = $update_username;							$sql_ary['username_clean'] = utf8_clean_string($update_username);							add_log('user', $user_id, 'LOG_USER_UPDATE_NAME', $user_row['username'], $update_username);						}						if ($update_email !== false)						{							$sql_ary += array(								'user_email'		=> $update_email,								'user_email_hash'	=> phpbb_email_hash($update_email),							);							add_log('user', $user_id, 'LOG_USER_UPDATE_EMAIL', $user_row['username'], $user_row['user_email'], $update_email);						}						if ($update_password)						{							$sql_ary += array(								'user_password'		=> phpbb_hash($data['new_password']),								'user_passchg'		=> time(),								'user_pass_convert'	=> 0,							);							$user->reset_login_keys($user_id);							add_log('user', $user_id, 'LOG_USER_NEW_PASSWORD', $user_row['username']);						}						if (sizeof($sql_ary))						{							$sql = 'UPDATE ' . USERS_TABLE . '								SET ' . $db->sql_build_array('UPDATE', $sql_ary) . '								WHERE user_id = ' . $user_id;							$db->sql_query($sql);						}						if ($update_username)						{							user_update_name($user_row['username'], $update_username);						}						// Let the users permissions being updated						$auth->acl_clear_prefetch($user_id);						add_log('admin', 'LOG_USER_USER_UPDATE', $data['username']);						trigger_error($user->lang['USER_OVERVIEW_UPDATED'] . adm_back_link($this->u_action . '&amp;u=' . $user_id));					}					// Replace "error" strings with their real, localised form					$error = preg_replace('#^([A-Z_]+)$#e', "(!empty(\$user->lang['\\1'])) ? \$user->lang['\\1'] : '\\1'", $error);				}				if ($user_id == $user->data['user_id'])				{					$quick_tool_ary = array('delsig' => 'DEL_SIG', 'delavatar' => 'DEL_AVATAR', 'moveposts' => 'MOVE_POSTS', 'delposts' => 'DEL_POSTS', 'delattach' => 'DEL_ATTACH', 'deloutbox' => 'DEL_OUTBOX');					if ($user_row['user_new'])					{						$quick_tool_ary['leave_nr'] = 'LEAVE_NR';					}				}				else				{					$quick_tool_ary = array();					if ($user_row['user_type'] != USER_FOUNDER)					{						$quick_tool_ary += array('banuser' => 'BAN_USER', 'banemail' => 'BAN_EMAIL', 'banip' => 'BAN_IP');					}					if ($user_row['user_type'] != USER_FOUNDER && $user_row['user_type'] != USER_IGNORE)					{						$quick_tool_ary += array('active' => (($user_row['user_type'] == USER_INACTIVE) ? 'ACTIVATE' : 'DEACTIVATE'));					}					$quick_tool_ary += array('delsig' => 'DEL_SIG', 'delavatar' => 'DEL_AVATAR', 'moveposts' => 'MOVE_POSTS', 'delposts' => 'DEL_POSTS', 'delattach' => 'DEL_ATTACH', 'deloutbox' => 'DEL_OUTBOX');					if ($config['email_enable'] && ($user_row['user_type'] == USER_NORMAL || $user_row['user_type'] == USER_INACTIVE))					{						$quick_tool_ary['reactivate'] = 'FORCE';					}					if ($user_row['user_new'])					{						$quick_tool_ary['leave_nr'] = 'LEAVE_NR';					}				}				$s_action_options = '<option class="sep" value="">' . $user->lang['SELECT_OPTION'] . '</option>';				foreach ($quick_tool_ary as $value => $lang)				{					$s_action_options .= '<option value="' . $value . '">' . $user->lang['USER_ADMIN_' . $lang] . '</option>';				}				if ($config['load_onlinetrack'])				{					$sql = 'SELECT MAX(session_time) AS session_time, MIN(session_viewonline) AS session_viewonline						FROM ' . SESSIONS_TABLE . "						WHERE session_user_id = $user_id";					$result = $db->sql_query($sql);					$row = $db->sql_fetchrow($result);					$db->sql_freeresult($result);					$user_row['session_time'] = (isset($row['session_time'])) ? $row['session_time'] : 0;					$user_row['session_viewonline'] = (isset($row['session_viewonline'])) ? $row['session_viewonline'] : 0;					unset($row);				}				$last_visit = (!empty($user_row['session_time'])) ? $user_row['session_time'] : $user_row['user_lastvisit'];				$inactive_reason = '';				if ($user_row['user_type'] == USER_INACTIVE)				{					$inactive_reason = $user->lang['INACTIVE_REASON_UNKNOWN'];					switch ($user_row['user_inactive_reason'])					{						case INACTIVE_REGISTER:							$inactive_reason = $user->lang['INACTIVE_REASON_REGISTER'];						break;						case INACTIVE_PROFILE:							$inactive_reason = $user->lang['INACTIVE_REASON_PROFILE'];						break;						case INACTIVE_MANUAL:							$inactive_reason = $user->lang['INACTIVE_REASON_MANUAL'];						break;						case INACTIVE_REMIND:							$inactive_reason = $user->lang['INACTIVE_REASON_REMIND'];						break;					}				}				// Posts in Queue				$sql = 'SELECT COUNT(post_id) as posts_in_queue					FROM ' . POSTS_TABLE . '					WHERE poster_id = ' . $user_id . '						AND post_approved = 0';				$result = $db->sql_query($sql);				$user_row['posts_in_queue'] = (int) $db->sql_fetchfield('posts_in_queue');				$db->sql_freeresult($result);				$template->assign_vars(array(					'L_NAME_CHARS_EXPLAIN'		=> sprintf($user->lang[$config['allow_name_chars'] . '_EXPLAIN'], $config['min_name_chars'], $config['max_name_chars']),					'L_CHANGE_PASSWORD_EXPLAIN'	=> sprintf($user->lang[$config['pass_complex'] . '_EXPLAIN'], $config['min_pass_chars'], $config['max_pass_chars']),					'L_POSTS_IN_QUEUE'			=> $user->lang('NUM_POSTS_IN_QUEUE', $user_row['posts_in_queue']),					'S_FOUNDER'					=> ($user->data['user_type'] == USER_FOUNDER) ? true : false,					'S_OVERVIEW'		=> true,					'S_USER_IP'			=> ($user_row['user_ip']) ? true : false,					'S_USER_FOUNDER'	=> ($user_row['user_type'] == USER_FOUNDER) ? true : false,					'S_ACTION_OPTIONS'	=> $s_action_options,					'S_OWN_ACCOUNT'		=> ($user_id == $user->data['user_id']) ? true : false,					'S_USER_INACTIVE'	=> ($user_row['user_type'] == USER_INACTIVE) ? true : false,					'U_SHOW_IP'		=> $this->u_action . "&amp;u=$user_id&amp;ip=" . (($ip == 'ip') ? 'hostname' : 'ip'),					'U_WHOIS'		=> $this->u_action . "&amp;action=whois&amp;user_ip={$user_row['user_ip']}",					'U_MCP_QUEUE'	=> ($auth->acl_getf_global('m_approve')) ? append_sid("{$phpbb_root_path}mcp.$phpEx", 'i=queue', true, $user->session_id) : '',					'U_SWITCH_PERMISSIONS'	=> ($auth->acl_get('a_switchperm') && $user->data['user_id'] != $user_row['user_id']) ? append_sid("{$phpbb_root_path}ucp.$phpEx", "mode=switch_perm&amp;u={$user_row['user_id']}&amp;hash=" . generate_link_hash('switchperm')) : '',					'POSTS_IN_QUEUE'	=> $user_row['posts_in_queue'],					'USER'				=> $user_row['username'],					'USER_REGISTERED'	=> $user->format_date($user_row['user_regdate']),					'REGISTERED_IP'		=> ($ip == 'hostname') ? gethostbyaddr($user_row['user_ip']) : $user_row['user_ip'],					'USER_LASTACTIVE'	=> ($last_visit) ? $user->format_date($last_visit) : ' - ',					'USER_EMAIL'		=> $user_row['user_email'],					'USER_WARNINGS'		=> $user_row['user_warnings'],					'USER_POSTS'		=> $user_row['user_posts'],					'USER_INACTIVE_REASON'	=> $inactive_reason,				));			break;			case 'feedback':				$user->add_lang('mcp');				// Set up general vars				$start		= request_var('start', 0);				$deletemark = (isset($_POST['delmarked'])) ? true : false;				$deleteall	= (isset($_POST['delall'])) ? true : false;				$marked		= request_var('mark', array(0));				$message	= utf8_normalize_nfc(request_var('message', '', true));				// Sort keys				$sort_days	= request_var('st', 0);				$sort_key	= request_var('sk', 't');				$sort_dir	= request_var('sd', 'd');				// Delete entries if requested and able				if (($deletemark || $deleteall) && $auth->acl_get('a_clearlogs'))				{					if (!check_form_key($form_name))					{						trigger_error($user->lang['FORM_INVALID'] . adm_back_link($this->u_action . '&amp;u=' . $user_id), E_USER_WARNING);					}					$where_sql = '';					if ($deletemark && $marked)					{						$sql_in = array();						foreach ($marked as $mark)						{							$sql_in[] = $mark;						}						$where_sql = ' AND ' . $db->sql_in_set('log_id', $sql_in);						unset($sql_in);					}					if ($where_sql || $deleteall)					{						$sql = 'DELETE FROM ' . LOG_TABLE . '							WHERE log_type = ' . LOG_USERS . "							AND reportee_id = $user_id							$where_sql";						$db->sql_query($sql);						add_log('admin', 'LOG_CLEAR_USER', $user_row['username']);					}				}				if ($submit && $message)				{					if (!check_form_key($form_name))					{						trigger_error($user->lang['FORM_INVALID'] . adm_back_link($this->u_action . '&amp;u=' . $user_id), E_USER_WARNING);					}					add_log('admin', 'LOG_USER_FEEDBACK', $user_row['username']);					add_log('mod', 0, 0, 'LOG_USER_FEEDBACK', $user_row['username']);					add_log('user', $user_id, 'LOG_USER_GENERAL', $message);					trigger_error($user->lang['USER_FEEDBACK_ADDED'] . adm_back_link($this->u_action . '&amp;u=' . $user_id));				}				// Sorting				$limit_days = array(0 => $user->lang['ALL_ENTRIES'], 1 => $user->lang['1_DAY'], 7 => $user->lang['7_DAYS'], 14 => $user->lang['2_WEEKS'], 30 => $user->lang['1_MONTH'], 90 => $user->lang['3_MONTHS'], 180 => $user->lang['6_MONTHS'], 365 => $user->lang['1_YEAR']);				$sort_by_text = array('u' => $user->lang['SORT_USERNAME'], 't' => $user->lang['SORT_DATE'], 'i' => $user->lang['SORT_IP'], 'o' => $user->lang['SORT_ACTION']);				$sort_by_sql = array('u' => 'u.username_clean', 't' => 'l.log_time', 'i' => 'l.log_ip', 'o' => 'l.log_operation');				$s_limit_days = $s_sort_key = $s_sort_dir = $u_sort_param = '';				gen_sort_selects($limit_days, $sort_by_text, $sort_days, $sort_key, $sort_dir, $s_limit_days, $s_sort_key, $s_sort_dir, $u_sort_param);				// Define where and sort sql for use in displaying logs				$sql_where = ($sort_days) ? (time() - ($sort_days * 86400)) : 0;				$sql_sort = $sort_by_sql[$sort_key] . ' ' . (($sort_dir == 'd') ? 'DESC' : 'ASC');				// Grab log data				$log_data = array();				$log_count = 0;				$start = view_log('user', $log_data, $log_count, $config['topics_per_page'], $start, 0, 0, $user_id, $sql_where, $sql_sort);				$template->assign_vars(array(					'S_FEEDBACK'	=> true,					'S_ON_PAGE'		=> on_page($log_count, $config['topics_per_page'], $start),					'PAGINATION'	=> generate_pagination($this->u_action . "&amp;u=$user_id&amp;$u_sort_param", $log_count, $config['topics_per_page'], $start, true),					'S_LIMIT_DAYS'	=> $s_limit_days,					'S_SORT_KEY'	=> $s_sort_key,					'S_SORT_DIR'	=> $s_sort_dir,					'S_CLEARLOGS'	=> $auth->acl_get('a_clearlogs'))				);				foreach ($log_data as $row)				{					$template->assign_block_vars('log', array(						'USERNAME'		=> $row['username_full'],						'IP'			=> $row['ip'],						'DATE'			=> $user->format_date($row['time']),						'ACTION'		=> nl2br($row['action']),						'ID'			=> $row['id'])					);				}			break;			case 'warnings':				$user->add_lang('mcp');				// Set up general vars				$start		= request_var('start', 0);				$deletemark	= (isset($_POST['delmarked'])) ? true : false;				$deleteall	= (isset($_POST['delall'])) ? true : false;				$confirm	= (isset($_POST['confirm'])) ? true : false;				$marked		= request_var('mark', array(0));				$message	= utf8_normalize_nfc(request_var('message', '', true));				// Sort keys				$sort_days	= request_var('st', 0);				$sort_key	= request_var('sk', 't');				$sort_dir	= request_var('sd', 'd');				// Delete entries if requested and able				if ($deletemark || $deleteall || $confirm)				{					if (confirm_box(true))					{						$where_sql = '';						$deletemark = request_var('delmarked', 0);						$deleteall = request_var('delall', 0);						if ($deletemark && $marked)						{							$where_sql = ' AND ' . $db->sql_in_set('warning_id', array_values($marked));						}						if ($where_sql || $deleteall)						{							$sql = 'DELETE FROM ' . WARNINGS_TABLE . "								WHERE user_id = $user_id									$where_sql";							$db->sql_query($sql);							if ($deleteall)							{								$log_warnings = $deleted_warnings = 0;							}							else							{								$num_warnings = (int) $db->sql_affectedrows();								$deleted_warnings = ' user_warnings - ' . $num_warnings;								$log_warnings = ($num_warnings > 2) ? 2 : $num_warnings;							}							$sql = 'UPDATE ' . USERS_TABLE . "								SET user_warnings = $deleted_warnings								WHERE user_id = $user_id";							$db->sql_query($sql);							switch ($log_warnings)							{								case 2:									add_log('admin', 'LOG_WARNINGS_DELETED', $user_row['username'], $num_warnings);								break;								case 1:									add_log('admin', 'LOG_WARNING_DELETED', $user_row['username']);								break;								default:									add_log('admin', 'LOG_WARNINGS_DELETED_ALL', $user_row['username']);								break;							}						}					}					else					{						$s_hidden_fields = array(							'i'				=> $id,							'mode'			=> $mode,							'u'				=> $user_id,							'mark'			=> $marked,						);						if (isset($_POST['delmarked']))						{							$s_hidden_fields['delmarked'] = 1;						}						if (isset($_POST['delall']))						{							$s_hidden_fields['delall'] = 1;						}						if (isset($_POST['delall']) || (isset($_POST['delmarked']) && sizeof($marked)))						{							confirm_box(false, $user->lang['CONFIRM_OPERATION'], build_hidden_fields($s_hidden_fields));						}					}				}				$sql = 'SELECT w.warning_id, w.warning_time, w.post_id, l.log_operation, l.log_data, l.user_id AS mod_user_id, m.username AS mod_username, m.user_colour AS mod_user_colour					FROM ' . WARNINGS_TABLE . ' w					LEFT JOIN ' . LOG_TABLE . ' l						ON (w.log_id = l.log_id)					LEFT JOIN ' . USERS_TABLE . ' m						ON (l.user_id = m.user_id)					WHERE w.user_id = ' . $user_id . '					ORDER BY w.warning_time DESC';				$result = $db->sql_query($sql);				while ($row = $db->sql_fetchrow($result))				{					if (!$row['log_operation'])					{						// We do not have a log-entry anymore, so there is no data available						$row['action'] = $user->lang['USER_WARNING_LOG_DELETED'];					}					else					{						$row['action'] = (isset($user->lang[$row['log_operation']])) ? $user->lang[$row['log_operation']] : '{' . ucfirst(str_replace('_', ' ', $row['log_operation'])) . '}';						if (!empty($row['log_data']))						{							$log_data_ary = @unserialize($row['log_data']);							$log_data_ary = ($log_data_ary === false) ? array() : $log_data_ary;							if (isset($user->lang[$row['log_operation']]))							{								// Check if there are more occurrences of % than arguments, if there are we fill out the arguments array								// It doesn't matter if we add more arguments than placeholders								if ((substr_count($row['action'], '%') - sizeof($log_data_ary)) > 0)								{									$log_data_ary = array_merge($log_data_ary, array_fill(0, substr_count($row['action'], '%') - sizeof($log_data_ary), ''));								}								$row['action'] = vsprintf($row['action'], $log_data_ary);								$row['action'] = bbcode_nl2br(censor_text($row['action']));							}							else if (!empty($log_data_ary))							{								$row['action'] .= '<br />' . implode('', $log_data_ary);							}						}					}					$template->assign_block_vars('warn', array(						'ID'		=> $row['warning_id'],						'USERNAME'	=> ($row['log_operation']) ? get_username_string('full', $row['mod_user_id'], $row['mod_username'], $row['mod_user_colour']) : '-',						'ACTION'	=> make_clickable($row['action']),						'DATE'		=> $user->format_date($row['warning_time']),					));				}				$db->sql_freeresult($result);				$template->assign_vars(array(					'S_WARNINGS'	=> true,				));			break;			case 'profile':				include($phpbb_root_path . 'includes/functions_user.' . $phpEx);				include($phpbb_root_path . 'includes/functions_profile_fields.' . $phpEx);				$cp = new custom_profile();				$cp_data = $cp_error = array();				$sql = 'SELECT lang_id					FROM ' . LANG_TABLE . "					WHERE lang_iso = '" . $db->sql_escape($user->data['user_lang']) . "'";				$result = $db->sql_query($sql);				$row = $db->sql_fetchrow($result);				$db->sql_freeresult($result);				$user_row['iso_lang_id'] = $row['lang_id'];				$data = array(					'icq'			=> request_var('icq', $user_row['user_icq']),					'aim'			=> request_var('aim', $user_row['user_aim']),					'msn'			=> request_var('msn', $user_row['user_msnm']),					'yim'			=> request_var('yim', $user_row['user_yim']),					'jabber'		=> utf8_normalize_nfc(request_var('jabber', $user_row['user_jabber'], true)),					'website'		=> request_var('website', $user_row['user_website']),					'location'		=> utf8_normalize_nfc(request_var('location', $user_row['user_from'], true)),					'occupation'	=> utf8_normalize_nfc(request_var('occupation', $user_row['user_occ'], true)),					'interests'		=> utf8_normalize_nfc(request_var('interests', $user_row['user_interests'], true)),					'bday_day'		=> 0,					'bday_month'	=> 0,					'bday_year'		=> 0,				);				if ($user_row['user_birthday'])				{					list($data['bday_day'], $data['bday_month'], $data['bday_year']) = explode('-', $user_row['user_birthday']);				}				$data['bday_day']		= request_var('bday_day', $data['bday_day']);				$data['bday_month']		= request_var('bday_month', $data['bday_month']);				$data['bday_year']		= request_var('bday_year', $data['bday_year']);				$data['user_birthday']	= sprintf('%2d-%2d-%4d', $data['bday_day'], $data['bday_month'], $data['bday_year']);				if ($submit)				{					$error = validate_data($data, array(						'icq'			=> array(							array('string', true, 3, 15),							array('match', true, '#^[0-9]+$#i')),						'aim'			=> array('string', true, 3, 255),						'msn'			=> array('string', true, 5, 255),						'jabber'		=> array(							array('string', true, 5, 255),							array('jabber')),						'yim'			=> array('string', true, 5, 255),						'website'		=> array(							array('string', true, 12, 255),							array('match', true, '#^http[s]?://(.*?\.)*?[a-z0-9\-]+\.[a-z]{2,4}#i')),						'location'		=> array('string', true, 2, 100),						'occupation'	=> array('string', true, 2, 500),						'interests'		=> array('string', true, 2, 500),						'bday_day'		=> array('num', true, 1, 31),						'bday_month'	=> array('num', true, 1, 12),						'bday_year'		=> array('num', true, 1901, gmdate('Y', time())),						'user_birthday'	=> array('date', true),					));					// validate custom profile fields					$cp->submit_cp_field('profile', $user_row['iso_lang_id'], $cp_data, $cp_error);					if (sizeof($cp_error))					{						$error = array_merge($error, $cp_error);					}					if (!check_form_key($form_name))					{						$error[] = 'FORM_INVALID';					}					if (!sizeof($error))					{						$sql_ary = array(							'user_icq'		=> $data['icq'],							'user_aim'		=> $data['aim'],							'user_msnm'		=> $data['msn'],							'user_yim'		=> $data['yim'],							'user_jabber'	=> $data['jabber'],							'user_website'	=> $data['website'],							'user_from'		=> $data['location'],							'user_occ'		=> $data['occupation'],							'user_interests'=> $data['interests'],							'user_birthday'	=> $data['user_birthday'],						);						$sql = 'UPDATE ' . USERS_TABLE . '							SET ' . $db->sql_build_array('UPDATE', $sql_ary) . "							WHERE user_id = $user_id";						$db->sql_query($sql);						// Update Custom Fields						$cp->update_profile_field_data($user_id, $cp_data);						trigger_error($user->lang['USER_PROFILE_UPDATED'] . adm_back_link($this->u_action . '&amp;u=' . $user_id));					}					// Replace "error" strings with their real, localised form					$error = preg_replace('#^([A-Z_]+)$#e', "(!empty(\$user->lang['\\1'])) ? \$user->lang['\\1'] : '\\1'", $error);				}				$s_birthday_day_options = '<option value="0"' . ((!$data['bday_day']) ? ' selected="selected"' : '') . '>--</option>';				for ($i = 1; $i < 32; $i++)				{					$selected = ($i == $data['bday_day']) ? ' selected="selected"' : '';					$s_birthday_day_options .= "<option value=\"$i\"$selected>$i</option>";				}				$s_birthday_month_options = '<option value="0"' . ((!$data['bday_month']) ? ' selected="selected"' : '') . '>--</option>';				for ($i = 1; $i < 13; $i++)				{					$selected = ($i == $data['bday_month']) ? ' selected="selected"' : '';					$s_birthday_month_options .= "<option value=\"$i\"$selected>$i</option>";				}				$s_birthday_year_options = '';				$now = getdate();				$s_birthday_year_options = '<option value="0"' . ((!$data['bday_year']) ? ' selected="selected"' : '') . '>--</option>';				for ($i = $now['year'] - 100; $i <= $now['year']; $i++)				{					$selected = ($i == $data['bday_year']) ? ' selected="selected"' : '';					$s_birthday_year_options .= "<option value=\"$i\"$selected>$i</option>";				}				unset($now);				$template->assign_vars(array(					'ICQ'			=> $data['icq'],					'YIM'			=> $data['yim'],					'AIM'			=> $data['aim'],					'MSN'			=> $data['msn'],					'JABBER'		=> $data['jabber'],					'WEBSITE'		=> $data['website'],					'LOCATION'		=> $data['location'],					'OCCUPATION'	=> $data['occupation'],					'INTERESTS'		=> $data['interests'],					'S_BIRTHDAY_DAY_OPTIONS'	=> $s_birthday_day_options,					'S_BIRTHDAY_MONTH_OPTIONS'	=> $s_birthday_month_options,					'S_BIRTHDAY_YEAR_OPTIONS'	=> $s_birthday_year_options,					'S_PROFILE'		=> true)				);				// Get additional profile fields and assign them to the template block var 'profile_fields'				$user->get_profile_fields($user_id);				$cp->generate_profile_fields('profile', $user_row['iso_lang_id']);			break;			case 'prefs':				include($phpbb_root_path . 'includes/functions_user.' . $phpEx);				$data = array(					'dateformat'		=> utf8_normalize_nfc(request_var('dateformat', $user_row['user_dateformat'], true)),					'lang'				=> basename(request_var('lang', $user_row['user_lang'])),					'tz'				=> request_var('tz', (float) $user_row['user_timezone']),					'style'				=> request_var('style', $user_row['user_style']),					'dst'				=> request_var('dst', $user_row['user_dst']),					'viewemail'			=> request_var('viewemail', $user_row['user_allow_viewemail']),					'massemail'			=> request_var('massemail', $user_row['user_allow_massemail']),					'hideonline'		=> request_var('hideonline', !$user_row['user_allow_viewonline']),					'notifymethod'		=> request_var('notifymethod', $user_row['user_notify_type']),					'notifypm'			=> request_var('notifypm', $user_row['user_notify_pm']),					'popuppm'			=> request_var('popuppm', $this->optionget($user_row, 'popuppm')),					'allowpm'			=> request_var('allowpm', $user_row['user_allow_pm']),					'topic_sk'			=> request_var('topic_sk', ($user_row['user_topic_sortby_type']) ? $user_row['user_topic_sortby_type'] : 't'),					'topic_sd'			=> request_var('topic_sd', ($user_row['user_topic_sortby_dir']) ? $user_row['user_topic_sortby_dir'] : 'd'),					'topic_st'			=> request_var('topic_st', ($user_row['user_topic_show_days']) ? $user_row['user_topic_show_days'] : 0),					'post_sk'			=> request_var('post_sk', ($user_row['user_post_sortby_type']) ? $user_row['user_post_sortby_type'] : 't'),					'post_sd'			=> request_var('post_sd', ($user_row['user_post_sortby_dir']) ? $user_row['user_post_sortby_dir'] : 'a'),					'post_st'			=> request_var('post_st', ($user_row['user_post_show_days']) ? $user_row['user_post_show_days'] : 0),					'view_images'		=> request_var('view_images', $this->optionget($user_row, 'viewimg')),					'view_flash'		=> request_var('view_flash', $this->optionget($user_row, 'viewflash')),					'view_smilies'		=> request_var('view_smilies', $this->optionget($user_row, 'viewsmilies')),					'view_sigs'			=> request_var('view_sigs', $this->optionget($user_row, 'viewsigs')),					'view_avatars'		=> request_var('view_avatars', $this->optionget($user_row, 'viewavatars')),					'view_wordcensor'	=> request_var('view_wordcensor', $this->optionget($user_row, 'viewcensors')),					'bbcode'	=> request_var('bbcode', $this->optionget($user_row, 'bbcode')),					'smilies'	=> request_var('smilies', $this->optionget($user_row, 'smilies')),					'sig'		=> request_var('sig', $this->optionget($user_row, 'attachsig')),					'notify'	=> request_var('notify', $user_row['user_notify']),				);				if ($submit)				{					$error = validate_data($data, array(						'dateformat'	=> array('string', false, 1, 30),						'lang'			=> array('match', false, '#^[a-z_\-]{2,}$#i'),						'tz'			=> array('num', false, -14, 14),						'topic_sk'		=> array('string', false, 1, 1),						'topic_sd'		=> array('string', false, 1, 1),						'post_sk'		=> array('string', false, 1, 1),						'post_sd'		=> array('string', false, 1, 1),					));					if (!check_form_key($form_name))					{						$error[] = 'FORM_INVALID';					}					if (!sizeof($error))					{						$this->optionset($user_row, 'popuppm', $data['popuppm']);						$this->optionset($user_row, 'viewimg', $data['view_images']);						$this->optionset($user_row, 'viewflash', $data['view_flash']);						$this->optionset($user_row, 'viewsmilies', $data['view_smilies']);						$this->optionset($user_row, 'viewsigs', $data['view_sigs']);						$this->optionset($user_row, 'viewavatars', $data['view_avatars']);						$this->optionset($user_row, 'viewcensors', $data['view_wordcensor']);						$this->optionset($user_row, 'bbcode', $data['bbcode']);						$this->optionset($user_row, 'smilies', $data['smilies']);						$this->optionset($user_row, 'attachsig', $data['sig']);						$sql_ary = array(							'user_options'			=> $user_row['user_options'],							'user_allow_pm'			=> $data['allowpm'],							'user_allow_viewemail'	=> $data['viewemail'],							'user_allow_massemail'	=> $data['massemail'],							'user_allow_viewonline'	=> !$data['hideonline'],							'user_notify_type'		=> $data['notifymethod'],							'user_notify_pm'		=> $data['notifypm'],							'user_dst'				=> $data['dst'],							'user_dateformat'		=> $data['dateformat'],							'user_lang'				=> $data['lang'],							'user_timezone'			=> $data['tz'],							'user_style'			=> $data['style'],							'user_topic_sortby_type'	=> $data['topic_sk'],							'user_post_sortby_type'		=> $data['post_sk'],							'user_topic_sortby_dir'		=> $data['topic_sd'],							'user_post_sortby_dir'		=> $data['post_sd'],							'user_topic_show_days'	=> $data['topic_st'],							'user_post_show_days'	=> $data['post_st'],							'user_notify'	=> $data['notify'],						);						$sql = 'UPDATE ' . USERS_TABLE . '							SET ' . $db->sql_build_array('UPDATE', $sql_ary) . "							WHERE user_id = $user_id";						$db->sql_query($sql);						// Check if user has an active session						if ($user_row['session_id'])						{							// We'll update the session if user_allow_viewonline has changed and the user is a bot							// Or if it's a regular user and the admin set it to hide the session							if ($user_row['user_allow_viewonline'] != $sql_ary['user_allow_viewonline'] && $user_row['user_type'] == USER_IGNORE								|| $user_row['user_allow_viewonline'] && !$sql_ary['user_allow_viewonline'])							{								// We also need to check if the user has the permission to cloak.								$user_auth = new auth();								$user_auth->acl($user_row);								$session_sql_ary = array(									'session_viewonline'	=> ($user_auth->acl_get('u_hideonline')) ? $sql_ary['user_allow_viewonline'] : true,								);								$sql = 'UPDATE ' . SESSIONS_TABLE . '									SET ' . $db->sql_build_array('UPDATE', $session_sql_ary) . "									WHERE session_user_id = $user_id";								$db->sql_query($sql);								unset($user_auth);							}						}						trigger_error($user->lang['USER_PREFS_UPDATED'] . adm_back_link($this->u_action . '&amp;u=' . $user_id));					}					// Replace "error" strings with their real, localised form					$error = preg_replace('#^([A-Z_]+)$#e', "(!empty(\$user->lang['\\1'])) ? \$user->lang['\\1'] : '\\1'", $error);				}				$dateformat_options = '';				foreach ($user->lang['dateformats'] as $format => $null)				{					$dateformat_options .= '<option value="' . $format . '"' . (($format == $data['dateformat']) ? ' selected="selected"' : '') . '>';					$dateformat_options .= $user->format_date(time(), $format, false) . ((strpos($format, '|') !== false) ? $user->lang['VARIANT_DATE_SEPARATOR'] . $user->format_date(time(), $format, true) : '');					$dateformat_options .= '</option>';				}				$s_custom = false;				$dateformat_options .= '<option value="custom"';				if (!isset($user->lang['dateformats'][$data['dateformat']]))				{					$dateformat_options .= ' selected="selected"';					$s_custom = true;				}				$dateformat_options .= '>' . $user->lang['CUSTOM_DATEFORMAT'] . '</option>';				$sort_dir_text = array('a' => $user->lang['ASCENDING'], 'd' => $user->lang['DESCENDING']);				// Topic ordering options				$limit_topic_days = array(0 => $user->lang['ALL_TOPICS'], 1 => $user->lang['1_DAY'], 7 => $user->lang['7_DAYS'], 14 => $user->lang['2_WEEKS'], 30 => $user->lang['1_MONTH'], 90 => $user->lang['3_MONTHS'], 180 => $user->lang['6_MONTHS'], 365 => $user->lang['1_YEAR']);				$sort_by_topic_text = array('a' => $user->lang['AUTHOR'], 't' => $user->lang['POST_TIME'], 'r' => $user->lang['REPLIES'], 's' => $user->lang['SUBJECT'], 'v' => $user->lang['VIEWS']);				// Post ordering options				$limit_post_days = array(0 => $user->lang['ALL_POSTS'], 1 => $user->lang['1_DAY'], 7 => $user->lang['7_DAYS'], 14 => $user->lang['2_WEEKS'], 30 => $user->lang['1_MONTH'], 90 => $user->lang['3_MONTHS'], 180 => $user->lang['6_MONTHS'], 365 => $user->lang['1_YEAR']);				$sort_by_post_text = array('a' => $user->lang['AUTHOR'], 't' => $user->lang['POST_TIME'], 's' => $user->lang['SUBJECT']);				$_options = array('topic', 'post');				foreach ($_options as $sort_option)				{					${'s_limit_' . $sort_option . '_days'} = '<select name="' . $sort_option . '_st">';					foreach (${'limit_' . $sort_option . '_days'} as $day => $text)					{						$selected = ($data[$sort_option . '_st'] == $day) ? ' selected="selected"' : '';						${'s_limit_' . $sort_option . '_days'} .= '<option value="' . $day . '"' . $selected . '>' . $text . '</option>';					}					${'s_limit_' . $sort_option . '_days'} .= '</select>';					${'s_sort_' . $sort_option . '_key'} = '<select name="' . $sort_option . '_sk">';					foreach (${'sort_by_' . $sort_option . '_text'} as $key => $text)					{						$selected = ($data[$sort_option . '_sk'] == $key) ? ' selected="selected"' : '';						${'s_sort_' . $sort_option . '_key'} .= '<option value="' . $key . '"' . $selected . '>' . $text . '</option>';					}					${'s_sort_' . $sort_option . '_key'} .= '</select>';					${'s_sort_' . $sort_option . '_dir'} = '<select name="' . $sort_option . '_sd">';					foreach ($sort_dir_text as $key => $value)					{						$selected = ($data[$sort_option . '_sd'] == $key) ? ' selected="selected"' : '';						${'s_sort_' . $sort_option . '_dir'} .= '<option value="' . $key . '"' . $selected . '>' . $value . '</option>';					}					${'s_sort_' . $sort_option . '_dir'} .= '</select>';				}				$template->assign_vars(array(					'S_PREFS'			=> true,					'S_JABBER_DISABLED'	=> ($config['jab_enable'] && $user_row['user_jabber'] && @extension_loaded('xml')) ? false : true,					'VIEW_EMAIL'		=> $data['viewemail'],					'MASS_EMAIL'		=> $data['massemail'],					'ALLOW_PM'			=> $data['allowpm'],					'HIDE_ONLINE'		=> $data['hideonline'],					'NOTIFY_EMAIL'		=> ($data['notifymethod'] == NOTIFY_EMAIL) ? true : false,					'NOTIFY_IM'			=> ($data['notifymethod'] == NOTIFY_IM) ? true : false,					'NOTIFY_BOTH'		=> ($data['notifymethod'] == NOTIFY_BOTH) ? true : false,					'NOTIFY_PM'			=> $data['notifypm'],					'POPUP_PM'			=> $data['popuppm'],					'DST'				=> $data['dst'],					'BBCODE'			=> $data['bbcode'],					'SMILIES'			=> $data['smilies'],					'ATTACH_SIG'		=> $data['sig'],					'NOTIFY'			=> $data['notify'],					'VIEW_IMAGES'		=> $data['view_images'],					'VIEW_FLASH'		=> $data['view_flash'],					'VIEW_SMILIES'		=> $data['view_smilies'],					'VIEW_SIGS'			=> $data['view_sigs'],					'VIEW_AVATARS'		=> $data['view_avatars'],					'VIEW_WORDCENSOR'	=> $data['view_wordcensor'],					'S_TOPIC_SORT_DAYS'		=> $s_limit_topic_days,					'S_TOPIC_SORT_KEY'		=> $s_sort_topic_key,					'S_TOPIC_SORT_DIR'		=> $s_sort_topic_dir,					'S_POST_SORT_DAYS'		=> $s_limit_post_days,					'S_POST_SORT_KEY'		=> $s_sort_post_key,					'S_POST_SORT_DIR'		=> $s_sort_post_dir,					'DATE_FORMAT'			=> $data['dateformat'],					'S_DATEFORMAT_OPTIONS'	=> $dateformat_options,					'S_CUSTOM_DATEFORMAT'	=> $s_custom,					'DEFAULT_DATEFORMAT'	=> $config['default_dateformat'],					'A_DEFAULT_DATEFORMAT'	=> addslashes($config['default_dateformat']),					'S_LANG_OPTIONS'	=> language_select($data['lang']),					'S_STYLE_OPTIONS'	=> style_select($data['style']),					'S_TZ_OPTIONS'		=> tz_select($data['tz'], true),					)				);			break;			case 'avatar':				include($phpbb_root_path . 'includes/functions_display.' . $phpEx);				include($phpbb_root_path . 'includes/functions_user.' . $phpEx);				$can_upload = (file_exists($phpbb_root_path . $config['avatar_path']) && phpbb_is_writable($phpbb_root_path . $config['avatar_path']) && $file_uploads) ? true : false;				if ($submit)				{					if (!check_form_key($form_name))					{							trigger_error($user->lang['FORM_INVALID'] . adm_back_link($this->u_action . '&amp;u=' . $user_id), E_USER_WARNING);					}					if (avatar_process_user($error, $user_row, $can_upload))					{						trigger_error($user->lang['USER_AVATAR_UPDATED'] . adm_back_link($this->u_action . '&amp;u=' . $user_row['user_id']));					}					// Replace "error" strings with their real, localised form					$error = preg_replace('#^([A-Z_]+)$#e', "(!empty(\$user->lang['\\1'])) ? \$user->lang['\\1'] : '\\1'", $error);				}				if (!$config['allow_avatar'] && $user_row['user_avatar_type'])				{					$error[] = $user->lang['USER_AVATAR_NOT_ALLOWED'];				}				else if ((($user_row['user_avatar_type'] == AVATAR_UPLOAD) && !$config['allow_avatar_upload']) ||				 (($user_row['user_avatar_type'] == AVATAR_REMOTE) && !$config['allow_avatar_remote']) ||				 (($user_row['user_avatar_type'] == AVATAR_GALLERY) && !$config['allow_avatar_local']))				{					$error[] = $user->lang['USER_AVATAR_TYPE_NOT_ALLOWED'];				}				// Generate users avatar				$avatar_img = ($user_row['user_avatar']) ? get_user_avatar($user_row['user_avatar'], $user_row['user_avatar_type'], $user_row['user_avatar_width'], $user_row['user_avatar_height'], 'USER_AVATAR', true) : '<img src="' . $phpbb_admin_path . 'images/no_avatar.gif" alt="" />';				$display_gallery = (isset($_POST['display_gallery'])) ? true : false;				$avatar_select = basename(request_var('avatar_select', ''));				$category = basename(request_var('category', ''));				if ($config['allow_avatar_local'] && $display_gallery)				{					avatar_gallery($category, $avatar_select, 4);				}				$template->assign_vars(array(					'S_AVATAR'			=> true,					'S_CAN_UPLOAD'		=> $can_upload,					'S_UPLOAD_FILE'		=> ($config['allow_avatar'] && $can_upload && $config['allow_avatar_upload']) ? true : false,					'S_REMOTE_UPLOAD'	=> ($config['allow_avatar'] && $can_upload && $config['allow_avatar_remote_upload']) ? true : false,					'S_ALLOW_REMOTE'	=> ($config['allow_avatar'] && $config['allow_avatar_remote']) ? true : false,					'S_DISPLAY_GALLERY'	=> ($config['allow_avatar'] && $config['allow_avatar_local'] && !$display_gallery) ? true : false,					'S_IN_GALLERY'		=> ($config['allow_avatar'] && $config['allow_avatar_local'] && $display_gallery) ? true : false,					'AVATAR_IMAGE'			=> $avatar_img,					'AVATAR_MAX_FILESIZE'	=> $config['avatar_filesize'],					'USER_AVATAR_WIDTH'		=> $user_row['user_avatar_width'],					'USER_AVATAR_HEIGHT'	=> $user_row['user_avatar_height'],					'L_AVATAR_EXPLAIN'	=> sprintf($user->lang['AVATAR_EXPLAIN'], $config['avatar_max_width'], $config['avatar_max_height'], round($config['avatar_filesize'] / 1024)))				);			break;			case 'rank':				if ($submit)				{					if (!check_form_key($form_name))					{						trigger_error($user->lang['FORM_INVALID'] . adm_back_link($this->u_action . '&amp;u=' . $user_id), E_USER_WARNING);					}					$rank_id = request_var('user_rank', 0);					$sql = 'UPDATE ' . USERS_TABLE . "						SET user_rank = $rank_id						WHERE user_id = $user_id";					$db->sql_query($sql);					trigger_error($user->lang['USER_RANK_UPDATED'] . adm_back_link($this->u_action . '&amp;u=' . $user_id));				}				$sql = 'SELECT *					FROM ' . RANKS_TABLE . '					WHERE rank_special = 1					ORDER BY rank_title';				$result = $db->sql_query($sql);				$s_rank_options = '<option value="0"' . ((!$user_row['user_rank']) ? ' selected="selected"' : '') . '>' . $user->lang['NO_SPECIAL_RANK'] . '</option>';				while ($row = $db->sql_fetchrow($result))				{					$selected = ($user_row['user_rank'] && $row['rank_id'] == $user_row['user_rank']) ? ' selected="selected"' : '';					$s_rank_options .= '<option value="' . $row['rank_id'] . '"' . $selected . '>' . $row['rank_title'] . '</option>';				}				$db->sql_freeresult($result);				$template->assign_vars(array(					'S_RANK'			=> true,					'S_RANK_OPTIONS'	=> $s_rank_options)				);			break;			case 'sig':				include_once($phpbb_root_path . 'includes/functions_posting.' . $phpEx);				include_once($phpbb_root_path . 'includes/functions_display.' . $phpEx);				$enable_bbcode	= ($config['allow_sig_bbcode']) ? (bool) $this->optionget($user_row, 'sig_bbcode') : false;				$enable_smilies	= ($config['allow_sig_smilies']) ? (bool) $this->optionget($user_row, 'sig_smilies') : false;				$enable_urls	= ($config['allow_sig_links']) ? (bool) $this->optionget($user_row, 'sig_links') : false;				$signature		= utf8_normalize_nfc(request_var('signature', (string) $user_row['user_sig'], true));				$preview		= (isset($_POST['preview'])) ? true : false;				if ($submit || $preview)				{					include_once($phpbb_root_path . 'includes/message_parser.' . $phpEx);					$enable_bbcode	= ($config['allow_sig_bbcode']) ? ((request_var('disable_bbcode', false)) ? false : true) : false;					$enable_smilies	= ($config['allow_sig_smilies']) ? ((request_var('disable_smilies', false)) ? false : true) : false;					$enable_urls	= ($config['allow_sig_links']) ? ((request_var('disable_magic_url', false)) ? false : true) : false;					$message_parser = new parse_message($signature);					// Allowing Quote BBCode					$message_parser->parse($enable_bbcode, $enable_urls, $enable_smilies, $config['allow_sig_img'], $config['allow_sig_flash'], true, $config['allow_sig_links'], true, 'sig');					if (sizeof($message_parser->warn_msg))					{						$error[] = implode('<br />', $message_parser->warn_msg);					}					if (!check_form_key($form_name))					{						$error = 'FORM_INVALID';					}					if (!sizeof($error) && $submit)					{						$this->optionset($user_row, 'sig_bbcode', $enable_bbcode);						$this->optionset($user_row, 'sig_smilies', $enable_smilies);						$this->optionset($user_row, 'sig_links', $enable_urls);						$sql_ary = array(							'user_sig'					=> (string) $message_parser->message,							'user_options'				=> $user_row['user_options'],							'user_sig_bbcode_uid'		=> (string) $message_parser->bbcode_uid,							'user_sig_bbcode_bitfield'	=> (string) $message_parser->bbcode_bitfield						);						$sql = 'UPDATE ' . USERS_TABLE . '							SET ' . $db->sql_build_array('UPDATE', $sql_ary) . '							WHERE user_id = ' . $user_id;						$db->sql_query($sql);						trigger_error($user->lang['USER_SIG_UPDATED'] . adm_back_link($this->u_action . '&amp;u=' . $user_id));					}					// Replace "error" strings with their real, localised form					$error = preg_replace('#^([A-Z_]+)$#e', "(!empty(\$user->lang['\\1'])) ? \$user->lang['\\1'] : '\\1'", $error);				}				$signature_preview = '';				if ($preview)				{					// Now parse it for displaying					$signature_preview = $message_parser->format_display($enable_bbcode, $enable_urls, $enable_smilies, false);					unset($message_parser);				}				decode_message($signature, $user_row['user_sig_bbcode_uid']);				$template->assign_vars(array(					'S_SIGNATURE'		=> true,					'SIGNATURE'			=> $signature,					'SIGNATURE_PREVIEW'	=> $signature_preview,					'S_BBCODE_CHECKED'		=> (!$enable_bbcode) ? ' checked="checked"' : '',					'S_SMILIES_CHECKED'		=> (!$enable_smilies) ? ' checked="checked"' : '',					'S_MAGIC_URL_CHECKED'	=> (!$enable_urls) ? ' checked="checked"' : '',					'BBCODE_STATUS'			=> ($config['allow_sig_bbcode']) ? sprintf($user->lang['BBCODE_IS_ON'], '<a href="' . append_sid("{$phpbb_root_path}faq.$phpEx", 'mode=bbcode') . '">', '</a>') : sprintf($user->lang['BBCODE_IS_OFF'], '<a href="' . append_sid("{$phpbb_root_path}faq.$phpEx", 'mode=bbcode') . '">', '</a>'),					'SMILIES_STATUS'		=> ($config['allow_sig_smilies']) ? $user->lang['SMILIES_ARE_ON'] : $user->lang['SMILIES_ARE_OFF'],					'IMG_STATUS'			=> ($config['allow_sig_img']) ? $user->lang['IMAGES_ARE_ON'] : $user->lang['IMAGES_ARE_OFF'],					'FLASH_STATUS'			=> ($config['allow_sig_flash']) ? $user->lang['FLASH_IS_ON'] : $user->lang['FLASH_IS_OFF'],					'URL_STATUS'			=> ($config['allow_sig_links']) ? $user->lang['URL_IS_ON'] : $user->lang['URL_IS_OFF'],					'L_SIGNATURE_EXPLAIN'	=> sprintf($user->lang['SIGNATURE_EXPLAIN'], $config['max_sig_chars']),					'S_BBCODE_ALLOWED'		=> $config['allow_sig_bbcode'],					'S_SMILIES_ALLOWED'		=> $config['allow_sig_smilies'],					'S_BBCODE_IMG'			=> ($config['allow_sig_img']) ? true : false,					'S_BBCODE_FLASH'		=> ($config['allow_sig_flash']) ? true : false,					'S_LINKS_ALLOWED'		=> ($config['allow_sig_links']) ? true : false)				);				// Assigning custom bbcodes				display_custom_bbcodes();			break;			case 'attach':				$start		= request_var('start', 0);				$deletemark = (isset($_POST['delmarked'])) ? true : false;				$marked		= request_var('mark', array(0));				// Sort keys				$sort_key	= request_var('sk', 'a');				$sort_dir	= request_var('sd', 'd');				if ($deletemark && sizeof($marked))				{					$sql = 'SELECT attach_id						FROM ' . ATTACHMENTS_TABLE . '						WHERE poster_id = ' . $user_id . '							AND is_orphan = 0							AND ' . $db->sql_in_set('attach_id', $marked);					$result = $db->sql_query($sql);					$marked = array();					while ($row = $db->sql_fetchrow($result))					{						$marked[] = $row['attach_id'];					}					$db->sql_freeresult($result);				}				if ($deletemark && sizeof($marked))				{					if (confirm_box(true))					{						$sql = 'SELECT real_filename							FROM ' . ATTACHMENTS_TABLE . '							WHERE ' . $db->sql_in_set('attach_id', $marked);						$result = $db->sql_query($sql);						$log_attachments = array();						while ($row = $db->sql_fetchrow($result))						{							$log_attachments[] = $row['real_filename'];						}						$db->sql_freeresult($result);						delete_attachments('attach', $marked);						$message = (sizeof($log_attachments) == 1) ? $user->lang['ATTACHMENT_DELETED'] : $user->lang['ATTACHMENTS_DELETED'];						add_log('admin', 'LOG_ATTACHMENTS_DELETED', implode(', ', $log_attachments));						trigger_error($message . adm_back_link($this->u_action . '&amp;u=' . $user_id));					}					else					{						confirm_box(false, $user->lang['CONFIRM_OPERATION'], build_hidden_fields(array(							'u'				=> $user_id,							'i'				=> $id,							'mode'			=> $mode,							'action'		=> $action,							'delmarked'		=> true,							'mark'			=> $marked))						);					}				}				$sk_text = array('a' => $user->lang['SORT_FILENAME'], 'c' => $user->lang['SORT_EXTENSION'], 'd' => $user->lang['SORT_SIZE'], 'e' => $user->lang['SORT_DOWNLOADS'], 'f' => $user->lang['SORT_POST_TIME'], 'g' => $user->lang['SORT_TOPIC_TITLE']);				$sk_sql = array('a' => 'a.real_filename', 'c' => 'a.extension', 'd' => 'a.filesize', 'e' => 'a.download_count', 'f' => 'a.filetime', 'g' => 't.topic_title');				$sd_text = array('a' => $user->lang['ASCENDING'], 'd' => $user->lang['DESCENDING']);				$s_sort_key = '';				foreach ($sk_text as $key => $value)				{					$selected = ($sort_key == $key) ? ' selected="selected"' : '';					$s_sort_key .= '<option value="' . $key . '"' . $selected . '>' . $value . '</option>';				}				$s_sort_dir = '';				foreach ($sd_text as $key => $value)				{					$selected = ($sort_dir == $key) ? ' selected="selected"' : '';					$s_sort_dir .= '<option value="' . $key . '"' . $selected . '>' . $value . '</option>';				}				if (!isset($sk_sql[$sort_key]))				{					$sort_key = 'a';				}				$order_by = $sk_sql[$sort_key] . ' ' . (($sort_dir == 'a') ? 'ASC' : 'DESC');				$sql = 'SELECT COUNT(attach_id) as num_attachments					FROM ' . ATTACHMENTS_TABLE . "					WHERE poster_id = $user_id						AND is_orphan = 0";				$result = $db->sql_query_limit($sql, 1);				$num_attachments = (int) $db->sql_fetchfield('num_attachments');				$db->sql_freeresult($result);				$sql = 'SELECT a.*, t.topic_title, p.message_subject as message_title					FROM ' . ATTACHMENTS_TABLE . ' a						LEFT JOIN ' . TOPICS_TABLE . ' t ON (a.topic_id = t.topic_id							AND a.in_message = 0)						LEFT JOIN ' . PRIVMSGS_TABLE . ' p ON (a.post_msg_id = p.msg_id							AND a.in_message = 1)					WHERE a.poster_id = ' . $user_id . "						AND a.is_orphan = 0					ORDER BY $order_by";				$result = $db->sql_query_limit($sql, $config['posts_per_page'], $start);				while ($row = $db->sql_fetchrow($result))				{					if ($row['in_message'])					{						$view_topic = append_sid("{$phpbb_root_path}ucp.$phpEx", "i=pm&amp;p={$row['post_msg_id']}");					}					else					{						$view_topic = append_sid("{$phpbb_root_path}viewtopic.$phpEx", "t={$row['topic_id']}&amp;p={$row['post_msg_id']}") . '#p' . $row['post_msg_id'];					}					$template->assign_block_vars('attach', array(						'REAL_FILENAME'		=> $row['real_filename'],						'COMMENT'			=> nl2br($row['attach_comment']),						'EXTENSION'			=> $row['extension'],						'SIZE'				=> get_formatted_filesize($row['filesize']),						'DOWNLOAD_COUNT'	=> $row['download_count'],						'POST_TIME'			=> $user->format_date($row['filetime']),						'TOPIC_TITLE'		=> ($row['in_message']) ? $row['message_title'] : $row['topic_title'],						'ATTACH_ID'			=> $row['attach_id'],						'POST_ID'			=> $row['post_msg_id'],						'TOPIC_ID'			=> $row['topic_id'],						'S_IN_MESSAGE'		=> $row['in_message'],						'U_DOWNLOAD'		=> append_sid("{$phpbb_root_path}download/file.$phpEx", 'mode=view&amp;id=' . $row['attach_id']),						'U_VIEW_TOPIC'		=> $view_topic)					);				}				$db->sql_freeresult($result);				$template->assign_vars(array(					'S_ATTACHMENTS'		=> true,					'S_ON_PAGE'			=> on_page($num_attachments, $config['topics_per_page'], $start),					'S_SORT_KEY'		=> $s_sort_key,					'S_SORT_DIR'		=> $s_sort_dir,					'PAGINATION'		=> generate_pagination($this->u_action . "&amp;u=$user_id&amp;sk=$sort_key&amp;sd=$sort_dir", $num_attachments, $config['topics_per_page'], $start, true))				);			break;			case 'groups':				include($phpbb_root_path . 'includes/functions_user.' . $phpEx);				$user->add_lang(array('groups', 'acp/groups'));				$group_id = request_var('g', 0);				if ($group_id)				{					// Check the founder only entry for this group to make sure everything is well					$sql = 'SELECT group_founder_manage						FROM ' . GROUPS_TABLE . '						WHERE group_id = ' . $group_id;					$result = $db->sql_query($sql);					$founder_manage = (int) $db->sql_fetchfield('group_founder_manage');					$db->sql_freeresult($result);					if ($user->data['user_type'] != USER_FOUNDER && $founder_manage)					{						trigger_error($user->lang['NOT_ALLOWED_MANAGE_GROUP'] . adm_back_link($this->u_action . '&amp;u=' . $user_id), E_USER_WARNING);					}				}				else				{					$founder_manage = 0;				}				switch ($action)				{					case 'demote':					case 'promote':					case 'default':						if (!$group_id)						{							trigger_error($user->lang['NO_GROUP'] . adm_back_link($this->u_action . '&amp;u=' . $user_id), E_USER_WARNING);						}						group_user_attributes($action, $group_id, $user_id);						if ($action == 'default')						{							$user_row['group_id'] = $group_id;						}					break;					case 'delete':						if (confirm_box(true))						{							if (!$group_id)							{								trigger_error($user->lang['NO_GROUP'] . adm_back_link($this->u_action . '&amp;u=' . $user_id), E_USER_WARNING);							}							if ($error = group_user_del($group_id, $user_id))							{								trigger_error($user->lang[$error] . adm_back_link($this->u_action . '&amp;u=' . $user_id), E_USER_WARNING);							}							$error = array();							// The delete action was successful - therefore update the user row...							$sql = 'SELECT u.*, s.*								FROM ' . USERS_TABLE . ' u									LEFT JOIN ' . SESSIONS_TABLE . ' s ON (s.session_user_id = u.user_id)								WHERE u.user_id = ' . $user_id . '								ORDER BY s.session_time DESC';							$result = $db->sql_query_limit($sql, 1);							$user_row = $db->sql_fetchrow($result);							$db->sql_freeresult($result);						}						else						{							confirm_box(false, $user->lang['CONFIRM_OPERATION'], build_hidden_fields(array(								'u'				=> $user_id,								'i'				=> $id,								'mode'			=> $mode,								'action'		=> $action,								'g'				=> $group_id))							);						}					break;					case 'approve':						if (confirm_box(true))						{							if (!$group_id)							{								trigger_error($user->lang['NO_GROUP'] . adm_back_link($this->u_action . '&amp;u=' . $user_id), E_USER_WARNING);							}							group_user_attributes($action, $group_id, $user_id);						}						else						{							confirm_box(false, $user->lang['CONFIRM_OPERATION'], build_hidden_fields(array(								'u'				=> $user_id,								'i'				=> $id,								'mode'			=> $mode,								'action'		=> $action,								'g'				=> $group_id))							);						}					break;				}				// Add user to group?				if ($submit)				{					if (!check_form_key($form_name))					{						trigger_error($user->lang['FORM_INVALID'] . adm_back_link($this->u_action . '&amp;u=' . $user_id), E_USER_WARNING);					}					if (!$group_id)					{						trigger_error($user->lang['NO_GROUP'] . adm_back_link($this->u_action . '&amp;u=' . $user_id), E_USER_WARNING);					}					// Add user/s to group					if ($error = group_user_add($group_id, $user_id))					{						trigger_error($user->lang[$error] . adm_back_link($this->u_action . '&amp;u=' . $user_id), E_USER_WARNING);					}					$error = array();				}				$sql = 'SELECT ug.*, g.*					FROM ' . GROUPS_TABLE . ' g, ' . USER_GROUP_TABLE . " ug					WHERE ug.user_id = $user_id						AND g.group_id = ug.group_id					ORDER BY g.group_type DESC, ug.user_pending ASC, g.group_name";				$result = $db->sql_query($sql);				$i = 0;				$group_data = $id_ary = array();				while ($row = $db->sql_fetchrow($result))				{					$type = ($row['group_type'] == GROUP_SPECIAL) ? 'special' : (($row['user_pending']) ? 'pending' : 'normal');					$group_data[$type][$i]['group_id']		= $row['group_id'];					$group_data[$type][$i]['group_name']	= $row['group_name'];					$group_data[$type][$i]['group_leader']	= ($row['group_leader']) ? 1 : 0;					$id_ary[] = $row['group_id'];					$i++;				}				$db->sql_freeresult($result);				// Select box for other groups				$sql = 'SELECT group_id, group_name, group_type, group_founder_manage					FROM ' . GROUPS_TABLE . '					' . ((sizeof($id_ary)) ? 'WHERE ' . $db->sql_in_set('group_id', $id_ary, true) : '') . '					ORDER BY group_type DESC, group_name ASC';				$result = $db->sql_query($sql);				$s_group_options = '';				while ($row = $db->sql_fetchrow($result))				{					if (!$config['coppa_enable'] && $row['group_name'] == 'REGISTERED_COPPA')					{						continue;					}					// Do not display those groups not allowed to be managed					if ($user->data['user_type'] != USER_FOUNDER && $row['group_founder_manage'])					{						continue;					}					$s_group_options .= '<option' . (($row['group_type'] == GROUP_SPECIAL) ? ' class="sep"' : '') . ' value="' . $row['group_id'] . '">' . (($row['group_type'] == GROUP_SPECIAL) ? $user->lang['G_' . $row['group_name']] : $row['group_name']) . '</option>';				}				$db->sql_freeresult($result);				$current_type = '';				foreach ($group_data as $group_type => $data_ary)				{					if ($current_type != $group_type)					{						$template->assign_block_vars('group', array(							'S_NEW_GROUP_TYPE'		=> true,							'GROUP_TYPE'			=> $user->lang['USER_GROUP_' . strtoupper($group_type)])						);					}					foreach ($data_ary as $data)					{						$template->assign_block_vars('group', array(							'U_EDIT_GROUP'		=> append_sid("{$phpbb_admin_path}index.$phpEx", "i=groups&amp;mode=manage&amp;action=edit&amp;u=$user_id&amp;g={$data['group_id']}&amp;back_link=acp_users_groups"),							'U_DEFAULT'			=> $this->u_action . "&amp;action=default&amp;u=$user_id&amp;g=" . $data['group_id'],							'U_DEMOTE_PROMOTE'	=> $this->u_action . '&amp;action=' . (($data['group_leader']) ? 'demote' : 'promote') . "&amp;u=$user_id&amp;g=" . $data['group_id'],							'U_DELETE'			=> $this->u_action . "&amp;action=delete&amp;u=$user_id&amp;g=" . $data['group_id'],							'U_APPROVE'			=> ($group_type == 'pending') ? $this->u_action . "&amp;action=approve&amp;u=$user_id&amp;g=" . $data['group_id'] : '',							'GROUP_NAME'		=> ($group_type == 'special') ? $user->lang['G_' . $data['group_name']] : $data['group_name'],							'L_DEMOTE_PROMOTE'	=> ($data['group_leader']) ? $user->lang['GROUP_DEMOTE'] : $user->lang['GROUP_PROMOTE'],							'S_IS_MEMBER'		=> ($group_type != 'pending') ? true : false,							'S_NO_DEFAULT'		=> ($user_row['group_id'] != $data['group_id']) ? true : false,							'S_SPECIAL_GROUP'	=> ($group_type == 'special') ? true : false,							)						);					}				}				$template->assign_vars(array(					'S_GROUPS'			=> true,					'S_GROUP_OPTIONS'	=> $s_group_options)				);			break;			case 'perm':				include_once($phpbb_root_path . 'includes/acp/auth.' . $phpEx);				$auth_admin = new auth_admin();				$user->add_lang('acp/permissions');				add_permission_language();				$forum_id = request_var('f', 0);				// Global Permissions				if (!$forum_id)				{					// Select auth options					$sql = 'SELECT auth_option, is_local, is_global						FROM ' . ACL_OPTIONS_TABLE . '						WHERE auth_option ' . $db->sql_like_expression($db->any_char . '_') . '							AND is_global = 1						ORDER BY auth_option';					$result = $db->sql_query($sql);					$hold_ary = array();					while ($row = $db->sql_fetchrow($result))					{						$hold_ary = $auth_admin->get_mask('view', $user_id, false, false, $row['auth_option'], 'global', ACL_NEVER);						$auth_admin->display_mask('view', $row['auth_option'], $hold_ary, 'user', false, false);					}					$db->sql_freeresult($result);					unset($hold_ary);				}				else				{					$sql = 'SELECT auth_option, is_local, is_global						FROM ' . ACL_OPTIONS_TABLE . "						WHERE auth_option " . $db->sql_like_expression($db->any_char . '_') . "							AND is_local = 1						ORDER BY is_global DESC, auth_option";					$result = $db->sql_query($sql);					while ($row = $db->sql_fetchrow($result))					{						$hold_ary = $auth_admin->get_mask('view', $user_id, false, $forum_id, $row['auth_option'], 'local', ACL_NEVER);						$auth_admin->display_mask('view', $row['auth_option'], $hold_ary, 'user', true, false);					}					$db->sql_freeresult($result);				}				$s_forum_options = '<option value="0"' . ((!$forum_id) ? ' selected="selected"' : '') . '>' . $user->lang['VIEW_GLOBAL_PERMS'] . '</option>';				$s_forum_options .= make_forum_select($forum_id, false, true, false, false, false);				$template->assign_vars(array(					'S_PERMISSIONS'				=> true,					'S_GLOBAL'					=> (!$forum_id) ? true : false,					'S_FORUM_OPTIONS'			=> $s_forum_options,					'U_ACTION'					=> $this->u_action . '&amp;u=' . $user_id,					'U_USER_PERMISSIONS'		=> append_sid("{$phpbb_admin_path}index.$phpEx" ,'i=permissions&amp;mode=setting_user_global&amp;user_id[]=' . $user_id),					'U_USER_FORUM_PERMISSIONS'	=> append_sid("{$phpbb_admin_path}index.$phpEx", 'i=permissions&amp;mode=setting_user_local&amp;user_id[]=' . $user_id))				);			break;		}		// Assign general variables		$template->assign_vars(array(			'S_ERROR'			=> (sizeof($error)) ? true : false,			'ERROR_MSG'			=> (sizeof($error)) ? implode('<br />', $error) : '')		);	}	/**	* Optionset replacement for this module based on $user->optionset	*/	function optionset(&$user_row, $key, $value, $data = false)	{		global $user;		$var = ($data) ? $data : $user_row['user_options'];		if ($value && !($var & 1 << $user->keyoptions[$key]))		{			$var += 1 << $user->keyoptions[$key];		}		else if (!$value && ($var & 1 << $user->keyoptions[$key]))		{			$var -= 1 << $user->keyoptions[$key];		}		else		{			return ($data) ? $var : false;		}		if (!$data)		{			$user_row['user_options'] = $var;			return true;		}		else		{			return $var;		}	}	/**	* Optionget replacement for this module based on $user->optionget	*/	function optionget(&$user_row, $key, $data = false)	{		global $user;		$var = ($data) ? $data : $user_row['user_options'];		return ($var & 1 << $user->keyoptions[$key]) ? true : false;	}}?>
<?php/**** @package phpBB3* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**/if (php_sapi_name() != 'cli'){	die("This program must be run from the command line.\n");}//// Security message://// This script is potentially dangerous.// Remove or comment the next line (die(".... ) to enable this script.// Do NOT FORGET to either remove this script or disable it after you have used it.//die("Please read the first lines of this script for instructions on how to enable it");set_time_limit(0);error_reporting(E_ALL);define('IN_PHPBB', true);$phpbb_root_path = '../';$phpEx = substr(strrchr(__FILE__, '.'), 1);/*** Let's download some files we need*/download('http://www.unicode.org/Public/UNIDATA/NormalizationTest.txt');download('http://www.unicode.org/Public/UNIDATA/UnicodeData.txt');/*** Those are the tests we run*/$test_suite = array(	/**	* NFC	*   c2 ==  NFC(c1) ==  NFC(c2) ==  NFC(c3)	*   c4 ==  NFC(c4) ==  NFC(c5)	*/	'NFC'	=>	array(		'c2'	=>	array('c1', 'c2', 'c3'),		'c4'	=>	array('c4', 'c5')	),	/**	* NFD	*   c3 ==  NFD(c1) ==  NFD(c2) ==  NFD(c3)	*   c5 ==  NFD(c4) ==  NFD(c5)	*/	'NFD'	=>	array(		'c3'	=>	array('c1', 'c2', 'c3'),		'c5'	=>	array('c4', 'c5')	),	/**	* NFKC	*   c4 == NFKC(c1) == NFKC(c2) == NFKC(c3) == NFKC(c4) == NFKC(c5)	*/	'NFKC'	=>	array(		'c4'	=>	array('c1', 'c2', 'c3', 'c4', 'c5')	),	/**	* NFKD	*   c5 == NFKD(c1) == NFKD(c2) == NFKD(c3) == NFKD(c4) == NFKD(c5)	*/	'NFKD'	=>	array(		'c5'	=>	array('c1', 'c2', 'c3', 'c4', 'c5')	));require_once($phpbb_root_path . 'includes/utf/utf_normalizer.' . $phpEx);$i = $n = 0;$failed = false;$tested_chars = array();$fp = fopen($phpbb_root_path . 'develop/NormalizationTest.txt', 'rb');while (!feof($fp)){	$line = fgets($fp);	++$n;	if ($line[0] == '@')	{		if ($i)		{			echo "done\n";		}		$i = 0;		echo "\n", substr($line, 1), "\n\n";		continue;	}	if (!strpos(' 0123456789ABCDEF', $line[0]))	{		continue;	}	if (++$i % 100 == 0)	{		echo $i, ' ';	}	list($c1, $c2, $c3, $c4, $c5) = explode(';', $line);	if (!strpos($c1, ' '))	{		/**		* We are currently testing a single character, we add it to the list of		* characters we have processed so that we can exclude it when testing		* for invariants		*/		$tested_chars[$c1] = 1;	}	foreach ($test_suite as $form => $serie)	{		foreach ($serie as $expected => $tests)		{			$hex_expected = ${$expected};			$utf_expected = hexseq_to_utf($hex_expected);			foreach ($tests as $test)			{				$utf_result = $utf_expected;				call_user_func(array('utf_normalizer', $form), $utf_result);				if (strcmp($utf_expected, $utf_result))				{					$failed = true;					$hex_result = utf_to_hexseq($utf_result);					echo "\nFAILED $expected == $form($test) ($hex_expected != $hex_result)";				}			}		}		if ($failed)		{			die("\n\nFailed at line $n\n");		}	}}fclose($fp);/*** Test for invariants*/echo "\n\nTesting for invariants...\n\n";$fp = fopen($phpbb_root_path . 'develop/UnicodeData.txt', 'rt');$n = 0;while (!feof($fp)){	if (++$n % 100 == 0)	{		echo $n, ' ';	}	$line = fgets($fp, 1024);	if (!$pos = strpos($line, ';'))	{		continue;	}	$hex_tested = $hex_expected = substr($line, 0, $pos);	if (isset($tested_chars[$hex_tested]))	{		continue;	}	$utf_expected = hex_to_utf($hex_expected);	if ($utf_expected >= UTF8_SURROGATE_FIRST	 && $utf_expected <= UTF8_SURROGATE_LAST)	{		/**		* Surrogates are illegal on their own, we expect the normalizer		* to return a replacement char		*/		$utf_expected = UTF8_REPLACEMENT;		$hex_expected = utf_to_hexseq($utf_expected);	}	foreach (array('nfc', 'nfkc', 'nfd', 'nfkd') as $form)	{		$utf_result = $utf_expected;		utf_normalizer::$form($utf_result);		$hex_result = utf_to_hexseq($utf_result);//		echo "$form($utf_expected) == $utf_result\n";		if (strcmp($utf_expected, $utf_result))		{			$failed = 1;			echo "\nFAILED $hex_expected == $form($hex_tested) ($hex_expected != $hex_result)";		}	}	if ($failed)	{		die("\n\nFailed at line $n\n");	}}fclose($fp);die("\n\nALL TESTS PASSED SUCCESSFULLY\n");/*** Download a file to the develop/ dir** @param	string	$url		URL of the file to download* @return	void*/function download($url){	global $phpbb_root_path;	if (file_exists($phpbb_root_path . 'develop/' . basename($url)))	{		return;	}	echo 'Downloading from ', $url, ' ';	if (!$fpr = fopen($url, 'rb'))	{		die("Can't download from $url\nPlease download it yourself and put it in the develop/ dir, kthxbai");	}	if (!$fpw = fopen($phpbb_root_path . 'develop/' . basename($url), 'wb'))	{		die("Can't open develop/" . basename($url) . " for output... please check your permissions or something");	}	$i = 0;	$chunk = 32768;	$done = '';	while (!feof($fpr))	{		$i += fwrite($fpw, fread($fpr, $chunk));		echo str_repeat("\x08", strlen($done));		$done = ($i >> 10) . ' KiB';		echo $done;	}	fclose($fpr);	fclose($fpw);	echo "\n";}/*** Convert a UTF string to a sequence of codepoints in hexadecimal** @param	string	$utf	UTF string* @return	integer			Unicode codepoints in hex*/function utf_to_hexseq($str){	$pos = 0;	$len = strlen($str);	$ret = array();	while ($pos < $len)	{		$c = $str[$pos];		switch ($c & "\xF0")		{			case "\xC0":			case "\xD0":				$utf_char = substr($str, $pos, 2);				$pos += 2;				break;			case "\xE0":				$utf_char = substr($str, $pos, 3);				$pos += 3;				break;			case "\xF0":				$utf_char = substr($str, $pos, 4);				$pos += 4;				break;			default:				$utf_char = $c;				++$pos;		}		$hex = dechex(utf_to_cp($utf_char));		if (!isset($hex[3]))		{			$hex = substr('000' . $hex, -4);		}		$ret[] = $hex;	}	return strtr(implode(' ', $ret), 'abcdef', 'ABCDEF');}/*** Convert a UTF-8 char to its codepoint** @param	string	$utf_char	UTF-8 char* @return	integer				Unicode codepoint*/function utf_to_cp($utf_char){	switch (strlen($utf_char))	{		case 1:			return ord($utf_char);		case 2:			return ((ord($utf_char[0]) & 0x1F) << 6) | (ord($utf_char[1]) & 0x3F);		case 3:			return ((ord($utf_char[0]) & 0x0F) << 12) | ((ord($utf_char[1]) & 0x3F) << 6) | (ord($utf_char[2]) & 0x3F);		case 4:			return ((ord($utf_char[0]) & 0x07) << 18) | ((ord($utf_char[1]) & 0x3F) << 12) | ((ord($utf_char[2]) & 0x3F) << 6) | (ord($utf_char[3]) & 0x3F);		default:			die('UTF-8 chars can only be 1-4 bytes long');	}}/*** Return a UTF string formed from a sequence of codepoints in hexadecimal** @param	string	$seq		Sequence of codepoints, separated with a space* @return	string				UTF-8 string*/function hexseq_to_utf($seq){	return implode('', array_map('hex_to_utf', explode(' ', $seq)));}/*** Convert a codepoint in hexadecimal to a UTF-8 char** @param	string	$hex		Codepoint, in hexadecimal* @return	string				UTF-8 char*/function hex_to_utf($hex){	return cp_to_utf(hexdec($hex));}/*** Convert a codepoint to a UTF-8 char** @param	integer	$cp			Unicode codepoint* @return	string				UTF-8 string*/function cp_to_utf($cp){	if ($cp > 0xFFFF)	{		return chr(0xF0 | ($cp >> 18)) . chr(0x80 | (($cp >> 12) & 0x3F)) . chr(0x80 | (($cp >> 6) & 0x3F)) . chr(0x80 | ($cp & 0x3F));	}	else if ($cp > 0x7FF)	{		return chr(0xE0 | ($cp >> 12)) . chr(0x80 | (($cp >> 6) & 0x3F)) . chr(0x80 | ($cp & 0x3F));	}	else if ($cp > 0x7F)	{		return chr(0xC0 | ($cp >> 6)) . chr(0x80 | ($cp & 0x3F));	}	else	{		return chr($cp);	}}
<?php/**** ucp [English]** @package language* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** DO NOT CHANGE*/if (!defined('IN_PHPBB')){	exit;}if (empty($lang) || !is_array($lang)){	$lang = array();}// DEVELOPERS PLEASE NOTE//// All language files should use UTF-8 as their encoding and the files must not contain a BOM.//// Placeholders can now contain order information, e.g. instead of// 'Page %s of %s' you can (and should) write 'Page %1$s of %2$s', this allows// translators to re-order the output of data while ensuring it remains correct//// You do not need this where single placeholders are used, e.g. 'Message %d' is fine// equally where a string contains only two placeholders which are used to wrap text// in a url you again do not need to specify an order e.g., 'Click %sHERE%s' is fine// Privacy policy and T&C$lang = array_merge($lang, array(	'TERMS_OF_USE_CONTENT'	=> 'By accessing %1$s (hereinafter we, us, our, %1$s, %2$s), you agree to be legally bound by the following terms. If you do not agree to be legally bound by all of the following terms then please do not access and/or use %1$s. We may change these at any time and well do our utmost in informing you, though it would be prudent to review this regularly yourself as your continued usage of %1$s after changes mean you agree to be legally bound by these terms as they are updated and/or amended.<br />	<br />	Our forums are powered by phpBB (hereinafter they, them, their, phpBB software, www.phpbb.com, phpBB Group, phpBB Teams) which is a bulletin board solution released under the <a href="http://opensource.org/licenses/gpl-license.php">General Public License</a> (hereinafter GPL) and can be downloaded from <a href="http://www.phpbb.com/">www.phpbb.com</a>. The phpBB software only facilitates internet based discussions, the phpBB Group are not responsible for what we allow and/or disallow as permissible content and/or conduct. For further information about phpBB, please see: <a href="http://www.phpbb.com/">http://www.phpbb.com/</a>.<br />	<br />	You agree not to post any abusive, obscene, vulgar, slanderous, hateful, threatening, sexually-orientated or any other material that may violate any laws be it of your country, the country where %1$s is hosted or International Law. Doing so may lead to you being immediately and permanently banned, with notification of your Internet Service Provider if deemed required by us. The IP address of all posts are recorded to aid in enforcing these conditions. You agree that %1$s have the right to remove, edit, move or close any topic at any time should we see fit. As a user you agree to any information you have entered to being stored in a database. While this information will not be disclosed to any third party without your consent, neither %1$s nor phpBB shall be held responsible for any hacking attempt that may lead to the data being compromised.	',	'PRIVACY_POLICY'		=> 'This policy explains in detail how %1$s along with its affiliated companies (hereinafter we, us, our, %1$s, %2$s) and phpBB (hereinafter they, them, their, phpBB software, www.phpbb.com, phpBB Group, phpBB Teams) use any information collected during any session of usage by you (hereinafter your information).<br />	<br />	Your information is collected via two ways. Firstly, by browsing %1$s will cause the phpBB software to create a number of cookies, which are small text files that are downloaded on to your computers web browser temporary files. The first two cookies just contain a user identifier (hereinafter user-id) and an anonymous session identifier (hereinafter session-id), automatically assigned to you by the phpBB software. A third cookie will be created once you have browsed topics within %1$s and is used to store which topics have been read, thereby improving your user experience.<br />	<br />	We may also create cookies external to the phpBB software whilst browsing %1$s, though these are outside the scope of this document which is intended to only cover the pages created by the phpBB software. The second way in which we collect your information is by what you submit to us. This can be, and is not limited to: posting as an anonymous user (hereinafter anonymous posts), registering on %1$s (hereinafter your account) and posts submitted by you after registration and whilst logged in (hereinafter your posts).<br />	<br />	Your account will at a bare minimum contain a uniquely identifiable name (hereinafter your user name), a personal password used for logging into your account (hereinafter your password) and a personal, valid e-mail address (hereinafter your e-mail). Your information for your account at %1$s is protected by data-protection laws applicable in the country that hosts us. Any information beyond your user name, your password, and your e-mail address required by %1$s during the registration process is either mandatory or optional, at the discretion of %1$s. In all cases, you have the option of what information in your account is publicly displayed. Furthermore, within your account, you have the option to opt-in or opt-out of automatically generated e-mails from the phpBB software.<br />	<br />	Your password is ciphered (a one-way hash) so that it is secure. However, it is recommended that you do not reuse the same password across a number of different websites. Your password is the means of accessing your account at %1$s, so please guard it carefully and under no circumstance will anyone affiliated with %1$s, phpBB or another 3rd party, legitimately ask you for your password. Should you forget your password for your account, you can use the I forgot my password feature provided by the phpBB software. This process will ask you to submit your user name and your e-mail, then the phpBB software will generate a new password to reclaim your account.<br />	',));// Common language entries$lang = array_merge($lang, array(	'ACCOUNT_ACTIVE'				=> 'Your account has now been activated. Thank you for registering.',	'ACCOUNT_ACTIVE_ADMIN'			=> 'The account has now been activated.',	'ACCOUNT_ACTIVE_PROFILE'		=> 'Your account has now been successfully reactivated.',	'ACCOUNT_ADDED'					=> 'Thank you for registering, your account has been created. You may now login with your username and password.',	'ACCOUNT_COPPA'					=> 'Your account has been created but has to be approved, please check your e-mail for details.',	'ACCOUNT_EMAIL_CHANGED'			=> 'Your account has been updated. However, this board requires account reactivation on e-mail changes. An activation key has been sent to the new e-mail address you provided. Please check your e-mail for further information.',	'ACCOUNT_EMAIL_CHANGED_ADMIN'	=> 'Your account has been updated. However, this board requires account reactivation by the administrators on e-mail changes. An e-mail has been sent to them and you will be informed when your account has been reactivated.',	'ACCOUNT_INACTIVE'				=> 'Your account has been created. However, this board requires account activation, an activation key has been sent to the e-mail address you provided. Please check your e-mail for further information.',	'ACCOUNT_INACTIVE_ADMIN'		=> 'Your account has been created. However, this board requires account activation by the administrator group. An e-mail has been sent to them and you will be informed when your account has been activated.',	'ACTIVATION_EMAIL_SENT'			=> 'The activation e-mail has been sent to your e-mail address.',	'ACTIVATION_EMAIL_SENT_ADMIN'	=> 'The activation e-mail has been sent to the administrators e-mail addresses.',	'ADD'							=> 'Add',	'ADD_BCC'						=> 'Add [BCC]',	'ADD_FOES'						=> 'Add new foes',	'ADD_FOES_EXPLAIN'				=> 'You may enter several usernames each on a different line.',	'ADD_FOLDER'					=> 'Add folder',	'ADD_FRIENDS'					=> 'Add new friends',	'ADD_FRIENDS_EXPLAIN'			=> 'You may enter several usernames each on a different line.',	'ADD_NEW_RULE'					=> 'Add new rule',	'ADD_RULE'						=> 'Add rule',	'ADD_TO'						=> 'Add [To]',	'ADD_USERS_UCP_EXPLAIN'			=> 'Here you can add new users to the group. You may select whether this group becomes the new default for the selected users. Please enter each username on a separate line.',	'ADMIN_EMAIL'					=> 'Administrators can e-mail me information',	'AGREE'							=> 'I agree to these terms',	'ALLOW_PM'						=> 'Allow users to send you private messages',	'ALLOW_PM_EXPLAIN'				=> 'Note that administrators and moderators will always be able to send you messages.',	'ALREADY_ACTIVATED'				=> 'You have already activated your account.',	'ATTACHMENTS_EXPLAIN'			=> 'This is a list of attachments you have made in posts to this board.',	'ATTACHMENTS_DELETED'			=> 'Attachments successfully deleted.',	'ATTACHMENT_DELETED'			=> 'Attachment successfully deleted.',	'AVATAR_CATEGORY'				=> 'Category',	'AVATAR_EXPLAIN'				=> 'Maximum dimensions; width: %1$d pixels, height: %2$d pixels, file size: %3$.2f KiB.',	'AVATAR_FEATURES_DISABLED'		=> 'The avatar functionality is currently disabled.',	'AVATAR_GALLERY'				=> 'Local gallery',	'AVATAR_GENERAL_UPLOAD_ERROR'	=> 'Could not upload avatar to %s.',	'AVATAR_NOT_ALLOWED'			=> 'Your avatar cannot be displayed because avatars have been disallowed.',	'AVATAR_PAGE'					=> 'Page',	'AVATAR_TYPE_NOT_ALLOWED'		=> 'Your current avatar cannot be displayed because its type has been disallowed.',	'BACK_TO_DRAFTS'			=> 'Back to saved drafts',	'BACK_TO_LOGIN'				=> 'Back to login screen',	'BIRTHDAY'					=> 'Birthday',	'BIRTHDAY_EXPLAIN'			=> 'Setting a year will list your age when it is your birthday.',	'BOARD_DATE_FORMAT'			=> 'My date format',	'BOARD_DATE_FORMAT_EXPLAIN'	=> 'The syntax used is identical to the PHP <a href="http://www.php.net/date">date()</a> function.',	'BOARD_DST'					=> 'Summer Time/<abbr title="Daylight Saving Time">DST</abbr> is in effect',	'BOARD_LANGUAGE'			=> 'My language',	'BOARD_STYLE'				=> 'My board style',	'BOARD_TIMEZONE'			=> 'My timezone',	'BOOKMARKS'					=> 'Bookmarks',	'BOOKMARKS_EXPLAIN'			=> 'You can bookmark topics for future reference. Select the checkbox for any bookmark you wish to delete, then press the <em>Remove marked bookmarks</em> button.',	'BOOKMARKS_DISABLED'		=> 'Bookmarks are disabled on this board.',	'BOOKMARKS_REMOVED'			=> 'Bookmarks removed successfully.',	'CANNOT_EDIT_MESSAGE_TIME'	=> 'You can no longer edit or delete that message.',	'CANNOT_MOVE_TO_SAME_FOLDER'=> 'Messages cannot be moved to the folder you want to remove.',	'CANNOT_MOVE_FROM_SPECIAL'	=> 'Messages cannot be moved from the outbox.',	'CANNOT_RENAME_FOLDER'		=> 'This folder cannot be renamed.',	'CANNOT_REMOVE_FOLDER'		=> 'This folder cannot be removed.',	'CHANGE_DEFAULT_GROUP'		=> 'Change default group',	'CHANGE_PASSWORD'			=> 'Change password',	'CLICK_GOTO_FOLDER'			=> '%1$sGo to your %3$s folder%2$s',	'CLICK_RETURN_FOLDER'		=> '%1$sReturn to your %3$s folder%2$s',	'CONFIRMATION'				=> 'Confirmation of registration',	'CONFIRM_CHANGES'			=> 'Confirm changes',	'CONFIRM_EMAIL'				=> 'Confirm e-mail address',	'CONFIRM_EMAIL_EXPLAIN'		=> 'You only need to specify this if you are changing your e-mail address.',	'CONFIRM_EXPLAIN'			=> 'To prevent automated registrations the board requires you to enter a confirmation code. The code is displayed in the image you should see below. If you are visually impaired or cannot otherwise read this code please contact the %sBoard Administrator%s.',	'VC_REFRESH'				=> 'Refresh confirmation code',	'VC_REFRESH_EXPLAIN'		=> 'If you cannot read the code you can request a new one by clicking the button.',	'CONFIRM_PASSWORD'			=> 'Confirm password',	'CONFIRM_PASSWORD_EXPLAIN'	=> 'You only need to confirm your password if you changed it above.',	'COPPA_BIRTHDAY'			=> 'To continue with the registration procedure please tell us when you were born.',	'COPPA_COMPLIANCE'			=> 'COPPA compliance',	'COPPA_EXPLAIN'				=> 'Please note that clicking submit will create your account. However it cannot be activated until a parent or guardian approves your registration. You will be emailed a copy of the necessary form with details of where to send it.',	'CREATE_FOLDER'				=> 'Add folder',	'CURRENT_IMAGE'				=> 'Current image',	'CURRENT_PASSWORD'			=> 'Current password',	'CURRENT_PASSWORD_EXPLAIN'	=> 'You must confirm your current password if you wish to change it, alter your e-mail address or username.',	'CUR_PASSWORD_EMPTY'		=> 'You did not enter your current password.',	'CUR_PASSWORD_ERROR'		=> 'The current password you entered is incorrect.',	'CUSTOM_DATEFORMAT'			=> 'Custom',	'DEFAULT_ACTION'			=> 'Default action',	'DEFAULT_ACTION_EXPLAIN'	=> 'This action will be triggered if none of the above is applicable.',	'DEFAULT_ADD_SIG'			=> 'Attach my signature by default',	'DEFAULT_BBCODE'			=> 'Enable BBCode by default',	'DEFAULT_NOTIFY'			=> 'Notify me upon replies by default',	'DEFAULT_SMILIES'			=> 'Enable smilies by default',	'DEFINED_RULES'				=> 'Defined rules',	'DELETED_TOPIC'				=> 'Topic has been removed.',	'DELETE_ATTACHMENT'			=> 'Delete attachment',	'DELETE_ATTACHMENTS'		=> 'Delete attachments',	'DELETE_ATTACHMENT_CONFIRM'	=> 'Are you sure you want to delete this attachment?',	'DELETE_ATTACHMENTS_CONFIRM'=> 'Are you sure you want to delete these attachments?',	'DELETE_AVATAR'				=> 'Delete image',	'DELETE_COOKIES_CONFIRM'	=> 'Are you sure you want to delete all cookies set by this board?',	'DELETE_MARKED_PM'			=> 'Delete marked messages',	'DELETE_MARKED_PM_CONFIRM'	=> 'Are you sure you want to delete all marked messages?',	'DELETE_OLDEST_MESSAGES'	=> 'Delete oldest messages',	'DELETE_MESSAGE'			=> 'Delete message',	'DELETE_MESSAGE_CONFIRM'	=> 'Are you sure you want to delete this private message?',	'DELETE_MESSAGES_IN_FOLDER'	=> 'Delete all messages within removed folder',	'DELETE_RULE'				=> 'Delete rule',	'DELETE_RULE_CONFIRM'		=> 'Are you sure you want to delete this rule?',	'DEMOTE_SELECTED'			=> 'Demote selected',	'DISABLE_CENSORS'			=> 'Enable word censoring',	'DISPLAY_GALLERY'			=> 'Display gallery',	'DOMAIN_NO_MX_RECORD_EMAIL'	=> 'The entered e-mail domain has no valid MX record.',	'DOWNLOADS'					=> 'Downloads',	'DRAFTS_DELETED'			=> 'All selected drafts were successfully deleted.',	'DRAFTS_EXPLAIN'			=> 'Here you can view, edit and delete your saved drafts.',	'DRAFT_UPDATED'				=> 'Draft successfully updated.',	'EDIT_DRAFT_EXPLAIN'		=> 'Here you are able to edit your draft. Drafts do not contain attachment and poll information.',	'EMAIL_BANNED_EMAIL'		=> 'The e-mail address you entered is not allowed to be used.',	'EMAIL_INVALID_EMAIL'		=> 'The e-mail address you entered is invalid.',	'EMAIL_REMIND'				=> 'This must be the e-mail address associated with your account. If you have not changed this via your user control panel then it is the e-mail address you registered your account with.',	'EMAIL_TAKEN_EMAIL'			=> 'The entered e-mail address is already in use.',	'EMPTY_DRAFT'				=> 'You must enter a message to submit your changes.',	'EMPTY_DRAFT_TITLE'			=> 'You must enter a draft title.',	'EXPORT_AS_XML'				=> 'Export as XML',	'EXPORT_AS_CSV'				=> 'Export as CSV',	'EXPORT_AS_CSV_EXCEL'		=> 'Export as CSV (Excel)',	'EXPORT_AS_TXT'				=> 'Export as TXT',	'EXPORT_AS_MSG'				=> 'Export as MSG',	'EXPORT_FOLDER'				=> 'Export this view',	'FIELD_REQUIRED'					=> 'The field %s must be completed.',	'FIELD_TOO_SHORT'					=> 'The field %1$s is too short, a minimum of %2$d characters is required.',	'FIELD_TOO_LONG'					=> 'The field %1$s is too long, a maximum of %2$d characters is allowed.',	'FIELD_TOO_SMALL'					=> 'The value of %1$s is too small, a minimum value of %2$d is required.',	'FIELD_TOO_LARGE'					=> 'The value of %1$s is too large, a maximum value of %2$d is allowed.',	'FIELD_INVALID_CHARS_NUMBERS_ONLY'	=> 'The field %s has invalid characters, only numbers are allowed.',	'FIELD_INVALID_CHARS_ALPHA_ONLY'	=> 'The field %s has invalid characters, only alphanumeric characters are allowed.',	'FIELD_INVALID_CHARS_SPACERS_ONLY'	=> 'The field %s has invalid characters, only alphanumeric, space or -+_[] characters are allowed.',	'FIELD_INVALID_DATE'				=> 'The field %s has an invalid date.',	'FIELD_INVALID_VALUE'				=> 'The field %s has an invalid value.',	'FOE_MESSAGE'				=> 'Message from foe',	'FOES_EXPLAIN'				=> 'Foes are users which will be ignored by default. Posts by these users will not be fully visible. Personal messages from foes are still permitted. Please note that you cannot ignore moderators or administrators.',	'FOES_UPDATED'				=> 'Your foes list has been updated successfully.',	'FOLDER_ADDED'				=> 'Folder successfully added.',	'FOLDER_MESSAGE_STATUS'		=> '%1$d from %2$d messages stored',	'FOLDER_NAME_EMPTY'			=> 'You must enter a name for this folder.',	'FOLDER_NAME_EXIST'			=> 'Folder <strong>%s</strong> already exists.',	'FOLDER_OPTIONS'			=> 'Folder options',	'FOLDER_RENAMED'			=> 'Folder successfully renamed.',	'FOLDER_REMOVED'			=> 'Folder successfully removed.',	'FOLDER_STATUS_MSG'			=> 'Folder is %1$d%% full (%2$d from %3$d messages stored)',	'FORWARD_PM'				=> 'Forward PM',	'FORCE_PASSWORD_EXPLAIN'	=> 'Before you may continue browsing the board you are required to change your password.',	'FRIEND_MESSAGE'			=> 'Message from friend',	'FRIENDS'					=> 'Friends',	'FRIENDS_EXPLAIN'			=> 'Friends enable you quick access to members you communicate with frequently. If the template has relevant support any posts made by a friend may be highlighted.',	'FRIENDS_OFFLINE'			=> 'Offline',	'FRIENDS_ONLINE'			=> 'Online',	'FRIENDS_UPDATED'			=> 'Your friends list has been updated successfully.',	'FULL_FOLDER_OPTION_CHANGED'=> 'The action to take when a folder is full has been changed successfully.',	'FWD_ORIGINAL_MESSAGE'		=> '-------- Original Message --------',	'FWD_SUBJECT'				=> 'Subject: %s',	'FWD_DATE'					=> 'Date: %s',	'FWD_FROM'					=> 'From: %s',	'FWD_TO'					=> 'To: %s',	'GLOBAL_ANNOUNCEMENT'		=> 'Global announcement',	'HIDE_ONLINE'				=> 'Hide my online status',	'HIDE_ONLINE_EXPLAIN'		=> 'Changing this setting wont become effective until your next visit to the board.',	'HOLD_NEW_MESSAGES'			=> 'Do not accept new messages (New messages will be held back until enough space is available)',	'HOLD_NEW_MESSAGES_SHORT'	=> 'New messages will be held back',	'IF_FOLDER_FULL'			=> 'If folder is full',	'IMPORTANT_NEWS'			=> 'Important announcements',	'INVALID_USER_BIRTHDAY'			=> 'The entered birthday is not a valid date.',	'INVALID_CHARS_USERNAME'	=> 'The username contains forbidden characters.',	'INVALID_CHARS_NEW_PASSWORD'=> 'The password does not contain the required characters.',	'ITEMS_REQUIRED'			=> 'The items marked with * are required profile fields and need to be filled out.',	'JOIN_SELECTED'				=> 'Join selected',	'LANGUAGE'					=> 'Language',	'LINK_REMOTE_AVATAR'		=> 'Link off-site',	'LINK_REMOTE_AVATAR_EXPLAIN'=> 'Enter the URL of the location containing the avatar image you wish to link to.',	'LINK_REMOTE_SIZE'			=> 'Avatar dimensions',	'LINK_REMOTE_SIZE_EXPLAIN'	=> 'Specify the width and height of the avatar, leave blank to attempt automatic verification.',	'LOGIN_EXPLAIN_UCP'			=> 'Please login in order to access the User Control Panel.',	'LOGIN_REDIRECT'			=> 'You have been successfully logged in.',	'LOGOUT_FAILED'				=> 'You were not logged out, as the request did not match your session. Please contact the board administrator if you continue to experience problems.',	'LOGOUT_REDIRECT'			=> 'You have been successfully logged out.',	'MARK_IMPORTANT'				=> 'Mark/Unmark as important',	'MARKED_MESSAGE'				=> 'Marked message',	'MAX_FOLDER_REACHED'			=> 'Maximum number of allowed user defined folders reached.',	'MESSAGE_BY_AUTHOR'				=> 'by',	'MESSAGE_COLOURS'				=> 'Message colours',	'MESSAGE_DELETED'				=> 'Message successfully deleted.',	'MESSAGE_HISTORY'				=> 'Message history',	'MESSAGE_REMOVED_FROM_OUTBOX'	=> 'This message has been removed by its author before it was delivered.',	'MESSAGE_SENT_ON'				=> 'on',	'MESSAGE_STORED'				=> 'This message has been sent successfully.',	'MESSAGE_TO'					=> 'To',	'MESSAGES_DELETED'				=> 'Messages successfully deleted',	'MOVE_DELETED_MESSAGES_TO'		=> 'Move messages from removed folder to',	'MOVE_DOWN'						=> 'Move down',	'MOVE_MARKED_TO_FOLDER'			=> 'Move marked to %s',	'MOVE_PM_ERROR'					=> 'An error occurred while moving the messages to the new folder, only %1d from %2d messages were moved.',	'MOVE_TO_FOLDER'				=> 'Move to folder',	'MOVE_UP'						=> 'Move up',	'NEW_EMAIL_CONFIRM_EMPTY'		=> 'You did not enter a confirm e-mail address.',	'NEW_EMAIL_ERROR'				=> 'The e-mail addresses you entered do not match.',	'NEW_FOLDER_NAME'				=> 'New folder name',	'NEW_PASSWORD'					=> 'New password',	'NEW_PASSWORD_CONFIRM_EMPTY'	=> 'You did not enter a confirm password.',	'NEW_PASSWORD_ERROR'			=> 'The passwords you entered do not match.',	'NOTIFY_METHOD'					=> 'Notification method',	'NOTIFY_METHOD_BOTH'			=> 'Both',	'NOTIFY_METHOD_EMAIL'			=> 'E-mail only',	'NOTIFY_METHOD_EXPLAIN'			=> 'Method for sending messages sent via this board.',	'NOTIFY_METHOD_IM'				=> 'Jabber only',	'NOTIFY_ON_PM'					=> 'Notify me on new private messages',	'NOT_ADDED_FRIENDS_ANONYMOUS'	=> 'You cannot add the anonymous user to your friends list.',	'NOT_ADDED_FRIENDS_BOTS'		=> 'You cannot add bots to your friends list.',	'NOT_ADDED_FRIENDS_FOES'		=> 'You cannot add users to your friends list who are on your foes list.',	'NOT_ADDED_FRIENDS_SELF'		=> 'You cannot add yourself to the friends list.',	'NOT_ADDED_FOES_MOD_ADMIN'		=> 'You cannot add administrators and moderators to your foes list.',	'NOT_ADDED_FOES_ANONYMOUS'		=> 'You cannot add the anonymous user to your foes list.',	'NOT_ADDED_FOES_BOTS'			=> 'You cannot add bots to your foes list.',	'NOT_ADDED_FOES_FRIENDS'		=> 'You cannot add users to your foes list who are on your friends list.',	'NOT_ADDED_FOES_SELF'			=> 'You cannot add yourself to the foes list.',	'NOT_AGREE'						=> 'I do not agree to these terms',	'NOT_ENOUGH_SPACE_FOLDER'		=> 'The destination folder %s seems to be full. The requested action has not been taken.',	'NOT_MOVED_MESSAGE'				=> 'You have 1 private message currently on hold because of full folder.',	'NOT_MOVED_MESSAGES'			=> 'You have %d private messages currently on hold because of full folder.',	'NO_ACTION_MODE'				=> 'No message action specified.',	'NO_AUTHOR'						=> 'No author defined for this message',	'NO_AVATAR_CATEGORY'			=> 'None',	'NO_AUTH_DELETE_MESSAGE'		=> 'You are not authorised to delete private messages.',	'NO_AUTH_EDIT_MESSAGE'			=> 'You are not authorised to edit private messages.',	'NO_AUTH_FORWARD_MESSAGE'		=> 'You are not authorised to forward private messages.',	'NO_AUTH_GROUP_MESSAGE'			=> 'You are not authorised to send private messages to groups.',	'NO_AUTH_PASSWORD_REMINDER'		=> 'You are not authorised to request a new password.',	'NO_AUTH_READ_HOLD_MESSAGE'		=> 'You are not authorised to read private messages that are on hold.',	'NO_AUTH_READ_MESSAGE'			=> 'You are not authorised to read private messages.',	'NO_AUTH_READ_REMOVED_MESSAGE'	=> 'You are not able to read this message because it was removed by the author.',	'NO_AUTH_SEND_MESSAGE'			=> 'You are not authorised to send private messages.',	'NO_AUTH_SIGNATURE'				=> 'You are not authorised to define a signature.',	'NO_BCC_RECIPIENT'			=> 'None',	'NO_BOOKMARKS'				=> 'You have no bookmarks.',	'NO_BOOKMARKS_SELECTED'		=> 'You have selected no bookmarks.',	'NO_EDIT_READ_MESSAGE'		=> 'Private message cannot be edited because it has already been read.',	'NO_EMAIL_USER'				=> 'The e-mail/username information submitted could not be found.',	'NO_FOES'					=> 'No foes currently defined',	'NO_FRIENDS'				=> 'No friends currently defined',	'NO_FRIENDS_OFFLINE'		=> 'No friends offline',	'NO_FRIENDS_ONLINE'			=> 'No friends online',	'NO_GROUP_SELECTED'			=> 'No group specified.',	'NO_IMPORTANT_NEWS'			=> 'No important announcements present.',	'NO_MESSAGE'				=> 'Private message could not be found.',	'NO_NEW_FOLDER_NAME'		=> 'You have to specify a new folder name.',	'NO_NEWER_PM'				=> 'No newer messages.',	'NO_OLDER_PM'				=> 'No older messages.',	'NO_PASSWORD_SUPPLIED'		=> 'You cannot login without a password.',	'NO_RECIPIENT'				=> 'No recipient defined.',	'NO_RULES_DEFINED'			=> 'No rules defined.',	'NO_SAVED_DRAFTS'			=> 'No drafts saved.',	'NO_TO_RECIPIENT'			=> 'None',	'NO_WATCHED_FORUMS'			=> 'You are not subscribed to any forums.',	'NO_WATCHED_SELECTED'		=> 'You have not selected any subscribed topics or forums.',	'NO_WATCHED_TOPICS'			=> 'You are not subscribed to any topics.',	'PASS_TYPE_ALPHA_EXPLAIN'	=> 'Password must be between %1$d and %2$d characters long, must contain letters in mixed case and must contain numbers.',	'PASS_TYPE_ANY_EXPLAIN'		=> 'Must be between %1$d and %2$d characters.',	'PASS_TYPE_CASE_EXPLAIN'	=> 'Password must be between %1$d and %2$d characters long and must contain letters in mixed case.',	'PASS_TYPE_SYMBOL_EXPLAIN'	=> 'Password must be between %1$d and %2$d characters long, must contain letters in mixed case, must contain numbers and must contain symbols.',	'PASSWORD'					=> 'Password',	'PASSWORD_ACTIVATED'		=> 'Your new password has been activated.',	'PASSWORD_UPDATED'			=> 'A new password was sent to your registered e-mail address.',	'PERMISSIONS_RESTORED'		=> 'Successfully restored original permissions.',	'PERMISSIONS_TRANSFERRED'	=> 'Successfully transferred permissions from <strong>%s</strong>, you are now able to browse the board with this users permissions.<br />Please note that admin permissions were not transferred. You are able to revert to your permission set at any time.',	'PM_DISABLED'				=> 'Private messaging has been disabled on this board.',	'PM_FROM'					=> 'From',	'PM_FROM_REMOVED_AUTHOR'	=> 'This message was sent by a user no longer registered.',	'PM_ICON'					=> 'PM icon',	'PM_INBOX'					=> 'Inbox',	'PM_NO_USERS'				=> 'The requested users to be added do not exist.',	'PM_OUTBOX'					=> 'Outbox',	'PM_SENTBOX'				=> 'Sent messages',	'PM_SUBJECT'				=> 'Message subject',	'PM_TO'						=> 'Send to',	'PM_USERS_REMOVED_NO_PM'	=> 'Some users couldnt be added as they have disabled private message receipt.',	'POPUP_ON_PM'				=> 'Pop up window on new private message',	'POST_EDIT_PM'				=> 'Edit message',	'POST_FORWARD_PM'			=> 'Forward message',	'POST_NEW_PM'				=> 'Compose message',	'POST_PM_LOCKED'			=> 'Private messaging is locked.',	'POST_PM_POST'				=> 'Quote post',	'POST_QUOTE_PM'				=> 'Quote message',	'POST_REPLY_PM'				=> 'Reply to message',	'PRINT_PM'					=> 'Print view',	'PREFERENCES_UPDATED'		=> 'Your preferences have been updated.',	'PROFILE_INFO_NOTICE'		=> 'Please note that this information may be viewable to other members. Be careful when including any personal details. Any fields marked with a * must be completed.',	'PROFILE_UPDATED'			=> 'Your profile has been updated.',	'RECIPIENT'							=> 'Recipient',	'RECIPIENTS'						=> 'Recipients',	'REGISTRATION'						=> 'Registration',	'RELEASE_MESSAGES'					=> '%sRelease all on-hold messages%s they will be re-sorted into the appropriate folder if enough space is made available.',	'REMOVE_ADDRESS'					=> 'Remove address',	'REMOVE_SELECTED_BOOKMARKS'			=> 'Remove selected bookmarks',	'REMOVE_SELECTED_BOOKMARKS_CONFIRM'	=> 'Are you sure you want to delete all selected bookmarks?',	'REMOVE_BOOKMARK_MARKED'			=> 'Remove marked bookmarks',	'REMOVE_FOLDER'						=> 'Remove folder',	'REMOVE_FOLDER_CONFIRM'				=> 'Are you sure you want to remove this folder?',	'RENAME'							=> 'Rename',	'RENAME_FOLDER'						=> 'Rename folder',	'REPLIED_MESSAGE'					=> 'Replied to message',	'REPLY_TO_ALL'						=> 'Reply to sender and all recipients.',	'REPORT_PM'							=> 'Report private message',	'RESIGN_SELECTED'					=> 'Resign selected',	'RETURN_FOLDER'						=> '%1$sReturn to previous folder%2$s',	'RETURN_UCP'						=> '%sReturn to the User Control Panel%s',	'RULE_ADDED'						=> 'Rule successfully added.',	'RULE_ALREADY_DEFINED'				=> 'This rule was defined previously.',	'RULE_DELETED'						=> 'Rule successfully removed.',	'RULE_NOT_DEFINED'					=> 'Rule not correctly specified.',	'RULE_REMOVED_MESSAGE'				=> 'One private message had been removed due to private message filters.',	'RULE_REMOVED_MESSAGES'				=> '%d private messages were removed due to private message filters.',	'SAME_PASSWORD_ERROR'		=> 'The new password you entered is the same as your current password.',	'SEARCH_YOUR_POSTS'			=> 'Show your posts',	'SEND_PASSWORD'				=> 'Send password',	'SENT_AT'					=> 'Sent',			// Used before dates in private messages	'SHOW_EMAIL'				=> 'Users can contact me by e-mail',	'SIGNATURE_EXPLAIN'			=> 'This is a block of text that can be added to posts you make. There is a %d character limit.',	'SIGNATURE_PREVIEW'			=> 'Your signature will appear like this in posts',	'SIGNATURE_TOO_LONG'		=> 'Your signature is too long.',	'SORT'						=> 'Sort',	'SORT_COMMENT'				=> 'File comment',	'SORT_DOWNLOADS'			=> 'Downloads',	'SORT_EXTENSION'			=> 'Extension',	'SORT_FILENAME'				=> 'Filename',	'SORT_POST_TIME'			=> 'Post time',	'SORT_SIZE'					=> 'File size',	'TIMEZONE'					=> 'Timezone',	'TO'						=> 'To',	'TOO_MANY_RECIPIENTS'		=> 'You tried to send a private message to too many recipients.',	'TOO_MANY_REGISTERS'		=> 'You have exceeded the maximum number of registration attempts for this session. Please try again later.',	'UCP'						=> 'User Control Panel',	'UCP_ACTIVATE'				=> 'Activate account',	'UCP_ADMIN_ACTIVATE'		=> 'Please note that you will need to enter a valid e-mail address before your account is activated. The administrator will review your account and if approved you will receive an e-mail at the address you specified.',	'UCP_AIM'					=> 'AOL Instant Messenger',	'UCP_ATTACHMENTS'			=> 'Attachments',	'UCP_COPPA_BEFORE'			=> 'Before %s',	'UCP_COPPA_ON_AFTER'		=> 'On or after %s',	'UCP_EMAIL_ACTIVATE'		=> 'Please note that you will need to enter a valid e-mail address before your account is activated. You will receive an e-mail at the address you provide that contains an account activation link.',	'UCP_ICQ'					=> 'ICQ number',	'UCP_JABBER'				=> 'Jabber address',	'UCP_MAIN'					=> 'Overview',	'UCP_MAIN_ATTACHMENTS'		=> 'Manage attachments',	'UCP_MAIN_BOOKMARKS'		=> 'Manage bookmarks',	'UCP_MAIN_DRAFTS'			=> 'Manage drafts',	'UCP_MAIN_FRONT'			=> 'Front page',	'UCP_MAIN_SUBSCRIBED'		=> 'Manage subscriptions',	'UCP_MSNM'					=> 'WL/MSN Messenger',	'UCP_NO_ATTACHMENTS'		=> 'You have posted no files.',	'UCP_PREFS'					=> 'Board preferences',	'UCP_PREFS_PERSONAL'		=> 'Edit global settings',	'UCP_PREFS_POST'			=> 'Edit posting defaults',	'UCP_PREFS_VIEW'			=> 'Edit display options',	'UCP_PM'					=> 'Private messages',	'UCP_PM_COMPOSE'			=> 'Compose message',	'UCP_PM_DRAFTS'				=> 'Manage PM drafts',	'UCP_PM_OPTIONS'			=> 'Rules, folders &amp; settings',	'UCP_PM_POPUP'				=> 'Private messages',	'UCP_PM_POPUP_TITLE'		=> 'Private message popup',	'UCP_PM_UNREAD'				=> 'Unread messages',	'UCP_PM_VIEW'				=> 'View messages',	'UCP_PROFILE'				=> 'Profile',	'UCP_PROFILE_AVATAR'		=> 'Edit avatar',	'UCP_PROFILE_PROFILE_INFO'	=> 'Edit profile',	'UCP_PROFILE_REG_DETAILS'	=> 'Edit account settings',	'UCP_PROFILE_SIGNATURE'		=> 'Edit signature',	'UCP_USERGROUPS'			=> 'Usergroups',	'UCP_USERGROUPS_MEMBER'		=> 'Edit memberships',	'UCP_USERGROUPS_MANAGE'		=> 'Manage groups',	'UCP_REGISTER_DISABLE'			=> 'Creating a new account is currently not possible.',	'UCP_REMIND'					=> 'Send password',	'UCP_RESEND'					=> 'Send activation e-mail',	'UCP_WELCOME'					=> 'Welcome to the User Control Panel. From here you can monitor, view and update your profile, preferences, subscribed forums and topics. You can also send messages to other users (if permitted). Please ensure you read any announcements before continuing.',	'UCP_YIM'						=> 'Yahoo Messenger',	'UCP_ZEBRA'						=> 'Friends &amp; Foes',	'UCP_ZEBRA_FOES'				=> 'Manage foes',	'UCP_ZEBRA_FRIENDS'				=> 'Manage friends',	'UNDISCLOSED_RECIPIENT'			=> 'Undisclosed Recipient',	'UNKNOWN_FOLDER'				=> 'Unknown folder',	'UNWATCH_MARKED'				=> 'Unwatch marked',	'UPLOAD_AVATAR_FILE'			=> 'Upload from your machine',	'UPLOAD_AVATAR_URL'				=> 'Upload from a URL',	'UPLOAD_AVATAR_URL_EXPLAIN'		=> 'Enter the URL of the location containing the image. The image will be copied to this site.',	'USERNAME_ALPHA_ONLY_EXPLAIN'	=> 'Username must be between %1$d and %2$d chars long and use only alphanumeric characters.',	'USERNAME_ALPHA_SPACERS_EXPLAIN'=> 'Username must be between %1$d and %2$d chars long and use alphanumeric, space or -+_[] characters.',	'USERNAME_ASCII_EXPLAIN'		=> 'Username must be between %1$d and %2$d chars long and use only ASCII characters, so no special symbols.',	'USERNAME_LETTER_NUM_EXPLAIN'	=> 'Username must be between %1$d and %2$d chars long and use only letter or number characters.',	'USERNAME_LETTER_NUM_SPACERS_EXPLAIN'=> 'Username must be between %1$d and %2$d chars long and use letter, number, space or -+_[] characters.',	'USERNAME_CHARS_ANY_EXPLAIN'	=> 'Length must be between %1$d and %2$d characters.',	'USERNAME_TAKEN_USERNAME'		=> 'The username you entered is already in use, please select an alternative.',	'USERNAME_DISALLOWED_USERNAME'	=> 'The username you entered has been disallowed or contains a disallowed word. Please choose a different name.',	'USER_NOT_FOUND_OR_INACTIVE'	=> 'The usernames you specified could either not be found or are not activated users.',	'VIEW_AVATARS'				=> 'Display avatars',	'VIEW_EDIT'					=> 'View/Edit',	'VIEW_FLASH'				=> 'Display Flash animations',	'VIEW_IMAGES'				=> 'Display images within posts',	'VIEW_NEXT_HISTORY'			=> 'Next PM in history',	'VIEW_NEXT_PM'				=> 'Next PM',	'VIEW_PM'					=> 'View message',	'VIEW_PM_INFO'				=> 'Message details',	'VIEW_PM_MESSAGE'			=> '1 message',	'VIEW_PM_MESSAGES'			=> '%d messages',	'VIEW_PREVIOUS_HISTORY'		=> 'Previous PM in history',	'VIEW_PREVIOUS_PM'			=> 'Previous PM',	'VIEW_SIGS'					=> 'Display signatures',	'VIEW_SMILIES'				=> 'Display smilies as images',	'VIEW_TOPICS_DAYS'			=> 'Display topics from previous days',	'VIEW_TOPICS_DIR'			=> 'Display topic order direction',	'VIEW_TOPICS_KEY'			=> 'Display topics ordering by',	'VIEW_POSTS_DAYS'			=> 'Display posts from previous days',	'VIEW_POSTS_DIR'			=> 'Display post order direction',	'VIEW_POSTS_KEY'			=> 'Display posts ordering by',	'WATCHED_EXPLAIN'			=> 'Below is a list of forums and topics you are subscribed to. You will be notified of new posts in either. To unsubscribe mark the forum or topic and then press the <em>Unwatch marked</em> button.',	'WATCHED_FORUMS'			=> 'Watched forums',	'WATCHED_TOPICS'			=> 'Watched topics',	'WRONG_ACTIVATION'			=> 'The activation key you supplied does not match any in the database.',	'YOUR_DETAILS'				=> 'Your activity',	'YOUR_FOES'					=> 'Your foes',	'YOUR_FOES_EXPLAIN'			=> 'To remove usernames select them and click submit.',	'YOUR_FRIENDS'				=> 'Your friends',	'YOUR_FRIENDS_EXPLAIN'		=> 'To remove usernames select them and click submit.',	'YOUR_WARNINGS'				=> 'Your warning level',	'PM_ACTION' => array(		'PLACE_INTO_FOLDER'	=> 'Place into folder',		'MARK_AS_READ'		=> 'Mark as read',		'MARK_AS_IMPORTANT'	=> 'Mark message',		'DELETE_MESSAGE'	=> 'Delete message'	),	'PM_CHECK' => array(		'SUBJECT'	=> 'Subject',		'SENDER'	=> 'Sender',		'MESSAGE'	=> 'Message',		'STATUS'	=> 'Message status',		'TO'		=> 'Sent To'	),	'PM_RULE' => array(		'IS_LIKE'		=> 'is like',		'IS_NOT_LIKE'	=> 'is not like',		'IS'			=> 'is',		'IS_NOT'		=> 'is not',		'BEGINS_WITH'	=> 'begins with',		'ENDS_WITH'		=> 'ends with',		'IS_FRIEND'		=> 'is friend',		'IS_FOE'		=> 'is foe',		'IS_USER'		=> 'is user',		'IS_GROUP'		=> 'is in usergroup',		'ANSWERED'		=> 'answered',		'FORWARDED'		=> 'forwarded',		'TO_GROUP'		=> 'to my default usergroup',		'TO_ME'			=> 'to me'	),	'GROUPS_EXPLAIN'	=> 'Usergroups enable board admins to better administer users. By default you will be placed in a specific group, this is your default group. This group defines how you may appear to other users, for example your username colouration, avatar, rank, etc. Depending on whether the administrator allows it you may be allowed to change your default group. You may also be placed in or allowed to join other groups. Some groups may give you additional permissions to view content or increase your capabilities in other areas.',	'GROUP_LEADER'		=> 'Leaderships',	'GROUP_MEMBER'		=> 'Memberships',	'GROUP_PENDING'		=> 'Pending memberships',	'GROUP_NONMEMBER'	=> 'Non-memberships',	'GROUP_DETAILS'		=> 'Group details',	'NO_LEADER'		=> 'No group leaderships',	'NO_MEMBER'		=> 'No group memberships',	'NO_PENDING'	=> 'No pending memberships',	'NO_NONMEMBER'	=> 'No non-member groups',));?>
<?php/**** @package acp* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @ignore*/if (!defined('IN_PHPBB')){	exit;}/*** Recalculate Nested Sets** @param int	$new_id	first left_id (should start with 1)* @param string	$pkey	primary key-column (containing the id for the parent_id of the children)* @param string	$table	constant or fullname of the table* @param int	$parent_id parent_id of the current set (default = 0)* @param array	$where	contains strings to compare closer on the where statement (additional)** @author EXreaction*/function recalc_nested_sets(&$new_id, $pkey, $table, $parent_id = 0, $where = array()){	global $db;	$sql = 'SELECT *		FROM ' . $table . '		WHERE parent_id = ' . (int) $parent_id .		((!empty($where)) ? ' AND ' . implode(' AND ', $where) : '') . '		ORDER BY left_id ASC';	$result = $db->sql_query($sql);	while ($row = $db->sql_fetchrow($result))	{		// First we update the left_id for this module		if ($row['left_id'] != $new_id)		{			$db->sql_query('UPDATE ' . $table . ' SET ' . $db->sql_build_array('UPDATE', array('left_id' => $new_id)) . " WHERE $pkey = {$row[$pkey]}");		}		$new_id++;		// Then we go through any children and update their left/right id's		recalc_nested_sets($new_id, $pkey, $table, $row[$pkey], $where);		// Then we come back and update the right_id for this module		if ($row['right_id'] != $new_id)		{			$db->sql_query('UPDATE ' . $table . ' SET ' . $db->sql_build_array('UPDATE', array('right_id' => $new_id)) . " WHERE $pkey = {$row[$pkey]}");		}		$new_id++;	}	$db->sql_freeresult($result);}/*** Simple version of jumpbox, just lists authed forums*/function make_forum_select($select_id = false, $ignore_id = false, $ignore_acl = false, $ignore_nonpost = false, $ignore_emptycat = true, $only_acl_post = false, $return_array = false){	global $db, $user, $auth;	// This query is identical to the jumpbox one	$sql = 'SELECT forum_id, forum_name, parent_id, forum_type, forum_flags, forum_options, left_id, right_id		FROM ' . FORUMS_TABLE . '		ORDER BY left_id ASC';	$result = $db->sql_query($sql, 600);	$right = 0;	$padding_store = array('0' => '');	$padding = '';	$forum_list = ($return_array) ? array() : '';	// Sometimes it could happen that forums will be displayed here not be displayed within the index page	// This is the result of forums not displayed at index, having list permissions and a parent of a forum with no permissions.	// If this happens, the padding could be "broken"	while ($row = $db->sql_fetchrow($result))	{		if ($row['left_id'] < $right)		{			$padding .= '&nbsp; &nbsp;';			$padding_store[$row['parent_id']] = $padding;		}		else if ($row['left_id'] > $right + 1)		{			$padding = (isset($padding_store[$row['parent_id']])) ? $padding_store[$row['parent_id']] : '';		}		$right = $row['right_id'];		$disabled = false;		if (!$ignore_acl && $auth->acl_gets(array('f_list', 'a_forum', 'a_forumadd', 'a_forumdel'), $row['forum_id']))		{			if ($only_acl_post && !$auth->acl_get('f_post', $row['forum_id']) || (!$auth->acl_get('m_approve', $row['forum_id']) && !$auth->acl_get('f_noapprove', $row['forum_id'])))			{				$disabled = true;			}		}		else if (!$ignore_acl)		{			continue;		}		if (			((is_array($ignore_id) && in_array($row['forum_id'], $ignore_id)) || $row['forum_id'] == $ignore_id)			||			// Non-postable forum with no subforums, don't display			($row['forum_type'] == FORUM_CAT && ($row['left_id'] + 1 == $row['right_id']) && $ignore_emptycat)			||			($row['forum_type'] != FORUM_POST && $ignore_nonpost)			)		{			$disabled = true;		}		if ($return_array)		{			// Include some more information...			$selected = (is_array($select_id)) ? ((in_array($row['forum_id'], $select_id)) ? true : false) : (($row['forum_id'] == $select_id) ? true : false);			$forum_list[$row['forum_id']] = array_merge(array('padding' => $padding, 'selected' => ($selected && !$disabled), 'disabled' => $disabled), $row);		}		else		{			$selected = (is_array($select_id)) ? ((in_array($row['forum_id'], $select_id)) ? ' selected="selected"' : '') : (($row['forum_id'] == $select_id) ? ' selected="selected"' : '');			$forum_list .= '<option value="' . $row['forum_id'] . '"' . (($disabled) ? ' disabled="disabled" class="disabled-option"' : $selected) . '>' . $padding . $row['forum_name'] . '</option>';		}	}	$db->sql_freeresult($result);	unset($padding_store);	return $forum_list;}/*** Generate size select options*/function size_select_options($size_compare){	global $user;	$size_types_text = array($user->lang['BYTES'], $user->lang['KIB'], $user->lang['MIB']);	$size_types = array('b', 'kb', 'mb');	$s_size_options = '';	for ($i = 0, $size = sizeof($size_types_text); $i < $size; $i++)	{		$selected = ($size_compare == $size_types[$i]) ? ' selected="selected"' : '';		$s_size_options .= '<option value="' . $size_types[$i] . '"' . $selected . '>' . $size_types_text[$i] . '</option>';	}	return $s_size_options;}/*** Generate list of groups (option fields without select)** @param int $group_id The default group id to mark as selected* @param array $exclude_ids The group ids to exclude from the list, false (default) if you whish to exclude no id* @param int $manage_founder If set to false (default) all groups are returned, if 0 only those groups returned not being managed by founders only, if 1 only those groups returned managed by founders only.** @return string The list of options.*/function group_select_options($group_id, $exclude_ids = false, $manage_founder = false){	global $db, $user, $config;	$exclude_sql = ($exclude_ids !== false && sizeof($exclude_ids)) ? 'WHERE ' . $db->sql_in_set('group_id', array_map('intval', $exclude_ids), true) : '';	$sql_and = (!$config['coppa_enable']) ? (($exclude_sql) ? ' AND ' : ' WHERE ') . "group_name <> 'REGISTERED_COPPA'" : '';	$sql_founder = ($manage_founder !== false) ? (($exclude_sql || $sql_and) ? ' AND ' : ' WHERE ') . 'group_founder_manage = ' . (int) $manage_founder : '';	$sql = 'SELECT group_id, group_name, group_type		FROM ' . GROUPS_TABLE . "		$exclude_sql		$sql_and		$sql_founder		ORDER BY group_type DESC, group_name ASC";	$result = $db->sql_query($sql);	$s_group_options = '';	while ($row = $db->sql_fetchrow($result))	{		$selected = ($row['group_id'] == $group_id) ? ' selected="selected"' : '';		$s_group_options .= '<option' . (($row['group_type'] == GROUP_SPECIAL) ? ' class="sep"' : '') . ' value="' . $row['group_id'] . '"' . $selected . '>' . (($row['group_type'] == GROUP_SPECIAL) ? $user->lang['G_' . $row['group_name']] : $row['group_name']) . '</option>';	}	$db->sql_freeresult($result);	return $s_group_options;}/*** Obtain authed forums list*/function get_forum_list($acl_list = 'f_list', $id_only = true, $postable_only = false, $no_cache = false){	global $db, $auth;	static $forum_rows;	if (!isset($forum_rows))	{		// This query is identical to the jumpbox one		$expire_time = ($no_cache) ? 0 : 600;		$sql = 'SELECT forum_id, forum_name, parent_id, forum_type, left_id, right_id			FROM ' . FORUMS_TABLE . '			ORDER BY left_id ASC';		$result = $db->sql_query($sql, $expire_time);		$forum_rows = array();		$right = $padding = 0;		$padding_store = array('0' => 0);		while ($row = $db->sql_fetchrow($result))		{			if ($row['left_id'] < $right)			{				$padding++;				$padding_store[$row['parent_id']] = $padding;			}			else if ($row['left_id'] > $right + 1)			{				// Ok, if the $padding_store for this parent is empty there is something wrong. For now we will skip over it.				// @todo digging deep to find out "how" this can happen.				$padding = (isset($padding_store[$row['parent_id']])) ? $padding_store[$row['parent_id']] : $padding;			}			$right = $row['right_id'];			$row['padding'] = $padding;			$forum_rows[] = $row;		}		$db->sql_freeresult($result);		unset($padding_store);	}	$rowset = array();	foreach ($forum_rows as $row)	{		if ($postable_only && $row['forum_type'] != FORUM_POST)		{			continue;		}		if ($acl_list == '' || ($acl_list != '' && $auth->acl_gets($acl_list, $row['forum_id'])))		{			$rowset[] = ($id_only) ? (int) $row['forum_id'] : $row;		}	}	return $rowset;}/*** Get forum branch*/function get_forum_branch($forum_id, $type = 'all', $order = 'descending', $include_forum = true){	global $db;	switch ($type)	{		case 'parents':			$condition = 'f1.left_id BETWEEN f2.left_id AND f2.right_id';		break;		case 'children':			$condition = 'f2.left_id BETWEEN f1.left_id AND f1.right_id';		break;		default:			$condition = 'f2.left_id BETWEEN f1.left_id AND f1.right_id OR f1.left_id BETWEEN f2.left_id AND f2.right_id';		break;	}	$rows = array();	$sql = 'SELECT f2.*		FROM ' . FORUMS_TABLE . ' f1		LEFT JOIN ' . FORUMS_TABLE . " f2 ON ($condition)		WHERE f1.forum_id = $forum_id		ORDER BY f2.left_id " . (($order == 'descending') ? 'ASC' : 'DESC');	$result = $db->sql_query($sql);	while ($row = $db->sql_fetchrow($result))	{		if (!$include_forum && $row['forum_id'] == $forum_id)		{			continue;		}		$rows[] = $row;	}	$db->sql_freeresult($result);	return $rows;}/*** Copies permissions from one forum to others** @param int	$src_forum_id		The source forum we want to copy permissions from* @param array	$dest_forum_ids		The destination forum(s) we want to copy to* @param bool	$clear_dest_perms	True if destination permissions should be deleted* @param bool	$add_log			True if log entry should be added** @return bool						False on error** @author bantu*/function copy_forum_permissions($src_forum_id, $dest_forum_ids, $clear_dest_perms = true, $add_log = true){	global $db;	// Only one forum id specified	if (!is_array($dest_forum_ids))	{		$dest_forum_ids = array($dest_forum_ids);	}	// Make sure forum ids are integers	$src_forum_id = (int) $src_forum_id;	$dest_forum_ids = array_map('intval', $dest_forum_ids);	// No source forum or no destination forums specified	if (empty($src_forum_id) || empty($dest_forum_ids))	{		return false;	}	// Check if source forum exists	$sql = 'SELECT forum_name		FROM ' . FORUMS_TABLE . '		WHERE forum_id = ' . $src_forum_id;	$result = $db->sql_query($sql);	$src_forum_name = $db->sql_fetchfield('forum_name');	$db->sql_freeresult($result);	// Source forum doesn't exist	if (empty($src_forum_name))	{		return false;	}	// Check if destination forums exists	$sql = 'SELECT forum_id, forum_name		FROM ' . FORUMS_TABLE . '		WHERE ' . $db->sql_in_set('forum_id', $dest_forum_ids);	$result = $db->sql_query($sql);	$dest_forum_ids = $dest_forum_names = array();	while ($row = $db->sql_fetchrow($result))	{		$dest_forum_ids[]	= (int) $row['forum_id'];		$dest_forum_names[]	= $row['forum_name'];	}	$db->sql_freeresult($result);	// No destination forum exists	if (empty($dest_forum_ids))	{		return false;	}	// From the mysql documentation:	// Prior to MySQL 4.0.14, the target table of the INSERT statement cannot appear	// in the FROM clause of the SELECT part of the query. This limitation is lifted in 4.0.14.	// Due to this we stay on the safe side if we do the insertion "the manual way"	// Rowsets we're going to insert	$users_sql_ary = $groups_sql_ary = array();	// Query acl users table for source forum data	$sql = 'SELECT user_id, auth_option_id, auth_role_id, auth_setting		FROM ' . ACL_USERS_TABLE . '		WHERE forum_id = ' . $src_forum_id;	$result = $db->sql_query($sql);	while ($row = $db->sql_fetchrow($result))	{		$row = array(			'user_id'			=> (int) $row['user_id'],			'auth_option_id'	=> (int) $row['auth_option_id'],			'auth_role_id'		=> (int) $row['auth_role_id'],			'auth_setting'		=> (int) $row['auth_setting'],		);		foreach ($dest_forum_ids as $dest_forum_id)		{			$users_sql_ary[] = $row + array('forum_id' => $dest_forum_id);		}	}	$db->sql_freeresult($result);	// Query acl groups table for source forum data	$sql = 'SELECT group_id, auth_option_id, auth_role_id, auth_setting		FROM ' . ACL_GROUPS_TABLE . '		WHERE forum_id = ' . $src_forum_id;	$result = $db->sql_query($sql);	while ($row = $db->sql_fetchrow($result))	{		$row = array(			'group_id'			=> (int) $row['group_id'],			'auth_option_id'	=> (int) $row['auth_option_id'],			'auth_role_id'		=> (int) $row['auth_role_id'],			'auth_setting'		=> (int) $row['auth_setting'],		);		foreach ($dest_forum_ids as $dest_forum_id)		{			$groups_sql_ary[] = $row + array('forum_id' => $dest_forum_id);		}	}	$db->sql_freeresult($result);	$db->sql_transaction('begin');	// Clear current permissions of destination forums	if ($clear_dest_perms)	{		$sql = 'DELETE FROM ' . ACL_USERS_TABLE . '			WHERE ' . $db->sql_in_set('forum_id', $dest_forum_ids);		$db->sql_query($sql);		$sql = 'DELETE FROM ' . ACL_GROUPS_TABLE . '			WHERE ' . $db->sql_in_set('forum_id', $dest_forum_ids);		$db->sql_query($sql);	}	$db->sql_multi_insert(ACL_USERS_TABLE, $users_sql_ary);	$db->sql_multi_insert(ACL_GROUPS_TABLE, $groups_sql_ary);	if ($add_log)	{		add_log('admin', 'LOG_FORUM_COPIED_PERMISSIONS', $src_forum_name, implode(', ', $dest_forum_names));	}	$db->sql_transaction('commit');	return true;}/*** Get physical file listing*/function filelist($rootdir, $dir = '', $type = 'gif|jpg|jpeg|png'){	$matches = array($dir => array());	// Remove initial / if present	$rootdir = (substr($rootdir, 0, 1) == '/') ? substr($rootdir, 1) : $rootdir;	// Add closing / if not present	$rootdir = ($rootdir && substr($rootdir, -1) != '/') ? $rootdir . '/' : $rootdir;	// Remove initial / if present	$dir = (substr($dir, 0, 1) == '/') ? substr($dir, 1) : $dir;	// Add closing / if not present	$dir = ($dir && substr($dir, -1) != '/') ? $dir . '/' : $dir;	if (!is_dir($rootdir . $dir))	{		return $matches;	}	$dh = @opendir($rootdir . $dir);	if (!$dh)	{		return $matches;	}	while (($fname = readdir($dh)) !== false)	{		if (is_file("$rootdir$dir$fname"))		{			if (filesize("$rootdir$dir$fname") && preg_match('#\.' . $type . '$#i', $fname))			{				$matches[$dir][] = $fname;			}		}		else if ($fname[0] != '.' && is_dir("$rootdir$dir$fname"))		{			$matches += filelist($rootdir, "$dir$fname", $type);		}	}	closedir($dh);	return $matches;}/*** Move topic(s)*/function move_topics($topic_ids, $forum_id, $auto_sync = true){	global $db;	if (empty($topic_ids))	{		return;	}	$forum_ids = array($forum_id);	if (!is_array($topic_ids))	{		$topic_ids = array($topic_ids);	}	$sql = 'DELETE FROM ' . TOPICS_TABLE . '		WHERE ' . $db->sql_in_set('topic_moved_id', $topic_ids) . '			AND forum_id = ' . $forum_id;	$db->sql_query($sql);	if ($auto_sync)	{		$sql = 'SELECT DISTINCT forum_id			FROM ' . TOPICS_TABLE . '			WHERE ' . $db->sql_in_set('topic_id', $topic_ids);		$result = $db->sql_query($sql);		while ($row = $db->sql_fetchrow($result))		{			$forum_ids[] = $row['forum_id'];		}		$db->sql_freeresult($result);	}	$table_ary = array(TOPICS_TABLE, POSTS_TABLE, LOG_TABLE, DRAFTS_TABLE, TOPICS_TRACK_TABLE);	foreach ($table_ary as $table)	{		$sql = "UPDATE $table			SET forum_id = $forum_id			WHERE " . $db->sql_in_set('topic_id', $topic_ids);		$db->sql_query($sql);	}	unset($table_ary);	if ($auto_sync)	{		sync('forum', 'forum_id', $forum_ids, true, true);		unset($forum_ids);	}}/*** Move post(s)*/function move_posts($post_ids, $topic_id, $auto_sync = true){	global $db;	if (!is_array($post_ids))	{		$post_ids = array($post_ids);	}	$forum_ids = array();	$topic_ids = array($topic_id);	$sql = 'SELECT DISTINCT topic_id, forum_id		FROM ' . POSTS_TABLE . '		WHERE ' . $db->sql_in_set('post_id', $post_ids);	$result = $db->sql_query($sql);	while ($row = $db->sql_fetchrow($result))	{		$forum_ids[] = (int) $row['forum_id'];		$topic_ids[] = (int) $row['topic_id'];	}	$db->sql_freeresult($result);	$sql = 'SELECT forum_id		FROM ' . TOPICS_TABLE . '		WHERE topic_id = ' . $topic_id;	$result = $db->sql_query($sql);	$forum_row = $db->sql_fetchrow($result);	$db->sql_freeresult($result);	if (!$forum_row)	{		trigger_error('NO_TOPIC');	}	$sql = 'UPDATE ' . POSTS_TABLE . '		SET forum_id = ' . (int) $forum_row['forum_id'] . ", topic_id = $topic_id		WHERE " . $db->sql_in_set('post_id', $post_ids);	$db->sql_query($sql);	$sql = 'UPDATE ' . ATTACHMENTS_TABLE . "		SET topic_id = $topic_id, in_message = 0		WHERE " . $db->sql_in_set('post_msg_id', $post_ids);	$db->sql_query($sql);	if ($auto_sync)	{		$forum_ids[] = (int) $forum_row['forum_id'];		sync('topic_reported', 'topic_id', $topic_ids);		sync('topic_attachment', 'topic_id', $topic_ids);		sync('topic', 'topic_id', $topic_ids, true);		sync('forum', 'forum_id', $forum_ids, true, true);	}	// Update posted information	update_posted_info($topic_ids);}/*** Remove topic(s)*/function delete_topics($where_type, $where_ids, $auto_sync = true, $post_count_sync = true, $call_delete_posts = true){	global $db, $config;	$approved_topics = 0;	$forum_ids = $topic_ids = array();	if ($where_type === 'range')	{		$where_clause = $where_ids;	}	else	{		$where_ids = (is_array($where_ids)) ? array_unique($where_ids) : array($where_ids);		if (!sizeof($where_ids))		{			return array('topics' => 0, 'posts' => 0);		}		$where_clause = $db->sql_in_set($where_type, $where_ids);	}	// Making sure that delete_posts does not call delete_topics again...	$return = array(		'posts' => ($call_delete_posts) ? delete_posts($where_type, $where_ids, false, true, $post_count_sync, false) : 0,	);	$sql = 'SELECT topic_id, forum_id, topic_approved, topic_moved_id		FROM ' . TOPICS_TABLE . '		WHERE ' . $where_clause;	$result = $db->sql_query($sql);	while ($row = $db->sql_fetchrow($result))	{		$forum_ids[] = $row['forum_id'];		$topic_ids[] = $row['topic_id'];		if ($row['topic_approved'] && !$row['topic_moved_id'])		{			$approved_topics++;		}	}	$db->sql_freeresult($result);	$return['topics'] = sizeof($topic_ids);	if (!sizeof($topic_ids))	{		return $return;	}	$db->sql_transaction('begin');	$table_ary = array(BOOKMARKS_TABLE, TOPICS_TRACK_TABLE, TOPICS_POSTED_TABLE, POLL_VOTES_TABLE, POLL_OPTIONS_TABLE, TOPICS_WATCH_TABLE, TOPICS_TABLE);	foreach ($table_ary as $table)	{		$sql = "DELETE FROM $table			WHERE " . $db->sql_in_set('topic_id', $topic_ids);		$db->sql_query($sql);	}	unset($table_ary);	$moved_topic_ids = array();	// update the other forums	$sql = 'SELECT topic_id, forum_id		FROM ' . TOPICS_TABLE . '		WHERE ' . $db->sql_in_set('topic_moved_id', $topic_ids);	$result = $db->sql_query($sql);	while ($row = $db->sql_fetchrow($result))	{		$forum_ids[] = $row['forum_id'];		$moved_topic_ids[] = $row['topic_id'];	}	$db->sql_freeresult($result);	if (sizeof($moved_topic_ids))	{		$sql = 'DELETE FROM ' . TOPICS_TABLE . '			WHERE ' . $db->sql_in_set('topic_id', $moved_topic_ids);		$db->sql_query($sql);	}	$db->sql_transaction('commit');	if ($auto_sync)	{		sync('forum', 'forum_id', array_unique($forum_ids), true, true);		sync('topic_reported', $where_type, $where_ids);	}	if ($approved_topics)	{		set_config_count('num_topics', $approved_topics * (-1), true);	}	return $return;}/*** Remove post(s)*/function delete_posts($where_type, $where_ids, $auto_sync = true, $posted_sync = true, $post_count_sync = true, $call_delete_topics = true){	global $db, $config, $phpbb_root_path, $phpEx;	if ($where_type === 'range')	{		$where_clause = $where_ids;	}	else	{		if (is_array($where_ids))		{			$where_ids = array_unique($where_ids);		}		else		{			$where_ids = array($where_ids);		}		if (!sizeof($where_ids))		{			return false;		}		$where_ids = array_map('intval', $where_ids);/*		Possible code for splitting post deletion		if (sizeof($where_ids) >= 1001)		{			// Split into chunks of 1000			$chunks = array_chunk($where_ids, 1000);			foreach ($chunks as $_where_ids)			{				delete_posts($where_type, $_where_ids, $auto_sync, $posted_sync, $post_count_sync, $call_delete_topics);			}			return;		}*/		$where_clause = $db->sql_in_set($where_type, $where_ids);	}	$approved_posts = 0;	$post_ids = $topic_ids = $forum_ids = $post_counts = $remove_topics = array();	$sql = 'SELECT post_id, poster_id, post_approved, post_postcount, topic_id, forum_id		FROM ' . POSTS_TABLE . '		WHERE ' . $where_clause;	$result = $db->sql_query($sql);	while ($row = $db->sql_fetchrow($result))	{		$post_ids[] = (int) $row['post_id'];		$poster_ids[] = (int) $row['poster_id'];		$topic_ids[] = (int) $row['topic_id'];		$forum_ids[] = (int) $row['forum_id'];		if ($row['post_postcount'] && $post_count_sync && $row['post_approved'])		{			$post_counts[$row['poster_id']] = (!empty($post_counts[$row['poster_id']])) ? $post_counts[$row['poster_id']] + 1 : 1;		}		if ($row['post_approved'])		{			$approved_posts++;		}	}	$db->sql_freeresult($result);	if (!sizeof($post_ids))	{		return false;	}	$db->sql_transaction('begin');	$table_ary = array(POSTS_TABLE, REPORTS_TABLE);	foreach ($table_ary as $table)	{		$sql = "DELETE FROM $table			WHERE " . $db->sql_in_set('post_id', $post_ids);		$db->sql_query($sql);	}	unset($table_ary);	// Adjust users post counts	if (sizeof($post_counts) && $post_count_sync)	{		foreach ($post_counts as $poster_id => $substract)		{			$sql = 'UPDATE ' . USERS_TABLE . '				SET user_posts = 0				WHERE user_id = ' . $poster_id . '				AND user_posts < ' . $substract;			$db->sql_query($sql);			$sql = 'UPDATE ' . USERS_TABLE . '				SET user_posts = user_posts - ' . $substract . '				WHERE user_id = ' . $poster_id . '				AND user_posts >= ' . $substract;			$db->sql_query($sql);		}	}	// Remove topics now having no posts?	if (sizeof($topic_ids))	{		$sql = 'SELECT topic_id			FROM ' . POSTS_TABLE . '			WHERE ' . $db->sql_in_set('topic_id', $topic_ids) . '			GROUP BY topic_id';		$result = $db->sql_query($sql);		while ($row = $db->sql_fetchrow($result))		{			$remove_topics[] = $row['topic_id'];		}		$db->sql_freeresult($result);		// Actually, those not within remove_topics should be removed. ;)		$remove_topics = array_diff($topic_ids, $remove_topics);	}	// Remove the message from the search index	$search_type = basename($config['search_type']);	if (!file_exists($phpbb_root_path . 'includes/search/' . $search_type . '.' . $phpEx))	{		trigger_error('NO_SUCH_SEARCH_MODULE');	}	include_once("{$phpbb_root_path}includes/search/$search_type.$phpEx");	$error = false;	$search = new $search_type($error);	if ($error)	{		trigger_error($error);	}	$search->index_remove($post_ids, $poster_ids, $forum_ids);	delete_attachments('post', $post_ids, false);	$db->sql_transaction('commit');	// Resync topics_posted table	if ($posted_sync)	{		update_posted_info($topic_ids);	}	if ($auto_sync)	{		sync('topic_reported', 'topic_id', $topic_ids);		sync('topic', 'topic_id', $topic_ids, true);		sync('forum', 'forum_id', $forum_ids, true, true);	}	if ($approved_posts)	{		set_config_count('num_posts', $approved_posts * (-1), true);	}	// We actually remove topics now to not be inconsistent (the delete_topics function calls this function too)	if (sizeof($remove_topics) && $call_delete_topics)	{		delete_topics('topic_id', $remove_topics, $auto_sync, $post_count_sync, false);	}	return sizeof($post_ids);}/*** Delete Attachments** @param string $mode can be: post|message|topic|attach|user* @param mixed $ids can be: post_ids, message_ids, topic_ids, attach_ids, user_ids* @param bool $resync set this to false if you are deleting posts or topics*/function delete_attachments($mode, $ids, $resync = true){	global $db, $config;	// 0 is as bad as an empty array	if (empty($ids))	{		return false;	}	if (is_array($ids))	{		$ids = array_unique($ids);		$ids = array_map('intval', $ids);	}	else	{		$ids = array((int) $ids);	}	$sql_where = '';	switch ($mode)	{		case 'post':		case 'message':			$sql_id = 'post_msg_id';			$sql_where = ' AND in_message = ' . ($mode == 'message' ? 1 : 0);		break;		case 'topic':			$sql_id = 'topic_id';		break;		case 'user':			$sql_id = 'poster_id';		break;		case 'attach':		default:			$sql_id = 'attach_id';			$mode = 'attach';		break;	}	$post_ids = $message_ids = $topic_ids = $physical = array();	// Collect post and topic ids for later use if we need to touch remaining entries (if resync is enabled)	$sql = 'SELECT post_msg_id, topic_id, in_message, physical_filename, thumbnail, filesize, is_orphan			FROM ' . ATTACHMENTS_TABLE . '			WHERE ' . $db->sql_in_set($sql_id, $ids);	$sql .= $sql_where;	$result = $db->sql_query($sql);	while ($row = $db->sql_fetchrow($result))	{		// We only need to store post/message/topic ids if resync is enabled and the file is not orphaned		if ($resync && !$row['is_orphan'])		{			if (!$row['in_message'])			{				$post_ids[] = $row['post_msg_id'];				$topic_ids[] = $row['topic_id'];			}			else			{				$message_ids[] = $row['post_msg_id'];			}		}		$physical[] = array('filename' => $row['physical_filename'], 'thumbnail' => $row['thumbnail'], 'filesize' => $row['filesize'], 'is_orphan' => $row['is_orphan']);	}	$db->sql_freeresult($result);	// Delete attachments	$sql = 'DELETE FROM ' . ATTACHMENTS_TABLE . '		WHERE ' . $db->sql_in_set($sql_id, $ids);	$sql .= $sql_where;	$db->sql_query($sql);	$num_deleted = $db->sql_affectedrows();	if (!$num_deleted)	{		return 0;	}	// Delete attachments from filesystem	$space_removed = $files_removed = 0;	foreach ($physical as $file_ary)	{		if (phpbb_unlink($file_ary['filename'], 'file', true) && !$file_ary['is_orphan'])		{			// Only non-orphaned files count to the file size			$space_removed += $file_ary['filesize'];			$files_removed++;		}		if ($file_ary['thumbnail'])		{			phpbb_unlink($file_ary['filename'], 'thumbnail', true);		}	}	if ($space_removed || $files_removed)	{		set_config_count('upload_dir_size', $space_removed * (-1), true);		set_config_count('num_files', $files_removed * (-1), true);	}	// If we do not resync, we do not need to adjust any message, post, topic or user entries	if (!$resync)	{		return $num_deleted;	}	// No more use for the original ids	unset($ids);	// Now, we need to resync posts, messages, topics. We go through every one of them	$post_ids = array_unique($post_ids);	$message_ids = array_unique($message_ids);	$topic_ids = array_unique($topic_ids);	// Update post indicators for posts now no longer having attachments	if (sizeof($post_ids))	{		// Just check which posts are still having an assigned attachment not orphaned by querying the attachments table		$sql = 'SELECT post_msg_id			FROM ' . ATTACHMENTS_TABLE . '			WHERE ' . $db->sql_in_set('post_msg_id', $post_ids) . '				AND in_message = 0				AND is_orphan = 0';		$result = $db->sql_query($sql);		$remaining_ids = array();		while ($row = $db->sql_fetchrow($result))		{			$remaining_ids[] = $row['post_msg_id'];		}		$db->sql_freeresult($result);		// Now only unset those ids remaining		$post_ids = array_diff($post_ids, $remaining_ids);		if (sizeof($post_ids))		{			$sql = 'UPDATE ' . POSTS_TABLE . '				SET post_attachment = 0				WHERE ' . $db->sql_in_set('post_id', $post_ids);			$db->sql_query($sql);		}	}	// Update message table if messages are affected	if (sizeof($message_ids))	{		// Just check which messages are still having an assigned attachment not orphaned by querying the attachments table		$sql = 'SELECT post_msg_id			FROM ' . ATTACHMENTS_TABLE . '			WHERE ' . $db->sql_in_set('post_msg_id', $message_ids) . '				AND in_message = 1				AND is_orphan = 0';		$result = $db->sql_query($sql);		$remaining_ids = array();		while ($row = $db->sql_fetchrow($result))		{			$remaining_ids[] = $row['post_msg_id'];		}		$db->sql_freeresult($result);		// Now only unset those ids remaining		$message_ids = array_diff($message_ids, $remaining_ids);		if (sizeof($message_ids))		{			$sql = 'UPDATE ' . PRIVMSGS_TABLE . '				SET message_attachment = 0				WHERE ' . $db->sql_in_set('msg_id', $message_ids);			$db->sql_query($sql);		}	}	// Now update the topics. This is a bit trickier, because there could be posts still having attachments within the topic	if (sizeof($topic_ids))	{		// Just check which topics are still having an assigned attachment not orphaned by querying the attachments table (much less entries expected)		$sql = 'SELECT topic_id			FROM ' . ATTACHMENTS_TABLE . '			WHERE ' . $db->sql_in_set('topic_id', $topic_ids) . '				AND is_orphan = 0';		$result = $db->sql_query($sql);		$remaining_ids = array();		while ($row = $db->sql_fetchrow($result))		{			$remaining_ids[] = $row['topic_id'];		}		$db->sql_freeresult($result);		// Now only unset those ids remaining		$topic_ids = array_diff($topic_ids, $remaining_ids);		if (sizeof($topic_ids))		{			$sql = 'UPDATE ' . TOPICS_TABLE . '				SET topic_attachment = 0				WHERE ' . $db->sql_in_set('topic_id', $topic_ids);			$db->sql_query($sql);		}	}	return $num_deleted;}/*** Deletes shadow topics pointing to a specified forum.** @param int		$forum_id		The forum id* @param string		$sql_more		Additional WHERE statement, e.g. t.topic_time < (time() - 1234)* @param bool		$auto_sync		Will call sync() if this is true** @return array		Array with affected forums** @author bantu*/function delete_topic_shadows($forum_id, $sql_more = '', $auto_sync = true){	global $db;	if (!$forum_id)	{		// Nothing to do.		return;	}	// Set of affected forums we have to resync	$sync_forum_ids = array();	// Amount of topics we select and delete at once.	$batch_size = 500;	do	{		$sql = 'SELECT t2.forum_id, t2.topic_id			FROM ' . TOPICS_TABLE . ' t2, ' . TOPICS_TABLE . ' t			WHERE t2.topic_moved_id = t.topic_id				AND t.forum_id = ' . (int) $forum_id . '				' . (($sql_more) ? 'AND ' . $sql_more : '');		$result = $db->sql_query_limit($sql, $batch_size);		$topic_ids = array();		while ($row = $db->sql_fetchrow($result))		{			$topic_ids[] = (int) $row['topic_id'];			$sync_forum_ids[(int) $row['forum_id']] = (int) $row['forum_id'];		}		$db->sql_freeresult($result);		if (!empty($topic_ids))		{			$sql = 'DELETE FROM ' . TOPICS_TABLE . '				WHERE ' . $db->sql_in_set('topic_id', $topic_ids);			$db->sql_query($sql);		}	}	while (sizeof($topic_ids) == $batch_size);	if ($auto_sync)	{		sync('forum', 'forum_id', $sync_forum_ids, true, true);	}	return $sync_forum_ids;}/*** Update/Sync posted information for topics*/function update_posted_info(&$topic_ids){	global $db, $config;	if (empty($topic_ids) || !$config['load_db_track'])	{		return;	}	// First of all, let us remove any posted information for these topics	$sql = 'DELETE FROM ' . TOPICS_POSTED_TABLE . '		WHERE ' . $db->sql_in_set('topic_id', $topic_ids);	$db->sql_query($sql);	// Now, let us collect the user/topic combos for rebuilding the information	$sql = 'SELECT poster_id, topic_id		FROM ' . POSTS_TABLE . '		WHERE ' . $db->sql_in_set('topic_id', $topic_ids) . '			AND poster_id <> ' . ANONYMOUS . '		GROUP BY poster_id, topic_id';	$result = $db->sql_query($sql);	$posted = array();	while ($row = $db->sql_fetchrow($result))	{		// Add as key to make them unique (grouping by) and circumvent empty keys on array_unique		$posted[$row['poster_id']][] = $row['topic_id'];	}	$db->sql_freeresult($result);	// Now add the information...	$sql_ary = array();	foreach ($posted as $user_id => $topic_row)	{		foreach ($topic_row as $topic_id)		{			$sql_ary[] = array(				'user_id'		=> (int) $user_id,				'topic_id'		=> (int) $topic_id,				'topic_posted'	=> 1,			);		}	}	unset($posted);	$db->sql_multi_insert(TOPICS_POSTED_TABLE, $sql_ary);}/*** Delete attached file*/function phpbb_unlink($filename, $mode = 'file', $entry_removed = false){	global $db, $phpbb_root_path, $config;	// Because of copying topics or modifications a physical filename could be assigned more than once. If so, do not remove the file itself.	$sql = 'SELECT COUNT(attach_id) AS num_entries		FROM ' . ATTACHMENTS_TABLE . "		WHERE physical_filename = '" . $db->sql_escape(utf8_basename($filename)) . "'";	$result = $db->sql_query($sql);	$num_entries = (int) $db->sql_fetchfield('num_entries');	$db->sql_freeresult($result);	// Do not remove file if at least one additional entry with the same name exist.	if (($entry_removed && $num_entries > 0) || (!$entry_removed && $num_entries > 1))	{		return false;	}	$filename = ($mode == 'thumbnail') ? 'thumb_' . utf8_basename($filename) : utf8_basename($filename);	return @unlink($phpbb_root_path . $config['upload_path'] . '/' . $filename);}/*** All-encompasing sync function** Exaples:* <code>* sync('topic', 'topic_id', 123);			// resync topic #123* sync('topic', 'forum_id', array(2, 3));	// resync topics from forum #2 and #3* sync('topic');							// resync all topics* sync('topic', 'range', 'topic_id BETWEEN 1 AND 60');	// resync a range of topics/forums (only available for 'topic' and 'forum' modes)* </code>** Modes:* - forum				Resync complete forum* - topic				Resync topics* - topic_moved			Removes topic shadows that would be in the same forum as the topic they link to* - topic_approved		Resyncs the topic_approved flag according to the status of the first post* - post_reported		Resyncs the post_reported flag, relying on actual reports* - topic_reported		Resyncs the topic_reported flag, relying on post_reported flags* - post_attachement	Same as post_reported, but with attachment flags* - topic_attachement	Same as topic_reported, but with attachment flags*/function sync($mode, $where_type = '', $where_ids = '', $resync_parents = false, $sync_extra = false){	global $db;	if (is_array($where_ids))	{		$where_ids = array_unique($where_ids);		$where_ids = array_map('intval', $where_ids);	}	else if ($where_type != 'range')	{		$where_ids = ($where_ids) ? array((int) $where_ids) : array();	}	if ($mode == 'forum' || $mode == 'topic' || $mode == 'topic_approved' || $mode == 'topic_reported' || $mode == 'post_reported')	{		if (!$where_type)		{			$where_sql = '';			$where_sql_and = 'WHERE';		}		else if ($where_type == 'range')		{			// Only check a range of topics/forums. For instance: 'topic_id BETWEEN 1 AND 60'			$where_sql = 'WHERE (' . $mode[0] . ".$where_ids)";			$where_sql_and = $where_sql . "\n\tAND";		}		else		{			// Do not sync the "global forum"			$where_ids = array_diff($where_ids, array(0));			if (!sizeof($where_ids))			{				// Empty array with IDs. This means that we don't have any work to do. Just return.				return;			}			// Limit the topics/forums we are syncing, use specific topic/forum IDs.			// $where_type contains the field for the where clause (forum_id, topic_id)			$where_sql = 'WHERE ' . $db->sql_in_set($mode[0] . '.' . $where_type, $where_ids);			$where_sql_and = $where_sql . "\n\tAND";		}	}	else	{		if (!sizeof($where_ids))		{			return;		}		// $where_type contains the field for the where clause (forum_id, topic_id)		$where_sql = 'WHERE ' . $db->sql_in_set($mode[0] . '.' . $where_type, $where_ids);		$where_sql_and = $where_sql . "\n\tAND";	}	switch ($mode)	{		case 'topic_moved':			$db->sql_transaction('begin');			switch ($db->sql_layer)			{				case 'mysql4':				case 'mysqli':					$sql = 'DELETE FROM ' . TOPICS_TABLE . '						USING ' . TOPICS_TABLE . ' t1, ' . TOPICS_TABLE . " t2						WHERE t1.topic_moved_id = t2.topic_id							AND t1.forum_id = t2.forum_id";					$db->sql_query($sql);				break;				default:					$sql = 'SELECT t1.topic_id						FROM ' .TOPICS_TABLE . ' t1, ' . TOPICS_TABLE . " t2						WHERE t1.topic_moved_id = t2.topic_id							AND t1.forum_id = t2.forum_id";					$result = $db->sql_query($sql);					$topic_id_ary = array();					while ($row = $db->sql_fetchrow($result))					{						$topic_id_ary[] = $row['topic_id'];					}					$db->sql_freeresult($result);					if (!sizeof($topic_id_ary))					{						return;					}					$sql = 'DELETE FROM ' . TOPICS_TABLE . '						WHERE ' . $db->sql_in_set('topic_id', $topic_id_ary);					$db->sql_query($sql);				break;			}			$db->sql_transaction('commit');			break;		case 'topic_approved':			$db->sql_transaction('begin');			switch ($db->sql_layer)			{				case 'mysql4':				case 'mysqli':					$sql = 'UPDATE ' . TOPICS_TABLE . ' t, ' . POSTS_TABLE . " p						SET t.topic_approved = p.post_approved						$where_sql_and t.topic_first_post_id = p.post_id";					$db->sql_query($sql);				break;				default:					$sql = 'SELECT t.topic_id, p.post_approved						FROM ' . TOPICS_TABLE . ' t, ' . POSTS_TABLE . " p						$where_sql_and p.post_id = t.topic_first_post_id							AND p.post_approved <> t.topic_approved";					$result = $db->sql_query($sql);					$topic_ids = array();					while ($row = $db->sql_fetchrow($result))					{						$topic_ids[] = $row['topic_id'];					}					$db->sql_freeresult($result);					if (!sizeof($topic_ids))					{						return;					}					$sql = 'UPDATE ' . TOPICS_TABLE . '						SET topic_approved = 1 - topic_approved						WHERE ' . $db->sql_in_set('topic_id', $topic_ids);					$db->sql_query($sql);				break;			}			$db->sql_transaction('commit');			break;		case 'post_reported':			$post_ids = $post_reported = array();			$db->sql_transaction('begin');			$sql = 'SELECT p.post_id, p.post_reported				FROM ' . POSTS_TABLE . " p				$where_sql				GROUP BY p.post_id, p.post_reported";			$result = $db->sql_query($sql);			while ($row = $db->sql_fetchrow($result))			{				$post_ids[$row['post_id']] = $row['post_id'];				if ($row['post_reported'])				{					$post_reported[$row['post_id']] = 1;				}			}			$db->sql_freeresult($result);			$sql = 'SELECT DISTINCT(post_id)				FROM ' . REPORTS_TABLE . '				WHERE ' . $db->sql_in_set('post_id', $post_ids) . '					AND report_closed = 0';			$result = $db->sql_query($sql);			$post_ids = array();			while ($row = $db->sql_fetchrow($result))			{				if (!isset($post_reported[$row['post_id']]))				{					$post_ids[] = $row['post_id'];				}				else				{					unset($post_reported[$row['post_id']]);				}			}			$db->sql_freeresult($result);			// $post_reported should be empty by now, if it's not it contains			// posts that are falsely flagged as reported			foreach ($post_reported as $post_id => $void)			{				$post_ids[] = $post_id;			}			if (sizeof($post_ids))			{				$sql = 'UPDATE ' . POSTS_TABLE . '					SET post_reported = 1 - post_reported					WHERE ' . $db->sql_in_set('post_id', $post_ids);				$db->sql_query($sql);			}			$db->sql_transaction('commit');			break;		case 'topic_reported':			if ($sync_extra)			{				sync('post_reported', $where_type, $where_ids);			}			$topic_ids = $topic_reported = array();			$db->sql_transaction('begin');			$sql = 'SELECT DISTINCT(t.topic_id)				FROM ' . POSTS_TABLE . " t				$where_sql_and t.post_reported = 1";			$result = $db->sql_query($sql);			while ($row = $db->sql_fetchrow($result))			{				$topic_reported[$row['topic_id']] = 1;			}			$db->sql_freeresult($result);			$sql = 'SELECT t.topic_id, t.topic_reported				FROM ' . TOPICS_TABLE . " t				$where_sql";			$result = $db->sql_query($sql);			while ($row = $db->sql_fetchrow($result))			{				if ($row['topic_reported'] ^ isset($topic_reported[$row['topic_id']]))				{					$topic_ids[] = $row['topic_id'];				}			}			$db->sql_freeresult($result);			if (sizeof($topic_ids))			{				$sql = 'UPDATE ' . TOPICS_TABLE . '					SET topic_reported = 1 - topic_reported					WHERE ' . $db->sql_in_set('topic_id', $topic_ids);				$db->sql_query($sql);			}			$db->sql_transaction('commit');			break;		case 'post_attachment':			$post_ids = $post_attachment = array();			$db->sql_transaction('begin');			$sql = 'SELECT p.post_id, p.post_attachment				FROM ' . POSTS_TABLE . " p				$where_sql				GROUP BY p.post_id, p.post_attachment";			$result = $db->sql_query($sql);			while ($row = $db->sql_fetchrow($result))			{				$post_ids[$row['post_id']] = $row['post_id'];				if ($row['post_attachment'])				{					$post_attachment[$row['post_id']] = 1;				}			}			$db->sql_freeresult($result);			$sql = 'SELECT DISTINCT(post_msg_id)				FROM ' . ATTACHMENTS_TABLE . '				WHERE ' . $db->sql_in_set('post_msg_id', $post_ids) . '					AND in_message = 0';			$result = $db->sql_query($sql);			$post_ids = array();			while ($row = $db->sql_fetchrow($result))			{				if (!isset($post_attachment[$row['post_msg_id']]))				{					$post_ids[] = $row['post_msg_id'];				}				else				{					unset($post_attachment[$row['post_msg_id']]);				}			}			$db->sql_freeresult($result);			// $post_attachment should be empty by now, if it's not it contains			// posts that are falsely flagged as having attachments			foreach ($post_attachment as $post_id => $void)			{				$post_ids[] = $post_id;			}			if (sizeof($post_ids))			{				$sql = 'UPDATE ' . POSTS_TABLE . '					SET post_attachment = 1 - post_attachment					WHERE ' . $db->sql_in_set('post_id', $post_ids);				$db->sql_query($sql);			}			$db->sql_transaction('commit');			break;		case 'topic_attachment':			if ($sync_extra)			{				sync('post_attachment', $where_type, $where_ids);			}			$topic_ids = $topic_attachment = array();			$db->sql_transaction('begin');			$sql = 'SELECT DISTINCT(t.topic_id)				FROM ' . POSTS_TABLE . " t				$where_sql_and t.post_attachment = 1";			$result = $db->sql_query($sql);			while ($row = $db->sql_fetchrow($result))			{				$topic_attachment[$row['topic_id']] = 1;			}			$db->sql_freeresult($result);			$sql = 'SELECT t.topic_id, t.topic_attachment				FROM ' . TOPICS_TABLE . " t				$where_sql";			$result = $db->sql_query($sql);			while ($row = $db->sql_fetchrow($result))			{				if ($row['topic_attachment'] ^ isset($topic_attachment[$row['topic_id']]))				{					$topic_ids[] = $row['topic_id'];				}			}			$db->sql_freeresult($result);			if (sizeof($topic_ids))			{				$sql = 'UPDATE ' . TOPICS_TABLE . '					SET topic_attachment = 1 - topic_attachment					WHERE ' . $db->sql_in_set('topic_id', $topic_ids);				$db->sql_query($sql);			}			$db->sql_transaction('commit');			break;		case 'forum':			$db->sql_transaction('begin');			// 1: Get the list of all forums			$sql = 'SELECT f.*				FROM ' . FORUMS_TABLE . " f				$where_sql";			$result = $db->sql_query($sql);			$forum_data = $forum_ids = $post_ids = $last_post_id = $post_info = array();			while ($row = $db->sql_fetchrow($result))			{				if ($row['forum_type'] == FORUM_LINK)				{					continue;				}				$forum_id = (int) $row['forum_id'];				$forum_ids[$forum_id] = $forum_id;				$forum_data[$forum_id] = $row;				if ($sync_extra)				{					$forum_data[$forum_id]['posts'] = 0;					$forum_data[$forum_id]['topics'] = 0;					$forum_data[$forum_id]['topics_real'] = 0;				}				$forum_data[$forum_id]['last_post_id'] = 0;				$forum_data[$forum_id]['last_post_subject'] = '';				$forum_data[$forum_id]['last_post_time'] = 0;				$forum_data[$forum_id]['last_poster_id'] = 0;				$forum_data[$forum_id]['last_poster_name'] = '';				$forum_data[$forum_id]['last_poster_colour'] = '';			}			$db->sql_freeresult($result);			if (!sizeof($forum_ids))			{				break;			}			$forum_ids = array_values($forum_ids);			// 2: Get topic counts for each forum (optional)			if ($sync_extra)			{				$sql = 'SELECT forum_id, topic_approved, COUNT(topic_id) AS forum_topics					FROM ' . TOPICS_TABLE . '					WHERE ' . $db->sql_in_set('forum_id', $forum_ids) . '					GROUP BY forum_id, topic_approved';				$result = $db->sql_query($sql);				while ($row = $db->sql_fetchrow($result))				{					$forum_id = (int) $row['forum_id'];					$forum_data[$forum_id]['topics_real'] += $row['forum_topics'];					if ($row['topic_approved'])					{						$forum_data[$forum_id]['topics'] = $row['forum_topics'];					}				}				$db->sql_freeresult($result);			}			// 3: Get post count for each forum (optional)			if ($sync_extra)			{				if (sizeof($forum_ids) == 1)				{					$sql = 'SELECT SUM(t.topic_replies + 1) AS forum_posts						FROM ' . TOPICS_TABLE . ' t						WHERE ' . $db->sql_in_set('t.forum_id', $forum_ids) . '							AND t.topic_approved = 1							AND t.topic_status <> ' . ITEM_MOVED;				}				else				{					$sql = 'SELECT t.forum_id, SUM(t.topic_replies + 1) AS forum_posts						FROM ' . TOPICS_TABLE . ' t						WHERE ' . $db->sql_in_set('t.forum_id', $forum_ids) . '							AND t.topic_approved = 1							AND t.topic_status <> ' . ITEM_MOVED . '						GROUP BY t.forum_id';				}				$result = $db->sql_query($sql);				while ($row = $db->sql_fetchrow($result))				{					$forum_id = (sizeof($forum_ids) == 1) ? (int) $forum_ids[0] : (int) $row['forum_id'];					$forum_data[$forum_id]['posts'] = (int) $row['forum_posts'];				}				$db->sql_freeresult($result);			}			// 4: Get last_post_id for each forum			if (sizeof($forum_ids) == 1)			{				$sql = 'SELECT MAX(t.topic_last_post_id) as last_post_id					FROM ' . TOPICS_TABLE . ' t					WHERE ' . $db->sql_in_set('t.forum_id', $forum_ids) . '						AND t.topic_approved = 1';			}			else			{				$sql = 'SELECT t.forum_id, MAX(t.topic_last_post_id) as last_post_id					FROM ' . TOPICS_TABLE . ' t					WHERE ' . $db->sql_in_set('t.forum_id', $forum_ids) . '						AND t.topic_approved = 1					GROUP BY t.forum_id';			}			$result = $db->sql_query($sql);			while ($row = $db->sql_fetchrow($result))			{				$forum_id = (sizeof($forum_ids) == 1) ? (int) $forum_ids[0] : (int) $row['forum_id'];				$forum_data[$forum_id]['last_post_id'] = (int) $row['last_post_id'];				$post_ids[] = $row['last_post_id'];			}			$db->sql_freeresult($result);			// 5: Retrieve last_post infos			if (sizeof($post_ids))			{				$sql = 'SELECT p.post_id, p.poster_id, p.post_subject, p.post_time, p.post_username, u.username, u.user_colour					FROM ' . POSTS_TABLE . ' p, ' . USERS_TABLE . ' u					WHERE ' . $db->sql_in_set('p.post_id', $post_ids) . '						AND p.poster_id = u.user_id';				$result = $db->sql_query($sql);				while ($row = $db->sql_fetchrow($result))				{					$post_info[$row['post_id']] = $row;				}				$db->sql_freeresult($result);				foreach ($forum_data as $forum_id => $data)				{					if ($data['last_post_id'])					{						if (isset($post_info[$data['last_post_id']]))						{							$forum_data[$forum_id]['last_post_subject'] = $post_info[$data['last_post_id']]['post_subject'];							$forum_data[$forum_id]['last_post_time'] = $post_info[$data['last_post_id']]['post_time'];							$forum_data[$forum_id]['last_poster_id'] = $post_info[$data['last_post_id']]['poster_id'];							$forum_data[$forum_id]['last_poster_name'] = ($post_info[$data['last_post_id']]['poster_id'] != ANONYMOUS) ? $post_info[$data['last_post_id']]['username'] : $post_info[$data['last_post_id']]['post_username'];							$forum_data[$forum_id]['last_poster_colour'] = $post_info[$data['last_post_id']]['user_colour'];						}						else						{							// For some reason we did not find the post in the db							$forum_data[$forum_id]['last_post_id'] = 0;							$forum_data[$forum_id]['last_post_subject'] = '';							$forum_data[$forum_id]['last_post_time'] = 0;							$forum_data[$forum_id]['last_poster_id'] = 0;							$forum_data[$forum_id]['last_poster_name'] = '';							$forum_data[$forum_id]['last_poster_colour'] = '';						}					}				}				unset($post_info);			}			// 6: Now do that thing			$fieldnames = array('last_post_id', 'last_post_subject', 'last_post_time', 'last_poster_id', 'last_poster_name', 'last_poster_colour');			if ($sync_extra)			{				array_push($fieldnames, 'posts', 'topics', 'topics_real');			}			foreach ($forum_data as $forum_id => $row)			{				$sql_ary = array();				foreach ($fieldnames as $fieldname)				{					if ($row['forum_' . $fieldname] != $row[$fieldname])					{						if (preg_match('#(name|colour|subject)$#', $fieldname))						{							$sql_ary['forum_' . $fieldname] = (string) $row[$fieldname];						}						else						{							$sql_ary['forum_' . $fieldname] = (int) $row[$fieldname];						}					}				}				if (sizeof($sql_ary))				{					$sql = 'UPDATE ' . FORUMS_TABLE . '						SET ' . $db->sql_build_array('UPDATE', $sql_ary) . '						WHERE forum_id = ' . $forum_id;					$db->sql_query($sql);				}			}			$db->sql_transaction('commit');			break;		case 'topic':			$topic_data = $post_ids = $approved_unapproved_ids = $resync_forums = $delete_topics = $delete_posts = $moved_topics = array();			$db->sql_transaction('begin');			$sql = 'SELECT t.topic_id, t.forum_id, t.topic_moved_id, t.topic_approved, ' . (($sync_extra) ? 't.topic_attachment, t.topic_reported, ' : '') . 't.topic_poster, t.topic_time, t.topic_replies, t.topic_replies_real, t.topic_first_post_id, t.topic_first_poster_name, t.topic_first_poster_colour, t.topic_last_post_id, t.topic_last_post_subject, t.topic_last_poster_id, t.topic_last_poster_name, t.topic_last_poster_colour, t.topic_last_post_time				FROM ' . TOPICS_TABLE . " t				$where_sql";			$result = $db->sql_query($sql);			while ($row = $db->sql_fetchrow($result))			{				if ($row['topic_moved_id'])				{					$moved_topics[] = $row['topic_id'];					continue;				}				$topic_id = (int) $row['topic_id'];				$topic_data[$topic_id] = $row;				$topic_data[$topic_id]['replies_real'] = -1;				$topic_data[$topic_id]['replies'] = 0;				$topic_data[$topic_id]['first_post_id'] = 0;				$topic_data[$topic_id]['last_post_id'] = 0;				unset($topic_data[$topic_id]['topic_id']);				// This array holds all topic_ids				$delete_topics[$topic_id] = '';				if ($sync_extra)				{					$topic_data[$topic_id]['reported'] = 0;					$topic_data[$topic_id]['attachment'] = 0;				}			}			$db->sql_freeresult($result);			// Use "t" as table alias because of the $where_sql clause			// NOTE: 't.post_approved' in the GROUP BY is causing a major slowdown.			$sql = 'SELECT t.topic_id, t.post_approved, COUNT(t.post_id) AS total_posts, MIN(t.post_id) AS first_post_id, MAX(t.post_id) AS last_post_id				FROM ' . POSTS_TABLE . " t				$where_sql				GROUP BY t.topic_id, t.post_approved";			$result = $db->sql_query($sql);			while ($row = $db->sql_fetchrow($result))			{				$topic_id = (int) $row['topic_id'];				$row['first_post_id'] = (int) $row['first_post_id'];				$row['last_post_id'] = (int) $row['last_post_id'];				if (!isset($topic_data[$topic_id]))				{					// Hey, these posts come from a topic that does not exist					$delete_posts[$topic_id] = '';				}				else				{					// Unset the corresponding entry in $delete_topics					// When we'll be done, only topics with no posts will remain					unset($delete_topics[$topic_id]);					$topic_data[$topic_id]['replies_real'] += $row['total_posts'];					$topic_data[$topic_id]['first_post_id'] = (!$topic_data[$topic_id]['first_post_id']) ? $row['first_post_id'] : min($topic_data[$topic_id]['first_post_id'], $row['first_post_id']);					if ($row['post_approved'] || !$topic_data[$topic_id]['last_post_id'])					{						$topic_data[$topic_id]['replies'] = $row['total_posts'] - 1;						$topic_data[$topic_id]['last_post_id'] = $row['last_post_id'];					}				}			}			$db->sql_freeresult($result);			foreach ($topic_data as $topic_id => $row)			{				$post_ids[] = $row['first_post_id'];				if ($row['first_post_id'] != $row['last_post_id'])				{					$post_ids[] = $row['last_post_id'];				}			}			// Now we delete empty topics and orphan posts			if (sizeof($delete_posts))			{				delete_posts('topic_id', array_keys($delete_posts), false);				unset($delete_posts);			}			if (!sizeof($topic_data))			{				// If we get there, topic ids were invalid or topics did not contain any posts				delete_topics($where_type, $where_ids, true);				return;			}			if (sizeof($delete_topics))			{				$delete_topic_ids = array();				foreach ($delete_topics as $topic_id => $void)				{					unset($topic_data[$topic_id]);					$delete_topic_ids[] = $topic_id;				}				delete_topics('topic_id', $delete_topic_ids, false);				unset($delete_topics, $delete_topic_ids);			}			$sql = 'SELECT p.post_id, p.topic_id, p.post_approved, p.poster_id, p.post_subject, p.post_username, p.post_time, u.username, u.user_colour				FROM ' . POSTS_TABLE . ' p, ' . USERS_TABLE . ' u				WHERE ' . $db->sql_in_set('p.post_id', $post_ids) . '					AND u.user_id = p.poster_id';			$result = $db->sql_query($sql);			$post_ids = array();			while ($row = $db->sql_fetchrow($result))			{				$topic_id = intval($row['topic_id']);				if ($row['post_id'] == $topic_data[$topic_id]['first_post_id'])				{					if ($topic_data[$topic_id]['topic_approved'] != $row['post_approved'])					{						$approved_unapproved_ids[] = $topic_id;					}					$topic_data[$topic_id]['time'] = $row['post_time'];					$topic_data[$topic_id]['poster'] = $row['poster_id'];					$topic_data[$topic_id]['first_poster_name'] = ($row['poster_id'] == ANONYMOUS) ? $row['post_username'] : $row['username'];					$topic_data[$topic_id]['first_poster_colour'] = $row['user_colour'];				}				if ($row['post_id'] == $topic_data[$topic_id]['last_post_id'])				{					$topic_data[$topic_id]['last_poster_id'] = $row['poster_id'];					$topic_data[$topic_id]['last_post_subject'] = $row['post_subject'];					$topic_data[$topic_id]['last_post_time'] = $row['post_time'];					$topic_data[$topic_id]['last_poster_name'] = ($row['poster_id'] == ANONYMOUS) ? $row['post_username'] : $row['username'];					$topic_data[$topic_id]['last_poster_colour'] = $row['user_colour'];				}			}			$db->sql_freeresult($result);			// Make sure shadow topics do link to existing topics			if (sizeof($moved_topics))			{				$delete_topics = array();				$sql = 'SELECT t1.topic_id, t1.topic_moved_id					FROM ' . TOPICS_TABLE . ' t1					LEFT JOIN ' . TOPICS_TABLE . ' t2 ON (t2.topic_id = t1.topic_moved_id)					WHERE ' . $db->sql_in_set('t1.topic_id', $moved_topics) . '						AND t2.topic_id IS NULL';				$result = $db->sql_query($sql);				while ($row = $db->sql_fetchrow($result))				{					$delete_topics[] = $row['topic_id'];				}				$db->sql_freeresult($result);				if (sizeof($delete_topics))				{					delete_topics('topic_id', $delete_topics, false);				}				unset($delete_topics);				// Make sure shadow topics having no last post data being updated (this only rarely happens...)				$sql = 'SELECT topic_id, topic_moved_id, topic_last_post_id, topic_first_post_id					FROM ' . TOPICS_TABLE . '					WHERE ' . $db->sql_in_set('topic_id', $moved_topics) . '						AND topic_last_post_time = 0';				$result = $db->sql_query($sql);				$shadow_topic_data = $post_ids = array();				while ($row = $db->sql_fetchrow($result))				{					$shadow_topic_data[$row['topic_moved_id']] = $row;					$post_ids[] = $row['topic_last_post_id'];					$post_ids[] = $row['topic_first_post_id'];				}				$db->sql_freeresult($result);				$sync_shadow_topics = array();				if (sizeof($post_ids))				{					$sql = 'SELECT p.post_id, p.topic_id, p.post_approved, p.poster_id, p.post_subject, p.post_username, p.post_time, u.username, u.user_colour						FROM ' . POSTS_TABLE . ' p, ' . USERS_TABLE . ' u						WHERE ' . $db->sql_in_set('p.post_id', $post_ids) . '							AND u.user_id = p.poster_id';					$result = $db->sql_query($sql);					$post_ids = array();					while ($row = $db->sql_fetchrow($result))					{						$topic_id = (int) $row['topic_id'];						// Ok, there should be a shadow topic. If there isn't, then there's something wrong with the db.						// However, there's not much we can do about it.						if (!empty($shadow_topic_data[$topic_id]))						{							if ($row['post_id'] == $shadow_topic_data[$topic_id]['topic_first_post_id'])							{								$orig_topic_id = $shadow_topic_data[$topic_id]['topic_id'];								if (!isset($sync_shadow_topics[$orig_topic_id]))								{									$sync_shadow_topics[$orig_topic_id] = array();								}								$sync_shadow_topics[$orig_topic_id]['topic_time'] = $row['post_time'];								$sync_shadow_topics[$orig_topic_id]['topic_poster'] = $row['poster_id'];								$sync_shadow_topics[$orig_topic_id]['topic_first_poster_name'] = ($row['poster_id'] == ANONYMOUS) ? $row['post_username'] : $row['username'];								$sync_shadow_topics[$orig_topic_id]['topic_first_poster_colour'] = $row['user_colour'];							}							if ($row['post_id'] == $shadow_topic_data[$topic_id]['topic_last_post_id'])							{								$orig_topic_id = $shadow_topic_data[$topic_id]['topic_id'];								if (!isset($sync_shadow_topics[$orig_topic_id]))								{									$sync_shadow_topics[$orig_topic_id] = array();								}								$sync_shadow_topics[$orig_topic_id]['topic_last_poster_id'] = $row['poster_id'];								$sync_shadow_topics[$orig_topic_id]['topic_last_post_subject'] = $row['post_subject'];								$sync_shadow_topics[$orig_topic_id]['topic_last_post_time'] = $row['post_time'];								$sync_shadow_topics[$orig_topic_id]['topic_last_poster_name'] = ($row['poster_id'] == ANONYMOUS) ? $row['post_username'] : $row['username'];								$sync_shadow_topics[$orig_topic_id]['topic_last_poster_colour'] = $row['user_colour'];							}						}					}					$db->sql_freeresult($result);					$shadow_topic_data = array();					// Update the information we collected					if (sizeof($sync_shadow_topics))					{						foreach ($sync_shadow_topics as $sync_topic_id => $sql_ary)						{							$sql = 'UPDATE ' . TOPICS_TABLE . '								SET ' . $db->sql_build_array('UPDATE', $sql_ary) . '								WHERE topic_id = ' . $sync_topic_id;							$db->sql_query($sql);						}					}				}				unset($sync_shadow_topics, $shadow_topic_data);			}			// approved becomes unapproved, and vice-versa			if (sizeof($approved_unapproved_ids))			{				$sql = 'UPDATE ' . TOPICS_TABLE . '					SET topic_approved = 1 - topic_approved					WHERE ' . $db->sql_in_set('topic_id', $approved_unapproved_ids);				$db->sql_query($sql);			}			unset($approved_unapproved_ids);			// These are fields that will be synchronised			$fieldnames = array('time', 'replies', 'replies_real', 'poster', 'first_post_id', 'first_poster_name', 'first_poster_colour', 'last_post_id', 'last_post_subject', 'last_post_time', 'last_poster_id', 'last_poster_name', 'last_poster_colour');			if ($sync_extra)			{				// This routine assumes that post_reported values are correct				// if they are not, use sync('post_reported') first				$sql = 'SELECT t.topic_id, p.post_id					FROM ' . TOPICS_TABLE . ' t, ' . POSTS_TABLE . " p					$where_sql_and p.topic_id = t.topic_id						AND p.post_reported = 1					GROUP BY t.topic_id, p.post_id";				$result = $db->sql_query($sql);				$fieldnames[] = 'reported';				while ($row = $db->sql_fetchrow($result))				{					$topic_data[intval($row['topic_id'])]['reported'] = 1;				}				$db->sql_freeresult($result);				// This routine assumes that post_attachment values are correct				// if they are not, use sync('post_attachment') first				$sql = 'SELECT t.topic_id, p.post_id					FROM ' . TOPICS_TABLE . ' t, ' . POSTS_TABLE . " p					$where_sql_and p.topic_id = t.topic_id						AND p.post_attachment = 1					GROUP BY t.topic_id, p.post_id";				$result = $db->sql_query($sql);				$fieldnames[] = 'attachment';				while ($row = $db->sql_fetchrow($result))				{					$topic_data[intval($row['topic_id'])]['attachment'] = 1;				}				$db->sql_freeresult($result);			}			foreach ($topic_data as $topic_id => $row)			{				$sql_ary = array();				foreach ($fieldnames as $fieldname)				{					if (isset($row[$fieldname]) && isset($row['topic_' . $fieldname]) && $row['topic_' . $fieldname] != $row[$fieldname])					{						$sql_ary['topic_' . $fieldname] = $row[$fieldname];					}				}				if (sizeof($sql_ary))				{					$sql = 'UPDATE ' . TOPICS_TABLE . '						SET ' . $db->sql_build_array('UPDATE', $sql_ary) . '						WHERE topic_id = ' . $topic_id;					$db->sql_query($sql);					$resync_forums[$row['forum_id']] = $row['forum_id'];				}			}			unset($topic_data);			$db->sql_transaction('commit');			// if some topics have been resync'ed then resync parent forums			// except when we're only syncing a range, we don't want to sync forums during			// batch processing.			if ($resync_parents && sizeof($resync_forums) && $where_type != 'range')			{				sync('forum', 'forum_id', array_values($resync_forums), true, true);			}			break;	}	return;}/*** Prune function*/function prune($forum_id, $prune_mode, $prune_date, $prune_flags = 0, $auto_sync = true){	global $db;	if (!is_array($forum_id))	{		$forum_id = array($forum_id);	}	if (!sizeof($forum_id))	{		return;	}	$sql_and = '';	if (!($prune_flags & FORUM_FLAG_PRUNE_ANNOUNCE))	{		$sql_and .= ' AND topic_type <> ' . POST_ANNOUNCE;	}	if (!($prune_flags & FORUM_FLAG_PRUNE_STICKY))	{		$sql_and .= ' AND topic_type <> ' . POST_STICKY;	}	if ($prune_mode == 'posted')	{		$sql_and .= " AND topic_last_post_time < $prune_date";	}	if ($prune_mode == 'viewed')	{		$sql_and .= " AND topic_last_view_time < $prune_date";	}	$sql = 'SELECT topic_id		FROM ' . TOPICS_TABLE . '		WHERE ' . $db->sql_in_set('forum_id', $forum_id) . "			AND poll_start = 0			$sql_and";	$result = $db->sql_query($sql);	$topic_list = array();	while ($row = $db->sql_fetchrow($result))	{		$topic_list[] = $row['topic_id'];	}	$db->sql_freeresult($result);	if ($prune_flags & FORUM_FLAG_PRUNE_POLL)	{		$sql = 'SELECT topic_id			FROM ' . TOPICS_TABLE . '			WHERE ' . $db->sql_in_set('forum_id', $forum_id) . "				AND poll_start > 0				AND poll_last_vote < $prune_date				$sql_and";		$result = $db->sql_query($sql);		while ($row = $db->sql_fetchrow($result))		{			$topic_list[] = $row['topic_id'];		}		$db->sql_freeresult($result);		$topic_list = array_unique($topic_list);	}	return delete_topics('topic_id', $topic_list, $auto_sync, false);}/*** Function auto_prune(), this function now relies on passed vars*/function auto_prune($forum_id, $prune_mode, $prune_flags, $prune_days, $prune_freq){	global $db;	$sql = 'SELECT forum_name		FROM ' . FORUMS_TABLE . "		WHERE forum_id = $forum_id";	$result = $db->sql_query($sql, 3600);	$row = $db->sql_fetchrow($result);	$db->sql_freeresult($result);	if ($row)	{		$prune_date = time() - ($prune_days * 86400);		$next_prune = time() + ($prune_freq * 86400);		prune($forum_id, $prune_mode, $prune_date, $prune_flags, true);		$sql = 'UPDATE ' . FORUMS_TABLE . "			SET prune_next = $next_prune			WHERE forum_id = $forum_id";		$db->sql_query($sql);		add_log('admin', 'LOG_AUTO_PRUNE', $row['forum_name']);	}	return;}/*** remove_comments will strip the sql comment lines out of an uploaded sql file* specifically for mssql and postgres type files in the install....*/function remove_comments(&$output){	$lines = explode("\n", $output);	$output = '';	// try to keep mem. use down	$linecount = sizeof($lines);	$in_comment = false;	for ($i = 0; $i < $linecount; $i++)	{		if (trim($lines[$i]) == '/*')		{			$in_comment = true;		}		if (!$in_comment)		{			$output .= $lines[$i] . "\n";		}		if (trim($lines[$i]) == '*/')		{			$in_comment = false;		}	}	unset($lines);	return $output;}/*** Cache moderators, called whenever permissions are changed via admin_permissions. Changes of username* and group names must be carried through for the moderators table*/function cache_moderators(){	global $db, $cache, $auth, $phpbb_root_path, $phpEx;	// Remove cached sql results	$cache->destroy('sql', MODERATOR_CACHE_TABLE);	// Clear table	switch ($db->sql_layer)	{		case 'sqlite':		case 'firebird':			$db->sql_query('DELETE FROM ' . MODERATOR_CACHE_TABLE);		break;		default:			$db->sql_query('TRUNCATE TABLE ' . MODERATOR_CACHE_TABLE);		break;	}	// We add moderators who have forum moderator permissions without an explicit ACL_NEVER setting	$hold_ary = $ug_id_ary = $sql_ary = array();	// Grab all users having moderative options...	$hold_ary = $auth->acl_user_raw_data(false, 'm_%', false);	// Add users?	if (sizeof($hold_ary))	{		// At least one moderative option warrants a display		$ug_id_ary = array_keys($hold_ary);		// Remove users who have group memberships with DENY moderator permissions		$sql = $db->sql_build_query('SELECT', array(			'SELECT'	=> 'a.forum_id, ug.user_id, g.group_id',			'FROM'		=> array(				ACL_OPTIONS_TABLE	=> 'o',				USER_GROUP_TABLE	=> 'ug',				GROUPS_TABLE		=> 'g',				ACL_GROUPS_TABLE	=> 'a',			),			'LEFT_JOIN'	=> array(				array(					'FROM'	=> array(ACL_ROLES_DATA_TABLE => 'r'),					'ON'	=> 'a.auth_role_id = r.role_id'				)			),			'WHERE'		=> '(o.auth_option_id = a.auth_option_id OR o.auth_option_id = r.auth_option_id)				AND ((a.auth_setting = ' . ACL_NEVER . ' AND r.auth_setting IS NULL)					OR r.auth_setting = ' . ACL_NEVER . ')				AND a.group_id = ug.group_id				AND g.group_id = ug.group_id				AND NOT (ug.group_leader = 1 AND g.group_skip_auth = 1)				AND ' . $db->sql_in_set('ug.user_id', $ug_id_ary) . "				AND ug.user_pending = 0				AND o.auth_option " . $db->sql_like_expression('m_' . $db->any_char),		));		$result = $db->sql_query($sql);		while ($row = $db->sql_fetchrow($result))		{			if (isset($hold_ary[$row['user_id']][$row['forum_id']]))			{				unset($hold_ary[$row['user_id']][$row['forum_id']]);			}		}		$db->sql_freeresult($result);		if (sizeof($hold_ary))		{			// Get usernames...			$sql = 'SELECT user_id, username				FROM ' . USERS_TABLE . '				WHERE ' . $db->sql_in_set('user_id', array_keys($hold_ary));			$result = $db->sql_query($sql);			$usernames_ary = array();			while ($row = $db->sql_fetchrow($result))			{				$usernames_ary[$row['user_id']] = $row['username'];			}			foreach ($hold_ary as $user_id => $forum_id_ary)			{				// Do not continue if user does not exist				if (!isset($usernames_ary[$user_id]))				{					continue;				}				foreach ($forum_id_ary as $forum_id => $auth_ary)				{					$sql_ary[] = array(						'forum_id'		=> (int) $forum_id,						'user_id'		=> (int) $user_id,						'username'		=> (string) $usernames_ary[$user_id],						'group_id'		=> 0,						'group_name'	=> ''					);				}			}		}	}	// Now to the groups...	$hold_ary = $auth->acl_group_raw_data(false, 'm_%', false);	if (sizeof($hold_ary))	{		$ug_id_ary = array_keys($hold_ary);		// Make sure not hidden or special groups are involved...		$sql = 'SELECT group_name, group_id, group_type			FROM ' . GROUPS_TABLE . '			WHERE ' . $db->sql_in_set('group_id', $ug_id_ary);		$result = $db->sql_query($sql);		$groupnames_ary = array();		while ($row = $db->sql_fetchrow($result))		{			if ($row['group_type'] == GROUP_HIDDEN || $row['group_type'] == GROUP_SPECIAL)			{				unset($hold_ary[$row['group_id']]);			}			$groupnames_ary[$row['group_id']] = $row['group_name'];		}		$db->sql_freeresult($result);		foreach ($hold_ary as $group_id => $forum_id_ary)		{			// If there is no group, we do not assign it...			if (!isset($groupnames_ary[$group_id]))			{				continue;			}			foreach ($forum_id_ary as $forum_id => $auth_ary)			{				$flag = false;				foreach ($auth_ary as $auth_option => $setting)				{					// Make sure at least one ACL_YES option is set...					if ($setting == ACL_YES)					{						$flag = true;						break;					}				}				if (!$flag)				{					continue;				}				$sql_ary[] = array(					'forum_id'		=> (int) $forum_id,					'user_id'		=> 0,					'username'		=> '',					'group_id'		=> (int) $group_id,					'group_name'	=> (string) $groupnames_ary[$group_id]				);			}		}	}	$db->sql_multi_insert(MODERATOR_CACHE_TABLE, $sql_ary);}/*** View log* If $log_count is set to false, we will skip counting all entries in the database.*/function view_log($mode, &$log, &$log_count, $limit = 0, $offset = 0, $forum_id = 0, $topic_id = 0, $user_id = 0, $limit_days = 0, $sort_by = 'l.log_time DESC', $keywords = ''){	global $db, $user, $auth, $phpEx, $phpbb_root_path, $phpbb_admin_path;	$topic_id_list = $reportee_id_list = $is_auth = $is_mod = array();	$profile_url = (defined('IN_ADMIN')) ? append_sid("{$phpbb_admin_path}index.$phpEx", 'i=users&amp;mode=overview') : append_sid("{$phpbb_root_path}memberlist.$phpEx", 'mode=viewprofile');	switch ($mode)	{		case 'admin':			$log_type = LOG_ADMIN;			$sql_forum = '';		break;		case 'mod':			$log_type = LOG_MOD;			$sql_forum = '';			if ($topic_id)			{				$sql_forum = 'AND l.topic_id = ' . (int) $topic_id;			}			else if (is_array($forum_id))			{				$sql_forum = 'AND ' . $db->sql_in_set('l.forum_id', array_map('intval', $forum_id));			}			else if ($forum_id)			{				$sql_forum = 'AND l.forum_id = ' . (int) $forum_id;			}		break;		case 'user':			$log_type = LOG_USERS;			$sql_forum = 'AND l.reportee_id = ' . (int) $user_id;		break;		case 'users':			$log_type = LOG_USERS;			$sql_forum = '';		break;		case 'critical':			$log_type = LOG_CRITICAL;			$sql_forum = '';		break;		default:			return;	}	// Use no preg_quote for $keywords because this would lead to sole backslashes being added	// We also use an OR connection here for spaces and the | string. Currently, regex is not supported for searching (but may come later).	$keywords = preg_split('#[\s|]+#u', utf8_strtolower($keywords), 0, PREG_SPLIT_NO_EMPTY);	$sql_keywords = '';	if (!empty($keywords))	{		$keywords_pattern = array();		// Build pattern and keywords...		for ($i = 0, $num_keywords = sizeof($keywords); $i < $num_keywords; $i++)		{			$keywords_pattern[] = preg_quote($keywords[$i], '#');			$keywords[$i] = $db->sql_like_expression($db->any_char . $keywords[$i] . $db->any_char);		}		$keywords_pattern = '#' . implode('|', $keywords_pattern) . '#ui';		$operations = array();		foreach ($user->lang as $key => $value)		{			if (substr($key, 0, 4) == 'LOG_' && preg_match($keywords_pattern, $value))			{				$operations[] = $key;			}		}		$sql_keywords = 'AND (';		if (!empty($operations))		{			$sql_keywords .= $db->sql_in_set('l.log_operation', $operations) . ' OR ';		}		$sql_keywords .= 'LOWER(l.log_data) ' . implode(' OR LOWER(l.log_data) ', $keywords) . ')';	}	if ($log_count !== false)	{		$sql = 'SELECT COUNT(l.log_id) AS total_entries			FROM ' . LOG_TABLE . ' l, ' . USERS_TABLE . " u			WHERE l.log_type = $log_type				AND l.user_id = u.user_id				AND l.log_time >= $limit_days				$sql_keywords				$sql_forum";		$result = $db->sql_query($sql);		$log_count = (int) $db->sql_fetchfield('total_entries');		$db->sql_freeresult($result);	}	// $log_count may be false here if false was passed in for it,	// because in this case we did not run the COUNT() query above.	// If we ran the COUNT() query and it returned zero rows, return;	// otherwise query for logs below.	if ($log_count === 0)	{		// Save the queries, because there are no logs to display		return 0;	}	if ($offset >= $log_count)	{		$offset = ($offset - $limit < 0) ? 0 : $offset - $limit;	}	$sql = "SELECT l.*, u.username, u.username_clean, u.user_colour		FROM " . LOG_TABLE . " l, " . USERS_TABLE . " u		WHERE l.log_type = $log_type			AND u.user_id = l.user_id			" . (($limit_days) ? "AND l.log_time >= $limit_days" : '') . "			$sql_keywords			$sql_forum		ORDER BY $sort_by";	$result = $db->sql_query_limit($sql, $limit, $offset);	$i = 0;	$log = array();	while ($row = $db->sql_fetchrow($result))	{		if ($row['topic_id'])		{			$topic_id_list[] = $row['topic_id'];		}		if ($row['reportee_id'])		{			$reportee_id_list[] = $row['reportee_id'];		}		$log[$i] = array(			'id'				=> $row['log_id'],			'reportee_id'			=> $row['reportee_id'],			'reportee_username'		=> '',			'reportee_username_full'=> '',			'user_id'			=> $row['user_id'],			'username'			=> $row['username'],			'username_full'		=> get_username_string('full', $row['user_id'], $row['username'], $row['user_colour'], false, $profile_url),			'ip'				=> $row['log_ip'],			'time'				=> $row['log_time'],			'forum_id'			=> $row['forum_id'],			'topic_id'			=> $row['topic_id'],			'viewforum'			=> ($row['forum_id'] && $auth->acl_get('f_read', $row['forum_id'])) ? append_sid("{$phpbb_root_path}viewforum.$phpEx", 'f=' . $row['forum_id']) : false,			'action'			=> (isset($user->lang[$row['log_operation']])) ? $user->lang[$row['log_operation']] : '{' . ucfirst(str_replace('_', ' ', $row['log_operation'])) . '}',		);		if (!empty($row['log_data']))		{			$log_data_ary = @unserialize($row['log_data']);			$log_data_ary = ($log_data_ary === false) ? array() : $log_data_ary;			if (isset($user->lang[$row['log_operation']]))			{				// Check if there are more occurrences of % than arguments, if there are we fill out the arguments array				// It doesn't matter if we add more arguments than placeholders				if ((substr_count($log[$i]['action'], '%') - sizeof($log_data_ary)) > 0)				{					$log_data_ary = array_merge($log_data_ary, array_fill(0, substr_count($log[$i]['action'], '%') - sizeof($log_data_ary), ''));				}				$log[$i]['action'] = vsprintf($log[$i]['action'], $log_data_ary);				// If within the admin panel we do not censor text out				if (defined('IN_ADMIN'))				{					$log[$i]['action'] = bbcode_nl2br($log[$i]['action']);				}				else				{					$log[$i]['action'] = bbcode_nl2br(censor_text($log[$i]['action']));				}			}			else if (!empty($log_data_ary))			{				$log[$i]['action'] .= '<br />' . implode('', $log_data_ary);			}			/* Apply make_clickable... has to be seen if it is for good. :/			// Seems to be not for the moment, reconsider later...			$log[$i]['action'] = make_clickable($log[$i]['action']);			*/		}		$i++;	}	$db->sql_freeresult($result);	if (sizeof($topic_id_list))	{		$topic_id_list = array_unique($topic_id_list);		// This query is not really needed if move_topics() updates the forum_id field,		// although it's also used to determine if the topic still exists in the database		$sql = 'SELECT topic_id, forum_id			FROM ' . TOPICS_TABLE . '			WHERE ' . $db->sql_in_set('topic_id', array_map('intval', $topic_id_list));		$result = $db->sql_query($sql);		$default_forum_id = 0;		while ($row = $db->sql_fetchrow($result))		{			if (!$row['forum_id'])			{				if ($auth->acl_getf_global('f_read'))				{					if (!$default_forum_id)					{						$sql = 'SELECT forum_id							FROM ' . FORUMS_TABLE . '							WHERE forum_type = ' . FORUM_POST;						$f_result = $db->sql_query_limit($sql, 1);						$default_forum_id = (int) $db->sql_fetchfield('forum_id', false, $f_result);						$db->sql_freeresult($f_result);					}					$is_auth[$row['topic_id']] = $default_forum_id;				}			}			else			{				if ($auth->acl_get('f_read', $row['forum_id']))				{					$is_auth[$row['topic_id']] = $row['forum_id'];				}			}			if ($auth->acl_gets('a_', 'm_', $row['forum_id']))			{				$is_mod[$row['topic_id']] = $row['forum_id'];			}		}		$db->sql_freeresult($result);		foreach ($log as $key => $row)		{			$log[$key]['viewtopic'] = (isset($is_auth[$row['topic_id']])) ? append_sid("{$phpbb_root_path}viewtopic.$phpEx", 'f=' . $is_auth[$row['topic_id']] . '&amp;t=' . $row['topic_id']) : false;			$log[$key]['viewlogs'] = (isset($is_mod[$row['topic_id']])) ? append_sid("{$phpbb_root_path}mcp.$phpEx", 'i=logs&amp;mode=topic_logs&amp;t=' . $row['topic_id'], true, $user->session_id) : false;		}	}	if (sizeof($reportee_id_list))	{		$reportee_id_list = array_unique($reportee_id_list);		$reportee_names_list = array();		$sql = 'SELECT user_id, username, user_colour			FROM ' . USERS_TABLE . '			WHERE ' . $db->sql_in_set('user_id', $reportee_id_list);		$result = $db->sql_query($sql);		while ($row = $db->sql_fetchrow($result))		{			$reportee_names_list[$row['user_id']] = $row;		}		$db->sql_freeresult($result);		foreach ($log as $key => $row)		{			if (!isset($reportee_names_list[$row['reportee_id']]))			{				continue;			}			$log[$key]['reportee_username'] = $reportee_names_list[$row['reportee_id']]['username'];			$log[$key]['reportee_username_full'] = get_username_string('full', $row['reportee_id'], $reportee_names_list[$row['reportee_id']]['username'], $reportee_names_list[$row['reportee_id']]['user_colour'], false, $profile_url);		}	}	return $offset;}/*** Update foes - remove moderators and administrators from foe lists...*/function update_foes($group_id = false, $user_id = false){	global $db, $auth;	// update foes for some user	if (is_array($user_id) && sizeof($user_id))	{		$sql = 'DELETE FROM ' . ZEBRA_TABLE . '			WHERE ' . $db->sql_in_set('zebra_id', $user_id) . '				AND foe = 1';		$db->sql_query($sql);		return;	}	// update foes for some group	if (is_array($group_id) && sizeof($group_id))	{		// Grab group settings...		$sql = $db->sql_build_query('SELECT', array(			'SELECT'	=> 'a.group_id',			'FROM'		=> array(				ACL_OPTIONS_TABLE	=> 'ao',				ACL_GROUPS_TABLE	=> 'a'			),			'LEFT_JOIN'	=> array(				array(					'FROM'	=> array(ACL_ROLES_DATA_TABLE => 'r'),					'ON'	=> 'a.auth_role_id = r.role_id'				),			),			'WHERE'		=> '(ao.auth_option_id = a.auth_option_id OR ao.auth_option_id = r.auth_option_id)				AND ' . $db->sql_in_set('a.group_id', $group_id) . "				AND ao.auth_option IN ('a_', 'm_')",			'GROUP_BY'	=> 'a.group_id'		));		$result = $db->sql_query($sql);		$groups = array();		while ($row = $db->sql_fetchrow($result))		{			$groups[] = (int) $row['group_id'];		}		$db->sql_freeresult($result);		if (!sizeof($groups))		{			return;		}		switch ($db->sql_layer)		{			case 'mysqli':			case 'mysql4':				$sql = 'DELETE ' . (($db->sql_layer === 'mysqli' || version_compare($db->sql_server_info(true), '4.1', '>=')) ? 'z.*' : ZEBRA_TABLE) . '					FROM ' . ZEBRA_TABLE . ' z, ' . USER_GROUP_TABLE . ' ug					WHERE z.zebra_id = ug.user_id						AND z.foe = 1						AND ' . $db->sql_in_set('ug.group_id', $groups);				$db->sql_query($sql);			break;			default:				$sql = 'SELECT user_id					FROM ' . USER_GROUP_TABLE . '					WHERE ' . $db->sql_in_set('group_id', $groups);				$result = $db->sql_query($sql);				$users = array();				while ($row = $db->sql_fetchrow($result))				{					$users[] = (int) $row['user_id'];				}				$db->sql_freeresult($result);				if (sizeof($users))				{					$sql = 'DELETE FROM ' . ZEBRA_TABLE . '						WHERE ' . $db->sql_in_set('zebra_id', $users) . '							AND foe = 1';					$db->sql_query($sql);				}			break;		}		return;	}	// update foes for everyone	$perms = array();	foreach ($auth->acl_get_list(false, array('a_', 'm_'), false) as $forum_id => $forum_ary)	{		foreach ($forum_ary as $auth_option => $user_ary)		{			$perms = array_merge($perms, $user_ary);		}	}	if (sizeof($perms))	{		$sql = 'DELETE FROM ' . ZEBRA_TABLE . '			WHERE ' . $db->sql_in_set('zebra_id', array_unique($perms)) . '				AND foe = 1';		$db->sql_query($sql);	}	unset($perms);}/*** Lists inactive users*/function view_inactive_users(&$users, &$user_count, $limit = 0, $offset = 0, $limit_days = 0, $sort_by = 'user_inactive_time DESC'){	global $db, $user;	$sql = 'SELECT COUNT(user_id) AS user_count		FROM ' . USERS_TABLE . '		WHERE user_type = ' . USER_INACTIVE .		(($limit_days) ? " AND user_inactive_time >= $limit_days" : '');	$result = $db->sql_query($sql);	$user_count = (int) $db->sql_fetchfield('user_count');	$db->sql_freeresult($result);	if ($user_count == 0)	{		// Save the queries, because there are no users to display		return 0;	}	if ($offset >= $user_count)	{		$offset = ($offset - $limit < 0) ? 0 : $offset - $limit;	}	$sql = 'SELECT *		FROM ' . USERS_TABLE . '		WHERE user_type = ' . USER_INACTIVE .		(($limit_days) ? " AND user_inactive_time >= $limit_days" : '') . "		ORDER BY $sort_by";	$result = $db->sql_query_limit($sql, $limit, $offset);	while ($row = $db->sql_fetchrow($result))	{		$row['inactive_reason'] = $user->lang['INACTIVE_REASON_UNKNOWN'];		switch ($row['user_inactive_reason'])		{			case INACTIVE_REGISTER:				$row['inactive_reason'] = $user->lang['INACTIVE_REASON_REGISTER'];			break;			case INACTIVE_PROFILE:				$row['inactive_reason'] = $user->lang['INACTIVE_REASON_PROFILE'];			break;			case INACTIVE_MANUAL:				$row['inactive_reason'] = $user->lang['INACTIVE_REASON_MANUAL'];			break;			case INACTIVE_REMIND:				$row['inactive_reason'] = $user->lang['INACTIVE_REASON_REMIND'];			break;		}		$users[] = $row;	}	return $offset;}/*** Lists warned users*/function view_warned_users(&$users, &$user_count, $limit = 0, $offset = 0, $limit_days = 0, $sort_by = 'user_warnings DESC'){	global $db;	$sql = 'SELECT user_id, username, user_colour, user_warnings, user_last_warning		FROM ' . USERS_TABLE . '		WHERE user_warnings > 0		' . (($limit_days) ? "AND user_last_warning >= $limit_days" : '') . "		ORDER BY $sort_by";	$result = $db->sql_query_limit($sql, $limit, $offset);	$users = $db->sql_fetchrowset($result);	$db->sql_freeresult($result);	$sql = 'SELECT count(user_id) AS user_count		FROM ' . USERS_TABLE . '		WHERE user_warnings > 0		' . (($limit_days) ? "AND user_last_warning >= $limit_days" : '');	$result = $db->sql_query($sql);	$user_count = (int) $db->sql_fetchfield('user_count');	$db->sql_freeresult($result);	return;}/*** Get database size* Currently only mysql and mssql are supported*/function get_database_size(){	global $db, $user, $table_prefix;	$database_size = false;	// This code is heavily influenced by a similar routine in phpMyAdmin 2.2.0	switch ($db->sql_layer)	{		case 'mysql':		case 'mysql4':		case 'mysqli':			$sql = 'SELECT VERSION() AS mysql_version';			$result = $db->sql_query($sql);			$row = $db->sql_fetchrow($result);			$db->sql_freeresult($result);			if ($row)			{				$version = $row['mysql_version'];				if (preg_match('#(3\.23|[45]\.)#', $version))				{					$db_name = (preg_match('#^(?:3\.23\.(?:[6-9]|[1-9]{2}))|[45]\.#', $version)) ? "`{$db->dbname}`" : $db->dbname;					$sql = 'SHOW TABLE STATUS						FROM ' . $db_name;					$result = $db->sql_query($sql, 7200);					$database_size = 0;					while ($row = $db->sql_fetchrow($result))					{						if ((isset($row['Type']) && $row['Type'] != 'MRG_MyISAM') || (isset($row['Engine']) && ($row['Engine'] == 'MyISAM' || $row['Engine'] == 'InnoDB')))						{							if ($table_prefix != '')							{								if (strpos($row['Name'], $table_prefix) !== false)								{									$database_size += $row['Data_length'] + $row['Index_length'];								}							}							else							{								$database_size += $row['Data_length'] + $row['Index_length'];							}						}					}					$db->sql_freeresult($result);				}			}		break;		case 'firebird':			global $dbname;			// if it on the local machine, we can get lucky			if (file_exists($dbname))			{				$database_size = filesize($dbname);			}		break;		case 'sqlite':			global $dbhost;			if (file_exists($dbhost))			{				$database_size = filesize($dbhost);			}		break;		case 'mssql':		case 'mssql_odbc':		case 'mssqlnative':			$sql = 'SELECT ((SUM(size) * 8.0) * 1024.0) as dbsize				FROM sysfiles';			$result = $db->sql_query($sql, 7200);			$database_size = ($row = $db->sql_fetchrow($result)) ? $row['dbsize'] : false;			$db->sql_freeresult($result);		break;		case 'postgres':			$sql = "SELECT proname				FROM pg_proc				WHERE proname = 'pg_database_size'";			$result = $db->sql_query($sql);			$row = $db->sql_fetchrow($result);			$db->sql_freeresult($result);			if ($row['proname'] == 'pg_database_size')			{				$database = $db->dbname;				if (strpos($database, '.') !== false)				{					list($database, ) = explode('.', $database);				}				$sql = "SELECT oid					FROM pg_database					WHERE datname = '$database'";				$result = $db->sql_query($sql);				$row = $db->sql_fetchrow($result);				$db->sql_freeresult($result);				$oid = $row['oid'];				$sql = 'SELECT pg_database_size(' . $oid . ') as size';				$result = $db->sql_query($sql);				$row = $db->sql_fetchrow($result);				$db->sql_freeresult($result);				$database_size = $row['size'];			}		break;		case 'oracle':			$sql = 'SELECT SUM(bytes) as dbsize				FROM user_segments';			$result = $db->sql_query($sql, 7200);			$database_size = ($row = $db->sql_fetchrow($result)) ? $row['dbsize'] : false;			$db->sql_freeresult($result);		break;	}	$database_size = ($database_size !== false) ? get_formatted_filesize($database_size) : $user->lang['NOT_AVAILABLE'];	return $database_size;}/*** Retrieve contents from remotely stored file*/function get_remote_file($host, $directory, $filename, &$errstr, &$errno, $port = 80, $timeout = 6){	global $user;	if ($fsock = @fsockopen($host, $port, $errno, $errstr, $timeout))	{		@fputs($fsock, "GET $directory/$filename HTTP/1.1\r\n");		@fputs($fsock, "HOST: $host\r\n");		@fputs($fsock, "Connection: close\r\n\r\n");		$timer_stop = time() + $timeout;		stream_set_timeout($fsock, $timeout);		$file_info = '';		$get_info = false;		while (!@feof($fsock))		{			if ($get_info)			{				$file_info .= @fread($fsock, 1024);			}			else			{				$line = @fgets($fsock, 1024);				if ($line == "\r\n")				{					$get_info = true;				}				else if (stripos($line, '404 not found') !== false)				{					$errstr = $user->lang['FILE_NOT_FOUND'] . ': ' . $filename;					return false;				}			}			$stream_meta_data = stream_get_meta_data($fsock);			if (!empty($stream_meta_data['timed_out']) || time() >= $timer_stop)			{				$errstr = $user->lang['FSOCK_TIMEOUT'];				return false;			}		}		@fclose($fsock);	}	else	{		if ($errstr)		{			$errstr = utf8_convert_message($errstr);			return false;		}		else		{			$errstr = $user->lang['FSOCK_DISABLED'];			return false;		}	}	return $file_info;}/*** Tidy Warnings* Remove all warnings which have now expired from the database* The duration of a warning can be defined by the administrator* This only removes the warning and reduces the associated count,* it does not remove the user note recording the contents of the warning*/function tidy_warnings(){	global $db, $config;	$expire_date = time() - ($config['warnings_expire_days'] * 86400);	$warning_list = $user_list = array();	$sql = 'SELECT * FROM ' . WARNINGS_TABLE . "		WHERE warning_time < $expire_date";	$result = $db->sql_query($sql);	while ($row = $db->sql_fetchrow($result))	{		$warning_list[] = $row['warning_id'];		$user_list[$row['user_id']] = isset($user_list[$row['user_id']]) ? ++$user_list[$row['user_id']] : 1;	}	$db->sql_freeresult($result);	if (sizeof($warning_list))	{		$db->sql_transaction('begin');		$sql = 'DELETE FROM ' . WARNINGS_TABLE . '			WHERE ' . $db->sql_in_set('warning_id', $warning_list);		$db->sql_query($sql);		foreach ($user_list as $user_id => $value)		{			$sql = 'UPDATE ' . USERS_TABLE . " SET user_warnings = user_warnings - $value				WHERE user_id = $user_id";			$db->sql_query($sql);		}		$db->sql_transaction('commit');	}	set_config('warnings_last_gc', time(), true);}/*** Tidy database, doing some maintanance tasks*/function tidy_database(){	global $db;	// Here we check permission consistency	// Sometimes, it can happen permission tables having forums listed which do not exist	$sql = 'SELECT forum_id		FROM ' . FORUMS_TABLE;	$result = $db->sql_query($sql);	$forum_ids = array(0);	while ($row = $db->sql_fetchrow($result))	{		$forum_ids[] = $row['forum_id'];	}	$db->sql_freeresult($result);	// Delete those rows from the acl tables not having listed the forums above	$sql = 'DELETE FROM ' . ACL_GROUPS_TABLE . '		WHERE ' . $db->sql_in_set('forum_id', $forum_ids, true);	$db->sql_query($sql);	$sql = 'DELETE FROM ' . ACL_USERS_TABLE . '		WHERE ' . $db->sql_in_set('forum_id', $forum_ids, true);	$db->sql_query($sql);	set_config('database_last_gc', time(), true);}/*** Add permission language - this will make sure custom files will be included*/function add_permission_language(){	global $user, $phpEx;	// First of all, our own file. We need to include it as the first file because it presets all relevant variables.	$user->add_lang('acp/permissions_phpbb');	$files_to_add = array();	// Now search in acp and mods folder for permissions_ files.	foreach (array('acp/', 'mods/') as $path)	{		$dh = @opendir($user->lang_path . $user->lang_name . '/' . $path);		if ($dh)		{			while (($file = readdir($dh)) !== false)			{				if ($file !== 'permissions_phpbb.' . $phpEx && strpos($file, 'permissions_') === 0 && substr($file, -(strlen($phpEx) + 1)) === '.' . $phpEx)				{					$files_to_add[] = $path . substr($file, 0, -(strlen($phpEx) + 1));				}			}			closedir($dh);		}	}	if (!sizeof($files_to_add))	{		return false;	}	$user->add_lang($files_to_add);	return true;}/** * Obtains the latest version information * * @param bool $force_update Ignores cached data. Defaults to false. * @param bool $warn_fail Trigger a warning if obtaining the latest version information fails. Defaults to false. * @param int $ttl Cache version information for $ttl seconds. Defaults to 86400 (24 hours). * * @return string | false Version info on success, false on failure. */function obtain_latest_version_info($force_update = false, $warn_fail = false, $ttl = 86400){	global $cache;	$info = $cache->get('versioncheck');	if ($info === false || $force_update)	{		$errstr = '';		$errno = 0;		$info = get_remote_file('version.phpbb.com', '/phpbb',				((defined('PHPBB_QA')) ? '30x_qa.txt' : '30x.txt'), $errstr, $errno);		if ($info === false)		{			$cache->destroy('versioncheck');			if ($warn_fail)			{				trigger_error($errstr, E_USER_WARNING);			}			return false;		}		$cache->put('versioncheck', $info, $ttl);	}	return $info;}/** * Enables a particular flag in a bitfield column of a given table. * * @param string	$table_name		The table to update * @param string	$column_name	The column containing a bitfield to update * @param int		$flag			The binary flag which is OR-ed with the current column value * @param string	$sql_more		This string is attached to the sql query generated to update the table. * * @return void */function enable_bitfield_column_flag($table_name, $column_name, $flag, $sql_more = ''){	global $db;	$sql = 'UPDATE ' . $table_name . '		SET ' . $column_name . ' = ' . $db->sql_bit_or($column_name, $flag) . '		' . $sql_more;	$db->sql_query($sql);}?>
