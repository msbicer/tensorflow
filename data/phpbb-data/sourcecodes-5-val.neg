<?php return array(''=>'',''=>'');
<?php/**** LDAP auth plug-in for phpBB3** Authentication plug-ins is largely down to Sergey Kanareykin, our thanks to him.** @package login* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @ignore*/if (!defined('IN_PHPBB')){	exit;}/*** Connect to ldap server* Only allow changing authentication to ldap if we can connect to the ldap server* Called in acp_board while setting authentication plugins*/function init_ldap(){	global $config, $user;	if (!@extension_loaded('ldap'))	{		return $user->lang['LDAP_NO_LDAP_EXTENSION'];	}	$config['ldap_port'] = (int) $config['ldap_port'];	if ($config['ldap_port'])	{		$ldap = @ldap_connect($config['ldap_server'], $config['ldap_port']);	}	else	{		$ldap = @ldap_connect($config['ldap_server']);	}	if (!$ldap)	{		return $user->lang['LDAP_NO_SERVER_CONNECTION'];	}	@ldap_set_option($ldap, LDAP_OPT_PROTOCOL_VERSION, 3);	@ldap_set_option($ldap, LDAP_OPT_REFERRALS, 0);	if ($config['ldap_user'] || $config['ldap_password'])	{		if (!@ldap_bind($ldap, htmlspecialchars_decode($config['ldap_user']), htmlspecialchars_decode($config['ldap_password'])))		{			return $user->lang['LDAP_INCORRECT_USER_PASSWORD'];		}	}	// ldap_connect only checks whether the specified server is valid, so the connection might still fail	$search = @ldap_search(		$ldap,		htmlspecialchars_decode($config['ldap_base_dn']),		ldap_user_filter($user->data['username']),		(empty($config['ldap_email'])) ?			array(htmlspecialchars_decode($config['ldap_uid'])) :			array(htmlspecialchars_decode($config['ldap_uid']), htmlspecialchars_decode($config['ldap_email'])),		0,		1	);	if ($search === false)	{		return $user->lang['LDAP_SEARCH_FAILED'];	}	$result = @ldap_get_entries($ldap, $search);	@ldap_close($ldap);	if (!is_array($result) || sizeof($result) < 2)	{		return sprintf($user->lang['LDAP_NO_IDENTITY'], $user->data['username']);	}	if (!empty($config['ldap_email']) && !isset($result[0][htmlspecialchars_decode($config['ldap_email'])]))	{		return $user->lang['LDAP_NO_EMAIL'];	}	return false;}/*** Login function*/function login_ldap(&$username, &$password){	global $db, $config, $user;	// do not allow empty password	if (!$password)	{		return array(			'status'	=> LOGIN_ERROR_PASSWORD,			'error_msg'	=> 'NO_PASSWORD_SUPPLIED',			'user_row'	=> array('user_id' => ANONYMOUS),		);	}	if (!$username)	{		return array(			'status'	=> LOGIN_ERROR_USERNAME,			'error_msg'	=> 'LOGIN_ERROR_USERNAME',			'user_row'	=> array('user_id' => ANONYMOUS),		);	}	if (!@extension_loaded('ldap'))	{		return array(			'status'		=> LOGIN_ERROR_EXTERNAL_AUTH,			'error_msg'		=> 'LDAP_NO_LDAP_EXTENSION',			'user_row'		=> array('user_id' => ANONYMOUS),		);	}	$config['ldap_port'] = (int) $config['ldap_port'];	if ($config['ldap_port'])	{		$ldap = @ldap_connect($config['ldap_server'], $config['ldap_port']);	}	else	{		$ldap = @ldap_connect($config['ldap_server']);	}	if (!$ldap)	{		return array(			'status'		=> LOGIN_ERROR_EXTERNAL_AUTH,			'error_msg'		=> 'LDAP_NO_SERVER_CONNECTION',			'user_row'		=> array('user_id' => ANONYMOUS),		);	}	@ldap_set_option($ldap, LDAP_OPT_PROTOCOL_VERSION, 3);	@ldap_set_option($ldap, LDAP_OPT_REFERRALS, 0);	if ($config['ldap_user'] || $config['ldap_password'])	{		if (!@ldap_bind($ldap, htmlspecialchars_decode($config['ldap_user']), htmlspecialchars_decode($config['ldap_password'])))		{			return $user->lang['LDAP_NO_SERVER_CONNECTION'];		}	}	$search = @ldap_search(		$ldap,		htmlspecialchars_decode($config['ldap_base_dn']),		ldap_user_filter($username),		(empty($config['ldap_email'])) ?			array(htmlspecialchars_decode($config['ldap_uid'])) :			array(htmlspecialchars_decode($config['ldap_uid']), htmlspecialchars_decode($config['ldap_email'])),		0,		1	);	$ldap_result = @ldap_get_entries($ldap, $search);	if (is_array($ldap_result) && sizeof($ldap_result) > 1)	{		if (@ldap_bind($ldap, $ldap_result[0]['dn'], htmlspecialchars_decode($password)))		{			@ldap_close($ldap);			$sql ='SELECT user_id, username, user_password, user_passchg, user_email, user_type				FROM ' . USERS_TABLE . "				WHERE username_clean = '" . $db->sql_escape(utf8_clean_string($username)) . "'";			$result = $db->sql_query($sql);			$row = $db->sql_fetchrow($result);			$db->sql_freeresult($result);			if ($row)			{				unset($ldap_result);				// User inactive...				if ($row['user_type'] == USER_INACTIVE || $row['user_type'] == USER_IGNORE)				{					return array(						'status'		=> LOGIN_ERROR_ACTIVE,						'error_msg'		=> 'ACTIVE_ERROR',						'user_row'		=> $row,					);				}				// Successful login... set user_login_attempts to zero...				return array(					'status'		=> LOGIN_SUCCESS,					'error_msg'		=> false,					'user_row'		=> $row,				);			}			else			{				// retrieve default group id				$sql = 'SELECT group_id					FROM ' . GROUPS_TABLE . "					WHERE group_name = '" . $db->sql_escape('REGISTERED') . "'						AND group_type = " . GROUP_SPECIAL;				$result = $db->sql_query($sql);				$row = $db->sql_fetchrow($result);				$db->sql_freeresult($result);				if (!$row)				{					trigger_error('NO_GROUP');				}				// generate user account data				$ldap_user_row = array(					'username'		=> $username,					'user_password'	=> phpbb_hash($password),					'user_email'	=> (!empty($config['ldap_email'])) ? utf8_htmlspecialchars($ldap_result[0][htmlspecialchars_decode($config['ldap_email'])][0]) : '',					'group_id'		=> (int) $row['group_id'],					'user_type'		=> USER_NORMAL,					'user_ip'		=> $user->ip,					'user_new'		=> ($config['new_member_post_limit']) ? 1 : 0,				);				unset($ldap_result);				// this is the user's first login so create an empty profile				return array(					'status'		=> LOGIN_SUCCESS_CREATE_PROFILE,					'error_msg'		=> false,					'user_row'		=> $ldap_user_row,				);			}		}		else		{			unset($ldap_result);			@ldap_close($ldap);			// Give status about wrong password...			return array(				'status'		=> LOGIN_ERROR_PASSWORD,				'error_msg'		=> 'LOGIN_ERROR_PASSWORD',				'user_row'		=> array('user_id' => ANONYMOUS),			);		}	}	@ldap_close($ldap);	return array(		'status'	=> LOGIN_ERROR_USERNAME,		'error_msg'	=> 'LOGIN_ERROR_USERNAME',		'user_row'	=> array('user_id' => ANONYMOUS),	);}/*** Generates a filter string for ldap_search to find a user** @param	$username	string	Username identifying the searched user** @return				string	A filter string for ldap_search*/function ldap_user_filter($username){	global $config;	$filter = '(' . $config['ldap_uid'] . '=' . ldap_escape(htmlspecialchars_decode($username)) . ')';	if ($config['ldap_user_filter'])	{		$_filter = ($config['ldap_user_filter'][0] == '(' && substr($config['ldap_user_filter'], -1) == ')') ? $config['ldap_user_filter'] : "({$config['ldap_user_filter']})";		$filter = "(&{$filter}{$_filter})";	}	return $filter;}/*** Escapes an LDAP AttributeValue*/function ldap_escape($string){	return str_replace(array('*', '\\', '(', ')'), array('\\*', '\\\\', '\\(', '\\)'), $string);}/*** This function is used to output any required fields in the authentication* admin panel. It also defines any required configuration table fields.*/function acp_ldap(&$new){	global $user;	$tpl = '	<dl>		<dt><label for="ldap_server">' . $user->lang['LDAP_SERVER'] . ':</label><br /><span>' . $user->lang['LDAP_SERVER_EXPLAIN'] . '</span></dt>		<dd><input type="text" id="ldap_server" size="40" name="config[ldap_server]" value="' . $new['ldap_server'] . '" /></dd>	</dl>	<dl>		<dt><label for="ldap_port">' . $user->lang['LDAP_PORT'] . ':</label><br /><span>' . $user->lang['LDAP_PORT_EXPLAIN'] . '</span></dt>		<dd><input type="text" id="ldap_port" size="40" name="config[ldap_port]" value="' . $new['ldap_port'] . '" /></dd>	</dl>	<dl>		<dt><label for="ldap_dn">' . $user->lang['LDAP_DN'] . ':</label><br /><span>' . $user->lang['LDAP_DN_EXPLAIN'] . '</span></dt>		<dd><input type="text" id="ldap_dn" size="40" name="config[ldap_base_dn]" value="' . $new['ldap_base_dn'] . '" /></dd>	</dl>	<dl>		<dt><label for="ldap_uid">' . $user->lang['LDAP_UID'] . ':</label><br /><span>' . $user->lang['LDAP_UID_EXPLAIN'] . '</span></dt>		<dd><input type="text" id="ldap_uid" size="40" name="config[ldap_uid]" value="' . $new['ldap_uid'] . '" /></dd>	</dl>	<dl>		<dt><label for="ldap_user_filter">' . $user->lang['LDAP_USER_FILTER'] . ':</label><br /><span>' . $user->lang['LDAP_USER_FILTER_EXPLAIN'] . '</span></dt>		<dd><input type="text" id="ldap_user_filter" size="40" name="config[ldap_user_filter]" value="' . $new['ldap_user_filter'] . '" /></dd>	</dl>	<dl>		<dt><label for="ldap_email">' . $user->lang['LDAP_EMAIL'] . ':</label><br /><span>' . $user->lang['LDAP_EMAIL_EXPLAIN'] . '</span></dt>		<dd><input type="text" id="ldap_email" size="40" name="config[ldap_email]" value="' . $new['ldap_email'] . '" /></dd>	</dl>	<dl>		<dt><label for="ldap_user">' . $user->lang['LDAP_USER'] . ':</label><br /><span>' . $user->lang['LDAP_USER_EXPLAIN'] . '</span></dt>		<dd><input type="text" id="ldap_user" size="40" name="config[ldap_user]" value="' . $new['ldap_user'] . '" /></dd>	</dl>	<dl>		<dt><label for="ldap_password">' . $user->lang['LDAP_PASSWORD'] . ':</label><br /><span>' . $user->lang['LDAP_PASSWORD_EXPLAIN'] . '</span></dt>		<dd><input type="password" id="ldap_password" size="40" name="config[ldap_password]" value="' . $new['ldap_password'] . '" autocomplete="off" /></dd>	</dl>	';	// These are fields required in the config table	return array(		'tpl'		=> $tpl,		'config'	=> array('ldap_server', 'ldap_port', 'ldap_base_dn', 'ldap_uid', 'ldap_user_filter', 'ldap_email', 'ldap_user', 'ldap_password')	);}?>
<?php/**** @package phpBB3* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//***//*** @ignore*/define('IN_PHPBB', true);$phpbb_root_path = (defined('PHPBB_ROOT_PATH')) ? PHPBB_ROOT_PATH : './';$phpEx = substr(strrchr(__FILE__, '.'), 1);include($phpbb_root_path . 'common.' . $phpEx);include($phpbb_root_path . 'includes/functions_display.' . $phpEx);// Start session management$user->session_begin();$auth->acl($user->data);$user->setup('viewforum');display_forums('', $config['load_moderators']);// Set some stats, get posts count from forums data if we... hum... retrieve all forums data$total_posts	= $config['num_posts'];$total_topics	= $config['num_topics'];$total_users	= $config['num_users'];$l_total_user_s = ($total_users == 0) ? 'TOTAL_USERS_ZERO' : 'TOTAL_USERS_OTHER';$l_total_post_s = ($total_posts == 0) ? 'TOTAL_POSTS_ZERO' : 'TOTAL_POSTS_OTHER';$l_total_topic_s = ($total_topics == 0) ? 'TOTAL_TOPICS_ZERO' : 'TOTAL_TOPICS_OTHER';// Grab group details for legend displayif ($auth->acl_gets('a_group', 'a_groupadd', 'a_groupdel')){	$sql = 'SELECT group_id, group_name, group_colour, group_type		FROM ' . GROUPS_TABLE . '		WHERE group_legend = 1		ORDER BY group_name ASC';}else{	$sql = 'SELECT g.group_id, g.group_name, g.group_colour, g.group_type		FROM ' . GROUPS_TABLE . ' g		LEFT JOIN ' . USER_GROUP_TABLE . ' ug			ON (				g.group_id = ug.group_id				AND ug.user_id = ' . $user->data['user_id'] . '				AND ug.user_pending = 0			)		WHERE g.group_legend = 1			AND (g.group_type <> ' . GROUP_HIDDEN . ' OR ug.user_id = ' . $user->data['user_id'] . ')		ORDER BY g.group_name ASC';}$result = $db->sql_query($sql);$legend = array();while ($row = $db->sql_fetchrow($result)){	$colour_text = ($row['group_colour']) ? ' style="color:#' . $row['group_colour'] . '"' : '';	$group_name = ($row['group_type'] == GROUP_SPECIAL) ? $user->lang['G_' . $row['group_name']] : $row['group_name'];	if ($row['group_name'] == 'BOTS' || ($user->data['user_id'] != ANONYMOUS && !$auth->acl_get('u_viewprofile')))	{		$legend[] = '<span' . $colour_text . '>' . $group_name . '</span>';	}	else	{		$legend[] = '<a' . $colour_text . ' href="' . append_sid("{$phpbb_root_path}memberlist.$phpEx", 'mode=group&amp;g=' . $row['group_id']) . '">' . $group_name . '</a>';	}}$db->sql_freeresult($result);$legend = implode(', ', $legend);// Generate birthday list if required ...$birthday_list = '';if ($config['load_birthdays'] && $config['allow_birthdays'] && $auth->acl_gets('u_viewprofile', 'a_user', 'a_useradd', 'a_userdel')){	$now = phpbb_gmgetdate(time() + $user->timezone + $user->dst);	// Display birthdays of 29th february on 28th february in non-leap-years	$leap_year_birthdays = '';	if ($now['mday'] == 28 && $now['mon'] == 2 && !$user->format_date(time(), 'L'))	{		$leap_year_birthdays = " OR user_birthday LIKE '" . $db->sql_escape(sprintf('%2d-%2d-', 29, 2)) . "%'";	}	$sql = 'SELECT u.user_id, u.username, u.user_colour, u.user_birthday		FROM ' . USERS_TABLE . ' u		LEFT JOIN ' . BANLIST_TABLE . " b ON (u.user_id = b.ban_userid)		WHERE (b.ban_id IS NULL			OR b.ban_exclude = 1)			AND (u.user_birthday LIKE '" . $db->sql_escape(sprintf('%2d-%2d-', $now['mday'], $now['mon'])) . "%' $leap_year_birthdays)			AND u.user_type IN (" . USER_NORMAL . ', ' . USER_FOUNDER . ')';	$result = $db->sql_query($sql);	while ($row = $db->sql_fetchrow($result))	{		$birthday_list .= (($birthday_list != '') ? ', ' : '') . get_username_string('full', $row['user_id'], $row['username'], $row['user_colour']);		if ($age = (int) substr($row['user_birthday'], -4))		{			$birthday_list .= ' (' . max(0, $now['year'] - $age) . ')';		}	}	$db->sql_freeresult($result);}// Assign index specific vars$template->assign_vars(array(	'TOTAL_POSTS'	=> sprintf($user->lang[$l_total_post_s], $total_posts),	'TOTAL_TOPICS'	=> sprintf($user->lang[$l_total_topic_s], $total_topics),	'TOTAL_USERS'	=> sprintf($user->lang[$l_total_user_s], $total_users),	'NEWEST_USER'	=> sprintf($user->lang['NEWEST_USER'], get_username_string('full', $config['newest_user_id'], $config['newest_username'], $config['newest_user_colour'])),	'LEGEND'		=> $legend,	'BIRTHDAY_LIST'	=> $birthday_list,	'FORUM_IMG'				=> $user->img('forum_read', 'NO_UNREAD_POSTS'),	'FORUM_UNREAD_IMG'			=> $user->img('forum_unread', 'UNREAD_POSTS'),	'FORUM_LOCKED_IMG'		=> $user->img('forum_read_locked', 'NO_UNREAD_POSTS_LOCKED'),	'FORUM_UNREAD_LOCKED_IMG'	=> $user->img('forum_unread_locked', 'UNREAD_POSTS_LOCKED'),	'S_LOGIN_ACTION'			=> append_sid("{$phpbb_root_path}ucp.$phpEx", 'mode=login'),	'S_DISPLAY_BIRTHDAY_LIST'	=> ($config['load_birthdays']) ? true : false,	'U_MARK_FORUMS'		=> ($user->data['is_registered'] || $config['load_anon_lastread']) ? append_sid("{$phpbb_root_path}index.$phpEx", 'hash=' . generate_link_hash('global') . '&amp;mark=forums') : '',	'U_MCP'				=> ($auth->acl_get('m_') || $auth->acl_getf_global('m_')) ? append_sid("{$phpbb_root_path}mcp.$phpEx", 'i=main&amp;mode=front', true, $user->session_id) : ''));// Output pagepage_header($user->lang['INDEX']);$template->set_filenames(array(	'body' => 'index_body.html'));page_footer();?>
<?php/**** @package acp* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @package module_install*/class acp_attachments_info{	function module()	{		return array(			'filename'	=> 'acp_attachments',			'title'		=> 'ACP_ATTACHMENTS',			'version'	=> '1.0.0',			'modes'		=> array(				'attach'		=> array('title' => 'ACP_ATTACHMENT_SETTINGS', 'auth' => 'acl_a_attach', 'cat' => array('ACP_BOARD_CONFIGURATION', 'ACP_ATTACHMENTS')),				'extensions'	=> array('title' => 'ACP_MANAGE_EXTENSIONS', 'auth' => 'acl_a_attach', 'cat' => array('ACP_ATTACHMENTS')),				'ext_groups'	=> array('title' => 'ACP_EXTENSION_GROUPS', 'auth' => 'acl_a_attach', 'cat' => array('ACP_ATTACHMENTS')),				'orphan'		=> array('title' => 'ACP_ORPHAN_ATTACHMENTS', 'auth' => 'acl_a_attach', 'cat' => array('ACP_ATTACHMENTS'))			),		);	}	function install()	{	}	function uninstall()	{	}}?>
<?php return array(''=>'');
<?php/**** @package VC* @version $Id$* @copyright (c) 2006 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @ignore*/if (!defined('IN_PHPBB')){	exit;}/*** Original Author - Xore (Robert Hetzler)* With contributions from Neothermic** @package VC*/class captcha{	var $width = 360;	var $height = 96;	/**	* Create the image containing $code with a seed of $seed	*/	function execute($code, $seed)	{		global $config;				mt_srand($seed);		// Create image		$img = imagecreatetruecolor($this->width, $this->height);		// Generate colours		$colour = new colour_manager($img, array(			'random'	=> true,			'min_value'	=> 60,		), 'hsv');		$scheme = $colour->colour_scheme('background', false);		$scheme = $colour->mono_range($scheme, 10, false);		shuffle($scheme);		$bg_colours = array_splice($scheme, mt_rand(6, 12));		// Generate code characters		$characters = $sizes = $bounding_boxes = $noise = array();		$width_avail = $this->width - 15;		$code_len = strlen($code);		$captcha_bitmaps = $this->captcha_bitmaps();		for ($i = 0; $i < $code_len; ++$i)		{			$characters[$i] = new char_cube3d($captcha_bitmaps, $code[$i]);			list($min, $max) = $characters[$i]->range();			$sizes[$i] = mt_rand($min, $max);			$box = $characters[$i]->dimensions($sizes[$i]);			$width_avail -= ($box[2] - $box[0]);			$bounding_boxes[$i] = $box;		} 		// Redistribute leftover x-space		$offset = array();		for ($i = 0; $i < $code_len; ++$i)		{			$denom = ($code_len - $i);			$denom = max(1.3, $denom);			$offset[$i] = phpbb_mt_rand(0, (int) round((1.5 * $width_avail) / $denom));			$width_avail -= $offset[$i];		}		if ($config['captcha_gd_x_grid'])		{			$grid = (int) $config['captcha_gd_x_grid'];			for ($y = 0; $y < $this->height; $y += mt_rand($grid - 2, $grid + 2))			{				$current_colour = $scheme[array_rand($scheme)];				imageline($img, mt_rand(0,4), mt_rand($y - 3, $y), mt_rand($this->width - 5, $this->width), mt_rand($y - 3, $y), $current_colour);			}		}		if ($config['captcha_gd_y_grid'])		{			$grid = (int) $config['captcha_gd_y_grid'];			for ($x = 0; $x < $this->width; $x += mt_rand($grid - 2, $grid + 2))			{				$current_colour = $scheme[array_rand($scheme)];				imagedashedline($img, mt_rand($x -3, $x + 3), mt_rand(0, 4), mt_rand($x -3, $x + 3), mt_rand($this->height - 5, $this->height), $current_colour);			}		}		if ($config['captcha_gd_wave'] && ($config['captcha_gd_y_grid'] || $config['captcha_gd_y_grid']))		{			$this->wave($img);		}						if ($config['captcha_gd_3d_noise'])		{			$xoffset = mt_rand(0,9);			$noise_bitmaps = $this->captcha_noise_bg_bitmaps();			for ($i = 0; $i < $code_len; ++$i)			{				$noise[$i] = new char_cube3d($noise_bitmaps, mt_rand(1, sizeof($noise_bitmaps['data'])));				list($min, $max) = $noise[$i]->range();				//$box = $noise[$i]->dimensions($sizes[$i]);			}			$xoffset = 0;			for ($i = 0; $i < $code_len; ++$i)			{				$dimm = $bounding_boxes[$i];				$xoffset += ($offset[$i] - $dimm[0]);				$yoffset = mt_rand(-$dimm[1], $this->height - $dimm[3]);	 				$noise[$i]->drawchar($sizes[$i], $xoffset, $yoffset, $img, $colour->get_resource('background'), $scheme);				$xoffset += $dimm[2];			}		}		$xoffset = 5;		for ($i = 0; $i < $code_len; ++$i)		{			$dimm = $bounding_boxes[$i];			$xoffset += ($offset[$i] - $dimm[0]);			$yoffset = mt_rand(-$dimm[1], $this->height - $dimm[3]);			$characters[$i]->drawchar($sizes[$i], $xoffset, $yoffset, $img, $colour->get_resource('background'), $scheme);			$xoffset += $dimm[2];		}		if ($config['captcha_gd_wave'])		{			$this->wave($img);		}		if ($config['captcha_gd_foreground_noise'])		{			$this->noise_line($img, 0, 0, $this->width, $this->height, $colour->get_resource('background'), $scheme, $bg_colours);		}		// Send image		header('Content-Type: image/png');		header('Cache-control: no-cache, no-store');		imagepng($img);		imagedestroy($img);	}	/**	* Sinus	*/	function wave($img)	{		global $config;				$period_x = mt_rand(12,18);		$period_y = mt_rand(7,14);		$amp_x = mt_rand(5,10);		$amp_y = mt_rand(2,4); 		$socket = mt_rand(0,100);				$dampen_x = mt_rand($this->width/5, $this->width/2);		$dampen_y = mt_rand($this->height/5, $this->height/2);		$direction_x = (mt_rand (0, 1));		$direction_y = (mt_rand (0, 1));		for ($i = 0; $i < $this->width; $i++)		{			$dir = ($direction_x) ? $i : ($this->width - $i);			imagecopy($img, $img, $i-1, sin($socket+ $i/($period_x + $dir/$dampen_x)) * $amp_x, $i, 0, 1, $this->height);		}		$socket = mt_rand(0,100);		for ($i = 0; $i < $this->height; $i++)		{			$dir = ($direction_y) ? $i : ($this->height - $i);			imagecopy($img, $img ,sin($socket + $i/($period_y + ($dir)/$dampen_y)) * $amp_y, $i-1, 0, $i, $this->width, 1);		}		return $img;	}		/**	* Noise line	*/	function noise_line($img, $min_x, $min_y, $max_x, $max_y, $bg, $font, $non_font)	{		imagesetthickness($img, 2);		$x1 = $min_x;		$x2 = $max_x;		$y1 = $min_y;		$y2 = $min_y;		do		{			$line = array_merge(				array_fill(0, mt_rand(30, 60), $non_font[array_rand($non_font)]),				array_fill(0, mt_rand(30, 60), $bg)			);			imagesetstyle($img, $line);			imageline($img, $x1, $y1, $x2, $y2, IMG_COLOR_STYLED);			$y1 += mt_rand(12, 35);			$y2 += mt_rand(12, 35);		}		while ($y1 < $max_y && $y2 < $max_y);		$x1 = $min_x;		$x2 = $min_x;		$y1 = $min_y;		$y2 = $max_y;		do		{			$line = array_merge(				array_fill(0, mt_rand(30, 60), $non_font[array_rand($non_font)]),				array_fill(0, mt_rand(30, 60), $bg)			);			imagesetstyle($img, $line);			imageline($img, $x1, $y1, $x2, $y2, IMG_COLOR_STYLED);			$x1 += mt_rand(20, 35);			$x2 += mt_rand(20, 35);		}		while ($x1 < $max_x && $x2 < $max_x);		imagesetthickness($img, 1);	}	function captcha_noise_bg_bitmaps()	{				return array(			'width'		=> 15,			'height'	=> 5,			'data'		=> array(			1 => array(				array(1,0,0,0,1,0,0,0,0,0,0,0,0,0,0),				array(1,0,0,0,0,1,0,0,0,0,0,0,0,0,0),				array(1,0,0,0,0,0,0,0,0,0,0,0,0,0,0),				array(1,0,0,0,0,1,0,0,0,0,0,0,1,0,0),				array(1,0,0,0,0,0,1,0,0,0,0,1,0,0,0),			),			2 => array(				array(1,1,mt_rand(0,1),1,0,1,1,1,1,0,0,0,0,0,0),				array(0,0,0,0,0,0,0,1,0,0,0,0,0,0,0),				array(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),				array(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),				array(0,0,0,0,0,0,0,0,0,1,1,0,1,1,1),			),			3 => array(				array(1,0,0,0,0,0,0,0,0,0,0,0,0,0,1),				array(1,0,0,0,0,0,0,0,0,0,0,0,0,1,0),				array(0,0,0,0,1,0,0,0,0,0,0,0,0,0,1),				array(1,0,0,0,0,0,0,0,0,0,0,0,0,1,0),				array(1,0,0,0,0,0,0,0,0,0,0,0,0,0,1),			),			4 => array(				array(1,0,1,0,1,0,0,1,1,0,0,0,0,0,0),				array(0,0,0,0,0,0,0,1,0,0,0,0,0,0,0),				array(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),				array(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),				array(1,0,1,0,0,0,0,0,0,0,0,0,0,0,0),			),			5 => array(				array(1,1,1,1,0,0,0,1,1,1,0,0,1,0,1),				array(0,0,0,0,0,0,0,1,0,0,0,0,0,0,0),				array(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),				array(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),				array(1,0,1,0,0,0,0,0,0,0,0,0,0,0,0),			),			6 => array(				array(mt_rand(0,1),mt_rand(0,1),mt_rand(0,1),mt_rand(0,1),mt_rand(0,1),0,mt_rand(0,1),mt_rand(0,1),mt_rand(0,1),mt_rand(0,1),mt_rand(0,1),0,mt_rand(0,1),mt_rand(0,1),mt_rand(0,1)),				array(0,0,0,0,0,0,0,mt_rand(0,1),0,0,0,0,0,0,0),				array(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),				array(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),				array(mt_rand(0,1),0,mt_rand(0,1),0,0,0,0,0,0,0,0,0,0,0,0),			),			7 => array(				array(0,0,0,0,0,0,0,0,0,0,1,1,0,1,1),				array(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),				array(0,0,1,1,0,0,0,1,0,0,0,0,0,0,0),				array(0,1,0,0,0,1,0,0,0,0,0,0,0,0,0),				array(1,0,0,0,0,0,0,0,0,0,0,0,0,0,0),			),		));	}		/**	* Return bitmaps	*/	function captcha_bitmaps()	{		global $config;				$chars = array(			'A'	=>	array(						array(							array(0,0,0,0,1,0,0,0,0),							array(0,0,0,1,0,1,0,0,0),							array(0,0,0,1,0,1,0,0,0),							array(0,0,0,1,0,1,0,0,0),							array(0,0,1,0,0,0,1,0,0),							array(0,0,1,0,0,0,1,0,0),							array(0,0,1,0,0,0,1,0,0),							array(0,1,0,0,0,0,0,1,0),							array(0,1,0,0,0,0,0,1,0),							array(0,1,1,1,1,1,1,1,0),							array(0,1,0,0,0,0,0,1,0),							array(1,0,0,0,0,0,0,0,1),							array(1,0,0,0,0,0,0,0,1),							array(1,0,0,0,0,0,0,0,1),							array(1,0,0,0,0,0,0,0,1),						),						array(							array(0,0,0,0,0,0,0,0,0),							array(0,0,0,0,0,0,0,0,0),							array(0,0,0,0,1,0,0,0,0),							array(0,0,0,1,0,1,0,0,0),							array(0,0,1,1,0,1,1,0,0),							array(0,0,1,0,0,0,1,0,0),							array(0,1,0,0,0,0,0,1,0),							array(0,1,0,0,0,0,0,1,0),							array(0,1,1,1,1,1,1,1,0),							array(0,1,0,0,0,0,0,1,0),							array(0,1,0,0,0,0,0,1,0),							array(0,1,0,0,0,0,0,1,0),							array(0,1,0,0,0,0,0,1,0),							array(0,1,0,0,0,0,0,1,0),							array(1,1,1,0,0,0,1,1,1),						),						array(							array(0,0,0,0,0,0,0,0,0),							array(0,0,0,0,0,0,0,0,0),							array(0,0,0,0,0,0,0,0,0),							array(0,0,0,0,0,0,0,0,0),							array(0,0,1,1,1,1,1,0,0),							array(0,1,1,0,0,0,1,1,0),							array(1,1,0,0,0,0,0,1,1),							array(1,0,0,0,0,0,0,0,1),							array(0,0,0,0,0,0,0,1,1),							array(0,0,0,0,0,1,1,1,1),							array(0,0,0,1,1,1,0,0,1),							array(0,1,1,1,0,0,0,0,1),							array(1,0,0,0,0,0,0,0,1),							array(1,1,0,0,0,0,1,1,1),							array(0,1,1,1,1,1,1,0,1),						),					),		'B'	=>		array(						array(							array(1,1,1,1,1,1,1,0,0),							array(1,0,0,0,0,0,0,1,0),							array(1,0,0,0,0,0,0,0,1),							array(1,0,0,0,0,0,0,0,1),							array(1,0,0,0,0,0,0,0,1),							array(1,0,0,0,0,0,0,0,1),							array(1,0,0,0,0,0,0,1,0),							array(1,1,1,1,1,1,1,0,0),							array(1,0,0,0,0,0,0,1,0),							array(1,0,0,0,0,0,0,0,1),							array(1,0,0,0,0,0,0,0,1),							array(1,0,0,0,0,0,0,0,1),							array(1,0,0,0,0,0,0,0,1),							array(1,0,0,0,0,0,0,1,0),							array(1,1,1,1,1,1,1,0,0),						),						array(							array(1,1,1,1,1,1,1,0,0),							array(0,1,0,0,0,0,0,1,0),							array(0,1,0,0,0,0,0,0,1),							array(0,1,0,0,0,0,0,0,1),							array(0,1,0,0,0,0,0,0,1),							array(0,1,0,0,0,0,0,0,1),							array(0,1,0,0,0,0,0,1,0),							array(0,1,1,1,1,1,1,0,0),							array(0,1,0,0,0,0,0,1,0),							array(0,1,0,0,0,0,0,0,1),							array(0,1,0,0,0,0,0,0,1),							array(0,1,0,0,0,0,0,0,1),							array(0,1,0,0,0,0,0,0,1),							array(0,1,0,0,0,0,0,1,0),							array(1,1,1,1,1,1,1,0,0),						),						array(							array(0,1,0,0,0,0,0,0,0),							array(0,1,0,0,0,0,0,0,0),							array(0,1,0,0,0,0,0,0,0),							array(0,1,0,0,0,0,0,0,0),							array(0,1,0,0,0,0,0,0,0),							array(0,1,0,0,0,0,0,0,0),							array(0,1,0,0,0,0,0,0,0),							array(0,1,1,1,1,1,1,0,0),							array(0,1,0,0,0,0,0,1,0),							array(0,1,0,0,0,0,0,0,1),							array(0,1,0,0,0,0,0,0,1),							array(0,1,0,0,0,0,0,0,1),							array(0,1,0,0,0,0,0,0,1),							array(0,1,0,0,0,0,0,1,0),							array(0,1,1,1,1,1,1,0,0),						),					),		'C'	=>		array(						array(							array(0,0,1,1,1,1,1,0,0),							array(0,1,0,0,0,0,0,1,0),							array(1,0,0,0,0,0,0,0,1),							array(1,0,0,0,0,0,0,0,1),							array(1,0,0,0,0,0,0,0,0),							array(1,0,0,0,0,0,0,0,0),							array(1,0,0,0,0,0,0,0,0),							array(1,0,0,0,0,0,0,0,0),							array(1,0,0,0,0,0,0,0,0),							array(1,0,0,0,0,0,0,0,0),							array(1,0,0,0,0,0,0,0,0),							array(1,0,0,0,0,0,0,0,1),							array(1,0,0,0,0,0,0,0,1),							array(0,1,0,0,0,0,0,1,0),							array(0,0,1,1,1,1,1,0,0),						),						array(							array(0,0,1,1,1,1,1,0,1),							array(0,1,0,0,0,0,0,1,1),							array(1,0,0,0,0,0,0,0,1),							array(1,0,0,0,0,0,0,0,1),							array(1,0,0,0,0,0,0,0,0),							array(1,0,0,0,0,0,0,0,0),							array(1,0,0,0,0,0,0,0,0),							array(1,0,0,0,0,0,0,0,0),							array(1,0,0,0,0,0,0,0,0),							array(1,0,0,0,0,0,0,0,0),							array(1,0,0,0,0,0,0,0,0),							array(1,0,0,0,0,0,0,0,1),							array(1,0,0,0,0,0,0,0,1),							array(0,1,0,0,0,0,0,1,1),							array(0,0,1,1,1,1,1,0,1),						),					),		'D'	=>		array(						array(							array(1,1,1,1,1,1,1,0,0),							array(1,0,0,0,0,0,0,1,0),							array(1,0,0,0,0,0,0,0,1),							array(1,0,0,0,0,0,0,0,1),							array(1,0,0,0,0,0,0,0,1),							array(1,0,0,0,0,0,0,0,1),							array(1,0,0,0,0,0,0,0,1),							array(1,0,0,0,0,0,0,0,1),							array(1,0,0,0,0,0,0,0,1),							array(1,0,0,0,0,0,0,0,1),							array(1,0,0,0,0,0,0,0,1),							array(1,0,0,0,0,0,0,0,1),							array(1,0,0,0,0,0,0,0,1),							array(1,0,0,0,0,0,0,1,0),							array(1,1,1,1,1,1,1,0,0),						),						array(							array(1,1,1,1,1,1,1,0,0),							array(0,1,0,0,0,0,0,1,0),							array(0,1,0,0,0,0,0,0,1),							array(0,1,0,0,0,0,0,0,1),							array(0,1,0,0,0,0,0,0,1),							array(0,1,0,0,0,0,0,0,1),							array(0,1,0,0,0,0,0,0,1),							array(0,1,0,0,0,0,0,0,1),							array(0,1,0,0,0,0,0,0,1),							array(0,1,0,0,0,0,0,0,1),							array(0,1,0,0,0,0,0,0,1),							array(0,1,0,0,0,0,0,0,1),							array(0,1,0,0,0,0,0,0,1),							array(0,1,0,0,0,0,0,1,0),							array(1,1,1,1,1,1,1,0,0),						),						array(							array(0,0,0,0,0,0,0,0,1),							array(0,0,0,0,0,0,0,0,1),							array(0,0,0,0,0,0,0,0,1),							array(0,0,0,0,0,0,0,0,1),							array(0,0,0,0,0,0,0,0,1),							array(0,0,0,0,0,0,0,0,1),							array(0,0,0,0,0,0,0,0,1),							array(0,0,1,1,1,1,1,0,1),							array(0,1,1,0,0,0,1,1,1),							array(0,1,0,0,0,0,0,0,1),							array(0,1,0,0,0,0,0,0,1),							array(0,1,0,0,0,0,0,0,1),							array(0,1,0,0,0,0,0,0,1),							array(0,1,1,0,0,0,1,1,1),							array(0,0,1,1,1,1,1,0,1),						),					),		'E'	=>		array(						array(							array(1,1,1,1,1,1,1,1,1),							array(1,0,0,0,0,0,0,0,0),							array(1,0,0,0,0,0,0,0,0),							array(1,0,0,0,0,0,0,0,0),							array(1,0,0,0,0,0,0,0,0),							array(1,0,0,0,0,0,0,0,0),							array(1,0,0,0,0,0,0,0,0),							array(1,1,1,1,1,1,1,1,0),							array(1,0,0,0,0,0,0,0,0),							array(1,0,0,0,0,0,0,0,0),							array(1,0,0,0,0,0,0,0,0),							array(1,0,0,0,0,0,0,0,0),							array(1,0,0,0,0,0,0,0,0),							array(1,0,0,0,0,0,0,0,0),							array(1,1,1,1,1,1,1,1,1),						),						array(							array(1,1,1,1,1,1,1,1,1),							array(1,0,0,0,0,0,0,0,1),							array(1,0,0,0,0,0,0,0,0),							array(1,0,0,0,0,0,0,0,0),							array(1,0,0,0,0,0,0,0,0),							array(1,0,0,0,0,0,0,0,0),							array(1,0,0,0,0,0,0,0,0),							array(1,1,1,1,1,1,1,0,0),							array(1,0,0,0,0,0,0,0,0),							array(1,0,0,0,0,0,0,0,0),							array(1,0,0,0,0,0,0,0,0),							array(1,0,0,0,0,0,0,0,0),							array(1,0,0,0,0,0,0,0,0),							array(1,0,0,0,0,0,0,0,1),							array(1,1,1,1,1,1,1,1,1),						),						array(							array(0,0,0,0,0,0,0,0,0),							array(0,0,0,0,0,0,0,0,0),							array(0,0,0,0,0,0,0,0,0),							array(0,0,0,0,0,0,0,0,0),							array(0,0,0,0,0,0,0,0,0),							array(0,0,0,0,0,0,0,0,0),							array(0,0,0,0,0,0,0,0,0),							array(0,0,1,1,1,1,1,0,0),							array(0,1,1,0,0,0,1,1,0),							array(1,1,0,0,0,0,0,1,1),							array(1,1,1,1,1,1,1,1,1),							array(1,0,0,0,0,0,0,0,0),							array(1,0,0,0,0,0,0,0,1),							array(1,1,0,0,0,0,0,1,1),							array(0,1,1,1,1,1,1,1,0),						),					),		'F'	=>		array(						array(							array(1,1,1,1,1,1,1,1,1),							array(1,0,0,0,0,0,0,0,0),							array(1,0,0,0,0,0,0,0,0),							array(1,0,0,0,0,0,0,0,0),							array(1,0,0,0,0,0,0,0,0),							array(1,0,0,0,0,0,0,0,0),							array(1,0,0,0,0,0,0,0,0),							array(1,1,1,1,1,1,1,0,0),							array(1,0,0,0,0,0,0,0,0),							array(1,0,0,0,0,0,0,0,0),							array(1,0,0,0,0,0,0,0,0),							array(1,0,0,0,0,0,0,0,0),							array(1,0,0,0,0,0,0,0,0),							array(1,0,0,0,0,0,0,0,0),							array(1,0,0,0,0,0,0,0,0),						),						array(							array(0,1,1,1,1,1,1,1,1),							array(0,1,0,0,0,0,0,0,1),							array(0,1,0,0,0,0,0,0,0),							array(0,1,0,0,0,0,0,0,0),							array(0,1,0,0,0,0,0,0,0),							array(0,1,0,0,0,0,0,0,0),							array(0,1,0,0,0,0,0,0,0),							array(0,1,1,1,1,1,1,0,0),							array(0,1,0,0,0,0,0,0,0),							array(0,1,0,0,0,0,0,0,0),							array(0,1,0,0,0,0,0,0,0),							array(0,1,0,0,0,0,0,0,0),							array(0,1,0,0,0,0,0,0,0),							array(0,1,0,0,0,0,0,0,0),							array(1,1,1,0,0,0,0,0,0),						),						array(							array(0,0,0,1,1,0,0,0,0),							array(0,0,1,1,0,0,0,0,0),							array(0,1,1,0,0,0,0,0,0),							array(0,1,0,0,0,0,0,0,0),							array(0,1,0,0,0,0,0,0,0),							array(1,1,1,1,0,0,0,0,0),							array(0,1,0,0,0,0,0,0,0),							array(0,1,0,0,0,0,0,0,0),							array(0,1,0,0,0,0,0,0,0),							array(0,1,0,0,0,0,0,0,0),							array(0,1,0,0,0,0,0,0,0),							array(0,1,0,0,0,0,0,0,0),							array(0,1,0,0,0,0,0,0,0),							array(0,1,0,0,0,0,0,0,0),							array(0,1,0,0,0,0,0,0,0),						),					),		'G'	=>		array(						array(							array(0,0,1,1,1,1,1,0,0),							array(0,1,0,0,0,0,0,1,0),							array(1,0,0,0,0,0,0,0,1),							array(1,0,0,0,0,0,0,0,0),							array(1,0,0,0,0,0,0,0,0),							array(1,0,0,0,0,0,0,0,0),							array(1,0,0,0,0,0,0,0,0),							array(1,0,0,0,0,0,0,0,0),							array(1,0,0,0,0,0,1,1,1),							array(1,0,0,0,0,0,0,0,1),							array(1,0,0,0,0,0,0,0,1),							array(1,0,0,0,0,0,0,0,1),							array(1,0,0,0,0,0,0,0,1),							array(0,1,0,0,0,0,0,1,0),							array(0,0,1,1,1,1,1,0,0),						),						array(							array(0,0,1,1,1,1,1,0,1),							array(0,1,0,0,0,0,0,1,1),							array(1,0,0,0,0,0,0,0,1),							array(1,0,0,0,0,0,0,0,0),							array(1,0,0,0,0,0,0,0,0),							array(1,0,0,0,0,0,0,0,0),							array(1,0,0,0,0,0,0,0,0),							array(1,0,0,0,0,0,0,0,0),							array(1,0,0,0,1,1,1,1,1),							array(1,0,0,0,1,0,0,0,1),							array(1,0,0,0,1,0,0,0,1),							array(1,0,0,0,0,0,0,0,1),							array(1,0,0,0,0,0,0,0,1),							array(0,1,0,0,0,0,0,1,1),							array(0,0,1,1,1,1,1,0,1),						),						array(							array(0,0,1,1,1,1,1,0,1),							array(0,1,1,0,0,0,0,1,1),							array(1,1,0,0,0,0,0,1,1),							array(1,0,0,0,0,0,0,0,1),							array(1,0,0,0,0,0,0,0,1),							array(1,1,1,0,0,0,0,0,1),							array(0,0,1,1,1,1,1,1,1),							array(0,0,0,0,0,0,0,0,1),							array(0,0,0,0,0,0,0,0,1),							array(0,0,0,0,0,0,0,0,1),							array(0,0,0,0,0,0,0,0,1),							array(0,0,0,0,0,0,0,1,1),							array(1,1,1,1,1,1,1,1,0),							array(0,0,0,0,0,0,0,0,0),							array(0,0,0,0,0,0,0,0,0),						),					),		'H'	=>		array(						array(							array(1,0,0,0,0,0,0,0,1),							array(1,0,0,0,0,0,0,0,1),							array(1,0,0,0,0,0,0,0,1),							array(1,0,0,0,0,0,0,0,1),							array(1,0,0,0,0,0,0,0,1),							array(1,0,0,0,0,0,0,0,1),							array(1,0,0,0,0,0,0,0,1),							array(1,1,1,1,1,1,1,1,1),							array(1,0,0,0,0,0,0,0,1),							array(1,0,0,0,0,0,0,0,1),							array(1,0,0,0,0,0,0,0,1),							array(1,0,0,0,0,0,0,0,1),							array(1,0,0,0,0,0,0,0,1),							array(1,0,0,0,0,0,0,0,1),							array(1,0,0,0,0,0,0,0,1),						),						array(							array(1,1,1,0,0,0,1,1,1),							array(0,1,0,0,0,0,0,1,0),							array(0,1,0,0,0,0,0,1,0),							array(0,1,0,0,0,0,0,1,0),							array(0,1,0,0,0,0,0,1,0),							array(0,1,0,0,0,0,0,1,0),							array(0,1,0,0,0,0,0,1,0),							array(0,1,1,1,1,1,1,1,0),							array(0,1,0,0,0,0,0,1,0),							array(0,1,0,0,0,0,0,1,0),							array(0,1,0,0,0,0,0,1,0),							array(0,1,0,0,0,0,0,1,0),							array(0,1,0,0,0,0,0,1,0),							array(0,1,0,0,0,0,0,1,0),							array(1,1,1,0,0,0,1,1,1),						),						array(							array(1,0,0,0,0,0,0,0,0),							array(1,0,0,0,0,0,0,0,0),							array(1,0,0,0,0,0,0,0,0),							array(1,0,0,0,0,0,0,0,0),							array(1,0,0,0,0,0,0,0,0),							array(1,0,0,0,0,0,0,0,0),							array(1,0,0,0,0,0,0,0,0),							array(1,0,0,1,1,1,0,0,0),							array(1,1,1,1,0,1,1,0,0),							array(1,0,0,0,0,0,1,0,0),							array(1,0,0,0,0,0,1,0,0),							array(1,0,0,0,0,0,1,0,0),							array(1,0,0,0,0,0,1,0,0),							array(1,0,0,0,0,0,1,0,0),							array(1,0,0,0,0,0,1,0,0),						),					),		'I'	=>		array(						array(							array(1,1,1,1,1,1,1,1,1),							array(0,0,0,0,1,0,0,0,0),							array(0,0,0,0,1,0,0,0,0),							array(0,0,0,0,1,0,0,0,0),							array(0,0,0,0,1,0,0,0,0),							array(0,0,0,0,1,0,0,0,0),							array(0,0,0,0,1,0,0,0,0),							array(0,0,0,0,1,0,0,0,0),							array(0,0,0,0,1,0,0,0,0),							array(0,0,0,0,1,0,0,0,0),							array(0,0,0,0,1,0,0,0,0),							array(0,0,0,0,1,0,0,0,0),							array(0,0,0,0,1,0,0,0,0),							array(0,0,0,0,1,0,0,0,0),							array(1,1,1,1,1,1,1,1,1),						),						array(							array(0,0,0,1,1,1,0,0,0),							array(0,0,0,0,1,0,0,0,0),							array(0,0,0,0,1,0,0,0,0),							array(0,0,0,0,1,0,0,0,0),							array(0,0,0,0,1,0,0,0,0),							array(0,0,0,0,1,0,0,0,0),							array(0,0,0,0,1,0,0,0,0),							array(0,0,0,0,1,0,0,0,0),							array(0,0,0,0,1,0,0,0,0),							array(0,0,0,0,1,0,0,0,0),							array(0,0,0,0,1,0,0,0,0),							array(0,0,0,0,1,0,0,0,0),							array(0,0,0,0,1,0,0,0,0),							array(0,0,0,0,1,0,0,0,0),							array(0,0,0,1,1,1,0,0,0),						),						array(							array(0,0,0,0,0,0,0,0,0),							array(0,0,0,0,0,0,0,0,0),							array(0,0,0,0,0,0,0,0,0),							array(0,0,0,0,1,0,0,0,0),							array(0,0,0,1,1,1,0,0,0),							array(0,0,0,0,1,0,0,0,0),							array(0,0,0,0,0,0,0,0,0),							array(0,0,0,0,1,0,0,0,0),							array(0,0,0,0,1,0,0,0,0),							array(0,0,0,0,1,0,0,0,0),							array(0,0,0,0,1,0,0,0,0),							array(0,0,0,0,1,0,0,0,0),							array(0,0,0,0,1,0,0,0,0),							array(0,0,0,0,1,0,0,0,0),							array(0,0,0,1,1,1,0,0,0),						),					),		'J'	=>		array(						array(							array(1,1,1,1,1,1,1,1,1),							array(0,0,0,0,0,1,0,0,0),							array(0,0,0,0,0,1,0,0,0),							array(0,0,0,0,0,1,0,0,0),							array(0,0,0,0,0,1,0,0,0),							array(0,0,0,0,0,1,0,0,0),							array(0,0,0,0,0,1,0,0,0),							array(0,0,0,0,0,1,0,0,0),							array(0,0,0,0,0,1,0,0,0),							array(0,0,0,0,0,1,0,0,0),							array(0,0,0,0,0,1,0,0,0),							array(1,0,0,0,0,1,0,0,0),							array(1,0,0,0,0,1,0,0,0),							array(0,1,0,0,1,0,0,0,0),							array(0,0,1,1,0,0,0,0,0),						),						array(							array(1,1,1,1,1,1,1,1,1),							array(0,0,0,0,0,1,0,0,0),							array(0,0,0,0,0,1,0,0,0),							array(0,0,0,0,0,1,0,0,0),							array(0,0,0,0,0,1,0,0,0),							array(0,0,0,0,0,1,0,0,0),							array(0,0,0,0,0,1,0,0,0),							array(0,0,0,0,0,1,0,0,0),							array(0,0,0,0,0,1,0,0,0),							array(0,0,0,0,0,1,0,0,0),							array(0,0,0,0,0,1,0,0,0),							array(1,0,0,0,0,1,0,0,0),							array(1,0,0,0,0,1,0,0,0),							array(1,1,0,0,1,0,0,0,0),							array(1,0,1,1,0,0,0,0,0),						),						array(							array(0,0,0,0,0,0,0,0,0),							array(0,0,0,0,0,0,0,0,0),							array(0,0,0,0,0,0,0,0,0),							array(0,0,0,0,0,0,0,0,0),							array(0,0,0,0,0,1,0,0,0),							array(0,0,0,0,0,0,0,0,0),							array(0,0,0,0,0,1,0,0,0),							array(0,0,0,0,0,1,0,0,0),							array(0,0,0,0,0,1,0,0,0),							array(0,0,0,0,0,1,0,0,0),							array(0,0,0,0,0,1,0,0,0),							array(1,0,0,0,0,1,0,0,0),							array(1,0,0,0,0,1,0,0,0),							array(0,1,0,0,1,0,0,0,0),							array(0,0,1,1,0,0,0,0,0),						),					),		'K'	=>		array(						array(    // New 'K', supplied by NeoThermic							array(1,0,0,0,0,0,0,0,1),							array(1,0,0,0,0,0,0,1,0),							array(1,0,0,0,0,0,1,0,0),							array(1,0,0,0,0,1,0,0,0),							array(1,0,0,0,1,0,0,0,0),							array(1,0,0,1,0,0,0,0,0),							array(1,0,1,0,0,0,0,0,0),							array(1,1,0,0,0,0,0,0,0),							array(1,0,1,0,0,0,0,0,0),							array(1,0,0,1,0,0,0,0,0),							array(1,0,0,0,1,0,0,0,0),							array(1,0,0,0,0,1,0,0,0),							array(1,0,0,0,0,0,1,0,0),							array(1,0,0,0,0,0,0,1,0),							array(1,0,0,0,0,0,0,0,1),						),						array(							array(0,1,0,0,0,0,0,0,1),							array(0,1,0,0,0,0,0,1,0),							array(0,1,0,0,0,0,1,0,0),							array(0,1,0,0,0,1,0,0,0),							array(0,1,0,0,1,0,0,0,0),							array(0,1,0,1,0,0,0,0,0),							array(0,1,1,0,0,0,0,0,0),							array(0,1,0,0,0,0,0,0,0),							array(0,1,1,0,0,0,0,0,0),							array(0,1,0,1,0,0,0,0,0),							array(0,1,0,0,1,0,0,0,0),							array(0,1,0,0,0,1,0,0,0),							array(0,1,0,0,0,0,1,0,0),							array(0,1,0,0,0,0,0,1,0),							array(1,1,1,0,0,0,1,1,1),						),						array(							array(0,0,0,0,0,0,0,0,0),							array(0,1,0,0,0,0,0,0,0),							array(0,1,0,0,0,0,0,0,0),							array(0,1,0,0,0,1,0,0,0),							array(0,1,0,0,1,0,0,0,0),							array(0,1,0,1,0,0,0,0,0),							array(0,1,1,0,0,0,0,0,0),							array(0,1,0,0,0,0,0,0,0),							array(0,1,1,0,0,0,0,0,0),							array(0,1,0,1,0,0,0,0,0),							array(0,1,0,0,1,0,0,0,0),							array(0,1,0,0,0,1,0,0,0),							array(0,1,0,0,0,0,1,0,0),							array(0,1,0,0,0,0,0,1,0),							array(0,1,0,0,0,0,0,1,0),						),					),		'L'	=>		array(						array(							array(0,0,0,0,0,0,0,0,0),							array(1,0,0,0,0,0,0,0,0),							array(1,0,0,0,0,0,0,0,0),							array(1,0,0,0,0,0,0,0,0),							array(1,0,0,0,0,0,0,0,0),							array(1,0,0,0,0,0,0,0,0),							array(1,0,0,0,0,0,0,0,0),							array(1,0,0,0,0,0,0,0,0),							array(1,0,0,0,0,0,0,0,0),							array(1,0,0,0,0,0,0,0,0),							array(1,0,0,0,0,0,0,0,0),							array(1,0,0,0,0,0,0,0,0),							array(1,0,0,0,0,0,0,0,0),							array(1,0,0,0,0,0,0,0,0),							array(1,1,1,1,1,1,1,1,1),						),						array(							array(0,0,0,0,0,0,0,0,0),							array(0,1,0,0,0,0,0,0,0),							array(0,1,0,0,0,0,0,0,0),							array(0,1,0,0,0,0,0,0,0),							array(0,1,0,0,0,0,0,0,0),							array(0,1,0,0,0,0,0,0,0),							array(0,1,0,0,0,0,0,0,0),							array(0,1,0,0,0,0,0,0,0),							array(0,1,0,0,0,0,0,0,0),							array(0,1,0,0,0,0,0,0,0),							array(0,1,0,0,0,0,0,0,0),							array(0,1,0,0,0,0,0,0,0),							array(0,1,0,0,0,0,0,0,0),							array(0,1,0,0,0,0,0,0,1),							array(1,1,1,1,1,1,1,1,1),						),						array(							array(0,0,0,0,0,0,0,0,0),							array(0,1,0,0,0,0,0,0,0),							array(0,1,0,0,0,0,0,0,0),							array(0,1,0,0,0,0,0,0,0),							array(0,1,0,0,0,0,0,0,0),							array(0,1,0,0,0,0,0,0,0),							array(0,1,0,0,0,0,0,0,0),							array(0,1,0,0,0,0,0,0,0),							array(0,1,0,0,0,0,0,0,0),							array(0,1,0,0,0,0,0,0,0),							array(0,1,0,0,0,0,0,0,0),							array(0,1,0,0,0,0,0,0,0),							array(0,1,0,0,0,0,0,0,0),							array(0,1,1,0,0,0,0,0,0),							array(0,0,1,1,1,0,0,0,0),						),					),		'M'	=>		array(						array(							array(1,1,0,0,0,0,0,1,1),							array(1,1,0,0,0,0,0,1,1),							array(1,0,1,0,0,0,1,0,1),							array(1,0,1,0,0,0,1,0,1),							array(1,0,1,0,0,0,1,0,1),							array(1,0,0,1,0,1,0,0,1),							array(1,0,0,1,0,1,0,0,1),							array(1,0,0,1,0,1,0,0,1),							array(1,0,0,0,1,0,0,0,1),							array(1,0,0,0,1,0,0,0,1),							array(1,0,0,0,0,0,0,0,1),							array(1,0,0,0,0,0,0,0,1),							array(1,0,0,0,0,0,0,0,1),							array(1,0,0,0,0,0,0,0,1),							array(1,0,0,0,0,0,0,0,1),						),						array(							array(0,0,0,0,0,0,0,0,0),							array(0,1,0,0,0,0,0,1,0),							array(0,1,1,0,0,0,1,1,0),							array(0,1,1,0,0,0,1,1,0),							array(0,1,1,0,0,0,1,1,0),							array(0,1,0,1,0,1,0,1,0),							array(0,1,0,1,0,1,0,1,0),							array(0,1,0,1,0,1,0,1,0),							array(0,1,0,0,1,0,0,1,0),							array(0,1,0,0,1,0,0,1,0),							array(0,1,0,0,0,0,0,1,0),							array(0,1,0,0,0,0,0,1,0),							array(0,1,0,0,0,0,0,1,0),							array(0,1,0,0,0,0,0,1,0),							array(1,1,1,0,0,0,1,1,1),						),						array(							array(0,0,0,0,0,0,0,0,0),							array(0,0,0,0,0,0,0,0,0),							array(0,0,0,0,0,0,0,0,0),							array(0,0,0,0,0,0,0,0,0),							array(0,0,0,0,0,0,0,0,0),							array(0,0,0,0,0,0,0,0,0),							array(0,1,1,1,0,1,1,1,0),							array(1,1,0,1,1,1,0,1,1),							array(1,0,0,0,1,0,0,0,1),							array(1,0,0,0,1,0,0,0,1),							array(1,0,0,0,1,0,0,0,1),							array(1,0,0,0,1,0,0,0,1),							array(1,0,0,0,1,0,0,0,1),							array(1,0,0,0,1,0,0,0,1),							array(1,0,0,0,1,0,0,0,1),						),					),		'N'	=>		array(						array(							array(1,1,0,0,0,0,0,0,1),							array(1,1,0,0,0,0,0,0,1),							array(1,0,1,0,0,0,0,0,1),							array(1,0,1,0,0,0,0,0,1),							array(1,0,0,1,0,0,0,0,1),							array(1,0,0,1,0,0,0,0,1),							array(1,0,0,0,1,0,0,0,1),							array(1,0,0,0,1,0,0,0,1),							array(1,0,0,0,1,0,0,0,1),							array(1,0,0,0,0,1,0,0,1),							array(1,0,0,0,0,1,0,0,1),							array(1,0,0,0,0,0,1,0,1),							array(1,0,0,0,0,0,1,0,1),							array(1,0,0,0,0,0,0,1,1),							array(1,0,0,0,0,0,0,1,1),						),						array(							array(0,0,0,0,0,0,0,0,0),							array(0,1,0,0,0,0,0,1,0),							array(0,1,1,0,0,0,0,1,0),							array(0,1,1,0,0,0,0,1,0),							array(0,1,1,0,0,0,0,1,0),							array(0,1,0,1,0,0,0,1,0),							array(0,1,0,1,0,0,0,1,0),							array(0,1,0,1,0,0,0,1,0),							array(0,1,0,0,1,0,0,1,0),							array(0,1,0,0,1,1,0,1,0),							array(0,1,0,0,0,1,0,1,0),							array(0,1,0,0,0,1,1,1,0),							array(0,1,0,0,0,0,1,1,0),							array(0,1,0,0,0,0,0,1,0),							array(1,1,1,0,0,0,1,1,1),						),						array(							array(0,0,0,0,0,0,0,0,0),							array(0,0,0,0,0,0,0,0,0),							array(0,0,0,0,0,0,0,0,0),							array(0,0,0,0,0,0,0,0,0),							array(0,0,0,0,0,0,0,0,0),							array(0,0,0,0,0,0,0,0,0),							array(0,0,0,0,0,0,0,0,0),							array(1,0,1,1,1,1,0,0,0),							array(1,1,1,0,0,1,1,0,0),							array(1,0,0,0,0,0,1,0,0),							array(1,0,0,0,0,0,1,0,0),							array(1,0,0,0,0,0,1,0,0),							array(1,0,0,0,0,0,1,0,0),							array(1,0,0,0,0,0,1,0,0),							array(1,0,0,0,0,0,1,0,0),						),					),		'O'	=>		array(						array(							array(0,0,1,1,1,1,1,0,0),							array(0,1,0,0,0,0,0,1,0),							array(1,0,0,0,0,0,0,0,1),							array(1,0,0,0,0,0,0,0,1),							array(1,0,0,0,0,0,0,0,1),							array(1,0,0,0,0,0,0,0,1),							array(1,0,0,0,0,0,0,0,1),							array(1,0,0,0,0,0,0,0,1),							array(1,0,0,0,0,0,0,0,1),							array(1,0,0,0,0,0,0,0,1),							array(1,0,0,0,0,0,0,0,1),							array(1,0,0,0,0,0,0,0,1),							array(1,0,0,0,0,0,0,0,1),							array(0,1,0,0,0,0,0,1,0),							array(0,0,1,1,1,1,1,0,0),						),						array(							array(0,0,1,1,1,1,1,0,0),							array(0,1,0,0,0,0,0,1,0),							array(1,1,0,0,0,0,0,1,1),							array(1,1,0,0,0,0,0,1,1),							array(1,1,0,0,0,0,0,1,1),							array(1,1,0,0,0,0,0,1,1),							array(1,1,0,0,0,0,0,1,1),							array(1,1,0,0,0,0,0,1,1),							array(1,1,0,0,0,0,0,1,1),							array(1,1,0,0,0,0,0,1,1),							array(1,1,0,0,0,0,0,1,1),							array(1,1,0,0,0,0,0,1,1),							array(1,1,0,0,0,0,0,1,1),							array(0,1,0,0,0,0,0,1,0),							array(0,0,1,1,1,1,1,0,0),						),						array(							array(0,0,0,0,0,0,0,0,0),							array(0,0,0,0,0,0,0,0,0),							array(0,0,0,0,0,0,0,0,0),							array(0,0,0,0,0,0,0,0,0),							array(0,0,0,0,0,0,0,0,0),							array(0,0,0,0,0,0,0,0,0),							array(0,0,0,0,0,0,0,0,0),							array(0,1,1,1,1,1,0,0,0),							array(1,1,1,0,0,1,1,0,0),							array(1,0,0,0,0,0,1,0,0),							array(1,0,0,0,0,0,1,0,0),							array(1,0,0,0,0,0,1,0,0),							array(1,0,0,0,0,0,1,0,0),							array(1,1,0,0,0,1,1,0,0),							array(0,1,1,1,1,1,0,0,0),						),					),		'P'	=>		array(						array(							array(1,1,1,1,1,1,1,0,0),							array(1,0,0,0,0,0,0,1,0),							array(1,0,0,0,0,0,0,0,1),							array(1,0,0,0,0,0,0,0,1),							array(1,0,0,0,0,0,0,0,1),							array(1,0,0,0,0,0,0,0,1),							array(1,0,0,0,0,0,0,1,0),							array(1,1,1,1,1,1,1,0,0),							array(1,0,0,0,0,0,0,0,0),							array(1,0,0,0,0,0,0,0,0),							array(1,0,0,0,0,0,0,0,0),							array(1,0,0,0,0,0,0,0,0),							array(1,0,0,0,0,0,0,0,0),							array(1,0,0,0,0,0,0,0,0),							array(1,0,0,0,0,0,0,0,0),						),						array(							array(1,1,1,1,1,1,1,0,0),							array(0,1,0,0,0,0,0,1,0),							array(0,1,0,0,0,0,0,0,1),							array(0,1,0,0,0,0,0,0,1),							array(0,1,0,0,0,0,0,0,1),							array(0,1,0,0,0,0,0,0,1),							array(0,1,0,0,0,0,0,1,0),							array(1,1,1,1,1,1,1,0,0),							array(0,1,0,0,0,0,0,0,0),							array(0,1,0,0,0,0,0,0,0),							array(0,1,0,0,0,0,0,0,0),							array(0,1,0,0,0,0,0,0,0),							array(0,1,0,0,0,0,0,0,0),							array(0,1,0,0,0,0,0,0,0),							array(1,1,1,0,0,0,0,0,0),						),						array(							array(0,0,0,0,0,0,0,0,0),							array(0,0,0,0,0,0,0,0,0),							array(1,0,0,0,0,0,0,0,0),							array(1,0,1,1,0,0,0,0,0),							array(1,1,0,1,1,0,0,0,0),							array(1,0,0,0,1,0,0,0,0),							array(1,0,0,0,1,0,0,0,0),							array(1,0,0,1,1,0,0,0,0),							array(1,1,1,1,0,0,0,0,0),							array(1,0,0,0,0,0,0,0,0),							array(1,0,0,0,0,0,0,0,0),							array(1,0,0,0,0,0,0,0,0),							array(1,0,0,0,0,0,0,0,0),							array(1,0,0,0,0,0,0,0,0),							array(1,0,0,0,0,0,0,0,0),						),					),		'Q'	=>		array(						array(							array(0,0,1,1,1,1,1,0,0),							array(0,1,0,0,0,0,0,1,0),							array(1,0,0,0,0,0,0,0,1),							array(1,0,0,0,0,0,0,0,1),							array(1,0,0,0,0,0,0,0,1),							array(1,0,0,0,0,0,0,0,1),							array(1,0,0,0,0,0,0,0,1),							array(1,0,0,0,0,0,0,0,1),							array(1,0,0,0,0,0,0,0,1),							array(1,0,0,0,0,0,0,0,1),							array(1,0,0,0,0,0,0,0,1),							array(1,0,0,0,0,1,0,0,1),							array(1,0,0,0,0,0,1,0,1),							array(0,1,0,0,0,0,0,1,0),							array(0,0,1,1,1,1,1,0,1),						),						array(							array(0,0,1,1,1,1,1,0,0),							array(0,1,0,0,0,0,0,1,0),							array(1,0,0,0,0,0,0,0,1),							array(1,0,0,0,0,0,0,0,1),							array(1,0,0,0,0,0,0,0,1),							array(1,0,0,0,0,0,0,0,1),							array(1,0,0,0,0,0,0,0,1),							array(1,0,0,0,0,0,0,0,1),							array(1,0,0,0,0,0,0,0,1),							array(1,0,0,0,1,0,0,0,1),							array(1,1,0,0,1,1,0,1,1),							array(0,1,1,1,1,1,1,1,0),							array(0,0,0,0,0,0,1,1,0),							array(0,0,0,0,0,0,0,1,1),							array(0,0,0,0,0,0,0,0,1),						),						array(							array(0,0,0,0,0,0,0,0,0),							array(0,0,0,0,0,0,0,0,0),							array(0,0,0,0,0,0,0,0,0),							array(0,0,0,0,0,1,1,1,1),							array(0,0,0,0,1,1,0,0,1),							array(0,0,0,0,1,0,0,0,1),							array(0,0,0,0,1,0,0,0,1),							array(0,0,0,0,1,1,0,1,1),							array(0,0,0,0,0,1,1,0,1),							array(0,0,0,0,0,0,0,0,1),							array(0,0,0,0,0,0,0,0,1),							array(0,0,0,0,0,0,0,0,1),							array(0,0,0,0,0,0,0,0,1),							array(0,0,0,0,0,0,0,0,1),							array(0,0,0,0,0,0,0,0,1),						),					),		'R'	=>		array(						array(							array(1,1,1,1,1,1,1,0,0),							array(1,0,0,0,0,0,0,1,0),							array(1,0,0,0,0,0,0,0,1),							array(1,0,0,0,0,0,0,0,1),							array(1,0,0,0,0,0,0,0,1),							array(1,0,0,0,0,0,0,0,1),							array(1,0,0,0,0,0,0,1,0),							array(1,1,1,1,1,1,1,0,0),							array(1,1,1,0,0,0,0,0,0),							array(1,0,0,1,0,0,0,0,0),							array(1,0,0,0,1,0,0,0,0),							array(1,0,0,0,0,1,0,0,0),							array(1,0,0,0,0,0,1,0,0),							array(1,0,0,0,0,0,0,1,0),							array(1,0,0,0,0,0,0,0,1),						),						array(							array(1,1,1,1,1,1,1,0,0),							array(0,1,0,0,0,0,0,1,0),							array(0,1,0,0,0,0,0,0,1),							array(0,1,0,0,0,0,0,0,1),							array(0,1,0,0,0,0,0,0,1),							array(0,1,0,0,0,0,0,0,1),							array(0,1,0,0,0,0,0,1,0),							array(1,1,1,1,1,1,1,0,0),							array(0,1,1,0,0,0,0,0,0),							array(0,1,1,1,0,0,0,0,0),							array(0,1,0,1,1,0,0,0,0),							array(0,1,0,0,1,1,0,0,0),							array(0,1,0,0,0,1,1,0,0),							array(0,1,0,0,0,0,1,1,0),							array(1,1,1,0,0,0,1,1,1),						),						array(							array(0,0,0,0,0,0,0,0,0),							array(0,0,0,0,0,0,0,0,0),							array(0,0,0,0,0,0,0,0,0),							array(0,0,0,0,0,0,0,0,0),							array(0,0,0,0,0,0,0,0,0),							array(0,0,0,0,0,0,0,0,0),							array(1,0,0,0,0,0,0,0,0),							array(1,1,1,1,1,0,0,0,0),							array(1,1,0,0,1,1,0,0,0),							array(1,0,0,0,0,0,0,0,0),							array(1,0,0,0,0,0,0,0,0),							array(1,0,0,0,0,0,0,0,0),							array(1,0,0,0,0,0,0,0,0),							array(1,0,0,0,0,0,0,0,0),							array(1,0,0,0,0,0,0,0,0),						),					),		'S'	=>		array(						array(							array(0,0,1,1,1,1,1,0,0),							array(0,1,0,0,0,0,0,1,0),							array(1,0,0,0,0,0,0,0,1),							array(1,0,0,0,0,0,0,0,0),							array(1,0,0,0,0,0,0,0,0),							array(1,0,0,0,0,0,0,0,0),							array(0,1,0,0,0,0,0,0,0),							array(0,0,1,1,1,1,1,0,0),							array(0,0,0,0,0,0,0,1,0),							array(0,0,0,0,0,0,0,0,1),							array(0,0,0,0,0,0,0,0,1),							array(0,0,0,0,0,0,0,0,1),							array(1,0,0,0,0,0,0,0,1),							array(0,1,0,0,0,0,0,1,0),							array(0,0,1,1,1,1,1,0,0),						),						array(							array(0,0,1,1,1,1,1,0,1),							array(0,1,0,0,0,0,0,1,1),							array(1,0,0,0,0,0,0,0,1),							array(1,0,0,0,0,0,0,0,1),							array(1,0,0,0,0,0,0,0,0),							array(1,0,0,0,0,0,0,0,0),							array(0,1,0,0,0,0,0,0,0),							array(0,0,1,1,1,1,1,0,0),							array(0,0,0,0,0,0,0,1,0),							array(0,0,0,0,0,0,0,0,1),							array(1,0,0,0,0,0,0,0,1),							array(1,0,0,0,0,0,0,0,1),							array(1,0,0,0,0,0,0,0,1),							array(1,1,0,0,0,0,0,1,0),							array(1,0,1,1,1,1,1,0,0),						),						array(							array(0,0,0,0,0,0,0,0,0),							array(0,0,0,0,0,0,0,0,0),							array(0,0,0,0,0,0,0,0,0),							array(0,0,0,0,0,0,0,0,0),							array(0,0,0,0,0,0,0,0,0),							array(0,0,0,0,0,0,0,0,0),							array(0,0,0,0,0,0,0,0,0),							array(0,1,1,1,1,0,0,0,0),							array(1,0,0,0,0,1,0,0,0),							array(1,0,0,0,0,0,0,0,0),							array(1,1,0,0,0,0,0,0,0),							array(0,1,1,1,1,0,0,0,0),							array(0,0,0,0,0,1,0,0,0),							array(1,0,0,0,1,1,0,0,0),							array(0,1,1,1,1,0,0,0,0),						),					),		'T'	=>		array(						array(							array(1,1,1,1,1,1,1,1,1),							array(0,0,0,0,1,0,0,0,0),							array(0,0,0,0,1,0,0,0,0),							array(0,0,0,0,1,0,0,0,0),							array(0,0,0,0,1,0,0,0,0),							array(0,0,0,0,1,0,0,0,0),							array(0,0,0,0,1,0,0,0,0),							array(0,0,0,0,1,0,0,0,0),							array(0,0,0,0,1,0,0,0,0),							array(0,0,0,0,1,0,0,0,0),							array(0,0,0,0,1,0,0,0,0),							array(0,0,0,0,1,0,0,0,0),							array(0,0,0,0,1,0,0,0,0),							array(0,0,0,0,1,0,0,0,0),							array(0,0,0,0,1,0,0,0,0),						),						array(							array(1,1,1,1,1,1,1,1,1),							array(1,0,0,0,1,0,0,0,1),							array(0,0,0,0,1,0,0,0,0),							array(0,0,0,0,1,0,0,0,0),							array(0,0,0,0,1,0,0,0,0),							array(0,0,0,0,1,0,0,0,0),							array(0,0,0,0,1,0,0,0,0),							array(0,0,0,0,1,0,0,0,0),							array(0,0,0,0,1,0,0,0,0),							array(0,0,0,0,1,0,0,0,0),							array(0,0,0,0,1,0,0,0,0),							array(0,0,0,0,1,0,0,0,0),							array(0,0,0,0,1,0,0,0,0),							array(0,0,0,0,1,0,0,0,0),							array(0,0,0,1,1,1,0,0,0),						),						array(							array(0,0,0,0,1,0,0,0,0),							array(0,0,0,0,1,0,0,0,0),							array(0,0,0,0,1,0,0,0,0),							array(0,0,1,1,1,1,1,1,0),							array(0,0,0,0,1,0,0,0,0),							array(0,0,0,0,1,0,0,0,0),							array(0,0,0,0,1,0,0,0,0),							array(0,0,0,0,1,0,0,0,0),							array(0,0,0,0,1,0,0,0,0),							array(0,0,0,0,1,0,0,0,0),							array(0,0,0,0,1,0,0,0,0),							array(0,0,0,0,1,0,0,0,0),							array(0,0,0,0,1,0,0,0,0),							array(0,0,0,0,1,1,0,0,0),							array(0,0,0,0,0,1,1,1,0),						),					),		'U'	=>		array(						array(							array(1,0,0,0,0,0,0,0,1),							array(1,0,0,0,0,0,0,0,1),							array(1,0,0,0,0,0,0,0,1),							array(1,0,0,0,0,0,0,0,1),							array(1,0,0,0,0,0,0,0,1),							array(1,0,0,0,0,0,0,0,1),							array(1,0,0,0,0,0,0,0,1),							array(1,0,0,0,0,0,0,0,1),							array(1,0,0,0,0,0,0,0,1),							array(1,0,0,0,0,0,0,0,1),							array(1,0,0,0,0,0,0,0,1),							array(1,0,0,0,0,0,0,0,1),							array(1,0,0,0,0,0,0,0,1),							array(0,1,0,0,0,0,0,1,0),							array(0,0,1,1,1,1,1,0,0),						),						array(							array(1,0,0,0,0,0,0,0,0),							array(1,1,1,0,0,0,1,1,1),							array(0,1,0,0,0,0,0,1,0),							array(0,1,0,0,0,0,0,1,0),							array(0,1,0,0,0,0,0,1,0),							array(0,1,0,0,0,0,0,1,0),							array(0,1,0,0,0,0,0,1,0),							array(0,1,0,0,0,0,0,1,0),							array(0,1,0,0,0,0,0,1,0),							array(0,1,0,0,0,0,0,1,0),							array(0,1,0,0,0,0,0,1,0),							array(0,1,0,0,0,0,0,1,0),							array(0,1,0,0,0,0,0,1,0),							array(0,1,1,0,0,0,1,1,0),							array(0,0,1,1,1,1,1,0,0),						),						array(							array(0,0,0,0,0,0,0,0,0),							array(0,0,0,0,0,0,0,0,0),							array(0,0,0,0,0,0,0,0,0),							array(0,0,0,0,0,0,0,0,0),							array(0,0,0,0,0,0,0,0,0),							array(0,0,0,0,0,0,0,0,0),							array(0,0,0,0,0,0,0,0,0),							array(0,0,1,0,0,0,0,0,1),							array(0,0,1,0,0,0,0,0,1),							array(0,0,1,0,0,0,0,0,1),							array(0,0,1,0,0,0,0,0,1),							array(0,0,1,0,0,0,0,0,1),							array(0,0,1,0,0,0,0,1,1),							array(0,0,1,1,0,0,1,1,1),							array(0,0,0,1,1,1,1,0,1),						),					),		'V'	=>		array(						array(							array(1,0,0,0,0,0,0,0,1),							array(1,0,0,0,0,0,0,0,1),							array(1,0,0,0,0,0,0,0,1),							array(0,1,0,0,0,0,0,1,0),							array(0,1,0,0,0,0,0,1,0),							array(0,1,0,0,0,0,0,1,0),							array(0,0,1,0,0,0,1,0,0),							array(0,0,1,0,0,0,1,0,0),							array(0,0,1,0,0,0,1,0,0),							array(0,0,1,0,0,0,1,0,0),							array(0,0,0,1,0,1,0,0,0),							array(0,0,0,1,0,1,0,0,0),							array(0,0,0,1,0,1,0,0,0),							array(0,0,0,0,1,0,0,0,0),							array(0,0,0,0,1,0,0,0,0),						),						array(							array(0,0,0,0,0,0,0,0,0),							array(0,0,0,0,0,0,0,0,0),							array(0,0,0,0,0,0,0,0,0),							array(1,1,1,0,0,0,1,1,1),							array(0,1,0,0,0,0,0,1,0),							array(0,1,0,0,0,0,0,1,0),							array(0,0,1,0,0,0,1,0,0),							array(0,0,1,0,0,0,1,0,0),							array(0,0,1,0,0,0,1,0,0),							array(0,0,1,0,0,0,1,0,0),							array(0,0,0,1,0,1,0,0,0),							array(0,0,0,1,0,1,0,0,0),							array(0,0,0,1,0,1,0,0,0),							array(0,0,0,0,1,0,0,0,0),							array(0,0,0,0,1,0,0,0,0),						),						array(							array(0,0,0,0,0,0,0,0,0),							array(0,0,0,0,0,0,0,0,0),							array(0,0,0,0,0,0,0,0,0),							array(0,0,0,0,0,0,0,0,0),							array(0,0,0,0,0,0,0,0,0),							array(0,0,0,0,0,0,0,0,0),							array(0,0,1,0,0,0,1,0,0),							array(0,0,1,0,0,0,1,0,0),							array(0,0,1,0,0,0,1,0,0),							array(0,0,1,0,0,0,1,0,0),							array(0,0,0,1,0,1,0,0,0),							array(0,0,0,1,0,1,0,0,0),							array(0,0,0,1,0,1,0,0,0),							array(0,0,0,0,1,0,0,0,0),							array(0,0,0,0,1,0,0,0,0),						),					),		'W'	=>		array(						array(							array(1,0,0,0,0,0,0,0,1),							array(1,0,0,0,0,0,0,0,1),							array(1,0,0,0,0,0,0,0,1),							array(1,0,0,0,0,0,0,0,1),							array(1,0,0,0,0,0,0,0,1),							array(1,0,0,0,1,0,0,0,1),							array(1,0,0,0,1,0,0,0,1),							array(1,0,0,1,0,1,0,0,1),							array(1,0,0,1,0,1,0,0,1),							array(1,0,0,1,0,1,0,0,1),							array(1,0,1,0,0,0,1,0,1),							array(1,0,1,0,0,0,1,0,1),							array(1,0,1,0,0,0,1,0,1),							array(1,1,0,0,0,0,0,1,1),							array(1,1,0,0,0,0,0,1,1),						),						array(							array(0,0,0,0,0,0,0,0,0),							array(0,0,0,0,0,0,0,0,0),							array(1,1,1,0,0,0,1,1,1),							array(0,1,0,0,0,0,0,1,0),							array(0,1,0,0,0,0,0,1,0),							array(0,1,0,0,0,0,0,1,0),							array(0,1,0,0,0,0,0,1,0),							array(0,1,0,0,1,0,0,1,0),							array(0,1,0,0,1,0,0,1,0),							array(0,1,0,1,1,1,0,1,0),							array(0,1,0,1,0,1,0,1,0),							array(0,1,1,1,0,1,1,1,0),							array(0,1,1,0,0,0,1,1,0),							array(0,1,0,0,0,0,0,1,0),							array(0,0,0,0,0,0,0,0,0),						),						array(							array(0,0,0,0,0,0,0,0,0),							array(0,0,0,0,0,0,0,0,0),							array(0,0,0,0,0,0,0,0,0),							array(0,0,0,0,0,0,0,0,0),							array(0,0,0,0,0,0,0,0,0),							array(0,0,0,0,0,0,0,0,0),							array(0,1,0,0,0,0,0,1,0),							array(0,1,0,0,1,0,0,1,0),							array(0,1,0,0,1,0,0,1,0),							array(0,1,0,1,1,1,0,1,0),							array(0,1,0,1,0,1,0,1,0),							array(0,1,1,1,0,1,1,1,0),							array(0,1,1,0,0,0,1,1,0),							array(0,1,0,0,0,0,0,1,0),							array(0,0,0,0,0,0,0,0,0),						),					),		'X'	=>		array(						array(							array(1,0,0,0,0,0,0,0,1),							array(1,0,0,0,0,0,0,0,1),							array(0,1,0,0,0,0,0,1,0),							array(0,1,0,0,0,0,0,1,0),							array(0,0,1,0,0,0,1,0,0),							array(0,0,0,1,0,1,0,0,0),							array(0,0,0,1,0,1,0,0,0),							array(0,0,0,0,1,0,0,0,0),							array(0,0,0,1,0,1,0,0,0),							array(0,0,0,1,0,1,0,0,0),							array(0,0,1,0,0,0,1,0,0),							array(0,1,0,0,0,0,1,0,0),							array(0,1,0,0,0,0,0,1,0),							array(1,0,0,0,0,0,0,0,1),							array(1,0,0,0,0,0,0,0,1),						),						array(							array(0,0,0,0,0,0,0,0,0),							array(1,1,1,0,0,0,1,1,1),							array(0,1,0,0,0,0,0,1,0),							array(0,1,0,0,0,0,0,1,0),							array(0,0,1,0,0,0,1,0,0),							array(0,0,0,1,0,1,0,0,0),							array(0,0,0,1,0,1,0,0,0),							array(0,0,0,0,1,0,0,0,0),							array(0,0,0,1,0,1,0,0,0),							array(0,0,0,1,0,1,0,0,0),							array(0,0,1,0,0,0,1,0,0),							array(0,1,0,0,0,0,1,0,0),							array(0,1,0,0,0,0,0,1,0),							array(1,1,1,0,0,0,1,1,1),							array(0,0,0,0,0,0,0,0,0),						),						array(							array(0,0,0,0,0,0,0,0,0),							array(0,0,0,0,0,0,0,0,0),							array(0,0,0,0,0,0,0,0,0),							array(0,0,0,0,0,0,0,0,0),							array(0,0,0,0,0,0,0,0,0),							array(0,0,0,0,0,0,0,0,0),							array(0,0,0,0,0,0,0,0,0),							array(0,1,0,0,0,0,0,1,0),							array(0,1,1,0,0,0,1,1,0),							array(0,0,1,1,0,1,1,0,0),							array(0,0,0,1,1,1,0,0,0),							array(0,0,0,1,1,1,0,0,0),							array(0,0,1,1,0,1,1,0,0),							array(0,1,1,0,0,0,1,1,0),							array(0,0,0,0,0,0,0,0,0),						),					),		'Y'	=>		array(						array(							array(1,0,0,0,0,0,0,0,1),							array(1,0,0,0,0,0,0,0,1),							array(0,1,0,0,0,0,0,1,0),							array(0,1,0,0,0,0,0,1,0),							array(0,0,1,0,0,0,1,0,0),							array(0,0,1,0,0,0,1,0,0),							array(0,0,0,1,0,1,0,0,0),							array(0,0,0,0,1,0,0,0,0),							array(0,0,0,0,1,0,0,0,0),							array(0,0,0,0,1,0,0,0,0),							array(0,0,0,0,1,0,0,0,0),							array(0,0,0,0,1,0,0,0,0),							array(0,0,0,0,1,0,0,0,0),							array(0,0,0,0,1,0,0,0,0),							array(0,0,0,0,1,0,0,0,0),						),						array(							array(0,0,0,0,0,0,0,0,0),							array(1,1,1,0,0,0,1,1,1),							array(0,1,0,0,0,0,0,1,0),							array(0,1,0,0,0,0,0,1,0),							array(0,0,1,0,0,0,1,0,0),							array(0,0,1,0,0,0,1,0,0),							array(0,0,0,1,0,1,0,0,0),							array(0,0,0,0,1,0,0,0,0),							array(0,0,0,0,1,0,0,0,0),							array(0,0,0,0,1,0,0,0,0),							array(0,0,0,0,1,0,0,0,0),							array(0,0,0,0,1,0,0,0,0),							array(0,0,0,0,1,0,0,0,0),							array(0,0,0,0,1,0,0,0,0),							array(0,0,0,1,1,1,0,0,0),						),						array(							array(0,0,0,0,0,0,0,0,0),							array(0,0,0,0,0,0,0,0,0),							array(0,0,0,0,0,0,0,0,0),							array(0,0,0,0,0,0,0,0,0),							array(0,0,0,1,0,0,0,0,1),							array(0,0,0,1,1,0,0,0,1),							array(0,0,0,0,1,0,0,1,1),							array(0,0,0,0,1,1,0,1,0),							array(0,0,0,0,0,1,1,1,0),							array(0,0,0,0,0,0,1,0,0),							array(0,0,0,0,0,1,1,0,0),							array(0,0,0,0,0,1,0,0,0),							array(0,0,0,0,1,1,0,0,0),							array(0,0,1,1,1,0,0,0,0),							array(0,0,0,0,0,0,0,0,0),						),					),		'Z'	=>		array(						array(							array(1,1,1,1,1,1,1,1,1),							array(1,0,0,0,0,0,0,0,1),							array(0,0,0,0,0,0,0,0,1),							array(0,0,0,0,0,0,0,1,0),							array(0,0,0,0,0,0,1,0,0),							array(0,0,0,0,0,1,0,0,0),							array(0,0,0,0,0,1,0,0,0),							array(0,0,0,0,1,0,0,0,0),							array(0,0,0,1,0,0,0,0,0),							array(0,0,0,1,0,0,0,0,0),							array(0,0,1,0,0,0,0,0,0),							array(0,1,0,0,0,0,0,0,0),							array(1,0,0,0,0,0,0,0,0),							array(1,0,0,0,0,0,0,0,1),							array(1,1,1,1,1,1,1,1,1),						),						array(							array(1,1,1,1,1,1,1,1,1),							array(0,0,0,0,0,0,0,0,1),							array(0,0,0,0,0,0,0,0,1),							array(0,0,0,0,0,0,0,1,0),							array(0,0,0,0,0,0,1,0,0),							array(0,0,0,0,0,1,0,0,0),							array(0,0,0,0,0,1,0,0,0),							array(0,0,1,1,1,1,1,0,0),							array(0,0,0,1,0,0,0,0,0),							array(0,0,0,1,0,0,0,0,0),							array(0,0,1,0,0,0,0,0,0),							array(0,1,0,0,0,0,0,0,0),							array(1,0,0,0,0,0,0,0,0),							array(1,0,0,0,0,0,0,0,0),							array(1,1,1,1,1,1,1,1,1),						),						array(							array(0,0,0,0,0,0,0,0,0),							array(0,0,0,0,0,0,0,0,0),							array(0,0,0,0,0,0,0,0,0),							array(0,0,0,0,0,0,0,0,0),							array(0,0,0,0,0,0,0,0,0),							array(0,0,0,0,0,0,0,0,0),							array(0,0,0,0,0,0,0,0,0),							array(0,0,0,0,0,0,0,0,0),							array(0,1,1,1,1,1,1,1,0),							array(0,0,0,0,0,1,1,0,0),							array(0,0,0,0,1,1,0,0,0),							array(0,0,0,1,1,0,0,0,0),							array(0,0,1,1,0,0,0,0,0),							array(0,0,1,0,0,0,0,0,0),							array(0,1,1,1,1,1,1,1,0),						),					),				);		return array(			'width'		=> 9,			'height'	=> 15,			'data'		=> array(			'A' =>	$chars['A'][mt_rand(0, min(sizeof($chars['A']), $config['captcha_gd_fonts']) -1)],			'B' =>	$chars['B'][mt_rand(0, min(sizeof($chars['B']), $config['captcha_gd_fonts']) -1)],			'C' =>	$chars['C'][mt_rand(0, min(sizeof($chars['C']), $config['captcha_gd_fonts']) -1)],			'D' =>	$chars['D'][mt_rand(0, min(sizeof($chars['D']), $config['captcha_gd_fonts']) -1)],			'E' =>	$chars['E'][mt_rand(0, min(sizeof($chars['E']), $config['captcha_gd_fonts']) -1)],			'F' =>	$chars['F'][mt_rand(0, min(sizeof($chars['F']), $config['captcha_gd_fonts']) -1)],			'G' =>	$chars['G'][mt_rand(0, min(sizeof($chars['G']), $config['captcha_gd_fonts']) -1)],			'H' =>	$chars['H'][mt_rand(0, min(sizeof($chars['H']), $config['captcha_gd_fonts']) -1)],			'I' =>	$chars['I'][mt_rand(0, min(sizeof($chars['I']), $config['captcha_gd_fonts']) -1)],			'J' =>	$chars['J'][mt_rand(0, min(sizeof($chars['J']), $config['captcha_gd_fonts']) -1)],			'K' =>	$chars['K'][mt_rand(0, min(sizeof($chars['K']), $config['captcha_gd_fonts']) -1)],			'L' =>	$chars['L'][mt_rand(0, min(sizeof($chars['L']), $config['captcha_gd_fonts']) -1)],			'M' =>	$chars['M'][mt_rand(0, min(sizeof($chars['M']), $config['captcha_gd_fonts']) -1)],  			'N' =>	$chars['N'][mt_rand(0, min(sizeof($chars['N']), $config['captcha_gd_fonts']) -1)],			'O' =>	$chars['O'][mt_rand(0, min(sizeof($chars['O']), $config['captcha_gd_fonts']) -1)],			'P' =>	$chars['P'][mt_rand(0, min(sizeof($chars['P']), $config['captcha_gd_fonts']) -1)],			'Q' =>	$chars['Q'][mt_rand(0, min(sizeof($chars['Q']), $config['captcha_gd_fonts']) -1)],			'R' =>	$chars['R'][mt_rand(0, min(sizeof($chars['R']), $config['captcha_gd_fonts']) -1)],			'S' =>	$chars['S'][mt_rand(0, min(sizeof($chars['S']), $config['captcha_gd_fonts']) -1)],			'T' =>	$chars['T'][mt_rand(0, min(sizeof($chars['T']), $config['captcha_gd_fonts']) -1)],			'U' =>	$chars['U'][mt_rand(0, min(sizeof($chars['U']), $config['captcha_gd_fonts']) -1)],			'V' =>	$chars['V'][mt_rand(0, min(sizeof($chars['V']), $config['captcha_gd_fonts']) -1)],			'W' =>	$chars['W'][mt_rand(0, min(sizeof($chars['W']), $config['captcha_gd_fonts']) -1)],			'X' =>	$chars['X'][mt_rand(0, min(sizeof($chars['X']), $config['captcha_gd_fonts']) -1)],			'Y' =>	$chars['Y'][mt_rand(0, min(sizeof($chars['Y']), $config['captcha_gd_fonts']) -1)],			'Z' =>	$chars['Z'][mt_rand(0, min(sizeof($chars['Z']), $config['captcha_gd_fonts']) -1)],			'1' => array(				array(0,0,0,1,1,0,0,0,0),				array(0,0,1,0,1,0,0,0,0),				array(0,1,0,0,1,0,0,0,0),				array(0,0,0,0,1,0,0,0,0),				array(0,0,0,0,1,0,0,0,0),				array(0,0,0,0,1,0,0,0,0),				array(0,0,0,0,1,0,0,0,0),				array(0,0,0,0,1,0,0,0,0),				array(0,0,0,0,1,0,0,0,0),				array(0,0,0,0,1,0,0,0,0),				array(0,0,0,0,1,0,0,0,0),				array(0,0,0,0,1,0,0,0,0),				array(0,0,0,0,1,0,0,0,0),				array(0,0,0,0,1,0,0,0,0),				array(0,1,1,1,1,1,1,1,0),			),			'2' => array(    // New '2' supplied by Anon				array(0,0,0,1,1,1,0,0,0),				array(0,0,1,0,0,0,1,0,0),				array(0,1,0,0,0,0,1,1,0),				array(0,0,0,0,0,0,0,0,1),				array(0,0,0,0,0,0,0,0,1),				array(0,0,0,0,0,0,0,1,1),				array(0,0,0,0,0,0,0,1,0),				array(0,0,0,0,0,0,1,0,0),				array(0,0,0,0,0,1,0,0,0),				array(0,0,0,0,1,0,0,0,0),				array(0,0,0,1,0,0,0,0,0),				array(0,0,1,0,0,0,0,0,0),				array(0,1,0,0,0,0,0,0,0),				array(1,1,1,1,1,1,1,1,1),				array(0,0,0,0,0,0,0,0,0),			),			'3' => array(				array(0,0,1,1,1,1,1,0,0),				array(0,1,0,0,0,0,0,1,0),				array(1,0,0,0,0,0,0,0,1),				array(0,0,0,0,0,0,0,0,1),				array(0,0,0,0,0,0,0,0,1),				array(0,0,0,0,0,0,0,0,1),				array(0,0,0,0,0,0,0,1,0),				array(0,0,0,0,0,1,1,0,0),				array(0,0,0,0,0,0,0,1,0),				array(0,0,0,0,0,0,0,0,1),				array(0,0,0,0,0,0,0,0,1),				array(0,0,0,0,0,0,0,0,1),				array(1,0,0,0,0,0,0,0,1),				array(0,1,0,0,0,0,0,1,0),				array(0,0,1,1,1,1,1,0,0),			),			'4' => array(				array(0,0,0,0,0,0,1,1,0),				array(0,0,0,0,0,1,0,1,0),				array(0,0,0,0,1,0,0,1,0),				array(0,0,0,1,0,0,0,1,0),				array(0,0,1,0,0,0,0,1,0),				array(0,1,0,0,0,0,0,1,0),				array(1,0,0,0,0,0,0,1,0),				array(1,0,0,0,0,0,0,1,0),				array(1,1,1,1,1,1,1,1,1),				array(0,0,0,0,0,0,0,1,0),				array(0,0,0,0,0,0,0,1,0),				array(0,0,0,0,0,0,0,1,0),				array(0,0,0,0,0,0,0,1,0),				array(0,0,0,0,0,0,0,1,0),				array(0,0,0,0,0,0,0,1,0),			),			'5' => array(				array(1,1,1,1,1,1,1,1,1),				array(1,0,0,0,0,0,0,0,0),				array(1,0,0,0,0,0,0,0,0),				array(1,0,0,0,0,0,0,0,0),				array(1,0,0,0,0,0,0,0,0),				array(0,1,0,0,0,0,0,0,0),				array(0,0,1,1,1,1,1,0,0),				array(0,0,0,0,0,0,0,1,0),				array(0,0,0,0,0,0,0,0,1),				array(0,0,0,0,0,0,0,0,1),				array(0,0,0,0,0,0,0,0,1),				array(0,0,0,0,0,0,0,0,1),				array(1,0,0,0,0,0,0,0,1),				array(0,1,0,0,0,0,0,1,0),				array(0,0,1,1,1,1,1,0,0),			),			'6' => array(				array(0,0,1,1,1,1,1,0,0),				array(0,1,0,0,0,0,0,1,0),				array(1,0,0,0,0,0,0,0,1),				array(1,0,0,0,0,0,0,0,1),				array(1,0,0,0,0,0,0,0,0),				array(1,0,0,0,0,0,0,0,0),				array(1,0,0,1,1,1,1,0,0),				array(1,0,1,0,0,0,0,1,0),				array(1,1,0,0,0,0,0,0,1),				array(1,0,0,0,0,0,0,0,1),				array(1,0,0,0,0,0,0,0,1),				array(1,0,0,0,0,0,0,0,1),				array(1,0,0,0,0,0,0,0,1),				array(0,1,0,0,0,0,0,1,0),				array(0,0,1,1,1,1,1,0,0),			),			'7' => array(				array(1,1,1,1,1,1,1,1,1),				array(0,0,0,0,0,0,0,0,1),				array(0,0,0,0,0,0,0,1,0),				array(0,0,0,0,0,0,0,1,0),				array(0,0,0,0,0,0,1,0,0),				array(0,0,0,0,0,1,0,0,0),				array(0,0,0,0,0,1,0,0,0),				array(0,0,0,0,1,0,0,0,0),				array(0,0,0,1,0,0,0,0,0),				array(0,0,0,1,0,0,0,0,0),				array(0,0,1,0,0,0,0,0,0),				array(0,1,0,0,0,0,0,0,0),				array(0,1,0,0,0,0,0,0,0),				array(1,0,0,0,0,0,0,0,0),				array(1,0,0,0,0,0,0,0,0),			),			'8' => array(				array(0,0,1,1,1,1,1,0,0),				array(0,1,0,0,0,0,0,1,0),				array(1,0,0,0,0,0,0,0,1),				array(1,0,0,0,0,0,0,0,1),				array(1,0,0,0,0,0,0,0,1),				array(1,0,0,0,0,0,0,0,1),				array(0,1,0,0,0,0,0,1,0),				array(0,0,1,1,1,1,1,0,0),				array(0,1,0,0,0,0,0,1,0),				array(1,0,0,0,0,0,0,0,1),				array(1,0,0,0,0,0,0,0,1),				array(1,0,0,0,0,0,0,0,1),				array(1,0,0,0,0,0,0,0,1),				array(0,1,0,0,0,0,0,1,0),				array(0,0,1,1,1,1,1,0,0),			),			'9' => array(				array(0,0,1,1,1,1,1,0,0),				array(0,1,0,0,0,0,0,1,0),				array(1,0,0,0,0,0,0,0,1),				array(1,0,0,0,0,0,0,0,1),				array(1,0,0,0,0,0,0,0,1),				array(1,0,0,0,0,0,0,0,1),				array(1,0,0,0,0,0,0,1,1),				array(0,1,0,0,0,0,1,0,1),				array(0,0,1,1,1,1,0,0,1),				array(0,0,0,0,0,0,0,0,1),				array(0,0,0,0,0,0,0,0,1),				array(1,0,0,0,0,0,0,0,1),				array(1,0,0,0,0,0,0,0,1),				array(0,1,0,0,0,0,0,1,0),				array(0,0,1,1,1,1,1,0,0),			),			)		);	}}/*** @package VC*/class char_cube3d{	var $bitmap;	var $bitmap_width;	var $bitmap_height;	var $basis_matrix = array(array(1, 0, 0), array(0, 1, 0), array(0, 0, 1));	var $abs_x = array(1, 0);	var $abs_y = array(0, 1);	var $x = 0;	var $y = 1;	var $z = 2;	var $letter = '';	/**	*/	function char_cube3d(&$bitmaps, $letter)	{		$this->bitmap			= $bitmaps['data'][$letter];		$this->bitmap_width		= $bitmaps['width'];		$this->bitmap_height	= $bitmaps['height'];		$this->basis_matrix[0][0] = mt_rand(-600, 600);		$this->basis_matrix[0][1] = mt_rand(-600, 600);		$this->basis_matrix[0][2] = (mt_rand(0, 1) * 2000) - 1000;		$this->basis_matrix[1][0] = mt_rand(-1000, 1000);		$this->basis_matrix[1][1] = mt_rand(-1000, 1000);		$this->basis_matrix[1][2] = mt_rand(-1000, 1000);		$this->normalize($this->basis_matrix[0]);		$this->normalize($this->basis_matrix[1]);		$this->basis_matrix[2] = $this->cross_product($this->basis_matrix[0], $this->basis_matrix[1]);		$this->normalize($this->basis_matrix[2]);		// $this->basis_matrix[1] might not be (probably isn't) orthogonal to $basis_matrix[0]		$this->basis_matrix[1] = $this->cross_product($this->basis_matrix[0], $this->basis_matrix[2]);		$this->normalize($this->basis_matrix[1]);		// Make sure our cube is facing into the canvas (assuming +z == in)		for ($i = 0; $i < 3; ++$i)		{			if ($this->basis_matrix[$i][2] < 0)			{				$this->basis_matrix[$i][0] *= -1;				$this->basis_matrix[$i][1] *= -1;				$this->basis_matrix[$i][2] *= -1;			}		}		// Force our "z" basis vector to be the one with greatest absolute z value		$this->x = 0;		$this->y = 1;		$this->z = 2;		// Swap "y" with "z"		if ($this->basis_matrix[1][2] > $this->basis_matrix[2][2])		{			$this->z = 1;			$this->y = 2;		}		// Swap "x" with "z"		if ($this->basis_matrix[0][2] > $this->basis_matrix[$this->z][2])		{			$this->x = $this->z;			$this->z = 0;		}		// Still need to determine which of $x,$y are which.		// wrong orientation if y's y-component is less than it's x-component		// likewise if x's x-component is less than it's y-component		// if they disagree, go with the one with the greater weight difference.		// rotate if positive		$weight = (abs($this->basis_matrix[$this->x][1]) - abs($this->basis_matrix[$this->x][0])) + (abs($this->basis_matrix[$this->y][0]) - abs($this->basis_matrix[$this->y][1]));		// Swap "x" with "y"		if ($weight > 0)		{			list($this->x, $this->y) = array($this->y, $this->x);		}		$this->abs_x = array($this->basis_matrix[$this->x][0], $this->basis_matrix[$this->x][1]);		$this->abs_y = array($this->basis_matrix[$this->y][0], $this->basis_matrix[$this->y][1]);		if ($this->abs_x[0] < 0)		{			$this->abs_x[0] *= -1;			$this->abs_x[1] *= -1;		}		if ($this->abs_y[1] > 0)		{			$this->abs_y[0] *= -1;			$this->abs_y[1] *= -1;		}		$this->letter = $letter;	}	/**	* Draw a character	*/	function drawchar($scale, $xoff, $yoff, $img, $background, $colours)	{		$width	= $this->bitmap_width;		$height	= $this->bitmap_height;		$bitmap	= $this->bitmap;		$colour1 = $colours[array_rand($colours)];		$colour2 = $colours[array_rand($colours)];		$swapx = ($this->basis_matrix[$this->x][0] > 0);		$swapy = ($this->basis_matrix[$this->y][1] < 0);		for ($y = 0; $y < $height; ++$y)		{			for ($x = 0; $x < $width; ++$x)			{				$xp = ($swapx) ? ($width - $x - 1) : $x;				$yp = ($swapy) ? ($height - $y - 1) : $y;				if ($bitmap[$height - $yp - 1][$xp])				{					$dx = $this->scale($this->abs_x, ($xp - ($swapx ? ($width / 2) : ($width / 2) - 1)) * $scale);					$dy = $this->scale($this->abs_y, ($yp - ($swapy ? ($height / 2) : ($height / 2) - 1)) * $scale);					$xo = $xoff + $dx[0] + $dy[0];					$yo = $yoff + $dx[1] + $dy[1];					$origin = array(0, 0, 0);					$xvec = $this->scale($this->basis_matrix[$this->x], $scale);					$yvec = $this->scale($this->basis_matrix[$this->y], $scale);					$face_corner = $this->sum2($xvec, $yvec);					$zvec = $this->scale($this->basis_matrix[$this->z], $scale);					$x_corner = $this->sum2($xvec, $zvec);					$y_corner = $this->sum2($yvec, $zvec);					imagefilledpolygon($img, $this->gen_poly($xo, $yo, $origin, $xvec, $x_corner,$zvec), 4, $colour1);					imagefilledpolygon($img, $this->gen_poly($xo, $yo, $origin, $yvec, $y_corner,$zvec), 4, $colour2);					$face = $this->gen_poly($xo, $yo, $origin, $xvec, $face_corner, $yvec);					imagefilledpolygon($img, $face, 4, $background);					imagepolygon($img, $face, 4, $colour1);				}			}		}	}	/*	* return a roughly acceptable range of sizes for rendering with this texttype	*/	function range()	{		return array(3, 4);	}	/**	* Vector length	*/	function vectorlen($vector)	{		return sqrt(pow($vector[0], 2) + pow($vector[1], 2) + pow($vector[2], 2));	}	/**	* Normalize	*/	function normalize(&$vector, $length = 1)	{		$length = (( $length < 1) ? 1 : $length);		$length /= $this->vectorlen($vector);		$vector[0] *= $length;		$vector[1] *= $length;		$vector[2] *= $length;	}	/**	*/	function cross_product($vector1, $vector2)	{		$retval = array(0, 0, 0);		$retval[0] =  (($vector1[1] * $vector2[2]) - ($vector1[2] * $vector2[1]));		$retval[1] = -(($vector1[0] * $vector2[2]) - ($vector1[2] * $vector2[0]));		$retval[2] =  (($vector1[0] * $vector2[1]) - ($vector1[1] * $vector2[0]));		return $retval;	}	/**	*/	function sum($vector1, $vector2)	{		return array($vector1[0] + $vector2[0], $vector1[1] + $vector2[1], $vector1[2] + $vector2[2]);	}	/**	*/	function sum2($vector1, $vector2)	{		return array($vector1[0] + $vector2[0], $vector1[1] + $vector2[1]);	}	/**	*/	function scale($vector, $length)	{		if (sizeof($vector) == 2)		{			return array($vector[0] * $length, $vector[1] * $length);		}		return array($vector[0] * $length, $vector[1] * $length, $vector[2] * $length);	}	/**	*/	function gen_poly($xoff, $yoff, &$vec1, &$vec2, &$vec3, &$vec4)	{		$poly = array();		$poly[0] = $xoff + $vec1[0];		$poly[1] = $yoff + $vec1[1];		$poly[2] = $xoff + $vec2[0];		$poly[3] = $yoff + $vec2[1];		$poly[4] = $xoff + $vec3[0];		$poly[5] = $yoff + $vec3[1];		$poly[6] = $xoff + $vec4[0];		$poly[7] = $yoff + $vec4[1];		return $poly;	}	/**	* dimensions	*/	function dimensions($size)	{		$xn = $this->scale($this->basis_matrix[$this->x], -($this->bitmap_width / 2) * $size);		$xp = $this->scale($this->basis_matrix[$this->x], ($this->bitmap_width / 2) * $size);		$yn = $this->scale($this->basis_matrix[$this->y], -($this->bitmap_height / 2) * $size);		$yp = $this->scale($this->basis_matrix[$this->y], ($this->bitmap_height / 2) * $size);		$p = array();		$p[0] = $this->sum2($xn, $yn);		$p[1] = $this->sum2($xp, $yn);		$p[2] = $this->sum2($xp, $yp);		$p[3] = $this->sum2($xn, $yp);		$min_x = $max_x = $p[0][0];		$min_y = $max_y = $p[0][1];		for ($i = 1; $i < 4; ++$i)		{			$min_x = ($min_x > $p[$i][0]) ? $p[$i][0] : $min_x;			$min_y = ($min_y > $p[$i][1]) ? $p[$i][1] : $min_y;			$max_x = ($max_x < $p[$i][0]) ? $p[$i][0] : $max_x;			$max_y = ($max_y < $p[$i][1]) ? $p[$i][1] : $max_y;		}		return array($min_x, $min_y, $max_x, $max_y);	}}/*** @package VC*/class colour_manager{	var $img;	var $mode;	var $colours;	var $named_colours;	/**	* Create the colour manager, link it to the image resource	*/	function colour_manager($img, $background = false, $mode = 'ahsv')	{		$this->img = $img;		$this->mode = $mode;		$this->colours = array();		$this->named_colours = array();		if ($background !== false)		{			$bg = $this->allocate_named('background', $background);			imagefill($this->img, 0, 0, $bg);		}	}	/**	* Lookup a named colour resource	*/	function get_resource($named_colour)	{		if (isset($this->named_colours[$named_colour]))		{			return $this->named_colours[$named_colour];		}		if (isset($this->named_rgb[$named_colour]))		{			return $this->allocate_named($named_colour, $this->named_rgb[$named_colour], 'rgb');		}		return false;	}	/**	* Assign a name to a colour resource	*/	function name_colour($name, $resource)	{		$this->named_colours[$name] = $resource;	}	/**	* names and allocates a colour resource	*/	function allocate_named($name, $colour, $mode = false)	{		$resource = $this->allocate($colour, $mode);		if ($resource !== false)		{			$this->name_colour($name, $resource);		}		return $resource;	}	/**	* allocates a specified colour into the image	*/	function allocate($colour, $mode = false)	{		if ($mode === false)		{			$mode = $this->mode;		}				if (!is_array($colour))		{			if (isset($this->named_rgb[$colour]))			{				return $this->allocate_named($colour, $this->named_rgb[$colour], 'rgb');			}			if (!is_int($colour))			{				return false;			}			$mode = 'rgb';			$colour = array(255 & ($colour >> 16), 255 & ($colour >>  8), 255 & $colour);		}		if (isset($colour['mode']))		{			$mode = $colour['mode'];			unset($colour['mode']);		}		if (isset($colour['random']))		{			unset($colour['random']);			// everything else is params			return $this->random_colour($colour, $mode);		}		$rgb		= colour_manager::model_convert($colour, $mode, 'rgb');		$store		= ($this->mode == 'rgb') ? $rgb : colour_manager::model_convert($colour, $mode, $this->mode);		$resource	= imagecolorallocate($this->img, $rgb[0], $rgb[1], $rgb[2]);		$this->colours[$resource] = $store;		return $resource;	}	/**	* randomly generates a colour, with optional params	*/	function random_colour($params = array(), $mode = false)	{		if ($mode === false)		{			$mode = $this->mode;		}		switch ($mode)		{			case 'rgb':				// @TODO random rgb generation. do we intend to do this, or is it just too tedious?			break;			case 'ahsv':			case 'hsv':			default:				$default_params = array(					'hue_bias'			=> false,	// degree / 'r'/'g'/'b'/'c'/'m'/'y'   /'o'					'hue_range'			=> false,	// if hue bias, then difference range +/- from bias					'min_saturation'	=> 30,		// 0 - 100					'max_saturation'	=> 80,		// 0 - 100					'min_value'			=> 30,		// 0 - 100					'max_value'			=> 80,		// 0 - 100				);				$alt = ($mode == 'ahsv') ? true : false;				$params = array_merge($default_params, $params);				$min_hue		= 0;				$max_hue		= 359;				$min_saturation	= max(0, $params['min_saturation']);				$max_saturation	= min(100, $params['max_saturation']);				$min_value		= max(0, $params['min_value']);				$max_value		= min(100, $params['max_value']);				if ($params['hue_bias'] !== false)				{					if (is_numeric($params['hue_bias']))					{						$h = intval($params['hue_bias']) % 360;					}					else					{						switch ($params['hue_bias'])						{							case 'o':								$h = $alt ?  60 :  30;							break;							case 'y':								$h = $alt ? 120 :  60;							break;							case 'g':								$h = $alt ? 180 : 120;							break;							case 'c':								$h = $alt ? 210 : 180;							break;							case 'b':								$h = 240;							break;							case 'm':								$h = 300;							break;							case 'r':							default:								$h = 0;							break;						}					}					$min_hue = $h + 360;					$max_hue = $h + 360;					if ($params['hue_range'])					{						$min_hue -= min(180, $params['hue_range']);						$max_hue += min(180, $params['hue_range']);					}				}				$h = mt_rand($min_hue, $max_hue);				$s = mt_rand($min_saturation, $max_saturation);				$v = mt_rand($min_value, $max_value);				return $this->allocate(array($h, $s, $v), $mode);			break;		}	}	/**	*/	function colour_scheme($resource, $include_original = true)	{		$mode = 'hsv';		if (($pre = $this->get_resource($resource)) !== false)		{			$resource = $pre;		}		$colour = colour_manager::model_convert($this->colours[$resource], $this->mode, $mode);		$results = ($include_original) ? array($resource) : array();		$colour2 = $colour3 = $colour4 = $colour;		$colour2[0] += 150;		$colour3[0] += 180;		$colour4[0] += 210;		$results[] = $this->allocate($colour2, $mode);		$results[] = $this->allocate($colour3, $mode);		$results[] = $this->allocate($colour4, $mode);		return $results;	}	/**	*/	function mono_range($resource, $count = 5, $include_original = true)	{		if (is_array($resource))		{			$results = array();			for ($i = 0, $size = sizeof($resource); $i < $size; ++$i)			{				$results = array_merge($results, $this->mono_range($resource[$i], $count, $include_original));			}			return $results;		}		$mode = (in_array($this->mode, array('hsv', 'ahsv'), true) ? $this->mode : 'ahsv');		if (($pre = $this->get_resource($resource)) !== false)		{			$resource = $pre;		}		$colour = colour_manager::model_convert($this->colours[$resource], $this->mode, $mode);		$results = array();		if ($include_original)		{			$results[] = $resource;			$count--;		}		// This is a hard problem. I chicken out and try to maintain readability at the cost of less randomness.				while ($count > 0)		{			$colour[1] = ($colour[1] + mt_rand(40,60)) % 99;			$colour[2] = ($colour[2] + mt_rand(40,60));			$results[] = $this->allocate($colour, $mode);			$count--;		}		return $results;	}	/**	* Convert from one colour model to another	*/	function model_convert($colour, $from_model, $to_model)	{		if ($from_model == $to_model)		{			return $colour;		}		switch ($to_model)		{			case 'hsv':				switch ($from_model)				{					case 'ahsv':						return colour_manager::ah2h($colour);					break;					case 'rgb':						return colour_manager::rgb2hsv($colour);					break;				}			break;			case 'ahsv':				switch ($from_model)				{					case 'hsv':						return colour_manager::h2ah($colour);					break;					case 'rgb':						return colour_manager::h2ah(colour_manager::rgb2hsv($colour));					break;				}			break;			case 'rgb':				switch ($from_model)				{					case 'hsv':						return colour_manager::hsv2rgb($colour);					break;					case 'ahsv':						return colour_manager::hsv2rgb(colour_manager::ah2h($colour));					break;				}			break;		}		return false;	}	/**	* Slightly altered from wikipedia's algorithm	*/	function hsv2rgb($hsv)	{		colour_manager::normalize_hue($hsv[0]);		$h = $hsv[0];		$s = min(1, max(0, $hsv[1] / 100));		$v = min(1, max(0, $hsv[2] / 100));		// calculate hue sector		$hi = floor($hsv[0] / 60);		// calculate opposite colour		$p = $v * (1 - $s);		// calculate distance between hex vertices		$f = ($h / 60) - $hi;		// coming in or going out?		if (!($hi & 1))		{			$f = 1 - $f;		}		// calculate adjacent colour		$q = $v * (1 - ($f * $s));		switch ($hi)		{			case 0:				$rgb = array($v, $q, $p);			break;			case 1:				$rgb = array($q, $v, $p);			break;			case 2:				$rgb = array($p, $v, $q);			break;			case 3:				$rgb = array($p, $q, $v);			break;			case 4:				$rgb = array($q, $p, $v);			break;			case 5:				$rgb = array($v, $p, $q);			break;			default:				return array(0, 0, 0);			break;		}		return array(255 * $rgb[0], 255 * $rgb[1], 255 * $rgb[2]);	}	/**	* (more than) Slightly altered from wikipedia's algorithm	*/	function rgb2hsv($rgb)	{		$r = min(255, max(0, $rgb[0]));		$g = min(255, max(0, $rgb[1]));		$b = min(255, max(0, $rgb[2]));		$max = max($r, $g, $b);		$min = min($r, $g, $b);		$v = $max / 255;		$s = (!$max) ? 0 : 1 - ($min / $max);		// if max - min is 0, we want hue to be 0 anyway.		$h = $max - $min;		if ($h)		{			switch ($max)			{				case $g:					$h = 120 + (60 * ($b - $r) / $h);				break;				case $b:					$h = 240 + (60 * ($r - $g) / $h);				break;				case $r:					$h = 360 + (60 * ($g - $b) / $h);				break;			}		}		colour_manager::normalize_hue($h);		return array($h, $s * 100, $v * 100);	}	/**	*/	function normalize_hue(&$hue)	{		$hue %= 360;		if ($hue < 0)		{			$hue += 360;		}	}	/**	* Alternate hue to hue	*/	function ah2h($ahue)	{		if (is_array($ahue))		{			$ahue[0] = colour_manager::ah2h($ahue[0]);			return $ahue;		}		colour_manager::normalize_hue($ahue);		// blue through red is already ok		if ($ahue >= 240)		{			return $ahue;		}		// ahue green is at 180		if ($ahue >= 180)		{			// return (240 - (2 * (240 - $ahue)));			return (2 * $ahue) - 240; // equivalent		}		// ahue yellow is at 120   (RYB rather than RGB)		if ($ahue >= 120)		{			return $ahue - 60;		}		return $ahue / 2;	}	/**	* hue to Alternate hue	*/	function h2ah($hue)	{		if (is_array($hue))		{			$hue[0] = colour_manager::h2ah($hue[0]);			return $hue;		}		colour_manager::normalize_hue($hue);		// blue through red is already ok		if ($hue >= 240)		{			return $hue;		}		else if ($hue <= 60)		{			return $hue * 2;		}		else if ($hue <= 120)		{			return $hue + 60;		}		else		{			return ($hue + 240) / 2;		}	}}?>
<?php/**** @package phpBB3* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @ignore*/define('IN_PHPBB', true);$phpbb_root_path = (defined('PHPBB_ROOT_PATH')) ? PHPBB_ROOT_PATH : './';$phpEx = substr(strrchr(__FILE__, '.'), 1);include($phpbb_root_path . 'common.' . $phpEx);// Start session management$user->session_begin();$auth->acl($user->data);$user->setup('memberlist');// Get and set some variables$mode		= request_var('mode', '');$session_id	= request_var('s', '');$start		= request_var('start', 0);$sort_key	= request_var('sk', 'b');$sort_dir	= request_var('sd', 'd');$show_guests= ($config['load_online_guests']) ? request_var('sg', 0) : 0;// Can this user view profiles/memberlist?if (!$auth->acl_gets('u_viewprofile', 'a_user', 'a_useradd', 'a_userdel')){	if ($user->data['user_id'] != ANONYMOUS)	{		trigger_error('NO_VIEW_USERS');	}	login_box('', $user->lang['LOGIN_EXPLAIN_VIEWONLINE']);}$sort_key_text = array('a' => $user->lang['SORT_USERNAME'], 'b' => $user->lang['SORT_JOINED'], 'c' => $user->lang['SORT_LOCATION']);$sort_key_sql = array('a' => 'u.username_clean', 'b' => 's.session_time', 'c' => 's.session_page');// Sorting and orderif (!isset($sort_key_text[$sort_key])){	$sort_key = 'b';}$order_by = $sort_key_sql[$sort_key] . ' ' . (($sort_dir == 'a') ? 'ASC' : 'DESC');// Whois requestedif ($mode == 'whois' && $auth->acl_get('a_') && $session_id){	include($phpbb_root_path . 'includes/functions_user.' . $phpEx);	$sql = 'SELECT u.user_id, u.username, u.user_type, s.session_ip		FROM ' . USERS_TABLE . ' u, ' . SESSIONS_TABLE . " s		WHERE s.session_id = '" . $db->sql_escape($session_id) . "'			AND	u.user_id = s.session_user_id";	$result = $db->sql_query($sql);	if ($row = $db->sql_fetchrow($result))	{		$template->assign_var('WHOIS', user_ipwhois($row['session_ip']));	}	$db->sql_freeresult($result);	// Output the page	page_header($user->lang['WHO_IS_ONLINE']);	$template->set_filenames(array(		'body' => 'viewonline_whois.html')	);	make_jumpbox(append_sid("{$phpbb_root_path}viewforum.$phpEx"));	page_footer();}// Forum info$sql = 'SELECT forum_id, forum_name, parent_id, forum_type, left_id, right_id	FROM ' . FORUMS_TABLE . '	ORDER BY left_id ASC';$result = $db->sql_query($sql, 600);$forum_data = array();while ($row = $db->sql_fetchrow($result)){	$forum_data[$row['forum_id']] = $row;}$db->sql_freeresult($result);$guest_counter = 0;// Get number of online guests (if we do not display them)if (!$show_guests){	switch ($db->sql_layer)	{		case 'sqlite':			$sql = 'SELECT COUNT(session_ip) as num_guests				FROM (					SELECT DISTINCT session_ip						FROM ' . SESSIONS_TABLE . '						WHERE session_user_id = ' . ANONYMOUS . '							AND session_time >= ' . (time() - ($config['load_online_time'] * 60)) .				')';		break;		default:			$sql = 'SELECT COUNT(DISTINCT session_ip) as num_guests				FROM ' . SESSIONS_TABLE . '				WHERE session_user_id = ' . ANONYMOUS . '					AND session_time >= ' . (time() - ($config['load_online_time'] * 60));		break;	}	$result = $db->sql_query($sql);	$guest_counter = (int) $db->sql_fetchfield('num_guests');	$db->sql_freeresult($result);}// Get user list$sql = 'SELECT u.user_id, u.username, u.username_clean, u.user_type, u.user_colour, s.session_id, s.session_time, s.session_page, s.session_ip, s.session_browser, s.session_viewonline, s.session_forum_id	FROM ' . USERS_TABLE . ' u, ' . SESSIONS_TABLE . ' s	WHERE u.user_id = s.session_user_id		AND s.session_time >= ' . (time() - ($config['load_online_time'] * 60)) .		((!$show_guests) ? ' AND s.session_user_id <> ' . ANONYMOUS : '') . '	ORDER BY ' . $order_by;$result = $db->sql_query($sql);$prev_id = $prev_ip = $user_list = array();$logged_visible_online = $logged_hidden_online = $counter = 0;while ($row = $db->sql_fetchrow($result)){	if ($row['user_id'] != ANONYMOUS && !isset($prev_id[$row['user_id']]))	{		$view_online = $s_user_hidden = false;		$user_colour = ($row['user_colour']) ? ' style="color:#' . $row['user_colour'] . '" class="username-coloured"' : '';		$username_full = ($row['user_type'] != USER_IGNORE) ? get_username_string('full', $row['user_id'], $row['username'], $row['user_colour']) : '<span' . $user_colour . '>' . $row['username'] . '</span>';		if (!$row['session_viewonline'])		{			$view_online = ($auth->acl_get('u_viewonline')) ? true : false;			$logged_hidden_online++;			$username_full = '<em>' . $username_full . '</em>';			$s_user_hidden = true;		}		else		{			$view_online = true;			$logged_visible_online++;		}		$prev_id[$row['user_id']] = 1;		if ($view_online)		{			$counter++;		}		if (!$view_online || $counter > $start + $config['topics_per_page'] || $counter <= $start)		{			continue;		}	}	else if ($show_guests && $row['user_id'] == ANONYMOUS && !isset($prev_ip[$row['session_ip']]))	{		$prev_ip[$row['session_ip']] = 1;		$guest_counter++;		$counter++;		if ($counter > $start + $config['topics_per_page'] || $counter <= $start)		{			continue;		}		$s_user_hidden = false;		$username_full = get_username_string('full', $row['user_id'], $user->lang['GUEST']);	}	else	{		continue;	}	preg_match('#^([a-z0-9/_-]+)#i', $row['session_page'], $on_page);	if (!sizeof($on_page))	{		$on_page[1] = '';	}	switch ($on_page[1])	{		case 'index':			$location = $user->lang['INDEX'];			$location_url = append_sid("{$phpbb_root_path}index.$phpEx");		break;		case 'adm/index':			$location = $user->lang['ACP'];			$location_url = append_sid("{$phpbb_root_path}index.$phpEx");		break;		case 'posting':		case 'viewforum':		case 'viewtopic':			$forum_id = $row['session_forum_id'];			if ($forum_id && $auth->acl_get('f_list', $forum_id))			{				$location = '';				$location_url = append_sid("{$phpbb_root_path}viewforum.$phpEx", 'f=' . $forum_id);				if ($forum_data[$forum_id]['forum_type'] == FORUM_LINK)				{					$location = sprintf($user->lang['READING_LINK'], $forum_data[$forum_id]['forum_name']);					break;				}				switch ($on_page[1])				{					case 'posting':						preg_match('#mode=([a-z]+)#', $row['session_page'], $on_page);						$posting_mode = (!empty($on_page[1])) ? $on_page[1] : '';						switch ($posting_mode)						{							case 'reply':							case 'quote':								$location = sprintf($user->lang['REPLYING_MESSAGE'], $forum_data[$forum_id]['forum_name']);							break;							default:								$location = sprintf($user->lang['POSTING_MESSAGE'], $forum_data[$forum_id]['forum_name']);							break;						}					break;					case 'viewtopic':						$location = sprintf($user->lang['READING_TOPIC'], $forum_data[$forum_id]['forum_name']);					break;					case 'viewforum':						$location = sprintf($user->lang['READING_FORUM'], $forum_data[$forum_id]['forum_name']);					break;				}			}			else			{				$location = $user->lang['INDEX'];				$location_url = append_sid("{$phpbb_root_path}index.$phpEx");			}		break;		case 'search':			$location = $user->lang['SEARCHING_FORUMS'];			$location_url = append_sid("{$phpbb_root_path}search.$phpEx");		break;		case 'faq':			$location = $user->lang['VIEWING_FAQ'];			$location_url = append_sid("{$phpbb_root_path}faq.$phpEx");		break;		case 'viewonline':			$location = $user->lang['VIEWING_ONLINE'];			$location_url = append_sid("{$phpbb_root_path}viewonline.$phpEx");		break;		case 'memberlist':			$location = (strpos($row['session_page'], 'mode=viewprofile') !== false) ? $user->lang['VIEWING_MEMBER_PROFILE'] : $user->lang['VIEWING_MEMBERS'];			$location_url = append_sid("{$phpbb_root_path}memberlist.$phpEx");		break;		case 'mcp':			$location = $user->lang['VIEWING_MCP'];			$location_url = append_sid("{$phpbb_root_path}index.$phpEx");		break;		case 'ucp':			$location = $user->lang['VIEWING_UCP'];			// Grab some common modules			$url_params = array(				'mode=register'		=> 'VIEWING_REGISTER',				'i=pm&mode=compose'	=> 'POSTING_PRIVATE_MESSAGE',				'i=pm&'				=> 'VIEWING_PRIVATE_MESSAGES',				'i=profile&'		=> 'CHANGING_PROFILE',				'i=prefs&'			=> 'CHANGING_PREFERENCES',			);			foreach ($url_params as $param => $lang)			{				if (strpos($row['session_page'], $param) !== false)				{					$location = $user->lang[$lang];					break;				}			}			$location_url = append_sid("{$phpbb_root_path}index.$phpEx");		break;		case 'download/file':			$location = $user->lang['DOWNLOADING_FILE'];			$location_url = append_sid("{$phpbb_root_path}index.$phpEx");		break;		case 'report':			$location = $user->lang['REPORTING_POST'];			$location_url = append_sid("{$phpbb_root_path}index.$phpEx");		break;		default:			$location = $user->lang['INDEX'];			$location_url = append_sid("{$phpbb_root_path}index.$phpEx");		break;	}	$template->assign_block_vars('user_row', array(		'USERNAME' 			=> $row['username'],		'USERNAME_COLOUR'	=> $row['user_colour'],		'USERNAME_FULL'		=> $username_full,		'LASTUPDATE'		=> $user->format_date($row['session_time']),		'FORUM_LOCATION'	=> $location,		'USER_IP'			=> ($auth->acl_get('a_')) ? (($mode == 'lookup' && $session_id == $row['session_id']) ? gethostbyaddr($row['session_ip']) : $row['session_ip']) : '',		'USER_BROWSER'		=> ($auth->acl_get('a_user')) ? $row['session_browser'] : '',		'U_USER_PROFILE'	=> ($row['user_type'] != USER_IGNORE) ? get_username_string('profile', $row['user_id'], '') : '',		'U_USER_IP'			=> append_sid("{$phpbb_root_path}viewonline.$phpEx", 'mode=lookup' . (($mode != 'lookup' || $row['session_id'] != $session_id) ? '&amp;s=' . $row['session_id'] : '') . "&amp;sg=$show_guests&amp;start=$start&amp;sk=$sort_key&amp;sd=$sort_dir"),		'U_WHOIS'			=> append_sid("{$phpbb_root_path}viewonline.$phpEx", 'mode=whois&amp;s=' . $row['session_id']),		'U_FORUM_LOCATION'	=> $location_url,		'S_USER_HIDDEN'		=> $s_user_hidden,		'S_GUEST'			=> ($row['user_id'] == ANONYMOUS) ? true : false,		'S_USER_TYPE'		=> $row['user_type'],	));}$db->sql_freeresult($result);unset($prev_id, $prev_ip);// Generate reg/hidden/guest online text$vars_online = array(	'REG'	=> array('logged_visible_online', 'l_r_user_s'),	'HIDDEN'=> array('logged_hidden_online', 'l_h_user_s'),	'GUEST'	=> array('guest_counter', 'l_g_user_s'));foreach ($vars_online as $l_prefix => $var_ary){	switch ($$var_ary[0])	{		case 0:			$$var_ary[1] = $user->lang[$l_prefix . '_USERS_ZERO_ONLINE'];		break;		case 1:			$$var_ary[1] = $user->lang[$l_prefix . '_USER_ONLINE'];		break;		default:			$$var_ary[1] = $user->lang[$l_prefix . '_USERS_ONLINE'];		break;	}}unset($vars_online);$pagination = generate_pagination(append_sid("{$phpbb_root_path}viewonline.$phpEx", "sg=$show_guests&amp;sk=$sort_key&amp;sd=$sort_dir"), $counter, $config['topics_per_page'], $start);// Grab group details for legend displayif ($auth->acl_gets('a_group', 'a_groupadd', 'a_groupdel')){	$sql = 'SELECT group_id, group_name, group_colour, group_type		FROM ' . GROUPS_TABLE . '		WHERE group_legend = 1		ORDER BY group_name ASC';}else{	$sql = 'SELECT g.group_id, g.group_name, g.group_colour, g.group_type		FROM ' . GROUPS_TABLE . ' g		LEFT JOIN ' . USER_GROUP_TABLE . ' ug			ON (				g.group_id = ug.group_id				AND ug.user_id = ' . $user->data['user_id'] . '				AND ug.user_pending = 0			)		WHERE g.group_legend = 1			AND (g.group_type <> ' . GROUP_HIDDEN . ' OR ug.user_id = ' . $user->data['user_id'] . ')		ORDER BY g.group_name ASC';}$result = $db->sql_query($sql);$legend = '';while ($row = $db->sql_fetchrow($result)){	if ($row['group_name'] == 'BOTS')	{		$legend .= (($legend != '') ? ', ' : '') . '<span style="color:#' . $row['group_colour'] . '">' . $user->lang['G_BOTS'] . '</span>';	}	else	{		$legend .= (($legend != '') ? ', ' : '') . '<a style="color:#' . $row['group_colour'] . '" href="' . append_sid("{$phpbb_root_path}memberlist.$phpEx", 'mode=group&amp;g=' . $row['group_id']) . '">' . (($row['group_type'] == GROUP_SPECIAL) ? $user->lang['G_' . $row['group_name']] : $row['group_name']) . '</a>';	}}$db->sql_freeresult($result);// Refreshing the page every 60 seconds...meta_refresh(60, append_sid("{$phpbb_root_path}viewonline.$phpEx", "sg=$show_guests&amp;sk=$sort_key&amp;sd=$sort_dir&amp;start=$start"));// Send data to template$template->assign_vars(array(	'TOTAL_REGISTERED_USERS_ONLINE'	=> sprintf($l_r_user_s, $logged_visible_online) . sprintf($l_h_user_s, $logged_hidden_online),	'TOTAL_GUEST_USERS_ONLINE'		=> sprintf($l_g_user_s, $guest_counter),	'LEGEND'						=> $legend,	'PAGINATION'					=> $pagination,	'PAGE_NUMBER'					=> on_page($counter, $config['topics_per_page'], $start),	'U_SORT_USERNAME'		=> append_sid("{$phpbb_root_path}viewonline.$phpEx", 'sk=a&amp;sd=' . (($sort_key == 'a' && $sort_dir == 'a') ? 'd' : 'a') . '&amp;sg=' . ((int) $show_guests)),	'U_SORT_UPDATED'		=> append_sid("{$phpbb_root_path}viewonline.$phpEx", 'sk=b&amp;sd=' . (($sort_key == 'b' && $sort_dir == 'a') ? 'd' : 'a') . '&amp;sg=' . ((int) $show_guests)),	'U_SORT_LOCATION'		=> append_sid("{$phpbb_root_path}viewonline.$phpEx", 'sk=c&amp;sd=' . (($sort_key == 'c' && $sort_dir == 'a') ? 'd' : 'a') . '&amp;sg=' . ((int) $show_guests)),	'U_SWITCH_GUEST_DISPLAY'	=> append_sid("{$phpbb_root_path}viewonline.$phpEx", 'sg=' . ((int) !$show_guests)),	'L_SWITCH_GUEST_DISPLAY'	=> ($show_guests) ? $user->lang['HIDE_GUESTS'] : $user->lang['DISPLAY_GUESTS'],	'S_SWITCH_GUEST_DISPLAY'	=> ($config['load_online_guests']) ? true : false));// We do not need to load the who is online box here. ;)$config['load_online'] = false;// Output the pagepage_header($user->lang['WHO_IS_ONLINE']);$template->set_filenames(array(	'body' => 'viewonline_body.html'));make_jumpbox(append_sid("{$phpbb_root_path}viewforum.$phpEx"));page_footer();?>
<?php/**** @package acp* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @package module_install*/class acp_bots_info{	function module()	{		return array(			'filename'	=> 'acp_bots',			'title'		=> 'ACP_BOTS',			'version'	=> '1.0.0',			'modes'		=> array(				'bots'		=> array('title' => 'ACP_BOTS', 'auth' => 'acl_a_bots', 'cat' => array('ACP_GENERAL_TASKS')),			),		);	}	function install()	{	}	function uninstall()	{	}}?>
<?php return array(''=>'i',''=>'!',''=>'a',''=>' ',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'o',''=>'o',''=>'',''=>' ',''=>' ',''=>' ',''=>' ',''=>' ',''=>' ',''=>' ',''=>' ',''=>' ',''=>' ',''=>' ',''=>' ',''=>' ',''=>' ',''=>' ',''=>'`',''=>'`',''=>'',''=>'^',''=>'^',''=>'_',''=>'_',''=>'_',''=>'_',''=>'',''=>'-',''=>'-',''=>'-',''=>'-',''=>'-',''=>'-',''=>'',''=>'',''=>'',''=>',',''=>',',''=>'',''=>'',''=>';',''=>';',''=>':',''=>':',''=>':',''=>':',''=>'::=',''=>'.',''=>'.',''=>'.',''=>'..',''=>'...',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'4',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'L',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'(',''=>'(1)',''=>'(l)',''=>'(10)',''=>'(11)',''=>'(12)',''=>'(13)',''=>'(14)',''=>'(15)',''=>'(16)',''=>'(17)',''=>'(18)',''=>'(19)',''=>'(2)',''=>'(20)',''=>'(3)',''=>'(4)',''=>'(5)',''=>'(6)',''=>'(7)',''=>'(8)',''=>'(9)',''=>'(a)',''=>'(b)',''=>'(c)',''=>'(d)',''=>'(e)',''=>'(f)',''=>'(g)',''=>'(h)',''=>'(i)',''=>'(j)',''=>'(k)',''=>'(m)',''=>'(n)',''=>'(o)',''=>'(p)',''=>'(q)',''=>'(r)',''=>'(s)',''=>'(t)',''=>'(u)',''=>'(v)',''=>'(w)',''=>'(x)',''=>'(y)',''=>'(z)',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>')',''=>'[',''=>'[',''=>']',''=>']',''=>'{',''=>'}',''=>'',''=>'',''=>'',''=>'',''=>'@',''=>'*',''=>'/',''=>'/',''=>'/',''=>'\\',''=>'&',''=>'#',''=>'%',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'','\''=>'',''=>'',''=>'',''=>'',''=>'',''=>'','"'=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'+',''=>'+',''=>'<',''=>'<',''=>'=',''=>'==',''=>'===',''=>'>',''=>'>',''=>'',''=>'',''=>'~',''=>'~',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'$',''=>'',''=>'Y',''=>'W',''=>'0',''=>'0',''=>'0',''=>'0',''=>'0',''=>'0',''=>'0',''=>'0',''=>'0',''=>'0',''=>'0',''=>'0',''=>'0',''=>'0',''=>'0',''=>'0',''=>'0',''=>'0',''=>'0',''=>'0',''=>'0',''=>'0',''=>'0',''=>'0',''=>'0',''=>'0',''=>'0',''=>'0',''=>'0',''=>'0',''=>'0',''=>'0',''=>'0',''=>'0',''=>'0',''=>'0',''=>'0',''=>'0',''=>'0',''=>'0',''=>'0',''=>'0',''=>'0',''=>'0',''=>'',''=>'',''=>'0',''=>'1',''=>'1',''=>'1',''=>'1',''=>'1',''=>'1',''=>'1',''=>'1',''=>'1',''=>'1',''=>'1',''=>'1',''=>'1',''=>'1',''=>'1',''=>'1',''=>'1',''=>'1',''=>'1','l'=>'l',''=>'l',''=>'1',''=>'l',''=>'l',''=>'l',''=>'l',''=>'l',''=>'l',''=>'l',''=>'l',''=>'l',''=>'l',''=>'l',''=>'l',''=>'l',''=>'l',''=>'l',''=>'l',''=>'l',''=>'l',''=>'l',''=>'',''=>'l',''=>'l',''=>'l',''=>'l',''=>'',''=>'1.',''=>'l',''=>'1',''=>'',''=>'10.',''=>'10',''=>'10',''=>'10',''=>'11.',''=>'11',''=>'11',''=>'11',''=>'12.',''=>'12',''=>'12',''=>'12',''=>'13.',''=>'13',''=>'13',''=>'14.',''=>'14',''=>'14',''=>'15.',''=>'15',''=>'15',''=>'16.',''=>'16',''=>'16',''=>'17.',''=>'17',''=>'17',''=>'18.',''=>'18',''=>'18',''=>'19.',''=>'19',''=>'19',''=>'lj',''=>'1',''=>'1',''=>'1',''=>'2',''=>'2',''=>'2',''=>'2',''=>'2',''=>'2',''=>'2',''=>'',''=>'',''=>'2.',''=>'20.',''=>'20',''=>'20',''=>'21',''=>'21',''=>'22',''=>'22',''=>'23',''=>'23',''=>'24',''=>'24',''=>'25',''=>'26',''=>'27',''=>'28',''=>'29',''=>'2',''=>'2',''=>'2',''=>'3',''=>'3',''=>'3',''=>'3',''=>'3',''=>'3',''=>'',''=>'',''=>'3.',''=>'30',''=>'31',''=>'3',''=>'3',''=>'3',''=>'4',''=>'4',''=>'4',''=>'4',''=>'4',''=>'4',''=>'4',''=>'',''=>'4.',''=>'4',''=>'4',''=>'4',''=>'4',''=>'5',''=>'5',''=>'5',''=>'5',''=>'5',''=>'5',''=>'',''=>'5.',''=>'5',''=>'5',''=>'5',''=>'6',''=>'6',''=>'6',''=>'6',''=>'6',''=>'6',''=>'6',''=>'',''=>'6.',''=>'6',''=>'6',''=>'6',''=>'7',''=>'7',''=>'7',''=>'7',''=>'7',''=>'7',''=>'',''=>'',''=>'7.',''=>'7',''=>'7',''=>'7',''=>'8',''=>'8',''=>'8',''=>'8',''=>'8',''=>'8',''=>'8',''=>'8',''=>'8',''=>'8',''=>'',''=>'',''=>'8.',''=>'8',''=>'8',''=>'8',''=>'9',''=>'9',''=>'9',''=>'9',''=>'9',''=>'9',''=>'9',''=>'9',''=>'9',''=>'',''=>'',''=>'9.',''=>'9',''=>'9',''=>'9',''=>'a',''=>'a',''=>'a',''=>'a',''=>'a',''=>'a',''=>'a',''=>'a',''=>'a',''=>'a',''=>'a',''=>'a',''=>'a',''=>'a',''=>'a/c',''=>'a/s',''=>'ae',''=>'b',''=>'b',''=>'b',''=>'b',''=>'b',''=>'b',''=>'b',''=>'b',''=>'b',''=>'b',''=>'b',''=>'b',''=>'b',''=>'b',''=>'b',''=>'b',''=>'b',''=>'c',''=>'c',''=>'c',''=>'c',''=>'c',''=>'c',''=>'c',''=>'c',''=>'c',''=>'c',''=>'c',''=>'c',''=>'c',''=>'c',''=>'c',''=>'c',''=>'c',''=>'c',''=>'c',''=>'c',''=>'c/o',''=>'c/u',''=>'d',''=>'d',''=>'d',''=>'d',''=>'d',''=>'d',''=>'d',''=>'d',''=>'d',''=>'d',''=>'d',''=>'d',''=>'d',''=>'d',''=>'d',''=>'d',''=>'d',''=>'d',''=>'d',''=>'d',''=>'dz',''=>'d',''=>'e',''=>'e',''=>'e',''=>'e',''=>'e',''=>'e',''=>'e',''=>'e',''=>'e',''=>'e',''=>'e',''=>'e',''=>'e',''=>'e',''=>'e',''=>'E',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'f',''=>'f',''=>'f',''=>'f',''=>'f',''=>'f',''=>'f',''=>'f',''=>'f',''=>'f',''=>'f',''=>'f',''=>'f',''=>'f',''=>'f',''=>'g',''=>'g',''=>'g',''=>'g',''=>'g',''=>'g',''=>'g',''=>'g',''=>'g',''=>'g',''=>'g',''=>'g',''=>'g',''=>'g',''=>'g',''=>'g',''=>'g',''=>'h',''=>'h',''=>'h',''=>'h',''=>'h',''=>'h',''=>'h',''=>'h',''=>'h',''=>'h',''=>'h',''=>'h',''=>'h',''=>'h',''=>'h',''=>'h',''=>'h',''=>'',''=>'',''=>'',''=>'',''=>'i',''=>'i',''=>'i',''=>'i',''=>'i',''=>'i',''=>'i',''=>'i',''=>'i',''=>'i',''=>'i',''=>'i',''=>'i',''=>'i',''=>'i',''=>'i',''=>'i',''=>'i',''=>'i',''=>'i',''=>'i',''=>'i',''=>'i',''=>'i',''=>'i',''=>'i',''=>'i',''=>'i',''=>'ii',''=>'iii',''=>'ij',''=>'iv',''=>'ix',''=>'j',''=>'j',''=>'j',''=>'j',''=>'j',''=>'j',''=>'j',''=>'j',''=>'j',''=>'j',''=>'j',''=>'j',''=>'j',''=>'j',''=>'j',''=>'j',''=>'',''=>'k',''=>'k',''=>'k',''=>'k',''=>'k',''=>'k',''=>'k',''=>'k',''=>'k',''=>'k',''=>'k',''=>'k',''=>'k',''=>'k',''=>'k',''=>'m',''=>'m',''=>'m',''=>'m',''=>'m',''=>'m',''=>'m',''=>'m',''=>'m',''=>'m',''=>'m',''=>'m',''=>'m',''=>'m',''=>'m',''=>'m',''=>'n',''=>'n',''=>'n',''=>'n',''=>'n',''=>'n',''=>'n',''=>'n',''=>'n',''=>'n',''=>'n',''=>'n',''=>'n',''=>'n',''=>'N',''=>'N',''=>'N',''=>'N',''=>'N',''=>'N',''=>'N',''=>'N',''=>'N',''=>'N',''=>'N',''=>'N',''=>'N',''=>'N',''=>'N',''=>'N',''=>'N',''=>'',''=>'n',''=>'n',''=>'n',''=>'n',''=>'n',''=>'n',''=>'n',''=>'nj',''=>'o',''=>'o',''=>'o',''=>'o',''=>'o',''=>'o',''=>'o',''=>'o',''=>'o',''=>'o',''=>'o',''=>'o',''=>'o',''=>'o',''=>'o',''=>'o',''=>'o',''=>'o',''=>'o',''=>'o',''=>'o',''=>'o',''=>'o',''=>'oe',''=>'o',''=>'p',''=>'p',''=>'p',''=>'p',''=>'p',''=>'p',''=>'p',''=>'p',''=>'p',''=>'p',''=>'p',''=>'p',''=>'p',''=>'p',''=>'p',''=>'p',''=>'p',''=>'p',''=>'p',''=>'p',''=>'p',''=>'p',''=>'p',''=>'p',''=>'p',''=>'p',''=>'q',''=>'q',''=>'q',''=>'q',''=>'q',''=>'q',''=>'q',''=>'q',''=>'q',''=>'q',''=>'q',''=>'q',''=>'q',''=>'q',''=>'Q',''=>'Q',''=>'Q',''=>'Q',''=>'Q',''=>'Q',''=>'Q',''=>'Q',''=>'Q',''=>'Q',''=>'Q',''=>'Q',''=>'q',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'r',''=>'r',''=>'r',''=>'r',''=>'r',''=>'r',''=>'r',''=>'r',''=>'r',''=>'r',''=>'r',''=>'r',''=>'r',''=>'r',''=>'r',''=>'r',''=>'s',''=>'s',''=>'s',''=>'s',''=>'s',''=>'s',''=>'s',''=>'s',''=>'s',''=>'s',''=>'s',''=>'s',''=>'s',''=>'s',''=>'s',''=>'s',''=>'',''=>'',''=>'',''=>'',''=>'t',''=>'t',''=>'t',''=>'t',''=>'t',''=>'t',''=>'t',''=>'t',''=>'t',''=>'t',''=>'t',''=>'t',''=>'t',''=>'t',''=>'T',''=>'T',''=>'T',''=>'T',''=>'T',''=>'T',''=>'T',''=>'T',''=>'T',''=>'T',''=>'T',''=>'T',''=>'T',''=>'T',''=>'T',''=>'T',''=>'T',''=>'t',''=>'',''=>'',''=>'t',''=>'u',''=>'u',''=>'u',''=>'u',''=>'u',''=>'u',''=>'u',''=>'u',''=>'u',''=>'u',''=>'u',''=>'u',''=>'u',''=>'u',''=>'u',''=>'u',''=>'u',''=>'u',''=>'u',''=>'u',''=>'u',''=>'U',''=>'U',''=>'U',''=>'U',''=>'U',''=>'U',''=>'U',''=>'U',''=>'U',''=>'U',''=>'U',''=>'U',''=>'v',''=>'v',''=>'v',''=>'v',''=>'v',''=>'v',''=>'v',''=>'v',''=>'v',''=>'v',''=>'v',''=>'v',''=>'v',''=>'v',''=>'v',''=>'v',''=>'v',''=>'v',''=>'v',''=>'v',''=>'vi',''=>'vii',''=>'viii',''=>'w',''=>'w',''=>'w',''=>'w',''=>'w',''=>'w',''=>'w',''=>'w',''=>'w',''=>'w',''=>'w',''=>'w',''=>'w',''=>'w',''=>'w',''=>'W',''=>'W',''=>'W',''=>'W',''=>'W',''=>'W',''=>'W',''=>'W',''=>'W',''=>'W',''=>'W',''=>'W',''=>'x',''=>'x',''=>'x',''=>'x',''=>'x',''=>'x',''=>'x',''=>'x',''=>'x',''=>'x',''=>'x',''=>'x',''=>'x',''=>'x',''=>'x',''=>'x',''=>'X',''=>'X',''=>'X',''=>'X',''=>'X',''=>'X',''=>'X',''=>'X',''=>'X',''=>'X',''=>'X',''=>'X',''=>'X',''=>'X',''=>'X',''=>'X',''=>'X',''=>'X',''=>'xi',''=>'xii',''=>'y',''=>'y',''=>'y',''=>'y',''=>'y',''=>'y',''=>'y',''=>'y',''=>'y',''=>'y',''=>'y',''=>'y',''=>'y',''=>'y',''=>'y',''=>'z',''=>'z',''=>'z',''=>'z',''=>'z',''=>'z',''=>'z',''=>'z',''=>'z',''=>'z',''=>'z',''=>'z',''=>'z',''=>'z',''=>'z',''=>'z',''=>'z',''=>'','?'=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'','!'=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'Y',''=>'Y',''=>'Y',''=>'Y',''=>'Y',''=>'Y',''=>'Y',''=>'Y',''=>'Y',''=>'Y',''=>'Y',''=>'Y',''=>'Y',''=>'Y',''=>'Y',''=>'Y',''=>'Y',''=>'Y',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'ae',''=>'r',''=>'r',''=>'',''=>'',''=>'i',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'o',''=>'o',''=>'c',''=>'',''=>'y',''=>'y',''=>'h',''=>'',''=>'',''=>'',''=>'',''=>'q',''=>'n',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>' ',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'   ',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'o',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'y',''=>'A',''=>'A',''=>'A',''=>'A',''=>'A',''=>'A',''=>'A',''=>'A',''=>'A',''=>'A',''=>'A',''=>'A',''=>'A',''=>'A',''=>'A',''=>'A',''=>'A',''=>'A',''=>'J',''=>'J',''=>'J',''=>'J',''=>'J',''=>'J',''=>'J',''=>'J',''=>'J',''=>'J',''=>'J',''=>'J',''=>'J',''=>'J',''=>'E',''=>'E',''=>'E',''=>'E',''=>'E',''=>'E',''=>'E',''=>'E',''=>'E',''=>'E',''=>'E',''=>'E',''=>'E',''=>'E',''=>'E',''=>'E',''=>'E',''=>'E',''=>'E',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'w',''=>'M',''=>'M',''=>'M',''=>'M',''=>'M',''=>'M',''=>'M',''=>'M',''=>'M',''=>'M',''=>'M',''=>'M',''=>'M',''=>'M',''=>'M',''=>'M',''=>'M',''=>'M',''=>'H',''=>'H',''=>'H',''=>'H',''=>'H',''=>'H',''=>'H',''=>'H',''=>'H',''=>'H',''=>'H',''=>'H',''=>'H',''=>'H',''=>'H',''=>'H',''=>'H',''=>'H',''=>'G',''=>'G',''=>'G',''=>'G',''=>'G',''=>'G',''=>'G',''=>'G',''=>'G',''=>'G',''=>'G',''=>'G',''=>'G',''=>'G',''=>'Z',''=>'Z',''=>'Z',''=>'Z',''=>'Z',''=>'Z',''=>'Z',''=>'Z',''=>'Z',''=>'Z',''=>'Z',''=>'Z',''=>'Z',''=>'Z',''=>'Z',''=>'Z',''=>'Z',''=>'Z',''=>'S',''=>'S',''=>'S',''=>'S',''=>'S',''=>'S',''=>'S',''=>'S',''=>'S',''=>'S',''=>'S',''=>'S',''=>'S',''=>'S',''=>'V',''=>'V',''=>'V',''=>'V',''=>'V',''=>'V',''=>'V',''=>'V',''=>'V',''=>'V',''=>'V',''=>'V',''=>'V',''=>'L',''=>'L',''=>'L',''=>'L',''=>'L',''=>'L',''=>'L',''=>'L',''=>'L',''=>'L',''=>'L',''=>'L',''=>'L',''=>'C',''=>'C',''=>'C',''=>'C',''=>'C',''=>'C',''=>'C',''=>'C',''=>'C',''=>'C',''=>'C',''=>'C',''=>'C',''=>'C',''=>'C',''=>'C',''=>'C',''=>'C',''=>'C',''=>'C',''=>'P',''=>'P',''=>'P',''=>'P',''=>'P',''=>'P',''=>'P',''=>'P',''=>'P',''=>'P',''=>'P',''=>'P',''=>'P',''=>'P',''=>'P',''=>'P',''=>'P',''=>'P',''=>'K',''=>'K',''=>'K',''=>'K',''=>'K',''=>'K',''=>'K',''=>'K',''=>'K',''=>'K',''=>'K',''=>'K',''=>'K',''=>'K',''=>'K',''=>'K',''=>'K',''=>'K',''=>'B',''=>'B',''=>'B',''=>'B',''=>'B',''=>'B',''=>'B',''=>'B',''=>'B',''=>'B',''=>'B',''=>'B',''=>'B',''=>'B',''=>'B',''=>'B',''=>'B',''=>'B',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'P',''=>'d',''=>'J',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'P',''=>'P',''=>'',''=>'d',''=>'d',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'J',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'x',''=>'x',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'P',''=>'',''=>'d',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'R',''=>'R',''=>'R',''=>'R',''=>'R',''=>'R',''=>'R',''=>'R',''=>'R',''=>'R',''=>'R',''=>'R',''=>'R',''=>'',''=>'',''=>'',''=>'',''=>'J',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'J',''=>'',''=>'',''=>'',''=>'F',''=>'F',''=>'F',''=>'F',''=>'F',''=>'F',''=>'F',''=>'F',''=>'F',''=>'F',''=>'F',''=>'F',''=>'F',''=>'F',''=>'D',''=>'D',''=>'D',''=>'D',''=>'D',''=>'D',''=>'D',''=>'D',''=>'D',''=>'D',''=>'D',''=>'D',''=>'D',''=>'D',''=>'D',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'','|'=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'C',''=>'F',''=>'',''=>'FAX',''=>'N',''=>'No',''=>'Q',''=>'Rs',''=>'T',''=>'TEL',''=>'U',''=>'W',''=>'W',''=>'X',''=>'Y',''=>'',''=>'',''=>'',''=>'c',''=>'Y',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'b',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'a',''=>'b',''=>'b',''=>'c',''=>'d',''=>'d',''=>'e',''=>'',''=>'',''=>'',''=>'f',''=>'g',''=>'h',''=>'h',''=>'h',''=>'h',''=>'i',''=>'i',''=>'i',''=>'j',''=>'j',''=>'m',''=>'n',''=>'n',''=>'o',''=>'o',''=>'o',''=>'o',''=>'o',''=>'o',''=>'o',''=>'o',''=>'o',''=>'o',''=>'o',''=>'o',''=>'p',''=>'p',''=>'',''=>'q',''=>'',''=>'',''=>'r',''=>'r',''=>'s',''=>'u',''=>'u',''=>'v',''=>'v',''=>'w',''=>'w',''=>'x',''=>'x',''=>'y',''=>'y',''=>'',''=>'',''=>'',''=>'',''=>'i',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'A',''=>'J',''=>'H',''=>'V',''=>'P',''=>'B',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'A',''=>'B',''=>'C',''=>'D',''=>'E',''=>'F',''=>'G',''=>'H',''=>'J',''=>'K',''=>'L',''=>'M',''=>'P',''=>'R',''=>'S',''=>'V',''=>'Z');
<?php/**** @package acp* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @ignore*/if (!defined('IN_PHPBB')){	exit;}/*** @package acp*/class acp_main{	var $u_action;	function main($id, $mode)	{		global $config, $db, $user, $auth, $template;		global $phpbb_root_path, $phpbb_admin_path, $phpEx;		// Show restore permissions notice		if ($user->data['user_perm_from'] && $auth->acl_get('a_switchperm'))		{			$this->tpl_name = 'acp_main';			$this->page_title = 'ACP_MAIN';			$sql = 'SELECT user_id, username, user_colour				FROM ' . USERS_TABLE . '				WHERE user_id = ' . $user->data['user_perm_from'];			$result = $db->sql_query($sql);			$user_row = $db->sql_fetchrow($result);			$db->sql_freeresult($result);			$perm_from = '<strong' . (($user_row['user_colour']) ? ' style="color: #' . $user_row['user_colour'] . '">' : '>');			$perm_from .= ($user_row['user_id'] != ANONYMOUS) ? '<a href="' . append_sid("{$phpbb_root_path}memberlist.$phpEx", 'mode=viewprofile&amp;u=' . $user_row['user_id']) . '">' : '';			$perm_from .= $user_row['username'];			$perm_from .= ($user_row['user_id'] != ANONYMOUS) ? '</a>' : '';			$perm_from .= '</strong>';			$template->assign_vars(array(				'S_RESTORE_PERMISSIONS'		=> true,				'U_RESTORE_PERMISSIONS'		=> append_sid("{$phpbb_root_path}ucp.$phpEx", 'mode=restore_perm'),				'PERM_FROM'					=> $perm_from,				'L_PERMISSIONS_TRANSFERRED_EXPLAIN'	=> sprintf($user->lang['PERMISSIONS_TRANSFERRED_EXPLAIN'], $perm_from, append_sid("{$phpbb_root_path}ucp.$phpEx", 'mode=restore_perm')),			));			return;		}		$action = request_var('action', '');		if ($action)		{			if ($action === 'admlogout')			{				$user->unset_admin();				$redirect_url = append_sid("{$phpbb_root_path}index.$phpEx");				meta_refresh(3, $redirect_url);				trigger_error($user->lang['ADM_LOGGED_OUT'] . '<br /><br />' . sprintf($user->lang['RETURN_INDEX'], '<a href="' . $redirect_url . '">', '</a>'));			}			if (!confirm_box(true))			{				switch ($action)				{					case 'online':						$confirm = true;						$confirm_lang = 'RESET_ONLINE_CONFIRM';					break;					case 'stats':						$confirm = true;						$confirm_lang = 'RESYNC_STATS_CONFIRM';					break;					case 'user':						$confirm = true;						$confirm_lang = 'RESYNC_POSTCOUNTS_CONFIRM';					break;					case 'date':						$confirm = true;						$confirm_lang = 'RESET_DATE_CONFIRM';					break;					case 'db_track':						$confirm = true;						$confirm_lang = 'RESYNC_POST_MARKING_CONFIRM';					break;					case 'purge_cache':						$confirm = true;						$confirm_lang = 'PURGE_CACHE_CONFIRM';					break;					case 'purge_sessions':						$confirm = true;						$confirm_lang = 'PURGE_SESSIONS_CONFIRM';					break;					default:						$confirm = true;						$confirm_lang = 'CONFIRM_OPERATION';				}				if ($confirm)				{					confirm_box(false, $user->lang[$confirm_lang], build_hidden_fields(array(						'i'			=> $id,						'mode'		=> $mode,						'action'	=> $action,					)));				}			}			else			{				switch ($action)				{					case 'online':						if (!$auth->acl_get('a_board'))						{							trigger_error($user->lang['NO_AUTH_OPERATION'] . adm_back_link($this->u_action), E_USER_WARNING);						}						set_config('record_online_users', 1, true);						set_config('record_online_date', time(), true);						add_log('admin', 'LOG_RESET_ONLINE');					break;					case 'stats':						if (!$auth->acl_get('a_board'))						{							trigger_error($user->lang['NO_AUTH_OPERATION'] . adm_back_link($this->u_action), E_USER_WARNING);						}						$sql = 'SELECT COUNT(post_id) AS stat							FROM ' . POSTS_TABLE . '							WHERE post_approved = 1';						$result = $db->sql_query($sql);						set_config('num_posts', (int) $db->sql_fetchfield('stat'), true);						$db->sql_freeresult($result);						$sql = 'SELECT COUNT(topic_id) AS stat							FROM ' . TOPICS_TABLE . '							WHERE topic_approved = 1';						$result = $db->sql_query($sql);						set_config('num_topics', (int) $db->sql_fetchfield('stat'), true);						$db->sql_freeresult($result);						$sql = 'SELECT COUNT(user_id) AS stat							FROM ' . USERS_TABLE . '							WHERE user_type IN (' . USER_NORMAL . ',' . USER_FOUNDER . ')';						$result = $db->sql_query($sql);						set_config('num_users', (int) $db->sql_fetchfield('stat'), true);						$db->sql_freeresult($result);						$sql = 'SELECT COUNT(attach_id) as stat							FROM ' . ATTACHMENTS_TABLE . '							WHERE is_orphan = 0';						$result = $db->sql_query($sql);						set_config('num_files', (int) $db->sql_fetchfield('stat'), true);						$db->sql_freeresult($result);						$sql = 'SELECT SUM(filesize) as stat							FROM ' . ATTACHMENTS_TABLE . '							WHERE is_orphan = 0';						$result = $db->sql_query($sql);						set_config('upload_dir_size', (float) $db->sql_fetchfield('stat'), true);						$db->sql_freeresult($result);						if (!function_exists('update_last_username'))						{							include($phpbb_root_path . "includes/functions_user.$phpEx");						}						update_last_username();						add_log('admin', 'LOG_RESYNC_STATS');					break;					case 'user':						if (!$auth->acl_get('a_board'))						{							trigger_error($user->lang['NO_AUTH_OPERATION'] . adm_back_link($this->u_action), E_USER_WARNING);						}						// Resync post counts						$start = $max_post_id = 0;						// Find the maximum post ID, we can only stop the cycle when we've reached it						$sql = 'SELECT MAX(forum_last_post_id) as max_post_id							FROM ' . FORUMS_TABLE;						$result = $db->sql_query($sql);						$max_post_id = (int) $db->sql_fetchfield('max_post_id');						$db->sql_freeresult($result);						// No maximum post id? :o						if (!$max_post_id)						{							$sql = 'SELECT MAX(post_id)								FROM ' . POSTS_TABLE;							$result = $db->sql_query($sql);							$max_post_id = (int) $db->sql_fetchfield('max_post_id');							$db->sql_freeresult($result);						}						// Still no maximum post id? Then we are finished						if (!$max_post_id)						{							add_log('admin', 'LOG_RESYNC_POSTCOUNTS');							break;						}						$step = ($config['num_posts']) ? (max((int) ($config['num_posts'] / 5), 20000)) : 20000;						$db->sql_query('UPDATE ' . USERS_TABLE . ' SET user_posts = 0');						while ($start < $max_post_id)						{							$sql = 'SELECT COUNT(post_id) AS num_posts, poster_id								FROM ' . POSTS_TABLE . '								WHERE post_id BETWEEN ' . ($start + 1) . ' AND ' . ($start + $step) . '									AND post_postcount = 1 AND post_approved = 1								GROUP BY poster_id';							$result = $db->sql_query($sql);							if ($row = $db->sql_fetchrow($result))							{								do								{									$sql = 'UPDATE ' . USERS_TABLE . " SET user_posts = user_posts + {$row['num_posts']} WHERE user_id = {$row['poster_id']}";									$db->sql_query($sql);								}								while ($row = $db->sql_fetchrow($result));							}							$db->sql_freeresult($result);							$start += $step;						}						add_log('admin', 'LOG_RESYNC_POSTCOUNTS');					break;					case 'date':						if (!$auth->acl_get('a_board'))						{							trigger_error($user->lang['NO_AUTH_OPERATION'] . adm_back_link($this->u_action), E_USER_WARNING);						}						set_config('board_startdate', time() - 1);						add_log('admin', 'LOG_RESET_DATE');					break;					case 'db_track':						switch ($db->sql_layer)						{							case 'sqlite':							case 'firebird':								$db->sql_query('DELETE FROM ' . TOPICS_POSTED_TABLE);							break;							default:								$db->sql_query('TRUNCATE TABLE ' . TOPICS_POSTED_TABLE);							break;						}						// This can get really nasty... therefore we only do the last six months						$get_from_time = time() - (6 * 4 * 7 * 24 * 60 * 60);						// Select forum ids, do not include categories						$sql = 'SELECT forum_id							FROM ' . FORUMS_TABLE . '							WHERE forum_type <> ' . FORUM_CAT;						$result = $db->sql_query($sql);						$forum_ids = array();						while ($row = $db->sql_fetchrow($result))						{							$forum_ids[] = $row['forum_id'];						}						$db->sql_freeresult($result);						// Any global announcements? ;)						$forum_ids[] = 0;						// Now go through the forums and get us some topics...						foreach ($forum_ids as $forum_id)						{							$sql = 'SELECT p.poster_id, p.topic_id								FROM ' . POSTS_TABLE . ' p, ' . TOPICS_TABLE . ' t								WHERE t.forum_id = ' . $forum_id . '									AND t.topic_moved_id = 0									AND t.topic_last_post_time > ' . $get_from_time . '									AND t.topic_id = p.topic_id									AND p.poster_id <> ' . ANONYMOUS . '								GROUP BY p.poster_id, p.topic_id';							$result = $db->sql_query($sql);							$posted = array();							while ($row = $db->sql_fetchrow($result))							{								$posted[$row['poster_id']][] = $row['topic_id'];							}							$db->sql_freeresult($result);							$sql_ary = array();							foreach ($posted as $user_id => $topic_row)							{								foreach ($topic_row as $topic_id)								{									$sql_ary[] = array(										'user_id'		=> (int) $user_id,										'topic_id'		=> (int) $topic_id,										'topic_posted'	=> 1,									);								}							}							unset($posted);							if (sizeof($sql_ary))							{								$db->sql_multi_insert(TOPICS_POSTED_TABLE, $sql_ary);							}						}						add_log('admin', 'LOG_RESYNC_POST_MARKING');					break;					case 'purge_cache':						if ((int) $user->data['user_type'] !== USER_FOUNDER)						{							trigger_error($user->lang['NO_AUTH_OPERATION'] . adm_back_link($this->u_action), E_USER_WARNING);						}						global $cache;						$cache->purge();						// Clear permissions						$auth->acl_clear_prefetch();						cache_moderators();						add_log('admin', 'LOG_PURGE_CACHE');					break;					case 'purge_sessions':						if ((int) $user->data['user_type'] !== USER_FOUNDER)						{							trigger_error($user->lang['NO_AUTH_OPERATION'] . adm_back_link($this->u_action), E_USER_WARNING);						}						$tables = array(CONFIRM_TABLE, SESSIONS_TABLE);						foreach ($tables as $table)						{							switch ($db->sql_layer)							{								case 'sqlite':								case 'firebird':									$db->sql_query("DELETE FROM $table");								break;								default:									$db->sql_query("TRUNCATE TABLE $table");								break;							}						}						// let's restore the admin session						$reinsert_ary = array(								'session_id'			=> (string) $user->session_id,								'session_page'			=> (string) substr($user->page['page'], 0, 199),								'session_forum_id'		=> $user->page['forum'],								'session_user_id'		=> (int) $user->data['user_id'],								'session_start'			=> (int) $user->data['session_start'],								'session_last_visit'	=> (int) $user->data['session_last_visit'],								'session_time'			=> (int) $user->time_now,								'session_browser'		=> (string) trim(substr($user->browser, 0, 149)),								'session_forwarded_for'	=> (string) $user->forwarded_for,								'session_ip'			=> (string) $user->ip,								'session_autologin'		=> (int) $user->data['session_autologin'],								'session_admin'			=> 1,								'session_viewonline'	=> (int) $user->data['session_viewonline'],						);						$sql = 'INSERT INTO ' . SESSIONS_TABLE . ' ' . $db->sql_build_array('INSERT', $reinsert_ary);						$db->sql_query($sql);						add_log('admin', 'LOG_PURGE_SESSIONS');					break;				}			}		}		// Version check		$user->add_lang('install');		if ($auth->acl_get('a_server') && version_compare(PHP_VERSION, '5.2.0', '<'))		{			$template->assign_vars(array(				'S_PHP_VERSION_OLD'	=> true,				'L_PHP_VERSION_OLD'	=> sprintf($user->lang['PHP_VERSION_OLD'], '<a href="http://www.phpbb.com/community/viewtopic.php?f=14&amp;t=1958605">', '</a>'),			));		}		$latest_version_info = false;		if (($latest_version_info = obtain_latest_version_info(request_var('versioncheck_force', false))) === false)		{			$template->assign_var('S_VERSIONCHECK_FAIL', true);		}		else		{			$latest_version_info = explode("\n", $latest_version_info);			$template->assign_vars(array(				'S_VERSION_UP_TO_DATE'	=> phpbb_version_compare(trim($latest_version_info[0]), $config['version'], '<='),			));		}		// Get forum statistics		$total_posts = $config['num_posts'];		$total_topics = $config['num_topics'];		$total_users = $config['num_users'];		$total_files = $config['num_files'];		$start_date = $user->format_date($config['board_startdate']);		$boarddays = (time() - $config['board_startdate']) / 86400;		$posts_per_day = sprintf('%.2f', $total_posts / $boarddays);		$topics_per_day = sprintf('%.2f', $total_topics / $boarddays);		$users_per_day = sprintf('%.2f', $total_users / $boarddays);		$files_per_day = sprintf('%.2f', $total_files / $boarddays);		$upload_dir_size = get_formatted_filesize($config['upload_dir_size']);		$avatar_dir_size = 0;		if ($avatar_dir = @opendir($phpbb_root_path . $config['avatar_path']))		{			while (($file = readdir($avatar_dir)) !== false)			{				if ($file[0] != '.' && $file != 'CVS' && strpos($file, 'index.') === false)				{					$avatar_dir_size += filesize($phpbb_root_path . $config['avatar_path'] . '/' . $file);				}			}			closedir($avatar_dir);			$avatar_dir_size = get_formatted_filesize($avatar_dir_size);		}		else		{			// Couldn't open Avatar dir.			$avatar_dir_size = $user->lang['NOT_AVAILABLE'];		}		if ($posts_per_day > $total_posts)		{			$posts_per_day = $total_posts;		}		if ($topics_per_day > $total_topics)		{			$topics_per_day = $total_topics;		}		if ($users_per_day > $total_users)		{			$users_per_day = $total_users;		}		if ($files_per_day > $total_files)		{			$files_per_day = $total_files;		}		if ($config['allow_attachments'] || $config['allow_pm_attach'])		{			$sql = 'SELECT COUNT(attach_id) AS total_orphan				FROM ' . ATTACHMENTS_TABLE . '				WHERE is_orphan = 1					AND filetime < ' . (time() - 3*60*60);			$result = $db->sql_query($sql);			$total_orphan = (int) $db->sql_fetchfield('total_orphan');			$db->sql_freeresult($result);		}		else		{			$total_orphan = false;		}		$dbsize = get_database_size();		$template->assign_vars(array(			'TOTAL_POSTS'		=> $total_posts,			'POSTS_PER_DAY'		=> $posts_per_day,			'TOTAL_TOPICS'		=> $total_topics,			'TOPICS_PER_DAY'	=> $topics_per_day,			'TOTAL_USERS'		=> $total_users,			'USERS_PER_DAY'		=> $users_per_day,			'TOTAL_FILES'		=> $total_files,			'FILES_PER_DAY'		=> $files_per_day,			'START_DATE'		=> $start_date,			'AVATAR_DIR_SIZE'	=> $avatar_dir_size,			'DBSIZE'			=> $dbsize,			'UPLOAD_DIR_SIZE'	=> $upload_dir_size,			'TOTAL_ORPHAN'		=> $total_orphan,			'S_TOTAL_ORPHAN'	=> ($total_orphan === false) ? false : true,			'GZIP_COMPRESSION'	=> ($config['gzip_compress'] && @extension_loaded('zlib')) ? $user->lang['ON'] : $user->lang['OFF'],			'DATABASE_INFO'		=> $db->sql_server_info(),			'BOARD_VERSION'		=> $config['version'],			'U_ACTION'			=> $this->u_action,			'U_ADMIN_LOG'		=> append_sid("{$phpbb_admin_path}index.$phpEx", 'i=logs&amp;mode=admin'),			'U_INACTIVE_USERS'	=> append_sid("{$phpbb_admin_path}index.$phpEx", 'i=inactive&amp;mode=list'),			'U_VERSIONCHECK'	=> append_sid("{$phpbb_admin_path}index.$phpEx", 'i=update&amp;mode=version_check'),			'U_VERSIONCHECK_FORCE'	=> append_sid("{$phpbb_admin_path}index.$phpEx", 'versioncheck_force=1'),			'S_ACTION_OPTIONS'	=> ($auth->acl_get('a_board')) ? true : false,			'S_FOUNDER'			=> ($user->data['user_type'] == USER_FOUNDER) ? true : false,			)		);		$log_data = array();		$log_count = false;		if ($auth->acl_get('a_viewlogs'))		{			view_log('admin', $log_data, $log_count, 5);			foreach ($log_data as $row)			{				$template->assign_block_vars('log', array(					'USERNAME'	=> $row['username_full'],					'IP'		=> $row['ip'],					'DATE'		=> $user->format_date($row['time']),					'ACTION'	=> $row['action'])				);			}		}		if ($auth->acl_get('a_user'))		{			$user->add_lang('memberlist');			$inactive = array();			$inactive_count = 0;			view_inactive_users($inactive, $inactive_count, 10);			foreach ($inactive as $row)			{				$template->assign_block_vars('inactive', array(					'INACTIVE_DATE'	=> $user->format_date($row['user_inactive_time']),					'REMINDED_DATE'	=> $user->format_date($row['user_reminded_time']),					'JOINED'		=> $user->format_date($row['user_regdate']),					'LAST_VISIT'	=> (!$row['user_lastvisit']) ? ' - ' : $user->format_date($row['user_lastvisit']),					'REASON'		=> $row['inactive_reason'],					'USER_ID'		=> $row['user_id'],					'POSTS'			=> ($row['user_posts']) ? $row['user_posts'] : 0,					'REMINDED'		=> $row['user_reminded'],					'REMINDED_EXPLAIN'	=> $user->lang('USER_LAST_REMINDED', (int) $row['user_reminded'], $user->format_date($row['user_reminded_time'])),					'USERNAME_FULL'		=> get_username_string('full', $row['user_id'], $row['username'], $row['user_colour'], false, append_sid("{$phpbb_admin_path}index.$phpEx", 'i=users&amp;mode=overview')),					'USERNAME'			=> get_username_string('username', $row['user_id'], $row['username'], $row['user_colour']),					'USER_COLOR'		=> get_username_string('colour', $row['user_id'], $row['username'], $row['user_colour']),					'U_USER_ADMIN'	=> append_sid("{$phpbb_admin_path}index.$phpEx", "i=users&amp;mode=overview&amp;u={$row['user_id']}"),					'U_SEARCH_USER'	=> ($auth->acl_get('u_search')) ? append_sid("{$phpbb_root_path}search.$phpEx", "author_id={$row['user_id']}&amp;sr=posts") : '',				));			}			$option_ary = array('activate' => 'ACTIVATE', 'delete' => 'DELETE');			if ($config['email_enable'])			{				$option_ary += array('remind' => 'REMIND');			}			$template->assign_vars(array(				'S_INACTIVE_USERS'		=> true,				'S_INACTIVE_OPTIONS'	=> build_select($option_ary))			);		}		// Warn if install is still present		if (file_exists($phpbb_root_path . 'install') && !is_file($phpbb_root_path . 'install'))		{			$template->assign_var('S_REMOVE_INSTALL', true);		}		if (!defined('PHPBB_DISABLE_CONFIG_CHECK') && file_exists($phpbb_root_path . 'config.' . $phpEx) && phpbb_is_writable($phpbb_root_path . 'config.' . $phpEx))		{			// World-Writable? (000x)			$template->assign_var('S_WRITABLE_CONFIG', (bool) (@fileperms($phpbb_root_path . 'config.' . $phpEx) & 0x0002));		}		if (extension_loaded('mbstring'))		{			$template->assign_vars(array(				'S_MBSTRING_LOADED'						=> true,				'S_MBSTRING_FUNC_OVERLOAD_FAIL'			=> (intval(@ini_get('mbstring.func_overload')) & (MB_OVERLOAD_MAIL | MB_OVERLOAD_STRING)),				'S_MBSTRING_ENCODING_TRANSLATION_FAIL'	=> (@ini_get('mbstring.encoding_translation') != 0),				'S_MBSTRING_HTTP_INPUT_FAIL'			=> (@ini_get('mbstring.http_input') != 'pass'),				'S_MBSTRING_HTTP_OUTPUT_FAIL'			=> (@ini_get('mbstring.http_output') != 'pass'),			));		}		// Fill dbms version if not yet filled		if (empty($config['dbms_version']))		{			set_config('dbms_version', $db->sql_server_info(true));		}		$this->tpl_name = 'acp_main';		$this->page_title = 'ACP_MAIN';	}}?>
<?php/**** @package phpBB3* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @ignore*/define('IN_PHPBB', true);define('ADMIN_START', true);$phpbb_root_path = (defined('PHPBB_ROOT_PATH')) ? PHPBB_ROOT_PATH : './../';$phpEx = substr(strrchr(__FILE__, '.'), 1);include($phpbb_root_path . 'common.' . $phpEx);// Start session management$user->session_begin(false);$auth->acl($user->data);$user->setup();// Set custom template for admin area$template->set_custom_template($phpbb_root_path . 'adm/style', 'admin');$template->set_filenames(array(	'body' => 'colour_swatch.html'));$form = request_var('form', '');$name = request_var('name', '');// We validate form and name here, only id/class allowed$form = (!preg_match('/^[a-z0-9_-]+$/i', $form)) ? '' : $form;$name = (!preg_match('/^[a-z0-9_-]+$/i', $name)) ? '' : $name;$template->assign_vars(array(	'OPENER'		=> $form,	'NAME'			=> $name,	'T_IMAGES_PATH'	=> "{$phpbb_root_path}images/",	'S_USER_LANG'			=> $user->lang['USER_LANG'],	'S_CONTENT_DIRECTION'	=> $user->lang['DIRECTION'],	'S_CONTENT_ENCODING'	=> 'UTF-8',));$template->display('body');garbage_collection();?>
<?php/**** @package acp* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @package module_install*/class acp_update_info{	function module()	{		return array(			'filename'	=> 'acp_update',			'title'		=> 'ACP_UPDATE',			'version'	=> '1.0.0',			'modes'		=> array(				'version_check'		=> array('title' => 'ACP_VERSION_CHECK', 'auth' => 'acl_a_board', 'cat' => array('ACP_AUTOMATION')),			),		);	}	function install()	{	}	function uninstall()	{	}}?>
<?php$GLOBALS['utf_compatibility_decomp']=array(''=>' ',''=>' ',''=>'a',''=>' ',''=>'2',''=>'3',''=>' ',''=>'',''=>' ',''=>'1',''=>'o',''=>'14',''=>'12',''=>'34',''=>'A',''=>'A',''=>'A',''=>'A',''=>'A',''=>'A',''=>'C',''=>'E',''=>'E',''=>'E',''=>'E',''=>'I',''=>'I',''=>'I',''=>'I',''=>'N',''=>'O',''=>'O',''=>'O',''=>'O',''=>'O',''=>'U',''=>'U',''=>'U',''=>'U',''=>'Y',''=>'a',''=>'a',''=>'a',''=>'a',''=>'a',''=>'a',''=>'c',''=>'e',''=>'e',''=>'e',''=>'e',''=>'i',''=>'i',''=>'i',''=>'i',''=>'n',''=>'o',''=>'o',''=>'o',''=>'o',''=>'o',''=>'u',''=>'u',''=>'u',''=>'u',''=>'y',''=>'y',''=>'A',''=>'a',''=>'A',''=>'a',''=>'A',''=>'a',''=>'C',''=>'c',''=>'C',''=>'c',''=>'C',''=>'c',''=>'C',''=>'c',''=>'D',''=>'d',''=>'E',''=>'e',''=>'E',''=>'e',''=>'E',''=>'e',''=>'E',''=>'e',''=>'E',''=>'e',''=>'G',''=>'g',''=>'G',''=>'g',''=>'G',''=>'g',''=>'G',''=>'g',''=>'H',''=>'h',''=>'I',''=>'i',''=>'I',''=>'i',''=>'I',''=>'i',''=>'I',''=>'i',''=>'I',''=>'IJ',''=>'ij',''=>'J',''=>'j',''=>'K',''=>'k',''=>'L',''=>'l',''=>'L',''=>'l',''=>'L',''=>'l',''=>'L',''=>'l',''=>'N',''=>'n',''=>'N',''=>'n',''=>'N',''=>'n',''=>'n',''=>'O',''=>'o',''=>'O',''=>'o',''=>'O',''=>'o',''=>'R',''=>'r',''=>'R',''=>'r',''=>'R',''=>'r',''=>'S',''=>'s',''=>'S',''=>'s',''=>'S',''=>'s',''=>'S',''=>'s',''=>'T',''=>'t',''=>'T',''=>'t',''=>'U',''=>'u',''=>'U',''=>'u',''=>'U',''=>'u',''=>'U',''=>'u',''=>'U',''=>'u',''=>'U',''=>'u',''=>'W',''=>'w',''=>'Y',''=>'y',''=>'Y',''=>'Z',''=>'z',''=>'Z',''=>'z',''=>'Z',''=>'z',''=>'s',''=>'O',''=>'o',''=>'U',''=>'u',''=>'DZ',''=>'Dz',''=>'dz',''=>'LJ',''=>'Lj',''=>'lj',''=>'NJ',''=>'Nj',''=>'nj',''=>'A',''=>'a',''=>'I',''=>'i',''=>'O',''=>'o',''=>'U',''=>'u',''=>'U',''=>'u',''=>'U',''=>'u',''=>'U',''=>'u',''=>'U',''=>'u',''=>'A',''=>'a',''=>'A',''=>'a',''=>'',''=>'',''=>'G',''=>'g',''=>'K',''=>'k',''=>'O',''=>'o',''=>'O',''=>'o',''=>'',''=>'',''=>'j',''=>'DZ',''=>'Dz',''=>'dz',''=>'G',''=>'g',''=>'N',''=>'n',''=>'A',''=>'a',''=>'',''=>'',''=>'',''=>'',''=>'A',''=>'a',''=>'A',''=>'a',''=>'E',''=>'e',''=>'E',''=>'e',''=>'I',''=>'i',''=>'I',''=>'i',''=>'O',''=>'o',''=>'O',''=>'o',''=>'R',''=>'r',''=>'R',''=>'r',''=>'U',''=>'u',''=>'U',''=>'u',''=>'S',''=>'s',''=>'T',''=>'t',''=>'H',''=>'h',''=>'A',''=>'a',''=>'E',''=>'e',''=>'O',''=>'o',''=>'O',''=>'o',''=>'O',''=>'o',''=>'O',''=>'o',''=>'Y',''=>'y',''=>'h',''=>'',''=>'j',''=>'r',''=>'',''=>'',''=>'',''=>'w',''=>'y',''=>' ',''=>' ',''=>' ',''=>' ',''=>' ',''=>' ',''=>'',''=>'l',''=>'s',''=>'x',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>' ',''=>';',''=>' ',''=>' ',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'A',''=>'',''=>'B',''=>'D',''=>'E',''=>'',''=>'G',''=>'H',''=>'I',''=>'J',''=>'K',''=>'L',''=>'M',''=>'N',''=>'O',''=>'',''=>'P',''=>'R',''=>'T',''=>'U',''=>'W',''=>'a',''=>'',''=>'',''=>'',''=>'b',''=>'d',''=>'e',''=>'',''=>'',''=>'',''=>'g',''=>'k',''=>'m',''=>'',''=>'o',''=>'',''=>'',''=>'',''=>'p',''=>'t',''=>'u',''=>'',''=>'',''=>'v',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'i',''=>'r',''=>'u',''=>'v',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'c',''=>'',''=>'',''=>'',''=>'f',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'z',''=>'',''=>'',''=>'',''=>'',''=>'A',''=>'a',''=>'B',''=>'b',''=>'B',''=>'b',''=>'B',''=>'b',''=>'C',''=>'c',''=>'D',''=>'d',''=>'D',''=>'d',''=>'D',''=>'d',''=>'D',''=>'d',''=>'D',''=>'d',''=>'E',''=>'e',''=>'E',''=>'e',''=>'E',''=>'e',''=>'E',''=>'e',''=>'E',''=>'e',''=>'F',''=>'f',''=>'G',''=>'g',''=>'H',''=>'h',''=>'H',''=>'h',''=>'H',''=>'h',''=>'H',''=>'h',''=>'H',''=>'h',''=>'I',''=>'i',''=>'I',''=>'i',''=>'K',''=>'k',''=>'K',''=>'k',''=>'K',''=>'k',''=>'L',''=>'l',''=>'L',''=>'l',''=>'L',''=>'l',''=>'L',''=>'l',''=>'M',''=>'m',''=>'M',''=>'m',''=>'M',''=>'m',''=>'N',''=>'n',''=>'N',''=>'n',''=>'N',''=>'n',''=>'N',''=>'n',''=>'O',''=>'o',''=>'O',''=>'o',''=>'O',''=>'o',''=>'O',''=>'o',''=>'P',''=>'p',''=>'P',''=>'p',''=>'R',''=>'r',''=>'R',''=>'r',''=>'R',''=>'r',''=>'R',''=>'r',''=>'S',''=>'s',''=>'S',''=>'s',''=>'S',''=>'s',''=>'S',''=>'s',''=>'S',''=>'s',''=>'T',''=>'t',''=>'T',''=>'t',''=>'T',''=>'t',''=>'T',''=>'t',''=>'U',''=>'u',''=>'U',''=>'u',''=>'U',''=>'u',''=>'U',''=>'u',''=>'U',''=>'u',''=>'V',''=>'v',''=>'V',''=>'v',''=>'W',''=>'w',''=>'W',''=>'w',''=>'W',''=>'w',''=>'W',''=>'w',''=>'W',''=>'w',''=>'X',''=>'x',''=>'X',''=>'x',''=>'Y',''=>'y',''=>'Z',''=>'z',''=>'Z',''=>'z',''=>'Z',''=>'z',''=>'h',''=>'t',''=>'w',''=>'y',''=>'a',''=>'s',''=>'A',''=>'a',''=>'A',''=>'a',''=>'A',''=>'a',''=>'A',''=>'a',''=>'A',''=>'a',''=>'A',''=>'a',''=>'A',''=>'a',''=>'A',''=>'a',''=>'A',''=>'a',''=>'A',''=>'a',''=>'A',''=>'a',''=>'A',''=>'a',''=>'E',''=>'e',''=>'E',''=>'e',''=>'E',''=>'e',''=>'E',''=>'e',''=>'E',''=>'e',''=>'E',''=>'e',''=>'E',''=>'e',''=>'E',''=>'e',''=>'I',''=>'i',''=>'I',''=>'i',''=>'O',''=>'o',''=>'O',''=>'o',''=>'O',''=>'o',''=>'O',''=>'o',''=>'O',''=>'o',''=>'O',''=>'o',''=>'O',''=>'o',''=>'O',''=>'o',''=>'O',''=>'o',''=>'O',''=>'o',''=>'O',''=>'o',''=>'O',''=>'o',''=>'U',''=>'u',''=>'U',''=>'u',''=>'U',''=>'u',''=>'U',''=>'u',''=>'U',''=>'u',''=>'U',''=>'u',''=>'U',''=>'u',''=>'Y',''=>'y',''=>'Y',''=>'y',''=>'Y',''=>'y',''=>'Y',''=>'y',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>' ',''=>'',''=>' ',''=>' ',''=>' ',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>' ',''=>' ',''=>' ',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>' ',''=>' ',''=>' ',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>' ',''=>' ',''=>'`',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>' ',''=>' ',''=>' ',''=>' ',''=>' ',''=>' ',''=>' ',''=>' ',''=>' ',''=>' ',''=>' ',''=>' ',''=>' ',''=>'',''=>' ',''=>'.',''=>'..',''=>'...',''=>' ',''=>'',''=>'',''=>'',''=>'',''=>'!!',''=>' ',''=>'??',''=>'?!',''=>'!?',''=>'',''=>' ',''=>'0',''=>'i',''=>'4',''=>'5',''=>'6',''=>'7',''=>'8',''=>'9',''=>'+',''=>'',''=>'=',''=>'(',''=>')',''=>'n',''=>'0',''=>'1',''=>'2',''=>'3',''=>'4',''=>'5',''=>'6',''=>'7',''=>'8',''=>'9',''=>'+',''=>'',''=>'=',''=>'(',''=>')',''=>'a',''=>'e',''=>'o',''=>'x',''=>'',''=>'Rs',''=>'a/c',''=>'a/s',''=>'C',''=>'C',''=>'c/o',''=>'c/u',''=>'',''=>'F',''=>'g',''=>'H',''=>'H',''=>'H',''=>'h',''=>'',''=>'I',''=>'I',''=>'L',''=>'l',''=>'N',''=>'No',''=>'P',''=>'Q',''=>'R',''=>'R',''=>'R',''=>'SM',''=>'TEL',''=>'TM',''=>'Z',''=>'',''=>'Z',''=>'K',''=>'A',''=>'B',''=>'C',''=>'e',''=>'E',''=>'F',''=>'M',''=>'o',''=>'',''=>'',''=>'',''=>'',''=>'i',''=>'FAX',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'D',''=>'d',''=>'e',''=>'i',''=>'j',''=>'13',''=>'23',''=>'15',''=>'25',''=>'35',''=>'45',''=>'16',''=>'56',''=>'18',''=>'38',''=>'58',''=>'78',''=>'1',''=>'I',''=>'II',''=>'III',''=>'IV',''=>'V',''=>'VI',''=>'VII',''=>'VIII',''=>'IX',''=>'X',''=>'XI',''=>'XII',''=>'L',''=>'C',''=>'D',''=>'M',''=>'i',''=>'ii',''=>'iii',''=>'iv',''=>'v',''=>'vi',''=>'vii',''=>'viii',''=>'ix',''=>'x',''=>'xi',''=>'xii',''=>'l',''=>'c',''=>'d',''=>'m',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'=',''=>'',''=>'',''=>'<',''=>'>',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'1',''=>'2',''=>'3',''=>'4',''=>'5',''=>'6',''=>'7',''=>'8',''=>'9',''=>'10',''=>'11',''=>'12',''=>'13',''=>'14',''=>'15',''=>'16',''=>'17',''=>'18',''=>'19',''=>'20',''=>'(1)',''=>'(2)',''=>'(3)',''=>'(4)',''=>'(5)',''=>'(6)',''=>'(7)',''=>'(8)',''=>'(9)',''=>'(10)',''=>'(11)',''=>'(12)',''=>'(13)',''=>'(14)',''=>'(15)',''=>'(16)',''=>'(17)',''=>'(18)',''=>'(19)',''=>'(20)',''=>'1.',''=>'2.',''=>'3.',''=>'4.',''=>'5.',''=>'6.',''=>'7.',''=>'8.',''=>'9.',''=>'10.',''=>'11.',''=>'12.',''=>'13.',''=>'14.',''=>'15.',''=>'16.',''=>'17.',''=>'18.',''=>'19.',''=>'20.',''=>'(a)',''=>'(b)',''=>'(c)',''=>'(d)',''=>'(e)',''=>'(f)',''=>'(g)',''=>'(h)',''=>'(i)',''=>'(j)',''=>'(k)',''=>'(l)',''=>'(m)',''=>'(n)',''=>'(o)',''=>'(p)',''=>'(q)',''=>'(r)',''=>'(s)',''=>'(t)',''=>'(u)',''=>'(v)',''=>'(w)',''=>'(x)',''=>'(y)',''=>'(z)',''=>'A',''=>'B',''=>'C',''=>'D',''=>'E',''=>'F',''=>'G',''=>'H',''=>'I',''=>'J',''=>'K',''=>'L',''=>'M',''=>'N',''=>'O',''=>'P',''=>'Q',''=>'R',''=>'S',''=>'T',''=>'U',''=>'V',''=>'W',''=>'X',''=>'Y',''=>'Z',''=>'a',''=>'b',''=>'c',''=>'d',''=>'e',''=>'f',''=>'g',''=>'h',''=>'i',''=>'j',''=>'k',''=>'l',''=>'m',''=>'n',''=>'o',''=>'p',''=>'q',''=>'r',''=>'s',''=>'t',''=>'u',''=>'v',''=>'w',''=>'x',''=>'y',''=>'z',''=>'0',''=>'',''=>'::=',''=>'==',''=>'===',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>' ',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>' ',''=>' ',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'PTE',''=>'21',''=>'22',''=>'23',''=>'24',''=>'25',''=>'26',''=>'27',''=>'28',''=>'29',''=>'30',''=>'31',''=>'32',''=>'33',''=>'34',''=>'35',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'36',''=>'37',''=>'38',''=>'39',''=>'40',''=>'41',''=>'42',''=>'43',''=>'44',''=>'45',''=>'46',''=>'47',''=>'48',''=>'49',''=>'50',''=>'1',''=>'2',''=>'3',''=>'4',''=>'5',''=>'6',''=>'7',''=>'8',''=>'9',''=>'10',''=>'11',''=>'12',''=>'Hg',''=>'erg',''=>'eV',''=>'LTD',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'0',''=>'1',''=>'2',''=>'3',''=>'4',''=>'5',''=>'6',''=>'7',''=>'8',''=>'9',''=>'10',''=>'11',''=>'12',''=>'13',''=>'14',''=>'15',''=>'16',''=>'17',''=>'18',''=>'19',''=>'20',''=>'21',''=>'22',''=>'23',''=>'24',''=>'hPa',''=>'da',''=>'AU',''=>'bar',''=>'oV',''=>'pc',''=>'dm',''=>'dm2',''=>'dm3',''=>'IU',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'pA',''=>'nA',''=>'A',''=>'mA',''=>'kA',''=>'KB',''=>'MB',''=>'GB',''=>'cal',''=>'kcal',''=>'pF',''=>'nF',''=>'F',''=>'g',''=>'mg',''=>'kg',''=>'Hz',''=>'kHz',''=>'MHz',''=>'GHz',''=>'THz',''=>'l',''=>'ml',''=>'dl',''=>'kl',''=>'fm',''=>'nm',''=>'m',''=>'mm',''=>'cm',''=>'km',''=>'mm2',''=>'cm2',''=>'m2',''=>'km2',''=>'mm3',''=>'cm3',''=>'m3',''=>'km3',''=>'ms',''=>'ms2',''=>'Pa',''=>'kPa',''=>'MPa',''=>'GPa',''=>'rad',''=>'rads',''=>'rads2',''=>'ps',''=>'ns',''=>'s',''=>'ms',''=>'pV',''=>'nV',''=>'V',''=>'mV',''=>'kV',''=>'MV',''=>'pW',''=>'nW',''=>'W',''=>'mW',''=>'kW',''=>'MW',''=>'k',''=>'M',''=>'a.m.',''=>'Bq',''=>'cc',''=>'cd',''=>'Ckg',''=>'Co.',''=>'dB',''=>'Gy',''=>'ha',''=>'HP',''=>'in',''=>'KK',''=>'KM',''=>'kt',''=>'lm',''=>'ln',''=>'log',''=>'lx',''=>'mb',''=>'mil',''=>'mol',''=>'PH',''=>'p.m.',''=>'PPM',''=>'PR',''=>'sr',''=>'Sv',''=>'Wb',''=>'Vm',''=>'Am',''=>'1',''=>'2',''=>'3',''=>'4',''=>'5',''=>'6',''=>'7',''=>'8',''=>'9',''=>'10',''=>'11',''=>'12',''=>'13',''=>'14',''=>'15',''=>'16',''=>'17',''=>'18',''=>'19',''=>'20',''=>'21',''=>'22',''=>'23',''=>'24',''=>'25',''=>'26',''=>'27',''=>'28',''=>'29',''=>'30',''=>'31',''=>'gal',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'ff',''=>'fi',''=>'fl',''=>'ffi',''=>'ffl',''=>'st',''=>'st',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'+',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>' ',''=>' ',''=>' ',''=>' ',''=>' ',''=>' ',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'   ',''=>' ',''=>'',''=>',',''=>'',''=>'',''=>':',''=>';',''=>'!',''=>'?',''=>'',''=>'',''=>'...',''=>'..',''=>'',''=>'',''=>'_',''=>'_',''=>'(',''=>')',''=>'{',''=>'}',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'[',''=>']',''=>' ',''=>' ',''=>' ',''=>' ',''=>'_',''=>'_',''=>'_',''=>',',''=>'',''=>'.',''=>';',''=>':',''=>'?',''=>'!',''=>'',''=>'(',''=>')',''=>'{',''=>'}',''=>'',''=>'',''=>'#',''=>'&',''=>'*',''=>'+',''=>'-',''=>'<',''=>'>',''=>'=',''=>'\\',''=>'$',''=>'%',''=>'@',''=>' ',''=>'',''=>' ',''=>' ',''=>' ',''=>'',''=>' ',''=>'',''=>' ',''=>'',''=>' ',''=>'',''=>' ',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'!',''=>'"',''=>'#',''=>'$',''=>'%',''=>'&',''=>'\'',''=>'(',''=>')',''=>'*',''=>'+',''=>',',''=>'-',''=>'.',''=>'/',''=>'0',''=>'1',''=>'2',''=>'3',''=>'4',''=>'5',''=>'6',''=>'7',''=>'8',''=>'9',''=>':',''=>';',''=>'<',''=>'=',''=>'>',''=>'?',''=>'@',''=>'A',''=>'B',''=>'C',''=>'D',''=>'E',''=>'F',''=>'G',''=>'H',''=>'I',''=>'J',''=>'K',''=>'L',''=>'M',''=>'N',''=>'O',''=>'P',''=>'Q',''=>'R',''=>'S',''=>'T',''=>'U',''=>'V',''=>'W',''=>'X',''=>'Y',''=>'Z',''=>'[',''=>'\\',''=>']',''=>'^',''=>'_',''=>'`',''=>'a',''=>'b',''=>'c',''=>'d',''=>'e',''=>'f',''=>'g',''=>'h',''=>'i',''=>'j',''=>'k',''=>'l',''=>'m',''=>'n',''=>'o',''=>'p',''=>'q',''=>'r',''=>'s',''=>'t',''=>'u',''=>'v',''=>'w',''=>'x',''=>'y',''=>'z',''=>'{',''=>'|',''=>'}',''=>'~',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>' ',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'A',''=>'B',''=>'C',''=>'D',''=>'E',''=>'F',''=>'G',''=>'H',''=>'I',''=>'J',''=>'K',''=>'L',''=>'M',''=>'N',''=>'O',''=>'P',''=>'Q',''=>'R',''=>'S',''=>'T',''=>'U',''=>'V',''=>'W',''=>'X',''=>'Y',''=>'Z',''=>'a',''=>'b',''=>'c',''=>'d',''=>'e',''=>'f',''=>'g',''=>'h',''=>'i',''=>'j',''=>'k',''=>'l',''=>'m',''=>'n',''=>'o',''=>'p',''=>'q',''=>'r',''=>'s',''=>'t',''=>'u',''=>'v',''=>'w',''=>'x',''=>'y',''=>'z',''=>'A',''=>'B',''=>'C',''=>'D',''=>'E',''=>'F',''=>'G',''=>'H',''=>'I',''=>'J',''=>'K',''=>'L',''=>'M',''=>'N',''=>'O',''=>'P',''=>'Q',''=>'R',''=>'S',''=>'T',''=>'U',''=>'V',''=>'W',''=>'X',''=>'Y',''=>'Z',''=>'a',''=>'b',''=>'c',''=>'d',''=>'e',''=>'f',''=>'g',''=>'i',''=>'j',''=>'k',''=>'l',''=>'m',''=>'n',''=>'o',''=>'p',''=>'q',''=>'r',''=>'s',''=>'t',''=>'u',''=>'v',''=>'w',''=>'x',''=>'y',''=>'z',''=>'A',''=>'B',''=>'C',''=>'D',''=>'E',''=>'F',''=>'G',''=>'H',''=>'I',''=>'J',''=>'K',''=>'L',''=>'M',''=>'N',''=>'O',''=>'P',''=>'Q',''=>'R',''=>'S',''=>'T',''=>'U',''=>'V',''=>'W',''=>'X',''=>'Y',''=>'Z',''=>'a',''=>'b',''=>'c',''=>'d',''=>'e',''=>'f',''=>'g',''=>'h',''=>'i',''=>'j',''=>'k',''=>'l',''=>'m',''=>'n',''=>'o',''=>'p',''=>'q',''=>'r',''=>'s',''=>'t',''=>'u',''=>'v',''=>'w',''=>'x',''=>'y',''=>'z',''=>'A',''=>'C',''=>'D',''=>'G',''=>'J',''=>'K',''=>'N',''=>'O',''=>'P',''=>'Q',''=>'S',''=>'T',''=>'U',''=>'V',''=>'W',''=>'X',''=>'Y',''=>'Z',''=>'a',''=>'b',''=>'c',''=>'d',''=>'f',''=>'h',''=>'i',''=>'j',''=>'k',''=>'l',''=>'m',''=>'n',''=>'p',''=>'q',''=>'r',''=>'s',''=>'t',''=>'u',''=>'v',''=>'w',''=>'x',''=>'y',''=>'z',''=>'A',''=>'B',''=>'C',''=>'D',''=>'E',''=>'F',''=>'G',''=>'H',''=>'I',''=>'J',''=>'K',''=>'L',''=>'M',''=>'N',''=>'O',''=>'P',''=>'Q',''=>'R',''=>'S',''=>'T',''=>'U',''=>'V',''=>'W',''=>'X',''=>'Y',''=>'Z',''=>'a',''=>'b',''=>'c',''=>'d',''=>'e',''=>'f',''=>'g',''=>'h',''=>'i',''=>'j',''=>'k',''=>'l',''=>'m',''=>'n',''=>'o',''=>'p',''=>'q',''=>'r',''=>'s',''=>'t',''=>'u',''=>'v',''=>'w',''=>'x',''=>'y',''=>'z',''=>'A',''=>'B',''=>'D',''=>'E',''=>'F',''=>'G',''=>'J',''=>'K',''=>'L',''=>'M',''=>'N',''=>'O',''=>'P',''=>'Q',''=>'S',''=>'T',''=>'U',''=>'V',''=>'W',''=>'X',''=>'Y',''=>'a',''=>'b',''=>'c',''=>'d',''=>'e',''=>'f',''=>'g',''=>'h',''=>'i',''=>'j',''=>'k',''=>'l',''=>'m',''=>'n',''=>'o',''=>'p',''=>'q',''=>'r',''=>'s',''=>'t',''=>'u',''=>'v',''=>'w',''=>'x',''=>'y',''=>'z',''=>'A',''=>'B',''=>'D',''=>'E',''=>'F',''=>'G',''=>'I',''=>'J',''=>'K',''=>'L',''=>'M',''=>'O',''=>'S',''=>'T',''=>'U',''=>'V',''=>'W',''=>'X',''=>'Y',''=>'a',''=>'b',''=>'c',''=>'d',''=>'e',''=>'f',''=>'g',''=>'h',''=>'i',''=>'j',''=>'k',''=>'l',''=>'m',''=>'n',''=>'o',''=>'p',''=>'q',''=>'r',''=>'s',''=>'t',''=>'u',''=>'v',''=>'w',''=>'x',''=>'y',''=>'z',''=>'A',''=>'B',''=>'C',''=>'D',''=>'E',''=>'F',''=>'G',''=>'H',''=>'I',''=>'J',''=>'K',''=>'L',''=>'M',''=>'N',''=>'O',''=>'P',''=>'Q',''=>'R',''=>'S',''=>'T',''=>'U',''=>'V',''=>'W',''=>'X',''=>'Y',''=>'Z',''=>'a',''=>'b',''=>'c',''=>'d',''=>'e',''=>'f',''=>'g',''=>'h',''=>'i',''=>'j',''=>'k',''=>'l',''=>'m',''=>'n',''=>'o',''=>'p',''=>'q',''=>'r',''=>'s',''=>'t',''=>'u',''=>'v',''=>'w',''=>'x',''=>'y',''=>'z',''=>'A',''=>'B',''=>'C',''=>'D',''=>'E',''=>'F',''=>'G',''=>'H',''=>'I',''=>'J',''=>'K',''=>'L',''=>'M',''=>'N',''=>'O',''=>'P',''=>'Q',''=>'R',''=>'S',''=>'T',''=>'U',''=>'V',''=>'W',''=>'X',''=>'Y',''=>'Z',''=>'a',''=>'b',''=>'c',''=>'d',''=>'e',''=>'f',''=>'g',''=>'h',''=>'i',''=>'j',''=>'k',''=>'l',''=>'m',''=>'n',''=>'o',''=>'p',''=>'q',''=>'r',''=>'s',''=>'t',''=>'u',''=>'v',''=>'w',''=>'x',''=>'y',''=>'z',''=>'A',''=>'B',''=>'C',''=>'D',''=>'E',''=>'F',''=>'G',''=>'H',''=>'I',''=>'J',''=>'K',''=>'L',''=>'M',''=>'N',''=>'O',''=>'P',''=>'Q',''=>'R',''=>'S',''=>'T',''=>'U',''=>'V',''=>'W',''=>'X',''=>'Y',''=>'Z',''=>'a',''=>'b',''=>'c',''=>'d',''=>'e',''=>'f',''=>'g',''=>'h',''=>'i',''=>'j',''=>'k',''=>'l',''=>'m',''=>'n',''=>'o',''=>'p',''=>'q',''=>'r',''=>'s',''=>'t',''=>'u',''=>'v',''=>'w',''=>'x',''=>'y',''=>'z',''=>'A',''=>'B',''=>'C',''=>'D',''=>'E',''=>'F',''=>'G',''=>'H',''=>'I',''=>'J',''=>'K',''=>'L',''=>'M',''=>'N',''=>'O',''=>'P',''=>'Q',''=>'R',''=>'S',''=>'T',''=>'U',''=>'V',''=>'W',''=>'X',''=>'Y',''=>'Z',''=>'a',''=>'b',''=>'c',''=>'d',''=>'e',''=>'f',''=>'g',''=>'h',''=>'i',''=>'j',''=>'k',''=>'l',''=>'m',''=>'n',''=>'o',''=>'p',''=>'q',''=>'r',''=>'s',''=>'t',''=>'u',''=>'v',''=>'w',''=>'x',''=>'y',''=>'z',''=>'A',''=>'B',''=>'C',''=>'D',''=>'E',''=>'F',''=>'G',''=>'H',''=>'I',''=>'J',''=>'K',''=>'L',''=>'M',''=>'N',''=>'O',''=>'P',''=>'Q',''=>'R',''=>'S',''=>'T',''=>'U',''=>'V',''=>'W',''=>'X',''=>'Y',''=>'Z',''=>'a',''=>'b',''=>'c',''=>'d',''=>'e',''=>'f',''=>'g',''=>'h',''=>'i',''=>'j',''=>'k',''=>'l',''=>'m',''=>'n',''=>'o',''=>'p',''=>'q',''=>'r',''=>'s',''=>'t',''=>'u',''=>'v',''=>'w',''=>'x',''=>'y',''=>'z',''=>'A',''=>'B',''=>'C',''=>'D',''=>'E',''=>'F',''=>'G',''=>'H',''=>'I',''=>'J',''=>'K',''=>'L',''=>'M',''=>'N',''=>'O',''=>'P',''=>'Q',''=>'R',''=>'S',''=>'T',''=>'U',''=>'V',''=>'W',''=>'X',''=>'Y',''=>'Z',''=>'a',''=>'b',''=>'c',''=>'d',''=>'e',''=>'f',''=>'g',''=>'h',''=>'i',''=>'j',''=>'k',''=>'l',''=>'m',''=>'n',''=>'o',''=>'p',''=>'q',''=>'r',''=>'s',''=>'t',''=>'u',''=>'v',''=>'w',''=>'x',''=>'y',''=>'z',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'0',''=>'1',''=>'2',''=>'3',''=>'4',''=>'5',''=>'6',''=>'7',''=>'8',''=>'9',''=>'0',''=>'1',''=>'2',''=>'3',''=>'4',''=>'5',''=>'6',''=>'7',''=>'8',''=>'9',''=>'0',''=>'1',''=>'2',''=>'3',''=>'4',''=>'5',''=>'6',''=>'7',''=>'8',''=>'9',''=>'0',''=>'1',''=>'2',''=>'3',''=>'4',''=>'5',''=>'6',''=>'7',''=>'8',''=>'9',''=>'0',''=>'1',''=>'2',''=>'3',''=>'4',''=>'5',''=>'6',''=>'7',''=>'8',''=>'9',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'');
<?php return array(''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'1',''=>'10',''=>'20',''=>'100',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'1',''=>'2',''=>'3',''=>'4',''=>'10',''=>'20',''=>'100',''=>'1000');
<?php/**** @package acp* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @ignore*/if (!defined('IN_PHPBB')){	exit;}/*** @package acp*/class acp_language{	var $u_action;	var $main_files;	var $language_header = '';	var $lang_header = '';	var $language_file = '';	var $language_directory = '';	function main($id, $mode)	{		global $config, $db, $user, $auth, $template, $cache;		global $phpbb_root_path, $phpbb_admin_path, $phpEx, $table_prefix;		global $safe_mode, $file_uploads;		include_once($phpbb_root_path . 'includes/functions_user.' . $phpEx);		$this->default_variables();		// Check and set some common vars		$action		= (isset($_POST['update_details'])) ? 'update_details' : '';		$action		= (isset($_POST['download_file'])) ? 'download_file' : $action;		$action		= (isset($_POST['upload_file'])) ? 'upload_file' : $action;		$action		= (isset($_POST['upload_data'])) ? 'upload_data' : $action;		$action		= (isset($_POST['submit_file'])) ? 'submit_file' : $action;		$action		= (isset($_POST['remove_store'])) ? 'details' : $action;		$submit = (empty($action) && !isset($_POST['update']) && !isset($_POST['test_connection'])) ? false : true;		$action = (empty($action)) ? request_var('action', '') : $action;		$form_name = 'acp_lang';		add_form_key('acp_lang');		$lang_id = request_var('id', 0);		if (isset($_POST['missing_file']))		{			$missing_file = request_var('missing_file', array('' => 0));			list($_REQUEST['language_file'], ) = array_keys($missing_file);		}		$selected_lang_file = request_var('language_file', '|common.' . $phpEx);		list($this->language_directory, $this->language_file) = explode('|', $selected_lang_file);		$this->language_directory = basename($this->language_directory);		$this->language_file = basename($this->language_file);		$user->add_lang('acp/language');		$this->tpl_name = 'acp_language';		$this->page_title = 'ACP_LANGUAGE_PACKS';		if ($submit && $action == 'upload_data' && request_var('test_connection', ''))		{			$test_connection = false;			$action = 'upload_file';			$method = request_var('method', '');			include_once($phpbb_root_path . 'includes/functions_transfer.' . $phpEx);			switch ($method)			{				case 'ftp':					$transfer = new ftp(request_var('host', ''), request_var('username', ''), request_var('password', ''), request_var('root_path', ''), request_var('port', ''), request_var('timeout', ''));				break;				case 'ftp_fsock':					$transfer = new ftp_fsock(request_var('host', ''), request_var('username', ''), request_var('password', ''), request_var('root_path', ''), request_var('port', ''), request_var('timeout', ''));				break;				default:					trigger_error($user->lang['INVALID_UPLOAD_METHOD'], E_USER_ERROR);				break;			}			$test_connection = $transfer->open_session();			$transfer->close_session();		}		switch ($action)		{			case 'upload_file':				include_once($phpbb_root_path . 'includes/functions_transfer.' . $phpEx);				$method = request_var('method', '');				if (!class_exists($method))				{					trigger_error('Method does not exist.', E_USER_ERROR);				}				$requested_data = call_user_func(array($method, 'data'));				foreach ($requested_data as $data => $default)				{					$template->assign_block_vars('data', array(						'DATA'		=> $data,						'NAME'		=> $user->lang[strtoupper($method . '_' . $data)],						'EXPLAIN'	=> $user->lang[strtoupper($method . '_' . $data) . '_EXPLAIN'],						'DEFAULT'	=> (!empty($_REQUEST[$data])) ? request_var($data, '') : $default					));				}				$hidden_data = build_hidden_fields(array(					'file'			=> $this->language_file,					'dir'			=> $this->language_directory,					'language_file'	=> $selected_lang_file,					'method'		=> $method)				);				$hidden_data .= build_hidden_fields(array('entry' => $_POST['entry']), true, STRIP);				$template->assign_vars(array(					'S_UPLOAD'	=> true,					'NAME'		=> $method,					'U_ACTION'	=> $this->u_action . "&amp;id=$lang_id&amp;action=upload_data",					'U_BACK'	=> $this->u_action . "&amp;id=$lang_id&amp;action=details&amp;language_file=" . urlencode($selected_lang_file),					'HIDDEN'	=> $hidden_data,					'S_CONNECTION_SUCCESS'		=> (request_var('test_connection', '') && $test_connection === true) ? true : false,					'S_CONNECTION_FAILED'		=> (request_var('test_connection', '') && $test_connection !== true) ? true : false				));			break;			case 'update_details':				if (!$submit || !check_form_key($form_name))				{					trigger_error($user->lang['FORM_INVALID']. adm_back_link($this->u_action), E_USER_WARNING);				}				if (!$lang_id)				{					trigger_error($user->lang['NO_LANG_ID'] . adm_back_link($this->u_action), E_USER_WARNING);				}				$sql = 'SELECT *					FROM ' . LANG_TABLE . "					WHERE lang_id = $lang_id";				$result = $db->sql_query($sql);				$row = $db->sql_fetchrow($result);				$db->sql_freeresult($result);				$sql_ary	= array(					'lang_english_name'		=> request_var('lang_english_name', $row['lang_english_name']),					'lang_local_name'		=> utf8_normalize_nfc(request_var('lang_local_name', $row['lang_local_name'], true)),					'lang_author'			=> utf8_normalize_nfc(request_var('lang_author', $row['lang_author'], true)),				);				$db->sql_query('UPDATE ' . LANG_TABLE . '					SET ' . $db->sql_build_array('UPDATE', $sql_ary) . '					WHERE lang_id = ' . $lang_id);				add_log('admin', 'LOG_LANGUAGE_PACK_UPDATED', $sql_ary['lang_english_name']);				trigger_error($user->lang['LANGUAGE_DETAILS_UPDATED'] . adm_back_link($this->u_action));			break;			case 'submit_file':			case 'download_file':			case 'upload_data':				if (!$submit || !check_form_key($form_name))				{					trigger_error($user->lang['FORM_INVALID']. adm_back_link($this->u_action), E_USER_WARNING);				}				if (!$lang_id || empty($_POST['entry']))				{					trigger_error($user->lang['NO_LANG_ID'] . adm_back_link($this->u_action), E_USER_WARNING);				}				if ($this->language_directory != 'email' && !is_array($_POST['entry']))				{					trigger_error($user->lang['NO_LANG_ID'] . adm_back_link($this->u_action), E_USER_WARNING);				}				if (!$this->language_file || (!$this->language_directory && !in_array($this->language_file, $this->main_files)))				{					trigger_error($user->lang['NO_FILE_SELECTED'] . adm_back_link($this->u_action), E_USER_WARNING);				}				$sql = 'SELECT *					FROM ' . LANG_TABLE . "					WHERE lang_id = $lang_id";				$result = $db->sql_query($sql);				$row = $db->sql_fetchrow($result);				$db->sql_freeresult($result);				if (!$row)				{					trigger_error($user->lang['NO_LANG_ID'] . adm_back_link($this->u_action), E_USER_WARNING);				}				// Before we attempt to write anything let's check if the admin really chose a correct filename				switch ($this->language_directory)				{					case 'email':						// Get email templates						$email_files = filelist($phpbb_root_path . 'language/' . $row['lang_iso'], 'email', 'txt');						$email_files = $email_files['email/'];						if (!in_array($this->language_file, $email_files))						{							trigger_error($user->lang['WRONG_LANGUAGE_FILE'] . adm_back_link($this->u_action . '&amp;action=details&amp;id=' . $lang_id), E_USER_WARNING);						}					break;					case 'acp':						// Get acp files						$acp_files = filelist($phpbb_root_path . 'language/' . $row['lang_iso'], 'acp', $phpEx);						$acp_files = $acp_files['acp/'];						if (!in_array($this->language_file, $acp_files))						{							trigger_error($user->lang['WRONG_LANGUAGE_FILE'] . adm_back_link($this->u_action . '&amp;action=details&amp;id=' . $lang_id), E_USER_WARNING);						}					break;					case 'mods':						// Get mod files						$mods_files = filelist($phpbb_root_path . 'language/' . $row['lang_iso'], 'mods', $phpEx);						$mods_files = (isset($mods_files['mods/'])) ? $mods_files['mods/'] : array();						if (!in_array($this->language_file, $mods_files))						{							trigger_error($user->lang['WRONG_LANGUAGE_FILE'] . adm_back_link($this->u_action . '&amp;action=details&amp;id=' . $lang_id), E_USER_WARNING);						}					break;					default:						if (!in_array($this->language_file, $this->main_files))						{							trigger_error($user->lang['WRONG_LANGUAGE_FILE'] . adm_back_link($this->u_action . '&amp;action=details&amp;id=' . $lang_id), E_USER_WARNING);						}					break;				}				if (!$safe_mode)				{					$mkdir_ary = array('language', 'language/' . $row['lang_iso']);					if ($this->language_directory)					{						$mkdir_ary[] = 'language/' . $row['lang_iso'] . '/' . $this->language_directory;					}					foreach ($mkdir_ary as $dir)					{						$dir = $phpbb_root_path . 'store/' . $dir;						if (!is_dir($dir))						{							if (!@mkdir($dir, 0777))							{								trigger_error("Could not create directory $dir", E_USER_ERROR);							}							@chmod($dir, 0777);						}					}				}				// Get target filename for storage folder				$filename = $this->get_filename($row['lang_iso'], $this->language_directory, $this->language_file, true, true);				$fp = @fopen($phpbb_root_path . $filename, 'wb');				if (!$fp)				{					trigger_error(sprintf($user->lang['UNABLE_TO_WRITE_FILE'], $filename) . adm_back_link($this->u_action . '&amp;id=' . $lang_id . '&amp;action=details&amp;language_file=' . urlencode($selected_lang_file)), E_USER_WARNING);				}				if ($this->language_directory == 'email')				{					// Email Template					$entry = $this->prepare_lang_entry($_POST['entry'], false);					fwrite($fp, $entry);				}				else				{					$name = (($this->language_directory) ? $this->language_directory . '_' : '') . $this->language_file;					$header = str_replace(array('{FILENAME}', '{LANG_NAME}', '{CHANGED}', '{AUTHOR}'), array($name, $row['lang_english_name'], date('Y-m-d', time()), $row['lang_author']), $this->language_file_header);					if (strpos($this->language_file, 'help_') === 0)					{						// Help File						$header .= '$help = array(' . "\n";						fwrite($fp, $header);						foreach ($_POST['entry'] as $key => $value)						{							if (!is_array($value))							{								continue;							}							$entry = "\tarray(\n";							foreach ($value as $_key => $_value)							{								$entry .= "\t\t" . (int) $_key . "\t=> '" . $this->prepare_lang_entry($_value) . "',\n";							}							$entry .= "\t),\n";							fwrite($fp, $entry);						}						$footer = ");\n\n?>";						fwrite($fp, $footer);					}					else					{						// Language File						$header .= $this->lang_header;						fwrite($fp, $header);						foreach ($_POST['entry'] as $key => $value)						{							$entry = $this->format_lang_array($key, $value);							fwrite($fp, $entry);						}						$footer = "));\n\n?>";						fwrite($fp, $footer);					}				}				fclose($fp);				if ($action == 'download_file')				{					header('Pragma: no-cache');					header('Content-Type: application/octetstream; name="' . $this->language_file . '"');					header('Content-disposition: attachment; filename=' . $this->language_file);					$fp = @fopen($phpbb_root_path . $filename, 'rb');					while ($buffer = fread($fp, 1024))					{						echo $buffer;					}					fclose($fp);					add_log('admin', 'LOG_LANGUAGE_FILE_SUBMITTED', $this->language_file);					exit;				}				else if ($action == 'upload_data')				{					$sql = 'SELECT lang_iso						FROM ' . LANG_TABLE . "						WHERE lang_id = $lang_id";					$result = $db->sql_query($sql);					$row = $db->sql_fetchrow($result);					$db->sql_freeresult($result);					$file = request_var('file', '');					$dir = request_var('dir', '');					$selected_lang_file = $dir . '|' . $file;					$old_file = '/' . $this->get_filename($row['lang_iso'], $dir, $file, false, true);					$lang_path = 'language/' . $row['lang_iso'] . '/' . (($dir) ? $dir . '/' : '');					include_once($phpbb_root_path . 'includes/functions_transfer.' . $phpEx);					$method = request_var('method', '');					if ($method != 'ftp' && $method != 'ftp_fsock')					{						trigger_error($user->lang['INVALID_UPLOAD_METHOD'], E_USER_ERROR);					}					$transfer = new $method(request_var('host', ''), request_var('username', ''), request_var('password', ''), request_var('root_path', ''), request_var('port', ''), request_var('timeout', ''));					if (($result = $transfer->open_session()) !== true)					{						trigger_error($user->lang[$result] . adm_back_link($this->u_action . '&amp;action=details&amp;id=' . $lang_id . '&amp;language_file=' . urlencode($selected_lang_file)), E_USER_WARNING);					}					$transfer->rename($lang_path . $file, $lang_path . $file . '.bak');					$result = $transfer->copy_file('store/' . $lang_path . $file, $lang_path . $file);					if ($result === false)					{						// If failed, try to rename again and print error out...						$transfer->delete_file($lang_path . $file);						$transfer->rename($lang_path . $file . '.bak', $lang_path . $file);						trigger_error($user->lang['UPLOAD_FAILED'] . adm_back_link($this->u_action . '&amp;action=details&amp;id=' . $lang_id . '&amp;language_file=' . urlencode($selected_lang_file)), E_USER_WARNING);					}					$transfer->close_session();					// Remove from storage folder					if (file_exists($phpbb_root_path . 'store/' . $lang_path . $file))					{						@unlink($phpbb_root_path . 'store/' . $lang_path . $file);					}					add_log('admin', 'LOG_LANGUAGE_FILE_REPLACED', $file);					trigger_error($user->lang['UPLOAD_COMPLETED'] . adm_back_link($this->u_action . '&amp;action=details&amp;id=' . $lang_id . '&amp;language_file=' . urlencode($selected_lang_file)));				}				add_log('admin', 'LOG_LANGUAGE_FILE_SUBMITTED', $this->language_file);				$action = 'details';			// no break;			case 'details':				if (!$lang_id)				{					trigger_error($user->lang['NO_LANG_ID'] . adm_back_link($this->u_action), E_USER_WARNING);				}				$this->page_title = 'LANGUAGE_PACK_DETAILS';				$sql = 'SELECT *					FROM ' . LANG_TABLE . '					WHERE lang_id = ' . $lang_id;				$result = $db->sql_query($sql);				$lang_entries = $db->sql_fetchrow($result);				$db->sql_freeresult($result);				$lang_iso = $lang_entries['lang_iso'];				$missing_vars = $missing_files = array();				// Get email templates				$email_files = filelist($phpbb_root_path . 'language/' . $config['default_lang'], 'email', 'txt');				$email_files = $email_files['email/'];				// Get acp files				$acp_files = filelist($phpbb_root_path . 'language/' . $config['default_lang'], 'acp', $phpEx);				$acp_files = $acp_files['acp/'];				// Get mod files				$mods_files = filelist($phpbb_root_path . 'language/' . $config['default_lang'], 'mods', $phpEx);				$mods_files = (isset($mods_files['mods/'])) ? $mods_files['mods/'] : array();				// Check if our current filename matches the files				switch ($this->language_directory)				{					case 'email':						if (!in_array($this->language_file, $email_files))						{							trigger_error($user->lang['WRONG_LANGUAGE_FILE'] . adm_back_link($this->u_action . '&amp;action=details&amp;id=' . $lang_id), E_USER_WARNING);						}					break;					case 'acp':						if (!in_array($this->language_file, $acp_files))						{							trigger_error($user->lang['WRONG_LANGUAGE_FILE'] . adm_back_link($this->u_action . '&amp;action=details&amp;id=' . $lang_id), E_USER_WARNING);						}					break;					case 'mods':						if (!in_array($this->language_file, $mods_files))						{							trigger_error($user->lang['WRONG_LANGUAGE_FILE'] . adm_back_link($this->u_action . '&amp;action=details&amp;id=' . $lang_id), E_USER_WARNING);						}					break;					default:						if (!in_array($this->language_file, $this->main_files))						{							trigger_error($user->lang['WRONG_LANGUAGE_FILE'] . adm_back_link($this->u_action . '&amp;action=details&amp;id=' . $lang_id), E_USER_WARNING);						}				}				if (isset($_POST['remove_store']))				{					$store_filename = $this->get_filename($lang_iso, $this->language_directory, $this->language_file, true, true);					if (file_exists($phpbb_root_path . $store_filename))					{						@unlink($phpbb_root_path . $store_filename);					}				}				include_once($phpbb_root_path . 'includes/functions_transfer.' . $phpEx);				$methods = transfer::methods();				foreach ($methods as $method)				{					$template->assign_block_vars('buttons', array(						'VALUE' => $method					));				}				$template->assign_vars(array(					'S_DETAILS'			=> true,					'U_ACTION'			=> $this->u_action . "&amp;action=details&amp;id=$lang_id",					'U_BACK'			=> $this->u_action,					'LANG_LOCAL_NAME'	=> $lang_entries['lang_local_name'],					'LANG_ENGLISH_NAME'	=> $lang_entries['lang_english_name'],					'LANG_ISO'			=> $lang_entries['lang_iso'],					'LANG_AUTHOR'		=> $lang_entries['lang_author'],					'ALLOW_UPLOAD'		=> sizeof($methods)					)				);				// If current lang is different from the default lang, then first try to grab missing/additional vars				if ($lang_iso != $config['default_lang'])				{					$is_missing_var = false;					foreach ($this->main_files as $file)					{						if (file_exists($phpbb_root_path . $this->get_filename($lang_iso, '', $file)))						{							$missing_vars[$file] = $this->compare_language_files($config['default_lang'], $lang_iso, '', $file);							if (sizeof($missing_vars[$file]))							{								$is_missing_var = true;							}						}						else						{							$missing_files[] = $this->get_filename($lang_iso, '', $file);						}					}					// Now go through acp/mods directories					foreach ($acp_files as $file)					{						if (file_exists($phpbb_root_path . $this->get_filename($lang_iso, 'acp', $file)))						{							$missing_vars['acp/' . $file] = $this->compare_language_files($config['default_lang'], $lang_iso, 'acp', $file);							if (sizeof($missing_vars['acp/' . $file]))							{								$is_missing_var = true;							}						}						else						{							$missing_files[] = $this->get_filename($lang_iso, 'acp', $file);						}					}					if (sizeof($mods_files))					{						foreach ($mods_files as $file)						{							if (file_exists($phpbb_root_path . $this->get_filename($lang_iso, 'mods', $file)))							{								$missing_vars['mods/' . $file] = $this->compare_language_files($config['default_lang'], $lang_iso, 'mods', $file);								if (sizeof($missing_vars['mods/' . $file]))								{									$is_missing_var = true;								}							}							else							{								$missing_files[] = $this->get_filename($lang_iso, 'mods', $file);							}						}					}					// More missing files... for example email templates?					foreach ($email_files as $file)					{						if (!file_exists($phpbb_root_path . $this->get_filename($lang_iso, 'email', $file)))						{							$missing_files[] = $this->get_filename($lang_iso, 'email', $file);						}					}					if (sizeof($missing_files))					{						$template->assign_vars(array(							'S_MISSING_FILES'		=> true,							'L_MISSING_FILES'		=> sprintf($user->lang['THOSE_MISSING_LANG_FILES'], $lang_entries['lang_local_name']),							'MISSING_FILES'			=> implode('<br />', $missing_files))						);					}					if ($is_missing_var)					{						$template->assign_vars(array(							'S_MISSING_VARS'			=> true,							'L_MISSING_VARS_EXPLAIN'	=> sprintf($user->lang['THOSE_MISSING_LANG_VARIABLES'], $lang_entries['lang_local_name']),							'U_MISSING_ACTION'			=> $this->u_action . "&amp;action=$action&amp;id=$lang_id")						);						foreach ($missing_vars as $file => $vars)						{							if (!sizeof($vars))							{								continue;							}							$template->assign_block_vars('missing', array(								'FILE'			=> $file,								'TPL'			=> $this->print_language_entries($vars, '', false),								'KEY'			=> (strpos($file, '/') === false) ? '|' . $file : str_replace('/', '|', $file))							);						}					}				}				// Main language files				$s_lang_options = '<option value="|common.' . $phpEx . '" class="sep">' . $user->lang['LANGUAGE_FILES'] . '</option>';				foreach ($this->main_files as $file)				{					if (strpos($file, 'help_') === 0)					{						continue;					}					$prefix = (file_exists($phpbb_root_path . $this->get_filename($lang_iso, '', $file, true, true))) ? '* ' : '';					$selected = (!$this->language_directory && $this->language_file == $file) ? ' selected="selected"' : '';					$s_lang_options .= '<option value="|' . $file . '"' . $selected . '>' . $prefix . $file . '</option>';				}				// Help Files				$s_lang_options .= '<option value="|common.' . $phpEx . '" class="sep">' . $user->lang['HELP_FILES'] . '</option>';				foreach ($this->main_files as $file)				{					if (strpos($file, 'help_') !== 0)					{						continue;					}					$prefix = (file_exists($phpbb_root_path . $this->get_filename($lang_iso, '', $file, true, true))) ? '* ' : '';					$selected = (!$this->language_directory && $this->language_file == $file) ? ' selected="selected"' : '';					$s_lang_options .= '<option value="|' . $file . '"' . $selected . '>' . $prefix . $file . '</option>';				}				// Now every other language directory				$check_files = array('email', 'acp', 'mods');				foreach ($check_files as $check)				{					if (!sizeof(${$check . '_files'}))					{						continue;					}					$s_lang_options .= '<option value="|common.' . $phpEx . '" class="sep">' . $user->lang[strtoupper($check) . '_FILES'] . '</option>';					foreach (${$check . '_files'} as $file)					{						$prefix = (file_exists($phpbb_root_path . $this->get_filename($lang_iso, $check, $file, true, true))) ? '* ' : '';						$selected = ($this->language_directory == $check && $this->language_file == $file) ? ' selected="selected"' : '';						$s_lang_options .= '<option value="' . $check . '|' . $file . '"' . $selected . '>' . $prefix . $file . '</option>';					}				}				// Get Language Entries - if saved within store folder, we take this one (with the option to remove it)				$lang = array();				$is_email_file = ($this->language_directory == 'email') ? true : false;				$is_help_file = (strpos($this->language_file, 'help_') === 0) ? true : false;				$file_from_store = (file_exists($phpbb_root_path . $this->get_filename($lang_iso, $this->language_directory, $this->language_file, true, true))) ? true : false;				$no_store_filename = $this->get_filename($lang_iso, $this->language_directory, $this->language_file);				if (!$file_from_store && !file_exists($phpbb_root_path . $no_store_filename))				{					$print_message = sprintf($user->lang['MISSING_LANGUAGE_FILE'], $no_store_filename);				}				else				{					if ($is_email_file)					{						$lang = file_get_contents($phpbb_root_path . $this->get_filename($lang_iso, $this->language_directory, $this->language_file, $file_from_store));					}					else					{						$help = array();						include($phpbb_root_path . $this->get_filename($lang_iso, $this->language_directory, $this->language_file, $file_from_store));						if ($is_help_file)						{							$lang = $help;							unset($help);						}					}					$print_message = (($this->language_directory) ? $this->language_directory . '/' : '') . $this->language_file;				}				// Normal language pack entries				$template->assign_vars(array(					'U_ENTRY_ACTION'		=> $this->u_action . "&amp;action=details&amp;id=$lang_id#entries",					'S_EMAIL_FILE'			=> $is_email_file,					'S_FROM_STORE'			=> $file_from_store,					'S_LANG_OPTIONS'		=> $s_lang_options,					'PRINT_MESSAGE'			=> $print_message,					)				);				if (!$is_email_file)				{					$tpl = '';					$name = (($this->language_directory) ? $this->language_directory . '/' : '') . $this->language_file;					if (isset($missing_vars[$name]) && sizeof($missing_vars[$name]))					{						$tpl .= $this->print_language_entries($missing_vars[$name], '* ');					}					$tpl .= $this->print_language_entries($lang);					$template->assign_var('TPL', $tpl);					unset($tpl);				}				else				{					$template->assign_vars(array(						'LANG'		=> $lang)					);					unset($lang);				}				return;			break;			case 'delete':				if (!$lang_id)				{					trigger_error($user->lang['NO_LANG_ID'] . adm_back_link($this->u_action), E_USER_WARNING);				}				$sql = 'SELECT *					FROM ' . LANG_TABLE . '					WHERE lang_id = ' . $lang_id;				$result = $db->sql_query($sql);				$row = $db->sql_fetchrow($result);				$db->sql_freeresult($result);				if ($row['lang_iso'] == $config['default_lang'])				{					trigger_error($user->lang['NO_REMOVE_DEFAULT_LANG'] . adm_back_link($this->u_action), E_USER_WARNING);				}				if (confirm_box(true))				{					$db->sql_query('DELETE FROM ' . LANG_TABLE . ' WHERE lang_id = ' . $lang_id);					$sql = 'UPDATE ' . USERS_TABLE . "						SET user_lang = '" . $db->sql_escape($config['default_lang']) . "'						WHERE user_lang = '" . $db->sql_escape($row['lang_iso']) . "'";					$db->sql_query($sql);					// We also need to remove the translated entries for custom profile fields - we want clean tables, don't we?					$sql = 'DELETE FROM ' . PROFILE_LANG_TABLE . ' WHERE lang_id = ' . $lang_id;					$db->sql_query($sql);					$sql = 'DELETE FROM ' . PROFILE_FIELDS_LANG_TABLE . ' WHERE lang_id = ' . $lang_id;					$db->sql_query($sql);					$sql = 'DELETE FROM ' . STYLES_IMAGESET_DATA_TABLE . " WHERE image_lang = '" . $db->sql_escape($row['lang_iso']) . "'";					$result = $db->sql_query($sql);					$cache->destroy('sql', STYLES_IMAGESET_DATA_TABLE);					add_log('admin', 'LOG_LANGUAGE_PACK_DELETED', $row['lang_english_name']);					trigger_error(sprintf($user->lang['LANGUAGE_PACK_DELETED'], $row['lang_english_name']) . adm_back_link($this->u_action));				}				else				{					$s_hidden_fields = array(						'i'			=> $id,						'mode'		=> $mode,						'action'	=> $action,						'id'		=> $lang_id,					);					confirm_box(false, $user->lang['CONFIRM_OPERATION'], build_hidden_fields($s_hidden_fields));				}			break;			case 'install':				$lang_iso = request_var('iso', '');				$lang_iso = basename($lang_iso);				if (!$lang_iso || !file_exists("{$phpbb_root_path}language/$lang_iso/iso.txt"))				{					trigger_error($user->lang['LANGUAGE_PACK_NOT_EXIST'] . adm_back_link($this->u_action), E_USER_WARNING);				}				$file = file("{$phpbb_root_path}language/$lang_iso/iso.txt");				$lang_pack = array(					'iso'		=> $lang_iso,					'name'		=> trim(htmlspecialchars($file[0])),					'local_name'=> trim(htmlspecialchars($file[1], ENT_COMPAT, 'UTF-8')),					'author'	=> trim(htmlspecialchars($file[2], ENT_COMPAT, 'UTF-8'))				);				unset($file);				$sql = 'SELECT lang_iso					FROM ' . LANG_TABLE . "					WHERE lang_iso = '" . $db->sql_escape($lang_iso) . "'";				$result = $db->sql_query($sql);				$row = $db->sql_fetchrow($result);				$db->sql_freeresult($result);				if ($row)				{					trigger_error($user->lang['LANGUAGE_PACK_ALREADY_INSTALLED'] . adm_back_link($this->u_action), E_USER_WARNING);				}				if (!$lang_pack['name'] || !$lang_pack['local_name'])				{					trigger_error($user->lang['INVALID_LANGUAGE_PACK'] . adm_back_link($this->u_action), E_USER_WARNING);				}				// Add language pack				$sql_ary = array(					'lang_iso'			=> $lang_pack['iso'],					'lang_dir'			=> $lang_pack['iso'],					'lang_english_name'	=> $lang_pack['name'],					'lang_local_name'	=> $lang_pack['local_name'],					'lang_author'		=> $lang_pack['author']				);				$db->sql_query('INSERT INTO ' . LANG_TABLE . ' ' . $db->sql_build_array('INSERT', $sql_ary));				$lang_id = $db->sql_nextid();				$valid_localized = array(					'icon_back_top', 'icon_contact_aim', 'icon_contact_email', 'icon_contact_icq', 'icon_contact_jabber', 'icon_contact_msnm', 'icon_contact_pm', 'icon_contact_yahoo', 'icon_contact_www', 'icon_post_delete', 'icon_post_edit', 'icon_post_info', 'icon_post_quote', 'icon_post_report', 'icon_user_online', 'icon_user_offline', 'icon_user_profile', 'icon_user_search', 'icon_user_warn', 'button_pm_forward', 'button_pm_new', 'button_pm_reply', 'button_topic_locked', 'button_topic_new', 'button_topic_reply',				);				$sql_ary = array();				$sql = 'SELECT *					FROM ' . STYLES_IMAGESET_TABLE;				$result = $db->sql_query($sql);				while ($imageset_row = $db->sql_fetchrow($result))				{					if (@file_exists("{$phpbb_root_path}styles/{$imageset_row['imageset_path']}/imageset/{$lang_pack['iso']}/imageset.cfg"))					{						$cfg_data_imageset_data = parse_cfg_file("{$phpbb_root_path}styles/{$imageset_row['imageset_path']}/imageset/{$lang_pack['iso']}/imageset.cfg");						foreach ($cfg_data_imageset_data as $image_name => $value)						{							if (strpos($value, '*') !== false)							{								if (substr($value, -1, 1) === '*')								{									list($image_filename, $image_height) = explode('*', $value);									$image_width = 0;								}								else								{									list($image_filename, $image_height, $image_width) = explode('*', $value);								}							}							else							{								$image_filename = $value;								$image_height = $image_width = 0;							}							if (strpos($image_name, 'img_') === 0 && $image_filename)							{								$image_name = substr($image_name, 4);								if (in_array($image_name, $valid_localized))								{									$sql_ary[] = array(										'image_name'		=> (string) $image_name,										'image_filename'	=> (string) $image_filename,										'image_height'		=> (int) $image_height,										'image_width'		=> (int) $image_width,										'imageset_id'		=> (int) $imageset_row['imageset_id'],										'image_lang'		=> (string) $lang_pack['iso'],									);								}							}						}					}				}				$db->sql_freeresult($result);				if (sizeof($sql_ary))				{					$db->sql_multi_insert(STYLES_IMAGESET_DATA_TABLE, $sql_ary);					$cache->destroy('sql', STYLES_IMAGESET_DATA_TABLE);				}				// Now let's copy the default language entries for custom profile fields for this new language - makes admin's life easier.				$sql = 'SELECT lang_id					FROM ' . LANG_TABLE . "					WHERE lang_iso = '" . $db->sql_escape($config['default_lang']) . "'";				$result = $db->sql_query($sql);				$default_lang_id = (int) $db->sql_fetchfield('lang_id');				$db->sql_freeresult($result);				// We want to notify the admin that custom profile fields need to be updated for the new language.				$notify_cpf_update = false;				// From the mysql documentation:				// Prior to MySQL 4.0.14, the target table of the INSERT statement cannot appear in the FROM clause of the SELECT part of the query. This limitation is lifted in 4.0.14.				// Due to this we stay on the safe side if we do the insertion "the manual way"				$sql = 'SELECT field_id, lang_name, lang_explain, lang_default_value					FROM ' . PROFILE_LANG_TABLE . '					WHERE lang_id = ' . $default_lang_id;				$result = $db->sql_query($sql);				while ($row = $db->sql_fetchrow($result))				{					$row['lang_id'] = $lang_id;					$db->sql_query('INSERT INTO ' . PROFILE_LANG_TABLE . ' ' . $db->sql_build_array('INSERT', $row));					$notify_cpf_update = true;				}				$db->sql_freeresult($result);				$sql = 'SELECT field_id, option_id, field_type, lang_value					FROM ' . PROFILE_FIELDS_LANG_TABLE . '					WHERE lang_id = ' . $default_lang_id;				$result = $db->sql_query($sql);				while ($row = $db->sql_fetchrow($result))				{					$row['lang_id'] = $lang_id;					$db->sql_query('INSERT INTO ' . PROFILE_FIELDS_LANG_TABLE . ' ' . $db->sql_build_array('INSERT', $row));					$notify_cpf_update = true;				}				$db->sql_freeresult($result);				add_log('admin', 'LOG_LANGUAGE_PACK_INSTALLED', $lang_pack['name']);				$message = sprintf($user->lang['LANGUAGE_PACK_INSTALLED'], $lang_pack['name']);				$message .= ($notify_cpf_update) ? '<br /><br />' . $user->lang['LANGUAGE_PACK_CPF_UPDATE'] : '';				trigger_error($message . adm_back_link($this->u_action));			break;			case 'download':				if (!$lang_id)				{					trigger_error($user->lang['NO_LANG_ID'] . adm_back_link($this->u_action), E_USER_WARNING);				}				$sql = 'SELECT *					FROM ' . LANG_TABLE . '					WHERE lang_id = ' . $lang_id;				$result = $db->sql_query($sql);				$row = $db->sql_fetchrow($result);				$db->sql_freeresult($result);				$use_method = request_var('use_method', '');				$methods = array('.tar');				$available_methods = array('.tar.gz' => 'zlib', '.tar.bz2' => 'bz2', '.zip' => 'zlib');				foreach ($available_methods as $type => $module)				{					if (!@extension_loaded($module))					{						continue;					}					$methods[] = $type;				}				// Let the user decide in which format he wants to have the pack				if (!$use_method)				{					$this->page_title = 'SELECT_DOWNLOAD_FORMAT';					$radio_buttons = '';					foreach ($methods as $method)					{						$radio_buttons .= '<label><input type="radio"' . ((!$radio_buttons) ? ' id="use_method"' : '') . ' class="radio" value="' . $method . '" name="use_method" /> ' . $method . '</label>';					}					$template->assign_vars(array(						'S_SELECT_METHOD'		=> true,						'U_BACK'				=> $this->u_action,						'U_ACTION'				=> $this->u_action . "&amp;action=$action&amp;id=$lang_id",						'RADIO_BUTTONS'			=> $radio_buttons)					);					return;				}				if (!in_array($use_method, $methods))				{					$use_method = '.tar';				}				include_once($phpbb_root_path . 'includes/functions_compress.' . $phpEx);				if ($use_method == '.zip')				{					$compress = new compress_zip('w', $phpbb_root_path . 'store/lang_' . $row['lang_iso'] . $use_method);				}				else				{					$compress = new compress_tar('w', $phpbb_root_path . 'store/lang_' . $row['lang_iso'] . $use_method, $use_method);				}				// Get email templates				$email_templates = filelist($phpbb_root_path . 'language/' . $row['lang_iso'], 'email', 'txt');				$email_templates = $email_templates['email/'];				// Get acp files				$acp_files = filelist($phpbb_root_path . 'language/' . $row['lang_iso'], 'acp', $phpEx);				$acp_files = $acp_files['acp/'];				// Get mod files				$mod_files = filelist($phpbb_root_path . 'language/' . $row['lang_iso'], 'mods', $phpEx);				$mod_files = (isset($mod_files['mods/'])) ? $mod_files['mods/'] : array();				// Add main files				$this->add_to_archive($compress, $this->main_files, $row['lang_iso']);				// Add search files if they exist...				if (file_exists($phpbb_root_path . 'language/' . $row['lang_iso'] . '/search_ignore_words.' . $phpEx))				{					$this->add_to_archive($compress, array("search_ignore_words.$phpEx"), $row['lang_iso']);				}				if (file_exists($phpbb_root_path . 'language/' . $row['lang_iso'] . '/search_synonyms.' . $phpEx))				{					$this->add_to_archive($compress, array("search_synonyms.$phpEx"), $row['lang_iso']);				}				// Write files in folders				$this->add_to_archive($compress, $email_templates, $row['lang_iso'], 'email');				$this->add_to_archive($compress, $acp_files, $row['lang_iso'], 'acp');				$this->add_to_archive($compress, $mod_files, $row['lang_iso'], 'mods');				// Write ISO File				$iso_src = htmlspecialchars_decode($row['lang_english_name']) . "\n";				$iso_src .= htmlspecialchars_decode($row['lang_local_name']) . "\n";				$iso_src .= htmlspecialchars_decode($row['lang_author']);				$compress->add_data($iso_src, 'language/' . $row['lang_iso'] . '/iso.txt');				// index.htm files				$compress->add_data('', 'language/' . $row['lang_iso'] . '/index.htm');				$compress->add_data('', 'language/' . $row['lang_iso'] . '/email/index.htm');				$compress->add_data('', 'language/' . $row['lang_iso'] . '/acp/index.htm');				if (sizeof($mod_files))				{					$compress->add_data('', 'language/' . $row['lang_iso'] . '/mods/index.htm');				}				$compress->close();				$compress->download('lang_' . $row['lang_iso']);				@unlink($phpbb_root_path . 'store/lang_' . $row['lang_iso'] . $use_method);				exit;			break;		}		$sql = 'SELECT user_lang, COUNT(user_lang) AS lang_count			FROM ' . USERS_TABLE . '			GROUP BY user_lang';		$result = $db->sql_query($sql);		$lang_count = array();		while ($row = $db->sql_fetchrow($result))		{			$lang_count[$row['user_lang']] = $row['lang_count'];		}		$db->sql_freeresult($result);		$sql = 'SELECT *			FROM ' . LANG_TABLE . '			ORDER BY lang_english_name';		$result = $db->sql_query($sql);		$installed = array();		while ($row = $db->sql_fetchrow($result))		{			$installed[] = $row['lang_iso'];			$tagstyle = ($row['lang_iso'] == $config['default_lang']) ? '*' : '';			$template->assign_block_vars('lang', array(				'U_DETAILS'			=> $this->u_action . "&amp;action=details&amp;id={$row['lang_id']}",				'U_DOWNLOAD'		=> $this->u_action . "&amp;action=download&amp;id={$row['lang_id']}",				'U_DELETE'			=> $this->u_action . "&amp;action=delete&amp;id={$row['lang_id']}",				'ENGLISH_NAME'		=> $row['lang_english_name'],				'TAG'				=> $tagstyle,				'LOCAL_NAME'		=> $row['lang_local_name'],				'ISO'				=> $row['lang_iso'],				'USED_BY'			=> (isset($lang_count[$row['lang_iso']])) ? $lang_count[$row['lang_iso']] : 0,			));		}		$db->sql_freeresult($result);		$new_ary = $iso = array();		$dp = @opendir("{$phpbb_root_path}language");		if ($dp)		{			while (($file = readdir($dp)) !== false)			{				if ($file[0] == '.' || !is_dir($phpbb_root_path . 'language/' . $file))				{					continue;				}				if (file_exists("{$phpbb_root_path}language/$file/iso.txt"))				{					if (!in_array($file, $installed))					{						if ($iso = file("{$phpbb_root_path}language/$file/iso.txt"))						{							if (sizeof($iso) == 3)							{								$new_ary[$file] = array(									'iso'		=> $file,									'name'		=> trim($iso[0]),									'local_name'=> trim($iso[1]),									'author'	=> trim($iso[2])								);							}						}					}				}			}			closedir($dp);		}		unset($installed);		if (sizeof($new_ary))		{			foreach ($new_ary as $iso => $lang_ary)			{				$template->assign_block_vars('notinst', array(					'ISO'			=> htmlspecialchars($lang_ary['iso']),					'LOCAL_NAME'	=> htmlspecialchars($lang_ary['local_name'], ENT_COMPAT, 'UTF-8'),					'NAME'			=> htmlspecialchars($lang_ary['name'], ENT_COMPAT, 'UTF-8'),					'U_INSTALL'		=> $this->u_action . '&amp;action=install&amp;iso=' . urlencode($lang_ary['iso']))				);			}		}		unset($new_ary);	}	/**	* Set default language variables/header	*/	function default_variables()	{		global $phpEx;		$this->language_file_header = '<?php/**** {FILENAME} [{LANG_NAME}]** @package language* @version $' . 'Id: ' . '$* @copyright (c) ' . date('Y') . ' phpBB Group* @author {CHANGED} - {AUTHOR}* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** DO NOT CHANGE*/if (!defined(\'IN_PHPBB\')){	exit;}if (empty($lang) || !is_array($lang)){	$lang = array();}// DEVELOPERS PLEASE NOTE//// All language files should use UTF-8 as their encoding and the files must not contain a BOM.//// Placeholders can now contain order information, e.g. instead of// \'Page %s of %s\' you can (and should) write \'Page %1$s of %2$s\', this allows// translators to re-order the output of data while ensuring it remains correct//// You do not need this where single placeholders are used, e.g. \'Message %d\' is fine// equally where a string contains only two placeholders which are used to wrap text// in a url you again do not need to specify an order e.g., \'Click %sHERE%s\' is fine';		$this->lang_header = '$lang = array_merge($lang, array(';		// Language files in language root directory		$this->main_files = array("captcha_qa.$phpEx", "captcha_recaptcha.$phpEx", "common.$phpEx", "groups.$phpEx", "install.$phpEx", "mcp.$phpEx", "memberlist.$phpEx", "posting.$phpEx", "search.$phpEx", "ucp.$phpEx", "viewforum.$phpEx", "viewtopic.$phpEx", "help_bbcode.$phpEx", "help_faq.$phpEx");	}	/**	* Get filename/location of language file	*/	function get_filename($lang_iso, $directory, $filename, $check_store = false, $only_return_filename = false)	{		global $phpbb_root_path, $safe_mode;		$check_filename = "language/$lang_iso/" . (($directory) ? $directory . '/' : '') . $filename;		if ($check_store)		{			$check_store_filename = ($safe_mode) ? "store/langfile_{$lang_iso}" . (($directory) ? '_' . $directory : '') . "_{$filename}" : "store/language/$lang_iso/" . (($directory) ? $directory . '/' : '') . $filename;			if (!$only_return_filename && file_exists($phpbb_root_path . $check_store_filename))			{				return $check_store_filename;			}			else if ($only_return_filename)			{				return $check_store_filename;			}		}		return $check_filename;	}	/**	* Add files to archive	*/	function add_to_archive(&$compress, $filelist, $lang_iso, $directory = '')	{		global $phpbb_root_path;		foreach ($filelist as $file)		{			// Get source filename			$source = $this->get_filename($lang_iso, $directory, $file, true);			$destination = 'language/' . $lang_iso . '/' . (($directory) ? $directory . '/' : '') . $file;			// Add file to archive			$compress->add_custom_file($phpbb_root_path . $source, $destination);		}	}	/**	* Little helper to add some hardcoded template bits	*/	function add_input_field()	{		$keys = func_get_args();		$non_static		= array_shift($keys);		$value			= utf8_normalize_nfc(array_shift($keys));		if (!$non_static)		{			return '<strong>' . htmlspecialchars($value, ENT_COMPAT, 'UTF-8') . '</strong>';		}		// If more then 270 characters, then we present a textarea, else an input field		$textarea = (utf8_strlen($value) > 270) ? true : false;		$tpl = '';		$tpl .= ($textarea) ? '<textarea name="' : '<input type="text" name="';		$tpl .= 'entry[' . implode('][', array_map('utf8_htmlspecialchars', $keys)) . ']"';		$tpl .= ($textarea) ? ' cols="80" rows="5" class="langvalue">' : ' class="langvalue" value="';		$tpl .= htmlspecialchars($value, ENT_COMPAT, 'UTF-8');		$tpl .= ($textarea) ? '</textarea>' : '" />';		return $tpl;	}	/**	* Print language entries	*/	function print_language_entries(&$lang_ary, $key_prefix = '', $input_field = true)	{		$tpl = '';		foreach ($lang_ary as $key => $value)		{			if (is_array($value))			{				// Write key				$tpl .= '				<tr>					<td class="row3" colspan="2">' . htmlspecialchars($key_prefix, ENT_COMPAT, 'UTF-8') . '<strong>' . htmlspecialchars($key, ENT_COMPAT, 'UTF-8') . '</strong></td>				</tr>';				foreach ($value as $_key => $_value)				{					if (is_array($_value))					{						// Write key						$tpl .= '							<tr>								<td class="row3" colspan="2">' . htmlspecialchars($key_prefix, ENT_COMPAT, 'UTF-8') . '&nbsp; &nbsp;<strong>' . htmlspecialchars($_key, ENT_COMPAT, 'UTF-8') . '</strong></td>							</tr>';						foreach ($_value as $__key => $__value)						{							// Write key							$tpl .= '								<tr>									<td class="row1" style="white-space: nowrap;">' . htmlspecialchars($key_prefix, ENT_COMPAT, 'UTF-8') . '<strong>' . htmlspecialchars($__key, ENT_COMPAT, 'UTF-8') . '</strong></td>									<td class="row2">';							$tpl .= $this->add_input_field($input_field, $__value, $key, $_key, $__key);							$tpl .= '</td>								</tr>';						}					}					else					{						// Write key						$tpl .= '							<tr>								<td class="row1" style="white-space: nowrap;">' . htmlspecialchars($key_prefix, ENT_COMPAT, 'UTF-8') . '<strong>' . htmlspecialchars($_key, ENT_COMPAT, 'UTF-8') . '</strong></td>								<td class="row2">';						$tpl .= $this->add_input_field($input_field, $_value, $key, $_key);						$tpl .= '</td>							</tr>';					}				}				$tpl .= '				<tr>					<td class="spacer" colspan="2">&nbsp;</td>				</tr>';			}			else			{				// Write key				$tpl .= '				<tr>					<td class="row1" style="white-space: nowrap;">' . htmlspecialchars($key_prefix, ENT_COMPAT, 'UTF-8') . '<strong>' . htmlspecialchars($key, ENT_COMPAT, 'UTF-8') . '</strong></td>					<td class="row2">';				$tpl .= $this->add_input_field($input_field, $value, $key);				$tpl .= '</td>					</tr>';			}		}		return $tpl;	}	/**	* Compare two language files	*/	function compare_language_files($source_lang, $dest_lang, $directory, $file)	{		global $phpbb_root_path, $phpEx;		$return_ary = array();		$lang = array();		include("{$phpbb_root_path}language/{$source_lang}/" . (($directory) ? $directory . '/' : '') . $file);		$lang_entry_src = $lang;		$lang = array();		if (!file_exists($phpbb_root_path . $this->get_filename($dest_lang, $directory, $file, true)))		{			return array();		}		include($phpbb_root_path . $this->get_filename($dest_lang, $directory, $file, true));		$lang_entry_dst = $lang;		unset($lang);		$diff_array_keys = array_diff(array_keys($lang_entry_src), array_keys($lang_entry_dst));		unset($lang_entry_dst);		foreach ($diff_array_keys as $key)		{			$return_ary[$key] = $lang_entry_src[$key];		}		unset($lang_entry_src);		return $return_ary;	}	/**	* Return language string value for storage	*/	function prepare_lang_entry($text, $store = true)	{		$text = (STRIP) ? stripslashes($text) : $text;		// Adjust for storage...		if ($store)		{			$text = str_replace("'", "\\'", str_replace('\\', '\\\\', $text));		}		return $text;	}	/**	* Format language array for storage	*/	function format_lang_array($key, $value, $tabs = "\t")	{		$entry = '';		if (!is_array($value))		{			$entry .= "{$tabs}'" . $this->prepare_lang_entry($key) . "'\t=> '" . $this->prepare_lang_entry($value) . "',\n";		}		else		{			$_tabs = $tabs . "\t";			$entry .= "\n{$tabs}'" . $this->prepare_lang_entry($key) . "'\t=> array(\n";			foreach ($value as $_key => $_value)			{				$entry .= $this->format_lang_array($_key, $_value, $_tabs);			}			$entry .= "{$tabs}),\n\n";		}		return $entry;	}}?>
<?php return array(''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'');
<?php/**** @package mcp* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @package module_install*/class mcp_notes_info{	function module()	{		return array(			'filename'	=> 'mcp_notes',			'title'		=> 'MCP_NOTES',			'version'	=> '1.0.0',			'modes'		=> array(				'front'				=> array('title' => 'MCP_NOTES_FRONT', 'auth' => '', 'cat' => array('MCP_NOTES')),				'user_notes'		=> array('title' => 'MCP_NOTES_USER', 'auth' => '', 'cat' => array('MCP_NOTES')),			),		);	}	function install()	{	}	function uninstall()	{	}}?>
<?php/**** @package phpBB3* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @ignore*/define('IN_PHPBB', true);$phpbb_root_path = (defined('PHPBB_ROOT_PATH')) ? PHPBB_ROOT_PATH : './../';$phpEx = substr(strrchr(__FILE__, '.'), 1);// Thank you sun.if (isset($_SERVER['CONTENT_TYPE'])){	if ($_SERVER['CONTENT_TYPE'] === 'application/x-java-archive')	{		exit;	}}else if (isset($_SERVER['HTTP_USER_AGENT']) && strpos($_SERVER['HTTP_USER_AGENT'], 'Java') !== false){	exit;}if (isset($_GET['avatar'])){	require($phpbb_root_path . 'includes/startup.' . $phpEx);	require($phpbb_root_path . 'config.' . $phpEx);	if (!defined('PHPBB_INSTALLED') || empty($dbms) || empty($acm_type))	{		exit;	}	require($phpbb_root_path . 'includes/acm/acm_' . $acm_type . '.' . $phpEx);	require($phpbb_root_path . 'includes/cache.' . $phpEx);	require($phpbb_root_path . 'includes/db/' . $dbms . '.' . $phpEx);	require($phpbb_root_path . 'includes/constants.' . $phpEx);	require($phpbb_root_path . 'includes/functions.' . $phpEx);	$db = new $sql_db();	$cache = new cache();	// Connect to DB	if (!@$db->sql_connect($dbhost, $dbuser, $dbpasswd, $dbname, $dbport, false, false))	{		exit;	}	unset($dbpasswd);	// worst-case default	$browser = (!empty($_SERVER['HTTP_USER_AGENT'])) ? htmlspecialchars((string) $_SERVER['HTTP_USER_AGENT']) : 'msie 6.0';	$config = $cache->obtain_config();	$filename = request_var('avatar', '');	$avatar_group = false;	$exit = false;	if (isset($filename[0]) && $filename[0] === 'g')	{		$avatar_group = true;		$filename = substr($filename, 1);	}	// '==' is not a bug - . as the first char is as bad as no dot at all	if (strpos($filename, '.') == false)	{		send_status_line(403, 'Forbidden');		$exit = true;	}	if (!$exit)	{		$ext		= substr(strrchr($filename, '.'), 1);		$stamp		= (int) substr(stristr($filename, '_'), 1);		$filename	= (int) $filename;		$exit = set_modified_headers($stamp, $browser);	}	if (!$exit && !in_array($ext, array('png', 'gif', 'jpg', 'jpeg')))	{		// no way such an avatar could exist. They are not following the rules, stop the show.		send_status_line(403, 'Forbidden');		$exit = true;	}	if (!$exit)	{		if (!$filename)		{			// no way such an avatar could exist. They are not following the rules, stop the show.			send_status_line(403, 'Forbidden');		}		else		{			send_avatar_to_browser(($avatar_group ? 'g' : '') . $filename . '.' . $ext, $browser);		}	}	file_gc();}// implicit else: we are not in avatar modeinclude($phpbb_root_path . 'common.' . $phpEx);$download_id = request_var('id', 0);$mode = request_var('mode', '');$thumbnail = request_var('t', false);// Start session management, do not update session page.$user->session_begin(false);$auth->acl($user->data);$user->setup('viewtopic');if (!$download_id){	send_status_line(404, 'Not Found');	trigger_error('NO_ATTACHMENT_SELECTED');}if (!$config['allow_attachments'] && !$config['allow_pm_attach']){	send_status_line(404, 'Not Found');	trigger_error('ATTACHMENT_FUNCTIONALITY_DISABLED');}$sql = 'SELECT attach_id, in_message, post_msg_id, extension, is_orphan, poster_id, filetime	FROM ' . ATTACHMENTS_TABLE . "	WHERE attach_id = $download_id";$result = $db->sql_query_limit($sql, 1);$attachment = $db->sql_fetchrow($result);$db->sql_freeresult($result);if (!$attachment){	send_status_line(404, 'Not Found');	trigger_error('ERROR_NO_ATTACHMENT');}if ((!$attachment['in_message'] && !$config['allow_attachments']) || ($attachment['in_message'] && !$config['allow_pm_attach'])){	send_status_line(404, 'Not Found');	trigger_error('ATTACHMENT_FUNCTIONALITY_DISABLED');}$row = array();if ($attachment['is_orphan']){	// We allow admins having attachment permissions to see orphan attachments...	$own_attachment = ($auth->acl_get('a_attach') || $attachment['poster_id'] == $user->data['user_id']) ? true : false;	if (!$own_attachment || ($attachment['in_message'] && !$auth->acl_get('u_pm_download')) || (!$attachment['in_message'] && !$auth->acl_get('u_download')))	{		send_status_line(404, 'Not Found');		trigger_error('ERROR_NO_ATTACHMENT');	}	// Obtain all extensions...	$extensions = $cache->obtain_attach_extensions(true);}else{	if (!$attachment['in_message'])	{		//		$sql = 'SELECT p.forum_id, f.forum_password, f.parent_id			FROM ' . POSTS_TABLE . ' p, ' . FORUMS_TABLE . ' f			WHERE p.post_id = ' . $attachment['post_msg_id'] . '				AND p.forum_id = f.forum_id';		$result = $db->sql_query_limit($sql, 1);		$row = $db->sql_fetchrow($result);		$db->sql_freeresult($result);		// Global announcement?		$f_download = (!$row) ? $auth->acl_getf_global('f_download') : $auth->acl_get('f_download', $row['forum_id']);		if ($auth->acl_get('u_download') && $f_download)		{			if ($row && $row['forum_password'])			{				// Do something else ... ?				login_forum_box($row);			}		}		else		{			send_status_line(403, 'Forbidden');			trigger_error('SORRY_AUTH_VIEW_ATTACH');		}	}	else	{		$row['forum_id'] = false;		if (!$auth->acl_get('u_pm_download'))		{			send_status_line(403, 'Forbidden');			trigger_error('SORRY_AUTH_VIEW_ATTACH');		}		// Check if the attachment is within the users scope...		$sql = 'SELECT user_id, author_id			FROM ' . PRIVMSGS_TO_TABLE . '			WHERE msg_id = ' . $attachment['post_msg_id'];		$result = $db->sql_query($sql);		$allowed = false;		while ($user_row = $db->sql_fetchrow($result))		{			if ($user->data['user_id'] == $user_row['user_id'] || $user->data['user_id'] == $user_row['author_id'])			{				$allowed = true;				break;			}		}		$db->sql_freeresult($result);		if (!$allowed)		{			send_status_line(403, 'Forbidden');			trigger_error('ERROR_NO_ATTACHMENT');		}	}	// disallowed?	$extensions = array();	if (!extension_allowed($row['forum_id'], $attachment['extension'], $extensions))	{		send_status_line(404, 'Forbidden');		trigger_error(sprintf($user->lang['EXTENSION_DISABLED_AFTER_POSTING'], $attachment['extension']));	}}if (!download_allowed()){	send_status_line(403, 'Forbidden');	trigger_error($user->lang['LINKAGE_FORBIDDEN']);}$download_mode = (int) $extensions[$attachment['extension']]['download_mode'];// Fetching filename here to prevent sniffing of filename$sql = 'SELECT attach_id, is_orphan, in_message, post_msg_id, extension, physical_filename, real_filename, mimetype, filetime	FROM ' . ATTACHMENTS_TABLE . "	WHERE attach_id = $download_id";$result = $db->sql_query_limit($sql, 1);$attachment = $db->sql_fetchrow($result);$db->sql_freeresult($result);if (!$attachment){	send_status_line(404, 'Not Found');	trigger_error('ERROR_NO_ATTACHMENT');}$attachment['physical_filename'] = utf8_basename($attachment['physical_filename']);$display_cat = $extensions[$attachment['extension']]['display_cat'];if (($display_cat == ATTACHMENT_CATEGORY_IMAGE || $display_cat == ATTACHMENT_CATEGORY_THUMB) && !$user->optionget('viewimg')){	$display_cat = ATTACHMENT_CATEGORY_NONE;}if ($display_cat == ATTACHMENT_CATEGORY_FLASH && !$user->optionget('viewflash')){	$display_cat = ATTACHMENT_CATEGORY_NONE;}if ($thumbnail){	$attachment['physical_filename'] = 'thumb_' . $attachment['physical_filename'];}else if (($display_cat == ATTACHMENT_CATEGORY_NONE/* || $display_cat == ATTACHMENT_CATEGORY_IMAGE*/) && !$attachment['is_orphan']){	// Update download count	$sql = 'UPDATE ' . ATTACHMENTS_TABLE . '		SET download_count = download_count + 1		WHERE attach_id = ' . $attachment['attach_id'];	$db->sql_query($sql);}if ($display_cat == ATTACHMENT_CATEGORY_IMAGE && $mode === 'view' && (strpos($attachment['mimetype'], 'image') === 0) && ((strpos(strtolower($user->browser), 'msie') !== false) && (strpos(strtolower($user->browser), 'msie 8.0') === false))){	wrap_img_in_html(append_sid($phpbb_root_path . 'download/file.' . $phpEx, 'id=' . $attachment['attach_id']), $attachment['real_filename']);	file_gc();}else{	// Determine the 'presenting'-method	if ($download_mode == PHYSICAL_LINK)	{		// This presenting method should no longer be used		if (!@is_dir($phpbb_root_path . $config['upload_path']))		{			send_status_line(500, 'Internal Server Error');			trigger_error($user->lang['PHYSICAL_DOWNLOAD_NOT_POSSIBLE']);		}		redirect($phpbb_root_path . $config['upload_path'] . '/' . $attachment['physical_filename']);		file_gc();	}	else	{		send_file_to_browser($attachment, $config['upload_path'], $display_cat);		file_gc();	}}/*** A simplified function to deliver avatars* The argument needs to be checked before calling this function.*/function send_avatar_to_browser($file, $browser){	global $config, $phpbb_root_path;	$prefix = $config['avatar_salt'] . '_';	$image_dir = $config['avatar_path'];	// Adjust image_dir path (no trailing slash)	if (substr($image_dir, -1, 1) == '/' || substr($image_dir, -1, 1) == '\\')	{		$image_dir = substr($image_dir, 0, -1) . '/';	}	$image_dir = str_replace(array('../', '..\\', './', '.\\'), '', $image_dir);	if ($image_dir && ($image_dir[0] == '/' || $image_dir[0] == '\\'))	{		$image_dir = '';	}	$file_path = $phpbb_root_path . $image_dir . '/' . $prefix . $file;	if ((@file_exists($file_path) && @is_readable($file_path)) && !headers_sent())	{		header('Pragma: public');		$image_data = @getimagesize($file_path);		header('Content-Type: ' . image_type_to_mime_type($image_data[2]));		if (strpos(strtolower($browser), 'msie') !== false && strpos(strtolower($browser), 'msie 8.0') === false)		{			header('Content-Disposition: attachment; ' . header_filename($file));			if (strpos(strtolower($browser), 'msie 6.0') !== false)			{				header('Expires: -1');			}			else			{				header('Expires: ' . gmdate('D, d M Y H:i:s \G\M\T', time() + 31536000));			}		}		else		{			header('Content-Disposition: inline; ' . header_filename($file));			header('Expires: ' . gmdate('D, d M Y H:i:s \G\M\T', time() + 31536000));		}		$size = @filesize($file_path);		if ($size)		{			header("Content-Length: $size");		}		if (@readfile($file_path) == false)		{			$fp = @fopen($file_path, 'rb');			if ($fp !== false)			{				while (!feof($fp))				{					echo fread($fp, 8192);				}				fclose($fp);			}		}		flush();	}	else	{		send_status_line(404, 'Not Found');	}}/*** Wraps an url into a simple html page. Used to display attachments in IE.* this is a workaround for now; might be moved to template system later* direct any complaints to 1 Microsoft Way, Redmond*/function wrap_img_in_html($src, $title){	echo '<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-Strict.dtd">';	echo '<html>';	echo '<head>';	echo '<meta http-equiv="content-type" content="text/html; charset=UTF-8" />';	echo '<title>' . $title . '</title>';	echo '</head>';	echo '<body>';	echo '<div>';	echo '<img src="' . $src . '" alt="' . $title . '" />';	echo '</div>';	echo '</body>';	echo '</html>';}/*** Send file to browser*/function send_file_to_browser($attachment, $upload_dir, $category){	global $user, $db, $config, $phpbb_root_path;	$filename = $phpbb_root_path . $upload_dir . '/' . $attachment['physical_filename'];	if (!@file_exists($filename))	{		send_status_line(404, 'Not Found');		trigger_error($user->lang['ERROR_NO_ATTACHMENT'] . '<br /><br />' . sprintf($user->lang['FILE_NOT_FOUND_404'], $filename));	}	// Correct the mime type - we force application/octetstream for all files, except images	// Please do not change this, it is a security precaution	if ($category != ATTACHMENT_CATEGORY_IMAGE || strpos($attachment['mimetype'], 'image') !== 0)	{		$attachment['mimetype'] = (strpos(strtolower($user->browser), 'msie') !== false || strpos(strtolower($user->browser), 'opera') !== false) ? 'application/octetstream' : 'application/octet-stream';	}	if (@ob_get_length())	{		@ob_end_clean();	}	// Now send the File Contents to the Browser	$size = @filesize($filename);	// To correctly display further errors we need to make sure we are using the correct headers for both (unsetting content-length may not work)	// Check if headers already sent or not able to get the file contents.	if (headers_sent() || !@file_exists($filename) || !@is_readable($filename))	{		// PHP track_errors setting On?		if (!empty($php_errormsg))		{			send_status_line(500, 'Internal Server Error');			trigger_error($user->lang['UNABLE_TO_DELIVER_FILE'] . '<br />' . sprintf($user->lang['TRACKED_PHP_ERROR'], $php_errormsg));		}		send_status_line(500, 'Internal Server Error');		trigger_error('UNABLE_TO_DELIVER_FILE');	}	// Now the tricky part... let's dance	header('Pragma: public');	/**	* Commented out X-Sendfile support. To not expose the physical filename within the header if xsendfile is absent we need to look into methods of checking it's status.	*	* Try X-Sendfile since it is much more server friendly - only works if the path is *not* outside of the root path...	* lighttpd has core support for it. An apache2 module is available at http://celebnamer.celebworld.ws/stuff/mod_xsendfile/	*	* Not really ideal, but should work fine...	* <code>	*	if (strpos($upload_dir, '/') !== 0 && strpos($upload_dir, '../') === false)	*	{	*		header('X-Sendfile: ' . $filename);	*	}	* </code>	*/	// Send out the Headers. Do not set Content-Disposition to inline please, it is a security measure for users using the Internet Explorer.	$is_ie8 = (strpos(strtolower($user->browser), 'msie 8.0') !== false);	header('Content-Type: ' . $attachment['mimetype']);	if ($is_ie8)	{		header('X-Content-Type-Options: nosniff');	}	if ($category == ATTACHMENT_CATEGORY_FLASH && request_var('view', 0) === 1)	{		// We use content-disposition: inline for flash files and view=1 to let it correctly play with flash player 10 - any other disposition will fail to play inline		header('Content-Disposition: inline');	}	else	{		if (empty($user->browser) || (!$is_ie8 && (strpos(strtolower($user->browser), 'msie') !== false)))		{			header('Content-Disposition: attachment; ' . header_filename(htmlspecialchars_decode($attachment['real_filename'])));			if (empty($user->browser) || (strpos(strtolower($user->browser), 'msie 6.0') !== false))			{				header('expires: -1');			}		}		else		{			header('Content-Disposition: ' . ((strpos($attachment['mimetype'], 'image') === 0) ? 'inline' : 'attachment') . '; ' . header_filename(htmlspecialchars_decode($attachment['real_filename'])));			if ($is_ie8 && (strpos($attachment['mimetype'], 'image') !== 0))			{				header('X-Download-Options: noopen');			}		}	}	if ($size)	{		header("Content-Length: $size");	}	// Close the db connection before sending the file	$db->sql_close();	if (!set_modified_headers($attachment['filetime'], $user->browser))	{		// Try to deliver in chunks		@set_time_limit(0);		$fp = @fopen($filename, 'rb');		if ($fp !== false)		{			while (!feof($fp))			{				echo fread($fp, 8192);			}			fclose($fp);		}		else		{			@readfile($filename);		}		flush();	}	file_gc();}/*** Get a browser friendly UTF-8 encoded filename*/function header_filename($file){	$user_agent = (!empty($_SERVER['HTTP_USER_AGENT'])) ? htmlspecialchars((string) $_SERVER['HTTP_USER_AGENT']) : '';	// There be dragons here.	// Not many follows the RFC...	if (strpos($user_agent, 'MSIE') !== false || strpos($user_agent, 'Safari') !== false || strpos($user_agent, 'Konqueror') !== false)	{		return "filename=" . rawurlencode($file);	}	// follow the RFC for extended filename for the rest	return "filename*=UTF-8''" . rawurlencode($file);}/*** Check if downloading item is allowed*/function download_allowed(){	global $config, $user, $db;	if (!$config['secure_downloads'])	{		return true;	}	$url = (!empty($_SERVER['HTTP_REFERER'])) ? trim($_SERVER['HTTP_REFERER']) : trim(getenv('HTTP_REFERER'));	if (!$url)	{		return ($config['secure_allow_empty_referer']) ? true : false;	}	// Split URL into domain and script part	$url = @parse_url($url);	if ($url === false)	{		return ($config['secure_allow_empty_referer']) ? true : false;	}	$hostname = $url['host'];	unset($url);	$allowed = ($config['secure_allow_deny']) ? false : true;	$iplist = array();	if (($ip_ary = @gethostbynamel($hostname)) !== false)	{		foreach ($ip_ary as $ip)		{			if ($ip)			{				$iplist[] = $ip;			}		}	}	// Check for own server...	$server_name = $user->host;	// Forcing server vars is the only way to specify/override the protocol	if ($config['force_server_vars'] || !$server_name)	{		$server_name = $config['server_name'];	}	if (preg_match('#^.*?' . preg_quote($server_name, '#') . '.*?$#i', $hostname))	{		$allowed = true;	}	// Get IP's and Hostnames	if (!$allowed)	{		$sql = 'SELECT site_ip, site_hostname, ip_exclude			FROM ' . SITELIST_TABLE;		$result = $db->sql_query($sql);		while ($row = $db->sql_fetchrow($result))		{			$site_ip = trim($row['site_ip']);			$site_hostname = trim($row['site_hostname']);			if ($site_ip)			{				foreach ($iplist as $ip)				{					if (preg_match('#^' . str_replace('\*', '.*?', preg_quote($site_ip, '#')) . '$#i', $ip))					{						if ($row['ip_exclude'])						{							$allowed = ($config['secure_allow_deny']) ? false : true;							break 2;						}						else						{							$allowed = ($config['secure_allow_deny']) ? true : false;						}					}				}			}			if ($site_hostname)			{				if (preg_match('#^' . str_replace('\*', '.*?', preg_quote($site_hostname, '#')) . '$#i', $hostname))				{					if ($row['ip_exclude'])					{						$allowed = ($config['secure_allow_deny']) ? false : true;						break;					}					else					{						$allowed = ($config['secure_allow_deny']) ? true : false;					}				}			}		}		$db->sql_freeresult($result);	}	return $allowed;}/*** Check if the browser has the file already and set the appropriate headers-* @returns false if a resend is in order.*/function set_modified_headers($stamp, $browser){	// let's see if we have to send the file at all	$last_load 	=  isset($_SERVER['HTTP_IF_MODIFIED_SINCE']) ? strtotime(trim($_SERVER['HTTP_IF_MODIFIED_SINCE'])) : false;	if ((strpos(strtolower($browser), 'msie 6.0') === false) && (strpos(strtolower($browser), 'msie 8.0') === false))	{		if ($last_load !== false && $last_load >= $stamp)		{			send_status_line(304, 'Not Modified');			// seems that we need those too ... browsers			header('Pragma: public');			header('Expires: ' . gmdate('D, d M Y H:i:s \G\M\T', time() + 31536000));			return true;		}		else		{			header('Last-Modified: ' . gmdate('D, d M Y H:i:s', $stamp) . ' GMT');		}	}	return false;}function file_gc(){	global $cache, $db;	if (!empty($cache))	{		$cache->unload();	}	$db->sql_close();	exit;}?>
<?php/*** @package phpBB3* @version $Id$* @copyright (c) 2009 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License** Idea and original RSS Feed 2.0 MOD (Version 1.0.8/9) by leviatan21* Original MOD: http://www.phpbb.com/community/viewtopic.php?f=69&t=1214645* MOD Author Profile: http://www.phpbb.com/community/memberlist.php?mode=viewprofile&u=345763* MOD Author Homepage: http://www.mssti.com/phpbb3/***//*** @ignore**/define('IN_PHPBB', true);$phpbb_root_path = (defined('PHPBB_ROOT_PATH')) ? PHPBB_ROOT_PATH : './';$phpEx = substr(strrchr(__FILE__, '.'), 1);include($phpbb_root_path . 'common.' . $phpEx);if (!$config['feed_enable']){	trigger_error('NO_FEED_ENABLED');}// Start session$user->session_begin();if (!empty($config['feed_http_auth']) && request_var('auth', '') == 'http'){	phpbb_http_login(array(		'auth_message'	=> 'Feed',		'viewonline'	=> request_var('viewonline', true),	));}$auth->acl($user->data);$user->setup();// Initial var setup$forum_id	= request_var('f', 0);$topic_id	= request_var('t', 0);$mode		= request_var('mode', '');// We do not use a template, therefore we simply define the global template variables here$global_vars = $item_vars = array();$feed_updated_time = 0;// Generate params array for use in append_sid() to correctly link back to this page$params = false;if ($forum_id || $topic_id || $mode){	$params = array(		'f'		=> ($forum_id) ? $forum_id : NULL,		't'		=> ($topic_id) ? $topic_id : NULL,		'mode'	=> ($mode) ? $mode : NULL,	);}// This boards URL$board_url = generate_board_url();// Get correct feed object$feed = phpbb_feed_factory::init($mode, $forum_id, $topic_id);// No feed foundif ($feed === false){	trigger_error('NO_FEED');}// Open Feed$feed->open();// Iterate through itemswhile ($row = $feed->get_item()){	// BBCode options to correctly disable urls, smilies, bbcode...	if ($feed->get('options') === NULL)	{		// Allow all combinations		$options = 7;		if ($feed->get('enable_bbcode') !== NULL && $feed->get('enable_smilies') !== NULL && $feed->get('enable_magic_url') !== NULL)		{			$options = (($row[$feed->get('enable_bbcode')]) ? OPTION_FLAG_BBCODE : 0) + (($row[$feed->get('enable_smilies')]) ? OPTION_FLAG_SMILIES : 0) + (($row[$feed->get('enable_magic_url')]) ? OPTION_FLAG_LINKS : 0);		}	}	else	{		$options = $row[$feed->get('options')];	}	$title = (isset($row[$feed->get('title')]) && $row[$feed->get('title')] !== '') ? $row[$feed->get('title')] : ((isset($row[$feed->get('title2')])) ? $row[$feed->get('title2')] : '');	$published = ($feed->get('published') !== NULL) ? (int) $row[$feed->get('published')] : 0;	$updated = ($feed->get('updated') !== NULL) ? (int) $row[$feed->get('updated')] : 0;	$item_row = array(		'author'		=> ($feed->get('creator') !== NULL) ? $row[$feed->get('creator')] : '',		'published'		=> ($published > 0) ? feed_format_date($published) : '',		'updated'		=> ($updated > 0) ? feed_format_date($updated) : '',		'link'			=> '',		'title'			=> censor_text($title),		'category'		=> ($config['feed_item_statistics'] && !empty($row['forum_id'])) ? $board_url . '/viewforum.' . $phpEx . '?f=' . $row['forum_id'] : '',		'category_name'	=> ($config['feed_item_statistics'] && isset($row['forum_name'])) ? $row['forum_name'] : '',		'description'	=> censor_text(feed_generate_content($row[$feed->get('text')], $row[$feed->get('bbcode_uid')], $row[$feed->get('bitfield')], $options)),		'statistics'	=> '',	);	// Adjust items, fill link, etc.	$feed->adjust_item($item_row, $row);	$item_vars[] = $item_row;	$feed_updated_time = max($feed_updated_time, $published, $updated);}// If we do not have any items at all, sending the current time is better than sending no time.if (!$feed_updated_time){	$feed_updated_time = time();}// Some default assignments// FEED_IMAGE is not used (atom)$global_vars = array_merge($global_vars, array(	'FEED_IMAGE'			=> ($user->img('site_logo', '', false, '', 'src')) ? $board_url . '/' . substr($user->img('site_logo', '', false, '', 'src'), strlen($phpbb_root_path)) : '',	'SELF_LINK'				=> feed_append_sid('/feed.' . $phpEx, $params),	'FEED_LINK'				=> $board_url . '/index.' . $phpEx,	'FEED_TITLE'			=> $config['sitename'],	'FEED_SUBTITLE'			=> $config['site_desc'],	'FEED_UPDATED'			=> feed_format_date($feed_updated_time),	'FEED_LANG'				=> $user->lang['USER_LANG'],	'FEED_AUTHOR'			=> $config['sitename'],));$feed->close();// Output page// gzip_compressionif ($config['gzip_compress']){	if (@extension_loaded('zlib') && !headers_sent())	{		ob_start('ob_gzhandler');	}}// IF debug extra is enabled and admin want to "explain" the page we need to set other headers...if (defined('DEBUG_EXTRA') && request_var('explain', 0) && $auth->acl_get('a_')){	header('Content-type: text/html; charset=UTF-8');	header('Cache-Control: private, no-cache="set-cookie"');	header('Expires: 0');	header('Pragma: no-cache');	$mtime = explode(' ', microtime());	$totaltime = $mtime[0] + $mtime[1] - $starttime;	if (method_exists($db, 'sql_report'))	{		$db->sql_report('display');	}	garbage_collection();	exit_handler();}header("Content-Type: application/atom+xml; charset=UTF-8");header("Last-Modified: " . gmdate('D, d M Y H:i:s', $feed_updated_time) . ' GMT');if (!empty($user->data['is_bot'])){	// Let reverse proxies know we detected a bot.	header('X-PHPBB-IS-BOT: yes');}echo '<?xml version="1.0" encoding="UTF-8"?>' . "\n";echo '<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="' . $global_vars['FEED_LANG'] . '">' . "\n";echo '<link rel="self" type="application/atom+xml" href="' . $global_vars['SELF_LINK'] . '" />' . "\n\n";echo (!empty($global_vars['FEED_TITLE'])) ? '<title>' . $global_vars['FEED_TITLE'] . '</title>' . "\n" : '';echo (!empty($global_vars['FEED_SUBTITLE'])) ? '<subtitle>' . $global_vars['FEED_SUBTITLE'] . '</subtitle>' . "\n" : '';echo (!empty($global_vars['FEED_LINK'])) ? '<link href="' . $global_vars['FEED_LINK'] .'" />' . "\n" : '';echo '<updated>' . $global_vars['FEED_UPDATED'] . '</updated>' . "\n\n";echo '<author><name><![CDATA[' . $global_vars['FEED_AUTHOR'] . ']]></name></author>' . "\n";echo '<id>' . $global_vars['SELF_LINK'] . '</id>' . "\n";foreach ($item_vars as $row){	echo '<entry>' . "\n";	if (!empty($row['author']))	{		echo '<author><name><![CDATA[' . $row['author'] . ']]></name></author>' . "\n";	}	echo '<updated>' . ((!empty($row['updated'])) ? $row['updated'] : $row['published']) . '</updated>' . "\n";	if (!empty($row['published']))	{		echo '<published>' . $row['published'] . '</published>' . "\n";	}	echo '<id>' . $row['link'] . '</id>' . "\n";	echo '<link href="' . $row['link'] . '"/>' . "\n";	echo '<title type="html"><![CDATA[' . $row['title'] . ']]></title>' . "\n\n";	if (!empty($row['category']) && isset($row['category_name']) && $row['category_name'] !== '')	{		echo '<category term="' . $row['category_name'] . '" scheme="' . $row['category'] . '" label="' . $row['category_name'] . '"/>' . "\n";	}	echo '<content type="html" xml:base="' . $row['link'] . '"><![CDATA[' . "\n";	echo $row['description'];	if (!empty($row['statistics']))	{		echo '<p>' . $user->lang['STATISTICS'] . ': ' . $row['statistics'] . '</p>';	}	echo '<hr />' . "\n" . ']]></content>' . "\n";	echo '</entry>' . "\n";}echo '</feed>';garbage_collection();exit_handler();/*** Run links through append_sid(), prepend generate_board_url() and remove session id**/function feed_append_sid($url, $params){	global $board_url;	return append_sid($board_url . $url, $params, true, '');}/*** Generate ISO 8601 date string (RFC 3339)**/function feed_format_date($time){	static $zone_offset;	static $offset_string;	if (empty($offset_string))	{		global $user;		$zone_offset = (int) $user->timezone + (int) $user->dst;		$sign = ($zone_offset < 0) ? '-' : '+';		$time_offset = abs($zone_offset);		$offset_seconds	= $time_offset % 3600;		$offset_minutes	= $offset_seconds / 60;		$offset_hours	= ($time_offset - $offset_seconds) / 3600;		$offset_string	= sprintf("%s%02d:%02d", $sign, $offset_hours, $offset_minutes);	}	return gmdate("Y-m-d\TH:i:s", $time + $zone_offset) . $offset_string;}/*** Generate text content**/function feed_generate_content($content, $uid, $bitfield, $options){	global $user, $config, $phpbb_root_path, $phpEx, $board_url;	if (empty($content))	{		return '';	}	// Prepare some bbcodes for better parsing	$content	= preg_replace("#\[quote(=&quot;.*?&quot;)?:$uid\]\s*(.*?)\s*\[/quote:$uid\]#si", "[quote$1:$uid]<br />$2<br />[/quote:$uid]", $content);	$content = generate_text_for_display($content, $uid, $bitfield, $options);	// Add newlines	$content = str_replace('<br />', '<br />' . "\n", $content);	// Convert smiley Relative paths to Absolute path, Windows style	$content = str_replace($phpbb_root_path . $config['smilies_path'], $board_url . '/' . $config['smilies_path'], $content);	// Remove "Select all" link and mouse events	$content = str_replace('<a href="#" onclick="selectCode(this); return false;">' . $user->lang['SELECT_ALL_CODE'] . '</a>', '', $content);	$content = preg_replace('#(onkeypress|onclick)="(.*?)"#si', '', $content);	// Firefox does not support CSS for feeds, though	// Remove font sizes//	$content = preg_replace('#<span style="font-size: [0-9]+%; line-height: [0-9]+%;">([^>]+)</span>#iU', '\1', $content);	// Make text strong :P//	$content = preg_replace('#<span style="font-weight: bold?">(.*?)</span>#iU', '<strong>\1</strong>', $content);	// Italic//	$content = preg_replace('#<span style="font-style: italic?">([^<]+)</span>#iU', '<em>\1</em>', $content);	// Underline//	$content = preg_replace('#<span style="text-decoration: underline?">([^<]+)</span>#iU', '<u>\1</u>', $content);	// Remove embed Windows Media Streams	$content	= preg_replace( '#<\!--\[if \!IE\]>-->([^[]+)<\!--<!\[endif\]-->#si', '', $content);	// Do not use &lt; and &gt;, because we want to retain code contained in [code][/code]	// Remove embed and objects	$content	= preg_replace( '#<(object|embed)(.*?) (value|src)=(.*?) ([^[]+)(object|embed)>#si',' <a href=$4 target="_blank"><strong>$1</strong></a> ',$content);	// Remove some specials html tag, because somewhere there are a mod to allow html tags ;)	$content	= preg_replace( '#<(script|iframe)([^[]+)\1>#siU', ' <strong>$1</strong> ', $content);	// Remove Comments from inline attachments [ia]	$content	= preg_replace('#<div class="(inline-attachment|attachtitle)">(.*?)<!-- ia(.*?) -->(.*?)<!-- ia(.*?) -->(.*?)</div>#si','$4',$content);	// Replace some entities with their unicode counterpart	$entities = array(		'&nbsp;'	=> "\xC2\xA0",		'&bull;'	=> "\xE2\x80\xA2",		'&middot;'	=> "\xC2\xB7",		'&copy;'	=> "\xC2\xA9",	);	$content = str_replace(array_keys($entities), array_values($entities), $content);	// Remove CDATA blocks. ;)	$content = preg_replace('#\<\!\[CDATA\[(.*?)\]\]\>#s', '', $content);	// Other control characters	$content = preg_replace('#(?:[\x00-\x1F\x7F]+|(?:\xC2[\x80-\x9F])+)#', '', $content);	return $content;}/*** Factory class to return correct object* @package phpBB3*/class phpbb_feed_factory{	/**	* Return correct object for specified mode	*	* @param string	$mode		The feeds mode.	* @param int	$forum_id	Forum id specified by the script if forum feed provided.	* @param int	$topic_id	Topic id specified by the script if topic feed provided.	*	* @return object	Returns correct feeds object for specified mode.	*/	function init($mode, $forum_id, $topic_id)	{		global $config;		switch ($mode)		{			case 'forums':				if (!$config['feed_overall_forums'])				{					return false;				}				return new phpbb_feed_forums();			break;			case 'topics':			case 'topics_new':				if (!$config['feed_topics_new'])				{					return false;				}				return new phpbb_feed_topics();			break;			case 'topics_active':				if (!$config['feed_topics_active'])				{					return false;				}				return new phpbb_feed_topics_active();			break;			case 'news':				global $db;				// Get at least one news forum				$sql = 'SELECT forum_id					FROM ' . FORUMS_TABLE . '					WHERE ' . $db->sql_bit_and('forum_options', FORUM_OPTION_FEED_NEWS, '<> 0');				$result = $db->sql_query_limit($sql, 1, 0, 600);				$s_feed_news = (int) $db->sql_fetchfield('forum_id');				$db->sql_freeresult($result);				if (!$s_feed_news)				{					return false;				}				return new phpbb_feed_news();			break;			default:				if ($topic_id && $config['feed_topic'])				{					return new phpbb_feed_topic($topic_id);				}				else if ($forum_id && $config['feed_forum'])				{					return new phpbb_feed_forum($forum_id);				}				else if ($config['feed_overall'])				{					return new phpbb_feed_overall();				}				return false;			break;		}	}}/*** Base class with some generic functions and settings.** @package phpBB3*/class phpbb_feed_base{	/**	* SQL Query to be executed to get feed items	*/	var $sql = array();	/**	* Keys specified for retrieval of title, content, etc.	*/	var $keys = array();	/**	* Number of items to fetch. Usually overwritten by $config['feed_something']	*/	var $num_items = 15;	/**	* Separator for title elements to separate items (for example forum / topic)	*/	var $separator = "\xE2\x80\xA2"; // &bull;	/**	* Separator for the statistics row (Posted by, post date, replies, etc.)	*/	var $separator_stats = "\xE2\x80\x94"; // &mdash;	/**	* Constructor	*/	function phpbb_feed_base()	{		global $config;		$this->set_keys();		// Allow num_items to be string		if (is_string($this->num_items))		{			$this->num_items = (int) $config[$this->num_items];			// A precaution			if (!$this->num_items)			{				$this->num_items = 10;			}		}	}	/**	* Set keys.	*/	function set_keys()	{	}	/**	* Open feed	*/	function open()	{	}	/**	* Close feed	*/	function close()	{		global $db;		if (!empty($this->result))		{			$db->sql_freeresult($this->result);		}	}	/**	* Set key	*/	function set($key, $value)	{		$this->keys[$key] = $value;	}	/**	* Get key	*/	function get($key)	{		return (isset($this->keys[$key])) ? $this->keys[$key] : NULL;	}	function get_readable_forums()	{		global $auth;		static $forum_ids;		if (!isset($forum_ids))		{			$forum_ids = array_keys($auth->acl_getf('f_read', true));		}		return $forum_ids;	}	function get_moderator_approve_forums()	{		global $auth;		static $forum_ids;		if (!isset($forum_ids))		{			$forum_ids = array_keys($auth->acl_getf('m_approve', true));		}		return $forum_ids;	}	function is_moderator_approve_forum($forum_id)	{		static $forum_ids;		if (!isset($forum_ids))		{			$forum_ids = array_flip($this->get_moderator_approve_forums());		}		if (!$forum_id)		{			// Global announcement, your a moderator in any forum than it's okay.			return (!empty($forum_ids)) ? true : false;		}		return (isset($forum_ids[$forum_id])) ? true : false;	}	function get_excluded_forums()	{		global $db, $cache;		static $forum_ids;		// Matches acp/acp_board.php		$cache_name	= 'feed_excluded_forum_ids';		if (!isset($forum_ids) && ($forum_ids = $cache->get('_' . $cache_name)) === false)		{			$sql = 'SELECT forum_id				FROM ' . FORUMS_TABLE . '				WHERE ' . $db->sql_bit_and('forum_options', FORUM_OPTION_FEED_EXCLUDE, '<> 0');			$result = $db->sql_query($sql);			$forum_ids = array();			while ($forum_id = (int) $db->sql_fetchfield('forum_id'))			{				$forum_ids[$forum_id] = $forum_id;			}			$db->sql_freeresult($result);			$cache->put('_' . $cache_name, $forum_ids);		}		return $forum_ids;	}	function is_excluded_forum($forum_id)	{		$forum_ids = $this->get_excluded_forums();		return isset($forum_ids[$forum_id]) ? true : false;	}	function get_passworded_forums()	{		global $user;		return $user->get_passworded_forums();	}	function get_item()	{		global $db, $cache;		static $result;		if (!isset($result))		{			if (!$this->get_sql())			{				return false;			}			// Query database			$sql = $db->sql_build_query('SELECT', $this->sql);			$result = $db->sql_query_limit($sql, $this->num_items);		}		return $db->sql_fetchrow($result);	}	function user_viewprofile($row)	{		global $phpEx, $user;		$author_id = (int) $row[$this->get('author_id')];		if ($author_id == ANONYMOUS)		{			// Since we cannot link to a profile, we just return GUEST			// instead of $row['username']			return $user->lang['GUEST'];		}		return '<a href="' . feed_append_sid('/memberlist.' . $phpEx, 'mode=viewprofile&amp;u=' . $author_id) . '">' . $row[$this->get('creator')] . '</a>';	}}/*** Abstract class for post based feeds** @package phpBB3*/class phpbb_feed_post_base extends phpbb_feed_base{	var $num_items = 'feed_limit_post';	function set_keys()	{		$this->set('title',		'post_subject');		$this->set('title2',	'topic_title');		$this->set('author_id',	'user_id');		$this->set('creator',	'username');		$this->set('published',	'post_time');		$this->set('updated',	'post_edit_time');		$this->set('text',		'post_text');		$this->set('bitfield',	'bbcode_bitfield');		$this->set('bbcode_uid','bbcode_uid');		$this->set('enable_bbcode',		'enable_bbcode');		$this->set('enable_smilies',	'enable_smilies');		$this->set('enable_magic_url',	'enable_magic_url');	}	function adjust_item(&$item_row, &$row)	{		global $phpEx, $config, $user;		$item_row['link'] = feed_append_sid('/viewtopic.' . $phpEx, "t={$row['topic_id']}&amp;p={$row['post_id']}#p{$row['post_id']}");		if ($config['feed_item_statistics'])		{			$item_row['statistics'] = $user->lang['POSTED'] . ' ' . $user->lang['POST_BY_AUTHOR'] . ' ' . $this->user_viewprofile($row)				. ' ' . $this->separator_stats . ' ' . $user->format_date($row[$this->get('published')])				. (($this->is_moderator_approve_forum($row['forum_id']) && !$row['post_approved']) ? ' ' . $this->separator_stats . ' ' . $user->lang['POST_UNAPPROVED'] : '');		}	}}/*** Abstract class for topic based feeds** @package phpBB3*/class phpbb_feed_topic_base extends phpbb_feed_base{	var $num_items = 'feed_limit_topic';	function set_keys()	{		$this->set('title',		'topic_title');		$this->set('title2',	'forum_name');		$this->set('author_id',	'topic_poster');		$this->set('creator',	'topic_first_poster_name');		$this->set('published',	'post_time');		$this->set('updated',	'post_edit_time');		$this->set('text',		'post_text');		$this->set('bitfield',	'bbcode_bitfield');		$this->set('bbcode_uid','bbcode_uid');		$this->set('enable_bbcode',		'enable_bbcode');		$this->set('enable_smilies',	'enable_smilies');		$this->set('enable_magic_url',	'enable_magic_url');	}	function adjust_item(&$item_row, &$row)	{		global $phpEx, $config, $user;		$item_row['link'] = feed_append_sid('/viewtopic.' . $phpEx, 't=' . $row['topic_id'] . '&amp;p=' . $row['post_id'] . '#p' . $row['post_id']);		if ($config['feed_item_statistics'])		{			$item_row['statistics'] = $user->lang['POSTED'] . ' ' . $user->lang['POST_BY_AUTHOR'] . ' ' . $this->user_viewprofile($row)				. ' ' . $this->separator_stats . ' ' . $user->format_date($row[$this->get('published')])				. ' ' . $this->separator_stats . ' ' . $user->lang['REPLIES'] . ' ' . (($this->is_moderator_approve_forum($row['forum_id'])) ? $row['topic_replies_real'] : $row['topic_replies'])				. ' ' . $this->separator_stats . ' ' . $user->lang['VIEWS'] . ' ' . $row['topic_views']				. (($this->is_moderator_approve_forum($row['forum_id']) && ($row['topic_replies_real'] != $row['topic_replies'])) ? ' ' . $this->separator_stats . ' ' . $user->lang['POSTS_UNAPPROVED'] : '');		}	}}/*** Board wide feed (aka overall feed)** This will give you the newest {$this->num_items} posts* from the whole board.** @package phpBB3*/class phpbb_feed_overall extends phpbb_feed_post_base{	function get_sql()	{		global $auth, $db;		$forum_ids = array_diff($this->get_readable_forums(), $this->get_excluded_forums(), $this->get_passworded_forums());		if (empty($forum_ids))		{			return false;		}		// Add global forum id		$forum_ids[] = 0;		// m_approve forums		$fid_m_approve = $this->get_moderator_approve_forums();		$sql_m_approve = (!empty($fid_m_approve)) ? 'OR ' . $db->sql_in_set('forum_id', $fid_m_approve) : '';		// Determine topics with recent activity		$sql = 'SELECT topic_id, topic_last_post_time			FROM ' . TOPICS_TABLE . '			WHERE ' . $db->sql_in_set('forum_id', $forum_ids) . '				AND topic_moved_id = 0				AND (topic_approved = 1					' . $sql_m_approve . ')			ORDER BY topic_last_post_time DESC';		$result = $db->sql_query_limit($sql, $this->num_items);		$topic_ids = array();		$min_post_time = 0;		while ($row = $db->sql_fetchrow())		{			$topic_ids[] = (int) $row['topic_id'];			$min_post_time = (int) $row['topic_last_post_time'];		}		$db->sql_freeresult($result);		if (empty($topic_ids))		{			return false;		}		// Get the actual data		$this->sql = array(			'SELECT'	=>	'f.forum_id, f.forum_name, ' .							'p.post_id, p.topic_id, p.post_time, p.post_edit_time, p.post_approved, p.post_subject, p.post_text, p.bbcode_bitfield, p.bbcode_uid, p.enable_bbcode, p.enable_smilies, p.enable_magic_url, ' .							'u.username, u.user_id',			'FROM'		=> array(				USERS_TABLE		=> 'u',				POSTS_TABLE		=> 'p',			),			'LEFT_JOIN'	=> array(				array(					'FROM'	=> array(FORUMS_TABLE	=> 'f'),					'ON'	=> 'f.forum_id = p.forum_id',				),			),			'WHERE'		=> $db->sql_in_set('p.topic_id', $topic_ids) . '							AND (p.post_approved = 1								' . str_replace('forum_id', 'p.forum_id', $sql_m_approve) . ')							AND p.post_time >= ' . $min_post_time . '							AND u.user_id = p.poster_id',			'ORDER_BY'	=> 'p.post_time DESC',		);		return true;	}	function adjust_item(&$item_row, &$row)	{		parent::adjust_item($item_row, $row);		$item_row['title'] = (isset($row['forum_name']) && $row['forum_name'] !== '') ? $row['forum_name'] . ' ' . $this->separator . ' ' . $item_row['title'] : $item_row['title'];	}}/*** Forum feed** This will give you the last {$this->num_items} posts made* within a specific forum.** @package phpBB3*/class phpbb_feed_forum extends phpbb_feed_post_base{	var $forum_id		= 0;	var $forum_data		= array();	function phpbb_feed_forum($forum_id)	{		parent::phpbb_feed_base();		$this->forum_id = (int) $forum_id;	}	function open()	{		global $db, $auth;		// Check if forum exists		$sql = 'SELECT forum_id, forum_name, forum_password, forum_type, forum_options			FROM ' . FORUMS_TABLE . '			WHERE forum_id = ' . $this->forum_id;		$result = $db->sql_query($sql);		$this->forum_data = $db->sql_fetchrow($result);		$db->sql_freeresult($result);		if (empty($this->forum_data))		{			trigger_error('NO_FORUM');		}		// Forum needs to be postable		if ($this->forum_data['forum_type'] != FORUM_POST)		{			trigger_error('NO_FEED');		}		// Make sure forum is not excluded from feed		if (phpbb_optionget(FORUM_OPTION_FEED_EXCLUDE, $this->forum_data['forum_options']))		{			trigger_error('NO_FEED');		}		// Make sure we can read this forum		if (!$auth->acl_get('f_read', $this->forum_id))		{			trigger_error('SORRY_AUTH_READ');		}		// Make sure forum is not passworded or user is authed		if ($this->forum_data['forum_password'])		{			$forum_ids_passworded = $this->get_passworded_forums();			if (isset($forum_ids_passworded[$this->forum_id]))			{				trigger_error('SORRY_AUTH_READ');			}			unset($forum_ids_passworded);		}	}	function get_sql()	{		global $auth, $db;		$m_approve = ($auth->acl_get('m_approve', $this->forum_id)) ? true : false;		$forum_ids = array(0, $this->forum_id);		// Determine topics with recent activity		$sql = 'SELECT topic_id, topic_last_post_time			FROM ' . TOPICS_TABLE . '			WHERE ' . $db->sql_in_set('forum_id', $forum_ids) . '				AND topic_moved_id = 0				' . ((!$m_approve) ? 'AND topic_approved = 1' : '') . '			ORDER BY topic_last_post_time DESC';		$result = $db->sql_query_limit($sql, $this->num_items);		$topic_ids = array();		$min_post_time = 0;		while ($row = $db->sql_fetchrow())		{			$topic_ids[] = (int) $row['topic_id'];			$min_post_time = (int) $row['topic_last_post_time'];		}		$db->sql_freeresult($result);		if (empty($topic_ids))		{			return false;		}		$this->sql = array(			'SELECT'	=>	'p.post_id, p.topic_id, p.post_time, p.post_edit_time, p.post_approved, p.post_subject, p.post_text, p.bbcode_bitfield, p.bbcode_uid, p.enable_bbcode, p.enable_smilies, p.enable_magic_url, ' .							'u.username, u.user_id',			'FROM'		=> array(				POSTS_TABLE		=> 'p',				USERS_TABLE		=> 'u',			),			'WHERE'		=> $db->sql_in_set('p.topic_id', $topic_ids) . '							' . ((!$m_approve) ? 'AND p.post_approved = 1' : '') . '							AND p.post_time >= ' . $min_post_time . '							AND p.poster_id = u.user_id',			'ORDER_BY'	=> 'p.post_time DESC',		);		return true;	}	function adjust_item(&$item_row, &$row)	{		parent::adjust_item($item_row, $row);		$item_row['title'] = (isset($row['forum_name']) && $row['forum_name'] !== '') ? $row['forum_name'] . ' ' . $this->separator . ' ' . $item_row['title'] : $item_row['title'];	}	function get_item()	{		return ($row = parent::get_item()) ? array_merge($this->forum_data, $row) : $row;	}}/*** Topic feed for a specific topic** This will give you the last {$this->num_items} posts made within this topic.** @package phpBB3*/class phpbb_feed_topic extends phpbb_feed_post_base{	var $topic_id		= 0;	var $forum_id		= 0;	var $topic_data		= array();	function phpbb_feed_topic($topic_id)	{		parent::phpbb_feed_base();		$this->topic_id = (int) $topic_id;	}	function open()	{		global $auth, $db, $user;		$sql = 'SELECT f.forum_options, f.forum_password, t.topic_id, t.forum_id, t.topic_approved, t.topic_title, t.topic_time, t.topic_views, t.topic_replies, t.topic_type			FROM ' . TOPICS_TABLE . ' t			LEFT JOIN ' . FORUMS_TABLE . ' f				ON (f.forum_id = t.forum_id)			WHERE t.topic_id = ' . $this->topic_id;		$result = $db->sql_query($sql);		$this->topic_data = $db->sql_fetchrow($result);		$db->sql_freeresult($result);		if (empty($this->topic_data))		{			trigger_error('NO_TOPIC');		}		if ($this->topic_data['topic_type'] == POST_GLOBAL)		{			// We need to find at least one postable forum where feeds are enabled,			// that the user can read and maybe also has approve permissions.			$in_fid_ary = $this->get_readable_forums();			if (empty($in_fid_ary))			{				// User cannot read any forums				trigger_error('SORRY_AUTH_READ');			}			if (!$this->topic_data['topic_approved'])			{				// Also require m_approve				$in_fid_ary = array_intersect($in_fid_ary, $this->get_moderator_approve_forums());				if (empty($in_fid_ary))				{					trigger_error('SORRY_AUTH_READ');				}			}			// Diff excluded forums			$in_fid_ary = array_diff($in_fid_ary, $this->get_excluded_forums());			if (empty($in_fid_ary))			{				trigger_error('SORRY_AUTH_READ');			}			// Also exclude passworded forums			$in_fid_ary = array_diff($in_fid_ary, $this->get_passworded_forums());			if (empty($in_fid_ary))			{				trigger_error('SORRY_AUTH_READ');			}			$sql = 'SELECT forum_id, left_id				FROM ' . FORUMS_TABLE . '				WHERE forum_type = ' . FORUM_POST . '					AND ' . $db->sql_in_set('forum_id', $in_fid_ary) . '				ORDER BY left_id ASC';			$result = $db->sql_query_limit($sql, 1);			$this->forum_data = $db->sql_fetchrow($result);			$db->sql_freeresult($result);			if (empty($this->forum_data))			{				// No forum found.				trigger_error('SORRY_AUTH_READ');			}			unset($in_fid_ary);		}		else		{			$this->forum_id = (int) $this->topic_data['forum_id'];			// Make sure topic is either approved or user authed			if (!$this->topic_data['topic_approved'] && !$auth->acl_get('m_approve', $this->forum_id))			{				trigger_error('SORRY_AUTH_READ');			}			// Make sure forum is not excluded from feed			if (phpbb_optionget(FORUM_OPTION_FEED_EXCLUDE, $this->topic_data['forum_options']))			{				trigger_error('NO_FEED');			}			// Make sure we can read this forum			if (!$auth->acl_get('f_read', $this->forum_id))			{				trigger_error('SORRY_AUTH_READ');			}			// Make sure forum is not passworded or user is authed			if ($this->topic_data['forum_password'])			{				$forum_ids_passworded = $this->get_passworded_forums();				if (isset($forum_ids_passworded[$this->forum_id]))				{					trigger_error('SORRY_AUTH_READ');				}				unset($forum_ids_passworded);			}		}	}	function get_sql()	{		global $auth, $db;		$this->sql = array(			'SELECT'	=>	'p.post_id, p.post_time, p.post_edit_time, p.post_approved, p.post_subject, p.post_text, p.bbcode_bitfield, p.bbcode_uid, p.enable_bbcode, p.enable_smilies, p.enable_magic_url, ' .							'u.username, u.user_id',			'FROM'		=> array(				POSTS_TABLE		=> 'p',				USERS_TABLE		=> 'u',			),			'WHERE'		=> 'p.topic_id = ' . $this->topic_id . '								' . ($this->forum_id && !$auth->acl_get('m_approve', $this->forum_id) ? 'AND p.post_approved = 1' : '') . '								AND p.poster_id = u.user_id',			'ORDER_BY'	=> 'p.post_time DESC',		);		return true;	}	function get_item()	{		return ($row = parent::get_item()) ? array_merge($this->topic_data, $row) : $row;	}}/*** 'All Forums' feed** This will give you a list of all postable forums where feeds are enabled* including forum description, topic stats and post stats** @package phpBB3*/class phpbb_feed_forums extends phpbb_feed_base{	var $num_items	= 0;	function set_keys()	{		$this->set('title',		'forum_name');		$this->set('text',		'forum_desc');		$this->set('bitfield',	'forum_desc_bitfield');		$this->set('bbcode_uid','forum_desc_uid');		$this->set('updated',	'forum_last_post_time');		$this->set('options',	'forum_desc_options');	}	function get_sql()	{		global $auth, $db;		$in_fid_ary = array_diff($this->get_readable_forums(), $this->get_excluded_forums());		if (empty($in_fid_ary))		{			return false;		}		// Build SQL Query		$this->sql = array(			'SELECT'	=> 'f.forum_id, f.left_id, f.forum_name, f.forum_last_post_time,							f.forum_desc, f.forum_desc_bitfield, f.forum_desc_uid, f.forum_desc_options,							f.forum_topics, f.forum_posts',			'FROM'		=> array(FORUMS_TABLE => 'f'),			'WHERE'		=> 'f.forum_type = ' . FORUM_POST . '							AND ' . $db->sql_in_set('f.forum_id', $in_fid_ary),			'ORDER_BY'	=> 'f.left_id ASC',		);		return true;	}	function adjust_item(&$item_row, &$row)	{		global $phpEx, $config;		$item_row['link'] = feed_append_sid('/viewforum.' . $phpEx, 'f=' . $row['forum_id']);		if ($config['feed_item_statistics'])		{			global $user;			$item_row['statistics'] = sprintf($user->lang['TOTAL_TOPICS_OTHER'], $row['forum_topics'])				. ' ' . $this->separator_stats . ' ' . sprintf($user->lang['TOTAL_POSTS_OTHER'], $row['forum_posts']);		}	}}/*** News feed** This will give you {$this->num_items} first posts* of all topics in the selected news forums.** @package phpBB3*/class phpbb_feed_news extends phpbb_feed_topic_base{	function get_news_forums()	{		global $db, $cache;		static $forum_ids;		// Matches acp/acp_board.php		$cache_name	= 'feed_news_forum_ids';		if (!isset($forum_ids) && ($forum_ids = $cache->get('_' . $cache_name)) === false)		{			$sql = 'SELECT forum_id				FROM ' . FORUMS_TABLE . '				WHERE ' . $db->sql_bit_and('forum_options', FORUM_OPTION_FEED_NEWS, '<> 0');			$result = $db->sql_query($sql);			$forum_ids = array();			while ($forum_id = (int) $db->sql_fetchfield('forum_id'))			{				$forum_ids[$forum_id] = $forum_id;			}			$db->sql_freeresult($result);			$cache->put('_' . $cache_name, $forum_ids);		}		return $forum_ids;	}	function get_sql()	{		global $auth, $config, $db;		// Determine forum ids		$in_fid_ary = array_intersect($this->get_news_forums(), $this->get_readable_forums());		if (empty($in_fid_ary))		{			return false;		}		$in_fid_ary = array_diff($in_fid_ary, $this->get_passworded_forums());		if (empty($in_fid_ary))		{			return false;		}		// Add global forum		$in_fid_ary[] = 0;		// We really have to get the post ids first!		$sql = 'SELECT topic_first_post_id, topic_time			FROM ' . TOPICS_TABLE . '			WHERE ' . $db->sql_in_set('forum_id', $in_fid_ary) . '				AND topic_moved_id = 0				AND topic_approved = 1			ORDER BY topic_time DESC';		$result = $db->sql_query_limit($sql, $this->num_items);		$post_ids = array();		while ($row = $db->sql_fetchrow($result))		{			$post_ids[] = (int) $row['topic_first_post_id'];		}		$db->sql_freeresult($result);		if (empty($post_ids))		{			return false;		}		$this->sql = array(			'SELECT'	=> 'f.forum_id, f.forum_name,							t.topic_id, t.topic_title, t.topic_poster, t.topic_first_poster_name, t.topic_replies, t.topic_replies_real, t.topic_views, t.topic_time, t.topic_last_post_time,							p.post_id, p.post_time, p.post_edit_time, p.post_text, p.bbcode_bitfield, p.bbcode_uid, p.enable_bbcode, p.enable_smilies, p.enable_magic_url',			'FROM'		=> array(				TOPICS_TABLE	=> 't',				POSTS_TABLE		=> 'p',			),			'LEFT_JOIN'	=> array(				array(					'FROM'	=> array(FORUMS_TABLE => 'f'),					'ON'	=> 'p.forum_id = f.forum_id',				),			),			'WHERE'		=> 'p.topic_id = t.topic_id							AND ' . $db->sql_in_set('p.post_id', $post_ids),			'ORDER_BY'	=> 'p.post_time DESC',		);		return true;	}}/*** New Topics feed** This will give you the last {$this->num_items} created topics* including the first post.** @package phpBB3*/class phpbb_feed_topics extends phpbb_feed_topic_base{	function get_sql()	{		global $db, $config;		$forum_ids_read = $this->get_readable_forums();		if (empty($forum_ids_read))		{			return false;		}		$in_fid_ary = array_diff($forum_ids_read, $this->get_excluded_forums(), $this->get_passworded_forums());		if (empty($in_fid_ary))		{			return false;		}		// Add global forum		$in_fid_ary[] = 0;		// We really have to get the post ids first!		$sql = 'SELECT topic_first_post_id, topic_time			FROM ' . TOPICS_TABLE . '			WHERE ' . $db->sql_in_set('forum_id', $in_fid_ary) . '				AND topic_moved_id = 0				AND topic_approved = 1			ORDER BY topic_time DESC';		$result = $db->sql_query_limit($sql, $this->num_items);		$post_ids = array();		while ($row = $db->sql_fetchrow($result))		{			$post_ids[] = (int) $row['topic_first_post_id'];		}		$db->sql_freeresult($result);		if (empty($post_ids))		{			return false;		}		$this->sql = array(			'SELECT'	=> 'f.forum_id, f.forum_name,							t.topic_id, t.topic_title, t.topic_poster, t.topic_first_poster_name, t.topic_replies, t.topic_replies_real, t.topic_views, t.topic_time, t.topic_last_post_time,							p.post_id, p.post_time, p.post_edit_time, p.post_text, p.bbcode_bitfield, p.bbcode_uid, p.enable_bbcode, p.enable_smilies, p.enable_magic_url',			'FROM'		=> array(				TOPICS_TABLE	=> 't',				POSTS_TABLE		=> 'p',			),			'LEFT_JOIN'	=> array(				array(					'FROM'	=> array(FORUMS_TABLE => 'f'),					'ON'	=> 'p.forum_id = f.forum_id',				),			),			'WHERE'		=> 'p.topic_id = t.topic_id							AND ' . $db->sql_in_set('p.post_id', $post_ids),			'ORDER_BY'	=> 'p.post_time DESC',		);		return true;	}	function adjust_item(&$item_row, &$row)	{		parent::adjust_item($item_row, $row);		$item_row['title'] = (isset($row['forum_name']) && $row['forum_name'] !== '') ? $row['forum_name'] . ' ' . $this->separator . ' ' . $item_row['title'] : $item_row['title'];	}}/*** Active Topics feed** This will give you the last {$this->num_items} topics* with replies made withing the last {$this->sort_days} days* including the last post.** @package phpBB3*/class phpbb_feed_topics_active extends phpbb_feed_topic_base{	var $sort_days = 7;	function set_keys()	{		parent::set_keys();		$this->set('author_id',	'topic_last_poster_id');		$this->set('creator',	'topic_last_poster_name');	}	function get_sql()	{		global $db, $config;		$forum_ids_read = $this->get_readable_forums();		if (empty($forum_ids_read))		{			return false;		}		$in_fid_ary = array_intersect($forum_ids_read, $this->get_forum_ids());		$in_fid_ary = array_diff($in_fid_ary, $this->get_passworded_forums());		if (empty($in_fid_ary))		{			return false;		}		// Add global forum		$in_fid_ary[] = 0;		// Search for topics in last X days		$last_post_time_sql = ($this->sort_days) ? ' AND topic_last_post_time > ' . (time() - ($this->sort_days * 24 * 3600)) : '';		// We really have to get the post ids first!		$sql = 'SELECT topic_last_post_id, topic_last_post_time			FROM ' . TOPICS_TABLE . '			WHERE ' . $db->sql_in_set('forum_id', $in_fid_ary) . '				AND topic_moved_id = 0				AND topic_approved = 1				' . $last_post_time_sql . '			ORDER BY topic_last_post_time DESC';		$result = $db->sql_query_limit($sql, $this->num_items);		$post_ids = array();		while ($row = $db->sql_fetchrow($result))		{			$post_ids[] = (int) $row['topic_last_post_id'];		}		$db->sql_freeresult($result);		if (empty($post_ids))		{			return false;		}		$this->sql = array(			'SELECT'	=> 'f.forum_id, f.forum_name,							t.topic_id, t.topic_title, t.topic_replies, t.topic_replies_real, t.topic_views,							t.topic_last_poster_id, t.topic_last_poster_name, t.topic_last_post_time,							p.post_id, p.post_time, p.post_edit_time, p.post_text, p.bbcode_bitfield, p.bbcode_uid, p.enable_bbcode, p.enable_smilies, p.enable_magic_url',			'FROM'		=> array(				TOPICS_TABLE	=> 't',				POSTS_TABLE		=> 'p',			),			'LEFT_JOIN'	=> array(				array(					'FROM'	=> array(FORUMS_TABLE => 'f'),					'ON'	=> 'p.forum_id = f.forum_id',				),			),			'WHERE'		=> 'p.topic_id = t.topic_id							AND ' . $db->sql_in_set('p.post_id', $post_ids),			'ORDER_BY'	=> 'p.post_time DESC',		);		return true;	}	function get_forum_ids()	{		global $db, $cache;		static $forum_ids;		$cache_name	= 'feed_topic_active_forum_ids';		if (!isset($forum_ids) && ($forum_ids = $cache->get('_' . $cache_name)) === false)		{			$sql = 'SELECT forum_id				FROM ' . FORUMS_TABLE . '				WHERE forum_type = ' . FORUM_POST . '					AND ' . $db->sql_bit_and('forum_options', FORUM_OPTION_FEED_EXCLUDE, '= 0') . '					AND ' . $db->sql_bit_and('forum_flags', log(FORUM_FLAG_ACTIVE_TOPICS, 2), '<> 0');			$result = $db->sql_query($sql);			$forum_ids = array();			while ($forum_id = (int) $db->sql_fetchfield('forum_id'))			{				$forum_ids[$forum_id] = $forum_id;			}			$db->sql_freeresult($result);			$cache->put('_' . $cache_name, $forum_ids, 180);		}		return $forum_ids;	}	function adjust_item(&$item_row, &$row)	{		parent::adjust_item($item_row, $row);		$item_row['title'] = (isset($row['forum_name']) && $row['forum_name'] !== '') ? $row['forum_name'] . ' ' . $this->separator . ' ' . $item_row['title'] : $item_row['title'];	}}?>
<?php/**** @package acp* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @package module_install*/class acp_php_info_info{	function module()	{		return array(			'filename'	=> 'acp_php_info',			'title'		=> 'ACP_PHP_INFO',			'version'	=> '1.0.0',			'modes'		=> array(				'info'		=> array('title' => 'ACP_PHP_INFO', 'auth' => 'acl_a_phpinfo', 'cat' => array('ACP_GENERAL_TASKS')),			),		);	}	function install()	{	}	function uninstall()	{	}}?>
<?php/*** Apache auth plug-in for phpBB3** Authentication plug-ins is largely down to Sergey Kanareykin, our thanks to him.** @package login* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @ignore*/if (!defined('IN_PHPBB')){	exit;}/*** Checks whether the user is identified to apache* Only allow changing authentication to apache if the user is identified* Called in acp_board while setting authentication plugins** @return boolean|string false if the user is identified and else an error message*/function init_apache(){	global $user;	if (!isset($_SERVER['PHP_AUTH_USER']) || $user->data['username'] !== $_SERVER['PHP_AUTH_USER'])	{		return $user->lang['APACHE_SETUP_BEFORE_USE'];	}	return false;}/*** Login function*/function login_apache(&$username, &$password){	global $db;	// do not allow empty password	if (!$password)	{		return array(			'status'	=> LOGIN_ERROR_PASSWORD,			'error_msg'	=> 'NO_PASSWORD_SUPPLIED',			'user_row'	=> array('user_id' => ANONYMOUS),		);	}	if (!$username)	{		return array(			'status'	=> LOGIN_ERROR_USERNAME,			'error_msg'	=> 'LOGIN_ERROR_USERNAME',			'user_row'	=> array('user_id' => ANONYMOUS),		);	}	if (!isset($_SERVER['PHP_AUTH_USER']))	{		return array(			'status'		=> LOGIN_ERROR_EXTERNAL_AUTH,			'error_msg'		=> 'LOGIN_ERROR_EXTERNAL_AUTH_APACHE',			'user_row'		=> array('user_id' => ANONYMOUS),		);	}	$php_auth_user = $_SERVER['PHP_AUTH_USER'];	$php_auth_pw = $_SERVER['PHP_AUTH_PW'];	if (!empty($php_auth_user) && !empty($php_auth_pw))	{		if ($php_auth_user !== $username)		{			return array(				'status'	=> LOGIN_ERROR_USERNAME,				'error_msg'	=> 'LOGIN_ERROR_USERNAME',				'user_row'	=> array('user_id' => ANONYMOUS),			);		}		$sql = 'SELECT user_id, username, user_password, user_passchg, user_email, user_type			FROM ' . USERS_TABLE . "			WHERE username = '" . $db->sql_escape($php_auth_user) . "'";		$result = $db->sql_query($sql);		$row = $db->sql_fetchrow($result);		$db->sql_freeresult($result);		if ($row)		{			// User inactive...			if ($row['user_type'] == USER_INACTIVE || $row['user_type'] == USER_IGNORE)			{				return array(					'status'		=> LOGIN_ERROR_ACTIVE,					'error_msg'		=> 'ACTIVE_ERROR',					'user_row'		=> $row,				);			}			// Successful login...			return array(				'status'		=> LOGIN_SUCCESS,				'error_msg'		=> false,				'user_row'		=> $row,			);		}		// this is the user's first login so create an empty profile		return array(			'status'		=> LOGIN_SUCCESS_CREATE_PROFILE,			'error_msg'		=> false,			'user_row'		=> user_row_apache($php_auth_user, $php_auth_pw),		);	}	// Not logged into apache	return array(		'status'		=> LOGIN_ERROR_EXTERNAL_AUTH,		'error_msg'		=> 'LOGIN_ERROR_EXTERNAL_AUTH_APACHE',		'user_row'		=> array('user_id' => ANONYMOUS),	);}/*** Autologin function** @return array containing the user row or empty if no auto login should take place*/function autologin_apache(){	global $db;	if (!isset($_SERVER['PHP_AUTH_USER']))	{		return array();	}	$php_auth_user = $_SERVER['PHP_AUTH_USER'];	$php_auth_pw = $_SERVER['PHP_AUTH_PW'];	if (!empty($php_auth_user) && !empty($php_auth_pw))	{		set_var($php_auth_user, $php_auth_user, 'string', true);		set_var($php_auth_pw, $php_auth_pw, 'string', true);		$sql = 'SELECT *			FROM ' . USERS_TABLE . "			WHERE username = '" . $db->sql_escape($php_auth_user) . "'";		$result = $db->sql_query($sql);		$row = $db->sql_fetchrow($result);		$db->sql_freeresult($result);		if ($row)		{			return ($row['user_type'] == USER_INACTIVE || $row['user_type'] == USER_IGNORE) ? array() : $row;		}		if (!function_exists('user_add'))		{			global $phpbb_root_path, $phpEx;			include($phpbb_root_path . 'includes/functions_user.' . $phpEx);		}		// create the user if he does not exist yet		user_add(user_row_apache($php_auth_user, $php_auth_pw));		$sql = 'SELECT *			FROM ' . USERS_TABLE . "			WHERE username_clean = '" . $db->sql_escape(utf8_clean_string($php_auth_user)) . "'";		$result = $db->sql_query($sql);		$row = $db->sql_fetchrow($result);		$db->sql_freeresult($result);		if ($row)		{			return $row;		}	}	return array();}/*** This function generates an array which can be passed to the user_add function in order to create a user*/function user_row_apache($username, $password){	global $db, $config, $user;	// first retrieve default group id	$sql = 'SELECT group_id		FROM ' . GROUPS_TABLE . "		WHERE group_name = '" . $db->sql_escape('REGISTERED') . "'			AND group_type = " . GROUP_SPECIAL;	$result = $db->sql_query($sql);	$row = $db->sql_fetchrow($result);	$db->sql_freeresult($result);	if (!$row)	{		trigger_error('NO_GROUP');	}	// generate user account data	return array(		'username'		=> $username,		'user_password'	=> phpbb_hash($password),		'user_email'	=> '',		'group_id'		=> (int) $row['group_id'],		'user_type'		=> USER_NORMAL,		'user_ip'		=> $user->ip,		'user_new'		=> ($config['new_member_post_limit']) ? 1 : 0,	);}/*** The session validation function checks whether the user is still logged in** @return boolean true if the given user is authenticated or false if the session should be closed*/function validate_session_apache(&$user){	// Check if PHP_AUTH_USER is set and handle this case	if (isset($_SERVER['PHP_AUTH_USER']))	{		$php_auth_user = '';		set_var($php_auth_user, $_SERVER['PHP_AUTH_USER'], 'string', true);		return ($php_auth_user === $user['username']) ? true : false;	}	// PHP_AUTH_USER is not set. A valid session is now determined by the user type (anonymous/bot or not)	if ($user['user_type'] == USER_IGNORE)	{		return true;	}	return false;}?>
<?php/**** @package ucp* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @ignore*/if (!defined('IN_PHPBB')){	exit;}/*** View message folder* Called from ucp_pm with mode == 'view' && action == 'view_folder'*/function view_folder($id, $mode, $folder_id, $folder){	global $user, $template, $auth, $db, $cache;	global $phpbb_root_path, $config, $phpEx;	$submit_export = (isset($_POST['submit_export'])) ? true : false;	$folder_info = get_pm_from($folder_id, $folder, $user->data['user_id']);	if (!$submit_export)	{		$user->add_lang('viewforum');		// Grab icons		$icons = $cache->obtain_icons();		$color_rows = array('marked', 'replied');		// only show the friend/foe color rows if the module is enabled		$zebra_enabled = false;		$_module = new p_master();		$_module->list_modules('ucp');		$_module->set_active('zebra');		$zebra_enabled = ($_module->active_module === false) ? false : true;		unset($_module);		if ($zebra_enabled)		{			$color_rows = array_merge($color_rows, array('friend', 'foe'));		}		foreach ($color_rows as $var)		{			$template->assign_block_vars('pm_colour_info', array(				'IMG'	=> $user->img("pm_{$var}", ''),				'CLASS'	=> "pm_{$var}_colour",				'LANG'	=> $user->lang[strtoupper($var) . '_MESSAGE'])			);		}		$mark_options = array('mark_important', 'delete_marked');		// Minimise edits		if (!$auth->acl_get('u_pm_delete') && $key = array_search('delete_marked', $mark_options))		{			unset($mark_options[$key]);		}		$s_mark_options = '';		foreach ($mark_options as $mark_option)		{			$s_mark_options .= '<option value="' . $mark_option . '">' . $user->lang[strtoupper($mark_option)] . '</option>';		}		// We do the folder moving options here too, for template authors to use...		$s_folder_move_options = '';		if ($folder_id != PRIVMSGS_NO_BOX && $folder_id != PRIVMSGS_OUTBOX)		{			foreach ($folder as $f_id => $folder_ary)			{				if ($f_id == PRIVMSGS_OUTBOX || $f_id == PRIVMSGS_SENTBOX || $f_id == $folder_id)				{					continue;				}				$s_folder_move_options .= '<option' . (($f_id != PRIVMSGS_INBOX) ? ' class="sep"' : '') . ' value="' . $f_id . '">';				$s_folder_move_options .= sprintf($user->lang['MOVE_MARKED_TO_FOLDER'], $folder_ary['folder_name']);				$s_folder_move_options .= (($folder_ary['unread_messages']) ? ' [' . $folder_ary['unread_messages'] . '] ' : '') . '</option>';			}		}		$friend = $foe = array();		// Get friends and foes		$sql = 'SELECT *			FROM ' . ZEBRA_TABLE . '			WHERE user_id = ' . $user->data['user_id'];		$result = $db->sql_query($sql);		while ($row = $db->sql_fetchrow($result))		{			$friend[$row['zebra_id']] = $row['friend'];			$foe[$row['zebra_id']] = $row['foe'];		}		$db->sql_freeresult($result);		$template->assign_vars(array(			'S_MARK_OPTIONS'		=> $s_mark_options,			'S_MOVE_MARKED_OPTIONS'	=> $s_folder_move_options)		);		// Okay, lets dump out the page ...		if (sizeof($folder_info['pm_list']))		{			$address_list = array();			// Build Recipient List if in outbox/sentbox - max two additional queries			if ($folder_id == PRIVMSGS_OUTBOX || $folder_id == PRIVMSGS_SENTBOX)			{				$address_list = get_recipient_strings($folder_info['rowset']);			}			foreach ($folder_info['pm_list'] as $message_id)			{				$row = &$folder_info['rowset'][$message_id];				$folder_img = ($row['pm_unread']) ? 'pm_unread' : 'pm_read';				$folder_alt = ($row['pm_unread']) ? 'NEW_MESSAGES' : 'NO_NEW_MESSAGES';				// Generate all URIs ...				$view_message_url = append_sid("{$phpbb_root_path}ucp.$phpEx", "i=$id&amp;mode=view&amp;f=$folder_id&amp;p=$message_id");				$remove_message_url = append_sid("{$phpbb_root_path}ucp.$phpEx", "i=$id&amp;mode=compose&amp;action=delete&amp;p=$message_id");				$row_indicator = '';				foreach ($color_rows as $var)				{					if (($var != 'friend' && $var != 'foe' && $row['pm_' . $var])						||						(($var == 'friend' || $var == 'foe') && isset(${$var}[$row['author_id']]) && ${$var}[$row['author_id']]))					{						$row_indicator = $var;						break;					}				}				// Send vars to template				$template->assign_block_vars('messagerow', array(					'PM_CLASS'			=> ($row_indicator) ? 'pm_' . $row_indicator . '_colour' : '',					'MESSAGE_AUTHOR_FULL'		=> get_username_string('full', $row['author_id'], $row['username'], $row['user_colour'], $row['username']),					'MESSAGE_AUTHOR_COLOUR'		=> get_username_string('colour', $row['author_id'], $row['username'], $row['user_colour'], $row['username']),					'MESSAGE_AUTHOR'			=> get_username_string('username', $row['author_id'], $row['username'], $row['user_colour'], $row['username']),					'U_MESSAGE_AUTHOR'			=> get_username_string('profile', $row['author_id'], $row['username'], $row['user_colour'], $row['username']),					'FOLDER_ID'			=> $folder_id,					'MESSAGE_ID'		=> $message_id,					'SENT_TIME'			=> $user->format_date($row['message_time']),					'SUBJECT'			=> censor_text($row['message_subject']),					'FOLDER'			=> (isset($folder[$row['folder_id']])) ? $folder[$row['folder_id']]['folder_name'] : '',					'U_FOLDER'			=> (isset($folder[$row['folder_id']])) ? append_sid("{$phpbb_root_path}ucp.$phpEx", 'folder=' . $row['folder_id']) : '',					'PM_ICON_IMG'		=> (!empty($icons[$row['icon_id']])) ? '<img src="' . $config['icons_path'] . '/' . $icons[$row['icon_id']]['img'] . '" width="' . $icons[$row['icon_id']]['width'] . '" height="' . $icons[$row['icon_id']]['height'] . '" alt="" title="" />' : '',					'PM_ICON_URL'		=> (!empty($icons[$row['icon_id']])) ? $config['icons_path'] . '/' . $icons[$row['icon_id']]['img'] : '',					'FOLDER_IMG'		=> $user->img($folder_img, $folder_alt),					'FOLDER_IMG_SRC'	=> $user->img($folder_img, $folder_alt, false, '', 'src'),					'PM_IMG'			=> ($row_indicator) ? $user->img('pm_' . $row_indicator, '') : '',					'ATTACH_ICON_IMG'	=> ($auth->acl_get('u_pm_download') && $row['message_attachment'] && $config['allow_pm_attach']) ? $user->img('icon_topic_attach', $user->lang['TOTAL_ATTACHMENTS']) : '',					'S_PM_UNREAD'		=> ($row['pm_unread']) ? true : false,					'S_PM_DELETED'		=> ($row['pm_deleted']) ? true : false,					'S_PM_REPORTED'		=> (isset($row['report_id'])) ? true : false,					'S_AUTHOR_DELETED'	=> ($row['author_id'] == ANONYMOUS) ? true : false,					'U_VIEW_PM'			=> ($row['pm_deleted']) ? '' : $view_message_url,					'U_REMOVE_PM'		=> ($row['pm_deleted']) ? $remove_message_url : '',					'U_MCP_REPORT'		=> (isset($row['report_id'])) ? append_sid("{$phpbb_root_path}mcp.$phpEx", 'i=pm_reports&amp;mode=pm_report_details&amp;r=' . $row['report_id']) : '',					'RECIPIENTS'		=> ($folder_id == PRIVMSGS_OUTBOX || $folder_id == PRIVMSGS_SENTBOX) ? implode(', ', $address_list[$message_id]) : '')				);			}			unset($folder_info['rowset']);			$template->assign_vars(array(				'S_SHOW_RECIPIENTS'		=> ($folder_id == PRIVMSGS_OUTBOX || $folder_id == PRIVMSGS_SENTBOX) ? true : false,				'S_SHOW_COLOUR_LEGEND'	=> true,				'REPORTED_IMG'			=> $user->img('icon_topic_reported', 'PM_REPORTED'),				'S_PM_ICONS'			=> ($config['enable_pm_icons']) ? true : false)			);		}	}	else	{		$export_type = request_var('export_option', '');		$enclosure = request_var('enclosure', '');		$delimiter = request_var('delimiter', '');		if ($export_type == 'CSV' && ($delimiter === '' || $enclosure === ''))		{			$template->assign_var('PROMPT', true);		}		else		{			// Build Recipient List if in outbox/sentbox			$address_temp = $address = $data = array();			if ($folder_id == PRIVMSGS_OUTBOX || $folder_id == PRIVMSGS_SENTBOX)			{				foreach ($folder_info['rowset'] as $message_id => $row)				{					$address_temp[$message_id] = rebuild_header(array('to' => $row['to_address'], 'bcc' => $row['bcc_address']));					$address[$message_id] = array();				}			}			foreach ($folder_info['pm_list'] as $message_id)			{				$row = &$folder_info['rowset'][$message_id];				include_once($phpbb_root_path . 'includes/functions_posting.' . $phpEx);				$sql = 'SELECT p.message_text, p.bbcode_uid					FROM ' . PRIVMSGS_TO_TABLE . ' t, ' . PRIVMSGS_TABLE . ' p, ' . USERS_TABLE . ' u					WHERE t.user_id = ' . $user->data['user_id'] . "						AND p.author_id = u.user_id						AND t.folder_id = $folder_id						AND t.msg_id = p.msg_id						AND p.msg_id = $message_id";				$result = $db->sql_query_limit($sql, 1);				$message_row = $db->sql_fetchrow($result);				$db->sql_freeresult($result);				$_types = array('u', 'g');				foreach ($_types as $ug_type)				{					if (isset($address_temp[$message_id][$ug_type]) && sizeof($address_temp[$message_id][$ug_type]))					{						if (!isset($address[$message_id][$ug_type]))						{							$address[$message_id][$ug_type] = array();						}						if ($ug_type == 'u')						{							$sql = 'SELECT user_id as id, username as name								FROM ' . USERS_TABLE . '								WHERE ';						}						else						{							$sql = 'SELECT group_id as id, group_name as name								FROM ' . GROUPS_TABLE . '								WHERE ';						}						$sql .= $db->sql_in_set(($ug_type == 'u') ? 'user_id' : 'group_id', array_map('intval', array_keys($address_temp[$message_id][$ug_type])));						$result = $db->sql_query($sql);						while ($info_row = $db->sql_fetchrow($result))						{							$address[$message_id][$ug_type][$address_temp[$message_id][$ug_type][$info_row['id']]][] = $info_row['name'];							unset($address_temp[$message_id][$ug_type][$info_row['id']]);						}						$db->sql_freeresult($result);					}				}				// There is the chance that all recipients of the message got deleted. To avoid creating 				// exports without recipients, we add a bogus "undisclosed recipient".				if (!(isset($address[$message_id]['g']) && sizeof($address[$message_id]['g'])) && 				    !(isset($address[$message_id]['u']) && sizeof($address[$message_id]['u'])))				{					$address[$message_id]['u'] = array();					$address[$message_id]['u']['to'] = array();					$address[$message_id]['u']['to'][] = $user->lang['UNDISCLOSED_RECIPIENT'];				}				decode_message($message_row['message_text'], $message_row['bbcode_uid']);								$data[] = array(					'subject'	=> censor_text($row['message_subject']),					'sender'	=> $row['username'],					// ISO 8601 date. For PHP4 we are able to hardcode the timezone because $user->format_date() does not set it.					'date'		=> $user->format_date($row['message_time'], (PHP_VERSION >= 5) ? 'c' : "Y-m-d\TH:i:s+00:00", true),					'to'		=> ($folder_id == PRIVMSGS_OUTBOX || $folder_id == PRIVMSGS_SENTBOX) ? $address[$message_id] : '',					'message'	=> $message_row['message_text']				);			}			switch ($export_type)			{				case 'CSV':				case 'CSV_EXCEL':					$mimetype = 'text/csv';					$filetype = 'csv';					if ($export_type == 'CSV_EXCEL')					{						$enclosure = '"';						$delimiter = ',';						$newline = "\r\n";					}					else					{						$newline = "\n";					}					$string = '';					foreach ($data as $value)					{						$recipients = $value['to'];						$value['to'] = $value['bcc'] = '';						if (is_array($recipients))						{							foreach ($recipients as $values)							{								$value['bcc'] .= (isset($values['bcc']) && is_array($values['bcc'])) ? ',' . implode(',', $values['bcc']) : '';								$value['to'] .= (isset($values['to']) && is_array($values['to'])) ? ',' . implode(',', $values['to']) : '';							}							// Remove the commas which will appear before the first entry.							$value['to'] = substr($value['to'], 1);							$value['bcc'] = substr($value['bcc'], 1);						}						foreach ($value as $tag => $text)						{							$cell = str_replace($enclosure, $enclosure . $enclosure, $text);							if (strpos($cell, $enclosure) !== false || strpos($cell, $delimiter) !== false || strpos($cell, $newline) !== false)							{								$string .= $enclosure . $text . $enclosure . $delimiter;							}							else							{								$string .= $cell . $delimiter;							}						}						$string = substr($string, 0, -1) . $newline;					}				break;				case 'XML':					$mimetype = 'application/xml';					$filetype = 'xml';					$string = '<?xml version="1.0"?>' . "\n";					$string .= "<phpbb>\n";					foreach ($data as $value)					{						$string .= "\t<privmsg>\n";						if (is_array($value['to']))						{							foreach ($value['to'] as $key => $values)							{								foreach ($values as $type => $types)								{									foreach ($types as $name)									{										$string .= "\t\t<recipient type=\"$type\" status=\"$key\">$name</recipient>\n";									}								}							}						}						unset($value['to']);						foreach ($value as $tag => $text)						{							$string .= "\t\t<$tag>$text</$tag>\n";						}						$string .= "\t</privmsg>\n";					}					$string .= '</phpbb>';				break;			}			header('Pragma: no-cache');			header("Content-Type: $mimetype; name=\"data.$filetype\"");			header("Content-disposition: attachment; filename=data.$filetype");			echo $string;			exit;		}	}}/*** Get Messages from folder/user*/function get_pm_from($folder_id, $folder, $user_id){	global $user, $db, $template, $config, $auth, $phpbb_root_path, $phpEx;	$start = request_var('start', 0);	// Additional vars later, pm ordering is mostly different from post ordering. :/	$sort_days	= request_var('st', 0);	$sort_key	= request_var('sk', 't');	$sort_dir	= request_var('sd', 'd');	// PM ordering options	$limit_days = array(0 => $user->lang['ALL_MESSAGES'], 1 => $user->lang['1_DAY'], 7 => $user->lang['7_DAYS'], 14 => $user->lang['2_WEEKS'], 30 => $user->lang['1_MONTH'], 90 => $user->lang['3_MONTHS'], 180 => $user->lang['6_MONTHS'], 365 => $user->lang['1_YEAR']);	// No sort by Author for sentbox/outbox (already only author available)	// Also, sort by msg_id for the time - private messages are not as prone to errors as posts are.	if ($folder_id == PRIVMSGS_OUTBOX || $folder_id == PRIVMSGS_SENTBOX)	{		$sort_by_text = array('t' => $user->lang['POST_TIME'], 's' => $user->lang['SUBJECT']);		$sort_by_sql = array('t' => 'p.message_time', 's' => array('p.message_subject', 'p.message_time'));	}	else	{		$sort_by_text = array('a' => $user->lang['AUTHOR'], 't' => $user->lang['POST_TIME'], 's' => $user->lang['SUBJECT']);		$sort_by_sql = array('a' => array('u.username_clean', 'p.message_time'), 't' => 'p.message_time', 's' => array('p.message_subject', 'p.message_time'));	}	$s_limit_days = $s_sort_key = $s_sort_dir = $u_sort_param = '';	gen_sort_selects($limit_days, $sort_by_text, $sort_days, $sort_key, $sort_dir, $s_limit_days, $s_sort_key, $s_sort_dir, $u_sort_param);	$folder_sql = 't.folder_id = ' . (int) $folder_id;	// Limit pms to certain time frame, obtain correct pm count	if ($sort_days)	{		$min_post_time = time() - ($sort_days * 86400);		if (isset($_POST['sort']))		{			$start = 0;		}		$sql = 'SELECT COUNT(t.msg_id) AS pm_count			FROM ' . PRIVMSGS_TO_TABLE . ' t, ' . PRIVMSGS_TABLE . " p			WHERE $folder_sql				AND t.user_id = $user_id				AND t.msg_id = p.msg_id				AND p.message_time >= $min_post_time";		$result = $db->sql_query_limit($sql, 1);		$pm_count = (int) $db->sql_fetchfield('pm_count');		$db->sql_freeresult($result);		$sql_limit_time = "AND p.message_time >= $min_post_time";	}	else	{		$pm_count = (!empty($folder[$folder_id]['num_messages'])) ? $folder[$folder_id]['num_messages'] : 0;		$sql_limit_time = '';	}	$template->assign_vars(array(		'PAGINATION'		=> generate_pagination(append_sid("{$phpbb_root_path}ucp.$phpEx", "i=pm&amp;mode=view&amp;action=view_folder&amp;f=$folder_id&amp;$u_sort_param"), $pm_count, $config['topics_per_page'], $start),		'PAGE_NUMBER'		=> on_page($pm_count, $config['topics_per_page'], $start),		'TOTAL_MESSAGES'	=> (($pm_count == 1) ? $user->lang['VIEW_PM_MESSAGE'] : sprintf($user->lang['VIEW_PM_MESSAGES'], $pm_count)),		'POST_IMG'		=> (!$auth->acl_get('u_sendpm')) ? $user->img('button_topic_locked', 'POST_PM_LOCKED') : $user->img('button_pm_new', 'POST_NEW_PM'),		'S_NO_AUTH_SEND_MESSAGE'	=> !$auth->acl_get('u_sendpm'),		'S_SELECT_SORT_DIR'		=> $s_sort_dir,		'S_SELECT_SORT_KEY'		=> $s_sort_key,		'S_SELECT_SORT_DAYS'	=> $s_limit_days,		'S_TOPIC_ICONS'			=> ($config['enable_pm_icons']) ? true : false,		'U_POST_NEW_TOPIC'	=> ($auth->acl_get('u_sendpm')) ? append_sid("{$phpbb_root_path}ucp.$phpEx", 'i=pm&amp;mode=compose') : '',		'S_PM_ACTION'		=> append_sid("{$phpbb_root_path}ucp.$phpEx", "i=pm&amp;mode=view&amp;action=view_folder&amp;f=$folder_id" . (($start !== 0) ? "&amp;start=$start" : '')),	));	// Grab all pm data	$rowset = $pm_list = array();	// If the user is trying to reach late pages, start searching from the end	$store_reverse = false;	$sql_limit = $config['topics_per_page'];	if ($start > $pm_count / 2)	{		$store_reverse = true;		if ($start + $config['topics_per_page'] > $pm_count)		{			$sql_limit = min($config['topics_per_page'], max(1, $pm_count - $start));		}		// Select the sort order		$direction = ($sort_dir == 'd') ? 'ASC' : 'DESC';		$sql_start = max(0, $pm_count - $sql_limit - $start);	}	else	{		// Select the sort order		$direction = ($sort_dir == 'd') ? 'DESC' : 'ASC';		$sql_start = $start;	}	// Sql sort order	if (is_array($sort_by_sql[$sort_key]))	{		$sql_sort_order = implode(' ' . $direction . ', ', $sort_by_sql[$sort_key]) . ' ' . $direction;	}	else	{		$sql_sort_order = $sort_by_sql[$sort_key] . ' ' . $direction;	}	$sql = 'SELECT t.*, p.root_level, p.message_time, p.message_subject, p.icon_id, p.to_address, p.message_attachment, p.bcc_address, u.username, u.username_clean, u.user_colour, p.message_reported		FROM ' . PRIVMSGS_TO_TABLE . ' t, ' . PRIVMSGS_TABLE . ' p, ' . USERS_TABLE . " u		WHERE t.user_id = $user_id			AND p.author_id = u.user_id			AND $folder_sql			AND t.msg_id = p.msg_id			$sql_limit_time		ORDER BY $sql_sort_order";	$result = $db->sql_query_limit($sql, $sql_limit, $sql_start);	$pm_reported = array();	while ($row = $db->sql_fetchrow($result))	{		$rowset[$row['msg_id']] = $row;		$pm_list[] = $row['msg_id'];		if ($row['message_reported'])		{			$pm_reported[] = $row['msg_id'];		}	}	$db->sql_freeresult($result);	// Fetch the report_ids, if there are any reported pms.	if (!empty($pm_reported) && $auth->acl_getf_global('m_report'))	{		$sql = 'SELECT pm_id, report_id			FROM ' . REPORTS_TABLE . '			WHERE report_closed = 0				AND ' . $db->sql_in_set('pm_id', $pm_reported);		$result = $db->sql_query($sql);		while ($row = $db->sql_fetchrow($result))		{			$rowset[$row['pm_id']]['report_id'] = $row['report_id'];		}		$db->sql_freeresult($result);	}	$pm_list = ($store_reverse) ? array_reverse($pm_list) : $pm_list;	return array(		'pm_count'	=> $pm_count,		'pm_list'	=> $pm_list,		'rowset'	=> $rowset	);}?>
<?php$GLOBALS['utf_nfc_qc']=array(''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>0,''=>0,''=>0,''=>0,''=>0,''=>0,''=>0,''=>0,''=>0,''=>0,''=>0,''=>0,''=>0,''=>0,''=>0,''=>0,''=>0,''=>0,''=>0,''=>0,''=>0,''=>0,''=>0,''=>0,''=>0,''=>0,''=>0,''=>0,''=>0,''=>0,''=>0,''=>0,''=>0,''=>0,''=>0,''=>0,''=>0,''=>0,''=>0,''=>0,''=>0,''=>0,''=>0,''=>0,''=>0,''=>0,''=>0,''=>0,''=>0,''=>0,''=>0,''=>0,''=>0,''=>0,''=>0,''=>0,''=>0,''=>0,''=>0,''=>0,''=>0,''=>0,''=>0,''=>0,''=>0,''=>0,''=>0,''=>0,''=>0,''=>0,''=>0,''=>0,''=>0,''=>0,''=>0,''=>0,''=>0,''=>0,''=>0,''=>0,''=>0,''=>0,''=>0,''=>0,''=>0,''=>0,''=>0,''=>0,''=>0,''=>0,''=>0,''=>0,''=>0,''=>0,''=>0,''=>0,''=>0,''=>0,''=>0,''=>0,''=>0,''=>0);
<?php return array('A'=>'a','B'=>'b','C'=>'c','D'=>'d','E'=>'e','F'=>'f','G'=>'g','H'=>'h','I'=>'i','J'=>'j','K'=>'k','L'=>'l','M'=>'m','N'=>'n','O'=>'o','P'=>'p','Q'=>'q','R'=>'r','S'=>'s','T'=>'t','U'=>'u','V'=>'v','W'=>'w','X'=>'x','Y'=>'y','Z'=>'z',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'s',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'k',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'');
<?php/**** @package ucp* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @package module_install*/class ucp_attachments_info{	function module()	{		return array(			'filename'	=> 'ucp_attachments',			'title'		=> 'UCP_ATTACHMENTS',			'version'	=> '1.0.0',			'modes'		=> array(				'attachments'	=> array('title' => 'UCP_MAIN_ATTACHMENTS', 'auth' => 'acl_u_attach', 'cat' => array('UCP_MAIN')),			),		);	}	function install()	{	}	function uninstall()	{	}}?>
<?php/**** @package acp* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @ignore*/if (!defined('IN_PHPBB')){	exit;}/*** @package acp*/class acp_prune{	var $u_action;	function main($id, $mode)	{		global $user, $phpEx, $phpbb_admin_path, $phpbb_root_path;		$user->add_lang('acp/prune');		include_once($phpbb_root_path . 'includes/functions_user.' . $phpEx);		switch ($mode)		{			case 'forums':				$this->tpl_name = 'acp_prune_forums';				$this->page_title = 'ACP_PRUNE_FORUMS';				$this->prune_forums($id, $mode);			break;			case 'users':				$this->tpl_name = 'acp_prune_users';				$this->page_title = 'ACP_PRUNE_USERS';				$this->prune_users($id, $mode);			break;		}	}	/**	* Prune forums	*/	function prune_forums($id, $mode)	{		global $db, $user, $auth, $template, $cache;		global $config, $phpbb_root_path, $phpbb_admin_path, $phpEx;		$all_forums = request_var('all_forums', 0);		$forum_id = request_var('f', array(0));		$submit = (isset($_POST['submit'])) ? true : false;		if ($all_forums)		{			$sql = 'SELECT forum_id				FROM ' . FORUMS_TABLE . '				ORDER BY left_id';			$result = $db->sql_query($sql);			$forum_id = array();			while ($row = $db->sql_fetchrow($result))			{				$forum_id[] = $row['forum_id'];			}			$db->sql_freeresult($result);		}		if ($submit)		{			if (confirm_box(true))			{				$prune_posted = request_var('prune_days', 0);				$prune_viewed = request_var('prune_vieweddays', 0);				$prune_all = (!$prune_posted && !$prune_viewed) ? true : false;						$prune_flags = 0;				$prune_flags += (request_var('prune_old_polls', 0)) ? 2 : 0;				$prune_flags += (request_var('prune_announce', 0)) ? 4 : 0;				$prune_flags += (request_var('prune_sticky', 0)) ? 8 : 0;				// Convert days to seconds for timestamp functions...				$prunedate_posted = time() - ($prune_posted * 86400);				$prunedate_viewed = time() - ($prune_viewed * 86400);				$template->assign_vars(array(					'S_PRUNED'		=> true)				);				$sql_forum = (sizeof($forum_id)) ? ' AND ' . $db->sql_in_set('forum_id', $forum_id) : '';				// Get a list of forum's or the data for the forum that we are pruning.				$sql = 'SELECT forum_id, forum_name					FROM ' . FORUMS_TABLE . '					WHERE forum_type = ' . FORUM_POST . "						$sql_forum					ORDER BY left_id ASC";				$result = $db->sql_query($sql);				if ($row = $db->sql_fetchrow($result))				{					$prune_ids = array();					$p_result['topics'] = 0;					$p_result['posts'] = 0;					$log_data = '';								do					{						if (!$auth->acl_get('f_list', $row['forum_id']))						{							continue;						}						if ($prune_all)						{							$p_result = prune($row['forum_id'], 'posted', time(), $prune_flags, false);						}						else						{							if ($prune_posted)							{								$return = prune($row['forum_id'], 'posted', $prunedate_posted, $prune_flags, false);								$p_result['topics'] += $return['topics'];								$p_result['posts'] += $return['posts'];							}										if ($prune_viewed)							{								$return = prune($row['forum_id'], 'viewed', $prunedate_viewed, $prune_flags, false);								$p_result['topics'] += $return['topics'];								$p_result['posts'] += $return['posts'];							}						}						$prune_ids[] = $row['forum_id'];						$template->assign_block_vars('pruned', array(							'FORUM_NAME'	=> $row['forum_name'],							'NUM_TOPICS'	=> $p_result['topics'],							'NUM_POSTS'		=> $p_result['posts'])						);								$log_data .= (($log_data != '') ? ', ' : '') . $row['forum_name'];					}					while ($row = $db->sql_fetchrow($result));							// Sync all pruned forums at once					sync('forum', 'forum_id', $prune_ids, true, true);					add_log('admin', 'LOG_PRUNE', $log_data);				}				$db->sql_freeresult($result);				return;			}			else			{				confirm_box(false, $user->lang['PRUNE_FORUM_CONFIRM'], build_hidden_fields(array(					'i'				=> $id,					'mode'			=> $mode,					'submit'		=> 1,					'all_forums'	=> $all_forums,					'f'				=> $forum_id,					'prune_days'		=> request_var('prune_days', 0),					'prune_vieweddays'	=> request_var('prune_vieweddays', 0),					'prune_old_polls'	=> request_var('prune_old_polls', 0),					'prune_announce'	=> request_var('prune_announce', 0),					'prune_sticky'		=> request_var('prune_sticky', 0),				)));			}		}		// If they haven't selected a forum for pruning yet then		// display a select box to use for pruning.		if (!sizeof($forum_id))		{			$template->assign_vars(array(				'U_ACTION'			=> $this->u_action,				'S_SELECT_FORUM'	=> true,				'S_FORUM_OPTIONS'	=> make_forum_select(false, false, false))			);		}		else		{			$sql = 'SELECT forum_id, forum_name				FROM ' . FORUMS_TABLE . '				WHERE ' . $db->sql_in_set('forum_id', $forum_id);			$result = $db->sql_query($sql);			$row = $db->sql_fetchrow($result);			if (!$row)			{				$db->sql_freeresult($result);				trigger_error($user->lang['NO_FORUM'] . adm_back_link($this->u_action), E_USER_WARNING);			}			$forum_list = $s_hidden_fields = '';			do			{				$forum_list .= (($forum_list != '') ? ', ' : '') . '<b>' . $row['forum_name'] . '</b>';				$s_hidden_fields .= '<input type="hidden" name="f[]" value="' . $row['forum_id'] . '" />';			}			while ($row = $db->sql_fetchrow($result));			$db->sql_freeresult($result);			$l_selected_forums = (sizeof($forum_id) == 1) ? 'SELECTED_FORUM' : 'SELECTED_FORUMS';			$template->assign_vars(array(				'L_SELECTED_FORUMS'		=> $user->lang[$l_selected_forums],				'U_ACTION'				=> $this->u_action,				'U_BACK'				=> $this->u_action,				'FORUM_LIST'			=> $forum_list,				'S_HIDDEN_FIELDS'		=> $s_hidden_fields)			);		}	}	/**	* Prune users	*/	function prune_users($id, $mode)	{		global $db, $user, $auth, $template, $cache;		global $config, $phpbb_root_path, $phpbb_admin_path, $phpEx;		$user->add_lang('memberlist');		$prune = (isset($_POST['prune'])) ? true : false;		if ($prune)		{			$action = request_var('action', 'deactivate');			$deleteposts = request_var('deleteposts', 0);			if (confirm_box(true))			{				$user_ids = $usernames = array();				$this->get_prune_users($user_ids, $usernames);				if (sizeof($user_ids))				{					if ($action == 'deactivate')					{						user_active_flip('deactivate', $user_ids);						$l_log = 'LOG_PRUNE_USER_DEAC';					}					else if ($action == 'delete')					{						if ($deleteposts)						{							foreach ($user_ids as $user_id)							{								user_delete('remove', $user_id);							}														$l_log = 'LOG_PRUNE_USER_DEL_DEL';						}						else						{							foreach ($user_ids as $user_id)							{								user_delete('retain', $user_id, $usernames[$user_id]);							}							$l_log = 'LOG_PRUNE_USER_DEL_ANON';						}					}					add_log('admin', $l_log, implode(', ', $usernames));					$msg = $user->lang['USER_' . strtoupper($action) . '_SUCCESS'];				}				else				{					$msg = $user->lang['USER_PRUNE_FAILURE'];				}				trigger_error($msg . adm_back_link($this->u_action));			}			else			{				// We list the users which will be pruned...				$user_ids = $usernames = array();				$this->get_prune_users($user_ids, $usernames);				if (!sizeof($user_ids))				{					trigger_error($user->lang['USER_PRUNE_FAILURE'] . adm_back_link($this->u_action), E_USER_WARNING);				}				// Assign to template				foreach ($user_ids as $user_id)				{					$template->assign_block_vars('users', array(						'USERNAME'			=> $usernames[$user_id],						'U_PROFILE'			=> append_sid($phpbb_root_path . 'memberlist.' . $phpEx, 'mode=viewprofile&amp;u=' . $user_id),						'U_USER_ADMIN'		=> ($auth->acl_get('a_user')) ? append_sid("{$phpbb_admin_path}index.$phpEx", 'i=users&amp;mode=overview&amp;u=' . $user_id, true, $user->session_id) : '',					));				}				$template->assign_vars(array(					'S_DEACTIVATE'		=> ($action == 'deactivate') ? true : false,					'S_DELETE'			=> ($action == 'delete') ? true : false,				));				confirm_box(false, $user->lang['CONFIRM_OPERATION'], build_hidden_fields(array(					'i'				=> $id,					'mode'			=> $mode,					'prune'			=> 1,					'users'			=> utf8_normalize_nfc(request_var('users', '', true)),					'username'		=> utf8_normalize_nfc(request_var('username', '', true)),					'email'			=> request_var('email', ''),					'joined_select'	=> request_var('joined_select', ''),					'joined'		=> request_var('joined', ''),					'active_select'	=> request_var('active_select', ''),					'active'		=> request_var('active', ''),					'count_select'	=> request_var('count_select', ''),					'count'			=> request_var('count', ''),					'deleteposts'	=> request_var('deleteposts', 0),					'action'		=> request_var('action', ''),				)), 'confirm_body_prune.html');			}		}		$find_count = array('lt' => $user->lang['LESS_THAN'], 'eq' => $user->lang['EQUAL_TO'], 'gt' => $user->lang['MORE_THAN']);		$s_find_count = '';		foreach ($find_count as $key => $value)		{			$selected = ($key == 'eq') ? ' selected="selected"' : '';			$s_find_count .= '<option value="' . $key . '"' . $selected . '>' . $value . '</option>';		}		$find_time = array('lt' => $user->lang['BEFORE'], 'gt' => $user->lang['AFTER']);		$s_find_join_time = '';		foreach ($find_time as $key => $value)		{			$s_find_join_time .= '<option value="' . $key . '">' . $value . '</option>';		}				$s_find_active_time = '';		foreach ($find_time as $key => $value)		{			$s_find_active_time .= '<option value="' . $key . '">' . $value . '</option>';		}		$template->assign_vars(array(			'U_ACTION'			=> $this->u_action,			'S_JOINED_OPTIONS'	=> $s_find_join_time,			'S_ACTIVE_OPTIONS'	=> $s_find_active_time,			'S_COUNT_OPTIONS'	=> $s_find_count,			'U_FIND_USERNAME'	=> append_sid("{$phpbb_root_path}memberlist.$phpEx", 'mode=searchuser&amp;form=acp_prune&amp;field=users'),		));	}	/**	* Get user_ids/usernames from those being pruned	*/	function get_prune_users(&$user_ids, &$usernames)	{		global $user, $db;		$users = utf8_normalize_nfc(request_var('users', '', true));				if ($users)		{			$users = explode("\n", $users);			$where_sql = ' AND ' . $db->sql_in_set('username_clean', array_map('utf8_clean_string', $users));		}		else		{			$username = utf8_normalize_nfc(request_var('username', '', true));			$email = request_var('email', '');			$joined_select = request_var('joined_select', 'lt');			$active_select = request_var('active_select', 'lt');			$count_select = request_var('count_select', 'eq');			$joined = request_var('joined', '');			$active = request_var('active', '');			$active = ($active) ? explode('-', $active) : array();			$joined = ($joined) ? explode('-', $joined) : array();			if ((sizeof($active) && sizeof($active) != 3) || (sizeof($joined) && sizeof($joined) != 3))			{				trigger_error($user->lang['WRONG_ACTIVE_JOINED_DATE'] . adm_back_link($this->u_action), E_USER_WARNING);			}			$count = request_var('count', '');			$key_match = array('lt' => '<', 'gt' => '>', 'eq' => '=');			$sort_by_types = array('username', 'user_email', 'user_posts', 'user_regdate', 'user_lastvisit');			$where_sql = '';			$where_sql .= ($username) ? ' AND username_clean ' . $db->sql_like_expression(str_replace('*', $db->any_char, utf8_clean_string($username))) : '';			$where_sql .= ($email) ? ' AND user_email ' . $db->sql_like_expression(str_replace('*', $db->any_char, $email)) . ' ' : '';			$where_sql .= (sizeof($joined)) ? " AND user_regdate " . $key_match[$joined_select] . ' ' . gmmktime(0, 0, 0, (int) $joined[1], (int) $joined[2], (int) $joined[0]) : '';			$where_sql .= ($count !== '') ? " AND user_posts " . $key_match[$count_select] . ' ' . (int) $count . ' ' : '';			// First handle pruning of users who never logged in, last active date is 0000-00-00			if (sizeof($active) && (int) $active[0] == 0 && (int) $active[1] == 0 && (int) $active[2] == 0)			{				$where_sql .= ' AND user_lastvisit = 0';			}						else if (sizeof($active) && $active_select != 'lt')			{				$where_sql .= ' AND user_lastvisit ' . $key_match[$active_select] . ' ' . gmmktime(0, 0, 0, (int) $active[1], (int) $active[2], (int) $active[0]);			}			else if (sizeof($active))			{				$where_sql .= ' AND (user_lastvisit > 0 AND user_lastvisit < ' . gmmktime(0, 0, 0, (int) $active[1], (int) $active[2], (int) $active[0]) . ')';			}		}		// Protect the admin, do not prune if no options are given...		if (!$where_sql)		{			return;		}		// Get bot ids		$sql = 'SELECT user_id			FROM ' . BOTS_TABLE;		$result = $db->sql_query($sql);		$bot_ids = array();		while ($row = $db->sql_fetchrow($result))		{			$bot_ids[] = $row['user_id'];		}		$db->sql_freeresult($result);		// Do not prune founder members		$sql = 'SELECT user_id, username			FROM ' . USERS_TABLE . '			WHERE user_id <> ' . ANONYMOUS . '				AND user_type <> ' . USER_FOUNDER . "			$where_sql";		$result = $db->sql_query($sql);		$where_sql = '';		$user_ids = $usernames = array();		while ($row = $db->sql_fetchrow($result))		{			// Do not prune bots and the user currently pruning.			if ($row['user_id'] != $user->data['user_id'] && !in_array($row['user_id'], $bot_ids))			{				$user_ids[] = $row['user_id'];				$usernames[$row['user_id']] = $row['username'];			}		}		$db->sql_freeresult($result);	}}?>
<?php/**** @package acp* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @ignore*/if (!defined('IN_PHPBB')){	exit;}/*** @package acp*/class acp_bots{	var $u_action;	function main($id, $mode)	{		global $config, $db, $user, $auth, $template, $cache;		global $phpbb_root_path, $phpbb_admin_path, $phpEx, $table_prefix;		$action = request_var('action', '');		$submit = (isset($_POST['submit'])) ? true : false;		$mark	= request_var('mark', array(0));		$bot_id	= request_var('id', 0);		if (isset($_POST['add']))		{			$action = 'add';		}		$error = array();		$user->add_lang('acp/bots');		$this->tpl_name = 'acp_bots';		$this->page_title = 'ACP_BOTS';		$form_key = 'acp_bots';		add_form_key($form_key);		if ($submit && !check_form_key($form_key))		{			$error[] = $user->lang['FORM_INVALID'];		}		// User wants to do something, how inconsiderate of them!		switch ($action)		{			case 'activate':				if ($bot_id || sizeof($mark))				{					$sql_id = ($bot_id) ? " = $bot_id" : ' IN (' . implode(', ', $mark) . ')';					$sql = 'UPDATE ' . BOTS_TABLE . "						SET bot_active = 1						WHERE bot_id $sql_id";					$db->sql_query($sql);				}				$cache->destroy('_bots');			break;			case 'deactivate':				if ($bot_id || sizeof($mark))				{					$sql_id = ($bot_id) ? " = $bot_id" : ' IN (' . implode(', ', $mark) . ')';					$sql = 'UPDATE ' . BOTS_TABLE . "						SET bot_active = 0						WHERE bot_id $sql_id";					$db->sql_query($sql);				}				$cache->destroy('_bots');			break;			case 'delete':				if ($bot_id || sizeof($mark))				{					if (confirm_box(true))					{						// We need to delete the relevant user, usergroup and bot entries ...						$sql_id = ($bot_id) ? " = $bot_id" : ' IN (' . implode(', ', $mark) . ')';						$sql = 'SELECT bot_name, user_id							FROM ' . BOTS_TABLE . "							WHERE bot_id $sql_id";						$result = $db->sql_query($sql);						$user_id_ary = $bot_name_ary = array();						while ($row = $db->sql_fetchrow($result))						{							$user_id_ary[] = (int) $row['user_id'];							$bot_name_ary[] = $row['bot_name'];						}						$db->sql_freeresult($result);						$db->sql_transaction('begin');						$sql = 'DELETE FROM ' . BOTS_TABLE . "							WHERE bot_id $sql_id";						$db->sql_query($sql);						if (sizeof($user_id_ary))						{							$_tables = array(USERS_TABLE, USER_GROUP_TABLE);							foreach ($_tables as $table)							{								$sql = "DELETE FROM $table									WHERE " . $db->sql_in_set('user_id', $user_id_ary);								$db->sql_query($sql);							}						}						$db->sql_transaction('commit');						$cache->destroy('_bots');						add_log('admin', 'LOG_BOT_DELETE', implode(', ', $bot_name_ary));						trigger_error($user->lang['BOT_DELETED'] . adm_back_link($this->u_action));					}					else					{						confirm_box(false, $user->lang['CONFIRM_OPERATION'], build_hidden_fields(array(							'mark'		=> $mark,							'id'		=> $bot_id,							'mode'		=> $mode,							'action'	=> $action))						);					}				}			break;			case 'edit':			case 'add':				include_once($phpbb_root_path . 'includes/functions_user.' . $phpEx);				$bot_row = array(					'bot_name'		=> utf8_normalize_nfc(request_var('bot_name', '', true)),					'bot_agent'		=> request_var('bot_agent', ''),					'bot_ip'		=> request_var('bot_ip', ''),					'bot_active'	=> request_var('bot_active', true),					'bot_lang'		=> request_var('bot_lang', $config['default_lang']),					'bot_style'		=> request_var('bot_style' , $config['default_style']),				);				if ($submit)				{					if (!$bot_row['bot_agent'] && !$bot_row['bot_ip'])					{						$error[] = $user->lang['ERR_BOT_NO_MATCHES'];					}								if ($bot_row['bot_ip'] && !preg_match('#^[\d\.,:]+$#', $bot_row['bot_ip']))					{						if (!$ip_list = gethostbynamel($bot_row['bot_ip']))						{							$error[] = $user->lang['ERR_BOT_NO_IP'];						}						else						{							$bot_row['bot_ip'] = implode(',', $ip_list);						}					}					$bot_row['bot_ip'] = str_replace(' ', '', $bot_row['bot_ip']);					// Make sure the admin is not adding a bot with an user agent similar to his one					if ($bot_row['bot_agent'] && substr($user->data['session_browser'], 0, 149) === substr($bot_row['bot_agent'], 0, 149))					{						$error[] = $user->lang['ERR_BOT_AGENT_MATCHES_UA'];					}										$bot_name = false;					if ($bot_id)					{						$sql = 'SELECT u.username_clean							FROM ' . BOTS_TABLE . ' b, ' . USERS_TABLE . " u							WHERE b.bot_id = $bot_id								AND u.user_id = b.user_id";						$result = $db->sql_query($sql);						$row = $db->sql_fetchrow($result);						$db->sql_freeresult($result);						if (!$bot_row)						{							$error[] = $user->lang['NO_BOT'];						}						else						{							$bot_name = $row['username_clean'];						}					}					if (!$this->validate_botname($bot_row['bot_name'], $bot_name))					{						$error[] = $user->lang['BOT_NAME_TAKEN'];					}										if (!sizeof($error))					{						// New bot? Create a new user and group entry						if ($action == 'add')						{							$sql = 'SELECT group_id, group_colour								FROM ' . GROUPS_TABLE . "								WHERE group_name = 'BOTS'									AND group_type = " . GROUP_SPECIAL;							$result = $db->sql_query($sql);							$group_row = $db->sql_fetchrow($result);							$db->sql_freeresult($result);							if (!$group_row)							{								trigger_error($user->lang['NO_BOT_GROUP'] . adm_back_link($this->u_action . "&amp;id=$bot_id&amp;action=$action"), E_USER_WARNING);							}													$user_id = user_add(array(								'user_type'				=> (int) USER_IGNORE,								'group_id'				=> (int) $group_row['group_id'],								'username'				=> (string) $bot_row['bot_name'],								'user_regdate'			=> time(),								'user_password'			=> '',								'user_colour'			=> (string) $group_row['group_colour'],								'user_email'			=> '',								'user_lang'				=> (string) $bot_row['bot_lang'],								'user_style'			=> (int) $bot_row['bot_style'],								'user_allow_massemail'	=> 0,							));								$sql = 'INSERT INTO ' . BOTS_TABLE . ' ' . $db->sql_build_array('INSERT', array(								'user_id'		=> (int) $user_id,								'bot_name'		=> (string) $bot_row['bot_name'],								'bot_active'	=> (int) $bot_row['bot_active'],								'bot_agent'		=> (string) $bot_row['bot_agent'],								'bot_ip'		=> (string) $bot_row['bot_ip'])							);							$db->sql_query($sql);								$log = 'ADDED';						}						else if ($bot_id)						{							$sql = 'SELECT user_id, bot_name								FROM ' . BOTS_TABLE . "								WHERE bot_id = $bot_id";							$result = $db->sql_query($sql);							$row = $db->sql_fetchrow($result);							$db->sql_freeresult($result);							if (!$row)							{								trigger_error($user->lang['NO_BOT'] . adm_back_link($this->u_action . "&amp;id=$bot_id&amp;action=$action"), E_USER_WARNING);							}							$sql_ary = array(								'user_style'	=> (int) $bot_row['bot_style'],								'user_lang'		=> (string) $bot_row['bot_lang'],							);							if ($bot_row['bot_name'] !== $row['bot_name'])							{								$sql_ary['username'] = (string) $bot_row['bot_name'];								$sql_ary['username_clean'] = (string) utf8_clean_string($bot_row['bot_name']);							}							$sql = 'UPDATE ' . USERS_TABLE . ' SET ' . $db->sql_build_array('UPDATE', $sql_ary) . " WHERE user_id = {$row['user_id']}";							$db->sql_query($sql);							$sql = 'UPDATE ' . BOTS_TABLE . ' SET ' . $db->sql_build_array('UPDATE', array(								'bot_name'		=> (string) $bot_row['bot_name'],								'bot_active'	=> (int) $bot_row['bot_active'],								'bot_agent'		=> (string) $bot_row['bot_agent'],								'bot_ip'		=> (string) $bot_row['bot_ip'])							) . " WHERE bot_id = $bot_id";							$db->sql_query($sql);							// Updated username?							if ($bot_row['bot_name'] !== $row['bot_name'])							{								user_update_name($row['bot_name'], $bot_row['bot_name']);							}							$log = 'UPDATED';						}												$cache->destroy('_bots');												add_log('admin', 'LOG_BOT_' . $log, $bot_row['bot_name']);						trigger_error($user->lang['BOT_' . $log] . adm_back_link($this->u_action));										}				}				else if ($bot_id)				{					$sql = 'SELECT b.*, u.user_lang, u.user_style						FROM ' . BOTS_TABLE . ' b, ' . USERS_TABLE . " u						WHERE b.bot_id = $bot_id							AND u.user_id = b.user_id";					$result = $db->sql_query($sql);					$bot_row = $db->sql_fetchrow($result);					$db->sql_freeresult($result);					if (!$bot_row)					{						trigger_error($user->lang['NO_BOT'] . adm_back_link($this->u_action . "&amp;id=$bot_id&amp;action=$action"), E_USER_WARNING);					}					$bot_row['bot_lang'] = $bot_row['user_lang'];					$bot_row['bot_style'] = $bot_row['user_style'];					unset($bot_row['user_lang'], $bot_row['user_style']);				}				$s_active_options = '';				$_options = array('0' => 'NO', '1' => 'YES');				foreach ($_options as $value => $lang)				{					$selected = ($bot_row['bot_active'] == $value) ? ' selected="selected"' : '';					$s_active_options .= '<option value="' . $value . '"' . $selected . '>' . $user->lang[$lang] . '</option>';				}				$style_select = style_select($bot_row['bot_style'], true);				$lang_select = language_select($bot_row['bot_lang']);				$l_title = ($action == 'edit') ? 'EDIT' : 'ADD';				$template->assign_vars(array(					'L_TITLE'		=> $user->lang['BOT_' . $l_title],					'U_ACTION'		=> $this->u_action . "&amp;id=$bot_id&amp;action=$action",					'U_BACK'		=> $this->u_action,					'ERROR_MSG'		=> (sizeof($error)) ? implode('<br />', $error) : '',										'BOT_NAME'		=> $bot_row['bot_name'],					'BOT_IP'		=> $bot_row['bot_ip'],					'BOT_AGENT'		=> $bot_row['bot_agent'],										'S_EDIT_BOT'		=> true,					'S_ACTIVE_OPTIONS'	=> $s_active_options,					'S_STYLE_OPTIONS'	=> $style_select,					'S_LANG_OPTIONS'	=> $lang_select,					'S_ERROR'			=> (sizeof($error)) ? true : false,					)				);				return;			break;		}		$s_options = '';		$_options = array('activate' => 'BOT_ACTIVATE', 'deactivate' => 'BOT_DEACTIVATE', 'delete' => 'DELETE');		foreach ($_options as $value => $lang)		{			$s_options .= '<option value="' . $value . '">' . $user->lang[$lang] . '</option>';		}		$template->assign_vars(array(			'U_ACTION'		=> $this->u_action,			'S_BOT_OPTIONS'	=> $s_options)		);		$sql = 'SELECT b.bot_id, b.bot_name, b.bot_active, u.user_lastvisit			FROM ' . BOTS_TABLE . ' b, ' . USERS_TABLE . ' u			WHERE u.user_id = b.user_id			ORDER BY u.user_lastvisit DESC, b.bot_name ASC';		$result = $db->sql_query($sql);		while ($row = $db->sql_fetchrow($result))		{			$active_lang = (!$row['bot_active']) ? 'BOT_ACTIVATE' : 'BOT_DEACTIVATE';			$active_value = (!$row['bot_active']) ? 'activate' : 'deactivate';			$template->assign_block_vars('bots', array(				'BOT_NAME'		=> $row['bot_name'],				'BOT_ID'		=> $row['bot_id'],				'LAST_VISIT'	=> ($row['user_lastvisit']) ? $user->format_date($row['user_lastvisit']) : $user->lang['BOT_NEVER'],				'U_ACTIVATE_DEACTIVATE'	=> $this->u_action . "&amp;id={$row['bot_id']}&amp;action=$active_value",				'L_ACTIVATE_DEACTIVATE'	=> $user->lang[$active_lang],				'U_EDIT'				=> $this->u_action . "&amp;id={$row['bot_id']}&amp;action=edit",				'U_DELETE'				=> $this->u_action . "&amp;id={$row['bot_id']}&amp;action=delete")			);		}		$db->sql_freeresult($result);	}		/**	* Validate bot name against username table	*/	function validate_botname($newname, $oldname = false)	{		global $db;		if ($oldname && utf8_clean_string($newname) === $oldname)		{			return true;		}		// Admins might want to use names otherwise forbidden, thus we only check for duplicates.		$sql = 'SELECT username			FROM ' . USERS_TABLE . "			WHERE username_clean = '" . $db->sql_escape(utf8_clean_string($newname)) . "'";		$result = $db->sql_query($sql);		$row = $db->sql_fetchrow($result);		$db->sql_freeresult($result);				return ($row) ? false : true;	}}?>
<?php/**** @package acp* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @ignore*/if (!defined('IN_PHPBB')){	exit;}/*** @package acp*/class acp_bbcodes{	var $u_action;	function main($id, $mode)	{		global $db, $user, $auth, $template, $cache;		global $config, $phpbb_root_path, $phpbb_admin_path, $phpEx;		$user->add_lang('acp/posting');		// Set up general vars		$action	= request_var('action', '');		$bbcode_id = request_var('bbcode', 0);		$this->tpl_name = 'acp_bbcodes';		$this->page_title = 'ACP_BBCODES';		$form_key = 'acp_bbcodes';		add_form_key($form_key);		// Set up mode-specific vars		switch ($action)		{			case 'add':				$bbcode_match = $bbcode_tpl = $bbcode_helpline = '';				$display_on_posting = 0;			break;			case 'edit':				$sql = 'SELECT bbcode_match, bbcode_tpl, display_on_posting, bbcode_helpline					FROM ' . BBCODES_TABLE . '					WHERE bbcode_id = ' . $bbcode_id;				$result = $db->sql_query($sql);				$row = $db->sql_fetchrow($result);				$db->sql_freeresult($result);				if (!$row)				{					trigger_error($user->lang['BBCODE_NOT_EXIST'] . adm_back_link($this->u_action), E_USER_WARNING);				}				$bbcode_match = $row['bbcode_match'];				$bbcode_tpl = htmlspecialchars($row['bbcode_tpl']);				$display_on_posting = $row['display_on_posting'];				$bbcode_helpline = $row['bbcode_helpline'];			break;			case 'modify':				$sql = 'SELECT bbcode_id, bbcode_tag					FROM ' . BBCODES_TABLE . '					WHERE bbcode_id = ' . $bbcode_id;				$result = $db->sql_query($sql);				$row = $db->sql_fetchrow($result);				$db->sql_freeresult($result);				if (!$row)				{					trigger_error($user->lang['BBCODE_NOT_EXIST'] . adm_back_link($this->u_action), E_USER_WARNING);				}			// No break here			case 'create':				$display_on_posting = request_var('display_on_posting', 0);				$bbcode_match = request_var('bbcode_match', '');				$bbcode_tpl = htmlspecialchars_decode(utf8_normalize_nfc(request_var('bbcode_tpl', '', true)));				$bbcode_helpline = utf8_normalize_nfc(request_var('bbcode_helpline', '', true));			break;		}		// Do major work		switch ($action)		{			case 'edit':			case 'add':				$template->assign_vars(array(					'S_EDIT_BBCODE'		=> true,					'U_BACK'			=> $this->u_action,					'U_ACTION'			=> $this->u_action . '&amp;action=' . (($action == 'add') ? 'create' : 'modify') . (($bbcode_id) ? "&amp;bbcode=$bbcode_id" : ''),					'L_BBCODE_USAGE_EXPLAIN'=> sprintf($user->lang['BBCODE_USAGE_EXPLAIN'], '<a href="#down">', '</a>'),					'BBCODE_MATCH'			=> $bbcode_match,					'BBCODE_TPL'			=> $bbcode_tpl,					'BBCODE_HELPLINE'		=> $bbcode_helpline,					'DISPLAY_ON_POSTING'	=> $display_on_posting)				);				foreach ($user->lang['tokens'] as $token => $token_explain)				{					$template->assign_block_vars('token', array(						'TOKEN'		=> '{' . $token . '}',						'EXPLAIN'	=> $token_explain)					);				}				return;			break;			case 'modify':			case 'create':				$warn_text = preg_match('%<[^>]*\{text[\d]*\}[^>]*>%i', $bbcode_tpl);				if (!$warn_text || confirm_box(true))				{					$data = $this->build_regexp($bbcode_match, $bbcode_tpl);					// Make sure the user didn't pick a "bad" name for the BBCode tag.					$hard_coded = array('code', 'quote', 'quote=', 'attachment', 'attachment=', 'b', 'i', 'url', 'url=', 'img', 'size', 'size=', 'color', 'color=', 'u', 'list', 'list=', 'email', 'email=', 'flash', 'flash=');					if (($action == 'modify' && strtolower($data['bbcode_tag']) !== strtolower($row['bbcode_tag'])) || ($action == 'create'))					{						$sql = 'SELECT 1 as test							FROM ' . BBCODES_TABLE . "							WHERE LOWER(bbcode_tag) = '" . $db->sql_escape(strtolower($data['bbcode_tag'])) . "'";						$result = $db->sql_query($sql);						$info = $db->sql_fetchrow($result);						$db->sql_freeresult($result);						// Grab the end, interrogate the last closing tag						if ($info['test'] === '1' || in_array(strtolower($data['bbcode_tag']), $hard_coded) || (preg_match('#\[/([^[]*)]$#', $bbcode_match, $regs) && in_array(strtolower($regs[1]), $hard_coded)))						{							trigger_error($user->lang['BBCODE_INVALID_TAG_NAME'] . adm_back_link($this->u_action), E_USER_WARNING);						}					}					if (substr($data['bbcode_tag'], -1) === '=')					{						$test = substr($data['bbcode_tag'], 0, -1);					}					else					{						$test = $data['bbcode_tag'];					}					if (!preg_match('%\\[' . $test . '[^]]*].*?\\[/' . $test . ']%s', $bbcode_match))					{						trigger_error($user->lang['BBCODE_OPEN_ENDED_TAG'] . adm_back_link($this->u_action), E_USER_WARNING);					}					if (strlen($data['bbcode_tag']) > 16)					{						trigger_error($user->lang['BBCODE_TAG_TOO_LONG'] . adm_back_link($this->u_action), E_USER_WARNING);					}					if (strlen($bbcode_match) > 4000)					{						trigger_error($user->lang['BBCODE_TAG_DEF_TOO_LONG'] . adm_back_link($this->u_action), E_USER_WARNING);					}					if (strlen($bbcode_helpline) > 255)					{						trigger_error($user->lang['BBCODE_HELPLINE_TOO_LONG'] . adm_back_link($this->u_action), E_USER_WARNING);					}					$sql_ary = array(						'bbcode_tag'				=> $data['bbcode_tag'],						'bbcode_match'				=> $bbcode_match,						'bbcode_tpl'				=> $bbcode_tpl,						'display_on_posting'		=> $display_on_posting,						'bbcode_helpline'			=> $bbcode_helpline,						'first_pass_match'			=> $data['first_pass_match'],						'first_pass_replace'		=> $data['first_pass_replace'],						'second_pass_match'			=> $data['second_pass_match'],						'second_pass_replace'		=> $data['second_pass_replace']					);					if ($action == 'create')					{						$sql = 'SELECT MAX(bbcode_id) as max_bbcode_id							FROM ' . BBCODES_TABLE;						$result = $db->sql_query($sql);						$row = $db->sql_fetchrow($result);						$db->sql_freeresult($result);						if ($row)						{							$bbcode_id = $row['max_bbcode_id'] + 1;							// Make sure it is greater than the core bbcode ids...							if ($bbcode_id <= NUM_CORE_BBCODES)							{								$bbcode_id = NUM_CORE_BBCODES + 1;							}						}						else						{							$bbcode_id = NUM_CORE_BBCODES + 1;						}						if ($bbcode_id > BBCODE_LIMIT)						{							trigger_error($user->lang['TOO_MANY_BBCODES'] . adm_back_link($this->u_action), E_USER_WARNING);						}						$sql_ary['bbcode_id'] = (int) $bbcode_id;						$db->sql_query('INSERT INTO ' . BBCODES_TABLE . $db->sql_build_array('INSERT', $sql_ary));						$cache->destroy('sql', BBCODES_TABLE);						$lang = 'BBCODE_ADDED';						$log_action = 'LOG_BBCODE_ADD';					}					else					{						$sql = 'UPDATE ' . BBCODES_TABLE . '							SET ' . $db->sql_build_array('UPDATE', $sql_ary) . '							WHERE bbcode_id = ' . $bbcode_id;						$db->sql_query($sql);						$cache->destroy('sql', BBCODES_TABLE);						$lang = 'BBCODE_EDITED';						$log_action = 'LOG_BBCODE_EDIT';					}					add_log('admin', $log_action, $data['bbcode_tag']);					trigger_error($user->lang[$lang] . adm_back_link($this->u_action));				}				else				{					confirm_box(false, $user->lang['BBCODE_DANGER'], build_hidden_fields(array(						'action'				=> $action,						'bbcode'				=> $bbcode_id,						'bbcode_match'			=> $bbcode_match,						'bbcode_tpl'			=> htmlspecialchars($bbcode_tpl),						'bbcode_helpline'		=> $bbcode_helpline,						'display_on_posting'	=> $display_on_posting,						))					, 'confirm_bbcode.html');				}			break;			case 'delete':				$sql = 'SELECT bbcode_tag					FROM ' . BBCODES_TABLE . "					WHERE bbcode_id = $bbcode_id";				$result = $db->sql_query($sql);				$row = $db->sql_fetchrow($result);				$db->sql_freeresult($result);				if ($row)				{					if (confirm_box(true))					{						$db->sql_query('DELETE FROM ' . BBCODES_TABLE . " WHERE bbcode_id = $bbcode_id");						$cache->destroy('sql', BBCODES_TABLE);						add_log('admin', 'LOG_BBCODE_DELETE', $row['bbcode_tag']);					}					else					{						confirm_box(false, $user->lang['CONFIRM_OPERATION'], build_hidden_fields(array(							'bbcode'	=> $bbcode_id,							'i'			=> $id,							'mode'		=> $mode,							'action'	=> $action))						);					}				}			break;		}		$template->assign_vars(array(			'U_ACTION'		=> $this->u_action . '&amp;action=add')		);		$sql = 'SELECT *			FROM ' . BBCODES_TABLE . '			ORDER BY bbcode_tag';		$result = $db->sql_query($sql);		while ($row = $db->sql_fetchrow($result))		{			$template->assign_block_vars('bbcodes', array(				'BBCODE_TAG'		=> $row['bbcode_tag'],				'U_EDIT'			=> $this->u_action . '&amp;action=edit&amp;bbcode=' . $row['bbcode_id'],				'U_DELETE'			=> $this->u_action . '&amp;action=delete&amp;bbcode=' . $row['bbcode_id'])			);		}		$db->sql_freeresult($result);	}	/*	* Build regular expression for custom bbcode	*/	function build_regexp(&$bbcode_match, &$bbcode_tpl)	{		$bbcode_match = trim($bbcode_match);		$bbcode_tpl = trim($bbcode_tpl);		$utf8 = strpos($bbcode_match, 'INTTEXT') !== false;		// make sure we have utf8 support		$utf8_pcre_properties = false;		if (version_compare(PHP_VERSION, '5.1.0', '>=') || (version_compare(PHP_VERSION, '5.0.0-dev', '<=') && version_compare(PHP_VERSION, '4.4.0', '>=')))		{			// While this is the proper range of PHP versions, PHP may not be linked with the bundled PCRE lib and instead with an older version			if (@preg_match('/\p{L}/u', 'a') !== false)			{				$utf8_pcre_properties = true;			}		}		$fp_match = preg_quote($bbcode_match, '!');		$fp_replace = preg_replace('#^\[(.*?)\]#', '[$1:$uid]', $bbcode_match);		$fp_replace = preg_replace('#\[/(.*?)\]$#', '[/$1:$uid]', $fp_replace);		$sp_match = preg_quote($bbcode_match, '!');		$sp_match = preg_replace('#^\\\\\[(.*?)\\\\\]#', '\[$1:$uid\]', $sp_match);		$sp_match = preg_replace('#\\\\\[/(.*?)\\\\\]$#', '\[/$1:$uid\]', $sp_match);		$sp_replace = $bbcode_tpl;		// @todo Make sure to change this too if something changed in message parsing		$tokens = array(			'URL'	 => array(				'!(?:(' . str_replace(array('!', '\#'), array('\!', '#'), get_preg_expression('url')) . ')|(' . str_replace(array('!', '\#'), array('\!', '#'), get_preg_expression('www_url')) . '))!ie'	=>	"\$this->bbcode_specialchars(('\$1') ? '\$1' : 'http://\$2')"			),			'LOCAL_URL'	 => array(				'!(' . str_replace(array('!', '\#'), array('\!', '#'), get_preg_expression('relative_url')) . ')!e'	=>	"\$this->bbcode_specialchars('$1')"			),			'EMAIL' => array(				'!(' . get_preg_expression('email') . ')!ie'	=>	"\$this->bbcode_specialchars('$1')"			),			'TEXT' => array(				'!(.*?)!es'	 =>	"str_replace(array(\"\\r\\n\", '\\\"', '\\'', '(', ')'), array(\"\\n\", '\"', '&#39;', '&#40;', '&#41;'), trim('\$1'))"			),			'SIMPLETEXT' => array(				'!([a-zA-Z0-9-+.,_ ]+)!'	 =>	"$1"			),			'INTTEXT' => array(				($utf8_pcre_properties) ? '!([\p{L}\p{N}\-+,_. ]+)!u' : '!([a-zA-Z0-9\-+,_. ]+)!u'	 =>	"$1"			),			'IDENTIFIER' => array(				'!([a-zA-Z0-9-_]+)!'	 =>	"$1"			),			'COLOR' => array(				'!([a-z]+|#[0-9abcdef]+)!i'	=>	'$1'			),			'NUMBER' => array(				'!([0-9]+)!'	=>	'$1'			)		);		$sp_tokens = array(			'URL'	 => '(?i)((?:' . str_replace(array('!', '\#'), array('\!', '#'), get_preg_expression('url')) . ')|(?:' . str_replace(array('!', '\#'), array('\!', '#'), get_preg_expression('www_url')) . '))(?-i)',			'LOCAL_URL'	 => '(?i)(' . str_replace(array('!', '\#'), array('\!', '#'), get_preg_expression('relative_url')) . ')(?-i)',			'EMAIL' => '(' . get_preg_expression('email') . ')',			'TEXT' => '(.*?)',			'SIMPLETEXT' => '([a-zA-Z0-9-+.,_ ]+)',			'INTTEXT' => ($utf8_pcre_properties) ? '([\p{L}\p{N}\-+,_. ]+)' : '([a-zA-Z0-9\-+,_. ]+)',			'IDENTIFIER' => '([a-zA-Z0-9-_]+)',			'COLOR' => '([a-zA-Z]+|#[0-9abcdefABCDEF]+)',			'NUMBER' => '([0-9]+)',		);		$pad = 0;		$modifiers = 'i';		$modifiers .= ($utf8 && $utf8_pcre_properties) ? 'u' : '';		if (preg_match_all('/\{(' . implode('|', array_keys($tokens)) . ')[0-9]*\}/i', $bbcode_match, $m))		{			foreach ($m[0] as $n => $token)			{				$token_type = $m[1][$n];				reset($tokens[strtoupper($token_type)]);				list($match, $replace) = each($tokens[strtoupper($token_type)]);				// Pad backreference numbers from tokens				if (preg_match_all('/(?<!\\\\)\$([0-9]+)/', $replace, $repad))				{					$repad = $pad + sizeof(array_unique($repad[0]));					$replace = preg_replace('/(?<!\\\\)\$([0-9]+)/e', "'\${' . (\$1 + \$pad) . '}'", $replace);					$pad = $repad;				}				// Obtain pattern modifiers to use and alter the regex accordingly				$regex = preg_replace('/!(.*)!([a-z]*)/', '$1', $match);				$regex_modifiers = preg_replace('/!(.*)!([a-z]*)/', '$2', $match);				for ($i = 0, $size = strlen($regex_modifiers); $i < $size; ++$i)				{					if (strpos($modifiers, $regex_modifiers[$i]) === false)					{						$modifiers .= $regex_modifiers[$i];						if ($regex_modifiers[$i] == 'e')						{							$fp_replace = "'" . str_replace("'", "\\'", $fp_replace) . "'";						}					}					if ($regex_modifiers[$i] == 'e')					{						$replace = "'.$replace.'";					}				}				$fp_match = str_replace(preg_quote($token, '!'), $regex, $fp_match);				$fp_replace = str_replace($token, $replace, $fp_replace);				$sp_match = str_replace(preg_quote($token, '!'), $sp_tokens[$token_type], $sp_match);				$sp_replace = str_replace($token, '${' . ($n + 1) . '}', $sp_replace);			}			$fp_match = '!' . $fp_match . '!' . $modifiers;			$sp_match = '!' . $sp_match . '!s' . (($utf8) ? 'u' : '');			if (strpos($fp_match, 'e') !== false)			{				$fp_replace = str_replace("'.'", '', $fp_replace);				$fp_replace = str_replace(".''.", '.', $fp_replace);			}		}		else		{			// No replacement is present, no need for a second-pass pattern replacement			// A simple str_replace will suffice			$fp_match = '!' . $fp_match . '!' . $modifiers;			$sp_match = $fp_replace;			$sp_replace = '';		}		// Lowercase tags		$bbcode_tag = preg_replace('/.*?\[([a-z0-9_-]+=?).*/i', '$1', $bbcode_match);		$bbcode_search = preg_replace('/.*?\[([a-z0-9_-]+)=?.*/i', '$1', $bbcode_match);		if (!preg_match('/^[a-zA-Z0-9_-]+=?$/', $bbcode_tag))		{			global $user;			trigger_error($user->lang['BBCODE_INVALID'] . adm_back_link($this->u_action), E_USER_WARNING);		}		$fp_match = preg_replace('#\[/?' . $bbcode_search . '#ie', "strtolower('\$0')", $fp_match);		$fp_replace = preg_replace('#\[/?' . $bbcode_search . '#ie', "strtolower('\$0')", $fp_replace);		$sp_match = preg_replace('#\[/?' . $bbcode_search . '#ie', "strtolower('\$0')", $sp_match);		$sp_replace = preg_replace('#\[/?' . $bbcode_search . '#ie', "strtolower('\$0')", $sp_replace);		return array(			'bbcode_tag'				=> $bbcode_tag,			'first_pass_match'			=> $fp_match,			'first_pass_replace'		=> $fp_replace,			'second_pass_match'			=> $sp_match,			'second_pass_replace'		=> $sp_replace		);	}}?>
<?php/**** @package phpBB3* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @ignore*/define('IN_PHPBB', true);$phpbb_root_path = (defined('PHPBB_ROOT_PATH')) ? PHPBB_ROOT_PATH : './';$phpEx = substr(strrchr(__FILE__, '.'), 1);include($phpbb_root_path . 'common.' . $phpEx);// Start session management$user->session_begin();$auth->acl($user->data);$user->setup();$mode = request_var('mode', '');// Load the appropriate faq fileswitch ($mode){	case 'bbcode':		$l_title = $user->lang['BBCODE_GUIDE'];		$user->add_lang('bbcode', false, true);	break;	default:		$l_title = $user->lang['FAQ_EXPLAIN'];		$user->add_lang('faq', false, true);	break;}// Pull the array data from the lang pack$switch_column = $found_switch = false;$help_blocks = array();foreach ($user->help as $help_ary){	if ($help_ary[0] == '--')	{		if ($help_ary[1] == '--')		{			$switch_column = true;			$found_switch = true;			continue;		}		$template->assign_block_vars('faq_block', array(			'BLOCK_TITLE'		=> $help_ary[1],			'SWITCH_COLUMN'		=> $switch_column,		));		if ($switch_column)		{			$switch_column = false;		}		continue;	}	$template->assign_block_vars('faq_block.faq_row', array(		'FAQ_QUESTION'		=> $help_ary[0],		'FAQ_ANSWER'		=> $help_ary[1])	);}// Lets build a page ...$template->assign_vars(array(	'L_FAQ_TITLE'				=> $l_title,	'L_BACK_TO_TOP'				=> $user->lang['BACK_TO_TOP'],	'SWITCH_COLUMN_MANUALLY'	=> (!$found_switch) ? true : false,));page_header($l_title, false);$template->set_filenames(array(	'body' => 'faq_body.html'));make_jumpbox(append_sid("{$phpbb_root_path}viewforum.$phpEx"));page_footer();?>
<?php/**** @package acp* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @package module_install*/class acp_users_info{	function module()	{		return array(			'filename'	=> 'acp_users',			'title'		=> 'ACP_USER_MANAGEMENT',			'version'	=> '1.0.0',			'modes'		=> array(				'overview'		=> array('title' => 'ACP_MANAGE_USERS', 'auth' => 'acl_a_user', 'cat' => array('ACP_CAT_USERS')),				'feedback'		=> array('title' => 'ACP_USER_FEEDBACK', 'auth' => 'acl_a_user', 'display' => false, 'cat' => array('ACP_CAT_USERS')),				'warnings'		=> array('title' => 'ACP_USER_WARNINGS', 'auth' => 'acl_a_user', 'display' => false, 'cat' => array('ACP_CAT_USERS')),				'profile'		=> array('title' => 'ACP_USER_PROFILE', 'auth' => 'acl_a_user', 'display' => false, 'cat' => array('ACP_CAT_USERS')),				'prefs'			=> array('title' => 'ACP_USER_PREFS', 'auth' => 'acl_a_user', 'display' => false, 'cat' => array('ACP_CAT_USERS')),				'avatar'		=> array('title' => 'ACP_USER_AVATAR', 'auth' => 'acl_a_user', 'display' => false, 'cat' => array('ACP_CAT_USERS')),				'rank'			=> array('title' => 'ACP_USER_RANK', 'auth' => 'acl_a_user', 'display' => false, 'cat' => array('ACP_CAT_USERS')),				'sig'			=> array('title' => 'ACP_USER_SIG', 'auth' => 'acl_a_user', 'display' => false, 'cat' => array('ACP_CAT_USERS')),				'groups'		=> array('title' => 'ACP_USER_GROUPS', 'auth' => 'acl_a_user && acl_a_group', 'display' => false, 'cat' => array('ACP_CAT_USERS')),				'perm'			=> array('title' => 'ACP_USER_PERM', 'auth' => 'acl_a_user && acl_a_viewauth', 'display' => false, 'cat' => array('ACP_CAT_USERS')),				'attach'		=> array('title' => 'ACP_USER_ATTACH', 'auth' => 'acl_a_user', 'display' => false, 'cat' => array('ACP_CAT_USERS')),			),		);	}	function install()	{	}	function uninstall()	{	}}?>
<?php/**** @package mcp* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @ignore*/if (!defined('IN_PHPBB')){	exit;}/*** mcp_reports* Handling the reports queue* @package mcp*/class mcp_pm_reports{	var $p_master;	var $u_action;	function mcp_pm_reports(&$p_master)	{		$this->p_master = &$p_master;	}	function main($id, $mode)	{		global $auth, $db, $user, $template, $cache;		global $config, $phpbb_root_path, $phpEx, $action;		include_once($phpbb_root_path . 'includes/functions_posting.' . $phpEx);		include_once($phpbb_root_path . 'includes/functions_privmsgs.' . $phpEx);		$start = request_var('start', 0);		$this->page_title = 'MCP_PM_REPORTS';		switch ($action)		{			case 'close':			case 'delete':				include_once($phpbb_root_path . 'includes/functions_messenger.' . $phpEx);				$report_id_list = request_var('report_id_list', array(0));				if (!sizeof($report_id_list))				{					trigger_error('NO_REPORT_SELECTED');				}				if (!function_exists('close_report'))				{					include($phpbb_root_path . 'includes/mcp/mcp_reports.' . $phpEx);				}				close_report($report_id_list, $mode, $action, true);			break;		}		switch ($mode)		{			case 'pm_report_details':				$user->add_lang(array('posting', 'viewforum', 'viewtopic', 'ucp'));				$report_id = request_var('r', 0);				$sql = 'SELECT r.pm_id, r.user_id, r.report_id, r.report_closed, report_time, r.report_text, rr.reason_title, rr.reason_description, u.username, u.username_clean, u.user_colour					FROM ' . REPORTS_TABLE . ' r, ' . REPORTS_REASONS_TABLE . ' rr, ' . USERS_TABLE . ' u					WHERE r.report_id = ' . $report_id . '						AND rr.reason_id = r.reason_id						AND r.user_id = u.user_id						AND r.post_id = 0					ORDER BY report_closed ASC';				$result = $db->sql_query_limit($sql, 1);				$report = $db->sql_fetchrow($result);				$db->sql_freeresult($result);				if (!$report_id || !$report)				{					trigger_error('NO_REPORT');				}				$pm_id = $report['pm_id'];				$report_id = $report['report_id'];				$pm_info = get_pm_data(array($pm_id));				if (!sizeof($pm_info))				{					trigger_error('NO_REPORT_SELECTED');				}				$pm_info = $pm_info[$pm_id];				write_pm_addresses(array('to' => $pm_info['to_address'], 'bcc' => $pm_info['bcc_address']), (int) $pm_info['author_id']);				$reason = array('title' => $report['reason_title'], 'description' => $report['reason_description']);				if (isset($user->lang['report_reasons']['TITLE'][strtoupper($reason['title'])]) && isset($user->lang['report_reasons']['DESCRIPTION'][strtoupper($reason['title'])]))				{					$reason['description'] = $user->lang['report_reasons']['DESCRIPTION'][strtoupper($reason['title'])];					$reason['title'] = $user->lang['report_reasons']['TITLE'][strtoupper($reason['title'])];				}				// Process message, leave it uncensored				$message = $pm_info['message_text'];				if ($pm_info['bbcode_bitfield'])				{					include_once($phpbb_root_path . 'includes/bbcode.' . $phpEx);					$bbcode = new bbcode($pm_info['bbcode_bitfield']);					$bbcode->bbcode_second_pass($message, $pm_info['bbcode_uid'], $pm_info['bbcode_bitfield']);				}				$message = bbcode_nl2br($message);				$message = smiley_text($message);				if ($pm_info['message_attachment'] && $auth->acl_get('u_pm_download'))				{					$sql = 'SELECT *						FROM ' . ATTACHMENTS_TABLE . '						WHERE post_msg_id = ' . $pm_id . '							AND in_message = 1						ORDER BY filetime DESC';					$result = $db->sql_query($sql);					while ($row = $db->sql_fetchrow($result))					{						$attachments[] = $row;					}					$db->sql_freeresult($result);					if (sizeof($attachments))					{						$update_count = array();						parse_attachments(0, $message, $attachments, $update_count);					}					// Display not already displayed Attachments for this post, we already parsed them. ;)					if (!empty($attachments))					{						$template->assign_var('S_HAS_ATTACHMENTS', true);						foreach ($attachments as $attachment)						{							$template->assign_block_vars('attachment', array(								'DISPLAY_ATTACHMENT'	=> $attachment)							);						}					}				}				$template->assign_vars(array(					'S_MCP_REPORT'			=> true,					'S_PM'					=> true,					'S_CLOSE_ACTION'		=> append_sid("{$phpbb_root_path}mcp.$phpEx", 'i=pm_reports&amp;mode=pm_report_details&amp;r=' . $report_id),					'S_CAN_VIEWIP'			=> $auth->acl_getf_global('m_info'),					'S_POST_REPORTED'		=> $pm_info['message_reported'],					'S_USER_NOTES'			=> true,					'U_MCP_REPORT'				=> append_sid("{$phpbb_root_path}mcp.$phpEx", 'i=pm_reports&amp;mode=pm_report_details&amp;r=' . $report_id),					'U_MCP_REPORTER_NOTES'		=> append_sid("{$phpbb_root_path}mcp.$phpEx", 'i=notes&amp;mode=user_notes&amp;u=' . $report['user_id']),					'U_MCP_USER_NOTES'			=> append_sid("{$phpbb_root_path}mcp.$phpEx", 'i=notes&amp;mode=user_notes&amp;u=' . $pm_info['author_id']),					'U_MCP_WARN_REPORTER'		=> ($auth->acl_get('m_warn')) ? append_sid("{$phpbb_root_path}mcp.$phpEx", 'i=warn&amp;mode=warn_user&amp;u=' . $report['user_id']) : '',					'U_MCP_WARN_USER'			=> ($auth->acl_get('m_warn')) ? append_sid("{$phpbb_root_path}mcp.$phpEx", 'i=warn&amp;mode=warn_user&amp;u=' . $pm_info['author_id']) : '',										'EDIT_IMG'				=> $user->img('icon_post_edit', $user->lang['EDIT_POST']),					'MINI_POST_IMG'			=> $user->img('icon_post_target', 'POST'),					'RETURN_REPORTS'			=> sprintf($user->lang['RETURN_REPORTS'], '<a href="' . append_sid("{$phpbb_root_path}mcp.$phpEx", 'i=pm_reports' . (($pm_info['message_reported']) ? '&amp;mode=pm_reports' : '&amp;mode=pm_reports_closed') . '&amp;start=' . $start) . '">', '</a>'),					'REPORTED_IMG'				=> $user->img('icon_topic_reported', $user->lang['POST_REPORTED']),					'REPORT_DATE'				=> $user->format_date($report['report_time']),					'REPORT_ID'					=> $report_id,					'REPORT_REASON_TITLE'		=> $reason['title'],					'REPORT_REASON_DESCRIPTION'	=> $reason['description'],					'REPORT_TEXT'				=> $report['report_text'],					'POST_AUTHOR_FULL'		=> get_username_string('full', $pm_info['author_id'], $pm_info['username'], $pm_info['user_colour']),					'POST_AUTHOR_COLOUR'	=> get_username_string('colour', $pm_info['author_id'], $pm_info['username'], $pm_info['user_colour']),					'POST_AUTHOR'			=> get_username_string('username', $pm_info['author_id'], $pm_info['username'], $pm_info['user_colour']),					'U_POST_AUTHOR'			=> get_username_string('profile', $pm_info['author_id'], $pm_info['username'], $pm_info['user_colour']),					'REPORTER_FULL'				=> get_username_string('full', $report['user_id'], $report['username'], $report['user_colour']),					'REPORTER_COLOUR'			=> get_username_string('colour', $report['user_id'], $report['username'], $report['user_colour']),					'REPORTER_NAME'				=> get_username_string('username', $report['user_id'], $report['username'], $report['user_colour']),					'U_VIEW_REPORTER_PROFILE'	=> get_username_string('profile', $report['user_id'], $report['username'], $report['user_colour']),					'POST_PREVIEW'			=> $message,					'POST_SUBJECT'			=> ($pm_info['message_subject']) ? $pm_info['message_subject'] : $user->lang['NO_SUBJECT'],					'POST_DATE'				=> $user->format_date($pm_info['message_time']),					'POST_IP'				=> $pm_info['author_ip'],					'POST_IPADDR'			=> ($auth->acl_getf_global('m_info') && request_var('lookup', '')) ? @gethostbyaddr($pm_info['author_ip']) : '',					'POST_ID'				=> $pm_info['msg_id'],					'U_LOOKUP_IP'			=> ($auth->acl_getf_global('m_info')) ? $this->u_action . '&amp;r=' . $report_id . '&amp;pm=' . $pm_id . '&amp;lookup=' . $pm_info['author_ip'] . '#ip' : '',				));				$this->tpl_name = 'mcp_post';			break;			case 'pm_reports':			case 'pm_reports_closed':				$user->add_lang(array('ucp'));				$sort_days = $total = 0;				$sort_key = $sort_dir = '';				$sort_by_sql = $sort_order_sql = array();				mcp_sorting($mode, $sort_days, $sort_key, $sort_dir, $sort_by_sql, $sort_order_sql, $total);				$limit_time_sql = ($sort_days) ? 'AND r.report_time >= ' . (time() - ($sort_days * 86400)) : '';				if ($mode == 'pm_reports')				{					$report_state = 'p.message_reported = 1 AND r.report_closed = 0';				}				else				{					$report_state = 'r.report_closed = 1';				}				$sql = 'SELECT r.report_id					FROM ' . PRIVMSGS_TABLE . ' p, ' . REPORTS_TABLE . ' r ' . (($sort_order_sql[0] == 'u') ? ', ' . USERS_TABLE . ' u' : '') . (($sort_order_sql[0] == 'r') ? ', ' . USERS_TABLE . ' ru' : '') . "					WHERE $report_state						AND r.pm_id = p.msg_id						" . (($sort_order_sql[0] == 'u') ? 'AND u.user_id = p.author_id' : '') . '						' . (($sort_order_sql[0] == 'r') ? 'AND ru.user_id = r.user_id' : '') . "						AND r.post_id = 0						$limit_time_sql					ORDER BY $sort_order_sql";				$result = $db->sql_query_limit($sql, $config['topics_per_page'], $start);				$i = 0;				$report_ids = array();				while ($row = $db->sql_fetchrow($result))				{					$report_ids[] = $row['report_id'];					$row_num[$row['report_id']] = $i++;				}				$db->sql_freeresult($result);				if (sizeof($report_ids))				{					$sql = 'SELECT p.*, u.username, u.username_clean, u.user_colour, r.user_id as reporter_id, ru.username as reporter_name, ru.user_colour as reporter_colour, r.report_time, r.report_id						FROM ' . REPORTS_TABLE . ' r, ' . PRIVMSGS_TABLE . ' p, ' . USERS_TABLE . ' u, ' . USERS_TABLE . ' ru						WHERE ' . $db->sql_in_set('r.report_id', $report_ids) . "							AND r.pm_id = p.msg_id							AND p.author_id = u.user_id							AND ru.user_id = r.user_id						ORDER BY $sort_order_sql";					$result = $db->sql_query($sql);					$pm_list = $pm_by_id = array();					while ($row = $db->sql_fetchrow($result))					{						$pm_by_id[(int) $row['msg_id']] = $row;						$pm_list[] = (int) $row['msg_id'];					}					$db->sql_freeresult($result);					if (sizeof($pm_list))					{						$address_list = get_recipient_strings($pm_by_id);						foreach ($pm_list as $message_id)						{							$row = $pm_by_id[$message_id];							$template->assign_block_vars('postrow', array(								'U_VIEW_DETAILS'			=> append_sid("{$phpbb_root_path}mcp.$phpEx", "i=pm_reports&amp;mode=pm_report_details&amp;r={$row['report_id']}"),								'PM_AUTHOR_FULL'		=> get_username_string('full', $row['author_id'], $row['username'], $row['user_colour']),								'PM_AUTHOR_COLOUR'		=> get_username_string('colour', $row['author_id'], $row['username'], $row['user_colour']),								'PM_AUTHOR'				=> get_username_string('username', $row['author_id'], $row['username'], $row['user_colour']),								'U_PM_AUTHOR'			=> get_username_string('profile', $row['author_id'], $row['username'], $row['user_colour']),								'REPORTER_FULL'			=> get_username_string('full', $row['reporter_id'], $row['reporter_name'], $row['reporter_colour']),								'REPORTER_COLOUR'		=> get_username_string('colour', $row['reporter_id'], $row['reporter_name'], $row['reporter_colour']),								'REPORTER'				=> get_username_string('username', $row['reporter_id'], $row['reporter_name'], $row['reporter_colour']),								'U_REPORTER'			=> get_username_string('profile', $row['reporter_id'], $row['reporter_name'], $row['reporter_colour']),								'PM_SUBJECT'			=> ($row['message_subject']) ? $row['message_subject'] : $user->lang['NO_SUBJECT'],								'PM_TIME'				=> $user->format_date($row['message_time']),								'REPORT_ID'				=> $row['report_id'],								'REPORT_TIME'			=> $user->format_date($row['report_time']),								'RECIPIENTS'			=> implode(', ', $address_list[$row['msg_id']]),							));						}					}				}				// Now display the page				$template->assign_vars(array(					'L_EXPLAIN'				=> ($mode == 'pm_reports') ? $user->lang['MCP_PM_REPORTS_OPEN_EXPLAIN'] : $user->lang['MCP_PM_REPORTS_CLOSED_EXPLAIN'],					'L_TITLE'				=> ($mode == 'pm_reports') ? $user->lang['MCP_PM_REPORTS_OPEN'] : $user->lang['MCP_PM_REPORTS_CLOSED'],										'S_PM'					=> true,					'S_MCP_ACTION'			=> $this->u_action,					'S_CLOSED'				=> ($mode == 'pm_reports_closed') ? true : false,					'PAGINATION'			=> generate_pagination($this->u_action . "&amp;st=$sort_days&amp;sk=$sort_key&amp;sd=$sort_dir", $total, $config['topics_per_page'], $start),					'PAGE_NUMBER'			=> on_page($total, $config['topics_per_page'], $start),					'TOTAL'					=> $total,					'TOTAL_REPORTS'			=> ($total == 1) ? $user->lang['LIST_REPORT'] : sprintf($user->lang['LIST_REPORTS'], $total),										)				);				$this->tpl_name = 'mcp_reports';			break;		}	}}?>
<?php return array(''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'1/2',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'');
<?php/**** @package phpBB3* @version $Id$* @copyright (c) 2007 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @ignore*/if (!defined('IN_PHPBB')){	exit;}/**** Jabber class from Flyspray project** @version class.jabber2.php 1595 2008-09-19 (0.9.9)* @copyright 2006 Flyspray.org* @author Florian Schmitz (floele)** Only slightly modified by Acyd Burn** @package phpBB3*/class jabber{	var $connection = null;	var $session = array();	var $timeout = 10;	var $server;	var $connect_server;	var $port;	var $username;	var $password;	var $use_ssl;	var $resource = 'functions_jabber.phpbb.php';	var $enable_logging;	var $log_array;	var $features = array();	/**	*/	function jabber($server, $port, $username, $password, $use_ssl = false)	{		$this->connect_server		= ($server) ? $server : 'localhost';		$this->port					= ($port) ? $port : 5222;		// Get the server and the username		if (strpos($username, '@') === false)		{			$this->server = $this->connect_server;			$this->username = $username;		}		else		{			$jid = explode('@', $username, 2);			$this->username = $jid[0];			$this->server = $jid[1];		}		$this->password				= $password;		$this->use_ssl				= ($use_ssl && $this->can_use_ssl()) ? true : false;		// Change port if we use SSL		if ($this->port == 5222 && $this->use_ssl)		{			$this->port = 5223;		}		$this->enable_logging		= true;		$this->log_array			= array();	}	/**	* Able to use the SSL functionality?	*/	function can_use_ssl()	{		// Will not work with PHP >= 5.2.1 or < 5.2.3RC2 until timeout problem with ssl hasn't been fixed (http://bugs.php.net/41236)		return ((version_compare(PHP_VERSION, '5.2.1', '<') || version_compare(PHP_VERSION, '5.2.3RC2', '>=')) && @extension_loaded('openssl')) ? true : false;	}	/**	* Able to use TLS?	*/	function can_use_tls()	{		if (!@extension_loaded('openssl') || !function_exists('stream_socket_enable_crypto') || !function_exists('stream_get_meta_data') || !function_exists('socket_set_blocking') || !function_exists('stream_get_wrappers'))		{			return false;		}		/**		* Make sure the encryption stream is supported		* Also seem to work without the crypto stream if correctly compiled		$streams = stream_get_wrappers();		if (!in_array('streams.crypto', $streams))		{			return false;		}		*/		return true;	}	/**	* Sets the resource which is used. No validation is done here, only escaping.	* @param string $name	* @access public	*/	function set_resource($name)	{		$this->resource = $name;	}	/**	* Connect	*/	function connect()	{/*		if (!$this->check_jid($this->username . '@' . $this->server))		{			$this->add_to_log('Error: Jabber ID is not valid: ' . $this->username . '@' . $this->server);			return false;		}*/		$this->session['ssl'] = $this->use_ssl;		if ($this->open_socket($this->connect_server, $this->port, $this->use_ssl))		{			$this->send("<?xml version='1.0' encoding='UTF-8' ?" . ">\n");			$this->send("<stream:stream to='{$this->server}' xmlns='jabber:client' xmlns:stream='http://etherx.jabber.org/streams' version='1.0'>\n");		}		else		{			$this->add_to_log('Error: connect() #2');			return false;		}		// Now we listen what the server has to say...and give appropriate responses		$this->response($this->listen());		return true;	}	/**	* Disconnect	*/	function disconnect()	{		if ($this->connected())		{			// disconnect gracefully			if (isset($this->session['sent_presence']))			{				$this->send_presence('offline', '', true);			}			$this->send('</stream:stream>');			$this->session = array();			return fclose($this->connection);		}		return false;	}	/**	* Connected?	*/	function connected()	{		return (is_resource($this->connection) && !feof($this->connection)) ? true : false;	}	/**	* Initiates login (using data from contructor, after calling connect())	* @access public	* @return bool	*/	function login()	{		if (!sizeof($this->features))		{			$this->add_to_log('Error: No feature information from server available.');			return false;		}		return $this->response($this->features);	}	/**	* Send data to the Jabber server	* @param string $xml	* @access public	* @return bool	*/	function send($xml)	{		if ($this->connected())		{			$xml = trim($xml);			$this->add_to_log('SEND: '. $xml);			return fwrite($this->connection, $xml);		}		else		{			$this->add_to_log('Error: Could not send, connection lost (flood?).');			return false;		}	}	/**	* OpenSocket	* @param string $server host to connect to	* @param int $port port number	* @param bool $use_ssl use ssl or not	* @access public	* @return bool	*/	function open_socket($server, $port, $use_ssl = false)	{		if (@function_exists('dns_get_record'))		{			$record = @dns_get_record("_xmpp-client._tcp.$server", DNS_SRV);			if (!empty($record) && !empty($record[0]['target']))			{				$server = $record[0]['target'];			}		}		$server = $use_ssl ? 'ssl://' . $server : $server;		if ($this->connection = @fsockopen($server, $port, $errorno, $errorstr, $this->timeout))		{			socket_set_blocking($this->connection, 0);			socket_set_timeout($this->connection, 60);			return true;		}		// Apparently an error occured...		$this->add_to_log('Error: open_socket() - ' . $errorstr);		return false;	}	/**	* Return log	*/	function get_log()	{		if ($this->enable_logging && sizeof($this->log_array))		{			return implode("<br /><br />", $this->log_array);		}		return '';	}	/**	* Add information to log	*/	function add_to_log($string)	{		if ($this->enable_logging)		{			$this->log_array[] = utf8_htmlspecialchars($string);		}	}	/**	* Listens to the connection until it gets data or the timeout is reached.	* Thus, it should only be called if data is expected to be received.	* @access public	* @return mixed either false for timeout or an array with the received data	*/	function listen($timeout = 10, $wait = false)	{		if (!$this->connected())		{			return false;		}		// Wait for a response until timeout is reached		$start = time();		$data = '';		do		{			$read = trim(fread($this->connection, 4096));			$data .= $read;		}		while (time() <= $start + $timeout && !feof($this->connection) && ($wait || $data == '' || $read != '' || (substr(rtrim($data), -1) != '>')));		if ($data != '')		{			$this->add_to_log('RECV: '. $data);			return $this->xmlize($data);		}		else		{			$this->add_to_log('Timeout, no response from server.');			return false;		}	}	/**	* Initiates account registration (based on data used for contructor)	* @access public	* @return bool	*/	function register()	{		if (!isset($this->session['id']) || isset($this->session['jid']))		{			$this->add_to_log('Error: Cannot initiate registration.');			return false;		}		$this->send("<iq type='get' id='reg_1'><query xmlns='jabber:iq:register'/></iq>");		return $this->response($this->listen());	}	/**	* Sets account presence. No additional info required (default is "online" status)	* @param $message online, offline...	* @param $type dnd, away, chat, xa or nothing	* @param $unavailable set this to true if you want to become unavailable	* @access public	* @return bool	*/	function send_presence($message = '', $type = '', $unavailable = false)	{		if (!isset($this->session['jid']))		{			$this->add_to_log('ERROR: send_presence() - Cannot set presence at this point, no jid given.');			return false;		}		$type = strtolower($type);		$type = (in_array($type, array('dnd', 'away', 'chat', 'xa'))) ? '<show>'. $type .'</show>' : '';		$unavailable = ($unavailable) ? " type='unavailable'" : '';		$message = ($message) ? '<status>' . utf8_htmlspecialchars($message) .'</status>' : '';		$this->session['sent_presence'] = !$unavailable;		return $this->send("<presence$unavailable>" . $type . $message . '</presence>');	}	/**	* This handles all the different XML elements	* @param array $xml	* @access public	* @return bool	*/	function response($xml)	{		if (!is_array($xml) || !sizeof($xml))		{			return false;		}		// did we get multiple elements? do one after another		// array('message' => ..., 'presence' => ...)		if (sizeof($xml) > 1)		{			foreach ($xml as $key => $value)			{				$this->response(array($key => $value));			}			return;		}		else		{			// or even multiple elements of the same type?			// array('message' => array(0 => ..., 1 => ...))			if (sizeof(reset($xml)) > 1)			{				foreach (reset($xml) as $value)				{					$this->response(array(key($xml) => array(0 => $value)));				}				return;			}		}		switch (key($xml))		{			case 'stream:stream':				// Connection initialised (or after authentication). Not much to do here...				if (isset($xml['stream:stream'][0]['#']['stream:features']))				{					// we already got all info we need					$this->features = $xml['stream:stream'][0]['#'];				}				else				{					$this->features = $this->listen();				}				$second_time = isset($this->session['id']);				$this->session['id'] = $xml['stream:stream'][0]['@']['id'];				if ($second_time)				{					// If we are here for the second time after TLS, we need to continue logging in					return $this->login();				}				// go on with authentication?				if (isset($this->features['stream:features'][0]['#']['bind']) || !empty($this->session['tls']))				{					return $this->response($this->features);				}			break;			case 'stream:features':				// Resource binding after successful authentication				if (isset($this->session['authenticated']))				{					// session required?					$this->session['sess_required'] = isset($xml['stream:features'][0]['#']['session']);					$this->send("<iq type='set' id='bind_1'>						<bind xmlns='urn:ietf:params:xml:ns:xmpp-bind'>							<resource>" . utf8_htmlspecialchars($this->resource) . '</resource>						</bind>					</iq>');					return $this->response($this->listen());				}				// Let's use TLS if SSL is not enabled and we can actually use it				if (!$this->session['ssl'] && $this->can_use_tls() && $this->can_use_ssl() && isset($xml['stream:features'][0]['#']['starttls']))				{					$this->add_to_log('Switching to TLS.');					$this->send("<starttls xmlns='urn:ietf:params:xml:ns:xmpp-tls'/>\n");					return $this->response($this->listen());				}				// Does the server support SASL authentication?				// I hope so, because we do (and no other method).				if (isset($xml['stream:features'][0]['#']['mechanisms'][0]['@']['xmlns']) && $xml['stream:features'][0]['#']['mechanisms'][0]['@']['xmlns'] == 'urn:ietf:params:xml:ns:xmpp-sasl')				{					// Now decide on method					$methods = array();					foreach ($xml['stream:features'][0]['#']['mechanisms'][0]['#']['mechanism'] as $value)					{						$methods[] = $value['#'];					}					// we prefer DIGEST-MD5					// we don't want to use plain authentication (neither does the server usually) if no encryption is in place					// http://www.xmpp.org/extensions/attic/jep-0078-1.7.html					// The plaintext mechanism SHOULD NOT be used unless the underlying stream is encrypted (using SSL or TLS)					// and the client has verified that the server certificate is signed by a trusted certificate authority.					if (in_array('DIGEST-MD5', $methods))					{						$this->send("<auth xmlns='urn:ietf:params:xml:ns:xmpp-sasl' mechanism='DIGEST-MD5'/>");					}					else if (in_array('PLAIN', $methods) && ($this->session['ssl'] || !empty($this->session['tls'])))					{						// http://www.ietf.org/rfc/rfc4616.txt (PLAIN SASL Mechanism)						$this->send("<auth xmlns='urn:ietf:params:xml:ns:xmpp-sasl' mechanism='PLAIN'>"							. base64_encode($this->username . '@' . $this->server . chr(0) . $this->username . chr(0) . $this->password) .							'</auth>');					}					else if (in_array('ANONYMOUS', $methods))					{						$this->send("<auth xmlns='urn:ietf:params:xml:ns:xmpp-sasl' mechanism='ANONYMOUS'/>");					}					else					{						// not good...						$this->add_to_log('Error: No authentication method supported.');						$this->disconnect();						return false;					}					return $this->response($this->listen());				}				else				{					// ok, this is it. bye.					$this->add_to_log('Error: Server does not offer SASL authentication.');					$this->disconnect();					return false;				}			break;			case 'challenge':				// continue with authentication...a challenge literally -_-				$decoded = base64_decode($xml['challenge'][0]['#']);				$decoded = $this->parse_data($decoded);				if (!isset($decoded['digest-uri']))				{					$decoded['digest-uri'] = 'xmpp/'. $this->server;				}				// better generate a cnonce, maybe it's needed				$decoded['cnonce'] = base64_encode(md5(uniqid(mt_rand(), true)));				// second challenge?				if (isset($decoded['rspauth']))				{					$this->send("<response xmlns='urn:ietf:params:xml:ns:xmpp-sasl'/>");				}				else				{					// Make sure we only use 'auth' for qop (relevant for $this->encrypt_password())					// If the <response> is choking up on the changed parameter we may need to adjust encrypt_password() directly					if (isset($decoded['qop']) && $decoded['qop'] != 'auth' && strpos($decoded['qop'], 'auth') !== false)					{						$decoded['qop'] = 'auth';					}					$response = array(						'username'	=> $this->username,						'response'	=> $this->encrypt_password(array_merge($decoded, array('nc' => '00000001'))),						'charset'	=> 'utf-8',						'nc'		=> '00000001',						'qop'		=> 'auth',			// only auth being supported					);					foreach (array('nonce', 'digest-uri', 'realm', 'cnonce') as $key)					{						if (isset($decoded[$key]))						{							$response[$key] = $decoded[$key];						}					}					$this->send("<response xmlns='urn:ietf:params:xml:ns:xmpp-sasl'>" . base64_encode($this->implode_data($response)) . '</response>');				}				return $this->response($this->listen());			break;			case 'failure':				$this->add_to_log('Error: Server sent "failure".');				$this->disconnect();				return false;			break;			case 'proceed':				// continue switching to TLS				$meta = stream_get_meta_data($this->connection);				socket_set_blocking($this->connection, 1);				if (!stream_socket_enable_crypto($this->connection, true, STREAM_CRYPTO_METHOD_TLS_CLIENT))				{					$this->add_to_log('Error: TLS mode change failed.');					return false;				}				socket_set_blocking($this->connection, $meta['blocked']);				$this->session['tls'] = true;				// new stream				$this->send("<?xml version='1.0' encoding='UTF-8' ?" . ">\n");				$this->send("<stream:stream to='{$this->server}' xmlns='jabber:client' xmlns:stream='http://etherx.jabber.org/streams' version='1.0'>\n");				return $this->response($this->listen());			break;			case 'success':				// Yay, authentication successful.				$this->send("<stream:stream to='{$this->server}' xmlns='jabber:client' xmlns:stream='http://etherx.jabber.org/streams' version='1.0'>\n");				$this->session['authenticated'] = true;				// we have to wait for another response				return $this->response($this->listen());			break;			case 'iq':				// we are not interested in IQs we did not expect				if (!isset($xml['iq'][0]['@']['id']))				{					return false;				}				// multiple possibilities here				switch ($xml['iq'][0]['@']['id'])				{					case 'bind_1':						$this->session['jid'] = $xml['iq'][0]['#']['bind'][0]['#']['jid'][0]['#'];						// and (maybe) yet another request to be able to send messages *finally*						if ($this->session['sess_required'])						{							$this->send("<iq to='{$this->server}' type='set' id='sess_1'>								<session xmlns='urn:ietf:params:xml:ns:xmpp-session'/>								</iq>");							return $this->response($this->listen());						}						return true;					break;					case 'sess_1':						return true;					break;					case 'reg_1':						$this->send("<iq type='set' id='reg_2'>								<query xmlns='jabber:iq:register'>									<username>" . utf8_htmlspecialchars($this->username) . "</username>									<password>" . utf8_htmlspecialchars($this->password) . "</password>								</query>							</iq>");						return $this->response($this->listen());					break;					case 'reg_2':						// registration end						if (isset($xml['iq'][0]['#']['error']))						{							$this->add_to_log('Warning: Registration failed.');							return false;						}						return true;					break;					case 'unreg_1':						return true;					break;					default:						$this->add_to_log('Notice: Received unexpected IQ.');						return false;					break;				}			break;			case 'message':				// we are only interested in content...				if (!isset($xml['message'][0]['#']['body']))				{					return false;				}				$message['body'] = $xml['message'][0]['#']['body'][0]['#'];				$message['from'] = $xml['message'][0]['@']['from'];				if (isset($xml['message'][0]['#']['subject']))				{					$message['subject'] = $xml['message'][0]['#']['subject'][0]['#'];				}				$this->session['messages'][] = $message;			break;			default:				// hm...don't know this response				$this->add_to_log('Notice: Unknown server response (' . key($xml) . ')');				return false;			break;		}	}	function send_message($to, $text, $subject = '', $type = 'normal')	{		if (!isset($this->session['jid']))		{			return false;		}		if (!in_array($type, array('chat', 'normal', 'error', 'groupchat', 'headline')))		{			$type = 'normal';		}		return $this->send("<message from='" . utf8_htmlspecialchars($this->session['jid']) . "' to='" . utf8_htmlspecialchars($to) . "' type='$type' id='" . uniqid('msg') . "'>			<subject>" . utf8_htmlspecialchars($subject) . "</subject>			<body>" . utf8_htmlspecialchars($text) . "</body>			</message>"		);	}	/**	* Encrypts a password as in RFC 2831	* @param array $data Needs data from the client-server connection	* @access public	* @return string	*/	function encrypt_password($data)	{		// let's me think about <challenge> again...		foreach (array('realm', 'cnonce', 'digest-uri') as $key)		{			if (!isset($data[$key]))			{				$data[$key] = '';			}		}		$pack = md5($this->username . ':' . $data['realm'] . ':' . $this->password);		if (isset($data['authzid']))		{			$a1 = pack('H32', $pack)  . sprintf(':%s:%s:%s', $data['nonce'], $data['cnonce'], $data['authzid']);		}		else		{			$a1 = pack('H32', $pack)  . sprintf(':%s:%s', $data['nonce'], $data['cnonce']);		}		// should be: qop = auth		$a2 = 'AUTHENTICATE:'. $data['digest-uri'];		return md5(sprintf('%s:%s:%s:%s:%s:%s', md5($a1), $data['nonce'], $data['nc'], $data['cnonce'], $data['qop'], md5($a2)));	}	/**	* parse_data like a="b",c="d",... or like a="a, b", c, d="e", f=g,...	* @param string $data	* @access public	* @return array a => b ...	*/	function parse_data($data)	{		$data = explode(',', $data);		$pairs = array();		$key = false;		foreach ($data as $pair)		{			$dd = strpos($pair, '=');			if ($dd)			{				$key = trim(substr($pair, 0, $dd));				$pairs[$key] = trim(trim(substr($pair, $dd + 1)), '"');			}			else if (strpos(strrev(trim($pair)), '"') === 0 && $key)			{				// We are actually having something left from "a, b" values, add it to the last one we handled.				$pairs[$key] .= ',' . trim(trim($pair), '"');				continue;			}		}		return $pairs;	}	/**	* opposite of jabber::parse_data()	* @param array $data	* @access public	* @return string	*/	function implode_data($data)	{		$return = array();		foreach ($data as $key => $value)		{			$return[] = $key . '="' . $value . '"';		}		return implode(',', $return);	}	/**	* xmlize()	* @author Hans Anderson	* @copyright Hans Anderson / http://www.hansanderson.com/php/xml/	*/	function xmlize($data, $skip_white = 1, $encoding = 'UTF-8')	{		$data = trim($data);		if (substr($data, 0, 5) != '<?xml')		{			// mod			$data = '<root>'. $data . '</root>';		}		$vals = $index = $array = array();		$parser = xml_parser_create($encoding);		xml_parser_set_option($parser, XML_OPTION_CASE_FOLDING, 0);		xml_parser_set_option($parser, XML_OPTION_SKIP_WHITE, $skip_white);		xml_parse_into_struct($parser, $data, $vals, $index);		xml_parser_free($parser);		$i = 0;		$tagname = $vals[$i]['tag'];		$array[$tagname][0]['@'] = (isset($vals[$i]['attributes'])) ? $vals[$i]['attributes'] : array();		$array[$tagname][0]['#'] = $this->_xml_depth($vals, $i);		if (substr($data, 0, 5) != '<?xml')		{			$array = $array['root'][0]['#'];		}		return $array;	}	/**	* _xml_depth()	* @author Hans Anderson	* @copyright Hans Anderson / http://www.hansanderson.com/php/xml/	*/	function _xml_depth($vals, &$i)	{		$children = array();		if (isset($vals[$i]['value']))		{			array_push($children, $vals[$i]['value']);		}		while (++$i < sizeof($vals))		{			switch ($vals[$i]['type'])			{				case 'open':					$tagname = (isset($vals[$i]['tag'])) ? $vals[$i]['tag'] : '';					$size = (isset($children[$tagname])) ? sizeof($children[$tagname]) : 0;					if (isset($vals[$i]['attributes']))					{						$children[$tagname][$size]['@'] = $vals[$i]['attributes'];					}					$children[$tagname][$size]['#'] = $this->_xml_depth($vals, $i);				break;				case 'cdata':					array_push($children, $vals[$i]['value']);				break;				case 'complete':					$tagname = $vals[$i]['tag'];					$size = (isset($children[$tagname])) ? sizeof($children[$tagname]) : 0;					$children[$tagname][$size]['#'] = (isset($vals[$i]['value'])) ? $vals[$i]['value'] : array();					if (isset($vals[$i]['attributes']))					{						$children[$tagname][$size]['@'] = $vals[$i]['attributes'];					}				break;				case 'close':					return $children;				break;			}		}		return $children;	}}?>
<?php return array(''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'');
<?php/**** @package acm* @version $Id$* @copyright (c) 2005, 2009 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @ignore*/if (!defined('IN_PHPBB')){	exit;}/*** ACM File Based Caching* @package acm*/class acm{	var $vars = array();	var $var_expires = array();	var $is_modified = false;	var $sql_rowset = array();	var $sql_row_pointer = array();	var $cache_dir = '';	/**	* Set cache path	*/	function acm()	{		global $phpbb_root_path;		$this->cache_dir = $phpbb_root_path . 'cache/';	}	/**	* Load global cache	*/	function load()	{		return $this->_read('data_global');	}	/**	* Unload cache object	*/	function unload()	{		$this->save();		unset($this->vars);		unset($this->var_expires);		unset($this->sql_rowset);		unset($this->sql_row_pointer);		$this->vars = array();		$this->var_expires = array();		$this->sql_rowset = array();		$this->sql_row_pointer = array();	}	/**	* Save modified objects	*/	function save()	{		if (!$this->is_modified)		{			return;		}		global $phpEx;		if (!$this->_write('data_global'))		{			if (!function_exists('phpbb_is_writable'))			{				global $phpbb_root_path;				include($phpbb_root_path . 'includes/functions.' . $phpEx);			}			// Now, this occurred how often? ... phew, just tell the user then...			if (!phpbb_is_writable($this->cache_dir))			{				// We need to use die() here, because else we may encounter an infinite loop (the message handler calls $cache->unload())				die('Fatal: ' . $this->cache_dir . ' is NOT writable.');				exit;			}			die('Fatal: Not able to open ' . $this->cache_dir . 'data_global.' . $phpEx);			exit;		}		$this->is_modified = false;	}	/**	* Tidy cache	*/	function tidy()	{		global $phpEx;		$dir = @opendir($this->cache_dir);		if (!$dir)		{			return;		}		$time = time();		while (($entry = readdir($dir)) !== false)		{			if (!preg_match('/^(sql_|data_(?!global))/', $entry))			{				continue;			}			if (!($handle = @fopen($this->cache_dir . $entry, 'rb')))			{				continue;			}			// Skip the PHP header			fgets($handle);			// Skip expiration			$expires = (int) fgets($handle);			fclose($handle);			if ($time >= $expires)			{				$this->remove_file($this->cache_dir . $entry);			}		}		closedir($dir);		if (file_exists($this->cache_dir . 'data_global.' . $phpEx))		{			if (!sizeof($this->vars))			{				$this->load();			}			foreach ($this->var_expires as $var_name => $expires)			{				if ($time >= $expires)				{					$this->destroy($var_name);				}			}		}		set_config('cache_last_gc', time(), true);	}	/**	* Get saved cache object	*/	function get($var_name)	{		if ($var_name[0] == '_')		{			global $phpEx;			if (!$this->_exists($var_name))			{				return false;			}			return $this->_read('data' . $var_name);		}		else		{			return ($this->_exists($var_name)) ? $this->vars[$var_name] : false;		}	}	/**	* Put data into cache	*/	function put($var_name, $var, $ttl = 31536000)	{		if ($var_name[0] == '_')		{			$this->_write('data' . $var_name, $var, time() + $ttl);		}		else		{			$this->vars[$var_name] = $var;			$this->var_expires[$var_name] = time() + $ttl;			$this->is_modified = true;		}	}	/**	* Purge cache data	*/	function purge()	{		// Purge all phpbb cache files		$dir = @opendir($this->cache_dir);		if (!$dir)		{			return;		}		while (($entry = readdir($dir)) !== false)		{			if (strpos($entry, 'sql_') !== 0 && strpos($entry, 'data_') !== 0 && strpos($entry, 'ctpl_') !== 0 && strpos($entry, 'tpl_') !== 0)			{				continue;			}			$this->remove_file($this->cache_dir . $entry);		}		closedir($dir);		unset($this->vars);		unset($this->var_expires);		unset($this->sql_rowset);		unset($this->sql_row_pointer);		$this->vars = array();		$this->var_expires = array();		$this->sql_rowset = array();		$this->sql_row_pointer = array();		$this->is_modified = false;	}	/**	* Destroy cache data	*/	function destroy($var_name, $table = '')	{		global $phpEx;		if ($var_name == 'sql' && !empty($table))		{			if (!is_array($table))			{				$table = array($table);			}			$dir = @opendir($this->cache_dir);			if (!$dir)			{				return;			}			while (($entry = readdir($dir)) !== false)			{				if (strpos($entry, 'sql_') !== 0)				{					continue;				}				if (!($handle = @fopen($this->cache_dir . $entry, 'rb')))				{					continue;				}				// Skip the PHP header				fgets($handle);				// Skip expiration				fgets($handle);				// Grab the query, remove the LF				$query = substr(fgets($handle), 0, -1);				fclose($handle);				foreach ($table as $check_table)				{					// Better catch partial table names than no table names. ;)					if (strpos($query, $check_table) !== false)					{						$this->remove_file($this->cache_dir . $entry);						break;					}				}			}			closedir($dir);			return;		}		if (!$this->_exists($var_name))		{			return;		}		if ($var_name[0] == '_')		{			$this->remove_file($this->cache_dir . 'data' . $var_name . ".$phpEx", true);		}		else if (isset($this->vars[$var_name]))		{			$this->is_modified = true;			unset($this->vars[$var_name]);			unset($this->var_expires[$var_name]);			// We save here to let the following cache hits succeed			$this->save();		}	}	/**	* Check if a given cache entry exist	*/	function _exists($var_name)	{		if ($var_name[0] == '_')		{			global $phpEx;			return file_exists($this->cache_dir . 'data' . $var_name . ".$phpEx");		}		else		{			if (!sizeof($this->vars))			{				$this->load();			}			if (!isset($this->var_expires[$var_name]))			{				return false;			}			return (time() > $this->var_expires[$var_name]) ? false : isset($this->vars[$var_name]);		}	}	/**	* Load cached sql query	*/	function sql_load($query)	{		// Remove extra spaces and tabs		$query = preg_replace('/[\n\r\s\t]+/', ' ', $query);		if (($rowset = $this->_read('sql_' . md5($query))) === false)		{			return false;		}		$query_id = sizeof($this->sql_rowset);		$this->sql_rowset[$query_id] = $rowset;		$this->sql_row_pointer[$query_id] = 0;		return $query_id;	}	/**	* Save sql query	*/	function sql_save($query, &$query_result, $ttl)	{		global $db;		// Remove extra spaces and tabs		$query = preg_replace('/[\n\r\s\t]+/', ' ', $query);		$query_id = sizeof($this->sql_rowset);		$this->sql_rowset[$query_id] = array();		$this->sql_row_pointer[$query_id] = 0;		while ($row = $db->sql_fetchrow($query_result))		{			$this->sql_rowset[$query_id][] = $row;		}		$db->sql_freeresult($query_result);		if ($this->_write('sql_' . md5($query), $this->sql_rowset[$query_id], $ttl + time(), $query))		{			$query_result = $query_id;		}	}	/**	* Ceck if a given sql query exist in cache	*/	function sql_exists($query_id)	{		return isset($this->sql_rowset[$query_id]);	}	/**	* Fetch row from cache (database)	*/	function sql_fetchrow($query_id)	{		if ($this->sql_row_pointer[$query_id] < sizeof($this->sql_rowset[$query_id]))		{			return $this->sql_rowset[$query_id][$this->sql_row_pointer[$query_id]++];		}		return false;	}	/**	* Fetch a field from the current row of a cached database result (database)	*/	function sql_fetchfield($query_id, $field)	{		if ($this->sql_row_pointer[$query_id] < sizeof($this->sql_rowset[$query_id]))		{			return (isset($this->sql_rowset[$query_id][$this->sql_row_pointer[$query_id]][$field])) ? $this->sql_rowset[$query_id][$this->sql_row_pointer[$query_id]++][$field] : false;		}		return false;	}	/**	* Seek a specific row in an a cached database result (database)	*/	function sql_rowseek($rownum, $query_id)	{		if ($rownum >= sizeof($this->sql_rowset[$query_id]))		{			return false;		}		$this->sql_row_pointer[$query_id] = $rownum;		return true;	}	/**	* Free memory used for a cached database result (database)	*/	function sql_freeresult($query_id)	{		if (!isset($this->sql_rowset[$query_id]))		{			return false;		}		unset($this->sql_rowset[$query_id]);		unset($this->sql_row_pointer[$query_id]);		return true;	}	/**	* Read cached data from a specified file	*	* @access private	* @param string $filename Filename to write	* @return mixed False if an error was encountered, otherwise the data type of the cached data	*/	function _read($filename)	{		global $phpEx;		$file = "{$this->cache_dir}$filename.$phpEx";		$type = substr($filename, 0, strpos($filename, '_'));		if (!file_exists($file))		{			return false;		}		if (!($handle = @fopen($file, 'rb')))		{			return false;		}		// Skip the PHP header		fgets($handle);		if ($filename == 'data_global')		{			$this->vars = $this->var_expires = array();			$time = time();			while (($expires = (int) fgets($handle)) && !feof($handle))			{				// Number of bytes of data				$bytes = substr(fgets($handle), 0, -1);				if (!is_numeric($bytes) || ($bytes = (int) $bytes) === 0)				{					// We cannot process the file without a valid number of bytes					// so we discard it					fclose($handle);					$this->vars = $this->var_expires = array();					$this->is_modified = false;					$this->remove_file($file);					return false;				}				if ($time >= $expires)				{					fseek($handle, $bytes, SEEK_CUR);					continue;				}				$var_name = substr(fgets($handle), 0, -1);				// Read the length of bytes that consists of data.				$data = fread($handle, $bytes - strlen($var_name));				$data = @unserialize($data);				// Don't use the data if it was invalid				if ($data !== false)				{					$this->vars[$var_name] = $data;					$this->var_expires[$var_name] = $expires;				}				// Absorb the LF				fgets($handle);			}			fclose($handle);			$this->is_modified = false;			return true;		}		else		{			$data = false;			$line = 0;			while (($buffer = fgets($handle)) && !feof($handle))			{				$buffer = substr($buffer, 0, -1); // Remove the LF				// $buffer is only used to read integers				// if it is non numeric we have an invalid				// cache file, which we will now remove.				if (!is_numeric($buffer))				{					break;				}				if ($line == 0)				{					$expires = (int) $buffer;					if (time() >= $expires)					{						break;					}					if ($type == 'sql')					{						// Skip the query						fgets($handle);					}				}				else if ($line == 1)				{					$bytes = (int) $buffer;					// Never should have 0 bytes					if (!$bytes)					{						break;					}					// Grab the serialized data					$data = fread($handle, $bytes);					// Read 1 byte, to trigger EOF					fread($handle, 1);					if (!feof($handle))					{						// Somebody tampered with our data						$data = false;					}					break;				}				else				{					// Something went wrong					break;				}				$line++;			}			fclose($handle);			// unserialize if we got some data			$data = ($data !== false) ? @unserialize($data) : $data;			if ($data === false)			{				$this->remove_file($file);				return false;			}			return $data;		}	}	/**	* Write cache data to a specified file	*	* 'data_global' is a special case and the generated format is different for this file:	* <code>	* <?php exit; ?>	* (expiration)	* (length of var and serialised data)	* (var)	* (serialised data)	* ... (repeat)	* </code>	*	* The other files have a similar format:	* <code>	* <?php exit; ?>	* (expiration)	* (query) [SQL files only]	* (length of serialised data)	* (serialised data)	* </code>	*	* @access private	* @param string $filename Filename to write	* @param mixed $data Data to store	* @param int $expires Timestamp when the data expires	* @param string $query Query when caching SQL queries	* @return bool True if the file was successfully created, otherwise false	*/	function _write($filename, $data = null, $expires = 0, $query = '')	{		global $phpEx;		$file = "{$this->cache_dir}$filename.$phpEx";		if ($handle = @fopen($file, 'wb'))		{			@flock($handle, LOCK_EX);			// File header			fwrite($handle, '<' . '?php exit; ?' . '>');			if ($filename == 'data_global')			{				// Global data is a different format				foreach ($this->vars as $var => $data)				{					if (strpos($var, "\r") !== false || strpos($var, "\n") !== false)					{						// CR/LF would cause fgets() to read the cache file incorrectly						// do not cache test entries, they probably won't be read back						// the cache keys should really be alphanumeric with a few symbols.						continue;					}					$data = serialize($data);					// Write out the expiration time					fwrite($handle, "\n" . $this->var_expires[$var] . "\n");					// Length of the remaining data for this var (ignoring two LF's)					fwrite($handle, strlen($data . $var) . "\n");					fwrite($handle, $var . "\n");					fwrite($handle, $data);				}			}			else			{				fwrite($handle, "\n" . $expires . "\n");				if (strpos($filename, 'sql_') === 0)				{					fwrite($handle, $query . "\n");				}				$data = serialize($data);				fwrite($handle, strlen($data) . "\n");				fwrite($handle, $data);			}			@flock($handle, LOCK_UN);			fclose($handle);			if (!function_exists('phpbb_chmod'))			{				global $phpbb_root_path;				include($phpbb_root_path . 'includes/functions.' . $phpEx);			}			phpbb_chmod($file, CHMOD_READ | CHMOD_WRITE);			return true;		}		return false;	}	/**	* Removes/unlinks file	*/	function remove_file($filename, $check = false)	{		if (!function_exists('phpbb_is_writable'))		{			global $phpbb_root_path, $phpEx;			include($phpbb_root_path . 'includes/functions.' . $phpEx);		}		if ($check && !phpbb_is_writable($this->cache_dir))		{			// E_USER_ERROR - not using language entry - intended.			trigger_error('Unable to remove files within ' . $this->cache_dir . '. Please check directory permissions.', E_USER_ERROR);		}		return @unlink($filename);	}}?>
<?php/*** Database auth plug-in for phpBB3** Authentication plug-ins is largely down to Sergey Kanareykin, our thanks to him.** This is for authentication via the integrated user table** @package login* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @ignore*/if (!defined('IN_PHPBB')){	exit;}/*** Login function** @param string $username* @param string $password* @param string $ip			IP address the login is taking place from. Used to*							limit the number of login attempts per IP address.* @param string $browser	The user agent used to login* @param string $forwarded_for X_FORWARDED_FOR header sent with login request* @return array				A associative array of the format*							array(*								'status' => status constant*								'error_msg' => string*								'user_row' => array*							)*/function login_db($username, $password, $ip = '', $browser = '', $forwarded_for = ''){	global $db, $config;	// do not allow empty password	if (!$password)	{		return array(			'status'	=> LOGIN_ERROR_PASSWORD,			'error_msg'	=> 'NO_PASSWORD_SUPPLIED',			'user_row'	=> array('user_id' => ANONYMOUS),		);	}	if (!$username)	{		return array(			'status'	=> LOGIN_ERROR_USERNAME,			'error_msg'	=> 'LOGIN_ERROR_USERNAME',			'user_row'	=> array('user_id' => ANONYMOUS),		);	}	$username_clean = utf8_clean_string($username);	$sql = 'SELECT user_id, username, user_password, user_passchg, user_pass_convert, user_email, user_type, user_login_attempts		FROM ' . USERS_TABLE . "		WHERE username_clean = '" . $db->sql_escape($username_clean) . "'";	$result = $db->sql_query($sql);	$row = $db->sql_fetchrow($result);	$db->sql_freeresult($result);	if (($ip && !$config['ip_login_limit_use_forwarded']) ||		($forwarded_for && $config['ip_login_limit_use_forwarded']))	{		$sql = 'SELECT COUNT(*) AS attempts			FROM ' . LOGIN_ATTEMPT_TABLE . '			WHERE attempt_time > ' . (time() - (int) $config['ip_login_limit_time']);		if ($config['ip_login_limit_use_forwarded'])		{			$sql .= " AND attempt_forwarded_for = '" . $db->sql_escape($forwarded_for) . "'";		}		else		{			$sql .= " AND attempt_ip = '" . $db->sql_escape($ip) . "' ";		}		$result = $db->sql_query($sql);		$attempts = (int) $db->sql_fetchfield('attempts');		$db->sql_freeresult($result);		$attempt_data = array(			'attempt_ip'			=> $ip,			'attempt_browser'		=> trim(substr($browser, 0, 149)),			'attempt_forwarded_for'	=> $forwarded_for,			'attempt_time'			=> time(),			'user_id'				=> ($row) ? (int) $row['user_id'] : 0,			'username'				=> $username,			'username_clean'		=> $username_clean,		);		$sql = 'INSERT INTO ' . LOGIN_ATTEMPT_TABLE . $db->sql_build_array('INSERT', $attempt_data);		$result = $db->sql_query($sql);	}	else	{		$attempts = 0;	}	if (!$row)	{		if ($config['ip_login_limit_max'] && $attempts >= $config['ip_login_limit_max'])		{			return array(				'status'		=> LOGIN_ERROR_ATTEMPTS,				'error_msg'		=> 'LOGIN_ERROR_ATTEMPTS',				'user_row'		=> array('user_id' => ANONYMOUS),			);		}		return array(			'status'	=> LOGIN_ERROR_USERNAME,			'error_msg'	=> 'LOGIN_ERROR_USERNAME',			'user_row'	=> array('user_id' => ANONYMOUS),		);	}	$show_captcha = ($config['max_login_attempts'] && $row['user_login_attempts'] >= $config['max_login_attempts']) ||		($config['ip_login_limit_max'] && $attempts >= $config['ip_login_limit_max']);	// If there are too much login attempts, we need to check for an confirm image	// Every auth module is able to define what to do by itself...	if ($show_captcha)	{		// Visual Confirmation handling		if (!class_exists('phpbb_captcha_factory'))		{			global $phpbb_root_path, $phpEx;			include ($phpbb_root_path . 'includes/captcha/captcha_factory.' . $phpEx);		}		$captcha =& phpbb_captcha_factory::get_instance($config['captcha_plugin']);		$captcha->init(CONFIRM_LOGIN);		$vc_response = $captcha->validate($row);		if ($vc_response)		{			return array(				'status'		=> LOGIN_ERROR_ATTEMPTS,				'error_msg'		=> 'LOGIN_ERROR_ATTEMPTS',				'user_row'		=> $row,			);		}		else		{			$captcha->reset();		}	}	// If the password convert flag is set we need to convert it	if ($row['user_pass_convert'])	{		// in phpBB2 passwords were used exactly as they were sent, with addslashes applied		$password_old_format = isset($_REQUEST['password']) ? (string) $_REQUEST['password'] : '';		$password_old_format = (!STRIP) ? addslashes($password_old_format) : $password_old_format;		$password_new_format = '';		set_var($password_new_format, stripslashes($password_old_format), 'string');		if ($password == $password_new_format)		{			if (!function_exists('utf8_to_cp1252'))			{				global $phpbb_root_path, $phpEx;				include($phpbb_root_path . 'includes/utf/data/recode_basic.' . $phpEx);			}			// cp1252 is phpBB2's default encoding, characters outside ASCII range might work when converted into that encoding			// plain md5 support left in for conversions from other systems.			if ((strlen($row['user_password']) == 34 && (phpbb_check_hash(md5($password_old_format), $row['user_password']) || phpbb_check_hash(md5(utf8_to_cp1252($password_old_format)), $row['user_password'])))				|| (strlen($row['user_password']) == 32  && (md5($password_old_format) == $row['user_password'] || md5(utf8_to_cp1252($password_old_format)) == $row['user_password'])))			{				$hash = phpbb_hash($password_new_format);				// Update the password in the users table to the new format and remove user_pass_convert flag				$sql = 'UPDATE ' . USERS_TABLE . '					SET user_password = \'' . $db->sql_escape($hash) . '\',						user_pass_convert = 0					WHERE user_id = ' . $row['user_id'];				$db->sql_query($sql);				$row['user_pass_convert'] = 0;				$row['user_password'] = $hash;			}			else			{				// Although we weren't able to convert this password we have to				// increase login attempt count to make sure this cannot be exploited				$sql = 'UPDATE ' . USERS_TABLE . '					SET user_login_attempts = user_login_attempts + 1					WHERE user_id = ' . (int) $row['user_id'] . '						AND user_login_attempts < ' . LOGIN_ATTEMPTS_MAX;				$db->sql_query($sql);				return array(					'status'		=> LOGIN_ERROR_PASSWORD_CONVERT,					'error_msg'		=> 'LOGIN_ERROR_PASSWORD_CONVERT',					'user_row'		=> $row,				);			}		}	}	// Check password ...	if (!$row['user_pass_convert'] && phpbb_check_hash($password, $row['user_password']))	{		// Check for old password hash...		if (strlen($row['user_password']) == 32)		{			$hash = phpbb_hash($password);			// Update the password in the users table to the new format			$sql = 'UPDATE ' . USERS_TABLE . "				SET user_password = '" . $db->sql_escape($hash) . "',					user_pass_convert = 0				WHERE user_id = {$row['user_id']}";			$db->sql_query($sql);			$row['user_password'] = $hash;		}		$sql = 'DELETE FROM ' . LOGIN_ATTEMPT_TABLE . '			WHERE user_id = ' . $row['user_id'];		$db->sql_query($sql);		if ($row['user_login_attempts'] != 0)		{			// Successful, reset login attempts (the user passed all stages)			$sql = 'UPDATE ' . USERS_TABLE . '				SET user_login_attempts = 0				WHERE user_id = ' . $row['user_id'];			$db->sql_query($sql);		}		// User inactive...		if ($row['user_type'] == USER_INACTIVE || $row['user_type'] == USER_IGNORE)		{			return array(				'status'		=> LOGIN_ERROR_ACTIVE,				'error_msg'		=> 'ACTIVE_ERROR',				'user_row'		=> $row,			);		}		// Successful login... set user_login_attempts to zero...		return array(			'status'		=> LOGIN_SUCCESS,			'error_msg'		=> false,			'user_row'		=> $row,		);	}	// Password incorrect - increase login attempts	$sql = 'UPDATE ' . USERS_TABLE . '		SET user_login_attempts = user_login_attempts + 1		WHERE user_id = ' . (int) $row['user_id'] . '			AND user_login_attempts < ' . LOGIN_ATTEMPTS_MAX;	$db->sql_query($sql);	// Give status about wrong password...	return array(		'status'		=> ($show_captcha) ? LOGIN_ERROR_ATTEMPTS : LOGIN_ERROR_PASSWORD,		'error_msg'		=> ($show_captcha) ? 'LOGIN_ERROR_ATTEMPTS' : 'LOGIN_ERROR_PASSWORD',		'user_row'		=> $row,	);}?>
<?php/**** @package ucp* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @ignore*/if (!defined('IN_PHPBB')){	exit;}/*** View private message*/function view_message($id, $mode, $folder_id, $msg_id, $folder, $message_row){	global $user, $template, $auth, $db, $cache;	global $phpbb_root_path, $phpEx, $config;	$user->add_lang(array('viewtopic', 'memberlist'));	$msg_id		= (int) $msg_id;	$folder_id	= (int) $folder_id;	$author_id	= (int) $message_row['author_id'];	$view		= request_var('view', '');	// Not able to view message, it was deleted by the sender	if ($message_row['pm_deleted'])	{		$meta_info = append_sid("{$phpbb_root_path}ucp.$phpEx", "i=pm&amp;folder=$folder_id");		$message = $user->lang['NO_AUTH_READ_REMOVED_MESSAGE'];		$message .= '<br /><br />' . sprintf($user->lang['RETURN_FOLDER'], '<a href="' . $meta_info . '">', '</a>');		trigger_error($message);	}	// Do not allow hold messages to be seen	if ($folder_id == PRIVMSGS_HOLD_BOX)	{		trigger_error('NO_AUTH_READ_HOLD_MESSAGE');	}	// Grab icons	$icons = $cache->obtain_icons();	$bbcode = false;	// Instantiate BBCode if need be	if ($message_row['bbcode_bitfield'])	{		include($phpbb_root_path . 'includes/bbcode.' . $phpEx);		$bbcode = new bbcode($message_row['bbcode_bitfield']);	}	// Assign TO/BCC Addresses to template	write_pm_addresses(array('to' => $message_row['to_address'], 'bcc' => $message_row['bcc_address']), $author_id);	$user_info = get_user_information($author_id, $message_row);	// Parse the message and subject	$message = censor_text($message_row['message_text']);	// Second parse bbcode here	if ($message_row['bbcode_bitfield'])	{		$bbcode->bbcode_second_pass($message, $message_row['bbcode_uid'], $message_row['bbcode_bitfield']);	}	// Always process smilies after parsing bbcodes	$message = bbcode_nl2br($message);	$message = smiley_text($message);	// Replace naughty words such as farty pants	$message_row['message_subject'] = censor_text($message_row['message_subject']);	// Editing information	if ($message_row['message_edit_count'] && $config['display_last_edited'])	{		$l_edit_time_total = ($message_row['message_edit_count'] == 1) ? $user->lang['EDITED_TIME_TOTAL'] : $user->lang['EDITED_TIMES_TOTAL'];		$l_edited_by = '<br /><br />' . sprintf($l_edit_time_total, (!$message_row['message_edit_user']) ? $message_row['username'] : $message_row['message_edit_user'], $user->format_date($message_row['message_edit_time'], false, true), $message_row['message_edit_count']);	}	else	{		$l_edited_by = '';	}	// Pull attachment data	$display_notice = false;	$attachments = array();	if ($message_row['message_attachment'] && $config['allow_pm_attach'])	{		if ($auth->acl_get('u_pm_download'))		{			$sql = 'SELECT *				FROM ' . ATTACHMENTS_TABLE . "				WHERE post_msg_id = $msg_id					AND in_message = 1				ORDER BY filetime DESC, post_msg_id ASC";			$result = $db->sql_query($sql);			while ($row = $db->sql_fetchrow($result))			{				$attachments[] = $row;			}			$db->sql_freeresult($result);			// No attachments exist, but message table thinks they do so go ahead and reset attach flags			if (!sizeof($attachments))			{				$sql = 'UPDATE ' . PRIVMSGS_TABLE . "					SET message_attachment = 0					WHERE msg_id = $msg_id";				$db->sql_query($sql);			}		}		else		{			$display_notice = true;		}	}	// Assign inline attachments	if (!empty($attachments))	{		$update_count = array();		parse_attachments(false, $message, $attachments, $update_count);		// Update the attachment download counts		if (sizeof($update_count))		{			$sql = 'UPDATE ' . ATTACHMENTS_TABLE . '				SET download_count = download_count + 1				WHERE ' . $db->sql_in_set('attach_id', array_unique($update_count));			$db->sql_query($sql);		}	}	$user_info['sig'] = '';	$signature = ($message_row['enable_sig'] && $config['allow_sig'] && $auth->acl_get('u_sig') && $user->optionget('viewsigs')) ? $user_info['user_sig'] : '';	// End signature parsing, only if needed	if ($signature)	{		$signature = censor_text($signature);		if ($user_info['user_sig_bbcode_bitfield'])		{			if ($bbcode === false)			{				include($phpbb_root_path . 'includes/bbcode.' . $phpEx);				$bbcode = new bbcode($user_info['user_sig_bbcode_bitfield']);			}			$bbcode->bbcode_second_pass($signature, $user_info['user_sig_bbcode_uid'], $user_info['user_sig_bbcode_bitfield']);		}		$signature = bbcode_nl2br($signature);		$signature = smiley_text($signature);	}	$url = append_sid("{$phpbb_root_path}ucp.$phpEx", 'i=pm');	// Number of "to" recipients	$num_recipients = (int) preg_match_all('/:?(u|g)_([0-9]+):?/', $message_row['to_address'], $match);	$bbcode_status	= ($config['allow_bbcode'] && $config['auth_bbcode_pm'] && $auth->acl_get('u_pm_bbcode')) ? true : false;	$template->assign_vars(array(		'MESSAGE_AUTHOR_FULL'		=> get_username_string('full', $author_id, $user_info['username'], $user_info['user_colour'], $user_info['username']),		'MESSAGE_AUTHOR_COLOUR'		=> get_username_string('colour', $author_id, $user_info['username'], $user_info['user_colour'], $user_info['username']),		'MESSAGE_AUTHOR'			=> get_username_string('username', $author_id, $user_info['username'], $user_info['user_colour'], $user_info['username']),		'U_MESSAGE_AUTHOR'			=> get_username_string('profile', $author_id, $user_info['username'], $user_info['user_colour'], $user_info['username']),		'RANK_TITLE'		=> $user_info['rank_title'],		'RANK_IMG'			=> $user_info['rank_image'],		'AUTHOR_AVATAR'		=> (isset($user_info['avatar'])) ? $user_info['avatar'] : '',		'AUTHOR_JOINED'		=> $user->format_date($user_info['user_regdate']),		'AUTHOR_POSTS'		=> (int) $user_info['user_posts'],		'AUTHOR_FROM'		=> (!empty($user_info['user_from'])) ? $user_info['user_from'] : '',		'ONLINE_IMG'		=> (!$config['load_onlinetrack']) ? '' : ((isset($user_info['online']) && $user_info['online']) ? $user->img('icon_user_online', $user->lang['ONLINE']) : $user->img('icon_user_offline', $user->lang['OFFLINE'])),		'S_ONLINE'			=> (!$config['load_onlinetrack']) ? false : ((isset($user_info['online']) && $user_info['online']) ? true : false),		'DELETE_IMG'		=> $user->img('icon_post_delete', $user->lang['DELETE_MESSAGE']),		'INFO_IMG'			=> $user->img('icon_post_info', $user->lang['VIEW_PM_INFO']),		'PROFILE_IMG'		=> $user->img('icon_user_profile', $user->lang['READ_PROFILE']),		'EMAIL_IMG'			=> $user->img('icon_contact_email', $user->lang['SEND_EMAIL']),		'QUOTE_IMG'			=> $user->img('icon_post_quote', $user->lang['POST_QUOTE_PM']),		'REPLY_IMG'			=> $user->img('button_pm_reply', $user->lang['POST_REPLY_PM']),		'REPORT_IMG'		=> $user->img('icon_post_report', 'REPORT_PM'),		'EDIT_IMG'			=> $user->img('icon_post_edit', $user->lang['POST_EDIT_PM']),		'MINI_POST_IMG'		=> $user->img('icon_post_target', $user->lang['PM']),		'SENT_DATE'			=> ($view == 'print') ? $user->format_date($message_row['message_time'], false, true) : $user->format_date($message_row['message_time']),		'SUBJECT'			=> $message_row['message_subject'],		'MESSAGE'			=> $message,		'SIGNATURE'			=> ($message_row['enable_sig']) ? $signature : '',		'EDITED_MESSAGE'	=> $l_edited_by,		'MESSAGE_ID'		=> $message_row['msg_id'],		'U_PM'			=> ($config['allow_privmsg'] && $auth->acl_get('u_sendpm') && ($user_info['user_allow_pm'] || $auth->acl_gets('a_', 'm_') || $auth->acl_getf_global('m_'))) ? append_sid("{$phpbb_root_path}ucp.$phpEx", 'i=pm&amp;mode=compose&amp;u=' . $author_id) : '',		'U_WWW'			=> (!empty($user_info['user_website'])) ? $user_info['user_website'] : '',		'U_ICQ'			=> ($user_info['user_icq']) ? 'http://www.icq.com/people/' . urlencode($user_info['user_icq']) . '/' : '',		'U_AIM'			=> ($user_info['user_aim'] && $auth->acl_get('u_sendim')) ? append_sid("{$phpbb_root_path}memberlist.$phpEx", 'mode=contact&amp;action=aim&amp;u=' . $author_id) : '',		'U_YIM'			=> ($user_info['user_yim']) ? 'http://edit.yahoo.com/config/send_webmesg?.target=' . urlencode($user_info['user_yim']) . '&amp;.src=pg' : '',		'U_MSN'			=> ($user_info['user_msnm'] && $auth->acl_get('u_sendim')) ? append_sid("{$phpbb_root_path}memberlist.$phpEx", 'mode=contact&amp;action=msnm&amp;u=' . $author_id) : '',		'U_JABBER'		=> ($user_info['user_jabber'] && $auth->acl_get('u_sendim')) ? append_sid("{$phpbb_root_path}memberlist.$phpEx", 'mode=contact&amp;action=jabber&amp;u=' . $author_id) : '',		'U_DELETE'			=> ($auth->acl_get('u_pm_delete')) ? "$url&amp;mode=compose&amp;action=delete&amp;f=$folder_id&amp;p=" . $message_row['msg_id'] : '',		'U_EMAIL'			=> $user_info['email'],		'U_REPORT'			=> ($config['allow_pm_report']) ? append_sid("{$phpbb_root_path}report.$phpEx", "pm=" . $message_row['msg_id']) : '',		'U_QUOTE'			=> ($auth->acl_get('u_sendpm') && $author_id != ANONYMOUS) ? "$url&amp;mode=compose&amp;action=quote&amp;f=$folder_id&amp;p=" . $message_row['msg_id'] : '',		'U_EDIT'			=> (($message_row['message_time'] > time() - ($config['pm_edit_time'] * 60) || !$config['pm_edit_time']) && $folder_id == PRIVMSGS_OUTBOX && $auth->acl_get('u_pm_edit')) ? "$url&amp;mode=compose&amp;action=edit&amp;f=$folder_id&amp;p=" . $message_row['msg_id'] : '',		'U_POST_REPLY_PM'	=> ($auth->acl_get('u_sendpm') && $author_id != ANONYMOUS) ? "$url&amp;mode=compose&amp;action=reply&amp;f=$folder_id&amp;p=" . $message_row['msg_id'] : '',		'U_POST_REPLY_ALL'	=> ($auth->acl_get('u_sendpm') && $author_id != ANONYMOUS) ? "$url&amp;mode=compose&amp;action=reply&amp;f=$folder_id&amp;reply_to_all=1&amp;p=" . $message_row['msg_id'] : '',		'U_PREVIOUS_PM'		=> "$url&amp;f=$folder_id&amp;p=" . $message_row['msg_id'] . "&amp;view=previous",		'U_NEXT_PM'			=> "$url&amp;f=$folder_id&amp;p=" . $message_row['msg_id'] . "&amp;view=next",		'U_PM_ACTION'		=> $url . '&amp;mode=compose&amp;f=' . $folder_id . '&amp;p=' . $message_row['msg_id'],		'S_HAS_ATTACHMENTS'	=> (sizeof($attachments)) ? true : false,		'S_DISPLAY_NOTICE'	=> $display_notice && $message_row['message_attachment'],		'S_AUTHOR_DELETED'	=> ($author_id == ANONYMOUS) ? true : false,		'S_SPECIAL_FOLDER'	=> in_array($folder_id, array(PRIVMSGS_NO_BOX, PRIVMSGS_OUTBOX)),		'S_PM_RECIPIENTS'	=> $num_recipients,		'S_BBCODE_ALLOWED'	=> ($bbcode_status) ? 1 : 0,		'U_PRINT_PM'		=> ($config['print_pm'] && $auth->acl_get('u_pm_printpm')) ? "$url&amp;f=$folder_id&amp;p=" . $message_row['msg_id'] . "&amp;view=print" : '',		'U_FORWARD_PM'		=> ($config['forward_pm'] && $auth->acl_get('u_sendpm') && $auth->acl_get('u_pm_forward')) ? "$url&amp;mode=compose&amp;action=forward&amp;f=$folder_id&amp;p=" . $message_row['msg_id'] : '')	);	// Display not already displayed Attachments for this post, we already parsed them. ;)	if (isset($attachments) && sizeof($attachments))	{		foreach ($attachments as $attachment)		{			$template->assign_block_vars('attachment', array(				'DISPLAY_ATTACHMENT'	=> $attachment)			);		}	}	if (!isset($_REQUEST['view']) || $_REQUEST['view'] != 'print')	{		// Message History		if (message_history($msg_id, $user->data['user_id'], $message_row, $folder))		{			$template->assign_var('S_DISPLAY_HISTORY', true);		}	}}/*** Get user information (only for message display)*/function get_user_information($user_id, $user_row){	global $db, $auth, $user, $cache;	global $phpbb_root_path, $phpEx, $config;	if (!$user_id)	{		return array();	}	if (empty($user_row))	{		$sql = 'SELECT *			FROM ' . USERS_TABLE . '			WHERE user_id = ' . (int) $user_id;		$result = $db->sql_query($sql);		$user_row = $db->sql_fetchrow($result);		$db->sql_freeresult($result);	}	// Some standard values	$user_row['online'] = false;	$user_row['rank_title'] = $user_row['rank_image'] = $user_row['rank_image_src'] = $user_row['email'] = '';	// Generate online information for user	if ($config['load_onlinetrack'])	{		$sql = 'SELECT session_user_id, MAX(session_time) as online_time, MIN(session_viewonline) AS viewonline			FROM ' . SESSIONS_TABLE . "			WHERE session_user_id = $user_id			GROUP BY session_user_id";		$result = $db->sql_query_limit($sql, 1);		$row = $db->sql_fetchrow($result);		$db->sql_freeresult($result);		$update_time = $config['load_online_time'] * 60;		if ($row)		{			$user_row['online'] = (time() - $update_time < $row['online_time'] && ($row['viewonline'] || $auth->acl_get('u_viewonline'))) ? true : false;		}	}	if (!function_exists('get_user_avatar'))	{		include($phpbb_root_path . 'includes/functions_display.' . $phpEx);	}	$user_row['avatar'] = ($user->optionget('viewavatars')) ? get_user_avatar($user_row['user_avatar'], $user_row['user_avatar_type'], $user_row['user_avatar_width'], $user_row['user_avatar_height']) : '';	get_user_rank($user_row['user_rank'], $user_row['user_posts'], $user_row['rank_title'], $user_row['rank_image'], $user_row['rank_image_src']);	if ((!empty($user_row['user_allow_viewemail']) && $auth->acl_get('u_sendemail')) || $auth->acl_get('a_email'))	{		$user_row['email'] = ($config['board_email_form'] && $config['email_enable']) ? append_sid("{$phpbb_root_path}memberlist.$phpEx", "mode=email&amp;u=$user_id") : ((($config['board_hide_emails'] && !$auth->acl_get('a_email')) || empty($user_row['user_email'])) ? '' : 'mailto:' . $user_row['user_email']);	}	return $user_row;}?>
<?php/**** viewforum [English]** @package language* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** DO NOT CHANGE*/if (!defined('IN_PHPBB')){	exit;}if (empty($lang) || !is_array($lang)){	$lang = array();}// DEVELOPERS PLEASE NOTE//// All language files should use UTF-8 as their encoding and the files must not contain a BOM.//// Placeholders can now contain order information, e.g. instead of// 'Page %s of %s' you can (and should) write 'Page %1$s of %2$s', this allows// translators to re-order the output of data while ensuring it remains correct//// You do not need this where single placeholders are used, e.g. 'Message %d' is fine// equally where a string contains only two placeholders which are used to wrap text// in a url you again do not need to specify an order e.g., 'Click %sHERE%s' is fine$lang = array_merge($lang, array(	'ACTIVE_TOPICS'			=> 'Active topics',	'ANNOUNCEMENTS'			=> 'Announcements',	'FORUM_PERMISSIONS'		=> 'Forum permissions',	'ICON_ANNOUNCEMENT'		=> 'Announcement',	'ICON_STICKY'			=> 'Sticky',	'LOGIN_NOTIFY_FORUM'	=> 'You have been notified about this forum, please login to view it.',	'MARK_TOPICS_READ'		=> 'Mark topics read',	'NEW_POSTS_HOT'			=> 'New posts [ Popular ]',	// Not used anymore	'NEW_POSTS_LOCKED'		=> 'New posts [ Locked ]',	// Not used anymore	'NO_NEW_POSTS_HOT'		=> 'No new posts [ Popular ]',	// Not used anymore	'NO_NEW_POSTS_LOCKED'	=> 'No new posts [ Locked ]',	// Not used anymore	'NO_READ_ACCESS'		=> 'You do not have the required permissions to read topics within this forum.',	'NO_UNREAD_POSTS_HOT'		=> 'No unread posts [ Popular ]',	'NO_UNREAD_POSTS_LOCKED'	=> 'No unread posts [ Locked ]',	'POST_FORUM_LOCKED'		=> 'Forum is locked',	'TOPICS_MARKED'			=> 'The topics for this forum have now been marked read.',	'UNREAD_POSTS_HOT'		=> 'Unread posts [ Popular ]',	'UNREAD_POSTS_LOCKED'	=> 'Unread posts [ Locked ]',	'VIEW_FORUM'			=> 'View forum',	'VIEW_FORUM_TOPIC'		=> '1 topic',	'VIEW_FORUM_TOPICS'		=> '%d topics',));?>
<?php/**** acp_prune [English]** @package language* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** DO NOT CHANGE*/if (!defined('IN_PHPBB')){	exit;}if (empty($lang) || !is_array($lang)){	$lang = array();}// DEVELOPERS PLEASE NOTE//// All language files should use UTF-8 as their encoding and the files must not contain a BOM.//// Placeholders can now contain order information, e.g. instead of// 'Page %s of %s' you can (and should) write 'Page %1$s of %2$s', this allows// translators to re-order the output of data while ensuring it remains correct//// You do not need this where single placeholders are used, e.g. 'Message %d' is fine// equally where a string contains only two placeholders which are used to wrap text// in a url you again do not need to specify an order e.g., 'Click %sHERE%s' is fine// User pruning$lang = array_merge($lang, array(	'ACP_PRUNE_USERS_EXPLAIN'	=> 'This section allows you to delete or deactivate users on your board. Accounts can be filtered in a variety of ways; by post count, most recent activity, etc. Criteria may be combined to narrow down which accounts are affected. For example, you can prune users with fewer than 10 posts, who were also inactive after 2002-01-01. Alternatively, you may skip the criteria selection completely by entering a list of users (each on a separate line) into the text field. Take care with this facility! Once a user is deleted, there is no way to reverse the action.',	'DEACTIVATE_DELETE'			=> 'Deactivate or delete',	'DEACTIVATE_DELETE_EXPLAIN'	=> 'Choose whether to deactivate users or delete them entirely. Please note that deleted users cannot be restored!',	'DELETE_USERS'				=> 'Delete',	'DELETE_USER_POSTS'			=> 'Delete pruned user posts',	'DELETE_USER_POSTS_EXPLAIN' => 'Removes posts made by deleted users, has no effect if users are deactivated.',	'JOINED_EXPLAIN'			=> 'Enter a date in <kbd>YYYY-MM-DD</kbd> format.',	'LAST_ACTIVE_EXPLAIN'		=> 'Enter a date in <kbd>YYYY-MM-DD</kbd> format. Enter <kbd>0000-00-00</kbd> to prune users who never logged in, <em>Before</em> and <em>After</em> conditions will be ignored.',	'PRUNE_USERS_LIST'				=> 'Users to be pruned',	'PRUNE_USERS_LIST_DELETE'		=> 'With the selected critera for pruning users the following accounts will be removed.',	'PRUNE_USERS_LIST_DEACTIVATE'	=> 'With the selected critera for pruning users the following accounts will be deactivated.',	'SELECT_USERS_EXPLAIN'		=> 'Enter specific usernames here, they will be used in preference to the criteria above. Founders cannot be pruned.',	'USER_DEACTIVATE_SUCCESS'	=> 'The selected users have been deactivated successfully.',	'USER_DELETE_SUCCESS'		=> 'The selected users have been deleted successfully.',	'USER_PRUNE_FAILURE'		=> 'No users fit the selected criteria.',	'WRONG_ACTIVE_JOINED_DATE'	=> 'The date entered is wrong, it is expected in <kbd>YYYY-MM-DD</kbd> format.',));// Forum Pruning$lang = array_merge($lang, array(	'ACP_PRUNE_FORUMS_EXPLAIN'	=> 'This will delete any topic which has not been posted to or viewed within the number of days you select. If you do not enter a number then all topics will be deleted. By default, it will not remove topics in which polls are still running nor will it remove stickies and announcements.',	'FORUM_PRUNE'		=> 'Forum prune',	'NO_PRUNE'			=> 'No forums pruned.',	'SELECTED_FORUM'	=> 'Selected forum',	'SELECTED_FORUMS'	=> 'Selected forums',	'POSTS_PRUNED'					=> 'Posts pruned',	'PRUNE_ANNOUNCEMENTS'			=> 'Prune announcements',	'PRUNE_FINISHED_POLLS'			=> 'Prune closed polls',	'PRUNE_FINISHED_POLLS_EXPLAIN'	=> 'Removes topics with polls which have ended.',	'PRUNE_FORUM_CONFIRM'			=> 'Are you sure you want to prune the selected forums with the settings specified? Once removed, there is no way to recover the pruned posts and topics.',	'PRUNE_NOT_POSTED'				=> 'Days since last posted',	'PRUNE_NOT_VIEWED'				=> 'Days since last viewed',	'PRUNE_OLD_POLLS'				=> 'Prune old polls',	'PRUNE_OLD_POLLS_EXPLAIN'		=> 'Removes topics with polls not voted in for post age days.',	'PRUNE_STICKY'					=> 'Prune stickies',	'PRUNE_SUCCESS'					=> 'Pruning of forums was successful.',	'TOPICS_PRUNED'		=> 'Topics pruned',));?>
<?php/**** @package ucp* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @package module_install*/class ucp_prefs_info{	function module()	{		return array(			'filename'	=> 'ucp_prefs',			'title'		=> 'UCP_PREFS',			'version'	=> '1.0.0',			'modes'		=> array(				'personal'	=> array('title' => 'UCP_PREFS_PERSONAL', 'auth' => '', 'cat' => array('UCP_PREFS')),				'post'		=> array('title' => 'UCP_PREFS_POST', 'auth' => '', 'cat' => array('UCP_PREFS')),				'view'		=> array('title' => 'UCP_PREFS_VIEW', 'auth' => '', 'cat' => array('UCP_PREFS')),			),		);	}	function install()	{	}	function uninstall()	{	}}?>
<?php/**** @package mcp* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @ignore*/if (!defined('IN_PHPBB')){	exit;}/*** mcp_logs* Handling warning the users* @package mcp*/class mcp_logs{	var $u_action;	var $p_master;	function mcp_logs(&$p_master)	{		$this->p_master = &$p_master;	}	function main($id, $mode)	{		global $auth, $db, $user, $template;		global $config, $phpbb_root_path, $phpEx;		$user->add_lang('acp/common');		$action = request_var('action', array('' => ''));		if (is_array($action))		{			list($action, ) = each($action);		}		else		{			$action = request_var('action', '');		}		// Set up general vars		$start		= request_var('start', 0);		$deletemark = ($action == 'del_marked') ? true : false;		$deleteall	= ($action == 'del_all') ? true : false;		$marked		= request_var('mark', array(0));		// Sort keys		$sort_days	= request_var('st', 0);		$sort_key	= request_var('sk', 't');		$sort_dir	= request_var('sd', 'd');		$this->tpl_name = 'mcp_logs';		$this->page_title = 'MCP_LOGS';		$forum_list = array_values(array_intersect(get_forum_list('f_read'), get_forum_list('m_')));		$forum_list[] = 0;		$forum_id = $topic_id = 0;		switch ($mode)		{			case 'front':			break;			case 'forum_logs':				$forum_id = request_var('f', 0);				if (!in_array($forum_id, $forum_list))				{					trigger_error('NOT_AUTHORISED');				}				$forum_list = array($forum_id);			break;			case 'topic_logs':				$topic_id = request_var('t', 0);				$sql = 'SELECT forum_id					FROM ' . TOPICS_TABLE . '					WHERE topic_id = ' . $topic_id;				$result = $db->sql_query($sql);				$forum_id = (int) $db->sql_fetchfield('forum_id');				$db->sql_freeresult($result);				if (!in_array($forum_id, $forum_list))				{					trigger_error('NOT_AUTHORISED');				}				$forum_list = array($forum_id);			break;		}		// Delete entries if requested and able		if (($deletemark || $deleteall) && $auth->acl_get('a_clearlogs'))		{			if (confirm_box(true))			{				if ($deletemark && sizeof($marked))				{					$sql = 'DELETE FROM ' . LOG_TABLE . '						WHERE log_type = ' . LOG_MOD . '							AND ' . $db->sql_in_set('forum_id', $forum_list) . '							AND ' . $db->sql_in_set('log_id', $marked);					$db->sql_query($sql);					add_log('admin', 'LOG_CLEAR_MOD');				}				else if ($deleteall)				{					$sql = 'DELETE FROM ' . LOG_TABLE . '						WHERE log_type = ' . LOG_MOD . '							AND ' . $db->sql_in_set('forum_id', $forum_list);					if ($mode == 'topic_logs')					{						$sql .= ' AND topic_id = ' . $topic_id;					}					$db->sql_query($sql);					add_log('admin', 'LOG_CLEAR_MOD');				}			}			else			{				confirm_box(false, $user->lang['CONFIRM_OPERATION'], build_hidden_fields(array(					'f'			=> $forum_id,					't'			=> $topic_id,					'start'		=> $start,					'delmarked'	=> $deletemark,					'delall'	=> $deleteall,					'mark'		=> $marked,					'st'		=> $sort_days,					'sk'		=> $sort_key,					'sd'		=> $sort_dir,					'i'			=> $id,					'mode'		=> $mode,					'action'	=> request_var('action', array('' => ''))))				);			}		}		// Sorting		$limit_days = array(0 => $user->lang['ALL_ENTRIES'], 1 => $user->lang['1_DAY'], 7 => $user->lang['7_DAYS'], 14 => $user->lang['2_WEEKS'], 30 => $user->lang['1_MONTH'], 90 => $user->lang['3_MONTHS'], 180 => $user->lang['6_MONTHS'], 365 => $user->lang['1_YEAR']);		$sort_by_text = array('u' => $user->lang['SORT_USERNAME'], 't' => $user->lang['SORT_DATE'], 'i' => $user->lang['SORT_IP'], 'o' => $user->lang['SORT_ACTION']);		$sort_by_sql = array('u' => 'u.username_clean', 't' => 'l.log_time', 'i' => 'l.log_ip', 'o' => 'l.log_operation');		$s_limit_days = $s_sort_key = $s_sort_dir = $u_sort_param = '';		gen_sort_selects($limit_days, $sort_by_text, $sort_days, $sort_key, $sort_dir, $s_limit_days, $s_sort_key, $s_sort_dir, $u_sort_param);		// Define where and sort sql for use in displaying logs		$sql_where = ($sort_days) ? (time() - ($sort_days * 86400)) : 0;		$sql_sort = $sort_by_sql[$sort_key] . ' ' . (($sort_dir == 'd') ? 'DESC' : 'ASC');		$keywords = utf8_normalize_nfc(request_var('keywords', '', true));		$keywords_param = !empty($keywords) ? '&amp;keywords=' . urlencode(htmlspecialchars_decode($keywords)) : '';		// Grab log data		$log_data = array();		$log_count = 0;		$start = view_log('mod', $log_data, $log_count, $config['topics_per_page'], $start, $forum_list, $topic_id, 0, $sql_where, $sql_sort, $keywords);		$template->assign_vars(array(			'PAGE_NUMBER'		=> on_page($log_count, $config['topics_per_page'], $start),			'TOTAL'				=> ($log_count == 1) ? $user->lang['TOTAL_LOG'] : sprintf($user->lang['TOTAL_LOGS'], $log_count),			'PAGINATION'		=> generate_pagination($this->u_action . "&amp;$u_sort_param$keywords_param", $log_count, $config['topics_per_page'], $start),			'L_TITLE'			=> $user->lang['MCP_LOGS'],			'U_POST_ACTION'			=> $this->u_action . "&amp;$u_sort_param$keywords_param&amp;start=$start",			'S_CLEAR_ALLOWED'		=> ($auth->acl_get('a_clearlogs')) ? true : false,			'S_SELECT_SORT_DIR'		=> $s_sort_dir,			'S_SELECT_SORT_KEY'		=> $s_sort_key,			'S_SELECT_SORT_DAYS'	=> $s_limit_days,			'S_LOGS'				=> ($log_count > 0),			'S_KEYWORDS'			=> $keywords,			)		);		foreach ($log_data as $row)		{			$data = array();			$checks = array('viewtopic', 'viewforum');			foreach ($checks as $check)			{				if (isset($row[$check]) && $row[$check])				{					$data[] = '<a href="' . $row[$check] . '">' . $user->lang['LOGVIEW_' . strtoupper($check)] . '</a>';				}			}			$template->assign_block_vars('log', array(				'USERNAME'		=> $row['username_full'],				'IP'			=> $row['ip'],				'DATE'			=> $user->format_date($row['time']),				'ACTION'		=> $row['action'],				'DATA'			=> (sizeof($data)) ? implode(' | ', $data) : '',				'ID'			=> $row['id'],				)			);		}	}}?>
<?php/**** @package acp* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @package module_install*/class acp_bbcodes_info{	function module()	{		return array(			'filename'	=> 'acp_bbcodes',			'title'		=> 'ACP_BBCODES',			'version'	=> '1.0.0',			'modes'		=> array(				'bbcodes'		=> array('title' => 'ACP_BBCODES', 'auth' => 'acl_a_bbcode', 'cat' => array('ACP_MESSAGES')),			),		);	}	function install()	{	}	function uninstall()	{	}}?>
<?php/**** recaptcha [English]** @package language* @version $Id$* @copyright (c) 2009 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** DO NOT CHANGE*/if (!defined('IN_PHPBB')){	exit;}if (empty($lang) || !is_array($lang)){	$lang = array();}// DEVELOPERS PLEASE NOTE//// All language files should use UTF-8 as their encoding and the files must not contain a BOM.//// Placeholders can now contain order information, e.g. instead of// 'Page %s of %s' you can (and should) write 'Page %1$s of %2$s', this allows// translators to re-order the output of data while ensuring it remains correct//// You do not need this where single placeholders are used, e.g. 'Message %d' is fine// equally where a string contains only two placeholders which are used to wrap text// in a url you again do not need to specify an order e.g., 'Click %sHERE%s' is fine$lang = array_merge($lang, array(	'RECAPTCHA_LANG'				=> 'en',	'RECAPTCHA_NOT_AVAILABLE'		=> 'In order to use reCaptcha, you must create an account on <a href="http://www.google.com/recaptcha">www.google.com/recaptcha</a>.',	'CAPTCHA_RECAPTCHA'				=> 'reCaptcha',	'RECAPTCHA_INCORRECT'			=> 'The visual confirmation code you submitted was incorrect',	'RECAPTCHA_PUBLIC'				=> 'Public reCaptcha key',	'RECAPTCHA_PUBLIC_EXPLAIN'		=> 'Your public reCaptcha key. Keys can be obtained on <a href="http://www.google.com/recaptcha">www.google.com/recaptcha</a>.',	'RECAPTCHA_PRIVATE'				=> 'Private reCaptcha key',	'RECAPTCHA_PRIVATE_EXPLAIN'		=> 'Your private reCaptcha key. Keys can be obtained on <a href="http://www.google.com/recaptcha">www.google.com/recaptcha</a>.',	'RECAPTCHA_EXPLAIN'				=> 'In an effort to prevent automatic submissions, we require that you enter both of the words displayed into the text field underneath.',));?>
<?php/**** @package VC* @version $Id$* @copyright (c) 2006, 2008 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @ignore*/if (!defined('IN_PHPBB')){	exit;}/*** Placeholder for autoload*/if (!class_exists('phpbb_default_captcha')){	include($phpbb_root_path . 'includes/captcha/plugins/captcha_abstract.' . $phpEx);}/*** @package VC*/class phpbb_captcha_nogd extends phpbb_default_captcha{	function phpbb_captcha_nogd()	{		global $phpbb_root_path, $phpEx;		if (!class_exists('captcha'))		{			include_once($phpbb_root_path . 'includes/captcha/captcha_non_gd.' . $phpEx);		}	}	function &get_instance()	{		$instance =& new phpbb_captcha_nogd();		return $instance;	}	function is_available()	{		return true;	}	function get_name()	{		return 'CAPTCHA_NO_GD';	}	function get_class_name()	{		return 'phpbb_captcha_nogd';	}	function acp_page($id, &$module)	{		global $user;		trigger_error($user->lang['CAPTCHA_NO_OPTIONS'] . adm_back_link($module->u_action));	}}?>
<?php/**** @package phpBB3* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @ignore*/define('IN_PHPBB', true);$phpbb_root_path = (defined('PHPBB_ROOT_PATH')) ? PHPBB_ROOT_PATH : './';$phpEx = substr(strrchr(__FILE__, '.'), 1);include($phpbb_root_path . 'common.' . $phpEx);include($phpbb_root_path . 'includes/functions_display.' . $phpEx);// Start session management$user->session_begin();$auth->acl($user->data);$user->setup(array('memberlist', 'groups'));// Grab data$mode		= request_var('mode', '');$action		= request_var('action', '');$user_id	= request_var('u', ANONYMOUS);$username	= request_var('un', '', true);$group_id	= request_var('g', 0);$topic_id	= request_var('t', 0);// Check our mode...if (!in_array($mode, array('', 'group', 'viewprofile', 'email', 'contact', 'searchuser', 'leaders'))){	trigger_error('NO_MODE');}switch ($mode){	case 'email':	break;	default:		// Can this user view profiles/memberlist?		if (!$auth->acl_gets('u_viewprofile', 'a_user', 'a_useradd', 'a_userdel'))		{			if ($user->data['user_id'] != ANONYMOUS)			{				trigger_error('NO_VIEW_USERS');			}			login_box('', ((isset($user->lang['LOGIN_EXPLAIN_' . strtoupper($mode)])) ? $user->lang['LOGIN_EXPLAIN_' . strtoupper($mode)] : $user->lang['LOGIN_EXPLAIN_MEMBERLIST']));		}	break;}$start	= request_var('start', 0);$submit = (isset($_POST['submit'])) ? true : false;$default_key = 'c';$sort_key = request_var('sk', $default_key);$sort_dir = request_var('sd', 'a');// Grab rank information for later$ranks = $cache->obtain_ranks();// What do you want to do today? ... oops, I think that line is taken ...switch ($mode){	case 'leaders':		// Display a listing of board admins, moderators		include($phpbb_root_path . 'includes/functions_user.' . $phpEx);		$page_title = $user->lang['THE_TEAM'];		$template_html = 'memberlist_leaders.html';		$user_ary = $auth->acl_get_list(false, array('a_', 'm_'), false);		$admin_id_ary = $global_mod_id_ary = $mod_id_ary = $forum_id_ary = array();		foreach ($user_ary as $forum_id => $forum_ary)		{			foreach ($forum_ary as $auth_option => $id_ary)			{				if (!$forum_id)				{					if ($auth_option == 'a_')					{						$admin_id_ary = array_merge($admin_id_ary, $id_ary);					}					else					{						$global_mod_id_ary = array_merge($global_mod_id_ary, $id_ary);					}					continue;				}				else				{					$mod_id_ary = array_merge($mod_id_ary, $id_ary);				}				if ($forum_id)				{					foreach ($id_ary as $id)					{						$forum_id_ary[$id][] = $forum_id;					}				}			}		}		$admin_id_ary = array_unique($admin_id_ary);		$global_mod_id_ary = array_unique($global_mod_id_ary);		$mod_id_ary = array_merge($mod_id_ary, $global_mod_id_ary);		$mod_id_ary = array_unique($mod_id_ary);		// Admin group id...		$sql = 'SELECT group_id			FROM ' . GROUPS_TABLE . "			WHERE group_name = 'ADMINISTRATORS'";		$result = $db->sql_query($sql);		$admin_group_id = (int) $db->sql_fetchfield('group_id');		$db->sql_freeresult($result);		// Get group memberships for the admin id ary...		$admin_memberships = group_memberships($admin_group_id, $admin_id_ary);		$admin_user_ids = array();		if (!empty($admin_memberships))		{			// ok, we only need the user ids...			foreach ($admin_memberships as $row)			{				$admin_user_ids[$row['user_id']] = true;			}		}		unset($admin_memberships);		$sql = 'SELECT forum_id, forum_name			FROM ' . FORUMS_TABLE;		$result = $db->sql_query($sql);		$forums = array();		while ($row = $db->sql_fetchrow($result))		{			$forums[$row['forum_id']] = $row['forum_name'];		}		$db->sql_freeresult($result);		$sql = $db->sql_build_query('SELECT', array(			'SELECT'	=> 'u.user_id, u.group_id as default_group, u.username, u.username_clean, u.user_colour, u.user_rank, u.user_posts, u.user_allow_pm, g.group_id, g.group_name, g.group_colour, g.group_type, ug.user_id as ug_user_id',			'FROM'		=> array(				USERS_TABLE		=> 'u',				GROUPS_TABLE	=> 'g'			),			'LEFT_JOIN'	=> array(				array(					'FROM'	=> array(USER_GROUP_TABLE => 'ug'),					'ON'	=> 'ug.group_id = g.group_id AND ug.user_pending = 0 AND ug.user_id = ' . $user->data['user_id']				)			),			'WHERE'		=> $db->sql_in_set('u.user_id', array_unique(array_merge($admin_id_ary, $mod_id_ary)), false, true) . '				AND u.group_id = g.group_id',			'ORDER_BY'	=> 'g.group_name ASC, u.username_clean ASC'		));		$result = $db->sql_query($sql);		while ($row = $db->sql_fetchrow($result))		{			$which_row = (in_array($row['user_id'], $admin_id_ary)) ? 'admin' : 'mod';			// We sort out admins not within the 'Administrators' group.			// Else, we will list those as admin only having the permission to view logs for example.			if ($which_row == 'admin' && empty($admin_user_ids[$row['user_id']]))			{				// Remove from admin_id_ary, because the user may be a mod instead				unset($admin_id_ary[array_search($row['user_id'], $admin_id_ary)]);				if (!in_array($row['user_id'], $mod_id_ary) && !in_array($row['user_id'], $global_mod_id_ary))				{					continue;				}				else				{					$which_row = 'mod';				}			}			$s_forum_select = '';			$undisclosed_forum = false;			if (isset($forum_id_ary[$row['user_id']]) && !in_array($row['user_id'], $global_mod_id_ary))			{				if ($which_row == 'mod' && sizeof(array_diff(array_keys($forums), $forum_id_ary[$row['user_id']])))				{					foreach ($forum_id_ary[$row['user_id']] as $forum_id)					{						if (isset($forums[$forum_id]))						{							if ($auth->acl_get('f_list', $forum_id))							{								$s_forum_select .= '<option value="">' . $forums[$forum_id] . '</option>';							}							else							{								$undisclosed_forum = true;							}						}					}				}			}			// If the mod is only moderating non-viewable forums we skip the user. There is no gain in displaying the person then...			if (!$s_forum_select && $undisclosed_forum)			{//				$s_forum_select = '<option value="">' . $user->lang['FORUM_UNDISCLOSED'] . '</option>';				continue;			}			// The person is moderating several "public" forums, therefore the person should be listed, but not giving the real group name if hidden.			if ($row['group_type'] == GROUP_HIDDEN && !$auth->acl_gets('a_group', 'a_groupadd', 'a_groupdel') && $row['ug_user_id'] != $user->data['user_id'])			{				$group_name = $user->lang['GROUP_UNDISCLOSED'];				$u_group = '';			}			else			{				$group_name = ($row['group_type'] == GROUP_SPECIAL) ? $user->lang['G_' . $row['group_name']] : $row['group_name'];				$u_group = append_sid("{$phpbb_root_path}memberlist.$phpEx", 'mode=group&amp;g=' . $row['group_id']);			}			$rank_title = $rank_img = '';			get_user_rank($row['user_rank'], (($row['user_id'] == ANONYMOUS) ? false : $row['user_posts']), $rank_title, $rank_img, $rank_img_src);			$template->assign_block_vars($which_row, array(				'USER_ID'		=> $row['user_id'],				'FORUMS'		=> $s_forum_select,				'RANK_TITLE'	=> $rank_title,				'GROUP_NAME'	=> $group_name,				'GROUP_COLOR'	=> $row['group_colour'],				'RANK_IMG'		=> $rank_img,				'RANK_IMG_SRC'	=> $rank_img_src,				'U_GROUP'			=> $u_group,				'U_PM'				=> ($config['allow_privmsg'] && $auth->acl_get('u_sendpm') && ($row['user_allow_pm'] || $auth->acl_gets('a_', 'm_') || $auth->acl_getf_global('m_'))) ? append_sid("{$phpbb_root_path}ucp.$phpEx", 'i=pm&amp;mode=compose&amp;u=' . $row['user_id']) : '',				'USERNAME_FULL'		=> get_username_string('full', $row['user_id'], $row['username'], $row['user_colour']),				'USERNAME'			=> get_username_string('username', $row['user_id'], $row['username'], $row['user_colour']),				'USER_COLOR'		=> get_username_string('colour', $row['user_id'], $row['username'], $row['user_colour']),				'U_VIEW_PROFILE'	=> get_username_string('profile', $row['user_id'], $row['username'], $row['user_colour']),			));		}		$db->sql_freeresult($result);		$template->assign_vars(array(			'PM_IMG'		=> $user->img('icon_contact_pm', $user->lang['SEND_PRIVATE_MESSAGE']))		);	break;	case 'contact':		$page_title = $user->lang['IM_USER'];		$template_html = 'memberlist_im.html';		if (!$auth->acl_get('u_sendim'))		{			trigger_error('NOT_AUTHORISED');		}		$presence_img = '';		switch ($action)		{			case 'aim':				$lang = 'AIM';				$sql_field = 'user_aim';				$s_select = 'S_SEND_AIM';				$s_action = '';			break;			case 'msnm':				$lang = 'MSNM';				$sql_field = 'user_msnm';				$s_select = 'S_SEND_MSNM';				$s_action = '';			break;			case 'jabber':				$lang = 'JABBER';				$sql_field = 'user_jabber';				$s_select = (@extension_loaded('xml') && $config['jab_enable']) ? 'S_SEND_JABBER' : 'S_NO_SEND_JABBER';				$s_action = append_sid("{$phpbb_root_path}memberlist.$phpEx", "mode=contact&amp;action=$action&amp;u=$user_id");			break;			default:				trigger_error('NO_MODE', E_USER_ERROR);			break;		}		// Grab relevant data		$sql = "SELECT user_id, username, user_email, user_lang, $sql_field			FROM " . USERS_TABLE . "			WHERE user_id = $user_id				AND user_type IN (" . USER_NORMAL . ', ' . USER_FOUNDER . ')';		$result = $db->sql_query($sql);		$row = $db->sql_fetchrow($result);		$db->sql_freeresult($result);		if (!$row)		{			trigger_error('NO_USER');		}		else if (empty($row[$sql_field]))		{			trigger_error('IM_NO_DATA');		}		// Post data grab actions		switch ($action)		{			case 'jabber':				add_form_key('memberlist_messaging');				if ($submit && @extension_loaded('xml') && $config['jab_enable'])				{					if (check_form_key('memberlist_messaging'))					{						include_once($phpbb_root_path . 'includes/functions_messenger.' . $phpEx);						$subject = sprintf($user->lang['IM_JABBER_SUBJECT'], $user->data['username'], $config['server_name']);						$message = utf8_normalize_nfc(request_var('message', '', true));						if (empty($message))						{							trigger_error('EMPTY_MESSAGE_IM');						}						$messenger = new messenger(false);						$messenger->template('profile_send_im', $row['user_lang']);						$messenger->subject(htmlspecialchars_decode($subject));						$messenger->replyto($user->data['user_email']);						$messenger->im($row['user_jabber'], $row['username']);						$messenger->assign_vars(array(							'BOARD_CONTACT'	=> $config['board_contact'],							'FROM_USERNAME'	=> htmlspecialchars_decode($user->data['username']),							'TO_USERNAME'	=> htmlspecialchars_decode($row['username']),							'MESSAGE'		=> htmlspecialchars_decode($message))						);						$messenger->send(NOTIFY_IM);						$s_select = 'S_SENT_JABBER';					}					else					{						trigger_error('FORM_INVALID');					}				}			break;		}		// Send vars to the template		$template->assign_vars(array(			'IM_CONTACT'	=> $row[$sql_field],			'A_IM_CONTACT'	=> addslashes($row[$sql_field]),			'U_AIM_CONTACT'	=> ($action == 'aim') ? 'aim:addbuddy?screenname=' . urlencode($row[$sql_field]) : '',			'U_AIM_MESSAGE'	=> ($action == 'aim') ? 'aim:goim?screenname=' . urlencode($row[$sql_field]) . '&amp;message=' . urlencode($config['sitename']) : '',			'USERNAME'		=> $row['username'],			'CONTACT_NAME'	=> $row[$sql_field],			'SITENAME'		=> $config['sitename'],			'PRESENCE_IMG'		=> $presence_img,			'L_SEND_IM_EXPLAIN'	=> $user->lang['IM_' . $lang],			'L_IM_SENT_JABBER'	=> sprintf($user->lang['IM_SENT_JABBER'], $row['username']),			$s_select			=> true,			'S_IM_ACTION'		=> $s_action)		);	break;	case 'viewprofile':		// Display a profile		if ($user_id == ANONYMOUS && !$username)		{			trigger_error('NO_USER');		}		// Get user...		$sql = 'SELECT *			FROM ' . USERS_TABLE . '			WHERE ' . (($username) ? "username_clean = '" . $db->sql_escape(utf8_clean_string($username)) . "'" : "user_id = $user_id");		$result = $db->sql_query($sql);		$member = $db->sql_fetchrow($result);		$db->sql_freeresult($result);		if (!$member)		{			trigger_error('NO_USER');		}		// a_user admins and founder are able to view inactive users and bots to be able to manage them more easily		// Normal users are able to see at least users having only changed their profile settings but not yet reactivated.		if (!$auth->acl_get('a_user') && $user->data['user_type'] != USER_FOUNDER)		{			if ($member['user_type'] == USER_IGNORE)			{				trigger_error('NO_USER');			}			else if ($member['user_type'] == USER_INACTIVE && $member['user_inactive_reason'] != INACTIVE_PROFILE)			{				trigger_error('NO_USER');			}		}		$user_id = (int) $member['user_id'];		// Get group memberships		// Also get visiting user's groups to determine hidden group memberships if necessary.		$auth_hidden_groups = ($user_id === (int) $user->data['user_id'] || $auth->acl_gets('a_group', 'a_groupadd', 'a_groupdel')) ? true : false;		$sql_uid_ary = ($auth_hidden_groups) ? array($user_id) : array($user_id, (int) $user->data['user_id']);		// Do the SQL thang		$sql = 'SELECT g.group_id, g.group_name, g.group_type, ug.user_id			FROM ' . GROUPS_TABLE . ' g, ' . USER_GROUP_TABLE . ' ug			WHERE ' . $db->sql_in_set('ug.user_id', $sql_uid_ary) . '				AND g.group_id = ug.group_id				AND ug.user_pending = 0';		$result = $db->sql_query($sql);		// Divide data into profile data and current user data		$profile_groups = $user_groups = array();		while ($row = $db->sql_fetchrow($result))		{			$row['user_id'] = (int) $row['user_id'];			$row['group_id'] = (int) $row['group_id'];			if ($row['user_id'] == $user_id)			{				$profile_groups[] = $row;			}			else			{				$user_groups[$row['group_id']] = $row['group_id'];			}		}		$db->sql_freeresult($result);		// Filter out hidden groups and sort groups by name		$group_data = $group_sort = array();		foreach ($profile_groups as $row)		{			if ($row['group_type'] == GROUP_SPECIAL)			{				// Lookup group name in language dictionary				if (isset($user->lang['G_' . $row['group_name']]))				{					$row['group_name'] = $user->lang['G_' . $row['group_name']];				}			}			else if (!$auth_hidden_groups && $row['group_type'] == GROUP_HIDDEN && !isset($user_groups[$row['group_id']]))			{				// Skip over hidden groups the user cannot see				continue;			}			$group_sort[$row['group_id']] = utf8_clean_string($row['group_name']);			$group_data[$row['group_id']] = $row;		}		unset($profile_groups);		unset($user_groups);		asort($group_sort);		$group_options = '';		foreach ($group_sort as $group_id => $null)		{			$row = $group_data[$group_id];			$group_options .= '<option value="' . $row['group_id'] . '"' . (($row['group_id'] == $member['group_id']) ? ' selected="selected"' : '') . '>' . $row['group_name'] . '</option>';		}		unset($group_data);		unset($group_sort);		// What colour is the zebra		$sql = 'SELECT friend, foe			FROM ' . ZEBRA_TABLE . "			WHERE zebra_id = $user_id				AND user_id = {$user->data['user_id']}";		$result = $db->sql_query($sql);		$row = $db->sql_fetchrow($result);		$foe = ($row['foe']) ? true : false;		$friend = ($row['friend']) ? true : false;		$db->sql_freeresult($result);		if ($config['load_onlinetrack'])		{			$sql = 'SELECT MAX(session_time) AS session_time, MIN(session_viewonline) AS session_viewonline				FROM ' . SESSIONS_TABLE . "				WHERE session_user_id = $user_id";			$result = $db->sql_query($sql);			$row = $db->sql_fetchrow($result);			$db->sql_freeresult($result);			$member['session_time'] = (isset($row['session_time'])) ? $row['session_time'] : 0;			$member['session_viewonline'] = (isset($row['session_viewonline'])) ? $row['session_viewonline'] :	0;			unset($row);		}		if ($config['load_user_activity'])		{			display_user_activity($member);		}		// Do the relevant calculations		$memberdays = max(1, round((time() - $member['user_regdate']) / 86400));		$posts_per_day = $member['user_posts'] / $memberdays;		$percentage = ($config['num_posts']) ? min(100, ($member['user_posts'] / $config['num_posts']) * 100) : 0;		if ($member['user_sig'])		{			$member['user_sig'] = censor_text($member['user_sig']);			if ($member['user_sig_bbcode_bitfield'])			{				include_once($phpbb_root_path . 'includes/bbcode.' . $phpEx);				$bbcode = new bbcode();				$bbcode->bbcode_second_pass($member['user_sig'], $member['user_sig_bbcode_uid'], $member['user_sig_bbcode_bitfield']);			}			$member['user_sig'] = bbcode_nl2br($member['user_sig']);			$member['user_sig'] = smiley_text($member['user_sig']);		}		$poster_avatar = get_user_avatar($member['user_avatar'], $member['user_avatar_type'], $member['user_avatar_width'], $member['user_avatar_height']);		// We need to check if the modules 'zebra' ('friends' & 'foes' mode),  'notes' ('user_notes' mode) and  'warn' ('warn_user' mode) are accessible to decide if we can display appropriate links		$zebra_enabled = $friends_enabled = $foes_enabled = $user_notes_enabled = $warn_user_enabled = false;		// Only check if the user is logged in		if ($user->data['is_registered'])		{			if (!class_exists('p_master'))			{				include($phpbb_root_path . 'includes/functions_module.' . $phpEx);			}			$module = new p_master();			$module->list_modules('ucp');			$module->list_modules('mcp');			$user_notes_enabled = ($module->loaded('notes', 'user_notes')) ? true : false;			$warn_user_enabled = ($module->loaded('warn', 'warn_user')) ? true : false;			$zebra_enabled = ($module->loaded('zebra')) ? true : false;			$friends_enabled = ($module->loaded('zebra', 'friends')) ? true : false;			$foes_enabled = ($module->loaded('zebra', 'foes')) ? true : false;			unset($module);		}		$template->assign_vars(show_profile($member, $user_notes_enabled, $warn_user_enabled));		// Custom Profile Fields		$profile_fields = array();		if ($config['load_cpf_viewprofile'])		{			include_once($phpbb_root_path . 'includes/functions_profile_fields.' . $phpEx);			$cp = new custom_profile();			$profile_fields = $cp->generate_profile_fields_template('grab', $user_id);			$profile_fields = (isset($profile_fields[$user_id])) ? $cp->generate_profile_fields_template('show', false, $profile_fields[$user_id]) : array();		}		// If the user has m_approve permission or a_user permission, then list then display unapproved posts		if ($auth->acl_getf_global('m_approve') || $auth->acl_get('a_user'))		{			$sql = 'SELECT COUNT(post_id) as posts_in_queue				FROM ' . POSTS_TABLE . '				WHERE poster_id = ' . $user_id . '					AND post_approved = 0';			$result = $db->sql_query($sql);			$member['posts_in_queue'] = (int) $db->sql_fetchfield('posts_in_queue');			$db->sql_freeresult($result);		}		else		{			$member['posts_in_queue'] = 0;		}		$template->assign_vars(array(			'L_POSTS_IN_QUEUE'	=> $user->lang('NUM_POSTS_IN_QUEUE', $member['posts_in_queue']),			'POSTS_DAY'			=> sprintf($user->lang['POST_DAY'], $posts_per_day),			'POSTS_PCT'			=> sprintf($user->lang['POST_PCT'], $percentage),			'OCCUPATION'	=> (!empty($member['user_occ'])) ? censor_text($member['user_occ']) : '',			'INTERESTS'		=> (!empty($member['user_interests'])) ? censor_text($member['user_interests']) : '',			'SIGNATURE'		=> $member['user_sig'],			'POSTS_IN_QUEUE'=> $member['posts_in_queue'],			'AVATAR_IMG'	=> $poster_avatar,			'PM_IMG'		=> $user->img('icon_contact_pm', $user->lang['SEND_PRIVATE_MESSAGE']),			'EMAIL_IMG'		=> $user->img('icon_contact_email', $user->lang['EMAIL']),			'WWW_IMG'		=> $user->img('icon_contact_www', $user->lang['WWW']),			'ICQ_IMG'		=> $user->img('icon_contact_icq', $user->lang['ICQ']),			'AIM_IMG'		=> $user->img('icon_contact_aim', $user->lang['AIM']),			'MSN_IMG'		=> $user->img('icon_contact_msnm', $user->lang['MSNM']),			'YIM_IMG'		=> $user->img('icon_contact_yahoo', $user->lang['YIM']),			'JABBER_IMG'	=> $user->img('icon_contact_jabber', $user->lang['JABBER']),			'SEARCH_IMG'	=> $user->img('icon_user_search', $user->lang['SEARCH']),			'S_PROFILE_ACTION'	=> append_sid("{$phpbb_root_path}memberlist.$phpEx", 'mode=group'),			'S_GROUP_OPTIONS'	=> $group_options,			'S_CUSTOM_FIELDS'	=> (isset($profile_fields['row']) && sizeof($profile_fields['row'])) ? true : false,			'U_USER_ADMIN'			=> ($auth->acl_get('a_user')) ? append_sid("{$phpbb_root_path}adm/index.$phpEx", 'i=users&amp;mode=overview&amp;u=' . $user_id, true, $user->session_id) : '',			'U_USER_BAN'			=> ($auth->acl_get('m_ban') && $user_id != $user->data['user_id']) ? append_sid("{$phpbb_root_path}mcp.$phpEx", 'i=ban&amp;mode=user&amp;u=' . $user_id, true, $user->session_id) : '',			'U_MCP_QUEUE'			=> ($auth->acl_getf_global('m_approve')) ? append_sid("{$phpbb_root_path}mcp.$phpEx", 'i=queue', true, $user->session_id) : '',			'U_SWITCH_PERMISSIONS'	=> ($auth->acl_get('a_switchperm') && $user->data['user_id'] != $user_id) ? append_sid("{$phpbb_root_path}ucp.$phpEx", "mode=switch_perm&amp;u={$user_id}&amp;hash=" . generate_link_hash('switchperm')) : '',			'S_USER_NOTES'		=> ($user_notes_enabled) ? true : false,			'S_WARN_USER'		=> ($warn_user_enabled) ? true : false,			'S_ZEBRA'			=> ($user->data['user_id'] != $user_id && $user->data['is_registered'] && $zebra_enabled) ? true : false,			'U_ADD_FRIEND'		=> (!$friend && !$foe && $friends_enabled) ? append_sid("{$phpbb_root_path}ucp.$phpEx", 'i=zebra&amp;add=' . urlencode(htmlspecialchars_decode($member['username']))) : '',			'U_ADD_FOE'			=> (!$friend && !$foe && $foes_enabled) ? append_sid("{$phpbb_root_path}ucp.$phpEx", 'i=zebra&amp;mode=foes&amp;add=' . urlencode(htmlspecialchars_decode($member['username']))) : '',			'U_REMOVE_FRIEND'	=> ($friend && $friends_enabled) ? append_sid("{$phpbb_root_path}ucp.$phpEx", 'i=zebra&amp;remove=1&amp;usernames[]=' . $user_id) : '',			'U_REMOVE_FOE'		=> ($foe && $foes_enabled) ? append_sid("{$phpbb_root_path}ucp.$phpEx", 'i=zebra&amp;remove=1&amp;mode=foes&amp;usernames[]=' . $user_id) : '',		));		if (!empty($profile_fields['row']))		{			$template->assign_vars($profile_fields['row']);		}		if (!empty($profile_fields['blockrow']))		{			foreach ($profile_fields['blockrow'] as $field_data)			{				$template->assign_block_vars('custom_fields', $field_data);			}		}		// Inactive reason/account?		if ($member['user_type'] == USER_INACTIVE)		{			$user->add_lang('acp/common');			$inactive_reason = $user->lang['INACTIVE_REASON_UNKNOWN'];			switch ($member['user_inactive_reason'])			{				case INACTIVE_REGISTER:					$inactive_reason = $user->lang['INACTIVE_REASON_REGISTER'];				break;				case INACTIVE_PROFILE:					$inactive_reason = $user->lang['INACTIVE_REASON_PROFILE'];				break;				case INACTIVE_MANUAL:					$inactive_reason = $user->lang['INACTIVE_REASON_MANUAL'];				break;				case INACTIVE_REMIND:					$inactive_reason = $user->lang['INACTIVE_REASON_REMIND'];				break;			}			$template->assign_vars(array(				'S_USER_INACTIVE'		=> true,				'USER_INACTIVE_REASON'	=> $inactive_reason)			);		}		// Now generate page title		$page_title = sprintf($user->lang['VIEWING_PROFILE'], $member['username']);		$template_html = 'memberlist_view.html';	break;	case 'email':		// Send an email		$page_title = $user->lang['SEND_EMAIL'];		$template_html = 'memberlist_email.html';		add_form_key('memberlist_email');		if (!$config['email_enable'])		{			trigger_error('EMAIL_DISABLED');		}		if (!$auth->acl_get('u_sendemail'))		{			trigger_error('NO_EMAIL');		}		// Are we trying to abuse the facility?		if (time() - $user->data['user_emailtime'] < $config['flood_interval'])		{			trigger_error('FLOOD_EMAIL_LIMIT');		}		// Determine action...		$user_id = request_var('u', 0);		$topic_id = request_var('t', 0);		// Send email to user...		if ($user_id)		{			if ($user_id == ANONYMOUS || !$config['board_email_form'])			{				trigger_error('NO_EMAIL');			}			// Get the appropriate username, etc.			$sql = 'SELECT username, user_email, user_allow_viewemail, user_lang, user_jabber, user_notify_type				FROM ' . USERS_TABLE . "				WHERE user_id = $user_id					AND user_type IN (" . USER_NORMAL . ', ' . USER_FOUNDER . ')';			$result = $db->sql_query($sql);			$row = $db->sql_fetchrow($result);			$db->sql_freeresult($result);			if (!$row)			{				trigger_error('NO_USER');			}			// Can we send email to this user?			if (!$row['user_allow_viewemail'] && !$auth->acl_get('a_user'))			{				trigger_error('NO_EMAIL');			}		}		else if ($topic_id)		{			// Send topic heads-up to email address			$sql = 'SELECT forum_id, topic_title				FROM ' . TOPICS_TABLE . "				WHERE topic_id = $topic_id";			$result = $db->sql_query($sql);			$row = $db->sql_fetchrow($result);			$db->sql_freeresult($result);			if (!$row)			{				trigger_error('NO_TOPIC');			}			if ($row['forum_id'])			{				if (!$auth->acl_get('f_read', $row['forum_id']))				{					trigger_error('SORRY_AUTH_READ');				}				if (!$auth->acl_get('f_email', $row['forum_id']))				{					trigger_error('NO_EMAIL');				}			}			else			{				// If global announcement, we need to check if the user is able to at least read and email in one forum...				if (!$auth->acl_getf_global('f_read'))				{					trigger_error('SORRY_AUTH_READ');				}				if (!$auth->acl_getf_global('f_email'))				{					trigger_error('NO_EMAIL');				}			}		}		else		{			trigger_error('NO_EMAIL');		}		$error = array();		$name		= utf8_normalize_nfc(request_var('name', '', true));		$email		= request_var('email', '');		$email_lang = request_var('lang', $config['default_lang']);		$subject	= utf8_normalize_nfc(request_var('subject', '', true));		$message	= utf8_normalize_nfc(request_var('message', '', true));		$cc			= (isset($_POST['cc_email'])) ? true : false;		$submit		= (isset($_POST['submit'])) ? true : false;		if ($submit)		{			if (!check_form_key('memberlist_email'))			{				$error[] = 'FORM_INVALID';			}			if ($user_id)			{				if (!$subject)				{					$error[] = $user->lang['EMPTY_SUBJECT_EMAIL'];				}				if (!$message)				{					$error[] = $user->lang['EMPTY_MESSAGE_EMAIL'];				}				$name = $row['username'];				$email_lang = $row['user_lang'];				$email = $row['user_email'];			}			else			{				if (!$email || !preg_match('/^' . get_preg_expression('email') . '$/i', $email))				{					$error[] = $user->lang['EMPTY_ADDRESS_EMAIL'];				}				if (!$name)				{					$error[] = $user->lang['EMPTY_NAME_EMAIL'];				}			}			if (!sizeof($error))			{				$sql = 'UPDATE ' . USERS_TABLE . '					SET user_emailtime = ' . time() . '					WHERE user_id = ' . $user->data['user_id'];				$result = $db->sql_query($sql);				include_once($phpbb_root_path . 'includes/functions_messenger.' . $phpEx);				$messenger = new messenger(false);				$email_tpl = ($user_id) ? 'profile_send_email' : 'email_notify';				$mail_to_users = array();				$mail_to_users[] = array(					'email_lang'		=> $email_lang,					'email'				=> $email,					'name'				=> $name,					'username'			=> ($user_id) ? $row['username'] : '',					'to_name'			=> $name,					'user_jabber'		=> ($user_id) ? $row['user_jabber'] : '',					'user_notify_type'	=> ($user_id) ? $row['user_notify_type'] : NOTIFY_EMAIL,					'topic_title'		=> (!$user_id) ? $row['topic_title'] : '',					'forum_id'			=> (!$user_id) ? $row['forum_id'] : 0,				);				// Ok, now the same email if CC specified, but without exposing the users email address				if ($cc)				{					$mail_to_users[] = array(						'email_lang'		=> $user->data['user_lang'],						'email'				=> $user->data['user_email'],						'name'				=> $user->data['username'],						'username'			=> $user->data['username'],						'to_name'			=> $name,						'user_jabber'		=> $user->data['user_jabber'],						'user_notify_type'	=> ($user_id) ? $user->data['user_notify_type'] : NOTIFY_EMAIL,						'topic_title'		=> (!$user_id) ? $row['topic_title'] : '',						'forum_id'			=> (!$user_id) ? $row['forum_id'] : 0,					);				}				foreach ($mail_to_users as $row)				{					$messenger->template($email_tpl, $row['email_lang']);					$messenger->replyto($user->data['user_email']);					$messenger->to($row['email'], $row['name']);					if ($user_id)					{						$messenger->subject(htmlspecialchars_decode($subject));						$messenger->im($row['user_jabber'], $row['username']);						$notify_type = $row['user_notify_type'];					}					else					{						$notify_type = NOTIFY_EMAIL;					}					$messenger->anti_abuse_headers($config, $user);					$messenger->assign_vars(array(						'BOARD_CONTACT'	=> $config['board_contact'],						'TO_USERNAME'	=> htmlspecialchars_decode($row['to_name']),						'FROM_USERNAME'	=> htmlspecialchars_decode($user->data['username']),						'MESSAGE'		=> htmlspecialchars_decode($message))					);					if ($topic_id)					{						$messenger->assign_vars(array(							'TOPIC_NAME'	=> htmlspecialchars_decode($row['topic_title']),							'U_TOPIC'		=> generate_board_url() . "/viewtopic.$phpEx?f=" . $row['forum_id'] . "&t=$topic_id")						);					}					$messenger->send($notify_type);				}				meta_refresh(3, append_sid("{$phpbb_root_path}index.$phpEx"));				$message = ($user_id) ? sprintf($user->lang['RETURN_INDEX'], '<a href="' . append_sid("{$phpbb_root_path}index.$phpEx") . '">', '</a>') : sprintf($user->lang['RETURN_TOPIC'],  '<a href="' . append_sid("{$phpbb_root_path}viewtopic.$phpEx", "f={$row['forum_id']}&amp;t=$topic_id") . '">', '</a>');				trigger_error($user->lang['EMAIL_SENT'] . '<br /><br />' . $message);			}		}		if ($user_id)		{			$template->assign_vars(array(				'S_SEND_USER'	=> true,				'USERNAME'		=> $row['username'],				'L_EMAIL_BODY_EXPLAIN'	=> $user->lang['EMAIL_BODY_EXPLAIN'],				'S_POST_ACTION'			=> append_sid("{$phpbb_root_path}memberlist.$phpEx", 'mode=email&amp;u=' . $user_id))			);		}		else		{			$template->assign_vars(array(				'EMAIL'				=> $email,				'NAME'				=> $name,				'S_LANG_OPTIONS'	=> language_select($email_lang),				'L_EMAIL_BODY_EXPLAIN'	=> $user->lang['EMAIL_TOPIC_EXPLAIN'],				'S_POST_ACTION'			=> append_sid("{$phpbb_root_path}memberlist.$phpEx", 'mode=email&amp;t=' . $topic_id))			);		}		$template->assign_vars(array(			'ERROR_MESSAGE'		=> (sizeof($error)) ? implode('<br />', $error) : '',			'SUBJECT'			=> $subject,			'MESSAGE'			=> $message,			)		);	break;	case 'group':	default:		// The basic memberlist		$page_title = $user->lang['MEMBERLIST'];		$template_html = 'memberlist_body.html';		// Sorting		$sort_key_text = array('a' => $user->lang['SORT_USERNAME'], 'b' => $user->lang['SORT_LOCATION'], 'c' => $user->lang['SORT_JOINED'], 'd' => $user->lang['SORT_POST_COUNT'], 'f' => $user->lang['WEBSITE'], 'g' => $user->lang['ICQ'], 'h' => $user->lang['AIM'], 'i' => $user->lang['MSNM'], 'j' => $user->lang['YIM'], 'k' => $user->lang['JABBER']);		$sort_key_sql = array('a' => 'u.username_clean', 'b' => 'u.user_from', 'c' => 'u.user_regdate', 'd' => 'u.user_posts', 'f' => 'u.user_website', 'g' => 'u.user_icq', 'h' => 'u.user_aim', 'i' => 'u.user_msnm', 'j' => 'u.user_yim', 'k' => 'u.user_jabber');		if ($auth->acl_get('a_user'))		{			$sort_key_text['e'] = $user->lang['SORT_EMAIL'];			$sort_key_sql['e'] = 'u.user_email';		}		if ($auth->acl_get('u_viewonline'))		{			$sort_key_text['l'] = $user->lang['SORT_LAST_ACTIVE'];			$sort_key_sql['l'] = 'u.user_lastvisit';		}		$sort_key_text['m'] = $user->lang['SORT_RANK'];		$sort_key_sql['m'] = 'u.user_rank';		$sort_dir_text = array('a' => $user->lang['ASCENDING'], 'd' => $user->lang['DESCENDING']);		$s_sort_key = '';		foreach ($sort_key_text as $key => $value)		{			$selected = ($sort_key == $key) ? ' selected="selected"' : '';			$s_sort_key .= '<option value="' . $key . '"' . $selected . '>' . $value . '</option>';		}		$s_sort_dir = '';		foreach ($sort_dir_text as $key => $value)		{			$selected = ($sort_dir == $key) ? ' selected="selected"' : '';			$s_sort_dir .= '<option value="' . $key . '"' . $selected . '>' . $value . '</option>';		}		// Additional sorting options for user search ... if search is enabled, if not		// then only admins can make use of this (for ACP functionality)		$sql_select = $sql_where_data = $sql_from = $sql_where = $order_by = '';		$form			= request_var('form', '');		$field			= request_var('field', '');		$select_single 	= request_var('select_single', false);		// Search URL parameters, if any of these are in the URL we do a search		$search_params = array('username', 'email', 'icq', 'aim', 'yahoo', 'msn', 'jabber', 'search_group_id', 'joined_select', 'active_select', 'count_select', 'joined', 'active', 'count', 'ip');		// We validate form and field here, only id/class allowed		$form = (!preg_match('/^[a-z0-9_-]+$/i', $form)) ? '' : $form;		$field = (!preg_match('/^[a-z0-9_-]+$/i', $field)) ? '' : $field;		if (($mode == 'searchuser' || sizeof(array_intersect(array_keys($_GET), $search_params)) > 0) && ($config['load_search'] || $auth->acl_get('a_')))		{			$username	= request_var('username', '', true);			$email		= strtolower(request_var('email', ''));			$icq		= request_var('icq', '');			$aim		= request_var('aim', '');			$yahoo		= request_var('yahoo', '');			$msn		= request_var('msn', '');			$jabber		= request_var('jabber', '');			$search_group_id	= request_var('search_group_id', 0);			// when using these, make sure that we actually have values defined in $find_key_match			$joined_select	= request_var('joined_select', 'lt');			$active_select	= request_var('active_select', 'lt');			$count_select	= request_var('count_select', 'eq');			$joined			= explode('-', request_var('joined', ''));			$active			= explode('-', request_var('active', ''));			$count			= (request_var('count', '') !== '') ? request_var('count', 0) : '';			$ipdomain		= request_var('ip', '');			$find_key_match = array('lt' => '<', 'gt' => '>', 'eq' => '=');			$find_count = array('lt' => $user->lang['LESS_THAN'], 'eq' => $user->lang['EQUAL_TO'], 'gt' => $user->lang['MORE_THAN']);			$s_find_count = '';			foreach ($find_count as $key => $value)			{				$selected = ($count_select == $key) ? ' selected="selected"' : '';				$s_find_count .= '<option value="' . $key . '"' . $selected . '>' . $value . '</option>';			}			$find_time = array('lt' => $user->lang['BEFORE'], 'gt' => $user->lang['AFTER']);			$s_find_join_time = '';			foreach ($find_time as $key => $value)			{				$selected = ($joined_select == $key) ? ' selected="selected"' : '';				$s_find_join_time .= '<option value="' . $key . '"' . $selected . '>' . $value . '</option>';			}			$s_find_active_time = '';			foreach ($find_time as $key => $value)			{				$selected = ($active_select == $key) ? ' selected="selected"' : '';				$s_find_active_time .= '<option value="' . $key . '"' . $selected . '>' . $value . '</option>';			}			$sql_where .= ($username) ? ' AND u.username_clean ' . $db->sql_like_expression(str_replace('*', $db->any_char, utf8_clean_string($username))) : '';			$sql_where .= ($auth->acl_get('a_user') && $email) ? ' AND u.user_email ' . $db->sql_like_expression(str_replace('*', $db->any_char, $email)) . ' ' : '';			$sql_where .= ($icq) ? ' AND u.user_icq ' . $db->sql_like_expression(str_replace('*', $db->any_char, $icq)) . ' ' : '';			$sql_where .= ($aim) ? ' AND u.user_aim ' . $db->sql_like_expression(str_replace('*', $db->any_char, $aim)) . ' ' : '';			$sql_where .= ($yahoo) ? ' AND u.user_yim ' . $db->sql_like_expression(str_replace('*', $db->any_char, $yahoo)) . ' ' : '';			$sql_where .= ($msn) ? ' AND u.user_msnm ' . $db->sql_like_expression(str_replace('*', $db->any_char, $msn)) . ' ' : '';			$sql_where .= ($jabber) ? ' AND u.user_jabber ' . $db->sql_like_expression(str_replace('*', $db->any_char, $jabber)) . ' ' : '';			$sql_where .= (is_numeric($count) && isset($find_key_match[$count_select])) ? ' AND u.user_posts ' . $find_key_match[$count_select] . ' ' . (int) $count . ' ' : '';			if (isset($find_key_match[$joined_select]) && sizeof($joined) == 3)			{				// Before PHP 5.1 an error value -1 can be returned instead of false.				// Theoretically gmmktime() can also legitimately return -1 as an actual timestamp.				// But since we do not pass the $second parameter to gmmktime(),				// an actual unix timestamp -1 cannot be returned in this case.				// Thus we can check whether it is -1 and treat -1 as an error.				$joined_time = gmmktime(0, 0, 0, (int) $joined[1], (int) $joined[2], (int) $joined[0]);				if ($joined_time !== false && $joined_time !== -1)				{					$sql_where .= " AND u.user_regdate " . $find_key_match[$joined_select] . ' ' . $joined_time;				}			}			if (isset($find_key_match[$active_select]) && sizeof($active) == 3 && $auth->acl_get('u_viewonline'))			{				$active_time = gmmktime(0, 0, 0, (int) $active[1], (int) $active[2], (int) $active[0]);				if ($active_time !== false && $active_time !== -1)				{					$sql_where .= " AND u.user_lastvisit " . $find_key_match[$active_select] . ' ' . $active_time;				}			}			$sql_where .= ($search_group_id) ? " AND u.user_id = ug.user_id AND ug.group_id = $search_group_id AND ug.user_pending = 0 " : '';			if ($search_group_id)			{				$sql_from = ', ' . USER_GROUP_TABLE . ' ug ';			}			if ($ipdomain && $auth->acl_getf_global('m_info'))			{				if (strspn($ipdomain, 'abcdefghijklmnopqrstuvwxyz'))				{					$hostnames = gethostbynamel($ipdomain);					if ($hostnames !== false)					{						$ips = "'" . implode('\', \'', array_map(array($db, 'sql_escape'), preg_replace('#([0-9]{1,3}\.[0-9]{1,3}[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3})#', "\\1", gethostbynamel($ipdomain)))) . "'";					}					else					{						$ips = false;					}				}				else				{					$ips = "'" . str_replace('*', '%', $db->sql_escape($ipdomain)) . "'";				}				if ($ips === false)				{					// A minor fudge but it does the job :D					$sql_where .= " AND u.user_id = 0";				}				else				{					$ip_forums = array_keys($auth->acl_getf('m_info', true));					$sql = 'SELECT DISTINCT poster_id						FROM ' . POSTS_TABLE . '						WHERE poster_ip ' . ((strpos($ips, '%') !== false) ? 'LIKE' : 'IN') . " ($ips)							AND forum_id IN (0, " . implode(', ', $ip_forums) . ')';					$result = $db->sql_query($sql);					if ($row = $db->sql_fetchrow($result))					{						$ip_sql = array();						do						{							$ip_sql[] = $row['poster_id'];						}						while ($row = $db->sql_fetchrow($result));						$sql_where .= ' AND ' . $db->sql_in_set('u.user_id', $ip_sql);					}					else					{						// A minor fudge but it does the job :D						$sql_where .= " AND u.user_id = 0";					}					unset($ip_forums);					$db->sql_freeresult($result);				}			}		}		$first_char = request_var('first_char', '');		if ($first_char == 'other')		{			for ($i = 97; $i < 123; $i++)			{				$sql_where .= ' AND u.username_clean NOT ' . $db->sql_like_expression(chr($i) . $db->any_char);			}		}		else if ($first_char)		{			$sql_where .= ' AND u.username_clean ' . $db->sql_like_expression(substr($first_char, 0, 1) . $db->any_char);		}		// Are we looking at a usergroup? If so, fetch additional info		// and further restrict the user info query		if ($mode == 'group')		{			// We JOIN here to save a query for determining membership for hidden groups. ;)			$sql = 'SELECT g.*, ug.user_id				FROM ' . GROUPS_TABLE . ' g				LEFT JOIN ' . USER_GROUP_TABLE . ' ug ON (ug.user_pending = 0 AND ug.user_id = ' . $user->data['user_id'] . " AND ug.group_id = $group_id)				WHERE g.group_id = $group_id";			$result = $db->sql_query($sql);			$group_row = $db->sql_fetchrow($result);			$db->sql_freeresult($result);			if (!$group_row)			{				trigger_error('NO_GROUP');			}			switch ($group_row['group_type'])			{				case GROUP_OPEN:					$group_row['l_group_type'] = 'OPEN';				break;				case GROUP_CLOSED:					$group_row['l_group_type'] = 'CLOSED';				break;				case GROUP_HIDDEN:					$group_row['l_group_type'] = 'HIDDEN';					// Check for membership or special permissions					if (!$auth->acl_gets('a_group', 'a_groupadd', 'a_groupdel') && $group_row['user_id'] != $user->data['user_id'])					{						trigger_error('NO_GROUP');					}				break;				case GROUP_SPECIAL:					$group_row['l_group_type'] = 'SPECIAL';				break;				case GROUP_FREE:					$group_row['l_group_type'] = 'FREE';				break;			}			// Misusing the avatar function for displaying group avatars...			$avatar_img = get_user_avatar($group_row['group_avatar'], $group_row['group_avatar_type'], $group_row['group_avatar_width'], $group_row['group_avatar_height'], 'GROUP_AVATAR');			$rank_title = $rank_img = $rank_img_src = '';			if ($group_row['group_rank'])			{				if (isset($ranks['special'][$group_row['group_rank']]))				{					$rank_title = $ranks['special'][$group_row['group_rank']]['rank_title'];				}				$rank_img = (!empty($ranks['special'][$group_row['group_rank']]['rank_image'])) ? '<img src="' . $config['ranks_path'] . '/' . $ranks['special'][$group_row['group_rank']]['rank_image'] . '" alt="' . $ranks['special'][$group_row['group_rank']]['rank_title'] . '" title="' . $ranks['special'][$group_row['group_rank']]['rank_title'] . '" /><br />' : '';				$rank_img_src = (!empty($ranks['special'][$group_row['group_rank']]['rank_image'])) ? $config['ranks_path'] . '/' . $ranks['special'][$group_row['group_rank']]['rank_image'] : '';			}			else			{				$rank_title = '';				$rank_img = '';				$rank_img_src = '';			}			$template->assign_vars(array(				'GROUP_DESC'	=> generate_text_for_display($group_row['group_desc'], $group_row['group_desc_uid'], $group_row['group_desc_bitfield'], $group_row['group_desc_options']),				'GROUP_NAME'	=> ($group_row['group_type'] == GROUP_SPECIAL) ? $user->lang['G_' . $group_row['group_name']] : $group_row['group_name'],				'GROUP_COLOR'	=> $group_row['group_colour'],				'GROUP_TYPE'	=> $user->lang['GROUP_IS_' . $group_row['l_group_type']],				'GROUP_RANK'	=> $rank_title,				'AVATAR_IMG'	=> $avatar_img,				'RANK_IMG'		=> $rank_img,				'RANK_IMG_SRC'	=> $rank_img_src,				'U_PM'			=> ($auth->acl_get('u_sendpm') && $auth->acl_get('u_masspm_group') && $group_row['group_receive_pm'] && $config['allow_privmsg'] && $config['allow_mass_pm']) ? append_sid("{$phpbb_root_path}ucp.$phpEx", 'i=pm&amp;mode=compose&amp;g=' . $group_id) : '',)			);			$sql_select = ', ug.group_leader';			$sql_from = ', ' . USER_GROUP_TABLE . ' ug ';			$order_by = 'ug.group_leader DESC, ';			$sql_where .= " AND ug.user_pending = 0 AND u.user_id = ug.user_id AND ug.group_id = $group_id";			$sql_where_data = " AND u.user_id = ug.user_id AND ug.group_id = $group_id";		}		// Sorting and order		if (!isset($sort_key_sql[$sort_key]))		{			$sort_key = $default_key;		}		$order_by .= $sort_key_sql[$sort_key] . ' ' . (($sort_dir == 'a') ? 'ASC' : 'DESC');		// Unfortunately we must do this here for sorting by rank, else the sort order is applied wrongly		if ($sort_key == 'm')		{			$order_by .= ', u.user_posts DESC';		}		// Count the users ...		if ($sql_where)		{			$sql = 'SELECT COUNT(u.user_id) AS total_users				FROM ' . USERS_TABLE . " u$sql_from				WHERE u.user_type IN (" . USER_NORMAL . ', ' . USER_FOUNDER . ")				$sql_where";			$result = $db->sql_query($sql);			$total_users = (int) $db->sql_fetchfield('total_users');			$db->sql_freeresult($result);		}		else		{			$total_users = $config['num_users'];		}		// Build a relevant pagination_url		$params = $sort_params = array();		// We do not use request_var() here directly to save some calls (not all variables are set)		$check_params = array(			'g'				=> array('g', 0),			'sk'			=> array('sk', $default_key),			'sd'			=> array('sd', 'a'),			'form'			=> array('form', ''),			'field'			=> array('field', ''),			'select_single'	=> array('select_single', $select_single),			'username'		=> array('username', '', true),			'email'			=> array('email', ''),			'icq'			=> array('icq', ''),			'aim'			=> array('aim', ''),			'yahoo'			=> array('yahoo', ''),			'msn'			=> array('msn', ''),			'jabber'		=> array('jabber', ''),			'search_group_id'	=> array('search_group_id', 0),			'joined_select'	=> array('joined_select', 'lt'),			'active_select'	=> array('active_select', 'lt'),			'count_select'	=> array('count_select', 'eq'),			'joined'		=> array('joined', ''),			'active'		=> array('active', ''),			'count'			=> (request_var('count', '') !== '') ? array('count', 0) : array('count', ''),			'ip'			=> array('ip', ''),			'first_char'	=> array('first_char', ''),		);		$u_first_char_params = array();		foreach ($check_params as $key => $call)		{			if (!isset($_REQUEST[$key]))			{				continue;			}			$param = call_user_func_array('request_var', $call);			$param = urlencode($key) . '=' . ((is_string($param)) ? urlencode($param) : $param);			$params[] = $param;			if ($key != 'first_char')			{				$u_first_char_params[] = $param;			}			if ($key != 'sk' && $key != 'sd')			{				$sort_params[] = $param;			}		}		$u_hide_find_member = append_sid("{$phpbb_root_path}memberlist.$phpEx", "start=$start" . (!empty($params) ? '&amp;' . implode('&amp;', $params) : ''));		if ($mode)		{			$params[] = "mode=$mode";		}		$sort_params[] = "mode=$mode";		$pagination_url = append_sid("{$phpbb_root_path}memberlist.$phpEx", implode('&amp;', $params));		$sort_url = append_sid("{$phpbb_root_path}memberlist.$phpEx", implode('&amp;', $sort_params));		unset($search_params, $sort_params);		$u_first_char_params = implode('&amp;', $u_first_char_params);		$u_first_char_params .= ($u_first_char_params) ? '&amp;' : '';		$first_characters = array();		$first_characters[''] = $user->lang['ALL'];		for ($i = 97; $i < 123; $i++)		{			$first_characters[chr($i)] = chr($i - 32);		}		$first_characters['other'] = $user->lang['OTHER'];		foreach ($first_characters as $char => $desc)		{			$template->assign_block_vars('first_char', array(				'DESC'			=> $desc,				'VALUE'			=> $char,				'S_SELECTED'	=> ($first_char == $char) ? true : false,				'U_SORT'		=> append_sid("{$phpbb_root_path}memberlist.$phpEx", $u_first_char_params . 'first_char=' . $char) . '#memberlist',			));		}		// Some search user specific data		if ($mode == 'searchuser' && ($config['load_search'] || $auth->acl_get('a_')))		{			$group_selected = request_var('search_group_id', 0);			$s_group_select = '<option value="0"' . ((!$group_selected) ? ' selected="selected"' : '') . '>&nbsp;</option>';			$group_ids = array();			/**			* @todo add this to a separate function (function is responsible for returning the groups the user is able to see based on the users group membership)			*/			if ($auth->acl_gets('a_group', 'a_groupadd', 'a_groupdel'))			{				$sql = 'SELECT group_id, group_name, group_type					FROM ' . GROUPS_TABLE;				if (!$config['coppa_enable'])				{					$sql .= " WHERE group_name <> 'REGISTERED_COPPA'";				}				$sql .= ' ORDER BY group_name ASC';			}			else			{				$sql = 'SELECT g.group_id, g.group_name, g.group_type					FROM ' . GROUPS_TABLE . ' g					LEFT JOIN ' . USER_GROUP_TABLE . ' ug						ON (							g.group_id = ug.group_id							AND ug.user_id = ' . $user->data['user_id'] . '							AND ug.user_pending = 0						)					WHERE (g.group_type <> ' . GROUP_HIDDEN . ' OR ug.user_id = ' . $user->data['user_id'] . ')';				if (!$config['coppa_enable'])				{					$sql .= " AND g.group_name <> 'REGISTERED_COPPA'";				}				$sql .= ' ORDER BY g.group_name ASC';			}			$result = $db->sql_query($sql);			while ($row = $db->sql_fetchrow($result))			{				$group_ids[] = $row['group_id'];				$s_group_select .= '<option value="' . $row['group_id'] . '"' . (($group_selected == $row['group_id']) ? ' selected="selected"' : '') . '>' . (($row['group_type'] == GROUP_SPECIAL) ? $user->lang['G_' . $row['group_name']] : $row['group_name']) . '</option>';			}			$db->sql_freeresult($result);			if ($group_selected !== 0 && !in_array($group_selected, $group_ids))			{				trigger_error('NO_GROUP');			}			$template->assign_vars(array(				'USERNAME'	=> $username,				'EMAIL'		=> $email,				'ICQ'		=> $icq,				'AIM'		=> $aim,				'YAHOO'		=> $yahoo,				'MSNM'		=> $msn,				'JABBER'	=> $jabber,				'JOINED'	=> implode('-', $joined),				'ACTIVE'	=> implode('-', $active),				'COUNT'		=> $count,				'IP'		=> $ipdomain,				'S_IP_SEARCH_ALLOWED'	=> ($auth->acl_getf_global('m_info')) ? true : false,				'S_EMAIL_SEARCH_ALLOWED'=> ($auth->acl_get('a_user')) ? true : false,				'S_IN_SEARCH_POPUP'		=> ($form && $field) ? true : false,				'S_SEARCH_USER'			=> true,				'S_FORM_NAME'			=> $form,				'S_FIELD_NAME'			=> $field,				'S_SELECT_SINGLE'		=> $select_single,				'S_COUNT_OPTIONS'		=> $s_find_count,				'S_SORT_OPTIONS'		=> $s_sort_key,				'S_JOINED_TIME_OPTIONS'	=> $s_find_join_time,				'S_ACTIVE_TIME_OPTIONS'	=> $s_find_active_time,				'S_GROUP_SELECT'		=> $s_group_select,				'S_USER_SEARCH_ACTION'	=> append_sid("{$phpbb_root_path}memberlist.$phpEx", "mode=searchuser&amp;form=$form&amp;field=$field"))			);		}		// Get us some users :D		$sql = "SELECT u.user_id			FROM " . USERS_TABLE . " u				$sql_from			WHERE u.user_type IN (" . USER_NORMAL . ', ' . USER_FOUNDER . ")				$sql_where			ORDER BY $order_by";		$result = $db->sql_query_limit($sql, $config['topics_per_page'], $start);		$user_list = array();		while ($row = $db->sql_fetchrow($result))		{			$user_list[] = (int) $row['user_id'];		}		$db->sql_freeresult($result);		$leaders_set = false;		// So, did we get any users?		if (sizeof($user_list))		{			// Session time?! Session time...			$sql = 'SELECT session_user_id, MAX(session_time) AS session_time				FROM ' . SESSIONS_TABLE . '				WHERE session_time >= ' . (time() - $config['session_length']) . '					AND ' . $db->sql_in_set('session_user_id', $user_list) . '				GROUP BY session_user_id';			$result = $db->sql_query($sql);			$session_times = array();			while ($row = $db->sql_fetchrow($result))			{				$session_times[$row['session_user_id']] = $row['session_time'];			}			$db->sql_freeresult($result);			// Do the SQL thang			if ($mode == 'group')			{				$sql = "SELECT u.*						$sql_select					FROM " . USERS_TABLE . " u						$sql_from					WHERE " . $db->sql_in_set('u.user_id', $user_list) . "						$sql_where_data";			}			else			{				$sql = 'SELECT *					FROM ' . USERS_TABLE . '					WHERE ' . $db->sql_in_set('user_id', $user_list);			}			$result = $db->sql_query($sql);			$id_cache = array();			while ($row = $db->sql_fetchrow($result))			{				$row['session_time'] = (!empty($session_times[$row['user_id']])) ? $session_times[$row['user_id']] : 0;				$row['last_visit'] = (!empty($row['session_time'])) ? $row['session_time'] : $row['user_lastvisit'];				$id_cache[$row['user_id']] = $row;			}			$db->sql_freeresult($result);			// Load custom profile fields			if ($config['load_cpf_memberlist'])			{				include_once($phpbb_root_path . 'includes/functions_profile_fields.' . $phpEx);				$cp = new custom_profile();				// Grab all profile fields from users in id cache for later use - similar to the poster cache				$profile_fields_cache = $cp->generate_profile_fields_template('grab', $user_list);			}			// If we sort by last active date we need to adjust the id cache due to user_lastvisit not being the last active date...			if ($sort_key == 'l')			{//				uasort($id_cache, create_function('$first, $second', "return (\$first['last_visit'] == \$second['last_visit']) ? 0 : ((\$first['last_visit'] < \$second['last_visit']) ? $lesser_than : ($lesser_than * -1));"));				usort($user_list,  '_sort_last_active');			}			for ($i = 0, $end = sizeof($user_list); $i < $end; ++$i)			{				$user_id = $user_list[$i];				$row =& $id_cache[$user_id];				$is_leader = (isset($row['group_leader']) && $row['group_leader']) ? true : false;				$leaders_set = ($leaders_set || $is_leader);				$cp_row = array();				if ($config['load_cpf_memberlist'])				{					$cp_row = (isset($profile_fields_cache[$user_id])) ? $cp->generate_profile_fields_template('show', false, $profile_fields_cache[$user_id]) : array();				}				$memberrow = array_merge(show_profile($row), array(					'ROW_NUMBER'		=> $i + ($start + 1),					'S_CUSTOM_PROFILE'	=> (isset($cp_row['row']) && sizeof($cp_row['row'])) ? true : false,					'S_GROUP_LEADER'	=> $is_leader,					'U_VIEW_PROFILE'	=> append_sid("{$phpbb_root_path}memberlist.$phpEx", 'mode=viewprofile&amp;u=' . $user_id))				);				if (isset($cp_row['row']) && sizeof($cp_row['row']))				{					$memberrow = array_merge($memberrow, $cp_row['row']);				}				$template->assign_block_vars('memberrow', $memberrow);				if (isset($cp_row['blockrow']) && sizeof($cp_row['blockrow']))				{					foreach ($cp_row['blockrow'] as $field_data)					{						$template->assign_block_vars('memberrow.custom_fields', $field_data);					}				}				unset($id_cache[$user_id]);			}		}		// Generate page		$template->assign_vars(array(			'PAGINATION'	=> generate_pagination($pagination_url, $total_users, $config['topics_per_page'], $start),			'PAGE_NUMBER'	=> on_page($total_users, $config['topics_per_page'], $start),			'TOTAL_USERS'	=> ($total_users == 1) ? $user->lang['LIST_USER'] : sprintf($user->lang['LIST_USERS'], $total_users),			'PROFILE_IMG'	=> $user->img('icon_user_profile', $user->lang['PROFILE']),			'PM_IMG'		=> $user->img('icon_contact_pm', $user->lang['SEND_PRIVATE_MESSAGE']),			'EMAIL_IMG'		=> $user->img('icon_contact_email', $user->lang['EMAIL']),			'WWW_IMG'		=> $user->img('icon_contact_www', $user->lang['WWW']),			'ICQ_IMG'		=> $user->img('icon_contact_icq', $user->lang['ICQ']),			'AIM_IMG'		=> $user->img('icon_contact_aim', $user->lang['AIM']),			'MSN_IMG'		=> $user->img('icon_contact_msnm', $user->lang['MSNM']),			'YIM_IMG'		=> $user->img('icon_contact_yahoo', $user->lang['YIM']),			'JABBER_IMG'	=> $user->img('icon_contact_jabber', $user->lang['JABBER']),			'SEARCH_IMG'	=> $user->img('icon_user_search', $user->lang['SEARCH']),			'U_FIND_MEMBER'			=> ($config['load_search'] || $auth->acl_get('a_')) ? append_sid("{$phpbb_root_path}memberlist.$phpEx", 'mode=searchuser' . (($start) ? "&amp;start=$start" : '') . (!empty($params) ? '&amp;' . implode('&amp;', $params) : '')) : '',			'U_HIDE_FIND_MEMBER'	=> ($mode == 'searchuser') ? $u_hide_find_member : '',			'U_SORT_USERNAME'		=> $sort_url . '&amp;sk=a&amp;sd=' . (($sort_key == 'a' && $sort_dir == 'a') ? 'd' : 'a'),			'U_SORT_FROM'			=> $sort_url . '&amp;sk=b&amp;sd=' . (($sort_key == 'b' && $sort_dir == 'a') ? 'd' : 'a'),			'U_SORT_JOINED'			=> $sort_url . '&amp;sk=c&amp;sd=' . (($sort_key == 'c' && $sort_dir == 'a') ? 'd' : 'a'),			'U_SORT_POSTS'			=> $sort_url . '&amp;sk=d&amp;sd=' . (($sort_key == 'd' && $sort_dir == 'a') ? 'd' : 'a'),			'U_SORT_EMAIL'			=> $sort_url . '&amp;sk=e&amp;sd=' . (($sort_key == 'e' && $sort_dir == 'a') ? 'd' : 'a'),			'U_SORT_WEBSITE'		=> $sort_url . '&amp;sk=f&amp;sd=' . (($sort_key == 'f' && $sort_dir == 'a') ? 'd' : 'a'),			'U_SORT_LOCATION'		=> $sort_url . '&amp;sk=b&amp;sd=' . (($sort_key == 'b' && $sort_dir == 'a') ? 'd' : 'a'),			'U_SORT_ICQ'			=> $sort_url . '&amp;sk=g&amp;sd=' . (($sort_key == 'g' && $sort_dir == 'a') ? 'd' : 'a'),			'U_SORT_AIM'			=> $sort_url . '&amp;sk=h&amp;sd=' . (($sort_key == 'h' && $sort_dir == 'a') ? 'd' : 'a'),			'U_SORT_MSN'			=> $sort_url . '&amp;sk=i&amp;sd=' . (($sort_key == 'i' && $sort_dir == 'a') ? 'd' : 'a'),			'U_SORT_YIM'			=> $sort_url . '&amp;sk=j&amp;sd=' . (($sort_key == 'j' && $sort_dir == 'a') ? 'd' : 'a'),			'U_SORT_ACTIVE'			=> ($auth->acl_get('u_viewonline')) ? $sort_url . '&amp;sk=l&amp;sd=' . (($sort_key == 'l' && $sort_dir == 'a') ? 'd' : 'a') : '',			'U_SORT_RANK'			=> $sort_url . '&amp;sk=m&amp;sd=' . (($sort_key == 'm' && $sort_dir == 'a') ? 'd' : 'a'),			'U_LIST_CHAR'			=> $sort_url . '&amp;sk=a&amp;sd=' . (($sort_key == 'l' && $sort_dir == 'a') ? 'd' : 'a'),			'S_SHOW_GROUP'		=> ($mode == 'group') ? true : false,			'S_VIEWONLINE'		=> $auth->acl_get('u_viewonline'),			'S_LEADERS_SET'		=> $leaders_set,			'S_MODE_SELECT'		=> $s_sort_key,			'S_ORDER_SELECT'	=> $s_sort_dir,			'S_MODE_ACTION'		=> $pagination_url)		);}// Output the pagepage_header($page_title, false);$template->set_filenames(array(	'body' => $template_html));make_jumpbox(append_sid("{$phpbb_root_path}viewforum.$phpEx"));page_footer();/*** Prepare profile data*/function show_profile($data, $user_notes_enabled = false, $warn_user_enabled = false){	global $config, $auth, $template, $user, $phpEx, $phpbb_root_path;	$username = $data['username'];	$user_id = $data['user_id'];	$rank_title = $rank_img = $rank_img_src = '';	get_user_rank($data['user_rank'], (($user_id == ANONYMOUS) ? false : $data['user_posts']), $rank_title, $rank_img, $rank_img_src);	if ((!empty($data['user_allow_viewemail']) && $auth->acl_get('u_sendemail')) || $auth->acl_get('a_user'))	{		$email = ($config['board_email_form'] && $config['email_enable']) ? append_sid("{$phpbb_root_path}memberlist.$phpEx", 'mode=email&amp;u=' . $user_id) : (($config['board_hide_emails'] && !$auth->acl_get('a_user')) ? '' : 'mailto:' . $data['user_email']);	}	else	{		$email = '';	}	if ($config['load_onlinetrack'])	{		$update_time = $config['load_online_time'] * 60;		$online = (time() - $update_time < $data['session_time'] && ((isset($data['session_viewonline']) && $data['session_viewonline']) || $auth->acl_get('u_viewonline'))) ? true : false;	}	else	{		$online = false;	}	if ($data['user_allow_viewonline'] || $auth->acl_get('u_viewonline'))	{		$last_visit = (!empty($data['session_time'])) ? $data['session_time'] : $data['user_lastvisit'];	}	else	{		$last_visit = '';	}	$age = '';	if ($config['allow_birthdays'] && $data['user_birthday'])	{		list($bday_day, $bday_month, $bday_year) = array_map('intval', explode('-', $data['user_birthday']));		if ($bday_year)		{			$now = phpbb_gmgetdate(time() + $user->timezone + $user->dst);			$diff = $now['mon'] - $bday_month;			if ($diff == 0)			{				$diff = ($now['mday'] - $bday_day < 0) ? 1 : 0;			}			else			{				$diff = ($diff < 0) ? 1 : 0;			}			$age = max(0, (int) ($now['year'] - $bday_year - $diff));		}	}	// Dump it out to the template	return array(		'AGE'			=> $age,		'RANK_TITLE'	=> $rank_title,		'JOINED'		=> $user->format_date($data['user_regdate']),		'VISITED'		=> (empty($last_visit)) ? ' - ' : $user->format_date($last_visit),		'POSTS'			=> ($data['user_posts']) ? $data['user_posts'] : 0,		'WARNINGS'		=> isset($data['user_warnings']) ? $data['user_warnings'] : 0,		'USERNAME_FULL'		=> get_username_string('full', $user_id, $username, $data['user_colour']),		'USERNAME'			=> get_username_string('username', $user_id, $username, $data['user_colour']),		'USER_COLOR'		=> get_username_string('colour', $user_id, $username, $data['user_colour']),		'U_VIEW_PROFILE'	=> get_username_string('profile', $user_id, $username, $data['user_colour']),		'A_USERNAME'		=> addslashes(get_username_string('username', $user_id, $username, $data['user_colour'])),		'AVATAR_IMG'		=> get_user_avatar($data['user_avatar'], $data['user_avatar_type'], $data['user_avatar_width'], $data['user_avatar_height']),		'ONLINE_IMG'		=> (!$config['load_onlinetrack']) ? '' : (($online) ? $user->img('icon_user_online', 'ONLINE') : $user->img('icon_user_offline', 'OFFLINE')),		'S_ONLINE'			=> ($config['load_onlinetrack'] && $online) ? true : false,		'RANK_IMG'			=> $rank_img,		'RANK_IMG_SRC'		=> $rank_img_src,		'ICQ_STATUS_IMG'	=> (!empty($data['user_icq'])) ? '<img src="http://web.icq.com/whitepages/online?icq=' . $data['user_icq'] . '&amp;img=5" width="18" height="18" />' : '',		'S_JABBER_ENABLED'	=> ($config['jab_enable']) ? true : false,		'S_WARNINGS'	=> ($auth->acl_getf_global('m_') || $auth->acl_get('m_warn')) ? true : false,		'U_SEARCH_USER'	=> ($auth->acl_get('u_search')) ? append_sid("{$phpbb_root_path}search.$phpEx", "author_id=$user_id&amp;sr=posts") : '',		'U_NOTES'		=> ($user_notes_enabled && $auth->acl_getf_global('m_')) ? append_sid("{$phpbb_root_path}mcp.$phpEx", 'i=notes&amp;mode=user_notes&amp;u=' . $user_id, true, $user->session_id) : '',		'U_WARN'		=> ($warn_user_enabled && $auth->acl_get('m_warn')) ? append_sid("{$phpbb_root_path}mcp.$phpEx", 'i=warn&amp;mode=warn_user&amp;u=' . $user_id, true, $user->session_id) : '',		'U_PM'			=> ($config['allow_privmsg'] && $auth->acl_get('u_sendpm') && ($data['user_allow_pm'] || $auth->acl_gets('a_', 'm_') || $auth->acl_getf_global('m_'))) ? append_sid("{$phpbb_root_path}ucp.$phpEx", 'i=pm&amp;mode=compose&amp;u=' . $user_id) : '',		'U_EMAIL'		=> $email,		'U_WWW'			=> (!empty($data['user_website'])) ? $data['user_website'] : '',		'U_SHORT_WWW'			=> (!empty($data['user_website'])) ? ((strlen($data['user_website']) > 55) ? substr($data['user_website'], 0, 39) . ' ... ' . substr($data['user_website'], -10) : $data['user_website']) : '',		'U_ICQ'			=> ($data['user_icq']) ? 'http://www.icq.com/people/' . urlencode($data['user_icq']) . '/' : '',		'U_AIM'			=> ($data['user_aim'] && $auth->acl_get('u_sendim')) ? append_sid("{$phpbb_root_path}memberlist.$phpEx", 'mode=contact&amp;action=aim&amp;u=' . $user_id) : '',		'U_YIM'			=> ($data['user_yim']) ? 'http://edit.yahoo.com/config/send_webmesg?.target=' . urlencode($data['user_yim']) . '&amp;.src=pg' : '',		'U_MSN'			=> ($data['user_msnm'] && $auth->acl_get('u_sendim')) ? append_sid("{$phpbb_root_path}memberlist.$phpEx", 'mode=contact&amp;action=msnm&amp;u=' . $user_id) : '',		'U_JABBER'		=> ($data['user_jabber'] && $auth->acl_get('u_sendim')) ? append_sid("{$phpbb_root_path}memberlist.$phpEx", 'mode=contact&amp;action=jabber&amp;u=' . $user_id) : '',		'LOCATION'		=> ($data['user_from']) ? $data['user_from'] : '',		'USER_ICQ'			=> $data['user_icq'],		'USER_AIM'			=> $data['user_aim'],		'USER_YIM'			=> $data['user_yim'],		'USER_MSN'			=> $data['user_msnm'],		'USER_JABBER'		=> $data['user_jabber'],		'USER_JABBER_IMG'	=> ($data['user_jabber']) ? $user->img('icon_contact_jabber', $data['user_jabber']) : '',		'L_VIEWING_PROFILE'	=> sprintf($user->lang['VIEWING_PROFILE'], $username),	);}function _sort_last_active($first, $second){	global $id_cache, $sort_dir;	$lesser_than = ($sort_dir === 'd') ? -1 : 1;	if (isset($id_cache[$first]['group_leader']) && $id_cache[$first]['group_leader'] && (!isset($id_cache[$second]['group_leader']) || !$id_cache[$second]['group_leader']))	{		return -1;	}	else if (isset($id_cache[$second]['group_leader']) && (!isset($id_cache[$first]['group_leader']) || !$id_cache[$first]['group_leader']) && $id_cache[$second]['group_leader'])	{		return 1;	}	else	{		return $lesser_than * (int) ($id_cache[$first]['last_visit'] - $id_cache[$second]['last_visit']);	}}?>
<?php/**** @package acp* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @package module_install*/class acp_language_info{	function module()	{		return array(			'filename'	=> 'acp_language',			'title'		=> 'ACP_LANGUAGE',			'version'	=> '1.0.0',			'modes'		=> array(				'lang_packs'		=> array('title' => 'ACP_LANGUAGE_PACKS', 'auth' => 'acl_a_language', 'cat' => array('ACP_GENERAL_TASKS')),			),		);	}	function install()	{	}	function uninstall()	{	}}?>
<?php return array(''=>'ss',''=>'i',''=>'n',''=>'j',''=>'',''=>'',''=>'',''=>'h',''=>'t',''=>'w',''=>'y',''=>'a',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'ff',''=>'fi',''=>'fl',''=>'ffi',''=>'ffl',''=>'st',''=>'st',''=>'',''=>'',''=>'',''=>'',''=>'');
<?php/**** acp_language [English]** @package language* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** DO NOT CHANGE*/if (!defined('IN_PHPBB')){	exit;}if (empty($lang) || !is_array($lang)){	$lang = array();}// DEVELOPERS PLEASE NOTE//// All language files should use UTF-8 as their encoding and the files must not contain a BOM.//// Placeholders can now contain order information, e.g. instead of// 'Page %s of %s' you can (and should) write 'Page %1$s of %2$s', this allows// translators to re-order the output of data while ensuring it remains correct//// You do not need this where single placeholders are used, e.g. 'Message %d' is fine// equally where a string contains only two placeholders which are used to wrap text// in a url you again do not need to specify an order e.g., 'Click %sHERE%s' is fine$lang = array_merge($lang, array(	'ACP_FILES'						=> 'Admin language files',	'ACP_LANGUAGE_PACKS_EXPLAIN'	=> 'Here you are able to install/remove language packs. The default language pack is marked with an asterisk (*).',	'EMAIL_FILES'			=> 'E-mail templates',	'FILE_CONTENTS'				=> 'File contents',	'FILE_FROM_STORAGE'			=> 'File from storage folder',	'HELP_FILES'				=> 'Help files',	'INSTALLED_LANGUAGE_PACKS'	=> 'Installed language packs',	'INVALID_LANGUAGE_PACK'		=> 'The selected language pack seems to be not valid. Please verify the language pack and upload it again if necessary.',	'INVALID_UPLOAD_METHOD'		=> 'The selected upload method is not valid, please choose a different method.',	'LANGUAGE_DETAILS_UPDATED'			=> 'Language details successfully updated.',	'LANGUAGE_ENTRIES'					=> 'Language entries',	'LANGUAGE_ENTRIES_EXPLAIN'			=> 'Here you are able to change existing language pack entries or not already translated ones.<br /><strong>Note:</strong> Once you changed a language file, the changes will be stored within a separate folder for you to download. The changes will not be seen by your users until you replace the original language files at your webspace (by uploading them).',	'LANGUAGE_FILES'					=> 'Language files',	'LANGUAGE_KEY'						=> 'Language key',	'LANGUAGE_PACK_ALREADY_INSTALLED'	=> 'This language pack is already installed.',	'LANGUAGE_PACK_DELETED'				=> 'The language pack <strong>%s</strong> has been removed successfully. All users using this language have been reset to the boards default language.',	'LANGUAGE_PACK_DETAILS'				=> 'Language pack details',	'LANGUAGE_PACK_INSTALLED'			=> 'The language pack <strong>%s</strong> has been successfully installed.',	'LANGUAGE_PACK_CPF_UPDATE'			=> 'The custom profile fields language strings were copied from the default language. Please change them if necessary.',	'LANGUAGE_PACK_ISO'					=> 'ISO',	'LANGUAGE_PACK_LOCALNAME'			=> 'Local name',	'LANGUAGE_PACK_NAME'				=> 'Name',	'LANGUAGE_PACK_NOT_EXIST'			=> 'The selected language pack does not exist.',	'LANGUAGE_PACK_USED_BY'				=> 'Used by (including robots)',	'LANGUAGE_VARIABLE'					=> 'Language variable',	'LANG_AUTHOR'						=> 'Language pack author',	'LANG_ENGLISH_NAME'					=> 'English name',	'LANG_ISO_CODE'						=> 'ISO code',	'LANG_LOCAL_NAME'					=> 'Local name',	'MISSING_LANGUAGE_FILE'		=> 'Missing language file: <strong style="color:red">%s</strong>',	'MISSING_LANG_VARIABLES'	=> 'Missing language variables',	'MODS_FILES'				=> 'MODs language files',	'NO_FILE_SELECTED'				=> 'You havent specified a language file.',	'NO_LANG_ID'					=> 'You havent specified a language pack.',	'NO_REMOVE_DEFAULT_LANG'		=> 'You are not able to remove the default language pack.<br />If you want to remove this language pack, change your boards default language first.',	'NO_UNINSTALLED_LANGUAGE_PACKS'	=> 'No uninstalled language packs',	'REMOVE_FROM_STORAGE_FOLDER'		=> 'Remove from storage folder',	'SELECT_DOWNLOAD_FORMAT'	=> 'Select download format',	'SUBMIT_AND_DOWNLOAD'		=> 'Submit and download file',	'SUBMIT_AND_UPLOAD'			=> 'Submit and upload file',	'THOSE_MISSING_LANG_FILES'			=> 'The following language files are missing from the %s language folder',	'THOSE_MISSING_LANG_VARIABLES'		=> 'The following language variables are missing from the <strong>%s</strong> language pack',	'UNINSTALLED_LANGUAGE_PACKS'	=> 'Uninstalled language packs',	'UNABLE_TO_WRITE_FILE'		=> 'The file could not be written to %s.',	'UPLOAD_COMPLETED'			=> 'The upload was completed successfully.',	'UPLOAD_FAILED'				=> 'The upload failed for unknown reasons. You may need to replace the relevant file manually.',	'UPLOAD_METHOD'				=> 'Upload method',	'UPLOAD_SETTINGS'			=> 'Upload settings',	'WRONG_LANGUAGE_FILE'		=> 'Selected language file is invalid.',));?>
<?php/**** @package acp* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @ignore*/if (!defined('IN_PHPBB')){	exit;}include($phpbb_root_path . 'includes/questionnaire/questionnaire.' . $phpEx);/*** @package acp*/class acp_send_statistics{	var $u_action;	function main($id, $mode)	{		global $config, $template, $phpbb_admin_path, $phpEx;		$collect_url = "http://www.phpbb.com/stats/receive_stats.php";		$this->tpl_name = 'acp_send_statistics';		$this->page_title = 'ACP_SEND_STATISTICS';		// generate a unique id if necessary		if (!isset($config['questionnaire_unique_id']))		{			$install_id = unique_id();			set_config('questionnaire_unique_id', $install_id);		}		else		{			$install_id = $config['questionnaire_unique_id'];		}		$collector = new phpbb_questionnaire_data_collector($install_id);		// Add data provider		$collector->add_data_provider(new phpbb_questionnaire_php_data_provider());		$collector->add_data_provider(new phpbb_questionnaire_system_data_provider());		$collector->add_data_provider(new phpbb_questionnaire_phpbb_data_provider($config));		$template->assign_vars(array(			'U_COLLECT_STATS'	=> $collect_url,			'RAW_DATA'			=> $collector->get_data_for_form(),			'U_ACP_MAIN'		=> append_sid("{$phpbb_admin_path}index.$phpEx"),		));		$raw = $collector->get_data_raw();		foreach ($raw as $provider => $data)		{			if ($provider == 'install_id')			{				$data = array($provider => $data);			}			$template->assign_block_vars('providers', array(				'NAME'	=> htmlspecialchars($provider),			));			foreach ($data as $key => $value)			{				if (is_array($value))				{					$value = utf8_wordwrap(serialize($value), 75, "\n", true);				}				$template->assign_block_vars('providers.values', array(					'KEY'	=> utf8_htmlspecialchars($key),					'VALUE'	=> utf8_htmlspecialchars($value),				));			}		}	}}?>
<?php/**** @package mcp* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @package module_install*/class mcp_queue_info{	function module()	{		return array(			'filename'	=> 'mcp_queue',			'title'		=> 'MCP_QUEUE',			'version'	=> '1.0.0',			'modes'		=> array(				'unapproved_topics'	=> array('title' => 'MCP_QUEUE_UNAPPROVED_TOPICS', 'auth' => 'aclf_m_approve', 'cat' => array('MCP_QUEUE')),				'unapproved_posts'	=> array('title' => 'MCP_QUEUE_UNAPPROVED_POSTS', 'auth' => 'aclf_m_approve', 'cat' => array('MCP_QUEUE')),				'approve_details'	=> array('title' => 'MCP_QUEUE_APPROVE_DETAILS', 'auth' => 'acl_m_approve,$id || (!$id && aclf_m_approve)', 'cat' => array('MCP_QUEUE')),			),		);	}	function install()	{	}	function uninstall()	{	}}?>
<?php/*** Only adjust bitfields, do not rewrite text...* All new parsings have the img, flash and quote modes set to true** You should make a backup from your users, posts and privmsgs table in case something goes wrong* Forum descriptions and rules need to be re-submitted manually.*/die("Please read the first lines of this script for instructions on how to enable it");set_time_limit(0);define('IN_PHPBB', true);$phpbb_root_path = './../';$phpEx = substr(strrchr(__FILE__, '.'), 1);include($phpbb_root_path . 'common.'.$phpEx);include($phpbb_root_path . 'includes/message_parser.' . $phpEx);// Start session management$user->session_begin();$auth->acl($user->data);$user->setup();$echos = 0;// Adjust user signatures$message_parser = new parse_message();$message_parser->mode = 'sig';$message_parser->bbcode_init();$sql = 'SELECT user_id, user_sig, user_sig_bbcode_uid, user_sig_bbcode_bitfield	FROM ' . USERS_TABLE;$result = $db->sql_query($sql);while ($row = $db->sql_fetchrow($result)){	// Convert bbcodes back to their normal form	if ($row['user_sig_bbcode_uid'] && $row['user_sig'])	{		decode_message($row['user_sig'], $row['user_sig_bbcode_uid']);		$message_parser->message = $row['user_sig'];		$message_parser->prepare_bbcodes();		$message_parser->parse_bbcode();		$bitfield = $message_parser->bbcode_bitfield;		$sql = 'UPDATE ' . USERS_TABLE . " SET user_sig_bbcode_bitfield = '" . $db->sql_escape($bitfield) . "'			WHERE user_id = " . $row['user_id'];		$db->sql_query($sql);		if ($echos > 200)		{			echo '<br />' . "\n";			$echos = 0;		}		echo '.';		$echos++;		flush();	}	else	{		$sql = 'UPDATE ' . USERS_TABLE . " SET user_sig_bbcode_bitfield = ''			WHERE user_id = " . $row['user_id'];		$db->sql_query($sql);	}}$db->sql_freeresult($result);// Now adjust posts$message_parser = new parse_message();$message_parser->mode = 'post';$message_parser->bbcode_init();// Update posts$sql = 'SELECT post_id, post_text, bbcode_uid, enable_bbcode, enable_smilies, enable_sig	FROM ' . POSTS_TABLE;$result = $db->sql_query($sql);while ($row = $db->sql_fetchrow($result)){	// Convert bbcodes back to their normal form	if ($row['enable_bbcode'])	{		decode_message($row['post_text'], $row['bbcode_uid']);		$message_parser->message = $row['post_text'];		$message_parser->prepare_bbcodes();		$message_parser->parse_bbcode();		$bitfield = $message_parser->bbcode_bitfield;		$sql = 'UPDATE ' . POSTS_TABLE . " SET bbcode_bitfield = '" . $db->sql_escape($bitfield) . "'			WHERE post_id = " . $row['post_id'];		$db->sql_query($sql);		if ($echos > 200)		{			echo '<br />' . "\n";			$echos = 0;		}		echo '.';		$echos++;		flush();	}	else	{		$sql = 'UPDATE ' . POSTS_TABLE . " SET bbcode_bitfield = ''			WHERE post_id = " . $row['post_id'];		$db->sql_query($sql);	}}$db->sql_freeresult($result);// Now to the private messages$message_parser = new parse_message();$message_parser->mode = 'post';$message_parser->bbcode_init();// Update pms$sql = 'SELECT msg_id, message_text, bbcode_uid, enable_bbcode	FROM ' . PRIVMSGS_TABLE;$result = $db->sql_query($sql);while ($row = $db->sql_fetchrow($result)){	// Convert bbcodes back to their normal form	if ($row['enable_bbcode'])	{		decode_message($row['message_text'], $row['bbcode_uid']);		$message_parser->message = $row['message_text'];		$message_parser->prepare_bbcodes();		$message_parser->parse_bbcode();		$bitfield = $message_parser->bbcode_bitfield;		$sql = 'UPDATE ' . PRIVMSGS_TABLE . " SET bbcode_bitfield = '" . $db->sql_escape($bitfield) . "'			WHERE msg_id = " . $row['msg_id'];		$db->sql_query($sql);		if ($echos > 200)		{			echo '<br />' . "\n";			$echos = 0;		}		echo '.';		$echos++;		flush();	}	else	{		$sql = 'UPDATE ' . PRIVMSGS_TABLE . " SET bbcode_bitfield = ''			WHERE msg_id = " . $row['msg_id'];		$db->sql_query($sql);	}}$db->sql_freeresult($result);// Done$db->sql_close();?>
<?php/**** acp_database [English]** @package language* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** DO NOT CHANGE*/if (!defined('IN_PHPBB')){	exit;}if (empty($lang) || !is_array($lang)){	$lang = array();}// DEVELOPERS PLEASE NOTE//// All language files should use UTF-8 as their encoding and the files must not contain a BOM.//// Placeholders can now contain order information, e.g. instead of// 'Page %s of %s' you can (and should) write 'Page %1$s of %2$s', this allows// translators to re-order the output of data while ensuring it remains correct//// You do not need this where single placeholders are used, e.g. 'Message %d' is fine// equally where a string contains only two placeholders which are used to wrap text// in a url you again do not need to specify an order e.g., 'Click %sHERE%s' is fine// Database Backup/Restore$lang = array_merge($lang, array(	'ACP_BACKUP_EXPLAIN'	=> 'Here you can backup all your phpBB related data. You may store the resulting archive in your <samp>store/</samp> folder or download it directly. Depending on your server configuration you may be able to compress the file in a number of formats.',	'ACP_RESTORE_EXPLAIN'	=> 'This will perform a full restore of all phpBB tables from a saved file. If your server supports it you may use a gzip or bzip2 compressed text file and it will automatically be decompressed. <strong>WARNING</strong> This will overwrite any existing data. The restore may take a long time to process please do not move from this page till it is complete. Backups are stored in the <samp>store/</samp> folder and are assumed to be generated by phpBBs backup functionality. Restoring backups that were not created by the built in system may or may not work.',	'BACKUP_DELETE'		=> 'The backup file has been deleted successfully.',	'BACKUP_INVALID'	=> 'The selected file to backup is invalid.',	'BACKUP_OPTIONS'	=> 'Backup options',	'BACKUP_SUCCESS'	=> 'The backup file has been created successfully.',	'BACKUP_TYPE'		=> 'Backup type',	'DATABASE'			=> 'Database utilities',	'DATA_ONLY'			=> 'Data only',	'DELETE_BACKUP'		=> 'Delete backup',	'DELETE_SELECTED_BACKUP'	=> 'Are you sure you want to delete the selected backup?',	'DESELECT_ALL'		=> 'Deselect all',	'DOWNLOAD_BACKUP'	=> 'Download backup',	'FILE_TYPE'			=> 'File type',	'FILE_WRITE_FAIL'	=> 'Unable to write file to storage folder.',	'FULL_BACKUP'		=> 'Full',	'RESTORE_FAILURE'		=> 'The backup file may be corrupt.',	'RESTORE_OPTIONS'		=> 'Restore options',	'RESTORE_SELECTED_BACKUP'	=> 'Are you sure you want to restore the selected backup?',	'RESTORE_SUCCESS'		=> 'The database has been successfully restored.<br /><br />Your board should be back to the state it was when the backup was made.',	'SELECT_ALL'			=> 'Select all',	'SELECT_FILE'			=> 'Select a file',	'START_BACKUP'			=> 'Start backup',	'START_RESTORE'			=> 'Start restore',	'STORE_AND_DOWNLOAD'	=> 'Store and download',	'STORE_LOCAL'			=> 'Store file locally',	'STRUCTURE_ONLY'		=> 'Structure only',	'TABLE_SELECT'		=> 'Table select',	'TABLE_SELECT_ERROR'=> 'You must select at least one table.',));?>
<?php/**** @package acp* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License** @todo Check/enter/update transport info*//*** @ignore*/if (!defined('IN_PHPBB')){	exit;}/*** @package acp*/class acp_jabber{	var $u_action;	function main($id, $mode)	{		global $db, $user, $auth, $template;		global $config, $phpbb_root_path, $phpbb_admin_path, $phpEx;		$user->add_lang('acp/board');		include_once($phpbb_root_path . 'includes/functions_jabber.' . $phpEx);		$action	= request_var('action', '');		$submit = (isset($_POST['submit'])) ? true : false;		if ($mode != 'settings')		{			return;		}		$this->tpl_name = 'acp_jabber';		$this->page_title = 'ACP_JABBER_SETTINGS';		$jab_enable			= request_var('jab_enable',			(bool)		$config['jab_enable']);		$jab_host			= request_var('jab_host',			(string)	$config['jab_host']);		$jab_port			= request_var('jab_port',			(int)		$config['jab_port']);		$jab_username		= request_var('jab_username',		(string)	$config['jab_username']);		$jab_password		= request_var('jab_password',		(string)	$config['jab_password']);		$jab_package_size	= request_var('jab_package_size',	(int)		$config['jab_package_size']);		$jab_use_ssl		= request_var('jab_use_ssl',		(bool)		$config['jab_use_ssl']);		$form_name = 'acp_jabber';		add_form_key($form_name);		if ($submit)		{			if (!check_form_key($form_name))			{				trigger_error($user->lang['FORM_INVALID']. adm_back_link($this->u_action), E_USER_WARNING);			}			$error = array();			$message = $user->lang['JAB_SETTINGS_CHANGED'];			$log = 'JAB_SETTINGS_CHANGED';			// Is this feature enabled? Then try to establish a connection			if ($jab_enable)			{				$jabber = new jabber($jab_host, $jab_port, $jab_username, $jab_password, $jab_use_ssl);				if (!$jabber->connect())				{					trigger_error($user->lang['ERR_JAB_CONNECT'] . '<br /><br />' . $jabber->get_log() . adm_back_link($this->u_action), E_USER_WARNING);				}				// We'll try to authorise using this account				if (!$jabber->login())				{					trigger_error($user->lang['ERR_JAB_AUTH'] . '<br /><br />' . $jabber->get_log() . adm_back_link($this->u_action), E_USER_WARNING);				}				$jabber->disconnect();			}			else			{				// This feature is disabled.				// We update the user table to be sure all users that have IM as notify type are set to both as notify type				// We set this to both because users still have their jabber address entered and may want to receive jabber notifications again once it is re-enabled.				$sql_ary = array(					'user_notify_type'		=> NOTIFY_BOTH,				);				$sql = 'UPDATE ' . USERS_TABLE . '					SET ' . $db->sql_build_array('UPDATE', $sql_ary) . '					WHERE user_notify_type = ' . NOTIFY_IM;				$db->sql_query($sql);			}			set_config('jab_enable', $jab_enable);			set_config('jab_host', $jab_host);			set_config('jab_port', $jab_port);			set_config('jab_username', $jab_username);			set_config('jab_password', $jab_password);			set_config('jab_package_size', $jab_package_size);			set_config('jab_use_ssl', $jab_use_ssl);			add_log('admin', 'LOG_' . $log);			trigger_error($message . adm_back_link($this->u_action));		}		$template->assign_vars(array(			'U_ACTION'				=> $this->u_action,			'JAB_ENABLE'			=> $jab_enable,			'L_JAB_SERVER_EXPLAIN'	=> sprintf($user->lang['JAB_SERVER_EXPLAIN'], '<a href="http://www.jabber.org/">', '</a>'),			'JAB_HOST'				=> $jab_host,			'JAB_PORT'				=> ($jab_port) ? $jab_port : '',			'JAB_USERNAME'			=> $jab_username,			'JAB_PASSWORD'			=> $jab_password,			'JAB_PACKAGE_SIZE'		=> $jab_package_size,			'JAB_USE_SSL'			=> $jab_use_ssl,			'S_CAN_USE_SSL'			=> jabber::can_use_ssl(),			'S_GTALK_NOTE'			=> (!@function_exists('dns_get_record')) ? true : false,		));	}}?>
<?php/**** @package acp* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License*//*** @ignore*/if (!defined('IN_PHPBB')){	exit;}/*** @package acp*/class acp_captcha{	var $u_action;	function main($id, $mode)	{		global $db, $user, $auth, $template;		global $config, $phpbb_root_path, $phpbb_admin_path, $phpEx;		$user->add_lang('acp/board');		include($phpbb_root_path . 'includes/captcha/captcha_factory.' . $phpEx);		$captchas = phpbb_captcha_factory::get_captcha_types();		$selected = request_var('select_captcha', $config['captcha_plugin']);		$selected = (isset($captchas['available'][$selected]) || isset($captchas['unavailable'][$selected])) ? $selected : $config['captcha_plugin'];		$configure = request_var('configure', false);		// Oh, they are just here for the view		if (isset($_GET['captcha_demo']))		{			$this->deliver_demo($selected);		}		// Delegate		if ($configure)		{			$config_captcha =& phpbb_captcha_factory::get_instance($selected);			$config_captcha->acp_page($id, $this);		}		else		{			$config_vars = array(				'enable_confirm'		=> array('tpl' => 'REG_ENABLE', 'default' => false),				'enable_post_confirm'	=> array('tpl' => 'POST_ENABLE', 'default' => false),				'confirm_refresh'		=> array('tpl' => 'CONFIRM_REFRESH', 'default' => false),				'max_reg_attempts'		=> array('tpl' => 'REG_LIMIT', 'default' => 0),				'max_login_attempts'		=> array('tpl' => 'MAX_LOGIN_ATTEMPTS', 'default' => 0),			);			$this->tpl_name = 'acp_captcha';			$this->page_title = 'ACP_VC_SETTINGS';			$form_key = 'acp_captcha';			add_form_key($form_key);			$submit = request_var('main_submit', false);			if ($submit && check_form_key($form_key))			{				foreach ($config_vars as $config_var => $options)				{					set_config($config_var, request_var($config_var, $options['default']));				}				if ($selected !== $config['captcha_plugin'])				{					// sanity check					if (isset($captchas['available'][$selected]))					{						$old_captcha =& phpbb_captcha_factory::get_instance($config['captcha_plugin']);						$old_captcha->uninstall();						set_config('captcha_plugin', $selected);						$new_captcha =& phpbb_captcha_factory::get_instance($config['captcha_plugin']);						$new_captcha->install();						add_log('admin', 'LOG_CONFIG_VISUAL');					}					else					{						trigger_error($user->lang['CAPTCHA_UNAVAILABLE'] . adm_back_link($this->u_action), E_USER_WARNING);					}				}				trigger_error($user->lang['CONFIG_UPDATED'] . adm_back_link($this->u_action));			}			else if ($submit)			{				trigger_error($user->lang['FORM_INVALID'] . adm_back_link(), E_USER_WARNING);			}			else			{				$captcha_select = '';				foreach ($captchas['available'] as $value => $title)				{					$current = ($selected !== false && $value == $selected) ? ' selected="selected"' : '';					$captcha_select .= '<option value="' . $value . '"' . $current . '>' . $user->lang[$title] . '</option>';				}				foreach ($captchas['unavailable'] as $value => $title)				{					$current = ($selected !== false && $value == $selected) ? ' selected="selected"' : '';					$captcha_select .= '<option value="' . $value . '"' . $current . ' class="disabled-option">' . $user->lang[$title] . '</option>';				}				$demo_captcha =& phpbb_captcha_factory::get_instance($selected);				foreach ($config_vars as $config_var => $options)				{					$template->assign_var($options['tpl'], (isset($_POST[$config_var])) ? request_var($config_var, $options['default']) : $config[$config_var]) ;				}				$template->assign_vars(array(					'CAPTCHA_PREVIEW_TPL'	=> $demo_captcha->get_demo_template($id),					'S_CAPTCHA_HAS_CONFIG'	=> $demo_captcha->has_config(),					'CAPTCHA_SELECT'		=> $captcha_select,				));			}		}	}	/**	* Entry point for delivering image CAPTCHAs in the ACP.	*/	function deliver_demo($selected)	{		global $db, $user, $config;		$captcha =& phpbb_captcha_factory::get_instance($selected);		$captcha->init(CONFIRM_REG);		$captcha->execute_demo();		garbage_collection();		exit_handler();	}}?>
<?php/**** acp_modules [English]** @package language* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** DO NOT CHANGE*/if (!defined('IN_PHPBB')){	exit;}if (empty($lang) || !is_array($lang)){	$lang = array();}// DEVELOPERS PLEASE NOTE//// All language files should use UTF-8 as their encoding and the files must not contain a BOM.//// Placeholders can now contain order information, e.g. instead of// 'Page %s of %s' you can (and should) write 'Page %1$s of %2$s', this allows// translators to re-order the output of data while ensuring it remains correct//// You do not need this where single placeholders are used, e.g. 'Message %d' is fine// equally where a string contains only two placeholders which are used to wrap text// in a url you again do not need to specify an order e.g., 'Click %sHERE%s' is fine$lang = array_merge($lang, array(	'ACP_MODULE_MANAGEMENT_EXPLAIN'	=> 'Here you are able to manage all kind of modules. Please note that the ACP has a three-level menu structure (Category -> Category -> Module) whereby the others having a two-level menu structure (Category -> Module) which must be kept. Please also be aware that you may lock out yourself if you disable or delete the modules responsible for the module management itself.',	'ADD_MODULE'					=> 'Add module',	'ADD_MODULE_CONFIRM'			=> 'Are you sure you want to add the selected module with the selected mode?',	'ADD_MODULE_TITLE'				=> 'Add module',	'CANNOT_REMOVE_MODULE'	=> 'Unable to remove module, it has assigned children. Please remove or move all children before performing this action.',	'CATEGORY'				=> 'Category',	'CHOOSE_MODE'			=> 'Choose module mode',	'CHOOSE_MODE_EXPLAIN'	=> 'Choose the modules mode being used.',	'CHOOSE_MODULE'			=> 'Choose module',	'CHOOSE_MODULE_EXPLAIN'	=> 'Choose the file being called by this module.',	'CREATE_MODULE'			=> 'Create new module',	'DEACTIVATED_MODULE'	=> 'Deactivated module',	'DELETE_MODULE'			=> 'Delete module',	'DELETE_MODULE_CONFIRM'	=> 'Are you sure you want to remove this module?',	'EDIT_MODULE'			=> 'Edit module',	'EDIT_MODULE_EXPLAIN'	=> 'Here you are able to enter module specific settings.',	'HIDDEN_MODULE'			=> 'Hidden module',	'MODULE'					=> 'Module',	'MODULE_ADDED'				=> 'Module successfully added.',	'MODULE_DELETED'			=> 'Module successfully removed.',	'MODULE_DISPLAYED'			=> 'Module displayed',	'MODULE_DISPLAYED_EXPLAIN'	=> 'If you do not wish to display this module, but want to use it, set this to no.',	'MODULE_EDITED'				=> 'Module successfully edited.',	'MODULE_ENABLED'			=> 'Module enabled',	'MODULE_LANGNAME'			=> 'Module language name',	'MODULE_LANGNAME_EXPLAIN'	=> 'Enter the displayed module name. Use language constant if name is served from language file.',	'MODULE_TYPE'				=> 'Module type',	'NO_CATEGORY_TO_MODULE'	=> 'Unable to turn category into module. Please remove/move all children before performing this action.',	'NO_MODULE'				=> 'No module found.',	'NO_MODULE_ID'			=> 'No module id specified.',	'NO_MODULE_LANGNAME'	=> 'No module language name specified.',	'NO_PARENT'				=> 'No Parent',	'PARENT'				=> 'Parent',	'PARENT_NO_EXIST'		=> 'Parent does not exist.',	'SELECT_MODULE'			=> 'Select a module',));?>
<?php return array(''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'0',''=>'1',''=>'2',''=>'3',''=>'4',''=>'5',''=>'6',''=>'7',''=>'8',''=>'9',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'0',''=>'1',''=>'2',''=>'3',''=>'4',''=>'5',''=>'6',''=>'7',''=>'8',''=>'9',''=>'',''=>'',''=>'1',''=>'2',''=>'3',''=>'4',''=>'',''=>'16',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'0',''=>'1',''=>'2',''=>'3',''=>'4',''=>'5',''=>'6',''=>'7',''=>'8',''=>'9',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'0',''=>'1',''=>'2',''=>'3',''=>'4',''=>'5',''=>'6',''=>'7',''=>'8',''=>'9',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'0',''=>'1',''=>'2',''=>'3',''=>'4',''=>'5',''=>'6',''=>'7',''=>'8',''=>'9',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'0',''=>'1',''=>'2',''=>'3',''=>'4',''=>'5',''=>'6',''=>'7',''=>'8',''=>'9',''=>'10',''=>'100',''=>'1000',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'0',''=>'1',''=>'2',''=>'3',''=>'4',''=>'5',''=>'6',''=>'7',''=>'8',''=>'9',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'0',''=>'1',''=>'2',''=>'3',''=>'4',''=>'5',''=>'6',''=>'7',''=>'8',''=>'9',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'0',''=>'1',''=>'2',''=>'3',''=>'4',''=>'5',''=>'6',''=>'7',''=>'8',''=>'9',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'0',''=>'1',''=>'2',''=>'3',''=>'4',''=>'5',''=>'6',''=>'7',''=>'8',''=>'9',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'0',''=>'1',''=>'2',''=>'3',''=>'4',''=>'5',''=>'6',''=>'7',''=>'8',''=>'9',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'0',''=>'1',''=>'2',''=>'3',''=>'4',''=>'5',''=>'6',''=>'7',''=>'8',''=>'9',''=>'1/2',''=>'3/2',''=>'5/2',''=>'7/2',''=>'9/2',''=>'11/2',''=>'13/2',''=>'15/2',''=>'17/2',''=>'-1/2',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'');
<?php/**** @package acp* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @ignore*/if (!defined('IN_PHPBB')){	exit;}/*** @package acp*/class acp_php_info{	var $u_action;	function main($id, $mode)	{		global $db, $user, $auth, $template;		global $config, $phpbb_root_path, $phpbb_admin_path, $phpEx;		if ($mode != 'info')		{			trigger_error('NO_MODE', E_USER_ERROR);		}		$this->tpl_name = 'acp_php_info';		$this->page_title = 'ACP_PHP_INFO';		ob_start();		phpinfo(INFO_GENERAL | INFO_CONFIGURATION | INFO_MODULES | INFO_VARIABLES);		$phpinfo = ob_get_clean();		$phpinfo = trim($phpinfo);		// Here we play around a little with the PHP Info HTML to try and stylise		// it along phpBB's lines ... hopefully without breaking anything. The idea		// for this was nabbed from the PHP annotated manual		preg_match_all('#<body[^>]*>(.*)</body>#si', $phpinfo, $output);		if (empty($phpinfo) || empty($output))		{			trigger_error('NO_PHPINFO_AVAILABLE', E_USER_WARNING);		}		$output = $output[1][0];		// expose_php can make the image not exist		if (preg_match('#<a[^>]*><img[^>]*></a>#', $output))		{			$output = preg_replace('#<tr class="v"><td>(.*?<a[^>]*><img[^>]*></a>)(.*?)</td></tr>#s', '<tr class="row1"><td><table class="type2"><tr><td>\2</td><td>\1</td></tr></table></td></tr>', $output);		}		else		{			$output = preg_replace('#<tr class="v"><td>(.*?)</td></tr>#s', '<tr class="row1"><td><table class="type2"><tr><td>\1</td></tr></table></td></tr>', $output);		}		$output = preg_replace('#<table[^>]+>#i', '<table>', $output);		$output = preg_replace('#<img border="0"#i', '<img', $output);		$output = str_replace(array('class="e"', 'class="v"', 'class="h"', '<hr />', '<font', '</font>'), array('class="row1"', 'class="row2"', '', '', '<span', '</span>'), $output);		// Fix invalid anchor names (eg "module_Zend Optimizer")		$output = preg_replace_callback('#<a name="([^"]+)">#', array($this, 'remove_spaces'), $output);		if (empty($output))		{			trigger_error('NO_PHPINFO_AVAILABLE', E_USER_WARNING);		}		$orig_output = $output;		preg_match_all('#<div class="center">(.*)</div>#siU', $output, $output);		$output = (!empty($output[1][0])) ? $output[1][0] : $orig_output;		$template->assign_var('PHPINFO', $output);	}		function remove_spaces($matches)	{		return '<a name="' . str_replace(' ', '_', $matches[1]) . '">';	}}?>
<?php return array(''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'');
<?php/**** acp_styles [English]** @package language* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** DO NOT CHANGE*/if (!defined('IN_PHPBB')){	exit;}if (empty($lang) || !is_array($lang)){	$lang = array();}// DEVELOPERS PLEASE NOTE//// All language files should use UTF-8 as their encoding and the files must not contain a BOM.//// Placeholders can now contain order information, e.g. instead of// 'Page %s of %s' you can (and should) write 'Page %1$s of %2$s', this allows// translators to re-order the output of data while ensuring it remains correct//// You do not need this where single placeholders are used, e.g. 'Message %d' is fine// equally where a string contains only two placeholders which are used to wrap text// in a url you again do not need to specify an order e.g., 'Click %sHERE%s' is fine$lang = array_merge($lang, array(	'ACP_IMAGESETS_EXPLAIN'	=> 'Imagesets comprise all the button, forum, folder, etc. and other non-style specific images used by the board. Here you can edit, export or delete existing imagesets and import or activate new sets.',	'ACP_STYLES_EXPLAIN'	=> 'Here you can manage the available styles on your board. A style consists of a template, theme and imageset. You may alter existing styles, delete, deactivate, reactivate, create or import new ones. You can also see what a style will look like using the preview function. The current default style is noted by the presence of an asterisk (*). Also listed is the total user count for each style, note that overriding user styles will not be reflected here.',	'ACP_TEMPLATES_EXPLAIN'	=> 'A template set comprises all the markup used to generate the layout of your board. Here you can edit existing template sets, delete, export, import and preview sets. You can also modify the templating code used to generate BBCode.',	'ACP_THEMES_EXPLAIN'	=> 'From here you can create, install, edit, delete and export themes. A theme is the combination of colours and images that are applied to your templates to define the basic look of your board. The range of options open to you depends on the configuration of your server and phpBB installation, see the manual for further details. Please note that when creating new themes the use of an existing theme as a basis is optional.',	'ADD_IMAGESET'			=> 'Create imageset',	'ADD_IMAGESET_EXPLAIN'	=> 'Here you can create a new imageset. Depending on your server configuration and file permissions you may have additional options here. For example you may be able to base this imageset on an existing one. You may also be able to upload or import (from the store directory) a imageset archive. If you upload or import an archive the imageset name can be optionally taken from the archive name (to do this leave the imageset name blank).',	'ADD_STYLE'				=> 'Create style',	'ADD_STYLE_EXPLAIN'		=> 'Here you can create a new style. Depending on your server configuration and file permissions you may have additional options. For example you may be able to base this style on an existing one. You may also be able to upload or import (from the store directory) a style archive. If you upload or import an archive the style name will be determined automatically.',	'ADD_TEMPLATE'			=> 'Create template',	'ADD_TEMPLATE_EXPLAIN'	=> 'Here you can add a new template. Depending on your server configuration and file permissions you may have additional options here. For example you may be able to base this template set on an existing one. You may also be able to upload or import (from the store directory) a template archive. If you upload or import an archive the template name can be optionally taken from the archive name (to do this leave the template name blank).',	'ADD_THEME'				=> 'Create theme',	'ADD_THEME_EXPLAIN'		=> 'Here you can add a new theme. Depending on your server configuration and file permissions you may have additional options here. For example you may be able to base this theme on an existing one. You may also be able to upload or import (from the store directory) a theme archive. If you upload or import an archive the theme name can be optionally taken from the archive name (to do this leave the theme name blank).',	'ARCHIVE_FORMAT'		=> 'Archive file type',	'AUTOMATIC_EXPLAIN'		=> 'Leave blank to attempt automatic detection.',	'BACKGROUND'			=> 'Background',	'BACKGROUND_COLOUR'		=> 'Background colour',	'BACKGROUND_IMAGE'		=> 'Background image',	'BACKGROUND_REPEAT'		=> 'Background repeat',	'BOLD'					=> 'Bold',	'CACHE'							=> 'Cache',	'CACHE_CACHED'					=> 'Cached',	'CACHE_FILENAME'				=> 'Template file',	'CACHE_FILESIZE'				=> 'File size',	'CACHE_MODIFIED'				=> 'Modified',	'CONFIRM_IMAGESET_REFRESH'		=> 'Are you sure you wish to refresh all imageset data? The settings from the imageset configuration file will overwrite all modifications to the imageset which have been carried out with the imageset editor.',	'CONFIRM_TEMPLATE_CLEAR_CACHE'	=> 'Are you sure you wish to clear all cached versions of your template files?',	'CONFIRM_TEMPLATE_REFRESH'		=> 'Are you sure you wish to refresh all template data in the database with the contents of the template files on the filesystem? This will overwrite all modifications which have been carried out with the template editor while the template was stored in the database.',	'CONFIRM_THEME_REFRESH'			=> 'Are you sure you wish to refresh the theme data stored in the database with the contents of the theme on the filesystem? This will overwrite all modifications which have been carried out with the theme editor while the theme was stored in the database.',	'COPYRIGHT'						=> 'Copyright',	'CREATE_IMAGESET'				=> 'Create new imageset',	'CREATE_STYLE'					=> 'Create new style',	'CREATE_TEMPLATE'				=> 'Create new template set',	'CREATE_THEME'					=> 'Create new theme',	'CURRENT_IMAGE'					=> 'Current image',	'DEACTIVATE_DEFAULT'		=> 'You cannot deactivate the default style.',	'DELETE_FROM_FS'			=> 'Delete from filesystem',	'DELETE_IMAGESET'			=> 'Delete imageset',	'DELETE_IMAGESET_EXPLAIN'	=> 'Here you can remove the selected imageset from the database. Please note that there is no undo capability. It is recommended that you first export your set for possible future use.',	'DELETE_STYLE'				=> 'Delete style',	'DELETE_STYLE_EXPLAIN'		=> 'Here you can remove the selected style. Take care in deleting styles, there is no undo capability.',	'DELETE_TEMPLATE'			=> 'Delete template',	'DELETE_TEMPLATE_EXPLAIN'	=> 'Here you can remove the selected template set from the database. Please note that there is no undo capability. It is recommended that you first export your set for possible future use.',	'DELETE_THEME'				=> 'Delete theme',	'DELETE_THEME_EXPLAIN'		=> 'Here you can remove the selected theme from the database. Please note that there is no undo capability. It is recommended that you first export your theme for possible future use.',	'DETAILS'					=> 'Details',	'DIMENSIONS_EXPLAIN'		=> 'Selecting yes here will include width/height parameters.',	'EDIT_DETAILS_IMAGESET'				=> 'Edit imageset details',	'EDIT_DETAILS_IMAGESET_EXPLAIN'		=> 'Here you can edit certain imageset details such as its name.',	'EDIT_DETAILS_STYLE'				=> 'Edit style',	'EDIT_DETAILS_STYLE_EXPLAIN'		=> 'Using the form below you can modify this existing style. You may alter the combination of template, theme and imageset which define the style itself. You may also make the style the default one.',	'EDIT_DETAILS_TEMPLATE'				=> 'Edit template details',	'EDIT_DETAILS_TEMPLATE_EXPLAIN'		=> 'Here you can edit certain template details such as its name. You may also have the option to switch storage of the stylesheet from the filesystem to the database and vice versa. This option depends on your PHP configuration and whether your template set can be written to by the web server.',	'EDIT_DETAILS_THEME'				=> 'Edit theme details',	'EDIT_DETAILS_THEME_EXPLAIN'		=> 'Here you can edit certain theme details such as its name. You may also have the option to switch storage of the stylesheet from the filesystem to the database and vice versa. This option depends on your PHP configuration and whether your stylesheet can be written to by the web server.',	'EDIT_IMAGESET'						=> 'Edit imageset',	'EDIT_IMAGESET_EXPLAIN'				=> 'Here you can edit the individual images which define the imageset. You can also specify dimensions for the image. Dimensions are optional, specifying them can overcome certain rendering issues with some browsers. By not specifying them you reduce the size of the database record a little.',	'EDIT_TEMPLATE'						=> 'Edit template',	'EDIT_TEMPLATE_EXPLAIN'				=> 'Here you can edit your template set directly. Please remember that these edits are permanent and cannot be undone once submitted. If PHP can write to the template files in your styles directory any changes here will be written directly to those files. If PHP cannot write to those files they will be copied into the database and all changes will only be reflected there. Please take care when editing your template set, remember to close all replacement variable terms {XXXX} and conditional statements.',	'EDIT_TEMPLATE_STORED_DB'			=> 'The template file was unwritable so the template set is now stored in the database containing the modified file.',	'EDIT_THEME'						=> 'Edit theme',	'EDIT_THEME_EXPLAIN'				=> 'Here you can edit the selected theme, changing colours, images, etc.',	'EDIT_THEME_STORED_DB'				=> 'The stylesheet file was unwritable so the stylesheet is now stored in the database containing your modification.',	'EDIT_THEME_STORE_PARSED'			=> 'The theme requires that its stylesheet is parsed. This is only possible if its stored in the database.',	'EDITOR_DISABLED'					=> 'The template editor is disabled.',	'EXPORT'							=> 'Export',	'FOREGROUND'			=> 'Foreground',	'FONT_COLOUR'			=> 'Font colour',	'FONT_FACE'				=> 'Font face',	'FONT_FACE_EXPLAIN'		=> 'You can specify multiple fonts separated by commas. If a user doesnt have the first font installed the first other working font will be chosen.',	'FONT_SIZE'				=> 'Font size',	'GLOBAL_IMAGES'			=> 'Global',	'HIDE_CSS'				=> 'Hide raw CSS',	'IMAGE_WIDTH'				=> 'Image width',	'IMAGE_HEIGHT'				=> 'Image height',	'IMAGE'						=> 'Image',	'IMAGE_NAME'				=> 'Image name',	'IMAGE_PARAMETER'			=> 'Parameter',	'IMAGE_VALUE'				=> 'Value',	'IMAGESET_ADDED'			=> 'New imageset added on filesystem.',	'IMAGESET_ADDED_DB'			=> 'New imageset added to database.',	'IMAGESET_DELETED'			=> 'Imageset deleted successfully.',	'IMAGESET_DELETED_FS'		=> 'Imageset removed from database but some files may remain on the filesystem.',	'IMAGESET_DETAILS_UPDATED'	=> 'Imageset details successfully updated.',	'IMAGESET_ERR_ARCHIVE'		=> 'Please select an archive method.',	'IMAGESET_ERR_COPY_LONG'	=> 'The copyright can be no longer than 60 characters.',	'IMAGESET_ERR_NAME_CHARS'	=> 'The imageset name can only contain alphanumeric characters, -, +, _ and space.',	'IMAGESET_ERR_NAME_EXIST'	=> 'A imageset with that name already exists.',	'IMAGESET_ERR_NAME_LONG'	=> 'The imageset name can be no longer than 30 characters.',	'IMAGESET_ERR_NOT_IMAGESET'	=> 'The archive you specified does not contain a valid imageset.',	'IMAGESET_ERR_STYLE_NAME'	=> 'You must supply a name for this imageset.',	'IMAGESET_EXPORT'			=> 'Export imageset',	'IMAGESET_EXPORT_EXPLAIN'	=> 'Here you can export an imageset in the form of an archive. This archive will contain all the data necessary to install the set of images on another board. You may select whether to download the file directly or to place it in your store folder for download later or via FTP.',	'IMAGESET_EXPORTED'			=> 'Imageset exported successfully and stored in %s.',	'IMAGESET_NAME'				=> 'Imageset name',	'IMAGESET_REFRESHED'		=> 'Imageset refreshed successfully.',	'IMAGESET_UPDATED'			=> 'Imageset updated successfully.',	'ITALIC'					=> 'Italic',	'IMG_CAT_BUTTONS'		=> 'Localised buttons',	'IMG_CAT_CUSTOM'		=> 'Custom images',	'IMG_CAT_FOLDERS'		=> 'Topic icons',	'IMG_CAT_FORUMS'		=> 'Forum icons',	'IMG_CAT_ICONS'			=> 'General icons',	'IMG_CAT_LOGOS'			=> 'Logos',	'IMG_CAT_POLLS'			=> 'Polling images',	'IMG_CAT_UI'			=> 'General user interface elements',	'IMG_CAT_USER'			=> 'Additional images',	'IMG_SITE_LOGO'			=> 'Main logo',	'IMG_UPLOAD_BAR'		=> 'Upload progress bar',	'IMG_POLL_LEFT'			=> 'Poll left end',	'IMG_POLL_CENTER'		=> 'Poll centre',	'IMG_POLL_RIGHT'		=> 'Poll right end',	'IMG_ICON_FRIEND'		=> 'Add as friend',	'IMG_ICON_FOE'			=> 'Add as foe',	'IMG_FORUM_LINK'			=> 'Forum link',	'IMG_FORUM_READ'			=> 'Forum',	'IMG_FORUM_READ_LOCKED'		=> 'Forum locked',	'IMG_FORUM_READ_SUBFORUM'	=> 'Subforum',	'IMG_FORUM_UNREAD'			=> 'Forum unread posts',	'IMG_FORUM_UNREAD_LOCKED'	=> 'Forum unread posts locked',	'IMG_FORUM_UNREAD_SUBFORUM'	=> 'Subforum unread posts',	'IMG_SUBFORUM_READ'			=> 'Legend subforum',	'IMG_SUBFORUM_UNREAD'		=> 'Legend subforum unread posts',	'IMG_TOPIC_MOVED'			=> 'Topic moved',	'IMG_TOPIC_READ'				=> 'Topic',	'IMG_TOPIC_READ_MINE'			=> 'Topic posted to',	'IMG_TOPIC_READ_HOT'			=> 'Topic popular',	'IMG_TOPIC_READ_HOT_MINE'		=> 'Topic popular posted to',	'IMG_TOPIC_READ_LOCKED'			=> 'Topic locked',	'IMG_TOPIC_READ_LOCKED_MINE'	=> 'Topic locked posted to',	'IMG_TOPIC_UNREAD'				=> 'Topic unread posts',	'IMG_TOPIC_UNREAD_MINE'			=> 'Topic posted to unread',	'IMG_TOPIC_UNREAD_HOT'			=> 'Topic popular unread posts',	'IMG_TOPIC_UNREAD_HOT_MINE'		=> 'Topic popular posted to unread',	'IMG_TOPIC_UNREAD_LOCKED'		=> 'Topic locked unread',	'IMG_TOPIC_UNREAD_LOCKED_MINE'	=> 'Topic locked posted to unread',	'IMG_STICKY_READ'				=> 'Sticky topic',	'IMG_STICKY_READ_MINE'			=> 'Sticky topic posted to',	'IMG_STICKY_READ_LOCKED'		=> 'Sticky topic locked',	'IMG_STICKY_READ_LOCKED_MINE'	=> 'Sticky topic locked posted to',	'IMG_STICKY_UNREAD'				=> 'Sticky topic unread posts',	'IMG_STICKY_UNREAD_MINE'		=> 'Sticky topic posted to unread',	'IMG_STICKY_UNREAD_LOCKED'		=> 'Sticky topic locked unread posts',	'IMG_STICKY_UNREAD_LOCKED_MINE'	=> 'Sticky topic locked posted to unread',	'IMG_ANNOUNCE_READ'					=> 'Announcement',	'IMG_ANNOUNCE_READ_MINE'			=> 'Announcement posted to',	'IMG_ANNOUNCE_READ_LOCKED'			=> 'Announcement locked',	'IMG_ANNOUNCE_READ_LOCKED_MINE'		=> 'Announcement locked posted to',	'IMG_ANNOUNCE_UNREAD'				=> 'Announcement unread posts',	'IMG_ANNOUNCE_UNREAD_MINE'			=> 'Announcement posted to unread',	'IMG_ANNOUNCE_UNREAD_LOCKED'		=> 'Announcement locked unread posts',	'IMG_ANNOUNCE_UNREAD_LOCKED_MINE'	=> 'Announcement locked posted to unread',	'IMG_GLOBAL_READ'					=> 'Global',	'IMG_GLOBAL_READ_MINE'				=> 'Global posted to',	'IMG_GLOBAL_READ_LOCKED'			=> 'Global locked',	'IMG_GLOBAL_READ_LOCKED_MINE'		=> 'Global locked posted to',	'IMG_GLOBAL_UNREAD'					=> 'Global unread posts',	'IMG_GLOBAL_UNREAD_MINE'			=> 'Global posted to unread',	'IMG_GLOBAL_UNREAD_LOCKED'			=> 'Global locked unread posts',	'IMG_GLOBAL_UNREAD_LOCKED_MINE'		=> 'Global locked posted to unread',	'IMG_PM_READ'		=> 'Read private message',	'IMG_PM_UNREAD'		=> 'Unread private message',	'IMG_ICON_BACK_TOP'		=> 'Top',	'IMG_ICON_CONTACT_AIM'		=> 'AIM',	'IMG_ICON_CONTACT_EMAIL'	=> 'Send e-mail',	'IMG_ICON_CONTACT_ICQ'		=> 'ICQ',	'IMG_ICON_CONTACT_JABBER'	=> 'Jabber',	'IMG_ICON_CONTACT_MSNM'		=> 'MSNM',	'IMG_ICON_CONTACT_PM'		=> 'Send message',	'IMG_ICON_CONTACT_YAHOO'	=> 'YIM',	'IMG_ICON_CONTACT_WWW'		=> 'Website',	'IMG_ICON_POST_DELETE'			=> 'Delete post',	'IMG_ICON_POST_EDIT'			=> 'Edit post',	'IMG_ICON_POST_INFO'			=> 'Show post details',	'IMG_ICON_POST_QUOTE'			=> 'Quote post',	'IMG_ICON_POST_REPORT'			=> 'Report post',	'IMG_ICON_POST_TARGET'			=> 'Minipost',	'IMG_ICON_POST_TARGET_UNREAD'	=> 'New minipost',	'IMG_ICON_TOPIC_ATTACH'			=> 'Attachment',	'IMG_ICON_TOPIC_LATEST'			=> 'Last post',	'IMG_ICON_TOPIC_NEWEST'			=> 'Last unread post',	'IMG_ICON_TOPIC_REPORTED'		=> 'Post reported',	'IMG_ICON_TOPIC_UNAPPROVED'		=> 'Post unapproved',	'IMG_ICON_USER_ONLINE'		=> 'User online',	'IMG_ICON_USER_OFFLINE'		=> 'User offline',	'IMG_ICON_USER_PROFILE'		=> 'Show profile',	'IMG_ICON_USER_SEARCH'		=> 'Search posts',	'IMG_ICON_USER_WARN'		=> 'Warn user',	'IMG_BUTTON_PM_FORWARD'		=> 'Forward private message',	'IMG_BUTTON_PM_NEW'			=> 'New private message',	'IMG_BUTTON_PM_REPLY'		=> 'Reply private message',	'IMG_BUTTON_TOPIC_LOCKED'	=> 'Topic locked',	'IMG_BUTTON_TOPIC_NEW'		=> 'New topic',	'IMG_BUTTON_TOPIC_REPLY'	=> 'Reply topic',	'IMG_USER_ICON1'		=> 'User defined image 1',	'IMG_USER_ICON2'		=> 'User defined image 2',	'IMG_USER_ICON3'		=> 'User defined image 3',	'IMG_USER_ICON4'		=> 'User defined image 4',	'IMG_USER_ICON5'		=> 'User defined image 5',	'IMG_USER_ICON6'		=> 'User defined image 6',	'IMG_USER_ICON7'		=> 'User defined image 7',	'IMG_USER_ICON8'		=> 'User defined image 8',	'IMG_USER_ICON9'		=> 'User defined image 9',	'IMG_USER_ICON10'		=> 'User defined image 10',	'INCLUDE_DIMENSIONS'		=> 'Include dimensions',	'INCLUDE_IMAGESET'			=> 'Include imageset',	'INCLUDE_TEMPLATE'			=> 'Include template',	'INCLUDE_THEME'				=> 'Include theme',	'INHERITING_FROM'			=> 'Inherits from',	'INSTALL_IMAGESET'			=> 'Install imageset',	'INSTALL_IMAGESET_EXPLAIN'	=> 'Here you can install your selected imageset. You can edit certain details if you wish or use the installation defaults.',	'INSTALL_STYLE'				=> 'Install style',	'INSTALL_STYLE_EXPLAIN'		=> 'Here you can install a new style and if appropriate the corresponding style elements. If you already have the relevant style elements installed they will not be overwritten. Some styles require existing style elements to already be installed. If you try installing such a style and do not have the required elements you will be notified.',	'INSTALL_TEMPLATE'			=> 'Install Template',	'INSTALL_TEMPLATE_EXPLAIN'	=> 'Here you can install a new template set. Depending on your server configuration you may have a number of options here.',	'INSTALL_THEME'				=> 'Install theme',	'INSTALL_THEME_EXPLAIN'		=> 'Here you can install your selected theme. You can edit certain details if you wish or use the installation defaults.',	'INSTALLED_IMAGESET'		=> 'Installed imagesets',	'INSTALLED_STYLE'			=> 'Installed styles',	'INSTALLED_TEMPLATE'		=> 'Installed templates',	'INSTALLED_THEME'			=> 'Installed themes',	'KEEP_IMAGESET'				=> 'Keep %s imageset',	'KEEP_TEMPLATE'				=> 'Keep %s template',	'KEEP_THEME'				=> 'Keep %s theme',	'LINE_SPACING'				=> 'Line spacing',	'LOCALISED_IMAGES'			=> 'Localised',	'LOCATION_DISABLED_EXPLAIN'	=> 'This setting is inherited and cannot be changed.',	'NO_CLASS'					=> 'Cannot find class in stylesheet.',	'NO_IMAGESET'				=> 'Cannot find imageset on filesystem.',	'NO_IMAGE'					=> 'No image',	'NO_IMAGE_ERROR'			=> 'Cannot find image on filesystem.',	'NO_STYLE'					=> 'Cannot find style on filesystem.',	'NO_TEMPLATE'				=> 'Cannot find template on filesystem.',	'NO_THEME'					=> 'Cannot find theme on filesystem.',	'NO_UNINSTALLED_IMAGESET'	=> 'No uninstalled imagesets detected.',	'NO_UNINSTALLED_STYLE'		=> 'No uninstalled styles detected.',	'NO_UNINSTALLED_TEMPLATE'	=> 'No uninstalled templates detected.',	'NO_UNINSTALLED_THEME'		=> 'No uninstalled themes detected.',	'NO_UNIT'					=> 'None',	'ONLY_IMAGESET'			=> 'This is the only remaining imageset, you cannot delete it.',	'ONLY_STYLE'			=> 'This is the only remaining style, you cannot delete it.',	'ONLY_TEMPLATE'			=> 'This is the only remaining template set, you cannot delete it.',	'ONLY_THEME'			=> 'This is the only remaining theme, you cannot delete it.',	'OPTIONAL_BASIS'		=> 'Optional basis',	'REFRESH'					=> 'Refresh',	'REPEAT_NO'					=> 'None',	'REPEAT_X'					=> 'Only horizontally',	'REPEAT_Y'					=> 'Only vertically',	'REPEAT_ALL'				=> 'Both directions',	'REPLACE_IMAGESET'			=> 'Replace imageset with',	'REPLACE_IMAGESET_EXPLAIN'	=> 'This imageset will replace the one you are deleting in any styles that use it.',	'REPLACE_STYLE'				=> 'Replace style with',	'REPLACE_STYLE_EXPLAIN'		=> 'This style will replace the one being deleted for members that use it.',	'REPLACE_TEMPLATE'			=> 'Replace template with',	'REPLACE_TEMPLATE_EXPLAIN'	=> 'This template set will replace the one you are deleting in any styles that use it.',	'REPLACE_THEME'				=> 'Replace theme with',	'REPLACE_THEME_EXPLAIN'		=> 'This theme will replace the one you are deleting in any styles that use it.',	'REPLACE_WITH_OPTION'		=> 'Replace with %s',	'REQUIRES_IMAGESET'			=> 'This style requires the %s imageset to be installed.',	'REQUIRES_TEMPLATE'			=> 'This style requires the %s template set to be installed.',	'REQUIRES_THEME'			=> 'This style requires the %s theme to be installed.',	'SELECT_IMAGE'				=> 'Select image',	'SELECT_TEMPLATE'			=> 'Select template file',	'SELECT_THEME'				=> 'Select theme file',	'SELECTED_IMAGE'			=> 'Selected image',	'SELECTED_IMAGESET'			=> 'Selected imageset',	'SELECTED_TEMPLATE'			=> 'Selected template',	'SELECTED_TEMPLATE_FILE'	=> 'Selected template file',	'SELECTED_THEME'			=> 'Selected theme',	'SELECTED_THEME_FILE'		=> 'Selected theme file',	'STORE_DATABASE'			=> 'Database',	'STORE_FILESYSTEM'			=> 'Filesystem',	'STYLE_ACTIVATE'			=> 'Activate',	'STYLE_ACTIVE'				=> 'Active',	'STYLE_ADDED'				=> 'Style added successfully.',	'STYLE_DEACTIVATE'			=> 'Deactivate',	'STYLE_DEFAULT'				=> 'Make default style',	'STYLE_DELETED'				=> 'Style deleted successfully.',	'STYLE_DETAILS_UPDATED'		=> 'Style edited successfully.',	'STYLE_ERR_ARCHIVE'			=> 'Please select an archive method.',	'STYLE_ERR_COPY_LONG'		=> 'The copyright can be no longer than 60 characters.',	'STYLE_ERR_MORE_ELEMENTS'	=> 'You must select at least one style element.',	'STYLE_ERR_NAME_CHARS'		=> 'The style name can only contain alphanumeric characters, -, +, _ and space.',	'STYLE_ERR_NAME_EXIST'		=> 'A style with that name already exists.',	'STYLE_ERR_NAME_LONG'		=> 'The style name can be no longer than 30 characters.',	'STYLE_ERR_NO_IDS'			=> 'You must select a template, theme and imageset for this style.',	'STYLE_ERR_NOT_STYLE'		=> 'The imported or uploaded file did not contain a valid style archive.',	'STYLE_ERR_STYLE_NAME'		=> 'You must supply a name for this style.',	'STYLE_EXPORT'				=> 'Export style',	'STYLE_EXPORT_EXPLAIN'		=> 'Here you can export a style in the form of an archive. A style does not need to contain all elements but it must contain at least one. For example if you have created a new theme and imageset for a commonly used template you could simply export the theme and imageset and omit the template. You may select whether to download the file directly or to place it in your store folder for download later or via FTP.',	'STYLE_EXPORTED'			=> 'Style exported successfully and stored in %s.',	'STYLE_IMAGESET'			=> 'Imageset',	'STYLE_NAME'				=> 'Style name',	'STYLE_TEMPLATE'			=> 'Template',	'STYLE_THEME'				=> 'Theme',	'STYLE_USED_BY'				=> 'Used by (including robots)',	'TEMPLATE_ADDED'			=> 'Template set added and stored on filesystem.',	'TEMPLATE_ADDED_DB'			=> 'Template set added and stored in database.',	'TEMPLATE_CACHE'			=> 'Template cache',	'TEMPLATE_CACHE_EXPLAIN'	=> 'By default phpBB caches the compiled version of its templates. This decreases the load on the server each time a page is viewed and thus may reduce the page generation time. Here you can view the cache status of each file and delete individual files or the entire cache.',	'TEMPLATE_CACHE_CLEARED'	=> 'Template cache cleared successfully.',	'TEMPLATE_CACHE_EMPTY'		=> 'There are no cached templates.',	'TEMPLATE_DELETED'			=> 'Template set deleted successfully.',	'TEMPLATE_DELETE_DEPENDENT'	=> 'The template set cannot be deleted as there are one or more other template sets inheriting from it:',	'TEMPLATE_DELETED_FS'		=> 'Template set removed from database but some files may remain on the filesystem.',	'TEMPLATE_DETAILS_UPDATED'	=> 'Template details successfully updated.',	'TEMPLATE_EDITOR'			=> 'Raw HTML template editor',	'TEMPLATE_EDITOR_HEIGHT'	=> 'Template editor height',	'TEMPLATE_ERR_ARCHIVE'		=> 'Please select an archive method.',	'TEMPLATE_ERR_CACHE_READ'	=> 'The cache directory used to store cached versions of template files could not be opened.',	'TEMPLATE_ERR_COPY_LONG'	=> 'The copyright can be no longer than 60 characters.',	'TEMPLATE_ERR_NAME_CHARS'	=> 'The template name can only contain alphanumeric characters, -, +, _ and space.',	'TEMPLATE_ERR_NAME_EXIST'	=> 'A template set with that name already exists.',	'TEMPLATE_ERR_NAME_LONG'	=> 'The template name can be no longer than 30 characters.',	'TEMPLATE_ERR_NOT_TEMPLATE'	=> 'The archive you specified does not contain a valid template set.',	'TEMPLATE_ERR_REQUIRED_OR_INCOMPLETE' => 'The new template set requires the template %s to be installed and not inheriting itself.',	'TEMPLATE_ERR_STYLE_NAME'	=> 'You must supply a name for this template.',	'TEMPLATE_EXPORT'			=> 'Export templates',	'TEMPLATE_EXPORT_EXPLAIN'	=> 'Here you can export a template set in the form of an archive. This archive will contain all the files necessary to install the templates on another board. You may select whether to download the file directly or to place it in your store folder for download later or via FTP.',	'TEMPLATE_EXPORTED'			=> 'Templates exported successfully and stored in %s.',	'TEMPLATE_FILE'				=> 'Template file',	'TEMPLATE_FILE_UPDATED'		=> 'Template file updated successfully.',	'TEMPLATE_INHERITS'			=> 'This template sets inherits from %s and thus cannot have a different storage setting than its super template.',	'TEMPLATE_LOCATION'			=> 'Store templates in',	'TEMPLATE_LOCATION_EXPLAIN'	=> 'Images are always stored on the filesystem.',	'TEMPLATE_NAME'				=> 'Template name',	'TEMPLATE_FILE_NOT_WRITABLE'=> 'Unable to write to template file %s. Please check the permissions for the directory and the files.',	'TEMPLATE_REFRESHED'		=> 'Template refreshed successfully.',	'THEME_ADDED'				=> 'New theme added on filesystem.',	'THEME_ADDED_DB'			=> 'New theme added to database.',	'THEME_CLASS_ADDED'			=> 'Custom class added successfully.',	'THEME_DELETED'				=> 'Theme deleted successfully.',	'THEME_DELETED_FS'			=> 'Theme removed from database but files remain on the filesystem.',	'THEME_DETAILS_UPDATED'		=> 'Theme details successfully updated.',	'THEME_EDITOR'				=> 'Theme editor',	'THEME_EDITOR_HEIGHT'		=> 'Theme editor height',	'THEME_ERR_ARCHIVE'			=> 'Please select an archive method.',	'THEME_ERR_CLASS_CHARS'		=> 'Only alphanumeric characters plus ., :, -, _ and # are valid in class names.',	'THEME_ERR_COPY_LONG'		=> 'The copyright can be no longer than 60 characters.',	'THEME_ERR_NAME_CHARS'		=> 'The theme name can only contain alphanumeric characters, -, +, _ and space.',	'THEME_ERR_NAME_EXIST'		=> 'A theme with that name already exists.',	'THEME_ERR_NAME_LONG'		=> 'The theme name can be no longer than 30 characters.',	'THEME_ERR_NOT_THEME'		=> 'The archive you specified does not contain a valid theme.',	'THEME_ERR_REFRESH_FS'		=> 'This theme is stored on the filesystem so there is no need to refresh it.',	'THEME_ERR_STYLE_NAME'		=> 'You must supply a name for this theme.',	'THEME_FILE'				=> 'Theme file',	'THEME_EXPORT'				=> 'Export Theme',	'THEME_EXPORT_EXPLAIN'		=> 'Here you can export a theme in the form of an archive. This archive will contain all the data necessary to install the theme on another board. You may select whether to download the file directly or to place it in your store folder for download later or via FTP.',	'THEME_EXPORTED'			=> 'Theme exported successfully and stored in %s.',	'THEME_LOCATION'			=> 'Store stylesheet in',	'THEME_LOCATION_EXPLAIN'	=> 'Images are always stored on the filesystem.',	'THEME_NAME'				=> 'Theme name',	'THEME_REFRESHED'			=> 'Theme refreshed successfully.',	'THEME_UPDATED'				=> 'Theme updated successfully.',	'UNDERLINE'				=> 'Underline',	'UNINSTALLED_IMAGESET'	=> 'Uninstalled imagesets',	'UNINSTALLED_STYLE'		=> 'Uninstalled styles',	'UNINSTALLED_TEMPLATE'	=> 'Uninstalled templates',	'UNINSTALLED_THEME'		=> 'Uninstalled themes',	'UNSET'					=> 'Undefined',));?>
<?php/**** @package acp* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @ignore*/if (!defined('IN_PHPBB')){	exit;}/*** @package acp*/class acp_forums{	var $u_action;	var $parent_id = 0;	function main($id, $mode)	{		global $db, $user, $auth, $template, $cache;		global $config, $phpbb_admin_path, $phpbb_root_path, $phpEx;		$user->add_lang('acp/forums');		$this->tpl_name = 'acp_forums';		$this->page_title = 'ACP_MANAGE_FORUMS';		$form_key = 'acp_forums';		add_form_key($form_key);		$action		= request_var('action', '');		$update		= (isset($_POST['update'])) ? true : false;		$forum_id	= request_var('f', 0);		$this->parent_id	= request_var('parent_id', 0);		$forum_data = $errors = array();		if ($update && !check_form_key($form_key))		{			$update = false;			$errors[] = $user->lang['FORM_INVALID'];		}		// Check additional permissions		switch ($action)		{			case 'progress_bar':				$start = request_var('start', 0);				$total = request_var('total', 0);				$this->display_progress_bar($start, $total);				exit;			break;			case 'delete':				if (!$auth->acl_get('a_forumdel'))				{					trigger_error($user->lang['NO_PERMISSION_FORUM_DELETE'] . adm_back_link($this->u_action . '&amp;parent_id=' . $this->parent_id), E_USER_WARNING);				}			break;			case 'add':				if (!$auth->acl_get('a_forumadd'))				{					trigger_error($user->lang['NO_PERMISSION_FORUM_ADD'] . adm_back_link($this->u_action . '&amp;parent_id=' . $this->parent_id), E_USER_WARNING);				}			break;		}		// Major routines		if ($update)		{			switch ($action)			{				case 'delete':					$action_subforums	= request_var('action_subforums', '');					$subforums_to_id	= request_var('subforums_to_id', 0);					$action_posts		= request_var('action_posts', '');					$posts_to_id		= request_var('posts_to_id', 0);					$errors = $this->delete_forum($forum_id, $action_posts, $action_subforums, $posts_to_id, $subforums_to_id);					if (sizeof($errors))					{						break;					}					$auth->acl_clear_prefetch();					$cache->destroy('sql', FORUMS_TABLE);					trigger_error($user->lang['FORUM_DELETED'] . adm_back_link($this->u_action . '&amp;parent_id=' . $this->parent_id));				break;				case 'edit':					$forum_data = array(						'forum_id'		=>	$forum_id					);				// No break here				case 'add':					$forum_data += array(						'parent_id'				=> request_var('forum_parent_id', $this->parent_id),						'forum_type'			=> request_var('forum_type', FORUM_POST),						'type_action'			=> request_var('type_action', ''),						'forum_status'			=> request_var('forum_status', ITEM_UNLOCKED),						'forum_parents'			=> '',						'forum_name'			=> utf8_normalize_nfc(request_var('forum_name', '', true)),						'forum_link'			=> request_var('forum_link', ''),						'forum_link_track'		=> request_var('forum_link_track', false),						'forum_desc'			=> utf8_normalize_nfc(request_var('forum_desc', '', true)),						'forum_desc_uid'		=> '',						'forum_desc_options'	=> 7,						'forum_desc_bitfield'	=> '',						'forum_rules'			=> utf8_normalize_nfc(request_var('forum_rules', '', true)),						'forum_rules_uid'		=> '',						'forum_rules_options'	=> 7,						'forum_rules_bitfield'	=> '',						'forum_rules_link'		=> request_var('forum_rules_link', ''),						'forum_image'			=> request_var('forum_image', ''),						'forum_style'			=> request_var('forum_style', 0),						'display_subforum_list'	=> request_var('display_subforum_list', false),						'display_on_index'		=> request_var('display_on_index', false),						'forum_topics_per_page'	=> request_var('topics_per_page', 0),						'enable_indexing'		=> request_var('enable_indexing', true),						'enable_icons'			=> request_var('enable_icons', false),						'enable_prune'			=> request_var('enable_prune', false),						'enable_post_review'	=> request_var('enable_post_review', true),						'enable_quick_reply'	=> request_var('enable_quick_reply', false),						'prune_days'			=> request_var('prune_days', 7),						'prune_viewed'			=> request_var('prune_viewed', 7),						'prune_freq'			=> request_var('prune_freq', 1),						'prune_old_polls'		=> request_var('prune_old_polls', false),						'prune_announce'		=> request_var('prune_announce', false),						'prune_sticky'			=> request_var('prune_sticky', false),						'forum_password'		=> request_var('forum_password', '', true),						'forum_password_confirm'=> request_var('forum_password_confirm', '', true),						'forum_password_unset'	=> request_var('forum_password_unset', false),					);					// On add, add empty forum_options... else do not consider it (not updating it)					if ($action == 'add')					{						$forum_data['forum_options'] = 0;					}					// Use link_display_on_index setting if forum type is link					if ($forum_data['forum_type'] == FORUM_LINK)					{						$forum_data['display_on_index'] = request_var('link_display_on_index', false);					}					// Linked forums and categories are not able to be locked...					if ($forum_data['forum_type'] == FORUM_LINK || $forum_data['forum_type'] == FORUM_CAT)					{						$forum_data['forum_status'] = ITEM_UNLOCKED;					}					$forum_data['show_active'] = ($forum_data['forum_type'] == FORUM_POST) ? request_var('display_recent', true) : request_var('display_active', false);					// Get data for forum rules if specified...					if ($forum_data['forum_rules'])					{						generate_text_for_storage($forum_data['forum_rules'], $forum_data['forum_rules_uid'], $forum_data['forum_rules_bitfield'], $forum_data['forum_rules_options'], request_var('rules_parse_bbcode', false), request_var('rules_parse_urls', false), request_var('rules_parse_smilies', false));					}					// Get data for forum description if specified					if ($forum_data['forum_desc'])					{						generate_text_for_storage($forum_data['forum_desc'], $forum_data['forum_desc_uid'], $forum_data['forum_desc_bitfield'], $forum_data['forum_desc_options'], request_var('desc_parse_bbcode', false), request_var('desc_parse_urls', false), request_var('desc_parse_smilies', false));					}					$errors = $this->update_forum_data($forum_data);					if (!sizeof($errors))					{						$forum_perm_from = request_var('forum_perm_from', 0);						$cache->destroy('sql', FORUMS_TABLE);						$copied_permissions = false;						// Copy permissions?						if ($forum_perm_from && $forum_perm_from != $forum_data['forum_id'] &&							($action != 'edit' || empty($forum_id) || ($auth->acl_get('a_fauth') && $auth->acl_get('a_authusers') && $auth->acl_get('a_authgroups') && $auth->acl_get('a_mauth'))))						{							copy_forum_permissions($forum_perm_from, $forum_data['forum_id'], ($action == 'edit') ? true : false);							cache_moderators();							$copied_permissions = true;						}/* Commented out because of questionable UI workflow - re-visit for 3.0.7						else if (!$this->parent_id && $action != 'edit' && $auth->acl_get('a_fauth') && $auth->acl_get('a_authusers') && $auth->acl_get('a_authgroups') && $auth->acl_get('a_mauth'))						{							$this->copy_permission_page($forum_data);							return;						}*/						$auth->acl_clear_prefetch();						$acl_url = '&amp;mode=setting_forum_local&amp;forum_id[]=' . $forum_data['forum_id'];						$message = ($action == 'add') ? $user->lang['FORUM_CREATED'] : $user->lang['FORUM_UPDATED'];						// redirect directly to permission settings screen if authed						if ($action == 'add' && !$copied_permissions && $auth->acl_get('a_fauth'))						{							$message .= '<br /><br />' . sprintf($user->lang['REDIRECT_ACL'], '<a href="' . append_sid("{$phpbb_admin_path}index.$phpEx", 'i=permissions' . $acl_url) . '">', '</a>');							meta_refresh(4, append_sid("{$phpbb_admin_path}index.$phpEx", 'i=permissions' . $acl_url));						}						trigger_error($message . adm_back_link($this->u_action . '&amp;parent_id=' . $this->parent_id));					}				break;			}		}		switch ($action)		{			case 'move_up':			case 'move_down':				if (!$forum_id)				{					trigger_error($user->lang['NO_FORUM'] . adm_back_link($this->u_action . '&amp;parent_id=' . $this->parent_id), E_USER_WARNING);				}				$sql = 'SELECT *					FROM ' . FORUMS_TABLE . "					WHERE forum_id = $forum_id";				$result = $db->sql_query($sql);				$row = $db->sql_fetchrow($result);				$db->sql_freeresult($result);				if (!$row)				{					trigger_error($user->lang['NO_FORUM'] . adm_back_link($this->u_action . '&amp;parent_id=' . $this->parent_id), E_USER_WARNING);				}				$move_forum_name = $this->move_forum_by($row, $action, 1);				if ($move_forum_name !== false)				{					add_log('admin', 'LOG_FORUM_' . strtoupper($action), $row['forum_name'], $move_forum_name);					$cache->destroy('sql', FORUMS_TABLE);				}			break;			case 'sync':				if (!$forum_id)				{					trigger_error($user->lang['NO_FORUM'] . adm_back_link($this->u_action . '&amp;parent_id=' . $this->parent_id), E_USER_WARNING);				}				@set_time_limit(0);				$sql = 'SELECT forum_name, forum_topics_real					FROM ' . FORUMS_TABLE . "					WHERE forum_id = $forum_id";				$result = $db->sql_query($sql);				$row = $db->sql_fetchrow($result);				$db->sql_freeresult($result);				if (!$row)				{					trigger_error($user->lang['NO_FORUM'] . adm_back_link($this->u_action . '&amp;parent_id=' . $this->parent_id), E_USER_WARNING);				}				if ($row['forum_topics_real'])				{					$sql = 'SELECT MIN(topic_id) as min_topic_id, MAX(topic_id) as max_topic_id						FROM ' . TOPICS_TABLE . '						WHERE forum_id = ' . $forum_id;					$result = $db->sql_query($sql);					$row2 = $db->sql_fetchrow($result);					$db->sql_freeresult($result);					// Typecast to int if there is no data available					$row2['min_topic_id'] = (int) $row2['min_topic_id'];					$row2['max_topic_id'] = (int) $row2['max_topic_id'];					$start = request_var('start', $row2['min_topic_id']);					$batch_size = 2000;					$end = $start + $batch_size;					// Sync all topics in batch mode...					sync('topic_approved', 'range', 'topic_id BETWEEN ' . $start . ' AND ' . $end, true, false);					sync('topic', 'range', 'topic_id BETWEEN ' . $start . ' AND ' . $end, true, true);					if ($end < $row2['max_topic_id'])					{						// We really need to find a way of showing statistics... no progress here						$sql = 'SELECT COUNT(topic_id) as num_topics							FROM ' . TOPICS_TABLE . '							WHERE forum_id = ' . $forum_id . '								AND topic_id BETWEEN ' . $start . ' AND ' . $end;						$result = $db->sql_query($sql);						$topics_done = request_var('topics_done', 0) + (int) $db->sql_fetchfield('num_topics');						$db->sql_freeresult($result);						$start += $batch_size;						$url = $this->u_action . "&amp;parent_id={$this->parent_id}&amp;f=$forum_id&amp;action=sync&amp;start=$start&amp;topics_done=$topics_done&amp;total={$row['forum_topics_real']}";						meta_refresh(0, $url);						$template->assign_vars(array(							'U_PROGRESS_BAR'		=> $this->u_action . "&amp;action=progress_bar&amp;start=$topics_done&amp;total={$row['forum_topics_real']}",							'UA_PROGRESS_BAR'		=> addslashes($this->u_action . "&amp;action=progress_bar&amp;start=$topics_done&amp;total={$row['forum_topics_real']}"),							'S_CONTINUE_SYNC'		=> true,							'L_PROGRESS_EXPLAIN'	=> sprintf($user->lang['SYNC_IN_PROGRESS_EXPLAIN'], $topics_done, $row['forum_topics_real']))						);						return;					}				}				$url = $this->u_action . "&amp;parent_id={$this->parent_id}&amp;f=$forum_id&amp;action=sync_forum";				meta_refresh(0, $url);				$template->assign_vars(array(					'U_PROGRESS_BAR'		=> $this->u_action . '&amp;action=progress_bar',					'UA_PROGRESS_BAR'		=> addslashes($this->u_action . '&amp;action=progress_bar'),					'S_CONTINUE_SYNC'		=> true,					'L_PROGRESS_EXPLAIN'	=> sprintf($user->lang['SYNC_IN_PROGRESS_EXPLAIN'], 0, $row['forum_topics_real']))				);				return;			break;			case 'sync_forum':				$sql = 'SELECT forum_name, forum_type					FROM ' . FORUMS_TABLE . "					WHERE forum_id = $forum_id";				$result = $db->sql_query($sql);				$row = $db->sql_fetchrow($result);				$db->sql_freeresult($result);				if (!$row)				{					trigger_error($user->lang['NO_FORUM'] . adm_back_link($this->u_action . '&amp;parent_id=' . $this->parent_id), E_USER_WARNING);				}				sync('forum', 'forum_id', $forum_id, false, true);				add_log('admin', 'LOG_FORUM_SYNC', $row['forum_name']);				$cache->destroy('sql', FORUMS_TABLE);				$template->assign_var('L_FORUM_RESYNCED', sprintf($user->lang['FORUM_RESYNCED'], $row['forum_name']));			break;			case 'add':			case 'edit':				if ($update)				{					$forum_data['forum_flags'] = 0;					$forum_data['forum_flags'] += (request_var('forum_link_track', false)) ? FORUM_FLAG_LINK_TRACK : 0;					$forum_data['forum_flags'] += (request_var('prune_old_polls', false)) ? FORUM_FLAG_PRUNE_POLL : 0;					$forum_data['forum_flags'] += (request_var('prune_announce', false)) ? FORUM_FLAG_PRUNE_ANNOUNCE : 0;					$forum_data['forum_flags'] += (request_var('prune_sticky', false)) ? FORUM_FLAG_PRUNE_STICKY : 0;					$forum_data['forum_flags'] += ($forum_data['show_active']) ? FORUM_FLAG_ACTIVE_TOPICS : 0;					$forum_data['forum_flags'] += (request_var('enable_post_review', true)) ? FORUM_FLAG_POST_REVIEW : 0;					$forum_data['forum_flags'] += (request_var('enable_quick_reply', false)) ? FORUM_FLAG_QUICK_REPLY : 0;				}				// Show form to create/modify a forum				if ($action == 'edit')				{					$this->page_title = 'EDIT_FORUM';					$row = $this->get_forum_info($forum_id);					$old_forum_type = $row['forum_type'];					if (!$update)					{						$forum_data = $row;					}					else					{						$forum_data['left_id'] = $row['left_id'];						$forum_data['right_id'] = $row['right_id'];					}					// Make sure no direct child forums are able to be selected as parents.					$exclude_forums = array();					foreach (get_forum_branch($forum_id, 'children') as $row)					{						$exclude_forums[] = $row['forum_id'];					}					$parents_list = make_forum_select($forum_data['parent_id'], $exclude_forums, false, false, false);					$forum_data['forum_password_confirm'] = $forum_data['forum_password'];				}				else				{					$this->page_title = 'CREATE_FORUM';					$forum_id = $this->parent_id;					$parents_list = make_forum_select($this->parent_id, false, false, false, false);					// Fill forum data with default values					if (!$update)					{						$forum_data = array(							'parent_id'				=> $this->parent_id,							'forum_type'			=> FORUM_POST,							'forum_status'			=> ITEM_UNLOCKED,							'forum_name'			=> utf8_normalize_nfc(request_var('forum_name', '', true)),							'forum_link'			=> '',							'forum_link_track'		=> false,							'forum_desc'			=> '',							'forum_rules'			=> '',							'forum_rules_link'		=> '',							'forum_image'			=> '',							'forum_style'			=> 0,							'display_subforum_list'	=> true,							'display_on_index'		=> false,							'forum_topics_per_page'	=> 0,							'enable_indexing'		=> true,							'enable_icons'			=> false,							'enable_prune'			=> false,							'prune_days'			=> 7,							'prune_viewed'			=> 7,							'prune_freq'			=> 1,							'forum_flags'			=> FORUM_FLAG_POST_REVIEW + FORUM_FLAG_ACTIVE_TOPICS,							'forum_options'			=> 0,							'forum_password'		=> '',							'forum_password_confirm'=> '',						);					}				}				$forum_rules_data = array(					'text'			=> $forum_data['forum_rules'],					'allow_bbcode'	=> true,					'allow_smilies'	=> true,					'allow_urls'	=> true				);				$forum_desc_data = array(					'text'			=> $forum_data['forum_desc'],					'allow_bbcode'	=> true,					'allow_smilies'	=> true,					'allow_urls'	=> true				);				$forum_rules_preview = '';				// Parse rules if specified				if ($forum_data['forum_rules'])				{					if (!isset($forum_data['forum_rules_uid']))					{						// Before we are able to display the preview and plane text, we need to parse our request_var()'d value...						$forum_data['forum_rules_uid'] = '';						$forum_data['forum_rules_bitfield'] = '';						$forum_data['forum_rules_options'] = 0;						generate_text_for_storage($forum_data['forum_rules'], $forum_data['forum_rules_uid'], $forum_data['forum_rules_bitfield'], $forum_data['forum_rules_options'], request_var('rules_allow_bbcode', false), request_var('rules_allow_urls', false), request_var('rules_allow_smilies', false));					}					// Generate preview content					$forum_rules_preview = generate_text_for_display($forum_data['forum_rules'], $forum_data['forum_rules_uid'], $forum_data['forum_rules_bitfield'], $forum_data['forum_rules_options']);					// decode...					$forum_rules_data = generate_text_for_edit($forum_data['forum_rules'], $forum_data['forum_rules_uid'], $forum_data['forum_rules_options']);				}				// Parse desciption if specified				if ($forum_data['forum_desc'])				{					if (!isset($forum_data['forum_desc_uid']))					{						// Before we are able to display the preview and plane text, we need to parse our request_var()'d value...						$forum_data['forum_desc_uid'] = '';						$forum_data['forum_desc_bitfield'] = '';						$forum_data['forum_desc_options'] = 0;						generate_text_for_storage($forum_data['forum_desc'], $forum_data['forum_desc_uid'], $forum_data['forum_desc_bitfield'], $forum_data['forum_desc_options'], request_var('desc_allow_bbcode', false), request_var('desc_allow_urls', false), request_var('desc_allow_smilies', false));					}					// decode...					$forum_desc_data = generate_text_for_edit($forum_data['forum_desc'], $forum_data['forum_desc_uid'], $forum_data['forum_desc_options']);				}				$forum_type_options = '';				$forum_type_ary = array(FORUM_CAT => 'CAT', FORUM_POST => 'FORUM', FORUM_LINK => 'LINK');				foreach ($forum_type_ary as $value => $lang)				{					$forum_type_options .= '<option value="' . $value . '"' . (($value == $forum_data['forum_type']) ? ' selected="selected"' : '') . '>' . $user->lang['TYPE_' . $lang] . '</option>';				}				$styles_list = style_select($forum_data['forum_style'], true);				$statuslist = '<option value="' . ITEM_UNLOCKED . '"' . (($forum_data['forum_status'] == ITEM_UNLOCKED) ? ' selected="selected"' : '') . '>' . $user->lang['UNLOCKED'] . '</option><option value="' . ITEM_LOCKED . '"' . (($forum_data['forum_status'] == ITEM_LOCKED) ? ' selected="selected"' : '') . '>' . $user->lang['LOCKED'] . '</option>';				$sql = 'SELECT forum_id					FROM ' . FORUMS_TABLE . '					WHERE forum_type = ' . FORUM_POST . "						AND forum_id <> $forum_id";				$result = $db->sql_query_limit($sql, 1);				$postable_forum_exists = false;				if ($db->sql_fetchrow($result))				{					$postable_forum_exists = true;				}				$db->sql_freeresult($result);				// Subforum move options				if ($action == 'edit' && $forum_data['forum_type'] == FORUM_CAT)				{					$subforums_id = array();					$subforums = get_forum_branch($forum_id, 'children');					foreach ($subforums as $row)					{						$subforums_id[] = $row['forum_id'];					}					$forums_list = make_forum_select($forum_data['parent_id'], $subforums_id);					if ($postable_forum_exists)					{						$template->assign_vars(array(							'S_MOVE_FORUM_OPTIONS'		=> make_forum_select($forum_data['parent_id'], $subforums_id)) // , false, true, false???						);					}					$template->assign_vars(array(						'S_HAS_SUBFORUMS'		=> ($forum_data['right_id'] - $forum_data['left_id'] > 1) ? true : false,						'S_FORUMS_LIST'			=> $forums_list)					);				}				else if ($postable_forum_exists)				{					$template->assign_vars(array(						'S_MOVE_FORUM_OPTIONS'		=> make_forum_select($forum_data['parent_id'], $forum_id, false, true, false))					);				}				$s_show_display_on_index = false;				if ($forum_data['parent_id'] > 0)				{					// if this forum is a subforum put the "display on index" checkbox					if ($parent_info = $this->get_forum_info($forum_data['parent_id']))					{						if ($parent_info['parent_id'] > 0 || $parent_info['forum_type'] == FORUM_CAT)						{							$s_show_display_on_index = true;						}					}				}				if (strlen($forum_data['forum_password']) == 32)				{					$errors[] = $user->lang['FORUM_PASSWORD_OLD'];				}				$template->assign_vars(array(					'S_EDIT_FORUM'		=> true,					'S_ERROR'			=> (sizeof($errors)) ? true : false,					'S_PARENT_ID'		=> $this->parent_id,					'S_FORUM_PARENT_ID'	=> $forum_data['parent_id'],					'S_ADD_ACTION'		=> ($action == 'add') ? true : false,					'U_BACK'		=> $this->u_action . '&amp;parent_id=' . $this->parent_id,					'U_EDIT_ACTION'	=> $this->u_action . "&amp;parent_id={$this->parent_id}&amp;action=$action&amp;f=$forum_id",					'L_COPY_PERMISSIONS_EXPLAIN'	=> $user->lang['COPY_PERMISSIONS_' . strtoupper($action) . '_EXPLAIN'],					'L_TITLE'						=> $user->lang[$this->page_title],					'ERROR_MSG'						=> (sizeof($errors)) ? implode('<br />', $errors) : '',					'FORUM_NAME'				=> $forum_data['forum_name'],					'FORUM_DATA_LINK'			=> $forum_data['forum_link'],					'FORUM_IMAGE'				=> $forum_data['forum_image'],					'FORUM_IMAGE_SRC'			=> ($forum_data['forum_image']) ? $phpbb_root_path . $forum_data['forum_image'] : '',					'FORUM_POST'				=> FORUM_POST,					'FORUM_LINK'				=> FORUM_LINK,					'FORUM_CAT'					=> FORUM_CAT,					'PRUNE_FREQ'				=> $forum_data['prune_freq'],					'PRUNE_DAYS'				=> $forum_data['prune_days'],					'PRUNE_VIEWED'				=> $forum_data['prune_viewed'],					'TOPICS_PER_PAGE'			=> $forum_data['forum_topics_per_page'],					'FORUM_RULES_LINK'			=> $forum_data['forum_rules_link'],					'FORUM_RULES'				=> $forum_data['forum_rules'],					'FORUM_RULES_PREVIEW'		=> $forum_rules_preview,					'FORUM_RULES_PLAIN'			=> $forum_rules_data['text'],					'S_BBCODE_CHECKED'			=> ($forum_rules_data['allow_bbcode']) ? true : false,					'S_SMILIES_CHECKED'			=> ($forum_rules_data['allow_smilies']) ? true : false,					'S_URLS_CHECKED'			=> ($forum_rules_data['allow_urls']) ? true : false,					'S_FORUM_PASSWORD_SET'		=> (empty($forum_data['forum_password'])) ? false : true,					'FORUM_DESC'				=> $forum_desc_data['text'],					'S_DESC_BBCODE_CHECKED'		=> ($forum_desc_data['allow_bbcode']) ? true : false,					'S_DESC_SMILIES_CHECKED'	=> ($forum_desc_data['allow_smilies']) ? true : false,					'S_DESC_URLS_CHECKED'		=> ($forum_desc_data['allow_urls']) ? true : false,					'S_FORUM_TYPE_OPTIONS'		=> $forum_type_options,					'S_STATUS_OPTIONS'			=> $statuslist,					'S_PARENT_OPTIONS'			=> $parents_list,					'S_STYLES_OPTIONS'			=> $styles_list,					'S_FORUM_OPTIONS'			=> make_forum_select(($action == 'add') ? $forum_data['parent_id'] : false, ($action == 'edit') ? $forum_data['forum_id'] : false, false, false, false),					'S_SHOW_DISPLAY_ON_INDEX'	=> $s_show_display_on_index,					'S_FORUM_POST'				=> ($forum_data['forum_type'] == FORUM_POST) ? true : false,					'S_FORUM_ORIG_POST'			=> (isset($old_forum_type) && $old_forum_type == FORUM_POST) ? true : false,					'S_FORUM_ORIG_CAT'			=> (isset($old_forum_type) && $old_forum_type == FORUM_CAT) ? true : false,					'S_FORUM_ORIG_LINK'			=> (isset($old_forum_type) && $old_forum_type == FORUM_LINK) ? true : false,					'S_FORUM_LINK'				=> ($forum_data['forum_type'] == FORUM_LINK) ? true : false,					'S_FORUM_CAT'				=> ($forum_data['forum_type'] == FORUM_CAT) ? true : false,					'S_ENABLE_INDEXING'			=> ($forum_data['enable_indexing']) ? true : false,					'S_TOPIC_ICONS'				=> ($forum_data['enable_icons']) ? true : false,					'S_DISPLAY_SUBFORUM_LIST'	=> ($forum_data['display_subforum_list']) ? true : false,					'S_DISPLAY_ON_INDEX'		=> ($forum_data['display_on_index']) ? true : false,					'S_PRUNE_ENABLE'			=> ($forum_data['enable_prune']) ? true : false,					'S_FORUM_LINK_TRACK'		=> ($forum_data['forum_flags'] & FORUM_FLAG_LINK_TRACK) ? true : false,					'S_PRUNE_OLD_POLLS'			=> ($forum_data['forum_flags'] & FORUM_FLAG_PRUNE_POLL) ? true : false,					'S_PRUNE_ANNOUNCE'			=> ($forum_data['forum_flags'] & FORUM_FLAG_PRUNE_ANNOUNCE) ? true : false,					'S_PRUNE_STICKY'			=> ($forum_data['forum_flags'] & FORUM_FLAG_PRUNE_STICKY) ? true : false,					'S_DISPLAY_ACTIVE_TOPICS'	=> ($forum_data['forum_type'] == FORUM_POST) ? ($forum_data['forum_flags'] & FORUM_FLAG_ACTIVE_TOPICS) : true,					'S_ENABLE_ACTIVE_TOPICS'	=> ($forum_data['forum_type'] == FORUM_CAT) ? ($forum_data['forum_flags'] & FORUM_FLAG_ACTIVE_TOPICS) : false,					'S_ENABLE_POST_REVIEW'		=> ($forum_data['forum_flags'] & FORUM_FLAG_POST_REVIEW) ? true : false,					'S_ENABLE_QUICK_REPLY'		=> ($forum_data['forum_flags'] & FORUM_FLAG_QUICK_REPLY) ? true : false,					'S_CAN_COPY_PERMISSIONS'	=> ($action != 'edit' || empty($forum_id) || ($auth->acl_get('a_fauth') && $auth->acl_get('a_authusers') && $auth->acl_get('a_authgroups') && $auth->acl_get('a_mauth'))) ? true : false,				));				return;			break;			case 'delete':				if (!$forum_id)				{					trigger_error($user->lang['NO_FORUM'] . adm_back_link($this->u_action . '&amp;parent_id=' . $this->parent_id), E_USER_WARNING);				}				$forum_data = $this->get_forum_info($forum_id);				$subforums_id = array();				$subforums = get_forum_branch($forum_id, 'children');				foreach ($subforums as $row)				{					$subforums_id[] = $row['forum_id'];				}				$forums_list = make_forum_select($forum_data['parent_id'], $subforums_id);				$sql = 'SELECT forum_id					FROM ' . FORUMS_TABLE . '					WHERE forum_type = ' . FORUM_POST . "						AND forum_id <> $forum_id";				$result = $db->sql_query_limit($sql, 1);				if ($db->sql_fetchrow($result))				{					$template->assign_vars(array(						'S_MOVE_FORUM_OPTIONS'		=> make_forum_select($forum_data['parent_id'], $subforums_id, false, true)) // , false, true, false???					);				}				$db->sql_freeresult($result);				$parent_id = ($this->parent_id == $forum_id) ? 0 : $this->parent_id;				$template->assign_vars(array(					'S_DELETE_FORUM'		=> true,					'U_ACTION'				=> $this->u_action . "&amp;parent_id={$parent_id}&amp;action=delete&amp;f=$forum_id",					'U_BACK'				=> $this->u_action . '&amp;parent_id=' . $this->parent_id,					'FORUM_NAME'			=> $forum_data['forum_name'],					'S_FORUM_POST'			=> ($forum_data['forum_type'] == FORUM_POST) ? true : false,					'S_FORUM_LINK'			=> ($forum_data['forum_type'] == FORUM_LINK) ? true : false,					'S_HAS_SUBFORUMS'		=> ($forum_data['right_id'] - $forum_data['left_id'] > 1) ? true : false,					'S_FORUMS_LIST'			=> $forums_list,					'S_ERROR'				=> (sizeof($errors)) ? true : false,					'ERROR_MSG'				=> (sizeof($errors)) ? implode('<br />', $errors) : '')				);				return;			break;			case 'copy_perm':				$forum_perm_from = request_var('forum_perm_from', 0);				// Copy permissions?				if (!empty($forum_perm_from) && $forum_perm_from != $forum_id)				{					copy_forum_permissions($forum_perm_from, $forum_id, true);					cache_moderators();					$auth->acl_clear_prefetch();					$cache->destroy('sql', FORUMS_TABLE);					$acl_url = '&amp;mode=setting_forum_local&amp;forum_id[]=' . $forum_id;					$message = $user->lang['FORUM_UPDATED'];					// Redirect to permissions					if ($auth->acl_get('a_fauth'))					{						$message .= '<br /><br />' . sprintf($user->lang['REDIRECT_ACL'], '<a href="' . append_sid("{$phpbb_admin_path}index.$phpEx", 'i=permissions' . $acl_url) . '">', '</a>');					}					trigger_error($message . adm_back_link($this->u_action . '&amp;parent_id=' . $this->parent_id));				}			break;		}		// Default management page		if (!$this->parent_id)		{			$navigation = $user->lang['FORUM_INDEX'];		}		else		{			$navigation = '<a href="' . $this->u_action . '">' . $user->lang['FORUM_INDEX'] . '</a>';			$forums_nav = get_forum_branch($this->parent_id, 'parents', 'descending');			foreach ($forums_nav as $row)			{				if ($row['forum_id'] == $this->parent_id)				{					$navigation .= ' -&gt; ' . $row['forum_name'];				}				else				{					$navigation .= ' -&gt; <a href="' . $this->u_action . '&amp;parent_id=' . $row['forum_id'] . '">' . $row['forum_name'] . '</a>';				}			}		}		// Jumpbox		$forum_box = make_forum_select($this->parent_id, false, false, false, false); //make_forum_select($this->parent_id);		if ($action == 'sync' || $action == 'sync_forum')		{			$template->assign_var('S_RESYNCED', true);		}		$sql = 'SELECT *			FROM ' . FORUMS_TABLE . "			WHERE parent_id = $this->parent_id			ORDER BY left_id";		$result = $db->sql_query($sql);		if ($row = $db->sql_fetchrow($result))		{			do			{				$forum_type = $row['forum_type'];				if ($row['forum_status'] == ITEM_LOCKED)				{					$folder_image = '<img src="images/icon_folder_lock.gif" alt="' . $user->lang['LOCKED'] . '" />';				}				else				{					switch ($forum_type)					{						case FORUM_LINK:							$folder_image = '<img src="images/icon_folder_link.gif" alt="' . $user->lang['LINK'] . '" />';						break;						default:							$folder_image = ($row['left_id'] + 1 != $row['right_id']) ? '<img src="images/icon_subfolder.gif" alt="' . $user->lang['SUBFORUM'] . '" />' : '<img src="images/icon_folder.gif" alt="' . $user->lang['FOLDER'] . '" />';						break;					}				}				$url = $this->u_action . "&amp;parent_id=$this->parent_id&amp;f={$row['forum_id']}";				$template->assign_block_vars('forums', array(					'FOLDER_IMAGE'		=> $folder_image,					'FORUM_IMAGE'		=> ($row['forum_image']) ? '<img src="' . $phpbb_root_path . $row['forum_image'] . '" alt="" />' : '',					'FORUM_IMAGE_SRC'	=> ($row['forum_image']) ? $phpbb_root_path . $row['forum_image'] : '',					'FORUM_NAME'		=> $row['forum_name'],					'FORUM_DESCRIPTION'	=> generate_text_for_display($row['forum_desc'], $row['forum_desc_uid'], $row['forum_desc_bitfield'], $row['forum_desc_options']),					'FORUM_TOPICS'		=> $row['forum_topics'],					'FORUM_POSTS'		=> $row['forum_posts'],					'S_FORUM_LINK'		=> ($forum_type == FORUM_LINK) ? true : false,					'S_FORUM_POST'		=> ($forum_type == FORUM_POST) ? true : false,					'U_FORUM'			=> $this->u_action . '&amp;parent_id=' . $row['forum_id'],					'U_MOVE_UP'			=> $url . '&amp;action=move_up',					'U_MOVE_DOWN'		=> $url . '&amp;action=move_down',					'U_EDIT'			=> $url . '&amp;action=edit',					'U_DELETE'			=> $url . '&amp;action=delete',					'U_SYNC'			=> $url . '&amp;action=sync')				);			}			while ($row = $db->sql_fetchrow($result));		}		else if ($this->parent_id)		{			$row = $this->get_forum_info($this->parent_id);			$url = $this->u_action . '&amp;parent_id=' . $this->parent_id . '&amp;f=' . $row['forum_id'];			$template->assign_vars(array(				'S_NO_FORUMS'		=> true,				'U_EDIT'			=> $url . '&amp;action=edit',				'U_DELETE'			=> $url . '&amp;action=delete',				'U_SYNC'			=> $url . '&amp;action=sync')			);		}		$db->sql_freeresult($result);		$template->assign_vars(array(			'ERROR_MSG'		=> (sizeof($errors)) ? implode('<br />', $errors) : '',			'NAVIGATION'	=> $navigation,			'FORUM_BOX'		=> $forum_box,			'U_SEL_ACTION'	=> $this->u_action,			'U_ACTION'		=> $this->u_action . '&amp;parent_id=' . $this->parent_id,			'U_PROGRESS_BAR'	=> $this->u_action . '&amp;action=progress_bar',			'UA_PROGRESS_BAR'	=> addslashes($this->u_action . '&amp;action=progress_bar'),		));	}	/**	* Get forum details	*/	function get_forum_info($forum_id)	{		global $db;		$sql = 'SELECT *			FROM ' . FORUMS_TABLE . "			WHERE forum_id = $forum_id";		$result = $db->sql_query($sql);		$row = $db->sql_fetchrow($result);		$db->sql_freeresult($result);		if (!$row)		{			trigger_error("Forum #$forum_id does not exist", E_USER_ERROR);		}		return $row;	}	/**	* Update forum data	*/	function update_forum_data(&$forum_data)	{		global $db, $user, $cache, $phpbb_root_path;		$errors = array();		if ($forum_data['forum_name'] == '')		{			$errors[] = $user->lang['FORUM_NAME_EMPTY'];		}		if (utf8_strlen($forum_data['forum_desc']) > 4000)		{			$errors[] = $user->lang['FORUM_DESC_TOO_LONG'];		}		if (utf8_strlen($forum_data['forum_rules']) > 4000)		{			$errors[] = $user->lang['FORUM_RULES_TOO_LONG'];		}		if ($forum_data['forum_password'] || $forum_data['forum_password_confirm'])		{			if ($forum_data['forum_password'] != $forum_data['forum_password_confirm'])			{				$forum_data['forum_password'] = $forum_data['forum_password_confirm'] = '';				$errors[] = $user->lang['FORUM_PASSWORD_MISMATCH'];			}		}		if ($forum_data['prune_days'] < 0 || $forum_data['prune_viewed'] < 0 || $forum_data['prune_freq'] < 0)		{			$forum_data['prune_days'] = $forum_data['prune_viewed'] = $forum_data['prune_freq'] = 0;			$errors[] = $user->lang['FORUM_DATA_NEGATIVE'];		}		$range_test_ary = array(			array('lang' => 'FORUM_TOPICS_PAGE', 'value' => $forum_data['forum_topics_per_page'], 'column_type' => 'TINT:0'),		);		if (!empty($forum_data['forum_image']) && !file_exists($phpbb_root_path . $forum_data['forum_image']))		{			$errors[] = $user->lang['FORUM_IMAGE_NO_EXIST'];		}		validate_range($range_test_ary, $errors);		// Set forum flags		// 1 = link tracking		// 2 = prune old polls		// 4 = prune announcements		// 8 = prune stickies		// 16 = show active topics		// 32 = enable post review		$forum_data['forum_flags'] = 0;		$forum_data['forum_flags'] += ($forum_data['forum_link_track']) ? FORUM_FLAG_LINK_TRACK : 0;		$forum_data['forum_flags'] += ($forum_data['prune_old_polls']) ? FORUM_FLAG_PRUNE_POLL : 0;		$forum_data['forum_flags'] += ($forum_data['prune_announce']) ? FORUM_FLAG_PRUNE_ANNOUNCE : 0;		$forum_data['forum_flags'] += ($forum_data['prune_sticky']) ? FORUM_FLAG_PRUNE_STICKY : 0;		$forum_data['forum_flags'] += ($forum_data['show_active']) ? FORUM_FLAG_ACTIVE_TOPICS : 0;		$forum_data['forum_flags'] += ($forum_data['enable_post_review']) ? FORUM_FLAG_POST_REVIEW : 0;		$forum_data['forum_flags'] += ($forum_data['enable_quick_reply']) ? FORUM_FLAG_QUICK_REPLY : 0;		// Unset data that are not database fields		$forum_data_sql = $forum_data;		unset($forum_data_sql['forum_link_track']);		unset($forum_data_sql['prune_old_polls']);		unset($forum_data_sql['prune_announce']);		unset($forum_data_sql['prune_sticky']);		unset($forum_data_sql['show_active']);		unset($forum_data_sql['enable_post_review']);		unset($forum_data_sql['enable_quick_reply']);		unset($forum_data_sql['forum_password_confirm']);		// What are we going to do tonight Brain? The same thing we do everynight,		// try to take over the world ... or decide whether to continue update		// and if so, whether it's a new forum/cat/link or an existing one		if (sizeof($errors))		{			return $errors;		}		// As we don't know the old password, it's kinda tricky to detect changes		if ($forum_data_sql['forum_password_unset'])		{			$forum_data_sql['forum_password'] = '';		}		else if (empty($forum_data_sql['forum_password']))		{			unset($forum_data_sql['forum_password']);		}		else		{			$forum_data_sql['forum_password'] = phpbb_hash($forum_data_sql['forum_password']);		}		unset($forum_data_sql['forum_password_unset']);		if (!isset($forum_data_sql['forum_id']))		{			// no forum_id means we're creating a new forum			unset($forum_data_sql['type_action']);			if ($forum_data_sql['parent_id'])			{				$sql = 'SELECT left_id, right_id, forum_type					FROM ' . FORUMS_TABLE . '					WHERE forum_id = ' . $forum_data_sql['parent_id'];				$result = $db->sql_query($sql);				$row = $db->sql_fetchrow($result);				$db->sql_freeresult($result);				if (!$row)				{					trigger_error($user->lang['PARENT_NOT_EXIST'] . adm_back_link($this->u_action . '&amp;parent_id=' . $this->parent_id), E_USER_WARNING);				}				if ($row['forum_type'] == FORUM_LINK)				{					$errors[] = $user->lang['PARENT_IS_LINK_FORUM'];					return $errors;				}				$sql = 'UPDATE ' . FORUMS_TABLE . '					SET left_id = left_id + 2, right_id = right_id + 2					WHERE left_id > ' . $row['right_id'];				$db->sql_query($sql);				$sql = 'UPDATE ' . FORUMS_TABLE . '					SET right_id = right_id + 2					WHERE ' . $row['left_id'] . ' BETWEEN left_id AND right_id';				$db->sql_query($sql);				$forum_data_sql['left_id'] = $row['right_id'];				$forum_data_sql['right_id'] = $row['right_id'] + 1;			}			else			{				$sql = 'SELECT MAX(right_id) AS right_id					FROM ' . FORUMS_TABLE;				$result = $db->sql_query($sql);				$row = $db->sql_fetchrow($result);				$db->sql_freeresult($result);				$forum_data_sql['left_id'] = $row['right_id'] + 1;				$forum_data_sql['right_id'] = $row['right_id'] + 2;			}			$sql = 'INSERT INTO ' . FORUMS_TABLE . ' ' . $db->sql_build_array('INSERT', $forum_data_sql);			$db->sql_query($sql);			$forum_data['forum_id'] = $db->sql_nextid();			add_log('admin', 'LOG_FORUM_ADD', $forum_data['forum_name']);		}		else		{			$row = $this->get_forum_info($forum_data_sql['forum_id']);			if ($row['forum_type'] == FORUM_POST && $row['forum_type'] != $forum_data_sql['forum_type'])			{				// Has subforums and want to change into a link?				if ($row['right_id'] - $row['left_id'] > 1 && $forum_data_sql['forum_type'] == FORUM_LINK)				{					$errors[] = $user->lang['FORUM_WITH_SUBFORUMS_NOT_TO_LINK'];					return $errors;				}				// we're turning a postable forum into a non-postable forum				if ($forum_data_sql['type_action'] == 'move')				{					$to_forum_id = request_var('to_forum_id', 0);					if ($to_forum_id)					{						$errors = $this->move_forum_content($forum_data_sql['forum_id'], $to_forum_id);					}					else					{						return array($user->lang['NO_DESTINATION_FORUM']);					}				}				else if ($forum_data_sql['type_action'] == 'delete')				{					$errors = $this->delete_forum_content($forum_data_sql['forum_id']);				}				else				{					return array($user->lang['NO_FORUM_ACTION']);				}				$forum_data_sql['forum_posts'] = $forum_data_sql['forum_topics'] = $forum_data_sql['forum_topics_real'] = $forum_data_sql['forum_last_post_id'] = $forum_data_sql['forum_last_poster_id'] = $forum_data_sql['forum_last_post_time'] = 0;				$forum_data_sql['forum_last_poster_name'] = $forum_data_sql['forum_last_poster_colour'] = '';			}			else if ($row['forum_type'] == FORUM_CAT && $forum_data_sql['forum_type'] == FORUM_LINK)			{				// Has subforums?				if ($row['right_id'] - $row['left_id'] > 1)				{					// We are turning a category into a link - but need to decide what to do with the subforums.					$action_subforums = request_var('action_subforums', '');					$subforums_to_id = request_var('subforums_to_id', 0);					if ($action_subforums == 'delete')					{						$rows = get_forum_branch($row['forum_id'], 'children', 'descending', false);						foreach ($rows as $_row)						{							// Do not remove the forum id we are about to change. ;)							if ($_row['forum_id'] == $row['forum_id'])							{								continue;							}							$forum_ids[] = $_row['forum_id'];							$errors = array_merge($errors, $this->delete_forum_content($_row['forum_id']));						}						if (sizeof($errors))						{							return $errors;						}						if (sizeof($forum_ids))						{							$sql = 'DELETE FROM ' . FORUMS_TABLE . '								WHERE ' . $db->sql_in_set('forum_id', $forum_ids);							$db->sql_query($sql);							$sql = 'DELETE FROM ' . ACL_GROUPS_TABLE . '								WHERE ' . $db->sql_in_set('forum_id', $forum_ids);							$db->sql_query($sql);							$sql = 'DELETE FROM ' . ACL_USERS_TABLE . '								WHERE ' . $db->sql_in_set('forum_id', $forum_ids);							$db->sql_query($sql);							// Delete forum ids from extension groups table							$sql = 'SELECT group_id, allowed_forums								FROM ' . EXTENSION_GROUPS_TABLE;							$result = $db->sql_query($sql);							while ($_row = $db->sql_fetchrow($result))							{								if (!$_row['allowed_forums'])								{									continue;								}								$allowed_forums = unserialize(trim($_row['allowed_forums']));								$allowed_forums = array_diff($allowed_forums, $forum_ids);								$sql = 'UPDATE ' . EXTENSION_GROUPS_TABLE . "									SET allowed_forums = '" . ((sizeof($allowed_forums)) ? serialize($allowed_forums) : '') . "'									WHERE group_id = {$_row['group_id']}";								$db->sql_query($sql);							}							$db->sql_freeresult($result);							$cache->destroy('_extensions');						}					}					else if ($action_subforums == 'move')					{						if (!$subforums_to_id)						{							return array($user->lang['NO_DESTINATION_FORUM']);						}						$sql = 'SELECT forum_name							FROM ' . FORUMS_TABLE . '							WHERE forum_id = ' . $subforums_to_id;						$result = $db->sql_query($sql);						$_row = $db->sql_fetchrow($result);						$db->sql_freeresult($result);						if (!$_row)						{							return array($user->lang['NO_FORUM']);						}						$subforums_to_name = $_row['forum_name'];						$sql = 'SELECT forum_id							FROM ' . FORUMS_TABLE . "							WHERE parent_id = {$row['forum_id']}";						$result = $db->sql_query($sql);						while ($_row = $db->sql_fetchrow($result))						{							$this->move_forum($_row['forum_id'], $subforums_to_id);						}						$db->sql_freeresult($result);						$sql = 'UPDATE ' . FORUMS_TABLE . "							SET parent_id = $subforums_to_id							WHERE parent_id = {$row['forum_id']}";						$db->sql_query($sql);					}					// Adjust the left/right id					$sql = 'UPDATE ' . FORUMS_TABLE . '						SET right_id = left_id + 1						WHERE forum_id = ' . $row['forum_id'];					$db->sql_query($sql);				}			}			else if ($row['forum_type'] == FORUM_CAT && $forum_data_sql['forum_type'] == FORUM_POST)			{				// Changing a category to a forum? Reset the data (you can't post directly in a cat, you must use a forum)				$forum_data_sql['forum_posts'] = 0;				$forum_data_sql['forum_topics'] = 0;				$forum_data_sql['forum_topics_real'] = 0;				$forum_data_sql['forum_last_post_id'] = 0;				$forum_data_sql['forum_last_post_subject'] = '';				$forum_data_sql['forum_last_post_time'] = 0;				$forum_data_sql['forum_last_poster_id'] = 0;				$forum_data_sql['forum_last_poster_name'] = '';				$forum_data_sql['forum_last_poster_colour'] = '';			}			if (sizeof($errors))			{				return $errors;			}			if ($row['parent_id'] != $forum_data_sql['parent_id'])			{				if ($row['forum_id'] != $forum_data_sql['parent_id'])				{					$errors = $this->move_forum($forum_data_sql['forum_id'], $forum_data_sql['parent_id']);				}				else				{					$forum_data_sql['parent_id'] = $row['parent_id'];				}			}			if (sizeof($errors))			{				return $errors;			}			unset($forum_data_sql['type_action']);			if ($row['forum_name'] != $forum_data_sql['forum_name'])			{				// the forum name has changed, clear the parents list of all forums (for safety)				$sql = 'UPDATE ' . FORUMS_TABLE . "					SET forum_parents = ''";				$db->sql_query($sql);			}			// Setting the forum id to the forum id is not really received well by some dbs. ;)			$forum_id = $forum_data_sql['forum_id'];			unset($forum_data_sql['forum_id']);			$sql = 'UPDATE ' . FORUMS_TABLE . '				SET ' . $db->sql_build_array('UPDATE', $forum_data_sql) . '				WHERE forum_id = ' . $forum_id;			$db->sql_query($sql);			// Add it back			$forum_data['forum_id'] = $forum_id;			add_log('admin', 'LOG_FORUM_EDIT', $forum_data['forum_name']);		}		return $errors;	}	/**	* Move forum	*/	function move_forum($from_id, $to_id)	{		global $db, $user;		$to_data = $moved_ids = $errors = array();		// Check if we want to move to a parent with link type		if ($to_id > 0)		{			$to_data = $this->get_forum_info($to_id);			if ($to_data['forum_type'] == FORUM_LINK)			{				$errors[] = $user->lang['PARENT_IS_LINK_FORUM'];				return $errors;			}		}		$moved_forums = get_forum_branch($from_id, 'children', 'descending');		$from_data = $moved_forums[0];		$diff = sizeof($moved_forums) * 2;		$moved_ids = array();		for ($i = 0; $i < sizeof($moved_forums); ++$i)		{			$moved_ids[] = $moved_forums[$i]['forum_id'];		}		// Resync parents		$sql = 'UPDATE ' . FORUMS_TABLE . "			SET right_id = right_id - $diff, forum_parents = ''			WHERE left_id < " . $from_data['right_id'] . "				AND right_id > " . $from_data['right_id'];		$db->sql_query($sql);		// Resync righthand side of tree		$sql = 'UPDATE ' . FORUMS_TABLE . "			SET left_id = left_id - $diff, right_id = right_id - $diff, forum_parents = ''			WHERE left_id > " . $from_data['right_id'];		$db->sql_query($sql);		if ($to_id > 0)		{			// Retrieve $to_data again, it may have been changed...			$to_data = $this->get_forum_info($to_id);			// Resync new parents			$sql = 'UPDATE ' . FORUMS_TABLE . "				SET right_id = right_id + $diff, forum_parents = ''				WHERE " . $to_data['right_id'] . ' BETWEEN left_id AND right_id					AND ' . $db->sql_in_set('forum_id', $moved_ids, true);			$db->sql_query($sql);			// Resync the righthand side of the tree			$sql = 'UPDATE ' . FORUMS_TABLE . "				SET left_id = left_id + $diff, right_id = right_id + $diff, forum_parents = ''				WHERE left_id > " . $to_data['right_id'] . '					AND ' . $db->sql_in_set('forum_id', $moved_ids, true);			$db->sql_query($sql);			// Resync moved branch			$to_data['right_id'] += $diff;			if ($to_data['right_id'] > $from_data['right_id'])			{				$diff = '+ ' . ($to_data['right_id'] - $from_data['right_id'] - 1);			}			else			{				$diff = '- ' . abs($to_data['right_id'] - $from_data['right_id'] - 1);			}		}		else		{			$sql = 'SELECT MAX(right_id) AS right_id				FROM ' . FORUMS_TABLE . '				WHERE ' . $db->sql_in_set('forum_id', $moved_ids, true);			$result = $db->sql_query($sql);			$row = $db->sql_fetchrow($result);			$db->sql_freeresult($result);			$diff = '+ ' . ($row['right_id'] - $from_data['left_id'] + 1);		}		$sql = 'UPDATE ' . FORUMS_TABLE . "			SET left_id = left_id $diff, right_id = right_id $diff, forum_parents = ''			WHERE " . $db->sql_in_set('forum_id', $moved_ids);		$db->sql_query($sql);		return $errors;	}	/**	* Move forum content from one to another forum	*/	function move_forum_content($from_id, $to_id, $sync = true)	{		global $db;		$table_ary = array(LOG_TABLE, POSTS_TABLE, TOPICS_TABLE, DRAFTS_TABLE, TOPICS_TRACK_TABLE);		foreach ($table_ary as $table)		{			$sql = "UPDATE $table				SET forum_id = $to_id				WHERE forum_id = $from_id";			$db->sql_query($sql);		}		unset($table_ary);		$table_ary = array(FORUMS_ACCESS_TABLE, FORUMS_TRACK_TABLE, FORUMS_WATCH_TABLE, MODERATOR_CACHE_TABLE);		foreach ($table_ary as $table)		{			$sql = "DELETE FROM $table				WHERE forum_id = $from_id";			$db->sql_query($sql);		}		if ($sync)		{			// Delete ghost topics that link back to the same forum then resync counters			sync('topic_moved');			sync('forum', 'forum_id', $to_id, false, true);		}		return array();	}	/**	* Remove complete forum	*/	function delete_forum($forum_id, $action_posts = 'delete', $action_subforums = 'delete', $posts_to_id = 0, $subforums_to_id = 0)	{		global $db, $user, $cache;		$forum_data = $this->get_forum_info($forum_id);		$errors = array();		$log_action_posts = $log_action_forums = $posts_to_name = $subforums_to_name = '';		$forum_ids = array($forum_id);		if ($action_posts == 'delete')		{			$log_action_posts = 'POSTS';			$errors = array_merge($errors, $this->delete_forum_content($forum_id));		}		else if ($action_posts == 'move')		{			if (!$posts_to_id)			{				$errors[] = $user->lang['NO_DESTINATION_FORUM'];			}			else			{				$log_action_posts = 'MOVE_POSTS';				$sql = 'SELECT forum_name					FROM ' . FORUMS_TABLE . '					WHERE forum_id = ' . $posts_to_id;				$result = $db->sql_query($sql);				$row = $db->sql_fetchrow($result);				$db->sql_freeresult($result);				if (!$row)				{					$errors[] = $user->lang['NO_FORUM'];				}				else				{					$posts_to_name = $row['forum_name'];					$errors = array_merge($errors, $this->move_forum_content($forum_id, $posts_to_id));				}			}		}		if (sizeof($errors))		{			return $errors;		}		if ($action_subforums == 'delete')		{			$log_action_forums = 'FORUMS';			$rows = get_forum_branch($forum_id, 'children', 'descending', false);			foreach ($rows as $row)			{				$forum_ids[] = $row['forum_id'];				$errors = array_merge($errors, $this->delete_forum_content($row['forum_id']));			}			if (sizeof($errors))			{				return $errors;			}			$diff = sizeof($forum_ids) * 2;			$sql = 'DELETE FROM ' . FORUMS_TABLE . '				WHERE ' . $db->sql_in_set('forum_id', $forum_ids);			$db->sql_query($sql);			$sql = 'DELETE FROM ' . ACL_GROUPS_TABLE . '				WHERE ' . $db->sql_in_set('forum_id', $forum_ids);			$db->sql_query($sql);			$sql = 'DELETE FROM ' . ACL_USERS_TABLE . '				WHERE ' . $db->sql_in_set('forum_id', $forum_ids);			$db->sql_query($sql);		}		else if ($action_subforums == 'move')		{			if (!$subforums_to_id)			{				$errors[] = $user->lang['NO_DESTINATION_FORUM'];			}			else			{				$log_action_forums = 'MOVE_FORUMS';				$sql = 'SELECT forum_name					FROM ' . FORUMS_TABLE . '					WHERE forum_id = ' . $subforums_to_id;				$result = $db->sql_query($sql);				$row = $db->sql_fetchrow($result);				$db->sql_freeresult($result);				if (!$row)				{					$errors[] = $user->lang['NO_FORUM'];				}				else				{					$subforums_to_name = $row['forum_name'];					$sql = 'SELECT forum_id						FROM ' . FORUMS_TABLE . "						WHERE parent_id = $forum_id";					$result = $db->sql_query($sql);					while ($row = $db->sql_fetchrow($result))					{						$this->move_forum($row['forum_id'], $subforums_to_id);					}					$db->sql_freeresult($result);					// Grab new forum data for correct tree updating later					$forum_data = $this->get_forum_info($forum_id);					$sql = 'UPDATE ' . FORUMS_TABLE . "						SET parent_id = $subforums_to_id						WHERE parent_id = $forum_id";					$db->sql_query($sql);					$diff = 2;					$sql = 'DELETE FROM ' . FORUMS_TABLE . "						WHERE forum_id = $forum_id";					$db->sql_query($sql);					$sql = 'DELETE FROM ' . ACL_GROUPS_TABLE . "						WHERE forum_id = $forum_id";					$db->sql_query($sql);					$sql = 'DELETE FROM ' . ACL_USERS_TABLE . "						WHERE forum_id = $forum_id";					$db->sql_query($sql);				}			}			if (sizeof($errors))			{				return $errors;			}		}		else		{			$diff = 2;			$sql = 'DELETE FROM ' . FORUMS_TABLE . "				WHERE forum_id = $forum_id";			$db->sql_query($sql);			$sql = 'DELETE FROM ' . ACL_GROUPS_TABLE . "				WHERE forum_id = $forum_id";			$db->sql_query($sql);			$sql = 'DELETE FROM ' . ACL_USERS_TABLE . "				WHERE forum_id = $forum_id";			$db->sql_query($sql);		}		// Resync tree		$sql = 'UPDATE ' . FORUMS_TABLE . "			SET right_id = right_id - $diff			WHERE left_id < {$forum_data['right_id']} AND right_id > {$forum_data['right_id']}";		$db->sql_query($sql);		$sql = 'UPDATE ' . FORUMS_TABLE . "			SET left_id = left_id - $diff, right_id = right_id - $diff			WHERE left_id > {$forum_data['right_id']}";		$db->sql_query($sql);		// Delete forum ids from extension groups table		$sql = 'SELECT group_id, allowed_forums			FROM ' . EXTENSION_GROUPS_TABLE;		$result = $db->sql_query($sql);		while ($row = $db->sql_fetchrow($result))		{			if (!$row['allowed_forums'])			{				continue;			}			$allowed_forums = unserialize(trim($row['allowed_forums']));			$allowed_forums = array_diff($allowed_forums, $forum_ids);			$sql = 'UPDATE ' . EXTENSION_GROUPS_TABLE . "				SET allowed_forums = '" . ((sizeof($allowed_forums)) ? serialize($allowed_forums) : '') . "'				WHERE group_id = {$row['group_id']}";			$db->sql_query($sql);		}		$db->sql_freeresult($result);		$cache->destroy('_extensions');		$log_action = implode('_', array($log_action_posts, $log_action_forums));		switch ($log_action)		{			case 'MOVE_POSTS_MOVE_FORUMS':				add_log('admin', 'LOG_FORUM_DEL_MOVE_POSTS_MOVE_FORUMS', $posts_to_name, $subforums_to_name, $forum_data['forum_name']);			break;			case 'MOVE_POSTS_FORUMS':				add_log('admin', 'LOG_FORUM_DEL_MOVE_POSTS_FORUMS', $posts_to_name, $forum_data['forum_name']);			break;			case 'POSTS_MOVE_FORUMS':				add_log('admin', 'LOG_FORUM_DEL_POSTS_MOVE_FORUMS', $subforums_to_name, $forum_data['forum_name']);			break;			case '_MOVE_FORUMS':				add_log('admin', 'LOG_FORUM_DEL_MOVE_FORUMS', $subforums_to_name, $forum_data['forum_name']);			break;			case 'MOVE_POSTS_':				add_log('admin', 'LOG_FORUM_DEL_MOVE_POSTS', $posts_to_name, $forum_data['forum_name']);			break;			case 'POSTS_FORUMS':				add_log('admin', 'LOG_FORUM_DEL_POSTS_FORUMS', $forum_data['forum_name']);			break;			case '_FORUMS':				add_log('admin', 'LOG_FORUM_DEL_FORUMS', $forum_data['forum_name']);			break;			case 'POSTS_':				add_log('admin', 'LOG_FORUM_DEL_POSTS', $forum_data['forum_name']);			break;			default:				add_log('admin', 'LOG_FORUM_DEL_FORUM', $forum_data['forum_name']);			break;		}		return $errors;	}	/**	* Delete forum content	*/	function delete_forum_content($forum_id)	{		global $db, $config, $phpbb_root_path, $phpEx;		include_once($phpbb_root_path . 'includes/functions_posting.' . $phpEx);		$db->sql_transaction('begin');		// Select then delete all attachments		$sql = 'SELECT a.topic_id			FROM ' . POSTS_TABLE . ' p, ' . ATTACHMENTS_TABLE . " a			WHERE p.forum_id = $forum_id				AND a.in_message = 0				AND a.topic_id = p.topic_id";		$result = $db->sql_query($sql);		$topic_ids = array();		while ($row = $db->sql_fetchrow($result))		{			$topic_ids[] = $row['topic_id'];		}		$db->sql_freeresult($result);		delete_attachments('topic', $topic_ids, false);		// Delete shadow topics pointing to topics in this forum		delete_topic_shadows($forum_id);		// Before we remove anything we make sure we are able to adjust the post counts later. ;)		$sql = 'SELECT poster_id			FROM ' . POSTS_TABLE . '			WHERE forum_id = ' . $forum_id . '				AND post_postcount = 1				AND post_approved = 1';		$result = $db->sql_query($sql);		$post_counts = array();		while ($row = $db->sql_fetchrow($result))		{			$post_counts[$row['poster_id']] = (!empty($post_counts[$row['poster_id']])) ? $post_counts[$row['poster_id']] + 1 : 1;		}		$db->sql_freeresult($result);		switch ($db->sql_layer)		{			case 'mysql4':			case 'mysqli':				// Delete everything else and thank MySQL for offering multi-table deletion				$tables_ary = array(					SEARCH_WORDMATCH_TABLE	=> 'post_id',					REPORTS_TABLE			=> 'post_id',					WARNINGS_TABLE			=> 'post_id',					BOOKMARKS_TABLE			=> 'topic_id',					TOPICS_WATCH_TABLE		=> 'topic_id',					TOPICS_POSTED_TABLE		=> 'topic_id',					POLL_OPTIONS_TABLE		=> 'topic_id',					POLL_VOTES_TABLE		=> 'topic_id',				);				$sql = 'DELETE ' . POSTS_TABLE;				$sql_using = "\nFROM " . POSTS_TABLE;				$sql_where = "\nWHERE " . POSTS_TABLE . ".forum_id = $forum_id\n";				foreach ($tables_ary as $table => $field)				{					$sql .= ", $table ";					$sql_using .= ", $table ";					$sql_where .= "\nAND $table.$field = " . POSTS_TABLE . ".$field";				}				$db->sql_query($sql . $sql_using . $sql_where);			break;			default:				// Delete everything else and curse your DB for not offering multi-table deletion				$tables_ary = array(					'post_id'	=>	array(						SEARCH_WORDMATCH_TABLE,						REPORTS_TABLE,						WARNINGS_TABLE,					),					'topic_id'	=>	array(						BOOKMARKS_TABLE,						TOPICS_WATCH_TABLE,						TOPICS_POSTED_TABLE,						POLL_OPTIONS_TABLE,						POLL_VOTES_TABLE,					)				);				// Amount of rows we select and delete in one iteration.				$batch_size = 500;				foreach ($tables_ary as $field => $tables)				{					$start = 0;					do					{						$sql = "SELECT $field							FROM " . POSTS_TABLE . '							WHERE forum_id = ' . $forum_id;						$result = $db->sql_query_limit($sql, $batch_size, $start);						$ids = array();						while ($row = $db->sql_fetchrow($result))						{							$ids[] = $row[$field];						}						$db->sql_freeresult($result);						if (sizeof($ids))						{							$start += sizeof($ids);							foreach ($tables as $table)							{								$db->sql_query("DELETE FROM $table WHERE " . $db->sql_in_set($field, $ids));							}						}					}					while (sizeof($ids) == $batch_size);				}				unset($ids);			break;		}		$table_ary = array(FORUMS_ACCESS_TABLE, FORUMS_TRACK_TABLE, FORUMS_WATCH_TABLE, LOG_TABLE, MODERATOR_CACHE_TABLE, POSTS_TABLE, TOPICS_TABLE, TOPICS_TRACK_TABLE);		foreach ($table_ary as $table)		{			$db->sql_query("DELETE FROM $table WHERE forum_id = $forum_id");		}		// Set forum ids to 0		$table_ary = array(DRAFTS_TABLE);		foreach ($table_ary as $table)		{			$db->sql_query("UPDATE $table SET forum_id = 0 WHERE forum_id = $forum_id");		}		// Adjust users post counts		if (sizeof($post_counts))		{			foreach ($post_counts as $poster_id => $substract)			{				$sql = 'UPDATE ' . USERS_TABLE . '					SET user_posts = 0					WHERE user_id = ' . $poster_id . '					AND user_posts < ' . $substract;				$db->sql_query($sql);				$sql = 'UPDATE ' . USERS_TABLE . '					SET user_posts = user_posts - ' . $substract . '					WHERE user_id = ' . $poster_id . '					AND user_posts >= ' . $substract;				$db->sql_query($sql);			}		}		$db->sql_transaction('commit');		// Make sure the overall post/topic count is correct...		$sql = 'SELECT COUNT(post_id) AS stat			FROM ' . POSTS_TABLE . '			WHERE post_approved = 1';		$result = $db->sql_query($sql);		$row = $db->sql_fetchrow($result);		$db->sql_freeresult($result);		set_config('num_posts', (int) $row['stat'], true);		$sql = 'SELECT COUNT(topic_id) AS stat			FROM ' . TOPICS_TABLE . '			WHERE topic_approved = 1';		$result = $db->sql_query($sql);		$row = $db->sql_fetchrow($result);		$db->sql_freeresult($result);		set_config('num_topics', (int) $row['stat'], true);		$sql = 'SELECT COUNT(attach_id) as stat			FROM ' . ATTACHMENTS_TABLE;		$result = $db->sql_query($sql);		$row = $db->sql_fetchrow($result);		$db->sql_freeresult($result);		set_config('num_files', (int) $row['stat'], true);		$sql = 'SELECT SUM(filesize) as stat			FROM ' . ATTACHMENTS_TABLE;		$result = $db->sql_query($sql);		$row = $db->sql_fetchrow($result);		$db->sql_freeresult($result);		set_config('upload_dir_size', (float) $row['stat'], true);		return array();	}	/**	* Move forum position by $steps up/down	*/	function move_forum_by($forum_row, $action = 'move_up', $steps = 1)	{		global $db;		/**		* Fetch all the siblings between the module's current spot		* and where we want to move it to. If there are less than $steps		* siblings between the current spot and the target then the		* module will move as far as possible		*/		$sql = 'SELECT forum_id, forum_name, left_id, right_id			FROM ' . FORUMS_TABLE . "			WHERE parent_id = {$forum_row['parent_id']}				AND " . (($action == 'move_up') ? "right_id < {$forum_row['right_id']} ORDER BY right_id DESC" : "left_id > {$forum_row['left_id']} ORDER BY left_id ASC");		$result = $db->sql_query_limit($sql, $steps);		$target = array();		while ($row = $db->sql_fetchrow($result))		{			$target = $row;		}		$db->sql_freeresult($result);		if (!sizeof($target))		{			// The forum is already on top or bottom			return false;		}		/**		* $left_id and $right_id define the scope of the nodes that are affected by the move.		* $diff_up and $diff_down are the values to substract or add to each node's left_id		* and right_id in order to move them up or down.		* $move_up_left and $move_up_right define the scope of the nodes that are moving		* up. Other nodes in the scope of ($left_id, $right_id) are considered to move down.		*/		if ($action == 'move_up')		{			$left_id = $target['left_id'];			$right_id = $forum_row['right_id'];			$diff_up = $forum_row['left_id'] - $target['left_id'];			$diff_down = $forum_row['right_id'] + 1 - $forum_row['left_id'];			$move_up_left = $forum_row['left_id'];			$move_up_right = $forum_row['right_id'];		}		else		{			$left_id = $forum_row['left_id'];			$right_id = $target['right_id'];			$diff_up = $forum_row['right_id'] + 1 - $forum_row['left_id'];			$diff_down = $target['right_id'] - $forum_row['right_id'];			$move_up_left = $forum_row['right_id'] + 1;			$move_up_right = $target['right_id'];		}		// Now do the dirty job		$sql = 'UPDATE ' . FORUMS_TABLE . "			SET left_id = left_id + CASE				WHEN left_id BETWEEN {$move_up_left} AND {$move_up_right} THEN -{$diff_up}				ELSE {$diff_down}			END,			right_id = right_id + CASE				WHEN right_id BETWEEN {$move_up_left} AND {$move_up_right} THEN -{$diff_up}				ELSE {$diff_down}			END,			forum_parents = ''			WHERE				left_id BETWEEN {$left_id} AND {$right_id}				AND right_id BETWEEN {$left_id} AND {$right_id}";		$db->sql_query($sql);		return $target['forum_name'];	}	/**	* Display progress bar for syncinc forums	*/	function display_progress_bar($start, $total)	{		global $template, $user;		adm_page_header($user->lang['SYNC_IN_PROGRESS']);		$template->set_filenames(array(			'body'	=> 'progress_bar.html')		);		$template->assign_vars(array(			'L_PROGRESS'			=> $user->lang['SYNC_IN_PROGRESS'],			'L_PROGRESS_EXPLAIN'	=> ($start && $total) ? sprintf($user->lang['SYNC_IN_PROGRESS_EXPLAIN'], $start, $total) : $user->lang['SYNC_IN_PROGRESS'])		);		adm_page_footer();	}	/**	* Display copy permission page	* Not used at the moment - we will have a look at it for 3.0.7	*/	function copy_permission_page($forum_data)	{		global $phpEx, $phpbb_admin_path, $template, $user;		$acl_url = '&amp;mode=setting_forum_local&amp;forum_id[]=' . $forum_data['forum_id'];		$action = append_sid($this->u_action . "&amp;parent_id={$this->parent_id}&amp;f={$forum_data['forum_id']}&amp;action=copy_perm");		$l_acl = sprintf($user->lang['COPY_TO_ACL'], '<a href="' . append_sid("{$phpbb_admin_path}index.$phpEx", 'i=permissions' . $acl_url) . '">', '</a>');		$this->tpl_name = 'acp_forums_copy_perm';		$template->assign_vars(array(			'U_ACL'				=> append_sid("{$phpbb_admin_path}index.$phpEx", 'i=permissions' . $acl_url),			'L_ACL_LINK'		=> $l_acl,			'L_BACK_LINK'		=> adm_back_link($this->u_action . '&amp;parent_id=' . $this->parent_id),			'S_COPY_ACTION'		=> $action,			'S_FORUM_OPTIONS'	=> make_forum_select($forum_data['parent_id'], $forum_data['forum_id'], false, false, false),		));	}}?>
<?php/**** @package VC* @version $Id$* @copyright (c) 2008 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @ignore*/if (!defined('IN_PHPBB')){	exit;}/*** A small class for 3.0.x (no autoloader in 3.0.x)** @package VC*/class phpbb_captcha_factory{	/**	* return an instance of class $name in file $name_plugin.php	*/	function &get_instance($name)	{		global $phpbb_root_path, $phpEx;		$name = basename($name);		if (!class_exists($name))		{			include($phpbb_root_path . "includes/captcha/plugins/{$name}_plugin." . $phpEx);		}		$instance = call_user_func(array($name, 'get_instance'));		return $instance;	}	/**	* Call the garbage collector	*/	function garbage_collect($name)	{		global $phpbb_root_path, $phpEx;		$name = basename($name);		if (!class_exists($name))		{			include($phpbb_root_path . "includes/captcha/plugins/{$name}_plugin." . $phpEx);		}		call_user_func(array($name, 'garbage_collect'), 0);	}	/**	* return a list of all discovered CAPTCHA plugins	*/	function get_captcha_types()	{		global $phpbb_root_path, $phpEx;		$captchas = array(			'available'		=> array(),			'unavailable'	=> array(),		);		$dp = @opendir($phpbb_root_path . 'includes/captcha/plugins');		if ($dp)		{			while (($file = readdir($dp)) !== false)			{				if ((preg_match('#_plugin\.' . $phpEx . '$#', $file)))				{					$name = preg_replace('#^(.*?)_plugin\.' . $phpEx . '$#', '\1', $file);					if (!class_exists($name))					{						include($phpbb_root_path . "includes/captcha/plugins/$file");					}					if (call_user_func(array($name, 'is_available')))					{						$captchas['available'][$name] = call_user_func(array($name, 'get_name'));					}					else					{						$captchas['unavailable'][$name] = call_user_func(array($name, 'get_name'));					}				}			}			closedir($dp);		}		return $captchas;	}}?>
<?php return array(0=>'0',1=>'1',2=>'2',3=>'3',4=>'4',5=>'5',6=>'6',7=>'7',8=>'8',9=>'9','A'=>'a','B'=>'b','C'=>'c','D'=>'d','E'=>'e','F'=>'f','G'=>'g','H'=>'h','I'=>'i','J'=>'j','K'=>'k','L'=>'l','M'=>'m','N'=>'n','O'=>'o','P'=>'p','Q'=>'q','R'=>'r','S'=>'s','T'=>'t','U'=>'u','V'=>'v','W'=>'w','X'=>'x','Y'=>'y','Z'=>'z','a'=>'a','b'=>'b','c'=>'c','d'=>'d','e'=>'e','f'=>'f','g'=>'g','h'=>'h','i'=>'i','j'=>'j','k'=>'k','l'=>'l','m'=>'m','n'=>'n','o'=>'o','p'=>'p','q'=>'q','r'=>'r','s'=>'s','t'=>'t','u'=>'u','v'=>'v','w'=>'w','x'=>'x','y'=>'y','z'=>'z',''=>'',''=>'2',''=>'3',''=>'',''=>'1',''=>'',''=>'1/4',''=>'1/2',''=>'3/4',''=>'',''=>'',''=>'',''=>'',''=>'ae',''=>'',''=>'ae',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'oe',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'ss',''=>'',''=>'',''=>'',''=>'',''=>'ae',''=>'',''=>'ae',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'oe',''=>'',''=>'',''=>'',''=>'',''=>'ue',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'i',''=>'',''=>'ij',''=>'ij',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'oe',''=>'oe',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'hv',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'oi',''=>'oi',''=>'',''=>'',''=>'yr',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'lj',''=>'',''=>'lj',''=>'nj',''=>'',''=>'nj',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'dz',''=>'',''=>'dz',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'ou',''=>'ou',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'0',''=>'1',''=>'2',''=>'3',''=>'4',''=>'5',''=>'6',''=>'7',''=>'8',''=>'9',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'0',''=>'1',''=>'2',''=>'3',''=>'4',''=>'5',''=>'6',''=>'7',''=>'8',''=>'9',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'0',''=>'1',''=>'2',''=>'3',''=>'4',''=>'5',''=>'6',''=>'7',''=>'8',''=>'9',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'');
<?php/**** @package VC* @version $Id$* @copyright (c) 2006 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** Wave3D CAPTCHA** @author Robert Hetzler* @package VC*/class captcha{	var $width		= 360;	var $height		= 96;	function execute($code, $seed)	{		global $starttime;		// seed the random generator		mt_srand($seed);		// set height and width		$img_x = $this->width;		$img_y = $this->height;		// Generate image		$img	= imagecreatetruecolor($img_x, $img_y);		$x_grid = mt_rand(6, 10);		$y_grid = mt_rand(6, 10);		// Ok, so lets cut to the chase. We could accurately represent this in 3d and		// do all the appropriate linear transforms. my questions is... why bother?		// The computational overhead is unnecessary when you consider the simple fact:		// we're not here to accurately represent a model, but to just show off some random-ish		// polygons		// Conceive of 3 spaces.		// 1) planar-space (discrete "pixel" grid)		// 2) 3-space. (planar-space with z/height aspect)		// 3) image space (pixels on the screen)		// resolution of the planar-space we're embedding the text code in		$plane_x	= 100;		$plane_y	= 30;		$subdivision_factor = 3;		// $box is the 4 points in img_space that correspond to the corners of the plane in 3-space		$box = array(			'upper_left'	=> array(				'x' => mt_rand(5, 15),				'y' => mt_rand(10, 15)			),			'upper_right'	=> array(				'x' => mt_rand($img_x - 35, $img_x - 19),				'y' => mt_rand(10, 17)			),			'lower_left'	=> array(				'x' => mt_rand($img_x - 45, $img_x - 5),				'y' => mt_rand($img_y - 15, $img_y - 0),			),		);		$box['lower_right'] = array(			'x' => $box['lower_left']['x'] + $box['upper_left']['x'] - $box['upper_right']['x'],			'y' => $box['lower_left']['y'] + $box['upper_left']['y'] - $box['upper_right']['y'],		);		// TODO		$background = imagecolorallocate($img, mt_rand(155, 255), mt_rand(155, 255), mt_rand(155, 255));		imagefill($img, 0, 0, $background);		$black = imagecolorallocate($img, 0, 0, 0);		$random = array();		$fontcolors = array();		for ($i = 0; $i < 15; ++$i)		{			$random[$i] = imagecolorallocate($img, mt_rand(120, 255), mt_rand(120, 255), mt_rand(120, 255));		}		$fontcolors[0] = imagecolorallocate($img, mt_rand(0, 120), mt_rand(0, 120), mt_rand(0, 120)); 		$colors = array();		$minr = mt_rand(20, 30);		$ming = mt_rand(20, 30);		$minb = mt_rand(20, 30);		$maxr = mt_rand(150, 230);		$maxg = mt_rand(150, 230);		$maxb = mt_rand(150, 230);		for ($i = -30; $i <= 30; ++$i)		{			$coeff1 = ($i + 12) / 45;			$coeff2 = 1 - $coeff1;			$colors[$i] = imagecolorallocate($img, ($coeff2 * $maxr) + ($coeff1 * $minr), ($coeff2 * $maxg) + ($coeff1 * $ming), ($coeff2 * $maxb) + ($coeff1 * $minb));		}		// $img_buffer is the last row of 3-space positions (converted to img-space), cached		// (using this means we don't need to recalculate all 4 positions for each new polygon,		// merely the newest point that we're adding, which is then cached.		$img_buffer = array(array(), array());		// In image-space, the x- and y-offset necessary to move one unit in the x-direction in planar-space		$dxx = ($box['upper_right']['x'] - $box['upper_left']['x']) / ($subdivision_factor * $plane_x);		$dxy = ($box['upper_right']['y'] - $box['upper_left']['y']) / ($subdivision_factor * $plane_x);		// In image-space, the x- and y-offset necessary to move one unit in the y-direction in planar-space		$dyx = ($box['lower_right']['x'] - $box['upper_left']['x']) / ($subdivision_factor * $plane_y);		$dyy = ($box['lower_right']['y'] - $box['upper_left']['y']) / ($subdivision_factor * $plane_y);		// Initial captcha-letter offset in planar-space		$plane_offset_x = mt_rand(3, 8);		$plane_offset_y = mt_rand( 12, 15);		// character map		$map = $this->captcha_bitmaps();		// matrix		$plane = array();		// for each character, we'll silkscreen it into our boolean pixel plane		for ($c = 0, $code_num = strlen($code); $c < $code_num; ++$c)		{			$letter = $code[$c];			for ($x = $map['width'] - 1; $x >= 0; --$x)			{				for ($y = $map['height'] - 1; $y >= 0; --$y)				{					if ($map['data'][$letter][$y][$x])					{						$plane[$y + $plane_offset_y + (($c & 1) ? 1 : -1)][$x + $plane_offset_x] = true;					}				}			}			$plane_offset_x += 11;		}		// calculate our first buffer, we can't actually draw polys with these yet		// img_pos_prev == screen x,y location to our immediate left.		// img_pos_cur == current screen x,y location		// we calculate screen position of our		// current cell based on the difference from the previous cell		// rather than recalculating from absolute coordinates		// What we cache into the $img_buffer contains the raised text coordinates.		$img_pos_prev	= $img_buffer[0][0] = array($box['upper_left']['x'], $box['upper_left']['y']);		$cur_height		= $prev_height = $this->wave_height(0, 0, $subdivision_factor);		$full_x			= $plane_x * $subdivision_factor;		$full_y			= $plane_y * $subdivision_factor;		for ($x = 1; $x <= $full_x; ++$x)		{			$cur_height		= $this->wave_height($x, 0, $subdivision_factor);			$offset			= $cur_height - $prev_height;			$img_pos_cur	= array($img_pos_prev[0] + $dxx, $img_pos_prev[1] + $dxy + $offset);			$img_buffer[0][$x]	= $img_pos_cur;			$img_pos_prev		= $img_pos_cur;			$prev_height		= $cur_height;		}		for ($y = 1; $y <= $full_y; ++$y)		{			// swap buffers			$buffer_cur		= $y & 1;			$buffer_prev	= 1 - $buffer_cur;			$prev_height	= $this->wave_height(0, $y, $subdivision_factor);			$offset			= $prev_height - $this->wave_height(0, $y - 1, $subdivision_factor);			$img_pos_cur	= array($img_buffer[$buffer_prev][0][0] + $dyx, min($img_buffer[$buffer_prev][0][1] + $dyy + $offset, $img_y - 1));			// make sure we don't try to write off the page			$img_pos_prev	= $img_pos_cur;			$img_buffer[$buffer_cur][0]	= $img_pos_cur;			for ($x = 1; $x <= $full_x; ++$x)			{				$cur_height		= $this->wave_height($x, $y, $subdivision_factor) + $this->grid_height($x, $y, 1, $x_grid, $y_grid);				// height is a z-factor, not a y-factor				$offset			= $cur_height - $prev_height;				$img_pos_cur	= array($img_pos_prev[0] + $dxx, $img_pos_prev[1] + $dxy + $offset);				// height is float, index it to an int, get closest color				$color			= $colors[intval($cur_height)];				$img_pos_prev	= $img_pos_cur;				$prev_height	= $cur_height;				$y_index_old = intval(($y - 1) / $subdivision_factor);				$y_index_new = intval($y / $subdivision_factor);				$x_index_old = intval(($x - 1) / $subdivision_factor);				$x_index_new = intval($x / $subdivision_factor);				if (!empty($plane[$y_index_new][$x_index_new]))				{					$img_pos_cur[1]	+= $this->wave_height($x, $y, $subdivision_factor, 1) - 30 - $cur_height;					$color			= $colors[20];				}				$img_pos_cur[1] = min($img_pos_cur[1], $img_y - 1);				$img_buffer[$buffer_cur][$x] = $img_pos_cur;				// Smooth the edges as much as possible by having not more than one low<->high traingle per square				// Otherwise, just				$diag_down	= (empty($plane[$y_index_old][$x_index_old]) == empty($plane[$y_index_new][$x_index_new]));				$diag_up	= (empty($plane[$y_index_old][$x_index_new]) == empty($plane[$y_index_new][$x_index_old]));				// natural switching				$mode = ($x + $y) & 1;				// override if it requires it				if ($diag_down != $diag_up)				{					$mode = $diag_up;				}				if ($mode)				{					//		+-/			  /					// 1	|/		2	 /|					//		/			/-+					$poly1 = array_merge($img_buffer[$buffer_cur][$x - 1], $img_buffer[$buffer_prev][$x - 1], $img_buffer[$buffer_prev][$x]);					$poly2 = array_merge($img_buffer[$buffer_cur][$x - 1], $img_buffer[$buffer_cur][$x], $img_buffer[$buffer_prev][$x]);				}				else				{					//		\			\-+					// 1	|\		2	 \|					//		+-\			  \					$poly1 = array_merge($img_buffer[$buffer_cur][$x - 1], $img_buffer[$buffer_prev][$x - 1], $img_buffer[$buffer_cur][$x]);					$poly2 = array_merge($img_buffer[$buffer_prev][$x - 1], $img_buffer[$buffer_prev][$x], $img_buffer[$buffer_cur][$x]);				}				imagefilledpolygon($img, $poly1, 3, $color);				imagefilledpolygon($img, $poly2, 3, $color);			}		}		// Output image		header('Content-Type: image/png');		header('Cache-control: no-cache, no-store');		//$mtime = explode(' ', microtime());		//$totaltime = $mtime[0] + $mtime[1] - $starttime;		//echo $totaltime . "<br />\n";		//echo memory_get_usage() - $tmp;		imagepng($img);		imagedestroy($img);	}	function wave_height($x, $y, $factor = 1, $tweak = 0.7)	{		// stretch the wave. TODO: pretty it up		$x = $x/5 + 180;		$y = $y/4;		return ((sin($x / (3 * $factor)) + sin($y / (3 * $factor))) * 10 * $tweak);	}	function grid_height($x, $y, $factor = 1, $x_grid, $y_grid)	{		return ((!($x % ($x_grid * $factor)) || !($y % ($y_grid * $factor))) ? 3 : 0);	}	function captcha_bitmaps()	{		return array(			'width'		=> 9,			'height'	=> 13,			'data'		=> array(				'A' => array(					array(0,0,1,1,1,1,0,0,0),					array(0,1,0,0,0,0,1,0,0),					array(1,0,0,0,0,0,0,1,0),					array(1,0,0,0,0,0,0,1,0),					array(1,0,0,0,0,0,0,1,0),					array(1,0,0,0,0,0,0,1,0),					array(1,0,0,0,0,0,0,1,0),					array(1,1,1,1,1,1,1,1,0),					array(1,0,0,0,0,0,0,1,0),					array(1,0,0,0,0,0,0,1,0),					array(1,0,0,0,0,0,0,1,0),					array(1,0,0,0,0,0,0,1,0),					array(1,0,0,0,0,0,0,1,0),					array(0,0,0,0,0,0,0,0,0),				),				'B' => array(					array(1,1,1,1,1,1,0,0,0),					array(1,0,0,0,0,0,1,0,0),					array(1,0,0,0,0,0,0,1,0),					array(1,0,0,0,0,0,0,1,0),					array(1,0,0,0,0,0,0,1,0),					array(1,0,0,0,0,0,1,0,0),					array(1,1,1,1,1,1,0,0,0),					array(1,0,0,0,0,0,1,0,0),					array(1,0,0,0,0,0,0,1,0),					array(1,0,0,0,0,0,0,1,0),					array(1,0,0,0,0,0,0,1,0),					array(1,0,0,0,0,0,1,0,0),					array(1,1,1,1,1,1,0,0,0),					array(0,0,0,0,0,0,0,0,0),				),				'C' => array(					array(0,0,1,1,1,1,1,0,0),					array(0,1,0,0,0,0,0,1,0),					array(1,0,0,0,0,0,0,0,1),					array(1,0,0,0,0,0,0,0,0),					array(1,0,0,0,0,0,0,0,0),					array(1,0,0,0,0,0,0,0,0),					array(1,0,0,0,0,0,0,0,0),					array(1,0,0,0,0,0,0,0,0),					array(1,0,0,0,0,0,0,0,0),					array(1,0,0,0,0,0,0,0,1),					array(0,1,0,0,0,0,0,1,0),					array(0,0,1,1,1,1,1,0,0),					array(0,0,0,0,0,0,0,0,0),					array(0,0,0,0,0,0,0,0,0),				),				'D' => array(					array(1,1,1,1,1,1,1,0,0),					array(1,0,0,0,0,0,0,1,0),					array(1,0,0,0,0,0,0,0,1),					array(1,0,0,0,0,0,0,0,1),					array(1,0,0,0,0,0,0,0,1),					array(1,0,0,0,0,0,0,0,1),					array(1,0,0,0,0,0,0,0,1),					array(1,0,0,0,0,0,0,0,1),					array(1,0,0,0,0,0,0,0,1),					array(1,0,0,0,0,0,0,1,0),					array(1,1,1,1,1,1,1,0,0),					array(0,0,0,0,0,0,0,0,0),					array(0,0,0,0,0,0,0,0,0),					array(0,0,0,0,0,0,0,0,0),				),				'E' => array(					array(0,0,1,1,1,1,1,1,1),					array(0,1,0,0,0,0,0,0,0),					array(1,0,0,0,0,0,0,0,0),					array(1,0,0,0,0,0,0,0,0),					array(1,0,0,0,0,0,0,0,0),					array(1,1,1,1,1,1,1,0,0),					array(1,0,0,0,0,0,0,0,0),					array(1,0,0,0,0,0,0,0,0),					array(1,0,0,0,0,0,0,0,0),					array(0,1,0,0,0,0,0,0,0),					array(0,0,1,1,1,1,1,1,1),					array(0,0,0,0,0,0,0,0,0),					array(0,0,0,0,0,0,0,0,0),					array(0,0,0,0,0,0,0,0,0),				),				'F' => array(					array(0,0,1,1,1,1,1,1,0),					array(0,1,0,0,0,0,0,0,0),					array(1,0,0,0,0,0,0,0,0),					array(1,0,0,0,0,0,0,0,0),					array(1,0,0,0,0,0,0,0,0),					array(1,1,1,1,1,1,0,0,0),					array(1,0,0,0,0,0,0,0,0),					array(1,0,0,0,0,0,0,0,0),					array(1,0,0,0,0,0,0,0,0),					array(1,0,0,0,0,0,0,0,0),					array(1,0,0,0,0,0,0,0,0),					array(1,0,0,0,0,0,0,0,0),					array(0,0,0,0,0,0,0,0,0),					array(0,0,0,0,0,0,0,0,0),				),				'G' => array(					array(0,0,1,1,1,1,1,0,0),					array(0,1,0,0,0,0,0,1,0),					array(1,0,0,0,0,0,0,0,1),					array(1,0,0,0,0,0,0,0,1),					array(1,0,0,0,0,0,0,0,0),					array(1,0,0,0,0,0,0,0,0),					array(1,0,0,0,0,0,0,0,0),					array(1,0,0,0,0,0,0,1,1),					array(1,0,0,0,0,0,0,0,1),					array(1,0,0,0,0,0,0,0,1),					array(0,1,0,0,0,0,0,1,0),					array(0,0,1,1,1,1,1,0,0),					array(0,0,0,0,0,0,0,0,0),					array(0,0,0,0,0,0,0,0,0),				),				'H' => array(					array(1,0,0,0,0,0,1,0,0),					array(1,0,0,0,0,0,1,0,0),					array(1,0,0,0,0,0,1,0,0),					array(1,0,0,0,0,0,1,0,0),					array(1,0,0,0,0,0,1,0,0),					array(1,1,1,1,1,1,1,0,0),					array(1,0,0,0,0,0,1,0,0),					array(1,0,0,0,0,0,1,0,0),					array(1,0,0,0,0,0,1,0,0),					array(1,0,0,0,0,0,1,0,0),					array(1,0,0,0,0,0,1,0,0),					array(0,0,0,0,0,0,0,0,0),					array(0,0,0,0,0,0,0,0,0),					array(0,0,0,0,0,0,0,0,0),				),				'I' => array(					array(0,1,1,1,1,1,1,1,0),					array(0,0,0,0,1,0,0,0,0),					array(0,0,0,0,1,0,0,0,0),					array(0,0,0,0,1,0,0,0,0),					array(0,0,0,0,1,0,0,0,0),					array(0,0,0,0,1,0,0,0,0),					array(0,0,0,0,1,0,0,0,0),					array(0,0,0,0,1,0,0,0,0),					array(0,0,0,0,1,0,0,0,0),					array(0,1,1,1,1,1,1,1,0),					array(0,0,0,0,0,0,0,0,0),					array(0,0,0,0,0,0,0,0,0),					array(0,0,0,0,0,0,0,0,0),					array(0,0,0,0,0,0,0,0,0),				),				'J' => array(					array(0,0,0,0,0,0,1,1,1),					array(0,0,0,0,0,0,0,0,1),					array(0,0,0,0,0,0,0,0,1),					array(0,0,0,0,0,0,0,0,1),					array(0,0,0,0,0,0,0,0,1),					array(0,0,0,0,0,0,0,0,1),					array(0,0,0,0,0,0,0,0,1),					array(0,1,0,0,0,0,0,0,1),					array(0,1,0,0,0,0,0,0,1),					array(0,0,1,0,0,0,0,1,0),					array(0,0,0,1,1,1,1,0,0),					array(0,0,0,0,0,0,0,0,0),					array(0,0,0,0,0,0,0,0,0),					array(0,0,0,0,0,0,0,0,0),				),				'K' => array(					array(1,0,0,0,0,0,1,0,0),					array(1,0,0,0,0,1,0,0,0),					array(1,0,0,0,1,0,0,0,0),					array(1,0,0,1,0,0,0,0,0),					array(1,0,1,0,0,0,0,0,0),					array(1,1,0,0,0,0,0,0,0),					array(1,0,1,0,0,0,0,0,0),					array(1,0,0,1,0,0,0,0,0),					array(1,0,0,0,1,0,0,0,0),					array(1,0,0,0,0,1,0,0,0),					array(1,0,0,0,0,0,1,0,0),					array(0,0,0,0,0,0,0,0,0),					array(0,0,0,0,0,0,0,0,0),					array(0,0,0,0,0,0,0,0,0),				),				'L' => array(					array(1,0,0,0,0,0,0,0,0),					array(1,0,0,0,0,0,0,0,0),					array(1,0,0,0,0,0,0,0,0),					array(1,0,0,0,0,0,0,0,0),					array(1,0,0,0,0,0,0,0,0),					array(1,0,0,0,0,0,0,0,0),					array(1,0,0,0,0,0,0,0,0),					array(1,0,0,0,0,0,0,0,0),					array(1,0,0,0,0,0,0,0,0),					array(0,1,0,0,0,0,0,0,0),					array(0,0,1,1,1,1,0,0,0),					array(0,0,0,0,0,0,0,0,0),					array(0,0,0,0,0,0,0,0,0),					array(0,0,0,0,0,0,0,0,0),				),				'M' => array(					array(0,1,0,0,0,0,0,1,0),					array(0,1,1,0,0,0,1,1,0),					array(0,1,0,1,0,1,0,1,0),					array(0,1,0,0,1,0,0,1,0),					array(0,1,0,0,0,0,0,1,0),					array(0,1,0,0,0,0,0,1,0),					array(0,1,0,0,0,0,0,1,0),					array(0,1,0,0,0,0,0,1,0),					array(0,1,0,0,0,0,0,1,0),					array(0,0,0,0,0,0,0,0,0),					array(0,0,0,0,0,0,0,0,0),					array(0,0,0,0,0,0,0,0,0),					array(0,0,0,0,0,0,0,0,0),					array(0,0,0,0,0,0,0,0,0),				),				'N' => array(					array(1,0,0,0,0,0,0,0,1),					array(1,1,0,0,0,0,0,0,1),					array(1,0,1,0,0,0,0,0,1),					array(1,0,0,1,0,0,0,0,1),					array(1,0,0,0,1,0,0,0,1),					array(1,0,0,0,0,1,0,0,1),					array(1,0,0,0,0,0,1,0,1),					array(1,0,0,0,0,0,0,1,1),					array(1,0,0,0,0,0,0,0,1),					array(0,0,0,0,0,0,0,0,0),					array(0,0,0,0,0,0,0,0,0),					array(0,0,0,0,0,0,0,0,0),					array(0,0,0,0,0,0,0,0,0),					array(0,0,0,0,0,0,0,0,0),				),				'O' => array(					array(0,0,0,1,1,1,0,0,0),					array(0,0,1,0,0,0,1,0,0),					array(0,1,0,0,0,0,0,1,0),					array(1,0,0,0,0,0,0,0,1),					array(1,0,0,0,0,0,0,0,1),					array(1,0,0,0,0,0,0,0,1),					array(1,0,0,0,0,0,0,0,1),					array(1,0,0,0,0,0,0,0,1),					array(0,1,0,0,0,0,0,1,0),					array(0,0,1,0,0,0,1,0,0),					array(0,0,0,1,1,1,0,0,0),					array(0,0,0,0,0,0,0,0,0),					array(0,0,0,0,0,0,0,0,0),					array(0,0,0,0,0,0,0,0,0),				),				'P' => array(					array(1,1,1,1,1,1,0,0,0),					array(1,0,0,0,0,0,1,0,0),					array(1,0,0,0,0,0,0,1,0),					array(1,0,0,0,0,0,0,1,0),					array(1,0,0,0,0,0,0,1,0),					array(1,0,0,0,0,0,0,1,0),					array(1,0,0,0,0,0,1,0,0),					array(1,1,1,1,1,1,0,0,0),					array(1,0,0,0,0,0,0,0,0),					array(1,0,0,0,0,0,0,0,0),					array(1,0,0,0,0,0,0,0,0),					array(1,0,0,0,0,0,0,0,0),					array(1,0,0,0,0,0,0,0,0),					array(0,0,0,0,0,0,0,0,0),				),				'Q' => array(					array(0,0,1,1,1,1,0,0,0),					array(0,1,0,0,0,0,1,0,0),					array(1,0,0,0,0,0,0,1,0),					array(1,0,0,0,0,0,0,1,0),					array(1,0,0,0,0,0,0,1,0),					array(1,0,0,0,0,0,0,1,0),					array(1,0,0,0,1,0,0,1,0),					array(1,0,0,0,0,1,0,1,0),					array(0,1,0,0,0,0,1,0,0),					array(0,0,1,1,1,1,0,1,0),					array(0,0,0,0,0,0,0,0,1),					array(0,0,0,0,0,0,0,0,0),					array(0,0,0,0,0,0,0,0,0),					array(0,0,0,0,0,0,0,0,0),				),				'R' => array(					array(1,1,1,1,1,1,0,0,0),					array(1,0,0,0,0,0,1,0,0),					array(1,0,0,0,0,0,0,1,0),					array(1,0,0,0,0,0,0,1,0),					array(1,0,0,0,0,0,0,1,0),					array(1,0,0,0,0,0,1,0,0),					array(1,1,1,1,1,1,0,0,0),					array(1,0,1,0,0,0,0,0,0),					array(1,0,0,1,0,0,0,0,0),					array(1,0,0,0,1,0,0,0,0),					array(1,0,0,0,0,1,0,0,0),					array(1,0,0,0,0,0,1,0,0),					array(0,0,0,0,0,0,0,0,0),					array(0,0,0,0,0,0,0,0,0),				),				'S' => array(					array(0,0,1,1,1,1,1,1,1),					array(0,1,0,0,0,0,0,0,0),					array(1,0,0,0,0,0,0,0,0),					array(1,0,0,0,0,0,0,0,0),					array(1,0,0,0,0,0,0,0,0),					array(0,1,0,0,0,0,0,0,0),					array(0,0,1,1,1,1,1,0,0),					array(0,0,0,0,0,0,0,1,0),					array(0,0,0,0,0,0,0,0,1),					array(0,0,0,0,0,0,0,0,1),					array(0,0,0,0,0,0,0,1,0),					array(1,1,1,1,1,1,1,0,0),					array(0,0,0,0,0,0,0,0,0),					array(0,0,0,0,0,0,0,0,0),				),				'T' => array(					array(1,1,1,1,1,1,1,1,1),					array(0,0,0,0,1,0,0,0,0),					array(0,0,0,0,1,0,0,0,0),					array(0,0,0,0,1,0,0,0,0),					array(0,0,0,0,1,0,0,0,0),					array(0,0,0,0,1,0,0,0,0),					array(0,0,0,0,1,0,0,0,0),					array(0,0,0,0,1,0,0,0,0),					array(0,0,0,0,1,0,0,0,0),					array(0,0,0,0,1,0,0,0,0),					array(0,0,0,0,1,0,0,0,0),					array(0,0,0,0,0,0,0,0,0),					array(0,0,0,0,0,0,0,0,0),					array(0,0,0,0,0,0,0,0,0),				),				'U' => array(					array(1,0,0,0,0,0,0,0,1),					array(1,0,0,0,0,0,0,0,1),					array(1,0,0,0,0,0,0,0,1),					array(1,0,0,0,0,0,0,0,1),					array(1,0,0,0,0,0,0,0,1),					array(1,0,0,0,0,0,0,0,1),					array(1,0,0,0,0,0,0,0,1),					array(1,0,0,0,0,0,0,0,1),					array(1,0,0,0,0,0,0,0,1),					array(0,1,0,0,0,0,0,1,0),					array(0,0,1,1,1,1,1,0,0),					array(0,0,0,0,0,0,0,0,0),					array(0,0,0,0,0,0,0,0,0),					array(0,0,0,0,0,0,0,0,0),				),				'V' => array(					array(1,0,0,0,0,0,0,0,1),					array(1,0,0,0,0,0,0,0,1),					array(1,0,0,0,0,0,0,0,1),					array(1,0,0,0,0,0,0,0,1),					array(1,0,0,0,0,0,0,0,1),					array(1,0,0,0,0,0,0,0,1),					array(1,0,0,0,0,0,0,0,1),					array(0,1,0,0,0,0,0,1,0),					array(0,0,1,0,0,0,1,0,0),					array(0,0,0,1,0,1,0,0,0),					array(0,0,0,0,1,0,0,0,0),					array(0,0,0,0,0,0,0,0,0),					array(0,0,0,0,0,0,0,0,0),					array(0,0,0,0,0,0,0,0,0),				),				'W' => array(					array(1,0,0,0,0,0,0,0,1),					array(1,0,0,0,0,0,0,0,1),					array(1,0,0,0,0,0,0,0,1),					array(1,0,0,0,0,0,0,0,1),					array(1,0,0,0,1,0,0,0,1),					array(1,0,0,1,0,1,0,0,1),					array(1,0,1,0,0,0,1,0,1),					array(1,1,0,0,0,0,0,1,1),					array(1,0,0,0,0,0,0,0,1),					array(0,0,0,0,0,0,0,0,0),					array(0,0,0,0,0,0,0,0,0),					array(0,0,0,0,0,0,0,0,0),					array(0,0,0,0,0,0,0,0,0),					array(0,0,0,0,0,0,0,0,0),				),				'X' => array(					array(1,0,0,0,0,0,0,0,1),					array(1,0,0,0,0,0,0,0,1),					array(0,1,0,0,0,0,0,1,0),					array(0,0,1,0,0,0,1,0,0),					array(0,0,0,1,0,1,0,0,0),					array(0,0,0,0,1,0,0,0,0),					array(0,0,0,1,0,1,0,0,0),					array(0,0,1,0,0,0,1,0,0),					array(0,1,0,0,0,0,0,1,0),					array(1,0,0,0,0,0,0,0,1),					array(1,0,0,0,0,0,0,0,1),					array(0,0,0,0,0,0,0,0,0),					array(0,0,0,0,0,0,0,0,0),					array(0,0,0,0,0,0,0,0,0),				),				'Y' => array(					array(1,0,0,0,0,0,0,0,1),					array(1,0,0,0,0,0,0,0,1),					array(1,0,0,0,0,0,0,0,1),					array(0,1,0,0,0,0,0,1,0),					array(0,0,1,0,0,0,1,0,0),					array(0,0,0,1,0,1,0,0,0),					array(0,0,0,0,1,0,0,0,0),					array(0,0,0,0,1,0,0,0,0),					array(0,0,0,0,1,0,0,0,0),					array(0,0,0,0,1,0,0,0,0),					array(0,0,0,0,1,0,0,0,0),					array(0,0,0,0,0,0,0,0,0),					array(0,0,0,0,0,0,0,0,0),					array(0,0,0,0,0,0,0,0,0),				),				'Z' => array(					array(1,1,1,1,1,1,1,1,1),					array(1,0,0,0,0,0,0,0,1),					array(0,0,0,0,0,0,0,1,0),					array(0,0,0,0,0,0,1,0,0),					array(0,0,0,0,0,1,0,0,0),					array(0,0,0,0,1,0,0,0,0),					array(0,0,0,1,0,0,0,0,0),					array(0,0,1,0,0,0,0,0,0),					array(0,1,0,0,0,0,0,0,0),					array(1,0,0,0,0,0,0,0,1),					array(1,1,1,1,1,1,1,1,1),					array(0,0,0,0,0,0,0,0,0),					array(0,0,0,0,0,0,0,0,0),					array(0,0,0,0,0,0,0,0,0),				),				'1' => array(					array(0,0,0,0,1,0,0,0,0),					array(0,0,0,1,1,0,0,0,0),					array(0,0,1,0,1,0,0,0,0),					array(0,1,0,0,1,0,0,0,0),					array(0,0,0,0,1,0,0,0,0),					array(0,0,0,0,1,0,0,0,0),					array(0,0,0,0,1,0,0,0,0),					array(0,0,0,0,1,0,0,0,0),					array(0,0,0,0,1,0,0,0,0),					array(0,0,0,0,1,0,0,0,0),					array(0,0,0,0,1,0,0,0,0),					array(0,1,1,1,1,1,1,1,0),					array(0,0,0,0,0,0,0,0,0),					array(0,0,0,0,0,0,0,0,0),				),				'2' => array(					array(0,0,0,1,1,1,0,0,0),					array(0,0,1,0,0,0,1,0,0),					array(0,1,0,0,0,0,0,1,0),					array(0,0,0,0,0,0,0,0,1),					array(0,0,0,0,0,0,0,0,1),					array(0,0,0,0,0,0,0,0,1),					array(0,0,0,0,0,0,0,1,0),					array(0,0,0,0,0,0,1,0,0),					array(0,0,0,0,0,1,0,0,0),					array(0,0,0,0,1,0,0,0,0),					array(0,0,0,1,0,0,0,0,0),					array(0,0,1,0,0,0,0,0,0),					array(0,1,1,1,1,1,1,1,1),					array(0,0,0,0,0,0,0,0,0),				),				'3' => array(					array(0,0,0,1,1,1,1,0,0),					array(0,0,1,0,0,0,0,1,0),					array(0,1,0,0,0,0,0,0,1),					array(0,0,0,0,0,0,0,0,1),					array(0,0,0,0,0,0,0,0,1),					array(0,0,0,0,0,0,0,1,0),					array(0,0,0,0,0,1,1,0,0),					array(0,0,0,0,0,0,0,1,0),					array(0,0,0,0,0,0,0,0,1),					array(0,0,0,0,0,0,0,0,1),					array(0,1,0,0,0,0,0,0,1),					array(0,0,1,0,0,0,0,1,0),					array(0,0,0,1,1,1,1,0,0),					array(0,0,0,0,0,0,0,0,0),				),				'4' => array(					array(0,0,0,0,0,0,0,1,0),					array(0,0,0,0,0,0,1,1,0),					array(0,0,0,0,0,1,0,1,0),					array(0,0,0,0,1,0,0,1,0),					array(0,0,0,1,0,0,0,1,0),					array(0,0,1,0,0,0,0,1,0),					array(0,1,1,1,1,1,1,1,1),					array(0,0,0,0,0,0,0,1,0),					array(0,0,0,0,0,0,0,1,0),					array(0,0,0,0,0,0,0,1,0),					array(0,0,0,0,0,0,0,1,0),					array(0,0,0,0,0,0,0,0,0),					array(0,0,0,0,0,0,0,0,0),					array(0,0,0,0,0,0,0,0,0),				),				'5' => array(					array(1,1,1,1,1,1,1,1,1),					array(1,0,0,0,0,0,0,0,0),					array(1,0,0,0,0,0,0,0,0),					array(1,0,0,0,0,0,0,0,0),					array(0,1,0,0,0,0,0,0,0),					array(0,0,1,1,1,1,1,0,0),					array(0,0,0,0,0,0,0,1,0),					array(0,0,0,0,0,0,0,0,1),					array(1,0,0,0,0,0,0,0,1),					array(0,1,0,0,0,0,0,1,0),					array(0,0,1,1,1,1,1,0,0),					array(0,0,0,0,0,0,0,0,0),					array(0,0,0,0,0,0,0,0,0),					array(0,0,0,0,0,0,0,0,0),				),				'6' => array(					array(0,0,1,1,1,1,1,0,0),					array(0,1,0,0,0,0,0,1,0),					array(1,0,0,0,0,0,0,0,1),					array(1,0,0,0,0,0,0,0,0),					array(1,0,0,0,0,0,0,0,0),					array(1,0,0,1,1,1,1,0,0),					array(1,0,1,0,0,0,0,1,0),					array(1,1,0,0,0,0,0,0,1),					array(1,0,0,0,0,0,0,0,1),					array(1,0,0,0,0,0,0,0,1),					array(0,1,0,0,0,0,0,1,0),					array(0,0,1,1,1,1,1,0,0),					array(0,0,0,0,0,0,0,0,0),					array(0,0,0,0,0,0,0,0,0),					array(0,0,0,0,0,0,0,0,0),				),				'7' => array(					array(1,1,1,1,1,1,1,1,1),					array(1,0,0,0,0,0,0,0,1),					array(0,0,0,0,0,0,0,1,0),					array(0,0,0,0,0,0,1,0,0),					array(0,0,0,0,0,1,0,0,0),					array(0,0,0,0,1,0,0,0,0),					array(0,0,0,0,1,0,0,0,0),					array(0,0,0,0,1,0,0,0,0),					array(0,0,0,0,1,0,0,0,0),					array(0,0,0,0,1,0,0,0,0),					array(0,0,0,0,1,0,0,0,0),					array(0,0,0,0,0,0,0,0,0),					array(0,0,0,0,0,0,0,0,0),					array(0,0,0,0,0,0,0,0,0),				),				'8' => array(					array(0,0,1,1,1,1,1,0,0),					array(0,1,0,0,0,0,0,1,0),					array(1,0,0,0,0,0,0,0,1),					array(1,0,0,0,0,0,0,0,1),					array(1,0,0,0,0,0,0,0,1),					array(0,1,0,0,0,0,0,1,0),					array(0,0,1,1,1,1,1,0,0),					array(0,1,0,0,0,0,0,1,0),					array(1,0,0,0,0,0,0,0,1),					array(1,0,0,0,0,0,0,0,1),					array(1,0,0,0,0,0,0,0,1),					array(0,1,0,0,0,0,0,1,0),					array(0,0,1,1,1,1,1,0,0),					array(0,0,0,0,0,0,0,0,0),				),				'9' => array(					array(0,0,0,1,1,1,1,0,0),					array(0,0,1,0,0,0,0,1,0),					array(0,1,0,0,0,0,0,0,1),					array(0,1,0,0,0,0,0,0,1),					array(0,1,0,0,0,0,0,0,1),					array(0,1,0,0,0,0,0,1,1),					array(0,0,1,1,1,1,1,0,1),					array(0,0,0,0,0,0,0,0,1),					array(0,0,0,0,0,0,0,0,1),					array(0,1,0,0,0,0,0,0,1),					array(0,0,1,0,0,0,0,1,0),					array(0,0,0,1,1,1,1,0,0),					array(0,0,0,0,0,0,0,0,0),					array(0,0,0,0,0,0,0,0,0),				),			)		);	}}?>
<?php//// Security message://// This script is potentially dangerous.// Remove or comment the next line (die(".... ) to enable this script.// Do NOT FORGET to either remove this script or disable it after you have used it.//die("Please read the first lines of this script for instructions on how to enable it");//// Do not change anything below this line.//// Just a handy script to completely wipe out the contents of a // database.. Use with caution :)if(!isset($submit)){	?>	<FORM ACTION="<?php echo $PHP_SELF?>" METHOD="post" >	<table>	<tr>		<td>DB host:</td>		<td><INPUT TYPE="text" name="dbhost" value="localhost"></td>	</tr><tr>		<td>DB name:</td>		<td><INPUT TYPE="text" name="dbname" value="phpBB"></td>	</tr><tr>		<td>DB username:</td>		<td><INPUT TYPE="text" name="dbuser" value="root"></td>	</tr><tr>		<td>DB password:</td>		<td><INPUT TYPE="password" name="dbpass"></td>	</tr></table>	<INPUT TYPE="submit" name="submit" value="Submit">	</FORM>	<?php}else{	mysql_connect($dbhost, $dbuser, $dbpass) || die(mysql_error());	mysql_select_db($dbname);	$result = mysql_query("SHOW TABLES");	while($row = mysql_fetch_row($result)){		$table = $row[0];		print "Going to drop $table...";		mysql_query("DROP TABLE $table") || die();		print "Done.<br>\n";		flush();	}}?>
<?php/**** @package ucp* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @ignore*/if (!defined('IN_PHPBB')){	exit;}/*** ucp_resend* Resending activation emails* @package ucp*/class ucp_resend{	var $u_action;	function main($id, $mode)	{		global $config, $phpbb_root_path, $phpEx;		global $db, $user, $auth, $template;		$username	= request_var('username', '', true);		$email		= strtolower(request_var('email', ''));		$submit		= (isset($_POST['submit'])) ? true : false;		add_form_key('ucp_resend');		if ($submit)		{			if (!check_form_key('ucp_resend'))			{				trigger_error('FORM_INVALID');			}			$sql = 'SELECT user_id, group_id, username, user_email, user_type, user_lang, user_actkey, user_inactive_reason				FROM ' . USERS_TABLE . "				WHERE user_email_hash = '" . $db->sql_escape(phpbb_email_hash($email)) . "'					AND username_clean = '" . $db->sql_escape(utf8_clean_string($username)) . "'";			$result = $db->sql_query($sql);			$user_row = $db->sql_fetchrow($result);			$db->sql_freeresult($result);			if (!$user_row)			{				trigger_error('NO_EMAIL_USER');			}			if ($user_row['user_type'] == USER_IGNORE)			{				trigger_error('NO_USER');			}			if (!$user_row['user_actkey'] && $user_row['user_type'] != USER_INACTIVE)			{				trigger_error('ACCOUNT_ALREADY_ACTIVATED');			}			if (!$user_row['user_actkey'] || ($user_row['user_type'] == USER_INACTIVE && $user_row['user_inactive_reason'] == INACTIVE_MANUAL))			{				trigger_error('ACCOUNT_DEACTIVATED');			}			// Determine coppa status on group (REGISTERED(_COPPA))			$sql = 'SELECT group_name, group_type				FROM ' . GROUPS_TABLE . '				WHERE group_id = ' . $user_row['group_id'];			$result = $db->sql_query($sql);			$row = $db->sql_fetchrow($result);			$db->sql_freeresult($result);			if (!$row)			{				trigger_error('NO_GROUP');			}			$coppa = ($row['group_name'] == 'REGISTERED_COPPA' && $row['group_type'] == GROUP_SPECIAL) ? true : false;			include_once($phpbb_root_path . 'includes/functions_messenger.' . $phpEx);			$messenger = new messenger(false);			if ($config['require_activation'] == USER_ACTIVATION_SELF || $coppa)			{				$messenger->template(($coppa) ? 'coppa_resend_inactive' : 'user_resend_inactive', $user_row['user_lang']);				$messenger->to($user_row['user_email'], $user_row['username']);				$messenger->anti_abuse_headers($config, $user);				$messenger->assign_vars(array(					'WELCOME_MSG'	=> htmlspecialchars_decode(sprintf($user->lang['WELCOME_SUBJECT'], $config['sitename'])),					'USERNAME'		=> htmlspecialchars_decode($user_row['username']),					'U_ACTIVATE'	=> generate_board_url() . "/ucp.$phpEx?mode=activate&u={$user_row['user_id']}&k={$user_row['user_actkey']}")				);				if ($coppa)				{					$messenger->assign_vars(array(						'FAX_INFO'		=> $config['coppa_fax'],						'MAIL_INFO'		=> $config['coppa_mail'],						'EMAIL_ADDRESS'	=> $user_row['user_email'])					);				}				$messenger->send(NOTIFY_EMAIL);			}			if ($config['require_activation'] == USER_ACTIVATION_ADMIN)			{				// Grab an array of user_id's with a_user permissions ... these users can activate a user				$admin_ary = $auth->acl_get_list(false, 'a_user', false);				$sql = 'SELECT user_id, username, user_email, user_lang, user_jabber, user_notify_type					FROM ' . USERS_TABLE . '					WHERE ' . $db->sql_in_set('user_id', $admin_ary[0]['a_user']);				$result = $db->sql_query($sql);				while ($row = $db->sql_fetchrow($result))				{					$messenger->template('admin_activate', $row['user_lang']);					$messenger->to($row['user_email'], $row['username']);					$messenger->im($row['user_jabber'], $row['username']);					$messenger->anti_abuse_headers($config, $user);					$messenger->assign_vars(array(						'USERNAME'			=> htmlspecialchars_decode($user_row['username']),						'U_USER_DETAILS'	=> generate_board_url() . "/memberlist.$phpEx?mode=viewprofile&u={$user_row['user_id']}",						'U_ACTIVATE'		=> generate_board_url() . "/ucp.$phpEx?mode=activate&u={$user_row['user_id']}&k={$user_row['user_actkey']}")					);					$messenger->send($row['user_notify_type']);				}				$db->sql_freeresult($result);			}			meta_refresh(3, append_sid("{$phpbb_root_path}index.$phpEx"));			$message = ($config['require_activation'] == USER_ACTIVATION_ADMIN) ? $user->lang['ACTIVATION_EMAIL_SENT_ADMIN'] : $user->lang['ACTIVATION_EMAIL_SENT'];			$message .= '<br /><br />' . sprintf($user->lang['RETURN_INDEX'], '<a href="' . append_sid("{$phpbb_root_path}index.$phpEx") . '">', '</a>');			trigger_error($message);		}		$template->assign_vars(array(			'USERNAME'			=> $username,			'EMAIL'				=> $email,			'S_PROFILE_ACTION'	=> append_sid($phpbb_root_path . 'ucp.' . $phpEx, 'mode=resend_act'))		);		$this->tpl_name = 'ucp_resend';		$this->page_title = 'UCP_RESEND';	}}?>
<?php/**** @package mcp* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @package module_install*/class mcp_main_info{	function module()	{		return array(			'filename'	=> 'mcp_main',			'title'		=> 'MCP_MAIN',			'version'	=> '1.0.0',			'modes'		=> array(				'front'			=> array('title' => 'MCP_MAIN_FRONT', 'auth' => '', 'cat' => array('MCP_MAIN')),				'forum_view'	=> array('title' => 'MCP_MAIN_FORUM_VIEW', 'auth' => 'acl_m_,$id', 'cat' => array('MCP_MAIN')),				'topic_view'	=> array('title' => 'MCP_MAIN_TOPIC_VIEW', 'auth' => 'acl_m_,$id', 'cat' => array('MCP_MAIN')),				'post_details'	=> array('title' => 'MCP_MAIN_POST_DETAILS', 'auth' => 'acl_m_,$id || (!$id && aclf_m_)', 'cat' => array('MCP_MAIN')),			),		);	}	function install()	{	}	function uninstall()	{	}}?>
<?php return array(''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'0',''=>'1',''=>'2',''=>'3',''=>'4',''=>'5',''=>'6',''=>'7',''=>'8',''=>'9',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'1',''=>'2',''=>'3',''=>'4',''=>'5',''=>'6',''=>'7',''=>'8',''=>'9',''=>'10',''=>'20',''=>'30',''=>'40',''=>'50',''=>'60',''=>'70',''=>'80',''=>'90',''=>'100',''=>'10000',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'17',''=>'18',''=>'19',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'0',''=>'1',''=>'2',''=>'3',''=>'4',''=>'5',''=>'6',''=>'7',''=>'8',''=>'9',''=>'0',''=>'1',''=>'2',''=>'3',''=>'4',''=>'5',''=>'6',''=>'7',''=>'8',''=>'9');
<?php/**** @package install* @version $Id$* @copyright (c) 2006 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @ignore*/if (!defined('IN_PHPBB')){	exit;}/*** Default avatar width/height* @ignore*/define('DEFAULT_AVATAR_X', 80);define('DEFAULT_AVATAR_Y', 80);// Global functions - all functions can be used by convertors// SIMPLE FUNCTIONS/*** Return the preceding value*/function dec($var){	return --$var;}/*** Return the next value*/function inc($var){	return ++$var;}/*** Return whether the value is positive*/function is_positive($n){	return ($n > 0) ? 1 : 0;}/*** Boolean inverse of the value*/function not($var){	return ($var) ? 0 : 1;}/*** Convert a textual value to it's equivalent boolean value** @param string $str String to convert (converts yes, on, y, 1 and true to boolean true)* @return boolean The equivalent value*/function str_to_bool($str){	$str = strtolower($str);	return ($str == 'yes' || $str == 'on' || $str == 'y' || $str == 'true' || $str == '1') ? true : false;}/*** Function to mimic php's empty() function (it is the same)*/function is_empty($mixed){	return empty($mixed);}/*** Convert the name of a user's primary group to the appropriate equivalent phpBB group id** @param string $status The name of the group* @return int The group_id corresponding to the equivalent group*/function str_to_primary_group($status){	switch (ucfirst(strtolower($status)))	{		case 'Administrator':			return get_group_id('administrators');		break;		case 'Super moderator':		case 'Global moderator':		case 'Moderator':			return get_group_id('global_moderators');		break;		case 'Guest':		case 'Anonymous':			return get_group_id('guests');		break;		default:			return get_group_id('registered');		break;	}}/*** Convert a boolean into the appropriate phpBB constant indicating whether the item is locked*/function is_item_locked($bool){	return ($bool) ? ITEM_LOCKED : ITEM_UNLOCKED;}/*** Convert a value from days to seconds*/function days_to_seconds($days){	return ($days * 86400);}/*** Determine whether a user is anonymous and return the appropriate new user_id*/function is_user_anonymous($user_id){	return ($user_id > ANONYMOUS) ? $user_id : ANONYMOUS;}/*** Generate a key value based on existing values** @param int $pad Amount to add to the maximum value* @return int Key value*/function auto_id($pad = 0){	global $auto_id, $convert_row;	if (!empty($convert_row['max_id']))	{		return $convert_row['max_id'] + $pad;	}	return $auto_id + $pad;}/*** Convert a boolean into the appropriate phpBB constant indicating whether the user is active*/function set_user_type($user_active){	return ($user_active) ? USER_NORMAL : USER_INACTIVE;}/*** Convert a value from minutes to hours*/function minutes_to_hours($minutes){	return ($minutes / 3600);}/*** Return the group_id for a given group name*/function get_group_id($group_name){	global $db, $group_mapping;	if (empty($group_mapping))	{		$sql = 'SELECT group_name, group_id			FROM ' . GROUPS_TABLE;		$result = $db->sql_query($sql);		$group_mapping = array();		while ($row = $db->sql_fetchrow($result))		{			$group_mapping[strtoupper($row['group_name'])] = (int) $row['group_id'];		}		$db->sql_freeresult($result);	}	if (!sizeof($group_mapping))	{		add_default_groups();		return get_group_id($group_name);	}	if (isset($group_mapping[strtoupper($group_name)]))	{		return $group_mapping[strtoupper($group_name)];	}	return $group_mapping['REGISTERED'];}/*** Generate the email hash stored in the users table** Note: Deprecated, calls should directly go to phpbb_email_hash()*/function gen_email_hash($email){	return phpbb_email_hash($email);}/*** Convert a boolean into the appropriate phpBB constant indicating whether the topic is locked*/function is_topic_locked($bool){	return (!empty($bool)) ? ITEM_LOCKED : ITEM_UNLOCKED;}/*** Generate a bbcode_uid value*/function make_uid($timestamp){	static $last_timestamp, $last_uid;	if (empty($last_timestamp) || $timestamp != $last_timestamp)	{		$last_uid = substr(base_convert(unique_id(), 16, 36), 0, BBCODE_UID_LEN);	}	$last_timestamp = $timestamp;	return $last_uid;}/*** Validate a website address*/function validate_website($url){	if ($url === 'http://')	{		return '';	}	else if (!preg_match('#^[a-z0-9]+://#i', $url) && strlen($url) > 0)	{		return 'http://' . $url;	}	return $url;}/*** Convert nulls to zeros for fields which allowed a NULL value in the source but not the destination*/function null_to_zero($value){	return ($value === NULL) ? 0 : $value;}/*** Convert nulls to empty strings for fields which allowed a NULL value in the source but not the destination*/function null_to_str($value){	return ($value === NULL) ? '' : $value;}// EXTENDED FUNCTIONS/*** Get old config value*/function get_config_value($config_name){	static $convert_config;	if (!isset($convert_config))	{		$convert_config = get_config();	}	if (!isset($convert_config[$config_name]))	{		return false;	}	return (empty($convert_config[$config_name])) ? '' : $convert_config[$config_name];}/*** Convert an IP address from the hexadecimal notation to normal dotted-quad notation*/function decode_ip($int_ip){	if (!$int_ip)	{		return $int_ip;	}	$hexipbang = explode('.', chunk_split($int_ip, 2, '.'));	// Any mod changing the way ips are stored? Then we are not able to convert and enter the ip "as is" to not "destroy" anything...	if (sizeof($hexipbang) < 4)	{		return $int_ip;	}	return hexdec($hexipbang[0]) . '.' . hexdec($hexipbang[1]) . '.' . hexdec($hexipbang[2]) . '.' . hexdec($hexipbang[3]);}/*** Reverse the encoding of wild-carded bans*/function decode_ban_ip($int_ip){	return str_replace('255', '*', decode_ip($int_ip));}/*** Determine the MIME-type of a specified filename* This does not actually inspect the file, but simply uses the file extension*/function mimetype($filename){	if (!preg_match('/\.([a-z0-9]+)$/i', $filename, $m))	{		return 'application/octet-stream';	}	switch (strtolower($m[1]))	{		case 'zip':		return 'application/zip';		case 'jpeg':	return 'image/jpeg';		case 'jpg':		return 'image/jpeg';		case 'jpe':		return 'image/jpeg';		case 'png':		return 'image/png';		case 'gif':		return 'image/gif';		case 'htm':		case 'html':	return 'text/html';		case 'tif':		return 'image/tiff';		case 'tiff':	return 'image/tiff';		case 'ras':		return 'image/x-cmu-raster';		case 'pnm':		return 'image/x-portable-anymap';		case 'pbm':		return 'image/x-portable-bitmap';		case 'pgm':		return 'image/x-portable-graymap';		case 'ppm':		return 'image/x-portable-pixmap';		case 'rgb':		return 'image/x-rgb';		case 'xbm':		return 'image/x-xbitmap';		case 'xpm':		return 'image/x-xpixmap';		case 'xwd':		return 'image/x-xwindowdump';		case 'z':		return 'application/x-compress';		case 'gtar':	return 'application/x-gtar';		case 'tgz':		return 'application/x-gtar';		case 'gz':		return 'application/x-gzip';		case 'tar':		return 'application/x-tar';		case 'xls':		return 'application/excel';		case 'pdf':		return 'application/pdf';		case 'ppt':		return 'application/powerpoint';		case 'rm':		return 'application/vnd.rn-realmedia';		case 'wma':		return 'audio/x-ms-wma';		case 'swf':		return 'application/x-shockwave-flash';		case 'ief':		return 'image/ief';		case 'doc':		case 'dot':		case 'wrd':		return 'application/msword';		case 'ai':		case 'eps':		case 'ps':		return 'application/postscript';		case 'asc':		case 'txt':		case 'c':		case 'cc':		case 'h':		case 'hh':		case 'cpp':		case 'hpp':		case 'php':		case 'php3':	return 'text/plain';		default: 		return 'application/octet-stream';	}}/*** Obtain the dimensions of all remotely hosted avatars* This should only be called from execute_last* There can be significant network overhead if there are a large number of remote avatars* @todo Look at the option of allowing the user to decide whether this is called or to force the dimensions*/function remote_avatar_dims(){	global $db;	$sql = 'SELECT user_id, user_avatar		FROM ' . USERS_TABLE . '		WHERE user_avatar_type = ' . AVATAR_REMOTE;	$result = $db->sql_query($sql);	$remote_avatars = array();	while ($row = $db->sql_fetchrow($result))	{		$remote_avatars[(int) $row['user_id']] = $row['user_avatar'];	}	$db->sql_freeresult($result);	foreach ($remote_avatars as $user_id => $avatar)	{		$width = (int) get_remote_avatar_dim($avatar, 0);		$height = (int) get_remote_avatar_dim($avatar, 1);		$sql = 'UPDATE ' . USERS_TABLE . '			SET user_avatar_width = ' . (int) $width . ', user_avatar_height = ' . (int) $height . '			WHERE user_id = ' . $user_id;		$db->sql_query($sql);	}}function import_avatar_gallery($gallery_name = '', $subdirs_as_galleries = false){	global $config, $convert, $phpbb_root_path, $user;	$relative_path = empty($convert->convertor['source_path_absolute']);	if (empty($convert->convertor['avatar_gallery_path']))	{		$convert->p_master->error(sprintf($user->lang['CONV_ERROR_NO_GALLERY_PATH'], 'import_avatar_gallery()'), __LINE__, __FILE__);	}	$src_path = relative_base(path($convert->convertor['avatar_gallery_path'], $relative_path), $relative_path);	if (is_dir($src_path))	{		// Do not die on failure... safe mode restrictions may be in effect.		copy_dir($convert->convertor['avatar_gallery_path'], path($config['avatar_gallery_path']) . $gallery_name, !$subdirs_as_galleries, false, false, $relative_path);		// only doing 1 level deep. (ibf 1.x)		// notes: ibf has 2 tiers: directly in the avatar directory for base gallery (handled in the above statement), plus subdirs(handled below).		// recursive subdirs ignored. -- i don't know if other forums support recursive galleries. if they do, this following code could be upgraded to be recursive.		if ($subdirs_as_galleries)		{			$dirlist = array();			if ($handle = @opendir($src_path))			{				while ($entry = readdir($handle))				{					if ($entry[0] == '.' || $entry == 'CVS' || $entry == 'index.htm')					{						continue;					}					if (is_dir($src_path . $entry))					{						$dirlist[] = $entry;					}				}				closedir($handle);			}			else if ($dir = @dir($src_path))			{				while ($entry = $dir->read())				{					if ($entry[0] == '.' || $entry == 'CVS' || $entry == 'index.htm')					{						continue;					}					if (is_dir($src_path . $entry))					{						$dirlist[] = $entry;					}				}				$dir->close();			}			for ($i = 0; $i < sizeof($dirlist); ++$i)			{				$dir = $dirlist[$i];				// Do not die on failure... safe mode restrictions may be in effect.				copy_dir(path($convert->convertor['avatar_gallery_path'], $relative_path) . $dir, path($config['avatar_gallery_path']) . $dir, true, false, false, $relative_path);			}		}	}}function import_attachment_files($category_name = ''){	global $config, $convert, $phpbb_root_path, $db, $user;	$sql = 'SELECT config_value AS upload_path		FROM ' . CONFIG_TABLE . "		WHERE config_name = 'upload_path'";	$result = $db->sql_query($sql);	$config['upload_path'] = $db->sql_fetchfield('upload_path');	$db->sql_freeresult($result);	$relative_path = empty($convert->convertor['source_path_absolute']);	if (empty($convert->convertor['upload_path']))	{		$convert->p_master->error(sprintf($user->lang['CONV_ERROR_NO_UPLOAD_DIR'], 'import_attachment_files()'), __LINE__, __FILE__);	}	if (is_dir(relative_base(path($convert->convertor['upload_path'], $relative_path), $relative_path)))	{		copy_dir($convert->convertor['upload_path'], path($config['upload_path']) . $category_name, true, false, true, $relative_path);	}}function attachment_forum_perms($forum_id){	if (!is_array($forum_id))	{		$forum_id = array($forum_id);	}	return serialize($forum_id);}// base64todec function// -> from php manual?function base64_unpack($string){	$chars = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ+-';	$base = strlen($chars);	$length = strlen($string);	$number = 0;	for ($i = 1; $i <= $length; $i++)	{		$pos = $length - $i;		$operand = strpos($chars, substr($string, $pos, 1));		$exponent = pow($base, $i-1);		$dec_value = $operand * $exponent;		$number += $dec_value;	}	return $number;}function _import_check($config_var, $source, $use_target){	global $convert, $config;	$result = array(		'orig_source'	=> $source,		'copied'		=> false,		'relative_path'	=> (empty($convert->convertor['source_path_absolute'])) ? true : false,	);	// copy file will prepend $phpBB_root_path	$target = $config[$config_var] . '/' . utf8_basename(($use_target === false) ? $source : $use_target);	if (!empty($convert->convertor[$config_var]) && strpos($source, $convert->convertor[$config_var]) !== 0)	{		$source = $convert->convertor[$config_var] . $source;	}	$result['source'] = $source;	if (file_exists(relative_base($source, $result['relative_path'], __LINE__, __FILE__)))	{		$result['copied'] = copy_file($source, $target, false, false, $result['relative_path']);	}	if ($result['copied'])	{		$result['target'] = utf8_basename($target);	}	else	{		$result['target'] = ($use_target !== false) ? $result['orig_source'] : utf8_basename($target);	}	return $result;}function import_attachment($source, $use_target = false){	if (empty($source))	{		return '';	}	global $convert, $phpbb_root_path, $config, $user;	if (empty($convert->convertor['upload_path']))	{		$convert->p_master->error(sprintf($user->lang['CONV_ERROR_NO_UPLOAD_DIR'], 'import_attachment()'), __LINE__, __FILE__);	}	$result = _import_check('upload_path', $source, $use_target);	if ($result['copied'])	{		// Thumbnails?		if (is_array($convert->convertor['thumbnails']))		{			$thumb_dir = $convert->convertor['thumbnails'][0];			$thumb_prefix = $convert->convertor['thumbnails'][1];			$thumb_source = $thumb_dir . $thumb_prefix . utf8_basename($result['source']);			if (strpos($thumb_source, $convert->convertor['upload_path']) !== 0)			{				$thumb_source = $convert->convertor['upload_path'] . $thumb_source;			}			$thumb_target = $config['upload_path'] . '/thumb_' . $result['target'];			if (file_exists(relative_base($thumb_source, $result['relative_path'], __LINE__, __FILE__)))			{				copy_file($thumb_source, $thumb_target, false, false, $result['relative_path']);			}		}	}	return $result['target'];}function import_rank($source, $use_target = false){	if (empty($source))	{		return '';	}	global $convert, $phpbb_root_path, $config, $user;	if (!isset($convert->convertor['ranks_path']))	{		$convert->p_master->error(sprintf($user->lang['CONV_ERROR_NO_RANKS_PATH'], 'import_rank()'), __LINE__, __FILE__);	}	$result = _import_check('ranks_path', $source, $use_target);	return $result['target'];}function import_smiley($source, $use_target = false){	if (empty($source))	{		return '';	}	global $convert, $phpbb_root_path, $config, $user;	if (!isset($convert->convertor['smilies_path']))	{		$convert->p_master->error(sprintf($user->lang['CONV_ERROR_NO_SMILIES_PATH'], 'import_smiley()'), __LINE__, __FILE__);	}	$result = _import_check('smilies_path', $source, $use_target);	return $result['target'];}/**/function import_avatar($source, $use_target = false, $user_id = false){	if (empty($source) || preg_match('#^https?:#i', $source) || preg_match('#blank\.(gif|png)$#i', $source))	{		return;	}	global $convert, $phpbb_root_path, $config, $user;	if (!isset($convert->convertor['avatar_path']))	{		$convert->p_master->error(sprintf($user->lang['CONV_ERROR_NO_AVATAR_PATH'], 'import_avatar()'), __LINE__, __FILE__);	}	if ($use_target === false && $user_id !== false)	{		$use_target = $config['avatar_salt'] . '_' . $user_id . '.' . substr(strrchr($source, '.'), 1);	}	$result = _import_check('avatar_path', $source, $use_target);	return ((!empty($user_id)) ? $user_id : $use_target) . '.' . substr(strrchr($source, '.'), 1);}/*** @todo all image dimension functions below (there are a *lot*) should get revisited and converted to one or two functions (no more needed, really).*//*** Calculate the size of the specified image* Called from the following functions for calculating the size of specific image types*/function get_image_dim($source){	if (empty($source))	{		return array(0, 0);	}	global $convert;	$relative_path = empty($convert->convertor['source_path_absolute']);	if (file_exists(relative_base($source, $relative_path)))	{		$image = relative_base($source, $relative_path);		return @getimagesize($image);	}	return false;}/*** Obtain the width of the specified smilie*/function get_smiley_width($src){	return get_smiley_dim($src, 0);}/*** Obtain the height of the specified smilie*/function get_smiley_height($src){	return get_smiley_dim($src, 1);}/*** Obtain the size of the specified smilie (using the cache if possible) and cache the value*/function get_smiley_dim($source, $axis){	if (empty($source))	{		return 15;	}	static $smiley_cache = array();	if (isset($smiley_cache[$source]))	{		return $smiley_cache[$source][$axis];	}	global $convert, $phpbb_root_path, $config, $user;	$orig_source = $source;	if (!isset($convert->convertor['smilies_path']))	{		$convert->p_master->error(sprintf($user->lang['CONV_ERROR_NO_SMILIES_PATH'], 'get_smiley_dim()'), __LINE__, __FILE__);	}	if (!empty($convert->convertor['smilies_path']) && strpos($source, $convert->convertor['smilies_path']) !== 0)	{		$source = $convert->convertor['smilies_path'] . $source;	}	$smiley_cache[$orig_source] = get_image_dim($source);	if (empty($smiley_cache[$orig_source]) || empty($smiley_cache[$orig_source][0]) || empty($smiley_cache[$orig_source][1]))	{		$smiley_cache[$orig_source] = array(15, 15);		return 15;	}	return $smiley_cache[$orig_source][$axis];}/*** Obtain the width of the specified avatar*/function get_avatar_width($src, $func = false, $arg1 = false, $arg2 = false){	return get_avatar_dim($src, 0, $func, $arg1, $arg2);}/*** Obtain the height of the specified avatar*/function get_avatar_height($src, $func = false, $arg1 = false, $arg2 = false){	return get_avatar_dim($src, 1, $func, $arg1, $arg2);}/***/function get_avatar_dim($src, $axis, $func = false, $arg1 = false, $arg2 = false){	$avatar_type = AVATAR_UPLOAD;	if ($func)	{		if ($arg1 || $arg2)		{			$ary = array($arg1);			if ($arg2)			{				$ary[] = $arg2;			}			$avatar_type = call_user_func_array($func, $ary);		}		else		{			$avatar_type = call_user_func($func);		}	}	switch ($avatar_type)	{		case AVATAR_UPLOAD:			return get_upload_avatar_dim($src, $axis);		break;		case AVATAR_GALLERY:			return get_gallery_avatar_dim($src, $axis);		break;		case AVATAR_REMOTE:			 // see notes on this functions usage and (hopefully) model $func to avoid this accordingly			return get_remote_avatar_dim($src, $axis);		break;		default:			$default_x = (defined('DEFAULT_AVATAR_X_CUSTOM')) ? DEFAULT_AVATAR_X_CUSTOM : DEFAULT_AVATAR_X;			$default_y = (defined('DEFAULT_AVATAR_Y_CUSTOM')) ? DEFAULT_AVATAR_Y_CUSTOM : DEFAULT_AVATAR_Y;			return $axis ? $default_y : $default_x;		break;	}}/*** Obtain the size of the specified uploaded avatar (using the cache if possible) and cache the value*/function get_upload_avatar_dim($source, $axis){	static $cachedims = false;	static $cachekey = false;	if (empty($source))	{		return 0;	}	if ($cachekey == $source)	{		return $cachedims[$axis];	}	$orig_source = $source;	if (substr($source, 0, 7) == 'upload:')	{		$source = substr($source, 7);	}	global $convert, $phpbb_root_path, $config, $user;	if (!isset($convert->convertor['avatar_path']))	{		$convert->p_master->error(sprintf($user->lang['CONV_ERROR_NO_AVATAR_PATH'], 'get_upload_avatar_dim()'), __LINE__, __FILE__);	}	if (!empty($convert->convertor['avatar_path']) && strpos($source, $convert->convertor['avatar_path']) !== 0)	{		$source = path($convert->convertor['avatar_path'], empty($convert->convertor['source_path_absolute'])) . $source;	}	$cachedims = get_image_dim($source);	if (empty($cachedims) || empty($cachedims[0]) || empty($cachedims[1]))	{		$default_x = (defined('DEFAULT_AVATAR_X_CUSTOM')) ? DEFAULT_AVATAR_X_CUSTOM : DEFAULT_AVATAR_X;		$default_y = (defined('DEFAULT_AVATAR_Y_CUSTOM')) ? DEFAULT_AVATAR_Y_CUSTOM : DEFAULT_AVATAR_Y;		$cachedims = array($default_x, $default_y);	}	return $cachedims[$axis];}/*** Obtain the size of the specified gallery avatar (using the cache if possible) and cache the value*/function get_gallery_avatar_dim($source, $axis){	if (empty($source))	{		return 0;	}	static $avatar_cache = array();	if (isset($avatar_cache[$source]))	{		return $avatar_cache[$source][$axis];	}	global $convert, $phpbb_root_path, $config, $user;	$orig_source = $source;	if (!isset($convert->convertor['avatar_gallery_path']))	{		$convert->p_master->error(sprintf($user->lang['CONV_ERROR_NO_GALLERY_PATH'], 'get_gallery_avatar_dim()'), __LINE__, __FILE__);	}	if (!empty($convert->convertor['avatar_gallery_path']) && strpos($source, $convert->convertor['avatar_gallery_path']) !== 0)	{		$source = path($convert->convertor['avatar_gallery_path'], empty($convert->convertor['source_path_absolute'])) . $source;	}	$avatar_cache[$orig_source] = get_image_dim($source);	if (empty($avatar_cache[$orig_source]) || empty($avatar_cache[$orig_source][0]) || empty($avatar_cache[$orig_source][1]))	{		$default_x = (defined('DEFAULT_AVATAR_X_CUSTOM')) ? DEFAULT_AVATAR_X_CUSTOM : DEFAULT_AVATAR_X;		$default_y = (defined('DEFAULT_AVATAR_Y_CUSTOM')) ? DEFAULT_AVATAR_Y_CUSTOM : DEFAULT_AVATAR_Y;		$avatar_cache[$orig_source] = array($default_x, $default_y);	}	return $avatar_cache[$orig_source][$axis];}/*** Obtain the size of the specified remote avatar (using the cache if possible) and cache the value* Whilst it's unlikely that remote avatars will be duplicated, it is possible so caching seems the best option* This should only be called from a post processing step due to the possibility of network timeouts*/function get_remote_avatar_dim($src, $axis){	if (empty($src))	{		return 0;	}	static $remote_avatar_cache = array();	// an ugly hack: we assume that the dimensions of each remote avatar are accessed exactly twice (x and y)	if (isset($remote_avatar_cache[$src]))	{		$retval = $remote_avatar_cache[$src][$axis];		unset($remote_avatar_cache);		return $retval;	}	$url_info = @parse_url($src);	if (empty($url_info['host']))	{		return 0;	}	$host = $url_info['host'];	$port = (isset($url_info['port'])) ? $url_info['port'] : 0;	$protocol = (isset($url_info['scheme'])) ? $url_info['scheme'] : 'http';	if (empty($port))	{		switch(strtolower($protocol))		{			case 'ftp':				$port = 21;				break;			case 'https':				$port = 443;				break;			default:				$port = 80;		}	}	$timeout = @ini_get('default_socket_timeout');	@ini_set('default_socket_timeout', 2);	// We're just trying to reach the server to avoid timeouts	$fp = @fsockopen($host, $port, $errno, $errstr, 1);	if ($fp)	{		$remote_avatar_cache[$src] = @getimagesize($src);		fclose($fp);	}	$default_x 	= (defined('DEFAULT_AVATAR_X_CUSTOM')) ? DEFAULT_AVATAR_X_CUSTOM : DEFAULT_AVATAR_X;	$default_y 	= (defined('DEFAULT_AVATAR_Y_CUSTOM')) ? DEFAULT_AVATAR_Y_CUSTOM : DEFAULT_AVATAR_Y;	$default 	= array($default_x, $default_y);	if (empty($remote_avatar_cache[$src]) || empty($remote_avatar_cache[$src][0]) || empty($remote_avatar_cache[$src][1]))	{		$remote_avatar_cache[$src] = $default;	}	else	{		// We trust gallery and uploaded avatars to conform to the size settings; we might have to adjust here		if ($remote_avatar_cache[$src][0] > $default_x || $remote_avatar_cache[$src][1] > $default_y)		{			$bigger = ($remote_avatar_cache[$src][0] > $remote_avatar_cache[$src][1]) ? 0 : 1;			$ratio = $default[$bigger] / $remote_avatar_cache[$src][$bigger];			$remote_avatar_cache[$src][0] = (int)($remote_avatar_cache[$src][0] * $ratio);			$remote_avatar_cache[$src][1] = (int)($remote_avatar_cache[$src][1] * $ratio);		}	}	@ini_set('default_socket_timeout', $timeout);	return $remote_avatar_cache[$src][$axis];}function set_user_options(){	global $convert_row;	// Key need to be set in row, else default value is chosen	$keyoptions = array(		'viewimg'		=> array('bit' => 0, 'default' => 1),		'viewflash'		=> array('bit' => 1, 'default' => 1),		'viewsmilies'	=> array('bit' => 2, 'default' => 1),		'viewsigs'		=> array('bit' => 3, 'default' => 1),		'viewavatars'	=> array('bit' => 4, 'default' => 1),		'viewcensors'	=> array('bit' => 5, 'default' => 1),		'attachsig'		=> array('bit' => 6, 'default' => 0),		'bbcode'		=> array('bit' => 8, 'default' => 1),		'smilies'		=> array('bit' => 9, 'default' => 1),		'popuppm'		=> array('bit' => 10, 'default' => 0),		'sig_bbcode'	=> array('bit' => 15, 'default' => 1),		'sig_smilies'	=> array('bit' => 16, 'default' => 1),		'sig_links'		=> array('bit' => 17, 'default' => 1),	);	$option_field = 0;	foreach ($keyoptions as $key => $key_ary)	{		$value = (isset($convert_row[$key])) ? (int) $convert_row[$key] : $key_ary['default'];		if ($value && !($option_field & 1 << $key_ary['bit']))		{			$option_field += 1 << $key_ary['bit'];		}	}	return $option_field;}/*** Index messages on the fly as we convert them* @todo naderman, can you check that this works with the new search plugins as it's use is currently disabled (and thus untested)function search_indexing($message = ''){	global $fulltext_search, $convert_row;	if (!isset($convert_row['post_id']))	{		return;	}	if (!$message)	{		if (!isset($convert_row['message']))		{			return;		}		$message = $convert_row['message'];	}	$title = (isset($convert_row['title'])) ? $convert_row['title'] : '';	$fulltext_search->index('post', $convert_row['post_id'], $message, $title, $convert_row['poster_id'], $convert_row['forum_id']);}*/function make_unique_filename($filename){	if (!strlen($filename))	{		$filename = md5(unique_id()) . '.dat';	}	else if ($filename[0] == '.')	{		$filename = md5(unique_id()) . $filename;	}	else if (preg_match('/\.([a-z]+)$/i', $filename, $m))	{		$filename = preg_replace('/\.([a-z]+)$/i', '_' . md5(unique_id()) . '.\1', $filename);	}	else	{		$filename .= '_' . md5(unique_id()) . '.dat';	}	return $filename;}function words_unique(&$words){	reset($words);	$return_array = array();	$word = current($words);	do	{		$return_array[$word] = $word;	}	while ($word = next($words));	return $return_array;}/*** Adds a user to the specified group and optionally makes them a group leader* This function does not create the group if it does not exist and so should only be called after the groups have been created*/function add_user_group($group_id, $user_id, $group_leader=false){	global $convert, $phpbb_root_path, $config, $user, $db;	$sql = 'INSERT INTO ' . USER_GROUP_TABLE . ' ' . $db->sql_build_array('INSERT', array(		'group_id'		=> $group_id,		'user_id'		=> $user_id,		'group_leader'	=> ($group_leader) ? 1 : 0,		'user_pending'	=> 0));	$db->sql_query($sql);}// STANDALONE FUNCTIONS/*** Add users to the pre-defined "special" groups** @param string $group The name of the special group to add to* @param string $select_query An SQL query to retrieve the user(s) to add to the group*/function user_group_auth($group, $select_query, $use_src_db){	global $convert, $phpbb_root_path, $config, $user, $db, $src_db, $same_db;	if (!in_array($group, array('guests', 'registered', 'registered_coppa', 'global_moderators', 'administrators', 'bots')))	{		$convert->p_master->error(sprintf($user->lang['CONV_ERROR_WRONG_GROUP'], $group, 'user_group_auth()'), __LINE__, __FILE__, true);		return;	}	$sql = 'SELECT group_id		FROM ' . GROUPS_TABLE . "		WHERE group_name = '" . $db->sql_escape(strtoupper($group)) . "'";	$result = $db->sql_query($sql);	$group_id = (int) $db->sql_fetchfield('group_id');	$db->sql_freeresult($result);	if (!$group_id)	{		$convert->p_master->error(sprintf($user->lang['CONV_ERROR_NO_GROUP'], $group, 'user_group_auth()'), __LINE__, __FILE__, true);		return;	}	if ($same_db || !$use_src_db)	{		$sql = 'INSERT INTO ' . USER_GROUP_TABLE . ' (user_id, group_id, user_pending)			' . str_replace('{' . strtoupper($group) . '}', $group_id . ', 0', $select_query);		$db->sql_query($sql);	}	else	{		$result = $src_db->sql_query(str_replace('{' . strtoupper($group) . '}', $group_id . ' ', $select_query));		while ($row = $src_db->sql_fetchrow($result))		{			// this might become quite a lot of INSERTS unfortunately			$sql = 'INSERT INTO ' . USER_GROUP_TABLE . " (user_id, group_id, user_pending)				VALUES ({$row['user_id']}, $group_id, 0)";			$db->sql_query($sql);		}		$src_db->sql_freeresult($result);	}}/*** Retrieves configuration information from the source forum and caches it as an array* Both database and file driven configuration formats can be handled* (the type used is specified in $config_schema, see convert_phpbb20.php for more details)*/function get_config(){	static $convert_config;	global $user;	if (isset($convert_config))	{		return $convert_config;	}	global $src_db, $same_db, $phpbb_root_path, $config;	global $convert;	if ($convert->config_schema['table_format'] != 'file')	{		if ($convert->mysql_convert && $same_db)		{			$src_db->sql_query("SET NAMES 'binary'");		}		$sql = 'SELECT * FROM ' . $convert->src_table_prefix . $convert->config_schema['table_name'];		$result = $src_db->sql_query($sql);		$row = $src_db->sql_fetchrow($result);		if (!$row)		{			$convert->p_master->error($user->lang['CONV_ERROR_GET_CONFIG'], __LINE__, __FILE__);		}	}	if (is_array($convert->config_schema['table_format']))	{		$convert_config = array();		list($key, $val) = each($convert->config_schema['table_format']);		do		{			$convert_config[$row[$key]] = $row[$val];		}		while ($row = $src_db->sql_fetchrow($result));		$src_db->sql_freeresult($result);		if ($convert->mysql_convert && $same_db)		{			$src_db->sql_query("SET NAMES 'utf8'");		}	}	else if ($convert->config_schema['table_format'] == 'file')	{		$filename = $convert->options['forum_path'] . '/' . $convert->config_schema['filename'];		if (!file_exists($filename))		{			$convert->p_master->error($user->lang['FILE_NOT_FOUND'] . ': ' . $filename, __LINE__, __FILE__);		}		if (isset($convert->config_schema['array_name']))		{			unset($convert->config_schema['array_name']);		}		$convert_config = extract_variables_from_file($filename);		if (!empty($convert->config_schema['array_name']))		{			$convert_config = $convert_config[$convert->config_schema['array_name']];		}	}	else	{		$convert_config = $row;		if ($convert->mysql_convert && $same_db)		{			$src_db->sql_query("SET NAMES 'utf8'");		}	}	if (!sizeof($convert_config))	{		$convert->p_master->error($user->lang['CONV_ERROR_CONFIG_EMPTY'], __LINE__, __FILE__);	}	return $convert_config;}/*** Transfers the relevant configuration information from the source forum* The mapping of fields is specified in $config_schema, see convert_phpbb20.php for more details*/function restore_config($schema){	global $db, $config;	$convert_config = get_config();	foreach ($schema['settings'] as $config_name => $src)	{		if (preg_match('/(.*)\((.*)\)/', $src, $m))		{			$var = (empty($m[2]) || empty($convert_config[$m[2]])) ? "''" : "'" . addslashes($convert_config[$m[2]]) . "'";			$exec = '$config_value = ' . $m[1] . '(' . $var . ');';			eval($exec);		}		else		{			if ($schema['table_format'] != 'file' || empty($schema['array_name']))			{				$config_value = (isset($convert_config[$src])) ? $convert_config[$src] : '';			}			else if (!empty($schema['array_name']))			{				$src_ary = $schema['array_name'];				$config_value = (isset($convert_config[$src_ary][$src])) ? $convert_config[$src_ary][$src] : '';			}   		}		if ($config_value !== '')		{			// Most are...			if (is_string($config_value))			{				$config_value = truncate_string(utf8_htmlspecialchars($config_value), 255, 255, false);			}			set_config($config_name, $config_value);		}	}}/*** Update the count of PM's in custom folders for all users*/function update_folder_pm_count(){	global $db, $convert, $user;	$sql = 'SELECT user_id, folder_id, COUNT(msg_id) as num_messages		FROM ' . PRIVMSGS_TO_TABLE . '		WHERE folder_id NOT IN (' . PRIVMSGS_NO_BOX . ', ' . PRIVMSGS_HOLD_BOX . ', ' . PRIVMSGS_INBOX . ', ' . PRIVMSGS_OUTBOX . ', ' . PRIVMSGS_SENTBOX . ')		GROUP BY folder_id, user_id';	$result = $db->sql_query($sql);	while ($row = $db->sql_fetchrow($result))	{		$db->sql_query('UPDATE ' . PRIVMSGS_FOLDER_TABLE . ' SET pm_count = ' . $row['num_messages'] . '			WHERE user_id = ' . $row['user_id'] . ' AND folder_id = ' . $row['folder_id']);	}	$db->sql_freeresult($result);}// Functions mainly used by the main convertor scriptfunction path($path, $path_relative = true){	if ($path === false)	{		return '';	}	if (substr($path, -1) != '/')	{		$path .= '/';	}	if (!$path_relative)	{		return $path;	}	if (substr($path, 0, 1) == '/')	{		$path = substr($path, 1);	}	return $path;}/*** Extract the variables defined in a configuration file* @todo As noted by Xore we need to look at this from a security perspective*/function extract_variables_from_file($_filename){	include($_filename);	$vars = get_defined_vars();	unset($vars['_filename']);	return $vars;}function get_path($src_path, $src_url, $test_file){	global $config, $phpbb_root_path, $phpEx;	$board_config = get_config();	$test_file = preg_replace('/\.php$/i', ".$phpEx", $test_file);	$src_path = path($src_path);	if (@file_exists($phpbb_root_path . $src_path . $test_file))	{		return $src_path;	}	if (!empty($src_url) && !empty($board_config['server_name']))	{		if (!preg_match('#https?://([^/]+)(.*)#i', $src_url, $m))		{			return false;		}		if ($m[1] != $board_config['server_name'])		{			return false;		}		$url_parts = explode('/', $m[2]);		if (substr($src_url, -1) != '/')		{			if (preg_match('/.*\.([a-z0-9]{3,4})$/i', $url_parts[sizeof($url_parts) - 1]))			{				$url_parts[sizeof($url_parts) - 1] = '';			}			else			{				$url_parts[] = '';			}		}		$script_path = $board_config['script_path'];		if (substr($script_path, -1) == '/')		{			$script_path = substr($script_path, 0, -1);		}		$path_array = array();		$phpbb_parts = explode('/', $script_path);		for ($i = 0; $i < sizeof($url_parts); ++$i)		{			if ($i < sizeof($phpbb_parts[$i]) && $url_parts[$i] == $phpbb_parts[$i])			{				$path_array[] = $url_parts[$i];				unset($url_parts[$i]);			}			else			{				$path = '';				for ($j = $i; $j < sizeof($phpbb_parts); ++$j)				{					$path .= '../';				}				$path .= implode('/', $url_parts);				break;			}		}		if (!empty($path))		{			if (@file_exists($phpbb_root_path . $path . $test_file))			{				return $path;			}		}	}	return false;}function compare_table($tables, $tablename, &$prefixes){	for ($i = 0, $table_size = sizeof($tables); $i < $table_size; ++$i)	{		if (preg_match('/(.*)' . $tables[$i] . '$/', $tablename, $m))		{			if (empty($m[1]))			{				$m[1] = '*';			}			if (isset($prefixes[$m[1]]))			{				$prefixes[$m[1]]++;			}			else			{				$prefixes[$m[1]] = 1;			}		}	}}/*** Grant permissions to a specified user or group** @param string $ug_type user|group|user_role|group_role* @param mixed $forum_id forum ids (array|int|0) -> 0 == all forums* @param mixed $ug_id [int] user_id|group_id : [string] usergroup name* @param mixed $acl_list [string] acl entry : [array] acl entries : [string] role entry* @param int $setting ACL_YES|ACL_NO|ACL_NEVER*/function mass_auth($ug_type, $forum_id, $ug_id, $acl_list, $setting = ACL_NO){	global $db, $convert, $user, $config;	static $acl_option_ids, $group_ids;	if (($ug_type == 'group' || $ug_type == 'group_role') && is_string($ug_id))	{		if (!isset($group_ids[$ug_id]))		{			$sql = 'SELECT group_id				FROM ' . GROUPS_TABLE . "				WHERE group_name = '" . $db->sql_escape(strtoupper($ug_id)) . "'";			$result = $db->sql_query_limit($sql, 1);			$id = (int) $db->sql_fetchfield('group_id');			$db->sql_freeresult($result);			if (!$id)			{				return;			}			$group_ids[$ug_id] = $id;		}		$ug_id = (int) $group_ids[$ug_id];	}	$table = ($ug_type == 'user' || $ug_type == 'user_role') ? ACL_USERS_TABLE : ACL_GROUPS_TABLE;	$id_field = ($ug_type == 'user' || $ug_type == 'user_role') ? 'user_id' : 'group_id';	// Role based permissions are the simplest to handle so check for them first	if ($ug_type == 'user_role' || $ug_type == 'group_role')	{		if (is_numeric($forum_id))		{			$sql = 'SELECT role_id				FROM ' . ACL_ROLES_TABLE . "				WHERE role_name = 'ROLE_" . $db->sql_escape($acl_list) . "'";			$result = $db->sql_query_limit($sql, 1);			$row = $db->sql_fetchrow($result);			$db->sql_freeresult($result);			// If we have no role id there is something wrong here			if ($row)			{				$sql = "INSERT INTO $table ($id_field, forum_id, auth_role_id) VALUES ($ug_id, $forum_id, " . $row['role_id'] . ')';				$db->sql_query($sql);			}		}		return;	}	// Build correct parameters	$auth = array();	if (!is_array($acl_list))	{		$auth = array($acl_list => $setting);	}	else	{		foreach ($acl_list as $auth_option)		{			$auth[$auth_option] = $setting;		}	}	unset($acl_list);	if (!is_array($forum_id))	{		$forum_id = array($forum_id);	}	// Set any flags as required	foreach ($auth as $auth_option => $acl_setting)	{		$flag = substr($auth_option, 0, strpos($auth_option, '_') + 1);		if (empty($auth[$flag]))		{			$auth[$flag] = $acl_setting;		}	}	if (!is_array($acl_option_ids) || empty($acl_option_ids))	{		$sql = 'SELECT auth_option_id, auth_option			FROM ' . ACL_OPTIONS_TABLE;		$result = $db->sql_query($sql);		while ($row = $db->sql_fetchrow($result))		{			$acl_option_ids[$row['auth_option']] = $row['auth_option_id'];		}		$db->sql_freeresult($result);	}	$sql_forum = 'AND ' . $db->sql_in_set('a.forum_id', array_map('intval', $forum_id), false, true);	$sql = ($ug_type == 'user') ? 'SELECT o.auth_option_id, o.auth_option, a.forum_id, a.auth_setting FROM ' . ACL_USERS_TABLE . ' a, ' . ACL_OPTIONS_TABLE . " o WHERE a.auth_option_id = o.auth_option_id $sql_forum AND a.user_id = $ug_id" : 'SELECT o.auth_option_id, o.auth_option, a.forum_id, a.auth_setting FROM ' . ACL_GROUPS_TABLE . ' a, ' . ACL_OPTIONS_TABLE . " o WHERE a.auth_option_id = o.auth_option_id $sql_forum AND a.group_id = $ug_id";	$result = $db->sql_query($sql);	$cur_auth = array();	while ($row = $db->sql_fetchrow($result))	{		$cur_auth[$row['forum_id']][$row['auth_option_id']] = $row['auth_setting'];	}	$db->sql_freeresult($result);	$sql_ary = array();	foreach ($forum_id as $forum)	{		foreach ($auth as $auth_option => $setting)		{			$auth_option_id = $acl_option_ids[$auth_option];			if (!$auth_option_id)			{				continue;			}			switch ($setting)			{				case ACL_NO:					if (isset($cur_auth[$forum][$auth_option_id]))					{						$sql_ary['delete'][] = "DELETE FROM $table							WHERE forum_id = $forum								AND auth_option_id = $auth_option_id								AND $id_field = $ug_id";					}				break;				default:					if (!isset($cur_auth[$forum][$auth_option_id]))					{						$sql_ary['insert'][] = "$ug_id, $forum, $auth_option_id, $setting";					}					else if ($cur_auth[$forum][$auth_option_id] != $setting)					{						$sql_ary['update'][] = "UPDATE " . $table . "							SET auth_setting = $setting							WHERE $id_field = $ug_id								AND forum_id = $forum								AND auth_option_id = $auth_option_id";					}			}		}	}	unset($cur_auth);	$sql = '';	foreach ($sql_ary as $sql_type => $sql_subary)	{		switch ($sql_type)		{			case 'insert':				switch ($db->sql_layer)				{					case 'mysql':					case 'mysql4':						$sql = 'VALUES ' . implode(', ', preg_replace('#^(.*?)$#', '(\1)', $sql_subary));					break;					case 'mssql':					case 'sqlite':					case 'mssqlnative':						$sql = implode(' UNION ALL ', preg_replace('#^(.*?)$#', 'SELECT \1', $sql_subary));					break;					default:						foreach ($sql_subary as $sql)						{							$sql = "INSERT INTO $table ($id_field, forum_id, auth_option_id, auth_setting) VALUES ($sql)";							$db->sql_query($sql);							$sql = '';						}				}				if ($sql != '')				{					$sql = "INSERT INTO $table ($id_field, forum_id, auth_option_id, auth_setting) $sql";					$db->sql_query($sql);				}			break;			case 'update':			case 'delete':				foreach ($sql_subary as $sql)				{					$db->sql_query($sql);					$sql = '';				}			break;		}		unset($sql_ary[$sql_type]);	}	unset($sql_ary);}/*** Update the count of unread private messages for all users*/function update_unread_count(){	global $db;	$sql = 'SELECT user_id, COUNT(msg_id) as num_messages		FROM ' . PRIVMSGS_TO_TABLE . '		WHERE pm_unread = 1			AND folder_id <> ' . PRIVMSGS_OUTBOX . '		GROUP BY user_id';	$result = $db->sql_query($sql);	while ($row = $db->sql_fetchrow($result))	{		$db->sql_query('UPDATE ' . USERS_TABLE . ' SET user_unread_privmsg = ' . $row['num_messages'] . '			WHERE user_id = ' . $row['user_id']);	}	$db->sql_freeresult($result);}/*** Add any of the pre-defined "special" groups which are missing from the database*/function add_default_groups(){	global $db;	$default_groups = array(		'GUESTS'			=> array('', 0, 0),		'REGISTERED'		=> array('', 0, 0),		'REGISTERED_COPPA'	=> array('', 0, 0),		'GLOBAL_MODERATORS'	=> array('00AA00', 1, 0),		'ADMINISTRATORS'	=> array('AA0000', 1, 1),		'BOTS'				=> array('9E8DA7', 0, 0),		'NEWLY_REGISTERED'		=> array('', 0, 0),	);	$sql = 'SELECT *		FROM ' . GROUPS_TABLE . '		WHERE ' . $db->sql_in_set('group_name', array_keys($default_groups));	$result = $db->sql_query($sql);	while ($row = $db->sql_fetchrow($result))	{		unset($default_groups[strtoupper($row['group_name'])]);	}	$db->sql_freeresult($result);	$sql_ary = array();	foreach ($default_groups as $name => $data)	{		$sql_ary[] = array(			'group_name'			=> (string) $name,			'group_desc'			=> '',			'group_desc_uid'		=> '',			'group_desc_bitfield'	=> '',			'group_type'			=> GROUP_SPECIAL,			'group_colour'			=> (string) $data[0],			'group_legend'			=> (int) $data[1],			'group_founder_manage'	=> (int) $data[2]		);	}	if (sizeof($sql_ary))	{		$db->sql_multi_insert(GROUPS_TABLE, $sql_ary);	}}/*** Sync post count. We might need to do this in batches.*/function sync_post_count($offset, $limit){	global $db;	$sql = 'SELECT COUNT(post_id) AS num_posts, poster_id			FROM ' . POSTS_TABLE . '			WHERE post_postcount = 1				AND post_approved = 1			GROUP BY poster_id			ORDER BY poster_id';	$result = $db->sql_query_limit($sql, $limit, $offset);	while ($row = $db->sql_fetchrow($result))	{		$db->sql_query('UPDATE ' . USERS_TABLE . " SET user_posts = {$row['num_posts']} WHERE user_id = {$row['poster_id']}");	}	$db->sql_freeresult($result);}/*** Add the search bots into the database* This code should be used in execute_last if the source database did not have bots* If you are converting bots this function should not be called* @todo We might want to look at sharing the bot list between the install code and this code for consistancy*/function add_bots(){	global $db, $convert, $user, $config, $phpbb_root_path, $phpEx;	$db->sql_query($convert->truncate_statement . BOTS_TABLE);	$sql = 'SELECT group_id FROM ' . GROUPS_TABLE . " WHERE group_name = 'BOTS'";	$result = $db->sql_query($sql);	$group_id = (int) $db->sql_fetchfield('group_id', false, $result);	$db->sql_freeresult($result);	if (!$group_id)	{		add_default_groups();		$sql = 'SELECT group_id FROM ' . GROUPS_TABLE . " WHERE group_name = 'BOTS'";		$result = $db->sql_query($sql);		$group_id = (int) $db->sql_fetchfield('group_id', false, $result);		$db->sql_freeresult($result);		if (!$group_id)		{			global $install;			$install->error($user->lang['CONV_ERROR_INCONSISTENT_GROUPS'], __LINE__, __FILE__);		}	}	$bots = array(		'AdsBot [Google]'			=> array('AdsBot-Google', ''),		'Alexa [Bot]'				=> array('ia_archiver', ''),		'Alta Vista [Bot]'			=> array('Scooter/', ''),		'Ask Jeeves [Bot]'			=> array('Ask Jeeves', ''),		'Baidu [Spider]'			=> array('Baiduspider+(', ''),		'Bing [Bot]'				=> array('bingbot/', ''),		'Exabot [Bot]'				=> array('Exabot/', ''),		'FAST Enterprise [Crawler]'	=> array('FAST Enterprise Crawler', ''),		'FAST WebCrawler [Crawler]'	=> array('FAST-WebCrawler/', ''),		'Francis [Bot]'				=> array('http://www.neomo.de/', ''),		'Gigabot [Bot]'				=> array('Gigabot/', ''),		'Google Adsense [Bot]'		=> array('Mediapartners-Google', ''),		'Google Desktop'			=> array('Google Desktop', ''),		'Google Feedfetcher'		=> array('Feedfetcher-Google', ''),		'Google [Bot]'				=> array('Googlebot', ''),		'Heise IT-Markt [Crawler]'	=> array('heise-IT-Markt-Crawler', ''),		'Heritrix [Crawler]'		=> array('heritrix/1.', ''),		'IBM Research [Bot]'		=> array('ibm.com/cs/crawler', ''),		'ICCrawler - ICjobs'		=> array('ICCrawler - ICjobs', ''),		'ichiro [Crawler]'			=> array('ichiro/2', ''),		'Majestic-12 [Bot]'			=> array('MJ12bot/', ''),		'Metager [Bot]'				=> array('MetagerBot/', ''),		'MSN NewsBlogs'				=> array('msnbot-NewsBlogs/', ''),		'MSN [Bot]'					=> array('msnbot/', ''),		'MSNbot Media'				=> array('msnbot-media/', ''),		'NG-Search [Bot]'			=> array('NG-Search/', ''),		'Nutch [Bot]'				=> array('http://lucene.apache.org/nutch/', ''),		'Nutch/CVS [Bot]'			=> array('NutchCVS/', ''),		'OmniExplorer [Bot]'		=> array('OmniExplorer_Bot/', ''),		'Online link [Validator]'	=> array('online link validator', ''),		'psbot [Picsearch]'			=> array('psbot/0', ''),		'Seekport [Bot]'			=> array('Seekbot/', ''),		'Sensis [Crawler]'			=> array('Sensis Web Crawler', ''),		'SEO Crawler'				=> array('SEO search Crawler/', ''),		'Seoma [Crawler]'			=> array('Seoma [SEO Crawler]', ''),		'SEOSearch [Crawler]'		=> array('SEOsearch/', ''),		'Snappy [Bot]'				=> array('Snappy/1.1 ( http://www.urltrends.com/ )', ''),		'Steeler [Crawler]'			=> array('http://www.tkl.iis.u-tokyo.ac.jp/~crawler/', ''),		'Synoo [Bot]'				=> array('SynooBot/', ''),		'Telekom [Bot]'				=> array('crawleradmin.t-info@telekom.de', ''),		'TurnitinBot [Bot]'			=> array('TurnitinBot/', ''),		'Voyager [Bot]'				=> array('voyager/1.0', ''),		'W3 [Sitesearch]'			=> array('W3 SiteSearch Crawler', ''),		'W3C [Linkcheck]'			=> array('W3C-checklink/', ''),		'W3C [Validator]'			=> array('W3C_*Validator', ''),		'WiseNut [Bot]'				=> array('http://www.WISEnutbot.com', ''),		'YaCy [Bot]'				=> array('yacybot', ''),		'Yahoo MMCrawler [Bot]'		=> array('Yahoo-MMCrawler/', ''),		'Yahoo Slurp [Bot]'			=> array('Yahoo! DE Slurp', ''),		'Yahoo [Bot]'				=> array('Yahoo! Slurp', ''),		'YahooSeeker [Bot]'			=> array('YahooSeeker/', ''),	);	if (!function_exists('user_add'))	{		include($phpbb_root_path . 'includes/functions_user.' . $phpEx);	}	foreach ($bots as $bot_name => $bot_ary)	{		$user_row = array(			'user_type'				=> USER_IGNORE,			'group_id'				=> $group_id,			'username'				=> $bot_name,			'user_regdate'			=> time(),			'user_password'			=> '',			'user_colour'			=> '9E8DA7',			'user_email'			=> '',			'user_lang'				=> $config['default_lang'],			'user_style'			=> 1,			'user_timezone'			=> 0,			'user_allow_massemail'	=> 0,		);		$user_id = user_add($user_row);		if ($user_id)		{			$sql = 'INSERT INTO ' . BOTS_TABLE . ' ' . $db->sql_build_array('INSERT', array(				'bot_active'	=> 1,				'bot_name'		=> $bot_name,				'user_id'		=> $user_id,				'bot_agent'		=> $bot_ary[0],				'bot_ip'		=> $bot_ary[1])			);			$db->sql_query($sql);		}	}}/*** Update any dynamic configuration variables after the conversion is finished* @todo Confirm that this updates all relevant values since it has not necessarily been kept in sync with all changes*/function update_dynamic_config(){	global $db, $config;	// Get latest username	$sql = 'SELECT user_id, username, user_colour		FROM ' . USERS_TABLE . '		WHERE user_type IN (' . USER_NORMAL . ', ' . USER_FOUNDER . ')';	if (!empty($config['increment_user_id']))	{		$sql .= ' AND user_id <> ' . $config['increment_user_id'];	}	$sql .= ' ORDER BY user_id DESC';	$result = $db->sql_query_limit($sql, 1);	$row = $db->sql_fetchrow($result);	$db->sql_freeresult($result);	if ($row)	{		set_config('newest_user_id', $row['user_id'], true);		set_config('newest_username', $row['username'], true);		set_config('newest_user_colour', $row['user_colour'], true);	}//	Also do not reset record online user/date. There will be old data or the fresh data from the schema.//	set_config('record_online_users', 1, true);//	set_config('record_online_date', time(), true);	$sql = 'SELECT COUNT(post_id) AS stat		FROM ' . POSTS_TABLE . '		WHERE post_approved = 1';	$result = $db->sql_query($sql);	$row = $db->sql_fetchrow($result);	$db->sql_freeresult($result);	set_config('num_posts', (int) $row['stat'], true);	$sql = 'SELECT COUNT(topic_id) AS stat		FROM ' . TOPICS_TABLE . '		WHERE topic_approved = 1';	$result = $db->sql_query($sql);	$row = $db->sql_fetchrow($result);	$db->sql_freeresult($result);	set_config('num_topics', (int) $row['stat'], true);	$sql = 'SELECT COUNT(user_id) AS stat		FROM ' . USERS_TABLE . '		WHERE user_type IN (' . USER_NORMAL . ',' . USER_FOUNDER . ')';	$result = $db->sql_query($sql);	$row = $db->sql_fetchrow($result);	$db->sql_freeresult($result);	set_config('num_users', (int) $row['stat'], true);	$sql = 'SELECT COUNT(attach_id) as stat		FROM ' . ATTACHMENTS_TABLE . '		WHERE is_orphan = 0';	$result = $db->sql_query($sql);	set_config('num_files', (int) $db->sql_fetchfield('stat'), true);	$db->sql_freeresult($result);	$sql = 'SELECT SUM(filesize) as stat		FROM ' . ATTACHMENTS_TABLE . '		WHERE is_orphan = 0';	$result = $db->sql_query($sql);	set_config('upload_dir_size', (float) $db->sql_fetchfield('stat'), true);	$db->sql_freeresult($result);	/**	* We do not resync users post counts - this can be done by the admin after conversion if wanted.	$sql = 'SELECT COUNT(post_id) AS num_posts, poster_id		FROM ' . POSTS_TABLE . '		WHERE post_postcount = 1		GROUP BY poster_id';	$result = $db->sql_query($sql);	while ($row = $db->sql_fetchrow($result))	{		$db->sql_query('UPDATE ' . USERS_TABLE . " SET user_posts = {$row['num_posts']} WHERE user_id = {$row['poster_id']}");	}	$db->sql_freeresult($result);	*/}/*** Updates topics_posted entries*/function update_topics_posted(){	global $db, $config;	switch ($db->sql_layer)	{		case 'sqlite':		case 'firebird':			$db->sql_query('DELETE FROM ' . TOPICS_POSTED_TABLE);		break;		default:			$db->sql_query('TRUNCATE TABLE ' . TOPICS_POSTED_TABLE);		break;	}	// This can get really nasty... therefore we only do the last six months	$get_from_time = time() - (6 * 4 * 7 * 24 * 60 * 60);	// Select forum ids, do not include categories	$sql = 'SELECT forum_id		FROM ' . FORUMS_TABLE . '		WHERE forum_type <> ' . FORUM_CAT;	$result = $db->sql_query($sql);	$forum_ids = array();	while ($row = $db->sql_fetchrow($result))	{		$forum_ids[] = $row['forum_id'];	}	$db->sql_freeresult($result);	// Any global announcements? ;)	$forum_ids[] = 0;	// Now go through the forums and get us some topics...	foreach ($forum_ids as $forum_id)	{		$sql = 'SELECT p.poster_id, p.topic_id			FROM ' . POSTS_TABLE . ' p, ' . TOPICS_TABLE . ' t			WHERE t.forum_id = ' . $forum_id . '				AND t.topic_moved_id = 0				AND t.topic_last_post_time > ' . $get_from_time . '				AND t.topic_id = p.topic_id				AND p.poster_id <> ' . ANONYMOUS . '			GROUP BY p.poster_id, p.topic_id';		$result = $db->sql_query($sql);		$posted = array();		while ($row = $db->sql_fetchrow($result))		{			$posted[$row['poster_id']][] = $row['topic_id'];		}		$db->sql_freeresult($result);		$sql_ary = array();		foreach ($posted as $user_id => $topic_row)		{			foreach ($topic_row as $topic_id)			{				$sql_ary[] = array(					'user_id'		=> (int) $user_id,					'topic_id'		=> (int) $topic_id,					'topic_posted'	=> 1,				);			}		}		unset($posted);		if (sizeof($sql_ary))		{			$db->sql_multi_insert(TOPICS_POSTED_TABLE, $sql_ary);		}	}}/*** Ensure that all users have a default group specified and update related information such as their colour*/function fix_empty_primary_groups(){	global $db;	// Set group ids for users not already having it	$sql = 'UPDATE ' . USERS_TABLE . ' SET group_id = ' . get_group_id('registered') . '		WHERE group_id = 0 AND user_type = ' . USER_INACTIVE;	$db->sql_query($sql);	$sql = 'UPDATE ' . USERS_TABLE . ' SET group_id = ' . get_group_id('registered') . '		WHERE group_id = 0 AND user_type = ' . USER_NORMAL;	$db->sql_query($sql);	$db->sql_query('UPDATE ' . USERS_TABLE . ' SET group_id = ' . get_group_id('guests') . ' WHERE user_id = ' . ANONYMOUS);	$sql = 'SELECT user_id FROM ' . USER_GROUP_TABLE . ' WHERE group_id = ' . get_group_id('administrators');	$result = $db->sql_query($sql);	$user_ids = array();	while ($row = $db->sql_fetchrow($result))	{		$user_ids[] = $row['user_id'];	}	$db->sql_freeresult($result);	if (sizeof($user_ids))	{		$db->sql_query('UPDATE ' . USERS_TABLE . ' SET group_id = ' . get_group_id('administrators') . '			WHERE group_id = 0 AND ' . $db->sql_in_set('user_id', $user_ids));	}	$sql = 'SELECT user_id FROM ' . USER_GROUP_TABLE . ' WHERE group_id = ' . get_group_id('global_moderators');	$user_ids = array();	while ($row = $db->sql_fetchrow($result))	{		$user_ids[] = $row['user_id'];	}	$db->sql_freeresult($result);	if (sizeof($user_ids))	{		$db->sql_query('UPDATE ' . USERS_TABLE . ' SET group_id = ' . get_group_id('global_moderators') . '			WHERE group_id = 0 AND ' . $db->sql_in_set('user_id', $user_ids));	}	// Set user colour	$sql = 'SELECT group_id, group_colour FROM ' . GROUPS_TABLE . "		WHERE group_colour <> ''";	$result = $db->sql_query($sql);	while ($row = $db->sql_fetchrow($result))	{		$db->sql_query('UPDATE ' . USERS_TABLE . " SET user_colour = '{$row['group_colour']}' WHERE group_id = {$row['group_id']}");	}	$db->sql_freeresult($result);}/*** Cleanly remove invalid user entries after converting the users table...*/function remove_invalid_users(){	global $convert, $db, $phpEx, $phpbb_root_path;	// username_clean is UNIQUE	$sql = 'SELECT user_id		FROM ' . USERS_TABLE . "		WHERE username_clean = ''";	$result = $db->sql_query($sql);	$row = $db->sql_fetchrow($result);	$db->sql_freeresult($result);	if ($row)	{		if (!function_exists('user_delete'))		{			include($phpbb_root_path . 'includes/functions_user.' . $phpEx);		}		user_delete('remove', $row['user_id']);	}}function convert_bbcode($message, $convert_size = true, $extended_bbcodes = false){	static $orig, $repl, $origx, $replx, $str_from, $str_to;	if (empty($orig))	{		$orig = $repl = array();		$orig[] = '#\[(php|sql)\](.*?)\[/(php|sql)\]#is';		$repl[] = '[code]\2[/code]';		$orig[] = '#\[font=[^\]]+\](.*?)\[/font\]#is';		$repl[] = '\1';		$orig[] = '#\[align=[a-z]+\](.*?)\[/align\]#is';		$repl[] = '\1';		$orig[] = '#\[/list=.*?\]#is';		$repl[] = '[/list]';		$origx = array(			'#\[glow[^\]]+\](.*?)\[/glow\]#is',			'#\[shadow[^\]]+\](.*?)\[/shadow\]#is',			'#\[flash[^\]]+\](.*?)\[/flash\]#is'		);		$replx = array(			'\1',			'\1',			'[url=\1]Flash[/url]'		);		$str_from = array(			'[ftp]',	'[/ftp]',			'[ftp=',	'[/ftp]',			'[pre]',	'[/pre]',			'[table]',	'[/table]',			'[td]',		'[/td]',			'[tr]',		'[/tr]',			'[s]',		'[/s]',			'[left]',	'[/left]',			'[right]',	'[/right]',			'[center]',	'[/center]',			'[sub]',	'[/sub]',			'[sup]',	'[/sup]',			'[tt]',		'[/tt]',			'[move]',	'[/move]',			'[hr]'		);		$str_to = array(			'[url]',	'[/url]',			'[url=',	'[/url]',			'[code]',	'[/code]',			"\n",		'',			'',			'',			"\n",		'',			'',			'',			'',			'',			'',			'',			'',			'',			'',			'',			'',			'',			'',			'',			'',			'',			"\n\n"		);		for ($i = 0; $i < sizeof($str_from); ++$i)		{			$origx[] = '#\\' . str_replace(']', '\\]', $str_from[$i]) . '#is';			$replx[] = $str_to[$i];		}	}	if (preg_match_all('#\[email=([^\]]+)\](.*?)\[/email\]#i', $message, $m))	{		for ($i = 0; $i < sizeof($m[1]); ++$i)		{			if ($m[1][$i] == $m[2][$i])			{				$message = str_replace($m[0][$i], '[email]' . $m[1][$i] . '[/email]', $message);			}			else			{				$message = str_replace($m[0][$i], $m[2][$i] . ' ([email]' . $m[1][$i] . '[/email])', $message);			}		}	}	if ($convert_size && preg_match('#\[size=[0-9]+\].*?\[/size\]#i', $message))	{		$size = array(9, 9, 12, 15, 18, 24, 29, 29, 29, 29);		$message = preg_replace('#\[size=([0-9]+)\](.*?)\[/size\]#i', '[size=\1]\2[/size]', $message);		$message = preg_replace('#\[size=[0-9]{2,}\](.*?)\[/size\]#i', '[size=29]\1[/size]', $message);		for ($i = sizeof($size); $i; )		{			$i--;			$message = str_replace('[size=' . $i . ']', '[size=' . $size[$i] . ']', $message);		}	}	if ($extended_bbcodes)	{		$message = preg_replace($origx, $replx, $message);	}	$message = preg_replace($orig, $repl, $message);	return $message;}function copy_file($src, $trg, $overwrite = false, $die_on_failure = true, $source_relative_path = true){	global $convert, $phpbb_root_path, $config, $user, $db;	if (substr($trg, -1) == '/')	{		$trg .= utf8_basename($src);	}	$src_path = relative_base($src, $source_relative_path, __LINE__, __FILE__);	$trg_path = $trg;	if (!$overwrite && @file_exists($trg_path))	{		return true;	}	if (!@file_exists($src_path))	{		return;	}	$path = $phpbb_root_path;	$parts = explode('/', $trg);	unset($parts[sizeof($parts) - 1]);	for ($i = 0; $i < sizeof($parts); ++$i)	{		$path .= $parts[$i] . '/';		if (!is_dir($path))		{			@mkdir($path, 0777);		}	}	if (!phpbb_is_writable($path))	{		@chmod($path, 0777);	}	if (!@copy($src_path, $phpbb_root_path . $trg_path))	{		$convert->p_master->error(sprintf($user->lang['COULD_NOT_COPY'], $src_path, $phpbb_root_path . $trg_path), __LINE__, __FILE__, !$die_on_failure);		return;	}	if ($perm = @fileperms($src_path))	{		@chmod($phpbb_root_path . $trg_path, $perm);	}	return true;}function copy_dir($src, $trg, $copy_subdirs = true, $overwrite = false, $die_on_failure = true, $source_relative_path = true){	global $convert, $phpbb_root_path, $config, $user, $db;	$dirlist = $filelist = $bad_dirs = array();	$src = path($src, $source_relative_path);	$trg = path($trg);	$src_path = relative_base($src, $source_relative_path, __LINE__, __FILE__);	$trg_path = $phpbb_root_path . $trg;	if (!is_dir($trg_path))	{		@mkdir($trg_path, 0777);		@chmod($trg_path, 0777);	}	if (!phpbb_is_writable($trg_path))	{		$bad_dirs[] = path($config['script_path']) . $trg;	}	if ($handle = @opendir($src_path))	{		while ($entry = readdir($handle))		{			if ($entry[0] == '.' || $entry == 'CVS' || $entry == 'index.htm')			{				continue;			}			if (is_dir($src_path . $entry))			{				$dirlist[] = $entry;			}			else			{				$filelist[] = $entry;			}		}		closedir($handle);	}	else if ($dir = @dir($src_path))	{		while ($entry = $dir->read())		{			if ($entry[0] == '.' || $entry == 'CVS' || $entry == 'index.htm')			{				continue;			}			if (is_dir($src_path . $entry))			{				$dirlist[] = $entry;			}			else			{				$filelist[] = $entry;			}		}		$dir->close();	}	else	{		$convert->p_master->error(sprintf($user->lang['CONV_ERROR_COULD_NOT_READ'], relative_base($src, $source_relative_path)), __LINE__, __FILE__);	}	if ($copy_subdirs)	{		for ($i = 0; $i < sizeof($dirlist); ++$i)		{			$dir = $dirlist[$i];			if ($dir == 'CVS')			{				continue;			}			if (!is_dir($trg_path . $dir))			{				@mkdir($trg_path . $dir, 0777);				@chmod($trg_path . $dir, 0777);			}			if (!phpbb_is_writable($trg_path . $dir))			{				$bad_dirs[] = $trg . $dir;				$bad_dirs[] = $trg_path . $dir;			}			if (!sizeof($bad_dirs))			{				copy_dir($src . $dir, $trg . $dir, true, $overwrite, $die_on_failure, $source_relative_path);			}		}	}	if (sizeof($bad_dirs))	{		$str = (sizeof($bad_dirs) == 1) ? $user->lang['MAKE_FOLDER_WRITABLE'] : $user->lang['MAKE_FOLDERS_WRITABLE'];		sort($bad_dirs);		$convert->p_master->error(sprintf($str, implode('<br />', $bad_dirs)), __LINE__, __FILE__);	}	for ($i = 0; $i < sizeof($filelist); ++$i)	{		copy_file($src . $filelist[$i], $trg . $filelist[$i], $overwrite, $die_on_failure, $source_relative_path);	}}function relative_base($path, $is_relative = true, $line = false, $file = false){	global $convert, $phpbb_root_path, $config, $user, $db;	if (!$is_relative)	{		return $path;	}	if (empty($convert->options['forum_path']) && $is_relative)	{		$line = $line ? $line : __LINE__;		$file = $file ? $file : __FILE__;		$convert->p_master->error($user->lang['CONV_ERROR_NO_FORUM_PATH'], $line, $file);	}	return $convert->options['forum_path'] . '/' . $path;}function get_smiley_display(){	static $smiley_count = 0;	$smiley_count++;	return ($smiley_count < 50) ? 1 : 0;}function fill_dateformat($user_dateformat){	global $config;	return ((empty($user_dateformat)) ? $config['default_dateformat'] : $user_dateformat);}?>
<?php/**** @package install* @version $Id$* @copyright (c) 2007 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @ignore*/if (!defined('IN_PHPBB')){	exit;}/*** A wrapper function for the normalizer which takes care of including the class if required and modifies the passed strings* to be in NFC (Normalization Form Composition).** @param	mixed	$strings	a string or an array of strings to normalize* @return	mixed				the normalized content, preserving array keys if array given.*/function utf8_new_normalize_nfc($strings){	if (empty($strings))	{		return $strings;	}	if (!is_array($strings))	{		utf_new_normalizer::nfc($strings);	}	else if (is_array($strings))	{		foreach ($strings as $key => $string)		{			if (is_array($string))			{				foreach ($string as $_key => $_string)				{					utf_new_normalizer::nfc($strings[$key][$_key]);				}			}			else			{				utf_new_normalizer::nfc($strings[$key]);			}		}	}	return $strings;}class utf_new_normalizer{	/**	* Validate, cleanup and normalize a string	*	* The ultimate convenience function! Clean up invalid UTF-8 sequences,	* and convert to Normal Form C, canonical composition.	*	* @param	string	&$str	The dirty string	* @return	string			The same string, all shiny and cleaned-up	*/	function cleanup(&$str)	{		// The string below is the list of all autorized characters, sorted by frequency in latin text		$pos = strspn($str, "\x20\x65\x69\x61\x73\x6E\x74\x72\x6F\x6C\x75\x64\x5D\x5B\x63\x6D\x70\x27\x0A\x67\x7C\x68\x76\x2E\x66\x62\x2C\x3A\x3D\x2D\x71\x31\x30\x43\x32\x2A\x79\x78\x29\x28\x4C\x39\x41\x53\x2F\x50\x22\x45\x6A\x4D\x49\x6B\x33\x3E\x35\x54\x3C\x44\x34\x7D\x42\x7B\x38\x46\x77\x52\x36\x37\x55\x47\x4E\x3B\x4A\x7A\x56\x23\x48\x4F\x57\x5F\x26\x21\x4B\x3F\x58\x51\x25\x59\x5C\x09\x5A\x2B\x7E\x5E\x24\x40\x60\x7F\x0D");		$len = strlen($str);		if ($pos == $len)		{			// ASCII strings with no special chars return immediately			return;		}		// Note: we do not check for $GLOBALS['utf_canonical_decomp']. It is assumed they are always loaded together		if (!isset($GLOBALS['utf_nfc_qc']))		{			global $phpbb_root_path, $phpEx;			include($phpbb_root_path . 'includes/utf/data/utf_nfc_qc.' . $phpEx);		}		if (!isset($GLOBALS['utf_canonical_decomp']))		{			global $phpbb_root_path, $phpEx;			include($phpbb_root_path . 'includes/utf/data/utf_canonical_decomp.' . $phpEx);		}		// Replace any byte in the range 0x00..0x1F, except for \r, \n and \t		// We replace those characters with a 0xFF byte, which is illegal in UTF-8 and will in turn be replaced with a UTF replacement char		$str = strtr(			$str,			"\x00\x01\x02\x03\x04\x05\x06\x07\x08\x0B\x0C\x0E\x0F\x10\x11\x12\x13\x14\x15\x16\x17\x18\x19\x1A\x1B\x1C\x1D\x1E\x1F",			"\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF"		);		$str = utf_new_normalizer::recompose($str, $pos, $len, $GLOBALS['utf_nfc_qc'], $GLOBALS['utf_canonical_decomp']);	}	/**	* Validate and normalize a UTF string to NFC	*	* @param	string	&$str	Unchecked UTF string	* @return	string			The string, validated and in normal form	*/	function nfc(&$str)	{		$pos = strspn($str, UTF8_ASCII_RANGE);		$len = strlen($str);		if ($pos == $len)		{			// ASCII strings return immediately			return;		}		if (!isset($GLOBALS['utf_nfc_qc']))		{			global $phpbb_root_path, $phpEx;			include($phpbb_root_path . 'includes/utf/data/utf_nfc_qc.' . $phpEx);		}		if (!isset($GLOBALS['utf_canonical_decomp']))		{			global $phpbb_root_path, $phpEx;			include($phpbb_root_path . 'includes/utf/data/utf_canonical_decomp.' . $phpEx);		}		$str = utf_new_normalizer::recompose($str, $pos, $len, $GLOBALS['utf_nfc_qc'], $GLOBALS['utf_canonical_decomp']);	}	/**	* Validate and normalize a UTF string to NFKC	*	* @param	string	&$str	Unchecked UTF string	* @return	string			The string, validated and in normal form	*/	function nfkc(&$str)	{		$pos = strspn($str, UTF8_ASCII_RANGE);		$len = strlen($str);		if ($pos == $len)		{			// ASCII strings return immediately			return;		}		if (!isset($GLOBALS['utf_nfkc_qc']))		{			global $phpbb_root_path, $phpEx;			include($phpbb_root_path . 'includes/utf/data/utf_nfkc_qc.' . $phpEx);		}		if (!isset($GLOBALS['utf_compatibility_decomp']))		{			global $phpbb_root_path, $phpEx;			include($phpbb_root_path . 'includes/utf/data/utf_compatibility_decomp.' . $phpEx);		}		$str = utf_new_normalizer::recompose($str, $pos, $len, $GLOBALS['utf_nfkc_qc'], $GLOBALS['utf_compatibility_decomp']);	}	/**	* Recompose a UTF string	*	* @param	string	$str			Unchecked UTF string	* @param	integer	$pos			Position of the first UTF char (in bytes)	* @param	integer	$len			Length of the string (in bytes)	* @param	array	&$qc			Quick-check array, passed by reference but never modified	* @param	array	&$decomp_map	Decomposition mapping, passed by reference but never modified	* @return	string					The string, validated and recomposed	*	* @access	private	*/	function recompose($str, $pos, $len, &$qc, &$decomp_map)	{		global $utf_canonical_comp;		// Load the canonical composition table		if (!isset($utf_canonical_comp))		{			global $phpbb_root_path, $phpEx;			include($phpbb_root_path . 'includes/utf/data/utf_canonical_comp.' . $phpEx);		}		return utf_normalizer::recompose($str, $pos, $len, $qc, $decomp_map);	}}?>
<?php/*** Adjust username_clean column.** You should make a backup from your users table in case something goes wrong*/die("Please read the first lines of this script for instructions on how to enable it");set_time_limit(0);define('IN_PHPBB', true);$phpbb_root_path = './../';$phpEx = substr(strrchr(__FILE__, '.'), 1);include($phpbb_root_path . 'common.'.$phpEx);// Start session management$user->session_begin();$auth->acl($user->data);$user->setup();$echos = 0;$sql = 'SELECT user_id, username	FROM ' . USERS_TABLE;$result = $db->sql_query($sql);while ($row = $db->sql_fetchrow($result)){	$sql = 'UPDATE ' . USERS_TABLE . "		SET username_clean = '" . $db->sql_escape(utf8_clean_string($row['username'])) . "'		WHERE user_id = " . $row['user_id'];	$db->sql_query($sql);	if ($echos > 200)	{		echo '<br />' . "\n";		$echos = 0;	}	echo '.';	$echos++;	flush();}$db->sql_freeresult($result);echo 'FINISHED';// Done$db->sql_close();?>
<?php/**** memberlist [English]** @package language* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** DO NOT CHANGE*/if (!defined('IN_PHPBB')){	exit;}if (empty($lang) || !is_array($lang)){	$lang = array();}// DEVELOPERS PLEASE NOTE//// All language files should use UTF-8 as their encoding and the files must not contain a BOM.//// Placeholders can now contain order information, e.g. instead of// 'Page %s of %s' you can (and should) write 'Page %1$s of %2$s', this allows// translators to re-order the output of data while ensuring it remains correct//// You do not need this where single placeholders are used, e.g. 'Message %d' is fine// equally where a string contains only two placeholders which are used to wrap text// in a url you again do not need to specify an order e.g., 'Click %sHERE%s' is fine$lang = array_merge($lang, array(	'ABOUT_USER'			=> 'Profile',	'ACTIVE_IN_FORUM'		=> 'Most active forum',	'ACTIVE_IN_TOPIC'		=> 'Most active topic',	'ADD_FOE'				=> 'Add foe',	'ADD_FRIEND'			=> 'Add friend',	'AFTER'					=> 'After',	'ALL'					=> 'All',	'BEFORE'				=> 'Before',	'CC_EMAIL'				=> 'Send a copy of this e-mail to yourself.',	'CONTACT_USER'			=> 'Contact',	'DEST_LANG'				=> 'Language',	'DEST_LANG_EXPLAIN'		=> 'Select an appropriate language (if available) for the recipient of this message.',	'EMAIL_BODY_EXPLAIN'	=> 'This message will be sent as plain text, do not include any HTML or BBCode. The return address for this message will be set to your e-mail address.',	'EMAIL_DISABLED'		=> 'Sorry but all e-mail related functions have been disabled.',	'EMAIL_SENT'			=> 'The e-mail has been sent.',	'EMAIL_TOPIC_EXPLAIN'	=> 'This message will be sent as plain text, do not include any HTML or BBCode. Please note that the topic information is already included in the message. The return address for this message will be set to your e-mail address.',	'EMPTY_ADDRESS_EMAIL'	=> 'You must provide a valid e-mail address for the recipient.',	'EMPTY_MESSAGE_EMAIL'	=> 'You must enter a message to be emailed.',	'EMPTY_MESSAGE_IM'		=> 'You must enter a message to be send.',	'EMPTY_NAME_EMAIL'		=> 'You must enter the real name of the recipient.',	'EMPTY_SUBJECT_EMAIL'	=> 'You must specify a subject for the e-mail.',	'EQUAL_TO'				=> 'Equal to',	'FIND_USERNAME_EXPLAIN'	=> 'Use this form to search for specific members. You do not need to fill out all fields. To match partial data use * as a wildcard. When entering dates use the format <kbd>YYYY-MM-DD</kbd>, e.g. <samp>2004-02-29</samp>. Use the mark checkboxes to select one or more usernames (several usernames may be accepted depending on the form itself) and click the Select Marked button to return to the previous form.',	'FLOOD_EMAIL_LIMIT'		=> 'You cannot send another e-mail at this time. Please try again later.',	'GROUP_LEADER'			=> 'Group leader',	'HIDE_MEMBER_SEARCH'	=> 'Hide member search',	'IM_ADD_CONTACT'		=> 'Add Contact',	'IM_AIM'				=> 'Please note that you need AOL Instant Messenger installed to use this.',	'IM_AIM_EXPRESS'		=> 'AIM Express',	'IM_DOWNLOAD_APP'		=> 'Download application',	'IM_ICQ'				=> 'Please note that users may have selected to not receive unsolicited instant messages.',	'IM_JABBER'				=> 'Please note that users may have selected to not receive unsolicited instant messages.',	'IM_JABBER_SUBJECT'		=> 'This is an automated message please do not reply! Message from user %1$s at %2$s.',	'IM_MESSAGE'			=> 'Your message',	'IM_MSNM'				=> 'Please note that you need Windows Messenger installed to use this.',	'IM_MSNM_BROWSER'		=> 'Your browser does not support this.',	'IM_MSNM_CONNECT'		=> 'MSNM is not connected.\nYou have to connect to MSNM to continue.',	'IM_NAME'				=> 'Your Name',	'IM_NO_DATA'			=> 'There is no suitable contact information for this user.',	'IM_NO_JABBER'			=> 'Sorry, direct messaging of Jabber users is not supported on this board. You will need a Jabber client installed on your system to contact the recipient above.',	'IM_RECIPIENT'			=> 'Recipient',	'IM_SEND'				=> 'Send message',	'IM_SEND_MESSAGE'		=> 'Send message',	'IM_SENT_JABBER'		=> 'Your message to %1$s has been sent successfully.',	'IM_USER'				=> 'Send an instant message',	'LAST_ACTIVE'				=> 'Last active',	'LESS_THAN'					=> 'Less than',	'LIST_USER'					=> '1 user',	'LIST_USERS'				=> '%d users',	'LOGIN_EXPLAIN_LEADERS'		=> 'The board requires you to be registered and logged in to view the team listing.',	'LOGIN_EXPLAIN_MEMBERLIST'	=> 'The board requires you to be registered and logged in to access the memberlist.',	'LOGIN_EXPLAIN_SEARCHUSER'	=> 'The board requires you to be registered and logged in to search users.',	'LOGIN_EXPLAIN_VIEWPROFILE'	=> 'The board requires you to be registered and logged in to view profiles.',	'MORE_THAN'				=> 'More than',	'NO_EMAIL'				=> 'You are not permitted to send e-mail to this user.',	'NO_VIEW_USERS'			=> 'You are not authorised to view the member list or profiles.',	'ORDER'					=> 'Order',	'OTHER'					=> 'Other',	'POST_IP'				=> 'Posted from IP/domain',	'RANK'					=> 'Rank',	'REAL_NAME'				=> 'Recipient name',	'RECIPIENT'				=> 'Recipient',	'REMOVE_FOE'			=> 'Remove foe',	'REMOVE_FRIEND'			=> 'Remove friend',	'SELECT_MARKED'			=> 'Select marked',	'SELECT_SORT_METHOD'	=> 'Select sort method',	'SEND_AIM_MESSAGE'		=> 'Send AIM message',	'SEND_ICQ_MESSAGE'		=> 'Send ICQ message',	'SEND_IM'				=> 'Instant messaging',	'SEND_JABBER_MESSAGE'	=> 'Send Jabber message',	'SEND_MESSAGE'			=> 'Message',	'SEND_MSNM_MESSAGE'		=> 'Send MSNM/WLM message',	'SEND_YIM_MESSAGE'		=> 'Send YIM message',	'SORT_EMAIL'			=> 'E-mail',	'SORT_LAST_ACTIVE'		=> 'Last active',	'SORT_POST_COUNT'		=> 'Post count',	'USERNAME_BEGINS_WITH'	=> 'Username begins with',	'USER_ADMIN'			=> 'Administer user',	'USER_BAN'				=> 'Banning',	'USER_FORUM'			=> 'User statistics',	'USER_LAST_REMINDED'	=> array(		0		=> 'No reminder sent at this time',		1		=> '%1$d reminder sent<br /> %2$s',	),	'USER_ONLINE'			=> 'Online',	'USER_PRESENCE'			=> 'Board presence',	'VIEWING_PROFILE'		=> 'Viewing profile - %s',	'VISITED'				=> 'Last visited',	'WWW'					=> 'Website',));?>
<?php/**** @package phpBB3* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @ignore*/if (!defined('IN_PHPBB')){	exit;}/*** Messenger* @package phpBB3*/class messenger{	var $vars, $msg, $extra_headers, $replyto, $from, $subject;	var $addresses = array();	var $mail_priority = MAIL_NORMAL_PRIORITY;	var $use_queue = true;	var $tpl_obj = NULL;	var $tpl_msg = array();	var $eol = "\n";	/**	* Constructor	*/	function messenger($use_queue = true)	{		global $config;		$this->use_queue = (!$config['email_package_size']) ? false : $use_queue;		$this->subject = '';		// Determine EOL character (\n for UNIX, \r\n for Windows and \r for Mac)		$this->eol = (!defined('PHP_EOL')) ? (($eol = strtolower(substr(PHP_OS, 0, 3))) == 'win') ? "\r\n" : (($eol == 'mac') ? "\r" : "\n") : PHP_EOL;		$this->eol = (!$this->eol) ? "\n" : $this->eol;	}	/**	* Resets all the data (address, template file, etc etc) to default	*/	function reset()	{		$this->addresses = $this->extra_headers = array();		$this->vars = $this->msg = $this->replyto = $this->from = '';		$this->mail_priority = MAIL_NORMAL_PRIORITY;	}	/**	* Sets an email address to send to	*/	function to($address, $realname = '')	{		global $config;		if (!trim($address))		{			return;		}		$pos = isset($this->addresses['to']) ? sizeof($this->addresses['to']) : 0;		$this->addresses['to'][$pos]['email'] = trim($address);		// If empty sendmail_path on windows, PHP changes the to line		if (!$config['smtp_delivery'] && DIRECTORY_SEPARATOR == '\\')		{			$this->addresses['to'][$pos]['name'] = '';		}		else		{			$this->addresses['to'][$pos]['name'] = trim($realname);		}	}	/**	* Sets an cc address to send to	*/	function cc($address, $realname = '')	{		if (!trim($address))		{			return;		}		$pos = isset($this->addresses['cc']) ? sizeof($this->addresses['cc']) : 0;		$this->addresses['cc'][$pos]['email'] = trim($address);		$this->addresses['cc'][$pos]['name'] = trim($realname);	}	/**	* Sets an bcc address to send to	*/	function bcc($address, $realname = '')	{		if (!trim($address))		{			return;		}		$pos = isset($this->addresses['bcc']) ? sizeof($this->addresses['bcc']) : 0;		$this->addresses['bcc'][$pos]['email'] = trim($address);		$this->addresses['bcc'][$pos]['name'] = trim($realname);	}	/**	* Sets a im contact to send to	*/	function im($address, $realname = '')	{		// IM-Addresses could be empty		if (!trim($address))		{			return;		}		$pos = isset($this->addresses['im']) ? sizeof($this->addresses['im']) : 0;		$this->addresses['im'][$pos]['uid'] = trim($address);		$this->addresses['im'][$pos]['name'] = trim($realname);	}	/**	* Set the reply to address	*/	function replyto($address)	{		$this->replyto = trim($address);	}	/**	* Set the from address	*/	function from($address)	{		$this->from = trim($address);	}	/**	* set up subject for mail	*/	function subject($subject = '')	{		$this->subject = trim($subject);	}	/**	* set up extra mail headers	*/	function headers($headers)	{		$this->extra_headers[] = trim($headers);	}	/**	* Adds X-AntiAbuse headers	*	* @param array $config		Configuration array	* @param user $user			A user object	*	* @return null	*/	function anti_abuse_headers($config, $user)	{		$this->headers('X-AntiAbuse: Board servername - ' . mail_encode($config['server_name']));		$this->headers('X-AntiAbuse: User_id - ' . $user->data['user_id']);		$this->headers('X-AntiAbuse: Username - ' . mail_encode($user->data['username']));		$this->headers('X-AntiAbuse: User IP - ' . $user->ip);	}	/**	* Set the email priority	*/	function set_mail_priority($priority = MAIL_NORMAL_PRIORITY)	{		$this->mail_priority = $priority;	}	/**	* Set email template to use	*/	function template($template_file, $template_lang = '', $template_path = '')	{		global $config, $phpbb_root_path, $user;		if (!trim($template_file))		{			trigger_error('No template file for emailing set.', E_USER_ERROR);		}		if (!trim($template_lang))		{			// fall back to board default language if the user's language is			// missing $template_file.  If this does not exist either,			// $tpl->set_custom_template will do a trigger_error			$template_lang = basename($config['default_lang']);		}		// tpl_msg now holds a template object we can use to parse the template file		if (!isset($this->tpl_msg[$template_lang . $template_file]))		{			$this->tpl_msg[$template_lang . $template_file] = new template();			$tpl = &$this->tpl_msg[$template_lang . $template_file];			$fallback_template_path = false;			if (!$template_path)			{				$template_path = (!empty($user->lang_path)) ? $user->lang_path : $phpbb_root_path . 'language/';				$template_path .= $template_lang . '/email';				// we can only specify default language fallback when the path is not a custom one for which we				// do not know the default language alternative				if ($template_lang !== basename($config['default_lang']))				{					$fallback_template_path = (!empty($user->lang_path)) ? $user->lang_path : $phpbb_root_path . 'language/';					$fallback_template_path .= basename($config['default_lang']) . '/email';				}			}			$tpl->set_custom_template($template_path, $template_lang . '_email', $fallback_template_path);			$tpl->set_filenames(array(				'body'		=> $template_file . '.txt',			));		}		$this->tpl_obj = &$this->tpl_msg[$template_lang . $template_file];		$this->vars = &$this->tpl_obj->_rootref;		$this->tpl_msg = '';		return true;	}	/**	* assign variables to email template	*/	function assign_vars($vars)	{		if (!is_object($this->tpl_obj))		{			return;		}		$this->tpl_obj->assign_vars($vars);	}	function assign_block_vars($blockname, $vars)	{		if (!is_object($this->tpl_obj))		{			return;		}		$this->tpl_obj->assign_block_vars($blockname, $vars);	}	/**	* Send the mail out to the recipients set previously in var $this->addresses	*/	function send($method = NOTIFY_EMAIL, $break = false)	{		global $config, $user;		// We add some standard variables we always use, no need to specify them always		if (!isset($this->vars['U_BOARD']))		{			$this->assign_vars(array(				'U_BOARD'	=> generate_board_url(),			));		}		if (!isset($this->vars['EMAIL_SIG']))		{			$this->assign_vars(array(				'EMAIL_SIG'	=> str_replace('<br />', "\n", "-- \n" . htmlspecialchars_decode($config['board_email_sig'])),			));		}		if (!isset($this->vars['SITENAME']))		{			$this->assign_vars(array(				'SITENAME'	=> htmlspecialchars_decode($config['sitename']),			));		}		// Parse message through template		$this->msg = trim($this->tpl_obj->assign_display('body'));		// Because we use \n for newlines in the body message we need to fix line encoding errors for those admins who uploaded email template files in the wrong encoding		$this->msg = str_replace("\r\n", "\n", $this->msg);		// We now try and pull a subject from the email body ... if it exists,		// do this here because the subject may contain a variable		$drop_header = '';		$match = array();		if (preg_match('#^(Subject:(.*?))$#m', $this->msg, $match))		{			$this->subject = (trim($match[2]) != '') ? trim($match[2]) : (($this->subject != '') ? $this->subject : $user->lang['NO_EMAIL_SUBJECT']);			$drop_header .= '[\r\n]*?' . preg_quote($match[1], '#');		}		else		{			$this->subject = (($this->subject != '') ? $this->subject : $user->lang['NO_EMAIL_SUBJECT']);		}		if ($drop_header)		{			$this->msg = trim(preg_replace('#' . $drop_header . '#s', '', $this->msg));		}		if ($break)		{			return true;		}		switch ($method)		{			case NOTIFY_EMAIL:				$result = $this->msg_email();			break;			case NOTIFY_IM:				$result = $this->msg_jabber();			break;			case NOTIFY_BOTH:				$result = $this->msg_email();				$this->msg_jabber();			break;		}		$this->reset();		return $result;	}	/**	* Add error message to log	*/	function error($type, $msg)	{		global $user, $phpEx, $phpbb_root_path, $config;		// Session doesn't exist, create it		if (!isset($user->session_id) || $user->session_id === '')		{			$user->session_begin();		}		$calling_page = (!empty($_SERVER['PHP_SELF'])) ? $_SERVER['PHP_SELF'] : $_ENV['PHP_SELF'];		$message = '';		switch ($type)		{			case 'EMAIL':				$message = '<strong>EMAIL/' . (($config['smtp_delivery']) ? 'SMTP' : 'PHP/' . $config['email_function_name'] . '()') . '</strong>';			break;			default:				$message = "<strong>$type</strong>";			break;		}		$message .= '<br /><em>' . htmlspecialchars($calling_page) . '</em><br /><br />' . $msg . '<br />';		add_log('critical', 'LOG_ERROR_' . $type, $message);	}	/**	* Save to queue	*/	function save_queue()	{		global $config;		if ($config['email_package_size'] && $this->use_queue && !empty($this->queue))		{			$this->queue->save();			return;		}	}	/**	* Return email header	*/	function build_header($to, $cc, $bcc)	{		global $config;		// We could use keys here, but we won't do this for 3.0.x to retain backwards compatibility		$headers = array();		$headers[] = 'From: ' . $this->from;		if ($cc)		{			$headers[] = 'Cc: ' . $cc;		}		if ($bcc)		{			$headers[] = 'Bcc: ' . $bcc;		}		$headers[] = 'Reply-To: ' . $this->replyto;		$headers[] = 'Return-Path: <' . $config['board_email'] . '>';		$headers[] = 'Sender: <' . $config['board_email'] . '>';		$headers[] = 'MIME-Version: 1.0';		$headers[] = 'Message-ID: <' . md5(unique_id(time())) . '@' . $config['server_name'] . '>';		$headers[] = 'Date: ' . date('r', time());		$headers[] = 'Content-Type: text/plain; charset=UTF-8'; // format=flowed		$headers[] = 'Content-Transfer-Encoding: 8bit'; // 7bit		$headers[] = 'X-Priority: ' . $this->mail_priority;		$headers[] = 'X-MSMail-Priority: ' . (($this->mail_priority == MAIL_LOW_PRIORITY) ? 'Low' : (($this->mail_priority == MAIL_NORMAL_PRIORITY) ? 'Normal' : 'High'));		$headers[] = 'X-Mailer: phpBB3';		$headers[] = 'X-MimeOLE: phpBB3';		$headers[] = 'X-phpBB-Origin: phpbb://' . str_replace(array('http://', 'https://'), array('', ''), generate_board_url());		if (sizeof($this->extra_headers))		{			$headers = array_merge($headers, $this->extra_headers);		}		return $headers;	}	/**	* Send out emails	*/	function msg_email()	{		global $config, $user;		if (empty($config['email_enable']))		{			return false;		}		// Addresses to send to?		if (empty($this->addresses) || (empty($this->addresses['to']) && empty($this->addresses['cc']) && empty($this->addresses['bcc'])))		{			// Send was successful. ;)			return true;		}		$use_queue = false;		if ($config['email_package_size'] && $this->use_queue)		{			if (empty($this->queue))			{				$this->queue = new queue();				$this->queue->init('email', $config['email_package_size']);			}			$use_queue = true;		}		if (empty($this->replyto))		{			$this->replyto = '<' . $config['board_contact'] . '>';		}		if (empty($this->from))		{			$this->from = '<' . $config['board_contact'] . '>';		}		$encode_eol = ($config['smtp_delivery']) ? "\r\n" : $this->eol;		// Build to, cc and bcc strings		$to = $cc = $bcc = '';		foreach ($this->addresses as $type => $address_ary)		{			if ($type == 'im')			{				continue;			}			foreach ($address_ary as $which_ary)			{				$$type .= (($$type != '') ? ', ' : '') . (($which_ary['name'] != '') ? mail_encode($which_ary['name'], $encode_eol) . ' <' . $which_ary['email'] . '>' : $which_ary['email']);			}		}		// Build header		$headers = $this->build_header($to, $cc, $bcc);		// Send message ...		if (!$use_queue)		{			$mail_to = ($to == '') ? 'undisclosed-recipients:;' : $to;			$err_msg = '';			if ($config['smtp_delivery'])			{				$result = smtpmail($this->addresses, mail_encode($this->subject), wordwrap(utf8_wordwrap($this->msg), 997, "\n", true), $err_msg, $headers);			}			else			{				$result = phpbb_mail($mail_to, $this->subject, $this->msg, $headers, $this->eol, $err_msg);			}			if (!$result)			{				$this->error('EMAIL', $err_msg);				return false;			}		}		else		{			$this->queue->put('email', array(				'to'			=> $to,				'addresses'		=> $this->addresses,				'subject'		=> $this->subject,				'msg'			=> $this->msg,				'headers'		=> $headers)			);		}		return true;	}	/**	* Send jabber message out	*/	function msg_jabber()	{		global $config, $db, $user, $phpbb_root_path, $phpEx;		if (empty($config['jab_enable']) || empty($config['jab_host']) || empty($config['jab_username']) || empty($config['jab_password']))		{			return false;		}		if (empty($this->addresses['im']))		{			// Send was successful. ;)			return true;		}		$use_queue = false;		if ($config['jab_package_size'] && $this->use_queue)		{			if (empty($this->queue))			{				$this->queue = new queue();				$this->queue->init('jabber', $config['jab_package_size']);			}			$use_queue = true;		}		$addresses = array();		foreach ($this->addresses['im'] as $type => $uid_ary)		{			$addresses[] = $uid_ary['uid'];		}		$addresses = array_unique($addresses);		if (!$use_queue)		{			include_once($phpbb_root_path . 'includes/functions_jabber.' . $phpEx);			$this->jabber = new jabber($config['jab_host'], $config['jab_port'], $config['jab_username'], $config['jab_password'], $config['jab_use_ssl']);			if (!$this->jabber->connect())			{				$this->error('JABBER', $user->lang['ERR_JAB_CONNECT'] . '<br />' . $this->jabber->get_log());				return false;			}			if (!$this->jabber->login())			{				$this->error('JABBER', $user->lang['ERR_JAB_AUTH'] . '<br />' . $this->jabber->get_log());				return false;			}			foreach ($addresses as $address)			{				$this->jabber->send_message($address, $this->msg, $this->subject);			}			$this->jabber->disconnect();		}		else		{			$this->queue->put('jabber', array(				'addresses'		=> $addresses,				'subject'		=> $this->subject,				'msg'			=> $this->msg)			);		}		unset($addresses);		return true;	}}/*** handling email and jabber queue* @package phpBB3*/class queue{	var $data = array();	var $queue_data = array();	var $package_size = 0;	var $cache_file = '';	var $eol = "\n";	/**	* constructor	*/	function queue()	{		global $phpEx, $phpbb_root_path;		$this->data = array();		$this->cache_file = "{$phpbb_root_path}cache/queue.$phpEx";		// Determine EOL character (\n for UNIX, \r\n for Windows and \r for Mac)		$this->eol = (!defined('PHP_EOL')) ? (($eol = strtolower(substr(PHP_OS, 0, 3))) == 'win') ? "\r\n" : (($eol == 'mac') ? "\r" : "\n") : PHP_EOL;		$this->eol = (!$this->eol) ? "\n" : $this->eol;	}	/**	* Init a queue object	*/	function init($object, $package_size)	{		$this->data[$object] = array();		$this->data[$object]['package_size'] = $package_size;		$this->data[$object]['data'] = array();	}	/**	* Put object in queue	*/	function put($object, $scope)	{		$this->data[$object]['data'][] = $scope;	}	/**	* Obtains exclusive lock on queue cache file.	* Returns resource representing the lock	*/	function lock()	{		// For systems that can't have two processes opening		// one file for writing simultaneously		if (file_exists($this->cache_file . '.lock'))		{			$mode = 'rb';		}		else		{			$mode = 'wb';		}		$lock_fp = @fopen($this->cache_file . '.lock', $mode);		if ($mode == 'wb')		{			if (!$lock_fp)			{				// Two processes may attempt to create lock file at the same time.				// Have the losing process try opening the lock file again for reading				// on the assumption that the winning process created it				$mode = 'rb';				$lock_fp = @fopen($this->cache_file . '.lock', $mode);			}			else			{				// Only need to set mode when the lock file is written				@chmod($this->cache_file . '.lock', 0666);			}		}		if ($lock_fp)		{			@flock($lock_fp, LOCK_EX);		}		return $lock_fp;	}	/**	* Releases lock on queue cache file, using resource obtained from lock()	*/	function unlock($lock_fp)	{		// lock() will return null if opening lock file, and thus locking, failed.		// Accept null values here so that client code does not need to check them		if ($lock_fp)		{			@flock($lock_fp, LOCK_UN);			fclose($lock_fp);		}	}	/**	* Process queue	* Using lock file	*/	function process()	{		global $db, $config, $phpEx, $phpbb_root_path, $user;		$lock_fp = $this->lock();		set_config('last_queue_run', time(), true);		if (!file_exists($this->cache_file) || filemtime($this->cache_file) > time() - $config['queue_interval'])		{			$this->unlock($lock_fp);			return;		}		include($this->cache_file);		foreach ($this->queue_data as $object => $data_ary)		{			@set_time_limit(0);			if (!isset($data_ary['package_size']))			{				$data_ary['package_size'] = 0;			}			$package_size = $data_ary['package_size'];			$num_items = (!$package_size || sizeof($data_ary['data']) < $package_size) ? sizeof($data_ary['data']) : $package_size;			/*			* This code is commented out because it causes problems on some web hosts.			* The core problem is rather restrictive email sending limits.			* This code is nly useful if you have no such restrictions from the			* web host and the package size setting is wrong.			// If the amount of emails to be sent is way more than package_size than we need to increase it to prevent backlogs...			if (sizeof($data_ary['data']) > $package_size * 2.5)			{				$num_items = sizeof($data_ary['data']);			}			*/			switch ($object)			{				case 'email':					// Delete the email queued objects if mailing is disabled					if (!$config['email_enable'])					{						unset($this->queue_data['email']);						continue 2;					}				break;				case 'jabber':					if (!$config['jab_enable'])					{						unset($this->queue_data['jabber']);						continue 2;					}					include_once($phpbb_root_path . 'includes/functions_jabber.' . $phpEx);					$this->jabber = new jabber($config['jab_host'], $config['jab_port'], $config['jab_username'], $config['jab_password'], $config['jab_use_ssl']);					if (!$this->jabber->connect())					{						messenger::error('JABBER', $user->lang['ERR_JAB_CONNECT']);						continue 2;					}					if (!$this->jabber->login())					{						messenger::error('JABBER', $user->lang['ERR_JAB_AUTH']);						continue 2;					}				break;				default:					$this->unlock($lock_fp);					return;			}			for ($i = 0; $i < $num_items; $i++)			{				// Make variables available...				extract(array_shift($this->queue_data[$object]['data']));				switch ($object)				{					case 'email':						$err_msg = '';						$to = (!$to) ? 'undisclosed-recipients:;' : $to;						if ($config['smtp_delivery'])						{							$result = smtpmail($addresses, mail_encode($subject), wordwrap(utf8_wordwrap($msg), 997, "\n", true), $err_msg, $headers);						}						else						{							$result = phpbb_mail($to, $subject, $msg, $headers, $this->eol, $err_msg);						}						if (!$result)						{							messenger::error('EMAIL', $err_msg);							continue 2;						}					break;					case 'jabber':						foreach ($addresses as $address)						{							if ($this->jabber->send_message($address, $msg, $subject) === false)							{								messenger::error('JABBER', $this->jabber->get_log());								continue 3;							}						}					break;				}			}			// No more data for this object? Unset it			if (!sizeof($this->queue_data[$object]['data']))			{				unset($this->queue_data[$object]);			}			// Post-object processing			switch ($object)			{				case 'jabber':					// Hang about a couple of secs to ensure the messages are					// handled, then disconnect					$this->jabber->disconnect();				break;			}		}		if (!sizeof($this->queue_data))		{			@unlink($this->cache_file);		}		else		{			if ($fp = @fopen($this->cache_file, 'wb'))			{				fwrite($fp, "<?php\nif (!defined('IN_PHPBB')) exit;\n\$this->queue_data = unserialize(" . var_export(serialize($this->queue_data), true) . ");\n\n?>");				fclose($fp);				phpbb_chmod($this->cache_file, CHMOD_READ | CHMOD_WRITE);			}		}		$this->unlock($lock_fp);	}	/**	* Save queue	*/	function save()	{		if (!sizeof($this->data))		{			return;		}		$lock_fp = $this->lock();		if (file_exists($this->cache_file))		{			include($this->cache_file);			foreach ($this->queue_data as $object => $data_ary)			{				if (isset($this->data[$object]) && sizeof($this->data[$object]))				{					$this->data[$object]['data'] = array_merge($data_ary['data'], $this->data[$object]['data']);				}				else				{					$this->data[$object]['data'] = $data_ary['data'];				}			}		}		if ($fp = @fopen($this->cache_file, 'w'))		{			fwrite($fp, "<?php\nif (!defined('IN_PHPBB')) exit;\n\$this->queue_data = unserialize(" . var_export(serialize($this->data), true) . ");\n\n?>");			fclose($fp);			phpbb_chmod($this->cache_file, CHMOD_READ | CHMOD_WRITE);		}		$this->unlock($lock_fp);	}}/*** Replacement or substitute for PHP's mail command*/function smtpmail($addresses, $subject, $message, &$err_msg, $headers = false){	global $config, $user;	// Fix any bare linefeeds in the message to make it RFC821 Compliant.	$message = preg_replace("#(?<!\r)\n#si", "\r\n", $message);	if ($headers !== false)	{		if (!is_array($headers))		{			// Make sure there are no bare linefeeds in the headers			$headers = preg_replace('#(?<!\r)\n#si', "\n", $headers);			$headers = explode("\n", $headers);		}		// Ok this is rather confusing all things considered,		// but we have to grab bcc and cc headers and treat them differently		// Something we really didn't take into consideration originally		$headers_used = array();		foreach ($headers as $header)		{			if (strpos(strtolower($header), 'cc:') === 0 || strpos(strtolower($header), 'bcc:') === 0)			{				continue;			}			$headers_used[] = trim($header);		}		$headers = chop(implode("\r\n", $headers_used));	}	if (trim($subject) == '')	{		$err_msg = (isset($user->lang['NO_EMAIL_SUBJECT'])) ? $user->lang['NO_EMAIL_SUBJECT'] : 'No email subject specified';		return false;	}	if (trim($message) == '')	{		$err_msg = (isset($user->lang['NO_EMAIL_MESSAGE'])) ? $user->lang['NO_EMAIL_MESSAGE'] : 'Email message was blank';		return false;	}	$mail_rcpt = $mail_to = $mail_cc = array();	// Build correct addresses for RCPT TO command and the client side display (TO, CC)	if (isset($addresses['to']) && sizeof($addresses['to']))	{		foreach ($addresses['to'] as $which_ary)		{			$mail_to[] = ($which_ary['name'] != '') ? mail_encode(trim($which_ary['name'])) . ' <' . trim($which_ary['email']) . '>' : '<' . trim($which_ary['email']) . '>';			$mail_rcpt['to'][] = '<' . trim($which_ary['email']) . '>';		}	}	if (isset($addresses['bcc']) && sizeof($addresses['bcc']))	{		foreach ($addresses['bcc'] as $which_ary)		{			$mail_rcpt['bcc'][] = '<' . trim($which_ary['email']) . '>';		}	}	if (isset($addresses['cc']) && sizeof($addresses['cc']))	{		foreach ($addresses['cc'] as $which_ary)		{			$mail_cc[] = ($which_ary['name'] != '') ? mail_encode(trim($which_ary['name'])) . ' <' . trim($which_ary['email']) . '>' : '<' . trim($which_ary['email']) . '>';			$mail_rcpt['cc'][] = '<' . trim($which_ary['email']) . '>';		}	}	$smtp = new smtp_class();	$errno = 0;	$errstr = '';	$smtp->add_backtrace('Connecting to ' . $config['smtp_host'] . ':' . $config['smtp_port']);	// Ok we have error checked as much as we can to this point let's get on it already.	if (!class_exists('phpbb_error_collector'))	{		global $phpbb_root_path, $phpEx;		include($phpbb_root_path . 'includes/error_collector.' . $phpEx);	}	$collector = new phpbb_error_collector;	$collector->install();	$smtp->socket = fsockopen($config['smtp_host'], $config['smtp_port'], $errno, $errstr, 20);	$collector->uninstall();	$error_contents = $collector->format_errors();	if (!$smtp->socket)	{		if ($errstr)		{			$errstr = utf8_convert_message($errstr);		}		$err_msg = (isset($user->lang['NO_CONNECT_TO_SMTP_HOST'])) ? sprintf($user->lang['NO_CONNECT_TO_SMTP_HOST'], $errno, $errstr) : "Could not connect to smtp host : $errno : $errstr";		$err_msg .= ($error_contents) ? '<br /><br />' . htmlspecialchars($error_contents) : '';		return false;	}	// Wait for reply	if ($err_msg = $smtp->server_parse('220', __LINE__))	{		$smtp->close_session($err_msg);		return false;	}	// Let me in. This function handles the complete authentication process	if ($err_msg = $smtp->log_into_server($config['smtp_host'], $config['smtp_username'], $config['smtp_password'], $config['smtp_auth_method']))	{		$smtp->close_session($err_msg);		return false;	}	// From this point onward most server response codes should be 250	// Specify who the mail is from....	$smtp->server_send('MAIL FROM:<' . $config['board_email'] . '>');	if ($err_msg = $smtp->server_parse('250', __LINE__))	{		$smtp->close_session($err_msg);		return false;	}	// Specify each user to send to and build to header.	$to_header = implode(', ', $mail_to);	$cc_header = implode(', ', $mail_cc);	// Now tell the MTA to send the Message to the following people... [TO, BCC, CC]	$rcpt = false;	foreach ($mail_rcpt as $type => $mail_to_addresses)	{		foreach ($mail_to_addresses as $mail_to_address)		{			// Add an additional bit of error checking to the To field.			if (preg_match('#[^ ]+\@[^ ]+#', $mail_to_address))			{				$smtp->server_send("RCPT TO:$mail_to_address");				if ($err_msg = $smtp->server_parse('250', __LINE__))				{					// We continue... if users are not resolved we do not care					if ($smtp->numeric_response_code != 550)					{						$smtp->close_session($err_msg);						return false;					}				}				else				{					$rcpt = true;				}			}		}	}	// We try to send messages even if a few people do not seem to have valid email addresses, but if no one has, we have to exit here.	if (!$rcpt)	{		$user->session_begin();		$err_msg .= '<br /><br />';		$err_msg .= (isset($user->lang['INVALID_EMAIL_LOG'])) ? sprintf($user->lang['INVALID_EMAIL_LOG'], htmlspecialchars($mail_to_address)) : '<strong>' . htmlspecialchars($mail_to_address) . '</strong> possibly an invalid email address?';		$smtp->close_session($err_msg);		return false;	}	// Ok now we tell the server we are ready to start sending data	$smtp->server_send('DATA');	// This is the last response code we look for until the end of the message.	if ($err_msg = $smtp->server_parse('354', __LINE__))	{		$smtp->close_session($err_msg);		return false;	}	// Send the Subject Line...	$smtp->server_send("Subject: $subject");	// Now the To Header.	$to_header = ($to_header == '') ? 'undisclosed-recipients:;' : $to_header;	$smtp->server_send("To: $to_header");	// Now the CC Header.	if ($cc_header != '')	{		$smtp->server_send("CC: $cc_header");	}	// Now any custom headers....	if ($headers !== false)	{		$smtp->server_send("$headers\r\n");	}	// Ok now we are ready for the message...	$smtp->server_send($message);	// Ok the all the ingredients are mixed in let's cook this puppy...	$smtp->server_send('.');	if ($err_msg = $smtp->server_parse('250', __LINE__))	{		$smtp->close_session($err_msg);		return false;	}	// Now tell the server we are done and close the socket...	$smtp->server_send('QUIT');	$smtp->close_session($err_msg);	return true;}/*** SMTP Class* Auth Mechanisms originally taken from the AUTH Modules found within the PHP Extension and Application Repository (PEAR)* See docs/AUTHORS for more details* @package phpBB3*/class smtp_class{	var $server_response = '';	var $socket = 0;	var $responses = array();	var $commands = array();	var $numeric_response_code = 0;	var $backtrace = false;	var $backtrace_log = array();	function smtp_class()	{		// Always create a backtrace for admins to identify SMTP problems		$this->backtrace = true;		$this->backtrace_log = array();	}	/**	* Add backtrace message for debugging	*/	function add_backtrace($message)	{		if ($this->backtrace)		{			$this->backtrace_log[] = utf8_htmlspecialchars($message);		}	}	/**	* Send command to smtp server	*/	function server_send($command, $private_info = false)	{		fputs($this->socket, $command . "\r\n");		(!$private_info) ? $this->add_backtrace("# $command") : $this->add_backtrace('# Omitting sensitive information');		// We could put additional code here	}	/**	* We use the line to give the support people an indication at which command the error occurred	*/	function server_parse($response, $line)	{		global $user;		$this->server_response = '';		$this->responses = array();		$this->numeric_response_code = 0;		while (substr($this->server_response, 3, 1) != ' ')		{			if (!($this->server_response = fgets($this->socket, 256)))			{				return (isset($user->lang['NO_EMAIL_RESPONSE_CODE'])) ? $user->lang['NO_EMAIL_RESPONSE_CODE'] : 'Could not get mail server response codes';			}			$this->responses[] = substr(rtrim($this->server_response), 4);			$this->numeric_response_code = (int) substr($this->server_response, 0, 3);			$this->add_backtrace("LINE: $line <- {$this->server_response}");		}		if (!(substr($this->server_response, 0, 3) == $response))		{			$this->numeric_response_code = (int) substr($this->server_response, 0, 3);			return (isset($user->lang['EMAIL_SMTP_ERROR_RESPONSE'])) ? sprintf($user->lang['EMAIL_SMTP_ERROR_RESPONSE'], $line, $this->server_response) : "Ran into problems sending Mail at <strong>Line $line</strong>. Response: $this->server_response";		}		return 0;	}	/**	* Close session	*/	function close_session(&$err_msg)	{		fclose($this->socket);		if ($this->backtrace)		{			$message = '<h1>Backtrace</h1><p>' . implode('<br />', $this->backtrace_log) . '</p>';			$err_msg .= $message;		}	}	/**	* Log into server and get possible auth codes if neccessary	*/	function log_into_server($hostname, $username, $password, $default_auth_method)	{		global $user;		$err_msg = '';		// Here we try to determine the *real* hostname (reverse DNS entry preferrably)		$local_host = $user->host;		if (function_exists('php_uname'))		{			$local_host = php_uname('n');			// Able to resolve name to IP			if (($addr = @gethostbyname($local_host)) !== $local_host)			{				// Able to resolve IP back to name				if (($name = @gethostbyaddr($addr)) !== $addr)				{					$local_host = $name;				}			}		}		// If we are authenticating through pop-before-smtp, we		// have to login ones before we get authenticated		// NOTE: on some configurations the time between an update of the auth database takes so		// long that the first email send does not work. This is not a biggie on a live board (only		// the install mail will most likely fail) - but on a dynamic ip connection this might produce		// severe problems and is not fixable!		if ($default_auth_method == 'POP-BEFORE-SMTP' && $username && $password)		{			global $config;			$errno = 0;			$errstr = '';			$this->server_send("QUIT");			fclose($this->socket);			$result = $this->pop_before_smtp($hostname, $username, $password);			$username = $password = $default_auth_method = '';			// We need to close the previous session, else the server is not			// able to get our ip for matching...			if (!$this->socket = @fsockopen($config['smtp_host'], $config['smtp_port'], $errno, $errstr, 10))			{				if ($errstr)				{					$errstr = utf8_convert_message($errstr);				}				$err_msg = (isset($user->lang['NO_CONNECT_TO_SMTP_HOST'])) ? sprintf($user->lang['NO_CONNECT_TO_SMTP_HOST'], $errno, $errstr) : "Could not connect to smtp host : $errno : $errstr";				return $err_msg;			}			// Wait for reply			if ($err_msg = $this->server_parse('220', __LINE__))			{				$this->close_session($err_msg);				return $err_msg;			}		}		// Try EHLO first		$this->server_send("EHLO {$local_host}");		if ($err_msg = $this->server_parse('250', __LINE__))		{			// a 503 response code means that we're already authenticated			if ($this->numeric_response_code == 503)			{				return false;			}			// If EHLO fails, we try HELO			$this->server_send("HELO {$local_host}");			if ($err_msg = $this->server_parse('250', __LINE__))			{				return ($this->numeric_response_code == 503) ? false : $err_msg;			}		}		foreach ($this->responses as $response)		{			$response = explode(' ', $response);			$response_code = $response[0];			unset($response[0]);			$this->commands[$response_code] = implode(' ', $response);		}		// If we are not authenticated yet, something might be wrong if no username and passwd passed		if (!$username || !$password)		{			return false;		}		if (!isset($this->commands['AUTH']))		{			return (isset($user->lang['SMTP_NO_AUTH_SUPPORT'])) ? $user->lang['SMTP_NO_AUTH_SUPPORT'] : 'SMTP server does not support authentication';		}		// Get best authentication method		$available_methods = explode(' ', $this->commands['AUTH']);		// Define the auth ordering if the default auth method was not found		$auth_methods = array('PLAIN', 'LOGIN', 'CRAM-MD5', 'DIGEST-MD5');		$method = '';		if (in_array($default_auth_method, $available_methods))		{			$method = $default_auth_method;		}		else		{			foreach ($auth_methods as $_method)			{				if (in_array($_method, $available_methods))				{					$method = $_method;					break;				}			}		}		if (!$method)		{			return (isset($user->lang['NO_SUPPORTED_AUTH_METHODS'])) ? $user->lang['NO_SUPPORTED_AUTH_METHODS'] : 'No supported authentication methods';		}		$method = strtolower(str_replace('-', '_', $method));		return $this->$method($username, $password);	}	/**	* Pop before smtp authentication	*/	function pop_before_smtp($hostname, $username, $password)	{		global $user;		if (!$this->socket = @fsockopen($hostname, 110, $errno, $errstr, 10))		{			if ($errstr)			{				$errstr = utf8_convert_message($errstr);			}			return (isset($user->lang['NO_CONNECT_TO_SMTP_HOST'])) ? sprintf($user->lang['NO_CONNECT_TO_SMTP_HOST'], $errno, $errstr) : "Could not connect to smtp host : $errno : $errstr";		}		$this->server_send("USER $username", true);		if ($err_msg = $this->server_parse('+OK', __LINE__))		{			return $err_msg;		}		$this->server_send("PASS $password", true);		if ($err_msg = $this->server_parse('+OK', __LINE__))		{			return $err_msg;		}		$this->server_send('QUIT');		fclose($this->socket);		return false;	}	/**	* Plain authentication method	*/	function plain($username, $password)	{		$this->server_send('AUTH PLAIN');		if ($err_msg = $this->server_parse('334', __LINE__))		{			return ($this->numeric_response_code == 503) ? false : $err_msg;		}		$base64_method_plain = base64_encode("\0" . $username . "\0" . $password);		$this->server_send($base64_method_plain, true);		if ($err_msg = $this->server_parse('235', __LINE__))		{			return $err_msg;		}		return false;	}	/**	* Login authentication method	*/	function login($username, $password)	{		$this->server_send('AUTH LOGIN');		if ($err_msg = $this->server_parse('334', __LINE__))		{			return ($this->numeric_response_code == 503) ? false : $err_msg;		}		$this->server_send(base64_encode($username), true);		if ($err_msg = $this->server_parse('334', __LINE__))		{			return $err_msg;		}		$this->server_send(base64_encode($password), true);		if ($err_msg = $this->server_parse('235', __LINE__))		{			return $err_msg;		}		return false;	}	/**	* cram_md5 authentication method	*/	function cram_md5($username, $password)	{		$this->server_send('AUTH CRAM-MD5');		if ($err_msg = $this->server_parse('334', __LINE__))		{			return ($this->numeric_response_code == 503) ? false : $err_msg;		}		$md5_challenge = base64_decode($this->responses[0]);		$password = (strlen($password) > 64) ? pack('H32', md5($password)) : ((strlen($password) < 64) ? str_pad($password, 64, chr(0)) : $password);		$md5_digest = md5((substr($password, 0, 64) ^ str_repeat(chr(0x5C), 64)) . (pack('H32', md5((substr($password, 0, 64) ^ str_repeat(chr(0x36), 64)) . $md5_challenge))));		$base64_method_cram_md5 = base64_encode($username . ' ' . $md5_digest);		$this->server_send($base64_method_cram_md5, true);		if ($err_msg = $this->server_parse('235', __LINE__))		{			return $err_msg;		}		return false;	}	/**	* digest_md5 authentication method	* A real pain in the ***	*/	function digest_md5($username, $password)	{		global $config, $user;		$this->server_send('AUTH DIGEST-MD5');		if ($err_msg = $this->server_parse('334', __LINE__))		{			return ($this->numeric_response_code == 503) ? false : $err_msg;		}		$md5_challenge = base64_decode($this->responses[0]);		// Parse the md5 challenge - from AUTH_SASL (PEAR)		$tokens = array();		while (preg_match('/^([a-z-]+)=("[^"]+(?<!\\\)"|[^,]+)/i', $md5_challenge, $matches))		{			// Ignore these as per rfc2831			if ($matches[1] == 'opaque' || $matches[1] == 'domain')			{				$md5_challenge = substr($md5_challenge, strlen($matches[0]) + 1);				continue;			}			// Allowed multiple "realm" and "auth-param"			if (!empty($tokens[$matches[1]]) && ($matches[1] == 'realm' || $matches[1] == 'auth-param'))			{				if (is_array($tokens[$matches[1]]))				{					$tokens[$matches[1]][] = preg_replace('/^"(.*)"$/', '\\1', $matches[2]);				}				else				{					$tokens[$matches[1]] = array($tokens[$matches[1]], preg_replace('/^"(.*)"$/', '\\1', $matches[2]));				}			}			else if (!empty($tokens[$matches[1]])) // Any other multiple instance = failure			{				$tokens = array();				break;			}			else			{				$tokens[$matches[1]] = preg_replace('/^"(.*)"$/', '\\1', $matches[2]);			}			// Remove the just parsed directive from the challenge			$md5_challenge = substr($md5_challenge, strlen($matches[0]) + 1);		}		// Realm		if (empty($tokens['realm']))		{			$tokens['realm'] = (function_exists('php_uname')) ? php_uname('n') : $user->host;		}		// Maxbuf		if (empty($tokens['maxbuf']))		{			$tokens['maxbuf'] = 65536;		}		// Required: nonce, algorithm		if (empty($tokens['nonce']) || empty($tokens['algorithm']))		{			$tokens = array();		}		$md5_challenge = $tokens;		if (!empty($md5_challenge))		{			$str = '';			for ($i = 0; $i < 32; $i++)			{				$str .= chr(mt_rand(0, 255));			}			$cnonce = base64_encode($str);			$digest_uri = 'smtp/' . $config['smtp_host'];			$auth_1 = sprintf('%s:%s:%s', pack('H32', md5(sprintf('%s:%s:%s', $username, $md5_challenge['realm'], $password))), $md5_challenge['nonce'], $cnonce);			$auth_2 = 'AUTHENTICATE:' . $digest_uri;			$response_value = md5(sprintf('%s:%s:00000001:%s:auth:%s', md5($auth_1), $md5_challenge['nonce'], $cnonce, md5($auth_2)));			$input_string = sprintf('username="%s",realm="%s",nonce="%s",cnonce="%s",nc="00000001",qop=auth,digest-uri="%s",response=%s,%d', $username, $md5_challenge['realm'], $md5_challenge['nonce'], $cnonce, $digest_uri, $response_value, $md5_challenge['maxbuf']);		}		else		{			return (isset($user->lang['INVALID_DIGEST_CHALLENGE'])) ? $user->lang['INVALID_DIGEST_CHALLENGE'] : 'Invalid digest challenge';		}		$base64_method_digest_md5 = base64_encode($input_string);		$this->server_send($base64_method_digest_md5, true);		if ($err_msg = $this->server_parse('334', __LINE__))		{			return $err_msg;		}		$this->server_send(' ');		if ($err_msg = $this->server_parse('235', __LINE__))		{			return $err_msg;		}		return false;	}}/*** Encodes the given string for proper display in UTF-8.** This version is using base64 encoded data. The downside of this* is if the mail client does not understand this encoding the user* is basically doomed with an unreadable subject.** Please note that this version fully supports RFC 2045 section 6.8.** @param string $eol End of line we are using (optional to be backwards compatible)*/function mail_encode($str, $eol = "\r\n"){	// define start delimimter, end delimiter and spacer	$start = "=?UTF-8?B?";	$end = "?=";	$delimiter = "$eol ";	// Maximum length is 75. $split_length *must* be a multiple of 4, but <= 75 - strlen($start . $delimiter . $end)!!!	$split_length = 60;	$encoded_str = base64_encode($str);	// If encoded string meets the limits, we just return with the correct data.	if (strlen($encoded_str) <= $split_length)	{		return $start . $encoded_str . $end;	}	// If there is only ASCII data, we just return what we want, correctly splitting the lines.	if (strlen($str) === utf8_strlen($str))	{		return $start . implode($end . $delimiter . $start, str_split($encoded_str, $split_length)) . $end;	}	// UTF-8 data, compose encoded lines	$array = utf8_str_split($str);	$str = '';	while (sizeof($array))	{		$text = '';		while (sizeof($array) && intval((strlen($text . $array[0]) + 2) / 3) << 2 <= $split_length)		{			$text .= array_shift($array);		}		$str .= $start . base64_encode($text) . $end . $delimiter;	}	return substr($str, 0, -strlen($delimiter));}/*** Wrapper for sending out emails with the PHP's mail function*/function phpbb_mail($to, $subject, $msg, $headers, $eol, &$err_msg){	global $config, $phpbb_root_path, $phpEx;	// We use the EOL character for the OS here because the PHP mail function does not correctly transform line endings. On Windows SMTP is used (SMTP is \r\n), on UNIX a command is used...	// Reference: http://bugs.php.net/bug.php?id=15841	$headers = implode($eol, $headers);	if (!class_exists('phpbb_error_collector'))	{		include($phpbb_root_path . 'includes/error_collector.' . $phpEx);	}	$collector = new phpbb_error_collector;	$collector->install();	// On some PHP Versions mail() *may* fail if there are newlines within the subject.	// Newlines are used as a delimiter for lines in mail_encode() according to RFC 2045 section 6.8.	// Because PHP can't decide what is wanted we revert back to the non-RFC-compliant way of separating by one space (Use '' as parameter to mail_encode() results in SPACE used)	$result = $config['email_function_name']($to, mail_encode($subject, ''), wordwrap(utf8_wordwrap($msg), 997, "\n", true), $headers);	$collector->uninstall();	$err_msg = $collector->format_errors();	return $result;}?>
<?php/**** @package phpBB3* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @ignore*/if (!defined('IN_PHPBB')){	exit;}/*** Transfer class, wrapper for ftp/sftp/ssh* @package phpBB3*/class transfer{	var $connection;	var $host;	var $port;	var $username;	var $password;	var $timeout;	var $root_path;	var $tmp_path;	var $file_perms;	var $dir_perms;	/**	* Constructor - init some basic values	*/	function transfer()	{		global $phpbb_root_path;		$this->file_perms	= 0644;		$this->dir_perms	= 0777;		// We use the store directory as temporary path to circumvent open basedir restrictions		$this->tmp_path = $phpbb_root_path . 'store/';	}	/**	* Write file to location	*/	function write_file($destination_file = '', $contents = '')	{		global $phpbb_root_path;		$destination_file = $this->root_path . str_replace($phpbb_root_path, '', $destination_file);		// need to create a temp file and then move that temp file.		// ftp functions can only move files around and can't create.		// This means that the users will need to have access to write		// temporary files or have write access on a folder within phpBB		// like the cache folder. If the user can't do either, then		// he/she needs to use the fsock ftp method		$temp_name = tempnam($this->tmp_path, 'transfer_');		@unlink($temp_name);		$fp = @fopen($temp_name, 'w');		if (!$fp)		{			trigger_error('Unable to create temporary file ' . $temp_name, E_USER_ERROR);		}		@fwrite($fp, $contents);		@fclose($fp);		$result = $this->overwrite_file($temp_name, $destination_file);		// remove temporary file now		@unlink($temp_name);		return $result;	}	/**	* Moving file into location. If the destination file already exists it gets overwritten	*/	function overwrite_file($source_file, $destination_file)	{		/**		* @todo generally think about overwriting files in another way, by creating a temporary file and then renaming it		* @todo check for the destination file existance too		*/		$this->_delete($destination_file);		$result = $this->_put($source_file, $destination_file);		$this->_chmod($destination_file, $this->file_perms);		return $result;	}	/**	* Create directory structure	*/	function make_dir($dir)	{		global $phpbb_root_path;		$dir = str_replace($phpbb_root_path, '', $dir);		$dir = explode('/', $dir);		$dirs = '';		for ($i = 0, $total = sizeof($dir); $i < $total; $i++)		{			$result = true;			if (strpos($dir[$i], '.') === 0)			{				continue;			}			$cur_dir = $dir[$i] . '/';			if (!file_exists($phpbb_root_path . $dirs . $cur_dir))			{				// create the directory				$result = $this->_mkdir($dir[$i]);				$this->_chmod($dir[$i], $this->dir_perms);			}			$this->_chdir($this->root_path . $dirs . $dir[$i]);			$dirs .= $cur_dir;		}		$this->_chdir($this->root_path);		/**		* @todo stack result into array to make sure every path creation has been taken care of		*/		return $result;	}	/**	* Copy file from source location to destination location	*/	function copy_file($from_loc, $to_loc)	{		global $phpbb_root_path;		$from_loc = ((strpos($from_loc, $phpbb_root_path) !== 0) ? $phpbb_root_path : '') . $from_loc;		$to_loc = $this->root_path . str_replace($phpbb_root_path, '', $to_loc);		if (!file_exists($from_loc))		{			return false;		}		$result = $this->overwrite_file($from_loc, $to_loc);		return $result;	}	/**	* Remove file	*/	function delete_file($file)	{		global $phpbb_root_path;		$file = $this->root_path . str_replace($phpbb_root_path, '', $file);		return $this->_delete($file);	}	/**	* Remove directory	* @todo remove child directories?	*/	function remove_dir($dir)	{		global $phpbb_root_path;		$dir = $this->root_path . str_replace($phpbb_root_path, '', $dir);		return $this->_rmdir($dir);	}	/**	* Rename a file or folder	*/	function rename($old_handle, $new_handle)	{		global $phpbb_root_path;		$old_handle = $this->root_path . str_replace($phpbb_root_path, '', $old_handle);		return $this->_rename($old_handle, $new_handle);	}	/**	* Check if a specified file exist...	*/	function file_exists($directory, $filename)	{		global $phpbb_root_path;		$directory = $this->root_path . str_replace($phpbb_root_path, '', $directory);		$this->_chdir($directory);		$result = $this->_ls();		if ($result !== false && is_array($result))		{			return (in_array($filename, $result)) ? true : false;		}		return false;	}	/**	* Open session	*/	function open_session()	{		return $this->_init();	}	/**	* Close current session	*/	function close_session()	{		return $this->_close();	}	/**	* Determine methods able to be used	*/	function methods()	{		$methods = array();		$disabled_functions = explode(',', @ini_get('disable_functions'));		if (@extension_loaded('ftp'))		{			$methods[] = 'ftp';		}		if (!in_array('fsockopen', $disabled_functions))		{			$methods[] = 'ftp_fsock';		}		return $methods;	}}/*** FTP transfer class* @package phpBB3*/class ftp extends transfer{	/**	* Standard parameters for FTP session	*/	function ftp($host, $username, $password, $root_path, $port = 21, $timeout = 10)	{		$this->host			= $host;		$this->port			= $port;		$this->username		= $username;		$this->password		= $password;		$this->timeout		= $timeout;		// Make sure $this->root_path is layed out the same way as the $user->page['root_script_path'] value (/ at the end)		$this->root_path	= str_replace('\\', '/', $this->root_path);		if (!empty($root_path))		{			$this->root_path = (($root_path[0] != '/' ) ? '/' : '') . $root_path . ((substr($root_path, -1, 1) == '/') ? '' : '/');		}		// Init some needed values		transfer::transfer();		return;	}	/**	* Requests data	*/	function data()	{		global $user;		return array(			'host'		=> 'localhost',			'username'	=> 'anonymous',			'password'	=> '',			'root_path'	=> $user->page['root_script_path'],			'port'		=> 21,			'timeout'	=> 10		);	}	/**	* Init FTP Session	* @access private	*/	function _init()	{		// connect to the server		$this->connection = @ftp_connect($this->host, $this->port, $this->timeout);		if (!$this->connection)		{			return 'ERR_CONNECTING_SERVER';		}		// login to the server		if (!@ftp_login($this->connection, $this->username, $this->password))		{			return 'ERR_UNABLE_TO_LOGIN';		}		// attempt to turn pasv mode on		@ftp_pasv($this->connection, true);		// change to the root directory		if (!$this->_chdir($this->root_path))		{			return 'ERR_CHANGING_DIRECTORY';		}		return true;	}	/**	* Create Directory (MKDIR)	* @access private	*/	function _mkdir($dir)	{		return @ftp_mkdir($this->connection, $dir);	}	/**	* Remove directory (RMDIR)	* @access private	*/	function _rmdir($dir)	{		return @ftp_rmdir($this->connection, $dir);	}	/**	* Rename file	* @access private	*/	function _rename($old_handle, $new_handle)	{		return @ftp_rename($this->connection, $old_handle, $new_handle);	}	/**	* Change current working directory (CHDIR)	* @access private	*/	function _chdir($dir = '')	{		if ($dir && $dir !== '/')		{			if (substr($dir, -1, 1) == '/')			{				$dir = substr($dir, 0, -1);			}		}		return @ftp_chdir($this->connection, $dir);	}	/**	* change file permissions (CHMOD)	* @access private	*/	function _chmod($file, $perms)	{		if (function_exists('ftp_chmod'))		{			$err = @ftp_chmod($this->connection, $perms, $file);		}		else		{			// Unfortunatly CHMOD is not expecting an octal value...			// We need to transform the integer (which was an octal) to an octal representation (to get the int) and then pass as is. ;)			$chmod_cmd = 'CHMOD ' . base_convert($perms, 10, 8) . ' ' . $file;			$err = $this->_site($chmod_cmd);		}		return $err;	}	/**	* Upload file to location (PUT)	* @access private	*/	function _put($from_file, $to_file)	{		// get the file extension		$file_extension = strtolower(substr(strrchr($to_file, '.'), 1));		// We only use the BINARY file mode to cicumvent rewrite actions from ftp server (mostly linefeeds being replaced)		$mode = FTP_BINARY;		$to_dir = dirname($to_file);		$to_file = basename($to_file);		$this->_chdir($to_dir);		$result = @ftp_put($this->connection, $to_file, $from_file, $mode);		$this->_chdir($this->root_path);		return $result;	}	/**	* Delete file (DELETE)	* @access private	*/	function _delete($file)	{		return @ftp_delete($this->connection, $file);	}	/**	* Close ftp session (CLOSE)	* @access private	*/	function _close()	{		if (!$this->connection)		{			return false;		}		return @ftp_quit($this->connection);	}	/**	* Return current working directory (CWD)	* At the moment not used by parent class	* @access private	*/	function _cwd()	{		return @ftp_pwd($this->connection);	}	/**	* Return list of files in a given directory (LS)	* @access private	*/	function _ls($dir = './')	{		$list = @ftp_nlist($this->connection, $dir);		// See bug #46295 - Some FTP daemons don't like './'		if ($dir === './')		{			// Let's try some alternatives			$list = (empty($list)) ? @ftp_nlist($this->connection, '.') : $list;			$list = (empty($list)) ? @ftp_nlist($this->connection, '') : $list;		}		// Return on error		if ($list === false)		{			return false;		}		// Remove path if prepended		foreach ($list as $key => $item)		{			// Use same separator for item and dir			$item = str_replace('\\', '/', $item);			$dir = str_replace('\\', '/', $dir);			if (!empty($dir) && strpos($item, $dir) === 0)			{				$item = substr($item, strlen($dir));			}			$list[$key] = $item;		}		return $list;	}	/**	* FTP SITE command (ftp-only function)	* @access private	*/	function _site($command)	{		return @ftp_site($this->connection, $command);	}}/*** FTP fsock transfer class** @author wGEric* @package phpBB3*/class ftp_fsock extends transfer{	var $data_connection;	/**	* Standard parameters for FTP session	*/	function ftp_fsock($host, $username, $password, $root_path, $port = 21, $timeout = 10)	{		$this->host			= $host;		$this->port			= $port;		$this->username		= $username;		$this->password		= $password;		$this->timeout		= $timeout;		// Make sure $this->root_path is layed out the same way as the $user->page['root_script_path'] value (/ at the end)		$this->root_path	= str_replace('\\', '/', $this->root_path);		if (!empty($root_path))		{			$this->root_path = (($root_path[0] != '/' ) ? '/' : '') . $root_path . ((substr($root_path, -1, 1) == '/') ? '' : '/');		}		// Init some needed values		transfer::transfer();		return;	}	/**	* Requests data	*/	function data()	{		global $user;		return array(			'host'		=> 'localhost',			'username'	=> 'anonymous',			'password'	=> '',			'root_path'	=> $user->page['root_script_path'],			'port'		=> 21,			'timeout'	=> 10		);	}	/**	* Init FTP Session	* @access private	*/	function _init()	{		$errno = 0;		$errstr = '';		// connect to the server		$this->connection = @fsockopen($this->host, $this->port, $errno, $errstr, $this->timeout);		if (!$this->connection || !$this->_check_command())		{			return 'ERR_CONNECTING_SERVER';		}		@stream_set_timeout($this->connection, $this->timeout);		// login		if (!$this->_send_command('USER', $this->username))		{			return 'ERR_UNABLE_TO_LOGIN';		}		if (!$this->_send_command('PASS', $this->password))		{			return 'ERR_UNABLE_TO_LOGIN';		}		// change to the root directory		if (!$this->_chdir($this->root_path))		{			return 'ERR_CHANGING_DIRECTORY';		}		return true;	}	/**	* Create Directory (MKDIR)	* @access private	*/	function _mkdir($dir)	{		return $this->_send_command('MKD', $dir);	}	/**	* Remove directory (RMDIR)	* @access private	*/	function _rmdir($dir)	{		return $this->_send_command('RMD', $dir);	}	/**	* Rename File	* @access private	*/	function _rename($old_handle, $new_handle)	{		$this->_send_command('RNFR', $old_handle);		return $this->_send_command('RNTO', $new_handle);	}	/**	* Change current working directory (CHDIR)	* @access private	*/	function _chdir($dir = '')	{		if ($dir && $dir !== '/')		{			if (substr($dir, -1, 1) == '/')			{				$dir = substr($dir, 0, -1);			}		}		return $this->_send_command('CWD', $dir);	}	/**	* change file permissions (CHMOD)	* @access private	*/	function _chmod($file, $perms)	{		// Unfortunatly CHMOD is not expecting an octal value...		// We need to transform the integer (which was an octal) to an octal representation (to get the int) and then pass as is. ;)		return $this->_send_command('SITE CHMOD', base_convert($perms, 10, 8) . ' ' . $file);	}	/**	* Upload file to location (PUT)	* @access private	*/	function _put($from_file, $to_file)	{		// We only use the BINARY file mode to cicumvent rewrite actions from ftp server (mostly linefeeds being replaced)		// 'I' == BINARY		// 'A' == ASCII		if (!$this->_send_command('TYPE', 'I'))		{			return false;		}		// open the connection to send file over		if (!$this->_open_data_connection())		{			return false;		}		$this->_send_command('STOR', $to_file, false);		// send the file		$fp = @fopen($from_file, 'rb');		while (!@feof($fp))		{			@fwrite($this->data_connection, @fread($fp, 4096));		}		@fclose($fp);		// close connection		$this->_close_data_connection();		return $this->_check_command();	}	/**	* Delete file (DELETE)	* @access private	*/	function _delete($file)	{		return $this->_send_command('DELE', $file);	}	/**	* Close ftp session (CLOSE)	* @access private	*/	function _close()	{		if (!$this->connection)		{			return false;		}		return $this->_send_command('QUIT');	}	/**	* Return current working directory (CWD)	* At the moment not used by parent class	* @access private	*/	function _cwd()	{		$this->_send_command('PWD', '', false);		return preg_replace('#^[0-9]{3} "(.+)" .+\r\n#', '\\1', $this->_check_command(true));	}	/**	* Return list of files in a given directory (LS)	* @access private	*/	function _ls($dir = './')	{		if (!$this->_open_data_connection())		{			return false;		}		$this->_send_command('NLST', $dir);		$list = array();		while (!@feof($this->data_connection))		{			$filename = preg_replace('#[\r\n]#', '', @fgets($this->data_connection, 512));			if ($filename !== '')			{				$list[] = $filename;			}		}		$this->_close_data_connection();		// Clear buffer		$this->_check_command();		// See bug #46295 - Some FTP daemons don't like './'		if ($dir === './' && empty($list))		{			// Let's try some alternatives			$list = $this->_ls('.');			if (empty($list))			{				$list = $this->_ls('');			}			return $list;		}		// Remove path if prepended		foreach ($list as $key => $item)		{			// Use same separator for item and dir			$item = str_replace('\\', '/', $item);			$dir = str_replace('\\', '/', $dir);			if (!empty($dir) && strpos($item, $dir) === 0)			{				$item = substr($item, strlen($dir));			}			$list[$key] = $item;		}		return $list;	}	/**	* Send a command to server (FTP fsock only function)	* @access private	*/	function _send_command($command, $args = '', $check = true)	{		if (!empty($args))		{			$command = "$command $args";		}		fwrite($this->connection, $command . "\r\n");		if ($check === true && !$this->_check_command())		{			return false;		}		return true;	}	/**	* Opens a connection to send data (FTP fosck only function)	* @access private	*/	function _open_data_connection()	{		// Try to find out whether we have a IPv4 or IPv6 (control) connection		if (function_exists('stream_socket_get_name'))		{			$socket_name = stream_socket_get_name($this->connection, true);			$server_ip = substr($socket_name, 0, strrpos($socket_name, ':'));		}		if (!isset($server_ip) || preg_match(get_preg_expression('ipv4'), $server_ip))		{			// Passive mode			$this->_send_command('PASV', '', false);			if (!$ip_port = $this->_check_command(true))			{				return false;			}			// open the connection to start sending the file			if (!preg_match('#[0-9]{1,3},[0-9]{1,3},[0-9]{1,3},[0-9]{1,3},[0-9]+,[0-9]+#', $ip_port, $temp))			{				// bad ip and port				return false;			}			$temp = explode(',', $temp[0]);			$server_ip = $temp[0] . '.' . $temp[1] . '.' . $temp[2] . '.' . $temp[3];			$server_port = $temp[4] * 256 + $temp[5];		}		else		{			// Extended Passive Mode - RFC2428			$this->_send_command('EPSV', '', false);			if (!$epsv_response = $this->_check_command(true))			{				return false;			}			// Response looks like "229 Entering Extended Passive Mode (|||12345|)"			// where 12345 is the tcp port for the data connection			if (!preg_match('#\(\|\|\|([0-9]+)\|\)#', $epsv_response, $match))			{				return false;			}			$server_port = (int) $match[1];			// fsockopen expects IPv6 address in square brackets			$server_ip = "[$server_ip]";		}		$errno = 0;		$errstr = '';		if (!$this->data_connection = @fsockopen($server_ip, $server_port, $errno, $errstr, $this->timeout))		{			return false;		}		@stream_set_timeout($this->data_connection, $this->timeout);		return true;	}	/**	* Closes a connection used to send data	* @access private	*/	function _close_data_connection()	{		return @fclose($this->data_connection);	}	/**	* Check to make sure command was successful (FTP fsock only function)	* @access private	*/	function _check_command($return = false)	{		$response = '';		do		{			$result = @fgets($this->connection, 512);			$response .= $result;		}		while (substr($result, 3, 1) !== ' ');		if (!preg_match('#^[123]#', $response))		{			return false;		}		return ($return) ? $response : true;	}}?>
<?php/*** Corrects user_email_hash values if DB moved from 32-bit system to 64-bit system or vice versa.* The CRC32 function in PHP generates different results for both systems.* @PHP dev team: no, a hexdec() applied to it does not solve the issue. And please document it.**/die("Please read the first lines of this script for instructions on how to enable it");set_time_limit(0);define('IN_PHPBB', true);$phpbb_root_path = './../';$phpEx = substr(strrchr(__FILE__, '.'), 1);include($phpbb_root_path . 'common.' . $phpEx);// Start session management$user->session_begin();$auth->acl($user->data);$user->setup();$start = request_var('start', 0);$num_items = 1000;echo '<br />Updating user email hashes' . "\n";$sql = 'SELECT user_id, user_email	FROM ' . USERS_TABLE . '	ORDER BY user_id ASC';$result = $db->sql_query($sql);$echos = 0;while ($row = $db->sql_fetchrow($result)){	$echos++;	$sql = 'UPDATE ' . USERS_TABLE . "		SET user_email_hash = '" . $db->sql_escape(phpbb_email_hash($row['user_email'])) . "'		WHERE user_id = " . (int) $row['user_id'];	$db->sql_query($sql);	if ($echos == 200)	{		echo '<br />';		$echos = 0;	}	echo '.';	flush();}$db->sql_freeresult($result);echo 'FINISHED';// Done$db->sql_close();?>
<?php//// Security message://// This script is potentially dangerous.// Remove or comment the next line (die(".... ) to enable this script.// Do NOT FORGET to either remove this script or disable it after you have used it.////// Security message://// This script is potentially dangerous.// Remove or comment the next line (die(".... ) to enable this script.// Do NOT FORGET to either remove this script or disable it after you have used it.//die("Please read the first lines of this script for instructions on how to enable it");//// Do not change anything below this line.//set_time_limit(0);define('IN_PHPBB', true);$phpbb_root_path = '../';$phpEx = substr(strrchr(__FILE__, '.'), 1);include($phpbb_root_path . 'common.'.$phpEx);// Start session management$user->session_begin();$auth->acl($user->data);$user->setup();$search_type = $config['search_type'];if (!file_exists($phpbb_root_path . 'includes/search/' . $search_type . '.' . $phpEx)){	trigger_error('NO_SUCH_SEARCH_MODULE');}require($phpbb_root_path . 'includes/search/' . $search_type . '.' . $phpEx);$error = false;$search = new $search_type($error);if ($error){	trigger_error($error);}print "<html>\n<body>\n";//// Fetch a batch of posts_text entries//$sql = "SELECT COUNT(*) as total, MAX(post_id) as max_post_id	FROM ". POSTS_TABLE;if ( !($result = $db->sql_query($sql)) ){	$error = $db->sql_error();	die("Couldn't get maximum post ID :: " . $sql . " :: " . $error['message']);}$max_post_id = $db->sql_fetchrow($result);$totalposts = $max_post_id['total'];$max_post_id = $max_post_id['max_post_id'];$postcounter = (!isset($HTTP_GET_VARS['batchstart'])) ? 0 : $HTTP_GET_VARS['batchstart'];$batchsize = 200; // Process this many posts per loop$batchcount = 0;for(;$postcounter <= $max_post_id; $postcounter += $batchsize){	$batchstart = $postcounter + 1;	$batchend = $postcounter + $batchsize;	$batchcount++;		$sql = "SELECT *		FROM " . POSTS_TABLE . "		WHERE post_id			BETWEEN $batchstart				AND $batchend";	if( !($result = $db->sql_query($sql)) )	{		$error = $db->sql_error();		die("Couldn't get post_text :: " . $sql . " :: " . $error['message']);	}	$rowset = $db->sql_fetchrowset($result);	$db->sql_freeresult($result);	$post_rows = sizeof($rowset);		if( $post_rows )	{	// $sql = "LOCK TABLES ".POST_TEXT_TABLE." WRITE";	// $result = $db->sql_query($sql);		print "\n<p>\n<a href='{$_SERVER['PHP_SELF']}?batchstart=$batchstart'>Restart from posting $batchstart</a><br>\n";		// For every post in the batch:		for($post_nr = 0; $post_nr < $post_rows; $post_nr++ )		{			print ".";			flush();			$post_id = $rowset[$post_nr]['post_id'];			$search->index('post', $rowset[$post_nr]['post_id'], $rowset[$post_nr]['post_text'], $rowset[$post_nr]['post_subject'], $rowset[$post_nr]['poster_id']);		}	// $sql = "UNLOCK TABLES";	// $result = $db->sql_query($sql);	}}print "<br>Removing common words (words that appear in more than 50% of the posts)<br>\n";flush();$search->tidy();print "Removed words that where too common.<br>";echo "<br>Done";?></body></html>
<?php/**** @package acp* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @package module_install*/class acp_icons_info{	function module()	{		return array(			'filename'	=> 'acp_icons',			'title'		=> 'ACP_ICONS_SMILIES',			'version'	=> '1.0.0',			'modes'		=> array(				'icons'		=> array('title' => 'ACP_ICONS', 'auth' => 'acl_a_icons', 'cat' => array('ACP_MESSAGES')),				'smilies'	=> array('title' => 'ACP_SMILIES', 'auth' => 'acl_a_icons', 'cat' => array('ACP_MESSAGES')),			),		);	}	function install()	{	}	function uninstall()	{	}}?>
<?php/**** @package acp* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @ignore*/if (!defined('IN_PHPBB')){	exit;}/*** @package acp*/class acp_update{	var $u_action;	function main($id, $mode)	{		global $config, $db, $user, $auth, $template, $cache;		global $phpbb_root_path, $phpbb_admin_path, $phpEx;		$user->add_lang('install');		$this->tpl_name = 'acp_update';		$this->page_title = 'ACP_VERSION_CHECK';		// Get current and latest version		$errstr = '';		$errno = 0;		$info = obtain_latest_version_info(request_var('versioncheck_force', false));		if ($info === false)		{			trigger_error('VERSIONCHECK_FAIL', E_USER_WARNING);		}		$info = explode("\n", $info);		$latest_version = trim($info[0]);		$announcement_url = trim($info[1]);		$announcement_url = (strpos($announcement_url, '&amp;') === false) ? str_replace('&', '&amp;', $announcement_url) : $announcement_url;		$update_link = append_sid($phpbb_root_path . 'install/index.' . $phpEx, 'mode=update');		// next feature release		$next_feature_version = $next_feature_announcement_url = false;		if (isset($info[2]) && trim($info[2]) !== '')		{			$next_feature_version = trim($info[2]);			$next_feature_announcement_url = trim($info[3]);		}		// Determine automatic update...		$sql = 'SELECT config_value			FROM ' . CONFIG_TABLE . "			WHERE config_name = 'version_update_from'";		$result = $db->sql_query($sql);		$version_update_from = (string) $db->sql_fetchfield('config_value');		$db->sql_freeresult($result);		$current_version = (!empty($version_update_from)) ? $version_update_from : $config['version'];		$template->assign_vars(array(			'S_UP_TO_DATE'		=> phpbb_version_compare($latest_version, $config['version'], '<='),			'S_UP_TO_DATE_AUTO'	=> phpbb_version_compare($latest_version, $current_version, '<='),			'S_VERSION_CHECK'	=> true,			'U_ACTION'			=> $this->u_action,			'U_VERSIONCHECK_FORCE' => append_sid($this->u_action . '&amp;versioncheck_force=1'),			'LATEST_VERSION'	=> $latest_version,			'CURRENT_VERSION'	=> $config['version'],			'AUTO_VERSION'		=> $version_update_from,			'NEXT_FEATURE_VERSION'	=> $next_feature_version,			'UPDATE_INSTRUCTIONS'	=> sprintf($user->lang['UPDATE_INSTRUCTIONS'], $announcement_url, $update_link),			'UPGRADE_INSTRUCTIONS'	=> $next_feature_version ? $user->lang('UPGRADE_INSTRUCTIONS', $next_feature_version, $next_feature_announcement_url) : false,		));	}}?>
