<?php/**** @package phpBB3* @version $Id$* @copyright (c) 2006 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License** This file creates SQL statements to upgrade phpBB on MySQL 3.x/4.0.x to 4.1.x/5.x**///// Security message://// This script is potentially dangerous.// Remove or comment the next line (die(".... ) to enable this script.// Do NOT FORGET to either remove this script or disable it after you have used it.//die("Please read the first lines of this script for instructions on how to enable it");define('IN_PHPBB', true);$phpbb_root_path = (defined('PHPBB_ROOT_PATH')) ? PHPBB_ROOT_PATH : './';$phpEx = substr(strrchr(__FILE__, '.'), 1);include($phpbb_root_path . 'common.' . $phpEx);$prefix = $table_prefix;$newline = "\n";if (PHP_SAPI !== 'cli'){	$newline = '<br>';}$sql = 'DESCRIBE ' . POSTS_TABLE . ' post_text';$result = $db->sql_query($sql);$row = $db->sql_fetchrow($result);$db->sql_freeresult($result);$mysql_indexer = $drop_index = false;if (strtolower($row['Type']) === 'mediumtext'){	$mysql_indexer = true;}if (strtolower($row['Key']) === 'mul'){	$drop_index = true;}echo "USE $dbname;$newline$newline";@set_time_limit(0);$schema_data = get_schema_struct();$dbms_type_map = array(	'mysql_41'	=> array(		'INT:'		=> 'int(%d)',		'BINT'		=> 'bigint(20)',		'UINT'		=> 'mediumint(8) UNSIGNED',		'UINT:'		=> 'int(%d) UNSIGNED',		'TINT:'		=> 'tinyint(%d)',		'USINT'		=> 'smallint(4) UNSIGNED',		'BOOL'		=> 'tinyint(1) UNSIGNED',		'VCHAR'		=> 'varchar(255)',		'VCHAR:'	=> 'varchar(%d)',		'CHAR:'		=> 'char(%d)',		'XSTEXT'	=> 'text',		'XSTEXT_UNI'=> 'varchar(100)',		'STEXT'		=> 'text',		'STEXT_UNI'	=> 'varchar(255)',		'TEXT'		=> 'text',		'TEXT_UNI'	=> 'text',		'MTEXT'		=> 'mediumtext',		'MTEXT_UNI'	=> 'mediumtext',		'TIMESTAMP'	=> 'int(11) UNSIGNED',		'DECIMAL'	=> 'decimal(5,2)',		'DECIMAL:'	=> 'decimal(%d,2)',		'PDECIMAL'	=> 'decimal(6,3)',		'PDECIMAL:'	=> 'decimal(%d,3)',		'VCHAR_UNI'	=> 'varchar(255)',		'VCHAR_UNI:'=> 'varchar(%d)',		'VCHAR_CI'	=> 'varchar(255)',		'VARBINARY'	=> 'varbinary(255)',	),	'mysql_40'	=> array(		'INT:'		=> 'int(%d)',		'BINT'		=> 'bigint(20)',		'UINT'		=> 'mediumint(8) UNSIGNED',		'UINT:'		=> 'int(%d) UNSIGNED',		'TINT:'		=> 'tinyint(%d)',		'USINT'		=> 'smallint(4) UNSIGNED',		'BOOL'		=> 'tinyint(1) UNSIGNED',		'VCHAR'		=> 'varbinary(255)',		'VCHAR:'	=> 'varbinary(%d)',		'CHAR:'		=> 'binary(%d)',		'XSTEXT'	=> 'blob',		'XSTEXT_UNI'=> 'blob',		'STEXT'		=> 'blob',		'STEXT_UNI'	=> 'blob',		'TEXT'		=> 'blob',		'TEXT_UNI'	=> 'blob',		'MTEXT'		=> 'mediumblob',		'MTEXT_UNI'	=> 'mediumblob',		'TIMESTAMP'	=> 'int(11) UNSIGNED',		'DECIMAL'	=> 'decimal(5,2)',		'DECIMAL:'	=> 'decimal(%d,2)',		'PDECIMAL'	=> 'decimal(6,3)',		'PDECIMAL:'	=> 'decimal(%d,3)',		'VCHAR_UNI'	=> 'blob',		'VCHAR_UNI:'=> array('varbinary(%d)', 'limit' => array('mult', 3, 255, 'blob')),		'VCHAR_CI'	=> 'blob',		'VARBINARY'	=> 'varbinary(255)',	),);foreach ($schema_data as $table_name => $table_data){	$table_name = str_replace('phpbb_', $prefix, $table_name);	// Write comment about table	echo "# Table: '{$table_name}'$newline";	// Create Table statement	$generator = $textimage = false;	// Do we need to DROP a fulltext index before we alter the table?	if ($table_name == ($prefix . 'posts') && $drop_index)	{		echo "ALTER TABLE {$table_name}{$newline}";		echo "DROP INDEX post_text,{$newline}DROP INDEX post_subject,{$newline}DROP INDEX post_content;{$newline}{$newline}";	}	$line = "ALTER TABLE {$table_name} $newline";	// Table specific so we don't get overlap	$modded_array = array();	// Write columns one by one...	foreach ($table_data['COLUMNS'] as $column_name => $column_data)	{		// Get type		if (strpos($column_data[0], ':') !== false)		{			list($orig_column_type, $column_length) = explode(':', $column_data[0]);			$column_type = sprintf($dbms_type_map['mysql_41'][$orig_column_type . ':'], $column_length);			if (isset($dbms_type_map['mysql_40'][$orig_column_type . ':']['limit'][0]))			{				switch ($dbms_type_map['mysql_40'][$orig_column_type . ':']['limit'][0])				{					case 'mult':						if (($column_length * $dbms_type_map['mysql_40'][$orig_column_type . ':']['limit'][1]) > $dbms_type_map['mysql_40'][$orig_column_type . ':']['limit'][2])						{							$modded_array[$column_name] = $column_type;						}					break;				}			}			$orig_column_type .= ':';		}		else		{			$orig_column_type = $column_data[0];			$other_column_type = $dbms_type_map['mysql_40'][$column_data[0]];			if ($other_column_type == 'text' || $other_column_type == 'blob')			{				$modded_array[$column_name] = $column_type;			}			$column_type = $dbms_type_map['mysql_41'][$column_data[0]];		}		// Adjust default value if db-dependant specified		if (is_array($column_data[1]))		{			$column_data[1] = (isset($column_data[1][$dbms])) ? $column_data[1][$dbms] : $column_data[1]['default'];		}		$line .= "\tMODIFY {$column_name} {$column_type} ";		// For hexadecimal values do not use single quotes		if (!is_null($column_data[1]) && substr($column_type, -4) !== 'text' && substr($column_type, -4) !== 'blob')		{			$line .= (strpos($column_data[1], '0x') === 0) ? "DEFAULT {$column_data[1]} " : "DEFAULT '{$column_data[1]}' ";		}		$line .= 'NOT NULL';		if (isset($column_data[2]))		{			if ($column_data[2] == 'auto_increment')			{				$line .= ' auto_increment';			}			else if ($column_data[2] == 'true_sort')			{				$line .= ' COLLATE utf8_unicode_ci';			}			else if ($column_data[2] == 'no_sort')			{				$line .= ' COLLATE utf8_bin';			}		}		else if (preg_match('/(?:var)?char|(?:medium)?text/i', $column_type))		{			$line .= ' COLLATE utf8_bin';		}		$line .= ",$newline";	}	// Write Keys	if (isset($table_data['KEYS']))	{		foreach ($table_data['KEYS'] as $key_name => $key_data)		{			$temp = '';			if (!is_array($key_data[1]))			{				$key_data[1] = array($key_data[1]);			}			$temp .= ($key_data[0] == 'INDEX') ? "\tADD KEY" : '';			$temp .= ($key_data[0] == 'UNIQUE') ? "\tADD UNIQUE" : '';			$repair = false;			foreach ($key_data[1] as $key => $col_name)			{				if (isset($modded_array[$col_name]))				{					$repair = true;				}			}			if ($repair)			{				$line .= "\tDROP INDEX " . $key_name . ",$newline";				$line .= $temp;				$line .= ' ' . $key_name . ' (' . implode(', ', $key_data[1]) . "),$newline";			}		}	}	//$line .= "\tCONVERT TO CHARACTER SET `utf8`$newline";	$line .= "\tDEFAULT CHARSET=utf8 COLLATE=utf8_bin;$newline$newline";	echo $line . "$newline";	// Do we now need to re-add the fulltext index? ;)	if ($table_name == ($prefix . 'posts') && $drop_index)	{		echo "ALTER TABLE $table_name ADD FULLTEXT (post_subject), ADD FULLTEXT (post_text), ADD FULLTEXT post_content (post_subject, post_text);{$newline}";	}}/*** Define the basic structure* The format:*		array('{TABLE_NAME}' => {TABLE_DATA})*		{TABLE_DATA}:*			COLUMNS = array({column_name} = array({column_type}, {default}, {auto_increment}))*			PRIMARY_KEY = {column_name(s)}*			KEYS = array({key_name} = array({key_type}, {column_name(s)})),**	Column Types:*	INT:x		=> SIGNED int(x)*	BINT		=> BIGINT*	UINT		=> mediumint(8) UNSIGNED*	UINT:x		=> int(x) UNSIGNED*	TINT:x		=> tinyint(x)*	USINT		=> smallint(4) UNSIGNED (for _order columns)*	BOOL		=> tinyint(1) UNSIGNED*	VCHAR		=> varchar(255)*	CHAR:x		=> char(x)*	XSTEXT_UNI	=> text for storing 100 characters (topic_title for example)*	STEXT_UNI	=> text for storing 255 characters (normal input field with a max of 255 single-byte chars) - same as VCHAR_UNI*	TEXT_UNI	=> text for storing 3000 characters (short text, descriptions, comments, etc.)*	MTEXT_UNI	=> mediumtext (post text, large text)*	VCHAR:x		=> varchar(x)*	TIMESTAMP	=> int(11) UNSIGNED*	DECIMAL		=> decimal number (5,2)*	DECIMAL:	=> decimal number (x,2)*	PDECIMAL	=> precision decimal number (6,3)*	PDECIMAL:	=> precision decimal number (x,3)*	VCHAR_UNI	=> varchar(255) BINARY*	VCHAR_CI	=> varchar_ci for postgresql, others VCHAR*/function get_schema_struct(){	$schema_data = array();	$schema_data['phpbb_attachments'] = array(		'COLUMNS'		=> array(			'attach_id'			=> array('UINT', NULL, 'auto_increment'),			'post_msg_id'		=> array('UINT', 0),			'topic_id'			=> array('UINT', 0),			'in_message'		=> array('BOOL', 0),			'poster_id'			=> array('UINT', 0),			'is_orphan'			=> array('BOOL', 1),			'physical_filename'	=> array('VCHAR', ''),			'real_filename'		=> array('VCHAR', ''),			'download_count'	=> array('UINT', 0),			'attach_comment'	=> array('TEXT_UNI', ''),			'extension'			=> array('VCHAR:100', ''),			'mimetype'			=> array('VCHAR:100', ''),			'filesize'			=> array('UINT:20', 0),			'filetime'			=> array('TIMESTAMP', 0),			'thumbnail'			=> array('BOOL', 0),		),		'PRIMARY_KEY'	=> 'attach_id',		'KEYS'			=> array(			'filetime'			=> array('INDEX', 'filetime'),			'post_msg_id'		=> array('INDEX', 'post_msg_id'),			'topic_id'			=> array('INDEX', 'topic_id'),			'poster_id'			=> array('INDEX', 'poster_id'),			'is_orphan'			=> array('INDEX', 'is_orphan'),		),	);	$schema_data['phpbb_acl_groups'] = array(		'COLUMNS'		=> array(			'group_id'			=> array('UINT', 0),			'forum_id'			=> array('UINT', 0),			'auth_option_id'	=> array('UINT', 0),			'auth_role_id'		=> array('UINT', 0),			'auth_setting'		=> array('TINT:2', 0),		),		'KEYS'			=> array(			'group_id'		=> array('INDEX', 'group_id'),			'auth_opt_id'	=> array('INDEX', 'auth_option_id'),			'auth_role_id'	=> array('INDEX', 'auth_role_id'),		),	);	$schema_data['phpbb_acl_options'] = array(		'COLUMNS'		=> array(			'auth_option_id'	=> array('UINT', NULL, 'auto_increment'),			'auth_option'		=> array('VCHAR:50', ''),			'is_global'			=> array('BOOL', 0),			'is_local'			=> array('BOOL', 0),			'founder_only'		=> array('BOOL', 0),		),		'PRIMARY_KEY'	=> 'auth_option_id',		'KEYS'			=> array(			'auth_option'		=> array('UNIQUE', 'auth_option'),		),	);	$schema_data['phpbb_acl_roles'] = array(		'COLUMNS'		=> array(			'role_id'			=> array('UINT', NULL, 'auto_increment'),			'role_name'			=> array('VCHAR_UNI', ''),			'role_description'	=> array('TEXT_UNI', ''),			'role_type'			=> array('VCHAR:10', ''),			'role_order'		=> array('USINT', 0),		),		'PRIMARY_KEY'	=> 'role_id',		'KEYS'			=> array(			'role_type'			=> array('INDEX', 'role_type'),			'role_order'		=> array('INDEX', 'role_order'),		),	);	$schema_data['phpbb_acl_roles_data'] = array(		'COLUMNS'		=> array(			'role_id'			=> array('UINT', 0),			'auth_option_id'	=> array('UINT', 0),			'auth_setting'		=> array('TINT:2', 0),		),		'PRIMARY_KEY'	=> array('role_id', 'auth_option_id'),		'KEYS'			=> array(			'ath_op_id'			=> array('INDEX', 'auth_option_id'),		),	);	$schema_data['phpbb_acl_users'] = array(		'COLUMNS'		=> array(			'user_id'			=> array('UINT', 0),			'forum_id'			=> array('UINT', 0),			'auth_option_id'	=> array('UINT', 0),			'auth_role_id'		=> array('UINT', 0),			'auth_setting'		=> array('TINT:2', 0),		),		'KEYS'			=> array(			'user_id'			=> array('INDEX', 'user_id'),			'auth_option_id'	=> array('INDEX', 'auth_option_id'),			'auth_role_id'		=> array('INDEX', 'auth_role_id'),		),	);	$schema_data['phpbb_banlist'] = array(		'COLUMNS'		=> array(			'ban_id'			=> array('UINT', NULL, 'auto_increment'),			'ban_userid'		=> array('UINT', 0),			'ban_ip'			=> array('VCHAR:40', ''),			'ban_email'			=> array('VCHAR_UNI:100', ''),			'ban_start'			=> array('TIMESTAMP', 0),			'ban_end'			=> array('TIMESTAMP', 0),			'ban_exclude'		=> array('BOOL', 0),			'ban_reason'		=> array('VCHAR_UNI', ''),			'ban_give_reason'	=> array('VCHAR_UNI', ''),		),		'PRIMARY_KEY'			=> 'ban_id',		'KEYS'			=> array(			'ban_end'			=> array('INDEX', 'ban_end'),			'ban_user'			=> array('INDEX', array('ban_userid', 'ban_exclude')),			'ban_email'			=> array('INDEX', array('ban_email', 'ban_exclude')),			'ban_ip'			=> array('INDEX', array('ban_ip', 'ban_exclude')),		),	);	$schema_data['phpbb_bbcodes'] = array(		'COLUMNS'		=> array(			'bbcode_id'				=> array('USINT', 0),			'bbcode_tag'			=> array('VCHAR:16', ''),			'bbcode_helpline'		=> array('VCHAR_UNI', ''),			'display_on_posting'	=> array('BOOL', 0),			'bbcode_match'			=> array('TEXT_UNI', ''),			'bbcode_tpl'			=> array('MTEXT_UNI', ''),			'first_pass_match'		=> array('MTEXT_UNI', ''),			'first_pass_replace'	=> array('MTEXT_UNI', ''),			'second_pass_match'		=> array('MTEXT_UNI', ''),			'second_pass_replace'	=> array('MTEXT_UNI', ''),		),		'PRIMARY_KEY'	=> 'bbcode_id',		'KEYS'			=> array(			'display_on_post'		=> array('INDEX', 'display_on_posting'),		),	);	$schema_data['phpbb_bookmarks'] = array(		'COLUMNS'		=> array(			'topic_id'			=> array('UINT', 0),			'user_id'			=> array('UINT', 0),		),		'PRIMARY_KEY'			=> array('topic_id', 'user_id'),	);	$schema_data['phpbb_bots'] = array(		'COLUMNS'		=> array(			'bot_id'			=> array('UINT', NULL, 'auto_increment'),			'bot_active'		=> array('BOOL', 1),			'bot_name'			=> array('STEXT_UNI', ''),			'user_id'			=> array('UINT', 0),			'bot_agent'			=> array('VCHAR', ''),			'bot_ip'			=> array('VCHAR', ''),		),		'PRIMARY_KEY'	=> 'bot_id',		'KEYS'			=> array(			'bot_active'		=> array('INDEX', 'bot_active'),		),	);	$schema_data['phpbb_config'] = array(		'COLUMNS'		=> array(			'config_name'		=> array('VCHAR', ''),			'config_value'		=> array('VCHAR_UNI', ''),			'is_dynamic'		=> array('BOOL', 0),		),		'PRIMARY_KEY'	=> 'config_name',		'KEYS'			=> array(			'is_dynamic'		=> array('INDEX', 'is_dynamic'),		),	);	$schema_data['phpbb_confirm'] = array(		'COLUMNS'		=> array(			'confirm_id'		=> array('CHAR:32', ''),			'session_id'		=> array('CHAR:32', ''),			'confirm_type'		=> array('TINT:3', 0),			'code'				=> array('VCHAR:8', ''),			'seed'				=> array('UINT:10', 0),			'attempts'			=> array('UINT', 0),		),		'PRIMARY_KEY'	=> array('session_id', 'confirm_id'),		'KEYS'			=> array(			'confirm_type'		=> array('INDEX', 'confirm_type'),		),	);	$schema_data['phpbb_disallow'] = array(		'COLUMNS'		=> array(			'disallow_id'		=> array('UINT', NULL, 'auto_increment'),			'disallow_username'	=> array('VCHAR_UNI:255', ''),		),		'PRIMARY_KEY'	=> 'disallow_id',	);	$schema_data['phpbb_drafts'] = array(		'COLUMNS'		=> array(			'draft_id'			=> array('UINT', NULL, 'auto_increment'),			'user_id'			=> array('UINT', 0),			'topic_id'			=> array('UINT', 0),			'forum_id'			=> array('UINT', 0),			'save_time'			=> array('TIMESTAMP', 0),			'draft_subject'		=> array('STEXT_UNI', ''),			'draft_message'		=> array('MTEXT_UNI', ''),		),		'PRIMARY_KEY'	=> 'draft_id',		'KEYS'			=> array(			'save_time'			=> array('INDEX', 'save_time'),		),	);	$schema_data['phpbb_extensions'] = array(		'COLUMNS'		=> array(			'extension_id'		=> array('UINT', NULL, 'auto_increment'),			'group_id'			=> array('UINT', 0),			'extension'			=> array('VCHAR:100', ''),		),		'PRIMARY_KEY'	=> 'extension_id',	);	$schema_data['phpbb_extension_groups'] = array(		'COLUMNS'		=> array(			'group_id'			=> array('UINT', NULL, 'auto_increment'),			'group_name'		=> array('VCHAR_UNI', ''),			'cat_id'			=> array('TINT:2', 0),			'allow_group'		=> array('BOOL', 0),			'download_mode'		=> array('BOOL', 1),			'upload_icon'		=> array('VCHAR', ''),			'max_filesize'		=> array('UINT:20', 0),			'allowed_forums'	=> array('TEXT', ''),			'allow_in_pm'		=> array('BOOL', 0),		),		'PRIMARY_KEY'	=> 'group_id',	);	$schema_data['phpbb_forums'] = array(		'COLUMNS'		=> array(			'forum_id'				=> array('UINT', NULL, 'auto_increment'),			'parent_id'				=> array('UINT', 0),			'left_id'				=> array('UINT', 0),			'right_id'				=> array('UINT', 0),			'forum_parents'			=> array('MTEXT', ''),			'forum_name'			=> array('STEXT_UNI', ''),			'forum_desc'			=> array('TEXT_UNI', ''),			'forum_desc_bitfield'	=> array('VCHAR:255', ''),			'forum_desc_options'	=> array('UINT:11', 7),			'forum_desc_uid'		=> array('VCHAR:8', ''),			'forum_link'			=> array('VCHAR_UNI', ''),			'forum_password'		=> array('VCHAR_UNI:40', ''),			'forum_style'			=> array('UINT', 0),			'forum_image'			=> array('VCHAR', ''),			'forum_rules'			=> array('TEXT_UNI', ''),			'forum_rules_link'		=> array('VCHAR_UNI', ''),			'forum_rules_bitfield'	=> array('VCHAR:255', ''),			'forum_rules_options'	=> array('UINT:11', 7),			'forum_rules_uid'		=> array('VCHAR:8', ''),			'forum_topics_per_page'	=> array('TINT:4', 0),			'forum_type'			=> array('TINT:4', 0),			'forum_status'			=> array('TINT:4', 0),			'forum_posts'			=> array('UINT', 0),			'forum_topics'			=> array('UINT', 0),			'forum_topics_real'		=> array('UINT', 0),			'forum_last_post_id'	=> array('UINT', 0),			'forum_last_poster_id'	=> array('UINT', 0),			'forum_last_post_subject' => array('STEXT_UNI', ''),			'forum_last_post_time'	=> array('TIMESTAMP', 0),			'forum_last_poster_name'=> array('VCHAR_UNI', ''),			'forum_last_poster_colour'=> array('VCHAR:6', ''),			'forum_flags'			=> array('TINT:4', 32),			'forum_options'			=> array('UINT:20', 0),			'display_subforum_list'	=> array('BOOL', 1),			'display_on_index'		=> array('BOOL', 1),			'enable_indexing'		=> array('BOOL', 1),			'enable_icons'			=> array('BOOL', 1),			'enable_prune'			=> array('BOOL', 0),			'prune_next'			=> array('TIMESTAMP', 0),			'prune_days'			=> array('UINT', 0),			'prune_viewed'			=> array('UINT', 0),			'prune_freq'			=> array('UINT', 0),		),		'PRIMARY_KEY'	=> 'forum_id',		'KEYS'			=> array(			'left_right_id'			=> array('INDEX', array('left_id', 'right_id')),			'forum_lastpost_id'		=> array('INDEX', 'forum_last_post_id'),		),	);	$schema_data['phpbb_forums_access'] = array(		'COLUMNS'		=> array(			'forum_id'				=> array('UINT', 0),			'user_id'				=> array('UINT', 0),			'session_id'			=> array('CHAR:32', ''),		),		'PRIMARY_KEY'	=> array('forum_id', 'user_id', 'session_id'),	);	$schema_data['phpbb_forums_track'] = array(		'COLUMNS'		=> array(			'user_id'				=> array('UINT', 0),			'forum_id'				=> array('UINT', 0),			'mark_time'				=> array('TIMESTAMP', 0),		),		'PRIMARY_KEY'	=> array('user_id', 'forum_id'),	);	$schema_data['phpbb_forums_watch'] = array(		'COLUMNS'		=> array(			'forum_id'				=> array('UINT', 0),			'user_id'				=> array('UINT', 0),			'notify_status'			=> array('BOOL', 0),		),		'KEYS'			=> array(			'forum_id'				=> array('INDEX', 'forum_id'),			'user_id'				=> array('INDEX', 'user_id'),			'notify_stat'			=> array('INDEX', 'notify_status'),		),	);	$schema_data['phpbb_groups'] = array(		'COLUMNS'		=> array(			'group_id'				=> array('UINT', NULL, 'auto_increment'),			'group_type'			=> array('TINT:4', 1),			'group_founder_manage'	=> array('BOOL', 0),			'group_skip_auth'		=> array('BOOL', 0),			'group_name'			=> array('VCHAR_CI', ''),			'group_desc'			=> array('TEXT_UNI', ''),			'group_desc_bitfield'	=> array('VCHAR:255', ''),			'group_desc_options'	=> array('UINT:11', 7),			'group_desc_uid'		=> array('VCHAR:8', ''),			'group_display'			=> array('BOOL', 0),			'group_avatar'			=> array('VCHAR', ''),			'group_avatar_type'		=> array('TINT:2', 0),			'group_avatar_width'	=> array('USINT', 0),			'group_avatar_height'	=> array('USINT', 0),			'group_rank'			=> array('UINT', 0),			'group_colour'			=> array('VCHAR:6', ''),			'group_sig_chars'		=> array('UINT', 0),			'group_receive_pm'		=> array('BOOL', 0),			'group_message_limit'	=> array('UINT', 0),			'group_max_recipients'	=> array('UINT', 0),			'group_legend'			=> array('BOOL', 1),		),		'PRIMARY_KEY'	=> 'group_id',		'KEYS'			=> array(			'group_legend_name'		=> array('INDEX', array('group_legend', 'group_name')),		),	);	$schema_data['phpbb_icons'] = array(		'COLUMNS'		=> array(			'icons_id'				=> array('UINT', NULL, 'auto_increment'),			'icons_url'				=> array('VCHAR', ''),			'icons_width'			=> array('TINT:4', 0),			'icons_height'			=> array('TINT:4', 0),			'icons_order'			=> array('UINT', 0),			'display_on_posting'	=> array('BOOL', 1),		),		'PRIMARY_KEY'	=> 'icons_id',		'KEYS'			=> array(			'display_on_posting'	=> array('INDEX', 'display_on_posting'),		),	);	$schema_data['phpbb_lang'] = array(		'COLUMNS'		=> array(			'lang_id'				=> array('TINT:4', NULL, 'auto_increment'),			'lang_iso'				=> array('VCHAR:30', ''),			'lang_dir'				=> array('VCHAR:30', ''),			'lang_english_name'		=> array('VCHAR_UNI:100', ''),			'lang_local_name'		=> array('VCHAR_UNI:255', ''),			'lang_author'			=> array('VCHAR_UNI:255', ''),		),		'PRIMARY_KEY'	=> 'lang_id',		'KEYS'			=> array(			'lang_iso'				=> array('INDEX', 'lang_iso'),		),	);	$schema_data['phpbb_log'] = array(		'COLUMNS'		=> array(			'log_id'				=> array('UINT', NULL, 'auto_increment'),			'log_type'				=> array('TINT:4', 0),			'user_id'				=> array('UINT', 0),			'forum_id'				=> array('UINT', 0),			'topic_id'				=> array('UINT', 0),			'reportee_id'			=> array('UINT', 0),			'log_ip'				=> array('VCHAR:40', ''),			'log_time'				=> array('TIMESTAMP', 0),			'log_operation'			=> array('TEXT_UNI', ''),			'log_data'				=> array('MTEXT_UNI', ''),		),		'PRIMARY_KEY'	=> 'log_id',		'KEYS'			=> array(			'log_type'				=> array('INDEX', 'log_type'),			'forum_id'				=> array('INDEX', 'forum_id'),			'topic_id'				=> array('INDEX', 'topic_id'),			'reportee_id'			=> array('INDEX', 'reportee_id'),			'user_id'				=> array('INDEX', 'user_id'),		),	);	$schema_data['phpbb_moderator_cache'] = array(		'COLUMNS'		=> array(			'forum_id'				=> array('UINT', 0),			'user_id'				=> array('UINT', 0),			'username'				=> array('VCHAR_UNI:255', ''),			'group_id'				=> array('UINT', 0),			'group_name'			=> array('VCHAR_UNI', ''),			'display_on_index'		=> array('BOOL', 1),		),		'KEYS'			=> array(			'disp_idx'				=> array('INDEX', 'display_on_index'),			'forum_id'				=> array('INDEX', 'forum_id'),		),	);	$schema_data['phpbb_modules'] = array(		'COLUMNS'		=> array(			'module_id'				=> array('UINT', NULL, 'auto_increment'),			'module_enabled'		=> array('BOOL', 1),			'module_display'		=> array('BOOL', 1),			'module_basename'		=> array('VCHAR', ''),			'module_class'			=> array('VCHAR:10', ''),			'parent_id'				=> array('UINT', 0),			'left_id'				=> array('UINT', 0),			'right_id'				=> array('UINT', 0),			'module_langname'		=> array('VCHAR', ''),			'module_mode'			=> array('VCHAR', ''),			'module_auth'			=> array('VCHAR', ''),		),		'PRIMARY_KEY'	=> 'module_id',		'KEYS'			=> array(			'left_right_id'			=> array('INDEX', array('left_id', 'right_id')),			'module_enabled'		=> array('INDEX', 'module_enabled'),			'class_left_id'			=> array('INDEX', array('module_class', 'left_id')),		),	);	$schema_data['phpbb_poll_options'] = array(		'COLUMNS'		=> array(			'poll_option_id'		=> array('TINT:4', 0),			'topic_id'				=> array('UINT', 0),			'poll_option_text'		=> array('TEXT_UNI', ''),			'poll_option_total'		=> array('UINT', 0),		),		'KEYS'			=> array(			'poll_opt_id'			=> array('INDEX', 'poll_option_id'),			'topic_id'				=> array('INDEX', 'topic_id'),		),	);	$schema_data['phpbb_poll_votes'] = array(		'COLUMNS'		=> array(			'topic_id'				=> array('UINT', 0),			'poll_option_id'		=> array('TINT:4', 0),			'vote_user_id'			=> array('UINT', 0),			'vote_user_ip'			=> array('VCHAR:40', ''),		),		'KEYS'			=> array(			'topic_id'				=> array('INDEX', 'topic_id'),			'vote_user_id'			=> array('INDEX', 'vote_user_id'),			'vote_user_ip'			=> array('INDEX', 'vote_user_ip'),		),	);	$schema_data['phpbb_posts'] = array(		'COLUMNS'		=> array(			'post_id'				=> array('UINT', NULL, 'auto_increment'),			'topic_id'				=> array('UINT', 0),			'forum_id'				=> array('UINT', 0),			'poster_id'				=> array('UINT', 0),			'icon_id'				=> array('UINT', 0),			'poster_ip'				=> array('VCHAR:40', ''),			'post_time'				=> array('TIMESTAMP', 0),			'post_approved'			=> array('BOOL', 1),			'post_reported'			=> array('BOOL', 0),			'enable_bbcode'			=> array('BOOL', 1),			'enable_smilies'		=> array('BOOL', 1),			'enable_magic_url'		=> array('BOOL', 1),			'enable_sig'			=> array('BOOL', 1),			'post_username'			=> array('VCHAR_UNI:255', ''),			'post_subject'			=> array('STEXT_UNI', '', 'true_sort'),			'post_text'				=> array('MTEXT_UNI', ''),			'post_checksum'			=> array('VCHAR:32', ''),			'post_attachment'		=> array('BOOL', 0),			'bbcode_bitfield'		=> array('VCHAR:255', ''),			'bbcode_uid'			=> array('VCHAR:8', ''),			'post_postcount'		=> array('BOOL', 1),			'post_edit_time'		=> array('TIMESTAMP', 0),			'post_edit_reason'		=> array('STEXT_UNI', ''),			'post_edit_user'		=> array('UINT', 0),			'post_edit_count'		=> array('USINT', 0),			'post_edit_locked'		=> array('BOOL', 0),		),		'PRIMARY_KEY'	=> 'post_id',		'KEYS'			=> array(			'forum_id'				=> array('INDEX', 'forum_id'),			'topic_id'				=> array('INDEX', 'topic_id'),			'poster_ip'				=> array('INDEX', 'poster_ip'),			'poster_id'				=> array('INDEX', 'poster_id'),			'post_approved'			=> array('INDEX', 'post_approved'),			'post_username'			=> array('INDEX', 'post_username'),			'tid_post_time'			=> array('INDEX', array('topic_id', 'post_time')),		),	);	$schema_data['phpbb_privmsgs'] = array(		'COLUMNS'		=> array(			'msg_id'				=> array('UINT', NULL, 'auto_increment'),			'root_level'			=> array('UINT', 0),			'author_id'				=> array('UINT', 0),			'icon_id'				=> array('UINT', 0),			'author_ip'				=> array('VCHAR:40', ''),			'message_time'			=> array('TIMESTAMP', 0),			'enable_bbcode'			=> array('BOOL', 1),			'enable_smilies'		=> array('BOOL', 1),			'enable_magic_url'		=> array('BOOL', 1),			'enable_sig'			=> array('BOOL', 1),			'message_subject'		=> array('STEXT_UNI', ''),			'message_text'			=> array('MTEXT_UNI', ''),			'message_edit_reason'	=> array('STEXT_UNI', ''),			'message_edit_user'		=> array('UINT', 0),			'message_attachment'	=> array('BOOL', 0),			'bbcode_bitfield'		=> array('VCHAR:255', ''),			'bbcode_uid'			=> array('VCHAR:8', ''),			'message_edit_time'		=> array('TIMESTAMP', 0),			'message_edit_count'	=> array('USINT', 0),			'to_address'			=> array('TEXT_UNI', ''),			'bcc_address'			=> array('TEXT_UNI', ''),			'message_reported'		=> array('BOOL', 0),		),		'PRIMARY_KEY'	=> 'msg_id',		'KEYS'			=> array(			'author_ip'				=> array('INDEX', 'author_ip'),			'message_time'			=> array('INDEX', 'message_time'),			'author_id'				=> array('INDEX', 'author_id'),			'root_level'			=> array('INDEX', 'root_level'),		),	);	$schema_data['phpbb_privmsgs_folder'] = array(		'COLUMNS'		=> array(			'folder_id'				=> array('UINT', NULL, 'auto_increment'),			'user_id'				=> array('UINT', 0),			'folder_name'			=> array('VCHAR_UNI', ''),			'pm_count'				=> array('UINT', 0),		),		'PRIMARY_KEY'	=> 'folder_id',		'KEYS'			=> array(			'user_id'				=> array('INDEX', 'user_id'),		),	);	$schema_data['phpbb_privmsgs_rules'] = array(		'COLUMNS'		=> array(			'rule_id'				=> array('UINT', NULL, 'auto_increment'),			'user_id'				=> array('UINT', 0),			'rule_check'			=> array('UINT', 0),			'rule_connection'		=> array('UINT', 0),			'rule_string'			=> array('VCHAR_UNI', ''),			'rule_user_id'			=> array('UINT', 0),			'rule_group_id'			=> array('UINT', 0),			'rule_action'			=> array('UINT', 0),			'rule_folder_id'		=> array('INT:11', 0),		),		'PRIMARY_KEY'	=> 'rule_id',		'KEYS'			=> array(			'user_id'				=> array('INDEX', 'user_id'),		),	);	$schema_data['phpbb_privmsgs_to'] = array(		'COLUMNS'		=> array(			'msg_id'				=> array('UINT', 0),			'user_id'				=> array('UINT', 0),			'author_id'				=> array('UINT', 0),			'pm_deleted'			=> array('BOOL', 0),			'pm_new'				=> array('BOOL', 1),			'pm_unread'				=> array('BOOL', 1),			'pm_replied'			=> array('BOOL', 0),			'pm_marked'				=> array('BOOL', 0),			'pm_forwarded'			=> array('BOOL', 0),			'folder_id'				=> array('INT:11', 0),		),		'KEYS'			=> array(			'msg_id'				=> array('INDEX', 'msg_id'),			'author_id'				=> array('INDEX', 'author_id'),			'usr_flder_id'			=> array('INDEX', array('user_id', 'folder_id')),		),	);	$schema_data['phpbb_profile_fields'] = array(		'COLUMNS'		=> array(			'field_id'				=> array('UINT', NULL, 'auto_increment'),			'field_name'			=> array('VCHAR_UNI', ''),			'field_type'			=> array('TINT:4', 0),			'field_ident'			=> array('VCHAR:20', ''),			'field_length'			=> array('VCHAR:20', ''),			'field_minlen'			=> array('VCHAR', ''),			'field_maxlen'			=> array('VCHAR', ''),			'field_novalue'			=> array('VCHAR_UNI', ''),			'field_default_value'	=> array('VCHAR_UNI', ''),			'field_validation'		=> array('VCHAR_UNI:20', ''),			'field_required'		=> array('BOOL', 0),			'field_show_on_reg'		=> array('BOOL', 0),			'field_show_on_vt'		=> array('BOOL', 0),			'field_show_profile'	=> array('BOOL', 0),			'field_hide'			=> array('BOOL', 0),			'field_no_view'			=> array('BOOL', 0),			'field_active'			=> array('BOOL', 0),			'field_order'			=> array('UINT', 0),		),		'PRIMARY_KEY'	=> 'field_id',		'KEYS'			=> array(			'fld_type'			=> array('INDEX', 'field_type'),			'fld_ordr'			=> array('INDEX', 'field_order'),		),	);	$schema_data['phpbb_profile_fields_data'] = array(		'COLUMNS'		=> array(			'user_id'				=> array('UINT', 0),		),		'PRIMARY_KEY'	=> 'user_id',	);	$schema_data['phpbb_profile_fields_lang'] = array(		'COLUMNS'		=> array(			'field_id'				=> array('UINT', 0),			'lang_id'				=> array('UINT', 0),			'option_id'				=> array('UINT', 0),			'field_type'			=> array('TINT:4', 0),			'lang_value'			=> array('VCHAR_UNI', ''),		),		'PRIMARY_KEY'	=> array('field_id', 'lang_id', 'option_id'),	);	$schema_data['phpbb_profile_lang'] = array(		'COLUMNS'		=> array(			'field_id'				=> array('UINT', 0),			'lang_id'				=> array('UINT', 0),			'lang_name'				=> array('VCHAR_UNI', ''),			'lang_explain'			=> array('TEXT_UNI', ''),			'lang_default_value'	=> array('VCHAR_UNI', ''),		),		'PRIMARY_KEY'	=> array('field_id', 'lang_id'),	);	$schema_data['phpbb_ranks'] = array(		'COLUMNS'		=> array(			'rank_id'				=> array('UINT', NULL, 'auto_increment'),			'rank_title'			=> array('VCHAR_UNI', ''),			'rank_min'				=> array('UINT', 0),			'rank_special'			=> array('BOOL', 0),			'rank_image'			=> array('VCHAR', ''),		),		'PRIMARY_KEY'	=> 'rank_id',	);	$schema_data['phpbb_reports'] = array(		'COLUMNS'		=> array(			'report_id'				=> array('UINT', NULL, 'auto_increment'),			'reason_id'				=> array('USINT', 0),			'post_id'				=> array('UINT', 0),			'pm_id'					=> array('UINT', 0),			'user_id'				=> array('UINT', 0),			'user_notify'			=> array('BOOL', 0),			'report_closed'			=> array('BOOL', 0),			'report_time'			=> array('TIMESTAMP', 0),			'report_text'			=> array('MTEXT_UNI', ''),		),		'PRIMARY_KEY'	=> 'report_id',		'KEYS'			=> array(			'post_id'			=> array('INDEX', 'post_id'),			'pm_id'				=> array('INDEX', 'pm_id'),		),	);	$schema_data['phpbb_reports_reasons'] = array(		'COLUMNS'		=> array(			'reason_id'				=> array('USINT', NULL, 'auto_increment'),			'reason_title'			=> array('VCHAR_UNI', ''),			'reason_description'	=> array('MTEXT_UNI', ''),			'reason_order'			=> array('USINT', 0),		),		'PRIMARY_KEY'	=> 'reason_id',	);	$schema_data['phpbb_search_results'] = array(		'COLUMNS'		=> array(			'search_key'			=> array('VCHAR:32', ''),			'search_time'			=> array('TIMESTAMP', 0),			'search_keywords'		=> array('MTEXT_UNI', ''),			'search_authors'		=> array('MTEXT', ''),		),		'PRIMARY_KEY'	=> 'search_key',	);	$schema_data['phpbb_search_wordlist'] = array(		'COLUMNS'		=> array(			'word_id'			=> array('UINT', NULL, 'auto_increment'),			'word_text'			=> array('VCHAR_UNI', ''),			'word_common'		=> array('BOOL', 0),			'word_count'		=> array('UINT', 0),		),		'PRIMARY_KEY'	=> 'word_id',		'KEYS'			=> array(			'wrd_txt'			=> array('UNIQUE', 'word_text'),			'wrd_cnt'			=> array('INDEX', 'word_count'),		),	);	$schema_data['phpbb_search_wordmatch'] = array(		'COLUMNS'		=> array(			'post_id'			=> array('UINT', 0),			'word_id'			=> array('UINT', 0),			'title_match'		=> array('BOOL', 0),		),		'KEYS'			=> array(			'unq_mtch'			=> array('UNIQUE', array('word_id', 'post_id', 'title_match')),			'word_id'			=> array('INDEX', 'word_id'),			'post_id'			=> array('INDEX', 'post_id'),		),	);	$schema_data['phpbb_sessions'] = array(		'COLUMNS'		=> array(			'session_id'			=> array('CHAR:32', ''),			'session_user_id'		=> array('UINT', 0),			'session_forum_id'		=> array('UINT', 0),			'session_last_visit'	=> array('TIMESTAMP', 0),			'session_start'			=> array('TIMESTAMP', 0),			'session_time'			=> array('TIMESTAMP', 0),			'session_ip'			=> array('VCHAR:40', ''),			'session_browser'		=> array('VCHAR:150', ''),			'session_forwarded_for'	=> array('VCHAR:255', ''),			'session_page'			=> array('VCHAR_UNI', ''),			'session_viewonline'	=> array('BOOL', 1),			'session_autologin'		=> array('BOOL', 0),			'session_admin'			=> array('BOOL', 0),		),		'PRIMARY_KEY'	=> 'session_id',		'KEYS'			=> array(			'session_time'		=> array('INDEX', 'session_time'),			'session_user_id'	=> array('INDEX', 'session_user_id'),			'session_fid'		=> array('INDEX', 'session_forum_id'),		),	);	$schema_data['phpbb_sessions_keys'] = array(		'COLUMNS'		=> array(			'key_id'			=> array('CHAR:32', ''),			'user_id'			=> array('UINT', 0),			'last_ip'			=> array('VCHAR:40', ''),			'last_login'		=> array('TIMESTAMP', 0),		),		'PRIMARY_KEY'	=> array('key_id', 'user_id'),		'KEYS'			=> array(			'last_login'		=> array('INDEX', 'last_login'),		),	);	$schema_data['phpbb_sitelist'] = array(		'COLUMNS'		=> array(			'site_id'		=> array('UINT', NULL, 'auto_increment'),			'site_ip'		=> array('VCHAR:40', ''),			'site_hostname'	=> array('VCHAR', ''),			'ip_exclude'	=> array('BOOL', 0),		),		'PRIMARY_KEY'		=> 'site_id',	);	$schema_data['phpbb_smilies'] = array(		'COLUMNS'		=> array(			'smiley_id'			=> array('UINT', NULL, 'auto_increment'),			// We may want to set 'code' to VCHAR:50 or check if unicode support is possible... at the moment only ASCII characters are allowed.			'code'				=> array('VCHAR_UNI:50', ''),			'emotion'			=> array('VCHAR_UNI:50', ''),			'smiley_url'		=> array('VCHAR:50', ''),			'smiley_width'		=> array('USINT', 0),			'smiley_height'		=> array('USINT', 0),			'smiley_order'		=> array('UINT', 0),			'display_on_posting'=> array('BOOL', 1),		),		'PRIMARY_KEY'	=> 'smiley_id',		'KEYS'			=> array(			'display_on_post'		=> array('INDEX', 'display_on_posting'),		),	);	$schema_data['phpbb_styles'] = array(		'COLUMNS'		=> array(			'style_id'				=> array('UINT', NULL, 'auto_increment'),			'style_name'			=> array('VCHAR_UNI:255', ''),			'style_copyright'		=> array('VCHAR_UNI', ''),			'style_active'			=> array('BOOL', 1),			'template_id'			=> array('UINT', 0),			'theme_id'				=> array('UINT', 0),			'imageset_id'			=> array('UINT', 0),		),		'PRIMARY_KEY'	=> 'style_id',		'KEYS'			=> array(			'style_name'		=> array('UNIQUE', 'style_name'),			'template_id'		=> array('INDEX', 'template_id'),			'theme_id'			=> array('INDEX', 'theme_id'),			'imageset_id'		=> array('INDEX', 'imageset_id'),		),	);	$schema_data['phpbb_styles_template'] = array(		'COLUMNS'		=> array(			'template_id'			=> array('UINT', NULL, 'auto_increment'),			'template_name'			=> array('VCHAR_UNI:255', ''),			'template_copyright'	=> array('VCHAR_UNI', ''),			'template_path'			=> array('VCHAR:100', ''),			'bbcode_bitfield'		=> array('VCHAR:255', 'kNg='),			'template_storedb'		=> array('BOOL', 0),			'template_inherits_id'		=> array('UINT:4', 0),			'template_inherit_path'		=> array('VCHAR', ''),		),		'PRIMARY_KEY'	=> 'template_id',		'KEYS'			=> array(			'tmplte_nm'				=> array('UNIQUE', 'template_name'),		),	);	$schema_data['phpbb_styles_template_data'] = array(		'COLUMNS'		=> array(			'template_id'			=> array('UINT', 0),			'template_filename'		=> array('VCHAR:100', ''),			'template_included'		=> array('TEXT', ''),			'template_mtime'		=> array('TIMESTAMP', 0),			'template_data'			=> array('MTEXT_UNI', ''),		),		'KEYS'			=> array(			'tid'					=> array('INDEX', 'template_id'),			'tfn'					=> array('INDEX', 'template_filename'),		),	);	$schema_data['phpbb_styles_theme'] = array(		'COLUMNS'		=> array(			'theme_id'				=> array('UINT', NULL, 'auto_increment'),			'theme_name'			=> array('VCHAR_UNI:255', ''),			'theme_copyright'		=> array('VCHAR_UNI', ''),			'theme_path'			=> array('VCHAR:100', ''),			'theme_storedb'			=> array('BOOL', 0),			'theme_mtime'			=> array('TIMESTAMP', 0),			'theme_data'			=> array('MTEXT_UNI', ''),		),		'PRIMARY_KEY'	=> 'theme_id',		'KEYS'			=> array(			'theme_name'		=> array('UNIQUE', 'theme_name'),		),	);	$schema_data['phpbb_styles_imageset'] = array(		'COLUMNS'		=> array(			'imageset_id'				=> array('UINT', NULL, 'auto_increment'),			'imageset_name'				=> array('VCHAR_UNI:255', ''),			'imageset_copyright'		=> array('VCHAR_UNI', ''),			'imageset_path'				=> array('VCHAR:100', ''),		),		'PRIMARY_KEY'		=> 'imageset_id',		'KEYS'				=> array(			'imgset_nm'			=> array('UNIQUE', 'imageset_name'),		),	);	$schema_data['phpbb_styles_imageset_data'] = array(		'COLUMNS'		=> array(			'image_id'				=> array('UINT', NULL, 'auto_increment'),			'image_name'			=> array('VCHAR:200', ''),			'image_filename'		=> array('VCHAR:200', ''),			'image_lang'			=> array('VCHAR:30', ''),			'image_height'			=> array('USINT', 0),			'image_width'			=> array('USINT', 0),			'imageset_id'			=> array('UINT', 0),		),		'PRIMARY_KEY'		=> 'image_id',		'KEYS'				=> array(			'i_d'			=> array('INDEX', 'imageset_id'),		),	);	$schema_data['phpbb_topics'] = array(		'COLUMNS'		=> array(			'topic_id'					=> array('UINT', NULL, 'auto_increment'),			'forum_id'					=> array('UINT', 0),			'icon_id'					=> array('UINT', 0),			'topic_attachment'			=> array('BOOL', 0),			'topic_approved'			=> array('BOOL', 1),			'topic_reported'			=> array('BOOL', 0),			'topic_title'				=> array('STEXT_UNI', '', 'true_sort'),			'topic_poster'				=> array('UINT', 0),			'topic_time'				=> array('TIMESTAMP', 0),			'topic_time_limit'			=> array('TIMESTAMP', 0),			'topic_views'				=> array('UINT', 0),			'topic_replies'				=> array('UINT', 0),			'topic_replies_real'		=> array('UINT', 0),			'topic_status'				=> array('TINT:3', 0),			'topic_type'				=> array('TINT:3', 0),			'topic_first_post_id'		=> array('UINT', 0),			'topic_first_poster_name'	=> array('VCHAR_UNI', ''),			'topic_first_poster_colour'	=> array('VCHAR:6', ''),			'topic_last_post_id'		=> array('UINT', 0),			'topic_last_poster_id'		=> array('UINT', 0),			'topic_last_poster_name'	=> array('VCHAR_UNI', ''),			'topic_last_poster_colour'	=> array('VCHAR:6', ''),			'topic_last_post_subject'	=> array('STEXT_UNI', ''),			'topic_last_post_time'		=> array('TIMESTAMP', 0),			'topic_last_view_time'		=> array('TIMESTAMP', 0),			'topic_moved_id'			=> array('UINT', 0),			'topic_bumped'				=> array('BOOL', 0),			'topic_bumper'				=> array('UINT', 0),			'poll_title'				=> array('STEXT_UNI', ''),			'poll_start'				=> array('TIMESTAMP', 0),			'poll_length'				=> array('TIMESTAMP', 0),			'poll_max_options'			=> array('TINT:4', 1),			'poll_last_vote'			=> array('TIMESTAMP', 0),			'poll_vote_change'			=> array('BOOL', 0),		),		'PRIMARY_KEY'	=> 'topic_id',		'KEYS'			=> array(			'forum_id'			=> array('INDEX', 'forum_id'),			'forum_id_type'		=> array('INDEX', array('forum_id', 'topic_type')),			'last_post_time'	=> array('INDEX', 'topic_last_post_time'),			'topic_approved'	=> array('INDEX', 'topic_approved'),			'forum_appr_last'	=> array('INDEX', array('forum_id', 'topic_approved', 'topic_last_post_id')),			'fid_time_moved'	=> array('INDEX', array('forum_id', 'topic_last_post_time', 'topic_moved_id')),		),	);	$schema_data['phpbb_topics_track'] = array(		'COLUMNS'		=> array(			'user_id'			=> array('UINT', 0),			'topic_id'			=> array('UINT', 0),			'forum_id'			=> array('UINT', 0),			'mark_time'			=> array('TIMESTAMP', 0),		),		'PRIMARY_KEY'	=> array('user_id', 'topic_id'),		'KEYS'			=> array(			'topic_id'			=> array('INDEX', 'topic_id'),			'forum_id'			=> array('INDEX', 'forum_id'),		),	);	$schema_data['phpbb_topics_posted'] = array(		'COLUMNS'		=> array(			'user_id'			=> array('UINT', 0),			'topic_id'			=> array('UINT', 0),			'topic_posted'		=> array('BOOL', 0),		),		'PRIMARY_KEY'	=> array('user_id', 'topic_id'),	);	$schema_data['phpbb_topics_watch'] = array(		'COLUMNS'		=> array(			'topic_id'			=> array('UINT', 0),			'user_id'			=> array('UINT', 0),			'notify_status'		=> array('BOOL', 0),		),		'KEYS'			=> array(			'topic_id'			=> array('INDEX', 'topic_id'),			'user_id'			=> array('INDEX', 'user_id'),			'notify_stat'		=> array('INDEX', 'notify_status'),		),	);	$schema_data['phpbb_user_group'] = array(		'COLUMNS'		=> array(			'group_id'			=> array('UINT', 0),			'user_id'			=> array('UINT', 0),			'group_leader'		=> array('BOOL', 0),			'user_pending'		=> array('BOOL', 1),		),		'KEYS'			=> array(			'group_id'			=> array('INDEX', 'group_id'),			'user_id'			=> array('INDEX', 'user_id'),			'group_leader'		=> array('INDEX', 'group_leader'),		),	);	$schema_data['phpbb_users'] = array(		'COLUMNS'		=> array(			'user_id'					=> array('UINT', NULL, 'auto_increment'),			'user_type'					=> array('TINT:2', 0),			'group_id'					=> array('UINT', 3),			'user_permissions'			=> array('MTEXT', ''),			'user_perm_from'			=> array('UINT', 0),			'user_ip'					=> array('VCHAR:40', ''),			'user_regdate'				=> array('TIMESTAMP', 0),			'username'					=> array('VCHAR_CI', ''),			'username_clean'			=> array('VCHAR_CI', ''),			'user_password'				=> array('VCHAR_UNI:40', ''),			'user_passchg'				=> array('TIMESTAMP', 0),			'user_pass_convert'			=> array('BOOL', 0),			'user_email'				=> array('VCHAR_UNI:100', ''),			'user_email_hash'			=> array('BINT', 0),			'user_birthday'				=> array('VCHAR:10', ''),			'user_lastvisit'			=> array('TIMESTAMP', 0),			'user_lastmark'				=> array('TIMESTAMP', 0),			'user_lastpost_time'		=> array('TIMESTAMP', 0),			'user_lastpage'				=> array('VCHAR_UNI:200', ''),			'user_last_confirm_key'		=> array('VCHAR:10', ''),			'user_last_search'			=> array('TIMESTAMP', 0),			'user_warnings'				=> array('TINT:4', 0),			'user_last_warning'			=> array('TIMESTAMP', 0),			'user_login_attempts'		=> array('TINT:4', 0),			'user_inactive_reason'		=> array('TINT:2', 0),			'user_inactive_time'		=> array('TIMESTAMP', 0),			'user_posts'				=> array('UINT', 0),			'user_lang'					=> array('VCHAR:30', ''),			'user_timezone'				=> array('DECIMAL', 0),			'user_dst'					=> array('BOOL', 0),			'user_dateformat'			=> array('VCHAR_UNI:30', 'd M Y H:i'),			'user_style'				=> array('UINT', 0),			'user_rank'					=> array('UINT', 0),			'user_colour'				=> array('VCHAR:6', ''),			'user_new_privmsg'			=> array('INT:4', 0),			'user_unread_privmsg'		=> array('INT:4', 0),			'user_last_privmsg'			=> array('TIMESTAMP', 0),			'user_message_rules'		=> array('BOOL', 0),			'user_full_folder'			=> array('INT:11', -3),			'user_emailtime'			=> array('TIMESTAMP', 0),			'user_topic_show_days'		=> array('USINT', 0),			'user_topic_sortby_type'	=> array('VCHAR:1', 't'),			'user_topic_sortby_dir'		=> array('VCHAR:1', 'd'),			'user_post_show_days'		=> array('USINT', 0),			'user_post_sortby_type'		=> array('VCHAR:1', 't'),			'user_post_sortby_dir'		=> array('VCHAR:1', 'a'),			'user_notify'				=> array('BOOL', 0),			'user_notify_pm'			=> array('BOOL', 1),			'user_notify_type'			=> array('TINT:4', 0),			'user_allow_pm'				=> array('BOOL', 1),			'user_allow_viewonline'		=> array('BOOL', 1),			'user_allow_viewemail'		=> array('BOOL', 1),			'user_allow_massemail'		=> array('BOOL', 1),			'user_options'				=> array('UINT:11', 230271),			'user_avatar'				=> array('VCHAR', ''),			'user_avatar_type'			=> array('TINT:2', 0),			'user_avatar_width'			=> array('USINT', 0),			'user_avatar_height'		=> array('USINT', 0),			'user_sig'					=> array('MTEXT_UNI', ''),			'user_sig_bbcode_uid'		=> array('VCHAR:8', ''),			'user_sig_bbcode_bitfield'	=> array('VCHAR:255', ''),			'user_from'					=> array('VCHAR_UNI:100', ''),			'user_icq'					=> array('VCHAR:15', ''),			'user_aim'					=> array('VCHAR_UNI', ''),			'user_yim'					=> array('VCHAR_UNI', ''),			'user_msnm'					=> array('VCHAR_UNI', ''),			'user_jabber'				=> array('VCHAR_UNI', ''),			'user_website'				=> array('VCHAR_UNI:200', ''),			'user_occ'					=> array('TEXT_UNI', ''),			'user_interests'			=> array('TEXT_UNI', ''),			'user_actkey'				=> array('VCHAR:32', ''),			'user_newpasswd'			=> array('VCHAR_UNI:40', ''),			'user_form_salt'			=> array('VCHAR_UNI:32', ''),			'user_new'					=> array('BOOL', 1),			'user_reminded'				=> array('TINT:4', 0),			'user_reminded_time'		=> array('TIMESTAMP', 0),		),		'PRIMARY_KEY'	=> 'user_id',		'KEYS'			=> array(			'user_birthday'				=> array('INDEX', 'user_birthday'),			'user_email_hash'			=> array('INDEX', 'user_email_hash'),			'user_type'					=> array('INDEX', 'user_type'),			'username_clean'			=> array('UNIQUE', 'username_clean'),		),	);	$schema_data['phpbb_warnings'] = array(		'COLUMNS'		=> array(			'warning_id'			=> array('UINT', NULL, 'auto_increment'),			'user_id'				=> array('UINT', 0),			'post_id'				=> array('UINT', 0),			'log_id'				=> array('UINT', 0),			'warning_time'			=> array('TIMESTAMP', 0),		),		'PRIMARY_KEY'	=> 'warning_id',	);	$schema_data['phpbb_words'] = array(		'COLUMNS'		=> array(			'word_id'				=> array('UINT', NULL, 'auto_increment'),			'word'					=> array('VCHAR_UNI', ''),			'replacement'			=> array('VCHAR_UNI', ''),		),		'PRIMARY_KEY'	=> 'word_id',	);	$schema_data['phpbb_zebra'] = array(		'COLUMNS'		=> array(			'user_id'				=> array('UINT', 0),			'zebra_id'				=> array('UINT', 0),			'friend'				=> array('BOOL', 0),			'foe'					=> array('BOOL', 0),		),		'PRIMARY_KEY'	=> array('user_id', 'zebra_id'),	);	return $schema_data;}?>
<?php/**** @package dbal* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @ignore*/if (!defined('IN_PHPBB')){	exit;}include_once($phpbb_root_path . 'includes/db/dbal.' . $phpEx);/*** MySQLi Database Abstraction Layer* mysqli-extension has to be compiled with:* MySQL 4.1+ or MySQL 5.0+* @package dbal*/class dbal_mysqli extends dbal{	var $multi_insert = true;	/**	* Connect to server	*/	function sql_connect($sqlserver, $sqluser, $sqlpassword, $database, $port = false, $persistency = false , $new_link = false)	{		// Mysqli extension supports persistent connection since PHP 5.3.0		$this->persistency = (version_compare(PHP_VERSION, '5.3.0', '>=')) ? $persistency : false;		$this->user = $sqluser;		// If persistent connection, set dbhost to localhost when empty and prepend it with 'p:' prefix		$this->server = ($this->persistency) ? 'p:' . (($sqlserver) ? $sqlserver : 'localhost') : $sqlserver;		$this->dbname = $database;		$port = (!$port) ? NULL : $port;		// If port is set and it is not numeric, most likely mysqli socket is set.		// Try to map it to the $socket parameter.		$socket = NULL;		if ($port)		{			if (is_numeric($port))			{				$port = (int) $port;			}			else			{				$socket = $port;				$port = NULL;			}		}		$this->db_connect_id = @mysqli_connect($this->server, $this->user, $sqlpassword, $this->dbname, $port, $socket);		if ($this->db_connect_id && $this->dbname != '')		{			@mysqli_query($this->db_connect_id, "SET NAMES 'utf8'");			// enforce strict mode on databases that support it			if (version_compare($this->sql_server_info(true), '5.0.2', '>='))			{				$result = @mysqli_query($this->db_connect_id, 'SELECT @@session.sql_mode AS sql_mode');				$row = @mysqli_fetch_assoc($result);				@mysqli_free_result($result);				$modes = array_map('trim', explode(',', $row['sql_mode']));				// TRADITIONAL includes STRICT_ALL_TABLES and STRICT_TRANS_TABLES				if (!in_array('TRADITIONAL', $modes))				{					if (!in_array('STRICT_ALL_TABLES', $modes))					{						$modes[] = 'STRICT_ALL_TABLES';					}					if (!in_array('STRICT_TRANS_TABLES', $modes))					{						$modes[] = 'STRICT_TRANS_TABLES';					}				}				$mode = implode(',', $modes);				@mysqli_query($this->db_connect_id, "SET SESSION sql_mode='{$mode}'");			}			return $this->db_connect_id;		}		return $this->sql_error('');	}	/**	* Version information about used database	* @param bool $use_cache If true, it is safe to retrieve the value from the cache	* @return string sql server version	*/	function sql_server_info($raw = false, $use_cache = true)	{		global $cache;		if (!$use_cache || empty($cache) || ($this->sql_server_version = $cache->get('mysqli_version')) === false)		{			$result = @mysqli_query($this->db_connect_id, 'SELECT VERSION() AS version');			$row = @mysqli_fetch_assoc($result);			@mysqli_free_result($result);			$this->sql_server_version = $row['version'];			if (!empty($cache) && $use_cache)			{				$cache->put('mysqli_version', $this->sql_server_version);			}		}		return ($raw) ? $this->sql_server_version : 'MySQL(i) ' . $this->sql_server_version;	}	/**	* SQL Transaction	* @access private	*/	function _sql_transaction($status = 'begin')	{		switch ($status)		{			case 'begin':				return @mysqli_autocommit($this->db_connect_id, false);			break;			case 'commit':				$result = @mysqli_commit($this->db_connect_id);				@mysqli_autocommit($this->db_connect_id, true);				return $result;			break;			case 'rollback':				$result = @mysqli_rollback($this->db_connect_id);				@mysqli_autocommit($this->db_connect_id, true);				return $result;			break;		}		return true;	}	/**	* Base query method	*	* @param	string	$query		Contains the SQL query which shall be executed	* @param	int		$cache_ttl	Either 0 to avoid caching or the time in seconds which the result shall be kept in cache	* @return	mixed				When casted to bool the returned value returns true on success and false on failure	*	* @access	public	*/	function sql_query($query = '', $cache_ttl = 0)	{		if ($query != '')		{			global $cache;			// EXPLAIN only in extra debug mode			if (defined('DEBUG_EXTRA'))			{				$this->sql_report('start', $query);			}			$this->query_result = ($cache_ttl && method_exists($cache, 'sql_load')) ? $cache->sql_load($query) : false;			$this->sql_add_num_queries($this->query_result);			if ($this->query_result === false)			{				if (($this->query_result = @mysqli_query($this->db_connect_id, $query)) === false)				{					$this->sql_error($query);				}				if (defined('DEBUG_EXTRA'))				{					$this->sql_report('stop', $query);				}				if ($cache_ttl && method_exists($cache, 'sql_save'))				{					$cache->sql_save($query, $this->query_result, $cache_ttl);				}			}			else if (defined('DEBUG_EXTRA'))			{				$this->sql_report('fromcache', $query);			}		}		else		{			return false;		}		return $this->query_result;	}	/**	* Build LIMIT query	*/	function _sql_query_limit($query, $total, $offset = 0, $cache_ttl = 0)	{		$this->query_result = false;		// if $total is set to 0 we do not want to limit the number of rows		if ($total == 0)		{			// MySQL 4.1+ no longer supports -1 in limit queries			$total = '18446744073709551615';		}		$query .= "\n LIMIT " . ((!empty($offset)) ? $offset . ', ' . $total : $total);		return $this->sql_query($query, $cache_ttl);	}	/**	* Return number of affected rows	*/	function sql_affectedrows()	{		return ($this->db_connect_id) ? @mysqli_affected_rows($this->db_connect_id) : false;	}	/**	* Fetch current row	*/	function sql_fetchrow($query_id = false)	{		global $cache;		if ($query_id === false)		{			$query_id = $this->query_result;		}		if (!is_object($query_id) && isset($cache->sql_rowset[$query_id]))		{			return $cache->sql_fetchrow($query_id);		}		if ($query_id !== false)		{			$result = @mysqli_fetch_assoc($query_id);			return $result !== null ? $result : false;		}		return false;	}	/**	* Seek to given row number	* rownum is zero-based	*/	function sql_rowseek($rownum, &$query_id)	{		global $cache;		if ($query_id === false)		{			$query_id = $this->query_result;		}		if (!is_object($query_id) && isset($cache->sql_rowset[$query_id]))		{			return $cache->sql_rowseek($rownum, $query_id);		}		return ($query_id !== false) ? @mysqli_data_seek($query_id, $rownum) : false;	}	/**	* Get last inserted id after insert statement	*/	function sql_nextid()	{		return ($this->db_connect_id) ? @mysqli_insert_id($this->db_connect_id) : false;	}	/**	* Free sql result	*/	function sql_freeresult($query_id = false)	{		global $cache;		if ($query_id === false)		{			$query_id = $this->query_result;		}		if (!is_object($query_id) && isset($cache->sql_rowset[$query_id]))		{			return $cache->sql_freeresult($query_id);		}		return @mysqli_free_result($query_id);	}	/**	* Escape string used in sql query	*/	function sql_escape($msg)	{		return @mysqli_real_escape_string($this->db_connect_id, $msg);	}	/**	* Build LIKE expression	* @access private	*/	function _sql_like_expression($expression)	{		return $expression;	}	/**	* Build db-specific query data	* @access private	*/	function _sql_custom_build($stage, $data)	{		switch ($stage)		{			case 'FROM':				$data = '(' . $data . ')';			break;		}		return $data;	}	/**	* return sql error array	* @access private	*/	function _sql_error()	{		if (!$this->db_connect_id)		{			return array(				'message'	=> @mysqli_connect_error(),				'code'		=> @mysqli_connect_errno()			);		}		return array(			'message'	=> @mysqli_error($this->db_connect_id),			'code'		=> @mysqli_errno($this->db_connect_id)		);	}	/**	* Close sql connection	* @access private	*/	function _sql_close()	{		return @mysqli_close($this->db_connect_id);	}	/**	* Build db-specific report	* @access private	*/	function _sql_report($mode, $query = '')	{		static $test_prof;		// current detection method, might just switch to see the existance of INFORMATION_SCHEMA.PROFILING		if ($test_prof === null)		{			$test_prof = false;			if (strpos(mysqli_get_server_info($this->db_connect_id), 'community') !== false)			{				$ver = mysqli_get_server_version($this->db_connect_id);				if ($ver >= 50037 && $ver < 50100)				{					$test_prof = true;				}			}		}		switch ($mode)		{			case 'start':				$explain_query = $query;				if (preg_match('/UPDATE ([a-z0-9_]+).*?WHERE(.*)/s', $query, $m))				{					$explain_query = 'SELECT * FROM ' . $m[1] . ' WHERE ' . $m[2];				}				else if (preg_match('/DELETE FROM ([a-z0-9_]+).*?WHERE(.*)/s', $query, $m))				{					$explain_query = 'SELECT * FROM ' . $m[1] . ' WHERE ' . $m[2];				}				if (preg_match('/^SELECT/', $explain_query))				{					$html_table = false;					// begin profiling					if ($test_prof)					{						@mysqli_query($this->db_connect_id, 'SET profiling = 1;');					}					if ($result = @mysqli_query($this->db_connect_id, "EXPLAIN $explain_query"))					{						while ($row = @mysqli_fetch_assoc($result))						{							$html_table = $this->sql_report('add_select_row', $query, $html_table, $row);						}					}					@mysqli_free_result($result);					if ($html_table)					{						$this->html_hold .= '</table>';					}					if ($test_prof)					{						$html_table = false;						// get the last profile						if ($result = @mysqli_query($this->db_connect_id, 'SHOW PROFILE ALL;'))						{							$this->html_hold .= '<br />';							while ($row = @mysqli_fetch_assoc($result))							{								// make <unknown> HTML safe								if (!empty($row['Source_function']))								{									$row['Source_function'] = str_replace(array('<', '>'), array('&lt;', '&gt;'), $row['Source_function']);								}								// remove unsupported features								foreach ($row as $key => $val)								{									if ($val === null)									{										unset($row[$key]);									}								}								$html_table = $this->sql_report('add_select_row', $query, $html_table, $row);							}						}						@mysqli_free_result($result);						if ($html_table)						{							$this->html_hold .= '</table>';						}						@mysqli_query($this->db_connect_id, 'SET profiling = 0;');					}				}			break;			case 'fromcache':				$endtime = explode(' ', microtime());				$endtime = $endtime[0] + $endtime[1];				$result = @mysqli_query($this->db_connect_id, $query);				while ($void = @mysqli_fetch_assoc($result))				{					// Take the time spent on parsing rows into account				}				@mysqli_free_result($result);				$splittime = explode(' ', microtime());				$splittime = $splittime[0] + $splittime[1];				$this->sql_report('record_fromcache', $query, $endtime, $splittime);			break;		}	}}?>
<?php/**** @package phpBB3* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @ignore*/if (!defined('IN_PHPBB')){	exit;}/*** Obtain user_ids from usernames or vice versa. Returns false on* success else the error string** @param array &$user_id_ary The user ids to check or empty if usernames used* @param array &$username_ary The usernames to check or empty if user ids used* @param mixed $user_type Array of user types to check, false if not restricting by user type*/function user_get_id_name(&$user_id_ary, &$username_ary, $user_type = false){	global $db;	// Are both arrays already filled? Yep, return else	// are neither array filled?	if ($user_id_ary && $username_ary)	{		return false;	}	else if (!$user_id_ary && !$username_ary)	{		return 'NO_USERS';	}	$which_ary = ($user_id_ary) ? 'user_id_ary' : 'username_ary';	if ($$which_ary && !is_array($$which_ary))	{		$$which_ary = array($$which_ary);	}	$sql_in = ($which_ary == 'user_id_ary') ? array_map('intval', $$which_ary) : array_map('utf8_clean_string', $$which_ary);	unset($$which_ary);	$user_id_ary = $username_ary = array();	// Grab the user id/username records	$sql_where = ($which_ary == 'user_id_ary') ? 'user_id' : 'username_clean';	$sql = 'SELECT user_id, username		FROM ' . USERS_TABLE . '		WHERE ' . $db->sql_in_set($sql_where, $sql_in);	if ($user_type !== false && !empty($user_type))	{		$sql .= ' AND ' . $db->sql_in_set('user_type', $user_type);	}	$result = $db->sql_query($sql);	if (!($row = $db->sql_fetchrow($result)))	{		$db->sql_freeresult($result);		return 'NO_USERS';	}	do	{		$username_ary[$row['user_id']] = $row['username'];		$user_id_ary[] = $row['user_id'];	}	while ($row = $db->sql_fetchrow($result));	$db->sql_freeresult($result);	return false;}/*** Get latest registered username and update database to reflect it*/function update_last_username(){	global $db;	// Get latest username	$sql = 'SELECT user_id, username, user_colour		FROM ' . USERS_TABLE . '		WHERE user_type IN (' . USER_NORMAL . ', ' . USER_FOUNDER . ')		ORDER BY user_id DESC';	$result = $db->sql_query_limit($sql, 1);	$row = $db->sql_fetchrow($result);	$db->sql_freeresult($result);	if ($row)	{		set_config('newest_user_id', $row['user_id'], true);		set_config('newest_username', $row['username'], true);		set_config('newest_user_colour', $row['user_colour'], true);	}}/*** Updates a username across all relevant tables/fields** @param string $old_name the old/current username* @param string $new_name the new username*/function user_update_name($old_name, $new_name){	global $config, $db, $cache;	$update_ary = array(		FORUMS_TABLE			=> array('forum_last_poster_name'),		MODERATOR_CACHE_TABLE	=> array('username'),		POSTS_TABLE				=> array('post_username'),		TOPICS_TABLE			=> array('topic_first_poster_name', 'topic_last_poster_name'),	);	foreach ($update_ary as $table => $field_ary)	{		foreach ($field_ary as $field)		{			$sql = "UPDATE $table				SET $field = '" . $db->sql_escape($new_name) . "'				WHERE $field = '" . $db->sql_escape($old_name) . "'";			$db->sql_query($sql);		}	}	if ($config['newest_username'] == $old_name)	{		set_config('newest_username', $new_name, true);	}	// Because some tables/caches use username-specific data we need to purge this here.	$cache->destroy('sql', MODERATOR_CACHE_TABLE);}/*** Adds an user** @param mixed $user_row An array containing the following keys (and the appropriate values): username, group_id (the group to place the user in), user_email and the user_type(usually 0). Additional entries not overridden by defaults will be forwarded.* @param string $cp_data custom profile fields, see custom_profile::build_insert_sql_array* @return the new user's ID.*/function user_add($user_row, $cp_data = false){	global $db, $user, $auth, $config, $phpbb_root_path, $phpEx;	if (empty($user_row['username']) || !isset($user_row['group_id']) || !isset($user_row['user_email']) || !isset($user_row['user_type']))	{		return false;	}	$username_clean = utf8_clean_string($user_row['username']);	if (empty($username_clean))	{		return false;	}	$sql_ary = array(		'username'			=> $user_row['username'],		'username_clean'	=> $username_clean,		'user_password'		=> (isset($user_row['user_password'])) ? $user_row['user_password'] : '',		'user_pass_convert'	=> 0,		'user_email'		=> strtolower($user_row['user_email']),		'user_email_hash'	=> phpbb_email_hash($user_row['user_email']),		'group_id'			=> $user_row['group_id'],		'user_type'			=> $user_row['user_type'],	);	// These are the additional vars able to be specified	$additional_vars = array(		'user_permissions'	=> '',		'user_timezone'		=> $config['board_timezone'],		'user_dateformat'	=> $config['default_dateformat'],		'user_lang'			=> $config['default_lang'],		'user_style'		=> (int) $config['default_style'],		'user_actkey'		=> '',		'user_ip'			=> '',		'user_regdate'		=> time(),		'user_passchg'		=> time(),		'user_options'		=> 230271,		// We do not set the new flag here - registration scripts need to specify it		'user_new'			=> 0,		'user_inactive_reason'	=> 0,		'user_inactive_time'	=> 0,		'user_lastmark'			=> time(),		'user_lastvisit'		=> 0,		'user_lastpost_time'	=> 0,		'user_lastpage'			=> '',		'user_posts'			=> 0,		'user_dst'				=> (int) $config['board_dst'],		'user_colour'			=> '',		'user_occ'				=> '',		'user_interests'		=> '',		'user_avatar'			=> '',		'user_avatar_type'		=> 0,		'user_avatar_width'		=> 0,		'user_avatar_height'	=> 0,		'user_new_privmsg'		=> 0,		'user_unread_privmsg'	=> 0,		'user_last_privmsg'		=> 0,		'user_message_rules'	=> 0,		'user_full_folder'		=> PRIVMSGS_NO_BOX,		'user_emailtime'		=> 0,		'user_notify'			=> 0,		'user_notify_pm'		=> 1,		'user_notify_type'		=> NOTIFY_EMAIL,		'user_allow_pm'			=> 1,		'user_allow_viewonline'	=> 1,		'user_allow_viewemail'	=> 1,		'user_allow_massemail'	=> 1,		'user_sig'					=> '',		'user_sig_bbcode_uid'		=> '',		'user_sig_bbcode_bitfield'	=> '',		'user_form_salt'			=> unique_id(),	);	// Now fill the sql array with not required variables	foreach ($additional_vars as $key => $default_value)	{		$sql_ary[$key] = (isset($user_row[$key])) ? $user_row[$key] : $default_value;	}	// Any additional variables in $user_row not covered above?	$remaining_vars = array_diff(array_keys($user_row), array_keys($sql_ary));	// Now fill our sql array with the remaining vars	if (sizeof($remaining_vars))	{		foreach ($remaining_vars as $key)		{			$sql_ary[$key] = $user_row[$key];		}	}	$sql = 'INSERT INTO ' . USERS_TABLE . ' ' . $db->sql_build_array('INSERT', $sql_ary);	$db->sql_query($sql);	$user_id = $db->sql_nextid();	// Insert Custom Profile Fields	if ($cp_data !== false && sizeof($cp_data))	{		$cp_data['user_id'] = (int) $user_id;		if (!class_exists('custom_profile'))		{			include_once($phpbb_root_path . 'includes/functions_profile_fields.' . $phpEx);		}		$sql = 'INSERT INTO ' . PROFILE_FIELDS_DATA_TABLE . ' ' .			$db->sql_build_array('INSERT', custom_profile::build_insert_sql_array($cp_data));		$db->sql_query($sql);	}	// Place into appropriate group...	$sql = 'INSERT INTO ' . USER_GROUP_TABLE . ' ' . $db->sql_build_array('INSERT', array(		'user_id'		=> (int) $user_id,		'group_id'		=> (int) $user_row['group_id'],		'user_pending'	=> 0)	);	$db->sql_query($sql);	// Now make it the users default group...	group_set_user_default($user_row['group_id'], array($user_id), false);	// Add to newly registered users group if user_new is 1	if ($config['new_member_post_limit'] && $sql_ary['user_new'])	{		$sql = 'SELECT group_id			FROM ' . GROUPS_TABLE . "			WHERE group_name = 'NEWLY_REGISTERED'				AND group_type = " . GROUP_SPECIAL;		$result = $db->sql_query($sql);		$add_group_id = (int) $db->sql_fetchfield('group_id');		$db->sql_freeresult($result);		if ($add_group_id)		{			// Because these actions only fill the log unneccessarily we skip the add_log() entry with a little hack. :/			$GLOBALS['skip_add_log'] = true;			// Add user to "newly registered users" group and set to default group if admin specified so.			if ($config['new_member_group_default'])			{				group_user_add($add_group_id, $user_id, false, false, true);				$user_row['group_id'] = $add_group_id;			}			else			{				group_user_add($add_group_id, $user_id);			}			unset($GLOBALS['skip_add_log']);		}	}	// set the newest user and adjust the user count if the user is a normal user and no activation mail is sent	if ($user_row['user_type'] == USER_NORMAL || $user_row['user_type'] == USER_FOUNDER)	{		set_config('newest_user_id', $user_id, true);		set_config('newest_username', $user_row['username'], true);		set_config_count('num_users', 1, true);		$sql = 'SELECT group_colour			FROM ' . GROUPS_TABLE . '			WHERE group_id = ' . (int) $user_row['group_id'];		$result = $db->sql_query_limit($sql, 1);		$row = $db->sql_fetchrow($result);		$db->sql_freeresult($result);		set_config('newest_user_colour', $row['group_colour'], true);	}	return $user_id;}/*** Remove User*/function user_delete($mode, $user_id, $post_username = false){	global $cache, $config, $db, $user, $auth;	global $phpbb_root_path, $phpEx;	$sql = 'SELECT *		FROM ' . USERS_TABLE . '		WHERE user_id = ' . $user_id;	$result = $db->sql_query($sql);	$user_row = $db->sql_fetchrow($result);	$db->sql_freeresult($result);	if (!$user_row)	{		return false;	}	// Before we begin, we will remove the reports the user issued.	$sql = 'SELECT r.post_id, p.topic_id		FROM ' . REPORTS_TABLE . ' r, ' . POSTS_TABLE . ' p		WHERE r.user_id = ' . $user_id . '			AND p.post_id = r.post_id';	$result = $db->sql_query($sql);	$report_posts = $report_topics = array();	while ($row = $db->sql_fetchrow($result))	{		$report_posts[] = $row['post_id'];		$report_topics[] = $row['topic_id'];	}	$db->sql_freeresult($result);	if (sizeof($report_posts))	{		$report_posts = array_unique($report_posts);		$report_topics = array_unique($report_topics);		// Get a list of topics that still contain reported posts		$sql = 'SELECT DISTINCT topic_id			FROM ' . POSTS_TABLE . '			WHERE ' . $db->sql_in_set('topic_id', $report_topics) . '				AND post_reported = 1				AND ' . $db->sql_in_set('post_id', $report_posts, true);		$result = $db->sql_query($sql);		$keep_report_topics = array();		while ($row = $db->sql_fetchrow($result))		{			$keep_report_topics[] = $row['topic_id'];		}		$db->sql_freeresult($result);		if (sizeof($keep_report_topics))		{			$report_topics = array_diff($report_topics, $keep_report_topics);		}		unset($keep_report_topics);		// Now set the flags back		$sql = 'UPDATE ' . POSTS_TABLE . '			SET post_reported = 0			WHERE ' . $db->sql_in_set('post_id', $report_posts);		$db->sql_query($sql);		if (sizeof($report_topics))		{			$sql = 'UPDATE ' . TOPICS_TABLE . '				SET topic_reported = 0				WHERE ' . $db->sql_in_set('topic_id', $report_topics);			$db->sql_query($sql);		}	}	// Remove reports	$db->sql_query('DELETE FROM ' . REPORTS_TABLE . ' WHERE user_id = ' . $user_id);	if ($user_row['user_avatar'] && $user_row['user_avatar_type'] == AVATAR_UPLOAD)	{		avatar_delete('user', $user_row);	}	switch ($mode)	{		case 'retain':			$db->sql_transaction('begin');			if ($post_username === false)			{				$post_username = $user->lang['GUEST'];			}			// If the user is inactive and newly registered we assume no posts from this user being there...			if ($user_row['user_type'] == USER_INACTIVE && $user_row['user_inactive_reason'] == INACTIVE_REGISTER && !$user_row['user_posts'])			{			}			else			{				$sql = 'UPDATE ' . FORUMS_TABLE . '					SET forum_last_poster_id = ' . ANONYMOUS . ", forum_last_poster_name = '" . $db->sql_escape($post_username) . "', forum_last_poster_colour = ''					WHERE forum_last_poster_id = $user_id";				$db->sql_query($sql);				$sql = 'UPDATE ' . POSTS_TABLE . '					SET poster_id = ' . ANONYMOUS . ", post_username = '" . $db->sql_escape($post_username) . "'					WHERE poster_id = $user_id";				$db->sql_query($sql);				$sql = 'UPDATE ' . POSTS_TABLE . '					SET post_edit_user = ' . ANONYMOUS . "					WHERE post_edit_user = $user_id";				$db->sql_query($sql);				$sql = 'UPDATE ' . TOPICS_TABLE . '					SET topic_poster = ' . ANONYMOUS . ", topic_first_poster_name = '" . $db->sql_escape($post_username) . "', topic_first_poster_colour = ''					WHERE topic_poster = $user_id";				$db->sql_query($sql);				$sql = 'UPDATE ' . TOPICS_TABLE . '					SET topic_last_poster_id = ' . ANONYMOUS . ", topic_last_poster_name = '" . $db->sql_escape($post_username) . "', topic_last_poster_colour = ''					WHERE topic_last_poster_id = $user_id";				$db->sql_query($sql);				$sql = 'UPDATE ' . ATTACHMENTS_TABLE . '					SET poster_id = ' . ANONYMOUS . "					WHERE poster_id = $user_id";				$db->sql_query($sql);				// Since we change every post by this author, we need to count this amount towards the anonymous user				// Update the post count for the anonymous user				if ($user_row['user_posts'])				{					$sql = 'UPDATE ' . USERS_TABLE . '						SET user_posts = user_posts + ' . $user_row['user_posts'] . '						WHERE user_id = ' . ANONYMOUS;					$db->sql_query($sql);				}			}			$db->sql_transaction('commit');		break;		case 'remove':			if (!function_exists('delete_posts'))			{				include($phpbb_root_path . 'includes/functions_admin.' . $phpEx);			}			// Delete posts, attachments, etc.			delete_posts('poster_id', $user_id);		break;	}	$db->sql_transaction('begin');	$table_ary = array(USERS_TABLE, USER_GROUP_TABLE, TOPICS_WATCH_TABLE, FORUMS_WATCH_TABLE, ACL_USERS_TABLE, TOPICS_TRACK_TABLE, TOPICS_POSTED_TABLE, FORUMS_TRACK_TABLE, PROFILE_FIELDS_DATA_TABLE, MODERATOR_CACHE_TABLE, DRAFTS_TABLE, BOOKMARKS_TABLE, SESSIONS_KEYS_TABLE, PRIVMSGS_FOLDER_TABLE, PRIVMSGS_RULES_TABLE);	foreach ($table_ary as $table)	{		$sql = "DELETE FROM $table			WHERE user_id = $user_id";		$db->sql_query($sql);	}	$cache->destroy('sql', MODERATOR_CACHE_TABLE);	// Delete user log entries about this user	$sql = 'DELETE FROM ' . LOG_TABLE . '		WHERE reportee_id = ' . $user_id;	$db->sql_query($sql);	// Change user_id to anonymous for this users triggered events	$sql = 'UPDATE ' . LOG_TABLE . '		SET user_id = ' . ANONYMOUS . '		WHERE user_id = ' . $user_id;	$db->sql_query($sql);	// Delete the user_id from the zebra table	$sql = 'DELETE FROM ' . ZEBRA_TABLE . '		WHERE user_id = ' . $user_id . '			OR zebra_id = ' . $user_id;	$db->sql_query($sql);	// Delete the user_id from the banlist	$sql = 'DELETE FROM ' . BANLIST_TABLE . '		WHERE ban_userid = ' . $user_id;	$db->sql_query($sql);	// Delete the user_id from the session table	$sql = 'DELETE FROM ' . SESSIONS_TABLE . '		WHERE session_user_id = ' . $user_id;	$db->sql_query($sql);	// Remove any undelivered mails...	$sql = 'SELECT msg_id, user_id		FROM ' . PRIVMSGS_TO_TABLE . '		WHERE author_id = ' . $user_id . '			AND folder_id = ' . PRIVMSGS_NO_BOX;	$result = $db->sql_query($sql);	$undelivered_msg = $undelivered_user = array();	while ($row = $db->sql_fetchrow($result))	{		$undelivered_msg[] = $row['msg_id'];		$undelivered_user[$row['user_id']][] = true;	}	$db->sql_freeresult($result);	if (sizeof($undelivered_msg))	{		$sql = 'DELETE FROM ' . PRIVMSGS_TABLE . '			WHERE ' . $db->sql_in_set('msg_id', $undelivered_msg);		$db->sql_query($sql);	}	$sql = 'DELETE FROM ' . PRIVMSGS_TO_TABLE . '		WHERE author_id = ' . $user_id . '			AND folder_id = ' . PRIVMSGS_NO_BOX;	$db->sql_query($sql);	// Delete all to-information	$sql = 'DELETE FROM ' . PRIVMSGS_TO_TABLE . '		WHERE user_id = ' . $user_id;	$db->sql_query($sql);	// Set the remaining author id to anonymous - this way users are still able to read messages from users being removed	$sql = 'UPDATE ' . PRIVMSGS_TO_TABLE . '		SET author_id = ' . ANONYMOUS . '		WHERE author_id = ' . $user_id;	$db->sql_query($sql);	$sql = 'UPDATE ' . PRIVMSGS_TABLE . '		SET author_id = ' . ANONYMOUS . '		WHERE author_id = ' . $user_id;	$db->sql_query($sql);	foreach ($undelivered_user as $_user_id => $ary)	{		if ($_user_id == $user_id)		{			continue;		}		$sql = 'UPDATE ' . USERS_TABLE . '			SET user_new_privmsg = user_new_privmsg - ' . sizeof($ary) . ',				user_unread_privmsg = user_unread_privmsg - ' . sizeof($ary) . '			WHERE user_id = ' . $_user_id;		$db->sql_query($sql);	}	$db->sql_transaction('commit');	// Reset newest user info if appropriate	if ($config['newest_user_id'] == $user_id)	{		update_last_username();	}	// Decrement number of users if this user is active	if ($user_row['user_type'] != USER_INACTIVE && $user_row['user_type'] != USER_IGNORE)	{		set_config_count('num_users', -1, true);	}	return false;}/*** Flips user_type from active to inactive and vice versa, handles group membership updates** @param string $mode can be flip for flipping from active/inactive, activate or deactivate*/function user_active_flip($mode, $user_id_ary, $reason = INACTIVE_MANUAL){	global $config, $db, $user, $auth;	$deactivated = $activated = 0;	$sql_statements = array();	if (!is_array($user_id_ary))	{		$user_id_ary = array($user_id_ary);	}	if (!sizeof($user_id_ary))	{		return;	}	$sql = 'SELECT user_id, group_id, user_type, user_inactive_reason		FROM ' . USERS_TABLE . '		WHERE ' . $db->sql_in_set('user_id', $user_id_ary);	$result = $db->sql_query($sql);	while ($row = $db->sql_fetchrow($result))	{		$sql_ary = array();		if ($row['user_type'] == USER_IGNORE || $row['user_type'] == USER_FOUNDER ||			($mode == 'activate' && $row['user_type'] != USER_INACTIVE) ||			($mode == 'deactivate' && $row['user_type'] == USER_INACTIVE))		{			continue;		}		if ($row['user_type'] == USER_INACTIVE)		{			$activated++;		}		else		{			$deactivated++;			// Remove the users session key...			$user->reset_login_keys($row['user_id']);		}		$sql_ary += array(			'user_type'				=> ($row['user_type'] == USER_NORMAL) ? USER_INACTIVE : USER_NORMAL,			'user_inactive_time'	=> ($row['user_type'] == USER_NORMAL) ? time() : 0,			'user_inactive_reason'	=> ($row['user_type'] == USER_NORMAL) ? $reason : 0,		);		$sql_statements[$row['user_id']] = $sql_ary;	}	$db->sql_freeresult($result);	if (sizeof($sql_statements))	{		foreach ($sql_statements as $user_id => $sql_ary)		{			$sql = 'UPDATE ' . USERS_TABLE . '				SET ' . $db->sql_build_array('UPDATE', $sql_ary) . '				WHERE user_id = ' . $user_id;			$db->sql_query($sql);		}		$auth->acl_clear_prefetch(array_keys($sql_statements));	}	if ($deactivated)	{		set_config_count('num_users', $deactivated * (-1), true);	}	if ($activated)	{		set_config_count('num_users', $activated, true);	}	// Update latest username	update_last_username();}/*** Add a ban or ban exclusion to the banlist. Bans either a user, an IP or an email address** @param string $mode Type of ban. One of the following: user, ip, email* @param mixed $ban Banned entity. Either string or array with usernames, ips or email addresses* @param int $ban_len Ban length in minutes* @param string $ban_len_other Ban length as a date (YYYY-MM-DD)* @param boolean $ban_exclude Exclude these entities from banning?* @param string $ban_reason String describing the reason for this ban* @return boolean*/function user_ban($mode, $ban, $ban_len, $ban_len_other, $ban_exclude, $ban_reason, $ban_give_reason = ''){	global $db, $user, $auth, $cache;	// Delete stale bans	$sql = 'DELETE FROM ' . BANLIST_TABLE . '		WHERE ban_end < ' . time() . '			AND ban_end <> 0';	$db->sql_query($sql);	$ban_list = (!is_array($ban)) ? array_unique(explode("\n", $ban)) : $ban;	$ban_list_log = implode(', ', $ban_list);	$current_time = time();	// Set $ban_end to the unix time when the ban should end. 0 is a permanent ban.	if ($ban_len)	{		if ($ban_len != -1 || !$ban_len_other)		{			$ban_end = max($current_time, $current_time + ($ban_len) * 60);		}		else		{			$ban_other = explode('-', $ban_len_other);			if (sizeof($ban_other) == 3 && ((int)$ban_other[0] < 9999) &&				(strlen($ban_other[0]) == 4) && (strlen($ban_other[1]) == 2) && (strlen($ban_other[2]) == 2))			{				$time_offset = (isset($user->timezone) && isset($user->dst)) ? (int) $user->timezone + (int) $user->dst : 0;				$ban_end = max($current_time, gmmktime(0, 0, 0, (int)$ban_other[1], (int)$ban_other[2], (int)$ban_other[0]) - $time_offset);			}			else			{				trigger_error('LENGTH_BAN_INVALID', E_USER_WARNING);			}		}	}	else	{		$ban_end = 0;	}	$founder = $founder_names = array();	if (!$ban_exclude)	{		// Create a list of founder...		$sql = 'SELECT user_id, user_email, username_clean			FROM ' . USERS_TABLE . '			WHERE user_type = ' . USER_FOUNDER;		$result = $db->sql_query($sql);		while ($row = $db->sql_fetchrow($result))		{			$founder[$row['user_id']] = $row['user_email'];			$founder_names[$row['user_id']] = $row['username_clean'];		}		$db->sql_freeresult($result);	}	$banlist_ary = array();	switch ($mode)	{		case 'user':			$type = 'ban_userid';			// At the moment we do not support wildcard username banning			// Select the relevant user_ids.			$sql_usernames = array();			foreach ($ban_list as $username)			{				$username = trim($username);				if ($username != '')				{					$clean_name = utf8_clean_string($username);					if ($clean_name == $user->data['username_clean'])					{						trigger_error('CANNOT_BAN_YOURSELF', E_USER_WARNING);					}					if (in_array($clean_name, $founder_names))					{						trigger_error('CANNOT_BAN_FOUNDER', E_USER_WARNING);					}					$sql_usernames[] = $clean_name;				}			}			// Make sure we have been given someone to ban			if (!sizeof($sql_usernames))			{				trigger_error('NO_USER_SPECIFIED', E_USER_WARNING);			}			$sql = 'SELECT user_id				FROM ' . USERS_TABLE . '				WHERE ' . $db->sql_in_set('username_clean', $sql_usernames);			// Do not allow banning yourself, the guest account, or founders.			$non_bannable = array($user->data['user_id'], ANONYMOUS);			if (sizeof($founder))			{				$sql .= ' AND ' . $db->sql_in_set('user_id', array_merge(array_keys($founder), $non_bannable), true);			}			else			{				$sql .= ' AND ' . $db->sql_in_set('user_id', $non_bannable, true);			}			$result = $db->sql_query($sql);			if ($row = $db->sql_fetchrow($result))			{				do				{					$banlist_ary[] = (int) $row['user_id'];				}				while ($row = $db->sql_fetchrow($result));			}			else			{				$db->sql_freeresult($result);				trigger_error('NO_USERS', E_USER_WARNING);			}			$db->sql_freeresult($result);		break;		case 'ip':			$type = 'ban_ip';			foreach ($ban_list as $ban_item)			{				if (preg_match('#^([0-9]{1,3})\.([0-9]{1,3})\.([0-9]{1,3})\.([0-9]{1,3})[ ]*\-[ ]*([0-9]{1,3})\.([0-9]{1,3})\.([0-9]{1,3})\.([0-9]{1,3})$#', trim($ban_item), $ip_range_explode))				{					// This is an IP range					// Don't ask about all this, just don't ask ... !					$ip_1_counter = $ip_range_explode[1];					$ip_1_end = $ip_range_explode[5];					while ($ip_1_counter <= $ip_1_end)					{						$ip_2_counter = ($ip_1_counter == $ip_range_explode[1]) ? $ip_range_explode[2] : 0;						$ip_2_end = ($ip_1_counter < $ip_1_end) ? 254 : $ip_range_explode[6];						if ($ip_2_counter == 0 && $ip_2_end == 254)						{							$ip_2_counter = 256;							$ip_2_fragment = 256;							$banlist_ary[] = "$ip_1_counter.*";						}						while ($ip_2_counter <= $ip_2_end)						{							$ip_3_counter = ($ip_2_counter == $ip_range_explode[2] && $ip_1_counter == $ip_range_explode[1]) ? $ip_range_explode[3] : 0;							$ip_3_end = ($ip_2_counter < $ip_2_end || $ip_1_counter < $ip_1_end) ? 254 : $ip_range_explode[7];							if ($ip_3_counter == 0 && $ip_3_end == 254)							{								$ip_3_counter = 256;								$ip_3_fragment = 256;								$banlist_ary[] = "$ip_1_counter.$ip_2_counter.*";							}							while ($ip_3_counter <= $ip_3_end)							{								$ip_4_counter = ($ip_3_counter == $ip_range_explode[3] && $ip_2_counter == $ip_range_explode[2] && $ip_1_counter == $ip_range_explode[1]) ? $ip_range_explode[4] : 0;								$ip_4_end = ($ip_3_counter < $ip_3_end || $ip_2_counter < $ip_2_end) ? 254 : $ip_range_explode[8];								if ($ip_4_counter == 0 && $ip_4_end == 254)								{									$ip_4_counter = 256;									$ip_4_fragment = 256;									$banlist_ary[] = "$ip_1_counter.$ip_2_counter.$ip_3_counter.*";								}								while ($ip_4_counter <= $ip_4_end)								{									$banlist_ary[] = "$ip_1_counter.$ip_2_counter.$ip_3_counter.$ip_4_counter";									$ip_4_counter++;								}								$ip_3_counter++;							}							$ip_2_counter++;						}						$ip_1_counter++;					}				}				else if (preg_match('#^([0-9]{1,3})\.([0-9\*]{1,3})\.([0-9\*]{1,3})\.([0-9\*]{1,3})$#', trim($ban_item)) || preg_match('#^[a-f0-9:]+\*?$#i', trim($ban_item)))				{					// Normal IP address					$banlist_ary[] = trim($ban_item);				}				else if (preg_match('#^\*$#', trim($ban_item)))				{					// Ban all IPs					$banlist_ary[] = '*';				}				else if (preg_match('#^([\w\-_]\.?){2,}$#is', trim($ban_item)))				{					// hostname					$ip_ary = gethostbynamel(trim($ban_item));					if (!empty($ip_ary))					{						foreach ($ip_ary as $ip)						{							if ($ip)							{								if (strlen($ip) > 40)								{									continue;								}								$banlist_ary[] = $ip;							}						}					}				}				if (empty($banlist_ary))				{					trigger_error('NO_IPS_DEFINED', E_USER_WARNING);				}			}		break;		case 'email':			$type = 'ban_email';			foreach ($ban_list as $ban_item)			{				$ban_item = trim($ban_item);				if (preg_match('#^.*?@*|(([a-z0-9\-]+\.)+([a-z]{2,3}))$#i', $ban_item))				{					if (strlen($ban_item) > 100)					{						continue;					}					if (!sizeof($founder) || !in_array($ban_item, $founder))					{						$banlist_ary[] = $ban_item;					}				}			}			if (sizeof($ban_list) == 0)			{				trigger_error('NO_EMAILS_DEFINED', E_USER_WARNING);			}		break;		default:			trigger_error('NO_MODE', E_USER_WARNING);		break;	}	// Fetch currently set bans of the specified type and exclude state. Prevent duplicate bans.	$sql_where = ($type == 'ban_userid') ? 'ban_userid <> 0' : "$type <> ''";	$sql = "SELECT $type		FROM " . BANLIST_TABLE . "		WHERE $sql_where			AND ban_exclude = " . (int) $ban_exclude;	$result = $db->sql_query($sql);	// Reset $sql_where, because we use it later...	$sql_where = '';	if ($row = $db->sql_fetchrow($result))	{		$banlist_ary_tmp = array();		do		{			switch ($mode)			{				case 'user':					$banlist_ary_tmp[] = $row['ban_userid'];				break;				case 'ip':					$banlist_ary_tmp[] = $row['ban_ip'];				break;				case 'email':					$banlist_ary_tmp[] = $row['ban_email'];				break;			}		}		while ($row = $db->sql_fetchrow($result));		$banlist_ary_tmp = array_intersect($banlist_ary, $banlist_ary_tmp);		if (sizeof($banlist_ary_tmp))		{			// One or more entities are already banned/excluded, delete the existing bans, so they can be re-inserted with the given new length			$sql = 'DELETE FROM ' . BANLIST_TABLE . '				WHERE ' . $db->sql_in_set($type, $banlist_ary_tmp) . '					AND ban_exclude = ' . (int) $ban_exclude;			$db->sql_query($sql);		}		unset($banlist_ary_tmp);	}	$db->sql_freeresult($result);	// We have some entities to ban	if (sizeof($banlist_ary))	{		$sql_ary = array();		foreach ($banlist_ary as $ban_entry)		{			$sql_ary[] = array(				$type				=> $ban_entry,				'ban_start'			=> (int) $current_time,				'ban_end'			=> (int) $ban_end,				'ban_exclude'		=> (int) $ban_exclude,				'ban_reason'		=> (string) $ban_reason,				'ban_give_reason'	=> (string) $ban_give_reason,			);		}		$db->sql_multi_insert(BANLIST_TABLE, $sql_ary);		// If we are banning we want to logout anyone matching the ban		if (!$ban_exclude)		{			switch ($mode)			{				case 'user':					$sql_where = 'WHERE ' . $db->sql_in_set('session_user_id', $banlist_ary);				break;				case 'ip':					$sql_where = 'WHERE ' . $db->sql_in_set('session_ip', $banlist_ary);				break;				case 'email':					$banlist_ary_sql = array();					foreach ($banlist_ary as $ban_entry)					{						$banlist_ary_sql[] = (string) str_replace('*', '%', $ban_entry);					}					$sql = 'SELECT user_id						FROM ' . USERS_TABLE . '						WHERE ' . $db->sql_in_set('user_email', $banlist_ary_sql);					$result = $db->sql_query($sql);					$sql_in = array();					if ($row = $db->sql_fetchrow($result))					{						do						{							$sql_in[] = $row['user_id'];						}						while ($row = $db->sql_fetchrow($result));						$sql_where = 'WHERE ' . $db->sql_in_set('session_user_id', $sql_in);					}					$db->sql_freeresult($result);				break;			}			if (isset($sql_where) && $sql_where)			{				$sql = 'DELETE FROM ' . SESSIONS_TABLE . "					$sql_where";				$db->sql_query($sql);				if ($mode == 'user')				{					$sql = 'DELETE FROM ' . SESSIONS_KEYS_TABLE . ' ' . ((in_array('*', $banlist_ary)) ? '' : 'WHERE ' . $db->sql_in_set('user_id', $banlist_ary));					$db->sql_query($sql);				}			}		}		// Update log		$log_entry = ($ban_exclude) ? 'LOG_BAN_EXCLUDE_' : 'LOG_BAN_';		// Add to moderator log, admin log and user notes		add_log('admin', $log_entry . strtoupper($mode), $ban_reason, $ban_list_log);		add_log('mod', 0, 0, $log_entry . strtoupper($mode), $ban_reason, $ban_list_log);		if ($mode == 'user')		{			foreach ($banlist_ary as $user_id)			{				add_log('user', $user_id, $log_entry . strtoupper($mode), $ban_reason, $ban_list_log);			}		}		$cache->destroy('sql', BANLIST_TABLE);		return true;	}	// There was nothing to ban/exclude. But destroying the cache because of the removal of stale bans.	$cache->destroy('sql', BANLIST_TABLE);	return false;}/*** Unban User*/function user_unban($mode, $ban){	global $db, $user, $auth, $cache;	// Delete stale bans	$sql = 'DELETE FROM ' . BANLIST_TABLE . '		WHERE ban_end < ' . time() . '			AND ban_end <> 0';	$db->sql_query($sql);	if (!is_array($ban))	{		$ban = array($ban);	}	$unban_sql = array_map('intval', $ban);	if (sizeof($unban_sql))	{		// Grab details of bans for logging information later		switch ($mode)		{			case 'user':				$sql = 'SELECT u.username AS unban_info, u.user_id					FROM ' . USERS_TABLE . ' u, ' . BANLIST_TABLE . ' b					WHERE ' . $db->sql_in_set('b.ban_id', $unban_sql) . '						AND u.user_id = b.ban_userid';			break;			case 'email':				$sql = 'SELECT ban_email AS unban_info					FROM ' . BANLIST_TABLE . '					WHERE ' . $db->sql_in_set('ban_id', $unban_sql);			break;			case 'ip':				$sql = 'SELECT ban_ip AS unban_info					FROM ' . BANLIST_TABLE . '					WHERE ' . $db->sql_in_set('ban_id', $unban_sql);			break;		}		$result = $db->sql_query($sql);		$l_unban_list = '';		$user_ids_ary = array();		while ($row = $db->sql_fetchrow($result))		{			$l_unban_list .= (($l_unban_list != '') ? ', ' : '') . $row['unban_info'];			if ($mode == 'user')			{				$user_ids_ary[] = $row['user_id'];			}		}		$db->sql_freeresult($result);		$sql = 'DELETE FROM ' . BANLIST_TABLE . '			WHERE ' . $db->sql_in_set('ban_id', $unban_sql);		$db->sql_query($sql);		// Add to moderator log, admin log and user notes		add_log('admin', 'LOG_UNBAN_' . strtoupper($mode), $l_unban_list);		add_log('mod', 0, 0, 'LOG_UNBAN_' . strtoupper($mode), $l_unban_list);		if ($mode == 'user')		{			foreach ($user_ids_ary as $user_id)			{				add_log('user', $user_id, 'LOG_UNBAN_' . strtoupper($mode), $l_unban_list);			}		}	}	$cache->destroy('sql', BANLIST_TABLE);	return false;}/*** Internet Protocol Address Whois* RFC3912: WHOIS Protocol Specification** @param string $ip		Ip address, either IPv4 or IPv6.** @return string		Empty string if not a valid ip address.*						Otherwise make_clickable()'ed whois result.*/function user_ipwhois($ip){	if (empty($ip))	{		return '';	}	if (preg_match(get_preg_expression('ipv4'), $ip))	{		// IPv4 address		$whois_host = 'whois.arin.net.';	}	else if (preg_match(get_preg_expression('ipv6'), $ip))	{		// IPv6 address		$whois_host = 'whois.sixxs.net.';	}	else	{		return '';	}	$ipwhois = '';	if (($fsk = @fsockopen($whois_host, 43)))	{		// CRLF as per RFC3912		fputs($fsk, "$ip\r\n");		while (!feof($fsk))		{			$ipwhois .= fgets($fsk, 1024);		}		@fclose($fsk);	}	$match = array();	// Test for referrals from $whois_host to other whois databases, roll on rwhois	if (preg_match('#ReferralServer: whois://(.+)#im', $ipwhois, $match))	{		if (strpos($match[1], ':') !== false)		{			$pos	= strrpos($match[1], ':');			$server	= substr($match[1], 0, $pos);			$port	= (int) substr($match[1], $pos + 1);			unset($pos);		}		else		{			$server	= $match[1];			$port	= 43;		}		$buffer = '';		if (($fsk = @fsockopen($server, $port)))		{			fputs($fsk, "$ip\r\n");			while (!feof($fsk))			{				$buffer .= fgets($fsk, 1024);			}			@fclose($fsk);		}		// Use the result from $whois_host if we don't get any result here		$ipwhois = (empty($buffer)) ? $ipwhois : $buffer;	}	$ipwhois = htmlspecialchars($ipwhois);	// Magic URL ;)	return trim(make_clickable($ipwhois, false, ''));}/*** Data validation ... used primarily but not exclusively by ucp modules** "Master" function for validating a range of data types*/function validate_data($data, $val_ary){	global $user;	$error = array();	foreach ($val_ary as $var => $val_seq)	{		if (!is_array($val_seq[0]))		{			$val_seq = array($val_seq);		}		foreach ($val_seq as $validate)		{			$function = array_shift($validate);			array_unshift($validate, $data[$var]);			if ($result = call_user_func_array('validate_' . $function, $validate))			{				// Since errors are checked later for their language file existence, we need to make sure custom errors are not adjusted.				$error[] = (empty($user->lang[$result . '_' . strtoupper($var)])) ? $result : $result . '_' . strtoupper($var);			}		}	}	return $error;}/*** Validate String** @return	boolean|string	Either false if validation succeeded or a string which will be used as the error message (with the variable name appended)*/function validate_string($string, $optional = false, $min = 0, $max = 0){	if (empty($string) && $optional)	{		return false;	}	if ($min && utf8_strlen(htmlspecialchars_decode($string)) < $min)	{		return 'TOO_SHORT';	}	else if ($max && utf8_strlen(htmlspecialchars_decode($string)) > $max)	{		return 'TOO_LONG';	}	return false;}/*** Validate Number** @return	boolean|string	Either false if validation succeeded or a string which will be used as the error message (with the variable name appended)*/function validate_num($num, $optional = false, $min = 0, $max = 1E99){	if (empty($num) && $optional)	{		return false;	}	if ($num < $min)	{		return 'TOO_SMALL';	}	else if ($num > $max)	{		return 'TOO_LARGE';	}	return false;}/*** Validate Date* @param String $string a date in the dd-mm-yyyy format* @return	boolean*/function validate_date($date_string, $optional = false){	$date = explode('-', $date_string);	if ((empty($date) || sizeof($date) != 3) && $optional)	{		return false;	}	else if ($optional)	{		for ($field = 0; $field <= 1; $field++)		{			$date[$field] = (int) $date[$field];			if (empty($date[$field]))			{				$date[$field] = 1;			}		}		$date[2] = (int) $date[2];		// assume an arbitrary leap year		if (empty($date[2]))		{			$date[2] = 1980;		}	}	if (sizeof($date) != 3 || !checkdate($date[1], $date[0], $date[2]))	{		return 'INVALID';	}	return false;}/*** Validate Match** @return	boolean|string	Either false if validation succeeded or a string which will be used as the error message (with the variable name appended)*/function validate_match($string, $optional = false, $match = ''){	if (empty($string) && $optional)	{		return false;	}	if (empty($match))	{		return false;	}	if (!preg_match($match, $string))	{		return 'WRONG_DATA';	}	return false;}/*** Validate Language Pack ISO Name** Tests whether a language name is valid and installed** @param string $lang_iso	The language string to test** @return bool|string		Either false if validation succeeded or*							a string which will be used as the error message*							(with the variable name appended)*/function validate_language_iso_name($lang_iso){	global $db;	$sql = 'SELECT lang_id		FROM ' . LANG_TABLE . "		WHERE lang_iso = '" . $db->sql_escape($lang_iso) . "'";	$result = $db->sql_query($sql);	$lang_id = (int) $db->sql_fetchfield('lang_id');	$db->sql_freeresult($result);	return ($lang_id) ? false : 'WRONG_DATA';}/*** Check to see if the username has been taken, or if it is disallowed.* Also checks if it includes the " character, which we don't allow in usernames.* Used for registering, changing names, and posting anonymously with a username** @param string $username The username to check* @param string $allowed_username An allowed username, default being $user->data['username']** @return	mixed	Either false if validation succeeded or a string which will be used as the error message (with the variable name appended)*/function validate_username($username, $allowed_username = false){	global $config, $db, $user, $cache;	$clean_username = utf8_clean_string($username);	$allowed_username = ($allowed_username === false) ? $user->data['username_clean'] : utf8_clean_string($allowed_username);	if ($allowed_username == $clean_username)	{		return false;	}	// ... fast checks first.	if (strpos($username, '&quot;') !== false || strpos($username, '"') !== false || empty($clean_username))	{		return 'INVALID_CHARS';	}	$mbstring = $pcre = false;	// generic UTF-8 character types supported?	if ((version_compare(PHP_VERSION, '5.1.0', '>=') || (version_compare(PHP_VERSION, '5.0.0-dev', '<=') && version_compare(PHP_VERSION, '4.4.0', '>='))) && @preg_match('/\p{L}/u', 'a') !== false)	{		$pcre = true;	}	else if (function_exists('mb_ereg_match'))	{		mb_regex_encoding('UTF-8');		$mbstring = true;	}	switch ($config['allow_name_chars'])	{		case 'USERNAME_CHARS_ANY':			$pcre = true;			$regex = '.+';		break;		case 'USERNAME_ALPHA_ONLY':			$pcre = true;			$regex = '[A-Za-z0-9]+';		break;		case 'USERNAME_ALPHA_SPACERS':			$pcre = true;			$regex = '[A-Za-z0-9-[\]_+ ]+';		break;		case 'USERNAME_LETTER_NUM':			if ($pcre)			{				$regex = '[\p{Lu}\p{Ll}\p{N}]+';			}			else if ($mbstring)			{				$regex = '[[:upper:][:lower:][:digit:]]+';			}			else			{				$pcre = true;				$regex = '[a-zA-Z0-9]+';			}		break;		case 'USERNAME_LETTER_NUM_SPACERS':			if ($pcre)			{				$regex = '[-\]_+ [\p{Lu}\p{Ll}\p{N}]+';			}			else if ($mbstring)			{				$regex = '[-\]_+ \[[:upper:][:lower:][:digit:]]+';			}			else			{				$pcre = true;				$regex = '[-\]_+ [a-zA-Z0-9]+';			}		break;		case 'USERNAME_ASCII':		default:			$pcre = true;			$regex = '[\x01-\x7F]+';		break;	}	if ($pcre)	{		if (!preg_match('#^' . $regex . '$#u', $username))		{			return 'INVALID_CHARS';		}	}	else if ($mbstring)	{		mb_ereg_search_init($username, '^' . $regex . '$');		if (!mb_ereg_search())		{			return 'INVALID_CHARS';		}	}	$sql = 'SELECT username		FROM ' . USERS_TABLE . "		WHERE username_clean = '" . $db->sql_escape($clean_username) . "'";	$result = $db->sql_query($sql);	$row = $db->sql_fetchrow($result);	$db->sql_freeresult($result);	if ($row)	{		return 'USERNAME_TAKEN';	}	$sql = 'SELECT group_name		FROM ' . GROUPS_TABLE . "		WHERE LOWER(group_name) = '" . $db->sql_escape(utf8_strtolower($username)) . "'";	$result = $db->sql_query($sql);	$row = $db->sql_fetchrow($result);	$db->sql_freeresult($result);	if ($row)	{		return 'USERNAME_TAKEN';	}	$bad_usernames = $cache->obtain_disallowed_usernames();	foreach ($bad_usernames as $bad_username)	{		if (preg_match('#^' . $bad_username . '$#', $clean_username))		{			return 'USERNAME_DISALLOWED';		}	}	return false;}/*** Check to see if the password meets the complexity settings** @return	boolean|string	Either false if validation succeeded or a string which will be used as the error message (with the variable name appended)*/function validate_password($password){	global $config, $db, $user;	if ($password === '' || $config['pass_complex'] === 'PASS_TYPE_ANY')	{		// Password empty or no password complexity required.		return false;	}	$pcre = $mbstring = false;	// generic UTF-8 character types supported?	if ((version_compare(PHP_VERSION, '5.1.0', '>=') || (version_compare(PHP_VERSION, '5.0.0-dev', '<=') && version_compare(PHP_VERSION, '4.4.0', '>='))) && @preg_match('/\p{L}/u', 'a') !== false)	{		$upp = '\p{Lu}';		$low = '\p{Ll}';		$num = '\p{N}';		$sym = '[^\p{Lu}\p{Ll}\p{N}]';		$pcre = true;	}	else if (function_exists('mb_ereg_match'))	{		mb_regex_encoding('UTF-8');		$upp = '[[:upper:]]';		$low = '[[:lower:]]';		$num = '[[:digit:]]';		$sym = '[^[:upper:][:lower:][:digit:]]';		$mbstring = true;	}	else	{		$upp = '[A-Z]';		$low = '[a-z]';		$num = '[0-9]';		$sym = '[^A-Za-z0-9]';		$pcre = true;	}	$chars = array();	switch ($config['pass_complex'])	{		// No break statements below ...		// We require strong passwords in case pass_complex is not set or is invalid		default:		// Require mixed case letters, numbers and symbols		case 'PASS_TYPE_SYMBOL':			$chars[] = $sym;		// Require mixed case letters and numbers		case 'PASS_TYPE_ALPHA':			$chars[] = $num;		// Require mixed case letters		case 'PASS_TYPE_CASE':			$chars[] = $low;			$chars[] = $upp;	}	if ($pcre)	{		foreach ($chars as $char)		{			if (!preg_match('#' . $char . '#u', $password))			{				return 'INVALID_CHARS';			}		}	}	else if ($mbstring)	{		foreach ($chars as $char)		{			if (mb_ereg($char, $password) === false)			{				return 'INVALID_CHARS';			}		}	}	return false;}/*** Check to see if email address is banned or already present in the DB** @param string $email The email to check* @param string $allowed_email An allowed email, default being $user->data['user_email']** @return mixed Either false if validation succeeded or a string which will be used as the error message (with the variable name appended)*/function validate_email($email, $allowed_email = false){	global $config, $db, $user;	$email = strtolower($email);	$allowed_email = ($allowed_email === false) ? strtolower($user->data['user_email']) : strtolower($allowed_email);	if ($allowed_email == $email)	{		return false;	}	if (!preg_match('/^' . get_preg_expression('email') . '$/i', $email))	{		return 'EMAIL_INVALID';	}	// Check MX record.	// The idea for this is from reading the UseBB blog/announcement. :)	if ($config['email_check_mx'])	{		list(, $domain) = explode('@', $email);		if (phpbb_checkdnsrr($domain, 'A') === false && phpbb_checkdnsrr($domain, 'MX') === false)		{			return 'DOMAIN_NO_MX_RECORD';		}	}	if (($ban_reason = $user->check_ban(false, false, $email, true)) !== false)	{		return ($ban_reason === true) ? 'EMAIL_BANNED' : $ban_reason;	}	if (!$config['allow_emailreuse'])	{		$sql = 'SELECT user_email_hash			FROM ' . USERS_TABLE . "			WHERE user_email_hash = " . $db->sql_escape(phpbb_email_hash($email));		$result = $db->sql_query($sql);		$row = $db->sql_fetchrow($result);		$db->sql_freeresult($result);		if ($row)		{			return 'EMAIL_TAKEN';		}	}	return false;}/*** Validate jabber address* Taken from the jabber class within flyspray (see author notes)** @author flyspray.org*/function validate_jabber($jid){	if (!$jid)	{		return false;	}	$seperator_pos = strpos($jid, '@');	if ($seperator_pos === false)	{		return 'WRONG_DATA';	}	$username = substr($jid, 0, $seperator_pos);	$realm = substr($jid, $seperator_pos + 1);	if (strlen($username) == 0 || strlen($realm) < 3)	{		return 'WRONG_DATA';	}	$arr = explode('.', $realm);	if (sizeof($arr) == 0)	{		return 'WRONG_DATA';	}	foreach ($arr as $part)	{		if (substr($part, 0, 1) == '-' || substr($part, -1, 1) == '-')		{			return 'WRONG_DATA';		}		if (!preg_match("@^[a-zA-Z0-9-.]+$@", $part))		{			return 'WRONG_DATA';		}	}	$boundary = array(array(0, 127), array(192, 223), array(224, 239), array(240, 247), array(248, 251), array(252, 253));	// Prohibited Characters RFC3454 + RFC3920	$prohibited = array(		// Table C.1.1		array(0x0020, 0x0020),		// SPACE		// Table C.1.2		array(0x00A0, 0x00A0),		// NO-BREAK SPACE		array(0x1680, 0x1680),		// OGHAM SPACE MARK		array(0x2000, 0x2001),		// EN QUAD		array(0x2001, 0x2001),		// EM QUAD		array(0x2002, 0x2002),		// EN SPACE		array(0x2003, 0x2003),		// EM SPACE		array(0x2004, 0x2004),		// THREE-PER-EM SPACE		array(0x2005, 0x2005),		// FOUR-PER-EM SPACE		array(0x2006, 0x2006),		// SIX-PER-EM SPACE		array(0x2007, 0x2007),		// FIGURE SPACE		array(0x2008, 0x2008),		// PUNCTUATION SPACE		array(0x2009, 0x2009),		// THIN SPACE		array(0x200A, 0x200A),		// HAIR SPACE		array(0x200B, 0x200B),		// ZERO WIDTH SPACE		array(0x202F, 0x202F),		// NARROW NO-BREAK SPACE		array(0x205F, 0x205F),		// MEDIUM MATHEMATICAL SPACE		array(0x3000, 0x3000),		// IDEOGRAPHIC SPACE		// Table C.2.1		array(0x0000, 0x001F),		// [CONTROL CHARACTERS]		array(0x007F, 0x007F),		// DELETE		// Table C.2.2		array(0x0080, 0x009F),		// [CONTROL CHARACTERS]		array(0x06DD, 0x06DD),		// ARABIC END OF AYAH		array(0x070F, 0x070F),		// SYRIAC ABBREVIATION MARK		array(0x180E, 0x180E),		// MONGOLIAN VOWEL SEPARATOR		array(0x200C, 0x200C), 		// ZERO WIDTH NON-JOINER		array(0x200D, 0x200D),		// ZERO WIDTH JOINER		array(0x2028, 0x2028),		// LINE SEPARATOR		array(0x2029, 0x2029),		// PARAGRAPH SEPARATOR		array(0x2060, 0x2060),		// WORD JOINER		array(0x2061, 0x2061),		// FUNCTION APPLICATION		array(0x2062, 0x2062),		// INVISIBLE TIMES		array(0x2063, 0x2063),		// INVISIBLE SEPARATOR		array(0x206A, 0x206F),		// [CONTROL CHARACTERS]		array(0xFEFF, 0xFEFF),		// ZERO WIDTH NO-BREAK SPACE		array(0xFFF9, 0xFFFC),		// [CONTROL CHARACTERS]		array(0x1D173, 0x1D17A),	// [MUSICAL CONTROL CHARACTERS]		// Table C.3		array(0xE000, 0xF8FF),		// [PRIVATE USE, PLANE 0]		array(0xF0000, 0xFFFFD),	// [PRIVATE USE, PLANE 15]		array(0x100000, 0x10FFFD),	// [PRIVATE USE, PLANE 16]		// Table C.4		array(0xFDD0, 0xFDEF),		// [NONCHARACTER CODE POINTS]		array(0xFFFE, 0xFFFF),		// [NONCHARACTER CODE POINTS]		array(0x1FFFE, 0x1FFFF),	// [NONCHARACTER CODE POINTS]		array(0x2FFFE, 0x2FFFF),	// [NONCHARACTER CODE POINTS]		array(0x3FFFE, 0x3FFFF),	// [NONCHARACTER CODE POINTS]		array(0x4FFFE, 0x4FFFF),	// [NONCHARACTER CODE POINTS]		array(0x5FFFE, 0x5FFFF),	// [NONCHARACTER CODE POINTS]		array(0x6FFFE, 0x6FFFF),	// [NONCHARACTER CODE POINTS]		array(0x7FFFE, 0x7FFFF),	// [NONCHARACTER CODE POINTS]		array(0x8FFFE, 0x8FFFF),	// [NONCHARACTER CODE POINTS]		array(0x9FFFE, 0x9FFFF),	// [NONCHARACTER CODE POINTS]		array(0xAFFFE, 0xAFFFF),	// [NONCHARACTER CODE POINTS]		array(0xBFFFE, 0xBFFFF),	// [NONCHARACTER CODE POINTS]		array(0xCFFFE, 0xCFFFF),	// [NONCHARACTER CODE POINTS]		array(0xDFFFE, 0xDFFFF),	// [NONCHARACTER CODE POINTS]		array(0xEFFFE, 0xEFFFF),	// [NONCHARACTER CODE POINTS]		array(0xFFFFE, 0xFFFFF),	// [NONCHARACTER CODE POINTS]		array(0x10FFFE, 0x10FFFF),	// [NONCHARACTER CODE POINTS]		// Table C.5		array(0xD800, 0xDFFF),		// [SURROGATE CODES]		// Table C.6		array(0xFFF9, 0xFFF9),		// INTERLINEAR ANNOTATION ANCHOR		array(0xFFFA, 0xFFFA),		// INTERLINEAR ANNOTATION SEPARATOR		array(0xFFFB, 0xFFFB),		// INTERLINEAR ANNOTATION TERMINATOR		array(0xFFFC, 0xFFFC),		// OBJECT REPLACEMENT CHARACTER		array(0xFFFD, 0xFFFD),		// REPLACEMENT CHARACTER		// Table C.7		array(0x2FF0, 0x2FFB),		// [IDEOGRAPHIC DESCRIPTION CHARACTERS]		// Table C.8		array(0x0340, 0x0340),		// COMBINING GRAVE TONE MARK		array(0x0341, 0x0341),		// COMBINING ACUTE TONE MARK		array(0x200E, 0x200E),		// LEFT-TO-RIGHT MARK		array(0x200F, 0x200F),		// RIGHT-TO-LEFT MARK		array(0x202A, 0x202A),		// LEFT-TO-RIGHT EMBEDDING		array(0x202B, 0x202B),		// RIGHT-TO-LEFT EMBEDDING		array(0x202C, 0x202C),		// POP DIRECTIONAL FORMATTING		array(0x202D, 0x202D),		// LEFT-TO-RIGHT OVERRIDE		array(0x202E, 0x202E),		// RIGHT-TO-LEFT OVERRIDE		array(0x206A, 0x206A),		// INHIBIT SYMMETRIC SWAPPING		array(0x206B, 0x206B),		// ACTIVATE SYMMETRIC SWAPPING		array(0x206C, 0x206C),		// INHIBIT ARABIC FORM SHAPING		array(0x206D, 0x206D),		// ACTIVATE ARABIC FORM SHAPING		array(0x206E, 0x206E),		// NATIONAL DIGIT SHAPES		array(0x206F, 0x206F),		// NOMINAL DIGIT SHAPES		// Table C.9		array(0xE0001, 0xE0001),	// LANGUAGE TAG		array(0xE0020, 0xE007F),	// [TAGGING CHARACTERS]		// RFC3920		array(0x22, 0x22),			// "		array(0x26, 0x26),			// &		array(0x27, 0x27),			// '		array(0x2F, 0x2F),			// /		array(0x3A, 0x3A),			// :		array(0x3C, 0x3C),			// <		array(0x3E, 0x3E),			// >		array(0x40, 0x40)			// @	);	$pos = 0;	$result = true;	while ($pos < strlen($username))	{		$len = $uni = 0;		for ($i = 0; $i <= 5; $i++)		{			if (ord($username[$pos]) >= $boundary[$i][0] && ord($username[$pos]) <= $boundary[$i][1])			{				$len = $i + 1;				$uni = (ord($username[$pos]) - $boundary[$i][0]) * pow(2, $i * 6);				for ($k = 1; $k < $len; $k++)				{					$uni += (ord($username[$pos + $k]) - 128) * pow(2, ($i - $k) * 6);				}				break;			}		}		if ($len == 0)		{			return 'WRONG_DATA';		}		foreach ($prohibited as $pval)		{			if ($uni >= $pval[0] && $uni <= $pval[1])			{				$result = false;				break 2;			}		}		$pos = $pos + $len;	}	if (!$result)	{		return 'WRONG_DATA';	}	return false;}/*** Remove avatar*/function avatar_delete($mode, $row, $clean_db = false){	global $phpbb_root_path, $config, $db, $user;	// Check if the users avatar is actually *not* a group avatar	if ($mode == 'user')	{		if (strpos($row['user_avatar'], 'g') === 0 || (((int)$row['user_avatar'] !== 0) && ((int)$row['user_avatar'] !== (int)$row['user_id'])))		{			return false;		}	}	if ($clean_db)	{		avatar_remove_db($row[$mode . '_avatar']);	}	$filename = get_avatar_filename($row[$mode . '_avatar']);	if (file_exists($phpbb_root_path . $config['avatar_path'] . '/' . $filename))	{		@unlink($phpbb_root_path . $config['avatar_path'] . '/' . $filename);		return true;	}	return false;}/*** Remote avatar linkage*/function avatar_remote($data, &$error){	global $config, $db, $user, $phpbb_root_path, $phpEx;	if (!preg_match('#^(http|https|ftp)://#i', $data['remotelink']))	{		$data['remotelink'] = 'http://' . $data['remotelink'];	}	if (!preg_match('#^(http|https|ftp)://(?:(.*?\.)*?[a-z0-9\-]+?\.[a-z]{2,4}|(?:\d{1,3}\.){3,5}\d{1,3}):?([0-9]*?).*?\.(gif|jpg|jpeg|png)$#i', $data['remotelink']))	{		$error[] = $user->lang['AVATAR_URL_INVALID'];		return false;	}	// Make sure getimagesize works...	if (($image_data = @getimagesize($data['remotelink'])) === false && (empty($data['width']) || empty($data['height'])))	{		$error[] = $user->lang['UNABLE_GET_IMAGE_SIZE'];		return false;	}	if (!empty($image_data) && ($image_data[0] < 2 || $image_data[1] < 2))	{		$error[] = $user->lang['AVATAR_NO_SIZE'];		return false;	}	$width = ($data['width'] && $data['height']) ? $data['width'] : $image_data[0];	$height = ($data['width'] && $data['height']) ? $data['height'] : $image_data[1];	if ($width < 2 || $height < 2)	{		$error[] = $user->lang['AVATAR_NO_SIZE'];		return false;	}	// Check image type	include_once($phpbb_root_path . 'includes/functions_upload.' . $phpEx);	$types = fileupload::image_types();	$extension = strtolower(filespec::get_extension($data['remotelink']));	if (!empty($image_data) && (!isset($types[$image_data[2]]) || !in_array($extension, $types[$image_data[2]])))	{		if (!isset($types[$image_data[2]]))		{			$error[] = $user->lang['UNABLE_GET_IMAGE_SIZE'];		}		else		{			$error[] = sprintf($user->lang['IMAGE_FILETYPE_MISMATCH'], $types[$image_data[2]][0], $extension);		}		return false;	}	if ($config['avatar_max_width'] || $config['avatar_max_height'])	{		if ($width > $config['avatar_max_width'] || $height > $config['avatar_max_height'])		{			$error[] = sprintf($user->lang['AVATAR_WRONG_SIZE'], $config['avatar_min_width'], $config['avatar_min_height'], $config['avatar_max_width'], $config['avatar_max_height'], $width, $height);			return false;		}	}	if ($config['avatar_min_width'] || $config['avatar_min_height'])	{		if ($width < $config['avatar_min_width'] || $height < $config['avatar_min_height'])		{			$error[] = sprintf($user->lang['AVATAR_WRONG_SIZE'], $config['avatar_min_width'], $config['avatar_min_height'], $config['avatar_max_width'], $config['avatar_max_height'], $width, $height);			return false;		}	}	return array(AVATAR_REMOTE, $data['remotelink'], $width, $height);}/*** Avatar upload using the upload class*/function avatar_upload($data, &$error){	global $phpbb_root_path, $config, $db, $user, $phpEx;	// Init upload class	include_once($phpbb_root_path . 'includes/functions_upload.' . $phpEx);	$upload = new fileupload('AVATAR_', array('jpg', 'jpeg', 'gif', 'png'), $config['avatar_filesize'], $config['avatar_min_width'], $config['avatar_min_height'], $config['avatar_max_width'], $config['avatar_max_height'], (isset($config['mime_triggers']) ? explode('|', $config['mime_triggers']) : false));	if (!empty($_FILES['uploadfile']['name']))	{		$file = $upload->form_upload('uploadfile');	}	else	{		$file = $upload->remote_upload($data['uploadurl']);	}	$prefix = $config['avatar_salt'] . '_';	$file->clean_filename('avatar', $prefix, $data['user_id']);	$destination = $config['avatar_path'];	// Adjust destination path (no trailing slash)	if (substr($destination, -1, 1) == '/' || substr($destination, -1, 1) == '\\')	{		$destination = substr($destination, 0, -1);	}	$destination = str_replace(array('../', '..\\', './', '.\\'), '', $destination);	if ($destination && ($destination[0] == '/' || $destination[0] == "\\"))	{		$destination = '';	}	// Move file and overwrite any existing image	$file->move_file($destination, true);	if (sizeof($file->error))	{		$file->remove();		$error = array_merge($error, $file->error);	}	return array(AVATAR_UPLOAD, $data['user_id'] . '_' . time() . '.' . $file->get('extension'), $file->get('width'), $file->get('height'));}/*** Generates avatar filename from the database entry*/function get_avatar_filename($avatar_entry){	global $config;	if ($avatar_entry[0] === 'g')	{		$avatar_group = true;		$avatar_entry = substr($avatar_entry, 1);	}	else	{		$avatar_group = false;	}	$ext 			= substr(strrchr($avatar_entry, '.'), 1);	$avatar_entry	= intval($avatar_entry);	return $config['avatar_salt'] . '_' . (($avatar_group) ? 'g' : '') . $avatar_entry . '.' . $ext;}/*** Avatar Gallery*/function avatar_gallery($category, $avatar_select, $items_per_column, $block_var = 'avatar_row'){	global $user, $cache, $template;	global $config, $phpbb_root_path;	$avatar_list = array();	$path = $phpbb_root_path . $config['avatar_gallery_path'];	if (!file_exists($path) || !is_dir($path))	{		$avatar_list = array($user->lang['NO_AVATAR_CATEGORY'] => array());	}	else	{		// Collect images		$dp = @opendir($path);		if (!$dp)		{			return array($user->lang['NO_AVATAR_CATEGORY'] => array());		}		while (($file = readdir($dp)) !== false)		{			if ($file[0] != '.' && preg_match('#^[^&"\'<>]+$#i', $file) && is_dir("$path/$file"))			{				$avatar_row_count = $avatar_col_count = 0;				if ($dp2 = @opendir("$path/$file"))				{					while (($sub_file = readdir($dp2)) !== false)					{						if (preg_match('#^[^&\'"<>]+\.(?:gif|png|jpe?g)$#i', $sub_file))						{							$avatar_list[$file][$avatar_row_count][$avatar_col_count] = array(								'file'		=> rawurlencode($file) . '/' . rawurlencode($sub_file),								'filename'	=> rawurlencode($sub_file),								'name'		=> ucfirst(str_replace('_', ' ', preg_replace('#^(.*)\..*$#', '\1', $sub_file))),							);							$avatar_col_count++;							if ($avatar_col_count == $items_per_column)							{								$avatar_row_count++;								$avatar_col_count = 0;							}						}					}					closedir($dp2);				}			}		}		closedir($dp);	}	if (!sizeof($avatar_list))	{		$avatar_list = array($user->lang['NO_AVATAR_CATEGORY'] => array());	}	@ksort($avatar_list);	$category = (!$category) ? key($avatar_list) : $category;	$avatar_categories = array_keys($avatar_list);	$s_category_options = '';	foreach ($avatar_categories as $cat)	{		$s_category_options .= '<option value="' . $cat . '"' . (($cat == $category) ? ' selected="selected"' : '') . '>' . $cat . '</option>';	}	$template->assign_vars(array(		'S_AVATARS_ENABLED'		=> true,		'S_IN_AVATAR_GALLERY'	=> true,		'S_CAT_OPTIONS'			=> $s_category_options)	);	$avatar_list = (isset($avatar_list[$category])) ? $avatar_list[$category] : array();	foreach ($avatar_list as $avatar_row_ary)	{		$template->assign_block_vars($block_var, array());		foreach ($avatar_row_ary as $avatar_col_ary)		{			$template->assign_block_vars($block_var . '.avatar_column', array(				'AVATAR_IMAGE'	=> $phpbb_root_path . $config['avatar_gallery_path'] . '/' . $avatar_col_ary['file'],				'AVATAR_NAME'	=> $avatar_col_ary['name'],				'AVATAR_FILE'	=> $avatar_col_ary['filename'])			);			$template->assign_block_vars($block_var . '.avatar_option_column', array(				'AVATAR_IMAGE'	=> $phpbb_root_path . $config['avatar_gallery_path'] . '/' . $avatar_col_ary['file'],				'S_OPTIONS_AVATAR'	=> $avatar_col_ary['filename'])			);		}	}	return $avatar_list;}/*** Tries to (re-)establish avatar dimensions*/function avatar_get_dimensions($avatar, $avatar_type, &$error, $current_x = 0, $current_y = 0){	global $config, $phpbb_root_path, $user;	switch ($avatar_type)	{		case AVATAR_REMOTE :			break;		case AVATAR_UPLOAD :			$avatar = $phpbb_root_path . $config['avatar_path'] . '/' . get_avatar_filename($avatar);			break;		case AVATAR_GALLERY :			$avatar = $phpbb_root_path . $config['avatar_gallery_path'] . '/' . $avatar ;			break;	}	// Make sure getimagesize works...	if (($image_data = @getimagesize($avatar)) === false)	{		$error[] = $user->lang['UNABLE_GET_IMAGE_SIZE'];		return false;	}	if ($image_data[0] < 2 || $image_data[1] < 2)	{		$error[] = $user->lang['AVATAR_NO_SIZE'];		return false;	}	// try to maintain ratio	if (!(empty($current_x) && empty($current_y)))	{		if ($current_x != 0)		{			$image_data[1] = (int) floor(($current_x / $image_data[0]) * $image_data[1]);			$image_data[1] = min($config['avatar_max_height'], $image_data[1]);			$image_data[1] = max($config['avatar_min_height'], $image_data[1]);		}		if ($current_y != 0)		{			$image_data[0] = (int) floor(($current_y / $image_data[1]) * $image_data[0]);			$image_data[0] = min($config['avatar_max_width'], $image_data[1]);			$image_data[0] = max($config['avatar_min_width'], $image_data[1]);		}	}	return array($image_data[0], $image_data[1]);}/*** Uploading/Changing user avatar*/function avatar_process_user(&$error, $custom_userdata = false, $can_upload = null){	global $config, $phpbb_root_path, $auth, $user, $db;	$data = array(		'uploadurl'		=> request_var('uploadurl', ''),		'remotelink'	=> request_var('remotelink', ''),		'width'			=> request_var('width', 0),		'height'		=> request_var('height', 0),	);	$error = validate_data($data, array(		'uploadurl'		=> array('string', true, 5, 255),		'remotelink'	=> array('string', true, 5, 255),		'width'			=> array('string', true, 1, 3),		'height'		=> array('string', true, 1, 3),	));	if (sizeof($error))	{		return false;	}	$sql_ary = array();	if ($custom_userdata === false)	{		$userdata = &$user->data;	}	else	{		$userdata = &$custom_userdata;	}	$data['user_id'] = $userdata['user_id'];	$change_avatar = ($custom_userdata === false) ? $auth->acl_get('u_chgavatar') : true;	$avatar_select = basename(request_var('avatar_select', ''));	// Can we upload?	if (is_null($can_upload))	{		$can_upload = ($config['allow_avatar_upload'] && file_exists($phpbb_root_path . $config['avatar_path']) && phpbb_is_writable($phpbb_root_path . $config['avatar_path']) && $change_avatar && (@ini_get('file_uploads') || strtolower(@ini_get('file_uploads')) == 'on')) ? true : false;	}	if ((!empty($_FILES['uploadfile']['name']) || $data['uploadurl']) && $can_upload)	{		list($sql_ary['user_avatar_type'], $sql_ary['user_avatar'], $sql_ary['user_avatar_width'], $sql_ary['user_avatar_height']) = avatar_upload($data, $error);	}	else if ($data['remotelink'] && $change_avatar && $config['allow_avatar_remote'])	{		list($sql_ary['user_avatar_type'], $sql_ary['user_avatar'], $sql_ary['user_avatar_width'], $sql_ary['user_avatar_height']) = avatar_remote($data, $error);	}	else if ($avatar_select && $change_avatar && $config['allow_avatar_local'])	{		$category = basename(request_var('category', ''));		$sql_ary['user_avatar_type'] = AVATAR_GALLERY;		$sql_ary['user_avatar'] = $avatar_select;		// check avatar gallery		if (!is_dir($phpbb_root_path . $config['avatar_gallery_path'] . '/' . $category))		{			$sql_ary['user_avatar'] = '';			$sql_ary['user_avatar_type'] = $sql_ary['user_avatar_width'] = $sql_ary['user_avatar_height'] = 0;		}		else		{			list($sql_ary['user_avatar_width'], $sql_ary['user_avatar_height']) = getimagesize($phpbb_root_path . $config['avatar_gallery_path'] . '/' . $category . '/' . urldecode($sql_ary['user_avatar']));			$sql_ary['user_avatar'] = $category . '/' . $sql_ary['user_avatar'];		}	}	else if (isset($_POST['delete']) && $change_avatar)	{		$sql_ary['user_avatar'] = '';		$sql_ary['user_avatar_type'] = $sql_ary['user_avatar_width'] = $sql_ary['user_avatar_height'] = 0;	}	else if (!empty($userdata['user_avatar']))	{		// Only update the dimensions		if (empty($data['width']) || empty($data['height']))		{			if ($dims = avatar_get_dimensions($userdata['user_avatar'], $userdata['user_avatar_type'], $error, $data['width'], $data['height']))			{				list($guessed_x, $guessed_y) = $dims;				if (empty($data['width']))				{					$data['width'] = $guessed_x;				}				if (empty($data['height']))				{					$data['height'] = $guessed_y;				}			}		}		if (($config['avatar_max_width'] || $config['avatar_max_height']) &&			(($data['width'] != $userdata['user_avatar_width']) || $data['height'] != $userdata['user_avatar_height']))		{			if ($data['width'] > $config['avatar_max_width'] || $data['height'] > $config['avatar_max_height'])			{				$error[] = sprintf($user->lang['AVATAR_WRONG_SIZE'], $config['avatar_min_width'], $config['avatar_min_height'], $config['avatar_max_width'], $config['avatar_max_height'], $data['width'], $data['height']);			}		}		if (!sizeof($error))		{			if ($config['avatar_min_width'] || $config['avatar_min_height'])			{				if ($data['width'] < $config['avatar_min_width'] || $data['height'] < $config['avatar_min_height'])				{					$error[] = sprintf($user->lang['AVATAR_WRONG_SIZE'], $config['avatar_min_width'], $config['avatar_min_height'], $config['avatar_max_width'], $config['avatar_max_height'], $data['width'], $data['height']);				}			}		}		if (!sizeof($error))		{			$sql_ary['user_avatar_width'] = $data['width'];			$sql_ary['user_avatar_height'] = $data['height'];		}	}	if (!sizeof($error))	{		// Do we actually have any data to update?		if (sizeof($sql_ary))		{			$ext_new = $ext_old = '';			if (isset($sql_ary['user_avatar']))			{				$userdata = ($custom_userdata === false) ? $user->data : $custom_userdata;				$ext_new = (empty($sql_ary['user_avatar'])) ? '' : substr(strrchr($sql_ary['user_avatar'], '.'), 1);				$ext_old = (empty($userdata['user_avatar'])) ? '' : substr(strrchr($userdata['user_avatar'], '.'), 1);				if ($userdata['user_avatar_type'] == AVATAR_UPLOAD)				{					// Delete old avatar if present					if ((!empty($userdata['user_avatar']) && empty($sql_ary['user_avatar']))					   || ( !empty($userdata['user_avatar']) && !empty($sql_ary['user_avatar']) && $ext_new !== $ext_old))					{						avatar_delete('user', $userdata);					}				}			}			$sql = 'UPDATE ' . USERS_TABLE . '				SET ' . $db->sql_build_array('UPDATE', $sql_ary) . '				WHERE user_id = ' . (($custom_userdata === false) ? $user->data['user_id'] : $custom_userdata['user_id']);			$db->sql_query($sql);		}	}	return (sizeof($error)) ? false : true;}//// Usergroup functions///*** Add or edit a group. If we're editing a group we only update user* parameters such as rank, etc. if they are changed*/function group_create(&$group_id, $type, $name, $desc, $group_attributes, $allow_desc_bbcode = false, $allow_desc_urls = false, $allow_desc_smilies = false){	global $phpbb_root_path, $config, $db, $user, $file_upload;	$error = array();	// Attributes which also affect the users table	$user_attribute_ary = array('group_colour', 'group_rank', 'group_avatar', 'group_avatar_type', 'group_avatar_width', 'group_avatar_height');	// Check data. Limit group name length.	if (!utf8_strlen($name) || utf8_strlen($name) > 60)	{		$error[] = (!utf8_strlen($name)) ? $user->lang['GROUP_ERR_USERNAME'] : $user->lang['GROUP_ERR_USER_LONG'];	}	$err = group_validate_groupname($group_id, $name);	if (!empty($err))	{		$error[] = $user->lang[$err];	}	if (!in_array($type, array(GROUP_OPEN, GROUP_CLOSED, GROUP_HIDDEN, GROUP_SPECIAL, GROUP_FREE)))	{		$error[] = $user->lang['GROUP_ERR_TYPE'];	}	if (!sizeof($error))	{		$user_ary = array();		$sql_ary = array(			'group_name'			=> (string) $name,			'group_desc'			=> (string) $desc,			'group_desc_uid'		=> '',			'group_desc_bitfield'	=> '',			'group_type'			=> (int) $type,		);		// Parse description		if ($desc)		{			generate_text_for_storage($sql_ary['group_desc'], $sql_ary['group_desc_uid'], $sql_ary['group_desc_bitfield'], $sql_ary['group_desc_options'], $allow_desc_bbcode, $allow_desc_urls, $allow_desc_smilies);		}		if (sizeof($group_attributes))		{			// Merge them with $sql_ary to properly update the group			$sql_ary = array_merge($sql_ary, $group_attributes);		}		// Setting the log message before we set the group id (if group gets added)		$log = ($group_id) ? 'LOG_GROUP_UPDATED' : 'LOG_GROUP_CREATED';		$query = '';		if ($group_id)		{			$sql = 'SELECT user_id				FROM ' . USERS_TABLE . '				WHERE group_id = ' . $group_id;			$result = $db->sql_query($sql);			while ($row = $db->sql_fetchrow($result))			{				$user_ary[] = $row['user_id'];			}			$db->sql_freeresult($result);			if (isset($sql_ary['group_avatar']) && !$sql_ary['group_avatar'])			{				remove_default_avatar($group_id, $user_ary);			}			if (isset($sql_ary['group_rank']) && !$sql_ary['group_rank'])			{				remove_default_rank($group_id, $user_ary);			}			$sql = 'UPDATE ' . GROUPS_TABLE . '				SET ' . $db->sql_build_array('UPDATE', $sql_ary) . "				WHERE group_id = $group_id";			$db->sql_query($sql);			// Since we may update the name too, we need to do this on other tables too...			$sql = 'UPDATE ' . MODERATOR_CACHE_TABLE . "				SET group_name = '" . $db->sql_escape($sql_ary['group_name']) . "'				WHERE group_id = $group_id";			$db->sql_query($sql);			// One special case is the group skip auth setting. If this was changed we need to purge permissions for this group			if (isset($group_attributes['group_skip_auth']))			{				// Get users within this group...				$sql = 'SELECT user_id					FROM ' . USER_GROUP_TABLE . '					WHERE group_id = ' . $group_id . '						AND user_pending = 0';				$result = $db->sql_query($sql);				$user_id_ary = array();				while ($row = $db->sql_fetchrow($result))				{					$user_id_ary[] = $row['user_id'];				}				$db->sql_freeresult($result);				if (!empty($user_id_ary))				{					global $auth;					// Clear permissions cache of relevant users					$auth->acl_clear_prefetch($user_id_ary);				}			}		}		else		{			$sql = 'INSERT INTO ' . GROUPS_TABLE . ' ' . $db->sql_build_array('INSERT', $sql_ary);			$db->sql_query($sql);		}		if (!$group_id)		{			$group_id = $db->sql_nextid();			if (isset($sql_ary['group_avatar_type']) && $sql_ary['group_avatar_type'] == AVATAR_UPLOAD)			{				group_correct_avatar($group_id, $sql_ary['group_avatar']);			}		}		// Set user attributes		$sql_ary = array();		if (sizeof($group_attributes))		{			// Go through the user attributes array, check if a group attribute matches it and then set it. ;)			foreach ($user_attribute_ary as $attribute)			{				if (!isset($group_attributes[$attribute]))				{					continue;				}				// If we are about to set an avatar, we will not overwrite user avatars if no group avatar is set...				if (strpos($attribute, 'group_avatar') === 0 && !$group_attributes[$attribute])				{					continue;				}				$sql_ary[$attribute] = $group_attributes[$attribute];			}		}		if (sizeof($sql_ary) && sizeof($user_ary))		{			group_set_user_default($group_id, $user_ary, $sql_ary);		}		$name = ($type == GROUP_SPECIAL) ? $user->lang['G_' . $name] : $name;		add_log('admin', $log, $name);		group_update_listings($group_id);	}	return (sizeof($error)) ? $error : false;}/*** Changes a group avatar's filename to conform to the naming scheme*/function group_correct_avatar($group_id, $old_entry){	global $config, $db, $phpbb_root_path;	$group_id		= (int)$group_id;	$ext 			= substr(strrchr($old_entry, '.'), 1);	$old_filename 	= get_avatar_filename($old_entry);	$new_filename 	= $config['avatar_salt'] . "_g$group_id.$ext";	$new_entry 		= 'g' . $group_id . '_' . substr(time(), -5) . ".$ext";	$avatar_path = $phpbb_root_path . $config['avatar_path'];	if (@rename($avatar_path . '/'. $old_filename, $avatar_path . '/' . $new_filename))	{		$sql = 'UPDATE ' . GROUPS_TABLE . '			SET group_avatar = \'' . $db->sql_escape($new_entry) . "'			WHERE group_id = $group_id";		$db->sql_query($sql);	}}/*** Remove avatar also for users not having the group as default*/function avatar_remove_db($avatar_name){	global $config, $db;	$sql = 'UPDATE ' . USERS_TABLE . "		SET user_avatar = '',		user_avatar_type = 0		WHERE user_avatar = '" . $db->sql_escape($avatar_name) . '\'';	$db->sql_query($sql);}/*** Group Delete*/function group_delete($group_id, $group_name = false){	global $db, $phpbb_root_path, $phpEx;	if (!$group_name)	{		$group_name = get_group_name($group_id);	}	$start = 0;	do	{		$user_id_ary = $username_ary = array();		// Batch query for group members, call group_user_del		$sql = 'SELECT u.user_id, u.username			FROM ' . USER_GROUP_TABLE . ' ug, ' . USERS_TABLE . " u			WHERE ug.group_id = $group_id				AND u.user_id = ug.user_id";		$result = $db->sql_query_limit($sql, 200, $start);		if ($row = $db->sql_fetchrow($result))		{			do			{				$user_id_ary[] = $row['user_id'];				$username_ary[] = $row['username'];				$start++;			}			while ($row = $db->sql_fetchrow($result));			group_user_del($group_id, $user_id_ary, $username_ary, $group_name);		}		else		{			$start = 0;		}		$db->sql_freeresult($result);	}	while ($start);	// Delete group	$sql = 'DELETE FROM ' . GROUPS_TABLE . "		WHERE group_id = $group_id";	$db->sql_query($sql);	// Delete auth entries from the groups table	$sql = 'DELETE FROM ' . ACL_GROUPS_TABLE . "		WHERE group_id = $group_id";	$db->sql_query($sql);	// Re-cache moderators	if (!function_exists('cache_moderators'))	{		include($phpbb_root_path . 'includes/functions_admin.' . $phpEx);	}	cache_moderators();	add_log('admin', 'LOG_GROUP_DELETE', $group_name);	// Return false - no error	return false;}/*** Add user(s) to group** @return mixed false if no errors occurred, else the user lang string for the relevant error, for example 'NO_USER'*/function group_user_add($group_id, $user_id_ary = false, $username_ary = false, $group_name = false, $default = false, $leader = 0, $pending = 0, $group_attributes = false){	global $db, $auth;	// We need both username and user_id info	$result = user_get_id_name($user_id_ary, $username_ary);	if (!sizeof($user_id_ary) || $result !== false)	{		return 'NO_USER';	}	// Remove users who are already members of this group	$sql = 'SELECT user_id, group_leader		FROM ' . USER_GROUP_TABLE . '		WHERE ' . $db->sql_in_set('user_id', $user_id_ary) . "			AND group_id = $group_id";	$result = $db->sql_query($sql);	$add_id_ary = $update_id_ary = array();	while ($row = $db->sql_fetchrow($result))	{		$add_id_ary[] = (int) $row['user_id'];		if ($leader && !$row['group_leader'])		{			$update_id_ary[] = (int) $row['user_id'];		}	}	$db->sql_freeresult($result);	// Do all the users exist in this group?	$add_id_ary = array_diff($user_id_ary, $add_id_ary);	// If we have no users	if (!sizeof($add_id_ary) && !sizeof($update_id_ary))	{		return 'GROUP_USERS_EXIST';	}	$db->sql_transaction('begin');	// Insert the new users	if (sizeof($add_id_ary))	{		$sql_ary = array();		foreach ($add_id_ary as $user_id)		{			$sql_ary[] = array(				'user_id'		=> (int) $user_id,				'group_id'		=> (int) $group_id,				'group_leader'	=> (int) $leader,				'user_pending'	=> (int) $pending,			);		}		$db->sql_multi_insert(USER_GROUP_TABLE, $sql_ary);	}	if (sizeof($update_id_ary))	{		$sql = 'UPDATE ' . USER_GROUP_TABLE . '			SET group_leader = 1			WHERE ' . $db->sql_in_set('user_id', $update_id_ary) . "				AND group_id = $group_id";		$db->sql_query($sql);	}	if ($default)	{		group_user_attributes('default', $group_id, $user_id_ary, false, $group_name, $group_attributes);	}	$db->sql_transaction('commit');	// Clear permissions cache of relevant users	$auth->acl_clear_prefetch($user_id_ary);	if (!$group_name)	{		$group_name = get_group_name($group_id);	}	$log = ($leader) ? 'LOG_MODS_ADDED' : (($pending) ? 'LOG_USERS_PENDING' : 'LOG_USERS_ADDED');	add_log('admin', $log, $group_name, implode(', ', $username_ary));	group_update_listings($group_id);	// Return false - no error	return false;}/*** Remove a user/s from a given group. When we remove users we update their* default group_id. We do this by examining which "special" groups they belong* to. The selection is made based on a reasonable priority system** @return false if no errors occurred, else the user lang string for the relevant error, for example 'NO_USER'*/function group_user_del($group_id, $user_id_ary = false, $username_ary = false, $group_name = false){	global $db, $auth, $config;	if ($config['coppa_enable'])	{		$group_order = array('ADMINISTRATORS', 'GLOBAL_MODERATORS', 'NEWLY_REGISTERED', 'REGISTERED_COPPA', 'REGISTERED', 'BOTS', 'GUESTS');	}	else	{		$group_order = array('ADMINISTRATORS', 'GLOBAL_MODERATORS', 'NEWLY_REGISTERED', 'REGISTERED', 'BOTS', 'GUESTS');	}	// We need both username and user_id info	$result = user_get_id_name($user_id_ary, $username_ary);	if (!sizeof($user_id_ary) || $result !== false)	{		return 'NO_USER';	}	$sql = 'SELECT *		FROM ' . GROUPS_TABLE . '		WHERE ' . $db->sql_in_set('group_name', $group_order);	$result = $db->sql_query($sql);	$group_order_id = $special_group_data = array();	while ($row = $db->sql_fetchrow($result))	{		$group_order_id[$row['group_name']] = $row['group_id'];		$special_group_data[$row['group_id']] = array(			'group_colour'			=> $row['group_colour'],			'group_rank'				=> $row['group_rank'],		);		// Only set the group avatar if one is defined...		if ($row['group_avatar'])		{			$special_group_data[$row['group_id']] = array_merge($special_group_data[$row['group_id']], array(				'group_avatar'			=> $row['group_avatar'],				'group_avatar_type'		=> $row['group_avatar_type'],				'group_avatar_width'		=> $row['group_avatar_width'],				'group_avatar_height'	=> $row['group_avatar_height'])			);		}	}	$db->sql_freeresult($result);	// Get users default groups - we only need to reset default group membership if the group from which the user gets removed is set as default	$sql = 'SELECT user_id, group_id		FROM ' . USERS_TABLE . '		WHERE ' . $db->sql_in_set('user_id', $user_id_ary);	$result = $db->sql_query($sql);	$default_groups = array();	while ($row = $db->sql_fetchrow($result))	{		$default_groups[$row['user_id']] = $row['group_id'];	}	$db->sql_freeresult($result);	// What special group memberships exist for these users?	$sql = 'SELECT g.group_id, g.group_name, ug.user_id		FROM ' . USER_GROUP_TABLE . ' ug, ' . GROUPS_TABLE . ' g		WHERE ' . $db->sql_in_set('ug.user_id', $user_id_ary) . "			AND g.group_id = ug.group_id			AND g.group_id <> $group_id			AND g.group_type = " . GROUP_SPECIAL . '		ORDER BY ug.user_id, g.group_id';	$result = $db->sql_query($sql);	$temp_ary = array();	while ($row = $db->sql_fetchrow($result))	{		if ($default_groups[$row['user_id']] == $group_id && (!isset($temp_ary[$row['user_id']]) || $group_order_id[$row['group_name']] < $temp_ary[$row['user_id']]))		{			$temp_ary[$row['user_id']] = $row['group_id'];		}	}	$db->sql_freeresult($result);	// sql_where_ary holds the new default groups and their users	$sql_where_ary = array();	foreach ($temp_ary as $uid => $gid)	{		$sql_where_ary[$gid][] = $uid;	}	unset($temp_ary);	foreach ($special_group_data as $gid => $default_data_ary)	{		if (isset($sql_where_ary[$gid]) && sizeof($sql_where_ary[$gid]))		{			remove_default_rank($group_id, $sql_where_ary[$gid]);			remove_default_avatar($group_id, $sql_where_ary[$gid]);			group_set_user_default($gid, $sql_where_ary[$gid], $default_data_ary);		}	}	unset($special_group_data);	$sql = 'DELETE FROM ' . USER_GROUP_TABLE . "		WHERE group_id = $group_id			AND " . $db->sql_in_set('user_id', $user_id_ary);	$db->sql_query($sql);	// Clear permissions cache of relevant users	$auth->acl_clear_prefetch($user_id_ary);	if (!$group_name)	{		$group_name = get_group_name($group_id);	}	$log = 'LOG_GROUP_REMOVE';	if ($group_name)	{		add_log('admin', $log, $group_name, implode(', ', $username_ary));	}	group_update_listings($group_id);	// Return false - no error	return false;}/*** Removes the group avatar of the default group from the users in user_ids who have that group as default.*/function remove_default_avatar($group_id, $user_ids){	global $db;	if (!is_array($user_ids))	{		$user_ids = array($user_ids);	}	if (empty($user_ids))	{		return false;	}	$user_ids = array_map('intval', $user_ids);	$sql = 'SELECT *		FROM ' . GROUPS_TABLE . '		WHERE group_id = ' . (int)$group_id;	$result = $db->sql_query($sql);	if (!$row = $db->sql_fetchrow($result))	{		$db->sql_freeresult($result);		return false;	}	$db->sql_freeresult($result);	$sql = 'UPDATE ' . USERS_TABLE . "		SET user_avatar = '',			user_avatar_type = 0,			user_avatar_width = 0,			user_avatar_height = 0		WHERE group_id = " . (int) $group_id . "		AND user_avatar = '" . $db->sql_escape($row['group_avatar']) . "'		AND " . $db->sql_in_set('user_id', $user_ids);	$db->sql_query($sql);}/*** Removes the group rank of the default group from the users in user_ids who have that group as default.*/function remove_default_rank($group_id, $user_ids){	global $db;	if (!is_array($user_ids))	{		$user_ids = array($user_ids);	}	if (empty($user_ids))	{		return false;	}	$user_ids = array_map('intval', $user_ids);	$sql = 'SELECT *		FROM ' . GROUPS_TABLE . '		WHERE group_id = ' . (int)$group_id;	$result = $db->sql_query($sql);	if (!$row = $db->sql_fetchrow($result))	{		$db->sql_freeresult($result);		return false;	}	$db->sql_freeresult($result);	$sql = 'UPDATE ' . USERS_TABLE . '		SET user_rank = 0		WHERE group_id = ' . (int)$group_id . '		AND user_rank <> 0		AND user_rank = ' . (int)$row['group_rank'] . '		AND ' . $db->sql_in_set('user_id', $user_ids);	$db->sql_query($sql);}/*** This is used to promote (to leader), demote or set as default a member/s*/function group_user_attributes($action, $group_id, $user_id_ary = false, $username_ary = false, $group_name = false, $group_attributes = false){	global $db, $auth, $phpbb_root_path, $phpEx, $config;	// We need both username and user_id info	$result = user_get_id_name($user_id_ary, $username_ary);	if (!sizeof($user_id_ary) || $result !== false)	{		return 'NO_USERS';	}	if (!$group_name)	{		$group_name = get_group_name($group_id);	}	switch ($action)	{		case 'demote':		case 'promote':			$sql = 'SELECT user_id FROM ' . USER_GROUP_TABLE . "				WHERE group_id = $group_id					AND user_pending = 1					AND " . $db->sql_in_set('user_id', $user_id_ary);			$result = $db->sql_query_limit($sql, 1);			$not_empty = ($db->sql_fetchrow($result));			$db->sql_freeresult($result);			if ($not_empty)			{				return 'NO_VALID_USERS';			}			$sql = 'UPDATE ' . USER_GROUP_TABLE . '				SET group_leader = ' . (($action == 'promote') ? 1 : 0) . "				WHERE group_id = $group_id					AND user_pending = 0					AND " . $db->sql_in_set('user_id', $user_id_ary);			$db->sql_query($sql);			$log = ($action == 'promote') ? 'LOG_GROUP_PROMOTED' : 'LOG_GROUP_DEMOTED';		break;		case 'approve':			// Make sure we only approve those which are pending ;)			$sql = 'SELECT u.user_id, u.user_email, u.username, u.username_clean, u.user_notify_type, u.user_jabber, u.user_lang				FROM ' . USERS_TABLE . ' u, ' . USER_GROUP_TABLE . ' ug				WHERE ug.group_id = ' . $group_id . '					AND ug.user_pending = 1					AND ug.user_id = u.user_id					AND ' . $db->sql_in_set('ug.user_id', $user_id_ary);			$result = $db->sql_query($sql);			$user_id_ary = $email_users = array();			while ($row = $db->sql_fetchrow($result))			{				$user_id_ary[] = $row['user_id'];				$email_users[] = $row;			}			$db->sql_freeresult($result);			if (!sizeof($user_id_ary))			{				return false;			}			$sql = 'UPDATE ' . USER_GROUP_TABLE . "				SET user_pending = 0				WHERE group_id = $group_id					AND " . $db->sql_in_set('user_id', $user_id_ary);			$db->sql_query($sql);			// Send approved email to users...			include_once($phpbb_root_path . 'includes/functions_messenger.' . $phpEx);			$messenger = new messenger();			foreach ($email_users as $row)			{				$messenger->template('group_approved', $row['user_lang']);				$messenger->to($row['user_email'], $row['username']);				$messenger->im($row['user_jabber'], $row['username']);				$messenger->assign_vars(array(					'USERNAME'		=> htmlspecialchars_decode($row['username']),					'GROUP_NAME'	=> htmlspecialchars_decode($group_name),					'U_GROUP'		=> generate_board_url() . "/ucp.$phpEx?i=groups&mode=membership")				);				$messenger->send($row['user_notify_type']);			}			$messenger->save_queue();			$log = 'LOG_USERS_APPROVED';		break;		case 'default':			// We only set default group for approved members of the group			$sql = 'SELECT user_id				FROM ' . USER_GROUP_TABLE . "				WHERE group_id = $group_id					AND user_pending = 0					AND " . $db->sql_in_set('user_id', $user_id_ary);			$result = $db->sql_query($sql);			$user_id_ary = $username_ary = array();			while ($row = $db->sql_fetchrow($result))			{				$user_id_ary[] = $row['user_id'];			}			$db->sql_freeresult($result);			$result = user_get_id_name($user_id_ary, $username_ary);			if (!sizeof($user_id_ary) || $result !== false)			{				return 'NO_USERS';			}			$sql = 'SELECT user_id, group_id FROM ' . USERS_TABLE . '				WHERE ' . $db->sql_in_set('user_id', $user_id_ary, false, true);			$result = $db->sql_query($sql);			$groups = array();			while ($row = $db->sql_fetchrow($result))			{				if (!isset($groups[$row['group_id']]))				{					$groups[$row['group_id']] = array();				}				$groups[$row['group_id']][] = $row['user_id'];			}			$db->sql_freeresult($result);			foreach ($groups as $gid => $uids)			{				remove_default_rank($gid, $uids);				remove_default_avatar($gid, $uids);			}			group_set_user_default($group_id, $user_id_ary, $group_attributes);			$log = 'LOG_GROUP_DEFAULTS';		break;	}	// Clear permissions cache of relevant users	$auth->acl_clear_prefetch($user_id_ary);	add_log('admin', $log, $group_name, implode(', ', $username_ary));	group_update_listings($group_id);	return false;}/*** A small version of validate_username to check for a group name's existence. To be called directly.*/function group_validate_groupname($group_id, $group_name){	global $config, $db;	$group_name =  utf8_clean_string($group_name);	if (!empty($group_id))	{		$sql = 'SELECT group_name			FROM ' . GROUPS_TABLE . '			WHERE group_id = ' . (int) $group_id;		$result = $db->sql_query($sql);		$row = $db->sql_fetchrow($result);		$db->sql_freeresult($result);		if (!$row)		{			return false;		}		$allowed_groupname = utf8_clean_string($row['group_name']);		if ($allowed_groupname == $group_name)		{			return false;		}	}	$sql = 'SELECT group_name		FROM ' . GROUPS_TABLE . "		WHERE LOWER(group_name) = '" . $db->sql_escape(utf8_strtolower($group_name)) . "'";	$result = $db->sql_query($sql);	$row = $db->sql_fetchrow($result);	$db->sql_freeresult($result);	if ($row)	{		return 'GROUP_NAME_TAKEN';	}	return false;}/*** Set users default group** @access private*/function group_set_user_default($group_id, $user_id_ary, $group_attributes = false, $update_listing = false){	global $cache, $db;	if (empty($user_id_ary))	{		return;	}	$attribute_ary = array(		'group_colour'			=> 'string',		'group_rank'			=> 'int',		'group_avatar'			=> 'string',		'group_avatar_type'		=> 'int',		'group_avatar_width'	=> 'int',		'group_avatar_height'	=> 'int',	);	$sql_ary = array(		'group_id'		=> $group_id	);	// Were group attributes passed to the function? If not we need to obtain them	if ($group_attributes === false)	{		$sql = 'SELECT ' . implode(', ', array_keys($attribute_ary)) . '			FROM ' . GROUPS_TABLE . "			WHERE group_id = $group_id";		$result = $db->sql_query($sql);		$group_attributes = $db->sql_fetchrow($result);		$db->sql_freeresult($result);	}	foreach ($attribute_ary as $attribute => $type)	{		if (isset($group_attributes[$attribute]))		{			// If we are about to set an avatar or rank, we will not overwrite with empty, unless we are not actually changing the default group			if ((strpos($attribute, 'group_avatar') === 0 || strpos($attribute, 'group_rank') === 0) && !$group_attributes[$attribute])			{				continue;			}			settype($group_attributes[$attribute], $type);			$sql_ary[str_replace('group_', 'user_', $attribute)] = $group_attributes[$attribute];		}	}	// Before we update the user attributes, we will make a list of those having now the group avatar assigned	if (isset($sql_ary['user_avatar']))	{		// Ok, get the original avatar data from users having an uploaded one (we need to remove these from the filesystem)		$sql = 'SELECT user_id, group_id, user_avatar			FROM ' . USERS_TABLE . '			WHERE ' . $db->sql_in_set('user_id', $user_id_ary) . '				AND user_avatar_type = ' . AVATAR_UPLOAD;		$result = $db->sql_query($sql);		while ($row = $db->sql_fetchrow($result))		{			avatar_delete('user', $row);		}		$db->sql_freeresult($result);	}	else	{		unset($sql_ary['user_avatar_type']);		unset($sql_ary['user_avatar_height']);		unset($sql_ary['user_avatar_width']);	}	$sql = 'UPDATE ' . USERS_TABLE . ' SET ' . $db->sql_build_array('UPDATE', $sql_ary) . '		WHERE ' . $db->sql_in_set('user_id', $user_id_ary);	$db->sql_query($sql);	if (isset($sql_ary['user_colour']))	{		// Update any cached colour information for these users		$sql = 'UPDATE ' . FORUMS_TABLE . " SET forum_last_poster_colour = '" . $db->sql_escape($sql_ary['user_colour']) . "'			WHERE " . $db->sql_in_set('forum_last_poster_id', $user_id_ary);		$db->sql_query($sql);		$sql = 'UPDATE ' . TOPICS_TABLE . " SET topic_first_poster_colour = '" . $db->sql_escape($sql_ary['user_colour']) . "'			WHERE " . $db->sql_in_set('topic_poster', $user_id_ary);		$db->sql_query($sql);		$sql = 'UPDATE ' . TOPICS_TABLE . " SET topic_last_poster_colour = '" . $db->sql_escape($sql_ary['user_colour']) . "'			WHERE " . $db->sql_in_set('topic_last_poster_id', $user_id_ary);		$db->sql_query($sql);		global $config;		if (in_array($config['newest_user_id'], $user_id_ary))		{			set_config('newest_user_colour', $sql_ary['user_colour'], true);		}	}	if ($update_listing)	{		group_update_listings($group_id);	}	// Because some tables/caches use usercolour-specific data we need to purge this here.	$cache->destroy('sql', MODERATOR_CACHE_TABLE);}/*** Get group name*/function get_group_name($group_id){	global $db, $user;	$sql = 'SELECT group_name, group_type		FROM ' . GROUPS_TABLE . '		WHERE group_id = ' . (int) $group_id;	$result = $db->sql_query($sql);	$row = $db->sql_fetchrow($result);	$db->sql_freeresult($result);	if (!$row || ($row['group_type'] == GROUP_SPECIAL && empty($user->lang)))	{		return '';	}	return ($row['group_type'] == GROUP_SPECIAL) ? $user->lang['G_' . $row['group_name']] : $row['group_name'];}/*** Obtain either the members of a specified group, the groups the specified user is subscribed to* or checking if a specified user is in a specified group. This function does not return pending memberships.** Note: Never use this more than once... first group your users/groups*/function group_memberships($group_id_ary = false, $user_id_ary = false, $return_bool = false){	global $db;	if (!$group_id_ary && !$user_id_ary)	{		return true;	}	if ($user_id_ary)	{		$user_id_ary = (!is_array($user_id_ary)) ? array($user_id_ary) : $user_id_ary;	}	if ($group_id_ary)	{		$group_id_ary = (!is_array($group_id_ary)) ? array($group_id_ary) : $group_id_ary;	}	$sql = 'SELECT ug.*, u.username, u.username_clean, u.user_email		FROM ' . USER_GROUP_TABLE . ' ug, ' . USERS_TABLE . ' u		WHERE ug.user_id = u.user_id			AND ug.user_pending = 0 AND ';	if ($group_id_ary)	{		$sql .= ' ' . $db->sql_in_set('ug.group_id', $group_id_ary);	}	if ($user_id_ary)	{		$sql .= ($group_id_ary) ? ' AND ' : ' ';		$sql .= $db->sql_in_set('ug.user_id', $user_id_ary);	}	$result = ($return_bool) ? $db->sql_query_limit($sql, 1) : $db->sql_query($sql);	$row = $db->sql_fetchrow($result);	if ($return_bool)	{		$db->sql_freeresult($result);		return ($row) ? true : false;	}	if (!$row)	{		return false;	}	$return = array();	do	{		$return[] = $row;	}	while ($row = $db->sql_fetchrow($result));	$db->sql_freeresult($result);	return $return;}/*** Re-cache moderators and foes if group has a_ or m_ permissions*/function group_update_listings($group_id){	global $auth;	$hold_ary = $auth->acl_group_raw_data($group_id, array('a_', 'm_'));	if (!sizeof($hold_ary))	{		return;	}	$mod_permissions = $admin_permissions = false;	foreach ($hold_ary as $g_id => $forum_ary)	{		foreach ($forum_ary as $forum_id => $auth_ary)		{			foreach ($auth_ary as $auth_option => $setting)			{				if ($mod_permissions && $admin_permissions)				{					break 3;				}				if ($setting != ACL_YES)				{					continue;				}				if ($auth_option == 'm_')				{					$mod_permissions = true;				}				if ($auth_option == 'a_')				{					$admin_permissions = true;				}			}		}	}	if ($mod_permissions)	{		if (!function_exists('cache_moderators'))		{			global $phpbb_root_path, $phpEx;			include($phpbb_root_path . 'includes/functions_admin.' . $phpEx);		}		cache_moderators();	}	if ($mod_permissions || $admin_permissions)	{		if (!function_exists('update_foes'))		{			global $phpbb_root_path, $phpEx;			include($phpbb_root_path . 'includes/functions_admin.' . $phpEx);		}		update_foes(array($group_id));	}}/*** Funtion to make a user leave the NEWLY_REGISTERED system group.* @access public* @param $user_id The id of the user to remove from the group*/function remove_newly_registered($user_id, $user_data = false){	global $db;	if ($user_data === false)	{		$sql = 'SELECT *			FROM ' . USERS_TABLE . '			WHERE user_id = ' . $user_id;		$result = $db->sql_query($sql);		$user_row = $db->sql_fetchrow($result);		$db->sql_freeresult($result);		if (!$user_row)		{			return false;		}		else		{			$user_data  = $user_row;		}	}	if (empty($user_data['user_new']))	{		return false;	}	$sql = 'SELECT group_id		FROM ' . GROUPS_TABLE . "		WHERE group_name = 'NEWLY_REGISTERED'			AND group_type = " . GROUP_SPECIAL;	$result = $db->sql_query($sql);	$group_id = (int) $db->sql_fetchfield('group_id');	$db->sql_freeresult($result);	if (!$group_id)	{		return false;	}	// We need to call group_user_del here, because this function makes sure everything is correctly changed.	// A downside for a call within the session handler is that the language is not set up yet - so no log entry	group_user_del($group_id, $user_id);	// Set user_new to 0 to let this not be triggered again	$sql = 'UPDATE ' . USERS_TABLE . '		SET user_new = 0		WHERE user_id = ' . $user_id;	$db->sql_query($sql);	// The new users group was the users default group?	if ($user_data['group_id'] == $group_id)	{		// Which group is now the users default one?		$sql = 'SELECT group_id			FROM ' . USERS_TABLE . '			WHERE user_id = ' . $user_id;		$result = $db->sql_query($sql);		$user_data['group_id'] = $db->sql_fetchfield('group_id');		$db->sql_freeresult($result);	}	return $user_data['group_id'];}?>
<?php/**** acp_attachments [English]** @package language* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** DO NOT CHANGE*/if (!defined('IN_PHPBB')){	exit;}if (empty($lang) || !is_array($lang)){	$lang = array();}// DEVELOPERS PLEASE NOTE//// All language files should use UTF-8 as their encoding and the files must not contain a BOM.//// Placeholders can now contain order information, e.g. instead of// 'Page %s of %s' you can (and should) write 'Page %1$s of %2$s', this allows// translators to re-order the output of data while ensuring it remains correct//// You do not need this where single placeholders are used, e.g. 'Message %d' is fine// equally where a string contains only two placeholders which are used to wrap text// in a url you again do not need to specify an order e.g., 'Click %sHERE%s' is fine$lang = array_merge($lang, array(	'ACP_ATTACHMENT_SETTINGS_EXPLAIN'	=> 'Here you can configure the main settings for attachments and the associated special categories.',	'ACP_EXTENSION_GROUPS_EXPLAIN'		=> 'Here you can add, delete, modify or disable your extension groups. Further options include the assignment of a special category to them, changing the download mechanism and defining an upload icon which will be displayed in front of the attachment which belongs to the group.',	'ACP_MANAGE_EXTENSIONS_EXPLAIN'		=> 'Here you can manage your allowed extensions. To activate your extensions, please refer to the extension groups management panel. We strongly recommend not to allow scripting extensions (such as <code>php</code>, <code>php3</code>, <code>php4</code>, <code>phtml</code>, <code>pl</code>, <code>cgi</code>, <code>py</code>, <code>rb</code>, <code>asp</code>, <code>aspx</code>, and so forth).',	'ACP_ORPHAN_ATTACHMENTS_EXPLAIN'	=> 'Here you are able to see orphaned files. This happens mostly if users are attaching files but not submitting the post. You are able to delete the files or attach them to existing posts. Attaching to posts requires a valid post ID, you have to determine this ID by yourself. This will assign the already uploaded attachment to the post you entered.',	'ADD_EXTENSION'						=> 'Add extension',	'ADD_EXTENSION_GROUP'				=> 'Add extension group',	'ADMIN_UPLOAD_ERROR'				=> 'Errors while trying to attach file: %s.',	'ALLOWED_FORUMS'					=> 'Allowed forums',	'ALLOWED_FORUMS_EXPLAIN'			=> 'Able to post the assigned extensions at the selected (or all if selected) forums.',	'ALLOWED_IN_PM_POST'				=> 'Allowed',	'ALLOW_ATTACHMENTS'					=> 'Allow attachments',	'ALLOW_ALL_FORUMS'					=> 'Allow all forums',	'ALLOW_IN_PM'						=> 'Allowed in private messaging',	'ALLOW_PM_ATTACHMENTS'				=> 'Allow attachments in private messages',	'ALLOW_SELECTED_FORUMS'				=> 'Only forums selected below',	'ASSIGNED_EXTENSIONS'				=> 'Assigned extensions',	'ASSIGNED_GROUP'					=> 'Assigned extension group',	'ATTACH_EXTENSIONS_URL'				=> 'Extensions',	'ATTACH_EXT_GROUPS_URL'				=> 'Extension groups',	'ATTACH_ID'							=> 'ID',	'ATTACH_MAX_FILESIZE'				=> 'Maximum file size',	'ATTACH_MAX_FILESIZE_EXPLAIN'		=> 'Maximum size of each file, with 0 being unlimited.',	'ATTACH_MAX_PM_FILESIZE'			=> 'Maximum file size messaging',	'ATTACH_MAX_PM_FILESIZE_EXPLAIN'	=> 'Maximum size of each file, with 0 being unlimited, attached to a private message.',	'ATTACH_ORPHAN_URL'					=> 'Orphan attachments',	'ATTACH_POST_ID'					=> 'Post ID',	'ATTACH_QUOTA'						=> 'Total attachment quota',	'ATTACH_QUOTA_EXPLAIN'				=> 'Maximum drive space available for attachments for the whole board, with 0 being unlimited.',	'ATTACH_TO_POST'					=> 'Attach file to post',	'CAT_FLASH_FILES'			=> 'Flash files',	'CAT_IMAGES'				=> 'Images',	'CAT_QUICKTIME_FILES'		=> 'Quicktime media files',	'CAT_RM_FILES'				=> 'RealMedia media files',	'CAT_WM_FILES'				=> 'Windows Media media files',	'CHECK_CONTENT'				=> 'Check attachment files',	'CHECK_CONTENT_EXPLAIN'		=> 'Some browsers can be tricked to assume an incorrect mimetype for uploaded files. This option ensures that such files likely to cause this are rejected.',	'CREATE_GROUP'				=> 'Create new group',	'CREATE_THUMBNAIL'			=> 'Create thumbnail',	'CREATE_THUMBNAIL_EXPLAIN'	=> 'Create a thumbnail in all possible situations.',	'DEFINE_ALLOWED_IPS'			=> 'Define allowed IPs/hostnames',	'DEFINE_DISALLOWED_IPS'			=> 'Define disallowed IPs/hostnames',	'DOWNLOAD_ADD_IPS_EXPLAIN'		=> 'To specify several different IPs or hostnames enter each on a new line. To specify a range of IP addresses separate the start and end with a hyphen (-), to specify a wildcard use *.',	'DOWNLOAD_REMOVE_IPS_EXPLAIN'	=> 'You can remove (or un-exclude) multiple IP addresses in one go using the appropriate combination of mouse and keyboard for your computer and browser. Excluded IPs have a blue background.',	'DISPLAY_INLINED'				=> 'Display images inline',	'DISPLAY_INLINED_EXPLAIN'		=> 'If set to No image attachments will show as a link.',	'DISPLAY_ORDER'					=> 'Attachment display order',	'DISPLAY_ORDER_EXPLAIN'			=> 'Display attachments ordered by time.',	'EDIT_EXTENSION_GROUP'			=> 'Edit extension group',	'EXCLUDE_ENTERED_IP'			=> 'Enable this to exclude the entered IP/hostname.',	'EXCLUDE_FROM_ALLOWED_IP'		=> 'Exclude IP from allowed IPs/hostnames',	'EXCLUDE_FROM_DISALLOWED_IP'	=> 'Exclude IP from disallowed IPs/hostnames',	'EXTENSIONS_UPDATED'			=> 'Extensions successfully updated.',	'EXTENSION_EXIST'				=> 'The extension %s already exists.',	'EXTENSION_GROUP'				=> 'Extension group',	'EXTENSION_GROUPS'				=> 'Extension groups',	'EXTENSION_GROUP_DELETED'		=> 'Extension group successfully deleted.',	'EXTENSION_GROUP_EXIST'			=> 'The extension group %s already exists.',	'EXT_GROUP_ARCHIVES'			=> 'Archives',	'EXT_GROUP_DOCUMENTS'			=> 'Documents',	'EXT_GROUP_DOWNLOADABLE_FILES'	=> 'Downloadable Files',	'EXT_GROUP_FLASH_FILES'			=> 'Flash Files',	'EXT_GROUP_IMAGES'				=> 'Images',	'EXT_GROUP_PLAIN_TEXT'			=> 'Plain Text',	'EXT_GROUP_QUICKTIME_MEDIA'		=> 'Quicktime Media',	'EXT_GROUP_REAL_MEDIA'			=> 'Real Media',	'EXT_GROUP_WINDOWS_MEDIA'		=> 'Windows Media',	'GO_TO_EXTENSIONS'		=> 'Go to extension management screen',	'GROUP_NAME'			=> 'Group name',	'IMAGE_LINK_SIZE'			=> 'Image link dimensions',	'IMAGE_LINK_SIZE_EXPLAIN'	=> 'Display image attachment as an inline text link if image is larger than this. To disable this behaviour, set the values to 0px by 0px.',	'IMAGICK_PATH'				=> 'Imagemagick path',	'IMAGICK_PATH_EXPLAIN'		=> 'Full path to the imagemagick convert application, e.g. <samp>/usr/bin/</samp>.',	'MAX_ATTACHMENTS'				=> 'Maximum number of attachments per post',	'MAX_ATTACHMENTS_PM'			=> 'Maximum number of attachments per private message',	'MAX_EXTGROUP_FILESIZE'			=> 'Maximum file size',	'MAX_IMAGE_SIZE'				=> 'Maximum image dimensions',	'MAX_IMAGE_SIZE_EXPLAIN'		=> 'Maximum size of image attachments. Set both values to 0px by 0px to disable dimension checking.',	'MAX_THUMB_WIDTH'				=> 'Maximum thumbnail width in pixel',	'MAX_THUMB_WIDTH_EXPLAIN'		=> 'A generated thumbnail will not exceed the width set here.',	'MIN_THUMB_FILESIZE'			=> 'Minimum thumbnail file size',	'MIN_THUMB_FILESIZE_EXPLAIN'	=> 'Do not create a thumbnail for images smaller than this.',	'MODE_INLINE'					=> 'Inline',	'MODE_PHYSICAL'					=> 'Physical',	'NOT_ALLOWED_IN_PM'			=> 'Only allowed in posts',	'NOT_ALLOWED_IN_PM_POST'	=> 'Not allowed',	'NOT_ASSIGNED'				=> 'Not assigned',	'NO_EXT_GROUP'				=> 'None',	'NO_EXT_GROUP_NAME'			=> 'No group name entered',	'NO_EXT_GROUP_SPECIFIED'	=> 'No extension group specified.',	'NO_FILE_CAT'				=> 'None',	'NO_IMAGE'					=> 'No image',	'NO_THUMBNAIL_SUPPORT'		=> 'Thumbnail support has been disabled. For proper functionality either the GD extension need to be available or imagemagick being installed. Both were not found.',	'NO_UPLOAD_DIR'				=> 'The upload directory you specified does not exist.',	'NO_WRITE_UPLOAD'			=> 'The upload directory you specified cannot be written to. Please alter the permissions to allow the webserver to write to it.',	'ONLY_ALLOWED_IN_PM'	=> 'Only allowed in private messages',	'ORDER_ALLOW_DENY'		=> 'Allow',	'ORDER_DENY_ALLOW'		=> 'Deny',	'REMOVE_ALLOWED_IPS'		=> 'Remove or un-exclude <em>allowed</em> IPs/hostnames',	'REMOVE_DISALLOWED_IPS'		=> 'Remove or un-exclude <em>disallowed</em> IPs/hostnames',	'SEARCH_IMAGICK'				=> 'Search for Imagemagick',	'SECURE_ALLOW_DENY'				=> 'Allow/Deny list',	'SECURE_ALLOW_DENY_EXPLAIN'		=> 'Change the default behaviour when secure downloads are enabled of the Allow/Deny list to that of a <strong>whitelist</strong> (Allow) or a <strong>blacklist</strong> (Deny).',	'SECURE_DOWNLOADS'				=> 'Enable secure downloads',	'SECURE_DOWNLOADS_EXPLAIN'		=> 'With this option enabled, downloads are limited to IPs/hostnames you define.',	'SECURE_DOWNLOAD_NOTICE'		=> 'Secure Downloads are not enabled. The settings below will be applied after enabling secure downloads.',	'SECURE_DOWNLOAD_UPDATE_SUCCESS'=> 'The IP list has been updated successfully.',	'SECURE_EMPTY_REFERRER'			=> 'Allow empty referrer',	'SECURE_EMPTY_REFERRER_EXPLAIN'	=> 'Secure downloads are based on referrers. Do you want to allow downloads for those omitting the referrer?',	'SETTINGS_CAT_IMAGES'			=> 'Image category settings',	'SPECIAL_CATEGORY'				=> 'Special category',	'SPECIAL_CATEGORY_EXPLAIN'		=> 'Special categories differ between the way presented within posts.',	'SUCCESSFULLY_UPLOADED'			=> 'Successfully uploaded.',	'SUCCESS_EXTENSION_GROUP_ADD'	=> 'Extension group successfully added.',	'SUCCESS_EXTENSION_GROUP_EDIT'	=> 'Extension group successfully updated.',	'UPLOADING_FILES'				=> 'Uploading files',	'UPLOADING_FILE_TO'				=> 'Uploading file %1$s to post number %2$d',	'UPLOAD_DENIED_FORUM'			=> 'You do not have the permission to upload files to forum %s.',	'UPLOAD_DIR'					=> 'Upload directory',	'UPLOAD_DIR_EXPLAIN'			=> 'Storage path for attachments. Please note that if you change this directory while already having uploaded attachments you need to manually copy the files to their new location.',	'UPLOAD_ICON'					=> 'Upload icon',	'UPLOAD_NOT_DIR'				=> 'The upload location you specified does not appear to be a directory.',));?>
<?php/**** @package acp* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @ignore*/if (!defined('IN_PHPBB')){	exit;}/*** @package acp*/class acp_styles{	var $u_action;	var $style_cfg;	var $template_cfg;	var $theme_cfg;	var $imageset_cfg;	var $imageset_keys;	function main($id, $mode)	{		global $db, $user, $auth, $template, $cache;		global $config, $phpbb_root_path, $phpbb_admin_path, $phpEx;		// Hardcoded template bitfield to add for new templates		$bitfield = new bitfield();		$bitfield->set(0);		$bitfield->set(1);		$bitfield->set(2);		$bitfield->set(3);		$bitfield->set(4);		$bitfield->set(8);		$bitfield->set(9);		$bitfield->set(11);		$bitfield->set(12);		define('TEMPLATE_BITFIELD', $bitfield->get_base64());		unset($bitfield);		$user->add_lang('acp/styles');		$this->tpl_name = 'acp_styles';		$this->page_title = 'ACP_CAT_STYLES';		$action = request_var('action', '');		$action = (isset($_POST['add'])) ? 'add' : $action;		$style_id = request_var('id', 0);		// Fill the configuration variables		$this->style_cfg = $this->template_cfg = $this->theme_cfg = $this->imageset_cfg = '## phpBB {MODE} configuration file## @package phpBB3# @copyright (c) 2005 phpBB Group# @license http://opensource.org/licenses/gpl-license.php GNU Public License### At the left is the name, please do not change this# At the right the value is entered# For on/off options the valid values are on, off, 1, 0, true and false## Values get trimmed, if you want to add a space in front or at the end of# the value, then enclose the value with single or double quotes.# Single and double quotes do not need to be escaped.### General Information about this {MODE}name = {NAME}copyright = {COPYRIGHT}version = {VERSION}';		$this->theme_cfg .= '# Some configuration options## You have to turn this option on if you want to use the# path template variables ({T_IMAGESET_PATH} for example) within# your css file.# This is mostly the case if you want to use language specific# images within your css file.#parse_css_file = {PARSE_CSS_FILE}';		$this->template_cfg .= '# Some configuration options## You can use this function to inherit templates from another template.# The template of the given name has to be installed.# Templates cannot inherit from inheriting templates.#';		$this->imageset_keys = array(			'logos' => array(				'site_logo',			),			'buttons'	=> array(				'icon_back_top', 'icon_contact_aim', 'icon_contact_email', 'icon_contact_icq', 'icon_contact_jabber', 'icon_contact_msnm', 'icon_contact_pm', 'icon_contact_yahoo', 'icon_contact_www', 'icon_post_delete', 'icon_post_edit', 'icon_post_info', 'icon_post_quote', 'icon_post_report', 'icon_user_online', 'icon_user_offline', 'icon_user_profile', 'icon_user_search', 'icon_user_warn', 'button_pm_forward', 'button_pm_new', 'button_pm_reply', 'button_topic_locked', 'button_topic_new', 'button_topic_reply',			),			'icons'		=> array(				'icon_post_target', 'icon_post_target_unread', 'icon_topic_attach', 'icon_topic_latest', 'icon_topic_newest', 'icon_topic_reported', 'icon_topic_unapproved', 'icon_friend', 'icon_foe',			),			'forums'	=> array(				'forum_link', 'forum_read', 'forum_read_locked', 'forum_read_subforum', 'forum_unread', 'forum_unread_locked', 'forum_unread_subforum', 'subforum_read', 'subforum_unread'			),			'folders'	=> array(				'topic_moved', 'topic_read', 'topic_read_mine', 'topic_read_hot', 'topic_read_hot_mine', 'topic_read_locked', 'topic_read_locked_mine', 'topic_unread', 'topic_unread_mine', 'topic_unread_hot', 'topic_unread_hot_mine', 'topic_unread_locked', 'topic_unread_locked_mine', 'sticky_read', 'sticky_read_mine', 'sticky_read_locked', 'sticky_read_locked_mine', 'sticky_unread', 'sticky_unread_mine', 'sticky_unread_locked', 'sticky_unread_locked_mine', 'announce_read', 'announce_read_mine', 'announce_read_locked', 'announce_read_locked_mine', 'announce_unread', 'announce_unread_mine', 'announce_unread_locked', 'announce_unread_locked_mine', 'global_read', 'global_read_mine', 'global_read_locked', 'global_read_locked_mine', 'global_unread', 'global_unread_mine', 'global_unread_locked', 'global_unread_locked_mine', 'pm_read', 'pm_unread',			),			'polls'		=> array(				'poll_left', 'poll_center', 'poll_right',			),			'ui'		=> array(				'upload_bar',			),			'user'		=> array(				'user_icon1', 'user_icon2', 'user_icon3', 'user_icon4', 'user_icon5', 'user_icon6', 'user_icon7', 'user_icon8', 'user_icon9', 'user_icon10',			),		);		// Execute overall actions		switch ($action)		{			case 'delete':				if ($style_id)				{					$this->remove($mode, $style_id);					return;				}			break;			case 'export':				if ($style_id)				{					$this->export($mode, $style_id);					return;				}			break;			case 'install':				$this->install($mode);				return;			break;			case 'add':				$this->add($mode);				return;			break;			case 'details':				if ($style_id)				{					$this->details($mode, $style_id);					return;				}			break;			case 'edit':				if ($style_id)				{					switch ($mode)					{						case 'imageset':							return $this->edit_imageset($style_id);						case 'template':							return $this->edit_template($style_id);						case 'theme':							return $this->edit_theme($style_id);					}				}			break;			case 'cache':				if ($style_id)				{					switch ($mode)					{						case 'template':							return $this->template_cache($style_id);					}				}			break;		}		switch ($mode)		{			case 'style':				switch ($action)				{					case 'activate':					case 'deactivate':						if ($style_id == $config['default_style'])						{							trigger_error($user->lang['DEACTIVATE_DEFAULT'] . adm_back_link($this->u_action), E_USER_WARNING);						}						if (($action == 'deactivate' && confirm_box(true)) || $action == 'activate')						{							$sql = 'UPDATE ' . STYLES_TABLE . '								SET style_active = ' . (($action == 'activate') ? 1 : 0) . '								WHERE style_id = ' . $style_id;							$db->sql_query($sql);							// Set style to default for any member using deactivated style							if ($action == 'deactivate')							{								$sql = 'UPDATE ' . USERS_TABLE . '									SET user_style = ' . $config['default_style'] . "									WHERE user_style = $style_id";								$db->sql_query($sql);								$sql = 'UPDATE ' . FORUMS_TABLE . '									SET forum_style = 0									WHERE forum_style = ' . $style_id;								$db->sql_query($sql);							}						}						else if ($action == 'deactivate')						{							$s_hidden_fields = array(								'i'			=> $id,								'mode'		=> $mode,								'action'	=> $action,								'style_id'	=> $style_id,							);							confirm_box(false, $user->lang['CONFIRM_OPERATION'], build_hidden_fields($s_hidden_fields));						}					break;				}				$this->frontend('style', array('details'), array('export', 'delete'));			break;			case 'template':				switch ($action)				{					// Refresh template data stored in db and clear cache					case 'refresh':						$sql = 'SELECT *							FROM ' . STYLES_TEMPLATE_TABLE . "							WHERE template_id = $style_id";						$result = $db->sql_query($sql);						$template_row = $db->sql_fetchrow($result);						$db->sql_freeresult($result);						if (!$template_row)						{							trigger_error($user->lang['NO_TEMPLATE'] . adm_back_link($this->u_action), E_USER_WARNING);						}						if (confirm_box(true))						{							$template_refreshed = '';							// Only refresh database if the template is stored in the database							if ($template_row['template_storedb'] && file_exists("{$phpbb_root_path}styles/{$template_row['template_path']}/template/"))							{								$filelist = array('' => array());								$sql = 'SELECT template_filename, template_mtime									FROM ' . STYLES_TEMPLATE_DATA_TABLE . "									WHERE template_id = $style_id";								$result = $db->sql_query($sql);								while ($row = $db->sql_fetchrow($result))								{//									if (@filemtime("{$phpbb_root_path}styles/{$template_row['template_path']}/template/" . $row['template_filename']) > $row['template_mtime'])//									{										// get folder info from the filename										if (($slash_pos = strrpos($row['template_filename'], '/')) === false)										{											$filelist[''][] = $row['template_filename'];										}										else										{											$filelist[substr($row['template_filename'], 0, $slash_pos + 1)][] = substr($row['template_filename'], $slash_pos + 1, strlen($row['template_filename']) - $slash_pos - 1);										}//									}								}								$db->sql_freeresult($result);								$this->store_templates('update', $style_id, $template_row['template_path'], $filelist);								unset($filelist);								$template_refreshed = $user->lang['TEMPLATE_REFRESHED'] . '<br />';								add_log('admin', 'LOG_TEMPLATE_REFRESHED', $template_row['template_name']);							}							$this->clear_template_cache($template_row);							trigger_error($template_refreshed . $user->lang['TEMPLATE_CACHE_CLEARED'] . adm_back_link($this->u_action));						}						else						{							confirm_box(false, ($template_row['template_storedb']) ? $user->lang['CONFIRM_TEMPLATE_REFRESH'] : $user->lang['CONFIRM_TEMPLATE_CLEAR_CACHE'], build_hidden_fields(array(								'i'			=> $id,								'mode'		=> $mode,								'action'	=> $action,								'id'		=> $style_id							)));						}					break;				}				$this->frontend('template', array('edit', 'cache', 'details'), array('refresh', 'export', 'delete'));			break;			case 'theme':				switch ($action)				{					// Refresh theme data stored in the database					case 'refresh':						$sql = 'SELECT *							FROM ' . STYLES_THEME_TABLE . "							WHERE theme_id = $style_id";						$result = $db->sql_query($sql);						$theme_row = $db->sql_fetchrow($result);						$db->sql_freeresult($result);						if (!$theme_row)						{							trigger_error($user->lang['NO_THEME'] . adm_back_link($this->u_action), E_USER_WARNING);						}						if (!$theme_row['theme_storedb'])						{							trigger_error($user->lang['THEME_ERR_REFRESH_FS'] . adm_back_link($this->u_action), E_USER_WARNING);						}						if (confirm_box(true))						{							if ($theme_row['theme_storedb'] && file_exists("{$phpbb_root_path}styles/{$theme_row['theme_path']}/theme/stylesheet.css"))							{								// Save CSS contents								$sql_ary = array(									'theme_mtime'	=> (int) filemtime("{$phpbb_root_path}styles/{$theme_row['theme_path']}/theme/stylesheet.css"),									'theme_data'	=> $this->db_theme_data($theme_row)								);								$sql = 'UPDATE ' . STYLES_THEME_TABLE . ' SET ' . $db->sql_build_array('UPDATE', $sql_ary) . "									WHERE theme_id = $style_id";								$db->sql_query($sql);								$cache->destroy('sql', STYLES_THEME_TABLE);								add_log('admin', 'LOG_THEME_REFRESHED', $theme_row['theme_name']);								trigger_error($user->lang['THEME_REFRESHED'] . adm_back_link($this->u_action));							}						}						else						{							confirm_box(false, $user->lang['CONFIRM_THEME_REFRESH'], build_hidden_fields(array(								'i'			=> $id,								'mode'		=> $mode,								'action'	=> $action,								'id'		=> $style_id							)));						}					break;				}				$this->frontend('theme', array('edit', 'details'), array('refresh', 'export', 'delete'));			break;			case 'imageset':				switch ($action)				{					case 'refresh':						$sql = 'SELECT *							FROM ' . STYLES_IMAGESET_TABLE . "							WHERE imageset_id = $style_id";						$result = $db->sql_query($sql);						$imageset_row = $db->sql_fetchrow($result);						$db->sql_freeresult($result);						if (!$imageset_row)						{							trigger_error($user->lang['NO_IMAGESET'] . adm_back_link($this->u_action), E_USER_WARNING);						}						if (confirm_box(true))						{							$sql_ary = array();							$imageset_definitions = array();							foreach ($this->imageset_keys as $topic => $key_array)							{								$imageset_definitions = array_merge($imageset_definitions, $key_array);							}							$cfg_data_imageset = parse_cfg_file("{$phpbb_root_path}styles/{$imageset_row['imageset_path']}/imageset/imageset.cfg");							$db->sql_transaction('begin');							$sql = 'DELETE FROM ' . STYLES_IMAGESET_DATA_TABLE . '								WHERE imageset_id = ' . $style_id;							$result = $db->sql_query($sql);							foreach ($cfg_data_imageset as $image_name => $value)							{								if (strpos($value, '*') !== false)								{									if (substr($value, -1, 1) === '*')									{										list($image_filename, $image_height) = explode('*', $value);										$image_width = 0;									}									else									{										list($image_filename, $image_height, $image_width) = explode('*', $value);									}								}								else								{									$image_filename = $value;									$image_height = $image_width = 0;								}								if (strpos($image_name, 'img_') === 0 && $image_filename)								{									$image_name = substr($image_name, 4);									if (in_array($image_name, $imageset_definitions))									{										$sql_ary[] = array(											'image_name'		=> (string) $image_name,											'image_filename'	=> (string) $image_filename,											'image_height'		=> (int) $image_height,											'image_width'		=> (int) $image_width,											'imageset_id'		=> (int) $style_id,											'image_lang'		=> '',										);									}								}							}							$sql = 'SELECT lang_dir								FROM ' . LANG_TABLE;							$result = $db->sql_query($sql);							while ($row = $db->sql_fetchrow($result))							{								if (@file_exists("{$phpbb_root_path}styles/{$imageset_row['imageset_path']}/imageset/{$row['lang_dir']}/imageset.cfg"))								{									$cfg_data_imageset_data = parse_cfg_file("{$phpbb_root_path}styles/{$imageset_row['imageset_path']}/imageset/{$row['lang_dir']}/imageset.cfg");									foreach ($cfg_data_imageset_data as $image_name => $value)									{										if (strpos($value, '*') !== false)										{											if (substr($value, -1, 1) === '*')											{												list($image_filename, $image_height) = explode('*', $value);												$image_width = 0;											}											else											{												list($image_filename, $image_height, $image_width) = explode('*', $value);											}										}										else										{											$image_filename = $value;											$image_height = $image_width = 0;										}										if (strpos($image_name, 'img_') === 0 && $image_filename)										{											$image_name = substr($image_name, 4);											if (in_array($image_name, $imageset_definitions))											{												$sql_ary[] = array(													'image_name'		=> (string) $image_name,													'image_filename'	=> (string) $image_filename,													'image_height'		=> (int) $image_height,													'image_width'		=> (int) $image_width,													'imageset_id'		=> (int) $style_id,													'image_lang'		=> (string) $row['lang_dir'],												);											}										}									}								}							}							$db->sql_freeresult($result);							$db->sql_multi_insert(STYLES_IMAGESET_DATA_TABLE, $sql_ary);							$db->sql_transaction('commit');							$cache->destroy('sql', STYLES_IMAGESET_DATA_TABLE);							$cache->destroy('imageset_site_logo_md5');							add_log('admin', 'LOG_IMAGESET_REFRESHED', $imageset_row['imageset_name']);							trigger_error($user->lang['IMAGESET_REFRESHED'] . adm_back_link($this->u_action));						}						else						{							confirm_box(false, $user->lang['CONFIRM_IMAGESET_REFRESH'], build_hidden_fields(array(								'i'			=> $id,								'mode'		=> $mode,								'action'	=> $action,								'id'		=> $style_id							)));						}					break;				}				$this->frontend('imageset', array('edit', 'details'), array('refresh', 'export', 'delete'));			break;		}	}	/**	* Build Frontend with supplied options	*/	function frontend($mode, $options, $actions)	{		global $user, $template, $db, $config, $phpbb_root_path, $phpEx;		$sql_from = '';		$style_count = array();		switch ($mode)		{			case 'style':				$sql_from = STYLES_TABLE;				$sql = 'SELECT user_style, COUNT(user_style) AS style_count					FROM ' . USERS_TABLE . '					GROUP BY user_style';				$result = $db->sql_query($sql);				while ($row = $db->sql_fetchrow($result))				{					$style_count[$row['user_style']] = $row['style_count'];				}				$db->sql_freeresult($result);			break;			case 'template':				$sql_from = STYLES_TEMPLATE_TABLE;			break;			case 'theme':				$sql_from = STYLES_THEME_TABLE;			break;			case 'imageset':				$sql_from = STYLES_IMAGESET_TABLE;			break;		}		$l_prefix = strtoupper($mode);		$this->page_title = 'ACP_' . $l_prefix . 'S';		$template->assign_vars(array(			'S_FRONTEND'		=> true,			'S_STYLE'			=> ($mode == 'style') ? true : false,			'L_TITLE'			=> $user->lang[$this->page_title],			'L_EXPLAIN'			=> $user->lang[$this->page_title . '_EXPLAIN'],			'L_NAME'			=> $user->lang[$l_prefix . '_NAME'],			'L_INSTALLED'		=> $user->lang['INSTALLED_' . $l_prefix],			'L_UNINSTALLED'		=> $user->lang['UNINSTALLED_' . $l_prefix],			'L_NO_UNINSTALLED'	=> $user->lang['NO_UNINSTALLED_' . $l_prefix],			'L_CREATE'			=> $user->lang['CREATE_' . $l_prefix],			'U_ACTION'			=> $this->u_action,			)		);		$sql = "SELECT *			FROM $sql_from";		$result = $db->sql_query($sql);		$installed = array();		$basis_options = '<option class="sep" value="">' . $user->lang['OPTIONAL_BASIS'] . '</option>';		while ($row = $db->sql_fetchrow($result))		{			$installed[] = $row[$mode . '_name'];			$basis_options .= '<option value="' . $row[$mode . '_id'] . '">' . $row[$mode . '_name'] . '</option>';			$stylevis = ($mode == 'style' && !$row['style_active']) ? 'activate' : 'deactivate';			$s_options = array();			foreach ($options as $option)			{				$s_options[] = '<a href="' . $this->u_action . "&amp;action=$option&amp;id=" . $row[$mode . '_id'] . '">' . $user->lang[strtoupper($option)] . '</a>';			}			$s_actions = array();			foreach ($actions as $option)			{				$s_actions[] = '<a href="' . $this->u_action . "&amp;action=$option&amp;id=" . $row[$mode . '_id'] . '">' . $user->lang[strtoupper($option)] . '</a>';			}			$template->assign_block_vars('installed', array(				'S_DEFAULT_STYLE'		=> ($mode == 'style' && $row['style_id'] == $config['default_style']) ? true : false,				'U_EDIT'				=> $this->u_action . '&amp;action=' . (($mode == 'style') ? 'details' : 'edit') . '&amp;id=' . $row[$mode . '_id'],				'U_STYLE_ACT_DEACT'		=> $this->u_action . '&amp;action=' . $stylevis . '&amp;id=' . $row[$mode . '_id'],				'L_STYLE_ACT_DEACT'		=> $user->lang['STYLE_' . strtoupper($stylevis)],				'S_OPTIONS'				=> implode(' | ', $s_options),				'S_ACTIONS'				=> implode(' | ', $s_actions),				'U_PREVIEW'				=> ($mode == 'style') ? append_sid("{$phpbb_root_path}index.$phpEx", "$mode=" . $row[$mode . '_id']) : '',				'NAME'					=> $row[$mode . '_name'],				'STYLE_COUNT'			=> ($mode == 'style' && isset($style_count[$row['style_id']])) ? $style_count[$row['style_id']] : 0,				)			);		}		$db->sql_freeresult($result);		// Grab uninstalled items		$new_ary = $cfg = array();		$dp = @opendir("{$phpbb_root_path}styles");		if ($dp)		{			while (($file = readdir($dp)) !== false)			{				if ($file[0] == '.' || !is_dir($phpbb_root_path . 'styles/' . $file))				{					continue;				}				$subpath = ($mode != 'style') ? "$mode/" : '';				if (file_exists("{$phpbb_root_path}styles/$file/$subpath$mode.cfg"))				{					if ($cfg = file("{$phpbb_root_path}styles/$file/$subpath$mode.cfg"))					{						$items = parse_cfg_file('', $cfg);						$name = (isset($items['name'])) ? trim($items['name']) : false;						if ($name && !in_array($name, $installed))						{							$new_ary[] = array(								'path'		=> $file,								'name'		=> $name,								'copyright'	=> $items['copyright'],							);						}					}				}			}			closedir($dp);		}		unset($installed);		if (sizeof($new_ary))		{			foreach ($new_ary as $cfg)			{				$template->assign_block_vars('uninstalled', array(					'NAME'			=> $cfg['name'],					'COPYRIGHT'		=> $cfg['copyright'],					'U_INSTALL'		=> $this->u_action . '&amp;action=install&amp;path=' . urlencode($cfg['path']))				);			}		}		unset($new_ary);		$template->assign_vars(array(			'S_BASIS_OPTIONS'		=> $basis_options)		);	}	/**	* Provides a template editor which allows saving changes to template files on the filesystem or in the database.	*	* @param int $template_id specifies which template set is being edited	*/	function edit_template($template_id)	{		global $phpbb_root_path, $phpEx, $config, $db, $cache, $user, $template, $safe_mode;		if (defined('PHPBB_DISABLE_ACP_EDITOR'))		{			trigger_error($user->lang['EDITOR_DISABLED'] . adm_back_link($this->u_action));		}		$this->page_title = 'EDIT_TEMPLATE';		$filelist = $filelist_cats = array();		$template_data	= utf8_normalize_nfc(request_var('template_data', '', true));		$template_data	= htmlspecialchars_decode($template_data);		$template_file	= utf8_normalize_nfc(request_var('template_file', '', true));		$text_rows		= max(5, min(999, request_var('text_rows', 20)));		$save_changes	= (isset($_POST['save'])) ? true : false;		// make sure template_file path doesn't go upwards		$template_file = preg_replace('#\.{2,}#', '.', $template_file);		// Retrieve some information about the template		$sql = 'SELECT template_storedb, template_path, template_name			FROM ' . STYLES_TEMPLATE_TABLE . "			WHERE template_id = $template_id";		$result = $db->sql_query($sql);		$template_info = $db->sql_fetchrow($result);		$db->sql_freeresult($result);		if (!$template_info)		{			trigger_error($user->lang['NO_TEMPLATE'] . adm_back_link($this->u_action), E_USER_WARNING);		}		if ($save_changes && !check_form_key('acp_styles'))		{			trigger_error($user->lang['FORM_INVALID'] . adm_back_link($this->u_action), E_USER_WARNING);		}		else if (!$save_changes)		{			add_form_key('acp_styles');		}		// save changes to the template if the user submitted any		if ($save_changes && $template_file)		{			// Get the filesystem location of the current file			$file = "{$phpbb_root_path}styles/{$template_info['template_path']}/template/$template_file";			$additional = '';			// If the template is stored on the filesystem try to write the file else store it in the database			if (!$safe_mode && !$template_info['template_storedb'] && file_exists($file) && phpbb_is_writable($file))			{				if (!($fp = @fopen($file, 'wb')))				{					// File exists and is writeable, but still not able to be written to					trigger_error(sprintf($user->lang['TEMPLATE_FILE_NOT_WRITABLE'], htmlspecialchars($template_file)) . adm_back_link($this->u_action), E_USER_WARNING);				}				fwrite($fp, $template_data);				fclose($fp);			}			else			{				$db->sql_transaction('begin');				// If it's not stored in the db yet, then update the template setting and store all template files in the db				if (!$template_info['template_storedb'])				{					if ($super = $this->get_super('template', $template_id))					{						$this->store_in_db('template', $super['template_id']);					}					else					{						$this->store_in_db('template', $template_id);					}					add_log('admin', 'LOG_TEMPLATE_EDIT_DETAILS', $template_info['template_name']);					$additional .= '<br />' . $user->lang['EDIT_TEMPLATE_STORED_DB'];				}				// Update the template_data table entry for this template file				$sql = 'UPDATE ' . STYLES_TEMPLATE_DATA_TABLE . "					SET template_data = '" . $db->sql_escape($template_data) . "', template_mtime = " . time() . "					WHERE template_id = $template_id						AND template_filename = '" . $db->sql_escape($template_file) . "'";				$db->sql_query($sql);				$db->sql_transaction('commit');			}			// destroy the cached version of the template (filename without extension)			$this->clear_template_cache($template_info, array(substr($template_file, 0, -5)));			$cache->destroy('sql', STYLES_TABLE);			add_log('admin', 'LOG_TEMPLATE_EDIT', $template_info['template_name'], $template_file);			trigger_error($user->lang['TEMPLATE_FILE_UPDATED'] . $additional . adm_back_link($this->u_action . "&amp;action=edit&amp;id=$template_id&amp;text_rows=$text_rows&amp;template_file=$template_file"));		}		// Generate a category array containing template filenames		if (!$template_info['template_storedb'])		{			$template_path = "{$phpbb_root_path}styles/{$template_info['template_path']}/template";			$filelist = filelist($template_path, '', 'html');			$filelist[''] = array_diff($filelist[''], array('bbcode.html'));			if ($template_file)			{				if (!file_exists($template_path . "/$template_file") || !($template_data = file_get_contents($template_path . "/$template_file")))				{					trigger_error($user->lang['NO_TEMPLATE'] . adm_back_link($this->u_action), E_USER_WARNING);				}			}		}		else		{			$sql = 'SELECT *				FROM ' . STYLES_TEMPLATE_DATA_TABLE . "				WHERE template_id = $template_id";			$result = $db->sql_query($sql);			$filelist = array('' => array());			while ($row = $db->sql_fetchrow($result))			{				$file_info = pathinfo($row['template_filename']);				if (($file_info['basename'] != 'bbcode') && ($file_info['extension'] == 'html'))				{					if (($file_info['dirname'] == '.') || empty($file_info['dirname']))					{						$filelist[''][] = $row['template_filename'];					}					else					{						$filelist[$file_info['dirname'] . '/'][] = $file_info['basename'];					}				}				if ($row['template_filename'] == $template_file)				{					$template_data = $row['template_data'];				}			}			$db->sql_freeresult($result);			unset($file_info);		}		if (empty($filelist['']))		{			trigger_error($user->lang['NO_TEMPLATE'] . adm_back_link($this->u_action), E_USER_WARNING);		}		// Now create the categories		$filelist_cats[''] = array();		foreach ($filelist as $pathfile => $file_ary)		{			// Use the directory name as category name			if (!empty($pathfile))			{				$filelist_cats[$pathfile] = array();				foreach ($file_ary as $file)				{					$filelist_cats[$pathfile][$pathfile . $file] = $file;				}			}			// or if it's in the main category use the word before the first underscore to group files			else			{				$cats = array();				foreach ($file_ary as $file)				{					$cats[] = substr($file, 0, strpos($file, '_'));					$filelist_cats[substr($file, 0, strpos($file, '_'))][$file] = $file;				}				$cats = array_values(array_unique($cats));				// we don't need any single element categories so put them into the misc '' category				for ($i = 0, $n = sizeof($cats); $i < $n; $i++)				{					if (sizeof($filelist_cats[$cats[$i]]) == 1 && $cats[$i] !== '')					{						$filelist_cats[''][key($filelist_cats[$cats[$i]])] = current($filelist_cats[$cats[$i]]);						unset($filelist_cats[$cats[$i]]);					}				}				unset($cats);			}		}		unset($filelist);		// Generate list of categorised template files		$tpl_options = '';		ksort($filelist_cats);		foreach ($filelist_cats as $category => $tpl_ary)		{			ksort($tpl_ary);			if (!empty($category))			{				$tpl_options .= '<option class="sep" value="">' . $category . '</option>';			}			foreach ($tpl_ary as $filename => $file)			{				$selected = ($template_file == $filename) ? ' selected="selected"' : '';				$tpl_options .= '<option value="' . $filename . '"' . $selected . '>' . $file . '</option>';			}		}		$template->assign_vars(array(			'S_EDIT_TEMPLATE'	=> true,			'S_HIDDEN_FIELDS'	=> build_hidden_fields(array('template_file' => $template_file)),			'S_TEMPLATES'		=> $tpl_options,			'U_ACTION'			=> $this->u_action . "&amp;action=edit&amp;id=$template_id&amp;text_rows=$text_rows",			'U_BACK'			=> $this->u_action,			'L_EDIT'			=> $user->lang['EDIT_TEMPLATE'],			'L_EDIT_EXPLAIN'	=> $user->lang['EDIT_TEMPLATE_EXPLAIN'],			'L_EDITOR'			=> $user->lang['TEMPLATE_EDITOR'],			'L_EDITOR_HEIGHT'	=> $user->lang['TEMPLATE_EDITOR_HEIGHT'],			'L_FILE'			=> $user->lang['TEMPLATE_FILE'],			'L_SELECT'			=> $user->lang['SELECT_TEMPLATE'],			'L_SELECTED'		=> $user->lang['SELECTED_TEMPLATE'],			'L_SELECTED_FILE'	=> $user->lang['SELECTED_TEMPLATE_FILE'],			'SELECTED_TEMPLATE'	=> $template_info['template_name'],			'TEMPLATE_FILE'		=> $template_file,			'TEMPLATE_DATA'		=> utf8_htmlspecialchars($template_data),			'TEXT_ROWS'			=> $text_rows)		);	}	/**	* Allows the admin to view cached versions of template files and clear single template cache files	*	* @param int $template_id specifies which template's cache is shown	*/	function template_cache($template_id)	{		global $phpbb_root_path, $phpEx, $config, $db, $cache, $user, $template;		$source		= str_replace('/', '.', request_var('source', ''));		$file_ary	= array_diff(request_var('delete', array('')), array(''));		$submit		= isset($_POST['submit']) ? true : false;		$sql = 'SELECT *			FROM ' . STYLES_TEMPLATE_TABLE . "			WHERE template_id = $template_id";		$result = $db->sql_query($sql);		$template_row = $db->sql_fetchrow($result);		$db->sql_freeresult($result);		if (!$template_row)		{			trigger_error($user->lang['NO_TEMPLATE'] . adm_back_link($this->u_action), E_USER_WARNING);		}		// User wants to delete one or more files ...		if ($submit && $file_ary)		{			$this->clear_template_cache($template_row, $file_ary);			trigger_error($user->lang['TEMPLATE_CACHE_CLEARED'] . adm_back_link($this->u_action . "&amp;action=cache&amp;id=$template_id"));		}		$cache_prefix = 'tpl_' . str_replace('_', '-', $template_row['template_path']);		// Someone wants to see the cached source ... so we'll highlight it,		// add line numbers and indent it appropriately. This could be nasty		// on larger source files ...		if ($source && file_exists("{$phpbb_root_path}cache/{$cache_prefix}_$source.html.$phpEx"))		{			adm_page_header($user->lang['TEMPLATE_CACHE']);			$template->set_filenames(array(				'body'	=> 'viewsource.html')			);			$template->assign_vars(array(				'FILENAME'	=> str_replace('.', '/', $source) . '.html')			);			$code = str_replace(array("\r\n", "\r"), array("\n", "\n"), file_get_contents("{$phpbb_root_path}cache/{$cache_prefix}_$source.html.$phpEx"));			$conf = array('highlight.bg', 'highlight.comment', 'highlight.default', 'highlight.html', 'highlight.keyword', 'highlight.string');			foreach ($conf as $ini_var)			{				@ini_set($ini_var, str_replace('highlight.', 'syntax', $ini_var));			}			$marker = 'MARKER' . time();			$code = highlight_string(str_replace("\n", $marker, $code), true);			$code = str_replace($marker, "\n", $code);			$str_from = array('<span style="color: ', '<font color="syntax', '</font>', '<code>', '</code>','[', ']', '.', ':');			$str_to = array('<span class="', '<span class="syntax', '</span>', '', '', '&#91;', '&#93;', '&#46;', '&#58;');			$code = str_replace($str_from, $str_to, $code);			$code = preg_replace('#^(<span class="[a-z_]+">)\n?(.*?)\n?(</span>)$#ism', '$1$2$3', $code);			$code = substr($code, strlen('<span class="syntaxhtml">'));			$code = substr($code, 0, -1 * strlen('</ span>'));			$code = explode("\n", $code);			foreach ($code as $key => $line)			{				$template->assign_block_vars('source', array(					'LINENUM'	=> $key + 1,					'LINE'		=> preg_replace('#([^ ;])&nbsp;([^ &])#', '$1 $2', $line))				);				unset($code[$key]);			}			adm_page_footer();		}		$filemtime = array();		if ($template_row['template_storedb'])		{			$ids = array();			if (isset($template_row['template_inherits_id']) && $template_row['template_inherits_id'])			{				$ids[] = $template_row['template_inherits_id'];			}			$ids[] = $template_row['template_id'];			$filemtime 			= array();			$file_template_db	= array();			foreach ($ids as $id)			{				$sql = 'SELECT template_filename, template_mtime					FROM ' . STYLES_TEMPLATE_DATA_TABLE . "					WHERE template_id = $id";				$result = $db->sql_query($sql);				while ($row = $db->sql_fetchrow($result))				{					$filemtime[$row['template_filename']] = $row['template_mtime'];					$file_template_db[$row['template_filename']] = $id;				}				$db->sql_freeresult($result);			}		}		// Get a list of cached template files and then retrieve additional information about them		$file_ary = $this->template_cache_filelist($template_row['template_path']);		foreach ($file_ary as $file)		{			$file		= str_replace('/', '.', $file);			// perform some dirty guessing to get the path right.			// We assume that three dots in a row were '../'			$tpl_file	= str_replace('.', '/', $file);			$tpl_file	= str_replace('///', '../', $tpl_file);			$filename = "{$cache_prefix}_$file.html.$phpEx";			if (!file_exists("{$phpbb_root_path}cache/$filename"))			{				continue;			}			$file_tpl = "{$phpbb_root_path}styles/{$template_row['template_path']}/template/$tpl_file.html";			$inherited = false;			if (isset($template_row['template_inherits_id']) && $template_row['template_inherits_id'])			{				if (!$template_row['template_storedb'])				{					if (!file_exists($file_tpl))					{						$file_tpl = "{$phpbb_root_path}styles/{$template_row['template_inherit_path']}/template/$tpl_file.html";						$inherited = true;					}				}				else				{					if ($file_template_db[$file . '.html'] == $template_row['template_inherits_id'])					{						$file_tpl = "{$phpbb_root_path}styles/{$template_row['template_inherit_path']}/template/$tpl_file.html";						$inherited = true;					}				}			}			// Correct the filename if it is stored in database and the file is in a subfolder.			if ($template_row['template_storedb'])			{				$file = str_replace('.', '/', $file);			}			$template->assign_block_vars('file', array(				'U_VIEWSOURCE'	=> $this->u_action . "&amp;action=cache&amp;id=$template_id&amp;source=$file",				'CACHED'		=> $user->format_date(filemtime("{$phpbb_root_path}cache/$filename")),				'FILENAME'		=> $file,				'FILENAME_PATH'	=> $file_tpl,				'FILESIZE'		=> get_formatted_filesize(filesize("{$phpbb_root_path}cache/$filename")),				'MODIFIED'		=> $user->format_date((!$template_row['template_storedb']) ? filemtime($file_tpl) : $filemtime[$file . '.html']))			);		}		unset($filemtime);		$template->assign_vars(array(			'S_CACHE'			=> true,			'S_TEMPLATE'		=> true,			'U_ACTION'			=> $this->u_action . "&amp;action=cache&amp;id=$template_id",			'U_BACK'			=> $this->u_action)		);	}	/**	* Provides a css editor and a basic easier to use stylesheet editing tool for less experienced (or lazy) users	*	* @param int $theme_id specifies which theme is being edited	*/	function edit_theme($theme_id)	{		global $phpbb_root_path, $phpEx, $config, $db, $cache, $user, $template, $safe_mode;		$this->page_title = 'EDIT_THEME';		$filelist = $filelist_cats = array();		$theme_data		= utf8_normalize_nfc(request_var('template_data', '', true));		$theme_data		= htmlspecialchars_decode($theme_data);		$theme_file		= utf8_normalize_nfc(request_var('template_file', '', true));		$text_rows		= max(5, min(999, request_var('text_rows', 20)));		$save_changes	= (isset($_POST['save'])) ? true : false;		// make sure theme_file path doesn't go upwards		$theme_file = str_replace('..', '.', $theme_file);		// Retrieve some information about the theme		$sql = 'SELECT theme_storedb, theme_path, theme_name, theme_data			FROM ' . STYLES_THEME_TABLE . "			WHERE theme_id = $theme_id";		$result = $db->sql_query($sql);		if (!($theme_info = $db->sql_fetchrow($result)))		{			trigger_error($user->lang['NO_THEME'] . adm_back_link($this->u_action), E_USER_WARNING);		}		$db->sql_freeresult($result);		// save changes to the theme if the user submitted any		if ($save_changes)		{			// Get the filesystem location of the current file			$file = "{$phpbb_root_path}styles/{$theme_info['theme_path']}/theme/$theme_file";			$additional = '';			$message = $user->lang['THEME_UPDATED'];			// If the theme is stored on the filesystem try to write the file else store it in the database			if (!$safe_mode && !$theme_info['theme_storedb'] && file_exists($file) && phpbb_is_writable($file))			{				if (!($fp = @fopen($file, 'wb')))				{					trigger_error($user->lang['NO_THEME'] . adm_back_link($this->u_action), E_USER_WARNING);				}				fwrite($fp, $theme_data);				fclose($fp);			}			else			{				// Write stylesheet to db				$sql_ary = array(					'theme_mtime'		=> time(),					'theme_storedb'		=> 1,					'theme_data'		=> $this->db_theme_data($theme_info, $theme_data),				);				$sql = 'UPDATE ' . STYLES_THEME_TABLE . '					SET ' . $db->sql_build_array('UPDATE', $sql_ary) . '					WHERE theme_id = ' . $theme_id;				$db->sql_query($sql);				$cache->destroy('sql', STYLES_THEME_TABLE);				// notify the user if the theme was not stored in the db before his modification				if (!$theme_info['theme_storedb'])				{					add_log('admin', 'LOG_THEME_EDIT_DETAILS', $theme_info['theme_name']);					$message .= '<br />' . $user->lang['EDIT_THEME_STORED_DB'];				}			}			$cache->destroy('sql', STYLES_THEME_TABLE);			add_log('admin', (!$theme_info['theme_storedb']) ? 'LOG_THEME_EDIT_FILE' : 'LOG_THEME_EDIT', $theme_info['theme_name'], (!$theme_info['theme_storedb']) ? $theme_file : '');			trigger_error($message . adm_back_link($this->u_action . "&amp;action=edit&amp;id=$theme_id&amp;template_file=$theme_file&amp;text_rows=$text_rows"));		}		// Generate a category array containing theme filenames		if (!$theme_info['theme_storedb'])		{			$theme_path = "{$phpbb_root_path}styles/{$theme_info['theme_path']}/theme";			$filelist = filelist($theme_path, '', 'css');			if ($theme_file)			{				if (!file_exists($theme_path . "/$theme_file") || !($theme_data = file_get_contents($theme_path . "/$theme_file")))				{					trigger_error($user->lang['NO_THEME'] . adm_back_link($this->u_action), E_USER_WARNING);				}			}		}		else		{			$theme_data = &$theme_info['theme_data'];		}		// Now create the categories		$filelist_cats[''] = array();		foreach ($filelist as $pathfile => $file_ary)		{			// Use the directory name as category name			if (!empty($pathfile))			{				$filelist_cats[$pathfile] = array();				foreach ($file_ary as $file)				{					$filelist_cats[$pathfile][$pathfile . $file] = $file;				}			}			// or if it's in the main category use the word before the first underscore to group files			else			{				$cats = array();				foreach ($file_ary as $file)				{					$cats[] = substr($file, 0, strpos($file, '_'));					$filelist_cats[substr($file, 0, strpos($file, '_'))][$file] = $file;				}				$cats = array_values(array_unique($cats));				// we don't need any single element categories so put them into the misc '' category				for ($i = 0, $n = sizeof($cats); $i < $n; $i++)				{					if (sizeof($filelist_cats[$cats[$i]]) == 1 && $cats[$i] !== '')					{						$filelist_cats[''][key($filelist_cats[$cats[$i]])] = current($filelist_cats[$cats[$i]]);						unset($filelist_cats[$cats[$i]]);					}				}				unset($cats);			}		}		unset($filelist);		// Generate list of categorised theme files		$tpl_options = '';		ksort($filelist_cats);		foreach ($filelist_cats as $category => $tpl_ary)		{			ksort($tpl_ary);			if (!empty($category))			{				$tpl_options .= '<option class="sep" value="">' . $category . '</option>';			}			foreach ($tpl_ary as $filename => $file)			{				$selected = ($theme_file == $filename) ? ' selected="selected"' : '';				$tpl_options .= '<option value="' . $filename . '"' . $selected . '>' . $file . '</option>';			}		}		$template->assign_vars(array(			'S_EDIT_THEME'		=> true,			'S_HIDDEN_FIELDS'	=> build_hidden_fields(array('template_file' => $theme_file)),			'S_THEME_IN_DB'		=> $theme_info['theme_storedb'],			'S_TEMPLATES'		=> $tpl_options,			'U_ACTION'			=> $this->u_action . "&amp;action=edit&amp;id=$theme_id&amp;text_rows=$text_rows",			'U_BACK'			=> $this->u_action,			'L_EDIT'			=> $user->lang['EDIT_THEME'],			'L_EDIT_EXPLAIN'	=> $user->lang['EDIT_THEME_EXPLAIN'],			'L_EDITOR'			=> $user->lang['THEME_EDITOR'],			'L_EDITOR_HEIGHT'	=> $user->lang['THEME_EDITOR_HEIGHT'],			'L_FILE'			=> $user->lang['THEME_FILE'],			'L_SELECT'			=> $user->lang['SELECT_THEME'],			'L_SELECTED'		=> $user->lang['SELECTED_THEME'],			'L_SELECTED_FILE'	=> $user->lang['SELECTED_THEME_FILE'],			'SELECTED_TEMPLATE'	=> $theme_info['theme_name'],			'TEMPLATE_FILE'		=> $theme_file,			'TEMPLATE_DATA'		=> utf8_htmlspecialchars($theme_data),			'TEXT_ROWS'			=> $text_rows)		);	}	/**	* Edit imagesets	*	* @param int $imageset_id specifies which imageset is being edited	*/	function edit_imageset($imageset_id)	{		global $db, $user, $phpbb_root_path, $cache, $template;		$this->page_title = 'EDIT_IMAGESET';		if (!$imageset_id)		{			trigger_error($user->lang['NO_IMAGESET'] . adm_back_link($this->u_action), E_USER_WARNING);		}		$update		= (isset($_POST['update'])) ? true : false;		$imgname	= request_var('imgname', 'site_logo');		$imgname	= preg_replace('#[^a-z0-9\-+_]#i', '', $imgname);		$sql_extra = $imgnamelang = '';		$sql = 'SELECT imageset_path, imageset_name			FROM ' . STYLES_IMAGESET_TABLE . "			WHERE imageset_id = $imageset_id";		$result = $db->sql_query($sql);		$imageset_row = $db->sql_fetchrow($result);		$db->sql_freeresult($result);		if (!$imageset_row)		{			trigger_error($user->lang['NO_IMAGESET'] . adm_back_link($this->u_action), E_USER_WARNING);		}		$imageset_path		= $imageset_row['imageset_path'];		$imageset_name		= $imageset_row['imageset_name'];		if (strpos($imgname, '-') !== false)		{			list($imgname, $imgnamelang) = explode('-', $imgname);			$sql_extra = " AND image_lang IN ('" . $db->sql_escape($imgnamelang) . "', '')";		}		$sql = 'SELECT image_filename, image_width, image_height, image_lang, image_id			FROM ' . STYLES_IMAGESET_DATA_TABLE . "			WHERE imageset_id = $imageset_id				AND image_name = '" . $db->sql_escape($imgname) . "'$sql_extra";		$result = $db->sql_query($sql);		$imageset_data_row = $db->sql_fetchrow($result);		$db->sql_freeresult($result);		$image_filename	= $imageset_data_row['image_filename'];		$image_width	= $imageset_data_row['image_width'];		$image_height	= $imageset_data_row['image_height'];		$image_lang		= $imageset_data_row['image_lang'];		$image_id		= $imageset_data_row['image_id'];		$imgsize		= ($imageset_data_row['image_width'] && $imageset_data_row['image_height']) ? 1 : 0;		// Check to see whether the selected image exists in the table		$valid_name = ($update) ? false : true;		foreach ($this->imageset_keys as $category => $img_ary)		{			if (in_array($imgname, $img_ary))			{				$valid_name = true;				break;			}		}		if ($update && isset($_POST['imgpath']) && $valid_name)		{			// If imgwidth and imgheight are non-zero grab the actual size			// from the image itself ... we ignore width settings for the poll center image			$imgwidth	= request_var('imgwidth', 0);			$imgheight	= request_var('imgheight', 0);			$imgsize	= request_var('imgsize', 0);			$imgpath	= request_var('imgpath', '');			$imgpath	= str_replace('..', '.', $imgpath);			// If no dimensions selected, we reset width and height to 0 ;)			if (!$imgsize)			{				$imgwidth = $imgheight = 0;			}			$imglang = '';			if ($imgpath && !file_exists("{$phpbb_root_path}styles/$imageset_path/imageset/$imgpath"))			{				trigger_error($user->lang['NO_IMAGE_ERROR'] . adm_back_link($this->u_action), E_USER_WARNING);			}			// Determine width/height. If dimensions included and no width/height given, we detect them automatically...			if ($imgsize && $imgpath)			{				if (!$imgwidth || !$imgheight)				{					list($imgwidth_file, $imgheight_file) = getimagesize("{$phpbb_root_path}styles/$imageset_path/imageset/$imgpath");					$imgwidth = ($imgwidth) ? $imgwidth : $imgwidth_file;					$imgheight = ($imgheight) ? $imgheight : $imgheight_file;				}				$imgwidth	= ($imgname != 'poll_center') ? (int) $imgwidth : 0;				$imgheight	= (int) $imgheight;			}			if (strpos($imgpath, '/') !== false)			{				list($imglang, $imgfilename) = explode('/', $imgpath);			}			else			{				$imgfilename = $imgpath;			}			$sql_ary = array(				'image_filename'	=> (string) $imgfilename,				'image_width'		=> (int) $imgwidth,				'image_height'		=> (int) $imgheight,				'image_lang'		=> (string) $imglang,			);			// already exists			if ($imageset_data_row)			{				$sql = 'UPDATE ' . STYLES_IMAGESET_DATA_TABLE . '					SET ' . $db->sql_build_array('UPDATE', $sql_ary) . "					WHERE image_id = $image_id";				$db->sql_query($sql);			}			// does not exist			else if (!$imageset_data_row)			{				$sql_ary['image_name']	= $imgname;				$sql_ary['imageset_id']	= (int) $imageset_id;				$db->sql_query('INSERT INTO ' . STYLES_IMAGESET_DATA_TABLE . ' ' . $db->sql_build_array('INSERT', $sql_ary));			}			$cache->destroy('sql', STYLES_IMAGESET_DATA_TABLE);			add_log('admin', 'LOG_IMAGESET_EDIT', $imageset_name);			$template->assign_var('SUCCESS', true);			$image_filename = $imgfilename;			$image_width	= $imgwidth;			$image_height	= $imgheight;			$image_lang		= $imglang;		}		$imglang = '';		$imagesetlist = array('nolang' => array(), 'lang' => array());		$langs = array();		$dir = "{$phpbb_root_path}styles/$imageset_path/imageset";		$dp = @opendir($dir);		if ($dp)		{			while (($file = readdir($dp)) !== false)			{				if ($file[0] != '.' && strtoupper($file) != 'CVS' && !is_file($dir . '/' . $file) && !is_link($dir . '/' . $file))				{					$langs[] = $file;				}				else if (preg_match('#\.(?:gif|jpg|png)$#', $file))				{					$imagesetlist['nolang'][] = $file;				}			}			if ($sql_extra)			{				$dp2 = @opendir("$dir/$imgnamelang");				if ($dp2)				{					while (($file2 = readdir($dp2)) !== false)					{						if (preg_match('#\.(?:gif|jpg|png)$#', $file2))						{							$imagesetlist['lang'][] = "$imgnamelang/$file2";						}					}					closedir($dp2);				}			}			closedir($dp);		}		// Generate list of image options		$img_options = '';		foreach ($this->imageset_keys as $category => $img_ary)		{			$template->assign_block_vars('category', array(				'NAME'			=> $user->lang['IMG_CAT_' . strtoupper($category)]			));			foreach ($img_ary as $img)			{				if ($category == 'buttons')				{					foreach ($langs as $language)					{						$template->assign_block_vars('category.images', array(							'SELECTED'			=> ($img == $imgname && $language == $imgnamelang),							'VALUE'				=> $img . '-' . $language,							'TEXT'				=> $user->lang['IMG_' . strtoupper($img)] . ' [ ' . $language . ' ]'						));					}				}				else				{					$template->assign_block_vars('category.images', array(						'SELECTED'			=> ($img == $imgname),						'VALUE'				=> $img,						'TEXT'				=> (($category == 'custom') ? $img : $user->lang['IMG_' . strtoupper($img)])					));				}			}		}		// Make sure the list of possible images is sorted alphabetically		sort($imagesetlist['lang']);		sort($imagesetlist['nolang']);		$image_found = false;		$img_val = '';		foreach ($imagesetlist as $type => $img_ary)		{			if ($type !== 'lang' || $sql_extra)			{				$template->assign_block_vars('imagesetlist', array(					'TYPE'	=> ($type == 'lang')				));			}			foreach ($img_ary as $img)			{				$imgtext = preg_replace('/^([^\/]+\/)/', '', $img);				$selected = (!empty($imgname) && strpos($image_filename, $imgtext) !== false);				if ($selected)				{					$image_found = true;					$img_val = htmlspecialchars($img);				}				$template->assign_block_vars('imagesetlist.images', array(					'SELECTED'			=> $selected,					'TEXT'				=> $imgtext,					'VALUE'				=> htmlspecialchars($img)				));			}		}		$imgsize_bool = (!empty($imgname) && $image_width && $image_height) ? true : false;		$image_request = '../styles/' . $imageset_path . '/imageset/' . ($image_lang ? $imgnamelang . '/' : '') . $image_filename;		$template->assign_vars(array(			'S_EDIT_IMAGESET'	=> true,			'L_TITLE'			=> $user->lang[$this->page_title],			'L_EXPLAIN'			=> $user->lang[$this->page_title . '_EXPLAIN'],			'IMAGE_OPTIONS'		=> $img_options,			'IMAGE_SIZE'		=> $image_width,			'IMAGE_HEIGHT'		=> $image_height,			'IMAGE_REQUEST'		=> (empty($image_filename)) ? 'images/no_image.png' : $image_request,			'U_ACTION'			=> $this->u_action . "&amp;action=edit&amp;id=$imageset_id",			'U_BACK'			=> $this->u_action,			'NAME'				=> $imageset_name,			'A_NAME'			=> addslashes($imageset_name),			'PATH'				=> $imageset_path,			'A_PATH'			=> addslashes($imageset_path),			'ERROR'				=> !$valid_name,			'IMG_SRC'			=> ($image_found) ? '../styles/' . $imageset_path . '/imageset/' . $img_val : 'images/no_image.png',			'IMAGE_SELECT'		=> $image_found		));	}	/**	* Remove style/template/theme/imageset	*/	function remove($mode, $style_id)	{		global $db, $template, $user, $phpbb_root_path, $cache, $config;		$new_id = request_var('new_id', 0);		$update = (isset($_POST['update'])) ? true : false;		$sql_where = '';		switch ($mode)		{			case 'style':				$sql_from = STYLES_TABLE;				$sql_select = 'style_id, style_name, template_id, theme_id, imageset_id';				$sql_where = 'AND style_active = 1';			break;			case 'template':				$sql_from = STYLES_TEMPLATE_TABLE;				$sql_select = 'template_id, template_name, template_path, template_storedb';			break;			case 'theme':				$sql_from = STYLES_THEME_TABLE;				$sql_select = 'theme_id, theme_name, theme_path, theme_storedb';			break;			case 'imageset':				$sql_from = STYLES_IMAGESET_TABLE;				$sql_select = 'imageset_id, imageset_name, imageset_path';			break;		}		if ($mode === 'template' && ($conflicts = $this->check_inheritance($mode, $style_id)))		{			$l_type = strtoupper($mode);			$msg = $user->lang[$l_type . '_DELETE_DEPENDENT'];			foreach ($conflicts as $id => $values)			{				$msg .= '<br />' . $values['template_name'];			}			trigger_error($msg . adm_back_link($this->u_action), E_USER_WARNING);		}		$l_prefix = strtoupper($mode);		$sql = "SELECT $sql_select			FROM $sql_from			WHERE {$mode}_id = $style_id";		$result = $db->sql_query($sql);		$style_row = $db->sql_fetchrow($result);		$db->sql_freeresult($result);		if (!$style_row)		{			trigger_error($user->lang['NO_' . $l_prefix] . adm_back_link($this->u_action), E_USER_WARNING);		}		$s_only_component = $this->display_component_options($mode, $style_row[$mode . '_id'], $style_row);		if ($s_only_component)		{			trigger_error($user->lang['ONLY_' . $l_prefix] . adm_back_link($this->u_action), E_USER_WARNING);		}		if ($update)		{			if ($mode == 'style')			{				$sql = "DELETE FROM $sql_from					WHERE {$mode}_id = $style_id";				$db->sql_query($sql);				$sql = 'UPDATE ' . USERS_TABLE . "					SET user_style = $new_id					WHERE user_style = $style_id";				$db->sql_query($sql);				$sql = 'UPDATE ' . FORUMS_TABLE . "					SET forum_style = $new_id					WHERE forum_style = $style_id";				$db->sql_query($sql);				if ($style_id == $config['default_style'])				{					set_config('default_style', $new_id);				}				// Remove the components				$components = array('template', 'theme', 'imageset');				foreach ($components as $component)				{					$new_id = request_var('new_' . $component . '_id', 0);					$component_id = $style_row[$component . '_id'];					$this->remove_component($component, $component_id, $new_id, $style_id);				}			}			else			{				$this->remove_component($mode, $style_id, $new_id);			}			$cache->destroy('sql', STYLES_TABLE);			add_log('admin', 'LOG_' . $l_prefix . '_DELETE', $style_row[$mode . '_name']);			$message = ($mode != 'style') ? $l_prefix . '_DELETED_FS' : $l_prefix . '_DELETED';			trigger_error($user->lang[$message] . adm_back_link($this->u_action));		}		$this->page_title = 'DELETE_' . $l_prefix;		$template->assign_vars(array(			'S_DELETE'			=> true,			'L_TITLE'			=> $user->lang[$this->page_title],			'L_EXPLAIN'			=> $user->lang[$this->page_title . '_EXPLAIN'],			'L_NAME'			=> $user->lang[$l_prefix . '_NAME'],			'L_REPLACE'			=> $user->lang['REPLACE_' . $l_prefix],			'L_REPLACE_EXPLAIN'	=> $user->lang['REPLACE_' . $l_prefix . '_EXPLAIN'],			'U_ACTION'		=> $this->u_action . "&amp;action=delete&amp;id=$style_id",			'U_BACK'		=> $this->u_action,			'NAME'			=> $style_row[$mode . '_name'],			)		);		if ($mode == 'style')		{			$template->assign_vars(array(				'S_DELETE_STYLE'		=> true,			));		}	}	/**	* Remove template/theme/imageset entry from the database	*/	function remove_component($component, $component_id, $new_id, $style_id = false)	{		global $db;		if (($new_id == 0) || ($component === 'template' && ($conflicts = $this->check_inheritance($component, $component_id))))		{			// We can not delete the template, as the user wants to keep the component or an other template is inheriting from this one.			return;		}		$component_in_use = array();		if ($component != 'style')		{			$component_in_use = $this->component_in_use($component, $component_id, $style_id);		}		if (($new_id == -1) && !empty($component_in_use))		{			// We can not delete the component, as it is still in use			return;		}		if ($component == 'imageset')		{			$sql = 'DELETE FROM ' . STYLES_IMAGESET_DATA_TABLE . "				WHERE imageset_id = $component_id";			$db->sql_query($sql);		}		switch ($component)		{			case 'template':				$sql_from = STYLES_TEMPLATE_TABLE;			break;			case 'theme':				$sql_from = STYLES_THEME_TABLE;			break;			case 'imageset':				$sql_from = STYLES_IMAGESET_TABLE;;			break;		}		$sql = "DELETE FROM $sql_from			WHERE {$component}_id = $component_id";		$db->sql_query($sql);		$sql = 'UPDATE ' . STYLES_TABLE . "			SET {$component}_id = $new_id			WHERE {$component}_id = $component_id";		$db->sql_query($sql);	}	/**	* Display the options which can be used to replace a style/template/theme/imageset	*	* @return boolean Returns true if the component is the only component and can not be deleted.	*/	function display_component_options($component, $component_id, $style_row = false, $style_id = false)	{		global $db, $template, $user;		$is_only_component = true;		$component_in_use = array();		if ($component != 'style')		{			$component_in_use = $this->component_in_use($component, $component_id, $style_id);		}		$sql_where = '';		switch ($component)		{			case 'style':				$sql_from = STYLES_TABLE;				$sql_where = 'WHERE style_active = 1';			break;			case 'template':				$sql_from = STYLES_TEMPLATE_TABLE;				$sql_where = 'WHERE template_inherits_id <> ' . $component_id;			break;			case 'theme':				$sql_from = STYLES_THEME_TABLE;			break;			case 'imageset':				$sql_from = STYLES_IMAGESET_TABLE;			break;		}		$s_options = '';		if (($component != 'style') && empty($component_in_use))		{			// If it is not in use, there must be another component			$is_only_component = false;			$sql = "SELECT {$component}_id, {$component}_name				FROM $sql_from				WHERE {$component}_id = {$component_id}";			$result = $db->sql_query($sql);			$row = $db->sql_fetchrow($result);			$db->sql_freeresult($result);			$s_options .= '<option value="-1" selected="selected">' . $user->lang['DELETE_' . strtoupper($component)] . '</option>';			$s_options .= '<option value="0">' . sprintf($user->lang['KEEP_' . strtoupper($component)], $row[$component . '_name']) . '</option>';		}		else		{			$sql = "SELECT {$component}_id, {$component}_name				FROM $sql_from				$sql_where				ORDER BY {$component}_name ASC";			$result = $db->sql_query($sql);			$s_keep_option = $s_options = '';			while ($row = $db->sql_fetchrow($result))			{				if ($row[$component . '_id'] != $component_id)				{					$is_only_component = false;					$s_options .= '<option value="' . $row[$component . '_id'] . '">' . sprintf($user->lang['REPLACE_WITH_OPTION'], $row[$component . '_name']) . '</option>';				}				else if ($component != 'style')				{					$s_keep_option = '<option value="0" selected="selected">' . sprintf($user->lang['KEEP_' . strtoupper($component)], $row[$component . '_name']) . '</option>';				}			}			$db->sql_freeresult($result);			$s_options = $s_keep_option . $s_options;		}		if (!$style_row)		{			$template->assign_var('S_REPLACE_' . strtoupper($component) . '_OPTIONS', $s_options);		}		else		{			$template->assign_var('S_REPLACE_OPTIONS', $s_options);			if ($component == 'style')			{				$components = array('template', 'theme', 'imageset');				foreach ($components as $component)				{					$this->display_component_options($component, $style_row[$component . '_id'], false, $component_id, true);				}			}		}		return $is_only_component;	}	/**	* Check whether the component is still used by another style or component	*/	function component_in_use($component, $component_id, $style_id = false)	{		global $db;		$component_in_use = array();		if ($style_id)		{			$sql = 'SELECT style_id, style_name				FROM ' . STYLES_TABLE . "				WHERE {$component}_id = {$component_id}					AND style_id <> {$style_id}				ORDER BY style_name ASC";		}		else		{			$sql = 'SELECT style_id, style_name				FROM ' . STYLES_TABLE . "				WHERE {$component}_id = {$component_id}				ORDER BY style_name ASC";		}		$result = $db->sql_query($sql);		while ($row = $db->sql_fetchrow($result))		{			$component_in_use[] = $row['style_name'];		}		$db->sql_freeresult($result);		if ($component === 'template' && ($conflicts = $this->check_inheritance($component, $component_id)))		{			foreach ($conflicts as $temp_id => $conflict_data)			{				$component_in_use[] = $conflict_data['template_name'];			}		}		return $component_in_use;	}	/**	* Export style or style elements	*/	function export($mode, $style_id)	{		global $db, $template, $user, $phpbb_root_path, $cache, $phpEx, $config;		$update = (isset($_POST['update'])) ? true : false;		$inc_template = request_var('inc_template', 0);		$inc_theme = request_var('inc_theme', 0);		$inc_imageset = request_var('inc_imageset', 0);		$store = request_var('store', 0);		$format = request_var('format', '');		$error = array();		$methods = array('tar');		$available_methods = array('tar.gz' => 'zlib', 'tar.bz2' => 'bz2', 'zip' => 'zlib');		foreach ($available_methods as $type => $module)		{			if (!@extension_loaded($module))			{				continue;			}			$methods[] = $type;		}		if (!in_array($format, $methods))		{			$format = 'tar';		}		switch ($mode)		{			case 'style':				if ($update && ($inc_template + $inc_theme + $inc_imageset) < 1)				{					$error[] = $user->lang['STYLE_ERR_MORE_ELEMENTS'];				}				$name = 'style_name';				$sql_select = 's.style_id, s.style_name, s.style_copyright';				$sql_select .= ($inc_template) ? ', t.*' : ', t.template_name';				$sql_select .= ($inc_theme) ? ', c.*' : ', c.theme_name';				$sql_select .= ($inc_imageset) ? ', i.*' : ', i.imageset_name';				$sql_from = STYLES_TABLE . ' s, ' . STYLES_TEMPLATE_TABLE . ' t, ' . STYLES_THEME_TABLE . ' c, ' . STYLES_IMAGESET_TABLE . ' i';				$sql_where = "s.style_id = $style_id AND t.template_id = s.template_id AND c.theme_id = s.theme_id AND i.imageset_id = s.imageset_id";				$l_prefix = 'STYLE';			break;			case 'template':				$name = 'template_name';				$sql_select = '*';				$sql_from = STYLES_TEMPLATE_TABLE;				$sql_where = "template_id = $style_id";				$l_prefix = 'TEMPLATE';			break;			case 'theme':				$name = 'theme_name';				$sql_select = '*';				$sql_from = STYLES_THEME_TABLE;				$sql_where = "theme_id = $style_id";				$l_prefix = 'THEME';			break;			case 'imageset':				$name = 'imageset_name';				$sql_select = '*';				$sql_from = STYLES_IMAGESET_TABLE;				$sql_where = "imageset_id = $style_id";				$l_prefix = 'IMAGESET';			break;		}		if ($update && !sizeof($error))		{			$sql = "SELECT $sql_select				FROM $sql_from				WHERE $sql_where";			$result = $db->sql_query($sql);			$style_row = $db->sql_fetchrow($result);			$db->sql_freeresult($result);			if (!$style_row)			{				trigger_error($user->lang['NO_' . $l_prefix] . adm_back_link($this->u_action), E_USER_WARNING);			}			$var_ary = array('style_id', 'style_name', 'style_copyright', 'template_id', 'template_name', 'template_path', 'template_copyright', 'template_storedb', 'template_inherits_id', 'bbcode_bitfield', 'theme_id', 'theme_name', 'theme_path', 'theme_copyright', 'theme_storedb', 'theme_mtime', 'theme_data', 'imageset_id', 'imageset_name', 'imageset_path', 'imageset_copyright');			foreach ($var_ary as $var)			{				if (!isset($style_row[$var]))				{					$style_row[$var] = '';				}			}			$files = $data = array();			if ($mode == 'style')			{				$style_cfg = str_replace(array('{MODE}', '{NAME}', '{COPYRIGHT}', '{VERSION}'), array($mode, $style_row['style_name'], $style_row['style_copyright'], $config['version']), $this->style_cfg);				$style_cfg .= (!$inc_template) ? "\nrequired_template = {$style_row['template_name']}" : '';				$style_cfg .= (!$inc_theme) ? "\nrequired_theme = {$style_row['theme_name']}" : '';				$style_cfg .= (!$inc_imageset) ? "\nrequired_imageset = {$style_row['imageset_name']}" : '';				$data[] = array(					'src'		=> $style_cfg,					'prefix'	=> 'style.cfg'				);				unset($style_cfg);			}			// Export template core code			if ($mode == 'template' || $inc_template)			{				$template_cfg = str_replace(array('{MODE}', '{NAME}', '{COPYRIGHT}', '{VERSION}'), array($mode, $style_row['template_name'], $style_row['template_copyright'], $config['version']), $this->template_cfg);				$use_template_name = '';				// Add the inherit from variable, depending on it's use...				if ($style_row['template_inherits_id'])				{					// Get the template name					$sql = 'SELECT template_name						FROM ' . STYLES_TEMPLATE_TABLE . '						WHERE template_id = ' . (int) $style_row['template_inherits_id'];					$result = $db->sql_query($sql);					$use_template_name = (string) $db->sql_fetchfield('template_name');					$db->sql_freeresult($result);				}				$template_cfg .= ($use_template_name) ? "\ninherit_from = $use_template_name" : "\n#inherit_from = ";				$template_cfg .= "\n\nbbcode_bitfield = {$style_row['bbcode_bitfield']}";				$data[] = array(					'src'		=> $template_cfg,					'prefix'	=> 'template/template.cfg'				);				// This is potentially nasty memory-wise ...				if (!$style_row['template_storedb'])				{					$files[] = array(						'src'		=> "styles/{$style_row['template_path']}/template/",						'prefix-'	=> "styles/{$style_row['template_path']}/",						'prefix+'	=> false,						'exclude'	=> 'template.cfg'					);				}				else				{					$sql = 'SELECT template_filename, template_data						FROM ' . STYLES_TEMPLATE_DATA_TABLE . "						WHERE template_id = {$style_row['template_id']}";					$result = $db->sql_query($sql);					while ($row = $db->sql_fetchrow($result))					{						$data[] = array(							'src' => $row['template_data'],							'prefix' => 'template/' . $row['template_filename']						);					}					$db->sql_freeresult($result);				}				unset($template_cfg);			}			// Export theme core code			if ($mode == 'theme' || $inc_theme)			{				$theme_cfg = str_replace(array('{MODE}', '{NAME}', '{COPYRIGHT}', '{VERSION}'), array($mode, $style_row['theme_name'], $style_row['theme_copyright'], $config['version']), $this->theme_cfg);				// Read old cfg file				$items = $cache->obtain_cfg_items($style_row);				$items = $items['theme'];				if (!isset($items['parse_css_file']))				{					$items['parse_css_file'] = 'off';				}				$theme_cfg = str_replace(array('{PARSE_CSS_FILE}'), array($items['parse_css_file']), $theme_cfg);				$files[] = array(					'src'		=> "styles/{$style_row['theme_path']}/theme/",					'prefix-'	=> "styles/{$style_row['theme_path']}/",					'prefix+'	=> false,					'exclude'	=> ($style_row['theme_storedb']) ? 'stylesheet.css,theme.cfg' : 'theme.cfg'				);				$data[] = array(					'src'		=> $theme_cfg,					'prefix'	=> 'theme/theme.cfg'				);				if ($style_row['theme_storedb'])				{					$data[] = array(						'src'		=> $style_row['theme_data'],						'prefix'	=> 'theme/stylesheet.css'					);				}				unset($items, $theme_cfg);			}			// Export imageset core code			if ($mode == 'imageset' || $inc_imageset)			{				$imageset_cfg = str_replace(array('{MODE}', '{NAME}', '{COPYRIGHT}', '{VERSION}'), array($mode, $style_row['imageset_name'], $style_row['imageset_copyright'], $config['version']), $this->imageset_cfg);				$imageset_main = array();				$sql = 'SELECT image_filename, image_name, image_height, image_width					FROM ' . STYLES_IMAGESET_DATA_TABLE . "					WHERE imageset_id = $style_id						AND image_lang = ''";				$result = $db->sql_query($sql);				while ($row = $db->sql_fetchrow($result))				{					$imageset_main[$row['image_name']] = $row['image_filename'] . ($row['image_height'] ? '*' . $row['image_height']: '') . ($row['image_width'] ? '*' . $row['image_width']: '');				}				$db->sql_freeresult($result);				foreach ($this->imageset_keys as $topic => $key_array)				{					foreach ($key_array as $key)					{						if (isset($imageset_main[$key]))						{							$imageset_cfg .= "\nimg_" . $key . ' = ' . str_replace("styles/{$style_row['imageset_path']}/imageset/", '{PATH}', $imageset_main[$key]);						}					}				}				$files[] = array(					'src'		=> "styles/{$style_row['imageset_path']}/imageset/",					'prefix-'	=> "styles/{$style_row['imageset_path']}/",					'prefix+'	=> false,					'exclude'	=> 'imageset.cfg'				);				$data[] = array(					'src'		=> trim($imageset_cfg),					'prefix'	=> 'imageset/imageset.cfg'				);				end($data);				$imageset_root = "{$phpbb_root_path}styles/{$style_row['imageset_path']}/imageset/";				if ($dh = @opendir($imageset_root))				{					while (($fname = readdir($dh)) !== false)					{						if ($fname[0] != '.' && $fname != 'CVS' && is_dir("$imageset_root$fname"))						{							$files[key($files)]['exclude'] .= ',' . $fname . '/imageset.cfg';						}					}					closedir($dh);				}				$imageset_lang = array();				$sql = 'SELECT image_filename, image_name, image_height, image_width, image_lang					FROM ' . STYLES_IMAGESET_DATA_TABLE . "					WHERE imageset_id = $style_id						AND image_lang <> ''";				$result = $db->sql_query($sql);				while ($row = $db->sql_fetchrow($result))				{					$imageset_lang[$row['image_lang']][$row['image_name']] = $row['image_filename'] . ($row['image_height'] ? '*' . $row['image_height']: '') . ($row['image_width'] ? '*' . $row['image_width']: '');				}				$db->sql_freeresult($result);				foreach ($imageset_lang as $lang => $imageset_localized)				{					$imageset_cfg = str_replace(array('{MODE}', '{NAME}', '{COPYRIGHT}', '{VERSION}'), array($mode, $style_row['imageset_name'], $style_row['imageset_copyright'], $config['version']), $this->imageset_cfg);					foreach ($this->imageset_keys as $topic => $key_array)					{						foreach ($key_array as $key)						{							if (isset($imageset_localized[$key]))							{								$imageset_cfg .= "\nimg_" . $key . ' = ' . str_replace("styles/{$style_row['imageset_path']}/imageset/", '{PATH}', $imageset_localized[$key]);							}						}					}					$data[] = array(						'src'		=> trim($imageset_cfg),						'prefix'	=> 'imageset/' . $lang . '/imageset.cfg'					);				}				unset($imageset_cfg);			}			switch ($format)			{				case 'tar':					$ext = '.tar';				break;				case 'zip':					$ext = '.zip';				break;				case 'tar.gz':					$ext = '.tar.gz';				break;				case 'tar.bz2':					$ext = '.tar.bz2';				break;				default:					$error[] = $user->lang[$l_prefix . '_ERR_ARCHIVE'];			}			if (!sizeof($error))			{				include($phpbb_root_path . 'includes/functions_compress.' . $phpEx);				if ($mode == 'style')				{					$path = preg_replace('#[^\w-]+#', '_', $style_row['style_name']);				}				else				{					$path = $style_row[$mode . '_path'];				}				if ($format == 'zip')				{					$compress = new compress_zip('w', $phpbb_root_path . "store/$path$ext");				}				else				{					$compress = new compress_tar('w', $phpbb_root_path . "store/$path$ext", $ext);				}				if (sizeof($files))				{					foreach ($files as $file_ary)					{						$compress->add_file($file_ary['src'], $file_ary['prefix-'], $file_ary['prefix+'], $file_ary['exclude']);					}				}				if (sizeof($data))				{					foreach ($data as $data_ary)					{						$compress->add_data($data_ary['src'], $data_ary['prefix']);					}				}				$compress->close();				add_log('admin', 'LOG_' . $l_prefix . '_EXPORT', $style_row[$mode . '_name']);				if (!$store)				{					$compress->download($path);					@unlink("{$phpbb_root_path}store/$path$ext");					exit;				}				trigger_error(sprintf($user->lang[$l_prefix . '_EXPORTED'], "store/$path$ext") . adm_back_link($this->u_action));			}		}		$sql = "SELECT {$mode}_id, {$mode}_name			FROM " . (($mode == 'style') ? STYLES_TABLE : $sql_from) . "			WHERE {$mode}_id = $style_id";		$result = $db->sql_query($sql);		$style_row = $db->sql_fetchrow($result);		$db->sql_freeresult($result);		if (!$style_row)		{			trigger_error($user->lang['NO_' . $l_prefix] . adm_back_link($this->u_action), E_USER_WARNING);		}		$this->page_title = $l_prefix . '_EXPORT';		$format_buttons = '';		foreach ($methods as $method)		{			$format_buttons .= '<label><input type="radio"' . ((!$format_buttons) ? ' id="format"' : '') . ' class="radio" value="' . $method . '" name="format"' . (($method == $format) ? ' checked="checked"' : '') . ' /> ' . $method . '</label>';		}		$template->assign_vars(array(			'S_EXPORT'		=> true,			'S_ERROR_MSG'	=> (sizeof($error)) ? true : false,			'S_STYLE'		=> ($mode == 'style') ? true : false,			'L_TITLE'		=> $user->lang[$this->page_title],			'L_EXPLAIN'		=> $user->lang[$this->page_title . '_EXPLAIN'],			'L_NAME'		=> $user->lang[$l_prefix . '_NAME'],			'U_ACTION'		=> $this->u_action . '&amp;action=export&amp;id=' . $style_id,			'U_BACK'		=> $this->u_action,			'ERROR_MSG'			=> (sizeof($error)) ? implode('<br />', $error) : '',			'NAME'				=> $style_row[$mode . '_name'],			'FORMAT_BUTTONS'	=> $format_buttons)		);	}	/**	* Display details	*/	function details($mode, $style_id)	{		global $template, $db, $config, $user, $safe_mode, $cache, $phpbb_root_path;		$update = (isset($_POST['update'])) ? true : false;		$l_type = strtoupper($mode);		$error = array();		$element_ary = array('template' => STYLES_TEMPLATE_TABLE, 'theme' => STYLES_THEME_TABLE, 'imageset' => STYLES_IMAGESET_TABLE);		switch ($mode)		{			case 'style':				$sql_from = STYLES_TABLE;			break;			case 'template':				$sql_from = STYLES_TEMPLATE_TABLE;			break;			case 'theme':				$sql_from = STYLES_THEME_TABLE;			break;			case 'imageset':				$sql_from = STYLES_IMAGESET_TABLE;			break;		}		$sql = "SELECT *			FROM $sql_from			WHERE {$mode}_id = $style_id";		$result = $db->sql_query($sql);		$style_row = $db->sql_fetchrow($result);		$db->sql_freeresult($result);		if (!$style_row)		{			trigger_error($user->lang['NO_' . $l_type] . adm_back_link($this->u_action), E_USER_WARNING);		}		$style_row['style_default'] = ($mode == 'style' && $config['default_style'] == $style_id) ? 1 : 0;		if ($update)		{			$name = utf8_normalize_nfc(request_var('name', '', true));			$copyright = utf8_normalize_nfc(request_var('copyright', '', true));			$template_id = request_var('template_id', 0);			$theme_id = request_var('theme_id', 0);			$imageset_id = request_var('imageset_id', 0);			$style_active = request_var('style_active', 0);			$style_default = request_var('style_default', 0);			$store_db = request_var('store_db', 0);			// If the admin selected the style to be the default style, but forgot to activate it... we will do it for him			if ($style_default)			{				$style_active = 1;			}			$sql = "SELECT {$mode}_id, {$mode}_name				FROM $sql_from				WHERE {$mode}_id <> $style_id				AND LOWER({$mode}_name) = '" . $db->sql_escape(strtolower($name)) . "'";			$result = $db->sql_query($sql);			$conflict = $db->sql_fetchrow($result);			$db->sql_freeresult($result);			if ($mode == 'style' && (!$template_id || !$theme_id || !$imageset_id))			{				$error[] = $user->lang['STYLE_ERR_NO_IDS'];			}			if ($mode == 'style' && $style_row['style_active'] && !$style_active && $config['default_style'] == $style_id)			{				$error[] = $user->lang['DEACTIVATE_DEFAULT'];			}			if (!$name || $conflict)			{				$error[] = $user->lang[$l_type . '_ERR_STYLE_NAME'];			}			if ($mode === 'theme' || $mode === 'template')			{				// a rather elaborate check we have to do here once to avoid trouble later				$check = "{$phpbb_root_path}styles/" . $style_row["{$mode}_path"] . (($mode === 'theme') ? '/theme/stylesheet.css' : '/template');				if (($style_row["{$mode}_storedb"] != $store_db) && !$store_db && ($safe_mode || !phpbb_is_writable($check)))				{					$error[] = $user->lang['EDIT_' . strtoupper($mode) . '_STORED_DB'];					$store_db = 1;				}				// themes which have to be parsed have to go into db				if ($mode == 'theme')				{					$cfg = parse_cfg_file("{$phpbb_root_path}styles/" . $style_row["{$mode}_path"] . "/theme/theme.cfg");					if (isset($cfg['parse_css_file']) && $cfg['parse_css_file'] && !$store_db)					{						$error[] = $user->lang['EDIT_THEME_STORE_PARSED'];						$store_db = 1;					}				}			}			if (!sizeof($error))			{				// Check length settings				if (utf8_strlen($name) > 30)				{					$error[] = $user->lang[$l_type . '_ERR_NAME_LONG'];				}				if (utf8_strlen($copyright) > 60)				{					$error[] = $user->lang[$l_type . '_ERR_COPY_LONG'];				}			}		}		if ($update && sizeof($error))		{			$style_row = array_merge($style_row, array(				'template_id'			=> $template_id,				'theme_id'				=> $theme_id,				'imageset_id'			=> $imageset_id,				'style_active'			=> $style_active,				$mode . '_storedb'		=> $store_db,				$mode . '_name'			=> $name,				$mode . '_copyright'	=> $copyright)			);		}		// User has submitted form and no errors have occurred		if ($update && !sizeof($error))		{			$sql_ary = array(				$mode . '_name'			=> $name,				$mode . '_copyright'	=> $copyright			);			switch ($mode)			{				case 'style':					$sql_ary += array(						'template_id'		=> (int) $template_id,						'theme_id'			=> (int) $theme_id,						'imageset_id'		=> (int) $imageset_id,						'style_active'		=> (int) $style_active,					);				break;				case 'imageset':				break;				case 'theme':					if ($style_row['theme_storedb'] != $store_db)					{						$theme_data = '';						if (!$style_row['theme_storedb'])						{							$theme_data = $this->db_theme_data($style_row);						}						else if (!$store_db && !$safe_mode && phpbb_is_writable("{$phpbb_root_path}styles/{$style_row['theme_path']}/theme/stylesheet.css"))						{							$store_db = 1;							$theme_data = $style_row['theme_data'];							if ($fp = @fopen("{$phpbb_root_path}styles/{$style_row['theme_path']}/theme/stylesheet.css", 'wb'))							{								$store_db = (@fwrite($fp, str_replace("styles/{$style_row['theme_path']}/theme/", './', $theme_data))) ? 0 : 1;							}							fclose($fp);						}						$sql_ary += array(							'theme_mtime'	=> ($store_db) ? filemtime("{$phpbb_root_path}styles/{$style_row['theme_path']}/theme/stylesheet.css") : 0,							'theme_storedb'	=> $store_db,							'theme_data'	=> ($store_db) ? $theme_data : '',						);					}				break;				case 'template':					if ($style_row['template_storedb'] != $store_db)					{						if ($super = $this->get_super($mode, $style_row['template_id']))						{							$error[] = (sprintf($user->lang["{$l_type}_INHERITS"], $super['template_name']));							$sql_ary = array();						}						else						{							if (!$store_db && !$safe_mode && phpbb_is_writable("{$phpbb_root_path}styles/{$style_row['template_path']}/template"))							{								$err = $this->store_in_fs('template', $style_row['template_id']);								if ($err)								{									$error += $err;								}							}							else if ($store_db)							{								$this->store_in_db('template', $style_row['template_id']);							}							else							{								// We no longer store within the db, but are also not able to update the file structure								// Since the admin want to switch this, we adhere to his decision. But we also need to remove the cache								$sql = 'DELETE FROM ' . STYLES_TEMPLATE_DATA_TABLE . "									WHERE template_id = $style_id";								$db->sql_query($sql);							}							$sql_ary += array(								'template_storedb'	=> $store_db,							);						}					}				break;			}			if (sizeof($sql_ary))			{				$sql = "UPDATE $sql_from					SET " . $db->sql_build_array('UPDATE', $sql_ary) . "					WHERE {$mode}_id = $style_id";				$db->sql_query($sql);				// Making this the default style?				if ($mode == 'style' && $style_default)				{					set_config('default_style', $style_id);				}			}			$cache->destroy('sql', STYLES_TABLE);			add_log('admin', 'LOG_' . $l_type . '_EDIT_DETAILS', $name);			if (sizeof($error))			{				trigger_error(implode('<br />', $error) . adm_back_link($this->u_action), E_USER_WARNING);			}			else			{				trigger_error($user->lang[$l_type . '_DETAILS_UPDATED'] . adm_back_link($this->u_action));			}		}		if ($mode == 'style')		{			foreach ($element_ary as $element => $table)			{				$sql = "SELECT {$element}_id, {$element}_name					FROM $table					ORDER BY {$element}_id ASC";				$result = $db->sql_query($sql);				${$element . '_options'} = '';				while ($row = $db->sql_fetchrow($result))				{					$selected = ($row[$element . '_id'] == $style_row[$element . '_id']) ? ' selected="selected"' : '';					${$element . '_options'} .= '<option value="' . $row[$element . '_id'] . '"' . $selected . '>' . $row[$element . '_name'] . '</option>';				}				$db->sql_freeresult($result);			}		}		if ($mode == 'template')		{			$super = array();			if (isset($style_row[$mode . '_inherits_id']) && $style_row['template_inherits_id'])			{				$super = $this->get_super($mode, $style_row['template_id']);			}		}		$this->page_title = 'EDIT_DETAILS_' . $l_type;		$template->assign_vars(array(			'S_DETAILS'				=> true,			'S_ERROR_MSG'			=> (sizeof($error)) ? true : false,			'S_STYLE'				=> ($mode == 'style') ? true : false,			'S_TEMPLATE'			=> ($mode == 'template') ? true : false,			'S_THEME'				=> ($mode == 'theme') ? true : false,			'S_IMAGESET'			=> ($mode == 'imageset') ? true : false,			'S_STORE_DB'			=> (isset($style_row[$mode . '_storedb'])) ? $style_row[$mode . '_storedb'] : 0,			'S_STORE_DB_DISABLED'	=> (isset($style_row[$mode . '_inherits_id'])) ? $style_row[$mode . '_inherits_id'] : 0,			'S_STYLE_ACTIVE'		=> (isset($style_row['style_active'])) ? $style_row['style_active'] : 0,			'S_STYLE_DEFAULT'		=> (isset($style_row['style_default'])) ? $style_row['style_default'] : 0,			'S_SUPERTEMPLATE'		=> (isset($style_row[$mode . '_inherits_id']) && $style_row[$mode . '_inherits_id']) ? $super['template_name'] : 0,			'S_TEMPLATE_OPTIONS'	=> ($mode == 'style') ? $template_options : '',			'S_THEME_OPTIONS'		=> ($mode == 'style') ? $theme_options : '',			'S_IMAGESET_OPTIONS'	=> ($mode == 'style') ? $imageset_options : '',			'U_ACTION'		=> $this->u_action . '&amp;action=details&amp;id=' . $style_id,			'U_BACK'		=> $this->u_action,			'L_TITLE'				=> $user->lang[$this->page_title],			'L_EXPLAIN'				=> $user->lang[$this->page_title . '_EXPLAIN'],			'L_NAME'				=> $user->lang[$l_type . '_NAME'],			'L_LOCATION'			=> ($mode == 'template' || $mode == 'theme') ? $user->lang[$l_type . '_LOCATION'] : '',			'L_LOCATION_EXPLAIN'	=> ($mode == 'template' || $mode == 'theme') ? $user->lang[$l_type . '_LOCATION_EXPLAIN'] : '',			'ERROR_MSG'		=> (sizeof($error)) ? implode('<br />', $error) : '',			'NAME'			=> $style_row[$mode . '_name'],			'COPYRIGHT'		=> $style_row[$mode . '_copyright'],			)		);	}	/**	* Load css file contents	*/	function load_css_file($path, $filename)	{		global $phpbb_root_path;		$file = "{$phpbb_root_path}styles/$path/theme/$filename";		if (file_exists($file) && ($content = file_get_contents($file)))		{			$content = trim($content);		}		else		{			$content = '';		}		if (defined('DEBUG'))		{			$content = "/* BEGIN @include $filename */ \n $content \n /* END @include $filename */ \n";		}		return $content;	}	/**	* Returns a string containing the value that should be used for the theme_data column in the theme database table.	* Includes contents of files loaded via @import	*	* @param array $theme_row is an associative array containing the theme's current database entry	* @param mixed $stylesheet can either be the new content for the stylesheet or false to load from the standard file	* @param string $root_path should only be used in case you want to use a different root path than "{$phpbb_root_path}styles/{$theme_row['theme_path']}"	*	* @return string Stylesheet data for theme_data column in the theme table	*/	function db_theme_data($theme_row, $stylesheet = false, $root_path = '')	{		global $phpbb_root_path;		if (!$root_path)		{			$root_path = $phpbb_root_path . 'styles/' . $theme_row['theme_path'];		}		if (!$stylesheet)		{			$stylesheet = '';			if (file_exists($root_path . '/theme/stylesheet.css'))			{				$stylesheet = file_get_contents($root_path . '/theme/stylesheet.css');			}		}		// Match CSS imports		$matches = array();		preg_match_all('/@import url\((["\'])(.*)\1\);/i', $stylesheet, $matches);		// remove commented stylesheets (very simple parser, allows only whitespace		// around an @import statement)		preg_match_all('#/\*\s*@import url\((["\'])(.*)\1\);\s\*/#i', $stylesheet, $commented);		$matches[2] = array_diff($matches[2], $commented[2]);		if (sizeof($matches))		{			foreach ($matches[0] as $idx => $match)			{				if (isset($matches[2][$idx]))				{					$stylesheet = str_replace($match, acp_styles::load_css_file($theme_row['theme_path'], $matches[2][$idx]), $stylesheet);				}			}		}		// adjust paths		return str_replace('./', 'styles/' . $theme_row['theme_path'] . '/theme/', $stylesheet);	}	/**	* Store template files into db	*/	function store_templates($mode, $style_id, $template_path, $filelist)	{		global $phpbb_root_path, $phpEx, $db;		$template_path = $template_path . '/template/';		$includes = array();		foreach ($filelist as $pathfile => $file_ary)		{			foreach ($file_ary as $file)			{				if (!($fp = @fopen("{$phpbb_root_path}styles/$template_path$pathfile$file", 'r')))				{					trigger_error("Could not open {$phpbb_root_path}styles/$template_path$pathfile$file", E_USER_ERROR);				}				$filesize = filesize("{$phpbb_root_path}styles/$template_path$pathfile$file");				if ($filesize)				{					$template_data = fread($fp, $filesize);				}				fclose($fp);				if (!$filesize)				{					// File is empty					continue;				}				if (preg_match_all('#<!-- INCLUDE (.*?\.html) -->#is', $template_data, $matches))				{					foreach ($matches[1] as $match)					{						$includes[trim($match)][] = $file;					}				}			}		}		foreach ($filelist as $pathfile => $file_ary)		{			foreach ($file_ary as $file)			{				// Skip index.				if (strpos($file, 'index.') === 0)				{					continue;				}				// We could do this using extended inserts ... but that could be one				// heck of a lot of data ...				$sql_ary = array(					'template_id'			=> (int) $style_id,					'template_filename'		=> "$pathfile$file",					'template_included'		=> (isset($includes[$file])) ? implode(':', $includes[$file]) . ':' : '',					'template_mtime'		=> (int) filemtime("{$phpbb_root_path}styles/$template_path$pathfile$file"),					'template_data'			=> (string) file_get_contents("{$phpbb_root_path}styles/$template_path$pathfile$file"),				);				if ($mode == 'insert')				{					$sql = 'INSERT INTO ' . STYLES_TEMPLATE_DATA_TABLE . ' ' . $db->sql_build_array('INSERT', $sql_ary);				}				else				{					$sql = 'UPDATE ' . STYLES_TEMPLATE_DATA_TABLE . ' SET ' . $db->sql_build_array('UPDATE', $sql_ary) . "						WHERE template_id = $style_id							AND template_filename = '" . $db->sql_escape("$pathfile$file") . "'";				}				$db->sql_query($sql);			}		}	}	/**	* Returns an array containing all template filenames for one template that are currently cached.	*	* @param string $template_path contains the name of the template's folder in /styles/	*	* @return array of filenames that exist in /styles/$template_path/template/ (without extension!)	*/	function template_cache_filelist($template_path)	{		global $phpbb_root_path, $phpEx, $user;		$cache_prefix = 'tpl_' . str_replace('_', '-', $template_path);		if (!($dp = @opendir("{$phpbb_root_path}cache")))		{			trigger_error($user->lang['TEMPLATE_ERR_CACHE_READ'] . adm_back_link($this->u_action), E_USER_WARNING);		}		$file_ary = array();		while ($file = readdir($dp))		{			if ($file[0] == '.')			{				continue;			}			if (is_file($phpbb_root_path . 'cache/' . $file) && (strpos($file, $cache_prefix) === 0))			{				$file_ary[] = str_replace('.', '/', preg_replace('#^' . preg_quote($cache_prefix, '#') . '_(.*?)\.html\.' . $phpEx . '$#i', '\1', $file));			}		}		closedir($dp);		return $file_ary;	}	/**	* Destroys cached versions of template files	*	* @param array $template_row contains the template's row in the STYLES_TEMPLATE_TABLE database table	* @param mixed $file_ary is optional and may contain an array of template file names which should be refreshed in the cache.	*	The file names should be the original template file names and not the cache file names.	*/	function clear_template_cache($template_row, $file_ary = false)	{		global $phpbb_root_path, $phpEx, $user;		$cache_prefix = 'tpl_' . str_replace('_', '-', $template_row['template_path']);		if (!$file_ary || !is_array($file_ary))		{			$file_ary = $this->template_cache_filelist($template_row['template_path']);			$log_file_list = $user->lang['ALL_FILES'];		}		else		{			$log_file_list = implode(', ', $file_ary);		}		foreach ($file_ary as $file)		{			$file = str_replace('/', '.', $file);			$file = "{$phpbb_root_path}cache/{$cache_prefix}_$file.html.$phpEx";			if (file_exists($file) && is_file($file))			{				@unlink($file);			}		}		unset($file_ary);		add_log('admin', 'LOG_TEMPLATE_CACHE_CLEARED', $template_row['template_name'], $log_file_list);	}	/**	* Install Style/Template/Theme/Imageset	*/	function install($mode)	{		global $phpbb_root_path, $phpEx, $config, $db, $cache, $user, $template;		$l_type = strtoupper($mode);		$error = $installcfg = $style_row = array();		$root_path = $cfg_file = '';		$element_ary = array('template' => STYLES_TEMPLATE_TABLE, 'theme' => STYLES_THEME_TABLE, 'imageset' => STYLES_IMAGESET_TABLE);		$install_path = request_var('path', '');		$update = (isset($_POST['update'])) ? true : false;		// Installing, obtain cfg file contents		if ($install_path)		{			$root_path = $phpbb_root_path . 'styles/' . $install_path . '/';			$cfg_file = ($mode == 'style') ? "$root_path$mode.cfg" : "$root_path$mode/$mode.cfg";			if (!file_exists($cfg_file))			{				$error[] = $user->lang[$l_type . '_ERR_NOT_' . $l_type];			}			else			{				$installcfg = parse_cfg_file($cfg_file);			}		}		// Installing		if (sizeof($installcfg))		{			$name		= $installcfg['name'];			$copyright	= $installcfg['copyright'];			$version	= $installcfg['version'];			$style_row = array(				$mode . '_id'			=> 0,				$mode . '_name'			=> '',				$mode . '_copyright'	=> ''			);			switch ($mode)			{				case 'style':					$style_row = array(						'style_id'			=> 0,						'style_name'		=> $installcfg['name'],						'style_copyright'	=> $installcfg['copyright']					);					$reqd_template = (isset($installcfg['required_template'])) ? $installcfg['required_template'] : false;					$reqd_theme = (isset($installcfg['required_theme'])) ? $installcfg['required_theme'] : false;					$reqd_imageset = (isset($installcfg['required_imageset'])) ? $installcfg['required_imageset'] : false;					// Check to see if each element is already installed, if it is grab the id					foreach ($element_ary as $element => $table)					{						$style_row = array_merge($style_row, array(							$element . '_id'			=> 0,							$element . '_name'			=> '',							$element . '_copyright'		=> '')						);			 			$this->test_installed($element, $error, (${'reqd_' . $element}) ? $phpbb_root_path . 'styles/' . $reqd_template . '/' : $root_path, ${'reqd_' . $element}, $style_row[$element . '_id'], $style_row[$element . '_name'], $style_row[$element . '_copyright']);						if (!$style_row[$element . '_name'])						{							$style_row[$element . '_name'] = $reqd_template;						}						// Merge other information to installcfg... if present						$cfg_file = $phpbb_root_path . 'styles/' . $install_path . '/' . $element . '/' . $element . '.cfg';						if (file_exists($cfg_file))						{							$cfg_contents = parse_cfg_file($cfg_file);							// Merge only specific things. We may need them later.							foreach (array('inherit_from', 'parse_css_file') as $key)							{								if (!empty($cfg_contents[$key]) && !isset($installcfg[$key]))								{									$installcfg[$key] = $cfg_contents[$key];								}							}						}					}				break;				case 'template':					$this->test_installed('template', $error, $root_path, false, $style_row['template_id'], $style_row['template_name'], $style_row['template_copyright']);				break;				case 'theme':					$this->test_installed('theme', $error, $root_path, false, $style_row['theme_id'], $style_row['theme_name'], $style_row['theme_copyright']);				break;				case 'imageset':					$this->test_installed('imageset', $error, $root_path, false, $style_row['imageset_id'], $style_row['imageset_name'], $style_row['imageset_copyright']);				break;			}		}		else		{			trigger_error($user->lang['NO_' . $l_type] . adm_back_link($this->u_action), E_USER_WARNING);		}		$style_row['store_db'] = request_var('store_db', 0);		$style_row['style_active'] = request_var('style_active', 1);		$style_row['style_default'] = request_var('style_default', 0);		// User has submitted form and no errors have occurred		if ($update && !sizeof($error))		{			if ($mode == 'style')			{				foreach ($element_ary as $element => $table)				{					${$element . '_root_path'} = (${'reqd_' . $element}) ? $phpbb_root_path . 'styles/' . ${'reqd_' . $element} . '/' : false;					${$element . '_path'} = (${'reqd_' . $element}) ? ${'reqd_' . $element} : false;				}				$this->install_style($error, 'install', $root_path, $style_row['style_id'], $style_row['style_name'], $install_path, $style_row['style_copyright'], $style_row['style_active'], $style_row['style_default'], $style_row, $template_root_path, $template_path, $theme_root_path, $theme_path, $imageset_root_path, $imageset_path);			}			else			{				$style_row['store_db'] = $this->install_element($mode, $error, 'install', $root_path, $style_row[$mode . '_id'], $style_row[$mode . '_name'], $install_path, $style_row[$mode . '_copyright'], $style_row['store_db']);			}			if (!sizeof($error))			{				$cache->destroy('sql', STYLES_TABLE);				$message = ($style_row['store_db']) ? '_ADDED_DB' : '_ADDED';				trigger_error($user->lang[$l_type . $message] . adm_back_link($this->u_action));			}		}		$this->page_title = 'INSTALL_' . $l_type;		$template->assign_vars(array(			'S_DETAILS'			=> true,			'S_INSTALL'			=> true,			'S_ERROR_MSG'		=> (sizeof($error)) ? true : false,			'S_LOCATION'		=> (isset($installcfg['inherit_from']) && $installcfg['inherit_from']) ? false : true,			'S_STYLE'			=> ($mode == 'style') ? true : false,			'S_TEMPLATE'		=> ($mode == 'template') ? true : false,			'S_SUPERTEMPLATE'	=> (isset($installcfg['inherit_from'])) ? $installcfg['inherit_from'] : '',			'S_THEME'			=> ($mode == 'theme') ? true : false,			'S_STORE_DB'			=> (isset($style_row[$mode . '_storedb'])) ? $style_row[$mode . '_storedb'] : 0,			'S_STYLE_ACTIVE'		=> (isset($style_row['style_active'])) ? $style_row['style_active'] : 0,			'S_STYLE_DEFAULT'		=> (isset($style_row['style_default'])) ? $style_row['style_default'] : 0,			'U_ACTION'			=> $this->u_action . "&amp;action=install&amp;path=" . urlencode($install_path),			'U_BACK'			=> $this->u_action,			'L_TITLE'				=> $user->lang[$this->page_title],			'L_EXPLAIN'				=> $user->lang[$this->page_title . '_EXPLAIN'],			'L_NAME'				=> $user->lang[$l_type . '_NAME'],			'L_LOCATION'			=> ($mode == 'template' || $mode == 'theme') ? $user->lang[$l_type . '_LOCATION'] : '',			'L_LOCATION_EXPLAIN'	=> ($mode == 'template' || $mode == 'theme') ? $user->lang[$l_type . '_LOCATION_EXPLAIN'] : '',			'ERROR_MSG'			=> (sizeof($error)) ? implode('<br />', $error) : '',			'NAME'				=> $style_row[$mode . '_name'],			'COPYRIGHT'			=> $style_row[$mode . '_copyright'],			'TEMPLATE_NAME'		=> ($mode == 'style') ? $style_row['template_name'] : '',			'THEME_NAME'		=> ($mode == 'style') ? $style_row['theme_name'] : '',			'IMAGESET_NAME'		=> ($mode == 'style') ? $style_row['imageset_name'] : '')		);	}	/**	* Add new style	*/	function add($mode)	{		global $phpbb_root_path, $phpEx, $config, $db, $cache, $user, $template;		$l_type = strtoupper($mode);		$element_ary = array('template' => STYLES_TEMPLATE_TABLE, 'theme' => STYLES_THEME_TABLE, 'imageset' => STYLES_IMAGESET_TABLE);		$error = array();		$style_row = array(			$mode . '_name'			=> utf8_normalize_nfc(request_var('name', '', true)),			$mode . '_copyright'	=> utf8_normalize_nfc(request_var('copyright', '', true)),			'template_id'			=> 0,			'theme_id'				=> 0,			'imageset_id'			=> 0,			'store_db'				=> request_var('store_db', 0),			'style_active'			=> request_var('style_active', 1),			'style_default'			=> request_var('style_default', 0),		);		$basis = request_var('basis', 0);		$update = (isset($_POST['update'])) ? true : false;		if ($basis)		{			switch ($mode)			{				case 'style':					$sql_select = 'template_id, theme_id, imageset_id';					$sql_from = STYLES_TABLE;				break;				case 'template':					$sql_select = 'template_id';					$sql_from = STYLES_TEMPLATE_TABLE;				break;				case 'theme':					$sql_select = 'theme_id';					$sql_from = STYLES_THEME_TABLE;				break;				case 'imageset':					$sql_select = 'imageset_id';					$sql_from = STYLES_IMAGESET_TABLE;				break;			}			$sql = "SELECT $sql_select				FROM $sql_from				WHERE {$mode}_id = $basis";			$result = $db->sql_query($sql);			$row = $db->sql_fetchrow($result);			$db->sql_freeresult($result);			if (!$row)			{				$error[] = $user->lang['NO_' . $l_type];			}			if (!sizeof($error))			{				$style_row['template_id']	= (isset($row['template_id'])) ? $row['template_id'] : $style_row['template_id'];				$style_row['theme_id']		= (isset($row['theme_id'])) ? $row['theme_id'] : $style_row['theme_id'];				$style_row['imageset_id']	= (isset($row['imageset_id'])) ? $row['imageset_id'] : $style_row['imageset_id'];			}		}		if ($update)		{			$style_row['template_id'] = request_var('template_id', $style_row['template_id']);			$style_row['theme_id'] = request_var('theme_id', $style_row['theme_id']);			$style_row['imageset_id'] = request_var('imageset_id', $style_row['imageset_id']);			if ($mode == 'style' && (!$style_row['template_id'] || !$style_row['theme_id'] || !$style_row['imageset_id']))			{				$error[] = $user->lang['STYLE_ERR_NO_IDS'];			}		}		// User has submitted form and no errors have occurred		if ($update && !sizeof($error))		{			if ($mode == 'style')			{				$style_row['style_id'] = 0;				$this->install_style($error, 'add', '', $style_row['style_id'], $style_row['style_name'], '', $style_row['style_copyright'], $style_row['style_active'], $style_row['style_default'], $style_row);			}			if (!sizeof($error))			{				$cache->destroy('sql', STYLES_TABLE);				$message = ($style_row['store_db']) ? '_ADDED_DB' : '_ADDED';				trigger_error($user->lang[$l_type . $message] . adm_back_link($this->u_action));			}		}		if ($mode == 'style')		{			foreach ($element_ary as $element => $table)			{				$sql = "SELECT {$element}_id, {$element}_name					FROM $table					ORDER BY {$element}_id ASC";				$result = $db->sql_query($sql);				${$element . '_options'} = '';				while ($row = $db->sql_fetchrow($result))				{					$selected = ($row[$element . '_id'] == $style_row[$element . '_id']) ? ' selected="selected"' : '';					${$element . '_options'} .= '<option value="' . $row[$element . '_id'] . '"' . $selected . '>' . $row[$element . '_name'] . '</option>';				}				$db->sql_freeresult($result);			}		}		$this->page_title = 'ADD_' . $l_type;		$template->assign_vars(array(			'S_DETAILS'			=> true,			'S_ADD'				=> true,			'S_ERROR_MSG'		=> (sizeof($error)) ? true : false,			'S_STYLE'			=> ($mode == 'style') ? true : false,			'S_TEMPLATE'		=> ($mode == 'template') ? true : false,			'S_THEME'			=> ($mode == 'theme') ? true : false,			'S_BASIS'			=> ($basis) ? true : false,			'S_STORE_DB'			=> (isset($style_row['storedb'])) ? $style_row['storedb'] : 0,			'S_STYLE_ACTIVE'		=> (isset($style_row['style_active'])) ? $style_row['style_active'] : 0,			'S_STYLE_DEFAULT'		=> (isset($style_row['style_default'])) ? $style_row['style_default'] : 0,			'S_TEMPLATE_OPTIONS'	=> ($mode == 'style') ? $template_options : '',			'S_THEME_OPTIONS'		=> ($mode == 'style') ? $theme_options : '',			'S_IMAGESET_OPTIONS'	=> ($mode == 'style') ? $imageset_options : '',			'U_ACTION'			=> $this->u_action . '&amp;action=add&amp;basis=' . $basis,			'U_BACK'			=> $this->u_action,			'L_TITLE'				=> $user->lang[$this->page_title],			'L_EXPLAIN'				=> $user->lang[$this->page_title . '_EXPLAIN'],			'L_NAME'				=> $user->lang[$l_type . '_NAME'],			'L_LOCATION'			=> ($mode == 'template' || $mode == 'theme') ? $user->lang[$l_type . '_LOCATION'] : '',			'L_LOCATION_EXPLAIN'	=> ($mode == 'template' || $mode == 'theme') ? $user->lang[$l_type . '_LOCATION_EXPLAIN'] : '',			'ERROR_MSG'			=> (sizeof($error)) ? implode('<br />', $error) : '',			'NAME'				=> $style_row[$mode . '_name'],			'COPYRIGHT'			=> $style_row[$mode . '_copyright'])		);	}	/**					$reqd_template = (isset($installcfg['required_template'])) ? $installcfg['required_template'] : false;					$reqd_theme = (isset($installcfg['required_theme'])) ? $installcfg['required_theme'] : false;					$reqd_imageset = (isset($installcfg['required_imageset'])) ? $installcfg['required_imageset'] : false;					// Check to see if each element is already installed, if it is grab the id					foreach ($element_ary as $element => $table)					{						$style_row = array_merge($style_row, array(							$element . '_id'			=> 0,							$element . '_name'			=> '',							$element . '_copyright'		=> '')						);			 			$this->test_installed($element, $error, $root_path, ${'reqd_' . $element}, $style_row[$element . '_id'], $style_row[$element . '_name'], $style_row[$element . '_copyright']);	* Is this element installed? If not, grab its cfg details	*/	function test_installed($element, &$error, $root_path, $reqd_name, &$id, &$name, &$copyright)	{		global $db, $user;		switch ($element)		{			case 'template':				$sql_from = STYLES_TEMPLATE_TABLE;			break;			case 'theme':				$sql_from = STYLES_THEME_TABLE;			break;			case 'imageset':				$sql_from = STYLES_IMAGESET_TABLE;			break;		}		$l_element = strtoupper($element);		$chk_name = ($reqd_name !== false) ? $reqd_name : $name;		$sql = "SELECT {$element}_id, {$element}_name			FROM $sql_from			WHERE {$element}_name = '" . $db->sql_escape($chk_name) . "'";		$result = $db->sql_query($sql);		if ($row = $db->sql_fetchrow($result))		{			$name = $row[$element . '_name'];			$id = $row[$element . '_id'];		}		else		{			if (!($cfg = @file("$root_path$element/$element.cfg")))			{				$error[] = sprintf($user->lang['REQUIRES_' . $l_element], $reqd_name);				return false;			}			$cfg = parse_cfg_file("$root_path$element/$element.cfg", $cfg);			$name = $cfg['name'];			$copyright = $cfg['copyright'];			$id = 0;			unset($cfg);		}		$db->sql_freeresult($result);	}	/**	* Install/Add style	*/	function install_style(&$error, $action, $root_path, &$id, $name, $path, $copyright, $active, $default, &$style_row, $template_root_path = false, $template_path = false, $theme_root_path = false, $theme_path = false, $imageset_root_path = false, $imageset_path = false)	{		global $config, $db, $user;		$element_ary = array('template', 'theme', 'imageset');		if (!$name)		{			$error[] = $user->lang['STYLE_ERR_STYLE_NAME'];		}		// Check length settings		if (utf8_strlen($name) > 30)		{			$error[] = $user->lang['STYLE_ERR_NAME_LONG'];		}		if (utf8_strlen($copyright) > 60)		{			$error[] = $user->lang['STYLE_ERR_COPY_LONG'];		}		// Check if the name already exist		$sql = 'SELECT style_id			FROM ' . STYLES_TABLE . "			WHERE style_name = '" . $db->sql_escape($name) . "'";		$result = $db->sql_query($sql);		$row = $db->sql_fetchrow($result);		$db->sql_freeresult($result);		if ($row)		{			$error[] = $user->lang['STYLE_ERR_NAME_EXIST'];		}		if (sizeof($error))		{			return false;		}		foreach ($element_ary as $element)		{			// Zero id value ... need to install element ... run usual checks			// and do the install if necessary			if (!$style_row[$element . '_id'])			{				$this->install_element($element, $error, $action, (${$element . '_root_path'}) ? ${$element . '_root_path'} : $root_path, $style_row[$element . '_id'], $style_row[$element . '_name'], (${$element . '_path'}) ? ${$element . '_path'} : $path, $style_row[$element . '_copyright']);			}		}		if (!$style_row['template_id'] || !$style_row['theme_id'] || !$style_row['imageset_id'])		{			$error[] = $user->lang['STYLE_ERR_NO_IDS'];		}		if (sizeof($error))		{			return false;		}		$db->sql_transaction('begin');		$sql_ary = array(			'style_name'		=> $name,			'style_copyright'	=> $copyright,			'style_active'		=> (int) $active,			'template_id'		=> (int) $style_row['template_id'],			'theme_id'			=> (int) $style_row['theme_id'],			'imageset_id'		=> (int) $style_row['imageset_id'],		);		$sql = 'INSERT INTO ' . STYLES_TABLE . '			' . $db->sql_build_array('INSERT', $sql_ary);		$db->sql_query($sql);		$id = $db->sql_nextid();		if ($default)		{			$sql = 'UPDATE ' . USERS_TABLE . "				SET user_style = $id				WHERE user_style = " . $config['default_style'];			$db->sql_query($sql);			set_config('default_style', $id);		}		$db->sql_transaction('commit');		add_log('admin', 'LOG_STYLE_ADD', $name);	}	/**	* Install/add an element, doing various checks as we go	*/	function install_element($mode, &$error, $action, $root_path, &$id, $name, $path, $copyright, $store_db = 0)	{		global $phpbb_root_path, $db, $user;		// we parse the cfg here (again)		$cfg_data = parse_cfg_file("$root_path$mode/$mode.cfg");		switch ($mode)		{			case 'template':				$sql_from = STYLES_TEMPLATE_TABLE;			break;			case 'theme':				$sql_from = STYLES_THEME_TABLE;			break;			case 'imageset':				$sql_from = STYLES_IMAGESET_TABLE;			break;		}		$l_type = strtoupper($mode);		if (!$name)		{			$error[] = $user->lang[$l_type . '_ERR_STYLE_NAME'];		}		// Check length settings		if (utf8_strlen($name) > 30)		{			$error[] = $user->lang[$l_type . '_ERR_NAME_LONG'];		}		if (utf8_strlen($copyright) > 60)		{			$error[] = $user->lang[$l_type . '_ERR_COPY_LONG'];		}		// Check if the name already exist		$sql = "SELECT {$mode}_id			FROM $sql_from			WHERE {$mode}_name = '" . $db->sql_escape($name) . "'";		$result = $db->sql_query($sql);		$row = $db->sql_fetchrow($result);		$db->sql_freeresult($result);		if ($row)		{			// If it exist, we just use the style on installation			if ($action == 'install')			{				$id = $row[$mode . '_id'];				return false;			}			$error[] = $user->lang[$l_type . '_ERR_NAME_EXIST'];		}		if (isset($cfg_data['inherit_from']) && $cfg_data['inherit_from'])		{			if ($mode === 'template')			{				$select_bf = ', bbcode_bitfield';			}			else			{				$select_bf = '';			}			$sql = "SELECT {$mode}_id, {$mode}_name, {$mode}_path, {$mode}_storedb $select_bf				FROM $sql_from				WHERE {$mode}_name = '" . $db->sql_escape($cfg_data['inherit_from']) . "'					AND {$mode}_inherits_id = 0";			$result = $db->sql_query($sql);			$row = $db->sql_fetchrow($result);			$db->sql_freeresult($result);			if (!$row)			{				$error[] = sprintf($user->lang[$l_type . '_ERR_REQUIRED_OR_INCOMPLETE'], $cfg_data['inherit_from']);			}			else			{				$inherit_id = $row["{$mode}_id"];				$inherit_path = $row["{$mode}_path"];				$inherit_bf = ($mode === 'template') ? $row["bbcode_bitfield"] : false;				$cfg_data['store_db'] = $row["{$mode}_storedb"];				$store_db = $row["{$mode}_storedb"];			}		}		else		{			$inherit_id = 0;			$inherit_path = '';			$inherit_bf = false;		}		if (sizeof($error))		{			return false;		}		$sql_ary = array(			$mode . '_name'			=> $name,			$mode . '_copyright'	=> $copyright,			$mode . '_path'			=> $path,		);		switch ($mode)		{			case 'template':				// We check if the template author defined a different bitfield				if (!empty($cfg_data['template_bitfield']))				{					$sql_ary['bbcode_bitfield'] = $cfg_data['template_bitfield'];				}				else if ($inherit_bf)				{					$sql_ary['bbcode_bitfield'] = $inherit_bf;				}				else				{					$sql_ary['bbcode_bitfield'] = TEMPLATE_BITFIELD;				}				// We set a pre-defined bitfield here which we may use further in 3.2				$sql_ary += array(					'template_storedb'		=> $store_db,				);				if (isset($cfg_data['inherit_from']) && $cfg_data['inherit_from'])				{					$sql_ary += array(						'template_inherits_id'	=> $inherit_id,						'template_inherit_path' => $inherit_path,					);				}			break;			case 'theme':				// We are only interested in the theme configuration for now				if (isset($cfg_data['parse_css_file']) && $cfg_data['parse_css_file'])				{					$store_db = 1;				}				$sql_ary += array(					'theme_storedb'	=> $store_db,					'theme_data'	=> ($store_db) ? $this->db_theme_data($sql_ary, false, $root_path) : '',					'theme_mtime'	=> (int) filemtime("{$phpbb_root_path}styles/$path/theme/stylesheet.css")				);			break;			// all the heavy lifting is done later			case 'imageset':			break;		}		$db->sql_transaction('begin');		$sql = "INSERT INTO $sql_from			" . $db->sql_build_array('INSERT', $sql_ary);		$db->sql_query($sql);		$id = $db->sql_nextid();		if ($mode == 'template' && $store_db)		{			$filelist = filelist("{$root_path}template", '', 'html');			$this->store_templates('insert', $id, $path, $filelist);		}		else if ($mode == 'imageset')		{			$cfg_data = parse_cfg_file("$root_path$mode/imageset.cfg");			$imageset_definitions = array();			foreach ($this->imageset_keys as $topic => $key_array)			{				$imageset_definitions = array_merge($imageset_definitions, $key_array);			}			foreach ($cfg_data as $key => $value)			{				if (strpos($value, '*') !== false)				{					if (substr($value, -1, 1) === '*')					{						list($image_filename, $image_height) = explode('*', $value);						$image_width = 0;					}					else					{						list($image_filename, $image_height, $image_width) = explode('*', $value);					}				}				else				{					$image_filename = $value;					$image_height = $image_width = 0;				}				if (strpos($key, 'img_') === 0 && $image_filename)				{					$key = substr($key, 4);					if (in_array($key, $imageset_definitions))					{						$sql_ary = array(							'image_name'		=> $key,							'image_filename'	=> str_replace('{PATH}', "styles/$path/imageset/", trim($image_filename)),							'image_height'		=> (int) $image_height,							'image_width'		=> (int) $image_width,							'imageset_id'		=> (int) $id,							'image_lang'		=> '',						);						$db->sql_query('INSERT INTO ' . STYLES_IMAGESET_DATA_TABLE . ' ' . $db->sql_build_array('INSERT', $sql_ary));					}				}			}			unset($cfg_data);			$sql = 'SELECT lang_dir				FROM ' . LANG_TABLE;			$result = $db->sql_query($sql);			while ($row = $db->sql_fetchrow($result))			{				if (@file_exists("$root_path$mode/{$row['lang_dir']}/imageset.cfg"))				{					$cfg_data_imageset_data = parse_cfg_file("$root_path$mode/{$row['lang_dir']}/imageset.cfg");					foreach ($cfg_data_imageset_data as $image_name => $value)					{						if (strpos($value, '*') !== false)						{							if (substr($value, -1, 1) === '*')							{								list($image_filename, $image_height) = explode('*', $value);								$image_width = 0;							}							else							{								list($image_filename, $image_height, $image_width) = explode('*', $value);							}						}						else						{							$image_filename = $value;							$image_height = $image_width = 0;						}						if (strpos($image_name, 'img_') === 0 && $image_filename)						{							$image_name = substr($image_name, 4);							if (in_array($image_name, $imageset_definitions))							{								$sql_ary = array(									'image_name'		=> $image_name,									'image_filename'	=> $image_filename,									'image_height'		=> (int) $image_height,									'image_width'		=> (int) $image_width,									'imageset_id'		=> (int) $id,									'image_lang'		=> $row['lang_dir'],								);								$db->sql_query('INSERT INTO ' . STYLES_IMAGESET_DATA_TABLE . ' ' . $db->sql_build_array('INSERT', $sql_ary));							}						}					}					unset($cfg_data_imageset_data);				}			}			$db->sql_freeresult($result);		}		$db->sql_transaction('commit');		$log = ($store_db) ? 'LOG_' . $l_type . '_ADD_DB' : 'LOG_' . $l_type . '_ADD_FS';		add_log('admin', $log, $name);		// Return store_db in case it had to be altered		return $store_db;	}	/**	* Checks downwards dependencies	*	* @access public	* @param string $mode The element type to check - only template is supported	* @param int $id The template id	* @returns false if no component inherits, array with name, path and id for each subtemplate otherwise	*/	function check_inheritance($mode, $id)	{		global $db;		$l_type = strtoupper($mode);		switch ($mode)		{			case 'template':				$sql_from = STYLES_TEMPLATE_TABLE;			break;			case 'theme':				$sql_from = STYLES_THEME_TABLE;			break;			case 'imageset':				$sql_from = STYLES_IMAGESET_TABLE;			break;		}		$sql = "SELECT {$mode}_id, {$mode}_name, {$mode}_path			FROM $sql_from			WHERE {$mode}_inherits_id = " . (int) $id;		$result = $db->sql_query($sql);		$names = array();		while ($row = $db->sql_fetchrow($result))		{			$names[$row["{$mode}_id"]] = array(				"{$mode}_id" => $row["{$mode}_id"],				"{$mode}_name" => $row["{$mode}_name"],				"{$mode}_path" => $row["{$mode}_path"],			);		}		$db->sql_freeresult($result);		if (sizeof($names))		{			return $names;		}		else		{			return false;		}	}	/**	* Checks upwards dependencies	*	* @access public	* @param string $mode The element type to check - only template is supported	* @param int $id The template id	* @returns false if the component does not inherit, array with name, path and id otherwise	*/	function get_super($mode, $id)	{		global $db;		$l_type = strtoupper($mode);		switch ($mode)		{			case 'template':				$sql_from = STYLES_TEMPLATE_TABLE;			break;			case 'theme':				$sql_from = STYLES_THEME_TABLE;			break;			case 'imageset':				$sql_from = STYLES_IMAGESET_TABLE;			break;		}		$sql = "SELECT {$mode}_inherits_id			FROM $sql_from			WHERE {$mode}_id = " . (int) $id;		$result = $db->sql_query_limit($sql, 1);		if ($row = $db->sql_fetchrow($result))		{			$db->sql_freeresult($result);		}		else		{			return false;		}		$super_id = $row["{$mode}_inherits_id"];		$sql = "SELECT {$mode}_id, {$mode}_name, {$mode}_path			FROM $sql_from			WHERE {$mode}_id = " . (int) $super_id;		$result = $db->sql_query_limit($sql, 1);		if ($row = $db->sql_fetchrow($result))		{			$db->sql_freeresult($result);			return $row;		}		return false;	}	/**	* Moves a template set and its subtemplates to the database	*	* @access public	* @param string $mode The component to move - only template is supported	* @param int $id The template id	*/	function store_in_db($mode, $id)	{		global $db, $user;		$error = array();		$l_type = strtoupper($mode);		if ($super = $this->get_super($mode, $id))		{			$error[] = (sprintf($user->lang["{$l_type}_INHERITS"], $super['template_name']));			return $error;		}		$sql = "SELECT {$mode}_id, {$mode}_name, {$mode}_path			FROM " . STYLES_TEMPLATE_TABLE . '			WHERE template_id = ' . (int) $id;		$result = $db->sql_query_limit($sql, 1);		if ($row = $db->sql_fetchrow($result))		{			$db->sql_freeresult($result);			$subs = $this->check_inheritance($mode, $id);			$this->_store_in_db($mode, $id, $row["{$mode}_path"]);			if ($subs && sizeof($subs))			{				foreach ($subs as $sub_id => $sub)				{					if ($err = $this->_store_in_db($mode, $sub["{$mode}_id"], $sub["{$mode}_path"]))					{						$error[] = $err;					}				}			}		}		if (sizeof($error))		{			return $error;		}		return false;	}	/**	* Moves a template set to the database	*	* @access private	* @param string $mode The component to move - only template is supported	* @param int $id The template id	* @param string $path TThe path to the template files	*/	function _store_in_db($mode, $id, $path)	{		global $phpbb_root_path, $db;		$filelist = filelist("{$phpbb_root_path}styles/{$path}/template", '', 'html');		$this->store_templates('insert', $id, $path, $filelist);		// Okay, we do the query here -shouldn't be triggered often.		$sql = 'UPDATE ' . STYLES_TEMPLATE_TABLE . '						SET template_storedb = 1						WHERE template_id = ' . $id;		$db->sql_query($sql);	}	/**	* Moves a template set and its subtemplates to the filesystem	*	* @access public	* @param string $mode The component to move - only template is supported	* @param int $id The template id	*/	function store_in_fs($mode, $id)	{		global $db, $user;		$error = array();		$l_type = strtoupper($mode);		if ($super = $this->get_super($mode, $id))		{			$error[] = (sprintf($user->lang["{$l_type}_INHERITS"], $super['template_name']));			return($error);		}		$sql = "SELECT {$mode}_id, {$mode}_name, {$mode}_path			FROM " . STYLES_TEMPLATE_TABLE . '			WHERE template_id = ' . (int) $id;		$result = $db->sql_query_limit($sql, 1);		if ($row = $db->sql_fetchrow($result))		{			$db->sql_freeresult($result);			if (!sizeof($error))			{				$subs = $this->check_inheritance($mode, $id);				$this->_store_in_fs($mode, $id, $row["{$mode}_path"]);				if ($subs && sizeof($subs))				{					foreach ($subs as $sub_id => $sub)					{						$this->_store_in_fs($mode, $sub["{$mode}_id"], $sub["{$mode}_path"]);					}				}			}			if (sizeof($error))			{				$this->store_in_db($id, $mode);				return $error;			}		}		return false;	}	/**	* Moves a template set to the filesystem	*	* @access private	* @param string $mode The component to move - only template is supported	* @param int $id The template id	* @param string $path The path to the template	*/	function _store_in_fs($mode, $id, $path)	{		global $phpbb_root_path, $db, $user, $safe_mode;		$store_db = 0;		$error = array();		if (!$safe_mode && phpbb_is_writable("{$phpbb_root_path}styles/{$path}/template"))		{			$sql = 'SELECT *					FROM ' . STYLES_TEMPLATE_DATA_TABLE . "					WHERE template_id = $id";			$result = $db->sql_query($sql);			while ($row = $db->sql_fetchrow($result))			{				if (!($fp = @fopen("{$phpbb_root_path}styles/{$path}/template/" . $row['template_filename'], 'wb')))				{					$store_db = 1;					$error[] = $user->lang['EDIT_TEMPLATE_STORED_DB'];					break;				}				fwrite($fp, $row['template_data']);				fclose($fp);			}			$db->sql_freeresult($result);			if (!$store_db)			{				$sql = 'DELETE FROM ' . STYLES_TEMPLATE_DATA_TABLE . "						WHERE template_id = $id";				$db->sql_query($sql);			}		}		if (sizeof($error))		{			return $error;		}		$sql = 'UPDATE ' . STYLES_TEMPLATE_TABLE . '				SET template_storedb = 0				WHERE template_id = ' . $id;		$db->sql_query($sql);		return false;	}}?>
<?php/**** @package phpBB3* @version $Id$* @copyright (c) 2009, 2010 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** This script will check your database for potentially dangerous flash BBCode tags*///// Security message://// This script is potentially dangerous.// Remove or comment the next line (die(".... ) to enable this script.// Do NOT FORGET to either remove this script or disable it after you have used it.//die("Please read the first lines of this script for instructions on how to enable it\n");/***/define('IN_PHPBB', true);$phpbb_root_path = (defined('PHPBB_ROOT_PATH')) ? PHPBB_ROOT_PATH : './';$phpEx = substr(strrchr(__FILE__, '.'), 1);include($phpbb_root_path . 'common.' . $phpEx);if (php_sapi_name() != 'cli'){	header('Content-Type: text/plain');}check_table_flash_bbcodes(POSTS_TABLE, 'post_id', 'post_text', 'bbcode_uid', 'bbcode_bitfield');check_table_flash_bbcodes(PRIVMSGS_TABLE, 'msg_id', 'message_text', 'bbcode_uid', 'bbcode_bitfield');check_table_flash_bbcodes(USERS_TABLE, 'user_id', 'user_sig', 'user_sig_bbcode_uid', 'user_sig_bbcode_bitfield');check_table_flash_bbcodes(FORUMS_TABLE, 'forum_id', 'forum_desc', 'forum_desc_uid', 'forum_desc_bitfield');check_table_flash_bbcodes(FORUMS_TABLE, 'forum_id', 'forum_rules', 'forum_rules_uid', 'forum_rules_bitfield');check_table_flash_bbcodes(GROUPS_TABLE, 'group_id', 'group_desc', 'group_desc_uid', 'group_desc_bitfield');echo "If potentially dangerous flash bbcodes were found, please reparse the posts using the Support Toolkit (http://www.phpbb.com/support/stk/) and/or file a ticket in the Incident Tracker (http://www.phpbb.com/incidents/).\n";function check_table_flash_bbcodes($table_name, $id_field, $content_field, $uid_field, $bitfield_field){	echo "Checking $content_field on $table_name\n";	$ids = get_table_flash_bbcode_pkids($table_name, $id_field, $content_field, $uid_field, $bitfield_field);	$size = sizeof($ids);	if ($size)	{		echo "Found $size potentially dangerous flash bbcodes.\n";		echo "$id_field: " . implode(', ', $ids) . "\n";	}	else	{		echo "No potentially dangerous flash bbcodes found.\n";	}	echo "\n";}function get_table_flash_bbcode_pkids($table_name, $id_field, $content_field, $uid_field, $bitfield_field){	global $db;	$ids = array();	$sql = "SELECT $id_field, $content_field, $uid_field, $bitfield_field		FROM $table_name		WHERE $content_field LIKE '%[/flash:%'			AND $bitfield_field <> ''";	$result = $db->sql_query($sql);	while ($row = $db->sql_fetchrow($result))	{		$uid = $row[$uid_field];		// thanks support toolkit		$content = html_entity_decode_utf8($row[$content_field]);		set_var($content, $content, 'string', true);		$content = utf8_normalize_nfc($content);		$bitfield_data = $row[$bitfield_field];		if (!is_valid_flash_bbcode($content, $uid) && has_flash_enabled($bitfield_data))		{			$ids[] = (int) $row[$id_field];		}	}	$db->sql_freeresult($result);	return $ids;}function get_flash_regex($uid){	return "#\[flash=([0-9]+),([0-9]+):$uid\](.*?)\[/flash:$uid\]#";}// extract all valid flash bbcodes// check if the bbcode content is a valid URL for each matchfunction is_valid_flash_bbcode($cleaned_content, $uid){	$regex = get_flash_regex($uid);	$url_regex = get_preg_expression('url');	$www_url_regex = get_preg_expression('www_url');	if (preg_match_all($regex, $cleaned_content, $matches))	{		foreach ($matches[3] as $flash_url)		{			if (!preg_match("#^($url_regex|$www_url_regex)$#i", $flash_url))			{				return false;			}		}	}	return true;}// check if a bitfield includes flash// 11 = flash bitfunction has_flash_enabled($bitfield_data){	$bitfield = new bitfield($bitfield_data);	return $bitfield->get(11);}// taken from support toolkitfunction html_entity_decode_utf8($string){	static $trans_tbl;	// replace numeric entities	$string = preg_replace('~&#x([0-9a-f]+);~ei', 'code2utf8(hexdec("\\1"))', $string);	$string = preg_replace('~&#([0-9]+);~e', 'code2utf8(\\1)', $string);	// replace literal entities	if (!isset($trans_tbl))	{		$trans_tbl = array();		foreach (get_html_translation_table(HTML_ENTITIES) as $val=>$key)			$trans_tbl[$key] = utf8_encode($val);	}	return strtr($string, $trans_tbl);}// taken from support toolkit// Returns the utf string corresponding to the unicode value (from php.net, courtesy - romans@void.lv)function code2utf8($num){	if ($num < 128) return chr($num);	if ($num < 2048) return chr(($num >> 6) + 192) . chr(($num & 63) + 128);	if ($num < 65536) return chr(($num >> 12) + 224) . chr((($num >> 6) & 63) + 128) . chr(($num & 63) + 128);	if ($num < 2097152) return chr(($num >> 18) + 240) . chr((($num >> 12) & 63) + 128) . chr((($num >> 6) & 63) + 128) . chr(($num & 63) + 128);	return '';}
<?php/**** @package phpBB3* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**/if (php_sapi_name() != 'cli'){	die("This program must be run from the command line.\n");}//// Security message://// This script is potentially dangerous.// Remove or comment the next line (die(".... ) to enable this script.// Do NOT FORGET to either remove this script or disable it after you have used it.//die("Please read the first lines of this script for instructions on how to enable it");set_time_limit(0);define('IN_PHPBB', true);$phpbb_root_path = '../';$phpEx = substr(strrchr(__FILE__, '.'), 1);echo "Checking for required files\n";download('http://unicode.org/Public/UNIDATA/CaseFolding.txt');echo "\n";/*** Load the CaseFolding table*/echo "Loading CaseFolding\n";$unidata = file_get_contents('CaseFolding.txt');function utf8_chr($cp){    if ($cp > 0xFFFF)    {        return chr(0xF0 | ($cp >> 18)) . chr(0x80 | (($cp >> 12) & 0x3F)) . chr(0x80 | (($cp >> 6) & 0x3F)) . chr(0x80 | ($cp & 0x3F));    }    else if ($cp > 0x7FF)    {        return chr(0xE0 | ($cp >> 12)) . chr(0x80 | (($cp >> 6) & 0x3F)) . chr(0x80 | ($cp & 0x3F));    }    else if ($cp > 0x7F)    {        return chr(0xC0 | ($cp >> 6)) . chr(0x80 | ($cp & 0x3F));    }    else    {        return chr($cp);    }}preg_match_all('/^([0-9A-F]+); ([CFS]); ([0-9A-F]+(?: [0-9A-F]+)*);/im', $unidata, $array, PREG_SET_ORDER);$uniarray = array();foreach ($array as $value){    $uniarray[$value[2]][utf8_chr(hexdec((string)$value[1]))] = implode(array_map('utf8_chr', array_map('hexdec', explode(' ', $value[3]))));}foreach ($uniarray as $idx => $contents){	echo "Writing to case_fold_$idx.$phpEx\n";	$fp = fopen($phpbb_root_path . 'includes/utf/data/case_fold_' . strtolower($idx) . '.' . $phpEx, 'wb');	fwrite($fp, '<?php return ' . my_var_export($contents) . ';');	fclose($fp);}/*** Return a parsable string representation of a variable** This is function is limited to array/strings/integers** @param	mixed	$var		Variable* @return	string				PHP code representing the variable*/function my_var_export($var){	if (is_array($var))	{		$lines = array();		foreach ($var as $k => $v)		{			$lines[] = my_var_export($k) . '=>' . my_var_export($v);		}		return 'array(' . implode(',', $lines) . ')';	}	else if (is_string($var))	{		return "'" . str_replace(array('\\', "'"), array('\\\\', "\\'"), $var) . "'";	}	else	{		return $var;	}}/*** Download a file to the develop/ dir** @param	string	$url		URL of the file to download* @return	void*/function download($url){	global $phpbb_root_path;	if (file_exists($phpbb_root_path . 'develop/' . basename($url)))	{		return;	}	echo 'Downloading from ', $url, ' ';	if (!$fpr = fopen($url, 'rb'))	{		die("Can't download from $url\nPlease download it yourself and put it in the develop/ dir, kthxbai");	}	if (!$fpw = fopen($phpbb_root_path . 'develop/' . basename($url), 'wb'))	{		die("Can't open develop/" . basename($url) . " for output... please check your permissions or something");	}	$i = 0;	$chunk = 32768;	$done = '';	while (!feof($fpr))	{		$i += fwrite($fpw, fread($fpr, $chunk));		echo str_repeat("\x08", strlen($done));		$done = ($i >> 10) . ' KiB';		echo $done;	}	fclose($fpr);	fclose($fpw);	echo "\n";}?>
<?php/**** mcp [English]** @package language* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** DO NOT CHANGE*/if (!defined('IN_PHPBB')){	exit;}if (empty($lang) || !is_array($lang)){	$lang = array();}// DEVELOPERS PLEASE NOTE//// All language files should use UTF-8 as their encoding and the files must not contain a BOM.//// Placeholders can now contain order information, e.g. instead of// 'Page %s of %s' you can (and should) write 'Page %1$s of %2$s', this allows// translators to re-order the output of data while ensuring it remains correct//// You do not need this where single placeholders are used, e.g. 'Message %d' is fine// equally where a string contains only two placeholders which are used to wrap text// in a url you again do not need to specify an order e.g., 'Click %sHERE%s' is fine$lang = array_merge($lang, array(	'ACTION'				=> 'Action',	'ACTION_NOTE'			=> 'Action/Note',	'ADD_FEEDBACK'			=> 'Add feedback',	'ADD_FEEDBACK_EXPLAIN'	=> 'If you would like to add a report on this please fill out the following form. Only use plain text; HTML, BBCode, etc. are not permitted.',	'ADD_WARNING'			=> 'Add warning',	'ADD_WARNING_EXPLAIN'	=> 'To send a warning to this user please fill out the following form. Only use plain text; HTML, BBCode, etc. are not permitted.',	'ALL_ENTRIES'			=> 'All entries',	'ALL_NOTES_DELETED'		=> 'Successfully removed all user notes.',	'ALL_REPORTS'			=> 'All reports',	'ALREADY_REPORTED'		=> 'This post has already been reported.',	'ALREADY_REPORTED_PM'	=> 'This private message has already been reported.',	'ALREADY_WARNED'		=> 'A warning has already been issued for this post.',	'APPROVE'				=> 'Approve',	'APPROVE_POST'			=> 'Approve post',	'APPROVE_POST_CONFIRM'	=> 'Are you sure you want to approve this post?',	'APPROVE_POSTS'			=> 'Approve posts',	'APPROVE_POSTS_CONFIRM'	=> 'Are you sure you want to approve the selected posts?',	'CANNOT_MOVE_SAME_FORUM'=> 'You cannot move a topic to the forum its already in.',	'CANNOT_WARN_ANONYMOUS'	=> 'You cannot warn unregistered guest users.',	'CANNOT_WARN_SELF'		=> 'You cannot warn yourself.',	'CAN_LEAVE_BLANK'		=> 'This can be left blank.',	'CHANGE_POSTER'			=> 'Change poster',	'CLOSE_PM_REPORT'		=> 'Close PM report',	'CLOSE_PM_REPORT_CONFIRM'	=> 'Are you sure you want to close the selected PM report?',	'CLOSE_PM_REPORTS'		=> 'Close PM reports',	'CLOSE_PM_REPORTS_CONFIRM'	=> 'Are you sure you want to close the selected PM reports?',	'CLOSE_REPORT'			=> 'Close report',	'CLOSE_REPORT_CONFIRM'	=> 'Are you sure you want to close the selected report?',	'CLOSE_REPORTS'			=> 'Close reports',	'CLOSE_REPORTS_CONFIRM'	=> 'Are you sure you want to close the selected reports?',	'DELETE_PM_REPORT'			=> 'Delete PM report',	'DELETE_PM_REPORT_CONFIRM'	=> 'Are you sure you want to delete the selected PM report?',	'DELETE_PM_REPORTS'			=> 'Delete PM reports',	'DELETE_PM_REPORTS_CONFIRM'	=> 'Are you sure you want to delete the selected PM reports?',	'DELETE_POSTS'				=> 'Delete posts',	'DELETE_POSTS_CONFIRM'		=> 'Are you sure you want to delete these posts?',	'DELETE_POST_CONFIRM'		=> 'Are you sure you want to delete this post?',	'DELETE_REPORT'				=> 'Delete report',	'DELETE_REPORT_CONFIRM'		=> 'Are you sure you want to delete the selected report?',	'DELETE_REPORTS'			=> 'Delete reports',	'DELETE_REPORTS_CONFIRM'	=> 'Are you sure you want to delete the selected reports?',	'DELETE_SHADOW_TOPIC'		=> 'Delete shadow topic',	'DELETE_TOPICS'				=> 'Delete selected topics',	'DELETE_TOPICS_CONFIRM'		=> 'Are you sure you want to delete these topics?',	'DELETE_TOPIC_CONFIRM'		=> 'Are you sure you want to delete this topic?',	'DISAPPROVE'				=> 'Disapprove',	'DISAPPROVE_REASON'			=> 'Reason for disapproval',	'DISAPPROVE_POST'			=> 'Disapprove post',	'DISAPPROVE_POST_CONFIRM'	=> 'Are you sure you want to disapprove this post?',	'DISAPPROVE_POSTS'			=> 'Disapprove posts',	'DISAPPROVE_POSTS_CONFIRM'	=> 'Are you sure you want to disapprove the selected posts?',	'DISPLAY_LOG'				=> 'Display entries from previous',	'DISPLAY_OPTIONS'			=> 'Display options',	'EMPTY_REPORT'					=> 'You must enter a description when selecting this reason.',	'EMPTY_TOPICS_REMOVED_WARNING'	=> 'Please note that one or several topics have been removed from the database because they were or become empty.',	'FEEDBACK'				=> 'Feedback',	'FORK'					=> 'Copy',	'FORK_TOPIC'			=> 'Copy topic',	'FORK_TOPIC_CONFIRM'	=> 'Are you sure you want to copy this topic?',	'FORK_TOPICS'			=> 'Copy selected topics',	'FORK_TOPICS_CONFIRM'	=> 'Are you sure you want to copy the selected topics?',	'FORUM_DESC'			=> 'Description',	'FORUM_NAME'			=> 'Forum name',	'FORUM_NOT_EXIST'		=> 'The forum you selected does not exist.',	'FORUM_NOT_POSTABLE'	=> 'The forum you selected cannot be posted to.',	'FORUM_STATUS'			=> 'Forum status',	'FORUM_STYLE'			=> 'Forum style',	'GLOBAL_ANNOUNCEMENT'	=> 'Global announcement',	'IP_INFO'				=> 'IP address information',	'IPS_POSTED_FROM'		=> 'IP addresses this user has posted from',	'LATEST_LOGS'				=> 'Latest 5 logged actions',	'LATEST_REPORTED'			=> 'Latest 5 reports',	'LATEST_REPORTED_PMS'		=> 'Latest 5 PM reports',	'LATEST_UNAPPROVED'			=> 'Latest 5 posts awaiting approval',	'LATEST_WARNING_TIME'		=> 'Latest warning issued',	'LATEST_WARNINGS'			=> 'Latest 5 warnings',	'LEAVE_SHADOW'				=> 'Leave shadow topic in place',	'LIST_REPORT'				=> '1 report',	'LIST_REPORTS'				=> '%d reports',	'LOCK'						=> 'Lock',	'LOCK_POST_POST'			=> 'Lock post',	'LOCK_POST_POST_CONFIRM'	=> 'Are you sure you want to prevent editing this post?',	'LOCK_POST_POSTS'			=> 'Lock selected posts',	'LOCK_POST_POSTS_CONFIRM'	=> 'Are you sure you want to prevent editing the selected posts?',	'LOCK_TOPIC_CONFIRM'		=> 'Are you sure you want to lock this topic?',	'LOCK_TOPICS'				=> 'Lock selected topics',	'LOCK_TOPICS_CONFIRM'		=> 'Are you sure you want to lock all selected topics?',	'LOGS_CURRENT_TOPIC'		=> 'Currently viewing logs of:',	'LOGIN_EXPLAIN_MCP'			=> 'To moderate this forum you must login.',	'LOGVIEW_VIEWTOPIC'			=> 'View topic',	'LOGVIEW_VIEWLOGS'			=> 'View topic log',	'LOGVIEW_VIEWFORUM'			=> 'View forum',	'LOOKUP_ALL'				=> 'Look up all IPs',	'LOOKUP_IP'					=> 'Look up IP',	'MARKED_NOTES_DELETED'		=> 'Successfully removed all marked user notes.',	'MCP_ADD'						=> 'Add a warning',	'MCP_BAN'					=> 'Banning',	'MCP_BAN_EMAILS'			=> 'Ban e-mails',	'MCP_BAN_IPS'				=> 'Ban IPs',	'MCP_BAN_USERNAMES'			=> 'Ban Usernames',	'MCP_LOGS'						=> 'Moderator logs',	'MCP_LOGS_FRONT'				=> 'Front page',	'MCP_LOGS_FORUM_VIEW'			=> 'Forum logs',	'MCP_LOGS_TOPIC_VIEW'			=> 'Topic logs',	'MCP_MAIN'						=> 'Main',	'MCP_MAIN_FORUM_VIEW'			=> 'View forum',	'MCP_MAIN_FRONT'				=> 'Front page',	'MCP_MAIN_POST_DETAILS'			=> 'Post details',	'MCP_MAIN_TOPIC_VIEW'			=> 'View topic',	'MCP_MAKE_ANNOUNCEMENT'			=> 'Modify to Announcement',	'MCP_MAKE_ANNOUNCEMENT_CONFIRM'	=> 'Are you sure you want to change this topic to an Announcement?',	'MCP_MAKE_ANNOUNCEMENTS'		=> 'Modify to Announcements',	'MCP_MAKE_ANNOUNCEMENTS_CONFIRM'=> 'Are you sure you want to change the selected topics to Announcements?',	'MCP_MAKE_GLOBAL'				=> 'Modify to Global announcement',	'MCP_MAKE_GLOBAL_CONFIRM'		=> 'Are you sure you want to change this topic to a Global announcement?',	'MCP_MAKE_GLOBALS'				=> 'Modify to Global announcements',	'MCP_MAKE_GLOBALS_CONFIRM'		=> 'Are you sure you want to change the selected topics to Global announcements?',	'MCP_MAKE_STICKY'				=> 'Modify to Sticky',	'MCP_MAKE_STICKY_CONFIRM'		=> 'Are you sure you want to change this topic to a Sticky?',	'MCP_MAKE_STICKIES'				=> 'Modify to Stickies',	'MCP_MAKE_STICKIES_CONFIRM'		=> 'Are you sure you want to change the selected topics to Stickies?',	'MCP_MAKE_NORMAL'				=> 'Modify to Standard Topic',	'MCP_MAKE_NORMAL_CONFIRM'		=> 'Are you sure you want to change this topic to a Standard Topic?',	'MCP_MAKE_NORMALS'				=> 'Modify to Standard Topics',	'MCP_MAKE_NORMALS_CONFIRM'		=> 'Are you sure you want to change the selected topics to Standard Topics?',	'MCP_NOTES'						=> 'User notes',	'MCP_NOTES_FRONT'				=> 'Front page',	'MCP_NOTES_USER'				=> 'User details',	'MCP_POST_REPORTS'				=> 'Reports issued on this post',	'MCP_PM_REPORTS'				=> 'Reported PMs',	'MCP_PM_REPORT_DETAILS'			=> 'PM Report details',	'MCP_PM_REPORTS_CLOSED'			=> 'Closed PM reports',	'MCP_PM_REPORTS_CLOSED_EXPLAIN'	=> 'This is a list of all reports about private messages which have previously been resolved.',	'MCP_PM_REPORTS_OPEN'			=> 'Open PM reports',	'MCP_PM_REPORTS_OPEN_EXPLAIN'	=> 'This is a list of all reported private messages which are still to be handled.',	'MCP_REPORTS'					=> 'Reported messages',	'MCP_REPORT_DETAILS'			=> 'Report details',	'MCP_REPORTS_CLOSED'			=> 'Closed reports',	'MCP_REPORTS_CLOSED_EXPLAIN'	=> 'This is a list of all reports about posts which have previously been resolved.',	'MCP_REPORTS_OPEN'				=> 'Open reports',	'MCP_REPORTS_OPEN_EXPLAIN'		=> 'This is a list of all reported posts which are still to be handled.',	'MCP_QUEUE'								=> 'Moderation queue',	'MCP_QUEUE_APPROVE_DETAILS'				=> 'Approve details',	'MCP_QUEUE_UNAPPROVED_POSTS'			=> 'Posts awaiting approval',	'MCP_QUEUE_UNAPPROVED_POSTS_EXPLAIN'	=> 'This is a list of all posts which require approving before they will be visible to users.',	'MCP_QUEUE_UNAPPROVED_TOPICS'			=> 'Topics awaiting approval',	'MCP_QUEUE_UNAPPROVED_TOPICS_EXPLAIN'	=> 'This is a list of all topics which require approving before they will be visible to users.',	'MCP_VIEW_USER'			=> 'View warnings for a specific user',	'MCP_WARN'				=> 'Warnings',	'MCP_WARN_FRONT'		=> 'Front page',	'MCP_WARN_LIST'			=> 'List warnings',	'MCP_WARN_POST'			=> 'Warn for specific post',	'MCP_WARN_USER'			=> 'Warn user',	'MERGE_POSTS_CONFIRM'	=> 'Are you sure you want to move the selected posts?',	'MERGE_TOPIC_EXPLAIN'	=> 'Using the form below you can move selected posts into another topic. The posts will be split from this topic and merged into the other topic. These posts will not be reordered and will appear as if the users posted them to the new topic.<br />Please enter the destination topic id or click on Select topic to search for one.',	'MERGE_TOPIC_ID'		=> 'Destination topic identification number',	'MERGE_TOPICS'			=> 'Merge topics',	'MERGE_TOPICS_CONFIRM'	=> 'Are you sure you want to merge the selected topics?',	'MODERATE_FORUM'		=> 'Moderate forum',	'MODERATE_TOPIC'		=> 'Moderate topic',	'MODERATE_POST'			=> 'Moderate post',	'MOD_OPTIONS'			=> 'Moderator options',	'MORE_INFO'				=> 'Further information',	'MOST_WARNINGS'			=> 'Users with most warnings',	'MOVE_TOPIC_CONFIRM'	=> 'Are you sure you want to move the topic into a new forum?',	'MOVE_TOPICS'			=> 'Move selected topics',	'MOVE_TOPICS_CONFIRM'	=> 'Are you sure you want to move the selected topics into a new forum?',	'NOTIFY_POSTER_APPROVAL'		=> 'Notify poster about approval?',	'NOTIFY_POSTER_DISAPPROVAL'		=> 'Notify poster about disapproval?',	'NOTIFY_USER_WARN'				=> 'Notify user about warning?',	'NOT_MODERATOR'					=> 'You are not a moderator of this forum.',	'NO_DESTINATION_FORUM'			=> 'Please select a forum for destination.',	'NO_DESTINATION_FORUM_FOUND'	=> 'There is no destination forum available.',	'NO_ENTRIES'					=> 'No log entries for this period.',	'NO_FEEDBACK'					=> 'No feedback exists for this user.',	'NO_FINAL_TOPIC_SELECTED'		=> 'You have to select a destination topic for merging posts.',	'NO_MATCHES_FOUND'				=> 'No matches found.',	'NO_POST'						=> 'You have to select a post in order to warn the user for a post.',	'NO_POST_REPORT'				=> 'This post was not reported.',	'NO_POST_SELECTED'				=> 'You must select at least one post to perform this action.',	'NO_REASON_DISAPPROVAL'			=> 'Please give an appropriate reason for disapproval.',	'NO_REPORT'						=> 'No report found',	'NO_REPORTS'					=> 'No reports found',	'NO_REPORT_SELECTED'			=> 'You must select at least one report to perform this action.',	'NO_TOPIC_ICON'					=> 'None',	'NO_TOPIC_SELECTED'				=> 'You must select at least one topic to perform this action.',	'NO_TOPICS_QUEUE'				=> 'There are no topics waiting for approval.',	'ONLY_TOPIC'			=> 'Only topic %s',	'OTHER_USERS'			=> 'Other users posting from this IP',	'PM_REPORT_CLOSED_SUCCESS'	=> 'The selected PM report has been closed successfully.',	'PM_REPORT_DELETED_SUCCESS'	=> 'The selected PM report has been deleted successfully.',	'PM_REPORTED_SUCCESS'		=> 'This private message has been successfully reported.',	'PM_REPORT_TOTAL'			=> 'In total there is <strong>1</strong> PM report to review.',	'PM_REPORTS_CLOSED_SUCCESS'	=> 'The selected PM reports have been closed successfully.',	'PM_REPORTS_DELETED_SUCCESS'=> 'The selected PM reports have been deleted successfully.',	'PM_REPORTS_TOTAL'			=> 'In total there are <strong>%d</strong> PM reports to review.',	'PM_REPORTS_ZERO_TOTAL'		=> 'There are no PM reports to review.',	'PM_REPORT_DETAILS'			=> 'Private message report details',	'POSTER'					=> 'Poster',	'POSTS_APPROVED_SUCCESS'	=> 'The selected posts have been approved.',	'POSTS_DELETED_SUCCESS'		=> 'The selected posts have been successfully removed from the database.',	'POSTS_DISAPPROVED_SUCCESS'	=> 'The selected posts have been disapproved.',	'POSTS_LOCKED_SUCCESS'		=> 'The selected posts have been locked successfully.',	'POSTS_MERGED_SUCCESS'		=> 'The selected posts have been merged.',	'POSTS_UNLOCKED_SUCCESS'	=> 'The selected posts have been unlocked successfully.',	'POSTS_PER_PAGE'			=> 'Posts per page',	'POSTS_PER_PAGE_EXPLAIN'	=> '(Set to 0 to view all posts.)',	'POST_APPROVED_SUCCESS'		=> 'The selected post has been approved.',	'POST_DELETED_SUCCESS'		=> 'The selected post has been successfully removed from the database.',	'POST_DISAPPROVED_SUCCESS'	=> 'The selected post has been disapproved.',	'POST_LOCKED_SUCCESS'		=> 'Post locked successfully.',	'POST_NOT_EXIST'			=> 'The post you requested does not exist.',	'POST_REPORTED_SUCCESS'		=> 'This post has been successfully reported.',	'POST_UNLOCKED_SUCCESS'		=> 'Post unlocked successfully.',	'READ_USERNOTES'			=> 'User notes',	'READ_WARNINGS'				=> 'User warnings',	'REPORTER'					=> 'Reporter',	'REPORTED'					=> 'Reported',	'REPORTED_BY'				=> 'Reported by',	'REPORTED_ON_DATE'			=> 'on',	'REPORTS_CLOSED_SUCCESS'	=> 'The selected reports have been closed successfully.',	'REPORTS_DELETED_SUCCESS'	=> 'The selected reports have been deleted successfully.',	'REPORTS_TOTAL'				=> 'In total there are <strong>%d</strong> reports to review.',	'REPORTS_ZERO_TOTAL'		=> 'There are no reports to review.',	'REPORT_CLOSED'				=> 'This report has already been closed.',	'REPORT_CLOSED_SUCCESS'		=> 'The selected report has been closed successfully.',	'REPORT_DELETED_SUCCESS'	=> 'The selected report has been deleted successfully.',	'REPORT_DETAILS'			=> 'Report details',	'REPORT_MESSAGE'			=> 'Report this message',	'REPORT_MESSAGE_EXPLAIN'	=> 'Use this form to report the selected private message. Reporting should generally be used only if the message breaks forum rules. <strong>Reporting a private message will make its contents visible to all moderators.</strong>',	'REPORT_NOTIFY'				=> 'Notify me',	'REPORT_NOTIFY_EXPLAIN'		=> 'Informs you when your report is dealt with.',	'REPORT_POST_EXPLAIN'		=> 'Use this form to report the selected post to the forum moderators and board administrators. Reporting should generally be used only if the post breaks forum rules.',	'REPORT_REASON'				=> 'Report reason',	'REPORT_TIME'				=> 'Report time',	'REPORT_TOTAL'				=> 'In total there is <strong>1</strong> report to review.',	'RESYNC'					=> 'Resync',	'RETURN_MESSAGE'			=> '%sReturn to the message%s',	'RETURN_NEW_FORUM'			=> '%sGo to the new forum%s',	'RETURN_NEW_TOPIC'			=> '%sGo to the new topic%s',	'RETURN_PM'					=> '%sReturn to the private message%s',	'RETURN_POST'				=> '%sReturn to the post%s',	'RETURN_QUEUE'				=> '%sReturn to the queue%s',	'RETURN_REPORTS'			=> '%sReturn to the reports%s',	'RETURN_TOPIC_SIMPLE'		=> '%sReturn to the topic%s',	'SEARCH_POSTS_BY_USER'				=> 'Search posts by',	'SELECT_ACTION'						=> 'Select desired action',	'SELECT_FORUM_GLOBAL_ANNOUNCEMENT'	=> 'Please select the forum you wish this global announcement to be displayed.',	'SELECT_FORUM_GLOBAL_ANNOUNCEMENTS'	=> 'One or more of the selected topics are global announcements. Please select the forum you wish these to be displayed.',	'SELECT_MERGE'						=> 'Select for merge',	'SELECT_TOPICS_FROM'				=> 'Select topics from',	'SELECT_TOPIC'						=> 'Select topic',	'SELECT_USER'						=> 'Select user',	'SORT_ACTION'						=> 'Log action',	'SORT_DATE'							=> 'Date',	'SORT_IP'							=> 'IP address',	'SORT_WARNINGS'						=> 'Warnings',	'SPLIT_AFTER'						=> 'Split topic from selected post onwards',	'SPLIT_FORUM'						=> 'Forum for new topic',	'SPLIT_POSTS'						=> 'Split selected posts',	'SPLIT_SUBJECT'						=> 'New topic title',	'SPLIT_TOPIC_ALL'					=> 'Split topic from selected posts',	'SPLIT_TOPIC_ALL_CONFIRM'			=> 'Are you sure you want to split this topic?',	'SPLIT_TOPIC_BEYOND'				=> 'Split topic at selected post',	'SPLIT_TOPIC_BEYOND_CONFIRM'		=> 'Are you sure you want to split this topic at the selected post?',	'SPLIT_TOPIC_EXPLAIN'				=> 'Using the form below you can split a topic in two, either by selecting the posts individually or by splitting at a selected post.',	'THIS_PM_IP'				=> 'IP for this private message',	'THIS_POST_IP'				=> 'IP for this post',	'TOPICS_APPROVED_SUCCESS'	=> 'The selected topics have been approved.',	'TOPICS_DELETED_SUCCESS'	=> 'The selected topics have been successfully removed from the database.',	'TOPICS_DISAPPROVED_SUCCESS'=> 'The selected topics have been disapproved.',	'TOPICS_FORKED_SUCCESS'		=> 'The selected topics have been copied successfully.',	'TOPICS_LOCKED_SUCCESS'		=> 'The selected topics have been locked.',	'TOPICS_MOVED_SUCCESS'		=> 'The selected topics have been moved successfully.',	'TOPICS_RESYNC_SUCCESS'		=> 'The selected topics have been resynchronised.',	'TOPICS_TYPE_CHANGED'		=> 'Topic types changed successfully.',	'TOPICS_UNLOCKED_SUCCESS'	=> 'The selected topics have been unlocked.',	'TOPIC_APPROVED_SUCCESS'	=> 'The selected topic has been approved.',	'TOPIC_DELETED_SUCCESS'		=> 'The selected topic has been successfully removed from the database.',	'TOPIC_DISAPPROVED_SUCCESS'	=> 'The selected topic has been disapproved.',	'TOPIC_FORKED_SUCCESS'		=> 'The selected topic has been copied successfully.',	'TOPIC_LOCKED_SUCCESS'		=> 'The selected topic has been locked.',	'TOPIC_MOVED_SUCCESS'		=> 'The selected topic has been moved successfully.',	'TOPIC_NOT_EXIST'			=> 'The topic you selected does not exist.',	'TOPIC_RESYNC_SUCCESS'		=> 'The selected topic has been resynchronised.',	'TOPIC_SPLIT_SUCCESS'		=> 'The selected topic has been split successfully.',	'TOPIC_TIME'				=> 'Topic time',	'TOPIC_TYPE_CHANGED'		=> 'Topic type changed successfully.',	'TOPIC_UNLOCKED_SUCCESS'	=> 'The selected topic has been unlocked.',	'TOTAL_WARNINGS'			=> 'Total Warnings',	'UNAPPROVED_POSTS_TOTAL'		=> 'In total there are <strong>%d</strong> posts waiting for approval.',	'UNAPPROVED_POSTS_ZERO_TOTAL'	=> 'There are no posts waiting for approval.',	'UNAPPROVED_POST_TOTAL'			=> 'In total there is <strong>1</strong> post waiting for approval.',	'UNLOCK'						=> 'Unlock',	'UNLOCK_POST'					=> 'Unlock post',	'UNLOCK_POST_EXPLAIN'			=> 'Allow editing',	'UNLOCK_POST_POST'				=> 'Unlock post',	'UNLOCK_POST_POST_CONFIRM'		=> 'Are you sure you want to allow editing this post?',	'UNLOCK_POST_POSTS'				=> 'Unlock selected posts',	'UNLOCK_POST_POSTS_CONFIRM'		=> 'Are you sure you want to allow editing the selected posts?',	'UNLOCK_TOPIC'					=> 'Unlock topic',	'UNLOCK_TOPIC_CONFIRM'			=> 'Are you sure you want to unlock this topic?',	'UNLOCK_TOPICS'					=> 'Unlock selected topics',	'UNLOCK_TOPICS_CONFIRM'			=> 'Are you sure you want to unlock all selected topics?',	'USER_CANNOT_POST'				=> 'You cannot post in this forum.',	'USER_CANNOT_REPORT'			=> 'You cannot report posts in this forum.',	'USER_FEEDBACK_ADDED'			=> 'User feedback added successfully.',	'USER_WARNING_ADDED'			=> 'User warned successfully.',	'VIEW_DETAILS'			=> 'View details',	'VIEW_PM'				=> 'View private message',	'VIEW_POST'				=> 'View post',	'WARNED_USERS'			=> 'Warned users',	'WARNED_USERS_EXPLAIN'	=> 'This is a list of users with unexpired warnings issued to them.',	'WARNING_PM_BODY'		=> 'The following is a warning which has been issued to you by an administrator or moderator of this site.[quote]%s[/quote]',	'WARNING_PM_SUBJECT'	=> 'Board warning issued',	'WARNING_POST_DEFAULT'	=> 'This is a warning regarding the following post made by you: %s .',	'WARNINGS_ZERO_TOTAL'	=> 'No warnings exist.',	'YOU_SELECTED_TOPIC'	=> 'You selected topic number %d: %s.',	'report_reasons'		=> array(		'TITLE'	=> array(			'WAREZ'		=> 'Warez',			'SPAM'		=> 'Spam',			'OFF_TOPIC'	=> 'Off-topic',			'OTHER'		=> 'Other',		),		'DESCRIPTION' => array(			'WAREZ'		=> 'The message contains links to illegal or pirated software.',			'SPAM'		=> 'The reported message has the only purpose to advertise for a website or another product.',			'OFF_TOPIC'	=> 'The reported message is off topic.',			'OTHER'		=> 'The reported message does not fit into any other category, please use the further information field.',		)	),));?>
<?php/**** @package search* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @ignore*/if (!defined('IN_PHPBB')){	exit;}/*** @ignore*/include_once($phpbb_root_path . 'includes/search/search.' . $phpEx);/*** fulltext_mysql* Fulltext search for MySQL* @package search*/class fulltext_mysql extends search_backend{	var $stats = array();	var $word_length = array();	var $split_words = array();	var $search_query;	var $common_words = array();	var $pcre_properties = false;	var $mbstring_regex = false;	function fulltext_mysql(&$error)	{		global $config;		$this->word_length = array('min' => $config['fulltext_mysql_min_word_len'], 'max' => $config['fulltext_mysql_max_word_len']);		if (version_compare(PHP_VERSION, '5.1.0', '>=') || (version_compare(PHP_VERSION, '5.0.0-dev', '<=') && version_compare(PHP_VERSION, '4.4.0', '>=')))		{			// While this is the proper range of PHP versions, PHP may not be linked with the bundled PCRE lib and instead with an older version			if (@preg_match('/\p{L}/u', 'a') !== false)			{				$this->pcre_properties = true;			}		}		if (function_exists('mb_ereg'))		{			$this->mbstring_regex = true;			mb_regex_encoding('UTF-8');		}		$error = false;	}	/**	* Checks for correct MySQL version and stores min/max word length in the config	*/	function init()	{		global $db, $user;		if ($db->sql_layer != 'mysql4' && $db->sql_layer != 'mysqli')		{			return $user->lang['FULLTEXT_MYSQL_INCOMPATIBLE_VERSION'];		}		$result = $db->sql_query('SHOW TABLE STATUS LIKE \'' . POSTS_TABLE . '\'');		$info = $db->sql_fetchrow($result);		$db->sql_freeresult($result);		$engine = '';		if (isset($info['Engine']))		{			$engine = $info['Engine'];		}		else if (isset($info['Type']))		{			$engine = $info['Type'];		}		if ($engine != 'MyISAM')		{			return $user->lang['FULLTEXT_MYSQL_NOT_MYISAM'];		}		$sql = 'SHOW VARIABLES			LIKE \'ft\_%\'';		$result = $db->sql_query($sql);		$mysql_info = array();		while ($row = $db->sql_fetchrow($result))		{			$mysql_info[$row['Variable_name']] = $row['Value'];		}		$db->sql_freeresult($result);		set_config('fulltext_mysql_max_word_len', $mysql_info['ft_max_word_len']);		set_config('fulltext_mysql_min_word_len', $mysql_info['ft_min_word_len']);		return false;	}	/**	* Splits keywords entered by a user into an array of words stored in $this->split_words	* Stores the tidied search query in $this->search_query	*	* @param string &$keywords Contains the keyword as entered by the user	* @param string $terms is either 'all' or 'any'	* @return bool false if no valid keywords were found and otherwise true	*/	function split_keywords(&$keywords, $terms)	{		global $config, $user;		if ($terms == 'all')		{			$match		= array('#\sand\s#iu', '#\sor\s#iu', '#\snot\s#iu', '#(^|\s)\+#', '#(^|\s)-#', '#(^|\s)\|#');			$replace	= array(' +', ' |', ' -', ' +', ' -', ' |');			$keywords = preg_replace($match, $replace, $keywords);		}		// Filter out as above		$split_keywords = preg_replace("#[\n\r\t]+#", ' ', trim(htmlspecialchars_decode($keywords)));		// Split words		if ($this->pcre_properties)		{			$split_keywords = preg_replace('#([^\p{L}\p{N}\'*"()])#u', '$1$1', str_replace('\'\'', '\' \'', trim($split_keywords)));		}		else if ($this->mbstring_regex)		{			$split_keywords = mb_ereg_replace('([^\w\'*"()])', '\\1\\1', str_replace('\'\'', '\' \'', trim($split_keywords)));		}		else		{			$split_keywords = preg_replace('#([^\w\'*"()])#u', '$1$1', str_replace('\'\'', '\' \'', trim($split_keywords)));		}		if ($this->pcre_properties)		{			$matches = array();			preg_match_all('#(?:[^\p{L}\p{N}*"()]|^)([+\-|]?(?:[\p{L}\p{N}*"()]+\'?)*[\p{L}\p{N}*"()])(?:[^\p{L}\p{N}*"()]|$)#u', $split_keywords, $matches);			$this->split_words = $matches[1];		}		else if ($this->mbstring_regex)		{			mb_ereg_search_init($split_keywords, '(?:[^\w*"()]|^)([+\-|]?(?:[\w*"()]+\'?)*[\w*"()])(?:[^\w*"()]|$)');			while (($word = mb_ereg_search_regs()))			{				$this->split_words[] = $word[1];			}		}		else		{			$matches = array();			preg_match_all('#(?:[^\w*"()]|^)([+\-|]?(?:[\w*"()]+\'?)*[\w*"()])(?:[^\w*"()]|$)#u', $split_keywords, $matches);			$this->split_words = $matches[1];		}		// We limit the number of allowed keywords to minimize load on the database		if ($config['max_num_search_keywords'] && sizeof($this->split_words) > $config['max_num_search_keywords'])		{			trigger_error($user->lang('MAX_NUM_SEARCH_KEYWORDS_REFINE', $config['max_num_search_keywords'], sizeof($this->split_words)));		}		// to allow phrase search, we need to concatenate quoted words		$tmp_split_words = array();		$phrase = '';		foreach ($this->split_words as $word)		{			if ($phrase)			{				$phrase .= ' ' . $word;				if (strpos($word, '"') !== false && substr_count($word, '"') % 2 == 1)				{					$tmp_split_words[] = $phrase;					$phrase = '';				}			}			else if (strpos($word, '"') !== false && substr_count($word, '"') % 2 == 1)			{				$phrase = $word;			}			else			{				$tmp_split_words[] = $word . ' ';			}		}		if ($phrase)		{			$tmp_split_words[] = $phrase;		}		$this->split_words = $tmp_split_words;		unset($tmp_split_words);		unset($phrase);		foreach ($this->split_words as $i => $word)		{			$clean_word = preg_replace('#^[+\-|"]#', '', $word);			// check word length			$clean_len = utf8_strlen(str_replace('*', '', $clean_word));			if (($clean_len < $config['fulltext_mysql_min_word_len']) || ($clean_len > $config['fulltext_mysql_max_word_len']))			{				$this->common_words[] = $word;				unset($this->split_words[$i]);			}		}		if ($terms == 'any')		{			$this->search_query = '';			foreach ($this->split_words as $word)			{				if ((strpos($word, '+') === 0) || (strpos($word, '-') === 0) || (strpos($word, '|') === 0))				{					$word = substr($word, 1);				}				$this->search_query .= $word . ' ';			}		}		else		{			$this->search_query = '';			foreach ($this->split_words as $word)			{				if ((strpos($word, '+') === 0) || (strpos($word, '-') === 0))				{					$this->search_query .= $word . ' ';				}				else if (strpos($word, '|') === 0)				{					$this->search_query .= substr($word, 1) . ' ';				}				else				{					$this->search_query .= '+' . $word . ' ';				}			}		}		$this->search_query = utf8_htmlspecialchars($this->search_query);		if ($this->search_query)		{			$this->split_words = array_values($this->split_words);			sort($this->split_words);			return true;		}		return false;	}	/**	* Turns text into an array of words	*/	function split_message($text)	{		global $config;		// Split words		if ($this->pcre_properties)		{			$text = preg_replace('#([^\p{L}\p{N}\'*])#u', '$1$1', str_replace('\'\'', '\' \'', trim($text)));		}		else if ($this->mbstring_regex)		{			$text = mb_ereg_replace('([^\w\'*])', '\\1\\1', str_replace('\'\'', '\' \'', trim($text)));		}		else		{			$text = preg_replace('#([^\w\'*])#u', '$1$1', str_replace('\'\'', '\' \'', trim($text)));		}		if ($this->pcre_properties)		{			$matches = array();			preg_match_all('#(?:[^\p{L}\p{N}*]|^)([+\-|]?(?:[\p{L}\p{N}*]+\'?)*[\p{L}\p{N}*])(?:[^\p{L}\p{N}*]|$)#u', $text, $matches);			$text = $matches[1];		}		else if ($this->mbstring_regex)		{			mb_ereg_search_init($text, '(?:[^\w*]|^)([+\-|]?(?:[\w*]+\'?)*[\w*])(?:[^\w*]|$)');			$text = array();			while (($word = mb_ereg_search_regs()))			{				$text[] = $word[1];			}		}		else		{			$matches = array();			preg_match_all('#(?:[^\w*]|^)([+\-|]?(?:[\w*]+\'?)*[\w*])(?:[^\w*]|$)#u', $text, $matches);			$text = $matches[1];		}		// remove too short or too long words		$text = array_values($text);		for ($i = 0, $n = sizeof($text); $i < $n; $i++)		{			$text[$i] = trim($text[$i]);			if (utf8_strlen($text[$i]) < $config['fulltext_mysql_min_word_len'] || utf8_strlen($text[$i]) > $config['fulltext_mysql_max_word_len'])			{				unset($text[$i]);			}		}		return array_values($text);	}	/**	* Performs a search on keywords depending on display specific params. You have to run split_keywords() first.	*	* @param	string		$type				contains either posts or topics depending on what should be searched for	* @param	string		$fields				contains either titleonly (topic titles should be searched), msgonly (only message bodies should be searched), firstpost (only subject and body of the first post should be searched) or all (all post bodies and subjects should be searched)	* @param	string		$terms				is either 'all' (use query as entered, words without prefix should default to "have to be in field") or 'any' (ignore search query parts and just return all posts that contain any of the specified words)	* @param	array		$sort_by_sql		contains SQL code for the ORDER BY part of a query	* @param	string		$sort_key			is the key of $sort_by_sql for the selected sorting	* @param	string		$sort_dir			is either a or d representing ASC and DESC	* @param	string		$sort_days			specifies the maximum amount of days a post may be old	* @param	array		$ex_fid_ary			specifies an array of forum ids which should not be searched	* @param	array		$m_approve_fid_ary	specifies an array of forum ids in which the searcher is allowed to view unapproved posts	* @param	int			$topic_id			is set to 0 or a topic id, if it is not 0 then only posts in this topic should be searched	* @param	array		$author_ary			an array of author ids if the author should be ignored during the search the array is empty	* @param	string		$author_name		specifies the author match, when ANONYMOUS is also a search-match	* @param	array		&$id_ary			passed by reference, to be filled with ids for the page specified by $start and $per_page, should be ordered	* @param	int			$start				indicates the first index of the page	* @param	int			$per_page			number of ids each page is supposed to contain	* @return	boolean|int						total number of results	*	* @access	public	*/	function keyword_search($type, $fields, $terms, $sort_by_sql, $sort_key, $sort_dir, $sort_days, $ex_fid_ary, $m_approve_fid_ary, $topic_id, $author_ary, $author_name, &$id_ary, $start, $per_page)	{		global $config, $db;		// No keywords? No posts.		if (!$this->search_query)		{			return false;		}		// generate a search_key from all the options to identify the results		$search_key = md5(implode('#', array(			implode(', ', $this->split_words),			$type,			$fields,			$terms,			$sort_days,			$sort_key,			$topic_id,			implode(',', $ex_fid_ary),			implode(',', $m_approve_fid_ary),			implode(',', $author_ary)		)));		// try reading the results from cache		$result_count = 0;		if ($this->obtain_ids($search_key, $result_count, $id_ary, $start, $per_page, $sort_dir) == SEARCH_RESULT_IN_CACHE)		{			return $result_count;		}		$id_ary = array();		$join_topic = ($type == 'posts') ? false : true;		// Build sql strings for sorting		$sql_sort = $sort_by_sql[$sort_key] . (($sort_dir == 'a') ? ' ASC' : ' DESC');		$sql_sort_table = $sql_sort_join = '';		switch ($sql_sort[0])		{			case 'u':				$sql_sort_table	= USERS_TABLE . ' u, ';				$sql_sort_join	= ($type == 'posts') ? ' AND u.user_id = p.poster_id ' : ' AND u.user_id = t.topic_poster ';			break;			case 't':				$join_topic = true;			break;			case 'f':				$sql_sort_table	= FORUMS_TABLE . ' f, ';				$sql_sort_join	= ' AND f.forum_id = p.forum_id ';			break;		}		// Build some display specific sql strings		switch ($fields)		{			case 'titleonly':				$sql_match = 'p.post_subject';				$sql_match_where = ' AND p.post_id = t.topic_first_post_id';				$join_topic = true;			break;			case 'msgonly':				$sql_match = 'p.post_text';				$sql_match_where = '';			break;			case 'firstpost':				$sql_match = 'p.post_subject, p.post_text';				$sql_match_where = ' AND p.post_id = t.topic_first_post_id';				$join_topic = true;			break;			default:				$sql_match = 'p.post_subject, p.post_text';				$sql_match_where = '';			break;		}		if (!sizeof($m_approve_fid_ary))		{			$m_approve_fid_sql = ' AND p.post_approved = 1';		}		else if ($m_approve_fid_ary === array(-1))		{			$m_approve_fid_sql = '';		}		else		{			$m_approve_fid_sql = ' AND (p.post_approved = 1 OR ' . $db->sql_in_set('p.forum_id', $m_approve_fid_ary, true) . ')';		}		$sql_select			= (!$result_count) ? 'SQL_CALC_FOUND_ROWS ' : '';		$sql_select			= ($type == 'posts') ? $sql_select . 'p.post_id' : 'DISTINCT ' . $sql_select . 't.topic_id';		$sql_from			= ($join_topic) ? TOPICS_TABLE . ' t, ' : '';		$field				= ($type == 'posts') ? 'post_id' : 'topic_id';		if (sizeof($author_ary) && $author_name)		{			// first one matches post of registered users, second one guests and deleted users			$sql_author = ' AND (' . $db->sql_in_set('p.poster_id', array_diff($author_ary, array(ANONYMOUS)), false, true) . ' OR p.post_username ' . $author_name . ')';		}		else if (sizeof($author_ary))		{			$sql_author = ' AND ' . $db->sql_in_set('p.poster_id', $author_ary);		}		else		{			$sql_author = '';		}		$sql_where_options = $sql_sort_join;		$sql_where_options .= ($topic_id) ? ' AND p.topic_id = ' . $topic_id : '';		$sql_where_options .= ($join_topic) ? ' AND t.topic_id = p.topic_id' : '';		$sql_where_options .= (sizeof($ex_fid_ary)) ? ' AND ' . $db->sql_in_set('p.forum_id', $ex_fid_ary, true) : '';		$sql_where_options .= $m_approve_fid_sql;		$sql_where_options .= $sql_author;		$sql_where_options .= ($sort_days) ? ' AND p.post_time >= ' . (time() - ($sort_days * 86400)) : '';		$sql_where_options .= $sql_match_where;		$sql = "SELECT $sql_select			FROM $sql_from$sql_sort_table" . POSTS_TABLE . " p			WHERE MATCH ($sql_match) AGAINST ('" . $db->sql_escape(htmlspecialchars_decode($this->search_query)) . "' IN BOOLEAN MODE)				$sql_where_options			ORDER BY $sql_sort";		$result = $db->sql_query_limit($sql, $config['search_block_size'], $start);		while ($row = $db->sql_fetchrow($result))		{			$id_ary[] = (int) $row[$field];		}		$db->sql_freeresult($result);		$id_ary = array_unique($id_ary);		if (!sizeof($id_ary))		{			return false;		}		// if the total result count is not cached yet, retrieve it from the db		if (!$result_count)		{			$sql = 'SELECT FOUND_ROWS() as result_count';			$result = $db->sql_query($sql);			$result_count = (int) $db->sql_fetchfield('result_count');			$db->sql_freeresult($result);			if (!$result_count)			{				return false;			}		}		// store the ids, from start on then delete anything that isn't on the current page because we only need ids for one page		$this->save_ids($search_key, implode(' ', $this->split_words), $author_ary, $result_count, $id_ary, $start, $sort_dir);		$id_ary = array_slice($id_ary, 0, (int) $per_page);		return $result_count;	}	/**	* Performs a search on an author's posts without caring about message contents. Depends on display specific params	*	* @param	string		$type				contains either posts or topics depending on what should be searched for	* @param	boolean		$firstpost_only		if true, only topic starting posts will be considered	* @param	array		$sort_by_sql		contains SQL code for the ORDER BY part of a query	* @param	string		$sort_key			is the key of $sort_by_sql for the selected sorting	* @param	string		$sort_dir			is either a or d representing ASC and DESC	* @param	string		$sort_days			specifies the maximum amount of days a post may be old	* @param	array		$ex_fid_ary			specifies an array of forum ids which should not be searched	* @param	array		$m_approve_fid_ary	specifies an array of forum ids in which the searcher is allowed to view unapproved posts	* @param	int			$topic_id			is set to 0 or a topic id, if it is not 0 then only posts in this topic should be searched	* @param	array		$author_ary			an array of author ids	* @param	string		$author_name		specifies the author match, when ANONYMOUS is also a search-match	* @param	array		&$id_ary			passed by reference, to be filled with ids for the page specified by $start and $per_page, should be ordered	* @param	int			$start				indicates the first index of the page	* @param	int			$per_page			number of ids each page is supposed to contain	* @return	boolean|int						total number of results	*	* @access	public	*/	function author_search($type, $firstpost_only, $sort_by_sql, $sort_key, $sort_dir, $sort_days, $ex_fid_ary, $m_approve_fid_ary, $topic_id, $author_ary, $author_name, &$id_ary, $start, $per_page)	{		global $config, $db;		// No author? No posts.		if (!sizeof($author_ary))		{			return 0;		}		// generate a search_key from all the options to identify the results		$search_key = md5(implode('#', array(			'',			$type,			($firstpost_only) ? 'firstpost' : '',			'',			'',			$sort_days,			$sort_key,			$topic_id,			implode(',', $ex_fid_ary),			implode(',', $m_approve_fid_ary),			implode(',', $author_ary),			$author_name,		)));		// try reading the results from cache		$result_count = 0;		if ($this->obtain_ids($search_key, $result_count, $id_ary, $start, $per_page, $sort_dir) == SEARCH_RESULT_IN_CACHE)		{			return $result_count;		}		$id_ary = array();		// Create some display specific sql strings		if ($author_name)		{			// first one matches post of registered users, second one guests and deleted users			$sql_author = '(' . $db->sql_in_set('p.poster_id', array_diff($author_ary, array(ANONYMOUS)), false, true) . ' OR p.post_username ' . $author_name . ')';		}		else		{			$sql_author = $db->sql_in_set('p.poster_id', $author_ary);		}		$sql_fora		= (sizeof($ex_fid_ary)) ? ' AND ' . $db->sql_in_set('p.forum_id', $ex_fid_ary, true) : '';		$sql_topic_id	= ($topic_id) ? ' AND p.topic_id = ' . (int) $topic_id : '';		$sql_time		= ($sort_days) ? ' AND p.post_time >= ' . (time() - ($sort_days * 86400)) : '';		$sql_firstpost = ($firstpost_only) ? ' AND p.post_id = t.topic_first_post_id' : '';		// Build sql strings for sorting		$sql_sort = $sort_by_sql[$sort_key] . (($sort_dir == 'a') ? ' ASC' : ' DESC');		$sql_sort_table = $sql_sort_join = '';		switch ($sql_sort[0])		{			case 'u':				$sql_sort_table	= USERS_TABLE . ' u, ';				$sql_sort_join	= ($type == 'posts') ? ' AND u.user_id = p.poster_id ' : ' AND u.user_id = t.topic_poster ';			break;			case 't':				$sql_sort_table	= ($type == 'posts' && !$firstpost_only) ? TOPICS_TABLE . ' t, ' : '';				$sql_sort_join	= ($type == 'posts' && !$firstpost_only) ? ' AND t.topic_id = p.topic_id ' : '';			break;			case 'f':				$sql_sort_table	= FORUMS_TABLE . ' f, ';				$sql_sort_join	= ' AND f.forum_id = p.forum_id ';			break;		}		if (!sizeof($m_approve_fid_ary))		{			$m_approve_fid_sql = ' AND p.post_approved = 1';		}		else if ($m_approve_fid_ary == array(-1))		{			$m_approve_fid_sql = '';		}		else		{			$m_approve_fid_sql = ' AND (p.post_approved = 1 OR ' . $db->sql_in_set('p.forum_id', $m_approve_fid_ary, true) . ')';		}		// If the cache was completely empty count the results		$calc_results = ($result_count) ? '' : 'SQL_CALC_FOUND_ROWS ';		// Build the query for really selecting the post_ids		if ($type == 'posts')		{			$sql = "SELECT {$calc_results}p.post_id				FROM " . $sql_sort_table . POSTS_TABLE . ' p' . (($firstpost_only) ? ', ' . TOPICS_TABLE . ' t ' : ' ') . "				WHERE $sql_author					$sql_topic_id					$sql_firstpost					$m_approve_fid_sql					$sql_fora					$sql_sort_join					$sql_time				ORDER BY $sql_sort";			$field = 'post_id';		}		else		{			$sql = "SELECT {$calc_results}t.topic_id				FROM " . $sql_sort_table . TOPICS_TABLE . ' t, ' . POSTS_TABLE . " p				WHERE $sql_author					$sql_topic_id					$sql_firstpost					$m_approve_fid_sql					$sql_fora					AND t.topic_id = p.topic_id					$sql_sort_join					$sql_time				GROUP BY t.topic_id				ORDER BY $sql_sort";			$field = 'topic_id';		}		// Only read one block of posts from the db and then cache it		$result = $db->sql_query_limit($sql, $config['search_block_size'], $start);		while ($row = $db->sql_fetchrow($result))		{			$id_ary[] = (int) $row[$field];		}		$db->sql_freeresult($result);		// retrieve the total result count if needed		if (!$result_count)		{			$sql = 'SELECT FOUND_ROWS() as result_count';			$result = $db->sql_query($sql);			$result_count = (int) $db->sql_fetchfield('result_count');			$db->sql_freeresult($result);			if (!$result_count)			{				return false;			}		}		if (sizeof($id_ary))		{			$this->save_ids($search_key, '', $author_ary, $result_count, $id_ary, $start, $sort_dir);			$id_ary = array_slice($id_ary, 0, $per_page);			return $result_count;		}		return false;	}	/**	* Destroys cached search results, that contained one of the new words in a post so the results won't be outdated.	*	* @param string $mode contains the post mode: edit, post, reply, quote ...	*/	function index($mode, $post_id, &$message, &$subject, $poster_id, $forum_id)	{		global $db;		// Split old and new post/subject to obtain array of words		$split_text = $this->split_message($message);		$split_title = ($subject) ? $this->split_message($subject) : array();		$words = array_unique(array_merge($split_text, $split_title));		unset($split_text);		unset($split_title);		// destroy cached search results containing any of the words removed or added		$this->destroy_cache($words, array($poster_id));		unset($words);	}	/**	* Destroy cached results, that might be outdated after deleting a post	*/	function index_remove($post_ids, $author_ids, $forum_ids)	{		$this->destroy_cache(array(), $author_ids);	}	/**	* Destroy old cache entries	*/	function tidy()	{		global $db, $config;		// destroy too old cached search results		$this->destroy_cache(array());		set_config('search_last_gc', time(), true);	}	/**	* Create fulltext index	*/	function create_index($acp_module, $u_action)	{		global $db;		// Make sure we can actually use MySQL with fulltext indexes		if ($error = $this->init())		{			return $error;		}		if (empty($this->stats))		{			$this->get_stats();		}		$alter = array();		if (!isset($this->stats['post_subject']))		{			if ($db->sql_layer == 'mysqli' || version_compare($db->sql_server_info(true), '4.1.3', '>='))			{				//$alter[] = 'MODIFY post_subject varchar(100) COLLATE utf8_unicode_ci DEFAULT \'\' NOT NULL';			}			else			{				$alter[] = 'MODIFY post_subject text NOT NULL';			}			$alter[] = 'ADD FULLTEXT (post_subject)';		}		if (!isset($this->stats['post_text']))		{			if ($db->sql_layer == 'mysqli' || version_compare($db->sql_server_info(true), '4.1.3', '>='))			{				$alter[] = 'MODIFY post_text mediumtext COLLATE utf8_unicode_ci NOT NULL';			}			else			{				$alter[] = 'MODIFY post_text mediumtext NOT NULL';			}			$alter[] = 'ADD FULLTEXT (post_text)';		}		if (!isset($this->stats['post_content']))		{			$alter[] = 'ADD FULLTEXT post_content (post_subject, post_text)';		}		if (sizeof($alter))		{			$db->sql_query('ALTER TABLE ' . POSTS_TABLE . ' ' . implode(', ', $alter));		}		$db->sql_query('TRUNCATE TABLE ' . SEARCH_RESULTS_TABLE);		return false;	}	/**	* Drop fulltext index	*/	function delete_index($acp_module, $u_action)	{		global $db;		// Make sure we can actually use MySQL with fulltext indexes		if ($error = $this->init())		{			return $error;		}		if (empty($this->stats))		{			$this->get_stats();		}		$alter = array();		if (isset($this->stats['post_subject']))		{			$alter[] = 'DROP INDEX post_subject';		}		if (isset($this->stats['post_text']))		{			$alter[] = 'DROP INDEX post_text';		}		if (isset($this->stats['post_content']))		{			$alter[] = 'DROP INDEX post_content';		}		if (sizeof($alter))		{			$db->sql_query('ALTER TABLE ' . POSTS_TABLE . ' ' . implode(', ', $alter));		}		$db->sql_query('TRUNCATE TABLE ' . SEARCH_RESULTS_TABLE);		return false;	}	/**	* Returns true if both FULLTEXT indexes exist	*/	function index_created()	{		if (empty($this->stats))		{			$this->get_stats();		}		return (isset($this->stats['post_text']) && isset($this->stats['post_subject']) && isset($this->stats['post_content'])) ? true : false;	}	/**	* Returns an associative array containing information about the indexes	*/	function index_stats()	{		global $user;		if (empty($this->stats))		{			$this->get_stats();		}		return array(			$user->lang['FULLTEXT_MYSQL_TOTAL_POSTS']			=> ($this->index_created()) ? $this->stats['total_posts'] : 0,		);	}	function get_stats()	{		global $db;		if (strpos($db->sql_layer, 'mysql') === false)		{			$this->stats = array();			return;		}		$sql = 'SHOW INDEX			FROM ' . POSTS_TABLE;		$result = $db->sql_query($sql);		while ($row = $db->sql_fetchrow($result))		{			// deal with older MySQL versions which didn't use Index_type			$index_type = (isset($row['Index_type'])) ? $row['Index_type'] : $row['Comment'];			if ($index_type == 'FULLTEXT')			{				if ($row['Key_name'] == 'post_text')				{					$this->stats['post_text'] = $row;				}				else if ($row['Key_name'] == 'post_subject')				{					$this->stats['post_subject'] = $row;				}				else if ($row['Key_name'] == 'post_content')				{					$this->stats['post_content'] = $row;				}			}		}		$db->sql_freeresult($result);		$sql = 'SELECT COUNT(post_id) as total_posts			FROM ' . POSTS_TABLE;		$result = $db->sql_query($sql);		$this->stats['total_posts'] = (int) $db->sql_fetchfield('total_posts');		$db->sql_freeresult($result);	}	/**	* Display a note, that UTF-8 support is not available with certain versions of PHP	*/	function acp()	{		global $user, $config;		$tpl = '		<dl>			<dt><label>' . $user->lang['FULLTEXT_MYSQL_PCRE'] . '</label><br /><span>' . $user->lang['FULLTEXT_MYSQL_PCRE_EXPLAIN'] . '</span></dt>			<dd>' . (($this->pcre_properties) ? $user->lang['YES'] : $user->lang['NO']) . ' (PHP ' . PHP_VERSION . ')</dd>		</dl>		<dl>			<dt><label>' . $user->lang['FULLTEXT_MYSQL_MBSTRING'] . '</label><br /><span>' . $user->lang['FULLTEXT_MYSQL_MBSTRING_EXPLAIN'] . '</span></dt>			<dd>' . (($this->mbstring_regex) ? $user->lang['YES'] : $user->lang['NO']). '</dd>		</dl>		<dl>			<dt><label>' . $user->lang['MIN_SEARCH_CHARS'] . ':</label><br /><span>' . $user->lang['FULLTEXT_MYSQL_MIN_SEARCH_CHARS_EXPLAIN'] . '</span></dt>			<dd>' . $config['fulltext_mysql_min_word_len'] . '</dd>		</dl>		<dl>			<dt><label>' . $user->lang['MAX_SEARCH_CHARS'] . ':</label><br /><span>' . $user->lang['FULLTEXT_MYSQL_MAX_SEARCH_CHARS_EXPLAIN'] . '</span></dt>			<dd>' . $config['fulltext_mysql_max_word_len'] . '</dd>		</dl>		';		// These are fields required in the config table		return array(			'tpl'		=> $tpl,			'config'	=> array()		);	}}?>
<?php/**** @package phpBB3* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**/if (php_sapi_name() != 'cli'){	die("This program must be run from the command line.\n");}//// Security message://// This script is potentially dangerous.// Remove or comment the next line (die(".... ) to enable this script.// Do NOT FORGET to either remove this script or disable it after you have used it.//die("Please read the first lines of this script for instructions on how to enable it");set_time_limit(0);error_reporting(E_ALL);define('IN_PHPBB', true);$phpbb_root_path = '../';$phpEx = substr(strrchr(__FILE__, '.'), 1);/*** Let's download some files we need*/download('http://www.unicode.org/Public/UNIDATA/NormalizationTest.txt');download('http://www.unicode.org/Public/UNIDATA/UnicodeData.txt');/*** Those are the tests we run*/$test_suite = array(	/**	* NFC	*   c2 ==  NFC(c1) ==  NFC(c2) ==  NFC(c3)	*   c4 ==  NFC(c4) ==  NFC(c5)	*/	'NFC'	=>	array(		'c2'	=>	array('c1', 'c2', 'c3'),		'c4'	=>	array('c4', 'c5')	),	/**	* NFD	*   c3 ==  NFD(c1) ==  NFD(c2) ==  NFD(c3)	*   c5 ==  NFD(c4) ==  NFD(c5)	*/	'NFD'	=>	array(		'c3'	=>	array('c1', 'c2', 'c3'),		'c5'	=>	array('c4', 'c5')	),	/**	* NFKC	*   c4 == NFKC(c1) == NFKC(c2) == NFKC(c3) == NFKC(c4) == NFKC(c5)	*/	'NFKC'	=>	array(		'c4'	=>	array('c1', 'c2', 'c3', 'c4', 'c5')	),	/**	* NFKD	*   c5 == NFKD(c1) == NFKD(c2) == NFKD(c3) == NFKD(c4) == NFKD(c5)	*/	'NFKD'	=>	array(		'c5'	=>	array('c1', 'c2', 'c3', 'c4', 'c5')	));require_once($phpbb_root_path . 'includes/utf/utf_normalizer.' . $phpEx);$i = $n = 0;$failed = false;$tested_chars = array();$fp = fopen($phpbb_root_path . 'develop/NormalizationTest.txt', 'rb');while (!feof($fp)){	$line = fgets($fp);	++$n;	if ($line[0] == '@')	{		if ($i)		{			echo "done\n";		}		$i = 0;		echo "\n", substr($line, 1), "\n\n";		continue;	}	if (!strpos(' 0123456789ABCDEF', $line[0]))	{		continue;	}	if (++$i % 100 == 0)	{		echo $i, ' ';	}	list($c1, $c2, $c3, $c4, $c5) = explode(';', $line);	if (!strpos($c1, ' '))	{		/**		* We are currently testing a single character, we add it to the list of		* characters we have processed so that we can exclude it when testing		* for invariants		*/		$tested_chars[$c1] = 1;	}	foreach ($test_suite as $form => $serie)	{		foreach ($serie as $expected => $tests)		{			$hex_expected = ${$expected};			$utf_expected = hexseq_to_utf($hex_expected);			foreach ($tests as $test)			{				$utf_result = $utf_expected;				call_user_func(array('utf_normalizer', $form), $utf_result);				if (strcmp($utf_expected, $utf_result))				{					$failed = true;					$hex_result = utf_to_hexseq($utf_result);					echo "\nFAILED $expected == $form($test) ($hex_expected != $hex_result)";				}			}		}		if ($failed)		{			die("\n\nFailed at line $n\n");		}	}}fclose($fp);/*** Test for invariants*/echo "\n\nTesting for invariants...\n\n";$fp = fopen($phpbb_root_path . 'develop/UnicodeData.txt', 'rt');$n = 0;while (!feof($fp)){	if (++$n % 100 == 0)	{		echo $n, ' ';	}	$line = fgets($fp, 1024);	if (!$pos = strpos($line, ';'))	{		continue;	}	$hex_tested = $hex_expected = substr($line, 0, $pos);	if (isset($tested_chars[$hex_tested]))	{		continue;	}	$utf_expected = hex_to_utf($hex_expected);	if ($utf_expected >= UTF8_SURROGATE_FIRST	 && $utf_expected <= UTF8_SURROGATE_LAST)	{		/**		* Surrogates are illegal on their own, we expect the normalizer		* to return a replacement char		*/		$utf_expected = UTF8_REPLACEMENT;		$hex_expected = utf_to_hexseq($utf_expected);	}	foreach (array('nfc', 'nfkc', 'nfd', 'nfkd') as $form)	{		$utf_result = $utf_expected;		utf_normalizer::$form($utf_result);		$hex_result = utf_to_hexseq($utf_result);//		echo "$form($utf_expected) == $utf_result\n";		if (strcmp($utf_expected, $utf_result))		{			$failed = 1;			echo "\nFAILED $hex_expected == $form($hex_tested) ($hex_expected != $hex_result)";		}	}	if ($failed)	{		die("\n\nFailed at line $n\n");	}}fclose($fp);die("\n\nALL TESTS PASSED SUCCESSFULLY\n");/*** Download a file to the develop/ dir** @param	string	$url		URL of the file to download* @return	void*/function download($url){	global $phpbb_root_path;	if (file_exists($phpbb_root_path . 'develop/' . basename($url)))	{		return;	}	echo 'Downloading from ', $url, ' ';	if (!$fpr = fopen($url, 'rb'))	{		die("Can't download from $url\nPlease download it yourself and put it in the develop/ dir, kthxbai");	}	if (!$fpw = fopen($phpbb_root_path . 'develop/' . basename($url), 'wb'))	{		die("Can't open develop/" . basename($url) . " for output... please check your permissions or something");	}	$i = 0;	$chunk = 32768;	$done = '';	while (!feof($fpr))	{		$i += fwrite($fpw, fread($fpr, $chunk));		echo str_repeat("\x08", strlen($done));		$done = ($i >> 10) . ' KiB';		echo $done;	}	fclose($fpr);	fclose($fpw);	echo "\n";}/*** Convert a UTF string to a sequence of codepoints in hexadecimal** @param	string	$utf	UTF string* @return	integer			Unicode codepoints in hex*/function utf_to_hexseq($str){	$pos = 0;	$len = strlen($str);	$ret = array();	while ($pos < $len)	{		$c = $str[$pos];		switch ($c & "\xF0")		{			case "\xC0":			case "\xD0":				$utf_char = substr($str, $pos, 2);				$pos += 2;				break;			case "\xE0":				$utf_char = substr($str, $pos, 3);				$pos += 3;				break;			case "\xF0":				$utf_char = substr($str, $pos, 4);				$pos += 4;				break;			default:				$utf_char = $c;				++$pos;		}		$hex = dechex(utf_to_cp($utf_char));		if (!isset($hex[3]))		{			$hex = substr('000' . $hex, -4);		}		$ret[] = $hex;	}	return strtr(implode(' ', $ret), 'abcdef', 'ABCDEF');}/*** Convert a UTF-8 char to its codepoint** @param	string	$utf_char	UTF-8 char* @return	integer				Unicode codepoint*/function utf_to_cp($utf_char){	switch (strlen($utf_char))	{		case 1:			return ord($utf_char);		case 2:			return ((ord($utf_char[0]) & 0x1F) << 6) | (ord($utf_char[1]) & 0x3F);		case 3:			return ((ord($utf_char[0]) & 0x0F) << 12) | ((ord($utf_char[1]) & 0x3F) << 6) | (ord($utf_char[2]) & 0x3F);		case 4:			return ((ord($utf_char[0]) & 0x07) << 18) | ((ord($utf_char[1]) & 0x3F) << 12) | ((ord($utf_char[2]) & 0x3F) << 6) | (ord($utf_char[3]) & 0x3F);		default:			die('UTF-8 chars can only be 1-4 bytes long');	}}/*** Return a UTF string formed from a sequence of codepoints in hexadecimal** @param	string	$seq		Sequence of codepoints, separated with a space* @return	string				UTF-8 string*/function hexseq_to_utf($seq){	return implode('', array_map('hex_to_utf', explode(' ', $seq)));}/*** Convert a codepoint in hexadecimal to a UTF-8 char** @param	string	$hex		Codepoint, in hexadecimal* @return	string				UTF-8 char*/function hex_to_utf($hex){	return cp_to_utf(hexdec($hex));}/*** Convert a codepoint to a UTF-8 char** @param	integer	$cp			Unicode codepoint* @return	string				UTF-8 string*/function cp_to_utf($cp){	if ($cp > 0xFFFF)	{		return chr(0xF0 | ($cp >> 18)) . chr(0x80 | (($cp >> 12) & 0x3F)) . chr(0x80 | (($cp >> 6) & 0x3F)) . chr(0x80 | ($cp & 0x3F));	}	else if ($cp > 0x7FF)	{		return chr(0xE0 | ($cp >> 12)) . chr(0x80 | (($cp >> 6) & 0x3F)) . chr(0x80 | ($cp & 0x3F));	}	else if ($cp > 0x7F)	{		return chr(0xC0 | ($cp >> 6)) . chr(0x80 | ($cp & 0x3F));	}	else	{		return chr($cp);	}}
<?php/**** @package ucp* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @ignore*/if (!defined('IN_PHPBB')){	exit;}/*** Execute message options*/function message_options($id, $mode, $global_privmsgs_rules, $global_rule_conditions){	global $phpbb_root_path, $phpEx, $user, $template, $auth, $config, $db;	$redirect_url = append_sid("{$phpbb_root_path}ucp.$phpEx", "i=pm&amp;mode=options");	add_form_key('ucp_pm_options');	// Change "full folder" setting - what to do if folder is full	if (isset($_POST['fullfolder']))	{		check_form_key('ucp_pm_options', $config['form_token_lifetime'], $redirect_url);		$full_action = request_var('full_action', 0);		$set_folder_id = 0;		switch ($full_action)		{			case 1:				$set_folder_id = FULL_FOLDER_DELETE;			break;			case 2:				$set_folder_id = request_var('full_move_to', PRIVMSGS_INBOX);			break;			case 3:				$set_folder_id = FULL_FOLDER_HOLD;			break;			default:				$full_action = 0;			break;		}		if ($full_action)		{			$sql = 'UPDATE ' . USERS_TABLE . '				SET user_full_folder = ' . $set_folder_id . '				WHERE user_id = ' . $user->data['user_id'];			$db->sql_query($sql);			$user->data['user_full_folder'] = $set_folder_id;			$message = $user->lang['FULL_FOLDER_OPTION_CHANGED'] . '<br /><br />' . sprintf($user->lang['RETURN_UCP'], '<a href="' . $redirect_url . '">', '</a>');			meta_refresh(3, $redirect_url);			trigger_error($message);		}	}		// Add Folder	if (isset($_POST['addfolder']))	{		if (check_form_key('ucp_pm_options'))		{			$folder_name = utf8_normalize_nfc(request_var('foldername', '', true));			$msg = '';			if ($folder_name)			{				$sql = 'SELECT folder_name					FROM ' . PRIVMSGS_FOLDER_TABLE . "					WHERE folder_name = '" . $db->sql_escape($folder_name) . "'						AND user_id = " . $user->data['user_id'];				$result = $db->sql_query_limit($sql, 1);				$row = $db->sql_fetchrow($result);				$db->sql_freeresult($result);				if ($row)				{					trigger_error(sprintf($user->lang['FOLDER_NAME_EXIST'], $folder_name));				}				$sql = 'SELECT COUNT(folder_id) as num_folder					FROM ' . PRIVMSGS_FOLDER_TABLE . '						WHERE user_id = ' . $user->data['user_id'];				$result = $db->sql_query($sql);				$num_folder = (int) $db->sql_fetchfield('num_folder');				$db->sql_freeresult($result);				if ($num_folder >= $config['pm_max_boxes'])				{					trigger_error('MAX_FOLDER_REACHED');				}				$sql = 'INSERT INTO ' . PRIVMSGS_FOLDER_TABLE . ' ' . $db->sql_build_array('INSERT', array(					'user_id'		=> (int) $user->data['user_id'],					'folder_name'	=> $folder_name)				);				$db->sql_query($sql);				$msg = $user->lang['FOLDER_ADDED'];			}			else			{				$msg = $user->lang['FOLDER_NAME_EMPTY'];			}		}		else		{			$msg = $user->lang['FORM_INVALID'];		}		$message = $msg . '<br /><br />' . sprintf($user->lang['RETURN_UCP'], '<a href="' . $redirect_url . '">', '</a>');		meta_refresh(3, $redirect_url);		trigger_error($message);	}	// Rename folder	if (isset($_POST['rename_folder']))	{		if (check_form_key('ucp_pm_options'))		{			$new_folder_name = utf8_normalize_nfc(request_var('new_folder_name', '', true));			$rename_folder_id= request_var('rename_folder_id', 0);			if (!$new_folder_name)			{				trigger_error('NO_NEW_FOLDER_NAME');			}			// Select custom folder			$sql = 'SELECT folder_name, pm_count				FROM ' . PRIVMSGS_FOLDER_TABLE . "				WHERE user_id = {$user->data['user_id']}					AND folder_id = $rename_folder_id";			$result = $db->sql_query_limit($sql, 1);			$folder_row = $db->sql_fetchrow($result);			$db->sql_freeresult($result);			if (!$folder_row)			{				trigger_error('CANNOT_RENAME_FOLDER');			}			$sql = 'UPDATE ' . PRIVMSGS_FOLDER_TABLE . "				SET folder_name = '" . $db->sql_escape($new_folder_name) . "'				WHERE folder_id = $rename_folder_id					AND user_id = {$user->data['user_id']}";			$db->sql_query($sql);			$msg = $user->lang['FOLDER_RENAMED'];		}		else		{			$msg = $user->lang['FORM_INVALID'];		}		$message = $msg . '<br /><br />' . sprintf($user->lang['RETURN_UCP'], '<a href="' . $redirect_url . '">', '</a>');		meta_refresh(3, $redirect_url);		trigger_error($message);	}	// Remove Folder	if (isset($_POST['remove_folder']))	{		$remove_folder_id = request_var('remove_folder_id', 0);		// Default to "move all messages to inbox"		$remove_action = request_var('remove_action', 1);		$move_to = request_var('move_to', PRIVMSGS_INBOX);		// Move to same folder?		if ($remove_action == 1 && $remove_folder_id == $move_to)		{			trigger_error('CANNOT_MOVE_TO_SAME_FOLDER');		}		// Select custom folder		$sql = 'SELECT folder_name, pm_count			FROM ' . PRIVMSGS_FOLDER_TABLE . "			WHERE user_id = {$user->data['user_id']}				AND folder_id = $remove_folder_id";		$result = $db->sql_query_limit($sql, 1);		$folder_row = $db->sql_fetchrow($result);		$db->sql_freeresult($result);		if (!$folder_row)		{			trigger_error('CANNOT_REMOVE_FOLDER');		}		$s_hidden_fields = array(			'remove_folder_id'	=> $remove_folder_id,			'remove_action'		=> $remove_action,			'move_to'			=> $move_to,			'remove_folder'		=> 1		);		// Do we need to confirm?		if (confirm_box(true))		{			// Gather message ids			$sql = 'SELECT msg_id				FROM ' . PRIVMSGS_TO_TABLE . '				WHERE user_id = ' . $user->data['user_id'] . "					AND folder_id = $remove_folder_id";			$result = $db->sql_query($sql);			$msg_ids = array();			while ($row = $db->sql_fetchrow($result))			{				$msg_ids[] = (int) $row['msg_id'];			}			$db->sql_freeresult($result);			// First of all, copy all messages to another folder... or delete all messages			switch ($remove_action)			{				// Move Messages				case 1:					$num_moved = move_pm($user->data['user_id'], $user->data['message_limit'], $msg_ids, $move_to, $remove_folder_id);										// Something went wrong, only partially moved?					if ($num_moved != $folder_row['pm_count'])					{						trigger_error(sprintf($user->lang['MOVE_PM_ERROR'], $num_moved, $folder_row['pm_count']));					}				break;				// Remove Messages				case 2:					delete_pm($user->data['user_id'], $msg_ids, $remove_folder_id);				break;			}			// Remove folder			$sql = 'DELETE FROM ' . PRIVMSGS_FOLDER_TABLE . "				WHERE user_id = {$user->data['user_id']}					AND folder_id = $remove_folder_id";			$db->sql_query($sql);			// Check full folder option. If the removed folder has been specified as destination switch back to inbox			if ($user->data['user_full_folder'] == $remove_folder_id)			{				$sql = 'UPDATE ' . USERS_TABLE . '					SET user_full_folder = ' . PRIVMSGS_INBOX . '					WHERE user_id = ' . $user->data['user_id'];				$db->sql_query($sql);				$user->data['user_full_folder'] = PRIVMSGS_INBOX;			}			// Now make sure the folder is not used for rules			// We assign another folder id (the one the messages got moved to) or assign the INBOX (to not have to remove any rule)			$sql = 'UPDATE ' . PRIVMSGS_RULES_TABLE . ' SET rule_folder_id = ';			$sql .= ($remove_action == 1) ? $move_to : PRIVMSGS_INBOX;			$sql .= ' WHERE rule_folder_id = ' . $remove_folder_id;			$db->sql_query($sql);			$meta_info = append_sid("{$phpbb_root_path}ucp.$phpEx", "i=pm&amp;mode=$mode");			$message = $user->lang['FOLDER_REMOVED'];			meta_refresh(3, $meta_info);			$message .= '<br /><br />' . sprintf($user->lang['RETURN_UCP'], '<a href="' . $meta_info . '">', '</a>');			trigger_error($message);		}		else		{			confirm_box(false, 'REMOVE_FOLDER', build_hidden_fields($s_hidden_fields));		}	}	// Add Rule	if (isset($_POST['add_rule']))	{		if (check_form_key('ucp_pm_options'))		{			$check_option	= request_var('check_option', 0);			$rule_option	= request_var('rule_option', 0);			$cond_option	= request_var('cond_option', '');			$action_option	= explode('|', request_var('action_option', ''));			$rule_string	= ($cond_option != 'none') ? utf8_normalize_nfc(request_var('rule_string', '', true)) : '';			$rule_user_id	= ($cond_option != 'none') ? request_var('rule_user_id', 0) : 0;			$rule_group_id	= ($cond_option != 'none') ? request_var('rule_group_id', 0) : 0;			$action = (int) $action_option[0];			$folder_id = (int) $action_option[1];			if (!$action || !$check_option || !$rule_option || !$cond_option || ($cond_option != 'none' && !$rule_string))			{				trigger_error('RULE_NOT_DEFINED');			}			if (($cond_option == 'user' && !$rule_user_id) || ($cond_option == 'group' && !$rule_group_id))			{				trigger_error('RULE_NOT_DEFINED');			}			$rule_ary = array(				'user_id'			=> $user->data['user_id'],				'rule_check'		=> $check_option,				'rule_connection'	=> $rule_option,				'rule_string'		=> $rule_string,				'rule_user_id'		=> $rule_user_id,				'rule_group_id'		=> $rule_group_id,				'rule_action'		=> $action,				'rule_folder_id'	=> $folder_id			);			$sql = 'SELECT rule_id				FROM ' . PRIVMSGS_RULES_TABLE . '				WHERE ' . $db->sql_build_array('SELECT', $rule_ary);			$result = $db->sql_query($sql);			$row = $db->sql_fetchrow($result);			$db->sql_freeresult($result);			if ($row)			{				trigger_error('RULE_ALREADY_DEFINED');			}			$sql = 'INSERT INTO ' . PRIVMSGS_RULES_TABLE . ' ' . $db->sql_build_array('INSERT', $rule_ary);			$db->sql_query($sql);			// Update users message rules			$sql = 'UPDATE ' . USERS_TABLE . '				SET user_message_rules = 1				WHERE user_id = ' . $user->data['user_id'];			$db->sql_query($sql);			$msg = $user->lang['RULE_ADDED'];		}		else		{			$msg = $user->lang['FORM_INVALID'];		}		$message = $msg . '<br /><br />' . sprintf($user->lang['RETURN_UCP'], '<a href="' . $redirect_url . '">', '</a>');		meta_refresh(3, $redirect_url);		trigger_error($message);	}	// Remove Rule	if (isset($_POST['delete_rule']) && !isset($_POST['cancel']))	{		$delete_id = array_keys(request_var('delete_rule', array(0 => 0)));		$delete_id = (!empty($delete_id[0])) ? $delete_id[0] : 0;		if (!$delete_id)		{			redirect(append_sid("{$phpbb_root_path}ucp.$phpEx", 'i=pm&amp;mode=' . $mode));		}		// Do we need to confirm?		if (confirm_box(true))		{			$sql = 'DELETE FROM ' . PRIVMSGS_RULES_TABLE . '				WHERE user_id = ' . $user->data['user_id'] . "					AND rule_id = $delete_id";			$db->sql_query($sql);			$meta_info = append_sid("{$phpbb_root_path}ucp.$phpEx", 'i=pm&amp;mode=' . $mode);			$message = $user->lang['RULE_DELETED'];			// Reset user_message_rules if no more assigned			$sql = 'SELECT rule_id				FROM ' . PRIVMSGS_RULES_TABLE . '				WHERE user_id = ' . $user->data['user_id'];			$result = $db->sql_query_limit($sql, 1);			$row = $db->sql_fetchrow($result);			$db->sql_freeresult($result);			// Update users message rules			if (!$row)			{				$sql = 'UPDATE ' . USERS_TABLE . '					SET user_message_rules = 0					WHERE user_id = ' . $user->data['user_id'];				$db->sql_query($sql);			}			meta_refresh(3, $meta_info);			$message .= '<br /><br />' . sprintf($user->lang['RETURN_UCP'], '<a href="' . $meta_info . '">', '</a>');			trigger_error($message);		}		else		{			confirm_box(false, 'DELETE_RULE', build_hidden_fields(array('delete_rule' => array($delete_id => 1))));		}	}	$folder = array();	$sql = 'SELECT COUNT(msg_id) as num_messages		FROM ' . PRIVMSGS_TO_TABLE . '		WHERE user_id = ' . $user->data['user_id'] . '			AND folder_id = ' . PRIVMSGS_INBOX;	$result = $db->sql_query($sql);	$num_messages = (int) $db->sql_fetchfield('num_messages');	$db->sql_freeresult($result);		$folder[PRIVMSGS_INBOX] = array(		'folder_name'		=> $user->lang['PM_INBOX'],		'message_status'	=> sprintf($user->lang['FOLDER_MESSAGE_STATUS'], $num_messages, $user->data['message_limit'])	);	$sql = 'SELECT folder_id, folder_name, pm_count		FROM ' . PRIVMSGS_FOLDER_TABLE . '			WHERE user_id = ' . $user->data['user_id'];	$result = $db->sql_query($sql);	$num_user_folder = 0;	while ($row = $db->sql_fetchrow($result))	{		$num_user_folder++;		$folder[$row['folder_id']] = array(			'folder_name'		=> $row['folder_name'],			'message_status'	=> sprintf($user->lang['FOLDER_MESSAGE_STATUS'], $row['pm_count'], $user->data['message_limit'])		);	}	$db->sql_freeresult($result);	$s_full_folder_options = $s_to_folder_options = $s_folder_options = '';	if ($user->data['user_full_folder'] == FULL_FOLDER_NONE)	{		// -3 here to let the correct folder id be selected		$to_folder_id = $config['full_folder_action'] - 3;	}	else	{		$to_folder_id = $user->data['user_full_folder'];	}	foreach ($folder as $folder_id => $folder_ary)	{		$s_full_folder_options .= '<option value="' . $folder_id . '"' . (($user->data['user_full_folder'] == $folder_id) ? ' selected="selected"' : '') . '>' . $folder_ary['folder_name'] . ' (' . $folder_ary['message_status'] . ')</option>';		$s_to_folder_options .= '<option value="' . $folder_id . '"' . (($to_folder_id == $folder_id) ? ' selected="selected"' : '') . '>' . $folder_ary['folder_name'] . ' (' . $folder_ary['message_status'] . ')</option>';		if ($folder_id != PRIVMSGS_INBOX)		{			$s_folder_options .= '<option value="' . $folder_id . '">' . $folder_ary['folder_name'] . ' (' . $folder_ary['message_status'] . ')</option>';		}	}	$s_delete_checked = ($user->data['user_full_folder'] == FULL_FOLDER_DELETE) ? ' checked="checked"' : '';	$s_hold_checked = ($user->data['user_full_folder'] == FULL_FOLDER_HOLD) ? ' checked="checked"' : '';	$s_move_checked = ($user->data['user_full_folder'] >= 0) ? ' checked="checked"' : '';	if ($user->data['user_full_folder'] == FULL_FOLDER_NONE)	{		switch ($config['full_folder_action'])		{			case 1:				$s_delete_checked = ' checked="checked"';			break;			case 2:				$s_hold_checked = ' checked="checked"';			break;		}	}	$template->assign_vars(array(		'S_FULL_FOLDER_OPTIONS'	=> $s_full_folder_options,		'S_TO_FOLDER_OPTIONS'	=> $s_to_folder_options,		'S_FOLDER_OPTIONS'		=> $s_folder_options,		'S_DELETE_CHECKED'		=> $s_delete_checked,		'S_HOLD_CHECKED'		=> $s_hold_checked,		'S_MOVE_CHECKED'		=> $s_move_checked,		'S_MAX_FOLDER_REACHED'	=> ($num_user_folder >= $config['pm_max_boxes']) ? true : false,		'S_MAX_FOLDER_ZERO'		=> ($config['pm_max_boxes'] == 0) ? true : false,		'DEFAULT_ACTION'		=> ($config['full_folder_action'] == 1) ? $user->lang['DELETE_OLDEST_MESSAGES'] : $user->lang['HOLD_NEW_MESSAGES'],		'U_FIND_USERNAME'		=> append_sid("{$phpbb_root_path}memberlist.$phpEx", 'mode=searchuser&amp;form=ucp&amp;field=rule_string&amp;select_single=true'),	));	$rule_lang = $action_lang = $check_lang = array();	// Build all three language arrays	preg_replace('#^((RULE|ACTION|CHECK)_([A-Z0-9_]+))$#e', "\${strtolower('\\2') . '_lang'}[constant('\\1')] = \$user->lang['PM_\\2']['\\3']", array_keys(get_defined_constants()));	/*		Rule Ordering:			-> CHECK_* -> RULE_* [IN $global_privmsgs_rules:CHECK_*] -> [IF $rule_conditions[RULE_*] [|text|bool|user|group|own_group]] -> ACTION_*	*/	$check_option	= request_var('check_option', 0);	$rule_option	= request_var('rule_option', 0);	$cond_option	= request_var('cond_option', '');	$action_option	= request_var('action_option', '');	$back = (isset($_REQUEST['back'])) ? request_var('back', array('' => 0)) : array();	if (sizeof($back))	{		if ($action_option)		{			$action_option = '';		}		else if ($cond_option)		{			$cond_option = '';		}		else if ($rule_option)		{			$rule_option = 0;		}		else if ($check_option)		{			$check_option = 0;		}	}	if (isset($back['action']) && $cond_option == 'none')	{		$back['cond'] = true;	}	// Check	if (!isset($global_privmsgs_rules[$check_option]))	{		$check_option = 0;	}	define_check_option(($check_option && !isset($back['rule'])) ? true : false, $check_option, $check_lang);	if ($check_option && !isset($back['rule']))	{		define_rule_option(($rule_option && !isset($back['cond'])) ? true : false, $rule_option, $rule_lang, $global_privmsgs_rules[$check_option]);	}	if ($rule_option && !isset($back['cond']))	{		if (!isset($global_rule_conditions[$rule_option]))		{			$cond_option = 'none';			$template->assign_var('NONE_CONDITION', true);		}		else		{			define_cond_option(($cond_option && !isset($back['action'])) ? true : false, $cond_option, $rule_option, $global_rule_conditions);		}	}	if ($cond_option && !isset($back['action']))	{		define_action_option(false, $action_option, $action_lang, $folder);	}	show_defined_rules($user->data['user_id'], $check_lang, $rule_lang, $action_lang, $folder);}/*** Defining check option for message rules*/function define_check_option($hardcoded, $check_option, $check_lang){	global $template;	$s_check_options = '';	if (!$hardcoded)	{		foreach ($check_lang as $value => $lang)		{			$s_check_options .= '<option value="' . $value . '"' . (($value == $check_option) ? ' selected="selected"' : '') . '>' . $lang . '</option>';		}	}	$template->assign_vars(array(		'S_CHECK_DEFINED'	=> true,		'S_CHECK_SELECT'	=> ($hardcoded) ? false : true,		'CHECK_CURRENT'		=> isset($check_lang[$check_option]) ? $check_lang[$check_option] : '',		'S_CHECK_OPTIONS'	=> $s_check_options,		'CHECK_OPTION'		=> $check_option)	);}/*** Defining action option for message rules*/function define_action_option($hardcoded, $action_option, $action_lang, $folder){	global $db, $template, $user;	$l_action = $s_action_options = '';	if ($hardcoded)	{		$option = explode('|', $action_option);		$action = (int) $option[0];		$folder_id = (int) $option[1];		$l_action = $action_lang[$action];		if ($action == ACTION_PLACE_INTO_FOLDER)		{			$l_action .= ' -> ' . $folder[$folder_id]['folder_name'];		}	}	else	{		foreach ($action_lang as $action => $lang)		{			if ($action == ACTION_PLACE_INTO_FOLDER)			{				foreach ($folder as $folder_id => $folder_ary)				{					$s_action_options .= '<option value="' . $action . '|' . $folder_id . '"' . (($action_option == $action . '|' . $folder_id) ? ' selected="selected"' : '') . '>' . $lang . ' -> ' . $folder_ary['folder_name'] . '</option>';				}			}			else			{				$s_action_options .= '<option value="' . $action . '|0"' . (($action_option == $action . '|0') ? ' selected="selected"' : '') . '>' . $lang . '</option>';			}		}	}	$template->assign_vars(array(		'S_ACTION_DEFINED'	=> true,		'S_ACTION_SELECT'	=> ($hardcoded) ? false : true,		'ACTION_CURRENT'	=> $l_action,		'S_ACTION_OPTIONS'	=> $s_action_options,		'ACTION_OPTION'		=> $action_option)	);}/*** Defining rule option for message rules*/function define_rule_option($hardcoded, $rule_option, $rule_lang, $check_ary){	global $template;	global $module;	$exclude = array();	if (!$module->loaded('zebra', 'friends'))	{		$exclude[RULE_IS_FRIEND] = true;	}	if (!$module->loaded('zebra', 'foes'))	{		$exclude[RULE_IS_FOE] = true;	}	$s_rule_options = '';	if (!$hardcoded)	{		foreach ($check_ary as $value => $_check)		{			if (isset($exclude[$value]))			{				continue;			}			$s_rule_options .= '<option value="' . $value . '"' . (($value == $rule_option) ? ' selected="selected"' : '') . '>' . $rule_lang[$value] . '</option>';		}	}	$template->assign_vars(array(		'S_RULE_DEFINED'	=> true,		'S_RULE_SELECT'		=> !$hardcoded,		'RULE_CURRENT'		=> isset($rule_lang[$rule_option]) ? $rule_lang[$rule_option] : '',		'S_RULE_OPTIONS'	=> $s_rule_options,		'RULE_OPTION'		=> $rule_option)	);}/*** Defining condition option for message rules*/function define_cond_option($hardcoded, $cond_option, $rule_option, $global_rule_conditions){	global $db, $template, $auth, $user;		$template->assign_vars(array(		'S_COND_DEFINED'	=> true,		'S_COND_SELECT'		=> (!$hardcoded && isset($global_rule_conditions[$rule_option])) ? true : false)	);	// Define COND_OPTION	if (!isset($global_rule_conditions[$rule_option]))	{		$template->assign_vars(array(			'COND_OPTION'	=> 'none',			'COND_CURRENT'	=> false)		);		return;	}	// Define Condition	$condition = $global_rule_conditions[$rule_option];	$current_value = '';	switch ($condition)	{		case 'text':			$rule_string = utf8_normalize_nfc(request_var('rule_string', '', true));						$template->assign_vars(array(				'S_TEXT_CONDITION'	=> true,				'CURRENT_STRING'	=> $rule_string,				'CURRENT_USER_ID'	=> 0,				'CURRENT_GROUP_ID'	=> 0)			);			$current_value = $rule_string;		break;		case 'user':			$rule_user_id = request_var('rule_user_id', 0);			$rule_string = utf8_normalize_nfc(request_var('rule_string', '', true));						if ($rule_string && !$rule_user_id)			{				$sql = 'SELECT user_id					FROM ' . USERS_TABLE . "					WHERE username_clean = '" . $db->sql_escape(utf8_clean_string($rule_string)) . "'";				$result = $db->sql_query($sql);				$rule_user_id = (int) $db->sql_fetchfield('user_id');				$db->sql_freeresult($result);				if (!$rule_user_id)				{					$rule_string = '';				}			}			else if (!$rule_string && $rule_user_id)			{				$sql = 'SELECT username					FROM ' . USERS_TABLE . "					WHERE user_id = $rule_user_id";				$result = $db->sql_query($sql);				$rule_string = $db->sql_fetchfield('username');				$db->sql_freeresult($result);				if (!$rule_string)				{					$rule_user_id = 0;				}			}			$template->assign_vars(array(				'S_USER_CONDITION'	=> true,				'CURRENT_STRING'	=> $rule_string,				'CURRENT_USER_ID'	=> $rule_user_id,				'CURRENT_GROUP_ID'	=> 0)			);			$current_value = $rule_string;		break;		case 'group':			$rule_group_id = request_var('rule_group_id', 0);			$rule_string = utf8_normalize_nfc(request_var('rule_string', '', true));			$sql = 'SELECT g.group_id, g.group_name, g.group_type					FROM ' . GROUPS_TABLE . ' g ';			if (!$auth->acl_gets('a_group', 'a_groupadd', 'a_groupdel'))			{				$sql .= 'LEFT JOIN ' . USER_GROUP_TABLE . ' ug					ON (						g.group_id = ug.group_id						AND ug.user_id = ' . $user->data['user_id'] . '						AND ug.user_pending = 0					)					WHERE (ug.user_id = ' . $user->data['user_id'] . ' OR g.group_type <> ' . GROUP_HIDDEN . ')					AND';			}			else			{				$sql .= 'WHERE';			}						$sql .= " (g.group_name NOT IN ('GUESTS', 'BOTS') OR g.group_type <> " . GROUP_SPECIAL . ')					ORDER BY g.group_type DESC, g.group_name ASC';						$result = $db->sql_query($sql);			$s_group_options = '';			while ($row = $db->sql_fetchrow($result))			{				if ($rule_group_id && ($row['group_id'] == $rule_group_id))				{					$rule_string = (($row['group_type'] == GROUP_SPECIAL) ? $user->lang['G_' . $row['group_name']] : $row['group_name']);				}				$s_class	= ($row['group_type'] == GROUP_SPECIAL) ? ' class="sep"' : '';				$s_selected	= ($row['group_id'] == $rule_group_id) ? ' selected="selected"' : '';								$s_group_options .= '<option value="' . $row['group_id'] . '"' . $s_class . $s_selected . '>' . (($row['group_type'] == GROUP_SPECIAL) ? $user->lang['G_' . $row['group_name']] : $row['group_name']) . '</option>';			}			$db->sql_freeresult($result);			$template->assign_vars(array(				'S_GROUP_CONDITION'	=> true,				'S_GROUP_OPTIONS'	=> $s_group_options,				'CURRENT_STRING'	=> $rule_string,				'CURRENT_USER_ID'	=> 0,				'CURRENT_GROUP_ID'	=> $rule_group_id)			);			$current_value = $rule_string;		break;		default:			return;	}	$template->assign_vars(array(		'COND_OPTION'	=> $condition,		'COND_CURRENT'	=> $current_value)	);}/*** Display defined message rules*/function show_defined_rules($user_id, $check_lang, $rule_lang, $action_lang, $folder){	global $db, $template;	$sql = 'SELECT *		FROM ' . PRIVMSGS_RULES_TABLE . '		WHERE user_id = ' . $user_id . '		ORDER BY rule_id ASC';	$result = $db->sql_query($sql);		$count = 0;	while ($row = $db->sql_fetchrow($result))	{		$template->assign_block_vars('rule', array(			'COUNT'		=> ++$count,			'RULE_ID'	=> $row['rule_id'],			'CHECK'		=> $check_lang[$row['rule_check']],			'RULE'		=> $rule_lang[$row['rule_connection']],			'STRING'	=> $row['rule_string'],			'ACTION'	=> $action_lang[$row['rule_action']],			'FOLDER'	=> ($row['rule_action'] == ACTION_PLACE_INTO_FOLDER) ? $folder[$row['rule_folder_id']]['folder_name'] : '')		);	}	$db->sql_freeresult($result);}?>
<?php/**** @package dbal* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @ignore*/if (!defined('IN_PHPBB')){	exit;}include_once($phpbb_root_path . 'includes/db/dbal.' . $phpEx);/*** Unified ODBC functions* Unified ODBC functions support any database having ODBC driver, for example Adabas D, IBM DB2, iODBC, Solid, Sybase SQL Anywhere...* Here we only support MSSQL Server 2000+ because of the provided schema** @note number of bytes returned for returning data depends on odbc.defaultlrl php.ini setting.* If it is limited to 4K for example only 4K of data is returned max, resulting in incomplete theme data for example.* @note odbc.defaultbinmode may affect UTF8 characters** @package dbal*/class dbal_mssql_odbc extends dbal{	var $last_query_text = '';	/**	* Connect to server	*/	function sql_connect($sqlserver, $sqluser, $sqlpassword, $database, $port = false, $persistency = false, $new_link = false)	{		$this->persistency = $persistency;		$this->user = $sqluser;		$this->dbname = $database;		$port_delimiter = (defined('PHP_OS') && substr(PHP_OS, 0, 3) === 'WIN') ? ',' : ':';		$this->server = $sqlserver . (($port) ? $port_delimiter . $port : '');		$max_size = @ini_get('odbc.defaultlrl');		if (!empty($max_size))		{			$unit = strtolower(substr($max_size, -1, 1));			$max_size = (int) $max_size;			if ($unit == 'k')			{				$max_size = floor($max_size / 1024);			}			else if ($unit == 'g')			{				$max_size *= 1024;			}			else if (is_numeric($unit))			{				$max_size = floor((int) ($max_size . $unit) / 1048576);			}			$max_size = max(8, $max_size) . 'M';			@ini_set('odbc.defaultlrl', $max_size);		}		$this->db_connect_id = ($this->persistency) ? @odbc_pconnect($this->server, $this->user, $sqlpassword) : @odbc_connect($this->server, $this->user, $sqlpassword);		return ($this->db_connect_id) ? $this->db_connect_id : $this->sql_error('');	}	/**	* Version information about used database	* @param bool $raw if true, only return the fetched sql_server_version	* @param bool $use_cache If true, it is safe to retrieve the value from the cache	* @return string sql server version	*/	function sql_server_info($raw = false, $use_cache = true)	{		global $cache;		if (!$use_cache || empty($cache) || ($this->sql_server_version = $cache->get('mssqlodbc_version')) === false)		{			$result_id = @odbc_exec($this->db_connect_id, "SELECT SERVERPROPERTY('productversion'), SERVERPROPERTY('productlevel'), SERVERPROPERTY('edition')");			$row = false;			if ($result_id)			{				$row = @odbc_fetch_array($result_id);				@odbc_free_result($result_id);			}			$this->sql_server_version = ($row) ? trim(implode(' ', $row)) : 0;			if (!empty($cache) && $use_cache)			{				$cache->put('mssqlodbc_version', $this->sql_server_version);			}		}		if ($raw)		{			return $this->sql_server_version;		}		return ($this->sql_server_version) ? 'MSSQL (ODBC)<br />' . $this->sql_server_version : 'MSSQL (ODBC)';	}	/**	* SQL Transaction	* @access private	*/	function _sql_transaction($status = 'begin')	{		switch ($status)		{			case 'begin':				return @odbc_exec($this->db_connect_id, 'BEGIN TRANSACTION');			break;			case 'commit':				return @odbc_exec($this->db_connect_id, 'COMMIT TRANSACTION');			break;			case 'rollback':				return @odbc_exec($this->db_connect_id, 'ROLLBACK TRANSACTION');			break;		}		return true;	}	/**	* Base query method	*	* @param	string	$query		Contains the SQL query which shall be executed	* @param	int		$cache_ttl	Either 0 to avoid caching or the time in seconds which the result shall be kept in cache	* @return	mixed				When casted to bool the returned value returns true on success and false on failure	*	* @access	public	*/	function sql_query($query = '', $cache_ttl = 0)	{		if ($query != '')		{			global $cache;			// EXPLAIN only in extra debug mode			if (defined('DEBUG_EXTRA'))			{				$this->sql_report('start', $query);			}			$this->last_query_text = $query;			$this->query_result = ($cache_ttl && method_exists($cache, 'sql_load')) ? $cache->sql_load($query) : false;			$this->sql_add_num_queries($this->query_result);			if ($this->query_result === false)			{				if (($this->query_result = @odbc_exec($this->db_connect_id, $query)) === false)				{					$this->sql_error($query);				}				if (defined('DEBUG_EXTRA'))				{					$this->sql_report('stop', $query);				}				if ($cache_ttl && method_exists($cache, 'sql_save'))				{					$this->open_queries[(int) $this->query_result] = $this->query_result;					$cache->sql_save($query, $this->query_result, $cache_ttl);				}				else if (strpos($query, 'SELECT') === 0 && $this->query_result)				{					$this->open_queries[(int) $this->query_result] = $this->query_result;				}			}			else if (defined('DEBUG_EXTRA'))			{				$this->sql_report('fromcache', $query);			}		}		else		{			return false;		}		return $this->query_result;	}	/**	* Build LIMIT query	*/	function _sql_query_limit($query, $total, $offset = 0, $cache_ttl = 0)	{		$this->query_result = false;		// Since TOP is only returning a set number of rows we won't need it if total is set to 0 (return all rows)		if ($total)		{			// We need to grab the total number of rows + the offset number of rows to get the correct result			if (strpos($query, 'SELECT DISTINCT') === 0)			{				$query = 'SELECT DISTINCT TOP ' . ($total + $offset) . ' ' . substr($query, 15);			}			else			{				$query = 'SELECT TOP ' . ($total + $offset) . ' ' . substr($query, 6);			}		}		$result = $this->sql_query($query, $cache_ttl);		// Seek by $offset rows		if ($offset)		{			$this->sql_rowseek($offset, $result);		}		return $result;	}	/**	* Return number of affected rows	*/	function sql_affectedrows()	{		return ($this->db_connect_id) ? @odbc_num_rows($this->query_result) : false;	}	/**	* Fetch current row	* @note number of bytes returned depends on odbc.defaultlrl php.ini setting. If it is limited to 4K for example only 4K of data is returned max.	*/	function sql_fetchrow($query_id = false, $debug = false)	{		global $cache;		if ($query_id === false)		{			$query_id = $this->query_result;		}		if (isset($cache->sql_rowset[$query_id]))		{			return $cache->sql_fetchrow($query_id);		}		return ($query_id !== false) ? @odbc_fetch_array($query_id) : false;	}	/**	* Seek to given row number	* rownum is zero-based	*/	function sql_rowseek($rownum, &$query_id)	{		global $cache;		if ($query_id === false)		{			$query_id = $this->query_result;		}		if (isset($cache->sql_rowset[$query_id]))		{			return $cache->sql_rowseek($rownum, $query_id);		}		if ($query_id === false)		{			return false;		}		$this->sql_freeresult($query_id);		$query_id = $this->sql_query($this->last_query_text);		if ($query_id === false)		{			return false;		}		// We do not fetch the row for rownum == 0 because then the next resultset would be the second row		for ($i = 0; $i < $rownum; $i++)		{			if (!$this->sql_fetchrow($query_id))			{				return false;			}		}		return true;	}	/**	* Get last inserted id after insert statement	*/	function sql_nextid()	{		$result_id = @odbc_exec($this->db_connect_id, 'SELECT @@IDENTITY');		if ($result_id)		{			if (@odbc_fetch_array($result_id))			{				$id = @odbc_result($result_id, 1);				@odbc_free_result($result_id);				return $id;			}			@odbc_free_result($result_id);		}		return false;	}	/**	* Free sql result	*/	function sql_freeresult($query_id = false)	{		global $cache;		if ($query_id === false)		{			$query_id = $this->query_result;		}		if (isset($cache->sql_rowset[$query_id]))		{			return $cache->sql_freeresult($query_id);		}		if (isset($this->open_queries[(int) $query_id]))		{			unset($this->open_queries[(int) $query_id]);			return @odbc_free_result($query_id);		}		return false;	}	/**	* Escape string used in sql query	*/	function sql_escape($msg)	{		return str_replace(array("'", "\0"), array("''", ''), $msg);	}	/**	* Build LIKE expression	* @access private	*/	function _sql_like_expression($expression)	{		return $expression . " ESCAPE '\\'";	}	/**	* Build db-specific query data	* @access private	*/	function _sql_custom_build($stage, $data)	{		return $data;	}	/**	* return sql error array	* @access private	*/	function _sql_error()	{		return array(			'message'	=> @odbc_errormsg(),			'code'		=> @odbc_error()		);	}	/**	* Close sql connection	* @access private	*/	function _sql_close()	{		return @odbc_close($this->db_connect_id);	}	/**	* Build db-specific report	* @access private	*/	function _sql_report($mode, $query = '')	{		switch ($mode)		{			case 'start':			break;			case 'fromcache':				$endtime = explode(' ', microtime());				$endtime = $endtime[0] + $endtime[1];				$result = @odbc_exec($this->db_connect_id, $query);				while ($void = @odbc_fetch_array($result))				{					// Take the time spent on parsing rows into account				}				@odbc_free_result($result);				$splittime = explode(' ', microtime());				$splittime = $splittime[0] + $splittime[1];				$this->sql_report('record_fromcache', $query, $endtime, $splittime);			break;		}	}}?>
<?php/**** @package mcp* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @ignore*/if (!defined('IN_PHPBB')){	exit;}/*** View topic in MCP*/function mcp_topic_view($id, $mode, $action){	global $phpEx, $phpbb_root_path, $config;	global $template, $db, $user, $auth, $cache;	$url = append_sid("{$phpbb_root_path}mcp.$phpEx?" . extra_url());	$user->add_lang('viewtopic');	$topic_id = request_var('t', 0);	$topic_info = get_topic_data(array($topic_id), false, true);	if (!sizeof($topic_info))	{		trigger_error('TOPIC_NOT_EXIST');	}	$topic_info = $topic_info[$topic_id];	// Set up some vars	$icon_id		= request_var('icon', 0);	$subject		= utf8_normalize_nfc(request_var('subject', '', true));	$start			= request_var('start', 0);	$sort_days_old	= request_var('st_old', 0);	$forum_id		= request_var('f', 0);	$to_topic_id	= request_var('to_topic_id', 0);	$to_forum_id	= request_var('to_forum_id', 0);	$sort			= isset($_POST['sort']) ? true : false;	$submitted_id_list	= request_var('post_ids', array(0));	$checked_ids = $post_id_list = request_var('post_id_list', array(0));	// Split Topic?	if ($action == 'split_all' || $action == 'split_beyond')	{		if (!$sort)		{			split_topic($action, $topic_id, $to_forum_id, $subject);		}		$action = 'split';	}	// Merge Posts?	if ($action == 'merge_posts')	{		if (!$sort)		{			merge_posts($topic_id, $to_topic_id);		}		$action = 'merge';	}	if ($action == 'split' && !$subject)	{		$subject = $topic_info['topic_title'];	}	// Approve posts?	if ($action == 'approve' && $auth->acl_get('m_approve', $topic_info['forum_id']))	{		include($phpbb_root_path . 'includes/mcp/mcp_queue.' . $phpEx);		include_once($phpbb_root_path . 'includes/functions_posting.' . $phpEx);		include_once($phpbb_root_path . 'includes/functions_messenger.' . $phpEx);		if (!sizeof($post_id_list))		{			trigger_error('NO_POST_SELECTED');		}		if (!$sort)		{			approve_post($post_id_list, $id, $mode);		}	}	// Jumpbox, sort selects and that kind of things	make_jumpbox($url . "&amp;i=$id&amp;mode=forum_view", $topic_info['forum_id'], false, 'm_', true);	$where_sql = ($action == 'reports') ? 'WHERE post_reported = 1 AND ' : 'WHERE';	$sort_days = $total = 0;	$sort_key = $sort_dir = '';	$sort_by_sql = $sort_order_sql = array();	mcp_sorting('viewtopic', $sort_days, $sort_key, $sort_dir, $sort_by_sql, $sort_order_sql, $total, $topic_info['forum_id'], $topic_id, $where_sql);	$limit_time_sql = ($sort_days) ? 'AND p.post_time >= ' . (time() - ($sort_days * 86400)) : '';	if ($total == -1)	{		if ($auth->acl_get('m_approve', $topic_info['forum_id']))		{			$total = $topic_info['topic_replies_real'] + 1;		}		else		{			$total = $topic_info['topic_replies'] + 1;		}	}	$posts_per_page = max(0, request_var('posts_per_page', intval($config['posts_per_page'])));	if ($posts_per_page == 0)	{		$posts_per_page = $total;	}	if ((!empty($sort_days_old) && $sort_days_old != $sort_days) || $total <= $posts_per_page)	{		$start = 0;	}	// Make sure $start is set to the last page if it exceeds the amount	if ($start < 0 || $start >= $total)	{		$start = ($start < 0) ? 0 : floor(($total - 1) / $posts_per_page) * $posts_per_page;	}	$sql = 'SELECT u.username, u.username_clean, u.user_colour, p.*		FROM ' . POSTS_TABLE . ' p, ' . USERS_TABLE . ' u		WHERE ' . (($action == 'reports') ? 'p.post_reported = 1 AND ' : '') . '			p.topic_id = ' . $topic_id . ' ' .			((!$auth->acl_get('m_approve', $topic_info['forum_id'])) ? ' AND p.post_approved = 1 ' : '') . '			AND p.poster_id = u.user_id ' .			$limit_time_sql . '		ORDER BY ' . $sort_order_sql;	$result = $db->sql_query_limit($sql, $posts_per_page, $start);	$rowset = $post_id_list = array();	$bbcode_bitfield = '';	while ($row = $db->sql_fetchrow($result))	{		$rowset[] = $row;		$post_id_list[] = $row['post_id'];		$bbcode_bitfield = $bbcode_bitfield | base64_decode($row['bbcode_bitfield']);	}	$db->sql_freeresult($result);	if ($bbcode_bitfield !== '')	{		include_once($phpbb_root_path . 'includes/bbcode.' . $phpEx);		$bbcode = new bbcode(base64_encode($bbcode_bitfield));	}	$topic_tracking_info = array();	// Get topic tracking info	if ($config['load_db_lastread'])	{		$tmp_topic_data = array($topic_id => $topic_info);		$topic_tracking_info = get_topic_tracking($topic_info['forum_id'], $topic_id, $tmp_topic_data, array($topic_info['forum_id'] => $topic_info['forum_mark_time']));		unset($tmp_topic_data);	}	else	{		$topic_tracking_info = get_complete_topic_tracking($topic_info['forum_id'], $topic_id);	}	$has_unapproved_posts = false;	// Grab extensions	$extensions = $attachments = array();	if ($topic_info['topic_attachment'] && sizeof($post_id_list))	{		$extensions = $cache->obtain_attach_extensions($topic_info['forum_id']);		// Get attachments...		if ($auth->acl_get('u_download') && $auth->acl_get('f_download', $topic_info['forum_id']))		{			$sql = 'SELECT *				FROM ' . ATTACHMENTS_TABLE . '				WHERE ' . $db->sql_in_set('post_msg_id', $post_id_list) . '					AND in_message = 0				ORDER BY filetime DESC, post_msg_id ASC';			$result = $db->sql_query($sql);			while ($row = $db->sql_fetchrow($result))			{				$attachments[$row['post_msg_id']][] = $row;			}			$db->sql_freeresult($result);		}	}	foreach ($rowset as $i => $row)	{		$message = $row['post_text'];		$post_subject = ($row['post_subject'] != '') ? $row['post_subject'] : $topic_info['topic_title'];		if ($row['bbcode_bitfield'])		{			$bbcode->bbcode_second_pass($message, $row['bbcode_uid'], $row['bbcode_bitfield']);		}		$message = bbcode_nl2br($message);		$message = smiley_text($message);		if (!empty($attachments[$row['post_id']]))		{			$update_count = array();			parse_attachments($topic_info['forum_id'], $message, $attachments[$row['post_id']], $update_count);		}		if (!$row['post_approved'])		{			$has_unapproved_posts = true;		}		$post_unread = (isset($topic_tracking_info[$topic_id]) && $row['post_time'] > $topic_tracking_info[$topic_id]) ? true : false;		$template->assign_block_vars('postrow', array(			'POST_AUTHOR_FULL'		=> get_username_string('full', $row['poster_id'], $row['username'], $row['user_colour'], $row['post_username']),			'POST_AUTHOR_COLOUR'	=> get_username_string('colour', $row['poster_id'], $row['username'], $row['user_colour'], $row['post_username']),			'POST_AUTHOR'			=> get_username_string('username', $row['poster_id'], $row['username'], $row['user_colour'], $row['post_username']),			'U_POST_AUTHOR'			=> get_username_string('profile', $row['poster_id'], $row['username'], $row['user_colour'], $row['post_username']),			'POST_DATE'		=> $user->format_date($row['post_time']),			'POST_SUBJECT'	=> $post_subject,			'MESSAGE'		=> $message,			'POST_ID'		=> $row['post_id'],			'RETURN_TOPIC'	=> sprintf($user->lang['RETURN_TOPIC'], '<a href="' . append_sid("{$phpbb_root_path}viewtopic.$phpEx", 't=' . $topic_id) . '">', '</a>'),			'MINI_POST_IMG'			=> ($post_unread) ? $user->img('icon_post_target_unread', 'UNREAD_POST') : $user->img('icon_post_target', 'POST'),			'S_POST_REPORTED'	=> ($row['post_reported'] && $auth->acl_get('m_report', $topic_info['forum_id'])),			'S_POST_UNAPPROVED'	=> (!$row['post_approved'] && $auth->acl_get('m_approve', $topic_info['forum_id'])),			'S_CHECKED'			=> (($submitted_id_list && !in_array(intval($row['post_id']), $submitted_id_list)) || in_array(intval($row['post_id']), $checked_ids)) ? true : false,			'S_HAS_ATTACHMENTS'	=> (!empty($attachments[$row['post_id']])) ? true : false,			'U_POST_DETAILS'	=> "$url&amp;i=$id&amp;p={$row['post_id']}&amp;mode=post_details" . (($forum_id) ? "&amp;f=$forum_id" : ''),			'U_MCP_APPROVE'		=> ($auth->acl_get('m_approve', $topic_info['forum_id'])) ? append_sid("{$phpbb_root_path}mcp.$phpEx", 'i=queue&amp;mode=approve_details&amp;f=' . $topic_info['forum_id'] . '&amp;p=' . $row['post_id']) : '',			'U_MCP_REPORT'		=> ($auth->acl_get('m_report', $topic_info['forum_id'])) ? append_sid("{$phpbb_root_path}mcp.$phpEx", 'i=reports&amp;mode=report_details&amp;f=' . $topic_info['forum_id'] . '&amp;p=' . $row['post_id']) : '')		);		// Display not already displayed Attachments for this post, we already parsed them. ;)		if (!empty($attachments[$row['post_id']]))		{			foreach ($attachments[$row['post_id']] as $attachment)			{				$template->assign_block_vars('postrow.attachment', array(					'DISPLAY_ATTACHMENT'	=> $attachment)				);			}		}		unset($rowset[$i]);	}	// Display topic icons for split topic	$s_topic_icons = false;	if ($auth->acl_gets('m_split', 'm_merge', (int) $topic_info['forum_id']))	{		include_once($phpbb_root_path . 'includes/functions_posting.' . $phpEx);		$s_topic_icons = posting_gen_topic_icons('', $icon_id);		// Has the user selected a topic for merge?		if ($to_topic_id)		{			$to_topic_info = get_topic_data(array($to_topic_id), 'm_merge');			if (!sizeof($to_topic_info))			{				$to_topic_id = 0;			}			else			{				$to_topic_info = $to_topic_info[$to_topic_id];				if (!$to_topic_info['enable_icons'] || $auth->acl_get('!f_icons', $topic_info['forum_id']))				{					$s_topic_icons = false;				}			}		}	}	$s_hidden_fields = build_hidden_fields(array(		'st_old'	=> $sort_days,		'post_ids'	=> $post_id_list,	));	$template->assign_vars(array(		'TOPIC_TITLE'		=> $topic_info['topic_title'],		'U_VIEW_TOPIC'		=> append_sid("{$phpbb_root_path}viewtopic.$phpEx", 'f=' . $topic_info['forum_id'] . '&amp;t=' . $topic_info['topic_id']),		'TO_TOPIC_ID'		=> $to_topic_id,		'TO_TOPIC_INFO'		=> ($to_topic_id) ? sprintf($user->lang['YOU_SELECTED_TOPIC'], $to_topic_id, '<a href="' . append_sid("{$phpbb_root_path}viewtopic.$phpEx", 'f=' . $to_topic_info['forum_id'] . '&amp;t=' . $to_topic_id) . '">' . $to_topic_info['topic_title'] . '</a>') : '',		'SPLIT_SUBJECT'		=> $subject,		'POSTS_PER_PAGE'	=> $posts_per_page,		'ACTION'			=> $action,		'REPORTED_IMG'		=> $user->img('icon_topic_reported', 'POST_REPORTED'),		'UNAPPROVED_IMG'	=> $user->img('icon_topic_unapproved', 'POST_UNAPPROVED'),		'INFO_IMG'			=> $user->img('icon_post_info', 'VIEW_INFO'),		'S_MCP_ACTION'		=> "$url&amp;i=$id&amp;mode=$mode&amp;action=$action&amp;start=$start",		'S_FORUM_SELECT'	=> ($to_forum_id) ? make_forum_select($to_forum_id, false, false, true, true, true) : make_forum_select($topic_info['forum_id'], false, false, true, true, true),		'S_CAN_SPLIT'		=> ($auth->acl_get('m_split', $topic_info['forum_id'])) ? true : false,		'S_CAN_MERGE'		=> ($auth->acl_get('m_merge', $topic_info['forum_id'])) ? true : false,		'S_CAN_DELETE'		=> ($auth->acl_get('m_delete', $topic_info['forum_id'])) ? true : false,		'S_CAN_APPROVE'		=> ($has_unapproved_posts && $auth->acl_get('m_approve', $topic_info['forum_id'])) ? true : false,		'S_CAN_LOCK'		=> ($auth->acl_get('m_lock', $topic_info['forum_id'])) ? true : false,		'S_CAN_REPORT'		=> ($auth->acl_get('m_report', $topic_info['forum_id'])) ? true : false,		'S_REPORT_VIEW'		=> ($action == 'reports') ? true : false,		'S_MERGE_VIEW'		=> ($action == 'merge') ? true : false,		'S_SPLIT_VIEW'		=> ($action == 'split') ? true : false,		'S_HIDDEN_FIELDS'	=> $s_hidden_fields,		'S_SHOW_TOPIC_ICONS'	=> $s_topic_icons,		'S_TOPIC_ICON'			=> $icon_id,		'U_SELECT_TOPIC'	=> "$url&amp;i=$id&amp;mode=forum_view&amp;action=merge_select" . (($forum_id) ? "&amp;f=$forum_id" : ''),		'RETURN_TOPIC'		=> sprintf($user->lang['RETURN_TOPIC'], '<a href="' . append_sid("{$phpbb_root_path}viewtopic.$phpEx", "f={$topic_info['forum_id']}&amp;t={$topic_info['topic_id']}&amp;start=$start") . '">', '</a>'),		'RETURN_FORUM'		=> sprintf($user->lang['RETURN_FORUM'], '<a href="' . append_sid("{$phpbb_root_path}viewforum.$phpEx", "f={$topic_info['forum_id']}&amp;start=$start") . '">', '</a>'),		'PAGE_NUMBER'		=> on_page($total, $posts_per_page, $start),		'PAGINATION'		=> (!$posts_per_page) ? '' : generate_pagination(append_sid("{$phpbb_root_path}mcp.$phpEx", "i=$id&amp;t={$topic_info['topic_id']}&amp;mode=$mode&amp;action=$action&amp;to_topic_id=$to_topic_id&amp;posts_per_page=$posts_per_page&amp;st=$sort_days&amp;sk=$sort_key&amp;sd=$sort_dir"), $total, $posts_per_page, $start),		'TOTAL_POSTS'		=> ($total == 1) ? $user->lang['VIEW_TOPIC_POST'] : sprintf($user->lang['VIEW_TOPIC_POSTS'], $total),	));}/*** Split topic*/function split_topic($action, $topic_id, $to_forum_id, $subject){	global $db, $template, $user, $phpEx, $phpbb_root_path, $auth, $config;	$post_id_list	= request_var('post_id_list', array(0));	$forum_id		= request_var('forum_id', 0);	$start			= request_var('start', 0);	if (!sizeof($post_id_list))	{		$template->assign_var('MESSAGE', $user->lang['NO_POST_SELECTED']);		return;	}	if (!check_ids($post_id_list, POSTS_TABLE, 'post_id', array('m_split')))	{		return;	}	$post_id = $post_id_list[0];	$post_info = get_post_data(array($post_id));	if (!sizeof($post_info))	{		$template->assign_var('MESSAGE', $user->lang['NO_POST_SELECTED']);		return;	}	$post_info = $post_info[$post_id];	$subject = trim($subject);	// Make some tests	if (!$subject)	{		$template->assign_var('MESSAGE', $user->lang['EMPTY_SUBJECT']);		return;	}	if ($to_forum_id <= 0)	{		$template->assign_var('MESSAGE', $user->lang['NO_DESTINATION_FORUM']);		return;	}	$forum_info = get_forum_data(array($to_forum_id), 'f_post');	if (!sizeof($forum_info))	{		$template->assign_var('MESSAGE', $user->lang['USER_CANNOT_POST']);		return;	}	$forum_info = $forum_info[$to_forum_id];	if ($forum_info['forum_type'] != FORUM_POST)	{		$template->assign_var('MESSAGE', $user->lang['FORUM_NOT_POSTABLE']);		return;	}	$redirect = request_var('redirect', build_url(array('quickmod')));	$s_hidden_fields = build_hidden_fields(array(		'i'				=> 'main',		'post_id_list'	=> $post_id_list,		'f'				=> $forum_id,		'mode'			=> 'topic_view',		'start'			=> $start,		'action'		=> $action,		't'				=> $topic_id,		'redirect'		=> $redirect,		'subject'		=> $subject,		'to_forum_id'	=> $to_forum_id,		'icon'			=> request_var('icon', 0))	);	$success_msg = $return_link = '';	if (confirm_box(true))	{		if ($action == 'split_beyond')		{			$sort_days = $total = 0;			$sort_key = $sort_dir = '';			$sort_by_sql = $sort_order_sql = array();			mcp_sorting('viewtopic', $sort_days, $sort_key, $sort_dir, $sort_by_sql, $sort_order_sql, $total, $forum_id, $topic_id);			$limit_time_sql = ($sort_days) ? 'AND t.topic_last_post_time >= ' . (time() - ($sort_days * 86400)) : '';			if ($sort_order_sql[0] == 'u')			{				$sql = 'SELECT p.post_id, p.forum_id, p.post_approved					FROM ' . POSTS_TABLE . ' p, ' . USERS_TABLE . " u					WHERE p.topic_id = $topic_id						AND p.poster_id = u.user_id						$limit_time_sql					ORDER BY $sort_order_sql";			}			else			{				$sql = 'SELECT p.post_id, p.forum_id, p.post_approved					FROM ' . POSTS_TABLE . " p					WHERE p.topic_id = $topic_id						$limit_time_sql					ORDER BY $sort_order_sql";			}			$result = $db->sql_query_limit($sql, 0, $start);			$store = false;			$post_id_list = array();			while ($row = $db->sql_fetchrow($result))			{				// If split from selected post (split_beyond), we split the unapproved items too.				if (!$row['post_approved'] && !$auth->acl_get('m_approve', $row['forum_id']))				{//					continue;				}				// Start to store post_ids as soon as we see the first post that was selected				if ($row['post_id'] == $post_id)				{					$store = true;				}				if ($store)				{					$post_id_list[] = $row['post_id'];				}			}			$db->sql_freeresult($result);		}		if (!sizeof($post_id_list))		{			trigger_error('NO_POST_SELECTED');		}		$icon_id = request_var('icon', 0);		$sql_ary = array(			'forum_id'		=> $to_forum_id,			'topic_title'	=> $subject,			'icon_id'		=> $icon_id,			'topic_approved'=> 1		);		$sql = 'INSERT INTO ' . TOPICS_TABLE . ' ' . $db->sql_build_array('INSERT', $sql_ary);		$db->sql_query($sql);		$to_topic_id = $db->sql_nextid();		move_posts($post_id_list, $to_topic_id);		$topic_info = get_topic_data(array($topic_id));		$topic_info = $topic_info[$topic_id];		add_log('mod', $to_forum_id, $to_topic_id, 'LOG_SPLIT_DESTINATION', $subject);		add_log('mod', $forum_id, $topic_id, 'LOG_SPLIT_SOURCE', $topic_info['topic_title']);		// Change topic title of first post		$sql = 'UPDATE ' . POSTS_TABLE . "			SET post_subject = '" . $db->sql_escape($subject) . "'			WHERE post_id = {$post_id_list[0]}";		$db->sql_query($sql);		$success_msg = 'TOPIC_SPLIT_SUCCESS';		// Update forum statistics		set_config_count('num_topics', 1, true);		// Link back to both topics		$return_link = sprintf($user->lang['RETURN_TOPIC'], '<a href="' . append_sid("{$phpbb_root_path}viewtopic.$phpEx", 'f=' . $post_info['forum_id'] . '&amp;t=' . $post_info['topic_id']) . '">', '</a>') . '<br /><br />' . sprintf($user->lang['RETURN_NEW_TOPIC'], '<a href="' . append_sid("{$phpbb_root_path}viewtopic.$phpEx", 'f=' . $to_forum_id . '&amp;t=' . $to_topic_id) . '">', '</a>');	}	else	{		confirm_box(false, ($action == 'split_all') ? 'SPLIT_TOPIC_ALL' : 'SPLIT_TOPIC_BEYOND', $s_hidden_fields);	}	$redirect = request_var('redirect', "index.$phpEx");	$redirect = reapply_sid($redirect);	if (!$success_msg)	{		return;	}	else	{		meta_refresh(3, append_sid("{$phpbb_root_path}viewtopic.$phpEx", "f=$to_forum_id&amp;t=$to_topic_id"));		trigger_error($user->lang[$success_msg] . '<br /><br />' . $return_link);	}}/*** Merge selected posts into selected topic*/function merge_posts($topic_id, $to_topic_id){	global $db, $template, $user, $phpEx, $phpbb_root_path, $auth;	if (!$to_topic_id)	{		$template->assign_var('MESSAGE', $user->lang['NO_FINAL_TOPIC_SELECTED']);		return;	}	$topic_data = get_topic_data(array($to_topic_id), 'm_merge');	if (!sizeof($topic_data))	{		$template->assign_var('MESSAGE', $user->lang['NO_FINAL_TOPIC_SELECTED']);		return;	}	$topic_data = $topic_data[$to_topic_id];	$post_id_list	= request_var('post_id_list', array(0));	$start			= request_var('start', 0);	if (!sizeof($post_id_list))	{		$template->assign_var('MESSAGE', $user->lang['NO_POST_SELECTED']);		return;	}	if (!check_ids($post_id_list, POSTS_TABLE, 'post_id', array('m_merge')))	{		return;	}	$redirect = request_var('redirect', build_url(array('quickmod')));	$s_hidden_fields = build_hidden_fields(array(		'i'				=> 'main',		'post_id_list'	=> $post_id_list,		'to_topic_id'	=> $to_topic_id,		'mode'			=> 'topic_view',		'action'		=> 'merge_posts',		'start'			=> $start,		'redirect'		=> $redirect,		't'				=> $topic_id)	);	$success_msg = $return_link = '';	if (confirm_box(true))	{		$to_forum_id = $topic_data['forum_id'];		move_posts($post_id_list, $to_topic_id);		add_log('mod', $to_forum_id, $to_topic_id, 'LOG_MERGE', $topic_data['topic_title']);		// Message and return links		$success_msg = 'POSTS_MERGED_SUCCESS';		// Does the original topic still exist? If yes, link back to it		$sql = 'SELECT forum_id			FROM ' . TOPICS_TABLE . '			WHERE topic_id = ' . $topic_id;		$result = $db->sql_query_limit($sql, 1);		$row = $db->sql_fetchrow($result);		$db->sql_freeresult($result);		if ($row)		{			$return_link .= sprintf($user->lang['RETURN_TOPIC'], '<a href="' . append_sid("{$phpbb_root_path}viewtopic.$phpEx", 'f=' . $row['forum_id'] . '&amp;t=' . $topic_id) . '">', '</a>');		}		else		{			// If the topic no longer exist, we will update the topic watch table.			// To not let it error out on users watching both topics, we just return on an error...			$db->sql_return_on_error(true);			$db->sql_query('UPDATE ' . TOPICS_WATCH_TABLE . ' SET topic_id = ' . (int) $to_topic_id . ' WHERE topic_id = ' . (int) $topic_id);			$db->sql_return_on_error(false);			$db->sql_query('DELETE FROM ' . TOPICS_WATCH_TABLE . ' WHERE topic_id = ' . (int) $topic_id);		}		// Link to the new topic		$return_link .= (($return_link) ? '<br /><br />' : '') . sprintf($user->lang['RETURN_NEW_TOPIC'], '<a href="' . append_sid("{$phpbb_root_path}viewtopic.$phpEx", 'f=' . $to_forum_id . '&amp;t=' . $to_topic_id) . '">', '</a>');	}	else	{		confirm_box(false, 'MERGE_POSTS', $s_hidden_fields);	}	$redirect = request_var('redirect', "index.$phpEx");	$redirect = reapply_sid($redirect);	if (!$success_msg)	{		return;	}	else	{		meta_refresh(3, append_sid("{$phpbb_root_path}viewtopic.$phpEx", "f=$to_forum_id&amp;t=$to_topic_id"));		trigger_error($user->lang[$success_msg] . '<br /><br />' . $return_link);	}}?>
<?php/**** @package install* @version $Id$* @copyright (c) 2006 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @ignore*/if (!defined('IN_PHPBB')){	exit;}/*** Determine if we are able to load a specified PHP module and do so if possible*/function can_load_dll($dll){	// SQLite2 is a tricky thing, from 5.0.0 it requires PDO; if PDO is not loaded we must state that SQLite is unavailable	// as the installer doesn't understand that the extension has a prerequisite.	//	// On top of this sometimes the SQLite extension is compiled for a different version of PDO	// by some Linux distributions which causes phpBB to bomb out with a blank page.	//	// Net result we'll disable automatic inclusion of SQLite support	//	// See: r9618 and #56105	if ($dll == 'sqlite')	{		return false;	}	return ((@ini_get('enable_dl') || strtolower(@ini_get('enable_dl')) == 'on') && (!@ini_get('safe_mode') || strtolower(@ini_get('safe_mode')) == 'off') && function_exists('dl') && @dl($dll . '.' . PHP_SHLIB_SUFFIX)) ? true : false;}/*** Returns an array of available DBMS with some data, if a DBMS is specified it will only* return data for that DBMS and will load its extension if necessary.*/function get_available_dbms($dbms = false, $return_unavailable = false, $only_20x_options = false){	global $lang;	$available_dbms = array(		'firebird'	=> array(			'LABEL'			=> 'FireBird',			'SCHEMA'		=> 'firebird',			'MODULE'		=> 'interbase',			'DELIM'			=> ';;',			'COMMENTS'		=> 'remove_remarks',			'DRIVER'		=> 'firebird',			'AVAILABLE'		=> true,			'2.0.x'			=> false,		),		'mysqli'	=> array(			'LABEL'			=> 'MySQL with MySQLi Extension',			'SCHEMA'		=> 'mysql_41',			'MODULE'		=> 'mysqli',			'DELIM'			=> ';',			'COMMENTS'		=> 'remove_remarks',			'DRIVER'		=> 'mysqli',			'AVAILABLE'		=> true,			'2.0.x'			=> true,		),		'mysql'		=> array(			'LABEL'			=> 'MySQL',			'SCHEMA'		=> 'mysql',			'MODULE'		=> 'mysql',			'DELIM'			=> ';',			'COMMENTS'		=> 'remove_remarks',			'DRIVER'		=> 'mysql',			'AVAILABLE'		=> true,			'2.0.x'			=> true,		),		'mssql'		=> array(			'LABEL'			=> 'MS SQL Server 2000+',			'SCHEMA'		=> 'mssql',			'MODULE'		=> 'mssql',			'DELIM'			=> 'GO',			'COMMENTS'		=> 'remove_comments',			'DRIVER'		=> 'mssql',			'AVAILABLE'		=> true,			'2.0.x'			=> true,		),		'mssql_odbc'=>	array(			'LABEL'			=> 'MS SQL Server [ ODBC ]',			'SCHEMA'		=> 'mssql',			'MODULE'		=> 'odbc',			'DELIM'			=> 'GO',			'COMMENTS'		=> 'remove_comments',			'DRIVER'		=> 'mssql_odbc',			'AVAILABLE'		=> true,			'2.0.x'			=> true,		),		'mssqlnative'		=> array(			'LABEL'			=> 'MS SQL Server 2005+ [ Native ]',			'SCHEMA'		=> 'mssql',			'MODULE'		=> 'sqlsrv',			'DELIM'			=> 'GO',			'COMMENTS'		=> 'remove_comments',			'DRIVER'		=> 'mssqlnative',			'AVAILABLE'		=> true,			'2.0.x'			=> false,		),					'oracle'	=>	array(			'LABEL'			=> 'Oracle',			'SCHEMA'		=> 'oracle',			'MODULE'		=> 'oci8',			'DELIM'			=> '/',			'COMMENTS'		=> 'remove_comments',			'DRIVER'		=> 'oracle',			'AVAILABLE'		=> true,			'2.0.x'			=> false,		),		'postgres' => array(			'LABEL'			=> 'PostgreSQL 7.x/8.x',			'SCHEMA'		=> 'postgres',			'MODULE'		=> 'pgsql',			'DELIM'			=> ';',			'COMMENTS'		=> 'remove_comments',			'DRIVER'		=> 'postgres',			'AVAILABLE'		=> true,			'2.0.x'			=> true,		),		'sqlite'		=> array(			'LABEL'			=> 'SQLite',			'SCHEMA'		=> 'sqlite',			'MODULE'		=> 'sqlite',			'DELIM'			=> ';',			'COMMENTS'		=> 'remove_remarks',			'DRIVER'		=> 'sqlite',			'AVAILABLE'		=> true,			'2.0.x'			=> false,		),	);	if ($dbms)	{		if (isset($available_dbms[$dbms]))		{			$available_dbms = array($dbms => $available_dbms[$dbms]);		}		else		{			return array();		}	}	// now perform some checks whether they are really available	foreach ($available_dbms as $db_name => $db_ary)	{		if ($only_20x_options && !$db_ary['2.0.x'])		{			if ($return_unavailable)			{				$available_dbms[$db_name]['AVAILABLE'] = false;			}			else			{				unset($available_dbms[$db_name]);			}			continue;		}		$dll = $db_ary['MODULE'];		if (!@extension_loaded($dll))		{			if (!can_load_dll($dll))			{				if ($return_unavailable)				{					$available_dbms[$db_name]['AVAILABLE'] = false;				}				else				{					unset($available_dbms[$db_name]);				}				continue;			}		}		$any_db_support = true;	}	if ($return_unavailable)	{		$available_dbms['ANY_DB_SUPPORT'] = $any_db_support;	}	return $available_dbms;}/*** Generate the drop down of available database options*/function dbms_select($default = '', $only_20x_options = false){	global $lang;	$available_dbms = get_available_dbms(false, false, $only_20x_options);	$dbms_options = '';	foreach ($available_dbms as $dbms_name => $details)	{		$selected = ($dbms_name == $default) ? ' selected="selected"' : '';		$dbms_options .= '<option value="' . $dbms_name . '"' . $selected .'>' . $lang['DLL_' . strtoupper($dbms_name)] . '</option>';	}	return $dbms_options;}/*** Get tables of a database** @deprecated*/function get_tables(&$db){	if (!class_exists('phpbb_db_tools'))	{		global $phpbb_root_path, $phpEx;		require($phpbb_root_path . 'includes/db/db_tools.' . $phpEx);	}	$db_tools = new phpbb_db_tools($db);	return $db_tools->sql_list_tables();}/*** Used to test whether we are able to connect to the database the user has specified* and identify any problems (eg there are already tables with the names we want to use* @param	array	$dbms should be of the format of an element of the array returned by {@link get_available_dbms get_available_dbms()}*					necessary extensions should be loaded already*/function connect_check_db($error_connect, &$error, $dbms_details, $table_prefix, $dbhost, $dbuser, $dbpasswd, $dbname, $dbport, $prefix_may_exist = false, $load_dbal = true, $unicode_check = true){	global $phpbb_root_path, $phpEx, $config, $lang;	$dbms = $dbms_details['DRIVER'];	if ($load_dbal)	{		// Include the DB layer		include($phpbb_root_path . 'includes/db/' . $dbms . '.' . $phpEx);	}	// Instantiate it and set return on error true	$sql_db = 'dbal_' . $dbms;	$db = new $sql_db();	$db->sql_return_on_error(true);	// Check that we actually have a database name before going any further.....	if ($dbms_details['DRIVER'] != 'sqlite' && $dbms_details['DRIVER'] != 'oracle' && $dbname === '')	{		$error[] = $lang['INST_ERR_DB_NO_NAME'];		return false;	}	// Make sure we don't have a daft user who thinks having the SQLite database in the forum directory is a good idea	if ($dbms_details['DRIVER'] == 'sqlite' && stripos(phpbb_realpath($dbhost), phpbb_realpath('../')) === 0)	{		$error[] = $lang['INST_ERR_DB_FORUM_PATH'];		return false;	}	// Check the prefix length to ensure that index names are not too long and does not contain invalid characters	switch ($dbms_details['DRIVER'])	{		case 'mysql':		case 'mysqli':			if (strspn($table_prefix, '-./\\') !== 0)			{				$error[] = $lang['INST_ERR_PREFIX_INVALID'];				return false;			}		// no break;		case 'postgres':			$prefix_length = 36;		break;		case 'mssql':		case 'mssql_odbc':		case 'mssqlnative':			$prefix_length = 90;		break;		case 'sqlite':			$prefix_length = 200;		break;		case 'firebird':		case 'oracle':			$prefix_length = 6;		break;	}	if (strlen($table_prefix) > $prefix_length)	{		$error[] = sprintf($lang['INST_ERR_PREFIX_TOO_LONG'], $prefix_length);		return false;	}	// Try and connect ...	if (is_array($db->sql_connect($dbhost, $dbuser, $dbpasswd, $dbname, $dbport, false, true)))	{		$db_error = $db->sql_error();		$error[] = $lang['INST_ERR_DB_CONNECT'] . '<br />' . (($db_error['message']) ? $db_error['message'] : $lang['INST_ERR_DB_NO_ERROR']);	}	else	{		// Likely matches for an existing phpBB installation		if (!$prefix_may_exist)		{			$temp_prefix = strtolower($table_prefix);			$table_ary = array($temp_prefix . 'attachments', $temp_prefix . 'config', $temp_prefix . 'sessions', $temp_prefix . 'topics', $temp_prefix . 'users');			$tables = get_tables($db);			$tables = array_map('strtolower', $tables);			$table_intersect = array_intersect($tables, $table_ary);			if (sizeof($table_intersect))			{				$error[] = $lang['INST_ERR_PREFIX'];			}		}		// Make sure that the user has selected a sensible DBAL for the DBMS actually installed		switch ($dbms_details['DRIVER'])		{			case 'mysqli':				if (version_compare(mysqli_get_server_info($db->db_connect_id), '4.1.3', '<'))				{					$error[] = $lang['INST_ERR_DB_NO_MYSQLI'];				}			break;			case 'sqlite':				if (version_compare(sqlite_libversion(), '2.8.2', '<'))				{					$error[] = $lang['INST_ERR_DB_NO_SQLITE'];				}			break;			case 'firebird':				// check the version of FB, use some hackery if we can't get access to the server info				if ($db->service_handle !== false && function_exists('ibase_server_info'))				{					$val = @ibase_server_info($db->service_handle, IBASE_SVC_SERVER_VERSION);					preg_match('#V([\d.]+)#', $val, $match);					if ($match[1] < 2)					{						$error[] = $lang['INST_ERR_DB_NO_FIREBIRD'];					}					$db_info = @ibase_db_info($db->service_handle, $dbname, IBASE_STS_HDR_PAGES);					preg_match('/^\\s*Page size\\s*(\\d+)/m', $db_info, $regs);					$page_size = intval($regs[1]);					if ($page_size < 8192)					{						$error[] = $lang['INST_ERR_DB_NO_FIREBIRD_PS'];					}				}				else				{					$sql = "SELECT *						FROM RDB$FUNCTIONS						WHERE RDB$SYSTEM_FLAG IS NULL							AND RDB$FUNCTION_NAME = 'CHAR_LENGTH'";					$result = $db->sql_query($sql);					$row = $db->sql_fetchrow($result);					$db->sql_freeresult($result);					// if its a UDF, its too old					if ($row)					{						$error[] = $lang['INST_ERR_DB_NO_FIREBIRD'];					}					else					{						$sql = 'SELECT 1 FROM RDB$DATABASE							WHERE BIN_AND(10, 1) = 0';						$result = $db->sql_query($sql);						if (!$result) // This can only fail if BIN_AND is not defined						{							$error[] = $lang['INST_ERR_DB_NO_FIREBIRD'];						}						$db->sql_freeresult($result);					}					// Setup the stuff for our random table					$char_array = array_merge(range('A', 'Z'), range('0', '9'));					$char_len = mt_rand(7, 9);					$char_array_len = sizeof($char_array) - 1;					$final = '';					for ($i = 0; $i < $char_len; $i++)					{						$final .= $char_array[mt_rand(0, $char_array_len)];					}					// Create some random table					$sql = 'CREATE TABLE ' . $final . " (						FIELD1 VARCHAR(255) CHARACTER SET UTF8 DEFAULT '' NOT NULL COLLATE UNICODE,						FIELD2 INTEGER DEFAULT 0 NOT NULL);";					$db->sql_query($sql);					// Create an index that should fail if the page size is less than 8192					$sql = 'CREATE INDEX ' . $final . ' ON ' . $final . '(FIELD1, FIELD2);';					$db->sql_query($sql);					if (ibase_errmsg() !== false)					{						$error[] = $lang['INST_ERR_DB_NO_FIREBIRD_PS'];					}					else					{						// Kill the old table						$db->sql_query('DROP TABLE ' . $final . ';');					}					unset($final);				}			break;			case 'oracle':				if ($unicode_check)				{					$sql = "SELECT *						FROM NLS_DATABASE_PARAMETERS						WHERE PARAMETER = 'NLS_RDBMS_VERSION'							OR PARAMETER = 'NLS_CHARACTERSET'";					$result = $db->sql_query($sql);					while ($row = $db->sql_fetchrow($result))					{						$stats[$row['parameter']] = $row['value'];					}					$db->sql_freeresult($result);					if (version_compare($stats['NLS_RDBMS_VERSION'], '9.2', '<') && $stats['NLS_CHARACTERSET'] !== 'UTF8')					{						$error[] = $lang['INST_ERR_DB_NO_ORACLE'];					}				}			break;			case 'postgres':				if ($unicode_check)				{					$sql = "SHOW server_encoding;";					$result = $db->sql_query($sql);					$row = $db->sql_fetchrow($result);					$db->sql_freeresult($result);					if ($row['server_encoding'] !== 'UNICODE' && $row['server_encoding'] !== 'UTF8')					{						$error[] = $lang['INST_ERR_DB_NO_POSTGRES'];					}				}			break;		}	}	if ($error_connect && (!isset($error) || !sizeof($error)))	{		return true;	}	return false;}/*** remove_remarks will strip the sql comment lines out of an uploaded sql file*/function remove_remarks(&$sql){	$sql = preg_replace('/\n{2,}/', "\n", preg_replace('/^#.*$/m', "\n", $sql));}/*** split_sql_file will split an uploaded sql file into single sql statements.* Note: expects trim() to have already been run on $sql.*/function split_sql_file($sql, $delimiter){	$sql = str_replace("\r" , '', $sql);	$data = preg_split('/' . preg_quote($delimiter, '/') . '$/m', $sql);	$data = array_map('trim', $data);	// The empty case	$end_data = end($data);	if (empty($end_data))	{		unset($data[key($data)]);	}	return $data;}/*** For replacing {L_*} strings with preg_replace_callback*/function adjust_language_keys_callback($matches){	if (!empty($matches[1]))	{		global $lang, $db;		return (!empty($lang[$matches[1]])) ? $db->sql_escape($lang[$matches[1]]) : $db->sql_escape($matches[1]);	}}?>
<?php/**** @package dbal* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @ignore*/if (!defined('IN_PHPBB')){	exit;}include_once($phpbb_root_path . 'includes/db/dbal.' . $phpEx);/*** MySQL4 Database Abstraction Layer* Compatible with:* MySQL 3.23+* MySQL 4.0+* MySQL 4.1+* MySQL 5.0+* @package dbal*/class dbal_mysql extends dbal{	var $multi_insert = true;	/**	* Connect to server	* @access public	*/	function sql_connect($sqlserver, $sqluser, $sqlpassword, $database, $port = false, $persistency = false, $new_link = false)	{		$this->persistency = $persistency;		$this->user = $sqluser;		$this->server = $sqlserver . (($port) ? ':' . $port : '');		$this->dbname = $database;		$this->sql_layer = 'mysql4';		$this->db_connect_id = ($this->persistency) ? @mysql_pconnect($this->server, $this->user, $sqlpassword) : @mysql_connect($this->server, $this->user, $sqlpassword, $new_link);		if ($this->db_connect_id && $this->dbname != '')		{			if (@mysql_select_db($this->dbname, $this->db_connect_id))			{				// Determine what version we are using and if it natively supports UNICODE				if (version_compare($this->sql_server_info(true), '4.1.0', '>='))				{					@mysql_query("SET NAMES 'utf8'", $this->db_connect_id);					// enforce strict mode on databases that support it					if (version_compare($this->sql_server_info(true), '5.0.2', '>='))					{						$result = @mysql_query('SELECT @@session.sql_mode AS sql_mode', $this->db_connect_id);						$row = @mysql_fetch_assoc($result);						@mysql_free_result($result);						$modes = array_map('trim', explode(',', $row['sql_mode']));						// TRADITIONAL includes STRICT_ALL_TABLES and STRICT_TRANS_TABLES						if (!in_array('TRADITIONAL', $modes))						{							if (!in_array('STRICT_ALL_TABLES', $modes))							{								$modes[] = 'STRICT_ALL_TABLES';							}							if (!in_array('STRICT_TRANS_TABLES', $modes))							{								$modes[] = 'STRICT_TRANS_TABLES';							}						}						$mode = implode(',', $modes);						@mysql_query("SET SESSION sql_mode='{$mode}'", $this->db_connect_id);					}				}				else if (version_compare($this->sql_server_info(true), '4.0.0', '<'))				{					$this->sql_layer = 'mysql';				}				return $this->db_connect_id;			}		}		return $this->sql_error('');	}	/**	* Version information about used database	* @param bool $raw if true, only return the fetched sql_server_version	* @param bool $use_cache If true, it is safe to retrieve the value from the cache	* @return string sql server version	*/	function sql_server_info($raw = false, $use_cache = true)	{		global $cache;		if (!$use_cache || empty($cache) || ($this->sql_server_version = $cache->get('mysql_version')) === false)		{			$result = @mysql_query('SELECT VERSION() AS version', $this->db_connect_id);			$row = @mysql_fetch_assoc($result);			@mysql_free_result($result);			$this->sql_server_version = $row['version'];			if (!empty($cache) && $use_cache)			{				$cache->put('mysql_version', $this->sql_server_version);			}		}		return ($raw) ? $this->sql_server_version : 'MySQL ' . $this->sql_server_version;	}	/**	* SQL Transaction	* @access private	*/	function _sql_transaction($status = 'begin')	{		switch ($status)		{			case 'begin':				return @mysql_query('BEGIN', $this->db_connect_id);			break;			case 'commit':				return @mysql_query('COMMIT', $this->db_connect_id);			break;			case 'rollback':				return @mysql_query('ROLLBACK', $this->db_connect_id);			break;		}		return true;	}	/**	* Base query method	*	* @param	string	$query		Contains the SQL query which shall be executed	* @param	int		$cache_ttl	Either 0 to avoid caching or the time in seconds which the result shall be kept in cache	* @return	mixed				When casted to bool the returned value returns true on success and false on failure	*	* @access	public	*/	function sql_query($query = '', $cache_ttl = 0)	{		if ($query != '')		{			global $cache;			// EXPLAIN only in extra debug mode			if (defined('DEBUG_EXTRA'))			{				$this->sql_report('start', $query);			}			$this->query_result = ($cache_ttl && method_exists($cache, 'sql_load')) ? $cache->sql_load($query) : false;			$this->sql_add_num_queries($this->query_result);			if ($this->query_result === false)			{				if (($this->query_result = @mysql_query($query, $this->db_connect_id)) === false)				{					$this->sql_error($query);				}				if (defined('DEBUG_EXTRA'))				{					$this->sql_report('stop', $query);				}				if ($cache_ttl && method_exists($cache, 'sql_save'))				{					$this->open_queries[(int) $this->query_result] = $this->query_result;					$cache->sql_save($query, $this->query_result, $cache_ttl);				}				else if (strpos($query, 'SELECT') === 0 && $this->query_result)				{					$this->open_queries[(int) $this->query_result] = $this->query_result;				}			}			else if (defined('DEBUG_EXTRA'))			{				$this->sql_report('fromcache', $query);			}		}		else		{			return false;		}		return $this->query_result;	}	/**	* Build LIMIT query	*/	function _sql_query_limit($query, $total, $offset = 0, $cache_ttl = 0)	{		$this->query_result = false;		// if $total is set to 0 we do not want to limit the number of rows		if ($total == 0)		{			// Having a value of -1 was always a bug			$total = '18446744073709551615';		}		$query .= "\n LIMIT " . ((!empty($offset)) ? $offset . ', ' . $total : $total);		return $this->sql_query($query, $cache_ttl);	}	/**	* Return number of affected rows	*/	function sql_affectedrows()	{		return ($this->db_connect_id) ? @mysql_affected_rows($this->db_connect_id) : false;	}	/**	* Fetch current row	*/	function sql_fetchrow($query_id = false)	{		global $cache;		if ($query_id === false)		{			$query_id = $this->query_result;		}		if (isset($cache->sql_rowset[$query_id]))		{			return $cache->sql_fetchrow($query_id);		}		return ($query_id !== false) ? @mysql_fetch_assoc($query_id) : false;	}	/**	* Seek to given row number	* rownum is zero-based	*/	function sql_rowseek($rownum, &$query_id)	{		global $cache;		if ($query_id === false)		{			$query_id = $this->query_result;		}		if (isset($cache->sql_rowset[$query_id]))		{			return $cache->sql_rowseek($rownum, $query_id);		}		return ($query_id !== false) ? @mysql_data_seek($query_id, $rownum) : false;	}	/**	* Get last inserted id after insert statement	*/	function sql_nextid()	{		return ($this->db_connect_id) ? @mysql_insert_id($this->db_connect_id) : false;	}	/**	* Free sql result	*/	function sql_freeresult($query_id = false)	{		global $cache;		if ($query_id === false)		{			$query_id = $this->query_result;		}		if (isset($cache->sql_rowset[$query_id]))		{			return $cache->sql_freeresult($query_id);		}		if (isset($this->open_queries[(int) $query_id]))		{			unset($this->open_queries[(int) $query_id]);			return @mysql_free_result($query_id);		}		return false;	}	/**	* Escape string used in sql query	*/	function sql_escape($msg)	{		if (!$this->db_connect_id)		{			return @mysql_real_escape_string($msg);		}		return @mysql_real_escape_string($msg, $this->db_connect_id);	}	/**	* Build LIKE expression	* @access private	*/	function _sql_like_expression($expression)	{		return $expression;	}	/**	* Build db-specific query data	* @access private	*/	function _sql_custom_build($stage, $data)	{		switch ($stage)		{			case 'FROM':				$data = '(' . $data . ')';			break;		}		return $data;	}	/**	* return sql error array	* @access private	*/	function _sql_error()	{		if (!$this->db_connect_id)		{			return array(				'message'	=> @mysql_error(),				'code'		=> @mysql_errno()			);		}		return array(			'message'	=> @mysql_error($this->db_connect_id),			'code'		=> @mysql_errno($this->db_connect_id)		);	}	/**	* Close sql connection	* @access private	*/	function _sql_close()	{		return @mysql_close($this->db_connect_id);	}	/**	* Build db-specific report	* @access private	*/	function _sql_report($mode, $query = '')	{		static $test_prof;		// current detection method, might just switch to see the existance of INFORMATION_SCHEMA.PROFILING		if ($test_prof === null)		{			$test_prof = false;			if (version_compare($this->sql_server_info(true), '5.0.37', '>=') && version_compare($this->sql_server_info(true), '5.1', '<'))			{				$test_prof = true;			}		}		switch ($mode)		{			case 'start':				$explain_query = $query;				if (preg_match('/UPDATE ([a-z0-9_]+).*?WHERE(.*)/s', $query, $m))				{					$explain_query = 'SELECT * FROM ' . $m[1] . ' WHERE ' . $m[2];				}				else if (preg_match('/DELETE FROM ([a-z0-9_]+).*?WHERE(.*)/s', $query, $m))				{					$explain_query = 'SELECT * FROM ' . $m[1] . ' WHERE ' . $m[2];				}				if (preg_match('/^SELECT/', $explain_query))				{					$html_table = false;					// begin profiling					if ($test_prof)					{						@mysql_query('SET profiling = 1;', $this->db_connect_id);					}					if ($result = @mysql_query("EXPLAIN $explain_query", $this->db_connect_id))					{						while ($row = @mysql_fetch_assoc($result))						{							$html_table = $this->sql_report('add_select_row', $query, $html_table, $row);						}					}					@mysql_free_result($result);					if ($html_table)					{						$this->html_hold .= '</table>';					}					if ($test_prof)					{						$html_table = false;						// get the last profile						if ($result = @mysql_query('SHOW PROFILE ALL;', $this->db_connect_id))						{							$this->html_hold .= '<br />';							while ($row = @mysql_fetch_assoc($result))							{								// make <unknown> HTML safe								if (!empty($row['Source_function']))								{									$row['Source_function'] = str_replace(array('<', '>'), array('&lt;', '&gt;'), $row['Source_function']);								}								// remove unsupported features								foreach ($row as $key => $val)								{									if ($val === null)									{										unset($row[$key]);									}								}								$html_table = $this->sql_report('add_select_row', $query, $html_table, $row);							}						}						@mysql_free_result($result);						if ($html_table)						{							$this->html_hold .= '</table>';						}						@mysql_query('SET profiling = 0;', $this->db_connect_id);					}				}			break;			case 'fromcache':				$endtime = explode(' ', microtime());				$endtime = $endtime[0] + $endtime[1];				$result = @mysql_query($query, $this->db_connect_id);				while ($void = @mysql_fetch_assoc($result))				{					// Take the time spent on parsing rows into account				}				@mysql_free_result($result);				$splittime = explode(' ', microtime());				$splittime = $splittime[0] + $splittime[1];				$this->sql_report('record_fromcache', $query, $endtime, $splittime);			break;		}	}}?>
<?php/**** @package phpBB3* @version $Id$* @copyright (c) 2006 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License** This file creates new schema files for every database.* The filenames will be prefixed with an underscore to not overwrite the current schema files.** If you overwrite the original schema files please make sure you save the file with UNIX linefeeds.*/$schema_path = dirname(__FILE__) . '/../install/schemas/';if (!is_writable($schema_path)){	die('Schema path not writable');}$schema_data = get_schema_struct();$dbms_type_map = array(	'mysql_41'	=> array(		'INT:'		=> 'int(%d)',		'BINT'		=> 'bigint(20)',		'UINT'		=> 'mediumint(8) UNSIGNED',		'UINT:'		=> 'int(%d) UNSIGNED',		'TINT:'		=> 'tinyint(%d)',		'USINT'		=> 'smallint(4) UNSIGNED',		'BOOL'		=> 'tinyint(1) UNSIGNED',		'VCHAR'		=> 'varchar(255)',		'VCHAR:'	=> 'varchar(%d)',		'CHAR:'		=> 'char(%d)',		'XSTEXT'	=> 'text',		'XSTEXT_UNI'=> 'varchar(100)',		'STEXT'		=> 'text',		'STEXT_UNI'	=> 'varchar(255)',		'TEXT'		=> 'text',		'TEXT_UNI'	=> 'text',		'MTEXT'		=> 'mediumtext',		'MTEXT_UNI'	=> 'mediumtext',		'TIMESTAMP'	=> 'int(11) UNSIGNED',		'DECIMAL'	=> 'decimal(5,2)',		'DECIMAL:'	=> 'decimal(%d,2)',		'PDECIMAL'	=> 'decimal(6,3)',		'PDECIMAL:'	=> 'decimal(%d,3)',		'VCHAR_UNI'	=> 'varchar(255)',		'VCHAR_UNI:'=> 'varchar(%d)',		'VCHAR_CI'	=> 'varchar(255)',		'VARBINARY'	=> 'varbinary(255)',	),	'mysql_40'	=> array(		'INT:'		=> 'int(%d)',		'BINT'		=> 'bigint(20)',		'UINT'		=> 'mediumint(8) UNSIGNED',		'UINT:'		=> 'int(%d) UNSIGNED',		'TINT:'		=> 'tinyint(%d)',		'USINT'		=> 'smallint(4) UNSIGNED',		'BOOL'		=> 'tinyint(1) UNSIGNED',		'VCHAR'		=> 'varbinary(255)',		'VCHAR:'	=> 'varbinary(%d)',		'CHAR:'		=> 'binary(%d)',		'XSTEXT'	=> 'blob',		'XSTEXT_UNI'=> 'blob',		'STEXT'		=> 'blob',		'STEXT_UNI'	=> 'blob',		'TEXT'		=> 'blob',		'TEXT_UNI'	=> 'blob',		'MTEXT'		=> 'mediumblob',		'MTEXT_UNI'	=> 'mediumblob',		'TIMESTAMP'	=> 'int(11) UNSIGNED',		'DECIMAL'	=> 'decimal(5,2)',		'DECIMAL:'	=> 'decimal(%d,2)',		'PDECIMAL'	=> 'decimal(6,3)',		'PDECIMAL:'	=> 'decimal(%d,3)',		'VCHAR_UNI'	=> 'blob',		'VCHAR_UNI:'=> array('varbinary(%d)', 'limit' => array('mult', 3, 255, 'blob')),		'VCHAR_CI'	=> 'blob',		'VARBINARY'	=> 'varbinary(255)',	),	'firebird'	=> array(		'INT:'		=> 'INTEGER',		'BINT'		=> 'DOUBLE PRECISION',		'UINT'		=> 'INTEGER',		'UINT:'		=> 'INTEGER',		'TINT:'		=> 'INTEGER',		'USINT'		=> 'INTEGER',		'BOOL'		=> 'INTEGER',		'VCHAR'		=> 'VARCHAR(255) CHARACTER SET NONE',		'VCHAR:'	=> 'VARCHAR(%d) CHARACTER SET NONE',		'CHAR:'		=> 'CHAR(%d) CHARACTER SET NONE',		'XSTEXT'	=> 'BLOB SUB_TYPE TEXT CHARACTER SET NONE',		'STEXT'		=> 'BLOB SUB_TYPE TEXT CHARACTER SET NONE',		'TEXT'		=> 'BLOB SUB_TYPE TEXT CHARACTER SET NONE',		'MTEXT'		=> 'BLOB SUB_TYPE TEXT CHARACTER SET NONE',		'XSTEXT_UNI'=> 'VARCHAR(100) CHARACTER SET UTF8',		'STEXT_UNI'	=> 'VARCHAR(255) CHARACTER SET UTF8',		'TEXT_UNI'	=> 'BLOB SUB_TYPE TEXT CHARACTER SET UTF8',		'MTEXT_UNI'	=> 'BLOB SUB_TYPE TEXT CHARACTER SET UTF8',		'TIMESTAMP'	=> 'INTEGER',		'DECIMAL'	=> 'DOUBLE PRECISION',		'DECIMAL:'	=> 'DOUBLE PRECISION',		'PDECIMAL'	=> 'DOUBLE PRECISION',		'PDECIMAL:'	=> 'DOUBLE PRECISION',		'VCHAR_UNI'	=> 'VARCHAR(255) CHARACTER SET UTF8',		'VCHAR_UNI:'=> 'VARCHAR(%d) CHARACTER SET UTF8',		'VCHAR_CI'	=> 'VARCHAR(255) CHARACTER SET UTF8',		'VARBINARY'	=> 'CHAR(255) CHARACTER SET NONE',	),	'mssql'		=> array(		'INT:'		=> '[int]',		'BINT'		=> '[float]',		'UINT'		=> '[int]',		'UINT:'		=> '[int]',		'TINT:'		=> '[int]',		'USINT'		=> '[int]',		'BOOL'		=> '[int]',		'VCHAR'		=> '[varchar] (255)',		'VCHAR:'	=> '[varchar] (%d)',		'CHAR:'		=> '[char] (%d)',		'XSTEXT'	=> '[varchar] (1000)',		'STEXT'		=> '[varchar] (3000)',		'TEXT'		=> '[varchar] (8000)',		'MTEXT'		=> '[text]',		'XSTEXT_UNI'=> '[varchar] (100)',		'STEXT_UNI'	=> '[varchar] (255)',		'TEXT_UNI'	=> '[varchar] (4000)',		'MTEXT_UNI'	=> '[text]',		'TIMESTAMP'	=> '[int]',		'DECIMAL'	=> '[float]',		'DECIMAL:'	=> '[float]',		'PDECIMAL'	=> '[float]',		'PDECIMAL:'	=> '[float]',		'VCHAR_UNI'	=> '[varchar] (255)',		'VCHAR_UNI:'=> '[varchar] (%d)',		'VCHAR_CI'	=> '[varchar] (255)',		'VARBINARY'	=> '[varchar] (255)',	),	'oracle'	=> array(		'INT:'		=> 'number(%d)',		'BINT'		=> 'number(20)',		'UINT'		=> 'number(8)',		'UINT:'		=> 'number(%d)',		'TINT:'		=> 'number(%d)',		'USINT'		=> 'number(4)',		'BOOL'		=> 'number(1)',		'VCHAR'		=> 'varchar2(255)',		'VCHAR:'	=> 'varchar2(%d)',		'CHAR:'		=> 'char(%d)',		'XSTEXT'	=> 'varchar2(1000)',		'STEXT'		=> 'varchar2(3000)',		'TEXT'		=> 'clob',		'MTEXT'		=> 'clob',		'XSTEXT_UNI'=> 'varchar2(300)',		'STEXT_UNI'	=> 'varchar2(765)',		'TEXT_UNI'	=> 'clob',		'MTEXT_UNI'	=> 'clob',		'TIMESTAMP'	=> 'number(11)',		'DECIMAL'	=> 'number(5, 2)',		'DECIMAL:'	=> 'number(%d, 2)',		'PDECIMAL'	=> 'number(6, 3)',		'PDECIMAL:'	=> 'number(%d, 3)',		'VCHAR_UNI'	=> 'varchar2(765)',		'VCHAR_UNI:'=> array('varchar2(%d)', 'limit' => array('mult', 3, 765, 'clob')),		'VCHAR_CI'	=> 'varchar2(255)',		'VARBINARY'	=> 'raw(255)',	),	'sqlite'	=> array(		'INT:'		=> 'int(%d)',		'BINT'		=> 'bigint(20)',		'UINT'		=> 'INTEGER UNSIGNED', //'mediumint(8) UNSIGNED',		'UINT:'		=> 'INTEGER UNSIGNED', // 'int(%d) UNSIGNED',		'TINT:'		=> 'tinyint(%d)',		'USINT'		=> 'INTEGER UNSIGNED', //'mediumint(4) UNSIGNED',		'BOOL'		=> 'INTEGER UNSIGNED', //'tinyint(1) UNSIGNED',		'VCHAR'		=> 'varchar(255)',		'VCHAR:'	=> 'varchar(%d)',		'CHAR:'		=> 'char(%d)',		'XSTEXT'	=> 'text(65535)',		'STEXT'		=> 'text(65535)',		'TEXT'		=> 'text(65535)',		'MTEXT'		=> 'mediumtext(16777215)',		'XSTEXT_UNI'=> 'text(65535)',		'STEXT_UNI'	=> 'text(65535)',		'TEXT_UNI'	=> 'text(65535)',		'MTEXT_UNI'	=> 'mediumtext(16777215)',		'TIMESTAMP'	=> 'INTEGER UNSIGNED', //'int(11) UNSIGNED',		'DECIMAL'	=> 'decimal(5,2)',		'DECIMAL:'	=> 'decimal(%d,2)',		'PDECIMAL'	=> 'decimal(6,3)',		'PDECIMAL:'	=> 'decimal(%d,3)',		'VCHAR_UNI'	=> 'varchar(255)',		'VCHAR_UNI:'=> 'varchar(%d)',		'VCHAR_CI'	=> 'varchar(255)',		'VARBINARY'	=> 'blob',	),	'postgres'	=> array(		'INT:'		=> 'INT4',		'BINT'		=> 'INT8',		'UINT'		=> 'INT4', // unsigned		'UINT:'		=> 'INT4', // unsigned		'USINT'		=> 'INT2', // unsigned		'BOOL'		=> 'INT2', // unsigned		'TINT:'		=> 'INT2',		'VCHAR'		=> 'varchar(255)',		'VCHAR:'	=> 'varchar(%d)',		'CHAR:'		=> 'char(%d)',		'XSTEXT'	=> 'varchar(1000)',		'STEXT'		=> 'varchar(3000)',		'TEXT'		=> 'varchar(8000)',		'MTEXT'		=> 'TEXT',		'XSTEXT_UNI'=> 'varchar(100)',		'STEXT_UNI'	=> 'varchar(255)',		'TEXT_UNI'	=> 'varchar(4000)',		'MTEXT_UNI'	=> 'TEXT',		'TIMESTAMP'	=> 'INT4', // unsigned		'DECIMAL'	=> 'decimal(5,2)',		'DECIMAL:'	=> 'decimal(%d,2)',		'PDECIMAL'	=> 'decimal(6,3)',		'PDECIMAL:'	=> 'decimal(%d,3)',		'VCHAR_UNI'	=> 'varchar(255)',		'VCHAR_UNI:'=> 'varchar(%d)',		'VCHAR_CI'	=> 'varchar_ci',		'VARBINARY'	=> 'bytea',	),);// A list of types being unsigned for better reference in some db's$unsigned_types = array('UINT', 'UINT:', 'USINT', 'BOOL', 'TIMESTAMP');$supported_dbms = array('firebird', 'mssql', 'mysql_40', 'mysql_41', 'oracle', 'postgres', 'sqlite');foreach ($supported_dbms as $dbms){	$fp = fopen($schema_path . $dbms . '_schema.sql', 'wt');	$line = '';	// Write Header	switch ($dbms)	{		case 'mysql_40':		case 'mysql_41':		case 'firebird':		case 'sqlite':			fwrite($fp, "# DO NOT EDIT THIS FILE, IT IS GENERATED\n");			fwrite($fp, "#\n");			fwrite($fp, "# To change the contents of this file, edit\n");			fwrite($fp, "# phpBB/develop/create_schema_files.php and\n");			fwrite($fp, "# run it.\n");		break;		case 'mssql':		case 'oracle':		case 'postgres':			fwrite($fp, "/*\n");			fwrite($fp, " * DO NOT EDIT THIS FILE, IT IS GENERATED\n");			fwrite($fp, " *\n");			fwrite($fp, " * To change the contents of this file, edit\n");			fwrite($fp, " * phpBB/develop/create_schema_files.php and\n");			fwrite($fp, " * run it.\n");			fwrite($fp, " */\n\n");		break;	}	switch ($dbms)	{		case 'firebird':			$line .= custom_data('firebird') . "\n";		break;		case 'sqlite':			$line .= "BEGIN TRANSACTION;\n\n";		break;		case 'oracle':			$line .= custom_data('oracle') . "\n";		break;		case 'postgres':			$line .= "BEGIN;\n\n";			$line .= custom_data('postgres') . "\n";		break;	}	fwrite($fp, $line);	foreach ($schema_data as $table_name => $table_data)	{		// Write comment about table		switch ($dbms)		{			case 'mysql_40':			case 'mysql_41':			case 'firebird':			case 'sqlite':				fwrite($fp, "# Table: '{$table_name}'\n");			break;			case 'mssql':			case 'oracle':			case 'postgres':				fwrite($fp, "/*\n\tTable: '{$table_name}'\n*/\n");			break;		}		// Create Table statement		$generator = $textimage = false;		$line = '';		switch ($dbms)		{			case 'mysql_40':			case 'mysql_41':			case 'firebird':			case 'oracle':			case 'sqlite':			case 'postgres':				$line = "CREATE TABLE {$table_name} (\n";			break;			case 'mssql':				$line = "CREATE TABLE [{$table_name}] (\n";			break;		}		// Table specific so we don't get overlap		$modded_array = array();		// Write columns one by one...		foreach ($table_data['COLUMNS'] as $column_name => $column_data)		{			if (strlen($column_name) > 30)			{				trigger_error("Column name '$column_name' on table '$table_name' is too long. The maximum is 30 characters.", E_USER_ERROR);			}			if (isset($column_data[2]) && $column_data[2] == 'auto_increment' && strlen($column_name) > 26) // "${column_name}_gen"			{				trigger_error("Index name '${column_name}_gen' on table '$table_name' is too long. The maximum is 30 characters.", E_USER_ERROR);			}			// Get type			if (strpos($column_data[0], ':') !== false)			{				list($orig_column_type, $column_length) = explode(':', $column_data[0]);				if (!is_array($dbms_type_map[$dbms][$orig_column_type . ':']))				{					$column_type = sprintf($dbms_type_map[$dbms][$orig_column_type . ':'], $column_length);				}				else				{					if (isset($dbms_type_map[$dbms][$orig_column_type . ':']['rule']))					{						switch ($dbms_type_map[$dbms][$orig_column_type . ':']['rule'][0])						{							case 'div':								$column_length /= $dbms_type_map[$dbms][$orig_column_type . ':']['rule'][1];								$column_length = ceil($column_length);								$column_type = sprintf($dbms_type_map[$dbms][$orig_column_type . ':'][0], $column_length);							break;						}					}					if (isset($dbms_type_map[$dbms][$orig_column_type . ':']['limit']))					{						switch ($dbms_type_map[$dbms][$orig_column_type . ':']['limit'][0])						{							case 'mult':								$column_length *= $dbms_type_map[$dbms][$orig_column_type . ':']['limit'][1];								if ($column_length > $dbms_type_map[$dbms][$orig_column_type . ':']['limit'][2])								{									$column_type = $dbms_type_map[$dbms][$orig_column_type . ':']['limit'][3];									$modded_array[$column_name] = $column_type;								}								else								{									$column_type = sprintf($dbms_type_map[$dbms][$orig_column_type . ':'][0], $column_length);								}							break;						}					}				}				$orig_column_type .= ':';			}			else			{				$orig_column_type = $column_data[0];				$column_type = $dbms_type_map[$dbms][$column_data[0]];				if ($column_type == 'text' || $column_type == 'blob')				{					$modded_array[$column_name] = $column_type;				}			}			// Adjust default value if db-dependant specified			if (is_array($column_data[1]))			{				$column_data[1] = (isset($column_data[1][$dbms])) ? $column_data[1][$dbms] : $column_data[1]['default'];			}			switch ($dbms)			{				case 'mysql_40':				case 'mysql_41':					$line .= "\t{$column_name} {$column_type} ";					// For hexadecimal values do not use single quotes					if (!is_null($column_data[1]) && substr($column_type, -4) !== 'text' && substr($column_type, -4) !== 'blob')					{						$line .= (strpos($column_data[1], '0x') === 0) ? "DEFAULT {$column_data[1]} " : "DEFAULT '{$column_data[1]}' ";					}					$line .= 'NOT NULL';					if (isset($column_data[2]))					{						if ($column_data[2] == 'auto_increment')						{							$line .= ' auto_increment';						}						else if ($dbms === 'mysql_41' && $column_data[2] == 'true_sort')						{							$line .= ' COLLATE utf8_unicode_ci';						}					}					$line .= ",\n";				break;				case 'sqlite':					if (isset($column_data[2]) && $column_data[2] == 'auto_increment')					{						$line .= "\t{$column_name} INTEGER PRIMARY KEY ";						$generator = $column_name;					}					else					{						$line .= "\t{$column_name} {$column_type} ";					}					$line .= 'NOT NULL ';					$line .= (!is_null($column_data[1])) ? "DEFAULT '{$column_data[1]}'" : '';					$line .= ",\n";				break;				case 'firebird':					$line .= "\t{$column_name} {$column_type} ";					if (!is_null($column_data[1]))					{						$line .= 'DEFAULT ' . ((is_numeric($column_data[1])) ? $column_data[1] : "'{$column_data[1]}'") . ' ';					}					$line .= 'NOT NULL';					// This is a UNICODE column and thus should be given it's fair share					if (preg_match('/^X?STEXT_UNI|VCHAR_(CI|UNI:?)/', $column_data[0]))					{						$line .= ' COLLATE UNICODE';					}					$line .= ",\n";					if (isset($column_data[2]) && $column_data[2] == 'auto_increment')					{						$generator = $column_name;					}				break;				case 'mssql':					if ($column_type == '[text]')					{						$textimage = true;					}					$line .= "\t[{$column_name}] {$column_type} ";					if (!is_null($column_data[1]))					{						// For hexadecimal values do not use single quotes						if (strpos($column_data[1], '0x') === 0)						{							$line .= 'DEFAULT (' . $column_data[1] . ') ';						}						else						{							$line .= 'DEFAULT (' . ((is_numeric($column_data[1])) ? $column_data[1] : "'{$column_data[1]}'") . ') ';						}					}					if (isset($column_data[2]) && $column_data[2] == 'auto_increment')					{						$line .= 'IDENTITY (1, 1) ';					}					$line .= 'NOT NULL';					$line .= " ,\n";				break;				case 'oracle':					$line .= "\t{$column_name} {$column_type} ";					$line .= (!is_null($column_data[1])) ? "DEFAULT '{$column_data[1]}' " : '';					// In Oracle empty strings ('') are treated as NULL.					// Therefore in oracle we allow NULL's for all DEFAULT '' entries					$line .= ($column_data[1] === '') ? ",\n" : "NOT NULL,\n";					if (isset($column_data[2]) && $column_data[2] == 'auto_increment')					{						$generator = $column_name;					}				break;				case 'postgres':					$line .= "\t{$column_name} {$column_type} ";					if (isset($column_data[2]) && $column_data[2] == 'auto_increment')					{						$line .= "DEFAULT nextval('{$table_name}_seq'),\n";						// Make sure the sequence will be created before creating the table						$line = "CREATE SEQUENCE {$table_name}_seq;\n\n" . $line;					}					else					{						$line .= (!is_null($column_data[1])) ? "DEFAULT '{$column_data[1]}' " : '';						$line .= "NOT NULL";						// Unsigned? Then add a CHECK contraint						if (in_array($orig_column_type, $unsigned_types))						{							$line .= " CHECK ({$column_name} >= 0)";						}						$line .= ",\n";					}				break;			}		}		switch ($dbms)		{			case 'firebird':				// Remove last line delimiter...				$line = substr($line, 0, -2);				$line .= "\n);;\n\n";			break;			case 'mssql':				$line = substr($line, 0, -2);				$line .= "\n) ON [PRIMARY]" . (($textimage) ? ' TEXTIMAGE_ON [PRIMARY]' : '') . "\n";				$line .= "GO\n\n";			break;		}		// Write primary key		if (isset($table_data['PRIMARY_KEY']))		{			if (!is_array($table_data['PRIMARY_KEY']))			{				$table_data['PRIMARY_KEY'] = array($table_data['PRIMARY_KEY']);			}			switch ($dbms)			{				case 'mysql_40':				case 'mysql_41':				case 'postgres':					$line .= "\tPRIMARY KEY (" . implode(', ', $table_data['PRIMARY_KEY']) . "),\n";				break;				case 'firebird':					$line .= "ALTER TABLE {$table_name} ADD PRIMARY KEY (" . implode(', ', $table_data['PRIMARY_KEY']) . ");;\n\n";				break;				case 'sqlite':					if ($generator === false || !in_array($generator, $table_data['PRIMARY_KEY']))					{						$line .= "\tPRIMARY KEY (" . implode(', ', $table_data['PRIMARY_KEY']) . "),\n";					}				break;				case 'mssql':					$line .= "ALTER TABLE [{$table_name}] WITH NOCHECK ADD \n";					$line .= "\tCONSTRAINT [PK_{$table_name}] PRIMARY KEY  CLUSTERED \n";					$line .= "\t(\n";					$line .= "\t\t[" . implode("],\n\t\t[", $table_data['PRIMARY_KEY']) . "]\n";					$line .= "\t)  ON [PRIMARY] \n";					$line .= "GO\n\n";				break;				case 'oracle':					$line .= "\tCONSTRAINT pk_{$table_name} PRIMARY KEY (" . implode(', ', $table_data['PRIMARY_KEY']) . "),\n";				break;			}		}		switch ($dbms)		{			case 'oracle':				// UNIQUE contrains to be added?				if (isset($table_data['KEYS']))				{					foreach ($table_data['KEYS'] as $key_name => $key_data)					{						if (!is_array($key_data[1]))						{							$key_data[1] = array($key_data[1]);						}						if ($key_data[0] == 'UNIQUE')						{							$line .= "\tCONSTRAINT u_phpbb_{$key_name} UNIQUE (" . implode(', ', $key_data[1]) . "),\n";						}					}				}				// Remove last line delimiter...				$line = substr($line, 0, -2);				$line .= "\n)\n/\n\n";			break;			case 'postgres':				// Remove last line delimiter...				$line = substr($line, 0, -2);				$line .= "\n);\n\n";			break;			case 'sqlite':				// Remove last line delimiter...				$line = substr($line, 0, -2);				$line .= "\n);\n\n";			break;		}		// Write Keys		if (isset($table_data['KEYS']))		{			foreach ($table_data['KEYS'] as $key_name => $key_data)			{				if (!is_array($key_data[1]))				{					$key_data[1] = array($key_data[1]);				}				if (strlen($table_name . $key_name) > 30)				{					trigger_error("Index name '${table_name}_$key_name' on table '$table_name' is too long. The maximum is 30 characters.", E_USER_ERROR);				}				switch ($dbms)				{					case 'mysql_40':					case 'mysql_41':						$line .= ($key_data[0] == 'INDEX') ? "\tKEY" : '';						$line .= ($key_data[0] == 'UNIQUE') ? "\tUNIQUE" : '';						foreach ($key_data[1] as $key => $col_name)						{							if (isset($modded_array[$col_name]))							{								switch ($modded_array[$col_name])								{									case 'text':									case 'blob':										$key_data[1][$key] = $col_name . '(255)';									break;								}							}						}						$line .= ' ' . $key_name . ' (' . implode(', ', $key_data[1]) . "),\n";					break;					case 'firebird':						$line .= ($key_data[0] == 'INDEX') ? 'CREATE INDEX' : '';						$line .= ($key_data[0] == 'UNIQUE') ? 'CREATE UNIQUE INDEX' : '';						$line .= ' ' . $table_name . '_' . $key_name . ' ON ' . $table_name . '(' . implode(', ', $key_data[1]) . ");;\n";					break;					case 'mssql':						$line .= ($key_data[0] == 'INDEX') ? 'CREATE  INDEX' : '';						$line .= ($key_data[0] == 'UNIQUE') ? 'CREATE  UNIQUE  INDEX' : '';						$line .= " [{$key_name}] ON [{$table_name}]([" . implode('], [', $key_data[1]) . "]) ON [PRIMARY]\n";						$line .= "GO\n\n";					break;					case 'oracle':						if ($key_data[0] == 'UNIQUE')						{							continue;						}						$line .= ($key_data[0] == 'INDEX') ? 'CREATE INDEX' : '';						$line .= " {$table_name}_{$key_name} ON {$table_name} (" . implode(', ', $key_data[1]) . ")\n";						$line .= "/\n";					break;					case 'sqlite':						$line .= ($key_data[0] == 'INDEX') ? 'CREATE INDEX' : '';						$line .= ($key_data[0] == 'UNIQUE') ? 'CREATE UNIQUE INDEX' : '';						$line .= " {$table_name}_{$key_name} ON {$table_name} (" . implode(', ', $key_data[1]) . ");\n";					break;					case 'postgres':						$line .= ($key_data[0] == 'INDEX') ? 'CREATE INDEX' : '';						$line .= ($key_data[0] == 'UNIQUE') ? 'CREATE UNIQUE INDEX' : '';						$line .= " {$table_name}_{$key_name} ON {$table_name} (" . implode(', ', $key_data[1]) . ");\n";					break;				}			}		}		switch ($dbms)		{			case 'mysql_40':				// Remove last line delimiter...				$line = substr($line, 0, -2);				$line .= "\n);\n\n";			break;			case 'mysql_41':				// Remove last line delimiter...				$line = substr($line, 0, -2);				$line .= "\n) CHARACTER SET `utf8` COLLATE `utf8_bin`;\n\n";			break;			// Create Generator			case 'firebird':				if ($generator !== false)				{					$line .= "\nCREATE GENERATOR {$table_name}_gen;;\n";					$line .= 'SET GENERATOR ' . $table_name . "_gen TO 0;;\n\n";					$line .= 'CREATE TRIGGER t_' . $table_name . ' FOR ' . $table_name . "\n";					$line .= "BEFORE INSERT\nAS\nBEGIN\n";					$line .= "\tNEW.{$generator} = GEN_ID({$table_name}_gen, 1);\nEND;;\n\n";				}			break;			case 'oracle':				if ($generator !== false)				{					$line .= "\nCREATE SEQUENCE {$table_name}_seq\n/\n\n";					$line .= "CREATE OR REPLACE TRIGGER t_{$table_name}\n";					$line .= "BEFORE INSERT ON {$table_name}\n";					$line .= "FOR EACH ROW WHEN (\n";					$line .= "\tnew.{$generator} IS NULL OR new.{$generator} = 0\n";					$line .= ")\nBEGIN\n";					$line .= "\tSELECT {$table_name}_seq.nextval\n";					$line .= "\tINTO :new.{$generator}\n";					$line .= "\tFROM dual;\nEND;\n/\n\n";				}			break;		}		fwrite($fp, $line . "\n");	}	$line = '';	// Write custom function at the end for some db's	switch ($dbms)	{		case 'mssql':			// No need to do this, no transaction support for schema changes			//$line = "\nCOMMIT\nGO\n\n";		break;		case 'sqlite':			$line = "\nCOMMIT;";		break;		case 'postgres':			$line = "\nCOMMIT;";		break;	}	fwrite($fp, $line);	fclose($fp);}/*** Define the basic structure* The format:*		array('{TABLE_NAME}' => {TABLE_DATA})*		{TABLE_DATA}:*			COLUMNS = array({column_name} = array({column_type}, {default}, {auto_increment}))*			PRIMARY_KEY = {column_name(s)}*			KEYS = array({key_name} = array({key_type}, {column_name(s)})),**	Column Types:*	INT:x		=> SIGNED int(x)*	BINT		=> BIGINT*	UINT		=> mediumint(8) UNSIGNED*	UINT:x		=> int(x) UNSIGNED*	TINT:x		=> tinyint(x)*	USINT		=> smallint(4) UNSIGNED (for _order columns)*	BOOL		=> tinyint(1) UNSIGNED*	VCHAR		=> varchar(255)*	CHAR:x		=> char(x)*	XSTEXT_UNI	=> text for storing 100 characters (topic_title for example)*	STEXT_UNI	=> text for storing 255 characters (normal input field with a max of 255 single-byte chars) - same as VCHAR_UNI*	TEXT_UNI	=> text for storing 3000 characters (short text, descriptions, comments, etc.)*	MTEXT_UNI	=> mediumtext (post text, large text)*	VCHAR:x		=> varchar(x)*	TIMESTAMP	=> int(11) UNSIGNED*	DECIMAL		=> decimal number (5,2)*	DECIMAL:	=> decimal number (x,2)*	PDECIMAL	=> precision decimal number (6,3)*	PDECIMAL:	=> precision decimal number (x,3)*	VCHAR_UNI	=> varchar(255) BINARY*	VCHAR_CI	=> varchar_ci for postgresql, others VCHAR*/function get_schema_struct(){	$schema_data = array();	$schema_data['phpbb_attachments'] = array(		'COLUMNS'		=> array(			'attach_id'			=> array('UINT', NULL, 'auto_increment'),			'post_msg_id'		=> array('UINT', 0),			'topic_id'			=> array('UINT', 0),			'in_message'		=> array('BOOL', 0),			'poster_id'			=> array('UINT', 0),			'is_orphan'			=> array('BOOL', 1),			'physical_filename'	=> array('VCHAR', ''),			'real_filename'		=> array('VCHAR', ''),			'download_count'	=> array('UINT', 0),			'attach_comment'	=> array('TEXT_UNI', ''),			'extension'			=> array('VCHAR:100', ''),			'mimetype'			=> array('VCHAR:100', ''),			'filesize'			=> array('UINT:20', 0),			'filetime'			=> array('TIMESTAMP', 0),			'thumbnail'			=> array('BOOL', 0),		),		'PRIMARY_KEY'	=> 'attach_id',		'KEYS'			=> array(			'filetime'			=> array('INDEX', 'filetime'),			'post_msg_id'		=> array('INDEX', 'post_msg_id'),			'topic_id'			=> array('INDEX', 'topic_id'),			'poster_id'			=> array('INDEX', 'poster_id'),			'is_orphan'			=> array('INDEX', 'is_orphan'),		),	);	$schema_data['phpbb_acl_groups'] = array(		'COLUMNS'		=> array(			'group_id'			=> array('UINT', 0),			'forum_id'			=> array('UINT', 0),			'auth_option_id'	=> array('UINT', 0),			'auth_role_id'		=> array('UINT', 0),			'auth_setting'		=> array('TINT:2', 0),		),		'KEYS'			=> array(			'group_id'		=> array('INDEX', 'group_id'),			'auth_opt_id'	=> array('INDEX', 'auth_option_id'),			'auth_role_id'	=> array('INDEX', 'auth_role_id'),		),	);	$schema_data['phpbb_acl_options'] = array(		'COLUMNS'		=> array(			'auth_option_id'	=> array('UINT', NULL, 'auto_increment'),			'auth_option'		=> array('VCHAR:50', ''),			'is_global'			=> array('BOOL', 0),			'is_local'			=> array('BOOL', 0),			'founder_only'		=> array('BOOL', 0),		),		'PRIMARY_KEY'	=> 'auth_option_id',		'KEYS'			=> array(			'auth_option'		=> array('UNIQUE', 'auth_option'),		),	);	$schema_data['phpbb_acl_roles'] = array(		'COLUMNS'		=> array(			'role_id'			=> array('UINT', NULL, 'auto_increment'),			'role_name'			=> array('VCHAR_UNI', ''),			'role_description'	=> array('TEXT_UNI', ''),			'role_type'			=> array('VCHAR:10', ''),			'role_order'		=> array('USINT', 0),		),		'PRIMARY_KEY'	=> 'role_id',		'KEYS'			=> array(			'role_type'			=> array('INDEX', 'role_type'),			'role_order'		=> array('INDEX', 'role_order'),		),	);	$schema_data['phpbb_acl_roles_data'] = array(		'COLUMNS'		=> array(			'role_id'			=> array('UINT', 0),			'auth_option_id'	=> array('UINT', 0),			'auth_setting'		=> array('TINT:2', 0),		),		'PRIMARY_KEY'	=> array('role_id', 'auth_option_id'),		'KEYS'			=> array(			'ath_op_id'			=> array('INDEX', 'auth_option_id'),		),	);	$schema_data['phpbb_acl_users'] = array(		'COLUMNS'		=> array(			'user_id'			=> array('UINT', 0),			'forum_id'			=> array('UINT', 0),			'auth_option_id'	=> array('UINT', 0),			'auth_role_id'		=> array('UINT', 0),			'auth_setting'		=> array('TINT:2', 0),		),		'KEYS'			=> array(			'user_id'			=> array('INDEX', 'user_id'),			'auth_option_id'	=> array('INDEX', 'auth_option_id'),			'auth_role_id'		=> array('INDEX', 'auth_role_id'),		),	);	$schema_data['phpbb_banlist'] = array(		'COLUMNS'		=> array(			'ban_id'			=> array('UINT', NULL, 'auto_increment'),			'ban_userid'		=> array('UINT', 0),			'ban_ip'			=> array('VCHAR:40', ''),			'ban_email'			=> array('VCHAR_UNI:100', ''),			'ban_start'			=> array('TIMESTAMP', 0),			'ban_end'			=> array('TIMESTAMP', 0),			'ban_exclude'		=> array('BOOL', 0),			'ban_reason'		=> array('VCHAR_UNI', ''),			'ban_give_reason'	=> array('VCHAR_UNI', ''),		),		'PRIMARY_KEY'			=> 'ban_id',		'KEYS'			=> array(			'ban_end'			=> array('INDEX', 'ban_end'),			'ban_user'			=> array('INDEX', array('ban_userid', 'ban_exclude')),			'ban_email'			=> array('INDEX', array('ban_email', 'ban_exclude')),			'ban_ip'			=> array('INDEX', array('ban_ip', 'ban_exclude')),		),	);	$schema_data['phpbb_bbcodes'] = array(		'COLUMNS'		=> array(			'bbcode_id'				=> array('USINT', 0),			'bbcode_tag'			=> array('VCHAR:16', ''),			'bbcode_helpline'		=> array('VCHAR_UNI', ''),			'display_on_posting'	=> array('BOOL', 0),			'bbcode_match'			=> array('TEXT_UNI', ''),			'bbcode_tpl'			=> array('MTEXT_UNI', ''),			'first_pass_match'		=> array('MTEXT_UNI', ''),			'first_pass_replace'	=> array('MTEXT_UNI', ''),			'second_pass_match'		=> array('MTEXT_UNI', ''),			'second_pass_replace'	=> array('MTEXT_UNI', ''),		),		'PRIMARY_KEY'	=> 'bbcode_id',		'KEYS'			=> array(			'display_on_post'		=> array('INDEX', 'display_on_posting'),		),	);	$schema_data['phpbb_bookmarks'] = array(		'COLUMNS'		=> array(			'topic_id'			=> array('UINT', 0),			'user_id'			=> array('UINT', 0),		),		'PRIMARY_KEY'			=> array('topic_id', 'user_id'),	);	$schema_data['phpbb_bots'] = array(		'COLUMNS'		=> array(			'bot_id'			=> array('UINT', NULL, 'auto_increment'),			'bot_active'		=> array('BOOL', 1),			'bot_name'			=> array('STEXT_UNI', ''),			'user_id'			=> array('UINT', 0),			'bot_agent'			=> array('VCHAR', ''),			'bot_ip'			=> array('VCHAR', ''),		),		'PRIMARY_KEY'	=> 'bot_id',		'KEYS'			=> array(			'bot_active'		=> array('INDEX', 'bot_active'),		),	);	$schema_data['phpbb_config'] = array(		'COLUMNS'		=> array(			'config_name'		=> array('VCHAR', ''),			'config_value'		=> array('VCHAR_UNI', ''),			'is_dynamic'		=> array('BOOL', 0),		),		'PRIMARY_KEY'	=> 'config_name',		'KEYS'			=> array(			'is_dynamic'		=> array('INDEX', 'is_dynamic'),		),	);	$schema_data['phpbb_confirm'] = array(		'COLUMNS'		=> array(			'confirm_id'		=> array('CHAR:32', ''),			'session_id'		=> array('CHAR:32', ''),			'confirm_type'		=> array('TINT:3', 0),			'code'				=> array('VCHAR:8', ''),			'seed'				=> array('UINT:10', 0),			'attempts'			=> array('UINT', 0),		),		'PRIMARY_KEY'	=> array('session_id', 'confirm_id'),		'KEYS'			=> array(			'confirm_type'		=> array('INDEX', 'confirm_type'),		),	);	$schema_data['phpbb_disallow'] = array(		'COLUMNS'		=> array(			'disallow_id'		=> array('UINT', NULL, 'auto_increment'),			'disallow_username'	=> array('VCHAR_UNI:255', ''),		),		'PRIMARY_KEY'	=> 'disallow_id',	);	$schema_data['phpbb_drafts'] = array(		'COLUMNS'		=> array(			'draft_id'			=> array('UINT', NULL, 'auto_increment'),			'user_id'			=> array('UINT', 0),			'topic_id'			=> array('UINT', 0),			'forum_id'			=> array('UINT', 0),			'save_time'			=> array('TIMESTAMP', 0),			'draft_subject'		=> array('STEXT_UNI', ''),			'draft_message'		=> array('MTEXT_UNI', ''),		),		'PRIMARY_KEY'	=> 'draft_id',		'KEYS'			=> array(			'save_time'			=> array('INDEX', 'save_time'),		),	);	$schema_data['phpbb_extensions'] = array(		'COLUMNS'		=> array(			'extension_id'		=> array('UINT', NULL, 'auto_increment'),			'group_id'			=> array('UINT', 0),			'extension'			=> array('VCHAR:100', ''),		),		'PRIMARY_KEY'	=> 'extension_id',	);	$schema_data['phpbb_extension_groups'] = array(		'COLUMNS'		=> array(			'group_id'			=> array('UINT', NULL, 'auto_increment'),			'group_name'		=> array('VCHAR_UNI', ''),			'cat_id'			=> array('TINT:2', 0),			'allow_group'		=> array('BOOL', 0),			'download_mode'		=> array('BOOL', 1),			'upload_icon'		=> array('VCHAR', ''),			'max_filesize'		=> array('UINT:20', 0),			'allowed_forums'	=> array('TEXT', ''),			'allow_in_pm'		=> array('BOOL', 0),		),		'PRIMARY_KEY'	=> 'group_id',	);	$schema_data['phpbb_forums'] = array(		'COLUMNS'		=> array(			'forum_id'				=> array('UINT', NULL, 'auto_increment'),			'parent_id'				=> array('UINT', 0),			'left_id'				=> array('UINT', 0),			'right_id'				=> array('UINT', 0),			'forum_parents'			=> array('MTEXT', ''),			'forum_name'			=> array('STEXT_UNI', ''),			'forum_desc'			=> array('TEXT_UNI', ''),			'forum_desc_bitfield'	=> array('VCHAR:255', ''),			'forum_desc_options'	=> array('UINT:11', 7),			'forum_desc_uid'		=> array('VCHAR:8', ''),			'forum_link'			=> array('VCHAR_UNI', ''),			'forum_password'		=> array('VCHAR_UNI:40', ''),			'forum_style'			=> array('UINT', 0),			'forum_image'			=> array('VCHAR', ''),			'forum_rules'			=> array('TEXT_UNI', ''),			'forum_rules_link'		=> array('VCHAR_UNI', ''),			'forum_rules_bitfield'	=> array('VCHAR:255', ''),			'forum_rules_options'	=> array('UINT:11', 7),			'forum_rules_uid'		=> array('VCHAR:8', ''),			'forum_topics_per_page'	=> array('TINT:4', 0),			'forum_type'			=> array('TINT:4', 0),			'forum_status'			=> array('TINT:4', 0),			'forum_posts'			=> array('UINT', 0),			'forum_topics'			=> array('UINT', 0),			'forum_topics_real'		=> array('UINT', 0),			'forum_last_post_id'	=> array('UINT', 0),			'forum_last_poster_id'	=> array('UINT', 0),			'forum_last_post_subject' => array('STEXT_UNI', ''),			'forum_last_post_time'	=> array('TIMESTAMP', 0),			'forum_last_poster_name'=> array('VCHAR_UNI', ''),			'forum_last_poster_colour'=> array('VCHAR:6', ''),			'forum_flags'			=> array('TINT:4', 32),			'forum_options'			=> array('UINT:20', 0),			'display_subforum_list'	=> array('BOOL', 1),			'display_on_index'		=> array('BOOL', 1),			'enable_indexing'		=> array('BOOL', 1),			'enable_icons'			=> array('BOOL', 1),			'enable_prune'			=> array('BOOL', 0),			'prune_next'			=> array('TIMESTAMP', 0),			'prune_days'			=> array('UINT', 0),			'prune_viewed'			=> array('UINT', 0),			'prune_freq'			=> array('UINT', 0),		),		'PRIMARY_KEY'	=> 'forum_id',		'KEYS'			=> array(			'left_right_id'			=> array('INDEX', array('left_id', 'right_id')),			'forum_lastpost_id'		=> array('INDEX', 'forum_last_post_id'),		),	);	$schema_data['phpbb_forums_access'] = array(		'COLUMNS'		=> array(			'forum_id'				=> array('UINT', 0),			'user_id'				=> array('UINT', 0),			'session_id'			=> array('CHAR:32', ''),		),		'PRIMARY_KEY'	=> array('forum_id', 'user_id', 'session_id'),	);	$schema_data['phpbb_forums_track'] = array(		'COLUMNS'		=> array(			'user_id'				=> array('UINT', 0),			'forum_id'				=> array('UINT', 0),			'mark_time'				=> array('TIMESTAMP', 0),		),		'PRIMARY_KEY'	=> array('user_id', 'forum_id'),	);	$schema_data['phpbb_forums_watch'] = array(		'COLUMNS'		=> array(			'forum_id'				=> array('UINT', 0),			'user_id'				=> array('UINT', 0),			'notify_status'			=> array('BOOL', 0),		),		'KEYS'			=> array(			'forum_id'				=> array('INDEX', 'forum_id'),			'user_id'				=> array('INDEX', 'user_id'),			'notify_stat'			=> array('INDEX', 'notify_status'),		),	);	$schema_data['phpbb_groups'] = array(		'COLUMNS'		=> array(			'group_id'				=> array('UINT', NULL, 'auto_increment'),			'group_type'			=> array('TINT:4', 1),			'group_founder_manage'	=> array('BOOL', 0),			'group_skip_auth'		=> array('BOOL', 0),			'group_name'			=> array('VCHAR_CI', ''),			'group_desc'			=> array('TEXT_UNI', ''),			'group_desc_bitfield'	=> array('VCHAR:255', ''),			'group_desc_options'	=> array('UINT:11', 7),			'group_desc_uid'		=> array('VCHAR:8', ''),			'group_display'			=> array('BOOL', 0),			'group_avatar'			=> array('VCHAR', ''),			'group_avatar_type'		=> array('TINT:2', 0),			'group_avatar_width'	=> array('USINT', 0),			'group_avatar_height'	=> array('USINT', 0),			'group_rank'			=> array('UINT', 0),			'group_colour'			=> array('VCHAR:6', ''),			'group_sig_chars'		=> array('UINT', 0),			'group_receive_pm'		=> array('BOOL', 0),			'group_message_limit'	=> array('UINT', 0),			'group_max_recipients'	=> array('UINT', 0),			'group_legend'			=> array('BOOL', 1),		),		'PRIMARY_KEY'	=> 'group_id',		'KEYS'			=> array(			'group_legend_name'		=> array('INDEX', array('group_legend', 'group_name')),		),	);	$schema_data['phpbb_icons'] = array(		'COLUMNS'		=> array(			'icons_id'				=> array('UINT', NULL, 'auto_increment'),			'icons_url'				=> array('VCHAR', ''),			'icons_width'			=> array('TINT:4', 0),			'icons_height'			=> array('TINT:4', 0),			'icons_order'			=> array('UINT', 0),			'display_on_posting'	=> array('BOOL', 1),		),		'PRIMARY_KEY'	=> 'icons_id',		'KEYS'			=> array(			'display_on_posting'	=> array('INDEX', 'display_on_posting'),		),	);	$schema_data['phpbb_lang'] = array(		'COLUMNS'		=> array(			'lang_id'				=> array('TINT:4', NULL, 'auto_increment'),			'lang_iso'				=> array('VCHAR:30', ''),			'lang_dir'				=> array('VCHAR:30', ''),			'lang_english_name'		=> array('VCHAR_UNI:100', ''),			'lang_local_name'		=> array('VCHAR_UNI:255', ''),			'lang_author'			=> array('VCHAR_UNI:255', ''),		),		'PRIMARY_KEY'	=> 'lang_id',		'KEYS'			=> array(			'lang_iso'				=> array('INDEX', 'lang_iso'),		),	);	$schema_data['phpbb_log'] = array(		'COLUMNS'		=> array(			'log_id'				=> array('UINT', NULL, 'auto_increment'),			'log_type'				=> array('TINT:4', 0),			'user_id'				=> array('UINT', 0),			'forum_id'				=> array('UINT', 0),			'topic_id'				=> array('UINT', 0),			'reportee_id'			=> array('UINT', 0),			'log_ip'				=> array('VCHAR:40', ''),			'log_time'				=> array('TIMESTAMP', 0),			'log_operation'			=> array('TEXT_UNI', ''),			'log_data'				=> array('MTEXT_UNI', ''),		),		'PRIMARY_KEY'	=> 'log_id',		'KEYS'			=> array(			'log_type'				=> array('INDEX', 'log_type'),			'forum_id'				=> array('INDEX', 'forum_id'),			'topic_id'				=> array('INDEX', 'topic_id'),			'reportee_id'			=> array('INDEX', 'reportee_id'),			'user_id'				=> array('INDEX', 'user_id'),		),	);	$schema_data['phpbb_login_attempts'] = array(		'COLUMNS'		=> array(			'attempt_ip'			=> array('VCHAR:40', ''),			'attempt_browser'		=> array('VCHAR:150', ''),			'attempt_forwarded_for'	=> array('VCHAR:255', ''),			'attempt_time'			=> array('TIMESTAMP', 0),			'user_id'				=> array('UINT', 0),			'username'				=> array('VCHAR_UNI:255', 0),			'username_clean'		=> array('VCHAR_CI', 0),		),		'KEYS'			=> array(			'att_ip'				=> array('INDEX', array('attempt_ip', 'attempt_time')),			'att_for'		=> array('INDEX', array('attempt_forwarded_for', 'attempt_time')),			'att_time'				=> array('INDEX', array('attempt_time')),			'user_id'					=> array('INDEX', 'user_id'),		),	);	$schema_data['phpbb_moderator_cache'] = array(		'COLUMNS'		=> array(			'forum_id'				=> array('UINT', 0),			'user_id'				=> array('UINT', 0),			'username'				=> array('VCHAR_UNI:255', ''),			'group_id'				=> array('UINT', 0),			'group_name'			=> array('VCHAR_UNI', ''),			'display_on_index'		=> array('BOOL', 1),		),		'KEYS'			=> array(			'disp_idx'				=> array('INDEX', 'display_on_index'),			'forum_id'				=> array('INDEX', 'forum_id'),		),	);	$schema_data['phpbb_modules'] = array(		'COLUMNS'		=> array(			'module_id'				=> array('UINT', NULL, 'auto_increment'),			'module_enabled'		=> array('BOOL', 1),			'module_display'		=> array('BOOL', 1),			'module_basename'		=> array('VCHAR', ''),			'module_class'			=> array('VCHAR:10', ''),			'parent_id'				=> array('UINT', 0),			'left_id'				=> array('UINT', 0),			'right_id'				=> array('UINT', 0),			'module_langname'		=> array('VCHAR', ''),			'module_mode'			=> array('VCHAR', ''),			'module_auth'			=> array('VCHAR', ''),		),		'PRIMARY_KEY'	=> 'module_id',		'KEYS'			=> array(			'left_right_id'			=> array('INDEX', array('left_id', 'right_id')),			'module_enabled'		=> array('INDEX', 'module_enabled'),			'class_left_id'			=> array('INDEX', array('module_class', 'left_id')),		),	);	$schema_data['phpbb_poll_options'] = array(		'COLUMNS'		=> array(			'poll_option_id'		=> array('TINT:4', 0),			'topic_id'				=> array('UINT', 0),			'poll_option_text'		=> array('TEXT_UNI', ''),			'poll_option_total'		=> array('UINT', 0),		),		'KEYS'			=> array(			'poll_opt_id'			=> array('INDEX', 'poll_option_id'),			'topic_id'				=> array('INDEX', 'topic_id'),		),	);	$schema_data['phpbb_poll_votes'] = array(		'COLUMNS'		=> array(			'topic_id'				=> array('UINT', 0),			'poll_option_id'		=> array('TINT:4', 0),			'vote_user_id'			=> array('UINT', 0),			'vote_user_ip'			=> array('VCHAR:40', ''),		),		'KEYS'			=> array(			'topic_id'				=> array('INDEX', 'topic_id'),			'vote_user_id'			=> array('INDEX', 'vote_user_id'),			'vote_user_ip'			=> array('INDEX', 'vote_user_ip'),		),	);	$schema_data['phpbb_posts'] = array(		'COLUMNS'		=> array(			'post_id'				=> array('UINT', NULL, 'auto_increment'),			'topic_id'				=> array('UINT', 0),			'forum_id'				=> array('UINT', 0),			'poster_id'				=> array('UINT', 0),			'icon_id'				=> array('UINT', 0),			'poster_ip'				=> array('VCHAR:40', ''),			'post_time'				=> array('TIMESTAMP', 0),			'post_approved'			=> array('BOOL', 1),			'post_reported'			=> array('BOOL', 0),			'enable_bbcode'			=> array('BOOL', 1),			'enable_smilies'		=> array('BOOL', 1),			'enable_magic_url'		=> array('BOOL', 1),			'enable_sig'			=> array('BOOL', 1),			'post_username'			=> array('VCHAR_UNI:255', ''),			'post_subject'			=> array('STEXT_UNI', '', 'true_sort'),			'post_text'				=> array('MTEXT_UNI', ''),			'post_checksum'			=> array('VCHAR:32', ''),			'post_attachment'		=> array('BOOL', 0),			'bbcode_bitfield'		=> array('VCHAR:255', ''),			'bbcode_uid'			=> array('VCHAR:8', ''),			'post_postcount'		=> array('BOOL', 1),			'post_edit_time'		=> array('TIMESTAMP', 0),			'post_edit_reason'		=> array('STEXT_UNI', ''),			'post_edit_user'		=> array('UINT', 0),			'post_edit_count'		=> array('USINT', 0),			'post_edit_locked'		=> array('BOOL', 0),		),		'PRIMARY_KEY'	=> 'post_id',		'KEYS'			=> array(			'forum_id'				=> array('INDEX', 'forum_id'),			'topic_id'				=> array('INDEX', 'topic_id'),			'poster_ip'				=> array('INDEX', 'poster_ip'),			'poster_id'				=> array('INDEX', 'poster_id'),			'post_approved'			=> array('INDEX', 'post_approved'),			'post_username'			=> array('INDEX', 'post_username'),			'tid_post_time'			=> array('INDEX', array('topic_id', 'post_time')),		),	);	$schema_data['phpbb_privmsgs'] = array(		'COLUMNS'		=> array(			'msg_id'				=> array('UINT', NULL, 'auto_increment'),			'root_level'			=> array('UINT', 0),			'author_id'				=> array('UINT', 0),			'icon_id'				=> array('UINT', 0),			'author_ip'				=> array('VCHAR:40', ''),			'message_time'			=> array('TIMESTAMP', 0),			'enable_bbcode'			=> array('BOOL', 1),			'enable_smilies'		=> array('BOOL', 1),			'enable_magic_url'		=> array('BOOL', 1),			'enable_sig'			=> array('BOOL', 1),			'message_subject'		=> array('STEXT_UNI', ''),			'message_text'			=> array('MTEXT_UNI', ''),			'message_edit_reason'	=> array('STEXT_UNI', ''),			'message_edit_user'		=> array('UINT', 0),			'message_attachment'	=> array('BOOL', 0),			'bbcode_bitfield'		=> array('VCHAR:255', ''),			'bbcode_uid'			=> array('VCHAR:8', ''),			'message_edit_time'		=> array('TIMESTAMP', 0),			'message_edit_count'	=> array('USINT', 0),			'to_address'			=> array('TEXT_UNI', ''),			'bcc_address'			=> array('TEXT_UNI', ''),			'message_reported'		=> array('BOOL', 0),		),		'PRIMARY_KEY'	=> 'msg_id',		'KEYS'			=> array(			'author_ip'				=> array('INDEX', 'author_ip'),			'message_time'			=> array('INDEX', 'message_time'),			'author_id'				=> array('INDEX', 'author_id'),			'root_level'			=> array('INDEX', 'root_level'),		),	);	$schema_data['phpbb_privmsgs_folder'] = array(		'COLUMNS'		=> array(			'folder_id'				=> array('UINT', NULL, 'auto_increment'),			'user_id'				=> array('UINT', 0),			'folder_name'			=> array('VCHAR_UNI', ''),			'pm_count'				=> array('UINT', 0),		),		'PRIMARY_KEY'	=> 'folder_id',		'KEYS'			=> array(			'user_id'				=> array('INDEX', 'user_id'),		),	);	$schema_data['phpbb_privmsgs_rules'] = array(		'COLUMNS'		=> array(			'rule_id'				=> array('UINT', NULL, 'auto_increment'),			'user_id'				=> array('UINT', 0),			'rule_check'			=> array('UINT', 0),			'rule_connection'		=> array('UINT', 0),			'rule_string'			=> array('VCHAR_UNI', ''),			'rule_user_id'			=> array('UINT', 0),			'rule_group_id'			=> array('UINT', 0),			'rule_action'			=> array('UINT', 0),			'rule_folder_id'		=> array('INT:11', 0),		),		'PRIMARY_KEY'	=> 'rule_id',		'KEYS'			=> array(			'user_id'				=> array('INDEX', 'user_id'),		),	);	$schema_data['phpbb_privmsgs_to'] = array(		'COLUMNS'		=> array(			'msg_id'				=> array('UINT', 0),			'user_id'				=> array('UINT', 0),			'author_id'				=> array('UINT', 0),			'pm_deleted'			=> array('BOOL', 0),			'pm_new'				=> array('BOOL', 1),			'pm_unread'				=> array('BOOL', 1),			'pm_replied'			=> array('BOOL', 0),			'pm_marked'				=> array('BOOL', 0),			'pm_forwarded'			=> array('BOOL', 0),			'folder_id'				=> array('INT:11', 0),		),		'KEYS'			=> array(			'msg_id'				=> array('INDEX', 'msg_id'),			'author_id'				=> array('INDEX', 'author_id'),			'usr_flder_id'			=> array('INDEX', array('user_id', 'folder_id')),		),	);	$schema_data['phpbb_profile_fields'] = array(		'COLUMNS'		=> array(			'field_id'				=> array('UINT', NULL, 'auto_increment'),			'field_name'			=> array('VCHAR_UNI', ''),			'field_type'			=> array('TINT:4', 0),			'field_ident'			=> array('VCHAR:20', ''),			'field_length'			=> array('VCHAR:20', ''),			'field_minlen'			=> array('VCHAR', ''),			'field_maxlen'			=> array('VCHAR', ''),			'field_novalue'			=> array('VCHAR_UNI', ''),			'field_default_value'	=> array('VCHAR_UNI', ''),			'field_validation'		=> array('VCHAR_UNI:20', ''),			'field_required'		=> array('BOOL', 0),			'field_show_on_reg'		=> array('BOOL', 0),			'field_show_on_vt'		=> array('BOOL', 0),			'field_show_profile'	=> array('BOOL', 0),			'field_hide'			=> array('BOOL', 0),			'field_no_view'			=> array('BOOL', 0),			'field_active'			=> array('BOOL', 0),			'field_order'			=> array('UINT', 0),		),		'PRIMARY_KEY'	=> 'field_id',		'KEYS'			=> array(			'fld_type'			=> array('INDEX', 'field_type'),			'fld_ordr'			=> array('INDEX', 'field_order'),		),	);	$schema_data['phpbb_profile_fields_data'] = array(		'COLUMNS'		=> array(			'user_id'				=> array('UINT', 0),		),		'PRIMARY_KEY'	=> 'user_id',	);	$schema_data['phpbb_profile_fields_lang'] = array(		'COLUMNS'		=> array(			'field_id'				=> array('UINT', 0),			'lang_id'				=> array('UINT', 0),			'option_id'				=> array('UINT', 0),			'field_type'			=> array('TINT:4', 0),			'lang_value'			=> array('VCHAR_UNI', ''),		),		'PRIMARY_KEY'	=> array('field_id', 'lang_id', 'option_id'),	);	$schema_data['phpbb_profile_lang'] = array(		'COLUMNS'		=> array(			'field_id'				=> array('UINT', 0),			'lang_id'				=> array('UINT', 0),			'lang_name'				=> array('VCHAR_UNI', ''),			'lang_explain'			=> array('TEXT_UNI', ''),			'lang_default_value'	=> array('VCHAR_UNI', ''),		),		'PRIMARY_KEY'	=> array('field_id', 'lang_id'),	);	$schema_data['phpbb_ranks'] = array(		'COLUMNS'		=> array(			'rank_id'				=> array('UINT', NULL, 'auto_increment'),			'rank_title'			=> array('VCHAR_UNI', ''),			'rank_min'				=> array('UINT', 0),			'rank_special'			=> array('BOOL', 0),			'rank_image'			=> array('VCHAR', ''),		),		'PRIMARY_KEY'	=> 'rank_id',	);	$schema_data['phpbb_reports'] = array(		'COLUMNS'		=> array(			'report_id'				=> array('UINT', NULL, 'auto_increment'),			'reason_id'				=> array('USINT', 0),			'post_id'				=> array('UINT', 0),			'pm_id'					=> array('UINT', 0),			'user_id'				=> array('UINT', 0),			'user_notify'			=> array('BOOL', 0),			'report_closed'			=> array('BOOL', 0),			'report_time'			=> array('TIMESTAMP', 0),			'report_text'			=> array('MTEXT_UNI', ''),		),		'PRIMARY_KEY'	=> 'report_id',		'KEYS'			=> array(			'post_id'			=> array('INDEX', 'post_id'),			'pm_id'				=> array('INDEX', 'pm_id'),		),	);	$schema_data['phpbb_reports_reasons'] = array(		'COLUMNS'		=> array(			'reason_id'				=> array('USINT', NULL, 'auto_increment'),			'reason_title'			=> array('VCHAR_UNI', ''),			'reason_description'	=> array('MTEXT_UNI', ''),			'reason_order'			=> array('USINT', 0),		),		'PRIMARY_KEY'	=> 'reason_id',	);	$schema_data['phpbb_search_results'] = array(		'COLUMNS'		=> array(			'search_key'			=> array('VCHAR:32', ''),			'search_time'			=> array('TIMESTAMP', 0),			'search_keywords'		=> array('MTEXT_UNI', ''),			'search_authors'		=> array('MTEXT', ''),		),		'PRIMARY_KEY'	=> 'search_key',	);	$schema_data['phpbb_search_wordlist'] = array(		'COLUMNS'		=> array(			'word_id'			=> array('UINT', NULL, 'auto_increment'),			'word_text'			=> array('VCHAR_UNI', ''),			'word_common'		=> array('BOOL', 0),			'word_count'		=> array('UINT', 0),		),		'PRIMARY_KEY'	=> 'word_id',		'KEYS'			=> array(			'wrd_txt'			=> array('UNIQUE', 'word_text'),			'wrd_cnt'			=> array('INDEX', 'word_count'),		),	);	$schema_data['phpbb_search_wordmatch'] = array(		'COLUMNS'		=> array(			'post_id'			=> array('UINT', 0),			'word_id'			=> array('UINT', 0),			'title_match'		=> array('BOOL', 0),		),		'KEYS'			=> array(			'unq_mtch'			=> array('UNIQUE', array('word_id', 'post_id', 'title_match')),			'word_id'			=> array('INDEX', 'word_id'),			'post_id'			=> array('INDEX', 'post_id'),		),	);	$schema_data['phpbb_sessions'] = array(		'COLUMNS'		=> array(			'session_id'			=> array('CHAR:32', ''),			'session_user_id'		=> array('UINT', 0),			'session_forum_id'		=> array('UINT', 0),			'session_last_visit'	=> array('TIMESTAMP', 0),			'session_start'			=> array('TIMESTAMP', 0),			'session_time'			=> array('TIMESTAMP', 0),			'session_ip'			=> array('VCHAR:40', ''),			'session_browser'		=> array('VCHAR:150', ''),			'session_forwarded_for'	=> array('VCHAR:255', ''),			'session_page'			=> array('VCHAR_UNI', ''),			'session_viewonline'	=> array('BOOL', 1),			'session_autologin'		=> array('BOOL', 0),			'session_admin'			=> array('BOOL', 0),		),		'PRIMARY_KEY'	=> 'session_id',		'KEYS'			=> array(			'session_time'		=> array('INDEX', 'session_time'),			'session_user_id'	=> array('INDEX', 'session_user_id'),			'session_fid'		=> array('INDEX', 'session_forum_id'),		),	);	$schema_data['phpbb_sessions_keys'] = array(		'COLUMNS'		=> array(			'key_id'			=> array('CHAR:32', ''),			'user_id'			=> array('UINT', 0),			'last_ip'			=> array('VCHAR:40', ''),			'last_login'		=> array('TIMESTAMP', 0),		),		'PRIMARY_KEY'	=> array('key_id', 'user_id'),		'KEYS'			=> array(			'last_login'		=> array('INDEX', 'last_login'),		),	);	$schema_data['phpbb_sitelist'] = array(		'COLUMNS'		=> array(			'site_id'		=> array('UINT', NULL, 'auto_increment'),			'site_ip'		=> array('VCHAR:40', ''),			'site_hostname'	=> array('VCHAR', ''),			'ip_exclude'	=> array('BOOL', 0),		),		'PRIMARY_KEY'		=> 'site_id',	);	$schema_data['phpbb_smilies'] = array(		'COLUMNS'		=> array(			'smiley_id'			=> array('UINT', NULL, 'auto_increment'),			// We may want to set 'code' to VCHAR:50 or check if unicode support is possible... at the moment only ASCII characters are allowed.			'code'				=> array('VCHAR_UNI:50', ''),			'emotion'			=> array('VCHAR_UNI:50', ''),			'smiley_url'		=> array('VCHAR:50', ''),			'smiley_width'		=> array('USINT', 0),			'smiley_height'		=> array('USINT', 0),			'smiley_order'		=> array('UINT', 0),			'display_on_posting'=> array('BOOL', 1),		),		'PRIMARY_KEY'	=> 'smiley_id',		'KEYS'			=> array(			'display_on_post'		=> array('INDEX', 'display_on_posting'),		),	);	$schema_data['phpbb_styles'] = array(		'COLUMNS'		=> array(			'style_id'				=> array('UINT', NULL, 'auto_increment'),			'style_name'			=> array('VCHAR_UNI:255', ''),			'style_copyright'		=> array('VCHAR_UNI', ''),			'style_active'			=> array('BOOL', 1),			'template_id'			=> array('UINT', 0),			'theme_id'				=> array('UINT', 0),			'imageset_id'			=> array('UINT', 0),		),		'PRIMARY_KEY'	=> 'style_id',		'KEYS'			=> array(			'style_name'		=> array('UNIQUE', 'style_name'),			'template_id'		=> array('INDEX', 'template_id'),			'theme_id'			=> array('INDEX', 'theme_id'),			'imageset_id'		=> array('INDEX', 'imageset_id'),		),	);	$schema_data['phpbb_styles_template'] = array(		'COLUMNS'		=> array(			'template_id'			=> array('UINT', NULL, 'auto_increment'),			'template_name'			=> array('VCHAR_UNI:255', ''),			'template_copyright'	=> array('VCHAR_UNI', ''),			'template_path'			=> array('VCHAR:100', ''),			'bbcode_bitfield'		=> array('VCHAR:255', 'kNg='),			'template_storedb'		=> array('BOOL', 0),			'template_inherits_id'		=> array('UINT:4', 0),			'template_inherit_path'		=> array('VCHAR', ''),		),		'PRIMARY_KEY'	=> 'template_id',		'KEYS'			=> array(			'tmplte_nm'				=> array('UNIQUE', 'template_name'),		),	);	$schema_data['phpbb_styles_template_data'] = array(		'COLUMNS'		=> array(			'template_id'			=> array('UINT', 0),			'template_filename'		=> array('VCHAR:100', ''),			'template_included'		=> array('TEXT', ''),			'template_mtime'		=> array('TIMESTAMP', 0),			'template_data'			=> array('MTEXT_UNI', ''),		),		'KEYS'			=> array(			'tid'					=> array('INDEX', 'template_id'),			'tfn'					=> array('INDEX', 'template_filename'),		),	);	$schema_data['phpbb_styles_theme'] = array(		'COLUMNS'		=> array(			'theme_id'				=> array('UINT', NULL, 'auto_increment'),			'theme_name'			=> array('VCHAR_UNI:255', ''),			'theme_copyright'		=> array('VCHAR_UNI', ''),			'theme_path'			=> array('VCHAR:100', ''),			'theme_storedb'			=> array('BOOL', 0),			'theme_mtime'			=> array('TIMESTAMP', 0),			'theme_data'			=> array('MTEXT_UNI', ''),		),		'PRIMARY_KEY'	=> 'theme_id',		'KEYS'			=> array(			'theme_name'		=> array('UNIQUE', 'theme_name'),		),	);	$schema_data['phpbb_styles_imageset'] = array(		'COLUMNS'		=> array(			'imageset_id'				=> array('UINT', NULL, 'auto_increment'),			'imageset_name'				=> array('VCHAR_UNI:255', ''),			'imageset_copyright'		=> array('VCHAR_UNI', ''),			'imageset_path'				=> array('VCHAR:100', ''),		),		'PRIMARY_KEY'		=> 'imageset_id',		'KEYS'				=> array(			'imgset_nm'			=> array('UNIQUE', 'imageset_name'),		),	);	$schema_data['phpbb_styles_imageset_data'] = array(		'COLUMNS'		=> array(			'image_id'				=> array('UINT', NULL, 'auto_increment'),			'image_name'			=> array('VCHAR:200', ''),			'image_filename'		=> array('VCHAR:200', ''),			'image_lang'			=> array('VCHAR:30', ''),			'image_height'			=> array('USINT', 0),			'image_width'			=> array('USINT', 0),			'imageset_id'			=> array('UINT', 0),		),		'PRIMARY_KEY'		=> 'image_id',		'KEYS'				=> array(			'i_d'			=> array('INDEX', 'imageset_id'),		),	);	$schema_data['phpbb_topics'] = array(		'COLUMNS'		=> array(			'topic_id'					=> array('UINT', NULL, 'auto_increment'),			'forum_id'					=> array('UINT', 0),			'icon_id'					=> array('UINT', 0),			'topic_attachment'			=> array('BOOL', 0),			'topic_approved'			=> array('BOOL', 1),			'topic_reported'			=> array('BOOL', 0),			'topic_title'				=> array('STEXT_UNI', '', 'true_sort'),			'topic_poster'				=> array('UINT', 0),			'topic_time'				=> array('TIMESTAMP', 0),			'topic_time_limit'			=> array('TIMESTAMP', 0),			'topic_views'				=> array('UINT', 0),			'topic_replies'				=> array('UINT', 0),			'topic_replies_real'		=> array('UINT', 0),			'topic_status'				=> array('TINT:3', 0),			'topic_type'				=> array('TINT:3', 0),			'topic_first_post_id'		=> array('UINT', 0),			'topic_first_poster_name'	=> array('VCHAR_UNI', ''),			'topic_first_poster_colour'	=> array('VCHAR:6', ''),			'topic_last_post_id'		=> array('UINT', 0),			'topic_last_poster_id'		=> array('UINT', 0),			'topic_last_poster_name'	=> array('VCHAR_UNI', ''),			'topic_last_poster_colour'	=> array('VCHAR:6', ''),			'topic_last_post_subject'	=> array('STEXT_UNI', ''),			'topic_last_post_time'		=> array('TIMESTAMP', 0),			'topic_last_view_time'		=> array('TIMESTAMP', 0),			'topic_moved_id'			=> array('UINT', 0),			'topic_bumped'				=> array('BOOL', 0),			'topic_bumper'				=> array('UINT', 0),			'poll_title'				=> array('STEXT_UNI', ''),			'poll_start'				=> array('TIMESTAMP', 0),			'poll_length'				=> array('TIMESTAMP', 0),			'poll_max_options'			=> array('TINT:4', 1),			'poll_last_vote'			=> array('TIMESTAMP', 0),			'poll_vote_change'			=> array('BOOL', 0),		),		'PRIMARY_KEY'	=> 'topic_id',		'KEYS'			=> array(			'forum_id'			=> array('INDEX', 'forum_id'),			'forum_id_type'		=> array('INDEX', array('forum_id', 'topic_type')),			'last_post_time'	=> array('INDEX', 'topic_last_post_time'),			'topic_approved'	=> array('INDEX', 'topic_approved'),			'forum_appr_last'	=> array('INDEX', array('forum_id', 'topic_approved', 'topic_last_post_id')),			'fid_time_moved'	=> array('INDEX', array('forum_id', 'topic_last_post_time', 'topic_moved_id')),		),	);	$schema_data['phpbb_topics_track'] = array(		'COLUMNS'		=> array(			'user_id'			=> array('UINT', 0),			'topic_id'			=> array('UINT', 0),			'forum_id'			=> array('UINT', 0),			'mark_time'			=> array('TIMESTAMP', 0),		),		'PRIMARY_KEY'	=> array('user_id', 'topic_id'),		'KEYS'			=> array(			'topic_id'			=> array('INDEX', 'topic_id'),			'forum_id'			=> array('INDEX', 'forum_id'),		),	);	$schema_data['phpbb_topics_posted'] = array(		'COLUMNS'		=> array(			'user_id'			=> array('UINT', 0),			'topic_id'			=> array('UINT', 0),			'topic_posted'		=> array('BOOL', 0),		),		'PRIMARY_KEY'	=> array('user_id', 'topic_id'),	);	$schema_data['phpbb_topics_watch'] = array(		'COLUMNS'		=> array(			'topic_id'			=> array('UINT', 0),			'user_id'			=> array('UINT', 0),			'notify_status'		=> array('BOOL', 0),		),		'KEYS'			=> array(			'topic_id'			=> array('INDEX', 'topic_id'),			'user_id'			=> array('INDEX', 'user_id'),			'notify_stat'		=> array('INDEX', 'notify_status'),		),	);	$schema_data['phpbb_user_group'] = array(		'COLUMNS'		=> array(			'group_id'			=> array('UINT', 0),			'user_id'			=> array('UINT', 0),			'group_leader'		=> array('BOOL', 0),			'user_pending'		=> array('BOOL', 1),		),		'KEYS'			=> array(			'group_id'			=> array('INDEX', 'group_id'),			'user_id'			=> array('INDEX', 'user_id'),			'group_leader'		=> array('INDEX', 'group_leader'),		),	);	$schema_data['phpbb_users'] = array(		'COLUMNS'		=> array(			'user_id'					=> array('UINT', NULL, 'auto_increment'),			'user_type'					=> array('TINT:2', 0),			'group_id'					=> array('UINT', 3),			'user_permissions'			=> array('MTEXT', ''),			'user_perm_from'			=> array('UINT', 0),			'user_ip'					=> array('VCHAR:40', ''),			'user_regdate'				=> array('TIMESTAMP', 0),			'username'					=> array('VCHAR_CI', ''),			'username_clean'			=> array('VCHAR_CI', ''),			'user_password'				=> array('VCHAR_UNI:40', ''),			'user_passchg'				=> array('TIMESTAMP', 0),			'user_pass_convert'			=> array('BOOL', 0),			'user_email'				=> array('VCHAR_UNI:100', ''),			'user_email_hash'			=> array('BINT', 0),			'user_birthday'				=> array('VCHAR:10', ''),			'user_lastvisit'			=> array('TIMESTAMP', 0),			'user_lastmark'				=> array('TIMESTAMP', 0),			'user_lastpost_time'		=> array('TIMESTAMP', 0),			'user_lastpage'				=> array('VCHAR_UNI:200', ''),			'user_last_confirm_key'		=> array('VCHAR:10', ''),			'user_last_search'			=> array('TIMESTAMP', 0),			'user_warnings'				=> array('TINT:4', 0),			'user_last_warning'			=> array('TIMESTAMP', 0),			'user_login_attempts'		=> array('TINT:4', 0),			'user_inactive_reason'		=> array('TINT:2', 0),			'user_inactive_time'		=> array('TIMESTAMP', 0),			'user_posts'				=> array('UINT', 0),			'user_lang'					=> array('VCHAR:30', ''),			'user_timezone'				=> array('DECIMAL', 0),			'user_dst'					=> array('BOOL', 0),			'user_dateformat'			=> array('VCHAR_UNI:30', 'd M Y H:i'),			'user_style'				=> array('UINT', 0),			'user_rank'					=> array('UINT', 0),			'user_colour'				=> array('VCHAR:6', ''),			'user_new_privmsg'			=> array('INT:4', 0),			'user_unread_privmsg'		=> array('INT:4', 0),			'user_last_privmsg'			=> array('TIMESTAMP', 0),			'user_message_rules'		=> array('BOOL', 0),			'user_full_folder'			=> array('INT:11', -3),			'user_emailtime'			=> array('TIMESTAMP', 0),			'user_topic_show_days'		=> array('USINT', 0),			'user_topic_sortby_type'	=> array('VCHAR:1', 't'),			'user_topic_sortby_dir'		=> array('VCHAR:1', 'd'),			'user_post_show_days'		=> array('USINT', 0),			'user_post_sortby_type'		=> array('VCHAR:1', 't'),			'user_post_sortby_dir'		=> array('VCHAR:1', 'a'),			'user_notify'				=> array('BOOL', 0),			'user_notify_pm'			=> array('BOOL', 1),			'user_notify_type'			=> array('TINT:4', 0),			'user_allow_pm'				=> array('BOOL', 1),			'user_allow_viewonline'		=> array('BOOL', 1),			'user_allow_viewemail'		=> array('BOOL', 1),			'user_allow_massemail'		=> array('BOOL', 1),			'user_options'				=> array('UINT:11', 230271),			'user_avatar'				=> array('VCHAR', ''),			'user_avatar_type'			=> array('TINT:2', 0),			'user_avatar_width'			=> array('USINT', 0),			'user_avatar_height'		=> array('USINT', 0),			'user_sig'					=> array('MTEXT_UNI', ''),			'user_sig_bbcode_uid'		=> array('VCHAR:8', ''),			'user_sig_bbcode_bitfield'	=> array('VCHAR:255', ''),			'user_from'					=> array('VCHAR_UNI:100', ''),			'user_icq'					=> array('VCHAR:15', ''),			'user_aim'					=> array('VCHAR_UNI', ''),			'user_yim'					=> array('VCHAR_UNI', ''),			'user_msnm'					=> array('VCHAR_UNI', ''),			'user_jabber'				=> array('VCHAR_UNI', ''),			'user_website'				=> array('VCHAR_UNI:200', ''),			'user_occ'					=> array('TEXT_UNI', ''),			'user_interests'			=> array('TEXT_UNI', ''),			'user_actkey'				=> array('VCHAR:32', ''),			'user_newpasswd'			=> array('VCHAR_UNI:40', ''),			'user_form_salt'			=> array('VCHAR_UNI:32', ''),			'user_new'					=> array('BOOL', 1),			'user_reminded'				=> array('TINT:4', 0),			'user_reminded_time'		=> array('TIMESTAMP', 0),		),		'PRIMARY_KEY'	=> 'user_id',		'KEYS'			=> array(			'user_birthday'				=> array('INDEX', 'user_birthday'),			'user_email_hash'			=> array('INDEX', 'user_email_hash'),			'user_type'					=> array('INDEX', 'user_type'),			'username_clean'			=> array('UNIQUE', 'username_clean'),		),	);	$schema_data['phpbb_warnings'] = array(		'COLUMNS'		=> array(			'warning_id'			=> array('UINT', NULL, 'auto_increment'),			'user_id'				=> array('UINT', 0),			'post_id'				=> array('UINT', 0),			'log_id'				=> array('UINT', 0),			'warning_time'			=> array('TIMESTAMP', 0),		),		'PRIMARY_KEY'	=> 'warning_id',	);	$schema_data['phpbb_words'] = array(		'COLUMNS'		=> array(			'word_id'				=> array('UINT', NULL, 'auto_increment'),			'word'					=> array('VCHAR_UNI', ''),			'replacement'			=> array('VCHAR_UNI', ''),		),		'PRIMARY_KEY'	=> 'word_id',	);	$schema_data['phpbb_zebra'] = array(		'COLUMNS'		=> array(			'user_id'				=> array('UINT', 0),			'zebra_id'				=> array('UINT', 0),			'friend'				=> array('BOOL', 0),			'foe'					=> array('BOOL', 0),		),		'PRIMARY_KEY'	=> array('user_id', 'zebra_id'),	);	return $schema_data;}/*** Data put into the header for various dbms*/function custom_data($dbms){	switch ($dbms)	{		case 'oracle':			return <<<EOF/*  This first section is optional, however its probably the best method  of running phpBB on Oracle. If you already have a tablespace and user created  for phpBB you can leave this section commented out!  The first set of statements create a phpBB tablespace and a phpBB user,  make sure you change the password of the phpBB user before you run this script!!*//*CREATE TABLESPACE "PHPBB"	LOGGING	DATAFILE 'E:\ORACLE\ORADATA\LOCAL\PHPBB.ora'	SIZE 10M	AUTOEXTEND ON NEXT 10M	MAXSIZE 100M;CREATE USER "PHPBB"	PROFILE "DEFAULT"	IDENTIFIED BY "phpbb_password"	DEFAULT TABLESPACE "PHPBB"	QUOTA UNLIMITED ON "PHPBB"	ACCOUNT UNLOCK;GRANT ANALYZE ANY TO "PHPBB";GRANT CREATE SEQUENCE TO "PHPBB";GRANT CREATE SESSION TO "PHPBB";GRANT CREATE TABLE TO "PHPBB";GRANT CREATE TRIGGER TO "PHPBB";GRANT CREATE VIEW TO "PHPBB";GRANT "CONNECT" TO "PHPBB";COMMIT;DISCONNECT;CONNECT phpbb/phpbb_password;*/EOF;		break;		case 'postgres':			return <<<EOF/*	Domain definition*/CREATE DOMAIN varchar_ci AS varchar(255) NOT NULL DEFAULT ''::character varying;/*	Operation Functions*/CREATE FUNCTION _varchar_ci_equal(varchar_ci, varchar_ci) RETURNS boolean AS 'SELECT LOWER($1) = LOWER($2)' LANGUAGE SQL STRICT;CREATE FUNCTION _varchar_ci_not_equal(varchar_ci, varchar_ci) RETURNS boolean AS 'SELECT LOWER($1) != LOWER($2)' LANGUAGE SQL STRICT;CREATE FUNCTION _varchar_ci_less_than(varchar_ci, varchar_ci) RETURNS boolean AS 'SELECT LOWER($1) < LOWER($2)' LANGUAGE SQL STRICT;CREATE FUNCTION _varchar_ci_less_equal(varchar_ci, varchar_ci) RETURNS boolean AS 'SELECT LOWER($1) <= LOWER($2)' LANGUAGE SQL STRICT;CREATE FUNCTION _varchar_ci_greater_than(varchar_ci, varchar_ci) RETURNS boolean AS 'SELECT LOWER($1) > LOWER($2)' LANGUAGE SQL STRICT;CREATE FUNCTION _varchar_ci_greater_equals(varchar_ci, varchar_ci) RETURNS boolean AS 'SELECT LOWER($1) >= LOWER($2)' LANGUAGE SQL STRICT;/*	Operators*/CREATE OPERATOR <(  PROCEDURE = _varchar_ci_less_than,  LEFTARG = varchar_ci,  RIGHTARG = varchar_ci,  COMMUTATOR = >,  NEGATOR = >=,  RESTRICT = scalarltsel,  JOIN = scalarltjoinsel);CREATE OPERATOR <=(  PROCEDURE = _varchar_ci_less_equal,  LEFTARG = varchar_ci,  RIGHTARG = varchar_ci,  COMMUTATOR = >=,  NEGATOR = >,  RESTRICT = scalarltsel,  JOIN = scalarltjoinsel);CREATE OPERATOR >(  PROCEDURE = _varchar_ci_greater_than,  LEFTARG = varchar_ci,  RIGHTARG = varchar_ci,  COMMUTATOR = <,  NEGATOR = <=,  RESTRICT = scalargtsel,  JOIN = scalargtjoinsel);CREATE OPERATOR >=(  PROCEDURE = _varchar_ci_greater_equals,  LEFTARG = varchar_ci,  RIGHTARG = varchar_ci,  COMMUTATOR = <=,  NEGATOR = <,  RESTRICT = scalargtsel,  JOIN = scalargtjoinsel);CREATE OPERATOR <>(  PROCEDURE = _varchar_ci_not_equal,  LEFTARG = varchar_ci,  RIGHTARG = varchar_ci,  COMMUTATOR = <>,  NEGATOR = =,  RESTRICT = neqsel,  JOIN = neqjoinsel);CREATE OPERATOR =(  PROCEDURE = _varchar_ci_equal,  LEFTARG = varchar_ci,  RIGHTARG = varchar_ci,  COMMUTATOR = =,  NEGATOR = <>,  RESTRICT = eqsel,  JOIN = eqjoinsel,  HASHES,  MERGES,  SORT1= <);EOF;		break;	}	return '';}echo 'done';
<?php/**** @package phpBB3* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @ignore*/if (!defined('IN_PHPBB')){	exit;}/*** Fill smiley templates (or just the variables) with smilies, either in a window or inline*/function generate_smilies($mode, $forum_id){	global $auth, $db, $user, $config, $template;	global $phpEx, $phpbb_root_path;	$start = request_var('start', 0);	if ($mode == 'window')	{		if ($forum_id)		{			$sql = 'SELECT forum_style				FROM ' . FORUMS_TABLE . "				WHERE forum_id = $forum_id";			$result = $db->sql_query_limit($sql, 1);			$row = $db->sql_fetchrow($result);			$db->sql_freeresult($result);			$user->setup('posting', (int) $row['forum_style']);		}		else		{			$user->setup('posting');		}		page_header($user->lang['SMILIES']);		$sql = 'SELECT COUNT(smiley_id) AS item_count			FROM ' . SMILIES_TABLE . '			GROUP BY smiley_url';		$result = $db->sql_query($sql, 3600);		$smiley_count = 0;		while ($row = $db->sql_fetchrow($result))		{			++$smiley_count;		}		$db->sql_freeresult($result);		$template->set_filenames(array(			'body' => 'posting_smilies.html')		);		$template->assign_var('PAGINATION',			generate_pagination(append_sid("{$phpbb_root_path}posting.$phpEx", 'mode=smilies&amp;f=' . $forum_id),				$smiley_count, $config['smilies_per_page'], $start, true)		);	}	$display_link = false;	if ($mode == 'inline')	{		$sql = 'SELECT smiley_id			FROM ' . SMILIES_TABLE . '			WHERE display_on_posting = 0';		$result = $db->sql_query_limit($sql, 1, 0, 3600);		if ($row = $db->sql_fetchrow($result))		{			$display_link = true;		}		$db->sql_freeresult($result);	}	if ($mode == 'window')	{		$sql = 'SELECT smiley_url, MIN(emotion) as emotion, MIN(code) AS code, smiley_width, smiley_height, MIN(smiley_order) AS min_smiley_order			FROM ' . SMILIES_TABLE . '			GROUP BY smiley_url, smiley_width, smiley_height			ORDER BY min_smiley_order';		$result = $db->sql_query_limit($sql, $config['smilies_per_page'], $start, 3600);	}	else	{		$sql = 'SELECT *			FROM ' . SMILIES_TABLE . '			WHERE display_on_posting = 1			ORDER BY smiley_order';		$result = $db->sql_query($sql, 3600);	}	$smilies = array();	while ($row = $db->sql_fetchrow($result))	{		if (empty($smilies[$row['smiley_url']]))		{			$smilies[$row['smiley_url']] = $row;		}	}	$db->sql_freeresult($result);	if (sizeof($smilies))	{		$root_path = (defined('PHPBB_USE_BOARD_URL_PATH') && PHPBB_USE_BOARD_URL_PATH) ? generate_board_url() . '/' : $phpbb_root_path;		foreach ($smilies as $row)		{			$template->assign_block_vars('smiley', array(				'SMILEY_CODE'	=> $row['code'],				'A_SMILEY_CODE'	=> addslashes($row['code']),				'SMILEY_IMG'	=> $root_path . $config['smilies_path'] . '/' . $row['smiley_url'],				'SMILEY_WIDTH'	=> $row['smiley_width'],				'SMILEY_HEIGHT'	=> $row['smiley_height'],				'SMILEY_DESC'	=> $row['emotion'])			);		}	}	if ($mode == 'inline' && $display_link)	{		$template->assign_vars(array(			'S_SHOW_SMILEY_LINK' 	=> true,			'U_MORE_SMILIES' 		=> append_sid("{$phpbb_root_path}posting.$phpEx", 'mode=smilies&amp;f=' . $forum_id))		);	}	if ($mode == 'window')	{		page_footer();	}}/*** Update last post information* Should be used instead of sync() if only the last post information are out of sync... faster** @param	string	$type				Can be forum|topic* @param	mixed	$ids				topic/forum ids* @param	bool	$return_update_sql	true: SQL query shall be returned, false: execute SQL*/function update_post_information($type, $ids, $return_update_sql = false){	global $db;	if (empty($ids))	{		return;	}	if (!is_array($ids))	{		$ids = array($ids);	}	$update_sql = $empty_forums = $not_empty_forums = array();	if ($type != 'topic')	{		$topic_join = ', ' . TOPICS_TABLE . ' t';		$topic_condition = 'AND t.topic_id = p.topic_id AND t.topic_approved = 1';	}	else	{		$topic_join = '';		$topic_condition = '';	}	if (sizeof($ids) == 1)	{		$sql = 'SELECT MAX(p.post_id) as last_post_id			FROM ' . POSTS_TABLE . " p $topic_join			WHERE " . $db->sql_in_set('p.' . $type . '_id', $ids) . "				$topic_condition				AND p.post_approved = 1";	}	else	{		$sql = 'SELECT p.' . $type . '_id, MAX(p.post_id) as last_post_id			FROM ' . POSTS_TABLE . " p $topic_join			WHERE " . $db->sql_in_set('p.' . $type . '_id', $ids) . "				$topic_condition				AND p.post_approved = 1			GROUP BY p.{$type}_id";	}	$result = $db->sql_query($sql);	$last_post_ids = array();	while ($row = $db->sql_fetchrow($result))	{		if (sizeof($ids) == 1)		{			$row[$type . '_id'] = $ids[0];		}		if ($type == 'forum')		{			$not_empty_forums[] = $row['forum_id'];			if (empty($row['last_post_id']))			{				$empty_forums[] = $row['forum_id'];			}		}		$last_post_ids[] = $row['last_post_id'];	}	$db->sql_freeresult($result);	if ($type == 'forum')	{		$empty_forums = array_merge($empty_forums, array_diff($ids, $not_empty_forums));		foreach ($empty_forums as $void => $forum_id)		{			$update_sql[$forum_id][] = 'forum_last_post_id = 0';			$update_sql[$forum_id][] = "forum_last_post_subject = ''";			$update_sql[$forum_id][] = 'forum_last_post_time = 0';			$update_sql[$forum_id][] = 'forum_last_poster_id = 0';			$update_sql[$forum_id][] = "forum_last_poster_name = ''";			$update_sql[$forum_id][] = "forum_last_poster_colour = ''";		}	}	if (sizeof($last_post_ids))	{		$sql = 'SELECT p.' . $type . '_id, p.post_id, p.post_subject, p.post_time, p.poster_id, p.post_username, u.user_id, u.username, u.user_colour			FROM ' . POSTS_TABLE . ' p, ' . USERS_TABLE . ' u			WHERE p.poster_id = u.user_id				AND ' . $db->sql_in_set('p.post_id', $last_post_ids);		$result = $db->sql_query($sql);		while ($row = $db->sql_fetchrow($result))		{			$update_sql[$row["{$type}_id"]][] = $type . '_last_post_id = ' . (int) $row['post_id'];			$update_sql[$row["{$type}_id"]][] = "{$type}_last_post_subject = '" . $db->sql_escape($row['post_subject']) . "'";			$update_sql[$row["{$type}_id"]][] = $type . '_last_post_time = ' . (int) $row['post_time'];			$update_sql[$row["{$type}_id"]][] = $type . '_last_poster_id = ' . (int) $row['poster_id'];			$update_sql[$row["{$type}_id"]][] = "{$type}_last_poster_colour = '" . $db->sql_escape($row['user_colour']) . "'";			$update_sql[$row["{$type}_id"]][] = "{$type}_last_poster_name = '" . (($row['poster_id'] == ANONYMOUS) ? $db->sql_escape($row['post_username']) : $db->sql_escape($row['username'])) . "'";		}		$db->sql_freeresult($result);	}	unset($empty_forums, $ids, $last_post_ids);	if ($return_update_sql || !sizeof($update_sql))	{		return $update_sql;	}	$table = ($type == 'forum') ? FORUMS_TABLE : TOPICS_TABLE;	foreach ($update_sql as $update_id => $update_sql_ary)	{		$sql = "UPDATE $table			SET " . implode(', ', $update_sql_ary) . "			WHERE {$type}_id = $update_id";		$db->sql_query($sql);	}	return;}/*** Generate Topic Icons for display*/function posting_gen_topic_icons($mode, $icon_id){	global $phpbb_root_path, $config, $template, $cache;	// Grab icons	$icons = $cache->obtain_icons();	if (!$icon_id)	{		$template->assign_var('S_NO_ICON_CHECKED', ' checked="checked"');	}	if (sizeof($icons))	{		foreach ($icons as $id => $data)		{			if ($data['display'])			{				$template->assign_block_vars('topic_icon', array(					'ICON_ID'		=> $id,					'ICON_IMG'		=> $phpbb_root_path . $config['icons_path'] . '/' . $data['img'],					'ICON_WIDTH'	=> $data['width'],					'ICON_HEIGHT'	=> $data['height'],					'S_CHECKED'			=> ($id == $icon_id) ? true : false,					'S_ICON_CHECKED'	=> ($id == $icon_id) ? ' checked="checked"' : '')				);			}		}		return true;	}	return false;}/*** Build topic types able to be selected*/function posting_gen_topic_types($forum_id, $cur_topic_type = POST_NORMAL){	global $auth, $user, $template, $topic_type;	$toggle = false;	$topic_types = array(		'sticky'	=> array('const' => POST_STICKY, 'lang' => 'POST_STICKY'),		'announce'	=> array('const' => POST_ANNOUNCE, 'lang' => 'POST_ANNOUNCEMENT'),		'global'	=> array('const' => POST_GLOBAL, 'lang' => 'POST_GLOBAL')	);	$topic_type_array = array();	foreach ($topic_types as $auth_key => $topic_value)	{		// We do not have a special post global announcement permission		$auth_key = ($auth_key == 'global') ? 'announce' : $auth_key;		if ($auth->acl_get('f_' . $auth_key, $forum_id))		{			$toggle = true;			$topic_type_array[] = array(				'VALUE'			=> $topic_value['const'],				'S_CHECKED'		=> ($cur_topic_type == $topic_value['const'] || ($forum_id == 0 && $topic_value['const'] == POST_GLOBAL)) ? ' checked="checked"' : '',				'L_TOPIC_TYPE'	=> $user->lang[$topic_value['lang']]			);		}	}	if ($toggle)	{		$topic_type_array = array_merge(array(0 => array(			'VALUE'			=> POST_NORMAL,			'S_CHECKED'		=> ($cur_topic_type == POST_NORMAL) ? ' checked="checked"' : '',			'L_TOPIC_TYPE'	=> $user->lang['POST_NORMAL'])),			$topic_type_array		);		foreach ($topic_type_array as $array)		{			$template->assign_block_vars('topic_type', $array);		}		$template->assign_vars(array(			'S_TOPIC_TYPE_STICKY'	=> ($auth->acl_get('f_sticky', $forum_id)),			'S_TOPIC_TYPE_ANNOUNCE'	=> ($auth->acl_get('f_announce', $forum_id)))		);	}	return $toggle;}//// Attachment related functions///*** Upload Attachment - filedata is generated here* Uses upload class*/function upload_attachment($form_name, $forum_id, $local = false, $local_storage = '', $is_message = false, $local_filedata = false){	global $auth, $user, $config, $db, $cache;	global $phpbb_root_path, $phpEx;	$filedata = array(		'error'	=> array()	);	include_once($phpbb_root_path . 'includes/functions_upload.' . $phpEx);	$upload = new fileupload();	if ($config['check_attachment_content'] && isset($config['mime_triggers']))	{		$upload->set_disallowed_content(explode('|', $config['mime_triggers']));	}	if (!$local)	{		$filedata['post_attach'] = ($upload->is_valid($form_name)) ? true : false;	}	else	{		$filedata['post_attach'] = true;	}	if (!$filedata['post_attach'])	{		$filedata['error'][] = $user->lang['NO_UPLOAD_FORM_FOUND'];		return $filedata;	}	$extensions = $cache->obtain_attach_extensions((($is_message) ? false : (int) $forum_id));	$upload->set_allowed_extensions(array_keys($extensions['_allowed_']));	$file = ($local) ? $upload->local_upload($local_storage, $local_filedata) : $upload->form_upload($form_name);	if ($file->init_error)	{		$filedata['post_attach'] = false;		return $filedata;	}	$cat_id = (isset($extensions[$file->get('extension')]['display_cat'])) ? $extensions[$file->get('extension')]['display_cat'] : ATTACHMENT_CATEGORY_NONE;	// Make sure the image category only holds valid images...	if ($cat_id == ATTACHMENT_CATEGORY_IMAGE && !$file->is_image())	{		$file->remove();		// If this error occurs a user tried to exploit an IE Bug by renaming extensions		// Since the image category is displaying content inline we need to catch this.		trigger_error($user->lang['ATTACHED_IMAGE_NOT_IMAGE']);	}	// Do we have to create a thumbnail?	$filedata['thumbnail'] = ($cat_id == ATTACHMENT_CATEGORY_IMAGE && $config['img_create_thumbnail']) ? 1 : 0;	// Check Image Size, if it is an image	if (!$auth->acl_get('a_') && !$auth->acl_get('m_', $forum_id) && $cat_id == ATTACHMENT_CATEGORY_IMAGE)	{		$file->upload->set_allowed_dimensions(0, 0, $config['img_max_width'], $config['img_max_height']);	}	// Admins and mods are allowed to exceed the allowed filesize	if (!$auth->acl_get('a_') && !$auth->acl_get('m_', $forum_id))	{		if (!empty($extensions[$file->get('extension')]['max_filesize']))		{			$allowed_filesize = $extensions[$file->get('extension')]['max_filesize'];		}		else		{			$allowed_filesize = ($is_message) ? $config['max_filesize_pm'] : $config['max_filesize'];		}		$file->upload->set_max_filesize($allowed_filesize);	}	$file->clean_filename('unique', $user->data['user_id'] . '_');	// Are we uploading an image *and* this image being within the image category? Only then perform additional image checks.	$no_image = ($cat_id == ATTACHMENT_CATEGORY_IMAGE) ? false : true;	$file->move_file($config['upload_path'], false, $no_image);	if (sizeof($file->error))	{		$file->remove();		$filedata['error'] = array_merge($filedata['error'], $file->error);		$filedata['post_attach'] = false;		return $filedata;	}	$filedata['filesize'] = $file->get('filesize');	$filedata['mimetype'] = $file->get('mimetype');	$filedata['extension'] = $file->get('extension');	$filedata['physical_filename'] = $file->get('realname');	$filedata['real_filename'] = $file->get('uploadname');	$filedata['filetime'] = time();	// Check our complete quota	if ($config['attachment_quota'])	{		if ($config['upload_dir_size'] + $file->get('filesize') > $config['attachment_quota'])		{			$filedata['error'][] = $user->lang['ATTACH_QUOTA_REACHED'];			$filedata['post_attach'] = false;			$file->remove();			return $filedata;		}	}	// Check free disk space	if ($free_space = @disk_free_space($phpbb_root_path . $config['upload_path']))	{		if ($free_space <= $file->get('filesize'))		{			$filedata['error'][] = $user->lang['ATTACH_QUOTA_REACHED'];			$filedata['post_attach'] = false;			$file->remove();			return $filedata;		}	}	// Create Thumbnail	if ($filedata['thumbnail'])	{		$source = $file->get('destination_file');		$destination = $file->get('destination_path') . '/thumb_' . $file->get('realname');		if (!create_thumbnail($source, $destination, $file->get('mimetype')))		{			$filedata['thumbnail'] = 0;		}	}	return $filedata;}/*** Calculate the needed size for Thumbnail*/function get_img_size_format($width, $height){	global $config;	// Maximum Width the Image can take	$max_width = ($config['img_max_thumb_width']) ? $config['img_max_thumb_width'] : 400;	if ($width > $height)	{		return array(			round($width * ($max_width / $width)),			round($height * ($max_width / $width))		);	}	else	{		return array(			round($width * ($max_width / $height)),			round($height * ($max_width / $height))		);	}}/*** Return supported image types*/function get_supported_image_types($type = false){	if (@extension_loaded('gd'))	{		$format = imagetypes();		$new_type = 0;		if ($type !== false)		{			// Type is one of the IMAGETYPE constants - it is fetched from getimagesize()			// We do not use the constants here, because some were not available in PHP 4.3.x			switch ($type)			{				// GIF				case 1:					$new_type = ($format & IMG_GIF) ? IMG_GIF : false;				break;				// JPG, JPC, JP2				case 2:				case 9:				case 10:				case 11:				case 12:					$new_type = ($format & IMG_JPG) ? IMG_JPG : false;				break;				// PNG				case 3:					$new_type = ($format & IMG_PNG) ? IMG_PNG : false;				break;				// WBMP				case 15:					$new_type = ($format & IMG_WBMP) ? IMG_WBMP : false;				break;			}		}		else		{			$new_type = array();			$go_through_types = array(IMG_GIF, IMG_JPG, IMG_PNG, IMG_WBMP);			foreach ($go_through_types as $check_type)			{				if ($format & $check_type)				{					$new_type[] = $check_type;				}			}		}		return array(			'gd'		=> ($new_type) ? true : false,			'format'	=> $new_type,			'version'	=> (function_exists('imagecreatetruecolor')) ? 2 : 1		);	}	return array('gd' => false);}/*** Create Thumbnail*/function create_thumbnail($source, $destination, $mimetype){	global $config;	$min_filesize = (int) $config['img_min_thumb_filesize'];	$img_filesize = (file_exists($source)) ? @filesize($source) : false;	if (!$img_filesize || $img_filesize <= $min_filesize)	{		return false;	}	$dimension = @getimagesize($source);	if ($dimension === false)	{		return false;	}	list($width, $height, $type, ) = $dimension;	if (empty($width) || empty($height))	{		return false;	}	list($new_width, $new_height) = get_img_size_format($width, $height);	// Do not create a thumbnail if the resulting width/height is bigger than the original one	if ($new_width >= $width && $new_height >= $height)	{		return false;	}	$used_imagick = false;	// Only use imagemagick if defined and the passthru function not disabled	if ($config['img_imagick'] && function_exists('passthru'))	{		if (substr($config['img_imagick'], -1) !== '/')		{			$config['img_imagick'] .= '/';		}		@passthru(escapeshellcmd($config['img_imagick']) . 'convert' . ((defined('PHP_OS') && preg_match('#^win#i', PHP_OS)) ? '.exe' : '') . ' -quality 85 -geometry ' . $new_width . 'x' . $new_height . ' "' . str_replace('\\', '/', $source) . '" "' . str_replace('\\', '/', $destination) . '"');		if (file_exists($destination))		{			$used_imagick = true;		}	}	if (!$used_imagick)	{		$type = get_supported_image_types($type);		if ($type['gd'])		{			// If the type is not supported, we are not able to create a thumbnail			if ($type['format'] === false)			{				return false;			}			switch ($type['format'])			{				case IMG_GIF:					$image = @imagecreatefromgif($source);				break;				case IMG_JPG:					@ini_set('gd.jpeg_ignore_warning', 1);					$image = @imagecreatefromjpeg($source);				break;				case IMG_PNG:					$image = @imagecreatefrompng($source);				break;				case IMG_WBMP:					$image = @imagecreatefromwbmp($source);				break;			}			if (empty($image))			{				return false;			}			if ($type['version'] == 1)			{				$new_image = imagecreate($new_width, $new_height);				if ($new_image === false)				{					return false;				}				imagecopyresized($new_image, $image, 0, 0, 0, 0, $new_width, $new_height, $width, $height);			}			else			{				$new_image = imagecreatetruecolor($new_width, $new_height);				if ($new_image === false)				{					return false;				}				// Preserve alpha transparency (png for example)				@imagealphablending($new_image, false);				@imagesavealpha($new_image, true);				imagecopyresampled($new_image, $image, 0, 0, 0, 0, $new_width, $new_height, $width, $height);			}			// If we are in safe mode create the destination file prior to using the gd functions to circumvent a PHP bug			if (@ini_get('safe_mode') || @strtolower(ini_get('safe_mode')) == 'on')			{				@touch($destination);			}			switch ($type['format'])			{				case IMG_GIF:					imagegif($new_image, $destination);				break;				case IMG_JPG:					imagejpeg($new_image, $destination, 90);				break;				case IMG_PNG:					imagepng($new_image, $destination);				break;				case IMG_WBMP:					imagewbmp($new_image, $destination);				break;			}			imagedestroy($new_image);		}		else		{			return false;		}	}	if (!file_exists($destination))	{		return false;	}	phpbb_chmod($destination, CHMOD_READ | CHMOD_WRITE);	return true;}/*** Assign Inline attachments (build option fields)*/function posting_gen_inline_attachments(&$attachment_data){	global $template;	if (sizeof($attachment_data))	{		$s_inline_attachment_options = '';		foreach ($attachment_data as $i => $attachment)		{			$s_inline_attachment_options .= '<option value="' . $i . '">' . utf8_basename($attachment['real_filename']) . '</option>';		}		$template->assign_var('S_INLINE_ATTACHMENT_OPTIONS', $s_inline_attachment_options);		return true;	}	return false;}/*** Generate inline attachment entry*/function posting_gen_attachment_entry($attachment_data, &$filename_data, $show_attach_box = true){	global $template, $config, $phpbb_root_path, $phpEx, $user, $auth;	// Some default template variables	$template->assign_vars(array(		'S_SHOW_ATTACH_BOX'	=> $show_attach_box,		'S_HAS_ATTACHMENTS'	=> sizeof($attachment_data),		'FILESIZE'			=> $config['max_filesize'],		'FILE_COMMENT'		=> (isset($filename_data['filecomment'])) ? $filename_data['filecomment'] : '',	));	if (sizeof($attachment_data))	{		// We display the posted attachments within the desired order.		($config['display_order']) ? krsort($attachment_data) : ksort($attachment_data);		foreach ($attachment_data as $count => $attach_row)		{			$hidden = '';			$attach_row['real_filename'] = utf8_basename($attach_row['real_filename']);			foreach ($attach_row as $key => $value)			{				$hidden .= '<input type="hidden" name="attachment_data[' . $count . '][' . $key . ']" value="' . $value . '" />';			}			$download_link = append_sid("{$phpbb_root_path}download/file.$phpEx", 'mode=view&amp;id=' . (int) $attach_row['attach_id'], true, ($attach_row['is_orphan']) ? $user->session_id : false);			$template->assign_block_vars('attach_row', array(				'FILENAME'			=> utf8_basename($attach_row['real_filename']),				'A_FILENAME'		=> addslashes(utf8_basename($attach_row['real_filename'])),				'FILE_COMMENT'		=> $attach_row['attach_comment'],				'ATTACH_ID'			=> $attach_row['attach_id'],				'S_IS_ORPHAN'		=> $attach_row['is_orphan'],				'ASSOC_INDEX'		=> $count,				'U_VIEW_ATTACHMENT'	=> $download_link,				'S_HIDDEN'			=> $hidden)			);		}	}	return sizeof($attachment_data);}//// General Post functions///*** Load Drafts*/function load_drafts($topic_id = 0, $forum_id = 0, $id = 0, $pm_action = '', $msg_id = 0){	global $user, $db, $template, $auth;	global $phpbb_root_path, $phpEx;	$topic_ids = $forum_ids = $draft_rows = array();	// Load those drafts not connected to forums/topics	// If forum_id == 0 AND topic_id == 0 then this is a PM draft	if (!$topic_id && !$forum_id)	{		$sql_and = ' AND d.forum_id = 0 AND d.topic_id = 0';	}	else	{		$sql_and = '';		$sql_and .= ($forum_id) ? ' AND d.forum_id = ' . (int) $forum_id : '';		$sql_and .= ($topic_id) ? ' AND d.topic_id = ' . (int) $topic_id : '';	}	$sql = 'SELECT d.*, f.forum_id, f.forum_name		FROM ' . DRAFTS_TABLE . ' d		LEFT JOIN ' . FORUMS_TABLE . ' f ON (f.forum_id = d.forum_id)			WHERE d.user_id = ' . $user->data['user_id'] . "			$sql_and		ORDER BY d.save_time DESC";	$result = $db->sql_query($sql);	while ($row = $db->sql_fetchrow($result))	{		if ($row['topic_id'])		{			$topic_ids[] = (int) $row['topic_id'];		}		$draft_rows[] = $row;	}	$db->sql_freeresult($result);	if (!sizeof($draft_rows))	{		return;	}	$topic_rows = array();	if (sizeof($topic_ids))	{		$sql = 'SELECT topic_id, forum_id, topic_title			FROM ' . TOPICS_TABLE . '			WHERE ' . $db->sql_in_set('topic_id', array_unique($topic_ids));		$result = $db->sql_query($sql);		while ($row = $db->sql_fetchrow($result))		{			$topic_rows[$row['topic_id']] = $row;		}		$db->sql_freeresult($result);	}	unset($topic_ids);	$template->assign_var('S_SHOW_DRAFTS', true);	foreach ($draft_rows as $draft)	{		$link_topic = $link_forum = $link_pm = false;		$insert_url = $view_url = $title = '';		if (isset($topic_rows[$draft['topic_id']])			&& (				($topic_rows[$draft['topic_id']]['forum_id'] && $auth->acl_get('f_read', $topic_rows[$draft['topic_id']]['forum_id']))				||				(!$topic_rows[$draft['topic_id']]['forum_id'] && $auth->acl_getf_global('f_read'))			))		{			$topic_forum_id = ($topic_rows[$draft['topic_id']]['forum_id']) ? $topic_rows[$draft['topic_id']]['forum_id'] : $forum_id;			$link_topic = true;			$view_url = append_sid("{$phpbb_root_path}viewtopic.$phpEx", 'f=' . $topic_forum_id . '&amp;t=' . $draft['topic_id']);			$title = $topic_rows[$draft['topic_id']]['topic_title'];			$insert_url = append_sid("{$phpbb_root_path}posting.$phpEx", 'f=' . $topic_forum_id . '&amp;t=' . $draft['topic_id'] . '&amp;mode=reply&amp;d=' . $draft['draft_id']);		}		else if ($draft['forum_id'] && $auth->acl_get('f_read', $draft['forum_id']))		{			$link_forum = true;			$view_url = append_sid("{$phpbb_root_path}viewforum.$phpEx", 'f=' . $draft['forum_id']);			$title = $draft['forum_name'];			$insert_url = append_sid("{$phpbb_root_path}posting.$phpEx", 'f=' . $draft['forum_id'] . '&amp;mode=post&amp;d=' . $draft['draft_id']);		}		else		{			// Either display as PM draft if forum_id and topic_id are empty or if access to the forums has been denied afterwards...			$link_pm = true;			$insert_url = append_sid("{$phpbb_root_path}ucp.$phpEx", "i=$id&amp;mode=compose&amp;d={$draft['draft_id']}" . (($pm_action) ? "&amp;action=$pm_action" : '') . (($msg_id) ? "&amp;p=$msg_id" : ''));		}		$template->assign_block_vars('draftrow', array(			'DRAFT_ID'		=> $draft['draft_id'],			'DATE'			=> $user->format_date($draft['save_time']),			'DRAFT_SUBJECT'	=> $draft['draft_subject'],			'TITLE'			=> $title,			'U_VIEW'		=> $view_url,			'U_INSERT'		=> $insert_url,			'S_LINK_PM'		=> $link_pm,			'S_LINK_TOPIC'	=> $link_topic,			'S_LINK_FORUM'	=> $link_forum)		);	}}/*** Topic Review*/function topic_review($topic_id, $forum_id, $mode = 'topic_review', $cur_post_id = 0, $show_quote_button = true){	global $user, $auth, $db, $template, $bbcode, $cache;	global $config, $phpbb_root_path, $phpEx;	// Go ahead and pull all data for this topic	$sql = 'SELECT p.post_id		FROM ' . POSTS_TABLE . ' p' . "		WHERE p.topic_id = $topic_id			" . ((!$auth->acl_get('m_approve', $forum_id)) ? 'AND p.post_approved = 1' : '') . '			' . (($mode == 'post_review') ? " AND p.post_id > $cur_post_id" : '') . '			' . (($mode == 'post_review_edit') ? " AND p.post_id = $cur_post_id" : '') . '		ORDER BY p.post_time ';	$sql .= ($mode == 'post_review') ? 'ASC' : 'DESC';	$result = $db->sql_query_limit($sql, $config['posts_per_page']);	$post_list = array();	while ($row = $db->sql_fetchrow($result))	{		$post_list[] = $row['post_id'];	}	$db->sql_freeresult($result);	if (!sizeof($post_list))	{		return false;	}	// Handle 'post_review_edit' like 'post_review' from now on	if ($mode == 'post_review_edit')	{		$mode = 'post_review';	}	$sql = $db->sql_build_query('SELECT', array(		'SELECT'	=> 'u.username, u.user_id, u.user_colour, p.*, z.friend, z.foe',		'FROM'		=> array(			USERS_TABLE		=> 'u',			POSTS_TABLE		=> 'p',		),		'LEFT_JOIN'	=> array(			array(				'FROM'	=> array(ZEBRA_TABLE => 'z'),				'ON'	=> 'z.user_id = ' . $user->data['user_id'] . ' AND z.zebra_id = p.poster_id'			)		),		'WHERE'		=> $db->sql_in_set('p.post_id', $post_list) . '			AND u.user_id = p.poster_id'	));	$result = $db->sql_query($sql);	$bbcode_bitfield = '';	$rowset = array();	$has_attachments = false;	while ($row = $db->sql_fetchrow($result))	{		$rowset[$row['post_id']] = $row;		$bbcode_bitfield = $bbcode_bitfield | base64_decode($row['bbcode_bitfield']);		if ($row['post_attachment'])		{			$has_attachments = true;		}	}	$db->sql_freeresult($result);	// Instantiate BBCode class	if (!isset($bbcode) && $bbcode_bitfield !== '')	{		include_once($phpbb_root_path . 'includes/bbcode.' . $phpEx);		$bbcode = new bbcode(base64_encode($bbcode_bitfield));	}	// Grab extensions	$extensions = $attachments = array();	if ($has_attachments && $auth->acl_get('u_download') && $auth->acl_get('f_download', $forum_id))	{		$extensions = $cache->obtain_attach_extensions($forum_id);		// Get attachments...		$sql = 'SELECT *			FROM ' . ATTACHMENTS_TABLE . '			WHERE ' . $db->sql_in_set('post_msg_id', $post_list) . '				AND in_message = 0			ORDER BY filetime DESC, post_msg_id ASC';		$result = $db->sql_query($sql);		while ($row = $db->sql_fetchrow($result))		{			$attachments[$row['post_msg_id']][] = $row;		}		$db->sql_freeresult($result);	}	for ($i = 0, $end = sizeof($post_list); $i < $end; ++$i)	{		// A non-existing rowset only happens if there was no user present for the entered poster_id		// This could be a broken posts table.		if (!isset($rowset[$post_list[$i]]))		{			continue;		}		$row =& $rowset[$post_list[$i]];		$poster_id		= $row['user_id'];		$post_subject	= $row['post_subject'];		$message		= censor_text($row['post_text']);		$decoded_message = false;		if ($show_quote_button && $auth->acl_get('f_reply', $forum_id))		{			$decoded_message = $message;			decode_message($decoded_message, $row['bbcode_uid']);			$decoded_message = bbcode_nl2br($decoded_message);		}		if ($row['bbcode_bitfield'])		{			$bbcode->bbcode_second_pass($message, $row['bbcode_uid'], $row['bbcode_bitfield']);		}		$message = bbcode_nl2br($message);		$message = smiley_text($message, !$row['enable_smilies']);		if (!empty($attachments[$row['post_id']]))		{			$update_count = array();			parse_attachments($forum_id, $message, $attachments[$row['post_id']], $update_count);		}		$post_subject = censor_text($post_subject);		$post_anchor = ($mode == 'post_review') ? 'ppr' . $row['post_id'] : 'pr' . $row['post_id'];		$u_show_post = append_sid($phpbb_root_path . 'viewtopic.' . $phpEx, "f=$forum_id&amp;t=$topic_id&amp;p={$row['post_id']}&amp;view=show#p{$row['post_id']}");		$template->assign_block_vars($mode . '_row', array(			'POST_AUTHOR_FULL'		=> get_username_string('full', $poster_id, $row['username'], $row['user_colour'], $row['post_username']),			'POST_AUTHOR_COLOUR'	=> get_username_string('colour', $poster_id, $row['username'], $row['user_colour'], $row['post_username']),			'POST_AUTHOR'			=> get_username_string('username', $poster_id, $row['username'], $row['user_colour'], $row['post_username']),			'U_POST_AUTHOR'			=> get_username_string('profile', $poster_id, $row['username'], $row['user_colour'], $row['post_username']),			'S_HAS_ATTACHMENTS'	=> (!empty($attachments[$row['post_id']])) ? true : false,			'S_FRIEND'			=> ($row['friend']) ? true : false,			'S_IGNORE_POST'		=> ($row['foe']) ? true : false,			'L_IGNORE_POST'		=> ($row['foe']) ? sprintf($user->lang['POST_BY_FOE'], get_username_string('full', $poster_id, $row['username'], $row['user_colour'], $row['post_username']), "<a href=\"{$u_show_post}\" onclick=\"dE('{$post_anchor}', 1); return false;\">", '</a>') : '',			'POST_SUBJECT'		=> $post_subject,			'MINI_POST_IMG'		=> $user->img('icon_post_target', $user->lang['POST']),			'POST_DATE'			=> $user->format_date($row['post_time']),			'MESSAGE'			=> $message,			'DECODED_MESSAGE'	=> $decoded_message,			'POST_ID'			=> $row['post_id'],			'U_MINI_POST'		=> append_sid("{$phpbb_root_path}viewtopic.$phpEx", 'p=' . $row['post_id']) . '#p' . $row['post_id'],			'U_MCP_DETAILS'		=> ($auth->acl_get('m_info', $forum_id)) ? append_sid("{$phpbb_root_path}mcp.$phpEx", 'i=main&amp;mode=post_details&amp;f=' . $forum_id . '&amp;p=' . $row['post_id'], true, $user->session_id) : '',			'POSTER_QUOTE'		=> ($show_quote_button && $auth->acl_get('f_reply', $forum_id)) ? addslashes(get_username_string('username', $poster_id, $row['username'], $row['user_colour'], $row['post_username'])) : '')		);		// Display not already displayed Attachments for this post, we already parsed them. ;)		if (!empty($attachments[$row['post_id']]))		{			foreach ($attachments[$row['post_id']] as $attachment)			{				$template->assign_block_vars($mode . '_row.attachment', array(					'DISPLAY_ATTACHMENT'	=> $attachment)				);			}		}		unset($rowset[$post_list[$i]]);	}	if ($mode == 'topic_review')	{		$template->assign_var('QUOTE_IMG', $user->img('icon_post_quote', $user->lang['REPLY_WITH_QUOTE']));	}	return true;}/*** User Notification*/function user_notification($mode, $subject, $topic_title, $forum_name, $forum_id, $topic_id, $post_id){	global $db, $user, $config, $phpbb_root_path, $phpEx, $auth;	$topic_notification = ($mode == 'reply' || $mode == 'quote') ? true : false;	$forum_notification = ($mode == 'post') ? true : false;	if (!$topic_notification && !$forum_notification)	{		trigger_error('NO_MODE');	}	if (($topic_notification && !$config['allow_topic_notify']) || ($forum_notification && !$config['allow_forum_notify']))	{		return;	}	$topic_title = ($topic_notification) ? $topic_title : $subject;	$topic_title = censor_text($topic_title);	// Get banned User ID's	$sql = 'SELECT ban_userid		FROM ' . BANLIST_TABLE . '		WHERE ban_userid <> 0			AND ban_exclude <> 1';	$result = $db->sql_query($sql);	$sql_ignore_users = ANONYMOUS . ', ' . $user->data['user_id'];	while ($row = $db->sql_fetchrow($result))	{		$sql_ignore_users .= ', ' . (int) $row['ban_userid'];	}	$db->sql_freeresult($result);	$notify_rows = array();	// -- get forum_userids	|| topic_userids	$sql = 'SELECT u.user_id, u.username, u.user_email, u.user_lang, u.user_notify_type, u.user_jabber		FROM ' . (($topic_notification) ? TOPICS_WATCH_TABLE : FORUMS_WATCH_TABLE) . ' w, ' . USERS_TABLE . ' u		WHERE w.' . (($topic_notification) ? 'topic_id' : 'forum_id') . ' = ' . (($topic_notification) ? $topic_id : $forum_id) . "			AND w.user_id NOT IN ($sql_ignore_users)			AND w.notify_status = " . NOTIFY_YES . '			AND u.user_type IN (' . USER_NORMAL . ', ' . USER_FOUNDER . ')			AND u.user_id = w.user_id';	$result = $db->sql_query($sql);	while ($row = $db->sql_fetchrow($result))	{		$notify_rows[$row['user_id']] = array(			'user_id'		=> $row['user_id'],			'username'		=> $row['username'],			'user_email'	=> $row['user_email'],			'user_jabber'	=> $row['user_jabber'],			'user_lang'		=> $row['user_lang'],			'notify_type'	=> ($topic_notification) ? 'topic' : 'forum',			'template'		=> ($topic_notification) ? 'topic_notify' : 'newtopic_notify',			'method'		=> $row['user_notify_type'],			'allowed'		=> false		);	}	$db->sql_freeresult($result);	// forum notification is sent to those not already receiving topic notifications	if ($topic_notification)	{		if (sizeof($notify_rows))		{			$sql_ignore_users .= ', ' . implode(', ', array_keys($notify_rows));		}		$sql = 'SELECT u.user_id, u.username, u.user_email, u.user_lang, u.user_notify_type, u.user_jabber			FROM ' . FORUMS_WATCH_TABLE . ' fw, ' . USERS_TABLE . " u			WHERE fw.forum_id = $forum_id				AND fw.user_id NOT IN ($sql_ignore_users)				AND fw.notify_status = " . NOTIFY_YES . '				AND u.user_type IN (' . USER_NORMAL . ', ' . USER_FOUNDER . ')				AND u.user_id = fw.user_id';		$result = $db->sql_query($sql);		while ($row = $db->sql_fetchrow($result))		{			$notify_rows[$row['user_id']] = array(				'user_id'		=> $row['user_id'],				'username'		=> $row['username'],				'user_email'	=> $row['user_email'],				'user_jabber'	=> $row['user_jabber'],				'user_lang'		=> $row['user_lang'],				'notify_type'	=> 'forum',				'template'		=> 'forum_notify',				'method'		=> $row['user_notify_type'],				'allowed'		=> false			);		}		$db->sql_freeresult($result);	}	if (!sizeof($notify_rows))	{		return;	}	// Make sure users are allowed to read the forum	foreach ($auth->acl_get_list(array_keys($notify_rows), 'f_read', $forum_id) as $forum_id => $forum_ary)	{		foreach ($forum_ary as $auth_option => $user_ary)		{			foreach ($user_ary as $user_id)			{				$notify_rows[$user_id]['allowed'] = true;			}		}	}	// Now, we have to do a little step before really sending, we need to distinguish our users a little bit. ;)	$msg_users = $delete_ids = $update_notification = array();	foreach ($notify_rows as $user_id => $row)	{		if (!$row['allowed'] || !trim($row['user_email']))		{			$delete_ids[$row['notify_type']][] = $row['user_id'];		}		else		{			$msg_users[] = $row;			$update_notification[$row['notify_type']][] = $row['user_id'];		}	}	unset($notify_rows);	// Now, we are able to really send out notifications	if (sizeof($msg_users))	{		include_once($phpbb_root_path . 'includes/functions_messenger.' . $phpEx);		$messenger = new messenger();		$msg_list_ary = array();		foreach ($msg_users as $row)		{			$pos = (!isset($msg_list_ary[$row['template']])) ? 0 : sizeof($msg_list_ary[$row['template']]);			$msg_list_ary[$row['template']][$pos]['method']	= $row['method'];			$msg_list_ary[$row['template']][$pos]['email']	= $row['user_email'];			$msg_list_ary[$row['template']][$pos]['jabber']	= $row['user_jabber'];			$msg_list_ary[$row['template']][$pos]['name']	= $row['username'];			$msg_list_ary[$row['template']][$pos]['lang']	= $row['user_lang'];			$msg_list_ary[$row['template']][$pos]['user_id']= $row['user_id'];		}		unset($msg_users);		foreach ($msg_list_ary as $email_template => $email_list)		{			foreach ($email_list as $addr)			{				$messenger->template($email_template, $addr['lang']);				$messenger->to($addr['email'], $addr['name']);				$messenger->im($addr['jabber'], $addr['name']);				$messenger->assign_vars(array(					'USERNAME'		=> htmlspecialchars_decode($addr['name']),					'TOPIC_TITLE'	=> htmlspecialchars_decode($topic_title),					'FORUM_NAME'	=> htmlspecialchars_decode($forum_name),					'U_FORUM'				=> generate_board_url() . "/viewforum.$phpEx?f=$forum_id",					'U_TOPIC'				=> generate_board_url() . "/viewtopic.$phpEx?f=$forum_id&t=$topic_id",					'U_NEWEST_POST'			=> generate_board_url() . "/viewtopic.$phpEx?f=$forum_id&t=$topic_id&p=$post_id&e=$post_id",					'U_STOP_WATCHING_TOPIC'	=> generate_board_url() . "/viewtopic.$phpEx?uid={$addr['user_id']}&f=$forum_id&t=$topic_id&unwatch=topic",					'U_STOP_WATCHING_FORUM'	=> generate_board_url() . "/viewforum.$phpEx?uid={$addr['user_id']}&f=$forum_id&unwatch=forum",				));				$messenger->send($addr['method']);			}		}		unset($msg_list_ary);		$messenger->save_queue();	}	// Handle the DB updates	$db->sql_transaction('begin');	if (!empty($update_notification['topic']))	{		$sql = 'UPDATE ' . TOPICS_WATCH_TABLE . '			SET notify_status = ' . NOTIFY_NO . "			WHERE topic_id = $topic_id				AND " . $db->sql_in_set('user_id', $update_notification['topic']);		$db->sql_query($sql);	}	if (!empty($update_notification['forum']))	{		$sql = 'UPDATE ' . FORUMS_WATCH_TABLE . '			SET notify_status = ' . NOTIFY_NO . "			WHERE forum_id = $forum_id				AND " . $db->sql_in_set('user_id', $update_notification['forum']);		$db->sql_query($sql);	}	// Now delete the user_ids not authorised to receive notifications on this topic/forum	if (!empty($delete_ids['topic']))	{		$sql = 'DELETE FROM ' . TOPICS_WATCH_TABLE . "			WHERE topic_id = $topic_id				AND " . $db->sql_in_set('user_id', $delete_ids['topic']);		$db->sql_query($sql);	}	if (!empty($delete_ids['forum']))	{		$sql = 'DELETE FROM ' . FORUMS_WATCH_TABLE . "			WHERE forum_id = $forum_id				AND " . $db->sql_in_set('user_id', $delete_ids['forum']);		$db->sql_query($sql);	}	$db->sql_transaction('commit');}//// Post handling functions///*** Delete Post*/function delete_post($forum_id, $topic_id, $post_id, &$data){	global $db, $user, $auth;	global $config, $phpEx, $phpbb_root_path;	// Specify our post mode	$post_mode = 'delete';	if (($data['topic_first_post_id'] === $data['topic_last_post_id']) && $data['topic_replies_real'] == 0)	{		$post_mode = 'delete_topic';	}	else if ($data['topic_first_post_id'] == $post_id)	{		$post_mode = 'delete_first_post';	}	else if ($data['topic_last_post_id'] == $post_id)	{		$post_mode = 'delete_last_post';	}	$sql_data = array();	$next_post_id = false;	include_once($phpbb_root_path . 'includes/functions_admin.' . $phpEx);	$db->sql_transaction('begin');	// we must make sure to update forums that contain the shadow'd topic	if ($post_mode == 'delete_topic')	{		$shadow_forum_ids = array();		$sql = 'SELECT forum_id			FROM ' . TOPICS_TABLE . '			WHERE ' . $db->sql_in_set('topic_moved_id', $topic_id);		$result = $db->sql_query($sql);		while ($row = $db->sql_fetchrow($result))		{			if (!isset($shadow_forum_ids[(int) $row['forum_id']]))			{				$shadow_forum_ids[(int) $row['forum_id']] = 1;			}			else			{				$shadow_forum_ids[(int) $row['forum_id']]++;			}		}		$db->sql_freeresult($result);	}	if (!delete_posts('post_id', array($post_id), false, false))	{		// Try to delete topic, we may had an previous error causing inconsistency		if ($post_mode == 'delete_topic')		{			delete_topics('topic_id', array($topic_id), false);		}		trigger_error('ALREADY_DELETED');	}	$db->sql_transaction('commit');	// Collect the necessary information for updating the tables	$sql_data[FORUMS_TABLE] = '';	switch ($post_mode)	{		case 'delete_topic':			foreach ($shadow_forum_ids as $updated_forum => $topic_count)			{				// counting is fun! we only have to do sizeof($forum_ids) number of queries,				// even if the topic is moved back to where its shadow lives (we count how many times it is in a forum)				$db->sql_query('UPDATE ' . FORUMS_TABLE . ' SET forum_topics_real = forum_topics_real - ' . $topic_count . ', forum_topics = forum_topics - ' . $topic_count . ' WHERE forum_id = ' . $updated_forum);				update_post_information('forum', $updated_forum);			}			delete_topics('topic_id', array($topic_id), false);			if ($data['topic_type'] != POST_GLOBAL)			{				$sql_data[FORUMS_TABLE] .= 'forum_topics_real = forum_topics_real - 1';				$sql_data[FORUMS_TABLE] .= ($data['topic_approved']) ? ', forum_posts = forum_posts - 1, forum_topics = forum_topics - 1' : '';			}			$update_sql = update_post_information('forum', $forum_id, true);			if (sizeof($update_sql))			{				$sql_data[FORUMS_TABLE] .= ($sql_data[FORUMS_TABLE]) ? ', ' : '';				$sql_data[FORUMS_TABLE] .= implode(', ', $update_sql[$forum_id]);			}		break;		case 'delete_first_post':			$sql = 'SELECT p.post_id, p.poster_id, p.post_time, p.post_username, u.username, u.user_colour				FROM ' . POSTS_TABLE . ' p, ' . USERS_TABLE . " u				WHERE p.topic_id = $topic_id					AND p.poster_id = u.user_id				ORDER BY p.post_time ASC";			$result = $db->sql_query_limit($sql, 1);			$row = $db->sql_fetchrow($result);			$db->sql_freeresult($result);			if ($data['topic_type'] != POST_GLOBAL)			{				$sql_data[FORUMS_TABLE] = ($data['post_approved']) ? 'forum_posts = forum_posts - 1' : '';			}			$sql_data[TOPICS_TABLE] = 'topic_poster = ' . intval($row['poster_id']) . ', topic_first_post_id = ' . intval($row['post_id']) . ", topic_first_poster_colour = '" . $db->sql_escape($row['user_colour']) . "', topic_first_poster_name = '" . (($row['poster_id'] == ANONYMOUS) ? $db->sql_escape($row['post_username']) : $db->sql_escape($row['username'])) . "', topic_time = " . (int) $row['post_time'];			// Decrementing topic_replies here is fine because this case only happens if there is more than one post within the topic - basically removing one "reply"			$sql_data[TOPICS_TABLE] .= ', topic_replies_real = topic_replies_real - 1' . (($data['post_approved']) ? ', topic_replies = topic_replies - 1' : '');			$next_post_id = (int) $row['post_id'];		break;		case 'delete_last_post':			if ($data['topic_type'] != POST_GLOBAL)			{				$sql_data[FORUMS_TABLE] = ($data['post_approved']) ? 'forum_posts = forum_posts - 1' : '';			}			$update_sql = update_post_information('forum', $forum_id, true);			if (sizeof($update_sql))			{				$sql_data[FORUMS_TABLE] .= ($sql_data[FORUMS_TABLE]) ? ', ' : '';				$sql_data[FORUMS_TABLE] .= implode(', ', $update_sql[$forum_id]);			}			$sql_data[TOPICS_TABLE] = 'topic_bumped = 0, topic_bumper = 0, topic_replies_real = topic_replies_real - 1' . (($data['post_approved']) ? ', topic_replies = topic_replies - 1' : '');			$update_sql = update_post_information('topic', $topic_id, true);			if (sizeof($update_sql))			{				$sql_data[TOPICS_TABLE] .= ', ' . implode(', ', $update_sql[$topic_id]);				$next_post_id = (int) str_replace('topic_last_post_id = ', '', $update_sql[$topic_id][0]);			}			else			{				$sql = 'SELECT MAX(post_id) as last_post_id					FROM ' . POSTS_TABLE . "					WHERE topic_id = $topic_id " .						((!$auth->acl_get('m_approve', $forum_id)) ? 'AND post_approved = 1' : '');				$result = $db->sql_query($sql);				$row = $db->sql_fetchrow($result);				$db->sql_freeresult($result);				$next_post_id = (int) $row['last_post_id'];			}		break;		case 'delete':			$sql = 'SELECT post_id				FROM ' . POSTS_TABLE . "				WHERE topic_id = $topic_id " .					((!$auth->acl_get('m_approve', $forum_id)) ? 'AND post_approved = 1' : '') . '					AND post_time > ' . $data['post_time'] . '				ORDER BY post_time ASC';			$result = $db->sql_query_limit($sql, 1);			$row = $db->sql_fetchrow($result);			$db->sql_freeresult($result);			if ($data['topic_type'] != POST_GLOBAL)			{				$sql_data[FORUMS_TABLE] = ($data['post_approved']) ? 'forum_posts = forum_posts - 1' : '';			}			$sql_data[TOPICS_TABLE] = 'topic_replies_real = topic_replies_real - 1' . (($data['post_approved']) ? ', topic_replies = topic_replies - 1' : '');			$next_post_id = (int) $row['post_id'];		break;	}	if (($post_mode == 'delete') || ($post_mode == 'delete_last_post') || ($post_mode == 'delete_first_post'))	{		$sql = 'SELECT 1 AS has_attachments			FROM ' . ATTACHMENTS_TABLE . '			WHERE topic_id = ' . $topic_id;		$result = $db->sql_query_limit($sql, 1);		$has_attachments = (int) $db->sql_fetchfield('has_attachments');		$db->sql_freeresult($result);		if (!$has_attachments)		{			$sql_data[TOPICS_TABLE] .= ', topic_attachment = 0';		}	}//	$sql_data[USERS_TABLE] = ($data['post_postcount']) ? 'user_posts = user_posts - 1' : '';	$db->sql_transaction('begin');	$where_sql = array(		FORUMS_TABLE	=> "forum_id = $forum_id",		TOPICS_TABLE	=> "topic_id = $topic_id",		USERS_TABLE		=> 'user_id = ' . $data['poster_id']	);	foreach ($sql_data as $table => $update_sql)	{		if ($update_sql)		{			$db->sql_query("UPDATE $table SET $update_sql WHERE " . $where_sql[$table]);		}	}	// Adjust posted info for this user by looking for a post by him/her within this topic...	if ($post_mode != 'delete_topic' && $config['load_db_track'] && $data['poster_id'] != ANONYMOUS)	{		$sql = 'SELECT poster_id			FROM ' . POSTS_TABLE . '			WHERE topic_id = ' . $topic_id . '				AND poster_id = ' . $data['poster_id'];		$result = $db->sql_query_limit($sql, 1);		$poster_id = (int) $db->sql_fetchfield('poster_id');		$db->sql_freeresult($result);		// The user is not having any more posts within this topic		if (!$poster_id)		{			$sql = 'DELETE FROM ' . TOPICS_POSTED_TABLE . '				WHERE topic_id = ' . $topic_id . '					AND user_id = ' . $data['poster_id'];			$db->sql_query($sql);		}	}	$db->sql_transaction('commit');	if ($data['post_reported'] && ($post_mode != 'delete_topic'))	{		sync('topic_reported', 'topic_id', array($topic_id));	}	return $next_post_id;}/*** Submit Post* @todo Split up and create lightweight, simple API for this.*/function submit_post($mode, $subject, $username, $topic_type, &$poll, &$data, $update_message = true, $update_search_index = true){	global $db, $auth, $user, $config, $phpEx, $template, $phpbb_root_path;	// We do not handle erasing posts here	if ($mode == 'delete')	{		return false;	}	$current_time = time();	if ($mode == 'post')	{		$post_mode = 'post';		$update_message = true;	}	else if ($mode != 'edit')	{		$post_mode = 'reply';		$update_message = true;	}	else if ($mode == 'edit')	{		$post_mode = ($data['topic_replies_real'] == 0) ? 'edit_topic' : (($data['topic_first_post_id'] == $data['post_id']) ? 'edit_first_post' : (($data['topic_last_post_id'] == $data['post_id']) ? 'edit_last_post' : 'edit'));	}	// First of all make sure the subject and topic title are having the correct length.	// To achieve this without cutting off between special chars we convert to an array and then count the elements.	$subject = truncate_string($subject);	$data['topic_title'] = truncate_string($data['topic_title']);	// Collect some basic information about which tables and which rows to update/insert	$sql_data = $topic_row = array();	$poster_id = ($mode == 'edit') ? $data['poster_id'] : (int) $user->data['user_id'];	// Retrieve some additional information if not present	if ($mode == 'edit' && (!isset($data['post_approved']) || !isset($data['topic_approved']) || $data['post_approved'] === false || $data['topic_approved'] === false))	{		$sql = 'SELECT p.post_approved, t.topic_type, t.topic_replies, t.topic_replies_real, t.topic_approved			FROM ' . TOPICS_TABLE . ' t, ' . POSTS_TABLE . ' p			WHERE t.topic_id = p.topic_id				AND p.post_id = ' . $data['post_id'];		$result = $db->sql_query($sql);		$topic_row = $db->sql_fetchrow($result);		$db->sql_freeresult($result);		$data['topic_approved'] = $topic_row['topic_approved'];		$data['post_approved'] = $topic_row['post_approved'];	}	// This variable indicates if the user is able to post or put into the queue - it is used later for all code decisions regarding approval	// The variable name should be $post_approved, because it indicates if the post is approved or not	$post_approval = 1;	// Check the permissions for post approval. Moderators are not affected.	if (!$auth->acl_get('f_noapprove', $data['forum_id']) && !$auth->acl_get('m_approve', $data['forum_id']))	{		// Post not approved, but in queue		$post_approval = 0;	}	// Mods are able to force approved/unapproved posts. True means the post is approved, false the post is unapproved	if (isset($data['force_approved_state']))	{		$post_approval = ($data['force_approved_state']) ? 1 : 0;	}	// Start the transaction here	$db->sql_transaction('begin');	// Collect Information	switch ($post_mode)	{		case 'post':		case 'reply':			$sql_data[POSTS_TABLE]['sql'] = array(				'forum_id'			=> ($topic_type == POST_GLOBAL) ? 0 : $data['forum_id'],				'poster_id'			=> (int) $user->data['user_id'],				'icon_id'			=> $data['icon_id'],				'poster_ip'			=> $user->ip,				'post_time'			=> $current_time,				'post_approved'		=> $post_approval,				'enable_bbcode'		=> $data['enable_bbcode'],				'enable_smilies'	=> $data['enable_smilies'],				'enable_magic_url'	=> $data['enable_urls'],				'enable_sig'		=> $data['enable_sig'],				'post_username'		=> (!$user->data['is_registered']) ? $username : '',				'post_subject'		=> $subject,				'post_text'			=> $data['message'],				'post_checksum'		=> $data['message_md5'],				'post_attachment'	=> (!empty($data['attachment_data'])) ? 1 : 0,				'bbcode_bitfield'	=> $data['bbcode_bitfield'],				'bbcode_uid'		=> $data['bbcode_uid'],				'post_postcount'	=> ($auth->acl_get('f_postcount', $data['forum_id'])) ? 1 : 0,				'post_edit_locked'	=> $data['post_edit_locked']			);		break;		case 'edit_first_post':		case 'edit':		case 'edit_last_post':		case 'edit_topic':			// If edit reason is given always display edit info			// If editing last post then display no edit info			// If m_edit permission then display no edit info			// If normal edit display edit info			// Display edit info if edit reason given or user is editing his post, which is not the last within the topic.			if ($data['post_edit_reason'] || (!$auth->acl_get('m_edit', $data['forum_id']) && ($post_mode == 'edit' || $post_mode == 'edit_first_post')))			{				$data['post_edit_reason']		= truncate_string($data['post_edit_reason'], 255, 255, false);				$sql_data[POSTS_TABLE]['sql']	= array(					'post_edit_time'	=> $current_time,					'post_edit_reason'	=> $data['post_edit_reason'],					'post_edit_user'	=> (int) $data['post_edit_user'],				);				$sql_data[POSTS_TABLE]['stat'][] = 'post_edit_count = post_edit_count + 1';			}			else if (!$data['post_edit_reason'] && $mode == 'edit' && $auth->acl_get('m_edit', $data['forum_id']))			{				$sql_data[POSTS_TABLE]['sql'] = array(					'post_edit_reason'	=> '',				);			}			// If the person editing this post is different to the one having posted then we will add a log entry stating the edit			// Could be simplified by only adding to the log if the edit is not tracked - but this may confuse admins/mods			if ($user->data['user_id'] != $poster_id)			{				$log_subject = ($subject) ? $subject : $data['topic_title'];				add_log('mod', $data['forum_id'], $data['topic_id'], 'LOG_POST_EDITED', $log_subject, (!empty($username)) ? $username : $user->lang['GUEST']);			}			if (!isset($sql_data[POSTS_TABLE]['sql']))			{				$sql_data[POSTS_TABLE]['sql'] = array();			}			$sql_data[POSTS_TABLE]['sql'] = array_merge($sql_data[POSTS_TABLE]['sql'], array(				'forum_id'			=> ($topic_type == POST_GLOBAL) ? 0 : $data['forum_id'],				'poster_id'			=> $data['poster_id'],				'icon_id'			=> $data['icon_id'],				'post_approved'		=> (!$post_approval) ? 0 : $data['post_approved'],				'enable_bbcode'		=> $data['enable_bbcode'],				'enable_smilies'	=> $data['enable_smilies'],				'enable_magic_url'	=> $data['enable_urls'],				'enable_sig'		=> $data['enable_sig'],				'post_username'		=> ($username && $data['poster_id'] == ANONYMOUS) ? $username : '',				'post_subject'		=> $subject,				'post_checksum'		=> $data['message_md5'],				'post_attachment'	=> (!empty($data['attachment_data'])) ? 1 : 0,				'bbcode_bitfield'	=> $data['bbcode_bitfield'],				'bbcode_uid'		=> $data['bbcode_uid'],				'post_edit_locked'	=> $data['post_edit_locked'])			);			if ($update_message)			{				$sql_data[POSTS_TABLE]['sql']['post_text'] = $data['message'];			}		break;	}	$post_approved = $sql_data[POSTS_TABLE]['sql']['post_approved'];	$topic_row = array();	// And the topic ladies and gentlemen	switch ($post_mode)	{		case 'post':			$sql_data[TOPICS_TABLE]['sql'] = array(				'topic_poster'				=> (int) $user->data['user_id'],				'topic_time'				=> $current_time,				'topic_last_view_time'		=> $current_time,				'forum_id'					=> ($topic_type == POST_GLOBAL) ? 0 : $data['forum_id'],				'icon_id'					=> $data['icon_id'],				'topic_approved'			=> $post_approval,				'topic_title'				=> $subject,				'topic_first_poster_name'	=> (!$user->data['is_registered'] && $username) ? $username : (($user->data['user_id'] != ANONYMOUS) ? $user->data['username'] : ''),				'topic_first_poster_colour'	=> $user->data['user_colour'],				'topic_type'				=> $topic_type,				'topic_time_limit'			=> ($topic_type == POST_STICKY || $topic_type == POST_ANNOUNCE) ? ($data['topic_time_limit'] * 86400) : 0,				'topic_attachment'			=> (!empty($data['attachment_data'])) ? 1 : 0,			);			if (isset($poll['poll_options']) && !empty($poll['poll_options']))			{				$poll_start = ($poll['poll_start']) ? $poll['poll_start'] : $current_time;				$poll_length = $poll['poll_length'] * 86400;				if ($poll_length < 0)				{					$poll_start = $poll_start + $poll_length;					if ($poll_start < 0)					{						$poll_start = 0;					}					$poll_length = 1;				}				$sql_data[TOPICS_TABLE]['sql'] = array_merge($sql_data[TOPICS_TABLE]['sql'], array(					'poll_title'		=> $poll['poll_title'],					'poll_start'		=> $poll_start,					'poll_max_options'	=> $poll['poll_max_options'],					'poll_length'		=> $poll_length,					'poll_vote_change'	=> $poll['poll_vote_change'])				);			}			$sql_data[USERS_TABLE]['stat'][] = "user_lastpost_time = $current_time" . (($auth->acl_get('f_postcount', $data['forum_id']) && $post_approval) ? ', user_posts = user_posts + 1' : '');			if ($topic_type != POST_GLOBAL)			{				if ($post_approval)				{					$sql_data[FORUMS_TABLE]['stat'][] = 'forum_posts = forum_posts + 1';				}				$sql_data[FORUMS_TABLE]['stat'][] = 'forum_topics_real = forum_topics_real + 1' . (($post_approval) ? ', forum_topics = forum_topics + 1' : '');			}		break;		case 'reply':			$sql_data[TOPICS_TABLE]['stat'][] = 'topic_last_view_time = ' . $current_time . ',				topic_replies_real = topic_replies_real + 1,				topic_bumped = 0,				topic_bumper = 0' .				(($post_approval) ? ', topic_replies = topic_replies + 1' : '') .				((!empty($data['attachment_data']) || (isset($data['topic_attachment']) && $data['topic_attachment'])) ? ', topic_attachment = 1' : '');			$sql_data[USERS_TABLE]['stat'][] = "user_lastpost_time = $current_time" . (($auth->acl_get('f_postcount', $data['forum_id']) && $post_approval) ? ', user_posts = user_posts + 1' : '');			if ($post_approval && $topic_type != POST_GLOBAL)			{				$sql_data[FORUMS_TABLE]['stat'][] = 'forum_posts = forum_posts + 1';			}		break;		case 'edit_topic':		case 'edit_first_post':			if (isset($poll['poll_options']))			{				$poll_start = ($poll['poll_start'] || empty($poll['poll_options'])) ? $poll['poll_start'] : $current_time;				$poll_length = $poll['poll_length'] * 86400;				if ($poll_length < 0)				{					$poll_start = $poll_start + $poll_length;					if ($poll_start < 0)					{						$poll_start = 0;					}					$poll_length = 1;				}			}			$sql_data[TOPICS_TABLE]['sql'] = array(				'forum_id'					=> ($topic_type == POST_GLOBAL) ? 0 : $data['forum_id'],				'icon_id'					=> $data['icon_id'],				'topic_approved'			=> (!$post_approval) ? 0 : $data['topic_approved'],				'topic_title'				=> $subject,				'topic_first_poster_name'	=> $username,				'topic_type'				=> $topic_type,				'topic_time_limit'			=> ($topic_type == POST_STICKY || $topic_type == POST_ANNOUNCE) ? ($data['topic_time_limit'] * 86400) : 0,				'poll_title'				=> (isset($poll['poll_options'])) ? $poll['poll_title'] : '',				'poll_start'				=> (isset($poll['poll_options'])) ? $poll_start : 0,				'poll_max_options'			=> (isset($poll['poll_options'])) ? $poll['poll_max_options'] : 1,				'poll_length'				=> (isset($poll['poll_options'])) ? $poll_length : 0,				'poll_vote_change'			=> (isset($poll['poll_vote_change'])) ? $poll['poll_vote_change'] : 0,				'topic_last_view_time'		=> $current_time,				'topic_attachment'			=> (!empty($data['attachment_data'])) ? 1 : (isset($data['topic_attachment']) ? $data['topic_attachment'] : 0),			);			// Correctly set back the topic replies and forum posts... only if the topic was approved before and now gets disapproved			if (!$post_approval && $data['topic_approved'])			{				// Do we need to grab some topic informations?				if (!sizeof($topic_row))				{					$sql = 'SELECT topic_type, topic_replies, topic_replies_real, topic_approved						FROM ' . TOPICS_TABLE . '						WHERE topic_id = ' . $data['topic_id'];					$result = $db->sql_query($sql);					$topic_row = $db->sql_fetchrow($result);					$db->sql_freeresult($result);				}				// If this is the only post remaining we do not need to decrement topic_replies.				// Also do not decrement if first post - then the topic_replies will not be adjusted if approving the topic again.				// If this is an edited topic or the first post the topic gets completely disapproved later on...				$sql_data[FORUMS_TABLE]['stat'][] = 'forum_topics = forum_topics - 1';				$sql_data[FORUMS_TABLE]['stat'][] = 'forum_posts = forum_posts - ' . ($topic_row['topic_replies'] + 1);				set_config_count('num_topics', -1, true);				set_config_count('num_posts', ($topic_row['topic_replies'] + 1) * (-1), true);				// Only decrement this post, since this is the one non-approved now				if ($auth->acl_get('f_postcount', $data['forum_id']))				{					$sql_data[USERS_TABLE]['stat'][] = 'user_posts = user_posts - 1';				}			}		break;		case 'edit':		case 'edit_last_post':			// Correctly set back the topic replies and forum posts... but only if the post was approved before.			if (!$post_approval && $data['post_approved'])			{				$sql_data[TOPICS_TABLE]['stat'][] = 'topic_replies = topic_replies - 1, topic_last_view_time = ' . $current_time;				$sql_data[FORUMS_TABLE]['stat'][] = 'forum_posts = forum_posts - 1';				set_config_count('num_posts', -1, true);				if ($auth->acl_get('f_postcount', $data['forum_id']))				{					$sql_data[USERS_TABLE]['stat'][] = 'user_posts = user_posts - 1';				}			}		break;	}	// Submit new topic	if ($post_mode == 'post')	{		$sql = 'INSERT INTO ' . TOPICS_TABLE . ' ' .			$db->sql_build_array('INSERT', $sql_data[TOPICS_TABLE]['sql']);		$db->sql_query($sql);		$data['topic_id'] = $db->sql_nextid();		$sql_data[POSTS_TABLE]['sql'] = array_merge($sql_data[POSTS_TABLE]['sql'], array(			'topic_id' => $data['topic_id'])		);		unset($sql_data[TOPICS_TABLE]['sql']);	}	// Submit new post	if ($post_mode == 'post' || $post_mode == 'reply')	{		if ($post_mode == 'reply')		{			$sql_data[POSTS_TABLE]['sql'] = array_merge($sql_data[POSTS_TABLE]['sql'], array(				'topic_id' => $data['topic_id'])			);		}		$sql = 'INSERT INTO ' . POSTS_TABLE . ' ' . $db->sql_build_array('INSERT', $sql_data[POSTS_TABLE]['sql']);		$db->sql_query($sql);		$data['post_id'] = $db->sql_nextid();		if ($post_mode == 'post')		{			$sql_data[TOPICS_TABLE]['sql'] = array(				'topic_first_post_id'		=> $data['post_id'],				'topic_last_post_id'		=> $data['post_id'],				'topic_last_post_time'		=> $current_time,				'topic_last_poster_id'		=> (int) $user->data['user_id'],				'topic_last_poster_name'	=> (!$user->data['is_registered'] && $username) ? $username : (($user->data['user_id'] != ANONYMOUS) ? $user->data['username'] : ''),				'topic_last_poster_colour'	=> $user->data['user_colour'],				'topic_last_post_subject'	=> (string) $subject,			);		}		unset($sql_data[POSTS_TABLE]['sql']);	}	$make_global = false;	// Are we globalising or unglobalising?	if ($post_mode == 'edit_first_post' || $post_mode == 'edit_topic')	{		if (!sizeof($topic_row))		{			$sql = 'SELECT topic_type, topic_replies, topic_replies_real, topic_approved, topic_last_post_id				FROM ' . TOPICS_TABLE . '				WHERE topic_id = ' . $data['topic_id'];			$result = $db->sql_query($sql);			$topic_row = $db->sql_fetchrow($result);			$db->sql_freeresult($result);		}		// globalise/unglobalise?		if (($topic_row['topic_type'] != POST_GLOBAL && $topic_type == POST_GLOBAL) || ($topic_row['topic_type'] == POST_GLOBAL && $topic_type != POST_GLOBAL))		{			if (!empty($sql_data[FORUMS_TABLE]['stat']) && implode('', $sql_data[FORUMS_TABLE]['stat']))			{				$db->sql_query('UPDATE ' . FORUMS_TABLE . ' SET ' . implode(', ', $sql_data[FORUMS_TABLE]['stat']) . ' WHERE forum_id = ' . $data['forum_id']);			}			$make_global = true;			$sql_data[FORUMS_TABLE]['stat'] = array();		}		// globalise		if ($topic_row['topic_type'] != POST_GLOBAL && $topic_type == POST_GLOBAL)		{			// Decrement topic/post count			$sql_data[FORUMS_TABLE]['stat'][] = 'forum_posts = forum_posts - ' . ($topic_row['topic_replies_real'] + 1);			$sql_data[FORUMS_TABLE]['stat'][] = 'forum_topics_real = forum_topics_real - 1' . (($topic_row['topic_approved']) ? ', forum_topics = forum_topics - 1' : '');			// Update forum_ids for all posts			$sql = 'UPDATE ' . POSTS_TABLE . '				SET forum_id = 0				WHERE topic_id = ' . $data['topic_id'];			$db->sql_query($sql);		}		// unglobalise		else if ($topic_row['topic_type'] == POST_GLOBAL && $topic_type != POST_GLOBAL)		{			// Increment topic/post count			$sql_data[FORUMS_TABLE]['stat'][] = 'forum_posts = forum_posts + ' . ($topic_row['topic_replies_real'] + 1);			$sql_data[FORUMS_TABLE]['stat'][] = 'forum_topics_real = forum_topics_real + 1' . (($topic_row['topic_approved']) ? ', forum_topics = forum_topics + 1' : '');			// Update forum_ids for all posts			$sql = 'UPDATE ' . POSTS_TABLE . '				SET forum_id = ' . $data['forum_id'] . '				WHERE topic_id = ' . $data['topic_id'];			$db->sql_query($sql);		}	}	// Update the topics table	if (isset($sql_data[TOPICS_TABLE]['sql']))	{		$sql = 'UPDATE ' . TOPICS_TABLE . '			SET ' . $db->sql_build_array('UPDATE', $sql_data[TOPICS_TABLE]['sql']) . '			WHERE topic_id = ' . $data['topic_id'];		$db->sql_query($sql);	}	// Update the posts table	if (isset($sql_data[POSTS_TABLE]['sql']))	{		$sql = 'UPDATE ' . POSTS_TABLE . '			SET ' . $db->sql_build_array('UPDATE', $sql_data[POSTS_TABLE]['sql']) . '			WHERE post_id = ' . $data['post_id'];		$db->sql_query($sql);	}	// Update Poll Tables	if (isset($poll['poll_options']))	{		$cur_poll_options = array();		if ($mode == 'edit')		{			$sql = 'SELECT *				FROM ' . POLL_OPTIONS_TABLE . '				WHERE topic_id = ' . $data['topic_id'] . '				ORDER BY poll_option_id';			$result = $db->sql_query($sql);			$cur_poll_options = array();			while ($row = $db->sql_fetchrow($result))			{				$cur_poll_options[] = $row;			}			$db->sql_freeresult($result);		}		$sql_insert_ary = array();		for ($i = 0, $size = sizeof($poll['poll_options']); $i < $size; $i++)		{			if (strlen(trim($poll['poll_options'][$i])))			{				if (empty($cur_poll_options[$i]))				{					// If we add options we need to put them to the end to be able to preserve votes...					$sql_insert_ary[] = array(						'poll_option_id'	=> (int) sizeof($cur_poll_options) + 1 + sizeof($sql_insert_ary),						'topic_id'			=> (int) $data['topic_id'],						'poll_option_text'	=> (string) $poll['poll_options'][$i]					);				}				else if ($poll['poll_options'][$i] != $cur_poll_options[$i])				{					$sql = 'UPDATE ' . POLL_OPTIONS_TABLE . "						SET poll_option_text = '" . $db->sql_escape($poll['poll_options'][$i]) . "'						WHERE poll_option_id = " . $cur_poll_options[$i]['poll_option_id'] . '							AND topic_id = ' . $data['topic_id'];					$db->sql_query($sql);				}			}		}		$db->sql_multi_insert(POLL_OPTIONS_TABLE, $sql_insert_ary);		if (sizeof($poll['poll_options']) < sizeof($cur_poll_options))		{			$sql = 'DELETE FROM ' . POLL_OPTIONS_TABLE . '				WHERE poll_option_id > ' . sizeof($poll['poll_options']) . '					AND topic_id = ' . $data['topic_id'];			$db->sql_query($sql);		}		// If edited, we would need to reset votes (since options can be re-ordered above, you can't be sure if the change is for changing the text or adding an option		if ($mode == 'edit' && sizeof($poll['poll_options']) != sizeof($cur_poll_options))		{			$db->sql_query('DELETE FROM ' . POLL_VOTES_TABLE . ' WHERE topic_id = ' . $data['topic_id']);			$db->sql_query('UPDATE ' . POLL_OPTIONS_TABLE . ' SET poll_option_total = 0 WHERE topic_id = ' . $data['topic_id']);		}	}	// Submit Attachments	if (!empty($data['attachment_data']) && $data['post_id'] && in_array($mode, array('post', 'reply', 'quote', 'edit')))	{		$space_taken = $files_added = 0;		$orphan_rows = array();		foreach ($data['attachment_data'] as $pos => $attach_row)		{			$orphan_rows[(int) $attach_row['attach_id']] = array();		}		if (sizeof($orphan_rows))		{			$sql = 'SELECT attach_id, filesize, physical_filename				FROM ' . ATTACHMENTS_TABLE . '				WHERE ' . $db->sql_in_set('attach_id', array_keys($orphan_rows)) . '					AND is_orphan = 1					AND poster_id = ' . $user->data['user_id'];			$result = $db->sql_query($sql);			$orphan_rows = array();			while ($row = $db->sql_fetchrow($result))			{				$orphan_rows[$row['attach_id']] = $row;			}			$db->sql_freeresult($result);		}		foreach ($data['attachment_data'] as $pos => $attach_row)		{			if ($attach_row['is_orphan'] && !isset($orphan_rows[$attach_row['attach_id']]))			{				continue;			}			if (!$attach_row['is_orphan'])			{				// update entry in db if attachment already stored in db and filespace				$sql = 'UPDATE ' . ATTACHMENTS_TABLE . "					SET attach_comment = '" . $db->sql_escape($attach_row['attach_comment']) . "'					WHERE attach_id = " . (int) $attach_row['attach_id'] . '						AND is_orphan = 0';				$db->sql_query($sql);			}			else			{				// insert attachment into db				if (!@file_exists($phpbb_root_path . $config['upload_path'] . '/' . utf8_basename($orphan_rows[$attach_row['attach_id']]['physical_filename'])))				{					continue;				}				$space_taken += $orphan_rows[$attach_row['attach_id']]['filesize'];				$files_added++;				$attach_sql = array(					'post_msg_id'		=> $data['post_id'],					'topic_id'			=> $data['topic_id'],					'is_orphan'			=> 0,					'poster_id'			=> $poster_id,					'attach_comment'	=> $attach_row['attach_comment'],				);				$sql = 'UPDATE ' . ATTACHMENTS_TABLE . ' SET ' . $db->sql_build_array('UPDATE', $attach_sql) . '					WHERE attach_id = ' . $attach_row['attach_id'] . '						AND is_orphan = 1						AND poster_id = ' . $user->data['user_id'];				$db->sql_query($sql);			}		}		if ($space_taken && $files_added)		{			set_config_count('upload_dir_size', $space_taken, true);			set_config_count('num_files', $files_added, true);		}	}	// we need to update the last forum information	// only applicable if the topic is not global and it is approved	// we also check to make sure we are not dealing with globaling the latest topic (pretty rare but still needs to be checked)	if ($topic_type != POST_GLOBAL && !$make_global && ($post_approved || !$data['post_approved']))	{		// the last post makes us update the forum table. This can happen if...		// We make a new topic		// We reply to a topic		// We edit the last post in a topic and this post is the latest in the forum (maybe)		// We edit the only post in the topic		// We edit the first post in the topic and all the other posts are not approved		if (($post_mode == 'post' || $post_mode == 'reply') && $post_approved)		{			$sql_data[FORUMS_TABLE]['stat'][] = 'forum_last_post_id = ' . $data['post_id'];			$sql_data[FORUMS_TABLE]['stat'][] = "forum_last_post_subject = '" . $db->sql_escape($subject) . "'";			$sql_data[FORUMS_TABLE]['stat'][] = 'forum_last_post_time = ' . $current_time;			$sql_data[FORUMS_TABLE]['stat'][] = 'forum_last_poster_id = ' . (int) $user->data['user_id'];			$sql_data[FORUMS_TABLE]['stat'][] = "forum_last_poster_name = '" . $db->sql_escape((!$user->data['is_registered'] && $username) ? $username : (($user->data['user_id'] != ANONYMOUS) ? $user->data['username'] : '')) . "'";			$sql_data[FORUMS_TABLE]['stat'][] = "forum_last_poster_colour = '" . $db->sql_escape($user->data['user_colour']) . "'";		}		else if ($post_mode == 'edit_last_post' || $post_mode == 'edit_topic' || ($post_mode == 'edit_first_post' && !$data['topic_replies']))		{			// this does not _necessarily_ mean that we must update the info again,			// it just means that we might have to			$sql = 'SELECT forum_last_post_id, forum_last_post_subject				FROM ' . FORUMS_TABLE . '				WHERE forum_id = ' . (int) $data['forum_id'];			$result = $db->sql_query($sql);			$row = $db->sql_fetchrow($result);			$db->sql_freeresult($result);			// this post is the latest post in the forum, better update			if ($row['forum_last_post_id'] == $data['post_id'])			{				// If post approved and subject changed, or poster is anonymous, we need to update the forum_last* rows				if ($post_approved && ($row['forum_last_post_subject'] !== $subject || $data['poster_id'] == ANONYMOUS))				{					// the post's subject changed					if ($row['forum_last_post_subject'] !== $subject)					{						$sql_data[FORUMS_TABLE]['stat'][] = 'forum_last_post_subject = \'' . $db->sql_escape($subject) . '\'';					}					// Update the user name if poster is anonymous... just in case an admin changed it					if ($data['poster_id'] == ANONYMOUS)					{						$sql_data[FORUMS_TABLE]['stat'][] = "forum_last_poster_name = '" . $db->sql_escape($username) . "'";					}				}				else if ($data['post_approved'] !== $post_approved)				{					// we need a fresh change of socks, everything has become invalidated					$sql = 'SELECT MAX(topic_last_post_id) as last_post_id						FROM ' . TOPICS_TABLE . '						WHERE forum_id = ' . (int) $data['forum_id'] . '							AND topic_approved = 1';					$result = $db->sql_query($sql);					$row = $db->sql_fetchrow($result);					$db->sql_freeresult($result);					// any posts left in this forum?					if (!empty($row['last_post_id']))					{						$sql = 'SELECT p.post_id, p.post_subject, p.post_time, p.poster_id, p.post_username, u.user_id, u.username, u.user_colour							FROM ' . POSTS_TABLE . ' p, ' . USERS_TABLE . ' u							WHERE p.poster_id = u.user_id								AND p.post_id = ' . (int) $row['last_post_id'];						$result = $db->sql_query($sql);						$row = $db->sql_fetchrow($result);						$db->sql_freeresult($result);						// salvation, a post is found! jam it into the forums table						$sql_data[FORUMS_TABLE]['stat'][] = 'forum_last_post_id = ' . (int) $row['post_id'];						$sql_data[FORUMS_TABLE]['stat'][] = "forum_last_post_subject = '" . $db->sql_escape($row['post_subject']) . "'";						$sql_data[FORUMS_TABLE]['stat'][] = 'forum_last_post_time = ' . (int) $row['post_time'];						$sql_data[FORUMS_TABLE]['stat'][] = 'forum_last_poster_id = ' . (int) $row['poster_id'];						$sql_data[FORUMS_TABLE]['stat'][] = "forum_last_poster_name = '" . $db->sql_escape(($row['poster_id'] == ANONYMOUS) ? $row['post_username'] : $row['username']) . "'";						$sql_data[FORUMS_TABLE]['stat'][] = "forum_last_poster_colour = '" . $db->sql_escape($row['user_colour']) . "'";					}					else					{						// just our luck, the last topic in the forum has just been turned unapproved...						$sql_data[FORUMS_TABLE]['stat'][] = 'forum_last_post_id = 0';						$sql_data[FORUMS_TABLE]['stat'][] = "forum_last_post_subject = ''";						$sql_data[FORUMS_TABLE]['stat'][] = 'forum_last_post_time = 0';						$sql_data[FORUMS_TABLE]['stat'][] = 'forum_last_poster_id = 0';						$sql_data[FORUMS_TABLE]['stat'][] = "forum_last_poster_name = ''";						$sql_data[FORUMS_TABLE]['stat'][] = "forum_last_poster_colour = ''";					}				}			}		}	}	else if ($make_global)	{		// somebody decided to be a party pooper, we must recalculate the whole shebang (maybe)		$sql = 'SELECT forum_last_post_id			FROM ' . FORUMS_TABLE . '			WHERE forum_id = ' . (int) $data['forum_id'];		$result = $db->sql_query($sql);		$forum_row = $db->sql_fetchrow($result);		$db->sql_freeresult($result);		// we made a topic global, go get new data		if ($topic_row['topic_type'] != POST_GLOBAL && $topic_type == POST_GLOBAL && $forum_row['forum_last_post_id'] == $topic_row['topic_last_post_id'])		{			// we need a fresh change of socks, everything has become invalidated			$sql = 'SELECT MAX(topic_last_post_id) as last_post_id				FROM ' . TOPICS_TABLE . '				WHERE forum_id = ' . (int) $data['forum_id'] . '					AND topic_approved = 1';			$result = $db->sql_query($sql);			$row = $db->sql_fetchrow($result);			$db->sql_freeresult($result);			// any posts left in this forum?			if (!empty($row['last_post_id']))			{				$sql = 'SELECT p.post_id, p.post_subject, p.post_time, p.poster_id, p.post_username, u.user_id, u.username, u.user_colour					FROM ' . POSTS_TABLE . ' p, ' . USERS_TABLE . ' u					WHERE p.poster_id = u.user_id						AND p.post_id = ' . (int) $row['last_post_id'];				$result = $db->sql_query($sql);				$row = $db->sql_fetchrow($result);				$db->sql_freeresult($result);				// salvation, a post is found! jam it into the forums table				$sql_data[FORUMS_TABLE]['stat'][] = 'forum_last_post_id = ' . (int) $row['post_id'];				$sql_data[FORUMS_TABLE]['stat'][] = "forum_last_post_subject = '" . $db->sql_escape($row['post_subject']) . "'";				$sql_data[FORUMS_TABLE]['stat'][] = 'forum_last_post_time = ' . (int) $row['post_time'];				$sql_data[FORUMS_TABLE]['stat'][] = 'forum_last_poster_id = ' . (int) $row['poster_id'];				$sql_data[FORUMS_TABLE]['stat'][] = "forum_last_poster_name = '" . $db->sql_escape(($row['poster_id'] == ANONYMOUS) ? $row['post_username'] : $row['username']) . "'";				$sql_data[FORUMS_TABLE]['stat'][] = "forum_last_poster_colour = '" . $db->sql_escape($row['user_colour']) . "'";			}			else			{				// just our luck, the last topic in the forum has just been globalized...				$sql_data[FORUMS_TABLE]['stat'][] = 'forum_last_post_id = 0';				$sql_data[FORUMS_TABLE]['stat'][] = "forum_last_post_subject = ''";				$sql_data[FORUMS_TABLE]['stat'][] = 'forum_last_post_time = 0';				$sql_data[FORUMS_TABLE]['stat'][] = 'forum_last_poster_id = 0';				$sql_data[FORUMS_TABLE]['stat'][] = "forum_last_poster_name = ''";				$sql_data[FORUMS_TABLE]['stat'][] = "forum_last_poster_colour = ''";			}		}		else if ($topic_row['topic_type'] == POST_GLOBAL && $topic_type != POST_GLOBAL && $forum_row['forum_last_post_id'] < $topic_row['topic_last_post_id'])		{			// this post has a higher id, it is newer			$sql = 'SELECT p.post_id, p.post_subject, p.post_time, p.poster_id, p.post_username, u.user_id, u.username, u.user_colour				FROM ' . POSTS_TABLE . ' p, ' . USERS_TABLE . ' u				WHERE p.poster_id = u.user_id					AND p.post_id = ' . (int) $topic_row['topic_last_post_id'];			$result = $db->sql_query($sql);			$row = $db->sql_fetchrow($result);			$db->sql_freeresult($result);			// salvation, a post is found! jam it into the forums table			$sql_data[FORUMS_TABLE]['stat'][] = 'forum_last_post_id = ' . (int) $row['post_id'];			$sql_data[FORUMS_TABLE]['stat'][] = "forum_last_post_subject = '" . $db->sql_escape($row['post_subject']) . "'";			$sql_data[FORUMS_TABLE]['stat'][] = 'forum_last_post_time = ' . (int) $row['post_time'];			$sql_data[FORUMS_TABLE]['stat'][] = 'forum_last_poster_id = ' . (int) $row['poster_id'];			$sql_data[FORUMS_TABLE]['stat'][] = "forum_last_poster_name = '" . $db->sql_escape(($row['poster_id'] == ANONYMOUS) ? $row['post_username'] : $row['username']) . "'";			$sql_data[FORUMS_TABLE]['stat'][] = "forum_last_poster_colour = '" . $db->sql_escape($row['user_colour']) . "'";		}	}	// topic sync time!	// simply, we update if it is a reply or the last post is edited	if ($post_approved)	{		// reply requires the whole thing		if ($post_mode == 'reply')		{			$sql_data[TOPICS_TABLE]['stat'][] = 'topic_last_post_id = ' . (int) $data['post_id'];			$sql_data[TOPICS_TABLE]['stat'][] = 'topic_last_poster_id = ' . (int) $user->data['user_id'];			$sql_data[TOPICS_TABLE]['stat'][] = "topic_last_poster_name = '" . $db->sql_escape((!$user->data['is_registered'] && $username) ? $username : (($user->data['user_id'] != ANONYMOUS) ? $user->data['username'] : '')) . "'";			$sql_data[TOPICS_TABLE]['stat'][] = "topic_last_poster_colour = '" . (($user->data['user_id'] != ANONYMOUS) ? $db->sql_escape($user->data['user_colour']) : '') . "'";			$sql_data[TOPICS_TABLE]['stat'][] = "topic_last_post_subject = '" . $db->sql_escape($subject) . "'";			$sql_data[TOPICS_TABLE]['stat'][] = 'topic_last_post_time = ' . (int) $current_time;		}		else if ($post_mode == 'edit_last_post' || $post_mode == 'edit_topic' || ($post_mode == 'edit_first_post' && !$data['topic_replies']))		{			// only the subject can be changed from edit			$sql_data[TOPICS_TABLE]['stat'][] = "topic_last_post_subject = '" . $db->sql_escape($subject) . "'";			// Maybe not only the subject, but also changing anonymous usernames. ;)			if ($data['poster_id'] == ANONYMOUS)			{				$sql_data[TOPICS_TABLE]['stat'][] = "topic_last_poster_name = '" . $db->sql_escape($username) . "'";			}		}	}	else if (!$data['post_approved'] && ($post_mode == 'edit_last_post' || $post_mode == 'edit_topic' || ($post_mode == 'edit_first_post' && !$data['topic_replies'])))	{		// like having the rug pulled from under us		$sql = 'SELECT MAX(post_id) as last_post_id			FROM ' . POSTS_TABLE . '			WHERE topic_id = ' . (int) $data['topic_id'] . '				AND post_approved = 1';		$result = $db->sql_query($sql);		$row = $db->sql_fetchrow($result);		$db->sql_freeresult($result);		// any posts left in this forum?		if (!empty($row['last_post_id']))		{			$sql = 'SELECT p.post_id, p.post_subject, p.post_time, p.poster_id, p.post_username, u.user_id, u.username, u.user_colour				FROM ' . POSTS_TABLE . ' p, ' . USERS_TABLE . ' u				WHERE p.poster_id = u.user_id					AND p.post_id = ' . (int) $row['last_post_id'];			$result = $db->sql_query($sql);			$row = $db->sql_fetchrow($result);			$db->sql_freeresult($result);			// salvation, a post is found! jam it into the topics table			$sql_data[TOPICS_TABLE]['stat'][] = 'topic_last_post_id = ' . (int) $row['post_id'];			$sql_data[TOPICS_TABLE]['stat'][] = "topic_last_post_subject = '" . $db->sql_escape($row['post_subject']) . "'";			$sql_data[TOPICS_TABLE]['stat'][] = 'topic_last_post_time = ' . (int) $row['post_time'];			$sql_data[TOPICS_TABLE]['stat'][] = 'topic_last_poster_id = ' . (int) $row['poster_id'];			$sql_data[TOPICS_TABLE]['stat'][] = "topic_last_poster_name = '" . $db->sql_escape(($row['poster_id'] == ANONYMOUS) ? $row['post_username'] : $row['username']) . "'";			$sql_data[TOPICS_TABLE]['stat'][] = "topic_last_poster_colour = '" . $db->sql_escape($row['user_colour']) . "'";		}	}	// Update total post count, do not consider moderated posts/topics	if ($post_approval)	{		if ($post_mode == 'post')		{			set_config_count('num_topics', 1, true);			set_config_count('num_posts', 1, true);		}		if ($post_mode == 'reply')		{			set_config_count('num_posts', 1, true);		}	}	// Update forum stats	$where_sql = array(POSTS_TABLE => 'post_id = ' . $data['post_id'], TOPICS_TABLE => 'topic_id = ' . $data['topic_id'], FORUMS_TABLE => 'forum_id = ' . $data['forum_id'], USERS_TABLE => 'user_id = ' . $poster_id);	foreach ($sql_data as $table => $update_ary)	{		if (isset($update_ary['stat']) && implode('', $update_ary['stat']))		{			$sql = "UPDATE $table SET " . implode(', ', $update_ary['stat']) . ' WHERE ' . $where_sql[$table];			$db->sql_query($sql);		}	}	// Delete topic shadows (if any exist). We do not need a shadow topic for an global announcement	if ($make_global)	{		$sql = 'DELETE FROM ' . TOPICS_TABLE . '			WHERE topic_moved_id = ' . $data['topic_id'];		$db->sql_query($sql);	}	// Committing the transaction before updating search index	$db->sql_transaction('commit');	// Delete draft if post was loaded...	$draft_id = request_var('draft_loaded', 0);	if ($draft_id)	{		$sql = 'DELETE FROM ' . DRAFTS_TABLE . "			WHERE draft_id = $draft_id				AND user_id = {$user->data['user_id']}";		$db->sql_query($sql);	}	// Index message contents	if ($update_search_index && $data['enable_indexing'])	{		// Select the search method and do some additional checks to ensure it can actually be utilised		$search_type = basename($config['search_type']);		if (!file_exists($phpbb_root_path . 'includes/search/' . $search_type . '.' . $phpEx))		{			trigger_error('NO_SUCH_SEARCH_MODULE');		}		if (!class_exists($search_type))		{			include("{$phpbb_root_path}includes/search/$search_type.$phpEx");		}		$error = false;		$search = new $search_type($error);		if ($error)		{			trigger_error($error);		}		$search->index($mode, $data['post_id'], $data['message'], $subject, $poster_id, ($topic_type == POST_GLOBAL) ? 0 : $data['forum_id']);	}	// Topic Notification, do not change if moderator is changing other users posts...	if ($user->data['user_id'] == $poster_id)	{		if (!$data['notify_set'] && $data['notify'])		{			$sql = 'INSERT INTO ' . TOPICS_WATCH_TABLE . ' (user_id, topic_id)				VALUES (' . $user->data['user_id'] . ', ' . $data['topic_id'] . ')';			$db->sql_query($sql);		}		else if (($config['email_enable'] || $config['jab_enable']) && $data['notify_set'] && !$data['notify'])		{			$sql = 'DELETE FROM ' . TOPICS_WATCH_TABLE . '				WHERE user_id = ' . $user->data['user_id'] . '					AND topic_id = ' . $data['topic_id'];			$db->sql_query($sql);		}	}	if ($mode == 'post' || $mode == 'reply' || $mode == 'quote')	{		// Mark this topic as posted to		markread('post', $data['forum_id'], $data['topic_id']);	}	// Mark this topic as read	// We do not use post_time here, this is intended (post_time can have a date in the past if editing a message)	markread('topic', (($topic_type == POST_GLOBAL) ? 0 : $data['forum_id']), $data['topic_id'], time());	//	if ($config['load_db_lastread'] && $user->data['is_registered'])	{		$sql = 'SELECT mark_time			FROM ' . FORUMS_TRACK_TABLE . '			WHERE user_id = ' . $user->data['user_id'] . '				AND forum_id = ' . (($topic_type == POST_GLOBAL) ? 0 : $data['forum_id']);		$result = $db->sql_query($sql);		$f_mark_time = (int) $db->sql_fetchfield('mark_time');		$db->sql_freeresult($result);	}	else if ($config['load_anon_lastread'] || $user->data['is_registered'])	{		$f_mark_time = false;	}	if (($config['load_db_lastread'] && $user->data['is_registered']) || $config['load_anon_lastread'] || $user->data['is_registered'])	{		// Update forum info		if ($topic_type == POST_GLOBAL)		{			$sql = 'SELECT MAX(topic_last_post_time) as forum_last_post_time				FROM ' . TOPICS_TABLE . '				WHERE forum_id = 0';		}		else		{			$sql = 'SELECT forum_last_post_time				FROM ' . FORUMS_TABLE . '				WHERE forum_id = ' . $data['forum_id'];		}		$result = $db->sql_query($sql);		$forum_last_post_time = (int) $db->sql_fetchfield('forum_last_post_time');		$db->sql_freeresult($result);		update_forum_tracking_info((($topic_type == POST_GLOBAL) ? 0 : $data['forum_id']), $forum_last_post_time, $f_mark_time, false);	}	// Send Notifications	if (($mode == 'reply' || $mode == 'quote' || $mode == 'post') && $post_approval)	{		user_notification($mode, $subject, $data['topic_title'], $data['forum_name'], $data['forum_id'], $data['topic_id'], $data['post_id']);	}	$params = $add_anchor = '';	if ($post_approval)	{		$params .= '&amp;t=' . $data['topic_id'];		if ($mode != 'post')		{			$params .= '&amp;p=' . $data['post_id'];			$add_anchor = '#p' . $data['post_id'];		}	}	else if ($mode != 'post' && $post_mode != 'edit_first_post' && $post_mode != 'edit_topic')	{		$params .= '&amp;t=' . $data['topic_id'];	}	$url = (!$params) ? "{$phpbb_root_path}viewforum.$phpEx" : "{$phpbb_root_path}viewtopic.$phpEx";	$url = append_sid($url, 'f=' . $data['forum_id'] . $params) . $add_anchor;	return $url;}/*** Handle topic bumping* @param int $forum_id The ID of the forum the topic is being bumped belongs to* @param int $topic_id The ID of the topic is being bumping* @param array $post_data Passes some topic parameters:*				- 'topic_title'*				- 'topic_last_post_id'*				- 'topic_last_poster_id'*				- 'topic_last_post_subject'*				- 'topic_last_poster_name'*				- 'topic_last_poster_colour'* @param int $bump_time The time at which topic was bumped, usually it is a current time as obtained via time(). * @return string An URL to the bumped topic, example: ./viewtopic.php?forum_id=1&amptopic_id=2&ampp=3#p3*/function phpbb_bump_topic($forum_id, $topic_id, $post_data, $bump_time = false){	global $config, $db, $user, $phpEx, $phpbb_root_path;	if ($bump_time === false)	{		$bump_time = time();	}	// Begin bumping	$db->sql_transaction('begin');	// Update the topic's last post post_time	$sql = 'UPDATE ' . POSTS_TABLE . "		SET post_time = $bump_time		WHERE post_id = {$post_data['topic_last_post_id']}			AND topic_id = $topic_id";	$db->sql_query($sql);	// Sync the topic's last post time, the rest of the topic's last post data isn't changed	$sql = 'UPDATE ' . TOPICS_TABLE . "		SET topic_last_post_time = $bump_time,			topic_bumped = 1,			topic_bumper = " . $user->data['user_id'] . "		WHERE topic_id = $topic_id";	$db->sql_query($sql);	// Update the forum's last post info	$sql = 'UPDATE ' . FORUMS_TABLE . "		SET forum_last_post_id = " . $post_data['topic_last_post_id'] . ",			forum_last_poster_id = " . $post_data['topic_last_poster_id'] . ",			forum_last_post_subject = '" . $db->sql_escape($post_data['topic_last_post_subject']) . "',			forum_last_post_time = $bump_time,			forum_last_poster_name = '" . $db->sql_escape($post_data['topic_last_poster_name']) . "',			forum_last_poster_colour = '" . $db->sql_escape($post_data['topic_last_poster_colour']) . "'		WHERE forum_id = $forum_id";	$db->sql_query($sql);	// Update bumper's time of the last posting to prevent flood	$sql = 'UPDATE ' . USERS_TABLE . "		SET user_lastpost_time = $bump_time		WHERE user_id = " . $user->data['user_id'];	$db->sql_query($sql);	$db->sql_transaction('commit');	// Mark this topic as posted to	markread('post', $forum_id, $topic_id, $bump_time);	// Mark this topic as read	markread('topic', $forum_id, $topic_id, $bump_time);	// Update forum tracking info	if ($config['load_db_lastread'] && $user->data['is_registered'])	{		$sql = 'SELECT mark_time			FROM ' . FORUMS_TRACK_TABLE . '			WHERE user_id = ' . $user->data['user_id'] . '				AND forum_id = ' . $forum_id;		$result = $db->sql_query($sql);		$f_mark_time = (int) $db->sql_fetchfield('mark_time');		$db->sql_freeresult($result);	}	else if ($config['load_anon_lastread'] || $user->data['is_registered'])	{		$f_mark_time = false;	}	if (($config['load_db_lastread'] && $user->data['is_registered']) || $config['load_anon_lastread'] || $user->data['is_registered'])	{		// Update forum info		$sql = 'SELECT forum_last_post_time			FROM ' . FORUMS_TABLE . '			WHERE forum_id = ' . $forum_id;		$result = $db->sql_query($sql);		$forum_last_post_time = (int) $db->sql_fetchfield('forum_last_post_time');		$db->sql_freeresult($result);		update_forum_tracking_info($forum_id, $forum_last_post_time, $f_mark_time, false);	}	add_log('mod', $forum_id, $topic_id, 'LOG_BUMP_TOPIC', $post_data['topic_title']);	$url = append_sid("{$phpbb_root_path}viewtopic.$phpEx", "f=$forum_id&amp;t=$topic_id&amp;p={$post_data['topic_last_post_id']}") . "#p{$post_data['topic_last_post_id']}";	return $url;}?>
<?php/**** @package acp* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @ignore*/if (!defined('IN_PHPBB')){	exit;}/*** Recalculate Nested Sets** @param int	$new_id	first left_id (should start with 1)* @param string	$pkey	primary key-column (containing the id for the parent_id of the children)* @param string	$table	constant or fullname of the table* @param int	$parent_id parent_id of the current set (default = 0)* @param array	$where	contains strings to compare closer on the where statement (additional)** @author EXreaction*/function recalc_nested_sets(&$new_id, $pkey, $table, $parent_id = 0, $where = array()){	global $db;	$sql = 'SELECT *		FROM ' . $table . '		WHERE parent_id = ' . (int) $parent_id .		((!empty($where)) ? ' AND ' . implode(' AND ', $where) : '') . '		ORDER BY left_id ASC';	$result = $db->sql_query($sql);	while ($row = $db->sql_fetchrow($result))	{		// First we update the left_id for this module		if ($row['left_id'] != $new_id)		{			$db->sql_query('UPDATE ' . $table . ' SET ' . $db->sql_build_array('UPDATE', array('left_id' => $new_id)) . " WHERE $pkey = {$row[$pkey]}");		}		$new_id++;		// Then we go through any children and update their left/right id's		recalc_nested_sets($new_id, $pkey, $table, $row[$pkey], $where);		// Then we come back and update the right_id for this module		if ($row['right_id'] != $new_id)		{			$db->sql_query('UPDATE ' . $table . ' SET ' . $db->sql_build_array('UPDATE', array('right_id' => $new_id)) . " WHERE $pkey = {$row[$pkey]}");		}		$new_id++;	}	$db->sql_freeresult($result);}/*** Simple version of jumpbox, just lists authed forums*/function make_forum_select($select_id = false, $ignore_id = false, $ignore_acl = false, $ignore_nonpost = false, $ignore_emptycat = true, $only_acl_post = false, $return_array = false){	global $db, $user, $auth;	// This query is identical to the jumpbox one	$sql = 'SELECT forum_id, forum_name, parent_id, forum_type, forum_flags, forum_options, left_id, right_id		FROM ' . FORUMS_TABLE . '		ORDER BY left_id ASC';	$result = $db->sql_query($sql, 600);	$right = 0;	$padding_store = array('0' => '');	$padding = '';	$forum_list = ($return_array) ? array() : '';	// Sometimes it could happen that forums will be displayed here not be displayed within the index page	// This is the result of forums not displayed at index, having list permissions and a parent of a forum with no permissions.	// If this happens, the padding could be "broken"	while ($row = $db->sql_fetchrow($result))	{		if ($row['left_id'] < $right)		{			$padding .= '&nbsp; &nbsp;';			$padding_store[$row['parent_id']] = $padding;		}		else if ($row['left_id'] > $right + 1)		{			$padding = (isset($padding_store[$row['parent_id']])) ? $padding_store[$row['parent_id']] : '';		}		$right = $row['right_id'];		$disabled = false;		if (!$ignore_acl && $auth->acl_gets(array('f_list', 'a_forum', 'a_forumadd', 'a_forumdel'), $row['forum_id']))		{			if ($only_acl_post && !$auth->acl_get('f_post', $row['forum_id']) || (!$auth->acl_get('m_approve', $row['forum_id']) && !$auth->acl_get('f_noapprove', $row['forum_id'])))			{				$disabled = true;			}		}		else if (!$ignore_acl)		{			continue;		}		if (			((is_array($ignore_id) && in_array($row['forum_id'], $ignore_id)) || $row['forum_id'] == $ignore_id)			||			// Non-postable forum with no subforums, don't display			($row['forum_type'] == FORUM_CAT && ($row['left_id'] + 1 == $row['right_id']) && $ignore_emptycat)			||			($row['forum_type'] != FORUM_POST && $ignore_nonpost)			)		{			$disabled = true;		}		if ($return_array)		{			// Include some more information...			$selected = (is_array($select_id)) ? ((in_array($row['forum_id'], $select_id)) ? true : false) : (($row['forum_id'] == $select_id) ? true : false);			$forum_list[$row['forum_id']] = array_merge(array('padding' => $padding, 'selected' => ($selected && !$disabled), 'disabled' => $disabled), $row);		}		else		{			$selected = (is_array($select_id)) ? ((in_array($row['forum_id'], $select_id)) ? ' selected="selected"' : '') : (($row['forum_id'] == $select_id) ? ' selected="selected"' : '');			$forum_list .= '<option value="' . $row['forum_id'] . '"' . (($disabled) ? ' disabled="disabled" class="disabled-option"' : $selected) . '>' . $padding . $row['forum_name'] . '</option>';		}	}	$db->sql_freeresult($result);	unset($padding_store);	return $forum_list;}/*** Generate size select options*/function size_select_options($size_compare){	global $user;	$size_types_text = array($user->lang['BYTES'], $user->lang['KIB'], $user->lang['MIB']);	$size_types = array('b', 'kb', 'mb');	$s_size_options = '';	for ($i = 0, $size = sizeof($size_types_text); $i < $size; $i++)	{		$selected = ($size_compare == $size_types[$i]) ? ' selected="selected"' : '';		$s_size_options .= '<option value="' . $size_types[$i] . '"' . $selected . '>' . $size_types_text[$i] . '</option>';	}	return $s_size_options;}/*** Generate list of groups (option fields without select)** @param int $group_id The default group id to mark as selected* @param array $exclude_ids The group ids to exclude from the list, false (default) if you whish to exclude no id* @param int $manage_founder If set to false (default) all groups are returned, if 0 only those groups returned not being managed by founders only, if 1 only those groups returned managed by founders only.** @return string The list of options.*/function group_select_options($group_id, $exclude_ids = false, $manage_founder = false){	global $db, $user, $config;	$exclude_sql = ($exclude_ids !== false && sizeof($exclude_ids)) ? 'WHERE ' . $db->sql_in_set('group_id', array_map('intval', $exclude_ids), true) : '';	$sql_and = (!$config['coppa_enable']) ? (($exclude_sql) ? ' AND ' : ' WHERE ') . "group_name <> 'REGISTERED_COPPA'" : '';	$sql_founder = ($manage_founder !== false) ? (($exclude_sql || $sql_and) ? ' AND ' : ' WHERE ') . 'group_founder_manage = ' . (int) $manage_founder : '';	$sql = 'SELECT group_id, group_name, group_type		FROM ' . GROUPS_TABLE . "		$exclude_sql		$sql_and		$sql_founder		ORDER BY group_type DESC, group_name ASC";	$result = $db->sql_query($sql);	$s_group_options = '';	while ($row = $db->sql_fetchrow($result))	{		$selected = ($row['group_id'] == $group_id) ? ' selected="selected"' : '';		$s_group_options .= '<option' . (($row['group_type'] == GROUP_SPECIAL) ? ' class="sep"' : '') . ' value="' . $row['group_id'] . '"' . $selected . '>' . (($row['group_type'] == GROUP_SPECIAL) ? $user->lang['G_' . $row['group_name']] : $row['group_name']) . '</option>';	}	$db->sql_freeresult($result);	return $s_group_options;}/*** Obtain authed forums list*/function get_forum_list($acl_list = 'f_list', $id_only = true, $postable_only = false, $no_cache = false){	global $db, $auth;	static $forum_rows;	if (!isset($forum_rows))	{		// This query is identical to the jumpbox one		$expire_time = ($no_cache) ? 0 : 600;		$sql = 'SELECT forum_id, forum_name, parent_id, forum_type, left_id, right_id			FROM ' . FORUMS_TABLE . '			ORDER BY left_id ASC';		$result = $db->sql_query($sql, $expire_time);		$forum_rows = array();		$right = $padding = 0;		$padding_store = array('0' => 0);		while ($row = $db->sql_fetchrow($result))		{			if ($row['left_id'] < $right)			{				$padding++;				$padding_store[$row['parent_id']] = $padding;			}			else if ($row['left_id'] > $right + 1)			{				// Ok, if the $padding_store for this parent is empty there is something wrong. For now we will skip over it.				// @todo digging deep to find out "how" this can happen.				$padding = (isset($padding_store[$row['parent_id']])) ? $padding_store[$row['parent_id']] : $padding;			}			$right = $row['right_id'];			$row['padding'] = $padding;			$forum_rows[] = $row;		}		$db->sql_freeresult($result);		unset($padding_store);	}	$rowset = array();	foreach ($forum_rows as $row)	{		if ($postable_only && $row['forum_type'] != FORUM_POST)		{			continue;		}		if ($acl_list == '' || ($acl_list != '' && $auth->acl_gets($acl_list, $row['forum_id'])))		{			$rowset[] = ($id_only) ? (int) $row['forum_id'] : $row;		}	}	return $rowset;}/*** Get forum branch*/function get_forum_branch($forum_id, $type = 'all', $order = 'descending', $include_forum = true){	global $db;	switch ($type)	{		case 'parents':			$condition = 'f1.left_id BETWEEN f2.left_id AND f2.right_id';		break;		case 'children':			$condition = 'f2.left_id BETWEEN f1.left_id AND f1.right_id';		break;		default:			$condition = 'f2.left_id BETWEEN f1.left_id AND f1.right_id OR f1.left_id BETWEEN f2.left_id AND f2.right_id';		break;	}	$rows = array();	$sql = 'SELECT f2.*		FROM ' . FORUMS_TABLE . ' f1		LEFT JOIN ' . FORUMS_TABLE . " f2 ON ($condition)		WHERE f1.forum_id = $forum_id		ORDER BY f2.left_id " . (($order == 'descending') ? 'ASC' : 'DESC');	$result = $db->sql_query($sql);	while ($row = $db->sql_fetchrow($result))	{		if (!$include_forum && $row['forum_id'] == $forum_id)		{			continue;		}		$rows[] = $row;	}	$db->sql_freeresult($result);	return $rows;}/*** Copies permissions from one forum to others** @param int	$src_forum_id		The source forum we want to copy permissions from* @param array	$dest_forum_ids		The destination forum(s) we want to copy to* @param bool	$clear_dest_perms	True if destination permissions should be deleted* @param bool	$add_log			True if log entry should be added** @return bool						False on error** @author bantu*/function copy_forum_permissions($src_forum_id, $dest_forum_ids, $clear_dest_perms = true, $add_log = true){	global $db;	// Only one forum id specified	if (!is_array($dest_forum_ids))	{		$dest_forum_ids = array($dest_forum_ids);	}	// Make sure forum ids are integers	$src_forum_id = (int) $src_forum_id;	$dest_forum_ids = array_map('intval', $dest_forum_ids);	// No source forum or no destination forums specified	if (empty($src_forum_id) || empty($dest_forum_ids))	{		return false;	}	// Check if source forum exists	$sql = 'SELECT forum_name		FROM ' . FORUMS_TABLE . '		WHERE forum_id = ' . $src_forum_id;	$result = $db->sql_query($sql);	$src_forum_name = $db->sql_fetchfield('forum_name');	$db->sql_freeresult($result);	// Source forum doesn't exist	if (empty($src_forum_name))	{		return false;	}	// Check if destination forums exists	$sql = 'SELECT forum_id, forum_name		FROM ' . FORUMS_TABLE . '		WHERE ' . $db->sql_in_set('forum_id', $dest_forum_ids);	$result = $db->sql_query($sql);	$dest_forum_ids = $dest_forum_names = array();	while ($row = $db->sql_fetchrow($result))	{		$dest_forum_ids[]	= (int) $row['forum_id'];		$dest_forum_names[]	= $row['forum_name'];	}	$db->sql_freeresult($result);	// No destination forum exists	if (empty($dest_forum_ids))	{		return false;	}	// From the mysql documentation:	// Prior to MySQL 4.0.14, the target table of the INSERT statement cannot appear	// in the FROM clause of the SELECT part of the query. This limitation is lifted in 4.0.14.	// Due to this we stay on the safe side if we do the insertion "the manual way"	// Rowsets we're going to insert	$users_sql_ary = $groups_sql_ary = array();	// Query acl users table for source forum data	$sql = 'SELECT user_id, auth_option_id, auth_role_id, auth_setting		FROM ' . ACL_USERS_TABLE . '		WHERE forum_id = ' . $src_forum_id;	$result = $db->sql_query($sql);	while ($row = $db->sql_fetchrow($result))	{		$row = array(			'user_id'			=> (int) $row['user_id'],			'auth_option_id'	=> (int) $row['auth_option_id'],			'auth_role_id'		=> (int) $row['auth_role_id'],			'auth_setting'		=> (int) $row['auth_setting'],		);		foreach ($dest_forum_ids as $dest_forum_id)		{			$users_sql_ary[] = $row + array('forum_id' => $dest_forum_id);		}	}	$db->sql_freeresult($result);	// Query acl groups table for source forum data	$sql = 'SELECT group_id, auth_option_id, auth_role_id, auth_setting		FROM ' . ACL_GROUPS_TABLE . '		WHERE forum_id = ' . $src_forum_id;	$result = $db->sql_query($sql);	while ($row = $db->sql_fetchrow($result))	{		$row = array(			'group_id'			=> (int) $row['group_id'],			'auth_option_id'	=> (int) $row['auth_option_id'],			'auth_role_id'		=> (int) $row['auth_role_id'],			'auth_setting'		=> (int) $row['auth_setting'],		);		foreach ($dest_forum_ids as $dest_forum_id)		{			$groups_sql_ary[] = $row + array('forum_id' => $dest_forum_id);		}	}	$db->sql_freeresult($result);	$db->sql_transaction('begin');	// Clear current permissions of destination forums	if ($clear_dest_perms)	{		$sql = 'DELETE FROM ' . ACL_USERS_TABLE . '			WHERE ' . $db->sql_in_set('forum_id', $dest_forum_ids);		$db->sql_query($sql);		$sql = 'DELETE FROM ' . ACL_GROUPS_TABLE . '			WHERE ' . $db->sql_in_set('forum_id', $dest_forum_ids);		$db->sql_query($sql);	}	$db->sql_multi_insert(ACL_USERS_TABLE, $users_sql_ary);	$db->sql_multi_insert(ACL_GROUPS_TABLE, $groups_sql_ary);	if ($add_log)	{		add_log('admin', 'LOG_FORUM_COPIED_PERMISSIONS', $src_forum_name, implode(', ', $dest_forum_names));	}	$db->sql_transaction('commit');	return true;}/*** Get physical file listing*/function filelist($rootdir, $dir = '', $type = 'gif|jpg|jpeg|png'){	$matches = array($dir => array());	// Remove initial / if present	$rootdir = (substr($rootdir, 0, 1) == '/') ? substr($rootdir, 1) : $rootdir;	// Add closing / if not present	$rootdir = ($rootdir && substr($rootdir, -1) != '/') ? $rootdir . '/' : $rootdir;	// Remove initial / if present	$dir = (substr($dir, 0, 1) == '/') ? substr($dir, 1) : $dir;	// Add closing / if not present	$dir = ($dir && substr($dir, -1) != '/') ? $dir . '/' : $dir;	if (!is_dir($rootdir . $dir))	{		return $matches;	}	$dh = @opendir($rootdir . $dir);	if (!$dh)	{		return $matches;	}	while (($fname = readdir($dh)) !== false)	{		if (is_file("$rootdir$dir$fname"))		{			if (filesize("$rootdir$dir$fname") && preg_match('#\.' . $type . '$#i', $fname))			{				$matches[$dir][] = $fname;			}		}		else if ($fname[0] != '.' && is_dir("$rootdir$dir$fname"))		{			$matches += filelist($rootdir, "$dir$fname", $type);		}	}	closedir($dh);	return $matches;}/*** Move topic(s)*/function move_topics($topic_ids, $forum_id, $auto_sync = true){	global $db;	if (empty($topic_ids))	{		return;	}	$forum_ids = array($forum_id);	if (!is_array($topic_ids))	{		$topic_ids = array($topic_ids);	}	$sql = 'DELETE FROM ' . TOPICS_TABLE . '		WHERE ' . $db->sql_in_set('topic_moved_id', $topic_ids) . '			AND forum_id = ' . $forum_id;	$db->sql_query($sql);	if ($auto_sync)	{		$sql = 'SELECT DISTINCT forum_id			FROM ' . TOPICS_TABLE . '			WHERE ' . $db->sql_in_set('topic_id', $topic_ids);		$result = $db->sql_query($sql);		while ($row = $db->sql_fetchrow($result))		{			$forum_ids[] = $row['forum_id'];		}		$db->sql_freeresult($result);	}	$table_ary = array(TOPICS_TABLE, POSTS_TABLE, LOG_TABLE, DRAFTS_TABLE, TOPICS_TRACK_TABLE);	foreach ($table_ary as $table)	{		$sql = "UPDATE $table			SET forum_id = $forum_id			WHERE " . $db->sql_in_set('topic_id', $topic_ids);		$db->sql_query($sql);	}	unset($table_ary);	if ($auto_sync)	{		sync('forum', 'forum_id', $forum_ids, true, true);		unset($forum_ids);	}}/*** Move post(s)*/function move_posts($post_ids, $topic_id, $auto_sync = true){	global $db;	if (!is_array($post_ids))	{		$post_ids = array($post_ids);	}	$forum_ids = array();	$topic_ids = array($topic_id);	$sql = 'SELECT DISTINCT topic_id, forum_id		FROM ' . POSTS_TABLE . '		WHERE ' . $db->sql_in_set('post_id', $post_ids);	$result = $db->sql_query($sql);	while ($row = $db->sql_fetchrow($result))	{		$forum_ids[] = (int) $row['forum_id'];		$topic_ids[] = (int) $row['topic_id'];	}	$db->sql_freeresult($result);	$sql = 'SELECT forum_id		FROM ' . TOPICS_TABLE . '		WHERE topic_id = ' . $topic_id;	$result = $db->sql_query($sql);	$forum_row = $db->sql_fetchrow($result);	$db->sql_freeresult($result);	if (!$forum_row)	{		trigger_error('NO_TOPIC');	}	$sql = 'UPDATE ' . POSTS_TABLE . '		SET forum_id = ' . (int) $forum_row['forum_id'] . ", topic_id = $topic_id		WHERE " . $db->sql_in_set('post_id', $post_ids);	$db->sql_query($sql);	$sql = 'UPDATE ' . ATTACHMENTS_TABLE . "		SET topic_id = $topic_id, in_message = 0		WHERE " . $db->sql_in_set('post_msg_id', $post_ids);	$db->sql_query($sql);	if ($auto_sync)	{		$forum_ids[] = (int) $forum_row['forum_id'];		sync('topic_reported', 'topic_id', $topic_ids);		sync('topic_attachment', 'topic_id', $topic_ids);		sync('topic', 'topic_id', $topic_ids, true);		sync('forum', 'forum_id', $forum_ids, true, true);	}	// Update posted information	update_posted_info($topic_ids);}/*** Remove topic(s)*/function delete_topics($where_type, $where_ids, $auto_sync = true, $post_count_sync = true, $call_delete_posts = true){	global $db, $config;	$approved_topics = 0;	$forum_ids = $topic_ids = array();	if ($where_type === 'range')	{		$where_clause = $where_ids;	}	else	{		$where_ids = (is_array($where_ids)) ? array_unique($where_ids) : array($where_ids);		if (!sizeof($where_ids))		{			return array('topics' => 0, 'posts' => 0);		}		$where_clause = $db->sql_in_set($where_type, $where_ids);	}	// Making sure that delete_posts does not call delete_topics again...	$return = array(		'posts' => ($call_delete_posts) ? delete_posts($where_type, $where_ids, false, true, $post_count_sync, false) : 0,	);	$sql = 'SELECT topic_id, forum_id, topic_approved, topic_moved_id		FROM ' . TOPICS_TABLE . '		WHERE ' . $where_clause;	$result = $db->sql_query($sql);	while ($row = $db->sql_fetchrow($result))	{		$forum_ids[] = $row['forum_id'];		$topic_ids[] = $row['topic_id'];		if ($row['topic_approved'] && !$row['topic_moved_id'])		{			$approved_topics++;		}	}	$db->sql_freeresult($result);	$return['topics'] = sizeof($topic_ids);	if (!sizeof($topic_ids))	{		return $return;	}	$db->sql_transaction('begin');	$table_ary = array(BOOKMARKS_TABLE, TOPICS_TRACK_TABLE, TOPICS_POSTED_TABLE, POLL_VOTES_TABLE, POLL_OPTIONS_TABLE, TOPICS_WATCH_TABLE, TOPICS_TABLE);	foreach ($table_ary as $table)	{		$sql = "DELETE FROM $table			WHERE " . $db->sql_in_set('topic_id', $topic_ids);		$db->sql_query($sql);	}	unset($table_ary);	$moved_topic_ids = array();	// update the other forums	$sql = 'SELECT topic_id, forum_id		FROM ' . TOPICS_TABLE . '		WHERE ' . $db->sql_in_set('topic_moved_id', $topic_ids);	$result = $db->sql_query($sql);	while ($row = $db->sql_fetchrow($result))	{		$forum_ids[] = $row['forum_id'];		$moved_topic_ids[] = $row['topic_id'];	}	$db->sql_freeresult($result);	if (sizeof($moved_topic_ids))	{		$sql = 'DELETE FROM ' . TOPICS_TABLE . '			WHERE ' . $db->sql_in_set('topic_id', $moved_topic_ids);		$db->sql_query($sql);	}	$db->sql_transaction('commit');	if ($auto_sync)	{		sync('forum', 'forum_id', array_unique($forum_ids), true, true);		sync('topic_reported', $where_type, $where_ids);	}	if ($approved_topics)	{		set_config_count('num_topics', $approved_topics * (-1), true);	}	return $return;}/*** Remove post(s)*/function delete_posts($where_type, $where_ids, $auto_sync = true, $posted_sync = true, $post_count_sync = true, $call_delete_topics = true){	global $db, $config, $phpbb_root_path, $phpEx;	if ($where_type === 'range')	{		$where_clause = $where_ids;	}	else	{		if (is_array($where_ids))		{			$where_ids = array_unique($where_ids);		}		else		{			$where_ids = array($where_ids);		}		if (!sizeof($where_ids))		{			return false;		}		$where_ids = array_map('intval', $where_ids);/*		Possible code for splitting post deletion		if (sizeof($where_ids) >= 1001)		{			// Split into chunks of 1000			$chunks = array_chunk($where_ids, 1000);			foreach ($chunks as $_where_ids)			{				delete_posts($where_type, $_where_ids, $auto_sync, $posted_sync, $post_count_sync, $call_delete_topics);			}			return;		}*/		$where_clause = $db->sql_in_set($where_type, $where_ids);	}	$approved_posts = 0;	$post_ids = $topic_ids = $forum_ids = $post_counts = $remove_topics = array();	$sql = 'SELECT post_id, poster_id, post_approved, post_postcount, topic_id, forum_id		FROM ' . POSTS_TABLE . '		WHERE ' . $where_clause;	$result = $db->sql_query($sql);	while ($row = $db->sql_fetchrow($result))	{		$post_ids[] = (int) $row['post_id'];		$poster_ids[] = (int) $row['poster_id'];		$topic_ids[] = (int) $row['topic_id'];		$forum_ids[] = (int) $row['forum_id'];		if ($row['post_postcount'] && $post_count_sync && $row['post_approved'])		{			$post_counts[$row['poster_id']] = (!empty($post_counts[$row['poster_id']])) ? $post_counts[$row['poster_id']] + 1 : 1;		}		if ($row['post_approved'])		{			$approved_posts++;		}	}	$db->sql_freeresult($result);	if (!sizeof($post_ids))	{		return false;	}	$db->sql_transaction('begin');	$table_ary = array(POSTS_TABLE, REPORTS_TABLE);	foreach ($table_ary as $table)	{		$sql = "DELETE FROM $table			WHERE " . $db->sql_in_set('post_id', $post_ids);		$db->sql_query($sql);	}	unset($table_ary);	// Adjust users post counts	if (sizeof($post_counts) && $post_count_sync)	{		foreach ($post_counts as $poster_id => $substract)		{			$sql = 'UPDATE ' . USERS_TABLE . '				SET user_posts = 0				WHERE user_id = ' . $poster_id . '				AND user_posts < ' . $substract;			$db->sql_query($sql);			$sql = 'UPDATE ' . USERS_TABLE . '				SET user_posts = user_posts - ' . $substract . '				WHERE user_id = ' . $poster_id . '				AND user_posts >= ' . $substract;			$db->sql_query($sql);		}	}	// Remove topics now having no posts?	if (sizeof($topic_ids))	{		$sql = 'SELECT topic_id			FROM ' . POSTS_TABLE . '			WHERE ' . $db->sql_in_set('topic_id', $topic_ids) . '			GROUP BY topic_id';		$result = $db->sql_query($sql);		while ($row = $db->sql_fetchrow($result))		{			$remove_topics[] = $row['topic_id'];		}		$db->sql_freeresult($result);		// Actually, those not within remove_topics should be removed. ;)		$remove_topics = array_diff($topic_ids, $remove_topics);	}	// Remove the message from the search index	$search_type = basename($config['search_type']);	if (!file_exists($phpbb_root_path . 'includes/search/' . $search_type . '.' . $phpEx))	{		trigger_error('NO_SUCH_SEARCH_MODULE');	}	include_once("{$phpbb_root_path}includes/search/$search_type.$phpEx");	$error = false;	$search = new $search_type($error);	if ($error)	{		trigger_error($error);	}	$search->index_remove($post_ids, $poster_ids, $forum_ids);	delete_attachments('post', $post_ids, false);	$db->sql_transaction('commit');	// Resync topics_posted table	if ($posted_sync)	{		update_posted_info($topic_ids);	}	if ($auto_sync)	{		sync('topic_reported', 'topic_id', $topic_ids);		sync('topic', 'topic_id', $topic_ids, true);		sync('forum', 'forum_id', $forum_ids, true, true);	}	if ($approved_posts)	{		set_config_count('num_posts', $approved_posts * (-1), true);	}	// We actually remove topics now to not be inconsistent (the delete_topics function calls this function too)	if (sizeof($remove_topics) && $call_delete_topics)	{		delete_topics('topic_id', $remove_topics, $auto_sync, $post_count_sync, false);	}	return sizeof($post_ids);}/*** Delete Attachments** @param string $mode can be: post|message|topic|attach|user* @param mixed $ids can be: post_ids, message_ids, topic_ids, attach_ids, user_ids* @param bool $resync set this to false if you are deleting posts or topics*/function delete_attachments($mode, $ids, $resync = true){	global $db, $config;	// 0 is as bad as an empty array	if (empty($ids))	{		return false;	}	if (is_array($ids))	{		$ids = array_unique($ids);		$ids = array_map('intval', $ids);	}	else	{		$ids = array((int) $ids);	}	$sql_where = '';	switch ($mode)	{		case 'post':		case 'message':			$sql_id = 'post_msg_id';			$sql_where = ' AND in_message = ' . ($mode == 'message' ? 1 : 0);		break;		case 'topic':			$sql_id = 'topic_id';		break;		case 'user':			$sql_id = 'poster_id';		break;		case 'attach':		default:			$sql_id = 'attach_id';			$mode = 'attach';		break;	}	$post_ids = $message_ids = $topic_ids = $physical = array();	// Collect post and topic ids for later use if we need to touch remaining entries (if resync is enabled)	$sql = 'SELECT post_msg_id, topic_id, in_message, physical_filename, thumbnail, filesize, is_orphan			FROM ' . ATTACHMENTS_TABLE . '			WHERE ' . $db->sql_in_set($sql_id, $ids);	$sql .= $sql_where;	$result = $db->sql_query($sql);	while ($row = $db->sql_fetchrow($result))	{		// We only need to store post/message/topic ids if resync is enabled and the file is not orphaned		if ($resync && !$row['is_orphan'])		{			if (!$row['in_message'])			{				$post_ids[] = $row['post_msg_id'];				$topic_ids[] = $row['topic_id'];			}			else			{				$message_ids[] = $row['post_msg_id'];			}		}		$physical[] = array('filename' => $row['physical_filename'], 'thumbnail' => $row['thumbnail'], 'filesize' => $row['filesize'], 'is_orphan' => $row['is_orphan']);	}	$db->sql_freeresult($result);	// Delete attachments	$sql = 'DELETE FROM ' . ATTACHMENTS_TABLE . '		WHERE ' . $db->sql_in_set($sql_id, $ids);	$sql .= $sql_where;	$db->sql_query($sql);	$num_deleted = $db->sql_affectedrows();	if (!$num_deleted)	{		return 0;	}	// Delete attachments from filesystem	$space_removed = $files_removed = 0;	foreach ($physical as $file_ary)	{		if (phpbb_unlink($file_ary['filename'], 'file', true) && !$file_ary['is_orphan'])		{			// Only non-orphaned files count to the file size			$space_removed += $file_ary['filesize'];			$files_removed++;		}		if ($file_ary['thumbnail'])		{			phpbb_unlink($file_ary['filename'], 'thumbnail', true);		}	}	if ($space_removed || $files_removed)	{		set_config_count('upload_dir_size', $space_removed * (-1), true);		set_config_count('num_files', $files_removed * (-1), true);	}	// If we do not resync, we do not need to adjust any message, post, topic or user entries	if (!$resync)	{		return $num_deleted;	}	// No more use for the original ids	unset($ids);	// Now, we need to resync posts, messages, topics. We go through every one of them	$post_ids = array_unique($post_ids);	$message_ids = array_unique($message_ids);	$topic_ids = array_unique($topic_ids);	// Update post indicators for posts now no longer having attachments	if (sizeof($post_ids))	{		// Just check which posts are still having an assigned attachment not orphaned by querying the attachments table		$sql = 'SELECT post_msg_id			FROM ' . ATTACHMENTS_TABLE . '			WHERE ' . $db->sql_in_set('post_msg_id', $post_ids) . '				AND in_message = 0				AND is_orphan = 0';		$result = $db->sql_query($sql);		$remaining_ids = array();		while ($row = $db->sql_fetchrow($result))		{			$remaining_ids[] = $row['post_msg_id'];		}		$db->sql_freeresult($result);		// Now only unset those ids remaining		$post_ids = array_diff($post_ids, $remaining_ids);		if (sizeof($post_ids))		{			$sql = 'UPDATE ' . POSTS_TABLE . '				SET post_attachment = 0				WHERE ' . $db->sql_in_set('post_id', $post_ids);			$db->sql_query($sql);		}	}	// Update message table if messages are affected	if (sizeof($message_ids))	{		// Just check which messages are still having an assigned attachment not orphaned by querying the attachments table		$sql = 'SELECT post_msg_id			FROM ' . ATTACHMENTS_TABLE . '			WHERE ' . $db->sql_in_set('post_msg_id', $message_ids) . '				AND in_message = 1				AND is_orphan = 0';		$result = $db->sql_query($sql);		$remaining_ids = array();		while ($row = $db->sql_fetchrow($result))		{			$remaining_ids[] = $row['post_msg_id'];		}		$db->sql_freeresult($result);		// Now only unset those ids remaining		$message_ids = array_diff($message_ids, $remaining_ids);		if (sizeof($message_ids))		{			$sql = 'UPDATE ' . PRIVMSGS_TABLE . '				SET message_attachment = 0				WHERE ' . $db->sql_in_set('msg_id', $message_ids);			$db->sql_query($sql);		}	}	// Now update the topics. This is a bit trickier, because there could be posts still having attachments within the topic	if (sizeof($topic_ids))	{		// Just check which topics are still having an assigned attachment not orphaned by querying the attachments table (much less entries expected)		$sql = 'SELECT topic_id			FROM ' . ATTACHMENTS_TABLE . '			WHERE ' . $db->sql_in_set('topic_id', $topic_ids) . '				AND is_orphan = 0';		$result = $db->sql_query($sql);		$remaining_ids = array();		while ($row = $db->sql_fetchrow($result))		{			$remaining_ids[] = $row['topic_id'];		}		$db->sql_freeresult($result);		// Now only unset those ids remaining		$topic_ids = array_diff($topic_ids, $remaining_ids);		if (sizeof($topic_ids))		{			$sql = 'UPDATE ' . TOPICS_TABLE . '				SET topic_attachment = 0				WHERE ' . $db->sql_in_set('topic_id', $topic_ids);			$db->sql_query($sql);		}	}	return $num_deleted;}/*** Deletes shadow topics pointing to a specified forum.** @param int		$forum_id		The forum id* @param string		$sql_more		Additional WHERE statement, e.g. t.topic_time < (time() - 1234)* @param bool		$auto_sync		Will call sync() if this is true** @return array		Array with affected forums** @author bantu*/function delete_topic_shadows($forum_id, $sql_more = '', $auto_sync = true){	global $db;	if (!$forum_id)	{		// Nothing to do.		return;	}	// Set of affected forums we have to resync	$sync_forum_ids = array();	// Amount of topics we select and delete at once.	$batch_size = 500;	do	{		$sql = 'SELECT t2.forum_id, t2.topic_id			FROM ' . TOPICS_TABLE . ' t2, ' . TOPICS_TABLE . ' t			WHERE t2.topic_moved_id = t.topic_id				AND t.forum_id = ' . (int) $forum_id . '				' . (($sql_more) ? 'AND ' . $sql_more : '');		$result = $db->sql_query_limit($sql, $batch_size);		$topic_ids = array();		while ($row = $db->sql_fetchrow($result))		{			$topic_ids[] = (int) $row['topic_id'];			$sync_forum_ids[(int) $row['forum_id']] = (int) $row['forum_id'];		}		$db->sql_freeresult($result);		if (!empty($topic_ids))		{			$sql = 'DELETE FROM ' . TOPICS_TABLE . '				WHERE ' . $db->sql_in_set('topic_id', $topic_ids);			$db->sql_query($sql);		}	}	while (sizeof($topic_ids) == $batch_size);	if ($auto_sync)	{		sync('forum', 'forum_id', $sync_forum_ids, true, true);	}	return $sync_forum_ids;}/*** Update/Sync posted information for topics*/function update_posted_info(&$topic_ids){	global $db, $config;	if (empty($topic_ids) || !$config['load_db_track'])	{		return;	}	// First of all, let us remove any posted information for these topics	$sql = 'DELETE FROM ' . TOPICS_POSTED_TABLE . '		WHERE ' . $db->sql_in_set('topic_id', $topic_ids);	$db->sql_query($sql);	// Now, let us collect the user/topic combos for rebuilding the information	$sql = 'SELECT poster_id, topic_id		FROM ' . POSTS_TABLE . '		WHERE ' . $db->sql_in_set('topic_id', $topic_ids) . '			AND poster_id <> ' . ANONYMOUS . '		GROUP BY poster_id, topic_id';	$result = $db->sql_query($sql);	$posted = array();	while ($row = $db->sql_fetchrow($result))	{		// Add as key to make them unique (grouping by) and circumvent empty keys on array_unique		$posted[$row['poster_id']][] = $row['topic_id'];	}	$db->sql_freeresult($result);	// Now add the information...	$sql_ary = array();	foreach ($posted as $user_id => $topic_row)	{		foreach ($topic_row as $topic_id)		{			$sql_ary[] = array(				'user_id'		=> (int) $user_id,				'topic_id'		=> (int) $topic_id,				'topic_posted'	=> 1,			);		}	}	unset($posted);	$db->sql_multi_insert(TOPICS_POSTED_TABLE, $sql_ary);}/*** Delete attached file*/function phpbb_unlink($filename, $mode = 'file', $entry_removed = false){	global $db, $phpbb_root_path, $config;	// Because of copying topics or modifications a physical filename could be assigned more than once. If so, do not remove the file itself.	$sql = 'SELECT COUNT(attach_id) AS num_entries		FROM ' . ATTACHMENTS_TABLE . "		WHERE physical_filename = '" . $db->sql_escape(utf8_basename($filename)) . "'";	$result = $db->sql_query($sql);	$num_entries = (int) $db->sql_fetchfield('num_entries');	$db->sql_freeresult($result);	// Do not remove file if at least one additional entry with the same name exist.	if (($entry_removed && $num_entries > 0) || (!$entry_removed && $num_entries > 1))	{		return false;	}	$filename = ($mode == 'thumbnail') ? 'thumb_' . utf8_basename($filename) : utf8_basename($filename);	return @unlink($phpbb_root_path . $config['upload_path'] . '/' . $filename);}/*** All-encompasing sync function** Exaples:* <code>* sync('topic', 'topic_id', 123);			// resync topic #123* sync('topic', 'forum_id', array(2, 3));	// resync topics from forum #2 and #3* sync('topic');							// resync all topics* sync('topic', 'range', 'topic_id BETWEEN 1 AND 60');	// resync a range of topics/forums (only available for 'topic' and 'forum' modes)* </code>** Modes:* - forum				Resync complete forum* - topic				Resync topics* - topic_moved			Removes topic shadows that would be in the same forum as the topic they link to* - topic_approved		Resyncs the topic_approved flag according to the status of the first post* - post_reported		Resyncs the post_reported flag, relying on actual reports* - topic_reported		Resyncs the topic_reported flag, relying on post_reported flags* - post_attachement	Same as post_reported, but with attachment flags* - topic_attachement	Same as topic_reported, but with attachment flags*/function sync($mode, $where_type = '', $where_ids = '', $resync_parents = false, $sync_extra = false){	global $db;	if (is_array($where_ids))	{		$where_ids = array_unique($where_ids);		$where_ids = array_map('intval', $where_ids);	}	else if ($where_type != 'range')	{		$where_ids = ($where_ids) ? array((int) $where_ids) : array();	}	if ($mode == 'forum' || $mode == 'topic' || $mode == 'topic_approved' || $mode == 'topic_reported' || $mode == 'post_reported')	{		if (!$where_type)		{			$where_sql = '';			$where_sql_and = 'WHERE';		}		else if ($where_type == 'range')		{			// Only check a range of topics/forums. For instance: 'topic_id BETWEEN 1 AND 60'			$where_sql = 'WHERE (' . $mode[0] . ".$where_ids)";			$where_sql_and = $where_sql . "\n\tAND";		}		else		{			// Do not sync the "global forum"			$where_ids = array_diff($where_ids, array(0));			if (!sizeof($where_ids))			{				// Empty array with IDs. This means that we don't have any work to do. Just return.				return;			}			// Limit the topics/forums we are syncing, use specific topic/forum IDs.			// $where_type contains the field for the where clause (forum_id, topic_id)			$where_sql = 'WHERE ' . $db->sql_in_set($mode[0] . '.' . $where_type, $where_ids);			$where_sql_and = $where_sql . "\n\tAND";		}	}	else	{		if (!sizeof($where_ids))		{			return;		}		// $where_type contains the field for the where clause (forum_id, topic_id)		$where_sql = 'WHERE ' . $db->sql_in_set($mode[0] . '.' . $where_type, $where_ids);		$where_sql_and = $where_sql . "\n\tAND";	}	switch ($mode)	{		case 'topic_moved':			$db->sql_transaction('begin');			switch ($db->sql_layer)			{				case 'mysql4':				case 'mysqli':					$sql = 'DELETE FROM ' . TOPICS_TABLE . '						USING ' . TOPICS_TABLE . ' t1, ' . TOPICS_TABLE . " t2						WHERE t1.topic_moved_id = t2.topic_id							AND t1.forum_id = t2.forum_id";					$db->sql_query($sql);				break;				default:					$sql = 'SELECT t1.topic_id						FROM ' .TOPICS_TABLE . ' t1, ' . TOPICS_TABLE . " t2						WHERE t1.topic_moved_id = t2.topic_id							AND t1.forum_id = t2.forum_id";					$result = $db->sql_query($sql);					$topic_id_ary = array();					while ($row = $db->sql_fetchrow($result))					{						$topic_id_ary[] = $row['topic_id'];					}					$db->sql_freeresult($result);					if (!sizeof($topic_id_ary))					{						return;					}					$sql = 'DELETE FROM ' . TOPICS_TABLE . '						WHERE ' . $db->sql_in_set('topic_id', $topic_id_ary);					$db->sql_query($sql);				break;			}			$db->sql_transaction('commit');			break;		case 'topic_approved':			$db->sql_transaction('begin');			switch ($db->sql_layer)			{				case 'mysql4':				case 'mysqli':					$sql = 'UPDATE ' . TOPICS_TABLE . ' t, ' . POSTS_TABLE . " p						SET t.topic_approved = p.post_approved						$where_sql_and t.topic_first_post_id = p.post_id";					$db->sql_query($sql);				break;				default:					$sql = 'SELECT t.topic_id, p.post_approved						FROM ' . TOPICS_TABLE . ' t, ' . POSTS_TABLE . " p						$where_sql_and p.post_id = t.topic_first_post_id							AND p.post_approved <> t.topic_approved";					$result = $db->sql_query($sql);					$topic_ids = array();					while ($row = $db->sql_fetchrow($result))					{						$topic_ids[] = $row['topic_id'];					}					$db->sql_freeresult($result);					if (!sizeof($topic_ids))					{						return;					}					$sql = 'UPDATE ' . TOPICS_TABLE . '						SET topic_approved = 1 - topic_approved						WHERE ' . $db->sql_in_set('topic_id', $topic_ids);					$db->sql_query($sql);				break;			}			$db->sql_transaction('commit');			break;		case 'post_reported':			$post_ids = $post_reported = array();			$db->sql_transaction('begin');			$sql = 'SELECT p.post_id, p.post_reported				FROM ' . POSTS_TABLE . " p				$where_sql				GROUP BY p.post_id, p.post_reported";			$result = $db->sql_query($sql);			while ($row = $db->sql_fetchrow($result))			{				$post_ids[$row['post_id']] = $row['post_id'];				if ($row['post_reported'])				{					$post_reported[$row['post_id']] = 1;				}			}			$db->sql_freeresult($result);			$sql = 'SELECT DISTINCT(post_id)				FROM ' . REPORTS_TABLE . '				WHERE ' . $db->sql_in_set('post_id', $post_ids) . '					AND report_closed = 0';			$result = $db->sql_query($sql);			$post_ids = array();			while ($row = $db->sql_fetchrow($result))			{				if (!isset($post_reported[$row['post_id']]))				{					$post_ids[] = $row['post_id'];				}				else				{					unset($post_reported[$row['post_id']]);				}			}			$db->sql_freeresult($result);			// $post_reported should be empty by now, if it's not it contains			// posts that are falsely flagged as reported			foreach ($post_reported as $post_id => $void)			{				$post_ids[] = $post_id;			}			if (sizeof($post_ids))			{				$sql = 'UPDATE ' . POSTS_TABLE . '					SET post_reported = 1 - post_reported					WHERE ' . $db->sql_in_set('post_id', $post_ids);				$db->sql_query($sql);			}			$db->sql_transaction('commit');			break;		case 'topic_reported':			if ($sync_extra)			{				sync('post_reported', $where_type, $where_ids);			}			$topic_ids = $topic_reported = array();			$db->sql_transaction('begin');			$sql = 'SELECT DISTINCT(t.topic_id)				FROM ' . POSTS_TABLE . " t				$where_sql_and t.post_reported = 1";			$result = $db->sql_query($sql);			while ($row = $db->sql_fetchrow($result))			{				$topic_reported[$row['topic_id']] = 1;			}			$db->sql_freeresult($result);			$sql = 'SELECT t.topic_id, t.topic_reported				FROM ' . TOPICS_TABLE . " t				$where_sql";			$result = $db->sql_query($sql);			while ($row = $db->sql_fetchrow($result))			{				if ($row['topic_reported'] ^ isset($topic_reported[$row['topic_id']]))				{					$topic_ids[] = $row['topic_id'];				}			}			$db->sql_freeresult($result);			if (sizeof($topic_ids))			{				$sql = 'UPDATE ' . TOPICS_TABLE . '					SET topic_reported = 1 - topic_reported					WHERE ' . $db->sql_in_set('topic_id', $topic_ids);				$db->sql_query($sql);			}			$db->sql_transaction('commit');			break;		case 'post_attachment':			$post_ids = $post_attachment = array();			$db->sql_transaction('begin');			$sql = 'SELECT p.post_id, p.post_attachment				FROM ' . POSTS_TABLE . " p				$where_sql				GROUP BY p.post_id, p.post_attachment";			$result = $db->sql_query($sql);			while ($row = $db->sql_fetchrow($result))			{				$post_ids[$row['post_id']] = $row['post_id'];				if ($row['post_attachment'])				{					$post_attachment[$row['post_id']] = 1;				}			}			$db->sql_freeresult($result);			$sql = 'SELECT DISTINCT(post_msg_id)				FROM ' . ATTACHMENTS_TABLE . '				WHERE ' . $db->sql_in_set('post_msg_id', $post_ids) . '					AND in_message = 0';			$result = $db->sql_query($sql);			$post_ids = array();			while ($row = $db->sql_fetchrow($result))			{				if (!isset($post_attachment[$row['post_msg_id']]))				{					$post_ids[] = $row['post_msg_id'];				}				else				{					unset($post_attachment[$row['post_msg_id']]);				}			}			$db->sql_freeresult($result);			// $post_attachment should be empty by now, if it's not it contains			// posts that are falsely flagged as having attachments			foreach ($post_attachment as $post_id => $void)			{				$post_ids[] = $post_id;			}			if (sizeof($post_ids))			{				$sql = 'UPDATE ' . POSTS_TABLE . '					SET post_attachment = 1 - post_attachment					WHERE ' . $db->sql_in_set('post_id', $post_ids);				$db->sql_query($sql);			}			$db->sql_transaction('commit');			break;		case 'topic_attachment':			if ($sync_extra)			{				sync('post_attachment', $where_type, $where_ids);			}			$topic_ids = $topic_attachment = array();			$db->sql_transaction('begin');			$sql = 'SELECT DISTINCT(t.topic_id)				FROM ' . POSTS_TABLE . " t				$where_sql_and t.post_attachment = 1";			$result = $db->sql_query($sql);			while ($row = $db->sql_fetchrow($result))			{				$topic_attachment[$row['topic_id']] = 1;			}			$db->sql_freeresult($result);			$sql = 'SELECT t.topic_id, t.topic_attachment				FROM ' . TOPICS_TABLE . " t				$where_sql";			$result = $db->sql_query($sql);			while ($row = $db->sql_fetchrow($result))			{				if ($row['topic_attachment'] ^ isset($topic_attachment[$row['topic_id']]))				{					$topic_ids[] = $row['topic_id'];				}			}			$db->sql_freeresult($result);			if (sizeof($topic_ids))			{				$sql = 'UPDATE ' . TOPICS_TABLE . '					SET topic_attachment = 1 - topic_attachment					WHERE ' . $db->sql_in_set('topic_id', $topic_ids);				$db->sql_query($sql);			}			$db->sql_transaction('commit');			break;		case 'forum':			$db->sql_transaction('begin');			// 1: Get the list of all forums			$sql = 'SELECT f.*				FROM ' . FORUMS_TABLE . " f				$where_sql";			$result = $db->sql_query($sql);			$forum_data = $forum_ids = $post_ids = $last_post_id = $post_info = array();			while ($row = $db->sql_fetchrow($result))			{				if ($row['forum_type'] == FORUM_LINK)				{					continue;				}				$forum_id = (int) $row['forum_id'];				$forum_ids[$forum_id] = $forum_id;				$forum_data[$forum_id] = $row;				if ($sync_extra)				{					$forum_data[$forum_id]['posts'] = 0;					$forum_data[$forum_id]['topics'] = 0;					$forum_data[$forum_id]['topics_real'] = 0;				}				$forum_data[$forum_id]['last_post_id'] = 0;				$forum_data[$forum_id]['last_post_subject'] = '';				$forum_data[$forum_id]['last_post_time'] = 0;				$forum_data[$forum_id]['last_poster_id'] = 0;				$forum_data[$forum_id]['last_poster_name'] = '';				$forum_data[$forum_id]['last_poster_colour'] = '';			}			$db->sql_freeresult($result);			if (!sizeof($forum_ids))			{				break;			}			$forum_ids = array_values($forum_ids);			// 2: Get topic counts for each forum (optional)			if ($sync_extra)			{				$sql = 'SELECT forum_id, topic_approved, COUNT(topic_id) AS forum_topics					FROM ' . TOPICS_TABLE . '					WHERE ' . $db->sql_in_set('forum_id', $forum_ids) . '					GROUP BY forum_id, topic_approved';				$result = $db->sql_query($sql);				while ($row = $db->sql_fetchrow($result))				{					$forum_id = (int) $row['forum_id'];					$forum_data[$forum_id]['topics_real'] += $row['forum_topics'];					if ($row['topic_approved'])					{						$forum_data[$forum_id]['topics'] = $row['forum_topics'];					}				}				$db->sql_freeresult($result);			}			// 3: Get post count for each forum (optional)			if ($sync_extra)			{				if (sizeof($forum_ids) == 1)				{					$sql = 'SELECT SUM(t.topic_replies + 1) AS forum_posts						FROM ' . TOPICS_TABLE . ' t						WHERE ' . $db->sql_in_set('t.forum_id', $forum_ids) . '							AND t.topic_approved = 1							AND t.topic_status <> ' . ITEM_MOVED;				}				else				{					$sql = 'SELECT t.forum_id, SUM(t.topic_replies + 1) AS forum_posts						FROM ' . TOPICS_TABLE . ' t						WHERE ' . $db->sql_in_set('t.forum_id', $forum_ids) . '							AND t.topic_approved = 1							AND t.topic_status <> ' . ITEM_MOVED . '						GROUP BY t.forum_id';				}				$result = $db->sql_query($sql);				while ($row = $db->sql_fetchrow($result))				{					$forum_id = (sizeof($forum_ids) == 1) ? (int) $forum_ids[0] : (int) $row['forum_id'];					$forum_data[$forum_id]['posts'] = (int) $row['forum_posts'];				}				$db->sql_freeresult($result);			}			// 4: Get last_post_id for each forum			if (sizeof($forum_ids) == 1)			{				$sql = 'SELECT MAX(t.topic_last_post_id) as last_post_id					FROM ' . TOPICS_TABLE . ' t					WHERE ' . $db->sql_in_set('t.forum_id', $forum_ids) . '						AND t.topic_approved = 1';			}			else			{				$sql = 'SELECT t.forum_id, MAX(t.topic_last_post_id) as last_post_id					FROM ' . TOPICS_TABLE . ' t					WHERE ' . $db->sql_in_set('t.forum_id', $forum_ids) . '						AND t.topic_approved = 1					GROUP BY t.forum_id';			}			$result = $db->sql_query($sql);			while ($row = $db->sql_fetchrow($result))			{				$forum_id = (sizeof($forum_ids) == 1) ? (int) $forum_ids[0] : (int) $row['forum_id'];				$forum_data[$forum_id]['last_post_id'] = (int) $row['last_post_id'];				$post_ids[] = $row['last_post_id'];			}			$db->sql_freeresult($result);			// 5: Retrieve last_post infos			if (sizeof($post_ids))			{				$sql = 'SELECT p.post_id, p.poster_id, p.post_subject, p.post_time, p.post_username, u.username, u.user_colour					FROM ' . POSTS_TABLE . ' p, ' . USERS_TABLE . ' u					WHERE ' . $db->sql_in_set('p.post_id', $post_ids) . '						AND p.poster_id = u.user_id';				$result = $db->sql_query($sql);				while ($row = $db->sql_fetchrow($result))				{					$post_info[$row['post_id']] = $row;				}				$db->sql_freeresult($result);				foreach ($forum_data as $forum_id => $data)				{					if ($data['last_post_id'])					{						if (isset($post_info[$data['last_post_id']]))						{							$forum_data[$forum_id]['last_post_subject'] = $post_info[$data['last_post_id']]['post_subject'];							$forum_data[$forum_id]['last_post_time'] = $post_info[$data['last_post_id']]['post_time'];							$forum_data[$forum_id]['last_poster_id'] = $post_info[$data['last_post_id']]['poster_id'];							$forum_data[$forum_id]['last_poster_name'] = ($post_info[$data['last_post_id']]['poster_id'] != ANONYMOUS) ? $post_info[$data['last_post_id']]['username'] : $post_info[$data['last_post_id']]['post_username'];							$forum_data[$forum_id]['last_poster_colour'] = $post_info[$data['last_post_id']]['user_colour'];						}						else						{							// For some reason we did not find the post in the db							$forum_data[$forum_id]['last_post_id'] = 0;							$forum_data[$forum_id]['last_post_subject'] = '';							$forum_data[$forum_id]['last_post_time'] = 0;							$forum_data[$forum_id]['last_poster_id'] = 0;							$forum_data[$forum_id]['last_poster_name'] = '';							$forum_data[$forum_id]['last_poster_colour'] = '';						}					}				}				unset($post_info);			}			// 6: Now do that thing			$fieldnames = array('last_post_id', 'last_post_subject', 'last_post_time', 'last_poster_id', 'last_poster_name', 'last_poster_colour');			if ($sync_extra)			{				array_push($fieldnames, 'posts', 'topics', 'topics_real');			}			foreach ($forum_data as $forum_id => $row)			{				$sql_ary = array();				foreach ($fieldnames as $fieldname)				{					if ($row['forum_' . $fieldname] != $row[$fieldname])					{						if (preg_match('#(name|colour|subject)$#', $fieldname))						{							$sql_ary['forum_' . $fieldname] = (string) $row[$fieldname];						}						else						{							$sql_ary['forum_' . $fieldname] = (int) $row[$fieldname];						}					}				}				if (sizeof($sql_ary))				{					$sql = 'UPDATE ' . FORUMS_TABLE . '						SET ' . $db->sql_build_array('UPDATE', $sql_ary) . '						WHERE forum_id = ' . $forum_id;					$db->sql_query($sql);				}			}			$db->sql_transaction('commit');			break;		case 'topic':			$topic_data = $post_ids = $approved_unapproved_ids = $resync_forums = $delete_topics = $delete_posts = $moved_topics = array();			$db->sql_transaction('begin');			$sql = 'SELECT t.topic_id, t.forum_id, t.topic_moved_id, t.topic_approved, ' . (($sync_extra) ? 't.topic_attachment, t.topic_reported, ' : '') . 't.topic_poster, t.topic_time, t.topic_replies, t.topic_replies_real, t.topic_first_post_id, t.topic_first_poster_name, t.topic_first_poster_colour, t.topic_last_post_id, t.topic_last_post_subject, t.topic_last_poster_id, t.topic_last_poster_name, t.topic_last_poster_colour, t.topic_last_post_time				FROM ' . TOPICS_TABLE . " t				$where_sql";			$result = $db->sql_query($sql);			while ($row = $db->sql_fetchrow($result))			{				if ($row['topic_moved_id'])				{					$moved_topics[] = $row['topic_id'];					continue;				}				$topic_id = (int) $row['topic_id'];				$topic_data[$topic_id] = $row;				$topic_data[$topic_id]['replies_real'] = -1;				$topic_data[$topic_id]['replies'] = 0;				$topic_data[$topic_id]['first_post_id'] = 0;				$topic_data[$topic_id]['last_post_id'] = 0;				unset($topic_data[$topic_id]['topic_id']);				// This array holds all topic_ids				$delete_topics[$topic_id] = '';				if ($sync_extra)				{					$topic_data[$topic_id]['reported'] = 0;					$topic_data[$topic_id]['attachment'] = 0;				}			}			$db->sql_freeresult($result);			// Use "t" as table alias because of the $where_sql clause			// NOTE: 't.post_approved' in the GROUP BY is causing a major slowdown.			$sql = 'SELECT t.topic_id, t.post_approved, COUNT(t.post_id) AS total_posts, MIN(t.post_id) AS first_post_id, MAX(t.post_id) AS last_post_id				FROM ' . POSTS_TABLE . " t				$where_sql				GROUP BY t.topic_id, t.post_approved";			$result = $db->sql_query($sql);			while ($row = $db->sql_fetchrow($result))			{				$topic_id = (int) $row['topic_id'];				$row['first_post_id'] = (int) $row['first_post_id'];				$row['last_post_id'] = (int) $row['last_post_id'];				if (!isset($topic_data[$topic_id]))				{					// Hey, these posts come from a topic that does not exist					$delete_posts[$topic_id] = '';				}				else				{					// Unset the corresponding entry in $delete_topics					// When we'll be done, only topics with no posts will remain					unset($delete_topics[$topic_id]);					$topic_data[$topic_id]['replies_real'] += $row['total_posts'];					$topic_data[$topic_id]['first_post_id'] = (!$topic_data[$topic_id]['first_post_id']) ? $row['first_post_id'] : min($topic_data[$topic_id]['first_post_id'], $row['first_post_id']);					if ($row['post_approved'] || !$topic_data[$topic_id]['last_post_id'])					{						$topic_data[$topic_id]['replies'] = $row['total_posts'] - 1;						$topic_data[$topic_id]['last_post_id'] = $row['last_post_id'];					}				}			}			$db->sql_freeresult($result);			foreach ($topic_data as $topic_id => $row)			{				$post_ids[] = $row['first_post_id'];				if ($row['first_post_id'] != $row['last_post_id'])				{					$post_ids[] = $row['last_post_id'];				}			}			// Now we delete empty topics and orphan posts			if (sizeof($delete_posts))			{				delete_posts('topic_id', array_keys($delete_posts), false);				unset($delete_posts);			}			if (!sizeof($topic_data))			{				// If we get there, topic ids were invalid or topics did not contain any posts				delete_topics($where_type, $where_ids, true);				return;			}			if (sizeof($delete_topics))			{				$delete_topic_ids = array();				foreach ($delete_topics as $topic_id => $void)				{					unset($topic_data[$topic_id]);					$delete_topic_ids[] = $topic_id;				}				delete_topics('topic_id', $delete_topic_ids, false);				unset($delete_topics, $delete_topic_ids);			}			$sql = 'SELECT p.post_id, p.topic_id, p.post_approved, p.poster_id, p.post_subject, p.post_username, p.post_time, u.username, u.user_colour				FROM ' . POSTS_TABLE . ' p, ' . USERS_TABLE . ' u				WHERE ' . $db->sql_in_set('p.post_id', $post_ids) . '					AND u.user_id = p.poster_id';			$result = $db->sql_query($sql);			$post_ids = array();			while ($row = $db->sql_fetchrow($result))			{				$topic_id = intval($row['topic_id']);				if ($row['post_id'] == $topic_data[$topic_id]['first_post_id'])				{					if ($topic_data[$topic_id]['topic_approved'] != $row['post_approved'])					{						$approved_unapproved_ids[] = $topic_id;					}					$topic_data[$topic_id]['time'] = $row['post_time'];					$topic_data[$topic_id]['poster'] = $row['poster_id'];					$topic_data[$topic_id]['first_poster_name'] = ($row['poster_id'] == ANONYMOUS) ? $row['post_username'] : $row['username'];					$topic_data[$topic_id]['first_poster_colour'] = $row['user_colour'];				}				if ($row['post_id'] == $topic_data[$topic_id]['last_post_id'])				{					$topic_data[$topic_id]['last_poster_id'] = $row['poster_id'];					$topic_data[$topic_id]['last_post_subject'] = $row['post_subject'];					$topic_data[$topic_id]['last_post_time'] = $row['post_time'];					$topic_data[$topic_id]['last_poster_name'] = ($row['poster_id'] == ANONYMOUS) ? $row['post_username'] : $row['username'];					$topic_data[$topic_id]['last_poster_colour'] = $row['user_colour'];				}			}			$db->sql_freeresult($result);			// Make sure shadow topics do link to existing topics			if (sizeof($moved_topics))			{				$delete_topics = array();				$sql = 'SELECT t1.topic_id, t1.topic_moved_id					FROM ' . TOPICS_TABLE . ' t1					LEFT JOIN ' . TOPICS_TABLE . ' t2 ON (t2.topic_id = t1.topic_moved_id)					WHERE ' . $db->sql_in_set('t1.topic_id', $moved_topics) . '						AND t2.topic_id IS NULL';				$result = $db->sql_query($sql);				while ($row = $db->sql_fetchrow($result))				{					$delete_topics[] = $row['topic_id'];				}				$db->sql_freeresult($result);				if (sizeof($delete_topics))				{					delete_topics('topic_id', $delete_topics, false);				}				unset($delete_topics);				// Make sure shadow topics having no last post data being updated (this only rarely happens...)				$sql = 'SELECT topic_id, topic_moved_id, topic_last_post_id, topic_first_post_id					FROM ' . TOPICS_TABLE . '					WHERE ' . $db->sql_in_set('topic_id', $moved_topics) . '						AND topic_last_post_time = 0';				$result = $db->sql_query($sql);				$shadow_topic_data = $post_ids = array();				while ($row = $db->sql_fetchrow($result))				{					$shadow_topic_data[$row['topic_moved_id']] = $row;					$post_ids[] = $row['topic_last_post_id'];					$post_ids[] = $row['topic_first_post_id'];				}				$db->sql_freeresult($result);				$sync_shadow_topics = array();				if (sizeof($post_ids))				{					$sql = 'SELECT p.post_id, p.topic_id, p.post_approved, p.poster_id, p.post_subject, p.post_username, p.post_time, u.username, u.user_colour						FROM ' . POSTS_TABLE . ' p, ' . USERS_TABLE . ' u						WHERE ' . $db->sql_in_set('p.post_id', $post_ids) . '							AND u.user_id = p.poster_id';					$result = $db->sql_query($sql);					$post_ids = array();					while ($row = $db->sql_fetchrow($result))					{						$topic_id = (int) $row['topic_id'];						// Ok, there should be a shadow topic. If there isn't, then there's something wrong with the db.						// However, there's not much we can do about it.						if (!empty($shadow_topic_data[$topic_id]))						{							if ($row['post_id'] == $shadow_topic_data[$topic_id]['topic_first_post_id'])							{								$orig_topic_id = $shadow_topic_data[$topic_id]['topic_id'];								if (!isset($sync_shadow_topics[$orig_topic_id]))								{									$sync_shadow_topics[$orig_topic_id] = array();								}								$sync_shadow_topics[$orig_topic_id]['topic_time'] = $row['post_time'];								$sync_shadow_topics[$orig_topic_id]['topic_poster'] = $row['poster_id'];								$sync_shadow_topics[$orig_topic_id]['topic_first_poster_name'] = ($row['poster_id'] == ANONYMOUS) ? $row['post_username'] : $row['username'];								$sync_shadow_topics[$orig_topic_id]['topic_first_poster_colour'] = $row['user_colour'];							}							if ($row['post_id'] == $shadow_topic_data[$topic_id]['topic_last_post_id'])							{								$orig_topic_id = $shadow_topic_data[$topic_id]['topic_id'];								if (!isset($sync_shadow_topics[$orig_topic_id]))								{									$sync_shadow_topics[$orig_topic_id] = array();								}								$sync_shadow_topics[$orig_topic_id]['topic_last_poster_id'] = $row['poster_id'];								$sync_shadow_topics[$orig_topic_id]['topic_last_post_subject'] = $row['post_subject'];								$sync_shadow_topics[$orig_topic_id]['topic_last_post_time'] = $row['post_time'];								$sync_shadow_topics[$orig_topic_id]['topic_last_poster_name'] = ($row['poster_id'] == ANONYMOUS) ? $row['post_username'] : $row['username'];								$sync_shadow_topics[$orig_topic_id]['topic_last_poster_colour'] = $row['user_colour'];							}						}					}					$db->sql_freeresult($result);					$shadow_topic_data = array();					// Update the information we collected					if (sizeof($sync_shadow_topics))					{						foreach ($sync_shadow_topics as $sync_topic_id => $sql_ary)						{							$sql = 'UPDATE ' . TOPICS_TABLE . '								SET ' . $db->sql_build_array('UPDATE', $sql_ary) . '								WHERE topic_id = ' . $sync_topic_id;							$db->sql_query($sql);						}					}				}				unset($sync_shadow_topics, $shadow_topic_data);			}			// approved becomes unapproved, and vice-versa			if (sizeof($approved_unapproved_ids))			{				$sql = 'UPDATE ' . TOPICS_TABLE . '					SET topic_approved = 1 - topic_approved					WHERE ' . $db->sql_in_set('topic_id', $approved_unapproved_ids);				$db->sql_query($sql);			}			unset($approved_unapproved_ids);			// These are fields that will be synchronised			$fieldnames = array('time', 'replies', 'replies_real', 'poster', 'first_post_id', 'first_poster_name', 'first_poster_colour', 'last_post_id', 'last_post_subject', 'last_post_time', 'last_poster_id', 'last_poster_name', 'last_poster_colour');			if ($sync_extra)			{				// This routine assumes that post_reported values are correct				// if they are not, use sync('post_reported') first				$sql = 'SELECT t.topic_id, p.post_id					FROM ' . TOPICS_TABLE . ' t, ' . POSTS_TABLE . " p					$where_sql_and p.topic_id = t.topic_id						AND p.post_reported = 1					GROUP BY t.topic_id, p.post_id";				$result = $db->sql_query($sql);				$fieldnames[] = 'reported';				while ($row = $db->sql_fetchrow($result))				{					$topic_data[intval($row['topic_id'])]['reported'] = 1;				}				$db->sql_freeresult($result);				// This routine assumes that post_attachment values are correct				// if they are not, use sync('post_attachment') first				$sql = 'SELECT t.topic_id, p.post_id					FROM ' . TOPICS_TABLE . ' t, ' . POSTS_TABLE . " p					$where_sql_and p.topic_id = t.topic_id						AND p.post_attachment = 1					GROUP BY t.topic_id, p.post_id";				$result = $db->sql_query($sql);				$fieldnames[] = 'attachment';				while ($row = $db->sql_fetchrow($result))				{					$topic_data[intval($row['topic_id'])]['attachment'] = 1;				}				$db->sql_freeresult($result);			}			foreach ($topic_data as $topic_id => $row)			{				$sql_ary = array();				foreach ($fieldnames as $fieldname)				{					if (isset($row[$fieldname]) && isset($row['topic_' . $fieldname]) && $row['topic_' . $fieldname] != $row[$fieldname])					{						$sql_ary['topic_' . $fieldname] = $row[$fieldname];					}				}				if (sizeof($sql_ary))				{					$sql = 'UPDATE ' . TOPICS_TABLE . '						SET ' . $db->sql_build_array('UPDATE', $sql_ary) . '						WHERE topic_id = ' . $topic_id;					$db->sql_query($sql);					$resync_forums[$row['forum_id']] = $row['forum_id'];				}			}			unset($topic_data);			$db->sql_transaction('commit');			// if some topics have been resync'ed then resync parent forums			// except when we're only syncing a range, we don't want to sync forums during			// batch processing.			if ($resync_parents && sizeof($resync_forums) && $where_type != 'range')			{				sync('forum', 'forum_id', array_values($resync_forums), true, true);			}			break;	}	return;}/*** Prune function*/function prune($forum_id, $prune_mode, $prune_date, $prune_flags = 0, $auto_sync = true){	global $db;	if (!is_array($forum_id))	{		$forum_id = array($forum_id);	}	if (!sizeof($forum_id))	{		return;	}	$sql_and = '';	if (!($prune_flags & FORUM_FLAG_PRUNE_ANNOUNCE))	{		$sql_and .= ' AND topic_type <> ' . POST_ANNOUNCE;	}	if (!($prune_flags & FORUM_FLAG_PRUNE_STICKY))	{		$sql_and .= ' AND topic_type <> ' . POST_STICKY;	}	if ($prune_mode == 'posted')	{		$sql_and .= " AND topic_last_post_time < $prune_date";	}	if ($prune_mode == 'viewed')	{		$sql_and .= " AND topic_last_view_time < $prune_date";	}	$sql = 'SELECT topic_id		FROM ' . TOPICS_TABLE . '		WHERE ' . $db->sql_in_set('forum_id', $forum_id) . "			AND poll_start = 0			$sql_and";	$result = $db->sql_query($sql);	$topic_list = array();	while ($row = $db->sql_fetchrow($result))	{		$topic_list[] = $row['topic_id'];	}	$db->sql_freeresult($result);	if ($prune_flags & FORUM_FLAG_PRUNE_POLL)	{		$sql = 'SELECT topic_id			FROM ' . TOPICS_TABLE . '			WHERE ' . $db->sql_in_set('forum_id', $forum_id) . "				AND poll_start > 0				AND poll_last_vote < $prune_date				$sql_and";		$result = $db->sql_query($sql);		while ($row = $db->sql_fetchrow($result))		{			$topic_list[] = $row['topic_id'];		}		$db->sql_freeresult($result);		$topic_list = array_unique($topic_list);	}	return delete_topics('topic_id', $topic_list, $auto_sync, false);}/*** Function auto_prune(), this function now relies on passed vars*/function auto_prune($forum_id, $prune_mode, $prune_flags, $prune_days, $prune_freq){	global $db;	$sql = 'SELECT forum_name		FROM ' . FORUMS_TABLE . "		WHERE forum_id = $forum_id";	$result = $db->sql_query($sql, 3600);	$row = $db->sql_fetchrow($result);	$db->sql_freeresult($result);	if ($row)	{		$prune_date = time() - ($prune_days * 86400);		$next_prune = time() + ($prune_freq * 86400);		prune($forum_id, $prune_mode, $prune_date, $prune_flags, true);		$sql = 'UPDATE ' . FORUMS_TABLE . "			SET prune_next = $next_prune			WHERE forum_id = $forum_id";		$db->sql_query($sql);		add_log('admin', 'LOG_AUTO_PRUNE', $row['forum_name']);	}	return;}/*** remove_comments will strip the sql comment lines out of an uploaded sql file* specifically for mssql and postgres type files in the install....*/function remove_comments(&$output){	$lines = explode("\n", $output);	$output = '';	// try to keep mem. use down	$linecount = sizeof($lines);	$in_comment = false;	for ($i = 0; $i < $linecount; $i++)	{		if (trim($lines[$i]) == '/*')		{			$in_comment = true;		}		if (!$in_comment)		{			$output .= $lines[$i] . "\n";		}		if (trim($lines[$i]) == '*/')		{			$in_comment = false;		}	}	unset($lines);	return $output;}/*** Cache moderators, called whenever permissions are changed via admin_permissions. Changes of username* and group names must be carried through for the moderators table*/function cache_moderators(){	global $db, $cache, $auth, $phpbb_root_path, $phpEx;	// Remove cached sql results	$cache->destroy('sql', MODERATOR_CACHE_TABLE);	// Clear table	switch ($db->sql_layer)	{		case 'sqlite':		case 'firebird':			$db->sql_query('DELETE FROM ' . MODERATOR_CACHE_TABLE);		break;		default:			$db->sql_query('TRUNCATE TABLE ' . MODERATOR_CACHE_TABLE);		break;	}	// We add moderators who have forum moderator permissions without an explicit ACL_NEVER setting	$hold_ary = $ug_id_ary = $sql_ary = array();	// Grab all users having moderative options...	$hold_ary = $auth->acl_user_raw_data(false, 'm_%', false);	// Add users?	if (sizeof($hold_ary))	{		// At least one moderative option warrants a display		$ug_id_ary = array_keys($hold_ary);		// Remove users who have group memberships with DENY moderator permissions		$sql = $db->sql_build_query('SELECT', array(			'SELECT'	=> 'a.forum_id, ug.user_id, g.group_id',			'FROM'		=> array(				ACL_OPTIONS_TABLE	=> 'o',				USER_GROUP_TABLE	=> 'ug',				GROUPS_TABLE		=> 'g',				ACL_GROUPS_TABLE	=> 'a',			),			'LEFT_JOIN'	=> array(				array(					'FROM'	=> array(ACL_ROLES_DATA_TABLE => 'r'),					'ON'	=> 'a.auth_role_id = r.role_id'				)			),			'WHERE'		=> '(o.auth_option_id = a.auth_option_id OR o.auth_option_id = r.auth_option_id)				AND ((a.auth_setting = ' . ACL_NEVER . ' AND r.auth_setting IS NULL)					OR r.auth_setting = ' . ACL_NEVER . ')				AND a.group_id = ug.group_id				AND g.group_id = ug.group_id				AND NOT (ug.group_leader = 1 AND g.group_skip_auth = 1)				AND ' . $db->sql_in_set('ug.user_id', $ug_id_ary) . "				AND ug.user_pending = 0				AND o.auth_option " . $db->sql_like_expression('m_' . $db->any_char),		));		$result = $db->sql_query($sql);		while ($row = $db->sql_fetchrow($result))		{			if (isset($hold_ary[$row['user_id']][$row['forum_id']]))			{				unset($hold_ary[$row['user_id']][$row['forum_id']]);			}		}		$db->sql_freeresult($result);		if (sizeof($hold_ary))		{			// Get usernames...			$sql = 'SELECT user_id, username				FROM ' . USERS_TABLE . '				WHERE ' . $db->sql_in_set('user_id', array_keys($hold_ary));			$result = $db->sql_query($sql);			$usernames_ary = array();			while ($row = $db->sql_fetchrow($result))			{				$usernames_ary[$row['user_id']] = $row['username'];			}			foreach ($hold_ary as $user_id => $forum_id_ary)			{				// Do not continue if user does not exist				if (!isset($usernames_ary[$user_id]))				{					continue;				}				foreach ($forum_id_ary as $forum_id => $auth_ary)				{					$sql_ary[] = array(						'forum_id'		=> (int) $forum_id,						'user_id'		=> (int) $user_id,						'username'		=> (string) $usernames_ary[$user_id],						'group_id'		=> 0,						'group_name'	=> ''					);				}			}		}	}	// Now to the groups...	$hold_ary = $auth->acl_group_raw_data(false, 'm_%', false);	if (sizeof($hold_ary))	{		$ug_id_ary = array_keys($hold_ary);		// Make sure not hidden or special groups are involved...		$sql = 'SELECT group_name, group_id, group_type			FROM ' . GROUPS_TABLE . '			WHERE ' . $db->sql_in_set('group_id', $ug_id_ary);		$result = $db->sql_query($sql);		$groupnames_ary = array();		while ($row = $db->sql_fetchrow($result))		{			if ($row['group_type'] == GROUP_HIDDEN || $row['group_type'] == GROUP_SPECIAL)			{				unset($hold_ary[$row['group_id']]);			}			$groupnames_ary[$row['group_id']] = $row['group_name'];		}		$db->sql_freeresult($result);		foreach ($hold_ary as $group_id => $forum_id_ary)		{			// If there is no group, we do not assign it...			if (!isset($groupnames_ary[$group_id]))			{				continue;			}			foreach ($forum_id_ary as $forum_id => $auth_ary)			{				$flag = false;				foreach ($auth_ary as $auth_option => $setting)				{					// Make sure at least one ACL_YES option is set...					if ($setting == ACL_YES)					{						$flag = true;						break;					}				}				if (!$flag)				{					continue;				}				$sql_ary[] = array(					'forum_id'		=> (int) $forum_id,					'user_id'		=> 0,					'username'		=> '',					'group_id'		=> (int) $group_id,					'group_name'	=> (string) $groupnames_ary[$group_id]				);			}		}	}	$db->sql_multi_insert(MODERATOR_CACHE_TABLE, $sql_ary);}/*** View log* If $log_count is set to false, we will skip counting all entries in the database.*/function view_log($mode, &$log, &$log_count, $limit = 0, $offset = 0, $forum_id = 0, $topic_id = 0, $user_id = 0, $limit_days = 0, $sort_by = 'l.log_time DESC', $keywords = ''){	global $db, $user, $auth, $phpEx, $phpbb_root_path, $phpbb_admin_path;	$topic_id_list = $reportee_id_list = $is_auth = $is_mod = array();	$profile_url = (defined('IN_ADMIN')) ? append_sid("{$phpbb_admin_path}index.$phpEx", 'i=users&amp;mode=overview') : append_sid("{$phpbb_root_path}memberlist.$phpEx", 'mode=viewprofile');	switch ($mode)	{		case 'admin':			$log_type = LOG_ADMIN;			$sql_forum = '';		break;		case 'mod':			$log_type = LOG_MOD;			$sql_forum = '';			if ($topic_id)			{				$sql_forum = 'AND l.topic_id = ' . (int) $topic_id;			}			else if (is_array($forum_id))			{				$sql_forum = 'AND ' . $db->sql_in_set('l.forum_id', array_map('intval', $forum_id));			}			else if ($forum_id)			{				$sql_forum = 'AND l.forum_id = ' . (int) $forum_id;			}		break;		case 'user':			$log_type = LOG_USERS;			$sql_forum = 'AND l.reportee_id = ' . (int) $user_id;		break;		case 'users':			$log_type = LOG_USERS;			$sql_forum = '';		break;		case 'critical':			$log_type = LOG_CRITICAL;			$sql_forum = '';		break;		default:			return;	}	// Use no preg_quote for $keywords because this would lead to sole backslashes being added	// We also use an OR connection here for spaces and the | string. Currently, regex is not supported for searching (but may come later).	$keywords = preg_split('#[\s|]+#u', utf8_strtolower($keywords), 0, PREG_SPLIT_NO_EMPTY);	$sql_keywords = '';	if (!empty($keywords))	{		$keywords_pattern = array();		// Build pattern and keywords...		for ($i = 0, $num_keywords = sizeof($keywords); $i < $num_keywords; $i++)		{			$keywords_pattern[] = preg_quote($keywords[$i], '#');			$keywords[$i] = $db->sql_like_expression($db->any_char . $keywords[$i] . $db->any_char);		}		$keywords_pattern = '#' . implode('|', $keywords_pattern) . '#ui';		$operations = array();		foreach ($user->lang as $key => $value)		{			if (substr($key, 0, 4) == 'LOG_' && preg_match($keywords_pattern, $value))			{				$operations[] = $key;			}		}		$sql_keywords = 'AND (';		if (!empty($operations))		{			$sql_keywords .= $db->sql_in_set('l.log_operation', $operations) . ' OR ';		}		$sql_keywords .= 'LOWER(l.log_data) ' . implode(' OR LOWER(l.log_data) ', $keywords) . ')';	}	if ($log_count !== false)	{		$sql = 'SELECT COUNT(l.log_id) AS total_entries			FROM ' . LOG_TABLE . ' l, ' . USERS_TABLE . " u			WHERE l.log_type = $log_type				AND l.user_id = u.user_id				AND l.log_time >= $limit_days				$sql_keywords				$sql_forum";		$result = $db->sql_query($sql);		$log_count = (int) $db->sql_fetchfield('total_entries');		$db->sql_freeresult($result);	}	// $log_count may be false here if false was passed in for it,	// because in this case we did not run the COUNT() query above.	// If we ran the COUNT() query and it returned zero rows, return;	// otherwise query for logs below.	if ($log_count === 0)	{		// Save the queries, because there are no logs to display		return 0;	}	if ($offset >= $log_count)	{		$offset = ($offset - $limit < 0) ? 0 : $offset - $limit;	}	$sql = "SELECT l.*, u.username, u.username_clean, u.user_colour		FROM " . LOG_TABLE . " l, " . USERS_TABLE . " u		WHERE l.log_type = $log_type			AND u.user_id = l.user_id			" . (($limit_days) ? "AND l.log_time >= $limit_days" : '') . "			$sql_keywords			$sql_forum		ORDER BY $sort_by";	$result = $db->sql_query_limit($sql, $limit, $offset);	$i = 0;	$log = array();	while ($row = $db->sql_fetchrow($result))	{		if ($row['topic_id'])		{			$topic_id_list[] = $row['topic_id'];		}		if ($row['reportee_id'])		{			$reportee_id_list[] = $row['reportee_id'];		}		$log[$i] = array(			'id'				=> $row['log_id'],			'reportee_id'			=> $row['reportee_id'],			'reportee_username'		=> '',			'reportee_username_full'=> '',			'user_id'			=> $row['user_id'],			'username'			=> $row['username'],			'username_full'		=> get_username_string('full', $row['user_id'], $row['username'], $row['user_colour'], false, $profile_url),			'ip'				=> $row['log_ip'],			'time'				=> $row['log_time'],			'forum_id'			=> $row['forum_id'],			'topic_id'			=> $row['topic_id'],			'viewforum'			=> ($row['forum_id'] && $auth->acl_get('f_read', $row['forum_id'])) ? append_sid("{$phpbb_root_path}viewforum.$phpEx", 'f=' . $row['forum_id']) : false,			'action'			=> (isset($user->lang[$row['log_operation']])) ? $user->lang[$row['log_operation']] : '{' . ucfirst(str_replace('_', ' ', $row['log_operation'])) . '}',		);		if (!empty($row['log_data']))		{			$log_data_ary = @unserialize($row['log_data']);			$log_data_ary = ($log_data_ary === false) ? array() : $log_data_ary;			if (isset($user->lang[$row['log_operation']]))			{				// Check if there are more occurrences of % than arguments, if there are we fill out the arguments array				// It doesn't matter if we add more arguments than placeholders				if ((substr_count($log[$i]['action'], '%') - sizeof($log_data_ary)) > 0)				{					$log_data_ary = array_merge($log_data_ary, array_fill(0, substr_count($log[$i]['action'], '%') - sizeof($log_data_ary), ''));				}				$log[$i]['action'] = vsprintf($log[$i]['action'], $log_data_ary);				// If within the admin panel we do not censor text out				if (defined('IN_ADMIN'))				{					$log[$i]['action'] = bbcode_nl2br($log[$i]['action']);				}				else				{					$log[$i]['action'] = bbcode_nl2br(censor_text($log[$i]['action']));				}			}			else if (!empty($log_data_ary))			{				$log[$i]['action'] .= '<br />' . implode('', $log_data_ary);			}			/* Apply make_clickable... has to be seen if it is for good. :/			// Seems to be not for the moment, reconsider later...			$log[$i]['action'] = make_clickable($log[$i]['action']);			*/		}		$i++;	}	$db->sql_freeresult($result);	if (sizeof($topic_id_list))	{		$topic_id_list = array_unique($topic_id_list);		// This query is not really needed if move_topics() updates the forum_id field,		// although it's also used to determine if the topic still exists in the database		$sql = 'SELECT topic_id, forum_id			FROM ' . TOPICS_TABLE . '			WHERE ' . $db->sql_in_set('topic_id', array_map('intval', $topic_id_list));		$result = $db->sql_query($sql);		$default_forum_id = 0;		while ($row = $db->sql_fetchrow($result))		{			if (!$row['forum_id'])			{				if ($auth->acl_getf_global('f_read'))				{					if (!$default_forum_id)					{						$sql = 'SELECT forum_id							FROM ' . FORUMS_TABLE . '							WHERE forum_type = ' . FORUM_POST;						$f_result = $db->sql_query_limit($sql, 1);						$default_forum_id = (int) $db->sql_fetchfield('forum_id', false, $f_result);						$db->sql_freeresult($f_result);					}					$is_auth[$row['topic_id']] = $default_forum_id;				}			}			else			{				if ($auth->acl_get('f_read', $row['forum_id']))				{					$is_auth[$row['topic_id']] = $row['forum_id'];				}			}			if ($auth->acl_gets('a_', 'm_', $row['forum_id']))			{				$is_mod[$row['topic_id']] = $row['forum_id'];			}		}		$db->sql_freeresult($result);		foreach ($log as $key => $row)		{			$log[$key]['viewtopic'] = (isset($is_auth[$row['topic_id']])) ? append_sid("{$phpbb_root_path}viewtopic.$phpEx", 'f=' . $is_auth[$row['topic_id']] . '&amp;t=' . $row['topic_id']) : false;			$log[$key]['viewlogs'] = (isset($is_mod[$row['topic_id']])) ? append_sid("{$phpbb_root_path}mcp.$phpEx", 'i=logs&amp;mode=topic_logs&amp;t=' . $row['topic_id'], true, $user->session_id) : false;		}	}	if (sizeof($reportee_id_list))	{		$reportee_id_list = array_unique($reportee_id_list);		$reportee_names_list = array();		$sql = 'SELECT user_id, username, user_colour			FROM ' . USERS_TABLE . '			WHERE ' . $db->sql_in_set('user_id', $reportee_id_list);		$result = $db->sql_query($sql);		while ($row = $db->sql_fetchrow($result))		{			$reportee_names_list[$row['user_id']] = $row;		}		$db->sql_freeresult($result);		foreach ($log as $key => $row)		{			if (!isset($reportee_names_list[$row['reportee_id']]))			{				continue;			}			$log[$key]['reportee_username'] = $reportee_names_list[$row['reportee_id']]['username'];			$log[$key]['reportee_username_full'] = get_username_string('full', $row['reportee_id'], $reportee_names_list[$row['reportee_id']]['username'], $reportee_names_list[$row['reportee_id']]['user_colour'], false, $profile_url);		}	}	return $offset;}/*** Update foes - remove moderators and administrators from foe lists...*/function update_foes($group_id = false, $user_id = false){	global $db, $auth;	// update foes for some user	if (is_array($user_id) && sizeof($user_id))	{		$sql = 'DELETE FROM ' . ZEBRA_TABLE . '			WHERE ' . $db->sql_in_set('zebra_id', $user_id) . '				AND foe = 1';		$db->sql_query($sql);		return;	}	// update foes for some group	if (is_array($group_id) && sizeof($group_id))	{		// Grab group settings...		$sql = $db->sql_build_query('SELECT', array(			'SELECT'	=> 'a.group_id',			'FROM'		=> array(				ACL_OPTIONS_TABLE	=> 'ao',				ACL_GROUPS_TABLE	=> 'a'			),			'LEFT_JOIN'	=> array(				array(					'FROM'	=> array(ACL_ROLES_DATA_TABLE => 'r'),					'ON'	=> 'a.auth_role_id = r.role_id'				),			),			'WHERE'		=> '(ao.auth_option_id = a.auth_option_id OR ao.auth_option_id = r.auth_option_id)				AND ' . $db->sql_in_set('a.group_id', $group_id) . "				AND ao.auth_option IN ('a_', 'm_')",			'GROUP_BY'	=> 'a.group_id'		));		$result = $db->sql_query($sql);		$groups = array();		while ($row = $db->sql_fetchrow($result))		{			$groups[] = (int) $row['group_id'];		}		$db->sql_freeresult($result);		if (!sizeof($groups))		{			return;		}		switch ($db->sql_layer)		{			case 'mysqli':			case 'mysql4':				$sql = 'DELETE ' . (($db->sql_layer === 'mysqli' || version_compare($db->sql_server_info(true), '4.1', '>=')) ? 'z.*' : ZEBRA_TABLE) . '					FROM ' . ZEBRA_TABLE . ' z, ' . USER_GROUP_TABLE . ' ug					WHERE z.zebra_id = ug.user_id						AND z.foe = 1						AND ' . $db->sql_in_set('ug.group_id', $groups);				$db->sql_query($sql);			break;			default:				$sql = 'SELECT user_id					FROM ' . USER_GROUP_TABLE . '					WHERE ' . $db->sql_in_set('group_id', $groups);				$result = $db->sql_query($sql);				$users = array();				while ($row = $db->sql_fetchrow($result))				{					$users[] = (int) $row['user_id'];				}				$db->sql_freeresult($result);				if (sizeof($users))				{					$sql = 'DELETE FROM ' . ZEBRA_TABLE . '						WHERE ' . $db->sql_in_set('zebra_id', $users) . '							AND foe = 1';					$db->sql_query($sql);				}			break;		}		return;	}	// update foes for everyone	$perms = array();	foreach ($auth->acl_get_list(false, array('a_', 'm_'), false) as $forum_id => $forum_ary)	{		foreach ($forum_ary as $auth_option => $user_ary)		{			$perms = array_merge($perms, $user_ary);		}	}	if (sizeof($perms))	{		$sql = 'DELETE FROM ' . ZEBRA_TABLE . '			WHERE ' . $db->sql_in_set('zebra_id', array_unique($perms)) . '				AND foe = 1';		$db->sql_query($sql);	}	unset($perms);}/*** Lists inactive users*/function view_inactive_users(&$users, &$user_count, $limit = 0, $offset = 0, $limit_days = 0, $sort_by = 'user_inactive_time DESC'){	global $db, $user;	$sql = 'SELECT COUNT(user_id) AS user_count		FROM ' . USERS_TABLE . '		WHERE user_type = ' . USER_INACTIVE .		(($limit_days) ? " AND user_inactive_time >= $limit_days" : '');	$result = $db->sql_query($sql);	$user_count = (int) $db->sql_fetchfield('user_count');	$db->sql_freeresult($result);	if ($user_count == 0)	{		// Save the queries, because there are no users to display		return 0;	}	if ($offset >= $user_count)	{		$offset = ($offset - $limit < 0) ? 0 : $offset - $limit;	}	$sql = 'SELECT *		FROM ' . USERS_TABLE . '		WHERE user_type = ' . USER_INACTIVE .		(($limit_days) ? " AND user_inactive_time >= $limit_days" : '') . "		ORDER BY $sort_by";	$result = $db->sql_query_limit($sql, $limit, $offset);	while ($row = $db->sql_fetchrow($result))	{		$row['inactive_reason'] = $user->lang['INACTIVE_REASON_UNKNOWN'];		switch ($row['user_inactive_reason'])		{			case INACTIVE_REGISTER:				$row['inactive_reason'] = $user->lang['INACTIVE_REASON_REGISTER'];			break;			case INACTIVE_PROFILE:				$row['inactive_reason'] = $user->lang['INACTIVE_REASON_PROFILE'];			break;			case INACTIVE_MANUAL:				$row['inactive_reason'] = $user->lang['INACTIVE_REASON_MANUAL'];			break;			case INACTIVE_REMIND:				$row['inactive_reason'] = $user->lang['INACTIVE_REASON_REMIND'];			break;		}		$users[] = $row;	}	return $offset;}/*** Lists warned users*/function view_warned_users(&$users, &$user_count, $limit = 0, $offset = 0, $limit_days = 0, $sort_by = 'user_warnings DESC'){	global $db;	$sql = 'SELECT user_id, username, user_colour, user_warnings, user_last_warning		FROM ' . USERS_TABLE . '		WHERE user_warnings > 0		' . (($limit_days) ? "AND user_last_warning >= $limit_days" : '') . "		ORDER BY $sort_by";	$result = $db->sql_query_limit($sql, $limit, $offset);	$users = $db->sql_fetchrowset($result);	$db->sql_freeresult($result);	$sql = 'SELECT count(user_id) AS user_count		FROM ' . USERS_TABLE . '		WHERE user_warnings > 0		' . (($limit_days) ? "AND user_last_warning >= $limit_days" : '');	$result = $db->sql_query($sql);	$user_count = (int) $db->sql_fetchfield('user_count');	$db->sql_freeresult($result);	return;}/*** Get database size* Currently only mysql and mssql are supported*/function get_database_size(){	global $db, $user, $table_prefix;	$database_size = false;	// This code is heavily influenced by a similar routine in phpMyAdmin 2.2.0	switch ($db->sql_layer)	{		case 'mysql':		case 'mysql4':		case 'mysqli':			$sql = 'SELECT VERSION() AS mysql_version';			$result = $db->sql_query($sql);			$row = $db->sql_fetchrow($result);			$db->sql_freeresult($result);			if ($row)			{				$version = $row['mysql_version'];				if (preg_match('#(3\.23|[45]\.)#', $version))				{					$db_name = (preg_match('#^(?:3\.23\.(?:[6-9]|[1-9]{2}))|[45]\.#', $version)) ? "`{$db->dbname}`" : $db->dbname;					$sql = 'SHOW TABLE STATUS						FROM ' . $db_name;					$result = $db->sql_query($sql, 7200);					$database_size = 0;					while ($row = $db->sql_fetchrow($result))					{						if ((isset($row['Type']) && $row['Type'] != 'MRG_MyISAM') || (isset($row['Engine']) && ($row['Engine'] == 'MyISAM' || $row['Engine'] == 'InnoDB')))						{							if ($table_prefix != '')							{								if (strpos($row['Name'], $table_prefix) !== false)								{									$database_size += $row['Data_length'] + $row['Index_length'];								}							}							else							{								$database_size += $row['Data_length'] + $row['Index_length'];							}						}					}					$db->sql_freeresult($result);				}			}		break;		case 'firebird':			global $dbname;			// if it on the local machine, we can get lucky			if (file_exists($dbname))			{				$database_size = filesize($dbname);			}		break;		case 'sqlite':			global $dbhost;			if (file_exists($dbhost))			{				$database_size = filesize($dbhost);			}		break;		case 'mssql':		case 'mssql_odbc':		case 'mssqlnative':			$sql = 'SELECT ((SUM(size) * 8.0) * 1024.0) as dbsize				FROM sysfiles';			$result = $db->sql_query($sql, 7200);			$database_size = ($row = $db->sql_fetchrow($result)) ? $row['dbsize'] : false;			$db->sql_freeresult($result);		break;		case 'postgres':			$sql = "SELECT proname				FROM pg_proc				WHERE proname = 'pg_database_size'";			$result = $db->sql_query($sql);			$row = $db->sql_fetchrow($result);			$db->sql_freeresult($result);			if ($row['proname'] == 'pg_database_size')			{				$database = $db->dbname;				if (strpos($database, '.') !== false)				{					list($database, ) = explode('.', $database);				}				$sql = "SELECT oid					FROM pg_database					WHERE datname = '$database'";				$result = $db->sql_query($sql);				$row = $db->sql_fetchrow($result);				$db->sql_freeresult($result);				$oid = $row['oid'];				$sql = 'SELECT pg_database_size(' . $oid . ') as size';				$result = $db->sql_query($sql);				$row = $db->sql_fetchrow($result);				$db->sql_freeresult($result);				$database_size = $row['size'];			}		break;		case 'oracle':			$sql = 'SELECT SUM(bytes) as dbsize				FROM user_segments';			$result = $db->sql_query($sql, 7200);			$database_size = ($row = $db->sql_fetchrow($result)) ? $row['dbsize'] : false;			$db->sql_freeresult($result);		break;	}	$database_size = ($database_size !== false) ? get_formatted_filesize($database_size) : $user->lang['NOT_AVAILABLE'];	return $database_size;}/*** Retrieve contents from remotely stored file*/function get_remote_file($host, $directory, $filename, &$errstr, &$errno, $port = 80, $timeout = 6){	global $user;	if ($fsock = @fsockopen($host, $port, $errno, $errstr, $timeout))	{		@fputs($fsock, "GET $directory/$filename HTTP/1.1\r\n");		@fputs($fsock, "HOST: $host\r\n");		@fputs($fsock, "Connection: close\r\n\r\n");		$timer_stop = time() + $timeout;		stream_set_timeout($fsock, $timeout);		$file_info = '';		$get_info = false;		while (!@feof($fsock))		{			if ($get_info)			{				$file_info .= @fread($fsock, 1024);			}			else			{				$line = @fgets($fsock, 1024);				if ($line == "\r\n")				{					$get_info = true;				}				else if (stripos($line, '404 not found') !== false)				{					$errstr = $user->lang['FILE_NOT_FOUND'] . ': ' . $filename;					return false;				}			}			$stream_meta_data = stream_get_meta_data($fsock);			if (!empty($stream_meta_data['timed_out']) || time() >= $timer_stop)			{				$errstr = $user->lang['FSOCK_TIMEOUT'];				return false;			}		}		@fclose($fsock);	}	else	{		if ($errstr)		{			$errstr = utf8_convert_message($errstr);			return false;		}		else		{			$errstr = $user->lang['FSOCK_DISABLED'];			return false;		}	}	return $file_info;}/*** Tidy Warnings* Remove all warnings which have now expired from the database* The duration of a warning can be defined by the administrator* This only removes the warning and reduces the associated count,* it does not remove the user note recording the contents of the warning*/function tidy_warnings(){	global $db, $config;	$expire_date = time() - ($config['warnings_expire_days'] * 86400);	$warning_list = $user_list = array();	$sql = 'SELECT * FROM ' . WARNINGS_TABLE . "		WHERE warning_time < $expire_date";	$result = $db->sql_query($sql);	while ($row = $db->sql_fetchrow($result))	{		$warning_list[] = $row['warning_id'];		$user_list[$row['user_id']] = isset($user_list[$row['user_id']]) ? ++$user_list[$row['user_id']] : 1;	}	$db->sql_freeresult($result);	if (sizeof($warning_list))	{		$db->sql_transaction('begin');		$sql = 'DELETE FROM ' . WARNINGS_TABLE . '			WHERE ' . $db->sql_in_set('warning_id', $warning_list);		$db->sql_query($sql);		foreach ($user_list as $user_id => $value)		{			$sql = 'UPDATE ' . USERS_TABLE . " SET user_warnings = user_warnings - $value				WHERE user_id = $user_id";			$db->sql_query($sql);		}		$db->sql_transaction('commit');	}	set_config('warnings_last_gc', time(), true);}/*** Tidy database, doing some maintanance tasks*/function tidy_database(){	global $db;	// Here we check permission consistency	// Sometimes, it can happen permission tables having forums listed which do not exist	$sql = 'SELECT forum_id		FROM ' . FORUMS_TABLE;	$result = $db->sql_query($sql);	$forum_ids = array(0);	while ($row = $db->sql_fetchrow($result))	{		$forum_ids[] = $row['forum_id'];	}	$db->sql_freeresult($result);	// Delete those rows from the acl tables not having listed the forums above	$sql = 'DELETE FROM ' . ACL_GROUPS_TABLE . '		WHERE ' . $db->sql_in_set('forum_id', $forum_ids, true);	$db->sql_query($sql);	$sql = 'DELETE FROM ' . ACL_USERS_TABLE . '		WHERE ' . $db->sql_in_set('forum_id', $forum_ids, true);	$db->sql_query($sql);	set_config('database_last_gc', time(), true);}/*** Add permission language - this will make sure custom files will be included*/function add_permission_language(){	global $user, $phpEx;	// First of all, our own file. We need to include it as the first file because it presets all relevant variables.	$user->add_lang('acp/permissions_phpbb');	$files_to_add = array();	// Now search in acp and mods folder for permissions_ files.	foreach (array('acp/', 'mods/') as $path)	{		$dh = @opendir($user->lang_path . $user->lang_name . '/' . $path);		if ($dh)		{			while (($file = readdir($dh)) !== false)			{				if ($file !== 'permissions_phpbb.' . $phpEx && strpos($file, 'permissions_') === 0 && substr($file, -(strlen($phpEx) + 1)) === '.' . $phpEx)				{					$files_to_add[] = $path . substr($file, 0, -(strlen($phpEx) + 1));				}			}			closedir($dh);		}	}	if (!sizeof($files_to_add))	{		return false;	}	$user->add_lang($files_to_add);	return true;}/** * Obtains the latest version information * * @param bool $force_update Ignores cached data. Defaults to false. * @param bool $warn_fail Trigger a warning if obtaining the latest version information fails. Defaults to false. * @param int $ttl Cache version information for $ttl seconds. Defaults to 86400 (24 hours). * * @return string | false Version info on success, false on failure. */function obtain_latest_version_info($force_update = false, $warn_fail = false, $ttl = 86400){	global $cache;	$info = $cache->get('versioncheck');	if ($info === false || $force_update)	{		$errstr = '';		$errno = 0;		$info = get_remote_file('version.phpbb.com', '/phpbb',				((defined('PHPBB_QA')) ? '30x_qa.txt' : '30x.txt'), $errstr, $errno);		if ($info === false)		{			$cache->destroy('versioncheck');			if ($warn_fail)			{				trigger_error($errstr, E_USER_WARNING);			}			return false;		}		$cache->put('versioncheck', $info, $ttl);	}	return $info;}/** * Enables a particular flag in a bitfield column of a given table. * * @param string	$table_name		The table to update * @param string	$column_name	The column containing a bitfield to update * @param int		$flag			The binary flag which is OR-ed with the current column value * @param string	$sql_more		This string is attached to the sql query generated to update the table. * * @return void */function enable_bitfield_column_flag($table_name, $column_name, $flag, $sql_more = ''){	global $db;	$sql = 'UPDATE ' . $table_name . '		SET ' . $column_name . ' = ' . $db->sql_bit_or($column_name, $flag) . '		' . $sql_more;	$db->sql_query($sql);}?>
<?php/**** @package acp* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @ignore*/if (!defined('IN_PHPBB')){	exit;}/*** @package acp*/class acp_profile{	var $u_action;	var $edit_lang_id;	var $lang_defs;	function main($id, $mode)	{		global $config, $db, $user, $auth, $template, $cache;		global $phpbb_root_path, $phpbb_admin_path, $phpEx, $table_prefix;		include($phpbb_root_path . 'includes/functions_posting.' . $phpEx);		include($phpbb_root_path . 'includes/functions_user.' . $phpEx);		include($phpbb_root_path . 'includes/functions_profile_fields.' . $phpEx);		$user->add_lang(array('ucp', 'acp/profile'));		$this->tpl_name = 'acp_profile';		$this->page_title = 'ACP_CUSTOM_PROFILE_FIELDS';		$action = (isset($_POST['create'])) ? 'create' : request_var('action', '');		$error = array();		$s_hidden_fields = '';		// Define some default values for each field type		$default_values = array(			FIELD_STRING	=> array('field_length' => 10, 'field_minlen' => 0, 'field_maxlen' => 20, 'field_validation' => '.*', 'field_novalue' => '', 'field_default_value' => ''),			FIELD_TEXT		=> array('field_length' => '5|80', 'field_minlen' => 0, 'field_maxlen' => 1000, 'field_validation' => '.*', 'field_novalue' => '', 'field_default_value' => ''),			FIELD_INT		=> array('field_length' => 5, 'field_minlen' => 0, 'field_maxlen' => 100, 'field_validation' => '', 'field_novalue' => 0, 'field_default_value' => 0),			FIELD_DATE		=> array('field_length' => 10, 'field_minlen' => 10, 'field_maxlen' => 10, 'field_validation' => '', 'field_novalue' => ' 0- 0-   0', 'field_default_value' => ' 0- 0-   0'),			FIELD_BOOL		=> array('field_length' => 1, 'field_minlen' => 0, 'field_maxlen' => 0, 'field_validation' => '', 'field_novalue' => 0, 'field_default_value' => 0),			FIELD_DROPDOWN	=> array('field_length' => 0, 'field_minlen' => 0, 'field_maxlen' => 5, 'field_validation' => '', 'field_novalue' => 0, 'field_default_value' => 0),		);		$cp = new custom_profile_admin();		// Build Language array		// Based on this, we decide which elements need to be edited later and which language items are missing		$this->lang_defs = array();		$sql = 'SELECT lang_id, lang_iso			FROM ' . LANG_TABLE . '			ORDER BY lang_english_name';		$result = $db->sql_query($sql);		while ($row = $db->sql_fetchrow($result))		{			// Make some arrays with all available languages			$this->lang_defs['id'][$row['lang_id']] = $row['lang_iso'];			$this->lang_defs['iso'][$row['lang_iso']] = $row['lang_id'];		}		$db->sql_freeresult($result);		$sql = 'SELECT field_id, lang_id			FROM ' . PROFILE_LANG_TABLE . '			ORDER BY lang_id';		$result = $db->sql_query($sql);		while ($row = $db->sql_fetchrow($result))		{			// Which languages are available for each item			$this->lang_defs['entry'][$row['field_id']][] = $row['lang_id'];		}		$db->sql_freeresult($result);		// Have some fields been defined?		if (isset($this->lang_defs['entry']))		{			foreach ($this->lang_defs['entry'] as $field_id => $field_ary)			{				// Fill an array with the languages that are missing for each field				$this->lang_defs['diff'][$field_id] = array_diff(array_values($this->lang_defs['iso']), $field_ary);			}		}		switch ($action)		{			case 'delete':				$field_id = request_var('field_id', 0);				if (!$field_id)				{					trigger_error($user->lang['NO_FIELD_ID'] . adm_back_link($this->u_action), E_USER_WARNING);				}				if (confirm_box(true))				{					$sql = 'SELECT field_ident						FROM ' . PROFILE_FIELDS_TABLE . "						WHERE field_id = $field_id";					$result = $db->sql_query($sql);					$field_ident = (string) $db->sql_fetchfield('field_ident');					$db->sql_freeresult($result);					$db->sql_transaction('begin');					$db->sql_query('DELETE FROM ' . PROFILE_FIELDS_TABLE . " WHERE field_id = $field_id");					$db->sql_query('DELETE FROM ' . PROFILE_FIELDS_LANG_TABLE . " WHERE field_id = $field_id");					$db->sql_query('DELETE FROM ' . PROFILE_LANG_TABLE . " WHERE field_id = $field_id");					switch ($db->sql_layer)					{						case 'sqlite':							$sql = "SELECT sql								FROM sqlite_master								WHERE type = 'table'									AND name = '" . PROFILE_FIELDS_DATA_TABLE . "'								ORDER BY type DESC, name;";							$result = $db->sql_query($sql);							$row = $db->sql_fetchrow($result);							$db->sql_freeresult($result);							// Create a temp table and populate it, destroy the existing one							$db->sql_query(preg_replace('#CREATE\s+TABLE\s+"?' . PROFILE_FIELDS_DATA_TABLE . '"?#i', 'CREATE TEMPORARY TABLE ' . PROFILE_FIELDS_DATA_TABLE . '_temp', $row['sql']));							$db->sql_query('INSERT INTO ' . PROFILE_FIELDS_DATA_TABLE . '_temp SELECT * FROM ' . PROFILE_FIELDS_DATA_TABLE);							$db->sql_query('DROP TABLE ' . PROFILE_FIELDS_DATA_TABLE);							preg_match('#\((.*)\)#s', $row['sql'], $matches);							$new_table_cols = trim($matches[1]);							$old_table_cols = preg_split('/,(?=[\\sa-z])/im', $new_table_cols);							$column_list = array();							foreach ($old_table_cols as $declaration)							{								$entities = preg_split('#\s+#', trim($declaration));								if ($entities[0] == 'PRIMARY')								{									continue;								}								if ($entities[0] !== 'pf_' . $field_ident)								{									$column_list[] = $entities[0];								}							}							$columns = implode(',', $column_list);							$new_table_cols = preg_replace('/' . 'pf_' . $field_ident . '[^,]+,/', '', $new_table_cols);							// create a new table and fill it up. destroy the temp one							$db->sql_query('CREATE TABLE ' . PROFILE_FIELDS_DATA_TABLE . ' (' . $new_table_cols . ');');							$db->sql_query('INSERT INTO ' . PROFILE_FIELDS_DATA_TABLE . ' (' . $columns . ') SELECT ' . $columns . ' FROM ' . PROFILE_FIELDS_DATA_TABLE . '_temp;');							$db->sql_query('DROP TABLE ' . PROFILE_FIELDS_DATA_TABLE . '_temp');						break;						default:							$db->sql_query('ALTER TABLE ' . PROFILE_FIELDS_DATA_TABLE . " DROP COLUMN pf_$field_ident");					}					$order = 0;					$sql = 'SELECT *						FROM ' . PROFILE_FIELDS_TABLE . '						ORDER BY field_order';					$result = $db->sql_query($sql);					while ($row = $db->sql_fetchrow($result))					{						$order++;						if ($row['field_order'] != $order)						{							$sql = 'UPDATE ' . PROFILE_FIELDS_TABLE . "								SET field_order = $order								WHERE field_id = {$row['field_id']}";							$db->sql_query($sql);						}					}					$db->sql_freeresult($result);					$db->sql_transaction('commit');					add_log('admin', 'LOG_PROFILE_FIELD_REMOVED', $field_ident);					trigger_error($user->lang['REMOVED_PROFILE_FIELD'] . adm_back_link($this->u_action));				}				else				{					confirm_box(false, 'DELETE_PROFILE_FIELD', build_hidden_fields(array(						'i'			=> $id,						'mode'		=> $mode,						'action'	=> $action,						'field_id'	=> $field_id,					)));				}			break;			case 'activate':				$field_id = request_var('field_id', 0);				if (!$field_id)				{					trigger_error($user->lang['NO_FIELD_ID'] . adm_back_link($this->u_action), E_USER_WARNING);				}				$sql = 'SELECT lang_id					FROM ' . LANG_TABLE . "					WHERE lang_iso = '" . $db->sql_escape($config['default_lang']) . "'";				$result = $db->sql_query($sql);				$default_lang_id = (int) $db->sql_fetchfield('lang_id');				$db->sql_freeresult($result);				if (!in_array($default_lang_id, $this->lang_defs['entry'][$field_id]))				{					trigger_error($user->lang['DEFAULT_LANGUAGE_NOT_FILLED'] . adm_back_link($this->u_action), E_USER_WARNING);				}				$sql = 'UPDATE ' . PROFILE_FIELDS_TABLE . "					SET field_active = 1					WHERE field_id = $field_id";				$db->sql_query($sql);				$sql = 'SELECT field_ident					FROM ' . PROFILE_FIELDS_TABLE . "					WHERE field_id = $field_id";				$result = $db->sql_query($sql);				$field_ident = (string) $db->sql_fetchfield('field_ident');				$db->sql_freeresult($result);				add_log('admin', 'LOG_PROFILE_FIELD_ACTIVATE', $field_ident);				trigger_error($user->lang['PROFILE_FIELD_ACTIVATED'] . adm_back_link($this->u_action));			break;			case 'deactivate':				$field_id = request_var('field_id', 0);				if (!$field_id)				{					trigger_error($user->lang['NO_FIELD_ID'] . adm_back_link($this->u_action), E_USER_WARNING);				}				$sql = 'UPDATE ' . PROFILE_FIELDS_TABLE . "					SET field_active = 0					WHERE field_id = $field_id";				$db->sql_query($sql);				$sql = 'SELECT field_ident					FROM ' . PROFILE_FIELDS_TABLE . "					WHERE field_id = $field_id";				$result = $db->sql_query($sql);				$field_ident = (string) $db->sql_fetchfield('field_ident');				$db->sql_freeresult($result);				add_log('admin', 'LOG_PROFILE_FIELD_DEACTIVATE', $field_ident);				trigger_error($user->lang['PROFILE_FIELD_DEACTIVATED'] . adm_back_link($this->u_action));			break;			case 'move_up':			case 'move_down':				$field_order = request_var('order', 0);				$order_total = $field_order * 2 + (($action == 'move_up') ? -1 : 1);				$sql = 'UPDATE ' . PROFILE_FIELDS_TABLE . "					SET field_order = $order_total - field_order					WHERE field_order IN ($field_order, " . (($action == 'move_up') ? $field_order - 1 : $field_order + 1) . ')';				$db->sql_query($sql);			break;			case 'create':			case 'edit':				$field_id = request_var('field_id', 0);				$step = request_var('step', 1);				$submit = (isset($_REQUEST['next']) || isset($_REQUEST['prev'])) ? true : false;				$save = (isset($_REQUEST['save'])) ? true : false;				// The language id of default language				$this->edit_lang_id = $this->lang_defs['iso'][$config['default_lang']];				// We are editing... we need to grab basic things				if ($action == 'edit')				{					if (!$field_id)					{						trigger_error($user->lang['NO_FIELD_ID'] . adm_back_link($this->u_action), E_USER_WARNING);					}					$sql = 'SELECT l.*, f.*						FROM ' . PROFILE_LANG_TABLE . ' l, ' . PROFILE_FIELDS_TABLE . ' f						WHERE l.lang_id = ' . $this->edit_lang_id . "							AND f.field_id = $field_id							AND l.field_id = f.field_id";					$result = $db->sql_query($sql);					$field_row = $db->sql_fetchrow($result);					$db->sql_freeresult($result);					if (!$field_row)					{						// Some admin changed the default language?						$sql = 'SELECT l.*, f.*							FROM ' . PROFILE_LANG_TABLE . ' l, ' . PROFILE_FIELDS_TABLE . ' f							WHERE l.lang_id <> ' . $this->edit_lang_id . "							AND f.field_id = $field_id							AND l.field_id = f.field_id";						$result = $db->sql_query($sql);						$field_row = $db->sql_fetchrow($result);						$db->sql_freeresult($result);						if (!$field_row)						{							trigger_error($user->lang['FIELD_NOT_FOUND'] . adm_back_link($this->u_action), E_USER_WARNING);						}						$this->edit_lang_id = $field_row['lang_id'];					}					$field_type = $field_row['field_type'];					// Get language entries					$sql = 'SELECT *						FROM ' . PROFILE_FIELDS_LANG_TABLE . '						WHERE lang_id = ' . $this->edit_lang_id . "							AND field_id = $field_id						ORDER BY option_id ASC";					$result = $db->sql_query($sql);					$lang_options = array();					while ($row = $db->sql_fetchrow($result))					{						$lang_options[$row['option_id']] = $row['lang_value'];					}					$db->sql_freeresult($result);					$s_hidden_fields = '<input type="hidden" name="field_id" value="' . $field_id . '" />';				}				else				{					// We are adding a new field, define basic params					$lang_options = $field_row = array();					$field_type = request_var('field_type', 0);					if (!$field_type)					{						trigger_error($user->lang['NO_FIELD_TYPE'] . adm_back_link($this->u_action), E_USER_WARNING);					}					$field_row = array_merge($default_values[$field_type], array(						'field_ident'		=> str_replace(' ', '_', utf8_clean_string(request_var('field_ident', '', true))),						'field_required'	=> 0,						'field_hide'		=> 0,						'field_show_profile'=> 0,						'field_no_view'		=> 0,						'field_show_on_reg'	=> 0,						'field_show_on_vt'	=> 0,						'lang_name'			=> utf8_normalize_nfc(request_var('field_ident', '', true)),						'lang_explain'		=> '',						'lang_default_value'=> '')					);					$s_hidden_fields = '<input type="hidden" name="field_type" value="' . $field_type . '" />';				}				// $exclude contains the data we gather in each step				$exclude = array(					1	=> array('field_ident', 'lang_name', 'lang_explain', 'field_option_none', 'field_show_on_reg', 'field_show_on_vt', 'field_required', 'field_hide', 'field_show_profile', 'field_no_view'),					2	=> array('field_length', 'field_maxlen', 'field_minlen', 'field_validation', 'field_novalue', 'field_default_value'),					3	=> array('l_lang_name', 'l_lang_explain', 'l_lang_default_value', 'l_lang_options')				);				// Text-based fields require the lang_default_value to be excluded				if ($field_type == FIELD_STRING || $field_type == FIELD_TEXT)				{					$exclude[1][] = 'lang_default_value';				}				// option-specific fields require lang_options to be excluded				if ($field_type == FIELD_BOOL || $field_type == FIELD_DROPDOWN)				{					$exclude[1][] = 'lang_options';				}				$cp->vars['field_ident']		= ($action == 'create' && $step == 1) ? utf8_clean_string(request_var('field_ident', $field_row['field_ident'], true)) : request_var('field_ident', $field_row['field_ident']);				$cp->vars['lang_name']			= utf8_normalize_nfc(request_var('lang_name', $field_row['lang_name'], true));				$cp->vars['lang_explain']		= utf8_normalize_nfc(request_var('lang_explain', $field_row['lang_explain'], true));				$cp->vars['lang_default_value']	= utf8_normalize_nfc(request_var('lang_default_value', $field_row['lang_default_value'], true));				// Visibility Options...				$visibility_ary = array(					'field_required',					'field_show_on_reg',					'field_show_on_vt',					'field_show_profile',					'field_hide',				);				foreach ($visibility_ary as $val)				{					$cp->vars[$val] = ($submit || $save) ? request_var($val, 0) : $field_row[$val];				}				$cp->vars['field_no_view'] = request_var('field_no_view', (int) $field_row['field_no_view']);				// A boolean field expects an array as the lang options				if ($field_type == FIELD_BOOL)				{					$options = utf8_normalize_nfc(request_var('lang_options', array(''), true));				}				else				{					$options = utf8_normalize_nfc(request_var('lang_options', '', true));				}				// If the user has submitted a form with options (i.e. dropdown field)				if ($options)				{					$exploded_options = (is_array($options)) ? $options : explode("\n", $options);					if (sizeof($exploded_options) == sizeof($lang_options) || $action == 'create')					{						// The number of options in the field is equal to the number of options already in the database						// Or we are creating a new dropdown list.						$cp->vars['lang_options'] = $exploded_options;					}					else if ($action == 'edit')					{						// Changing the number of options? (We remove and re-create the option fields)						$cp->vars['lang_options'] = $exploded_options;					}				}				else				{					$cp->vars['lang_options'] = $lang_options;				}				// step 2				foreach ($exclude[2] as $key)				{					$var = utf8_normalize_nfc(request_var($key, $field_row[$key], true));					// Manipulate the intended variables a little bit if needed					if ($field_type == FIELD_DROPDOWN && $key == 'field_maxlen')					{						// Get the number of options if this key is 'field_maxlen'						$var = sizeof(explode("\n", utf8_normalize_nfc(request_var('lang_options', '', true))));					}					else if ($field_type == FIELD_TEXT && $key == 'field_length')					{						if (isset($_REQUEST['rows']))						{							$cp->vars['rows'] = request_var('rows', 0);							$cp->vars['columns'] = request_var('columns', 0);							$var = $cp->vars['rows'] . '|' . $cp->vars['columns'];						}						else						{							$row_col = explode('|', $var);							$cp->vars['rows'] = $row_col[0];							$cp->vars['columns'] = $row_col[1];						}					}					else if ($field_type == FIELD_DATE && $key == 'field_default_value')					{						$always_now = request_var('always_now', -1);						if ($always_now == 1 || ($always_now === -1 && $var == 'now'))						{							$now = getdate();							$cp->vars['field_default_value_day'] = $now['mday'];							$cp->vars['field_default_value_month'] = $now['mon'];							$cp->vars['field_default_value_year'] = $now['year'];							$var = $_POST['field_default_value'] = 'now';						}						else						{							if (isset($_REQUEST['field_default_value_day']))							{								$cp->vars['field_default_value_day'] = request_var('field_default_value_day', 0);								$cp->vars['field_default_value_month'] = request_var('field_default_value_month', 0);								$cp->vars['field_default_value_year'] = request_var('field_default_value_year', 0);								$var = $_POST['field_default_value'] = sprintf('%2d-%2d-%4d', $cp->vars['field_default_value_day'], $cp->vars['field_default_value_month'], $cp->vars['field_default_value_year']);							}							else							{								list($cp->vars['field_default_value_day'], $cp->vars['field_default_value_month'], $cp->vars['field_default_value_year']) = explode('-', $var);							}						}					}					/* else if ($field_type == FIELD_BOOL && $key == 'field_default_value')					{						// Get the number of options if this key is 'field_maxlen'						$var = request_var('field_default_value', 0);					}*/					else if ($field_type == FIELD_INT && $key == 'field_default_value')					{						// Permit an empty string						if ($action == 'create' && request_var('field_default_value', '') === '')						{							$var = '';						}					}					$cp->vars[$key] = $var;				}				// step 3 - all arrays				if ($action == 'edit')				{					// Get language entries					$sql = 'SELECT *						FROM ' . PROFILE_FIELDS_LANG_TABLE . '						WHERE lang_id <> ' . $this->edit_lang_id . "							AND field_id = $field_id						ORDER BY option_id ASC";					$result = $db->sql_query($sql);					$l_lang_options = array();					while ($row = $db->sql_fetchrow($result))					{						$l_lang_options[$row['lang_id']][$row['option_id']] = $row['lang_value'];					}					$db->sql_freeresult($result);					$sql = 'SELECT lang_id, lang_name, lang_explain, lang_default_value						FROM ' . PROFILE_LANG_TABLE . '						WHERE lang_id <> ' . $this->edit_lang_id . "							AND field_id = $field_id						ORDER BY lang_id ASC";					$result = $db->sql_query($sql);					$l_lang_name = $l_lang_explain = $l_lang_default_value = array();					while ($row = $db->sql_fetchrow($result))					{						$l_lang_name[$row['lang_id']] = $row['lang_name'];						$l_lang_explain[$row['lang_id']] = $row['lang_explain'];						$l_lang_default_value[$row['lang_id']] = $row['lang_default_value'];					}					$db->sql_freeresult($result);				}				foreach ($exclude[3] as $key)				{					$cp->vars[$key] = utf8_normalize_nfc(request_var($key, array(0 => ''), true));					if (!$cp->vars[$key] && $action == 'edit')					{						$cp->vars[$key] = $$key;					}					else if ($key == 'l_lang_options' && $field_type == FIELD_BOOL)					{						$cp->vars[$key] = utf8_normalize_nfc(request_var($key, array(0 => array('')), true));					}					else if ($key == 'l_lang_options' && is_array($cp->vars[$key]))					{						foreach ($cp->vars[$key] as $lang_id => $options)						{							$cp->vars[$key][$lang_id] = explode("\n", $options);						}					}				}				// Check for general issues in every step				if ($submit) //  && $step == 1				{					// Check values for step 1					if ($cp->vars['field_ident'] == '')					{						$error[] = $user->lang['EMPTY_FIELD_IDENT'];					}					if (!preg_match('/^[a-z_]+$/', $cp->vars['field_ident']))					{						$error[] = $user->lang['INVALID_CHARS_FIELD_IDENT'];					}					if (strlen($cp->vars['field_ident']) > 17)					{						$error[] = $user->lang['INVALID_FIELD_IDENT_LEN'];					}					if ($cp->vars['lang_name'] == '')					{						$error[] = $user->lang['EMPTY_USER_FIELD_NAME'];					}					if ($field_type == FIELD_DROPDOWN && !sizeof($cp->vars['lang_options']))					{						$error[] = $user->lang['NO_FIELD_ENTRIES'];					}					if ($field_type == FIELD_BOOL && (empty($cp->vars['lang_options'][0]) || empty($cp->vars['lang_options'][1])))					{						$error[] = $user->lang['NO_FIELD_ENTRIES'];					}					// Check for already existing field ident					if ($action != 'edit')					{						$sql = 'SELECT field_ident							FROM ' . PROFILE_FIELDS_TABLE . "							WHERE field_ident = '" . $db->sql_escape($cp->vars['field_ident']) . "'";						$result = $db->sql_query($sql);						$row = $db->sql_fetchrow($result);						$db->sql_freeresult($result);						if ($row)						{							$error[] = $user->lang['FIELD_IDENT_ALREADY_EXIST'];						}					}				}				$step = (isset($_REQUEST['next'])) ? $step + 1 : ((isset($_REQUEST['prev'])) ? $step - 1 : $step);				if (sizeof($error))				{					$step--;					$submit = false;				}				// Build up the specific hidden fields				foreach ($exclude as $num => $key_ary)				{					if ($num == $step)					{						continue;					}					$_new_key_ary = array();					foreach ($key_ary as $key)					{						if ($field_type == FIELD_TEXT && $key == 'field_length' && isset($_REQUEST['rows']))						{							$cp->vars['rows'] = request_var('rows', 0);							$cp->vars['columns'] = request_var('columns', 0);							$_new_key_ary[$key] = $cp->vars['rows'] . '|' . $cp->vars['columns'];						}						else if ($field_type == FIELD_DATE && $key == 'field_default_value')						{							$always_now = request_var('always_now', 0);							if ($always_now)							{								$_new_key_ary[$key] = 'now';							}							else if (isset($_REQUEST['field_default_value_day']))							{								$cp->vars['field_default_value_day'] = request_var('field_default_value_day', 0);								$cp->vars['field_default_value_month'] = request_var('field_default_value_month', 0);								$cp->vars['field_default_value_year'] = request_var('field_default_value_year', 0);								$_new_key_ary[$key]  = sprintf('%2d-%2d-%4d', $cp->vars['field_default_value_day'], $cp->vars['field_default_value_month'], $cp->vars['field_default_value_year']);							}						}						else if ($field_type == FIELD_BOOL && $key == 'l_lang_options' && isset($_REQUEST['l_lang_options']))						{							$_new_key_ary[$key] = utf8_normalize_nfc(request_var($key, array(array('')), true));						}						else						{							if (!isset($_REQUEST[$key]))							{								$var = false;							}							else if ($key == 'field_ident' && isset($cp->vars[$key]))							{								$_new_key_ary[$key]= $cp->vars[$key];							}							else							{								$_new_key_ary[$key] = (is_array($_REQUEST[$key])) ? utf8_normalize_nfc(request_var($key, array(''), true)) : utf8_normalize_nfc(request_var($key, '', true));							}						}					}					$s_hidden_fields .= build_hidden_fields($_new_key_ary);				}				if (!sizeof($error))				{					if ($step == 3 && (sizeof($this->lang_defs['iso']) == 1 || $save))					{						$this->save_profile_field($cp, $field_type, $action);					}					else if ($action == 'edit' && $save)					{						$this->save_profile_field($cp, $field_type, $action);					}				}				$template->assign_vars(array(					'S_EDIT'			=> true,					'S_EDIT_MODE'		=> ($action == 'edit') ? true : false,					'ERROR_MSG'			=> (sizeof($error)) ? implode('<br />', $error) : '',					'L_TITLE'			=> $user->lang['STEP_' . $step . '_TITLE_' . strtoupper($action)],					'L_EXPLAIN'			=> $user->lang['STEP_' . $step . '_EXPLAIN_' . strtoupper($action)],					'U_ACTION'			=> $this->u_action . "&amp;action=$action&amp;step=$step",					'U_BACK'			=> $this->u_action)				);				// Now go through the steps				switch ($step)				{					// Create basic options - only small differences between field types					case 1:						// Build common create options						$template->assign_vars(array(							'S_STEP_ONE'		=> true,							'S_FIELD_REQUIRED'	=> ($cp->vars['field_required']) ? true : false,							'S_SHOW_ON_REG'		=> ($cp->vars['field_show_on_reg']) ? true : false,							'S_SHOW_ON_VT'		=> ($cp->vars['field_show_on_vt']) ? true : false,							'S_FIELD_HIDE'		=> ($cp->vars['field_hide']) ? true : false,							'S_SHOW_PROFILE'	=> ($cp->vars['field_show_profile']) ? true : false,							'S_FIELD_NO_VIEW'	=> ($cp->vars['field_no_view']) ? true : false,							'L_LANG_SPECIFIC'	=> sprintf($user->lang['LANG_SPECIFIC_OPTIONS'], $config['default_lang']),							'FIELD_TYPE'		=> $user->lang['FIELD_' . strtoupper($cp->profile_types[$field_type])],							'FIELD_IDENT'		=> $cp->vars['field_ident'],							'LANG_NAME'			=> $cp->vars['lang_name'],							'LANG_EXPLAIN'		=> $cp->vars['lang_explain'])						);						// String and Text needs to set default values here...						if ($field_type == FIELD_STRING || $field_type == FIELD_TEXT)						{							$template->assign_vars(array(								'S_TEXT'		=> ($field_type == FIELD_TEXT) ? true : false,								'S_STRING'		=> ($field_type == FIELD_STRING) ? true : false,								'L_DEFAULT_VALUE_EXPLAIN'	=> $user->lang[strtoupper($cp->profile_types[$field_type]) . '_DEFAULT_VALUE_EXPLAIN'],								'LANG_DEFAULT_VALUE'		=> $cp->vars['lang_default_value'])							);						}						if ($field_type == FIELD_BOOL || $field_type == FIELD_DROPDOWN)						{							// Initialize these array elements if we are creating a new field							if (!sizeof($cp->vars['lang_options']))							{								if ($field_type == FIELD_BOOL)								{									// No options have been defined for a boolean field.									$cp->vars['lang_options'][0] = '';									$cp->vars['lang_options'][1] = '';								}								else								{									// No options have been defined for the dropdown menu									$cp->vars['lang_options'] = array();								}							}							$template->assign_vars(array(								'S_BOOL'		=> ($field_type == FIELD_BOOL) ? true : false,								'S_DROPDOWN'	=> ($field_type == FIELD_DROPDOWN) ? true : false,								'L_LANG_OPTIONS_EXPLAIN'	=> $user->lang[strtoupper($cp->profile_types[$field_type]) . '_ENTRIES_EXPLAIN'],								'LANG_OPTIONS'				=> ($field_type == FIELD_DROPDOWN) ? implode("\n", $cp->vars['lang_options']) : '',								'FIRST_LANG_OPTION'			=> ($field_type == FIELD_BOOL) ? $cp->vars['lang_options'][0] : '',								'SECOND_LANG_OPTION'		=> ($field_type == FIELD_BOOL) ? $cp->vars['lang_options'][1] : '')							);						}					break;					case 2:						$template->assign_vars(array(							'S_STEP_TWO'		=> true,							'L_NEXT_STEP'			=> (sizeof($this->lang_defs['iso']) == 1) ? $user->lang['SAVE'] : $user->lang['PROFILE_LANG_OPTIONS'])						);						// Build options based on profile type						$function = 'get_' . $cp->profile_types[$field_type] . '_options';						$options = $cp->$function();						foreach ($options as $num => $option_ary)						{							$template->assign_block_vars('option', $option_ary);						}					break;					// Define remaining language variables					case 3:						$template->assign_var('S_STEP_THREE', true);						$options = $this->build_language_options($cp, $field_type, $action);						foreach ($options as $lang_id => $lang_ary)						{							$template->assign_block_vars('options', array(								'LANGUAGE'		=> sprintf($user->lang[(($lang_id == $this->edit_lang_id) ? 'DEFAULT_' : '') . 'ISO_LANGUAGE'], $lang_ary['lang_iso']))							);							foreach ($lang_ary['fields'] as $field_ident => $field_ary)							{								$template->assign_block_vars('options.field', array(									'L_TITLE'		=> $field_ary['TITLE'],									'L_EXPLAIN'		=> (isset($field_ary['EXPLAIN'])) ? $field_ary['EXPLAIN'] : '',									'FIELD'			=> $field_ary['FIELD'])								);							}						}					break;				}				$template->assign_vars(array(					'S_HIDDEN_FIELDS'	=> $s_hidden_fields)				);				return;			break;		}		$sql = 'SELECT *			FROM ' . PROFILE_FIELDS_TABLE . '			ORDER BY field_order';		$result = $db->sql_query($sql);		$s_one_need_edit = false;		while ($row = $db->sql_fetchrow($result))		{			$active_lang = (!$row['field_active']) ? 'ACTIVATE' : 'DEACTIVATE';			$active_value = (!$row['field_active']) ? 'activate' : 'deactivate';			$id = $row['field_id'];			$s_need_edit = (sizeof($this->lang_defs['diff'][$row['field_id']])) ? true : false;			if ($s_need_edit)			{				$s_one_need_edit = true;			}			$template->assign_block_vars('fields', array(				'FIELD_IDENT'		=> $row['field_ident'],				'FIELD_TYPE'		=> $user->lang['FIELD_' . strtoupper($cp->profile_types[$row['field_type']])],				'L_ACTIVATE_DEACTIVATE'		=> $user->lang[$active_lang],				'U_ACTIVATE_DEACTIVATE'		=> $this->u_action . "&amp;action=$active_value&amp;field_id=$id",				'U_EDIT'					=> $this->u_action . "&amp;action=edit&amp;field_id=$id",				'U_TRANSLATE'				=> $this->u_action . "&amp;action=edit&amp;field_id=$id&amp;step=3",				'U_DELETE'					=> $this->u_action . "&amp;action=delete&amp;field_id=$id",				'U_MOVE_UP'					=> $this->u_action . "&amp;action=move_up&amp;order={$row['field_order']}",				'U_MOVE_DOWN'				=> $this->u_action . "&amp;action=move_down&amp;order={$row['field_order']}",				'S_NEED_EDIT'				=> $s_need_edit)			);		}		$db->sql_freeresult($result);		// At least one option field needs editing?		if ($s_one_need_edit)		{			$template->assign_var('S_NEED_EDIT', true);		}		$s_select_type = '';		foreach ($cp->profile_types as $key => $value)		{			$s_select_type .= '<option value="' . $key . '">' . $user->lang['FIELD_' . strtoupper($value)] . '</option>';		}		$template->assign_vars(array(			'U_ACTION'			=> $this->u_action,			'S_TYPE_OPTIONS'	=> $s_select_type)		);	}	/**	* Build all Language specific options	*/	function build_language_options(&$cp, $field_type, $action = 'create')	{		global $user, $config, $db;		$default_lang_id = (!empty($this->edit_lang_id)) ? $this->edit_lang_id : $this->lang_defs['iso'][$config['default_lang']];		$sql = 'SELECT lang_id, lang_iso			FROM ' . LANG_TABLE . '			WHERE lang_id <> ' . (int) $default_lang_id . '			ORDER BY lang_english_name';		$result = $db->sql_query($sql);		$languages = array();		while ($row = $db->sql_fetchrow($result))		{			$languages[$row['lang_id']] = $row['lang_iso'];		}		$db->sql_freeresult($result);		$options = array();		$options['lang_name'] = 'string';		if ($cp->vars['lang_explain'])		{			$options['lang_explain'] = 'text';		}		switch ($field_type)		{			case FIELD_BOOL:				$options['lang_options'] = 'two_options';			break;			case FIELD_DROPDOWN:				$options['lang_options'] = 'optionfield';			break;			case FIELD_TEXT:			case FIELD_STRING:				if (strlen($cp->vars['lang_default_value']))				{					$options['lang_default_value'] = ($field_type == FIELD_STRING) ? 'string' : 'text';				}			break;		}		$lang_options = array();		foreach ($options as $field => $field_type)		{			$lang_options[1]['lang_iso'] = $this->lang_defs['id'][$default_lang_id];			$lang_options[1]['fields'][$field] = array(				'TITLE'		=> $user->lang['CP_' . strtoupper($field)],				'FIELD'		=> '<dd>' . ((is_array($cp->vars[$field])) ? implode('<br />', $cp->vars[$field]) : bbcode_nl2br($cp->vars[$field])) . '</dd>'			);			if (isset($user->lang['CP_' . strtoupper($field) . '_EXPLAIN']))			{				$lang_options[1]['fields'][$field]['EXPLAIN'] = $user->lang['CP_' . strtoupper($field) . '_EXPLAIN'];			}		}		foreach ($languages as $lang_id => $lang_iso)		{			$lang_options[$lang_id]['lang_iso'] = $lang_iso;			foreach ($options as $field => $field_type)			{				$value = ($action == 'create') ? utf8_normalize_nfc(request_var('l_' . $field, array(0 => ''), true)) : $cp->vars['l_' . $field];				if ($field == 'lang_options')				{					$var = (!isset($cp->vars['l_lang_options'][$lang_id]) || !is_array($cp->vars['l_lang_options'][$lang_id])) ? $cp->vars['lang_options'] : $cp->vars['l_lang_options'][$lang_id];					switch ($field_type)					{						case 'two_options':							$lang_options[$lang_id]['fields'][$field] = array(								'TITLE'		=> $user->lang['CP_' . strtoupper($field)],								'FIELD'		=> '											<dd><input class="medium" name="l_' . $field . '[' . $lang_id . '][]" value="' . ((isset($value[$lang_id][0])) ? $value[$lang_id][0] : $var[0]) . '" /> ' . $user->lang['FIRST_OPTION'] . '</dd>											<dd><input class="medium" name="l_' . $field . '[' . $lang_id . '][]" value="' . ((isset($value[$lang_id][1])) ? $value[$lang_id][1] : $var[1]) . '" /> ' . $user->lang['SECOND_OPTION'] . '</dd>'							);						break;						case 'optionfield':							$value = ((isset($value[$lang_id])) ? ((is_array($value[$lang_id])) ?  implode("\n", $value[$lang_id]) : $value[$lang_id]) : implode("\n", $var));							$lang_options[$lang_id]['fields'][$field] = array(								'TITLE'		=> $user->lang['CP_' . strtoupper($field)],								'FIELD'		=> '<dd><textarea name="l_' . $field . '[' . $lang_id . ']" rows="7" cols="80">' . $value . '</textarea></dd>'							);						break;					}					if (isset($user->lang['CP_' . strtoupper($field) . '_EXPLAIN']))					{						$lang_options[$lang_id]['fields'][$field]['EXPLAIN'] = $user->lang['CP_' . strtoupper($field) . '_EXPLAIN'];					}				}				else				{					$var = ($action == 'create' || !is_array($cp->vars[$field])) ? $cp->vars[$field] : $cp->vars[$field][$lang_id];					$lang_options[$lang_id]['fields'][$field] = array(						'TITLE'		=> $user->lang['CP_' . strtoupper($field)],						'FIELD'		=> ($field_type == 'string') ? '<dd><input class="medium" type="text" name="l_' . $field . '[' . $lang_id . ']" value="' . ((isset($value[$lang_id])) ? $value[$lang_id] : $var) . '" /></dd>' : '<dd><textarea name="l_' . $field . '[' . $lang_id . ']" rows="3" cols="80">' . ((isset($value[$lang_id])) ? $value[$lang_id] : $var) . '</textarea></dd>'					);					if (isset($user->lang['CP_' . strtoupper($field) . '_EXPLAIN']))					{						$lang_options[$lang_id]['fields'][$field]['EXPLAIN'] = $user->lang['CP_' . strtoupper($field) . '_EXPLAIN'];					}				}			}		}		return $lang_options;	}	/**	* Save Profile Field	*/	function save_profile_field(&$cp, $field_type, $action = 'create')	{		global $db, $config, $user;		$field_id = request_var('field_id', 0);		// Collect all information, if something is going wrong, abort the operation		$profile_sql = $profile_lang = $empty_lang = $profile_lang_fields = array();		$default_lang_id = (!empty($this->edit_lang_id)) ? $this->edit_lang_id : $this->lang_defs['iso'][$config['default_lang']];		if ($action == 'create')		{			$sql = 'SELECT MAX(field_order) as max_field_order				FROM ' . PROFILE_FIELDS_TABLE;			$result = $db->sql_query($sql);			$new_field_order = (int) $db->sql_fetchfield('max_field_order');			$db->sql_freeresult($result);			$field_ident = $cp->vars['field_ident'];		}		// Save the field		$profile_fields = array(			'field_length'			=> $cp->vars['field_length'],			'field_minlen'			=> $cp->vars['field_minlen'],			'field_maxlen'			=> $cp->vars['field_maxlen'],			'field_novalue'			=> $cp->vars['field_novalue'],			'field_default_value'	=> $cp->vars['field_default_value'],			'field_validation'		=> $cp->vars['field_validation'],			'field_required'		=> $cp->vars['field_required'],			'field_show_on_reg'		=> $cp->vars['field_show_on_reg'],			'field_show_on_vt'		=> $cp->vars['field_show_on_vt'],			'field_hide'			=> $cp->vars['field_hide'],			'field_show_profile'	=> $cp->vars['field_show_profile'],			'field_no_view'			=> $cp->vars['field_no_view']		);		if ($action == 'create')		{			$profile_fields += array(				'field_type'		=> $field_type,				'field_ident'		=> $field_ident,				'field_name'		=> $field_ident,				'field_order'		=> $new_field_order + 1,				'field_active'		=> 1			);			$sql = 'INSERT INTO ' . PROFILE_FIELDS_TABLE . ' ' . $db->sql_build_array('INSERT', $profile_fields);			$db->sql_query($sql);			$field_id = $db->sql_nextid();		}		else		{			$sql = 'UPDATE ' . PROFILE_FIELDS_TABLE . '				SET ' . $db->sql_build_array('UPDATE', $profile_fields) . "				WHERE field_id = $field_id";			$db->sql_query($sql);		}		if ($action == 'create')		{			$field_ident = 'pf_' . $field_ident;			$profile_sql[] = $this->add_field_ident($field_ident, $field_type);		}		$sql_ary = array(			'lang_name'				=> $cp->vars['lang_name'],			'lang_explain'			=> $cp->vars['lang_explain'],			'lang_default_value'	=> $cp->vars['lang_default_value']		);		if ($action == 'create')		{			$sql_ary['field_id'] = $field_id;			$sql_ary['lang_id'] = $default_lang_id;			$profile_sql[] = 'INSERT INTO ' . PROFILE_LANG_TABLE . ' ' . $db->sql_build_array('INSERT', $sql_ary);		}		else		{			$this->update_insert(PROFILE_LANG_TABLE, $sql_ary, array('field_id' => $field_id, 'lang_id' => $default_lang_id));		}		if (is_array($cp->vars['l_lang_name']) && sizeof($cp->vars['l_lang_name']))		{			foreach ($cp->vars['l_lang_name'] as $lang_id => $data)			{				if (($cp->vars['lang_name'] != '' && $cp->vars['l_lang_name'][$lang_id] == '')					|| ($cp->vars['lang_explain'] != '' && $cp->vars['l_lang_explain'][$lang_id] == '')					|| ($cp->vars['lang_default_value'] != '' && $cp->vars['l_lang_default_value'][$lang_id] == ''))				{					$empty_lang[$lang_id] = true;					break;				}				if (!isset($empty_lang[$lang_id]))				{					$profile_lang[] = array(						'field_id'		=> $field_id,						'lang_id'		=> $lang_id,						'lang_name'		=> $cp->vars['l_lang_name'][$lang_id],						'lang_explain'	=> (isset($cp->vars['l_lang_explain'][$lang_id])) ? $cp->vars['l_lang_explain'][$lang_id] : '',						'lang_default_value'	=> (isset($cp->vars['l_lang_default_value'][$lang_id])) ? $cp->vars['l_lang_default_value'][$lang_id] : ''					);				}			}			foreach ($empty_lang as $lang_id => $NULL)			{				$sql = 'DELETE FROM ' . PROFILE_LANG_TABLE . "					WHERE field_id = $field_id					AND lang_id = " . (int) $lang_id;				$db->sql_query($sql);			}		}		// These are always arrays because the key is the language id...		$cp->vars['l_lang_name']			= utf8_normalize_nfc(request_var('l_lang_name', array(0 => ''), true));		$cp->vars['l_lang_explain']			= utf8_normalize_nfc(request_var('l_lang_explain', array(0 => ''), true));		$cp->vars['l_lang_default_value']	= utf8_normalize_nfc(request_var('l_lang_default_value', array(0 => ''), true));		if ($field_type != FIELD_BOOL)		{			$cp->vars['l_lang_options']			= utf8_normalize_nfc(request_var('l_lang_options', array(0 => ''), true));		}		else		{			/**			* @todo check if this line is correct...			$cp->vars['l_lang_default_value']	= request_var('l_lang_default_value', array(0 => array('')), true);			*/			$cp->vars['l_lang_options']	= utf8_normalize_nfc(request_var('l_lang_options', array(0 => array('')), true));		}		if ($cp->vars['lang_options'])		{			if (!is_array($cp->vars['lang_options']))			{				$cp->vars['lang_options'] = explode("\n", $cp->vars['lang_options']);			}			if ($action != 'create')			{				$sql = 'DELETE FROM ' . PROFILE_FIELDS_LANG_TABLE . "					WHERE field_id = $field_id						AND lang_id = " . (int) $default_lang_id;				$db->sql_query($sql);			}			foreach ($cp->vars['lang_options'] as $option_id => $value)			{				$sql_ary = array(					'field_type'	=> (int) $field_type,					'lang_value'	=> $value				);				if ($action == 'create')				{					$sql_ary['field_id'] = $field_id;					$sql_ary['lang_id'] = $default_lang_id;					$sql_ary['option_id'] = (int) $option_id;					$profile_sql[] = 'INSERT INTO ' . PROFILE_FIELDS_LANG_TABLE . ' ' . $db->sql_build_array('INSERT', $sql_ary);				}				else				{					$this->update_insert(PROFILE_FIELDS_LANG_TABLE, $sql_ary, array(						'field_id'	=> $field_id,						'lang_id'	=> (int) $default_lang_id,						'option_id'	=> (int) $option_id)					);				}			}		}		if (is_array($cp->vars['l_lang_options']) && sizeof($cp->vars['l_lang_options']))		{			$empty_lang = array();			foreach ($cp->vars['l_lang_options'] as $lang_id => $lang_ary)			{				if (!is_array($lang_ary))				{					$lang_ary = explode("\n", $lang_ary);				}				if (sizeof($lang_ary) != sizeof($cp->vars['lang_options']))				{					$empty_lang[$lang_id] = true;				}				if (!isset($empty_lang[$lang_id]))				{					if ($action != 'create')					{						$sql = 'DELETE FROM ' . PROFILE_FIELDS_LANG_TABLE . "							WHERE field_id = $field_id							AND lang_id = " . (int) $lang_id;						$db->sql_query($sql);					}					foreach ($lang_ary as $option_id => $value)					{						$profile_lang_fields[] = array(							'field_id'		=> (int) $field_id,							'lang_id'		=> (int) $lang_id,							'option_id'		=> (int) $option_id,							'field_type'	=> (int) $field_type,							'lang_value'	=> $value						);					}				}			}			foreach ($empty_lang as $lang_id => $NULL)			{				$sql = 'DELETE FROM ' . PROFILE_FIELDS_LANG_TABLE . "					WHERE field_id = $field_id					AND lang_id = " . (int) $lang_id;				$db->sql_query($sql);			}		}		foreach ($profile_lang as $sql)		{			if ($action == 'create')			{				$profile_sql[] = 'INSERT INTO ' . PROFILE_LANG_TABLE . ' ' . $db->sql_build_array('INSERT', $sql);			}			else			{				$lang_id = $sql['lang_id'];				unset($sql['lang_id'], $sql['field_id']);				$this->update_insert(PROFILE_LANG_TABLE, $sql, array('lang_id' => (int) $lang_id, 'field_id' => $field_id));			}		}		if (sizeof($profile_lang_fields))		{			foreach ($profile_lang_fields as $sql)			{				if ($action == 'create')				{					$profile_sql[] = 'INSERT INTO ' . PROFILE_FIELDS_LANG_TABLE . ' ' . $db->sql_build_array('INSERT', $sql);				}				else				{					$lang_id = $sql['lang_id'];					$option_id = $sql['option_id'];					unset($sql['lang_id'], $sql['field_id'], $sql['option_id']);					$this->update_insert(PROFILE_FIELDS_LANG_TABLE, $sql, array(						'lang_id'	=> $lang_id,						'field_id'	=> $field_id,						'option_id'	=> $option_id)					);				}			}		}		$db->sql_transaction('begin');		if ($action == 'create')		{			foreach ($profile_sql as $sql)			{				$db->sql_query($sql);			}		}		$db->sql_transaction('commit');		if ($action == 'edit')		{			add_log('admin', 'LOG_PROFILE_FIELD_EDIT', $cp->vars['field_ident'] . ':' . $cp->vars['lang_name']);			trigger_error($user->lang['CHANGED_PROFILE_FIELD'] . adm_back_link($this->u_action));		}		else		{			add_log('admin', 'LOG_PROFILE_FIELD_CREATE', substr($field_ident, 3) . ':' . $cp->vars['lang_name']);			trigger_error($user->lang['ADDED_PROFILE_FIELD'] . adm_back_link($this->u_action));		}	}	/**	* Update, then insert if not successfull	*/	function update_insert($table, $sql_ary, $where_fields)	{		global $db;		$where_sql = array();		$check_key = '';		foreach ($where_fields as $key => $value)		{			$check_key = (!$check_key) ? $key : $check_key;			$where_sql[] = $key . ' = ' . ((is_string($value)) ? "'" . $db->sql_escape($value) . "'" : (int) $value);		}		if (!sizeof($where_sql))		{			return;		}		$sql = "SELECT $check_key			FROM $table			WHERE " . implode(' AND ', $where_sql);		$result = $db->sql_query($sql);		$row = $db->sql_fetchrow($result);		$db->sql_freeresult($result);		if (!$row)		{			$sql_ary = array_merge($where_fields, $sql_ary);			if (sizeof($sql_ary))			{				$db->sql_query("INSERT INTO $table " . $db->sql_build_array('INSERT', $sql_ary));			}		}		else		{			if (sizeof($sql_ary))			{				$sql = "UPDATE $table SET " . $db->sql_build_array('UPDATE', $sql_ary) . '					WHERE ' . implode(' AND ', $where_sql);				$db->sql_query($sql);			}		}	}	/**	* Return sql statement for adding a new field ident (profile field) to the profile fields data table	*/	function add_field_ident($field_ident, $field_type)	{		global $db;		switch ($db->sql_layer)		{			case 'mysql':			case 'mysql4':			case 'mysqli':				// We are defining the biggest common value, because of the possibility to edit the min/max values of each field.				$sql = 'ALTER TABLE ' . PROFILE_FIELDS_DATA_TABLE . " ADD `$field_ident` ";				switch ($field_type)				{					case FIELD_STRING:						$sql .= ' VARCHAR(255) ';					break;					case FIELD_DATE:						$sql .= 'VARCHAR(10) ';					break;					case FIELD_TEXT:						$sql .= "TEXT";		//						ADD {$field_ident}_bbcode_uid VARCHAR(5) NOT NULL,		//						ADD {$field_ident}_bbcode_bitfield INT(11) UNSIGNED";					break;					case FIELD_BOOL:						$sql .= 'TINYINT(2) ';					break;					case FIELD_DROPDOWN:						$sql .= 'MEDIUMINT(8) ';					break;					case FIELD_INT:						$sql .= 'BIGINT(20) ';					break;				}			break;			case 'sqlite':				switch ($field_type)				{					case FIELD_STRING:						$type = ' VARCHAR(255) ';					break;					case FIELD_DATE:						$type = 'VARCHAR(10) ';					break;					case FIELD_TEXT:						$type = "TEXT(65535)";		//						ADD {$field_ident}_bbcode_uid VARCHAR(5) NOT NULL,		//						ADD {$field_ident}_bbcode_bitfield INT(11) UNSIGNED";					break;					case FIELD_BOOL:						$type = 'TINYINT(2) ';					break;					case FIELD_DROPDOWN:						$type = 'MEDIUMINT(8) ';					break;					case FIELD_INT:						$type = 'BIGINT(20) ';					break;				}				// We are defining the biggest common value, because of the possibility to edit the min/max values of each field.				if (version_compare(sqlite_libversion(), '3.0') == -1)				{					$sql = "SELECT sql						FROM sqlite_master						WHERE type = 'table'							AND name = '" . PROFILE_FIELDS_DATA_TABLE . "'						ORDER BY type DESC, name;";					$result = $db->sql_query($sql);					$row = $db->sql_fetchrow($result);					$db->sql_freeresult($result);					// Create a temp table and populate it, destroy the existing one					$db->sql_query(preg_replace('#CREATE\s+TABLE\s+"?' . PROFILE_FIELDS_DATA_TABLE . '"?#i', 'CREATE TEMPORARY TABLE ' . PROFILE_FIELDS_DATA_TABLE . '_temp', $row['sql']));					$db->sql_query('INSERT INTO ' . PROFILE_FIELDS_DATA_TABLE . '_temp SELECT * FROM ' . PROFILE_FIELDS_DATA_TABLE);					$db->sql_query('DROP TABLE ' . PROFILE_FIELDS_DATA_TABLE);					preg_match('#\((.*)\)#s', $row['sql'], $matches);					$new_table_cols = trim($matches[1]);					$old_table_cols = explode(',', $new_table_cols);					$column_list = array();					foreach ($old_table_cols as $declaration)					{						$entities = preg_split('#\s+#', trim($declaration));						if ($entities[0] == 'PRIMARY')						{							continue;						}						$column_list[] = $entities[0];					}					$columns = implode(',', $column_list);					$new_table_cols = $field_ident . ' ' . $type . ',' . $new_table_cols;					// create a new table and fill it up. destroy the temp one					$db->sql_query('CREATE TABLE ' . PROFILE_FIELDS_DATA_TABLE . ' (' . $new_table_cols . ');');					$db->sql_query('INSERT INTO ' . PROFILE_FIELDS_DATA_TABLE . ' (' . $columns . ') SELECT ' . $columns . ' FROM ' . PROFILE_FIELDS_DATA_TABLE . '_temp;');					$db->sql_query('DROP TABLE ' . PROFILE_FIELDS_DATA_TABLE . '_temp');				}				else				{					$sql = 'ALTER TABLE ' . PROFILE_FIELDS_DATA_TABLE . " ADD $field_ident [$type]";				}			break;			case 'mssql':			case 'mssql_odbc':			case 'mssqlnative':				// We are defining the biggest common value, because of the possibility to edit the min/max values of each field.				$sql = 'ALTER TABLE [' . PROFILE_FIELDS_DATA_TABLE . "] ADD [$field_ident] ";				switch ($field_type)				{					case FIELD_STRING:						$sql .= ' [VARCHAR] (255) ';					break;					case FIELD_DATE:						$sql .= '[VARCHAR] (10) ';					break;					case FIELD_TEXT:						$sql .= "[TEXT]";		//						ADD {$field_ident}_bbcode_uid [VARCHAR] (5) NOT NULL,		//						ADD {$field_ident}_bbcode_bitfield [INT] UNSIGNED";					break;					case FIELD_BOOL:					case FIELD_DROPDOWN:						$sql .= '[INT] ';					break;					case FIELD_INT:						$sql .= '[FLOAT] ';					break;				}			break;			case 'postgres':				// We are defining the biggest common value, because of the possibility to edit the min/max values of each field.				$sql = 'ALTER TABLE ' . PROFILE_FIELDS_DATA_TABLE . " ADD COLUMN \"$field_ident\" ";				switch ($field_type)				{					case FIELD_STRING:						$sql .= ' VARCHAR(255) ';					break;					case FIELD_DATE:						$sql .= 'VARCHAR(10) ';					break;					case FIELD_TEXT:						$sql .= "TEXT";		//						ADD {$field_ident}_bbcode_uid VARCHAR(5) NOT NULL,		//						ADD {$field_ident}_bbcode_bitfield INT4 UNSIGNED";					break;					case FIELD_BOOL:						$sql .= 'INT2 ';					break;					case FIELD_DROPDOWN:						$sql .= 'INT4 ';					break;					case FIELD_INT:						$sql .= 'INT8 ';					break;				}			break;			case 'firebird':				// We are defining the biggest common value, because of the possibility to edit the min/max values of each field.				$sql = 'ALTER TABLE ' . PROFILE_FIELDS_DATA_TABLE . ' ADD "' . strtoupper($field_ident) . '" ';				switch ($field_type)				{					case FIELD_STRING:						$sql .= ' VARCHAR(255) ';					break;					case FIELD_DATE:						$sql .= 'VARCHAR(10) ';					break;					case FIELD_TEXT:						$sql .= "BLOB SUB_TYPE TEXT";		//						ADD {$field_ident}_bbcode_uid VARCHAR(5) NOT NULL,		//						ADD {$field_ident}_bbcode_bitfield INTEGER UNSIGNED";					break;					case FIELD_BOOL:					case FIELD_DROPDOWN:						$sql .= 'INTEGER ';					break;					case FIELD_INT:						$sql .= 'DOUBLE PRECISION ';					break;				}			break;			case 'oracle':				// We are defining the biggest common value, because of the possibility to edit the min/max values of each field.				$sql = 'ALTER TABLE ' . PROFILE_FIELDS_DATA_TABLE . " ADD $field_ident ";				switch ($field_type)				{					case FIELD_STRING:						$sql .= ' VARCHAR2(255) ';					break;					case FIELD_DATE:						$sql .= 'VARCHAR2(10) ';					break;					case FIELD_TEXT:						$sql .= "CLOB";		//						ADD {$field_ident}_bbcode_uid VARCHAR2(5) NOT NULL,		//						ADD {$field_ident}_bbcode_bitfield NUMBER(11) UNSIGNED";					break;					case FIELD_BOOL:						$sql .= 'NUMBER(2) ';					break;					case FIELD_DROPDOWN:						$sql .= 'NUMBER(8) ';					break;					case FIELD_INT:						$sql .= 'NUMBER(20) ';					break;				}			break;		}		return $sql;	}}?>
<?php/**** @package dbal* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @ignore*/if (!defined('IN_PHPBB')){	exit;}/*** Database Abstraction Layer* @package dbal*/class dbal{	var $db_connect_id;	var $query_result;	var $return_on_error = false;	var $transaction = false;	var $sql_time = 0;	var $num_queries = array();	var $open_queries = array();	var $curtime = 0;	var $query_hold = '';	var $html_hold = '';	var $sql_report = '';	var $persistency = false;	var $user = '';	var $server = '';	var $dbname = '';	// Set to true if error triggered	var $sql_error_triggered = false;	// Holding the last sql query on sql error	var $sql_error_sql = '';	// Holding the error information - only populated if sql_error_triggered is set	var $sql_error_returned = array();	// Holding transaction count	var $transactions = 0;	// Supports multi inserts?	var $multi_insert = false;	/**	* Current sql layer	*/	var $sql_layer = '';	/**	* Wildcards for matching any (%) or exactly one (_) character within LIKE expressions	*/	var $any_char;	var $one_char;	/**	* Exact version of the DBAL, directly queried	*/	var $sql_server_version = false;	/**	* Constructor	*/	function dbal()	{		$this->num_queries = array(			'cached'		=> 0,			'normal'		=> 0,			'total'			=> 0,		);		// Fill default sql layer based on the class being called.		// This can be changed by the specified layer itself later if needed.		$this->sql_layer = substr(get_class($this), 5);		// Do not change this please! This variable is used to easy the use of it - and is hardcoded.		$this->any_char = chr(0) . '%';		$this->one_char = chr(0) . '_';	}	/**	* return on error or display error message	*/	function sql_return_on_error($fail = false)	{		$this->sql_error_triggered = false;		$this->sql_error_sql = '';		$this->return_on_error = $fail;	}	/**	* Return number of sql queries and cached sql queries used	*/	function sql_num_queries($cached = false)	{		return ($cached) ? $this->num_queries['cached'] : $this->num_queries['normal'];	}	/**	* Add to query count	*/	function sql_add_num_queries($cached = false)	{		$this->num_queries['cached'] += ($cached !== false) ? 1 : 0;		$this->num_queries['normal'] += ($cached !== false) ? 0 : 1;		$this->num_queries['total'] += 1;	}	/**	* DBAL garbage collection, close sql connection	*/	function sql_close()	{		if (!$this->db_connect_id)		{			return false;		}		if ($this->transaction)		{			do			{				$this->sql_transaction('commit');			}			while ($this->transaction);		}		foreach ($this->open_queries as $query_id)		{			$this->sql_freeresult($query_id);		}		// Connection closed correctly. Set db_connect_id to false to prevent errors		if ($result = $this->_sql_close())		{			$this->db_connect_id = false;		}		return $result;	}	/**	* Build LIMIT query	* Doing some validation here.	*/	function sql_query_limit($query, $total, $offset = 0, $cache_ttl = 0)	{		if (empty($query))		{			return false;		}		// Never use a negative total or offset		$total = ($total < 0) ? 0 : $total;		$offset = ($offset < 0) ? 0 : $offset;		return $this->_sql_query_limit($query, $total, $offset, $cache_ttl);	}	/**	* Fetch all rows	*/	function sql_fetchrowset($query_id = false)	{		if ($query_id === false)		{			$query_id = $this->query_result;		}		if ($query_id !== false)		{			$result = array();			while ($row = $this->sql_fetchrow($query_id))			{				$result[] = $row;			}			return $result;		}		return false;	}	/**	* Fetch field	* if rownum is false, the current row is used, else it is pointing to the row (zero-based)	*/	function sql_fetchfield($field, $rownum = false, $query_id = false)	{		global $cache;		if ($query_id === false)		{			$query_id = $this->query_result;		}		if ($query_id !== false)		{			if ($rownum !== false)			{				$this->sql_rowseek($rownum, $query_id);			}			if (!is_object($query_id) && isset($cache->sql_rowset[$query_id]))			{				return $cache->sql_fetchfield($query_id, $field);			}			$row = $this->sql_fetchrow($query_id);			return (isset($row[$field])) ? $row[$field] : false;		}		return false;	}	/**	* Correctly adjust LIKE expression for special characters	* Some DBMS are handling them in a different way	*	* @param string $expression The expression to use. Every wildcard is escaped, except $this->any_char and $this->one_char	* @return string LIKE expression including the keyword!	*/	function sql_like_expression($expression)	{		$expression = utf8_str_replace(array('_', '%'), array("\_", "\%"), $expression);		$expression = utf8_str_replace(array(chr(0) . "\_", chr(0) . "\%"), array('_', '%'), $expression);		return $this->_sql_like_expression('LIKE \'' . $this->sql_escape($expression) . '\'');	}	/**	* Returns whether results of a query need to be buffered to run a transaction while iterating over them.	*	* @return bool Whether buffering is required.	*/	function sql_buffer_nested_transactions()	{		return false;	}	/**	* SQL Transaction	* @access private	*/	function sql_transaction($status = 'begin')	{		switch ($status)		{			case 'begin':				// If we are within a transaction we will not open another one, but enclose the current one to not loose data (prevening auto commit)				if ($this->transaction)				{					$this->transactions++;					return true;				}				$result = $this->_sql_transaction('begin');				if (!$result)				{					$this->sql_error();				}				$this->transaction = true;			break;			case 'commit':				// If there was a previously opened transaction we do not commit yet... but count back the number of inner transactions				if ($this->transaction && $this->transactions)				{					$this->transactions--;					return true;				}				// Check if there is a transaction (no transaction can happen if there was an error, with a combined rollback and error returning enabled)				// This implies we have transaction always set for autocommit db's				if (!$this->transaction)				{					return false;				}				$result = $this->_sql_transaction('commit');				if (!$result)				{					$this->sql_error();				}				$this->transaction = false;				$this->transactions = 0;			break;			case 'rollback':				$result = $this->_sql_transaction('rollback');				$this->transaction = false;				$this->transactions = 0;			break;			default:				$result = $this->_sql_transaction($status);			break;		}		return $result;	}	/**	* Build sql statement from array for insert/update/select statements	*	* Idea for this from Ikonboard	* Possible query values: INSERT, INSERT_SELECT, UPDATE, SELECT	*	*/	function sql_build_array($query, $assoc_ary = false)	{		if (!is_array($assoc_ary))		{			return false;		}		$fields = $values = array();		if ($query == 'INSERT' || $query == 'INSERT_SELECT')		{			foreach ($assoc_ary as $key => $var)			{				$fields[] = $key;				if (is_array($var) && is_string($var[0]))				{					// This is used for INSERT_SELECT(s)					$values[] = $var[0];				}				else				{					$values[] = $this->_sql_validate_value($var);				}			}			$query = ($query == 'INSERT') ? ' (' . implode(', ', $fields) . ') VALUES (' . implode(', ', $values) . ')' : ' (' . implode(', ', $fields) . ') SELECT ' . implode(', ', $values) . ' ';		}		else if ($query == 'MULTI_INSERT')		{			trigger_error('The MULTI_INSERT query value is no longer supported. Please use sql_multi_insert() instead.', E_USER_ERROR);		}		else if ($query == 'UPDATE' || $query == 'SELECT')		{			$values = array();			foreach ($assoc_ary as $key => $var)			{				$values[] = "$key = " . $this->_sql_validate_value($var);			}			$query = implode(($query == 'UPDATE') ? ', ' : ' AND ', $values);		}		return $query;	}	/**	* Build IN or NOT IN sql comparison string, uses <> or = on single element	* arrays to improve comparison speed	*	* @access public	* @param	string	$field				name of the sql column that shall be compared	* @param	array	$array				array of values that are allowed (IN) or not allowed (NOT IN)	* @param	bool	$negate				true for NOT IN (), false for IN () (default)	* @param	bool	$allow_empty_set	If true, allow $array to be empty, this function will return 1=1 or 1=0 then. Default to false.	*/	function sql_in_set($field, $array, $negate = false, $allow_empty_set = false)	{		if (!sizeof($array))		{			if (!$allow_empty_set)			{				// Print the backtrace to help identifying the location of the problematic code				$this->sql_error('No values specified for SQL IN comparison');			}			else			{				// NOT IN () actually means everything so use a tautology				if ($negate)				{					return '1=1';				}				// IN () actually means nothing so use a contradiction				else				{					return '1=0';				}			}		}		if (!is_array($array))		{			$array = array($array);		}		if (sizeof($array) == 1)		{			@reset($array);			$var = current($array);			return $field . ($negate ? ' <> ' : ' = ') . $this->_sql_validate_value($var);		}		else		{			return $field . ($negate ? ' NOT IN ' : ' IN ') . '(' . implode(', ', array_map(array($this, '_sql_validate_value'), $array)) . ')';		}	}	/**	* Run binary AND operator on DB column.	* Results in sql statement: "{$column_name} & (1 << {$bit}) {$compare}"	*	* @param string $column_name The column name to use	* @param int $bit The value to use for the AND operator, will be converted to (1 << $bit). Is used by options, using the number schema... 0, 1, 2...29	* @param string $compare Any custom SQL code after the check (for example "= 0")	*/	function sql_bit_and($column_name, $bit, $compare = '')	{		if (method_exists($this, '_sql_bit_and'))		{			return $this->_sql_bit_and($column_name, $bit, $compare);		}		return $column_name . ' & ' . (1 << $bit) . (($compare) ? ' ' . $compare : '');	}	/**	* Run binary OR operator on DB column.	* Results in sql statement: "{$column_name} | (1 << {$bit}) {$compare}"	*	* @param string $column_name The column name to use	* @param int $bit The value to use for the OR operator, will be converted to (1 << $bit). Is used by options, using the number schema... 0, 1, 2...29	* @param string $compare Any custom SQL code after the check (for example "= 0")	*/	function sql_bit_or($column_name, $bit, $compare = '')	{		if (method_exists($this, '_sql_bit_or'))		{			return $this->_sql_bit_or($column_name, $bit, $compare);		}		return $column_name . ' | ' . (1 << $bit) . (($compare) ? ' ' . $compare : '');	}	/**	* Run more than one insert statement.	*	* @param string $table table name to run the statements on	* @param array &$sql_ary multi-dimensional array holding the statement data.	*	* @return bool false if no statements were executed.	* @access public	*/	function sql_multi_insert($table, &$sql_ary)	{		if (!sizeof($sql_ary))		{			return false;		}		if ($this->multi_insert)		{			$ary = array();			foreach ($sql_ary as $id => $_sql_ary)			{				// If by accident the sql array is only one-dimensional we build a normal insert statement				if (!is_array($_sql_ary))				{					return $this->sql_query('INSERT INTO ' . $table . ' ' . $this->sql_build_array('INSERT', $sql_ary));				}				$values = array();				foreach ($_sql_ary as $key => $var)				{					$values[] = $this->_sql_validate_value($var);				}				$ary[] = '(' . implode(', ', $values) . ')';			}			return $this->sql_query('INSERT INTO ' . $table . ' ' . ' (' . implode(', ', array_keys($sql_ary[0])) . ') VALUES ' . implode(', ', $ary));		}		else		{			foreach ($sql_ary as $ary)			{				if (!is_array($ary))				{					return false;				}				$result = $this->sql_query('INSERT INTO ' . $table . ' ' . $this->sql_build_array('INSERT', $ary));				if (!$result)				{					return false;				}			}		}		return true;	}	/**	* Function for validating values	* @access private	*/	function _sql_validate_value($var)	{		if (is_null($var))		{			return 'NULL';		}		else if (is_string($var))		{			return "'" . $this->sql_escape($var) . "'";		}		else		{			return (is_bool($var)) ? intval($var) : $var;		}	}	/**	* Build sql statement from array for select and select distinct statements	*	* Possible query values: SELECT, SELECT_DISTINCT	*/	function sql_build_query($query, $array)	{		$sql = '';		switch ($query)		{			case 'SELECT':			case 'SELECT_DISTINCT';				$sql = str_replace('_', ' ', $query) . ' ' . $array['SELECT'] . ' FROM ';				// Build table array. We also build an alias array for later checks.				$table_array = $aliases = array();				$used_multi_alias = false;				foreach ($array['FROM'] as $table_name => $alias)				{					if (is_array($alias))					{						$used_multi_alias = true;						foreach ($alias as $multi_alias)						{							$table_array[] = $table_name . ' ' . $multi_alias;							$aliases[] = $multi_alias;						}					}					else					{						$table_array[] = $table_name . ' ' . $alias;						$aliases[] = $alias;					}				}				// We run the following code to determine if we need to re-order the table array. ;)				// The reason for this is that for multi-aliased tables (two equal tables) in the FROM statement the last table need to match the first comparison.				// DBMS who rely on this: Oracle, PostgreSQL and MSSQL. For all other DBMS it makes absolutely no difference in which order the table is.				if (!empty($array['LEFT_JOIN']) && sizeof($array['FROM']) > 1 && $used_multi_alias !== false)				{					// Take first LEFT JOIN					$join = current($array['LEFT_JOIN']);					// Determine the table used there (even if there are more than one used, we only want to have one					preg_match('/(' . implode('|', $aliases) . ')\.[^\s]+/U', str_replace(array('(', ')', 'AND', 'OR', ' '), '', $join['ON']), $matches);					// If there is a first join match, we need to make sure the table order is correct					if (!empty($matches[1]))					{						$first_join_match = trim($matches[1]);						$table_array = $last = array();						foreach ($array['FROM'] as $table_name => $alias)						{							if (is_array($alias))							{								foreach ($alias as $multi_alias)								{									($multi_alias === $first_join_match) ? $last[] = $table_name . ' ' . $multi_alias : $table_array[] = $table_name . ' ' . $multi_alias;								}							}							else							{								($alias === $first_join_match) ? $last[] = $table_name . ' ' . $alias : $table_array[] = $table_name . ' ' . $alias;							}						}						$table_array = array_merge($table_array, $last);					}				}				$sql .= $this->_sql_custom_build('FROM', implode(' CROSS JOIN ', $table_array));				if (!empty($array['LEFT_JOIN']))				{					foreach ($array['LEFT_JOIN'] as $join)					{						$sql .= ' LEFT JOIN ' . key($join['FROM']) . ' ' . current($join['FROM']) . ' ON (' . $join['ON'] . ')';					}				}				if (!empty($array['WHERE']))				{					$sql .= ' WHERE ' . $this->_sql_custom_build('WHERE', $array['WHERE']);				}				if (!empty($array['GROUP_BY']))				{					$sql .= ' GROUP BY ' . $array['GROUP_BY'];				}				if (!empty($array['ORDER_BY']))				{					$sql .= ' ORDER BY ' . $array['ORDER_BY'];				}			break;		}		return $sql;	}	/**	* display sql error page	*/	function sql_error($sql = '')	{		global $auth, $user, $config;		// Set var to retrieve errored status		$this->sql_error_triggered = true;		$this->sql_error_sql = $sql;		$this->sql_error_returned = $this->_sql_error();		if (!$this->return_on_error)		{			$message = 'SQL ERROR [ ' . $this->sql_layer . ' ]<br /><br />' . $this->sql_error_returned['message'] . ' [' . $this->sql_error_returned['code'] . ']';			// Show complete SQL error and path to administrators only			// Additionally show complete error on installation or if extended debug mode is enabled			// The DEBUG_EXTRA constant is for development only!			if ((isset($auth) && $auth->acl_get('a_')) || defined('IN_INSTALL') || defined('DEBUG_EXTRA'))			{				// Print out a nice backtrace...				$backtrace = get_backtrace();				$message .= ($sql) ? '<br /><br />SQL<br /><br />' . htmlspecialchars($sql) : '';				$message .= ($backtrace) ? '<br /><br />BACKTRACE<br />' . $backtrace : '';				$message .= '<br />';			}			else			{				// If error occurs in initiating the session we need to use a pre-defined language string				// This could happen if the connection could not be established for example (then we are not able to grab the default language)				if (!isset($user->lang['SQL_ERROR_OCCURRED']))				{					$message .= '<br /><br />An sql error occurred while fetching this page. Please contact an administrator if this problem persists.';				}				else				{					if (!empty($config['board_contact']))					{						$message .= '<br /><br />' . sprintf($user->lang['SQL_ERROR_OCCURRED'], '<a href="mailto:' . htmlspecialchars($config['board_contact']) . '">', '</a>');					}					else					{						$message .= '<br /><br />' . sprintf($user->lang['SQL_ERROR_OCCURRED'], '', '');					}				}			}			if ($this->transaction)			{				$this->sql_transaction('rollback');			}			if (strlen($message) > 1024)			{				// We need to define $msg_long_text here to circumvent text stripping.				global $msg_long_text;				$msg_long_text = $message;				trigger_error(false, E_USER_ERROR);			}			trigger_error($message, E_USER_ERROR);		}		if ($this->transaction)		{			$this->sql_transaction('rollback');		}		return $this->sql_error_returned;	}	/**	* Explain queries	*/	function sql_report($mode, $query = '')	{		global $cache, $starttime, $phpbb_root_path, $user;		if (empty($_REQUEST['explain']))		{			return false;		}		if (!$query && $this->query_hold != '')		{			$query = $this->query_hold;		}		switch ($mode)		{			case 'display':				if (!empty($cache))				{					$cache->unload();				}				$this->sql_close();				$mtime = explode(' ', microtime());				$totaltime = $mtime[0] + $mtime[1] - $starttime;				echo '<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">					<html xmlns="http://www.w3.org/1999/xhtml" dir="ltr">					<head>						<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1" />						<meta http-equiv="Content-Style-Type" content="text/css" />						<meta http-equiv="imagetoolbar" content="no" />						<title>SQL Report</title>						<link href="' . $phpbb_root_path . 'adm/style/admin.css" rel="stylesheet" type="text/css" media="screen" />					</head>					<body id="errorpage">					<div id="wrap">						<div id="page-header">							<a href="' . build_url('explain') . '">Return to previous page</a>						</div>						<div id="page-body">							<div id="acp">							<div class="panel">								<span class="corners-top"><span></span></span>								<div id="content">									<h1>SQL Report</h1>									<br />									<p><b>Page generated in ' . round($totaltime, 4) . " seconds with {$this->num_queries['normal']} queries" . (($this->num_queries['cached']) ? " + {$this->num_queries['cached']} " . (($this->num_queries['cached'] == 1) ? 'query' : 'queries') . ' returning data from cache' : '') . '</b></p>									<p>Time spent on ' . $this->sql_layer . ' queries: <b>' . round($this->sql_time, 5) . 's</b> | Time spent on PHP: <b>' . round($totaltime - $this->sql_time, 5) . 's</b></p>									<br /><br />									' . $this->sql_report . '								</div>								<span class="corners-bottom"><span></span></span>							</div>							</div>						</div>						<div id="page-footer">							Powered by <a href="http://www.phpbb.com/">phpBB</a>&reg; Forum Software &copy; phpBB Group						</div>					</div>					</body>					</html>';				exit_handler();			break;			case 'stop':				$endtime = explode(' ', microtime());				$endtime = $endtime[0] + $endtime[1];				$this->sql_report .= '					<table cellspacing="1">					<thead>					<tr>						<th>Query #' . $this->num_queries['total'] . '</th>					</tr>					</thead>					<tbody>					<tr>						<td class="row3"><textarea style="font-family:\'Courier New\',monospace;width:99%" rows="5" cols="10">' . preg_replace('/\t(AND|OR)(\W)/', "\$1\$2", htmlspecialchars(preg_replace('/[\s]*[\n\r\t]+[\n\r\s\t]*/', "\n", $query))) . '</textarea></td>					</tr>					</tbody>					</table>					' . $this->html_hold . '					<p style="text-align: center;">				';				if ($this->query_result)				{					if (preg_match('/^(UPDATE|DELETE|REPLACE)/', $query))					{						$this->sql_report .= 'Affected rows: <b>' . $this->sql_affectedrows($this->query_result) . '</b> | ';					}					$this->sql_report .= 'Before: ' . sprintf('%.5f', $this->curtime - $starttime) . 's | After: ' . sprintf('%.5f', $endtime - $starttime) . 's | Elapsed: <b>' . sprintf('%.5f', $endtime - $this->curtime) . 's</b>';				}				else				{					$error = $this->sql_error();					$this->sql_report .= '<b style="color: red">FAILED</b> - ' . $this->sql_layer . ' Error ' . $error['code'] . ': ' . htmlspecialchars($error['message']);				}				$this->sql_report .= '</p><br /><br />';				$this->sql_time += $endtime - $this->curtime;			break;			case 'start':				$this->query_hold = $query;				$this->html_hold = '';				$this->_sql_report($mode, $query);				$this->curtime = explode(' ', microtime());				$this->curtime = $this->curtime[0] + $this->curtime[1];			break;			case 'add_select_row':				$html_table = func_get_arg(2);				$row = func_get_arg(3);				if (!$html_table && sizeof($row))				{					$html_table = true;					$this->html_hold .= '<table cellspacing="1"><tr>';					foreach (array_keys($row) as $val)					{						$this->html_hold .= '<th>' . (($val) ? ucwords(str_replace('_', ' ', $val)) : '&nbsp;') . '</th>';					}					$this->html_hold .= '</tr>';				}				$this->html_hold .= '<tr>';				$class = 'row1';				foreach (array_values($row) as $val)				{					$class = ($class == 'row1') ? 'row2' : 'row1';					$this->html_hold .= '<td class="' . $class . '">' . (($val) ? $val : '&nbsp;') . '</td>';				}				$this->html_hold .= '</tr>';				return $html_table;			break;			case 'fromcache':				$this->_sql_report($mode, $query);			break;			case 'record_fromcache':				$endtime = func_get_arg(2);				$splittime = func_get_arg(3);				$time_cache = $endtime - $this->curtime;				$time_db = $splittime - $endtime;				$color = ($time_db > $time_cache) ? 'green' : 'red';				$this->sql_report .= '<table cellspacing="1"><thead><tr><th>Query results obtained from the cache</th></tr></thead><tbody><tr>';				$this->sql_report .= '<td class="row3"><textarea style="font-family:\'Courier New\',monospace;width:99%" rows="5" cols="10">' . preg_replace('/\t(AND|OR)(\W)/', "\$1\$2", htmlspecialchars(preg_replace('/[\s]*[\n\r\t]+[\n\r\s\t]*/', "\n", $query))) . '</textarea></td></tr></tbody></table>';				$this->sql_report .= '<p style="text-align: center;">';				$this->sql_report .= 'Before: ' . sprintf('%.5f', $this->curtime - $starttime) . 's | After: ' . sprintf('%.5f', $endtime - $starttime) . 's | Elapsed [cache]: <b style="color: ' . $color . '">' . sprintf('%.5f', ($time_cache)) . 's</b> | Elapsed [db]: <b>' . sprintf('%.5f', $time_db) . 's</b></p><br /><br />';				// Pad the start time to not interfere with page timing				$starttime += $time_db;			break;			default:				$this->_sql_report($mode, $query);			break;		}		return true;	}}/*** This variable holds the class name to use later*/$sql_db = (!empty($dbms)) ? 'dbal_' . basename($dbms) : 'dbal';?>
<?php/**** @package install* @version $Id$* @copyright (c) 2006 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**/define('UPDATES_TO_VERSION', '3.0.10');// Enter any version to update from to test updates. The version within the db will not be updated.define('DEBUG_FROM_VERSION', false);// Which oldest version does this updater support?define('OLDEST_FROM_VERSION', '3.0.0');// Return if we "just include it" to find out for which version the database update is responsible forif (defined('IN_PHPBB') && defined('IN_INSTALL')){	$updates_to_version = UPDATES_TO_VERSION;	$debug_from_version = DEBUG_FROM_VERSION;	$oldest_from_version = OLDEST_FROM_VERSION;	return;}/***/define('IN_PHPBB', true);define('IN_INSTALL', true);$phpbb_root_path = (defined('PHPBB_ROOT_PATH')) ? PHPBB_ROOT_PATH : './../';$phpEx = substr(strrchr(__FILE__, '.'), 1);if (!function_exists('phpbb_require_updated')){	function phpbb_require_updated($path, $optional = false)	{		global $phpbb_root_path;		$new_path = $phpbb_root_path . 'install/update/new/' . $path;		$old_path = $phpbb_root_path . $path;		if (file_exists($new_path))		{			require($new_path);		}		else if (!$optional || file_exists($old_path))		{			require($old_path);		}	}}phpbb_require_updated('includes/startup.' . $phpEx);$updates_to_version = UPDATES_TO_VERSION;$debug_from_version = DEBUG_FROM_VERSION;$oldest_from_version = OLDEST_FROM_VERSION;error_reporting(E_ALL);@set_time_limit(0);// Include essential scriptsinclude($phpbb_root_path . 'config.' . $phpEx);if (!defined('PHPBB_INSTALLED') || empty($dbms) || empty($acm_type)){	die("Please read: <a href='../docs/INSTALL.html'>INSTALL.html</a> before attempting to update.");}// Load Extensionsif (!empty($load_extensions) && function_exists('dl')){	$load_extensions = explode(',', $load_extensions);	foreach ($load_extensions as $extension)	{		@dl(trim($extension));	}}// Include filesrequire($phpbb_root_path . 'includes/acm/acm_' . $acm_type . '.' . $phpEx);require($phpbb_root_path . 'includes/cache.' . $phpEx);require($phpbb_root_path . 'includes/template.' . $phpEx);require($phpbb_root_path . 'includes/session.' . $phpEx);require($phpbb_root_path . 'includes/auth.' . $phpEx);require($phpbb_root_path . 'includes/functions.' . $phpEx);phpbb_require_updated('includes/functions_content.' . $phpEx, true);require($phpbb_root_path . 'includes/functions_admin.' . $phpEx);require($phpbb_root_path . 'includes/constants.' . $phpEx);require($phpbb_root_path . 'includes/db/' . $dbms . '.' . $phpEx);require($phpbb_root_path . 'includes/utf/utf_tools.' . $phpEx);phpbb_require_updated('includes/db/db_tools.' . $phpEx);// new table constants are separately defined here in case the updater is run// before the files are updatedif (!defined('LOGIN_ATTEMPT_TABLE')){	define('LOGIN_ATTEMPT_TABLE', $table_prefix . 'login_attempts');}$user = new user();$cache = new cache();$db = new $sql_db();// Add own hook handler, if present. :oif (file_exists($phpbb_root_path . 'includes/hooks/index.' . $phpEx)){	require($phpbb_root_path . 'includes/hooks/index.' . $phpEx);	$phpbb_hook = new phpbb_hook(array('exit_handler', 'phpbb_user_session_handler', 'append_sid', array('template', 'display')));	foreach ($cache->obtain_hooks() as $hook)	{		@include($phpbb_root_path . 'includes/hooks/' . $hook . '.' . $phpEx);	}}else{	$phpbb_hook = false;}// Connect to DB$db->sql_connect($dbhost, $dbuser, $dbpasswd, $dbname, $dbport, false, false);// We do not need this any longer, unset for safety purposesunset($dbpasswd);$user->ip = (!empty($_SERVER['REMOTE_ADDR'])) ? htmlspecialchars($_SERVER['REMOTE_ADDR']) : '';$user->ip = (stripos($user->ip, '::ffff:') === 0) ? substr($user->ip, 7) : $user->ip;$sql = "SELECT config_value	FROM " . CONFIG_TABLE . "	WHERE config_name = 'default_lang'";$result = $db->sql_query($sql);$row = $db->sql_fetchrow($result);$db->sql_freeresult($result);$language = basename(request_var('language', ''));if (!$language){	$language = $row['config_value'];}if (!file_exists($phpbb_root_path . 'language/' . $language)){	die('No language found!');}// And finally, load the relevant language filesinclude($phpbb_root_path . 'language/' . $language . '/common.' . $phpEx);include($phpbb_root_path . 'language/' . $language . '/acp/common.' . $phpEx);include($phpbb_root_path . 'language/' . $language . '/install.' . $phpEx);// Set PHP error handler to ours//set_error_handler('msg_handler');// Define some variables for the database update$inline_update = (request_var('type', 0)) ? true : false;// To let set_config() calls succeed, we need to make the config array available globally$config = array();$sql = 'SELECT *	FROM ' . CONFIG_TABLE;$result = $db->sql_query($sql);while ($row = $db->sql_fetchrow($result)){	$config[$row['config_name']] = $row['config_value'];}$db->sql_freeresult($result);// phpbb_db_tools will be taken from new files (under install/update/new)// if possible, falling back to the board's copy.$db_tools = new phpbb_db_tools($db, true);$database_update_info = database_update_info();$error_ary = array();$errored = false;header('Content-type: text/html; charset=UTF-8');?><!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd"><html xmlns="http://www.w3.org/1999/xhtml" dir="<?php echo $lang['DIRECTION']; ?>" lang="<?php echo $lang['USER_LANG']; ?>" xml:lang="<?php echo $lang['USER_LANG']; ?>"><head><meta http-equiv="content-type" content="text/html; charset=UTF-8" /><meta http-equiv="content-language" content="<?php echo $lang['USER_LANG']; ?>" /><meta http-equiv="content-style-type" content="text/css" /><meta http-equiv="imagetoolbar" content="no" /><title><?php echo $lang['UPDATING_TO_LATEST_STABLE']; ?></title><link href="../adm/style/admin.css" rel="stylesheet" type="text/css" media="screen" /></head><body><div id="wrap">	<div id="page-header">&nbsp;</div>	<div id="page-body">		<div id="acp">		<div class="panel">			<span class="corners-top"><span></span></span>				<div id="content">					<div id="main" class="install-body">	<h1><?php echo $lang['UPDATING_TO_LATEST_STABLE']; ?></h1>	<br />	<p><?php echo $lang['DATABASE_TYPE']; ?> :: <strong><?php echo $db->sql_layer; ?></strong><br /><?phpif ($debug_from_version !== false){	$config['version'] = $debug_from_version;}echo $lang['PREVIOUS_VERSION'] . ' :: <strong>' . $config['version'] . '</strong><br />';echo $lang['UPDATED_VERSION'] . ' :: <strong>' . $updates_to_version . '</strong></p>';$current_version = str_replace('rc', 'RC', strtolower($config['version']));$latest_version = str_replace('rc', 'RC', strtolower($updates_to_version));$orig_version = $config['version'];// Fill DB versionif (empty($config['dbms_version'])){	set_config('dbms_version', $db->sql_server_info(true));}// Firebird update from Firebird 2.0 to 2.1+ required?if ($db->sql_layer == 'firebird'){	// We do not trust any PHP5 function enabled, we will simply test for a function new in 2.1	$db->sql_return_on_error(true);	$sql = 'SELECT 1 FROM RDB$DATABASE		WHERE BIN_AND(10, 1) = 0';	$result = $db->sql_query($sql);	if (!$result || $db->sql_error_triggered)	{		echo '<br /><br />';		echo '<h1>' . $lang['ERROR'] . '</h1><br />';		echo '<p>' . $lang['FIREBIRD_DBMS_UPDATE_REQUIRED'] . '</p>';		_print_footer();		exit_handler();		exit;	}	$db->sql_freeresult($result);	$db->sql_return_on_error(false);}// MySQL update from MySQL 3.x/4.x to > 4.1.x required?if ($db->sql_layer == 'mysql' || $db->sql_layer == 'mysql4' || $db->sql_layer == 'mysqli'){	// Verify by fetching column... if the column type matches the new type we update dbms_version...	$sql = "SHOW COLUMNS FROM " . CONFIG_TABLE;	$result = $db->sql_query($sql);	$column_type = '';	while ($row = $db->sql_fetchrow($result))	{		$field = strtolower($row['Field']);		if ($field == 'config_value')		{			$column_type = strtolower($row['Type']);			break;		}	}	$db->sql_freeresult($result);	// If column type is blob, but mysql version says we are on > 4.1.3, then the schema needs an update	if (strpos($column_type, 'blob') !== false && version_compare($db->sql_server_info(true), '4.1.3', '>='))	{		echo '<br /><br />';		echo '<h1>' . $lang['ERROR'] . '</h1><br />';		echo '<p>' . sprintf($lang['MYSQL_SCHEMA_UPDATE_REQUIRED'], $config['dbms_version'], $db->sql_server_info(true)) . '</p>';		_print_footer();		exit_handler();		exit;	}}// Now check if the user wants to update from a version we no longer support updates fromif (version_compare($current_version, $oldest_from_version, '<')){	echo '<br /><br /><h1>' . $lang['ERROR'] . '</h1><br />';	echo '<p>' . sprintf($lang['DB_UPDATE_NOT_SUPPORTED'], $oldest_from_version, $current_version) . '</p>';	_print_footer();	exit_handler();	exit;}// If the latest version and the current version are 'unequal', we will update the version_update_from, else we do not update anything.if ($inline_update){	if ($current_version !== $latest_version)	{		set_config('version_update_from', $orig_version);	}}else{	// If not called from the update script, we will actually remove the traces	$db->sql_query('DELETE FROM ' . CONFIG_TABLE . " WHERE config_name = 'version_update_from'");}// Schema updates?>	<br /><br />	<h1><?php echo $lang['UPDATE_DATABASE_SCHEMA']; ?></h1>	<br />	<p><?php echo $lang['PROGRESS']; ?> :: <strong><?phpflush();// We go through the schema changes from the lowest to the highest version// We try to also include versions 'in-between'...$no_updates = true;$versions = array_keys($database_update_info);for ($i = 0; $i < sizeof($versions); $i++){	$version = $versions[$i];	$schema_changes = $database_update_info[$version];	$next_version = (isset($versions[$i + 1])) ? $versions[$i + 1] : $updates_to_version;	// If the installed version to be updated to is < than the current version, and if the current version is >= as the version to be updated to next, we will skip the process	if (version_compare($version, $current_version, '<') && version_compare($current_version, $next_version, '>='))	{		continue;	}	if (!sizeof($schema_changes))	{		continue;	}	$no_updates = false;	// We run one index after the other... to be consistent with schema changes...	foreach ($schema_changes as $key => $changes)	{		$statements = $db_tools->perform_schema_changes(array($key => $changes));		foreach ($statements as $sql)		{			_sql($sql, $errored, $error_ary);		}	}}_write_result($no_updates, $errored, $error_ary);// Data updates$error_ary = array();$errored = $no_updates = false;?><br /><br /><h1><?php echo $lang['UPDATING_DATA']; ?></h1><br /><p><?php echo $lang['PROGRESS']; ?> :: <strong><?phpflush();$no_updates = true;$versions = array_keys($database_update_info);// some code magicfor ($i = 0; $i < sizeof($versions); $i++){	$version = $versions[$i];	$next_version = (isset($versions[$i + 1])) ? $versions[$i + 1] : $updates_to_version;	// If the installed version to be updated to is < than the current version, and if the current version is >= as the version to be updated to next, we will skip the process	if (version_compare($version, $current_version, '<') && version_compare($current_version, $next_version, '>='))	{		continue;	}	change_database_data($no_updates, $version);}_write_result($no_updates, $errored, $error_ary);$error_ary = array();$errored = $no_updates = false;?><br /><br /><h1><?php echo $lang['UPDATE_VERSION_OPTIMIZE']; ?></h1><br /><p><?php echo $lang['PROGRESS']; ?> :: <strong><?phpflush();if ($debug_from_version === false){	// update the version	$sql = "UPDATE " . CONFIG_TABLE . "		SET config_value = '$updates_to_version'		WHERE config_name = 'version'";	_sql($sql, $errored, $error_ary);}// Reset permissions$sql = 'UPDATE ' . USERS_TABLE . "	SET user_permissions = '',		user_perm_from = 0";_sql($sql, $errored, $error_ary);// Update the dbms version if everything is ok...set_config('dbms_version', $db->sql_server_info(true));/* Optimize/vacuum analyze the tables where appropriate// this should be done for each version in future along with// the version number updateswitch ($db->sql_layer){	case 'mysql':	case 'mysqli':	case 'mysql4':		$sql = 'OPTIMIZE TABLE ' . $table_prefix . 'auth_access, ' . $table_prefix . 'banlist, ' . $table_prefix . 'categories, ' . $table_prefix . 'config, ' . $table_prefix . 'disallow, ' . $table_prefix . 'forum_prune, ' . $table_prefix . 'forums, ' . $table_prefix . 'groups, ' . $table_prefix . 'posts, ' . $table_prefix . 'posts_text, ' . $table_prefix . 'privmsgs, ' . $table_prefix . 'privmsgs_text, ' . $table_prefix . 'ranks, ' . $table_prefix . 'search_results, ' . $table_prefix . 'search_wordlist, ' . $table_prefix . 'search_wordmatch, ' . $table_prefix . 'sessions_keys' . $table_prefix . 'smilies, ' . $table_prefix . 'themes, ' . $table_prefix . 'themes_name, ' . $table_prefix . 'topics, ' . $table_prefix . 'topics_watch, ' . $table_prefix . 'user_group, ' . $table_prefix . 'users, ' . $table_prefix . 'vote_desc, ' . $table_prefix . 'vote_results, ' . $table_prefix . 'vote_voters, ' . $table_prefix . 'words';		_sql($sql, $errored, $error_ary);	break;	case 'postgresql':		_sql("VACUUM ANALYZE", $errored, $error_ary);	break;}*/_write_result($no_updates, $errored, $error_ary);?><br /><h1><?php echo $lang['UPDATE_COMPLETED']; ?></h1><br /><?phpif (!$inline_update){?>	<p style="color:red"><?php echo $lang['UPDATE_FILES_NOTICE']; ?></p>	<p><?php echo $lang['COMPLETE_LOGIN_TO_BOARD']; ?></p><?php}else{?>	<p><?php echo ((isset($lang['INLINE_UPDATE_SUCCESSFUL'])) ? $lang['INLINE_UPDATE_SUCCESSFUL'] : 'The database update was successful. Now you need to continue the update process.'); ?></p>	<p><a href="<?php echo append_sid("{$phpbb_root_path}install/index.{$phpEx}", "mode=update&amp;sub=file_check&amp;language=$language"); ?>" class="button1"><?php echo (isset($lang['CONTINUE_UPDATE_NOW'])) ? $lang['CONTINUE_UPDATE_NOW'] : 'Continue the update process now'; ?></a></p><?php}// Add database update to logadd_log('admin', 'LOG_UPDATE_DATABASE', $orig_version, $updates_to_version);// Now we purge the session table as well as all cache files$cache->purge();_print_footer();garbage_collection();if (function_exists('exit_handler')){	exit_handler();}/*** Print out footer*/function _print_footer(){	echo <<<EOF					</div>				</div>			<span class="corners-bottom"><span></span></span>		</div>		</div>	</div>	<div id="page-footer">		Powered by <a href="http://www.phpbb.com/">phpBB</a>&reg; Forum Software &copy; phpBB Group	</div></div></body></html>EOF;}/*** Function for triggering an sql statement*/function _sql($sql, &$errored, &$error_ary, $echo_dot = true){	global $db;	if (defined('DEBUG_EXTRA'))	{		echo "<br />\n{$sql}\n<br />";	}	$db->sql_return_on_error(true);	if ($sql === 'begin')	{		$result = $db->sql_transaction('begin');	}	else if ($sql === 'commit')	{		$result = $db->sql_transaction('commit');	}	else	{		$result = $db->sql_query($sql);		if ($db->sql_error_triggered)		{			$errored = true;			$error_ary['sql'][] = $db->sql_error_sql;			$error_ary['error_code'][] = $db->sql_error_returned;		}	}	$db->sql_return_on_error(false);	if ($echo_dot)	{		echo ". \n";		flush();	}	return $result;}function _write_result($no_updates, $errored, $error_ary){	global $lang;	if ($no_updates)	{		echo ' ' . $lang['NO_UPDATES_REQUIRED'] . '</strong></p>';	}	else	{		echo ' <span class="success">' . $lang['DONE'] . '</span></strong><br />' . $lang['RESULT'] . ' :: ';		if ($errored)		{			echo ' <strong>' . $lang['SOME_QUERIES_FAILED'] . '</strong> <ul>';			for ($i = 0; $i < sizeof($error_ary['sql']); $i++)			{				echo '<li>' . $lang['ERROR'] . ' :: <strong>' . htmlspecialchars($error_ary['error_code'][$i]['message']) . '</strong><br />';				echo $lang['SQL'] . ' :: <strong>' . htmlspecialchars($error_ary['sql'][$i]) . '</strong><br /><br /></li>';			}			echo '</ul> <br /><br />' . $lang['SQL_FAILURE_EXPLAIN'] . '</p>';		}		else		{			echo '<strong>' . $lang['NO_ERRORS'] . '</strong></p>';		}	}}function _add_modules($modules_to_install){	global $phpbb_root_path, $phpEx, $db;	include_once($phpbb_root_path . 'includes/acp/acp_modules.' . $phpEx);	$_module = new acp_modules();	foreach ($modules_to_install as $module_mode => $module_data)	{		$_module->module_class = $module_data['class'];		// Determine parent id first		$sql = 'SELECT module_id			FROM ' . MODULES_TABLE . "			WHERE module_class = '" . $db->sql_escape($module_data['class']) . "'				AND module_langname = '" . $db->sql_escape($module_data['cat']) . "'				AND module_mode = ''				AND module_basename = ''";		$result = $db->sql_query($sql);		// There may be more than one categories with the same name		$categories = array();		while ($row = $db->sql_fetchrow($result))		{			$categories[] = (int) $row['module_id'];		}		$db->sql_freeresult($result);		if (!sizeof($categories))		{			continue;		}		// Add the module to all categories found		foreach ($categories as $parent_id)		{			// Check if the module already exists			$sql = 'SELECT *				FROM ' . MODULES_TABLE . "				WHERE module_basename = '" . $db->sql_escape($module_data['base']) . "'					AND module_class = '" . $db->sql_escape($module_data['class']) . "'					AND module_langname = '" . $db->sql_escape($module_data['title']) . "'					AND module_mode = '" . $db->sql_escape($module_mode) . "'					AND module_auth = '" . $db->sql_escape($module_data['auth']) . "'					AND parent_id = {$parent_id}";			$result = $db->sql_query($sql);			$row = $db->sql_fetchrow($result);			$db->sql_freeresult($result);			// If it exists, we simply continue with the next category			if ($row)			{				continue;			}			// Build the module sql row			$module_row = array(				'module_basename'	=> $module_data['base'],				'module_enabled'	=> (isset($module_data['enabled'])) ? (int) $module_data['enabled'] : 1,				'module_display'	=> (isset($module_data['display'])) ? (int) $module_data['display'] : 1,				'parent_id'			=> $parent_id,				'module_class'		=> $module_data['class'],				'module_langname'	=> $module_data['title'],				'module_mode'		=> $module_mode,				'module_auth'		=> $module_data['auth'],			);			$_module->update_module_data($module_row, true);			// Ok, do we need to re-order the module, move it up or down?			if (!isset($module_data['after']))			{				continue;			}			$after_mode = $module_data['after'][0];			$after_langname = $module_data['after'][1];			// First of all, get the module id for the module this one has to be placed after			$sql = 'SELECT left_id				FROM ' . MODULES_TABLE . "				WHERE module_class = '" . $db->sql_escape($module_data['class']) . "'					AND module_basename = '" . $db->sql_escape($module_data['base']) . "'					AND module_langname = '" . $db->sql_escape($after_langname) . "'					AND module_mode = '" . $db->sql_escape($after_mode) . "'					AND parent_id = '{$parent_id}'";			$result = $db->sql_query($sql);			$first_left_id = (int) $db->sql_fetchfield('left_id');			$db->sql_freeresult($result);			if (!$first_left_id)			{				continue;			}			// Ok, count the number of modules between $after_mode and the added module			$sql = 'SELECT COUNT(module_id) as num_modules				FROM ' . MODULES_TABLE . "				WHERE module_class = '" . $db->sql_escape($module_data['class']) . "'					AND parent_id = {$parent_id}					AND left_id BETWEEN {$first_left_id} AND {$module_row['left_id']}";			$result = $db->sql_query($sql);			$steps = (int) $db->sql_fetchfield('num_modules');			$db->sql_freeresult($result);			// We need to substract 2			$steps -= 2;			if ($steps <= 0)			{				continue;			}			// Ok, move module up $num_modules times. ;)			$_module->move_module_by($module_row, 'move_up', $steps);		}	}	$_module->remove_cache_file();}/***************************************************************************** ADD YOUR DATABASE SCHEMA CHANGES HERE										******************************************************************************/function database_update_info(){	return array(		// Changes from 3.0.0 to the next version		'3.0.0'			=> array(			// Add the following columns			'add_columns'		=> array(				FORUMS_TABLE			=> array(					'display_subforum_list'		=> array('BOOL', 1),				),				SESSIONS_TABLE			=> array(					'session_forum_id'		=> array('UINT', 0),				),			),			'drop_keys'		=> array(				GROUPS_TABLE			=> array('group_legend'),			),			'add_index'		=> array(				SESSIONS_TABLE			=> array(					'session_forum_id'		=> array('session_forum_id'),				),				GROUPS_TABLE			=> array(					'group_legend_name'		=> array('group_legend', 'group_name'),				),			),		),		// No changes from 3.0.1-RC1 to 3.0.1		'3.0.1-RC1'		=> array(),		// No changes from 3.0.1 to 3.0.2-RC1		'3.0.1'			=> array(),		// Changes from 3.0.2-RC1 to 3.0.2-RC2		'3.0.2-RC1'		=> array(			'change_columns'	=> array(				DRAFTS_TABLE			=> array(					'draft_subject'		=> array('STEXT_UNI', ''),				),				FORUMS_TABLE	=> array(					'forum_last_post_subject' => array('STEXT_UNI', ''),				),				POSTS_TABLE		=> array(					'post_subject'			=> array('STEXT_UNI', '', 'true_sort'),				),				PRIVMSGS_TABLE	=> array(					'message_subject'		=> array('STEXT_UNI', ''),				),				TOPICS_TABLE	=> array(					'topic_title'				=> array('STEXT_UNI', '', 'true_sort'),					'topic_last_post_subject'	=> array('STEXT_UNI', ''),				),			),			'drop_keys'		=> array(				SESSIONS_TABLE			=> array('session_forum_id'),			),			'add_index'		=> array(				SESSIONS_TABLE			=> array(					'session_fid'		=> array('session_forum_id'),				),			),		),		// No changes from 3.0.2-RC2 to 3.0.2		'3.0.2-RC2'		=> array(),		// Changes from 3.0.2 to 3.0.3-RC1		'3.0.2'			=> array(			// Add the following columns			'add_columns'		=> array(				STYLES_TEMPLATE_TABLE			=> array(					'template_inherits_id'		=> array('UINT:4', 0),					'template_inherit_path'		=> array('VCHAR', ''),				),				GROUPS_TABLE					=> array(					'group_max_recipients'		=> array('UINT', 0),				),			),		),		// No changes from 3.0.3-RC1 to 3.0.3		'3.0.3-RC1'		=> array(),		// Changes from 3.0.3 to 3.0.4-RC1		'3.0.3'			=> array(			'add_columns'		=> array(				PROFILE_FIELDS_TABLE			=> array(					'field_show_profile'		=> array('BOOL', 0),				),			),			'change_columns'	=> array(				STYLES_TABLE				=> array(					'style_id'				=> array('UINT', NULL, 'auto_increment'),					'template_id'			=> array('UINT', 0),					'theme_id'				=> array('UINT', 0),					'imageset_id'			=> array('UINT', 0),				),				STYLES_IMAGESET_TABLE		=> array(					'imageset_id'				=> array('UINT', NULL, 'auto_increment'),				),				STYLES_IMAGESET_DATA_TABLE	=> array(					'image_id'				=> array('UINT', NULL, 'auto_increment'),					'imageset_id'			=> array('UINT', 0),				),				STYLES_THEME_TABLE			=> array(					'theme_id'				=> array('UINT', NULL, 'auto_increment'),				),				STYLES_TEMPLATE_TABLE		=> array(					'template_id'			=> array('UINT', NULL, 'auto_increment'),				),				STYLES_TEMPLATE_DATA_TABLE	=> array(					'template_id'			=> array('UINT', 0),				),				FORUMS_TABLE				=> array(					'forum_style'			=> array('UINT', 0),				),				USERS_TABLE					=> array(					'user_style'			=> array('UINT', 0),				),			),		),		// Changes from 3.0.4-RC1 to 3.0.4		'3.0.4-RC1'		=> array(),		// Changes from 3.0.4 to 3.0.5-RC1		'3.0.4'			=> array(			'change_columns'	=> array(				FORUMS_TABLE				=> array(					'forum_style'			=> array('UINT', 0),				),			),		),		// No changes from 3.0.5-RC1 to 3.0.5		'3.0.5-RC1'		=> array(),		// Changes from 3.0.5 to 3.0.6-RC1		'3.0.5'		=> array(			'add_columns'		=> array(				CONFIRM_TABLE			=> array(					'attempts'		=> array('UINT', 0),				),				USERS_TABLE			=> array(					'user_new'			=> array('BOOL', 1),					'user_reminded'		=> array('TINT:4', 0),					'user_reminded_time'=> array('TIMESTAMP', 0),				),				GROUPS_TABLE			=> array(					'group_skip_auth'		=> array('BOOL', 0, 'after' => 'group_founder_manage'),				),				PRIVMSGS_TABLE		=> array(					'message_reported'	=> array('BOOL', 0),				),				REPORTS_TABLE		=> array(					'pm_id'				=> array('UINT', 0),				),				PROFILE_FIELDS_TABLE			=> array(					'field_show_on_vt'		=> array('BOOL', 0),				),				FORUMS_TABLE		=> array(					'forum_options'			=> array('UINT:20', 0),				),			),			'change_columns'		=> array(				USERS_TABLE				=> array(					'user_options'		=> array('UINT:11', 230271),				),			),			'add_index'		=> array(				REPORTS_TABLE		=> array(					'post_id'		=> array('post_id'),					'pm_id'			=> array('pm_id'),				),				POSTS_TABLE			=> array(					'post_username'		=> array('post_username:255'),				),			),		),		// No changes from 3.0.6-RC1 to 3.0.6-RC2		'3.0.6-RC1'		=> array(),		// No changes from 3.0.6-RC2 to 3.0.6-RC3		'3.0.6-RC2'		=> array(),		// No changes from 3.0.6-RC3 to 3.0.6-RC4		'3.0.6-RC3'		=> array(),		// No changes from 3.0.6-RC4 to 3.0.6		'3.0.6-RC4'		=> array(),		// Changes from 3.0.6 to 3.0.7-RC1		'3.0.6'		=> array(			'drop_keys'		=> array(				LOG_TABLE			=> array('log_time'),			),			'add_index'		=> array(				TOPICS_TRACK_TABLE	=> array(					'topic_id'		=> array('topic_id'),				),			),		),		// No changes from 3.0.7-RC1 to 3.0.7-RC2		'3.0.7-RC1'		=> array(),		// No changes from 3.0.7-RC2 to 3.0.7		'3.0.7-RC2'		=> array(),		// No changes from 3.0.7 to 3.0.7-PL1		'3.0.7'		=> array(),		// No changes from 3.0.7-PL1 to 3.0.8-RC1		'3.0.7-PL1'		=> array(),		// No changes from 3.0.8-RC1 to 3.0.8		'3.0.8-RC1'		=> array(),		// Changes from 3.0.8 to 3.0.9-RC1		'3.0.8'			=> array(			'add_tables'		=> array(				LOGIN_ATTEMPT_TABLE	=> array(					'COLUMNS'			=> array(						// this column was removed from the database updater						// after 3.0.9-RC3 was released. It might still exist						// in 3.0.9-RCX installations and has to be dropped in						// 3.0.11 after the db_tools class is capable of properly						// removing a primary key.						// 'attempt_id'			=> array('UINT', NULL, 'auto_increment'),						'attempt_ip'			=> array('VCHAR:40', ''),						'attempt_browser'		=> array('VCHAR:150', ''),						'attempt_forwarded_for'	=> array('VCHAR:255', ''),						'attempt_time'			=> array('TIMESTAMP', 0),						'user_id'				=> array('UINT', 0),						'username'				=> array('VCHAR_UNI:255', 0),						'username_clean'		=> array('VCHAR_CI', 0),					),					//'PRIMARY_KEY'		=> 'attempt_id',					'KEYS'				=> array(						'att_ip'			=> array('INDEX', array('attempt_ip', 'attempt_time')),						'att_for'	=> array('INDEX', array('attempt_forwarded_for', 'attempt_time')),						'att_time'			=> array('INDEX', array('attempt_time')),						'user_id'				=> array('INDEX', 'user_id'),					),				),			),			'change_columns'	=> array(				BBCODES_TABLE	=> array(					'bbcode_id'	=> array('USINT', 0),				),			),		),		// No changes from 3.0.9-RC1 to 3.0.9-RC2		'3.0.9-RC1'		=> array(),		// No changes from 3.0.9-RC2 to 3.0.9-RC3		'3.0.9-RC2'		=> array(),		// No changes from 3.0.9-RC3 to 3.0.9-RC4		'3.0.9-RC3'     => array(),		// No changes from 3.0.9-RC4 to 3.0.9		'3.0.9-RC4'     => array(),		// No changes from 3.0.9 to 3.0.10-RC1		'3.0.9'			=> array(),		// No changes from 3.0.10-RC1 to 3.0.10-RC2		'3.0.10-RC1'	=> array(),		// No changes from 3.0.10-RC2 to 3.0.10-RC3		'3.0.10-RC2'	=> array(),		// No changes from 3.0.10-RC3 to 3.0.10		'3.0.10-RC3'	=> array(),		/** @todo DROP LOGIN_ATTEMPT_TABLE.attempt_id in 3.0.11-RC1 */	);}/***************************************************************************** ADD YOUR DATABASE DATA CHANGES HERE										** REMEMBER: You NEED to enter a schema array above and a data array here,	** even if both or one of them are empty.									******************************************************************************/function change_database_data(&$no_updates, $version){	global $db, $errored, $error_ary, $config, $phpbb_root_path, $phpEx;	switch ($version)	{		case '3.0.0':			$sql = 'UPDATE ' . TOPICS_TABLE . "				SET topic_last_view_time = topic_last_post_time				WHERE topic_last_view_time = 0";			_sql($sql, $errored, $error_ary);			// Update smiley sizes			$smileys = array('icon_e_surprised.gif', 'icon_eek.gif', 'icon_cool.gif', 'icon_lol.gif', 'icon_mad.gif', 'icon_razz.gif', 'icon_redface.gif', 'icon_cry.gif', 'icon_evil.gif', 'icon_twisted.gif', 'icon_rolleyes.gif', 'icon_exclaim.gif', 'icon_question.gif', 'icon_idea.gif', 'icon_arrow.gif', 'icon_neutral.gif', 'icon_mrgreen.gif', 'icon_e_ugeek.gif');			foreach ($smileys as $smiley)			{				if (file_exists($phpbb_root_path . 'images/smilies/' . $smiley))				{					list($width, $height) = getimagesize($phpbb_root_path . 'images/smilies/' . $smiley);					$sql = 'UPDATE ' . SMILIES_TABLE . '						SET smiley_width = ' . $width . ', smiley_height = ' . $height . "						WHERE smiley_url = '" . $db->sql_escape($smiley) . "'";					_sql($sql, $errored, $error_ary);				}			}			$no_updates = false;		break;		// No changes from 3.0.1-RC1 to 3.0.1		case '3.0.1-RC1':		break;		// changes from 3.0.1 to 3.0.2-RC1		case '3.0.1':			set_config('referer_validation', '1');			set_config('check_attachment_content', '1');			set_config('mime_triggers', 'body|head|html|img|plaintext|a href|pre|script|table|title');			$no_updates = false;		break;		// No changes from 3.0.2-RC1 to 3.0.2-RC2		case '3.0.2-RC1':		break;		// No changes from 3.0.2-RC2 to 3.0.2		case '3.0.2-RC2':		break;		// Changes from 3.0.2 to 3.0.3-RC1		case '3.0.2':			set_config('enable_queue_trigger', '0');			set_config('queue_trigger_posts', '3');			set_config('pm_max_recipients', '0');			// Set maximum number of recipients for the registered users, bots, guests group			$sql = 'UPDATE ' . GROUPS_TABLE . ' SET group_max_recipients = 5				WHERE ' . $db->sql_in_set('group_name', array('GUESTS', 'REGISTERED', 'REGISTERED_COPPA', 'BOTS'));			_sql($sql, $errored, $error_ary);			// Not prefilling yet			set_config('dbms_version', '');			// Add new permission u_masspm_group and duplicate settings from u_masspm			include_once($phpbb_root_path . 'includes/acp/auth.' . $phpEx);			$auth_admin = new auth_admin();			// Only add the new permission if it does not already exist			if (empty($auth_admin->acl_options['id']['u_masspm_group']))			{				$auth_admin->acl_add_option(array('global' => array('u_masspm_group')));				// Now the tricky part, filling the permission				$old_id = $auth_admin->acl_options['id']['u_masspm'];				$new_id = $auth_admin->acl_options['id']['u_masspm_group'];				$tables = array(ACL_GROUPS_TABLE, ACL_ROLES_DATA_TABLE, ACL_USERS_TABLE);				foreach ($tables as $table)				{					$sql = 'SELECT *						FROM ' . $table . '						WHERE auth_option_id = ' . $old_id;					$result = _sql($sql, $errored, $error_ary);					$sql_ary = array();					while ($row = $db->sql_fetchrow($result))					{						$row['auth_option_id'] = $new_id;						$sql_ary[] = $row;					}					$db->sql_freeresult($result);					if (sizeof($sql_ary))					{						$db->sql_multi_insert($table, $sql_ary);					}				}				// Remove any old permission entries				$auth_admin->acl_clear_prefetch();			}			/**			* Do not resync post counts here. An admin may do this later from the ACP			$start = 0;			$step = ($config['num_posts']) ? (max((int) ($config['num_posts'] / 5), 20000)) : 20000;			$sql = 'UPDATE ' . USERS_TABLE . ' SET user_posts = 0';			_sql($sql, $errored, $error_ary);			do			{				$sql = 'SELECT COUNT(post_id) AS num_posts, poster_id					FROM ' . POSTS_TABLE . '					WHERE post_id BETWEEN ' . ($start + 1) . ' AND ' . ($start + $step) . '						AND post_postcount = 1 AND post_approved = 1					GROUP BY poster_id';				$result = _sql($sql, $errored, $error_ary);				if ($row = $db->sql_fetchrow($result))				{					do					{						$sql = 'UPDATE ' . USERS_TABLE . " SET user_posts = user_posts + {$row['num_posts']} WHERE user_id = {$row['poster_id']}";						_sql($sql, $errored, $error_ary);					}					while ($row = $db->sql_fetchrow($result));					$start += $step;				}				else				{					$start = 0;				}				$db->sql_freeresult($result);			}			while ($start);			*/			$sql = 'UPDATE ' . MODULES_TABLE . '				SET module_auth = \'acl_a_email && cfg_email_enable\'				WHERE module_class = \'acp\'					AND module_basename = \'email\'';			_sql($sql, $errored, $error_ary);			$no_updates = false;		break;		// Changes from 3.0.3-RC1 to 3.0.3		case '3.0.3-RC1':			if ($db->sql_layer == 'oracle')			{				// log_operation is CLOB - but we can change this later				$sql = 'UPDATE ' . LOG_TABLE . "					SET log_operation = 'LOG_DELETE_TOPIC'					WHERE log_operation LIKE 'LOG_TOPIC_DELETED'";				_sql($sql, $errored, $error_ary);			}			else			{				$sql = 'UPDATE ' . LOG_TABLE . "					SET log_operation = 'LOG_DELETE_TOPIC'					WHERE log_operation = 'LOG_TOPIC_DELETED'";				_sql($sql, $errored, $error_ary);			}			$no_updates = false;		break;		// Changes from 3.0.3 to 3.0.4-RC1		case '3.0.3':			// Update the Custom Profile Fields based on previous settings to the new format			$sql = 'SELECT field_id, field_required, field_show_on_reg, field_hide					FROM ' . PROFILE_FIELDS_TABLE;			$result = _sql($sql, $errored, $error_ary);			while ($row = $db->sql_fetchrow($result))			{				$sql_ary = array(					'field_required'	=> 0,					'field_show_on_reg'	=> 0,					'field_hide'		=> 0,					'field_show_profile'=> 0,				);				if ($row['field_required'])				{					$sql_ary['field_required'] = $sql_ary['field_show_on_reg'] = $sql_ary['field_show_profile'] = 1;				}				else if ($row['field_show_on_reg'])				{					$sql_ary['field_show_on_reg'] = $sql_ary['field_show_profile'] = 1;				}				else if ($row['field_hide'])				{					// Only administrators and moderators can see this CPF, if the view is enabled, they can see it, otherwise just admins in the acp_users module					$sql_ary['field_hide'] = 1;				}				else				{					// equivelant to "none", which is the "Display in user control panel" option					$sql_ary['field_show_profile'] = 1;				}				_sql('UPDATE ' . PROFILE_FIELDS_TABLE . ' SET ' . $db->sql_build_array('UPDATE', $sql_ary) . ' WHERE field_id = ' . $row['field_id'], $errored, $error_ary);			}			$no_updates = false;		break;		// Changes from 3.0.4-RC1 to 3.0.4		case '3.0.4-RC1':		break;		// Changes from 3.0.4 to 3.0.5-RC1		case '3.0.4':			// Captcha config variables			set_config('captcha_gd_wave', 0);			set_config('captcha_gd_3d_noise', 1);			set_config('captcha_gd_fonts', 1);			set_config('confirm_refresh', 1);			// Maximum number of keywords			set_config('max_num_search_keywords', 10);			// Remove static config var and put it back as dynamic variable			$sql = 'UPDATE ' . CONFIG_TABLE . "				SET is_dynamic = 1				WHERE config_name = 'search_indexing_state'";			_sql($sql, $errored, $error_ary);			// Hash old MD5 passwords			$sql = 'SELECT user_id, user_password					FROM ' . USERS_TABLE . '					WHERE user_pass_convert = 1';			$result = _sql($sql, $errored, $error_ary);			while ($row = $db->sql_fetchrow($result))			{				if (strlen($row['user_password']) == 32)				{					$sql_ary = array(						'user_password'	=> phpbb_hash($row['user_password']),					);					_sql('UPDATE ' . USERS_TABLE . ' SET ' . $db->sql_build_array('UPDATE', $sql_ary) . ' WHERE user_id = ' . $row['user_id'], $errored, $error_ary);				}			}			$db->sql_freeresult($result);			// Adjust bot entry			$sql = 'UPDATE ' . BOTS_TABLE . "				SET bot_agent = 'ichiro/'				WHERE bot_agent = 'ichiro/2'";			_sql($sql, $errored, $error_ary);			// Before we are able to add a unique key to auth_option, we need to remove duplicate entries			// We get duplicate entries first			$sql = 'SELECT auth_option				FROM ' . ACL_OPTIONS_TABLE . '				GROUP BY auth_option				HAVING COUNT(*) >= 2';			$result = $db->sql_query($sql);			$auth_options = array();			while ($row = $db->sql_fetchrow($result))			{				$auth_options[] = $row['auth_option'];			}			$db->sql_freeresult($result);			// Remove specific auth options			if (!empty($auth_options))			{				foreach ($auth_options as $option)				{					// Select auth_option_ids... the largest id will be preserved					$sql = 'SELECT auth_option_id						FROM ' . ACL_OPTIONS_TABLE . "						WHERE auth_option = '" . $db->sql_escape($option) . "'						ORDER BY auth_option_id DESC";					// sql_query_limit not possible here, due to bug in postgresql layer					$result = $db->sql_query($sql);					// Skip first row, this is our original auth option we want to preserve					$row = $db->sql_fetchrow($result);					while ($row = $db->sql_fetchrow($result))					{						// Ok, remove this auth option...						_sql('DELETE FROM ' . ACL_OPTIONS_TABLE . ' WHERE auth_option_id = ' . $row['auth_option_id'], $errored, $error_ary);						_sql('DELETE FROM ' . ACL_ROLES_DATA_TABLE . ' WHERE auth_option_id = ' . $row['auth_option_id'], $errored, $error_ary);						_sql('DELETE FROM ' . ACL_GROUPS_TABLE . ' WHERE auth_option_id = ' . $row['auth_option_id'], $errored, $error_ary);						_sql('DELETE FROM ' . ACL_USERS_TABLE . ' WHERE auth_option_id = ' . $row['auth_option_id'], $errored, $error_ary);					}					$db->sql_freeresult($result);				}			}			// Now make auth_option UNIQUE, by dropping the old index and adding a UNIQUE one.			$changes = array(				'drop_keys'			=> array(					ACL_OPTIONS_TABLE		=> array('auth_option'),				),			);			global $db_tools;			$statements = $db_tools->perform_schema_changes($changes);			foreach ($statements as $sql)			{				_sql($sql, $errored, $error_ary);			}			$changes = array(				'add_unique_index'	=> array(					ACL_OPTIONS_TABLE		=> array(						'auth_option'		=> array('auth_option'),					),				),			);			$statements = $db_tools->perform_schema_changes($changes);			foreach ($statements as $sql)			{				_sql($sql, $errored, $error_ary);			}			$no_updates = false;		break;		// No changes from 3.0.5-RC1 to 3.0.5		case '3.0.5-RC1':		break;		// Changes from 3.0.5 to 3.0.6-RC1		case '3.0.5':			// Let's see if the GD Captcha can be enabled... we simply look for what *is* enabled...			if (!empty($config['captcha_gd']) && !isset($config['captcha_plugin']))			{				set_config('captcha_plugin', 'phpbb_captcha_gd');			}			else if (!isset($config['captcha_plugin']))			{				set_config('captcha_plugin', 'phpbb_captcha_nogd');			}			// Entries for the Feed Feature			set_config('feed_enable', '0');			set_config('feed_limit', '10');			set_config('feed_overall_forums', '1');			set_config('feed_overall_forums_limit', '15');			set_config('feed_overall_topics', '0');			set_config('feed_overall_topics_limit', '15');			set_config('feed_forum', '1');			set_config('feed_topic', '1');			set_config('feed_item_statistics', '1');			// Entries for smiley pagination			set_config('smilies_per_page', '50');			// Entry for reporting PMs			set_config('allow_pm_report', '1');			// Install modules			$modules_to_install = array(				'feed'					=> array(					'base'		=> 'board',					'class'		=> 'acp',					'title'		=> 'ACP_FEED_SETTINGS',					'auth'		=> 'acl_a_board',					'cat'		=> 'ACP_BOARD_CONFIGURATION',					'after'		=> array('signature', 'ACP_SIGNATURE_SETTINGS')				),				'warnings'				=> array(					'base'		=> 'users',					'class'		=> 'acp',					'title'		=> 'ACP_USER_WARNINGS',					'auth'		=> 'acl_a_user',					'display'	=> 0,					'cat'		=> 'ACP_CAT_USERS',					'after'		=> array('feedback', 'ACP_USER_FEEDBACK')				),				'send_statistics'		=> array(					'base'		=> 'send_statistics',					'class'		=> 'acp',					'title'		=> 'ACP_SEND_STATISTICS',					'auth'		=> 'acl_a_server',					'cat'		=> 'ACP_SERVER_CONFIGURATION'				),				'setting_forum_copy'	=> array(					'base'		=> 'permissions',					'class'		=> 'acp',					'title'		=> 'ACP_FORUM_PERMISSIONS_COPY',					'auth'		=> 'acl_a_fauth && acl_a_authusers && acl_a_authgroups && acl_a_mauth',					'cat'		=> 'ACP_FORUM_BASED_PERMISSIONS',					'after'		=> array('setting_forum_local', 'ACP_FORUM_PERMISSIONS')				),				'pm_reports'			=> array(					'base'		=> 'pm_reports',					'class'		=> 'mcp',					'title'		=> 'MCP_PM_REPORTS_OPEN',					'auth'		=> 'aclf_m_report',					'cat'		=> 'MCP_REPORTS'				),				'pm_reports_closed'		=> array(					'base'		=> 'pm_reports',					'class'		=> 'mcp',					'title'		=> 'MCP_PM_REPORTS_CLOSED',					'auth'		=> 'aclf_m_report',					'cat'		=> 'MCP_REPORTS'				),				'pm_report_details'		=> array(					'base'		=> 'pm_reports',					'class'		=> 'mcp',					'title'		=> 'MCP_PM_REPORT_DETAILS',					'auth'		=> 'aclf_m_report',					'cat'		=> 'MCP_REPORTS'				),			);			_add_modules($modules_to_install);			// Add newly_registered group... but check if it already exists (we always supported running the updater on any schema)			$sql = 'SELECT group_id				FROM ' . GROUPS_TABLE . "				WHERE group_name = 'NEWLY_REGISTERED'";			$result = $db->sql_query($sql);			$group_id = (int) $db->sql_fetchfield('group_id');			$db->sql_freeresult($result);			if (!$group_id)			{				$sql = 'INSERT INTO ' .  GROUPS_TABLE . " (group_name, group_type, group_founder_manage, group_colour, group_legend, group_avatar, group_desc, group_desc_uid, group_max_recipients) VALUES ('NEWLY_REGISTERED', 3, 0, '', 0, '', '', '', 5)";				_sql($sql, $errored, $error_ary);				$group_id = $db->sql_nextid();			}			// Insert new user role... at the end of the chain			$sql = 'SELECT role_id				FROM ' . ACL_ROLES_TABLE . "				WHERE role_name = 'ROLE_USER_NEW_MEMBER'					AND role_type = 'u_'";			$result = $db->sql_query($sql);			$u_role = (int) $db->sql_fetchfield('role_id');			$db->sql_freeresult($result);			if (!$u_role)			{				$sql = 'SELECT MAX(role_order) as max_order_id					FROM ' . ACL_ROLES_TABLE . "					WHERE role_type = 'u_'";				$result = $db->sql_query($sql);				$next_order_id = (int) $db->sql_fetchfield('max_order_id');				$db->sql_freeresult($result);				$next_order_id++;				$sql = 'INSERT INTO ' . ACL_ROLES_TABLE . " (role_name, role_description, role_type, role_order) VALUES ('ROLE_USER_NEW_MEMBER', 'ROLE_DESCRIPTION_USER_NEW_MEMBER', 'u_', $next_order_id)";				_sql($sql, $errored, $error_ary);				$u_role = $db->sql_nextid();				if (!$errored)				{					// Now add the correct data to the roles...					// The standard role says that new users are not able to send a PM, Mass PM, are not able to PM groups					$sql = 'INSERT INTO ' . ACL_ROLES_DATA_TABLE . " (role_id, auth_option_id, auth_setting) SELECT $u_role, auth_option_id, 0 FROM " . ACL_OPTIONS_TABLE . " WHERE auth_option LIKE 'u_%' AND auth_option IN ('u_sendpm', 'u_masspm', 'u_masspm_group')";					_sql($sql, $errored, $error_ary);					// Add user role to group					$sql = 'INSERT INTO ' . ACL_GROUPS_TABLE . " (group_id, forum_id, auth_option_id, auth_role_id, auth_setting) VALUES ($group_id, 0, 0, $u_role, 0)";					_sql($sql, $errored, $error_ary);				}			}			// Insert new forum role			$sql = 'SELECT role_id				FROM ' . ACL_ROLES_TABLE . "				WHERE role_name = 'ROLE_FORUM_NEW_MEMBER'					AND role_type = 'f_'";			$result = $db->sql_query($sql);			$f_role = (int) $db->sql_fetchfield('role_id');			$db->sql_freeresult($result);			if (!$f_role)			{				$sql = 'SELECT MAX(role_order) as max_order_id					FROM ' . ACL_ROLES_TABLE . "					WHERE role_type = 'f_'";				$result = $db->sql_query($sql);				$next_order_id = (int) $db->sql_fetchfield('max_order_id');				$db->sql_freeresult($result);				$next_order_id++;				$sql = 'INSERT INTO ' . ACL_ROLES_TABLE . " (role_name, role_description, role_type, role_order) VALUES  ('ROLE_FORUM_NEW_MEMBER', 'ROLE_DESCRIPTION_FORUM_NEW_MEMBER', 'f_', $next_order_id)";				_sql($sql, $errored, $error_ary);				$f_role = $db->sql_nextid();				if (!$errored)				{					$sql = 'INSERT INTO ' . ACL_ROLES_DATA_TABLE . " (role_id, auth_option_id, auth_setting) SELECT $f_role, auth_option_id, 0 FROM " . ACL_OPTIONS_TABLE . " WHERE auth_option LIKE 'f_%' AND auth_option IN ('f_noapprove')";					_sql($sql, $errored, $error_ary);				}			}			// Set every members user_new column to 0 (old users) only if there is no one yet (this makes sure we do not execute this more than once)			$sql = 'SELECT 1				FROM ' . USERS_TABLE . '				WHERE user_new = 0';			$result = $db->sql_query_limit($sql, 1);			$row = $db->sql_fetchrow($result);			$db->sql_freeresult($result);			if (!$row)			{				$sql = 'UPDATE ' . USERS_TABLE . ' SET user_new = 0';				_sql($sql, $errored, $error_ary);			}			// Newly registered users limit			if (!isset($config['new_member_post_limit']))			{				set_config('new_member_post_limit', (!empty($config['enable_queue_trigger'])) ? $config['queue_trigger_posts'] : 0);			}			if (!isset($config['new_member_group_default']))			{				set_config('new_member_group_default', 0);			}			// To mimick the old "feature" we will assign the forum role to every forum, regardless of the setting (this makes sure there are no "this does not work!!!! YUO!!!" posts...			// Check if the role is already assigned...			$sql = 'SELECT forum_id				FROM ' . ACL_GROUPS_TABLE . '				WHERE group_id = ' . $group_id . '					AND auth_role_id = ' . $f_role;			$result = $db->sql_query($sql);			$is_options = (int) $db->sql_fetchfield('forum_id');			$db->sql_freeresult($result);			// Not assigned at all... :/			if (!$is_options)			{				// Get postable forums				$sql = 'SELECT forum_id					FROM ' . FORUMS_TABLE . '					WHERE forum_type != ' . FORUM_LINK;				$result = $db->sql_query($sql);				while ($row = $db->sql_fetchrow($result))				{					_sql('INSERT INTO ' . ACL_GROUPS_TABLE . ' (group_id, forum_id, auth_option_id, auth_role_id, auth_setting) VALUES (' . $group_id . ', ' . (int) $row['forum_id'] . ', 0, ' . $f_role . ', 0)', $errored, $error_ary);				}				$db->sql_freeresult($result);			}			// Clear permissions...			include_once($phpbb_root_path . 'includes/acp/auth.' . $phpEx);			$auth_admin = new auth_admin();			$auth_admin->acl_clear_prefetch();			if (!isset($config['allow_avatar']))			{				if ($config['allow_avatar_upload'] || $config['allow_avatar_local'] || $config['allow_avatar_remote'])				{					set_config('allow_avatar', '1');				}				else				{					set_config('allow_avatar', '0');				}			}			if (!isset($config['allow_avatar_remote_upload']))			{				if ($config['allow_avatar_remote'] && $config['allow_avatar_upload'])				{					set_config('allow_avatar_remote_upload', '1');				}				else				{					set_config('allow_avatar_remote_upload', '0');				}			}			// Minimum number of characters			if (!isset($config['min_post_chars']))			{				set_config('min_post_chars', '1');			}			if (!isset($config['allow_quick_reply']))			{				set_config('allow_quick_reply', '1');			}			// Set every members user_options column to enable			// bbcode, smilies and URLs for signatures by default			$sql = 'SELECT user_options				FROM ' . USERS_TABLE . '				WHERE user_type IN (' . USER_NORMAL . ', ' . USER_FOUNDER . ')';			$result = $db->sql_query_limit($sql, 1);			$user_option = (int) $db->sql_fetchfield('user_options');			$db->sql_freeresult($result);			// Check if we already updated the database by checking bit 15 which we used to store the sig_bbcode option			if (!($user_option & 1 << 15))			{				// 229376 is the added value to enable all three signature options				$sql = 'UPDATE ' . USERS_TABLE . ' SET user_options = user_options + 229376';				_sql($sql, $errored, $error_ary);			}			if (!isset($config['delete_time']))			{				set_config('delete_time', $config['edit_time']);			}			$no_updates = false;		break;		// No changes from 3.0.6-RC1 to 3.0.6-RC2		case '3.0.6-RC1':		break;		// Changes from 3.0.6-RC2 to 3.0.6-RC3		case '3.0.6-RC2':			// Update the Custom Profile Fields based on previous settings to the new format			$sql = 'UPDATE ' . PROFILE_FIELDS_TABLE . '				SET field_show_on_vt = 1				WHERE field_hide = 0					AND (field_required = 1 OR field_show_on_reg = 1 OR field_show_profile = 1)';			_sql($sql, $errored, $error_ary);			$no_updates = false;		break;		// No changes from 3.0.6-RC3 to 3.0.6-RC4		case '3.0.6-RC3':		break;		// No changes from 3.0.6-RC4 to 3.0.6		case '3.0.6-RC4':		break;		// Changes from 3.0.6 to 3.0.7-RC1		case '3.0.6':			// ATOM Feeds			set_config('feed_overall', '1');			set_config('feed_http_auth', '0');			set_config('feed_limit_post', (string) (isset($config['feed_limit']) ? (int) $config['feed_limit'] : 15));			set_config('feed_limit_topic', (string) (isset($config['feed_overall_topics_limit']) ? (int) $config['feed_overall_topics_limit'] : 10));			set_config('feed_topics_new', (!empty($config['feed_overall_topics']) ? '1' : '0'));			set_config('feed_topics_active', (!empty($config['feed_overall_topics']) ? '1' : '0'));			// Delete all text-templates from the template_data			$sql = 'DELETE FROM ' . STYLES_TEMPLATE_DATA_TABLE . '				WHERE template_filename ' . $db->sql_like_expression($db->any_char . '.txt');			_sql($sql, $errored, $error_ary);			$no_updates = false;		break;		// Changes from 3.0.7-RC1 to 3.0.7-RC2		case '3.0.7-RC1':			$sql = 'SELECT user_id, user_email, user_email_hash				FROM ' . USERS_TABLE . '				WHERE user_type <> ' . USER_IGNORE . "					AND user_email <> ''";			$result = $db->sql_query($sql);			$i = 0;			while ($row = $db->sql_fetchrow($result))			{				// Snapshot of the phpbb_email_hash() function				// We cannot call it directly because the auto updater updates the DB first. :/				$user_email_hash = sprintf('%u', crc32(strtolower($row['user_email']))) . strlen($row['user_email']);				if ($user_email_hash != $row['user_email_hash'])				{					$sql_ary = array(						'user_email_hash'	=> $user_email_hash,					);					$sql = 'UPDATE ' . USERS_TABLE . '						SET ' . $db->sql_build_array('UPDATE', $sql_ary) . '						WHERE user_id = ' . (int) $row['user_id'];					_sql($sql, $errored, $error_ary, ($i % 100 == 0));					++$i;				}			}			$db->sql_freeresult($result);			$no_updates = false;		break;		// No changes from 3.0.7-RC2 to 3.0.7		case '3.0.7-RC2':		break;		// No changes from 3.0.7 to 3.0.7-PL1		case '3.0.7':		break;		// Changes from 3.0.7-PL1 to 3.0.8-RC1		case '3.0.7-PL1':			// Update file extension group names to use language strings.			$sql = 'SELECT lang_dir				FROM ' . LANG_TABLE;			$result = $db->sql_query($sql);			$extension_groups_updated = array();			while ($lang_dir = $db->sql_fetchfield('lang_dir'))			{				$lang_dir = basename($lang_dir);				// The language strings we need are either in language/.../acp/attachments.php				// in the update package if we're updating to 3.0.8-RC1 or later,				// or they are in language/.../install.php when we're updating from 3.0.7-PL1 or earlier.				// On an already updated board, they can also already be in language/.../acp/attachments.php				// in the board root.				$lang_files = array(					"{$phpbb_root_path}install/update/new/language/$lang_dir/acp/attachments.$phpEx",					"{$phpbb_root_path}language/$lang_dir/install.$phpEx",					"{$phpbb_root_path}language/$lang_dir/acp/attachments.$phpEx",				);				foreach ($lang_files as $lang_file)				{					if (!file_exists($lang_file))					{						continue;					}					$lang = array();					include($lang_file);					foreach($lang as $lang_key => $lang_val)					{						if (isset($extension_groups_updated[$lang_key]) || strpos($lang_key, 'EXT_GROUP_') !== 0)						{							continue;						}						$sql_ary = array(							'group_name'	=> substr($lang_key, 10), // Strip off 'EXT_GROUP_'						);						$sql = 'UPDATE ' . EXTENSION_GROUPS_TABLE . '							SET ' . $db->sql_build_array('UPDATE', $sql_ary) . "							WHERE group_name = '" . $db->sql_escape($lang_val) . "'";						_sql($sql, $errored, $error_ary);						$extension_groups_updated[$lang_key] = true;					}				}			}			$db->sql_freeresult($result);			// Install modules			$modules_to_install = array(				'post'					=> array(					'base'		=> 'board',					'class'		=> 'acp',					'title'		=> 'ACP_POST_SETTINGS',					'auth'		=> 'acl_a_board',					'cat'		=> 'ACP_MESSAGES',					'after'		=> array('message', 'ACP_MESSAGE_SETTINGS')				),			);			_add_modules($modules_to_install);			// update			$sql = 'UPDATE ' . MODULES_TABLE . '				SET module_auth = \'cfg_allow_avatar && (cfg_allow_avatar_local || cfg_allow_avatar_remote || cfg_allow_avatar_upload || cfg_allow_avatar_remote_upload)\'				WHERE module_class = \'ucp\'					AND module_basename = \'profile\'					AND module_mode = \'avatar\'';			_sql($sql, $errored, $error_ary);			// add Bing Bot			$bot_name = 'Bing [Bot]';			$bot_name_clean = utf8_clean_string($bot_name);			$sql = 'SELECT user_id				FROM ' . USERS_TABLE . "				WHERE username_clean = '" . $db->sql_escape($bot_name_clean) . "'";			$result = $db->sql_query($sql);			$bing_already_added = (bool) $db->sql_fetchfield('user_id');			$db->sql_freeresult($result);			if (!$bing_already_added)			{				$bot_agent = 'bingbot/';				$bot_ip = '';				$sql = 'SELECT group_id, group_colour					FROM ' . GROUPS_TABLE . "					WHERE group_name = 'BOTS'";				$result = $db->sql_query($sql);				$group_row = $db->sql_fetchrow($result);				$db->sql_freeresult($result);				if (!$group_row)				{					// default fallback, should never get here					$group_row['group_id'] = 6;					$group_row['group_colour'] = '9E8DA7';				}				if (!function_exists('user_add'))				{					include($phpbb_root_path . 'includes/functions_user.' . $phpEx);				}				$user_row = array(					'user_type'				=> USER_IGNORE,					'group_id'				=> $group_row['group_id'],					'username'				=> $bot_name,					'user_regdate'			=> time(),					'user_password'			=> '',					'user_colour'			=> $group_row['group_colour'],					'user_email'			=> '',					'user_lang'				=> $config['default_lang'],					'user_style'			=> $config['default_style'],					'user_timezone'			=> 0,					'user_dateformat'		=> $config['default_dateformat'],					'user_allow_massemail'	=> 0,				);				$user_id = user_add($user_row);				$sql = 'INSERT INTO ' . BOTS_TABLE . ' ' . $db->sql_build_array('INSERT', array(					'bot_active'	=> 1,					'bot_name'		=> (string) $bot_name,					'user_id'		=> (int) $user_id,					'bot_agent'		=> (string) $bot_agent,					'bot_ip'		=> (string) $bot_ip,				));				_sql($sql, $errored, $error_ary);			}			// end Bing Bot addition			// Delete shadow topics pointing to not existing topics			$batch_size = 500;			// Set of affected forums we have to resync			$sync_forum_ids = array();			do			{				$sql_array = array(					'SELECT'	=> 't1.topic_id, t1.forum_id',					'FROM'		=> array(						TOPICS_TABLE	=> 't1',					),					'LEFT_JOIN'	=> array(						array(							'FROM'	=> array(TOPICS_TABLE	=> 't2'),							'ON'	=> 't1.topic_moved_id = t2.topic_id',						),					),					'WHERE'		=> 't1.topic_moved_id <> 0								AND t2.topic_id IS NULL',				);				$sql = $db->sql_build_query('SELECT', $sql_array);				$result = $db->sql_query_limit($sql, $batch_size);				$topic_ids = array();				while ($row = $db->sql_fetchrow($result))				{					$topic_ids[] = (int) $row['topic_id'];					$sync_forum_ids[(int) $row['forum_id']] = (int) $row['forum_id'];				}				$db->sql_freeresult($result);				if (!empty($topic_ids))				{					$sql = 'DELETE FROM ' . TOPICS_TABLE . '						WHERE ' . $db->sql_in_set('topic_id', $topic_ids);					$db->sql_query($sql);				}			}			while (sizeof($topic_ids) == $batch_size);			// Sync the forums we have deleted shadow topics from.			sync('forum', 'forum_id', $sync_forum_ids, true, true);			// Unread posts search load switch			set_config('load_unreads_search', '1');			// Reduce queue interval to 60 seconds, email package size to 20			if ($config['queue_interval'] == 600)			{				set_config('queue_interval', '60');			}			if ($config['email_package_size'] == 50)			{				set_config('email_package_size', '20');			}			$no_updates = false;		break;		// No changes from 3.0.8-RC1 to 3.0.8		case '3.0.8-RC1':		break;		// Changes from 3.0.8 to 3.0.9-RC1		case '3.0.8':			set_config('ip_login_limit_max', '50');			set_config('ip_login_limit_time', '21600');			set_config('ip_login_limit_use_forwarded', '0');			// Update file extension group names to use language strings, again.			$sql = 'SELECT group_id, group_name				FROM ' . EXTENSION_GROUPS_TABLE . '				WHERE group_name ' . $db->sql_like_expression('EXT_GROUP_' . $db->any_char);			$result = $db->sql_query($sql);			while ($row = $db->sql_fetchrow($result))			{				$sql_ary = array(					'group_name'	=> substr($row['group_name'], 10), // Strip off 'EXT_GROUP_'				);				$sql = 'UPDATE ' . EXTENSION_GROUPS_TABLE . '					SET ' . $db->sql_build_array('UPDATE', $sql_ary) . '					WHERE group_id = ' . $row['group_id'];				_sql($sql, $errored, $error_ary);			}			$db->sql_freeresult($result);			global $db_tools, $table_prefix;			// Recover from potentially broken Q&A CAPTCHA table on firebird			// Q&A CAPTCHA was uninstallable, so it's safe to remove these			// without data loss			if ($db_tools->sql_layer == 'firebird')			{				$tables = array(					$table_prefix . 'captcha_questions',					$table_prefix . 'captcha_answers',					$table_prefix . 'qa_confirm',				);				foreach ($tables as $table)				{					if ($db_tools->sql_table_exists($table))					{						$db_tools->sql_table_drop($table);					}				}			}			$no_updates = false;		break;		// No changes from 3.0.9-RC1 to 3.0.9-RC2		case '3.0.9-RC1':		break;		// No changes from 3.0.9-RC2 to 3.0.9-RC3		case '3.0.9-RC2':		break;		// No changes from 3.0.9-RC3 to 3.0.9-RC4		case '3.0.9-RC3':		break;		// No changes from 3.0.9-RC4 to 3.0.9		case '3.0.9-RC4':		break;		// Changes from 3.0.9 to 3.0.10-RC1		case '3.0.9':			if (!isset($config['email_max_chunk_size']))			{				set_config('email_max_chunk_size', '50');			}			$no_updates = false;		break;		// No changes from 3.0.10-RC1 to 3.0.10-RC2		case '3.0.10-RC1':		break;		// No changes from 3.0.10-RC2 to 3.0.10-RC3		case '3.0.10-RC2':		break;		// No changes from 3.0.10-RC3 to 3.0.10		case '3.0.10-RC3':		break;	}}?>
<?php/**** @package acp* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//***/define('IN_PHPBB', true);define('ADMIN_START', true);define('NEED_SID', true);// Include files$phpbb_root_path = (defined('PHPBB_ROOT_PATH')) ? PHPBB_ROOT_PATH : './../';$phpEx = substr(strrchr(__FILE__, '.'), 1);require($phpbb_root_path . 'common.' . $phpEx);require($phpbb_root_path . 'includes/functions_admin.' . $phpEx);require($phpbb_root_path . 'includes/functions_module.' . $phpEx);// Start session management$user->session_begin();$auth->acl($user->data);$user->setup('acp/common');// End session management// Have they authenticated (again) as an admin for this session?if (!isset($user->data['session_admin']) || !$user->data['session_admin']){	login_box('', $user->lang['LOGIN_ADMIN_CONFIRM'], $user->lang['LOGIN_ADMIN_SUCCESS'], true, false);}// Is user any type of admin? No, then stop here, each script needs to// check specific permissions but this is a catchallif (!$auth->acl_get('a_')){	trigger_error('NO_ADMIN');}// We define the admin variables now, because the user is now able to use the admin related features...define('IN_ADMIN', true);$phpbb_admin_path = (defined('PHPBB_ADMIN_PATH')) ? PHPBB_ADMIN_PATH : './';// Some oft used variables$safe_mode		= (@ini_get('safe_mode') == '1' || strtolower(@ini_get('safe_mode')) === 'on') ? true : false;$file_uploads	= (@ini_get('file_uploads') == '1' || strtolower(@ini_get('file_uploads')) === 'on') ? true : false;$module_id		= request_var('i', '');$mode			= request_var('mode', '');// Set custom template for admin area$template->set_custom_template($phpbb_admin_path . 'style', 'admin');$template->assign_var('T_TEMPLATE_PATH', $phpbb_admin_path . 'style');// the acp template is never stored in the database$user->theme['template_storedb'] = false;// Instantiate new module$module = new p_master();// Instantiate module system and generate list of available modules$module->list_modules('acp');// Select the active module$module->set_active($module_id, $mode);// Assign data to the template engine for the list of modules// We do this before loading the active module for correct menu display in trigger_error$module->assign_tpl_vars(append_sid("{$phpbb_admin_path}index.$phpEx"));// Load and execute the relevant module$module->load_active();// Generate the pageadm_page_header($module->get_page_title());$template->set_filenames(array(	'body' => $module->get_tpl_name(),));adm_page_footer();/*** Header for acp pages*/function adm_page_header($page_title){	global $config, $db, $user, $template;	global $phpbb_root_path, $phpbb_admin_path, $phpEx, $SID, $_SID;	if (defined('HEADER_INC'))	{		return;	}	define('HEADER_INC', true);	// gzip_compression	if ($config['gzip_compress'])	{		if (@extension_loaded('zlib') && !headers_sent())		{			ob_start('ob_gzhandler');		}	}	$template->assign_vars(array(		'PAGE_TITLE'			=> $page_title,		'USERNAME'				=> $user->data['username'],		'SID'					=> $SID,		'_SID'					=> $_SID,		'SESSION_ID'			=> $user->session_id,		'ROOT_PATH'				=> $phpbb_admin_path,		'U_LOGOUT'				=> append_sid("{$phpbb_root_path}ucp.$phpEx", 'mode=logout'),		'U_ADM_LOGOUT'			=> append_sid("{$phpbb_admin_path}index.$phpEx", 'action=admlogout'),		'U_ADM_INDEX'			=> append_sid("{$phpbb_admin_path}index.$phpEx"),		'U_INDEX'				=> append_sid("{$phpbb_root_path}index.$phpEx"),		'T_IMAGES_PATH'			=> "{$phpbb_root_path}images/",		'T_SMILIES_PATH'		=> "{$phpbb_root_path}{$config['smilies_path']}/",		'T_AVATAR_PATH'			=> "{$phpbb_root_path}{$config['avatar_path']}/",		'T_AVATAR_GALLERY_PATH'	=> "{$phpbb_root_path}{$config['avatar_gallery_path']}/",		'T_ICONS_PATH'			=> "{$phpbb_root_path}{$config['icons_path']}/",		'T_RANKS_PATH'			=> "{$phpbb_root_path}{$config['ranks_path']}/",		'T_UPLOAD_PATH'			=> "{$phpbb_root_path}{$config['upload_path']}/",		'ICON_MOVE_UP'				=> '<img src="' . $phpbb_admin_path . 'images/icon_up.gif" alt="' . $user->lang['MOVE_UP'] . '" title="' . $user->lang['MOVE_UP'] . '" />',		'ICON_MOVE_UP_DISABLED'		=> '<img src="' . $phpbb_admin_path . 'images/icon_up_disabled.gif" alt="' . $user->lang['MOVE_UP'] . '" title="' . $user->lang['MOVE_UP'] . '" />',		'ICON_MOVE_DOWN'			=> '<img src="' . $phpbb_admin_path . 'images/icon_down.gif" alt="' . $user->lang['MOVE_DOWN'] . '" title="' . $user->lang['MOVE_DOWN'] . '" />',		'ICON_MOVE_DOWN_DISABLED'	=> '<img src="' . $phpbb_admin_path . 'images/icon_down_disabled.gif" alt="' . $user->lang['MOVE_DOWN'] . '" title="' . $user->lang['MOVE_DOWN'] . '" />',		'ICON_EDIT'					=> '<img src="' . $phpbb_admin_path . 'images/icon_edit.gif" alt="' . $user->lang['EDIT'] . '" title="' . $user->lang['EDIT'] . '" />',		'ICON_EDIT_DISABLED'		=> '<img src="' . $phpbb_admin_path . 'images/icon_edit_disabled.gif" alt="' . $user->lang['EDIT'] . '" title="' . $user->lang['EDIT'] . '" />',		'ICON_DELETE'				=> '<img src="' . $phpbb_admin_path . 'images/icon_delete.gif" alt="' . $user->lang['DELETE'] . '" title="' . $user->lang['DELETE'] . '" />',		'ICON_DELETE_DISABLED'		=> '<img src="' . $phpbb_admin_path . 'images/icon_delete_disabled.gif" alt="' . $user->lang['DELETE'] . '" title="' . $user->lang['DELETE'] . '" />',		'ICON_SYNC'					=> '<img src="' . $phpbb_admin_path . 'images/icon_sync.gif" alt="' . $user->lang['RESYNC'] . '" title="' . $user->lang['RESYNC'] . '" />',		'ICON_SYNC_DISABLED'		=> '<img src="' . $phpbb_admin_path . 'images/icon_sync_disabled.gif" alt="' . $user->lang['RESYNC'] . '" title="' . $user->lang['RESYNC'] . '" />',		'S_USER_LANG'			=> $user->lang['USER_LANG'],		'S_CONTENT_DIRECTION'	=> $user->lang['DIRECTION'],		'S_CONTENT_ENCODING'	=> 'UTF-8',		'S_CONTENT_FLOW_BEGIN'	=> ($user->lang['DIRECTION'] == 'ltr') ? 'left' : 'right',		'S_CONTENT_FLOW_END'	=> ($user->lang['DIRECTION'] == 'ltr') ? 'right' : 'left',	));	// application/xhtml+xml not used because of IE	header('Content-type: text/html; charset=UTF-8');	header('Cache-Control: private, no-cache="set-cookie"');	header('Expires: 0');	header('Pragma: no-cache');	return;}/*** Page footer for acp pages*/function adm_page_footer($copyright_html = true){	global $db, $config, $template, $user, $auth, $cache;	global $starttime, $phpbb_root_path, $phpbb_admin_path, $phpEx;	// Output page creation time	if (defined('DEBUG'))	{		$mtime = explode(' ', microtime());		$totaltime = $mtime[0] + $mtime[1] - $starttime;		if (!empty($_REQUEST['explain']) && $auth->acl_get('a_') && defined('DEBUG_EXTRA') && method_exists($db, 'sql_report'))		{			$db->sql_report('display');		}		$debug_output = sprintf('Time : %.3fs | ' . $db->sql_num_queries() . ' Queries | GZIP : ' . (($config['gzip_compress']) ? 'On' : 'Off') . (($user->load) ? ' | Load : ' . $user->load : ''), $totaltime);		if ($auth->acl_get('a_') && defined('DEBUG_EXTRA'))		{			if (function_exists('memory_get_usage'))			{				if ($memory_usage = memory_get_usage())				{					global $base_memory_usage;					$memory_usage -= $base_memory_usage;					$memory_usage = get_formatted_filesize($memory_usage);					$debug_output .= ' | Memory Usage: ' . $memory_usage;				}			}			$debug_output .= ' | <a href="' . build_url() . '&amp;explain=1">Explain</a>';		}	}	$template->assign_vars(array(		'DEBUG_OUTPUT'		=> (defined('DEBUG')) ? $debug_output : '',		'TRANSLATION_INFO'	=> (!empty($user->lang['TRANSLATION_INFO'])) ? $user->lang['TRANSLATION_INFO'] : '',		'S_COPYRIGHT_HTML'	=> $copyright_html,		'VERSION'			=> $config['version'])	);	$template->display('body');	garbage_collection();	exit_handler();}/*** Generate back link for acp pages*/function adm_back_link($u_action){	global $user;	return '<br /><br /><a href="' . $u_action . '">&laquo; ' . $user->lang['BACK_TO_PREV'] . '</a>';}/*** Build select field options in acp pages*/function build_select($option_ary, $option_default = false){	global $user;	$html = '';	foreach ($option_ary as $value => $title)	{		$selected = ($option_default !== false && $value == $option_default) ? ' selected="selected"' : '';		$html .= '<option value="' . $value . '"' . $selected . '>' . $user->lang[$title] . '</option>';	}	return $html;}/*** Build radio fields in acp pages*/function h_radio($name, $input_ary, $input_default = false, $id = false, $key = false, $separator = ''){	global $user;	$html = '';	$id_assigned = false;	foreach ($input_ary as $value => $title)	{		$selected = ($input_default !== false && $value == $input_default) ? ' checked="checked"' : '';		$html .= '<label><input type="radio" name="' . $name . '"' . (($id && !$id_assigned) ? ' id="' . $id . '"' : '') . ' value="' . $value . '"' . $selected . (($key) ? ' accesskey="' . $key . '"' : '') . ' class="radio" /> ' . $user->lang[$title] . '</label>' . $separator;		$id_assigned = true;	}	return $html;}/*** Build configuration template for acp configuration pages*/function build_cfg_template($tpl_type, $key, &$new, $config_key, $vars){	global $user, $module;	$tpl = '';	$name = 'config[' . $config_key . ']';	// Make sure there is no notice printed out for non-existent config options (we simply set them)	if (!isset($new[$config_key]))	{		$new[$config_key] = '';	}	switch ($tpl_type[0])	{		case 'text':		case 'password':			$size = (int) $tpl_type[1];			$maxlength = (int) $tpl_type[2];			$tpl = '<input id="' . $key . '" type="' . $tpl_type[0] . '"' . (($size) ? ' size="' . $size . '"' : '') . ' maxlength="' . (($maxlength) ? $maxlength : 255) . '" name="' . $name . '" value="' . $new[$config_key] . '"' . (($tpl_type[0] === 'password') ?  ' autocomplete="off"' : '') . ' />';		break;		case 'dimension':			$size = (int) $tpl_type[1];			$maxlength = (int) $tpl_type[2];			$tpl = '<input id="' . $key . '" type="text"' . (($size) ? ' size="' . $size . '"' : '') . ' maxlength="' . (($maxlength) ? $maxlength : 255) . '" name="config[' . $config_key . '_width]" value="' . $new[$config_key . '_width'] . '" /> x <input type="text"' . (($size) ? ' size="' . $size . '"' : '') . ' maxlength="' . (($maxlength) ? $maxlength : 255) . '" name="config[' . $config_key . '_height]" value="' . $new[$config_key . '_height'] . '" />';		break;		case 'textarea':			$rows = (int) $tpl_type[1];			$cols = (int) $tpl_type[2];			$tpl = '<textarea id="' . $key . '" name="' . $name . '" rows="' . $rows . '" cols="' . $cols . '">' . $new[$config_key] . '</textarea>';		break;		case 'radio':			$key_yes	= ($new[$config_key]) ? ' checked="checked"' : '';			$key_no		= (!$new[$config_key]) ? ' checked="checked"' : '';			$tpl_type_cond = explode('_', $tpl_type[1]);			$type_no = ($tpl_type_cond[0] == 'disabled' || $tpl_type_cond[0] == 'enabled') ? false : true;			$tpl_no = '<label><input type="radio" name="' . $name . '" value="0"' . $key_no . ' class="radio" /> ' . (($type_no) ? $user->lang['NO'] : $user->lang['DISABLED']) . '</label>';			$tpl_yes = '<label><input type="radio" id="' . $key . '" name="' . $name . '" value="1"' . $key_yes . ' class="radio" /> ' . (($type_no) ? $user->lang['YES'] : $user->lang['ENABLED']) . '</label>';			$tpl = ($tpl_type_cond[0] == 'yes' || $tpl_type_cond[0] == 'enabled') ? $tpl_yes . $tpl_no : $tpl_no . $tpl_yes;		break;		case 'select':		case 'custom':			$return = '';			if (isset($vars['method']))			{				$call = array($module->module, $vars['method']);			}			else if (isset($vars['function']))			{				$call = $vars['function'];			}			else			{				break;			}			if (isset($vars['params']))			{				$args = array();				foreach ($vars['params'] as $value)				{					switch ($value)					{						case '{CONFIG_VALUE}':							$value = $new[$config_key];						break;						case '{KEY}':							$value = $key;						break;					}					$args[] = $value;				}			}			else			{				$args = array($new[$config_key], $key);			}			$return = call_user_func_array($call, $args);			if ($tpl_type[0] == 'select')			{				$tpl = '<select id="' . $key . '" name="' . $name . '">' . $return . '</select>';			}			else			{				$tpl = $return;			}		break;		default:		break;	}	if (isset($vars['append']))	{		$tpl .= $vars['append'];	}	return $tpl;}/*** Going through a config array and validate values, writing errors to $error. The validation method  accepts parameters separated by ':' for string and int.* The first parameter defines the type to be used, the second the lower bound and the third the upper bound. Only the type is required.*/function validate_config_vars($config_vars, &$cfg_array, &$error){	global $phpbb_root_path, $user;	$type	= 0;	$min	= 1;	$max	= 2;	foreach ($config_vars as $config_name => $config_definition)	{		if (!isset($cfg_array[$config_name]) || strpos($config_name, 'legend') !== false)		{			continue;		}		if (!isset($config_definition['validate']))		{			continue;		}		$validator = explode(':', $config_definition['validate']);		// Validate a bit. ;) (0 = type, 1 = min, 2= max)		switch ($validator[$type])		{			case 'string':				$length = utf8_strlen($cfg_array[$config_name]);				// the column is a VARCHAR				$validator[$max] = (isset($validator[$max])) ? min(255, $validator[$max]) : 255;				if (isset($validator[$min]) && $length < $validator[$min])				{					$error[] = sprintf($user->lang['SETTING_TOO_SHORT'], $user->lang[$config_definition['lang']], $validator[$min]);				}				else if (isset($validator[$max]) && $length > $validator[2])				{					$error[] = sprintf($user->lang['SETTING_TOO_LONG'], $user->lang[$config_definition['lang']], $validator[$max]);				}			break;			case 'bool':				$cfg_array[$config_name] = ($cfg_array[$config_name]) ? 1 : 0;			break;			case 'int':				$cfg_array[$config_name] = (int) $cfg_array[$config_name];				if (isset($validator[$min]) && $cfg_array[$config_name] < $validator[$min])				{					$error[] = sprintf($user->lang['SETTING_TOO_LOW'], $user->lang[$config_definition['lang']], $validator[$min]);				}				else if (isset($validator[$max]) && $cfg_array[$config_name] > $validator[$max])				{					$error[] = sprintf($user->lang['SETTING_TOO_BIG'], $user->lang[$config_definition['lang']], $validator[$max]);				}				if (strpos($config_name, '_max') !== false)				{					// Min/max pairs of settings should ensure that min <= max					// Replace _max with _min to find the name of the minimum					// corresponding configuration variable					$min_name = str_replace('_max', '_min', $config_name);					if (isset($cfg_array[$min_name]) && is_numeric($cfg_array[$min_name]) && $cfg_array[$config_name] < $cfg_array[$min_name])					{						// A minimum value exists and the maximum value is less than it						$error[] = sprintf($user->lang['SETTING_TOO_LOW'], $user->lang[$config_definition['lang']], (int) $cfg_array[$min_name]);					}				}			break;			// Absolute path			case 'script_path':				if (!$cfg_array[$config_name])				{					break;				}				$destination = str_replace('\\', '/', $cfg_array[$config_name]);				if ($destination !== '/')				{					// Adjust destination path (no trailing slash)					if (substr($destination, -1, 1) == '/')					{						$destination = substr($destination, 0, -1);					}					$destination = str_replace(array('../', './'), '', $destination);					if ($destination[0] != '/')					{						$destination = '/' . $destination;					}				}				$cfg_array[$config_name] = trim($destination);			break;			// Absolute path			case 'lang':				if (!$cfg_array[$config_name])				{					break;				}				$cfg_array[$config_name] = basename($cfg_array[$config_name]);				if (!file_exists($phpbb_root_path . 'language/' . $cfg_array[$config_name] . '/'))				{					$error[] = $user->lang['WRONG_DATA_LANG'];				}			break;			// Relative path (appended $phpbb_root_path)			case 'rpath':			case 'rwpath':				if (!$cfg_array[$config_name])				{					break;				}				$destination = $cfg_array[$config_name];				// Adjust destination path (no trailing slash)				if (substr($destination, -1, 1) == '/' || substr($destination, -1, 1) == '\\')				{					$destination = substr($destination, 0, -1);				}				$destination = str_replace(array('../', '..\\', './', '.\\'), '', $destination);				if ($destination && ($destination[0] == '/' || $destination[0] == "\\"))				{					$destination = '';				}				$cfg_array[$config_name] = trim($destination);			// Path being relative (still prefixed by phpbb_root_path), but with the ability to escape the root dir...			case 'path':			case 'wpath':				if (!$cfg_array[$config_name])				{					break;				}				$cfg_array[$config_name] = trim($cfg_array[$config_name]);				// Make sure no NUL byte is present...				if (strpos($cfg_array[$config_name], "\0") !== false || strpos($cfg_array[$config_name], '%00') !== false)				{					$cfg_array[$config_name] = '';					break;				}				if (!file_exists($phpbb_root_path . $cfg_array[$config_name]))				{					$error[] = sprintf($user->lang['DIRECTORY_DOES_NOT_EXIST'], $cfg_array[$config_name]);				}				if (file_exists($phpbb_root_path . $cfg_array[$config_name]) && !is_dir($phpbb_root_path . $cfg_array[$config_name]))				{					$error[] = sprintf($user->lang['DIRECTORY_NOT_DIR'], $cfg_array[$config_name]);				}				// Check if the path is writable				if ($config_definition['validate'] == 'wpath' || $config_definition['validate'] == 'rwpath')				{					if (file_exists($phpbb_root_path . $cfg_array[$config_name]) && !phpbb_is_writable($phpbb_root_path . $cfg_array[$config_name]))					{						$error[] = sprintf($user->lang['DIRECTORY_NOT_WRITABLE'], $cfg_array[$config_name]);					}				}			break;		}	}	return;}/*** Checks whatever or not a variable is OK for use in the Database* param mixed $value_ary An array of the form array(array('lang' => ..., 'value' => ..., 'column_type' =>))'* param mixed $error The error array*/function validate_range($value_ary, &$error){	global $user;	$column_types = array(		'BOOL'	=> array('php_type' => 'int', 		'min' => 0, 				'max' => 1),		'USINT'	=> array('php_type' => 'int',		'min' => 0, 				'max' => 65535),		'UINT'	=> array('php_type' => 'int', 		'min' => 0, 				'max' => (int) 0x7fffffff),		// Do not use (int) 0x80000000 - it evaluates to different		// values on 32-bit and 64-bit systems.		// Apparently -2147483648 is a float on 32-bit systems,		// despite fitting in an int, thus explicit cast is needed.		'INT'	=> array('php_type' => 'int', 		'min' => (int) -2147483648,	'max' => (int) 0x7fffffff),		'TINT'	=> array('php_type' => 'int',		'min' => -128,				'max' => 127),		'VCHAR'	=> array('php_type' => 'string', 	'min' => 0, 				'max' => 255),	);	foreach ($value_ary as $value)	{		$column = explode(':', $value['column_type']);		$max = $min = 0;		$type = 0;		if (!isset($column_types[$column[0]]))		{			continue;		}		else		{			$type = $column_types[$column[0]];		}		switch ($type['php_type'])		{			case 'string' :				$max = (isset($column[1])) ? min($column[1],$type['max']) : $type['max'];				if (utf8_strlen($value['value']) > $max)				{					$error[] = sprintf($user->lang['SETTING_TOO_LONG'], $user->lang[$value['lang']], $max);				}			break;			case 'int':				$min = (isset($column[1])) ? max($column[1],$type['min']) : $type['min'];				$max = (isset($column[2])) ? min($column[2],$type['max']) : $type['max'];				if ($value['value'] < $min)				{					$error[] = sprintf($user->lang['SETTING_TOO_LOW'], $user->lang[$value['lang']], $min);				}				else if ($value['value'] > $max)				{					$error[] = sprintf($user->lang['SETTING_TOO_BIG'], $user->lang[$value['lang']], $max);				}			break;		}	}}?>
<?php/***************************************************************************   *                           merge_clean_posts.php   *                            -------------------                          *   begin                : Tuesday, February 25, 2003  *   copyright            : (C) 2003 The phpBB Group         *   email                : support@phpbb.com                            *                                                           *   $Id$ *  ***************************************************************************/ /***************************************************************************   *                                                      *   This program is free software; you can redistribute it and/or modify     *   it under the terms of the GNU General Public License as published by    *   the Free Software Foundation; either version 2 of the License, or   *   (at your option) any later version.                       *  ***************************************************************************/ //// Security message://// This script is potentially dangerous.// Remove or comment the next line (die(".... ) to enable this script.// Do NOT FORGET to either remove this script or disable it after you have used it.//die("Please read the first lines of this script for instructions on how to enable it");@set_time_limit(2400);$db = $dbhost = $dbuser = $dbpasswd = $dbport = $dbname = '';define('IN_PHPBB', 1);define('ANONYMOUS', 1);$phpbb_root_path='./../';include($phpbb_root_path . 'extension.inc');include($phpbb_root_path . 'config.'.$phpEx);include($phpbb_root_path . 'includes/functions.'.$phpEx);require($phpbb_root_path . 'includes/acm/cache_' . $acm_type . '.'.$phpEx);include($phpbb_root_path . 'db/' . $dbms . '.'.$phpEx);$cache = new acm();$db = new sql_db($dbhost, $dbuser, $dbpasswd, $dbname, $dbport, false);// Just Do it (tm) $sql = "RENAME TABLE {$table_prefix}posts TO {$table_prefix}posts_temp";$db->sql_query($sql);$sql = "CREATE TABLE {$table_prefix}posts 	SELECT p.*, pt.post_subject, pt.post_text, pt.post_checksum, pt.bbcode_bitfield, pt.bbcode_uid 		FROM {$table_prefix}posts_temp p, {$table_prefix}posts_text pt 		WHERE pt.post_id = p.post_id";$db->sql_query($sql);switch ($db->sql_layer){	case 'mysql':	case 'mysql4':		$sql = 'ALTER TABLE ' . $table_prefix . 'posts 			ADD PRIMARY KEY (post_id), 			ADD INDEX topic_id (topic_id), 			ADD INDEX poster_ip (poster_ip), 			ADD INDEX post_approved (post_approved), 			MODIFY COLUMN post_id mediumint(8) UNSIGNED NOT NULL auto_increment, 			ADD COLUMN post_encoding varchar(11) DEFAULT \'iso-8859-15\' NOT NULL'; 		break;	case 'mssql':	case 'mssql-odbc':	case 'msaccess':		break;	case 'postgresql':		break;}$db->sql_query($sql);$sql = "UPDATE {$table_prefix}topics SET topic_poster = 1 WHERE topic_poster = 0 OR topic_poster IS NULL";$db->sql_query($sql);$sql = "UPDATE {$table_prefix}topics SET topic_last_poster_id = 1 WHERE topic_last_poster_id = 0 OR topic_last_poster_id IS NULL";$db->sql_query($sql);$sql = "UPDATE {$table_prefix}posts SET poster_id = 1 WHERE poster_id = 0 OR poster_id IS NULL";$db->sql_query($sql);$sql = "UPDATE {$table_prefix}users SET user_id = 1 WHERE user_id = 0";$db->sql_query($sql);$sql = "SELECT t.topic_id 	FROM {$table_prefix}topics t 	LEFT JOIN {$table_prefix}posts p ON p.topic_id = t.topic_id 	WHERE p.topic_id IS NULL";$result = $db->sql_query($sql);if ($row = $db->sql_fetchrow($result)){	$del_sql = '';	do	{		$del_sql .= (($del_sql != '') ? ', ' : '') . $row['topic_id'];	}	while ($row = $db->sql_fetchrow($result));	$sql = "DELETE FROM {$table_prefix}topics 		WHERE topic_id IN ($del_sql)";	$db->sql_query($sql);}$db->sql_freeresult($result);$del_sql = '';$sql = "SELECT topic_id, MIN(post_id) AS first_post_id, MAX(post_id) AS last_post_id, COUNT(post_id) AS total_posts 	FROM {$table_prefix}posts 	GROUP BY topic_id";$result = $db->sql_query($sql);while ($row = $db->sql_fetchrow($result)){	$del_sql .= (($del_sql != '') ? ', ' : '') . $row['topic_id'];	$sql = "UPDATE {$table_prefix}topics 		SET topic_first_post_id = " . $row['first_post_id'] . ", topic_last_post_id = " . $row['last_post_id'] . ", topic_replies = " . ($row['total_posts'] - 1) . "		WHERE topic_id = " . $row['topic_id'];	$db->sql_query($sql);}$db->sql_freeresult($result);$sql = "DELETE FROM {$table_prefix}topics WHERE topic_id NOT IN ($del_sql)";$db->sql_query($sql);$topic_count = $post_count = array();$sql = "SELECT forum_id, COUNT(topic_id) AS topics 	FROM {$table_prefix}topics 	GROUP BY forum_id";$result = $db->sql_query($sql);while ($row = $db->sql_fetchrow($result)){	$topic_count[$row['forum_id']] = $row['topics'];}$db->sql_freeresult($result);$sql = "SELECT forum_id, COUNT(post_id) AS posts  	FROM {$table_prefix}posts 	GROUP BY forum_id";$result = $db->sql_query($sql);while ($row = $db->sql_fetchrow($result)){	$post_count[$row['forum_id']] = $row['posts'];}$db->sql_freeresult($result);switch ($db->sql_layer){	case 'oracle':		$sql = "SELECT f.*, p.post_time, p.post_username, u.username, u.user_id			FROM " . $table_prefix . "forums f, " . $table_prefix . "posts p, " . $table_prefix . "users u			WHERE p.post_id = f.forum_last_post_id(+)				AND u.user_id = p.poster_id(+)";		break;	default:		$sql = "SELECT f.forum_id, p.post_time, p.post_username, u.username, u.user_id			FROM ((" . $table_prefix . "forums f			LEFT JOIN " . $table_prefix . "posts p ON p.post_id = f.forum_last_post_id)			LEFT JOIN " . $table_prefix . "users u ON u.user_id = p.poster_id)";		break;}$result = $db->sql_query($sql);$sql_ary = array();while ($row = $db->sql_fetchrow($result)){	$forum_id = $row['forum_id'];	$sql_ary[] = "UPDATE " . $table_prefix . "forums		SET forum_last_poster_id = " . ((!empty($row['user_id']) && $row['user_id'] != ANONYMOUS) ? $row['user_id'] : ANONYMOUS) . ", forum_last_poster_name = '" . ((!empty($row['user_id']) && $row['user_id'] !=  ANONYMOUS) ? addslashes($row['username']) : addslashes($row['post_username'])) . "', forum_last_post_time = " . $row['post_time'] . ", forum_posts = " . (($post_count[$forum_id]) ? $post_count[$forum_id] : 0) . ", forum_topics = " . (($topic_count[$forum_id]) ? $topic_count[$forum_id] : 0) . " 		WHERE forum_id = $forum_id";	$sql = "SELECT t.topic_id, u.username, u.user_id, u2.username as user2, u2.user_id as id2, p.post_username, p2.post_username AS post_username2, p2.post_time		FROM " . $table_prefix . "topics t, " . $table_prefix . "users u, " . $table_prefix . "posts p, " . $table_prefix . "posts p2, " . $table_prefix . "users u2		WHERE t.forum_id = $forum_id 			AND u.user_id = t.topic_poster 			AND p.post_id = t.topic_first_post_id			AND p2.post_id = t.topic_last_post_id			AND u2.user_id = p2.poster_id";	$result2 = $db->sql_query($sql);	while ($row2 = $db->sql_fetchrow($result2))	{		$sql_ary[] = "UPDATE " . $table_prefix . "topics			SET topic_poster = " . $row2['user_id'] . ", topic_first_poster_name = '" . ((!empty($row2['user_id']) && $row2['user_id'] != ANONYMOUS) ? addslashes($row2['username']) : addslashes($row2['post_username'])) . "', topic_last_poster_id = " . ((!empty($row2['id2']) && $row2['id2'] != ANONYMOUS) ? $row2['id2'] : ANONYMOUS) . ", topic_last_post_time = " . $row2['post_time'] . ", topic_last_poster_name = '" . ((!empty($row2['id2']) && $row2['id2'] !=  ANONYMOUS) ? addslashes($row2['user2']) : addslashes($row2['post_username2'])) . "'			WHERE topic_id = " . $row2['topic_id'];	}	$db->sql_freeresult($result2);	unset($row2);}$db->sql_freeresult($result);foreach ($sql_ary as $sql){	$sql . "<br />";	$db->sql_query($sql);}echo "<p><b>Done</b></p>\n"; ?>
<?php/***************************************************************************   *                           merge_clean_posts.php   *                            -------------------                          *   begin                : Tuesday, February 25, 2003  *   copyright            : (C) 2003 The phpBB Group         *   email                : support@phpbb.com                            *                                                           *   $Id$ *  ***************************************************************************/ /***************************************************************************   *                                                      *   This program is free software; you can redistribute it and/or modify     *   it under the terms of the GNU General Public License as published by    *   the Free Software Foundation; either version 2 of the License, or   *   (at your option) any later version.                       *  ***************************************************************************/ //// Security message://// This script is potentially dangerous.// Remove or comment the next line (die(".... ) to enable this script.// Do NOT FORGET to either remove this script or disable it after you have used it.//die("Please read the first lines of this script for instructions on how to enable it");@set_time_limit(2400);// This script adds missing permissions$db = $dbhost = $dbuser = $dbpasswd = $dbport = $dbname = '';define('IN_PHPBB', 1);define('ANONYMOUS', 1);$phpEx = substr(strrchr(__FILE__, '.'), 1);$phpbb_root_path='./../';include($phpbb_root_path . 'config.'.$phpEx);require($phpbb_root_path . 'includes/acm/acm_' . $acm_type . '.'.$phpEx);require($phpbb_root_path . 'includes/db/' . $dbms . '.'.$phpEx);include($phpbb_root_path . 'includes/functions.'.$phpEx);$cache		= new acm();$db			= new $sql_db();// Connect to DB$db->sql_connect($dbhost, $dbuser, $dbpasswd, $dbname, $dbport, false);$sql = "SELECT post_id, post_text FROM {$table_prefix}posts WHERE post_text LIKE '%{SMILE_PATH}%'";$result = $db->sql_query($sql);while ($row = $db->sql_fetchrow($result)){	$db->sql_query("UPDATE {$table_prefix}posts SET post_text = '" . $db->sql_escape(str_replace('{SMILE_PATH}', '{SMILIES_PATH}', $row['post_text'])) . "' WHERE post_id = " . $row['post_id']);}$db->sql_freeresult($result);echo "<p><b>Done</b></p>\n"; ?>
<?php/**** common [English]** @package language* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** DO NOT CHANGE*/if (!defined('IN_PHPBB')){	exit;}if (empty($lang) || !is_array($lang)){	$lang = array();}// DEVELOPERS PLEASE NOTE//// All language files should use UTF-8 as their encoding and the files must not contain a BOM.//// Placeholders can now contain order information, e.g. instead of// 'Page %s of %s' you can (and should) write 'Page %1$s of %2$s', this allows// translators to re-order the output of data while ensuring it remains correct//// You do not need this where single placeholders are used, e.g. 'Message %d' is fine// equally where a string contains only two placeholders which are used to wrap text// in a url you again do not need to specify an order e.g., 'Click %sHERE%s' is fine//// Some characters you may want to copy&paste://     //$lang = array_merge($lang, array(	'TRANSLATION_INFO'	=> '',	'DIRECTION'			=> 'ltr',	'DATE_FORMAT'		=> '|d M Y|',	// 01 Jan 2007 (with Relative days enabled)	'USER_LANG'			=> 'en-gb',	'1_DAY'			=> '1 day',	'1_MONTH'		=> '1 month',	'1_YEAR'		=> '1 year',	'2_WEEKS'		=> '2 weeks',	'3_MONTHS'		=> '3 months',	'6_MONTHS'		=> '6 months',	'7_DAYS'		=> '7 days',	'ACCOUNT_ALREADY_ACTIVATED'		=> 'Your account has already been activated.',	'ACCOUNT_DEACTIVATED'			=> 'Your account has been manually deactivated and is only able to be reactivated by an administrator.',	'ACCOUNT_NOT_ACTIVATED'			=> 'Your account has not been activated yet.',	'ACP'							=> 'Administration Control Panel',	'ACTIVE'						=> 'active',	'ACTIVE_ERROR'					=> 'The specified username is currently inactive. If you have problems activating your account, please contact a board administrator.',	'ADMINISTRATOR'					=> 'Administrator',	'ADMINISTRATORS'				=> 'Administrators',	'AGE'							=> 'Age',	'AIM'							=> 'AIM',	'ALLOWED'						=> 'Allowed',	'ALL_FILES'						=> 'All files',	'ALL_FORUMS'					=> 'All forums',	'ALL_MESSAGES'					=> 'All messages',	'ALL_POSTS'						=> 'All posts',	'ALL_TIMES'						=> 'All times are %1$s %2$s',	'ALL_TOPICS'					=> 'All Topics',	'AND'							=> 'And',	'ARE_WATCHING_FORUM'			=> 'You have subscribed to be notified of new posts in this forum.',	'ARE_WATCHING_TOPIC'			=> 'You have subscribed to be notified of new posts in this topic.',	'ASCENDING'						=> 'Ascending',	'ATTACHMENTS'					=> 'Attachments',	'ATTACHED_IMAGE_NOT_IMAGE'		=> 'The image file you tried to attach is invalid.',	'AUTHOR'						=> 'Author',	'AUTH_NO_PROFILE_CREATED'		=> 'The creation of a user profile was unsuccessful.',	'AVATAR_DISALLOWED_CONTENT'		=> 'The upload was rejected because the uploaded file was identified as a possible attack vector.',	'AVATAR_DISALLOWED_EXTENSION'	=> 'This file cannot be displayed because the extension <strong>%s</strong> is not allowed.',	'AVATAR_EMPTY_REMOTE_DATA'		=> 'The specified avatar could not be uploaded because the remote data appears to be invalid or corrupted.',	'AVATAR_EMPTY_FILEUPLOAD'		=> 'The uploaded avatar file is empty.',	'AVATAR_INVALID_FILENAME'		=> '%s is an invalid filename.',	'AVATAR_NOT_UPLOADED'			=> 'Avatar could not be uploaded.',	'AVATAR_NO_SIZE'				=> 'The width or height of the linked avatar could not be determined. Please enter them manually.',	'AVATAR_PARTIAL_UPLOAD'			=> 'The specified file was only partially uploaded.',	'AVATAR_PHP_SIZE_NA'			=> 'The avatars filesize is too large.<br />The maximum allowed filesize set in php.ini could not be determined.',	'AVATAR_PHP_SIZE_OVERRUN'		=> 'The avatars filesize is too large. The maximum allowed upload size is %1$d %2$s.<br />Please note this is set in php.ini and cannot be overridden.',	'AVATAR_URL_INVALID'			=> 'The URL you specified is invalid.',	'AVATAR_URL_NOT_FOUND'			=> 'The file specified could not be found.',	'AVATAR_WRONG_FILESIZE'			=> 'The avatars filesize must be between 0 and %1d %2s.',	'AVATAR_WRONG_SIZE'				=> 'The submitted avatar is %5$d pixels wide and %6$d pixels high. Avatars must be at least %1$d pixels wide and %2$d pixels high, but no larger than %3$d pixels wide and %4$d pixels high.',	'BACK_TO_TOP'			=> 'Top',	'BACK_TO_PREV'			=> 'Back to previous page',	'BAN_TRIGGERED_BY_EMAIL'=> 'A ban has been issued on your e-mail address.',	'BAN_TRIGGERED_BY_IP'	=> 'A ban has been issued on your IP address.',	'BAN_TRIGGERED_BY_USER'	=> 'A ban has been issued on your username.',	'BBCODE_GUIDE'			=> 'BBCode guide',	'BCC'					=> 'BCC',	'BIRTHDAYS'				=> 'Birthdays',	'BOARD_BAN_PERM'		=> 'You have been <strong>permanently</strong> banned from this board.<br /><br />Please contact the %2$sBoard Administrator%3$s for more information.',	'BOARD_BAN_REASON'		=> 'Reason given for ban: <strong>%s</strong>',	'BOARD_BAN_TIME'		=> 'You have been banned from this board until <strong>%1$s</strong>.<br /><br />Please contact the %2$sBoard Administrator%3$s for more information.',	'BOARD_DISABLE'			=> 'Sorry but this board is currently unavailable.',	'BOARD_DISABLED'		=> 'This board is currently disabled.',	'BOARD_UNAVAILABLE'		=> 'Sorry but the board is temporarily unavailable, please try again in a few minutes.',	'BROWSING_FORUM'		=> 'Users browsing this forum: %1$s',	'BROWSING_FORUM_GUEST'	=> 'Users browsing this forum: %1$s and %2$d guest',	'BROWSING_FORUM_GUESTS'	=> 'Users browsing this forum: %1$s and %2$d guests',	'BYTES'					=> 'Bytes',	'CANCEL'				=> 'Cancel',	'CHANGE'				=> 'Change',	'CHANGE_FONT_SIZE'		=> 'Change font size',	'CHANGING_PREFERENCES'	=> 'Changing board preferences',	'CHANGING_PROFILE'		=> 'Changing profile settings',	'CLICK_VIEW_PRIVMSG'	=> '%sGo to your inbox%s',	'COLLAPSE_VIEW'			=> 'Collapse view',	'CLOSE_WINDOW'			=> 'Close window',	'COLOUR_SWATCH'			=> 'Colour swatch',	'COMMA_SEPARATOR'		=> ', ',	// Used in pagination of ACP & prosilver, use localised comma if appropriate, eg: Ideographic or Arabic	'CONFIRM'				=> 'Confirm',	'CONFIRM_CODE'			=> 'Confirmation code',	'CONFIRM_CODE_EXPLAIN'	=> 'Enter the code exactly as it appears. All letters are case insensitive.',	'CONFIRM_CODE_WRONG'	=> 'The confirmation code you entered was incorrect.',	'CONFIRM_OPERATION'		=> 'Are you sure you wish to carry out this operation?',	'CONGRATULATIONS'		=> 'Congratulations to',	'CONNECTION_FAILED'		=> 'Connection failed.',	'CONNECTION_SUCCESS'	=> 'Connection was successful!',	'COOKIES_DELETED'		=> 'All board cookies successfully deleted.',	'CURRENT_TIME'			=> 'It is currently %s',	'DAY'					=> 'Day',	'DAYS'					=> 'Days',	'DELETE'				=> 'Delete',	'DELETE_ALL'			=> 'Delete all',	'DELETE_COOKIES'		=> 'Delete all board cookies',	'DELETE_MARKED'			=> 'Delete marked',	'DELETE_POST'			=> 'Delete post',	'DELIMITER'				=> 'Delimiter',	'DESCENDING'			=> 'Descending',	'DISABLED'				=> 'Disabled',	'DISPLAY'				=> 'Display',	'DISPLAY_GUESTS'		=> 'Display guests',	'DISPLAY_MESSAGES'		=> 'Display messages from previous',	'DISPLAY_POSTS'			=> 'Display posts from previous',	'DISPLAY_TOPICS'		=> 'Display topics from previous',	'DOWNLOADED'			=> 'Downloaded',	'DOWNLOADING_FILE'		=> 'Downloading file',	'DOWNLOAD_COUNT'		=> 'Downloaded %d time',	'DOWNLOAD_COUNTS'		=> 'Downloaded %d times',	'DOWNLOAD_COUNT_NONE'	=> 'Not downloaded yet',	'VIEWED_COUNT'			=> 'Viewed %d time',	'VIEWED_COUNTS'			=> 'Viewed %d times',	'VIEWED_COUNT_NONE'		=> 'Not viewed yet',	'EDIT_POST'							=> 'Edit post',	'EMAIL'								=> 'E-mail', // Short form for EMAIL_ADDRESS	'EMAIL_ADDRESS'						=> 'E-mail address',	'EMAIL_SMTP_ERROR_RESPONSE'			=> 'Ran into problems sending e-mail at <strong>Line %1$s</strong>. Response: %2$s.',	'EMPTY_SUBJECT'						=> 'You must specify a subject when posting a new topic.',	'EMPTY_MESSAGE_SUBJECT'				=> 'You must specify a subject when composing a new message.',	'ENABLED'							=> 'Enabled',	'ENCLOSURE'							=> 'Enclosure',	'ENTER_USERNAME'					=> 'Enter username',	'ERR_CHANGING_DIRECTORY'			=> 'Unable to change directory.',	'ERR_CONNECTING_SERVER'				=> 'Error connecting to the server.',	'ERR_JAB_AUTH'						=> 'Could not authorise on Jabber server.',	'ERR_JAB_CONNECT'					=> 'Could not connect to Jabber server.',	'ERR_UNABLE_TO_LOGIN'				=> 'The specified username or password is incorrect.',	'ERR_UNWATCHING'					=> 'An error occured while trying to unsubscribe.',	'ERR_WATCHING'						=> 'An error occured while trying to subscribe.',	'ERR_WRONG_PATH_TO_PHPBB'			=> 'The phpBB path specified appears to be invalid.',	'EXPAND_VIEW'						=> 'Expand view',	'EXTENSION'							=> 'Extension',	'EXTENSION_DISABLED_AFTER_POSTING'	=> 'The extension <strong>%s</strong> has been deactivated and can no longer be displayed.',	'FAQ'					=> 'FAQ',	'FAQ_EXPLAIN'			=> 'Frequently Asked Questions',	'FILENAME'				=> 'Filename',	'FILESIZE'				=> 'File size',	'FILEDATE'				=> 'File date',	'FILE_COMMENT'			=> 'File comment',	'FILE_NOT_FOUND'		=> 'The requested file could not be found.',	'FIND_USERNAME'			=> 'Find a member',	'FOLDER'				=> 'Folder',	'FORGOT_PASS'			=> 'I forgot my password',	'FORM_INVALID'			=> 'The submitted form was invalid. Try submitting again.',	'FORUM'					=> 'Forum',	'FORUMS'				=> 'Forums',	'FORUMS_MARKED'			=> 'The selected forums have been marked read.',	'FORUM_CAT'				=> 'Forum category',	'FORUM_INDEX'			=> 'Board index',	'FORUM_LINK'			=> 'Forum link',	'FORUM_LOCATION'		=> 'Forum location',	'FORUM_LOCKED'			=> 'Forum locked',	'FORUM_RULES'			=> 'Forum rules',	'FORUM_RULES_LINK'		=> 'Please click here to view the forum rules',	'FROM'					=> 'from',	'FSOCK_DISABLED'		=> 'The operation could not be completed because the <var>fsockopen</var> function has been disabled or the server being queried could not be found.',	'FSOCK_TIMEOUT'			=> 'A timeout occurred while reading from the network stream.',	'FTP_FSOCK_HOST'				=> 'FTP host',	'FTP_FSOCK_HOST_EXPLAIN'		=> 'FTP server used to connect your site.',	'FTP_FSOCK_PASSWORD'			=> 'FTP password',	'FTP_FSOCK_PASSWORD_EXPLAIN'	=> 'Password for your FTP username.',	'FTP_FSOCK_PORT'				=> 'FTP port',	'FTP_FSOCK_PORT_EXPLAIN'		=> 'Port used to connect to your server.',	'FTP_FSOCK_ROOT_PATH'			=> 'Path to phpBB',	'FTP_FSOCK_ROOT_PATH_EXPLAIN'	=> 'Path from the root to your phpBB board.',	'FTP_FSOCK_TIMEOUT'				=> 'FTP timeout',	'FTP_FSOCK_TIMEOUT_EXPLAIN'		=> 'The amount of time, in seconds, that the system will wait for a reply from your server.',	'FTP_FSOCK_USERNAME'			=> 'FTP username',	'FTP_FSOCK_USERNAME_EXPLAIN'	=> 'Username used to connect to your server.',	'FTP_HOST'					=> 'FTP host',	'FTP_HOST_EXPLAIN'			=> 'FTP server used to connect your site.',	'FTP_PASSWORD'				=> 'FTP password',	'FTP_PASSWORD_EXPLAIN'		=> 'Password for your FTP username.',	'FTP_PORT'					=> 'FTP port',	'FTP_PORT_EXPLAIN'			=> 'Port used to connect to your server.',	'FTP_ROOT_PATH'				=> 'Path to phpBB',	'FTP_ROOT_PATH_EXPLAIN'		=> 'Path from the root to your phpBB board.',	'FTP_TIMEOUT'				=> 'FTP timeout',	'FTP_TIMEOUT_EXPLAIN'		=> 'The amount of time, in seconds, that the system will wait for a reply from your server.',	'FTP_USERNAME'				=> 'FTP username',	'FTP_USERNAME_EXPLAIN'		=> 'Username used to connect to your server.',	'GENERAL_ERROR'				=> 'General Error',	'GB'						=> 'GB',	'GIB'						=> 'GiB',	'GO'						=> 'Go',	'GOTO_PAGE'					=> 'Go to page',	'GROUP'						=> 'Group',	'GROUPS'					=> 'Groups',	'GROUP_ERR_TYPE'			=> 'Inappropriate group type specified.',	'GROUP_ERR_USERNAME'		=> 'No group name specified.',	'GROUP_ERR_USER_LONG'		=> 'Group names cannot exceed 60 characters. The specified group name is too long.',	'GUEST'						=> 'Guest',	'GUEST_USERS_ONLINE'		=> 'There are %d guest users online',	'GUEST_USERS_TOTAL'			=> '%d guests',	'GUEST_USERS_ZERO_ONLINE'	=> 'There are 0 guest users online',	'GUEST_USERS_ZERO_TOTAL'	=> '0 guests',	'GUEST_USER_ONLINE'			=> 'There is %d guest user online',	'GUEST_USER_TOTAL'			=> '%d guest',	'G_ADMINISTRATORS'			=> 'Administrators',	'G_BOTS'					=> 'Bots',	'G_GUESTS'					=> 'Guests',	'G_REGISTERED'				=> 'Registered users',	'G_REGISTERED_COPPA'		=> 'Registered COPPA users',	'G_GLOBAL_MODERATORS'		=> 'Global moderators',	'G_NEWLY_REGISTERED'		=> 'Newly registered users',	'HIDDEN_USERS_ONLINE'			=> '%d hidden users online',	'HIDDEN_USERS_TOTAL'			=> '%d hidden',	'HIDDEN_USERS_TOTAL_AND'		=> '%d hidden and ',	'HIDDEN_USERS_ZERO_ONLINE'		=> '0 hidden users online',	'HIDDEN_USERS_ZERO_TOTAL'		=> '0 hidden',	'HIDDEN_USERS_ZERO_TOTAL_AND'	=> '0 hidden and ',	'HIDDEN_USER_ONLINE'			=> '%d hidden user online',	'HIDDEN_USER_TOTAL'				=> '%d hidden',	'HIDDEN_USER_TOTAL_AND'			=> '%d hidden and ',	'HIDE_GUESTS'					=> 'Hide guests',	'HIDE_ME'						=> 'Hide my online status this session',	'HOURS'							=> 'Hours',	'HOME'							=> 'Home',	'ICQ'						=> 'ICQ',	'ICQ_STATUS'				=> 'ICQ status',	'IF'						=> 'If',	'IMAGE'						=> 'Image',	'IMAGE_FILETYPE_INVALID'	=> 'Image file type %d for mimetype %s not supported.',	'IMAGE_FILETYPE_MISMATCH'	=> 'Image file type mismatch: expected extension %1$s but extension %2$s given.',	'IN'						=> 'in',	'INDEX'						=> 'Index page',	'INFORMATION'				=> 'Information',	'INTERESTS'					=> 'Interests',	'INVALID_DIGEST_CHALLENGE'	=> 'Invalid digest challenge.',	'INVALID_EMAIL_LOG'			=> '<strong>%s</strong> possibly an invalid e-mail address?',	'IP'						=> 'IP',	'IP_BLACKLISTED'			=> 'Your IP %1$s has been blocked because it is blacklisted. For details please see <a href="%2$s">%2$s</a>.',	'JABBER'				=> 'Jabber',	'JOINED'				=> 'Joined',	'JUMP_PAGE'				=> 'Enter the page number you wish to go to',	'JUMP_TO'				=> 'Jump to',	'JUMP_TO_PAGE'			=> 'Click to jump to page',	'KB'					=> 'KB',	'KIB'					=> 'KiB',	'LAST_POST'							=> 'Last post',	'LAST_UPDATED'						=> 'Last updated',	'LAST_VISIT'						=> 'Last visit',	'LDAP_NO_LDAP_EXTENSION'			=> 'LDAP extension not available.',	'LDAP_NO_SERVER_CONNECTION'			=> 'Could not connect to LDAP server.',	'LDAP_SEARCH_FAILED'				=> 'An error occured while searching the LDAP directory.',	'LEGEND'							=> 'Legend',	'LOCATION'							=> 'Location',	'LOCK_POST'							=> 'Lock post',	'LOCK_POST_EXPLAIN'					=> 'Prevent editing',	'LOCK_TOPIC'						=> 'Lock topic',	'LOGIN'								=> 'Login',	'LOGIN_CHECK_PM'					=> 'Log in to check your private messages.',	'LOGIN_CONFIRMATION'				=> 'Confirmation of login',	'LOGIN_CONFIRM_EXPLAIN'				=> 'To prevent brute forcing accounts the board requires you to enter a confirmation code after a maximum amount of failed logins. The code is displayed in the image you should see below. If you are visually impaired or cannot otherwise read this code please contact the %sBoard Administrator%s.', // unused	'LOGIN_ERROR_ATTEMPTS'				=> 'You exceeded the maximum allowed number of login attempts. In addition to your username and password you now also have to solve the CAPTCHA below.',	'LOGIN_ERROR_EXTERNAL_AUTH_APACHE'	=> 'You have not been authenticated by Apache.',	'LOGIN_ERROR_PASSWORD'				=> 'You have specified an incorrect password. Please check your password and try again. If you continue to have problems please contact the %sBoard Administrator%s.',	'LOGIN_ERROR_PASSWORD_CONVERT'		=> 'It was not possible to convert your password when updating this bulletin boards software. Please %srequest a new password%s. If you continue to have problems please contact the %sBoard Administrator%s.',	'LOGIN_ERROR_USERNAME'				=> 'You have specified an incorrect username. Please check your username and try again. If you continue to have problems please contact the %sBoard Administrator%s.',	'LOGIN_FORUM'						=> 'To view or post in this forum you must enter its password.',	'LOGIN_INFO'						=> 'In order to login you must be registered. Registering takes only a few moments but gives you increased capabilities. The board administrator may also grant additional permissions to registered users. Before you register please ensure you are familiar with our terms of use and related policies. Please ensure you read any forum rules as you navigate around the board.',	'LOGIN_VIEWFORUM'					=> 'The board requires you to be registered and logged in to view this forum.',	'LOGIN_EXPLAIN_EDIT'				=> 'In order to edit posts in this forum you have to be registered and logged in.',	'LOGIN_EXPLAIN_VIEWONLINE'			=> 'In order to view the online list you have to be registered and logged in.',	'LOGOUT'							=> 'Logout',	'LOGOUT_USER'						=> 'Logout [ %s ]',	'LOG_ME_IN'							=> 'Log me on automatically each visit',	'MARK'					=> 'Mark',	'MARK_ALL'				=> 'Mark all',	'MARK_FORUMS_READ'		=> 'Mark forums read',	'MARK_SUBFORUMS_READ'	=> 'Mark subforums read',	'MB'					=> 'MB',	'MIB'					=> 'MiB',	'MCP'					=> 'Moderator Control Panel',	'MEMBERLIST'			=> 'Members',	'MEMBERLIST_EXPLAIN'	=> 'View complete list of members',	'MERGE'					=> 'Merge',	'MERGE_POSTS'			=> 'Move posts',	'MERGE_TOPIC'			=> 'Merge topic',	'MESSAGE'				=> 'Message',	'MESSAGES'				=> 'Messages',	'MESSAGE_BODY'			=> 'Message body',	'MINUTES'				=> 'Minutes',	'MODERATE'				=> 'Moderate',	'MODERATOR'				=> 'Moderator',	'MODERATORS'			=> 'Moderators',	'MONTH'					=> 'Month',	'MOVE'					=> 'Move',	'MSNM'					=> 'MSNM/WLM',	'NA'						=> 'N/A',	'NEWEST_USER'				=> 'Our newest member <strong>%s</strong>',	'NEW_MESSAGE'				=> 'New message',	'NEW_MESSAGES'				=> 'New messages',	'NEW_PM'					=> '<strong>%d</strong> new message',	'NEW_PMS'					=> '<strong>%d</strong> new messages',	'NEW_POST'					=> 'New post',	// Not used anymore	'NEW_POSTS'					=> 'New posts',	// Not used anymore	'NEXT'						=> 'Next',		// Used in pagination	'NEXT_STEP'					=> 'Next',	'NEVER'						=> 'Never',	'NO'						=> 'No',	'NOT_ALLOWED_MANAGE_GROUP'	=> 'You are not allowed to manage this group.',	'NOT_AUTHORISED'			=> 'You are not authorised to access this area.',	'NOT_WATCHING_FORUM'		=> 'You are no longer subscribed to updates on this forum.',	'NOT_WATCHING_TOPIC'		=> 'You are no longer subscribed to this topic.',	'NOTIFY_ADMIN'				=> 'Please notify the board administrator or webmaster.',	'NOTIFY_ADMIN_EMAIL'		=> 'Please notify the board administrator or webmaster: <a href="mailto:%1$s">%1$s</a>',	'NO_ACCESS_ATTACHMENT'		=> 'You are not allowed to access this file.',	'NO_ACTION'					=> 'No action specified.',	'NO_ADMINISTRATORS'			=> 'There are no administrators.',	'NO_AUTH_ADMIN'				=> 'Access to the Administration Control Panel is not allowed as you do not have administrative permissions.',	'NO_AUTH_ADMIN_USER_DIFFER'	=> 'You are not able to re-authenticate as a different user.',	'NO_AUTH_OPERATION'			=> 'You do not have the necessary permissions to complete this operation.',	'NO_CONNECT_TO_SMTP_HOST'	=> 'Could not connect to smtp host : %1$s : %2$s',	'NO_BIRTHDAYS'				=> 'No birthdays today',	'NO_EMAIL_MESSAGE'			=> 'E-mail message was blank.',	'NO_EMAIL_RESPONSE_CODE'	=> 'Could not get mail server response codes.',	'NO_EMAIL_SUBJECT'			=> 'No e-mail subject specified.',	'NO_FORUM'					=> 'The forum you selected does not exist.',	'NO_FORUMS'					=> 'This board has no forums.',	'NO_GROUP'					=> 'The requested usergroup does not exist.',	'NO_GROUP_MEMBERS'			=> 'This group currently has no members.',	'NO_IPS_DEFINED'			=> 'No IP addresses or hostnames defined',	'NO_MEMBERS'				=> 'No members found for this search criterion.',	'NO_MESSAGES'				=> 'No messages',	'NO_MODE'					=> 'No mode specified.',	'NO_MODERATORS'				=> 'There are no moderators.',	'NO_NEW_MESSAGES'			=> 'No new messages',	'NO_NEW_PM'					=> '<strong>0</strong> new messages',	'NO_NEW_POSTS'				=> 'No new posts',	// Not used anymore	'NO_ONLINE_USERS'			=> 'No registered users',	'NO_POSTS'					=> 'No posts',	'NO_POSTS_TIME_FRAME'		=> 'No posts exist inside this topic for the selected time frame.',	'NO_FEED_ENABLED'			=> 'Feeds are not available on this board.',	'NO_FEED'					=> 'The requested feed is not available.',	'NO_SUBJECT'				=> 'No subject specified',								// Used for posts having no subject defined but displayed within management pages.	'NO_SUCH_SEARCH_MODULE'		=> 'The specified search backend doesnt exist.',	'NO_SUPPORTED_AUTH_METHODS'	=> 'No supported authentication methods.',	'NO_TOPIC'					=> 'The requested topic does not exist.',	'NO_TOPIC_FORUM'			=> 'The topic or forum no longer exists.',	'NO_TOPICS'					=> 'There are no topics or posts in this forum.',	'NO_TOPICS_TIME_FRAME'		=> 'No topics exist inside this forum for the selected time frame.',	'NO_UNREAD_PM'				=> '<strong>0</strong> unread messages',	'NO_UNREAD_POSTS'			=> 'No unread posts',	'NO_UPLOAD_FORM_FOUND'		=> 'Upload initiated but no valid file upload form found.',	'NO_USER'					=> 'The requested user does not exist.',	'NO_USERS'					=> 'The requested users do not exist.',	'NO_USER_SPECIFIED'			=> 'No username was specified.',	// Nullar/Singular/Plural language entry. The key numbers define the number range in which a certain grammatical expression is valid.	'NUM_POSTS_IN_QUEUE'		=> array(		0			=> 'No posts in queue',		// 0		1			=> '1 post in queue',		// 1		2			=> '%d posts in queue',		// 2+	),	'OCCUPATION'				=> 'Occupation',	'OFFLINE'					=> 'Offline',	'ONLINE'					=> 'Online',	'ONLINE_BUDDIES'			=> 'Online friends',	'ONLINE_USERS_TOTAL'		=> 'In total there are <strong>%d</strong> users online :: ',	'ONLINE_USERS_ZERO_TOTAL'	=> 'In total there are <strong>0</strong> users online :: ',	'ONLINE_USER_TOTAL'			=> 'In total there is <strong>%d</strong> user online :: ',	'OPTIONS'					=> 'Options',	'PAGE_OF'				=> 'Page <strong>%1$d</strong> of <strong>%2$d</strong>',	'PASSWORD'				=> 'Password',	'PIXEL'					=> 'px',	'PLAY_QUICKTIME_FILE'	=> 'Play Quicktime file',	'PM'					=> 'PM',	'PM_REPORTED'			=> 'Click to view report',	'POSTING_MESSAGE'		=> 'Posting message in %s',	'POSTING_PRIVATE_MESSAGE'	=> 'Composing private message',	'POST'					=> 'Post',	'POST_ANNOUNCEMENT'		=> 'Announce',	'POST_STICKY'			=> 'Sticky',	'POSTED'				=> 'Posted',	'POSTED_IN_FORUM'		=> 'in',	'POSTED_ON_DATE'		=> 'on',	'POSTS'					=> 'Posts',	'POSTS_UNAPPROVED'		=> 'At least one post in this topic has not been approved.',	'POST_BY_AUTHOR'		=> 'by',	'POST_BY_FOE'			=> 'This post was made by <strong>%1$s</strong> who is currently on your ignore list. %2$sDisplay this post%3$s.',	'POST_DAY'				=> '%.2f posts per day',	'POST_DETAILS'			=> 'Post details',	'POST_NEW_TOPIC'		=> 'Post new topic',	'POST_PCT'				=> '%.2f%% of all posts',	'POST_PCT_ACTIVE'		=> '%.2f%% of users posts',	'POST_PCT_ACTIVE_OWN'	=> '%.2f%% of your posts',	'POST_REPLY'			=> 'Post a reply',	'POST_REPORTED'			=> 'Click to view report',	'POST_SUBJECT'			=> 'Post subject',	'POST_TIME'				=> 'Post time',	'POST_TOPIC'			=> 'Post a new topic',	'POST_UNAPPROVED'		=> 'This post is waiting for approval',	'PREVIEW'				=> 'Preview',	'PREVIOUS'				=> 'Previous',		// Used in pagination	'PREVIOUS_STEP'			=> 'Previous',	'PRIVACY'				=> 'Privacy policy',	'PRIVATE_MESSAGE'		=> 'Private message',	'PRIVATE_MESSAGES'		=> 'Private messages',	'PRIVATE_MESSAGING'		=> 'Private messaging',	'PROFILE'				=> 'User Control Panel',	'READING_FORUM'				=> 'Viewing topics in %s',	'READING_GLOBAL_ANNOUNCE'	=> 'Reading global announcement',	'READING_LINK'				=> 'Following forum link %s',	'READING_TOPIC'				=> 'Reading topic in %s',	'READ_PROFILE'				=> 'Profile',	'REASON'					=> 'Reason',	'RECORD_ONLINE_USERS'		=> 'Most users ever online was <strong>%1$s</strong> on %2$s',	'REDIRECT'					=> 'Redirect',	'REDIRECTS'					=> 'Total redirects',	'REGISTER'					=> 'Register',	'REGISTERED_USERS'			=> 'Registered users:',	'REG_USERS_ONLINE'			=> 'There are %d registered users and ',	'REG_USERS_TOTAL'			=> '%d registered, ',	'REG_USERS_TOTAL_AND'		=> '%d registered and ',	'REG_USERS_ZERO_ONLINE'		=> 'There are 0 registered users and ',	'REG_USERS_ZERO_TOTAL'		=> '0 registered, ',	'REG_USERS_ZERO_TOTAL_AND'	=> '0 registered and ',	'REG_USER_ONLINE'			=> 'There is %d registered user and ',	'REG_USER_TOTAL'			=> '%d registered, ',	'REG_USER_TOTAL_AND'		=> '%d registered and ',	'REMOVE'					=> 'Remove',	'REMOVE_INSTALL'			=> 'Please delete, move or rename the install directory before you use your board. If this directory is still present, only the Administration Control Panel (ACP) will be accessible.',	'REPLIES'					=> 'Replies',	'REPLY_WITH_QUOTE'			=> 'Reply with quote',	'REPLYING_GLOBAL_ANNOUNCE'	=> 'Replying to global announcement',	'REPLYING_MESSAGE'			=> 'Replying to message in %s',	'REPORT_BY'					=> 'Report by',	'REPORT_POST'				=> 'Report this post',	'REPORTING_POST'			=> 'Reporting post',	'RESEND_ACTIVATION'			=> 'Resend activation e-mail',	'RESET'						=> 'Reset',	'RESTORE_PERMISSIONS'		=> 'Restore permissions',	'RETURN_INDEX'				=> '%sReturn to the index page%s',	'RETURN_FORUM'				=> '%sReturn to the forum last visited%s',	'RETURN_PAGE'				=> '%sReturn to the previous page%s',	'RETURN_TOPIC'				=> '%sReturn to the topic last visited%s',	'RETURN_TO'					=> 'Return to',	'FEED'						=> 'Feed',	'FEED_NEWS'					=> 'News',	'FEED_TOPICS_ACTIVE'		=> 'Active Topics',	'FEED_TOPICS_NEW'			=> 'New Topics',	'RULES_ATTACH_CAN'			=> 'You <strong>can</strong> post attachments in this forum',	'RULES_ATTACH_CANNOT'		=> 'You <strong>cannot</strong> post attachments in this forum',	'RULES_DELETE_CAN'			=> 'You <strong>can</strong> delete your posts in this forum',	'RULES_DELETE_CANNOT'		=> 'You <strong>cannot</strong> delete your posts in this forum',	'RULES_DOWNLOAD_CAN'		=> 'You <strong>can</strong> download attachments in this forum',	'RULES_DOWNLOAD_CANNOT'		=> 'You <strong>cannot</strong> download attachments in this forum',	'RULES_EDIT_CAN'			=> 'You <strong>can</strong> edit your posts in this forum',	'RULES_EDIT_CANNOT'			=> 'You <strong>cannot</strong> edit your posts in this forum',	'RULES_LOCK_CAN'			=> 'You <strong>can</strong> lock your topics in this forum',	'RULES_LOCK_CANNOT'			=> 'You <strong>cannot</strong> lock your topics in this forum',	'RULES_POST_CAN'			=> 'You <strong>can</strong> post new topics in this forum',	'RULES_POST_CANNOT'			=> 'You <strong>cannot</strong> post new topics in this forum',	'RULES_REPLY_CAN'			=> 'You <strong>can</strong> reply to topics in this forum',	'RULES_REPLY_CANNOT'		=> 'You <strong>cannot</strong> reply to topics in this forum',	'RULES_VOTE_CAN'			=> 'You <strong>can</strong> vote in polls in this forum',	'RULES_VOTE_CANNOT'			=> 'You <strong>cannot</strong> vote in polls in this forum',	'SEARCH'					=> 'Search',	'SEARCH_MINI'				=> 'Search',	'SEARCH_ADV'				=> 'Advanced search',	'SEARCH_ADV_EXPLAIN'		=> 'View the advanced search options',	'SEARCH_KEYWORDS'			=> 'Search for keywords',	'SEARCHING_FORUMS'			=> 'Searching forums',	'SEARCH_ACTIVE_TOPICS'		=> 'View active topics',	'SEARCH_FOR'				=> 'Search for',	'SEARCH_FORUM'				=> 'Search this forum',	'SEARCH_NEW'				=> 'View new posts',	'SEARCH_POSTS_BY'			=> 'Search posts by',	'SEARCH_SELF'				=> 'View your posts',	'SEARCH_TOPIC'				=> 'Search this topic',	'SEARCH_UNANSWERED'			=> 'View unanswered posts',	'SEARCH_UNREAD'				=> 'View unread posts',	'SEARCH_USER_POSTS'			=> 'Search users posts',	'SECONDS'					=> 'Seconds',	'SELECT'					=> 'Select',	'SELECT_ALL_CODE'			=> 'Select all',	'SELECT_DESTINATION_FORUM'	=> 'Please select a destination forum',	'SELECT_FORUM'				=> 'Select a forum',	'SEND_EMAIL'				=> 'E-mail',				// Used for submit buttons	'SEND_EMAIL_USER'			=> 'E-mail',				// Used as: {L_SEND_EMAIL_USER} {USERNAME} -> E-mail UserX	'SEND_PRIVATE_MESSAGE'		=> 'Send private message',	'SETTINGS'					=> 'Settings',	'SIGNATURE'					=> 'Signature',	'SKIP'						=> 'Skip to content',	'SMTP_NO_AUTH_SUPPORT'		=> 'SMTP server does not support authentication.',	'SORRY_AUTH_READ'			=> 'You are not authorised to read this forum.',	'SORRY_AUTH_VIEW_ATTACH'	=> 'You are not authorised to download this attachment.',	'SORT_BY'					=> 'Sort by',	'SORT_JOINED'				=> 'Joined date',	'SORT_LOCATION'				=> 'Location',	'SORT_RANK'					=> 'Rank',	'SORT_POSTS'				=> 'Posts',	'SORT_TOPIC_TITLE'			=> 'Topic title',	'SORT_USERNAME'				=> 'Username',	'SPLIT_TOPIC'				=> 'Split topic',	'SQL_ERROR_OCCURRED'		=> 'An SQL error occurred while fetching this page. Please contact the %sBoard Administrator%s if this problem persists.',	'STATISTICS'				=> 'Statistics',	'START_WATCHING_FORUM'		=> 'Subscribe forum',	'START_WATCHING_TOPIC'		=> 'Subscribe topic',	'STOP_WATCHING_FORUM'		=> 'Unsubscribe forum',	'STOP_WATCHING_TOPIC'		=> 'Unsubscribe topic',	'SUBFORUM'					=> 'Subforum',	'SUBFORUMS'					=> 'Subforums',	'SUBJECT'					=> 'Subject',	'SUBMIT'					=> 'Submit',	'TERMS_USE'			=> 'Terms of use',	'TEST_CONNECTION'	=> 'Test connection',	'THE_TEAM'			=> 'The team',	'TIME'				=> 'Time',		'TOO_LARGE'						=> 'The value you entered is too large.',	'TOO_LARGE_MAX_RECIPIENTS'		=> 'The value of <strong>Maximum number of allowed recipients per private message</strong> setting you entered is too large.',	'TOO_LONG'						=> 'The value you entered is too long.',	'TOO_LONG_AIM'					=> 'The screenname you entered is too long.',	'TOO_LONG_CONFIRM_CODE'			=> 'The confirm code you entered is too long.',	'TOO_LONG_DATEFORMAT'			=> 'The date format you entered is too long.',	'TOO_LONG_ICQ'					=> 'The ICQ number you entered is too long.',	'TOO_LONG_INTERESTS'			=> 'The interests you entered is too long.',	'TOO_LONG_JABBER'				=> 'The Jabber account name you entered is too long.',	'TOO_LONG_LOCATION'				=> 'The location you entered is too long.',	'TOO_LONG_MSN'					=> 'The MSNM/WLM name you entered is too long.',	'TOO_LONG_NEW_PASSWORD'			=> 'The password you entered is too long.',	'TOO_LONG_OCCUPATION'			=> 'The occupation you entered is too long.',	'TOO_LONG_PASSWORD_CONFIRM'		=> 'The password confirmation you entered is too long.',	'TOO_LONG_USER_PASSWORD'		=> 'The password you entered is too long.',	'TOO_LONG_USERNAME'				=> 'The username you entered is too long.',	'TOO_LONG_EMAIL'				=> 'The e-mail address you entered is too long.',	'TOO_LONG_EMAIL_CONFIRM'		=> 'The e-mail address confirmation you entered is too long.',	'TOO_LONG_WEBSITE'				=> 'The website address you entered is too long.',	'TOO_LONG_YIM'					=> 'The Yahoo! Messenger name you entered is too long.',	'TOO_MANY_VOTE_OPTIONS'			=> 'You have tried to vote for too many options.',	'TOO_SHORT'						=> 'The value you entered is too short.',	'TOO_SHORT_AIM'					=> 'The screenname you entered is too short.',	'TOO_SHORT_CONFIRM_CODE'		=> 'The confirm code you entered is too short.',	'TOO_SHORT_DATEFORMAT'			=> 'The date format you entered is too short.',	'TOO_SHORT_ICQ'					=> 'The ICQ number you entered is too short.',	'TOO_SHORT_INTERESTS'			=> 'The interests you entered is too short.',	'TOO_SHORT_JABBER'				=> 'The Jabber account name you entered is too short.',	'TOO_SHORT_LOCATION'			=> 'The location you entered is too short.',	'TOO_SHORT_MSN'					=> 'The MSNM/WLM name you entered is too short.',	'TOO_SHORT_NEW_PASSWORD'		=> 'The password you entered is too short.',	'TOO_SHORT_OCCUPATION'			=> 'The occupation you entered is too short.',	'TOO_SHORT_PASSWORD_CONFIRM'	=> 'The password confirmation you entered is too short.',	'TOO_SHORT_USER_PASSWORD'		=> 'The password you entered is too short.',	'TOO_SHORT_USERNAME'			=> 'The username you entered is too short.',	'TOO_SHORT_EMAIL'				=> 'The e-mail address you entered is too short.',	'TOO_SHORT_EMAIL_CONFIRM'		=> 'The e-mail address confirmation you entered is too short.',	'TOO_SHORT_WEBSITE'				=> 'The website address you entered is too short.',	'TOO_SHORT_YIM'					=> 'The Yahoo! Messenger name you entered is too short.',		'TOO_SMALL'						=> 'The value you entered is too small.',	'TOO_SMALL_MAX_RECIPIENTS'		=> 'The value of <strong>Maximum number of allowed recipients per private message</strong> setting you entered is too small.',	'TOPIC'				=> 'Topic',	'TOPICS'			=> 'Topics',	'TOPICS_UNAPPROVED'	=> 'At least one topic in this forum has not been approved.',	'TOPIC_ICON'		=> 'Topic icon',	'TOPIC_LOCKED'		=> 'This topic is locked, you cannot edit posts or make further replies.',	'TOPIC_LOCKED_SHORT'=> 'Topic locked',	'TOPIC_MOVED'		=> 'Moved topic',	'TOPIC_REVIEW'		=> 'Topic review',	'TOPIC_TITLE'		=> 'Topic title',	'TOPIC_UNAPPROVED'	=> 'This topic has not been approved',	'TOTAL_ATTACHMENTS'	=> 'Attachment(s)',	'TOTAL_LOG'			=> '1 log',	'TOTAL_LOGS'		=> '%d logs',	'TOTAL_NO_PM'		=> '0 private messages in total',	'TOTAL_PM'			=> '1 private message in total',	'TOTAL_PMS'			=> '%d private messages in total',	'TOTAL_POSTS'		=> 'Total posts',	'TOTAL_POSTS_OTHER'	=> 'Total posts <strong>%d</strong>',	'TOTAL_POSTS_ZERO'	=> 'Total posts <strong>0</strong>',	'TOPIC_REPORTED'	=> 'This topic has been reported',	'TOTAL_TOPICS_OTHER'=> 'Total topics <strong>%d</strong>',	'TOTAL_TOPICS_ZERO'	=> 'Total topics <strong>0</strong>',	'TOTAL_USERS_OTHER'	=> 'Total members <strong>%d</strong>',	'TOTAL_USERS_ZERO'	=> 'Total members <strong>0</strong>',	'TRACKED_PHP_ERROR'	=> 'Tracked PHP errors: %s',	'UNABLE_GET_IMAGE_SIZE'	=> 'It was not possible to determine the dimensions of the image.',	'UNABLE_TO_DELIVER_FILE'=> 'Unable to deliver file.',	'UNKNOWN_BROWSER'		=> 'Unknown browser',	'UNMARK_ALL'			=> 'Unmark all',	'UNREAD_MESSAGES'		=> 'Unread messages',	'UNREAD_PM'				=> '<strong>%d</strong> unread message',	'UNREAD_PMS'			=> '<strong>%d</strong> unread messages',	'UNREAD_POST'			=> 'Unread post',	'UNREAD_POSTS'			=> 'Unread posts',	'UNWATCH_FORUM_CONFIRM'		=> 'Are you sure you wish to unsubscribe from this forum?',	'UNWATCH_FORUM_DETAILED'	=> 'Are you sure you wish to unsubscribe from the forum %s?',	'UNWATCH_TOPIC_CONFIRM'		=> 'Are you sure you wish to unsubscribe from this topic?',	'UNWATCH_TOPIC_DETAILED'	=> 'Are you sure you wish to unsubscribe from the topic %s?',	'UNWATCHED_FORUMS'			=> 'You are no longer subscribed to the selected forums.',	'UNWATCHED_TOPICS'			=> 'You are no longer subscribed to the selected topics.',	'UNWATCHED_FORUMS_TOPICS'	=> 'You are no longer subscribed to the selected entries.',	'UPDATE'				=> 'Update',	'UPLOAD_IN_PROGRESS'	=> 'The upload is currently in progress.',	'URL_REDIRECT'			=> 'If your browser does not support meta redirection %splease click HERE to be redirected%s.',	'USERGROUPS'			=> 'Groups',	'USERNAME'				=> 'Username',	'USERNAMES'				=> 'Usernames',	'USER_AVATAR'			=> 'User avatar',	'USER_CANNOT_READ'		=> 'You cannot read posts in this forum.',	'USER_POST'				=> '%d Post',	'USER_POSTS'			=> '%d Posts',	'USERS'					=> 'Users',	'USE_PERMISSIONS'		=> 'Test out users permissions',	'USER_NEW_PERMISSION_DISALLOWED'	=> 'We are sorry, but you are not authorised to use this feature. You may have just registered here and may need to participate more to be able to use this feature.',	'VARIANT_DATE_SEPARATOR'	=> ' / ',	// Used in date format dropdown, eg: "Today, 13:37 / 01 Jan 2007, 13:37" ... to join a relative date with calendar date	'VIEWED'					=> 'Viewed',	'VIEWING_FAQ'				=> 'Viewing FAQ',	'VIEWING_MEMBERS'			=> 'Viewing member details',	'VIEWING_ONLINE'			=> 'Viewing who is online',	'VIEWING_MCP'				=> 'Viewing moderator control panel',	'VIEWING_MEMBER_PROFILE'	=> 'Viewing member profile',	'VIEWING_PRIVATE_MESSAGES'	=> 'Viewing private messages',	'VIEWING_REGISTER'			=> 'Registering account',	'VIEWING_UCP'				=> 'Viewing user control panel',	'VIEWS'						=> 'Views',	'VIEW_BOOKMARKS'			=> 'View bookmarks',	'VIEW_FORUM_LOGS'			=> 'View Logs',	'VIEW_LATEST_POST'			=> 'View the latest post',	'VIEW_NEWEST_POST'			=> 'View first unread post',	'VIEW_NOTES'				=> 'View user notes',	'VIEW_ONLINE_TIME'			=> 'based on users active over the past %d minute',	'VIEW_ONLINE_TIMES'			=> 'based on users active over the past %d minutes',	'VIEW_TOPIC'				=> 'View topic',	'VIEW_TOPIC_ANNOUNCEMENT'	=> 'Announcement: ',	'VIEW_TOPIC_GLOBAL'			=> 'Global Announcement: ',	'VIEW_TOPIC_LOCKED'			=> 'Locked: ',	'VIEW_TOPIC_LOGS'			=> 'View logs',	'VIEW_TOPIC_MOVED'			=> 'Moved: ',	'VIEW_TOPIC_POLL'			=> 'Poll: ',	'VIEW_TOPIC_STICKY'			=> 'Sticky: ',	'VISIT_WEBSITE'				=> 'Visit website',	'WARNINGS'			=> 'Warnings',	'WARN_USER'			=> 'Warn user',	'WATCH_FORUM_CONFIRM'	=> 'Are you sure you wish to subscribe to this forum?',	'WATCH_FORUM_DETAILED'	=> 'Are you sure you wish to subscribe to the forum %s?',	'WATCH_TOPIC_CONFIRM'	=> 'Are you sure you wish to subscribe to this topic?',	'WATCH_TOPIC_DETAILED'	=> 'Are you sure you wish to subscribe to the topic %s?',	'WELCOME_SUBJECT'	=> 'Welcome to %s forums',	'WEBSITE'			=> 'Website',	'WHOIS'				=> 'Whois',	'WHO_IS_ONLINE'		=> 'Who is online',	'WRONG_PASSWORD'	=> 'You entered an incorrect password.',	'WRONG_DATA_ICQ'			=> 'The number you entered is not a valid ICQ number.',	'WRONG_DATA_JABBER'			=> 'The name you entered is not a valid Jabber account name.',	'WRONG_DATA_LANG'			=> 'The language you specified is not valid.',	'WRONG_DATA_WEBSITE'		=> 'The website address has to be a valid URL, including the protocol. For example http://www.example.com/.',	'WROTE'						=> 'wrote',	'YEAR'				=> 'Year',	'YEAR_MONTH_DAY'	=> '(YYYY-MM-DD)',	'YES'				=> 'Yes',	'YIM'				=> 'YIM',	'YOU_LAST_VISIT'	=> 'Last visit was: %s',	'YOU_NEW_PM'		=> 'A new private message is waiting for you in your Inbox.',	'YOU_NEW_PMS'		=> 'New private messages are waiting for you in your Inbox.',	'YOU_NO_NEW_PM'		=> 'No new private messages are waiting for you.',	'datetime'			=> array(		'TODAY'		=> 'Today',		'TOMORROW'	=> 'Tomorrow',		'YESTERDAY'	=> 'Yesterday',		'AGO'		=> array(			0		=> 'less than a minute ago',			1		=> '%d minute ago',			2		=> '%d minutes ago',			60		=> '1 hour ago',		),		'Sunday'	=> 'Sunday',		'Monday'	=> 'Monday',		'Tuesday'	=> 'Tuesday',		'Wednesday'	=> 'Wednesday',		'Thursday'	=> 'Thursday',		'Friday'	=> 'Friday',		'Saturday'	=> 'Saturday',		'Sun'		=> 'Sun',		'Mon'		=> 'Mon',		'Tue'		=> 'Tue',		'Wed'		=> 'Wed',		'Thu'		=> 'Thu',		'Fri'		=> 'Fri',		'Sat'		=> 'Sat',		'January'	=> 'January',		'February'	=> 'February',		'March'		=> 'March',		'April'		=> 'April',		'May'		=> 'May',		'June'		=> 'June',		'July'		=> 'July',		'August'	=> 'August',		'September' => 'September',		'October'	=> 'October',		'November'	=> 'November',		'December'	=> 'December',		'Jan'		=> 'Jan',		'Feb'		=> 'Feb',		'Mar'		=> 'Mar',		'Apr'		=> 'Apr',		'May_short'	=> 'May',	// Short representation of "May". May_short used because in English the short and long date are the same for May.		'Jun'		=> 'Jun',		'Jul'		=> 'Jul',		'Aug'		=> 'Aug',		'Sep'		=> 'Sep',		'Oct'		=> 'Oct',		'Nov'		=> 'Nov',		'Dec'		=> 'Dec',	),	'tz'				=> array(		'-12'	=> 'UTC - 12 hours',		'-11'	=> 'UTC - 11 hours',		'-10'	=> 'UTC - 10 hours',		'-9.5'	=> 'UTC - 9:30 hours',		'-9'	=> 'UTC - 9 hours',		'-8'	=> 'UTC - 8 hours',		'-7'	=> 'UTC - 7 hours',		'-6'	=> 'UTC - 6 hours',		'-5'	=> 'UTC - 5 hours',		'-4.5'	=> 'UTC - 4:30 hours',		'-4'	=> 'UTC - 4 hours',		'-3.5'	=> 'UTC - 3:30 hours',		'-3'	=> 'UTC - 3 hours',		'-2'	=> 'UTC - 2 hours',		'-1'	=> 'UTC - 1 hour',		'0'		=> 'UTC',		'1'		=> 'UTC + 1 hour',		'2'		=> 'UTC + 2 hours',		'3'		=> 'UTC + 3 hours',		'3.5'	=> 'UTC + 3:30 hours',		'4'		=> 'UTC + 4 hours',		'4.5'	=> 'UTC + 4:30 hours',		'5'		=> 'UTC + 5 hours',		'5.5'	=> 'UTC + 5:30 hours',		'5.75'	=> 'UTC + 5:45 hours',		'6'		=> 'UTC + 6 hours',		'6.5'	=> 'UTC + 6:30 hours',		'7'		=> 'UTC + 7 hours',		'8'		=> 'UTC + 8 hours',		'8.75'	=> 'UTC + 8:45 hours',		'9'		=> 'UTC + 9 hours',		'9.5'	=> 'UTC + 9:30 hours',		'10'	=> 'UTC + 10 hours',		'10.5'	=> 'UTC + 10:30 hours',		'11'	=> 'UTC + 11 hours',		'11.5'	=> 'UTC + 11:30 hours',		'12'	=> 'UTC + 12 hours',		'12.75'	=> 'UTC + 12:45 hours',		'13'	=> 'UTC + 13 hours',		'14'	=> 'UTC + 14 hours',		'dst'	=> '[ <abbr title="Daylight Saving Time">DST</abbr> ]',	),	'tz_zones'	=> array(		'-12'	=> '[UTC - 12] Baker Island Time',		'-11'	=> '[UTC - 11] Niue Time, Samoa Standard Time',		'-10'	=> '[UTC - 10] Hawaii-Aleutian Standard Time, Cook Island Time',		'-9.5'	=> '[UTC - 9:30] Marquesas Islands Time',		'-9'	=> '[UTC - 9] Alaska Standard Time, Gambier Island Time',		'-8'	=> '[UTC - 8] Pacific Standard Time',		'-7'	=> '[UTC - 7] Mountain Standard Time',		'-6'	=> '[UTC - 6] Central Standard Time',		'-5'	=> '[UTC - 5] Eastern Standard Time',		'-4.5'	=> '[UTC - 4:30] Venezuelan Standard Time',		'-4'	=> '[UTC - 4] Atlantic Standard Time',		'-3.5'	=> '[UTC - 3:30] Newfoundland Standard Time',		'-3'	=> '[UTC - 3] Amazon Standard Time, Central Greenland Time',		'-2'	=> '[UTC - 2] Fernando de Noronha Time, South Georgia &amp; the South Sandwich Islands Time',		'-1'	=> '[UTC - 1] Azores Standard Time, Cape Verde Time, Eastern Greenland Time',		'0'		=> '[UTC] Western European Time, Greenwich Mean Time',		'1'		=> '[UTC + 1] Central European Time, West African Time',		'2'		=> '[UTC + 2] Eastern European Time, Central African Time',		'3'		=> '[UTC + 3] Moscow Standard Time, Eastern African Time',		'3.5'	=> '[UTC + 3:30] Iran Standard Time',		'4'		=> '[UTC + 4] Gulf Standard Time, Samara Standard Time',		'4.5'	=> '[UTC + 4:30] Afghanistan Time',		'5'		=> '[UTC + 5] Pakistan Standard Time, Yekaterinburg Standard Time',		'5.5'	=> '[UTC + 5:30] Indian Standard Time, Sri Lanka Time',		'5.75'	=> '[UTC + 5:45] Nepal Time',		'6'		=> '[UTC + 6] Bangladesh Time, Bhutan Time, Novosibirsk Standard Time',		'6.5'	=> '[UTC + 6:30] Cocos Islands Time, Myanmar Time',		'7'		=> '[UTC + 7] Indochina Time, Krasnoyarsk Standard Time',		'8'		=> '[UTC + 8] Chinese Standard Time, Australian Western Standard Time, Irkutsk Standard Time',		'8.75'	=> '[UTC + 8:45] Southeastern Western Australia Standard Time',		'9'		=> '[UTC + 9] Japan Standard Time, Korea Standard Time, Chita Standard Time',		'9.5'	=> '[UTC + 9:30] Australian Central Standard Time',		'10'	=> '[UTC + 10] Australian Eastern Standard Time, Vladivostok Standard Time',		'10.5'	=> '[UTC + 10:30] Lord Howe Standard Time',		'11'	=> '[UTC + 11] Solomon Island Time, Magadan Standard Time',		'11.5'	=> '[UTC + 11:30] Norfolk Island Time',		'12'	=> '[UTC + 12] New Zealand Time, Fiji Time, Kamchatka Standard Time',		'12.75'	=> '[UTC + 12:45] Chatham Islands Time',		'13'	=> '[UTC + 13] Tonga Time, Phoenix Islands Time',		'14'	=> '[UTC + 14] Line Island Time',	),	// The value is only an example and will get replaced by the current time on view	'dateformats'	=> array(		'd M Y, H:i'			=> '01 Jan 2007, 13:37',		'd M Y H:i'				=> '01 Jan 2007 13:37',		'M jS, \'y, H:i'		=> 'Jan 1st, \'07, 13:37',		'D M d, Y g:i a'		=> 'Mon Jan 01, 2007 1:37 pm',		'F jS, Y, g:i a'		=> 'January 1st, 2007, 1:37 pm',		'|d M Y|, H:i'			=> 'Today, 13:37 / 01 Jan 2007, 13:37',		'|F jS, Y|, g:i a'		=> 'Today, 1:37 pm / January 1st, 2007, 1:37 pm'	),	// The default dateformat which will be used on new installs in this language	// Translators should change this if a the usual date format is different	'default_dateformat'	=> 'D M d, Y g:i a', // Mon Jan 01, 2007 1:37 pm));?>
<?php/**** acp_common [English]** @package language* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** DO NOT CHANGE*/if (!defined('IN_PHPBB')){	exit;}if (empty($lang) || !is_array($lang)){	$lang = array();}// DEVELOPERS PLEASE NOTE//// All language files should use UTF-8 as their encoding and the files must not contain a BOM.//// Placeholders can now contain order information, e.g. instead of// 'Page %s of %s' you can (and should) write 'Page %1$s of %2$s', this allows// translators to re-order the output of data while ensuring it remains correct//// You do not need this where single placeholders are used, e.g. 'Message %d' is fine// equally where a string contains only two placeholders which are used to wrap text// in a url you again do not need to specify an order e.g., 'Click %sHERE%s' is fine// Common$lang = array_merge($lang, array(	'ACP_ADMINISTRATORS'		=> 'Administrators',	'ACP_ADMIN_LOGS'			=> 'Admin log',	'ACP_ADMIN_ROLES'			=> 'Admin roles',	'ACP_ATTACHMENTS'			=> 'Attachments',	'ACP_ATTACHMENT_SETTINGS'	=> 'Attachment settings',	'ACP_AUTH_SETTINGS'			=> 'Authentication',	'ACP_AUTOMATION'			=> 'Automation',	'ACP_AVATAR_SETTINGS'		=> 'Avatar settings',	'ACP_BACKUP'				=> 'Backup',	'ACP_BAN'					=> 'Banning',	'ACP_BAN_EMAILS'			=> 'Ban e-mails',	'ACP_BAN_IPS'				=> 'Ban IPs',	'ACP_BAN_USERNAMES'			=> 'Ban usernames',	'ACP_BBCODES'				=> 'BBCodes',	'ACP_BOARD_CONFIGURATION'	=> 'Board configuration',	'ACP_BOARD_FEATURES'		=> 'Board features',	'ACP_BOARD_MANAGEMENT'		=> 'Board management',	'ACP_BOARD_SETTINGS'		=> 'Board settings',	'ACP_BOTS'					=> 'Spiders/Robots',	'ACP_CAPTCHA'				=> 'CAPTCHA',	'ACP_CAT_DATABASE'			=> 'Database',	'ACP_CAT_DOT_MODS'			=> '.MODs',	'ACP_CAT_FORUMS'			=> 'Forums',	'ACP_CAT_GENERAL'			=> 'General',	'ACP_CAT_MAINTENANCE'		=> 'Maintenance',	'ACP_CAT_PERMISSIONS'		=> 'Permissions',	'ACP_CAT_POSTING'			=> 'Posting',	'ACP_CAT_STYLES'			=> 'Styles',	'ACP_CAT_SYSTEM'			=> 'System',	'ACP_CAT_USERGROUP'			=> 'Users and Groups',	'ACP_CAT_USERS'				=> 'Users',	'ACP_CLIENT_COMMUNICATION'	=> 'Client communication',	'ACP_COOKIE_SETTINGS'		=> 'Cookie settings',	'ACP_CRITICAL_LOGS'			=> 'Error log',	'ACP_CUSTOM_PROFILE_FIELDS'	=> 'Custom profile fields',	'ACP_DATABASE'				=> 'Database management',	'ACP_DISALLOW'				=> 'Disallow',	'ACP_DISALLOW_USERNAMES'	=> 'Disallow usernames',	'ACP_EMAIL_SETTINGS'		=> 'E-mail settings',	'ACP_EXTENSION_GROUPS'		=> 'Manage extension groups',	'ACP_FORUM_BASED_PERMISSIONS'	=> 'Forum based permissions',	'ACP_FORUM_LOGS'				=> 'Forum logs',	'ACP_FORUM_MANAGEMENT'			=> 'Forum management',	'ACP_FORUM_MODERATORS'			=> 'Forum moderators',	'ACP_FORUM_PERMISSIONS'			=> 'Forum permissions',	'ACP_FORUM_PERMISSIONS_COPY'	=> 'Copy forum permissions',	'ACP_FORUM_ROLES'				=> 'Forum roles',	'ACP_GENERAL_CONFIGURATION'		=> 'General configuration',	'ACP_GENERAL_TASKS'				=> 'General tasks',	'ACP_GLOBAL_MODERATORS'			=> 'Global moderators',	'ACP_GLOBAL_PERMISSIONS'		=> 'Global permissions',	'ACP_GROUPS'					=> 'Groups',	'ACP_GROUPS_FORUM_PERMISSIONS'	=> 'Groups forum permissions',	'ACP_GROUPS_MANAGE'				=> 'Manage groups',	'ACP_GROUPS_MANAGEMENT'			=> 'Group management',	'ACP_GROUPS_PERMISSIONS'		=> 'Groups permissions',	'ACP_ICONS'					=> 'Topic icons',	'ACP_ICONS_SMILIES'			=> 'Topic icons/smilies',	'ACP_IMAGESETS'				=> 'Imagesets',	'ACP_INACTIVE_USERS'		=> 'Inactive users',	'ACP_INDEX'					=> 'ACP index',	'ACP_JABBER_SETTINGS'		=> 'Jabber settings',	'ACP_LANGUAGE'				=> 'Language management',	'ACP_LANGUAGE_PACKS'		=> 'Language packs',	'ACP_LOAD_SETTINGS'			=> 'Load settings',	'ACP_LOGGING'				=> 'Logging',	'ACP_MAIN'					=> 'ACP index',	'ACP_MANAGE_EXTENSIONS'		=> 'Manage extensions',	'ACP_MANAGE_FORUMS'			=> 'Manage forums',	'ACP_MANAGE_RANKS'			=> 'Manage ranks',	'ACP_MANAGE_REASONS'		=> 'Manage report/denial reasons',	'ACP_MANAGE_USERS'			=> 'Manage users',	'ACP_MASS_EMAIL'			=> 'Mass e-mail',	'ACP_MESSAGES'				=> 'Messages',	'ACP_MESSAGE_SETTINGS'		=> 'Private message settings',	'ACP_MODULE_MANAGEMENT'		=> 'Module management',	'ACP_MOD_LOGS'				=> 'Moderator log',	'ACP_MOD_ROLES'				=> 'Moderator roles',	'ACP_NO_ITEMS'				=> 'There are no items yet.',	'ACP_ORPHAN_ATTACHMENTS'	=> 'Orphaned attachments',	'ACP_PERMISSIONS'			=> 'Permissions',	'ACP_PERMISSION_MASKS'		=> 'Permission masks',	'ACP_PERMISSION_ROLES'		=> 'Permission roles',	'ACP_PERMISSION_TRACE'		=> 'Permission trace',	'ACP_PHP_INFO'				=> 'PHP information',	'ACP_POST_SETTINGS'			=> 'Post settings',	'ACP_PRUNE_FORUMS'			=> 'Prune forums',	'ACP_PRUNE_USERS'			=> 'Prune users',	'ACP_PRUNING'				=> 'Pruning',	'ACP_QUICK_ACCESS'			=> 'Quick access',	'ACP_RANKS'					=> 'Ranks',	'ACP_REASONS'				=> 'Report/denial reasons',	'ACP_REGISTER_SETTINGS'		=> 'User registration settings',	'ACP_RESTORE'				=> 'Restore',	'ACP_FEED'					=> 'Feed management',	'ACP_FEED_SETTINGS'			=> 'Feed settings',	'ACP_SEARCH'				=> 'Search configuration',	'ACP_SEARCH_INDEX'			=> 'Search index',	'ACP_SEARCH_SETTINGS'		=> 'Search settings',	'ACP_SECURITY_SETTINGS'		=> 'Security settings',	'ACP_SEND_STATISTICS'		=> 'Send statistical information',	'ACP_SERVER_CONFIGURATION'	=> 'Server configuration',	'ACP_SERVER_SETTINGS'		=> 'Server settings',	'ACP_SIGNATURE_SETTINGS'	=> 'Signature settings',	'ACP_SMILIES'				=> 'Smilies',	'ACP_STYLE_COMPONENTS'		=> 'Style components',	'ACP_STYLE_MANAGEMENT'		=> 'Style management',	'ACP_STYLES'				=> 'Styles',	'ACP_SUBMIT_CHANGES'		=> 'Submit changes',	'ACP_TEMPLATES'				=> 'Templates',	'ACP_THEMES'				=> 'Themes',	'ACP_UPDATE'					=> 'Updating',	'ACP_USERS_FORUM_PERMISSIONS'	=> 'Users forum permissions',	'ACP_USERS_LOGS'				=> 'User logs',	'ACP_USERS_PERMISSIONS'			=> 'Users permissions',	'ACP_USER_ATTACH'				=> 'Attachments',	'ACP_USER_AVATAR'				=> 'Avatar',	'ACP_USER_FEEDBACK'				=> 'Feedback',	'ACP_USER_GROUPS'				=> 'Groups',	'ACP_USER_MANAGEMENT'			=> 'User management',	'ACP_USER_OVERVIEW'				=> 'Overview',	'ACP_USER_PERM'					=> 'Permissions',	'ACP_USER_PREFS'				=> 'Preferences',	'ACP_USER_PROFILE'				=> 'Profile',	'ACP_USER_RANK'					=> 'Rank',	'ACP_USER_ROLES'				=> 'User roles',	'ACP_USER_SECURITY'				=> 'User security',	'ACP_USER_SIG'					=> 'Signature',	'ACP_USER_WARNINGS'				=> 'Warnings',	'ACP_VC_SETTINGS'					=> 'Spambot countermeasures',	'ACP_VC_CAPTCHA_DISPLAY'			=> 'CAPTCHA image preview',	'ACP_VERSION_CHECK'					=> 'Check for updates',	'ACP_VIEW_ADMIN_PERMISSIONS'		=> 'View administrative permissions',	'ACP_VIEW_FORUM_MOD_PERMISSIONS'	=> 'View forum moderation permissions',	'ACP_VIEW_FORUM_PERMISSIONS'		=> 'View forum-based permissions',	'ACP_VIEW_GLOBAL_MOD_PERMISSIONS'	=> 'View global moderation permissions',	'ACP_VIEW_USER_PERMISSIONS'			=> 'View user-based permissions',	'ACP_WORDS'					=> 'Word censoring',	'ACTION'				=> 'Action',	'ACTIONS'				=> 'Actions',	'ACTIVATE'				=> 'Activate',	'ADD'					=> 'Add',	'ADMIN'					=> 'Administration',	'ADMIN_INDEX'			=> 'Admin index',	'ADMIN_PANEL'			=> 'Administration Control Panel',	'ADM_LOGOUT'			=> 'ACP&nbsp;Logout',	'ADM_LOGGED_OUT'		=> 'Successfully logged out from Administration Control Panel',	'BACK'					=> 'Back',	'COLOUR_SWATCH'			=> 'Web-safe colour swatch',	'CONFIG_UPDATED'		=> 'Configuration updated successfully.',	'DEACTIVATE'				=> 'Deactivate',	'DIRECTORY_DOES_NOT_EXIST'	=> 'The entered path %s does not exist.',	'DIRECTORY_NOT_DIR'			=> 'The entered path %s is not a directory.',	'DIRECTORY_NOT_WRITABLE'	=> 'The entered path %s is not writable.',	'DISABLE'					=> 'Disable',	'DOWNLOAD'					=> 'Download',	'DOWNLOAD_AS'				=> 'Download as',	'DOWNLOAD_STORE'			=> 'Download or store file',	'DOWNLOAD_STORE_EXPLAIN'	=> 'You may directly download the file or save it in your <samp>store/</samp> folder.',	'EDIT'					=> 'Edit',	'ENABLE'				=> 'Enable',	'EXPORT_DOWNLOAD'		=> 'Download',	'EXPORT_STORE'			=> 'Store',	'GENERAL_OPTIONS'		=> 'General options',	'GENERAL_SETTINGS'		=> 'General settings',	'GLOBAL_MASK'			=> 'Global permission mask',	'INSTALL'				=> 'Install',	'IP'					=> 'User IP',	'IP_HOSTNAME'			=> 'IP addresses or hostnames',	'LOGGED_IN_AS'			=> 'You are logged in as:',	'LOGIN_ADMIN'			=> 'To administer the board you must be an authenticated user.',	'LOGIN_ADMIN_CONFIRM'	=> 'To administer the board you must re-authenticate yourself.',	'LOGIN_ADMIN_SUCCESS'	=> 'You have successfully authenticated and will now be redirected to the Administration Control Panel.',	'LOOK_UP_FORUM'			=> 'Select a forum',	'LOOK_UP_FORUMS_EXPLAIN'=> 'You are able to select more than one forum.',	'MANAGE'				=> 'Manage',	'MENU_TOGGLE'			=> 'Hide or display the side menu',	'MORE'					=> 'More',			// Not used at the moment	'MORE_INFORMATION'		=> 'More information ',	'MOVE_DOWN'				=> 'Move down',	'MOVE_UP'				=> 'Move up',	'NOTIFY'				=> 'Notification',	'NO_ADMIN'				=> 'You are not authorised to administer this board.',	'NO_EMAILS_DEFINED'		=> 'No valid e-mail addresses found.',	'NO_PASSWORD_SUPPLIED'	=> 'You need to enter your password to access the Administration Control Panel.',	'OFF'					=> 'Off',	'ON'					=> 'On',	'PARSE_BBCODE'						=> 'Parse BBCode',	'PARSE_SMILIES'						=> 'Parse smilies',	'PARSE_URLS'						=> 'Parse links',	'PERMISSIONS_TRANSFERRED'			=> 'Permissions transferred',	'PERMISSIONS_TRANSFERRED_EXPLAIN'	=> 'You currently have the permissions from %1$s. You are able to browse the board with this users permissions, but not access the administration control panel since admin permissions were not transferred. You can <a href="%2$s"><strong>revert to your permission set</strong></a> at any time.',	'PROCEED_TO_ACP'					=> '%sProceed to the ACP%s',	'REMIND'							=> 'Remind',	'RESYNC'							=> 'Resynchronise',	'RETURN_TO'							=> 'Return to',	'SELECT_ANONYMOUS'		=> 'Select anonymous user',	'SELECT_OPTION'			=> 'Select option',	'SETTING_TOO_LOW'		=> 'The provided value for the setting %1$s is too low. The minimum acceptable value is %2$d.',	'SETTING_TOO_BIG'		=> 'The provided value for the setting %1$s is too high. The maximum acceptable value is %2$d.',	'SETTING_TOO_LONG'		=> 'The provided value for the setting %1$s is too long. The maximum acceptable length is %2$d.',	'SETTING_TOO_SHORT'		=> 'The provided value for the setting %1$s is too short. The minimum acceptable length is %2$d.',	'SHOW_ALL_OPERATIONS'	=> 'Show all operations',	'UCP'					=> 'User Control Panel',	'USERNAMES_EXPLAIN'		=> 'Place each username on a separate line.',	'USER_CONTROL_PANEL'	=> 'User Control Panel',	'WARNING'				=> 'Warning',));// PHP info$lang = array_merge($lang, array(	'ACP_PHP_INFO_EXPLAIN'	=> 'This page lists information on the version of PHP installed on this server. It includes details of loaded modules, available variables and default settings. This information may be useful when diagnosing problems. Please be aware that some hosting companies will limit what information is displayed here for security reasons. You are advised to not give out any details on this page except when asked by <a href="http://www.phpbb.com/about/team/">official team members</a> on the support forums.',	'NO_PHPINFO_AVAILABLE'	=> 'Information about your PHP configuration is unable to be determined. Phpinfo() has been disabled for security reasons.',));// Logs$lang = array_merge($lang, array(	'ACP_ADMIN_LOGS_EXPLAIN'	=> 'This lists all the actions carried out by board administrators. You can sort by username, date, IP or action. If you have appropriate permissions you can also clear individual operations or the log as a whole.',	'ACP_CRITICAL_LOGS_EXPLAIN'	=> 'This lists the actions carried out by the board itself. This log provides you with information you are able to use for solving specific problems, for example non-delivery of e-mails. You can sort by username, date, IP or action. If you have appropriate permissions you can also clear individual operations or the log as a whole.',	'ACP_MOD_LOGS_EXPLAIN'		=> 'This lists all actions done on forums, topics and posts as well as actions carried out on users by moderators, including banning. You can sort by username, date, IP or action. If you have appropriate permissions you can also clear individual operations or the log as a whole.',	'ACP_USERS_LOGS_EXPLAIN'	=> 'This lists all actions carried out by users or on users (reports, warnings and user notes).',	'ALL_ENTRIES'				=> 'All entries',	'DISPLAY_LOG'	=> 'Display entries from previous',	'NO_ENTRIES'	=> 'No log entries for this period.',	'SORT_IP'		=> 'IP address',	'SORT_DATE'		=> 'Date',	'SORT_ACTION'	=> 'Log action',));// Index page$lang = array_merge($lang, array(	'ADMIN_INTRO'				=> 'Thank you for choosing phpBB as your board solution. This screen will give you a quick overview of all the various statistics of your board. The links on the left hand side of this screen allow you to control every aspect of your board experience. Each page will have instructions on how to use the tools.',	'ADMIN_LOG'					=> 'Logged administrator actions',	'ADMIN_LOG_INDEX_EXPLAIN'	=> 'This gives an overview of the last five actions carried out by board administrators. A full copy of the log can be viewed from the appropriate menu item or following the link below.',	'AVATAR_DIR_SIZE'			=> 'Avatar directory size',	'BOARD_STARTED'		=> 'Board started',	'BOARD_VERSION'		=> 'Board version',	'DATABASE_SERVER_INFO'	=> 'Database server',	'DATABASE_SIZE'			=> 'Database size',	// Enviroment configuration checks, mbstring related	'ERROR_MBSTRING_FUNC_OVERLOAD'					=> 'Function overloading is improperly configured',	'ERROR_MBSTRING_FUNC_OVERLOAD_EXPLAIN'			=> '<var>mbstring.func_overload</var> must be set to either 0 or 4. You can check the current value on the <samp>PHP information</samp> page.',	'ERROR_MBSTRING_ENCODING_TRANSLATION'			=> 'Transparent character encoding is improperly configured',	'ERROR_MBSTRING_ENCODING_TRANSLATION_EXPLAIN'	=> '<var>mbstring.encoding_translation</var> must be set to 0. You can check the current value on the <samp>PHP information</samp> page.',	'ERROR_MBSTRING_HTTP_INPUT'						=> 'HTTP input character conversion is improperly configured',	'ERROR_MBSTRING_HTTP_INPUT_EXPLAIN'				=> '<var>mbstring.http_input</var> must be set to <samp>pass</samp>. You can check the current value on the <samp>PHP information</samp> page.',	'ERROR_MBSTRING_HTTP_OUTPUT'					=> 'HTTP output character conversion is improperly configured',	'ERROR_MBSTRING_HTTP_OUTPUT_EXPLAIN'			=> '<var>mbstring.http_output</var> must be set to <samp>pass</samp>. You can check the current value on the <samp>PHP information</samp> page.',	'FILES_PER_DAY'		=> 'Attachments per day',	'FORUM_STATS'		=> 'Board statistics',	'GZIP_COMPRESSION'	=> 'GZip compression',	'NOT_AVAILABLE'		=> 'Not available',	'NUMBER_FILES'		=> 'Number of attachments',	'NUMBER_POSTS'		=> 'Number of posts',	'NUMBER_TOPICS'		=> 'Number of topics',	'NUMBER_USERS'		=> 'Number of users',	'NUMBER_ORPHAN'		=> 'Orphan attachments',	'PHP_VERSION_OLD'	=> 'The version of PHP on this server will no longer be supported by future versions of phpBB. %sDetails%s',	'POSTS_PER_DAY'		=> 'Posts per day',	'PURGE_CACHE'			=> 'Purge the cache',	'PURGE_CACHE_CONFIRM'	=> 'Are you sure you wish to purge the cache?',	'PURGE_CACHE_EXPLAIN'	=> 'Purge all cache related items, this includes any cached template files or queries.',	'PURGE_SESSIONS'			=> 'Purge all sessions',	'PURGE_SESSIONS_CONFIRM'	=> 'Are you sure you wish to purge all sessions? This will log out all users.',	'PURGE_SESSIONS_EXPLAIN'	=> 'Purge all sessions. This will log out all users by truncating the session table.',	'RESET_DATE'					=> 'Reset boards start date',	'RESET_DATE_CONFIRM'			=> 'Are you sure you wish to reset the boards start date?',	'RESET_ONLINE'					=> 'Reset most users ever online',	'RESET_ONLINE_CONFIRM'			=> 'Are you sure you wish to reset the most users ever online counter?',	'RESYNC_POSTCOUNTS'				=> 'Resynchronise post counts',	'RESYNC_POSTCOUNTS_EXPLAIN'		=> 'Only existing posts will be taken into consideration. Pruned posts will not be counted.',	'RESYNC_POSTCOUNTS_CONFIRM'		=> 'Are you sure you wish to resynchronise post counts?',	'RESYNC_POST_MARKING'			=> 'Resynchronise dotted topics',	'RESYNC_POST_MARKING_CONFIRM'	=> 'Are you sure you wish to resynchronise dotted topics?',	'RESYNC_POST_MARKING_EXPLAIN'	=> 'First unmarks all topics and then correctly marks topics that have seen any activity during the past six months.',	'RESYNC_STATS'					=> 'Resynchronise statistics',	'RESYNC_STATS_CONFIRM'			=> 'Are you sure you wish to resynchronise statistics?',	'RESYNC_STATS_EXPLAIN'			=> 'Recalculates the total number of posts, topics, users and files.',	'RUN'							=> 'Run now',	'STATISTIC'					=> 'Statistic',	'STATISTIC_RESYNC_OPTIONS'	=> 'Resynchronise or reset statistics',	'TOPICS_PER_DAY'	=> 'Topics per day',	'UPLOAD_DIR_SIZE'	=> 'Size of posted attachments',	'USERS_PER_DAY'		=> 'Users per day',	'VALUE'						=> 'Value',	'VERSIONCHECK_FAIL'			=> 'Failed to obtain latest version information.',	'VERSIONCHECK_FORCE_UPDATE'	=> 'Re-Check version',	'VIEW_ADMIN_LOG'			=> 'View administrator log',	'VIEW_INACTIVE_USERS'		=> 'View inactive users',	'WELCOME_PHPBB'			=> 'Welcome to phpBB',	'WRITABLE_CONFIG'		=> 'Your config file (config.php) is currently world-writable. We strongly encourage you to change the permissions to 640 or at least to 644 (for example: <a href="http://en.wikipedia.org/wiki/Chmod" rel="external">chmod</a> 640 config.php).',));// Inactive Users$lang = array_merge($lang, array(	'INACTIVE_DATE'					=> 'Inactive date',	'INACTIVE_REASON'				=> 'Reason',	'INACTIVE_REASON_MANUAL'		=> 'Account deactivated by administrator',	'INACTIVE_REASON_PROFILE'		=> 'Profile details changed',	'INACTIVE_REASON_REGISTER'		=> 'Newly registered account',	'INACTIVE_REASON_REMIND'		=> 'Forced user account reactivation',	'INACTIVE_REASON_UNKNOWN'		=> 'Unknown',	'INACTIVE_USERS'				=> 'Inactive users',	'INACTIVE_USERS_EXPLAIN'		=> 'This is a list of users who have registered but whose accounts are inactive. You can activate, delete or remind (by sending an e-mail) these users if you wish.',	'INACTIVE_USERS_EXPLAIN_INDEX'	=> 'This is a list of the last 10 registered users who have inactive accounts. A full list is available from the appropriate menu item or by following the link below from where you can activate, delete or remind (by sending an e-mail) these users if you wish.',	'NO_INACTIVE_USERS'	=> 'No inactive users',	'SORT_INACTIVE'		=> 'Inactive date',	'SORT_LAST_VISIT'	=> 'Last visit',	'SORT_REASON'		=> 'Reason',	'SORT_REG_DATE'		=> 'Registration date',	'SORT_LAST_REMINDER'=> 'Last reminded',	'SORT_REMINDER'		=> 'Reminder sent',	'USER_IS_INACTIVE'		=> 'User is inactive',));// Send statistics page$lang = array_merge($lang, array(	'EXPLAIN_SEND_STATISTICS'	=> 'Please send information about your server and board configurations to phpBB for statistical analysis. All information that could identify you or your website has been removed - the data is entirely <strong>anonymous</strong>. We base decisions about future phpBB versions on this information. The statistics are made available publically. We also share this data with the PHP project, the programming language phpBB is made with.',	'EXPLAIN_SHOW_STATISTICS'	=> 'Using the button below you can preview all variables that will be transmitted.',	'DONT_SEND_STATISTICS'		=> 'Return to the ACP if you do not wish to send statistical information to phpBB.',	'GO_ACP_MAIN'				=> 'Go to the ACP start page',	'HIDE_STATISTICS'			=> 'Hide details',	'SEND_STATISTICS'			=> 'Send statistical information',	'SHOW_STATISTICS'			=> 'Show details',	'THANKS_SEND_STATISTICS'	=> 'Thank you for submitting your information.',));// Log Entries$lang = array_merge($lang, array(	'LOG_ACL_ADD_USER_GLOBAL_U_'		=> '<strong>Added or edited users user permissions</strong><br /> %s',	'LOG_ACL_ADD_GROUP_GLOBAL_U_'		=> '<strong>Added or edited groups user permissions</strong><br /> %s',	'LOG_ACL_ADD_USER_GLOBAL_M_'		=> '<strong>Added or edited users global moderator permissions</strong><br /> %s',	'LOG_ACL_ADD_GROUP_GLOBAL_M_'		=> '<strong>Added or edited groups global moderator permissions</strong><br /> %s',	'LOG_ACL_ADD_USER_GLOBAL_A_'		=> '<strong>Added or edited users administrator permissions</strong><br /> %s',	'LOG_ACL_ADD_GROUP_GLOBAL_A_'		=> '<strong>Added or edited groups administrator permissions</strong><br /> %s',	'LOG_ACL_ADD_ADMIN_GLOBAL_A_'		=> '<strong>Added or edited Administrators</strong><br /> %s',	'LOG_ACL_ADD_MOD_GLOBAL_M_'			=> '<strong>Added or edited Global Moderators</strong><br /> %s',	'LOG_ACL_ADD_USER_LOCAL_F_'			=> '<strong>Added or edited users forum access</strong> from %1$s<br /> %2$s',	'LOG_ACL_ADD_USER_LOCAL_M_'			=> '<strong>Added or edited users forum moderator access</strong> from %1$s<br /> %2$s',	'LOG_ACL_ADD_GROUP_LOCAL_F_'		=> '<strong>Added or edited groups forum access</strong> from %1$s<br /> %2$s',	'LOG_ACL_ADD_GROUP_LOCAL_M_'		=> '<strong>Added or edited groups forum moderator access</strong> from %1$s<br /> %2$s',	'LOG_ACL_ADD_MOD_LOCAL_M_'			=> '<strong>Added or edited Moderators</strong> from %1$s<br /> %2$s',	'LOG_ACL_ADD_FORUM_LOCAL_F_'		=> '<strong>Added or edited forum permissions</strong> from %1$s<br /> %2$s',	'LOG_ACL_DEL_ADMIN_GLOBAL_A_'		=> '<strong>Removed Administrators</strong><br /> %s',	'LOG_ACL_DEL_MOD_GLOBAL_M_'			=> '<strong>Removed Global Moderators</strong><br /> %s',	'LOG_ACL_DEL_MOD_LOCAL_M_'			=> '<strong>Removed Moderators</strong> from %1$s<br /> %2$s',	'LOG_ACL_DEL_FORUM_LOCAL_F_'		=> '<strong>Removed User/Group forum permissions</strong> from %1$s<br /> %2$s',	'LOG_ACL_TRANSFER_PERMISSIONS'		=> '<strong>Permissions transferred from</strong><br /> %s',	'LOG_ACL_RESTORE_PERMISSIONS'		=> '<strong>Own permissions restored after using permissions from</strong><br /> %s',	'LOG_ADMIN_AUTH_FAIL'		=> '<strong>Failed administration login attempt</strong>',	'LOG_ADMIN_AUTH_SUCCESS'	=> '<strong>Successful administration login</strong>',	'LOG_ATTACHMENTS_DELETED'	=> '<strong>Removed user attachments</strong><br /> %s',	'LOG_ATTACH_EXT_ADD'		=> '<strong>Added or edited attachment extension</strong><br /> %s',	'LOG_ATTACH_EXT_DEL'		=> '<strong>Removed attachment extension</strong><br /> %s',	'LOG_ATTACH_EXT_UPDATE'		=> '<strong>Updated attachment extension</strong><br /> %s',	'LOG_ATTACH_EXTGROUP_ADD'	=> '<strong>Added extension group</strong><br /> %s',	'LOG_ATTACH_EXTGROUP_EDIT'	=> '<strong>Edited extension group</strong><br /> %s',	'LOG_ATTACH_EXTGROUP_DEL'	=> '<strong>Removed extension group</strong><br /> %s',	'LOG_ATTACH_FILEUPLOAD'		=> '<strong>Orphan File uploaded to Post</strong><br /> ID %1$d - %2$s',	'LOG_ATTACH_ORPHAN_DEL'		=> '<strong>Orphan Files deleted</strong><br /> %s',	'LOG_BAN_EXCLUDE_USER'	=> '<strong>Excluded user from ban</strong> for reason <em>%1$s</em><br /> %2$s',	'LOG_BAN_EXCLUDE_IP'	=> '<strong>Excluded IP from ban</strong> for reason <em>%1$s</em><br /> %2$s',	'LOG_BAN_EXCLUDE_EMAIL' => '<strong>Excluded e-mail from ban</strong> for reason <em>%1$s</em><br /> %2$s',	'LOG_BAN_USER'			=> '<strong>Banned user</strong> for reason <em>%1$s</em><br /> %2$s',	'LOG_BAN_IP'			=> '<strong>Banned IP</strong> for reason <em>%1$s</em><br /> %2$s',	'LOG_BAN_EMAIL'			=> '<strong>Banned e-mail</strong> for reason <em>%1$s</em><br /> %2$s',	'LOG_UNBAN_USER'		=> '<strong>Unbanned user</strong><br /> %s',	'LOG_UNBAN_IP'			=> '<strong>Unbanned IP</strong><br /> %s',	'LOG_UNBAN_EMAIL'		=> '<strong>Unbanned e-mail</strong><br /> %s',	'LOG_BBCODE_ADD'		=> '<strong>Added new BBCode</strong><br /> %s',	'LOG_BBCODE_EDIT'		=> '<strong>Edited BBCode</strong><br /> %s',	'LOG_BBCODE_DELETE'		=> '<strong>Deleted BBCode</strong><br /> %s',	'LOG_BOT_ADDED'		=> '<strong>New bot added</strong><br /> %s',	'LOG_BOT_DELETE'	=> '<strong>Deleted bot</strong><br /> %s',	'LOG_BOT_UPDATED'	=> '<strong>Existing bot updated</strong><br /> %s',	'LOG_CLEAR_ADMIN'		=> '<strong>Cleared admin log</strong>',	'LOG_CLEAR_CRITICAL'	=> '<strong>Cleared error log</strong>',	'LOG_CLEAR_MOD'			=> '<strong>Cleared moderator log</strong>',	'LOG_CLEAR_USER'		=> '<strong>Cleared user log</strong><br /> %s',	'LOG_CLEAR_USERS'		=> '<strong>Cleared user logs</strong>',	'LOG_CONFIG_ATTACH'			=> '<strong>Altered attachment settings</strong>',	'LOG_CONFIG_AUTH'			=> '<strong>Altered authentication settings</strong>',	'LOG_CONFIG_AVATAR'			=> '<strong>Altered avatar settings</strong>',	'LOG_CONFIG_COOKIE'			=> '<strong>Altered cookie settings</strong>',	'LOG_CONFIG_EMAIL'			=> '<strong>Altered e-mail settings</strong>',	'LOG_CONFIG_FEATURES'		=> '<strong>Altered board features</strong>',	'LOG_CONFIG_LOAD'			=> '<strong>Altered load settings</strong>',	'LOG_CONFIG_MESSAGE'		=> '<strong>Altered private message settings</strong>',	'LOG_CONFIG_POST'			=> '<strong>Altered post settings</strong>',	'LOG_CONFIG_REGISTRATION'	=> '<strong>Altered user registration settings</strong>',	'LOG_CONFIG_FEED'			=> '<strong>Altered syndication feeds settings</strong>',	'LOG_CONFIG_SEARCH'			=> '<strong>Altered search settings</strong>',	'LOG_CONFIG_SECURITY'		=> '<strong>Altered security settings</strong>',	'LOG_CONFIG_SERVER'			=> '<strong>Altered server settings</strong>',	'LOG_CONFIG_SETTINGS'		=> '<strong>Altered board settings</strong>',	'LOG_CONFIG_SIGNATURE'		=> '<strong>Altered signature settings</strong>',	'LOG_CONFIG_VISUAL'			=> '<strong>Altered anti-spambot settings</strong>',	'LOG_APPROVE_TOPIC'			=> '<strong>Approved topic</strong><br /> %s',	'LOG_BUMP_TOPIC'			=> '<strong>User bumped topic</strong><br /> %s',	'LOG_DELETE_POST'			=> '<strong>Deleted post %1$s written by</strong><br /> %2$s',	'LOG_DELETE_SHADOW_TOPIC'	=> '<strong>Deleted shadow topic</strong><br /> %s',	'LOG_DELETE_TOPIC'			=> '<strong>Deleted topic %1$s written by</strong><br /> %2$s',	'LOG_FORK'					=> '<strong>Copied topic</strong><br /> from %s',	'LOG_LOCK'					=> '<strong>Locked topic</strong><br /> %s',	'LOG_LOCK_POST'				=> '<strong>Locked post</strong><br /> %s',	'LOG_MERGE'					=> '<strong>Merged posts</strong> into topic<br /> %s',	'LOG_MOVE'					=> '<strong>Moved topic</strong><br /> from %1$s to %2$s',	'LOG_PM_REPORT_CLOSED'		=> '<strong>Closed PM report</strong><br /> %s',	'LOG_PM_REPORT_DELETED'		=> '<strong>Deleted PM report</strong><br /> %s',	'LOG_POST_APPROVED'			=> '<strong>Approved post</strong><br /> %s',	'LOG_POST_DISAPPROVED'		=> '<strong>Disapproved post %1$s with the following reason</strong><br /> %2$s',	'LOG_POST_EDITED'			=> '<strong>Edited post %1$s written by</strong><br /> %2$s',	'LOG_REPORT_CLOSED'			=> '<strong>Closed report</strong><br /> %s',	'LOG_REPORT_DELETED'		=> '<strong>Deleted report</strong><br /> %s',	'LOG_SPLIT_DESTINATION'		=> '<strong>Moved split posts</strong><br /> to %s',	'LOG_SPLIT_SOURCE'			=> '<strong>Split posts</strong><br /> from %s',	'LOG_TOPIC_APPROVED'		=> '<strong>Approved topic</strong><br /> %s',	'LOG_TOPIC_DISAPPROVED'		=> '<strong>Disapproved topic %1$s with the following reason</strong><br />%2$s',	'LOG_TOPIC_RESYNC'			=> '<strong>Resynchronised topic counters</strong><br /> %s',	'LOG_TOPIC_TYPE_CHANGED'	=> '<strong>Changed topic type</strong><br /> %s',	'LOG_UNLOCK'				=> '<strong>Unlocked topic</strong><br /> %s',	'LOG_UNLOCK_POST'			=> '<strong>Unlocked post</strong><br /> %s',	'LOG_DISALLOW_ADD'		=> '<strong>Added disallowed username</strong><br /> %s',	'LOG_DISALLOW_DELETE'	=> '<strong>Deleted disallowed username</strong>',	'LOG_DB_BACKUP'			=> '<strong>Database backup</strong>',	'LOG_DB_DELETE'			=> '<strong>Deleted database backup</strong>',	'LOG_DB_RESTORE'		=> '<strong>Restored database backup</strong>',	'LOG_DOWNLOAD_EXCLUDE_IP'	=> '<strong>Excluded IP/hostname from download list</strong><br /> %s',	'LOG_DOWNLOAD_IP'			=> '<strong>Added IP/hostname to download list</strong><br /> %s',	'LOG_DOWNLOAD_REMOVE_IP'	=> '<strong>Removed IP/hostname from download list</strong><br /> %s',	'LOG_ERROR_JABBER'		=> '<strong>Jabber error</strong><br /> %s',	'LOG_ERROR_EMAIL'		=> '<strong>E-mail error</strong><br /> %s',	'LOG_FORUM_ADD'							=> '<strong>Created new forum</strong><br /> %s',	'LOG_FORUM_COPIED_PERMISSIONS'			=> '<strong>Copied forum permissions</strong> from %1$s<br /> %2$s',	'LOG_FORUM_DEL_FORUM'					=> '<strong>Deleted forum</strong><br /> %s',	'LOG_FORUM_DEL_FORUMS'					=> '<strong>Deleted forum and its subforums</strong><br /> %s',	'LOG_FORUM_DEL_MOVE_FORUMS'				=> '<strong>Deleted forum and moved subforums</strong> to %1$s<br /> %2$s',	'LOG_FORUM_DEL_MOVE_POSTS'				=> '<strong>Deleted forum and moved posts </strong> to %1$s<br /> %2$s',	'LOG_FORUM_DEL_MOVE_POSTS_FORUMS'		=> '<strong>Deleted forum and its subforums, moved posts</strong> to %1$s<br /> %2$s',	'LOG_FORUM_DEL_MOVE_POSTS_MOVE_FORUMS'	=> '<strong>Deleted forum, moved posts</strong> to %1$s <strong>and subforums</strong> to %2$s<br /> %3$s',	'LOG_FORUM_DEL_POSTS'					=> '<strong>Deleted forum and its posts</strong><br /> %s',	'LOG_FORUM_DEL_POSTS_FORUMS'			=> '<strong>Deleted forum, its posts and subforums</strong><br /> %s',	'LOG_FORUM_DEL_POSTS_MOVE_FORUMS'		=> '<strong>Deleted forum and its posts, moved subforums</strong> to %1$s<br /> %2$s',	'LOG_FORUM_EDIT'						=> '<strong>Edited forum details</strong><br /> %s',	'LOG_FORUM_MOVE_DOWN'					=> '<strong>Moved forum</strong> %1$s <strong>below</strong> %2$s',	'LOG_FORUM_MOVE_UP'						=> '<strong>Moved forum</strong> %1$s <strong>above</strong> %2$s',	'LOG_FORUM_SYNC'						=> '<strong>Re-synchronised forum</strong><br /> %s',	'LOG_GENERAL_ERROR'	=> '<strong>A general error occured</strong>: %1$s <br /> %2$s',	'LOG_GROUP_CREATED'		=> '<strong>New usergroup created</strong><br /> %s',	'LOG_GROUP_DEFAULTS'	=> '<strong>Group %1$s made default for members</strong><br /> %2$s',	'LOG_GROUP_DELETE'		=> '<strong>Usergroup deleted</strong><br /> %s',	'LOG_GROUP_DEMOTED'		=> '<strong>Leaders demoted in usergroup</strong> %1$s<br /> %2$s',	'LOG_GROUP_PROMOTED'	=> '<strong>Members promoted to leader in usergroup</strong> %1$s<br /> %2$s',	'LOG_GROUP_REMOVE'		=> '<strong>Members removed from usergroup</strong> %1$s<br /> %2$s',	'LOG_GROUP_UPDATED'		=> '<strong>Usergroup details updated</strong><br /> %s',	'LOG_MODS_ADDED'		=> '<strong>Added new leaders to usergroup</strong> %1$s<br /> %2$s',	'LOG_USERS_ADDED'		=> '<strong>Added new members to usergroup</strong> %1$s<br /> %2$s',	'LOG_USERS_APPROVED'	=> '<strong>Users approved in usergroup</strong> %1$s<br /> %2$s',	'LOG_USERS_PENDING'		=> '<strong>Users requested to join group %1$s and need to be approved</strong><br /> %2$s',	'LOG_IMAGE_GENERATION_ERROR'	=> '<strong>Error while creating image</strong><br /> Error in %1$s on line %2$s: %3$s',	'LOG_IMAGESET_ADD_DB'			=> '<strong>Added new imageset to database</strong><br /> %s',	'LOG_IMAGESET_ADD_FS'			=> '<strong>Add new imageset on filesystem</strong><br /> %s',	'LOG_IMAGESET_DELETE'			=> '<strong>Deleted imageset</strong><br /> %s',	'LOG_IMAGESET_EDIT_DETAILS'		=> '<strong>Edited imageset details</strong><br /> %s',	'LOG_IMAGESET_EDIT'				=> '<strong>Edited imageset</strong><br /> %s',	'LOG_IMAGESET_EXPORT'			=> '<strong>Exported imageset</strong><br /> %s',	'LOG_IMAGESET_LANG_MISSING'		=> '<strong>Imageset misses %2$s localisation</strong><br /> %1$s',	'LOG_IMAGESET_LANG_REFRESHED'	=> '<strong>Refreshed %2$s localisation of imageset</strong><br /> %1$s',	'LOG_IMAGESET_REFRESHED'		=> '<strong>Refreshed imageset</strong><br /> %s',	'LOG_INACTIVE_ACTIVATE'	=> '<strong>Activated inactive users</strong><br /> %s',	'LOG_INACTIVE_DELETE'	=> '<strong>Deleted inactive users</strong><br /> %s',	'LOG_INACTIVE_REMIND'	=> '<strong>Sent reminder e-mails to inactive users</strong><br /> %s',	'LOG_INSTALL_CONVERTED'	=> '<strong>Converted from %1$s to phpBB %2$s</strong>',	'LOG_INSTALL_INSTALLED'	=> '<strong>Installed phpBB %s</strong>',	'LOG_IP_BROWSER_FORWARDED_CHECK'	=> '<strong>Session IP/browser/X_FORWARDED_FOR check failed</strong><br />User IP <em>%1$s</em> checked against session IP <em>%2$s</em>, user browser string <em>%3$s</em> checked against session browser string <em>%4$s</em> and user X_FORWARDED_FOR string <em>%5$s</em> checked against session X_FORWARDED_FOR string <em>%6$s</em>.',	'LOG_JAB_CHANGED'			=> '<strong>Jabber account changed</strong>',	'LOG_JAB_PASSCHG'			=> '<strong>Jabber password changed</strong>',	'LOG_JAB_REGISTER'			=> '<strong>Jabber account registered</strong>',	'LOG_JAB_SETTINGS_CHANGED'	=> '<strong>Jabber settings changed</strong>',	'LOG_LANGUAGE_PACK_DELETED'		=> '<strong>Deleted language pack</strong><br /> %s',	'LOG_LANGUAGE_PACK_INSTALLED'	=> '<strong>Installed language pack</strong><br /> %s',	'LOG_LANGUAGE_PACK_UPDATED'		=> '<strong>Updated language pack details</strong><br /> %s',	'LOG_LANGUAGE_FILE_REPLACED'	=> '<strong>Replaced language file</strong><br /> %s',	'LOG_LANGUAGE_FILE_SUBMITTED'	=> '<strong>Submitted language file and placed in store folder</strong><br /> %s',	'LOG_MASS_EMAIL'		=> '<strong>Sent mass e-mail</strong><br /> %s',	'LOG_MCP_CHANGE_POSTER'	=> '<strong>Changed poster in topic %1$s</strong><br /> from %2$s to %3$s',	'LOG_MODULE_DISABLE'	=> '<strong>Module disabled</strong><br /> %s',	'LOG_MODULE_ENABLE'		=> '<strong>Module enabled</strong><br /> %s',	'LOG_MODULE_MOVE_DOWN'	=> '<strong>Module moved down</strong><br /> %1$s below %2$s',	'LOG_MODULE_MOVE_UP'	=> '<strong>Module moved up</strong><br /> %1$s above %2$s',	'LOG_MODULE_REMOVED'	=> '<strong>Module removed</strong><br /> %s',	'LOG_MODULE_ADD'		=> '<strong>Module added</strong><br /> %s',	'LOG_MODULE_EDIT'		=> '<strong>Module edited</strong><br /> %s',	'LOG_A_ROLE_ADD'		=> '<strong>Admin role added</strong><br /> %s',	'LOG_A_ROLE_EDIT'		=> '<strong>Admin role edited</strong><br /> %s',	'LOG_A_ROLE_REMOVED'	=> '<strong>Admin role removed</strong><br /> %s',	'LOG_F_ROLE_ADD'		=> '<strong>Forum role added</strong><br /> %s',	'LOG_F_ROLE_EDIT'		=> '<strong>Forum role edited</strong><br /> %s',	'LOG_F_ROLE_REMOVED'	=> '<strong>Forum role removed</strong><br /> %s',	'LOG_M_ROLE_ADD'		=> '<strong>Moderator role added</strong><br /> %s',	'LOG_M_ROLE_EDIT'		=> '<strong>Moderator role edited</strong><br /> %s',	'LOG_M_ROLE_REMOVED'	=> '<strong>Moderator role removed</strong><br /> %s',	'LOG_U_ROLE_ADD'		=> '<strong>User role added</strong><br /> %s',	'LOG_U_ROLE_EDIT'		=> '<strong>User role edited</strong><br /> %s',	'LOG_U_ROLE_REMOVED'	=> '<strong>User role removed</strong><br /> %s',	'LOG_PROFILE_FIELD_ACTIVATE'	=> '<strong>Profile field activated</strong><br /> %s',	'LOG_PROFILE_FIELD_CREATE'		=> '<strong>Profile field added</strong><br /> %s',	'LOG_PROFILE_FIELD_DEACTIVATE'	=> '<strong>Profile field deactivated</strong><br /> %s',	'LOG_PROFILE_FIELD_EDIT'		=> '<strong>Profile field changed</strong><br /> %s',	'LOG_PROFILE_FIELD_REMOVED'		=> '<strong>Profile field removed</strong><br /> %s',	'LOG_PRUNE'					=> '<strong>Pruned forums</strong><br /> %s',	'LOG_AUTO_PRUNE'			=> '<strong>Auto-pruned forums</strong><br /> %s',	'LOG_PRUNE_USER_DEAC'		=> '<strong>Users deactivated</strong><br /> %s',	'LOG_PRUNE_USER_DEL_DEL'	=> '<strong>Users pruned and posts deleted</strong><br /> %s',	'LOG_PRUNE_USER_DEL_ANON'	=> '<strong>Users pruned and posts retained</strong><br /> %s',	'LOG_PURGE_CACHE'			=> '<strong>Purged cache</strong>',	'LOG_PURGE_SESSIONS'		=> '<strong>Purged sessions</strong>',	'LOG_RANK_ADDED'		=> '<strong>Added new rank</strong><br /> %s',	'LOG_RANK_REMOVED'		=> '<strong>Removed rank</strong><br /> %s',	'LOG_RANK_UPDATED'		=> '<strong>Updated rank</strong><br /> %s',	'LOG_REASON_ADDED'		=> '<strong>Added report/denial reason</strong><br /> %s',	'LOG_REASON_REMOVED'	=> '<strong>Removed report/denial reason</strong><br /> %s',	'LOG_REASON_UPDATED'	=> '<strong>Updated report/denial reason</strong><br /> %s',	'LOG_REFERER_INVALID'		=> '<strong>Referer validation failed</strong><br />Referer was <em>%1$s</em>. The request was rejected and the session killed.',	'LOG_RESET_DATE'			=> '<strong>Board start date reset</strong>',	'LOG_RESET_ONLINE'			=> '<strong>Most users online reset</strong>',	'LOG_RESYNC_POSTCOUNTS'		=> '<strong>User post counts resynchronised</strong>',	'LOG_RESYNC_POST_MARKING'	=> '<strong>Dotted topics resynchronised</strong>',	'LOG_RESYNC_STATS'			=> '<strong>Post, topic and user statistics resynchronised</strong>',	'LOG_SEARCH_INDEX_CREATED'	=> '<strong>Created search index for</strong><br /> %s',	'LOG_SEARCH_INDEX_REMOVED'	=> '<strong>Removed search index for</strong><br /> %s',	'LOG_STYLE_ADD'				=> '<strong>Added new style</strong><br /> %s',	'LOG_STYLE_DELETE'			=> '<strong>Deleted style</strong><br /> %s',	'LOG_STYLE_EDIT_DETAILS'	=> '<strong>Edited style</strong><br /> %s',	'LOG_STYLE_EXPORT'			=> '<strong>Exported style</strong><br /> %s',	'LOG_TEMPLATE_ADD_DB'			=> '<strong>Added new template set to database</strong><br /> %s',	'LOG_TEMPLATE_ADD_FS'			=> '<strong>Add new template set on filesystem</strong><br /> %s',	'LOG_TEMPLATE_CACHE_CLEARED'	=> '<strong>Deleted cached versions of template files in template set <em>%1$s</em></strong><br /> %2$s',	'LOG_TEMPLATE_DELETE'			=> '<strong>Deleted template set</strong><br /> %s',	'LOG_TEMPLATE_EDIT'				=> '<strong>Edited template set <em>%1$s</em></strong><br /> %2$s',	'LOG_TEMPLATE_EDIT_DETAILS'		=> '<strong>Edited template details</strong><br /> %s',	'LOG_TEMPLATE_EXPORT'			=> '<strong>Exported template set</strong><br /> %s',	'LOG_TEMPLATE_REFRESHED'		=> '<strong>Refreshed template set</strong><br /> %s',	'LOG_THEME_ADD_DB'			=> '<strong>Added new theme to database</strong><br /> %s',	'LOG_THEME_ADD_FS'			=> '<strong>Add new theme on filesystem</strong><br /> %s',	'LOG_THEME_DELETE'			=> '<strong>Theme deleted</strong><br /> %s',	'LOG_THEME_EDIT_DETAILS'	=> '<strong>Edited theme details</strong><br /> %s',	'LOG_THEME_EDIT'			=> '<strong>Edited theme <em>%1$s</em></strong>',	'LOG_THEME_EDIT_FILE'		=> '<strong>Edited theme <em>%1$s</em></strong><br /> Modified file <em>%2$s</em>',	'LOG_THEME_EXPORT'			=> '<strong>Exported theme</strong><br /> %s',	'LOG_THEME_REFRESHED'		=> '<strong>Refreshed theme</strong><br /> %s',	'LOG_UPDATE_DATABASE'	=> '<strong>Updated Database from version %1$s to version %2$s</strong>',	'LOG_UPDATE_PHPBB'		=> '<strong>Updated phpBB from version %1$s to version %2$s</strong>',	'LOG_USER_ACTIVE'		=> '<strong>User activated</strong><br /> %s',	'LOG_USER_BAN_USER'		=> '<strong>Banned User via user management</strong> for reason <em>%1$s</em><br /> %2$s',	'LOG_USER_BAN_IP'		=> '<strong>Banned IP via user management</strong> for reason <em>%1$s</em><br /> %2$s',	'LOG_USER_BAN_EMAIL'	=> '<strong>Banned e-mail via user management</strong> for reason <em>%1$s</em><br /> %2$s',	'LOG_USER_DELETED'		=> '<strong>Deleted user</strong><br /> %s',	'LOG_USER_DEL_ATTACH'	=> '<strong>Removed all attachments made by the user</strong><br /> %s',	'LOG_USER_DEL_AVATAR'	=> '<strong>Removed user avatar</strong><br /> %s',	'LOG_USER_DEL_OUTBOX'	=> '<strong>Emptied user outbox</strong><br /> %s',	'LOG_USER_DEL_POSTS'	=> '<strong>Removed all posts made by the user</strong><br /> %s',	'LOG_USER_DEL_SIG'		=> '<strong>Removed user signature</strong><br /> %s',	'LOG_USER_INACTIVE'		=> '<strong>User deactivated</strong><br /> %s',	'LOG_USER_MOVE_POSTS'	=> '<strong>Moved user posts</strong><br /> posts by %1$s to forum %2$s',	'LOG_USER_NEW_PASSWORD'	=> '<strong>Changed user password</strong><br /> %s',	'LOG_USER_REACTIVATE'	=> '<strong>Forced user account reactivation</strong><br /> %s',	'LOG_USER_REMOVED_NR'	=> '<strong>Removed newly registered flag from user</strong><br /> %s',	'LOG_USER_UPDATE_EMAIL'	=> '<strong>User %1$s changed e-mail</strong><br /> from %2$s to %3$s',	'LOG_USER_UPDATE_NAME'	=> '<strong>Changed username</strong><br /> from %1$s to %2$s',	'LOG_USER_USER_UPDATE'	=> '<strong>Updated user details</strong><br /> %s',	'LOG_USER_ACTIVE_USER'		=> '<strong>User account activated</strong>',	'LOG_USER_DEL_AVATAR_USER'	=> '<strong>User avatar removed</strong>',	'LOG_USER_DEL_SIG_USER'		=> '<strong>User signature removed</strong>',	'LOG_USER_FEEDBACK'			=> '<strong>Added user feedback</strong><br /> %s',	'LOG_USER_GENERAL'			=> '<strong>Entry added:</strong><br /> %s',	'LOG_USER_INACTIVE_USER'	=> '<strong>User account de-activated</strong>',	'LOG_USER_LOCK'				=> '<strong>User locked own topic</strong><br /> %s',	'LOG_USER_MOVE_POSTS_USER'	=> '<strong>Moved all posts to forum</strong> %s',	'LOG_USER_REACTIVATE_USER'	=> '<strong>Forced user account reactivation</strong>',	'LOG_USER_UNLOCK'			=> '<strong>User unlocked own topic</strong><br /> %s',	'LOG_USER_WARNING'			=> '<strong>Added user warning</strong><br /> %s',	'LOG_USER_WARNING_BODY'		=> '<strong>The following warning was issued to this user</strong><br /> %s',	'LOG_USER_GROUP_CHANGE'			=> '<strong>User changed default group</strong><br /> %s',	'LOG_USER_GROUP_DEMOTE'			=> '<strong>User demoted as leaders from usergroup</strong><br /> %s',	'LOG_USER_GROUP_JOIN'			=> '<strong>User joined group</strong><br /> %s',	'LOG_USER_GROUP_JOIN_PENDING'	=> '<strong>User joined group and needs to be approved</strong><br /> %s',	'LOG_USER_GROUP_RESIGN'			=> '<strong>User resigned membership from group</strong><br /> %s',	'LOG_WARNING_DELETED'		=> '<strong>Deleted user warning</strong><br /> %s',	'LOG_WARNINGS_DELETED'		=> '<strong>Deleted %2$s user warnings</strong><br /> %1$s', // Example: '<strong>Deleted 2 user warnings</strong><br /> username'	'LOG_WARNINGS_DELETED_ALL'	=> '<strong>Deleted all user warnings</strong><br /> %s',	'LOG_WORD_ADD'			=> '<strong>Added word censor</strong><br /> %s',	'LOG_WORD_DELETE'		=> '<strong>Deleted word censor</strong><br /> %s',	'LOG_WORD_EDIT'			=> '<strong>Edited word censor</strong><br /> %s',));?>
