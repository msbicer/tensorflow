<?php/*** Updates smilies that were changed to the new ones*/die("Please read the first lines of this script for instructions on how to enable it");set_time_limit(0);define('IN_PHPBB', true);$phpbb_root_path = './../';$phpEx = substr(strrchr(__FILE__, '.'), 1);include($phpbb_root_path . 'common.'.$phpEx);// Start session management$user->session_begin();$auth->acl($user->data);$user->setup();$echos = 0;$replace = array(	'<img src="{SMILIES_PATH}/icon_biggrin.gif',	'<img src="{SMILIES_PATH}/icon_confused.gif',	'<img src="{SMILIES_PATH}/icon_sad.gif',	'<img src="{SMILIES_PATH}/icon_smile.gif',	'<img src="{SMILIES_PATH}/icon_surprised.gif',	'<img src="{SMILIES_PATH}/icon_wink.gif',);$with = array(	'<img src="{SMILIES_PATH}/icon_e_biggrin.gif',	'<img src="{SMILIES_PATH}/icon_e_confused.gif',	'<img src="{SMILIES_PATH}/icon_e_sad.gif',	'<img src="{SMILIES_PATH}/icon_e_smile.gif',	'<img src="{SMILIES_PATH}/icon_e_surprised.gif',	'<img src="{SMILIES_PATH}/icon_e_wink.gif',);// Adjust user signatures$sql = 'SELECT user_id, user_sig	FROM ' . USERS_TABLE;$result = $db->sql_query($sql);while ($row = $db->sql_fetchrow($result)){	$new_content = str_replace($replace, $with, $row['user_sig']);	if ($new_content != $row['user_sig'])	{		$sql = 'UPDATE ' . USERS_TABLE . " SET user_sig = '" . $db->sql_escape($new_content) . "'			WHERE user_id = " . $row['user_id'];		$db->sql_query($sql);		if ($echos > 200)		{			echo '<br />' . "\n";			$echos = 0;		}		echo '.';		$echos++;		flush();	}}$db->sql_freeresult($result);// Now adjust posts$sql = 'SELECT post_id, post_text	FROM ' . POSTS_TABLE;$result = $db->sql_query($sql);while ($row = $db->sql_fetchrow($result)){	$new_content = str_replace($replace, $with, $row['post_text']);	if ($row['post_text'] != $new_content)	{		$sql = 'UPDATE ' . POSTS_TABLE . " SET post_text = '" . $db->sql_escape($new_content) . "'			WHERE post_id = " . $row['post_id'];		$db->sql_query($sql);		if ($echos > 200)		{			echo '<br />' . "\n";			$echos = 0;		}		echo '.';		$echos++;		flush();	}}$db->sql_freeresult($result);// Now to the private messages$sql = 'SELECT msg_id, message_text	FROM ' . PRIVMSGS_TABLE;$result = $db->sql_query($sql);while ($row = $db->sql_fetchrow($result)){	$new_content = str_replace($replace, $with, $row['message_text']);	if ($row['message_text'] != $new_content)	{		$sql = 'UPDATE ' . PRIVMSGS_TABLE . " SET bbcode_bitfield = '" . $db->sql_escape($new_content) . "'			WHERE msg_id = " . $row['msg_id'];		$db->sql_query($sql);		if ($echos > 200)		{			echo '<br />' . "\n";			$echos = 0;		}		echo '.';		$echos++;		flush();	}}$db->sql_freeresult($result);// Done$db->sql_close();?>
<?php/**** @package mcp* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @ignore*/if (!defined('IN_PHPBB')){	exit;}/*** @package mcp*/class mcp_ban{	var $u_action;	function main($id, $mode)	{		global $config, $db, $user, $auth, $template, $cache;		global $phpbb_root_path, $phpEx;		include($phpbb_root_path . 'includes/functions_user.' . $phpEx);		// Include the admin banning interface...		include($phpbb_root_path . 'includes/acp/acp_ban.' . $phpEx);		$bansubmit		= (isset($_POST['bansubmit'])) ? true : false;		$unbansubmit	= (isset($_POST['unbansubmit'])) ? true : false;		$current_time	= time();		$user->add_lang(array('acp/ban', 'acp/users'));		$this->tpl_name = 'mcp_ban';		// Ban submitted?		if ($bansubmit)		{			// Grab the list of entries			$ban				= request_var('ban', '', ($mode === 'user') ? true : false);			if ($mode === 'user')			{				$ban = utf8_normalize_nfc($ban);			}			$ban_len			= request_var('banlength', 0);			$ban_len_other		= request_var('banlengthother', '');			$ban_exclude		= request_var('banexclude', 0);			$ban_reason			= utf8_normalize_nfc(request_var('banreason', '', true));			$ban_give_reason	= utf8_normalize_nfc(request_var('bangivereason', '', true));			if ($ban)			{				if (confirm_box(true))				{					user_ban($mode, $ban, $ban_len, $ban_len_other, $ban_exclude, $ban_reason, $ban_give_reason);					trigger_error($user->lang['BAN_UPDATE_SUCCESSFUL'] . '<br /><br /><a href="' . $this->u_action . '">&laquo; ' . $user->lang['BACK_TO_PREV'] . '</a>');				}				else				{					confirm_box(false, $user->lang['CONFIRM_OPERATION'], build_hidden_fields(array(						'mode'				=> $mode,						'ban'				=> $ban,						'bansubmit'			=> true,						'banlength'			=> $ban_len,						'banlengthother'	=> $ban_len_other,						'banexclude'		=> $ban_exclude,						'banreason'			=> $ban_reason,						'bangivereason'		=> $ban_give_reason)));				}			}		}		else if ($unbansubmit)		{			$ban = request_var('unban', array(''));			if ($ban)			{				if (confirm_box(true))				{					user_unban($mode, $ban);					trigger_error($user->lang['BAN_UPDATE_SUCCESSFUL'] . '<br /><br /><a href="' . $this->u_action . '">&laquo; ' . $user->lang['BACK_TO_PREV'] . '</a>');				}				else				{					confirm_box(false, $user->lang['CONFIRM_OPERATION'], build_hidden_fields(array(						'mode'			=> $mode,						'unbansubmit'	=> true,						'unban'			=> $ban)));				}			}		}		// Ban length options		$ban_end_text = array(0 => $user->lang['PERMANENT'], 30 => $user->lang['30_MINS'], 60 => $user->lang['1_HOUR'], 360 => $user->lang['6_HOURS'], 1440 => $user->lang['1_DAY'], 10080 => $user->lang['7_DAYS'], 20160 => $user->lang['2_WEEKS'], 40320 => $user->lang['1_MONTH'], -1 => $user->lang['UNTIL'] . ' -&gt; ');		$ban_end_options = '';		foreach ($ban_end_text as $length => $text)		{			$ban_end_options .= '<option value="' . $length . '">' . $text . '</option>';		}		// Define language vars		$this->page_title = $user->lang[strtoupper($mode) . '_BAN'];		$l_ban_explain = $user->lang[strtoupper($mode) . '_BAN_EXPLAIN'];		$l_ban_exclude_explain = $user->lang[strtoupper($mode) . '_BAN_EXCLUDE_EXPLAIN'];		$l_unban_title = $user->lang[strtoupper($mode) . '_UNBAN'];		$l_unban_explain = $user->lang[strtoupper($mode) . '_UNBAN_EXPLAIN'];		$l_no_ban_cell = $user->lang[strtoupper($mode) . '_NO_BANNED'];		switch ($mode)		{			case 'user':				$l_ban_cell = $user->lang['USERNAME'];			break;			case 'ip':				$l_ban_cell = $user->lang['IP_HOSTNAME'];			break;			case 'email':				$l_ban_cell = $user->lang['EMAIL_ADDRESS'];			break;		}		acp_ban::display_ban_options($mode);		$template->assign_vars(array(			'L_TITLE'				=> $this->page_title,			'L_EXPLAIN'				=> $l_ban_explain,			'L_UNBAN_TITLE'			=> $l_unban_title,			'L_UNBAN_EXPLAIN'		=> $l_unban_explain,			'L_BAN_CELL'			=> $l_ban_cell,			'L_BAN_EXCLUDE_EXPLAIN'	=> $l_ban_exclude_explain,			'L_NO_BAN_CELL'			=> $l_no_ban_cell,			'S_USERNAME_BAN'	=> ($mode == 'user') ? true : false,			'U_ACTION'			=> $this->u_action,			'U_FIND_USERNAME'	=> append_sid("{$phpbb_root_path}memberlist.$phpEx", 'mode=searchuser&amp;form=mcp_ban&amp;field=ban'),		));		if ($mode === 'email' && !$auth->acl_get('a_user'))		{			return;		}		// As a "service" we will check if any post id is specified and populate the username of the poster id if given		$post_id = request_var('p', 0);		$user_id = request_var('u', 0);		$username = $pre_fill = false;		if ($user_id && $user_id <> ANONYMOUS)		{			$sql = 'SELECT username, user_email, user_ip				FROM ' . USERS_TABLE . '				WHERE user_id = ' . $user_id;			$result = $db->sql_query($sql);			switch ($mode)			{				case 'user':					$pre_fill = (string) $db->sql_fetchfield('username');				break;								case 'ip':					$pre_fill = (string) $db->sql_fetchfield('user_ip');				break;				case 'email':					$pre_fill = (string) $db->sql_fetchfield('user_email');				break;			}			$db->sql_freeresult($result);		}		else if ($post_id)		{			$post_info = get_post_data($post_id, 'm_ban');			if (sizeof($post_info) && !empty($post_info[$post_id]))			{				switch ($mode)				{					case 'user':						$pre_fill = $post_info[$post_id]['username'];					break;					case 'ip':						$pre_fill = $post_info[$post_id]['poster_ip'];					break;					case 'email':						$pre_fill = $post_info[$post_id]['user_email'];					break;				}			}		}		if ($pre_fill)		{			// left for legacy template compatibility			$template->assign_var('USERNAMES', $pre_fill);			$template->assign_var('BAN_QUANTIFIER', $pre_fill);		}	}}?>
<?php/**** @package phpBB3* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @ignore*/define('IN_PHPBB', true);$phpbb_root_path = (defined('PHPBB_ROOT_PATH')) ? PHPBB_ROOT_PATH : './';$phpEx = substr(strrchr(__FILE__, '.'), 1);include($phpbb_root_path . 'common.' . $phpEx);// Start session management$user->session_begin();$auth->acl($user->data);$user->setup();$mode = request_var('mode', '');// Load the appropriate faq fileswitch ($mode){	case 'bbcode':		$l_title = $user->lang['BBCODE_GUIDE'];		$user->add_lang('bbcode', false, true);	break;	default:		$l_title = $user->lang['FAQ_EXPLAIN'];		$user->add_lang('faq', false, true);	break;}// Pull the array data from the lang pack$switch_column = $found_switch = false;$help_blocks = array();foreach ($user->help as $help_ary){	if ($help_ary[0] == '--')	{		if ($help_ary[1] == '--')		{			$switch_column = true;			$found_switch = true;			continue;		}		$template->assign_block_vars('faq_block', array(			'BLOCK_TITLE'		=> $help_ary[1],			'SWITCH_COLUMN'		=> $switch_column,		));		if ($switch_column)		{			$switch_column = false;		}		continue;	}	$template->assign_block_vars('faq_block.faq_row', array(		'FAQ_QUESTION'		=> $help_ary[0],		'FAQ_ANSWER'		=> $help_ary[1])	);}// Lets build a page ...$template->assign_vars(array(	'L_FAQ_TITLE'				=> $l_title,	'L_BACK_TO_TOP'				=> $user->lang['BACK_TO_TOP'],	'SWITCH_COLUMN_MANUALLY'	=> (!$found_switch) ? true : false,));page_header($l_title, false);$template->set_filenames(array(	'body' => 'faq_body.html'));make_jumpbox(append_sid("{$phpbb_root_path}viewforum.$phpEx"));page_footer();?>
<?php/**** @package mcp* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @package module_install*/class mcp_logs_info{	function module()	{		return array(			'filename'	=> 'mcp_logs',			'title'		=> 'MCP_LOGS',			'version'	=> '1.0.0',			'modes'		=> array(				'front'			=> array('title' => 'MCP_LOGS_FRONT', 'auth' => 'acl_m_ || aclf_m_', 'cat' => array('MCP_LOGS')),				'forum_logs'	=> array('title' => 'MCP_LOGS_FORUM_VIEW', 'auth' => 'acl_m_,$id', 'cat' => array('MCP_LOGS')),				'topic_logs'	=> array('title' => 'MCP_LOGS_TOPIC_VIEW', 'auth' => 'acl_m_,$id', 'cat' => array('MCP_LOGS')),			),		);	}	function install()	{	}	function uninstall()	{	}}?>
<?php/*** @package ucp* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @ignore*/if (!defined('IN_PHPBB')){	exit;}/*** Private Message Class** $_REQUEST['folder'] display folder with the id used* $_REQUEST['folder'] inbox|outbox|sentbox display folder with the associated name**	Display Messages (default to inbox) - mode=view*	Display single message - mode=view&p=[msg_id] or &p=[msg_id] (short linkage)**	if the folder id with (&f=[folder_id]) is used when displaying messages, one query will be saved. If it is not used, phpBB needs to grab*	the folder id first in order to display the input boxes and folder names and such things. ;) phpBB always checks this against the database to make*	sure the user is able to view the message.**	Composing Messages (mode=compose):*		To specific user (u=[user_id])*		To specific group (g=[group_id])*		Quoting a post (action=quotepost&p=[post_id])*		Quoting a PM (action=quote&p=[msg_id])*		Forwarding a PM (action=forward&p=[msg_id])** @package ucp*/class ucp_pm{	var $u_action;	function main($id, $mode)	{		global $user, $template, $phpbb_root_path, $auth, $phpEx, $db, $config;		if (!$user->data['is_registered'])		{			trigger_error('NO_MESSAGE');		}		// Is PM disabled?		if (!$config['allow_privmsg'])		{			trigger_error('PM_DISABLED');		}		$user->add_lang('posting');		$template->assign_var('S_PRIVMSGS', true);		// Folder directly specified?		$folder_specified = request_var('folder', '');		if (!in_array($folder_specified, array('inbox', 'outbox', 'sentbox')))		{			$folder_specified = (int) $folder_specified;		}		else		{			$folder_specified = ($folder_specified == 'inbox') ? PRIVMSGS_INBOX : (($folder_specified == 'outbox') ? PRIVMSGS_OUTBOX : PRIVMSGS_SENTBOX);		}		if (!$folder_specified)		{			$mode = (!$mode) ? request_var('mode', 'view') : $mode;		}		else		{			$mode = 'view';		}		include($phpbb_root_path . 'includes/functions_privmsgs.' . $phpEx);		switch ($mode)		{			// New private messages popup			case 'popup':				$l_new_message = '';				if ($user->data['is_registered'])				{					if ($user->data['user_new_privmsg'])					{						$l_new_message = ($user->data['user_new_privmsg'] == 1) ? $user->lang['YOU_NEW_PM'] : $user->lang['YOU_NEW_PMS'];					}					else					{						$l_new_message = $user->lang['YOU_NO_NEW_PM'];					}				}				$template->assign_vars(array(					'MESSAGE'			=> $l_new_message,					'S_NOT_LOGGED_IN'	=> ($user->data['user_id'] == ANONYMOUS) ? true : false,					'CLICK_TO_VIEW'		=> sprintf($user->lang['CLICK_VIEW_PRIVMSG'], '<a href="' . append_sid("{$phpbb_root_path}ucp.$phpEx", 'i=pm&amp;folder=inbox') . '" onclick="jump_to_inbox(this.href); return false;">', '</a>'),					'U_INBOX'			=> append_sid("{$phpbb_root_path}ucp.$phpEx", 'i=pm&amp;folder=inbox'),					'UA_INBOX'			=> append_sid("{$phpbb_root_path}ucp.$phpEx", 'i=pm&folder=inbox', false))				);				$tpl_file = 'ucp_pm_popup';			break;			// Compose message			case 'compose':				$action = request_var('action', 'post');				$user_folders = get_folder($user->data['user_id']);				if (!$auth->acl_get('u_sendpm'))				{					// trigger_error('NO_AUTH_SEND_MESSAGE');					$template->assign_vars(array(						'S_NO_AUTH_SEND_MESSAGE'	=> true,						'S_COMPOSE_PM_VIEW'			=> true,					));					$tpl_file = 'ucp_pm_viewfolder';					break;				}				include($phpbb_root_path . 'includes/ucp/ucp_pm_compose.' . $phpEx);				compose_pm($id, $mode, $action, $user_folders);				$tpl_file = 'posting_body';			break;			case 'options':				set_user_message_limit();				get_folder($user->data['user_id']);				include($phpbb_root_path . 'includes/ucp/ucp_pm_options.' . $phpEx);				message_options($id, $mode, $global_privmsgs_rules, $global_rule_conditions);				$tpl_file = 'ucp_pm_options';			break;			case 'drafts':				get_folder($user->data['user_id']);				$this->p_name = 'pm';				// Call another module... please do not try this at home... Hoochie Coochie Man				include($phpbb_root_path . 'includes/ucp/ucp_main.' . $phpEx);				$module = new ucp_main($this);				$module->u_action = $this->u_action;				$module->main($id, $mode);				$this->tpl_name = $module->tpl_name;				$this->page_title = 'UCP_PM_DRAFTS';				unset($module);				return;			break;			case 'view':				set_user_message_limit();				if ($folder_specified)				{					$folder_id = $folder_specified;					$action = 'view_folder';				}				else				{					$folder_id = request_var('f', PRIVMSGS_NO_BOX);					$action = request_var('action', 'view_folder');				}				$msg_id = request_var('p', 0);				$view	= request_var('view', '');				// View message if specified				if ($msg_id)				{					$action = 'view_message';				}				if (!$auth->acl_get('u_readpm'))				{					trigger_error('NO_AUTH_READ_MESSAGE');				}				// Do not allow hold messages to be seen				if ($folder_id == PRIVMSGS_HOLD_BOX)				{					trigger_error('NO_AUTH_READ_HOLD_MESSAGE');				}				// First Handle Mark actions and moving messages				$submit_mark	= (isset($_POST['submit_mark'])) ? true : false;				$move_pm		= (isset($_POST['move_pm'])) ? true : false;				$mark_option	= request_var('mark_option', '');				$dest_folder	= request_var('dest_folder', PRIVMSGS_NO_BOX);				// Is moving PM triggered through mark options?				if (!in_array($mark_option, array('mark_important', 'delete_marked')) && $submit_mark)				{					$move_pm = true;					$dest_folder = (int) $mark_option;					$submit_mark = false;				}				// Move PM				if ($move_pm)				{					$move_msg_ids	= (isset($_POST['marked_msg_id'])) ? request_var('marked_msg_id', array(0)) : array();					$cur_folder_id	= request_var('cur_folder_id', PRIVMSGS_NO_BOX);					if (move_pm($user->data['user_id'], $user->data['message_limit'], $move_msg_ids, $dest_folder, $cur_folder_id))					{						// Return to folder view if single message moved						if ($action == 'view_message')						{							$msg_id		= 0;							$folder_id	= request_var('cur_folder_id', PRIVMSGS_NO_BOX);							$action		= 'view_folder';						}					}				}				// Message Mark Options				if ($submit_mark)				{					handle_mark_actions($user->data['user_id'], $mark_option);				}				// If new messages arrived, place them into the appropriate folder				$num_not_moved = $num_removed = 0;				$release = request_var('release', 0);				if ($user->data['user_new_privmsg'] && ($action == 'view_folder' || $action == 'view_message'))				{					$return = place_pm_into_folder($global_privmsgs_rules, $release);					$num_not_moved = $return['not_moved'];					$num_removed = $return['removed'];				}				if (!$msg_id && $folder_id == PRIVMSGS_NO_BOX)				{					$folder_id = PRIVMSGS_INBOX;				}				else if ($msg_id && $folder_id == PRIVMSGS_NO_BOX)				{					$sql = 'SELECT folder_id						FROM ' . PRIVMSGS_TO_TABLE . "						WHERE msg_id = $msg_id							AND folder_id <> " . PRIVMSGS_NO_BOX . '							AND user_id = ' . $user->data['user_id'];					$result = $db->sql_query($sql);					$row = $db->sql_fetchrow($result);					$db->sql_freeresult($result);					if (!$row)					{						trigger_error('NO_MESSAGE');					}					$folder_id = (int) $row['folder_id'];				}				$message_row = array();				if ($action == 'view_message' && $msg_id)				{					// Get Message user want to see					if ($view == 'next' || $view == 'previous')					{						$sql_condition = ($view == 'next') ? '>' : '<';						$sql_ordering = ($view == 'next') ? 'ASC' : 'DESC';						$sql = 'SELECT t.msg_id							FROM ' . PRIVMSGS_TO_TABLE . ' t, ' . PRIVMSGS_TABLE . ' p, ' . PRIVMSGS_TABLE . " p2							WHERE p2.msg_id = $msg_id								AND t.folder_id = $folder_id								AND t.user_id = " . $user->data['user_id'] . "								AND t.msg_id = p.msg_id								AND p.message_time $sql_condition p2.message_time							ORDER BY p.message_time $sql_ordering";						$result = $db->sql_query_limit($sql, 1);						$row = $db->sql_fetchrow($result);						$db->sql_freeresult($result);						if (!$row)						{							$message = ($view == 'next') ? 'NO_NEWER_PM' : 'NO_OLDER_PM';							trigger_error($message);						}						else						{							$msg_id = $row['msg_id'];						}					}					$sql = 'SELECT t.*, p.*, u.*						FROM ' . PRIVMSGS_TO_TABLE . ' t, ' . PRIVMSGS_TABLE . ' p, ' . USERS_TABLE . ' u						WHERE t.user_id = ' . $user->data['user_id'] . "							AND p.author_id = u.user_id							AND t.folder_id = $folder_id							AND t.msg_id = p.msg_id							AND p.msg_id = $msg_id";					$result = $db->sql_query($sql);					$message_row = $db->sql_fetchrow($result);					$db->sql_freeresult($result);					if (!$message_row)					{						trigger_error('NO_MESSAGE');					}					// Update unread status					update_unread_status($message_row['pm_unread'], $message_row['msg_id'], $user->data['user_id'], $folder_id);				}				$folder = get_folder($user->data['user_id'], $folder_id);				$s_folder_options = $s_to_folder_options = '';				foreach ($folder as $f_id => $folder_ary)				{					$option = '<option' . ((!in_array($f_id, array(PRIVMSGS_INBOX, PRIVMSGS_OUTBOX, PRIVMSGS_SENTBOX))) ? ' class="sep"' : '') . ' value="' . $f_id . '"' . (($f_id == $folder_id) ? ' selected="selected"' : '') . '>' . $folder_ary['folder_name'] . (($folder_ary['unread_messages']) ? ' [' . $folder_ary['unread_messages'] . '] ' : '') . '</option>';					$s_to_folder_options .= ($f_id != PRIVMSGS_OUTBOX && $f_id != PRIVMSGS_SENTBOX) ? $option : '';					$s_folder_options .= $option;				}				clean_sentbox($folder[PRIVMSGS_SENTBOX]['num_messages']);				// Header for message view - folder and so on				$folder_status = get_folder_status($folder_id, $folder);				$template->assign_vars(array(					'CUR_FOLDER_ID'			=> $folder_id,					'CUR_FOLDER_NAME'		=> $folder_status['folder_name'],					'NUM_NOT_MOVED'			=> $num_not_moved,					'NUM_REMOVED'			=> $num_removed,					'RELEASE_MESSAGE_INFO'	=> sprintf($user->lang['RELEASE_MESSAGES'], '<a href="' . $this->u_action . '&amp;folder=' . $folder_id . '&amp;release=1">', '</a>'),					'NOT_MOVED_MESSAGES'	=> ($num_not_moved == 1) ? $user->lang['NOT_MOVED_MESSAGE'] : sprintf($user->lang['NOT_MOVED_MESSAGES'], $num_not_moved),					'RULE_REMOVED_MESSAGES'	=> ($num_removed == 1) ? $user->lang['RULE_REMOVED_MESSAGE'] : sprintf($user->lang['RULE_REMOVED_MESSAGES'], $num_removed),					'S_FOLDER_OPTIONS'		=> $s_folder_options,					'S_TO_FOLDER_OPTIONS'	=> $s_to_folder_options,					'S_FOLDER_ACTION'		=> $this->u_action . '&amp;action=view_folder',					'S_PM_ACTION'			=> $this->u_action . '&amp;action=' . $action,					'U_INBOX'				=> $this->u_action . '&amp;folder=inbox',					'U_OUTBOX'				=> $this->u_action . '&amp;folder=outbox',					'U_SENTBOX'				=> $this->u_action . '&amp;folder=sentbox',					'U_CREATE_FOLDER'		=> $this->u_action . '&amp;mode=options',					'U_CURRENT_FOLDER'		=> $this->u_action . '&amp;folder=' . $folder_id,					'S_IN_INBOX'			=> ($folder_id == PRIVMSGS_INBOX) ? true : false,					'S_IN_OUTBOX'			=> ($folder_id == PRIVMSGS_OUTBOX) ? true : false,					'S_IN_SENTBOX'			=> ($folder_id == PRIVMSGS_SENTBOX) ? true : false,					'FOLDER_STATUS'				=> $folder_status['message'],					'FOLDER_MAX_MESSAGES'		=> $folder_status['max'],					'FOLDER_CUR_MESSAGES'		=> $folder_status['cur'],					'FOLDER_REMAINING_MESSAGES'	=> $folder_status['remaining'],					'FOLDER_PERCENT'			=> $folder_status['percent'])				);				if ($action == 'view_folder')				{					include($phpbb_root_path . 'includes/ucp/ucp_pm_viewfolder.' . $phpEx);					view_folder($id, $mode, $folder_id, $folder);					$tpl_file = 'ucp_pm_viewfolder';				}				else if ($action == 'view_message')				{					$template->assign_vars(array(						'S_VIEW_MESSAGE'	=> true,						'MSG_ID'			=> $msg_id)					);					if (!$msg_id)					{						trigger_error('NO_MESSAGE');					}					include($phpbb_root_path . 'includes/ucp/ucp_pm_viewmessage.' . $phpEx);					view_message($id, $mode, $folder_id, $msg_id, $folder, $message_row);					$tpl_file = ($view == 'print') ? 'ucp_pm_viewmessage_print' : 'ucp_pm_viewmessage';				}			break;			default:				trigger_error('NO_ACTION_MODE', E_USER_ERROR);			break;		}		$template->assign_vars(array(			'L_TITLE'			=> $user->lang['UCP_PM_' . strtoupper($mode)],			'S_UCP_ACTION'		=> $this->u_action . ((isset($action)) ? "&amp;action=$action" : ''))		);		// Set desired template		$this->tpl_name = $tpl_file;		$this->page_title = 'UCP_PM_' . strtoupper($mode);	}}?>
<?php/**** @package acp* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @ignore*/if (!defined('IN_PHPBB')){	exit;}/*** @package acp*/class acp_prune{	var $u_action;	function main($id, $mode)	{		global $user, $phpEx, $phpbb_admin_path, $phpbb_root_path;		$user->add_lang('acp/prune');		include_once($phpbb_root_path . 'includes/functions_user.' . $phpEx);		switch ($mode)		{			case 'forums':				$this->tpl_name = 'acp_prune_forums';				$this->page_title = 'ACP_PRUNE_FORUMS';				$this->prune_forums($id, $mode);			break;			case 'users':				$this->tpl_name = 'acp_prune_users';				$this->page_title = 'ACP_PRUNE_USERS';				$this->prune_users($id, $mode);			break;		}	}	/**	* Prune forums	*/	function prune_forums($id, $mode)	{		global $db, $user, $auth, $template, $cache;		global $config, $phpbb_root_path, $phpbb_admin_path, $phpEx;		$all_forums = request_var('all_forums', 0);		$forum_id = request_var('f', array(0));		$submit = (isset($_POST['submit'])) ? true : false;		if ($all_forums)		{			$sql = 'SELECT forum_id				FROM ' . FORUMS_TABLE . '				ORDER BY left_id';			$result = $db->sql_query($sql);			$forum_id = array();			while ($row = $db->sql_fetchrow($result))			{				$forum_id[] = $row['forum_id'];			}			$db->sql_freeresult($result);		}		if ($submit)		{			if (confirm_box(true))			{				$prune_posted = request_var('prune_days', 0);				$prune_viewed = request_var('prune_vieweddays', 0);				$prune_all = (!$prune_posted && !$prune_viewed) ? true : false;						$prune_flags = 0;				$prune_flags += (request_var('prune_old_polls', 0)) ? 2 : 0;				$prune_flags += (request_var('prune_announce', 0)) ? 4 : 0;				$prune_flags += (request_var('prune_sticky', 0)) ? 8 : 0;				// Convert days to seconds for timestamp functions...				$prunedate_posted = time() - ($prune_posted * 86400);				$prunedate_viewed = time() - ($prune_viewed * 86400);				$template->assign_vars(array(					'S_PRUNED'		=> true)				);				$sql_forum = (sizeof($forum_id)) ? ' AND ' . $db->sql_in_set('forum_id', $forum_id) : '';				// Get a list of forum's or the data for the forum that we are pruning.				$sql = 'SELECT forum_id, forum_name					FROM ' . FORUMS_TABLE . '					WHERE forum_type = ' . FORUM_POST . "						$sql_forum					ORDER BY left_id ASC";				$result = $db->sql_query($sql);				if ($row = $db->sql_fetchrow($result))				{					$prune_ids = array();					$p_result['topics'] = 0;					$p_result['posts'] = 0;					$log_data = '';								do					{						if (!$auth->acl_get('f_list', $row['forum_id']))						{							continue;						}						if ($prune_all)						{							$p_result = prune($row['forum_id'], 'posted', time(), $prune_flags, false);						}						else						{							if ($prune_posted)							{								$return = prune($row['forum_id'], 'posted', $prunedate_posted, $prune_flags, false);								$p_result['topics'] += $return['topics'];								$p_result['posts'] += $return['posts'];							}										if ($prune_viewed)							{								$return = prune($row['forum_id'], 'viewed', $prunedate_viewed, $prune_flags, false);								$p_result['topics'] += $return['topics'];								$p_result['posts'] += $return['posts'];							}						}						$prune_ids[] = $row['forum_id'];						$template->assign_block_vars('pruned', array(							'FORUM_NAME'	=> $row['forum_name'],							'NUM_TOPICS'	=> $p_result['topics'],							'NUM_POSTS'		=> $p_result['posts'])						);								$log_data .= (($log_data != '') ? ', ' : '') . $row['forum_name'];					}					while ($row = $db->sql_fetchrow($result));							// Sync all pruned forums at once					sync('forum', 'forum_id', $prune_ids, true, true);					add_log('admin', 'LOG_PRUNE', $log_data);				}				$db->sql_freeresult($result);				return;			}			else			{				confirm_box(false, $user->lang['PRUNE_FORUM_CONFIRM'], build_hidden_fields(array(					'i'				=> $id,					'mode'			=> $mode,					'submit'		=> 1,					'all_forums'	=> $all_forums,					'f'				=> $forum_id,					'prune_days'		=> request_var('prune_days', 0),					'prune_vieweddays'	=> request_var('prune_vieweddays', 0),					'prune_old_polls'	=> request_var('prune_old_polls', 0),					'prune_announce'	=> request_var('prune_announce', 0),					'prune_sticky'		=> request_var('prune_sticky', 0),				)));			}		}		// If they haven't selected a forum for pruning yet then		// display a select box to use for pruning.		if (!sizeof($forum_id))		{			$template->assign_vars(array(				'U_ACTION'			=> $this->u_action,				'S_SELECT_FORUM'	=> true,				'S_FORUM_OPTIONS'	=> make_forum_select(false, false, false))			);		}		else		{			$sql = 'SELECT forum_id, forum_name				FROM ' . FORUMS_TABLE . '				WHERE ' . $db->sql_in_set('forum_id', $forum_id);			$result = $db->sql_query($sql);			$row = $db->sql_fetchrow($result);			if (!$row)			{				$db->sql_freeresult($result);				trigger_error($user->lang['NO_FORUM'] . adm_back_link($this->u_action), E_USER_WARNING);			}			$forum_list = $s_hidden_fields = '';			do			{				$forum_list .= (($forum_list != '') ? ', ' : '') . '<b>' . $row['forum_name'] . '</b>';				$s_hidden_fields .= '<input type="hidden" name="f[]" value="' . $row['forum_id'] . '" />';			}			while ($row = $db->sql_fetchrow($result));			$db->sql_freeresult($result);			$l_selected_forums = (sizeof($forum_id) == 1) ? 'SELECTED_FORUM' : 'SELECTED_FORUMS';			$template->assign_vars(array(				'L_SELECTED_FORUMS'		=> $user->lang[$l_selected_forums],				'U_ACTION'				=> $this->u_action,				'U_BACK'				=> $this->u_action,				'FORUM_LIST'			=> $forum_list,				'S_HIDDEN_FIELDS'		=> $s_hidden_fields)			);		}	}	/**	* Prune users	*/	function prune_users($id, $mode)	{		global $db, $user, $auth, $template, $cache;		global $config, $phpbb_root_path, $phpbb_admin_path, $phpEx;		$user->add_lang('memberlist');		$prune = (isset($_POST['prune'])) ? true : false;		if ($prune)		{			$action = request_var('action', 'deactivate');			$deleteposts = request_var('deleteposts', 0);			if (confirm_box(true))			{				$user_ids = $usernames = array();				$this->get_prune_users($user_ids, $usernames);				if (sizeof($user_ids))				{					if ($action == 'deactivate')					{						user_active_flip('deactivate', $user_ids);						$l_log = 'LOG_PRUNE_USER_DEAC';					}					else if ($action == 'delete')					{						if ($deleteposts)						{							foreach ($user_ids as $user_id)							{								user_delete('remove', $user_id);							}														$l_log = 'LOG_PRUNE_USER_DEL_DEL';						}						else						{							foreach ($user_ids as $user_id)							{								user_delete('retain', $user_id, $usernames[$user_id]);							}							$l_log = 'LOG_PRUNE_USER_DEL_ANON';						}					}					add_log('admin', $l_log, implode(', ', $usernames));					$msg = $user->lang['USER_' . strtoupper($action) . '_SUCCESS'];				}				else				{					$msg = $user->lang['USER_PRUNE_FAILURE'];				}				trigger_error($msg . adm_back_link($this->u_action));			}			else			{				// We list the users which will be pruned...				$user_ids = $usernames = array();				$this->get_prune_users($user_ids, $usernames);				if (!sizeof($user_ids))				{					trigger_error($user->lang['USER_PRUNE_FAILURE'] . adm_back_link($this->u_action), E_USER_WARNING);				}				// Assign to template				foreach ($user_ids as $user_id)				{					$template->assign_block_vars('users', array(						'USERNAME'			=> $usernames[$user_id],						'U_PROFILE'			=> append_sid($phpbb_root_path . 'memberlist.' . $phpEx, 'mode=viewprofile&amp;u=' . $user_id),						'U_USER_ADMIN'		=> ($auth->acl_get('a_user')) ? append_sid("{$phpbb_admin_path}index.$phpEx", 'i=users&amp;mode=overview&amp;u=' . $user_id, true, $user->session_id) : '',					));				}				$template->assign_vars(array(					'S_DEACTIVATE'		=> ($action == 'deactivate') ? true : false,					'S_DELETE'			=> ($action == 'delete') ? true : false,				));				confirm_box(false, $user->lang['CONFIRM_OPERATION'], build_hidden_fields(array(					'i'				=> $id,					'mode'			=> $mode,					'prune'			=> 1,					'users'			=> utf8_normalize_nfc(request_var('users', '', true)),					'username'		=> utf8_normalize_nfc(request_var('username', '', true)),					'email'			=> request_var('email', ''),					'joined_select'	=> request_var('joined_select', ''),					'joined'		=> request_var('joined', ''),					'active_select'	=> request_var('active_select', ''),					'active'		=> request_var('active', ''),					'count_select'	=> request_var('count_select', ''),					'count'			=> request_var('count', ''),					'deleteposts'	=> request_var('deleteposts', 0),					'action'		=> request_var('action', ''),				)), 'confirm_body_prune.html');			}		}		$find_count = array('lt' => $user->lang['LESS_THAN'], 'eq' => $user->lang['EQUAL_TO'], 'gt' => $user->lang['MORE_THAN']);		$s_find_count = '';		foreach ($find_count as $key => $value)		{			$selected = ($key == 'eq') ? ' selected="selected"' : '';			$s_find_count .= '<option value="' . $key . '"' . $selected . '>' . $value . '</option>';		}		$find_time = array('lt' => $user->lang['BEFORE'], 'gt' => $user->lang['AFTER']);		$s_find_join_time = '';		foreach ($find_time as $key => $value)		{			$s_find_join_time .= '<option value="' . $key . '">' . $value . '</option>';		}				$s_find_active_time = '';		foreach ($find_time as $key => $value)		{			$s_find_active_time .= '<option value="' . $key . '">' . $value . '</option>';		}		$template->assign_vars(array(			'U_ACTION'			=> $this->u_action,			'S_JOINED_OPTIONS'	=> $s_find_join_time,			'S_ACTIVE_OPTIONS'	=> $s_find_active_time,			'S_COUNT_OPTIONS'	=> $s_find_count,			'U_FIND_USERNAME'	=> append_sid("{$phpbb_root_path}memberlist.$phpEx", 'mode=searchuser&amp;form=acp_prune&amp;field=users'),		));	}	/**	* Get user_ids/usernames from those being pruned	*/	function get_prune_users(&$user_ids, &$usernames)	{		global $user, $db;		$users = utf8_normalize_nfc(request_var('users', '', true));				if ($users)		{			$users = explode("\n", $users);			$where_sql = ' AND ' . $db->sql_in_set('username_clean', array_map('utf8_clean_string', $users));		}		else		{			$username = utf8_normalize_nfc(request_var('username', '', true));			$email = request_var('email', '');			$joined_select = request_var('joined_select', 'lt');			$active_select = request_var('active_select', 'lt');			$count_select = request_var('count_select', 'eq');			$joined = request_var('joined', '');			$active = request_var('active', '');			$active = ($active) ? explode('-', $active) : array();			$joined = ($joined) ? explode('-', $joined) : array();			if ((sizeof($active) && sizeof($active) != 3) || (sizeof($joined) && sizeof($joined) != 3))			{				trigger_error($user->lang['WRONG_ACTIVE_JOINED_DATE'] . adm_back_link($this->u_action), E_USER_WARNING);			}			$count = request_var('count', '');			$key_match = array('lt' => '<', 'gt' => '>', 'eq' => '=');			$sort_by_types = array('username', 'user_email', 'user_posts', 'user_regdate', 'user_lastvisit');			$where_sql = '';			$where_sql .= ($username) ? ' AND username_clean ' . $db->sql_like_expression(str_replace('*', $db->any_char, utf8_clean_string($username))) : '';			$where_sql .= ($email) ? ' AND user_email ' . $db->sql_like_expression(str_replace('*', $db->any_char, $email)) . ' ' : '';			$where_sql .= (sizeof($joined)) ? " AND user_regdate " . $key_match[$joined_select] . ' ' . gmmktime(0, 0, 0, (int) $joined[1], (int) $joined[2], (int) $joined[0]) : '';			$where_sql .= ($count !== '') ? " AND user_posts " . $key_match[$count_select] . ' ' . (int) $count . ' ' : '';			// First handle pruning of users who never logged in, last active date is 0000-00-00			if (sizeof($active) && (int) $active[0] == 0 && (int) $active[1] == 0 && (int) $active[2] == 0)			{				$where_sql .= ' AND user_lastvisit = 0';			}						else if (sizeof($active) && $active_select != 'lt')			{				$where_sql .= ' AND user_lastvisit ' . $key_match[$active_select] . ' ' . gmmktime(0, 0, 0, (int) $active[1], (int) $active[2], (int) $active[0]);			}			else if (sizeof($active))			{				$where_sql .= ' AND (user_lastvisit > 0 AND user_lastvisit < ' . gmmktime(0, 0, 0, (int) $active[1], (int) $active[2], (int) $active[0]) . ')';			}		}		// Protect the admin, do not prune if no options are given...		if (!$where_sql)		{			return;		}		// Get bot ids		$sql = 'SELECT user_id			FROM ' . BOTS_TABLE;		$result = $db->sql_query($sql);		$bot_ids = array();		while ($row = $db->sql_fetchrow($result))		{			$bot_ids[] = $row['user_id'];		}		$db->sql_freeresult($result);		// Do not prune founder members		$sql = 'SELECT user_id, username			FROM ' . USERS_TABLE . '			WHERE user_id <> ' . ANONYMOUS . '				AND user_type <> ' . USER_FOUNDER . "			$where_sql";		$result = $db->sql_query($sql);		$where_sql = '';		$user_ids = $usernames = array();		while ($row = $db->sql_fetchrow($result))		{			// Do not prune bots and the user currently pruning.			if ($row['user_id'] != $user->data['user_id'] && !in_array($row['user_id'], $bot_ids))			{				$user_ids[] = $row['user_id'];				$usernames[$row['user_id']] = $row['username'];			}		}		$db->sql_freeresult($result);	}}?>
<?php/**** @package mcp* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @package module_install*/class mcp_queue_info{	function module()	{		return array(			'filename'	=> 'mcp_queue',			'title'		=> 'MCP_QUEUE',			'version'	=> '1.0.0',			'modes'		=> array(				'unapproved_topics'	=> array('title' => 'MCP_QUEUE_UNAPPROVED_TOPICS', 'auth' => 'aclf_m_approve', 'cat' => array('MCP_QUEUE')),				'unapproved_posts'	=> array('title' => 'MCP_QUEUE_UNAPPROVED_POSTS', 'auth' => 'aclf_m_approve', 'cat' => array('MCP_QUEUE')),				'approve_details'	=> array('title' => 'MCP_QUEUE_APPROVE_DETAILS', 'auth' => 'acl_m_approve,$id || (!$id && aclf_m_approve)', 'cat' => array('MCP_QUEUE')),			),		);	}	function install()	{	}	function uninstall()	{	}}?>
<?php return array(0=>'0',1=>'1',2=>'2',3=>'3',4=>'4',5=>'5',6=>'6',7=>'7',8=>'8',9=>'9','A'=>'a','B'=>'b','C'=>'c','D'=>'d','E'=>'e','F'=>'f','G'=>'g','H'=>'h','I'=>'i','J'=>'j','K'=>'k','L'=>'l','M'=>'m','N'=>'n','O'=>'o','P'=>'p','Q'=>'q','R'=>'r','S'=>'s','T'=>'t','U'=>'u','V'=>'v','W'=>'w','X'=>'x','Y'=>'y','Z'=>'z','a'=>'a','b'=>'b','c'=>'c','d'=>'d','e'=>'e','f'=>'f','g'=>'g','h'=>'h','i'=>'i','j'=>'j','k'=>'k','l'=>'l','m'=>'m','n'=>'n','o'=>'o','p'=>'p','q'=>'q','r'=>'r','s'=>'s','t'=>'t','u'=>'u','v'=>'v','w'=>'w','x'=>'x','y'=>'y','z'=>'z',''=>'',''=>'2',''=>'3',''=>'',''=>'1',''=>'',''=>'1/4',''=>'1/2',''=>'3/4',''=>'',''=>'',''=>'',''=>'',''=>'ae',''=>'',''=>'ae',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'oe',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'ss',''=>'',''=>'',''=>'',''=>'',''=>'ae',''=>'',''=>'ae',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'oe',''=>'',''=>'',''=>'',''=>'',''=>'ue',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'i',''=>'',''=>'ij',''=>'ij',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'oe',''=>'oe',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'hv',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'oi',''=>'oi',''=>'',''=>'',''=>'yr',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'lj',''=>'',''=>'lj',''=>'nj',''=>'',''=>'nj',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'dz',''=>'',''=>'dz',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'ou',''=>'ou',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'0',''=>'1',''=>'2',''=>'3',''=>'4',''=>'5',''=>'6',''=>'7',''=>'8',''=>'9',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'0',''=>'1',''=>'2',''=>'3',''=>'4',''=>'5',''=>'6',''=>'7',''=>'8',''=>'9',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'0',''=>'1',''=>'2',''=>'3',''=>'4',''=>'5',''=>'6',''=>'7',''=>'8',''=>'9',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'');
<?php/**** @package mcp* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @ignore*/if (!defined('IN_PHPBB')){	exit;}/*** mcp_queue* Handling the moderation queue* @package mcp*/class mcp_queue{	var $p_master;	var $u_action;	function mcp_queue(&$p_master)	{		$this->p_master = &$p_master;	}	function main($id, $mode)	{		global $auth, $db, $user, $template, $cache;		global $config, $phpbb_root_path, $phpEx, $action;		include_once($phpbb_root_path . 'includes/functions_posting.' . $phpEx);		$forum_id = request_var('f', 0);		$start = request_var('start', 0);		$this->page_title = 'MCP_QUEUE';		switch ($action)		{			case 'approve':			case 'disapprove':				include_once($phpbb_root_path . 'includes/functions_messenger.' . $phpEx);				$post_id_list = request_var('post_id_list', array(0));				if (!sizeof($post_id_list))				{					trigger_error('NO_POST_SELECTED');				}				if ($action == 'approve')				{					approve_post($post_id_list, 'queue', $mode);				}				else				{					disapprove_post($post_id_list, 'queue', $mode);				}			break;		}		switch ($mode)		{			case 'approve_details':				$this->tpl_name = 'mcp_post';				$user->add_lang(array('posting', 'viewtopic'));				$post_id = request_var('p', 0);				$topic_id = request_var('t', 0);				if ($topic_id)				{					$topic_info = get_topic_data(array($topic_id), 'm_approve');					if (isset($topic_info[$topic_id]['topic_first_post_id']))					{						$post_id = (int) $topic_info[$topic_id]['topic_first_post_id'];					}					else					{						$topic_id = 0;					}				}				$post_info = get_post_data(array($post_id), 'm_approve', true);				if (!sizeof($post_info))				{					trigger_error('NO_POST_SELECTED');				}				$post_info = $post_info[$post_id];				if ($post_info['topic_first_post_id'] != $post_id && topic_review($post_info['topic_id'], $post_info['forum_id'], 'topic_review', 0, false))				{					$template->assign_vars(array(						'S_TOPIC_REVIEW'	=> true,						'S_BBCODE_ALLOWED'	=> $post_info['enable_bbcode'],						'TOPIC_TITLE'		=> $post_info['topic_title'])					);				}				$extensions = $attachments = $topic_tracking_info = array();				// Get topic tracking info				if ($config['load_db_lastread'])				{					$tmp_topic_data = array($post_info['topic_id'] => $post_info);					$topic_tracking_info = get_topic_tracking($post_info['forum_id'], $post_info['topic_id'], $tmp_topic_data, array($post_info['forum_id'] => $post_info['forum_mark_time']));					unset($tmp_topic_data);				}				else				{					$topic_tracking_info = get_complete_topic_tracking($post_info['forum_id'], $post_info['topic_id']);				}				$post_unread = (isset($topic_tracking_info[$post_info['topic_id']]) && $post_info['post_time'] > $topic_tracking_info[$post_info['topic_id']]) ? true : false;				// Process message, leave it uncensored				$message = $post_info['post_text'];				if ($post_info['bbcode_bitfield'])				{					include_once($phpbb_root_path . 'includes/bbcode.' . $phpEx);					$bbcode = new bbcode($post_info['bbcode_bitfield']);					$bbcode->bbcode_second_pass($message, $post_info['bbcode_uid'], $post_info['bbcode_bitfield']);				}				$message = bbcode_nl2br($message);				$message = smiley_text($message);				if ($post_info['post_attachment'] && $auth->acl_get('u_download') && $auth->acl_get('f_download', $post_info['forum_id']))				{					$extensions = $cache->obtain_attach_extensions($post_info['forum_id']);					$sql = 'SELECT *						FROM ' . ATTACHMENTS_TABLE . '						WHERE post_msg_id = ' . $post_id . '							AND in_message = 0						ORDER BY filetime DESC, post_msg_id ASC';					$result = $db->sql_query($sql);					while ($row = $db->sql_fetchrow($result))					{						$attachments[] = $row;					}					$db->sql_freeresult($result);					if (sizeof($attachments))					{						$update_count = array();						parse_attachments($post_info['forum_id'], $message, $attachments, $update_count);					}					// Display not already displayed Attachments for this post, we already parsed them. ;)					if (!empty($attachments))					{						$template->assign_var('S_HAS_ATTACHMENTS', true);						foreach ($attachments as $attachment)						{							$template->assign_block_vars('attachment', array(								'DISPLAY_ATTACHMENT'	=> $attachment)							);						}					}				}				$post_url = append_sid("{$phpbb_root_path}viewtopic.$phpEx", 'f=' . $post_info['forum_id'] . '&amp;p=' . $post_info['post_id'] . '#p' . $post_info['post_id']);				$topic_url = append_sid("{$phpbb_root_path}viewtopic.$phpEx", 'f=' . $post_info['forum_id'] . '&amp;t=' . $post_info['topic_id']);				$template->assign_vars(array(					'S_MCP_QUEUE'			=> true,					'U_APPROVE_ACTION'		=> append_sid("{$phpbb_root_path}mcp.$phpEx", "i=queue&amp;p=$post_id&amp;f=$forum_id"),					'S_CAN_VIEWIP'			=> $auth->acl_get('m_info', $post_info['forum_id']),					'S_POST_REPORTED'		=> $post_info['post_reported'],					'S_POST_UNAPPROVED'		=> !$post_info['post_approved'],					'S_POST_LOCKED'			=> $post_info['post_edit_locked'],					'S_USER_NOTES'			=> true,					'U_EDIT'				=> ($auth->acl_get('m_edit', $post_info['forum_id'])) ? append_sid("{$phpbb_root_path}posting.$phpEx", "mode=edit&amp;f={$post_info['forum_id']}&amp;p={$post_info['post_id']}") : '',					'U_MCP_APPROVE'			=> append_sid("{$phpbb_root_path}mcp.$phpEx", 'i=queue&amp;mode=approve_details&amp;f=' . $post_info['forum_id'] . '&amp;p=' . $post_id),					'U_MCP_REPORT'			=> append_sid("{$phpbb_root_path}mcp.$phpEx", 'i=reports&amp;mode=report_details&amp;f=' . $post_info['forum_id'] . '&amp;p=' . $post_id),					'U_MCP_USER_NOTES'		=> append_sid("{$phpbb_root_path}mcp.$phpEx", 'i=notes&amp;mode=user_notes&amp;u=' . $post_info['user_id']),					'U_MCP_WARN_USER'		=> ($auth->acl_get('m_warn')) ? append_sid("{$phpbb_root_path}mcp.$phpEx", 'i=warn&amp;mode=warn_user&amp;u=' . $post_info['user_id']) : '',					'U_VIEW_POST'			=> $post_url,					'U_VIEW_TOPIC'			=> $topic_url,					'MINI_POST_IMG'			=> ($post_unread) ? $user->img('icon_post_target_unread', 'UNREAD_POST') : $user->img('icon_post_target', 'POST'),					'RETURN_QUEUE'			=> sprintf($user->lang['RETURN_QUEUE'], '<a href="' . append_sid("{$phpbb_root_path}mcp.$phpEx", 'i=queue' . (($topic_id) ? '&amp;mode=unapproved_topics' : '&amp;mode=unapproved_posts')) . "&amp;start=$start\">", '</a>'),					'RETURN_POST'			=> sprintf($user->lang['RETURN_POST'], '<a href="' . $post_url . '">', '</a>'),					'RETURN_TOPIC_SIMPLE'	=> sprintf($user->lang['RETURN_TOPIC_SIMPLE'], '<a href="' . $topic_url . '">', '</a>'),					'REPORTED_IMG'			=> $user->img('icon_topic_reported', $user->lang['POST_REPORTED']),					'UNAPPROVED_IMG'		=> $user->img('icon_topic_unapproved', $user->lang['POST_UNAPPROVED']),					'EDIT_IMG'				=> $user->img('icon_post_edit', $user->lang['EDIT_POST']),					'POST_AUTHOR_FULL'		=> get_username_string('full', $post_info['user_id'], $post_info['username'], $post_info['user_colour'], $post_info['post_username']),					'POST_AUTHOR_COLOUR'	=> get_username_string('colour', $post_info['user_id'], $post_info['username'], $post_info['user_colour'], $post_info['post_username']),					'POST_AUTHOR'			=> get_username_string('username', $post_info['user_id'], $post_info['username'], $post_info['user_colour'], $post_info['post_username']),					'U_POST_AUTHOR'			=> get_username_string('profile', $post_info['user_id'], $post_info['username'], $post_info['user_colour'], $post_info['post_username']),					'POST_PREVIEW'			=> $message,					'POST_SUBJECT'			=> $post_info['post_subject'],					'POST_DATE'				=> $user->format_date($post_info['post_time']),					'POST_IP'				=> $post_info['poster_ip'],					'POST_IPADDR'			=> ($auth->acl_get('m_info', $post_info['forum_id']) && request_var('lookup', '')) ? @gethostbyaddr($post_info['poster_ip']) : '',					'POST_ID'				=> $post_info['post_id'],					'S_FIRST_POST'			=> ($post_info['topic_first_post_id'] == $post_id),					'U_LOOKUP_IP'			=> ($auth->acl_get('m_info', $post_info['forum_id'])) ? append_sid("{$phpbb_root_path}mcp.$phpEx", 'i=queue&amp;mode=approve_details&amp;f=' . $post_info['forum_id'] . '&amp;p=' . $post_id . '&amp;lookup=' . $post_info['poster_ip']) . '#ip' : '',				));			break;			case 'unapproved_topics':			case 'unapproved_posts':				$user->add_lang(array('viewtopic', 'viewforum'));				$topic_id = request_var('t', 0);				$forum_info = array();				if ($topic_id)				{					$topic_info = get_topic_data(array($topic_id));					if (!sizeof($topic_info))					{						trigger_error('TOPIC_NOT_EXIST');					}					$topic_info = $topic_info[$topic_id];					$forum_id = $topic_info['forum_id'];				}				$forum_list_approve = get_forum_list('m_approve', false, true);				$forum_list_read = array_flip(get_forum_list('f_read', true, true)); // Flipped so we can isset() the forum IDs				// Remove forums we cannot read				foreach ($forum_list_approve as $k => $forum_data)				{					if (!isset($forum_list_read[$forum_data['forum_id']]))					{						unset($forum_list_approve[$k]);					}				}				unset($forum_list_read);				if (!$forum_id)				{					$forum_list = array();					foreach ($forum_list_approve as $row)					{						$forum_list[] = $row['forum_id'];					}					if (!sizeof($forum_list))					{						trigger_error('NOT_MODERATOR');					}					$global_id = $forum_list[0];					$forum_list = implode(', ', $forum_list);					$sql = 'SELECT SUM(forum_topics) as sum_forum_topics						FROM ' . FORUMS_TABLE . "						WHERE forum_id IN (0, $forum_list)";					$result = $db->sql_query($sql);					$forum_info['forum_topics'] = (int) $db->sql_fetchfield('sum_forum_topics');					$db->sql_freeresult($result);				}				else				{					$forum_info = get_forum_data(array($forum_id), 'm_approve');					if (!sizeof($forum_info))					{						trigger_error('NOT_MODERATOR');					}					$forum_info = $forum_info[$forum_id];					$forum_list = $forum_id;					$global_id = $forum_id;				}				$forum_options = '<option value="0"' . (($forum_id == 0) ? ' selected="selected"' : '') . '>' . $user->lang['ALL_FORUMS'] . '</option>';				foreach ($forum_list_approve as $row)				{					$forum_options .= '<option value="' . $row['forum_id'] . '"' . (($forum_id == $row['forum_id']) ? ' selected="selected"' : '') . '>' . str_repeat('&nbsp; &nbsp;', $row['padding']) . $row['forum_name'] . '</option>';				}				$sort_days = $total = 0;				$sort_key = $sort_dir = '';				$sort_by_sql = $sort_order_sql = array();				mcp_sorting($mode, $sort_days, $sort_key, $sort_dir, $sort_by_sql, $sort_order_sql, $total, $forum_id, $topic_id);				$forum_topics = ($total == -1) ? $forum_info['forum_topics'] : $total;				$limit_time_sql = ($sort_days) ? 'AND t.topic_last_post_time >= ' . (time() - ($sort_days * 86400)) : '';				$forum_names = array();				if ($mode == 'unapproved_posts')				{					$sql = 'SELECT p.post_id						FROM ' . POSTS_TABLE . ' p, ' . TOPICS_TABLE . ' t' . (($sort_order_sql[0] == 'u') ? ', ' . USERS_TABLE . ' u' : '') . "						WHERE p.forum_id IN (0, $forum_list)							AND p.post_approved = 0							" . (($sort_order_sql[0] == 'u') ? 'AND u.user_id = p.poster_id' : '') . '							' . (($topic_id) ? 'AND p.topic_id = ' . $topic_id : '') . "							AND t.topic_id = p.topic_id							AND t.topic_first_post_id <> p.post_id							$limit_time_sql						ORDER BY $sort_order_sql";					$result = $db->sql_query_limit($sql, $config['topics_per_page'], $start);					$i = 0;					$post_ids = array();					while ($row = $db->sql_fetchrow($result))					{						$post_ids[] = $row['post_id'];						$row_num[$row['post_id']] = $i++;					}					$db->sql_freeresult($result);					if (sizeof($post_ids))					{						$sql = 'SELECT t.topic_id, t.topic_title, t.forum_id, p.post_id, p.post_subject, p.post_username, p.poster_id, p.post_time, u.username, u.username_clean, u.user_colour							FROM ' . POSTS_TABLE . ' p, ' . TOPICS_TABLE . ' t, ' . USERS_TABLE . ' u							WHERE ' . $db->sql_in_set('p.post_id', $post_ids) . '								AND t.topic_id = p.topic_id								AND u.user_id = p.poster_id							ORDER BY ' . $sort_order_sql;						$result = $db->sql_query($sql);						$post_data = $rowset = array();						while ($row = $db->sql_fetchrow($result))						{							if ($row['forum_id'])							{								$forum_names[] = $row['forum_id'];							}							$post_data[$row['post_id']] = $row;						}						$db->sql_freeresult($result);						foreach ($post_ids as $post_id)						{							$rowset[] = $post_data[$post_id];						}						unset($post_data, $post_ids);					}					else					{						$rowset = array();					}				}				else				{					$sql = 'SELECT t.forum_id, t.topic_id, t.topic_title, t.topic_title AS post_subject, t.topic_time AS post_time, t.topic_poster AS poster_id, t.topic_first_post_id AS post_id, t.topic_first_poster_name AS username, t.topic_first_poster_colour AS user_colour						FROM ' . TOPICS_TABLE . " t						WHERE forum_id IN (0, $forum_list)							AND topic_approved = 0							$limit_time_sql						ORDER BY $sort_order_sql";					$result = $db->sql_query_limit($sql, $config['topics_per_page'], $start);					$rowset = array();					while ($row = $db->sql_fetchrow($result))					{						if ($row['forum_id'])						{							$forum_names[] = $row['forum_id'];						}						$rowset[] = $row;					}					$db->sql_freeresult($result);				}				if (sizeof($forum_names))				{					// Select the names for the forum_ids					$sql = 'SELECT forum_id, forum_name						FROM ' . FORUMS_TABLE . '						WHERE ' . $db->sql_in_set('forum_id', $forum_names);					$result = $db->sql_query($sql, 3600);					$forum_names = array();					while ($row = $db->sql_fetchrow($result))					{						$forum_names[$row['forum_id']] = $row['forum_name'];					}					$db->sql_freeresult($result);				}				foreach ($rowset as $row)				{					$global_topic = ($row['forum_id']) ? false : true;					if ($global_topic)					{						$row['forum_id'] = $global_id;					}					if (empty($row['post_username']))					{						$row['post_username'] = $user->lang['GUEST'];					}					$template->assign_block_vars('postrow', array(						'U_TOPIC'			=> append_sid("{$phpbb_root_path}viewtopic.$phpEx", 'f=' . $row['forum_id'] . '&amp;t=' . $row['topic_id']),						'U_VIEWFORUM'		=> (!$global_topic) ? append_sid("{$phpbb_root_path}viewforum.$phpEx", 'f=' . $row['forum_id']) : '',						'U_VIEWPOST'		=> append_sid("{$phpbb_root_path}viewtopic.$phpEx", 'f=' . $row['forum_id'] . '&amp;p=' . $row['post_id']) . (($mode == 'unapproved_posts') ? '#p' . $row['post_id'] : ''),						'U_VIEW_DETAILS'	=> append_sid("{$phpbb_root_path}mcp.$phpEx", "i=queue&amp;start=$start&amp;mode=approve_details&amp;f={$row['forum_id']}&amp;p={$row['post_id']}" . (($mode == 'unapproved_topics') ? "&amp;t={$row['topic_id']}" : '')),						'POST_AUTHOR_FULL'		=> get_username_string('full', $row['poster_id'], $row['username'], $row['user_colour'], $row['post_username']),						'POST_AUTHOR_COLOUR'	=> get_username_string('colour', $row['poster_id'], $row['username'], $row['user_colour'], $row['post_username']),						'POST_AUTHOR'			=> get_username_string('username', $row['poster_id'], $row['username'], $row['user_colour'], $row['post_username']),						'U_POST_AUTHOR'			=> get_username_string('profile', $row['poster_id'], $row['username'], $row['user_colour'], $row['post_username']),						'POST_ID'		=> $row['post_id'],						'FORUM_NAME'	=> (!$global_topic) ? $forum_names[$row['forum_id']] : $user->lang['GLOBAL_ANNOUNCEMENT'],						'POST_SUBJECT'	=> ($row['post_subject'] != '') ? $row['post_subject'] : $user->lang['NO_SUBJECT'],						'TOPIC_TITLE'	=> $row['topic_title'],						'POST_TIME'		=> $user->format_date($row['post_time']))					);				}				unset($rowset, $forum_names);				// Now display the page				$template->assign_vars(array(					'L_DISPLAY_ITEMS'		=> ($mode == 'unapproved_posts') ? $user->lang['DISPLAY_POSTS'] : $user->lang['DISPLAY_TOPICS'],					'L_EXPLAIN'				=> ($mode == 'unapproved_posts') ? $user->lang['MCP_QUEUE_UNAPPROVED_POSTS_EXPLAIN'] : $user->lang['MCP_QUEUE_UNAPPROVED_TOPICS_EXPLAIN'],					'L_TITLE'				=> ($mode == 'unapproved_posts') ? $user->lang['MCP_QUEUE_UNAPPROVED_POSTS'] : $user->lang['MCP_QUEUE_UNAPPROVED_TOPICS'],					'L_ONLY_TOPIC'			=> ($topic_id) ? sprintf($user->lang['ONLY_TOPIC'], $topic_info['topic_title']) : '',					'S_FORUM_OPTIONS'		=> $forum_options,					'S_MCP_ACTION'			=> build_url(array('t', 'f', 'sd', 'st', 'sk')),					'S_TOPICS'				=> ($mode == 'unapproved_posts') ? false : true,					'PAGINATION'			=> generate_pagination($this->u_action . "&amp;f=$forum_id&amp;st=$sort_days&amp;sk=$sort_key&amp;sd=$sort_dir", $total, $config['topics_per_page'], $start),					'PAGE_NUMBER'			=> on_page($total, $config['topics_per_page'], $start),					'TOPIC_ID'				=> $topic_id,					'TOTAL'					=> ($total == 1) ? (($mode == 'unapproved_posts') ? $user->lang['VIEW_TOPIC_POST'] : $user->lang['VIEW_FORUM_TOPIC']) : sprintf((($mode == 'unapproved_posts') ? $user->lang['VIEW_TOPIC_POSTS'] : $user->lang['VIEW_FORUM_TOPICS']), $total),				));				$this->tpl_name = 'mcp_queue';			break;		}	}}/*** Approve Post/Topic*/function approve_post($post_id_list, $id, $mode){	global $db, $template, $user, $config;	global $phpEx, $phpbb_root_path;	if (!check_ids($post_id_list, POSTS_TABLE, 'post_id', array('m_approve')))	{		trigger_error('NOT_AUTHORISED');	}	$redirect = request_var('redirect', build_url(array('quickmod')));	$success_msg = '';	$s_hidden_fields = build_hidden_fields(array(		'i'				=> $id,		'mode'			=> $mode,		'post_id_list'	=> $post_id_list,		'action'		=> 'approve',		'redirect'		=> $redirect)	);	$post_info = get_post_data($post_id_list, 'm_approve');	if (confirm_box(true))	{		$notify_poster = (isset($_REQUEST['notify_poster'])) ? true : false;		// If Topic -> total_topics = total_topics+1, total_posts = total_posts+1, forum_topics = forum_topics+1, forum_posts = forum_posts+1		// If Post -> total_posts = total_posts+1, forum_posts = forum_posts+1, topic_replies = topic_replies+1		$total_topics = $total_posts = 0;		$topic_approve_sql = $post_approve_sql = $topic_id_list = $forum_id_list = $approve_log = array();		$user_posts_sql = $post_approved_list = array();		foreach ($post_info as $post_id => $post_data)		{			if ($post_data['post_approved'])			{				$post_approved_list[] = $post_id;				continue;			}			$topic_id_list[$post_data['topic_id']] = 1;			if ($post_data['forum_id'])			{				$forum_id_list[$post_data['forum_id']] = 1;			}			// User post update (we do not care about topic or post, since user posts are strictly connected to posts)			// But we care about forums where post counts get not increased. ;)			if ($post_data['post_postcount'])			{				$user_posts_sql[$post_data['poster_id']] = (empty($user_posts_sql[$post_data['poster_id']])) ? 1 : $user_posts_sql[$post_data['poster_id']] + 1;			}			// Topic or Post. ;)			if ($post_data['topic_first_post_id'] == $post_id)			{				if ($post_data['forum_id'])				{					$total_topics++;				}				$topic_approve_sql[] = $post_data['topic_id'];				$approve_log[] = array(					'type'			=> 'topic',					'post_subject'	=> $post_data['post_subject'],					'forum_id'		=> $post_data['forum_id'],					'topic_id'		=> $post_data['topic_id'],				);			}			else			{				$approve_log[] = array(					'type'			=> 'post',					'post_subject'	=> $post_data['post_subject'],					'forum_id'		=> $post_data['forum_id'],					'topic_id'		=> $post_data['topic_id'],				);			}			if ($post_data['forum_id'])			{				$total_posts++;				// Increment by topic_replies if we approve a topic...				// This works because we do not adjust the topic_replies when re-approving a topic after an edit.				if ($post_data['topic_first_post_id'] == $post_id && $post_data['topic_replies'])				{					$total_posts += $post_data['topic_replies'];				}			}			$post_approve_sql[] = $post_id;		}		$post_id_list = array_values(array_diff($post_id_list, $post_approved_list));		for ($i = 0, $size = sizeof($post_approved_list); $i < $size; $i++)		{			unset($post_info[$post_approved_list[$i]]);		}		if (sizeof($topic_approve_sql))		{			$sql = 'UPDATE ' . TOPICS_TABLE . '				SET topic_approved = 1				WHERE ' . $db->sql_in_set('topic_id', $topic_approve_sql);			$db->sql_query($sql);		}		if (sizeof($post_approve_sql))		{			$sql = 'UPDATE ' . POSTS_TABLE . '				SET post_approved = 1				WHERE ' . $db->sql_in_set('post_id', $post_approve_sql);			$db->sql_query($sql);		}		unset($topic_approve_sql, $post_approve_sql);		foreach ($approve_log as $log_data)		{			add_log('mod', $log_data['forum_id'], $log_data['topic_id'], ($log_data['type'] == 'topic') ? 'LOG_TOPIC_APPROVED' : 'LOG_POST_APPROVED', $log_data['post_subject']);		}		if (sizeof($user_posts_sql))		{			// Try to minimize the query count by merging users with the same post count additions			$user_posts_update = array();			foreach ($user_posts_sql as $user_id => $user_posts)			{				$user_posts_update[$user_posts][] = $user_id;			}			foreach ($user_posts_update as $user_posts => $user_id_ary)			{				$sql = 'UPDATE ' . USERS_TABLE . '					SET user_posts = user_posts + ' . $user_posts . '					WHERE ' . $db->sql_in_set('user_id', $user_id_ary);				$db->sql_query($sql);			}		}		if ($total_topics)		{			set_config_count('num_topics', $total_topics, true);		}		if ($total_posts)		{			set_config_count('num_posts', $total_posts, true);		}		sync('topic', 'topic_id', array_keys($topic_id_list), true);		sync('forum', 'forum_id', array_keys($forum_id_list), true, true);		unset($topic_id_list, $forum_id_list);		$messenger = new messenger();		// Notify Poster?		if ($notify_poster)		{			foreach ($post_info as $post_id => $post_data)			{				if ($post_data['poster_id'] == ANONYMOUS)				{					continue;				}				$email_template = ($post_data['post_id'] == $post_data['topic_first_post_id'] && $post_data['post_id'] == $post_data['topic_last_post_id']) ? 'topic_approved' : 'post_approved';				$messenger->template($email_template, $post_data['user_lang']);				$messenger->to($post_data['user_email'], $post_data['username']);				$messenger->im($post_data['user_jabber'], $post_data['username']);				$messenger->assign_vars(array(					'USERNAME'		=> htmlspecialchars_decode($post_data['username']),					'POST_SUBJECT'	=> htmlspecialchars_decode(censor_text($post_data['post_subject'])),					'TOPIC_TITLE'	=> htmlspecialchars_decode(censor_text($post_data['topic_title'])),					'U_VIEW_TOPIC'	=> generate_board_url() . "/viewtopic.$phpEx?f={$post_data['forum_id']}&t={$post_data['topic_id']}&e=0",					'U_VIEW_POST'	=> generate_board_url() . "/viewtopic.$phpEx?f={$post_data['forum_id']}&t={$post_data['topic_id']}&p=$post_id&e=$post_id")				);				$messenger->send($post_data['user_notify_type']);			}		}		$messenger->save_queue();		// Send out normal user notifications		$email_sig = str_replace('<br />', "\n", "-- \n" . $config['board_email_sig']);		foreach ($post_info as $post_id => $post_data)		{			if ($post_id == $post_data['topic_first_post_id'] && $post_id == $post_data['topic_last_post_id'])			{				// Forum Notifications				user_notification('post', $post_data['topic_title'], $post_data['topic_title'], $post_data['forum_name'], $post_data['forum_id'], $post_data['topic_id'], $post_id);			}			else			{				// Topic Notifications				user_notification('reply', $post_data['post_subject'], $post_data['topic_title'], $post_data['forum_name'], $post_data['forum_id'], $post_data['topic_id'], $post_id);			}		}		if (sizeof($post_id_list) == 1)		{			$post_data = $post_info[$post_id_list[0]];			$post_url = append_sid("{$phpbb_root_path}viewtopic.$phpEx", "f={$post_data['forum_id']}&amp;t={$post_data['topic_id']}&amp;p={$post_data['post_id']}") . '#p' . $post_data['post_id'];		}		unset($post_info);		if ($total_topics)		{			$success_msg = ($total_topics == 1) ? 'TOPIC_APPROVED_SUCCESS' : 'TOPICS_APPROVED_SUCCESS';		}		else		{			$success_msg = (sizeof($post_id_list) + sizeof($post_approved_list) == 1) ? 'POST_APPROVED_SUCCESS' : 'POSTS_APPROVED_SUCCESS';		}	}	else	{		$show_notify = false;		if ($config['email_enable'] || $config['jab_enable'])		{			foreach ($post_info as $post_data)			{				if ($post_data['poster_id'] == ANONYMOUS)				{					continue;				}				else				{					$show_notify = true;					break;				}			}		}		$template->assign_vars(array(			'S_NOTIFY_POSTER'	=> $show_notify,			'S_APPROVE'			=> true)		);		confirm_box(false, 'APPROVE_POST' . ((sizeof($post_id_list) == 1) ? '' : 'S'), $s_hidden_fields, 'mcp_approve.html');	}	$redirect = request_var('redirect', "index.$phpEx");	$redirect = reapply_sid($redirect);	if (!$success_msg)	{		redirect($redirect);	}	else	{		meta_refresh(3, $redirect);		// If approving one post, also give links back to post...		$add_message = '';		if (sizeof($post_id_list) == 1 && !empty($post_url))		{			$add_message = '<br /><br />' . sprintf($user->lang['RETURN_POST'], '<a href="' . $post_url . '">', '</a>');		}		trigger_error($user->lang[$success_msg] . '<br /><br />' . sprintf($user->lang['RETURN_PAGE'], "<a href=\"$redirect\">", '</a>') . $add_message);	}}/*** Disapprove Post/Topic*/function disapprove_post($post_id_list, $id, $mode){	global $db, $template, $user, $config;	global $phpEx, $phpbb_root_path;	if (!check_ids($post_id_list, POSTS_TABLE, 'post_id', array('m_approve')))	{		trigger_error('NOT_AUTHORISED');	}	$redirect = request_var('redirect', build_url(array('t', 'mode', 'quickmod')) . "&amp;mode=$mode");	$reason = utf8_normalize_nfc(request_var('reason', '', true));	$reason_id = request_var('reason_id', 0);	$success_msg = $additional_msg = '';	$s_hidden_fields = build_hidden_fields(array(		'i'				=> $id,		'mode'			=> $mode,		'post_id_list'	=> $post_id_list,		'action'		=> 'disapprove',		'redirect'		=> $redirect)	);	$notify_poster = (isset($_REQUEST['notify_poster'])) ? true : false;	$disapprove_reason = '';	if ($reason_id)	{		$sql = 'SELECT reason_title, reason_description			FROM ' . REPORTS_REASONS_TABLE . "			WHERE reason_id = $reason_id";		$result = $db->sql_query($sql);		$row = $db->sql_fetchrow($result);		$db->sql_freeresult($result);		if (!$row || (!$reason && strtolower($row['reason_title']) == 'other'))		{			$additional_msg = $user->lang['NO_REASON_DISAPPROVAL'];			unset($_REQUEST['confirm_key']);			unset($_POST['confirm_key']);			unset($_POST['confirm']);		}		else		{			// If the reason is defined within the language file, we will use the localized version, else just use the database entry...			$disapprove_reason = (strtolower($row['reason_title']) != 'other') ? ((isset($user->lang['report_reasons']['DESCRIPTION'][strtoupper($row['reason_title'])])) ? $user->lang['report_reasons']['DESCRIPTION'][strtoupper($row['reason_title'])] : $row['reason_description']) : '';			$disapprove_reason .= ($reason) ? "\n\n" . $reason : '';			if (isset($user->lang['report_reasons']['DESCRIPTION'][strtoupper($row['reason_title'])]))			{				$disapprove_reason_lang = strtoupper($row['reason_title']);			}			$email_disapprove_reason = $disapprove_reason;		}	}	$post_info = get_post_data($post_id_list, 'm_approve');	if (confirm_box(true))	{		$disapprove_log = $disapprove_log_topics = $disapprove_log_posts = array();		$topic_replies_real = $post_disapprove_list = array();		// Build a list of posts to be unapproved and get the related topics real replies count		foreach ($post_info as $post_id => $post_data)		{			$post_disapprove_list[$post_id] = $post_data['topic_id'];			if (!isset($topic_replies_real[$post_data['topic_id']]))			{				$topic_replies_real[$post_data['topic_id']] = $post_data['topic_replies_real'];			}		}		// Now we build the log array		foreach ($post_disapprove_list as $post_id => $topic_id)		{			// If the count of disapproved posts for the topic is greater			// than topic's real replies count, the whole topic is disapproved/deleted			if (sizeof(array_keys($post_disapprove_list, $topic_id)) > $topic_replies_real[$topic_id])			{				// Don't write the log more than once for every topic				if (!isset($disapprove_log_topics[$topic_id]))				{					// Build disapproved topics log					$disapprove_log_topics[$topic_id] = array(						'type'			=> 'topic',						'post_subject'	=> $post_info[$post_id]['topic_title'],						'forum_id'		=> $post_info[$post_id]['forum_id'],						'topic_id'		=> 0, // useless to log a topic id, as it will be deleted					);				}			}			else			{				// Build disapproved posts log				$disapprove_log_posts[] = array(					'type'			=> 'post',					'post_subject'	=> $post_info[$post_id]['post_subject'],					'forum_id'		=> $post_info[$post_id]['forum_id'],					'topic_id'		=> $post_info[$post_id]['topic_id'],				);			}		}		// Get disapproved posts/topics counts separately		$num_disapproved_topics = sizeof($disapprove_log_topics);		$num_disapproved_posts = sizeof($disapprove_log_posts);		// Build the whole log		$disapprove_log = array_merge($disapprove_log_topics, $disapprove_log_posts);		// Unset unneeded arrays		unset($post_data, $disapprove_log_topics, $disapprove_log_posts);		// Let's do the job - delete disapproved posts		if (sizeof($post_disapprove_list))		{			if (!function_exists('delete_posts'))			{				include_once($phpbb_root_path . 'includes/functions_admin.' . $phpEx);			}			// We do not check for permissions here, because the moderator allowed approval/disapproval should be allowed to delete the disapproved posts			// Note: function delete_posts triggers related forums/topics sync,			// so we don't need to call update_post_information later and to adjust real topic replies or forum topics count manually			delete_posts('post_id', array_keys($post_disapprove_list));			foreach ($disapprove_log as $log_data)			{				add_log('mod', $log_data['forum_id'], $log_data['topic_id'], ($log_data['type'] == 'topic') ? 'LOG_TOPIC_DISAPPROVED' : 'LOG_POST_DISAPPROVED', $log_data['post_subject'], $disapprove_reason);			}		}		$messenger = new messenger();		// Notify Poster?		if ($notify_poster)		{			$lang_reasons = array();			foreach ($post_info as $post_id => $post_data)			{				if ($post_data['poster_id'] == ANONYMOUS)				{					continue;				}				if (isset($disapprove_reason_lang))				{					// Okay we need to get the reason from the posters language					if (!isset($lang_reasons[$post_data['user_lang']]))					{						// Assign the current users translation as the default, this is not ideal but getting the board default adds another layer of complexity.						$lang_reasons[$post_data['user_lang']] = $user->lang['report_reasons']['DESCRIPTION'][$disapprove_reason_lang];						// Only load up the language pack if the language is different to the current one						if ($post_data['user_lang'] != $user->lang_name && file_exists($phpbb_root_path . '/language/' . $post_data['user_lang'] . '/mcp.' . $phpEx))						{							// Load up the language pack							$lang = array();							@include($phpbb_root_path . '/language/' . basename($post_data['user_lang']) . '/mcp.' . $phpEx);							// If we find the reason in this language pack use it							if (isset($lang['report_reasons']['DESCRIPTION'][$disapprove_reason_lang]))							{								$lang_reasons[$post_data['user_lang']] = $lang['report_reasons']['DESCRIPTION'][$disapprove_reason_lang];							}							unset($lang); // Free memory						}					}					$email_disapprove_reason = $lang_reasons[$post_data['user_lang']];					$email_disapprove_reason .= ($reason) ? "\n\n" . $reason : '';				}				$email_template = ($post_data['post_id'] == $post_data['topic_first_post_id'] && $post_data['post_id'] == $post_data['topic_last_post_id']) ? 'topic_disapproved' : 'post_disapproved';				$messenger->template($email_template, $post_data['user_lang']);				$messenger->to($post_data['user_email'], $post_data['username']);				$messenger->im($post_data['user_jabber'], $post_data['username']);				$messenger->assign_vars(array(					'USERNAME'		=> htmlspecialchars_decode($post_data['username']),					'REASON'		=> htmlspecialchars_decode($email_disapprove_reason),					'POST_SUBJECT'	=> htmlspecialchars_decode(censor_text($post_data['post_subject'])),					'TOPIC_TITLE'	=> htmlspecialchars_decode(censor_text($post_data['topic_title'])))				);				$messenger->send($post_data['user_notify_type']);			}			unset($lang_reasons);		}		unset($post_info, $disapprove_reason, $email_disapprove_reason, $disapprove_reason_lang);		$messenger->save_queue();		if ($num_disapproved_topics)		{			$success_msg = ($num_disapproved_topics == 1) ? 'TOPIC_DISAPPROVED_SUCCESS' : 'TOPICS_DISAPPROVED_SUCCESS';		}		else		{			$success_msg = ($num_disapproved_posts == 1) ? 'POST_DISAPPROVED_SUCCESS' : 'POSTS_DISAPPROVED_SUCCESS';		}	}	else	{		include_once($phpbb_root_path . 'includes/functions_display.' . $phpEx);		display_reasons($reason_id);		$show_notify = false;		foreach ($post_info as $post_data)		{			if ($post_data['poster_id'] == ANONYMOUS)			{				continue;			}			else			{				$show_notify = true;				break;			}		}		$template->assign_vars(array(			'S_NOTIFY_POSTER'	=> $show_notify,			'S_APPROVE'			=> false,			'REASON'			=> $reason,			'ADDITIONAL_MSG'	=> $additional_msg)		);		confirm_box(false, 'DISAPPROVE_POST' . ((sizeof($post_id_list) == 1) ? '' : 'S'), $s_hidden_fields, 'mcp_approve.html');	}	$redirect = request_var('redirect', "index.$phpEx");	$redirect = reapply_sid($redirect);	if (!$success_msg)	{		redirect($redirect);	}	else	{		meta_refresh(3, $redirect);		trigger_error($user->lang[$success_msg] . '<br /><br />' . sprintf($user->lang['RETURN_PAGE'], "<a href=\"$redirect\">", '</a>'));	}}?>
<?php/**** install [English]** @package language* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** DO NOT CHANGE*/if (!defined('IN_PHPBB')){	exit;}if (empty($lang) || !is_array($lang)){	$lang = array();}// DEVELOPERS PLEASE NOTE//// All language files should use UTF-8 as their encoding and the files must not contain a BOM.//// Placeholders can now contain order information, e.g. instead of// 'Page %s of %s' you can (and should) write 'Page %1$s of %2$s', this allows// translators to re-order the output of data while ensuring it remains correct//// You do not need this where single placeholders are used, e.g. 'Message %d' is fine// equally where a string contains only two placeholders which are used to wrap text// in a url you again do not need to specify an order e.g., 'Click %sHERE%s' is fine$lang = array_merge($lang, array(	'ADMIN_CONFIG'				=> 'Administrator configuration',	'ADMIN_PASSWORD'			=> 'Administrator password',	'ADMIN_PASSWORD_CONFIRM'	=> 'Confirm administrator password',	'ADMIN_PASSWORD_EXPLAIN'	=> 'Please enter a password between 6 and 30 characters in length.',	'ADMIN_TEST'				=> 'Check administrator settings',	'ADMIN_USERNAME'			=> 'Administrator username',	'ADMIN_USERNAME_EXPLAIN'	=> 'Please enter a username between 3 and 20 characters in length.',	'APP_MAGICK'				=> 'Imagemagick support [ Attachments ]',	'AUTHOR_NOTES'				=> 'Author notes<br /> %s',	'AVAILABLE'					=> 'Available',	'AVAILABLE_CONVERTORS'		=> 'Available convertors',	'BEGIN_CONVERT'					=> 'Begin conversion',	'BLANK_PREFIX_FOUND'			=> 'A scan of your tables has shown a valid installation using no table prefix.',	'BOARD_NOT_INSTALLED'			=> 'No installation found',	'BOARD_NOT_INSTALLED_EXPLAIN'	=> 'The phpBB Unified Convertor Framework requires a default installation of phpBB3 to function, please <a href="%s">proceed by first installing phpBB3</a>.',	'CATEGORY'					=> 'Category',	'CACHE_STORE'				=> 'Cache type',	'CACHE_STORE_EXPLAIN'		=> 'The physical location where data is cached, filesystem is preferred.',	'CAT_CONVERT'				=> 'Convert',	'CAT_INSTALL'				=> 'Install',	'CAT_OVERVIEW'				=> 'Overview',	'CAT_UPDATE'				=> 'Update',	'CHANGE'					=> 'Change',	'CHECK_TABLE_PREFIX'		=> 'Please check your table prefix and try again.',	'CLEAN_VERIFY'				=> 'Cleaning up and verifying the final structure',	'CLEANING_USERNAMES'		=> 'Cleaning usernames',	'COLLIDING_CLEAN_USERNAME'	=> '<strong>%s</strong> is the clean username for:',	'COLLIDING_USERNAMES_FOUND'	=> 'Colliding usernames were found on your old board. In order to complete the conversion please delete or rename these users so that there is only one user on your old board for each clean username.',	'COLLIDING_USER'			=> ' user id: <strong>%d</strong> username: <strong>%s</strong> (%d posts)',	'CONFIG_CONVERT'			=> 'Converting the configuration',	'CONFIG_FILE_UNABLE_WRITE'	=> 'It was not possible to write the configuration file. Alternative methods for this file to be created are presented below.',	'CONFIG_FILE_WRITTEN'		=> 'The configuration file has been written. You may now proceed to the next step of the installation.',	'CONFIG_PHPBB_EMPTY'		=> 'The phpBB3 config variable for %s is empty.',	'CONFIG_RETRY'				=> 'Retry',	'CONTACT_EMAIL_CONFIRM'		=> 'Confirm contact e-mail',	'CONTINUE_CONVERT'			=> 'Continue conversion',	'CONTINUE_CONVERT_BODY'		=> 'A previous conversion attempt has been determined. You are now able to choose between starting a new conversion or continuing the conversion.',	'CONTINUE_LAST'				=> 'Continue last statements',	'CONTINUE_OLD_CONVERSION'	=> 'Continue previously started conversion',	'CONVERT'					=> 'Convert',	'CONVERT_COMPLETE'			=> 'Conversion completed',	'CONVERT_COMPLETE_EXPLAIN'	=> 'You have now successfully converted your board to phpBB 3.0. You can now login and <a href="../">access your board</a>. Please ensure that the settings were transferred correctly before enabling your board by deleting the install directory. Remember that help on using phpBB is available online via the <a href="http://www.phpbb.com/support/documentation/3.0/">Documentation</a> and the <a href="http://www.phpbb.com/community/viewforum.php?f=46">support forums</a>.',	'CONVERT_INTRO'				=> 'Welcome to the phpBB Unified Convertor Framework',	'CONVERT_INTRO_BODY'		=> 'From here, you are able to import data from other (installed) board systems. The list below shows all the conversion modules currently available. If there is no convertor shown in this list for the board software you wish to convert from, please check our website where further conversion modules may be available for download.',	'CONVERT_NEW_CONVERSION'	=> 'New conversion',	'CONVERT_NOT_EXIST'			=> 'The specified convertor does not exist.',	'CONVERT_OPTIONS'			=> 'Options',	'CONVERT_SETTINGS_VERIFIED'	=> 'The information you entered has been verified. To start the conversion process, please push the button below.',	'CONV_ERR_FATAL'			=> 'Fatal conversion error',	'CONV_ERROR_ATTACH_FTP_DIR'			=> 'FTP upload for attachments is enabled at the old board. Please disable the FTP upload option and make sure a valid upload directory is specified, then copy all attachment files to this new web accessible directory. Once you have done this, restart the convertor.',	'CONV_ERROR_CONFIG_EMPTY'			=> 'There is no configuration information available for the conversion.',	'CONV_ERROR_FORUM_ACCESS'			=> 'Unable to get forum access information.',	'CONV_ERROR_GET_CATEGORIES'			=> 'Unable to get categories.',	'CONV_ERROR_GET_CONFIG'				=> 'Could not retrieve your board configuration.',	'CONV_ERROR_COULD_NOT_READ'			=> 'Unable to access/read %s.',	'CONV_ERROR_GROUP_ACCESS'			=> 'Unable to get group authentication information.',	'CONV_ERROR_INCONSISTENT_GROUPS'	=> 'Inconsistency in groups table detected in add_bots() - you need to add all special groups if you do it manually.',	'CONV_ERROR_INSERT_BOT'				=> 'Unable to insert bot into users table.',	'CONV_ERROR_INSERT_BOTGROUP'		=> 'Unable to insert bot into bots table.',	'CONV_ERROR_INSERT_USER_GROUP'		=> 'Unable to insert user into user_group table.',	'CONV_ERROR_MESSAGE_PARSER'			=> 'Message parser error',	'CONV_ERROR_NO_AVATAR_PATH'			=> 'Note to developer: you must specify $convertor[\'avatar_path\'] to use %s.',	'CONV_ERROR_NO_FORUM_PATH'			=> 'The relative path to the source board has not been specified.',	'CONV_ERROR_NO_GALLERY_PATH'		=> 'Note to developer: you must specify $convertor[\'avatar_gallery_path\'] to use %s.',	'CONV_ERROR_NO_GROUP'				=> 'Group %1$s could not be found in %2$s.',	'CONV_ERROR_NO_RANKS_PATH'			=> 'Note to developer: you must specify $convertor[\'ranks_path\'] to use %s.',	'CONV_ERROR_NO_SMILIES_PATH'		=> 'Note to developer: you must specify $convertor[\'smilies_path\'] to use %s.',	'CONV_ERROR_NO_UPLOAD_DIR'			=> 'Note to developer: you must specify $convertor[\'upload_path\'] to use %s.',	'CONV_ERROR_PERM_SETTING'			=> 'Unable to insert/update permission setting.',	'CONV_ERROR_PM_COUNT'				=> 'Unable to select folder pm count.',	'CONV_ERROR_REPLACE_CATEGORY'		=> 'Unable to insert new forum replacing old category.',	'CONV_ERROR_REPLACE_FORUM'			=> 'Unable to insert new forum replacing old forum.',	'CONV_ERROR_USER_ACCESS'			=> 'Unable to get user authentication information.',	'CONV_ERROR_WRONG_GROUP'			=> 'Wrong group %1$s defined in %2$s.',	'CONV_OPTIONS_BODY'					=> 'This page collects the data required to access the source board. Enter the database details of your former board; the converter will not change anything in the database given below. The source board should be disabled to allow a consistent conversion.',	'CONV_SAVED_MESSAGES'				=> 'Saved messages',	'COULD_NOT_COPY'			=> 'Could not copy file <strong>%1$s</strong> to <strong>%2$s</strong><br /><br />Please check that the target directory exists and is writable by the webserver.',	'COULD_NOT_FIND_PATH'		=> 'Could not find path to your former board. Please check your settings and try again.<br /> %s was specified as the source path.',	'DBMS'						=> 'Database type',	'DB_CONFIG'					=> 'Database configuration',	'DB_CONNECTION'				=> 'Database connection',	'DB_ERR_INSERT'				=> 'Error while processing <code>INSERT</code> query.',	'DB_ERR_LAST'				=> 'Error while processing <var>query_last</var>.',	'DB_ERR_QUERY_FIRST'		=> 'Error while executing <var>query_first</var>.',	'DB_ERR_QUERY_FIRST_TABLE'	=> 'Error while executing <var>query_first</var>, %s (%s).',	'DB_ERR_SELECT'				=> 'Error while running <code>SELECT</code> query.',	'DB_HOST'					=> 'Database server hostname or DSN',	'DB_HOST_EXPLAIN'			=> 'DSN stands for Data Source Name and is relevant only for ODBC installs. On PostgreSQL, use localhost to connect to the local server via UNIX domain socket and 127.0.0.1 to connect via TCP. For SQLite, enter the full path to your database file.',	'DB_NAME'					=> 'Database name',	'DB_PASSWORD'				=> 'Database password',	'DB_PORT'					=> 'Database server port',	'DB_PORT_EXPLAIN'			=> 'Leave this blank unless you know the server operates on a non-standard port.',	'DB_UPDATE_NOT_SUPPORTED'	=> 'We are sorry, but this script does not support updating from versions of phpBB prior to %1$s. The version you currently have installed is %2$s. Please update to a previous version before running this script. Assistance with this is available in the Support Forum on phpBB.com.',	'DB_USERNAME'				=> 'Database username',	'DB_TEST'					=> 'Test connection',	'DEFAULT_LANG'				=> 'Default board language',	'DEFAULT_PREFIX_IS'			=> 'The convertor was not able to find tables with the specified prefix. Please make sure you have entered the correct details for the board you are converting from. The default table prefix for %1$s is <strong>%2$s</strong>.',	'DEV_NO_TEST_FILE'			=> 'No value has been specified for the test_file variable in the convertor. If you are a user of this convertor, you should not be seeing this error, please report this message to the convertor author. If you are a convertor author, you must specify the name of a file which exists in the source board to allow the path to it to be verified.',	'DIRECTORIES_AND_FILES'		=> 'Directory and file setup',	'DISABLE_KEYS'				=> 'Disabling keys',	'DLL_FIREBIRD'				=> 'Firebird',	'DLL_FTP'					=> 'Remote FTP support [ Installation ]',	'DLL_GD'					=> 'GD graphics support [ Visual Confirmation ]',	'DLL_MBSTRING'				=> 'Multi-byte character support',	'DLL_MSSQL'					=> 'MSSQL Server 2000+',	'DLL_MSSQL_ODBC'			=> 'MSSQL Server 2000+ via ODBC',	'DLL_MSSQLNATIVE'			=> 'MSSQL Server 2005+ [ Native ]',	'DLL_MYSQL'					=> 'MySQL',	'DLL_MYSQLI'				=> 'MySQL with MySQLi Extension',	'DLL_ORACLE'				=> 'Oracle',	'DLL_POSTGRES'				=> 'PostgreSQL',	'DLL_SQLITE'				=> 'SQLite',	'DLL_XML'					=> 'XML support [ Jabber ]',	'DLL_ZLIB'					=> 'zlib compression support [ gz, .tar.gz, .zip ]',	'DL_CONFIG'					=> 'Download config',	'DL_CONFIG_EXPLAIN'			=> 'You may download the complete config.php to your own PC. You will then need to upload the file manually, replacing any existing config.php in your phpBB 3.0 root directory. Please remember to upload the file in ASCII format (see your FTP application documentation if you are unsure how to achieve this). When you have uploaded the config.php please click Done to move to the next stage.',	'DL_DOWNLOAD'				=> 'Download',	'DONE'						=> 'Done',	'ENABLE_KEYS'				=> 'Re-enabling keys. This can take a while.',	'FILES_OPTIONAL'			=> 'Optional files and directories',	'FILES_OPTIONAL_EXPLAIN'	=> '<strong>Optional</strong> - These files, directories or permission settings are not required. The installation system will attempt to use various techniques to create them if they do not exist or cannot be written to. However, the presence of these will speed installation.',	'FILES_REQUIRED'			=> 'Files and Directories',	'FILES_REQUIRED_EXPLAIN'	=> '<strong>Required</strong> - In order to function correctly phpBB needs to be able to access or write to certain files or directories. If you see Not Found you need to create the relevant file or directory. If you see Unwritable you need to change the permissions on the file or directory to allow phpBB to write to it.',	'FILLING_TABLE'				=> 'Filling table <strong>%s</strong>',	'FILLING_TABLES'			=> 'Filling tables',	'FIREBIRD_DBMS_UPDATE_REQUIRED'		=> 'phpBB no longer supports Firebird/Interbase prior to Version 2.1. Please update your Firebird installation to at least 2.1.0 before proceeding with the update.',	'FINAL_STEP'				=> 'Process final step',	'FORUM_ADDRESS'				=> 'Board address',	'FORUM_ADDRESS_EXPLAIN'		=> 'This is the URL of your former board, for example <samp>http://www.example.com/phpBB2/</samp>. If an address is entered here and not left empty every instance of this address will be replaced by your new board address within messages, private messages and signatures.',	'FORUM_PATH'				=> 'Board path',	'FORUM_PATH_EXPLAIN'		=> 'This is the <strong>relative</strong> path on disk to your former board from the <strong>root of this phpBB3 installation</strong>.',	'FOUND'						=> 'Found',	'FTP_CONFIG'				=> 'Transfer config by FTP',	'FTP_CONFIG_EXPLAIN'		=> 'phpBB has detected the presence of the FTP module on this server. You may attempt to install your config.php via this if you wish. You will need to supply the information listed below. Remember your username and password are those to your server! (ask your hosting provider for details if you are unsure what these are).',	'FTP_PATH'					=> 'FTP path',	'FTP_PATH_EXPLAIN'			=> 'This is the path from your root directory to that of phpBB, e.g. <samp>htdocs/phpBB3/</samp>.',	'FTP_UPLOAD'				=> 'Upload',	'GPL'						=> 'General Public License',	'INITIAL_CONFIG'			=> 'Basic configuration',	'INITIAL_CONFIG_EXPLAIN'	=> 'Now that install has determined your server can run phpBB you need to supply some specific information. If you do not know how to connect to your database please contact your hosting provider (in the first instance) or use the phpBB support forums. When entering data please ensure you check it thoroughly before continuing.',	'INSTALL_CONGRATS'			=> 'Congratulations!',	'INSTALL_CONGRATS_EXPLAIN'	=> '		You have successfully installed phpBB %1$s. Please proceed by choosing one of the following options:</p>		<h2>Convert an existing board to phpBB3</h2>		<p>The phpBB Unified Convertor Framework supports the conversion of phpBB 2.0.x and other board systems to phpBB3. If you have an existing board that you wish to convert, please <a href="%2$s">proceed to the convertor</a>.</p>		<h2>Go live with your phpBB3!</h2>		<p>Clicking the button below will take you to a form for submitting statistical data to phpBB in your Administration Control Panel (ACP). We would appreciate it if you could help us by sending that information. Afterwards you should take some time to examine the options available to you. Remember that help is available online via the <a href="http://www.phpbb.com/support/documentation/3.0/">Documentation</a>, <a href="%3$s">README</a> and the <a href="http://www.phpbb.com/community/viewforum.php?f=46">Support Forums</a>.</p><p><strong>Please delete, move or rename the install directory before using your board. While this directory exists, only the Administration Control Panel (ACP) will be accessible.</strong>',	'INSTALL_INTRO'				=> 'Welcome to Installation',	'INSTALL_INTRO_BODY'		=> 'With this option, it is possible to install phpBB3 onto your server.</p><p>In order to proceed, you will need your database settings. If you do not know your database settings, please contact your host and ask for them. You will not be able to continue without them. You need:</p>	<ul>		<li>The Database Type - the database you will be using.</li>		<li>The Database server hostname or DSN - the address of the database server.</li>		<li>The Database server port - the port of the database server (most of the time this is not needed).</li>		<li>The Database name - the name of the database on the server.</li>		<li>The Database username and Database password - the login data to access the database.</li>	</ul>	<p><strong>Note:</strong> if you are installing using SQLite, you should enter the full path to your database file in the DSN field and leave the username and password fields blank. For security reasons, you should make sure that the database file is not stored in a location accessible from the web.</p>	<p>phpBB3 supports the following databases:</p>	<ul>		<li>MySQL 3.23 or above (MySQLi supported)</li>		<li>PostgreSQL 7.3+</li>		<li>SQLite 2.8.2+</li>		<li>Firebird 2.1+</li>		<li>MS SQL Server 2000 or above (directly or via ODBC)</li>		<li>MS SQL Server 2005 or above (native)</li>		<li>Oracle</li>	</ul>	<p>Only those databases supported on your server will be displayed.',	'INSTALL_INTRO_NEXT'		=> 'To commence the installation, please press the button below.',	'INSTALL_LOGIN'				=> 'Login',	'INSTALL_NEXT'				=> 'Next stage',	'INSTALL_NEXT_FAIL'			=> 'Some tests failed and you should correct these problems before proceeding to the next stage. Failure to do so may result in an incomplete installation.',	'INSTALL_NEXT_PASS'			=> 'All the basic tests have been passed and you may proceed to the next stage of installation. If you have changed any permissions, modules, etc. and wish to re-test you can do so if you wish.',	'INSTALL_PANEL'				=> 'Installation Panel',	'INSTALL_SEND_CONFIG'		=> 'Unfortunately phpBB could not write the configuration information directly to your config.php. This may be because the file does not exist or is not writable. A number of options will be listed below enabling you to complete installation of config.php.',	'INSTALL_START'				=> 'Start install',	'INSTALL_TEST'				=> 'Test again',	'INST_ERR'					=> 'Installation error',	'INST_ERR_DB_CONNECT'		=> 'Could not connect to the database, see error message below.',	'INST_ERR_DB_FORUM_PATH'	=> 'The database file specified is within your board directory tree. You should put this file in a non web-accessible location.',	'INST_ERR_DB_INVALID_PREFIX'=> 'The prefix you entered is invalid. It must start with a letter and must only contain letters, numbers and underscores.',	'INST_ERR_DB_NO_ERROR'		=> 'No error message given.',	'INST_ERR_DB_NO_MYSQLI'		=> 'The version of MySQL installed on this machine is incompatible with the MySQL with MySQLi Extension option you have selected. Please try the MySQL option instead.',	'INST_ERR_DB_NO_SQLITE'		=> 'The version of the SQLite extension you have installed is too old, it must be upgraded to at least 2.8.2.',	'INST_ERR_DB_NO_ORACLE'		=> 'The version of Oracle installed on this machine requires you to set the <var>NLS_CHARACTERSET</var> parameter to <var>UTF8</var>. Either upgrade your installation to 9.2+ or change the parameter.',	'INST_ERR_DB_NO_FIREBIRD'	=> 'The version of Firebird installed on this machine is older than 2.1, please upgrade to a newer version.',	'INST_ERR_DB_NO_FIREBIRD_PS'=> 'The database you selected for Firebird has a page size less than 8192, it must be at least 8192.',	'INST_ERR_DB_NO_POSTGRES'	=> 'The database you have selected was not created in <var>UNICODE</var> or <var>UTF8</var> encoding. Try installing with a database in <var>UNICODE</var> or <var>UTF8</var> encoding.',	'INST_ERR_DB_NO_NAME'		=> 'No database name specified.',	'INST_ERR_EMAIL_INVALID'	=> 'The e-mail address you entered is invalid.',	'INST_ERR_EMAIL_MISMATCH'	=> 'The e-mails you entered did not match.',	'INST_ERR_FATAL'			=> 'Fatal installation error',	'INST_ERR_FATAL_DB'			=> 'A fatal and unrecoverable database error has occurred. This may be because the specified user does not have appropriate permissions to <code>CREATE TABLES</code> or <code>INSERT</code> data, etc. Further information may be given below. Please contact your hosting provider in the first instance or the support forums of phpBB for further assistance.',	'INST_ERR_FTP_PATH'			=> 'Could not change to the given directory, please check the path.',	'INST_ERR_FTP_LOGIN'		=> 'Could not login to FTP server, check your username and password.',	'INST_ERR_MISSING_DATA'		=> 'You must fill out all fields in this block.',	'INST_ERR_NO_DB'			=> 'Cannot load the PHP module for the selected database type.',	'INST_ERR_PASSWORD_MISMATCH'	=> 'The passwords you entered did not match.',	'INST_ERR_PASSWORD_TOO_LONG'	=> 'The password you entered is too long. The maximum length is 30 characters.',	'INST_ERR_PASSWORD_TOO_SHORT'	=> 'The password you entered is too short. The minimum length is 6 characters.',	'INST_ERR_PREFIX'			=> 'Tables with the specified prefix already exist, please choose an alternative.',	'INST_ERR_PREFIX_INVALID'	=> 'The table prefix you have specified is invalid for your database. Please try another, removing characters such as the hyphen.',	'INST_ERR_PREFIX_TOO_LONG'	=> 'The table prefix you have specified is too long. The maximum length is %d characters.',	'INST_ERR_USER_TOO_LONG'	=> 'The username you entered is too long. The maximum length is 20 characters.',	'INST_ERR_USER_TOO_SHORT'	=> 'The username you entered is too short. The minimum length is 3 characters.',	'INVALID_PRIMARY_KEY'		=> 'Invalid primary key : %s',	'LONG_SCRIPT_EXECUTION'		=> 'Please note that this can take a while... Please do not stop the script.',	// mbstring	'MBSTRING_CHECK'						=> '<samp>mbstring</samp> extension check',	'MBSTRING_CHECK_EXPLAIN'				=> '<strong>Required</strong> - <samp>mbstring</samp> is a PHP extension that provides multibyte string functions. Certain features of mbstring are not compatible with phpBB and must be disabled.',	'MBSTRING_FUNC_OVERLOAD'				=> 'Function overloading',	'MBSTRING_FUNC_OVERLOAD_EXPLAIN'		=> '<var>mbstring.func_overload</var> must be set to either 0 or 4.',	'MBSTRING_ENCODING_TRANSLATION'			=> 'Transparent character encoding',	'MBSTRING_ENCODING_TRANSLATION_EXPLAIN'	=> '<var>mbstring.encoding_translation</var> must be set to 0.',	'MBSTRING_HTTP_INPUT'					=> 'HTTP input character conversion',	'MBSTRING_HTTP_INPUT_EXPLAIN'			=> '<var>mbstring.http_input</var> must be set to <samp>pass</samp>.',	'MBSTRING_HTTP_OUTPUT'					=> 'HTTP output character conversion',	'MBSTRING_HTTP_OUTPUT_EXPLAIN'			=> '<var>mbstring.http_output</var> must be set to <samp>pass</samp>.',	'MAKE_FOLDER_WRITABLE'		=> 'Please make sure that this folder exists and is writable by the webserver then try again:<br /><strong>%s</strong>.',	'MAKE_FOLDERS_WRITABLE'		=> 'Please make sure that these folders exist and are writable by the webserver then try again:<br /><strong>%s</strong>.',	'MYSQL_SCHEMA_UPDATE_REQUIRED'	=> 'Your MySQL database schema for phpBB is outdated. phpBB detected a schema for MySQL 3.x/4.x, but the server runs on MySQL %2$s.<br /><strong>Before you proceed the update, you need to upgrade the schema.</strong><br /><br />Please refer to the <a href="http://www.phpbb.com/kb/article/doesnt-have-a-default-value-errors/">Knowledge Base article about upgrading the MySQL schema</a>. If you encounter problems, please use <a href="http://www.phpbb.com/community/viewforum.php?f=46">our support forums</a>.',	'NAMING_CONFLICT'			=> 'Naming conflict: %s and %s are both aliases<br /><br />%s',	'NEXT_STEP'					=> 'Proceed to next step',	'NOT_FOUND'					=> 'Cannot find',	'NOT_UNDERSTAND'			=> 'Could not understand %s #%d, table %s (%s)',	'NO_CONVERTORS'				=> 'No convertors are available for use.',	'NO_CONVERT_SPECIFIED'		=> 'No convertor specified.',	'NO_LOCATION'				=> 'Cannot determine location. If you know Imagemagick is installed, you may specify the location later within your administration control panel',	'NO_TABLES_FOUND'			=> 'No tables found.',	'OVERVIEW_BODY'				=> 'Welcome to phpBB3!<br /><br />phpBB is the most widely used open source bulletin board solution in the world. phpBB3 is the latest installment in a package line started in 2000. Like its predecessors, phpBB3 is feature-rich, user-friendly, and fully supported by the phpBB Team. phpBB3 greatly improves on what made phpBB2 popular, and adds commonly requested features that were not present in previous versions. We hope it exceeds your expectations.<br /><br />This installation system will guide you through installing phpBB3, updating to the latest version of phpBB3 from past releases, as well as converting to phpBB3 from a different discussion board system (including phpBB2). For more information, we encourage you to read <a href="../docs/INSTALL.html">the installation guide</a>.<br /><br />To read the phpBB3 license or learn about obtaining support and our stance on it, please select the respective options from the side menu. To continue, please select the appropriate tab above.',	'PCRE_UTF_SUPPORT'				=> 'PCRE UTF-8 support',	'PCRE_UTF_SUPPORT_EXPLAIN'		=> 'phpBB will <strong>not</strong> run if your PHP installation is not compiled with UTF-8 support in the PCRE extension.',	'PHP_GETIMAGESIZE_SUPPORT'			=> 'PHP function getimagesize() is available',	'PHP_GETIMAGESIZE_SUPPORT_EXPLAIN'	=> '<strong>Required</strong> - In order for phpBB to function correctly, the getimagesize function needs to be available.',	'PHP_OPTIONAL_MODULE'			=> 'Optional modules',	'PHP_OPTIONAL_MODULE_EXPLAIN'	=> '<strong>Optional</strong> - These modules or applications are optional. However, if they are available they will enable extra features.',	'PHP_SUPPORTED_DB'				=> 'Supported databases',	'PHP_SUPPORTED_DB_EXPLAIN'		=> '<strong>Required</strong> - You must have support for at least one compatible database within PHP. If no database modules are shown as available you should contact your hosting provider or review the relevant PHP installation documentation for advice.',	'PHP_REGISTER_GLOBALS'			=> 'PHP setting <var>register_globals</var> is disabled',	'PHP_REGISTER_GLOBALS_EXPLAIN'	=> 'phpBB will still run if this setting is enabled, but if possible, it is recommended that register_globals is disabled on your PHP install for security reasons.',	'PHP_SAFE_MODE'					=> 'Safe mode',	'PHP_SETTINGS'					=> 'PHP version and settings',	'PHP_SETTINGS_EXPLAIN'			=> '<strong>Required</strong> - You must be running at least version 4.3.3 of PHP in order to install phpBB. If <var>safe mode</var> is displayed below your PHP installation is running in that mode. This will impose limitations on remote administration and similar features.',	'PHP_URL_FOPEN_SUPPORT'			=> 'PHP setting <var>allow_url_fopen</var> is enabled',	'PHP_URL_FOPEN_SUPPORT_EXPLAIN'	=> '<strong>Optional</strong> - This setting is optional, however certain phpBB functions like off-site avatars will not work properly without it.',	'PHP_VERSION_REQD'				=> 'PHP version >= 4.3.3',	'POST_ID'						=> 'Post ID',	'PREFIX_FOUND'					=> 'A scan of your tables has shown a valid installation using <strong>%s</strong> as table prefix.',	'PREPROCESS_STEP'				=> 'Executing pre-processing functions/queries',	'PRE_CONVERT_COMPLETE'			=> 'All pre-conversion steps have successfully been completed. You may now begin the actual conversion process. Please note that you may have to manually do and adjust several things. After conversion, especially check the permissions assigned, rebuild your search index which is not converted and also make sure files got copied correctly, for example avatars and smilies.',	'PROCESS_LAST'					=> 'Processing last statements',	'REFRESH_PAGE'				=> 'Refresh page to continue conversion',	'REFRESH_PAGE_EXPLAIN'		=> 'If set to yes, the convertor will refresh the page to continue the conversion after having finished a step. If this is your first conversion for testing purposes and to determine any errors in advance, we suggest to set this to No.',	'REQUIREMENTS_TITLE'		=> 'Installation compatibility',	'REQUIREMENTS_EXPLAIN'		=> 'Before proceeding with the full installation phpBB will carry out some tests on your server configuration and files to ensure that you are able to install and run phpBB. Please ensure you read through the results thoroughly and do not proceed until all the required tests are passed. If you wish to use any of the features depending on the optional tests, you should ensure that these tests are passed also.',	'RETRY_WRITE'				=> 'Retry writing config',	'RETRY_WRITE_EXPLAIN'		=> 'If you wish you can change the permissions on config.php to allow phpBB to write to it. Should you wish to do that you can click Retry below to try again. Remember to return the permissions on config.php after phpBB has finished installation.',	'SCRIPT_PATH'				=> 'Script path',	'SCRIPT_PATH_EXPLAIN'		=> 'The path where phpBB is located relative to the domain name, e.g. <samp>/phpBB3</samp>.',	'SELECT_LANG'				=> 'Select language',	'SERVER_CONFIG'				=> 'Server configuration',	'SEARCH_INDEX_UNCONVERTED'	=> 'Search index was not converted',	'SEARCH_INDEX_UNCONVERTED_EXPLAIN'	=> 'Your old search index was not converted. Searching will always yield an empty result. To create a new search index go to the Administration Control Panel, select Maintenance and then choose Search index from the submenu.',	'SOFTWARE'					=> 'Board software',	'SPECIFY_OPTIONS'			=> 'Specify conversion options',	'STAGE_ADMINISTRATOR'		=> 'Administrator details',	'STAGE_ADVANCED'			=> 'Advanced settings',	'STAGE_ADVANCED_EXPLAIN'	=> 'The settings on this page are only necessary to set if you know that you require something different from the default. If you are unsure, just proceed to the next page, as these settings can be altered from the Administration Control Panel later.',	'STAGE_CONFIG_FILE'			=> 'Configuration file',	'STAGE_CREATE_TABLE'		=> 'Create database tables',	'STAGE_CREATE_TABLE_EXPLAIN'	=> 'The database tables used by phpBB 3.0 have been created and populated with some initial data. Proceed to the next screen to finish installing phpBB.',	'STAGE_DATABASE'			=> 'Database settings',	'STAGE_FINAL'				=> 'Final stage',	'STAGE_INTRO'				=> 'Introduction',	'STAGE_IN_PROGRESS'			=> 'Conversion in progress',	'STAGE_REQUIREMENTS'		=> 'Requirements',	'STAGE_SETTINGS'			=> 'Settings',	'STARTING_CONVERT'			=> 'Starting conversion process',	'STEP_PERCENT_COMPLETED'	=> 'Step <strong>%d</strong> of <strong>%d</strong>',	'SUB_INTRO'					=> 'Introduction',	'SUB_LICENSE'				=> 'License',	'SUB_SUPPORT'				=> 'Support',	'SUCCESSFUL_CONNECT'		=> 'Successful connection',	'SUPPORT_BODY'				=> 'Full support will be provided for the current stable release of phpBB3, free of charge. This includes:</p><ul><li>installation</li><li>configuration</li><li>technical questions</li><li>problems relating to potential bugs in the software</li><li>updating from Release Candidate (RC) versions to the latest stable version</li><li>converting from phpBB 2.0.x to phpBB3</li><li>converting from other discussion board software to phpBB3 (please see the <a href="http://www.phpbb.com/community/viewforum.php?f=65">Convertors Forum</a>)</li></ul><p>We encourage users still running beta versions of phpBB3 to replace their installation with a fresh copy of the latest version.</p><h2>MODs / Styles</h2><p>For issues relating to MODs, please post in the appropriate <a href="http://www.phpbb.com/community/viewforum.php?f=81">Modifications Forum</a>.<br />For issues relating to styles, templates and imagesets, please post in the appropriate <a href="http://www.phpbb.com/community/viewforum.php?f=80">Styles Forum</a>.<br /><br />If your question relates to a specific package, please post directly in the topic dedicated to the package.</p><h2>Obtaining Support</h2><p><a href="http://www.phpbb.com/community/viewtopic.php?f=14&amp;t=571070">The phpBB Welcome Package</a><br /><a href="http://www.phpbb.com/support/">Support Section</a><br /><a href="http://www.phpbb.com/support/documentation/3.0/quickstart/">Quick Start Guide</a><br /><br />To ensure you stay up to date with the latest news and releases, why not <a href="http://www.phpbb.com/support/">subscribe to our mailing list</a>?<br /><br />',	'SYNC_FORUMS'				=> 'Starting to synchronise forums',	'SYNC_POST_COUNT'			=> 'Synchronising post_counts',	'SYNC_POST_COUNT_ID'		=> 'Synchronising post_counts from <var>entry</var> %1$s to %2$s.',	'SYNC_TOPICS'				=> 'Starting to synchronise topics',	'SYNC_TOPIC_ID'				=> 'Synchronising topics from <var>topic_id</var> %1$s to %2$s.',	'TABLES_MISSING'			=> 'Could not find these tables<br /> <strong>%s</strong>.',	'TABLE_PREFIX'				=> 'Prefix for tables in database',	'TABLE_PREFIX_EXPLAIN'		=> 'The prefix must start with a letter and must only contain letters, numbers and underscores.',	'TABLE_PREFIX_SAME'			=> 'The table prefix needs to be the one used by the software you are converting from.<br /> Specified table prefix was %s.',	'TESTS_PASSED'				=> 'Tests passed',	'TESTS_FAILED'				=> 'Tests failed',	'UNABLE_WRITE_LOCK'			=> 'Unable to write lock file.',	'UNAVAILABLE'				=> 'Unavailable',	'UNWRITABLE'				=> 'Unwritable',	'UPDATE_TOPICS_POSTED'		=> 'Generating topics posted information',	'UPDATE_TOPICS_POSTED_ERR'	=> 'An error occured while generating topics posted information. You can retry this step in the ACP after the conversion process is completed.',	'VERIFY_OPTIONS'			=> 'Verifying conversion options',	'VERSION'					=> 'Version',	'WELCOME_INSTALL'			=> 'Welcome to phpBB3 Installation',	'WRITABLE'					=> 'Writable',));// Updater$lang = array_merge($lang, array(	'ALL_FILES_UP_TO_DATE'		=> 'All files are up to date with the latest phpBB version. You should now <a href="../ucp.php?mode=login">login to your board</a> and check if everything is working fine. Do not forget to delete, rename or move your install directory! Please send us updated information about your server and board configurations from the <a href="../ucp.php?mode=login&amp;redirect=adm/index.php%3Fi=send_statistics%26mode=send_statistics">Send statistics</a> module in your ACP.',	'ARCHIVE_FILE'				=> 'Source file within archive',	'BACK'				=> 'Back',	'BINARY_FILE'		=> 'Binary file',	'BOT'				=> 'Spider/Robot',	'CHANGE_CLEAN_NAMES'			=> 'The method used to make sure a username is not used by multiple users has been changed. There are some users which have the same name when compared with the new method. You have to delete or rename these users to make sure that each name is only used by one user before you can proceed.',	'CHECK_FILES'					=> 'Check files',	'CHECK_FILES_AGAIN'				=> 'Check files again',	'CHECK_FILES_EXPLAIN'			=> 'Within the next step all files will be checked against the update files - this can take a while if this is the first file check.',	'CHECK_FILES_UP_TO_DATE'		=> 'According to your database your version is up to date. You may want to proceed with the file check to make sure all files are really up to date with the latest phpBB version.',	'CHECK_UPDATE_DATABASE'			=> 'Continue update process',	'COLLECTED_INFORMATION'			=> 'File information',	'COLLECTED_INFORMATION_EXPLAIN'	=> 'The list below shows information about the files needing an update. Please read the information in front of every status block to see what they mean and what you may need to do to perform a successful update.',	'COLLECTING_FILE_DIFFS'			=> 'Collecting file differences',	'COMPLETE_LOGIN_TO_BOARD'		=> 'You should now <a href="../ucp.php?mode=login">login to your board</a> and check if everything is working fine. Do not forget to delete, rename or move your install directory!',	'CONTINUE_UPDATE_NOW'			=> 'Continue the update process now',		// Shown within the database update script at the end if called from the updater	'CONTINUE_UPDATE'				=> 'Continue update now',					// Shown after file upload to indicate the update process is not yet finished	'CURRENT_FILE'					=> 'Begin of Conflict - Original File code before update',	'CURRENT_VERSION'				=> 'Current version',	'DATABASE_TYPE'						=> 'Database type',	'DATABASE_UPDATE_INFO_OLD'			=> 'The database update file within the install directory is outdated. Please make sure you uploaded the correct version of the file.',	'DELETE_USER_REMOVE'				=> 'Delete user and remove posts',	'DELETE_USER_RETAIN'				=> 'Delete user but keep posts',	'DESTINATION'						=> 'Destination file',	'DIFF_INLINE'						=> 'Inline',	'DIFF_RAW'							=> 'Raw unified diff',	'DIFF_SEP_EXPLAIN'					=> 'Code block used within the updated/new file',	'DIFF_SIDE_BY_SIDE'					=> 'Side by Side',	'DIFF_UNIFIED'						=> 'Unified diff',	'DO_NOT_UPDATE'						=> 'Do not update this file',	'DONE'								=> 'Done',	'DOWNLOAD'							=> 'Download',	'DOWNLOAD_AS'						=> 'Download as',	'DOWNLOAD_UPDATE_METHOD_BUTTON'		=> 'Download modified files archive (recommended)',	'DOWNLOAD_CONFLICTS'				=> 'Download conflicts for this file',	'DOWNLOAD_CONFLICTS_EXPLAIN'		=> 'Search for &lt;&lt;&lt; to spot conflicts',	'DOWNLOAD_UPDATE_METHOD'			=> 'Download modified files archive',	'DOWNLOAD_UPDATE_METHOD_EXPLAIN'	=> 'Once downloaded you should unpack the archive. You will find the modified files you need to upload to your phpBB root directory within it. Please upload the files to their respective locations then. After you have uploaded all files, please check the files again with the other button below.',	'ERROR'			=> 'Error',	'EDIT_USERNAME'	=> 'Edit username',	'FILE_ALREADY_UP_TO_DATE'		=> 'File is already up to date.',	'FILE_DIFF_NOT_ALLOWED'			=> 'File not allowed to be diffed.',	'FILE_USED'						=> 'Information used from',			// Single file	'FILES_CONFLICT'				=> 'Conflict files',	'FILES_CONFLICT_EXPLAIN'		=> 'The following files are modified and do not represent the original files from the old version. phpBB determined that these files create conflicts if they are tried to be merged. Please investigate the conflicts and try to manually resolve them or continue the update choosing the preferred merging method. If you resolve the conflicts manually check the files again after you modified them. You are also able to choose between the preferred merge method for every file. The first one will result in a file where the conflicting lines from your old file will be lost, the other one will result in losing the changes from the newer file.',	'FILES_MODIFIED'				=> 'Modified files',	'FILES_MODIFIED_EXPLAIN'		=> 'The following files are modified and do not represent the original files from the old version. The updated file will be a merge between your modifications and the new file.',	'FILES_NEW'						=> 'New files',	'FILES_NEW_EXPLAIN'				=> 'The following files currently do not exist within your installation. These files will be added to your installation.',	'FILES_NEW_CONFLICT'			=> 'New conflicting files',	'FILES_NEW_CONFLICT_EXPLAIN'	=> 'The following files are new within the latest version but it has been determined that there is already a file with the same name within the same position. This file will be overwritten by the new file.',	'FILES_NOT_MODIFIED'			=> 'Not modified files',	'FILES_NOT_MODIFIED_EXPLAIN'	=> 'The following files are not modified and represent the original phpBB files from the version you want to update from.',	'FILES_UP_TO_DATE'				=> 'Already updated files',	'FILES_UP_TO_DATE_EXPLAIN'		=> 'The following files are already up to date and do not need to be updated.',	'FTP_SETTINGS'					=> 'FTP settings',	'FTP_UPDATE_METHOD'				=> 'FTP upload',	'INCOMPATIBLE_UPDATE_FILES'		=> 'The update files found are incompatible with your installed version. Your installed version is %1$s and the update file is for updating phpBB %2$s to %3$s.',	'INCOMPLETE_UPDATE_FILES'		=> 'The update files are incomplete.',	'INLINE_UPDATE_SUCCESSFUL'		=> 'The database update was successful. Now you need to continue the update process.',	'KEEP_OLD_NAME'		=> 'Keep username',	'LATEST_VERSION'		=> 'Latest version',	'LINE'					=> 'Line',	'LINE_ADDED'			=> 'Added',	'LINE_MODIFIED'			=> 'Modified',	'LINE_REMOVED'			=> 'Removed',	'LINE_UNMODIFIED'		=> 'Unmodified',	'LOGIN_UPDATE_EXPLAIN'	=> 'In order to update your installation you need to login first.',	'MAPPING_FILE_STRUCTURE'	=> 'To ease the upload here are the file locations which map your phpBB installation.',	'MERGE_MODIFICATIONS_OPTION'	=> 'Merge modifications',	'MERGE_NO_MERGE_NEW_OPTION'	=> 'Do not merge - use new file',	'MERGE_NO_MERGE_MOD_OPTION'	=> 'Do not merge - use currently installed file',	'MERGE_MOD_FILE_OPTION'		=> 'Merge modifications (removes new phpBB code within conflicting block)',	'MERGE_NEW_FILE_OPTION'		=> 'Merge modifications (removes modified code within conflicting block)',	'MERGE_SELECT_ERROR'		=> 'Conflicting file merge modes are not correctly selected.',	'MERGING_FILES'				=> 'Merging differences',	'MERGING_FILES_EXPLAIN'		=> 'Currently collecting final file changes.<br /><br />Please wait until phpBB has completed all operations on changed files.',	'NEW_FILE'						=> 'End of Conflict',	'NEW_USERNAME'					=> 'New username',	'NO_AUTH_UPDATE'				=> 'Not authorised to update',	'NO_ERRORS'						=> 'No errors',	'NO_UPDATE_FILES'				=> 'Not updating the following files',	'NO_UPDATE_FILES_EXPLAIN'		=> 'The following files are new or modified but the directory they normally reside in could not be found on your installation. If this list contains files to other directories than language/ or styles/ than you may have modified your directory structure and the update may be incomplete.',	'NO_UPDATE_FILES_OUTDATED'		=> 'No valid update directory was found, please make sure you uploaded the relevant files.<br /><br />Your installation does <strong>not</strong> seem to be up to date. Updates are available for your version of phpBB %1$s, please visit <a href="http://www.phpbb.com/downloads/" rel="external">http://www.phpbb.com/downloads/</a> to obtain the correct package to update from Version %2$s to Version %3$s.',	'NO_UPDATE_FILES_UP_TO_DATE'	=> 'Your version is up to date. There is no need to run the update tool. If you want to make an integrity check on your files make sure you uploaded the correct update files.',	'NO_UPDATE_INFO'				=> 'Update file information could not be found.',	'NO_UPDATES_REQUIRED'			=> 'No updates required',	'NO_VISIBLE_CHANGES'			=> 'No visible changes',	'NOTICE'						=> 'Notice',	'NUM_CONFLICTS'					=> 'Number of conflicts',	'NUMBER_OF_FILES_COLLECTED'		=> 'Currently differences from %1$d of %2$d files have been checked.<br />Please wait until all files are checked.',	'OLD_UPDATE_FILES'		=> 'Update files are out of date. The update files found are for updating from phpBB %1$s to phpBB %2$s but the latest version of phpBB is %3$s.',	'PACKAGE_UPDATES_TO'				=> 'Current package updates to version',	'PERFORM_DATABASE_UPDATE'			=> 'Perform database update',	'PERFORM_DATABASE_UPDATE_EXPLAIN'	=> 'Below you will find a button to the database update script. The database update can take a while, so please do not stop the execution if it seems to hang. After the database update has been performed just follow the instructions to continue the update process.',	'PREVIOUS_VERSION'					=> 'Previous version',	'PROGRESS'							=> 'Progress',	'RESULT'					=> 'Result',	'RUN_DATABASE_SCRIPT'		=> 'Update my database now',	'SELECT_DIFF_MODE'			=> 'Select diff mode',	'SELECT_DOWNLOAD_FORMAT'	=> 'Select download archive format',	'SELECT_FTP_SETTINGS'		=> 'Select FTP settings',	'SHOW_DIFF_CONFLICT'		=> 'Show differences/conflicts',	'SHOW_DIFF_FINAL'			=> 'Show resulting file',	'SHOW_DIFF_MODIFIED'		=> 'Show merged differences',	'SHOW_DIFF_NEW'				=> 'Show file contents',	'SHOW_DIFF_NEW_CONFLICT'	=> 'Show differences',	'SHOW_DIFF_NOT_MODIFIED'	=> 'Show differences',	'SOME_QUERIES_FAILED'		=> 'Some queries failed, the statements and errors are listed below.',	'SQL'						=> 'SQL',	'SQL_FAILURE_EXPLAIN'		=> 'This is probably nothing to worry about, update will continue. Should this fail to complete you may need to seek help at our support forums. See <a href="../docs/README.html">README</a> for details on how to obtain advice.',	'STAGE_FILE_CHECK'			=> 'Check files',	'STAGE_UPDATE_DB'			=> 'Update database',	'STAGE_UPDATE_FILES'		=> 'Update files',	'STAGE_VERSION_CHECK'		=> 'Version check',	'STATUS_CONFLICT'			=> 'Modified file producing conflicts',	'STATUS_MODIFIED'			=> 'Modified file',	'STATUS_NEW'				=> 'New file',	'STATUS_NEW_CONFLICT'		=> 'Conflicting new file',	'STATUS_NOT_MODIFIED'		=> 'Not modified file',	'STATUS_UP_TO_DATE'			=> 'Already updated file',	'TOGGLE_DISPLAY'			=> 'View/Hide file list',	'TRY_DOWNLOAD_METHOD'		=> 'You may want to try the download modified files method.<br />This method always works and is also the recommended update path.',	'TRY_DOWNLOAD_METHOD_BUTTON'=> 'Try this method now',	'UPDATE_COMPLETED'				=> 'Update completed',	'UPDATE_DATABASE'				=> 'Update database',	'UPDATE_DATABASE_EXPLAIN'		=> 'Within the next step the database will be updated.',	'UPDATE_DATABASE_SCHEMA'		=> 'Updating database schema',	'UPDATE_FILES'					=> 'Update files',	'UPDATE_FILES_NOTICE'			=> 'Please make sure you have updated your board files too, this file is only updating your database.',	'UPDATE_INSTALLATION'			=> 'Update phpBB installation',	'UPDATE_INSTALLATION_EXPLAIN'	=> 'With this option, it is possible to update your phpBB installation to the latest version.<br />During the process all of your files will be checked for their integrity. You are able to review all differences and files before the update.<br /><br />The file update itself can be done in two different ways.</p><h2>Manual Update</h2><p>With this update you only download your personal set of changed files to make sure you do not lose your file modifications you may have done. After you downloaded this package you need to manually upload the files to their correct position under your phpBB root directory. Once done, you are able to do the file check stage again to see if you moved the files to their correct location.</p><h2>Automatic Update with FTP</h2><p>This method is similar to the first one but without the need to download the changed files and uploading them on your own. This will be done for you. In order to use this method you need to know your FTP login details since you will be asked for them. Once finished you will be redirected to the file check again to make sure everything got updated correctly.<br /><br />',	'UPDATE_INSTRUCTIONS'			=> '		<h1>Release announcement</h1>		<p>Please read <a href="%1$s" title="%1$s"><strong>the release announcement for the latest version</strong></a> before you continue your update process, it may contain useful information. It also contains full download links as well as the change log.</p>		<br />		<h1>How to update your installation with the Automatic Update Package</h1>		<p>The recommended way of updating your installation listed here is only valid for the automatic update package. You are also able to update your installation using the methods listed within the INSTALL.html document. The steps for updating phpBB3 automatically are:</p>		<ul style="margin-left: 20px; font-size: 1.1em;">			<li>Go to the <a href="http://www.phpbb.com/downloads/" title="http://www.phpbb.com/downloads/">phpBB.com downloads page</a> and download the "Automatic Update Package" archive.<br /><br /></li>			<li>Unpack the archive.<br /><br /></li>			<li>Upload the complete uncompressed install folder to your phpBB root directory (where your config.php file is).<br /><br /></li>		</ul>		<p>Once uploaded your board will be offline for normal users due to the install directory you uploaded now present.<br /><br />		<strong><a href="%2$s" title="%2$s">Now start the update process by pointing your browser to the install folder</a>.</strong><br />		<br />		You will then be guided through the update process. You will be notified once the update is complete.		</p>	',	'UPDATE_INSTRUCTIONS_INCOMPLETE'	=> '		<h1>Incomplete update detected</h1>		<p>phpBB detected an incomplete automatic update. Please make sure you followed every step within the automatic update tool. Below you will find the link again, or go directly to your install directory.</p>	',	'UPDATE_METHOD'					=> 'Update method',	'UPDATE_METHOD_EXPLAIN'			=> 'You are now able to choose your preferred update method. Using the FTP upload will present you with a form you need to enter your FTP account details into. With this method the files will be automatically moved to the new location and backups of the old files being created by appending .bak to the filename. If you choose to download the modified files you are able to unpack and upload them to their correct location manually later.',	'UPDATE_REQUIRES_FILE'			=> 'The updater requires that the following file is present: %s',	'UPDATE_SUCCESS'				=> 'Update was successful',	'UPDATE_SUCCESS_EXPLAIN'		=> 'Successfully updated all files. The next step involves checking all files again to make sure the files got updated correctly.',	'UPDATE_VERSION_OPTIMIZE'		=> 'Updating version and optimising tables',	'UPDATING_DATA'					=> 'Updating data',	'UPDATING_TO_LATEST_STABLE'		=> 'Updating database to latest stable release',	'UPDATED_VERSION'				=> 'Updated version',	'UPGRADE_INSTRUCTIONS'			=> 'A new feature release <strong>%1$s</strong> is available. Please read <a href="%2$s" title="%2$s"><strong>the release announcement</strong></a> to learn about what it has to offer, and how to upgrade.',	'UPLOAD_METHOD'					=> 'Upload method',	'UPDATE_DB_SUCCESS'				=> 'Database update was successful.',	'USER_ACTIVE'					=> 'Active user',	'USER_INACTIVE'					=> 'Inactive user',	'VERSION_CHECK'					=> 'Version check',	'VERSION_CHECK_EXPLAIN'			=> 'Checks to see if your phpBB installation is up to date.',	'VERSION_NOT_UP_TO_DATE'		=> 'Your phpBB installation is not up to date. Please continue the update process.',	'VERSION_NOT_UP_TO_DATE_ACP'	=> 'Your phpBB installation is not up to date.<br />Below is a link to the release announcement, which contains more information as well as instructions on updating.',	'VERSION_NOT_UP_TO_DATE_TITLE'	=> 'Your phpBB installation is not up to date.',	'VERSION_UP_TO_DATE'			=> 'Your phpBB installation is up to date. Although there are no updates available at this time, you may continue in order to perform a file validity check.',	'VERSION_UP_TO_DATE_ACP'		=> 'Your phpBB installation is up to date. There are no updates available at this time.',	'VIEWING_FILE_CONTENTS'			=> 'Viewing file contents',	'VIEWING_FILE_DIFF'				=> 'Viewing file differences',	'WRONG_INFO_FILE_FORMAT'	=> 'Wrong info file format',));// Default database schema entries...$lang = array_merge($lang, array(	'CONFIG_BOARD_EMAIL_SIG'		=> 'Thanks, The Management',	'CONFIG_SITE_DESC'				=> 'A short text to describe your forum',	'CONFIG_SITENAME'				=> 'yourdomain.com',	'DEFAULT_INSTALL_POST'			=> 'This is an example post in your phpBB3 installation. Everything seems to be working. You may delete this post if you like and continue to set up your board. During the installation process your first category and your first forum are assigned an appropriate set of permissions for the predefined usergroups administrators, bots, global moderators, guests, registered users and registered COPPA users. If you also choose to delete your first category and your first forum, do not forget to assign permissions for all these usergroups for all new categories and forums you create. It is recommended to rename your first category and your first forum and copy permissions from these while creating new categories and forums. Have fun!',	'FORUMS_FIRST_CATEGORY'			=> 'Your first category',	'FORUMS_TEST_FORUM_DESC'		=> 'Description of your first forum.',	'FORUMS_TEST_FORUM_TITLE'		=> 'Your first forum',	'RANKS_SITE_ADMIN_TITLE'		=> 'Site Admin',	'REPORT_WAREZ'					=> 'The post contains links to illegal or pirated software.',	'REPORT_SPAM'					=> 'The reported post has the only purpose to advertise for a website or another product.',	'REPORT_OFF_TOPIC'				=> 'The reported post is off topic.',	'REPORT_OTHER'					=> 'The reported post does not fit into any other category, please use the further information field.',	'SMILIES_ARROW'					=> 'Arrow',	'SMILIES_CONFUSED'				=> 'Confused',	'SMILIES_COOL'					=> 'Cool',	'SMILIES_CRYING'				=> 'Crying or Very Sad',	'SMILIES_EMARRASSED'			=> 'Embarrassed',	'SMILIES_EVIL'					=> 'Evil or Very Mad',	'SMILIES_EXCLAMATION'			=> 'Exclamation',	'SMILIES_GEEK'					=> 'Geek',	'SMILIES_IDEA'					=> 'Idea',	'SMILIES_LAUGHING'				=> 'Laughing',	'SMILIES_MAD'					=> 'Mad',	'SMILIES_MR_GREEN'				=> 'Mr. Green',	'SMILIES_NEUTRAL'				=> 'Neutral',	'SMILIES_QUESTION'				=> 'Question',	'SMILIES_RAZZ'					=> 'Razz',	'SMILIES_ROLLING_EYES'			=> 'Rolling Eyes',	'SMILIES_SAD'					=> 'Sad',	'SMILIES_SHOCKED'				=> 'Shocked',	'SMILIES_SMILE'					=> 'Smile',	'SMILIES_SURPRISED'				=> 'Surprised',	'SMILIES_TWISTED_EVIL'			=> 'Twisted Evil',	'SMILIES_UBER_GEEK'				=> 'Uber Geek',	'SMILIES_VERY_HAPPY'			=> 'Very Happy',	'SMILIES_WINK'					=> 'Wink',	'TOPICS_TOPIC_TITLE'			=> 'Welcome to phpBB3',));?>
<?php/**** acp_modules [English]** @package language* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** DO NOT CHANGE*/if (!defined('IN_PHPBB')){	exit;}if (empty($lang) || !is_array($lang)){	$lang = array();}// DEVELOPERS PLEASE NOTE//// All language files should use UTF-8 as their encoding and the files must not contain a BOM.//// Placeholders can now contain order information, e.g. instead of// 'Page %s of %s' you can (and should) write 'Page %1$s of %2$s', this allows// translators to re-order the output of data while ensuring it remains correct//// You do not need this where single placeholders are used, e.g. 'Message %d' is fine// equally where a string contains only two placeholders which are used to wrap text// in a url you again do not need to specify an order e.g., 'Click %sHERE%s' is fine$lang = array_merge($lang, array(	'ACP_MODULE_MANAGEMENT_EXPLAIN'	=> 'Here you are able to manage all kind of modules. Please note that the ACP has a three-level menu structure (Category -> Category -> Module) whereby the others having a two-level menu structure (Category -> Module) which must be kept. Please also be aware that you may lock out yourself if you disable or delete the modules responsible for the module management itself.',	'ADD_MODULE'					=> 'Add module',	'ADD_MODULE_CONFIRM'			=> 'Are you sure you want to add the selected module with the selected mode?',	'ADD_MODULE_TITLE'				=> 'Add module',	'CANNOT_REMOVE_MODULE'	=> 'Unable to remove module, it has assigned children. Please remove or move all children before performing this action.',	'CATEGORY'				=> 'Category',	'CHOOSE_MODE'			=> 'Choose module mode',	'CHOOSE_MODE_EXPLAIN'	=> 'Choose the modules mode being used.',	'CHOOSE_MODULE'			=> 'Choose module',	'CHOOSE_MODULE_EXPLAIN'	=> 'Choose the file being called by this module.',	'CREATE_MODULE'			=> 'Create new module',	'DEACTIVATED_MODULE'	=> 'Deactivated module',	'DELETE_MODULE'			=> 'Delete module',	'DELETE_MODULE_CONFIRM'	=> 'Are you sure you want to remove this module?',	'EDIT_MODULE'			=> 'Edit module',	'EDIT_MODULE_EXPLAIN'	=> 'Here you are able to enter module specific settings.',	'HIDDEN_MODULE'			=> 'Hidden module',	'MODULE'					=> 'Module',	'MODULE_ADDED'				=> 'Module successfully added.',	'MODULE_DELETED'			=> 'Module successfully removed.',	'MODULE_DISPLAYED'			=> 'Module displayed',	'MODULE_DISPLAYED_EXPLAIN'	=> 'If you do not wish to display this module, but want to use it, set this to no.',	'MODULE_EDITED'				=> 'Module successfully edited.',	'MODULE_ENABLED'			=> 'Module enabled',	'MODULE_LANGNAME'			=> 'Module language name',	'MODULE_LANGNAME_EXPLAIN'	=> 'Enter the displayed module name. Use language constant if name is served from language file.',	'MODULE_TYPE'				=> 'Module type',	'NO_CATEGORY_TO_MODULE'	=> 'Unable to turn category into module. Please remove/move all children before performing this action.',	'NO_MODULE'				=> 'No module found.',	'NO_MODULE_ID'			=> 'No module id specified.',	'NO_MODULE_LANGNAME'	=> 'No module language name specified.',	'NO_PARENT'				=> 'No Parent',	'PARENT'				=> 'Parent',	'PARENT_NO_EXIST'		=> 'Parent does not exist.',	'SELECT_MODULE'			=> 'Select a module',));?>
<?php/**** @package mcp* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @ignore*/if (!defined('IN_PHPBB')){	exit;}/*** MCP Forum View*/function mcp_forum_view($id, $mode, $action, $forum_info){	global $template, $db, $user, $auth, $cache, $module;	global $phpEx, $phpbb_root_path, $config;	$user->add_lang(array('viewtopic', 'viewforum'));	include_once($phpbb_root_path . 'includes/functions_display.' . $phpEx);	// merge_topic is the quickmod action, merge_topics is the mcp_forum action, and merge_select is the mcp_topic action	$merge_select = ($action == 'merge_select' || $action == 'merge_topic' || $action == 'merge_topics') ? true : false;	if ($merge_select)	{		// Fixes a "bug" that makes forum_view use the same ordering as topic_view		unset($_POST['sk'], $_POST['sd'], $_REQUEST['sk'], $_REQUEST['sd']);	}	$forum_id			= $forum_info['forum_id'];	$start				= request_var('start', 0);	$topic_id_list		= request_var('topic_id_list', array(0));	$post_id_list		= request_var('post_id_list', array(0));	$source_topic_ids	= array(request_var('t', 0));	$to_topic_id		= request_var('to_topic_id', 0);	$url_extra = '';	$url_extra .= ($forum_id) ? "&amp;f=$forum_id" : '';	$url_extra .= ($GLOBALS['topic_id']) ? '&amp;t=' . $GLOBALS['topic_id'] : '';	$url_extra .= ($GLOBALS['post_id']) ? '&amp;p=' . $GLOBALS['post_id'] : '';	$url_extra .= ($GLOBALS['user_id']) ? '&amp;u=' . $GLOBALS['user_id'] : '';	$url = append_sid("{$phpbb_root_path}mcp.$phpEx?$url_extra");	// Resync Topics	switch ($action)	{		case 'resync':			$topic_ids = request_var('topic_id_list', array(0));			mcp_resync_topics($topic_ids);		break;		case 'merge_topics':			$source_topic_ids = $topic_id_list;		case 'merge_topic':			if ($to_topic_id)			{				merge_topics($forum_id, $source_topic_ids, $to_topic_id);			}		break;	}	$selected_ids = '';	if (sizeof($post_id_list) && $action != 'merge_topics')	{		foreach ($post_id_list as $num => $post_id)		{			$selected_ids .= '&amp;post_id_list[' . $num . ']=' . $post_id;		}	}	else if (sizeof($topic_id_list) && $action == 'merge_topics')	{		foreach ($topic_id_list as $num => $topic_id)		{			$selected_ids .= '&amp;topic_id_list[' . $num . ']=' . $topic_id;		}	}	make_jumpbox($url . "&amp;i=$id&amp;action=$action&amp;mode=$mode" . (($merge_select) ? $selected_ids : ''), $forum_id, false, 'm_', true);	$topics_per_page = ($forum_info['forum_topics_per_page']) ? $forum_info['forum_topics_per_page'] : $config['topics_per_page'];	$sort_days = $total = 0;	$sort_key = $sort_dir = '';	$sort_by_sql = $sort_order_sql = array();	mcp_sorting('viewforum', $sort_days, $sort_key, $sort_dir, $sort_by_sql, $sort_order_sql, $total, $forum_id);	$forum_topics = ($total == -1) ? $forum_info['forum_topics'] : $total;	$limit_time_sql = ($sort_days) ? 'AND t.topic_last_post_time >= ' . (time() - ($sort_days * 86400)) : '';	$template->assign_vars(array(		'ACTION'				=> $action,		'FORUM_NAME'			=> $forum_info['forum_name'],		'FORUM_DESCRIPTION'		=> generate_text_for_display($forum_info['forum_desc'], $forum_info['forum_desc_uid'], $forum_info['forum_desc_bitfield'], $forum_info['forum_desc_options']),		'REPORTED_IMG'			=> $user->img('icon_topic_reported', 'TOPIC_REPORTED'),		'UNAPPROVED_IMG'		=> $user->img('icon_topic_unapproved', 'TOPIC_UNAPPROVED'),		'LAST_POST_IMG'			=> $user->img('icon_topic_latest', 'VIEW_LATEST_POST'),		'NEWEST_POST_IMG'		=> $user->img('icon_topic_newest', 'VIEW_NEWEST_POST'),		'S_CAN_REPORT'			=> $auth->acl_get('m_report', $forum_id),		'S_CAN_DELETE'			=> $auth->acl_get('m_delete', $forum_id),		'S_CAN_MERGE'			=> $auth->acl_get('m_merge', $forum_id),		'S_CAN_MOVE'			=> $auth->acl_get('m_move', $forum_id),		'S_CAN_FORK'			=> $auth->acl_get('m_', $forum_id),		'S_CAN_LOCK'			=> $auth->acl_get('m_lock', $forum_id),		'S_CAN_SYNC'			=> $auth->acl_get('m_', $forum_id),		'S_CAN_APPROVE'			=> $auth->acl_get('m_approve', $forum_id),		'S_MERGE_SELECT'		=> ($merge_select) ? true : false,		'S_CAN_MAKE_NORMAL'		=> $auth->acl_gets('f_sticky', 'f_announce', $forum_id),		'S_CAN_MAKE_STICKY'		=> $auth->acl_get('f_sticky', $forum_id),		'S_CAN_MAKE_ANNOUNCE'	=> $auth->acl_get('f_announce', $forum_id),		'U_VIEW_FORUM'			=> append_sid("{$phpbb_root_path}viewforum.$phpEx", 'f=' . $forum_id),		'U_VIEW_FORUM_LOGS'		=> ($auth->acl_gets('a_', 'm_', $forum_id) && $module->loaded('logs')) ? append_sid("{$phpbb_root_path}mcp.$phpEx", 'i=logs&amp;mode=forum_logs&amp;f=' . $forum_id) : '',		'S_MCP_ACTION'			=> $url . "&amp;i=$id&amp;forum_action=$action&amp;mode=$mode&amp;start=$start" . (($merge_select) ? $selected_ids : ''),		'PAGINATION'			=> generate_pagination($url . "&amp;i=$id&amp;action=$action&amp;mode=$mode&amp;sd=$sort_dir&amp;sk=$sort_key&amp;st=$sort_days" . (($merge_select) ? $selected_ids : ''), $forum_topics, $topics_per_page, $start),		'PAGE_NUMBER'			=> on_page($forum_topics, $topics_per_page, $start),		'TOTAL_TOPICS'			=> ($forum_topics == 1) ? $user->lang['VIEW_FORUM_TOPIC'] : sprintf($user->lang['VIEW_FORUM_TOPICS'], $forum_topics),	));	// Grab icons	$icons = $cache->obtain_icons();	$topic_rows = array();	if ($config['load_db_lastread'])	{		$read_tracking_join = ' LEFT JOIN ' . TOPICS_TRACK_TABLE . ' tt ON (tt.topic_id = t.topic_id AND tt.user_id = ' . $user->data['user_id'] . ')';		$read_tracking_select = ', tt.mark_time';	}	else	{		$read_tracking_join = $read_tracking_select = '';	}	$sql = "SELECT t.topic_id		FROM " . TOPICS_TABLE . " t		WHERE t.forum_id IN($forum_id, 0)			" . (($auth->acl_get('m_approve', $forum_id)) ? '' : 'AND t.topic_approved = 1') . "			$limit_time_sql		ORDER BY t.topic_type DESC, $sort_order_sql";	$result = $db->sql_query_limit($sql, $topics_per_page, $start);	$topic_list = $topic_tracking_info = array();	while ($row = $db->sql_fetchrow($result))	{		$topic_list[] = $row['topic_id'];	}	$db->sql_freeresult($result);	$sql = "SELECT t.*$read_tracking_select		FROM " . TOPICS_TABLE . " t $read_tracking_join		WHERE " . $db->sql_in_set('t.topic_id', $topic_list, false, true);	$result = $db->sql_query($sql);	while ($row = $db->sql_fetchrow($result))	{		$topic_rows[$row['topic_id']] = $row;	}	$db->sql_freeresult($result);	// If there is more than one page, but we have no topic list, then the start parameter is... erm... out of sync	if (!sizeof($topic_list) && $forum_topics && $start > 0)	{		redirect($url . "&amp;i=$id&amp;action=$action&amp;mode=$mode");	}	// Get topic tracking info	if (sizeof($topic_list))	{		if ($config['load_db_lastread'])		{			$topic_tracking_info = get_topic_tracking($forum_id, $topic_list, $topic_rows, array($forum_id => $forum_info['mark_time']), array());		}		else		{			$topic_tracking_info = get_complete_topic_tracking($forum_id, $topic_list, array());		}	}	foreach ($topic_list as $topic_id)	{		$topic_title = '';		$row = &$topic_rows[$topic_id];		$replies = ($auth->acl_get('m_approve', $forum_id)) ? $row['topic_replies_real'] : $row['topic_replies'];		if ($row['topic_status'] == ITEM_MOVED)		{			$unread_topic = false;		}		else		{			$unread_topic = (isset($topic_tracking_info[$topic_id]) && $row['topic_last_post_time'] > $topic_tracking_info[$topic_id]) ? true : false;		}		// Get folder img, topic status/type related information		$folder_img = $folder_alt = $topic_type = '';		topic_status($row, $replies, $unread_topic, $folder_img, $folder_alt, $topic_type);		$topic_title = censor_text($row['topic_title']);		$topic_unapproved = (!$row['topic_approved'] && $auth->acl_get('m_approve', $row['forum_id'])) ? true : false;		$posts_unapproved = ($row['topic_approved'] && $row['topic_replies'] < $row['topic_replies_real'] && $auth->acl_get('m_approve', $row['forum_id'])) ? true : false;		$u_mcp_queue = ($topic_unapproved || $posts_unapproved) ? $url . '&amp;i=queue&amp;mode=' . (($topic_unapproved) ? 'approve_details' : 'unapproved_posts') . '&amp;t=' . $row['topic_id'] : '';		$topic_row = array(			'ATTACH_ICON_IMG'		=> ($auth->acl_get('u_download') && $auth->acl_get('f_download', $row['forum_id']) && $row['topic_attachment']) ? $user->img('icon_topic_attach', $user->lang['TOTAL_ATTACHMENTS']) : '',			'TOPIC_FOLDER_IMG'		=> $user->img($folder_img, $folder_alt),			'TOPIC_FOLDER_IMG_SRC'	=> $user->img($folder_img, $folder_alt, false, '', 'src'),			'TOPIC_ICON_IMG'		=> (!empty($icons[$row['icon_id']])) ? $icons[$row['icon_id']]['img'] : '',			'TOPIC_ICON_IMG_WIDTH'	=> (!empty($icons[$row['icon_id']])) ? $icons[$row['icon_id']]['width'] : '',			'TOPIC_ICON_IMG_HEIGHT'	=> (!empty($icons[$row['icon_id']])) ? $icons[$row['icon_id']]['height'] : '',			'UNAPPROVED_IMG'		=> ($topic_unapproved || $posts_unapproved) ? $user->img('icon_topic_unapproved', ($topic_unapproved) ? 'TOPIC_UNAPPROVED' : 'POSTS_UNAPPROVED') : '',			'TOPIC_AUTHOR'				=> get_username_string('username', $row['topic_poster'], $row['topic_first_poster_name'], $row['topic_first_poster_colour']),			'TOPIC_AUTHOR_COLOUR'		=> get_username_string('colour', $row['topic_poster'], $row['topic_first_poster_name'], $row['topic_first_poster_colour']),			'TOPIC_AUTHOR_FULL'			=> get_username_string('full', $row['topic_poster'], $row['topic_first_poster_name'], $row['topic_first_poster_colour']),			'U_TOPIC_AUTHOR'			=> get_username_string('profile', $row['topic_poster'], $row['topic_first_poster_name'], $row['topic_first_poster_colour']),			'LAST_POST_AUTHOR'			=> get_username_string('username', $row['topic_last_poster_id'], $row['topic_last_poster_name'], $row['topic_last_poster_colour']),			'LAST_POST_AUTHOR_COLOUR'	=> get_username_string('colour', $row['topic_last_poster_id'], $row['topic_last_poster_name'], $row['topic_last_poster_colour']),			'LAST_POST_AUTHOR_FULL'		=> get_username_string('full', $row['topic_last_poster_id'], $row['topic_last_poster_name'], $row['topic_last_poster_colour']),			'U_LAST_POST_AUTHOR'		=> get_username_string('profile', $row['topic_last_poster_id'], $row['topic_last_poster_name'], $row['topic_last_poster_colour']),			'TOPIC_TYPE'		=> $topic_type,			'TOPIC_TITLE'		=> $topic_title,			'REPLIES'			=> ($auth->acl_get('m_approve', $row['forum_id'])) ? $row['topic_replies_real'] : $row['topic_replies'],			'LAST_POST_TIME'	=> $user->format_date($row['topic_last_post_time']),			'FIRST_POST_TIME'	=> $user->format_date($row['topic_time']),			'LAST_POST_SUBJECT'	=> $row['topic_last_post_subject'],			'LAST_VIEW_TIME'	=> $user->format_date($row['topic_last_view_time']),			'S_TOPIC_REPORTED'		=> (!empty($row['topic_reported']) && empty($row['topic_moved_id']) && $auth->acl_get('m_report', $row['forum_id'])) ? true : false,			'S_TOPIC_UNAPPROVED'	=> $topic_unapproved,			'S_POSTS_UNAPPROVED'	=> $posts_unapproved,			'S_UNREAD_TOPIC'		=> $unread_topic,		);		if ($row['topic_status'] == ITEM_MOVED)		{			$topic_row = array_merge($topic_row, array(				'U_VIEW_TOPIC'		=> append_sid("{$phpbb_root_path}viewtopic.$phpEx", "t={$row['topic_moved_id']}"),				'U_DELETE_TOPIC'	=> ($auth->acl_get('m_delete', $forum_id)) ? append_sid("{$phpbb_root_path}mcp.$phpEx", "i=$id&amp;f=$forum_id&amp;topic_id_list[]={$row['topic_id']}&amp;mode=forum_view&amp;action=delete_topic") : '',				'S_MOVED_TOPIC'		=> true,				'TOPIC_ID'			=> $row['topic_moved_id'],			));		}		else		{			if ($action == 'merge_topic' || $action == 'merge_topics')			{				$u_select_topic = $url . "&amp;i=$id&amp;mode=forum_view&amp;action=$action&amp;to_topic_id=" . $row['topic_id'] . $selected_ids;			}			else			{				$u_select_topic = $url . "&amp;i=$id&amp;mode=topic_view&amp;action=merge&amp;to_topic_id=" . $row['topic_id'] . $selected_ids;			}			$topic_row = array_merge($topic_row, array(				'U_VIEW_TOPIC'		=> append_sid("{$phpbb_root_path}mcp.$phpEx", "i=$id&amp;f=$forum_id&amp;t={$row['topic_id']}&amp;mode=topic_view"),				'S_SELECT_TOPIC'	=> ($merge_select && !in_array($row['topic_id'], $source_topic_ids)) ? true : false,				'U_SELECT_TOPIC'	=> $u_select_topic,				'U_MCP_QUEUE'		=> $u_mcp_queue,				'U_MCP_REPORT'		=> ($auth->acl_get('m_report', $forum_id)) ? append_sid("{$phpbb_root_path}mcp.$phpEx", 'i=main&amp;mode=topic_view&amp;t=' . $row['topic_id'] . '&amp;action=reports') : '',				'TOPIC_ID'			=> $row['topic_id'],				'S_TOPIC_CHECKED'	=> ($topic_id_list && in_array($row['topic_id'], $topic_id_list)) ? true : false,			));		}		$template->assign_block_vars('topicrow', $topic_row);	}	unset($topic_rows);}/*** Resync topics*/function mcp_resync_topics($topic_ids){	global $auth, $db, $template, $phpEx, $user, $phpbb_root_path;	if (!sizeof($topic_ids))	{		trigger_error('NO_TOPIC_SELECTED');	}	if (!check_ids($topic_ids, TOPICS_TABLE, 'topic_id', array('m_')))	{		return;	}	// Sync everything and perform extra checks separately	sync('topic_reported', 'topic_id', $topic_ids, false, true);	sync('topic_attachment', 'topic_id', $topic_ids, false, true);	sync('topic', 'topic_id', $topic_ids, true, false);	$sql = 'SELECT topic_id, forum_id, topic_title		FROM ' . TOPICS_TABLE . '		WHERE ' . $db->sql_in_set('topic_id', $topic_ids);	$result = $db->sql_query($sql);	// Log this action	while ($row = $db->sql_fetchrow($result))	{		add_log('mod', $row['forum_id'], $row['topic_id'], 'LOG_TOPIC_RESYNC', $row['topic_title']);	}	$db->sql_freeresult($result);	$msg = (sizeof($topic_ids) == 1) ? $user->lang['TOPIC_RESYNC_SUCCESS'] : $user->lang['TOPICS_RESYNC_SUCCESS'];	$redirect = request_var('redirect', $user->data['session_page']);	meta_refresh(3, $redirect);	trigger_error($msg . '<br /><br />' . sprintf($user->lang['RETURN_PAGE'], '<a href="' . $redirect . '">', '</a>'));	return;}/*** Merge selected topics into selected topic*/function merge_topics($forum_id, $topic_ids, $to_topic_id){	global $db, $template, $user, $phpEx, $phpbb_root_path, $auth;	if (!sizeof($topic_ids))	{		$template->assign_var('MESSAGE', $user->lang['NO_TOPIC_SELECTED']);		return;	}	if (!$to_topic_id)	{		$template->assign_var('MESSAGE', $user->lang['NO_FINAL_TOPIC_SELECTED']);		return;	}	$topic_data = get_topic_data(array($to_topic_id), 'm_merge');	if (!sizeof($topic_data))	{		$template->assign_var('MESSAGE', $user->lang['NO_FINAL_TOPIC_SELECTED']);		return;	}	$topic_data = $topic_data[$to_topic_id];	$post_id_list	= request_var('post_id_list', array(0));	$start			= request_var('start', 0);	if (!sizeof($post_id_list) && sizeof($topic_ids))	{		$sql = 'SELECT post_id			FROM ' . POSTS_TABLE . '			WHERE ' . $db->sql_in_set('topic_id', $topic_ids);		$result = $db->sql_query($sql);		$post_id_list = array();		while ($row = $db->sql_fetchrow($result))		{			$post_id_list[] = $row['post_id'];		}		$db->sql_freeresult($result);	}	if (!sizeof($post_id_list))	{		$template->assign_var('MESSAGE', $user->lang['NO_POST_SELECTED']);		return;	}	if (!check_ids($post_id_list, POSTS_TABLE, 'post_id', array('m_merge')))	{		return;	}	$redirect = request_var('redirect', build_url(array('quickmod')));	$s_hidden_fields = build_hidden_fields(array(		'i'				=> 'main',		'f'				=> $forum_id,		'post_id_list'	=> $post_id_list,		'to_topic_id'	=> $to_topic_id,		'mode'			=> 'forum_view',		'action'		=> 'merge_topics',		'start'			=> $start,		'redirect'		=> $redirect,		'topic_id_list'	=> $topic_ids)	);	$success_msg = $return_link = '';	if (confirm_box(true))	{		$to_forum_id = $topic_data['forum_id'];		move_posts($post_id_list, $to_topic_id);		add_log('mod', $to_forum_id, $to_topic_id, 'LOG_MERGE', $topic_data['topic_title']);		// Message and return links		$success_msg = 'POSTS_MERGED_SUCCESS';		// If the topic no longer exist, we will update the topic watch table.		// To not let it error out on users watching both topics, we just return on an error...		$db->sql_return_on_error(true);		$db->sql_query('UPDATE ' . TOPICS_WATCH_TABLE . ' SET topic_id = ' . (int) $to_topic_id . ' WHERE ' . $db->sql_in_set('topic_id', $topic_ids));		$db->sql_return_on_error(false);		$db->sql_query('DELETE FROM ' . TOPICS_WATCH_TABLE . ' WHERE ' . $db->sql_in_set('topic_id', $topic_ids));		// Link to the new topic		$return_link .= (($return_link) ? '<br /><br />' : '') . sprintf($user->lang['RETURN_NEW_TOPIC'], '<a href="' . append_sid("{$phpbb_root_path}viewtopic.$phpEx", 'f=' . $to_forum_id . '&amp;t=' . $to_topic_id) . '">', '</a>');	}	else	{		confirm_box(false, 'MERGE_TOPICS', $s_hidden_fields);	}	$redirect = request_var('redirect', "index.$phpEx");	$redirect = reapply_sid($redirect);	if (!$success_msg)	{		return;	}	else	{		meta_refresh(3, append_sid("{$phpbb_root_path}viewtopic.$phpEx", "f=$to_forum_id&amp;t=$to_topic_id"));		trigger_error($user->lang[$success_msg] . '<br /><br />' . $return_link);	}}?>
<?php/*** Only adjust the [size] bbcode tag from pc to percent.** You should make a backup from your users, posts and privmsgs table in case something goes wrong* Forum descriptions and rules need to be re-submitted manually if they use the [size] tag.** Since we limit the match to the sizes from 0 to 29 no newly applied sizes should be affected...*/die("Please read the first lines of this script for instructions on how to enable it");set_time_limit(0);@ini_set('memory_limit', '128M');define('IN_PHPBB', true);$phpbb_root_path = './../';$phpEx = substr(strrchr(__FILE__, '.'), 1);include($phpbb_root_path . 'common.'.$phpEx);// Start session management$user->session_begin();$auth->acl($user->data);$user->setup();$echos = 0;function replace_size($matches){	return '[size=' . ceil(100.0 * (((double) $matches[1])/12.0)) . ':' . $matches[2] . ']';}// Adjust user signatures$sql = 'SELECT user_id, user_sig, user_sig_bbcode_uid	FROM ' . USERS_TABLE;$result = $db->sql_query($sql);while ($row = $db->sql_fetchrow($result)){	$bbcode_uid = $row['user_sig_bbcode_uid'];	// Only if a bbcode uid is present, the signature present and a size tag used...	if ($bbcode_uid && $row['user_sig'] && strpos($row['user_sig'], '[size=') !== false)	{		$row['user_sig'] = preg_replace_callback('/\[size=(\d*):(' . $bbcode_uid . ')\]/', 'replace_size', $row['user_sig']);		$sql = 'UPDATE ' . USERS_TABLE . " SET user_sig = '" . $db->sql_escape($row['user_sig']) . "'			WHERE user_id = " . $row['user_id'];		$db->sql_query($sql);		if ($echos > 200)		{			echo '<br />' . "\n";			$echos = 0;		}		echo '.';		$echos++;		flush();	}}$db->sql_freeresult($result);// Now adjust posts$sql = 'SELECT post_id, post_text, bbcode_uid, enable_bbcode	FROM ' . POSTS_TABLE;$result = $db->sql_query($sql);while ($row = $db->sql_fetchrow($result)){	$bbcode_uid = $row['bbcode_uid'];	// Only if a bbcode uid is present, bbcode enabled and a size tag used...	if ($row['enable_bbcode'] && $bbcode_uid && strpos($row['post_text'], '[size=') !== false)	{		$row['post_text'] = preg_replace_callback('/\[size=(\d*):' . $bbcode_uid . '\]/', 'replace_size', $row['post_text']);		$sql = 'UPDATE ' . POSTS_TABLE . " SET post_text = '" . $db->sql_escape($row['post_text']) . "'			WHERE post_id = " . $row['post_id'];		$db->sql_query($sql);		if ($echos > 200)		{			echo '<br />' . "\n";			$echos = 0;		}		echo '.';		$echos++;		flush();	}}$db->sql_freeresult($result);// Now to the private messages$sql = 'SELECT msg_id, message_text, bbcode_uid, enable_bbcode	FROM ' . PRIVMSGS_TABLE;$result = $db->sql_query($sql);while ($row = $db->sql_fetchrow($result)){	$bbcode_uid = $row['bbcode_uid'];	// Only if a bbcode uid is present, bbcode enabled and a size tag used...	if ($row['enable_bbcode'] && $bbcode_uid && strpos($row['message_text'], '[size=') !== false)	{		$row['message_text'] = preg_replace_callback('/\[size=(\d*):' . $bbcode_uid . '\]/', 'replace_size', $row['message_text']);		$sql = 'UPDATE ' . PRIVMSGS_TABLE . " SET message_text = '" . $db->sql_escape($row['message_text']) . "'			WHERE msg_id = " . $row['msg_id'];		$db->sql_query($sql);		if ($echos > 200)		{			echo '<br />' . "\n";			$echos = 0;		}		echo '.';		$echos++;		flush();	}}$db->sql_freeresult($result);// Done$db->sql_close();?>
<?php/**** @package phpBB3* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @ignore*/if (!defined('IN_PHPBB')){	exit;}/*** valid external constants:* PHPBB_MSG_HANDLER* PHPBB_DB_NEW_LINK* PHPBB_ROOT_PATH* PHPBB_ADMIN_PATH*/// phpBB Versiondefine('PHPBB_VERSION', '3.0.10');// QA-related// define('PHPBB_QA', 1);// User relateddefine('ANONYMOUS', 1);define('USER_ACTIVATION_NONE', 0);define('USER_ACTIVATION_SELF', 1);define('USER_ACTIVATION_ADMIN', 2);define('USER_ACTIVATION_DISABLE', 3);define('AVATAR_UPLOAD', 1);define('AVATAR_REMOTE', 2);define('AVATAR_GALLERY', 3);define('USER_NORMAL', 0);define('USER_INACTIVE', 1);define('USER_IGNORE', 2);define('USER_FOUNDER', 3);define('INACTIVE_REGISTER', 1);define('INACTIVE_PROFILE', 2);define('INACTIVE_MANUAL', 3);define('INACTIVE_REMIND', 4);// ACLdefine('ACL_NEVER', 0);define('ACL_YES', 1);define('ACL_NO', -1);// Login error codesdefine('LOGIN_CONTINUE', 1);define('LOGIN_BREAK', 2);define('LOGIN_SUCCESS', 3);define('LOGIN_SUCCESS_CREATE_PROFILE', 20);define('LOGIN_ERROR_USERNAME', 10);define('LOGIN_ERROR_PASSWORD', 11);define('LOGIN_ERROR_ACTIVE', 12);define('LOGIN_ERROR_ATTEMPTS', 13);define('LOGIN_ERROR_EXTERNAL_AUTH', 14);define('LOGIN_ERROR_PASSWORD_CONVERT', 15);// Maximum login attempts// The value is arbitrary, but it has to fit into the user_login_attempts field.define('LOGIN_ATTEMPTS_MAX', 100);// Group settingsdefine('GROUP_OPEN', 0);define('GROUP_CLOSED', 1);define('GROUP_HIDDEN', 2);define('GROUP_SPECIAL', 3);define('GROUP_FREE', 4);// Forum/Topic statesdefine('FORUM_CAT', 0);define('FORUM_POST', 1);define('FORUM_LINK', 2);define('ITEM_UNLOCKED', 0);define('ITEM_LOCKED', 1);define('ITEM_MOVED', 2);// Forum Flagsdefine('FORUM_FLAG_LINK_TRACK', 1);define('FORUM_FLAG_PRUNE_POLL', 2);define('FORUM_FLAG_PRUNE_ANNOUNCE', 4);define('FORUM_FLAG_PRUNE_STICKY', 8);define('FORUM_FLAG_ACTIVE_TOPICS', 16);define('FORUM_FLAG_POST_REVIEW', 32);define('FORUM_FLAG_QUICK_REPLY', 64);// Forum Options... sequential order. Modifications should begin at number 10 (number 29 is maximum)define('FORUM_OPTION_FEED_NEWS', 1);define('FORUM_OPTION_FEED_EXCLUDE', 2);// Optional text flagsdefine('OPTION_FLAG_BBCODE', 1);define('OPTION_FLAG_SMILIES', 2);define('OPTION_FLAG_LINKS', 4);// Topic typesdefine('POST_NORMAL', 0);define('POST_STICKY', 1);define('POST_ANNOUNCE', 2);define('POST_GLOBAL', 3);// Lastread typesdefine('TRACK_NORMAL', 0);define('TRACK_POSTED', 1);// Notify methodsdefine('NOTIFY_EMAIL', 0);define('NOTIFY_IM', 1);define('NOTIFY_BOTH', 2);// Notify statusdefine('NOTIFY_YES', 0);define('NOTIFY_NO', 1);// Email Priority Settingsdefine('MAIL_LOW_PRIORITY', 4);define('MAIL_NORMAL_PRIORITY', 3);define('MAIL_HIGH_PRIORITY', 2);// Log typesdefine('LOG_ADMIN', 0);define('LOG_MOD', 1);define('LOG_CRITICAL', 2);define('LOG_USERS', 3);// Private messaging - Do NOT change these valuesdefine('PRIVMSGS_HOLD_BOX', -4);define('PRIVMSGS_NO_BOX', -3);define('PRIVMSGS_OUTBOX', -2);define('PRIVMSGS_SENTBOX', -1);define('PRIVMSGS_INBOX', 0);// Full Folder Actionsdefine('FULL_FOLDER_NONE', -3);define('FULL_FOLDER_DELETE', -2);define('FULL_FOLDER_HOLD', -1);// Download Modes - Attachmentsdefine('INLINE_LINK', 1);// This mode is only used internally to allow modders extending the attachment functionalitydefine('PHYSICAL_LINK', 2);// Confirm typesdefine('CONFIRM_REG', 1);define('CONFIRM_LOGIN', 2);define('CONFIRM_POST', 3);// Categories - Attachmentsdefine('ATTACHMENT_CATEGORY_NONE', 0);define('ATTACHMENT_CATEGORY_IMAGE', 1); // Inline Imagesdefine('ATTACHMENT_CATEGORY_WM', 2); // Windows Media Files - Streamingdefine('ATTACHMENT_CATEGORY_RM', 3); // Real Media Files - Streamingdefine('ATTACHMENT_CATEGORY_THUMB', 4); // Not used within the database, only while displaying postsdefine('ATTACHMENT_CATEGORY_FLASH', 5); // Flash/SWF filesdefine('ATTACHMENT_CATEGORY_QUICKTIME', 6); // Quicktime/Mov files// BBCode UID lengthdefine('BBCODE_UID_LEN', 8);// Number of core BBCodesdefine('NUM_CORE_BBCODES', 12);// BBCode hard limitdefine('BBCODE_LIMIT', 1511);// Smiley hard limitdefine('SMILEY_LIMIT', 1000);// Magic url typesdefine('MAGIC_URL_EMAIL', 1);define('MAGIC_URL_FULL', 2);define('MAGIC_URL_LOCAL', 3);define('MAGIC_URL_WWW', 4);// Profile Field Typesdefine('FIELD_INT', 1);define('FIELD_STRING', 2);define('FIELD_TEXT', 3);define('FIELD_BOOL', 4);define('FIELD_DROPDOWN', 5);define('FIELD_DATE', 6);// referer validationdefine('REFERER_VALIDATE_NONE', 0);define('REFERER_VALIDATE_HOST', 1);define('REFERER_VALIDATE_PATH', 2);// phpbb_chmod() permissions@define('CHMOD_ALL', 7);@define('CHMOD_READ', 4);@define('CHMOD_WRITE', 2);@define('CHMOD_EXECUTE', 1);// Captcha code lengthdefine('CAPTCHA_MIN_CHARS', 4);define('CAPTCHA_MAX_CHARS', 7);// Additional constantsdefine('VOTE_CONVERTED', 127);// Table namesdefine('ACL_GROUPS_TABLE',			$table_prefix . 'acl_groups');define('ACL_OPTIONS_TABLE',			$table_prefix . 'acl_options');define('ACL_ROLES_DATA_TABLE',		$table_prefix . 'acl_roles_data');define('ACL_ROLES_TABLE',			$table_prefix . 'acl_roles');define('ACL_USERS_TABLE',			$table_prefix . 'acl_users');define('ATTACHMENTS_TABLE',			$table_prefix . 'attachments');define('BANLIST_TABLE',				$table_prefix . 'banlist');define('BBCODES_TABLE',				$table_prefix . 'bbcodes');define('BOOKMARKS_TABLE',			$table_prefix . 'bookmarks');define('BOTS_TABLE',				$table_prefix . 'bots');define('CONFIG_TABLE',				$table_prefix . 'config');define('CONFIRM_TABLE',				$table_prefix . 'confirm');define('DISALLOW_TABLE',			$table_prefix . 'disallow');define('DRAFTS_TABLE',				$table_prefix . 'drafts');define('EXTENSIONS_TABLE',			$table_prefix . 'extensions');define('EXTENSION_GROUPS_TABLE',	$table_prefix . 'extension_groups');define('FORUMS_TABLE',				$table_prefix . 'forums');define('FORUMS_ACCESS_TABLE',		$table_prefix . 'forums_access');define('FORUMS_TRACK_TABLE',		$table_prefix . 'forums_track');define('FORUMS_WATCH_TABLE',		$table_prefix . 'forums_watch');define('GROUPS_TABLE',				$table_prefix . 'groups');define('ICONS_TABLE',				$table_prefix . 'icons');define('LANG_TABLE',				$table_prefix . 'lang');define('LOG_TABLE',					$table_prefix . 'log');define('LOGIN_ATTEMPT_TABLE',		$table_prefix . 'login_attempts');define('MODERATOR_CACHE_TABLE',		$table_prefix . 'moderator_cache');define('MODULES_TABLE',				$table_prefix . 'modules');define('POLL_OPTIONS_TABLE',		$table_prefix . 'poll_options');define('POLL_VOTES_TABLE',			$table_prefix . 'poll_votes');define('POSTS_TABLE',				$table_prefix . 'posts');define('PRIVMSGS_TABLE',			$table_prefix . 'privmsgs');define('PRIVMSGS_FOLDER_TABLE',		$table_prefix . 'privmsgs_folder');define('PRIVMSGS_RULES_TABLE',		$table_prefix . 'privmsgs_rules');define('PRIVMSGS_TO_TABLE',			$table_prefix . 'privmsgs_to');define('PROFILE_FIELDS_TABLE',		$table_prefix . 'profile_fields');define('PROFILE_FIELDS_DATA_TABLE',	$table_prefix . 'profile_fields_data');define('PROFILE_FIELDS_LANG_TABLE',	$table_prefix . 'profile_fields_lang');define('PROFILE_LANG_TABLE',		$table_prefix . 'profile_lang');define('RANKS_TABLE',				$table_prefix . 'ranks');define('REPORTS_TABLE',				$table_prefix . 'reports');define('REPORTS_REASONS_TABLE',		$table_prefix . 'reports_reasons');define('SEARCH_RESULTS_TABLE',		$table_prefix . 'search_results');define('SEARCH_WORDLIST_TABLE',		$table_prefix . 'search_wordlist');define('SEARCH_WORDMATCH_TABLE',	$table_prefix . 'search_wordmatch');define('SESSIONS_TABLE',			$table_prefix . 'sessions');define('SESSIONS_KEYS_TABLE',		$table_prefix . 'sessions_keys');define('SITELIST_TABLE',			$table_prefix . 'sitelist');define('SMILIES_TABLE',				$table_prefix . 'smilies');define('STYLES_TABLE',				$table_prefix . 'styles');define('STYLES_TEMPLATE_TABLE',		$table_prefix . 'styles_template');define('STYLES_TEMPLATE_DATA_TABLE',$table_prefix . 'styles_template_data');define('STYLES_THEME_TABLE',		$table_prefix . 'styles_theme');define('STYLES_IMAGESET_TABLE',		$table_prefix . 'styles_imageset');define('STYLES_IMAGESET_DATA_TABLE',$table_prefix . 'styles_imageset_data');define('TOPICS_TABLE',				$table_prefix . 'topics');define('TOPICS_POSTED_TABLE',		$table_prefix . 'topics_posted');define('TOPICS_TRACK_TABLE',		$table_prefix . 'topics_track');define('TOPICS_WATCH_TABLE',		$table_prefix . 'topics_watch');define('USER_GROUP_TABLE',			$table_prefix . 'user_group');define('USERS_TABLE',				$table_prefix . 'users');define('WARNINGS_TABLE',			$table_prefix . 'warnings');define('WORDS_TABLE',				$table_prefix . 'words');define('ZEBRA_TABLE',				$table_prefix . 'zebra');// Additional tables?>
<?php/**** @package acp* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @ignore*/if (!defined('IN_PHPBB')){	exit;}/*** @package acp*/class acp_bots{	var $u_action;	function main($id, $mode)	{		global $config, $db, $user, $auth, $template, $cache;		global $phpbb_root_path, $phpbb_admin_path, $phpEx, $table_prefix;		$action = request_var('action', '');		$submit = (isset($_POST['submit'])) ? true : false;		$mark	= request_var('mark', array(0));		$bot_id	= request_var('id', 0);		if (isset($_POST['add']))		{			$action = 'add';		}		$error = array();		$user->add_lang('acp/bots');		$this->tpl_name = 'acp_bots';		$this->page_title = 'ACP_BOTS';		$form_key = 'acp_bots';		add_form_key($form_key);		if ($submit && !check_form_key($form_key))		{			$error[] = $user->lang['FORM_INVALID'];		}		// User wants to do something, how inconsiderate of them!		switch ($action)		{			case 'activate':				if ($bot_id || sizeof($mark))				{					$sql_id = ($bot_id) ? " = $bot_id" : ' IN (' . implode(', ', $mark) . ')';					$sql = 'UPDATE ' . BOTS_TABLE . "						SET bot_active = 1						WHERE bot_id $sql_id";					$db->sql_query($sql);				}				$cache->destroy('_bots');			break;			case 'deactivate':				if ($bot_id || sizeof($mark))				{					$sql_id = ($bot_id) ? " = $bot_id" : ' IN (' . implode(', ', $mark) . ')';					$sql = 'UPDATE ' . BOTS_TABLE . "						SET bot_active = 0						WHERE bot_id $sql_id";					$db->sql_query($sql);				}				$cache->destroy('_bots');			break;			case 'delete':				if ($bot_id || sizeof($mark))				{					if (confirm_box(true))					{						// We need to delete the relevant user, usergroup and bot entries ...						$sql_id = ($bot_id) ? " = $bot_id" : ' IN (' . implode(', ', $mark) . ')';						$sql = 'SELECT bot_name, user_id							FROM ' . BOTS_TABLE . "							WHERE bot_id $sql_id";						$result = $db->sql_query($sql);						$user_id_ary = $bot_name_ary = array();						while ($row = $db->sql_fetchrow($result))						{							$user_id_ary[] = (int) $row['user_id'];							$bot_name_ary[] = $row['bot_name'];						}						$db->sql_freeresult($result);						$db->sql_transaction('begin');						$sql = 'DELETE FROM ' . BOTS_TABLE . "							WHERE bot_id $sql_id";						$db->sql_query($sql);						if (sizeof($user_id_ary))						{							$_tables = array(USERS_TABLE, USER_GROUP_TABLE);							foreach ($_tables as $table)							{								$sql = "DELETE FROM $table									WHERE " . $db->sql_in_set('user_id', $user_id_ary);								$db->sql_query($sql);							}						}						$db->sql_transaction('commit');						$cache->destroy('_bots');						add_log('admin', 'LOG_BOT_DELETE', implode(', ', $bot_name_ary));						trigger_error($user->lang['BOT_DELETED'] . adm_back_link($this->u_action));					}					else					{						confirm_box(false, $user->lang['CONFIRM_OPERATION'], build_hidden_fields(array(							'mark'		=> $mark,							'id'		=> $bot_id,							'mode'		=> $mode,							'action'	=> $action))						);					}				}			break;			case 'edit':			case 'add':				include_once($phpbb_root_path . 'includes/functions_user.' . $phpEx);				$bot_row = array(					'bot_name'		=> utf8_normalize_nfc(request_var('bot_name', '', true)),					'bot_agent'		=> request_var('bot_agent', ''),					'bot_ip'		=> request_var('bot_ip', ''),					'bot_active'	=> request_var('bot_active', true),					'bot_lang'		=> request_var('bot_lang', $config['default_lang']),					'bot_style'		=> request_var('bot_style' , $config['default_style']),				);				if ($submit)				{					if (!$bot_row['bot_agent'] && !$bot_row['bot_ip'])					{						$error[] = $user->lang['ERR_BOT_NO_MATCHES'];					}								if ($bot_row['bot_ip'] && !preg_match('#^[\d\.,:]+$#', $bot_row['bot_ip']))					{						if (!$ip_list = gethostbynamel($bot_row['bot_ip']))						{							$error[] = $user->lang['ERR_BOT_NO_IP'];						}						else						{							$bot_row['bot_ip'] = implode(',', $ip_list);						}					}					$bot_row['bot_ip'] = str_replace(' ', '', $bot_row['bot_ip']);					// Make sure the admin is not adding a bot with an user agent similar to his one					if ($bot_row['bot_agent'] && substr($user->data['session_browser'], 0, 149) === substr($bot_row['bot_agent'], 0, 149))					{						$error[] = $user->lang['ERR_BOT_AGENT_MATCHES_UA'];					}										$bot_name = false;					if ($bot_id)					{						$sql = 'SELECT u.username_clean							FROM ' . BOTS_TABLE . ' b, ' . USERS_TABLE . " u							WHERE b.bot_id = $bot_id								AND u.user_id = b.user_id";						$result = $db->sql_query($sql);						$row = $db->sql_fetchrow($result);						$db->sql_freeresult($result);						if (!$bot_row)						{							$error[] = $user->lang['NO_BOT'];						}						else						{							$bot_name = $row['username_clean'];						}					}					if (!$this->validate_botname($bot_row['bot_name'], $bot_name))					{						$error[] = $user->lang['BOT_NAME_TAKEN'];					}										if (!sizeof($error))					{						// New bot? Create a new user and group entry						if ($action == 'add')						{							$sql = 'SELECT group_id, group_colour								FROM ' . GROUPS_TABLE . "								WHERE group_name = 'BOTS'									AND group_type = " . GROUP_SPECIAL;							$result = $db->sql_query($sql);							$group_row = $db->sql_fetchrow($result);							$db->sql_freeresult($result);							if (!$group_row)							{								trigger_error($user->lang['NO_BOT_GROUP'] . adm_back_link($this->u_action . "&amp;id=$bot_id&amp;action=$action"), E_USER_WARNING);							}													$user_id = user_add(array(								'user_type'				=> (int) USER_IGNORE,								'group_id'				=> (int) $group_row['group_id'],								'username'				=> (string) $bot_row['bot_name'],								'user_regdate'			=> time(),								'user_password'			=> '',								'user_colour'			=> (string) $group_row['group_colour'],								'user_email'			=> '',								'user_lang'				=> (string) $bot_row['bot_lang'],								'user_style'			=> (int) $bot_row['bot_style'],								'user_allow_massemail'	=> 0,							));								$sql = 'INSERT INTO ' . BOTS_TABLE . ' ' . $db->sql_build_array('INSERT', array(								'user_id'		=> (int) $user_id,								'bot_name'		=> (string) $bot_row['bot_name'],								'bot_active'	=> (int) $bot_row['bot_active'],								'bot_agent'		=> (string) $bot_row['bot_agent'],								'bot_ip'		=> (string) $bot_row['bot_ip'])							);							$db->sql_query($sql);								$log = 'ADDED';						}						else if ($bot_id)						{							$sql = 'SELECT user_id, bot_name								FROM ' . BOTS_TABLE . "								WHERE bot_id = $bot_id";							$result = $db->sql_query($sql);							$row = $db->sql_fetchrow($result);							$db->sql_freeresult($result);							if (!$row)							{								trigger_error($user->lang['NO_BOT'] . adm_back_link($this->u_action . "&amp;id=$bot_id&amp;action=$action"), E_USER_WARNING);							}							$sql_ary = array(								'user_style'	=> (int) $bot_row['bot_style'],								'user_lang'		=> (string) $bot_row['bot_lang'],							);							if ($bot_row['bot_name'] !== $row['bot_name'])							{								$sql_ary['username'] = (string) $bot_row['bot_name'];								$sql_ary['username_clean'] = (string) utf8_clean_string($bot_row['bot_name']);							}							$sql = 'UPDATE ' . USERS_TABLE . ' SET ' . $db->sql_build_array('UPDATE', $sql_ary) . " WHERE user_id = {$row['user_id']}";							$db->sql_query($sql);							$sql = 'UPDATE ' . BOTS_TABLE . ' SET ' . $db->sql_build_array('UPDATE', array(								'bot_name'		=> (string) $bot_row['bot_name'],								'bot_active'	=> (int) $bot_row['bot_active'],								'bot_agent'		=> (string) $bot_row['bot_agent'],								'bot_ip'		=> (string) $bot_row['bot_ip'])							) . " WHERE bot_id = $bot_id";							$db->sql_query($sql);							// Updated username?							if ($bot_row['bot_name'] !== $row['bot_name'])							{								user_update_name($row['bot_name'], $bot_row['bot_name']);							}							$log = 'UPDATED';						}												$cache->destroy('_bots');												add_log('admin', 'LOG_BOT_' . $log, $bot_row['bot_name']);						trigger_error($user->lang['BOT_' . $log] . adm_back_link($this->u_action));										}				}				else if ($bot_id)				{					$sql = 'SELECT b.*, u.user_lang, u.user_style						FROM ' . BOTS_TABLE . ' b, ' . USERS_TABLE . " u						WHERE b.bot_id = $bot_id							AND u.user_id = b.user_id";					$result = $db->sql_query($sql);					$bot_row = $db->sql_fetchrow($result);					$db->sql_freeresult($result);					if (!$bot_row)					{						trigger_error($user->lang['NO_BOT'] . adm_back_link($this->u_action . "&amp;id=$bot_id&amp;action=$action"), E_USER_WARNING);					}					$bot_row['bot_lang'] = $bot_row['user_lang'];					$bot_row['bot_style'] = $bot_row['user_style'];					unset($bot_row['user_lang'], $bot_row['user_style']);				}				$s_active_options = '';				$_options = array('0' => 'NO', '1' => 'YES');				foreach ($_options as $value => $lang)				{					$selected = ($bot_row['bot_active'] == $value) ? ' selected="selected"' : '';					$s_active_options .= '<option value="' . $value . '"' . $selected . '>' . $user->lang[$lang] . '</option>';				}				$style_select = style_select($bot_row['bot_style'], true);				$lang_select = language_select($bot_row['bot_lang']);				$l_title = ($action == 'edit') ? 'EDIT' : 'ADD';				$template->assign_vars(array(					'L_TITLE'		=> $user->lang['BOT_' . $l_title],					'U_ACTION'		=> $this->u_action . "&amp;id=$bot_id&amp;action=$action",					'U_BACK'		=> $this->u_action,					'ERROR_MSG'		=> (sizeof($error)) ? implode('<br />', $error) : '',										'BOT_NAME'		=> $bot_row['bot_name'],					'BOT_IP'		=> $bot_row['bot_ip'],					'BOT_AGENT'		=> $bot_row['bot_agent'],										'S_EDIT_BOT'		=> true,					'S_ACTIVE_OPTIONS'	=> $s_active_options,					'S_STYLE_OPTIONS'	=> $style_select,					'S_LANG_OPTIONS'	=> $lang_select,					'S_ERROR'			=> (sizeof($error)) ? true : false,					)				);				return;			break;		}		$s_options = '';		$_options = array('activate' => 'BOT_ACTIVATE', 'deactivate' => 'BOT_DEACTIVATE', 'delete' => 'DELETE');		foreach ($_options as $value => $lang)		{			$s_options .= '<option value="' . $value . '">' . $user->lang[$lang] . '</option>';		}		$template->assign_vars(array(			'U_ACTION'		=> $this->u_action,			'S_BOT_OPTIONS'	=> $s_options)		);		$sql = 'SELECT b.bot_id, b.bot_name, b.bot_active, u.user_lastvisit			FROM ' . BOTS_TABLE . ' b, ' . USERS_TABLE . ' u			WHERE u.user_id = b.user_id			ORDER BY u.user_lastvisit DESC, b.bot_name ASC';		$result = $db->sql_query($sql);		while ($row = $db->sql_fetchrow($result))		{			$active_lang = (!$row['bot_active']) ? 'BOT_ACTIVATE' : 'BOT_DEACTIVATE';			$active_value = (!$row['bot_active']) ? 'activate' : 'deactivate';			$template->assign_block_vars('bots', array(				'BOT_NAME'		=> $row['bot_name'],				'BOT_ID'		=> $row['bot_id'],				'LAST_VISIT'	=> ($row['user_lastvisit']) ? $user->format_date($row['user_lastvisit']) : $user->lang['BOT_NEVER'],				'U_ACTIVATE_DEACTIVATE'	=> $this->u_action . "&amp;id={$row['bot_id']}&amp;action=$active_value",				'L_ACTIVATE_DEACTIVATE'	=> $user->lang[$active_lang],				'U_EDIT'				=> $this->u_action . "&amp;id={$row['bot_id']}&amp;action=edit",				'U_DELETE'				=> $this->u_action . "&amp;id={$row['bot_id']}&amp;action=delete")			);		}		$db->sql_freeresult($result);	}		/**	* Validate bot name against username table	*/	function validate_botname($newname, $oldname = false)	{		global $db;		if ($oldname && utf8_clean_string($newname) === $oldname)		{			return true;		}		// Admins might want to use names otherwise forbidden, thus we only check for duplicates.		$sql = 'SELECT username			FROM ' . USERS_TABLE . "			WHERE username_clean = '" . $db->sql_escape(utf8_clean_string($newname)) . "'";		$result = $db->sql_query($sql);		$row = $db->sql_fetchrow($result);		$db->sql_freeresult($result);				return ($row) ? false : true;	}}?>
<?php$GLOBALS['utf_canonical_decomp']=array(''=>'A',''=>'A',''=>'A',''=>'A',''=>'A',''=>'A',''=>'C',''=>'E',''=>'E',''=>'E',''=>'E',''=>'I',''=>'I',''=>'I',''=>'I',''=>'N',''=>'O',''=>'O',''=>'O',''=>'O',''=>'O',''=>'U',''=>'U',''=>'U',''=>'U',''=>'Y',''=>'a',''=>'a',''=>'a',''=>'a',''=>'a',''=>'a',''=>'c',''=>'e',''=>'e',''=>'e',''=>'e',''=>'i',''=>'i',''=>'i',''=>'i',''=>'n',''=>'o',''=>'o',''=>'o',''=>'o',''=>'o',''=>'u',''=>'u',''=>'u',''=>'u',''=>'y',''=>'y',''=>'A',''=>'a',''=>'A',''=>'a',''=>'A',''=>'a',''=>'C',''=>'c',''=>'C',''=>'c',''=>'C',''=>'c',''=>'C',''=>'c',''=>'D',''=>'d',''=>'E',''=>'e',''=>'E',''=>'e',''=>'E',''=>'e',''=>'E',''=>'e',''=>'E',''=>'e',''=>'G',''=>'g',''=>'G',''=>'g',''=>'G',''=>'g',''=>'G',''=>'g',''=>'H',''=>'h',''=>'I',''=>'i',''=>'I',''=>'i',''=>'I',''=>'i',''=>'I',''=>'i',''=>'I',''=>'J',''=>'j',''=>'K',''=>'k',''=>'L',''=>'l',''=>'L',''=>'l',''=>'L',''=>'l',''=>'N',''=>'n',''=>'N',''=>'n',''=>'N',''=>'n',''=>'O',''=>'o',''=>'O',''=>'o',''=>'O',''=>'o',''=>'R',''=>'r',''=>'R',''=>'r',''=>'R',''=>'r',''=>'S',''=>'s',''=>'S',''=>'s',''=>'S',''=>'s',''=>'S',''=>'s',''=>'T',''=>'t',''=>'T',''=>'t',''=>'U',''=>'u',''=>'U',''=>'u',''=>'U',''=>'u',''=>'U',''=>'u',''=>'U',''=>'u',''=>'U',''=>'u',''=>'W',''=>'w',''=>'Y',''=>'y',''=>'Y',''=>'Z',''=>'z',''=>'Z',''=>'z',''=>'Z',''=>'z',''=>'O',''=>'o',''=>'U',''=>'u',''=>'A',''=>'a',''=>'I',''=>'i',''=>'O',''=>'o',''=>'U',''=>'u',''=>'U',''=>'u',''=>'U',''=>'u',''=>'U',''=>'u',''=>'U',''=>'u',''=>'A',''=>'a',''=>'A',''=>'a',''=>'',''=>'',''=>'G',''=>'g',''=>'K',''=>'k',''=>'O',''=>'o',''=>'O',''=>'o',''=>'',''=>'',''=>'j',''=>'G',''=>'g',''=>'N',''=>'n',''=>'A',''=>'a',''=>'',''=>'',''=>'',''=>'',''=>'A',''=>'a',''=>'A',''=>'a',''=>'E',''=>'e',''=>'E',''=>'e',''=>'I',''=>'i',''=>'I',''=>'i',''=>'O',''=>'o',''=>'O',''=>'o',''=>'R',''=>'r',''=>'R',''=>'r',''=>'U',''=>'u',''=>'U',''=>'u',''=>'S',''=>'s',''=>'T',''=>'t',''=>'H',''=>'h',''=>'A',''=>'a',''=>'E',''=>'e',''=>'O',''=>'o',''=>'O',''=>'o',''=>'O',''=>'o',''=>'O',''=>'o',''=>'Y',''=>'y',''=>'',''=>'',''=>'',''=>'',''=>'',''=>';',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'A',''=>'a',''=>'B',''=>'b',''=>'B',''=>'b',''=>'B',''=>'b',''=>'C',''=>'c',''=>'D',''=>'d',''=>'D',''=>'d',''=>'D',''=>'d',''=>'D',''=>'d',''=>'D',''=>'d',''=>'E',''=>'e',''=>'E',''=>'e',''=>'E',''=>'e',''=>'E',''=>'e',''=>'E',''=>'e',''=>'F',''=>'f',''=>'G',''=>'g',''=>'H',''=>'h',''=>'H',''=>'h',''=>'H',''=>'h',''=>'H',''=>'h',''=>'H',''=>'h',''=>'I',''=>'i',''=>'I',''=>'i',''=>'K',''=>'k',''=>'K',''=>'k',''=>'K',''=>'k',''=>'L',''=>'l',''=>'L',''=>'l',''=>'L',''=>'l',''=>'L',''=>'l',''=>'M',''=>'m',''=>'M',''=>'m',''=>'M',''=>'m',''=>'N',''=>'n',''=>'N',''=>'n',''=>'N',''=>'n',''=>'N',''=>'n',''=>'O',''=>'o',''=>'O',''=>'o',''=>'O',''=>'o',''=>'O',''=>'o',''=>'P',''=>'p',''=>'P',''=>'p',''=>'R',''=>'r',''=>'R',''=>'r',''=>'R',''=>'r',''=>'R',''=>'r',''=>'S',''=>'s',''=>'S',''=>'s',''=>'S',''=>'s',''=>'S',''=>'s',''=>'S',''=>'s',''=>'T',''=>'t',''=>'T',''=>'t',''=>'T',''=>'t',''=>'T',''=>'t',''=>'U',''=>'u',''=>'U',''=>'u',''=>'U',''=>'u',''=>'U',''=>'u',''=>'U',''=>'u',''=>'V',''=>'v',''=>'V',''=>'v',''=>'W',''=>'w',''=>'W',''=>'w',''=>'W',''=>'w',''=>'W',''=>'w',''=>'W',''=>'w',''=>'X',''=>'x',''=>'X',''=>'x',''=>'Y',''=>'y',''=>'Z',''=>'z',''=>'Z',''=>'z',''=>'Z',''=>'z',''=>'h',''=>'t',''=>'w',''=>'y',''=>'',''=>'A',''=>'a',''=>'A',''=>'a',''=>'A',''=>'a',''=>'A',''=>'a',''=>'A',''=>'a',''=>'A',''=>'a',''=>'A',''=>'a',''=>'A',''=>'a',''=>'A',''=>'a',''=>'A',''=>'a',''=>'A',''=>'a',''=>'A',''=>'a',''=>'E',''=>'e',''=>'E',''=>'e',''=>'E',''=>'e',''=>'E',''=>'e',''=>'E',''=>'e',''=>'E',''=>'e',''=>'E',''=>'e',''=>'E',''=>'e',''=>'I',''=>'i',''=>'I',''=>'i',''=>'O',''=>'o',''=>'O',''=>'o',''=>'O',''=>'o',''=>'O',''=>'o',''=>'O',''=>'o',''=>'O',''=>'o',''=>'O',''=>'o',''=>'O',''=>'o',''=>'O',''=>'o',''=>'O',''=>'o',''=>'O',''=>'o',''=>'O',''=>'o',''=>'U',''=>'u',''=>'U',''=>'u',''=>'U',''=>'u',''=>'U',''=>'u',''=>'U',''=>'u',''=>'U',''=>'u',''=>'U',''=>'u',''=>'Y',''=>'y',''=>'Y',''=>'y',''=>'Y',''=>'y',''=>'Y',''=>'y',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'`',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'K',''=>'A',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'=',''=>'',''=>'',''=>'<',''=>'>',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'');
<?php return array(''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'1',''=>'2',''=>'3',''=>'4',''=>'5',''=>'6',''=>'7',''=>'8',''=>'9',''=>'10',''=>'20',''=>'30',''=>'40',''=>'50',''=>'60',''=>'70',''=>'80',''=>'90',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'0',''=>'1',''=>'2',''=>'3',''=>'4',''=>'5',''=>'6',''=>'7',''=>'8',''=>'9',''=>'0',''=>'1',''=>'2',''=>'3',''=>'4',''=>'5',''=>'6',''=>'7',''=>'8',''=>'9',''=>'0',''=>'1',''=>'2',''=>'3',''=>'4',''=>'5',''=>'6',''=>'7',''=>'8',''=>'9',''=>'0',''=>'1',''=>'2',''=>'3',''=>'4',''=>'5',''=>'6',''=>'7',''=>'8',''=>'9',''=>'0',''=>'1',''=>'2',''=>'3',''=>'4',''=>'5',''=>'6',''=>'7',''=>'8',''=>'9');
<?php/**** acp_ban [English]** @package language* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** DO NOT CHANGE*/if (!defined('IN_PHPBB')){	exit;}if (empty($lang) || !is_array($lang)){	$lang = array();}// DEVELOPERS PLEASE NOTE//// All language files should use UTF-8 as their encoding and the files must not contain a BOM.//// Placeholders can now contain order information, e.g. instead of// 'Page %s of %s' you can (and should) write 'Page %1$s of %2$s', this allows// translators to re-order the output of data while ensuring it remains correct//// You do not need this where single placeholders are used, e.g. 'Message %d' is fine// equally where a string contains only two placeholders which are used to wrap text// in a url you again do not need to specify an order e.g., 'Click %sHERE%s' is fine// Banning$lang = array_merge($lang, array(	'1_HOUR'		=> '1 hour',	'30_MINS'		=> '30 minutes',	'6_HOURS'		=> '6 hours',	'ACP_BAN_EXPLAIN'	=> 'Here you can control the banning of users by name, IP or e-mail address. These methods prevent a user reaching any part of the board. You can give a short (maximum 3000 characters) reason for the ban if you wish. This will be displayed in the admin log. The duration of a ban can also be specified. If you want the ban to end on a specific date rather than after a set time period select <span style="text-decoration: underline;">Until -&gt;</span> for the ban length and enter a date in <kbd>YYYY-MM-DD</kbd> format.',	'BAN_EXCLUDE'			=> 'Exclude from banning',	'BAN_LENGTH'			=> 'Length of ban',	'BAN_REASON'			=> 'Reason for ban',	'BAN_GIVE_REASON'		=> 'Reason shown to the banned',	'BAN_UPDATE_SUCCESSFUL'	=> 'The banlist has been updated successfully.',	'BANNED_UNTIL_DATE'		=> 'until %s', // Example: "until Mon 13.Jul.2009, 14:44"	'BANNED_UNTIL_DURATION'	=> '%1$s (until %2$s)', // Example: "7 days (until Tue 14.Jul.2009, 14:44)"	'EMAIL_BAN'					=> 'Ban one or more e-mail addresses',	'EMAIL_BAN_EXCLUDE_EXPLAIN'	=> 'Enable this to exclude the entered e-mail address from all current bans.',	'EMAIL_BAN_EXPLAIN'			=> 'To specify more than one e-mail address enter each on a new line. To match partial addresses use * as the wildcard, e.g. <samp>*@hotmail.com</samp>, <samp>*@*.domain.tld</samp>, etc.',	'EMAIL_NO_BANNED'			=> 'No banned e-mail addresses',	'EMAIL_UNBAN'				=> 'Un-ban or un-exclude e-mails',	'EMAIL_UNBAN_EXPLAIN'		=> 'You can unban (or un-exclude) multiple e-mail addresses in one go using the appropriate combination of mouse and keyboard for your computer and browser. Excluded e-mail addresses are emphasised.',	'IP_BAN'					=> 'Ban one or more IPs',	'IP_BAN_EXCLUDE_EXPLAIN'	=> 'Enable this to exclude the entered IP from all current bans.',	'IP_BAN_EXPLAIN'			=> 'To specify several different IPs or hostnames enter each on a new line. To specify a range of IP addresses separate the start and end with a hyphen (-), to specify a wildcard use *.',	'IP_HOSTNAME'				=> 'IP addresses or hostnames',	'IP_NO_BANNED'				=> 'No banned IP addresses',	'IP_UNBAN'					=> 'Un-ban or un-exclude IPs',	'IP_UNBAN_EXPLAIN'			=> 'You can unban (or un-exclude) multiple IP addresses in one go using the appropriate combination of mouse and keyboard for your computer and browser. Excluded IPs are emphasised.',	'LENGTH_BAN_INVALID'		=> 'The date has to be formatted <kbd>YYYY-MM-DD</kbd>.',	'OPTIONS_BANNED'			=> 'Banned',	'OPTIONS_EXCLUDED'			=> 'Excluded',	'PERMANENT'		=> 'Permanent',	'UNTIL'						=> 'Until',	'USER_BAN'					=> 'Ban one or more usernames',	'USER_BAN_EXCLUDE_EXPLAIN'	=> 'Enable this to exclude the entered users from all current bans.',	'USER_BAN_EXPLAIN'			=> 'You can ban multiple users in one go by entering each name on a new line. Use the <span style="text-decoration: underline;">Find a member</span> facility to look up and add one or more users automatically.',	'USER_NO_BANNED'			=> 'No banned usernames',	'USER_UNBAN'				=> 'Un-ban or un-exclude usernames',	'USER_UNBAN_EXPLAIN'		=> 'You can unban (or un-exclude) multiple users in one go using the appropriate combination of mouse and keyboard for your computer and browser. Excluded users are emphasised.',));?>
<?php/*** Corrects avatar filenames to match the new avatar delivery method.** You should make a backup from your users table and the avatar directory in case something goes wrong*/die("Please read the first lines of this script for instructions on how to enable it");set_time_limit(0);define('IN_PHPBB', true);$phpbb_root_path = './../';$phpEx = substr(strrchr(__FILE__, '.'), 1);include($phpbb_root_path . 'common.'.$phpEx);// Start session management$user->session_begin();$auth->acl($user->data);$user->setup();$echos = 0; if (!isset($config['avatar_salt'])){	$cache->purge();	if (!isset($config['avatar_salt']))	{		die('database not up to date');	}	die('database not up to date');}// let's start with the users using a group_avatar.$sql = 'SELECT group_id, group_avatar	FROM ' . GROUPS_TABLE . '	WHERE group_avatar_type = ' . AVATAR_UPLOAD;// We'll skip these, so remember them$group_avatars = array();echo '<br /> Updating groups' . "\n";$result = $db->sql_query($sql);while ($row = $db->sql_fetchrow($result)){	$new_avatar_name = adjust_avatar($row['group_avatar'], 'g' . $row['group_id']);	$group_avatars[] = $new_avatar_name;		// failure is probably due to the avatar name already being adjusted	if ($new_avatar_name !== false)	{		$sql = 'UPDATE ' . USERS_TABLE . "			SET user_avatar = '" . $db->sql_escape($new_avatar_name) . "'			WHERE user_avatar = '" . $db->sql_escape($row['group_avatar']) . "' 			AND user_avatar_type = " . AVATAR_UPLOAD;		$db->sql_query($sql);				$sql = 'UPDATE ' . GROUPS_TABLE . "			SET group_avatar = '" . $db->sql_escape($new_avatar_name) . "'			WHERE group_id = {$row['group_id']}";		$db->sql_query($sql);	}	else	{		echo '<br /> Failed updating group ' . $row['group_id'] . "\n";	}	if ($echos > 200)	{		echo '<br />' . "\n";		$echos = 0;	}	echo '.';	$echos++;	flush();}$db->sql_freeresult($result);$sql = 'SELECT user_id, username, user_avatar, user_avatar_type	FROM ' . USERS_TABLE . ' 	WHERE user_avatar_type = ' . AVATAR_UPLOAD . ' 	AND ' . $db->sql_in_set('user_avatar', $group_avatars, true, true);$result = $db->sql_query($sql);echo '<br /> Updating users' . "\n";while ($row = $db->sql_fetchrow($result)){	$new_avatar_name = adjust_avatar($row['user_avatar'], $row['user_id']);	// failure is probably due to the avatar name already being adjusted	if ($new_avatar_name !== false)	{		$sql = 'UPDATE ' . USERS_TABLE . "			SET user_avatar = '" . $db->sql_escape($new_avatar_name) . "'			WHERE user_id = {$row['user_id']}";		$db->sql_query($sql);	}	else	{		// nuke this avatar		$sql = 'UPDATE ' . USERS_TABLE . "			SET user_avatar = '', user_avatar_type = 0			WHERE user_id = {$row['user_id']}";		$db->sql_query($sql);		echo '<br /> Failed updating user ' . $row['user_id'] . "\n";	}		if ($echos > 200)	{		echo '<br />' . "\n";		$echos = 0;	}	echo '.';	$echos++;	flush();}$db->sql_freeresult($result);echo 'FINISHED';// Done$db->sql_close();function adjust_avatar($old_name, $midfix){	global $config, $phpbb_root_path;		$avatar_path = $phpbb_root_path . $config['avatar_path'];	$extension = strtolower(substr(strrchr($old_name, '.'), 1));	$new_name = $config['avatar_salt'] . '_' . $midfix . '.' . $extension;	if (@file_exists($avatar_path . '/' . $old_name) && @is_writable($avatar_path . '/' . $old_name) && @is_writable($avatar_path . '/' . $new_name))	{		@rename($avatar_path . '/' . $old_name, $avatar_path . '/' . $new_name);		return $midfix . '.' . $extension;	}	return false;}?>
<?php/*** Adjust username_clean column.** You should make a backup from your users table in case something goes wrong*/die("Please read the first lines of this script for instructions on how to enable it");set_time_limit(0);define('IN_PHPBB', true);$phpbb_root_path = './../';$phpEx = substr(strrchr(__FILE__, '.'), 1);include($phpbb_root_path . 'common.'.$phpEx);// Start session management$user->session_begin();$auth->acl($user->data);$user->setup();$echos = 0;$sql = 'SELECT user_id, username	FROM ' . USERS_TABLE;$result = $db->sql_query($sql);while ($row = $db->sql_fetchrow($result)){	$sql = 'UPDATE ' . USERS_TABLE . "		SET username_clean = '" . $db->sql_escape(utf8_clean_string($row['username'])) . "'		WHERE user_id = " . $row['user_id'];	$db->sql_query($sql);	if ($echos > 200)	{		echo '<br />' . "\n";		$echos = 0;	}	echo '.';	$echos++;	flush();}$db->sql_freeresult($result);echo 'FINISHED';// Done$db->sql_close();?>
<?php/**** @package acp* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @ignore*/if (!defined('IN_PHPBB')){	exit;}/*** @package acp*/class acp_disallow{	var $u_action;	function main($id, $mode)	{		global $db, $user, $auth, $template, $cache;		global $config, $phpbb_root_path, $phpbb_admin_path, $phpEx;		include($phpbb_root_path . 'includes/functions_user.' . $phpEx);		$user->add_lang('acp/posting');		// Set up general vars		$this->tpl_name = 'acp_disallow';		$this->page_title = 'ACP_DISALLOW_USERNAMES';		$form_key = 'acp_disallow';		add_form_key($form_key);		$disallow = (isset($_POST['disallow'])) ? true : false;		$allow = (isset($_POST['allow'])) ? true : false;		if (($allow || $disallow) && !check_form_key($form_key))		{			trigger_error($user->lang['FORM_INVALID'] . adm_back_link($this->u_action), E_USER_WARNING);		}		if ($disallow)		{			$disallowed_user = str_replace('*', '%', utf8_normalize_nfc(request_var('disallowed_user', '', true)));			if (!$disallowed_user)			{				trigger_error($user->lang['NO_USERNAME_SPECIFIED'] . adm_back_link($this->u_action), E_USER_WARNING);			}			$sql = 'SELECT disallow_id				FROM ' . DISALLOW_TABLE . "				WHERE disallow_username = '" . $db->sql_escape($disallowed_user) . "'";			$result = $db->sql_query($sql);			$row = $db->sql_fetchrow($result);			$db->sql_freeresult($result);			if ($row)			{				trigger_error($user->lang['DISALLOWED_ALREADY'] . adm_back_link($this->u_action), E_USER_WARNING);			}			$sql = 'INSERT INTO ' . DISALLOW_TABLE . ' ' . $db->sql_build_array('INSERT', array('disallow_username' => $disallowed_user));			$db->sql_query($sql);			$cache->destroy('_disallowed_usernames');			$message = $user->lang['DISALLOW_SUCCESSFUL'];			add_log('admin', 'LOG_DISALLOW_ADD', str_replace('%', '*', $disallowed_user));			trigger_error($message . adm_back_link($this->u_action));		}		else if ($allow)		{			$disallowed_id = request_var('disallowed_id', 0);			if (!$disallowed_id)			{				trigger_error($user->lang['NO_USERNAME_SPECIFIED'] . adm_back_link($this->u_action), E_USER_WARNING);			}			$sql = 'DELETE FROM ' . DISALLOW_TABLE . '				WHERE disallow_id = ' . $disallowed_id;			$db->sql_query($sql);			$cache->destroy('_disallowed_usernames');			add_log('admin', 'LOG_DISALLOW_DELETE');			trigger_error($user->lang['DISALLOWED_DELETED'] . adm_back_link($this->u_action));		}		// Grab the current list of disallowed usernames...		$sql = 'SELECT *			FROM ' . DISALLOW_TABLE;		$result = $db->sql_query($sql);		$disallow_select = '';		while ($row = $db->sql_fetchrow($result))		{			$disallow_select .= '<option value="' . $row['disallow_id'] . '">' . str_replace('%', '*', $row['disallow_username']) . '</option>';		}		$db->sql_freeresult($result);		$template->assign_vars(array(			'U_ACTION'				=> $this->u_action,			'S_DISALLOWED_NAMES'	=> $disallow_select)		);	}}?>
<?php return array(''=>'0',''=>'',''=>'4',''=>'5',''=>'6',''=>'7',''=>'8',''=>'9',''=>'',''=>'0',''=>'1',''=>'2',''=>'3',''=>'4',''=>'5',''=>'6',''=>'7',''=>'8',''=>'9',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'k',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'1/3',''=>'2/3',''=>'1/5',''=>'2/5',''=>'3/5',''=>'4/5',''=>'1/6',''=>'5/6',''=>'1/8',''=>'3/8',''=>'5/8',''=>'7/8',''=>'1',''=>'1',''=>'2',''=>'3',''=>'4',''=>'5',''=>'6',''=>'7',''=>'8',''=>'9',''=>'10',''=>'11',''=>'12',''=>'50',''=>'100',''=>'500',''=>'1000',''=>'1',''=>'2',''=>'3',''=>'4',''=>'5',''=>'6',''=>'7',''=>'8',''=>'9',''=>'10',''=>'11',''=>'12',''=>'50',''=>'100',''=>'500',''=>'1000',''=>'1000',''=>'5000',''=>'10000',''=>'',''=>'',''=>'1',''=>'2',''=>'3',''=>'4',''=>'5',''=>'6',''=>'7',''=>'8',''=>'9',''=>'10',''=>'11',''=>'12',''=>'13',''=>'14',''=>'15',''=>'16',''=>'17',''=>'18',''=>'19',''=>'20',''=>'1',''=>'2',''=>'3',''=>'4',''=>'5',''=>'6',''=>'7',''=>'8',''=>'9',''=>'10',''=>'11',''=>'12',''=>'13',''=>'14',''=>'15',''=>'16',''=>'17',''=>'18',''=>'19',''=>'20',''=>'1',''=>'2',''=>'3',''=>'4',''=>'5',''=>'6',''=>'7',''=>'8',''=>'9',''=>'10',''=>'11',''=>'12',''=>'13',''=>'14',''=>'15',''=>'16',''=>'17',''=>'18',''=>'19',''=>'20',''=>'0',''=>'11',''=>'12',''=>'13',''=>'14',''=>'15',''=>'16',''=>'17',''=>'18',''=>'19',''=>'20',''=>'1',''=>'2',''=>'3',''=>'4',''=>'5',''=>'6',''=>'7',''=>'8',''=>'9',''=>'10',''=>'0',''=>'1',''=>'2',''=>'3',''=>'4',''=>'5',''=>'6',''=>'7',''=>'8',''=>'9',''=>'10',''=>'1',''=>'2',''=>'3',''=>'4',''=>'5',''=>'6',''=>'7',''=>'8',''=>'9',''=>'10',''=>'1',''=>'2',''=>'3',''=>'4',''=>'5',''=>'6',''=>'7',''=>'8',''=>'9',''=>'10');
<?php/**** LDAP auth plug-in for phpBB3** Authentication plug-ins is largely down to Sergey Kanareykin, our thanks to him.** @package login* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @ignore*/if (!defined('IN_PHPBB')){	exit;}/*** Connect to ldap server* Only allow changing authentication to ldap if we can connect to the ldap server* Called in acp_board while setting authentication plugins*/function init_ldap(){	global $config, $user;	if (!@extension_loaded('ldap'))	{		return $user->lang['LDAP_NO_LDAP_EXTENSION'];	}	$config['ldap_port'] = (int) $config['ldap_port'];	if ($config['ldap_port'])	{		$ldap = @ldap_connect($config['ldap_server'], $config['ldap_port']);	}	else	{		$ldap = @ldap_connect($config['ldap_server']);	}	if (!$ldap)	{		return $user->lang['LDAP_NO_SERVER_CONNECTION'];	}	@ldap_set_option($ldap, LDAP_OPT_PROTOCOL_VERSION, 3);	@ldap_set_option($ldap, LDAP_OPT_REFERRALS, 0);	if ($config['ldap_user'] || $config['ldap_password'])	{		if (!@ldap_bind($ldap, htmlspecialchars_decode($config['ldap_user']), htmlspecialchars_decode($config['ldap_password'])))		{			return $user->lang['LDAP_INCORRECT_USER_PASSWORD'];		}	}	// ldap_connect only checks whether the specified server is valid, so the connection might still fail	$search = @ldap_search(		$ldap,		htmlspecialchars_decode($config['ldap_base_dn']),		ldap_user_filter($user->data['username']),		(empty($config['ldap_email'])) ?			array(htmlspecialchars_decode($config['ldap_uid'])) :			array(htmlspecialchars_decode($config['ldap_uid']), htmlspecialchars_decode($config['ldap_email'])),		0,		1	);	if ($search === false)	{		return $user->lang['LDAP_SEARCH_FAILED'];	}	$result = @ldap_get_entries($ldap, $search);	@ldap_close($ldap);	if (!is_array($result) || sizeof($result) < 2)	{		return sprintf($user->lang['LDAP_NO_IDENTITY'], $user->data['username']);	}	if (!empty($config['ldap_email']) && !isset($result[0][htmlspecialchars_decode($config['ldap_email'])]))	{		return $user->lang['LDAP_NO_EMAIL'];	}	return false;}/*** Login function*/function login_ldap(&$username, &$password){	global $db, $config, $user;	// do not allow empty password	if (!$password)	{		return array(			'status'	=> LOGIN_ERROR_PASSWORD,			'error_msg'	=> 'NO_PASSWORD_SUPPLIED',			'user_row'	=> array('user_id' => ANONYMOUS),		);	}	if (!$username)	{		return array(			'status'	=> LOGIN_ERROR_USERNAME,			'error_msg'	=> 'LOGIN_ERROR_USERNAME',			'user_row'	=> array('user_id' => ANONYMOUS),		);	}	if (!@extension_loaded('ldap'))	{		return array(			'status'		=> LOGIN_ERROR_EXTERNAL_AUTH,			'error_msg'		=> 'LDAP_NO_LDAP_EXTENSION',			'user_row'		=> array('user_id' => ANONYMOUS),		);	}	$config['ldap_port'] = (int) $config['ldap_port'];	if ($config['ldap_port'])	{		$ldap = @ldap_connect($config['ldap_server'], $config['ldap_port']);	}	else	{		$ldap = @ldap_connect($config['ldap_server']);	}	if (!$ldap)	{		return array(			'status'		=> LOGIN_ERROR_EXTERNAL_AUTH,			'error_msg'		=> 'LDAP_NO_SERVER_CONNECTION',			'user_row'		=> array('user_id' => ANONYMOUS),		);	}	@ldap_set_option($ldap, LDAP_OPT_PROTOCOL_VERSION, 3);	@ldap_set_option($ldap, LDAP_OPT_REFERRALS, 0);	if ($config['ldap_user'] || $config['ldap_password'])	{		if (!@ldap_bind($ldap, htmlspecialchars_decode($config['ldap_user']), htmlspecialchars_decode($config['ldap_password'])))		{			return $user->lang['LDAP_NO_SERVER_CONNECTION'];		}	}	$search = @ldap_search(		$ldap,		htmlspecialchars_decode($config['ldap_base_dn']),		ldap_user_filter($username),		(empty($config['ldap_email'])) ?			array(htmlspecialchars_decode($config['ldap_uid'])) :			array(htmlspecialchars_decode($config['ldap_uid']), htmlspecialchars_decode($config['ldap_email'])),		0,		1	);	$ldap_result = @ldap_get_entries($ldap, $search);	if (is_array($ldap_result) && sizeof($ldap_result) > 1)	{		if (@ldap_bind($ldap, $ldap_result[0]['dn'], htmlspecialchars_decode($password)))		{			@ldap_close($ldap);			$sql ='SELECT user_id, username, user_password, user_passchg, user_email, user_type				FROM ' . USERS_TABLE . "				WHERE username_clean = '" . $db->sql_escape(utf8_clean_string($username)) . "'";			$result = $db->sql_query($sql);			$row = $db->sql_fetchrow($result);			$db->sql_freeresult($result);			if ($row)			{				unset($ldap_result);				// User inactive...				if ($row['user_type'] == USER_INACTIVE || $row['user_type'] == USER_IGNORE)				{					return array(						'status'		=> LOGIN_ERROR_ACTIVE,						'error_msg'		=> 'ACTIVE_ERROR',						'user_row'		=> $row,					);				}				// Successful login... set user_login_attempts to zero...				return array(					'status'		=> LOGIN_SUCCESS,					'error_msg'		=> false,					'user_row'		=> $row,				);			}			else			{				// retrieve default group id				$sql = 'SELECT group_id					FROM ' . GROUPS_TABLE . "					WHERE group_name = '" . $db->sql_escape('REGISTERED') . "'						AND group_type = " . GROUP_SPECIAL;				$result = $db->sql_query($sql);				$row = $db->sql_fetchrow($result);				$db->sql_freeresult($result);				if (!$row)				{					trigger_error('NO_GROUP');				}				// generate user account data				$ldap_user_row = array(					'username'		=> $username,					'user_password'	=> phpbb_hash($password),					'user_email'	=> (!empty($config['ldap_email'])) ? utf8_htmlspecialchars($ldap_result[0][htmlspecialchars_decode($config['ldap_email'])][0]) : '',					'group_id'		=> (int) $row['group_id'],					'user_type'		=> USER_NORMAL,					'user_ip'		=> $user->ip,					'user_new'		=> ($config['new_member_post_limit']) ? 1 : 0,				);				unset($ldap_result);				// this is the user's first login so create an empty profile				return array(					'status'		=> LOGIN_SUCCESS_CREATE_PROFILE,					'error_msg'		=> false,					'user_row'		=> $ldap_user_row,				);			}		}		else		{			unset($ldap_result);			@ldap_close($ldap);			// Give status about wrong password...			return array(				'status'		=> LOGIN_ERROR_PASSWORD,				'error_msg'		=> 'LOGIN_ERROR_PASSWORD',				'user_row'		=> array('user_id' => ANONYMOUS),			);		}	}	@ldap_close($ldap);	return array(		'status'	=> LOGIN_ERROR_USERNAME,		'error_msg'	=> 'LOGIN_ERROR_USERNAME',		'user_row'	=> array('user_id' => ANONYMOUS),	);}/*** Generates a filter string for ldap_search to find a user** @param	$username	string	Username identifying the searched user** @return				string	A filter string for ldap_search*/function ldap_user_filter($username){	global $config;	$filter = '(' . $config['ldap_uid'] . '=' . ldap_escape(htmlspecialchars_decode($username)) . ')';	if ($config['ldap_user_filter'])	{		$_filter = ($config['ldap_user_filter'][0] == '(' && substr($config['ldap_user_filter'], -1) == ')') ? $config['ldap_user_filter'] : "({$config['ldap_user_filter']})";		$filter = "(&{$filter}{$_filter})";	}	return $filter;}/*** Escapes an LDAP AttributeValue*/function ldap_escape($string){	return str_replace(array('*', '\\', '(', ')'), array('\\*', '\\\\', '\\(', '\\)'), $string);}/*** This function is used to output any required fields in the authentication* admin panel. It also defines any required configuration table fields.*/function acp_ldap(&$new){	global $user;	$tpl = '	<dl>		<dt><label for="ldap_server">' . $user->lang['LDAP_SERVER'] . ':</label><br /><span>' . $user->lang['LDAP_SERVER_EXPLAIN'] . '</span></dt>		<dd><input type="text" id="ldap_server" size="40" name="config[ldap_server]" value="' . $new['ldap_server'] . '" /></dd>	</dl>	<dl>		<dt><label for="ldap_port">' . $user->lang['LDAP_PORT'] . ':</label><br /><span>' . $user->lang['LDAP_PORT_EXPLAIN'] . '</span></dt>		<dd><input type="text" id="ldap_port" size="40" name="config[ldap_port]" value="' . $new['ldap_port'] . '" /></dd>	</dl>	<dl>		<dt><label for="ldap_dn">' . $user->lang['LDAP_DN'] . ':</label><br /><span>' . $user->lang['LDAP_DN_EXPLAIN'] . '</span></dt>		<dd><input type="text" id="ldap_dn" size="40" name="config[ldap_base_dn]" value="' . $new['ldap_base_dn'] . '" /></dd>	</dl>	<dl>		<dt><label for="ldap_uid">' . $user->lang['LDAP_UID'] . ':</label><br /><span>' . $user->lang['LDAP_UID_EXPLAIN'] . '</span></dt>		<dd><input type="text" id="ldap_uid" size="40" name="config[ldap_uid]" value="' . $new['ldap_uid'] . '" /></dd>	</dl>	<dl>		<dt><label for="ldap_user_filter">' . $user->lang['LDAP_USER_FILTER'] . ':</label><br /><span>' . $user->lang['LDAP_USER_FILTER_EXPLAIN'] . '</span></dt>		<dd><input type="text" id="ldap_user_filter" size="40" name="config[ldap_user_filter]" value="' . $new['ldap_user_filter'] . '" /></dd>	</dl>	<dl>		<dt><label for="ldap_email">' . $user->lang['LDAP_EMAIL'] . ':</label><br /><span>' . $user->lang['LDAP_EMAIL_EXPLAIN'] . '</span></dt>		<dd><input type="text" id="ldap_email" size="40" name="config[ldap_email]" value="' . $new['ldap_email'] . '" /></dd>	</dl>	<dl>		<dt><label for="ldap_user">' . $user->lang['LDAP_USER'] . ':</label><br /><span>' . $user->lang['LDAP_USER_EXPLAIN'] . '</span></dt>		<dd><input type="text" id="ldap_user" size="40" name="config[ldap_user]" value="' . $new['ldap_user'] . '" /></dd>	</dl>	<dl>		<dt><label for="ldap_password">' . $user->lang['LDAP_PASSWORD'] . ':</label><br /><span>' . $user->lang['LDAP_PASSWORD_EXPLAIN'] . '</span></dt>		<dd><input type="password" id="ldap_password" size="40" name="config[ldap_password]" value="' . $new['ldap_password'] . '" autocomplete="off" /></dd>	</dl>	';	// These are fields required in the config table	return array(		'tpl'		=> $tpl,		'config'	=> array('ldap_server', 'ldap_port', 'ldap_base_dn', 'ldap_uid', 'ldap_user_filter', 'ldap_email', 'ldap_user', 'ldap_password')	);}?>
<?php/**** @package ucp* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @ignore*/if (!defined('IN_PHPBB')){	exit;}/*** ucp_profile* Changing profile settings** @todo what about pertaining user_sig_options?* @package ucp*/class ucp_profile{	var $u_action;	function main($id, $mode)	{		global $config, $db, $user, $auth, $template, $phpbb_root_path, $phpEx;		$user->add_lang('posting');		$preview	= (!empty($_POST['preview'])) ? true : false;		$submit		= (!empty($_POST['submit'])) ? true : false;		$delete		= (!empty($_POST['delete'])) ? true : false;		$error = $data = array();		$s_hidden_fields = '';		switch ($mode)		{			case 'reg_details':				$data = array(					'username'			=> utf8_normalize_nfc(request_var('username', $user->data['username'], true)),					'email'				=> strtolower(request_var('email', $user->data['user_email'])),					'email_confirm'		=> strtolower(request_var('email_confirm', '')),					'new_password'		=> request_var('new_password', '', true),					'cur_password'		=> request_var('cur_password', '', true),					'password_confirm'	=> request_var('password_confirm', '', true),				);				add_form_key('ucp_reg_details');				if ($submit)				{					// Do not check cur_password, it is the old one.					$check_ary = array(						'new_password'		=> array(							array('string', true, $config['min_pass_chars'], $config['max_pass_chars']),							array('password')),						'password_confirm'	=> array('string', true, $config['min_pass_chars'], $config['max_pass_chars']),						'email'				=> array(							array('string', false, 6, 60),							array('email')),						'email_confirm'		=> array('string', true, 6, 60),					);					if ($auth->acl_get('u_chgname') && $config['allow_namechange'])					{						$check_ary['username'] = array(							array('string', false, $config['min_name_chars'], $config['max_name_chars']),							array('username'),						);					}					$error = validate_data($data, $check_ary);					if ($auth->acl_get('u_chgemail') && $data['email'] != $user->data['user_email'] && $data['email_confirm'] != $data['email'])					{						$error[] = ($data['email_confirm']) ? 'NEW_EMAIL_ERROR' : 'NEW_EMAIL_CONFIRM_EMPTY';					}					if ($auth->acl_get('u_chgpasswd') && $data['new_password'] && $data['password_confirm'] != $data['new_password'])					{						$error[] = ($data['password_confirm']) ? 'NEW_PASSWORD_ERROR' : 'NEW_PASSWORD_CONFIRM_EMPTY';					}					// Only check the new password against the previous password if there have been no errors					if (!sizeof($error) && $auth->acl_get('u_chgpasswd') && $data['new_password'] && phpbb_check_hash($data['new_password'], $user->data['user_password']))					{						$error[] = 'SAME_PASSWORD_ERROR';					}					if (!phpbb_check_hash($data['cur_password'], $user->data['user_password']))					{						$error[] = ($data['cur_password']) ? 'CUR_PASSWORD_ERROR' : 'CUR_PASSWORD_EMPTY';					}					if (!check_form_key('ucp_reg_details'))					{						$error[] = 'FORM_INVALID';					}					if (!sizeof($error))					{						$sql_ary = array(							'username'			=> ($auth->acl_get('u_chgname') && $config['allow_namechange']) ? $data['username'] : $user->data['username'],							'username_clean'	=> ($auth->acl_get('u_chgname') && $config['allow_namechange']) ? utf8_clean_string($data['username']) : $user->data['username_clean'],							'user_email'		=> ($auth->acl_get('u_chgemail')) ? $data['email'] : $user->data['user_email'],							'user_email_hash'	=> ($auth->acl_get('u_chgemail')) ? phpbb_email_hash($data['email']) : $user->data['user_email_hash'],							'user_password'		=> ($auth->acl_get('u_chgpasswd') && $data['new_password']) ? phpbb_hash($data['new_password']) : $user->data['user_password'],							'user_passchg'		=> ($auth->acl_get('u_chgpasswd') && $data['new_password']) ? time() : 0,						);						if ($auth->acl_get('u_chgname') && $config['allow_namechange'] && $data['username'] != $user->data['username'])						{							add_log('user', $user->data['user_id'], 'LOG_USER_UPDATE_NAME', $user->data['username'], $data['username']);						}						if ($auth->acl_get('u_chgpasswd') && $data['new_password'] && !phpbb_check_hash($data['new_password'], $user->data['user_password']))						{							$user->reset_login_keys();							add_log('user', $user->data['user_id'], 'LOG_USER_NEW_PASSWORD', $data['username']);						}						if ($auth->acl_get('u_chgemail') && $data['email'] != $user->data['user_email'])						{							add_log('user', $user->data['user_id'], 'LOG_USER_UPDATE_EMAIL', $data['username'], $user->data['user_email'], $data['email']);						}						$message = 'PROFILE_UPDATED';						if ($auth->acl_get('u_chgemail') && $config['email_enable'] && $data['email'] != $user->data['user_email'] && $user->data['user_type'] != USER_FOUNDER && ($config['require_activation'] == USER_ACTIVATION_SELF || $config['require_activation'] == USER_ACTIVATION_ADMIN))						{							$message = ($config['require_activation'] == USER_ACTIVATION_SELF) ? 'ACCOUNT_EMAIL_CHANGED' : 'ACCOUNT_EMAIL_CHANGED_ADMIN';							include_once($phpbb_root_path . 'includes/functions_messenger.' . $phpEx);							$server_url = generate_board_url();							$user_actkey = gen_rand_string(mt_rand(6, 10));							$messenger = new messenger(false);							$template_file = ($config['require_activation'] == USER_ACTIVATION_ADMIN) ? 'user_activate_inactive' : 'user_activate';							$messenger->template($template_file, $user->data['user_lang']);							$messenger->to($data['email'], $data['username']);							$messenger->anti_abuse_headers($config, $user);							$messenger->assign_vars(array(								'USERNAME'		=> htmlspecialchars_decode($data['username']),								'U_ACTIVATE'	=> "$server_url/ucp.$phpEx?mode=activate&u={$user->data['user_id']}&k=$user_actkey")							);							$messenger->send(NOTIFY_EMAIL);							if ($config['require_activation'] == USER_ACTIVATION_ADMIN)							{								// Grab an array of user_id's with a_user permissions ... these users can activate a user								$admin_ary = $auth->acl_get_list(false, 'a_user', false);								$admin_ary = (!empty($admin_ary[0]['a_user'])) ? $admin_ary[0]['a_user'] : array();								// Also include founders								$where_sql = ' WHERE user_type = ' . USER_FOUNDER;								if (sizeof($admin_ary))								{									$where_sql .= ' OR ' . $db->sql_in_set('user_id', $admin_ary);								}								$sql = 'SELECT user_id, username, user_email, user_lang, user_jabber, user_notify_type									FROM ' . USERS_TABLE . ' ' .									$where_sql;								$result = $db->sql_query($sql);								while ($row = $db->sql_fetchrow($result))								{									$messenger->template('admin_activate', $row['user_lang']);									$messenger->to($row['user_email'], $row['username']);									$messenger->im($row['user_jabber'], $row['username']);									$messenger->assign_vars(array(										'USERNAME'			=> htmlspecialchars_decode($data['username']),										'U_USER_DETAILS'	=> "$server_url/memberlist.$phpEx?mode=viewprofile&u={$user->data['user_id']}",										'U_ACTIVATE'		=> "$server_url/ucp.$phpEx?mode=activate&u={$user->data['user_id']}&k=$user_actkey")									);									$messenger->send($row['user_notify_type']);								}								$db->sql_freeresult($result);							}							user_active_flip('deactivate', $user->data['user_id'], INACTIVE_PROFILE);							// Because we want the profile to be reactivated we set user_newpasswd to empty (else the reactivation will fail)							$sql_ary['user_actkey'] = $user_actkey;							$sql_ary['user_newpasswd'] = '';						}						if (sizeof($sql_ary))						{							$sql = 'UPDATE ' . USERS_TABLE . '								SET ' . $db->sql_build_array('UPDATE', $sql_ary) . '								WHERE user_id = ' . $user->data['user_id'];							$db->sql_query($sql);						}						// Need to update config, forum, topic, posting, messages, etc.						if ($data['username'] != $user->data['username'] && $auth->acl_get('u_chgname') && $config['allow_namechange'])						{							user_update_name($user->data['username'], $data['username']);						}						// Now, we can remove the user completely (kill the session) - NOT BEFORE!!!						if (!empty($sql_ary['user_actkey']))						{							meta_refresh(5, append_sid($phpbb_root_path . 'index.' . $phpEx));							$message = $user->lang[$message] . '<br /><br />' . sprintf($user->lang['RETURN_INDEX'], '<a href="' . append_sid($phpbb_root_path . 'index.' . $phpEx) . '">', '</a>');							// Because the user gets deactivated we log him out too, killing his session							$user->session_kill();						}						else						{							meta_refresh(3, $this->u_action);							$message = $user->lang[$message] . '<br /><br />' . sprintf($user->lang['RETURN_UCP'], '<a href="' . $this->u_action . '">', '</a>');						}						trigger_error($message);					}					// Replace "error" strings with their real, localised form					$error = preg_replace('#^([A-Z_]+)$#e', "(!empty(\$user->lang['\\1'])) ? \$user->lang['\\1'] : '\\1'", $error);				}				$template->assign_vars(array(					'ERROR'				=> (sizeof($error)) ? implode('<br />', $error) : '',					'USERNAME'			=> $data['username'],					'EMAIL'				=> $data['email'],					'PASSWORD_CONFIRM'	=> $data['password_confirm'],					'NEW_PASSWORD'		=> $data['new_password'],					'CUR_PASSWORD'		=> '',					'L_USERNAME_EXPLAIN'		=> sprintf($user->lang[$config['allow_name_chars'] . '_EXPLAIN'], $config['min_name_chars'], $config['max_name_chars']),					'L_CHANGE_PASSWORD_EXPLAIN'	=> sprintf($user->lang[$config['pass_complex'] . '_EXPLAIN'], $config['min_pass_chars'], $config['max_pass_chars']),					'S_FORCE_PASSWORD'	=> ($auth->acl_get('u_chgpasswd') && $config['chg_passforce'] && $user->data['user_passchg'] < time() - ($config['chg_passforce'] * 86400)) ? true : false,					'S_CHANGE_USERNAME' => ($config['allow_namechange'] && $auth->acl_get('u_chgname')) ? true : false,					'S_CHANGE_EMAIL'	=> ($auth->acl_get('u_chgemail')) ? true : false,					'S_CHANGE_PASSWORD'	=> ($auth->acl_get('u_chgpasswd')) ? true : false)				);			break;			case 'profile_info':				include($phpbb_root_path . 'includes/functions_profile_fields.' . $phpEx);				$cp = new custom_profile();				$cp_data = $cp_error = array();				$data = array(					'icq'			=> request_var('icq', $user->data['user_icq']),					'aim'			=> request_var('aim', $user->data['user_aim']),					'msn'			=> request_var('msn', $user->data['user_msnm']),					'yim'			=> request_var('yim', $user->data['user_yim']),					'jabber'		=> utf8_normalize_nfc(request_var('jabber', $user->data['user_jabber'], true)),					'website'		=> request_var('website', $user->data['user_website']),					'location'		=> utf8_normalize_nfc(request_var('location', $user->data['user_from'], true)),					'occupation'	=> utf8_normalize_nfc(request_var('occupation', $user->data['user_occ'], true)),					'interests'		=> utf8_normalize_nfc(request_var('interests', $user->data['user_interests'], true)),				);				if ($config['allow_birthdays'])				{					$data['bday_day'] = $data['bday_month'] = $data['bday_year'] = 0;					if ($user->data['user_birthday'])					{						list($data['bday_day'], $data['bday_month'], $data['bday_year']) = explode('-', $user->data['user_birthday']);					}					$data['bday_day'] = request_var('bday_day', $data['bday_day']);					$data['bday_month'] = request_var('bday_month', $data['bday_month']);					$data['bday_year'] = request_var('bday_year', $data['bday_year']);					$data['user_birthday'] = sprintf('%2d-%2d-%4d', $data['bday_day'], $data['bday_month'], $data['bday_year']);				}				add_form_key('ucp_profile_info');				if ($submit)				{					$validate_array = array(						'icq'			=> array(							array('string', true, 3, 15),							array('match', true, '#^[0-9]+$#i')),						'aim'			=> array('string', true, 3, 255),						'msn'			=> array('string', true, 5, 255),						'jabber'		=> array(							array('string', true, 5, 255),							array('jabber')),						'yim'			=> array('string', true, 5, 255),						'website'		=> array(							array('string', true, 12, 255),							array('match', true, '#^http[s]?://(.*?\.)*?[a-z0-9\-]+\.[a-z]{2,4}#i')),						'location'		=> array('string', true, 2, 100),						'occupation'	=> array('string', true, 2, 500),						'interests'		=> array('string', true, 2, 500),					);					if ($config['allow_birthdays'])					{						$validate_array = array_merge($validate_array, array(							'bday_day'		=> array('num', true, 1, 31),							'bday_month'	=> array('num', true, 1, 12),							'bday_year'		=> array('num', true, 1901, gmdate('Y', time()) + 50),							'user_birthday' => array('date', true),						));					}					$error = validate_data($data, $validate_array);					// validate custom profile fields					$cp->submit_cp_field('profile', $user->get_iso_lang_id(), $cp_data, $cp_error);					if (sizeof($cp_error))					{						$error = array_merge($error, $cp_error);					}					if (!check_form_key('ucp_profile_info'))					{						$error[] = 'FORM_INVALID';					}					if (!sizeof($error))					{						$data['notify'] = $user->data['user_notify_type'];						if ($data['notify'] == NOTIFY_IM && (!$config['jab_enable'] || !$data['jabber'] || !@extension_loaded('xml')))						{							// User has not filled in a jabber address (Or one of the modules is disabled or jabber is disabled)							// Disable notify by Jabber now for this user.							$data['notify'] = NOTIFY_EMAIL;						}						$sql_ary = array(							'user_icq'		=> $data['icq'],							'user_aim'		=> $data['aim'],							'user_msnm'		=> $data['msn'],							'user_yim'		=> $data['yim'],							'user_jabber'	=> $data['jabber'],							'user_website'	=> $data['website'],							'user_from'		=> $data['location'],							'user_occ'		=> $data['occupation'],							'user_interests'=> $data['interests'],							'user_notify_type'	=> $data['notify'],						);						if ($config['allow_birthdays'])						{							$sql_ary['user_birthday'] = $data['user_birthday'];						}						$sql = 'UPDATE ' . USERS_TABLE . '							SET ' . $db->sql_build_array('UPDATE', $sql_ary) . '							WHERE user_id = ' . $user->data['user_id'];						$db->sql_query($sql);						// Update Custom Fields						$cp->update_profile_field_data($user->data['user_id'], $cp_data);						meta_refresh(3, $this->u_action);						$message = $user->lang['PROFILE_UPDATED'] . '<br /><br />' . sprintf($user->lang['RETURN_UCP'], '<a href="' . $this->u_action . '">', '</a>');						trigger_error($message);					}					// Replace "error" strings with their real, localised form					$error = preg_replace('#^([A-Z_]+)$#e', "(!empty(\$user->lang['\\1'])) ? \$user->lang['\\1'] : '\\1'", $error);				}				if ($config['allow_birthdays'])				{					$s_birthday_day_options = '<option value="0"' . ((!$data['bday_day']) ? ' selected="selected"' : '') . '>--</option>';					for ($i = 1; $i < 32; $i++)					{						$selected = ($i == $data['bday_day']) ? ' selected="selected"' : '';						$s_birthday_day_options .= "<option value=\"$i\"$selected>$i</option>";					}					$s_birthday_month_options = '<option value="0"' . ((!$data['bday_month']) ? ' selected="selected"' : '') . '>--</option>';					for ($i = 1; $i < 13; $i++)					{						$selected = ($i == $data['bday_month']) ? ' selected="selected"' : '';						$s_birthday_month_options .= "<option value=\"$i\"$selected>$i</option>";					}					$s_birthday_year_options = '';					$now = getdate();					$s_birthday_year_options = '<option value="0"' . ((!$data['bday_year']) ? ' selected="selected"' : '') . '>--</option>';					for ($i = $now['year'] - 100; $i <= $now['year']; $i++)					{						$selected = ($i == $data['bday_year']) ? ' selected="selected"' : '';						$s_birthday_year_options .= "<option value=\"$i\"$selected>$i</option>";					}					unset($now);					$template->assign_vars(array(						'S_BIRTHDAY_DAY_OPTIONS'	=> $s_birthday_day_options,						'S_BIRTHDAY_MONTH_OPTIONS'	=> $s_birthday_month_options,						'S_BIRTHDAY_YEAR_OPTIONS'	=> $s_birthday_year_options,						'S_BIRTHDAYS_ENABLED'		=> true,					));				}				$template->assign_vars(array(					'ERROR'		=> (sizeof($error)) ? implode('<br />', $error) : '',					'ICQ'		=> $data['icq'],					'YIM'		=> $data['yim'],					'AIM'		=> $data['aim'],					'MSN'		=> $data['msn'],					'JABBER'	=> $data['jabber'],					'WEBSITE'	=> $data['website'],					'LOCATION'	=> $data['location'],					'OCCUPATION'=> $data['occupation'],					'INTERESTS'	=> $data['interests'],				));				// Get additional profile fields and assign them to the template block var 'profile_fields'				$user->get_profile_fields($user->data['user_id']);				$cp->generate_profile_fields('profile', $user->get_iso_lang_id());			break;			case 'signature':				if (!$auth->acl_get('u_sig'))				{					trigger_error('NO_AUTH_SIGNATURE');				}				include($phpbb_root_path . 'includes/functions_posting.' . $phpEx);				include($phpbb_root_path . 'includes/functions_display.' . $phpEx);				$enable_bbcode	= ($config['allow_sig_bbcode']) ? (bool) $user->optionget('sig_bbcode') : false;				$enable_smilies	= ($config['allow_sig_smilies']) ? (bool) $user->optionget('sig_smilies') : false;				$enable_urls	= ($config['allow_sig_links']) ? (bool) $user->optionget('sig_links') : false;				$signature		= utf8_normalize_nfc(request_var('signature', (string) $user->data['user_sig'], true));				add_form_key('ucp_sig');				if ($submit || $preview)				{					include($phpbb_root_path . 'includes/message_parser.' . $phpEx);					$enable_bbcode	= ($config['allow_sig_bbcode']) ? ((request_var('disable_bbcode', false)) ? false : true) : false;					$enable_smilies	= ($config['allow_sig_smilies']) ? ((request_var('disable_smilies', false)) ? false : true) : false;					$enable_urls	= ($config['allow_sig_links']) ? ((request_var('disable_magic_url', false)) ? false : true) : false;					if (!sizeof($error))					{						$message_parser = new parse_message($signature);						// Allowing Quote BBCode						$message_parser->parse($enable_bbcode, $enable_urls, $enable_smilies, $config['allow_sig_img'], $config['allow_sig_flash'], true, $config['allow_sig_links'], true, 'sig');						if (sizeof($message_parser->warn_msg))						{							$error[] = implode('<br />', $message_parser->warn_msg);						}						if (!check_form_key('ucp_sig'))						{							$error[] = 'FORM_INVALID';						}						if (!sizeof($error) && $submit)						{							$user->optionset('sig_bbcode', $enable_bbcode);							$user->optionset('sig_smilies', $enable_smilies);							$user->optionset('sig_links', $enable_urls);							$sql_ary = array(								'user_sig'					=> (string) $message_parser->message,								'user_options'				=> $user->data['user_options'],								'user_sig_bbcode_uid'		=> (string) $message_parser->bbcode_uid,								'user_sig_bbcode_bitfield'	=> $message_parser->bbcode_bitfield							);							$sql = 'UPDATE ' . USERS_TABLE . '								SET ' . $db->sql_build_array('UPDATE', $sql_ary) . '								WHERE user_id = ' . $user->data['user_id'];							$db->sql_query($sql);							$message = $user->lang['PROFILE_UPDATED'] . '<br /><br />' . sprintf($user->lang['RETURN_UCP'], '<a href="' . $this->u_action . '">', '</a>');							trigger_error($message);						}					}					// Replace "error" strings with their real, localised form					$error = preg_replace('#^([A-Z_]+)$#e', "(!empty(\$user->lang['\\1'])) ? \$user->lang['\\1'] : '\\1'", $error);				}				$signature_preview = '';				if ($preview)				{					// Now parse it for displaying					$signature_preview = $message_parser->format_display($enable_bbcode, $enable_urls, $enable_smilies, false);					unset($message_parser);				}				decode_message($signature, $user->data['user_sig_bbcode_uid']);				$template->assign_vars(array(					'ERROR'				=> (sizeof($error)) ? implode('<br />', $error) : '',					'SIGNATURE'			=> $signature,					'SIGNATURE_PREVIEW'	=> $signature_preview,					'S_BBCODE_CHECKED' 		=> (!$enable_bbcode) ? ' checked="checked"' : '',					'S_SMILIES_CHECKED' 	=> (!$enable_smilies) ? ' checked="checked"' : '',					'S_MAGIC_URL_CHECKED' 	=> (!$enable_urls) ? ' checked="checked"' : '',					'BBCODE_STATUS'			=> ($config['allow_sig_bbcode']) ? sprintf($user->lang['BBCODE_IS_ON'], '<a href="' . append_sid("{$phpbb_root_path}faq.$phpEx", 'mode=bbcode') . '">', '</a>') : sprintf($user->lang['BBCODE_IS_OFF'], '<a href="' . append_sid("{$phpbb_root_path}faq.$phpEx", 'mode=bbcode') . '">', '</a>'),					'SMILIES_STATUS'		=> ($config['allow_sig_smilies']) ? $user->lang['SMILIES_ARE_ON'] : $user->lang['SMILIES_ARE_OFF'],					'IMG_STATUS'			=> ($config['allow_sig_img']) ? $user->lang['IMAGES_ARE_ON'] : $user->lang['IMAGES_ARE_OFF'],					'FLASH_STATUS'			=> ($config['allow_sig_flash']) ? $user->lang['FLASH_IS_ON'] : $user->lang['FLASH_IS_OFF'],					'URL_STATUS'			=> ($config['allow_sig_links']) ? $user->lang['URL_IS_ON'] : $user->lang['URL_IS_OFF'],					'MAX_FONT_SIZE'			=> (int) $config['max_sig_font_size'],					'L_SIGNATURE_EXPLAIN'	=> sprintf($user->lang['SIGNATURE_EXPLAIN'], $config['max_sig_chars']),					'S_BBCODE_ALLOWED'		=> $config['allow_sig_bbcode'],					'S_SMILIES_ALLOWED'		=> $config['allow_sig_smilies'],					'S_BBCODE_IMG'			=> ($config['allow_sig_img']) ? true : false,					'S_BBCODE_FLASH'		=> ($config['allow_sig_flash']) ? true : false,					'S_LINKS_ALLOWED'		=> ($config['allow_sig_links']) ? true : false)				);				// Build custom bbcodes array				display_custom_bbcodes();			break;			case 'avatar':				include($phpbb_root_path . 'includes/functions_display.' . $phpEx);				$display_gallery = request_var('display_gallery', '0');				$avatar_select = basename(request_var('avatar_select', ''));				$category = basename(request_var('category', ''));				$can_upload = (file_exists($phpbb_root_path . $config['avatar_path']) && phpbb_is_writable($phpbb_root_path . $config['avatar_path']) && $auth->acl_get('u_chgavatar') && (@ini_get('file_uploads') || strtolower(@ini_get('file_uploads')) == 'on')) ? true : false;				add_form_key('ucp_avatar');				if ($submit)				{					if (check_form_key('ucp_avatar'))					{						if (avatar_process_user($error, false, $can_upload))						{							meta_refresh(3, $this->u_action);							$message = $user->lang['PROFILE_UPDATED'] . '<br /><br />' . sprintf($user->lang['RETURN_UCP'], '<a href="' . $this->u_action . '">', '</a>');							trigger_error($message);						}					}					else					{						$error[] = 'FORM_INVALID';					}					// Replace "error" strings with their real, localised form					$error = preg_replace('#^([A-Z_]+)$#e', "(!empty(\$user->lang['\\1'])) ? \$user->lang['\\1'] : '\\1'", $error);				}				if (!$config['allow_avatar'] && $user->data['user_avatar_type'])				{					$error[] = $user->lang['AVATAR_NOT_ALLOWED'];				}				else if ((($user->data['user_avatar_type'] == AVATAR_UPLOAD) && !$config['allow_avatar_upload']) ||				 (($user->data['user_avatar_type'] == AVATAR_REMOTE) && !$config['allow_avatar_remote']) ||				 (($user->data['user_avatar_type'] == AVATAR_GALLERY) && !$config['allow_avatar_local']))				{					$error[] = $user->lang['AVATAR_TYPE_NOT_ALLOWED'];				}				$template->assign_vars(array(					'ERROR'			=> (sizeof($error)) ? implode('<br />', $error) : '',					'AVATAR'		=> get_user_avatar($user->data['user_avatar'], $user->data['user_avatar_type'], $user->data['user_avatar_width'], $user->data['user_avatar_height'], 'USER_AVATAR', true),					'AVATAR_SIZE'	=> $config['avatar_filesize'],					'U_GALLERY'		=> append_sid("{$phpbb_root_path}ucp.$phpEx", 'i=profile&amp;mode=avatar&amp;display_gallery=1'),					'S_FORM_ENCTYPE'	=> ($can_upload && ($config['allow_avatar_upload'] || $config['allow_avatar_remote_upload'])) ? ' enctype="multipart/form-data"' : '',					'L_AVATAR_EXPLAIN'	=> sprintf($user->lang['AVATAR_EXPLAIN'], $config['avatar_max_width'], $config['avatar_max_height'], $config['avatar_filesize'] / 1024),				));				if ($config['allow_avatar'] && $display_gallery && $auth->acl_get('u_chgavatar') && $config['allow_avatar_local'])				{					avatar_gallery($category, $avatar_select, 4);				}				else if ($config['allow_avatar'])				{					$avatars_enabled = (($can_upload && ($config['allow_avatar_upload'] || $config['allow_avatar_remote_upload'])) || ($auth->acl_get('u_chgavatar') && ($config['allow_avatar_local'] || $config['allow_avatar_remote']))) ? true : false;					$template->assign_vars(array(						'AVATAR_WIDTH'	=> request_var('width', $user->data['user_avatar_width']),						'AVATAR_HEIGHT'	=> request_var('height', $user->data['user_avatar_height']),						'S_AVATARS_ENABLED'		=> $avatars_enabled,						'S_UPLOAD_AVATAR_FILE'	=> ($can_upload && $config['allow_avatar_upload']) ? true : false,						'S_UPLOAD_AVATAR_URL'	=> ($can_upload && $config['allow_avatar_remote_upload']) ? true : false,						'S_LINK_AVATAR'			=> ($auth->acl_get('u_chgavatar') && $config['allow_avatar_remote']) ? true : false,						'S_DISPLAY_GALLERY'		=> ($auth->acl_get('u_chgavatar') && $config['allow_avatar_local']) ? true : false)					);				}			break;		}		$template->assign_vars(array(			'L_TITLE'	=> $user->lang['UCP_PROFILE_' . strtoupper($mode)],			'S_HIDDEN_FIELDS'	=> $s_hidden_fields,			'S_UCP_ACTION'		=> $this->u_action)		);		// Set desired template		$this->tpl_name = 'ucp_profile_' . $mode;		$this->page_title = 'UCP_PROFILE_' . strtoupper($mode);	}}?>
<?php/**** @package ucp* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @package module_install*/class ucp_groups_info{	function module()	{		return array(			'filename'	=> 'ucp_groups',			'title'		=> 'UCP_USERGROUPS',			'version'	=> '1.0.0',			'modes'		=> array(				'membership'	=> array('title' => 'UCP_USERGROUPS_MEMBER', 'auth' => '', 'cat' => array('UCP_USERGROUPS')),				'manage'		=> array('title' => 'UCP_USERGROUPS_MANAGE', 'auth' => '', 'cat' => array('UCP_USERGROUPS')),			),		);	}	function install()	{	}	function uninstall()	{	}}?>
<?php/**** @package phpBB3* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @ignore*/if (!defined('IN_PHPBB')){	exit;}/*** gen_sort_selects()* make_jumpbox()* bump_topic_allowed()* get_context()* decode_message()* strip_bbcode()* generate_text_for_display()* generate_text_for_storage()* generate_text_for_edit()* make_clickable_callback()* make_clickable()* censor_text()* bbcode_nl2br()* smiley_text()* parse_attachments()* extension_allowed()* truncate_string()* get_username_string()* class bitfield*//*** Generate sort selection fields*/function gen_sort_selects(&$limit_days, &$sort_by_text, &$sort_days, &$sort_key, &$sort_dir, &$s_limit_days, &$s_sort_key, &$s_sort_dir, &$u_sort_param, $def_st = false, $def_sk = false, $def_sd = false){	global $user;	$sort_dir_text = array('a' => $user->lang['ASCENDING'], 'd' => $user->lang['DESCENDING']);	$sorts = array(		'st'	=> array(			'key'		=> 'sort_days',			'default'	=> $def_st,			'options'	=> $limit_days,			'output'	=> &$s_limit_days,		),		'sk'	=> array(			'key'		=> 'sort_key',			'default'	=> $def_sk,			'options'	=> $sort_by_text,			'output'	=> &$s_sort_key,		),		'sd'	=> array(			'key'		=> 'sort_dir',			'default'	=> $def_sd,			'options'	=> $sort_dir_text,			'output'	=> &$s_sort_dir,		),	);	$u_sort_param  = '';	foreach ($sorts as $name => $sort_ary)	{		$key = $sort_ary['key'];		$selected = $$sort_ary['key'];		// Check if the key is selectable. If not, we reset to the default or first key found.		// This ensures the values are always valid. We also set $sort_dir/sort_key/etc. to the		// correct value, else the protection is void. ;)		if (!isset($sort_ary['options'][$selected]))		{			if ($sort_ary['default'] !== false)			{				$selected = $$key = $sort_ary['default'];			}			else			{				@reset($sort_ary['options']);				$selected = $$key = key($sort_ary['options']);			}		}		$sort_ary['output'] = '<select name="' . $name . '" id="' . $name . '">';		foreach ($sort_ary['options'] as $option => $text)		{			$sort_ary['output'] .= '<option value="' . $option . '"' . (($selected == $option) ? ' selected="selected"' : '') . '>' . $text . '</option>';		}		$sort_ary['output'] .= '</select>';		$u_sort_param .= ($selected !== $sort_ary['default']) ? ((strlen($u_sort_param)) ? '&amp;' : '') . "{$name}={$selected}" : '';	}	return;}/*** Generate Jumpbox*/function make_jumpbox($action, $forum_id = false, $select_all = false, $acl_list = false, $force_display = false){	global $config, $auth, $template, $user, $db;	// We only return if the jumpbox is not forced to be displayed (in case it is needed for functionality)	if (!$config['load_jumpbox'] && $force_display === false)	{		return;	}	$sql = 'SELECT forum_id, forum_name, parent_id, forum_type, left_id, right_id		FROM ' . FORUMS_TABLE . '		ORDER BY left_id ASC';	$result = $db->sql_query($sql, 600);	$right = $padding = 0;	$padding_store = array('0' => 0);	$display_jumpbox = false;	$iteration = 0;	// Sometimes it could happen that forums will be displayed here not be displayed within the index page	// This is the result of forums not displayed at index, having list permissions and a parent of a forum with no permissions.	// If this happens, the padding could be "broken"	while ($row = $db->sql_fetchrow($result))	{		if ($row['left_id'] < $right)		{			$padding++;			$padding_store[$row['parent_id']] = $padding;		}		else if ($row['left_id'] > $right + 1)		{			// Ok, if the $padding_store for this parent is empty there is something wrong. For now we will skip over it.			// @todo digging deep to find out "how" this can happen.			$padding = (isset($padding_store[$row['parent_id']])) ? $padding_store[$row['parent_id']] : $padding;		}		$right = $row['right_id'];		if ($row['forum_type'] == FORUM_CAT && ($row['left_id'] + 1 == $row['right_id']))		{			// Non-postable forum with no subforums, don't display			continue;		}		if (!$auth->acl_get('f_list', $row['forum_id']))		{			// if the user does not have permissions to list this forum skip			continue;		}		if ($acl_list && !$auth->acl_gets($acl_list, $row['forum_id']))		{			continue;		}		if (!$display_jumpbox)		{			$template->assign_block_vars('jumpbox_forums', array(				'FORUM_ID'		=> ($select_all) ? 0 : -1,				'FORUM_NAME'	=> ($select_all) ? $user->lang['ALL_FORUMS'] : $user->lang['SELECT_FORUM'],				'S_FORUM_COUNT'	=> $iteration)			);			$iteration++;			$display_jumpbox = true;		}		$template->assign_block_vars('jumpbox_forums', array(			'FORUM_ID'		=> $row['forum_id'],			'FORUM_NAME'	=> $row['forum_name'],			'SELECTED'		=> ($row['forum_id'] == $forum_id) ? ' selected="selected"' : '',			'S_FORUM_COUNT'	=> $iteration,			'S_IS_CAT'		=> ($row['forum_type'] == FORUM_CAT) ? true : false,			'S_IS_LINK'		=> ($row['forum_type'] == FORUM_LINK) ? true : false,			'S_IS_POST'		=> ($row['forum_type'] == FORUM_POST) ? true : false)		);		for ($i = 0; $i < $padding; $i++)		{			$template->assign_block_vars('jumpbox_forums.level', array());		}		$iteration++;	}	$db->sql_freeresult($result);	unset($padding_store);	$template->assign_vars(array(		'S_DISPLAY_JUMPBOX'	=> $display_jumpbox,		'S_JUMPBOX_ACTION'	=> $action)	);	return;}/*** Bump Topic Check - used by posting and viewtopic*/function bump_topic_allowed($forum_id, $topic_bumped, $last_post_time, $topic_poster, $last_topic_poster){	global $config, $auth, $user;	// Check permission and make sure the last post was not already bumped	if (!$auth->acl_get('f_bump', $forum_id) || $topic_bumped)	{		return false;	}	// Check bump time range, is the user really allowed to bump the topic at this time?	$bump_time = ($config['bump_type'] == 'm') ? $config['bump_interval'] * 60 : (($config['bump_type'] == 'h') ? $config['bump_interval'] * 3600 : $config['bump_interval'] * 86400);	// Check bump time	if ($last_post_time + $bump_time > time())	{		return false;	}	// Check bumper, only topic poster and last poster are allowed to bump	if ($topic_poster != $user->data['user_id'] && $last_topic_poster != $user->data['user_id'])	{		return false;	}	// A bump time of 0 will completely disable the bump feature... not intended but might be useful.	return $bump_time;}/*** Generates a text with approx. the specified length which contains the specified words and their context** @param	string	$text	The full text from which context shall be extracted* @param	string	$words	An array of words which should be contained in the result, has to be a valid part of a PCRE pattern (escape with preg_quote!)* @param	int		$length	The desired length of the resulting text, however the result might be shorter or longer than this value** @return	string			Context of the specified words separated by "..."*/function get_context($text, $words, $length = 400){	// first replace all whitespaces with single spaces	$text = preg_replace('/ +/', ' ', strtr($text, "\t\n\r\x0C ", '     '));	// we need to turn the entities back into their original form, to not cut the message in between them	$entities = array('&lt;', '&gt;', '&#91;', '&#93;', '&#46;', '&#58;', '&#058;');	$characters = array('<', '>', '[', ']', '.', ':', ':');	$text = str_replace($entities, $characters, $text);	$word_indizes = array();	if (sizeof($words))	{		$match = '';		// find the starting indizes of all words		foreach ($words as $word)		{			if ($word)			{				if (preg_match('#(?:[^\w]|^)(' . $word . ')(?:[^\w]|$)#i', $text, $match))				{					if (empty($match[1]))					{						continue;					}					$pos = utf8_strpos($text, $match[1]);					if ($pos !== false)					{						$word_indizes[] = $pos;					}				}			}		}		unset($match);		if (sizeof($word_indizes))		{			$word_indizes = array_unique($word_indizes);			sort($word_indizes);			$wordnum = sizeof($word_indizes);			// number of characters on the right and left side of each word			$sequence_length = (int) ($length / (2 * $wordnum)) - 2;			$final_text = '';			$word = $j = 0;			$final_text_index = -1;			// cycle through every character in the original text			for ($i = $word_indizes[$word], $n = utf8_strlen($text); $i < $n; $i++)			{				// if the current position is the start of one of the words then append $sequence_length characters to the final text				if (isset($word_indizes[$word]) && ($i == $word_indizes[$word]))				{					if ($final_text_index < $i - $sequence_length - 1)					{						$final_text .= '... ' . preg_replace('#^([^ ]*)#', '', utf8_substr($text, $i - $sequence_length, $sequence_length));					}					else					{						// if the final text is already nearer to the current word than $sequence_length we only append the text						// from its current index on and distribute the unused length to all other sequenes						$sequence_length += (int) (($final_text_index - $i + $sequence_length + 1) / (2 * $wordnum));						$final_text .= utf8_substr($text, $final_text_index + 1, $i - $final_text_index - 1);					}					$final_text_index = $i - 1;					// add the following characters to the final text (see below)					$word++;					$j = 1;				}				if ($j > 0)				{					// add the character to the final text and increment the sequence counter					$final_text .= utf8_substr($text, $i, 1);					$final_text_index++;					$j++;					// if this is a whitespace then check whether we are done with this sequence					if (utf8_substr($text, $i, 1) == ' ')					{						// only check whether we have to exit the context generation completely if we haven't already reached the end anyway						if ($i + 4 < $n)						{							if (($j > $sequence_length && $word >= $wordnum) || utf8_strlen($final_text) > $length)							{								$final_text .= ' ...';								break;							}						}						else						{							// make sure the text really reaches the end							$j -= 4;						}						// stop context generation and wait for the next word						if ($j > $sequence_length)						{							$j = 0;						}					}				}			}			return str_replace($characters, $entities, $final_text);		}	}	if (!sizeof($words) || !sizeof($word_indizes))	{		return str_replace($characters, $entities, ((utf8_strlen($text) >= $length + 3) ? utf8_substr($text, 0, $length) . '...' : $text));	}}/*** Decode text whereby text is coming from the db and expected to be pre-parsed content* We are placing this outside of the message parser because we are often in need of it...*/function decode_message(&$message, $bbcode_uid = ''){	global $config;	if ($bbcode_uid)	{		$match = array('<br />', "[/*:m:$bbcode_uid]", ":u:$bbcode_uid", ":o:$bbcode_uid", ":$bbcode_uid");		$replace = array("\n", '', '', '', '');	}	else	{		$match = array('<br />');		$replace = array("\n");	}	$message = str_replace($match, $replace, $message);	$match = get_preg_expression('bbcode_htm');	$replace = array('\1', '\1', '\2', '\1', '', '');	$message = preg_replace($match, $replace, $message);}/*** Strips all bbcode from a text and returns the plain content*/function strip_bbcode(&$text, $uid = ''){	if (!$uid)	{		$uid = '[0-9a-z]{5,}';	}	$text = preg_replace("#\[\/?[a-z0-9\*\+\-]+(?:=(?:&quot;.*&quot;|[^\]]*))?(?::[a-z])?(\:$uid)\]#", ' ', $text);	$match = get_preg_expression('bbcode_htm');	$replace = array('\1', '\1', '\2', '\1', '', '');	$text = preg_replace($match, $replace, $text);}/*** For display of custom parsed text on user-facing pages* Expects $text to be the value directly from the database (stored value)*/function generate_text_for_display($text, $uid, $bitfield, $flags){	static $bbcode;	if (!$text)	{		return '';	}	$text = censor_text($text);	// Parse bbcode if bbcode uid stored and bbcode enabled	if ($uid && ($flags & OPTION_FLAG_BBCODE))	{		if (!class_exists('bbcode'))		{			global $phpbb_root_path, $phpEx;			include($phpbb_root_path . 'includes/bbcode.' . $phpEx);		}		if (empty($bbcode))		{			$bbcode = new bbcode($bitfield);		}		else		{			$bbcode->bbcode($bitfield);		}		$bbcode->bbcode_second_pass($text, $uid);	}	$text = bbcode_nl2br($text);	$text = smiley_text($text, !($flags & OPTION_FLAG_SMILIES));	return $text;}/*** For parsing custom parsed text to be stored within the database.* This function additionally returns the uid and bitfield that needs to be stored.* Expects $text to be the value directly from request_var() and in it's non-parsed form*/function generate_text_for_storage(&$text, &$uid, &$bitfield, &$flags, $allow_bbcode = false, $allow_urls = false, $allow_smilies = false){	global $phpbb_root_path, $phpEx;	$uid = $bitfield = '';	$flags = (($allow_bbcode) ? OPTION_FLAG_BBCODE : 0) + (($allow_smilies) ? OPTION_FLAG_SMILIES : 0) + (($allow_urls) ? OPTION_FLAG_LINKS : 0);	if (!$text)	{		return;	}	if (!class_exists('parse_message'))	{		include($phpbb_root_path . 'includes/message_parser.' . $phpEx);	}	$message_parser = new parse_message($text);	$message_parser->parse($allow_bbcode, $allow_urls, $allow_smilies);	$text = $message_parser->message;	$uid = $message_parser->bbcode_uid;	// If the bbcode_bitfield is empty, there is no need for the uid to be stored.	if (!$message_parser->bbcode_bitfield)	{		$uid = '';	}	$bitfield = $message_parser->bbcode_bitfield;	return;}/*** For decoding custom parsed text for edits as well as extracting the flags* Expects $text to be the value directly from the database (pre-parsed content)*/function generate_text_for_edit($text, $uid, $flags){	global $phpbb_root_path, $phpEx;	decode_message($text, $uid);	return array(		'allow_bbcode'	=> ($flags & OPTION_FLAG_BBCODE) ? 1 : 0,		'allow_smilies'	=> ($flags & OPTION_FLAG_SMILIES) ? 1 : 0,		'allow_urls'	=> ($flags & OPTION_FLAG_LINKS) ? 1 : 0,		'text'			=> $text	);}/*** A subroutine of make_clickable used with preg_replace* It places correct HTML around an url, shortens the displayed text* and makes sure no entities are inside URLs*/function make_clickable_callback($type, $whitespace, $url, $relative_url, $class){	$orig_url		= $url;	$orig_relative	= $relative_url;	$append			= '';	$url			= htmlspecialchars_decode($url);	$relative_url	= htmlspecialchars_decode($relative_url);	// make sure no HTML entities were matched	$chars = array('<', '>', '"');	$split = false;	foreach ($chars as $char)	{		$next_split = strpos($url, $char);		if ($next_split !== false)		{			$split = ($split !== false) ? min($split, $next_split) : $next_split;		}	}	if ($split !== false)	{		// an HTML entity was found, so the URL has to end before it		$append			= substr($url, $split) . $relative_url;		$url			= substr($url, 0, $split);		$relative_url	= '';	}	else if ($relative_url)	{		// same for $relative_url		$split = false;		foreach ($chars as $char)		{			$next_split = strpos($relative_url, $char);			if ($next_split !== false)			{				$split = ($split !== false) ? min($split, $next_split) : $next_split;			}		}		if ($split !== false)		{			$append			= substr($relative_url, $split);			$relative_url	= substr($relative_url, 0, $split);		}	}	// if the last character of the url is a punctuation mark, exclude it from the url	$last_char = ($relative_url) ? $relative_url[strlen($relative_url) - 1] : $url[strlen($url) - 1];	switch ($last_char)	{		case '.':		case '?':		case '!':		case ':':		case ',':			$append = $last_char;			if ($relative_url)			{				$relative_url = substr($relative_url, 0, -1);			}			else			{				$url = substr($url, 0, -1);			}		break;		// set last_char to empty here, so the variable can be used later to		// check whether a character was removed		default:			$last_char = '';		break;	}	$short_url = (strlen($url) > 55) ? substr($url, 0, 39) . ' ... ' . substr($url, -10) : $url;	switch ($type)	{		case MAGIC_URL_LOCAL:			$tag			= 'l';			$relative_url	= preg_replace('/[&?]sid=[0-9a-f]{32}$/', '', preg_replace('/([&?])sid=[0-9a-f]{32}&/', '$1', $relative_url));			$url			= $url . '/' . $relative_url;			$text			= $relative_url;			// this url goes to http://domain.tld/path/to/board/ which			// would result in an empty link if treated as local so			// don't touch it and let MAGIC_URL_FULL take care of it.			if (!$relative_url)			{				return $whitespace . $orig_url . '/' . $orig_relative; // slash is taken away by relative url pattern			}		break;		case MAGIC_URL_FULL:			$tag	= 'm';			$text	= $short_url;		break;		case MAGIC_URL_WWW:			$tag	= 'w';			$url	= 'http://' . $url;			$text	= $short_url;		break;		case MAGIC_URL_EMAIL:			$tag	= 'e';			$text	= $short_url;			$url	= 'mailto:' . $url;		break;	}	$url	= htmlspecialchars($url);	$text	= htmlspecialchars($text);	$append	= htmlspecialchars($append);	$html	= "$whitespace<!-- $tag --><a$class href=\"$url\">$text</a><!-- $tag -->$append";	return $html;}/*** make_clickable function** Replace magic urls of form http://xxx.xxx., www.xxx. and xxx@xxx.xxx.* Cuts down displayed size of link if over 50 chars, turns absolute links* into relative versions when the server/script path matches the link*/function make_clickable($text, $server_url = false, $class = 'postlink'){	if ($server_url === false)	{		$server_url = generate_board_url();	}	static $magic_url_match;	static $magic_url_replace;	static $static_class;	if (!is_array($magic_url_match) || $static_class != $class)	{		$static_class = $class;		$class = ($static_class) ? ' class="' . $static_class . '"' : '';		$local_class = ($static_class) ? ' class="' . $static_class . '-local"' : '';		$magic_url_match = $magic_url_replace = array();		// Be sure to not let the matches cross over. ;)		// relative urls for this board		$magic_url_match[] = '#(^|[\n\t (>.])(' . preg_quote($server_url, '#') . ')/(' . get_preg_expression('relative_url_inline') . ')#ie';		$magic_url_replace[] = "make_clickable_callback(MAGIC_URL_LOCAL, '\$1', '\$2', '\$3', '$local_class')";		// matches a xxxx://aaaaa.bbb.cccc. ...		$magic_url_match[] = '#(^|[\n\t (>.])(' . get_preg_expression('url_inline') . ')#ie';		$magic_url_replace[] = "make_clickable_callback(MAGIC_URL_FULL, '\$1', '\$2', '', '$class')";		// matches a "www.xxxx.yyyy[/zzzz]" kinda lazy URL thing		$magic_url_match[] = '#(^|[\n\t (>])(' . get_preg_expression('www_url_inline') . ')#ie';		$magic_url_replace[] = "make_clickable_callback(MAGIC_URL_WWW, '\$1', '\$2', '', '$class')";		// matches an email@domain type address at the start of a line, or after a space or after what might be a BBCode.		$magic_url_match[] = '/(^|[\n\t (>])(' . get_preg_expression('email') . ')/ie';		$magic_url_replace[] = "make_clickable_callback(MAGIC_URL_EMAIL, '\$1', '\$2', '', '')";	}	return preg_replace($magic_url_match, $magic_url_replace, $text);}/*** Censoring*/function censor_text($text){	static $censors;	// Nothing to do?	if ($text === '')	{		return '';	}	// We moved the word censor checks in here because we call this function quite often - and then only need to do the check once	if (!isset($censors) || !is_array($censors))	{		global $config, $user, $auth, $cache;		// We check here if the user is having viewing censors disabled (and also allowed to do so).		if (!$user->optionget('viewcensors') && $config['allow_nocensors'] && $auth->acl_get('u_chgcensors'))		{			$censors = array();		}		else		{			$censors = $cache->obtain_word_list();		}	}	if (sizeof($censors))	{		return preg_replace($censors['match'], $censors['replace'], $text);	}	return $text;}/*** custom version of nl2br which takes custom BBCodes into account*/function bbcode_nl2br($text){	// custom BBCodes might contain carriage returns so they	// are not converted into <br /> so now revert that	$text = str_replace(array("\n", "\r"), array('<br />', "\n"), $text);	return $text;}/*** Smiley processing*/function smiley_text($text, $force_option = false){	global $config, $user, $phpbb_root_path;	if ($force_option || !$config['allow_smilies'] || !$user->optionget('viewsmilies'))	{		return preg_replace('#<!\-\- s(.*?) \-\-><img src="\{SMILIES_PATH\}\/.*? \/><!\-\- s\1 \-\->#', '\1', $text);	}	else	{		$root_path = (defined('PHPBB_USE_BOARD_URL_PATH') && PHPBB_USE_BOARD_URL_PATH) ? generate_board_url() . '/' : $phpbb_root_path;		return preg_replace('#<!\-\- s(.*?) \-\-><img src="\{SMILIES_PATH\}\/(.*?) \/><!\-\- s\1 \-\->#', '<img src="' . $root_path . $config['smilies_path'] . '/\2 />', $text);	}}/*** General attachment parsing** @param mixed $forum_id The forum id the attachments are displayed in (false if in private message)* @param string &$message The post/private message* @param array &$attachments The attachments to parse for (inline) display. The attachments array will hold templated data after parsing.* @param array &$update_count The attachment counts to be updated - will be filled* @param bool $preview If set to true the attachments are parsed for preview. Within preview mode the comments are fetched from the given $attachments array and not fetched from the database.*/function parse_attachments($forum_id, &$message, &$attachments, &$update_count, $preview = false){	if (!sizeof($attachments))	{		return;	}	global $template, $cache, $user;	global $extensions, $config, $phpbb_root_path, $phpEx;	//	$compiled_attachments = array();	if (!isset($template->filename['attachment_tpl']))	{		$template->set_filenames(array(			'attachment_tpl'	=> 'attachment.html')		);	}	if (empty($extensions) || !is_array($extensions))	{		$extensions = $cache->obtain_attach_extensions($forum_id);	}	// Look for missing attachment information...	$attach_ids = array();	foreach ($attachments as $pos => $attachment)	{		// If is_orphan is set, we need to retrieve the attachments again...		if (!isset($attachment['extension']) && !isset($attachment['physical_filename']))		{			$attach_ids[(int) $attachment['attach_id']] = $pos;		}	}	// Grab attachments (security precaution)	if (sizeof($attach_ids))	{		global $db;		$new_attachment_data = array();		$sql = 'SELECT *			FROM ' . ATTACHMENTS_TABLE . '			WHERE ' . $db->sql_in_set('attach_id', array_keys($attach_ids));		$result = $db->sql_query($sql);		while ($row = $db->sql_fetchrow($result))		{			if (!isset($attach_ids[$row['attach_id']]))			{				continue;			}			// If we preview attachments we will set some retrieved values here			if ($preview)			{				$row['attach_comment'] = $attachments[$attach_ids[$row['attach_id']]]['attach_comment'];			}			$new_attachment_data[$attach_ids[$row['attach_id']]] = $row;		}		$db->sql_freeresult($result);		$attachments = $new_attachment_data;		unset($new_attachment_data);	}	// Sort correctly	if ($config['display_order'])	{		// Ascending sort		krsort($attachments);	}	else	{		// Descending sort		ksort($attachments);	}	foreach ($attachments as $attachment)	{		if (!sizeof($attachment))		{			continue;		}		// We need to reset/empty the _file block var, because this function might be called more than once		$template->destroy_block_vars('_file');		$block_array = array();		// Some basics...		$attachment['extension'] = strtolower(trim($attachment['extension']));		$filename = $phpbb_root_path . $config['upload_path'] . '/' . utf8_basename($attachment['physical_filename']);		$thumbnail_filename = $phpbb_root_path . $config['upload_path'] . '/thumb_' . utf8_basename($attachment['physical_filename']);		$upload_icon = '';		if (isset($extensions[$attachment['extension']]))		{			if ($user->img('icon_topic_attach', '') && !$extensions[$attachment['extension']]['upload_icon'])			{				$upload_icon = $user->img('icon_topic_attach', '');			}			else if ($extensions[$attachment['extension']]['upload_icon'])			{				$upload_icon = '<img src="' . $phpbb_root_path . $config['upload_icons_path'] . '/' . trim($extensions[$attachment['extension']]['upload_icon']) . '" alt="" />';			}		}		$filesize = get_formatted_filesize($attachment['filesize'], false);		$comment = bbcode_nl2br(censor_text($attachment['attach_comment']));		$block_array += array(			'UPLOAD_ICON'		=> $upload_icon,			'FILESIZE'			=> $filesize['value'],			'SIZE_LANG'			=> $filesize['unit'],			'DOWNLOAD_NAME'		=> utf8_basename($attachment['real_filename']),			'COMMENT'			=> $comment,		);		$denied = false;		if (!extension_allowed($forum_id, $attachment['extension'], $extensions))		{			$denied = true;			$block_array += array(				'S_DENIED'			=> true,				'DENIED_MESSAGE'	=> sprintf($user->lang['EXTENSION_DISABLED_AFTER_POSTING'], $attachment['extension'])			);		}		if (!$denied)		{			$l_downloaded_viewed = $download_link = '';			$display_cat = $extensions[$attachment['extension']]['display_cat'];			if ($display_cat == ATTACHMENT_CATEGORY_IMAGE)			{				if ($attachment['thumbnail'])				{					$display_cat = ATTACHMENT_CATEGORY_THUMB;				}				else				{					if ($config['img_display_inlined'])					{						if ($config['img_link_width'] || $config['img_link_height'])						{							$dimension = @getimagesize($filename);							// If the dimensions could not be determined or the image being 0x0 we display it as a link for safety purposes							if ($dimension === false || empty($dimension[0]) || empty($dimension[1]))							{								$display_cat = ATTACHMENT_CATEGORY_NONE;							}							else							{								$display_cat = ($dimension[0] <= $config['img_link_width'] && $dimension[1] <= $config['img_link_height']) ? ATTACHMENT_CATEGORY_IMAGE : ATTACHMENT_CATEGORY_NONE;							}						}					}					else					{						$display_cat = ATTACHMENT_CATEGORY_NONE;					}				}			}			// Make some descisions based on user options being set.			if (($display_cat == ATTACHMENT_CATEGORY_IMAGE || $display_cat == ATTACHMENT_CATEGORY_THUMB) && !$user->optionget('viewimg'))			{				$display_cat = ATTACHMENT_CATEGORY_NONE;			}			if ($display_cat == ATTACHMENT_CATEGORY_FLASH && !$user->optionget('viewflash'))			{				$display_cat = ATTACHMENT_CATEGORY_NONE;			}			$download_link = append_sid("{$phpbb_root_path}download/file.$phpEx", 'id=' . $attachment['attach_id']);			switch ($display_cat)			{				// Images				case ATTACHMENT_CATEGORY_IMAGE:					$l_downloaded_viewed = 'VIEWED_COUNT';					$inline_link = append_sid("{$phpbb_root_path}download/file.$phpEx", 'id=' . $attachment['attach_id']);					$download_link .= '&amp;mode=view';					$block_array += array(						'S_IMAGE'		=> true,						'U_INLINE_LINK'		=> $inline_link,					);					$update_count[] = $attachment['attach_id'];				break;				// Images, but display Thumbnail				case ATTACHMENT_CATEGORY_THUMB:					$l_downloaded_viewed = 'VIEWED_COUNT';					$thumbnail_link = append_sid("{$phpbb_root_path}download/file.$phpEx", 'id=' . $attachment['attach_id'] . '&amp;t=1');					$download_link .= '&amp;mode=view';					$block_array += array(						'S_THUMBNAIL'		=> true,						'THUMB_IMAGE'		=> $thumbnail_link,					);					$update_count[] = $attachment['attach_id'];				break;				// Windows Media Streams				case ATTACHMENT_CATEGORY_WM:					$l_downloaded_viewed = 'VIEWED_COUNT';					// Giving the filename directly because within the wm object all variables are in local context making it impossible					// to validate against a valid session (all params can differ)					// $download_link = $filename;					$block_array += array(						'U_FORUM'		=> generate_board_url(),						'ATTACH_ID'		=> $attachment['attach_id'],						'S_WM_FILE'		=> true,					);					// Viewed/Heared File ... update the download count					$update_count[] = $attachment['attach_id'];				break;				// Real Media Streams				case ATTACHMENT_CATEGORY_RM:				case ATTACHMENT_CATEGORY_QUICKTIME:					$l_downloaded_viewed = 'VIEWED_COUNT';					$block_array += array(						'S_RM_FILE'			=> ($display_cat == ATTACHMENT_CATEGORY_RM) ? true : false,						'S_QUICKTIME_FILE'	=> ($display_cat == ATTACHMENT_CATEGORY_QUICKTIME) ? true : false,						'U_FORUM'			=> generate_board_url(),						'ATTACH_ID'			=> $attachment['attach_id'],					);					// Viewed/Heared File ... update the download count					$update_count[] = $attachment['attach_id'];				break;				// Macromedia Flash Files				case ATTACHMENT_CATEGORY_FLASH:					list($width, $height) = @getimagesize($filename);					$l_downloaded_viewed = 'VIEWED_COUNT';					$block_array += array(						'S_FLASH_FILE'	=> true,						'WIDTH'			=> $width,						'HEIGHT'		=> $height,						'U_VIEW_LINK'	=> $download_link . '&amp;view=1',					);					// Viewed/Heared File ... update the download count					$update_count[] = $attachment['attach_id'];				break;				default:					$l_downloaded_viewed = 'DOWNLOAD_COUNT';					$block_array += array(						'S_FILE'		=> true,					);				break;			}			$l_download_count = (!isset($attachment['download_count']) || $attachment['download_count'] == 0) ? $user->lang[$l_downloaded_viewed . '_NONE'] : (($attachment['download_count'] == 1) ? sprintf($user->lang[$l_downloaded_viewed], $attachment['download_count']) : sprintf($user->lang[$l_downloaded_viewed . 'S'], $attachment['download_count']));			$block_array += array(				'U_DOWNLOAD_LINK'		=> $download_link,				'L_DOWNLOAD_COUNT'		=> $l_download_count			);		}		$template->assign_block_vars('_file', $block_array);		$compiled_attachments[] = $template->assign_display('attachment_tpl');	}	$attachments = $compiled_attachments;	unset($compiled_attachments);	$tpl_size = sizeof($attachments);	$unset_tpl = array();	preg_match_all('#<!\-\- ia([0-9]+) \-\->(.*?)<!\-\- ia\1 \-\->#', $message, $matches, PREG_PATTERN_ORDER);	$replace = array();	foreach ($matches[0] as $num => $capture)	{		// Flip index if we are displaying the reverse way		$index = ($config['display_order']) ? ($tpl_size-($matches[1][$num] + 1)) : $matches[1][$num];		$replace['from'][] = $matches[0][$num];		$replace['to'][] = (isset($attachments[$index])) ? $attachments[$index] : sprintf($user->lang['MISSING_INLINE_ATTACHMENT'], $matches[2][array_search($index, $matches[1])]);		$unset_tpl[] = $index;	}	if (isset($replace['from']))	{		$message = str_replace($replace['from'], $replace['to'], $message);	}	$unset_tpl = array_unique($unset_tpl);	// Needed to let not display the inlined attachments at the end of the post again	foreach ($unset_tpl as $index)	{		unset($attachments[$index]);	}}/*** Check if extension is allowed to be posted.** @param mixed $forum_id The forum id to check or false if private message* @param string $extension The extension to check, for example zip.* @param array &$extensions The extension array holding the information from the cache (will be obtained if empty)** @return bool False if the extension is not allowed to be posted, else true.*/function extension_allowed($forum_id, $extension, &$extensions){	if (empty($extensions))	{		global $cache;		$extensions = $cache->obtain_attach_extensions($forum_id);	}	return (!isset($extensions['_allowed_'][$extension])) ? false : true;}/*** Truncates string while retaining special characters if going over the max length* The default max length is 60 at the moment* The maximum storage length is there to fit the string within the given length. The string may be further truncated due to html entities.* For example: string given is 'a "quote"' (length: 9), would be a stored as 'a &quot;quote&quot;' (length: 19)** @param string $string The text to truncate to the given length. String is specialchared.* @param int $max_length Maximum length of string (multibyte character count as 1 char / Html entity count as 1 char)* @param int $max_store_length Maximum character length of string (multibyte character count as 1 char / Html entity count as entity chars).* @param bool $allow_reply Allow Re: in front of string * 	NOTE: This parameter can cause undesired behavior (returning strings longer than $max_store_length) and is deprecated. * @param string $append String to be appended*/function truncate_string($string, $max_length = 60, $max_store_length = 255, $allow_reply = false, $append = ''){	$chars = array();	$strip_reply = false;	$stripped = false;	if ($allow_reply && strpos($string, 'Re: ') === 0)	{		$strip_reply = true;		$string = substr($string, 4);	}	$_chars = utf8_str_split(htmlspecialchars_decode($string));	$chars = array_map('utf8_htmlspecialchars', $_chars);	// Now check the length ;)	if (sizeof($chars) > $max_length)	{		// Cut off the last elements from the array		$string = implode('', array_slice($chars, 0, $max_length - utf8_strlen($append)));		$stripped = true;	}	// Due to specialchars, we may not be able to store the string...	if (utf8_strlen($string) > $max_store_length)	{		// let's split again, we do not want half-baked strings where entities are split		$_chars = utf8_str_split(htmlspecialchars_decode($string));		$chars = array_map('utf8_htmlspecialchars', $_chars);		do		{			array_pop($chars);			$string = implode('', $chars);		}		while (!empty($chars) && utf8_strlen($string) > $max_store_length);	}	if ($strip_reply)	{		$string = 'Re: ' . $string;	}	if ($append != '' && $stripped)	{		$string = $string . $append;	}	return $string;}/*** Get username details for placing into templates.* This function caches all modes on first call, except for no_profile and anonymous user - determined by $user_id.** @param string $mode Can be profile (for getting an url to the profile), username (for obtaining the username), colour (for obtaining the user colour), full (for obtaining a html string representing a coloured link to the users profile) or no_profile (the same as full but forcing no profile link)* @param int $user_id The users id* @param string $username The users name* @param string $username_colour The users colour* @param string $guest_username optional parameter to specify the guest username. It will be used in favor of the GUEST language variable then.* @param string $custom_profile_url optional parameter to specify a profile url. The user id get appended to this url as &amp;u={user_id}** @return string A string consisting of what is wanted based on $mode.* @author BartVB, Acyd Burn*/function get_username_string($mode, $user_id, $username, $username_colour = '', $guest_username = false, $custom_profile_url = false){	static $_profile_cache;	// We cache some common variables we need within this function	if (empty($_profile_cache))	{		global $phpbb_root_path, $phpEx;		$_profile_cache['base_url'] = append_sid("{$phpbb_root_path}memberlist.$phpEx", 'mode=viewprofile&amp;u={USER_ID}');		$_profile_cache['tpl_noprofile'] = '{USERNAME}';		$_profile_cache['tpl_noprofile_colour'] = '<span style="color: {USERNAME_COLOUR};" class="username-coloured">{USERNAME}</span>';		$_profile_cache['tpl_profile'] = '<a href="{PROFILE_URL}">{USERNAME}</a>';		$_profile_cache['tpl_profile_colour'] = '<a href="{PROFILE_URL}" style="color: {USERNAME_COLOUR};" class="username-coloured">{USERNAME}</a>';	}	global $user, $auth;	// This switch makes sure we only run code required for the mode	switch ($mode)	{		case 'full':		case 'no_profile':		case 'colour':			// Build correct username colour			$username_colour = ($username_colour) ? '#' . $username_colour : '';			// Return colour			if ($mode == 'colour')			{				return $username_colour;			}		// no break;		case 'username':			// Build correct username			if ($guest_username === false)			{				$username = ($username) ? $username : $user->lang['GUEST'];			}			else			{				$username = ($user_id && $user_id != ANONYMOUS) ? $username : ((!empty($guest_username)) ? $guest_username : $user->lang['GUEST']);			}			// Return username			if ($mode == 'username')			{				return $username;			}		// no break;		case 'profile':			// Build correct profile url - only show if not anonymous and permission to view profile if registered user			// For anonymous the link leads to a login page.			if ($user_id && $user_id != ANONYMOUS && ($user->data['user_id'] == ANONYMOUS || $auth->acl_get('u_viewprofile')))			{				$profile_url = ($custom_profile_url !== false) ? $custom_profile_url . '&amp;u=' . (int) $user_id : str_replace(array('={USER_ID}', '=%7BUSER_ID%7D'), '=' . (int) $user_id, $_profile_cache['base_url']);			}			else			{				$profile_url = '';			}			// Return profile			if ($mode == 'profile')			{				return $profile_url;			}		// no break;	}	if (($mode == 'full' && !$profile_url) || $mode == 'no_profile')	{		return str_replace(array('{USERNAME_COLOUR}', '{USERNAME}'), array($username_colour, $username), (!$username_colour) ? $_profile_cache['tpl_noprofile'] : $_profile_cache['tpl_noprofile_colour']);	}	return str_replace(array('{PROFILE_URL}', '{USERNAME_COLOUR}', '{USERNAME}'), array($profile_url, $username_colour, $username), (!$username_colour) ? $_profile_cache['tpl_profile'] : $_profile_cache['tpl_profile_colour']);}/*** @package phpBB3*/class bitfield{	var $data;	function bitfield($bitfield = '')	{		$this->data = base64_decode($bitfield);	}	/**	*/	function get($n)	{		// Get the ($n / 8)th char		$byte = $n >> 3;		if (strlen($this->data) >= $byte + 1)		{			$c = $this->data[$byte];			// Lookup the ($n % 8)th bit of the byte			$bit = 7 - ($n & 7);			return (bool) (ord($c) & (1 << $bit));		}		else		{			return false;		}	}	function set($n)	{		$byte = $n >> 3;		$bit = 7 - ($n & 7);		if (strlen($this->data) >= $byte + 1)		{			$this->data[$byte] = $this->data[$byte] | chr(1 << $bit);		}		else		{			$this->data .= str_repeat("\0", $byte - strlen($this->data));			$this->data .= chr(1 << $bit);		}	}	function clear($n)	{		$byte = $n >> 3;		if (strlen($this->data) >= $byte + 1)		{			$bit = 7 - ($n & 7);			$this->data[$byte] = $this->data[$byte] &~ chr(1 << $bit);		}	}	function get_blob()	{		return $this->data;	}	function get_base64()	{		return base64_encode($this->data);	}	function get_bin()	{		$bin = '';		$len = strlen($this->data);		for ($i = 0; $i < $len; ++$i)		{			$bin .= str_pad(decbin(ord($this->data[$i])), 8, '0', STR_PAD_LEFT);		}		return $bin;	}	function get_all_set()	{		return array_keys(array_filter(str_split($this->get_bin())));	}	function merge($bitfield)	{		$this->data = $this->data | $bitfield->get_blob();	}}?>
<?php/**** @package search* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @ignore*/if (!defined('IN_PHPBB')){	exit;}/*** @ignore*/include_once($phpbb_root_path . 'includes/search/search.' . $phpEx);/*** fulltext_native* phpBB's own db driven fulltext search, version 2* @package search*/class fulltext_native extends search_backend{	var $stats = array();	var $word_length = array();	var $search_query;	var $common_words = array();	var $must_contain_ids = array();	var $must_not_contain_ids = array();	var $must_exclude_one_ids = array();	/**	* Initialises the fulltext_native search backend with min/max word length and makes sure the UTF-8 normalizer is loaded.	*	* @param	boolean|string	&$error	is passed by reference and should either be set to false on success or an error message on failure.	*	* @access	public	*/	function fulltext_native(&$error)	{		global $phpbb_root_path, $phpEx, $config;		$this->word_length = array('min' => $config['fulltext_native_min_chars'], 'max' => $config['fulltext_native_max_chars']);		/**		* Load the UTF tools		*/		if (!class_exists('utf_normalizer'))		{			include($phpbb_root_path . 'includes/utf/utf_normalizer.' . $phpEx);		}		$error = false;	}	/**	* This function fills $this->search_query with the cleaned user search query.	*	* If $terms is 'any' then the words will be extracted from the search query	* and combined with | inside brackets. They will afterwards be treated like	* an standard search query.	*	* Then it analyses the query and fills the internal arrays $must_not_contain_ids,	* $must_contain_ids and $must_exclude_one_ids which are later used by keyword_search().	*	* @param	string	$keywords	contains the search query string as entered by the user	* @param	string	$terms		is either 'all' (use search query as entered, default words to 'must be contained in post')	* 	or 'any' (find all posts containing at least one of the given words)	* @return	boolean				false if no valid keywords were found and otherwise true	*	* @access	public	*/	function split_keywords($keywords, $terms)	{		global $db, $user, $config;		$tokens = '+-|()*';		$keywords = trim($this->cleanup($keywords, $tokens));		// allow word|word|word without brackets		if ((strpos($keywords, ' ') === false) && (strpos($keywords, '|') !== false) && (strpos($keywords, '(') === false))		{			$keywords = '(' . $keywords . ')';		}		$open_bracket = $space = false;		for ($i = 0, $n = strlen($keywords); $i < $n; $i++)		{			if ($open_bracket !== false)			{				switch ($keywords[$i])				{					case ')':						if ($open_bracket + 1 == $i)						{							$keywords[$i - 1] = '|';							$keywords[$i] = '|';						}						$open_bracket = false;					break;					case '(':						$keywords[$i] = '|';					break;					case '+':					case '-':					case ' ':						$keywords[$i] = '|';					break;					case '*':						if ($i === 0 || ($keywords[$i - 1] !== '*' && strcspn($keywords[$i - 1], $tokens) === 0))						{							if ($i === $n - 1 || ($keywords[$i + 1] !== '*' && strcspn($keywords[$i + 1], $tokens) === 0))							{								$keywords = substr($keywords, 0, $i) . substr($keywords, $i + 1);							}						}					break;				}			}			else			{				switch ($keywords[$i])				{					case ')':						$keywords[$i] = ' ';					break;					case '(':						$open_bracket = $i;						$space = false;					break;					case '|':						$keywords[$i] = ' ';					break;					case '-':					case '+':						$space = $keywords[$i];					break;					case ' ':						if ($space !== false)						{							$keywords[$i] = $space;						}					break;					default:						$space = false;				}			}		}		if ($open_bracket)		{			$keywords .= ')';		}		$match = array(			'#  +#',			'#\|\|+#',			'#(\+|\-)(?:\+|\-)+#',			'#\(\|#',			'#\|\)#',		);		$replace = array(			' ',			'|',			'$1',			'(',			')',		);		$keywords = preg_replace($match, $replace, $keywords);		$num_keywords = sizeof(explode(' ', $keywords));		// We limit the number of allowed keywords to minimize load on the database		if ($config['max_num_search_keywords'] && $num_keywords > $config['max_num_search_keywords'])		{			trigger_error($user->lang('MAX_NUM_SEARCH_KEYWORDS_REFINE', $config['max_num_search_keywords'], $num_keywords));		}		// $keywords input format: each word separated by a space, words in a bracket are not separated		// the user wants to search for any word, convert the search query		if ($terms == 'any')		{			$words = array();			preg_match_all('#([^\\s+\\-|()]+)(?:$|[\\s+\\-|()])#u', $keywords, $words);			if (sizeof($words[1]))			{				$keywords = '(' . implode('|', $words[1]) . ')';			}		}		// set the search_query which is shown to the user		$this->search_query = $keywords;		$exact_words = array();		preg_match_all('#([^\\s+\\-|*()]+)(?:$|[\\s+\\-|()])#u', $keywords, $exact_words);		$exact_words = $exact_words[1];		$common_ids = $words = array();		if (sizeof($exact_words))		{			$sql = 'SELECT word_id, word_text, word_common				FROM ' . SEARCH_WORDLIST_TABLE . '				WHERE ' . $db->sql_in_set('word_text', $exact_words) . '				ORDER BY word_count ASC';			$result = $db->sql_query($sql);			// store an array of words and ids, remove common words			while ($row = $db->sql_fetchrow($result))			{				if ($row['word_common'])				{					$this->common_words[] = $row['word_text'];					$common_ids[$row['word_text']] = (int) $row['word_id'];					continue;				}				$words[$row['word_text']] = (int) $row['word_id'];			}			$db->sql_freeresult($result);		}		unset($exact_words);		// now analyse the search query, first split it using the spaces		$query = explode(' ', $keywords);		$this->must_contain_ids = array();		$this->must_not_contain_ids = array();		$this->must_exclude_one_ids = array();		$mode = '';		$ignore_no_id = true;		foreach ($query as $word)		{			if (empty($word))			{				continue;			}			// words which should not be included			if ($word[0] == '-')			{				$word = substr($word, 1);				// a group of which at least one may not be in the resulting posts				if ($word[0] == '(')				{					$word = array_unique(explode('|', substr($word, 1, -1)));					$mode = 'must_exclude_one';				}				// one word which should not be in the resulting posts				else				{					$mode = 'must_not_contain';				}				$ignore_no_id = true;			}			// words which have to be included			else			{				// no prefix is the same as a +prefix				if ($word[0] == '+')				{					$word = substr($word, 1);				}				// a group of words of which at least one word should be in every resulting post				if ($word[0] == '(')				{					$word = array_unique(explode('|', substr($word, 1, -1)));				}				$ignore_no_id = false;				$mode = 'must_contain';			}			if (empty($word))			{				continue;			}			// if this is an array of words then retrieve an id for each			if (is_array($word))			{				$non_common_words = array();				$id_words = array();				foreach ($word as $i => $word_part)				{					if (strpos($word_part, '*') !== false)					{						$id_words[] = '\'' . $db->sql_escape(str_replace('*', '%', $word_part)) . '\'';						$non_common_words[] = $word_part;					}					else if (isset($words[$word_part]))					{						$id_words[] = $words[$word_part];						$non_common_words[] = $word_part;					}					else					{						$len = utf8_strlen($word_part);						if ($len < $this->word_length['min'] || $len > $this->word_length['max'])						{							$this->common_words[] = $word_part;						}					}				}				if (sizeof($id_words))				{					sort($id_words);					if (sizeof($id_words) > 1)					{						$this->{$mode . '_ids'}[] = $id_words;					}					else					{						$mode = ($mode == 'must_exclude_one') ? 'must_not_contain' : $mode;						$this->{$mode . '_ids'}[] = $id_words[0];					}				}				// throw an error if we shall not ignore unexistant words				else if (!$ignore_no_id && sizeof($non_common_words))				{					trigger_error(sprintf($user->lang['WORDS_IN_NO_POST'], implode(', ', $non_common_words)));				}				unset($non_common_words);			}			// else we only need one id			else if (($wildcard = strpos($word, '*') !== false) || isset($words[$word]))			{				if ($wildcard)				{					$len = utf8_strlen(str_replace('*', '', $word));					if ($len >= $this->word_length['min'] && $len <= $this->word_length['max'])					{						$this->{$mode . '_ids'}[] = '\'' . $db->sql_escape(str_replace('*', '%', $word)) . '\'';					}					else					{						$this->common_words[] = $word;					}				}				else				{					$this->{$mode . '_ids'}[] = $words[$word];				}			}			// throw an error if we shall not ignore unexistant words			else if (!$ignore_no_id)			{				if (!isset($common_ids[$word]))				{					$len = utf8_strlen($word);					if ($len >= $this->word_length['min'] && $len <= $this->word_length['max'])					{						trigger_error(sprintf($user->lang['WORD_IN_NO_POST'], $word));					}					else					{						$this->common_words[] = $word;					}				}			}			else			{				$len = utf8_strlen($word);				if ($len < $this->word_length['min'] || $len > $this->word_length['max'])				{					$this->common_words[] = $word;				}			}		}		// we can't search for negatives only		if (!sizeof($this->must_contain_ids))		{			return false;		}		if (!empty($this->search_query))		{			return true;		}		return false;	}	/**	* Performs a search on keywords depending on display specific params. You have to run split_keywords() first.	*	* @param	string		$type				contains either posts or topics depending on what should be searched for	* @param	string		$fields				contains either titleonly (topic titles should be searched), msgonly (only message bodies should be searched), firstpost (only subject and body of the first post should be searched) or all (all post bodies and subjects should be searched)	* @param	string		$terms				is either 'all' (use query as entered, words without prefix should default to "have to be in field") or 'any' (ignore search query parts and just return all posts that contain any of the specified words)	* @param	array		$sort_by_sql		contains SQL code for the ORDER BY part of a query	* @param	string		$sort_key			is the key of $sort_by_sql for the selected sorting	* @param	string		$sort_dir			is either a or d representing ASC and DESC	* @param	string		$sort_days			specifies the maximum amount of days a post may be old	* @param	array		$ex_fid_ary			specifies an array of forum ids which should not be searched	* @param	array		$m_approve_fid_ary	specifies an array of forum ids in which the searcher is allowed to view unapproved posts	* @param	int			$topic_id			is set to 0 or a topic id, if it is not 0 then only posts in this topic should be searched	* @param	array		$author_ary			an array of author ids if the author should be ignored during the search the array is empty	* @param	string		$author_name		specifies the author match, when ANONYMOUS is also a search-match	* @param	array		&$id_ary			passed by reference, to be filled with ids for the page specified by $start and $per_page, should be ordered	* @param	int			$start				indicates the first index of the page	* @param	int			$per_page			number of ids each page is supposed to contain	* @return	boolean|int						total number of results	*	* @access	public	*/	function keyword_search($type, $fields, $terms, $sort_by_sql, $sort_key, $sort_dir, $sort_days, $ex_fid_ary, $m_approve_fid_ary, $topic_id, $author_ary, $author_name, &$id_ary, $start, $per_page)	{		global $config, $db;		// No keywords? No posts.		if (empty($this->search_query))		{			return false;		}		$must_contain_ids = $this->must_contain_ids;		$must_not_contain_ids = $this->must_not_contain_ids;		$must_exclude_one_ids = $this->must_exclude_one_ids;		sort($must_contain_ids);		sort($must_not_contain_ids);		sort($must_exclude_one_ids);		// generate a search_key from all the options to identify the results		$search_key = md5(implode('#', array(			serialize($must_contain_ids),			serialize($must_not_contain_ids),			serialize($must_exclude_one_ids),			$type,			$fields,			$terms,			$sort_days,			$sort_key,			$topic_id,			implode(',', $ex_fid_ary),			implode(',', $m_approve_fid_ary),			implode(',', $author_ary),			$author_name,		)));		// try reading the results from cache		$total_results = 0;		if ($this->obtain_ids($search_key, $total_results, $id_ary, $start, $per_page, $sort_dir) == SEARCH_RESULT_IN_CACHE)		{			return $total_results;		}		$id_ary = array();		$sql_where = array();		$group_by = false;		$m_num = 0;		$w_num = 0;		$sql_array = array(			'SELECT'	=> ($type == 'posts') ? 'p.post_id' : 'p.topic_id',			'FROM'		=> array(				SEARCH_WORDMATCH_TABLE	=> array(),				SEARCH_WORDLIST_TABLE	=> array(),			),			'LEFT_JOIN' => array(array(				'FROM'	=> array(POSTS_TABLE => 'p'),				'ON'	=> 'm0.post_id = p.post_id',			)),		);		$title_match = '';		$left_join_topics = false;		$group_by = true;		// Build some display specific sql strings		switch ($fields)		{			case 'titleonly':				$title_match = 'title_match = 1';				$group_by = false;			// no break			case 'firstpost':				$left_join_topics = true;				$sql_where[] = 'p.post_id = t.topic_first_post_id';			break;			case 'msgonly':				$title_match = 'title_match = 0';				$group_by = false;			break;		}		if ($type == 'topics')		{			$left_join_topics = true;			$group_by = true;		}		/**		* @todo Add a query optimizer (handle stuff like "+(4|3) +4")		*/		foreach ($this->must_contain_ids as $subquery)		{			if (is_array($subquery))			{				$group_by = true;				$word_id_sql = array();				$word_ids = array();				foreach ($subquery as $id)				{					if (is_string($id))					{						$sql_array['LEFT_JOIN'][] = array(							'FROM'	=> array(SEARCH_WORDLIST_TABLE => 'w' . $w_num),							'ON'	=> "w$w_num.word_text LIKE $id"						);						$word_ids[] = "w$w_num.word_id";						$w_num++;					}					else					{						$word_ids[] = $id;					}				}				$sql_where[] = $db->sql_in_set("m$m_num.word_id", $word_ids);				unset($word_id_sql);				unset($word_ids);			}			else if (is_string($subquery))			{				$sql_array['FROM'][SEARCH_WORDLIST_TABLE][] = 'w' . $w_num;				$sql_where[] = "w$w_num.word_text LIKE $subquery";				$sql_where[] = "m$m_num.word_id = w$w_num.word_id";				$group_by = true;				$w_num++;			}			else			{				$sql_where[] = "m$m_num.word_id = $subquery";			}			$sql_array['FROM'][SEARCH_WORDMATCH_TABLE][] = 'm' . $m_num;			if ($title_match)			{				$sql_where[] = "m$m_num.$title_match";			}			if ($m_num != 0)			{				$sql_where[] = "m$m_num.post_id = m0.post_id";			}			$m_num++;		}		foreach ($this->must_not_contain_ids as $key => $subquery)		{			if (is_string($subquery))			{				$sql_array['LEFT_JOIN'][] = array(					'FROM'	=> array(SEARCH_WORDLIST_TABLE => 'w' . $w_num),					'ON'	=> "w$w_num.word_text LIKE $subquery"				);				$this->must_not_contain_ids[$key] = "w$w_num.word_id";				$group_by = true;				$w_num++;			}		}		if (sizeof($this->must_not_contain_ids))		{			$sql_array['LEFT_JOIN'][] = array(				'FROM'	=> array(SEARCH_WORDMATCH_TABLE => 'm' . $m_num),				'ON'	=> $db->sql_in_set("m$m_num.word_id", $this->must_not_contain_ids) . (($title_match) ? " AND m$m_num.$title_match" : '') . " AND m$m_num.post_id = m0.post_id"			);			$sql_where[] = "m$m_num.word_id IS NULL";			$m_num++;		}		foreach ($this->must_exclude_one_ids as $ids)		{			$is_null_joins = array();			foreach ($ids as $id)			{				if (is_string($id))				{					$sql_array['LEFT_JOIN'][] = array(						'FROM'	=> array(SEARCH_WORDLIST_TABLE => 'w' . $w_num),						'ON'	=> "w$w_num.word_text LIKE $id"					);					$id = "w$w_num.word_id";					$group_by = true;					$w_num++;				}				$sql_array['LEFT_JOIN'][] = array(					'FROM'	=> array(SEARCH_WORDMATCH_TABLE => 'm' . $m_num),					'ON'	=> "m$m_num.word_id = $id AND m$m_num.post_id = m0.post_id" . (($title_match) ? " AND m$m_num.$title_match" : '')				);				$is_null_joins[] = "m$m_num.word_id IS NULL";				$m_num++;			}			$sql_where[] = '(' . implode(' OR ', $is_null_joins) . ')';		}		if (!sizeof($m_approve_fid_ary))		{			$sql_where[] = 'p.post_approved = 1';		}		else if ($m_approve_fid_ary !== array(-1))		{			$sql_where[] = '(p.post_approved = 1 OR ' . $db->sql_in_set('p.forum_id', $m_approve_fid_ary, true) . ')';		}		if ($topic_id)		{			$sql_where[] = 'p.topic_id = ' . $topic_id;		}		if (sizeof($author_ary))		{			if ($author_name)			{				// first one matches post of registered users, second one guests and deleted users				$sql_author = '(' . $db->sql_in_set('p.poster_id', array_diff($author_ary, array(ANONYMOUS)), false, true) . ' OR p.post_username ' . $author_name . ')';			}			else			{				$sql_author = $db->sql_in_set('p.poster_id', $author_ary);			}			$sql_where[] = $sql_author;		}		if (sizeof($ex_fid_ary))		{			$sql_where[] = $db->sql_in_set('p.forum_id', $ex_fid_ary, true);		}		if ($sort_days)		{			$sql_where[] = 'p.post_time >= ' . (time() - ($sort_days * 86400));		}		$sql_array['WHERE'] = implode(' AND ', $sql_where);		$is_mysql = false;		// if the total result count is not cached yet, retrieve it from the db		if (!$total_results)		{			$sql = '';			$sql_array_count = $sql_array;			if ($left_join_topics)			{				$sql_array_count['LEFT_JOIN'][] = array(					'FROM'	=> array(TOPICS_TABLE => 't'),					'ON'	=> 'p.topic_id = t.topic_id'				);			}			switch ($db->sql_layer)			{				case 'mysql4':				case 'mysqli':					// 3.x does not support SQL_CALC_FOUND_ROWS					// $sql_array['SELECT'] = 'SQL_CALC_FOUND_ROWS ' . $sql_array['SELECT'];					$is_mysql = true;				break;				case 'sqlite':					$sql_array_count['SELECT'] = ($type == 'posts') ? 'DISTINCT p.post_id' : 'DISTINCT p.topic_id';					$sql = 'SELECT COUNT(' . (($type == 'posts') ? 'post_id' : 'topic_id') . ') as total_results							FROM (' . $db->sql_build_query('SELECT', $sql_array_count) . ')';				// no break				default:					$sql_array_count['SELECT'] = ($type == 'posts') ? 'COUNT(DISTINCT p.post_id) AS total_results' : 'COUNT(DISTINCT p.topic_id) AS total_results';					$sql = (!$sql) ? $db->sql_build_query('SELECT', $sql_array_count) : $sql;					$result = $db->sql_query($sql);					$total_results = (int) $db->sql_fetchfield('total_results');					$db->sql_freeresult($result);					if (!$total_results)					{						return false;					}				break;			}			unset($sql_array_count, $sql);		}		// Build sql strings for sorting		$sql_sort = $sort_by_sql[$sort_key] . (($sort_dir == 'a') ? ' ASC' : ' DESC');		switch ($sql_sort[0])		{			case 'u':				$sql_array['FROM'][USERS_TABLE] = 'u';				$sql_where[] = 'u.user_id = p.poster_id ';			break;			case 't':				$left_join_topics = true;			break;			case 'f':				$sql_array['FROM'][FORUMS_TABLE] = 'f';				$sql_where[] = 'f.forum_id = p.forum_id';			break;		}		if ($left_join_topics)		{			$sql_array['LEFT_JOIN'][] = array(				'FROM'	=> array(TOPICS_TABLE => 't'),				'ON'	=> 'p.topic_id = t.topic_id'			);		}		$sql_array['WHERE'] = implode(' AND ', $sql_where);		$sql_array['GROUP_BY'] = ($group_by) ? (($type == 'posts') ? 'p.post_id' : 'p.topic_id') . ', ' . $sort_by_sql[$sort_key] : '';		$sql_array['ORDER_BY'] = $sql_sort;		unset($sql_where, $sql_sort, $group_by);		$sql = $db->sql_build_query('SELECT', $sql_array);		$result = $db->sql_query_limit($sql, $config['search_block_size'], $start);		while ($row = $db->sql_fetchrow($result))		{			$id_ary[] = (int) $row[(($type == 'posts') ? 'post_id' : 'topic_id')];		}		$db->sql_freeresult($result);		if (!sizeof($id_ary))		{			return false;		}		// if we use mysql and the total result count is not cached yet, retrieve it from the db		if (!$total_results && $is_mysql)		{			// Count rows for the executed queries. Replace $select within $sql with SQL_CALC_FOUND_ROWS, and run it.			$sql_array_copy = $sql_array;			$sql_array_copy['SELECT'] = 'SQL_CALC_FOUND_ROWS p.post_id ';			$sql = $db->sql_build_query('SELECT', $sql_array_copy);			unset($sql_array_copy);			$db->sql_query($sql);			$db->sql_freeresult($result);			$sql = 'SELECT FOUND_ROWS() as total_results';			$result = $db->sql_query($sql);			$total_results = (int) $db->sql_fetchfield('total_results');			$db->sql_freeresult($result);			if (!$total_results)			{				return false;			}		}		// store the ids, from start on then delete anything that isn't on the current page because we only need ids for one page		$this->save_ids($search_key, $this->search_query, $author_ary, $total_results, $id_ary, $start, $sort_dir);		$id_ary = array_slice($id_ary, 0, (int) $per_page);		return $total_results;	}	/**	* Performs a search on an author's posts without caring about message contents. Depends on display specific params	*	* @param	string		$type				contains either posts or topics depending on what should be searched for	* @param	boolean		$firstpost_only		if true, only topic starting posts will be considered	* @param	array		$sort_by_sql		contains SQL code for the ORDER BY part of a query	* @param	string		$sort_key			is the key of $sort_by_sql for the selected sorting	* @param	string		$sort_dir			is either a or d representing ASC and DESC	* @param	string		$sort_days			specifies the maximum amount of days a post may be old	* @param	array		$ex_fid_ary			specifies an array of forum ids which should not be searched	* @param	array		$m_approve_fid_ary	specifies an array of forum ids in which the searcher is allowed to view unapproved posts	* @param	int			$topic_id			is set to 0 or a topic id, if it is not 0 then only posts in this topic should be searched	* @param	array		$author_ary			an array of author ids	* @param	string		$author_name		specifies the author match, when ANONYMOUS is also a search-match	* @param	array		&$id_ary			passed by reference, to be filled with ids for the page specified by $start and $per_page, should be ordered	* @param	int			$start				indicates the first index of the page	* @param	int			$per_page			number of ids each page is supposed to contain	* @return	boolean|int						total number of results	*	* @access	public	*/	function author_search($type, $firstpost_only, $sort_by_sql, $sort_key, $sort_dir, $sort_days, $ex_fid_ary, $m_approve_fid_ary, $topic_id, $author_ary, $author_name, &$id_ary, $start, $per_page)	{		global $config, $db;		// No author? No posts.		if (!sizeof($author_ary))		{			return 0;		}		// generate a search_key from all the options to identify the results		$search_key = md5(implode('#', array(			'',			$type,			($firstpost_only) ? 'firstpost' : '',			'',			'',			$sort_days,			$sort_key,			$topic_id,			implode(',', $ex_fid_ary),			implode(',', $m_approve_fid_ary),			implode(',', $author_ary),			$author_name,		)));		// try reading the results from cache		$total_results = 0;		if ($this->obtain_ids($search_key, $total_results, $id_ary, $start, $per_page, $sort_dir) == SEARCH_RESULT_IN_CACHE)		{			return $total_results;		}		$id_ary = array();		// Create some display specific sql strings		if ($author_name)		{			// first one matches post of registered users, second one guests and deleted users			$sql_author = '(' . $db->sql_in_set('p.poster_id', array_diff($author_ary, array(ANONYMOUS)), false, true) . ' OR p.post_username ' . $author_name . ')';		}		else		{			$sql_author = $db->sql_in_set('p.poster_id', $author_ary);		}		$sql_fora		= (sizeof($ex_fid_ary)) ? ' AND ' . $db->sql_in_set('p.forum_id', $ex_fid_ary, true) : '';		$sql_time		= ($sort_days) ? ' AND p.post_time >= ' . (time() - ($sort_days * 86400)) : '';		$sql_topic_id	= ($topic_id) ? ' AND p.topic_id = ' . (int) $topic_id : '';		$sql_firstpost = ($firstpost_only) ? ' AND p.post_id = t.topic_first_post_id' : '';		// Build sql strings for sorting		$sql_sort = $sort_by_sql[$sort_key] . (($sort_dir == 'a') ? ' ASC' : ' DESC');		$sql_sort_table = $sql_sort_join = '';		switch ($sql_sort[0])		{			case 'u':				$sql_sort_table	= USERS_TABLE . ' u, ';				$sql_sort_join	= ' AND u.user_id = p.poster_id ';			break;			case 't':				$sql_sort_table	= ($type == 'posts' && !$firstpost_only) ? TOPICS_TABLE . ' t, ' : '';				$sql_sort_join	= ($type == 'posts' && !$firstpost_only) ? ' AND t.topic_id = p.topic_id ' : '';			break;			case 'f':				$sql_sort_table	= FORUMS_TABLE . ' f, ';				$sql_sort_join	= ' AND f.forum_id = p.forum_id ';			break;		}		if (!sizeof($m_approve_fid_ary))		{			$m_approve_fid_sql = ' AND p.post_approved = 1';		}		else if ($m_approve_fid_ary == array(-1))		{			$m_approve_fid_sql = '';		}		else		{			$m_approve_fid_sql = ' AND (p.post_approved = 1 OR ' . $db->sql_in_set('p.forum_id', $m_approve_fid_ary, true) . ')';		}		$select = ($type == 'posts') ? 'p.post_id' : 't.topic_id';		$is_mysql = false;		// If the cache was completely empty count the results		if (!$total_results)		{			switch ($db->sql_layer)			{				case 'mysql4':				case 'mysqli'://					$select = 'SQL_CALC_FOUND_ROWS ' . $select;					$is_mysql = true;				break;				default:					if ($type == 'posts')					{						$sql = 'SELECT COUNT(p.post_id) as total_results							FROM ' . POSTS_TABLE . ' p' . (($firstpost_only) ? ', ' . TOPICS_TABLE . ' t ' : ' ') . "							WHERE $sql_author								$sql_topic_id								$sql_firstpost								$m_approve_fid_sql								$sql_fora								$sql_time";					}					else					{						if ($db->sql_layer == 'sqlite')						{							$sql = 'SELECT COUNT(topic_id) as total_results								FROM (SELECT DISTINCT t.topic_id';						}						else						{							$sql = 'SELECT COUNT(DISTINCT t.topic_id) as total_results';						}						$sql .= ' FROM ' . TOPICS_TABLE . ' t, ' . POSTS_TABLE . " p							WHERE $sql_author								$sql_topic_id								$sql_firstpost								$m_approve_fid_sql								$sql_fora								AND t.topic_id = p.topic_id								$sql_time" . (($db->sql_layer == 'sqlite') ? ')' : '');					}					$result = $db->sql_query($sql);					$total_results = (int) $db->sql_fetchfield('total_results');					$db->sql_freeresult($result);					if (!$total_results)					{						return false;					}				break;			}		}		// Build the query for really selecting the post_ids		if ($type == 'posts')		{			$sql = "SELECT $select				FROM " . $sql_sort_table . POSTS_TABLE . ' p' . (($firstpost_only) ? ', ' . TOPICS_TABLE . ' t' : '') . "				WHERE $sql_author					$sql_topic_id					$sql_firstpost					$m_approve_fid_sql					$sql_fora					$sql_sort_join					$sql_time				ORDER BY $sql_sort";			$field = 'post_id';		}		else		{			$sql = "SELECT $select				FROM " . $sql_sort_table . TOPICS_TABLE . ' t, ' . POSTS_TABLE . " p				WHERE $sql_author					$sql_topic_id					$sql_firstpost					$m_approve_fid_sql					$sql_fora					AND t.topic_id = p.topic_id					$sql_sort_join					$sql_time				GROUP BY t.topic_id, " . $sort_by_sql[$sort_key] . '				ORDER BY ' . $sql_sort;			$field = 'topic_id';		}		// Only read one block of posts from the db and then cache it		$result = $db->sql_query_limit($sql, $config['search_block_size'], $start);		while ($row = $db->sql_fetchrow($result))		{			$id_ary[] = (int) $row[$field];		}		$db->sql_freeresult($result);		if (!$total_results && $is_mysql)		{			// Count rows for the executed queries. Replace $select within $sql with SQL_CALC_FOUND_ROWS, and run it.			$sql = str_replace('SELECT ' . $select, 'SELECT DISTINCT SQL_CALC_FOUND_ROWS p.post_id', $sql);			$db->sql_query($sql);			$db->sql_freeresult($result);			$sql = 'SELECT FOUND_ROWS() as total_results';			$result = $db->sql_query($sql);			$total_results = (int) $db->sql_fetchfield('total_results');			$db->sql_freeresult($result);			if (!$total_results)			{				return false;			}		}		if (sizeof($id_ary))		{			$this->save_ids($search_key, '', $author_ary, $total_results, $id_ary, $start, $sort_dir);			$id_ary = array_slice($id_ary, 0, $per_page);			return $total_results;		}		return false;	}	/**	* Split a text into words of a given length	*	* The text is converted to UTF-8, cleaned up, and split. Then, words that	* conform to the defined length range are returned in an array.	*	* NOTE: duplicates are NOT removed from the return array	*	* @param	string	$text	Text to split, encoded in UTF-8	* @return	array			Array of UTF-8 words	*	* @access	private	*/	function split_message($text)	{		global $phpbb_root_path, $phpEx, $user;		$match = $words = array();		/**		* Taken from the original code		*/		// Do not index code		$match[] = '#\[code(?:=.*?)?(\:?[0-9a-z]{5,})\].*?\[\/code(\:?[0-9a-z]{5,})\]#is';		// BBcode		$match[] = '#\[\/?[a-z0-9\*\+\-]+(?:=.*?)?(?::[a-z])?(\:?[0-9a-z]{5,})\]#';		$min = $this->word_length['min'];		$max = $this->word_length['max'];		$isset_min = $min - 1;		/**		* Clean up the string, remove HTML tags, remove BBCodes		*/		$word = strtok($this->cleanup(preg_replace($match, ' ', strip_tags($text)), -1), ' ');		while (strlen($word))		{			if (strlen($word) > 255 || strlen($word) <= $isset_min)			{				/**				* Words longer than 255 bytes are ignored. This will have to be				* changed whenever we change the length of search_wordlist.word_text				*				* Words shorter than $isset_min bytes are ignored, too				*/				$word = strtok(' ');				continue;			}			$len = utf8_strlen($word);			/**			* Test whether the word is too short to be indexed.			*			* Note that this limit does NOT apply to CJK and Hangul			*/			if ($len < $min)			{				/**				* Note: this could be optimized. If the codepoint is lower than Hangul's range				* we know that it will also be lower than CJK ranges				*/				if ((strncmp($word, UTF8_HANGUL_FIRST, 3) < 0 || strncmp($word, UTF8_HANGUL_LAST, 3) > 0)				 && (strncmp($word, UTF8_CJK_FIRST, 3) < 0 || strncmp($word, UTF8_CJK_LAST, 3) > 0)				 && (strncmp($word, UTF8_CJK_B_FIRST, 4) < 0 || strncmp($word, UTF8_CJK_B_LAST, 4) > 0))				{					$word = strtok(' ');					continue;				}			}			$words[] = $word;			$word = strtok(' ');		}		return $words;	}	/**	* Updates wordlist and wordmatch tables when a message is posted or changed	*	* @param	string	$mode		Contains the post mode: edit, post, reply, quote	* @param	int		$post_id	The id of the post which is modified/created	* @param	string	&$message	New or updated post content	* @param	string	&$subject	New or updated post subject	* @param	int		$poster_id	Post author's user id	* @param	int		$forum_id	The id of the forum in which the post is located	*	* @access	public	*/	function index($mode, $post_id, &$message, &$subject, $poster_id, $forum_id)	{		global $config, $db, $user;		if (!$config['fulltext_native_load_upd'])		{			/**			* The search indexer is disabled, return			*/			return;		}		// Split old and new post/subject to obtain array of 'words'		$split_text = $this->split_message($message);		$split_title = $this->split_message($subject);		$cur_words = array('post' => array(), 'title' => array());		$words = array();		if ($mode == 'edit')		{			$words['add']['post'] = array();			$words['add']['title'] = array();			$words['del']['post'] = array();			$words['del']['title'] = array();			$sql = 'SELECT w.word_id, w.word_text, m.title_match				FROM ' . SEARCH_WORDLIST_TABLE . ' w, ' . SEARCH_WORDMATCH_TABLE . " m				WHERE m.post_id = $post_id					AND w.word_id = m.word_id";			$result = $db->sql_query($sql);			while ($row = $db->sql_fetchrow($result))			{				$which = ($row['title_match']) ? 'title' : 'post';				$cur_words[$which][$row['word_text']] = $row['word_id'];			}			$db->sql_freeresult($result);			$words['add']['post'] = array_diff($split_text, array_keys($cur_words['post']));			$words['add']['title'] = array_diff($split_title, array_keys($cur_words['title']));			$words['del']['post'] = array_diff(array_keys($cur_words['post']), $split_text);			$words['del']['title'] = array_diff(array_keys($cur_words['title']), $split_title);		}		else		{			$words['add']['post'] = $split_text;			$words['add']['title'] = $split_title;			$words['del']['post'] = array();			$words['del']['title'] = array();		}		unset($split_text);		unset($split_title);		// Get unique words from the above arrays		$unique_add_words = array_unique(array_merge($words['add']['post'], $words['add']['title']));		// We now have unique arrays of all words to be added and removed and		// individual arrays of added and removed words for text and title. What		// we need to do now is add the new words (if they don't already exist)		// and then add (or remove) matches between the words and this post		if (sizeof($unique_add_words))		{			$sql = 'SELECT word_id, word_text				FROM ' . SEARCH_WORDLIST_TABLE . '				WHERE ' . $db->sql_in_set('word_text', $unique_add_words);			$result = $db->sql_query($sql);			$word_ids = array();			while ($row = $db->sql_fetchrow($result))			{				$word_ids[$row['word_text']] = $row['word_id'];			}			$db->sql_freeresult($result);			$new_words = array_diff($unique_add_words, array_keys($word_ids));			$db->sql_transaction('begin');			if (sizeof($new_words))			{				$sql_ary = array();				foreach ($new_words as $word)				{					$sql_ary[] = array('word_text' => (string) $word, 'word_count' => 0);				}				$db->sql_return_on_error(true);				$db->sql_multi_insert(SEARCH_WORDLIST_TABLE, $sql_ary);				$db->sql_return_on_error(false);			}			unset($new_words, $sql_ary);		}		else		{			$db->sql_transaction('begin');		}		// now update the search match table, remove links to removed words and add links to new words		foreach ($words['del'] as $word_in => $word_ary)		{			$title_match = ($word_in == 'title') ? 1 : 0;			if (sizeof($word_ary))			{				$sql_in = array();				foreach ($word_ary as $word)				{					$sql_in[] = $cur_words[$word_in][$word];				}				$sql = 'DELETE FROM ' . SEARCH_WORDMATCH_TABLE . '					WHERE ' . $db->sql_in_set('word_id', $sql_in) . '						AND post_id = ' . intval($post_id) . "						AND title_match = $title_match";				$db->sql_query($sql);				$sql = 'UPDATE ' . SEARCH_WORDLIST_TABLE . '					SET word_count = word_count - 1					WHERE ' . $db->sql_in_set('word_id', $sql_in) . '						AND word_count > 0';				$db->sql_query($sql);				unset($sql_in);			}		}		$db->sql_return_on_error(true);		foreach ($words['add'] as $word_in => $word_ary)		{			$title_match = ($word_in == 'title') ? 1 : 0;			if (sizeof($word_ary))			{				$sql = 'INSERT INTO ' . SEARCH_WORDMATCH_TABLE . ' (post_id, word_id, title_match)					SELECT ' . (int) $post_id . ', word_id, ' . (int) $title_match . '					FROM ' . SEARCH_WORDLIST_TABLE . '					WHERE ' . $db->sql_in_set('word_text', $word_ary);				$db->sql_query($sql);				$sql = 'UPDATE ' . SEARCH_WORDLIST_TABLE . '					SET word_count = word_count + 1					WHERE ' . $db->sql_in_set('word_text', $word_ary);				$db->sql_query($sql);			}		}		$db->sql_return_on_error(false);		$db->sql_transaction('commit');		// destroy cached search results containing any of the words removed or added		$this->destroy_cache(array_unique(array_merge($words['add']['post'], $words['add']['title'], $words['del']['post'], $words['del']['title'])), array($poster_id));		unset($unique_add_words);		unset($words);		unset($cur_words);	}	/**	* Removes entries from the wordmatch table for the specified post_ids	*/	function index_remove($post_ids, $author_ids, $forum_ids)	{		global $db;		if (sizeof($post_ids))		{			$sql = 'SELECT w.word_id, w.word_text, m.title_match				FROM ' . SEARCH_WORDMATCH_TABLE . ' m, ' . SEARCH_WORDLIST_TABLE . ' w				WHERE ' . $db->sql_in_set('m.post_id', $post_ids) . '					AND w.word_id = m.word_id';			$result = $db->sql_query($sql);			$message_word_ids = $title_word_ids = $word_texts = array();			while ($row = $db->sql_fetchrow($result))			{				if ($row['title_match'])				{					$title_word_ids[] = $row['word_id'];				}				else				{					$message_word_ids[] = $row['word_id'];				}				$word_texts[] = $row['word_text'];			}			$db->sql_freeresult($result);			if (sizeof($title_word_ids))			{				$sql = 'UPDATE ' . SEARCH_WORDLIST_TABLE . '					SET word_count = word_count - 1					WHERE ' . $db->sql_in_set('word_id', $title_word_ids) . '						AND word_count > 0';				$db->sql_query($sql);			}			if (sizeof($message_word_ids))			{				$sql = 'UPDATE ' . SEARCH_WORDLIST_TABLE . '					SET word_count = word_count - 1					WHERE ' . $db->sql_in_set('word_id', $message_word_ids) . '						AND word_count > 0';				$db->sql_query($sql);			}			unset($title_word_ids);			unset($message_word_ids);			$sql = 'DELETE FROM ' . SEARCH_WORDMATCH_TABLE . '				WHERE ' . $db->sql_in_set('post_id', $post_ids);			$db->sql_query($sql);		}		$this->destroy_cache(array_unique($word_texts), $author_ids);	}	/**	* Tidy up indexes: Tag 'common words' and remove	* words no longer referenced in the match table	*/	function tidy()	{		global $db, $config;		// Is the fulltext indexer disabled? If yes then we need not		// carry on ... it's okay ... I know when I'm not wanted boo hoo		if (!$config['fulltext_native_load_upd'])		{			set_config('search_last_gc', time(), true);			return;		}		$destroy_cache_words = array();		// Remove common words		if ($config['num_posts'] >= 100 && $config['fulltext_native_common_thres'])		{			$common_threshold = ((double) $config['fulltext_native_common_thres']) / 100.0;			// First, get the IDs of common words			$sql = 'SELECT word_id, word_text				FROM ' . SEARCH_WORDLIST_TABLE . '				WHERE word_count > ' . floor($config['num_posts'] * $common_threshold) . '					OR word_common = 1';			$result = $db->sql_query($sql);			$sql_in = array();			while ($row = $db->sql_fetchrow($result))			{				$sql_in[] = $row['word_id'];				$destroy_cache_words[] = $row['word_text'];			}			$db->sql_freeresult($result);			if (sizeof($sql_in))			{				// Flag the words				$sql = 'UPDATE ' . SEARCH_WORDLIST_TABLE . '					SET word_common = 1					WHERE ' . $db->sql_in_set('word_id', $sql_in);				$db->sql_query($sql);				// by setting search_last_gc to the new time here we make sure that if a user reloads because the				// following query takes too long, he won't run into it again				set_config('search_last_gc', time(), true);				// Delete the matches				$sql = 'DELETE FROM ' . SEARCH_WORDMATCH_TABLE . '					WHERE ' . $db->sql_in_set('word_id', $sql_in);				$db->sql_query($sql);			}			unset($sql_in);		}		if (sizeof($destroy_cache_words))		{			// destroy cached search results containing any of the words that are now common or were removed			$this->destroy_cache(array_unique($destroy_cache_words));		}		set_config('search_last_gc', time(), true);	}	/**	* Deletes all words from the index	*/	function delete_index($acp_module, $u_action)	{		global $db;		switch ($db->sql_layer)		{			case 'sqlite':			case 'firebird':				$db->sql_query('DELETE FROM ' . SEARCH_WORDLIST_TABLE);				$db->sql_query('DELETE FROM ' . SEARCH_WORDMATCH_TABLE);				$db->sql_query('DELETE FROM ' . SEARCH_RESULTS_TABLE);			break;			default:				$db->sql_query('TRUNCATE TABLE ' . SEARCH_WORDLIST_TABLE);				$db->sql_query('TRUNCATE TABLE ' . SEARCH_WORDMATCH_TABLE);				$db->sql_query('TRUNCATE TABLE ' . SEARCH_RESULTS_TABLE);			break;		}	}	/**	* Returns true if both FULLTEXT indexes exist	*/	function index_created()	{		if (!sizeof($this->stats))		{			$this->get_stats();		}		return ($this->stats['total_words'] && $this->stats['total_matches']) ? true : false;	}	/**	* Returns an associative array containing information about the indexes	*/	function index_stats()	{		global $user;		if (!sizeof($this->stats))		{			$this->get_stats();		}		return array(			$user->lang['TOTAL_WORDS']		=> $this->stats['total_words'],			$user->lang['TOTAL_MATCHES']	=> $this->stats['total_matches']);	}	function get_stats()	{		global $db;		$sql = 'SELECT COUNT(*) as total_words			FROM ' . SEARCH_WORDLIST_TABLE;		$result = $db->sql_query($sql);		$this->stats['total_words'] = (int) $db->sql_fetchfield('total_words');		$db->sql_freeresult($result);		$sql = 'SELECT COUNT(*) as total_matches			FROM ' . SEARCH_WORDMATCH_TABLE;		$result = $db->sql_query($sql);		$this->stats['total_matches'] = (int) $db->sql_fetchfield('total_matches');		$db->sql_freeresult($result);	}	/**	* Clean up a text to remove non-alphanumeric characters	*	* This method receives a UTF-8 string, normalizes and validates it, replaces all	* non-alphanumeric characters with strings then returns the result.	*	* Any number of "allowed chars" can be passed as a UTF-8 string in NFC.	*	* @param	string	$text			Text to split, in UTF-8 (not normalized or sanitized)	* @param	string	$allowed_chars	String of special chars to allow	* @param	string	$encoding		Text encoding	* @return	string					Cleaned up text, only alphanumeric chars are left	*	* @todo normalizer::cleanup being able to be used?	*/	function cleanup($text, $allowed_chars = null, $encoding = 'utf-8')	{		global $phpbb_root_path, $phpEx;		static $conv = array(), $conv_loaded = array();		$words = $allow = array();		// Convert the text to UTF-8		$encoding = strtolower($encoding);		if ($encoding != 'utf-8')		{			$text = utf8_recode($text, $encoding);		}		$utf_len_mask = array(			"\xC0"	=>	2,			"\xD0"	=>	2,			"\xE0"	=>	3,			"\xF0"	=>	4		);		/**		* Replace HTML entities and NCRs		*/		$text = htmlspecialchars_decode(utf8_decode_ncr($text), ENT_QUOTES);		/**		* Load the UTF-8 normalizer		*		* If we use it more widely, an instance of that class should be held in a		* a global variable instead		*/		utf_normalizer::nfc($text);		/**		* The first thing we do is:		*		* - convert ASCII-7 letters to lowercase		* - remove the ASCII-7 non-alpha characters		* - remove the bytes that should not appear in a valid UTF-8 string: 0xC0,		*   0xC1 and 0xF5-0xFF		*		* @todo in theory, the third one is already taken care of during normalization and those chars should have been replaced by Unicode replacement chars		*/		$sb_match	= "ISTCPAMELRDOJBNHFGVWUQKYXZ\r\n\t!\"#$%&'()*+,-./:;<=>?@[\\]^_`{|}~\x00\x01\x02\x03\x04\x05\x06\x07\x08\x0B\x0C\x0E\x0F\x10\x11\x12\x13\x14\x15\x16\x17\x18\x19\x1A\x1B\x1C\x1D\x1E\x1F\xC0\xC1\xF5\xF6\xF7\xF8\xF9\xFA\xFB\xFC\xFD\xFE\xFF";		$sb_replace	= 'istcpamelrdojbnhfgvwuqkyxz                                                                              ';		/**		* This is the list of legal ASCII chars, it is automatically extended		* with ASCII chars from $allowed_chars		*/		$legal_ascii = ' eaisntroludcpmghbfvq10xy2j9kw354867z';		/**		* Prepare an array containing the extra chars to allow		*/		if (isset($allowed_chars[0]))		{			$pos = 0;			$len = strlen($allowed_chars);			do			{				$c = $allowed_chars[$pos];				if ($c < "\x80")				{					/**					* ASCII char					*/					$sb_pos = strpos($sb_match, $c);					if (is_int($sb_pos))					{						/**						* Remove the char from $sb_match and its corresponding						* replacement in $sb_replace						*/						$sb_match = substr($sb_match, 0, $sb_pos) . substr($sb_match, $sb_pos + 1);						$sb_replace = substr($sb_replace, 0, $sb_pos) . substr($sb_replace, $sb_pos + 1);						$legal_ascii .= $c;					}					++$pos;				}				else				{					/**					* UTF-8 char					*/					$utf_len = $utf_len_mask[$c & "\xF0"];					$allow[substr($allowed_chars, $pos, $utf_len)] = 1;					$pos += $utf_len;				}			}			while ($pos < $len);		}		$text = strtr($text, $sb_match, $sb_replace);		$ret = '';		$pos = 0;		$len = strlen($text);		do		{			/**			* Do all consecutive ASCII chars at once			*/			if ($spn = strspn($text, $legal_ascii, $pos))			{				$ret .= substr($text, $pos, $spn);				$pos += $spn;			}			if ($pos >= $len)			{				return $ret;			}			/**			* Capture the UTF char			*/			$utf_len = $utf_len_mask[$text[$pos] & "\xF0"];			$utf_char = substr($text, $pos, $utf_len);			$pos += $utf_len;			if (($utf_char >= UTF8_HANGUL_FIRST && $utf_char <= UTF8_HANGUL_LAST)			 || ($utf_char >= UTF8_CJK_FIRST && $utf_char <= UTF8_CJK_LAST)			 || ($utf_char >= UTF8_CJK_B_FIRST && $utf_char <= UTF8_CJK_B_LAST))			{				/**				* All characters within these ranges are valid				*				* We separate them with a space in order to index each character				* individually				*/				$ret .= ' ' . $utf_char . ' ';				continue;			}			if (isset($allow[$utf_char]))			{				/**				* The char is explicitly allowed				*/				$ret .= $utf_char;				continue;			}			if (isset($conv[$utf_char]))			{				/**				* The char is mapped to something, maybe to itself actually				*/				$ret .= $conv[$utf_char];				continue;			}			/**			* The char isn't mapped, but did we load its conversion table?			*			* The search indexer table is split into blocks. The block number of			* each char is equal to its codepoint right-shifted for 11 bits. It			* means that out of the 11, 16 or 21 meaningful bits of a 2-, 3- or			* 4- byte sequence we only keep the leftmost 0, 5 or 10 bits. Thus,			* all UTF chars encoded in 2 bytes are in the same first block.			*/			if (isset($utf_char[2]))			{				if (isset($utf_char[3]))				{					/**					* 1111 0nnn 10nn nnnn 10nx xxxx 10xx xxxx					* 0000 0111 0011 1111 0010 0000					*/					$idx = ((ord($utf_char[0]) & 0x07) << 7) | ((ord($utf_char[1]) & 0x3F) << 1) | ((ord($utf_char[2]) & 0x20) >> 5);				}				else				{					/**					* 1110 nnnn 10nx xxxx 10xx xxxx					* 0000 0111 0010 0000					*/					$idx = ((ord($utf_char[0]) & 0x07) << 1) | ((ord($utf_char[1]) & 0x20) >> 5);				}			}			else			{				/**				* 110x xxxx 10xx xxxx				* 0000 0000 0000 0000				*/				$idx = 0;			}			/**			* Check if the required conv table has been loaded already			*/			if (!isset($conv_loaded[$idx]))			{				$conv_loaded[$idx] = 1;				$file = $phpbb_root_path . 'includes/utf/data/search_indexer_' . $idx . '.' . $phpEx;				if (file_exists($file))				{					$conv += include($file);				}			}			if (isset($conv[$utf_char]))			{				$ret .= $conv[$utf_char];			}			else			{				/**				* We add an entry to the conversion table so that we				* don't have to convert to codepoint and perform the checks				* that are above this block				*/				$conv[$utf_char] = ' ';				$ret .= ' ';			}		}		while (1);		return $ret;	}	/**	* Returns a list of options for the ACP to display	*/	function acp()	{		global $user, $config;		/**		* if we need any options, copied from fulltext_native for now, will have to be adjusted or removed		*/		$tpl = '		<dl>			<dt><label for="fulltext_native_load_upd">' . $user->lang['YES_SEARCH_UPDATE'] . ':</label><br /><span>' . $user->lang['YES_SEARCH_UPDATE_EXPLAIN'] . '</span></dt>			<dd><label><input type="radio" id="fulltext_native_load_upd" name="config[fulltext_native_load_upd]" value="1"' . (($config['fulltext_native_load_upd']) ? ' checked="checked"' : '') . ' class="radio" /> ' . $user->lang['YES'] . '</label><label><input type="radio" name="config[fulltext_native_load_upd]" value="0"' . ((!$config['fulltext_native_load_upd']) ? ' checked="checked"' : '') . ' class="radio" /> ' . $user->lang['NO'] . '</label></dd>		</dl>		<dl>			<dt><label for="fulltext_native_min_chars">' . $user->lang['MIN_SEARCH_CHARS'] . ':</label><br /><span>' . $user->lang['MIN_SEARCH_CHARS_EXPLAIN'] . '</span></dt>			<dd><input id="fulltext_native_min_chars" type="text" size="3" maxlength="3" name="config[fulltext_native_min_chars]" value="' . (int) $config['fulltext_native_min_chars'] . '" /></dd>		</dl>		<dl>			<dt><label for="fulltext_native_max_chars">' . $user->lang['MAX_SEARCH_CHARS'] . ':</label><br /><span>' . $user->lang['MAX_SEARCH_CHARS_EXPLAIN'] . '</span></dt>			<dd><input id="fulltext_native_max_chars" type="text" size="3" maxlength="3" name="config[fulltext_native_max_chars]" value="' . (int) $config['fulltext_native_max_chars'] . '" /></dd>		</dl>		<dl>			<dt><label for="fulltext_native_common_thres">' . $user->lang['COMMON_WORD_THRESHOLD'] . ':</label><br /><span>' . $user->lang['COMMON_WORD_THRESHOLD_EXPLAIN'] . '</span></dt>			<dd><input id="fulltext_native_common_thres" type="text" size="3" maxlength="3" name="config[fulltext_native_common_thres]" value="' . (double) $config['fulltext_native_common_thres'] . '" /> %</dd>		</dl>		';		// These are fields required in the config table		return array(			'tpl'		=> $tpl,			'config'	=> array('fulltext_native_load_upd' => 'bool', 'fulltext_native_min_chars' => 'integer:0:255', 'fulltext_native_max_chars' => 'integer:0:255', 'fulltext_native_common_thres' => 'double:0:100')		);	}}?>
<?php/**** @package mcp* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @ignore*/if (!defined('IN_PHPBB')){	exit;}/*** mcp_main* Handling mcp actions* @package mcp*/class mcp_main{	var $p_master;	var $u_action;	function mcp_main(&$p_master)	{		$this->p_master = &$p_master;	}	function main($id, $mode)	{		global $auth, $db, $user, $template, $action;		global $config, $phpbb_root_path, $phpEx;		$quickmod = ($mode == 'quickmod') ? true : false;		switch ($action)		{			case 'lock':			case 'unlock':				$topic_ids = (!$quickmod) ? request_var('topic_id_list', array(0)) : array(request_var('t', 0));				if (!sizeof($topic_ids))				{					trigger_error('NO_TOPIC_SELECTED');				}				lock_unlock($action, $topic_ids);			break;			case 'lock_post':			case 'unlock_post':				$post_ids = (!$quickmod) ? request_var('post_id_list', array(0)) : array(request_var('p', 0));				if (!sizeof($post_ids))				{					trigger_error('NO_POST_SELECTED');				}				lock_unlock($action, $post_ids);			break;			case 'make_announce':			case 'make_sticky':			case 'make_global':			case 'make_normal':				$topic_ids = (!$quickmod) ? request_var('topic_id_list', array(0)) : array(request_var('t', 0));				if (!sizeof($topic_ids))				{					trigger_error('NO_TOPIC_SELECTED');				}				change_topic_type($action, $topic_ids);			break;			case 'move':				$user->add_lang('viewtopic');				$topic_ids = (!$quickmod) ? request_var('topic_id_list', array(0)) : array(request_var('t', 0));				if (!sizeof($topic_ids))				{					trigger_error('NO_TOPIC_SELECTED');				}				mcp_move_topic($topic_ids);			break;			case 'fork':				$user->add_lang('viewtopic');				$topic_ids = (!$quickmod) ? request_var('topic_id_list', array(0)) : array(request_var('t', 0));				if (!sizeof($topic_ids))				{					trigger_error('NO_TOPIC_SELECTED');				}				mcp_fork_topic($topic_ids);			break;			case 'delete_topic':				$user->add_lang('viewtopic');				$topic_ids = (!$quickmod) ? request_var('topic_id_list', array(0)) : array(request_var('t', 0));				if (!sizeof($topic_ids))				{					trigger_error('NO_TOPIC_SELECTED');				}				mcp_delete_topic($topic_ids);			break;			case 'delete_post':				$user->add_lang('posting');				$post_ids = (!$quickmod) ? request_var('post_id_list', array(0)) : array(request_var('p', 0));				if (!sizeof($post_ids))				{					trigger_error('NO_POST_SELECTED');				}				mcp_delete_post($post_ids);			break;		}		switch ($mode)		{			case 'front':				include($phpbb_root_path . 'includes/mcp/mcp_front.' . $phpEx);				$user->add_lang('acp/common');				mcp_front_view($id, $mode, $action);				$this->tpl_name = 'mcp_front';				$this->page_title = 'MCP_MAIN';			break;			case 'forum_view':				include($phpbb_root_path . 'includes/mcp/mcp_forum.' . $phpEx);				$user->add_lang('viewforum');				$forum_id = request_var('f', 0);				$forum_info = get_forum_data($forum_id, 'm_', true);				if (!sizeof($forum_info))				{					$this->main('main', 'front');					return;				}				$forum_info = $forum_info[$forum_id];				mcp_forum_view($id, $mode, $action, $forum_info);				$this->tpl_name = 'mcp_forum';				$this->page_title = 'MCP_MAIN_FORUM_VIEW';			break;			case 'topic_view':				include($phpbb_root_path . 'includes/mcp/mcp_topic.' . $phpEx);				mcp_topic_view($id, $mode, $action);				$this->tpl_name = 'mcp_topic';				$this->page_title = 'MCP_MAIN_TOPIC_VIEW';			break;			case 'post_details':				include($phpbb_root_path . 'includes/mcp/mcp_post.' . $phpEx);				mcp_post_details($id, $mode, $action);				$this->tpl_name = ($action == 'whois') ? 'mcp_whois' : 'mcp_post';				$this->page_title = 'MCP_MAIN_POST_DETAILS';			break;			default:				trigger_error('NO_MODE', E_USER_ERROR);			break;		}	}}/*** Lock/Unlock Topic/Post*/function lock_unlock($action, $ids){	global $auth, $user, $db, $phpEx, $phpbb_root_path;	if ($action == 'lock' || $action == 'unlock')	{		$table = TOPICS_TABLE;		$sql_id = 'topic_id';		$set_id = 'topic_status';		$l_prefix = 'TOPIC';	}	else	{		$table = POSTS_TABLE;		$sql_id = 'post_id';		$set_id = 'post_edit_locked';		$l_prefix = 'POST';	}	$orig_ids = $ids;	if (!check_ids($ids, $table, $sql_id, array('m_lock')))	{		// Make sure that for f_user_lock only the lock action is triggered.		if ($action != 'lock')		{			return;		}		$ids = $orig_ids;		if (!check_ids($ids, $table, $sql_id, array('f_user_lock')))		{			return;		}	}	unset($orig_ids);	$redirect = request_var('redirect', build_url(array('action', 'quickmod')));	$s_hidden_fields = build_hidden_fields(array(		$sql_id . '_list'	=> $ids,		'action'			=> $action,		'redirect'			=> $redirect)	);	$success_msg = '';	if (confirm_box(true))	{		$sql = "UPDATE $table			SET $set_id = " . (($action == 'lock' || $action == 'lock_post') ? ITEM_LOCKED : ITEM_UNLOCKED) . '			WHERE ' . $db->sql_in_set($sql_id, $ids);		$db->sql_query($sql);		$data = ($action == 'lock' || $action == 'unlock') ? get_topic_data($ids) : get_post_data($ids);		foreach ($data as $id => $row)		{			add_log('mod', $row['forum_id'], $row['topic_id'], 'LOG_' . strtoupper($action), $row['topic_title']);		}		$success_msg = $l_prefix . ((sizeof($ids) == 1) ? '' : 'S') . '_' . (($action == 'lock' || $action == 'lock_post') ? 'LOCKED' : 'UNLOCKED') . '_SUCCESS';	}	else	{		confirm_box(false, strtoupper($action) . '_' . $l_prefix . ((sizeof($ids) == 1) ? '' : 'S'), $s_hidden_fields);	}	$redirect = request_var('redirect', "index.$phpEx");	$redirect = reapply_sid($redirect);	if (!$success_msg)	{		redirect($redirect);	}	else	{		meta_refresh(2, $redirect);		trigger_error($user->lang[$success_msg] . '<br /><br />' . sprintf($user->lang['RETURN_PAGE'], '<a href="' . $redirect . '">', '</a>'));	}}/*** Change Topic Type*/function change_topic_type($action, $topic_ids){	global $auth, $user, $db, $phpEx, $phpbb_root_path;	switch ($action)	{		case 'make_announce':			$new_topic_type = POST_ANNOUNCE;			$check_acl = 'f_announce';			$l_new_type = (sizeof($topic_ids) == 1) ? 'MCP_MAKE_ANNOUNCEMENT' : 'MCP_MAKE_ANNOUNCEMENTS';		break;		case 'make_global':			$new_topic_type = POST_GLOBAL;			$check_acl = 'f_announce';			$l_new_type = (sizeof($topic_ids) == 1) ? 'MCP_MAKE_GLOBAL' : 'MCP_MAKE_GLOBALS';		break;		case 'make_sticky':			$new_topic_type = POST_STICKY;			$check_acl = 'f_sticky';			$l_new_type = (sizeof($topic_ids) == 1) ? 'MCP_MAKE_STICKY' : 'MCP_MAKE_STICKIES';		break;		default:			$new_topic_type = POST_NORMAL;			$check_acl = false;			$l_new_type = (sizeof($topic_ids) == 1) ? 'MCP_MAKE_NORMAL' : 'MCP_MAKE_NORMALS';		break;	}	$forum_id = check_ids($topic_ids, TOPICS_TABLE, 'topic_id', $check_acl, true);	if ($forum_id === false)	{		return;	}	$redirect = request_var('redirect', build_url(array('action', 'quickmod')));	$s_hidden_fields = array(		'topic_id_list'	=> $topic_ids,		'f'				=> $forum_id,		'action'		=> $action,		'redirect'		=> $redirect,	);	$success_msg = '';	if (confirm_box(true))	{		if ($new_topic_type != POST_GLOBAL)		{			$sql = 'UPDATE ' . TOPICS_TABLE . "				SET topic_type = $new_topic_type				WHERE " . $db->sql_in_set('topic_id', $topic_ids) . '					AND forum_id <> 0';			$db->sql_query($sql);			// Reset forum id if a global topic is within the array			$to_forum_id = request_var('to_forum_id', 0);			if ($to_forum_id)			{				$sql = 'UPDATE ' . TOPICS_TABLE . "					SET topic_type = $new_topic_type, forum_id = $to_forum_id					WHERE " . $db->sql_in_set('topic_id', $topic_ids) . '						AND forum_id = 0';				$db->sql_query($sql);				// Update forum_ids for all posts				$sql = 'UPDATE ' . POSTS_TABLE . "					SET forum_id = $to_forum_id					WHERE " . $db->sql_in_set('topic_id', $topic_ids) . '						AND forum_id = 0';				$db->sql_query($sql);				// Do a little forum sync stuff				$sql = 'SELECT SUM(t.topic_replies + t.topic_approved) as topic_posts, COUNT(t.topic_approved) as topics_authed					FROM ' . TOPICS_TABLE . ' t					WHERE ' . $db->sql_in_set('t.topic_id', $topic_ids);				$result = $db->sql_query($sql);				$row_data = $db->sql_fetchrow($result);				$db->sql_freeresult($result);				$sync_sql = array();				if ($row_data['topic_posts'])				{					$sync_sql[$to_forum_id][]	= 'forum_posts = forum_posts + ' . (int) $row_data['topic_posts'];				}				if ($row_data['topics_authed'])				{					$sync_sql[$to_forum_id][]	= 'forum_topics = forum_topics + ' . (int) $row_data['topics_authed'];				}				$sync_sql[$to_forum_id][]	= 'forum_topics_real = forum_topics_real + ' . (int) sizeof($topic_ids);				foreach ($sync_sql as $forum_id_key => $array)				{					$sql = 'UPDATE ' . FORUMS_TABLE . '						SET ' . implode(', ', $array) . '						WHERE forum_id = ' . $forum_id_key;					$db->sql_query($sql);				}				sync('forum', 'forum_id', $to_forum_id);			}		}		else		{			// Get away with those topics already being a global announcement by re-calculating $topic_ids			$sql = 'SELECT topic_id				FROM ' . TOPICS_TABLE . '				WHERE ' . $db->sql_in_set('topic_id', $topic_ids) . '					AND forum_id <> 0';			$result = $db->sql_query($sql);			$topic_ids = array();			while ($row = $db->sql_fetchrow($result))			{				$topic_ids[] = $row['topic_id'];			}			$db->sql_freeresult($result);			if (sizeof($topic_ids))			{				// Delete topic shadows for global announcements				$sql = 'DELETE FROM ' . TOPICS_TABLE . '					WHERE ' . $db->sql_in_set('topic_moved_id', $topic_ids);				$db->sql_query($sql);				$sql = 'UPDATE ' . TOPICS_TABLE . "					SET topic_type = $new_topic_type, forum_id = 0						WHERE " . $db->sql_in_set('topic_id', $topic_ids);				$db->sql_query($sql);				// Update forum_ids for all posts				$sql = 'UPDATE ' . POSTS_TABLE . '					SET forum_id = 0					WHERE ' . $db->sql_in_set('topic_id', $topic_ids);				$db->sql_query($sql);				// Do a little forum sync stuff				$sql = 'SELECT SUM(t.topic_replies + t.topic_approved) as topic_posts, COUNT(t.topic_approved) as topics_authed					FROM ' . TOPICS_TABLE . ' t					WHERE ' . $db->sql_in_set('t.topic_id', $topic_ids);				$result = $db->sql_query($sql);				$row_data = $db->sql_fetchrow($result);				$db->sql_freeresult($result);				$sync_sql = array();				if ($row_data['topic_posts'])				{					$sync_sql[$forum_id][]	= 'forum_posts = forum_posts - ' . (int) $row_data['topic_posts'];				}				if ($row_data['topics_authed'])				{					$sync_sql[$forum_id][]	= 'forum_topics = forum_topics - ' . (int) $row_data['topics_authed'];				}				$sync_sql[$forum_id][]	= 'forum_topics_real = forum_topics_real - ' . (int) sizeof($topic_ids);				foreach ($sync_sql as $forum_id_key => $array)				{					$sql = 'UPDATE ' . FORUMS_TABLE . '						SET ' . implode(', ', $array) . '						WHERE forum_id = ' . $forum_id_key;					$db->sql_query($sql);				}				sync('forum', 'forum_id', $forum_id);			}		}		$success_msg = (sizeof($topic_ids) == 1) ? 'TOPIC_TYPE_CHANGED' : 'TOPICS_TYPE_CHANGED';		if (sizeof($topic_ids))		{			$data = get_topic_data($topic_ids);			foreach ($data as $topic_id => $row)			{				add_log('mod', $forum_id, $topic_id, 'LOG_TOPIC_TYPE_CHANGED', $row['topic_title']);			}		}	}	else	{		// Global topic involved?		$global_involved = false;		if ($new_topic_type != POST_GLOBAL)		{			$sql = 'SELECT forum_id				FROM ' . TOPICS_TABLE . '				WHERE ' . $db->sql_in_set('topic_id', $topic_ids) . '					AND forum_id = 0';			$result = $db->sql_query($sql);			$row = $db->sql_fetchrow($result);			$db->sql_freeresult($result);			if ($row)			{				$global_involved = true;			}		}		if ($global_involved)		{			global $template;			$template->assign_vars(array(				'S_FORUM_SELECT'		=> make_forum_select(request_var('f', $forum_id), false, false, true, true),				'S_CAN_LEAVE_SHADOW'	=> false,				'ADDITIONAL_MSG'		=> (sizeof($topic_ids) == 1) ? $user->lang['SELECT_FORUM_GLOBAL_ANNOUNCEMENT'] : $user->lang['SELECT_FORUM_GLOBAL_ANNOUNCEMENTS'])			);			confirm_box(false, $l_new_type, build_hidden_fields($s_hidden_fields), 'mcp_move.html');		}		else		{			confirm_box(false, $l_new_type, build_hidden_fields($s_hidden_fields));		}	}	$redirect = request_var('redirect', "index.$phpEx");	$redirect = reapply_sid($redirect);	if (!$success_msg)	{		redirect($redirect);	}	else	{		meta_refresh(2, $redirect);		trigger_error($user->lang[$success_msg] . '<br /><br />' . sprintf($user->lang['RETURN_PAGE'], '<a href="' . $redirect . '">', '</a>'));	}}/*** Move Topic*/function mcp_move_topic($topic_ids){	global $auth, $user, $db, $template;	global $phpEx, $phpbb_root_path;	// Here we limit the operation to one forum only	$forum_id = check_ids($topic_ids, TOPICS_TABLE, 'topic_id', array('m_move'), true);	if ($forum_id === false)	{		return;	}	$to_forum_id = request_var('to_forum_id', 0);	$redirect = request_var('redirect', build_url(array('action', 'quickmod')));	$additional_msg = $success_msg = '';	$s_hidden_fields = build_hidden_fields(array(		'topic_id_list'	=> $topic_ids,		'f'				=> $forum_id,		'action'		=> 'move',		'redirect'		=> $redirect)	);	if ($to_forum_id)	{		$forum_data = get_forum_data($to_forum_id, 'f_post');		if (!sizeof($forum_data))		{			$additional_msg = $user->lang['FORUM_NOT_EXIST'];		}		else		{			$forum_data = $forum_data[$to_forum_id];			if ($forum_data['forum_type'] != FORUM_POST)			{				$additional_msg = $user->lang['FORUM_NOT_POSTABLE'];			}			else if (!$auth->acl_get('f_post', $to_forum_id) || (!$auth->acl_get('m_approve', $to_forum_id) && !$auth->acl_get('f_noapprove', $to_forum_id)))			{				$additional_msg = $user->lang['USER_CANNOT_POST'];			}			else if ($forum_id == $to_forum_id)			{				$additional_msg = $user->lang['CANNOT_MOVE_SAME_FORUM'];			}		}	}	else if (isset($_POST['confirm']))	{		$additional_msg = $user->lang['FORUM_NOT_EXIST'];	}	if (!$to_forum_id || $additional_msg)	{		unset($_POST['confirm']);		unset($_REQUEST['confirm_key']);	}	if (confirm_box(true))	{		$topic_data = get_topic_data($topic_ids);		$leave_shadow = (isset($_POST['move_leave_shadow'])) ? true : false;		$forum_sync_data = array();		$forum_sync_data[$forum_id] = current($topic_data);		$forum_sync_data[$to_forum_id] = $forum_data;		// Real topics added to target forum		$topics_moved = sizeof($topic_data);		// Approved topics added to target forum		$topics_authed_moved = 0;		// Posts (topic replies + topic post if approved) added to target forum		$topic_posts_added = 0;		// Posts (topic replies + topic post if approved and not global announcement) removed from source forum		$topic_posts_removed = 0;		// Real topics removed from source forum (all topics without global announcements)		$topics_removed = 0;		// Approved topics removed from source forum (except global announcements)		$topics_authed_removed = 0;		foreach ($topic_data as $topic_id => $topic_info)		{			if ($topic_info['topic_approved'])			{				$topics_authed_moved++;				$topic_posts_added++;			}			$topic_posts_added += $topic_info['topic_replies'];			if ($topic_info['topic_type'] != POST_GLOBAL)			{				$topics_removed++;				$topic_posts_removed += $topic_info['topic_replies'];				if ($topic_info['topic_approved'])				{					$topics_authed_removed++;					$topic_posts_removed++;				}			}		}		$db->sql_transaction('begin');		$sync_sql = array();		if ($topic_posts_added)		{			$sync_sql[$to_forum_id][] = 'forum_posts = forum_posts + ' . $topic_posts_added;		}		if ($topics_authed_moved)		{			$sync_sql[$to_forum_id][] = 'forum_topics = forum_topics + ' . (int) $topics_authed_moved;		}		$sync_sql[$to_forum_id][] = 'forum_topics_real = forum_topics_real + ' . (int) $topics_moved;		// Move topics, but do not resync yet		move_topics($topic_ids, $to_forum_id, false);		$forum_ids = array($to_forum_id);		foreach ($topic_data as $topic_id => $row)		{			// Get the list of forums to resync, add a log entry			$forum_ids[] = $row['forum_id'];			add_log('mod', $to_forum_id, $topic_id, 'LOG_MOVE', $row['forum_name'], $forum_data['forum_name']);			// If we have moved a global announcement, we need to correct the topic type			if ($row['topic_type'] == POST_GLOBAL)			{				$sql = 'UPDATE ' . TOPICS_TABLE . '					SET topic_type = ' . POST_ANNOUNCE . '					WHERE topic_id = ' . (int) $row['topic_id'];				$db->sql_query($sql);			}			// Leave a redirection if required and only if the topic is visible to users			if ($leave_shadow && $row['topic_approved'] && $row['topic_type'] != POST_GLOBAL)			{				$shadow = array(					'forum_id'				=>	(int) $row['forum_id'],					'icon_id'				=>	(int) $row['icon_id'],					'topic_attachment'		=>	(int) $row['topic_attachment'],					'topic_approved'		=>	1, // a shadow topic is always approved					'topic_reported'		=>	0, // a shadow topic is never reported					'topic_title'			=>	(string) $row['topic_title'],					'topic_poster'			=>	(int) $row['topic_poster'],					'topic_time'			=>	(int) $row['topic_time'],					'topic_time_limit'		=>	(int) $row['topic_time_limit'],					'topic_views'			=>	(int) $row['topic_views'],					'topic_replies'			=>	(int) $row['topic_replies'],					'topic_replies_real'	=>	(int) $row['topic_replies_real'],					'topic_status'			=>	ITEM_MOVED,					'topic_type'			=>	POST_NORMAL,					'topic_first_post_id'	=>	(int) $row['topic_first_post_id'],					'topic_first_poster_colour'=>(string) $row['topic_first_poster_colour'],					'topic_first_poster_name'=>	(string) $row['topic_first_poster_name'],					'topic_last_post_id'	=>	(int) $row['topic_last_post_id'],					'topic_last_poster_id'	=>	(int) $row['topic_last_poster_id'],					'topic_last_poster_colour'=>(string) $row['topic_last_poster_colour'],					'topic_last_poster_name'=>	(string) $row['topic_last_poster_name'],					'topic_last_post_subject'=>	(string)  $row['topic_last_post_subject'],					'topic_last_post_time'	=>	(int) $row['topic_last_post_time'],					'topic_last_view_time'	=>	(int) $row['topic_last_view_time'],					'topic_moved_id'		=>	(int) $row['topic_id'],					'topic_bumped'			=>	(int) $row['topic_bumped'],					'topic_bumper'			=>	(int) $row['topic_bumper'],					'poll_title'			=>	(string) $row['poll_title'],					'poll_start'			=>	(int) $row['poll_start'],					'poll_length'			=>	(int) $row['poll_length'],					'poll_max_options'		=>	(int) $row['poll_max_options'],					'poll_last_vote'		=>	(int) $row['poll_last_vote']				);				$db->sql_query('INSERT INTO ' . TOPICS_TABLE . $db->sql_build_array('INSERT', $shadow));				// Shadow topics only count on new "topics" and not posts... a shadow topic alone has 0 posts				$topics_removed--;				$topics_authed_removed--;			}		}		unset($topic_data);		if ($topic_posts_removed)		{			$sync_sql[$forum_id][] = 'forum_posts = forum_posts - ' . $topic_posts_removed;		}		if ($topics_removed)		{			$sync_sql[$forum_id][]	= 'forum_topics_real = forum_topics_real - ' . (int) $topics_removed;		}		if ($topics_authed_removed)		{			$sync_sql[$forum_id][]	= 'forum_topics = forum_topics - ' . (int) $topics_authed_removed;		}		$success_msg = (sizeof($topic_ids) == 1) ? 'TOPIC_MOVED_SUCCESS' : 'TOPICS_MOVED_SUCCESS';		foreach ($sync_sql as $forum_id_key => $array)		{			$sql = 'UPDATE ' . FORUMS_TABLE . '				SET ' . implode(', ', $array) . '				WHERE forum_id = ' . $forum_id_key;			$db->sql_query($sql);		}		$db->sql_transaction('commit');		sync('forum', 'forum_id', array($forum_id, $to_forum_id));	}	else	{		$template->assign_vars(array(			'S_FORUM_SELECT'		=> make_forum_select($to_forum_id, $forum_id, false, true, true, true),			'S_CAN_LEAVE_SHADOW'	=> true,			'ADDITIONAL_MSG'		=> $additional_msg)		);		confirm_box(false, 'MOVE_TOPIC' . ((sizeof($topic_ids) == 1) ? '' : 'S'), $s_hidden_fields, 'mcp_move.html');	}	$redirect = request_var('redirect', "index.$phpEx");	$redirect = reapply_sid($redirect);	if (!$success_msg)	{		redirect($redirect);	}	else	{		meta_refresh(3, $redirect);		$message = $user->lang[$success_msg];		$message .= '<br /><br />' . sprintf($user->lang['RETURN_PAGE'], '<a href="' . $redirect . '">', '</a>');		$message .= '<br /><br />' . sprintf($user->lang['RETURN_FORUM'], '<a href="' . append_sid("{$phpbb_root_path}viewforum.$phpEx", "f=$forum_id") . '">', '</a>');		$message .= '<br /><br />' . sprintf($user->lang['RETURN_NEW_FORUM'], '<a href="' . append_sid("{$phpbb_root_path}viewforum.$phpEx", "f=$to_forum_id") . '">', '</a>');		trigger_error($message);	}}/*** Delete Topics*/function mcp_delete_topic($topic_ids){	global $auth, $user, $db, $phpEx, $phpbb_root_path;	if (!check_ids($topic_ids, TOPICS_TABLE, 'topic_id', array('m_delete')))	{		return;	}	$redirect = request_var('redirect', build_url(array('action', 'quickmod')));	$forum_id = request_var('f', 0);	$s_hidden_fields = build_hidden_fields(array(		'topic_id_list'	=> $topic_ids,		'f'				=> $forum_id,		'action'		=> 'delete_topic',		'redirect'		=> $redirect)	);	$success_msg = '';	if (confirm_box(true))	{		$success_msg = (sizeof($topic_ids) == 1) ? 'TOPIC_DELETED_SUCCESS' : 'TOPICS_DELETED_SUCCESS';		$data = get_topic_data($topic_ids);		foreach ($data as $topic_id => $row)		{			if ($row['topic_moved_id'])			{				add_log('mod', $row['forum_id'], $topic_id, 'LOG_DELETE_SHADOW_TOPIC', $row['topic_title']);			}			else			{				add_log('mod', $row['forum_id'], $topic_id, 'LOG_DELETE_TOPIC', $row['topic_title'], $row['topic_first_poster_name']);			}		}		$return = delete_topics('topic_id', $topic_ids);	}	else	{		confirm_box(false, (sizeof($topic_ids) == 1) ? 'DELETE_TOPIC' : 'DELETE_TOPICS', $s_hidden_fields);	}	if (!isset($_REQUEST['quickmod']))	{		$redirect = request_var('redirect', "index.$phpEx");		$redirect = reapply_sid($redirect);		$redirect_message = 'PAGE';	}	else	{		$redirect = append_sid("{$phpbb_root_path}viewforum.$phpEx", 'f=' . $forum_id);		$redirect_message = 'FORUM';	}	if (!$success_msg)	{		redirect($redirect);	}	else	{		meta_refresh(3, $redirect);		trigger_error($user->lang[$success_msg] . '<br /><br />' . sprintf($user->lang['RETURN_' . $redirect_message], '<a href="' . $redirect . '">', '</a>'));	}}/*** Delete Posts*/function mcp_delete_post($post_ids){	global $auth, $user, $db, $phpEx, $phpbb_root_path;	if (!check_ids($post_ids, POSTS_TABLE, 'post_id', array('m_delete')))	{		return;	}	$redirect = request_var('redirect', build_url(array('action', 'quickmod')));	$forum_id = request_var('f', 0);	$s_hidden_fields = build_hidden_fields(array(		'post_id_list'	=> $post_ids,		'f'				=> $forum_id,		'action'		=> 'delete_post',		'redirect'		=> $redirect)	);	$success_msg = '';	if (confirm_box(true))	{		if (!function_exists('delete_posts'))		{			include($phpbb_root_path . 'includes/functions_admin.' . $phpEx);		}		// Count the number of topics that are affected		// I did not use COUNT(DISTINCT ...) because I remember having problems		// with it on older versions of MySQL -- Ashe		$sql = 'SELECT DISTINCT topic_id			FROM ' . POSTS_TABLE . '			WHERE ' . $db->sql_in_set('post_id', $post_ids);		$result = $db->sql_query($sql);		$topic_id_list = array();		while ($row = $db->sql_fetchrow($result))		{			$topic_id_list[] = $row['topic_id'];		}		$affected_topics = sizeof($topic_id_list);		$db->sql_freeresult($result);		$post_data = get_post_data($post_ids);		foreach ($post_data as $id => $row)		{			$post_username = ($row['poster_id'] == ANONYMOUS && !empty($row['post_username'])) ? $row['post_username'] : $row['username'];			add_log('mod', $row['forum_id'], $row['topic_id'], 'LOG_DELETE_POST', $row['post_subject'], $post_username);		}		// Now delete the posts, topics and forums are automatically resync'ed		delete_posts('post_id', $post_ids);		$sql = 'SELECT COUNT(topic_id) AS topics_left			FROM ' . TOPICS_TABLE . '			WHERE ' . $db->sql_in_set('topic_id', $topic_id_list);		$result = $db->sql_query_limit($sql, 1);		$deleted_topics = ($row = $db->sql_fetchrow($result)) ? ($affected_topics - $row['topics_left']) : $affected_topics;		$db->sql_freeresult($result);		$topic_id = request_var('t', 0);		// Return links		$return_link = array();		if ($affected_topics == 1 && !$deleted_topics && $topic_id)		{			$return_link[] = sprintf($user->lang['RETURN_TOPIC'], '<a href="' . append_sid("{$phpbb_root_path}viewtopic.$phpEx", "f=$forum_id&amp;t=$topic_id") . '">', '</a>');		}		$return_link[] = sprintf($user->lang['RETURN_FORUM'], '<a href="' . append_sid("{$phpbb_root_path}viewforum.$phpEx", 'f=' . $forum_id) . '">', '</a>');		if (sizeof($post_ids) == 1)		{			if ($deleted_topics)			{				// We deleted the only post of a topic, which in turn has				// been removed from the database				$success_msg = $user->lang['TOPIC_DELETED_SUCCESS'];			}			else			{				$success_msg = $user->lang['POST_DELETED_SUCCESS'];			}		}		else		{			if ($deleted_topics)			{				// Some of topics disappeared				$success_msg = $user->lang['POSTS_DELETED_SUCCESS'] . '<br /><br />' . $user->lang['EMPTY_TOPICS_REMOVED_WARNING'];			}			else			{				$success_msg = $user->lang['POSTS_DELETED_SUCCESS'];			}		}	}	else	{		confirm_box(false, (sizeof($post_ids) == 1) ? 'DELETE_POST' : 'DELETE_POSTS', $s_hidden_fields);	}	$redirect = request_var('redirect', "index.$phpEx");	$redirect = reapply_sid($redirect);	if (!$success_msg)	{		redirect($redirect);	}	else	{		if ($affected_topics != 1 || $deleted_topics || !$topic_id)		{			$redirect = append_sid("{$phpbb_root_path}mcp.$phpEx", "f=$forum_id&i=main&mode=forum_view", false);		}		meta_refresh(3, $redirect);		trigger_error($success_msg . '<br /><br />' . sprintf($user->lang['RETURN_PAGE'], '<a href="' . $redirect . '">', '</a>') . '<br /><br />' . implode('<br /><br />', $return_link));	}}/*** Fork Topic*/function mcp_fork_topic($topic_ids){	global $auth, $user, $db, $template, $config;	global $phpEx, $phpbb_root_path;	if (!check_ids($topic_ids, TOPICS_TABLE, 'topic_id', array('m_')))	{		return;	}	$to_forum_id = request_var('to_forum_id', 0);	$forum_id = request_var('f', 0);	$redirect = request_var('redirect', build_url(array('action', 'quickmod')));	$additional_msg = $success_msg = '';	$s_hidden_fields = build_hidden_fields(array(		'topic_id_list'	=> $topic_ids,		'f'				=> $forum_id,		'action'		=> 'fork',		'redirect'		=> $redirect)	);	if ($to_forum_id)	{		$forum_data = get_forum_data($to_forum_id, 'f_post');		if (!sizeof($topic_ids))		{			$additional_msg = $user->lang['NO_TOPIC_SELECTED'];		}		else if (!sizeof($forum_data))		{			$additional_msg = $user->lang['FORUM_NOT_EXIST'];		}		else		{			$forum_data = $forum_data[$to_forum_id];			if ($forum_data['forum_type'] != FORUM_POST)			{				$additional_msg = $user->lang['FORUM_NOT_POSTABLE'];			}			else if (!$auth->acl_get('f_post', $to_forum_id))			{				$additional_msg = $user->lang['USER_CANNOT_POST'];			}		}	}	else if (isset($_POST['confirm']))	{		$additional_msg = $user->lang['FORUM_NOT_EXIST'];	}	if ($additional_msg)	{		unset($_POST['confirm']);		unset($_REQUEST['confirm_key']);	}	if (confirm_box(true))	{		$topic_data = get_topic_data($topic_ids, 'f_post');		$total_posts = 0;		$new_topic_id_list = array();		foreach ($topic_data as $topic_id => $topic_row)		{			if (!isset($search_type) && $topic_row['enable_indexing'])			{				// Select the search method and do some additional checks to ensure it can actually be utilised				$search_type = basename($config['search_type']);				if (!file_exists($phpbb_root_path . 'includes/search/' . $search_type . '.' . $phpEx))				{					trigger_error('NO_SUCH_SEARCH_MODULE');				}				if (!class_exists($search_type))				{					include("{$phpbb_root_path}includes/search/$search_type.$phpEx");				}				$error = false;				$search = new $search_type($error);				$search_mode = 'post';				if ($error)				{					trigger_error($error);				}			}			else if (!isset($search_type) && !$topic_row['enable_indexing'])			{				$search_type = false;			}			$sql_ary = array(				'forum_id'					=> (int) $to_forum_id,				'icon_id'					=> (int) $topic_row['icon_id'],				'topic_attachment'			=> (int) $topic_row['topic_attachment'],				'topic_approved'			=> 1,				'topic_reported'			=> 0,				'topic_title'				=> (string) $topic_row['topic_title'],				'topic_poster'				=> (int) $topic_row['topic_poster'],				'topic_time'				=> (int) $topic_row['topic_time'],				'topic_replies'				=> (int) $topic_row['topic_replies_real'],				'topic_replies_real'		=> (int) $topic_row['topic_replies_real'],				'topic_status'				=> (int) $topic_row['topic_status'],				'topic_type'				=> (int) $topic_row['topic_type'],				'topic_first_poster_name'	=> (string) $topic_row['topic_first_poster_name'],				'topic_last_poster_id'		=> (int) $topic_row['topic_last_poster_id'],				'topic_last_poster_name'	=> (string) $topic_row['topic_last_poster_name'],				'topic_last_post_time'		=> (int) $topic_row['topic_last_post_time'],				'topic_last_view_time'		=> (int) $topic_row['topic_last_view_time'],				'topic_bumped'				=> (int) $topic_row['topic_bumped'],				'topic_bumper'				=> (int) $topic_row['topic_bumper'],				'poll_title'				=> (string) $topic_row['poll_title'],				'poll_start'				=> (int) $topic_row['poll_start'],				'poll_length'				=> (int) $topic_row['poll_length'],				'poll_max_options'			=> (int) $topic_row['poll_max_options'],				'poll_vote_change'			=> (int) $topic_row['poll_vote_change'],			);			$db->sql_query('INSERT INTO ' . TOPICS_TABLE . ' ' . $db->sql_build_array('INSERT', $sql_ary));			$new_topic_id = $db->sql_nextid();			$new_topic_id_list[$topic_id] = $new_topic_id;			if ($topic_row['poll_start'])			{				$poll_rows = array();				$sql = 'SELECT *					FROM ' . POLL_OPTIONS_TABLE . "					WHERE topic_id = $topic_id";				$result = $db->sql_query($sql);				while ($row = $db->sql_fetchrow($result))				{					$sql_ary = array(						'poll_option_id'	=> (int) $row['poll_option_id'],						'topic_id'			=> (int) $new_topic_id,						'poll_option_text'	=> (string) $row['poll_option_text'],						'poll_option_total'	=> 0					);					$db->sql_query('INSERT INTO ' . POLL_OPTIONS_TABLE . ' ' . $db->sql_build_array('INSERT', $sql_ary));				}			}			$sql = 'SELECT *				FROM ' . POSTS_TABLE . "				WHERE topic_id = $topic_id				ORDER BY post_time ASC";			$result = $db->sql_query($sql);			$post_rows = array();			while ($row = $db->sql_fetchrow($result))			{				$post_rows[] = $row;			}			$db->sql_freeresult($result);			if (!sizeof($post_rows))			{				continue;			}			$total_posts += sizeof($post_rows);			foreach ($post_rows as $row)			{				$sql_ary = array(					'topic_id'			=> (int) $new_topic_id,					'forum_id'			=> (int) $to_forum_id,					'poster_id'			=> (int) $row['poster_id'],					'icon_id'			=> (int) $row['icon_id'],					'poster_ip'			=> (string) $row['poster_ip'],					'post_time'			=> (int) $row['post_time'],					'post_approved'		=> 1,					'post_reported'		=> 0,					'enable_bbcode'		=> (int) $row['enable_bbcode'],					'enable_smilies'	=> (int) $row['enable_smilies'],					'enable_magic_url'	=> (int) $row['enable_magic_url'],					'enable_sig'		=> (int) $row['enable_sig'],					'post_username'		=> (string) $row['post_username'],					'post_subject'		=> (string) $row['post_subject'],					'post_text'			=> (string) $row['post_text'],					'post_edit_reason'	=> (string) $row['post_edit_reason'],					'post_edit_user'	=> (int) $row['post_edit_user'],					'post_checksum'		=> (string) $row['post_checksum'],					'post_attachment'	=> (int) $row['post_attachment'],					'bbcode_bitfield'	=> $row['bbcode_bitfield'],					'bbcode_uid'		=> (string) $row['bbcode_uid'],					'post_edit_time'	=> (int) $row['post_edit_time'],					'post_edit_count'	=> (int) $row['post_edit_count'],					'post_edit_locked'	=> (int) $row['post_edit_locked'],					'post_postcount'	=> 0,				);				$db->sql_query('INSERT INTO ' . POSTS_TABLE . ' ' . $db->sql_build_array('INSERT', $sql_ary));				$new_post_id = $db->sql_nextid();				// Copy whether the topic is dotted				markread('post', $to_forum_id, $new_topic_id, 0, $row['poster_id']);				if (!empty($search_type))				{					$search->index($search_mode, $new_post_id, $sql_ary['post_text'], $sql_ary['post_subject'], $sql_ary['poster_id'], ($topic_row['topic_type'] == POST_GLOBAL) ? 0 : $to_forum_id);					$search_mode = 'reply'; // After one we index replies				}				// Copy Attachments				if ($row['post_attachment'])				{					$sql = 'SELECT * FROM ' . ATTACHMENTS_TABLE . "						WHERE post_msg_id = {$row['post_id']}							AND topic_id = $topic_id							AND in_message = 0";					$result = $db->sql_query($sql);					$sql_ary = array();					while ($attach_row = $db->sql_fetchrow($result))					{						$sql_ary[] = array(							'post_msg_id'		=> (int) $new_post_id,							'topic_id'			=> (int) $new_topic_id,							'in_message'		=> 0,							'is_orphan'			=> (int) $attach_row['is_orphan'],							'poster_id'			=> (int) $attach_row['poster_id'],							'physical_filename'	=> (string) utf8_basename($attach_row['physical_filename']),							'real_filename'		=> (string) utf8_basename($attach_row['real_filename']),							'download_count'	=> (int) $attach_row['download_count'],							'attach_comment'	=> (string) $attach_row['attach_comment'],							'extension'			=> (string) $attach_row['extension'],							'mimetype'			=> (string) $attach_row['mimetype'],							'filesize'			=> (int) $attach_row['filesize'],							'filetime'			=> (int) $attach_row['filetime'],							'thumbnail'			=> (int) $attach_row['thumbnail']						);					}					$db->sql_freeresult($result);					if (sizeof($sql_ary))					{						$db->sql_multi_insert(ATTACHMENTS_TABLE, $sql_ary);					}				}			}			$sql = 'SELECT user_id, notify_status				FROM ' . TOPICS_WATCH_TABLE . '				WHERE topic_id = ' . $topic_id;			$result = $db->sql_query($sql);			$sql_ary = array();			while ($row = $db->sql_fetchrow($result))			{				$sql_ary[] = array(					'topic_id'		=> (int) $new_topic_id,					'user_id'		=> (int) $row['user_id'],					'notify_status'	=> (int) $row['notify_status'],				);			}			$db->sql_freeresult($result);			if (sizeof($sql_ary))			{				$db->sql_multi_insert(TOPICS_WATCH_TABLE, $sql_ary);			}		}		// Sync new topics, parent forums and board stats		sync('topic', 'topic_id', $new_topic_id_list);		$sync_sql = array();		$sync_sql[$to_forum_id][]	= 'forum_posts = forum_posts + ' . $total_posts;		$sync_sql[$to_forum_id][]	= 'forum_topics = forum_topics + ' . sizeof($new_topic_id_list);		$sync_sql[$to_forum_id][]	= 'forum_topics_real = forum_topics_real + ' . sizeof($new_topic_id_list);		foreach ($sync_sql as $forum_id_key => $array)		{			$sql = 'UPDATE ' . FORUMS_TABLE . '				SET ' . implode(', ', $array) . '				WHERE forum_id = ' . $forum_id_key;			$db->sql_query($sql);		}		sync('forum', 'forum_id', $to_forum_id);		set_config_count('num_topics', sizeof($new_topic_id_list), true);		set_config_count('num_posts', $total_posts, true);		foreach ($new_topic_id_list as $topic_id => $new_topic_id)		{			add_log('mod', $to_forum_id, $new_topic_id, 'LOG_FORK', $topic_row['forum_name']);		}		$success_msg = (sizeof($topic_ids) == 1) ? 'TOPIC_FORKED_SUCCESS' : 'TOPICS_FORKED_SUCCESS';	}	else	{		$template->assign_vars(array(			'S_FORUM_SELECT'		=> make_forum_select($to_forum_id, false, false, true, true, true),			'S_CAN_LEAVE_SHADOW'	=> false,			'ADDITIONAL_MSG'		=> $additional_msg)		);		confirm_box(false, 'FORK_TOPIC' . ((sizeof($topic_ids) == 1) ? '' : 'S'), $s_hidden_fields, 'mcp_move.html');	}	$redirect = request_var('redirect', "index.$phpEx");	$redirect = reapply_sid($redirect);	if (!$success_msg)	{		redirect($redirect);	}	else	{		$redirect_url = append_sid("{$phpbb_root_path}viewforum.$phpEx", 'f=' . $forum_id);		meta_refresh(3, $redirect_url);		$return_link = sprintf($user->lang['RETURN_FORUM'], '<a href="' . $redirect_url . '">', '</a>');		if ($forum_id != $to_forum_id)		{			$return_link .= '<br /><br />' . sprintf($user->lang['RETURN_NEW_FORUM'], '<a href="' . append_sid("{$phpbb_root_path}viewforum.$phpEx", 'f=' . $to_forum_id) . '">', '</a>');		}		trigger_error($user->lang[$success_msg] . '<br /><br />' . $return_link);	}}?>
<?php/**** @package ucp* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @package module_install*/class ucp_zebra_info{	function module()	{		return array(			'filename'	=> 'ucp_zebra',			'title'		=> 'UCP_ZEBRA',			'version'	=> '1.0.0',			'modes'		=> array(				'friends'		=> array('title' => 'UCP_ZEBRA_FRIENDS', 'auth' => '', 'cat' => array('UCP_ZEBRA')),				'foes'			=> array('title' => 'UCP_ZEBRA_FOES', 'auth' => '', 'cat' => array('UCP_ZEBRA')),			),		);	}	function install()	{	}	function uninstall()	{	}}?>
<?php/*** Adds class="postlink" to magic urls** You should make a backup from your users, posts and privmsgs table in case something goes wrong* Forum descriptions and rules need to be re-submitted manually.*/die("Please read the first lines of this script for instructions on how to enable it");set_time_limit(0);define('IN_PHPBB', true);$phpbb_root_path = './../';$phpEx = substr(strrchr(__FILE__, '.'), 1);include($phpbb_root_path . 'common.'.$phpEx);// Start session management$user->session_begin();$auth->acl($user->data);$user->setup();$echos = 0;$replace = array(	'<!-- l --><a href="',	'<!-- m --><a href="',	'<!-- w --><a href="',);$with = array(	'<!-- l --><a class="postlink-local" href="',	'<!-- m --><a class="postlink" href="',	'<!-- w --><a class="postlink" href="',);// Adjust user signatures$sql = 'SELECT user_id, user_sig	FROM ' . USERS_TABLE;$result = $db->sql_query($sql);while ($row = $db->sql_fetchrow($result)){	$new_content = str_replace($replace, $with, $row['user_sig']);	if ($new_content != $row['user_sig'])	{		$sql = 'UPDATE ' . USERS_TABLE . " SET user_sig = '" . $db->sql_escape($new_content) . "'			WHERE user_id = " . $row['user_id'];		$db->sql_query($sql);		if ($echos > 200)		{			echo '<br />' . "\n";			$echos = 0;		}		echo '.';		$echos++;		flush();	}}$db->sql_freeresult($result);// Now adjust posts$sql = 'SELECT post_id, post_text	FROM ' . POSTS_TABLE;$result = $db->sql_query($sql);while ($row = $db->sql_fetchrow($result)){	$new_content = str_replace($replace, $with, $row['post_text']);	if ($row['post_text'] != $new_content)	{		$sql = 'UPDATE ' . POSTS_TABLE . " SET post_text = '" . $db->sql_escape($new_content) . "'			WHERE post_id = " . $row['post_id'];		$db->sql_query($sql);		if ($echos > 200)		{			echo '<br />' . "\n";			$echos = 0;		}		echo '.';		$echos++;		flush();	}}$db->sql_freeresult($result);// Now to the private messages$sql = 'SELECT msg_id, message_text	FROM ' . PRIVMSGS_TABLE;$result = $db->sql_query($sql);while ($row = $db->sql_fetchrow($result)){	$new_content = str_replace($replace, $with, $row['message_text']);	if ($row['message_text'] != $new_content)	{		$sql = 'UPDATE ' . PRIVMSGS_TABLE . " SET bbcode_bitfield = '" . $db->sql_escape($new_content) . "'			WHERE msg_id = " . $row['msg_id'];		$db->sql_query($sql);		if ($echos > 200)		{			echo '<br />' . "\n";			$echos = 0;		}		echo '.';		$echos++;		flush();	}}$db->sql_freeresult($result);// Done$db->sql_close();?>
<?php/**** @package acm* @version $Id$* @copyright (c) 2005, 2009 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @ignore*/if (!defined('IN_PHPBB')){	exit;}/*** ACM File Based Caching* @package acm*/class acm{	var $vars = array();	var $var_expires = array();	var $is_modified = false;	var $sql_rowset = array();	var $sql_row_pointer = array();	var $cache_dir = '';	/**	* Set cache path	*/	function acm()	{		global $phpbb_root_path;		$this->cache_dir = $phpbb_root_path . 'cache/';	}	/**	* Load global cache	*/	function load()	{		return $this->_read('data_global');	}	/**	* Unload cache object	*/	function unload()	{		$this->save();		unset($this->vars);		unset($this->var_expires);		unset($this->sql_rowset);		unset($this->sql_row_pointer);		$this->vars = array();		$this->var_expires = array();		$this->sql_rowset = array();		$this->sql_row_pointer = array();	}	/**	* Save modified objects	*/	function save()	{		if (!$this->is_modified)		{			return;		}		global $phpEx;		if (!$this->_write('data_global'))		{			if (!function_exists('phpbb_is_writable'))			{				global $phpbb_root_path;				include($phpbb_root_path . 'includes/functions.' . $phpEx);			}			// Now, this occurred how often? ... phew, just tell the user then...			if (!phpbb_is_writable($this->cache_dir))			{				// We need to use die() here, because else we may encounter an infinite loop (the message handler calls $cache->unload())				die('Fatal: ' . $this->cache_dir . ' is NOT writable.');				exit;			}			die('Fatal: Not able to open ' . $this->cache_dir . 'data_global.' . $phpEx);			exit;		}		$this->is_modified = false;	}	/**	* Tidy cache	*/	function tidy()	{		global $phpEx;		$dir = @opendir($this->cache_dir);		if (!$dir)		{			return;		}		$time = time();		while (($entry = readdir($dir)) !== false)		{			if (!preg_match('/^(sql_|data_(?!global))/', $entry))			{				continue;			}			if (!($handle = @fopen($this->cache_dir . $entry, 'rb')))			{				continue;			}			// Skip the PHP header			fgets($handle);			// Skip expiration			$expires = (int) fgets($handle);			fclose($handle);			if ($time >= $expires)			{				$this->remove_file($this->cache_dir . $entry);			}		}		closedir($dir);		if (file_exists($this->cache_dir . 'data_global.' . $phpEx))		{			if (!sizeof($this->vars))			{				$this->load();			}			foreach ($this->var_expires as $var_name => $expires)			{				if ($time >= $expires)				{					$this->destroy($var_name);				}			}		}		set_config('cache_last_gc', time(), true);	}	/**	* Get saved cache object	*/	function get($var_name)	{		if ($var_name[0] == '_')		{			global $phpEx;			if (!$this->_exists($var_name))			{				return false;			}			return $this->_read('data' . $var_name);		}		else		{			return ($this->_exists($var_name)) ? $this->vars[$var_name] : false;		}	}	/**	* Put data into cache	*/	function put($var_name, $var, $ttl = 31536000)	{		if ($var_name[0] == '_')		{			$this->_write('data' . $var_name, $var, time() + $ttl);		}		else		{			$this->vars[$var_name] = $var;			$this->var_expires[$var_name] = time() + $ttl;			$this->is_modified = true;		}	}	/**	* Purge cache data	*/	function purge()	{		// Purge all phpbb cache files		$dir = @opendir($this->cache_dir);		if (!$dir)		{			return;		}		while (($entry = readdir($dir)) !== false)		{			if (strpos($entry, 'sql_') !== 0 && strpos($entry, 'data_') !== 0 && strpos($entry, 'ctpl_') !== 0 && strpos($entry, 'tpl_') !== 0)			{				continue;			}			$this->remove_file($this->cache_dir . $entry);		}		closedir($dir);		unset($this->vars);		unset($this->var_expires);		unset($this->sql_rowset);		unset($this->sql_row_pointer);		$this->vars = array();		$this->var_expires = array();		$this->sql_rowset = array();		$this->sql_row_pointer = array();		$this->is_modified = false;	}	/**	* Destroy cache data	*/	function destroy($var_name, $table = '')	{		global $phpEx;		if ($var_name == 'sql' && !empty($table))		{			if (!is_array($table))			{				$table = array($table);			}			$dir = @opendir($this->cache_dir);			if (!$dir)			{				return;			}			while (($entry = readdir($dir)) !== false)			{				if (strpos($entry, 'sql_') !== 0)				{					continue;				}				if (!($handle = @fopen($this->cache_dir . $entry, 'rb')))				{					continue;				}				// Skip the PHP header				fgets($handle);				// Skip expiration				fgets($handle);				// Grab the query, remove the LF				$query = substr(fgets($handle), 0, -1);				fclose($handle);				foreach ($table as $check_table)				{					// Better catch partial table names than no table names. ;)					if (strpos($query, $check_table) !== false)					{						$this->remove_file($this->cache_dir . $entry);						break;					}				}			}			closedir($dir);			return;		}		if (!$this->_exists($var_name))		{			return;		}		if ($var_name[0] == '_')		{			$this->remove_file($this->cache_dir . 'data' . $var_name . ".$phpEx", true);		}		else if (isset($this->vars[$var_name]))		{			$this->is_modified = true;			unset($this->vars[$var_name]);			unset($this->var_expires[$var_name]);			// We save here to let the following cache hits succeed			$this->save();		}	}	/**	* Check if a given cache entry exist	*/	function _exists($var_name)	{		if ($var_name[0] == '_')		{			global $phpEx;			return file_exists($this->cache_dir . 'data' . $var_name . ".$phpEx");		}		else		{			if (!sizeof($this->vars))			{				$this->load();			}			if (!isset($this->var_expires[$var_name]))			{				return false;			}			return (time() > $this->var_expires[$var_name]) ? false : isset($this->vars[$var_name]);		}	}	/**	* Load cached sql query	*/	function sql_load($query)	{		// Remove extra spaces and tabs		$query = preg_replace('/[\n\r\s\t]+/', ' ', $query);		if (($rowset = $this->_read('sql_' . md5($query))) === false)		{			return false;		}		$query_id = sizeof($this->sql_rowset);		$this->sql_rowset[$query_id] = $rowset;		$this->sql_row_pointer[$query_id] = 0;		return $query_id;	}	/**	* Save sql query	*/	function sql_save($query, &$query_result, $ttl)	{		global $db;		// Remove extra spaces and tabs		$query = preg_replace('/[\n\r\s\t]+/', ' ', $query);		$query_id = sizeof($this->sql_rowset);		$this->sql_rowset[$query_id] = array();		$this->sql_row_pointer[$query_id] = 0;		while ($row = $db->sql_fetchrow($query_result))		{			$this->sql_rowset[$query_id][] = $row;		}		$db->sql_freeresult($query_result);		if ($this->_write('sql_' . md5($query), $this->sql_rowset[$query_id], $ttl + time(), $query))		{			$query_result = $query_id;		}	}	/**	* Ceck if a given sql query exist in cache	*/	function sql_exists($query_id)	{		return isset($this->sql_rowset[$query_id]);	}	/**	* Fetch row from cache (database)	*/	function sql_fetchrow($query_id)	{		if ($this->sql_row_pointer[$query_id] < sizeof($this->sql_rowset[$query_id]))		{			return $this->sql_rowset[$query_id][$this->sql_row_pointer[$query_id]++];		}		return false;	}	/**	* Fetch a field from the current row of a cached database result (database)	*/	function sql_fetchfield($query_id, $field)	{		if ($this->sql_row_pointer[$query_id] < sizeof($this->sql_rowset[$query_id]))		{			return (isset($this->sql_rowset[$query_id][$this->sql_row_pointer[$query_id]][$field])) ? $this->sql_rowset[$query_id][$this->sql_row_pointer[$query_id]++][$field] : false;		}		return false;	}	/**	* Seek a specific row in an a cached database result (database)	*/	function sql_rowseek($rownum, $query_id)	{		if ($rownum >= sizeof($this->sql_rowset[$query_id]))		{			return false;		}		$this->sql_row_pointer[$query_id] = $rownum;		return true;	}	/**	* Free memory used for a cached database result (database)	*/	function sql_freeresult($query_id)	{		if (!isset($this->sql_rowset[$query_id]))		{			return false;		}		unset($this->sql_rowset[$query_id]);		unset($this->sql_row_pointer[$query_id]);		return true;	}	/**	* Read cached data from a specified file	*	* @access private	* @param string $filename Filename to write	* @return mixed False if an error was encountered, otherwise the data type of the cached data	*/	function _read($filename)	{		global $phpEx;		$file = "{$this->cache_dir}$filename.$phpEx";		$type = substr($filename, 0, strpos($filename, '_'));		if (!file_exists($file))		{			return false;		}		if (!($handle = @fopen($file, 'rb')))		{			return false;		}		// Skip the PHP header		fgets($handle);		if ($filename == 'data_global')		{			$this->vars = $this->var_expires = array();			$time = time();			while (($expires = (int) fgets($handle)) && !feof($handle))			{				// Number of bytes of data				$bytes = substr(fgets($handle), 0, -1);				if (!is_numeric($bytes) || ($bytes = (int) $bytes) === 0)				{					// We cannot process the file without a valid number of bytes					// so we discard it					fclose($handle);					$this->vars = $this->var_expires = array();					$this->is_modified = false;					$this->remove_file($file);					return false;				}				if ($time >= $expires)				{					fseek($handle, $bytes, SEEK_CUR);					continue;				}				$var_name = substr(fgets($handle), 0, -1);				// Read the length of bytes that consists of data.				$data = fread($handle, $bytes - strlen($var_name));				$data = @unserialize($data);				// Don't use the data if it was invalid				if ($data !== false)				{					$this->vars[$var_name] = $data;					$this->var_expires[$var_name] = $expires;				}				// Absorb the LF				fgets($handle);			}			fclose($handle);			$this->is_modified = false;			return true;		}		else		{			$data = false;			$line = 0;			while (($buffer = fgets($handle)) && !feof($handle))			{				$buffer = substr($buffer, 0, -1); // Remove the LF				// $buffer is only used to read integers				// if it is non numeric we have an invalid				// cache file, which we will now remove.				if (!is_numeric($buffer))				{					break;				}				if ($line == 0)				{					$expires = (int) $buffer;					if (time() >= $expires)					{						break;					}					if ($type == 'sql')					{						// Skip the query						fgets($handle);					}				}				else if ($line == 1)				{					$bytes = (int) $buffer;					// Never should have 0 bytes					if (!$bytes)					{						break;					}					// Grab the serialized data					$data = fread($handle, $bytes);					// Read 1 byte, to trigger EOF					fread($handle, 1);					if (!feof($handle))					{						// Somebody tampered with our data						$data = false;					}					break;				}				else				{					// Something went wrong					break;				}				$line++;			}			fclose($handle);			// unserialize if we got some data			$data = ($data !== false) ? @unserialize($data) : $data;			if ($data === false)			{				$this->remove_file($file);				return false;			}			return $data;		}	}	/**	* Write cache data to a specified file	*	* 'data_global' is a special case and the generated format is different for this file:	* <code>	* <?php exit; ?>	* (expiration)	* (length of var and serialised data)	* (var)	* (serialised data)	* ... (repeat)	* </code>	*	* The other files have a similar format:	* <code>	* <?php exit; ?>	* (expiration)	* (query) [SQL files only]	* (length of serialised data)	* (serialised data)	* </code>	*	* @access private	* @param string $filename Filename to write	* @param mixed $data Data to store	* @param int $expires Timestamp when the data expires	* @param string $query Query when caching SQL queries	* @return bool True if the file was successfully created, otherwise false	*/	function _write($filename, $data = null, $expires = 0, $query = '')	{		global $phpEx;		$file = "{$this->cache_dir}$filename.$phpEx";		if ($handle = @fopen($file, 'wb'))		{			@flock($handle, LOCK_EX);			// File header			fwrite($handle, '<' . '?php exit; ?' . '>');			if ($filename == 'data_global')			{				// Global data is a different format				foreach ($this->vars as $var => $data)				{					if (strpos($var, "\r") !== false || strpos($var, "\n") !== false)					{						// CR/LF would cause fgets() to read the cache file incorrectly						// do not cache test entries, they probably won't be read back						// the cache keys should really be alphanumeric with a few symbols.						continue;					}					$data = serialize($data);					// Write out the expiration time					fwrite($handle, "\n" . $this->var_expires[$var] . "\n");					// Length of the remaining data for this var (ignoring two LF's)					fwrite($handle, strlen($data . $var) . "\n");					fwrite($handle, $var . "\n");					fwrite($handle, $data);				}			}			else			{				fwrite($handle, "\n" . $expires . "\n");				if (strpos($filename, 'sql_') === 0)				{					fwrite($handle, $query . "\n");				}				$data = serialize($data);				fwrite($handle, strlen($data) . "\n");				fwrite($handle, $data);			}			@flock($handle, LOCK_UN);			fclose($handle);			if (!function_exists('phpbb_chmod'))			{				global $phpbb_root_path;				include($phpbb_root_path . 'includes/functions.' . $phpEx);			}			phpbb_chmod($file, CHMOD_READ | CHMOD_WRITE);			return true;		}		return false;	}	/**	* Removes/unlinks file	*/	function remove_file($filename, $check = false)	{		if (!function_exists('phpbb_is_writable'))		{			global $phpbb_root_path, $phpEx;			include($phpbb_root_path . 'includes/functions.' . $phpEx);		}		if ($check && !phpbb_is_writable($this->cache_dir))		{			// E_USER_ERROR - not using language entry - intended.			trigger_error('Unable to remove files within ' . $this->cache_dir . '. Please check directory permissions.', E_USER_ERROR);		}		return @unlink($filename);	}}?>
<?php/**** @package acp* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @package module_install*/class acp_bots_info{	function module()	{		return array(			'filename'	=> 'acp_bots',			'title'		=> 'ACP_BOTS',			'version'	=> '1.0.0',			'modes'		=> array(				'bots'		=> array('title' => 'ACP_BOTS', 'auth' => 'acl_a_bots', 'cat' => array('ACP_GENERAL_TASKS')),			),		);	}	function install()	{	}	function uninstall()	{	}}?>
<?php/**** @package acm* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @ignore*/if (!defined('IN_PHPBB')){	exit;}/*** Class for grabbing/handling cached entries, extends acm_file or acm_db depending on the setup* @package acm*/class cache extends acm{	/**	* Get config values	*/	function obtain_config()	{		global $db;		if (($config = $this->get('config')) !== false)		{			$sql = 'SELECT config_name, config_value				FROM ' . CONFIG_TABLE . '				WHERE is_dynamic = 1';			$result = $db->sql_query($sql);			while ($row = $db->sql_fetchrow($result))			{				$config[$row['config_name']] = $row['config_value'];			}			$db->sql_freeresult($result);		}		else		{			$config = $cached_config = array();			$sql = 'SELECT config_name, config_value, is_dynamic				FROM ' . CONFIG_TABLE;			$result = $db->sql_query($sql);			while ($row = $db->sql_fetchrow($result))			{				if (!$row['is_dynamic'])				{					$cached_config[$row['config_name']] = $row['config_value'];				}				$config[$row['config_name']] = $row['config_value'];			}			$db->sql_freeresult($result);			$this->put('config', $cached_config);		}		return $config;	}	/**	* Obtain list of naughty words and build preg style replacement arrays for use by the	* calling script	*/	function obtain_word_list()	{		global $db;		if (($censors = $this->get('_word_censors')) === false)		{			$sql = 'SELECT word, replacement				FROM ' . WORDS_TABLE;			$result = $db->sql_query($sql);			$censors = array();			while ($row = $db->sql_fetchrow($result))			{				$censors['match'][] = get_censor_preg_expression($row['word']);				$censors['replace'][] = $row['replacement'];			}			$db->sql_freeresult($result);			$this->put('_word_censors', $censors);		}		return $censors;	}	/**	* Obtain currently listed icons	*/	function obtain_icons()	{		if (($icons = $this->get('_icons')) === false)		{			global $db;			// Topic icons			$sql = 'SELECT *				FROM ' . ICONS_TABLE . '				ORDER BY icons_order';			$result = $db->sql_query($sql);			$icons = array();			while ($row = $db->sql_fetchrow($result))			{				$icons[$row['icons_id']]['img'] = $row['icons_url'];				$icons[$row['icons_id']]['width'] = (int) $row['icons_width'];				$icons[$row['icons_id']]['height'] = (int) $row['icons_height'];				$icons[$row['icons_id']]['display'] = (bool) $row['display_on_posting'];			}			$db->sql_freeresult($result);			$this->put('_icons', $icons);		}		return $icons;	}	/**	* Obtain ranks	*/	function obtain_ranks()	{		if (($ranks = $this->get('_ranks')) === false)		{			global $db;			$sql = 'SELECT *				FROM ' . RANKS_TABLE . '				ORDER BY rank_min DESC';			$result = $db->sql_query($sql);			$ranks = array();			while ($row = $db->sql_fetchrow($result))			{				if ($row['rank_special'])				{					$ranks['special'][$row['rank_id']] = array(						'rank_title'	=>	$row['rank_title'],						'rank_image'	=>	$row['rank_image']					);				}				else				{					$ranks['normal'][] = array(						'rank_title'	=>	$row['rank_title'],						'rank_min'		=>	$row['rank_min'],						'rank_image'	=>	$row['rank_image']					);				}			}			$db->sql_freeresult($result);			$this->put('_ranks', $ranks);		}		return $ranks;	}	/**	* Obtain allowed extensions	*	* @param mixed $forum_id If false then check for private messaging, if int then check for forum id. If true, then only return extension informations.	*	* @return array allowed extensions array.	*/	function obtain_attach_extensions($forum_id)	{		if (($extensions = $this->get('_extensions')) === false)		{			global $db;			$extensions = array(				'_allowed_post'	=> array(),				'_allowed_pm'	=> array(),			);			// The rule is to only allow those extensions defined. ;)			$sql = 'SELECT e.extension, g.*				FROM ' . EXTENSIONS_TABLE . ' e, ' . EXTENSION_GROUPS_TABLE . ' g				WHERE e.group_id = g.group_id					AND (g.allow_group = 1 OR g.allow_in_pm = 1)';			$result = $db->sql_query($sql);			while ($row = $db->sql_fetchrow($result))			{				$extension = strtolower(trim($row['extension']));				$extensions[$extension] = array(					'display_cat'	=> (int) $row['cat_id'],					'download_mode'	=> (int) $row['download_mode'],					'upload_icon'	=> trim($row['upload_icon']),					'max_filesize'	=> (int) $row['max_filesize'],					'allow_group'	=> $row['allow_group'],					'allow_in_pm'	=> $row['allow_in_pm'],				);				$allowed_forums = ($row['allowed_forums']) ? unserialize(trim($row['allowed_forums'])) : array();				// Store allowed extensions forum wise				if ($row['allow_group'])				{					$extensions['_allowed_post'][$extension] = (!sizeof($allowed_forums)) ? 0 : $allowed_forums;				}				if ($row['allow_in_pm'])				{					$extensions['_allowed_pm'][$extension] = 0;				}			}			$db->sql_freeresult($result);			$this->put('_extensions', $extensions);		}		// Forum post		if ($forum_id === false)		{			// We are checking for private messages, therefore we only need to get the pm extensions...			$return = array('_allowed_' => array());			foreach ($extensions['_allowed_pm'] as $extension => $check)			{				$return['_allowed_'][$extension] = 0;				$return[$extension] = $extensions[$extension];			}			$extensions = $return;		}		else if ($forum_id === true)		{			return $extensions;		}		else		{			$forum_id = (int) $forum_id;			$return = array('_allowed_' => array());			foreach ($extensions['_allowed_post'] as $extension => $check)			{				// Check for allowed forums				if (is_array($check))				{					$allowed = (!in_array($forum_id, $check)) ? false : true;				}				else				{					$allowed = true;				}				if ($allowed)				{					$return['_allowed_'][$extension] = 0;					$return[$extension] = $extensions[$extension];				}			}			$extensions = $return;		}		if (!isset($extensions['_allowed_']))		{			$extensions['_allowed_'] = array();		}		return $extensions;	}	/**	* Obtain active bots	*/	function obtain_bots()	{		if (($bots = $this->get('_bots')) === false)		{			global $db;			switch ($db->sql_layer)			{				case 'mssql':				case 'mssql_odbc':				case 'mssqlnative':					$sql = 'SELECT user_id, bot_agent, bot_ip						FROM ' . BOTS_TABLE . '						WHERE bot_active = 1					ORDER BY LEN(bot_agent) DESC';				break;				case 'firebird':					$sql = 'SELECT user_id, bot_agent, bot_ip						FROM ' . BOTS_TABLE . '						WHERE bot_active = 1					ORDER BY CHAR_LENGTH(bot_agent) DESC';				break;				// LENGTH supported by MySQL, IBM DB2 and Oracle for sure...				default:					$sql = 'SELECT user_id, bot_agent, bot_ip						FROM ' . BOTS_TABLE . '						WHERE bot_active = 1					ORDER BY LENGTH(bot_agent) DESC';				break;			}			$result = $db->sql_query($sql);			$bots = array();			while ($row = $db->sql_fetchrow($result))			{				$bots[] = $row;			}			$db->sql_freeresult($result);			$this->put('_bots', $bots);		}		return $bots;	}	/**	* Obtain cfg file data	*/	function obtain_cfg_items($theme)	{		global $config, $phpbb_root_path;		$parsed_items = array(			'theme'		=> array(),			'template'	=> array(),			'imageset'	=> array()		);		foreach ($parsed_items as $key => $parsed_array)		{			$parsed_array = $this->get('_cfg_' . $key . '_' . $theme[$key . '_path']);			if ($parsed_array === false)			{				$parsed_array = array();			}			$reparse = false;			$filename = $phpbb_root_path . 'styles/' . $theme[$key . '_path'] . '/' . $key . '/' . $key . '.cfg';			if (!file_exists($filename))			{				continue;			}			if (!isset($parsed_array['filetime']) || (($config['load_tplcompile'] && @filemtime($filename) > $parsed_array['filetime'])))			{				$reparse = true;			}			// Re-parse cfg file			if ($reparse)			{				$parsed_array = parse_cfg_file($filename);				$parsed_array['filetime'] = @filemtime($filename);				$this->put('_cfg_' . $key . '_' . $theme[$key . '_path'], $parsed_array);			}			$parsed_items[$key] = $parsed_array;		}		return $parsed_items;	}	/**	* Obtain disallowed usernames	*/	function obtain_disallowed_usernames()	{		if (($usernames = $this->get('_disallowed_usernames')) === false)		{			global $db;			$sql = 'SELECT disallow_username				FROM ' . DISALLOW_TABLE;			$result = $db->sql_query($sql);			$usernames = array();			while ($row = $db->sql_fetchrow($result))			{				$usernames[] = str_replace('%', '.*?', preg_quote(utf8_clean_string($row['disallow_username']), '#'));			}			$db->sql_freeresult($result);			$this->put('_disallowed_usernames', $usernames);		}		return $usernames;	}	/**	* Obtain hooks...	*/	function obtain_hooks()	{		global $phpbb_root_path, $phpEx;		if (($hook_files = $this->get('_hooks')) === false)		{			$hook_files = array();			// Now search for hooks...			$dh = @opendir($phpbb_root_path . 'includes/hooks/');			if ($dh)			{				while (($file = readdir($dh)) !== false)				{					if (strpos($file, 'hook_') === 0 && substr($file, -(strlen($phpEx) + 1)) === '.' . $phpEx)					{						$hook_files[] = substr($file, 0, -(strlen($phpEx) + 1));					}				}				closedir($dh);			}			$this->put('_hooks', $hook_files);		}		return $hook_files;	}}?>
<?php/**** acp_groups [English]** @package language* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** DO NOT CHANGE*/if (!defined('IN_PHPBB')){	exit;}if (empty($lang) || !is_array($lang)){	$lang = array();}// DEVELOPERS PLEASE NOTE//// All language files should use UTF-8 as their encoding and the files must not contain a BOM.//// Placeholders can now contain order information, e.g. instead of// 'Page %s of %s' you can (and should) write 'Page %1$s of %2$s', this allows// translators to re-order the output of data while ensuring it remains correct//// You do not need this where single placeholders are used, e.g. 'Message %d' is fine// equally where a string contains only two placeholders which are used to wrap text// in a url you again do not need to specify an order e.g., 'Click %sHERE%s' is fine$lang = array_merge($lang, array(	'ACP_GROUPS_MANAGE_EXPLAIN'		=> 'From this panel you can administer all your usergroups. You can delete, create and edit existing groups. Furthermore, you may choose group leaders, toggle open/hidden/closed group status and set the group name and description.',	'ADD_USERS'						=> 'Add users',	'ADD_USERS_EXPLAIN'				=> 'Here you can add new users to the group. You may select whether this group becomes the new default for the selected users. Additionally you can define them as group leaders. Please enter each username on a separate line.',	'COPY_PERMISSIONS'				=> 'Copy permissions from',	'COPY_PERMISSIONS_EXPLAIN'		=> 'Once created, the group will have the same permissions as the one you select here.',	'CREATE_GROUP'					=> 'Create new group',	'GROUPS_NO_MEMBERS'				=> 'This group has no members',	'GROUPS_NO_MODS'				=> 'No group leaders defined',	'GROUP_APPROVE'					=> 'Approve member',	'GROUP_APPROVED'				=> 'Approved members',	'GROUP_AVATAR'					=> 'Group avatar',	'GROUP_AVATAR_EXPLAIN'			=> 'This image will be displayed in the Group Control Panel.',	'GROUP_CLOSED'					=> 'Closed',	'GROUP_COLOR'					=> 'Group colour',	'GROUP_COLOR_EXPLAIN'			=> 'Defines the colour members usernames will appear in, leave blank for user default.',	'GROUP_CONFIRM_ADD_USER'		=> 'Are you sure that you want to add the user %1$s to the group?',	'GROUP_CONFIRM_ADD_USERS'		=> 'Are you sure that you want to add the users %1$s to the group?',	'GROUP_CREATED'					=> 'Group has been created successfully.',	'GROUP_DEFAULT'					=> 'Make group default for member',	'GROUP_DEFS_UPDATED'			=> 'Default group set for all selected members.',	'GROUP_DELETE'					=> 'Remove member from group',	'GROUP_DELETED'					=> 'Group deleted and user default groups set successfully.',	'GROUP_DEMOTE'					=> 'Demote group leader',	'GROUP_DESC'					=> 'Group description',	'GROUP_DETAILS'					=> 'Group details',	'GROUP_EDIT_EXPLAIN'			=> 'Here you can edit an existing group. You can change its name, description and type (open, closed, etc.). You can also set certain group wide options such as colouration, rank, etc. Changes made here override users current settings. Please note that group members can override group-avatar settings, unless you set appropriate user permissions.',	'GROUP_ERR_USERS_EXIST'			=> 'The specified users are already members of this group.',	'GROUP_FOUNDER_MANAGE'			=> 'Founder manage only',	'GROUP_FOUNDER_MANAGE_EXPLAIN'	=> 'Restrict management of this group to founders only. Users having group permissions are still able to see this group as well as this groups members.',	'GROUP_HIDDEN'					=> 'Hidden',	'GROUP_LANG'					=> 'Group language',	'GROUP_LEAD'					=> 'Group leaders',	'GROUP_LEADERS_ADDED'			=> 'New leaders added to group successfully.',	'GROUP_LEGEND'					=> 'Display group in legend',	'GROUP_LIST'					=> 'Current members',	'GROUP_LIST_EXPLAIN'			=> 'This is a complete list of all the current users with membership of this group. You can delete members (except in certain special groups) or add new ones as you see fit.',	'GROUP_MEMBERS'					=> 'Group members',	'GROUP_MEMBERS_EXPLAIN'			=> 'This is a complete listing of all the members of this usergroup. It includes separate sections for leaders, pending and existing members. From here you can manage all aspects of who has membership of this group and what their role is. To remove a leader but keep them in the group use Demote rather than delete. Similarly use Promote to make an existing member a leader.',	'GROUP_MESSAGE_LIMIT'			=> 'Group private message limit per folder',	'GROUP_MESSAGE_LIMIT_EXPLAIN'	=> 'This setting overrides the per-user folder message limit. A value of 0 means the user default limit will be used.',	'GROUP_MODS_ADDED'				=> 'New group leaders added successfully.',	'GROUP_MODS_DEMOTED'			=> 'Group leaders demoted successfully.',	'GROUP_MODS_PROMOTED'			=> 'Group members promoted successfully.',	'GROUP_NAME'					=> 'Group name',	'GROUP_NAME_TAKEN'				=> 'The group name you entered is already in use, please select an alternative.',	'GROUP_OPEN'					=> 'Open',	'GROUP_PENDING'					=> 'Pending members',	'GROUP_MAX_RECIPIENTS'			=> 'Maximum number of allowed recipients per private message',	'GROUP_MAX_RECIPIENTS_EXPLAIN'	=> 'The maximum number of allowed recipients in a private message. If 0 is entered, the board-wide setting is used.',	'GROUP_OPTIONS_SAVE'			=> 'Group wide options',	'GROUP_PROMOTE'					=> 'Promote to group leader',	'GROUP_RANK'					=> 'Group rank',	'GROUP_RECEIVE_PM'				=> 'Group able to receive private messages',	'GROUP_RECEIVE_PM_EXPLAIN'		=> 'Please note that hidden groups are not able to be messaged, regardless of this setting.',	'GROUP_REQUEST'					=> 'Request',	'GROUP_SETTINGS_SAVE'			=> 'Group wide settings',	'GROUP_SKIP_AUTH'				=> 'Exempt group leader from permissions',	'GROUP_SKIP_AUTH_EXPLAIN'		=> 'If enabled group leader no longer inherit permissions from the group.',	'GROUP_TYPE'					=> 'Group type',	'GROUP_TYPE_EXPLAIN'			=> 'This determines which users can join or view this group.',	'GROUP_UPDATED'					=> 'Group preferences updated successfully.',	'GROUP_USERS_ADDED'				=> 'New users added to group successfully.',	'GROUP_USERS_EXIST'				=> 'The selected users are already members.',	'GROUP_USERS_REMOVE'			=> 'Users removed from group and new defaults set successfully.',	'MAKE_DEFAULT_FOR_ALL'	=> 'Make default group for every member',	'MEMBERS'				=> 'Members',	'NO_GROUP'					=> 'No group specified.',	'NO_GROUPS_CREATED'			=> 'No groups created yet.',	'NO_PERMISSIONS'			=> 'Do not copy permissions',	'NO_USERS'					=> 'You havent entered any users.',	'NO_USERS_ADDED'			=> 'No users were added to the group.',	'NO_VALID_USERS'			=> 'You havent entered any users eligible for that action.',	'SPECIAL_GROUPS'			=> 'Pre-defined groups',	'SPECIAL_GROUPS_EXPLAIN'	=> 'Pre-defined groups are special groups, they cannot be deleted or directly modified. However you can still add users and alter basic settings.',	'TOTAL_MEMBERS'				=> 'Members',	'USERS_APPROVED'				=> 'Users approved successfully.',	'USER_DEFAULT'					=> 'User default',	'USER_DEF_GROUPS'				=> 'User defined groups',	'USER_DEF_GROUPS_EXPLAIN'		=> 'These are groups created by you or another admin on this board. You can manage memberships as well as edit group properties or even delete the group.',	'USER_GROUP_DEFAULT'			=> 'Set as default group',	'USER_GROUP_DEFAULT_EXPLAIN'	=> 'Saying yes here will set this group as the default group for the added users.',	'USER_GROUP_LEADER'				=> 'Set as group leader',));?>
<?php/**** @package acp* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @package module_install*/class acp_database_info{	function module()	{		return array(			'filename'	=> 'acp_database',			'title'		=> 'ACP_DATABASE',			'version'	=> '1.0.0',			'modes'		=> array(				'backup'	=> array('title' => 'ACP_BACKUP', 'auth' => 'acl_a_backup', 'cat' => array('ACP_CAT_DATABASE')),				'restore'	=> array('title' => 'ACP_RESTORE', 'auth' => 'acl_a_backup', 'cat' => array('ACP_CAT_DATABASE')),			),		);	}	function install()	{	}	function uninstall()	{	}}?>
<?php/**** @package acp* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @ignore*/if (!defined('IN_PHPBB')){	exit;}/*** @package acp*/class acp_language{	var $u_action;	var $main_files;	var $language_header = '';	var $lang_header = '';	var $language_file = '';	var $language_directory = '';	function main($id, $mode)	{		global $config, $db, $user, $auth, $template, $cache;		global $phpbb_root_path, $phpbb_admin_path, $phpEx, $table_prefix;		global $safe_mode, $file_uploads;		include_once($phpbb_root_path . 'includes/functions_user.' . $phpEx);		$this->default_variables();		// Check and set some common vars		$action		= (isset($_POST['update_details'])) ? 'update_details' : '';		$action		= (isset($_POST['download_file'])) ? 'download_file' : $action;		$action		= (isset($_POST['upload_file'])) ? 'upload_file' : $action;		$action		= (isset($_POST['upload_data'])) ? 'upload_data' : $action;		$action		= (isset($_POST['submit_file'])) ? 'submit_file' : $action;		$action		= (isset($_POST['remove_store'])) ? 'details' : $action;		$submit = (empty($action) && !isset($_POST['update']) && !isset($_POST['test_connection'])) ? false : true;		$action = (empty($action)) ? request_var('action', '') : $action;		$form_name = 'acp_lang';		add_form_key('acp_lang');		$lang_id = request_var('id', 0);		if (isset($_POST['missing_file']))		{			$missing_file = request_var('missing_file', array('' => 0));			list($_REQUEST['language_file'], ) = array_keys($missing_file);		}		$selected_lang_file = request_var('language_file', '|common.' . $phpEx);		list($this->language_directory, $this->language_file) = explode('|', $selected_lang_file);		$this->language_directory = basename($this->language_directory);		$this->language_file = basename($this->language_file);		$user->add_lang('acp/language');		$this->tpl_name = 'acp_language';		$this->page_title = 'ACP_LANGUAGE_PACKS';		if ($submit && $action == 'upload_data' && request_var('test_connection', ''))		{			$test_connection = false;			$action = 'upload_file';			$method = request_var('method', '');			include_once($phpbb_root_path . 'includes/functions_transfer.' . $phpEx);			switch ($method)			{				case 'ftp':					$transfer = new ftp(request_var('host', ''), request_var('username', ''), request_var('password', ''), request_var('root_path', ''), request_var('port', ''), request_var('timeout', ''));				break;				case 'ftp_fsock':					$transfer = new ftp_fsock(request_var('host', ''), request_var('username', ''), request_var('password', ''), request_var('root_path', ''), request_var('port', ''), request_var('timeout', ''));				break;				default:					trigger_error($user->lang['INVALID_UPLOAD_METHOD'], E_USER_ERROR);				break;			}			$test_connection = $transfer->open_session();			$transfer->close_session();		}		switch ($action)		{			case 'upload_file':				include_once($phpbb_root_path . 'includes/functions_transfer.' . $phpEx);				$method = request_var('method', '');				if (!class_exists($method))				{					trigger_error('Method does not exist.', E_USER_ERROR);				}				$requested_data = call_user_func(array($method, 'data'));				foreach ($requested_data as $data => $default)				{					$template->assign_block_vars('data', array(						'DATA'		=> $data,						'NAME'		=> $user->lang[strtoupper($method . '_' . $data)],						'EXPLAIN'	=> $user->lang[strtoupper($method . '_' . $data) . '_EXPLAIN'],						'DEFAULT'	=> (!empty($_REQUEST[$data])) ? request_var($data, '') : $default					));				}				$hidden_data = build_hidden_fields(array(					'file'			=> $this->language_file,					'dir'			=> $this->language_directory,					'language_file'	=> $selected_lang_file,					'method'		=> $method)				);				$hidden_data .= build_hidden_fields(array('entry' => $_POST['entry']), true, STRIP);				$template->assign_vars(array(					'S_UPLOAD'	=> true,					'NAME'		=> $method,					'U_ACTION'	=> $this->u_action . "&amp;id=$lang_id&amp;action=upload_data",					'U_BACK'	=> $this->u_action . "&amp;id=$lang_id&amp;action=details&amp;language_file=" . urlencode($selected_lang_file),					'HIDDEN'	=> $hidden_data,					'S_CONNECTION_SUCCESS'		=> (request_var('test_connection', '') && $test_connection === true) ? true : false,					'S_CONNECTION_FAILED'		=> (request_var('test_connection', '') && $test_connection !== true) ? true : false				));			break;			case 'update_details':				if (!$submit || !check_form_key($form_name))				{					trigger_error($user->lang['FORM_INVALID']. adm_back_link($this->u_action), E_USER_WARNING);				}				if (!$lang_id)				{					trigger_error($user->lang['NO_LANG_ID'] . adm_back_link($this->u_action), E_USER_WARNING);				}				$sql = 'SELECT *					FROM ' . LANG_TABLE . "					WHERE lang_id = $lang_id";				$result = $db->sql_query($sql);				$row = $db->sql_fetchrow($result);				$db->sql_freeresult($result);				$sql_ary	= array(					'lang_english_name'		=> request_var('lang_english_name', $row['lang_english_name']),					'lang_local_name'		=> utf8_normalize_nfc(request_var('lang_local_name', $row['lang_local_name'], true)),					'lang_author'			=> utf8_normalize_nfc(request_var('lang_author', $row['lang_author'], true)),				);				$db->sql_query('UPDATE ' . LANG_TABLE . '					SET ' . $db->sql_build_array('UPDATE', $sql_ary) . '					WHERE lang_id = ' . $lang_id);				add_log('admin', 'LOG_LANGUAGE_PACK_UPDATED', $sql_ary['lang_english_name']);				trigger_error($user->lang['LANGUAGE_DETAILS_UPDATED'] . adm_back_link($this->u_action));			break;			case 'submit_file':			case 'download_file':			case 'upload_data':				if (!$submit || !check_form_key($form_name))				{					trigger_error($user->lang['FORM_INVALID']. adm_back_link($this->u_action), E_USER_WARNING);				}				if (!$lang_id || empty($_POST['entry']))				{					trigger_error($user->lang['NO_LANG_ID'] . adm_back_link($this->u_action), E_USER_WARNING);				}				if ($this->language_directory != 'email' && !is_array($_POST['entry']))				{					trigger_error($user->lang['NO_LANG_ID'] . adm_back_link($this->u_action), E_USER_WARNING);				}				if (!$this->language_file || (!$this->language_directory && !in_array($this->language_file, $this->main_files)))				{					trigger_error($user->lang['NO_FILE_SELECTED'] . adm_back_link($this->u_action), E_USER_WARNING);				}				$sql = 'SELECT *					FROM ' . LANG_TABLE . "					WHERE lang_id = $lang_id";				$result = $db->sql_query($sql);				$row = $db->sql_fetchrow($result);				$db->sql_freeresult($result);				if (!$row)				{					trigger_error($user->lang['NO_LANG_ID'] . adm_back_link($this->u_action), E_USER_WARNING);				}				// Before we attempt to write anything let's check if the admin really chose a correct filename				switch ($this->language_directory)				{					case 'email':						// Get email templates						$email_files = filelist($phpbb_root_path . 'language/' . $row['lang_iso'], 'email', 'txt');						$email_files = $email_files['email/'];						if (!in_array($this->language_file, $email_files))						{							trigger_error($user->lang['WRONG_LANGUAGE_FILE'] . adm_back_link($this->u_action . '&amp;action=details&amp;id=' . $lang_id), E_USER_WARNING);						}					break;					case 'acp':						// Get acp files						$acp_files = filelist($phpbb_root_path . 'language/' . $row['lang_iso'], 'acp', $phpEx);						$acp_files = $acp_files['acp/'];						if (!in_array($this->language_file, $acp_files))						{							trigger_error($user->lang['WRONG_LANGUAGE_FILE'] . adm_back_link($this->u_action . '&amp;action=details&amp;id=' . $lang_id), E_USER_WARNING);						}					break;					case 'mods':						// Get mod files						$mods_files = filelist($phpbb_root_path . 'language/' . $row['lang_iso'], 'mods', $phpEx);						$mods_files = (isset($mods_files['mods/'])) ? $mods_files['mods/'] : array();						if (!in_array($this->language_file, $mods_files))						{							trigger_error($user->lang['WRONG_LANGUAGE_FILE'] . adm_back_link($this->u_action . '&amp;action=details&amp;id=' . $lang_id), E_USER_WARNING);						}					break;					default:						if (!in_array($this->language_file, $this->main_files))						{							trigger_error($user->lang['WRONG_LANGUAGE_FILE'] . adm_back_link($this->u_action . '&amp;action=details&amp;id=' . $lang_id), E_USER_WARNING);						}					break;				}				if (!$safe_mode)				{					$mkdir_ary = array('language', 'language/' . $row['lang_iso']);					if ($this->language_directory)					{						$mkdir_ary[] = 'language/' . $row['lang_iso'] . '/' . $this->language_directory;					}					foreach ($mkdir_ary as $dir)					{						$dir = $phpbb_root_path . 'store/' . $dir;						if (!is_dir($dir))						{							if (!@mkdir($dir, 0777))							{								trigger_error("Could not create directory $dir", E_USER_ERROR);							}							@chmod($dir, 0777);						}					}				}				// Get target filename for storage folder				$filename = $this->get_filename($row['lang_iso'], $this->language_directory, $this->language_file, true, true);				$fp = @fopen($phpbb_root_path . $filename, 'wb');				if (!$fp)				{					trigger_error(sprintf($user->lang['UNABLE_TO_WRITE_FILE'], $filename) . adm_back_link($this->u_action . '&amp;id=' . $lang_id . '&amp;action=details&amp;language_file=' . urlencode($selected_lang_file)), E_USER_WARNING);				}				if ($this->language_directory == 'email')				{					// Email Template					$entry = $this->prepare_lang_entry($_POST['entry'], false);					fwrite($fp, $entry);				}				else				{					$name = (($this->language_directory) ? $this->language_directory . '_' : '') . $this->language_file;					$header = str_replace(array('{FILENAME}', '{LANG_NAME}', '{CHANGED}', '{AUTHOR}'), array($name, $row['lang_english_name'], date('Y-m-d', time()), $row['lang_author']), $this->language_file_header);					if (strpos($this->language_file, 'help_') === 0)					{						// Help File						$header .= '$help = array(' . "\n";						fwrite($fp, $header);						foreach ($_POST['entry'] as $key => $value)						{							if (!is_array($value))							{								continue;							}							$entry = "\tarray(\n";							foreach ($value as $_key => $_value)							{								$entry .= "\t\t" . (int) $_key . "\t=> '" . $this->prepare_lang_entry($_value) . "',\n";							}							$entry .= "\t),\n";							fwrite($fp, $entry);						}						$footer = ");\n\n?>";						fwrite($fp, $footer);					}					else					{						// Language File						$header .= $this->lang_header;						fwrite($fp, $header);						foreach ($_POST['entry'] as $key => $value)						{							$entry = $this->format_lang_array($key, $value);							fwrite($fp, $entry);						}						$footer = "));\n\n?>";						fwrite($fp, $footer);					}				}				fclose($fp);				if ($action == 'download_file')				{					header('Pragma: no-cache');					header('Content-Type: application/octetstream; name="' . $this->language_file . '"');					header('Content-disposition: attachment; filename=' . $this->language_file);					$fp = @fopen($phpbb_root_path . $filename, 'rb');					while ($buffer = fread($fp, 1024))					{						echo $buffer;					}					fclose($fp);					add_log('admin', 'LOG_LANGUAGE_FILE_SUBMITTED', $this->language_file);					exit;				}				else if ($action == 'upload_data')				{					$sql = 'SELECT lang_iso						FROM ' . LANG_TABLE . "						WHERE lang_id = $lang_id";					$result = $db->sql_query($sql);					$row = $db->sql_fetchrow($result);					$db->sql_freeresult($result);					$file = request_var('file', '');					$dir = request_var('dir', '');					$selected_lang_file = $dir . '|' . $file;					$old_file = '/' . $this->get_filename($row['lang_iso'], $dir, $file, false, true);					$lang_path = 'language/' . $row['lang_iso'] . '/' . (($dir) ? $dir . '/' : '');					include_once($phpbb_root_path . 'includes/functions_transfer.' . $phpEx);					$method = request_var('method', '');					if ($method != 'ftp' && $method != 'ftp_fsock')					{						trigger_error($user->lang['INVALID_UPLOAD_METHOD'], E_USER_ERROR);					}					$transfer = new $method(request_var('host', ''), request_var('username', ''), request_var('password', ''), request_var('root_path', ''), request_var('port', ''), request_var('timeout', ''));					if (($result = $transfer->open_session()) !== true)					{						trigger_error($user->lang[$result] . adm_back_link($this->u_action . '&amp;action=details&amp;id=' . $lang_id . '&amp;language_file=' . urlencode($selected_lang_file)), E_USER_WARNING);					}					$transfer->rename($lang_path . $file, $lang_path . $file . '.bak');					$result = $transfer->copy_file('store/' . $lang_path . $file, $lang_path . $file);					if ($result === false)					{						// If failed, try to rename again and print error out...						$transfer->delete_file($lang_path . $file);						$transfer->rename($lang_path . $file . '.bak', $lang_path . $file);						trigger_error($user->lang['UPLOAD_FAILED'] . adm_back_link($this->u_action . '&amp;action=details&amp;id=' . $lang_id . '&amp;language_file=' . urlencode($selected_lang_file)), E_USER_WARNING);					}					$transfer->close_session();					// Remove from storage folder					if (file_exists($phpbb_root_path . 'store/' . $lang_path . $file))					{						@unlink($phpbb_root_path . 'store/' . $lang_path . $file);					}					add_log('admin', 'LOG_LANGUAGE_FILE_REPLACED', $file);					trigger_error($user->lang['UPLOAD_COMPLETED'] . adm_back_link($this->u_action . '&amp;action=details&amp;id=' . $lang_id . '&amp;language_file=' . urlencode($selected_lang_file)));				}				add_log('admin', 'LOG_LANGUAGE_FILE_SUBMITTED', $this->language_file);				$action = 'details';			// no break;			case 'details':				if (!$lang_id)				{					trigger_error($user->lang['NO_LANG_ID'] . adm_back_link($this->u_action), E_USER_WARNING);				}				$this->page_title = 'LANGUAGE_PACK_DETAILS';				$sql = 'SELECT *					FROM ' . LANG_TABLE . '					WHERE lang_id = ' . $lang_id;				$result = $db->sql_query($sql);				$lang_entries = $db->sql_fetchrow($result);				$db->sql_freeresult($result);				$lang_iso = $lang_entries['lang_iso'];				$missing_vars = $missing_files = array();				// Get email templates				$email_files = filelist($phpbb_root_path . 'language/' . $config['default_lang'], 'email', 'txt');				$email_files = $email_files['email/'];				// Get acp files				$acp_files = filelist($phpbb_root_path . 'language/' . $config['default_lang'], 'acp', $phpEx);				$acp_files = $acp_files['acp/'];				// Get mod files				$mods_files = filelist($phpbb_root_path . 'language/' . $config['default_lang'], 'mods', $phpEx);				$mods_files = (isset($mods_files['mods/'])) ? $mods_files['mods/'] : array();				// Check if our current filename matches the files				switch ($this->language_directory)				{					case 'email':						if (!in_array($this->language_file, $email_files))						{							trigger_error($user->lang['WRONG_LANGUAGE_FILE'] . adm_back_link($this->u_action . '&amp;action=details&amp;id=' . $lang_id), E_USER_WARNING);						}					break;					case 'acp':						if (!in_array($this->language_file, $acp_files))						{							trigger_error($user->lang['WRONG_LANGUAGE_FILE'] . adm_back_link($this->u_action . '&amp;action=details&amp;id=' . $lang_id), E_USER_WARNING);						}					break;					case 'mods':						if (!in_array($this->language_file, $mods_files))						{							trigger_error($user->lang['WRONG_LANGUAGE_FILE'] . adm_back_link($this->u_action . '&amp;action=details&amp;id=' . $lang_id), E_USER_WARNING);						}					break;					default:						if (!in_array($this->language_file, $this->main_files))						{							trigger_error($user->lang['WRONG_LANGUAGE_FILE'] . adm_back_link($this->u_action . '&amp;action=details&amp;id=' . $lang_id), E_USER_WARNING);						}				}				if (isset($_POST['remove_store']))				{					$store_filename = $this->get_filename($lang_iso, $this->language_directory, $this->language_file, true, true);					if (file_exists($phpbb_root_path . $store_filename))					{						@unlink($phpbb_root_path . $store_filename);					}				}				include_once($phpbb_root_path . 'includes/functions_transfer.' . $phpEx);				$methods = transfer::methods();				foreach ($methods as $method)				{					$template->assign_block_vars('buttons', array(						'VALUE' => $method					));				}				$template->assign_vars(array(					'S_DETAILS'			=> true,					'U_ACTION'			=> $this->u_action . "&amp;action=details&amp;id=$lang_id",					'U_BACK'			=> $this->u_action,					'LANG_LOCAL_NAME'	=> $lang_entries['lang_local_name'],					'LANG_ENGLISH_NAME'	=> $lang_entries['lang_english_name'],					'LANG_ISO'			=> $lang_entries['lang_iso'],					'LANG_AUTHOR'		=> $lang_entries['lang_author'],					'ALLOW_UPLOAD'		=> sizeof($methods)					)				);				// If current lang is different from the default lang, then first try to grab missing/additional vars				if ($lang_iso != $config['default_lang'])				{					$is_missing_var = false;					foreach ($this->main_files as $file)					{						if (file_exists($phpbb_root_path . $this->get_filename($lang_iso, '', $file)))						{							$missing_vars[$file] = $this->compare_language_files($config['default_lang'], $lang_iso, '', $file);							if (sizeof($missing_vars[$file]))							{								$is_missing_var = true;							}						}						else						{							$missing_files[] = $this->get_filename($lang_iso, '', $file);						}					}					// Now go through acp/mods directories					foreach ($acp_files as $file)					{						if (file_exists($phpbb_root_path . $this->get_filename($lang_iso, 'acp', $file)))						{							$missing_vars['acp/' . $file] = $this->compare_language_files($config['default_lang'], $lang_iso, 'acp', $file);							if (sizeof($missing_vars['acp/' . $file]))							{								$is_missing_var = true;							}						}						else						{							$missing_files[] = $this->get_filename($lang_iso, 'acp', $file);						}					}					if (sizeof($mods_files))					{						foreach ($mods_files as $file)						{							if (file_exists($phpbb_root_path . $this->get_filename($lang_iso, 'mods', $file)))							{								$missing_vars['mods/' . $file] = $this->compare_language_files($config['default_lang'], $lang_iso, 'mods', $file);								if (sizeof($missing_vars['mods/' . $file]))								{									$is_missing_var = true;								}							}							else							{								$missing_files[] = $this->get_filename($lang_iso, 'mods', $file);							}						}					}					// More missing files... for example email templates?					foreach ($email_files as $file)					{						if (!file_exists($phpbb_root_path . $this->get_filename($lang_iso, 'email', $file)))						{							$missing_files[] = $this->get_filename($lang_iso, 'email', $file);						}					}					if (sizeof($missing_files))					{						$template->assign_vars(array(							'S_MISSING_FILES'		=> true,							'L_MISSING_FILES'		=> sprintf($user->lang['THOSE_MISSING_LANG_FILES'], $lang_entries['lang_local_name']),							'MISSING_FILES'			=> implode('<br />', $missing_files))						);					}					if ($is_missing_var)					{						$template->assign_vars(array(							'S_MISSING_VARS'			=> true,							'L_MISSING_VARS_EXPLAIN'	=> sprintf($user->lang['THOSE_MISSING_LANG_VARIABLES'], $lang_entries['lang_local_name']),							'U_MISSING_ACTION'			=> $this->u_action . "&amp;action=$action&amp;id=$lang_id")						);						foreach ($missing_vars as $file => $vars)						{							if (!sizeof($vars))							{								continue;							}							$template->assign_block_vars('missing', array(								'FILE'			=> $file,								'TPL'			=> $this->print_language_entries($vars, '', false),								'KEY'			=> (strpos($file, '/') === false) ? '|' . $file : str_replace('/', '|', $file))							);						}					}				}				// Main language files				$s_lang_options = '<option value="|common.' . $phpEx . '" class="sep">' . $user->lang['LANGUAGE_FILES'] . '</option>';				foreach ($this->main_files as $file)				{					if (strpos($file, 'help_') === 0)					{						continue;					}					$prefix = (file_exists($phpbb_root_path . $this->get_filename($lang_iso, '', $file, true, true))) ? '* ' : '';					$selected = (!$this->language_directory && $this->language_file == $file) ? ' selected="selected"' : '';					$s_lang_options .= '<option value="|' . $file . '"' . $selected . '>' . $prefix . $file . '</option>';				}				// Help Files				$s_lang_options .= '<option value="|common.' . $phpEx . '" class="sep">' . $user->lang['HELP_FILES'] . '</option>';				foreach ($this->main_files as $file)				{					if (strpos($file, 'help_') !== 0)					{						continue;					}					$prefix = (file_exists($phpbb_root_path . $this->get_filename($lang_iso, '', $file, true, true))) ? '* ' : '';					$selected = (!$this->language_directory && $this->language_file == $file) ? ' selected="selected"' : '';					$s_lang_options .= '<option value="|' . $file . '"' . $selected . '>' . $prefix . $file . '</option>';				}				// Now every other language directory				$check_files = array('email', 'acp', 'mods');				foreach ($check_files as $check)				{					if (!sizeof(${$check . '_files'}))					{						continue;					}					$s_lang_options .= '<option value="|common.' . $phpEx . '" class="sep">' . $user->lang[strtoupper($check) . '_FILES'] . '</option>';					foreach (${$check . '_files'} as $file)					{						$prefix = (file_exists($phpbb_root_path . $this->get_filename($lang_iso, $check, $file, true, true))) ? '* ' : '';						$selected = ($this->language_directory == $check && $this->language_file == $file) ? ' selected="selected"' : '';						$s_lang_options .= '<option value="' . $check . '|' . $file . '"' . $selected . '>' . $prefix . $file . '</option>';					}				}				// Get Language Entries - if saved within store folder, we take this one (with the option to remove it)				$lang = array();				$is_email_file = ($this->language_directory == 'email') ? true : false;				$is_help_file = (strpos($this->language_file, 'help_') === 0) ? true : false;				$file_from_store = (file_exists($phpbb_root_path . $this->get_filename($lang_iso, $this->language_directory, $this->language_file, true, true))) ? true : false;				$no_store_filename = $this->get_filename($lang_iso, $this->language_directory, $this->language_file);				if (!$file_from_store && !file_exists($phpbb_root_path . $no_store_filename))				{					$print_message = sprintf($user->lang['MISSING_LANGUAGE_FILE'], $no_store_filename);				}				else				{					if ($is_email_file)					{						$lang = file_get_contents($phpbb_root_path . $this->get_filename($lang_iso, $this->language_directory, $this->language_file, $file_from_store));					}					else					{						$help = array();						include($phpbb_root_path . $this->get_filename($lang_iso, $this->language_directory, $this->language_file, $file_from_store));						if ($is_help_file)						{							$lang = $help;							unset($help);						}					}					$print_message = (($this->language_directory) ? $this->language_directory . '/' : '') . $this->language_file;				}				// Normal language pack entries				$template->assign_vars(array(					'U_ENTRY_ACTION'		=> $this->u_action . "&amp;action=details&amp;id=$lang_id#entries",					'S_EMAIL_FILE'			=> $is_email_file,					'S_FROM_STORE'			=> $file_from_store,					'S_LANG_OPTIONS'		=> $s_lang_options,					'PRINT_MESSAGE'			=> $print_message,					)				);				if (!$is_email_file)				{					$tpl = '';					$name = (($this->language_directory) ? $this->language_directory . '/' : '') . $this->language_file;					if (isset($missing_vars[$name]) && sizeof($missing_vars[$name]))					{						$tpl .= $this->print_language_entries($missing_vars[$name], '* ');					}					$tpl .= $this->print_language_entries($lang);					$template->assign_var('TPL', $tpl);					unset($tpl);				}				else				{					$template->assign_vars(array(						'LANG'		=> $lang)					);					unset($lang);				}				return;			break;			case 'delete':				if (!$lang_id)				{					trigger_error($user->lang['NO_LANG_ID'] . adm_back_link($this->u_action), E_USER_WARNING);				}				$sql = 'SELECT *					FROM ' . LANG_TABLE . '					WHERE lang_id = ' . $lang_id;				$result = $db->sql_query($sql);				$row = $db->sql_fetchrow($result);				$db->sql_freeresult($result);				if ($row['lang_iso'] == $config['default_lang'])				{					trigger_error($user->lang['NO_REMOVE_DEFAULT_LANG'] . adm_back_link($this->u_action), E_USER_WARNING);				}				if (confirm_box(true))				{					$db->sql_query('DELETE FROM ' . LANG_TABLE . ' WHERE lang_id = ' . $lang_id);					$sql = 'UPDATE ' . USERS_TABLE . "						SET user_lang = '" . $db->sql_escape($config['default_lang']) . "'						WHERE user_lang = '" . $db->sql_escape($row['lang_iso']) . "'";					$db->sql_query($sql);					// We also need to remove the translated entries for custom profile fields - we want clean tables, don't we?					$sql = 'DELETE FROM ' . PROFILE_LANG_TABLE . ' WHERE lang_id = ' . $lang_id;					$db->sql_query($sql);					$sql = 'DELETE FROM ' . PROFILE_FIELDS_LANG_TABLE . ' WHERE lang_id = ' . $lang_id;					$db->sql_query($sql);					$sql = 'DELETE FROM ' . STYLES_IMAGESET_DATA_TABLE . " WHERE image_lang = '" . $db->sql_escape($row['lang_iso']) . "'";					$result = $db->sql_query($sql);					$cache->destroy('sql', STYLES_IMAGESET_DATA_TABLE);					add_log('admin', 'LOG_LANGUAGE_PACK_DELETED', $row['lang_english_name']);					trigger_error(sprintf($user->lang['LANGUAGE_PACK_DELETED'], $row['lang_english_name']) . adm_back_link($this->u_action));				}				else				{					$s_hidden_fields = array(						'i'			=> $id,						'mode'		=> $mode,						'action'	=> $action,						'id'		=> $lang_id,					);					confirm_box(false, $user->lang['CONFIRM_OPERATION'], build_hidden_fields($s_hidden_fields));				}			break;			case 'install':				$lang_iso = request_var('iso', '');				$lang_iso = basename($lang_iso);				if (!$lang_iso || !file_exists("{$phpbb_root_path}language/$lang_iso/iso.txt"))				{					trigger_error($user->lang['LANGUAGE_PACK_NOT_EXIST'] . adm_back_link($this->u_action), E_USER_WARNING);				}				$file = file("{$phpbb_root_path}language/$lang_iso/iso.txt");				$lang_pack = array(					'iso'		=> $lang_iso,					'name'		=> trim(htmlspecialchars($file[0])),					'local_name'=> trim(htmlspecialchars($file[1], ENT_COMPAT, 'UTF-8')),					'author'	=> trim(htmlspecialchars($file[2], ENT_COMPAT, 'UTF-8'))				);				unset($file);				$sql = 'SELECT lang_iso					FROM ' . LANG_TABLE . "					WHERE lang_iso = '" . $db->sql_escape($lang_iso) . "'";				$result = $db->sql_query($sql);				$row = $db->sql_fetchrow($result);				$db->sql_freeresult($result);				if ($row)				{					trigger_error($user->lang['LANGUAGE_PACK_ALREADY_INSTALLED'] . adm_back_link($this->u_action), E_USER_WARNING);				}				if (!$lang_pack['name'] || !$lang_pack['local_name'])				{					trigger_error($user->lang['INVALID_LANGUAGE_PACK'] . adm_back_link($this->u_action), E_USER_WARNING);				}				// Add language pack				$sql_ary = array(					'lang_iso'			=> $lang_pack['iso'],					'lang_dir'			=> $lang_pack['iso'],					'lang_english_name'	=> $lang_pack['name'],					'lang_local_name'	=> $lang_pack['local_name'],					'lang_author'		=> $lang_pack['author']				);				$db->sql_query('INSERT INTO ' . LANG_TABLE . ' ' . $db->sql_build_array('INSERT', $sql_ary));				$lang_id = $db->sql_nextid();				$valid_localized = array(					'icon_back_top', 'icon_contact_aim', 'icon_contact_email', 'icon_contact_icq', 'icon_contact_jabber', 'icon_contact_msnm', 'icon_contact_pm', 'icon_contact_yahoo', 'icon_contact_www', 'icon_post_delete', 'icon_post_edit', 'icon_post_info', 'icon_post_quote', 'icon_post_report', 'icon_user_online', 'icon_user_offline', 'icon_user_profile', 'icon_user_search', 'icon_user_warn', 'button_pm_forward', 'button_pm_new', 'button_pm_reply', 'button_topic_locked', 'button_topic_new', 'button_topic_reply',				);				$sql_ary = array();				$sql = 'SELECT *					FROM ' . STYLES_IMAGESET_TABLE;				$result = $db->sql_query($sql);				while ($imageset_row = $db->sql_fetchrow($result))				{					if (@file_exists("{$phpbb_root_path}styles/{$imageset_row['imageset_path']}/imageset/{$lang_pack['iso']}/imageset.cfg"))					{						$cfg_data_imageset_data = parse_cfg_file("{$phpbb_root_path}styles/{$imageset_row['imageset_path']}/imageset/{$lang_pack['iso']}/imageset.cfg");						foreach ($cfg_data_imageset_data as $image_name => $value)						{							if (strpos($value, '*') !== false)							{								if (substr($value, -1, 1) === '*')								{									list($image_filename, $image_height) = explode('*', $value);									$image_width = 0;								}								else								{									list($image_filename, $image_height, $image_width) = explode('*', $value);								}							}							else							{								$image_filename = $value;								$image_height = $image_width = 0;							}							if (strpos($image_name, 'img_') === 0 && $image_filename)							{								$image_name = substr($image_name, 4);								if (in_array($image_name, $valid_localized))								{									$sql_ary[] = array(										'image_name'		=> (string) $image_name,										'image_filename'	=> (string) $image_filename,										'image_height'		=> (int) $image_height,										'image_width'		=> (int) $image_width,										'imageset_id'		=> (int) $imageset_row['imageset_id'],										'image_lang'		=> (string) $lang_pack['iso'],									);								}							}						}					}				}				$db->sql_freeresult($result);				if (sizeof($sql_ary))				{					$db->sql_multi_insert(STYLES_IMAGESET_DATA_TABLE, $sql_ary);					$cache->destroy('sql', STYLES_IMAGESET_DATA_TABLE);				}				// Now let's copy the default language entries for custom profile fields for this new language - makes admin's life easier.				$sql = 'SELECT lang_id					FROM ' . LANG_TABLE . "					WHERE lang_iso = '" . $db->sql_escape($config['default_lang']) . "'";				$result = $db->sql_query($sql);				$default_lang_id = (int) $db->sql_fetchfield('lang_id');				$db->sql_freeresult($result);				// We want to notify the admin that custom profile fields need to be updated for the new language.				$notify_cpf_update = false;				// From the mysql documentation:				// Prior to MySQL 4.0.14, the target table of the INSERT statement cannot appear in the FROM clause of the SELECT part of the query. This limitation is lifted in 4.0.14.				// Due to this we stay on the safe side if we do the insertion "the manual way"				$sql = 'SELECT field_id, lang_name, lang_explain, lang_default_value					FROM ' . PROFILE_LANG_TABLE . '					WHERE lang_id = ' . $default_lang_id;				$result = $db->sql_query($sql);				while ($row = $db->sql_fetchrow($result))				{					$row['lang_id'] = $lang_id;					$db->sql_query('INSERT INTO ' . PROFILE_LANG_TABLE . ' ' . $db->sql_build_array('INSERT', $row));					$notify_cpf_update = true;				}				$db->sql_freeresult($result);				$sql = 'SELECT field_id, option_id, field_type, lang_value					FROM ' . PROFILE_FIELDS_LANG_TABLE . '					WHERE lang_id = ' . $default_lang_id;				$result = $db->sql_query($sql);				while ($row = $db->sql_fetchrow($result))				{					$row['lang_id'] = $lang_id;					$db->sql_query('INSERT INTO ' . PROFILE_FIELDS_LANG_TABLE . ' ' . $db->sql_build_array('INSERT', $row));					$notify_cpf_update = true;				}				$db->sql_freeresult($result);				add_log('admin', 'LOG_LANGUAGE_PACK_INSTALLED', $lang_pack['name']);				$message = sprintf($user->lang['LANGUAGE_PACK_INSTALLED'], $lang_pack['name']);				$message .= ($notify_cpf_update) ? '<br /><br />' . $user->lang['LANGUAGE_PACK_CPF_UPDATE'] : '';				trigger_error($message . adm_back_link($this->u_action));			break;			case 'download':				if (!$lang_id)				{					trigger_error($user->lang['NO_LANG_ID'] . adm_back_link($this->u_action), E_USER_WARNING);				}				$sql = 'SELECT *					FROM ' . LANG_TABLE . '					WHERE lang_id = ' . $lang_id;				$result = $db->sql_query($sql);				$row = $db->sql_fetchrow($result);				$db->sql_freeresult($result);				$use_method = request_var('use_method', '');				$methods = array('.tar');				$available_methods = array('.tar.gz' => 'zlib', '.tar.bz2' => 'bz2', '.zip' => 'zlib');				foreach ($available_methods as $type => $module)				{					if (!@extension_loaded($module))					{						continue;					}					$methods[] = $type;				}				// Let the user decide in which format he wants to have the pack				if (!$use_method)				{					$this->page_title = 'SELECT_DOWNLOAD_FORMAT';					$radio_buttons = '';					foreach ($methods as $method)					{						$radio_buttons .= '<label><input type="radio"' . ((!$radio_buttons) ? ' id="use_method"' : '') . ' class="radio" value="' . $method . '" name="use_method" /> ' . $method . '</label>';					}					$template->assign_vars(array(						'S_SELECT_METHOD'		=> true,						'U_BACK'				=> $this->u_action,						'U_ACTION'				=> $this->u_action . "&amp;action=$action&amp;id=$lang_id",						'RADIO_BUTTONS'			=> $radio_buttons)					);					return;				}				if (!in_array($use_method, $methods))				{					$use_method = '.tar';				}				include_once($phpbb_root_path . 'includes/functions_compress.' . $phpEx);				if ($use_method == '.zip')				{					$compress = new compress_zip('w', $phpbb_root_path . 'store/lang_' . $row['lang_iso'] . $use_method);				}				else				{					$compress = new compress_tar('w', $phpbb_root_path . 'store/lang_' . $row['lang_iso'] . $use_method, $use_method);				}				// Get email templates				$email_templates = filelist($phpbb_root_path . 'language/' . $row['lang_iso'], 'email', 'txt');				$email_templates = $email_templates['email/'];				// Get acp files				$acp_files = filelist($phpbb_root_path . 'language/' . $row['lang_iso'], 'acp', $phpEx);				$acp_files = $acp_files['acp/'];				// Get mod files				$mod_files = filelist($phpbb_root_path . 'language/' . $row['lang_iso'], 'mods', $phpEx);				$mod_files = (isset($mod_files['mods/'])) ? $mod_files['mods/'] : array();				// Add main files				$this->add_to_archive($compress, $this->main_files, $row['lang_iso']);				// Add search files if they exist...				if (file_exists($phpbb_root_path . 'language/' . $row['lang_iso'] . '/search_ignore_words.' . $phpEx))				{					$this->add_to_archive($compress, array("search_ignore_words.$phpEx"), $row['lang_iso']);				}				if (file_exists($phpbb_root_path . 'language/' . $row['lang_iso'] . '/search_synonyms.' . $phpEx))				{					$this->add_to_archive($compress, array("search_synonyms.$phpEx"), $row['lang_iso']);				}				// Write files in folders				$this->add_to_archive($compress, $email_templates, $row['lang_iso'], 'email');				$this->add_to_archive($compress, $acp_files, $row['lang_iso'], 'acp');				$this->add_to_archive($compress, $mod_files, $row['lang_iso'], 'mods');				// Write ISO File				$iso_src = htmlspecialchars_decode($row['lang_english_name']) . "\n";				$iso_src .= htmlspecialchars_decode($row['lang_local_name']) . "\n";				$iso_src .= htmlspecialchars_decode($row['lang_author']);				$compress->add_data($iso_src, 'language/' . $row['lang_iso'] . '/iso.txt');				// index.htm files				$compress->add_data('', 'language/' . $row['lang_iso'] . '/index.htm');				$compress->add_data('', 'language/' . $row['lang_iso'] . '/email/index.htm');				$compress->add_data('', 'language/' . $row['lang_iso'] . '/acp/index.htm');				if (sizeof($mod_files))				{					$compress->add_data('', 'language/' . $row['lang_iso'] . '/mods/index.htm');				}				$compress->close();				$compress->download('lang_' . $row['lang_iso']);				@unlink($phpbb_root_path . 'store/lang_' . $row['lang_iso'] . $use_method);				exit;			break;		}		$sql = 'SELECT user_lang, COUNT(user_lang) AS lang_count			FROM ' . USERS_TABLE . '			GROUP BY user_lang';		$result = $db->sql_query($sql);		$lang_count = array();		while ($row = $db->sql_fetchrow($result))		{			$lang_count[$row['user_lang']] = $row['lang_count'];		}		$db->sql_freeresult($result);		$sql = 'SELECT *			FROM ' . LANG_TABLE . '			ORDER BY lang_english_name';		$result = $db->sql_query($sql);		$installed = array();		while ($row = $db->sql_fetchrow($result))		{			$installed[] = $row['lang_iso'];			$tagstyle = ($row['lang_iso'] == $config['default_lang']) ? '*' : '';			$template->assign_block_vars('lang', array(				'U_DETAILS'			=> $this->u_action . "&amp;action=details&amp;id={$row['lang_id']}",				'U_DOWNLOAD'		=> $this->u_action . "&amp;action=download&amp;id={$row['lang_id']}",				'U_DELETE'			=> $this->u_action . "&amp;action=delete&amp;id={$row['lang_id']}",				'ENGLISH_NAME'		=> $row['lang_english_name'],				'TAG'				=> $tagstyle,				'LOCAL_NAME'		=> $row['lang_local_name'],				'ISO'				=> $row['lang_iso'],				'USED_BY'			=> (isset($lang_count[$row['lang_iso']])) ? $lang_count[$row['lang_iso']] : 0,			));		}		$db->sql_freeresult($result);		$new_ary = $iso = array();		$dp = @opendir("{$phpbb_root_path}language");		if ($dp)		{			while (($file = readdir($dp)) !== false)			{				if ($file[0] == '.' || !is_dir($phpbb_root_path . 'language/' . $file))				{					continue;				}				if (file_exists("{$phpbb_root_path}language/$file/iso.txt"))				{					if (!in_array($file, $installed))					{						if ($iso = file("{$phpbb_root_path}language/$file/iso.txt"))						{							if (sizeof($iso) == 3)							{								$new_ary[$file] = array(									'iso'		=> $file,									'name'		=> trim($iso[0]),									'local_name'=> trim($iso[1]),									'author'	=> trim($iso[2])								);							}						}					}				}			}			closedir($dp);		}		unset($installed);		if (sizeof($new_ary))		{			foreach ($new_ary as $iso => $lang_ary)			{				$template->assign_block_vars('notinst', array(					'ISO'			=> htmlspecialchars($lang_ary['iso']),					'LOCAL_NAME'	=> htmlspecialchars($lang_ary['local_name'], ENT_COMPAT, 'UTF-8'),					'NAME'			=> htmlspecialchars($lang_ary['name'], ENT_COMPAT, 'UTF-8'),					'U_INSTALL'		=> $this->u_action . '&amp;action=install&amp;iso=' . urlencode($lang_ary['iso']))				);			}		}		unset($new_ary);	}	/**	* Set default language variables/header	*/	function default_variables()	{		global $phpEx;		$this->language_file_header = '<?php/**** {FILENAME} [{LANG_NAME}]** @package language* @version $' . 'Id: ' . '$* @copyright (c) ' . date('Y') . ' phpBB Group* @author {CHANGED} - {AUTHOR}* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** DO NOT CHANGE*/if (!defined(\'IN_PHPBB\')){	exit;}if (empty($lang) || !is_array($lang)){	$lang = array();}// DEVELOPERS PLEASE NOTE//// All language files should use UTF-8 as their encoding and the files must not contain a BOM.//// Placeholders can now contain order information, e.g. instead of// \'Page %s of %s\' you can (and should) write \'Page %1$s of %2$s\', this allows// translators to re-order the output of data while ensuring it remains correct//// You do not need this where single placeholders are used, e.g. \'Message %d\' is fine// equally where a string contains only two placeholders which are used to wrap text// in a url you again do not need to specify an order e.g., \'Click %sHERE%s\' is fine';		$this->lang_header = '$lang = array_merge($lang, array(';		// Language files in language root directory		$this->main_files = array("captcha_qa.$phpEx", "captcha_recaptcha.$phpEx", "common.$phpEx", "groups.$phpEx", "install.$phpEx", "mcp.$phpEx", "memberlist.$phpEx", "posting.$phpEx", "search.$phpEx", "ucp.$phpEx", "viewforum.$phpEx", "viewtopic.$phpEx", "help_bbcode.$phpEx", "help_faq.$phpEx");	}	/**	* Get filename/location of language file	*/	function get_filename($lang_iso, $directory, $filename, $check_store = false, $only_return_filename = false)	{		global $phpbb_root_path, $safe_mode;		$check_filename = "language/$lang_iso/" . (($directory) ? $directory . '/' : '') . $filename;		if ($check_store)		{			$check_store_filename = ($safe_mode) ? "store/langfile_{$lang_iso}" . (($directory) ? '_' . $directory : '') . "_{$filename}" : "store/language/$lang_iso/" . (($directory) ? $directory . '/' : '') . $filename;			if (!$only_return_filename && file_exists($phpbb_root_path . $check_store_filename))			{				return $check_store_filename;			}			else if ($only_return_filename)			{				return $check_store_filename;			}		}		return $check_filename;	}	/**	* Add files to archive	*/	function add_to_archive(&$compress, $filelist, $lang_iso, $directory = '')	{		global $phpbb_root_path;		foreach ($filelist as $file)		{			// Get source filename			$source = $this->get_filename($lang_iso, $directory, $file, true);			$destination = 'language/' . $lang_iso . '/' . (($directory) ? $directory . '/' : '') . $file;			// Add file to archive			$compress->add_custom_file($phpbb_root_path . $source, $destination);		}	}	/**	* Little helper to add some hardcoded template bits	*/	function add_input_field()	{		$keys = func_get_args();		$non_static		= array_shift($keys);		$value			= utf8_normalize_nfc(array_shift($keys));		if (!$non_static)		{			return '<strong>' . htmlspecialchars($value, ENT_COMPAT, 'UTF-8') . '</strong>';		}		// If more then 270 characters, then we present a textarea, else an input field		$textarea = (utf8_strlen($value) > 270) ? true : false;		$tpl = '';		$tpl .= ($textarea) ? '<textarea name="' : '<input type="text" name="';		$tpl .= 'entry[' . implode('][', array_map('utf8_htmlspecialchars', $keys)) . ']"';		$tpl .= ($textarea) ? ' cols="80" rows="5" class="langvalue">' : ' class="langvalue" value="';		$tpl .= htmlspecialchars($value, ENT_COMPAT, 'UTF-8');		$tpl .= ($textarea) ? '</textarea>' : '" />';		return $tpl;	}	/**	* Print language entries	*/	function print_language_entries(&$lang_ary, $key_prefix = '', $input_field = true)	{		$tpl = '';		foreach ($lang_ary as $key => $value)		{			if (is_array($value))			{				// Write key				$tpl .= '				<tr>					<td class="row3" colspan="2">' . htmlspecialchars($key_prefix, ENT_COMPAT, 'UTF-8') . '<strong>' . htmlspecialchars($key, ENT_COMPAT, 'UTF-8') . '</strong></td>				</tr>';				foreach ($value as $_key => $_value)				{					if (is_array($_value))					{						// Write key						$tpl .= '							<tr>								<td class="row3" colspan="2">' . htmlspecialchars($key_prefix, ENT_COMPAT, 'UTF-8') . '&nbsp; &nbsp;<strong>' . htmlspecialchars($_key, ENT_COMPAT, 'UTF-8') . '</strong></td>							</tr>';						foreach ($_value as $__key => $__value)						{							// Write key							$tpl .= '								<tr>									<td class="row1" style="white-space: nowrap;">' . htmlspecialchars($key_prefix, ENT_COMPAT, 'UTF-8') . '<strong>' . htmlspecialchars($__key, ENT_COMPAT, 'UTF-8') . '</strong></td>									<td class="row2">';							$tpl .= $this->add_input_field($input_field, $__value, $key, $_key, $__key);							$tpl .= '</td>								</tr>';						}					}					else					{						// Write key						$tpl .= '							<tr>								<td class="row1" style="white-space: nowrap;">' . htmlspecialchars($key_prefix, ENT_COMPAT, 'UTF-8') . '<strong>' . htmlspecialchars($_key, ENT_COMPAT, 'UTF-8') . '</strong></td>								<td class="row2">';						$tpl .= $this->add_input_field($input_field, $_value, $key, $_key);						$tpl .= '</td>							</tr>';					}				}				$tpl .= '				<tr>					<td class="spacer" colspan="2">&nbsp;</td>				</tr>';			}			else			{				// Write key				$tpl .= '				<tr>					<td class="row1" style="white-space: nowrap;">' . htmlspecialchars($key_prefix, ENT_COMPAT, 'UTF-8') . '<strong>' . htmlspecialchars($key, ENT_COMPAT, 'UTF-8') . '</strong></td>					<td class="row2">';				$tpl .= $this->add_input_field($input_field, $value, $key);				$tpl .= '</td>					</tr>';			}		}		return $tpl;	}	/**	* Compare two language files	*/	function compare_language_files($source_lang, $dest_lang, $directory, $file)	{		global $phpbb_root_path, $phpEx;		$return_ary = array();		$lang = array();		include("{$phpbb_root_path}language/{$source_lang}/" . (($directory) ? $directory . '/' : '') . $file);		$lang_entry_src = $lang;		$lang = array();		if (!file_exists($phpbb_root_path . $this->get_filename($dest_lang, $directory, $file, true)))		{			return array();		}		include($phpbb_root_path . $this->get_filename($dest_lang, $directory, $file, true));		$lang_entry_dst = $lang;		unset($lang);		$diff_array_keys = array_diff(array_keys($lang_entry_src), array_keys($lang_entry_dst));		unset($lang_entry_dst);		foreach ($diff_array_keys as $key)		{			$return_ary[$key] = $lang_entry_src[$key];		}		unset($lang_entry_src);		return $return_ary;	}	/**	* Return language string value for storage	*/	function prepare_lang_entry($text, $store = true)	{		$text = (STRIP) ? stripslashes($text) : $text;		// Adjust for storage...		if ($store)		{			$text = str_replace("'", "\\'", str_replace('\\', '\\\\', $text));		}		return $text;	}	/**	* Format language array for storage	*/	function format_lang_array($key, $value, $tabs = "\t")	{		$entry = '';		if (!is_array($value))		{			$entry .= "{$tabs}'" . $this->prepare_lang_entry($key) . "'\t=> '" . $this->prepare_lang_entry($value) . "',\n";		}		else		{			$_tabs = $tabs . "\t";			$entry .= "\n{$tabs}'" . $this->prepare_lang_entry($key) . "'\t=> array(\n";			foreach ($value as $_key => $_value)			{				$entry .= $this->format_lang_array($_key, $_value, $_tabs);			}			$entry .= "{$tabs}),\n\n";		}		return $entry;	}}?>
<?php return array(''=>'i',''=>'!',''=>'a',''=>' ',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'o',''=>'o',''=>'',''=>' ',''=>' ',''=>' ',''=>' ',''=>' ',''=>' ',''=>' ',''=>' ',''=>' ',''=>' ',''=>' ',''=>' ',''=>' ',''=>' ',''=>' ',''=>'`',''=>'`',''=>'',''=>'^',''=>'^',''=>'_',''=>'_',''=>'_',''=>'_',''=>'',''=>'-',''=>'-',''=>'-',''=>'-',''=>'-',''=>'-',''=>'',''=>'',''=>'',''=>',',''=>',',''=>'',''=>'',''=>';',''=>';',''=>':',''=>':',''=>':',''=>':',''=>'::=',''=>'.',''=>'.',''=>'.',''=>'..',''=>'...',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'4',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'L',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'(',''=>'(1)',''=>'(l)',''=>'(10)',''=>'(11)',''=>'(12)',''=>'(13)',''=>'(14)',''=>'(15)',''=>'(16)',''=>'(17)',''=>'(18)',''=>'(19)',''=>'(2)',''=>'(20)',''=>'(3)',''=>'(4)',''=>'(5)',''=>'(6)',''=>'(7)',''=>'(8)',''=>'(9)',''=>'(a)',''=>'(b)',''=>'(c)',''=>'(d)',''=>'(e)',''=>'(f)',''=>'(g)',''=>'(h)',''=>'(i)',''=>'(j)',''=>'(k)',''=>'(m)',''=>'(n)',''=>'(o)',''=>'(p)',''=>'(q)',''=>'(r)',''=>'(s)',''=>'(t)',''=>'(u)',''=>'(v)',''=>'(w)',''=>'(x)',''=>'(y)',''=>'(z)',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>')',''=>'[',''=>'[',''=>']',''=>']',''=>'{',''=>'}',''=>'',''=>'',''=>'',''=>'',''=>'@',''=>'*',''=>'/',''=>'/',''=>'/',''=>'\\',''=>'&',''=>'#',''=>'%',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'','\''=>'',''=>'',''=>'',''=>'',''=>'',''=>'','"'=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'+',''=>'+',''=>'<',''=>'<',''=>'=',''=>'==',''=>'===',''=>'>',''=>'>',''=>'',''=>'',''=>'~',''=>'~',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'$',''=>'',''=>'Y',''=>'W',''=>'0',''=>'0',''=>'0',''=>'0',''=>'0',''=>'0',''=>'0',''=>'0',''=>'0',''=>'0',''=>'0',''=>'0',''=>'0',''=>'0',''=>'0',''=>'0',''=>'0',''=>'0',''=>'0',''=>'0',''=>'0',''=>'0',''=>'0',''=>'0',''=>'0',''=>'0',''=>'0',''=>'0',''=>'0',''=>'0',''=>'0',''=>'0',''=>'0',''=>'0',''=>'0',''=>'0',''=>'0',''=>'0',''=>'0',''=>'0',''=>'0',''=>'0',''=>'0',''=>'0',''=>'',''=>'',''=>'0',''=>'1',''=>'1',''=>'1',''=>'1',''=>'1',''=>'1',''=>'1',''=>'1',''=>'1',''=>'1',''=>'1',''=>'1',''=>'1',''=>'1',''=>'1',''=>'1',''=>'1',''=>'1',''=>'1','l'=>'l',''=>'l',''=>'1',''=>'l',''=>'l',''=>'l',''=>'l',''=>'l',''=>'l',''=>'l',''=>'l',''=>'l',''=>'l',''=>'l',''=>'l',''=>'l',''=>'l',''=>'l',''=>'l',''=>'l',''=>'l',''=>'l',''=>'',''=>'l',''=>'l',''=>'l',''=>'l',''=>'',''=>'1.',''=>'l',''=>'1',''=>'',''=>'10.',''=>'10',''=>'10',''=>'10',''=>'11.',''=>'11',''=>'11',''=>'11',''=>'12.',''=>'12',''=>'12',''=>'12',''=>'13.',''=>'13',''=>'13',''=>'14.',''=>'14',''=>'14',''=>'15.',''=>'15',''=>'15',''=>'16.',''=>'16',''=>'16',''=>'17.',''=>'17',''=>'17',''=>'18.',''=>'18',''=>'18',''=>'19.',''=>'19',''=>'19',''=>'lj',''=>'1',''=>'1',''=>'1',''=>'2',''=>'2',''=>'2',''=>'2',''=>'2',''=>'2',''=>'2',''=>'',''=>'',''=>'2.',''=>'20.',''=>'20',''=>'20',''=>'21',''=>'21',''=>'22',''=>'22',''=>'23',''=>'23',''=>'24',''=>'24',''=>'25',''=>'26',''=>'27',''=>'28',''=>'29',''=>'2',''=>'2',''=>'2',''=>'3',''=>'3',''=>'3',''=>'3',''=>'3',''=>'3',''=>'',''=>'',''=>'3.',''=>'30',''=>'31',''=>'3',''=>'3',''=>'3',''=>'4',''=>'4',''=>'4',''=>'4',''=>'4',''=>'4',''=>'4',''=>'',''=>'4.',''=>'4',''=>'4',''=>'4',''=>'4',''=>'5',''=>'5',''=>'5',''=>'5',''=>'5',''=>'5',''=>'',''=>'5.',''=>'5',''=>'5',''=>'5',''=>'6',''=>'6',''=>'6',''=>'6',''=>'6',''=>'6',''=>'6',''=>'',''=>'6.',''=>'6',''=>'6',''=>'6',''=>'7',''=>'7',''=>'7',''=>'7',''=>'7',''=>'7',''=>'',''=>'',''=>'7.',''=>'7',''=>'7',''=>'7',''=>'8',''=>'8',''=>'8',''=>'8',''=>'8',''=>'8',''=>'8',''=>'8',''=>'8',''=>'8',''=>'',''=>'',''=>'8.',''=>'8',''=>'8',''=>'8',''=>'9',''=>'9',''=>'9',''=>'9',''=>'9',''=>'9',''=>'9',''=>'9',''=>'9',''=>'',''=>'',''=>'9.',''=>'9',''=>'9',''=>'9',''=>'a',''=>'a',''=>'a',''=>'a',''=>'a',''=>'a',''=>'a',''=>'a',''=>'a',''=>'a',''=>'a',''=>'a',''=>'a',''=>'a',''=>'a/c',''=>'a/s',''=>'ae',''=>'b',''=>'b',''=>'b',''=>'b',''=>'b',''=>'b',''=>'b',''=>'b',''=>'b',''=>'b',''=>'b',''=>'b',''=>'b',''=>'b',''=>'b',''=>'b',''=>'b',''=>'c',''=>'c',''=>'c',''=>'c',''=>'c',''=>'c',''=>'c',''=>'c',''=>'c',''=>'c',''=>'c',''=>'c',''=>'c',''=>'c',''=>'c',''=>'c',''=>'c',''=>'c',''=>'c',''=>'c',''=>'c/o',''=>'c/u',''=>'d',''=>'d',''=>'d',''=>'d',''=>'d',''=>'d',''=>'d',''=>'d',''=>'d',''=>'d',''=>'d',''=>'d',''=>'d',''=>'d',''=>'d',''=>'d',''=>'d',''=>'d',''=>'d',''=>'d',''=>'dz',''=>'d',''=>'e',''=>'e',''=>'e',''=>'e',''=>'e',''=>'e',''=>'e',''=>'e',''=>'e',''=>'e',''=>'e',''=>'e',''=>'e',''=>'e',''=>'e',''=>'E',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'f',''=>'f',''=>'f',''=>'f',''=>'f',''=>'f',''=>'f',''=>'f',''=>'f',''=>'f',''=>'f',''=>'f',''=>'f',''=>'f',''=>'f',''=>'g',''=>'g',''=>'g',''=>'g',''=>'g',''=>'g',''=>'g',''=>'g',''=>'g',''=>'g',''=>'g',''=>'g',''=>'g',''=>'g',''=>'g',''=>'g',''=>'g',''=>'h',''=>'h',''=>'h',''=>'h',''=>'h',''=>'h',''=>'h',''=>'h',''=>'h',''=>'h',''=>'h',''=>'h',''=>'h',''=>'h',''=>'h',''=>'h',''=>'h',''=>'',''=>'',''=>'',''=>'',''=>'i',''=>'i',''=>'i',''=>'i',''=>'i',''=>'i',''=>'i',''=>'i',''=>'i',''=>'i',''=>'i',''=>'i',''=>'i',''=>'i',''=>'i',''=>'i',''=>'i',''=>'i',''=>'i',''=>'i',''=>'i',''=>'i',''=>'i',''=>'i',''=>'i',''=>'i',''=>'i',''=>'i',''=>'ii',''=>'iii',''=>'ij',''=>'iv',''=>'ix',''=>'j',''=>'j',''=>'j',''=>'j',''=>'j',''=>'j',''=>'j',''=>'j',''=>'j',''=>'j',''=>'j',''=>'j',''=>'j',''=>'j',''=>'j',''=>'j',''=>'',''=>'k',''=>'k',''=>'k',''=>'k',''=>'k',''=>'k',''=>'k',''=>'k',''=>'k',''=>'k',''=>'k',''=>'k',''=>'k',''=>'k',''=>'k',''=>'m',''=>'m',''=>'m',''=>'m',''=>'m',''=>'m',''=>'m',''=>'m',''=>'m',''=>'m',''=>'m',''=>'m',''=>'m',''=>'m',''=>'m',''=>'m',''=>'n',''=>'n',''=>'n',''=>'n',''=>'n',''=>'n',''=>'n',''=>'n',''=>'n',''=>'n',''=>'n',''=>'n',''=>'n',''=>'n',''=>'N',''=>'N',''=>'N',''=>'N',''=>'N',''=>'N',''=>'N',''=>'N',''=>'N',''=>'N',''=>'N',''=>'N',''=>'N',''=>'N',''=>'N',''=>'N',''=>'N',''=>'',''=>'n',''=>'n',''=>'n',''=>'n',''=>'n',''=>'n',''=>'n',''=>'nj',''=>'o',''=>'o',''=>'o',''=>'o',''=>'o',''=>'o',''=>'o',''=>'o',''=>'o',''=>'o',''=>'o',''=>'o',''=>'o',''=>'o',''=>'o',''=>'o',''=>'o',''=>'o',''=>'o',''=>'o',''=>'o',''=>'o',''=>'o',''=>'oe',''=>'o',''=>'p',''=>'p',''=>'p',''=>'p',''=>'p',''=>'p',''=>'p',''=>'p',''=>'p',''=>'p',''=>'p',''=>'p',''=>'p',''=>'p',''=>'p',''=>'p',''=>'p',''=>'p',''=>'p',''=>'p',''=>'p',''=>'p',''=>'p',''=>'p',''=>'p',''=>'p',''=>'q',''=>'q',''=>'q',''=>'q',''=>'q',''=>'q',''=>'q',''=>'q',''=>'q',''=>'q',''=>'q',''=>'q',''=>'q',''=>'q',''=>'Q',''=>'Q',''=>'Q',''=>'Q',''=>'Q',''=>'Q',''=>'Q',''=>'Q',''=>'Q',''=>'Q',''=>'Q',''=>'Q',''=>'q',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'r',''=>'r',''=>'r',''=>'r',''=>'r',''=>'r',''=>'r',''=>'r',''=>'r',''=>'r',''=>'r',''=>'r',''=>'r',''=>'r',''=>'r',''=>'r',''=>'s',''=>'s',''=>'s',''=>'s',''=>'s',''=>'s',''=>'s',''=>'s',''=>'s',''=>'s',''=>'s',''=>'s',''=>'s',''=>'s',''=>'s',''=>'s',''=>'',''=>'',''=>'',''=>'',''=>'t',''=>'t',''=>'t',''=>'t',''=>'t',''=>'t',''=>'t',''=>'t',''=>'t',''=>'t',''=>'t',''=>'t',''=>'t',''=>'t',''=>'T',''=>'T',''=>'T',''=>'T',''=>'T',''=>'T',''=>'T',''=>'T',''=>'T',''=>'T',''=>'T',''=>'T',''=>'T',''=>'T',''=>'T',''=>'T',''=>'T',''=>'t',''=>'',''=>'',''=>'t',''=>'u',''=>'u',''=>'u',''=>'u',''=>'u',''=>'u',''=>'u',''=>'u',''=>'u',''=>'u',''=>'u',''=>'u',''=>'u',''=>'u',''=>'u',''=>'u',''=>'u',''=>'u',''=>'u',''=>'u',''=>'u',''=>'U',''=>'U',''=>'U',''=>'U',''=>'U',''=>'U',''=>'U',''=>'U',''=>'U',''=>'U',''=>'U',''=>'U',''=>'v',''=>'v',''=>'v',''=>'v',''=>'v',''=>'v',''=>'v',''=>'v',''=>'v',''=>'v',''=>'v',''=>'v',''=>'v',''=>'v',''=>'v',''=>'v',''=>'v',''=>'v',''=>'v',''=>'v',''=>'vi',''=>'vii',''=>'viii',''=>'w',''=>'w',''=>'w',''=>'w',''=>'w',''=>'w',''=>'w',''=>'w',''=>'w',''=>'w',''=>'w',''=>'w',''=>'w',''=>'w',''=>'w',''=>'W',''=>'W',''=>'W',''=>'W',''=>'W',''=>'W',''=>'W',''=>'W',''=>'W',''=>'W',''=>'W',''=>'W',''=>'x',''=>'x',''=>'x',''=>'x',''=>'x',''=>'x',''=>'x',''=>'x',''=>'x',''=>'x',''=>'x',''=>'x',''=>'x',''=>'x',''=>'x',''=>'x',''=>'X',''=>'X',''=>'X',''=>'X',''=>'X',''=>'X',''=>'X',''=>'X',''=>'X',''=>'X',''=>'X',''=>'X',''=>'X',''=>'X',''=>'X',''=>'X',''=>'X',''=>'X',''=>'xi',''=>'xii',''=>'y',''=>'y',''=>'y',''=>'y',''=>'y',''=>'y',''=>'y',''=>'y',''=>'y',''=>'y',''=>'y',''=>'y',''=>'y',''=>'y',''=>'y',''=>'z',''=>'z',''=>'z',''=>'z',''=>'z',''=>'z',''=>'z',''=>'z',''=>'z',''=>'z',''=>'z',''=>'z',''=>'z',''=>'z',''=>'z',''=>'z',''=>'z',''=>'','?'=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'','!'=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'Y',''=>'Y',''=>'Y',''=>'Y',''=>'Y',''=>'Y',''=>'Y',''=>'Y',''=>'Y',''=>'Y',''=>'Y',''=>'Y',''=>'Y',''=>'Y',''=>'Y',''=>'Y',''=>'Y',''=>'Y',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'ae',''=>'r',''=>'r',''=>'',''=>'',''=>'i',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'o',''=>'o',''=>'c',''=>'',''=>'y',''=>'y',''=>'h',''=>'',''=>'',''=>'',''=>'',''=>'q',''=>'n',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>' ',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'   ',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'o',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'y',''=>'A',''=>'A',''=>'A',''=>'A',''=>'A',''=>'A',''=>'A',''=>'A',''=>'A',''=>'A',''=>'A',''=>'A',''=>'A',''=>'A',''=>'A',''=>'A',''=>'A',''=>'A',''=>'J',''=>'J',''=>'J',''=>'J',''=>'J',''=>'J',''=>'J',''=>'J',''=>'J',''=>'J',''=>'J',''=>'J',''=>'J',''=>'J',''=>'E',''=>'E',''=>'E',''=>'E',''=>'E',''=>'E',''=>'E',''=>'E',''=>'E',''=>'E',''=>'E',''=>'E',''=>'E',''=>'E',''=>'E',''=>'E',''=>'E',''=>'E',''=>'E',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'w',''=>'M',''=>'M',''=>'M',''=>'M',''=>'M',''=>'M',''=>'M',''=>'M',''=>'M',''=>'M',''=>'M',''=>'M',''=>'M',''=>'M',''=>'M',''=>'M',''=>'M',''=>'M',''=>'H',''=>'H',''=>'H',''=>'H',''=>'H',''=>'H',''=>'H',''=>'H',''=>'H',''=>'H',''=>'H',''=>'H',''=>'H',''=>'H',''=>'H',''=>'H',''=>'H',''=>'H',''=>'G',''=>'G',''=>'G',''=>'G',''=>'G',''=>'G',''=>'G',''=>'G',''=>'G',''=>'G',''=>'G',''=>'G',''=>'G',''=>'G',''=>'Z',''=>'Z',''=>'Z',''=>'Z',''=>'Z',''=>'Z',''=>'Z',''=>'Z',''=>'Z',''=>'Z',''=>'Z',''=>'Z',''=>'Z',''=>'Z',''=>'Z',''=>'Z',''=>'Z',''=>'Z',''=>'S',''=>'S',''=>'S',''=>'S',''=>'S',''=>'S',''=>'S',''=>'S',''=>'S',''=>'S',''=>'S',''=>'S',''=>'S',''=>'S',''=>'V',''=>'V',''=>'V',''=>'V',''=>'V',''=>'V',''=>'V',''=>'V',''=>'V',''=>'V',''=>'V',''=>'V',''=>'V',''=>'L',''=>'L',''=>'L',''=>'L',''=>'L',''=>'L',''=>'L',''=>'L',''=>'L',''=>'L',''=>'L',''=>'L',''=>'L',''=>'C',''=>'C',''=>'C',''=>'C',''=>'C',''=>'C',''=>'C',''=>'C',''=>'C',''=>'C',''=>'C',''=>'C',''=>'C',''=>'C',''=>'C',''=>'C',''=>'C',''=>'C',''=>'C',''=>'C',''=>'P',''=>'P',''=>'P',''=>'P',''=>'P',''=>'P',''=>'P',''=>'P',''=>'P',''=>'P',''=>'P',''=>'P',''=>'P',''=>'P',''=>'P',''=>'P',''=>'P',''=>'P',''=>'K',''=>'K',''=>'K',''=>'K',''=>'K',''=>'K',''=>'K',''=>'K',''=>'K',''=>'K',''=>'K',''=>'K',''=>'K',''=>'K',''=>'K',''=>'K',''=>'K',''=>'K',''=>'B',''=>'B',''=>'B',''=>'B',''=>'B',''=>'B',''=>'B',''=>'B',''=>'B',''=>'B',''=>'B',''=>'B',''=>'B',''=>'B',''=>'B',''=>'B',''=>'B',''=>'B',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'P',''=>'d',''=>'J',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'P',''=>'P',''=>'',''=>'d',''=>'d',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'J',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'x',''=>'x',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'P',''=>'',''=>'d',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'R',''=>'R',''=>'R',''=>'R',''=>'R',''=>'R',''=>'R',''=>'R',''=>'R',''=>'R',''=>'R',''=>'R',''=>'R',''=>'',''=>'',''=>'',''=>'',''=>'J',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'J',''=>'',''=>'',''=>'',''=>'F',''=>'F',''=>'F',''=>'F',''=>'F',''=>'F',''=>'F',''=>'F',''=>'F',''=>'F',''=>'F',''=>'F',''=>'F',''=>'F',''=>'D',''=>'D',''=>'D',''=>'D',''=>'D',''=>'D',''=>'D',''=>'D',''=>'D',''=>'D',''=>'D',''=>'D',''=>'D',''=>'D',''=>'D',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'','|'=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'C',''=>'F',''=>'',''=>'FAX',''=>'N',''=>'No',''=>'Q',''=>'Rs',''=>'T',''=>'TEL',''=>'U',''=>'W',''=>'W',''=>'X',''=>'Y',''=>'',''=>'',''=>'',''=>'c',''=>'Y',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'b',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'a',''=>'b',''=>'b',''=>'c',''=>'d',''=>'d',''=>'e',''=>'',''=>'',''=>'',''=>'f',''=>'g',''=>'h',''=>'h',''=>'h',''=>'h',''=>'i',''=>'i',''=>'i',''=>'j',''=>'j',''=>'m',''=>'n',''=>'n',''=>'o',''=>'o',''=>'o',''=>'o',''=>'o',''=>'o',''=>'o',''=>'o',''=>'o',''=>'o',''=>'o',''=>'o',''=>'p',''=>'p',''=>'',''=>'q',''=>'',''=>'',''=>'r',''=>'r',''=>'s',''=>'u',''=>'u',''=>'v',''=>'v',''=>'w',''=>'w',''=>'x',''=>'x',''=>'y',''=>'y',''=>'',''=>'',''=>'',''=>'',''=>'i',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'A',''=>'J',''=>'H',''=>'V',''=>'P',''=>'B',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'A',''=>'B',''=>'C',''=>'D',''=>'E',''=>'F',''=>'G',''=>'H',''=>'J',''=>'K',''=>'L',''=>'M',''=>'P',''=>'R',''=>'S',''=>'V',''=>'Z');
<?php/**** @package acp* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @package module_install*/class acp_ban_info{	function module()	{		return array(			'filename'	=> 'acp_ban',			'title'		=> 'ACP_BAN',			'version'	=> '1.0.0',			'modes'		=> array(				'email'		=> array('title' => 'ACP_BAN_EMAILS', 'auth' => 'acl_a_ban', 'cat' => array('ACP_USER_SECURITY')),				'ip'		=> array('title' => 'ACP_BAN_IPS', 'auth' => 'acl_a_ban', 'cat' => array('ACP_USER_SECURITY')),				'user'		=> array('title' => 'ACP_BAN_USERNAMES', 'auth' => 'acl_a_ban', 'cat' => array('ACP_USER_SECURITY')),			),		);	}	function install()	{	}	function uninstall()	{	}}?>
<?php/**** @package mcp* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @package module_install*/class mcp_pm_reports_info{	function module()	{		return array(			'filename'	=> 'mcp_pm_reports',			'title'		=> 'MCP_PM_REPORTS',			'version'	=> '1.0.0',			'modes'		=> array(				'pm_reports'			=> array('title' => 'MCP_PM_REPORTS_OPEN', 'auth' => 'aclf_m_report', 'cat' => array('MCP_REPORTS')),				'pm_reports_closed'	=> array('title' => 'MCP_PM_REPORTS_CLOSED', 'auth' => 'aclf_m_report', 'cat' => array('MCP_REPORTS')),				'pm_report_details'	=> array('title' => 'MCP_PM_REPORT_DETAILS', 'auth' => 'aclf_m_report', 'cat' => array('MCP_REPORTS')),			),		);	}	function install()	{	}	function uninstall()	{	}}?>
<?php/**** @package install* @version $Id$* @copyright (c) 2006 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @ignore*/if (!defined('IN_PHPBB')){	exit;}/*** Default avatar width/height* @ignore*/define('DEFAULT_AVATAR_X', 80);define('DEFAULT_AVATAR_Y', 80);// Global functions - all functions can be used by convertors// SIMPLE FUNCTIONS/*** Return the preceding value*/function dec($var){	return --$var;}/*** Return the next value*/function inc($var){	return ++$var;}/*** Return whether the value is positive*/function is_positive($n){	return ($n > 0) ? 1 : 0;}/*** Boolean inverse of the value*/function not($var){	return ($var) ? 0 : 1;}/*** Convert a textual value to it's equivalent boolean value** @param string $str String to convert (converts yes, on, y, 1 and true to boolean true)* @return boolean The equivalent value*/function str_to_bool($str){	$str = strtolower($str);	return ($str == 'yes' || $str == 'on' || $str == 'y' || $str == 'true' || $str == '1') ? true : false;}/*** Function to mimic php's empty() function (it is the same)*/function is_empty($mixed){	return empty($mixed);}/*** Convert the name of a user's primary group to the appropriate equivalent phpBB group id** @param string $status The name of the group* @return int The group_id corresponding to the equivalent group*/function str_to_primary_group($status){	switch (ucfirst(strtolower($status)))	{		case 'Administrator':			return get_group_id('administrators');		break;		case 'Super moderator':		case 'Global moderator':		case 'Moderator':			return get_group_id('global_moderators');		break;		case 'Guest':		case 'Anonymous':			return get_group_id('guests');		break;		default:			return get_group_id('registered');		break;	}}/*** Convert a boolean into the appropriate phpBB constant indicating whether the item is locked*/function is_item_locked($bool){	return ($bool) ? ITEM_LOCKED : ITEM_UNLOCKED;}/*** Convert a value from days to seconds*/function days_to_seconds($days){	return ($days * 86400);}/*** Determine whether a user is anonymous and return the appropriate new user_id*/function is_user_anonymous($user_id){	return ($user_id > ANONYMOUS) ? $user_id : ANONYMOUS;}/*** Generate a key value based on existing values** @param int $pad Amount to add to the maximum value* @return int Key value*/function auto_id($pad = 0){	global $auto_id, $convert_row;	if (!empty($convert_row['max_id']))	{		return $convert_row['max_id'] + $pad;	}	return $auto_id + $pad;}/*** Convert a boolean into the appropriate phpBB constant indicating whether the user is active*/function set_user_type($user_active){	return ($user_active) ? USER_NORMAL : USER_INACTIVE;}/*** Convert a value from minutes to hours*/function minutes_to_hours($minutes){	return ($minutes / 3600);}/*** Return the group_id for a given group name*/function get_group_id($group_name){	global $db, $group_mapping;	if (empty($group_mapping))	{		$sql = 'SELECT group_name, group_id			FROM ' . GROUPS_TABLE;		$result = $db->sql_query($sql);		$group_mapping = array();		while ($row = $db->sql_fetchrow($result))		{			$group_mapping[strtoupper($row['group_name'])] = (int) $row['group_id'];		}		$db->sql_freeresult($result);	}	if (!sizeof($group_mapping))	{		add_default_groups();		return get_group_id($group_name);	}	if (isset($group_mapping[strtoupper($group_name)]))	{		return $group_mapping[strtoupper($group_name)];	}	return $group_mapping['REGISTERED'];}/*** Generate the email hash stored in the users table** Note: Deprecated, calls should directly go to phpbb_email_hash()*/function gen_email_hash($email){	return phpbb_email_hash($email);}/*** Convert a boolean into the appropriate phpBB constant indicating whether the topic is locked*/function is_topic_locked($bool){	return (!empty($bool)) ? ITEM_LOCKED : ITEM_UNLOCKED;}/*** Generate a bbcode_uid value*/function make_uid($timestamp){	static $last_timestamp, $last_uid;	if (empty($last_timestamp) || $timestamp != $last_timestamp)	{		$last_uid = substr(base_convert(unique_id(), 16, 36), 0, BBCODE_UID_LEN);	}	$last_timestamp = $timestamp;	return $last_uid;}/*** Validate a website address*/function validate_website($url){	if ($url === 'http://')	{		return '';	}	else if (!preg_match('#^[a-z0-9]+://#i', $url) && strlen($url) > 0)	{		return 'http://' . $url;	}	return $url;}/*** Convert nulls to zeros for fields which allowed a NULL value in the source but not the destination*/function null_to_zero($value){	return ($value === NULL) ? 0 : $value;}/*** Convert nulls to empty strings for fields which allowed a NULL value in the source but not the destination*/function null_to_str($value){	return ($value === NULL) ? '' : $value;}// EXTENDED FUNCTIONS/*** Get old config value*/function get_config_value($config_name){	static $convert_config;	if (!isset($convert_config))	{		$convert_config = get_config();	}	if (!isset($convert_config[$config_name]))	{		return false;	}	return (empty($convert_config[$config_name])) ? '' : $convert_config[$config_name];}/*** Convert an IP address from the hexadecimal notation to normal dotted-quad notation*/function decode_ip($int_ip){	if (!$int_ip)	{		return $int_ip;	}	$hexipbang = explode('.', chunk_split($int_ip, 2, '.'));	// Any mod changing the way ips are stored? Then we are not able to convert and enter the ip "as is" to not "destroy" anything...	if (sizeof($hexipbang) < 4)	{		return $int_ip;	}	return hexdec($hexipbang[0]) . '.' . hexdec($hexipbang[1]) . '.' . hexdec($hexipbang[2]) . '.' . hexdec($hexipbang[3]);}/*** Reverse the encoding of wild-carded bans*/function decode_ban_ip($int_ip){	return str_replace('255', '*', decode_ip($int_ip));}/*** Determine the MIME-type of a specified filename* This does not actually inspect the file, but simply uses the file extension*/function mimetype($filename){	if (!preg_match('/\.([a-z0-9]+)$/i', $filename, $m))	{		return 'application/octet-stream';	}	switch (strtolower($m[1]))	{		case 'zip':		return 'application/zip';		case 'jpeg':	return 'image/jpeg';		case 'jpg':		return 'image/jpeg';		case 'jpe':		return 'image/jpeg';		case 'png':		return 'image/png';		case 'gif':		return 'image/gif';		case 'htm':		case 'html':	return 'text/html';		case 'tif':		return 'image/tiff';		case 'tiff':	return 'image/tiff';		case 'ras':		return 'image/x-cmu-raster';		case 'pnm':		return 'image/x-portable-anymap';		case 'pbm':		return 'image/x-portable-bitmap';		case 'pgm':		return 'image/x-portable-graymap';		case 'ppm':		return 'image/x-portable-pixmap';		case 'rgb':		return 'image/x-rgb';		case 'xbm':		return 'image/x-xbitmap';		case 'xpm':		return 'image/x-xpixmap';		case 'xwd':		return 'image/x-xwindowdump';		case 'z':		return 'application/x-compress';		case 'gtar':	return 'application/x-gtar';		case 'tgz':		return 'application/x-gtar';		case 'gz':		return 'application/x-gzip';		case 'tar':		return 'application/x-tar';		case 'xls':		return 'application/excel';		case 'pdf':		return 'application/pdf';		case 'ppt':		return 'application/powerpoint';		case 'rm':		return 'application/vnd.rn-realmedia';		case 'wma':		return 'audio/x-ms-wma';		case 'swf':		return 'application/x-shockwave-flash';		case 'ief':		return 'image/ief';		case 'doc':		case 'dot':		case 'wrd':		return 'application/msword';		case 'ai':		case 'eps':		case 'ps':		return 'application/postscript';		case 'asc':		case 'txt':		case 'c':		case 'cc':		case 'h':		case 'hh':		case 'cpp':		case 'hpp':		case 'php':		case 'php3':	return 'text/plain';		default: 		return 'application/octet-stream';	}}/*** Obtain the dimensions of all remotely hosted avatars* This should only be called from execute_last* There can be significant network overhead if there are a large number of remote avatars* @todo Look at the option of allowing the user to decide whether this is called or to force the dimensions*/function remote_avatar_dims(){	global $db;	$sql = 'SELECT user_id, user_avatar		FROM ' . USERS_TABLE . '		WHERE user_avatar_type = ' . AVATAR_REMOTE;	$result = $db->sql_query($sql);	$remote_avatars = array();	while ($row = $db->sql_fetchrow($result))	{		$remote_avatars[(int) $row['user_id']] = $row['user_avatar'];	}	$db->sql_freeresult($result);	foreach ($remote_avatars as $user_id => $avatar)	{		$width = (int) get_remote_avatar_dim($avatar, 0);		$height = (int) get_remote_avatar_dim($avatar, 1);		$sql = 'UPDATE ' . USERS_TABLE . '			SET user_avatar_width = ' . (int) $width . ', user_avatar_height = ' . (int) $height . '			WHERE user_id = ' . $user_id;		$db->sql_query($sql);	}}function import_avatar_gallery($gallery_name = '', $subdirs_as_galleries = false){	global $config, $convert, $phpbb_root_path, $user;	$relative_path = empty($convert->convertor['source_path_absolute']);	if (empty($convert->convertor['avatar_gallery_path']))	{		$convert->p_master->error(sprintf($user->lang['CONV_ERROR_NO_GALLERY_PATH'], 'import_avatar_gallery()'), __LINE__, __FILE__);	}	$src_path = relative_base(path($convert->convertor['avatar_gallery_path'], $relative_path), $relative_path);	if (is_dir($src_path))	{		// Do not die on failure... safe mode restrictions may be in effect.		copy_dir($convert->convertor['avatar_gallery_path'], path($config['avatar_gallery_path']) . $gallery_name, !$subdirs_as_galleries, false, false, $relative_path);		// only doing 1 level deep. (ibf 1.x)		// notes: ibf has 2 tiers: directly in the avatar directory for base gallery (handled in the above statement), plus subdirs(handled below).		// recursive subdirs ignored. -- i don't know if other forums support recursive galleries. if they do, this following code could be upgraded to be recursive.		if ($subdirs_as_galleries)		{			$dirlist = array();			if ($handle = @opendir($src_path))			{				while ($entry = readdir($handle))				{					if ($entry[0] == '.' || $entry == 'CVS' || $entry == 'index.htm')					{						continue;					}					if (is_dir($src_path . $entry))					{						$dirlist[] = $entry;					}				}				closedir($handle);			}			else if ($dir = @dir($src_path))			{				while ($entry = $dir->read())				{					if ($entry[0] == '.' || $entry == 'CVS' || $entry == 'index.htm')					{						continue;					}					if (is_dir($src_path . $entry))					{						$dirlist[] = $entry;					}				}				$dir->close();			}			for ($i = 0; $i < sizeof($dirlist); ++$i)			{				$dir = $dirlist[$i];				// Do not die on failure... safe mode restrictions may be in effect.				copy_dir(path($convert->convertor['avatar_gallery_path'], $relative_path) . $dir, path($config['avatar_gallery_path']) . $dir, true, false, false, $relative_path);			}		}	}}function import_attachment_files($category_name = ''){	global $config, $convert, $phpbb_root_path, $db, $user;	$sql = 'SELECT config_value AS upload_path		FROM ' . CONFIG_TABLE . "		WHERE config_name = 'upload_path'";	$result = $db->sql_query($sql);	$config['upload_path'] = $db->sql_fetchfield('upload_path');	$db->sql_freeresult($result);	$relative_path = empty($convert->convertor['source_path_absolute']);	if (empty($convert->convertor['upload_path']))	{		$convert->p_master->error(sprintf($user->lang['CONV_ERROR_NO_UPLOAD_DIR'], 'import_attachment_files()'), __LINE__, __FILE__);	}	if (is_dir(relative_base(path($convert->convertor['upload_path'], $relative_path), $relative_path)))	{		copy_dir($convert->convertor['upload_path'], path($config['upload_path']) . $category_name, true, false, true, $relative_path);	}}function attachment_forum_perms($forum_id){	if (!is_array($forum_id))	{		$forum_id = array($forum_id);	}	return serialize($forum_id);}// base64todec function// -> from php manual?function base64_unpack($string){	$chars = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ+-';	$base = strlen($chars);	$length = strlen($string);	$number = 0;	for ($i = 1; $i <= $length; $i++)	{		$pos = $length - $i;		$operand = strpos($chars, substr($string, $pos, 1));		$exponent = pow($base, $i-1);		$dec_value = $operand * $exponent;		$number += $dec_value;	}	return $number;}function _import_check($config_var, $source, $use_target){	global $convert, $config;	$result = array(		'orig_source'	=> $source,		'copied'		=> false,		'relative_path'	=> (empty($convert->convertor['source_path_absolute'])) ? true : false,	);	// copy file will prepend $phpBB_root_path	$target = $config[$config_var] . '/' . utf8_basename(($use_target === false) ? $source : $use_target);	if (!empty($convert->convertor[$config_var]) && strpos($source, $convert->convertor[$config_var]) !== 0)	{		$source = $convert->convertor[$config_var] . $source;	}	$result['source'] = $source;	if (file_exists(relative_base($source, $result['relative_path'], __LINE__, __FILE__)))	{		$result['copied'] = copy_file($source, $target, false, false, $result['relative_path']);	}	if ($result['copied'])	{		$result['target'] = utf8_basename($target);	}	else	{		$result['target'] = ($use_target !== false) ? $result['orig_source'] : utf8_basename($target);	}	return $result;}function import_attachment($source, $use_target = false){	if (empty($source))	{		return '';	}	global $convert, $phpbb_root_path, $config, $user;	if (empty($convert->convertor['upload_path']))	{		$convert->p_master->error(sprintf($user->lang['CONV_ERROR_NO_UPLOAD_DIR'], 'import_attachment()'), __LINE__, __FILE__);	}	$result = _import_check('upload_path', $source, $use_target);	if ($result['copied'])	{		// Thumbnails?		if (is_array($convert->convertor['thumbnails']))		{			$thumb_dir = $convert->convertor['thumbnails'][0];			$thumb_prefix = $convert->convertor['thumbnails'][1];			$thumb_source = $thumb_dir . $thumb_prefix . utf8_basename($result['source']);			if (strpos($thumb_source, $convert->convertor['upload_path']) !== 0)			{				$thumb_source = $convert->convertor['upload_path'] . $thumb_source;			}			$thumb_target = $config['upload_path'] . '/thumb_' . $result['target'];			if (file_exists(relative_base($thumb_source, $result['relative_path'], __LINE__, __FILE__)))			{				copy_file($thumb_source, $thumb_target, false, false, $result['relative_path']);			}		}	}	return $result['target'];}function import_rank($source, $use_target = false){	if (empty($source))	{		return '';	}	global $convert, $phpbb_root_path, $config, $user;	if (!isset($convert->convertor['ranks_path']))	{		$convert->p_master->error(sprintf($user->lang['CONV_ERROR_NO_RANKS_PATH'], 'import_rank()'), __LINE__, __FILE__);	}	$result = _import_check('ranks_path', $source, $use_target);	return $result['target'];}function import_smiley($source, $use_target = false){	if (empty($source))	{		return '';	}	global $convert, $phpbb_root_path, $config, $user;	if (!isset($convert->convertor['smilies_path']))	{		$convert->p_master->error(sprintf($user->lang['CONV_ERROR_NO_SMILIES_PATH'], 'import_smiley()'), __LINE__, __FILE__);	}	$result = _import_check('smilies_path', $source, $use_target);	return $result['target'];}/**/function import_avatar($source, $use_target = false, $user_id = false){	if (empty($source) || preg_match('#^https?:#i', $source) || preg_match('#blank\.(gif|png)$#i', $source))	{		return;	}	global $convert, $phpbb_root_path, $config, $user;	if (!isset($convert->convertor['avatar_path']))	{		$convert->p_master->error(sprintf($user->lang['CONV_ERROR_NO_AVATAR_PATH'], 'import_avatar()'), __LINE__, __FILE__);	}	if ($use_target === false && $user_id !== false)	{		$use_target = $config['avatar_salt'] . '_' . $user_id . '.' . substr(strrchr($source, '.'), 1);	}	$result = _import_check('avatar_path', $source, $use_target);	return ((!empty($user_id)) ? $user_id : $use_target) . '.' . substr(strrchr($source, '.'), 1);}/*** @todo all image dimension functions below (there are a *lot*) should get revisited and converted to one or two functions (no more needed, really).*//*** Calculate the size of the specified image* Called from the following functions for calculating the size of specific image types*/function get_image_dim($source){	if (empty($source))	{		return array(0, 0);	}	global $convert;	$relative_path = empty($convert->convertor['source_path_absolute']);	if (file_exists(relative_base($source, $relative_path)))	{		$image = relative_base($source, $relative_path);		return @getimagesize($image);	}	return false;}/*** Obtain the width of the specified smilie*/function get_smiley_width($src){	return get_smiley_dim($src, 0);}/*** Obtain the height of the specified smilie*/function get_smiley_height($src){	return get_smiley_dim($src, 1);}/*** Obtain the size of the specified smilie (using the cache if possible) and cache the value*/function get_smiley_dim($source, $axis){	if (empty($source))	{		return 15;	}	static $smiley_cache = array();	if (isset($smiley_cache[$source]))	{		return $smiley_cache[$source][$axis];	}	global $convert, $phpbb_root_path, $config, $user;	$orig_source = $source;	if (!isset($convert->convertor['smilies_path']))	{		$convert->p_master->error(sprintf($user->lang['CONV_ERROR_NO_SMILIES_PATH'], 'get_smiley_dim()'), __LINE__, __FILE__);	}	if (!empty($convert->convertor['smilies_path']) && strpos($source, $convert->convertor['smilies_path']) !== 0)	{		$source = $convert->convertor['smilies_path'] . $source;	}	$smiley_cache[$orig_source] = get_image_dim($source);	if (empty($smiley_cache[$orig_source]) || empty($smiley_cache[$orig_source][0]) || empty($smiley_cache[$orig_source][1]))	{		$smiley_cache[$orig_source] = array(15, 15);		return 15;	}	return $smiley_cache[$orig_source][$axis];}/*** Obtain the width of the specified avatar*/function get_avatar_width($src, $func = false, $arg1 = false, $arg2 = false){	return get_avatar_dim($src, 0, $func, $arg1, $arg2);}/*** Obtain the height of the specified avatar*/function get_avatar_height($src, $func = false, $arg1 = false, $arg2 = false){	return get_avatar_dim($src, 1, $func, $arg1, $arg2);}/***/function get_avatar_dim($src, $axis, $func = false, $arg1 = false, $arg2 = false){	$avatar_type = AVATAR_UPLOAD;	if ($func)	{		if ($arg1 || $arg2)		{			$ary = array($arg1);			if ($arg2)			{				$ary[] = $arg2;			}			$avatar_type = call_user_func_array($func, $ary);		}		else		{			$avatar_type = call_user_func($func);		}	}	switch ($avatar_type)	{		case AVATAR_UPLOAD:			return get_upload_avatar_dim($src, $axis);		break;		case AVATAR_GALLERY:			return get_gallery_avatar_dim($src, $axis);		break;		case AVATAR_REMOTE:			 // see notes on this functions usage and (hopefully) model $func to avoid this accordingly			return get_remote_avatar_dim($src, $axis);		break;		default:			$default_x = (defined('DEFAULT_AVATAR_X_CUSTOM')) ? DEFAULT_AVATAR_X_CUSTOM : DEFAULT_AVATAR_X;			$default_y = (defined('DEFAULT_AVATAR_Y_CUSTOM')) ? DEFAULT_AVATAR_Y_CUSTOM : DEFAULT_AVATAR_Y;			return $axis ? $default_y : $default_x;		break;	}}/*** Obtain the size of the specified uploaded avatar (using the cache if possible) and cache the value*/function get_upload_avatar_dim($source, $axis){	static $cachedims = false;	static $cachekey = false;	if (empty($source))	{		return 0;	}	if ($cachekey == $source)	{		return $cachedims[$axis];	}	$orig_source = $source;	if (substr($source, 0, 7) == 'upload:')	{		$source = substr($source, 7);	}	global $convert, $phpbb_root_path, $config, $user;	if (!isset($convert->convertor['avatar_path']))	{		$convert->p_master->error(sprintf($user->lang['CONV_ERROR_NO_AVATAR_PATH'], 'get_upload_avatar_dim()'), __LINE__, __FILE__);	}	if (!empty($convert->convertor['avatar_path']) && strpos($source, $convert->convertor['avatar_path']) !== 0)	{		$source = path($convert->convertor['avatar_path'], empty($convert->convertor['source_path_absolute'])) . $source;	}	$cachedims = get_image_dim($source);	if (empty($cachedims) || empty($cachedims[0]) || empty($cachedims[1]))	{		$default_x = (defined('DEFAULT_AVATAR_X_CUSTOM')) ? DEFAULT_AVATAR_X_CUSTOM : DEFAULT_AVATAR_X;		$default_y = (defined('DEFAULT_AVATAR_Y_CUSTOM')) ? DEFAULT_AVATAR_Y_CUSTOM : DEFAULT_AVATAR_Y;		$cachedims = array($default_x, $default_y);	}	return $cachedims[$axis];}/*** Obtain the size of the specified gallery avatar (using the cache if possible) and cache the value*/function get_gallery_avatar_dim($source, $axis){	if (empty($source))	{		return 0;	}	static $avatar_cache = array();	if (isset($avatar_cache[$source]))	{		return $avatar_cache[$source][$axis];	}	global $convert, $phpbb_root_path, $config, $user;	$orig_source = $source;	if (!isset($convert->convertor['avatar_gallery_path']))	{		$convert->p_master->error(sprintf($user->lang['CONV_ERROR_NO_GALLERY_PATH'], 'get_gallery_avatar_dim()'), __LINE__, __FILE__);	}	if (!empty($convert->convertor['avatar_gallery_path']) && strpos($source, $convert->convertor['avatar_gallery_path']) !== 0)	{		$source = path($convert->convertor['avatar_gallery_path'], empty($convert->convertor['source_path_absolute'])) . $source;	}	$avatar_cache[$orig_source] = get_image_dim($source);	if (empty($avatar_cache[$orig_source]) || empty($avatar_cache[$orig_source][0]) || empty($avatar_cache[$orig_source][1]))	{		$default_x = (defined('DEFAULT_AVATAR_X_CUSTOM')) ? DEFAULT_AVATAR_X_CUSTOM : DEFAULT_AVATAR_X;		$default_y = (defined('DEFAULT_AVATAR_Y_CUSTOM')) ? DEFAULT_AVATAR_Y_CUSTOM : DEFAULT_AVATAR_Y;		$avatar_cache[$orig_source] = array($default_x, $default_y);	}	return $avatar_cache[$orig_source][$axis];}/*** Obtain the size of the specified remote avatar (using the cache if possible) and cache the value* Whilst it's unlikely that remote avatars will be duplicated, it is possible so caching seems the best option* This should only be called from a post processing step due to the possibility of network timeouts*/function get_remote_avatar_dim($src, $axis){	if (empty($src))	{		return 0;	}	static $remote_avatar_cache = array();	// an ugly hack: we assume that the dimensions of each remote avatar are accessed exactly twice (x and y)	if (isset($remote_avatar_cache[$src]))	{		$retval = $remote_avatar_cache[$src][$axis];		unset($remote_avatar_cache);		return $retval;	}	$url_info = @parse_url($src);	if (empty($url_info['host']))	{		return 0;	}	$host = $url_info['host'];	$port = (isset($url_info['port'])) ? $url_info['port'] : 0;	$protocol = (isset($url_info['scheme'])) ? $url_info['scheme'] : 'http';	if (empty($port))	{		switch(strtolower($protocol))		{			case 'ftp':				$port = 21;				break;			case 'https':				$port = 443;				break;			default:				$port = 80;		}	}	$timeout = @ini_get('default_socket_timeout');	@ini_set('default_socket_timeout', 2);	// We're just trying to reach the server to avoid timeouts	$fp = @fsockopen($host, $port, $errno, $errstr, 1);	if ($fp)	{		$remote_avatar_cache[$src] = @getimagesize($src);		fclose($fp);	}	$default_x 	= (defined('DEFAULT_AVATAR_X_CUSTOM')) ? DEFAULT_AVATAR_X_CUSTOM : DEFAULT_AVATAR_X;	$default_y 	= (defined('DEFAULT_AVATAR_Y_CUSTOM')) ? DEFAULT_AVATAR_Y_CUSTOM : DEFAULT_AVATAR_Y;	$default 	= array($default_x, $default_y);	if (empty($remote_avatar_cache[$src]) || empty($remote_avatar_cache[$src][0]) || empty($remote_avatar_cache[$src][1]))	{		$remote_avatar_cache[$src] = $default;	}	else	{		// We trust gallery and uploaded avatars to conform to the size settings; we might have to adjust here		if ($remote_avatar_cache[$src][0] > $default_x || $remote_avatar_cache[$src][1] > $default_y)		{			$bigger = ($remote_avatar_cache[$src][0] > $remote_avatar_cache[$src][1]) ? 0 : 1;			$ratio = $default[$bigger] / $remote_avatar_cache[$src][$bigger];			$remote_avatar_cache[$src][0] = (int)($remote_avatar_cache[$src][0] * $ratio);			$remote_avatar_cache[$src][1] = (int)($remote_avatar_cache[$src][1] * $ratio);		}	}	@ini_set('default_socket_timeout', $timeout);	return $remote_avatar_cache[$src][$axis];}function set_user_options(){	global $convert_row;	// Key need to be set in row, else default value is chosen	$keyoptions = array(		'viewimg'		=> array('bit' => 0, 'default' => 1),		'viewflash'		=> array('bit' => 1, 'default' => 1),		'viewsmilies'	=> array('bit' => 2, 'default' => 1),		'viewsigs'		=> array('bit' => 3, 'default' => 1),		'viewavatars'	=> array('bit' => 4, 'default' => 1),		'viewcensors'	=> array('bit' => 5, 'default' => 1),		'attachsig'		=> array('bit' => 6, 'default' => 0),		'bbcode'		=> array('bit' => 8, 'default' => 1),		'smilies'		=> array('bit' => 9, 'default' => 1),		'popuppm'		=> array('bit' => 10, 'default' => 0),		'sig_bbcode'	=> array('bit' => 15, 'default' => 1),		'sig_smilies'	=> array('bit' => 16, 'default' => 1),		'sig_links'		=> array('bit' => 17, 'default' => 1),	);	$option_field = 0;	foreach ($keyoptions as $key => $key_ary)	{		$value = (isset($convert_row[$key])) ? (int) $convert_row[$key] : $key_ary['default'];		if ($value && !($option_field & 1 << $key_ary['bit']))		{			$option_field += 1 << $key_ary['bit'];		}	}	return $option_field;}/*** Index messages on the fly as we convert them* @todo naderman, can you check that this works with the new search plugins as it's use is currently disabled (and thus untested)function search_indexing($message = ''){	global $fulltext_search, $convert_row;	if (!isset($convert_row['post_id']))	{		return;	}	if (!$message)	{		if (!isset($convert_row['message']))		{			return;		}		$message = $convert_row['message'];	}	$title = (isset($convert_row['title'])) ? $convert_row['title'] : '';	$fulltext_search->index('post', $convert_row['post_id'], $message, $title, $convert_row['poster_id'], $convert_row['forum_id']);}*/function make_unique_filename($filename){	if (!strlen($filename))	{		$filename = md5(unique_id()) . '.dat';	}	else if ($filename[0] == '.')	{		$filename = md5(unique_id()) . $filename;	}	else if (preg_match('/\.([a-z]+)$/i', $filename, $m))	{		$filename = preg_replace('/\.([a-z]+)$/i', '_' . md5(unique_id()) . '.\1', $filename);	}	else	{		$filename .= '_' . md5(unique_id()) . '.dat';	}	return $filename;}function words_unique(&$words){	reset($words);	$return_array = array();	$word = current($words);	do	{		$return_array[$word] = $word;	}	while ($word = next($words));	return $return_array;}/*** Adds a user to the specified group and optionally makes them a group leader* This function does not create the group if it does not exist and so should only be called after the groups have been created*/function add_user_group($group_id, $user_id, $group_leader=false){	global $convert, $phpbb_root_path, $config, $user, $db;	$sql = 'INSERT INTO ' . USER_GROUP_TABLE . ' ' . $db->sql_build_array('INSERT', array(		'group_id'		=> $group_id,		'user_id'		=> $user_id,		'group_leader'	=> ($group_leader) ? 1 : 0,		'user_pending'	=> 0));	$db->sql_query($sql);}// STANDALONE FUNCTIONS/*** Add users to the pre-defined "special" groups** @param string $group The name of the special group to add to* @param string $select_query An SQL query to retrieve the user(s) to add to the group*/function user_group_auth($group, $select_query, $use_src_db){	global $convert, $phpbb_root_path, $config, $user, $db, $src_db, $same_db;	if (!in_array($group, array('guests', 'registered', 'registered_coppa', 'global_moderators', 'administrators', 'bots')))	{		$convert->p_master->error(sprintf($user->lang['CONV_ERROR_WRONG_GROUP'], $group, 'user_group_auth()'), __LINE__, __FILE__, true);		return;	}	$sql = 'SELECT group_id		FROM ' . GROUPS_TABLE . "		WHERE group_name = '" . $db->sql_escape(strtoupper($group)) . "'";	$result = $db->sql_query($sql);	$group_id = (int) $db->sql_fetchfield('group_id');	$db->sql_freeresult($result);	if (!$group_id)	{		$convert->p_master->error(sprintf($user->lang['CONV_ERROR_NO_GROUP'], $group, 'user_group_auth()'), __LINE__, __FILE__, true);		return;	}	if ($same_db || !$use_src_db)	{		$sql = 'INSERT INTO ' . USER_GROUP_TABLE . ' (user_id, group_id, user_pending)			' . str_replace('{' . strtoupper($group) . '}', $group_id . ', 0', $select_query);		$db->sql_query($sql);	}	else	{		$result = $src_db->sql_query(str_replace('{' . strtoupper($group) . '}', $group_id . ' ', $select_query));		while ($row = $src_db->sql_fetchrow($result))		{			// this might become quite a lot of INSERTS unfortunately			$sql = 'INSERT INTO ' . USER_GROUP_TABLE . " (user_id, group_id, user_pending)				VALUES ({$row['user_id']}, $group_id, 0)";			$db->sql_query($sql);		}		$src_db->sql_freeresult($result);	}}/*** Retrieves configuration information from the source forum and caches it as an array* Both database and file driven configuration formats can be handled* (the type used is specified in $config_schema, see convert_phpbb20.php for more details)*/function get_config(){	static $convert_config;	global $user;	if (isset($convert_config))	{		return $convert_config;	}	global $src_db, $same_db, $phpbb_root_path, $config;	global $convert;	if ($convert->config_schema['table_format'] != 'file')	{		if ($convert->mysql_convert && $same_db)		{			$src_db->sql_query("SET NAMES 'binary'");		}		$sql = 'SELECT * FROM ' . $convert->src_table_prefix . $convert->config_schema['table_name'];		$result = $src_db->sql_query($sql);		$row = $src_db->sql_fetchrow($result);		if (!$row)		{			$convert->p_master->error($user->lang['CONV_ERROR_GET_CONFIG'], __LINE__, __FILE__);		}	}	if (is_array($convert->config_schema['table_format']))	{		$convert_config = array();		list($key, $val) = each($convert->config_schema['table_format']);		do		{			$convert_config[$row[$key]] = $row[$val];		}		while ($row = $src_db->sql_fetchrow($result));		$src_db->sql_freeresult($result);		if ($convert->mysql_convert && $same_db)		{			$src_db->sql_query("SET NAMES 'utf8'");		}	}	else if ($convert->config_schema['table_format'] == 'file')	{		$filename = $convert->options['forum_path'] . '/' . $convert->config_schema['filename'];		if (!file_exists($filename))		{			$convert->p_master->error($user->lang['FILE_NOT_FOUND'] . ': ' . $filename, __LINE__, __FILE__);		}		if (isset($convert->config_schema['array_name']))		{			unset($convert->config_schema['array_name']);		}		$convert_config = extract_variables_from_file($filename);		if (!empty($convert->config_schema['array_name']))		{			$convert_config = $convert_config[$convert->config_schema['array_name']];		}	}	else	{		$convert_config = $row;		if ($convert->mysql_convert && $same_db)		{			$src_db->sql_query("SET NAMES 'utf8'");		}	}	if (!sizeof($convert_config))	{		$convert->p_master->error($user->lang['CONV_ERROR_CONFIG_EMPTY'], __LINE__, __FILE__);	}	return $convert_config;}/*** Transfers the relevant configuration information from the source forum* The mapping of fields is specified in $config_schema, see convert_phpbb20.php for more details*/function restore_config($schema){	global $db, $config;	$convert_config = get_config();	foreach ($schema['settings'] as $config_name => $src)	{		if (preg_match('/(.*)\((.*)\)/', $src, $m))		{			$var = (empty($m[2]) || empty($convert_config[$m[2]])) ? "''" : "'" . addslashes($convert_config[$m[2]]) . "'";			$exec = '$config_value = ' . $m[1] . '(' . $var . ');';			eval($exec);		}		else		{			if ($schema['table_format'] != 'file' || empty($schema['array_name']))			{				$config_value = (isset($convert_config[$src])) ? $convert_config[$src] : '';			}			else if (!empty($schema['array_name']))			{				$src_ary = $schema['array_name'];				$config_value = (isset($convert_config[$src_ary][$src])) ? $convert_config[$src_ary][$src] : '';			}   		}		if ($config_value !== '')		{			// Most are...			if (is_string($config_value))			{				$config_value = truncate_string(utf8_htmlspecialchars($config_value), 255, 255, false);			}			set_config($config_name, $config_value);		}	}}/*** Update the count of PM's in custom folders for all users*/function update_folder_pm_count(){	global $db, $convert, $user;	$sql = 'SELECT user_id, folder_id, COUNT(msg_id) as num_messages		FROM ' . PRIVMSGS_TO_TABLE . '		WHERE folder_id NOT IN (' . PRIVMSGS_NO_BOX . ', ' . PRIVMSGS_HOLD_BOX . ', ' . PRIVMSGS_INBOX . ', ' . PRIVMSGS_OUTBOX . ', ' . PRIVMSGS_SENTBOX . ')		GROUP BY folder_id, user_id';	$result = $db->sql_query($sql);	while ($row = $db->sql_fetchrow($result))	{		$db->sql_query('UPDATE ' . PRIVMSGS_FOLDER_TABLE . ' SET pm_count = ' . $row['num_messages'] . '			WHERE user_id = ' . $row['user_id'] . ' AND folder_id = ' . $row['folder_id']);	}	$db->sql_freeresult($result);}// Functions mainly used by the main convertor scriptfunction path($path, $path_relative = true){	if ($path === false)	{		return '';	}	if (substr($path, -1) != '/')	{		$path .= '/';	}	if (!$path_relative)	{		return $path;	}	if (substr($path, 0, 1) == '/')	{		$path = substr($path, 1);	}	return $path;}/*** Extract the variables defined in a configuration file* @todo As noted by Xore we need to look at this from a security perspective*/function extract_variables_from_file($_filename){	include($_filename);	$vars = get_defined_vars();	unset($vars['_filename']);	return $vars;}function get_path($src_path, $src_url, $test_file){	global $config, $phpbb_root_path, $phpEx;	$board_config = get_config();	$test_file = preg_replace('/\.php$/i', ".$phpEx", $test_file);	$src_path = path($src_path);	if (@file_exists($phpbb_root_path . $src_path . $test_file))	{		return $src_path;	}	if (!empty($src_url) && !empty($board_config['server_name']))	{		if (!preg_match('#https?://([^/]+)(.*)#i', $src_url, $m))		{			return false;		}		if ($m[1] != $board_config['server_name'])		{			return false;		}		$url_parts = explode('/', $m[2]);		if (substr($src_url, -1) != '/')		{			if (preg_match('/.*\.([a-z0-9]{3,4})$/i', $url_parts[sizeof($url_parts) - 1]))			{				$url_parts[sizeof($url_parts) - 1] = '';			}			else			{				$url_parts[] = '';			}		}		$script_path = $board_config['script_path'];		if (substr($script_path, -1) == '/')		{			$script_path = substr($script_path, 0, -1);		}		$path_array = array();		$phpbb_parts = explode('/', $script_path);		for ($i = 0; $i < sizeof($url_parts); ++$i)		{			if ($i < sizeof($phpbb_parts[$i]) && $url_parts[$i] == $phpbb_parts[$i])			{				$path_array[] = $url_parts[$i];				unset($url_parts[$i]);			}			else			{				$path = '';				for ($j = $i; $j < sizeof($phpbb_parts); ++$j)				{					$path .= '../';				}				$path .= implode('/', $url_parts);				break;			}		}		if (!empty($path))		{			if (@file_exists($phpbb_root_path . $path . $test_file))			{				return $path;			}		}	}	return false;}function compare_table($tables, $tablename, &$prefixes){	for ($i = 0, $table_size = sizeof($tables); $i < $table_size; ++$i)	{		if (preg_match('/(.*)' . $tables[$i] . '$/', $tablename, $m))		{			if (empty($m[1]))			{				$m[1] = '*';			}			if (isset($prefixes[$m[1]]))			{				$prefixes[$m[1]]++;			}			else			{				$prefixes[$m[1]] = 1;			}		}	}}/*** Grant permissions to a specified user or group** @param string $ug_type user|group|user_role|group_role* @param mixed $forum_id forum ids (array|int|0) -> 0 == all forums* @param mixed $ug_id [int] user_id|group_id : [string] usergroup name* @param mixed $acl_list [string] acl entry : [array] acl entries : [string] role entry* @param int $setting ACL_YES|ACL_NO|ACL_NEVER*/function mass_auth($ug_type, $forum_id, $ug_id, $acl_list, $setting = ACL_NO){	global $db, $convert, $user, $config;	static $acl_option_ids, $group_ids;	if (($ug_type == 'group' || $ug_type == 'group_role') && is_string($ug_id))	{		if (!isset($group_ids[$ug_id]))		{			$sql = 'SELECT group_id				FROM ' . GROUPS_TABLE . "				WHERE group_name = '" . $db->sql_escape(strtoupper($ug_id)) . "'";			$result = $db->sql_query_limit($sql, 1);			$id = (int) $db->sql_fetchfield('group_id');			$db->sql_freeresult($result);			if (!$id)			{				return;			}			$group_ids[$ug_id] = $id;		}		$ug_id = (int) $group_ids[$ug_id];	}	$table = ($ug_type == 'user' || $ug_type == 'user_role') ? ACL_USERS_TABLE : ACL_GROUPS_TABLE;	$id_field = ($ug_type == 'user' || $ug_type == 'user_role') ? 'user_id' : 'group_id';	// Role based permissions are the simplest to handle so check for them first	if ($ug_type == 'user_role' || $ug_type == 'group_role')	{		if (is_numeric($forum_id))		{			$sql = 'SELECT role_id				FROM ' . ACL_ROLES_TABLE . "				WHERE role_name = 'ROLE_" . $db->sql_escape($acl_list) . "'";			$result = $db->sql_query_limit($sql, 1);			$row = $db->sql_fetchrow($result);			$db->sql_freeresult($result);			// If we have no role id there is something wrong here			if ($row)			{				$sql = "INSERT INTO $table ($id_field, forum_id, auth_role_id) VALUES ($ug_id, $forum_id, " . $row['role_id'] . ')';				$db->sql_query($sql);			}		}		return;	}	// Build correct parameters	$auth = array();	if (!is_array($acl_list))	{		$auth = array($acl_list => $setting);	}	else	{		foreach ($acl_list as $auth_option)		{			$auth[$auth_option] = $setting;		}	}	unset($acl_list);	if (!is_array($forum_id))	{		$forum_id = array($forum_id);	}	// Set any flags as required	foreach ($auth as $auth_option => $acl_setting)	{		$flag = substr($auth_option, 0, strpos($auth_option, '_') + 1);		if (empty($auth[$flag]))		{			$auth[$flag] = $acl_setting;		}	}	if (!is_array($acl_option_ids) || empty($acl_option_ids))	{		$sql = 'SELECT auth_option_id, auth_option			FROM ' . ACL_OPTIONS_TABLE;		$result = $db->sql_query($sql);		while ($row = $db->sql_fetchrow($result))		{			$acl_option_ids[$row['auth_option']] = $row['auth_option_id'];		}		$db->sql_freeresult($result);	}	$sql_forum = 'AND ' . $db->sql_in_set('a.forum_id', array_map('intval', $forum_id), false, true);	$sql = ($ug_type == 'user') ? 'SELECT o.auth_option_id, o.auth_option, a.forum_id, a.auth_setting FROM ' . ACL_USERS_TABLE . ' a, ' . ACL_OPTIONS_TABLE . " o WHERE a.auth_option_id = o.auth_option_id $sql_forum AND a.user_id = $ug_id" : 'SELECT o.auth_option_id, o.auth_option, a.forum_id, a.auth_setting FROM ' . ACL_GROUPS_TABLE . ' a, ' . ACL_OPTIONS_TABLE . " o WHERE a.auth_option_id = o.auth_option_id $sql_forum AND a.group_id = $ug_id";	$result = $db->sql_query($sql);	$cur_auth = array();	while ($row = $db->sql_fetchrow($result))	{		$cur_auth[$row['forum_id']][$row['auth_option_id']] = $row['auth_setting'];	}	$db->sql_freeresult($result);	$sql_ary = array();	foreach ($forum_id as $forum)	{		foreach ($auth as $auth_option => $setting)		{			$auth_option_id = $acl_option_ids[$auth_option];			if (!$auth_option_id)			{				continue;			}			switch ($setting)			{				case ACL_NO:					if (isset($cur_auth[$forum][$auth_option_id]))					{						$sql_ary['delete'][] = "DELETE FROM $table							WHERE forum_id = $forum								AND auth_option_id = $auth_option_id								AND $id_field = $ug_id";					}				break;				default:					if (!isset($cur_auth[$forum][$auth_option_id]))					{						$sql_ary['insert'][] = "$ug_id, $forum, $auth_option_id, $setting";					}					else if ($cur_auth[$forum][$auth_option_id] != $setting)					{						$sql_ary['update'][] = "UPDATE " . $table . "							SET auth_setting = $setting							WHERE $id_field = $ug_id								AND forum_id = $forum								AND auth_option_id = $auth_option_id";					}			}		}	}	unset($cur_auth);	$sql = '';	foreach ($sql_ary as $sql_type => $sql_subary)	{		switch ($sql_type)		{			case 'insert':				switch ($db->sql_layer)				{					case 'mysql':					case 'mysql4':						$sql = 'VALUES ' . implode(', ', preg_replace('#^(.*?)$#', '(\1)', $sql_subary));					break;					case 'mssql':					case 'sqlite':					case 'mssqlnative':						$sql = implode(' UNION ALL ', preg_replace('#^(.*?)$#', 'SELECT \1', $sql_subary));					break;					default:						foreach ($sql_subary as $sql)						{							$sql = "INSERT INTO $table ($id_field, forum_id, auth_option_id, auth_setting) VALUES ($sql)";							$db->sql_query($sql);							$sql = '';						}				}				if ($sql != '')				{					$sql = "INSERT INTO $table ($id_field, forum_id, auth_option_id, auth_setting) $sql";					$db->sql_query($sql);				}			break;			case 'update':			case 'delete':				foreach ($sql_subary as $sql)				{					$db->sql_query($sql);					$sql = '';				}			break;		}		unset($sql_ary[$sql_type]);	}	unset($sql_ary);}/*** Update the count of unread private messages for all users*/function update_unread_count(){	global $db;	$sql = 'SELECT user_id, COUNT(msg_id) as num_messages		FROM ' . PRIVMSGS_TO_TABLE . '		WHERE pm_unread = 1			AND folder_id <> ' . PRIVMSGS_OUTBOX . '		GROUP BY user_id';	$result = $db->sql_query($sql);	while ($row = $db->sql_fetchrow($result))	{		$db->sql_query('UPDATE ' . USERS_TABLE . ' SET user_unread_privmsg = ' . $row['num_messages'] . '			WHERE user_id = ' . $row['user_id']);	}	$db->sql_freeresult($result);}/*** Add any of the pre-defined "special" groups which are missing from the database*/function add_default_groups(){	global $db;	$default_groups = array(		'GUESTS'			=> array('', 0, 0),		'REGISTERED'		=> array('', 0, 0),		'REGISTERED_COPPA'	=> array('', 0, 0),		'GLOBAL_MODERATORS'	=> array('00AA00', 1, 0),		'ADMINISTRATORS'	=> array('AA0000', 1, 1),		'BOTS'				=> array('9E8DA7', 0, 0),		'NEWLY_REGISTERED'		=> array('', 0, 0),	);	$sql = 'SELECT *		FROM ' . GROUPS_TABLE . '		WHERE ' . $db->sql_in_set('group_name', array_keys($default_groups));	$result = $db->sql_query($sql);	while ($row = $db->sql_fetchrow($result))	{		unset($default_groups[strtoupper($row['group_name'])]);	}	$db->sql_freeresult($result);	$sql_ary = array();	foreach ($default_groups as $name => $data)	{		$sql_ary[] = array(			'group_name'			=> (string) $name,			'group_desc'			=> '',			'group_desc_uid'		=> '',			'group_desc_bitfield'	=> '',			'group_type'			=> GROUP_SPECIAL,			'group_colour'			=> (string) $data[0],			'group_legend'			=> (int) $data[1],			'group_founder_manage'	=> (int) $data[2]		);	}	if (sizeof($sql_ary))	{		$db->sql_multi_insert(GROUPS_TABLE, $sql_ary);	}}/*** Sync post count. We might need to do this in batches.*/function sync_post_count($offset, $limit){	global $db;	$sql = 'SELECT COUNT(post_id) AS num_posts, poster_id			FROM ' . POSTS_TABLE . '			WHERE post_postcount = 1				AND post_approved = 1			GROUP BY poster_id			ORDER BY poster_id';	$result = $db->sql_query_limit($sql, $limit, $offset);	while ($row = $db->sql_fetchrow($result))	{		$db->sql_query('UPDATE ' . USERS_TABLE . " SET user_posts = {$row['num_posts']} WHERE user_id = {$row['poster_id']}");	}	$db->sql_freeresult($result);}/*** Add the search bots into the database* This code should be used in execute_last if the source database did not have bots* If you are converting bots this function should not be called* @todo We might want to look at sharing the bot list between the install code and this code for consistancy*/function add_bots(){	global $db, $convert, $user, $config, $phpbb_root_path, $phpEx;	$db->sql_query($convert->truncate_statement . BOTS_TABLE);	$sql = 'SELECT group_id FROM ' . GROUPS_TABLE . " WHERE group_name = 'BOTS'";	$result = $db->sql_query($sql);	$group_id = (int) $db->sql_fetchfield('group_id', false, $result);	$db->sql_freeresult($result);	if (!$group_id)	{		add_default_groups();		$sql = 'SELECT group_id FROM ' . GROUPS_TABLE . " WHERE group_name = 'BOTS'";		$result = $db->sql_query($sql);		$group_id = (int) $db->sql_fetchfield('group_id', false, $result);		$db->sql_freeresult($result);		if (!$group_id)		{			global $install;			$install->error($user->lang['CONV_ERROR_INCONSISTENT_GROUPS'], __LINE__, __FILE__);		}	}	$bots = array(		'AdsBot [Google]'			=> array('AdsBot-Google', ''),		'Alexa [Bot]'				=> array('ia_archiver', ''),		'Alta Vista [Bot]'			=> array('Scooter/', ''),		'Ask Jeeves [Bot]'			=> array('Ask Jeeves', ''),		'Baidu [Spider]'			=> array('Baiduspider+(', ''),		'Bing [Bot]'				=> array('bingbot/', ''),		'Exabot [Bot]'				=> array('Exabot/', ''),		'FAST Enterprise [Crawler]'	=> array('FAST Enterprise Crawler', ''),		'FAST WebCrawler [Crawler]'	=> array('FAST-WebCrawler/', ''),		'Francis [Bot]'				=> array('http://www.neomo.de/', ''),		'Gigabot [Bot]'				=> array('Gigabot/', ''),		'Google Adsense [Bot]'		=> array('Mediapartners-Google', ''),		'Google Desktop'			=> array('Google Desktop', ''),		'Google Feedfetcher'		=> array('Feedfetcher-Google', ''),		'Google [Bot]'				=> array('Googlebot', ''),		'Heise IT-Markt [Crawler]'	=> array('heise-IT-Markt-Crawler', ''),		'Heritrix [Crawler]'		=> array('heritrix/1.', ''),		'IBM Research [Bot]'		=> array('ibm.com/cs/crawler', ''),		'ICCrawler - ICjobs'		=> array('ICCrawler - ICjobs', ''),		'ichiro [Crawler]'			=> array('ichiro/2', ''),		'Majestic-12 [Bot]'			=> array('MJ12bot/', ''),		'Metager [Bot]'				=> array('MetagerBot/', ''),		'MSN NewsBlogs'				=> array('msnbot-NewsBlogs/', ''),		'MSN [Bot]'					=> array('msnbot/', ''),		'MSNbot Media'				=> array('msnbot-media/', ''),		'NG-Search [Bot]'			=> array('NG-Search/', ''),		'Nutch [Bot]'				=> array('http://lucene.apache.org/nutch/', ''),		'Nutch/CVS [Bot]'			=> array('NutchCVS/', ''),		'OmniExplorer [Bot]'		=> array('OmniExplorer_Bot/', ''),		'Online link [Validator]'	=> array('online link validator', ''),		'psbot [Picsearch]'			=> array('psbot/0', ''),		'Seekport [Bot]'			=> array('Seekbot/', ''),		'Sensis [Crawler]'			=> array('Sensis Web Crawler', ''),		'SEO Crawler'				=> array('SEO search Crawler/', ''),		'Seoma [Crawler]'			=> array('Seoma [SEO Crawler]', ''),		'SEOSearch [Crawler]'		=> array('SEOsearch/', ''),		'Snappy [Bot]'				=> array('Snappy/1.1 ( http://www.urltrends.com/ )', ''),		'Steeler [Crawler]'			=> array('http://www.tkl.iis.u-tokyo.ac.jp/~crawler/', ''),		'Synoo [Bot]'				=> array('SynooBot/', ''),		'Telekom [Bot]'				=> array('crawleradmin.t-info@telekom.de', ''),		'TurnitinBot [Bot]'			=> array('TurnitinBot/', ''),		'Voyager [Bot]'				=> array('voyager/1.0', ''),		'W3 [Sitesearch]'			=> array('W3 SiteSearch Crawler', ''),		'W3C [Linkcheck]'			=> array('W3C-checklink/', ''),		'W3C [Validator]'			=> array('W3C_*Validator', ''),		'WiseNut [Bot]'				=> array('http://www.WISEnutbot.com', ''),		'YaCy [Bot]'				=> array('yacybot', ''),		'Yahoo MMCrawler [Bot]'		=> array('Yahoo-MMCrawler/', ''),		'Yahoo Slurp [Bot]'			=> array('Yahoo! DE Slurp', ''),		'Yahoo [Bot]'				=> array('Yahoo! Slurp', ''),		'YahooSeeker [Bot]'			=> array('YahooSeeker/', ''),	);	if (!function_exists('user_add'))	{		include($phpbb_root_path . 'includes/functions_user.' . $phpEx);	}	foreach ($bots as $bot_name => $bot_ary)	{		$user_row = array(			'user_type'				=> USER_IGNORE,			'group_id'				=> $group_id,			'username'				=> $bot_name,			'user_regdate'			=> time(),			'user_password'			=> '',			'user_colour'			=> '9E8DA7',			'user_email'			=> '',			'user_lang'				=> $config['default_lang'],			'user_style'			=> 1,			'user_timezone'			=> 0,			'user_allow_massemail'	=> 0,		);		$user_id = user_add($user_row);		if ($user_id)		{			$sql = 'INSERT INTO ' . BOTS_TABLE . ' ' . $db->sql_build_array('INSERT', array(				'bot_active'	=> 1,				'bot_name'		=> $bot_name,				'user_id'		=> $user_id,				'bot_agent'		=> $bot_ary[0],				'bot_ip'		=> $bot_ary[1])			);			$db->sql_query($sql);		}	}}/*** Update any dynamic configuration variables after the conversion is finished* @todo Confirm that this updates all relevant values since it has not necessarily been kept in sync with all changes*/function update_dynamic_config(){	global $db, $config;	// Get latest username	$sql = 'SELECT user_id, username, user_colour		FROM ' . USERS_TABLE . '		WHERE user_type IN (' . USER_NORMAL . ', ' . USER_FOUNDER . ')';	if (!empty($config['increment_user_id']))	{		$sql .= ' AND user_id <> ' . $config['increment_user_id'];	}	$sql .= ' ORDER BY user_id DESC';	$result = $db->sql_query_limit($sql, 1);	$row = $db->sql_fetchrow($result);	$db->sql_freeresult($result);	if ($row)	{		set_config('newest_user_id', $row['user_id'], true);		set_config('newest_username', $row['username'], true);		set_config('newest_user_colour', $row['user_colour'], true);	}//	Also do not reset record online user/date. There will be old data or the fresh data from the schema.//	set_config('record_online_users', 1, true);//	set_config('record_online_date', time(), true);	$sql = 'SELECT COUNT(post_id) AS stat		FROM ' . POSTS_TABLE . '		WHERE post_approved = 1';	$result = $db->sql_query($sql);	$row = $db->sql_fetchrow($result);	$db->sql_freeresult($result);	set_config('num_posts', (int) $row['stat'], true);	$sql = 'SELECT COUNT(topic_id) AS stat		FROM ' . TOPICS_TABLE . '		WHERE topic_approved = 1';	$result = $db->sql_query($sql);	$row = $db->sql_fetchrow($result);	$db->sql_freeresult($result);	set_config('num_topics', (int) $row['stat'], true);	$sql = 'SELECT COUNT(user_id) AS stat		FROM ' . USERS_TABLE . '		WHERE user_type IN (' . USER_NORMAL . ',' . USER_FOUNDER . ')';	$result = $db->sql_query($sql);	$row = $db->sql_fetchrow($result);	$db->sql_freeresult($result);	set_config('num_users', (int) $row['stat'], true);	$sql = 'SELECT COUNT(attach_id) as stat		FROM ' . ATTACHMENTS_TABLE . '		WHERE is_orphan = 0';	$result = $db->sql_query($sql);	set_config('num_files', (int) $db->sql_fetchfield('stat'), true);	$db->sql_freeresult($result);	$sql = 'SELECT SUM(filesize) as stat		FROM ' . ATTACHMENTS_TABLE . '		WHERE is_orphan = 0';	$result = $db->sql_query($sql);	set_config('upload_dir_size', (float) $db->sql_fetchfield('stat'), true);	$db->sql_freeresult($result);	/**	* We do not resync users post counts - this can be done by the admin after conversion if wanted.	$sql = 'SELECT COUNT(post_id) AS num_posts, poster_id		FROM ' . POSTS_TABLE . '		WHERE post_postcount = 1		GROUP BY poster_id';	$result = $db->sql_query($sql);	while ($row = $db->sql_fetchrow($result))	{		$db->sql_query('UPDATE ' . USERS_TABLE . " SET user_posts = {$row['num_posts']} WHERE user_id = {$row['poster_id']}");	}	$db->sql_freeresult($result);	*/}/*** Updates topics_posted entries*/function update_topics_posted(){	global $db, $config;	switch ($db->sql_layer)	{		case 'sqlite':		case 'firebird':			$db->sql_query('DELETE FROM ' . TOPICS_POSTED_TABLE);		break;		default:			$db->sql_query('TRUNCATE TABLE ' . TOPICS_POSTED_TABLE);		break;	}	// This can get really nasty... therefore we only do the last six months	$get_from_time = time() - (6 * 4 * 7 * 24 * 60 * 60);	// Select forum ids, do not include categories	$sql = 'SELECT forum_id		FROM ' . FORUMS_TABLE . '		WHERE forum_type <> ' . FORUM_CAT;	$result = $db->sql_query($sql);	$forum_ids = array();	while ($row = $db->sql_fetchrow($result))	{		$forum_ids[] = $row['forum_id'];	}	$db->sql_freeresult($result);	// Any global announcements? ;)	$forum_ids[] = 0;	// Now go through the forums and get us some topics...	foreach ($forum_ids as $forum_id)	{		$sql = 'SELECT p.poster_id, p.topic_id			FROM ' . POSTS_TABLE . ' p, ' . TOPICS_TABLE . ' t			WHERE t.forum_id = ' . $forum_id . '				AND t.topic_moved_id = 0				AND t.topic_last_post_time > ' . $get_from_time . '				AND t.topic_id = p.topic_id				AND p.poster_id <> ' . ANONYMOUS . '			GROUP BY p.poster_id, p.topic_id';		$result = $db->sql_query($sql);		$posted = array();		while ($row = $db->sql_fetchrow($result))		{			$posted[$row['poster_id']][] = $row['topic_id'];		}		$db->sql_freeresult($result);		$sql_ary = array();		foreach ($posted as $user_id => $topic_row)		{			foreach ($topic_row as $topic_id)			{				$sql_ary[] = array(					'user_id'		=> (int) $user_id,					'topic_id'		=> (int) $topic_id,					'topic_posted'	=> 1,				);			}		}		unset($posted);		if (sizeof($sql_ary))		{			$db->sql_multi_insert(TOPICS_POSTED_TABLE, $sql_ary);		}	}}/*** Ensure that all users have a default group specified and update related information such as their colour*/function fix_empty_primary_groups(){	global $db;	// Set group ids for users not already having it	$sql = 'UPDATE ' . USERS_TABLE . ' SET group_id = ' . get_group_id('registered') . '		WHERE group_id = 0 AND user_type = ' . USER_INACTIVE;	$db->sql_query($sql);	$sql = 'UPDATE ' . USERS_TABLE . ' SET group_id = ' . get_group_id('registered') . '		WHERE group_id = 0 AND user_type = ' . USER_NORMAL;	$db->sql_query($sql);	$db->sql_query('UPDATE ' . USERS_TABLE . ' SET group_id = ' . get_group_id('guests') . ' WHERE user_id = ' . ANONYMOUS);	$sql = 'SELECT user_id FROM ' . USER_GROUP_TABLE . ' WHERE group_id = ' . get_group_id('administrators');	$result = $db->sql_query($sql);	$user_ids = array();	while ($row = $db->sql_fetchrow($result))	{		$user_ids[] = $row['user_id'];	}	$db->sql_freeresult($result);	if (sizeof($user_ids))	{		$db->sql_query('UPDATE ' . USERS_TABLE . ' SET group_id = ' . get_group_id('administrators') . '			WHERE group_id = 0 AND ' . $db->sql_in_set('user_id', $user_ids));	}	$sql = 'SELECT user_id FROM ' . USER_GROUP_TABLE . ' WHERE group_id = ' . get_group_id('global_moderators');	$user_ids = array();	while ($row = $db->sql_fetchrow($result))	{		$user_ids[] = $row['user_id'];	}	$db->sql_freeresult($result);	if (sizeof($user_ids))	{		$db->sql_query('UPDATE ' . USERS_TABLE . ' SET group_id = ' . get_group_id('global_moderators') . '			WHERE group_id = 0 AND ' . $db->sql_in_set('user_id', $user_ids));	}	// Set user colour	$sql = 'SELECT group_id, group_colour FROM ' . GROUPS_TABLE . "		WHERE group_colour <> ''";	$result = $db->sql_query($sql);	while ($row = $db->sql_fetchrow($result))	{		$db->sql_query('UPDATE ' . USERS_TABLE . " SET user_colour = '{$row['group_colour']}' WHERE group_id = {$row['group_id']}");	}	$db->sql_freeresult($result);}/*** Cleanly remove invalid user entries after converting the users table...*/function remove_invalid_users(){	global $convert, $db, $phpEx, $phpbb_root_path;	// username_clean is UNIQUE	$sql = 'SELECT user_id		FROM ' . USERS_TABLE . "		WHERE username_clean = ''";	$result = $db->sql_query($sql);	$row = $db->sql_fetchrow($result);	$db->sql_freeresult($result);	if ($row)	{		if (!function_exists('user_delete'))		{			include($phpbb_root_path . 'includes/functions_user.' . $phpEx);		}		user_delete('remove', $row['user_id']);	}}function convert_bbcode($message, $convert_size = true, $extended_bbcodes = false){	static $orig, $repl, $origx, $replx, $str_from, $str_to;	if (empty($orig))	{		$orig = $repl = array();		$orig[] = '#\[(php|sql)\](.*?)\[/(php|sql)\]#is';		$repl[] = '[code]\2[/code]';		$orig[] = '#\[font=[^\]]+\](.*?)\[/font\]#is';		$repl[] = '\1';		$orig[] = '#\[align=[a-z]+\](.*?)\[/align\]#is';		$repl[] = '\1';		$orig[] = '#\[/list=.*?\]#is';		$repl[] = '[/list]';		$origx = array(			'#\[glow[^\]]+\](.*?)\[/glow\]#is',			'#\[shadow[^\]]+\](.*?)\[/shadow\]#is',			'#\[flash[^\]]+\](.*?)\[/flash\]#is'		);		$replx = array(			'\1',			'\1',			'[url=\1]Flash[/url]'		);		$str_from = array(			'[ftp]',	'[/ftp]',			'[ftp=',	'[/ftp]',			'[pre]',	'[/pre]',			'[table]',	'[/table]',			'[td]',		'[/td]',			'[tr]',		'[/tr]',			'[s]',		'[/s]',			'[left]',	'[/left]',			'[right]',	'[/right]',			'[center]',	'[/center]',			'[sub]',	'[/sub]',			'[sup]',	'[/sup]',			'[tt]',		'[/tt]',			'[move]',	'[/move]',			'[hr]'		);		$str_to = array(			'[url]',	'[/url]',			'[url=',	'[/url]',			'[code]',	'[/code]',			"\n",		'',			'',			'',			"\n",		'',			'',			'',			'',			'',			'',			'',			'',			'',			'',			'',			'',			'',			'',			'',			'',			'',			"\n\n"		);		for ($i = 0; $i < sizeof($str_from); ++$i)		{			$origx[] = '#\\' . str_replace(']', '\\]', $str_from[$i]) . '#is';			$replx[] = $str_to[$i];		}	}	if (preg_match_all('#\[email=([^\]]+)\](.*?)\[/email\]#i', $message, $m))	{		for ($i = 0; $i < sizeof($m[1]); ++$i)		{			if ($m[1][$i] == $m[2][$i])			{				$message = str_replace($m[0][$i], '[email]' . $m[1][$i] . '[/email]', $message);			}			else			{				$message = str_replace($m[0][$i], $m[2][$i] . ' ([email]' . $m[1][$i] . '[/email])', $message);			}		}	}	if ($convert_size && preg_match('#\[size=[0-9]+\].*?\[/size\]#i', $message))	{		$size = array(9, 9, 12, 15, 18, 24, 29, 29, 29, 29);		$message = preg_replace('#\[size=([0-9]+)\](.*?)\[/size\]#i', '[size=\1]\2[/size]', $message);		$message = preg_replace('#\[size=[0-9]{2,}\](.*?)\[/size\]#i', '[size=29]\1[/size]', $message);		for ($i = sizeof($size); $i; )		{			$i--;			$message = str_replace('[size=' . $i . ']', '[size=' . $size[$i] . ']', $message);		}	}	if ($extended_bbcodes)	{		$message = preg_replace($origx, $replx, $message);	}	$message = preg_replace($orig, $repl, $message);	return $message;}function copy_file($src, $trg, $overwrite = false, $die_on_failure = true, $source_relative_path = true){	global $convert, $phpbb_root_path, $config, $user, $db;	if (substr($trg, -1) == '/')	{		$trg .= utf8_basename($src);	}	$src_path = relative_base($src, $source_relative_path, __LINE__, __FILE__);	$trg_path = $trg;	if (!$overwrite && @file_exists($trg_path))	{		return true;	}	if (!@file_exists($src_path))	{		return;	}	$path = $phpbb_root_path;	$parts = explode('/', $trg);	unset($parts[sizeof($parts) - 1]);	for ($i = 0; $i < sizeof($parts); ++$i)	{		$path .= $parts[$i] . '/';		if (!is_dir($path))		{			@mkdir($path, 0777);		}	}	if (!phpbb_is_writable($path))	{		@chmod($path, 0777);	}	if (!@copy($src_path, $phpbb_root_path . $trg_path))	{		$convert->p_master->error(sprintf($user->lang['COULD_NOT_COPY'], $src_path, $phpbb_root_path . $trg_path), __LINE__, __FILE__, !$die_on_failure);		return;	}	if ($perm = @fileperms($src_path))	{		@chmod($phpbb_root_path . $trg_path, $perm);	}	return true;}function copy_dir($src, $trg, $copy_subdirs = true, $overwrite = false, $die_on_failure = true, $source_relative_path = true){	global $convert, $phpbb_root_path, $config, $user, $db;	$dirlist = $filelist = $bad_dirs = array();	$src = path($src, $source_relative_path);	$trg = path($trg);	$src_path = relative_base($src, $source_relative_path, __LINE__, __FILE__);	$trg_path = $phpbb_root_path . $trg;	if (!is_dir($trg_path))	{		@mkdir($trg_path, 0777);		@chmod($trg_path, 0777);	}	if (!phpbb_is_writable($trg_path))	{		$bad_dirs[] = path($config['script_path']) . $trg;	}	if ($handle = @opendir($src_path))	{		while ($entry = readdir($handle))		{			if ($entry[0] == '.' || $entry == 'CVS' || $entry == 'index.htm')			{				continue;			}			if (is_dir($src_path . $entry))			{				$dirlist[] = $entry;			}			else			{				$filelist[] = $entry;			}		}		closedir($handle);	}	else if ($dir = @dir($src_path))	{		while ($entry = $dir->read())		{			if ($entry[0] == '.' || $entry == 'CVS' || $entry == 'index.htm')			{				continue;			}			if (is_dir($src_path . $entry))			{				$dirlist[] = $entry;			}			else			{				$filelist[] = $entry;			}		}		$dir->close();	}	else	{		$convert->p_master->error(sprintf($user->lang['CONV_ERROR_COULD_NOT_READ'], relative_base($src, $source_relative_path)), __LINE__, __FILE__);	}	if ($copy_subdirs)	{		for ($i = 0; $i < sizeof($dirlist); ++$i)		{			$dir = $dirlist[$i];			if ($dir == 'CVS')			{				continue;			}			if (!is_dir($trg_path . $dir))			{				@mkdir($trg_path . $dir, 0777);				@chmod($trg_path . $dir, 0777);			}			if (!phpbb_is_writable($trg_path . $dir))			{				$bad_dirs[] = $trg . $dir;				$bad_dirs[] = $trg_path . $dir;			}			if (!sizeof($bad_dirs))			{				copy_dir($src . $dir, $trg . $dir, true, $overwrite, $die_on_failure, $source_relative_path);			}		}	}	if (sizeof($bad_dirs))	{		$str = (sizeof($bad_dirs) == 1) ? $user->lang['MAKE_FOLDER_WRITABLE'] : $user->lang['MAKE_FOLDERS_WRITABLE'];		sort($bad_dirs);		$convert->p_master->error(sprintf($str, implode('<br />', $bad_dirs)), __LINE__, __FILE__);	}	for ($i = 0; $i < sizeof($filelist); ++$i)	{		copy_file($src . $filelist[$i], $trg . $filelist[$i], $overwrite, $die_on_failure, $source_relative_path);	}}function relative_base($path, $is_relative = true, $line = false, $file = false){	global $convert, $phpbb_root_path, $config, $user, $db;	if (!$is_relative)	{		return $path;	}	if (empty($convert->options['forum_path']) && $is_relative)	{		$line = $line ? $line : __LINE__;		$file = $file ? $file : __FILE__;		$convert->p_master->error($user->lang['CONV_ERROR_NO_FORUM_PATH'], $line, $file);	}	return $convert->options['forum_path'] . '/' . $path;}function get_smiley_display(){	static $smiley_count = 0;	$smiley_count++;	return ($smiley_count < 50) ? 1 : 0;}function fill_dateformat($user_dateformat){	global $config;	return ((empty($user_dateformat)) ? $config['default_dateformat'] : $user_dateformat);}?>
<?php/**** @package mcp* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @package module_install*/class mcp_notes_info{	function module()	{		return array(			'filename'	=> 'mcp_notes',			'title'		=> 'MCP_NOTES',			'version'	=> '1.0.0',			'modes'		=> array(				'front'				=> array('title' => 'MCP_NOTES_FRONT', 'auth' => '', 'cat' => array('MCP_NOTES')),				'user_notes'		=> array('title' => 'MCP_NOTES_USER', 'auth' => '', 'cat' => array('MCP_NOTES')),			),		);	}	function install()	{	}	function uninstall()	{	}}?>
<?php/**** groups [English]** @package language* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** DO NOT CHANGE*/if (!defined('IN_PHPBB')){	exit;}if (empty($lang) || !is_array($lang)){	$lang = array();}// DEVELOPERS PLEASE NOTE//// All language files should use UTF-8 as their encoding and the files must not contain a BOM.//// Placeholders can now contain order information, e.g. instead of// 'Page %s of %s' you can (and should) write 'Page %1$s of %2$s', this allows// translators to re-order the output of data while ensuring it remains correct//// You do not need this where single placeholders are used, e.g. 'Message %d' is fine// equally where a string contains only two placeholders which are used to wrap text// in a url you again do not need to specify an order e.g., 'Click %sHERE%s' is fine$lang = array_merge($lang, array(	'ALREADY_DEFAULT_GROUP'		=> 'The selected group is already your default group.',	'ALREADY_IN_GROUP'			=> 'You are already a member of the selected group.',	'ALREADY_IN_GROUP_PENDING'	=> 'You already requested joining the selected group.',	'CANNOT_JOIN_GROUP'			=> 'You are not able to join this group. You are only able to join open and freely open groups.',	'CANNOT_RESIGN_GROUP'		=> 'You are not able to resign from this group. You are only able to resign from open and freely open groups.',	'CHANGED_DEFAULT_GROUP'		=> 'Successfully changed default group.',	'GROUP_AVATAR'						=> 'Group avatar',	'GROUP_CHANGE_DEFAULT'				=> 'Are you sure you want to change your default membership to the group %s?',	'GROUP_CLOSED'						=> 'Closed',	'GROUP_DESC'						=> 'Group description',	'GROUP_HIDDEN'						=> 'Hidden',	'GROUP_INFORMATION'					=> 'Usergroup information',	'GROUP_IS_CLOSED'					=> 'This is a closed group, new members can only join upon invitation of a group leader.',	'GROUP_IS_FREE'						=> 'This is a freely open group, all new members are welcome.',	'GROUP_IS_HIDDEN'					=> 'This is a hidden group, only members of this group can view its membership.',	'GROUP_IS_OPEN'						=> 'This is an open group, members can apply to join.',	'GROUP_IS_SPECIAL'					=> 'This is a special group, special groups are managed by the board administrators.',	'GROUP_JOIN'						=> 'Join group',	'GROUP_JOIN_CONFIRM'				=> 'Are you sure you want to join the selected group?',	'GROUP_JOIN_PENDING'				=> 'Request to join group',	'GROUP_JOIN_PENDING_CONFIRM'		=> 'Are you sure you want to request joining the selected group?',	'GROUP_JOINED'						=> 'Successfully joined selected group.',	'GROUP_JOINED_PENDING'				=> 'Successfully requested group membership. Please wait for a group leader to approve your membership.',	'GROUP_LIST'						=> 'Manage users',	'GROUP_MEMBERS'						=> 'Group members',	'GROUP_NAME'						=> 'Group name',	'GROUP_OPEN'						=> 'Open',	'GROUP_RANK'						=> 'Group rank',	'GROUP_RESIGN_MEMBERSHIP'			=> 'Resign group membership',	'GROUP_RESIGN_MEMBERSHIP_CONFIRM'	=> 'Are you sure you want to resign your membership from the selected group?',	'GROUP_RESIGN_PENDING'				=> 'Resign a pending group membership',	'GROUP_RESIGN_PENDING_CONFIRM'		=> 'Are you sure you want to resign your pending membership from the selected group?',	'GROUP_RESIGNED_MEMBERSHIP'			=> 'You were successfully removed from the selected group.',	'GROUP_RESIGNED_PENDING'			=> 'Your pending membership was successfully removed from the selected group.',	'GROUP_TYPE'						=> 'Group type',	'GROUP_UNDISCLOSED'					=> 'Hidden group',	'FORUM_UNDISCLOSED'					=> 'Moderating hidden forum(s)',	'LOGIN_EXPLAIN_GROUP'	=> 'You need to login to view group details.',	'NO_LEADERS'					=> 'You are not a leader of any group.',	'NOT_LEADER_OF_GROUP'			=> 'The requested operation cannot be taken because you are not a leader of the selected group.',	'NOT_MEMBER_OF_GROUP'			=> 'The requested operation cannot be taken because you are not a member of the selected group or your membership has not been approved yet.',	'NOT_RESIGN_FROM_DEFAULT_GROUP'	=> 'You are not allowed to resign from your default group.',		'PRIMARY_GROUP'		=> 'Primary group',	'REMOVE_SELECTED'		=> 'Remove selected',	'USER_GROUP_CHANGE'			=> 'From %1$s group to %2$s',	'USER_GROUP_DEMOTE'			=> 'Demote leadership',	'USER_GROUP_DEMOTE_CONFIRM'	=> 'Are you sure you want to demote as group leader from the selected group?',	'USER_GROUP_DEMOTED'		=> 'Successfully demoted your leadership.',));?>
<?php/**** @package phpBB3* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @ignore*/if (!defined('IN_PHPBB')){	exit;}/*** Class handling all types of 'plugins' (a future term)* @package phpBB3*/class p_master{	var $p_id;	var $p_class;	var $p_name;	var $p_mode;	var $p_parent;	var $include_path = false;	var $active_module = false;	var $active_module_row_id = false;	var $acl_forum_id = false;	var $module_ary = array();	/**	* Constuctor	* Set module include path	*/	function p_master($include_path = false)	{		global $phpbb_root_path;		$this->include_path = ($include_path !== false) ? $include_path : $phpbb_root_path . 'includes/';		// Make sure the path ends with /		if (substr($this->include_path, -1) !== '/')		{			$this->include_path .= '/';		}	}	/**	* Set custom include path for modules	* Schema for inclusion is include_path . modulebase	*	* @param string $include_path include path to be used.	* @access public	*/	function set_custom_include_path($include_path)	{		$this->include_path = $include_path;		// Make sure the path ends with /		if (substr($this->include_path, -1) !== '/')		{			$this->include_path .= '/';		}	}	/**	* List modules	*	* This creates a list, stored in $this->module_ary of all available	* modules for the given class (ucp, mcp and acp). Additionally	* $this->module_y_ary is created with indentation information for	* displaying the module list appropriately. Only modules for which	* the user has access rights are included in these lists.	*/	function list_modules($p_class)	{		global $auth, $db, $user, $cache;		global $config, $phpbb_root_path, $phpEx;		// Sanitise for future path use, it's escaped as appropriate for queries		$this->p_class = str_replace(array('.', '/', '\\'), '', basename($p_class));		// Get cached modules		if (($this->module_cache = $cache->get('_modules_' . $this->p_class)) === false)		{			// Get modules			$sql = 'SELECT *				FROM ' . MODULES_TABLE . "				WHERE module_class = '" . $db->sql_escape($this->p_class) . "'				ORDER BY left_id ASC";			$result = $db->sql_query($sql);			$rows = array();			while ($row = $db->sql_fetchrow($result))			{				$rows[$row['module_id']] = $row;			}			$db->sql_freeresult($result);			$this->module_cache = array();			foreach ($rows as $module_id => $row)			{				$this->module_cache['modules'][] = $row;				$this->module_cache['parents'][$row['module_id']] = $this->get_parents($row['parent_id'], $row['left_id'], $row['right_id'], $rows);			}			unset($rows);			$cache->put('_modules_' . $this->p_class, $this->module_cache);		}		if (empty($this->module_cache))		{			$this->module_cache = array('modules' => array(), 'parents' => array());		}		// We "could" build a true tree with this function - maybe mod authors want to use this...		// Functions for traversing and manipulating the tree are not available though		// We might re-structure the module system to use true trees in 3.2.x...		// $tree = $this->build_tree($this->module_cache['modules'], $this->module_cache['parents']);		// Clean up module cache array to only let survive modules the user can access		$right_id = false;		foreach ($this->module_cache['modules'] as $key => $row)		{			// Not allowed to view module?			if (!$this->module_auth($row['module_auth']))			{				unset($this->module_cache['modules'][$key]);				continue;			}			// Category with no members, ignore			if (!$row['module_basename'] && ($row['left_id'] + 1 == $row['right_id']))			{				unset($this->module_cache['modules'][$key]);				continue;			}			// Skip branch			if ($right_id !== false)			{				if ($row['left_id'] < $right_id)				{					unset($this->module_cache['modules'][$key]);					continue;				}				$right_id = false;			}			// Not enabled?			if (!$row['module_enabled'])			{				// If category is disabled then disable every child too				unset($this->module_cache['modules'][$key]);				$right_id = $row['right_id'];				continue;			}		}		// Re-index (this is needed, else we are not able to array_slice later)		$this->module_cache['modules'] = array_merge($this->module_cache['modules']);		// Include MOD _info files for populating language entries within the menus		$this->add_mod_info($this->p_class);		// Now build the module array, but exclude completely empty categories...		$right_id = false;		$names = array();		foreach ($this->module_cache['modules'] as $key => $row)		{			// Skip branch			if ($right_id !== false)			{				if ($row['left_id'] < $right_id)				{					continue;				}				$right_id = false;			}			// Category with no members on their way down (we have to check every level)			if (!$row['module_basename'])			{				$empty_category = true;				// We go through the branch and look for an activated module				foreach (array_slice($this->module_cache['modules'], $key + 1) as $temp_row)				{					if ($temp_row['left_id'] > $row['left_id'] && $temp_row['left_id'] < $row['right_id'])					{						// Module there						if ($temp_row['module_basename'] && $temp_row['module_enabled'])						{							$empty_category = false;							break;						}						continue;					}					break;				}				// Skip the branch				if ($empty_category)				{					$right_id = $row['right_id'];					continue;				}			}			$depth = sizeof($this->module_cache['parents'][$row['module_id']]);			// We need to prefix the functions to not create a naming conflict			// Function for building 'url_extra'			$url_func = '_module_' . $row['module_basename'] . '_url';			// Function for building the language name			$lang_func = '_module_' . $row['module_basename'] . '_lang';			// Custom function for calling parameters on module init (for example assigning template variables)			$custom_func = '_module_' . $row['module_basename'];			$names[$row['module_basename'] . '_' . $row['module_mode']][] = true;			$module_row = array(				'depth'		=> $depth,				'id'		=> (int) $row['module_id'],				'parent'	=> (int) $row['parent_id'],				'cat'		=> ($row['right_id'] > $row['left_id'] + 1) ? true : false,				'is_duplicate'	=> ($row['module_basename'] && sizeof($names[$row['module_basename'] . '_' . $row['module_mode']]) > 1) ? true : false,				'name'		=> (string) $row['module_basename'],				'mode'		=> (string) $row['module_mode'],				'display'	=> (int) $row['module_display'],				'url_extra'	=> (function_exists($url_func)) ? $url_func($row['module_mode'], $row) : '',				'lang'		=> ($row['module_basename'] && function_exists($lang_func)) ? $lang_func($row['module_mode'], $row['module_langname']) : ((!empty($user->lang[$row['module_langname']])) ? $user->lang[$row['module_langname']] : $row['module_langname']),				'langname'	=> $row['module_langname'],				'left'		=> $row['left_id'],				'right'		=> $row['right_id'],			);			if (function_exists($custom_func))			{				$custom_func($row['module_mode'], $module_row);			}			$this->module_ary[] = $module_row;		}		unset($this->module_cache['modules'], $names);	}	/**	* Check if a certain main module is accessible/loaded	* By giving the module mode you are able to additionally check for only one mode within the main module	*	* @param string $module_basename The module base name, for example logs, reports, main (for the mcp).	* @param mixed $module_mode The module mode to check. If provided the mode will be checked in addition for presence.	*	* @return bool Returns true if module is loaded and accessible, else returns false	*/	function loaded($module_basename, $module_mode = false)	{		if (empty($this->loaded_cache))		{			$this->loaded_cache = array();			foreach ($this->module_ary as $row)			{				if (!$row['name'])				{					continue;				}				if (!isset($this->loaded_cache[$row['name']]))				{					$this->loaded_cache[$row['name']] = array();				}				if (!$row['mode'])				{					continue;				}				$this->loaded_cache[$row['name']][$row['mode']] = true;			}		}		if ($module_mode === false)		{			return (isset($this->loaded_cache[$module_basename])) ? true : false;		}		return (!empty($this->loaded_cache[$module_basename][$module_mode])) ? true : false;	}	/**	* Check module authorisation	*/	function module_auth($module_auth, $forum_id = false)	{		global $auth, $config;		$module_auth = trim($module_auth);		// Generally allowed to access module if module_auth is empty		if (!$module_auth)		{			return true;		}		// With the code below we make sure only those elements get eval'd we really want to be checked		preg_match_all('/(?:			"[^"\\\\]*(?:\\\\.[^"\\\\]*)*"         |			\'[^\'\\\\]*(?:\\\\.[^\'\\\\]*)*\'     |			[(),]                                  |			[^\s(),]+)/x', $module_auth, $match);		$tokens = $match[0];		for ($i = 0, $size = sizeof($tokens); $i < $size; $i++)		{			$token = &$tokens[$i];			switch ($token)			{				case ')':				case '(':				case '&&':				case '||':				case ',':				break;				default:					if (!preg_match('#(?:acl_([a-z0-9_]+)(,\$id)?)|(?:\$id)|(?:aclf_([a-z0-9_]+))|(?:cfg_([a-z0-9_]+))|(?:request_([a-zA-Z0-9_]+))#', $token))					{						$token = '';					}				break;			}		}		$module_auth = implode(' ', $tokens);		// Make sure $id seperation is working fine		$module_auth = str_replace(' , ', ',', $module_auth);		$forum_id = ($forum_id === false) ? $this->acl_forum_id : $forum_id;		$is_auth = false;		eval('$is_auth = (int) (' . preg_replace(array('#acl_([a-z0-9_]+)(,\$id)?#', '#\$id#', '#aclf_([a-z0-9_]+)#', '#cfg_([a-z0-9_]+)#', '#request_([a-zA-Z0-9_]+)#'), array('(int) $auth->acl_get(\'\\1\'\\2)', '(int) $forum_id', '(int) $auth->acl_getf_global(\'\\1\')', '(int) $config[\'\\1\']', '!empty($_REQUEST[\'\\1\'])'), $module_auth) . ');');		return $is_auth;	}	/**	* Set active module	*/	function set_active($id = false, $mode = false)	{		$icat = false;		$this->active_module = false;		if (request_var('icat', ''))		{			$icat = $id;			$id = request_var('icat', '');		}		$category = false;		foreach ($this->module_ary as $row_id => $item_ary)		{			// If this is a module and it's selected, active			// If this is a category and the module is the first within it, active			// If this is a module and no mode selected, select first mode			// If no category or module selected, go active for first module in first category			if (				(($item_ary['name'] === $id || $item_ary['id'] === (int) $id) && (($item_ary['mode'] == $mode && !$item_ary['cat']) || ($icat && $item_ary['cat']))) ||				($item_ary['parent'] === $category && !$item_ary['cat'] && !$icat && $item_ary['display']) ||				(($item_ary['name'] === $id || $item_ary['id'] === (int) $id) && !$mode && !$item_ary['cat']) ||				(!$id && !$mode && !$item_ary['cat'] && $item_ary['display'])				)			{				if ($item_ary['cat'])				{					$id = $icat;					$icat = false;					continue;				}				$this->p_id		= $item_ary['id'];				$this->p_parent	= $item_ary['parent'];				$this->p_name	= $item_ary['name'];				$this->p_mode 	= $item_ary['mode'];				$this->p_left	= $item_ary['left'];				$this->p_right	= $item_ary['right'];				$this->module_cache['parents'] = $this->module_cache['parents'][$this->p_id];				$this->active_module = $item_ary['id'];				$this->active_module_row_id = $row_id;				break;			}			else if (($item_ary['cat'] && $item_ary['id'] === (int) $id) || ($item_ary['parent'] === $category && $item_ary['cat']))			{				$category = $item_ary['id'];			}		}	}	/**	* Loads currently active module	*	* This method loads a given module, passing it the relevant id and mode.	*/	function load_active($mode = false, $module_url = false, $execute_module = true)	{		global $phpbb_root_path, $phpbb_admin_path, $phpEx, $user;		$module_path = $this->include_path . $this->p_class;		$icat = request_var('icat', '');		if ($this->active_module === false)		{			trigger_error('Module not accessible', E_USER_ERROR);		}		if (!class_exists("{$this->p_class}_$this->p_name"))		{			if (!file_exists("$module_path/{$this->p_class}_$this->p_name.$phpEx"))			{				trigger_error("Cannot find module $module_path/{$this->p_class}_$this->p_name.$phpEx", E_USER_ERROR);			}			include("$module_path/{$this->p_class}_$this->p_name.$phpEx");			if (!class_exists("{$this->p_class}_$this->p_name"))			{				trigger_error("Module file $module_path/{$this->p_class}_$this->p_name.$phpEx does not contain correct class [{$this->p_class}_$this->p_name]", E_USER_ERROR);			}			if (!empty($mode))			{				$this->p_mode = $mode;			}			// Create a new instance of the desired module ... if it has a			// constructor it will of course be executed			$instance = "{$this->p_class}_$this->p_name";			$this->module = new $instance($this);			// We pre-define the action parameter we are using all over the place			if (defined('IN_ADMIN'))			{				// Is first module automatically enabled a duplicate and the category not passed yet?				if (!$icat && $this->module_ary[$this->active_module_row_id]['is_duplicate'])				{					$icat = $this->module_ary[$this->active_module_row_id]['parent'];				}				// Not being able to overwrite ;)				$this->module->u_action = append_sid("{$phpbb_admin_path}index.$phpEx", "i={$this->p_name}") . (($icat) ? '&amp;icat=' . $icat : '') . "&amp;mode={$this->p_mode}";			}			else			{				// If user specified the module url we will use it...				if ($module_url !== false)				{					$this->module->u_action = $module_url;				}				else				{					$this->module->u_action = $phpbb_root_path . (($user->page['page_dir']) ? $user->page['page_dir'] . '/' : '') . $user->page['page_name'];				}				$this->module->u_action = append_sid($this->module->u_action, "i={$this->p_name}") . (($icat) ? '&amp;icat=' . $icat : '') . "&amp;mode={$this->p_mode}";			}			// Add url_extra parameter to u_action url			if (!empty($this->module_ary) && $this->active_module !== false && $this->module_ary[$this->active_module_row_id]['url_extra'])			{				$this->module->u_action .= $this->module_ary[$this->active_module_row_id]['url_extra'];			}			// Assign the module path for re-usage			$this->module->module_path = $module_path . '/';			// Execute the main method for the new instance, we send the module id and mode as parameters			// Users are able to call the main method after this function to be able to assign additional parameters manually			if ($execute_module)			{				$this->module->main($this->p_name, $this->p_mode);			}			return;		}	}	/**	* Appending url parameter to the currently active module.	*	* This function is called for adding specific url parameters while executing the current module.	* It is doing the same as the _module_{name}_url() function, apart from being able to be called after	* having dynamically parsed specific parameters. This allows more freedom in choosing additional parameters.	* One example can be seen in /includes/mcp/mcp_notes.php - $this->p_master->adjust_url() call.	*	* @param string $url_extra Extra url parameters, e.g.: &amp;u=$user_id	*	*/	function adjust_url($url_extra)	{		if (empty($this->module_ary[$this->active_module_row_id]))		{			return;		}		$row = &$this->module_ary[$this->active_module_row_id];		// We check for the same url_extra in $row['url_extra'] to overcome doubled additions...		if (strpos($row['url_extra'], $url_extra) === false)		{			$row['url_extra'] .= $url_extra;		}	}	/**	* Check if a module is active	*/	function is_active($id, $mode = false)	{		// If we find a name by this id and being enabled we have our active one...		foreach ($this->module_ary as $row_id => $item_ary)		{			if (($item_ary['name'] === $id || $item_ary['id'] === (int) $id) && $item_ary['display'])			{				if ($mode === false || $mode === $item_ary['mode'])				{					return true;				}			}		}		return false;	}	/**	* Get parents	*/	function get_parents($parent_id, $left_id, $right_id, &$all_parents)	{		global $db;		$parents = array();		if ($parent_id > 0)		{			foreach ($all_parents as $module_id => $row)			{				if ($row['left_id'] < $left_id && $row['right_id'] > $right_id)				{					$parents[$module_id] = $row['parent_id'];				}				if ($row['left_id'] > $left_id)				{					break;				}			}		}		return $parents;	}	/**	* Get tree branch	*/	function get_branch($left_id, $right_id, $remaining)	{		$branch = array();		foreach ($remaining as $key => $row)		{			if ($row['left_id'] > $left_id && $row['left_id'] < $right_id)			{				$branch[] = $row;				continue;			}			break;		}		return $branch;	}	/**	* Build true binary tree from given array	* Not in use	*/	function build_tree(&$modules, &$parents)	{		$tree = array();		foreach ($modules as $row)		{			$branch = &$tree;			if ($row['parent_id'])			{				// Go through the tree to find our branch				$parent_tree = $parents[$row['module_id']];				foreach ($parent_tree as $id => $value)				{					if (!isset($branch[$id]) && isset($branch['child']))					{						$branch = &$branch['child'];					}					$branch = &$branch[$id];				}				$branch = &$branch['child'];			}			$branch[$row['module_id']] = $row;			if (!isset($branch[$row['module_id']]['child']))			{				$branch[$row['module_id']]['child'] = array();			}		}		return $tree;	}	/**	* Build navigation structure	*/	function assign_tpl_vars($module_url)	{		global $template;		$current_id = $right_id = false;		// Make sure the module_url has a question mark set, effectively determining the delimiter to use		$delim = (strpos($module_url, '?') === false) ? '?' : '&amp;';		$current_padding = $current_depth = 0;		$linear_offset 	= 'l_block1';		$tabular_offset = 't_block2';		// Generate the list of modules, we'll do this in two ways ...		// 1) In a linear fashion		// 2) In a combined tabbed + linear fashion ... tabs for the categories		//    and a linear list for subcategories/items		foreach ($this->module_ary as $row_id => $item_ary)		{			// Skip hidden modules			if (!$item_ary['display'])			{				continue;			}			// Skip branch			if ($right_id !== false)			{				if ($item_ary['left'] < $right_id)				{					continue;				}				$right_id = false;			}			// Category with no members on their way down (we have to check every level)			if (!$item_ary['name'])			{				$empty_category = true;				// We go through the branch and look for an activated module				foreach (array_slice($this->module_ary, $row_id + 1) as $temp_row)				{					if ($temp_row['left'] > $item_ary['left'] && $temp_row['left'] < $item_ary['right'])					{						// Module there and displayed?						if ($temp_row['name'] && $temp_row['display'])						{							$empty_category = false;							break;						}						continue;					}					break;				}				// Skip the branch				if ($empty_category)				{					$right_id = $item_ary['right'];					continue;				}			}			// Select first id we can get			if (!$current_id && (isset($this->module_cache['parents'][$item_ary['id']]) || $item_ary['id'] == $this->p_id))			{				$current_id = $item_ary['id'];			}			$depth = $item_ary['depth'];			if ($depth > $current_depth)			{				$linear_offset = $linear_offset . '.l_block' . ($depth + 1);				$tabular_offset = ($depth + 1 > 2) ? $tabular_offset . '.t_block' . ($depth + 1) : $tabular_offset;			}			else if ($depth < $current_depth)			{				for ($i = $current_depth - $depth; $i > 0; $i--)				{					$linear_offset = substr($linear_offset, 0, strrpos($linear_offset, '.'));					$tabular_offset = ($i + $depth > 1) ? substr($tabular_offset, 0, strrpos($tabular_offset, '.')) : $tabular_offset;				}			}			$u_title = $module_url . $delim . 'i=' . (($item_ary['cat']) ? $item_ary['id'] : $item_ary['name'] . (($item_ary['is_duplicate']) ? '&amp;icat=' . $current_id : '') . '&amp;mode=' . $item_ary['mode']);			// Was not allowed in categories before - /*!$item_ary['cat'] && */			$u_title .= (isset($item_ary['url_extra'])) ? $item_ary['url_extra'] : '';			// Only output a categories items if it's currently selected			if (!$depth || ($depth && (in_array($item_ary['parent'], array_values($this->module_cache['parents'])) || $item_ary['parent'] == $this->p_parent)))			{				$use_tabular_offset = (!$depth) ? 't_block1' : $tabular_offset;				$tpl_ary = array(					'L_TITLE'		=> $item_ary['lang'],					'S_SELECTED'	=> (isset($this->module_cache['parents'][$item_ary['id']]) || $item_ary['id'] == $this->p_id) ? true : false,					'U_TITLE'		=> $u_title				);				$template->assign_block_vars($use_tabular_offset, array_merge($tpl_ary, array_change_key_case($item_ary, CASE_UPPER)));			}			$tpl_ary = array(				'L_TITLE'		=> $item_ary['lang'],				'S_SELECTED'	=> (isset($this->module_cache['parents'][$item_ary['id']]) || $item_ary['id'] == $this->p_id) ? true : false,				'U_TITLE'		=> $u_title			);			$template->assign_block_vars($linear_offset, array_merge($tpl_ary, array_change_key_case($item_ary, CASE_UPPER)));			$current_depth = $depth;		}	}	/**	* Returns desired template name	*/	function get_tpl_name()	{		return $this->module->tpl_name . '.html';	}	/**	* Returns the desired page title	*/	function get_page_title()	{		global $user;		if (!isset($this->module->page_title))		{			return '';		}		return (isset($user->lang[$this->module->page_title])) ? $user->lang[$this->module->page_title] : $this->module->page_title;	}	/**	* Load module as the current active one without the need for registering it	*/	function load($class, $name, $mode = false)	{		$this->p_class = $class;		$this->p_name = $name;		// Set active module to true instead of using the id		$this->active_module = true;		$this->load_active($mode);	}	/**	* Display module	*/	function display($page_title, $display_online_list = true)	{		global $template, $user;		// Generate the page		if (defined('IN_ADMIN') && isset($user->data['session_admin']) && $user->data['session_admin'])		{			adm_page_header($page_title);		}		else		{			page_header($page_title, $display_online_list);		}		$template->set_filenames(array(			'body' => $this->get_tpl_name())		);		if (defined('IN_ADMIN') && isset($user->data['session_admin']) && $user->data['session_admin'])		{			adm_page_footer();		}		else		{			page_footer();		}	}	/**	* Toggle whether this module will be displayed or not	*/	function set_display($id, $mode = false, $display = true)	{		foreach ($this->module_ary as $row_id => $item_ary)		{			if (($item_ary['name'] === $id || $item_ary['id'] === (int) $id) && (!$mode || $item_ary['mode'] === $mode))			{				$this->module_ary[$row_id]['display'] = (int) $display;			}		}	}	/**	* Add custom MOD info language file	*/	function add_mod_info($module_class)	{		global $user, $phpEx;		if (file_exists($user->lang_path . $user->lang_name . '/mods'))		{			$add_files = array();			$dir = @opendir($user->lang_path . $user->lang_name . '/mods');			if ($dir)			{				while (($entry = readdir($dir)) !== false)				{					if (strpos($entry, 'info_' . strtolower($module_class) . '_') === 0 && substr(strrchr($entry, '.'), 1) == $phpEx)					{						$add_files[] = 'mods/' . substr(basename($entry), 0, -(strlen($phpEx) + 1));					}				}				closedir($dir);			}			if (sizeof($add_files))			{				$user->add_lang($add_files);			}		}	}}?>
<?php/**** @package install* @version $Id$* @copyright (c) 2006 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//***/if (!defined('IN_INSTALL')){	// Someone has tried to access the file direct. This is not a good idea, so exit	exit;}if (!empty($setmodules)){	$module[] = array(		'module_type'		=> 'install',		'module_title'		=> 'CONVERT',		'module_filename'	=> substr(basename(__FILE__), 0, -strlen($phpEx)-1),		'module_order'		=> 20,		'module_subs'		=> '',		'module_stages'		=> array('INTRO', 'SETTINGS', 'IN_PROGRESS', 'FINAL'),		'module_reqs'		=> ''	);}/*** Class holding all convertor-specific details.* @package install*/class convert{	var $options = array();	var $convertor_tag = '';	var $src_dbms = '';	var $src_dbhost = '';	var $src_dbport = '';	var $src_dbuser = '';	var $src_dbpasswd = '';	var $src_dbname = '';	var $src_table_prefix = '';	var $convertor_data = array();	var $tables = array();	var $config_schema = array();	var $convertor = array();	var $src_truncate_statement = 'DELETE FROM ';	var $truncate_statement = 'DELETE FROM ';	var $fulltext_search;	// Batch size, can be adjusted by the conversion file	// For big boards a value of 6000 seems to be optimal	var $batch_size = 2000;	// Number of rows to be inserted at once (extended insert) if supported	// For installations having enough memory a value of 60 may be good.	var $num_wait_rows = 20;	// Mysqls internal recoding engine messing up with our (better) functions? We at least support more encodings than mysql so should use it in favor.	var $mysql_convert = false;	var $p_master;	function convert(&$p_master)	{		$this->p_master = &$p_master;	}}/*** Convert class for conversions* @package install*/class install_convert extends module{	/**	* Variables used while converting, they are accessible from the global variable $convert	*/	function install_convert(&$p_master)	{		$this->p_master = &$p_master;	}	function main($mode, $sub)	{		global $lang, $template, $phpbb_root_path, $phpEx, $cache, $config, $language, $table_prefix;		global $convert;		$this->tpl_name = 'install_convert';		$this->mode = $mode;		$convert = new convert($this->p_master);		switch ($sub)		{			case 'intro':				// Try opening config file				// @todo If phpBB is not installed, we need to do a cut-down installation here				// For now, we redirect to the installation script instead				if (@file_exists($phpbb_root_path . 'config.' . $phpEx))				{					include($phpbb_root_path . 'config.' . $phpEx);				}				if (!defined('PHPBB_INSTALLED'))				{					$template->assign_vars(array(						'S_NOT_INSTALLED'		=> true,						'TITLE'					=> $lang['BOARD_NOT_INSTALLED'],						'BODY'					=> sprintf($lang['BOARD_NOT_INSTALLED_EXPLAIN'], append_sid($phpbb_root_path . 'install/index.' . $phpEx, 'mode=install&amp;language=' . $language)),					));					return;				}				require($phpbb_root_path . 'config.' . $phpEx);				require($phpbb_root_path . 'includes/constants.' . $phpEx);				require($phpbb_root_path . 'includes/db/' . $dbms . '.' . $phpEx);				require($phpbb_root_path . 'includes/functions_convert.' . $phpEx);				$db = new $sql_db();				$db->sql_connect($dbhost, $dbuser, $dbpasswd, $dbname, $dbport, false, true);				unset($dbpasswd);				// We need to fill the config to let internal functions correctly work				$sql = 'SELECT *					FROM ' . CONFIG_TABLE;				$result = $db->sql_query($sql);				$config = array();				while ($row = $db->sql_fetchrow($result))				{					$config[$row['config_name']] = $row['config_value'];				}				$db->sql_freeresult($result);				// Detect if there is already a conversion in progress at this point and offer to resume				// It's quite possible that the user will get disconnected during a large conversion so they need to be able to resume it				$new_conversion = request_var('new_conv', 0);				if ($new_conversion)				{					$config['convert_progress'] = '';					$config['convert_db_server'] = '';					$config['convert_db_user'] = '';					$db->sql_query('DELETE FROM ' . CONFIG_TABLE . "						WHERE config_name = 'convert_progress'							OR config_name = 'convert_db_server'							OR config_name = 'convert_db_user'"					);				}				// Let's see if there is a conversion in the works...				$options = array();				if (!empty($config['convert_progress']) && !empty($config['convert_db_server']) && !empty($config['convert_db_user']) && !empty($config['convert_options']))				{					$options = unserialize($config['convert_progress']);					$options = array_merge($options, unserialize($config['convert_db_server']), unserialize($config['convert_db_user']), unserialize($config['convert_options']));				}				// This information should have already been checked once, but do it again for safety				if (!empty($options) && !empty($options['tag']) &&					isset($options['dbms']) &&					isset($options['dbhost']) &&					isset($options['dbport']) &&					isset($options['dbuser']) &&					isset($options['dbpasswd']) &&					isset($options['dbname']) &&					isset($options['table_prefix']))				{					$this->page_title = $lang['CONTINUE_CONVERT'];					$template->assign_vars(array(						'TITLE'			=> $lang['CONTINUE_CONVERT'],						'BODY'			=> $lang['CONTINUE_CONVERT_BODY'],						'L_NEW'			=> $lang['CONVERT_NEW_CONVERSION'],						'L_CONTINUE'	=> $lang['CONTINUE_OLD_CONVERSION'],						'S_CONTINUE'	=> true,						'U_NEW_ACTION'		=> $this->p_master->module_url . "?mode={$this->mode}&amp;sub=intro&amp;new_conv=1&amp;language=$language",						'U_CONTINUE_ACTION'	=> $this->p_master->module_url . "?mode={$this->mode}&amp;sub=in_progress&amp;tag={$options['tag']}{$options['step']}&amp;language=$language",					));					return;				}				$this->list_convertors($sub);			break;			case 'settings':				$this->get_convert_settings($sub);			break;			case 'in_progress':				$this->convert_data($sub);			break;			case 'final':				$this->page_title = $lang['CONVERT_COMPLETE'];				$template->assign_vars(array(					'TITLE'		=> $lang['CONVERT_COMPLETE'],					'BODY'		=> $lang['CONVERT_COMPLETE_EXPLAIN'],				));				// If we reached this step (conversion completed) we want to purge the cache and log the user out.				// This is for making sure the session get not screwed due to the 3.0.x users table being completely new.				$cache->purge();				require($phpbb_root_path . 'config.' . $phpEx);				require($phpbb_root_path . 'includes/constants.' . $phpEx);				require($phpbb_root_path . 'includes/db/' . $dbms . '.' . $phpEx);				require($phpbb_root_path . 'includes/functions_convert.' . $phpEx);				$db = new $sql_db();				$db->sql_connect($dbhost, $dbuser, $dbpasswd, $dbname, $dbport, false, true);				unset($dbpasswd);				$sql = 'SELECT config_value					FROM ' . CONFIG_TABLE . '					WHERE config_name = \'search_type\'';				$result = $db->sql_query($sql);				if ($db->sql_fetchfield('config_value') != 'fulltext_mysql')				{					$template->assign_vars(array(						'S_ERROR_BOX'	=> true,						'ERROR_TITLE'	=> $lang['SEARCH_INDEX_UNCONVERTED'],						'ERROR_MSG'		=> $lang['SEARCH_INDEX_UNCONVERTED_EXPLAIN'],					));				}				switch ($db->sql_layer)				{					case 'sqlite':					case 'firebird':						$db->sql_query('DELETE FROM ' . SESSIONS_KEYS_TABLE);						$db->sql_query('DELETE FROM ' . SESSIONS_TABLE);					break;					default:						$db->sql_query('TRUNCATE TABLE ' . SESSIONS_KEYS_TABLE);						$db->sql_query('TRUNCATE TABLE ' . SESSIONS_TABLE);					break;				}			break;		}	}	/**	* Generate a list of all available conversion modules	*/	function list_convertors($sub)	{		global $lang, $language, $template, $phpbb_root_path, $phpEx;		$this->page_title = $lang['SUB_INTRO'];		$template->assign_vars(array(			'TITLE'		=> $lang['CONVERT_INTRO'],			'BODY'		=> $lang['CONVERT_INTRO_BODY'],			'L_AUTHOR'					=> $lang['AUTHOR'],			'L_AVAILABLE_CONVERTORS'	=> $lang['AVAILABLE_CONVERTORS'],			'L_CONVERT'					=> $lang['CONVERT'],			'L_NO_CONVERTORS'			=> $lang['NO_CONVERTORS'],			'L_OPTIONS'					=> $lang['CONVERT_OPTIONS'],			'L_SOFTWARE'				=> $lang['SOFTWARE'],			'L_VERSION'					=> $lang['VERSION'],			'S_LIST'	=> true,		));		$convertors = $sort = array();		$get_info = true;		$handle = @opendir('./convertors/');		if (!$handle)		{			$this->error('Unable to access the convertors directory', __LINE__, __FILE__);		}		while ($entry = readdir($handle))		{			if (preg_match('/^convert_([a-z0-9_]+).' . $phpEx . '$/i', $entry, $m))			{				include('./convertors/' . $entry);				if (isset($convertor_data))				{					$sort[strtolower($convertor_data['forum_name'])] = sizeof($convertors);					$convertors[] = array(						'tag'			=>	$m[1],						'forum_name'	=>	$convertor_data['forum_name'],						'version'		=>	$convertor_data['version'],						'dbms'			=>	$convertor_data['dbms'],						'dbhost'		=>	$convertor_data['dbhost'],						'dbport'		=>	$convertor_data['dbport'],						'dbuser'		=>	$convertor_data['dbuser'],						'dbpasswd'		=>	$convertor_data['dbpasswd'],						'dbname'		=>	$convertor_data['dbname'],						'table_prefix'	=>	$convertor_data['table_prefix'],						'author'		=>	$convertor_data['author']					);				}				unset($convertor_data);			}		}		closedir($handle);		@ksort($sort);		foreach ($sort as $void => $index)		{			$template->assign_block_vars('convertors', array(				'AUTHOR'	=> $convertors[$index]['author'],				'SOFTWARE'	=> $convertors[$index]['forum_name'],				'VERSION'	=> $convertors[$index]['version'],				'U_CONVERT'	=> $this->p_master->module_url . "?mode={$this->mode}&amp;language=$language&amp;sub=settings&amp;tag=" . $convertors[$index]['tag'],			));		}	}	/**	*/	function get_convert_settings($sub)	{		global $lang, $language, $template, $db, $phpbb_root_path, $phpEx, $config, $cache;		require($phpbb_root_path . 'config.' . $phpEx);		require($phpbb_root_path . 'includes/constants.' . $phpEx);		require($phpbb_root_path . 'includes/db/' . $dbms . '.' . $phpEx);		require($phpbb_root_path . 'includes/functions_convert.' . $phpEx);		$db = new $sql_db();		$db->sql_connect($dbhost, $dbuser, $dbpasswd, $dbname, $dbport, false, true);		unset($dbpasswd);		$this->page_title = $lang['STAGE_SETTINGS'];		// We need to fill the config to let internal functions correctly work		$sql = 'SELECT *			FROM ' . CONFIG_TABLE;		$result = $db->sql_query($sql);		$config = array();		while ($row = $db->sql_fetchrow($result))		{			$config[$row['config_name']] = $row['config_value'];		}		$db->sql_freeresult($result);		$convertor_tag = request_var('tag', '');		if (empty($convertor_tag))		{			$this->p_master->error($lang['NO_CONVERT_SPECIFIED'], __LINE__, __FILE__);		}		$get_info = true;		// check security implications of direct inclusion		$convertor_tag = basename($convertor_tag);		if (!file_exists('./convertors/convert_' . $convertor_tag . '.' . $phpEx))		{			$this->p_master->error($lang['CONVERT_NOT_EXIST'], __LINE__, __FILE__);		}		include('./convertors/convert_' . $convertor_tag . '.' . $phpEx);		// The test_file is a file that should be present in the location of the old board.		if (!isset($test_file))		{			$this->p_master->error($lang['DEV_NO_TEST_FILE'], __LINE__, __FILE__);		}		$submit = (isset($_POST['submit'])) ? true : false;		$src_dbms			= request_var('src_dbms', $convertor_data['dbms']);		$src_dbhost			= request_var('src_dbhost', $convertor_data['dbhost']);		$src_dbport			= request_var('src_dbport', $convertor_data['dbport']);		$src_dbuser			= request_var('src_dbuser', $convertor_data['dbuser']);		$src_dbpasswd		= request_var('src_dbpasswd', $convertor_data['dbpasswd']);		$src_dbname			= request_var('src_dbname', $convertor_data['dbname']);		$src_table_prefix	= request_var('src_table_prefix', $convertor_data['table_prefix']);		$forum_path			= request_var('forum_path', $convertor_data['forum_path']);		$refresh			= request_var('refresh', 1);		// Default URL of the old board		// @todo Are we going to use this for attempting to convert URL references in posts, or should we remove it?		//		-> We should convert old urls to the new relative urls format		// $src_url = request_var('src_url', 'Not in use at the moment');		// strip trailing slash from old forum path		$forum_path = (strlen($forum_path) && $forum_path[strlen($forum_path) - 1] == '/') ? substr($forum_path, 0, -1) : $forum_path;		$error = array();		if ($submit)		{			if (!@file_exists('./../' . $forum_path . '/' . $test_file))			{				$error[] = sprintf($lang['COULD_NOT_FIND_PATH'], $forum_path);			}			$connect_test = false;			$available_dbms = get_available_dbms(false, true, true);			if (!isset($available_dbms[$src_dbms]) || !$available_dbms[$src_dbms]['AVAILABLE'])			{				$error['db'][] = $lang['INST_ERR_NO_DB'];				$connect_test = false;			}			else			{				$connect_test = connect_check_db(true, $error, $available_dbms[$src_dbms], $src_table_prefix, $src_dbhost, $src_dbuser, htmlspecialchars_decode($src_dbpasswd), $src_dbname, $src_dbport, true, ($src_dbms == $dbms) ? false : true, false);			}			// The forum prefix of the old and the new forum can only be the same if two different databases are used.			if ($src_table_prefix == $table_prefix && $src_dbms == $dbms && $src_dbhost == $dbhost && $src_dbport == $dbport && $src_dbname == $dbname)			{				$error[] = sprintf($lang['TABLE_PREFIX_SAME'], $src_table_prefix);			}			// Check table prefix			if (!sizeof($error))			{				// initiate database connection to old db if old and new db differ				global $src_db, $same_db;				$src_db = $same_db = false;				if ($src_dbms != $dbms || $src_dbhost != $dbhost || $src_dbport != $dbport || $src_dbname != $dbname || $src_dbuser != $dbuser)				{					$sql_db = 'dbal_' . $src_dbms;					$src_db = new $sql_db();					$src_db->sql_connect($src_dbhost, $src_dbuser, htmlspecialchars_decode($src_dbpasswd), $src_dbname, $src_dbport, false, true);					$same_db = false;				}				else				{					$src_db = $db;					$same_db = true;				}				$src_db->sql_return_on_error(true);				$db->sql_return_on_error(true);				// Try to select one row from the first table to see if the prefix is OK				$result = $src_db->sql_query_limit('SELECT * FROM ' . $src_table_prefix . $tables[0], 1);				if (!$result)				{					$prefixes = array();					$tables_existing = get_tables($src_db);					$tables_existing = array_map('strtolower', $tables_existing);					foreach ($tables_existing as $table_name)					{						compare_table($tables, $table_name, $prefixes);					}					unset($tables_existing);					foreach ($prefixes as $prefix => $count)					{						if ($count >= sizeof($tables))						{							$possible_prefix = $prefix;							break;						}					}					$msg = '';					if (!empty($convertor_data['table_prefix']))					{						$msg .= sprintf($lang['DEFAULT_PREFIX_IS'], $convertor_data['forum_name'], $convertor_data['table_prefix']);					}					if (!empty($possible_prefix))					{						$msg .= '<br />';						$msg .= ($possible_prefix == '*') ? $lang['BLANK_PREFIX_FOUND'] : sprintf($lang['PREFIX_FOUND'], $possible_prefix);						$src_table_prefix = ($possible_prefix == '*') ? '' : $possible_prefix;					}					$error[] = $msg;				}				$src_db->sql_freeresult($result);				$src_db->sql_return_on_error(false);			}			if (!sizeof($error))			{				// Save convertor Status				set_config('convert_progress', serialize(array(					'step'			=> '',					'table_prefix'	=> $src_table_prefix,					'tag'			=> $convertor_tag,				)), true);				set_config('convert_db_server', serialize(array(					'dbms'			=> $src_dbms,					'dbhost'		=> $src_dbhost,					'dbport'		=> $src_dbport,					'dbname'		=> $src_dbname,				)), true);				set_config('convert_db_user', serialize(array(					'dbuser'		=> $src_dbuser,					'dbpasswd'		=> $src_dbpasswd,				)), true);				// Save options				set_config('convert_options', serialize(array('forum_path' => './../' . $forum_path, 'refresh' => $refresh)), true);				$template->assign_block_vars('checks', array(					'TITLE'		=> $lang['VERIFY_OPTIONS'],					'RESULT'	=> $lang['CONVERT_SETTINGS_VERIFIED'],				));				$template->assign_vars(array(					'L_SUBMIT'	=> $lang['BEGIN_CONVERT'],//					'S_HIDDEN'	=> $s_hidden_fields,					'U_ACTION'	=> $this->p_master->module_url . "?mode={$this->mode}&amp;sub=in_progress&amp;tag=$convertor_tag&amp;language=$language",				));				return;			}			else			{				$template->assign_block_vars('checks', array(					'TITLE'		=> $lang['VERIFY_OPTIONS'],					'RESULT'	=> '<b style="color:red">' . implode('<br />', $error) . '</b>',				));			}		} // end submit		foreach ($this->convert_options as $config_key => $vars)		{			if (!is_array($vars) && strpos($config_key, 'legend') === false)			{				continue;			}			if (strpos($config_key, 'legend') !== false)			{				$template->assign_block_vars('options', array(					'S_LEGEND'		=> true,					'LEGEND'		=> $lang[$vars])				);				continue;			}			$options = isset($vars['options']) ? $vars['options'] : '';			$template->assign_block_vars('options', array(				'KEY'			=> $config_key,				'TITLE'			=> $lang[$vars['lang']],				'S_EXPLAIN'		=> $vars['explain'],				'S_LEGEND'		=> false,				'TITLE_EXPLAIN'	=> ($vars['explain']) ? $lang[$vars['lang'] . '_EXPLAIN'] : '',				'CONTENT'		=> $this->p_master->input_field($config_key, $vars['type'], $$config_key, $options),				)			);		}		$template->assign_vars(array(			'TITLE'		=> $lang['STAGE_SETTINGS'],			'BODY'		=> $lang['CONV_OPTIONS_BODY'],			'L_SUBMIT'	=> $lang['BEGIN_CONVERT'],			'U_ACTION'	=> $this->p_master->module_url . "?mode={$this->mode}&amp;sub=settings&amp;tag=$convertor_tag&amp;language=$language",		));	}	/**	* The function which does the actual work (or dispatches it to the relevant places)	*/	function convert_data($sub)	{		global $template, $user, $phpbb_root_path, $phpEx, $db, $lang, $config, $cache;		global $convert, $convert_row, $message_parser, $skip_rows, $language;		require($phpbb_root_path . 'config.' . $phpEx);		require($phpbb_root_path . 'includes/constants.' . $phpEx);		require($phpbb_root_path . 'includes/db/' . $dbms . '.' . $phpEx);		require($phpbb_root_path . 'includes/functions_convert.' . $phpEx);		$db = new $sql_db();		$db->sql_connect($dbhost, $dbuser, $dbpasswd, $dbname, $dbport, false, true);		unset($dbpasswd);		$sql = 'SELECT *			FROM ' . CONFIG_TABLE;		$result = $db->sql_query($sql);		$config = array();		while ($row = $db->sql_fetchrow($result))		{			$config[$row['config_name']] = $row['config_value'];		}		$db->sql_freeresult($result);		// Override a couple of config variables for the duration		$config['max_quote_depth'] = 0;		// @todo Need to confirm that max post length in source is <= max post length in destination or there may be interesting formatting issues		$config['max_post_chars'] = $config['min_post_chars'] = 0;		// Set up a user as well. We _should_ have enough of a database here at this point to do this		// and it helps for any core code we call		$user->session_begin();		$user->page = $user->extract_current_page($phpbb_root_path);		// This is a little bit of a fudge, but it allows the language entries to be available to the		// core code without us loading them again		$user->lang = &$lang;		$this->page_title = $user->lang['STAGE_IN_PROGRESS'];		$convert->options = array();		if (isset($config['convert_progress']))		{			$convert->options = unserialize($config['convert_progress']);			$convert->options = array_merge($convert->options, unserialize($config['convert_db_server']), unserialize($config['convert_db_user']), unserialize($config['convert_options']));		}		// This information should have already been checked once, but do it again for safety		if (empty($convert->options) || empty($convert->options['tag']) ||			!isset($convert->options['dbms']) ||			!isset($convert->options['dbhost']) ||			!isset($convert->options['dbport']) ||			!isset($convert->options['dbuser']) ||			!isset($convert->options['dbpasswd']) ||			!isset($convert->options['dbname']) ||			!isset($convert->options['table_prefix']))		{			$this->p_master->error($user->lang['NO_CONVERT_SPECIFIED'], __LINE__, __FILE__);		}		// Make some short variables accessible, for easier referencing		$convert->convertor_tag = basename($convert->options['tag']);		$convert->src_dbms = $convert->options['dbms'];		$convert->src_dbhost = $convert->options['dbhost'];		$convert->src_dbport = $convert->options['dbport'];		$convert->src_dbuser = $convert->options['dbuser'];		$convert->src_dbpasswd = $convert->options['dbpasswd'];		$convert->src_dbname = $convert->options['dbname'];		$convert->src_table_prefix = $convert->options['table_prefix'];		// initiate database connection to old db if old and new db differ		global $src_db, $same_db;		$src_db = $same_db = null;		if ($convert->src_dbms != $dbms || $convert->src_dbhost != $dbhost || $convert->src_dbport != $dbport || $convert->src_dbname != $dbname || $convert->src_dbuser != $dbuser)		{			if ($convert->src_dbms != $dbms)			{				require($phpbb_root_path . 'includes/db/' . $convert->src_dbms . '.' . $phpEx);			}			$sql_db = 'dbal_' . $convert->src_dbms;			$src_db = new $sql_db();			$src_db->sql_connect($convert->src_dbhost, $convert->src_dbuser, htmlspecialchars_decode($convert->src_dbpasswd), $convert->src_dbname, $convert->src_dbport, false, true);			$same_db = false;		}		else		{			$src_db = $db;			$same_db = true;		}		$convert->mysql_convert = false;		switch ($src_db->sql_layer)		{			case 'sqlite':			case 'firebird':				$convert->src_truncate_statement = 'DELETE FROM ';			break;			// Thanks MySQL, for silently converting...			case 'mysql':			case 'mysql4':				if (version_compare($src_db->sql_server_info(true, false), '4.1.3', '>='))				{					$convert->mysql_convert = true;				}				$convert->src_truncate_statement = 'TRUNCATE TABLE ';			break;			case 'mysqli':				$convert->mysql_convert = true;				$convert->src_truncate_statement = 'TRUNCATE TABLE ';			break;			default:				$convert->src_truncate_statement = 'TRUNCATE TABLE ';			break;		}		if ($convert->mysql_convert && !$same_db)		{			$src_db->sql_query("SET NAMES 'binary'");		}		switch ($db->sql_layer)		{			case 'sqlite':			case 'firebird':				$convert->truncate_statement = 'DELETE FROM ';			break;			default:				$convert->truncate_statement = 'TRUNCATE TABLE ';			break;		}		$get_info = false;		// check security implications of direct inclusion		if (!file_exists('./convertors/convert_' . $convert->convertor_tag . '.' . $phpEx))		{			$this->p_master->error($user->lang['CONVERT_NOT_EXIST'], __LINE__, __FILE__);		}		if (file_exists('./convertors/functions_' . $convert->convertor_tag . '.' . $phpEx))		{			include('./convertors/functions_' . $convert->convertor_tag . '.' . $phpEx);		}		$get_info = true;		include('./convertors/convert_' . $convert->convertor_tag . '.' . $phpEx);		// Map some variables...		$convert->convertor_data = $convertor_data;		$convert->tables = $tables;		$convert->config_schema = $config_schema;		// Now include the real data		$get_info = false;		include('./convertors/convert_' . $convert->convertor_tag . '.' . $phpEx);		$convert->convertor_data = $convertor_data;		$convert->tables = $tables;		$convert->config_schema = $config_schema;		$convert->convertor = $convertor;		// The test_file is a file that should be present in the location of the old board.		if (!file_exists($convert->options['forum_path'] . '/' . $test_file))		{			$this->p_master->error(sprintf($user->lang['COULD_NOT_FIND_PATH'], $convert->options['forum_path']), __LINE__, __FILE__);		}		$search_type = basename(trim($config['search_type']));		// For conversions we are a bit less strict and set to a search backend we know exist...		if (!file_exists($phpbb_root_path . 'includes/search/' . $search_type . '.' . $phpEx))		{			$search_type = 'fulltext_native';			set_config('search_type', $search_type);		}		if (!file_exists($phpbb_root_path . 'includes/search/' . $search_type . '.' . $phpEx))		{			trigger_error('NO_SUCH_SEARCH_MODULE');		}		require($phpbb_root_path . 'includes/search/' . $search_type . '.' . $phpEx);		$error = false;		$convert->fulltext_search = new $search_type($error);		if ($error)		{			trigger_error($error);		}		include($phpbb_root_path . 'includes/message_parser.' . $phpEx);		$message_parser = new parse_message();		$jump = request_var('jump', 0);		$final_jump = request_var('final_jump', 0);		$sync_batch = request_var('sync_batch', -1);		$last_statement = request_var('last', 0);		// We are running sync...		if ($sync_batch >= 0)		{			$this->sync_forums($sync_batch);			return;		}		if ($jump)		{			$this->jump($jump, $last_statement);			return;		}		if ($final_jump)		{			$this->final_jump($final_jump);			return;		}		$current_table = request_var('current_table', 0);		$old_current_table = min(-1, $current_table - 1);		$skip_rows = request_var('skip_rows', 0);		if (!$current_table && !$skip_rows)		{			if (empty($_REQUEST['confirm']))			{				// If avatars / ranks / smilies folders are specified make sure they are writable				$bad_folders = array();				$local_paths = array(					'avatar_path'			=> path($config['avatar_path']),					'avatar_gallery_path'	=> path($config['avatar_gallery_path']),					'icons_path'			=> path($config['icons_path']),					'ranks_path'			=> path($config['ranks_path']),					'smilies_path'			=> path($config['smilies_path'])				);				foreach ($local_paths as $folder => $local_path)				{					if (isset($convert->convertor[$folder]))					{						if (empty($convert->convertor['test_file']))						{							// test_file is mandantory at the moment so this should never be reached, but just in case...							$this->p_master->error($user->lang['DEV_NO_TEST_FILE'], __LINE__, __FILE__);						}						if (!$local_path || !phpbb_is_writable($phpbb_root_path . $local_path))						{							if (!$local_path)							{								$bad_folders[] = sprintf($user->lang['CONFIG_PHPBB_EMPTY'], $folder);							}							else							{								$bad_folders[] = $local_path;							}						}					}				}				if (sizeof($bad_folders))				{					$msg = (sizeof($bad_folders) == 1) ? $user->lang['MAKE_FOLDER_WRITABLE'] : $user->lang['MAKE_FOLDERS_WRITABLE'];					sort($bad_folders);					$this->p_master->error(sprintf($msg, implode('<br />', $bad_folders)), __LINE__, __FILE__, true);					$template->assign_vars(array(						'L_SUBMIT'	=> $user->lang['INSTALL_TEST'],						'U_ACTION'	=> $this->p_master->module_url . "?mode={$this->mode}&amp;sub=in_progress&amp;tag={$convert->convertor_tag}&amp;language=$language",					));					return;				}				// Grab all the tables used in convertor				$missing_tables = $tables_list = $aliases = array();				foreach ($convert->convertor['schema'] as $schema)				{					// Skip those not used (because of addons/plugins not detected)					if (!$schema['target'])					{						continue;					}					foreach ($schema as $key => $val)					{						// we're dealing with an array like:						// array('forum_status',			'forums.forum_status',				'is_item_locked')						if (is_int($key) && !empty($val[1]))						{							$temp_data = $val[1];							if (!is_array($temp_data))							{								$temp_data = array($temp_data);							}							foreach ($temp_data as $val)							{								if (preg_match('/([a-z0-9_]+)\.([a-z0-9_]+)\)* ?A?S? ?([a-z0-9_]*?)\.?([a-z0-9_]*)$/i', $val, $m))								{									$table = $convert->src_table_prefix . $m[1];									$tables_list[$table] = $table;									if (!empty($m[3]))									{										$aliases[] = $convert->src_table_prefix . $m[3];									}								}							}						}						// 'left_join'		=> 'topics LEFT JOIN vote_desc ON topics.topic_id = vote_desc.topic_id AND topics.topic_vote = 1'						else if ($key == 'left_join')						{							// Convert the value if it wasn't an array already.							if (!is_array($val))							{								$val = array($val);							}							for ($j = 0; $j < sizeof($val); ++$j)							{								if (preg_match('/LEFT JOIN ([a-z0-9_]+) AS ([a-z0-9_]+)/i', $val[$j], $m))								{									$table = $convert->src_table_prefix . $m[1];									$tables_list[$table] = $table;									if (!empty($m[2]))									{										$aliases[] = $convert->src_table_prefix . $m[2];									}								}							}						}					}				}				// Remove aliased tables from $tables_list				foreach ($aliases as $alias)				{					unset($tables_list[$alias]);				}				// Check if the tables that we need exist				$src_db->sql_return_on_error(true);				foreach ($tables_list as $table => $null)				{					$sql = 'SELECT 1 FROM ' . $table;					$_result = $src_db->sql_query_limit($sql, 1);					if (!$_result)					{						$missing_tables[] = $table;					}					$src_db->sql_freeresult($_result);				}				$src_db->sql_return_on_error(false);				// Throw an error if some tables are missing				// We used to do some guessing here, but since we have a suggestion of possible values earlier, I don't see it adding anything here to do it again				if (sizeof($missing_tables) == sizeof($tables_list))				{					$this->p_master->error($user->lang['NO_TABLES_FOUND'] . ' ' . $user->lang['CHECK_TABLE_PREFIX'], __LINE__, __FILE__);				}				else if (sizeof($missing_tables))				{					$this->p_master->error(sprintf($user->lang['TABLES_MISSING'], implode(', ', $missing_tables)) . '<br /><br />' . $user->lang['CHECK_TABLE_PREFIX'], __LINE__, __FILE__);				}				$url = $this->save_convert_progress('&amp;confirm=1');				$msg = $user->lang['PRE_CONVERT_COMPLETE'];				if ($convert->convertor_data['author_notes'])				{					$msg .= '</p><p>' . sprintf($user->lang['AUTHOR_NOTES'], $convert->convertor_data['author_notes']);				}				$template->assign_vars(array(					'L_SUBMIT'		=> $user->lang['CONTINUE_CONVERT'],					'L_MESSAGE'		=> $msg,					'U_ACTION'		=> $url,				));				return;			} // if (empty($_REQUEST['confirm']))			$template->assign_block_vars('checks', array(				'S_LEGEND'		=> true,				'LEGEND'		=> $user->lang['STARTING_CONVERT'],			));			// Convert the config table and load the settings of the old board			if (!empty($convert->config_schema))			{				restore_config($convert->config_schema);				// Override a couple of config variables for the duration				$config['max_quote_depth'] = 0;				// @todo Need to confirm that max post length in source is <= max post length in destination or there may be interesting formatting issues				$config['max_post_chars'] = $config['min_post_chars'] = 0;			}			$template->assign_block_vars('checks', array(				'TITLE'		=> $user->lang['CONFIG_CONVERT'],				'RESULT'	=> $user->lang['DONE'],			));			// Now process queries and execute functions that have to be executed prior to the conversion			if (!empty($convert->convertor['execute_first']))			{				eval($convert->convertor['execute_first']);			}			if (!empty($convert->convertor['query_first']))			{				if (!is_array($convert->convertor['query_first']))				{					$convert->convertor['query_first'] = array('target', array($convert->convertor['query_first']));				}				else if (!is_array($convert->convertor['query_first'][0]))				{					$convert->convertor['query_first'] = array(array($convert->convertor['query_first'][0], $convert->convertor['query_first'][1]));				}				foreach ($convert->convertor['query_first'] as $query_first)				{					if ($query_first[0] == 'src')					{						if ($convert->mysql_convert && $same_db)						{							$src_db->sql_query("SET NAMES 'binary'");						}						$src_db->sql_query($query_first[1]);						if ($convert->mysql_convert && $same_db)						{							$src_db->sql_query("SET NAMES 'utf8'");						}					}					else					{						$db->sql_query($query_first[1]);					}				}			}			$template->assign_block_vars('checks', array(				'TITLE'		=> $user->lang['PREPROCESS_STEP'],				'RESULT'	=> $user->lang['DONE'],			));		} // if (!$current_table && !$skip_rows)		$template->assign_block_vars('checks', array(			'S_LEGEND'		=> true,			'LEGEND'		=> $user->lang['FILLING_TABLES'],		));		// This loop takes one target table and processes it		while ($current_table < sizeof($convert->convertor['schema']))		{			$schema = $convert->convertor['schema'][$current_table];			// The target table isn't set, this can be because a module (for example the attachement mod) is taking care of this.			if (empty($schema['target']))			{				$current_table++;				continue;			}			$template->assign_block_vars('checks', array(				'TITLE'	=> sprintf($user->lang['FILLING_TABLE'], $schema['target']),			));			// This is only the case when we first start working on the tables.			if (!$skip_rows)			{				// process execute_first and query_first for this table...				if (!empty($schema['execute_first']))				{					eval($schema['execute_first']);				}				if (!empty($schema['query_first']))				{					if (!is_array($schema['query_first']))					{						$schema['query_first'] = array('target', array($schema['query_first']));					}					else if (!is_array($schema['query_first'][0]))					{						$schema['query_first'] = array(array($schema['query_first'][0], $schema['query_first'][1]));					}					foreach ($schema['query_first'] as $query_first)					{						if ($query_first[0] == 'src')						{							if ($convert->mysql_convert && $same_db)							{								$src_db->sql_query("SET NAMES 'binary'");							}							$src_db->sql_query($query_first[1]);							if ($convert->mysql_convert && $same_db)							{								$src_db->sql_query("SET NAMES 'utf8'");							}						}						else						{							$db->sql_query($query_first[1]);						}					}				}				if (!empty($schema['autoincrement']))				{					switch ($db->sql_layer)					{						case 'postgres':							$db->sql_query("SELECT SETVAL('" . $schema['target'] . "_seq',(select case when max(" . $schema['autoincrement'] . ")>0 then max(" . $schema['autoincrement'] . ")+1 else 1 end from " . $schema['target'] . '));');						break;						case 'oracle':							$result = $db->sql_query('SELECT MAX(' . $schema['autoincrement'] . ') as max_id FROM ' . $schema['target']);							$row = $db->sql_fetchrow($result);							$db->sql_freeresult($result);							$largest_id = (int) $row['max_id'];							if ($largest_id)							{								$db->sql_query('DROP SEQUENCE ' . $schema['target'] . '_seq');								$db->sql_query('CREATE SEQUENCE ' . $schema['target'] . '_seq START WITH ' . ($largest_id + 1));							}						break;					}				}			}			// Process execute_always for this table			// This is for code which needs to be executed on every pass of this table if			// it gets split because of time restrictions			if (!empty($schema['execute_always']))			{				eval($schema['execute_always']);			}			//			// Set up some variables			//			// $waiting_rows	holds rows for multirows insertion (MySQL only)			// $src_tables		holds unique tables with aliases to select from			// $src_fields		will quickly refer source fields (or aliases) corresponding to the current index			// $select_fields	holds the names of the fields to retrieve			//			$sql_data = array(				'source_fields'		=> array(),				'target_fields'		=> array(),				'source_tables'		=> array(),				'select_fields'		=> array(),			);			// This statement is building the keys for later insertion.			$insert_query = $this->build_insert_query($schema, $sql_data, $current_table);			// If no source table is affected, we skip the table			if (empty($sql_data['source_tables']))			{				$skip_rows = 0;				$current_table++;				continue;			}			$distinct = (!empty($schema['distinct'])) ? 'DISTINCT ' : '';			$sql = 'SELECT ' . $distinct . implode(', ', $sql_data['select_fields']) . " \nFROM " . implode(', ', $sql_data['source_tables']);			// Where			$sql .= (!empty($schema['where'])) ? "\nWHERE (" . $schema['where'] . ')' : '';			// Group By			if (!empty($schema['group_by']))			{				$schema['group_by'] = array($schema['group_by']);				foreach ($sql_data['select_fields'] as $select)				{					$alias = strpos(strtolower($select), ' as ');					$select = ($alias) ? substr($select, 0, $alias) : $select;					if (!in_array($select, $schema['group_by']))					{						$schema['group_by'][] = $select;					}				}			}			$sql .= (!empty($schema['group_by'])) ? "\nGROUP BY " . implode(', ', $schema['group_by']) : '';			// Having			$sql .= (!empty($schema['having'])) ? "\nHAVING " . $schema['having'] : '';			// Order By			if (empty($schema['order_by']) && !empty($schema['primary']))			{				$schema['order_by'] = $schema['primary'];			}			$sql .= (!empty($schema['order_by'])) ? "\nORDER BY " . $schema['order_by'] : '';			// Counting basically holds the amount of rows processed.			$counting = -1;			$batch_time = 0;			while ($counting === -1 || ($counting >= $convert->batch_size && still_on_time()))			{				$old_current_table = $current_table;				$rows = '';				$waiting_rows = array();				if (!empty($batch_time))				{					$mtime = explode(' ', microtime());					$mtime = $mtime[0] + $mtime[1];					$rows = ceil($counting/($mtime - $batch_time)) . " rows/s ($counting rows) | ";				}				$template->assign_block_vars('checks', array(					'TITLE'		=> "skip_rows = $skip_rows",					'RESULT'	=> $rows . ((defined('DEBUG_EXTRA') && function_exists('memory_get_usage')) ? ceil(memory_get_usage()/1024) . ' ' . $user->lang['KIB'] : ''),				));				$mtime = explode(' ', microtime());				$batch_time = $mtime[0] + $mtime[1];				if ($convert->mysql_convert && $same_db)				{					$src_db->sql_query("SET NAMES 'binary'");				}				// Take skip rows into account and only fetch batch_size amount of rows				$___result = $src_db->sql_query_limit($sql, $convert->batch_size, $skip_rows);				if ($convert->mysql_convert && $same_db)				{					$src_db->sql_query("SET NAMES 'utf8'");				}				// This loop processes each row				$counting = 0;				$convert->row = $convert_row = array();				if (!empty($schema['autoincrement']))				{					switch ($db->sql_layer)					{						case 'mssql':						case 'mssql_odbc':						case 'mssqlnative':							$db->sql_query('SET IDENTITY_INSERT ' . $schema['target'] . ' ON');						break;					}				}				// Now handle the rows until time is over or no more rows to process...				while ($counting === 0 || still_on_time())				{					$convert_row = $src_db->sql_fetchrow($___result);					if (!$convert_row)					{						// move to the next batch or table						break;					}					// With this we are able to always save the last state					$convert->row = $convert_row;					// Increment the counting variable, it stores the number of rows we have processed					$counting++;					$insert_values = array();					$sql_flag = $this->process_row($schema, $sql_data, $insert_values);					if ($sql_flag === true)					{						switch ($db->sql_layer)						{							// If MySQL, we'll wait to have num_wait_rows rows to submit at once							case 'mysql':							case 'mysql4':							case 'mysqli':								$waiting_rows[] = '(' . implode(', ', $insert_values) . ')';								if (sizeof($waiting_rows) >= $convert->num_wait_rows)								{									$errored = false;									$db->sql_return_on_error(true);									if (!$db->sql_query($insert_query . implode(', ', $waiting_rows)))									{										$errored = true;									}									$db->sql_return_on_error(false);									if ($errored)									{										$db->sql_return_on_error(true);										// Because it errored out we will try to insert the rows one by one... most of the time this										// is caused by duplicate entries - but we also do not want to miss one...										foreach ($waiting_rows as $waiting_sql)										{											if (!$db->sql_query($insert_query . $waiting_sql))											{												$this->p_master->db_error($user->lang['DB_ERR_INSERT'], htmlspecialchars($insert_query . $waiting_sql) . '<br /><br />' . htmlspecialchars(print_r($db->_sql_error(), true)), __LINE__, __FILE__, true);											}										}										$db->sql_return_on_error(false);									}									$waiting_rows = array();								}							break;							default:								$insert_sql = $insert_query . '(' . implode(', ', $insert_values) . ')';								$db->sql_return_on_error(true);								if (!$db->sql_query($insert_sql))								{									$this->p_master->db_error($user->lang['DB_ERR_INSERT'], htmlspecialchars($insert_sql) . '<br /><br />' . htmlspecialchars(print_r($db->_sql_error(), true)), __LINE__, __FILE__, true);								}								$db->sql_return_on_error(false);								$waiting_rows = array();							break;						}					}					$skip_rows++;				}				$src_db->sql_freeresult($___result);				// We might still have some rows waiting				if (sizeof($waiting_rows))				{					$errored = false;					$db->sql_return_on_error(true);					if (!$db->sql_query($insert_query . implode(', ', $waiting_rows)))					{						$errored = true;					}					$db->sql_return_on_error(false);					if ($errored)					{						$db->sql_return_on_error(true);						// Because it errored out we will try to insert the rows one by one... most of the time this						// is caused by duplicate entries - but we also do not want to miss one...						foreach ($waiting_rows as $waiting_sql)						{							$db->sql_query($insert_query . $waiting_sql);							$this->p_master->db_error($user->lang['DB_ERR_INSERT'], htmlspecialchars($insert_query . $waiting_sql) . '<br /><br />' . htmlspecialchars(print_r($db->_sql_error(), true)), __LINE__, __FILE__, true);						}						$db->sql_return_on_error(false);					}					$waiting_rows = array();				}				if (!empty($schema['autoincrement']))				{					switch ($db->sql_layer)					{						case 'mssql':						case 'mssql_odbc':						case 'mssqlnative':							$db->sql_query('SET IDENTITY_INSERT ' . $schema['target'] . ' OFF');						break;						case 'postgres':							$db->sql_query("SELECT SETVAL('" . $schema['target'] . "_seq',(select case when max(" . $schema['autoincrement'] . ")>0 then max(" . $schema['autoincrement'] . ")+1 else 1 end from " . $schema['target'] . '));');						break;						case 'oracle':							$result = $db->sql_query('SELECT MAX(' . $schema['autoincrement'] . ') as max_id FROM ' . $schema['target']);							$row = $db->sql_fetchrow($result);							$db->sql_freeresult($result);							$largest_id = (int) $row['max_id'];							if ($largest_id)							{								$db->sql_query('DROP SEQUENCE ' . $schema['target'] . '_seq');								$db->sql_query('CREATE SEQUENCE ' . $schema['target'] . '_seq START WITH ' . ($largest_id + 1));							}						break;					}				}			}			// When we reach this point, either the current table has been processed or we're running out of time.			if (still_on_time() && $counting < $convert->batch_size/* && !defined('DEBUG_EXTRA')*/)			{				$skip_rows = 0;				$current_table++;			}			else			{/*				if (still_on_time() && $counting < $convert->batch_size)				{					$skip_rows = 0;					$current_table++;				}*/				// Looks like we ran out of time.				$url = $this->save_convert_progress('&amp;current_table=' . $current_table . '&amp;skip_rows=' . $skip_rows);				$current_table++;//				$percentage = ($skip_rows == 0) ? 0 : floor(100 / ($total_rows / $skip_rows));				$msg = sprintf($user->lang['STEP_PERCENT_COMPLETED'], $current_table, sizeof($convert->convertor['schema']));				$template->assign_vars(array(					'L_MESSAGE'		=> $msg,					'L_SUBMIT'		=> $user->lang['CONTINUE_CONVERT'],					'U_ACTION'		=> $url,				));				$this->meta_refresh($url);				return;			}		}		// Process execute_last then we'll be done		$url = $this->save_convert_progress('&amp;jump=1');		$template->assign_vars(array(			'L_SUBMIT'		=> $user->lang['FINAL_STEP'],			'U_ACTION'		=> $url,		));		$this->meta_refresh($url);		return;	}	/**	* Sync function being executed at the middle, some functions need to be executed after a successful sync.	*/	function sync_forums($sync_batch)	{		global $template, $user, $db, $phpbb_root_path, $phpEx, $config, $cache;		global $convert;		$template->assign_block_vars('checks', array(			'S_LEGEND'	=> true,			'LEGEND'	=> $user->lang['SYNC_TOPICS'],		));		$batch_size = $convert->batch_size;		$sql = 'SELECT MIN(topic_id) as min_value, MAX(topic_id) AS max_value			FROM ' . TOPICS_TABLE;		$result = $db->sql_query($sql);		$row = $db->sql_fetchrow($result);		$db->sql_freeresult($result);		// Set values of minimum/maximum primary value for this table.		$primary_min = $row['min_value'];		$primary_max = $row['max_value'];		if ($sync_batch == 0)		{			$sync_batch = (int) $primary_min;		}		if ($sync_batch == 0)		{			$sync_batch = 1;		}		// Fetch a batch of rows, process and insert them.		while ($sync_batch <= $primary_max && still_on_time())		{			$end = ($sync_batch + $batch_size - 1);			// Sync all topics in batch mode...			sync('topic_approved', 'range', 'topic_id BETWEEN ' . $sync_batch . ' AND ' . $end, true, false);			sync('topic', 'range', 'topic_id BETWEEN ' . $sync_batch . ' AND ' . $end, true, true);			$template->assign_block_vars('checks', array(				'TITLE'		=> sprintf($user->lang['SYNC_TOPIC_ID'], $sync_batch, ($sync_batch + $batch_size)) . ((defined('DEBUG_EXTRA') && function_exists('memory_get_usage')) ? ' [' . ceil(memory_get_usage()/1024) . ' ' . $user->lang['KIB'] . ']' : ''),				'RESULT'	=> $user->lang['DONE'],			));			$sync_batch += $batch_size;		}		if ($sync_batch >= $primary_max)		{			$url = $this->save_convert_progress('&amp;final_jump=1');			$template->assign_vars(array(				'L_SUBMIT'		=> $user->lang['CONTINUE_CONVERT'],				'U_ACTION'		=> $url,			));			$this->meta_refresh($url);			return;		}		else		{			$sync_batch--;		}		$url = $this->save_convert_progress('&amp;sync_batch=' . $sync_batch);		$template->assign_vars(array(			'L_SUBMIT'		=> $user->lang['CONTINUE_CONVERT'],			'U_ACTION'		=> $url,		));		$this->meta_refresh($url);		return;	}	/**	* Save the convertor status	*/	function save_convert_progress($step)	{		global $convert, $language;		// Save convertor Status		set_config('convert_progress', serialize(array(			'step'			=> $step,			'table_prefix'	=> $convert->src_table_prefix,			'tag'			=> $convert->convertor_tag,		)), true);		set_config('convert_db_server', serialize(array(			'dbms'			=> $convert->src_dbms,			'dbhost'		=> $convert->src_dbhost,			'dbport'		=> $convert->src_dbport,			'dbname'		=> $convert->src_dbname,		)), true);		set_config('convert_db_user', serialize(array(			'dbuser'		=> $convert->src_dbuser,			'dbpasswd'		=> $convert->src_dbpasswd,		)), true);		return $this->p_master->module_url . "?mode={$this->mode}&amp;sub=in_progress&amp;tag={$convert->convertor_tag}$step&amp;language=$language";	}	/**	* Finish conversion, the last function to be called.	*/	function finish_conversion()	{		global $db, $phpbb_root_path, $phpEx, $convert, $config, $language, $user, $template;		$db->sql_query('DELETE FROM ' . CONFIG_TABLE . "			WHERE config_name = 'convert_progress'				OR config_name = 'convert_options'				OR config_name = 'convert_db_server'				OR config_name = 'convert_db_user'");		$db->sql_query('DELETE FROM ' . SESSIONS_TABLE);		@unlink($phpbb_root_path . 'cache/data_global.' . $phpEx);		cache_moderators();		// And finally, add a note to the log		add_log('admin', 'LOG_INSTALL_CONVERTED', $convert->convertor_data['forum_name'], $config['version']);		$url = $this->p_master->module_url . "?mode={$this->mode}&amp;sub=final&amp;language=$language";		$template->assign_vars(array(			'L_SUBMIT'		=> $user->lang['FINAL_STEP'],			'U_ACTION'		=> $url,		));		$this->meta_refresh($url);		return;	}	/**	* This function marks the steps after syncing	*/	function final_jump($final_jump)	{		global $template, $user, $src_db, $same_db, $db, $phpbb_root_path, $phpEx, $config, $cache;		global $convert;		$template->assign_block_vars('checks', array(			'S_LEGEND'	=> true,			'LEGEND'	=> $user->lang['PROCESS_LAST'],		));		if ($final_jump == 1)		{			$db->sql_return_on_error(true);			update_topics_posted();			$template->assign_block_vars('checks', array(				'TITLE'		=> $user->lang['UPDATE_TOPICS_POSTED'],				'RESULT'	=> $user->lang['DONE'],			));			if ($db->sql_error_triggered)			{				$template->assign_vars(array(					'S_ERROR_BOX'	=> true,					'ERROR_TITLE'	=> $user->lang['UPDATE_TOPICS_POSTED'],					'ERROR_MSG'		=> $user->lang['UPDATE_TOPICS_POSTED_ERR'],				));			}			$db->sql_return_on_error(false);			$this->finish_conversion();			return;		}	}	/**	* This function marks the steps before syncing (jump=1)	*/	function jump($jump, $last_statement)	{		global $template, $user, $src_db, $same_db, $db, $phpbb_root_path, $phpEx, $config, $cache;		global $convert;		$template->assign_block_vars('checks', array(			'S_LEGEND'	=> true,			'LEGEND'	=> $user->lang['PROCESS_LAST'],		));		if ($jump == 1)		{			// Execute 'last' statements/queries			if (!empty($convert->convertor['execute_last']))			{				if (!is_array($convert->convertor['execute_last']))				{					eval($convert->convertor['execute_last']);				}				else				{					while ($last_statement < sizeof($convert->convertor['execute_last']))					{						eval($convert->convertor['execute_last'][$last_statement]);						$template->assign_block_vars('checks', array(							'TITLE'		=> $convert->convertor['execute_last'][$last_statement],							'RESULT'	=> $user->lang['DONE'],						));						$last_statement++;						$url = $this->save_convert_progress('&amp;jump=1&amp;last=' . $last_statement);						$percentage = ($last_statement == 0) ? 0 : floor(100 / (sizeof($convert->convertor['execute_last']) / $last_statement));						$msg = sprintf($user->lang['STEP_PERCENT_COMPLETED'], $last_statement, sizeof($convert->convertor['execute_last']), $percentage);						$template->assign_vars(array(							'L_SUBMIT'		=> $user->lang['CONTINUE_LAST'],							'L_MESSAGE'		=> $msg,							'U_ACTION'		=> $url,						));						$this->meta_refresh($url);						return;					}				}			}			if (!empty($convert->convertor['query_last']))			{				if (!is_array($convert->convertor['query_last']))				{					$convert->convertor['query_last'] = array('target', array($convert->convertor['query_last']));				}				else if (!is_array($convert->convertor['query_last'][0]))				{					$convert->convertor['query_last'] = array(array($convert->convertor['query_last'][0], $convert->convertor['query_last'][1]));				}				foreach ($convert->convertor['query_last'] as $query_last)				{					if ($query_last[0] == 'src')					{						if ($convert->mysql_convert && $same_db)						{							$src_db->sql_query("SET NAMES 'binary'");						}						$src_db->sql_query($query_last[1]);						if ($convert->mysql_convert && $same_db)						{							$src_db->sql_query("SET NAMES 'utf8'");						}					}					else					{						$db->sql_query($query_last[1]);					}				}			}			// Sanity check			$db->sql_return_on_error(false);			$src_db->sql_return_on_error(false);			fix_empty_primary_groups();			$sql = 'SELECT MIN(user_regdate) AS board_startdate				FROM ' . USERS_TABLE;			$result = $db->sql_query($sql);			$row = $db->sql_fetchrow($result);			$db->sql_freeresult($result);			if (!isset($config['board_startdate']) || ($row['board_startdate'] < $config['board_startdate'] && $row['board_startdate'] > 0))			{				set_config('board_startdate', $row['board_startdate']);				$db->sql_query('UPDATE ' . USERS_TABLE . ' SET user_regdate = ' . $row['board_startdate'] . ' WHERE user_id = ' . ANONYMOUS);			}			update_dynamic_config();			$template->assign_block_vars('checks', array(				'TITLE'		=> $user->lang['CLEAN_VERIFY'],				'RESULT'	=> $user->lang['DONE'],			));			$url = $this->save_convert_progress('&amp;jump=2');			$template->assign_vars(array(				'L_SUBMIT'		=> $user->lang['CONTINUE_CONVERT'],				'U_ACTION'		=> $url,			));			$this->meta_refresh($url);			return;		}		if ($jump == 2)		{			$db->sql_query('UPDATE ' . USERS_TABLE . " SET user_permissions = ''");			// TODO: sync() is likely going to bomb out on forums with a considerable amount of topics.			// TODO: the sync function is able to handle FROM-TO values, we should use them here (batch processing)			sync('forum', '', '', false, true);			$cache->destroy('sql', FORUMS_TABLE);			$template->assign_block_vars('checks', array(				'TITLE'		=> $user->lang['SYNC_FORUMS'],				'RESULT'	=> $user->lang['DONE'],			));			// Continue with synchronizing the forums...			$url = $this->save_convert_progress('&amp;sync_batch=0');			$template->assign_vars(array(				'L_SUBMIT'		=> $user->lang['CONTINUE_CONVERT'],				'U_ACTION'		=> $url,			));			$this->meta_refresh($url);			return;		}	}	function build_insert_query(&$schema, &$sql_data, $current_table)	{		global $db, $user;		global $convert;		// Can we use IGNORE with this DBMS?		$sql_ignore = (strpos($db->sql_layer, 'mysql') === 0 && !defined('DEBUG_EXTRA')) ? 'IGNORE ' : '';		$insert_query = 'INSERT ' . $sql_ignore . 'INTO ' . $schema['target'] . ' (';		$aliases = array();		$sql_data = array(			'source_fields'		=> array(),			'target_fields'		=> array(),			'source_tables'		=> array(),			'select_fields'		=> array(),		);		foreach ($schema as $key => $val)		{			// Example: array('group_name',				'extension_groups.group_name',		'htmlspecialchars'),			if (is_int($key))			{				if (!empty($val[0]))				{					// Target fields					$sql_data['target_fields'][$val[0]] = $key;					$insert_query .= $val[0] . ', ';				}				if (!is_array($val[1]))				{					$val[1] = array($val[1]);				}				foreach ($val[1] as $valkey => $value_1)				{					// This should cover about any case:					//					// table.field					=> SELECT table.field				FROM table					// table.field AS alias			=> SELECT table.field	AS alias	FROM table					// table.field AS table2.alias	=> SELECT table2.field	AS alias	FROM table table2					// table.field AS table2.field	=> SELECT table2.field				FROM table table2					//					if (preg_match('/^([a-z0-9_]+)\.([a-z0-9_]+)( +AS +(([a-z0-9_]+?)\.)?([a-z0-9_]+))?$/i', $value_1, $m))					{						// There is 'AS ...' in the field names						if (!empty($m[3]))						{							$value_1 = ($m[2] == $m[6]) ? $m[1] . '.' . $m[2] : $m[1] . '.' . $m[2] . ' AS ' . $m[6];							// Table alias: store it then replace the source table with it							if (!empty($m[5]) && $m[5] != $m[1])							{								$aliases[$m[5]] = $m[1];								$value_1 = str_replace($m[1] . '.' . $m[2], $m[5] . '.' . $m[2], $value_1);							}						}						else						{							// No table alias							$sql_data['source_tables'][$m[1]] = (empty($convert->src_table_prefix)) ? $m[1] : $convert->src_table_prefix . $m[1] . ' ' . $m[1];						}						$sql_data['select_fields'][$value_1] = $value_1;						$sql_data['source_fields'][$key][$valkey] = (!empty($m[6])) ? $m[6] : $m[2];					}				}			}			else if ($key == 'where' || $key == 'group_by' || $key == 'order_by' || $key == 'having')			{				if (@preg_match_all('/([a-z0-9_]+)\.([a-z0-9_]+)/i', $val, $m))				{					foreach ($m[1] as $value)					{						$sql_data['source_tables'][$value] = (empty($convert->src_table_prefix)) ? $value : $convert->src_table_prefix . $value . ' ' . $value;					}				}			}		}		// Add the aliases to the list of tables		foreach ($aliases as $alias => $table)		{			$sql_data['source_tables'][$alias] = $convert->src_table_prefix . $table . ' ' . $alias;		}		// 'left_join'		=> 'forums LEFT JOIN forum_prune ON forums.forum_id = forum_prune.forum_id',		if (!empty($schema['left_join']))		{			if (!is_array($schema['left_join']))			{				$schema['left_join'] = array($schema['left_join']);			}			foreach ($schema['left_join'] as $left_join)			{				// This won't handle concatened LEFT JOINs				if (!preg_match('/([a-z0-9_]+) LEFT JOIN ([a-z0-9_]+) A?S? ?([a-z0-9_]*?) ?(ON|USING)(.*)/i', $left_join, $m))				{					$this->p_master->error(sprintf($user->lang['NOT_UNDERSTAND'], 'LEFT JOIN', $left_join, $current_table, $schema['target']), __LINE__, __FILE__);				}				if (!empty($aliases[$m[2]]))				{					if (!empty($m[3]))					{						$this->p_master->error(sprintf($user->lang['NAMING_CONFLICT'], $m[2], $m[3], $schema['left_join']), __LINE__, __FILE__);					}					$m[2] = $aliases[$m[2]];					$m[3] = $m[2];				}				$right_table = $convert->src_table_prefix . $m[2];				if (!empty($m[3]))				{					unset($sql_data['source_tables'][$m[3]]);				}				else if ($m[2] != $m[1])				{					unset($sql_data['source_tables'][$m[2]]);				}				if (strpos($sql_data['source_tables'][$m[1]], "\nLEFT JOIN") !== false)				{					$sql_data['source_tables'][$m[1]] = '(' . $sql_data['source_tables'][$m[1]] . ")\nLEFT JOIN $right_table";				}				else				{					$sql_data['source_tables'][$m[1]] .= "\nLEFT JOIN $right_table";				}				if (!empty($m[3]))				{					unset($sql_data['source_tables'][$m[3]]);					$sql_data['source_tables'][$m[1]] .= ' AS ' . $m[3];				}				else if (!empty($convert->src_table_prefix))				{					$sql_data['source_tables'][$m[1]] .= ' AS ' . $m[2];				}				$sql_data['source_tables'][$m[1]] .= ' ' . $m[4] . $m[5];			}		}		// Remove ", " from the end of the insert query		$insert_query = substr($insert_query, 0, -2) . ') VALUES ';		return $insert_query;	}	/**	* Function for processing the currently handled row	*/	function process_row(&$schema, &$sql_data, &$insert_values)	{		global $template, $user, $phpbb_root_path, $phpEx, $db, $lang, $config, $cache;		global $convert, $convert_row;		$sql_flag = false;		foreach ($schema as $key => $fields)		{			// We are only interested in the lines with:			// array('comment', 'attachments_desc.comment', 'htmlspecialchars'),			if (is_int($key))			{				if (!is_array($fields[1]))				{					$fields[1] = array($fields[1]);				}				$firstkey_set = false;				$firstkey = 0;				foreach ($fields[1] as $inner_key => $inner_value)				{					if (!$firstkey_set)					{						$firstkey = $inner_key;						$firstkey_set = true;					}					$src_field = isset($sql_data['source_fields'][$key][$inner_key]) ? $sql_data['source_fields'][$key][$inner_key] : '';					if (!empty($src_field))					{						$fields[1][$inner_key] = $convert->row[$src_field];					}				}				if (!empty($fields[0]))				{					// We have a target field, if we haven't set $sql_flag yet it will be set to TRUE.					// If a function has already set it to FALSE it won't change it.					if ($sql_flag === false)					{						$sql_flag = true;					}					// No function assigned?					if (empty($fields[2]))					{						$value = $fields[1][$firstkey];					}					else if (is_array($fields[2]))					{						// Execute complex function/eval/typecast						$value = $fields[1];						foreach ($fields[2] as $type => $execution)						{							if (strpos($type, 'typecast') === 0)							{								if (!is_array($value))								{									$value = array($value);								}								$value = $value[0];								settype($value, $execution);							}							else if (strpos($type, 'function') === 0)							{								if (!is_array($value))								{									$value = array($value);								}								$value = call_user_func_array($execution, $value);							}							else if (strpos($type, 'execute') === 0)							{								if (!is_array($value))								{									$value = array($value);								}								$execution = str_replace('{RESULT}', '$value', $execution);								$execution = str_replace('{VALUE}', '$value', $execution);								eval($execution);							}						}					}					else					{						$value = call_user_func_array($fields[2], $fields[1]);					}					if (is_null($value))					{						$value = '';					}					$insert_values[] = $db->_sql_validate_value($value);				}				else if (!empty($fields[2]))				{					if (is_array($fields[2]))					{						// Execute complex function/eval/typecast						$value = '';						foreach ($fields[2] as $type => $execution)						{							if (strpos($type, 'typecast') === 0)							{								$value = settype($value, $execution);							}							else if (strpos($type, 'function') === 0)							{								if (!is_array($value))								{									$value = array($value);								}								$value = call_user_func_array($execution, $value);							}							else if (strpos($type, 'execute') === 0)							{								if (!is_array($value))								{									$value = array($value);								}								$execution = str_replace('{RESULT}', '$value', $execution);								$execution = str_replace('{VALUE}', '$value', $execution);								eval($execution);							}						}					}					else					{						call_user_func_array($fields[2], $fields[1]);					}				}			}		}		return $sql_flag;	}	/**	* Own meta refresh function to be able to change the global time used	*/	function meta_refresh($url)	{		global $convert, $template;		if ($convert->options['refresh'])		{			// Because we should not rely on correct settings, we simply use the relative path here directly.			$template->assign_vars(array(				'S_REFRESH'	=> true,				'META'		=> '<meta http-equiv="refresh" content="5;url=' . $url . '" />')			);		}	}	/**	* The information below will be used to build the input fields presented to the user	*/	var $convert_options = array(		'legend1'			=> 'SPECIFY_OPTIONS',		'src_dbms'			=> array('lang' => 'DBMS',			'type' => 'select', 'options' => 'dbms_select(\'{VALUE}\', true)', 'explain' => false),		'src_dbhost'		=> array('lang' => 'DB_HOST',		'type' => 'text:25:100', 'explain' => true),		'src_dbport'		=> array('lang' => 'DB_PORT',		'type' => 'text:25:100', 'explain' => true),		'src_dbname'		=> array('lang' => 'DB_NAME',		'type' => 'text:25:100', 'explain' => false),		'src_dbuser'		=> array('lang' => 'DB_USERNAME',	'type' => 'text:25:100', 'explain' => false),		'src_dbpasswd'		=> array('lang' => 'DB_PASSWORD',	'type' => 'password:25:100', 'explain' => false),		'src_table_prefix'	=> array('lang' => 'TABLE_PREFIX',	'type' => 'text:25:100', 'explain' => false),		//'src_url'			=> array('lang' => 'FORUM_ADDRESS',	'type' => 'text:50:100', 'explain' => true),		'forum_path'		=> array('lang' => 'FORUM_PATH',	'type' => 'text:25:100', 'explain' => true),		'refresh'			=> array('lang' => 'REFRESH_PAGE',	'type' => 'radio:yes_no', 'explain' => true),	);}?>
<?php/**** @package acp* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @package module_install*/class acp_email_info{	function module()	{		return array(			'filename'	=> 'acp_email',			'title'		=> 'ACP_MASS_EMAIL',			'version'	=> '1.0.0',			'modes'		=> array(				'email'		=> array('title' => 'ACP_MASS_EMAIL', 'auth' => 'acl_a_email && cfg_email_enable', 'cat' => array('ACP_GENERAL_TASKS')),			),		);	}	function install()	{	}	function uninstall()	{	}}?>
<?php/**** @package phpBB3* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @ignore*/if (!defined('IN_PHPBB')){	exit;}/*** Session class* @package phpBB3*/class session{	var $cookie_data = array();	var $page = array();	var $data = array();	var $browser = '';	var $forwarded_for = '';	var $host = '';	var $session_id = '';	var $ip = '';	var $load = 0;	var $time_now = 0;	var $update_session_page = true;	/**	* Extract current session page	*	* @param string $root_path current root path (phpbb_root_path)	*/	function extract_current_page($root_path)	{		$page_array = array();		// First of all, get the request uri...		$script_name = (!empty($_SERVER['PHP_SELF'])) ? $_SERVER['PHP_SELF'] : getenv('PHP_SELF');		$args = (!empty($_SERVER['QUERY_STRING'])) ? explode('&', $_SERVER['QUERY_STRING']) : explode('&', getenv('QUERY_STRING'));		// If we are unable to get the script name we use REQUEST_URI as a failover and note it within the page array for easier support...		if (!$script_name)		{			$script_name = (!empty($_SERVER['REQUEST_URI'])) ? $_SERVER['REQUEST_URI'] : getenv('REQUEST_URI');			$script_name = (($pos = strpos($script_name, '?')) !== false) ? substr($script_name, 0, $pos) : $script_name;			$page_array['failover'] = 1;		}		// Replace backslashes and doubled slashes (could happen on some proxy setups)		$script_name = str_replace(array('\\', '//'), '/', $script_name);		// Now, remove the sid and let us get a clean query string...		$use_args = array();		// Since some browser do not encode correctly we need to do this with some "special" characters...		// " -> %22, ' => %27, < -> %3C, > -> %3E		$find = array('"', "'", '<', '>');		$replace = array('%22', '%27', '%3C', '%3E');		foreach ($args as $key => $argument)		{			if (strpos($argument, 'sid=') === 0)			{				continue;			}			$use_args[] = str_replace($find, $replace, $argument);		}		unset($args);		// The following examples given are for an request uri of {path to the phpbb directory}/adm/index.php?i=10&b=2		// The current query string		$query_string = trim(implode('&', $use_args));		// basenamed page name (for example: index.php)		$page_name = (substr($script_name, -1, 1) == '/') ? '' : basename($script_name);		$page_name = urlencode(htmlspecialchars($page_name));		// current directory within the phpBB root (for example: adm)		$root_dirs = explode('/', str_replace('\\', '/', phpbb_realpath($root_path)));		$page_dirs = explode('/', str_replace('\\', '/', phpbb_realpath('./')));		$intersection = array_intersect_assoc($root_dirs, $page_dirs);		$root_dirs = array_diff_assoc($root_dirs, $intersection);		$page_dirs = array_diff_assoc($page_dirs, $intersection);		$page_dir = str_repeat('../', sizeof($root_dirs)) . implode('/', $page_dirs);		if ($page_dir && substr($page_dir, -1, 1) == '/')		{			$page_dir = substr($page_dir, 0, -1);		}		// Current page from phpBB root (for example: adm/index.php?i=10&b=2)		$page = (($page_dir) ? $page_dir . '/' : '') . $page_name . (($query_string) ? "?$query_string" : '');		// The script path from the webroot to the current directory (for example: /phpBB3/adm/) : always prefixed with / and ends in /		$script_path = trim(str_replace('\\', '/', dirname($script_name)));		// The script path from the webroot to the phpBB root (for example: /phpBB3/)		$script_dirs = explode('/', $script_path);		array_splice($script_dirs, -sizeof($page_dirs));		$root_script_path = implode('/', $script_dirs) . (sizeof($root_dirs) ? '/' . implode('/', $root_dirs) : '');		// We are on the base level (phpBB root == webroot), lets adjust the variables a bit...		if (!$root_script_path)		{			$root_script_path = ($page_dir) ? str_replace($page_dir, '', $script_path) : $script_path;		}		$script_path .= (substr($script_path, -1, 1) == '/') ? '' : '/';		$root_script_path .= (substr($root_script_path, -1, 1) == '/') ? '' : '/';		$page_array += array(			'page_name'			=> $page_name,			'page_dir'			=> $page_dir,			'query_string'		=> $query_string,			'script_path'		=> str_replace(' ', '%20', htmlspecialchars($script_path)),			'root_script_path'	=> str_replace(' ', '%20', htmlspecialchars($root_script_path)),			'page'				=> $page,			'forum'				=> (isset($_REQUEST['f']) && $_REQUEST['f'] > 0) ? (int) $_REQUEST['f'] : 0,		);		return $page_array;	}	/**	* Get valid hostname/port. HTTP_HOST is used, SERVER_NAME if HTTP_HOST not present.	*/	function extract_current_hostname()	{		global $config;		// Get hostname		$host = (!empty($_SERVER['HTTP_HOST'])) ? $_SERVER['HTTP_HOST'] : ((!empty($_SERVER['SERVER_NAME'])) ? $_SERVER['SERVER_NAME'] : getenv('SERVER_NAME'));		// Should be a string and lowered		$host = (string) strtolower($host);		// If host is equal the cookie domain or the server name (if config is set), then we assume it is valid		if ((isset($config['cookie_domain']) && $host === $config['cookie_domain']) || (isset($config['server_name']) && $host === $config['server_name']))		{			return $host;		}		// Is the host actually a IP? If so, we use the IP... (IPv4)		if (long2ip(ip2long($host)) === $host)		{			return $host;		}		// Now return the hostname (this also removes any port definition). The http:// is prepended to construct a valid URL, hosts never have a scheme assigned		$host = @parse_url('http://' . $host);		$host = (!empty($host['host'])) ? $host['host'] : '';		// Remove any portions not removed by parse_url (#)		$host = str_replace('#', '', $host);		// If, by any means, the host is now empty, we will use a "best approach" way to guess one		if (empty($host))		{			if (!empty($config['server_name']))			{				$host = $config['server_name'];			}			else if (!empty($config['cookie_domain']))			{				$host = (strpos($config['cookie_domain'], '.') === 0) ? substr($config['cookie_domain'], 1) : $config['cookie_domain'];			}			else			{				// Set to OS hostname or localhost				$host = (function_exists('php_uname')) ? php_uname('n') : 'localhost';			}		}		// It may be still no valid host, but for sure only a hostname (we may further expand on the cookie domain... if set)		return $host;	}	/**	* Start session management	*	* This is where all session activity begins. We gather various pieces of	* information from the client and server. We test to see if a session already	* exists. If it does, fine and dandy. If it doesn't we'll go on to create a	* new one ... pretty logical heh? We also examine the system load (if we're	* running on a system which makes such information readily available) and	* halt if it's above an admin definable limit.	*	* @param bool $update_session_page if true the session page gets updated.	*			This can be set to circumvent certain scripts to update the users last visited page.	*/	function session_begin($update_session_page = true)	{		global $phpEx, $SID, $_SID, $_EXTRA_URL, $db, $config, $phpbb_root_path;		// Give us some basic information		$this->time_now				= time();		$this->cookie_data			= array('u' => 0, 'k' => '');		$this->update_session_page	= $update_session_page;		$this->browser				= (!empty($_SERVER['HTTP_USER_AGENT'])) ? htmlspecialchars((string) $_SERVER['HTTP_USER_AGENT']) : '';		$this->referer				= (!empty($_SERVER['HTTP_REFERER'])) ? htmlspecialchars((string) $_SERVER['HTTP_REFERER']) : '';		$this->forwarded_for		= (!empty($_SERVER['HTTP_X_FORWARDED_FOR'])) ? htmlspecialchars((string) $_SERVER['HTTP_X_FORWARDED_FOR']) : '';		$this->host					= $this->extract_current_hostname();		$this->page					= $this->extract_current_page($phpbb_root_path);		// if the forwarded for header shall be checked we have to validate its contents		if ($config['forwarded_for_check'])		{			$this->forwarded_for = preg_replace('# {2,}#', ' ', str_replace(',', ' ', $this->forwarded_for));			// split the list of IPs			$ips = explode(' ', $this->forwarded_for);			foreach ($ips as $ip)			{				// check IPv4 first, the IPv6 is hopefully only going to be used very seldomly				if (!empty($ip) && !preg_match(get_preg_expression('ipv4'), $ip) && !preg_match(get_preg_expression('ipv6'), $ip))				{					// contains invalid data, don't use the forwarded for header					$this->forwarded_for = '';					break;				}			}		}		else		{			$this->forwarded_for = '';		}		if (isset($_COOKIE[$config['cookie_name'] . '_sid']) || isset($_COOKIE[$config['cookie_name'] . '_u']))		{			$this->cookie_data['u'] = request_var($config['cookie_name'] . '_u', 0, false, true);			$this->cookie_data['k'] = request_var($config['cookie_name'] . '_k', '', false, true);			$this->session_id 		= request_var($config['cookie_name'] . '_sid', '', false, true);			$SID = (defined('NEED_SID')) ? '?sid=' . $this->session_id : '?sid=';			$_SID = (defined('NEED_SID')) ? $this->session_id : '';			if (empty($this->session_id))			{				$this->session_id = $_SID = request_var('sid', '');				$SID = '?sid=' . $this->session_id;				$this->cookie_data = array('u' => 0, 'k' => '');			}		}		else		{			$this->session_id = $_SID = request_var('sid', '');			$SID = '?sid=' . $this->session_id;		}		$_EXTRA_URL = array();		// Why no forwarded_for et al? Well, too easily spoofed. With the results of my recent requests		// it's pretty clear that in the majority of cases you'll at least be left with a proxy/cache ip.		$this->ip = (!empty($_SERVER['REMOTE_ADDR'])) ? (string) $_SERVER['REMOTE_ADDR'] : '';		$this->ip = preg_replace('# {2,}#', ' ', str_replace(',', ' ', $this->ip));		// split the list of IPs		$ips = explode(' ', trim($this->ip));		// Default IP if REMOTE_ADDR is invalid		$this->ip = '127.0.0.1';		foreach ($ips as $ip)		{			if (preg_match(get_preg_expression('ipv4'), $ip))			{				$this->ip = $ip;			}			else if (preg_match(get_preg_expression('ipv6'), $ip))			{				// Quick check for IPv4-mapped address in IPv6				if (stripos($ip, '::ffff:') === 0)				{					$ipv4 = substr($ip, 7);					if (preg_match(get_preg_expression('ipv4'), $ipv4))					{						$ip = $ipv4;					}				}				$this->ip = $ip;			}			else			{				// We want to use the last valid address in the chain				// Leave foreach loop when address is invalid				break;			}		}		$this->load = false;		// Load limit check (if applicable)		if ($config['limit_load'] || $config['limit_search_load'])		{			if ((function_exists('sys_getloadavg') && $load = sys_getloadavg()) || ($load = explode(' ', @file_get_contents('/proc/loadavg'))))			{				$this->load = array_slice($load, 0, 1);				$this->load = floatval($this->load[0]);			}			else			{				set_config('limit_load', '0');				set_config('limit_search_load', '0');			}		}		// Is session_id is set or session_id is set and matches the url param if required		if (!empty($this->session_id) && (!defined('NEED_SID') || (isset($_GET['sid']) && $this->session_id === $_GET['sid'])))		{			$sql = 'SELECT u.*, s.*				FROM ' . SESSIONS_TABLE . ' s, ' . USERS_TABLE . " u				WHERE s.session_id = '" . $db->sql_escape($this->session_id) . "'					AND u.user_id = s.session_user_id";			$result = $db->sql_query($sql);			$this->data = $db->sql_fetchrow($result);			$db->sql_freeresult($result);			// Did the session exist in the DB?			if (isset($this->data['user_id']))			{				// Validate IP length according to admin ... enforces an IP				// check on bots if admin requires this//				$quadcheck = ($config['ip_check_bot'] && $this->data['user_type'] & USER_BOT) ? 4 : $config['ip_check'];				if (strpos($this->ip, ':') !== false && strpos($this->data['session_ip'], ':') !== false)				{					$s_ip = short_ipv6($this->data['session_ip'], $config['ip_check']);					$u_ip = short_ipv6($this->ip, $config['ip_check']);				}				else				{					$s_ip = implode('.', array_slice(explode('.', $this->data['session_ip']), 0, $config['ip_check']));					$u_ip = implode('.', array_slice(explode('.', $this->ip), 0, $config['ip_check']));				}				$s_browser = ($config['browser_check']) ? trim(strtolower(substr($this->data['session_browser'], 0, 149))) : '';				$u_browser = ($config['browser_check']) ? trim(strtolower(substr($this->browser, 0, 149))) : '';				$s_forwarded_for = ($config['forwarded_for_check']) ? substr($this->data['session_forwarded_for'], 0, 254) : '';				$u_forwarded_for = ($config['forwarded_for_check']) ? substr($this->forwarded_for, 0, 254) : '';				// referer checks				// The @ before $config['referer_validation'] suppresses notices present while running the updater				$check_referer_path = (@$config['referer_validation'] == REFERER_VALIDATE_PATH);				$referer_valid = true;				// we assume HEAD and TRACE to be foul play and thus only whitelist GET				if (@$config['referer_validation'] && isset($_SERVER['REQUEST_METHOD']) && strtolower($_SERVER['REQUEST_METHOD']) !== 'get')				{					$referer_valid = $this->validate_referer($check_referer_path);				}				if ($u_ip === $s_ip && $s_browser === $u_browser && $s_forwarded_for === $u_forwarded_for && $referer_valid)				{					$session_expired = false;					// Check whether the session is still valid if we have one					$method = basename(trim($config['auth_method']));					include_once($phpbb_root_path . 'includes/auth/auth_' . $method . '.' . $phpEx);					$method = 'validate_session_' . $method;					if (function_exists($method))					{						if (!$method($this->data))						{							$session_expired = true;						}					}					if (!$session_expired)					{						// Check the session length timeframe if autologin is not enabled.						// Else check the autologin length... and also removing those having autologin enabled but no longer allowed board-wide.						if (!$this->data['session_autologin'])						{							if ($this->data['session_time'] < $this->time_now - ($config['session_length'] + 60))							{								$session_expired = true;							}						}						else if (!$config['allow_autologin'] || ($config['max_autologin_time'] && $this->data['session_time'] < $this->time_now - (86400 * (int) $config['max_autologin_time']) + 60))						{							$session_expired = true;						}					}					if (!$session_expired)					{						// Only update session DB a minute or so after last update or if page changes						if ($this->time_now - $this->data['session_time'] > 60 || ($this->update_session_page && $this->data['session_page'] != $this->page['page']))						{							$sql_ary = array('session_time' => $this->time_now);							if ($this->update_session_page)							{								$sql_ary['session_page'] = substr($this->page['page'], 0, 199);								$sql_ary['session_forum_id'] = $this->page['forum'];							}							$db->sql_return_on_error(true);							$sql = 'UPDATE ' . SESSIONS_TABLE . ' SET ' . $db->sql_build_array('UPDATE', $sql_ary) . "								WHERE session_id = '" . $db->sql_escape($this->session_id) . "'";							$result = $db->sql_query($sql);							$db->sql_return_on_error(false);							// If the database is not yet updated, there will be an error due to the session_forum_id							// @todo REMOVE for 3.0.2							if ($result === false)							{								unset($sql_ary['session_forum_id']);								$sql = 'UPDATE ' . SESSIONS_TABLE . ' SET ' . $db->sql_build_array('UPDATE', $sql_ary) . "									WHERE session_id = '" . $db->sql_escape($this->session_id) . "'";								$db->sql_query($sql);							}							if ($this->data['user_id'] != ANONYMOUS && !empty($config['new_member_post_limit']) && $this->data['user_new'] && $config['new_member_post_limit'] <= $this->data['user_posts'])							{								$this->leave_newly_registered();							}						}						$this->data['is_registered'] = ($this->data['user_id'] != ANONYMOUS && ($this->data['user_type'] == USER_NORMAL || $this->data['user_type'] == USER_FOUNDER)) ? true : false;						$this->data['is_bot'] = (!$this->data['is_registered'] && $this->data['user_id'] != ANONYMOUS) ? true : false;						$this->data['user_lang'] = basename($this->data['user_lang']);						return true;					}				}				else				{					// Added logging temporarly to help debug bugs...					if (defined('DEBUG_EXTRA') && $this->data['user_id'] != ANONYMOUS)					{						if ($referer_valid)						{							add_log('critical', 'LOG_IP_BROWSER_FORWARDED_CHECK', $u_ip, $s_ip, $u_browser, $s_browser, htmlspecialchars($u_forwarded_for), htmlspecialchars($s_forwarded_for));						}						else						{							add_log('critical', 'LOG_REFERER_INVALID', $this->referer);						}					}				}			}		}		// If we reach here then no (valid) session exists. So we'll create a new one		return $this->session_create();	}	/**	* Create a new session	*	* If upon trying to start a session we discover there is nothing existing we	* jump here. Additionally this method is called directly during login to regenerate	* the session for the specific user. In this method we carry out a number of tasks;	* garbage collection, (search)bot checking, banned user comparison. Basically	* though this method will result in a new session for a specific user.	*/	function session_create($user_id = false, $set_admin = false, $persist_login = false, $viewonline = true)	{		global $SID, $_SID, $db, $config, $cache, $phpbb_root_path, $phpEx;		$this->data = array();		/* Garbage collection ... remove old sessions updating user information		// if necessary. It means (potentially) 11 queries but only infrequently		if ($this->time_now > $config['session_last_gc'] + $config['session_gc'])		{			$this->session_gc();		}*/		// Do we allow autologin on this board? No? Then override anything		// that may be requested here		if (!$config['allow_autologin'])		{			$this->cookie_data['k'] = $persist_login = false;		}		/**		* Here we do a bot check, oh er saucy! No, not that kind of bot		* check. We loop through the list of bots defined by the admin and		* see if we have any useragent and/or IP matches. If we do, this is a		* bot, act accordingly		*/		$bot = false;		$active_bots = $cache->obtain_bots();		foreach ($active_bots as $row)		{			if ($row['bot_agent'] && preg_match('#' . str_replace('\*', '.*?', preg_quote($row['bot_agent'], '#')) . '#i', $this->browser))			{				$bot = $row['user_id'];			}			// If ip is supplied, we will make sure the ip is matching too...			if ($row['bot_ip'] && ($bot || !$row['bot_agent']))			{				// Set bot to false, then we only have to set it to true if it is matching				$bot = false;				foreach (explode(',', $row['bot_ip']) as $bot_ip)				{					$bot_ip = trim($bot_ip);					if (!$bot_ip)					{						continue;					}					if (strpos($this->ip, $bot_ip) === 0)					{						$bot = (int) $row['user_id'];						break;					}				}			}			if ($bot)			{				break;			}		}		$method = basename(trim($config['auth_method']));		include_once($phpbb_root_path . 'includes/auth/auth_' . $method . '.' . $phpEx);		$method = 'autologin_' . $method;		if (function_exists($method))		{			$this->data = $method();			if (sizeof($this->data))			{				$this->cookie_data['k'] = '';				$this->cookie_data['u'] = $this->data['user_id'];			}		}		// If we're presented with an autologin key we'll join against it.		// Else if we've been passed a user_id we'll grab data based on that		if (isset($this->cookie_data['k']) && $this->cookie_data['k'] && $this->cookie_data['u'] && !sizeof($this->data))		{			$sql = 'SELECT u.*				FROM ' . USERS_TABLE . ' u, ' . SESSIONS_KEYS_TABLE . ' k				WHERE u.user_id = ' . (int) $this->cookie_data['u'] . '					AND u.user_type IN (' . USER_NORMAL . ', ' . USER_FOUNDER . ")					AND k.user_id = u.user_id					AND k.key_id = '" . $db->sql_escape(md5($this->cookie_data['k'])) . "'";			$result = $db->sql_query($sql);			$this->data = $db->sql_fetchrow($result);			$db->sql_freeresult($result);			$bot = false;		}		else if ($user_id !== false && !sizeof($this->data))		{			$this->cookie_data['k'] = '';			$this->cookie_data['u'] = $user_id;			$sql = 'SELECT *				FROM ' . USERS_TABLE . '				WHERE user_id = ' . (int) $this->cookie_data['u'] . '					AND user_type IN (' . USER_NORMAL . ', ' . USER_FOUNDER . ')';			$result = $db->sql_query($sql);			$this->data = $db->sql_fetchrow($result);			$db->sql_freeresult($result);			$bot = false;		}		// Bot user, if they have a SID in the Request URI we need to get rid of it		// otherwise they'll index this page with the SID, duplicate content oh my!		if ($bot && isset($_GET['sid']))		{			send_status_line(301, 'Moved Permanently');			redirect(build_url(array('sid')));		}		// If no data was returned one or more of the following occurred:		// Key didn't match one in the DB		// User does not exist		// User is inactive		// User is bot		if (!sizeof($this->data) || !is_array($this->data))		{			$this->cookie_data['k'] = '';			$this->cookie_data['u'] = ($bot) ? $bot : ANONYMOUS;			if (!$bot)			{				$sql = 'SELECT *					FROM ' . USERS_TABLE . '					WHERE user_id = ' . (int) $this->cookie_data['u'];			}			else			{				// We give bots always the same session if it is not yet expired.				$sql = 'SELECT u.*, s.*					FROM ' . USERS_TABLE . ' u					LEFT JOIN ' . SESSIONS_TABLE . ' s ON (s.session_user_id = u.user_id)					WHERE u.user_id = ' . (int) $bot;			}			$result = $db->sql_query($sql);			$this->data = $db->sql_fetchrow($result);			$db->sql_freeresult($result);		}		if ($this->data['user_id'] != ANONYMOUS && !$bot)		{			$this->data['session_last_visit'] = (isset($this->data['session_time']) && $this->data['session_time']) ? $this->data['session_time'] : (($this->data['user_lastvisit']) ? $this->data['user_lastvisit'] : time());		}		else		{			$this->data['session_last_visit'] = $this->time_now;		}		// Force user id to be integer...		$this->data['user_id'] = (int) $this->data['user_id'];		// At this stage we should have a filled data array, defined cookie u and k data.		// data array should contain recent session info if we're a real user and a recent		// session exists in which case session_id will also be set		// Is user banned? Are they excluded? Won't return on ban, exists within method		if ($this->data['user_type'] != USER_FOUNDER)		{			if (!$config['forwarded_for_check'])			{				$this->check_ban($this->data['user_id'], $this->ip);			}			else			{				$ips = explode(' ', $this->forwarded_for);				$ips[] = $this->ip;				$this->check_ban($this->data['user_id'], $ips);			}		}		$this->data['is_registered'] = (!$bot && $this->data['user_id'] != ANONYMOUS && ($this->data['user_type'] == USER_NORMAL || $this->data['user_type'] == USER_FOUNDER)) ? true : false;		$this->data['is_bot'] = ($bot) ? true : false;		// If our friend is a bot, we re-assign a previously assigned session		if ($this->data['is_bot'] && $bot == $this->data['user_id'] && $this->data['session_id'])		{			// Only assign the current session if the ip, browser and forwarded_for match...			if (strpos($this->ip, ':') !== false && strpos($this->data['session_ip'], ':') !== false)			{				$s_ip = short_ipv6($this->data['session_ip'], $config['ip_check']);				$u_ip = short_ipv6($this->ip, $config['ip_check']);			}			else			{				$s_ip = implode('.', array_slice(explode('.', $this->data['session_ip']), 0, $config['ip_check']));				$u_ip = implode('.', array_slice(explode('.', $this->ip), 0, $config['ip_check']));			}			$s_browser = ($config['browser_check']) ? trim(strtolower(substr($this->data['session_browser'], 0, 149))) : '';			$u_browser = ($config['browser_check']) ? trim(strtolower(substr($this->browser, 0, 149))) : '';			$s_forwarded_for = ($config['forwarded_for_check']) ? substr($this->data['session_forwarded_for'], 0, 254) : '';			$u_forwarded_for = ($config['forwarded_for_check']) ? substr($this->forwarded_for, 0, 254) : '';			if ($u_ip === $s_ip && $s_browser === $u_browser && $s_forwarded_for === $u_forwarded_for)			{				$this->session_id = $this->data['session_id'];				// Only update session DB a minute or so after last update or if page changes				if ($this->time_now - $this->data['session_time'] > 60 || ($this->update_session_page && $this->data['session_page'] != $this->page['page']))				{					$this->data['session_time'] = $this->data['session_last_visit'] = $this->time_now;					$sql_ary = array('session_time' => $this->time_now, 'session_last_visit' => $this->time_now, 'session_admin' => 0);					if ($this->update_session_page)					{						$sql_ary['session_page'] = substr($this->page['page'], 0, 199);						$sql_ary['session_forum_id'] = $this->page['forum'];					}					$sql = 'UPDATE ' . SESSIONS_TABLE . ' SET ' . $db->sql_build_array('UPDATE', $sql_ary) . "						WHERE session_id = '" . $db->sql_escape($this->session_id) . "'";					$db->sql_query($sql);					// Update the last visit time					$sql = 'UPDATE ' . USERS_TABLE . '						SET user_lastvisit = ' . (int) $this->data['session_time'] . '						WHERE user_id = ' . (int) $this->data['user_id'];					$db->sql_query($sql);				}				$SID = '?sid=';				$_SID = '';				return true;			}			else			{				// If the ip and browser does not match make sure we only have one bot assigned to one session				$db->sql_query('DELETE FROM ' . SESSIONS_TABLE . ' WHERE session_user_id = ' . $this->data['user_id']);			}		}		$session_autologin = (($this->cookie_data['k'] || $persist_login) && $this->data['is_registered']) ? true : false;		$set_admin = ($set_admin && $this->data['is_registered']) ? true : false;		// Create or update the session		$sql_ary = array(			'session_user_id'		=> (int) $this->data['user_id'],			'session_start'			=> (int) $this->time_now,			'session_last_visit'	=> (int) $this->data['session_last_visit'],			'session_time'			=> (int) $this->time_now,			'session_browser'		=> (string) trim(substr($this->browser, 0, 149)),			'session_forwarded_for'	=> (string) $this->forwarded_for,			'session_ip'			=> (string) $this->ip,			'session_autologin'		=> ($session_autologin) ? 1 : 0,			'session_admin'			=> ($set_admin) ? 1 : 0,			'session_viewonline'	=> ($viewonline) ? 1 : 0,		);		if ($this->update_session_page)		{			$sql_ary['session_page'] = (string) substr($this->page['page'], 0, 199);			$sql_ary['session_forum_id'] = $this->page['forum'];		}		$db->sql_return_on_error(true);		$sql = 'DELETE			FROM ' . SESSIONS_TABLE . '			WHERE session_id = \'' . $db->sql_escape($this->session_id) . '\'				AND session_user_id = ' . ANONYMOUS;		if (!defined('IN_ERROR_HANDLER') && (!$this->session_id || !$db->sql_query($sql) || !$db->sql_affectedrows()))		{			// Limit new sessions in 1 minute period (if required)			if (empty($this->data['session_time']) && $config['active_sessions'])			{//				$db->sql_return_on_error(false);				$sql = 'SELECT COUNT(session_id) AS sessions					FROM ' . SESSIONS_TABLE . '					WHERE session_time >= ' . ($this->time_now - 60);				$result = $db->sql_query($sql);				$row = $db->sql_fetchrow($result);				$db->sql_freeresult($result);				if ((int) $row['sessions'] > (int) $config['active_sessions'])				{					send_status_line(503, 'Service Unavailable');					trigger_error('BOARD_UNAVAILABLE');				}			}		}		// Since we re-create the session id here, the inserted row must be unique. Therefore, we display potential errors.		// Commented out because it will not allow forums to update correctly//		$db->sql_return_on_error(false);		// Something quite important: session_page always holds the *last* page visited, except for the *first* visit.		// We are not able to simply have an empty session_page btw, therefore we need to tell phpBB how to detect this special case.		// If the session id is empty, we have a completely new one and will set an "identifier" here. This identifier is able to be checked later.		if (empty($this->data['session_id']))		{			// This is a temporary variable, only set for the very first visit			$this->data['session_created'] = true;		}		$this->session_id = $this->data['session_id'] = md5(unique_id());		$sql_ary['session_id'] = (string) $this->session_id;		$sql_ary['session_page'] = (string) substr($this->page['page'], 0, 199);		$sql_ary['session_forum_id'] = $this->page['forum'];		$sql = 'INSERT INTO ' . SESSIONS_TABLE . ' ' . $db->sql_build_array('INSERT', $sql_ary);		$db->sql_query($sql);		$db->sql_return_on_error(false);		// Regenerate autologin/persistent login key		if ($session_autologin)		{			$this->set_login_key();		}		// refresh data		$SID = '?sid=' . $this->session_id;		$_SID = $this->session_id;		$this->data = array_merge($this->data, $sql_ary);		if (!$bot)		{			$cookie_expire = $this->time_now + (($config['max_autologin_time']) ? 86400 * (int) $config['max_autologin_time'] : 31536000);			$this->set_cookie('u', $this->cookie_data['u'], $cookie_expire);			$this->set_cookie('k', $this->cookie_data['k'], $cookie_expire);			$this->set_cookie('sid', $this->session_id, $cookie_expire);			unset($cookie_expire);			$sql = 'SELECT COUNT(session_id) AS sessions					FROM ' . SESSIONS_TABLE . '					WHERE session_user_id = ' . (int) $this->data['user_id'] . '					AND session_time >= ' . (int) ($this->time_now - (max($config['session_length'], $config['form_token_lifetime'])));			$result = $db->sql_query($sql);			$row = $db->sql_fetchrow($result);			$db->sql_freeresult($result);			if ((int) $row['sessions'] <= 1 || empty($this->data['user_form_salt']))			{				$this->data['user_form_salt'] = unique_id();				// Update the form key				$sql = 'UPDATE ' . USERS_TABLE . '					SET user_form_salt = \'' . $db->sql_escape($this->data['user_form_salt']) . '\'					WHERE user_id = ' . (int) $this->data['user_id'];				$db->sql_query($sql);			}		}		else		{			$this->data['session_time'] = $this->data['session_last_visit'] = $this->time_now;			// Update the last visit time			$sql = 'UPDATE ' . USERS_TABLE . '				SET user_lastvisit = ' . (int) $this->data['session_time'] . '				WHERE user_id = ' . (int) $this->data['user_id'];			$db->sql_query($sql);			$SID = '?sid=';			$_SID = '';		}		return true;	}	/**	* Kills a session	*	* This method does what it says on the tin. It will delete a pre-existing session.	* It resets cookie information (destroying any autologin key within that cookie data)	* and update the users information from the relevant session data. It will then	* grab guest user information.	*/	function session_kill($new_session = true)	{		global $SID, $_SID, $db, $config, $phpbb_root_path, $phpEx;		$sql = 'DELETE FROM ' . SESSIONS_TABLE . "			WHERE session_id = '" . $db->sql_escape($this->session_id) . "'				AND session_user_id = " . (int) $this->data['user_id'];		$db->sql_query($sql);		// Allow connecting logout with external auth method logout		$method = basename(trim($config['auth_method']));		include_once($phpbb_root_path . 'includes/auth/auth_' . $method . '.' . $phpEx);		$method = 'logout_' . $method;		if (function_exists($method))		{			$method($this->data, $new_session);		}		if ($this->data['user_id'] != ANONYMOUS)		{			// Delete existing session, update last visit info first!			if (!isset($this->data['session_time']))			{				$this->data['session_time'] = time();			}			$sql = 'UPDATE ' . USERS_TABLE . '				SET user_lastvisit = ' . (int) $this->data['session_time'] . '				WHERE user_id = ' . (int) $this->data['user_id'];			$db->sql_query($sql);			if ($this->cookie_data['k'])			{				$sql = 'DELETE FROM ' . SESSIONS_KEYS_TABLE . '					WHERE user_id = ' . (int) $this->data['user_id'] . "						AND key_id = '" . $db->sql_escape(md5($this->cookie_data['k'])) . "'";				$db->sql_query($sql);			}			// Reset the data array			$this->data = array();			$sql = 'SELECT *				FROM ' . USERS_TABLE . '				WHERE user_id = ' . ANONYMOUS;			$result = $db->sql_query($sql);			$this->data = $db->sql_fetchrow($result);			$db->sql_freeresult($result);		}		$cookie_expire = $this->time_now - 31536000;		$this->set_cookie('u', '', $cookie_expire);		$this->set_cookie('k', '', $cookie_expire);		$this->set_cookie('sid', '', $cookie_expire);		unset($cookie_expire);		$SID = '?sid=';		$this->session_id = $_SID = '';		// To make sure a valid session is created we create one for the anonymous user		if ($new_session)		{			$this->session_create(ANONYMOUS);		}		return true;	}	/**	* Session garbage collection	*	* This looks a lot more complex than it really is. Effectively we are	* deleting any sessions older than an admin definable limit. Due to the	* way in which we maintain session data we have to ensure we update user	* data before those sessions are destroyed. In addition this method	* removes autologin key information that is older than an admin defined	* limit.	*/	function session_gc()	{		global $db, $config, $phpbb_root_path, $phpEx;		$batch_size = 10;		if (!$this->time_now)		{			$this->time_now = time();		}		// Firstly, delete guest sessions		$sql = 'DELETE FROM ' . SESSIONS_TABLE . '			WHERE session_user_id = ' . ANONYMOUS . '				AND session_time < ' . (int) ($this->time_now - $config['session_length']);		$db->sql_query($sql);		// Get expired sessions, only most recent for each user		$sql = 'SELECT session_user_id, session_page, MAX(session_time) AS recent_time			FROM ' . SESSIONS_TABLE . '			WHERE session_time < ' . ($this->time_now - $config['session_length']) . '			GROUP BY session_user_id, session_page';		$result = $db->sql_query_limit($sql, $batch_size);		$del_user_id = array();		$del_sessions = 0;		while ($row = $db->sql_fetchrow($result))		{			$sql = 'UPDATE ' . USERS_TABLE . '				SET user_lastvisit = ' . (int) $row['recent_time'] . ", user_lastpage = '" . $db->sql_escape($row['session_page']) . "'				WHERE user_id = " . (int) $row['session_user_id'];			$db->sql_query($sql);			$del_user_id[] = (int) $row['session_user_id'];			$del_sessions++;		}		$db->sql_freeresult($result);		if (sizeof($del_user_id))		{			// Delete expired sessions			$sql = 'DELETE FROM ' . SESSIONS_TABLE . '				WHERE ' . $db->sql_in_set('session_user_id', $del_user_id) . '					AND session_time < ' . ($this->time_now - $config['session_length']);			$db->sql_query($sql);		}		if ($del_sessions < $batch_size)		{			// Less than 10 users, update gc timer ... else we want gc			// called again to delete other sessions			set_config('session_last_gc', $this->time_now, true);			if ($config['max_autologin_time'])			{				$sql = 'DELETE FROM ' . SESSIONS_KEYS_TABLE . '					WHERE last_login < ' . (time() - (86400 * (int) $config['max_autologin_time']));				$db->sql_query($sql);			}			// only called from CRON; should be a safe workaround until the infrastructure gets going			if (!class_exists('phpbb_captcha_factory'))			{				include($phpbb_root_path . "includes/captcha/captcha_factory." . $phpEx);			}			phpbb_captcha_factory::garbage_collect($config['captcha_plugin']);			$sql = 'DELETE FROM ' . LOGIN_ATTEMPT_TABLE . '				WHERE attempt_time < ' . (time() - (int) $config['ip_login_limit_time']);			$db->sql_query($sql);		}		return;	}	/**	* Sets a cookie	*	* Sets a cookie of the given name with the specified data for the given length of time. If no time is specified, a session cookie will be set.	*	* @param string $name		Name of the cookie, will be automatically prefixed with the phpBB cookie name. track becomes [cookie_name]_track then.	* @param string $cookiedata	The data to hold within the cookie	* @param int $cookietime	The expiration time as UNIX timestamp. If 0 is provided, a session cookie is set.	*/	function set_cookie($name, $cookiedata, $cookietime)	{		global $config;		$name_data = rawurlencode($config['cookie_name'] . '_' . $name) . '=' . rawurlencode($cookiedata);		$expire = gmdate('D, d-M-Y H:i:s \\G\\M\\T', $cookietime);		$domain = (!$config['cookie_domain'] || $config['cookie_domain'] == 'localhost' || $config['cookie_domain'] == '127.0.0.1') ? '' : '; domain=' . $config['cookie_domain'];		header('Set-Cookie: ' . $name_data . (($cookietime) ? '; expires=' . $expire : '') . '; path=' . $config['cookie_path'] . $domain . ((!$config['cookie_secure']) ? '' : '; secure') . '; HttpOnly', false);	}	/**	* Check for banned user	*	* Checks whether the supplied user is banned by id, ip or email. If no parameters	* are passed to the method pre-existing session data is used. If $return is false	* this routine does not return on finding a banned user, it outputs a relevant	* message and stops execution.	*	* @param string|array	$user_ips	Can contain a string with one IP or an array of multiple IPs	*/	function check_ban($user_id = false, $user_ips = false, $user_email = false, $return = false)	{		global $config, $db;		if (defined('IN_CHECK_BAN'))		{			return;		}		$banned = false;		$cache_ttl = 3600;		$where_sql = array();		$sql = 'SELECT ban_ip, ban_userid, ban_email, ban_exclude, ban_give_reason, ban_end			FROM ' . BANLIST_TABLE . '			WHERE ';		// Determine which entries to check, only return those		if ($user_email === false)		{			$where_sql[] = "ban_email = ''";		}		if ($user_ips === false)		{			$where_sql[] = "(ban_ip = '' OR ban_exclude = 1)";		}		if ($user_id === false)		{			$where_sql[] = '(ban_userid = 0 OR ban_exclude = 1)';		}		else		{			$cache_ttl = ($user_id == ANONYMOUS) ? 3600 : 0;			$_sql = '(ban_userid = ' . $user_id;			if ($user_email !== false)			{				$_sql .= " OR ban_email <> ''";			}			if ($user_ips !== false)			{				$_sql .= " OR ban_ip <> ''";			}			$_sql .= ')';			$where_sql[] = $_sql;		}		$sql .= (sizeof($where_sql)) ? implode(' AND ', $where_sql) : '';		$result = $db->sql_query($sql, $cache_ttl);		$ban_triggered_by = 'user';		while ($row = $db->sql_fetchrow($result))		{			if ($row['ban_end'] && $row['ban_end'] < time())			{				continue;			}			$ip_banned = false;			if (!empty($row['ban_ip']))			{				if (!is_array($user_ips))				{					$ip_banned = preg_match('#^' . str_replace('\*', '.*?', preg_quote($row['ban_ip'], '#')) . '$#i', $user_ips);				}				else				{					foreach ($user_ips as $user_ip)					{						if (preg_match('#^' . str_replace('\*', '.*?', preg_quote($row['ban_ip'], '#')) . '$#i', $user_ip))						{							$ip_banned = true;							break;						}					}				}			}			if ((!empty($row['ban_userid']) && intval($row['ban_userid']) == $user_id) ||				$ip_banned ||				(!empty($row['ban_email']) && preg_match('#^' . str_replace('\*', '.*?', preg_quote($row['ban_email'], '#')) . '$#i', $user_email)))			{				if (!empty($row['ban_exclude']))				{					$banned = false;					break;				}				else				{					$banned = true;					$ban_row = $row;					if (!empty($row['ban_userid']) && intval($row['ban_userid']) == $user_id)					{						$ban_triggered_by = 'user';					}					else if ($ip_banned)					{						$ban_triggered_by = 'ip';					}					else					{						$ban_triggered_by = 'email';					}					// Don't break. Check if there is an exclude rule for this user				}			}		}		$db->sql_freeresult($result);		if ($banned && !$return)		{			global $template;			// If the session is empty we need to create a valid one...			if (empty($this->session_id))			{				// This seems to be no longer needed? - #14971//				$this->session_create(ANONYMOUS);			}			// Initiate environment ... since it won't be set at this stage			$this->setup();			// Logout the user, banned users are unable to use the normal 'logout' link			if ($this->data['user_id'] != ANONYMOUS)			{				$this->session_kill();			}			// We show a login box here to allow founders accessing the board if banned by IP			if (defined('IN_LOGIN') && $this->data['user_id'] == ANONYMOUS)			{				global $phpEx;				$this->setup('ucp');				$this->data['is_registered'] = $this->data['is_bot'] = false;				// Set as a precaution to allow login_box() handling this case correctly as well as this function not being executed again.				define('IN_CHECK_BAN', 1);				login_box("index.$phpEx");				// The false here is needed, else the user is able to circumvent the ban.				$this->session_kill(false);			}			// Ok, we catch the case of an empty session id for the anonymous user...			// This can happen if the user is logging in, banned by username and the login_box() being called "again".			if (empty($this->session_id) && defined('IN_CHECK_BAN'))			{				$this->session_create(ANONYMOUS);			}			// Determine which message to output			$till_date = ($ban_row['ban_end']) ? $this->format_date($ban_row['ban_end']) : '';			$message = ($ban_row['ban_end']) ? 'BOARD_BAN_TIME' : 'BOARD_BAN_PERM';			$message = sprintf($this->lang[$message], $till_date, '<a href="mailto:' . $config['board_contact'] . '">', '</a>');			$message .= ($ban_row['ban_give_reason']) ? '<br /><br />' . sprintf($this->lang['BOARD_BAN_REASON'], $ban_row['ban_give_reason']) : '';			$message .= '<br /><br /><em>' . $this->lang['BAN_TRIGGERED_BY_' . strtoupper($ban_triggered_by)] . '</em>';			// To circumvent session_begin returning a valid value and the check_ban() not called on second page view, we kill the session again			$this->session_kill(false);			// A very special case... we are within the cron script which is not supposed to print out the ban message... show blank page			if (defined('IN_CRON'))			{				garbage_collection();				exit_handler();				exit;			}			trigger_error($message);		}		return ($banned && $ban_row['ban_give_reason']) ? $ban_row['ban_give_reason'] : $banned;	}	/**	* Check if ip is blacklisted	* This should be called only where absolutly necessary	*	* Only IPv4 (rbldns does not support AAAA records/IPv6 lookups)	*	* @author satmd (from the php manual)	* @param string $mode register/post - spamcop for example is ommitted for posting	* @return false if ip is not blacklisted, else an array([checked server], [lookup])	*/	function check_dnsbl($mode, $ip = false)	{		if ($ip === false)		{			$ip = $this->ip;		}		// Neither Spamhaus nor Spamcop supports IPv6 addresses.		if (strpos($ip, ':') !== false)		{			return false;		}		$dnsbl_check = array(			'sbl.spamhaus.org'	=> 'http://www.spamhaus.org/query/bl?ip=',		);		if ($mode == 'register')		{			$dnsbl_check['bl.spamcop.net'] = 'http://spamcop.net/bl.shtml?';		}		if ($ip)		{			$quads = explode('.', $ip);			$reverse_ip = $quads[3] . '.' . $quads[2] . '.' . $quads[1] . '.' . $quads[0];			// Need to be listed on all servers...			$listed = true;			$info = array();			foreach ($dnsbl_check as $dnsbl => $lookup)			{				if (phpbb_checkdnsrr($reverse_ip . '.' . $dnsbl . '.', 'A') === true)				{					$info = array($dnsbl, $lookup . $ip);				}				else				{					$listed = false;				}			}			if ($listed)			{				return $info;			}		}		return false;	}	/**	* Check if URI is blacklisted	* This should be called only where absolutly necessary, for example on the submitted website field	* This function is not in use at the moment and is only included for testing purposes, it may not work at all!	* This means it is untested at the moment and therefore commented out	*	* @param string $uri URI to check	* @return true if uri is on blacklist, else false. Only blacklist is checked (~zero FP), no grey lists	function check_uribl($uri)	{		// Normally parse_url() is not intended to parse uris		// We need to get the top-level domain name anyway... change.		$uri = parse_url($uri);		if ($uri === false || empty($uri['host']))		{			return false;		}		$uri = trim($uri['host']);		if ($uri)		{			// One problem here... the return parameter for the "windows" method is different from what			// we expect... this may render this check useless...			if (phpbb_checkdnsrr($uri . '.multi.uribl.com.', 'A') === true)			{				return true;			}		}		return false;	}	*/	/**	* Set/Update a persistent login key	*	* This method creates or updates a persistent session key. When a user makes	* use of persistent (formerly auto-) logins a key is generated and stored in the	* DB. When they revisit with the same key it's automatically updated in both the	* DB and cookie. Multiple keys may exist for each user representing different	* browsers or locations. As with _any_ non-secure-socket no passphrase login this	* remains vulnerable to exploit.	*/	function set_login_key($user_id = false, $key = false, $user_ip = false)	{		global $config, $db;		$user_id = ($user_id === false) ? $this->data['user_id'] : $user_id;		$user_ip = ($user_ip === false) ? $this->ip : $user_ip;		$key = ($key === false) ? (($this->cookie_data['k']) ? $this->cookie_data['k'] : false) : $key;		$key_id = unique_id(hexdec(substr($this->session_id, 0, 8)));		$sql_ary = array(			'key_id'		=> (string) md5($key_id),			'last_ip'		=> (string) $this->ip,			'last_login'	=> (int) time()		);		if (!$key)		{			$sql_ary += array(				'user_id'	=> (int) $user_id			);		}		if ($key)		{			$sql = 'UPDATE ' . SESSIONS_KEYS_TABLE . '				SET ' . $db->sql_build_array('UPDATE', $sql_ary) . '				WHERE user_id = ' . (int) $user_id . "					AND key_id = '" . $db->sql_escape(md5($key)) . "'";		}		else		{			$sql = 'INSERT INTO ' . SESSIONS_KEYS_TABLE . ' ' . $db->sql_build_array('INSERT', $sql_ary);		}		$db->sql_query($sql);		$this->cookie_data['k'] = $key_id;		return false;	}	/**	* Reset all login keys for the specified user	*	* This method removes all current login keys for a specified (or the current)	* user. It will be called on password change to render old keys unusable	*/	function reset_login_keys($user_id = false)	{		global $config, $db;		$user_id = ($user_id === false) ? (int) $this->data['user_id'] : (int) $user_id;		$sql = 'DELETE FROM ' . SESSIONS_KEYS_TABLE . '			WHERE user_id = ' . (int) $user_id;		$db->sql_query($sql);		// If the user is logged in, update last visit info first before deleting sessions		$sql = 'SELECT session_time, session_page			FROM ' . SESSIONS_TABLE . '			WHERE session_user_id = ' . (int) $user_id . '			ORDER BY session_time DESC';		$result = $db->sql_query_limit($sql, 1);		$row = $db->sql_fetchrow($result);		$db->sql_freeresult($result);		if ($row)		{			$sql = 'UPDATE ' . USERS_TABLE . '				SET user_lastvisit = ' . (int) $row['session_time'] . ", user_lastpage = '" . $db->sql_escape($row['session_page']) . "'				WHERE user_id = " . (int) $user_id;			$db->sql_query($sql);		}		// Let's also clear any current sessions for the specified user_id		// If it's the current user then we'll leave this session intact		$sql_where = 'session_user_id = ' . (int) $user_id;		$sql_where .= ($user_id === (int) $this->data['user_id']) ? " AND session_id <> '" . $db->sql_escape($this->session_id) . "'" : '';		$sql = 'DELETE FROM ' . SESSIONS_TABLE . "			WHERE $sql_where";		$db->sql_query($sql);		// We're changing the password of the current user and they have a key		// Lets regenerate it to be safe		if ($user_id === (int) $this->data['user_id'] && $this->cookie_data['k'])		{			$this->set_login_key($user_id);		}	}	/**	* Check if the request originated from the same page.	* @param bool $check_script_path If true, the path will be checked as well	*/	function validate_referer($check_script_path = false)	{		global $config;		// no referer - nothing to validate, user's fault for turning it off (we only check on POST; so meta can't be the reason)		if (empty($this->referer) || empty($this->host))		{			return true;		}		$host = htmlspecialchars($this->host);		$ref = substr($this->referer, strpos($this->referer, '://') + 3);		if (!(stripos($ref, $host) === 0) && (!$config['force_server_vars'] || !(stripos($ref, $config['server_name']) === 0)))		{			return false;		}		else if ($check_script_path && rtrim($this->page['root_script_path'], '/') !== '')		{			$ref = substr($ref, strlen($host));			$server_port = (!empty($_SERVER['SERVER_PORT'])) ? (int) $_SERVER['SERVER_PORT'] : (int) getenv('SERVER_PORT');			if ($server_port !== 80 && $server_port !== 443 && stripos($ref, ":$server_port") === 0)			{				$ref = substr($ref, strlen(":$server_port"));			}			if (!(stripos(rtrim($ref, '/'), rtrim($this->page['root_script_path'], '/')) === 0))			{				return false;			}		}		return true;	}	function unset_admin()	{		global $db;		$sql = 'UPDATE ' . SESSIONS_TABLE . '			SET session_admin = 0			WHERE session_id = \'' . $db->sql_escape($this->session_id) . '\'';		$db->sql_query($sql);	}}/*** Base user class** This is the overarching class which contains (through session extend)* all methods utilised for user functionality during a session.** @package phpBB3*/class user extends session{	var $lang = array();	var $help = array();	var $theme = array();	var $date_format;	var $timezone;	var $dst;	var $lang_name = false;	var $lang_id = false;	var $lang_path;	var $img_lang;	var $img_array = array();	// Able to add new options (up to id 31)	var $keyoptions = array('viewimg' => 0, 'viewflash' => 1, 'viewsmilies' => 2, 'viewsigs' => 3, 'viewavatars' => 4, 'viewcensors' => 5, 'attachsig' => 6, 'bbcode' => 8, 'smilies' => 9, 'popuppm' => 10, 'sig_bbcode' => 15, 'sig_smilies' => 16, 'sig_links' => 17);	var $keyvalues = array();	/**	* Constructor to set the lang path	*/	function user()	{		global $phpbb_root_path;		$this->lang_path = $phpbb_root_path . 'language/';	}	/**	* Function to set custom language path (able to use directory outside of phpBB)	*	* @param string $lang_path New language path used.	* @access public	*/	function set_custom_lang_path($lang_path)	{		$this->lang_path = $lang_path;		if (substr($this->lang_path, -1) != '/')		{			$this->lang_path .= '/';		}	}	/**	* Setup basic user-specific items (style, language, ...)	*/	function setup($lang_set = false, $style = false)	{		global $db, $template, $config, $auth, $phpEx, $phpbb_root_path, $cache;		if ($this->data['user_id'] != ANONYMOUS)		{			$this->lang_name = (file_exists($this->lang_path . $this->data['user_lang'] . "/common.$phpEx")) ? $this->data['user_lang'] : basename($config['default_lang']);			$this->date_format = $this->data['user_dateformat'];			$this->timezone = $this->data['user_timezone'] * 3600;			$this->dst = $this->data['user_dst'] * 3600;		}		else		{			$this->lang_name = basename($config['default_lang']);			$this->date_format = $config['default_dateformat'];			$this->timezone = $config['board_timezone'] * 3600;			$this->dst = $config['board_dst'] * 3600;			/**			* If a guest user is surfing, we try to guess his/her language first by obtaining the browser language			* If re-enabled we need to make sure only those languages installed are checked			* Commented out so we do not loose the code.			if (isset($_SERVER['HTTP_ACCEPT_LANGUAGE']))			{				$accept_lang_ary = explode(',', $_SERVER['HTTP_ACCEPT_LANGUAGE']);				foreach ($accept_lang_ary as $accept_lang)				{					// Set correct format ... guess full xx_YY form					$accept_lang = substr($accept_lang, 0, 2) . '_' . strtoupper(substr($accept_lang, 3, 2));					$accept_lang = basename($accept_lang);					if (file_exists($this->lang_path . $accept_lang . "/common.$phpEx"))					{						$this->lang_name = $config['default_lang'] = $accept_lang;						break;					}					else					{						// No match on xx_YY so try xx						$accept_lang = substr($accept_lang, 0, 2);						$accept_lang = basename($accept_lang);						if (file_exists($this->lang_path . $accept_lang . "/common.$phpEx"))						{							$this->lang_name = $config['default_lang'] = $accept_lang;							break;						}					}				}			}			*/		}		// We include common language file here to not load it every time a custom language file is included		$lang = &$this->lang;		// Do not suppress error if in DEBUG_EXTRA mode		$include_result = (defined('DEBUG_EXTRA')) ? (include $this->lang_path . $this->lang_name . "/common.$phpEx") : (@include $this->lang_path . $this->lang_name . "/common.$phpEx");		if ($include_result === false)		{			die('Language file ' . $this->lang_path . $this->lang_name . "/common.$phpEx" . " couldn't be opened.");		}		$this->add_lang($lang_set);		unset($lang_set);		if (!empty($_GET['style']) && $auth->acl_get('a_styles') && !defined('ADMIN_START'))		{			global $SID, $_EXTRA_URL;			$style = request_var('style', 0);			$SID .= '&amp;style=' . $style;			$_EXTRA_URL = array('style=' . $style);		}		else		{			// Set up style			$style = ($style) ? $style : ((!$config['override_user_style']) ? $this->data['user_style'] : $config['default_style']);		}		$sql = 'SELECT s.style_id, t.template_storedb, t.template_path, t.template_id, t.bbcode_bitfield, t.template_inherits_id, t.template_inherit_path, c.theme_path, c.theme_name, c.theme_storedb, c.theme_id, i.imageset_path, i.imageset_id, i.imageset_name			FROM ' . STYLES_TABLE . ' s, ' . STYLES_TEMPLATE_TABLE . ' t, ' . STYLES_THEME_TABLE . ' c, ' . STYLES_IMAGESET_TABLE . " i			WHERE s.style_id = $style				AND t.template_id = s.template_id				AND c.theme_id = s.theme_id				AND i.imageset_id = s.imageset_id";		$result = $db->sql_query($sql, 3600);		$this->theme = $db->sql_fetchrow($result);		$db->sql_freeresult($result);		// User has wrong style		if (!$this->theme && $style == $this->data['user_style'])		{			$style = $this->data['user_style'] = $config['default_style'];			$sql = 'UPDATE ' . USERS_TABLE . "				SET user_style = $style				WHERE user_id = {$this->data['user_id']}";			$db->sql_query($sql);			$sql = 'SELECT s.style_id, t.template_storedb, t.template_path, t.template_id, t.bbcode_bitfield, c.theme_path, c.theme_name, c.theme_storedb, c.theme_id, i.imageset_path, i.imageset_id, i.imageset_name				FROM ' . STYLES_TABLE . ' s, ' . STYLES_TEMPLATE_TABLE . ' t, ' . STYLES_THEME_TABLE . ' c, ' . STYLES_IMAGESET_TABLE . " i				WHERE s.style_id = $style					AND t.template_id = s.template_id					AND c.theme_id = s.theme_id					AND i.imageset_id = s.imageset_id";			$result = $db->sql_query($sql, 3600);			$this->theme = $db->sql_fetchrow($result);			$db->sql_freeresult($result);		}		if (!$this->theme)		{			trigger_error('Could not get style data', E_USER_ERROR);		}		// Now parse the cfg file and cache it		$parsed_items = $cache->obtain_cfg_items($this->theme);		// We are only interested in the theme configuration for now		$parsed_items = $parsed_items['theme'];		$check_for = array(			'parse_css_file'	=> (int) 0,			'pagination_sep'	=> (string) ', '		);		foreach ($check_for as $key => $default_value)		{			$this->theme[$key] = (isset($parsed_items[$key])) ? $parsed_items[$key] : $default_value;			settype($this->theme[$key], gettype($default_value));			if (is_string($default_value))			{				$this->theme[$key] = htmlspecialchars($this->theme[$key]);			}		}		// If the style author specified the theme needs to be cached		// (because of the used paths and variables) than make sure it is the case.		// For example, if the theme uses language-specific images it needs to be stored in db.		if (!$this->theme['theme_storedb'] && $this->theme['parse_css_file'])		{			$this->theme['theme_storedb'] = 1;			$stylesheet = file_get_contents("{$phpbb_root_path}styles/{$this->theme['theme_path']}/theme/stylesheet.css");			// Match CSS imports			$matches = array();			preg_match_all('/@import url\(["\'](.*)["\']\);/i', $stylesheet, $matches);			if (sizeof($matches))			{				$content = '';				foreach ($matches[0] as $idx => $match)				{					if ($content = @file_get_contents("{$phpbb_root_path}styles/{$this->theme['theme_path']}/theme/" . $matches[1][$idx]))					{						$content = trim($content);					}					else					{						$content = '';					}					$stylesheet = str_replace($match, $content, $stylesheet);				}				unset($content);			}			$stylesheet = str_replace('./', 'styles/' . $this->theme['theme_path'] . '/theme/', $stylesheet);			$sql_ary = array(				'theme_data'	=> $stylesheet,				'theme_mtime'	=> time(),				'theme_storedb'	=> 1			);			$sql = 'UPDATE ' . STYLES_THEME_TABLE . '				SET ' . $db->sql_build_array('UPDATE', $sql_ary) . '				WHERE theme_id = ' . $this->theme['theme_id'];			$db->sql_query($sql);			unset($sql_ary);		}		$template->set_template();		$this->img_lang = (file_exists($phpbb_root_path . 'styles/' . $this->theme['imageset_path'] . '/imageset/' . $this->lang_name)) ? $this->lang_name : $config['default_lang'];		// Same query in style.php		$sql = 'SELECT *			FROM ' . STYLES_IMAGESET_DATA_TABLE . '			WHERE imageset_id = ' . $this->theme['imageset_id'] . "			AND image_filename <> ''			AND image_lang IN ('" . $db->sql_escape($this->img_lang) . "', '')";		$result = $db->sql_query($sql, 3600);		$localised_images = false;		while ($row = $db->sql_fetchrow($result))		{			if ($row['image_lang'])			{				$localised_images = true;			}			$row['image_filename'] = rawurlencode($row['image_filename']);			$this->img_array[$row['image_name']] = $row;		}		$db->sql_freeresult($result);		// there were no localised images, try to refresh the localised imageset for the user's language		if (!$localised_images)		{			// Attention: this code ignores the image definition list from acp_styles and just takes everything			// that the config file contains			$sql_ary = array();			$db->sql_transaction('begin');			$sql = 'DELETE FROM ' . STYLES_IMAGESET_DATA_TABLE . '				WHERE imageset_id = ' . $this->theme['imageset_id'] . '					AND image_lang = \'' . $db->sql_escape($this->img_lang) . '\'';			$result = $db->sql_query($sql);			if (@file_exists("{$phpbb_root_path}styles/{$this->theme['imageset_path']}/imageset/{$this->img_lang}/imageset.cfg"))			{				$cfg_data_imageset_data = parse_cfg_file("{$phpbb_root_path}styles/{$this->theme['imageset_path']}/imageset/{$this->img_lang}/imageset.cfg");				foreach ($cfg_data_imageset_data as $image_name => $value)				{					if (strpos($value, '*') !== false)					{						if (substr($value, -1, 1) === '*')						{							list($image_filename, $image_height) = explode('*', $value);							$image_width = 0;						}						else						{							list($image_filename, $image_height, $image_width) = explode('*', $value);						}					}					else					{						$image_filename = $value;						$image_height = $image_width = 0;					}					if (strpos($image_name, 'img_') === 0 && $image_filename)					{						$image_name = substr($image_name, 4);						$sql_ary[] = array(							'image_name'		=> (string) $image_name,							'image_filename'	=> (string) $image_filename,							'image_height'		=> (int) $image_height,							'image_width'		=> (int) $image_width,							'imageset_id'		=> (int) $this->theme['imageset_id'],							'image_lang'		=> (string) $this->img_lang,						);					}				}			}			if (sizeof($sql_ary))			{				$db->sql_multi_insert(STYLES_IMAGESET_DATA_TABLE, $sql_ary);				$db->sql_transaction('commit');				$cache->destroy('sql', STYLES_IMAGESET_DATA_TABLE);				add_log('admin', 'LOG_IMAGESET_LANG_REFRESHED', $this->theme['imageset_name'], $this->img_lang);			}			else			{				$db->sql_transaction('commit');				add_log('admin', 'LOG_IMAGESET_LANG_MISSING', $this->theme['imageset_name'], $this->img_lang);			}		}		// Call phpbb_user_session_handler() in case external application want to "bend" some variables or replace classes...		// After calling it we continue script execution...		phpbb_user_session_handler();		// If this function got called from the error handler we are finished here.		if (defined('IN_ERROR_HANDLER'))		{			return;		}		// Disable board if the install/ directory is still present		// For the brave development army we do not care about this, else we need to comment out this everytime we develop locally		if (!defined('DEBUG_EXTRA') && !defined('ADMIN_START') && !defined('IN_INSTALL') && !defined('IN_LOGIN') && file_exists($phpbb_root_path . 'install') && !is_file($phpbb_root_path . 'install'))		{			// Adjust the message slightly according to the permissions			if ($auth->acl_gets('a_', 'm_') || $auth->acl_getf_global('m_'))			{				$message = 'REMOVE_INSTALL';			}			else			{				$message = (!empty($config['board_disable_msg'])) ? $config['board_disable_msg'] : 'BOARD_DISABLE';			}			trigger_error($message);		}		// Is board disabled and user not an admin or moderator?		if ($config['board_disable'] && !defined('IN_LOGIN') && !$auth->acl_gets('a_', 'm_') && !$auth->acl_getf_global('m_'))		{			if ($this->data['is_bot'])			{				send_status_line(503, 'Service Unavailable');			}			$message = (!empty($config['board_disable_msg'])) ? $config['board_disable_msg'] : 'BOARD_DISABLE';			trigger_error($message);		}		// Is load exceeded?		if ($config['limit_load'] && $this->load !== false)		{			if ($this->load > floatval($config['limit_load']) && !defined('IN_LOGIN') && !defined('IN_ADMIN'))			{				// Set board disabled to true to let the admins/mods get the proper notification				$config['board_disable'] = '1';				if (!$auth->acl_gets('a_', 'm_') && !$auth->acl_getf_global('m_'))				{					if ($this->data['is_bot'])					{						send_status_line(503, 'Service Unavailable');					}					trigger_error('BOARD_UNAVAILABLE');				}			}		}		if (isset($this->data['session_viewonline']))		{			// Make sure the user is able to hide his session			if (!$this->data['session_viewonline'])			{				// Reset online status if not allowed to hide the session...				if (!$auth->acl_get('u_hideonline'))				{					$sql = 'UPDATE ' . SESSIONS_TABLE . '						SET session_viewonline = 1						WHERE session_user_id = ' . $this->data['user_id'];					$db->sql_query($sql);					$this->data['session_viewonline'] = 1;				}			}			else if (!$this->data['user_allow_viewonline'])			{				// the user wants to hide and is allowed to  -> cloaking device on.				if ($auth->acl_get('u_hideonline'))				{					$sql = 'UPDATE ' . SESSIONS_TABLE . '						SET session_viewonline = 0						WHERE session_user_id = ' . $this->data['user_id'];					$db->sql_query($sql);					$this->data['session_viewonline'] = 0;				}			}		}		// Does the user need to change their password? If so, redirect to the		// ucp profile reg_details page ... of course do not redirect if we're already in the ucp		if (!defined('IN_ADMIN') && !defined('ADMIN_START') && $config['chg_passforce'] && !empty($this->data['is_registered']) && $auth->acl_get('u_chgpasswd') && $this->data['user_passchg'] < time() - ($config['chg_passforce'] * 86400))		{			if (strpos($this->page['query_string'], 'mode=reg_details') === false && $this->page['page_name'] != "ucp.$phpEx")			{				redirect(append_sid("{$phpbb_root_path}ucp.$phpEx", 'i=profile&amp;mode=reg_details'));			}		}		return;	}	/**	* More advanced language substitution	* Function to mimic sprintf() with the possibility of using phpBB's language system to substitute nullar/singular/plural forms.	* Params are the language key and the parameters to be substituted.	* This function/functionality is inspired by SHS` and Ashe.	*	* Example call: <samp>$user->lang('NUM_POSTS_IN_QUEUE', 1);</samp>	*/	function lang()	{		$args = func_get_args();		$key = $args[0];		if (is_array($key))		{			$lang = &$this->lang[array_shift($key)];			foreach ($key as $_key)			{				$lang = &$lang[$_key];			}		}		else		{			$lang = &$this->lang[$key];		}		// Return if language string does not exist		if (!isset($lang) || (!is_string($lang) && !is_array($lang)))		{			return $key;		}		// If the language entry is a string, we simply mimic sprintf() behaviour		if (is_string($lang))		{			if (sizeof($args) == 1)			{				return $lang;			}			// Replace key with language entry and simply pass along...			$args[0] = $lang;			return call_user_func_array('sprintf', $args);		}		// It is an array... now handle different nullar/singular/plural forms		$key_found = false;		// We now get the first number passed and will select the key based upon this number		for ($i = 1, $num_args = sizeof($args); $i < $num_args; $i++)		{			if (is_int($args[$i]))			{				$numbers = array_keys($lang);				foreach ($numbers as $num)				{					if ($num > $args[$i])					{						break;					}					$key_found = $num;				}				break;			}		}		// Ok, let's check if the key was found, else use the last entry (because it is mostly the plural form)		if ($key_found === false)		{			$numbers = array_keys($lang);			$key_found = end($numbers);		}		// Use the language string we determined and pass it to sprintf()		$args[0] = $lang[$key_found];		return call_user_func_array('sprintf', $args);	}	/**	* Add Language Items - use_db and use_help are assigned where needed (only use them to force inclusion)	*	* @param mixed $lang_set specifies the language entries to include	* @param bool $use_db internal variable for recursion, do not use	* @param bool $use_help internal variable for recursion, do not use	*	* Examples:	* <code>	* $lang_set = array('posting', 'help' => 'faq');	* $lang_set = array('posting', 'viewtopic', 'help' => array('bbcode', 'faq'))	* $lang_set = array(array('posting', 'viewtopic'), 'help' => array('bbcode', 'faq'))	* $lang_set = 'posting'	* $lang_set = array('help' => 'faq', 'db' => array('help:faq', 'posting'))	* </code>	*/	function add_lang($lang_set, $use_db = false, $use_help = false)	{		global $phpEx;		if (is_array($lang_set))		{			foreach ($lang_set as $key => $lang_file)			{				// Please do not delete this line.				// We have to force the type here, else [array] language inclusion will not work				$key = (string) $key;				if ($key == 'db')				{					$this->add_lang($lang_file, true, $use_help);				}				else if ($key == 'help')				{					$this->add_lang($lang_file, $use_db, true);				}				else if (!is_array($lang_file))				{					$this->set_lang($this->lang, $this->help, $lang_file, $use_db, $use_help);				}				else				{					$this->add_lang($lang_file, $use_db, $use_help);				}			}			unset($lang_set);		}		else if ($lang_set)		{			$this->set_lang($this->lang, $this->help, $lang_set, $use_db, $use_help);		}	}	/**	* Set language entry (called by add_lang)	* @access private	*/	function set_lang(&$lang, &$help, $lang_file, $use_db = false, $use_help = false)	{		global $phpEx;		// Make sure the language name is set (if the user setup did not happen it is not set)		if (!$this->lang_name)		{			global $config;			$this->lang_name = basename($config['default_lang']);		}		// $lang == $this->lang		// $help == $this->help		// - add appropriate variables here, name them as they are used within the language file...		if (!$use_db)		{			if ($use_help && strpos($lang_file, '/') !== false)			{				$language_filename = $this->lang_path . $this->lang_name . '/' . substr($lang_file, 0, stripos($lang_file, '/') + 1) . 'help_' . substr($lang_file, stripos($lang_file, '/') + 1) . '.' . $phpEx;			}			else			{				$language_filename = $this->lang_path . $this->lang_name . '/' . (($use_help) ? 'help_' : '') . $lang_file . '.' . $phpEx;			}			if (!file_exists($language_filename))			{				global $config;				if ($this->lang_name == 'en')				{					// The user's selected language is missing the file, the board default's language is missing the file, and the file doesn't exist in /en.					$language_filename = str_replace($this->lang_path . 'en', $this->lang_path . $this->data['user_lang'], $language_filename);					trigger_error('Language file ' . $language_filename . ' couldn\'t be opened.', E_USER_ERROR);				}				else if ($this->lang_name == basename($config['default_lang']))				{					// Fall back to the English Language					$this->lang_name = 'en';					$this->set_lang($lang, $help, $lang_file, $use_db, $use_help);				}				else if ($this->lang_name == $this->data['user_lang'])				{					// Fall back to the board default language					$this->lang_name = basename($config['default_lang']);					$this->set_lang($lang, $help, $lang_file, $use_db, $use_help);				}				// Reset the lang name				$this->lang_name = (file_exists($this->lang_path . $this->data['user_lang'] . "/common.$phpEx")) ? $this->data['user_lang'] : basename($config['default_lang']);				return;			}			// Do not suppress error if in DEBUG_EXTRA mode			$include_result = (defined('DEBUG_EXTRA')) ? (include $language_filename) : (@include $language_filename);			if ($include_result === false)			{				trigger_error('Language file ' . $language_filename . ' couldn\'t be opened.', E_USER_ERROR);			}		}		else if ($use_db)		{			// Get Database Language Strings			// Put them into $lang if nothing is prefixed, put them into $help if help: is prefixed			// For example: help:faq, posting		}	}	/**	* Format user date	*	* @param int $gmepoch unix timestamp	* @param string $format date format in date() notation. | used to indicate relative dates, for example |d m Y|, h:i is translated to Today, h:i.	* @param bool $forcedate force non-relative date format.	*	* @return mixed translated date	*/	function format_date($gmepoch, $format = false, $forcedate = false)	{		static $midnight;		static $date_cache;		$format = (!$format) ? $this->date_format : $format;		$now = time();		$delta = $now - $gmepoch;		if (!isset($date_cache[$format]))		{			// Is the user requesting a friendly date format (i.e. 'Today 12:42')?			$date_cache[$format] = array(				'is_short'		=> strpos($format, '|'),				'format_short'	=> substr($format, 0, strpos($format, '|')) . '||' . substr(strrchr($format, '|'), 1),				'format_long'	=> str_replace('|', '', $format),				'lang'			=> $this->lang['datetime'],			);			// Short representation of month in format? Some languages use different terms for the long and short format of May			if ((strpos($format, '\M') === false && strpos($format, 'M') !== false) || (strpos($format, '\r') === false && strpos($format, 'r') !== false))			{				$date_cache[$format]['lang']['May'] = $this->lang['datetime']['May_short'];			}		}		// Zone offset		$zone_offset = $this->timezone + $this->dst;		// Show date <= 1 hour ago as 'xx min ago' but not greater than 60 seconds in the future		// A small tolerence is given for times in the future but in the same minute are displayed as '< than a minute ago'		if ($delta <= 3600 && $delta > -60 && ($delta >= -5 || (($now / 60) % 60) == (($gmepoch / 60) % 60)) && $date_cache[$format]['is_short'] !== false && !$forcedate && isset($this->lang['datetime']['AGO']))		{			return $this->lang(array('datetime', 'AGO'), max(0, (int) floor($delta / 60)));		}		if (!$midnight)		{			list($d, $m, $y) = explode(' ', gmdate('j n Y', time() + $zone_offset));			$midnight = gmmktime(0, 0, 0, $m, $d, $y) - $zone_offset;		}		if ($date_cache[$format]['is_short'] !== false && !$forcedate && !($gmepoch < $midnight - 86400 || $gmepoch > $midnight + 172800))		{			$day = false;			if ($gmepoch > $midnight + 86400)			{				$day = 'TOMORROW';			}			else if ($gmepoch > $midnight)			{				$day = 'TODAY';			}			else if ($gmepoch > $midnight - 86400)			{				$day = 'YESTERDAY';			}			if ($day !== false)			{				return str_replace('||', $this->lang['datetime'][$day], strtr(@gmdate($date_cache[$format]['format_short'], $gmepoch + $zone_offset), $date_cache[$format]['lang']));			}		}		return strtr(@gmdate($date_cache[$format]['format_long'], $gmepoch + $zone_offset), $date_cache[$format]['lang']);	}	/**	* Get language id currently used by the user	*/	function get_iso_lang_id()	{		global $config, $db;		if (!empty($this->lang_id))		{			return $this->lang_id;		}		if (!$this->lang_name)		{			$this->lang_name = $config['default_lang'];		}		$sql = 'SELECT lang_id			FROM ' . LANG_TABLE . "			WHERE lang_iso = '" . $db->sql_escape($this->lang_name) . "'";		$result = $db->sql_query($sql);		$this->lang_id = (int) $db->sql_fetchfield('lang_id');		$db->sql_freeresult($result);		return $this->lang_id;	}	/**	* Get users profile fields	*/	function get_profile_fields($user_id)	{		global $db;		if (isset($this->profile_fields))		{			return;		}		$sql = 'SELECT *			FROM ' . PROFILE_FIELDS_DATA_TABLE . "			WHERE user_id = $user_id";		$result = $db->sql_query_limit($sql, 1);		$this->profile_fields = (!($row = $db->sql_fetchrow($result))) ? array() : $row;		$db->sql_freeresult($result);	}	/**	* Specify/Get image	* $suffix is no longer used - we know it. ;) It is there for backward compatibility.	*/	function img($img, $alt = '', $width = false, $suffix = '', $type = 'full_tag')	{		static $imgs;		global $phpbb_root_path;		$img_data = &$imgs[$img];		if (empty($img_data))		{			if (!isset($this->img_array[$img]))			{				// Do not fill the image to let designers decide what to do if the image is empty				$img_data = '';				return $img_data;			}			// Use URL if told so			$root_path = (defined('PHPBB_USE_BOARD_URL_PATH') && PHPBB_USE_BOARD_URL_PATH) ? generate_board_url() . '/' : $phpbb_root_path;			$path = 'styles/' . rawurlencode($this->theme['imageset_path']) . '/imageset/' . ($this->img_array[$img]['image_lang'] ? $this->img_array[$img]['image_lang'] .'/' : '') . $this->img_array[$img]['image_filename'];			$img_data['src'] = $root_path . $path;			$img_data['width'] = $this->img_array[$img]['image_width'];			$img_data['height'] = $this->img_array[$img]['image_height'];			// We overwrite the width and height to the phpbb logo's width			// and height here if the contents of the site_logo file are			// really equal to the phpbb_logo			// This allows us to change the dimensions of the phpbb_logo without			// modifying the imageset.cfg and causing a conflict for everyone			// who modified it for their custom logo on updating			if ($img == 'site_logo' && file_exists($phpbb_root_path . $path))			{				global $cache;				$img_file_hashes = $cache->get('imageset_site_logo_md5');				if ($img_file_hashes === false)				{					$img_file_hashes = array();				}				$key = $this->theme['imageset_path'] . '::' . $this->img_array[$img]['image_lang'];				if (!isset($img_file_hashes[$key]))				{					$img_file_hashes[$key] = md5(file_get_contents($phpbb_root_path . $path));					$cache->put('imageset_site_logo_md5', $img_file_hashes);				}				$phpbb_logo_hash = '0c461a32cd3621643105f0d02a772c10';				if ($phpbb_logo_hash == $img_file_hashes[$key])				{					$img_data['width'] = '149';					$img_data['height'] = '52';				}			}		}		$alt = (!empty($this->lang[$alt])) ? $this->lang[$alt] : $alt;		switch ($type)		{			case 'src':				return $img_data['src'];			break;			case 'width':				return ($width === false) ? $img_data['width'] : $width;			break;			case 'height':				return $img_data['height'];			break;			default:				$use_width = ($width === false) ? $img_data['width'] : $width;				return '<img src="' . $img_data['src'] . '"' . (($use_width) ? ' width="' . $use_width . '"' : '') . (($img_data['height']) ? ' height="' . $img_data['height'] . '"' : '') . ' alt="' . $alt . '" title="' . $alt . '" />';			break;		}	}	/**	* Get option bit field from user options	*/	function optionget($key, $data = false)	{		if (!isset($this->keyvalues[$key]))		{			$var = ($data) ? $data : $this->data['user_options'];			$this->keyvalues[$key] = ($var & 1 << $this->keyoptions[$key]) ? true : false;		}		return $this->keyvalues[$key];	}	/**	* Set option bit field for user options	*/	function optionset($key, $value, $data = false)	{		$var = ($data) ? $data : $this->data['user_options'];		if ($value && !($var & 1 << $this->keyoptions[$key]))		{			$var += 1 << $this->keyoptions[$key];		}		else if (!$value && ($var & 1 << $this->keyoptions[$key]))		{			$var -= 1 << $this->keyoptions[$key];		}		else		{			return ($data) ? $var : false;		}		if (!$data)		{			$this->data['user_options'] = $var;			return true;		}		else		{			return $var;		}	}	/**	* Funtion to make the user leave the NEWLY_REGISTERED system group.	* @access public	*/	function leave_newly_registered()	{		global $db;		if (empty($this->data['user_new']))		{			return false;		}		if (!function_exists('remove_newly_registered'))		{			global $phpbb_root_path, $phpEx;			include($phpbb_root_path . 'includes/functions_user.' . $phpEx);		}		if ($group = remove_newly_registered($this->data['user_id'], $this->data))		{			$this->data['group_id'] = $group;		}		$this->data['user_permissions'] = '';		$this->data['user_new'] = 0;		return true;	}	/**	* Returns all password protected forum ids the user is currently NOT authenticated for.	*	* @return array		Array of forum ids	* @access public	*/	function get_passworded_forums()	{		global $db;		$sql = 'SELECT f.forum_id, fa.user_id			FROM ' . FORUMS_TABLE . ' f			LEFT JOIN ' . FORUMS_ACCESS_TABLE . " fa				ON (fa.forum_id = f.forum_id					AND fa.session_id = '" . $db->sql_escape($this->session_id) . "')			WHERE f.forum_password <> ''";		$result = $db->sql_query($sql);		$forum_ids = array();		while ($row = $db->sql_fetchrow($result))		{			$forum_id = (int) $row['forum_id'];			if ($row['user_id'] != $this->data['user_id'])			{				$forum_ids[$forum_id] = $forum_id;			}		}		$db->sql_freeresult($result);		return $forum_ids;	}}?>
<?php/**** @package mcp* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @ignore*/if (!defined('IN_PHPBB')){	exit;}/*** Handling actions in post details screen*/function mcp_post_details($id, $mode, $action){	global $phpEx, $phpbb_root_path, $config;	global $template, $db, $user, $auth, $cache;	$user->add_lang('posting');	$post_id = request_var('p', 0);	$start	= request_var('start', 0);	// Get post data	$post_info = get_post_data(array($post_id), false, true);	add_form_key('mcp_post_details');	if (!sizeof($post_info))	{		trigger_error('POST_NOT_EXIST');	}	$post_info = $post_info[$post_id];	$url = append_sid("{$phpbb_root_path}mcp.$phpEx?" . extra_url());	switch ($action)	{		case 'whois':			if ($auth->acl_get('m_info', $post_info['forum_id']))			{				$ip = request_var('ip', '');				include($phpbb_root_path . 'includes/functions_user.' . $phpEx);				$template->assign_vars(array(					'RETURN_POST'	=> sprintf($user->lang['RETURN_POST'], '<a href="' . append_sid("{$phpbb_root_path}mcp.$phpEx", "i=$id&amp;mode=$mode&amp;p=$post_id") . '">', '</a>'),					'U_RETURN_POST'	=> append_sid("{$phpbb_root_path}mcp.$phpEx", "i=$id&amp;mode=$mode&amp;p=$post_id"),					'L_RETURN_POST'	=> sprintf($user->lang['RETURN_POST'], '', ''),					'WHOIS'			=> user_ipwhois($ip),				));			}			// We're done with the whois page so return			return;		break;		case 'chgposter':		case 'chgposter_ip':			if ($action == 'chgposter')			{				$username = request_var('username', '', true);				$sql_where = "username_clean = '" . $db->sql_escape(utf8_clean_string($username)) . "'";			}			else			{				$new_user_id = request_var('u', 0);				$sql_where = 'user_id = ' . $new_user_id;			}			$sql = 'SELECT *				FROM ' . USERS_TABLE . '				WHERE ' . $sql_where;			$result = $db->sql_query($sql);			$row = $db->sql_fetchrow($result);			$db->sql_freeresult($result);			if (!$row)			{				trigger_error('NO_USER');			}			if ($auth->acl_get('m_chgposter', $post_info['forum_id']))			{				if (check_form_key('mcp_post_details'))				{					change_poster($post_info, $row);				}				else				{					trigger_error('FORM_INVALID');				}			}		break;	}	// Set some vars	$users_ary = $usernames_ary = array();	$attachments = $extensions = array();	$post_id = $post_info['post_id'];	$topic_tracking_info = array();	// Get topic tracking info	if ($config['load_db_lastread'])	{		$tmp_topic_data = array($post_info['topic_id'] => $post_info);		$topic_tracking_info = get_topic_tracking($post_info['forum_id'], $post_info['topic_id'], $tmp_topic_data, array($post_info['forum_id'] => $post_info['forum_mark_time']));		unset($tmp_topic_data);	}	else	{		$topic_tracking_info = get_complete_topic_tracking($post_info['forum_id'], $post_info['topic_id']);	}	$post_unread = (isset($topic_tracking_info[$post_info['topic_id']]) && $post_info['post_time'] > $topic_tracking_info[$post_info['topic_id']]) ? true : false;	// Process message, leave it uncensored	$message = $post_info['post_text'];	if ($post_info['bbcode_bitfield'])	{		include_once($phpbb_root_path . 'includes/bbcode.' . $phpEx);		$bbcode = new bbcode($post_info['bbcode_bitfield']);		$bbcode->bbcode_second_pass($message, $post_info['bbcode_uid'], $post_info['bbcode_bitfield']);	}	$message = bbcode_nl2br($message);	$message = smiley_text($message);	if ($post_info['post_attachment'] && $auth->acl_get('u_download') && $auth->acl_get('f_download', $post_info['forum_id']))	{		$extensions = $cache->obtain_attach_extensions($post_info['forum_id']);		$sql = 'SELECT *			FROM ' . ATTACHMENTS_TABLE . '			WHERE post_msg_id = ' . $post_id . '				AND in_message = 0			ORDER BY filetime DESC, post_msg_id ASC';		$result = $db->sql_query($sql);		while ($row = $db->sql_fetchrow($result))		{			$attachments[] = $row;		}		$db->sql_freeresult($result);		if (sizeof($attachments))		{			$update_count = array();			parse_attachments($post_info['forum_id'], $message, $attachments, $update_count);		}		// Display not already displayed Attachments for this post, we already parsed them. ;)		if (!empty($attachments))		{			$template->assign_var('S_HAS_ATTACHMENTS', true);			foreach ($attachments as $attachment)			{				$template->assign_block_vars('attachment', array(					'DISPLAY_ATTACHMENT'	=> $attachment)				);			}		}	}	$template->assign_vars(array(		'U_MCP_ACTION'			=> "$url&amp;i=main&amp;quickmod=1&amp;mode=post_details", // Use this for mode paramaters		'U_POST_ACTION'			=> "$url&amp;i=$id&amp;mode=post_details", // Use this for action parameters		'U_APPROVE_ACTION'		=> append_sid("{$phpbb_root_path}mcp.$phpEx", "i=queue&amp;p=$post_id&amp;f={$post_info['forum_id']}"),		'S_CAN_VIEWIP'			=> $auth->acl_get('m_info', $post_info['forum_id']),		'S_CAN_CHGPOSTER'		=> $auth->acl_get('m_chgposter', $post_info['forum_id']),		'S_CAN_LOCK_POST'		=> $auth->acl_get('m_lock', $post_info['forum_id']),		'S_CAN_DELETE_POST'		=> $auth->acl_get('m_delete', $post_info['forum_id']),		'S_POST_REPORTED'		=> ($post_info['post_reported']) ? true : false,		'S_POST_UNAPPROVED'		=> (!$post_info['post_approved']) ? true : false,		'S_POST_LOCKED'			=> ($post_info['post_edit_locked']) ? true : false,		'S_USER_NOTES'			=> true,		'S_CLEAR_ALLOWED'		=> ($auth->acl_get('a_clearlogs')) ? true : false,		'U_EDIT'				=> ($auth->acl_get('m_edit', $post_info['forum_id'])) ? append_sid("{$phpbb_root_path}posting.$phpEx", "mode=edit&amp;f={$post_info['forum_id']}&amp;p={$post_info['post_id']}") : '',		'U_FIND_USERNAME'		=> append_sid("{$phpbb_root_path}memberlist.$phpEx", 'mode=searchuser&amp;form=mcp_chgposter&amp;field=username&amp;select_single=true'),		'U_MCP_APPROVE'			=> append_sid("{$phpbb_root_path}mcp.$phpEx", 'i=queue&amp;mode=approve_details&amp;f=' . $post_info['forum_id'] . '&amp;p=' . $post_id),		'U_MCP_REPORT'			=> append_sid("{$phpbb_root_path}mcp.$phpEx", 'i=reports&amp;mode=report_details&amp;f=' . $post_info['forum_id'] . '&amp;p=' . $post_id),		'U_MCP_USER_NOTES'		=> append_sid("{$phpbb_root_path}mcp.$phpEx", 'i=notes&amp;mode=user_notes&amp;u=' . $post_info['user_id']),		'U_MCP_WARN_USER'		=> ($auth->acl_get('m_warn')) ? append_sid("{$phpbb_root_path}mcp.$phpEx", 'i=warn&amp;mode=warn_user&amp;u=' . $post_info['user_id']) : '',		'U_VIEW_POST'			=> append_sid("{$phpbb_root_path}viewtopic.$phpEx", 'f=' . $post_info['forum_id'] . '&amp;p=' . $post_info['post_id'] . '#p' . $post_info['post_id']),		'U_VIEW_TOPIC'			=> append_sid("{$phpbb_root_path}viewtopic.$phpEx", 'f=' . $post_info['forum_id'] . '&amp;t=' . $post_info['topic_id']),		'MINI_POST_IMG'			=> ($post_unread) ? $user->img('icon_post_target_unread', 'UNREAD_POST') : $user->img('icon_post_target', 'POST'),		'RETURN_TOPIC'			=> sprintf($user->lang['RETURN_TOPIC'], '<a href="' . append_sid("{$phpbb_root_path}viewtopic.$phpEx", "f={$post_info['forum_id']}&amp;p=$post_id") . "#p$post_id\">", '</a>'),		'RETURN_FORUM'			=> sprintf($user->lang['RETURN_FORUM'], '<a href="' . append_sid("{$phpbb_root_path}viewforum.$phpEx", "f={$post_info['forum_id']}&amp;start={$start}") . '">', '</a>'),		'REPORTED_IMG'			=> $user->img('icon_topic_reported', $user->lang['POST_REPORTED']),		'UNAPPROVED_IMG'		=> $user->img('icon_topic_unapproved', $user->lang['POST_UNAPPROVED']),		'EDIT_IMG'				=> $user->img('icon_post_edit', $user->lang['EDIT_POST']),		'SEARCH_IMG'			=> $user->img('icon_user_search', $user->lang['SEARCH']),		'POST_AUTHOR_FULL'		=> get_username_string('full', $post_info['user_id'], $post_info['username'], $post_info['user_colour'], $post_info['post_username']),		'POST_AUTHOR_COLOUR'	=> get_username_string('colour', $post_info['user_id'], $post_info['username'], $post_info['user_colour'], $post_info['post_username']),		'POST_AUTHOR'			=> get_username_string('username', $post_info['user_id'], $post_info['username'], $post_info['user_colour'], $post_info['post_username']),		'U_POST_AUTHOR'			=> get_username_string('profile', $post_info['user_id'], $post_info['username'], $post_info['user_colour'], $post_info['post_username']),		'POST_PREVIEW'			=> $message,		'POST_SUBJECT'			=> $post_info['post_subject'],		'POST_DATE'				=> $user->format_date($post_info['post_time']),		'POST_IP'				=> $post_info['poster_ip'],		'POST_IPADDR'			=> ($auth->acl_get('m_info', $post_info['forum_id']) && request_var('lookup', '')) ? @gethostbyaddr($post_info['poster_ip']) : '',		'POST_ID'				=> $post_info['post_id'],		'U_LOOKUP_IP'			=> ($auth->acl_get('m_info', $post_info['forum_id'])) ? "$url&amp;i=$id&amp;mode=$mode&amp;lookup={$post_info['poster_ip']}#ip" : '',		'U_WHOIS'				=> ($auth->acl_get('m_info', $post_info['forum_id'])) ? append_sid("{$phpbb_root_path}mcp.$phpEx", "i=$id&amp;mode=$mode&amp;action=whois&amp;p=$post_id&amp;ip={$post_info['poster_ip']}") : '',	));	// Get User Notes	$log_data = array();	$log_count = false;	view_log('user', $log_data, $log_count, $config['posts_per_page'], 0, 0, 0, $post_info['user_id']);	if (!empty($log_data))	{		$template->assign_var('S_USER_NOTES', true);		foreach ($log_data as $row)		{			$template->assign_block_vars('usernotes', array(				'REPORT_BY'		=> $row['username_full'],				'REPORT_AT'		=> $user->format_date($row['time']),				'ACTION'		=> $row['action'],				'ID'			=> $row['id'])			);		}	}	// Get Reports	if ($auth->acl_get('m_report', $post_info['forum_id']))	{		$sql = 'SELECT r.*, re.*, u.user_id, u.username			FROM ' . REPORTS_TABLE . ' r, ' . USERS_TABLE . ' u, ' . REPORTS_REASONS_TABLE . " re			WHERE r.post_id = $post_id				AND r.reason_id = re.reason_id				AND u.user_id = r.user_id			ORDER BY r.report_time DESC";		$result = $db->sql_query($sql);		if ($row = $db->sql_fetchrow($result))		{			$template->assign_var('S_SHOW_REPORTS', true);			do			{				// If the reason is defined within the language file, we will use the localized version, else just use the database entry...				if (isset($user->lang['report_reasons']['TITLE'][strtoupper($row['reason_title'])]) && isset($user->lang['report_reasons']['DESCRIPTION'][strtoupper($row['reason_title'])]))				{					$row['reson_description'] = $user->lang['report_reasons']['DESCRIPTION'][strtoupper($row['reason_title'])];					$row['reason_title'] = $user->lang['report_reasons']['TITLE'][strtoupper($row['reason_title'])];				}				$template->assign_block_vars('reports', array(					'REPORT_ID'		=> $row['report_id'],					'REASON_TITLE'	=> $row['reason_title'],					'REASON_DESC'	=> $row['reason_description'],					'REPORTER'		=> ($row['user_id'] != ANONYMOUS) ? $row['username'] : $user->lang['GUEST'],					'U_REPORTER'	=> ($row['user_id'] != ANONYMOUS) ? append_sid("{$phpbb_root_path}memberlist.$phpEx", 'mode=viewprofile&amp;u=' . $row['user_id']) : '',					'USER_NOTIFY'	=> ($row['user_notify']) ? true : false,					'REPORT_TIME'	=> $user->format_date($row['report_time']),					'REPORT_TEXT'	=> bbcode_nl2br(trim($row['report_text'])),				));			}			while ($row = $db->sql_fetchrow($result));		}		$db->sql_freeresult($result);	}	// Get IP	if ($auth->acl_get('m_info', $post_info['forum_id']))	{		$rdns_ip_num = request_var('rdns', '');		if ($rdns_ip_num != 'all')		{			$template->assign_vars(array(				'U_LOOKUP_ALL'	=> "$url&amp;i=main&amp;mode=post_details&amp;rdns=all")			);		}		// Get other users who've posted under this IP		$sql = 'SELECT poster_id, COUNT(poster_id) as postings			FROM ' . POSTS_TABLE . "			WHERE poster_ip = '" . $db->sql_escape($post_info['poster_ip']) . "'			GROUP BY poster_id			ORDER BY postings DESC";		$result = $db->sql_query($sql);		while ($row = $db->sql_fetchrow($result))		{			// Fill the user select list with users who have posted under this IP			if ($row['poster_id'] != $post_info['poster_id'])			{				$users_ary[$row['poster_id']] = $row;			}		}		$db->sql_freeresult($result);		if (sizeof($users_ary))		{			// Get the usernames			$sql = 'SELECT user_id, username				FROM ' . USERS_TABLE . '				WHERE ' . $db->sql_in_set('user_id', array_keys($users_ary));			$result = $db->sql_query($sql);			while ($row = $db->sql_fetchrow($result))			{				$users_ary[$row['user_id']]['username'] = $row['username'];				$usernames_ary[utf8_clean_string($row['username'])] = $users_ary[$row['user_id']];			}			$db->sql_freeresult($result);			foreach ($users_ary as $user_id => $user_row)			{				$template->assign_block_vars('userrow', array(					'USERNAME'		=> ($user_id == ANONYMOUS) ? $user->lang['GUEST'] : $user_row['username'],					'NUM_POSTS'		=> $user_row['postings'],					'L_POST_S'		=> ($user_row['postings'] == 1) ? $user->lang['POST'] : $user->lang['POSTS'],					'U_PROFILE'		=> ($user_id == ANONYMOUS) ? '' : append_sid("{$phpbb_root_path}memberlist.$phpEx", 'mode=viewprofile&amp;u=' . $user_id),					'U_SEARCHPOSTS' => append_sid("{$phpbb_root_path}search.$phpEx", 'author_id=' . $user_id . '&amp;sr=topics'))				);			}		}		// Get other IP's this user has posted under		// A compound index on poster_id, poster_ip (posts table) would help speed up this query a lot,		// but the extra size is only valuable if there are persons having more than a thousands posts.		// This is better left to the really really big forums.		$sql = 'SELECT poster_ip, COUNT(poster_ip) AS postings			FROM ' . POSTS_TABLE . '			WHERE poster_id = ' . $post_info['poster_id'] . "			GROUP BY poster_ip			ORDER BY postings DESC";		$result = $db->sql_query($sql);		while ($row = $db->sql_fetchrow($result))		{			$hostname = (($rdns_ip_num == $row['poster_ip'] || $rdns_ip_num == 'all') && $row['poster_ip']) ? @gethostbyaddr($row['poster_ip']) : '';			$template->assign_block_vars('iprow', array(				'IP'			=> $row['poster_ip'],				'HOSTNAME'		=> $hostname,				'NUM_POSTS'		=> $row['postings'],				'L_POST_S'		=> ($row['postings'] == 1) ? $user->lang['POST'] : $user->lang['POSTS'],				'U_LOOKUP_IP'	=> ($rdns_ip_num == $row['poster_ip'] || $rdns_ip_num == 'all') ? '' : "$url&amp;i=$id&amp;mode=post_details&amp;rdns={$row['poster_ip']}#ip",				'U_WHOIS'		=> append_sid("{$phpbb_root_path}mcp.$phpEx", "i=$id&amp;mode=$mode&amp;action=whois&amp;p=$post_id&amp;ip={$row['poster_ip']}"))			);		}		$db->sql_freeresult($result);		$user_select = '';		if (sizeof($usernames_ary))		{			ksort($usernames_ary);			foreach ($usernames_ary as $row)			{				$user_select .= '<option value="' . $row['poster_id'] . '">' . $row['username'] . "</option>\n";			}		}		$template->assign_var('S_USER_SELECT', $user_select);	}}/*** Change a post's poster*/function change_poster(&$post_info, $userdata){	global $auth, $db, $config, $phpbb_root_path, $phpEx;	if (empty($userdata) || $userdata['user_id'] == $post_info['user_id'])	{		return;	}	$post_id = $post_info['post_id'];	$sql = 'UPDATE ' . POSTS_TABLE . "		SET poster_id = {$userdata['user_id']}		WHERE post_id = $post_id";	$db->sql_query($sql);	// Resync topic/forum if needed	if ($post_info['topic_last_post_id'] == $post_id || $post_info['forum_last_post_id'] == $post_id || $post_info['topic_first_post_id'] == $post_id)	{		sync('topic', 'topic_id', $post_info['topic_id'], false, false);		sync('forum', 'forum_id', $post_info['forum_id'], false, false);	}	// Adjust post counts... only if the post is approved (else, it was not added the users post count anyway)	if ($post_info['post_postcount'] && $post_info['post_approved'])	{		$sql = 'UPDATE ' . USERS_TABLE . '			SET user_posts = user_posts - 1			WHERE user_id = ' . $post_info['user_id'] .'			AND user_posts > 0';		$db->sql_query($sql);		$sql = 'UPDATE ' . USERS_TABLE . '			SET user_posts = user_posts + 1			WHERE user_id = ' . $userdata['user_id'];		$db->sql_query($sql);	}	// Add posted to information for this topic for the new user	markread('post', $post_info['forum_id'], $post_info['topic_id'], time(), $userdata['user_id']);	// Remove the dotted topic option if the old user has no more posts within this topic	if ($config['load_db_track'] && $post_info['user_id'] != ANONYMOUS)	{		$sql = 'SELECT topic_id			FROM ' . POSTS_TABLE . '			WHERE topic_id = ' . $post_info['topic_id'] . '				AND poster_id = ' . $post_info['user_id'];		$result = $db->sql_query_limit($sql, 1);		$topic_id = (int) $db->sql_fetchfield('topic_id');		$db->sql_freeresult($result);		if (!$topic_id)		{			$sql = 'DELETE FROM ' . TOPICS_POSTED_TABLE . '				WHERE user_id = ' . $post_info['user_id'] . '					AND topic_id = ' . $post_info['topic_id'];			$db->sql_query($sql);		}	}	// change the poster_id within the attachments table, else the data becomes out of sync and errors displayed because of wrong ownership	if ($post_info['post_attachment'])	{		$sql = 'UPDATE ' . ATTACHMENTS_TABLE . '			SET poster_id = ' . $userdata['user_id'] . '			WHERE poster_id = ' . $post_info['user_id'] . '				AND post_msg_id = ' . $post_info['post_id'] . '				AND topic_id = ' . $post_info['topic_id'];		$db->sql_query($sql);	}	// refresh search cache of this post	$search_type = basename($config['search_type']);	if (file_exists($phpbb_root_path . 'includes/search/' . $search_type . '.' . $phpEx))	{		require("{$phpbb_root_path}includes/search/$search_type.$phpEx");		// We do some additional checks in the module to ensure it can actually be utilised		$error = false;		$search = new $search_type($error);		if (!$error && method_exists($search, 'destroy_cache'))		{			$search->destroy_cache(array(), array($post_info['user_id'], $userdata['user_id']));		}	}	$from_username = $post_info['username'];	$to_username = $userdata['username'];	// Renew post info	$post_info = get_post_data(array($post_id), false, true);	if (!sizeof($post_info))	{		trigger_error('POST_NOT_EXIST');	}	$post_info = $post_info[$post_id];	// Now add log entry	add_log('mod', $post_info['forum_id'], $post_info['topic_id'], 'LOG_MCP_CHANGE_POSTER', $post_info['topic_title'], $from_username, $to_username);}?>
<?php/**** @package acp* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @package module_install*/class acp_search_info{	function module()	{		return array(			'filename'	=> 'acp_search',			'title'		=> 'ACP_SEARCH',			'version'	=> '1.0.0',			'modes'		=> array(				'settings'	=> array('title' => 'ACP_SEARCH_SETTINGS', 'auth' => 'acl_a_search', 'cat' => array('ACP_SERVER_CONFIGURATION')),				'index'		=> array('title' => 'ACP_SEARCH_INDEX', 'auth' => 'acl_a_search', 'cat' => array('ACP_CAT_DATABASE')),			),		);	}	function install()	{	}	function uninstall()	{	}}?>
<?php/**** @package phpBB3* @version $Id$* @copyright (c) 2007 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @ignore*/if (!defined('IN_PHPBB')){	exit;}/**** Jabber class from Flyspray project** @version class.jabber2.php 1595 2008-09-19 (0.9.9)* @copyright 2006 Flyspray.org* @author Florian Schmitz (floele)** Only slightly modified by Acyd Burn** @package phpBB3*/class jabber{	var $connection = null;	var $session = array();	var $timeout = 10;	var $server;	var $connect_server;	var $port;	var $username;	var $password;	var $use_ssl;	var $resource = 'functions_jabber.phpbb.php';	var $enable_logging;	var $log_array;	var $features = array();	/**	*/	function jabber($server, $port, $username, $password, $use_ssl = false)	{		$this->connect_server		= ($server) ? $server : 'localhost';		$this->port					= ($port) ? $port : 5222;		// Get the server and the username		if (strpos($username, '@') === false)		{			$this->server = $this->connect_server;			$this->username = $username;		}		else		{			$jid = explode('@', $username, 2);			$this->username = $jid[0];			$this->server = $jid[1];		}		$this->password				= $password;		$this->use_ssl				= ($use_ssl && $this->can_use_ssl()) ? true : false;		// Change port if we use SSL		if ($this->port == 5222 && $this->use_ssl)		{			$this->port = 5223;		}		$this->enable_logging		= true;		$this->log_array			= array();	}	/**	* Able to use the SSL functionality?	*/	function can_use_ssl()	{		// Will not work with PHP >= 5.2.1 or < 5.2.3RC2 until timeout problem with ssl hasn't been fixed (http://bugs.php.net/41236)		return ((version_compare(PHP_VERSION, '5.2.1', '<') || version_compare(PHP_VERSION, '5.2.3RC2', '>=')) && @extension_loaded('openssl')) ? true : false;	}	/**	* Able to use TLS?	*/	function can_use_tls()	{		if (!@extension_loaded('openssl') || !function_exists('stream_socket_enable_crypto') || !function_exists('stream_get_meta_data') || !function_exists('socket_set_blocking') || !function_exists('stream_get_wrappers'))		{			return false;		}		/**		* Make sure the encryption stream is supported		* Also seem to work without the crypto stream if correctly compiled		$streams = stream_get_wrappers();		if (!in_array('streams.crypto', $streams))		{			return false;		}		*/		return true;	}	/**	* Sets the resource which is used. No validation is done here, only escaping.	* @param string $name	* @access public	*/	function set_resource($name)	{		$this->resource = $name;	}	/**	* Connect	*/	function connect()	{/*		if (!$this->check_jid($this->username . '@' . $this->server))		{			$this->add_to_log('Error: Jabber ID is not valid: ' . $this->username . '@' . $this->server);			return false;		}*/		$this->session['ssl'] = $this->use_ssl;		if ($this->open_socket($this->connect_server, $this->port, $this->use_ssl))		{			$this->send("<?xml version='1.0' encoding='UTF-8' ?" . ">\n");			$this->send("<stream:stream to='{$this->server}' xmlns='jabber:client' xmlns:stream='http://etherx.jabber.org/streams' version='1.0'>\n");		}		else		{			$this->add_to_log('Error: connect() #2');			return false;		}		// Now we listen what the server has to say...and give appropriate responses		$this->response($this->listen());		return true;	}	/**	* Disconnect	*/	function disconnect()	{		if ($this->connected())		{			// disconnect gracefully			if (isset($this->session['sent_presence']))			{				$this->send_presence('offline', '', true);			}			$this->send('</stream:stream>');			$this->session = array();			return fclose($this->connection);		}		return false;	}	/**	* Connected?	*/	function connected()	{		return (is_resource($this->connection) && !feof($this->connection)) ? true : false;	}	/**	* Initiates login (using data from contructor, after calling connect())	* @access public	* @return bool	*/	function login()	{		if (!sizeof($this->features))		{			$this->add_to_log('Error: No feature information from server available.');			return false;		}		return $this->response($this->features);	}	/**	* Send data to the Jabber server	* @param string $xml	* @access public	* @return bool	*/	function send($xml)	{		if ($this->connected())		{			$xml = trim($xml);			$this->add_to_log('SEND: '. $xml);			return fwrite($this->connection, $xml);		}		else		{			$this->add_to_log('Error: Could not send, connection lost (flood?).');			return false;		}	}	/**	* OpenSocket	* @param string $server host to connect to	* @param int $port port number	* @param bool $use_ssl use ssl or not	* @access public	* @return bool	*/	function open_socket($server, $port, $use_ssl = false)	{		if (@function_exists('dns_get_record'))		{			$record = @dns_get_record("_xmpp-client._tcp.$server", DNS_SRV);			if (!empty($record) && !empty($record[0]['target']))			{				$server = $record[0]['target'];			}		}		$server = $use_ssl ? 'ssl://' . $server : $server;		if ($this->connection = @fsockopen($server, $port, $errorno, $errorstr, $this->timeout))		{			socket_set_blocking($this->connection, 0);			socket_set_timeout($this->connection, 60);			return true;		}		// Apparently an error occured...		$this->add_to_log('Error: open_socket() - ' . $errorstr);		return false;	}	/**	* Return log	*/	function get_log()	{		if ($this->enable_logging && sizeof($this->log_array))		{			return implode("<br /><br />", $this->log_array);		}		return '';	}	/**	* Add information to log	*/	function add_to_log($string)	{		if ($this->enable_logging)		{			$this->log_array[] = utf8_htmlspecialchars($string);		}	}	/**	* Listens to the connection until it gets data or the timeout is reached.	* Thus, it should only be called if data is expected to be received.	* @access public	* @return mixed either false for timeout or an array with the received data	*/	function listen($timeout = 10, $wait = false)	{		if (!$this->connected())		{			return false;		}		// Wait for a response until timeout is reached		$start = time();		$data = '';		do		{			$read = trim(fread($this->connection, 4096));			$data .= $read;		}		while (time() <= $start + $timeout && !feof($this->connection) && ($wait || $data == '' || $read != '' || (substr(rtrim($data), -1) != '>')));		if ($data != '')		{			$this->add_to_log('RECV: '. $data);			return $this->xmlize($data);		}		else		{			$this->add_to_log('Timeout, no response from server.');			return false;		}	}	/**	* Initiates account registration (based on data used for contructor)	* @access public	* @return bool	*/	function register()	{		if (!isset($this->session['id']) || isset($this->session['jid']))		{			$this->add_to_log('Error: Cannot initiate registration.');			return false;		}		$this->send("<iq type='get' id='reg_1'><query xmlns='jabber:iq:register'/></iq>");		return $this->response($this->listen());	}	/**	* Sets account presence. No additional info required (default is "online" status)	* @param $message online, offline...	* @param $type dnd, away, chat, xa or nothing	* @param $unavailable set this to true if you want to become unavailable	* @access public	* @return bool	*/	function send_presence($message = '', $type = '', $unavailable = false)	{		if (!isset($this->session['jid']))		{			$this->add_to_log('ERROR: send_presence() - Cannot set presence at this point, no jid given.');			return false;		}		$type = strtolower($type);		$type = (in_array($type, array('dnd', 'away', 'chat', 'xa'))) ? '<show>'. $type .'</show>' : '';		$unavailable = ($unavailable) ? " type='unavailable'" : '';		$message = ($message) ? '<status>' . utf8_htmlspecialchars($message) .'</status>' : '';		$this->session['sent_presence'] = !$unavailable;		return $this->send("<presence$unavailable>" . $type . $message . '</presence>');	}	/**	* This handles all the different XML elements	* @param array $xml	* @access public	* @return bool	*/	function response($xml)	{		if (!is_array($xml) || !sizeof($xml))		{			return false;		}		// did we get multiple elements? do one after another		// array('message' => ..., 'presence' => ...)		if (sizeof($xml) > 1)		{			foreach ($xml as $key => $value)			{				$this->response(array($key => $value));			}			return;		}		else		{			// or even multiple elements of the same type?			// array('message' => array(0 => ..., 1 => ...))			if (sizeof(reset($xml)) > 1)			{				foreach (reset($xml) as $value)				{					$this->response(array(key($xml) => array(0 => $value)));				}				return;			}		}		switch (key($xml))		{			case 'stream:stream':				// Connection initialised (or after authentication). Not much to do here...				if (isset($xml['stream:stream'][0]['#']['stream:features']))				{					// we already got all info we need					$this->features = $xml['stream:stream'][0]['#'];				}				else				{					$this->features = $this->listen();				}				$second_time = isset($this->session['id']);				$this->session['id'] = $xml['stream:stream'][0]['@']['id'];				if ($second_time)				{					// If we are here for the second time after TLS, we need to continue logging in					return $this->login();				}				// go on with authentication?				if (isset($this->features['stream:features'][0]['#']['bind']) || !empty($this->session['tls']))				{					return $this->response($this->features);				}			break;			case 'stream:features':				// Resource binding after successful authentication				if (isset($this->session['authenticated']))				{					// session required?					$this->session['sess_required'] = isset($xml['stream:features'][0]['#']['session']);					$this->send("<iq type='set' id='bind_1'>						<bind xmlns='urn:ietf:params:xml:ns:xmpp-bind'>							<resource>" . utf8_htmlspecialchars($this->resource) . '</resource>						</bind>					</iq>');					return $this->response($this->listen());				}				// Let's use TLS if SSL is not enabled and we can actually use it				if (!$this->session['ssl'] && $this->can_use_tls() && $this->can_use_ssl() && isset($xml['stream:features'][0]['#']['starttls']))				{					$this->add_to_log('Switching to TLS.');					$this->send("<starttls xmlns='urn:ietf:params:xml:ns:xmpp-tls'/>\n");					return $this->response($this->listen());				}				// Does the server support SASL authentication?				// I hope so, because we do (and no other method).				if (isset($xml['stream:features'][0]['#']['mechanisms'][0]['@']['xmlns']) && $xml['stream:features'][0]['#']['mechanisms'][0]['@']['xmlns'] == 'urn:ietf:params:xml:ns:xmpp-sasl')				{					// Now decide on method					$methods = array();					foreach ($xml['stream:features'][0]['#']['mechanisms'][0]['#']['mechanism'] as $value)					{						$methods[] = $value['#'];					}					// we prefer DIGEST-MD5					// we don't want to use plain authentication (neither does the server usually) if no encryption is in place					// http://www.xmpp.org/extensions/attic/jep-0078-1.7.html					// The plaintext mechanism SHOULD NOT be used unless the underlying stream is encrypted (using SSL or TLS)					// and the client has verified that the server certificate is signed by a trusted certificate authority.					if (in_array('DIGEST-MD5', $methods))					{						$this->send("<auth xmlns='urn:ietf:params:xml:ns:xmpp-sasl' mechanism='DIGEST-MD5'/>");					}					else if (in_array('PLAIN', $methods) && ($this->session['ssl'] || !empty($this->session['tls'])))					{						// http://www.ietf.org/rfc/rfc4616.txt (PLAIN SASL Mechanism)						$this->send("<auth xmlns='urn:ietf:params:xml:ns:xmpp-sasl' mechanism='PLAIN'>"							. base64_encode($this->username . '@' . $this->server . chr(0) . $this->username . chr(0) . $this->password) .							'</auth>');					}					else if (in_array('ANONYMOUS', $methods))					{						$this->send("<auth xmlns='urn:ietf:params:xml:ns:xmpp-sasl' mechanism='ANONYMOUS'/>");					}					else					{						// not good...						$this->add_to_log('Error: No authentication method supported.');						$this->disconnect();						return false;					}					return $this->response($this->listen());				}				else				{					// ok, this is it. bye.					$this->add_to_log('Error: Server does not offer SASL authentication.');					$this->disconnect();					return false;				}			break;			case 'challenge':				// continue with authentication...a challenge literally -_-				$decoded = base64_decode($xml['challenge'][0]['#']);				$decoded = $this->parse_data($decoded);				if (!isset($decoded['digest-uri']))				{					$decoded['digest-uri'] = 'xmpp/'. $this->server;				}				// better generate a cnonce, maybe it's needed				$decoded['cnonce'] = base64_encode(md5(uniqid(mt_rand(), true)));				// second challenge?				if (isset($decoded['rspauth']))				{					$this->send("<response xmlns='urn:ietf:params:xml:ns:xmpp-sasl'/>");				}				else				{					// Make sure we only use 'auth' for qop (relevant for $this->encrypt_password())					// If the <response> is choking up on the changed parameter we may need to adjust encrypt_password() directly					if (isset($decoded['qop']) && $decoded['qop'] != 'auth' && strpos($decoded['qop'], 'auth') !== false)					{						$decoded['qop'] = 'auth';					}					$response = array(						'username'	=> $this->username,						'response'	=> $this->encrypt_password(array_merge($decoded, array('nc' => '00000001'))),						'charset'	=> 'utf-8',						'nc'		=> '00000001',						'qop'		=> 'auth',			// only auth being supported					);					foreach (array('nonce', 'digest-uri', 'realm', 'cnonce') as $key)					{						if (isset($decoded[$key]))						{							$response[$key] = $decoded[$key];						}					}					$this->send("<response xmlns='urn:ietf:params:xml:ns:xmpp-sasl'>" . base64_encode($this->implode_data($response)) . '</response>');				}				return $this->response($this->listen());			break;			case 'failure':				$this->add_to_log('Error: Server sent "failure".');				$this->disconnect();				return false;			break;			case 'proceed':				// continue switching to TLS				$meta = stream_get_meta_data($this->connection);				socket_set_blocking($this->connection, 1);				if (!stream_socket_enable_crypto($this->connection, true, STREAM_CRYPTO_METHOD_TLS_CLIENT))				{					$this->add_to_log('Error: TLS mode change failed.');					return false;				}				socket_set_blocking($this->connection, $meta['blocked']);				$this->session['tls'] = true;				// new stream				$this->send("<?xml version='1.0' encoding='UTF-8' ?" . ">\n");				$this->send("<stream:stream to='{$this->server}' xmlns='jabber:client' xmlns:stream='http://etherx.jabber.org/streams' version='1.0'>\n");				return $this->response($this->listen());			break;			case 'success':				// Yay, authentication successful.				$this->send("<stream:stream to='{$this->server}' xmlns='jabber:client' xmlns:stream='http://etherx.jabber.org/streams' version='1.0'>\n");				$this->session['authenticated'] = true;				// we have to wait for another response				return $this->response($this->listen());			break;			case 'iq':				// we are not interested in IQs we did not expect				if (!isset($xml['iq'][0]['@']['id']))				{					return false;				}				// multiple possibilities here				switch ($xml['iq'][0]['@']['id'])				{					case 'bind_1':						$this->session['jid'] = $xml['iq'][0]['#']['bind'][0]['#']['jid'][0]['#'];						// and (maybe) yet another request to be able to send messages *finally*						if ($this->session['sess_required'])						{							$this->send("<iq to='{$this->server}' type='set' id='sess_1'>								<session xmlns='urn:ietf:params:xml:ns:xmpp-session'/>								</iq>");							return $this->response($this->listen());						}						return true;					break;					case 'sess_1':						return true;					break;					case 'reg_1':						$this->send("<iq type='set' id='reg_2'>								<query xmlns='jabber:iq:register'>									<username>" . utf8_htmlspecialchars($this->username) . "</username>									<password>" . utf8_htmlspecialchars($this->password) . "</password>								</query>							</iq>");						return $this->response($this->listen());					break;					case 'reg_2':						// registration end						if (isset($xml['iq'][0]['#']['error']))						{							$this->add_to_log('Warning: Registration failed.');							return false;						}						return true;					break;					case 'unreg_1':						return true;					break;					default:						$this->add_to_log('Notice: Received unexpected IQ.');						return false;					break;				}			break;			case 'message':				// we are only interested in content...				if (!isset($xml['message'][0]['#']['body']))				{					return false;				}				$message['body'] = $xml['message'][0]['#']['body'][0]['#'];				$message['from'] = $xml['message'][0]['@']['from'];				if (isset($xml['message'][0]['#']['subject']))				{					$message['subject'] = $xml['message'][0]['#']['subject'][0]['#'];				}				$this->session['messages'][] = $message;			break;			default:				// hm...don't know this response				$this->add_to_log('Notice: Unknown server response (' . key($xml) . ')');				return false;			break;		}	}	function send_message($to, $text, $subject = '', $type = 'normal')	{		if (!isset($this->session['jid']))		{			return false;		}		if (!in_array($type, array('chat', 'normal', 'error', 'groupchat', 'headline')))		{			$type = 'normal';		}		return $this->send("<message from='" . utf8_htmlspecialchars($this->session['jid']) . "' to='" . utf8_htmlspecialchars($to) . "' type='$type' id='" . uniqid('msg') . "'>			<subject>" . utf8_htmlspecialchars($subject) . "</subject>			<body>" . utf8_htmlspecialchars($text) . "</body>			</message>"		);	}	/**	* Encrypts a password as in RFC 2831	* @param array $data Needs data from the client-server connection	* @access public	* @return string	*/	function encrypt_password($data)	{		// let's me think about <challenge> again...		foreach (array('realm', 'cnonce', 'digest-uri') as $key)		{			if (!isset($data[$key]))			{				$data[$key] = '';			}		}		$pack = md5($this->username . ':' . $data['realm'] . ':' . $this->password);		if (isset($data['authzid']))		{			$a1 = pack('H32', $pack)  . sprintf(':%s:%s:%s', $data['nonce'], $data['cnonce'], $data['authzid']);		}		else		{			$a1 = pack('H32', $pack)  . sprintf(':%s:%s', $data['nonce'], $data['cnonce']);		}		// should be: qop = auth		$a2 = 'AUTHENTICATE:'. $data['digest-uri'];		return md5(sprintf('%s:%s:%s:%s:%s:%s', md5($a1), $data['nonce'], $data['nc'], $data['cnonce'], $data['qop'], md5($a2)));	}	/**	* parse_data like a="b",c="d",... or like a="a, b", c, d="e", f=g,...	* @param string $data	* @access public	* @return array a => b ...	*/	function parse_data($data)	{		$data = explode(',', $data);		$pairs = array();		$key = false;		foreach ($data as $pair)		{			$dd = strpos($pair, '=');			if ($dd)			{				$key = trim(substr($pair, 0, $dd));				$pairs[$key] = trim(trim(substr($pair, $dd + 1)), '"');			}			else if (strpos(strrev(trim($pair)), '"') === 0 && $key)			{				// We are actually having something left from "a, b" values, add it to the last one we handled.				$pairs[$key] .= ',' . trim(trim($pair), '"');				continue;			}		}		return $pairs;	}	/**	* opposite of jabber::parse_data()	* @param array $data	* @access public	* @return string	*/	function implode_data($data)	{		$return = array();		foreach ($data as $key => $value)		{			$return[] = $key . '="' . $value . '"';		}		return implode(',', $return);	}	/**	* xmlize()	* @author Hans Anderson	* @copyright Hans Anderson / http://www.hansanderson.com/php/xml/	*/	function xmlize($data, $skip_white = 1, $encoding = 'UTF-8')	{		$data = trim($data);		if (substr($data, 0, 5) != '<?xml')		{			// mod			$data = '<root>'. $data . '</root>';		}		$vals = $index = $array = array();		$parser = xml_parser_create($encoding);		xml_parser_set_option($parser, XML_OPTION_CASE_FOLDING, 0);		xml_parser_set_option($parser, XML_OPTION_SKIP_WHITE, $skip_white);		xml_parse_into_struct($parser, $data, $vals, $index);		xml_parser_free($parser);		$i = 0;		$tagname = $vals[$i]['tag'];		$array[$tagname][0]['@'] = (isset($vals[$i]['attributes'])) ? $vals[$i]['attributes'] : array();		$array[$tagname][0]['#'] = $this->_xml_depth($vals, $i);		if (substr($data, 0, 5) != '<?xml')		{			$array = $array['root'][0]['#'];		}		return $array;	}	/**	* _xml_depth()	* @author Hans Anderson	* @copyright Hans Anderson / http://www.hansanderson.com/php/xml/	*/	function _xml_depth($vals, &$i)	{		$children = array();		if (isset($vals[$i]['value']))		{			array_push($children, $vals[$i]['value']);		}		while (++$i < sizeof($vals))		{			switch ($vals[$i]['type'])			{				case 'open':					$tagname = (isset($vals[$i]['tag'])) ? $vals[$i]['tag'] : '';					$size = (isset($children[$tagname])) ? sizeof($children[$tagname]) : 0;					if (isset($vals[$i]['attributes']))					{						$children[$tagname][$size]['@'] = $vals[$i]['attributes'];					}					$children[$tagname][$size]['#'] = $this->_xml_depth($vals, $i);				break;				case 'cdata':					array_push($children, $vals[$i]['value']);				break;				case 'complete':					$tagname = $vals[$i]['tag'];					$size = (isset($children[$tagname])) ? sizeof($children[$tagname]) : 0;					$children[$tagname][$size]['#'] = (isset($vals[$i]['value'])) ? $vals[$i]['value'] : array();					if (isset($vals[$i]['attributes']))					{						$children[$tagname][$size]['@'] = $vals[$i]['attributes'];					}				break;				case 'close':					return $children;				break;			}		}		return $children;	}}?>
<?php/**** posting [English]** @package language* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** DO NOT CHANGE*/if (!defined('IN_PHPBB')){	exit;}if (empty($lang) || !is_array($lang)){	$lang = array();}// DEVELOPERS PLEASE NOTE//// All language files should use UTF-8 as their encoding and the files must not contain a BOM.//// Placeholders can now contain order information, e.g. instead of// 'Page %s of %s' you can (and should) write 'Page %1$s of %2$s', this allows// translators to re-order the output of data while ensuring it remains correct//// You do not need this where single placeholders are used, e.g. 'Message %d' is fine// equally where a string contains only two placeholders which are used to wrap text// in a url you again do not need to specify an order e.g., 'Click %sHERE%s' is fine$lang = array_merge($lang, array(	'ADD_ATTACHMENT'			=> 'Upload attachment',	'ADD_ATTACHMENT_EXPLAIN'	=> 'If you wish to attach one or more files enter the details below.',	'ADD_FILE'					=> 'Add the file',	'ADD_POLL'					=> 'Poll creation',	'ADD_POLL_EXPLAIN'			=> 'If you do not want to add a poll to your topic leave the fields blank.',	'ALREADY_DELETED'			=> 'Sorry but this message is already deleted.',	'ATTACH_QUOTA_REACHED'		=> 'Sorry, the board attachment quota has been reached.',	'ATTACH_SIG'				=> 'Attach a signature (signatures can be altered via the UCP)',	'BBCODE_A_HELP'				=> 'Inline uploaded attachment: [attachment=]filename.ext[/attachment]',	'BBCODE_B_HELP'				=> 'Bold text: [b]text[/b]',	'BBCODE_C_HELP'				=> 'Code display: [code]code[/code]',	'BBCODE_D_HELP'				=> 'Flash: [flash=width,height]http://url[/flash]',	'BBCODE_F_HELP'				=> 'Font size: [size=85]small text[/size]',	'BBCODE_IS_OFF'				=> '%sBBCode%s is <em>OFF</em>',	'BBCODE_IS_ON'				=> '%sBBCode%s is <em>ON</em>',	'BBCODE_I_HELP'				=> 'Italic text: [i]text[/i]',	'BBCODE_L_HELP'				=> 'List: [list]text[/list]',	'BBCODE_LISTITEM_HELP'		=> 'List item: [*]text[/*]',	'BBCODE_O_HELP'				=> 'Ordered list: [list=]text[/list]',	'BBCODE_P_HELP'				=> 'Insert image: [img]http://image_url[/img]',	'BBCODE_Q_HELP'				=> 'Quote text: [quote]text[/quote]',	'BBCODE_S_HELP'				=> 'Font colour: [color=red]text[/color]  Tip: you can also use color=#FF0000',	'BBCODE_U_HELP'				=> 'Underline text: [u]text[/u]',	'BBCODE_W_HELP'				=> 'Insert URL: [url]http://url[/url] or [url=http://url]URL text[/url]',	'BBCODE_Y_HELP'				=> 'List: Add list element',	'BUMP_ERROR'				=> 'You cannot bump this topic so soon after the last post.',	'CANNOT_DELETE_REPLIED'		=> 'Sorry but you may only delete posts which have not been replied to.',	'CANNOT_EDIT_POST_LOCKED'	=> 'This post has been locked. You can no longer edit that post.',	'CANNOT_EDIT_TIME'			=> 'You can no longer edit or delete that post.',	'CANNOT_POST_ANNOUNCE'		=> 'Sorry but you cannot post announcements.',	'CANNOT_POST_STICKY'		=> 'Sorry but you cannot post sticky topics.',	'CHANGE_TOPIC_TO'			=> 'Change topic type to',	'CLOSE_TAGS'				=> 'Close tags',	'CURRENT_TOPIC'				=> 'Current topic',	'DELETE_FILE'				=> 'Delete file',	'DELETE_MESSAGE'			=> 'Delete message',	'DELETE_MESSAGE_CONFIRM'	=> 'Are you sure you want to delete this message?',	'DELETE_OWN_POSTS'			=> 'Sorry but you can only delete your own posts.',	'DELETE_POST_CONFIRM'		=> 'Are you sure you want to delete this post?',	'DELETE_POST_WARN'			=> 'Once deleted the post cannot be recovered',	'DISABLE_BBCODE'			=> 'Disable BBCode',	'DISABLE_MAGIC_URL'			=> 'Do not automatically parse URLs',	'DISABLE_SMILIES'			=> 'Disable smilies',	'DISALLOWED_CONTENT'		=> 'The upload was rejected because the uploaded file was identified as a possible attack vector.',	'DISALLOWED_EXTENSION'		=> 'The extension %s is not allowed.',	'DRAFT_LOADED'				=> 'Draft loaded into posting area, you may want to finish your post now.<br />Your draft will be deleted after submitting this post.',	'DRAFT_LOADED_PM'			=> 'Draft loaded into message area, you may want to finish your private message now.<br />Your draft will be deleted after submitting this private message.',	'DRAFT_SAVED'				=> 'Draft successfully saved.',	'DRAFT_TITLE'				=> 'Draft title',	'EDIT_REASON'				=> 'Reason for editing this post',	'EMPTY_FILEUPLOAD'			=> 'The uploaded file is empty.',	'EMPTY_MESSAGE'				=> 'You must enter a message when posting.',	'EMPTY_REMOTE_DATA'			=> 'File could not be uploaded, please try uploading the file manually.',	'FLASH_IS_OFF'				=> '[flash] is <em>OFF</em>',	'FLASH_IS_ON'				=> '[flash] is <em>ON</em>',	'FLOOD_ERROR'				=> 'You cannot make another post so soon after your last.',	'FONT_COLOR'				=> 'Font colour',	'FONT_COLOR_HIDE'			=> 'Hide font colour',	'FONT_HUGE'					=> 'Huge',	'FONT_LARGE'				=> 'Large',	'FONT_NORMAL'				=> 'Normal',	'FONT_SIZE'					=> 'Font size',	'FONT_SMALL'				=> 'Small',	'FONT_TINY'					=> 'Tiny',	'GENERAL_UPLOAD_ERROR'		=> 'Could not upload attachment to %s.',	'IMAGES_ARE_OFF'			=> '[img] is <em>OFF</em>',	'IMAGES_ARE_ON'				=> '[img] is <em>ON</em>',	'INVALID_FILENAME'			=> '%s is an invalid filename.',	'LOAD'						=> 'Load',	'LOAD_DRAFT'				=> 'Load draft',	'LOAD_DRAFT_EXPLAIN'		=> 'Here you are able to select the draft you want to continue writing. Your current post will be cancelled, all current post contents will be deleted. View, edit and delete drafts within your User Control Panel.',	'LOGIN_EXPLAIN_BUMP'		=> 'You need to login in order to bump topics within this forum.',	'LOGIN_EXPLAIN_DELETE'		=> 'You need to login in order to delete posts within this forum.',	'LOGIN_EXPLAIN_POST'		=> 'You need to login in order to post within this forum.',	'LOGIN_EXPLAIN_QUOTE'		=> 'You need to login in order to quote posts within this forum.',	'LOGIN_EXPLAIN_REPLY'		=> 'You need to login in order to reply to topics within this forum.',	'MAX_FONT_SIZE_EXCEEDED'	=> 'You may only use fonts up to size %1$d.',	'MAX_FLASH_HEIGHT_EXCEEDED'	=> 'Your flash files may only be up to %1$d pixels high.',	'MAX_FLASH_WIDTH_EXCEEDED'	=> 'Your flash files may only be up to %1$d pixels wide.',	'MAX_IMG_HEIGHT_EXCEEDED'	=> 'Your images may only be up to %1$d pixels high.',	'MAX_IMG_WIDTH_EXCEEDED'	=> 'Your images may only be up to %1$d pixels wide.',	'MESSAGE_BODY_EXPLAIN'		=> 'Enter your message here, it may contain no more than <strong>%d</strong> characters.',	'MESSAGE_DELETED'			=> 'This message has been deleted successfully.',	'MORE_SMILIES'				=> 'View more smilies',	'NOTIFY_REPLY'				=> 'Notify me when a reply is posted',	'NOT_UPLOADED'				=> 'File could not be uploaded.',	'NO_DELETE_POLL_OPTIONS'	=> 'You cannot delete existing poll options.',	'NO_PM_ICON'				=> 'No PM icon',	'NO_POLL_TITLE'				=> 'You have to enter a poll title.',	'NO_POST'					=> 'The requested post does not exist.',	'NO_POST_MODE'				=> 'No post mode specified.',	'PARTIAL_UPLOAD'			=> 'The uploaded file was only partially uploaded.',	'PHP_SIZE_NA'				=> 'The attachments file size is too large.<br />Could not determine the maximum size defined by PHP in php.ini.',	'PHP_SIZE_OVERRUN'			=> 'The attachments file size is too large, the maximum upload size is %1$d %2$s.<br />Please note this is set in php.ini and cannot be overridden.',	'PLACE_INLINE'				=> 'Place inline',	'POLL_DELETE'				=> 'Delete poll',	'POLL_FOR'					=> 'Run poll for',	'POLL_FOR_EXPLAIN'			=> 'Enter 0 or leave blank for a never ending poll.',	'POLL_MAX_OPTIONS'			=> 'Options per user',	'POLL_MAX_OPTIONS_EXPLAIN'	=> 'This is the number of options each user may select when voting.',	'POLL_OPTIONS'				=> 'Poll options',	'POLL_OPTIONS_EXPLAIN'		=> 'Place each option on a new line. You may enter up to <strong>%d</strong> options.',	'POLL_OPTIONS_EDIT_EXPLAIN'	=> 'Place each option on a new line. You may enter up to <strong>%d</strong> options. If you remove or add options all previous votes will be reset.',	'POLL_QUESTION'				=> 'Poll question',	'POLL_TITLE_TOO_LONG'		=> 'The poll title must contain fewer than 100 characters.',	'POLL_TITLE_COMP_TOO_LONG'	=> 'The parsed size of your poll title is too large, consider removing BBCodes or smilies.',	'POLL_VOTE_CHANGE'			=> 'Allow re-voting',	'POLL_VOTE_CHANGE_EXPLAIN'	=> 'If enabled users are able to change their vote.',	'POSTED_ATTACHMENTS'		=> 'Posted attachments',	'POST_APPROVAL_NOTIFY'		=> 'You will be notified when your post has been approved.',	'POST_CONFIRMATION'			=> 'Confirmation of post',	'POST_CONFIRM_EXPLAIN'		=> 'To prevent automated posts the board requires you to enter a confirmation code. The code is displayed in the image you should see below. If you are visually impaired or cannot otherwise read this code please contact the %sBoard Administrator%s.',	'POST_DELETED'				=> 'This message has been deleted successfully.',	'POST_EDITED'				=> 'This message has been edited successfully.',	'POST_EDITED_MOD'			=> 'This message has been edited successfully, but it will need to be approved by a moderator before it is publicly viewable.',	'POST_GLOBAL'				=> 'Global',	'POST_ICON'					=> 'Post icon',	'POST_NORMAL'				=> 'Normal',	'POST_REVIEW'				=> 'Post review',	'POST_REVIEW_EDIT'			=> 'Post review',	'POST_REVIEW_EDIT_EXPLAIN'	=> 'This post has been altered by another user while you were editing it. You may wish to review the current version of this post and adjust your edits.',	'POST_REVIEW_EXPLAIN'		=> 'At least one new post has been made to this topic. You may wish to review your post in light of this.',	'POST_STORED'				=> 'This message has been posted successfully.',	'POST_STORED_MOD'			=> 'This message has been submitted successfully, but it will need to be approved by a moderator before it is publicly viewable.',	'POST_TOPIC_AS'				=> 'Post topic as',	'PROGRESS_BAR'				=> 'Progress bar',	'QUOTE_DEPTH_EXCEEDED'		=> 'You may embed only %1$d quotes within each other.',	'SAVE'						=> 'Save',	'SAVE_DATE'					=> 'Saved at',	'SAVE_DRAFT'				=> 'Save draft',	'SAVE_DRAFT_CONFIRM'		=> 'Please note that saved drafts only include the subject and the message, any other element will be removed. Do you want to save your draft now?',	'SMILIES'					=> 'Smilies',	'SMILIES_ARE_OFF'			=> 'Smilies are <em>OFF</em>',	'SMILIES_ARE_ON'			=> 'Smilies are <em>ON</em>',	'STICKY_ANNOUNCE_TIME_LIMIT'=> 'Sticky/Announcement time limit',	'STICK_TOPIC_FOR'			=> 'Stick topic for',	'STICK_TOPIC_FOR_EXPLAIN'	=> 'Enter 0 or leave blank for a never ending Sticky/Announcement. Please note that this number is relative to the date of the post.',	'STYLES_TIP'				=> 'Tip: Styles can be applied quickly to selected text.',	'TOO_FEW_CHARS'				=> 'Your message contains too few characters.',	'TOO_FEW_CHARS_LIMIT'		=> 'Your message contains %1$d characters. The minimum number of characters you need to enter is %2$d.',	'TOO_FEW_POLL_OPTIONS'		=> 'You must enter at least two poll options.',	'TOO_MANY_ATTACHMENTS'		=> 'Cannot add another attachment, %d is the maximum.',	'TOO_MANY_CHARS'			=> 'Your message contains too many characters.',	'TOO_MANY_CHARS_POST'		=> 'Your message contains %1$d characters. The maximum number of allowed characters is %2$d.',	'TOO_MANY_CHARS_SIG'		=> 'Your signature contains %1$d characters. The maximum number of allowed characters is %2$d.',	'TOO_MANY_POLL_OPTIONS'		=> 'You have tried to enter too many poll options.',	'TOO_MANY_SMILIES'			=> 'Your message contains too many smilies. The maximum number of smilies allowed is %d.',	'TOO_MANY_URLS'				=> 'Your message contains too many URLs. The maximum number of URLs allowed is %d.',	'TOO_MANY_USER_OPTIONS'		=> 'You cannot specify more options per user than existing poll options.',	'TOPIC_BUMPED'				=> 'Topic has been bumped successfully.',	'UNAUTHORISED_BBCODE'		=> 'You cannot use certain BBCodes: %s.',	'UNGLOBALISE_EXPLAIN'		=> 'To switch this topic back from being global to a normal topic, you need to select the forum you wish this topic to be displayed.',	'UPDATE_COMMENT'			=> 'Update comment',	'URL_INVALID'				=> 'The URL you specified is invalid.',	'URL_NOT_FOUND'				=> 'The file specified could not be found.',	'URL_IS_OFF'				=> '[url] is <em>OFF</em>',	'URL_IS_ON'					=> '[url] is <em>ON</em>',	'USER_CANNOT_BUMP'			=> 'You cannot bump topics in this forum.',	'USER_CANNOT_DELETE'		=> 'You cannot delete posts in this forum.',	'USER_CANNOT_EDIT'			=> 'You cannot edit posts in this forum.',	'USER_CANNOT_REPLY'			=> 'You cannot reply in this forum.',	'USER_CANNOT_FORUM_POST'	=> 'You are not able to do posting operations on this forum due to the forum type not supporting it.',	'VIEW_MESSAGE'				=> '%sView your submitted message%s',	'VIEW_PRIVATE_MESSAGE'		=> '%sView your submitted private message%s',	'WRONG_FILESIZE'			=> 'The file is too big, maximum allowed size is %1d %2s.',	'WRONG_SIZE'				=> 'The image must be at least %1$d pixels wide, %2$d pixels high and at most %3$d pixels wide and %4$d pixels high. The submitted image is %5$d pixels wide and %6$d pixels high.',));?>
<?php/**** @package ucp* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @package module_install*/class ucp_prefs_info{	function module()	{		return array(			'filename'	=> 'ucp_prefs',			'title'		=> 'UCP_PREFS',			'version'	=> '1.0.0',			'modes'		=> array(				'personal'	=> array('title' => 'UCP_PREFS_PERSONAL', 'auth' => '', 'cat' => array('UCP_PREFS')),				'post'		=> array('title' => 'UCP_PREFS_POST', 'auth' => '', 'cat' => array('UCP_PREFS')),				'view'		=> array('title' => 'UCP_PREFS_VIEW', 'auth' => '', 'cat' => array('UCP_PREFS')),			),		);	}	function install()	{	}	function uninstall()	{	}}?>
<?php/**** @package acp* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @package module_install*/class acp_disallow_info{	function module()	{		return array(			'filename'	=> 'acp_disallow',			'title'		=> 'ACP_DISALLOW',			'version'	=> '1.0.0',			'modes'		=> array(				'usernames'		=> array('title' => 'ACP_DISALLOW_USERNAMES', 'auth' => 'acl_a_names', 'cat' => array('ACP_USER_SECURITY')),			),		);	}	function install()	{	}	function uninstall()	{	}}?>
<?php/**** @package acp* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @package module_install*/class acp_styles_info{	function module()	{		return array(			'filename'	=> 'acp_styles',			'title'		=> 'ACP_CAT_STYLES',			'version'	=> '1.0.0',			'modes'		=> array(				'style'		=> array('title' => 'ACP_STYLES', 'auth' => 'acl_a_styles', 'cat' => array('ACP_STYLE_MANAGEMENT')),				'template'	=> array('title' => 'ACP_TEMPLATES', 'auth' => 'acl_a_styles', 'cat' => array('ACP_STYLE_COMPONENTS')),				'theme'		=> array('title' => 'ACP_THEMES', 'auth' => 'acl_a_styles', 'cat' => array('ACP_STYLE_COMPONENTS')),				'imageset'	=> array('title' => 'ACP_IMAGESETS', 'auth' => 'acl_a_styles', 'cat' => array('ACP_STYLE_COMPONENTS')),			),		);	}	function install()	{	}	function uninstall()	{	}}?>
<?php/**** @package acp* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License** @todo add cron intervals to server settings? (database_gc, queue_interval, session_gc, search_gc, cache_gc, warnings_gc)*//*** @ignore*/if (!defined('IN_PHPBB')){	exit;}/*** @package acp*/class acp_board{	var $u_action;	var $new_config = array();	function main($id, $mode)	{		global $db, $user, $auth, $template;		global $config, $phpbb_root_path, $phpbb_admin_path, $phpEx;		global $cache;		$user->add_lang('acp/board');		$action	= request_var('action', '');		$submit = (isset($_POST['submit']) || isset($_POST['allow_quick_reply_enable'])) ? true : false;		$form_key = 'acp_board';		add_form_key($form_key);		/**		*	Validation types are:		*		string, int, bool,		*		script_path (absolute path in url - beginning with / and no trailing slash),		*		rpath (relative), rwpath (realtive, writable), path (relative path, but able to escape the root), wpath (writable)		*/		switch ($mode)		{			case 'settings':				$display_vars = array(					'title'	=> 'ACP_BOARD_SETTINGS',					'vars'	=> array(						'legend1'				=> 'ACP_BOARD_SETTINGS',						'sitename'				=> array('lang' => 'SITE_NAME',				'validate' => 'string',	'type' => 'text:40:255', 'explain' => false),						'site_desc'				=> array('lang' => 'SITE_DESC',				'validate' => 'string',	'type' => 'text:40:255', 'explain' => false),						'board_disable'			=> array('lang' => 'DISABLE_BOARD',			'validate' => 'bool',	'type' => 'custom', 'method' => 'board_disable', 'explain' => true),						'board_disable_msg'		=> false,						'default_lang'			=> array('lang' => 'DEFAULT_LANGUAGE',		'validate' => 'lang',	'type' => 'select', 'function' => 'language_select', 'params' => array('{CONFIG_VALUE}'), 'explain' => false),						'default_dateformat'	=> array('lang' => 'DEFAULT_DATE_FORMAT',	'validate' => 'string',	'type' => 'custom', 'method' => 'dateformat_select', 'explain' => true),						'board_timezone'		=> array('lang' => 'SYSTEM_TIMEZONE',		'validate' => 'string',	'type' => 'select', 'function' => 'tz_select', 'params' => array('{CONFIG_VALUE}', 1), 'explain' => true),						'board_dst'				=> array('lang' => 'SYSTEM_DST',			'validate' => 'bool',	'type' => 'radio:yes_no', 'explain' => false),						'default_style'			=> array('lang' => 'DEFAULT_STYLE',			'validate' => 'int',	'type' => 'select', 'function' => 'style_select', 'params' => array('{CONFIG_VALUE}', false), 'explain' => false),						'override_user_style'	=> array('lang' => 'OVERRIDE_STYLE',		'validate' => 'bool',	'type' => 'radio:yes_no', 'explain' => true),						'legend2'				=> 'WARNINGS',						'warnings_expire_days'	=> array('lang' => 'WARNINGS_EXPIRE',		'validate' => 'int',	'type' => 'text:3:4', 'explain' => true, 'append' => ' ' . $user->lang['DAYS']),						'legend3'					=> 'ACP_SUBMIT_CHANGES',					)				);			break;			case 'features':				$display_vars = array(					'title'	=> 'ACP_BOARD_FEATURES',					'vars'	=> array(						'legend1'				=> 'ACP_BOARD_FEATURES',						'allow_privmsg'			=> array('lang' => 'BOARD_PM',				'validate' => 'bool',	'type' => 'radio:yes_no', 'explain' => true),						'allow_topic_notify'	=> array('lang' => 'ALLOW_TOPIC_NOTIFY',	'validate' => 'bool',	'type' => 'radio:yes_no', 'explain' => false),						'allow_forum_notify'	=> array('lang' => 'ALLOW_FORUM_NOTIFY',	'validate' => 'bool',	'type' => 'radio:yes_no', 'explain' => false),						'allow_namechange'		=> array('lang' => 'ALLOW_NAME_CHANGE',		'validate' => 'bool',	'type' => 'radio:yes_no', 'explain' => false),						'allow_attachments'		=> array('lang' => 'ALLOW_ATTACHMENTS',		'validate' => 'bool',	'type' => 'radio:yes_no', 'explain' => false),						'allow_pm_attach'		=> array('lang' => 'ALLOW_PM_ATTACHMENTS',	'validate' => 'bool',	'type' => 'radio:yes_no', 'explain' => false),						'allow_pm_report'		=> array('lang' => 'ALLOW_PM_REPORT',		'validate' => 'bool',	'type' => 'radio:yes_no', 'explain' => true),						'allow_bbcode'			=> array('lang' => 'ALLOW_BBCODE',			'validate' => 'bool',	'type' => 'radio:yes_no', 'explain' => false),						'allow_smilies'			=> array('lang' => 'ALLOW_SMILIES',			'validate' => 'bool',	'type' => 'radio:yes_no', 'explain' => false),						'allow_sig'				=> array('lang' => 'ALLOW_SIG',				'validate' => 'bool',	'type' => 'radio:yes_no', 'explain' => false),						'allow_nocensors'		=> array('lang' => 'ALLOW_NO_CENSORS',		'validate' => 'bool',	'type' => 'radio:yes_no', 'explain' => true),						'allow_bookmarks'		=> array('lang' => 'ALLOW_BOOKMARKS',		'validate' => 'bool',	'type' => 'radio:yes_no', 'explain' => true),						'allow_birthdays'		=> array('lang' => 'ALLOW_BIRTHDAYS',		'validate' => 'bool',	'type' => 'radio:yes_no', 'explain' => true),						'allow_quick_reply'		=> array('lang' => 'ALLOW_QUICK_REPLY',		'validate' => 'bool',	'type' => 'custom', 'method' => 'quick_reply', 'explain' => true),						'legend2'				=> 'ACP_LOAD_SETTINGS',						'load_birthdays'		=> array('lang' => 'YES_BIRTHDAYS',			'validate' => 'bool',	'type' => 'radio:yes_no', 'explain' => true),						'load_moderators'		=> array('lang' => 'YES_MODERATORS',		'validate' => 'bool',	'type' => 'radio:yes_no', 'explain' => false),						'load_jumpbox'			=> array('lang' => 'YES_JUMPBOX',			'validate' => 'bool',	'type' => 'radio:yes_no', 'explain' => false),						'load_cpf_memberlist'	=> array('lang' => 'LOAD_CPF_MEMBERLIST',	'validate' => 'bool',	'type' => 'radio:yes_no', 'explain' => false),						'load_cpf_viewprofile'	=> array('lang' => 'LOAD_CPF_VIEWPROFILE',	'validate' => 'bool',	'type' => 'radio:yes_no', 'explain' => false),						'load_cpf_viewtopic'	=> array('lang' => 'LOAD_CPF_VIEWTOPIC',	'validate' => 'bool',	'type' => 'radio:yes_no', 'explain' => false),						'legend3'					=> 'ACP_SUBMIT_CHANGES',					)				);			break;			case 'avatar':				$display_vars = array(					'title'	=> 'ACP_AVATAR_SETTINGS',					'vars'	=> array(						'legend1'				=> 'ACP_AVATAR_SETTINGS',						'avatar_min_width'		=> array('lang' => 'MIN_AVATAR_SIZE', 'validate' => 'int:0', 'type' => false, 'method' => false, 'explain' => false,),						'avatar_min_height'		=> array('lang' => 'MIN_AVATAR_SIZE', 'validate' => 'int:0', 'type' => false, 'method' => false, 'explain' => false,),						'avatar_max_width'		=> array('lang' => 'MAX_AVATAR_SIZE', 'validate' => 'int:0', 'type' => false, 'method' => false, 'explain' => false,),						'avatar_max_height'		=> array('lang' => 'MAX_AVATAR_SIZE', 'validate' => 'int:0', 'type' => false, 'method' => false, 'explain' => false,),						'allow_avatar'			=> array('lang' => 'ALLOW_AVATARS',			'validate' => 'bool',	'type' => 'radio:yes_no', 'explain' => true),						'allow_avatar_local'	=> array('lang' => 'ALLOW_LOCAL',			'validate' => 'bool',	'type' => 'radio:yes_no', 'explain' => false),						'allow_avatar_remote'	=> array('lang' => 'ALLOW_REMOTE',			'validate' => 'bool',	'type' => 'radio:yes_no', 'explain' => true),						'allow_avatar_upload'	=> array('lang' => 'ALLOW_UPLOAD',			'validate' => 'bool',	'type' => 'radio:yes_no', 'explain' => false),						'allow_avatar_remote_upload'=> array('lang' => 'ALLOW_REMOTE_UPLOAD', 'validate' => 'bool',	'type' => 'radio:yes_no', 'explain' => true),						'avatar_filesize'		=> array('lang' => 'MAX_FILESIZE',			'validate' => 'int:0',	'type' => 'text:4:10', 'explain' => true, 'append' => ' ' . $user->lang['BYTES']),						'avatar_min'			=> array('lang' => 'MIN_AVATAR_SIZE',		'validate' => 'int:0',	'type' => 'dimension:3:4', 'explain' => true, 'append' => ' ' . $user->lang['PIXEL']),						'avatar_max'			=> array('lang' => 'MAX_AVATAR_SIZE',		'validate' => 'int:0',	'type' => 'dimension:3:4', 'explain' => true, 'append' => ' ' . $user->lang['PIXEL']),						'avatar_path'			=> array('lang' => 'AVATAR_STORAGE_PATH',	'validate' => 'rwpath',	'type' => 'text:20:255', 'explain' => true),						'avatar_gallery_path'	=> array('lang' => 'AVATAR_GALLERY_PATH',	'validate' => 'rpath',	'type' => 'text:20:255', 'explain' => true)					)				);			break;			case 'message':				$display_vars = array(					'title'	=> 'ACP_MESSAGE_SETTINGS',					'lang'	=> 'ucp',					'vars'	=> array(						'legend1'				=> 'GENERAL_SETTINGS',						'allow_privmsg'			=> array('lang' => 'BOARD_PM',				'validate' => 'bool',	'type' => 'radio:yes_no', 'explain' => true),						'pm_max_boxes'			=> array('lang' => 'BOXES_MAX',				'validate' => 'int:0',	'type' => 'text:4:4', 'explain' => true),						'pm_max_msgs'			=> array('lang' => 'BOXES_LIMIT',			'validate' => 'int:0',	'type' => 'text:4:4', 'explain' => true),						'full_folder_action'	=> array('lang' => 'FULL_FOLDER_ACTION',	'validate' => 'int',	'type' => 'select', 'method' => 'full_folder_select', 'explain' => true),						'pm_edit_time'			=> array('lang' => 'PM_EDIT_TIME',			'validate' => 'int:0',	'type' => 'text:5:5', 'explain' => true, 'append' => ' ' . $user->lang['MINUTES']),						'pm_max_recipients'		=> array('lang' => 'PM_MAX_RECIPIENTS',		'validate' => 'int:0',	'type' => 'text:5:5', 'explain' => true),						'legend2'				=> 'GENERAL_OPTIONS',						'allow_mass_pm'			=> array('lang' => 'ALLOW_MASS_PM',			'validate' => 'bool',	'type' => 'radio:yes_no', 'explain' => false),						'auth_bbcode_pm'		=> array('lang' => 'ALLOW_BBCODE_PM',		'validate' => 'bool',	'type' => 'radio:yes_no', 'explain' => false),						'auth_smilies_pm'		=> array('lang' => 'ALLOW_SMILIES_PM',		'validate' => 'bool',	'type' => 'radio:yes_no', 'explain' => false),						'allow_pm_attach'		=> array('lang' => 'ALLOW_PM_ATTACHMENTS',	'validate' => 'bool',	'type' => 'radio:yes_no', 'explain' => false),						'allow_sig_pm'			=> array('lang' => 'ALLOW_SIG_PM',			'validate' => 'bool',	'type' => 'radio:yes_no', 'explain' => false),						'print_pm'				=> array('lang' => 'ALLOW_PRINT_PM',		'validate' => 'bool',	'type' => 'radio:yes_no', 'explain' => false),						'forward_pm'			=> array('lang' => 'ALLOW_FORWARD_PM',		'validate' => 'bool',	'type' => 'radio:yes_no', 'explain' => false),						'auth_img_pm'			=> array('lang' => 'ALLOW_IMG_PM',			'validate' => 'bool',	'type' => 'radio:yes_no', 'explain' => false),						'auth_flash_pm'			=> array('lang' => 'ALLOW_FLASH_PM',		'validate' => 'bool',	'type' => 'radio:yes_no', 'explain' => true),						'enable_pm_icons'		=> array('lang' => 'ENABLE_PM_ICONS',		'validate' => 'bool',	'type' => 'radio:yes_no', 'explain' => false),						'legend3'					=> 'ACP_SUBMIT_CHANGES',					)				);			break;			case 'post':				$display_vars = array(					'title'	=> 'ACP_POST_SETTINGS',					'vars'	=> array(						'legend1'				=> 'GENERAL_OPTIONS',						'allow_topic_notify'	=> array('lang' => 'ALLOW_TOPIC_NOTIFY',	'validate' => 'bool',	'type' => 'radio:yes_no', 'explain' => false),						'allow_forum_notify'	=> array('lang' => 'ALLOW_FORUM_NOTIFY',	'validate' => 'bool',	'type' => 'radio:yes_no', 'explain' => false),						'allow_bbcode'			=> array('lang' => 'ALLOW_BBCODE',			'validate' => 'bool',	'type' => 'radio:yes_no', 'explain' => false),						'allow_post_flash'		=> array('lang' => 'ALLOW_POST_FLASH',		'validate' => 'bool',	'type' => 'radio:yes_no', 'explain' => true),						'allow_smilies'			=> array('lang' => 'ALLOW_SMILIES',			'validate' => 'bool',	'type' => 'radio:yes_no', 'explain' => false),						'allow_post_links'		=> array('lang' => 'ALLOW_POST_LINKS',		'validate' => 'bool',	'type' => 'radio:yes_no', 'explain' => true),						'allow_nocensors'		=> array('lang' => 'ALLOW_NO_CENSORS',		'validate' => 'bool',	'type' => 'radio:yes_no', 'explain' => true),						'allow_bookmarks'		=> array('lang' => 'ALLOW_BOOKMARKS',		'validate' => 'bool',	'type' => 'radio:yes_no', 'explain' => true),						'enable_post_confirm'	=> array('lang' => 'VISUAL_CONFIRM_POST',	'validate' => 'bool',	'type' => 'radio:yes_no', 'explain' => true),						'allow_quick_reply'		=> array('lang' => 'ALLOW_QUICK_REPLY',		'validate' => 'bool',	'type' => 'custom', 'method' => 'quick_reply', 'explain' => true),						'legend2'				=> 'POSTING',						'bump_type'				=> false,						'edit_time'				=> array('lang' => 'EDIT_TIME',				'validate' => 'int:0',		'type' => 'text:5:5', 'explain' => true, 'append' => ' ' . $user->lang['MINUTES']),						'delete_time'			=> array('lang' => 'DELETE_TIME',			'validate' => 'int:0',		'type' => 'text:5:5', 'explain' => true, 'append' => ' ' . $user->lang['MINUTES']),						'display_last_edited'	=> array('lang' => 'DISPLAY_LAST_EDITED',	'validate' => 'bool',		'type' => 'radio:yes_no', 'explain' => true),						'flood_interval'		=> array('lang' => 'FLOOD_INTERVAL',		'validate' => 'int:0',		'type' => 'text:3:10', 'explain' => true, 'append' => ' ' . $user->lang['SECONDS']),						'bump_interval'			=> array('lang' => 'BUMP_INTERVAL',			'validate' => 'int:0',		'type' => 'custom', 'method' => 'bump_interval', 'explain' => true),						'topics_per_page'		=> array('lang' => 'TOPICS_PER_PAGE',		'validate' => 'int:1',		'type' => 'text:3:4', 'explain' => false),						'posts_per_page'		=> array('lang' => 'POSTS_PER_PAGE',		'validate' => 'int:1',		'type' => 'text:3:4', 'explain' => false),						'smilies_per_page'		=> array('lang' => 'SMILIES_PER_PAGE',		'validate' => 'int:1',		'type' => 'text:3:4', 'explain' => false),						'hot_threshold'			=> array('lang' => 'HOT_THRESHOLD',			'validate' => 'int:0',		'type' => 'text:3:4', 'explain' => true),						'max_poll_options'		=> array('lang' => 'MAX_POLL_OPTIONS',		'validate' => 'int:2:127',	'type' => 'text:4:4', 'explain' => false),						'max_post_chars'		=> array('lang' => 'CHAR_LIMIT',			'validate' => 'int:0',		'type' => 'text:4:6', 'explain' => true),						'min_post_chars'		=> array('lang' => 'MIN_CHAR_LIMIT',		'validate' => 'int:1',		'type' => 'text:4:6', 'explain' => true),						'max_post_smilies'		=> array('lang' => 'SMILIES_LIMIT',			'validate' => 'int:0',		'type' => 'text:4:4', 'explain' => true),						'max_post_urls'			=> array('lang' => 'MAX_POST_URLS',			'validate' => 'int:0',		'type' => 'text:5:4', 'explain' => true),						'max_post_font_size'	=> array('lang' => 'MAX_POST_FONT_SIZE',	'validate' => 'int:0',		'type' => 'text:5:4', 'explain' => true, 'append' => ' %'),						'max_quote_depth'		=> array('lang' => 'QUOTE_DEPTH_LIMIT',		'validate' => 'int:0',		'type' => 'text:4:4', 'explain' => true),						'max_post_img_width'	=> array('lang' => 'MAX_POST_IMG_WIDTH',	'validate' => 'int:0',		'type' => 'text:5:4', 'explain' => true, 'append' => ' ' . $user->lang['PIXEL']),						'max_post_img_height'	=> array('lang' => 'MAX_POST_IMG_HEIGHT',	'validate' => 'int:0',		'type' => 'text:5:4', 'explain' => true, 'append' => ' ' . $user->lang['PIXEL']),						'legend3'					=> 'ACP_SUBMIT_CHANGES',					)				);			break;			case 'signature':				$display_vars = array(					'title'	=> 'ACP_SIGNATURE_SETTINGS',					'vars'	=> array(						'legend1'				=> 'GENERAL_OPTIONS',						'allow_sig'				=> array('lang' => 'ALLOW_SIG',				'validate' => 'bool',	'type' => 'radio:yes_no', 'explain' => false),						'allow_sig_bbcode'		=> array('lang' => 'ALLOW_SIG_BBCODE',		'validate' => 'bool',	'type' => 'radio:yes_no', 'explain' => false),						'allow_sig_img'			=> array('lang' => 'ALLOW_SIG_IMG',			'validate' => 'bool',	'type' => 'radio:yes_no', 'explain' => false),						'allow_sig_flash'		=> array('lang' => 'ALLOW_SIG_FLASH',		'validate' => 'bool',	'type' => 'radio:yes_no', 'explain' => false),						'allow_sig_smilies'		=> array('lang' => 'ALLOW_SIG_SMILIES',		'validate' => 'bool',	'type' => 'radio:yes_no', 'explain' => false),						'allow_sig_links'		=> array('lang' => 'ALLOW_SIG_LINKS',		'validate' => 'bool',	'type' => 'radio:yes_no', 'explain' => true),						'legend2'				=> 'GENERAL_SETTINGS',						'max_sig_chars'			=> array('lang' => 'MAX_SIG_LENGTH',		'validate' => 'int:0',	'type' => 'text:5:4', 'explain' => true),						'max_sig_urls'			=> array('lang' => 'MAX_SIG_URLS',			'validate' => 'int:0',	'type' => 'text:5:4', 'explain' => true),						'max_sig_font_size'		=> array('lang' => 'MAX_SIG_FONT_SIZE',		'validate' => 'int:0',	'type' => 'text:5:4', 'explain' => true, 'append' => ' %'),						'max_sig_smilies'		=> array('lang' => 'MAX_SIG_SMILIES',		'validate' => 'int:0',	'type' => 'text:5:4', 'explain' => true),						'max_sig_img_width'		=> array('lang' => 'MAX_SIG_IMG_WIDTH',		'validate' => 'int:0',	'type' => 'text:5:4', 'explain' => true, 'append' => ' ' . $user->lang['PIXEL']),						'max_sig_img_height'	=> array('lang' => 'MAX_SIG_IMG_HEIGHT',	'validate' => 'int:0',	'type' => 'text:5:4', 'explain' => true, 'append' => ' ' . $user->lang['PIXEL']),						'legend3'					=> 'ACP_SUBMIT_CHANGES',					)				);			break;			case 'registration':				$display_vars = array(					'title'	=> 'ACP_REGISTER_SETTINGS',					'vars'	=> array(						'legend1'				=> 'GENERAL_SETTINGS',						'max_name_chars'		=> array('lang' => 'USERNAME_LENGTH', 'validate' => 'int:8:180', 'type' => false, 'method' => false, 'explain' => false,),						'max_pass_chars'		=> array('lang' => 'PASSWORD_LENGTH', 'validate' => 'int:8:255', 'type' => false, 'method' => false, 'explain' => false,),						'require_activation'	=> array('lang' => 'ACC_ACTIVATION',	'validate' => 'int',	'type' => 'custom', 'method' => 'select_acc_activation', 'explain' => true),						'new_member_post_limit'	=> array('lang' => 'NEW_MEMBER_POST_LIMIT', 'validate' => 'int:0:255', 'type' => 'text:4:4', 'explain' => true, 'append' => ' ' . $user->lang['POSTS']),						'new_member_group_default'=> array('lang' => 'NEW_MEMBER_GROUP_DEFAULT', 'validate' => 'bool', 'type' => 'radio:yes_no', 'explain' => true),						'min_name_chars'		=> array('lang' => 'USERNAME_LENGTH',	'validate' => 'int:1',	'type' => 'custom:5:180', 'method' => 'username_length', 'explain' => true),						'min_pass_chars'		=> array('lang' => 'PASSWORD_LENGTH',	'validate' => 'int:1',	'type' => 'custom', 'method' => 'password_length', 'explain' => true),						'allow_name_chars'		=> array('lang' => 'USERNAME_CHARS',	'validate' => 'string',	'type' => 'select', 'method' => 'select_username_chars', 'explain' => true),						'pass_complex'			=> array('lang' => 'PASSWORD_TYPE',		'validate' => 'string',	'type' => 'select', 'method' => 'select_password_chars', 'explain' => true),						'chg_passforce'			=> array('lang' => 'FORCE_PASS_CHANGE',	'validate' => 'int:0',	'type' => 'text:3:3', 'explain' => true, 'append' => ' ' . $user->lang['DAYS']),						'legend2'				=> 'GENERAL_OPTIONS',						'allow_namechange'		=> array('lang' => 'ALLOW_NAME_CHANGE',		'validate' => 'bool',	'type' => 'radio:yes_no', 'explain' => false),						'allow_emailreuse'		=> array('lang' => 'ALLOW_EMAIL_REUSE',		'validate' => 'bool',	'type' => 'radio:yes_no', 'explain' => true),						'enable_confirm'		=> array('lang' => 'VISUAL_CONFIRM_REG',	'validate' => 'bool',	'type' => 'radio:yes_no', 'explain' => true),						'max_login_attempts'	=> array('lang' => 'MAX_LOGIN_ATTEMPTS',	'validate' => 'int:0',	'type' => 'text:3:3', 'explain' => true),						'max_reg_attempts'		=> array('lang' => 'REG_LIMIT',				'validate' => 'int:0',	'type' => 'text:4:4', 'explain' => true),						'legend3'			=> 'COPPA',						'coppa_enable'		=> array('lang' => 'ENABLE_COPPA',		'validate' => 'bool',	'type' => 'radio:yes_no', 'explain' => true),						'coppa_mail'		=> array('lang' => 'COPPA_MAIL',		'validate' => 'string',	'type' => 'textarea:5:40', 'explain' => true),						'coppa_fax'			=> array('lang' => 'COPPA_FAX',			'validate' => 'string',	'type' => 'text:25:100', 'explain' => false),						'legend4'			=> 'ACP_SUBMIT_CHANGES',					)				);			break;			case 'feed':				$display_vars = array(					'title'	=> 'ACP_FEED_MANAGEMENT',					'vars'	=> array(						'legend1'					=> 'ACP_FEED_GENERAL',						'feed_enable'				=> array('lang' => 'ACP_FEED_ENABLE',				'validate' => 'bool',	'type' => 'radio:enabled_disabled',	'explain' => true ),						'feed_item_statistics'		=> array('lang' => 'ACP_FEED_ITEM_STATISTICS',		'validate' => 'bool',	'type' => 'radio:enabled_disabled',	'explain' => true),						'feed_http_auth'			=> array('lang' => 'ACP_FEED_HTTP_AUTH',			'validate' => 'bool',	'type' => 'radio:enabled_disabled',	'explain' => true),						'legend2'					=> 'ACP_FEED_POST_BASED',						'feed_limit_post'			=> array('lang' => 'ACP_FEED_LIMIT',				'validate' => 'int:5',	'type' => 'text:3:4',				'explain' => true),						'feed_overall'				=> array('lang' => 'ACP_FEED_OVERALL',				'validate' => 'bool',	'type' => 'radio:enabled_disabled',	'explain' => true ),						'feed_forum'				=> array('lang' => 'ACP_FEED_FORUM',				'validate' => 'bool',	'type' => 'radio:enabled_disabled',	'explain' => true ),						'feed_topic'				=> array('lang' => 'ACP_FEED_TOPIC',				'validate' => 'bool',	'type' => 'radio:enabled_disabled',	'explain' => true ),						'legend3'					=> 'ACP_FEED_TOPIC_BASED',						'feed_limit_topic'			=> array('lang' => 'ACP_FEED_LIMIT',				'validate' => 'int:5',	'type' => 'text:3:4',				'explain' => true),						'feed_topics_new'			=> array('lang' => 'ACP_FEED_TOPICS_NEW',			'validate' => 'bool',	'type' => 'radio:enabled_disabled',	'explain' => true ),						'feed_topics_active'		=> array('lang' => 'ACP_FEED_TOPICS_ACTIVE',		'validate' => 'bool',	'type' => 'radio:enabled_disabled',	'explain' => true ),						'feed_news_id'				=> array('lang' => 'ACP_FEED_NEWS',					'validate' => 'string',	'type' => 'custom', 'method' => 'select_news_forums', 'explain' => true),						'legend4'					=> 'ACP_FEED_SETTINGS_OTHER',						'feed_overall_forums'		=> array('lang'	=> 'ACP_FEED_OVERALL_FORUMS',		'validate' => 'bool',	'type' => 'radio:enabled_disabled',	'explain' => true ),						'feed_exclude_id'			=> array('lang' => 'ACP_FEED_EXCLUDE_ID',			'validate' => 'string',	'type' => 'custom', 'method' => 'select_exclude_forums', 'explain' => true),					)				);			break;			case 'cookie':				$display_vars = array(					'title'	=> 'ACP_COOKIE_SETTINGS',					'vars'	=> array(						'legend1'		=> 'ACP_COOKIE_SETTINGS',						'cookie_domain'	=> array('lang' => 'COOKIE_DOMAIN',	'validate' => 'string',	'type' => 'text::255', 'explain' => false),						'cookie_name'	=> array('lang' => 'COOKIE_NAME',	'validate' => 'string',	'type' => 'text::16', 'explain' => false),						'cookie_path'	=> array('lang'	=> 'COOKIE_PATH',	'validate' => 'string',	'type' => 'text::255', 'explain' => false),						'cookie_secure'	=> array('lang' => 'COOKIE_SECURE',	'validate' => 'bool',	'type' => 'radio:disabled_enabled', 'explain' => true)					)				);			break;			case 'load':				$display_vars = array(					'title'	=> 'ACP_LOAD_SETTINGS',					'vars'	=> array(						'legend1'			=> 'GENERAL_SETTINGS',						'limit_load'		=> array('lang' => 'LIMIT_LOAD',		'validate' => 'string',	'type' => 'text:4:4', 'explain' => true),						'session_length'	=> array('lang' => 'SESSION_LENGTH',	'validate' => 'int:60',	'type' => 'text:5:10', 'explain' => true, 'append' => ' ' . $user->lang['SECONDS']),						'active_sessions'	=> array('lang' => 'LIMIT_SESSIONS',	'validate' => 'int:0',	'type' => 'text:4:4', 'explain' => true),						'load_online_time'	=> array('lang' => 'ONLINE_LENGTH',		'validate' => 'int:0',	'type' => 'text:4:3', 'explain' => true, 'append' => ' ' . $user->lang['MINUTES']),						'legend2'				=> 'GENERAL_OPTIONS',						'load_db_track'			=> array('lang' => 'YES_POST_MARKING',		'validate' => 'bool',	'type' => 'radio:yes_no', 'explain' => true),						'load_db_lastread'		=> array('lang' => 'YES_READ_MARKING',		'validate' => 'bool',	'type' => 'radio:yes_no', 'explain' => true),						'load_anon_lastread'	=> array('lang' => 'YES_ANON_READ_MARKING',	'validate' => 'bool',	'type' => 'radio:yes_no', 'explain' => true),						'load_online'			=> array('lang' => 'YES_ONLINE',			'validate' => 'bool',	'type' => 'radio:yes_no', 'explain' => true),						'load_online_guests'	=> array('lang' => 'YES_ONLINE_GUESTS',		'validate' => 'bool',	'type' => 'radio:yes_no', 'explain' => true),						'load_onlinetrack'		=> array('lang' => 'YES_ONLINE_TRACK',		'validate' => 'bool',	'type' => 'radio:yes_no', 'explain' => true),						'load_birthdays'		=> array('lang' => 'YES_BIRTHDAYS',			'validate' => 'bool',	'type' => 'radio:yes_no', 'explain' => true),						'load_unreads_search'	=> array('lang' => 'YES_UNREAD_SEARCH',		'validate' => 'bool',	'type' => 'radio:yes_no', 'explain' => false),						'load_moderators'		=> array('lang' => 'YES_MODERATORS',		'validate' => 'bool',	'type' => 'radio:yes_no', 'explain' => false),						'load_jumpbox'			=> array('lang' => 'YES_JUMPBOX',			'validate' => 'bool',	'type' => 'radio:yes_no', 'explain' => false),						'load_user_activity'	=> array('lang' => 'LOAD_USER_ACTIVITY',	'validate' => 'bool',	'type' => 'radio:yes_no', 'explain' => true),						'load_tplcompile'		=> array('lang' => 'RECOMPILE_STYLES',	'validate' => 'bool',	'type' => 'radio:yes_no', 'explain' => true),						'legend3'				=> 'CUSTOM_PROFILE_FIELDS',						'load_cpf_memberlist'	=> array('lang' => 'LOAD_CPF_MEMBERLIST',	'validate' => 'bool',	'type' => 'radio:yes_no', 'explain' => false),						'load_cpf_viewprofile'	=> array('lang' => 'LOAD_CPF_VIEWPROFILE',	'validate' => 'bool',	'type' => 'radio:yes_no', 'explain' => false),						'load_cpf_viewtopic'	=> array('lang' => 'LOAD_CPF_VIEWTOPIC',	'validate' => 'bool',	'type' => 'radio:yes_no', 'explain' => false),						'legend4'					=> 'ACP_SUBMIT_CHANGES',					)				);			break;			case 'auth':				$display_vars = array(					'title'	=> 'ACP_AUTH_SETTINGS',					'vars'	=> array(						'legend1'		=> 'ACP_AUTH_SETTINGS',						'auth_method'	=> array('lang' => 'AUTH_METHOD',	'validate' => 'string',	'type' => 'select', 'method' => 'select_auth_method', 'explain' => false)					)				);			break;			case 'server':				$display_vars = array(					'title'	=> 'ACP_SERVER_SETTINGS',					'vars'	=> array(						'legend1'				=> 'ACP_SERVER_SETTINGS',						'gzip_compress'			=> array('lang' => 'ENABLE_GZIP',		'validate' => 'bool',	'type' => 'radio:yes_no', 'explain' => true),						'legend2'				=> 'PATH_SETTINGS',						'smilies_path'			=> array('lang' => 'SMILIES_PATH',		'validate' => 'rpath',	'type' => 'text:20:255', 'explain' => true),						'icons_path'			=> array('lang' => 'ICONS_PATH',		'validate' => 'rpath',	'type' => 'text:20:255', 'explain' => true),						'upload_icons_path'		=> array('lang' => 'UPLOAD_ICONS_PATH',	'validate' => 'rpath',	'type' => 'text:20:255', 'explain' => true),						'ranks_path'			=> array('lang' => 'RANKS_PATH',		'validate' => 'rpath',	'type' => 'text:20:255', 'explain' => true),						'legend3'				=> 'SERVER_URL_SETTINGS',						'force_server_vars'		=> array('lang' => 'FORCE_SERVER_VARS',	'validate' => 'bool',			'type' => 'radio:yes_no', 'explain' => true),						'server_protocol'		=> array('lang' => 'SERVER_PROTOCOL',	'validate' => 'string',			'type' => 'text:10:10', 'explain' => true),						'server_name'			=> array('lang' => 'SERVER_NAME',		'validate' => 'string',			'type' => 'text:40:255', 'explain' => true),						'server_port'			=> array('lang' => 'SERVER_PORT',		'validate' => 'int:0',			'type' => 'text:5:5', 'explain' => true),						'script_path'			=> array('lang' => 'SCRIPT_PATH',		'validate' => 'script_path',	'type' => 'text::255', 'explain' => true),						'legend4'					=> 'ACP_SUBMIT_CHANGES',					)				);			break;			case 'security':				$display_vars = array(					'title'	=> 'ACP_SECURITY_SETTINGS',					'vars'	=> array(						'legend1'				=> 'ACP_SECURITY_SETTINGS',						'allow_autologin'		=> array('lang' => 'ALLOW_AUTOLOGIN',		'validate' => 'bool',	'type' => 'radio:yes_no', 'explain' => true),						'max_autologin_time'	=> array('lang' => 'AUTOLOGIN_LENGTH',		'validate' => 'int:0',	'type' => 'text:5:5', 'explain' => true, 'append' => ' ' . $user->lang['DAYS']),						'ip_check'				=> array('lang' => 'IP_VALID',				'validate' => 'int',	'type' => 'custom', 'method' => 'select_ip_check', 'explain' => true),						'browser_check'			=> array('lang' => 'BROWSER_VALID',			'validate' => 'bool',	'type' => 'radio:yes_no', 'explain' => true),						'forwarded_for_check'	=> array('lang' => 'FORWARDED_FOR_VALID',	'validate' => 'bool',	'type' => 'radio:yes_no', 'explain' => true),						'referer_validation'	=> array('lang' => 'REFERER_VALID',		'validate' => 'int:0:3','type' => 'custom', 'method' => 'select_ref_check', 'explain' => true),						'check_dnsbl'			=> array('lang' => 'CHECK_DNSBL',			'validate' => 'bool',	'type' => 'radio:yes_no', 'explain' => true),						'email_check_mx'		=> array('lang' => 'EMAIL_CHECK_MX',		'validate' => 'bool',	'type' => 'radio:yes_no', 'explain' => true),						'pass_complex'			=> array('lang' => 'PASSWORD_TYPE',			'validate' => 'string',	'type' => 'select', 'method' => 'select_password_chars', 'explain' => true),						'chg_passforce'			=> array('lang' => 'FORCE_PASS_CHANGE',		'validate' => 'int:0',	'type' => 'text:3:3', 'explain' => true, 'append' => ' ' . $user->lang['DAYS']),						'max_login_attempts'	=> array('lang' => 'MAX_LOGIN_ATTEMPTS',	'validate' => 'int:0',	'type' => 'text:3:3', 'explain' => true),						'ip_login_limit_max'	=> array('lang' => 'IP_LOGIN_LIMIT_MAX',	'validate' => 'int:0',	'type' => 'text:3:3', 'explain' => true),						'ip_login_limit_time'	=> array('lang' => 'IP_LOGIN_LIMIT_TIME',	'validate' => 'int:0',	'type' => 'text:5:5', 'explain' => true, 'append' => ' ' . $user->lang['SECONDS']),						'ip_login_limit_use_forwarded'	=> array('lang' => 'IP_LOGIN_LIMIT_USE_FORWARDED',	'validate' => 'bool',	'type' => 'radio:yes_no', 'explain' => true),						'tpl_allow_php'			=> array('lang' => 'TPL_ALLOW_PHP',			'validate' => 'bool',	'type' => 'radio:yes_no', 'explain' => true),						'form_token_lifetime'	=> array('lang' => 'FORM_TIME_MAX',			'validate' => 'int:-1',	'type' => 'text:5:5', 'explain' => true, 'append' => ' ' . $user->lang['SECONDS']),						'form_token_sid_guests'	=> array('lang' => 'FORM_SID_GUESTS',		'validate' => 'bool',	'type' => 'radio:yes_no', 'explain' => true),					)				);			break;			case 'email':				$display_vars = array(					'title'	=> 'ACP_EMAIL_SETTINGS',					'vars'	=> array(						'legend1'				=> 'GENERAL_SETTINGS',						'email_enable'			=> array('lang' => 'ENABLE_EMAIL',			'validate' => 'bool',	'type' => 'radio:enabled_disabled', 'explain' => true),						'board_email_form'		=> array('lang' => 'BOARD_EMAIL_FORM',		'validate' => 'bool',	'type' => 'radio:enabled_disabled', 'explain' => true),						'email_function_name'	=> array('lang' => 'EMAIL_FUNCTION_NAME',	'validate' => 'string',	'type' => 'text:20:50', 'explain' => true),						'email_package_size'	=> array('lang' => 'EMAIL_PACKAGE_SIZE',	'validate' => 'int:0',	'type' => 'text:5:5', 'explain' => true),						'board_contact'			=> array('lang' => 'CONTACT_EMAIL',			'validate' => 'string',	'type' => 'text:25:100', 'explain' => true),						'board_email'			=> array('lang' => 'ADMIN_EMAIL',			'validate' => 'string',	'type' => 'text:25:100', 'explain' => true),						'board_email_sig'		=> array('lang' => 'EMAIL_SIG',				'validate' => 'string',	'type' => 'textarea:5:30', 'explain' => true),						'board_hide_emails'		=> array('lang' => 'BOARD_HIDE_EMAILS',		'validate' => 'bool',	'type' => 'radio:yes_no', 'explain' => true),						'legend2'				=> 'SMTP_SETTINGS',						'smtp_delivery'			=> array('lang' => 'USE_SMTP',				'validate' => 'bool',	'type' => 'radio:yes_no', 'explain' => true),						'smtp_host'				=> array('lang' => 'SMTP_SERVER',			'validate' => 'string',	'type' => 'text:25:50', 'explain' => false),						'smtp_port'				=> array('lang' => 'SMTP_PORT',				'validate' => 'int:0',	'type' => 'text:4:5', 'explain' => true),						'smtp_auth_method'		=> array('lang' => 'SMTP_AUTH_METHOD',		'validate' => 'string',	'type' => 'select', 'method' => 'mail_auth_select', 'explain' => true),						'smtp_username'			=> array('lang' => 'SMTP_USERNAME',			'validate' => 'string',	'type' => 'text:25:255', 'explain' => true),						'smtp_password'			=> array('lang' => 'SMTP_PASSWORD',			'validate' => 'string',	'type' => 'password:25:255', 'explain' => true),						'legend3'					=> 'ACP_SUBMIT_CHANGES',					)				);			break;			default:				trigger_error('NO_MODE', E_USER_ERROR);			break;		}		if (isset($display_vars['lang']))		{			$user->add_lang($display_vars['lang']);		}		$this->new_config = $config;		$cfg_array = (isset($_REQUEST['config'])) ? utf8_normalize_nfc(request_var('config', array('' => ''), true)) : $this->new_config;		$error = array();		// We validate the complete config if whished		validate_config_vars($display_vars['vars'], $cfg_array, $error);		if ($submit && !check_form_key($form_key))		{			$error[] = $user->lang['FORM_INVALID'];		}		// Do not write values if there is an error		if (sizeof($error))		{			$submit = false;		}		// We go through the display_vars to make sure no one is trying to set variables he/she is not allowed to...		foreach ($display_vars['vars'] as $config_name => $null)		{			if (!isset($cfg_array[$config_name]) || strpos($config_name, 'legend') !== false)			{				continue;			}			if ($config_name == 'auth_method' || $config_name == 'feed_news_id' || $config_name == 'feed_exclude_id')			{				continue;			}			$this->new_config[$config_name] = $config_value = $cfg_array[$config_name];			if ($config_name == 'email_function_name')			{				$this->new_config['email_function_name'] = trim(str_replace(array('(', ')'), array('', ''), $this->new_config['email_function_name']));				$this->new_config['email_function_name'] = (empty($this->new_config['email_function_name']) || !function_exists($this->new_config['email_function_name'])) ? 'mail' : $this->new_config['email_function_name'];				$config_value = $this->new_config['email_function_name'];			}			if ($submit)			{				set_config($config_name, $config_value);				if ($config_name == 'allow_quick_reply' && isset($_POST['allow_quick_reply_enable']))				{					enable_bitfield_column_flag(FORUMS_TABLE, 'forum_flags', log(FORUM_FLAG_QUICK_REPLY, 2));				}			}		}		// Store news and exclude ids		if ($mode == 'feed' && $submit)		{			$cache->destroy('_feed_news_forum_ids');			$cache->destroy('_feed_excluded_forum_ids');			$this->store_feed_forums(FORUM_OPTION_FEED_NEWS, 'feed_news_id');			$this->store_feed_forums(FORUM_OPTION_FEED_EXCLUDE, 'feed_exclude_id');		}		if ($mode == 'auth')		{			// Retrieve a list of auth plugins and check their config values			$auth_plugins = array();			$dp = @opendir($phpbb_root_path . 'includes/auth');			if ($dp)			{				while (($file = readdir($dp)) !== false)				{					if (preg_match('#^auth_(.*?)\.' . $phpEx . '$#', $file))					{						$auth_plugins[] = basename(preg_replace('#^auth_(.*?)\.' . $phpEx . '$#', '\1', $file));					}				}				closedir($dp);				sort($auth_plugins);			}			$updated_auth_settings = false;			$old_auth_config = array();			foreach ($auth_plugins as $method)			{				if ($method && file_exists($phpbb_root_path . 'includes/auth/auth_' . $method . '.' . $phpEx))				{					include_once($phpbb_root_path . 'includes/auth/auth_' . $method . '.' . $phpEx);					$method = 'acp_' . $method;					if (function_exists($method))					{						if ($fields = $method($this->new_config))						{							// Check if we need to create config fields for this plugin and save config when submit was pressed							foreach ($fields['config'] as $field)							{								if (!isset($config[$field]))								{									set_config($field, '');								}								if (!isset($cfg_array[$field]) || strpos($field, 'legend') !== false)								{									continue;								}								$old_auth_config[$field] = $this->new_config[$field];								$config_value = $cfg_array[$field];								$this->new_config[$field] = $config_value;								if ($submit)								{									$updated_auth_settings = true;									set_config($field, $config_value);								}							}						}						unset($fields);					}				}			}			if ($submit && (($cfg_array['auth_method'] != $this->new_config['auth_method']) || $updated_auth_settings))			{				$method = basename($cfg_array['auth_method']);				if ($method && in_array($method, $auth_plugins))				{					include_once($phpbb_root_path . 'includes/auth/auth_' . $method . '.' . $phpEx);					$method = 'init_' . $method;					if (function_exists($method))					{						if ($error = $method())						{							foreach ($old_auth_config as $config_name => $config_value)							{								set_config($config_name, $config_value);							}							trigger_error($error . adm_back_link($this->u_action), E_USER_WARNING);						}					}					set_config('auth_method', basename($cfg_array['auth_method']));				}				else				{					trigger_error('NO_AUTH_PLUGIN', E_USER_ERROR);				}			}		}		if ($submit)		{			add_log('admin', 'LOG_CONFIG_' . strtoupper($mode));			trigger_error($user->lang['CONFIG_UPDATED'] . adm_back_link($this->u_action));		}		$this->tpl_name = 'acp_board';		$this->page_title = $display_vars['title'];		$template->assign_vars(array(			'L_TITLE'			=> $user->lang[$display_vars['title']],			'L_TITLE_EXPLAIN'	=> $user->lang[$display_vars['title'] . '_EXPLAIN'],			'S_ERROR'			=> (sizeof($error)) ? true : false,			'ERROR_MSG'			=> implode('<br />', $error),			'U_ACTION'			=> $this->u_action)		);		// Output relevant page		foreach ($display_vars['vars'] as $config_key => $vars)		{			if (!is_array($vars) && strpos($config_key, 'legend') === false)			{				continue;			}			if (strpos($config_key, 'legend') !== false)			{				$template->assign_block_vars('options', array(					'S_LEGEND'		=> true,					'LEGEND'		=> (isset($user->lang[$vars])) ? $user->lang[$vars] : $vars)				);				continue;			}			$type = explode(':', $vars['type']);			$l_explain = '';			if ($vars['explain'] && isset($vars['lang_explain']))			{				$l_explain = (isset($user->lang[$vars['lang_explain']])) ? $user->lang[$vars['lang_explain']] : $vars['lang_explain'];			}			else if ($vars['explain'])			{				$l_explain = (isset($user->lang[$vars['lang'] . '_EXPLAIN'])) ? $user->lang[$vars['lang'] . '_EXPLAIN'] : '';			}			$content = build_cfg_template($type, $config_key, $this->new_config, $config_key, $vars);			if (empty($content))			{				continue;			}			$template->assign_block_vars('options', array(				'KEY'			=> $config_key,				'TITLE'			=> (isset($user->lang[$vars['lang']])) ? $user->lang[$vars['lang']] : $vars['lang'],				'S_EXPLAIN'		=> $vars['explain'],				'TITLE_EXPLAIN'	=> $l_explain,				'CONTENT'		=> $content,				)			);			unset($display_vars['vars'][$config_key]);		}		if ($mode == 'auth')		{			$template->assign_var('S_AUTH', true);			foreach ($auth_plugins as $method)			{				if ($method && file_exists($phpbb_root_path . 'includes/auth/auth_' . $method . '.' . $phpEx))				{					$method = 'acp_' . $method;					if (function_exists($method))					{						$fields = $method($this->new_config);						if ($fields['tpl'])						{							$template->assign_block_vars('auth_tpl', array(								'TPL'	=> $fields['tpl'])							);						}						unset($fields);					}				}			}		}	}	/**	* Select auth method	*/	function select_auth_method($selected_method, $key = '')	{		global $phpbb_root_path, $phpEx;		$auth_plugins = array();		$dp = @opendir($phpbb_root_path . 'includes/auth');		if (!$dp)		{			return '';		}		while (($file = readdir($dp)) !== false)		{			if (preg_match('#^auth_(.*?)\.' . $phpEx . '$#', $file))			{				$auth_plugins[] = preg_replace('#^auth_(.*?)\.' . $phpEx . '$#', '\1', $file);			}		}		closedir($dp);		sort($auth_plugins);		$auth_select = '';		foreach ($auth_plugins as $method)		{			$selected = ($selected_method == $method) ? ' selected="selected"' : '';			$auth_select .= '<option value="' . $method . '"' . $selected . '>' . ucfirst($method) . '</option>';		}		return $auth_select;	}	/**	* Select mail authentication method	*/	function mail_auth_select($selected_method, $key = '')	{		global $user;		$auth_methods = array('PLAIN', 'LOGIN', 'CRAM-MD5', 'DIGEST-MD5', 'POP-BEFORE-SMTP');		$s_smtp_auth_options = '';		foreach ($auth_methods as $method)		{			$s_smtp_auth_options .= '<option value="' . $method . '"' . (($selected_method == $method) ? ' selected="selected"' : '') . '>' . $user->lang['SMTP_' . str_replace('-', '_', $method)] . '</option>';		}		return $s_smtp_auth_options;	}	/**	* Select full folder action	*/	function full_folder_select($value, $key = '')	{		global $user;		return '<option value="1"' . (($value == 1) ? ' selected="selected"' : '') . '>' . $user->lang['DELETE_OLDEST_MESSAGES'] . '</option><option value="2"' . (($value == 2) ? ' selected="selected"' : '') . '>' . $user->lang['HOLD_NEW_MESSAGES_SHORT'] . '</option>';	}	/**	* Select ip validation	*/	function select_ip_check($value, $key = '')	{		$radio_ary = array(4 => 'ALL', 3 => 'CLASS_C', 2 => 'CLASS_B', 0 => 'NO_IP_VALIDATION');		return h_radio('config[ip_check]', $radio_ary, $value, $key);	}	/**	* Select referer validation	*/	function select_ref_check($value, $key = '')	{		$radio_ary = array(REFERER_VALIDATE_PATH => 'REF_PATH', REFERER_VALIDATE_HOST => 'REF_HOST', REFERER_VALIDATE_NONE => 'NO_REF_VALIDATION');		return h_radio('config[referer_validation]', $radio_ary, $value, $key);	}	/**	* Select account activation method	*/	function select_acc_activation($value, $key = '')	{		global $user, $config;		$radio_ary = array(			USER_ACTIVATION_DISABLE => 'ACC_DISABLE',			USER_ACTIVATION_NONE => 'ACC_NONE',		);		if ($config['email_enable'])		{			$radio_ary[USER_ACTIVATION_SELF] = 'ACC_USER';			$radio_ary[USER_ACTIVATION_ADMIN] = 'ACC_ADMIN';		}		$radio_text = h_radio('config[require_activation]', $radio_ary, $value, 'require_activation', $key, '<br />');		return $radio_text;	}	/**	* Maximum/Minimum username length	*/	function username_length($value, $key = '')	{		global $user;		return '<input id="' . $key . '" type="text" size="3" maxlength="3" name="config[min_name_chars]" value="' . $value . '" /> ' . $user->lang['MIN_CHARS'] . '&nbsp;&nbsp;<input type="text" size="3" maxlength="3" name="config[max_name_chars]" value="' . $this->new_config['max_name_chars'] . '" /> ' . $user->lang['MAX_CHARS'];	}	/**	* Allowed chars in usernames	*/	function select_username_chars($selected_value, $key)	{		global $user;		$user_char_ary = array('USERNAME_CHARS_ANY', 'USERNAME_ALPHA_ONLY', 'USERNAME_ALPHA_SPACERS', 'USERNAME_LETTER_NUM', 'USERNAME_LETTER_NUM_SPACERS', 'USERNAME_ASCII');		$user_char_options = '';		foreach ($user_char_ary as $user_type)		{			$selected = ($selected_value == $user_type) ? ' selected="selected"' : '';			$user_char_options .= '<option value="' . $user_type . '"' . $selected . '>' . $user->lang[$user_type] . '</option>';		}		return $user_char_options;	}	/**	* Maximum/Minimum password length	*/	function password_length($value, $key)	{		global $user;		return '<input id="' . $key . '" type="text" size="3" maxlength="3" name="config[min_pass_chars]" value="' . $value . '" /> ' . $user->lang['MIN_CHARS'] . '&nbsp;&nbsp;<input type="text" size="3" maxlength="3" name="config[max_pass_chars]" value="' . $this->new_config['max_pass_chars'] . '" /> ' . $user->lang['MAX_CHARS'];	}	/**	* Required chars in passwords	*/	function select_password_chars($selected_value, $key)	{		global $user;		$pass_type_ary = array('PASS_TYPE_ANY', 'PASS_TYPE_CASE', 'PASS_TYPE_ALPHA', 'PASS_TYPE_SYMBOL');		$pass_char_options = '';		foreach ($pass_type_ary as $pass_type)		{			$selected = ($selected_value == $pass_type) ? ' selected="selected"' : '';			$pass_char_options .= '<option value="' . $pass_type . '"' . $selected . '>' . $user->lang[$pass_type] . '</option>';		}		return $pass_char_options;	}	/**	* Select bump interval	*/	function bump_interval($value, $key)	{		global $user;		$s_bump_type = '';		$types = array('m' => 'MINUTES', 'h' => 'HOURS', 'd' => 'DAYS');		foreach ($types as $type => $lang)		{			$selected = ($this->new_config['bump_type'] == $type) ? ' selected="selected"' : '';			$s_bump_type .= '<option value="' . $type . '"' . $selected . '>' . $user->lang[$lang] . '</option>';		}		return '<input id="' . $key . '" type="text" size="3" maxlength="4" name="config[bump_interval]" value="' . $value . '" />&nbsp;<select name="config[bump_type]">' . $s_bump_type . '</select>';	}	/**	* Board disable option and message	*/	function board_disable($value, $key)	{		global $user;		$radio_ary = array(1 => 'YES', 0 => 'NO');		return h_radio('config[board_disable]', $radio_ary, $value) . '<br /><input id="' . $key . '" type="text" name="config[board_disable_msg]" maxlength="255" size="40" value="' . $this->new_config['board_disable_msg'] . '" />';	}	/**	* Global quick reply enable/disable setting and button to enable in all forums	*/	function quick_reply($value, $key)	{		global $user;		$radio_ary = array(1 => 'YES', 0 => 'NO');		return h_radio('config[allow_quick_reply]', $radio_ary, $value) .			'<br /><br /><input class="button2" type="submit" id="' . $key . '_enable" name="' . $key . '_enable" value="' . $user->lang['ALLOW_QUICK_REPLY_BUTTON'] . '" />';	}	/**	* Select default dateformat	*/	function dateformat_select($value, $key)	{		global $user, $config;		// Let the format_date function operate with the acp values		$old_tz = $user->timezone;		$old_dst = $user->dst;		$user->timezone = $config['board_timezone'] * 3600;		$user->dst = $config['board_dst'] * 3600;		$dateformat_options = '';		foreach ($user->lang['dateformats'] as $format => $null)		{			$dateformat_options .= '<option value="' . $format . '"' . (($format == $value) ? ' selected="selected"' : '') . '>';			$dateformat_options .= $user->format_date(time(), $format, false) . ((strpos($format, '|') !== false) ? $user->lang['VARIANT_DATE_SEPARATOR'] . $user->format_date(time(), $format, true) : '');			$dateformat_options .= '</option>';		}		$dateformat_options .= '<option value="custom"';		if (!isset($user->lang['dateformats'][$value]))		{			$dateformat_options .= ' selected="selected"';		}		$dateformat_options .= '>' . $user->lang['CUSTOM_DATEFORMAT'] . '</option>';		// Reset users date options		$user->timezone = $old_tz;		$user->dst = $old_dst;		return "<select name=\"dateoptions\" id=\"dateoptions\" onchange=\"if (this.value == 'custom') { document.getElementById('" . addslashes($key) . "').value = '" . addslashes($value) . "'; } else { document.getElementById('" . addslashes($key) . "').value = this.value; }\">$dateformat_options</select>		<input type=\"text\" name=\"config[$key]\" id=\"$key\" value=\"$value\" maxlength=\"30\" />";	}	/**	* Select multiple forums	*/	function select_news_forums($value, $key)	{		global $user, $config;		$forum_list = make_forum_select(false, false, true, true, true, false, true);		// Build forum options		$s_forum_options = '<select id="' . $key . '" name="' . $key . '[]" multiple="multiple">';		foreach ($forum_list as $f_id => $f_row)		{			$f_row['selected'] = phpbb_optionget(FORUM_OPTION_FEED_NEWS, $f_row['forum_options']);			$s_forum_options .= '<option value="' . $f_id . '"' . (($f_row['selected']) ? ' selected="selected"' : '') . (($f_row['disabled']) ? ' disabled="disabled" class="disabled-option"' : '') . '>' . $f_row['padding'] . $f_row['forum_name'] . '</option>';		}		$s_forum_options .= '</select>';		return $s_forum_options;	}	function select_exclude_forums($value, $key)	{		global $user, $config;		$forum_list = make_forum_select(false, false, true, true, true, false, true);		// Build forum options		$s_forum_options = '<select id="' . $key . '" name="' . $key . '[]" multiple="multiple">';		foreach ($forum_list as $f_id => $f_row)		{			$f_row['selected'] = phpbb_optionget(FORUM_OPTION_FEED_EXCLUDE, $f_row['forum_options']);			$s_forum_options .= '<option value="' . $f_id . '"' . (($f_row['selected']) ? ' selected="selected"' : '') . (($f_row['disabled']) ? ' disabled="disabled" class="disabled-option"' : '') . '>' . $f_row['padding'] . $f_row['forum_name'] . '</option>';		}		$s_forum_options .= '</select>';		return $s_forum_options;	}	function store_feed_forums($option, $key)	{		global $db, $cache;		// Get key		$values = request_var($key, array(0 => 0));		// Empty option bit for all forums		$sql = 'UPDATE ' . FORUMS_TABLE . '			SET forum_options = forum_options - ' . (1 << $option) . '			WHERE ' . $db->sql_bit_and('forum_options', $option, '<> 0');		$db->sql_query($sql);		// Already emptied for all...		if (sizeof($values))		{			// Set for selected forums			$sql = 'UPDATE ' . FORUMS_TABLE . '				SET forum_options = forum_options + ' . (1 << $option) . '				WHERE ' . $db->sql_in_set('forum_id', $values);			$db->sql_query($sql);		}		// Empty sql cache for forums table because options changed		$cache->destroy('sql', FORUMS_TABLE);	}}?>
<?php/**** @package VC* @version $Id$* @copyright (c) 2006, 2008 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @ignore*/if (!defined('IN_PHPBB')){	exit;}/*** Placeholder for autoload*/if (!class_exists('phpbb_default_captcha')){	include($phpbb_root_path . 'includes/captcha/plugins/captcha_abstract.' . $phpEx);}/*** @package VC*/class phpbb_captcha_gd_wave extends phpbb_default_captcha{	function phpbb_captcha_gd_wave()	{		global $phpbb_root_path, $phpEx;		if (!class_exists('captcha'))		{			include_once($phpbb_root_path . 'includes/captcha/captcha_gd_wave.' . $phpEx);		}	}	function get_instance()	{		return new phpbb_captcha_gd_wave();	}	function is_available()	{		global $phpbb_root_path, $phpEx;		if (@extension_loaded('gd'))		{			return true;		}		if (!function_exists('can_load_dll'))		{			include($phpbb_root_path . 'includes/functions_install.' . $phpEx);		}		return can_load_dll('gd');	}	function get_name()	{		return 'CAPTCHA_GD_3D';	}	function get_class_name()	{		return 'phpbb_captcha_gd_wave';	}	function acp_page($id, &$module)	{		global $config, $db, $template, $user;		trigger_error($user->lang['CAPTCHA_NO_OPTIONS'] . adm_back_link($module->u_action));	}}?>
<?php/**** @package acp* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @ignore*/if (!defined('IN_PHPBB')){	exit;}/*** @todo [smilies] check regular expressions for special char replacements (stored specialchared in db)* @package acp*/class acp_icons{	var $u_action;	function main($id, $mode)	{		global $db, $user, $auth, $template, $cache;		global $config, $phpbb_root_path, $phpbb_admin_path, $phpEx;		$user->add_lang('acp/posting');		// Set up general vars		$action = request_var('action', '');		$action = (isset($_POST['add'])) ? 'add' : $action;		$action = (isset($_POST['edit'])) ? 'edit' : $action;		$action = (isset($_POST['import'])) ? 'import' : $action;		$icon_id = request_var('id', 0);		$mode = ($mode == 'smilies') ? 'smilies' : 'icons';		$this->tpl_name = 'acp_icons';		// What are we working on?		switch ($mode)		{			case 'smilies':				$table = SMILIES_TABLE;				$lang = 'SMILIES';				$fields = 'smiley';				$img_path = $config['smilies_path'];			break;			case 'icons':				$table = ICONS_TABLE;				$lang = 'ICONS';				$fields = 'icons';				$img_path = $config['icons_path'];			break;		}		$this->page_title = 'ACP_' . $lang;		// Clear some arrays		$_images = $_paks = array();		$notice = '';		// Grab file list of paks and images		if ($action == 'edit' || $action == 'add' || $action == 'import')		{			$imglist = filelist($phpbb_root_path . $img_path, '');			foreach ($imglist as $path => $img_ary)			{				if (empty($img_ary))				{					continue;				}				asort($img_ary, SORT_STRING);				foreach ($img_ary as $img)				{					$img_size = getimagesize($phpbb_root_path . $img_path . '/' . $path . $img);					if (!$img_size[0] || !$img_size[1] || strlen($img) > 255)					{						continue;					}					// adjust the width and height to be lower than 128px while perserving the aspect ratio (for icons)					if ($mode == 'icons')					{						if ($img_size[0] > 127 && $img_size[0] > $img_size[1])						{							$img_size[1] = (int) ($img_size[1] * (127 / $img_size[0]));							$img_size[0] = 127;						}						else if ($img_size[1] > 127)						{							$img_size[0] = (int) ($img_size[0] * (127 / $img_size[1]));							$img_size[1] = 127;						}					}					$_images[$path . $img]['file'] = $path . $img;					$_images[$path . $img]['width'] = $img_size[0];					$_images[$path . $img]['height'] = $img_size[1];				}			}			unset($imglist);			if ($dir = @opendir($phpbb_root_path . $img_path))			{				while (($file = readdir($dir)) !== false)				{					if (is_file($phpbb_root_path . $img_path . '/' . $file) && preg_match('#\.pak$#i', $file))					{						$_paks[] = $file;					}				}				closedir($dir);				if (!empty($_paks))				{					asort($_paks, SORT_STRING);				}			}		}		// What shall we do today? Oops, I believe that's trademarked ...		switch ($action)		{			case 'edit':				unset($_images);				$_images = array();			// no break;			case 'add':				$smilies = $default_row = array();				$smiley_options = $order_list = $add_order_list = '';				if ($action == 'add' && $mode == 'smilies')				{					$sql = 'SELECT *						FROM ' . SMILIES_TABLE . '						ORDER BY smiley_order';					$result = $db->sql_query($sql);					while ($row = $db->sql_fetchrow($result))					{						if (empty($smilies[$row['smiley_url']]))						{							$smilies[$row['smiley_url']] = $row;						}					}					$db->sql_freeresult($result);					if (sizeof($smilies))					{						foreach ($smilies as $row)						{							$selected = false;							if (!$smiley_options)							{								$selected = true;								$default_row = $row;							}							$smiley_options .= '<option value="' . $row['smiley_url'] . '"' . (($selected) ? ' selected="selected"' : '') . '>' . $row['smiley_url'] . '</option>';							$template->assign_block_vars('smile', array(								'SMILEY_URL'	=> addslashes($row['smiley_url']),								'CODE'			=> addslashes($row['code']),								'EMOTION'		=> addslashes($row['emotion']),								'WIDTH'			=> $row['smiley_width'],								'HEIGHT'		=> $row['smiley_height'],								'ORDER'			=> $row['smiley_order'] + 1,							));						}					}				}				$sql = "SELECT *					FROM $table					ORDER BY {$fields}_order " . (($icon_id || $action == 'add') ? 'DESC' : 'ASC');				$result = $db->sql_query($sql);				$data = array();				$after = false;				$display = 0;				$order_lists = array('', '');				$add_order_lists = array('', '');				$display_count = 0;				while ($row = $db->sql_fetchrow($result))				{					if ($action == 'add')					{						unset($_images[$row[$fields . '_url']]);					}					if ($row[$fields . '_id'] == $icon_id)					{						$after = true;						$display = $row['display_on_posting'];						$data[$row[$fields . '_url']] = $row;					}					else					{						if ($action == 'edit' && !$icon_id)						{							$data[$row[$fields . '_url']] = $row;						}						$selected = '';						if (!empty($after))						{							$selected = ' selected="selected"';							$after = false;						}						if ($row['display_on_posting'])						{							$display_count++;						}						$after_txt = ($mode == 'smilies') ? $row['code'] : $row['icons_url'];						$order_lists[$row['display_on_posting']] = '<option value="' . ($row[$fields . '_order'] + 1) . '"' . $selected . '>' . sprintf($user->lang['AFTER_' . $lang], ' -&gt; ' . $after_txt) . '</option>' . $order_lists[$row['display_on_posting']];						if (!empty($default_row))						{							$add_order_lists[$row['display_on_posting']] = '<option value="' . ($row[$fields . '_order'] + 1) . '"' . (($row[$fields . '_id'] == $default_row['smiley_id']) ? ' selected="selected"' : '') . '>' . sprintf($user->lang['AFTER_' . $lang], ' -&gt; ' . $after_txt) . '</option>' . $add_order_lists[$row['display_on_posting']];						}					}				}				$db->sql_freeresult($result);				$order_list = '<option value="1"' . ((!isset($after)) ? ' selected="selected"' : '') . '>' . $user->lang['FIRST'] . '</option>';				$add_order_list = '<option value="1">' . $user->lang['FIRST'] . '</option>';				if ($action == 'add')				{					$data = $_images;				}				$colspan = (($mode == 'smilies') ? 7 : 5);				$colspan += ($icon_id) ? 1 : 0;				$colspan += ($action == 'add') ? 2 : 0;				$template->assign_vars(array(					'S_EDIT'		=> true,					'S_SMILIES'		=> ($mode == 'smilies') ? true : false,					'S_ADD'			=> ($action == 'add') ? true : false,					'S_ORDER_LIST_DISPLAY'		=> $order_list . $order_lists[1],					'S_ORDER_LIST_UNDISPLAY'	=> $order_list . $order_lists[0],					'S_ORDER_LIST_DISPLAY_COUNT'	=> $display_count + 1,					'L_TITLE'		=> $user->lang['ACP_' . $lang],					'L_EXPLAIN'		=> $user->lang['ACP_' . $lang . '_EXPLAIN'],					'L_CONFIG'		=> $user->lang[$lang . '_CONFIG'],					'L_URL'			=> $user->lang[$lang . '_URL'],					'L_LOCATION'	=> $user->lang[$lang . '_LOCATION'],					'L_WIDTH'		=> $user->lang[$lang . '_WIDTH'],					'L_HEIGHT'		=> $user->lang[$lang . '_HEIGHT'],					'L_ORDER'		=> $user->lang[$lang . '_ORDER'],					'L_NO_ICONS'	=> $user->lang['NO_' . $lang . '_' . strtoupper($action)],					'COLSPAN'		=> $colspan,					'ID'			=> $icon_id,					'U_BACK'		=> $this->u_action,					'U_ACTION'		=> $this->u_action . '&amp;action=' . (($action == 'add') ? 'create' : 'modify'),				));				foreach ($data as $img => $img_row)				{					$template->assign_block_vars('items', array(						'IMG'		=> $img,						'A_IMG'		=> addslashes($img),						'IMG_SRC'	=> $phpbb_root_path . $img_path . '/' . $img,						'CODE'		=> ($mode == 'smilies' && isset($img_row['code'])) ? $img_row['code'] : '',						'EMOTION'	=> ($mode == 'smilies' && isset($img_row['emotion'])) ? $img_row['emotion'] : '',						'S_ID'				=> (isset($img_row[$fields . '_id'])) ? true : false,						'ID'				=> (isset($img_row[$fields . '_id'])) ? $img_row[$fields . '_id'] : 0,						'WIDTH'				=> (!empty($img_row[$fields .'_width'])) ? $img_row[$fields .'_width'] : $img_row['width'],						'HEIGHT'			=> (!empty($img_row[$fields .'_height'])) ? $img_row[$fields .'_height'] : $img_row['height'],						'POSTING_CHECKED'	=> (!empty($img_row['display_on_posting']) || $action == 'add') ? ' checked="checked"' : '',					));				}				// Ok, another row for adding an addition code for a pre-existing image...				if ($action == 'add' && $mode == 'smilies' && sizeof($smilies))				{					$template->assign_vars(array(						'S_ADD_CODE'		=> true,						'S_IMG_OPTIONS'		=> $smiley_options,						'S_ADD_ORDER_LIST_DISPLAY'		=> $add_order_list . $add_order_lists[1],						'S_ADD_ORDER_LIST_UNDISPLAY'	=> $add_order_list . $add_order_lists[0],						'IMG_SRC'			=> $phpbb_root_path . $img_path . '/' . $default_row['smiley_url'],						'IMG_PATH'			=> $img_path,						'PHPBB_ROOT_PATH'	=> $phpbb_root_path,						'CODE'				=> $default_row['code'],						'EMOTION'			=> $default_row['emotion'],						'WIDTH'				=> $default_row['smiley_width'],						'HEIGHT'			=> $default_row['smiley_height'],					));				}				return;			break;			case 'create':			case 'modify':				// Get items to create/modify				$images = (isset($_POST['image'])) ? array_keys(request_var('image', array('' => 0))) : array();				// Now really get the items				$image_id		= (isset($_POST['id'])) ? request_var('id', array('' => 0)) : array();				$image_order	= (isset($_POST['order'])) ? request_var('order', array('' => 0)) : array();				$image_width	= (isset($_POST['width'])) ? request_var('width', array('' => 0)) : array();				$image_height	= (isset($_POST['height'])) ? request_var('height', array('' => 0)) : array();				$image_add		= (isset($_POST['add_img'])) ? request_var('add_img', array('' => 0)) : array();				$image_emotion	= utf8_normalize_nfc(request_var('emotion', array('' => ''), true));				$image_code		= utf8_normalize_nfc(request_var('code', array('' => ''), true));				$image_display_on_posting = (isset($_POST['display_on_posting'])) ? request_var('display_on_posting', array('' => 0)) : array();				// Ok, add the relevant bits if we are adding new codes to existing emoticons...				if (!empty($_POST['add_additional_code']))				{					$add_image			= request_var('add_image', '');					$add_code			= utf8_normalize_nfc(request_var('add_code', '', true));					$add_emotion		= utf8_normalize_nfc(request_var('add_emotion', '', true));					if ($add_image && $add_emotion && $add_code)					{						$images[] = $add_image;						$image_add[$add_image] = true;						$image_code[$add_image] = $add_code;						$image_emotion[$add_image] = $add_emotion;						$image_width[$add_image] = request_var('add_width', 0);						$image_height[$add_image] = request_var('add_height', 0);						if (!empty($_POST['add_display_on_posting']))						{							$image_display_on_posting[$add_image] = 1;						}						$image_order[$add_image] = request_var('add_order', 0);					}				}				if ($mode == 'smilies' && $action == 'create')				{					$smiley_count = $this->item_count($table);					$addable_smileys_count = sizeof($images);					foreach ($images as $image)					{						if (!isset($image_add[$image]))						{							--$addable_smileys_count;						}					}					if ($smiley_count + $addable_smileys_count > SMILEY_LIMIT)					{						trigger_error(sprintf($user->lang['TOO_MANY_SMILIES'], SMILEY_LIMIT) . adm_back_link($this->u_action), E_USER_WARNING);					}				}				$icons_updated = 0;				$errors = array();				foreach ($images as $image)				{					if ($mode == 'smilies' && ($image_emotion[$image] == '' || $image_code[$image] == ''))					{						$errors[$image] = 'SMILIE_NO_' . (($image_emotion[$image] == '') ? 'EMOTION' : 'CODE');					}					else if ($action == 'create' && !isset($image_add[$image]))					{						// skip images where add wasn't checked					}					else if (!file_exists($phpbb_root_path . $img_path . '/' . $image))					{						$errors[$image] = 'SMILIE_NO_FILE';					}					else					{						if ($image_width[$image] == 0 || $image_height[$image] == 0)						{							$img_size = getimagesize($phpbb_root_path . $img_path . '/' . $image);							$image_width[$image] = $img_size[0];							$image_height[$image] = $img_size[1];						}						// Adjust image width/height for icons						if ($mode == 'icons')						{							if ($image_width[$image] > 127 && $image_width[$image] > $image_height[$image])							{								$image_height[$image] = (int) ($image_height[$image] * (127 / $image_width[$image]));								$image_width[$image] = 127;							}							else if ($image_height[$image] > 127)							{								$image_width[$image] = (int) ($image_width[$image] * (127 / $image_height[$image]));								$image_height[$image] = 127;							}						}						$img_sql = array(							$fields . '_url'		=> $image,							$fields . '_width'		=> $image_width[$image],							$fields . '_height'		=> $image_height[$image],							'display_on_posting'	=> (isset($image_display_on_posting[$image])) ? 1 : 0,						);						if ($mode == 'smilies')						{							$img_sql = array_merge($img_sql, array(								'emotion'	=> $image_emotion[$image],								'code'		=> $image_code[$image])							);						}						// Image_order holds the 'new' order value						if (!empty($image_order[$image]))						{							$img_sql = array_merge($img_sql, array(								$fields . '_order'	=>	$image_order[$image])							);							// Since we always add 'after' an item, we just need to increase all following + the current by one							$sql = "UPDATE $table								SET {$fields}_order = {$fields}_order + 1								WHERE {$fields}_order >= {$image_order[$image]}";							$db->sql_query($sql);							// If we adjust the order, we need to adjust all other orders too - they became inaccurate...							foreach ($image_order as $_image => $_order)							{								if ($_image == $image)								{									continue;								}								if ($_order >= $image_order[$image])								{									$image_order[$_image]++;								}							}						}						if ($action == 'modify'  && !empty($image_id[$image]))						{							$sql = "UPDATE $table								SET " . $db->sql_build_array('UPDATE', $img_sql) . "								WHERE {$fields}_id = " . $image_id[$image];							$db->sql_query($sql);							$icons_updated++;						}						else if ($action !== 'modify')						{							$sql = "INSERT INTO $table " . $db->sql_build_array('INSERT', $img_sql);							$db->sql_query($sql);							$icons_updated++;						} 					}				}				$cache->destroy('_icons');				$cache->destroy('sql', $table);				$level = E_USER_NOTICE;				switch ($icons_updated)				{					case 0:						$suc_lang = "{$lang}_NONE";						$level = E_USER_WARNING;						break;					case 1:						$suc_lang = "{$lang}_ONE";						break;					default:						$suc_lang = $lang;				}				$errormsgs = '';				foreach ($errors as $img => $error)				{					$errormsgs .= '<br />' . sprintf($user->lang[$error], $img);				}				if ($action == 'modify')				{					trigger_error($user->lang[$suc_lang . '_EDITED'] . $errormsgs . adm_back_link($this->u_action), $level);				}				else				{					trigger_error($user->lang[$suc_lang . '_ADDED'] . $errormsgs . adm_back_link($this->u_action), $level);				}			break;			case 'import':				$pak = request_var('pak', '');				$current = request_var('current', '');				if ($pak != '')				{					$order = 0;					if (!($pak_ary = @file($phpbb_root_path . $img_path . '/' . $pak)))					{						trigger_error($user->lang['PAK_FILE_NOT_READABLE'] . adm_back_link($this->u_action), E_USER_WARNING);					}					// Make sure the pak_ary is valid					foreach ($pak_ary as $pak_entry)					{						if (preg_match_all("#'(.*?)', ?#", $pak_entry, $data))						{							if ((sizeof($data[1]) != 4 && $mode == 'icons') ||								((sizeof($data[1]) != 6 || (empty($data[1][4]) || empty($data[1][5]))) && $mode == 'smilies' ))							{								trigger_error($user->lang['WRONG_PAK_TYPE'] . adm_back_link($this->u_action), E_USER_WARNING);							}						}						else						{							trigger_error($user->lang['WRONG_PAK_TYPE'] . adm_back_link($this->u_action), E_USER_WARNING);						}					}					// The user has already selected a smilies_pak file					if ($current == 'delete')					{						switch ($db->sql_layer)						{							case 'sqlite':							case 'firebird':								$db->sql_query('DELETE FROM ' . $table);							break;							default:								$db->sql_query('TRUNCATE TABLE ' . $table);							break;						}						switch ($mode)						{							case 'smilies':							break;							case 'icons':								// Reset all icon_ids								$db->sql_query('UPDATE ' . TOPICS_TABLE . ' SET icon_id = 0');								$db->sql_query('UPDATE ' . POSTS_TABLE . ' SET icon_id = 0');							break;						}					}					else					{						$cur_img = array();						$field_sql = ($mode == 'smilies') ? 'code' : 'icons_url';						$sql = "SELECT $field_sql							FROM $table";						$result = $db->sql_query($sql);						while ($row = $db->sql_fetchrow($result))						{							++$order;							$cur_img[$row[$field_sql]] = 1;						}						$db->sql_freeresult($result);					}					if ($mode == 'smilies')					{						$smiley_count = $this->item_count($table);						if ($smiley_count + sizeof($pak_ary) > SMILEY_LIMIT)						{							trigger_error(sprintf($user->lang['TOO_MANY_SMILIES'], SMILEY_LIMIT) . adm_back_link($this->u_action), E_USER_WARNING);						}					}					foreach ($pak_ary as $pak_entry)					{						$data = array();						if (preg_match_all("#'(.*?)', ?#", $pak_entry, $data))						{							if ((sizeof($data[1]) != 4 && $mode == 'icons') ||								(sizeof($data[1]) != 6 && $mode == 'smilies'))							{								trigger_error($user->lang['WRONG_PAK_TYPE'] . adm_back_link($this->u_action), E_USER_WARNING);							}							// Stripslash here because it got addslashed before... (on export)							$img = stripslashes($data[1][0]);							$width = stripslashes($data[1][1]);							$height = stripslashes($data[1][2]);							$display_on_posting = stripslashes($data[1][3]);							if (isset($data[1][4]) && isset($data[1][5]))							{								$emotion = stripslashes($data[1][4]);								$code = stripslashes($data[1][5]);							}							if ($current == 'replace' &&								(($mode == 'smilies' && !empty($cur_img[$code])) ||								($mode == 'icons' && !empty($cur_img[$img]))))							{								$replace_sql = ($mode == 'smilies') ? $code : $img;								$sql = array(									$fields . '_url'		=> $img,									$fields . '_height'		=> (int) $height,									$fields . '_width'		=> (int) $width,									'display_on_posting'	=> (int) $display_on_posting,								);								if ($mode == 'smilies')								{									$sql = array_merge($sql, array(										'emotion'				=> $emotion,									));								}								$sql = "UPDATE $table SET " . $db->sql_build_array('UPDATE', $sql) . "									WHERE $field_sql = '" . $db->sql_escape($replace_sql) . "'";								$db->sql_query($sql);							}							else							{								++$order;								$sql = array(									$fields . '_url'	=> $img,									$fields . '_height'	=> (int) $height,									$fields . '_width'	=> (int) $width,									$fields . '_order'	=> (int) $order,									'display_on_posting'=> (int) $display_on_posting,								);								if ($mode == 'smilies')								{									$sql = array_merge($sql, array(										'code'				=> $code,										'emotion'			=> $emotion,									));								}								$db->sql_query("INSERT INTO $table " . $db->sql_build_array('INSERT', $sql));							}						}					}					$cache->destroy('_icons');					$cache->destroy('sql', $table);					trigger_error($user->lang[$lang . '_IMPORT_SUCCESS'] . adm_back_link($this->u_action));				}				else				{					$pak_options = '';					foreach ($_paks as $pak)					{						$pak_options .= '<option value="' . $pak . '">' . htmlspecialchars($pak) . '</option>';					}					$template->assign_vars(array(						'S_CHOOSE_PAK'		=> true,						'S_PAK_OPTIONS'		=> $pak_options,						'L_TITLE'			=> $user->lang['ACP_' . $lang],						'L_EXPLAIN'			=> $user->lang['ACP_' . $lang . '_EXPLAIN'],						'L_NO_PAK_OPTIONS'	=> $user->lang['NO_' . $lang . '_PAK'],						'L_CURRENT'			=> $user->lang['CURRENT_' . $lang],						'L_CURRENT_EXPLAIN'	=> $user->lang['CURRENT_' . $lang . '_EXPLAIN'],						'L_IMPORT_SUBMIT'	=> $user->lang['IMPORT_' . $lang],						'U_BACK'		=> $this->u_action,						'U_ACTION'		=> $this->u_action . '&amp;action=import',						)					);				}			break;			case 'export':				$this->page_title = 'EXPORT_' . $lang;				$this->tpl_name = 'message_body';				$template->assign_vars(array(					'MESSAGE_TITLE'		=> $user->lang['EXPORT_' . $lang],					'MESSAGE_TEXT'		=> sprintf($user->lang['EXPORT_' . $lang . '_EXPLAIN'], '<a href="' . $this->u_action . '&amp;action=send">', '</a>'),					'S_USER_NOTICE'		=> true,					)				);				return;			break;			case 'send':				$sql = "SELECT *					FROM $table					ORDER BY {$fields}_order";				$result = $db->sql_query($sql);				$pak = '';				while ($row = $db->sql_fetchrow($result))				{					$pak .= "'" . addslashes($row[$fields . '_url']) . "', ";					$pak .= "'" . addslashes($row[$fields . '_width']) . "', ";					$pak .= "'" . addslashes($row[$fields . '_height']) . "', ";					$pak .= "'" . addslashes($row['display_on_posting']) . "', ";					if ($mode == 'smilies')					{						$pak .= "'" . addslashes($row['emotion']) . "', ";						$pak .= "'" . addslashes($row['code']) . "', ";					}					$pak .= "\n";				}				$db->sql_freeresult($result);				if ($pak != '')				{					garbage_collection();					header('Pragma: public');					// Send out the Headers					header('Content-Type: text/x-delimtext; name="' . $mode . '.pak"');					header('Content-Disposition: inline; filename="' . $mode . '.pak"');					echo $pak;					flush();					exit;				}				else				{					trigger_error($user->lang['NO_' . strtoupper($fields) . '_EXPORT'] . adm_back_link($this->u_action), E_USER_WARNING);				}			break;			case 'delete':				if (confirm_box(true))				{					$sql = "DELETE FROM $table						WHERE {$fields}_id = $icon_id";					$db->sql_query($sql);					switch ($mode)					{						case 'smilies':						break;						case 'icons':							// Reset appropriate icon_ids							$db->sql_query('UPDATE ' . TOPICS_TABLE . "								SET icon_id = 0								WHERE icon_id = $icon_id");							$db->sql_query('UPDATE ' . POSTS_TABLE . "								SET icon_id = 0								WHERE icon_id = $icon_id");						break;					}					$notice = $user->lang[$lang . '_DELETED'];					$cache->destroy('_icons');					$cache->destroy('sql', $table);				}				else				{					confirm_box(false, $user->lang['CONFIRM_OPERATION'], build_hidden_fields(array(						'i'			=> $id,						'mode'		=> $mode,						'id'		=> $icon_id,						'action'	=> 'delete',					)));				}			break;			case 'move_up':			case 'move_down':				// Get current order id...				$sql = "SELECT {$fields}_order as current_order					FROM $table					WHERE {$fields}_id = $icon_id";				$result = $db->sql_query($sql);				$current_order = (int) $db->sql_fetchfield('current_order');				$db->sql_freeresult($result);				if ($current_order == 0 && $action == 'move_up')				{					break;				}				// on move_down, switch position with next order_id...				// on move_up, switch position with previous order_id...				$switch_order_id = ($action == 'move_down') ? $current_order + 1 : $current_order - 1;				//				$sql = "UPDATE $table					SET {$fields}_order = $current_order					WHERE {$fields}_order = $switch_order_id						AND {$fields}_id <> $icon_id";				$db->sql_query($sql);				// Only update the other entry too if the previous entry got updated				if ($db->sql_affectedrows())				{					$sql = "UPDATE $table						SET {$fields}_order = $switch_order_id						WHERE {$fields}_order = $current_order							AND {$fields}_id = $icon_id";					$db->sql_query($sql);				}				$cache->destroy('_icons');				$cache->destroy('sql', $table);			break;		}		// By default, check that image_order is valid and fix it if necessary		$sql = "SELECT {$fields}_id AS order_id, {$fields}_order AS fields_order			FROM $table			ORDER BY display_on_posting DESC, {$fields}_order";		$result = $db->sql_query($sql);		if ($row = $db->sql_fetchrow($result))		{			$order = 0;			do			{				++$order;				if ($row['fields_order'] != $order)				{					$db->sql_query("UPDATE $table						SET {$fields}_order = $order						WHERE {$fields}_id = " . $row['order_id']);				}			}			while ($row = $db->sql_fetchrow($result));		}		$db->sql_freeresult($result);		$template->assign_vars(array(			'L_TITLE'			=> $user->lang['ACP_' . $lang],			'L_EXPLAIN'			=> $user->lang['ACP_' . $lang . '_EXPLAIN'],			'L_IMPORT'			=> $user->lang['IMPORT_' . $lang],			'L_EXPORT'			=> $user->lang['EXPORT_' . $lang],			'L_NOT_DISPLAYED'	=> $user->lang[$lang . '_NOT_DISPLAYED'],			'L_ICON_ADD'		=> $user->lang['ADD_' . $lang],			'L_ICON_EDIT'		=> $user->lang['EDIT_' . $lang],			'NOTICE'			=> $notice,			'COLSPAN'			=> ($mode == 'smilies') ? 5 : 3,			'S_SMILIES'			=> ($mode == 'smilies') ? true : false,			'U_ACTION'			=> $this->u_action,			'U_IMPORT'			=> $this->u_action . '&amp;action=import',			'U_EXPORT'			=> $this->u_action . '&amp;action=export',			)		);		$spacer = false;		$pagination_start = request_var('start', 0);		$item_count = $this->item_count($table);		$sql = "SELECT *			FROM $table			ORDER BY {$fields}_order ASC";		$result = $db->sql_query_limit($sql, $config['smilies_per_page'], $pagination_start);		while ($row = $db->sql_fetchrow($result))		{			$alt_text = ($mode == 'smilies') ? $row['code'] : '';			$template->assign_block_vars('items', array(				'S_SPACER'		=> (!$spacer && !$row['display_on_posting']) ? true : false,				'ALT_TEXT'		=> $alt_text,				'IMG_SRC'		=> $phpbb_root_path . $img_path . '/' . $row[$fields . '_url'],				'WIDTH'			=> $row[$fields . '_width'],				'HEIGHT'		=> $row[$fields . '_height'],				'CODE'			=> (isset($row['code'])) ? $row['code'] : '',				'EMOTION'		=> (isset($row['emotion'])) ? $row['emotion'] : '',				'U_EDIT'		=> $this->u_action . '&amp;action=edit&amp;id=' . $row[$fields . '_id'],				'U_DELETE'		=> $this->u_action . '&amp;action=delete&amp;id=' . $row[$fields . '_id'],				'U_MOVE_UP'		=> $this->u_action . '&amp;action=move_up&amp;id=' . $row[$fields . '_id'] . '&amp;start=' . $pagination_start,				'U_MOVE_DOWN'	=> $this->u_action . '&amp;action=move_down&amp;id=' . $row[$fields . '_id'] . '&amp;start=' . $pagination_start,			));			if (!$spacer && !$row['display_on_posting'])			{				$spacer = true;			}		}		$db->sql_freeresult($result);		$template->assign_var('PAGINATION',			generate_pagination($this->u_action, $item_count, $config['smilies_per_page'], $pagination_start, true)		);	}	/**	 * Returns the count of smilies or icons in the database	 *	 * @param string $table The table of items to count.	 * @return int number of items	 */	/* private */ function item_count($table)	{		global $db;		$sql = "SELECT COUNT(*) AS item_count			FROM $table";		$result = $db->sql_query($sql);		$item_count = (int) $db->sql_fetchfield('item_count');		$db->sql_freeresult($result);		return $item_count;	}}?>
<?php/**** @package phpBB3* @version $Id$* @copyright (c) 2005 phpBB Group, sections (c) 2001 ispi of Lincoln Inc* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @ignore*/if (!defined('IN_PHPBB')){	exit;}/*** Extension of template class - Functions needed for compiling templates only.** psoTFX, phpBB Development Team - Completion of file caching, decompilation* routines and implementation of conditionals/keywords and associated changes** The interface was inspired by PHPLib templates,  and the template file (formats are* quite similar)** The keyword/conditional implementation is currently based on sections of code from* the Smarty templating engine (c) 2001 ispi of Lincoln, Inc. which is released* (on its own and in whole) under the LGPL. Section 3 of the LGPL states that any code* derived from an LGPL application may be relicenced under the GPL, this applies* to this source** DEFINE directive inspired by a request by Cyberalien** @package phpBB3*/class template_compile{	var $template;	// Various storage arrays	var $block_names = array();	var $block_else_level = array();	/**	* constuctor	*/	function template_compile(&$template)	{		$this->template = &$template;	}	/**	* Load template source from file	* @access private	*/	function _tpl_load_file($handle, $store_in_db = false)	{		// Try and open template for read		if (!file_exists($this->template->files[$handle]))		{			trigger_error("template->_tpl_load_file(): File {$this->template->files[$handle]} does not exist or is empty", E_USER_ERROR);		}		$this->template->compiled_code[$handle] = $this->compile(trim(@file_get_contents($this->template->files[$handle])));		// Actually compile the code now.		$this->compile_write($handle, $this->template->compiled_code[$handle]);		// Store in database if required...		if ($store_in_db)		{			global $db, $user;			$sql_ary = array(				'template_id'			=> $this->template->files_template[$handle],				'template_filename'		=> $this->template->filename[$handle],				'template_included'		=> '',				'template_mtime'		=> time(),				'template_data'			=> trim(@file_get_contents($this->template->files[$handle])),			);			$sql = 'INSERT INTO ' . STYLES_TEMPLATE_DATA_TABLE . ' ' . $db->sql_build_array('INSERT', $sql_ary);			$db->sql_query($sql);		}	}	/**	* Remove any PHP tags that do not belong, these regular expressions are derived from	* the ones that exist in zend_language_scanner.l	* @access private	*/	function remove_php_tags(&$code)	{		// This matches the information gathered from the internal PHP lexer		$match = array(			'#<([\?%])=?.*?\1>#s',			'#<script\s+language\s*=\s*(["\']?)php\1\s*>.*?</script\s*>#s',			'#<\?php(?:\r\n?|[ \n\t]).*?\?>#s'		);		$code = preg_replace($match, '', $code);	}	/**	* The all seeing all doing compile method. Parts are inspired by or directly from Smarty	* @access private	*/	function compile($code, $no_echo = false, $echo_var = '')	{		global $config;		if ($echo_var)		{			global $$echo_var;		}		// Remove any "loose" php ... we want to give admins the ability		// to switch on/off PHP for a given template. Allowing unchecked		// php is a no-no. There is a potential issue here in that non-php		// content may be removed ... however designers should use entities		// if they wish to display < and >		$this->remove_php_tags($code);		// Pull out all block/statement level elements and separate plain text		preg_match_all('#<!-- PHP -->(.*?)<!-- ENDPHP -->#s', $code, $matches);		$php_blocks = $matches[1];		$code = preg_replace('#<!-- PHP -->.*?<!-- ENDPHP -->#s', '<!-- PHP -->', $code);		preg_match_all('#<!-- INCLUDE (\{\$?[A-Z0-9\-_]+\}|[a-zA-Z0-9\_\-\+\./]+) -->#', $code, $matches);		$include_blocks = $matches[1];		$code = preg_replace('#<!-- INCLUDE (?:\{\$?[A-Z0-9\-_]+\}|[a-zA-Z0-9\_\-\+\./]+) -->#', '<!-- INCLUDE -->', $code);		preg_match_all('#<!-- INCLUDEPHP ([a-zA-Z0-9\_\-\+\./]+) -->#', $code, $matches);		$includephp_blocks = $matches[1];		$code = preg_replace('#<!-- INCLUDEPHP [a-zA-Z0-9\_\-\+\./]+ -->#', '<!-- INCLUDEPHP -->', $code);		preg_match_all('#<!-- ([^<].*?) (.*?)? ?-->#', $code, $blocks, PREG_SET_ORDER);		$text_blocks = preg_split('#<!-- [^<].*? (?:.*?)? ?-->#', $code);		for ($i = 0, $j = sizeof($text_blocks); $i < $j; $i++)		{			$this->compile_var_tags($text_blocks[$i]);		}		$compile_blocks = array();		for ($curr_tb = 0, $tb_size = sizeof($blocks); $curr_tb < $tb_size; $curr_tb++)		{			$block_val = &$blocks[$curr_tb];			switch ($block_val[1])			{				case 'BEGIN':					$this->block_else_level[] = false;					$compile_blocks[] = '<?php ' . $this->compile_tag_block($block_val[2]) . ' ?>';				break;				case 'BEGINELSE':					$this->block_else_level[sizeof($this->block_else_level) - 1] = true;					$compile_blocks[] = '<?php }} else { ?>';				break;				case 'END':					array_pop($this->block_names);					$compile_blocks[] = '<?php ' . ((array_pop($this->block_else_level)) ? '}' : '}}') . ' ?>';				break;				case 'IF':					$compile_blocks[] = '<?php ' . $this->compile_tag_if($block_val[2], false) . ' ?>';				break;				case 'ELSE':					$compile_blocks[] = '<?php } else { ?>';				break;				case 'ELSEIF':					$compile_blocks[] = '<?php ' . $this->compile_tag_if($block_val[2], true) . ' ?>';				break;				case 'ENDIF':					$compile_blocks[] = '<?php } ?>';				break;				case 'DEFINE':					$compile_blocks[] = '<?php ' . $this->compile_tag_define($block_val[2], true) . ' ?>';				break;				case 'UNDEFINE':					$compile_blocks[] = '<?php ' . $this->compile_tag_define($block_val[2], false) . ' ?>';				break;				case 'INCLUDE':					$temp = array_shift($include_blocks);					// Dynamic includes					// Cheap match rather than a full blown regexp, we already know					// the format of the input so just use string manipulation.					if ($temp[0] == '{')					{						$file = false;						if ($temp[1] == '$')						{							$var = substr($temp, 2, -1);							//$file = $this->template->_tpldata['DEFINE']['.'][$var];							$temp = "\$this->_tpldata['DEFINE']['.']['$var']";						}						else						{							$var = substr($temp, 1, -1);							//$file = $this->template->_rootref[$var];							$temp = "\$this->_rootref['$var']";						}					}					else					{						$file = $temp;					}					$compile_blocks[] = '<?php ' . $this->compile_tag_include($temp) . ' ?>';					// No point in checking variable includes					if ($file)					{						$this->template->_tpl_include($file, false);					}				break;				case 'INCLUDEPHP':					$compile_blocks[] = ($config['tpl_allow_php']) ? '<?php ' . $this->compile_tag_include_php(array_shift($includephp_blocks)) . ' ?>' : '';				break;				case 'PHP':					$compile_blocks[] = ($config['tpl_allow_php']) ? '<?php ' . array_shift($php_blocks) . ' ?>' : '';				break;				default:					$this->compile_var_tags($block_val[0]);					$trim_check = trim($block_val[0]);					$compile_blocks[] = (!$no_echo) ? ((!empty($trim_check)) ? $block_val[0] : '') : ((!empty($trim_check)) ? $block_val[0] : '');				break;			}		}		$template_php = '';		for ($i = 0, $size = sizeof($text_blocks); $i < $size; $i++)		{			$trim_check_text = trim($text_blocks[$i]);			$template_php .= (!$no_echo) ? (($trim_check_text != '') ? $text_blocks[$i] : '') . ((isset($compile_blocks[$i])) ? $compile_blocks[$i] : '') : (($trim_check_text != '') ? $text_blocks[$i] : '') . ((isset($compile_blocks[$i])) ? $compile_blocks[$i] : '');		}		// Remove unused opening/closing tags		$template_php = str_replace(' ?><?php ', ' ', $template_php);		// Now add a newline after each php closing tag which already has a newline		// PHP itself strips a newline if a closing tag is used (this is documented behaviour) and it is mostly not intended by style authors to remove newlines		$template_php = preg_replace('#\?\>([\r\n])#', '?>\1\1', $template_php);		// There will be a number of occasions where we switch into and out of		// PHP mode instantaneously. Rather than "burden" the parser with this		// we'll strip out such occurences, minimising such switching		if ($no_echo)		{			return "\$$echo_var .= '" . $template_php . "'";		}		return $template_php;	}	/**	* Compile variables	* @access private	*/	function compile_var_tags(&$text_blocks)	{		// change template varrefs into PHP varrefs		$varrefs = array();		// This one will handle varrefs WITH namespaces		preg_match_all('#\{((?:[a-z0-9\-_]+\.)+)(\$)?([A-Z0-9\-_]+)\}#', $text_blocks, $varrefs, PREG_SET_ORDER);		foreach ($varrefs as $var_val)		{			$namespace = $var_val[1];			$varname = $var_val[3];			$new = $this->generate_block_varref($namespace, $varname, true, $var_val[2]);			$text_blocks = str_replace($var_val[0], $new, $text_blocks);		}		// This will handle the remaining root-level varrefs		// transform vars prefixed by L_ into their language variable pendant if nothing is set within the tpldata array		if (strpos($text_blocks, '{L_') !== false)		{			$text_blocks = preg_replace('#\{L_([A-Z0-9\-_]+)\}#', "<?php echo ((isset(\$this->_rootref['L_\\1'])) ? \$this->_rootref['L_\\1'] : ((isset(\$user->lang['\\1'])) ? \$user->lang['\\1'] : '{ \\1 }')); ?>", $text_blocks);		}		// Handle addslashed language variables prefixed with LA_		// If a template variable already exist, it will be used in favor of it...		if (strpos($text_blocks, '{LA_') !== false)		{			$text_blocks = preg_replace('#\{LA_([A-Z0-9\-_]+)\}#', "<?php echo ((isset(\$this->_rootref['LA_\\1'])) ? \$this->_rootref['LA_\\1'] : ((isset(\$this->_rootref['L_\\1'])) ? addslashes(\$this->_rootref['L_\\1']) : ((isset(\$user->lang['\\1'])) ? addslashes(\$user->lang['\\1']) : '{ \\1 }'))); ?>", $text_blocks);		}		// Handle remaining varrefs		$text_blocks = preg_replace('#\{([A-Z0-9\-_]+)\}#', "<?php echo (isset(\$this->_rootref['\\1'])) ? \$this->_rootref['\\1'] : ''; ?>", $text_blocks);		$text_blocks = preg_replace('#\{\$([A-Z0-9\-_]+)\}#', "<?php echo (isset(\$this->_tpldata['DEFINE']['.']['\\1'])) ? \$this->_tpldata['DEFINE']['.']['\\1'] : ''; ?>", $text_blocks);		return;	}	/**	* Compile blocks	* @access private	*/	function compile_tag_block($tag_args)	{		$no_nesting = false;		// Is the designer wanting to call another loop in a loop?		if (strpos($tag_args, '!') === 0)		{			// Count the number of ! occurrences (not allowed in vars)			$no_nesting = substr_count($tag_args, '!');			$tag_args = substr($tag_args, $no_nesting);		}		// Allow for control of looping (indexes start from zero):		// foo(2)    : Will start the loop on the 3rd entry		// foo(-2)   : Will start the loop two entries from the end		// foo(3,4)  : Will start the loop on the fourth entry and end it on the fifth		// foo(3,-4) : Will start the loop on the fourth entry and end it four from last		if (preg_match('#^([^()]*)\(([\-\d]+)(?:,([\-\d]+))?\)$#', $tag_args, $match))		{			$tag_args = $match[1];			if ($match[2] < 0)			{				$loop_start = '($_' . $tag_args . '_count ' . $match[2] . ' < 0 ? 0 : $_' . $tag_args . '_count ' . $match[2] . ')';			}			else			{				$loop_start = '($_' . $tag_args . '_count < ' . $match[2] . ' ? $_' . $tag_args . '_count : ' . $match[2] . ')';			}			if (strlen($match[3]) < 1 || $match[3] == -1)			{				$loop_end = '$_' . $tag_args . '_count';			}			else if ($match[3] >= 0)			{				$loop_end = '(' . ($match[3] + 1) . ' > $_' . $tag_args . '_count ? $_' . $tag_args . '_count : ' . ($match[3] + 1) . ')';			}			else //if ($match[3] < -1)			{				$loop_end = '$_' . $tag_args . '_count' . ($match[3] + 1);			}		}		else		{			$loop_start = 0;			$loop_end = '$_' . $tag_args . '_count';		}		$tag_template_php = '';		array_push($this->block_names, $tag_args);		if ($no_nesting !== false)		{			// We need to implode $no_nesting times from the end...			$block = array_slice($this->block_names, -$no_nesting);		}		else		{			$block = $this->block_names;		}		if (sizeof($block) < 2)		{			// Block is not nested.			$tag_template_php = '$_' . $tag_args . "_count = (isset(\$this->_tpldata['$tag_args'])) ? sizeof(\$this->_tpldata['$tag_args']) : 0;";			$varref = "\$this->_tpldata['$tag_args']";		}		else		{			// This block is nested.			// Generate a namespace string for this block.			$namespace = implode('.', $block);			// Get a reference to the data array for this block that depends on the			// current indices of all parent blocks.			$varref = $this->generate_block_data_ref($namespace, false);			// Create the for loop code to iterate over this block.			$tag_template_php = '$_' . $tag_args . '_count = (isset(' . $varref . ')) ? sizeof(' . $varref . ') : 0;';		}		$tag_template_php .= 'if ($_' . $tag_args . '_count) {';		/**		* The following uses foreach for iteration instead of a for loop, foreach is faster but requires PHP to make a copy of the contents of the array which uses more memory		* <code>		*	if (!$offset)		*	{		*		$tag_template_php .= 'foreach (' . $varref . ' as $_' . $tag_args . '_i => $_' . $tag_args . '_val){';		*	}		* </code>		*/		$tag_template_php .= 'for ($_' . $tag_args . '_i = ' . $loop_start . '; $_' . $tag_args . '_i < ' . $loop_end . '; ++$_' . $tag_args . '_i){';		$tag_template_php .= '$_'. $tag_args . '_val = &' . $varref . '[$_'. $tag_args. '_i];';		return $tag_template_php;	}	/**	* Compile IF tags - much of this is from Smarty with	* some adaptions for our block level methods	* @access private	*/	function compile_tag_if($tag_args, $elseif)	{		// Tokenize args for 'if' tag.		preg_match_all('/(?:			"[^"\\\\]*(?:\\\\.[^"\\\\]*)*"         |			\'[^\'\\\\]*(?:\\\\.[^\'\\\\]*)*\'     |			[(),]                                  |			[^\s(),]+)/x', $tag_args, $match);		$tokens = $match[0];		$is_arg_stack = array();		for ($i = 0, $size = sizeof($tokens); $i < $size; $i++)		{			$token = &$tokens[$i];			switch ($token)			{				case '!==':				case '===':				case '<<':				case '>>':				case '|':				case '^':				case '&':				case '~':				case ')':				case ',':				case '+':				case '-':				case '*':				case '/':				case '@':				break;				case '==':				case 'eq':					$token = '==';				break;				case '!=':				case '<>':				case 'ne':				case 'neq':					$token = '!=';				break;				case '<':				case 'lt':					$token = '<';				break;				case '<=':				case 'le':				case 'lte':					$token = '<=';				break;				case '>':				case 'gt':					$token = '>';				break;				case '>=':				case 'ge':				case 'gte':					$token = '>=';				break;				case '&&':				case 'and':					$token = '&&';				break;				case '||':				case 'or':					$token = '||';				break;				case '!':				case 'not':					$token = '!';				break;				case '%':				case 'mod':					$token = '%';				break;				case '(':					array_push($is_arg_stack, $i);				break;				case 'is':					$is_arg_start = ($tokens[$i-1] == ')') ? array_pop($is_arg_stack) : $i-1;					$is_arg	= implode('	', array_slice($tokens,	$is_arg_start, $i -	$is_arg_start));					$new_tokens	= $this->_parse_is_expr($is_arg, array_slice($tokens, $i+1));					array_splice($tokens, $is_arg_start, sizeof($tokens), $new_tokens);					$i = $is_arg_start;				// no break				default:					if (preg_match('#^((?:[a-z0-9\-_]+\.)+)?(\$)?(?=[A-Z])([A-Z0-9\-_]+)#s', $token, $varrefs))					{						$token = (!empty($varrefs[1])) ? $this->generate_block_data_ref(substr($varrefs[1], 0, -1), true, $varrefs[2]) . '[\'' . $varrefs[3] . '\']' : (($varrefs[2]) ? '$this->_tpldata[\'DEFINE\'][\'.\'][\'' . $varrefs[3] . '\']' : '$this->_rootref[\'' . $varrefs[3] . '\']');					}					else if (preg_match('#^\.((?:[a-z0-9\-_]+\.?)+)$#s', $token, $varrefs))					{						// Allow checking if loops are set with .loopname						// It is also possible to check the loop count by doing <!-- IF .loopname > 1 --> for example						$blocks = explode('.', $varrefs[1]);						// If the block is nested, we have a reference that we can grab.						// If the block is not nested, we just go and grab the block from _tpldata						if (sizeof($blocks) > 1)						{							$block = array_pop($blocks);							$namespace = implode('.', $blocks);							$varref = $this->generate_block_data_ref($namespace, true);							// Add the block reference for the last child.							$varref .= "['" . $block . "']";						}						else						{							$varref = '$this->_tpldata';							// Add the block reference for the last child.							$varref .= "['" . $blocks[0] . "']";						}						$token = "sizeof($varref)";					}					else if (!empty($token))					{						$token = '(' . $token . ')';					}				break;			}		}		// If there are no valid tokens left or only control/compare characters left, we do skip this statement		if (!sizeof($tokens) || str_replace(array(' ', '=', '!', '<', '>', '&', '|', '%', '(', ')'), '', implode('', $tokens)) == '')		{			$tokens = array('false');		}		return (($elseif) ? '} else if (' : 'if (') . (implode(' ', $tokens) . ') { ');	}	/**	* Compile DEFINE tags	* @access private	*/	function compile_tag_define($tag_args, $op)	{		preg_match('#^((?:[a-z0-9\-_]+\.)+)?\$(?=[A-Z])([A-Z0-9_\-]*)(?: = (\'?)([^\']*)(\'?))?$#', $tag_args, $match);		if (empty($match[2]) || (!isset($match[4]) && $op))		{			return '';		}		if (!$op)		{			return 'unset(' . (($match[1]) ? $this->generate_block_data_ref(substr($match[1], 0, -1), true, true) . '[\'' . $match[2] . '\']' : '$this->_tpldata[\'DEFINE\'][\'.\'][\'' . $match[2] . '\']') . ');';		}		// Are we a string?		if ($match[3] && $match[5])		{			$match[4] = str_replace(array('\\\'', '\\\\', '\''), array('\'', '\\', '\\\''), $match[4]);			// Compile reference, we allow template variables in defines...			$match[4] = $this->compile($match[4]);			// Now replace the php code			$match[4] = "'" . str_replace(array('<?php echo ', '; ?>'), array("' . ", " . '"), $match[4]) . "'";		}		else		{			preg_match('#true|false|\.#i', $match[4], $type);			switch (strtolower($type[0]))			{				case 'true':				case 'false':					$match[4] = strtoupper($match[4]);				break;				case '.':					$match[4] = doubleval($match[4]);				break;				default:					$match[4] = intval($match[4]);				break;			}		}		return (($match[1]) ? $this->generate_block_data_ref(substr($match[1], 0, -1), true, true) . '[\'' . $match[2] . '\']' : '$this->_tpldata[\'DEFINE\'][\'.\'][\'' . $match[2] . '\']') . ' = ' . $match[4] . ';';	}	/**	* Compile INCLUDE tag	* @access private	*/	function compile_tag_include($tag_args)	{		// Process dynamic includes		if ($tag_args[0] == '$')		{			return "if (isset($tag_args)) { \$this->_tpl_include($tag_args); }";		}		return "\$this->_tpl_include('$tag_args');";	}	/**	* Compile INCLUDE_PHP tag	* @access private	*/	function compile_tag_include_php($tag_args)	{		return "\$this->_php_include('$tag_args');";	}	/**	* parse expression	* This is from Smarty	* @access private	*/	function _parse_is_expr($is_arg, $tokens)	{		$expr_end = 0;		$negate_expr = false;		if (($first_token = array_shift($tokens)) == 'not')		{			$negate_expr = true;			$expr_type = array_shift($tokens);		}		else		{			$expr_type = $first_token;		}		switch ($expr_type)		{			case 'even':				if (@$tokens[$expr_end] == 'by')				{					$expr_end++;					$expr_arg = $tokens[$expr_end++];					$expr = "!(($is_arg / $expr_arg) % $expr_arg)";				}				else				{					$expr = "!($is_arg & 1)";				}			break;			case 'odd':				if (@$tokens[$expr_end] == 'by')				{					$expr_end++;					$expr_arg = $tokens[$expr_end++];					$expr = "(($is_arg / $expr_arg) % $expr_arg)";				}				else				{					$expr = "($is_arg & 1)";				}			break;			case 'div':				if (@$tokens[$expr_end] == 'by')				{					$expr_end++;					$expr_arg = $tokens[$expr_end++];					$expr = "!($is_arg % $expr_arg)";				}			break;		}		if ($negate_expr)		{			$expr = "!($expr)";		}		array_splice($tokens, 0, $expr_end, $expr);		return $tokens;	}	/**	* Generates a reference to the given variable inside the given (possibly nested)	* block namespace. This is a string of the form:	* ' . $this->_tpldata['parent'][$_parent_i]['$child1'][$_child1_i]['$child2'][$_child2_i]...['varname'] . '	* It's ready to be inserted into an "echo" line in one of the templates.	* NOTE: expects a trailing "." on the namespace.	* @access private	*/	function generate_block_varref($namespace, $varname, $echo = true, $defop = false)	{		// Strip the trailing period.		$namespace = substr($namespace, 0, -1);		// Get a reference to the data block for this namespace.		$varref = $this->generate_block_data_ref($namespace, true, $defop);		// Prepend the necessary code to stick this in an echo line.		// Append the variable reference.		$varref .= "['$varname']";		$varref = ($echo) ? "<?php echo $varref; ?>" : ((isset($varref)) ? $varref : '');		return $varref;	}	/**	* Generates a reference to the array of data values for the given	* (possibly nested) block namespace. This is a string of the form:	* $this->_tpldata['parent'][$_parent_i]['$child1'][$_child1_i]['$child2'][$_child2_i]...['$childN']	*	* If $include_last_iterator is true, then [$_childN_i] will be appended to the form shown above.	* NOTE: does not expect a trailing "." on the blockname.	* @access private	*/	function generate_block_data_ref($blockname, $include_last_iterator, $defop = false)	{		// Get an array of the blocks involved.		$blocks = explode('.', $blockname);		$blockcount = sizeof($blocks) - 1;		// DEFINE is not an element of any referenced variable, we must use _tpldata to access it		if ($defop)		{			$varref = '$this->_tpldata[\'DEFINE\']';			// Build up the string with everything but the last child.			for ($i = 0; $i < $blockcount; $i++)			{				$varref .= "['" . $blocks[$i] . "'][\$_" . $blocks[$i] . '_i]';			}			// Add the block reference for the last child.			$varref .= "['" . $blocks[$blockcount] . "']";			// Add the iterator for the last child if requried.			if ($include_last_iterator)			{				$varref .= '[$_' . $blocks[$blockcount] . '_i]';			}			return $varref;		}		else if ($include_last_iterator)		{			return '$_'. $blocks[$blockcount] . '_val';		}		else		{			return '$_'. $blocks[$blockcount - 1] . '_val[\''. $blocks[$blockcount]. '\']';		}	}	/**	* Write compiled file to cache directory	* @access private	*/	function compile_write($handle, $data)	{		global $phpEx;		$filename = $this->template->cachepath . str_replace('/', '.', $this->template->filename[$handle]) . '.' . $phpEx;		$data = "<?php if (!defined('IN_PHPBB')) exit;" . ((strpos($data, '<?php') === 0) ? substr($data, 5) : ' ?>' . $data);		if ($fp = @fopen($filename, 'wb'))		{			@flock($fp, LOCK_EX);			@fwrite ($fp, $data);			@flock($fp, LOCK_UN);			@fclose($fp);			phpbb_chmod($filename, CHMOD_READ | CHMOD_WRITE);		}		return;	}}?>
<?php/**** @package VC* @version $Id$* @copyright (c) 2006 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @ignore*/if (!defined('IN_PHPBB')){	exit;}/*** Main non-gd captcha class* @ignore* @package VC*/class captcha{	var $filtered_pngs;	var $width = 320;	var $height = 50;	/**	* Define filtered pngs on init	*/	function captcha()	{		// If we can we will generate a single filtered png, we avoid nastiness via emulation of some Zlib stuff		$this->define_filtered_pngs();	}	/**	* Create the image containing $code with a seed of $seed	*/	function execute($code, $seed)	{		$img_height = $this->height - 10;		$img_width = 0;		mt_srand($seed);		$char_widths = $hold_chars = array();		$code_len = strlen($code);		for ($i = 0; $i < $code_len; $i++)		{			$char = $code[$i];			$width = mt_rand(0, 4);			$raw_width = $this->filtered_pngs[$char]['width'];			$char_widths[$i] = $width;			$img_width += $raw_width - $width;			// Split the char into chunks of $raw_width + 1 length			if (empty($hold_chars[$char]))			{				$hold_chars[$char] = str_split(base64_decode($this->filtered_pngs[$char]['data']), $raw_width + 1);			}		}		$offset_x = mt_rand(0, $this->width - $img_width);		$offset_y = mt_rand(0, $this->height - $img_height);		$image = '';		for ($i = 0; $i < $this->height; $i++)		{			$image .= chr(0);			if ($i > $offset_y && $i < $offset_y + $img_height)			{				for ($j = 0; $j < $offset_x; $j++)				{					$image .= chr(mt_rand(140, 255));				}				for ($j = 0; $j < $code_len; $j++)				{					$image .= $this->randomise(substr($hold_chars[$code{$j}][$i - $offset_y - 1], 1), $char_widths[$j]);				}				for ($j = $offset_x + $img_width; $j < $this->width; $j++)				{					$image .= chr(mt_rand(140, 255));				}			}			else			{				for ($j = 0; $j < $this->width; $j++)				{					$image .= chr(mt_rand(140, 255));				}			}		}		unset($hold_chars);		$image = $this->create_png($image, $this->width, $this->height);		// Output image		header('Content-Type: image/png');		header('Cache-control: no-cache, no-store');		echo $image;		exit;	}	/**	* This is designed to randomise the pixels of the image data within	* certain limits so as to keep it readable. It also varies the image	* width a little	*/	function randomise($scanline, $width)	{		$new_line = '';		$end = strlen($scanline) - ceil($width/2);		for ($i = floor($width/2); $i < $end; $i++)		{			$pixel = ord($scanline{$i});			if ($pixel < 190)			{				$new_line .= chr(mt_rand(0, 205));			}			else if ($pixel > 190)			{				$new_line .= chr(mt_rand(145, 255));			}			else			{				$new_line .= $scanline{$i};			}		}		return $new_line;	}	/**	* This creates a chunk of the given type, with the given data	* of the given length adding the relevant crc	*/	function png_chunk($length, $type, $data)	{		$raw = $type . $data;		return pack('N', $length) . $raw . pack('N', crc32($raw));	}	/**	* Creates greyscale 8bit png - The PNG spec can be found at	* http://www.libpng.org/pub/png/spec/PNG-Contents.html we use	* png because it's a fully recognised open standard and supported	* by practically all modern browsers and OSs	*/	function create_png($raw_image, $width, $height)	{		// SIG		$image = pack('C8', 137, 80, 78, 71, 13, 10, 26, 10);		// IHDR		$raw = pack('N2', $width, $height);		$raw .= pack('C5', 8, 0, 0, 0, 0);		$image .= $this->png_chunk(13, 'IHDR', $raw);		// IDAT		if (@extension_loaded('zlib'))		{			$raw_image = gzcompress($raw_image);			$length = strlen($raw_image);		}		else		{			// The total length of this image, uncompressed, is just a calculation of pixels			$length = ($width + 1) * $height;			// Adler-32 hash generation			// Note: The hash is _backwards_ so we must reverse it			if (@extension_loaded('hash'))			{				$adler_hash = strrev(hash('adler32', $raw_image, true));			}			else if (@extension_loaded('mhash'))			{				$adler_hash = strrev(mhash(MHASH_ADLER32, $raw_image));			}			else			{				// Optimized Adler-32 loop ported from the GNU Classpath project				$temp_length = $length;				$s1 = 1;				$s2 = $index = 0;				while ($temp_length > 0)				{					// We can defer the modulo operation:					// s1 maximally grows from 65521 to 65521 + 255 * 3800					// s2 maximally grows by 3800 * median(s1) = 2090079800 < 2^31					$substract_value = ($temp_length < 3800) ? $temp_length : 3800;					$temp_length -= $substract_value;					while (--$substract_value >= 0)					{						$s1 += ord($raw_image[$index]);						$s2 += $s1;						$index++;					}					$s1 %= 65521;					$s2 %= 65521;				}				$adler_hash = pack('N', ($s2 << 16) | $s1);			}			// This is the same thing as gzcompress($raw_image, 0) but does not need zlib			$raw_image = pack('C3v2', 0x78, 0x01, 0x01, $length, ~$length) . $raw_image . $adler_hash;			// The Zlib header + Adler hash make us add on 11			$length += 11;		}		// IDAT		$image .= $this->png_chunk($length, 'IDAT', $raw_image);		// IEND		$image .= $this->png_chunk(0, 'IEND', '');		return $image;	}	/**	* png image data	* Each 'data' element is base64_encoded uncompressed IDAT	*/	function define_filtered_pngs()	{		$this->filtered_pngs = array(			'0' => array(				'data' => 'AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8A///////////////////olFAkBAAAGDyA4P///M31/////////////wD////////////////0dAgAAAAAAAAAAAAEcPipFGHn////////////AP//////////////6DAAAAAAAAAAAAAAAAAALSEAN+T///////////8A//////////////xAAAAAAAAAAAAAAAAAAAAAACPA/////////////wD/////////////oAAAAAAAAAAAAAAAAAAAAAAAev//////////////AP////////////8oAAAAAAAAPNj/zDAAAAAAAABD//////////////8A////////////1AAAAAAAABjw////5BAAAAAAAADo/////////////wD///////////+QAAAAAAAAbP//////QgAAAAAAAKj/////////////AP///////////1wAAAAAAACs/////8AXAAAAAAAAcP////////////8A////////////OAAAAAAAAND////dNwAAAAAAAABI/////////////wD///////////8gAAAAAAAA4P//7koACwAAAAAAACT/////////////AP///////////wgAAAAAAAD///VqAwaPAAAAAAAAEP////////////8A////////////AAAAAAAAAP/8kQYDavUAAAAAAAAA/////////////wD///////////8AAAAAAAAA/6kNAEru/wAAAAAAAAD/////////////AP///////////wAAAAAAAADAIwA33f//AAAAAAAAAP////////////8A////////////FAAAAAAAADYAI8D///8AAAAAAAAQ/////////////wD///////////8kAAAAAAAAAA2p////5AAAAAAAACD/////////////AP///////////0gAAAAAAAAFkfz////UAAAAAAAAQP////////////8A////////////cAAAAAAAAET1/////7AAAAAAAABo/////////////wD///////////+oAAAAAAAAXfX/////sAAAAAAAAGj/////////////AAAAALgAAAAAAAAwAAAAAAAAAAAAAAD////////////oAAAAAAAACOT////oEAAAAAAAAOD/////////////AP////////////8+AAAAAAAAKMz/zDQAAAAAAAA0//////////////8A////////////7jgAAAAAAAAAAAAAAAAAAAAAAKT//////////////wD///////////VqAwIAAAAAAAAAAAAAAAAAAAA8////////////////AP//////////rQcDaVEAAAAAAAAAAAAAAAAAKOj///////////////8A///////////nblnu/IAIAAAAAAAAAAAAAFzw/////////////////wD////////////79////+iITCAAAAAgSITg////////////////////AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////w==',				'width' => 40			),			'1' => array(				'data' => 'AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////8BAAAAAAAP//////////////////AP////////////////////////9sAAAAAAAA//////////////////8A////////////////////////pAAAAAAAAAD//////////////////wD//////////////////////6wEAAAAAAAAAP//////////////////AP////////////////////h4AAAAAAAAAAAA//////////////////8A//////////////////ygJAAAAAAAAAAAAAD//////////////////wD//////////////9x8HAAAAAAAAAAAAAAAAP//////////////////AP//////////////AAAAAAAAAAAAAAAAAAAA//////////////////8A//////////////8AAAAAAAAAAAAAAAAAAAD//////////////////wD//////////////wAAAAAAAAR4AAAAAAAAAP//////////////////AP//////////////AAAAAAA4zP8AAAAAAAAA//////////////////8A//////////////8AAAA4sP///wAAAAAAAAD//////////////////wD//////////////yR80P//////AAAAAAAAAP//////////////////AP////////////////////////8AAAAAAAAA//////////////////8A/////////////////////////wAAAAAAAAD//////////////////wD/////////////////////////AAAAAAAAAP//////////////////AP////////////////////////8AAAAAAAAA//////////////////8A/////////////////////////wAAAAAAAAD//////////////////wD/////////////////////////AAAAAAAAAP//////////////////AP////////////////////////8AAAAAAAAA//////////////////8A/////////////////////////wAAAAAAAAD//////////////////wD/////////////////////////AAAAAAAAAP//////////////////AP////////////////////////8AAAAAAAAA//////////////////8A/////////////////////////wAAAAAAAAD//////////////////wD/////////////////////////AAAAAAAAAP//////////////////AP////////////////////////8AAAAAAAAA//////////////////8A/////////////////////////wAAAAAAAAD//////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8=',				'width' => 40			),			'2' => array(				'data' => 'AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP/////////////////okFAkCAAABCBIfNT///////////////////8A///////////////8hAgAAAAAAAAAAAAAAFTo/////////////////wD//////////////1QAAAAAAAAAAAAAAAAAACjo////////////////AP////////////+MAAAAAAAAAAAAAAAAAAAAADj///////////////8A////////////9BAAAAAAAAAAAAAAAAAAAAAAALD//////////////wD///////////+gAAAAAAAAAHjs+KwMAAAAAAAAVP//////////////AP///////////1gAAAAAAABM/////6QAAAAAAAAU//////////////8A////////////KAAAAAAAALj/////+AAAAAAAAAD//////////////wD///////////+MfGBMOCAI8P/////wAAAAAAAACP//////////////AP///////////////////////////5wAAAAAAAAw//////////////8A///////////////////////////oFAAAAAAAAHz//////////////wD/////////////////////////6CgAAAAAAAAE3P//////////////AP///////////////////////9ggAAAAAAAAAHT///////////////8A//////////////////////+0DAAAAAAAAAA8+P///////////////wD/////////////////////gAAAAAAAAAAAKOj/////////////////AP//////////////////9FAAAAAAAAAAADzw//////////////////8A/////////////////+g4AAAAAAAAAABk/P///////////////////wD////////////////oKAAAAAAAAAAMqP//////////////////////AP//////////////6CgAAAAAAAAAMNz///////////////////////8A//////////////g4AAAAAAAAAFT0/////////////////////////wD/////////////bAAAAAAAAABU/P//////////////////////////AP///////////8wAAAAAAAAAAAAAAAAAAAAAAAAA//////////////8A////////////SAAAAAAAAAAAAAAAAAAAAAAAAAD//////////////wD//////////9wAAAAAAAAAAAAAAAAAAAAAAAAAAP//////////////AP//////////hAAAAAAAAAAAAAAAAAAAAAAAAAAA//////////////8A//////////9AAAAAAAAAAAAAAAAAAAAAAAAAAAD//////////////wD//////////xAAAAAAAAAAAAAAAAAAAAAAAAAAAP//////////////AP////////////////////////////////////////////////////8=',				'width' => 40			),			'3' => array(				'data' => 'AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD////////////////8sGg0FAAAACA4cLz8////////////////////AP//////////////rBgAAAAAAAAAAAAAACTA//////////////////8A/////////////3QAAAAAAAAAAAAAAAAAAASs/////////////////wD///////////+YAAAAAAAAAAAAAAAAAAAAAAjc////////////////AP//////////6AwAAAAAAAAAAAAAAAAAAAAAAGT///////////////8A//////////94AAAAAAAABJDw/8g4AAAAAAAAHP///////////////wD//////////yAAAAAAAACE/////9gAAAAAAAAA////////////////AP///////////NSwiGQ4FOT//////AAAAAAAABD///////////////8A//////////////////////////+YAAAAAAAAVP///////////////wD//////////////////////P/ggAQAAAAAAATM////////////////AP////////////////////9gAAAAAAAAAAAElP////////////////8A/////////////////////0AAAAAAAAAAHLj//////////////////wD/////////////////////OAAAAAAAAAAwkPj/////////////////AP////////////////////8gAAAAAAAAAAAAINj///////////////8A/////////////////////xAAAAAAAAAAAAAAIPD//////////////wD/////////////////////uOz/4HgEAAAAAAAAhP//////////////AP///////////////////////////3wAAAAAAAAw//////////////8A////////////////////////////6AAAAAAAAAj//////////////wD/////////////////////////////AAAAAAAAAP//////////////AP//////////tJh8YEQoDNz//////+AAAAAAAAAY//////////////8A//////////88AAAAAAAAaP//////dAAAAAAAAEz//////////////wD//////////6QAAAAAAAAAdOD/5HQAAAAAAAAApP//////////////AP///////////CgAAAAAAAAAAAAAAAAAAAAAACD4//////////////8A////////////yAQAAAAAAAAAAAAAAAAAAAAEuP///////////////wD/////////////rAQAAAAAAAAAAAAAAAAABJD/////////////////AP//////////////zDQAAAAAAAAAAAAAACTA//////////////////8A/////////////////8BwOCAAAAAUNGi0/P///////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8=',				'width' => 40			),			'4' => array(				'data' => 'AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP//////////////////////////nAAAAAAAAAD///////////////8A/////////////////////////8AEAAAAAAAAAP///////////////wD////////////////////////gGAAAAAAAAAAA////////////////AP//////////////////////9DAAAAAAAAAAAAD///////////////8A//////////////////////9UAAAAAAAAAAAAAP///////////////wD/////////////////////hAAAAAAAAAAAAAAA////////////////AP///////////////////7QAAAAAAAAAAAAAAAD///////////////8A///////////////////UDAAAAAAUAAAAAAAAAP///////////////wD/////////////////7CQAAAAABMAAAAAAAAAA////////////////AP////////////////xEAAAAAACU/wAAAAAAAAD///////////////8A////////////////cAAAAAAAZP//AAAAAAAAAP///////////////wD//////////////6AAAAAAADz8//8AAAAAAAAA////////////////AP/////////////IBAAAAAAc6P///wAAAAAAAAD///////////////8A////////////5BgAAAAADMz/////AAAAAAAAAP///////////////wD///////////g0AAAAAACk//////8AAAAAAAAA////////////////AP//////////XAAAAAAAfP///////wAAAAAAAAD///////////////8A//////////8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAP///////////wD//////////wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA////////////AP//////////AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD///////////8A//////////8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAP///////////wD//////////wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA////////////AP//////////AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD///////////8A////////////////////////////AAAAAAAAAP///////////////wD///////////////////////////8AAAAAAAAA////////////////AP///////////////////////////wAAAAAAAAD///////////////8A////////////////////////////AAAAAAAAAP///////////////wD///////////////////////////8AAAAAAAAA////////////////AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8=',				'width' => 40			),			'5' => array(				'data' => 'AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP//////////////8AAAAAAAAAAAAAAAAAAAAAAA//////////////8A///////////////MAAAAAAAAAAAAAAAAAAAAAAD//////////////wD//////////////6wAAAAAAAAAAAAAAAAAAAAAAP//////////////AP//////////////iAAAAAAAAAAAAAAAAAAAAAAA//////////////8A//////////////9kAAAAAAAAAAAAAAAAAAAAAAD//////////////wD//////////////0QAAAAAAAAAAAAAAAAAAAAAAP//////////////AP//////////////IAAAAAAAYP////////////////////////////8A//////////////wAAAAAAAB8/////////////////////////////wD/////////////3AAAAAAAAIj/////////////////////////////AP////////////+4AAAAAAAAoLRYHAAEKGTE//////////////////8A/////////////5QAAAAAAAAQAAAAAAAAAABY9P///////////////wD/////////////dAAAAAAAAAAAAAAAAAAAAAA89P//////////////AP////////////9QAAAAAAAAAAAAAAAAAAAAAABg//////////////8A/////////////zAAAAAAAAAAAAAAAAAAAAAAAADQ/////////////wD/////////////IAAAAAAAAGjY/+h4BAAAAAAAAGz/////////////AP//////////////9NS0lHSc//////90AAAAAAAALP////////////8A/////////////////////////////9QAAAAAAAAE/////////////wD//////////////////////////////wAAAAAAAAD/////////////AP/////////////////////////////8AAAAAAAAEP////////////8A////////////pIRwWEAgDOD//////8wAAAAAAAA8/////////////wD///////////9EAAAAAAAAaP//////ZAAAAAAAAHz/////////////AP///////////6QAAAAAAAAAaOD/4GQAAAAAAAAE4P////////////8A/////////////CQAAAAAAAAAAAAAAAAAAAAAAGD//////////////wD/////////////yAQAAAAAAAAAAAAAAAAAAAAc7P//////////////AP//////////////rAwAAAAAAAAAAAAAAAAAGNj///////////////8A////////////////0EAAAAAAAAAAAAAAAFTo/////////////////wD//////////////////8h4QCAAAAAcQHzU////////////////////AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8=',				'width' => 40			),			'6' => array(				'data' => 'AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD///////////////////+0ZCwMAAAUNGjI////////////////////AP/////////////////EMAAAAAAAAAAAAABM6P////////////////8A////////////////lAQAAAAAAAAAAAAAAAAo6P///////////////wD//////////////6wAAAAAAAAAAAAAAAAAAABI////////////////AP/////////////oEAAAAAAAAAAAAAAAAAAAAACw//////////////8A/////////////3AAAAAAAAAoxP/YPAAAAAAAAEj//////////////wD////////////4EAAAAAAACOD////YDCBAVGiAoP//////////////AP///////////7gAAAAAAABY//////////////////////////////8A////////////eAAAAAAAAJT//////////////////////////////wD///////////9MAAAAAAAAvP/IXBgABCx03P//////////////////AP///////////ygAAAAAAADcdAAAAAAAAAAEiP////////////////8A////////////FAAAAAAAAFAAAAAAAAAAAAAAcP///////////////wD///////////8AAAAAAAAAAAAAAAAAAAAAAAAAlP//////////////AP///////////wAAAAAAAAAAAAAAAAAAAAAAAAAQ8P////////////8A////////////AAAAAAAAAABAyP/kZAAAAAAAAACQ/////////////wD///////////8MAAAAAAAALPj/////WAAAAAAAAET/////////////AP///////////yQAAAAAAACY///////MAAAAAAAAFP////////////8A////////////SAAAAAAAAMD///////wAAAAAAAAA/////////////wD///////////9wAAAAAAAAvP///////wAAAAAAAAD/////////////AP///////////7QAAAAAAACI///////UAAAAAAAAJP////////////8A////////////+AwAAAAAACDw/////2wAAAAAAABY/////////////wD/////////////cAAAAAAAADC8/Ox4AAAAAAAAAKj/////////////AP/////////////oEAAAAAAAAAAAAAAAAAAAAAAk/P////////////8A//////////////+oAAAAAAAAAAAAAAAAAAAABLj//////////////wD///////////////+QAAAAAAAAAAAAAAAAAACQ////////////////AP////////////////+0JAAAAAAAAAAAAAAkuP////////////////8A///////////////////8sGg0FAAADCxgqPz//////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8=',				'width' => 40			),			'7' => array(				'data' => 'AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD///////////8AAAAAAAAAAAAAAAAAAAAAAAAAAAD/////////////AP///////////wAAAAAAAAAAAAAAAAAAAAAAAAAAAP////////////8A////////////AAAAAAAAAAAAAAAAAAAAAAAAAAAA/////////////wD///////////8AAAAAAAAAAAAAAAAAAAAAAAAAAAD/////////////AP///////////wAAAAAAAAAAAAAAAAAAAAAAAAAABP////////////8A////////////AAAAAAAAAAAAAAAAAAAAAAAAAAy4/////////////wD//////////////////////////+QUAAAAAAAEuP//////////////AP/////////////////////////8QAAAAAAAAKT///////////////8A/////////////////////////4wAAAAAAAB0/////////////////wD////////////////////////cCAAAAAAANPz/////////////////AP///////////////////////0QAAAAAAATY//////////////////8A//////////////////////+0AAAAAAAAeP///////////////////wD//////////////////////CQAAAAAABTw////////////////////AP////////////////////+gAAAAAAAAkP////////////////////8A/////////////////////ywAAAAAABDw/////////////////////wD///////////////////+4AAAAAAAAbP//////////////////////AP///////////////////1wAAAAAAADQ//////////////////////8A///////////////////4DAAAAAAAMP///////////////////////wD//////////////////7QAAAAAAAB8////////////////////////AP//////////////////aAAAAAAAAMj///////////////////////8A//////////////////8oAAAAAAAM/P///////////////////////wD/////////////////8AAAAAAAAET/////////////////////////AP////////////////+0AAAAAAAAcP////////////////////////8A/////////////////4wAAAAAAACY/////////////////////////wD/////////////////WAAAAAAAAMD/////////////////////////AP////////////////80AAAAAAAA4P////////////////////////8A/////////////////xAAAAAAAAD4/////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8=',				'width' => 40			),			'8' => array(				'data' => 'AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD////////////////////IdDQUAAAEIEiA1P//////////////////AP/////////////////gRAAAAAAAAAAAAAAAROD///////////////8A////////////////0BgAAAAAAAAAAAAAAAAAEMj//////////////wD///////////////AcAAAAAAAAAAAAAAAAAAAAHPD/////////////AP//////////////hAAAAAAAAAAAAAAAAAAAAAAAhP////////////8A//////////////8sAAAAAAAAKMz/zCgAAAAAAAAs/////////////wD//////////////wAAAAAAAADM////zAAAAAAAAAD/////////////AP//////////////BAAAAAAAAP//////AAAAAAAABP////////////8A//////////////8sAAAAAAAAzP///9QAAAAAAAAw/////////////wD//////////////3wAAAAAAAAoyP/YNAAAAAAAAIT/////////////AP//////////////7BgAAAAAAAAAAAAAAAAAAAAc8P////////////8A////////////////xBgAAAAAAAAAAAAAAAAAGNj//////////////wD/////////////////tAQAAAAAAAAAAAAAAACo////////////////AP///////////////HAAAAAAAAAAAAAAAAAAAAB8//////////////8A//////////////9gAAAAAAAAAAAAAAAAAAAAAAB8/////////////wD/////////////wAAAAAAAAABk4P/UWAAAAAAAAATQ////////////AP////////////9UAAAAAAAAaP//////XAAAAAAAAGT///////////8A/////////////xgAAAAAAADg///////cAAAAAAAAJP///////////wD/////////////AAAAAAAAAP////////8AAAAAAAAA////////////AP////////////8AAAAAAAAA4P//////3AAAAAAAAAT///////////8A/////////////ygAAAAAAABg//////9cAAAAAAAALP///////////wD/////////////ZAAAAAAAAABY1P/cXAAAAAAAAABw////////////AP/////////////QAAAAAAAAAAAAAAAAAAAAAAAABNz///////////8A//////////////9gAAAAAAAAAAAAAAAAAAAAAAB0/////////////wD///////////////Q8AAAAAAAAAAAAAAAAAAAAUPz/////////////AP////////////////x4CAAAAAAAAAAAAAAAEIT8//////////////8A///////////////////smFQwGAAAABg0ZKT0/////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8=',				'width' => 40			),			'9' => array(				'data' => 'AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD///////////////////ysYCwMAAAUNGiw/P//////////////////AP////////////////+4JAAAAAAAAAAAAAAkuP////////////////8A////////////////lAQAAAAAAAAAAAAAAAAAkP///////////////wD//////////////8AEAAAAAAAAAAAAAAAAAAAAqP//////////////AP/////////////8JAAAAAAAAAAAAAAAAAAAAAAQ7P////////////8A/////////////6wAAAAAAAAAfOz8vCwAAAAAAABw/////////////wD/////////////WAAAAAAAAHD/////7BgAAAAAAAz4////////////AP////////////8kAAAAAAAA1P//////hAAAAAAAALT///////////8A/////////////wAAAAAAAAD///////+4AAAAAAAAcP///////////wD/////////////AAAAAAAAAPz//////8AAAAAAAABI////////////AP////////////8UAAAAAAAAzP//////lAAAAAAAACT///////////8A/////////////0QAAAAAAABY//////gsAAAAAAAADP///////////wD/////////////kAAAAAAAAABw5P/IPAAAAAAAAAAA////////////AP/////////////wEAAAAAAAAAAAAAAAAAAAAAAAAAD///////////8A//////////////+UAAAAAAAAAAAAAAAAAAAAAAAAAP///////////wD///////////////9wAAAAAAAAAAAAAFAAAAAAAAAU////////////AP////////////////+IBAAAAAAAAABw3AAAAAAAACj///////////8A///////////////////cdCwEABhcxP+8AAAAAAAATP///////////wD//////////////////////////////5AAAAAAAAB4////////////AP//////////////////////////////UAAAAAAAALj///////////8A//////////////+kgGxUQCAM2P///+AIAAAAAAAQ+P///////////wD//////////////0gAAAAAAAA42P/EKAAAAAAAAHD/////////////AP//////////////sAAAAAAAAAAAAAAAAAAAAAAQ6P////////////8A////////////////TAAAAAAAAAAAAAAAAAAAAKz//////////////wD////////////////oKAAAAAAAAAAAAAAAAASU////////////////AP/////////////////sUAAAAAAAAAAAAAAwxP////////////////8A////////////////////yHA0FAAADCxktP///////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8=',				'width' => 40			),			'A' => array(				'data' => 'AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD//////////////////+QAAAAAAAAAAAAAAOT/////////////////AP//////////////////kAAAAAAAAAAAAAAAkP////////////////8A//////////////////88AAAAAAAAAAAAAAA8/////////////////wD/////////////////5AAAAAAAAAAAAAAAAADk////////////////AP////////////////+QAAAAAAAAAAAAAAAAAJD///////////////8A/////////////////zwAAAAAAAAAAAAAAAAAPP///////////////wD////////////////kAAAAAAAAAAgAAAAAAAAA5P//////////////AP///////////////5AAAAAAAAAAgAAAAAAAAACQ//////////////8A////////////////PAAAAAAAAAz8HAAAAAAAADz//////////////wD//////////////+QAAAAAAAAAWP9kAAAAAAAAANz/////////////AP//////////////kAAAAAAAAACk/7wAAAAAAAAAhP////////////8A//////////////88AAAAAAAABOz//BQAAAAAAAAw/////////////wD/////////////4AAAAAAAAAA8////ZAAAAAAAAADc////////////AP////////////+EAAAAAAAAAIj///+8AAAAAAAAAIT///////////8A/////////////zAAAAAAAAAA2P////wQAAAAAAAAMP///////////wD////////////cAAAAAAAAACT//////1wAAAAAAAAA3P//////////AP///////////4QAAAAAAAAAAAAAAAAAAAAAAAAAAACE//////////8A////////////MAAAAAAAAAAAAAAAAAAAAAAAAAAAADD//////////wD//////////9wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAANz/////////AP//////////hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAhP////////8A//////////8wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAw/////////wD/////////3AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADc////////AP////////+EAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIT///////8A/////////zAAAAAAAAAAhP///////////2QAAAAAAAAAMP///////wD////////cAAAAAAAAAADM////////////vAAAAAAAAAAA3P//////AP///////4QAAAAAAAAAHP/////////////4DAAAAAAAAACE//////8A////////MAAAAAAAAABk//////////////9cAAAAAAAAADD//////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8=',				'width' => 40			),			'B' => array(				'data' => 'AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8A//////////8AAAAAAAAAAAAAAAAAAAAAEDh83P///////////////wD//////////wAAAAAAAAAAAAAAAAAAAAAAAAAEhP//////////////AP//////////AAAAAAAAAAAAAAAAAAAAAAAAAAAAeP////////////8A//////////8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAxP///////////wD//////////wAAAAAAAAAAAAAAAAAAAAAAAAAAAABY////////////AP//////////AAAAAAAAAAAAAAAAAAAAAAAAAAAAABT///////////8A//////////8AAAAAAAAAAP/////4zEwAAAAAAAAAAP///////////wD//////////wAAAAAAAAAA////////7AAAAAAAAAAQ////////////AP//////////AAAAAAAAAAD////////sAAAAAAAAAEj///////////8A//////////8AAAAAAAAAAP/////4zEQAAAAAAAAAtP///////////wD//////////wAAAAAAAAAAAAAAAAAAAAAAAAAAAFz/////////////AP//////////AAAAAAAAAAAAAAAAAAAAAAAAAAiA/P////////////8A//////////8AAAAAAAAAAAAAAAAAAAAAAAAIjPj//////////////wD//////////wAAAAAAAAAAAAAAAAAAAAAAAAAAGKz/////////////AP//////////AAAAAAAAAAAAAAAAAAAAAAAAAAAAAJT///////////8A//////////8AAAAAAAAAAAAAAAAAAAAAAAAAAAAABNz//////////wD//////////wAAAAAAAAAA///////sqCAAAAAAAAAAbP//////////AP//////////AAAAAAAAAAD/////////yAAAAAAAAAAs//////////8A//////////8AAAAAAAAAAP//////////AAAAAAAAAAT//////////wD//////////wAAAAAAAAAA/////////7wAAAAAAAAAAP//////////AP//////////AAAAAAAAAAD//////+ikGAAAAAAAAAAY//////////8A//////////8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAFT//////////wD//////////wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAsP//////////AP//////////AAAAAAAAAAAAAAAAAAAAAAAAAAAAADj///////////8A//////////8AAAAAAAAAAAAAAAAAAAAAAAAAAAAc6P///////////wD//////////wAAAAAAAAAAAAAAAAAAAAAAAAAATOj/////////////AP//////////AAAAAAAAAAAAAAAAAAAEIEBkkNj///////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8=',				'width' => 40			),			'C' => array(				'data' => 'AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP//////////////////5JRULBAAAAgkTIDQ//////////////////8A////////////////1FAAAAAAAAAAAAAAAABAyP///////////////wD//////////////4gEAAAAAAAAAAAAAAAAAAAElP//////////////AP////////////9wAAAAAAAAAAAAAAAAAAAAAAAAlP////////////8A////////////kAAAAAAAAAAAAAAAAAAAAAAAAAAEyP///////////wD//////////9wIAAAAAAAAAAAAAAAAAAAAAAAAAAAw////////////AP//////////WAAAAAAAAAAAWMz/8JwQAAAAAAAAAACw//////////8A/////////+wEAAAAAAAAAID//////9QMAAAAAAAAAET//////////wD/////////nAAAAAAAAAAo/P///////3wAAAAABDBspP//////////AP////////9gAAAAAAAAAIz/////////3BxQjMT0//////////////8A/////////zQAAAAAAAAAzP///////////////////////////////wD/////////GAAAAAAAAADo////////////////////////////////AP////////8AAAAAAAAAAP////////////////////////////////8A/////////wAAAAAAAAAA/////////////////////////////////wD/////////AAAAAAAAAAD/////////////////////////////////AP////////8cAAAAAAAAAOj///////////////////////////////8A/////////zgAAAAAAAAA0P/////////kIGio7P///////////////wD/////////bAAAAAAAAACg/////////5wAAAAAMHS49P//////////AP////////+oAAAAAAAAAEz/////////PAAAAAAAAAAc//////////8A//////////QIAAAAAAAAALz//////6QAAAAAAAAAAGT//////////wD//////////3AAAAAAAAAADIzo/+SEBAAAAAAAAAAAyP//////////AP//////////7BAAAAAAAAAAAAAAAAAAAAAAAAAAAED///////////8A////////////rAAAAAAAAAAAAAAAAAAAAAAAAAAE0P///////////wD/////////////fAAAAAAAAAAAAAAAAAAAAAAAAJz/////////////AP//////////////iAQAAAAAAAAAAAAAAAAAAASY//////////////8A////////////////yEAAAAAAAAAAAAAAAAA8yP///////////////wD//////////////////9yIUCwQAAAAIEB4yP//////////////////AP////////////////////////////////////////////////////8=',				'width' => 40			),			'D' => array(				'data' => 'AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD///////////8AAAAAAAAAAAAAAAAADChQkOT/////////////////AP///////////wAAAAAAAAAAAAAAAAAAAAAABGjw//////////////8A////////////AAAAAAAAAAAAAAAAAAAAAAAAACDY/////////////wD///////////8AAAAAAAAAAAAAAAAAAAAAAAAAABjk////////////AP///////////wAAAAAAAAAAAAAAAAAAAAAAAAAAAED///////////8A////////////AAAAAAAAAAAAAAAAAAAAAAAAAAAAAKj//////////wD///////////8AAAAAAAAAAP///+isSAAAAAAAAAAANP//////////AP///////////wAAAAAAAAAA////////hAAAAAAAAAAA2P////////8A////////////AAAAAAAAAAD/////////MAAAAAAAAACQ/////////wD///////////8AAAAAAAAAAP////////+MAAAAAAAAAFj/////////AP///////////wAAAAAAAAAA/////////8gAAAAAAAAAMP////////8A////////////AAAAAAAAAAD/////////5AAAAAAAAAAY/////////wD///////////8AAAAAAAAAAP//////////AAAAAAAAAAD/////////AP///////////wAAAAAAAAAA//////////8AAAAAAAAAAP////////8A////////////AAAAAAAAAAD//////////wAAAAAAAAAA/////////wD///////////8AAAAAAAAAAP/////////wAAAAAAAAABD/////////AP///////////wAAAAAAAAAA/////////9QAAAAAAAAAJP////////8A////////////AAAAAAAAAAD/////////qAAAAAAAAABI/////////wD///////////8AAAAAAAAAAP////////9QAAAAAAAAAHj/////////AP///////////wAAAAAAAAAA////////uAAAAAAAAAAAvP////////8A////////////AAAAAAAAAAD////w0HwEAAAAAAAAACT8/////////wD///////////8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAoP//////////AP///////////wAAAAAAAAAAAAAAAAAAAAAAAAAAADz8//////////8A////////////AAAAAAAAAAAAAAAAAAAAAAAAAAAY6P///////////wD///////////8AAAAAAAAAAAAAAAAAAAAAAAAAKNz/////////////AP///////////wAAAAAAAAAAAAAAAAAAAAAACHT0//////////////8A////////////AAAAAAAAAAAAAAAAABg4bKj0/////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8=',				'width' => 40			),			'E' => array(				'data' => 'AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP//////////AAAAAAAAAAAAAAAAAAAAAAAAAAAAAP////////////8A//////////8AAAAAAAAAAAAAAAAAAAAAAAAAAAAA/////////////wD//////////wAAAAAAAAAAAAAAAAAAAAAAAAAAAAD/////////////AP//////////AAAAAAAAAAAAAAAAAAAAAAAAAAAAAP////////////8A//////////8AAAAAAAAAAAAAAAAAAAAAAAAAAAAA/////////////wD//////////wAAAAAAAAAAAAAAAAAAAAAAAAAAAAD/////////////AP//////////AAAAAAAAAAD///////////////////////////////8A//////////8AAAAAAAAAAP///////////////////////////////wD//////////wAAAAAAAAAA////////////////////////////////AP//////////AAAAAAAAAAD///////////////////////////////8A//////////8AAAAAAAAAAAAAAAAAAAAAAAAAAAD//////////////wD//////////wAAAAAAAAAAAAAAAAAAAAAAAAAAAP//////////////AP//////////AAAAAAAAAAAAAAAAAAAAAAAAAAAA//////////////8A//////////8AAAAAAAAAAAAAAAAAAAAAAAAAAAD//////////////wD//////////wAAAAAAAAAAAAAAAAAAAAAAAAAAAP//////////////AP//////////AAAAAAAAAAAAAAAAAAAAAAAAAAAA//////////////8A//////////8AAAAAAAAAAP///////////////////////////////wD//////////wAAAAAAAAAA////////////////////////////////AP//////////AAAAAAAAAAD///////////////////////////////8A//////////8AAAAAAAAAAP///////////////////////////////wD//////////wAAAAAAAAAA////////////////////////////////AP//////////AAAAAAAAAAAAAAAAAAAAAAAAAAAAAP////////////8A//////////8AAAAAAAAAAAAAAAAAAAAAAAAAAAAA/////////////wD//////////wAAAAAAAAAAAAAAAAAAAAAAAAAAAAD/////////////AP//////////AAAAAAAAAAAAAAAAAAAAAAAAAAAAAP////////////8A//////////8AAAAAAAAAAAAAAAAAAAAAAAAAAAAA/////////////wD//////////wAAAAAAAAAAAAAAAAAAAAAAAAAAAAD/////////////AP////////////////////////////////////////////////////8=',				'width' => 40			),			'F' => array(				'data' => 'AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8A/////////////wAAAAAAAAAAAAAAAAAAAAAAAAAA/////////////wD/////////////AAAAAAAAAAAAAAAAAAAAAAAAAAD/////////////AP////////////8AAAAAAAAAAAAAAAAAAAAAAAAAAP////////////8A/////////////wAAAAAAAAAAAAAAAAAAAAAAAAAA/////////////wD/////////////AAAAAAAAAAAAAAAAAAAAAAAAAAD/////////////AP////////////8AAAAAAAAAAAAAAAAAAAAAAAAAAP////////////8A/////////////wAAAAAAAAAA/////////////////////////////wD/////////////AAAAAAAAAAD/////////////////////////////AP////////////8AAAAAAAAAAP////////////////////////////8A/////////////wAAAAAAAAAA/////////////////////////////wD/////////////AAAAAAAAAAAAAAAAAAAAAAAA////////////////AP////////////8AAAAAAAAAAAAAAAAAAAAAAAD///////////////8A/////////////wAAAAAAAAAAAAAAAAAAAAAAAP///////////////wD/////////////AAAAAAAAAAAAAAAAAAAAAAAA////////////////AP////////////8AAAAAAAAAAAAAAAAAAAAAAAD///////////////8A/////////////wAAAAAAAAAAAAAAAAAAAAAAAP///////////////wD/////////////AAAAAAAAAAD/////////////////////////////AP////////////8AAAAAAAAAAP////////////////////////////8A/////////////wAAAAAAAAAA/////////////////////////////wD/////////////AAAAAAAAAAD/////////////////////////////AP////////////8AAAAAAAAAAP////////////////////////////8A/////////////wAAAAAAAAAA/////////////////////////////wD/////////////AAAAAAAAAAD/////////////////////////////AP////////////8AAAAAAAAAAP////////////////////////////8A/////////////wAAAAAAAAAA/////////////////////////////wD/////////////AAAAAAAAAAD/////////////////////////////AP////////////8AAAAAAAAAAP////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8=',				'width' => 40			),			'G' => array(				'data' => 'AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD//////////////////MB8TCgQAAAACCA4YJzs////////////////AP///////////////JQcAAAAAAAAAAAAAAAAAAhw8P////////////8A/////////////9gwAAAAAAAAAAAAAAAAAAAAAAAk2P///////////wD////////////EDAAAAAAAAAAAAAAAAAAAAAAAAAAc7P//////////AP//////////2AwAAAAAAAAAAAAAAAAAAAAAAAAAAABY//////////8A//////////wwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADQ/////////wD/////////kAAAAAAAAAAAEHzQ/P/gmCAAAAAAAAAAAFz/////////AP////////wcAAAAAAAAACjg////////8CwAAAAAAAAgWP////////8A////////vAAAAAAAAAAI2P//////////yBRAcJjI8P///////////wD///////94AAAAAAAAAGD/////////////////////////////////AP///////0AAAAAAAAAAsP////////////////////////////////8A////////IAAAAAAAAADc/////////////////////////////////wD///////8AAAAAAAAAAP///////wAAAAAAAAAAAAAAAAD/////////AP///////wAAAAAAAAAA////////AAAAAAAAAAAAAAAAAP////////8A////////AAAAAAAAAAD///////8AAAAAAAAAAAAAAAAA/////////wD///////8gAAAAAAAAAOD//////wAAAAAAAAAAAAAAAAD/////////AP///////0AAAAAAAAAAtP//////AAAAAAAAAAAAAAAAAP////////8A////////cAAAAAAAAABw//////8AAAAAAAAAAAAAAAAA/////////wD///////+8AAAAAAAAABDs////////////AAAAAAAAAAD/////////AP////////wYAAAAAAAAADz0//////////AAAAAAAAAAAP////////8A/////////5AAAAAAAAAAACCY4P//3KhcCAAAAAAAAAAA/////////wD/////////+CAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD/////////AP//////////xAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIP////////8A////////////rAQAAAAAAAAAAAAAAAAAAAAAAAAAAGTw/////////wD/////////////vBQAAAAAAAAAAAAAAAAAAAAAADjI////////////AP//////////////8HAQAAAAAAAAAAAAAAAAAEiw//////////////8A//////////////////iwcEAgBAAABCA4aKDk/////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8=',				'width' => 40			),			'H' => array(				'data' => 'AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////8AAAAAAAAAAP///////////wAAAAAAAAAA//////////8A/////////wAAAAAAAAAA////////////AAAAAAAAAAD//////////wD/////////AAAAAAAAAAD///////////8AAAAAAAAAAP//////////AP////////8AAAAAAAAAAP///////////wAAAAAAAAAA//////////8A/////////wAAAAAAAAAA////////////AAAAAAAAAAD//////////wD/////////AAAAAAAAAAD///////////8AAAAAAAAAAP//////////AP////////8AAAAAAAAAAP///////////wAAAAAAAAAA//////////8A/////////wAAAAAAAAAA////////////AAAAAAAAAAD//////////wD/////////AAAAAAAAAAD///////////8AAAAAAAAAAP//////////AP////////8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA//////////8A/////////wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD//////////wD/////////AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAP//////////AP////////8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA//////////8A/////////wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD//////////wD/////////AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAP//////////AP////////8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA//////////8A/////////wAAAAAAAAAA////////////AAAAAAAAAAD//////////wD/////////AAAAAAAAAAD///////////8AAAAAAAAAAP//////////AP////////8AAAAAAAAAAP///////////wAAAAAAAAAA//////////8A/////////wAAAAAAAAAA////////////AAAAAAAAAAD//////////wD/////////AAAAAAAAAAD///////////8AAAAAAAAAAP//////////AP////////8AAAAAAAAAAP///////////wAAAAAAAAAA//////////8A/////////wAAAAAAAAAA////////////AAAAAAAAAAD//////////wD/////////AAAAAAAAAAD///////////8AAAAAAAAAAP//////////AP////////8AAAAAAAAAAP///////////wAAAAAAAAAA//////////8A/////////wAAAAAAAAAA////////////AAAAAAAAAAD//////////wD/////////AAAAAAAAAAD///////////8AAAAAAAAAAP//////////AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8=',				'width' => 40			),			'I' => array(				'data' => 'AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////AAAAAAAAAAAAAAAAAAAAAAAA////////////////AP////////////8AAAAAAAAAAAAAAAAAAAAAAAD///////////////8A/////////////wAAAAAAAAAAAAAAAAAAAAAAAP///////////////wD/////////////AAAAAAAAAAAAAAAAAAAAAAAA////////////////AP////////////8AAAAAAAAAAAAAAAAAAAAAAAD///////////////8A/////////////wAAAAAAAAAAAAAAAAAAAAAAAP///////////////wD/////////////AAAAAAAAAAAAAAAAAAAAAAAA////////////////AP///////////////////wAAAAAAAAAA//////////////////////8A////////////////////AAAAAAAAAAD//////////////////////wD///////////////////8AAAAAAAAAAP//////////////////////AP///////////////////wAAAAAAAAAA//////////////////////8A////////////////////AAAAAAAAAAD//////////////////////wD///////////////////8AAAAAAAAAAP//////////////////////AP///////////////////wAAAAAAAAAA//////////////////////8A////////////////////AAAAAAAAAAD//////////////////////wD///////////////////8AAAAAAAAAAP//////////////////////AP///////////////////wAAAAAAAAAA//////////////////////8A////////////////////AAAAAAAAAAD//////////////////////wD///////////////////8AAAAAAAAAAP//////////////////////AP///////////////////wAAAAAAAAAA//////////////////////8A////////////////////AAAAAAAAAAD//////////////////////wD///////////////////8AAAAAAAAAAP//////////////////////AP////////////8AAAAAAAAAAAAAAAAAAAAAAAD///////////////8A/////////////wAAAAAAAAAAAAAAAAAAAAAAAP///////////////wD/////////////AAAAAAAAAAAAAAAAAAAAAAAA////////////////AP////////////8AAAAAAAAAAAAAAAAAAAAAAAD///////////////8A/////////////wAAAAAAAAAAAAAAAAAAAAAAAP///////////////wD/////////////AAAAAAAAAAAAAAAAAAAAAAAA////////////////AP////////////8AAAAAAAAAAAAAAAAAAAAAAAD///////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8=',				'width' => 40			),			'J' => array(				'data' => 'AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP///////////////////////////wAAAAAAAAAA//////////////8A////////////////////////////AAAAAAAAAAD//////////////wD///////////////////////////8AAAAAAAAAAP//////////////AP///////////////////////////wAAAAAAAAAA//////////////8A////////////////////////////AAAAAAAAAAD//////////////wD///////////////////////////8AAAAAAAAAAP//////////////AP///////////////////////////wAAAAAAAAAA//////////////8A////////////////////////////AAAAAAAAAAD//////////////wD///////////////////////////8AAAAAAAAAAP//////////////AP///////////////////////////wAAAAAAAAAA//////////////8A////////////////////////////AAAAAAAAAAD//////////////wD///////////////////////////8AAAAAAAAAAP//////////////AP///////////////////////////wAAAAAAAAAA//////////////8A////////////////////////////AAAAAAAAAAD//////////////wD///////////////////////////8AAAAAAAAAAP//////////////AP///////////////////////////wAAAAAAAAAA//////////////8A////////////////////////////AAAAAAAAAAj//////////////wD//////////+zMrIxwUDAQ//////wAAAAAAAAAIP//////////////AP//////////DAAAAAAAAADo////2AAAAAAAAAA0//////////////8A//////////8wAAAAAAAAAKj///+YAAAAAAAAAFj//////////////wD//////////2gAAAAAAAAAIND/yBgAAAAAAAAAkP//////////////AP//////////vAAAAAAAAAAAAAAAAAAAAAAAAADc//////////////8A////////////MAAAAAAAAAAAAAAAAAAAAAAAUP///////////////wD////////////EBAAAAAAAAAAAAAAAAAAAABjk////////////////AP////////////+sBAAAAAAAAAAAAAAAAAAY2P////////////////8A///////////////EMAAAAAAAAAAAAAAAVOj//////////////////wD/////////////////vHBAIAAAABg8fNT/////////////////////AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8=',				'width' => 40			),			'K' => array(				'data' => 'AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD///////8AAAAAAAAAAP//////////wAQAAAAAAAAAAABw////////AP///////wAAAAAAAAAA/////////9AMAAAAAAAAAAAAcP////////8A////////AAAAAAAAAAD////////cGAAAAAAAAAAAAHD//////////wD///////8AAAAAAAAAAP//////6CgAAAAAAAAAAABs////////////AP///////wAAAAAAAAAA//////Q0AAAAAAAAAAAAVPz///////////8A////////AAAAAAAAAAD////8RAAAAAAAAAAAAFT8/////////////wD///////8AAAAAAAAAAP///1gAAAAAAAAAAABU/P//////////////AP///////wAAAAAAAAAA//9wAAAAAAAAAAAASPz///////////////8A////////AAAAAAAAAAD/jAAAAAAAAAAAADz0/////////////////wD///////8AAAAAAAAAAKQAAAAAAAAAAAA89P//////////////////AP///////wAAAAAAAAAABAAAAAAAAAAAFPT///////////////////8A////////AAAAAAAAAAAAAAAAAAAAAAAApP///////////////////wD///////8AAAAAAAAAAAAAAAAAAAAAAAAU8P//////////////////AP///////wAAAAAAAAAAAAAAAAAAAAAAAABk//////////////////8A////////AAAAAAAAAAAAAAAAAAAAAAAAAADE/////////////////wD///////8AAAAAAAAAAAAAAAAoEAAAAAAAACz8////////////////AP///////wAAAAAAAAAAAAAAGNiAAAAAAAAAAIj///////////////8A////////AAAAAAAAAAAAABjY//gYAAAAAAAACOD//////////////wD///////8AAAAAAAAAAAAY2P///5wAAAAAAAAASP//////////////AP///////wAAAAAAAAAAGNj//////CgAAAAAAAAAqP////////////8A////////AAAAAAAAAADI////////sAAAAAAAAAAc8P///////////wD///////8AAAAAAAAAAP//////////QAAAAAAAAABs////////////AP///////wAAAAAAAAAA///////////IAAAAAAAAAATI//////////8A////////AAAAAAAAAAD///////////9YAAAAAAAAADD8/////////wD///////8AAAAAAAAAAP///////////9wEAAAAAAAAAJD/////////AP///////wAAAAAAAAAA/////////////3AAAAAAAAAADOT///////8A////////AAAAAAAAAAD/////////////7BAAAAAAAAAAUP///////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8=',				'width' => 40			),			'L' => array(				'data' => 'AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////8AAAAAAAAAAP////////////////////////////8A/////////////wAAAAAAAAAA/////////////////////////////wD/////////////AAAAAAAAAAD/////////////////////////////AP////////////8AAAAAAAAAAP////////////////////////////8A/////////////wAAAAAAAAAA/////////////////////////////wD/////////////AAAAAAAAAAD/////////////////////////////AP////////////8AAAAAAAAAAP////////////////////////////8A/////////////wAAAAAAAAAA/////////////////////////////wD/////////////AAAAAAAAAAD/////////////////////////////AP////////////8AAAAAAAAAAP////////////////////////////8A/////////////wAAAAAAAAAA/////////////////////////////wD/////////////AAAAAAAAAAD/////////////////////////////AP////////////8AAAAAAAAAAP////////////////////////////8A/////////////wAAAAAAAAAA/////////////////////////////wD/////////////AAAAAAAAAAD/////////////////////////////AP////////////8AAAAAAAAAAP////////////////////////////8A/////////////wAAAAAAAAAA/////////////////////////////wD/////////////AAAAAAAAAAD/////////////////////////////AP////////////8AAAAAAAAAAP////////////////////////////8A/////////////wAAAAAAAAAA/////////////////////////////wD/////////////AAAAAAAAAAAAAAAAAAAAAAAAAAD/////////////AP////////////8AAAAAAAAAAAAAAAAAAAAAAAAAAP////////////8A/////////////wAAAAAAAAAAAAAAAAAAAAAAAAAA/////////////wD/////////////AAAAAAAAAAAAAAAAAAAAAAAAAAD/////////////AP////////////8AAAAAAAAAAAAAAAAAAAAAAAAAAP////////////8A/////////////wAAAAAAAAAAAAAAAAAAAAAAAAAA/////////////wD/////////////AAAAAAAAAAAAAAAAAAAAAAAAAAD/////////////AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8=',				'width' => 40			),			'M' => array(				'data' => 'AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8A//////8AAAAAAAAAAAAAAHz//////3wAAAAAAAAAAAAAAP///////wD//////wAAAAAAAAAAAAAATP//////UAAAAAAAAAAAAAAA////////AP//////AAAAAAAAAAAAAAAc//////8cAAAAAAAAAAAAAAD///////8A//////8AAAAAAAAAAAAAAADw////8AAAAAAAAAAAAAAAAP///////wD//////wAAAAAAAAAAAAAAALz////AAAAAAAAAAAAAAAAA////////AP//////AAAAAAAAAAAAAAAAkP///5AAAAAAAAAAAAAAAAD///////8A//////8AAAAAAAAAAAAAAABc////ZAAAAAAAAAAAAAAAAP///////wD//////wAAAAAAAAAoAAAAADD///8wAAAAACQAAAAAAAAA////////AP//////AAAAAAAAAFwAAAAABPz//AgAAAAAXAAAAAAAAAD///////8A//////8AAAAAAAAAkAAAAAAA0P/UAAAAAACQAAAAAAAAAP///////wD//////wAAAAAAAADMAAAAAACg/6gAAAAAAMQAAAAAAAAA////////AP//////AAAAAAAAAPgEAAAAAHD/dAAAAAAE+AAAAAAAAAD///////8A//////8AAAAAAAAA/zQAAAAAQP9IAAAAADD/AAAAAAAAAP///////wD//////wAAAAAAAAD/bAAAAAAQ/xQAAAAAaP8AAAAAAAAA////////AP//////AAAAAAAAAP+gAAAAAADQAAAAAACc/wAAAAAAAAD///////8A//////8AAAAAAAAA/9QAAAAAAGgAAAAAAND/AAAAAAAAAP///////wD//////wAAAAAAAAD//wwAAAAAFAAAAAAM/P8AAAAAAAAA////////AP//////AAAAAAAAAP//RAAAAAAAAAAAADz//wAAAAAAAAD///////8A//////8AAAAAAAAA//94AAAAAAAAAAAAcP//AAAAAAAAAP///////wD//////wAAAAAAAAD//7AAAAAAAAAAAACo//8AAAAAAAAA////////AP//////AAAAAAAAAP//5AAAAAAAAAAAANz//wAAAAAAAAD///////8A//////8AAAAAAAAA////HAAAAAAAAAAQ////AAAAAAAAAP///////wD//////wAAAAAAAAD///9QAAAAAAAAAEz///8AAAAAAAAA////////AP//////AAAAAAAAAP///4gAAAAAAAAAfP///wAAAAAAAAD///////8A//////8AAAAAAAAA////vAAAAAAAAACw////AAAAAAAAAP///////wD//////wAAAAAAAAD////wAAAAAAAAAOz///8AAAAAAAAA////////AP//////AAAAAAAAAP////8sAAAAAAAc/////wAAAAAAAAD///////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8=',				'width' => 40			),			'N' => array(				'data' => 'AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////AAAAAAAAALD/////////////AAAAAAAAAP//////////AP////////8AAAAAAAAAFOj///////////8AAAAAAAAA//////////8A/////////wAAAAAAAAAASP///////////wAAAAAAAAD//////////wD/////////AAAAAAAAAAAAkP//////////AAAAAAAAAP//////////AP////////8AAAAAAAAAAAAI1P////////8AAAAAAAAA//////////8A/////////wAAAAAAAAAAAAAw+P///////wAAAAAAAAD//////////wD/////////AAAAAAAAAAAAAABw////////AAAAAAAAAP//////////AP////////8AAAAAAAAAAAAAAAC8//////8AAAAAAAAA//////////8A/////////wAAAAAAAAAAAAAAABzs/////wAAAAAAAAD//////////wD/////////AAAAAAAAAAAAAAAAAFD/////AAAAAAAAAP//////////AP////////8AAAAAAAAAAAAAAAAAAJz///8AAAAAAAAA//////////8A/////////wAAAAAAAAAUAAAAAAAADNz//wAAAAAAAAD//////////wD/////////AAAAAAAAALQAAAAAAAAANPz/AAAAAAAAAP//////////AP////////8AAAAAAAAA/2wAAAAAAAAAfP8AAAAAAAAA//////////8A/////////wAAAAAAAAD/+CwAAAAAAAAExAAAAAAAAAD//////////wD/////////AAAAAAAAAP//0AQAAAAAAAAgAAAAAAAAAP//////////AP////////8AAAAAAAAA////jAAAAAAAAAAAAAAAAAAA//////////8A/////////wAAAAAAAAD/////RAAAAAAAAAAAAAAAAAD//////////wD/////////AAAAAAAAAP/////kFAAAAAAAAAAAAAAAAP//////////AP////////8AAAAAAAAA//////+sAAAAAAAAAAAAAAAA//////////8A/////////wAAAAAAAAD///////9kAAAAAAAAAAAAAAD//////////wD/////////AAAAAAAAAP////////QkAAAAAAAAAAAAAP//////////AP////////8AAAAAAAAA/////////8wEAAAAAAAAAAAA//////////8A/////////wAAAAAAAAD//////////4QAAAAAAAAAAAD//////////wD/////////AAAAAAAAAP///////////DwAAAAAAAAAAP//////////AP////////8AAAAAAAAA////////////4BAAAAAAAAAA//////////8A/////////wAAAAAAAAD/////////////qAAAAAAAAAD//////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8=',				'width' => 40			),			'O' => array(				'data' => 'AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8A///////////////////0qGw4HAAAABw4aKT0/////////////////wD////////////////wcAwAAAAAAAAAAAAAAAho6P//////////////AP//////////////uBQAAAAAAAAAAAAAAAAAAAAMoP////////////8A/////////////6AEAAAAAAAAAAAAAAAAAAAAAAAAkP///////////wD///////////+4BAAAAAAAAAAAAAAAAAAAAAAAAAAAoP//////////AP//////////8BQAAAAAAAAAAAAAAAAAAAAAAAAAAAAM5P////////8A//////////9wAAAAAAAAAAAsrPD/7KQsAAAAAAAAAABg/////////wD/////////+BAAAAAAAAAAUPj///////hQAAAAAAAAAAjs////////AP////////+sAAAAAAAAABDw//////////AYAAAAAAAAAKD///////8A/////////2wAAAAAAAAAdP///////////3wAAAAAAAAAYP///////wD/////////OAAAAAAAAAC4////////////xAAAAAAAAAAw////////AP////////8cAAAAAAAAAOD////////////oAAAAAAAAABT///////8A/////////wAAAAAAAAAA//////////////8AAAAAAAAAAP///////wD/////////AAAAAAAAAAD//////////////wAAAAAAAAAA////////AP////////8AAAAAAAAAAP/////////////8AAAAAAAAAAD///////8A/////////xwAAAAAAAAA5P///////////+AAAAAAAAAAHP///////wD/////////NAAAAAAAAAC8////////////uAAAAAAAAAA4////////AP////////9oAAAAAAAAAHj///////////98AAAAAAAAAGT///////8A/////////6gAAAAAAAAAGPD/////////+BgAAAAAAAAApP///////wD/////////9AwAAAAAAAAAUPz///////xcAAAAAAAAAAjs////////AP//////////cAAAAAAAAAAALKjs//CwOAAAAAAAAAAAYP////////8A///////////wFAAAAAAAAAAAAAAAAAAAAAAAAAAAAAzk/////////wD///////////+4BAAAAAAAAAAAAAAAAAAAAAAAAAAAoP//////////AP////////////+QAAAAAAAAAAAAAAAAAAAAAAAAAJD///////////8A//////////////+sEAAAAAAAAAAAAAAAAAAAAAyg/////////////wD////////////////oZAgAAAAAAAAAAAAAAARg4P//////////////AP//////////////////9KhsOCAAAAAUMFyc7P////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8=',				'width' => 40			),			'P' => array(				'data' => 'AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP///////////wAAAAAAAAAAAAAAAAAACCxguP////////////////8A////////////AAAAAAAAAAAAAAAAAAAAAAAAOOD//////////////wD///////////8AAAAAAAAAAAAAAAAAAAAAAAAAGOD/////////////AP///////////wAAAAAAAAAAAAAAAAAAAAAAAAAARP////////////8A////////////AAAAAAAAAAAAAAAAAAAAAAAAAAAAxP///////////wD///////////8AAAAAAAAAAAAAAAAAAAAAAAAAAABo////////////AP///////////wAAAAAAAAAA////6JwMAAAAAAAAADD///////////8A////////////AAAAAAAAAAD//////6AAAAAAAAAADP///////////wD///////////8AAAAAAAAAAP//////9AAAAAAAAAAA////////////AP///////////wAAAAAAAAAA///////0AAAAAAAAAAD///////////8A////////////AAAAAAAAAAD//////5gAAAAAAAAAHP///////////wD///////////8AAAAAAAAAAP///9iICAAAAAAAAABI////////////AP///////////wAAAAAAAAAAAAAAAAAAAAAAAAAAAJD///////////8A////////////AAAAAAAAAAAAAAAAAAAAAAAAAAAI6P///////////wD///////////8AAAAAAAAAAAAAAAAAAAAAAAAAAIT/////////////AP///////////wAAAAAAAAAAAAAAAAAAAAAAAABU/P////////////8A////////////AAAAAAAAAAAAAAAAAAAAAAAIhPz//////////////wD///////////8AAAAAAAAAAAAAAAAABCRMkOz/////////////////AP///////////wAAAAAAAAAA//////////////////////////////8A////////////AAAAAAAAAAD//////////////////////////////wD///////////8AAAAAAAAAAP//////////////////////////////AP///////////wAAAAAAAAAA//////////////////////////////8A////////////AAAAAAAAAAD//////////////////////////////wD///////////8AAAAAAAAAAP//////////////////////////////AP///////////wAAAAAAAAAA//////////////////////////////8A////////////AAAAAAAAAAD//////////////////////////////wD///////////8AAAAAAAAAAP//////////////////////////////AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8=',				'width' => 40			),			'Q' => array(				'data' => 'AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////SoaDQcAAAAHDhoqPT///////////////////8A//////////////BwDAAAAAAAAAAAAAAACHDo/////////////////wD///////////+4FAAAAAAAAAAAAAAAAAAAABCo////////////////AP//////////nAQAAAAAAAAAAAAAAAAAAAAAAACQ//////////////8A/////////7gEAAAAAAAAAAAAAAAAAAAAAAAAAACg/////////////wD////////wFAAAAAAAAAAAAAAAAAAAAAAAAAAAAAzo////////////AP///////3AAAAAAAAAAACyo8P/sqCwAAAAAAAAAAGT///////////8A///////4EAAAAAAAAABM+P///////FQAAAAAAAAACPT//////////wD//////7AAAAAAAAAAFPD/////////9BgAAAAAAAAApP//////////AP//////bAAAAAAAAAB4////////////fAAAAAAAAABk//////////8A//////84AAAAAAAAALz///////////+8AAAAAAAAADT//////////wD//////xwAAAAAAAAA6P///////////+QAAAAAAAAAHP//////////AP//////AAAAAAAAAAD//////////////wAAAAAAAAAA//////////8A//////8AAAAAAAAAAP//////////////AAAAAAAAAAD//////////wD//////wAAAAAAAAAA/P////////////8AAAAAAAAAAP//////////AP//////GAAAAAAAAADg////////////4AAAAAAAAAAc//////////8A//////84AAAAAAAAALT////MJHTo//+8AAAAAAAAADT//////////wD//////2wAAAAAAAAAdP///2AAABCg/3wAAAAAAAAAZP//////////AP//////rAAAAAAAAAAY9P/sCAAAAABMGAAAAAAAAACk//////////8A///////4EAAAAAAAAABU/P+0OAAAAAAAAAAAAAAACPT//////////wD///////94AAAAAAAAAAA4sPD/gAAAAAAAAAAAAABk////////////AP////////AcAAAAAAAAAAAAAAAAAAAAAAAAAAAADOT///////////8A/////////7wEAAAAAAAAAAAAAAAAAAAAAAAAAACQ/////////////wD//////////6wEAAAAAAAAAAAAAAAAAAAAAAAAABSs////////////AP///////////7gUAAAAAAAAAAAAAAAAAAAAAAAAAABAwP////////8A//////////////BwDAAAAAAAAAAAAAAABAgAAAAAAAA8/////////wD////////////////0qGg0GAAAABgwXJjkxBgAAAAAALD/////////AP//////////////////////////////////5DQAAAAk/P////////8A////////////////////////////////////+GwAAJD//////////wD//////////////////////////////////////8A49P//////////AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8=',				'width' => 40			),			'R' => array(				'data' => 'AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8A/////////wAAAAAAAAAAAAAAAAAAAAQgOGSk+P///////////////wD/////////AAAAAAAAAAAAAAAAAAAAAAAAAAAcuP//////////////AP////////8AAAAAAAAAAAAAAAAAAAAAAAAAAAAEsP////////////8A/////////wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQ6P///////////wD/////////AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAB8////////////AP////////8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAADD///////////8A/////////wAAAAAAAAAA///////svDgAAAAAAAAACP///////////wD/////////AAAAAAAAAAD/////////7AAAAAAAAAAA////////////AP////////8AAAAAAAAAAP/////////cAAAAAAAAABD///////////8A/////////wAAAAAAAAAA//////DQoCQAAAAAAAAAQP///////////wD/////////AAAAAAAAAAAAAAAAAAAAAAAAAAAAAACU////////////AP////////8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAIPj///////////8A/////////wAAAAAAAAAAAAAAAAAAAAAAAAAAAAzU/////////////wD/////////AAAAAAAAAAAAAAAAAAAAAAAAAAA02P//////////////AP////////8AAAAAAAAAAAAAAAAAAAAAAAxctPz///////////////8A/////////wAAAAAAAAAAAAAAAAAAAAAAAEDY/////////////////wD/////////AAAAAAAAAAD/9LAsAAAAAAAAAAzc////////////////AP////////8AAAAAAAAAAP///+wkAAAAAAAAADD8//////////////8A/////////wAAAAAAAAAA/////8QAAAAAAAAAAJD//////////////wD/////////AAAAAAAAAAD//////1QAAAAAAAAAFPD/////////////AP////////8AAAAAAAAAAP//////3AQAAAAAAAAAgP////////////8A/////////wAAAAAAAAAA////////aAAAAAAAAAAM6P///////////wD/////////AAAAAAAAAAD////////oCAAAAAAAAABs////////////AP////////8AAAAAAAAAAP////////+AAAAAAAAAAATc//////////8A/////////wAAAAAAAAAA//////////AUAAAAAAAAAFj//////////wD/////////AAAAAAAAAAD//////////5AAAAAAAAAAAND/////////AP////////8AAAAAAAAAAP//////////+CQAAAAAAAAAQP////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8=',				'width' => 40			),			'S' => array(				'data' => 'AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP/////////////////8vHBEIAgAAAQgQHC8/P////////////////8A////////////////pCQAAAAAAAAAAAAAAAAcoP///////////////wD//////////////FwAAAAAAAAAAAAAAAAAAAAAXP//////////////AP////////////9oAAAAAAAAAAAAAAAAAAAAAAAAhP////////////8A////////////zAAAAAAAAAAAAAAAAAAAAAAAAAAI6P///////////wD///////////9cAAAAAAAAAAAAAAAAAAAAAAAAAACA////////////AP///////////xgAAAAAAAAAUOD/8KwkAAAAAAAAADj///////////8A////////////AAAAAAAAAAD0/////8wABCAgICxASP///////////wD///////////8MAAAAAAAAAMz/////////////////////////////AP///////////0AAAAAAAAAACFiQxPT///////////////////////8A////////////oAAAAAAAAAAAAAAAADBwtPT//////////////////wD////////////8QAAAAAAAAAAAAAAAAAAACFTA////////////////AP/////////////oOAAAAAAAAAAAAAAAAAAAAABM6P////////////8A///////////////4fAgAAAAAAAAAAAAAAAAAAAAY2P///////////wD/////////////////7IwwAAAAAAAAAAAAAAAAAAAo+P//////////AP/////////////////////koGw0BAAAAAAAAAAAAACU//////////8A///////////////////////////4uFgAAAAAAAAAADz//////////wD//////////2BgSEA0IBwA6P///////5QAAAAAAAAADP//////////AP//////////JAAAAAAAAACc/////////AAAAAAAAAAA//////////8A//////////9YAAAAAAAAACDo///////AAAAAAAAAABT//////////wD//////////6QAAAAAAAAAACCk7P/snBQAAAAAAAAAUP//////////AP//////////+BAAAAAAAAAAAAAAAAAAAAAAAAAAAACs//////////8A////////////kAAAAAAAAAAAAAAAAAAAAAAAAAAAOP///////////wD////////////8RAAAAAAAAAAAAAAAAAAAAAAAABjc////////////AP/////////////0PAAAAAAAAAAAAAAAAAAAAAAg2P////////////8A///////////////8hBQAAAAAAAAAAAAAAAAMdPT//////////////wD/////////////////+LRwSCAMAAAAHDhoqPT/////////////////AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8=',				'width' => 40			),			'T' => array(				'data' => 'AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA////////////AP////////8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD///////////8A/////////wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAP///////////wD/////////AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA////////////AP////////8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD///////////8A/////////wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAP///////////wD///////////////////8AAAAAAAAAAP//////////////////////AP///////////////////wAAAAAAAAAA//////////////////////8A////////////////////AAAAAAAAAAD//////////////////////wD///////////////////8AAAAAAAAAAP//////////////////////AP///////////////////wAAAAAAAAAA//////////////////////8A////////////////////AAAAAAAAAAD//////////////////////wD///////////////////8AAAAAAAAAAP//////////////////////AP///////////////////wAAAAAAAAAA//////////////////////8A////////////////////AAAAAAAAAAD//////////////////////wD///////////////////8AAAAAAAAAAP//////////////////////AP///////////////////wAAAAAAAAAA//////////////////////8A////////////////////AAAAAAAAAAD//////////////////////wD///////////////////8AAAAAAAAAAP//////////////////////AP///////////////////wAAAAAAAAAA//////////////////////8A////////////////////AAAAAAAAAAD//////////////////////wD///////////////////8AAAAAAAAAAP//////////////////////AP///////////////////wAAAAAAAAAA//////////////////////8A////////////////////AAAAAAAAAAD//////////////////////wD///////////////////8AAAAAAAAAAP//////////////////////AP///////////////////wAAAAAAAAAA//////////////////////8A////////////////////AAAAAAAAAAD//////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8=',				'width' => 40			),			'U' => array(				'data' => 'AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////8AAAAAAAAAAP///////////wAAAAAAAAAA//////////8A/////////wAAAAAAAAAA////////////AAAAAAAAAAD//////////wD/////////AAAAAAAAAAD///////////8AAAAAAAAAAP//////////AP////////8AAAAAAAAAAP///////////wAAAAAAAAAA//////////8A/////////wAAAAAAAAAA////////////AAAAAAAAAAD//////////wD/////////AAAAAAAAAAD///////////8AAAAAAAAAAP//////////AP////////8AAAAAAAAAAP///////////wAAAAAAAAAA//////////8A/////////wAAAAAAAAAA////////////AAAAAAAAAAD//////////wD/////////AAAAAAAAAAD///////////8AAAAAAAAAAP//////////AP////////8AAAAAAAAAAP///////////wAAAAAAAAAA//////////8A/////////wAAAAAAAAAA////////////AAAAAAAAAAD//////////wD/////////AAAAAAAAAAD///////////8AAAAAAAAAAP//////////AP////////8AAAAAAAAAAP///////////wAAAAAAAAAA//////////8A/////////wAAAAAAAAAA////////////AAAAAAAAAAD//////////wD/////////AAAAAAAAAAD///////////8AAAAAAAAAAP//////////AP////////8AAAAAAAAAAP///////////wAAAAAAAAAA//////////8A/////////wAAAAAAAAAA////////////AAAAAAAAAAD//////////wD/////////JAAAAAAAAADk/////////+gAAAAAAAAAHP//////////AP////////9MAAAAAAAAAJz/////////nAAAAAAAAABE//////////8A/////////4gAAAAAAAAAHOj//////+ggAAAAAAAAAHz//////////wD/////////0AAAAAAAAAAAIJzs/+ykIAAAAAAAAAAA0P//////////AP//////////QAAAAAAAAAAAAAAAAAAAAAAAAAAAAED///////////8A///////////IBAAAAAAAAAAAAAAAAAAAAAAAAAAE0P///////////wD///////////+YAAAAAAAAAAAAAAAAAAAAAAAAAJj/////////////AP////////////+UBAAAAAAAAAAAAAAAAAAAAASU//////////////8A///////////////IPAAAAAAAAAAAAAAAAAAwyP///////////////wD/////////////////0IxYOCAIAAAEIEiAyP//////////////////AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8=',				'width' => 40			),			'V' => array(				'data' => 'AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD//////zAAAAAAAAAAYP//////////////ZAAAAAAAAAAw////////AP//////kAAAAAAAAAAU/P////////////8UAAAAAAAAAJD///////8A///////oBAAAAAAAAADE////////////xAAAAAAAAAAE7P///////wD///////9MAAAAAAAAAHD///////////94AAAAAAAAAEz/////////AP///////6gAAAAAAAAAJP///////////yQAAAAAAAAArP////////8A////////+BAAAAAAAAAA1P/////////YAAAAAAAAABT4/////////wD/////////aAAAAAAAAACE/////////4QAAAAAAAAAbP//////////AP/////////EAAAAAAAAADT/////////OAAAAAAAAADM//////////8A//////////8kAAAAAAAAAOT//////+QAAAAAAAAAKP///////////wD//////////4QAAAAAAAAAmP//////nAAAAAAAAACI////////////AP//////////5AAAAAAAAABE//////9EAAAAAAAABOT///////////8A////////////QAAAAAAAAAT0////9AgAAAAAAABI/////////////wD///////////+gAAAAAAAAAKT///+kAAAAAAAAAKj/////////////AP////////////QIAAAAAAAAXP///1wAAAAAAAAM+P////////////8A/////////////1wAAAAAAAAM+P/8DAAAAAAAAGT//////////////wD/////////////vAAAAAAAAAC8/7wAAAAAAAAAxP//////////////AP//////////////HAAAAAAAAGj/aAAAAAAAACT///////////////8A//////////////94AAAAAAAAHP8cAAAAAAAAhP///////////////wD//////////////9gAAAAAAAAAkAAAAAAAAADk////////////////AP///////////////zgAAAAAAAAQAAAAAAAAQP////////////////8A////////////////lAAAAAAAAAAAAAAAAACg/////////////////wD////////////////sCAAAAAAAAAAAAAAADPT/////////////////AP////////////////9QAAAAAAAAAAAAAABg//////////////////8A/////////////////7AAAAAAAAAAAAAAAMD//////////////////wD//////////////////BQAAAAAAAAAAAAc////////////////////AP//////////////////cAAAAAAAAAAAAHz///////////////////8A///////////////////MAAAAAAAAAAAA3P///////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8=',				'width' => 40			),			'W' => array(				'data' => 'AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8A//8cAAAAAAAAALz/////4AAAAAAAAAAA6P////+8AAAAAAAAABz//wD//1QAAAAAAAAAjP////+gAAAAAAAAAACo/////4wAAAAAAAAAUP//AP//jAAAAAAAAABU/////2AAAAAAAAAAAGj/////VAAAAAAAAACM//8A///EAAAAAAAAACT/////IAAAAAAAAAAAKP////8kAAAAAAAAAMT//wD///gEAAAAAAAAAPD//+AAAAAAAAAAAAAA6P//8AAAAAAAAAAE9P//AP///zAAAAAAAAAAvP//oAAAAAAAAAAAAACo//+8AAAAAAAAADD///8A////bAAAAAAAAACM//9gAAAAAAAAAAAAAGT//4wAAAAAAAAAaP///wD///+kAAAAAAAAAFT//yAAAAAAAAAAAAAAIP//VAAAAAAAAACc////AP///9gAAAAAAAAAJP/gAAAAAAAAAAAAAAAA4P8kAAAAAAAAANT///8A/////xAAAAAAAAAA8KAAAAAAAAAAAAAAAACg8AAAAAAAAAAQ/////wD/////TAAAAAAAAAC8YAAAAAAAAAAAAAAAAGC8AAAAAAAAAET/////AP////+AAAAAAAAAAIwgAAAAAAAAAAAAAAAAIIwAAAAAAAAAfP////8A/////7gAAAAAAAAANAAAAAAAACwwAAAAAAAANAAAAAAAAACw/////wD/////8AAAAAAAAAAAAAAAAAAAdHgAAAAAAAAAAAAAAAAAAOz/////AP//////KAAAAAAAAAAAAAAAAAC4vAAAAAAAAAAAAAAAAAAg//////8A//////9gAAAAAAAAAAAAAAAACPj4CAAAAAAAAAAAAAAAAFj//////wD//////5QAAAAAAAAAAAAAAABE//9IAAAAAAAAAAAAAAAAkP//////AP//////0AAAAAAAAAAAAAAAAIj//4wAAAAAAAAAAAAAAADI//////8A///////8DAAAAAAAAAAAAAAAzP//1AAAAAAAAAAAAAAABPj//////wD///////88AAAAAAAAAAAAABT/////GAAAAAAAAAAAAAA0////////AP///////3QAAAAAAAAAAAAAWP////9gAAAAAAAAAAAAAHD///////8A////////sAAAAAAAAAAAAACg/////6QAAAAAAAAAAAAApP///////wD////////kAAAAAAAAAAAAAOT/////6AAAAAAAAAAAAADc////////AP////////8cAAAAAAAAAAAo////////MAAAAAAAAAAAEP////////8A/////////1QAAAAAAAAAAHD///////94AAAAAAAAAABM/////////wD/////////jAAAAAAAAAAAtP///////7wAAAAAAAAAAID/////////AP/////////EAAAAAAAAAAT0////////+AgAAAAAAAAAuP////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8=',				'width' => 40			),			'X' => array(				'data' => 'AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD///////9UAAAAAAAAAKz///////////+sAAAAAAAAAFD/////////AP///////+QQAAAAAAAAFOT/////////8BwAAAAAAAAM5P////////8A/////////5gAAAAAAAAATP////////9kAAAAAAAAAJD//////////wD//////////0AAAAAAAAAAoP//////wAAAAAAAAAA0/P//////////AP//////////2AgAAAAAAAAQ4P////gkAAAAAAAABMz///////////8A////////////iAAAAAAAAABA////dAAAAAAAAABw/////////////wD////////////8MAAAAAAAAACU/9AEAAAAAAAAHPD/////////////AP/////////////IBAAAAAAAAAzYMAAAAAAAAACs//////////////8A//////////////90AAAAAAAAABAAAAAAAAAATP///////////////wD///////////////QgAAAAAAAAAAAAAAAAAAzg////////////////AP///////////////7wAAAAAAAAAAAAAAAAAjP////////////////8A/////////////////2AAAAAAAAAAAAAAADD8/////////////////wD/////////////////7BQAAAAAAAAAAAAEyP//////////////////AP/////////////////gDAAAAAAAAAAAAAjY//////////////////8A/////////////////0AAAAAAAAAAAAAAADj8/////////////////wD///////////////+UAAAAAAAAAAAAAAAAAJD/////////////////AP//////////////4AwAAAAAAAAAAAAAAAAADOD///////////////8A//////////////9AAAAAAAAAAAAAAAAAAAAAQP///////////////wD/////////////nAAAAAAAAAAAWAAAAAAAAAAAlP//////////////AP///////////+QQAAAAAAAAAGD/YAAAAAAAAAAM4P////////////8A////////////TAAAAAAAAAAs9P/0LAAAAAAAAABM/////////////wD//////////6AAAAAAAAAADNT////UDAAAAAAAAACg////////////AP/////////kEAAAAAAAAACg//////+gAAAAAAAAABDk//////////8A/////////0wAAAAAAAAAYP////////9gAAAAAAAAAEz//////////wD///////+oAAAAAAAAACz0//////////QsAAAAAAAAAKT/////////AP//////7BQAAAAAAAAM1P///////////9QMAAAAAAAAFOz///////8A//////9UAAAAAAAAAKD//////////////6AAAAAAAAAAVP///////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8=',				'width' => 40			),			'Y' => array(				'data' => 'AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP///////1QAAAAAAAAAAGj//////////2gAAAAAAAAAAFT///////8A////////5BAAAAAAAAAAAMT////////EAAAAAAAAAAAQ5P///////wD/////////mAAAAAAAAAAAKPj/////+CgAAAAAAAAAAJj/////////AP//////////PAAAAAAAAAAAgP////+AAAAAAAAAAAA8//////////8A///////////YCAAAAAAAAAAE2P//2AQAAAAAAAAACNj//////////wD///////////+AAAAAAAAAAAA4//84AAAAAAAAAACA////////////AP////////////woAAAAAAAAAACUlAAAAAAAAAAAKPz///////////8A/////////////8gAAAAAAAAAABAQAAAAAAAAAADI/////////////wD//////////////2wAAAAAAAAAAAAAAAAAAAAAbP//////////////AP//////////////8BwAAAAAAAAAAAAAAAAAABzw//////////////8A////////////////tAAAAAAAAAAAAAAAAAAAtP///////////////wD/////////////////VAAAAAAAAAAAAAAAAFT/////////////////AP/////////////////oEAAAAAAAAAAAAAAQ6P////////////////8A//////////////////+cAAAAAAAAAAAAAJz//////////////////wD///////////////////9AAAAAAAAAAABA////////////////////AP///////////////////9gAAAAAAAAAANj///////////////////8A/////////////////////wAAAAAAAAAA/////////////////////wD/////////////////////AAAAAAAAAAD/////////////////////AP////////////////////8AAAAAAAAAAP////////////////////8A/////////////////////wAAAAAAAAAA/////////////////////wD/////////////////////AAAAAAAAAAD/////////////////////AP////////////////////8AAAAAAAAAAP////////////////////8A/////////////////////wAAAAAAAAAA/////////////////////wD/////////////////////AAAAAAAAAAD/////////////////////AP////////////////////8AAAAAAAAAAP////////////////////8A/////////////////////wAAAAAAAAAA/////////////////////wD/////////////////////AAAAAAAAAAD/////////////////////AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8=',				'width' => 40			),			'Z' => array(				'data' => 'AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8A//////////8AAAAAAAAAAAAAAAAAAAAAAAAAAAD//////////////wD//////////wAAAAAAAAAAAAAAAAAAAAAAAAAAAP//////////////AP//////////AAAAAAAAAAAAAAAAAAAAAAAAAAAA//////////////8A//////////8AAAAAAAAAAAAAAAAAAAAAAAAAAAD//////////////wD//////////wAAAAAAAAAAAAAAAAAAAAAAAAAAAP//////////////AP//////////AAAAAAAAAAAAAAAAAAAAAAAAAAAQ//////////////8A/////////////////////////1AAAAAAAAAABLz//////////////wD///////////////////////98AAAAAAAAAACY////////////////AP//////////////////////pAAAAAAAAAAAaP////////////////8A/////////////////////8QIAAAAAAAAAET8/////////////////wD////////////////////gGAAAAAAAAAAo9P//////////////////AP//////////////////9CwAAAAAAAAAFNz///////////////////8A//////////////////xMAAAAAAAAAATA/////////////////////wD/////////////////eAAAAAAAAAAAnP//////////////////////AP///////////////5wAAAAAAAAAAHT///////////////////////8A///////////////ABAAAAAAAAABM/P///////////////////////wD/////////////3BQAAAAAAAAALPT/////////////////////////AP////////////QoAAAAAAAAABjg//////////////////////////8A///////////8SAAAAAAAAAAExP///////////////////////////wD//////////2wAAAAAAAAAAKD/////////////////////////////AP////////+YAAAAAAAAAAB8//////////////////////////////8A/////////wQAAAAAAAAAAAAAAAAAAAAAAAAAAAAA/////////////wD/////////AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD/////////////AP////////8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAP////////////8A/////////wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA/////////////wD/////////AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD/////////////AP////////8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAP////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8=',				'width' => 40			),		);	}}?>
<?php/**** @package acm* @copyright (c) 2010 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @ignore*/if (!defined('IN_PHPBB')){	exit;}// Include the abstract baseif (!class_exists('acm_memory')){	require("{$phpbb_root_path}includes/acm/acm_memory.$phpEx");}/*** ACM for WinCache* @package acm*/class acm extends acm_memory{	var $extension = 'wincache';	/**	* Purge cache data	*	* @return void	*/	function purge()	{		wincache_ucache_clear();		parent::purge();	}	/**	* Fetch an item from the cache	*	* @access protected	* @param string $var Cache key	* @return mixed Cached data	*/	function _read($var)	{		$success = false;		$result = wincache_ucache_get($this->key_prefix . $var, $success);		return ($success) ? $result : false;	}	/**	* Store data in the cache	*	* @access protected	* @param string $var Cache key	* @param mixed $data Data to store	* @param int $ttl Time-to-live of cached data	* @return bool True if the operation succeeded	*/	function _write($var, $data, $ttl = 2592000)	{		return wincache_ucache_set($this->key_prefix . $var, $data, $ttl);	}	/**	* Remove an item from the cache	*	* @access protected	* @param string $var Cache key	* @return bool True if the operation succeeded	*/	function _delete($var)	{		return wincache_ucache_delete($this->key_prefix . $var);	}}
<?php/**** @package ucp* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @ignore*/if (!defined('IN_PHPBB')){	exit;}/*** Compose private message* Called from ucp_pm with mode == 'compose'*/function compose_pm($id, $mode, $action, $user_folders = array()){	global $template, $db, $auth, $user;	global $phpbb_root_path, $phpEx, $config;	// Damn php and globals - i know, this is horrible	// Needed for handle_message_list_actions()	global $refresh, $submit, $preview;	include($phpbb_root_path . 'includes/functions_posting.' . $phpEx);	include($phpbb_root_path . 'includes/functions_display.' . $phpEx);	include($phpbb_root_path . 'includes/message_parser.' . $phpEx);	if (!$action)	{		$action = 'post';	}	add_form_key('ucp_pm_compose');	// Grab only parameters needed here	$to_user_id		= request_var('u', 0);	$to_group_id	= request_var('g', 0);	$msg_id			= request_var('p', 0);	$draft_id		= request_var('d', 0);	$lastclick		= request_var('lastclick', 0);	// Reply to all triggered (quote/reply)	$reply_to_all	= request_var('reply_to_all', 0);	// Do NOT use request_var or specialchars here	$address_list	= isset($_REQUEST['address_list']) ? $_REQUEST['address_list'] : array();	if (!is_array($address_list))	{		$address_list = array();	}	$submit		= (isset($_POST['post'])) ? true : false;	$preview	= (isset($_POST['preview'])) ? true : false;	$save		= (isset($_POST['save'])) ? true : false;	$load		= (isset($_POST['load'])) ? true : false;	$cancel		= (isset($_POST['cancel']) && !isset($_POST['save'])) ? true : false;	$delete		= (isset($_POST['delete'])) ? true : false;	$remove_u	= (isset($_REQUEST['remove_u'])) ? true : false;	$remove_g	= (isset($_REQUEST['remove_g'])) ? true : false;	$add_to		= (isset($_REQUEST['add_to'])) ? true : false;	$add_bcc	= (isset($_REQUEST['add_bcc'])) ? true : false;	$refresh	= isset($_POST['add_file']) || isset($_POST['delete_file']) || $save || $load		|| $remove_u || $remove_g || $add_to || $add_bcc;	$action		= ($delete && !$preview && !$refresh && $submit) ? 'delete' : $action;	$select_single = ($config['allow_mass_pm'] && $auth->acl_get('u_masspm')) ? false : true;	$error = array();	$current_time = time();	// Was cancel pressed? If so then redirect to the appropriate page	if ($cancel || ($current_time - $lastclick < 2 && $submit))	{		if ($msg_id)		{			redirect(append_sid("{$phpbb_root_path}ucp.$phpEx", 'i=pm&amp;mode=view&amp;action=view_message&amp;p=' . $msg_id));		}		redirect(append_sid("{$phpbb_root_path}ucp.$phpEx", 'i=pm'));	}	// Since viewtopic.php language entries are used in several modes,	// we include the language file here	$user->add_lang('viewtopic');	// Output PM_TO box if message composing	if ($action != 'edit')	{		// Add groups to PM box		if ($config['allow_mass_pm'] && $auth->acl_get('u_masspm_group'))		{			$sql = 'SELECT g.group_id, g.group_name, g.group_type				FROM ' . GROUPS_TABLE . ' g';			if (!$auth->acl_gets('a_group', 'a_groupadd', 'a_groupdel'))			{				$sql .= ' LEFT JOIN ' . USER_GROUP_TABLE . ' ug					ON (						g.group_id = ug.group_id						AND ug.user_id = ' . $user->data['user_id'] . '						AND ug.user_pending = 0					)					WHERE (g.group_type <> ' . GROUP_HIDDEN . ' OR ug.user_id = ' . $user->data['user_id'] . ')';			}			$sql .= ($auth->acl_gets('a_group', 'a_groupadd', 'a_groupdel')) ? ' WHERE ' : ' AND ';			$sql .= 'g.group_receive_pm = 1				ORDER BY g.group_type DESC, g.group_name ASC';			$result = $db->sql_query($sql);			$group_options = '';			while ($row = $db->sql_fetchrow($result))			{				$group_options .= '<option' . (($row['group_type'] == GROUP_SPECIAL) ? ' class="sep"' : '') . ' value="' . $row['group_id'] . '">' . (($row['group_type'] == GROUP_SPECIAL) ? $user->lang['G_' . $row['group_name']] : $row['group_name']) . '</option>';			}			$db->sql_freeresult($result);		}		$template->assign_vars(array(			'S_SHOW_PM_BOX'		=> true,			'S_ALLOW_MASS_PM'	=> ($config['allow_mass_pm'] && $auth->acl_get('u_masspm')) ? true : false,			'S_GROUP_OPTIONS'	=> ($config['allow_mass_pm'] && $auth->acl_get('u_masspm_group')) ? $group_options : '',			'U_FIND_USERNAME'	=> append_sid("{$phpbb_root_path}memberlist.$phpEx", "mode=searchuser&amp;form=postform&amp;field=username_list&amp;select_single=$select_single"),		));	}	$sql = '';	$folder_id = 0;	// What is all this following SQL for? Well, we need to know	// some basic information in all cases before we do anything.	switch ($action)	{		case 'post':			if (!$auth->acl_get('u_sendpm'))			{				trigger_error('NO_AUTH_SEND_MESSAGE');			}		break;		case 'reply':		case 'quote':		case 'forward':		case 'quotepost':			if (!$msg_id)			{				trigger_error('NO_MESSAGE');			}			if (!$auth->acl_get('u_sendpm'))			{				trigger_error('NO_AUTH_SEND_MESSAGE');			}			if ($action == 'quotepost')			{				$sql = 'SELECT p.post_id as msg_id, p.forum_id, p.post_text as message_text, p.poster_id as author_id, p.post_time as message_time, p.bbcode_bitfield, p.bbcode_uid, p.enable_sig, p.enable_smilies, p.enable_magic_url, t.topic_title as message_subject, u.username as quote_username					FROM ' . POSTS_TABLE . ' p, ' . TOPICS_TABLE . ' t, ' . USERS_TABLE . " u					WHERE p.post_id = $msg_id						AND t.topic_id = p.topic_id						AND u.user_id = p.poster_id";			}			else			{				$sql = 'SELECT t.folder_id, p.*, u.username as quote_username					FROM ' . PRIVMSGS_TO_TABLE . ' t, ' . PRIVMSGS_TABLE . ' p, ' . USERS_TABLE . ' u					WHERE t.user_id = ' . $user->data['user_id'] . "						AND p.author_id = u.user_id						AND t.msg_id = p.msg_id						AND p.msg_id = $msg_id";			}		break;		case 'edit':			if (!$msg_id)			{				trigger_error('NO_MESSAGE');			}			// check for outbox (not read) status, we do not allow editing if one user already having the message			$sql = 'SELECT p.*, t.folder_id				FROM ' . PRIVMSGS_TO_TABLE . ' t, ' . PRIVMSGS_TABLE . ' p				WHERE t.user_id = ' . $user->data['user_id'] . '					AND t.folder_id = ' . PRIVMSGS_OUTBOX . "					AND t.msg_id = $msg_id					AND t.msg_id = p.msg_id";		break;		case 'delete':			if (!$auth->acl_get('u_pm_delete'))			{				trigger_error('NO_AUTH_DELETE_MESSAGE');			}			if (!$msg_id)			{				trigger_error('NO_MESSAGE');			}			$sql = 'SELECT msg_id, pm_unread, pm_new, author_id, folder_id				FROM ' . PRIVMSGS_TO_TABLE . '				WHERE user_id = ' . $user->data['user_id'] . "					AND msg_id = $msg_id";		break;		case 'smilies':			generate_smilies('window', 0);		break;		default:			trigger_error('NO_ACTION_MODE', E_USER_ERROR);		break;	}	if ($action == 'forward' && (!$config['forward_pm'] || !$auth->acl_get('u_pm_forward')))	{		trigger_error('NO_AUTH_FORWARD_MESSAGE');	}	if ($action == 'edit' && !$auth->acl_get('u_pm_edit'))	{		trigger_error('NO_AUTH_EDIT_MESSAGE');	}	if ($sql)	{		$result = $db->sql_query($sql);		$post = $db->sql_fetchrow($result);		$db->sql_freeresult($result);		if (!$post)		{			// If editing it could be the recipient already read the message...			if ($action == 'edit')			{				$sql = 'SELECT p.*, t.folder_id					FROM ' . PRIVMSGS_TO_TABLE . ' t, ' . PRIVMSGS_TABLE . ' p					WHERE t.user_id = ' . $user->data['user_id'] . "						AND t.msg_id = $msg_id						AND t.msg_id = p.msg_id";				$result = $db->sql_query($sql);				$post = $db->sql_fetchrow($result);				$db->sql_freeresult($result);				if ($post)				{					trigger_error('NO_EDIT_READ_MESSAGE');				}			}			trigger_error('NO_MESSAGE');		}		if ($action == 'quotepost')		{			if (($post['forum_id'] && !$auth->acl_get('f_read', $post['forum_id'])) || (!$post['forum_id'] && !$auth->acl_getf_global('f_read')))			{				trigger_error('NOT_AUTHORISED');			}			// Passworded forum?			if ($post['forum_id'])			{				$sql = 'SELECT forum_password					FROM ' . FORUMS_TABLE . '					WHERE forum_id = ' . (int) $post['forum_id'];				$result = $db->sql_query($sql);				$forum_password = (string) $db->sql_fetchfield('forum_password');				$db->sql_freeresult($result);				if ($forum_password)				{					login_forum_box(array(						'forum_id'			=> $post['forum_id'],						'forum_password'	=> $forum_password,					));				}			}		}		$msg_id			= (int) $post['msg_id'];		$folder_id		= (isset($post['folder_id'])) ? $post['folder_id'] : 0;		$message_text	= (isset($post['message_text'])) ? $post['message_text'] : '';		if ((!$post['author_id'] || ($post['author_id'] == ANONYMOUS && $action != 'delete')) && $msg_id)		{			trigger_error('NO_AUTHOR');		}		if ($action == 'quotepost')		{			// Decode text for message display			decode_message($message_text, $post['bbcode_uid']);		}		if ($action != 'delete')		{			$enable_urls = $post['enable_magic_url'];			$enable_sig = (isset($post['enable_sig'])) ? $post['enable_sig'] : 0;			$message_attachment = (isset($post['message_attachment'])) ? $post['message_attachment'] : 0;			$message_subject = $post['message_subject'];			$message_time = $post['message_time'];			$bbcode_uid = $post['bbcode_uid'];			$quote_username = (isset($post['quote_username'])) ? $post['quote_username'] : '';			$icon_id = (isset($post['icon_id'])) ? $post['icon_id'] : 0;			if (($action == 'reply' || $action == 'quote' || $action == 'quotepost') && !sizeof($address_list) && !$refresh && !$submit && !$preview)			{				// Add the original author as the recipient if quoting a post or only replying and not having checked "reply to all"				if ($action == 'quotepost' || !$reply_to_all)				{					$address_list = array('u' => array($post['author_id'] => 'to'));				}				else				{					// We try to include every previously listed member from the TO Header - Reply to all					$address_list = rebuild_header(array('to' => $post['to_address']));					// Add the author (if he is already listed then this is no shame (it will be overwritten))					$address_list['u'][$post['author_id']] = 'to';					// Now, make sure the user itself is not listed. ;)					if (isset($address_list['u'][$user->data['user_id']]))					{						unset($address_list['u'][$user->data['user_id']]);					}				}			}			else if ($action == 'edit' && !sizeof($address_list) && !$refresh && !$submit && !$preview)			{				// Rebuild TO and BCC Header				$address_list = rebuild_header(array('to' => $post['to_address'], 'bcc' => $post['bcc_address']));			}			if ($action == 'quotepost')			{				$check_value = 0;			}			else			{				$check_value = (($post['enable_bbcode']+1) << 8) + (($post['enable_smilies']+1) << 4) + (($enable_urls+1) << 2) + (($post['enable_sig']+1) << 1);			}		}	}	else	{		$message_attachment = 0;		$message_text = $message_subject = '';		if ($to_user_id && $action == 'post')		{			$address_list['u'][$to_user_id] = 'to';		}		else if ($to_group_id && $action == 'post')		{			$address_list['g'][$to_group_id] = 'to';		}		$check_value = 0;	}	if (($to_group_id || isset($address_list['g'])) && (!$config['allow_mass_pm'] || !$auth->acl_get('u_masspm_group')))	{		trigger_error('NO_AUTH_GROUP_MESSAGE');	}	if ($action == 'edit' && !$refresh && !$preview && !$submit)	{		if (!($message_time > time() - ($config['pm_edit_time'] * 60) || !$config['pm_edit_time']))		{			trigger_error('CANNOT_EDIT_MESSAGE_TIME');		}	}	if ($action == 'post')	{		$template->assign_var('S_NEW_MESSAGE', true);	}	if (!isset($icon_id))	{		$icon_id = 0;	}	$message_parser = new parse_message();	$message_parser->message = ($action == 'reply') ? '' : $message_text;	unset($message_text);	$s_action = append_sid("{$phpbb_root_path}ucp.$phpEx", "i=$id&amp;mode=$mode&amp;action=$action", true, $user->session_id);	$s_action .= (($folder_id) ? "&amp;f=$folder_id" : '') . (($msg_id) ? "&amp;p=$msg_id" : '');	// Delete triggered ?	if ($action == 'delete')	{		// Folder id has been determined by the SQL Statement		// $folder_id = request_var('f', PRIVMSGS_NO_BOX);		// Do we need to confirm ?		if (confirm_box(true))		{			delete_pm($user->data['user_id'], $msg_id, $folder_id);			// jump to next message in "history"? nope, not for the moment. But able to be included later.			$meta_info = append_sid("{$phpbb_root_path}ucp.$phpEx", "i=pm&amp;folder=$folder_id");			$message = $user->lang['MESSAGE_DELETED'];			meta_refresh(3, $meta_info);			$message .= '<br /><br />' . sprintf($user->lang['RETURN_FOLDER'], '<a href="' . $meta_info . '">', '</a>');			trigger_error($message);		}		else		{			$s_hidden_fields = array(				'p'			=> $msg_id,				'f'			=> $folder_id,				'action'	=> 'delete'			);			// "{$phpbb_root_path}ucp.$phpEx?i=pm&amp;mode=compose"			confirm_box(false, 'DELETE_MESSAGE', build_hidden_fields($s_hidden_fields));		}		redirect(append_sid("{$phpbb_root_path}ucp.$phpEx", 'i=pm&amp;mode=view&amp;action=view_message&amp;p=' . $msg_id));	}	// Get maximum number of allowed recipients	$sql = 'SELECT MAX(g.group_max_recipients) as max_recipients		FROM ' . GROUPS_TABLE . ' g, ' . USER_GROUP_TABLE . ' ug		WHERE ug.user_id = ' . $user->data['user_id'] . '			AND ug.user_pending = 0			AND ug.group_id = g.group_id';	$result = $db->sql_query($sql);	$max_recipients = (int) $db->sql_fetchfield('max_recipients');	$db->sql_freeresult($result);	$max_recipients = (!$max_recipients) ? $config['pm_max_recipients'] : $max_recipients;	// If this is a quote/reply "to all"... we may increase the max_recpients to the number of original recipients	if (($action == 'reply' || $action == 'quote') && $max_recipients && $reply_to_all)	{		// We try to include every previously listed member from the TO Header		$list = rebuild_header(array('to' => $post['to_address']));		// Can be an empty array too ;)		$list = (!empty($list['u'])) ? $list['u'] : array();		$list[$post['author_id']] = 'to';		if (isset($list[$user->data['user_id']]))		{			unset($list[$user->data['user_id']]);		}		$max_recipients = ($max_recipients < sizeof($list)) ? sizeof($list) : $max_recipients;		unset($list);	}	// Handle User/Group adding/removing	handle_message_list_actions($address_list, $error, $remove_u, $remove_g, $add_to, $add_bcc);	// Check mass pm to group permission	if ((!$config['allow_mass_pm'] || !$auth->acl_get('u_masspm_group')) && !empty($address_list['g']))	{		$address_list = array();		$error[] = $user->lang['NO_AUTH_GROUP_MESSAGE'];	}	// Check mass pm to users permission	if ((!$config['allow_mass_pm'] || !$auth->acl_get('u_masspm')) && num_recipients($address_list) > 1)	{		$address_list = get_recipients($address_list, 1);		$error[] = $user->lang('TOO_MANY_RECIPIENTS', 1);	}	// Check for too many recipients	if (!empty($address_list['u']) && $max_recipients && sizeof($address_list['u']) > $max_recipients)	{		$address_list = get_recipients($address_list, $max_recipients);		$error[] = $user->lang('TOO_MANY_RECIPIENTS', $max_recipients);	}	// Always check if the submitted attachment data is valid and belongs to the user.	// Further down (especially in submit_post()) we do not check this again.	$message_parser->get_submitted_attachment_data();	if ($message_attachment && !$submit && !$refresh && !$preview && $action == 'edit')	{		// Do not change to SELECT *		$sql = 'SELECT attach_id, is_orphan, attach_comment, real_filename			FROM ' . ATTACHMENTS_TABLE . "			WHERE post_msg_id = $msg_id				AND in_message = 1				AND is_orphan = 0			ORDER BY filetime DESC";		$result = $db->sql_query($sql);		$message_parser->attachment_data = array_merge($message_parser->attachment_data, $db->sql_fetchrowset($result));		$db->sql_freeresult($result);	}	if (!in_array($action, array('quote', 'edit', 'delete', 'forward')))	{		$enable_sig		= ($config['allow_sig'] && $config['allow_sig_pm'] && $auth->acl_get('u_sig') && $user->optionget('attachsig'));		$enable_smilies	= ($config['allow_smilies'] && $auth->acl_get('u_pm_smilies') && $user->optionget('smilies'));		$enable_bbcode	= ($config['allow_bbcode'] && $auth->acl_get('u_pm_bbcode') && $user->optionget('bbcode'));		$enable_urls	= true;	}	$enable_magic_url = $drafts = false;	// User own some drafts?	if ($auth->acl_get('u_savedrafts') && $action != 'delete')	{		$sql = 'SELECT draft_id			FROM ' . DRAFTS_TABLE . '			WHERE forum_id = 0				AND topic_id = 0				AND user_id = ' . $user->data['user_id'] .				(($draft_id) ? " AND draft_id <> $draft_id" : '');		$result = $db->sql_query_limit($sql, 1);		$row = $db->sql_fetchrow($result);		$db->sql_freeresult($result);		if ($row)		{			$drafts = true;		}	}	if ($action == 'edit')	{		$message_parser->bbcode_uid = $bbcode_uid;	}	$bbcode_status	= ($config['allow_bbcode'] && $config['auth_bbcode_pm'] && $auth->acl_get('u_pm_bbcode')) ? true : false;	$smilies_status	= ($config['allow_smilies'] && $config['auth_smilies_pm'] && $auth->acl_get('u_pm_smilies')) ? true : false;	$img_status		= ($config['auth_img_pm'] && $auth->acl_get('u_pm_img')) ? true : false;	$flash_status	= ($config['auth_flash_pm'] && $auth->acl_get('u_pm_flash')) ? true : false;	$url_status		= ($config['allow_post_links']) ? true : false;	// Save Draft	if ($save && $auth->acl_get('u_savedrafts'))	{		$subject = utf8_normalize_nfc(request_var('subject', '', true));		$subject = (!$subject && $action != 'post') ? $user->lang['NEW_MESSAGE'] : $subject;		$message = utf8_normalize_nfc(request_var('message', '', true));		if ($subject && $message)		{			if (confirm_box(true))			{				$sql = 'INSERT INTO ' . DRAFTS_TABLE . ' ' . $db->sql_build_array('INSERT', array(					'user_id'		=> $user->data['user_id'],					'topic_id'		=> 0,					'forum_id'		=> 0,					'save_time'		=> $current_time,					'draft_subject'	=> $subject,					'draft_message'	=> $message					)				);				$db->sql_query($sql);				$redirect_url = append_sid("{$phpbb_root_path}ucp.$phpEx", "i=pm&amp;mode=$mode");				meta_refresh(3, $redirect_url);				$message = $user->lang['DRAFT_SAVED'] . '<br /><br />' . sprintf($user->lang['RETURN_UCP'], '<a href="' . $redirect_url . '">', '</a>');				trigger_error($message);			}			else			{				$s_hidden_fields = build_hidden_fields(array(					'mode'		=> $mode,					'action'	=> $action,					'save'		=> true,					'subject'	=> $subject,					'message'	=> $message,					'u'			=> $to_user_id,					'g'			=> $to_group_id,					'p'			=> $msg_id)				);				$s_hidden_fields .= build_address_field($address_list);				confirm_box(false, 'SAVE_DRAFT', $s_hidden_fields);			}		}		else		{			if (utf8_clean_string($subject) === '')			{				$error[] = $user->lang['EMPTY_MESSAGE_SUBJECT'];			}			if (utf8_clean_string($message) === '')			{				$error[] = $user->lang['TOO_FEW_CHARS'];			}		}		unset($subject, $message);	}	// Load Draft	if ($draft_id && $auth->acl_get('u_savedrafts'))	{		$sql = 'SELECT draft_subject, draft_message			FROM ' . DRAFTS_TABLE . "			WHERE draft_id = $draft_id				AND topic_id = 0				AND forum_id = 0				AND user_id = " . $user->data['user_id'];		$result = $db->sql_query_limit($sql, 1);		if ($row = $db->sql_fetchrow($result))		{			$message_parser->message = $row['draft_message'];			$message_subject = $row['draft_subject'];			$template->assign_var('S_DRAFT_LOADED', true);		}		else		{			$draft_id = 0;		}		$db->sql_freeresult($result);	}	// Load Drafts	if ($load && $drafts)	{		load_drafts(0, 0, $id, $action, $msg_id);	}	if ($submit || $preview || $refresh)	{		if (($submit || $preview) && !check_form_key('ucp_pm_compose'))		{			$error[] = $user->lang['FORM_INVALID'];		}		$subject = utf8_normalize_nfc(request_var('subject', '', true));		$message_parser->message = utf8_normalize_nfc(request_var('message', '', true));		$icon_id			= request_var('icon', 0);		$enable_bbcode 		= (!$bbcode_status || isset($_POST['disable_bbcode'])) ? false : true;		$enable_smilies		= (!$smilies_status || isset($_POST['disable_smilies'])) ? false : true;		$enable_urls 		= (isset($_POST['disable_magic_url'])) ? 0 : 1;		$enable_sig			= (!$config['allow_sig'] ||!$config['allow_sig_pm']) ? false : ((isset($_POST['attach_sig'])) ? true : false);		if ($submit)		{			$status_switch	= (($enable_bbcode+1) << 8) + (($enable_smilies+1) << 4) + (($enable_urls+1) << 2) + (($enable_sig+1) << 1);			$status_switch = ($status_switch != $check_value);		}		else		{			$status_switch = 1;		}		// Parse Attachments - before checksum is calculated		$message_parser->parse_attachments('fileupload', $action, 0, $submit, $preview, $refresh, true);		if (sizeof($message_parser->warn_msg) && !($remove_u || $remove_g || $add_to || $add_bcc))		{			$error[] = implode('<br />', $message_parser->warn_msg);			$message_parser->warn_msg = array();		}		// Parse message		$message_parser->parse($enable_bbcode, ($config['allow_post_links']) ? $enable_urls : false, $enable_smilies, $img_status, $flash_status, true, $config['allow_post_links']);		// On a refresh we do not care about message parsing errors		if (sizeof($message_parser->warn_msg) && !$refresh)		{			$error[] = implode('<br />', $message_parser->warn_msg);		}		if ($action != 'edit' && !$preview && !$refresh && $config['flood_interval'] && !$auth->acl_get('u_ignoreflood'))		{			// Flood check			$last_post_time = $user->data['user_lastpost_time'];			if ($last_post_time)			{				if ($last_post_time && ($current_time - $last_post_time) < intval($config['flood_interval']))				{					$error[] = $user->lang['FLOOD_ERROR'];				}			}		}		// Subject defined		if ($submit)		{			if (utf8_clean_string($subject) === '')			{				$error[] = $user->lang['EMPTY_MESSAGE_SUBJECT'];			}			if (!sizeof($address_list))			{				$error[] = $user->lang['NO_RECIPIENT'];			}		}		// Store message, sync counters		if (!sizeof($error) && $submit)		{			$pm_data = array(				'msg_id'				=> (int) $msg_id,				'from_user_id'			=> $user->data['user_id'],				'from_user_ip'			=> $user->ip,				'from_username'			=> $user->data['username'],				'reply_from_root_level'	=> (isset($post['root_level'])) ? (int) $post['root_level'] : 0,				'reply_from_msg_id'		=> (int) $msg_id,				'icon_id'				=> (int) $icon_id,				'enable_sig'			=> (bool) $enable_sig,				'enable_bbcode'			=> (bool) $enable_bbcode,				'enable_smilies'		=> (bool) $enable_smilies,				'enable_urls'			=> (bool) $enable_urls,				'bbcode_bitfield'		=> $message_parser->bbcode_bitfield,				'bbcode_uid'			=> $message_parser->bbcode_uid,				'message'				=> $message_parser->message,				'attachment_data'		=> $message_parser->attachment_data,				'filename_data'			=> $message_parser->filename_data,				'address_list'			=> $address_list			);			// ((!$message_subject) ? $subject : $message_subject)			$msg_id = submit_pm($action, $subject, $pm_data);			$return_message_url = append_sid("{$phpbb_root_path}ucp.$phpEx", 'i=pm&amp;mode=view&amp;p=' . $msg_id);			$inbox_folder_url = append_sid("{$phpbb_root_path}ucp.$phpEx", 'i=pm&amp;folder=inbox');			$outbox_folder_url = append_sid("{$phpbb_root_path}ucp.$phpEx", 'i=pm&amp;folder=outbox');			$folder_url = '';			if (($folder_id > 0) && isset($user_folders[$folder_id]))			{				$folder_url = append_sid("{$phpbb_root_path}ucp.$phpEx", 'i=pm&amp;folder=' . $folder_id);			}			$return_box_url = ($action === 'post' || $action === 'edit') ? $outbox_folder_url : $inbox_folder_url;			$return_box_lang = ($action === 'post' || $action === 'edit') ? 'PM_OUTBOX' : 'PM_INBOX';			$message = $user->lang['MESSAGE_STORED'] . '<br /><br />' . sprintf($user->lang['VIEW_PRIVATE_MESSAGE'], '<a href="' . $return_message_url . '">', '</a>');			$last_click_type = 'CLICK_RETURN_FOLDER';			if ($folder_url)			{				$message .= '<br /><br />' . sprintf($user->lang['CLICK_RETURN_FOLDER'], '<a href="' . $folder_url . '">', '</a>', $user_folders[$folder_id]['folder_name']);				$last_click_type = 'CLICK_GOTO_FOLDER';			}			$message .= '<br /><br />' . sprintf($user->lang[$last_click_type], '<a href="' . $return_box_url . '">', '</a>', $user->lang[$return_box_lang]);			meta_refresh(3, $return_message_url);			trigger_error($message);		}		$message_subject = $subject;	}	// Preview	if (!sizeof($error) && $preview)	{		$preview_message = $message_parser->format_display($enable_bbcode, $enable_urls, $enable_smilies, false);		$preview_signature = $user->data['user_sig'];		$preview_signature_uid = $user->data['user_sig_bbcode_uid'];		$preview_signature_bitfield = $user->data['user_sig_bbcode_bitfield'];		// Signature		if ($enable_sig && $config['allow_sig'] && $preview_signature)		{			$parse_sig = new parse_message($preview_signature);			$parse_sig->bbcode_uid = $preview_signature_uid;			$parse_sig->bbcode_bitfield = $preview_signature_bitfield;			$parse_sig->format_display($config['allow_sig_bbcode'], $config['allow_sig_links'], $config['allow_sig_smilies']);			$preview_signature = $parse_sig->message;			unset($parse_sig);		}		else		{			$preview_signature = '';		}		// Attachment Preview		if (sizeof($message_parser->attachment_data))		{			$template->assign_var('S_HAS_ATTACHMENTS', true);			$update_count = array();			$attachment_data = $message_parser->attachment_data;			parse_attachments(false, $preview_message, $attachment_data, $update_count, true);			foreach ($attachment_data as $i => $attachment)			{				$template->assign_block_vars('attachment', array(					'DISPLAY_ATTACHMENT'	=> $attachment)				);			}			unset($attachment_data);		}		$preview_subject = censor_text($subject);		if (!sizeof($error))		{			$template->assign_vars(array(				'PREVIEW_SUBJECT'		=> $preview_subject,				'PREVIEW_MESSAGE'		=> $preview_message,				'PREVIEW_SIGNATURE'		=> $preview_signature,				'S_DISPLAY_PREVIEW'		=> true)			);		}		unset($message_text);	}	// Decode text for message display	$bbcode_uid = (($action == 'quote' || $action == 'forward') && !$preview && !$refresh && (!sizeof($error) || (sizeof($error) && !$submit))) ? $bbcode_uid : $message_parser->bbcode_uid;	$message_parser->decode_message($bbcode_uid);	if (($action == 'quote' || $action == 'quotepost') && !$preview && !$refresh && !$submit)	{		if ($action == 'quotepost')		{			$post_id = request_var('p', 0);			if ($config['allow_post_links'])			{				$message_link = "[url=" . generate_board_url() . "/viewtopic.$phpEx?p={$post_id}#p{$post_id}]{$user->lang['SUBJECT']}: {$message_subject}[/url]\n\n";			}			else			{				$message_link = $user->lang['SUBJECT'] . ': ' . $message_subject . " (" . generate_board_url() . "/viewtopic.$phpEx?p={$post_id}#p{$post_id})\n\n";			}		}		else		{			$message_link = '';		}		$message_parser->message = $message_link . '[quote=&quot;' . $quote_username . '&quot;]' . censor_text(trim($message_parser->message)) . "[/quote]\n";	}	if (($action == 'reply' || $action == 'quote' || $action == 'quotepost') && !$preview && !$refresh)	{		$message_subject = ((!preg_match('/^Re:/', $message_subject)) ? 'Re: ' : '') . censor_text($message_subject);	}	if ($action == 'forward' && !$preview && !$refresh && !$submit)	{		$fwd_to_field = write_pm_addresses(array('to' => $post['to_address']), 0, true);		if ($config['allow_post_links'])		{			$quote_username_text = '[url=' . generate_board_url() . "/memberlist.$phpEx?mode=viewprofile&amp;u={$post['author_id']}]{$quote_username}[/url]";		}		else		{			$quote_username_text = $quote_username . ' (' . generate_board_url() . "/memberlist.$phpEx?mode=viewprofile&amp;u={$post['author_id']})";		}		$forward_text = array();		$forward_text[] = $user->lang['FWD_ORIGINAL_MESSAGE'];		$forward_text[] = sprintf($user->lang['FWD_SUBJECT'], censor_text($message_subject));		$forward_text[] = sprintf($user->lang['FWD_DATE'], $user->format_date($message_time, false, true));		$forward_text[] = sprintf($user->lang['FWD_FROM'], $quote_username_text);		$forward_text[] = sprintf($user->lang['FWD_TO'], implode(', ', $fwd_to_field['to']));		$message_parser->message = implode("\n", $forward_text) . "\n\n[quote=&quot;{$quote_username}&quot;]\n" . censor_text(trim($message_parser->message)) . "\n[/quote]";		$message_subject = ((!preg_match('/^Fwd:/', $message_subject)) ? 'Fwd: ' : '') . censor_text($message_subject);	}	$attachment_data = $message_parser->attachment_data;	$filename_data = $message_parser->filename_data;	$message_text = $message_parser->message;	// MAIN PM PAGE BEGINS HERE	// Generate smiley listing	generate_smilies('inline', 0);	// Generate PM Icons	$s_pm_icons = false;	if ($config['enable_pm_icons'])	{		$s_pm_icons = posting_gen_topic_icons($action, $icon_id);	}	// Generate inline attachment select box	posting_gen_inline_attachments($attachment_data);	// Build address list for display	// array('u' => array($author_id => 'to'));	if (sizeof($address_list))	{		// Get Usernames and Group Names		$result = array();		if (!empty($address_list['u']))		{			$sql = 'SELECT user_id as id, username as name, user_colour as colour				FROM ' . USERS_TABLE . '				WHERE ' . $db->sql_in_set('user_id', array_map('intval', array_keys($address_list['u']))) . '				ORDER BY username_clean ASC';			$result['u'] = $db->sql_query($sql);		}		if (!empty($address_list['g']))		{			$sql = 'SELECT g.group_id AS id, g.group_name AS name, g.group_colour AS colour, g.group_type				FROM ' . GROUPS_TABLE . ' g';			if (!$auth->acl_gets('a_group', 'a_groupadd', 'a_groupdel'))			{				$sql .= ' LEFT JOIN ' . USER_GROUP_TABLE . ' ug					ON (						g.group_id = ug.group_id						AND ug.user_id = ' . $user->data['user_id'] . '						AND ug.user_pending = 0					)					WHERE (g.group_type <> ' . GROUP_HIDDEN . ' OR ug.user_id = ' . $user->data['user_id'] . ')';			}			$sql .= ($auth->acl_gets('a_group', 'a_groupadd', 'a_groupdel')) ? ' WHERE ' : ' AND ';			$sql .= 'g.group_receive_pm = 1				AND ' . $db->sql_in_set('g.group_id', array_map('intval', array_keys($address_list['g']))) . '				ORDER BY g.group_name ASC';			$result['g'] = $db->sql_query($sql);		}		$u = $g = array();		$_types = array('u', 'g');		foreach ($_types as $type)		{			if (isset($result[$type]) && $result[$type])			{				while ($row = $db->sql_fetchrow($result[$type]))				{					if ($type == 'g')					{						$row['name'] = ($row['group_type'] == GROUP_SPECIAL) ? $user->lang['G_' . $row['name']] : $row['name'];					}					${$type}[$row['id']] = array('name' => $row['name'], 'colour' => $row['colour']);				}				$db->sql_freeresult($result[$type]);			}		}		// Now Build the address list		$plain_address_field = '';		foreach ($address_list as $type => $adr_ary)		{			foreach ($adr_ary as $id => $field)			{				if (!isset(${$type}[$id]))				{					unset($address_list[$type][$id]);					continue;				}				$field = ($field == 'to') ? 'to' : 'bcc';				$type = ($type == 'u') ? 'u' : 'g';				$id = (int) $id;				$tpl_ary = array(					'IS_GROUP'	=> ($type == 'g') ? true : false,					'IS_USER'	=> ($type == 'u') ? true : false,					'UG_ID'		=> $id,					'NAME'		=> ${$type}[$id]['name'],					'COLOUR'	=> (${$type}[$id]['colour']) ? '#' . ${$type}[$id]['colour'] : '',					'TYPE'		=> $type,				);				if ($type == 'u')				{					$tpl_ary = array_merge($tpl_ary, array(						'U_VIEW'		=> get_username_string('profile', $id, ${$type}[$id]['name'], ${$type}[$id]['colour']),						'NAME_FULL'		=> get_username_string('full', $id, ${$type}[$id]['name'], ${$type}[$id]['colour']),					));				}				else				{					$tpl_ary = array_merge($tpl_ary, array(						'U_VIEW'		=> append_sid("{$phpbb_root_path}memberlist.$phpEx", 'mode=group&amp;g=' . $id),					));				}				$template->assign_block_vars($field . '_recipient', $tpl_ary);			}		}	}	// Build hidden address list	$s_hidden_address_field = build_address_field($address_list);	$bbcode_checked		= (isset($enable_bbcode)) ? !$enable_bbcode : (($config['allow_bbcode'] && $auth->acl_get('u_pm_bbcode')) ? !$user->optionget('bbcode') : 1);	$smilies_checked	= (isset($enable_smilies)) ? !$enable_smilies : (($config['allow_smilies'] && $auth->acl_get('u_pm_smilies')) ? !$user->optionget('smilies') : 1);	$urls_checked		= (isset($enable_urls)) ? !$enable_urls : 0;	$sig_checked		= $enable_sig;	switch ($action)	{		case 'post':			$page_title = $user->lang['POST_NEW_PM'];		break;		case 'quote':			$page_title = $user->lang['POST_QUOTE_PM'];		break;		case 'quotepost':			$page_title = $user->lang['POST_PM_POST'];		break;		case 'reply':			$page_title = $user->lang['POST_REPLY_PM'];		break;		case 'edit':			$page_title = $user->lang['POST_EDIT_PM'];		break;		case 'forward':			$page_title = $user->lang['POST_FORWARD_PM'];		break;		default:			trigger_error('NO_ACTION_MODE', E_USER_ERROR);		break;	}	$s_hidden_fields = '<input type="hidden" name="lastclick" value="' . $current_time . '" />';	$s_hidden_fields .= (isset($check_value)) ? '<input type="hidden" name="status_switch" value="' . $check_value . '" />' : '';	$s_hidden_fields .= ($draft_id || isset($_REQUEST['draft_loaded'])) ? '<input type="hidden" name="draft_loaded" value="' . ((isset($_REQUEST['draft_loaded'])) ? intval($_REQUEST['draft_loaded']) : $draft_id) . '" />' : '';	$form_enctype = (@ini_get('file_uploads') == '0' || strtolower(@ini_get('file_uploads')) == 'off' || !$config['allow_pm_attach'] || !$auth->acl_get('u_pm_attach')) ? '' : ' enctype="multipart/form-data"';	// Start assigning vars for main posting page ...	$template->assign_vars(array(		'L_POST_A'					=> $page_title,		'L_ICON'					=> $user->lang['PM_ICON'],		'L_MESSAGE_BODY_EXPLAIN'	=> (intval($config['max_post_chars'])) ? sprintf($user->lang['MESSAGE_BODY_EXPLAIN'], intval($config['max_post_chars'])) : '',		'SUBJECT'				=> (isset($message_subject)) ? $message_subject : '',		'MESSAGE'				=> $message_text,		'BBCODE_STATUS'			=> ($bbcode_status) ? sprintf($user->lang['BBCODE_IS_ON'], '<a href="' . append_sid("{$phpbb_root_path}faq.$phpEx", 'mode=bbcode') . '">', '</a>') : sprintf($user->lang['BBCODE_IS_OFF'], '<a href="' . append_sid("{$phpbb_root_path}faq.$phpEx", 'mode=bbcode') . '">', '</a>'),		'IMG_STATUS'			=> ($img_status) ? $user->lang['IMAGES_ARE_ON'] : $user->lang['IMAGES_ARE_OFF'],		'FLASH_STATUS'			=> ($flash_status) ? $user->lang['FLASH_IS_ON'] : $user->lang['FLASH_IS_OFF'],		'SMILIES_STATUS'		=> ($smilies_status) ? $user->lang['SMILIES_ARE_ON'] : $user->lang['SMILIES_ARE_OFF'],		'URL_STATUS'			=> ($url_status) ? $user->lang['URL_IS_ON'] : $user->lang['URL_IS_OFF'],		'MAX_FONT_SIZE'			=> (int) $config['max_post_font_size'],		'MINI_POST_IMG'			=> $user->img('icon_post_target', $user->lang['PM']),		'ERROR'					=> (sizeof($error)) ? implode('<br />', $error) : '',		'MAX_RECIPIENTS'		=> ($config['allow_mass_pm'] && ($auth->acl_get('u_masspm') || $auth->acl_get('u_masspm_group'))) ? $max_recipients : 0,		'S_COMPOSE_PM'			=> true,		'S_EDIT_POST'			=> ($action == 'edit'),		'S_SHOW_PM_ICONS'		=> $s_pm_icons,		'S_BBCODE_ALLOWED'		=> ($bbcode_status) ? 1 : 0,		'S_BBCODE_CHECKED'		=> ($bbcode_checked) ? ' checked="checked"' : '',		'S_SMILIES_ALLOWED'		=> $smilies_status,		'S_SMILIES_CHECKED'		=> ($smilies_checked) ? ' checked="checked"' : '',		'S_SIG_ALLOWED'			=> ($config['allow_sig'] && $config['allow_sig_pm'] && $auth->acl_get('u_sig')),		'S_SIGNATURE_CHECKED'	=> ($sig_checked) ? ' checked="checked"' : '',		'S_LINKS_ALLOWED'		=> $url_status,		'S_MAGIC_URL_CHECKED'	=> ($urls_checked) ? ' checked="checked"' : '',		'S_SAVE_ALLOWED'		=> ($auth->acl_get('u_savedrafts') && $action != 'edit') ? true : false,		'S_HAS_DRAFTS'			=> ($auth->acl_get('u_savedrafts') && $drafts),		'S_FORM_ENCTYPE'		=> $form_enctype,		'S_BBCODE_IMG'			=> $img_status,		'S_BBCODE_FLASH'		=> $flash_status,		'S_BBCODE_QUOTE'		=> true,		'S_BBCODE_URL'			=> $url_status,		'S_POST_ACTION'				=> $s_action,		'S_HIDDEN_ADDRESS_FIELD'	=> $s_hidden_address_field,		'S_HIDDEN_FIELDS'			=> $s_hidden_fields,		'S_CLOSE_PROGRESS_WINDOW'	=> isset($_POST['add_file']),		'U_PROGRESS_BAR'			=> append_sid("{$phpbb_root_path}posting.$phpEx", 'f=0&amp;mode=popup'),		'UA_PROGRESS_BAR'			=> addslashes(append_sid("{$phpbb_root_path}posting.$phpEx", 'f=0&amp;mode=popup')),	));	// Build custom bbcodes array	display_custom_bbcodes();	// Show attachment box for adding attachments if true	$allowed = ($auth->acl_get('u_pm_attach') && $config['allow_pm_attach'] && $form_enctype);	// Attachment entry	posting_gen_attachment_entry($attachment_data, $filename_data, $allowed);	// Message History	if ($action == 'reply' || $action == 'quote' || $action == 'forward')	{		if (message_history($msg_id, $user->data['user_id'], $post, array(), true))		{			$template->assign_var('S_DISPLAY_HISTORY', true);		}	}}/*** For composing messages, handle list actions*/function handle_message_list_actions(&$address_list, &$error, $remove_u, $remove_g, $add_to, $add_bcc){	global $auth, $db, $user;	// Delete User [TO/BCC]	if ($remove_u && !empty($_REQUEST['remove_u']) && is_array($_REQUEST['remove_u']))	{		$remove_user_id = array_keys($_REQUEST['remove_u']);		if (isset($remove_user_id[0]))		{			unset($address_list['u'][(int) $remove_user_id[0]]);		}	}	// Delete Group [TO/BCC]	if ($remove_g && !empty($_REQUEST['remove_g']) && is_array($_REQUEST['remove_g']))	{		$remove_group_id = array_keys($_REQUEST['remove_g']);		if (isset($remove_group_id[0]))		{			unset($address_list['g'][(int) $remove_group_id[0]]);		}	}	// Add Selected Groups	$group_list = request_var('group_list', array(0));	// Build usernames to add	$usernames = request_var('username', '', true);	$usernames = (empty($usernames)) ? array() : array($usernames);	$username_list = request_var('username_list', '', true);	if ($username_list)	{		$usernames = array_merge($usernames, explode("\n", $username_list));	}	// If add to or add bcc not pressed, users could still have usernames listed they want to add...	if (!$add_to && !$add_bcc && (sizeof($group_list) || sizeof($usernames)))	{		$add_to = true;		global $refresh, $submit, $preview;		$refresh = true;		$submit = false;		// Preview is only true if there was also a message entered		if (request_var('message', ''))		{			$preview = true;		}	}	// Add User/Group [TO]	if ($add_to || $add_bcc)	{		$type = ($add_to) ? 'to' : 'bcc';		if (sizeof($group_list))		{			foreach ($group_list as $group_id)			{				$address_list['g'][$group_id] = $type;			}		}		// User ID's to add...		$user_id_ary = array();		// Reveal the correct user_ids		if (sizeof($usernames))		{			$user_id_ary = array();			user_get_id_name($user_id_ary, $usernames, array(USER_NORMAL, USER_FOUNDER, USER_INACTIVE));			// If there are users not existing, we will at least print a notice...			if (!sizeof($user_id_ary))			{				$error[] = $user->lang['PM_NO_USERS'];			}		}		// Add Friends if specified		$friend_list = (isset($_REQUEST['add_' . $type]) && is_array($_REQUEST['add_' . $type])) ? array_map('intval', array_keys($_REQUEST['add_' . $type])) : array();		$user_id_ary = array_merge($user_id_ary, $friend_list);		foreach ($user_id_ary as $user_id)		{			if ($user_id == ANONYMOUS)			{				continue;			}			$address_list['u'][$user_id] = $type;		}	}	// Check for disallowed recipients	if (!empty($address_list['u']))	{		// We need to check their PM status (do they want to receive PM's?)		// Only check if not a moderator or admin, since they are allowed to override this user setting		if (!$auth->acl_gets('a_', 'm_') && !$auth->acl_getf_global('m_'))		{			$sql = 'SELECT user_id				FROM ' . USERS_TABLE . '				WHERE ' . $db->sql_in_set('user_id', array_keys($address_list['u'])) . '					AND user_allow_pm = 0';			$result = $db->sql_query($sql);			$removed = false;			while ($row = $db->sql_fetchrow($result))			{				$removed = true;				unset($address_list['u'][$row['user_id']]);			}			$db->sql_freeresult($result);			// print a notice about users not being added who do not want to receive pms			if ($removed)			{				$error[] = $user->lang['PM_USERS_REMOVED_NO_PM'];			}		}	}}/*** Build the hidden field for the recipients. Needed, as the variable is not read via request_var.*/function build_address_field($address_list){	$s_hidden_address_field = '';	foreach ($address_list as $type => $adr_ary)	{		foreach ($adr_ary as $id => $field)		{			$s_hidden_address_field .= '<input type="hidden" name="address_list[' . (($type == 'u') ? 'u' : 'g') . '][' . (int) $id . ']" value="' . (($field == 'to') ? 'to' : 'bcc') . '" />';		}	}	return $s_hidden_address_field;}/*** Return number of private message recipients*/function num_recipients($address_list){	$num_recipients = 0;	foreach ($address_list as $field => $adr_ary)	{		$num_recipients += sizeof($adr_ary);	}	return $num_recipients;}/*** Get number of 'num_recipients' recipients from first position*/function get_recipients($address_list, $num_recipients = 1){	$recipient = array();	$count = 0;	foreach ($address_list as $field => $adr_ary)	{		foreach ($adr_ary as $id => $type)		{			if ($count >= $num_recipients)			{				break 2;			}			$recipient[$field][$id] = $type;			$count++;		}	}	return $recipient;}?>
<?php/**** @package install* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//**#@+* @ignore*/define('IN_PHPBB', true);define('IN_INSTALL', true);/**#@-*/$phpbb_root_path = (defined('PHPBB_ROOT_PATH')) ? PHPBB_ROOT_PATH : './../';$phpEx = substr(strrchr(__FILE__, '.'), 1);// @todo Review this test and see if we can find out what it is which prevents PHP 4.2.x from even displaying the page with requirements on itif (version_compare(PHP_VERSION, '4.3.3') < 0){	die('You are running an unsupported PHP version. Please upgrade to PHP 4.3.3 or higher before trying to install phpBB 3.0');}function phpbb_require_updated($path, $optional = false){	global $phpbb_root_path;	$new_path = $phpbb_root_path . 'install/update/new/' . $path;	$old_path = $phpbb_root_path . $path;	if (file_exists($new_path))	{		require($new_path);	}	else if (!$optional || file_exists($old_path))	{		require($old_path);	}}phpbb_require_updated('includes/startup.' . $phpEx);// Try to override some limits - maybe it helps some...@set_time_limit(0);$mem_limit = @ini_get('memory_limit');if (!empty($mem_limit)){	$unit = strtolower(substr($mem_limit, -1, 1));	$mem_limit = (int) $mem_limit;	if ($unit == 'k')	{		$mem_limit = floor($mem_limit / 1024);	}	else if ($unit == 'g')	{		$mem_limit *= 1024;	}	else if (is_numeric($unit))	{		$mem_limit = floor((int) ($mem_limit . $unit) / 1048576);	}	$mem_limit = max(128, $mem_limit) . 'M';}else{	$mem_limit = '128M';}@ini_set('memory_limit', $mem_limit);// Include essential scriptsrequire($phpbb_root_path . 'includes/functions.' . $phpEx);phpbb_require_updated('includes/functions_content.' . $phpEx, true);include($phpbb_root_path . 'includes/auth.' . $phpEx);include($phpbb_root_path . 'includes/session.' . $phpEx);include($phpbb_root_path . 'includes/template.' . $phpEx);include($phpbb_root_path . 'includes/acm/acm_file.' . $phpEx);include($phpbb_root_path . 'includes/cache.' . $phpEx);include($phpbb_root_path . 'includes/functions_admin.' . $phpEx);include($phpbb_root_path . 'includes/utf/utf_tools.' . $phpEx);require($phpbb_root_path . 'includes/functions_install.' . $phpEx);// Try and load an appropriate language if required$language = basename(request_var('language', ''));if (!empty($_SERVER['HTTP_ACCEPT_LANGUAGE']) && !$language){	$accept_lang_ary = explode(',', strtolower($_SERVER['HTTP_ACCEPT_LANGUAGE']));	foreach ($accept_lang_ary as $accept_lang)	{		// Set correct format ... guess full xx_yy form		$accept_lang = substr($accept_lang, 0, 2) . '_' . substr($accept_lang, 3, 2);		if (file_exists($phpbb_root_path . 'language/' . $accept_lang) && is_dir($phpbb_root_path . 'language/' . $accept_lang))		{			$language = $accept_lang;			break;		}		else		{			// No match on xx_yy so try xx			$accept_lang = substr($accept_lang, 0, 2);			if (file_exists($phpbb_root_path . 'language/' . $accept_lang) && is_dir($phpbb_root_path . 'language/' . $accept_lang))			{				$language = $accept_lang;				break;			}		}	}}// No appropriate language found ... so let's use the first one in the language// dir, this may or may not be Englishif (!$language){	$dir = @opendir($phpbb_root_path . 'language');	if (!$dir)	{		die('Unable to access the language directory');		exit;	}	while (($file = readdir($dir)) !== false)	{		$path = $phpbb_root_path . 'language/' . $file;		if (!is_file($path) && !is_link($path) && file_exists($path . '/iso.txt'))		{			$language = $file;			break;		}	}	closedir($dir);}if (!file_exists($phpbb_root_path . 'language/' . $language) || !is_dir($phpbb_root_path . 'language/' . $language)){	die('No language found!');}// And finally, load the relevant language filesinclude($phpbb_root_path . 'language/' . $language . '/common.' . $phpEx);include($phpbb_root_path . 'language/' . $language . '/acp/common.' . $phpEx);include($phpbb_root_path . 'language/' . $language . '/acp/board.' . $phpEx);include($phpbb_root_path . 'language/' . $language . '/install.' . $phpEx);include($phpbb_root_path . 'language/' . $language . '/posting.' . $phpEx);// usually we would need every single constant here - and it would be consistent. For 3.0.x, use a dirty hack... :(// Define needed constantsdefine('CHMOD_ALL', 7);define('CHMOD_READ', 4);define('CHMOD_WRITE', 2);define('CHMOD_EXECUTE', 1);$mode = request_var('mode', 'overview');$sub = request_var('sub', '');// Set PHP error handler to oursset_error_handler(defined('PHPBB_MSG_HANDLER') ? PHPBB_MSG_HANDLER : 'msg_handler');$user = new user();$auth = new auth();$cache = new cache();$template = new template();// Add own hook handler, if present. :oif (file_exists($phpbb_root_path . 'includes/hooks/index.' . $phpEx)){	require($phpbb_root_path . 'includes/hooks/index.' . $phpEx);	$phpbb_hook = new phpbb_hook(array('exit_handler', 'phpbb_user_session_handler', 'append_sid', array('template', 'display')));	foreach ($cache->obtain_hooks() as $hook)	{		@include($phpbb_root_path . 'includes/hooks/' . $hook . '.' . $phpEx);	}}else{	$phpbb_hook = false;}// Set some standard variables we want to force$config = array(	'load_tplcompile'	=> '1');$template->set_custom_template('../adm/style', 'admin');$template->assign_var('T_TEMPLATE_PATH', '../adm/style');// the acp template is never stored in the database$user->theme['template_storedb'] = false;$install = new module();$install->create('install', "index.$phpEx", $mode, $sub);$install->load();// Generate the page$install->page_header();$install->generate_navigation();$template->set_filenames(array(	'body' => $install->get_tpl_name()));$install->page_footer();/*** @package install*/class module{	var $id = 0;	var $type = 'install';	var $module_ary = array();	var $filename;	var $module_url = '';	var $tpl_name = '';	var $mode;	var $sub;	/**	* Private methods, should not be overwritten	*/	function create($module_type, $module_url, $selected_mod = false, $selected_submod = false)	{		global $db, $config, $phpEx, $phpbb_root_path;		$module = array();		// Grab module information using Bart's "neat-o-module" system (tm)		$dir = @opendir('.');		if (!$dir)		{			$this->error('Unable to access the installation directory', __LINE__, __FILE__);		}		$setmodules = 1;		while (($file = readdir($dir)) !== false)		{			if (preg_match('#^install_(.*?)\.' . $phpEx . '$#', $file))			{				include($file);			}		}		closedir($dir);		unset($setmodules);		if (!sizeof($module))		{			$this->error('No installation modules found', __LINE__, __FILE__);		}		// Order to use and count further if modules get assigned to the same position or not having an order		$max_module_order = 1000;		foreach ($module as $row)		{			// Module order not specified or module already assigned at this position?			if (!isset($row['module_order']) || isset($this->module_ary[$row['module_order']]))			{				$row['module_order'] = $max_module_order;				$max_module_order++;			}			$this->module_ary[$row['module_order']]['name'] = $row['module_title'];			$this->module_ary[$row['module_order']]['filename'] = $row['module_filename'];			$this->module_ary[$row['module_order']]['subs'] = $row['module_subs'];			$this->module_ary[$row['module_order']]['stages'] = $row['module_stages'];			if (strtolower($selected_mod) == strtolower($row['module_title']))			{				$this->id = (int) $row['module_order'];				$this->filename = (string) $row['module_filename'];				$this->module_url = (string) $module_url;				$this->mode = (string) $selected_mod;				// Check that the sub-mode specified is valid or set a default if not				if (is_array($row['module_subs']))				{					$this->sub = strtolower((in_array(strtoupper($selected_submod), $row['module_subs'])) ? $selected_submod : $row['module_subs'][0]);				}				else if (is_array($row['module_stages']))				{					$this->sub = strtolower((in_array(strtoupper($selected_submod), $row['module_stages'])) ? $selected_submod : $row['module_stages'][0]);				}				else				{					$this->sub = '';				}			}		} // END foreach	} // END create	/**	* Load and run the relevant module if applicable	*/	function load($mode = false, $run = true)	{		global $phpbb_root_path, $phpEx;		if ($run)		{			if (!empty($mode))			{				$this->mode = $mode;			}			$module = $this->filename;			if (!class_exists($module))			{				$this->error('Module "' . htmlspecialchars($module) . '" not accessible.', __LINE__, __FILE__);			}			$this->module = new $module($this);			if (method_exists($this->module, 'main'))			{				$this->module->main($this->mode, $this->sub);			}		}	}	/**	* Output the standard page header	*/	function page_header()	{		if (defined('HEADER_INC'))		{			return;		}		define('HEADER_INC', true);		global $template, $lang, $stage, $phpbb_root_path;		$template->assign_vars(array(			'L_CHANGE'				=> $lang['CHANGE'],			'L_INSTALL_PANEL'		=> $lang['INSTALL_PANEL'],			'L_SELECT_LANG'			=> $lang['SELECT_LANG'],			'L_SKIP'				=> $lang['SKIP'],			'PAGE_TITLE'			=> $this->get_page_title(),			'T_IMAGE_PATH'			=> $phpbb_root_path . 'adm/images/',			'S_CONTENT_DIRECTION' 	=> $lang['DIRECTION'],			'S_CONTENT_FLOW_BEGIN'	=> ($lang['DIRECTION'] == 'ltr') ? 'left' : 'right',			'S_CONTENT_FLOW_END'	=> ($lang['DIRECTION'] == 'ltr') ? 'right' : 'left',			'S_CONTENT_ENCODING' 	=> 'UTF-8',			'S_USER_LANG'			=> $lang['USER_LANG'],			)		);		header('Content-type: text/html; charset=UTF-8');		header('Cache-Control: private, no-cache="set-cookie"');		header('Expires: 0');		header('Pragma: no-cache');		return;	}	/**	* Output the standard page footer	*/	function page_footer()	{		global $db, $template;		$template->display('body');		// Close our DB connection.		if (!empty($db) && is_object($db))		{			$db->sql_close();		}		if (function_exists('exit_handler'))		{			exit_handler();		}	}	/**	* Returns desired template name	*/	function get_tpl_name()	{		return $this->module->tpl_name . '.html';	}	/**	* Returns the desired page title	*/	function get_page_title()	{		global $lang;		if (!isset($this->module->page_title))		{			return '';		}		return (isset($lang[$this->module->page_title])) ? $lang[$this->module->page_title] : $this->module->page_title;	}	/**	* Generate an HTTP/1.1 header to redirect the user to another page	* This is used during the installation when we do not have a database available to call the normal redirect function	* @param string $page The page to redirect to relative to the installer root path	*/	function redirect($page)	{		// HTTP_HOST is having the correct browser url in most cases...		$server_name = (!empty($_SERVER['HTTP_HOST'])) ? strtolower($_SERVER['HTTP_HOST']) : ((!empty($_SERVER['SERVER_NAME'])) ? $_SERVER['SERVER_NAME'] : getenv('SERVER_NAME'));		$server_port = (!empty($_SERVER['SERVER_PORT'])) ? (int) $_SERVER['SERVER_PORT'] : (int) getenv('SERVER_PORT');		$secure = (isset($_SERVER['HTTPS']) && $_SERVER['HTTPS'] == 'on') ? 1 : 0;		$script_name = (!empty($_SERVER['PHP_SELF'])) ? $_SERVER['PHP_SELF'] : getenv('PHP_SELF');		if (!$script_name)		{			$script_name = (!empty($_SERVER['REQUEST_URI'])) ? $_SERVER['REQUEST_URI'] : getenv('REQUEST_URI');		}		// Replace backslashes and doubled slashes (could happen on some proxy setups)		$script_name = str_replace(array('\\', '//'), '/', $script_name);		$script_path = trim(dirname($script_name));		$url = (($secure) ? 'https://' : 'http://') . $server_name;		if ($server_port && (($secure && $server_port <> 443) || (!$secure && $server_port <> 80)))		{			// HTTP HOST can carry a port number...			if (strpos($server_name, ':') === false)			{				$url .= ':' . $server_port;			}		}		$url .= $script_path . '/' . $page;		header('Location: ' . $url);		exit;	}	/**	* Generate the navigation tabs	*/	function generate_navigation()	{		global $lang, $template, $phpEx, $language;		if (is_array($this->module_ary))		{			@ksort($this->module_ary);			foreach ($this->module_ary as $cat_ary)			{				$cat = $cat_ary['name'];				$l_cat = (!empty($lang['CAT_' . $cat])) ? $lang['CAT_' . $cat] : preg_replace('#_#', ' ', $cat);				$cat = strtolower($cat);				$url = $this->module_url . "?mode=$cat&amp;language=$language";				if ($this->mode == $cat)				{					$template->assign_block_vars('t_block1', array(						'L_TITLE'		=> $l_cat,						'S_SELECTED'	=> true,						'U_TITLE'		=> $url,					));					if (is_array($this->module_ary[$this->id]['subs']))					{						$subs = $this->module_ary[$this->id]['subs'];						foreach ($subs as $option)						{							$l_option = (!empty($lang['SUB_' . $option])) ? $lang['SUB_' . $option] : preg_replace('#_#', ' ', $option);							$option = strtolower($option);							$url = $this->module_url . '?mode=' . $this->mode . "&amp;sub=$option&amp;language=$language";							$template->assign_block_vars('l_block1', array(								'L_TITLE'		=> $l_option,								'S_SELECTED'	=> ($this->sub == $option),								'U_TITLE'		=> $url,							));						}					}					if (is_array($this->module_ary[$this->id]['stages']))					{						$subs = $this->module_ary[$this->id]['stages'];						$matched = false;						foreach ($subs as $option)						{							$l_option = (!empty($lang['STAGE_' . $option])) ? $lang['STAGE_' . $option] : preg_replace('#_#', ' ', $option);							$option = strtolower($option);							$matched = ($this->sub == $option) ? true : $matched;							$template->assign_block_vars('l_block2', array(								'L_TITLE'		=> $l_option,								'S_SELECTED'	=> ($this->sub == $option),								'S_COMPLETE'	=> !$matched,							));						}					}				}				else				{					$template->assign_block_vars('t_block1', array(						'L_TITLE'		=> $l_cat,						'S_SELECTED'	=> false,						'U_TITLE'		=> $url,					));				}			}		}	}	/**	* Output an error message	* If skip is true, return and continue execution, else exit	*/	function error($error, $line, $file, $skip = false)	{		global $lang, $db, $template;		if ($skip)		{			$template->assign_block_vars('checks', array(				'S_LEGEND'	=> true,				'LEGEND'	=> $lang['INST_ERR'],			));			$template->assign_block_vars('checks', array(				'TITLE'		=> basename($file) . ' [ ' . $line . ' ]',				'RESULT'	=> '<b style="color:red">' . $error . '</b>',			));			return;		}		echo '<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">';		echo '<html xmlns="http://www.w3.org/1999/xhtml" dir="ltr">';		echo '<head>';		echo '<meta http-equiv="content-type" content="text/html; charset=utf-8" />';		echo '<title>' . $lang['INST_ERR_FATAL'] . '</title>';		echo '<link href="../adm/style/admin.css" rel="stylesheet" type="text/css" media="screen" />';		echo '</head>';		echo '<body id="errorpage">';		echo '<div id="wrap">';		echo '	<div id="page-header">';		echo '	</div>';		echo '	<div id="page-body">';		echo '		<div id="acp">';		echo '		<div class="panel">';		echo '			<span class="corners-top"><span></span></span>';		echo '			<div id="content">';		echo '				<h1>' . $lang['INST_ERR_FATAL'] . '</h1>';		echo '		<p>' . $lang['INST_ERR_FATAL'] . "</p>\n";		echo '		<p>' . basename($file) . ' [ ' . $line . " ]</p>\n";		echo '		<p><b>' . $error . "</b></p>\n";		echo '			</div>';		echo '			<span class="corners-bottom"><span></span></span>';		echo '		</div>';		echo '		</div>';		echo '	</div>';		echo '	<div id="page-footer">';		echo '		Powered by <a href="http://www.phpbb.com/">phpBB</a>&reg; Forum Software &copy; phpBB Group';		echo '	</div>';		echo '</div>';		echo '</body>';		echo '</html>';		if (!empty($db) && is_object($db))		{			$db->sql_close();		}		exit_handler();	}	/**	* Output an error message for a database related problem	* If skip is true, return and continue execution, else exit	*/	function db_error($error, $sql, $line, $file, $skip = false)	{		global $lang, $db, $template;		if ($skip)		{			$template->assign_block_vars('checks', array(				'S_LEGEND'	=> true,				'LEGEND'	=> $lang['INST_ERR_FATAL'],			));			$template->assign_block_vars('checks', array(				'TITLE'		=> basename($file) . ' [ ' . $line . ' ]',				'RESULT'	=> '<b style="color:red">' . $error . '</b><br />&#187; SQL:' . $sql,			));			return;		}		$template->set_filenames(array(			'body' => 'install_error.html')		);		$this->page_header();		$this->generate_navigation();		$template->assign_vars(array(			'MESSAGE_TITLE'		=> $lang['INST_ERR_FATAL_DB'],			'MESSAGE_TEXT'		=> '<p>' . basename($file) . ' [ ' . $line . ' ]</p><p>SQL : ' . $sql . '</p><p><b>' . $error . '</b></p>',		));		// Rollback if in transaction		if ($db->transaction)		{			$db->sql_transaction('rollback');		}		$this->page_footer();	}	/**	* Generate the relevant HTML for an input field and the associated label and explanatory text	*/	function input_field($name, $type, $value='', $options='')	{		global $lang;		$tpl_type = explode(':', $type);		$tpl = '';		switch ($tpl_type[0])		{			case 'text':			case 'password':				$size = (int) $tpl_type[1];				$maxlength = (int) $tpl_type[2];				$tpl = '<input id="' . $name . '" type="' . $tpl_type[0] . '"' . (($size) ? ' size="' . $size . '"' : '') . ' maxlength="' . (($maxlength) ? $maxlength : 255) . '" name="' . $name . '" value="' . $value . '" />';			break;			case 'textarea':				$rows = (int) $tpl_type[1];				$cols = (int) $tpl_type[2];				$tpl = '<textarea id="' . $name . '" name="' . $name . '" rows="' . $rows . '" cols="' . $cols . '">' . $value . '</textarea>';			break;			case 'radio':				$key_yes	= ($value) ? ' checked="checked" id="' . $name . '"' : '';				$key_no		= (!$value) ? ' checked="checked" id="' . $name . '"' : '';				$tpl_type_cond = explode('_', $tpl_type[1]);				$type_no = ($tpl_type_cond[0] == 'disabled' || $tpl_type_cond[0] == 'enabled') ? false : true;				$tpl_no = '<label><input type="radio" name="' . $name . '" value="0"' . $key_no . ' class="radio" /> ' . (($type_no) ? $lang['NO'] : $lang['DISABLED']) . '</label>';				$tpl_yes = '<label><input type="radio" name="' . $name . '" value="1"' . $key_yes . ' class="radio" /> ' . (($type_no) ? $lang['YES'] : $lang['ENABLED']) . '</label>';				$tpl = ($tpl_type_cond[0] == 'yes' || $tpl_type_cond[0] == 'enabled') ? $tpl_yes . '&nbsp;&nbsp;' . $tpl_no : $tpl_no . '&nbsp;&nbsp;' . $tpl_yes;			break;			case 'select':				eval('$s_options = ' . str_replace('{VALUE}', $value, $options) . ';');				$tpl = '<select id="' . $name . '" name="' . $name . '">' . $s_options . '</select>';			break;			case 'custom':				eval('$tpl = ' . str_replace('{VALUE}', $value, $options) . ';');			break;			default:			break;		}		return $tpl;	}	/**	* Generate the drop down of available language packs	*/	function inst_language_select($default = '')	{		global $phpbb_root_path, $phpEx;		$dir = @opendir($phpbb_root_path . 'language');		if (!$dir)		{			$this->error('Unable to access the language directory', __LINE__, __FILE__);		}		while ($file = readdir($dir))		{			$path = $phpbb_root_path . 'language/' . $file;			if ($file == '.' || $file == '..' || is_link($path) || is_file($path) || $file == 'CVS')			{				continue;			}			if (file_exists($path . '/iso.txt'))			{				list($displayname, $localname) = @file($path . '/iso.txt');				$lang[$localname] = $file;			}		}		closedir($dir);		@asort($lang);		@reset($lang);		$user_select = '';		foreach ($lang as $displayname => $filename)		{			$selected = (strtolower($default) == strtolower($filename)) ? ' selected="selected"' : '';			$user_select .= '<option value="' . $filename . '"' . $selected . '>' . ucwords($displayname) . '</option>';		}		return $user_select;	}}?>
<?php//// This file provides some useful functions for debugging the unicode/UTF-8 library// It requires utf_tools.php to be loaded//die("Please read the first lines of this script for instructions on how to enable it");if (!headers_sent()){	header('Content-type: text/html; charset=UTF-8');}/** * Converts unicode escape sequences (\u0123) into UTF-8 characters * * @param	string	A unicode sequence * @return	string	UTF-8 representation of the given unicode sequence */function unicode_to_utf8($string){	$utf8 = '';	$chars = array();	for ($i = 0; $i < strlen($string); $i++)	{		if (isset($string[$i + 5]) && substr($string, $i, 2) == '\\u' && ctype_xdigit(substr($string, $i + 2, 4)))		{			$utf8 .= utf8_from_unicode(array(base_convert(substr($string, $i + 2, 4), 16, 10)));			$i += 5;		}		else		{			$utf8 .= $string[$i];		}	}	return $utf8;}/** * Takes an array of ints representing the Unicode characters and returns * a UTF-8 string. * * @param array $array array of unicode code points representing a string * @return string UTF-8 character string */function utf8_from_unicode($array){	$str = '';	foreach ($array as $value)	{		$str .= utf8_chr($value);	}	return $str;}/*** Converts a UTF-8 string to unicode code points** @param	string	$text		UTF-8 string* @return	string				Unicode code points*/function utf8_to_unicode($text){	return preg_replace_callback(		'#[\\xC2-\\xF4][\\x80-\\xBF]?[\\x80-\\xBF]?[\\x80-\\xBF]#',		'utf8_to_unicode_callback',		preg_replace_callback(			'#[\\x00-\\x7f]#',			'utf8_to_unicode_callback',			$text		)	);}/*** Takes a UTF-8 char and replaces it with its unicode escape sequence. Attention, $m is an array** @param	array	$m			0-based numerically indexed array passed by preg_replace_callback()* @return	string				A unicode escape sequence*/function utf8_to_unicode_callback($m){	return '\u' . str_pad(base_convert(utf8_ord($m[0]), 10, 16), 4, '0', STR_PAD_LEFT) . '';}/*** A wrapper function for the normalizer which takes care of including the class if required and modifies the passed strings* to be in NFKC** @param	mixed	$strings	a string or an array of strings to normalize* @return	mixed				the normalized content, preserving array keys if array given.*/function utf8_normalize_nfkc($strings){	if (empty($strings))	{		return $strings;	}	if (!class_exists('utf_normalizer'))	{		global $phpbb_root_path, $phpEx;		include($phpbb_root_path . 'includes/utf/utf_normalizer.' . $phpEx);	}	if (!is_array($strings))	{		utf_normalizer::nfkc($strings);	}	else if (is_array($strings))	{		foreach ($strings as $key => $string)		{			utf_normalizer::nfkc($strings[$key]);		}	}	return $strings;}?>
<?php return array(''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'');
<?php/**** @package acm* @version $Id$* @copyright (c) 2005, 2009 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @ignore*/if (!defined('IN_PHPBB')){	exit;}// Include the abstract baseif (!class_exists('acm_memory')){	require("{$phpbb_root_path}includes/acm/acm_memory.$phpEx");}if (!defined('PHPBB_ACM_MEMCACHE_PORT')){	define('PHPBB_ACM_MEMCACHE_PORT', 11211);}if (!defined('PHPBB_ACM_MEMCACHE_COMPRESS')){	define('PHPBB_ACM_MEMCACHE_COMPRESS', false);}if (!defined('PHPBB_ACM_MEMCACHE_HOST')){	define('PHPBB_ACM_MEMCACHE_HOST', 'localhost');}if (!defined('PHPBB_ACM_MEMCACHE')){	//can define multiple servers with host1/port1,host2/port2 format	define('PHPBB_ACM_MEMCACHE', PHPBB_ACM_MEMCACHE_HOST . '/' . PHPBB_ACM_MEMCACHE_PORT);}/*** ACM for Memcached* @package acm*/class acm extends acm_memory{	var $extension = 'memcache';	var $memcache;	var $flags = 0;	function acm()	{		// Call the parent constructor		parent::acm_memory();		$this->memcache = new Memcache;		foreach(explode(',', PHPBB_ACM_MEMCACHE) as $u)		{			$parts = explode('/', $u);			$this->memcache->addServer(trim($parts[0]), trim($parts[1]));		}		$this->flags = (PHPBB_ACM_MEMCACHE_COMPRESS) ? MEMCACHE_COMPRESSED : 0;	}	/**	* Unload the cache resources	*	* @return void	*/	function unload()	{		parent::unload();		$this->memcache->close();	}	/**	* Purge cache data	*	* @return void	*/	function purge()	{		$this->memcache->flush();		parent::purge();	}	/**	* Fetch an item from the cache	*	* @access protected	* @param string $var Cache key	* @return mixed Cached data	*/	function _read($var)	{		return $this->memcache->get($this->key_prefix . $var);	}	/**	* Store data in the cache	*	* @access protected	* @param string $var Cache key	* @param mixed $data Data to store	* @param int $ttl Time-to-live of cached data	* @return bool True if the operation succeeded	*/	function _write($var, $data, $ttl = 2592000)	{		if (!$this->memcache->replace($this->key_prefix . $var, $data, $this->flags, $ttl))		{			return $this->memcache->set($this->key_prefix . $var, $data, $this->flags, $ttl);		}		return true;	}	/**	* Remove an item from the cache	*	* @access protected	* @param string $var Cache key	* @return bool True if the operation succeeded	*/	function _delete($var)	{		return $this->memcache->delete($this->key_prefix . $var);	}}?>
<?php return array(''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'1/2',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'');
<?php return array(''=>'');
<?php/**** acp_board [English]** @package language* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** DO NOT CHANGE*/if (!defined('IN_PHPBB')){	exit;}if (empty($lang) || !is_array($lang)){	$lang = array();}// DEVELOPERS PLEASE NOTE//// All language files should use UTF-8 as their encoding and the files must not contain a BOM.//// Placeholders can now contain order information, e.g. instead of// 'Page %s of %s' you can (and should) write 'Page %1$s of %2$s', this allows// translators to re-order the output of data while ensuring it remains correct//// You do not need this where single placeholders are used, e.g. 'Message %d' is fine// equally where a string contains only two placeholders which are used to wrap text// in a url you again do not need to specify an order e.g., 'Click %sHERE%s' is fine// Board Settings$lang = array_merge($lang, array(	'ACP_BOARD_SETTINGS_EXPLAIN'	=> 'Here you can determine the basic operation of your board, give it a fitting name and description, and among other settings adjust the default values for timezone and language.',	'CUSTOM_DATEFORMAT'				=> 'Custom',	'DEFAULT_DATE_FORMAT'			=> 'Date format',	'DEFAULT_DATE_FORMAT_EXPLAIN'	=> 'The date format is the same as the PHP <code>date</code> function.',	'DEFAULT_LANGUAGE'				=> 'Default language',	'DEFAULT_STYLE'					=> 'Default style',	'DISABLE_BOARD'					=> 'Disable board',	'DISABLE_BOARD_EXPLAIN'			=> 'This will make the board unavailable to users. You can also enter a short (255 character) message to display if you wish.',	'OVERRIDE_STYLE'				=> 'Override user style',	'OVERRIDE_STYLE_EXPLAIN'		=> 'Replaces users style with the default.',	'SITE_DESC'						=> 'Site description',	'SITE_NAME'						=> 'Site name',	'SYSTEM_DST'					=> 'Enable Summer Time/<abbr title="Daylight Saving Time">DST</abbr>',	'SYSTEM_TIMEZONE'				=> 'Guest timezone',	'SYSTEM_TIMEZONE_EXPLAIN'			=> 'Timezone to use for displaying times to users who are not logged in (guests, bots). Logged in users set their timezone during registration and can change it in their user control panel.',	'WARNINGS_EXPIRE'				=> 'Warning duration',	'WARNINGS_EXPIRE_EXPLAIN'		=> 'Number of days that will elapse before the warning will automatically expire from a users record. Set this value to 0 to make warnings permanent.',));// Board Features$lang = array_merge($lang, array(	'ACP_BOARD_FEATURES_EXPLAIN'	=> 'Here you can enable/disable several board features.',	'ALLOW_ATTACHMENTS'			=> 'Allow attachments',	'ALLOW_BIRTHDAYS'			=> 'Allow birthdays',	'ALLOW_BIRTHDAYS_EXPLAIN'	=> 'Allow birthdays to be entered and age being displayed in profiles. Please note the birthday list within the board index is controlled by a separate load setting.',	'ALLOW_BOOKMARKS'			=> 'Allow bookmarking topics',	'ALLOW_BOOKMARKS_EXPLAIN'	=> 'User is able to store personal bookmarks.',	'ALLOW_BBCODE'				=> 'Allow BBCode',	'ALLOW_FORUM_NOTIFY'		=> 'Allow subscribing to forums',	'ALLOW_NAME_CHANGE'			=> 'Allow username changes',	'ALLOW_NO_CENSORS'			=> 'Allow disabling of word censoring',	'ALLOW_NO_CENSORS_EXPLAIN'	=> 'Users can choose to disable the automatic word censoring of posts and private messages.',	'ALLOW_PM_ATTACHMENTS'		=> 'Allow attachments in private messages',	'ALLOW_PM_REPORT'			=> 'Allow users to report private messages',	'ALLOW_PM_REPORT_EXPLAIN'	=> 'If this setting is enabled, users have the option of reporting a private message they have received or sent to the boards moderators. These private messages will then be visible in the Moderator Control Panel.',	'ALLOW_QUICK_REPLY'			=> 'Allow quick reply',	'ALLOW_QUICK_REPLY_EXPLAIN'	=> 'This switch allows for the quick reply to be disabled board-wide. When enabled, forum specific settings will be used to determine whether the quick reply is displayed in individual forums.',	'ALLOW_QUICK_REPLY_BUTTON'	=> 'Submit and enable quick reply in all forums',	'ALLOW_SIG'					=> 'Allow signatures',	'ALLOW_SIG_BBCODE'			=> 'Allow BBCode in user signatures',	'ALLOW_SIG_FLASH'			=> 'Allow use of <code>[FLASH]</code> BBCode tag in user signatures',	'ALLOW_SIG_IMG'				=> 'Allow use of <code>[IMG]</code> BBCode tag in user signatures',	'ALLOW_SIG_LINKS'			=> 'Allow use of links in user signatures',	'ALLOW_SIG_LINKS_EXPLAIN'	=> 'If disallowed the <code>[URL]</code> BBCode tag and automatic/magic URLs are disabled.',	'ALLOW_SIG_SMILIES'			=> 'Allow use of smilies in user signatures',	'ALLOW_SMILIES'				=> 'Allow smilies',	'ALLOW_TOPIC_NOTIFY'		=> 'Allow subscribing to topics',	'BOARD_PM'					=> 'Private messaging',	'BOARD_PM_EXPLAIN'			=> 'Enable private messaging for all users.',));// Avatar Settings$lang = array_merge($lang, array(	'ACP_AVATAR_SETTINGS_EXPLAIN'	=> 'Avatars are generally small, unique images a user can associate with themselves. Depending on the style they are usually displayed below the username when viewing topics. Here you can determine how users can define their avatars. Please note that in order to upload avatars you need to have created the directory you name below and ensure it can be written to by the web server. Please also note that file size limits are only imposed on uploaded avatars, they do not apply to remotely linked images.',	'ALLOW_AVATARS'					=> 'Enable avatars',	'ALLOW_AVATARS_EXPLAIN'			=> 'Allow general usage of avatars;<br />If you disable avatars in general or avatars of a certain mode, the disabled avatars will no longer be shown on the board, but users will still be able to download their own avatars in the User Control Panel.',	'ALLOW_LOCAL'					=> 'Enable gallery avatars',	'ALLOW_REMOTE'					=> 'Enable remote avatars',	'ALLOW_REMOTE_EXPLAIN'			=> 'Avatars linked to from another website.',	'ALLOW_REMOTE_UPLOAD'			=> 'Enable remote avatar uploading',	'ALLOW_REMOTE_UPLOAD_EXPLAIN'	=> 'Allow uploading of avatars from another website.',	'ALLOW_UPLOAD'					=> 'Enable avatar uploading',	'AVATAR_GALLERY_PATH'			=> 'Avatar gallery path',	'AVATAR_GALLERY_PATH_EXPLAIN'	=> 'Path under your phpBB root directory for pre-loaded images, e.g. <samp>images/avatars/gallery</samp>.',	'AVATAR_STORAGE_PATH'			=> 'Avatar storage path',	'AVATAR_STORAGE_PATH_EXPLAIN'	=> 'Path under your phpBB root directory, e.g. <samp>images/avatars/upload</samp>.',	'MAX_AVATAR_SIZE'				=> 'Maximum avatar dimensions',	'MAX_AVATAR_SIZE_EXPLAIN'		=> 'Width x Height in pixels.',	'MAX_FILESIZE'					=> 'Maximum avatar file size',	'MAX_FILESIZE_EXPLAIN'			=> 'For uploaded avatar files.',	'MIN_AVATAR_SIZE'				=> 'Minimum avatar dimensions',	'MIN_AVATAR_SIZE_EXPLAIN'		=> 'Width x Height in pixels.',));// Message Settings$lang = array_merge($lang, array(	'ACP_MESSAGE_SETTINGS_EXPLAIN'		=> 'Here you can set all default settings for private messaging.',	'ALLOW_BBCODE_PM'			=> 'Allow BBCode in private messages',	'ALLOW_FLASH_PM'			=> 'Allow use of <code>[FLASH]</code> BBCode tag',	'ALLOW_FLASH_PM_EXPLAIN'	=> 'Note that the ability to use flash in private messages, if enabled here, also depends on the permissions.',	'ALLOW_FORWARD_PM'			=> 'Allow forwarding of private messages',	'ALLOW_IMG_PM'				=> 'Allow use of <code>[IMG]</code> BBCode tag',	'ALLOW_MASS_PM'				=> 'Allow sending of private messages to multiple users and groups',	'ALLOW_MASS_PM_EXPLAIN'		=> 'Sending to groups can be adjusted per group within the group settings page.',	'ALLOW_PRINT_PM'			=> 'Allow print view in private messaging',	'ALLOW_QUOTE_PM'			=> 'Allow quotes in private messages',	'ALLOW_SIG_PM'				=> 'Allow signature in private messages',	'ALLOW_SMILIES_PM'			=> 'Allow smilies in private messages',	'BOXES_LIMIT'				=> 'Maximum private messages per box',	'BOXES_LIMIT_EXPLAIN'		=> 'Users may receive no more than this many messages in each of their private message boxes. Set this value to 0 to allow unlimited messages.',	'BOXES_MAX'					=> 'Maximum private message folders',	'BOXES_MAX_EXPLAIN'			=> 'By default users may create this many personal folders for private messages.',	'ENABLE_PM_ICONS'			=> 'Enable use of topic icons in private messages',	'FULL_FOLDER_ACTION'		=> 'Full folder default action',	'FULL_FOLDER_ACTION_EXPLAIN'=> 'Default action to take if a users folder is full assuming the users folder action, if set at all, is not applicable. The only exception is for the Sent messages folder where the default action is always to delete old messages.',	'HOLD_NEW_MESSAGES'			=> 'Hold new messages',	'PM_EDIT_TIME'				=> 'Limit editing time',	'PM_EDIT_TIME_EXPLAIN'		=> 'Limits the time available to edit a private message not already delivered. Setting the value to 0 disables this behaviour.',	'PM_MAX_RECIPIENTS'			=> 'Maximum number of allowed recipients',	'PM_MAX_RECIPIENTS_EXPLAIN'	=> 'The maximum number of allowed recipients in a private message. If 0 is entered, an unlimited number is allowed. This setting can be adjusted for every group within the group settings page.',));// Post Settings$lang = array_merge($lang, array(	'ACP_POST_SETTINGS_EXPLAIN'			=> 'Here you can set all default settings for posting.',	'ALLOW_POST_LINKS'					=> 'Allow links in posts/private messages',	'ALLOW_POST_LINKS_EXPLAIN'			=> 'If disallowed the <code>[URL]</code> BBCode tag and automatic/magic URLs are disabled.',	'ALLOW_POST_FLASH'					=> 'Allow use of <code>[FLASH]</code> BBCode tag in posts',	'ALLOW_POST_FLASH_EXPLAIN'			=> 'If disallowed the <code>[FLASH]</code> BBCode tag is disabled in posts. Otherwise the permission system controls which users can use the <code>[FLASH]</code> BBCode tag.',	'BUMP_INTERVAL'					=> 'Bump interval',	'BUMP_INTERVAL_EXPLAIN'			=> 'Number of minutes, hours or days between the last post to a topic and the ability to bump that topic. Setting the value to 0 disables bumping entirely.',	'CHAR_LIMIT'					=> 'Maximum characters per post/message',	'CHAR_LIMIT_EXPLAIN'			=> 'The number of characters allowed within a post/private message. Set to 0 for unlimited characters.',	'DELETE_TIME'					=> 'Limit deleting time',	'DELETE_TIME_EXPLAIN'			=> 'Limits the time available to delete a new post. Setting the value to 0 disables this behaviour.',	'DISPLAY_LAST_EDITED'			=> 'Display last edited time information',	'DISPLAY_LAST_EDITED_EXPLAIN'	=> 'Choose if the last edited by information to be displayed on posts.',	'EDIT_TIME'						=> 'Limit editing time',	'EDIT_TIME_EXPLAIN'				=> 'Limits the time available to edit a new post. Setting the value to 0 disables this behaviour.',	'FLOOD_INTERVAL'				=> 'Flood interval',	'FLOOD_INTERVAL_EXPLAIN'		=> 'Number of seconds a user must wait between posting new messages. To enable users to ignore this alter their permissions.',	'HOT_THRESHOLD'					=> 'Popular topic threshold',	'HOT_THRESHOLD_EXPLAIN'			=> 'Posts per topic threshold required for the popular topic annotation. Set to 0 to disable popular topics.',	'MAX_POLL_OPTIONS'				=> 'Maximum number of poll options',	'MAX_POST_FONT_SIZE'			=> 'Maximum font size per post',	'MAX_POST_FONT_SIZE_EXPLAIN'	=> 'Maximum font size allowed in a post. Set to 0 for unlimited font size.',	'MAX_POST_IMG_HEIGHT'			=> 'Maximum image height per post',	'MAX_POST_IMG_HEIGHT_EXPLAIN'	=> 'Maximum height of an image/flash file in postings. Set to 0 for unlimited size.',	'MAX_POST_IMG_WIDTH'			=> 'Maximum image width per post',	'MAX_POST_IMG_WIDTH_EXPLAIN'	=> 'Maximum width of an image/flash file in postings. Set to 0 for unlimited size.',	'MAX_POST_URLS'					=> 'Maximum links per post',	'MAX_POST_URLS_EXPLAIN'			=> 'Maximum number of URLs in a post. Set to 0 for unlimited links.',	'MIN_CHAR_LIMIT'				=> 'Minimum characters per post/message',	'MIN_CHAR_LIMIT_EXPLAIN'		=> 'The minimum number of characters the user need to enter within a post/private message. The minimum for this setting is 1.',	'POSTING'						=> 'Posting',	'POSTS_PER_PAGE'				=> 'Posts per page',	'QUOTE_DEPTH_LIMIT'				=> 'Maximum nesting depth for quotes',	'QUOTE_DEPTH_LIMIT_EXPLAIN'		=> 'Maximum quote nesting depth in a post. Set to 0 for unlimited depth.',	'SMILIES_LIMIT'					=> 'Maximum smilies per post',	'SMILIES_LIMIT_EXPLAIN'			=> 'Maximum number of smilies in a post. Set to 0 for unlimited smilies.',	'SMILIES_PER_PAGE'				=> 'Smilies per page',	'TOPICS_PER_PAGE'				=> 'Topics per page',));// Signature Settings$lang = array_merge($lang, array(	'ACP_SIGNATURE_SETTINGS_EXPLAIN'	=> 'Here you can set all default settings for signatures.',	'MAX_SIG_FONT_SIZE'				=> 'Maximum signature font size',	'MAX_SIG_FONT_SIZE_EXPLAIN'		=> 'Maximum font size allowed in user signatures. Set to 0 for unlimited size.',	'MAX_SIG_IMG_HEIGHT'			=> 'Maximum signature image height',	'MAX_SIG_IMG_HEIGHT_EXPLAIN'	=> 'Maximum height of an image/flash file in user signatures. Set to 0 for unlimited height.',	'MAX_SIG_IMG_WIDTH'				=> 'Maximum signature image width',	'MAX_SIG_IMG_WIDTH_EXPLAIN'		=> 'Maximum width of an image/flash file in user signatures. Set to 0 for unlimited width.',	'MAX_SIG_LENGTH'				=> 'Maximum signature length',	'MAX_SIG_LENGTH_EXPLAIN'		=> 'Maximum number of characters in user signatures.',	'MAX_SIG_SMILIES'				=> 'Maximum smilies per signature',	'MAX_SIG_SMILIES_EXPLAIN'		=> 'Maximum smilies allowed in user signatures. Set to 0 for unlimited smilies.',	'MAX_SIG_URLS'					=> 'Maximum signature links',	'MAX_SIG_URLS_EXPLAIN'			=> 'Maximum number of links in user signatures. Set to 0 for unlimited links.',));// Registration Settings$lang = array_merge($lang, array(	'ACP_REGISTER_SETTINGS_EXPLAIN'		=> 'Here you are able to define registration and profile related settings.',	'ACC_ACTIVATION'				=> 'Account activation',	'ACC_ACTIVATION_EXPLAIN'		=> 'This determines whether users have immediate access to the board or if confirmation is required. You can also completely disable new registrations. Board-wide e-mail must be enabled in order to use user or admin activation.',	'NEW_MEMBER_POST_LIMIT'			=> 'New member post limit',	'NEW_MEMBER_POST_LIMIT_EXPLAIN'	=> 'New members are within the <em>Newly Registered Users</em> group until they reach this number of posts. You can use this group to keep them from using the PM system or to review their posts. <strong>A value of 0 disables this feature.</strong>',	'NEW_MEMBER_GROUP_DEFAULT'		=> 'Set Newly Registered Users group to default',	'NEW_MEMBER_GROUP_DEFAULT_EXPLAIN'	=> 'If set to yes, and a new member post limit is specified, newly registered users will not only be put into the <em>Newly Registered Users</em> group, but this group will also be their default one. This may come in handy if you want to assign a group default rank and/or avatar the user then inherits.',	'ACC_ADMIN'					=> 'By admin',	'ACC_DISABLE'				=> 'Disable registration',	'ACC_NONE'					=> 'No activation (immediate access)',	'ACC_USER'					=> 'By user (e-mail verification)',//	'ACC_USER_ADMIN'			=> 'User + Admin',	'ALLOW_EMAIL_REUSE'			=> 'Allow e-mail address re-use',	'ALLOW_EMAIL_REUSE_EXPLAIN'	=> 'Different users can register with the same e-mail address.',	'COPPA'						=> 'COPPA',	'COPPA_FAX'					=> 'COPPA fax number',	'COPPA_MAIL'				=> 'COPPA mailing address',	'COPPA_MAIL_EXPLAIN'		=> 'This is the mailing address where parents will send COPPA registration forms.',	'ENABLE_COPPA'				=> 'Enable COPPA',	'ENABLE_COPPA_EXPLAIN'		=> 'This requires users to declare whether they are 13 or over for compliance with the U.S. COPPA. If this is disabled the COPPA specific groups will no longer be displayed.',	'MAX_CHARS'					=> 'Max',	'MIN_CHARS'					=> 'Min',	'NO_AUTH_PLUGIN'			=> 'No suitable auth plugin found.',	'PASSWORD_LENGTH'			=> 'Password length',	'PASSWORD_LENGTH_EXPLAIN'	=> 'Minimum and maximum number of characters in passwords.',	'REG_LIMIT'					=> 'Registration attempts',	'REG_LIMIT_EXPLAIN'			=> 'Number of attempts users can make at solving the anti-spambot task before being locked out of that session.',	'USERNAME_ALPHA_ONLY'		=> 'Alphanumeric only',	'USERNAME_ALPHA_SPACERS'	=> 'Alphanumeric and spacers',	'USERNAME_ASCII'			=> 'ASCII (no international unicode)',	'USERNAME_LETTER_NUM'		=> 'Any letter and number',	'USERNAME_LETTER_NUM_SPACERS'	=> 'Any letter, number, and spacer',	'USERNAME_CHARS'			=> 'Limit username chars',	'USERNAME_CHARS_ANY'		=> 'Any character',	'USERNAME_CHARS_EXPLAIN'	=> 'Restrict type of characters that may be used in usernames, spacers are: space, -, +, _, [ and ].',	'USERNAME_LENGTH'			=> 'Username length',	'USERNAME_LENGTH_EXPLAIN'	=> 'Minimum and maximum number of characters in usernames.',));// Feeds$lang = array_merge($lang, array(	'ACP_FEED_MANAGEMENT'				=> 'General syndication feeds settings',	'ACP_FEED_MANAGEMENT_EXPLAIN'		=> 'This module makes available various ATOM feeds, parsing any BBCode in posts to make them readable in external feeds.',	'ACP_FEED_GENERAL'					=> 'General feed settings',	'ACP_FEED_POST_BASED'				=> 'Post-based feed settings',	'ACP_FEED_TOPIC_BASED'				=> 'Topic-based feed settings',	'ACP_FEED_SETTINGS_OTHER'			=> 'Other feeds and settings',	'ACP_FEED_ENABLE'					=> 'Enable feeds',	'ACP_FEED_ENABLE_EXPLAIN'			=> 'Turns on or off ATOM feeds for the entire board.<br />Disabling this switches off all feeds, no matter how the options below are set.',	'ACP_FEED_LIMIT'					=> 'Number of items',	'ACP_FEED_LIMIT_EXPLAIN'			=> 'The maximum number of feed items to display.',	'ACP_FEED_OVERALL'					=> 'Enable board-wide feed',	'ACP_FEED_OVERALL_EXPLAIN'			=> 'Board-wide new posts.',	'ACP_FEED_FORUM'					=> 'Enable per-forum feeds',	'ACP_FEED_FORUM_EXPLAIN'			=> 'Single forum and subforums new posts.',	'ACP_FEED_TOPIC'					=> 'Enable per-topic feeds',	'ACP_FEED_TOPIC_EXPLAIN'			=> 'Single topics new posts.',	'ACP_FEED_TOPICS_NEW'				=> 'Enable new topics feed',	'ACP_FEED_TOPICS_NEW_EXPLAIN'		=> 'Enables the New Topics feed, which displays the last created topics including the first post.',	'ACP_FEED_TOPICS_ACTIVE'			=> 'Enable active topics feed',	'ACP_FEED_TOPICS_ACTIVE_EXPLAIN'	=> 'Enables the Active Topics feed, which displays the last active topics including the last post.',	'ACP_FEED_NEWS'						=> 'News feed',	'ACP_FEED_NEWS_EXPLAIN'				=> 'Pull the first post from these forums. Select no forums to disable news feed.<br />Select multiple forums by holding <samp>CTRL</samp> and clicking.',	'ACP_FEED_OVERALL_FORUMS'			=> 'Enable forums feed',	'ACP_FEED_OVERALL_FORUMS_EXPLAIN'	=> 'Enables the All forums feed, which displays a list of forums.',	'ACP_FEED_HTTP_AUTH'				=> 'Allow HTTP Authentication',	'ACP_FEED_HTTP_AUTH_EXPLAIN'		=> 'Enables HTTP authentication, which allows users to receive content that is hidden to guest users by adding the <samp>auth=http</samp> parameter to the feed URL. Please note that some PHP setups require additional changes to the .htaccess file. Instructions can be found in that file.',	'ACP_FEED_ITEM_STATISTICS'			=> 'Item statistics',	'ACP_FEED_ITEM_STATISTICS_EXPLAIN'	=> 'Display individual statistics underneath feed items<br />(e.g. posted by, date and time, replies, views)',	'ACP_FEED_EXCLUDE_ID'				=> 'Exclude these forums',	'ACP_FEED_EXCLUDE_ID_EXPLAIN'		=> 'Content from these will be <strong>not included in feeds</strong>. Select no forum to pull data from all forums.<br />Select/Deselect multiple forums by holding <samp>CTRL</samp> and clicking.',));// Visual Confirmation Settings$lang = array_merge($lang, array(	'ACP_VC_SETTINGS_EXPLAIN'				=> 'Here you can select and configure plugins, which are designed to block automated form submissions by spambots. These plugins typically work by challenging the user with a <em>CAPTCHA</em>, a test which is designed to be difficult for computers to solve.',	'AVAILABLE_CAPTCHAS'					=> 'Available plugins',	'CAPTCHA_UNAVAILABLE'					=> 'The plugin cannot be selected as its requirements are not met.',	'CAPTCHA_GD'							=> 'GD image',	'CAPTCHA_GD_3D'							=> 'GD 3D image',	'CAPTCHA_GD_FOREGROUND_NOISE'			=> 'Foreground noise',	'CAPTCHA_GD_EXPLAIN'					=> 'Uses GD to make a more advanced anti-spambot image.',	'CAPTCHA_GD_FOREGROUND_NOISE_EXPLAIN'	=> 'Use foreground noise to make the image harder to read.',	'CAPTCHA_GD_X_GRID'						=> 'Background noise x-axis',	'CAPTCHA_GD_X_GRID_EXPLAIN'				=> 'Use lower settings of this to make the image harder to read. 0 will disable x-axis background noise.',	'CAPTCHA_GD_Y_GRID'						=> 'Background noise y-axis',	'CAPTCHA_GD_Y_GRID_EXPLAIN'				=> 'Use lower settings of this to make the image harder to read. 0 will disable y-axis background noise.',	'CAPTCHA_GD_WAVE'						=> 'Wave distortion',	'CAPTCHA_GD_WAVE_EXPLAIN'				=> 'This applies a wave distortion to the image.',	'CAPTCHA_GD_3D_NOISE'					=> 'Add 3D-noise objects',	'CAPTCHA_GD_3D_NOISE_EXPLAIN'			=> 'This adds additional objects to the image, over the letters.',	'CAPTCHA_GD_FONTS'						=> 'Use different fonts',	'CAPTCHA_GD_FONTS_EXPLAIN'				=> 'This setting controls how many different letter shapes are used. You can just use the default shapes or introduce altered letters. Adding lowercase letters is also possible.',	'CAPTCHA_FONT_DEFAULT'					=> 'Default',	'CAPTCHA_FONT_NEW'						=> 'New Shapes',	'CAPTCHA_FONT_LOWER'					=> 'Also use lowercase',	'CAPTCHA_NO_GD'							=> 'Simple image',	'CAPTCHA_PREVIEW_MSG'					=> 'Your changes have not been saved, this is just a preview.',	'CAPTCHA_PREVIEW_EXPLAIN'				=> 'The plugin as it would look like using the current selection.',	'CAPTCHA_SELECT'						=> 'Installed plugins',	'CAPTCHA_SELECT_EXPLAIN'				=> 'The dropdown holds the plugins recognised by the board. Grey entries are not available right now and might need configuration prior to use.',	'CAPTCHA_CONFIGURE'						=> 'Configure plugins',	'CAPTCHA_CONFIGURE_EXPLAIN'				=> 'Change the settings for the selected plugin.',	'CONFIGURE'								=> 'Configure',	'CAPTCHA_NO_OPTIONS'					=> 'This plugin has no configuration options.',	'VISUAL_CONFIRM_POST'					=> 'Enable spambot countermeasures for guest postings',	'VISUAL_CONFIRM_POST_EXPLAIN'			=> 'Requires guest users to pass the anti-spambot task to help prevent automated postings.',	'VISUAL_CONFIRM_REG'					=> 'Enable spambot countermeasures for registrations',	'VISUAL_CONFIRM_REG_EXPLAIN'			=> 'Requires new users to pass the anti-spambot task to help prevent automated registrations.',	'VISUAL_CONFIRM_REFRESH'				=> 'Allow users to refresh the anti-spambot task',	'VISUAL_CONFIRM_REFRESH_EXPLAIN'		=> 'Allows users to request a new anti-spambot task if they are unable to solve the current task during registration. Some plugins might not support this option.',));// Cookie Settings$lang = array_merge($lang, array(	'ACP_COOKIE_SETTINGS_EXPLAIN'		=> 'These details define the data used to send cookies to your users browsers. In most cases the default values for the cookie settings should be sufficient. If you do need to change any do so with care, incorrect settings can prevent users logging in.',	'COOKIE_DOMAIN'				=> 'Cookie domain',	'COOKIE_NAME'				=> 'Cookie name',	'COOKIE_PATH'				=> 'Cookie path',	'COOKIE_SECURE'				=> 'Cookie secure',	'COOKIE_SECURE_EXPLAIN'		=> 'If your server is running via SSL set this to enabled else leave as disabled. Having this enabled and not running via SSL will result in server errors during redirects.',	'ONLINE_LENGTH'				=> 'View online time span',	'ONLINE_LENGTH_EXPLAIN'		=> 'Number of minutes after which inactive users will not appear in Who is online listings. The higher this value the greater is the processing required to generate the listing.',	'SESSION_LENGTH'			=> 'Session length',	'SESSION_LENGTH_EXPLAIN'	=> 'Sessions will expire after this time, in seconds.',));// Load Settings$lang = array_merge($lang, array(	'ACP_LOAD_SETTINGS_EXPLAIN'	=> 'Here you can enable and disable certain board functions to reduce the amount of processing required. On most servers there is no need to disable any functions. However on certain systems or in shared hosting environments it may be beneficial to disable capabilities you do not really need. You can also specify limits for system load and active sessions beyond which the board will go offline.',	'CUSTOM_PROFILE_FIELDS'			=> 'Custom profile fields',	'LIMIT_LOAD'					=> 'Limit system load',	'LIMIT_LOAD_EXPLAIN'			=> 'If the systems 1-minute load average exceeds this value the board will automatically go offline. A value of 1.0 equals ~100% utilisation of one processor. This only functions on UNIX based servers and where this information is accessible. The value here resets itself to 0 if phpBB was unable to get the load limit.',	'LIMIT_SESSIONS'				=> 'Limit sessions',	'LIMIT_SESSIONS_EXPLAIN'		=> 'If the number of sessions exceeds this value within a one minute period the board will go offline. Set to 0 for unlimited sessions.',	'LOAD_CPF_MEMBERLIST'			=> 'Allow styles to display custom profile fields in memberlist',	'LOAD_CPF_VIEWPROFILE'			=> 'Display custom profile fields in user profiles',	'LOAD_CPF_VIEWTOPIC'			=> 'Display custom profile fields on topic pages',	'LOAD_USER_ACTIVITY'			=> 'Show users activity',	'LOAD_USER_ACTIVITY_EXPLAIN'	=> 'Displays active topic/forum in user profiles and user control panel. It is recommended to disable this on boards with more than one million posts.',	'RECOMPILE_STYLES'				=> 'Recompile stale style components',	'RECOMPILE_STYLES_EXPLAIN'		=> 'Check for updated style components on filesystem and recompile.',	'YES_ANON_READ_MARKING'			=> 'Enable topic marking for guests',	'YES_ANON_READ_MARKING_EXPLAIN'	=> 'Stores read/unread status information for guests. If disabled, posts are always marked read for guests.',	'YES_BIRTHDAYS'					=> 'Enable birthday listing',	'YES_BIRTHDAYS_EXPLAIN'			=> 'If disabled the birthday listing is no longer displayed. To let this setting take effect the birthday feature needs to be enabled too.',	'YES_JUMPBOX'					=> 'Enable display of jumpbox',	'YES_MODERATORS'				=> 'Enable display of moderators',	'YES_ONLINE'					=> 'Enable online user listings',	'YES_ONLINE_EXPLAIN'			=> 'Display online user information on index, forum and topic pages.',	'YES_ONLINE_GUESTS'				=> 'Enable online guest listings in viewonline',	'YES_ONLINE_GUESTS_EXPLAIN'		=> 'Allow display of guest user information in viewonline.',	'YES_ONLINE_TRACK'				=> 'Enable display of user online/offline information',	'YES_ONLINE_TRACK_EXPLAIN'		=> 'Display online information for user in profiles and topic pages.',	'YES_POST_MARKING'				=> 'Enable dotted topics',	'YES_POST_MARKING_EXPLAIN'		=> 'Indicates whether user has posted to a topic.',	'YES_READ_MARKING'				=> 'Enable server-side topic marking',	'YES_READ_MARKING_EXPLAIN'		=> 'Stores read/unread status information in the database rather than a cookie.',	'YES_UNREAD_SEARCH'				=> 'Enable search for unread posts',));// Auth settings$lang = array_merge($lang, array(	'ACP_AUTH_SETTINGS_EXPLAIN'	=> 'phpBB supports authentication plug-ins, or modules. These allow you determine how users are authenticated when they log into the board. By default three plug-ins are provided; DB, LDAP and Apache. Not all methods require additional information so only fill out fields if they are relevant to the selected method.',	'AUTH_METHOD'				=> 'Select an authentication method',	'APACHE_SETUP_BEFORE_USE'	=> 'You have to setup apache authentication before you switch phpBB to this authentication method. Keep in mind that the username you use for apache authentication has to be the same as your phpBB username. Apache authentication can only be used with mod_php (not with a CGI version) and safe_mode disabled.',	'LDAP_DN'						=> 'LDAP base <var>dn</var>',	'LDAP_DN_EXPLAIN'				=> 'This is the Distinguished Name, locating the user information, e.g. <samp>o=My Company,c=US</samp>.',	'LDAP_EMAIL'					=> 'LDAP e-mail attribute',	'LDAP_EMAIL_EXPLAIN'			=> 'Set this to the name of your user entry e-mail attribute (if one exists) in order to automatically set the e-mail address for new users. Leaving this empty results in empty e-mail address for users who log in for the first time.',	'LDAP_INCORRECT_USER_PASSWORD'	=> 'Binding to LDAP server failed with specified user/password.',	'LDAP_NO_EMAIL'					=> 'The specified e-mail attribute does not exist.',	'LDAP_NO_IDENTITY'				=> 'Could not find a login identity for %s.',	'LDAP_PASSWORD'					=> 'LDAP password',	'LDAP_PASSWORD_EXPLAIN'			=> 'Leave blank to use anonymous binding, otherwise fill in the password for the above user. Required for Active Directory Servers.<br /><em><strong>Warning:</strong> This password will be stored as plain text in the database, visible to everybody who can access your database or who can view this configuration page.</em>',	'LDAP_PORT'						=> 'LDAP server port',	'LDAP_PORT_EXPLAIN'				=> 'Optionally you can specify a port which should be used to connect to the LDAP server instead of the default port 389.',	'LDAP_SERVER'					=> 'LDAP server name',	'LDAP_SERVER_EXPLAIN'			=> 'If using LDAP this is the hostname or IP address of the LDAP server. Alternatively you can specify an URL like ldap://hostname:port/',	'LDAP_UID'						=> 'LDAP <var>uid</var>',	'LDAP_UID_EXPLAIN'				=> 'This is the key under which to search for a given login identity, e.g. <var>uid</var>, <var>sn</var>, etc.',	'LDAP_USER'						=> 'LDAP user <var>dn</var>',	'LDAP_USER_EXPLAIN'				=> 'Leave blank to use anonymous binding. If filled in phpBB uses the specified distinguished name on login attempts to find the correct user, e.g. <samp>uid=Username,ou=MyUnit,o=MyCompany,c=US</samp>. Required for Active Directory Servers.',	'LDAP_USER_FILTER'				=> 'LDAP user filter',	'LDAP_USER_FILTER_EXPLAIN'		=> 'Optionally you can further limit the searched objects with additional filters. For example <samp>objectClass=posixGroup</samp> would result in the use of <samp>(&amp;(uid=$username)(objectClass=posixGroup))</samp>',));// Server Settings$lang = array_merge($lang, array(	'ACP_SERVER_SETTINGS_EXPLAIN'	=> 'Here you define server and domain dependant settings. Please ensure the data you enter is accurate, errors will result in e-mails containing incorrect information. When entering the domain name remember it does include http:// or other protocol term. Only alter the port number if you know your server uses a different value, port 80 is correct in most cases.',	'ENABLE_GZIP'				=> 'Enable GZip compression',	'ENABLE_GZIP_EXPLAIN'		=> 'Generated content will be compressed prior to sending it to the user. This can reduce network traffic but will also increase CPU usage on both server and client side. Requires zlib PHP extension to be loaded.',	'FORCE_SERVER_VARS'			=> 'Force server URL settings',	'FORCE_SERVER_VARS_EXPLAIN'	=> 'If set to yes the server settings defined here will be used in favour of the automatically determined values.',	'ICONS_PATH'				=> 'Post icons storage path',	'ICONS_PATH_EXPLAIN'		=> 'Path under your phpBB root directory, e.g. <samp>images/icons</samp>.',	'PATH_SETTINGS'				=> 'Path settings',	'RANKS_PATH'				=> 'Rank image storage path',	'RANKS_PATH_EXPLAIN'		=> 'Path under your phpBB root directory, e.g. <samp>images/ranks</samp>.',	'SCRIPT_PATH'				=> 'Script path',	'SCRIPT_PATH_EXPLAIN'		=> 'The path where phpBB is located relative to the domain name, e.g. <samp>/phpBB3</samp>.',	'SERVER_NAME'				=> 'Domain name',	'SERVER_NAME_EXPLAIN'		=> 'The domain name this board runs from (for example: <samp>www.example.com</samp>).',	'SERVER_PORT'				=> 'Server port',	'SERVER_PORT_EXPLAIN'		=> 'The port your server is running on, usually 80, only change if different.',	'SERVER_PROTOCOL'			=> 'Server protocol',	'SERVER_PROTOCOL_EXPLAIN'	=> 'This is used as the server protocol if these settings are forced. If empty or not forced the protocol is determined by the cookie secure settings (<samp>http://</samp> or <samp>https://</samp>).',	'SERVER_URL_SETTINGS'		=> 'Server URL settings',	'SMILIES_PATH'				=> 'Smilies storage path',	'SMILIES_PATH_EXPLAIN'		=> 'Path under your phpBB root directory, e.g. <samp>images/smilies</samp>.',	'UPLOAD_ICONS_PATH'			=> 'Extension group icons storage path',	'UPLOAD_ICONS_PATH_EXPLAIN'	=> 'Path under your phpBB root directory, e.g. <samp>images/upload_icons</samp>.',));// Security Settings$lang = array_merge($lang, array(	'ACP_SECURITY_SETTINGS_EXPLAIN'		=> 'Here you are able to define session and login related settings.',	'ALL'							=> 'All',	'ALLOW_AUTOLOGIN'				=> 'Allow persistent logins',	'ALLOW_AUTOLOGIN_EXPLAIN'		=> 'Determines whether users can autologin when they visit the board.',	'AUTOLOGIN_LENGTH'				=> 'Persistent login key expiration length (in days)',	'AUTOLOGIN_LENGTH_EXPLAIN'		=> 'Number of days after which persistent login keys are removed or zero to disable.',	'BROWSER_VALID'					=> 'Validate browser',	'BROWSER_VALID_EXPLAIN'			=> 'Enables browser validation for each session improving security.',	'CHECK_DNSBL'					=> 'Check IP against DNS Blackhole List',	'CHECK_DNSBL_EXPLAIN'			=> 'If enabled the users IP address is checked against the following DNSBL services on registration and posting: <a href="http://spamcop.net">spamcop.net</a> and <a href="http://www.spamhaus.org">www.spamhaus.org</a>. This lookup may take a while, depending on the servers configuration. If slowdowns are experienced or too many false positives reported it is recommended to disable this check.',	'CLASS_B'						=> 'A.B',	'CLASS_C'						=> 'A.B.C',	'EMAIL_CHECK_MX'				=> 'Check e-mail domain for valid MX record',	'EMAIL_CHECK_MX_EXPLAIN'		=> 'If enabled, the e-mail domain provided on registration and profile changes is checked for a valid MX record.',	'FORCE_PASS_CHANGE'				=> 'Force password change',	'FORCE_PASS_CHANGE_EXPLAIN'		=> 'Require user to change their password after a set number of days. Setting this value to 0 disables this behaviour.',	'FORM_TIME_MAX'					=> 'Maximum time to submit forms',	'FORM_TIME_MAX_EXPLAIN'			=> 'The time a user has to submit a form. Use -1 to disable. Note that a form might become invalid if the session expires, regardless of this setting.',	'FORM_SID_GUESTS'				=> 'Tie forms to guest sessions',	'FORM_SID_GUESTS_EXPLAIN'		=> 'If enabled, the form token issued to guests will be session-exclusive. This can cause problems with some ISPs.',	'FORWARDED_FOR_VALID'			=> 'Validate <var>X_FORWARDED_FOR</var> header',	'FORWARDED_FOR_VALID_EXPLAIN'	=> 'Sessions will only be continued if the sent <var>X_FORWARDED_FOR</var> header equals the one sent with the previous request. Bans will be checked against IPs in <var>X_FORWARDED_FOR</var> too.',	'IP_VALID'						=> 'Session IP validation',	'IP_VALID_EXPLAIN'				=> 'Determines how much of the users IP is used to validate a session; <samp>All</samp> compares the complete address, <samp>A.B.C</samp> the first x.x.x, <samp>A.B</samp> the first x.x, <samp>None</samp> disables checking. On IPv6 addresses <samp>A.B.C</samp> compares the first 4 blocks and <samp>A.B</samp> the first 3 blocks.',	'IP_LOGIN_LIMIT_MAX'			=> 'Maximum number of login attempts per IP address',	'IP_LOGIN_LIMIT_MAX_EXPLAIN'	=> 'The threshold of login attempts allowed from a single IP address before an anti-spambot task is triggered. Enter 0 to prevent the anti-spambot task from being triggered by IP addresses.',	'IP_LOGIN_LIMIT_TIME'			=> 'IP address login attempt expiration time',	'IP_LOGIN_LIMIT_TIME_EXPLAIN'	=> 'Login attempts expire after this period.',	'IP_LOGIN_LIMIT_USE_FORWARDED'	=> 'Limit login attempts by <var>X_FORWARDED_FOR</var> header',	'IP_LOGIN_LIMIT_USE_FORWARDED_EXPLAIN'	=> 'Instead of limiting login attempts by IP address they are limited by <var>X_FORWARDED_FOR</var> values. <br /><em><strong>Warning:</strong> Only enable this if you are operating a proxy server that sets <var>X_FORWARDED_FOR</var> to trustworthy values.</em>',	'MAX_LOGIN_ATTEMPTS'			=> 'Maximum number of login attempts per username',	'MAX_LOGIN_ATTEMPTS_EXPLAIN'	=> 'The number of login attempts allowed for a single account before the anti-spambot task is triggered. Enter 0 to prevent the anti-spambot task from being triggered for distinct user accounts.',	'NO_IP_VALIDATION'				=> 'None',	'NO_REF_VALIDATION'				=> 'None',	'PASSWORD_TYPE'					=> 'Password complexity',	'PASSWORD_TYPE_EXPLAIN'			=> 'Determines how complex a password needs to be when set or altered, subsequent options include the previous ones.',	'PASS_TYPE_ALPHA'				=> 'Must contain letters and numbers',	'PASS_TYPE_ANY'					=> 'No requirements',	'PASS_TYPE_CASE'				=> 'Must be mixed case',	'PASS_TYPE_SYMBOL'				=> 'Must contain symbols',	'REF_HOST'						=> 'Only validate host',	'REF_PATH'						=> 'Also validate path',	'REFERER_VALID'					=> 'Validate Referer',	'REFERER_VALID_EXPLAIN'			=> 'If enabled, the referer of POST requests will be checked against the host/script path settings. This may cause issues with boards using several domains and or external logins.',	'TPL_ALLOW_PHP'					=> 'Allow php in templates',	'TPL_ALLOW_PHP_EXPLAIN'			=> 'If this option is enabled, <code>PHP</code> and <code>INCLUDEPHP</code> statements will be recognised and parsed in templates.',));// Email Settings$lang = array_merge($lang, array(	'ACP_EMAIL_SETTINGS_EXPLAIN'	=> 'This information is used when the board sends e-mails to your users. Please ensure the e-mail address you specify is valid, any bounced or undeliverable messages will likely be sent to that address. If your host does not provide a native (PHP based) e-mail service you can instead send messages directly using SMTP. This requires the address of an appropriate server (ask your provider if necessary). If the server requires authentication (and only if it does) enter the necessary username, password and authentication method.',	'ADMIN_EMAIL'					=> 'Return e-mail address',	'ADMIN_EMAIL_EXPLAIN'			=> 'This will be used as the return address on all e-mails, the technical contact e-mail address. It will always be used as the <samp>Return-Path</samp> and <samp>Sender</samp> address in e-mails.',	'BOARD_EMAIL_FORM'				=> 'Users send e-mail via board',	'BOARD_EMAIL_FORM_EXPLAIN'		=> 'Instead of showing the users e-mail address users are able to send e-mails via the board.',	'BOARD_HIDE_EMAILS'				=> 'Hide e-mail addresses',	'BOARD_HIDE_EMAILS_EXPLAIN'		=> 'This function keeps e-mail addresses completely private.',	'CONTACT_EMAIL'					=> 'Contact e-mail address',	'CONTACT_EMAIL_EXPLAIN'			=> 'This address will be used whenever a specific contact point is needed, e.g. spam, error output, etc. It will always be used as the <samp>From</samp> and <samp>Reply-To</samp> address in e-mails.',	'EMAIL_FUNCTION_NAME'			=> 'E-mail function name',	'EMAIL_FUNCTION_NAME_EXPLAIN'	=> 'The e-mail function used to send mails through PHP.',	'EMAIL_PACKAGE_SIZE'			=> 'E-mail package size',	'EMAIL_PACKAGE_SIZE_EXPLAIN'	=> 'This is the number of maximum e-mails sent out in one package. This setting is applied to the internal message queue; set this value to 0 if you have problems with non-delivered notification e-mails.',	'EMAIL_SIG'						=> 'E-mail signature',	'EMAIL_SIG_EXPLAIN'				=> 'This text will be attached to all e-mails the board sends.',	'ENABLE_EMAIL'					=> 'Enable board-wide e-mails',	'ENABLE_EMAIL_EXPLAIN'			=> 'If this is set to disabled no e-mails will be sent by the board at all. <em>Note the user and admin account activation settings require this setting to be enabled. If currently using user or admin activation in the activation settings, disabling this setting will require no activation of new accounts.</em>',	'SMTP_AUTH_METHOD'				=> 'Authentication method for SMTP',	'SMTP_AUTH_METHOD_EXPLAIN'		=> 'Only used if a username/password is set, ask your provider if you are unsure which method to use.',	'SMTP_CRAM_MD5'					=> 'CRAM-MD5',	'SMTP_DIGEST_MD5'				=> 'DIGEST-MD5',	'SMTP_LOGIN'					=> 'LOGIN',	'SMTP_PASSWORD'					=> 'SMTP password',	'SMTP_PASSWORD_EXPLAIN'			=> 'Only enter a password if your SMTP server requires it.<br /><em><strong>Warning:</strong> This password will be stored as plain text in the database, visible to everybody who can access your database or who can view this configuration page.</em>',	'SMTP_PLAIN'					=> 'PLAIN',	'SMTP_POP_BEFORE_SMTP'			=> 'POP-BEFORE-SMTP',	'SMTP_PORT'						=> 'SMTP server port',	'SMTP_PORT_EXPLAIN'				=> 'Only change this if you know your SMTP server is on a different port.',	'SMTP_SERVER'					=> 'SMTP server address',	'SMTP_SETTINGS'					=> 'SMTP settings',	'SMTP_USERNAME'					=> 'SMTP username',	'SMTP_USERNAME_EXPLAIN'			=> 'Only enter a username if your SMTP server requires it.',	'USE_SMTP'						=> 'Use SMTP server for e-mail',	'USE_SMTP_EXPLAIN'				=> 'Select Yes if you want or have to send e-mail via a named server instead of the local mail function.',));// Jabber settings$lang = array_merge($lang, array(	'ACP_JABBER_SETTINGS_EXPLAIN'	=> 'Here you can enable and control the use of Jabber for instant messaging and board notifications. Jabber is an open source protocol and therefore available for use by anyone. Some Jabber servers include gateways or transports which allow you to contact users on other networks. Not all servers offer all transports and changes in protocols can prevent transports from operating. Please be sure to enter already registered account details - phpBB will use the details you enter here as is.',	'JAB_ENABLE'				=> 'Enable Jabber',	'JAB_ENABLE_EXPLAIN'		=> 'Enables use of Jabber messaging and notifications.',	'JAB_GTALK_NOTE'			=> 'Please note that GTalk will not work because the <samp>dns_get_record</samp> function could not be found. This function is not available in PHP4, and is not implemented on Windows platforms. It currently does not work on BSD-based systems, including Mac OS.',	'JAB_PACKAGE_SIZE'			=> 'Jabber package size',	'JAB_PACKAGE_SIZE_EXPLAIN'	=> 'This is the number of messages sent in one package. If set to 0 the message is sent immediately and will not be queued for later sending.',	'JAB_PASSWORD'				=> 'Jabber password',	'JAB_PASSWORD_EXPLAIN'		=> '<em><strong>Warning:</strong> This password will be stored as plain text in the database, visible to everybody who can access your database or who can view this configuration page.</em>',	'JAB_PORT'					=> 'Jabber port',	'JAB_PORT_EXPLAIN'			=> 'Leave blank unless you know it is not port 5222.',	'JAB_SERVER'				=> 'Jabber server',	'JAB_SERVER_EXPLAIN'		=> 'See %sjabber.org%s for a list of servers.',	'JAB_SETTINGS_CHANGED'		=> 'Jabber settings changed successfully.',	'JAB_USE_SSL'				=> 'Use SSL to connect',	'JAB_USE_SSL_EXPLAIN'		=> 'If enabled a secure connection is tried to be established. The Jabber port will be modified to 5223 if port 5222 is specified.',	'JAB_USERNAME'				=> 'Jabber username or JID',	'JAB_USERNAME_EXPLAIN'		=> 'Specify a registered username or a valid JID. The username will not be checked for validity. If you only specify a username, then your JID will be the username and the server you specified above. Else, specify a valid JID, for example user@jabber.org.',));?>
<?php/**** @package mcp* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @ignore*/if (!defined('IN_PHPBB')){	exit;}/*** mcp_logs* Handling warning the users* @package mcp*/class mcp_logs{	var $u_action;	var $p_master;	function mcp_logs(&$p_master)	{		$this->p_master = &$p_master;	}	function main($id, $mode)	{		global $auth, $db, $user, $template;		global $config, $phpbb_root_path, $phpEx;		$user->add_lang('acp/common');		$action = request_var('action', array('' => ''));		if (is_array($action))		{			list($action, ) = each($action);		}		else		{			$action = request_var('action', '');		}		// Set up general vars		$start		= request_var('start', 0);		$deletemark = ($action == 'del_marked') ? true : false;		$deleteall	= ($action == 'del_all') ? true : false;		$marked		= request_var('mark', array(0));		// Sort keys		$sort_days	= request_var('st', 0);		$sort_key	= request_var('sk', 't');		$sort_dir	= request_var('sd', 'd');		$this->tpl_name = 'mcp_logs';		$this->page_title = 'MCP_LOGS';		$forum_list = array_values(array_intersect(get_forum_list('f_read'), get_forum_list('m_')));		$forum_list[] = 0;		$forum_id = $topic_id = 0;		switch ($mode)		{			case 'front':			break;			case 'forum_logs':				$forum_id = request_var('f', 0);				if (!in_array($forum_id, $forum_list))				{					trigger_error('NOT_AUTHORISED');				}				$forum_list = array($forum_id);			break;			case 'topic_logs':				$topic_id = request_var('t', 0);				$sql = 'SELECT forum_id					FROM ' . TOPICS_TABLE . '					WHERE topic_id = ' . $topic_id;				$result = $db->sql_query($sql);				$forum_id = (int) $db->sql_fetchfield('forum_id');				$db->sql_freeresult($result);				if (!in_array($forum_id, $forum_list))				{					trigger_error('NOT_AUTHORISED');				}				$forum_list = array($forum_id);			break;		}		// Delete entries if requested and able		if (($deletemark || $deleteall) && $auth->acl_get('a_clearlogs'))		{			if (confirm_box(true))			{				if ($deletemark && sizeof($marked))				{					$sql = 'DELETE FROM ' . LOG_TABLE . '						WHERE log_type = ' . LOG_MOD . '							AND ' . $db->sql_in_set('forum_id', $forum_list) . '							AND ' . $db->sql_in_set('log_id', $marked);					$db->sql_query($sql);					add_log('admin', 'LOG_CLEAR_MOD');				}				else if ($deleteall)				{					$sql = 'DELETE FROM ' . LOG_TABLE . '						WHERE log_type = ' . LOG_MOD . '							AND ' . $db->sql_in_set('forum_id', $forum_list);					if ($mode == 'topic_logs')					{						$sql .= ' AND topic_id = ' . $topic_id;					}					$db->sql_query($sql);					add_log('admin', 'LOG_CLEAR_MOD');				}			}			else			{				confirm_box(false, $user->lang['CONFIRM_OPERATION'], build_hidden_fields(array(					'f'			=> $forum_id,					't'			=> $topic_id,					'start'		=> $start,					'delmarked'	=> $deletemark,					'delall'	=> $deleteall,					'mark'		=> $marked,					'st'		=> $sort_days,					'sk'		=> $sort_key,					'sd'		=> $sort_dir,					'i'			=> $id,					'mode'		=> $mode,					'action'	=> request_var('action', array('' => ''))))				);			}		}		// Sorting		$limit_days = array(0 => $user->lang['ALL_ENTRIES'], 1 => $user->lang['1_DAY'], 7 => $user->lang['7_DAYS'], 14 => $user->lang['2_WEEKS'], 30 => $user->lang['1_MONTH'], 90 => $user->lang['3_MONTHS'], 180 => $user->lang['6_MONTHS'], 365 => $user->lang['1_YEAR']);		$sort_by_text = array('u' => $user->lang['SORT_USERNAME'], 't' => $user->lang['SORT_DATE'], 'i' => $user->lang['SORT_IP'], 'o' => $user->lang['SORT_ACTION']);		$sort_by_sql = array('u' => 'u.username_clean', 't' => 'l.log_time', 'i' => 'l.log_ip', 'o' => 'l.log_operation');		$s_limit_days = $s_sort_key = $s_sort_dir = $u_sort_param = '';		gen_sort_selects($limit_days, $sort_by_text, $sort_days, $sort_key, $sort_dir, $s_limit_days, $s_sort_key, $s_sort_dir, $u_sort_param);		// Define where and sort sql for use in displaying logs		$sql_where = ($sort_days) ? (time() - ($sort_days * 86400)) : 0;		$sql_sort = $sort_by_sql[$sort_key] . ' ' . (($sort_dir == 'd') ? 'DESC' : 'ASC');		$keywords = utf8_normalize_nfc(request_var('keywords', '', true));		$keywords_param = !empty($keywords) ? '&amp;keywords=' . urlencode(htmlspecialchars_decode($keywords)) : '';		// Grab log data		$log_data = array();		$log_count = 0;		$start = view_log('mod', $log_data, $log_count, $config['topics_per_page'], $start, $forum_list, $topic_id, 0, $sql_where, $sql_sort, $keywords);		$template->assign_vars(array(			'PAGE_NUMBER'		=> on_page($log_count, $config['topics_per_page'], $start),			'TOTAL'				=> ($log_count == 1) ? $user->lang['TOTAL_LOG'] : sprintf($user->lang['TOTAL_LOGS'], $log_count),			'PAGINATION'		=> generate_pagination($this->u_action . "&amp;$u_sort_param$keywords_param", $log_count, $config['topics_per_page'], $start),			'L_TITLE'			=> $user->lang['MCP_LOGS'],			'U_POST_ACTION'			=> $this->u_action . "&amp;$u_sort_param$keywords_param&amp;start=$start",			'S_CLEAR_ALLOWED'		=> ($auth->acl_get('a_clearlogs')) ? true : false,			'S_SELECT_SORT_DIR'		=> $s_sort_dir,			'S_SELECT_SORT_KEY'		=> $s_sort_key,			'S_SELECT_SORT_DAYS'	=> $s_limit_days,			'S_LOGS'				=> ($log_count > 0),			'S_KEYWORDS'			=> $keywords,			)		);		foreach ($log_data as $row)		{			$data = array();			$checks = array('viewtopic', 'viewforum');			foreach ($checks as $check)			{				if (isset($row[$check]) && $row[$check])				{					$data[] = '<a href="' . $row[$check] . '">' . $user->lang['LOGVIEW_' . strtoupper($check)] . '</a>';				}			}			$template->assign_block_vars('log', array(				'USERNAME'		=> $row['username_full'],				'IP'			=> $row['ip'],				'DATE'			=> $user->format_date($row['time']),				'ACTION'		=> $row['action'],				'DATA'			=> (sizeof($data)) ? implode(' | ', $data) : '',				'ID'			=> $row['id'],				)			);		}	}}?>
<?php/**** @package mcp* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @ignore*/if (!defined('IN_PHPBB')){	exit;}/*** mcp_notes* Displays notes about a user* @package mcp*/class mcp_notes{	var $p_master;	var $u_action;	function mcp_notes(&$p_master)	{		$this->p_master = &$p_master;	}	function main($id, $mode)	{		global $auth, $db, $user, $template;		global $config, $phpbb_root_path, $phpEx;		$action = request_var('action', array('' => ''));		if (is_array($action))		{			list($action, ) = each($action);		}		$this->page_title = 'MCP_NOTES';		switch ($mode)		{			case 'front':				$template->assign_vars(array(					'U_FIND_USERNAME'	=> append_sid("{$phpbb_root_path}memberlist.$phpEx", 'mode=searchuser&amp;form=mcp&amp;field=username&amp;select_single=true'),					'U_POST_ACTION'		=> append_sid("{$phpbb_root_path}mcp.$phpEx", 'i=notes&amp;mode=user_notes'),					'L_TITLE'			=> $user->lang['MCP_NOTES'],				));				$this->tpl_name = 'mcp_notes_front';			break;			case 'user_notes':				$user->add_lang('acp/common');				$this->mcp_notes_user_view($action);				$this->tpl_name = 'mcp_notes_user';			break;		}	}	/**	* Display user notes	*/	function mcp_notes_user_view($action)	{		global $phpEx, $phpbb_root_path, $config;		global $template, $db, $user, $auth;		$user_id = request_var('u', 0);		$username = request_var('username', '', true);		$start = request_var('start', 0);		$st	= request_var('st', 0);		$sk	= request_var('sk', 'b');		$sd	= request_var('sd', 'd');		add_form_key('mcp_notes');		$sql_where = ($user_id) ? "user_id = $user_id" : "username_clean = '" . $db->sql_escape(utf8_clean_string($username)) . "'";		$sql = 'SELECT *			FROM ' . USERS_TABLE . "			WHERE $sql_where";		$result = $db->sql_query($sql);		$userrow = $db->sql_fetchrow($result);		$db->sql_freeresult($result);		if (!$userrow)		{			trigger_error('NO_USER');		}		$user_id = $userrow['user_id'];		// Populate user id to the currently active module (this module)		// The following method is another way of adjusting module urls. It is the easy variant if we want		// to directly adjust the current module url based on data retrieved within the same module.		if (strpos($this->u_action, "&amp;u=$user_id") === false)		{			$this->p_master->adjust_url('&amp;u=' . $user_id);			$this->u_action .= "&amp;u=$user_id";		}		$deletemark = ($action == 'del_marked') ? true : false;		$deleteall	= ($action == 'del_all') ? true : false;		$marked		= request_var('marknote', array(0));		$usernote	= utf8_normalize_nfc(request_var('usernote', '', true));		// Handle any actions		if (($deletemark || $deleteall) && $auth->acl_get('a_clearlogs'))		{			$where_sql = '';			if ($deletemark && $marked)			{				$sql_in = array();				foreach ($marked as $mark)				{					$sql_in[] = $mark;				}				$where_sql = ' AND ' . $db->sql_in_set('log_id', $sql_in);				unset($sql_in);			}			if ($where_sql || $deleteall)			{				if (check_form_key('mcp_notes'))				{					$sql = 'DELETE FROM ' . LOG_TABLE . '						WHERE log_type = ' . LOG_USERS . "							AND reportee_id = $user_id							$where_sql";					$db->sql_query($sql);					add_log('admin', 'LOG_CLEAR_USER', $userrow['username']);					$msg = ($deletemark) ? 'MARKED_NOTES_DELETED' : 'ALL_NOTES_DELETED';				}				else				{					$msg = 'FORM_INVALID';				}				$redirect = $this->u_action . '&amp;u=' . $user_id;				meta_refresh(3, $redirect);				trigger_error($user->lang[$msg] . '<br /><br />' . sprintf($user->lang['RETURN_PAGE'], '<a href="' . $redirect . '">', '</a>'));			}		}		if ($usernote && $action == 'add_feedback')		{			if (check_form_key('mcp_notes'))			{				add_log('admin', 'LOG_USER_FEEDBACK', $userrow['username']);				add_log('mod', 0, 0, 'LOG_USER_FEEDBACK', $userrow['username']);				add_log('user', $user_id, 'LOG_USER_GENERAL', $usernote);				$msg = $user->lang['USER_FEEDBACK_ADDED'];			}			else			{				$msg = $user->lang['FORM_INVALID'];			}			$redirect = $this->u_action;			meta_refresh(3, $redirect);			trigger_error($msg .  '<br /><br />' . sprintf($user->lang['RETURN_PAGE'], '<a href="' . $redirect . '">', '</a>'));		}		// Generate the appropriate user information for the user we are looking at		if (!function_exists('get_user_avatar'))		{			include($phpbb_root_path . 'includes/functions_display.' . $phpEx);		}		$rank_title = $rank_img = '';		$avatar_img = get_user_avatar($userrow['user_avatar'], $userrow['user_avatar_type'], $userrow['user_avatar_width'], $userrow['user_avatar_height']);		$limit_days = array(0 => $user->lang['ALL_ENTRIES'], 1 => $user->lang['1_DAY'], 7 => $user->lang['7_DAYS'], 14 => $user->lang['2_WEEKS'], 30 => $user->lang['1_MONTH'], 90 => $user->lang['3_MONTHS'], 180 => $user->lang['6_MONTHS'], 365 => $user->lang['1_YEAR']);		$sort_by_text = array('a' => $user->lang['SORT_USERNAME'], 'b' => $user->lang['SORT_DATE'], 'c' => $user->lang['SORT_IP'], 'd' => $user->lang['SORT_ACTION']);		$sort_by_sql = array('a' => 'u.username_clean', 'b' => 'l.log_time', 'c' => 'l.log_ip', 'd' => 'l.log_operation');		$s_limit_days = $s_sort_key = $s_sort_dir = $u_sort_param = '';		gen_sort_selects($limit_days, $sort_by_text, $st, $sk, $sd, $s_limit_days, $s_sort_key, $s_sort_dir, $u_sort_param);		// Define where and sort sql for use in displaying logs		$sql_where = ($st) ? (time() - ($st * 86400)) : 0;		$sql_sort = $sort_by_sql[$sk] . ' ' . (($sd == 'd') ? 'DESC' : 'ASC');		$keywords = utf8_normalize_nfc(request_var('keywords', '', true));		$keywords_param = !empty($keywords) ? '&amp;keywords=' . urlencode(htmlspecialchars_decode($keywords)) : '';		$log_data = array();		$log_count = 0;		$start = view_log('user', $log_data, $log_count, $config['topics_per_page'], $start, 0, 0, $user_id, $sql_where, $sql_sort, $keywords);		if ($log_count)		{			$template->assign_var('S_USER_NOTES', true);			foreach ($log_data as $row)			{				$template->assign_block_vars('usernotes', array(					'REPORT_BY'		=> $row['username_full'],					'REPORT_AT'		=> $user->format_date($row['time']),					'ACTION'		=> $row['action'],					'IP'			=> $row['ip'],					'ID'			=> $row['id'])				);			}		}		$template->assign_vars(array(			'U_POST_ACTION'			=> $this->u_action,			'S_CLEAR_ALLOWED'		=> ($auth->acl_get('a_clearlogs')) ? true : false,			'S_SELECT_SORT_DIR'		=> $s_sort_dir,			'S_SELECT_SORT_KEY'		=> $s_sort_key,			'S_SELECT_SORT_DAYS'	=> $s_limit_days,			'S_KEYWORDS'			=> $keywords,			'L_TITLE'			=> $user->lang['MCP_NOTES_USER'],			'PAGE_NUMBER'		=> on_page($log_count, $config['topics_per_page'], $start),			'PAGINATION'		=> generate_pagination($this->u_action . "&amp;$u_sort_param$keywords_param", $log_count, $config['topics_per_page'], $start),			'TOTAL_REPORTS'		=> ($log_count == 1) ? $user->lang['LIST_REPORT'] : sprintf($user->lang['LIST_REPORTS'], $log_count),			'RANK_TITLE'		=> $rank_title,			'JOINED'			=> $user->format_date($userrow['user_regdate']),			'POSTS'				=> ($userrow['user_posts']) ? $userrow['user_posts'] : 0,			'WARNINGS'			=> ($userrow['user_warnings']) ? $userrow['user_warnings'] : 0,			'USERNAME_FULL'		=> get_username_string('full', $userrow['user_id'], $userrow['username'], $userrow['user_colour']),			'USERNAME_COLOUR'	=> get_username_string('colour', $userrow['user_id'], $userrow['username'], $userrow['user_colour']),			'USERNAME'			=> get_username_string('username', $userrow['user_id'], $userrow['username'], $userrow['user_colour']),			'U_PROFILE'			=> get_username_string('profile', $userrow['user_id'], $userrow['username'], $userrow['user_colour']),			'AVATAR_IMG'		=> $avatar_img,			'RANK_IMG'			=> $rank_img,			)		);	}}?>
<?php return array(''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'');
<?php/**** @package phpBB* @version $Id$* @copyright (c) 2011 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @ignore*/if (!defined('IN_PHPBB')){	exit;}class phpbb_error_collector{	var $errors;	function phpbb_error_collector()	{		$this->errors = array();	}	function install()	{		set_error_handler(array(&$this, 'error_handler'));	}	function uninstall()	{		restore_error_handler();	}	function error_handler($errno, $msg_text, $errfile, $errline)	{		$this->errors[] = array($errno, $msg_text, $errfile, $errline);	}	function format_errors()	{		$text = '';		foreach ($this->errors as $error)		{			if (!empty($text))			{				$text .= "<br />\n";			}			list($errno, $msg_text, $errfile, $errline) = $error;			// Prevent leakage of local path to phpBB install			$errfile = phpbb_filter_root_path($errfile);			$text .= "Errno $errno: $msg_text at $errfile line $errline";		}		return $text;	}}
<?php/**** @package acp* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @ignore*/if (!defined('IN_PHPBB')){	exit;}/*** @package acp*/class acp_groups{	var $u_action;	function main($id, $mode)	{		global $config, $db, $user, $auth, $template, $cache;		global $phpbb_root_path, $phpbb_admin_path, $phpEx, $table_prefix, $file_uploads;		$user->add_lang('acp/groups');		$this->tpl_name = 'acp_groups';		$this->page_title = 'ACP_GROUPS_MANAGE';		$form_key = 'acp_groups';		add_form_key($form_key);		include($phpbb_root_path . 'includes/functions_user.' . $phpEx);		// Check and set some common vars		$action		= (isset($_POST['add'])) ? 'add' : ((isset($_POST['addusers'])) ? 'addusers' : request_var('action', ''));		$group_id	= request_var('g', 0);		$mark_ary	= request_var('mark', array(0));		$name_ary	= request_var('usernames', '', true);		$leader		= request_var('leader', 0);		$default	= request_var('default', 0);		$start		= request_var('start', 0);		$update		= (isset($_POST['update'])) ? true : false;		// Clear some vars		$can_upload = (file_exists($phpbb_root_path . $config['avatar_path']) && phpbb_is_writable($phpbb_root_path . $config['avatar_path']) && $file_uploads) ? true : false;		$group_row = array();		// Grab basic data for group, if group_id is set and exists		if ($group_id)		{			$sql = 'SELECT *				FROM ' . GROUPS_TABLE . "				WHERE group_id = $group_id";			$result = $db->sql_query($sql);			$group_row = $db->sql_fetchrow($result);			$db->sql_freeresult($result);			if (!$group_row)			{				trigger_error($user->lang['NO_GROUP'] . adm_back_link($this->u_action), E_USER_WARNING);			}			// Check if the user is allowed to manage this group if set to founder only.			if ($user->data['user_type'] != USER_FOUNDER && $group_row['group_founder_manage'])			{				trigger_error($user->lang['NOT_ALLOWED_MANAGE_GROUP'] . adm_back_link($this->u_action), E_USER_WARNING);			}		}		// Which page?		switch ($action)		{			case 'approve':			case 'demote':			case 'promote':				if (!$group_id)				{					trigger_error($user->lang['NO_GROUP'] . adm_back_link($this->u_action), E_USER_WARNING);				}				// Approve, demote or promote				$group_name = ($group_row['group_type'] == GROUP_SPECIAL) ? $user->lang['G_' . $group_row['group_name']] : $group_row['group_name'];				$error = group_user_attributes($action, $group_id, $mark_ary, false, $group_name);				if (!$error)				{					switch ($action)					{						case 'demote':							$message = 'GROUP_MODS_DEMOTED';						break;						case 'promote':							$message = 'GROUP_MODS_PROMOTED';						break;						case 'approve':							$message = 'USERS_APPROVED';						break;					}					trigger_error($user->lang[$message] . adm_back_link($this->u_action . '&amp;action=list&amp;g=' . $group_id));				}				else				{					trigger_error($user->lang[$error] . adm_back_link($this->u_action . '&amp;action=list&amp;g=' . $group_id), E_USER_WARNING);				}			break;			case 'default':				if (!$group_id)				{					trigger_error($user->lang['NO_GROUP'] . adm_back_link($this->u_action), E_USER_WARNING);				}				if (confirm_box(true))				{					$group_name = ($group_row['group_type'] == GROUP_SPECIAL) ? $user->lang['G_' . $group_row['group_name']] : $group_row['group_name'];					if (!sizeof($mark_ary))					{						$start = 0;						do						{							$sql = 'SELECT user_id								FROM ' . USER_GROUP_TABLE . "								WHERE group_id = $group_id								ORDER BY user_id";							$result = $db->sql_query_limit($sql, 200, $start);							$mark_ary = array();							if ($row = $db->sql_fetchrow($result))							{								do								{									$mark_ary[] = $row['user_id'];								}								while ($row = $db->sql_fetchrow($result));								group_user_attributes('default', $group_id, $mark_ary, false, $group_name, $group_row);								$start = (sizeof($mark_ary) < 200) ? 0 : $start + 200;							}							else							{								$start = 0;							}							$db->sql_freeresult($result);						}						while ($start);					}					else					{						group_user_attributes('default', $group_id, $mark_ary, false, $group_name, $group_row);					}					trigger_error($user->lang['GROUP_DEFS_UPDATED'] . adm_back_link($this->u_action . '&amp;action=list&amp;g=' . $group_id));				}				else				{					confirm_box(false, $user->lang['CONFIRM_OPERATION'], build_hidden_fields(array(						'mark'		=> $mark_ary,						'g'			=> $group_id,						'i'			=> $id,						'mode'		=> $mode,						'action'	=> $action))					);				}			break;			case 'deleteusers':			case 'delete':				if (!$group_id)				{					trigger_error($user->lang['NO_GROUP'] . adm_back_link($this->u_action), E_USER_WARNING);				}				else if ($action === 'delete' && $group_row['group_type'] == GROUP_SPECIAL)				{					trigger_error($user->lang['NO_AUTH_OPERATION'] . adm_back_link($this->u_action), E_USER_WARNING);				}				if (confirm_box(true))				{					$error = '';					switch ($action)					{						case 'delete':							if (!$auth->acl_get('a_groupdel'))							{								trigger_error($user->lang['NO_AUTH_OPERATION'] . adm_back_link($this->u_action), E_USER_WARNING);							}							$error = group_delete($group_id, $group_row['group_name']);						break;						case 'deleteusers':							$group_name = ($group_row['group_type'] == GROUP_SPECIAL) ? $user->lang['G_' . $group_row['group_name']] : $group_row['group_name'];							$error = group_user_del($group_id, $mark_ary, false, $group_name);						break;					}					$back_link = ($action == 'delete') ? $this->u_action : $this->u_action . '&amp;action=list&amp;g=' . $group_id;					if ($error)					{						trigger_error($user->lang[$error] . adm_back_link($back_link), E_USER_WARNING);					}					$message = ($action == 'delete') ? 'GROUP_DELETED' : 'GROUP_USERS_REMOVE';					trigger_error($user->lang[$message] . adm_back_link($back_link));				}				else				{					confirm_box(false, $user->lang['CONFIRM_OPERATION'], build_hidden_fields(array(						'mark'		=> $mark_ary,						'g'			=> $group_id,						'i'			=> $id,						'mode'		=> $mode,						'action'	=> $action))					);				}			break;			case 'addusers':				if (!$group_id)				{					trigger_error($user->lang['NO_GROUP'] . adm_back_link($this->u_action), E_USER_WARNING);				}				if (!$name_ary)				{					trigger_error($user->lang['NO_USERS'] . adm_back_link($this->u_action . '&amp;action=list&amp;g=' . $group_id), E_USER_WARNING);				}				$name_ary = array_unique(explode("\n", $name_ary));				$group_name = ($group_row['group_type'] == GROUP_SPECIAL) ? $user->lang['G_' . $group_row['group_name']] : $group_row['group_name'];				// Add user/s to group				if ($error = group_user_add($group_id, false, $name_ary, $group_name, $default, $leader, 0, $group_row))				{					trigger_error($user->lang[$error] . adm_back_link($this->u_action . '&amp;action=list&amp;g=' . $group_id), E_USER_WARNING);				}				$message = ($leader) ? 'GROUP_MODS_ADDED' : 'GROUP_USERS_ADDED';				trigger_error($user->lang[$message] . adm_back_link($this->u_action . '&amp;action=list&amp;g=' . $group_id));			break;			case 'edit':			case 'add':				include($phpbb_root_path . 'includes/functions_display.' . $phpEx);				$data = $submit_ary = array();				if ($action == 'edit' && !$group_id)				{					trigger_error($user->lang['NO_GROUP'] . adm_back_link($this->u_action), E_USER_WARNING);				}				if ($action == 'add' && !$auth->acl_get('a_groupadd'))				{					trigger_error($user->lang['NO_AUTH_OPERATION'] . adm_back_link($this->u_action), E_USER_WARNING);				}				$error = array();				$user->add_lang('ucp');				$avatar_select = basename(request_var('avatar_select', ''));				$category = basename(request_var('category', ''));				// Did we submit?				if ($update)				{					if (!check_form_key($form_key))					{						trigger_error($user->lang['FORM_INVALID'] . adm_back_link($this->u_action), E_USER_WARNING);					}					$group_name	= utf8_normalize_nfc(request_var('group_name', '', true));					$group_desc = utf8_normalize_nfc(request_var('group_desc', '', true));					$group_type	= request_var('group_type', GROUP_FREE);					$allow_desc_bbcode	= request_var('desc_parse_bbcode', false);					$allow_desc_urls	= request_var('desc_parse_urls', false);					$allow_desc_smilies	= request_var('desc_parse_smilies', false);					$data['uploadurl']	= request_var('uploadurl', '');					$data['remotelink']	= request_var('remotelink', '');					$data['width']		= request_var('width', '');					$data['height']		= request_var('height', '');					$delete				= request_var('delete', '');					$submit_ary = array(						'colour'			=> request_var('group_colour', ''),						'rank'				=> request_var('group_rank', 0),						'receive_pm'		=> isset($_REQUEST['group_receive_pm']) ? 1 : 0,						'legend'			=> isset($_REQUEST['group_legend']) ? 1 : 0,						'message_limit'		=> request_var('group_message_limit', 0),						'max_recipients'	=> request_var('group_max_recipients', 0),						'founder_manage'	=> 0,						'skip_auth'			=> request_var('group_skip_auth', 0),					);					if ($user->data['user_type'] == USER_FOUNDER)					{						$submit_ary['founder_manage'] = isset($_REQUEST['group_founder_manage']) ? 1 : 0;					}					if (!empty($_FILES['uploadfile']['tmp_name']) || $data['uploadurl'] || $data['remotelink'])					{						// Avatar stuff						$var_ary = array(							'uploadurl'		=> array('string', true, 5, 255),							'remotelink'	=> array('string', true, 5, 255),							'width'			=> array('string', true, 1, 3),							'height'		=> array('string', true, 1, 3),						);						if (!($error = validate_data($data, $var_ary)))						{							$data['user_id'] = "g$group_id";							if ((!empty($_FILES['uploadfile']['tmp_name']) || $data['uploadurl']) && $can_upload)							{								list($submit_ary['avatar_type'], $submit_ary['avatar'], $submit_ary['avatar_width'], $submit_ary['avatar_height']) = avatar_upload($data, $error);							}							else if ($data['remotelink'])							{								list($submit_ary['avatar_type'], $submit_ary['avatar'], $submit_ary['avatar_width'], $submit_ary['avatar_height']) = avatar_remote($data, $error);							}						}					}					else if ($avatar_select && $config['allow_avatar_local'])					{						// check avatar gallery						if (is_dir($phpbb_root_path . $config['avatar_gallery_path'] . '/' . $category))						{							$submit_ary['avatar_type'] = AVATAR_GALLERY;							list($submit_ary['avatar_width'], $submit_ary['avatar_height']) = getimagesize($phpbb_root_path . $config['avatar_gallery_path'] . '/' . $category . '/' . $avatar_select);							$submit_ary['avatar'] = $category . '/' . $avatar_select;						}					}					else if ($delete)					{						$submit_ary['avatar'] = '';						$submit_ary['avatar_type'] = $submit_ary['avatar_width'] = $submit_ary['avatar_height'] = 0;					}					else if ($data['width'] && $data['height'])					{						// Only update the dimensions?						if ($config['avatar_max_width'] || $config['avatar_max_height'])						{							if ($data['width'] > $config['avatar_max_width'] || $data['height'] > $config['avatar_max_height'])							{								$error[] = sprintf($user->lang['AVATAR_WRONG_SIZE'], $config['avatar_min_width'], $config['avatar_min_height'], $config['avatar_max_width'], $config['avatar_max_height'], $data['width'], $data['height']);							}						}						if (!sizeof($error))						{							if ($config['avatar_min_width'] || $config['avatar_min_height'])							{								if ($data['width'] < $config['avatar_min_width'] || $data['height'] < $config['avatar_min_height'])								{									$error[] = sprintf($user->lang['AVATAR_WRONG_SIZE'], $config['avatar_min_width'], $config['avatar_min_height'], $config['avatar_max_width'], $config['avatar_max_height'], $data['width'], $data['height']);								}							}						}						if (!sizeof($error))						{							$submit_ary['avatar_width'] = $data['width'];							$submit_ary['avatar_height'] = $data['height'];						}					}					if ((isset($submit_ary['avatar']) && $submit_ary['avatar'] && (!isset($group_row['group_avatar']))) || $delete)					{						if (isset($group_row['group_avatar']) && $group_row['group_avatar'])						{							avatar_delete('group', $group_row, true);						}					}					// Validate the length of "Maximum number of allowed recipients per private message" setting.					// We use 16777215 as a maximum because it matches MySQL unsigned mediumint maximum value					// which is the lowest amongst DBMSes supported by phpBB3					if ($max_recipients_error = validate_data($submit_ary, array('max_recipients' => array('num', false, 0, 16777215))))					{						// Replace "error" string with its real, localised form						$error = array_merge($error, array_map(array(&$user, 'lang'), $max_recipients_error));					}					if (!sizeof($error))					{						// Only set the rank, colour, etc. if it's changed or if we're adding a new						// group. This prevents existing group members being updated if no changes						// were made.						$group_attributes = array();						$test_variables = array(							'rank'			=> 'int',							'colour'		=> 'string',							'avatar'		=> 'string',							'avatar_type'	=> 'int',							'avatar_width'	=> 'int',							'avatar_height'	=> 'int',							'receive_pm'	=> 'int',							'legend'		=> 'int',							'message_limit'	=> 'int',							'max_recipients'=> 'int',							'founder_manage'=> 'int',							'skip_auth'		=> 'int',						);						foreach ($test_variables as $test => $type)						{							if (isset($submit_ary[$test]) && ($action == 'add' || $group_row['group_' . $test] != $submit_ary[$test]))							{								settype($submit_ary[$test], $type);								$group_attributes['group_' . $test] = $group_row['group_' . $test] = $submit_ary[$test];							}						}						if (!($error = group_create($group_id, $group_type, $group_name, $group_desc, $group_attributes, $allow_desc_bbcode, $allow_desc_urls, $allow_desc_smilies)))						{							$group_perm_from = request_var('group_perm_from', 0);							// Copy permissions?							// If the user has the a_authgroups permission and at least one additional permission ability set the permissions are fully transferred.							// We do not limit on one auth category because this can lead to incomplete permissions being tricky to fix for the admin, roles being assigned or added non-default permissions.							// Since the user only has the option to copy permissions from non leader managed groups this seems to be a good compromise.							if ($group_perm_from && $action == 'add' && $auth->acl_get('a_authgroups') && $auth->acl_gets('a_aauth', 'a_fauth', 'a_mauth', 'a_uauth'))							{								$sql = 'SELECT group_founder_manage									FROM ' . GROUPS_TABLE . '									WHERE group_id = ' . $group_perm_from;								$result = $db->sql_query($sql);								$check_row = $db->sql_fetchrow($result);								$db->sql_freeresult($result);								// Check the group if non-founder								if ($check_row && ($user->data['user_type'] == USER_FOUNDER || $check_row['group_founder_manage'] == 0))								{									// From the mysql documentation:									// Prior to MySQL 4.0.14, the target table of the INSERT statement cannot appear in the FROM clause of the SELECT part of the query. This limitation is lifted in 4.0.14.									// Due to this we stay on the safe side if we do the insertion "the manual way"									// Copy permisisons from/to the acl groups table (only group_id gets changed)									$sql = 'SELECT forum_id, auth_option_id, auth_role_id, auth_setting										FROM ' . ACL_GROUPS_TABLE . '										WHERE group_id = ' . $group_perm_from;									$result = $db->sql_query($sql);									$groups_sql_ary = array();									while ($row = $db->sql_fetchrow($result))									{										$groups_sql_ary[] = array(											'group_id'			=> (int) $group_id,											'forum_id'			=> (int) $row['forum_id'],											'auth_option_id'	=> (int) $row['auth_option_id'],											'auth_role_id'		=> (int) $row['auth_role_id'],											'auth_setting'		=> (int) $row['auth_setting']										);									}									$db->sql_freeresult($result);									// Now insert the data									$db->sql_multi_insert(ACL_GROUPS_TABLE, $groups_sql_ary);									$auth->acl_clear_prefetch();								}							}							$cache->destroy('sql', GROUPS_TABLE);							$message = ($action == 'edit') ? 'GROUP_UPDATED' : 'GROUP_CREATED';							trigger_error($user->lang[$message] . adm_back_link($this->u_action));						}					}					if (sizeof($error))					{						$group_rank = $submit_ary['rank'];						$group_desc_data = array(							'text'			=> $group_desc,							'allow_bbcode'	=> $allow_desc_bbcode,							'allow_smilies'	=> $allow_desc_smilies,							'allow_urls'	=> $allow_desc_urls						);					}				}				else if (!$group_id)				{					$group_name = utf8_normalize_nfc(request_var('group_name', '', true));					$group_desc_data = array(						'text'			=> '',						'allow_bbcode'	=> true,						'allow_smilies'	=> true,						'allow_urls'	=> true					);					$group_rank = 0;					$group_type = GROUP_OPEN;				}				else				{					$group_name = $group_row['group_name'];					$group_desc_data = generate_text_for_edit($group_row['group_desc'], $group_row['group_desc_uid'], $group_row['group_desc_options']);					$group_type = $group_row['group_type'];					$group_rank = $group_row['group_rank'];				}				$sql = 'SELECT *					FROM ' . RANKS_TABLE . '					WHERE rank_special = 1					ORDER BY rank_title';				$result = $db->sql_query($sql);				$rank_options = '<option value="0"' . ((!$group_rank) ? ' selected="selected"' : '') . '>' . $user->lang['USER_DEFAULT'] . '</option>';				while ($row = $db->sql_fetchrow($result))				{					$selected = ($group_rank && $row['rank_id'] == $group_rank) ? ' selected="selected"' : '';					$rank_options .= '<option value="' . $row['rank_id'] . '"' . $selected . '>' . $row['rank_title'] . '</option>';				}				$db->sql_freeresult($result);				$type_free		= ($group_type == GROUP_FREE) ? ' checked="checked"' : '';				$type_open		= ($group_type == GROUP_OPEN) ? ' checked="checked"' : '';				$type_closed	= ($group_type == GROUP_CLOSED) ? ' checked="checked"' : '';				$type_hidden	= ($group_type == GROUP_HIDDEN) ? ' checked="checked"' : '';				$avatar_img = (!empty($group_row['group_avatar'])) ? get_user_avatar($group_row['group_avatar'], $group_row['group_avatar_type'], $group_row['group_avatar_width'], $group_row['group_avatar_height'], 'GROUP_AVATAR') : '<img src="' . $phpbb_admin_path . 'images/no_avatar.gif" alt="" />';				$display_gallery = (isset($_POST['display_gallery'])) ? true : false;				if ($config['allow_avatar_local'] && $display_gallery)				{					avatar_gallery($category, $avatar_select, 4);				}				$back_link = request_var('back_link', '');				switch ($back_link)				{					case 'acp_users_groups':						$u_back = append_sid("{$phpbb_admin_path}index.$phpEx", 'i=users&amp;mode=groups&amp;u=' . request_var('u', 0));					break;					default:						$u_back = $this->u_action;					break;				}				$template->assign_vars(array(					'S_EDIT'			=> true,					'S_ADD_GROUP'		=> ($action == 'add') ? true : false,					'S_GROUP_PERM'		=> ($action == 'add' && $auth->acl_get('a_authgroups') && $auth->acl_gets('a_aauth', 'a_fauth', 'a_mauth', 'a_uauth')) ? true : false,					'S_INCLUDE_SWATCH'	=> true,					'S_CAN_UPLOAD'		=> $can_upload,					'S_ERROR'			=> (sizeof($error)) ? true : false,					'S_SPECIAL_GROUP'	=> ($group_type == GROUP_SPECIAL) ? true : false,					'S_DISPLAY_GALLERY'	=> ($config['allow_avatar_local'] && !$display_gallery) ? true : false,					'S_IN_GALLERY'		=> ($config['allow_avatar_local'] && $display_gallery) ? true : false,					'S_USER_FOUNDER'	=> ($user->data['user_type'] == USER_FOUNDER) ? true : false,					'ERROR_MSG'				=> (sizeof($error)) ? implode('<br />', $error) : '',					'GROUP_NAME'			=> ($group_type == GROUP_SPECIAL) ? $user->lang['G_' . $group_name] : $group_name,					'GROUP_INTERNAL_NAME'	=> $group_name,					'GROUP_DESC'			=> $group_desc_data['text'],					'GROUP_RECEIVE_PM'		=> (isset($group_row['group_receive_pm']) && $group_row['group_receive_pm']) ? ' checked="checked"' : '',					'GROUP_FOUNDER_MANAGE'	=> (isset($group_row['group_founder_manage']) && $group_row['group_founder_manage']) ? ' checked="checked"' : '',					'GROUP_LEGEND'			=> (isset($group_row['group_legend']) && $group_row['group_legend']) ? ' checked="checked"' : '',					'GROUP_MESSAGE_LIMIT'	=> (isset($group_row['group_message_limit'])) ? $group_row['group_message_limit'] : 0,					'GROUP_MAX_RECIPIENTS'	=> (isset($group_row['group_max_recipients'])) ? $group_row['group_max_recipients'] : 0,					'GROUP_COLOUR'			=> (isset($group_row['group_colour'])) ? $group_row['group_colour'] : '',					'GROUP_SKIP_AUTH'		=> (!empty($group_row['group_skip_auth'])) ? ' checked="checked"' : '',					'S_DESC_BBCODE_CHECKED'	=> $group_desc_data['allow_bbcode'],					'S_DESC_URLS_CHECKED'	=> $group_desc_data['allow_urls'],					'S_DESC_SMILIES_CHECKED'=> $group_desc_data['allow_smilies'],					'S_RANK_OPTIONS'		=> $rank_options,					'S_GROUP_OPTIONS'		=> group_select_options(false, false, (($user->data['user_type'] == USER_FOUNDER) ? false : 0)),					'AVATAR'				=> $avatar_img,					'AVATAR_IMAGE'			=> $avatar_img,					'AVATAR_MAX_FILESIZE'	=> $config['avatar_filesize'],					'AVATAR_WIDTH'			=> (isset($group_row['group_avatar_width'])) ? $group_row['group_avatar_width'] : '',					'AVATAR_HEIGHT'			=> (isset($group_row['group_avatar_height'])) ? $group_row['group_avatar_height'] : '',					'GROUP_TYPE_FREE'		=> GROUP_FREE,					'GROUP_TYPE_OPEN'		=> GROUP_OPEN,					'GROUP_TYPE_CLOSED'		=> GROUP_CLOSED,					'GROUP_TYPE_HIDDEN'		=> GROUP_HIDDEN,					'GROUP_TYPE_SPECIAL'	=> GROUP_SPECIAL,					'GROUP_FREE'		=> $type_free,					'GROUP_OPEN'		=> $type_open,					'GROUP_CLOSED'		=> $type_closed,					'GROUP_HIDDEN'		=> $type_hidden,					'U_BACK'			=> $u_back,					'U_SWATCH'			=> append_sid("{$phpbb_admin_path}swatch.$phpEx", 'form=settings&amp;name=group_colour'),					'U_ACTION'			=> "{$this->u_action}&amp;action=$action&amp;g=$group_id",					'L_AVATAR_EXPLAIN'	=> sprintf($user->lang['AVATAR_EXPLAIN'], $config['avatar_max_width'], $config['avatar_max_height'], round($config['avatar_filesize'] / 1024)),				));				return;			break;			case 'list':				if (!$group_id)				{					trigger_error($user->lang['NO_GROUP'] . adm_back_link($this->u_action), E_USER_WARNING);				}				$this->page_title = 'GROUP_MEMBERS';				// Grab the leaders - always, on every page...				$sql = 'SELECT u.user_id, u.username, u.username_clean, u.user_regdate, u.user_colour, u.user_posts, u.group_id, ug.group_leader, ug.user_pending					FROM ' . USERS_TABLE . ' u, ' . USER_GROUP_TABLE . " ug					WHERE ug.group_id = $group_id						AND u.user_id = ug.user_id						AND ug.group_leader = 1					ORDER BY ug.group_leader DESC, ug.user_pending ASC, u.username_clean";				$result = $db->sql_query($sql);				while ($row = $db->sql_fetchrow($result))				{					$template->assign_block_vars('leader', array(						'U_USER_EDIT'		=> append_sid("{$phpbb_admin_path}index.$phpEx", "i=users&amp;action=edit&amp;u={$row['user_id']}"),						'USERNAME'			=> $row['username'],						'USERNAME_COLOUR'	=> $row['user_colour'],						'S_GROUP_DEFAULT'	=> ($row['group_id'] == $group_id) ? true : false,						'JOINED'			=> ($row['user_regdate']) ? $user->format_date($row['user_regdate']) : ' - ',						'USER_POSTS'		=> $row['user_posts'],						'USER_ID'			=> $row['user_id'],					));				}				$db->sql_freeresult($result);				// Total number of group members (non-leaders)				$sql = 'SELECT COUNT(user_id) AS total_members					FROM ' . USER_GROUP_TABLE . "					WHERE group_id = $group_id						AND group_leader = 0";				$result = $db->sql_query($sql);				$total_members = (int) $db->sql_fetchfield('total_members');				$db->sql_freeresult($result);				$s_action_options = '';				$options = array('default' => 'DEFAULT', 'approve' => 'APPROVE', 'demote' => 'DEMOTE', 'promote' => 'PROMOTE', 'deleteusers' => 'DELETE');				foreach ($options as $option => $lang)				{					$s_action_options .= '<option value="' . $option . '">' . $user->lang['GROUP_' . $lang] . '</option>';				}				$template->assign_vars(array(					'S_LIST'			=> true,					'S_GROUP_SPECIAL'	=> ($group_row['group_type'] == GROUP_SPECIAL) ? true : false,					'S_ACTION_OPTIONS'	=> $s_action_options,					'S_ON_PAGE'		=> on_page($total_members, $config['topics_per_page'], $start),					'PAGINATION'	=> generate_pagination($this->u_action . "&amp;action=$action&amp;g=$group_id", $total_members, $config['topics_per_page'], $start, true),					'GROUP_NAME'	=> ($group_row['group_type'] == GROUP_SPECIAL) ? $user->lang['G_' . $group_row['group_name']] : $group_row['group_name'],					'U_ACTION'			=> $this->u_action . "&amp;g=$group_id",					'U_BACK'			=> $this->u_action,					'U_FIND_USERNAME'	=> append_sid("{$phpbb_root_path}memberlist.$phpEx", 'mode=searchuser&amp;form=list&amp;field=usernames'),					'U_DEFAULT_ALL'		=> "{$this->u_action}&amp;action=default&amp;g=$group_id",				));				// Grab the members				$sql = 'SELECT u.user_id, u.username, u.username_clean, u.user_colour, u.user_regdate, u.user_posts, u.group_id, ug.group_leader, ug.user_pending					FROM ' . USERS_TABLE . ' u, ' . USER_GROUP_TABLE . " ug					WHERE ug.group_id = $group_id						AND u.user_id = ug.user_id						AND ug.group_leader = 0					ORDER BY ug.group_leader DESC, ug.user_pending ASC, u.username_clean";				$result = $db->sql_query_limit($sql, $config['topics_per_page'], $start);				$pending = false;				while ($row = $db->sql_fetchrow($result))				{					if ($row['user_pending'] && !$pending)					{						$template->assign_block_vars('member', array(							'S_PENDING'		=> true)						);						$pending = true;					}					$template->assign_block_vars('member', array(						'U_USER_EDIT'		=> append_sid("{$phpbb_admin_path}index.$phpEx", "i=users&amp;action=edit&amp;u={$row['user_id']}"),						'USERNAME'			=> $row['username'],						'USERNAME_COLOUR'	=> $row['user_colour'],						'S_GROUP_DEFAULT'	=> ($row['group_id'] == $group_id) ? true : false,						'JOINED'			=> ($row['user_regdate']) ? $user->format_date($row['user_regdate']) : ' - ',						'USER_POSTS'		=> $row['user_posts'],						'USER_ID'			=> $row['user_id'])					);				}				$db->sql_freeresult($result);				return;			break;		}		$template->assign_vars(array(			'U_ACTION'		=> $this->u_action,			'S_GROUP_ADD'	=> ($auth->acl_get('a_groupadd')) ? true : false)		);		// Get us all the groups		$sql = 'SELECT g.group_id, g.group_name, g.group_type			FROM ' . GROUPS_TABLE . ' g			ORDER BY g.group_type ASC, g.group_name';		$result = $db->sql_query($sql);		$lookup = $cached_group_data = array();		while ($row = $db->sql_fetchrow($result))		{			$type = ($row['group_type'] == GROUP_SPECIAL) ? 'special' : 'normal';			// used to determine what type a group is			$lookup[$row['group_id']] = $type;			// used for easy access to the data within a group			$cached_group_data[$type][$row['group_id']] = $row;			$cached_group_data[$type][$row['group_id']]['total_members'] = 0;		}		$db->sql_freeresult($result);		// How many people are in which group?		$sql = 'SELECT COUNT(ug.user_id) AS total_members, ug.group_id			FROM ' . USER_GROUP_TABLE . ' ug			WHERE ' . $db->sql_in_set('ug.group_id', array_keys($lookup)) . '			GROUP BY ug.group_id';		$result = $db->sql_query($sql);		while ($row = $db->sql_fetchrow($result))		{			$type = $lookup[$row['group_id']];			$cached_group_data[$type][$row['group_id']]['total_members'] = $row['total_members'];		}		$db->sql_freeresult($result);		// The order is... normal, then special		ksort($cached_group_data);		foreach ($cached_group_data as $type => $row_ary)		{			if ($type == 'special')			{				$template->assign_block_vars('groups', array(					'S_SPECIAL'			=> true)				);			}			foreach ($row_ary as $group_id => $row)			{				$group_name = (!empty($user->lang['G_' . $row['group_name']]))? $user->lang['G_' . $row['group_name']] : $row['group_name'];				$template->assign_block_vars('groups', array(					'U_LIST'		=> "{$this->u_action}&amp;action=list&amp;g=$group_id",					'U_EDIT'		=> "{$this->u_action}&amp;action=edit&amp;g=$group_id",					'U_DELETE'		=> ($auth->acl_get('a_groupdel')) ? "{$this->u_action}&amp;action=delete&amp;g=$group_id" : '',					'S_GROUP_SPECIAL'	=> ($row['group_type'] == GROUP_SPECIAL) ? true : false,					'GROUP_NAME'	=> $group_name,					'TOTAL_MEMBERS'	=> $row['total_members'],				));			}		}	}}?>
<?php/**** @package acp* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @ignore*/if (!defined('IN_PHPBB')){	exit;}/*** @package acp*/class acp_reasons{	var $u_action;	function main($id, $mode)	{		global $db, $user, $auth, $template, $cache;		global $config, $phpbb_root_path, $phpbb_admin_path, $phpEx;		$user->add_lang(array('mcp', 'acp/posting'));		// Set up general vars		$action = request_var('action', '');		$submit = (isset($_POST['submit'])) ? true : false;		$reason_id = request_var('id', 0);		$this->tpl_name = 'acp_reasons';		$this->page_title = 'ACP_REASONS';		$form_name = 'acp_reason';		add_form_key('acp_reason');		$error = array();		switch ($action)		{			case 'add':			case 'edit':				$reason_row = array(					'reason_title'			=> utf8_normalize_nfc(request_var('reason_title', '', true)),					'reason_description'	=> utf8_normalize_nfc(request_var('reason_description', '', true)),				);				if ($submit)				{					if (!check_form_key($form_name))					{						$error[] = $user->lang['FORM_INVALID'];					}					// Reason specified?					if (!$reason_row['reason_title'] || !$reason_row['reason_description'])					{						$error[] = $user->lang['NO_REASON_INFO'];					}					$check_double = ($action == 'add') ? true : false;					if ($action == 'edit')					{						$sql = 'SELECT reason_title							FROM ' . REPORTS_REASONS_TABLE . "							WHERE reason_id = $reason_id";						$result = $db->sql_query($sql);						$row = $db->sql_fetchrow($result);						$db->sql_freeresult($result);						if (strtolower($row['reason_title']) == 'other' || strtolower($reason_row['reason_title']) == 'other')						{							$reason_row['reason_title'] = 'other';						}						if ($row['reason_title'] != $reason_row['reason_title'])						{							$check_double = true;						}					}					// Check for same reason if adding it...					if ($check_double)					{						$sql = 'SELECT reason_id							FROM ' . REPORTS_REASONS_TABLE . "							WHERE reason_title = '" . $db->sql_escape($reason_row['reason_title']) . "'";						$result = $db->sql_query($sql);						$row = $db->sql_fetchrow($result);						$db->sql_freeresult($result);						if ($row || ($action == 'add' && strtolower($reason_row['reason_title']) == 'other'))						{							$error[] = $user->lang['REASON_ALREADY_EXIST'];						}					}					if (!sizeof($error))					{						// New reason?						if ($action == 'add')						{							// Get new order...							$sql = 'SELECT MAX(reason_order) as max_reason_order								FROM ' . REPORTS_REASONS_TABLE;							$result = $db->sql_query($sql);							$max_order = (int) $db->sql_fetchfield('max_reason_order');							$db->sql_freeresult($result);														$sql_ary = array(								'reason_title'			=> (string) $reason_row['reason_title'],								'reason_description'	=> (string) $reason_row['reason_description'],								'reason_order'			=> $max_order + 1							);							$db->sql_query('INSERT INTO ' . REPORTS_REASONS_TABLE . ' ' . $db->sql_build_array('INSERT', $sql_ary));							$log = 'ADDED';						}						else if ($reason_id)						{							$sql_ary = array(								'reason_title'			=> (string) $reason_row['reason_title'],								'reason_description'	=> (string) $reason_row['reason_description'],							);							$db->sql_query('UPDATE ' . REPORTS_REASONS_TABLE . ' SET ' . $db->sql_build_array('UPDATE', $sql_ary) . '								WHERE reason_id = ' . $reason_id);							$log = 'UPDATED';						}						add_log('admin', 'LOG_REASON_' . $log, $reason_row['reason_title']);						trigger_error($user->lang['REASON_' . $log] . adm_back_link($this->u_action));					}				}				else if ($reason_id)				{					$sql = 'SELECT *						FROM ' . REPORTS_REASONS_TABLE . '						WHERE reason_id = ' . $reason_id;					$result = $db->sql_query($sql);					$reason_row = $db->sql_fetchrow($result);					$db->sql_freeresult($result);					if (!$reason_row)					{						trigger_error($user->lang['NO_REASON'] . adm_back_link($this->u_action), E_USER_WARNING);					}				}				$l_title = ($action == 'edit') ? 'EDIT' : 'ADD';				$translated = false;				// If the reason is defined within the language file, we will use the localized version, else just use the database entry...				if (isset($user->lang['report_reasons']['TITLE'][strtoupper($reason_row['reason_title'])]) && isset($user->lang['report_reasons']['DESCRIPTION'][strtoupper($reason_row['reason_title'])]))				{					$translated = true;				}				$template->assign_vars(array(					'L_TITLE'		=> $user->lang['REASON_' . $l_title],					'U_ACTION'		=> $this->u_action . "&amp;id=$reason_id&amp;action=$action",					'U_BACK'		=> $this->u_action,					'ERROR_MSG'		=> (sizeof($error)) ? implode('<br />', $error) : '',										'REASON_TITLE'			=> $reason_row['reason_title'],					'REASON_DESCRIPTION'	=> $reason_row['reason_description'],					'TRANSLATED_TITLE'		=> ($translated) ? $user->lang['report_reasons']['TITLE'][strtoupper($reason_row['reason_title'])] : '',					'TRANSLATED_DESCRIPTION'=> ($translated) ? $user->lang['report_reasons']['DESCRIPTION'][strtoupper($reason_row['reason_title'])] : '',					'S_AVAILABLE_TITLES'	=> implode(', ', array_map('htmlspecialchars', array_keys($user->lang['report_reasons']['TITLE']))),					'S_EDIT_REASON'			=> true,					'S_TRANSLATED'			=> $translated,					'S_ERROR'				=> (sizeof($error)) ? true : false,					)				);				return;			break;			case 'delete':				$sql = 'SELECT *					FROM ' . REPORTS_REASONS_TABLE . '					WHERE reason_id = ' . $reason_id;				$result = $db->sql_query($sql);				$reason_row = $db->sql_fetchrow($result);				$db->sql_freeresult($result);				if (!$reason_row)				{					trigger_error($user->lang['NO_REASON'] . adm_back_link($this->u_action), E_USER_WARNING);				}				if (strtolower($reason_row['reason_title']) == 'other')				{					trigger_error($user->lang['NO_REMOVE_DEFAULT_REASON'] . adm_back_link($this->u_action), E_USER_WARNING);				}				// Let the deletion be confirmed...				if (confirm_box(true))				{					$sql = 'SELECT reason_id						FROM ' . REPORTS_REASONS_TABLE . "						WHERE LOWER(reason_title) = 'other'";					$result = $db->sql_query($sql);					$other_reason_id = (int) $db->sql_fetchfield('reason_id');					$db->sql_freeresult($result);					switch ($db->sql_layer)					{						// The ugly one!						case 'mysqli':						case 'mysql4':						case 'mysql':							// Change the reports using this reason to 'other'							$sql = 'UPDATE ' . REPORTS_TABLE . '								SET reason_id = ' . $other_reason_id . ", report_text = CONCAT('" . $db->sql_escape($reason_row['reason_description']) . "\n\n', report_text)								WHERE reason_id = $reason_id";						break;						// Standard? What's that?						case 'mssql':						case 'mssql_odbc':						case 'mssqlnative':							// Change the reports using this reason to 'other'							$sql = "DECLARE @ptrval binary(16)									SELECT @ptrval = TEXTPTR(report_text)										FROM " . REPORTS_TABLE . "									WHERE reason_id = " . $reason_id . "									UPDATETEXT " . REPORTS_TABLE . ".report_text @ptrval 0 0 '" . $db->sql_escape($reason_row['reason_description']) . "\n\n'									UPDATE " . REPORTS_TABLE . '										SET reason_id = ' . $other_reason_id . "									WHERE reason_id = $reason_id";						break;						// Teh standard						case 'postgres':						case 'oracle':						case 'firebird':						case 'sqlite':							// Change the reports using this reason to 'other'							$sql = 'UPDATE ' . REPORTS_TABLE . '								SET reason_id = ' . $other_reason_id . ", report_text = '" . $db->sql_escape($reason_row['reason_description']) . "\n\n' || report_text								WHERE reason_id = $reason_id";						break;					}					$db->sql_query($sql);					$db->sql_query('DELETE FROM ' . REPORTS_REASONS_TABLE . ' WHERE reason_id = ' . $reason_id);					add_log('admin', 'LOG_REASON_REMOVED', $reason_row['reason_title']);					trigger_error($user->lang['REASON_REMOVED'] . adm_back_link($this->u_action));				}				else				{					confirm_box(false, $user->lang['CONFIRM_OPERATION'], build_hidden_fields(array(						'i'			=> $id,						'mode'		=> $mode,						'action'	=> $action,						'id'		=> $reason_id))					);				}			break;			case 'move_up':			case 'move_down':				$order = request_var('order', 0);				$order_total = $order * 2 + (($action == 'move_up') ? -1 : 1);				$sql = 'UPDATE ' . REPORTS_REASONS_TABLE . '					SET reason_order = ' . $order_total . ' - reason_order					WHERE reason_order IN (' . $order . ', ' . (($action == 'move_up') ? $order - 1 : $order + 1) . ')';				$db->sql_query($sql);			break;		}		// By default, check that order is valid and fix it if necessary		$sql = 'SELECT reason_id, reason_order			FROM ' . REPORTS_REASONS_TABLE . '			ORDER BY reason_order';		$result = $db->sql_query($sql);		if ($row = $db->sql_fetchrow($result))		{			$order = 0;			do			{				++$order;								if ($row['reason_order'] != $order)				{					$sql = 'UPDATE ' . REPORTS_REASONS_TABLE . "						SET reason_order = $order						WHERE reason_id = {$row['reason_id']}";					$db->sql_query($sql);				}			}			while ($row = $db->sql_fetchrow($result));		}		$db->sql_freeresult($result);		$template->assign_vars(array(			'U_ACTION'			=> $this->u_action,			)		);		// Reason count		$sql = 'SELECT reason_id, COUNT(reason_id) AS reason_count			FROM ' . REPORTS_TABLE . '			GROUP BY reason_id';		$result = $db->sql_query($sql);		$reason_count = array();		while ($row = $db->sql_fetchrow($result))		{			$reason_count[$row['reason_id']] = $row['reason_count'];		}		$db->sql_freeresult($result);		$sql = 'SELECT *			FROM ' . REPORTS_REASONS_TABLE . '			ORDER BY reason_order ASC';		$result = $db->sql_query($sql);		while ($row = $db->sql_fetchrow($result))		{			$translated = false;			$other_reason = ($row['reason_title'] == 'other') ? true : false;			// If the reason is defined within the language file, we will use the localized version, else just use the database entry...			if (isset($user->lang['report_reasons']['TITLE'][strtoupper($row['reason_title'])]) && isset($user->lang['report_reasons']['DESCRIPTION'][strtoupper($row['reason_title'])]))			{				$row['reason_description'] = $user->lang['report_reasons']['DESCRIPTION'][strtoupper($row['reason_title'])];				$row['reason_title'] = $user->lang['report_reasons']['TITLE'][strtoupper($row['reason_title'])];				$translated = true;			}			$template->assign_block_vars('reasons', array(				'REASON_TITLE'			=> $row['reason_title'],				'REASON_DESCRIPTION'	=> $row['reason_description'],				'REASON_COUNT'			=> (isset($reason_count[$row['reason_id']])) ? $reason_count[$row['reason_id']] : 0,				'S_TRANSLATED'		=> $translated,				'S_OTHER_REASON'	=> $other_reason,				'U_EDIT'		=> $this->u_action . '&amp;action=edit&amp;id=' . $row['reason_id'],				'U_DELETE'		=> (!$other_reason) ? $this->u_action . '&amp;action=delete&amp;id=' . $row['reason_id'] : '',				'U_MOVE_UP'		=> $this->u_action . '&amp;action=move_up&amp;order=' . $row['reason_order'],				'U_MOVE_DOWN'	=> $this->u_action . '&amp;action=move_down&amp;order=' . $row['reason_order'])			);		}		$db->sql_freeresult($result);	}}?>
<?php/**** @package acm* @version $Id$* @copyright (c) 2005, 2009 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @ignore*/if (!defined('IN_PHPBB')){	exit;}// Include the abstract baseif (!class_exists('acm_memory')){	require("{$phpbb_root_path}includes/acm/acm_memory.$phpEx");}/*** ACM for XCache* @package acm** To use this module you need ini_get() enabled and the following INI settings configured as follows:* - xcache.var_size > 0* - xcache.admin.enable_auth = off (or xcache.admin.user and xcache.admin.password set)**/class acm extends acm_memory{	var $extension = 'XCache';	function acm()	{		parent::acm_memory();		if (!function_exists('ini_get') || (int) ini_get('xcache.var_size') <= 0)		{			trigger_error('Increase xcache.var_size setting above 0 or enable ini_get() to use this ACM module.', E_USER_ERROR);		}	}	/**	* Purge cache data	*	* @return void	*/	function purge()	{		// Run before for XCache, if admin functions are disabled it will terminate execution		parent::purge();		// If the admin authentication is enabled but not set up, this will cause a nasty error.		// Not much we can do about it though.		$n = xcache_count(XC_TYPE_VAR);		for ($i = 0; $i < $n; $i++)		{			xcache_clear_cache(XC_TYPE_VAR, $i);		}	}	/**	* Fetch an item from the cache	*	* @access protected	* @param string $var Cache key	* @return mixed Cached data	*/	function _read($var)	{		$result = xcache_get($this->key_prefix . $var);		return ($result !== null) ? $result : false;	}	/**	* Store data in the cache	*	* @access protected	* @param string $var Cache key	* @param mixed $data Data to store	* @param int $ttl Time-to-live of cached data	* @return bool True if the operation succeeded	*/	function _write($var, $data, $ttl = 2592000)	{		return xcache_set($this->key_prefix . $var, $data, $ttl);	}	/**	* Remove an item from the cache	*	* @access protected	* @param string $var Cache key	* @return bool True if the operation succeeded	*/	function _delete($var)	{		return xcache_unset($this->key_prefix . $var);	}	/**	* Check if a cache var exists	*	* @access protected	* @param string $var Cache key	* @return bool True if it exists, otherwise false	*/		function _isset($var)	{		return xcache_isset($this->key_prefix . $var);	}}?>
<?php return array(''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'2',''=>'3',''=>'4',''=>'5',''=>'6',''=>'7',''=>'8',''=>'9',''=>'3',''=>'4',''=>'5',''=>'6',''=>'7',''=>'8',''=>'9',''=>'4',''=>'5',''=>'6',''=>'7',''=>'8',''=>'9',''=>'1',''=>'2',''=>'3',''=>'4',''=>'5',''=>'6',''=>'7',''=>'8',''=>'9',''=>'1',''=>'2',''=>'3',''=>'4',''=>'5',''=>'2',''=>'3',''=>'3',''=>'4',''=>'5',''=>'6',''=>'7',''=>'8',''=>'9',''=>'1',''=>'2',''=>'3',''=>'3',''=>'4',''=>'5',''=>'',''=>'',''=>'1',''=>'2',''=>'3',''=>'3',''=>'4',''=>'5',''=>'3',''=>'3',''=>'4',''=>'4',''=>'4',''=>'4',''=>'6',''=>'7',''=>'7',''=>'7',''=>'8',''=>'8',''=>'9',''=>'9',''=>'9',''=>'9',''=>'2',''=>'3',''=>'4',''=>'5',''=>'6',''=>'1',''=>'2',''=>'3',''=>'4',''=>'4',''=>'5',''=>'5',''=>'',''=>'',''=>'1',''=>'2',''=>'1/3',''=>'2/3',''=>'5/6',''=>'1/3',''=>'2/3',''=>'1/8',''=>'1/4',''=>'1/6',''=>'1/4');
<?php return array(''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'1',''=>'10',''=>'20',''=>'100',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'1',''=>'2',''=>'3',''=>'4',''=>'10',''=>'20',''=>'100',''=>'1000');
<?php/**** @package ucp* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @ignore*/if (!defined('IN_PHPBB')){	exit;}/*** View private message*/function view_message($id, $mode, $folder_id, $msg_id, $folder, $message_row){	global $user, $template, $auth, $db, $cache;	global $phpbb_root_path, $phpEx, $config;	$user->add_lang(array('viewtopic', 'memberlist'));	$msg_id		= (int) $msg_id;	$folder_id	= (int) $folder_id;	$author_id	= (int) $message_row['author_id'];	$view		= request_var('view', '');	// Not able to view message, it was deleted by the sender	if ($message_row['pm_deleted'])	{		$meta_info = append_sid("{$phpbb_root_path}ucp.$phpEx", "i=pm&amp;folder=$folder_id");		$message = $user->lang['NO_AUTH_READ_REMOVED_MESSAGE'];		$message .= '<br /><br />' . sprintf($user->lang['RETURN_FOLDER'], '<a href="' . $meta_info . '">', '</a>');		trigger_error($message);	}	// Do not allow hold messages to be seen	if ($folder_id == PRIVMSGS_HOLD_BOX)	{		trigger_error('NO_AUTH_READ_HOLD_MESSAGE');	}	// Grab icons	$icons = $cache->obtain_icons();	$bbcode = false;	// Instantiate BBCode if need be	if ($message_row['bbcode_bitfield'])	{		include($phpbb_root_path . 'includes/bbcode.' . $phpEx);		$bbcode = new bbcode($message_row['bbcode_bitfield']);	}	// Assign TO/BCC Addresses to template	write_pm_addresses(array('to' => $message_row['to_address'], 'bcc' => $message_row['bcc_address']), $author_id);	$user_info = get_user_information($author_id, $message_row);	// Parse the message and subject	$message = censor_text($message_row['message_text']);	// Second parse bbcode here	if ($message_row['bbcode_bitfield'])	{		$bbcode->bbcode_second_pass($message, $message_row['bbcode_uid'], $message_row['bbcode_bitfield']);	}	// Always process smilies after parsing bbcodes	$message = bbcode_nl2br($message);	$message = smiley_text($message);	// Replace naughty words such as farty pants	$message_row['message_subject'] = censor_text($message_row['message_subject']);	// Editing information	if ($message_row['message_edit_count'] && $config['display_last_edited'])	{		$l_edit_time_total = ($message_row['message_edit_count'] == 1) ? $user->lang['EDITED_TIME_TOTAL'] : $user->lang['EDITED_TIMES_TOTAL'];		$l_edited_by = '<br /><br />' . sprintf($l_edit_time_total, (!$message_row['message_edit_user']) ? $message_row['username'] : $message_row['message_edit_user'], $user->format_date($message_row['message_edit_time'], false, true), $message_row['message_edit_count']);	}	else	{		$l_edited_by = '';	}	// Pull attachment data	$display_notice = false;	$attachments = array();	if ($message_row['message_attachment'] && $config['allow_pm_attach'])	{		if ($auth->acl_get('u_pm_download'))		{			$sql = 'SELECT *				FROM ' . ATTACHMENTS_TABLE . "				WHERE post_msg_id = $msg_id					AND in_message = 1				ORDER BY filetime DESC, post_msg_id ASC";			$result = $db->sql_query($sql);			while ($row = $db->sql_fetchrow($result))			{				$attachments[] = $row;			}			$db->sql_freeresult($result);			// No attachments exist, but message table thinks they do so go ahead and reset attach flags			if (!sizeof($attachments))			{				$sql = 'UPDATE ' . PRIVMSGS_TABLE . "					SET message_attachment = 0					WHERE msg_id = $msg_id";				$db->sql_query($sql);			}		}		else		{			$display_notice = true;		}	}	// Assign inline attachments	if (!empty($attachments))	{		$update_count = array();		parse_attachments(false, $message, $attachments, $update_count);		// Update the attachment download counts		if (sizeof($update_count))		{			$sql = 'UPDATE ' . ATTACHMENTS_TABLE . '				SET download_count = download_count + 1				WHERE ' . $db->sql_in_set('attach_id', array_unique($update_count));			$db->sql_query($sql);		}	}	$user_info['sig'] = '';	$signature = ($message_row['enable_sig'] && $config['allow_sig'] && $auth->acl_get('u_sig') && $user->optionget('viewsigs')) ? $user_info['user_sig'] : '';	// End signature parsing, only if needed	if ($signature)	{		$signature = censor_text($signature);		if ($user_info['user_sig_bbcode_bitfield'])		{			if ($bbcode === false)			{				include($phpbb_root_path . 'includes/bbcode.' . $phpEx);				$bbcode = new bbcode($user_info['user_sig_bbcode_bitfield']);			}			$bbcode->bbcode_second_pass($signature, $user_info['user_sig_bbcode_uid'], $user_info['user_sig_bbcode_bitfield']);		}		$signature = bbcode_nl2br($signature);		$signature = smiley_text($signature);	}	$url = append_sid("{$phpbb_root_path}ucp.$phpEx", 'i=pm');	// Number of "to" recipients	$num_recipients = (int) preg_match_all('/:?(u|g)_([0-9]+):?/', $message_row['to_address'], $match);	$bbcode_status	= ($config['allow_bbcode'] && $config['auth_bbcode_pm'] && $auth->acl_get('u_pm_bbcode')) ? true : false;	$template->assign_vars(array(		'MESSAGE_AUTHOR_FULL'		=> get_username_string('full', $author_id, $user_info['username'], $user_info['user_colour'], $user_info['username']),		'MESSAGE_AUTHOR_COLOUR'		=> get_username_string('colour', $author_id, $user_info['username'], $user_info['user_colour'], $user_info['username']),		'MESSAGE_AUTHOR'			=> get_username_string('username', $author_id, $user_info['username'], $user_info['user_colour'], $user_info['username']),		'U_MESSAGE_AUTHOR'			=> get_username_string('profile', $author_id, $user_info['username'], $user_info['user_colour'], $user_info['username']),		'RANK_TITLE'		=> $user_info['rank_title'],		'RANK_IMG'			=> $user_info['rank_image'],		'AUTHOR_AVATAR'		=> (isset($user_info['avatar'])) ? $user_info['avatar'] : '',		'AUTHOR_JOINED'		=> $user->format_date($user_info['user_regdate']),		'AUTHOR_POSTS'		=> (int) $user_info['user_posts'],		'AUTHOR_FROM'		=> (!empty($user_info['user_from'])) ? $user_info['user_from'] : '',		'ONLINE_IMG'		=> (!$config['load_onlinetrack']) ? '' : ((isset($user_info['online']) && $user_info['online']) ? $user->img('icon_user_online', $user->lang['ONLINE']) : $user->img('icon_user_offline', $user->lang['OFFLINE'])),		'S_ONLINE'			=> (!$config['load_onlinetrack']) ? false : ((isset($user_info['online']) && $user_info['online']) ? true : false),		'DELETE_IMG'		=> $user->img('icon_post_delete', $user->lang['DELETE_MESSAGE']),		'INFO_IMG'			=> $user->img('icon_post_info', $user->lang['VIEW_PM_INFO']),		'PROFILE_IMG'		=> $user->img('icon_user_profile', $user->lang['READ_PROFILE']),		'EMAIL_IMG'			=> $user->img('icon_contact_email', $user->lang['SEND_EMAIL']),		'QUOTE_IMG'			=> $user->img('icon_post_quote', $user->lang['POST_QUOTE_PM']),		'REPLY_IMG'			=> $user->img('button_pm_reply', $user->lang['POST_REPLY_PM']),		'REPORT_IMG'		=> $user->img('icon_post_report', 'REPORT_PM'),		'EDIT_IMG'			=> $user->img('icon_post_edit', $user->lang['POST_EDIT_PM']),		'MINI_POST_IMG'		=> $user->img('icon_post_target', $user->lang['PM']),		'SENT_DATE'			=> ($view == 'print') ? $user->format_date($message_row['message_time'], false, true) : $user->format_date($message_row['message_time']),		'SUBJECT'			=> $message_row['message_subject'],		'MESSAGE'			=> $message,		'SIGNATURE'			=> ($message_row['enable_sig']) ? $signature : '',		'EDITED_MESSAGE'	=> $l_edited_by,		'MESSAGE_ID'		=> $message_row['msg_id'],		'U_PM'			=> ($config['allow_privmsg'] && $auth->acl_get('u_sendpm') && ($user_info['user_allow_pm'] || $auth->acl_gets('a_', 'm_') || $auth->acl_getf_global('m_'))) ? append_sid("{$phpbb_root_path}ucp.$phpEx", 'i=pm&amp;mode=compose&amp;u=' . $author_id) : '',		'U_WWW'			=> (!empty($user_info['user_website'])) ? $user_info['user_website'] : '',		'U_ICQ'			=> ($user_info['user_icq']) ? 'http://www.icq.com/people/' . urlencode($user_info['user_icq']) . '/' : '',		'U_AIM'			=> ($user_info['user_aim'] && $auth->acl_get('u_sendim')) ? append_sid("{$phpbb_root_path}memberlist.$phpEx", 'mode=contact&amp;action=aim&amp;u=' . $author_id) : '',		'U_YIM'			=> ($user_info['user_yim']) ? 'http://edit.yahoo.com/config/send_webmesg?.target=' . urlencode($user_info['user_yim']) . '&amp;.src=pg' : '',		'U_MSN'			=> ($user_info['user_msnm'] && $auth->acl_get('u_sendim')) ? append_sid("{$phpbb_root_path}memberlist.$phpEx", 'mode=contact&amp;action=msnm&amp;u=' . $author_id) : '',		'U_JABBER'		=> ($user_info['user_jabber'] && $auth->acl_get('u_sendim')) ? append_sid("{$phpbb_root_path}memberlist.$phpEx", 'mode=contact&amp;action=jabber&amp;u=' . $author_id) : '',		'U_DELETE'			=> ($auth->acl_get('u_pm_delete')) ? "$url&amp;mode=compose&amp;action=delete&amp;f=$folder_id&amp;p=" . $message_row['msg_id'] : '',		'U_EMAIL'			=> $user_info['email'],		'U_REPORT'			=> ($config['allow_pm_report']) ? append_sid("{$phpbb_root_path}report.$phpEx", "pm=" . $message_row['msg_id']) : '',		'U_QUOTE'			=> ($auth->acl_get('u_sendpm') && $author_id != ANONYMOUS) ? "$url&amp;mode=compose&amp;action=quote&amp;f=$folder_id&amp;p=" . $message_row['msg_id'] : '',		'U_EDIT'			=> (($message_row['message_time'] > time() - ($config['pm_edit_time'] * 60) || !$config['pm_edit_time']) && $folder_id == PRIVMSGS_OUTBOX && $auth->acl_get('u_pm_edit')) ? "$url&amp;mode=compose&amp;action=edit&amp;f=$folder_id&amp;p=" . $message_row['msg_id'] : '',		'U_POST_REPLY_PM'	=> ($auth->acl_get('u_sendpm') && $author_id != ANONYMOUS) ? "$url&amp;mode=compose&amp;action=reply&amp;f=$folder_id&amp;p=" . $message_row['msg_id'] : '',		'U_POST_REPLY_ALL'	=> ($auth->acl_get('u_sendpm') && $author_id != ANONYMOUS) ? "$url&amp;mode=compose&amp;action=reply&amp;f=$folder_id&amp;reply_to_all=1&amp;p=" . $message_row['msg_id'] : '',		'U_PREVIOUS_PM'		=> "$url&amp;f=$folder_id&amp;p=" . $message_row['msg_id'] . "&amp;view=previous",		'U_NEXT_PM'			=> "$url&amp;f=$folder_id&amp;p=" . $message_row['msg_id'] . "&amp;view=next",		'U_PM_ACTION'		=> $url . '&amp;mode=compose&amp;f=' . $folder_id . '&amp;p=' . $message_row['msg_id'],		'S_HAS_ATTACHMENTS'	=> (sizeof($attachments)) ? true : false,		'S_DISPLAY_NOTICE'	=> $display_notice && $message_row['message_attachment'],		'S_AUTHOR_DELETED'	=> ($author_id == ANONYMOUS) ? true : false,		'S_SPECIAL_FOLDER'	=> in_array($folder_id, array(PRIVMSGS_NO_BOX, PRIVMSGS_OUTBOX)),		'S_PM_RECIPIENTS'	=> $num_recipients,		'S_BBCODE_ALLOWED'	=> ($bbcode_status) ? 1 : 0,		'U_PRINT_PM'		=> ($config['print_pm'] && $auth->acl_get('u_pm_printpm')) ? "$url&amp;f=$folder_id&amp;p=" . $message_row['msg_id'] . "&amp;view=print" : '',		'U_FORWARD_PM'		=> ($config['forward_pm'] && $auth->acl_get('u_sendpm') && $auth->acl_get('u_pm_forward')) ? "$url&amp;mode=compose&amp;action=forward&amp;f=$folder_id&amp;p=" . $message_row['msg_id'] : '')	);	// Display not already displayed Attachments for this post, we already parsed them. ;)	if (isset($attachments) && sizeof($attachments))	{		foreach ($attachments as $attachment)		{			$template->assign_block_vars('attachment', array(				'DISPLAY_ATTACHMENT'	=> $attachment)			);		}	}	if (!isset($_REQUEST['view']) || $_REQUEST['view'] != 'print')	{		// Message History		if (message_history($msg_id, $user->data['user_id'], $message_row, $folder))		{			$template->assign_var('S_DISPLAY_HISTORY', true);		}	}}/*** Get user information (only for message display)*/function get_user_information($user_id, $user_row){	global $db, $auth, $user, $cache;	global $phpbb_root_path, $phpEx, $config;	if (!$user_id)	{		return array();	}	if (empty($user_row))	{		$sql = 'SELECT *			FROM ' . USERS_TABLE . '			WHERE user_id = ' . (int) $user_id;		$result = $db->sql_query($sql);		$user_row = $db->sql_fetchrow($result);		$db->sql_freeresult($result);	}	// Some standard values	$user_row['online'] = false;	$user_row['rank_title'] = $user_row['rank_image'] = $user_row['rank_image_src'] = $user_row['email'] = '';	// Generate online information for user	if ($config['load_onlinetrack'])	{		$sql = 'SELECT session_user_id, MAX(session_time) as online_time, MIN(session_viewonline) AS viewonline			FROM ' . SESSIONS_TABLE . "			WHERE session_user_id = $user_id			GROUP BY session_user_id";		$result = $db->sql_query_limit($sql, 1);		$row = $db->sql_fetchrow($result);		$db->sql_freeresult($result);		$update_time = $config['load_online_time'] * 60;		if ($row)		{			$user_row['online'] = (time() - $update_time < $row['online_time'] && ($row['viewonline'] || $auth->acl_get('u_viewonline'))) ? true : false;		}	}	if (!function_exists('get_user_avatar'))	{		include($phpbb_root_path . 'includes/functions_display.' . $phpEx);	}	$user_row['avatar'] = ($user->optionget('viewavatars')) ? get_user_avatar($user_row['user_avatar'], $user_row['user_avatar_type'], $user_row['user_avatar_width'], $user_row['user_avatar_height']) : '';	get_user_rank($user_row['user_rank'], $user_row['user_posts'], $user_row['rank_title'], $user_row['rank_image'], $user_row['rank_image_src']);	if ((!empty($user_row['user_allow_viewemail']) && $auth->acl_get('u_sendemail')) || $auth->acl_get('a_email'))	{		$user_row['email'] = ($config['board_email_form'] && $config['email_enable']) ? append_sid("{$phpbb_root_path}memberlist.$phpEx", "mode=email&amp;u=$user_id") : ((($config['board_hide_emails'] && !$auth->acl_get('a_email')) || empty($user_row['user_email'])) ? '' : 'mailto:' . $user_row['user_email']);	}	return $user_row;}?>
