<?php/**** acp_common [English]** @package language* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** DO NOT CHANGE*/if (!defined('IN_PHPBB')){	exit;}if (empty($lang) || !is_array($lang)){	$lang = array();}// DEVELOPERS PLEASE NOTE//// All language files should use UTF-8 as their encoding and the files must not contain a BOM.//// Placeholders can now contain order information, e.g. instead of// 'Page %s of %s' you can (and should) write 'Page %1$s of %2$s', this allows// translators to re-order the output of data while ensuring it remains correct//// You do not need this where single placeholders are used, e.g. 'Message %d' is fine// equally where a string contains only two placeholders which are used to wrap text// in a url you again do not need to specify an order e.g., 'Click %sHERE%s' is fine// Common$lang = array_merge($lang, array(	'ACP_ADMINISTRATORS'		=> 'Administrators',	'ACP_ADMIN_LOGS'			=> 'Admin log',	'ACP_ADMIN_ROLES'			=> 'Admin roles',	'ACP_ATTACHMENTS'			=> 'Attachments',	'ACP_ATTACHMENT_SETTINGS'	=> 'Attachment settings',	'ACP_AUTH_SETTINGS'			=> 'Authentication',	'ACP_AUTOMATION'			=> 'Automation',	'ACP_AVATAR_SETTINGS'		=> 'Avatar settings',	'ACP_BACKUP'				=> 'Backup',	'ACP_BAN'					=> 'Banning',	'ACP_BAN_EMAILS'			=> 'Ban e-mails',	'ACP_BAN_IPS'				=> 'Ban IPs',	'ACP_BAN_USERNAMES'			=> 'Ban usernames',	'ACP_BBCODES'				=> 'BBCodes',	'ACP_BOARD_CONFIGURATION'	=> 'Board configuration',	'ACP_BOARD_FEATURES'		=> 'Board features',	'ACP_BOARD_MANAGEMENT'		=> 'Board management',	'ACP_BOARD_SETTINGS'		=> 'Board settings',	'ACP_BOTS'					=> 'Spiders/Robots',	'ACP_CAPTCHA'				=> 'CAPTCHA',	'ACP_CAT_DATABASE'			=> 'Database',	'ACP_CAT_DOT_MODS'			=> '.MODs',	'ACP_CAT_FORUMS'			=> 'Forums',	'ACP_CAT_GENERAL'			=> 'General',	'ACP_CAT_MAINTENANCE'		=> 'Maintenance',	'ACP_CAT_PERMISSIONS'		=> 'Permissions',	'ACP_CAT_POSTING'			=> 'Posting',	'ACP_CAT_STYLES'			=> 'Styles',	'ACP_CAT_SYSTEM'			=> 'System',	'ACP_CAT_USERGROUP'			=> 'Users and Groups',	'ACP_CAT_USERS'				=> 'Users',	'ACP_CLIENT_COMMUNICATION'	=> 'Client communication',	'ACP_COOKIE_SETTINGS'		=> 'Cookie settings',	'ACP_CRITICAL_LOGS'			=> 'Error log',	'ACP_CUSTOM_PROFILE_FIELDS'	=> 'Custom profile fields',	'ACP_DATABASE'				=> 'Database management',	'ACP_DISALLOW'				=> 'Disallow',	'ACP_DISALLOW_USERNAMES'	=> 'Disallow usernames',	'ACP_EMAIL_SETTINGS'		=> 'E-mail settings',	'ACP_EXTENSION_GROUPS'		=> 'Manage extension groups',	'ACP_FORUM_BASED_PERMISSIONS'	=> 'Forum based permissions',	'ACP_FORUM_LOGS'				=> 'Forum logs',	'ACP_FORUM_MANAGEMENT'			=> 'Forum management',	'ACP_FORUM_MODERATORS'			=> 'Forum moderators',	'ACP_FORUM_PERMISSIONS'			=> 'Forum permissions',	'ACP_FORUM_PERMISSIONS_COPY'	=> 'Copy forum permissions',	'ACP_FORUM_ROLES'				=> 'Forum roles',	'ACP_GENERAL_CONFIGURATION'		=> 'General configuration',	'ACP_GENERAL_TASKS'				=> 'General tasks',	'ACP_GLOBAL_MODERATORS'			=> 'Global moderators',	'ACP_GLOBAL_PERMISSIONS'		=> 'Global permissions',	'ACP_GROUPS'					=> 'Groups',	'ACP_GROUPS_FORUM_PERMISSIONS'	=> 'Groups forum permissions',	'ACP_GROUPS_MANAGE'				=> 'Manage groups',	'ACP_GROUPS_MANAGEMENT'			=> 'Group management',	'ACP_GROUPS_PERMISSIONS'		=> 'Groups permissions',	'ACP_ICONS'					=> 'Topic icons',	'ACP_ICONS_SMILIES'			=> 'Topic icons/smilies',	'ACP_IMAGESETS'				=> 'Imagesets',	'ACP_INACTIVE_USERS'		=> 'Inactive users',	'ACP_INDEX'					=> 'ACP index',	'ACP_JABBER_SETTINGS'		=> 'Jabber settings',	'ACP_LANGUAGE'				=> 'Language management',	'ACP_LANGUAGE_PACKS'		=> 'Language packs',	'ACP_LOAD_SETTINGS'			=> 'Load settings',	'ACP_LOGGING'				=> 'Logging',	'ACP_MAIN'					=> 'ACP index',	'ACP_MANAGE_EXTENSIONS'		=> 'Manage extensions',	'ACP_MANAGE_FORUMS'			=> 'Manage forums',	'ACP_MANAGE_RANKS'			=> 'Manage ranks',	'ACP_MANAGE_REASONS'		=> 'Manage report/denial reasons',	'ACP_MANAGE_USERS'			=> 'Manage users',	'ACP_MASS_EMAIL'			=> 'Mass e-mail',	'ACP_MESSAGES'				=> 'Messages',	'ACP_MESSAGE_SETTINGS'		=> 'Private message settings',	'ACP_MODULE_MANAGEMENT'		=> 'Module management',	'ACP_MOD_LOGS'				=> 'Moderator log',	'ACP_MOD_ROLES'				=> 'Moderator roles',	'ACP_NO_ITEMS'				=> 'There are no items yet.',	'ACP_ORPHAN_ATTACHMENTS'	=> 'Orphaned attachments',	'ACP_PERMISSIONS'			=> 'Permissions',	'ACP_PERMISSION_MASKS'		=> 'Permission masks',	'ACP_PERMISSION_ROLES'		=> 'Permission roles',	'ACP_PERMISSION_TRACE'		=> 'Permission trace',	'ACP_PHP_INFO'				=> 'PHP information',	'ACP_POST_SETTINGS'			=> 'Post settings',	'ACP_PRUNE_FORUMS'			=> 'Prune forums',	'ACP_PRUNE_USERS'			=> 'Prune users',	'ACP_PRUNING'				=> 'Pruning',	'ACP_QUICK_ACCESS'			=> 'Quick access',	'ACP_RANKS'					=> 'Ranks',	'ACP_REASONS'				=> 'Report/denial reasons',	'ACP_REGISTER_SETTINGS'		=> 'User registration settings',	'ACP_RESTORE'				=> 'Restore',	'ACP_FEED'					=> 'Feed management',	'ACP_FEED_SETTINGS'			=> 'Feed settings',	'ACP_SEARCH'				=> 'Search configuration',	'ACP_SEARCH_INDEX'			=> 'Search index',	'ACP_SEARCH_SETTINGS'		=> 'Search settings',	'ACP_SECURITY_SETTINGS'		=> 'Security settings',	'ACP_SEND_STATISTICS'		=> 'Send statistical information',	'ACP_SERVER_CONFIGURATION'	=> 'Server configuration',	'ACP_SERVER_SETTINGS'		=> 'Server settings',	'ACP_SIGNATURE_SETTINGS'	=> 'Signature settings',	'ACP_SMILIES'				=> 'Smilies',	'ACP_STYLE_COMPONENTS'		=> 'Style components',	'ACP_STYLE_MANAGEMENT'		=> 'Style management',	'ACP_STYLES'				=> 'Styles',	'ACP_SUBMIT_CHANGES'		=> 'Submit changes',	'ACP_TEMPLATES'				=> 'Templates',	'ACP_THEMES'				=> 'Themes',	'ACP_UPDATE'					=> 'Updating',	'ACP_USERS_FORUM_PERMISSIONS'	=> 'Users forum permissions',	'ACP_USERS_LOGS'				=> 'User logs',	'ACP_USERS_PERMISSIONS'			=> 'Users permissions',	'ACP_USER_ATTACH'				=> 'Attachments',	'ACP_USER_AVATAR'				=> 'Avatar',	'ACP_USER_FEEDBACK'				=> 'Feedback',	'ACP_USER_GROUPS'				=> 'Groups',	'ACP_USER_MANAGEMENT'			=> 'User management',	'ACP_USER_OVERVIEW'				=> 'Overview',	'ACP_USER_PERM'					=> 'Permissions',	'ACP_USER_PREFS'				=> 'Preferences',	'ACP_USER_PROFILE'				=> 'Profile',	'ACP_USER_RANK'					=> 'Rank',	'ACP_USER_ROLES'				=> 'User roles',	'ACP_USER_SECURITY'				=> 'User security',	'ACP_USER_SIG'					=> 'Signature',	'ACP_USER_WARNINGS'				=> 'Warnings',	'ACP_VC_SETTINGS'					=> 'Spambot countermeasures',	'ACP_VC_CAPTCHA_DISPLAY'			=> 'CAPTCHA image preview',	'ACP_VERSION_CHECK'					=> 'Check for updates',	'ACP_VIEW_ADMIN_PERMISSIONS'		=> 'View administrative permissions',	'ACP_VIEW_FORUM_MOD_PERMISSIONS'	=> 'View forum moderation permissions',	'ACP_VIEW_FORUM_PERMISSIONS'		=> 'View forum-based permissions',	'ACP_VIEW_GLOBAL_MOD_PERMISSIONS'	=> 'View global moderation permissions',	'ACP_VIEW_USER_PERMISSIONS'			=> 'View user-based permissions',	'ACP_WORDS'					=> 'Word censoring',	'ACTION'				=> 'Action',	'ACTIONS'				=> 'Actions',	'ACTIVATE'				=> 'Activate',	'ADD'					=> 'Add',	'ADMIN'					=> 'Administration',	'ADMIN_INDEX'			=> 'Admin index',	'ADMIN_PANEL'			=> 'Administration Control Panel',	'ADM_LOGOUT'			=> 'ACP&nbsp;Logout',	'ADM_LOGGED_OUT'		=> 'Successfully logged out from Administration Control Panel',	'BACK'					=> 'Back',	'COLOUR_SWATCH'			=> 'Web-safe colour swatch',	'CONFIG_UPDATED'		=> 'Configuration updated successfully.',	'DEACTIVATE'				=> 'Deactivate',	'DIRECTORY_DOES_NOT_EXIST'	=> 'The entered path %s does not exist.',	'DIRECTORY_NOT_DIR'			=> 'The entered path %s is not a directory.',	'DIRECTORY_NOT_WRITABLE'	=> 'The entered path %s is not writable.',	'DISABLE'					=> 'Disable',	'DOWNLOAD'					=> 'Download',	'DOWNLOAD_AS'				=> 'Download as',	'DOWNLOAD_STORE'			=> 'Download or store file',	'DOWNLOAD_STORE_EXPLAIN'	=> 'You may directly download the file or save it in your <samp>store/</samp> folder.',	'EDIT'					=> 'Edit',	'ENABLE'				=> 'Enable',	'EXPORT_DOWNLOAD'		=> 'Download',	'EXPORT_STORE'			=> 'Store',	'GENERAL_OPTIONS'		=> 'General options',	'GENERAL_SETTINGS'		=> 'General settings',	'GLOBAL_MASK'			=> 'Global permission mask',	'INSTALL'				=> 'Install',	'IP'					=> 'User IP',	'IP_HOSTNAME'			=> 'IP addresses or hostnames',	'LOGGED_IN_AS'			=> 'You are logged in as:',	'LOGIN_ADMIN'			=> 'To administer the board you must be an authenticated user.',	'LOGIN_ADMIN_CONFIRM'	=> 'To administer the board you must re-authenticate yourself.',	'LOGIN_ADMIN_SUCCESS'	=> 'You have successfully authenticated and will now be redirected to the Administration Control Panel.',	'LOOK_UP_FORUM'			=> 'Select a forum',	'LOOK_UP_FORUMS_EXPLAIN'=> 'You are able to select more than one forum.',	'MANAGE'				=> 'Manage',	'MENU_TOGGLE'			=> 'Hide or display the side menu',	'MORE'					=> 'More',			// Not used at the moment	'MORE_INFORMATION'		=> 'More information ',	'MOVE_DOWN'				=> 'Move down',	'MOVE_UP'				=> 'Move up',	'NOTIFY'				=> 'Notification',	'NO_ADMIN'				=> 'You are not authorised to administer this board.',	'NO_EMAILS_DEFINED'		=> 'No valid e-mail addresses found.',	'NO_PASSWORD_SUPPLIED'	=> 'You need to enter your password to access the Administration Control Panel.',	'OFF'					=> 'Off',	'ON'					=> 'On',	'PARSE_BBCODE'						=> 'Parse BBCode',	'PARSE_SMILIES'						=> 'Parse smilies',	'PARSE_URLS'						=> 'Parse links',	'PERMISSIONS_TRANSFERRED'			=> 'Permissions transferred',	'PERMISSIONS_TRANSFERRED_EXPLAIN'	=> 'You currently have the permissions from %1$s. You are able to browse the board with this users permissions, but not access the administration control panel since admin permissions were not transferred. You can <a href="%2$s"><strong>revert to your permission set</strong></a> at any time.',	'PROCEED_TO_ACP'					=> '%sProceed to the ACP%s',	'REMIND'							=> 'Remind',	'RESYNC'							=> 'Resynchronise',	'RETURN_TO'							=> 'Return to',	'SELECT_ANONYMOUS'		=> 'Select anonymous user',	'SELECT_OPTION'			=> 'Select option',	'SETTING_TOO_LOW'		=> 'The provided value for the setting %1$s is too low. The minimum acceptable value is %2$d.',	'SETTING_TOO_BIG'		=> 'The provided value for the setting %1$s is too high. The maximum acceptable value is %2$d.',	'SETTING_TOO_LONG'		=> 'The provided value for the setting %1$s is too long. The maximum acceptable length is %2$d.',	'SETTING_TOO_SHORT'		=> 'The provided value for the setting %1$s is too short. The minimum acceptable length is %2$d.',	'SHOW_ALL_OPERATIONS'	=> 'Show all operations',	'UCP'					=> 'User Control Panel',	'USERNAMES_EXPLAIN'		=> 'Place each username on a separate line.',	'USER_CONTROL_PANEL'	=> 'User Control Panel',	'WARNING'				=> 'Warning',));// PHP info$lang = array_merge($lang, array(	'ACP_PHP_INFO_EXPLAIN'	=> 'This page lists information on the version of PHP installed on this server. It includes details of loaded modules, available variables and default settings. This information may be useful when diagnosing problems. Please be aware that some hosting companies will limit what information is displayed here for security reasons. You are advised to not give out any details on this page except when asked by <a href="http://www.phpbb.com/about/team/">official team members</a> on the support forums.',	'NO_PHPINFO_AVAILABLE'	=> 'Information about your PHP configuration is unable to be determined. Phpinfo() has been disabled for security reasons.',));// Logs$lang = array_merge($lang, array(	'ACP_ADMIN_LOGS_EXPLAIN'	=> 'This lists all the actions carried out by board administrators. You can sort by username, date, IP or action. If you have appropriate permissions you can also clear individual operations or the log as a whole.',	'ACP_CRITICAL_LOGS_EXPLAIN'	=> 'This lists the actions carried out by the board itself. This log provides you with information you are able to use for solving specific problems, for example non-delivery of e-mails. You can sort by username, date, IP or action. If you have appropriate permissions you can also clear individual operations or the log as a whole.',	'ACP_MOD_LOGS_EXPLAIN'		=> 'This lists all actions done on forums, topics and posts as well as actions carried out on users by moderators, including banning. You can sort by username, date, IP or action. If you have appropriate permissions you can also clear individual operations or the log as a whole.',	'ACP_USERS_LOGS_EXPLAIN'	=> 'This lists all actions carried out by users or on users (reports, warnings and user notes).',	'ALL_ENTRIES'				=> 'All entries',	'DISPLAY_LOG'	=> 'Display entries from previous',	'NO_ENTRIES'	=> 'No log entries for this period.',	'SORT_IP'		=> 'IP address',	'SORT_DATE'		=> 'Date',	'SORT_ACTION'	=> 'Log action',));// Index page$lang = array_merge($lang, array(	'ADMIN_INTRO'				=> 'Thank you for choosing phpBB as your board solution. This screen will give you a quick overview of all the various statistics of your board. The links on the left hand side of this screen allow you to control every aspect of your board experience. Each page will have instructions on how to use the tools.',	'ADMIN_LOG'					=> 'Logged administrator actions',	'ADMIN_LOG_INDEX_EXPLAIN'	=> 'This gives an overview of the last five actions carried out by board administrators. A full copy of the log can be viewed from the appropriate menu item or following the link below.',	'AVATAR_DIR_SIZE'			=> 'Avatar directory size',	'BOARD_STARTED'		=> 'Board started',	'BOARD_VERSION'		=> 'Board version',	'DATABASE_SERVER_INFO'	=> 'Database server',	'DATABASE_SIZE'			=> 'Database size',	// Enviroment configuration checks, mbstring related	'ERROR_MBSTRING_FUNC_OVERLOAD'					=> 'Function overloading is improperly configured',	'ERROR_MBSTRING_FUNC_OVERLOAD_EXPLAIN'			=> '<var>mbstring.func_overload</var> must be set to either 0 or 4. You can check the current value on the <samp>PHP information</samp> page.',	'ERROR_MBSTRING_ENCODING_TRANSLATION'			=> 'Transparent character encoding is improperly configured',	'ERROR_MBSTRING_ENCODING_TRANSLATION_EXPLAIN'	=> '<var>mbstring.encoding_translation</var> must be set to 0. You can check the current value on the <samp>PHP information</samp> page.',	'ERROR_MBSTRING_HTTP_INPUT'						=> 'HTTP input character conversion is improperly configured',	'ERROR_MBSTRING_HTTP_INPUT_EXPLAIN'				=> '<var>mbstring.http_input</var> must be set to <samp>pass</samp>. You can check the current value on the <samp>PHP information</samp> page.',	'ERROR_MBSTRING_HTTP_OUTPUT'					=> 'HTTP output character conversion is improperly configured',	'ERROR_MBSTRING_HTTP_OUTPUT_EXPLAIN'			=> '<var>mbstring.http_output</var> must be set to <samp>pass</samp>. You can check the current value on the <samp>PHP information</samp> page.',	'FILES_PER_DAY'		=> 'Attachments per day',	'FORUM_STATS'		=> 'Board statistics',	'GZIP_COMPRESSION'	=> 'GZip compression',	'NOT_AVAILABLE'		=> 'Not available',	'NUMBER_FILES'		=> 'Number of attachments',	'NUMBER_POSTS'		=> 'Number of posts',	'NUMBER_TOPICS'		=> 'Number of topics',	'NUMBER_USERS'		=> 'Number of users',	'NUMBER_ORPHAN'		=> 'Orphan attachments',	'PHP_VERSION_OLD'	=> 'The version of PHP on this server will no longer be supported by future versions of phpBB. %sDetails%s',	'POSTS_PER_DAY'		=> 'Posts per day',	'PURGE_CACHE'			=> 'Purge the cache',	'PURGE_CACHE_CONFIRM'	=> 'Are you sure you wish to purge the cache?',	'PURGE_CACHE_EXPLAIN'	=> 'Purge all cache related items, this includes any cached template files or queries.',	'PURGE_SESSIONS'			=> 'Purge all sessions',	'PURGE_SESSIONS_CONFIRM'	=> 'Are you sure you wish to purge all sessions? This will log out all users.',	'PURGE_SESSIONS_EXPLAIN'	=> 'Purge all sessions. This will log out all users by truncating the session table.',	'RESET_DATE'					=> 'Reset boards start date',	'RESET_DATE_CONFIRM'			=> 'Are you sure you wish to reset the boards start date?',	'RESET_ONLINE'					=> 'Reset most users ever online',	'RESET_ONLINE_CONFIRM'			=> 'Are you sure you wish to reset the most users ever online counter?',	'RESYNC_POSTCOUNTS'				=> 'Resynchronise post counts',	'RESYNC_POSTCOUNTS_EXPLAIN'		=> 'Only existing posts will be taken into consideration. Pruned posts will not be counted.',	'RESYNC_POSTCOUNTS_CONFIRM'		=> 'Are you sure you wish to resynchronise post counts?',	'RESYNC_POST_MARKING'			=> 'Resynchronise dotted topics',	'RESYNC_POST_MARKING_CONFIRM'	=> 'Are you sure you wish to resynchronise dotted topics?',	'RESYNC_POST_MARKING_EXPLAIN'	=> 'First unmarks all topics and then correctly marks topics that have seen any activity during the past six months.',	'RESYNC_STATS'					=> 'Resynchronise statistics',	'RESYNC_STATS_CONFIRM'			=> 'Are you sure you wish to resynchronise statistics?',	'RESYNC_STATS_EXPLAIN'			=> 'Recalculates the total number of posts, topics, users and files.',	'RUN'							=> 'Run now',	'STATISTIC'					=> 'Statistic',	'STATISTIC_RESYNC_OPTIONS'	=> 'Resynchronise or reset statistics',	'TOPICS_PER_DAY'	=> 'Topics per day',	'UPLOAD_DIR_SIZE'	=> 'Size of posted attachments',	'USERS_PER_DAY'		=> 'Users per day',	'VALUE'						=> 'Value',	'VERSIONCHECK_FAIL'			=> 'Failed to obtain latest version information.',	'VERSIONCHECK_FORCE_UPDATE'	=> 'Re-Check version',	'VIEW_ADMIN_LOG'			=> 'View administrator log',	'VIEW_INACTIVE_USERS'		=> 'View inactive users',	'WELCOME_PHPBB'			=> 'Welcome to phpBB',	'WRITABLE_CONFIG'		=> 'Your config file (config.php) is currently world-writable. We strongly encourage you to change the permissions to 640 or at least to 644 (for example: <a href="http://en.wikipedia.org/wiki/Chmod" rel="external">chmod</a> 640 config.php).',));// Inactive Users$lang = array_merge($lang, array(	'INACTIVE_DATE'					=> 'Inactive date',	'INACTIVE_REASON'				=> 'Reason',	'INACTIVE_REASON_MANUAL'		=> 'Account deactivated by administrator',	'INACTIVE_REASON_PROFILE'		=> 'Profile details changed',	'INACTIVE_REASON_REGISTER'		=> 'Newly registered account',	'INACTIVE_REASON_REMIND'		=> 'Forced user account reactivation',	'INACTIVE_REASON_UNKNOWN'		=> 'Unknown',	'INACTIVE_USERS'				=> 'Inactive users',	'INACTIVE_USERS_EXPLAIN'		=> 'This is a list of users who have registered but whose accounts are inactive. You can activate, delete or remind (by sending an e-mail) these users if you wish.',	'INACTIVE_USERS_EXPLAIN_INDEX'	=> 'This is a list of the last 10 registered users who have inactive accounts. A full list is available from the appropriate menu item or by following the link below from where you can activate, delete or remind (by sending an e-mail) these users if you wish.',	'NO_INACTIVE_USERS'	=> 'No inactive users',	'SORT_INACTIVE'		=> 'Inactive date',	'SORT_LAST_VISIT'	=> 'Last visit',	'SORT_REASON'		=> 'Reason',	'SORT_REG_DATE'		=> 'Registration date',	'SORT_LAST_REMINDER'=> 'Last reminded',	'SORT_REMINDER'		=> 'Reminder sent',	'USER_IS_INACTIVE'		=> 'User is inactive',));// Send statistics page$lang = array_merge($lang, array(	'EXPLAIN_SEND_STATISTICS'	=> 'Please send information about your server and board configurations to phpBB for statistical analysis. All information that could identify you or your website has been removed - the data is entirely <strong>anonymous</strong>. We base decisions about future phpBB versions on this information. The statistics are made available publically. We also share this data with the PHP project, the programming language phpBB is made with.',	'EXPLAIN_SHOW_STATISTICS'	=> 'Using the button below you can preview all variables that will be transmitted.',	'DONT_SEND_STATISTICS'		=> 'Return to the ACP if you do not wish to send statistical information to phpBB.',	'GO_ACP_MAIN'				=> 'Go to the ACP start page',	'HIDE_STATISTICS'			=> 'Hide details',	'SEND_STATISTICS'			=> 'Send statistical information',	'SHOW_STATISTICS'			=> 'Show details',	'THANKS_SEND_STATISTICS'	=> 'Thank you for submitting your information.',));// Log Entries$lang = array_merge($lang, array(	'LOG_ACL_ADD_USER_GLOBAL_U_'		=> '<strong>Added or edited users user permissions</strong><br /> %s',	'LOG_ACL_ADD_GROUP_GLOBAL_U_'		=> '<strong>Added or edited groups user permissions</strong><br /> %s',	'LOG_ACL_ADD_USER_GLOBAL_M_'		=> '<strong>Added or edited users global moderator permissions</strong><br /> %s',	'LOG_ACL_ADD_GROUP_GLOBAL_M_'		=> '<strong>Added or edited groups global moderator permissions</strong><br /> %s',	'LOG_ACL_ADD_USER_GLOBAL_A_'		=> '<strong>Added or edited users administrator permissions</strong><br /> %s',	'LOG_ACL_ADD_GROUP_GLOBAL_A_'		=> '<strong>Added or edited groups administrator permissions</strong><br /> %s',	'LOG_ACL_ADD_ADMIN_GLOBAL_A_'		=> '<strong>Added or edited Administrators</strong><br /> %s',	'LOG_ACL_ADD_MOD_GLOBAL_M_'			=> '<strong>Added or edited Global Moderators</strong><br /> %s',	'LOG_ACL_ADD_USER_LOCAL_F_'			=> '<strong>Added or edited users forum access</strong> from %1$s<br /> %2$s',	'LOG_ACL_ADD_USER_LOCAL_M_'			=> '<strong>Added or edited users forum moderator access</strong> from %1$s<br /> %2$s',	'LOG_ACL_ADD_GROUP_LOCAL_F_'		=> '<strong>Added or edited groups forum access</strong> from %1$s<br /> %2$s',	'LOG_ACL_ADD_GROUP_LOCAL_M_'		=> '<strong>Added or edited groups forum moderator access</strong> from %1$s<br /> %2$s',	'LOG_ACL_ADD_MOD_LOCAL_M_'			=> '<strong>Added or edited Moderators</strong> from %1$s<br /> %2$s',	'LOG_ACL_ADD_FORUM_LOCAL_F_'		=> '<strong>Added or edited forum permissions</strong> from %1$s<br /> %2$s',	'LOG_ACL_DEL_ADMIN_GLOBAL_A_'		=> '<strong>Removed Administrators</strong><br /> %s',	'LOG_ACL_DEL_MOD_GLOBAL_M_'			=> '<strong>Removed Global Moderators</strong><br /> %s',	'LOG_ACL_DEL_MOD_LOCAL_M_'			=> '<strong>Removed Moderators</strong> from %1$s<br /> %2$s',	'LOG_ACL_DEL_FORUM_LOCAL_F_'		=> '<strong>Removed User/Group forum permissions</strong> from %1$s<br /> %2$s',	'LOG_ACL_TRANSFER_PERMISSIONS'		=> '<strong>Permissions transferred from</strong><br /> %s',	'LOG_ACL_RESTORE_PERMISSIONS'		=> '<strong>Own permissions restored after using permissions from</strong><br /> %s',	'LOG_ADMIN_AUTH_FAIL'		=> '<strong>Failed administration login attempt</strong>',	'LOG_ADMIN_AUTH_SUCCESS'	=> '<strong>Successful administration login</strong>',	'LOG_ATTACHMENTS_DELETED'	=> '<strong>Removed user attachments</strong><br /> %s',	'LOG_ATTACH_EXT_ADD'		=> '<strong>Added or edited attachment extension</strong><br /> %s',	'LOG_ATTACH_EXT_DEL'		=> '<strong>Removed attachment extension</strong><br /> %s',	'LOG_ATTACH_EXT_UPDATE'		=> '<strong>Updated attachment extension</strong><br /> %s',	'LOG_ATTACH_EXTGROUP_ADD'	=> '<strong>Added extension group</strong><br /> %s',	'LOG_ATTACH_EXTGROUP_EDIT'	=> '<strong>Edited extension group</strong><br /> %s',	'LOG_ATTACH_EXTGROUP_DEL'	=> '<strong>Removed extension group</strong><br /> %s',	'LOG_ATTACH_FILEUPLOAD'		=> '<strong>Orphan File uploaded to Post</strong><br /> ID %1$d - %2$s',	'LOG_ATTACH_ORPHAN_DEL'		=> '<strong>Orphan Files deleted</strong><br /> %s',	'LOG_BAN_EXCLUDE_USER'	=> '<strong>Excluded user from ban</strong> for reason <em>%1$s</em><br /> %2$s',	'LOG_BAN_EXCLUDE_IP'	=> '<strong>Excluded IP from ban</strong> for reason <em>%1$s</em><br /> %2$s',	'LOG_BAN_EXCLUDE_EMAIL' => '<strong>Excluded e-mail from ban</strong> for reason <em>%1$s</em><br /> %2$s',	'LOG_BAN_USER'			=> '<strong>Banned user</strong> for reason <em>%1$s</em><br /> %2$s',	'LOG_BAN_IP'			=> '<strong>Banned IP</strong> for reason <em>%1$s</em><br /> %2$s',	'LOG_BAN_EMAIL'			=> '<strong>Banned e-mail</strong> for reason <em>%1$s</em><br /> %2$s',	'LOG_UNBAN_USER'		=> '<strong>Unbanned user</strong><br /> %s',	'LOG_UNBAN_IP'			=> '<strong>Unbanned IP</strong><br /> %s',	'LOG_UNBAN_EMAIL'		=> '<strong>Unbanned e-mail</strong><br /> %s',	'LOG_BBCODE_ADD'		=> '<strong>Added new BBCode</strong><br /> %s',	'LOG_BBCODE_EDIT'		=> '<strong>Edited BBCode</strong><br /> %s',	'LOG_BBCODE_DELETE'		=> '<strong>Deleted BBCode</strong><br /> %s',	'LOG_BOT_ADDED'		=> '<strong>New bot added</strong><br /> %s',	'LOG_BOT_DELETE'	=> '<strong>Deleted bot</strong><br /> %s',	'LOG_BOT_UPDATED'	=> '<strong>Existing bot updated</strong><br /> %s',	'LOG_CLEAR_ADMIN'		=> '<strong>Cleared admin log</strong>',	'LOG_CLEAR_CRITICAL'	=> '<strong>Cleared error log</strong>',	'LOG_CLEAR_MOD'			=> '<strong>Cleared moderator log</strong>',	'LOG_CLEAR_USER'		=> '<strong>Cleared user log</strong><br /> %s',	'LOG_CLEAR_USERS'		=> '<strong>Cleared user logs</strong>',	'LOG_CONFIG_ATTACH'			=> '<strong>Altered attachment settings</strong>',	'LOG_CONFIG_AUTH'			=> '<strong>Altered authentication settings</strong>',	'LOG_CONFIG_AVATAR'			=> '<strong>Altered avatar settings</strong>',	'LOG_CONFIG_COOKIE'			=> '<strong>Altered cookie settings</strong>',	'LOG_CONFIG_EMAIL'			=> '<strong>Altered e-mail settings</strong>',	'LOG_CONFIG_FEATURES'		=> '<strong>Altered board features</strong>',	'LOG_CONFIG_LOAD'			=> '<strong>Altered load settings</strong>',	'LOG_CONFIG_MESSAGE'		=> '<strong>Altered private message settings</strong>',	'LOG_CONFIG_POST'			=> '<strong>Altered post settings</strong>',	'LOG_CONFIG_REGISTRATION'	=> '<strong>Altered user registration settings</strong>',	'LOG_CONFIG_FEED'			=> '<strong>Altered syndication feeds settings</strong>',	'LOG_CONFIG_SEARCH'			=> '<strong>Altered search settings</strong>',	'LOG_CONFIG_SECURITY'		=> '<strong>Altered security settings</strong>',	'LOG_CONFIG_SERVER'			=> '<strong>Altered server settings</strong>',	'LOG_CONFIG_SETTINGS'		=> '<strong>Altered board settings</strong>',	'LOG_CONFIG_SIGNATURE'		=> '<strong>Altered signature settings</strong>',	'LOG_CONFIG_VISUAL'			=> '<strong>Altered anti-spambot settings</strong>',	'LOG_APPROVE_TOPIC'			=> '<strong>Approved topic</strong><br /> %s',	'LOG_BUMP_TOPIC'			=> '<strong>User bumped topic</strong><br /> %s',	'LOG_DELETE_POST'			=> '<strong>Deleted post %1$s written by</strong><br /> %2$s',	'LOG_DELETE_SHADOW_TOPIC'	=> '<strong>Deleted shadow topic</strong><br /> %s',	'LOG_DELETE_TOPIC'			=> '<strong>Deleted topic %1$s written by</strong><br /> %2$s',	'LOG_FORK'					=> '<strong>Copied topic</strong><br /> from %s',	'LOG_LOCK'					=> '<strong>Locked topic</strong><br /> %s',	'LOG_LOCK_POST'				=> '<strong>Locked post</strong><br /> %s',	'LOG_MERGE'					=> '<strong>Merged posts</strong> into topic<br /> %s',	'LOG_MOVE'					=> '<strong>Moved topic</strong><br /> from %1$s to %2$s',	'LOG_PM_REPORT_CLOSED'		=> '<strong>Closed PM report</strong><br /> %s',	'LOG_PM_REPORT_DELETED'		=> '<strong>Deleted PM report</strong><br /> %s',	'LOG_POST_APPROVED'			=> '<strong>Approved post</strong><br /> %s',	'LOG_POST_DISAPPROVED'		=> '<strong>Disapproved post %1$s with the following reason</strong><br /> %2$s',	'LOG_POST_EDITED'			=> '<strong>Edited post %1$s written by</strong><br /> %2$s',	'LOG_REPORT_CLOSED'			=> '<strong>Closed report</strong><br /> %s',	'LOG_REPORT_DELETED'		=> '<strong>Deleted report</strong><br /> %s',	'LOG_SPLIT_DESTINATION'		=> '<strong>Moved split posts</strong><br /> to %s',	'LOG_SPLIT_SOURCE'			=> '<strong>Split posts</strong><br /> from %s',	'LOG_TOPIC_APPROVED'		=> '<strong>Approved topic</strong><br /> %s',	'LOG_TOPIC_DISAPPROVED'		=> '<strong>Disapproved topic %1$s with the following reason</strong><br />%2$s',	'LOG_TOPIC_RESYNC'			=> '<strong>Resynchronised topic counters</strong><br /> %s',	'LOG_TOPIC_TYPE_CHANGED'	=> '<strong>Changed topic type</strong><br /> %s',	'LOG_UNLOCK'				=> '<strong>Unlocked topic</strong><br /> %s',	'LOG_UNLOCK_POST'			=> '<strong>Unlocked post</strong><br /> %s',	'LOG_DISALLOW_ADD'		=> '<strong>Added disallowed username</strong><br /> %s',	'LOG_DISALLOW_DELETE'	=> '<strong>Deleted disallowed username</strong>',	'LOG_DB_BACKUP'			=> '<strong>Database backup</strong>',	'LOG_DB_DELETE'			=> '<strong>Deleted database backup</strong>',	'LOG_DB_RESTORE'		=> '<strong>Restored database backup</strong>',	'LOG_DOWNLOAD_EXCLUDE_IP'	=> '<strong>Excluded IP/hostname from download list</strong><br /> %s',	'LOG_DOWNLOAD_IP'			=> '<strong>Added IP/hostname to download list</strong><br /> %s',	'LOG_DOWNLOAD_REMOVE_IP'	=> '<strong>Removed IP/hostname from download list</strong><br /> %s',	'LOG_ERROR_JABBER'		=> '<strong>Jabber error</strong><br /> %s',	'LOG_ERROR_EMAIL'		=> '<strong>E-mail error</strong><br /> %s',	'LOG_FORUM_ADD'							=> '<strong>Created new forum</strong><br /> %s',	'LOG_FORUM_COPIED_PERMISSIONS'			=> '<strong>Copied forum permissions</strong> from %1$s<br /> %2$s',	'LOG_FORUM_DEL_FORUM'					=> '<strong>Deleted forum</strong><br /> %s',	'LOG_FORUM_DEL_FORUMS'					=> '<strong>Deleted forum and its subforums</strong><br /> %s',	'LOG_FORUM_DEL_MOVE_FORUMS'				=> '<strong>Deleted forum and moved subforums</strong> to %1$s<br /> %2$s',	'LOG_FORUM_DEL_MOVE_POSTS'				=> '<strong>Deleted forum and moved posts </strong> to %1$s<br /> %2$s',	'LOG_FORUM_DEL_MOVE_POSTS_FORUMS'		=> '<strong>Deleted forum and its subforums, moved posts</strong> to %1$s<br /> %2$s',	'LOG_FORUM_DEL_MOVE_POSTS_MOVE_FORUMS'	=> '<strong>Deleted forum, moved posts</strong> to %1$s <strong>and subforums</strong> to %2$s<br /> %3$s',	'LOG_FORUM_DEL_POSTS'					=> '<strong>Deleted forum and its posts</strong><br /> %s',	'LOG_FORUM_DEL_POSTS_FORUMS'			=> '<strong>Deleted forum, its posts and subforums</strong><br /> %s',	'LOG_FORUM_DEL_POSTS_MOVE_FORUMS'		=> '<strong>Deleted forum and its posts, moved subforums</strong> to %1$s<br /> %2$s',	'LOG_FORUM_EDIT'						=> '<strong>Edited forum details</strong><br /> %s',	'LOG_FORUM_MOVE_DOWN'					=> '<strong>Moved forum</strong> %1$s <strong>below</strong> %2$s',	'LOG_FORUM_MOVE_UP'						=> '<strong>Moved forum</strong> %1$s <strong>above</strong> %2$s',	'LOG_FORUM_SYNC'						=> '<strong>Re-synchronised forum</strong><br /> %s',	'LOG_GENERAL_ERROR'	=> '<strong>A general error occured</strong>: %1$s <br /> %2$s',	'LOG_GROUP_CREATED'		=> '<strong>New usergroup created</strong><br /> %s',	'LOG_GROUP_DEFAULTS'	=> '<strong>Group %1$s made default for members</strong><br /> %2$s',	'LOG_GROUP_DELETE'		=> '<strong>Usergroup deleted</strong><br /> %s',	'LOG_GROUP_DEMOTED'		=> '<strong>Leaders demoted in usergroup</strong> %1$s<br /> %2$s',	'LOG_GROUP_PROMOTED'	=> '<strong>Members promoted to leader in usergroup</strong> %1$s<br /> %2$s',	'LOG_GROUP_REMOVE'		=> '<strong>Members removed from usergroup</strong> %1$s<br /> %2$s',	'LOG_GROUP_UPDATED'		=> '<strong>Usergroup details updated</strong><br /> %s',	'LOG_MODS_ADDED'		=> '<strong>Added new leaders to usergroup</strong> %1$s<br /> %2$s',	'LOG_USERS_ADDED'		=> '<strong>Added new members to usergroup</strong> %1$s<br /> %2$s',	'LOG_USERS_APPROVED'	=> '<strong>Users approved in usergroup</strong> %1$s<br /> %2$s',	'LOG_USERS_PENDING'		=> '<strong>Users requested to join group %1$s and need to be approved</strong><br /> %2$s',	'LOG_IMAGE_GENERATION_ERROR'	=> '<strong>Error while creating image</strong><br /> Error in %1$s on line %2$s: %3$s',	'LOG_IMAGESET_ADD_DB'			=> '<strong>Added new imageset to database</strong><br /> %s',	'LOG_IMAGESET_ADD_FS'			=> '<strong>Add new imageset on filesystem</strong><br /> %s',	'LOG_IMAGESET_DELETE'			=> '<strong>Deleted imageset</strong><br /> %s',	'LOG_IMAGESET_EDIT_DETAILS'		=> '<strong>Edited imageset details</strong><br /> %s',	'LOG_IMAGESET_EDIT'				=> '<strong>Edited imageset</strong><br /> %s',	'LOG_IMAGESET_EXPORT'			=> '<strong>Exported imageset</strong><br /> %s',	'LOG_IMAGESET_LANG_MISSING'		=> '<strong>Imageset misses %2$s localisation</strong><br /> %1$s',	'LOG_IMAGESET_LANG_REFRESHED'	=> '<strong>Refreshed %2$s localisation of imageset</strong><br /> %1$s',	'LOG_IMAGESET_REFRESHED'		=> '<strong>Refreshed imageset</strong><br /> %s',	'LOG_INACTIVE_ACTIVATE'	=> '<strong>Activated inactive users</strong><br /> %s',	'LOG_INACTIVE_DELETE'	=> '<strong>Deleted inactive users</strong><br /> %s',	'LOG_INACTIVE_REMIND'	=> '<strong>Sent reminder e-mails to inactive users</strong><br /> %s',	'LOG_INSTALL_CONVERTED'	=> '<strong>Converted from %1$s to phpBB %2$s</strong>',	'LOG_INSTALL_INSTALLED'	=> '<strong>Installed phpBB %s</strong>',	'LOG_IP_BROWSER_FORWARDED_CHECK'	=> '<strong>Session IP/browser/X_FORWARDED_FOR check failed</strong><br />User IP <em>%1$s</em> checked against session IP <em>%2$s</em>, user browser string <em>%3$s</em> checked against session browser string <em>%4$s</em> and user X_FORWARDED_FOR string <em>%5$s</em> checked against session X_FORWARDED_FOR string <em>%6$s</em>.',	'LOG_JAB_CHANGED'			=> '<strong>Jabber account changed</strong>',	'LOG_JAB_PASSCHG'			=> '<strong>Jabber password changed</strong>',	'LOG_JAB_REGISTER'			=> '<strong>Jabber account registered</strong>',	'LOG_JAB_SETTINGS_CHANGED'	=> '<strong>Jabber settings changed</strong>',	'LOG_LANGUAGE_PACK_DELETED'		=> '<strong>Deleted language pack</strong><br /> %s',	'LOG_LANGUAGE_PACK_INSTALLED'	=> '<strong>Installed language pack</strong><br /> %s',	'LOG_LANGUAGE_PACK_UPDATED'		=> '<strong>Updated language pack details</strong><br /> %s',	'LOG_LANGUAGE_FILE_REPLACED'	=> '<strong>Replaced language file</strong><br /> %s',	'LOG_LANGUAGE_FILE_SUBMITTED'	=> '<strong>Submitted language file and placed in store folder</strong><br /> %s',	'LOG_MASS_EMAIL'		=> '<strong>Sent mass e-mail</strong><br /> %s',	'LOG_MCP_CHANGE_POSTER'	=> '<strong>Changed poster in topic %1$s</strong><br /> from %2$s to %3$s',	'LOG_MODULE_DISABLE'	=> '<strong>Module disabled</strong><br /> %s',	'LOG_MODULE_ENABLE'		=> '<strong>Module enabled</strong><br /> %s',	'LOG_MODULE_MOVE_DOWN'	=> '<strong>Module moved down</strong><br /> %1$s below %2$s',	'LOG_MODULE_MOVE_UP'	=> '<strong>Module moved up</strong><br /> %1$s above %2$s',	'LOG_MODULE_REMOVED'	=> '<strong>Module removed</strong><br /> %s',	'LOG_MODULE_ADD'		=> '<strong>Module added</strong><br /> %s',	'LOG_MODULE_EDIT'		=> '<strong>Module edited</strong><br /> %s',	'LOG_A_ROLE_ADD'		=> '<strong>Admin role added</strong><br /> %s',	'LOG_A_ROLE_EDIT'		=> '<strong>Admin role edited</strong><br /> %s',	'LOG_A_ROLE_REMOVED'	=> '<strong>Admin role removed</strong><br /> %s',	'LOG_F_ROLE_ADD'		=> '<strong>Forum role added</strong><br /> %s',	'LOG_F_ROLE_EDIT'		=> '<strong>Forum role edited</strong><br /> %s',	'LOG_F_ROLE_REMOVED'	=> '<strong>Forum role removed</strong><br /> %s',	'LOG_M_ROLE_ADD'		=> '<strong>Moderator role added</strong><br /> %s',	'LOG_M_ROLE_EDIT'		=> '<strong>Moderator role edited</strong><br /> %s',	'LOG_M_ROLE_REMOVED'	=> '<strong>Moderator role removed</strong><br /> %s',	'LOG_U_ROLE_ADD'		=> '<strong>User role added</strong><br /> %s',	'LOG_U_ROLE_EDIT'		=> '<strong>User role edited</strong><br /> %s',	'LOG_U_ROLE_REMOVED'	=> '<strong>User role removed</strong><br /> %s',	'LOG_PROFILE_FIELD_ACTIVATE'	=> '<strong>Profile field activated</strong><br /> %s',	'LOG_PROFILE_FIELD_CREATE'		=> '<strong>Profile field added</strong><br /> %s',	'LOG_PROFILE_FIELD_DEACTIVATE'	=> '<strong>Profile field deactivated</strong><br /> %s',	'LOG_PROFILE_FIELD_EDIT'		=> '<strong>Profile field changed</strong><br /> %s',	'LOG_PROFILE_FIELD_REMOVED'		=> '<strong>Profile field removed</strong><br /> %s',	'LOG_PRUNE'					=> '<strong>Pruned forums</strong><br /> %s',	'LOG_AUTO_PRUNE'			=> '<strong>Auto-pruned forums</strong><br /> %s',	'LOG_PRUNE_USER_DEAC'		=> '<strong>Users deactivated</strong><br /> %s',	'LOG_PRUNE_USER_DEL_DEL'	=> '<strong>Users pruned and posts deleted</strong><br /> %s',	'LOG_PRUNE_USER_DEL_ANON'	=> '<strong>Users pruned and posts retained</strong><br /> %s',	'LOG_PURGE_CACHE'			=> '<strong>Purged cache</strong>',	'LOG_PURGE_SESSIONS'		=> '<strong>Purged sessions</strong>',	'LOG_RANK_ADDED'		=> '<strong>Added new rank</strong><br /> %s',	'LOG_RANK_REMOVED'		=> '<strong>Removed rank</strong><br /> %s',	'LOG_RANK_UPDATED'		=> '<strong>Updated rank</strong><br /> %s',	'LOG_REASON_ADDED'		=> '<strong>Added report/denial reason</strong><br /> %s',	'LOG_REASON_REMOVED'	=> '<strong>Removed report/denial reason</strong><br /> %s',	'LOG_REASON_UPDATED'	=> '<strong>Updated report/denial reason</strong><br /> %s',	'LOG_REFERER_INVALID'		=> '<strong>Referer validation failed</strong><br />Referer was <em>%1$s</em>. The request was rejected and the session killed.',	'LOG_RESET_DATE'			=> '<strong>Board start date reset</strong>',	'LOG_RESET_ONLINE'			=> '<strong>Most users online reset</strong>',	'LOG_RESYNC_POSTCOUNTS'		=> '<strong>User post counts resynchronised</strong>',	'LOG_RESYNC_POST_MARKING'	=> '<strong>Dotted topics resynchronised</strong>',	'LOG_RESYNC_STATS'			=> '<strong>Post, topic and user statistics resynchronised</strong>',	'LOG_SEARCH_INDEX_CREATED'	=> '<strong>Created search index for</strong><br /> %s',	'LOG_SEARCH_INDEX_REMOVED'	=> '<strong>Removed search index for</strong><br /> %s',	'LOG_STYLE_ADD'				=> '<strong>Added new style</strong><br /> %s',	'LOG_STYLE_DELETE'			=> '<strong>Deleted style</strong><br /> %s',	'LOG_STYLE_EDIT_DETAILS'	=> '<strong>Edited style</strong><br /> %s',	'LOG_STYLE_EXPORT'			=> '<strong>Exported style</strong><br /> %s',	'LOG_TEMPLATE_ADD_DB'			=> '<strong>Added new template set to database</strong><br /> %s',	'LOG_TEMPLATE_ADD_FS'			=> '<strong>Add new template set on filesystem</strong><br /> %s',	'LOG_TEMPLATE_CACHE_CLEARED'	=> '<strong>Deleted cached versions of template files in template set <em>%1$s</em></strong><br /> %2$s',	'LOG_TEMPLATE_DELETE'			=> '<strong>Deleted template set</strong><br /> %s',	'LOG_TEMPLATE_EDIT'				=> '<strong>Edited template set <em>%1$s</em></strong><br /> %2$s',	'LOG_TEMPLATE_EDIT_DETAILS'		=> '<strong>Edited template details</strong><br /> %s',	'LOG_TEMPLATE_EXPORT'			=> '<strong>Exported template set</strong><br /> %s',	'LOG_TEMPLATE_REFRESHED'		=> '<strong>Refreshed template set</strong><br /> %s',	'LOG_THEME_ADD_DB'			=> '<strong>Added new theme to database</strong><br /> %s',	'LOG_THEME_ADD_FS'			=> '<strong>Add new theme on filesystem</strong><br /> %s',	'LOG_THEME_DELETE'			=> '<strong>Theme deleted</strong><br /> %s',	'LOG_THEME_EDIT_DETAILS'	=> '<strong>Edited theme details</strong><br /> %s',	'LOG_THEME_EDIT'			=> '<strong>Edited theme <em>%1$s</em></strong>',	'LOG_THEME_EDIT_FILE'		=> '<strong>Edited theme <em>%1$s</em></strong><br /> Modified file <em>%2$s</em>',	'LOG_THEME_EXPORT'			=> '<strong>Exported theme</strong><br /> %s',	'LOG_THEME_REFRESHED'		=> '<strong>Refreshed theme</strong><br /> %s',	'LOG_UPDATE_DATABASE'	=> '<strong>Updated Database from version %1$s to version %2$s</strong>',	'LOG_UPDATE_PHPBB'		=> '<strong>Updated phpBB from version %1$s to version %2$s</strong>',	'LOG_USER_ACTIVE'		=> '<strong>User activated</strong><br /> %s',	'LOG_USER_BAN_USER'		=> '<strong>Banned User via user management</strong> for reason <em>%1$s</em><br /> %2$s',	'LOG_USER_BAN_IP'		=> '<strong>Banned IP via user management</strong> for reason <em>%1$s</em><br /> %2$s',	'LOG_USER_BAN_EMAIL'	=> '<strong>Banned e-mail via user management</strong> for reason <em>%1$s</em><br /> %2$s',	'LOG_USER_DELETED'		=> '<strong>Deleted user</strong><br /> %s',	'LOG_USER_DEL_ATTACH'	=> '<strong>Removed all attachments made by the user</strong><br /> %s',	'LOG_USER_DEL_AVATAR'	=> '<strong>Removed user avatar</strong><br /> %s',	'LOG_USER_DEL_OUTBOX'	=> '<strong>Emptied user outbox</strong><br /> %s',	'LOG_USER_DEL_POSTS'	=> '<strong>Removed all posts made by the user</strong><br /> %s',	'LOG_USER_DEL_SIG'		=> '<strong>Removed user signature</strong><br /> %s',	'LOG_USER_INACTIVE'		=> '<strong>User deactivated</strong><br /> %s',	'LOG_USER_MOVE_POSTS'	=> '<strong>Moved user posts</strong><br /> posts by %1$s to forum %2$s',	'LOG_USER_NEW_PASSWORD'	=> '<strong>Changed user password</strong><br /> %s',	'LOG_USER_REACTIVATE'	=> '<strong>Forced user account reactivation</strong><br /> %s',	'LOG_USER_REMOVED_NR'	=> '<strong>Removed newly registered flag from user</strong><br /> %s',	'LOG_USER_UPDATE_EMAIL'	=> '<strong>User %1$s changed e-mail</strong><br /> from %2$s to %3$s',	'LOG_USER_UPDATE_NAME'	=> '<strong>Changed username</strong><br /> from %1$s to %2$s',	'LOG_USER_USER_UPDATE'	=> '<strong>Updated user details</strong><br /> %s',	'LOG_USER_ACTIVE_USER'		=> '<strong>User account activated</strong>',	'LOG_USER_DEL_AVATAR_USER'	=> '<strong>User avatar removed</strong>',	'LOG_USER_DEL_SIG_USER'		=> '<strong>User signature removed</strong>',	'LOG_USER_FEEDBACK'			=> '<strong>Added user feedback</strong><br /> %s',	'LOG_USER_GENERAL'			=> '<strong>Entry added:</strong><br /> %s',	'LOG_USER_INACTIVE_USER'	=> '<strong>User account de-activated</strong>',	'LOG_USER_LOCK'				=> '<strong>User locked own topic</strong><br /> %s',	'LOG_USER_MOVE_POSTS_USER'	=> '<strong>Moved all posts to forum</strong> %s',	'LOG_USER_REACTIVATE_USER'	=> '<strong>Forced user account reactivation</strong>',	'LOG_USER_UNLOCK'			=> '<strong>User unlocked own topic</strong><br /> %s',	'LOG_USER_WARNING'			=> '<strong>Added user warning</strong><br /> %s',	'LOG_USER_WARNING_BODY'		=> '<strong>The following warning was issued to this user</strong><br /> %s',	'LOG_USER_GROUP_CHANGE'			=> '<strong>User changed default group</strong><br /> %s',	'LOG_USER_GROUP_DEMOTE'			=> '<strong>User demoted as leaders from usergroup</strong><br /> %s',	'LOG_USER_GROUP_JOIN'			=> '<strong>User joined group</strong><br /> %s',	'LOG_USER_GROUP_JOIN_PENDING'	=> '<strong>User joined group and needs to be approved</strong><br /> %s',	'LOG_USER_GROUP_RESIGN'			=> '<strong>User resigned membership from group</strong><br /> %s',	'LOG_WARNING_DELETED'		=> '<strong>Deleted user warning</strong><br /> %s',	'LOG_WARNINGS_DELETED'		=> '<strong>Deleted %2$s user warnings</strong><br /> %1$s', // Example: '<strong>Deleted 2 user warnings</strong><br /> username'	'LOG_WARNINGS_DELETED_ALL'	=> '<strong>Deleted all user warnings</strong><br /> %s',	'LOG_WORD_ADD'			=> '<strong>Added word censor</strong><br /> %s',	'LOG_WORD_DELETE'		=> '<strong>Deleted word censor</strong><br /> %s',	'LOG_WORD_EDIT'			=> '<strong>Edited word censor</strong><br /> %s',));?>
<?php/**** @package search* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @ignore*/if (!defined('IN_PHPBB')){	exit;}/*** @ignore*/include_once($phpbb_root_path . 'includes/search/search.' . $phpEx);/*** fulltext_mysql* Fulltext search for MySQL* @package search*/class fulltext_mysql extends search_backend{	var $stats = array();	var $word_length = array();	var $split_words = array();	var $search_query;	var $common_words = array();	var $pcre_properties = false;	var $mbstring_regex = false;	function fulltext_mysql(&$error)	{		global $config;		$this->word_length = array('min' => $config['fulltext_mysql_min_word_len'], 'max' => $config['fulltext_mysql_max_word_len']);		if (version_compare(PHP_VERSION, '5.1.0', '>=') || (version_compare(PHP_VERSION, '5.0.0-dev', '<=') && version_compare(PHP_VERSION, '4.4.0', '>=')))		{			// While this is the proper range of PHP versions, PHP may not be linked with the bundled PCRE lib and instead with an older version			if (@preg_match('/\p{L}/u', 'a') !== false)			{				$this->pcre_properties = true;			}		}		if (function_exists('mb_ereg'))		{			$this->mbstring_regex = true;			mb_regex_encoding('UTF-8');		}		$error = false;	}	/**	* Checks for correct MySQL version and stores min/max word length in the config	*/	function init()	{		global $db, $user;		if ($db->sql_layer != 'mysql4' && $db->sql_layer != 'mysqli')		{			return $user->lang['FULLTEXT_MYSQL_INCOMPATIBLE_VERSION'];		}		$result = $db->sql_query('SHOW TABLE STATUS LIKE \'' . POSTS_TABLE . '\'');		$info = $db->sql_fetchrow($result);		$db->sql_freeresult($result);		$engine = '';		if (isset($info['Engine']))		{			$engine = $info['Engine'];		}		else if (isset($info['Type']))		{			$engine = $info['Type'];		}		if ($engine != 'MyISAM')		{			return $user->lang['FULLTEXT_MYSQL_NOT_MYISAM'];		}		$sql = 'SHOW VARIABLES			LIKE \'ft\_%\'';		$result = $db->sql_query($sql);		$mysql_info = array();		while ($row = $db->sql_fetchrow($result))		{			$mysql_info[$row['Variable_name']] = $row['Value'];		}		$db->sql_freeresult($result);		set_config('fulltext_mysql_max_word_len', $mysql_info['ft_max_word_len']);		set_config('fulltext_mysql_min_word_len', $mysql_info['ft_min_word_len']);		return false;	}	/**	* Splits keywords entered by a user into an array of words stored in $this->split_words	* Stores the tidied search query in $this->search_query	*	* @param string &$keywords Contains the keyword as entered by the user	* @param string $terms is either 'all' or 'any'	* @return bool false if no valid keywords were found and otherwise true	*/	function split_keywords(&$keywords, $terms)	{		global $config, $user;		if ($terms == 'all')		{			$match		= array('#\sand\s#iu', '#\sor\s#iu', '#\snot\s#iu', '#(^|\s)\+#', '#(^|\s)-#', '#(^|\s)\|#');			$replace	= array(' +', ' |', ' -', ' +', ' -', ' |');			$keywords = preg_replace($match, $replace, $keywords);		}		// Filter out as above		$split_keywords = preg_replace("#[\n\r\t]+#", ' ', trim(htmlspecialchars_decode($keywords)));		// Split words		if ($this->pcre_properties)		{			$split_keywords = preg_replace('#([^\p{L}\p{N}\'*"()])#u', '$1$1', str_replace('\'\'', '\' \'', trim($split_keywords)));		}		else if ($this->mbstring_regex)		{			$split_keywords = mb_ereg_replace('([^\w\'*"()])', '\\1\\1', str_replace('\'\'', '\' \'', trim($split_keywords)));		}		else		{			$split_keywords = preg_replace('#([^\w\'*"()])#u', '$1$1', str_replace('\'\'', '\' \'', trim($split_keywords)));		}		if ($this->pcre_properties)		{			$matches = array();			preg_match_all('#(?:[^\p{L}\p{N}*"()]|^)([+\-|]?(?:[\p{L}\p{N}*"()]+\'?)*[\p{L}\p{N}*"()])(?:[^\p{L}\p{N}*"()]|$)#u', $split_keywords, $matches);			$this->split_words = $matches[1];		}		else if ($this->mbstring_regex)		{			mb_ereg_search_init($split_keywords, '(?:[^\w*"()]|^)([+\-|]?(?:[\w*"()]+\'?)*[\w*"()])(?:[^\w*"()]|$)');			while (($word = mb_ereg_search_regs()))			{				$this->split_words[] = $word[1];			}		}		else		{			$matches = array();			preg_match_all('#(?:[^\w*"()]|^)([+\-|]?(?:[\w*"()]+\'?)*[\w*"()])(?:[^\w*"()]|$)#u', $split_keywords, $matches);			$this->split_words = $matches[1];		}		// We limit the number of allowed keywords to minimize load on the database		if ($config['max_num_search_keywords'] && sizeof($this->split_words) > $config['max_num_search_keywords'])		{			trigger_error($user->lang('MAX_NUM_SEARCH_KEYWORDS_REFINE', $config['max_num_search_keywords'], sizeof($this->split_words)));		}		// to allow phrase search, we need to concatenate quoted words		$tmp_split_words = array();		$phrase = '';		foreach ($this->split_words as $word)		{			if ($phrase)			{				$phrase .= ' ' . $word;				if (strpos($word, '"') !== false && substr_count($word, '"') % 2 == 1)				{					$tmp_split_words[] = $phrase;					$phrase = '';				}			}			else if (strpos($word, '"') !== false && substr_count($word, '"') % 2 == 1)			{				$phrase = $word;			}			else			{				$tmp_split_words[] = $word . ' ';			}		}		if ($phrase)		{			$tmp_split_words[] = $phrase;		}		$this->split_words = $tmp_split_words;		unset($tmp_split_words);		unset($phrase);		foreach ($this->split_words as $i => $word)		{			$clean_word = preg_replace('#^[+\-|"]#', '', $word);			// check word length			$clean_len = utf8_strlen(str_replace('*', '', $clean_word));			if (($clean_len < $config['fulltext_mysql_min_word_len']) || ($clean_len > $config['fulltext_mysql_max_word_len']))			{				$this->common_words[] = $word;				unset($this->split_words[$i]);			}		}		if ($terms == 'any')		{			$this->search_query = '';			foreach ($this->split_words as $word)			{				if ((strpos($word, '+') === 0) || (strpos($word, '-') === 0) || (strpos($word, '|') === 0))				{					$word = substr($word, 1);				}				$this->search_query .= $word . ' ';			}		}		else		{			$this->search_query = '';			foreach ($this->split_words as $word)			{				if ((strpos($word, '+') === 0) || (strpos($word, '-') === 0))				{					$this->search_query .= $word . ' ';				}				else if (strpos($word, '|') === 0)				{					$this->search_query .= substr($word, 1) . ' ';				}				else				{					$this->search_query .= '+' . $word . ' ';				}			}		}		$this->search_query = utf8_htmlspecialchars($this->search_query);		if ($this->search_query)		{			$this->split_words = array_values($this->split_words);			sort($this->split_words);			return true;		}		return false;	}	/**	* Turns text into an array of words	*/	function split_message($text)	{		global $config;		// Split words		if ($this->pcre_properties)		{			$text = preg_replace('#([^\p{L}\p{N}\'*])#u', '$1$1', str_replace('\'\'', '\' \'', trim($text)));		}		else if ($this->mbstring_regex)		{			$text = mb_ereg_replace('([^\w\'*])', '\\1\\1', str_replace('\'\'', '\' \'', trim($text)));		}		else		{			$text = preg_replace('#([^\w\'*])#u', '$1$1', str_replace('\'\'', '\' \'', trim($text)));		}		if ($this->pcre_properties)		{			$matches = array();			preg_match_all('#(?:[^\p{L}\p{N}*]|^)([+\-|]?(?:[\p{L}\p{N}*]+\'?)*[\p{L}\p{N}*])(?:[^\p{L}\p{N}*]|$)#u', $text, $matches);			$text = $matches[1];		}		else if ($this->mbstring_regex)		{			mb_ereg_search_init($text, '(?:[^\w*]|^)([+\-|]?(?:[\w*]+\'?)*[\w*])(?:[^\w*]|$)');			$text = array();			while (($word = mb_ereg_search_regs()))			{				$text[] = $word[1];			}		}		else		{			$matches = array();			preg_match_all('#(?:[^\w*]|^)([+\-|]?(?:[\w*]+\'?)*[\w*])(?:[^\w*]|$)#u', $text, $matches);			$text = $matches[1];		}		// remove too short or too long words		$text = array_values($text);		for ($i = 0, $n = sizeof($text); $i < $n; $i++)		{			$text[$i] = trim($text[$i]);			if (utf8_strlen($text[$i]) < $config['fulltext_mysql_min_word_len'] || utf8_strlen($text[$i]) > $config['fulltext_mysql_max_word_len'])			{				unset($text[$i]);			}		}		return array_values($text);	}	/**	* Performs a search on keywords depending on display specific params. You have to run split_keywords() first.	*	* @param	string		$type				contains either posts or topics depending on what should be searched for	* @param	string		$fields				contains either titleonly (topic titles should be searched), msgonly (only message bodies should be searched), firstpost (only subject and body of the first post should be searched) or all (all post bodies and subjects should be searched)	* @param	string		$terms				is either 'all' (use query as entered, words without prefix should default to "have to be in field") or 'any' (ignore search query parts and just return all posts that contain any of the specified words)	* @param	array		$sort_by_sql		contains SQL code for the ORDER BY part of a query	* @param	string		$sort_key			is the key of $sort_by_sql for the selected sorting	* @param	string		$sort_dir			is either a or d representing ASC and DESC	* @param	string		$sort_days			specifies the maximum amount of days a post may be old	* @param	array		$ex_fid_ary			specifies an array of forum ids which should not be searched	* @param	array		$m_approve_fid_ary	specifies an array of forum ids in which the searcher is allowed to view unapproved posts	* @param	int			$topic_id			is set to 0 or a topic id, if it is not 0 then only posts in this topic should be searched	* @param	array		$author_ary			an array of author ids if the author should be ignored during the search the array is empty	* @param	string		$author_name		specifies the author match, when ANONYMOUS is also a search-match	* @param	array		&$id_ary			passed by reference, to be filled with ids for the page specified by $start and $per_page, should be ordered	* @param	int			$start				indicates the first index of the page	* @param	int			$per_page			number of ids each page is supposed to contain	* @return	boolean|int						total number of results	*	* @access	public	*/	function keyword_search($type, $fields, $terms, $sort_by_sql, $sort_key, $sort_dir, $sort_days, $ex_fid_ary, $m_approve_fid_ary, $topic_id, $author_ary, $author_name, &$id_ary, $start, $per_page)	{		global $config, $db;		// No keywords? No posts.		if (!$this->search_query)		{			return false;		}		// generate a search_key from all the options to identify the results		$search_key = md5(implode('#', array(			implode(', ', $this->split_words),			$type,			$fields,			$terms,			$sort_days,			$sort_key,			$topic_id,			implode(',', $ex_fid_ary),			implode(',', $m_approve_fid_ary),			implode(',', $author_ary)		)));		// try reading the results from cache		$result_count = 0;		if ($this->obtain_ids($search_key, $result_count, $id_ary, $start, $per_page, $sort_dir) == SEARCH_RESULT_IN_CACHE)		{			return $result_count;		}		$id_ary = array();		$join_topic = ($type == 'posts') ? false : true;		// Build sql strings for sorting		$sql_sort = $sort_by_sql[$sort_key] . (($sort_dir == 'a') ? ' ASC' : ' DESC');		$sql_sort_table = $sql_sort_join = '';		switch ($sql_sort[0])		{			case 'u':				$sql_sort_table	= USERS_TABLE . ' u, ';				$sql_sort_join	= ($type == 'posts') ? ' AND u.user_id = p.poster_id ' : ' AND u.user_id = t.topic_poster ';			break;			case 't':				$join_topic = true;			break;			case 'f':				$sql_sort_table	= FORUMS_TABLE . ' f, ';				$sql_sort_join	= ' AND f.forum_id = p.forum_id ';			break;		}		// Build some display specific sql strings		switch ($fields)		{			case 'titleonly':				$sql_match = 'p.post_subject';				$sql_match_where = ' AND p.post_id = t.topic_first_post_id';				$join_topic = true;			break;			case 'msgonly':				$sql_match = 'p.post_text';				$sql_match_where = '';			break;			case 'firstpost':				$sql_match = 'p.post_subject, p.post_text';				$sql_match_where = ' AND p.post_id = t.topic_first_post_id';				$join_topic = true;			break;			default:				$sql_match = 'p.post_subject, p.post_text';				$sql_match_where = '';			break;		}		if (!sizeof($m_approve_fid_ary))		{			$m_approve_fid_sql = ' AND p.post_approved = 1';		}		else if ($m_approve_fid_ary === array(-1))		{			$m_approve_fid_sql = '';		}		else		{			$m_approve_fid_sql = ' AND (p.post_approved = 1 OR ' . $db->sql_in_set('p.forum_id', $m_approve_fid_ary, true) . ')';		}		$sql_select			= (!$result_count) ? 'SQL_CALC_FOUND_ROWS ' : '';		$sql_select			= ($type == 'posts') ? $sql_select . 'p.post_id' : 'DISTINCT ' . $sql_select . 't.topic_id';		$sql_from			= ($join_topic) ? TOPICS_TABLE . ' t, ' : '';		$field				= ($type == 'posts') ? 'post_id' : 'topic_id';		if (sizeof($author_ary) && $author_name)		{			// first one matches post of registered users, second one guests and deleted users			$sql_author = ' AND (' . $db->sql_in_set('p.poster_id', array_diff($author_ary, array(ANONYMOUS)), false, true) . ' OR p.post_username ' . $author_name . ')';		}		else if (sizeof($author_ary))		{			$sql_author = ' AND ' . $db->sql_in_set('p.poster_id', $author_ary);		}		else		{			$sql_author = '';		}		$sql_where_options = $sql_sort_join;		$sql_where_options .= ($topic_id) ? ' AND p.topic_id = ' . $topic_id : '';		$sql_where_options .= ($join_topic) ? ' AND t.topic_id = p.topic_id' : '';		$sql_where_options .= (sizeof($ex_fid_ary)) ? ' AND ' . $db->sql_in_set('p.forum_id', $ex_fid_ary, true) : '';		$sql_where_options .= $m_approve_fid_sql;		$sql_where_options .= $sql_author;		$sql_where_options .= ($sort_days) ? ' AND p.post_time >= ' . (time() - ($sort_days * 86400)) : '';		$sql_where_options .= $sql_match_where;		$sql = "SELECT $sql_select			FROM $sql_from$sql_sort_table" . POSTS_TABLE . " p			WHERE MATCH ($sql_match) AGAINST ('" . $db->sql_escape(htmlspecialchars_decode($this->search_query)) . "' IN BOOLEAN MODE)				$sql_where_options			ORDER BY $sql_sort";		$result = $db->sql_query_limit($sql, $config['search_block_size'], $start);		while ($row = $db->sql_fetchrow($result))		{			$id_ary[] = (int) $row[$field];		}		$db->sql_freeresult($result);		$id_ary = array_unique($id_ary);		if (!sizeof($id_ary))		{			return false;		}		// if the total result count is not cached yet, retrieve it from the db		if (!$result_count)		{			$sql = 'SELECT FOUND_ROWS() as result_count';			$result = $db->sql_query($sql);			$result_count = (int) $db->sql_fetchfield('result_count');			$db->sql_freeresult($result);			if (!$result_count)			{				return false;			}		}		// store the ids, from start on then delete anything that isn't on the current page because we only need ids for one page		$this->save_ids($search_key, implode(' ', $this->split_words), $author_ary, $result_count, $id_ary, $start, $sort_dir);		$id_ary = array_slice($id_ary, 0, (int) $per_page);		return $result_count;	}	/**	* Performs a search on an author's posts without caring about message contents. Depends on display specific params	*	* @param	string		$type				contains either posts or topics depending on what should be searched for	* @param	boolean		$firstpost_only		if true, only topic starting posts will be considered	* @param	array		$sort_by_sql		contains SQL code for the ORDER BY part of a query	* @param	string		$sort_key			is the key of $sort_by_sql for the selected sorting	* @param	string		$sort_dir			is either a or d representing ASC and DESC	* @param	string		$sort_days			specifies the maximum amount of days a post may be old	* @param	array		$ex_fid_ary			specifies an array of forum ids which should not be searched	* @param	array		$m_approve_fid_ary	specifies an array of forum ids in which the searcher is allowed to view unapproved posts	* @param	int			$topic_id			is set to 0 or a topic id, if it is not 0 then only posts in this topic should be searched	* @param	array		$author_ary			an array of author ids	* @param	string		$author_name		specifies the author match, when ANONYMOUS is also a search-match	* @param	array		&$id_ary			passed by reference, to be filled with ids for the page specified by $start and $per_page, should be ordered	* @param	int			$start				indicates the first index of the page	* @param	int			$per_page			number of ids each page is supposed to contain	* @return	boolean|int						total number of results	*	* @access	public	*/	function author_search($type, $firstpost_only, $sort_by_sql, $sort_key, $sort_dir, $sort_days, $ex_fid_ary, $m_approve_fid_ary, $topic_id, $author_ary, $author_name, &$id_ary, $start, $per_page)	{		global $config, $db;		// No author? No posts.		if (!sizeof($author_ary))		{			return 0;		}		// generate a search_key from all the options to identify the results		$search_key = md5(implode('#', array(			'',			$type,			($firstpost_only) ? 'firstpost' : '',			'',			'',			$sort_days,			$sort_key,			$topic_id,			implode(',', $ex_fid_ary),			implode(',', $m_approve_fid_ary),			implode(',', $author_ary),			$author_name,		)));		// try reading the results from cache		$result_count = 0;		if ($this->obtain_ids($search_key, $result_count, $id_ary, $start, $per_page, $sort_dir) == SEARCH_RESULT_IN_CACHE)		{			return $result_count;		}		$id_ary = array();		// Create some display specific sql strings		if ($author_name)		{			// first one matches post of registered users, second one guests and deleted users			$sql_author = '(' . $db->sql_in_set('p.poster_id', array_diff($author_ary, array(ANONYMOUS)), false, true) . ' OR p.post_username ' . $author_name . ')';		}		else		{			$sql_author = $db->sql_in_set('p.poster_id', $author_ary);		}		$sql_fora		= (sizeof($ex_fid_ary)) ? ' AND ' . $db->sql_in_set('p.forum_id', $ex_fid_ary, true) : '';		$sql_topic_id	= ($topic_id) ? ' AND p.topic_id = ' . (int) $topic_id : '';		$sql_time		= ($sort_days) ? ' AND p.post_time >= ' . (time() - ($sort_days * 86400)) : '';		$sql_firstpost = ($firstpost_only) ? ' AND p.post_id = t.topic_first_post_id' : '';		// Build sql strings for sorting		$sql_sort = $sort_by_sql[$sort_key] . (($sort_dir == 'a') ? ' ASC' : ' DESC');		$sql_sort_table = $sql_sort_join = '';		switch ($sql_sort[0])		{			case 'u':				$sql_sort_table	= USERS_TABLE . ' u, ';				$sql_sort_join	= ($type == 'posts') ? ' AND u.user_id = p.poster_id ' : ' AND u.user_id = t.topic_poster ';			break;			case 't':				$sql_sort_table	= ($type == 'posts' && !$firstpost_only) ? TOPICS_TABLE . ' t, ' : '';				$sql_sort_join	= ($type == 'posts' && !$firstpost_only) ? ' AND t.topic_id = p.topic_id ' : '';			break;			case 'f':				$sql_sort_table	= FORUMS_TABLE . ' f, ';				$sql_sort_join	= ' AND f.forum_id = p.forum_id ';			break;		}		if (!sizeof($m_approve_fid_ary))		{			$m_approve_fid_sql = ' AND p.post_approved = 1';		}		else if ($m_approve_fid_ary == array(-1))		{			$m_approve_fid_sql = '';		}		else		{			$m_approve_fid_sql = ' AND (p.post_approved = 1 OR ' . $db->sql_in_set('p.forum_id', $m_approve_fid_ary, true) . ')';		}		// If the cache was completely empty count the results		$calc_results = ($result_count) ? '' : 'SQL_CALC_FOUND_ROWS ';		// Build the query for really selecting the post_ids		if ($type == 'posts')		{			$sql = "SELECT {$calc_results}p.post_id				FROM " . $sql_sort_table . POSTS_TABLE . ' p' . (($firstpost_only) ? ', ' . TOPICS_TABLE . ' t ' : ' ') . "				WHERE $sql_author					$sql_topic_id					$sql_firstpost					$m_approve_fid_sql					$sql_fora					$sql_sort_join					$sql_time				ORDER BY $sql_sort";			$field = 'post_id';		}		else		{			$sql = "SELECT {$calc_results}t.topic_id				FROM " . $sql_sort_table . TOPICS_TABLE . ' t, ' . POSTS_TABLE . " p				WHERE $sql_author					$sql_topic_id					$sql_firstpost					$m_approve_fid_sql					$sql_fora					AND t.topic_id = p.topic_id					$sql_sort_join					$sql_time				GROUP BY t.topic_id				ORDER BY $sql_sort";			$field = 'topic_id';		}		// Only read one block of posts from the db and then cache it		$result = $db->sql_query_limit($sql, $config['search_block_size'], $start);		while ($row = $db->sql_fetchrow($result))		{			$id_ary[] = (int) $row[$field];		}		$db->sql_freeresult($result);		// retrieve the total result count if needed		if (!$result_count)		{			$sql = 'SELECT FOUND_ROWS() as result_count';			$result = $db->sql_query($sql);			$result_count = (int) $db->sql_fetchfield('result_count');			$db->sql_freeresult($result);			if (!$result_count)			{				return false;			}		}		if (sizeof($id_ary))		{			$this->save_ids($search_key, '', $author_ary, $result_count, $id_ary, $start, $sort_dir);			$id_ary = array_slice($id_ary, 0, $per_page);			return $result_count;		}		return false;	}	/**	* Destroys cached search results, that contained one of the new words in a post so the results won't be outdated.	*	* @param string $mode contains the post mode: edit, post, reply, quote ...	*/	function index($mode, $post_id, &$message, &$subject, $poster_id, $forum_id)	{		global $db;		// Split old and new post/subject to obtain array of words		$split_text = $this->split_message($message);		$split_title = ($subject) ? $this->split_message($subject) : array();		$words = array_unique(array_merge($split_text, $split_title));		unset($split_text);		unset($split_title);		// destroy cached search results containing any of the words removed or added		$this->destroy_cache($words, array($poster_id));		unset($words);	}	/**	* Destroy cached results, that might be outdated after deleting a post	*/	function index_remove($post_ids, $author_ids, $forum_ids)	{		$this->destroy_cache(array(), $author_ids);	}	/**	* Destroy old cache entries	*/	function tidy()	{		global $db, $config;		// destroy too old cached search results		$this->destroy_cache(array());		set_config('search_last_gc', time(), true);	}	/**	* Create fulltext index	*/	function create_index($acp_module, $u_action)	{		global $db;		// Make sure we can actually use MySQL with fulltext indexes		if ($error = $this->init())		{			return $error;		}		if (empty($this->stats))		{			$this->get_stats();		}		$alter = array();		if (!isset($this->stats['post_subject']))		{			if ($db->sql_layer == 'mysqli' || version_compare($db->sql_server_info(true), '4.1.3', '>='))			{				//$alter[] = 'MODIFY post_subject varchar(100) COLLATE utf8_unicode_ci DEFAULT \'\' NOT NULL';			}			else			{				$alter[] = 'MODIFY post_subject text NOT NULL';			}			$alter[] = 'ADD FULLTEXT (post_subject)';		}		if (!isset($this->stats['post_text']))		{			if ($db->sql_layer == 'mysqli' || version_compare($db->sql_server_info(true), '4.1.3', '>='))			{				$alter[] = 'MODIFY post_text mediumtext COLLATE utf8_unicode_ci NOT NULL';			}			else			{				$alter[] = 'MODIFY post_text mediumtext NOT NULL';			}			$alter[] = 'ADD FULLTEXT (post_text)';		}		if (!isset($this->stats['post_content']))		{			$alter[] = 'ADD FULLTEXT post_content (post_subject, post_text)';		}		if (sizeof($alter))		{			$db->sql_query('ALTER TABLE ' . POSTS_TABLE . ' ' . implode(', ', $alter));		}		$db->sql_query('TRUNCATE TABLE ' . SEARCH_RESULTS_TABLE);		return false;	}	/**	* Drop fulltext index	*/	function delete_index($acp_module, $u_action)	{		global $db;		// Make sure we can actually use MySQL with fulltext indexes		if ($error = $this->init())		{			return $error;		}		if (empty($this->stats))		{			$this->get_stats();		}		$alter = array();		if (isset($this->stats['post_subject']))		{			$alter[] = 'DROP INDEX post_subject';		}		if (isset($this->stats['post_text']))		{			$alter[] = 'DROP INDEX post_text';		}		if (isset($this->stats['post_content']))		{			$alter[] = 'DROP INDEX post_content';		}		if (sizeof($alter))		{			$db->sql_query('ALTER TABLE ' . POSTS_TABLE . ' ' . implode(', ', $alter));		}		$db->sql_query('TRUNCATE TABLE ' . SEARCH_RESULTS_TABLE);		return false;	}	/**	* Returns true if both FULLTEXT indexes exist	*/	function index_created()	{		if (empty($this->stats))		{			$this->get_stats();		}		return (isset($this->stats['post_text']) && isset($this->stats['post_subject']) && isset($this->stats['post_content'])) ? true : false;	}	/**	* Returns an associative array containing information about the indexes	*/	function index_stats()	{		global $user;		if (empty($this->stats))		{			$this->get_stats();		}		return array(			$user->lang['FULLTEXT_MYSQL_TOTAL_POSTS']			=> ($this->index_created()) ? $this->stats['total_posts'] : 0,		);	}	function get_stats()	{		global $db;		if (strpos($db->sql_layer, 'mysql') === false)		{			$this->stats = array();			return;		}		$sql = 'SHOW INDEX			FROM ' . POSTS_TABLE;		$result = $db->sql_query($sql);		while ($row = $db->sql_fetchrow($result))		{			// deal with older MySQL versions which didn't use Index_type			$index_type = (isset($row['Index_type'])) ? $row['Index_type'] : $row['Comment'];			if ($index_type == 'FULLTEXT')			{				if ($row['Key_name'] == 'post_text')				{					$this->stats['post_text'] = $row;				}				else if ($row['Key_name'] == 'post_subject')				{					$this->stats['post_subject'] = $row;				}				else if ($row['Key_name'] == 'post_content')				{					$this->stats['post_content'] = $row;				}			}		}		$db->sql_freeresult($result);		$sql = 'SELECT COUNT(post_id) as total_posts			FROM ' . POSTS_TABLE;		$result = $db->sql_query($sql);		$this->stats['total_posts'] = (int) $db->sql_fetchfield('total_posts');		$db->sql_freeresult($result);	}	/**	* Display a note, that UTF-8 support is not available with certain versions of PHP	*/	function acp()	{		global $user, $config;		$tpl = '		<dl>			<dt><label>' . $user->lang['FULLTEXT_MYSQL_PCRE'] . '</label><br /><span>' . $user->lang['FULLTEXT_MYSQL_PCRE_EXPLAIN'] . '</span></dt>			<dd>' . (($this->pcre_properties) ? $user->lang['YES'] : $user->lang['NO']) . ' (PHP ' . PHP_VERSION . ')</dd>		</dl>		<dl>			<dt><label>' . $user->lang['FULLTEXT_MYSQL_MBSTRING'] . '</label><br /><span>' . $user->lang['FULLTEXT_MYSQL_MBSTRING_EXPLAIN'] . '</span></dt>			<dd>' . (($this->mbstring_regex) ? $user->lang['YES'] : $user->lang['NO']). '</dd>		</dl>		<dl>			<dt><label>' . $user->lang['MIN_SEARCH_CHARS'] . ':</label><br /><span>' . $user->lang['FULLTEXT_MYSQL_MIN_SEARCH_CHARS_EXPLAIN'] . '</span></dt>			<dd>' . $config['fulltext_mysql_min_word_len'] . '</dd>		</dl>		<dl>			<dt><label>' . $user->lang['MAX_SEARCH_CHARS'] . ':</label><br /><span>' . $user->lang['FULLTEXT_MYSQL_MAX_SEARCH_CHARS_EXPLAIN'] . '</span></dt>			<dd>' . $config['fulltext_mysql_max_word_len'] . '</dd>		</dl>		';		// These are fields required in the config table		return array(			'tpl'		=> $tpl,			'config'	=> array()		);	}}?>
<?php/**** common [English]** @package language* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** DO NOT CHANGE*/if (!defined('IN_PHPBB')){	exit;}if (empty($lang) || !is_array($lang)){	$lang = array();}// DEVELOPERS PLEASE NOTE//// All language files should use UTF-8 as their encoding and the files must not contain a BOM.//// Placeholders can now contain order information, e.g. instead of// 'Page %s of %s' you can (and should) write 'Page %1$s of %2$s', this allows// translators to re-order the output of data while ensuring it remains correct//// You do not need this where single placeholders are used, e.g. 'Message %d' is fine// equally where a string contains only two placeholders which are used to wrap text// in a url you again do not need to specify an order e.g., 'Click %sHERE%s' is fine//// Some characters you may want to copy&paste://     //$lang = array_merge($lang, array(	'TRANSLATION_INFO'	=> '',	'DIRECTION'			=> 'ltr',	'DATE_FORMAT'		=> '|d M Y|',	// 01 Jan 2007 (with Relative days enabled)	'USER_LANG'			=> 'en-gb',	'1_DAY'			=> '1 day',	'1_MONTH'		=> '1 month',	'1_YEAR'		=> '1 year',	'2_WEEKS'		=> '2 weeks',	'3_MONTHS'		=> '3 months',	'6_MONTHS'		=> '6 months',	'7_DAYS'		=> '7 days',	'ACCOUNT_ALREADY_ACTIVATED'		=> 'Your account has already been activated.',	'ACCOUNT_DEACTIVATED'			=> 'Your account has been manually deactivated and is only able to be reactivated by an administrator.',	'ACCOUNT_NOT_ACTIVATED'			=> 'Your account has not been activated yet.',	'ACP'							=> 'Administration Control Panel',	'ACTIVE'						=> 'active',	'ACTIVE_ERROR'					=> 'The specified username is currently inactive. If you have problems activating your account, please contact a board administrator.',	'ADMINISTRATOR'					=> 'Administrator',	'ADMINISTRATORS'				=> 'Administrators',	'AGE'							=> 'Age',	'AIM'							=> 'AIM',	'ALLOWED'						=> 'Allowed',	'ALL_FILES'						=> 'All files',	'ALL_FORUMS'					=> 'All forums',	'ALL_MESSAGES'					=> 'All messages',	'ALL_POSTS'						=> 'All posts',	'ALL_TIMES'						=> 'All times are %1$s %2$s',	'ALL_TOPICS'					=> 'All Topics',	'AND'							=> 'And',	'ARE_WATCHING_FORUM'			=> 'You have subscribed to be notified of new posts in this forum.',	'ARE_WATCHING_TOPIC'			=> 'You have subscribed to be notified of new posts in this topic.',	'ASCENDING'						=> 'Ascending',	'ATTACHMENTS'					=> 'Attachments',	'ATTACHED_IMAGE_NOT_IMAGE'		=> 'The image file you tried to attach is invalid.',	'AUTHOR'						=> 'Author',	'AUTH_NO_PROFILE_CREATED'		=> 'The creation of a user profile was unsuccessful.',	'AVATAR_DISALLOWED_CONTENT'		=> 'The upload was rejected because the uploaded file was identified as a possible attack vector.',	'AVATAR_DISALLOWED_EXTENSION'	=> 'This file cannot be displayed because the extension <strong>%s</strong> is not allowed.',	'AVATAR_EMPTY_REMOTE_DATA'		=> 'The specified avatar could not be uploaded because the remote data appears to be invalid or corrupted.',	'AVATAR_EMPTY_FILEUPLOAD'		=> 'The uploaded avatar file is empty.',	'AVATAR_INVALID_FILENAME'		=> '%s is an invalid filename.',	'AVATAR_NOT_UPLOADED'			=> 'Avatar could not be uploaded.',	'AVATAR_NO_SIZE'				=> 'The width or height of the linked avatar could not be determined. Please enter them manually.',	'AVATAR_PARTIAL_UPLOAD'			=> 'The specified file was only partially uploaded.',	'AVATAR_PHP_SIZE_NA'			=> 'The avatars filesize is too large.<br />The maximum allowed filesize set in php.ini could not be determined.',	'AVATAR_PHP_SIZE_OVERRUN'		=> 'The avatars filesize is too large. The maximum allowed upload size is %1$d %2$s.<br />Please note this is set in php.ini and cannot be overridden.',	'AVATAR_URL_INVALID'			=> 'The URL you specified is invalid.',	'AVATAR_URL_NOT_FOUND'			=> 'The file specified could not be found.',	'AVATAR_WRONG_FILESIZE'			=> 'The avatars filesize must be between 0 and %1d %2s.',	'AVATAR_WRONG_SIZE'				=> 'The submitted avatar is %5$d pixels wide and %6$d pixels high. Avatars must be at least %1$d pixels wide and %2$d pixels high, but no larger than %3$d pixels wide and %4$d pixels high.',	'BACK_TO_TOP'			=> 'Top',	'BACK_TO_PREV'			=> 'Back to previous page',	'BAN_TRIGGERED_BY_EMAIL'=> 'A ban has been issued on your e-mail address.',	'BAN_TRIGGERED_BY_IP'	=> 'A ban has been issued on your IP address.',	'BAN_TRIGGERED_BY_USER'	=> 'A ban has been issued on your username.',	'BBCODE_GUIDE'			=> 'BBCode guide',	'BCC'					=> 'BCC',	'BIRTHDAYS'				=> 'Birthdays',	'BOARD_BAN_PERM'		=> 'You have been <strong>permanently</strong> banned from this board.<br /><br />Please contact the %2$sBoard Administrator%3$s for more information.',	'BOARD_BAN_REASON'		=> 'Reason given for ban: <strong>%s</strong>',	'BOARD_BAN_TIME'		=> 'You have been banned from this board until <strong>%1$s</strong>.<br /><br />Please contact the %2$sBoard Administrator%3$s for more information.',	'BOARD_DISABLE'			=> 'Sorry but this board is currently unavailable.',	'BOARD_DISABLED'		=> 'This board is currently disabled.',	'BOARD_UNAVAILABLE'		=> 'Sorry but the board is temporarily unavailable, please try again in a few minutes.',	'BROWSING_FORUM'		=> 'Users browsing this forum: %1$s',	'BROWSING_FORUM_GUEST'	=> 'Users browsing this forum: %1$s and %2$d guest',	'BROWSING_FORUM_GUESTS'	=> 'Users browsing this forum: %1$s and %2$d guests',	'BYTES'					=> 'Bytes',	'CANCEL'				=> 'Cancel',	'CHANGE'				=> 'Change',	'CHANGE_FONT_SIZE'		=> 'Change font size',	'CHANGING_PREFERENCES'	=> 'Changing board preferences',	'CHANGING_PROFILE'		=> 'Changing profile settings',	'CLICK_VIEW_PRIVMSG'	=> '%sGo to your inbox%s',	'COLLAPSE_VIEW'			=> 'Collapse view',	'CLOSE_WINDOW'			=> 'Close window',	'COLOUR_SWATCH'			=> 'Colour swatch',	'COMMA_SEPARATOR'		=> ', ',	// Used in pagination of ACP & prosilver, use localised comma if appropriate, eg: Ideographic or Arabic	'CONFIRM'				=> 'Confirm',	'CONFIRM_CODE'			=> 'Confirmation code',	'CONFIRM_CODE_EXPLAIN'	=> 'Enter the code exactly as it appears. All letters are case insensitive.',	'CONFIRM_CODE_WRONG'	=> 'The confirmation code you entered was incorrect.',	'CONFIRM_OPERATION'		=> 'Are you sure you wish to carry out this operation?',	'CONGRATULATIONS'		=> 'Congratulations to',	'CONNECTION_FAILED'		=> 'Connection failed.',	'CONNECTION_SUCCESS'	=> 'Connection was successful!',	'COOKIES_DELETED'		=> 'All board cookies successfully deleted.',	'CURRENT_TIME'			=> 'It is currently %s',	'DAY'					=> 'Day',	'DAYS'					=> 'Days',	'DELETE'				=> 'Delete',	'DELETE_ALL'			=> 'Delete all',	'DELETE_COOKIES'		=> 'Delete all board cookies',	'DELETE_MARKED'			=> 'Delete marked',	'DELETE_POST'			=> 'Delete post',	'DELIMITER'				=> 'Delimiter',	'DESCENDING'			=> 'Descending',	'DISABLED'				=> 'Disabled',	'DISPLAY'				=> 'Display',	'DISPLAY_GUESTS'		=> 'Display guests',	'DISPLAY_MESSAGES'		=> 'Display messages from previous',	'DISPLAY_POSTS'			=> 'Display posts from previous',	'DISPLAY_TOPICS'		=> 'Display topics from previous',	'DOWNLOADED'			=> 'Downloaded',	'DOWNLOADING_FILE'		=> 'Downloading file',	'DOWNLOAD_COUNT'		=> 'Downloaded %d time',	'DOWNLOAD_COUNTS'		=> 'Downloaded %d times',	'DOWNLOAD_COUNT_NONE'	=> 'Not downloaded yet',	'VIEWED_COUNT'			=> 'Viewed %d time',	'VIEWED_COUNTS'			=> 'Viewed %d times',	'VIEWED_COUNT_NONE'		=> 'Not viewed yet',	'EDIT_POST'							=> 'Edit post',	'EMAIL'								=> 'E-mail', // Short form for EMAIL_ADDRESS	'EMAIL_ADDRESS'						=> 'E-mail address',	'EMAIL_SMTP_ERROR_RESPONSE'			=> 'Ran into problems sending e-mail at <strong>Line %1$s</strong>. Response: %2$s.',	'EMPTY_SUBJECT'						=> 'You must specify a subject when posting a new topic.',	'EMPTY_MESSAGE_SUBJECT'				=> 'You must specify a subject when composing a new message.',	'ENABLED'							=> 'Enabled',	'ENCLOSURE'							=> 'Enclosure',	'ENTER_USERNAME'					=> 'Enter username',	'ERR_CHANGING_DIRECTORY'			=> 'Unable to change directory.',	'ERR_CONNECTING_SERVER'				=> 'Error connecting to the server.',	'ERR_JAB_AUTH'						=> 'Could not authorise on Jabber server.',	'ERR_JAB_CONNECT'					=> 'Could not connect to Jabber server.',	'ERR_UNABLE_TO_LOGIN'				=> 'The specified username or password is incorrect.',	'ERR_UNWATCHING'					=> 'An error occured while trying to unsubscribe.',	'ERR_WATCHING'						=> 'An error occured while trying to subscribe.',	'ERR_WRONG_PATH_TO_PHPBB'			=> 'The phpBB path specified appears to be invalid.',	'EXPAND_VIEW'						=> 'Expand view',	'EXTENSION'							=> 'Extension',	'EXTENSION_DISABLED_AFTER_POSTING'	=> 'The extension <strong>%s</strong> has been deactivated and can no longer be displayed.',	'FAQ'					=> 'FAQ',	'FAQ_EXPLAIN'			=> 'Frequently Asked Questions',	'FILENAME'				=> 'Filename',	'FILESIZE'				=> 'File size',	'FILEDATE'				=> 'File date',	'FILE_COMMENT'			=> 'File comment',	'FILE_NOT_FOUND'		=> 'The requested file could not be found.',	'FIND_USERNAME'			=> 'Find a member',	'FOLDER'				=> 'Folder',	'FORGOT_PASS'			=> 'I forgot my password',	'FORM_INVALID'			=> 'The submitted form was invalid. Try submitting again.',	'FORUM'					=> 'Forum',	'FORUMS'				=> 'Forums',	'FORUMS_MARKED'			=> 'The selected forums have been marked read.',	'FORUM_CAT'				=> 'Forum category',	'FORUM_INDEX'			=> 'Board index',	'FORUM_LINK'			=> 'Forum link',	'FORUM_LOCATION'		=> 'Forum location',	'FORUM_LOCKED'			=> 'Forum locked',	'FORUM_RULES'			=> 'Forum rules',	'FORUM_RULES_LINK'		=> 'Please click here to view the forum rules',	'FROM'					=> 'from',	'FSOCK_DISABLED'		=> 'The operation could not be completed because the <var>fsockopen</var> function has been disabled or the server being queried could not be found.',	'FSOCK_TIMEOUT'			=> 'A timeout occurred while reading from the network stream.',	'FTP_FSOCK_HOST'				=> 'FTP host',	'FTP_FSOCK_HOST_EXPLAIN'		=> 'FTP server used to connect your site.',	'FTP_FSOCK_PASSWORD'			=> 'FTP password',	'FTP_FSOCK_PASSWORD_EXPLAIN'	=> 'Password for your FTP username.',	'FTP_FSOCK_PORT'				=> 'FTP port',	'FTP_FSOCK_PORT_EXPLAIN'		=> 'Port used to connect to your server.',	'FTP_FSOCK_ROOT_PATH'			=> 'Path to phpBB',	'FTP_FSOCK_ROOT_PATH_EXPLAIN'	=> 'Path from the root to your phpBB board.',	'FTP_FSOCK_TIMEOUT'				=> 'FTP timeout',	'FTP_FSOCK_TIMEOUT_EXPLAIN'		=> 'The amount of time, in seconds, that the system will wait for a reply from your server.',	'FTP_FSOCK_USERNAME'			=> 'FTP username',	'FTP_FSOCK_USERNAME_EXPLAIN'	=> 'Username used to connect to your server.',	'FTP_HOST'					=> 'FTP host',	'FTP_HOST_EXPLAIN'			=> 'FTP server used to connect your site.',	'FTP_PASSWORD'				=> 'FTP password',	'FTP_PASSWORD_EXPLAIN'		=> 'Password for your FTP username.',	'FTP_PORT'					=> 'FTP port',	'FTP_PORT_EXPLAIN'			=> 'Port used to connect to your server.',	'FTP_ROOT_PATH'				=> 'Path to phpBB',	'FTP_ROOT_PATH_EXPLAIN'		=> 'Path from the root to your phpBB board.',	'FTP_TIMEOUT'				=> 'FTP timeout',	'FTP_TIMEOUT_EXPLAIN'		=> 'The amount of time, in seconds, that the system will wait for a reply from your server.',	'FTP_USERNAME'				=> 'FTP username',	'FTP_USERNAME_EXPLAIN'		=> 'Username used to connect to your server.',	'GENERAL_ERROR'				=> 'General Error',	'GB'						=> 'GB',	'GIB'						=> 'GiB',	'GO'						=> 'Go',	'GOTO_PAGE'					=> 'Go to page',	'GROUP'						=> 'Group',	'GROUPS'					=> 'Groups',	'GROUP_ERR_TYPE'			=> 'Inappropriate group type specified.',	'GROUP_ERR_USERNAME'		=> 'No group name specified.',	'GROUP_ERR_USER_LONG'		=> 'Group names cannot exceed 60 characters. The specified group name is too long.',	'GUEST'						=> 'Guest',	'GUEST_USERS_ONLINE'		=> 'There are %d guest users online',	'GUEST_USERS_TOTAL'			=> '%d guests',	'GUEST_USERS_ZERO_ONLINE'	=> 'There are 0 guest users online',	'GUEST_USERS_ZERO_TOTAL'	=> '0 guests',	'GUEST_USER_ONLINE'			=> 'There is %d guest user online',	'GUEST_USER_TOTAL'			=> '%d guest',	'G_ADMINISTRATORS'			=> 'Administrators',	'G_BOTS'					=> 'Bots',	'G_GUESTS'					=> 'Guests',	'G_REGISTERED'				=> 'Registered users',	'G_REGISTERED_COPPA'		=> 'Registered COPPA users',	'G_GLOBAL_MODERATORS'		=> 'Global moderators',	'G_NEWLY_REGISTERED'		=> 'Newly registered users',	'HIDDEN_USERS_ONLINE'			=> '%d hidden users online',	'HIDDEN_USERS_TOTAL'			=> '%d hidden',	'HIDDEN_USERS_TOTAL_AND'		=> '%d hidden and ',	'HIDDEN_USERS_ZERO_ONLINE'		=> '0 hidden users online',	'HIDDEN_USERS_ZERO_TOTAL'		=> '0 hidden',	'HIDDEN_USERS_ZERO_TOTAL_AND'	=> '0 hidden and ',	'HIDDEN_USER_ONLINE'			=> '%d hidden user online',	'HIDDEN_USER_TOTAL'				=> '%d hidden',	'HIDDEN_USER_TOTAL_AND'			=> '%d hidden and ',	'HIDE_GUESTS'					=> 'Hide guests',	'HIDE_ME'						=> 'Hide my online status this session',	'HOURS'							=> 'Hours',	'HOME'							=> 'Home',	'ICQ'						=> 'ICQ',	'ICQ_STATUS'				=> 'ICQ status',	'IF'						=> 'If',	'IMAGE'						=> 'Image',	'IMAGE_FILETYPE_INVALID'	=> 'Image file type %d for mimetype %s not supported.',	'IMAGE_FILETYPE_MISMATCH'	=> 'Image file type mismatch: expected extension %1$s but extension %2$s given.',	'IN'						=> 'in',	'INDEX'						=> 'Index page',	'INFORMATION'				=> 'Information',	'INTERESTS'					=> 'Interests',	'INVALID_DIGEST_CHALLENGE'	=> 'Invalid digest challenge.',	'INVALID_EMAIL_LOG'			=> '<strong>%s</strong> possibly an invalid e-mail address?',	'IP'						=> 'IP',	'IP_BLACKLISTED'			=> 'Your IP %1$s has been blocked because it is blacklisted. For details please see <a href="%2$s">%2$s</a>.',	'JABBER'				=> 'Jabber',	'JOINED'				=> 'Joined',	'JUMP_PAGE'				=> 'Enter the page number you wish to go to',	'JUMP_TO'				=> 'Jump to',	'JUMP_TO_PAGE'			=> 'Click to jump to page',	'KB'					=> 'KB',	'KIB'					=> 'KiB',	'LAST_POST'							=> 'Last post',	'LAST_UPDATED'						=> 'Last updated',	'LAST_VISIT'						=> 'Last visit',	'LDAP_NO_LDAP_EXTENSION'			=> 'LDAP extension not available.',	'LDAP_NO_SERVER_CONNECTION'			=> 'Could not connect to LDAP server.',	'LDAP_SEARCH_FAILED'				=> 'An error occured while searching the LDAP directory.',	'LEGEND'							=> 'Legend',	'LOCATION'							=> 'Location',	'LOCK_POST'							=> 'Lock post',	'LOCK_POST_EXPLAIN'					=> 'Prevent editing',	'LOCK_TOPIC'						=> 'Lock topic',	'LOGIN'								=> 'Login',	'LOGIN_CHECK_PM'					=> 'Log in to check your private messages.',	'LOGIN_CONFIRMATION'				=> 'Confirmation of login',	'LOGIN_CONFIRM_EXPLAIN'				=> 'To prevent brute forcing accounts the board requires you to enter a confirmation code after a maximum amount of failed logins. The code is displayed in the image you should see below. If you are visually impaired or cannot otherwise read this code please contact the %sBoard Administrator%s.', // unused	'LOGIN_ERROR_ATTEMPTS'				=> 'You exceeded the maximum allowed number of login attempts. In addition to your username and password you now also have to solve the CAPTCHA below.',	'LOGIN_ERROR_EXTERNAL_AUTH_APACHE'	=> 'You have not been authenticated by Apache.',	'LOGIN_ERROR_PASSWORD'				=> 'You have specified an incorrect password. Please check your password and try again. If you continue to have problems please contact the %sBoard Administrator%s.',	'LOGIN_ERROR_PASSWORD_CONVERT'		=> 'It was not possible to convert your password when updating this bulletin boards software. Please %srequest a new password%s. If you continue to have problems please contact the %sBoard Administrator%s.',	'LOGIN_ERROR_USERNAME'				=> 'You have specified an incorrect username. Please check your username and try again. If you continue to have problems please contact the %sBoard Administrator%s.',	'LOGIN_FORUM'						=> 'To view or post in this forum you must enter its password.',	'LOGIN_INFO'						=> 'In order to login you must be registered. Registering takes only a few moments but gives you increased capabilities. The board administrator may also grant additional permissions to registered users. Before you register please ensure you are familiar with our terms of use and related policies. Please ensure you read any forum rules as you navigate around the board.',	'LOGIN_VIEWFORUM'					=> 'The board requires you to be registered and logged in to view this forum.',	'LOGIN_EXPLAIN_EDIT'				=> 'In order to edit posts in this forum you have to be registered and logged in.',	'LOGIN_EXPLAIN_VIEWONLINE'			=> 'In order to view the online list you have to be registered and logged in.',	'LOGOUT'							=> 'Logout',	'LOGOUT_USER'						=> 'Logout [ %s ]',	'LOG_ME_IN'							=> 'Log me on automatically each visit',	'MARK'					=> 'Mark',	'MARK_ALL'				=> 'Mark all',	'MARK_FORUMS_READ'		=> 'Mark forums read',	'MARK_SUBFORUMS_READ'	=> 'Mark subforums read',	'MB'					=> 'MB',	'MIB'					=> 'MiB',	'MCP'					=> 'Moderator Control Panel',	'MEMBERLIST'			=> 'Members',	'MEMBERLIST_EXPLAIN'	=> 'View complete list of members',	'MERGE'					=> 'Merge',	'MERGE_POSTS'			=> 'Move posts',	'MERGE_TOPIC'			=> 'Merge topic',	'MESSAGE'				=> 'Message',	'MESSAGES'				=> 'Messages',	'MESSAGE_BODY'			=> 'Message body',	'MINUTES'				=> 'Minutes',	'MODERATE'				=> 'Moderate',	'MODERATOR'				=> 'Moderator',	'MODERATORS'			=> 'Moderators',	'MONTH'					=> 'Month',	'MOVE'					=> 'Move',	'MSNM'					=> 'MSNM/WLM',	'NA'						=> 'N/A',	'NEWEST_USER'				=> 'Our newest member <strong>%s</strong>',	'NEW_MESSAGE'				=> 'New message',	'NEW_MESSAGES'				=> 'New messages',	'NEW_PM'					=> '<strong>%d</strong> new message',	'NEW_PMS'					=> '<strong>%d</strong> new messages',	'NEW_POST'					=> 'New post',	// Not used anymore	'NEW_POSTS'					=> 'New posts',	// Not used anymore	'NEXT'						=> 'Next',		// Used in pagination	'NEXT_STEP'					=> 'Next',	'NEVER'						=> 'Never',	'NO'						=> 'No',	'NOT_ALLOWED_MANAGE_GROUP'	=> 'You are not allowed to manage this group.',	'NOT_AUTHORISED'			=> 'You are not authorised to access this area.',	'NOT_WATCHING_FORUM'		=> 'You are no longer subscribed to updates on this forum.',	'NOT_WATCHING_TOPIC'		=> 'You are no longer subscribed to this topic.',	'NOTIFY_ADMIN'				=> 'Please notify the board administrator or webmaster.',	'NOTIFY_ADMIN_EMAIL'		=> 'Please notify the board administrator or webmaster: <a href="mailto:%1$s">%1$s</a>',	'NO_ACCESS_ATTACHMENT'		=> 'You are not allowed to access this file.',	'NO_ACTION'					=> 'No action specified.',	'NO_ADMINISTRATORS'			=> 'There are no administrators.',	'NO_AUTH_ADMIN'				=> 'Access to the Administration Control Panel is not allowed as you do not have administrative permissions.',	'NO_AUTH_ADMIN_USER_DIFFER'	=> 'You are not able to re-authenticate as a different user.',	'NO_AUTH_OPERATION'			=> 'You do not have the necessary permissions to complete this operation.',	'NO_CONNECT_TO_SMTP_HOST'	=> 'Could not connect to smtp host : %1$s : %2$s',	'NO_BIRTHDAYS'				=> 'No birthdays today',	'NO_EMAIL_MESSAGE'			=> 'E-mail message was blank.',	'NO_EMAIL_RESPONSE_CODE'	=> 'Could not get mail server response codes.',	'NO_EMAIL_SUBJECT'			=> 'No e-mail subject specified.',	'NO_FORUM'					=> 'The forum you selected does not exist.',	'NO_FORUMS'					=> 'This board has no forums.',	'NO_GROUP'					=> 'The requested usergroup does not exist.',	'NO_GROUP_MEMBERS'			=> 'This group currently has no members.',	'NO_IPS_DEFINED'			=> 'No IP addresses or hostnames defined',	'NO_MEMBERS'				=> 'No members found for this search criterion.',	'NO_MESSAGES'				=> 'No messages',	'NO_MODE'					=> 'No mode specified.',	'NO_MODERATORS'				=> 'There are no moderators.',	'NO_NEW_MESSAGES'			=> 'No new messages',	'NO_NEW_PM'					=> '<strong>0</strong> new messages',	'NO_NEW_POSTS'				=> 'No new posts',	// Not used anymore	'NO_ONLINE_USERS'			=> 'No registered users',	'NO_POSTS'					=> 'No posts',	'NO_POSTS_TIME_FRAME'		=> 'No posts exist inside this topic for the selected time frame.',	'NO_FEED_ENABLED'			=> 'Feeds are not available on this board.',	'NO_FEED'					=> 'The requested feed is not available.',	'NO_SUBJECT'				=> 'No subject specified',								// Used for posts having no subject defined but displayed within management pages.	'NO_SUCH_SEARCH_MODULE'		=> 'The specified search backend doesnt exist.',	'NO_SUPPORTED_AUTH_METHODS'	=> 'No supported authentication methods.',	'NO_TOPIC'					=> 'The requested topic does not exist.',	'NO_TOPIC_FORUM'			=> 'The topic or forum no longer exists.',	'NO_TOPICS'					=> 'There are no topics or posts in this forum.',	'NO_TOPICS_TIME_FRAME'		=> 'No topics exist inside this forum for the selected time frame.',	'NO_UNREAD_PM'				=> '<strong>0</strong> unread messages',	'NO_UNREAD_POSTS'			=> 'No unread posts',	'NO_UPLOAD_FORM_FOUND'		=> 'Upload initiated but no valid file upload form found.',	'NO_USER'					=> 'The requested user does not exist.',	'NO_USERS'					=> 'The requested users do not exist.',	'NO_USER_SPECIFIED'			=> 'No username was specified.',	// Nullar/Singular/Plural language entry. The key numbers define the number range in which a certain grammatical expression is valid.	'NUM_POSTS_IN_QUEUE'		=> array(		0			=> 'No posts in queue',		// 0		1			=> '1 post in queue',		// 1		2			=> '%d posts in queue',		// 2+	),	'OCCUPATION'				=> 'Occupation',	'OFFLINE'					=> 'Offline',	'ONLINE'					=> 'Online',	'ONLINE_BUDDIES'			=> 'Online friends',	'ONLINE_USERS_TOTAL'		=> 'In total there are <strong>%d</strong> users online :: ',	'ONLINE_USERS_ZERO_TOTAL'	=> 'In total there are <strong>0</strong> users online :: ',	'ONLINE_USER_TOTAL'			=> 'In total there is <strong>%d</strong> user online :: ',	'OPTIONS'					=> 'Options',	'PAGE_OF'				=> 'Page <strong>%1$d</strong> of <strong>%2$d</strong>',	'PASSWORD'				=> 'Password',	'PIXEL'					=> 'px',	'PLAY_QUICKTIME_FILE'	=> 'Play Quicktime file',	'PM'					=> 'PM',	'PM_REPORTED'			=> 'Click to view report',	'POSTING_MESSAGE'		=> 'Posting message in %s',	'POSTING_PRIVATE_MESSAGE'	=> 'Composing private message',	'POST'					=> 'Post',	'POST_ANNOUNCEMENT'		=> 'Announce',	'POST_STICKY'			=> 'Sticky',	'POSTED'				=> 'Posted',	'POSTED_IN_FORUM'		=> 'in',	'POSTED_ON_DATE'		=> 'on',	'POSTS'					=> 'Posts',	'POSTS_UNAPPROVED'		=> 'At least one post in this topic has not been approved.',	'POST_BY_AUTHOR'		=> 'by',	'POST_BY_FOE'			=> 'This post was made by <strong>%1$s</strong> who is currently on your ignore list. %2$sDisplay this post%3$s.',	'POST_DAY'				=> '%.2f posts per day',	'POST_DETAILS'			=> 'Post details',	'POST_NEW_TOPIC'		=> 'Post new topic',	'POST_PCT'				=> '%.2f%% of all posts',	'POST_PCT_ACTIVE'		=> '%.2f%% of users posts',	'POST_PCT_ACTIVE_OWN'	=> '%.2f%% of your posts',	'POST_REPLY'			=> 'Post a reply',	'POST_REPORTED'			=> 'Click to view report',	'POST_SUBJECT'			=> 'Post subject',	'POST_TIME'				=> 'Post time',	'POST_TOPIC'			=> 'Post a new topic',	'POST_UNAPPROVED'		=> 'This post is waiting for approval',	'PREVIEW'				=> 'Preview',	'PREVIOUS'				=> 'Previous',		// Used in pagination	'PREVIOUS_STEP'			=> 'Previous',	'PRIVACY'				=> 'Privacy policy',	'PRIVATE_MESSAGE'		=> 'Private message',	'PRIVATE_MESSAGES'		=> 'Private messages',	'PRIVATE_MESSAGING'		=> 'Private messaging',	'PROFILE'				=> 'User Control Panel',	'READING_FORUM'				=> 'Viewing topics in %s',	'READING_GLOBAL_ANNOUNCE'	=> 'Reading global announcement',	'READING_LINK'				=> 'Following forum link %s',	'READING_TOPIC'				=> 'Reading topic in %s',	'READ_PROFILE'				=> 'Profile',	'REASON'					=> 'Reason',	'RECORD_ONLINE_USERS'		=> 'Most users ever online was <strong>%1$s</strong> on %2$s',	'REDIRECT'					=> 'Redirect',	'REDIRECTS'					=> 'Total redirects',	'REGISTER'					=> 'Register',	'REGISTERED_USERS'			=> 'Registered users:',	'REG_USERS_ONLINE'			=> 'There are %d registered users and ',	'REG_USERS_TOTAL'			=> '%d registered, ',	'REG_USERS_TOTAL_AND'		=> '%d registered and ',	'REG_USERS_ZERO_ONLINE'		=> 'There are 0 registered users and ',	'REG_USERS_ZERO_TOTAL'		=> '0 registered, ',	'REG_USERS_ZERO_TOTAL_AND'	=> '0 registered and ',	'REG_USER_ONLINE'			=> 'There is %d registered user and ',	'REG_USER_TOTAL'			=> '%d registered, ',	'REG_USER_TOTAL_AND'		=> '%d registered and ',	'REMOVE'					=> 'Remove',	'REMOVE_INSTALL'			=> 'Please delete, move or rename the install directory before you use your board. If this directory is still present, only the Administration Control Panel (ACP) will be accessible.',	'REPLIES'					=> 'Replies',	'REPLY_WITH_QUOTE'			=> 'Reply with quote',	'REPLYING_GLOBAL_ANNOUNCE'	=> 'Replying to global announcement',	'REPLYING_MESSAGE'			=> 'Replying to message in %s',	'REPORT_BY'					=> 'Report by',	'REPORT_POST'				=> 'Report this post',	'REPORTING_POST'			=> 'Reporting post',	'RESEND_ACTIVATION'			=> 'Resend activation e-mail',	'RESET'						=> 'Reset',	'RESTORE_PERMISSIONS'		=> 'Restore permissions',	'RETURN_INDEX'				=> '%sReturn to the index page%s',	'RETURN_FORUM'				=> '%sReturn to the forum last visited%s',	'RETURN_PAGE'				=> '%sReturn to the previous page%s',	'RETURN_TOPIC'				=> '%sReturn to the topic last visited%s',	'RETURN_TO'					=> 'Return to',	'FEED'						=> 'Feed',	'FEED_NEWS'					=> 'News',	'FEED_TOPICS_ACTIVE'		=> 'Active Topics',	'FEED_TOPICS_NEW'			=> 'New Topics',	'RULES_ATTACH_CAN'			=> 'You <strong>can</strong> post attachments in this forum',	'RULES_ATTACH_CANNOT'		=> 'You <strong>cannot</strong> post attachments in this forum',	'RULES_DELETE_CAN'			=> 'You <strong>can</strong> delete your posts in this forum',	'RULES_DELETE_CANNOT'		=> 'You <strong>cannot</strong> delete your posts in this forum',	'RULES_DOWNLOAD_CAN'		=> 'You <strong>can</strong> download attachments in this forum',	'RULES_DOWNLOAD_CANNOT'		=> 'You <strong>cannot</strong> download attachments in this forum',	'RULES_EDIT_CAN'			=> 'You <strong>can</strong> edit your posts in this forum',	'RULES_EDIT_CANNOT'			=> 'You <strong>cannot</strong> edit your posts in this forum',	'RULES_LOCK_CAN'			=> 'You <strong>can</strong> lock your topics in this forum',	'RULES_LOCK_CANNOT'			=> 'You <strong>cannot</strong> lock your topics in this forum',	'RULES_POST_CAN'			=> 'You <strong>can</strong> post new topics in this forum',	'RULES_POST_CANNOT'			=> 'You <strong>cannot</strong> post new topics in this forum',	'RULES_REPLY_CAN'			=> 'You <strong>can</strong> reply to topics in this forum',	'RULES_REPLY_CANNOT'		=> 'You <strong>cannot</strong> reply to topics in this forum',	'RULES_VOTE_CAN'			=> 'You <strong>can</strong> vote in polls in this forum',	'RULES_VOTE_CANNOT'			=> 'You <strong>cannot</strong> vote in polls in this forum',	'SEARCH'					=> 'Search',	'SEARCH_MINI'				=> 'Search',	'SEARCH_ADV'				=> 'Advanced search',	'SEARCH_ADV_EXPLAIN'		=> 'View the advanced search options',	'SEARCH_KEYWORDS'			=> 'Search for keywords',	'SEARCHING_FORUMS'			=> 'Searching forums',	'SEARCH_ACTIVE_TOPICS'		=> 'View active topics',	'SEARCH_FOR'				=> 'Search for',	'SEARCH_FORUM'				=> 'Search this forum',	'SEARCH_NEW'				=> 'View new posts',	'SEARCH_POSTS_BY'			=> 'Search posts by',	'SEARCH_SELF'				=> 'View your posts',	'SEARCH_TOPIC'				=> 'Search this topic',	'SEARCH_UNANSWERED'			=> 'View unanswered posts',	'SEARCH_UNREAD'				=> 'View unread posts',	'SEARCH_USER_POSTS'			=> 'Search users posts',	'SECONDS'					=> 'Seconds',	'SELECT'					=> 'Select',	'SELECT_ALL_CODE'			=> 'Select all',	'SELECT_DESTINATION_FORUM'	=> 'Please select a destination forum',	'SELECT_FORUM'				=> 'Select a forum',	'SEND_EMAIL'				=> 'E-mail',				// Used for submit buttons	'SEND_EMAIL_USER'			=> 'E-mail',				// Used as: {L_SEND_EMAIL_USER} {USERNAME} -> E-mail UserX	'SEND_PRIVATE_MESSAGE'		=> 'Send private message',	'SETTINGS'					=> 'Settings',	'SIGNATURE'					=> 'Signature',	'SKIP'						=> 'Skip to content',	'SMTP_NO_AUTH_SUPPORT'		=> 'SMTP server does not support authentication.',	'SORRY_AUTH_READ'			=> 'You are not authorised to read this forum.',	'SORRY_AUTH_VIEW_ATTACH'	=> 'You are not authorised to download this attachment.',	'SORT_BY'					=> 'Sort by',	'SORT_JOINED'				=> 'Joined date',	'SORT_LOCATION'				=> 'Location',	'SORT_RANK'					=> 'Rank',	'SORT_POSTS'				=> 'Posts',	'SORT_TOPIC_TITLE'			=> 'Topic title',	'SORT_USERNAME'				=> 'Username',	'SPLIT_TOPIC'				=> 'Split topic',	'SQL_ERROR_OCCURRED'		=> 'An SQL error occurred while fetching this page. Please contact the %sBoard Administrator%s if this problem persists.',	'STATISTICS'				=> 'Statistics',	'START_WATCHING_FORUM'		=> 'Subscribe forum',	'START_WATCHING_TOPIC'		=> 'Subscribe topic',	'STOP_WATCHING_FORUM'		=> 'Unsubscribe forum',	'STOP_WATCHING_TOPIC'		=> 'Unsubscribe topic',	'SUBFORUM'					=> 'Subforum',	'SUBFORUMS'					=> 'Subforums',	'SUBJECT'					=> 'Subject',	'SUBMIT'					=> 'Submit',	'TERMS_USE'			=> 'Terms of use',	'TEST_CONNECTION'	=> 'Test connection',	'THE_TEAM'			=> 'The team',	'TIME'				=> 'Time',		'TOO_LARGE'						=> 'The value you entered is too large.',	'TOO_LARGE_MAX_RECIPIENTS'		=> 'The value of <strong>Maximum number of allowed recipients per private message</strong> setting you entered is too large.',	'TOO_LONG'						=> 'The value you entered is too long.',	'TOO_LONG_AIM'					=> 'The screenname you entered is too long.',	'TOO_LONG_CONFIRM_CODE'			=> 'The confirm code you entered is too long.',	'TOO_LONG_DATEFORMAT'			=> 'The date format you entered is too long.',	'TOO_LONG_ICQ'					=> 'The ICQ number you entered is too long.',	'TOO_LONG_INTERESTS'			=> 'The interests you entered is too long.',	'TOO_LONG_JABBER'				=> 'The Jabber account name you entered is too long.',	'TOO_LONG_LOCATION'				=> 'The location you entered is too long.',	'TOO_LONG_MSN'					=> 'The MSNM/WLM name you entered is too long.',	'TOO_LONG_NEW_PASSWORD'			=> 'The password you entered is too long.',	'TOO_LONG_OCCUPATION'			=> 'The occupation you entered is too long.',	'TOO_LONG_PASSWORD_CONFIRM'		=> 'The password confirmation you entered is too long.',	'TOO_LONG_USER_PASSWORD'		=> 'The password you entered is too long.',	'TOO_LONG_USERNAME'				=> 'The username you entered is too long.',	'TOO_LONG_EMAIL'				=> 'The e-mail address you entered is too long.',	'TOO_LONG_EMAIL_CONFIRM'		=> 'The e-mail address confirmation you entered is too long.',	'TOO_LONG_WEBSITE'				=> 'The website address you entered is too long.',	'TOO_LONG_YIM'					=> 'The Yahoo! Messenger name you entered is too long.',	'TOO_MANY_VOTE_OPTIONS'			=> 'You have tried to vote for too many options.',	'TOO_SHORT'						=> 'The value you entered is too short.',	'TOO_SHORT_AIM'					=> 'The screenname you entered is too short.',	'TOO_SHORT_CONFIRM_CODE'		=> 'The confirm code you entered is too short.',	'TOO_SHORT_DATEFORMAT'			=> 'The date format you entered is too short.',	'TOO_SHORT_ICQ'					=> 'The ICQ number you entered is too short.',	'TOO_SHORT_INTERESTS'			=> 'The interests you entered is too short.',	'TOO_SHORT_JABBER'				=> 'The Jabber account name you entered is too short.',	'TOO_SHORT_LOCATION'			=> 'The location you entered is too short.',	'TOO_SHORT_MSN'					=> 'The MSNM/WLM name you entered is too short.',	'TOO_SHORT_NEW_PASSWORD'		=> 'The password you entered is too short.',	'TOO_SHORT_OCCUPATION'			=> 'The occupation you entered is too short.',	'TOO_SHORT_PASSWORD_CONFIRM'	=> 'The password confirmation you entered is too short.',	'TOO_SHORT_USER_PASSWORD'		=> 'The password you entered is too short.',	'TOO_SHORT_USERNAME'			=> 'The username you entered is too short.',	'TOO_SHORT_EMAIL'				=> 'The e-mail address you entered is too short.',	'TOO_SHORT_EMAIL_CONFIRM'		=> 'The e-mail address confirmation you entered is too short.',	'TOO_SHORT_WEBSITE'				=> 'The website address you entered is too short.',	'TOO_SHORT_YIM'					=> 'The Yahoo! Messenger name you entered is too short.',		'TOO_SMALL'						=> 'The value you entered is too small.',	'TOO_SMALL_MAX_RECIPIENTS'		=> 'The value of <strong>Maximum number of allowed recipients per private message</strong> setting you entered is too small.',	'TOPIC'				=> 'Topic',	'TOPICS'			=> 'Topics',	'TOPICS_UNAPPROVED'	=> 'At least one topic in this forum has not been approved.',	'TOPIC_ICON'		=> 'Topic icon',	'TOPIC_LOCKED'		=> 'This topic is locked, you cannot edit posts or make further replies.',	'TOPIC_LOCKED_SHORT'=> 'Topic locked',	'TOPIC_MOVED'		=> 'Moved topic',	'TOPIC_REVIEW'		=> 'Topic review',	'TOPIC_TITLE'		=> 'Topic title',	'TOPIC_UNAPPROVED'	=> 'This topic has not been approved',	'TOTAL_ATTACHMENTS'	=> 'Attachment(s)',	'TOTAL_LOG'			=> '1 log',	'TOTAL_LOGS'		=> '%d logs',	'TOTAL_NO_PM'		=> '0 private messages in total',	'TOTAL_PM'			=> '1 private message in total',	'TOTAL_PMS'			=> '%d private messages in total',	'TOTAL_POSTS'		=> 'Total posts',	'TOTAL_POSTS_OTHER'	=> 'Total posts <strong>%d</strong>',	'TOTAL_POSTS_ZERO'	=> 'Total posts <strong>0</strong>',	'TOPIC_REPORTED'	=> 'This topic has been reported',	'TOTAL_TOPICS_OTHER'=> 'Total topics <strong>%d</strong>',	'TOTAL_TOPICS_ZERO'	=> 'Total topics <strong>0</strong>',	'TOTAL_USERS_OTHER'	=> 'Total members <strong>%d</strong>',	'TOTAL_USERS_ZERO'	=> 'Total members <strong>0</strong>',	'TRACKED_PHP_ERROR'	=> 'Tracked PHP errors: %s',	'UNABLE_GET_IMAGE_SIZE'	=> 'It was not possible to determine the dimensions of the image.',	'UNABLE_TO_DELIVER_FILE'=> 'Unable to deliver file.',	'UNKNOWN_BROWSER'		=> 'Unknown browser',	'UNMARK_ALL'			=> 'Unmark all',	'UNREAD_MESSAGES'		=> 'Unread messages',	'UNREAD_PM'				=> '<strong>%d</strong> unread message',	'UNREAD_PMS'			=> '<strong>%d</strong> unread messages',	'UNREAD_POST'			=> 'Unread post',	'UNREAD_POSTS'			=> 'Unread posts',	'UNWATCH_FORUM_CONFIRM'		=> 'Are you sure you wish to unsubscribe from this forum?',	'UNWATCH_FORUM_DETAILED'	=> 'Are you sure you wish to unsubscribe from the forum %s?',	'UNWATCH_TOPIC_CONFIRM'		=> 'Are you sure you wish to unsubscribe from this topic?',	'UNWATCH_TOPIC_DETAILED'	=> 'Are you sure you wish to unsubscribe from the topic %s?',	'UNWATCHED_FORUMS'			=> 'You are no longer subscribed to the selected forums.',	'UNWATCHED_TOPICS'			=> 'You are no longer subscribed to the selected topics.',	'UNWATCHED_FORUMS_TOPICS'	=> 'You are no longer subscribed to the selected entries.',	'UPDATE'				=> 'Update',	'UPLOAD_IN_PROGRESS'	=> 'The upload is currently in progress.',	'URL_REDIRECT'			=> 'If your browser does not support meta redirection %splease click HERE to be redirected%s.',	'USERGROUPS'			=> 'Groups',	'USERNAME'				=> 'Username',	'USERNAMES'				=> 'Usernames',	'USER_AVATAR'			=> 'User avatar',	'USER_CANNOT_READ'		=> 'You cannot read posts in this forum.',	'USER_POST'				=> '%d Post',	'USER_POSTS'			=> '%d Posts',	'USERS'					=> 'Users',	'USE_PERMISSIONS'		=> 'Test out users permissions',	'USER_NEW_PERMISSION_DISALLOWED'	=> 'We are sorry, but you are not authorised to use this feature. You may have just registered here and may need to participate more to be able to use this feature.',	'VARIANT_DATE_SEPARATOR'	=> ' / ',	// Used in date format dropdown, eg: "Today, 13:37 / 01 Jan 2007, 13:37" ... to join a relative date with calendar date	'VIEWED'					=> 'Viewed',	'VIEWING_FAQ'				=> 'Viewing FAQ',	'VIEWING_MEMBERS'			=> 'Viewing member details',	'VIEWING_ONLINE'			=> 'Viewing who is online',	'VIEWING_MCP'				=> 'Viewing moderator control panel',	'VIEWING_MEMBER_PROFILE'	=> 'Viewing member profile',	'VIEWING_PRIVATE_MESSAGES'	=> 'Viewing private messages',	'VIEWING_REGISTER'			=> 'Registering account',	'VIEWING_UCP'				=> 'Viewing user control panel',	'VIEWS'						=> 'Views',	'VIEW_BOOKMARKS'			=> 'View bookmarks',	'VIEW_FORUM_LOGS'			=> 'View Logs',	'VIEW_LATEST_POST'			=> 'View the latest post',	'VIEW_NEWEST_POST'			=> 'View first unread post',	'VIEW_NOTES'				=> 'View user notes',	'VIEW_ONLINE_TIME'			=> 'based on users active over the past %d minute',	'VIEW_ONLINE_TIMES'			=> 'based on users active over the past %d minutes',	'VIEW_TOPIC'				=> 'View topic',	'VIEW_TOPIC_ANNOUNCEMENT'	=> 'Announcement: ',	'VIEW_TOPIC_GLOBAL'			=> 'Global Announcement: ',	'VIEW_TOPIC_LOCKED'			=> 'Locked: ',	'VIEW_TOPIC_LOGS'			=> 'View logs',	'VIEW_TOPIC_MOVED'			=> 'Moved: ',	'VIEW_TOPIC_POLL'			=> 'Poll: ',	'VIEW_TOPIC_STICKY'			=> 'Sticky: ',	'VISIT_WEBSITE'				=> 'Visit website',	'WARNINGS'			=> 'Warnings',	'WARN_USER'			=> 'Warn user',	'WATCH_FORUM_CONFIRM'	=> 'Are you sure you wish to subscribe to this forum?',	'WATCH_FORUM_DETAILED'	=> 'Are you sure you wish to subscribe to the forum %s?',	'WATCH_TOPIC_CONFIRM'	=> 'Are you sure you wish to subscribe to this topic?',	'WATCH_TOPIC_DETAILED'	=> 'Are you sure you wish to subscribe to the topic %s?',	'WELCOME_SUBJECT'	=> 'Welcome to %s forums',	'WEBSITE'			=> 'Website',	'WHOIS'				=> 'Whois',	'WHO_IS_ONLINE'		=> 'Who is online',	'WRONG_PASSWORD'	=> 'You entered an incorrect password.',	'WRONG_DATA_ICQ'			=> 'The number you entered is not a valid ICQ number.',	'WRONG_DATA_JABBER'			=> 'The name you entered is not a valid Jabber account name.',	'WRONG_DATA_LANG'			=> 'The language you specified is not valid.',	'WRONG_DATA_WEBSITE'		=> 'The website address has to be a valid URL, including the protocol. For example http://www.example.com/.',	'WROTE'						=> 'wrote',	'YEAR'				=> 'Year',	'YEAR_MONTH_DAY'	=> '(YYYY-MM-DD)',	'YES'				=> 'Yes',	'YIM'				=> 'YIM',	'YOU_LAST_VISIT'	=> 'Last visit was: %s',	'YOU_NEW_PM'		=> 'A new private message is waiting for you in your Inbox.',	'YOU_NEW_PMS'		=> 'New private messages are waiting for you in your Inbox.',	'YOU_NO_NEW_PM'		=> 'No new private messages are waiting for you.',	'datetime'			=> array(		'TODAY'		=> 'Today',		'TOMORROW'	=> 'Tomorrow',		'YESTERDAY'	=> 'Yesterday',		'AGO'		=> array(			0		=> 'less than a minute ago',			1		=> '%d minute ago',			2		=> '%d minutes ago',			60		=> '1 hour ago',		),		'Sunday'	=> 'Sunday',		'Monday'	=> 'Monday',		'Tuesday'	=> 'Tuesday',		'Wednesday'	=> 'Wednesday',		'Thursday'	=> 'Thursday',		'Friday'	=> 'Friday',		'Saturday'	=> 'Saturday',		'Sun'		=> 'Sun',		'Mon'		=> 'Mon',		'Tue'		=> 'Tue',		'Wed'		=> 'Wed',		'Thu'		=> 'Thu',		'Fri'		=> 'Fri',		'Sat'		=> 'Sat',		'January'	=> 'January',		'February'	=> 'February',		'March'		=> 'March',		'April'		=> 'April',		'May'		=> 'May',		'June'		=> 'June',		'July'		=> 'July',		'August'	=> 'August',		'September' => 'September',		'October'	=> 'October',		'November'	=> 'November',		'December'	=> 'December',		'Jan'		=> 'Jan',		'Feb'		=> 'Feb',		'Mar'		=> 'Mar',		'Apr'		=> 'Apr',		'May_short'	=> 'May',	// Short representation of "May". May_short used because in English the short and long date are the same for May.		'Jun'		=> 'Jun',		'Jul'		=> 'Jul',		'Aug'		=> 'Aug',		'Sep'		=> 'Sep',		'Oct'		=> 'Oct',		'Nov'		=> 'Nov',		'Dec'		=> 'Dec',	),	'tz'				=> array(		'-12'	=> 'UTC - 12 hours',		'-11'	=> 'UTC - 11 hours',		'-10'	=> 'UTC - 10 hours',		'-9.5'	=> 'UTC - 9:30 hours',		'-9'	=> 'UTC - 9 hours',		'-8'	=> 'UTC - 8 hours',		'-7'	=> 'UTC - 7 hours',		'-6'	=> 'UTC - 6 hours',		'-5'	=> 'UTC - 5 hours',		'-4.5'	=> 'UTC - 4:30 hours',		'-4'	=> 'UTC - 4 hours',		'-3.5'	=> 'UTC - 3:30 hours',		'-3'	=> 'UTC - 3 hours',		'-2'	=> 'UTC - 2 hours',		'-1'	=> 'UTC - 1 hour',		'0'		=> 'UTC',		'1'		=> 'UTC + 1 hour',		'2'		=> 'UTC + 2 hours',		'3'		=> 'UTC + 3 hours',		'3.5'	=> 'UTC + 3:30 hours',		'4'		=> 'UTC + 4 hours',		'4.5'	=> 'UTC + 4:30 hours',		'5'		=> 'UTC + 5 hours',		'5.5'	=> 'UTC + 5:30 hours',		'5.75'	=> 'UTC + 5:45 hours',		'6'		=> 'UTC + 6 hours',		'6.5'	=> 'UTC + 6:30 hours',		'7'		=> 'UTC + 7 hours',		'8'		=> 'UTC + 8 hours',		'8.75'	=> 'UTC + 8:45 hours',		'9'		=> 'UTC + 9 hours',		'9.5'	=> 'UTC + 9:30 hours',		'10'	=> 'UTC + 10 hours',		'10.5'	=> 'UTC + 10:30 hours',		'11'	=> 'UTC + 11 hours',		'11.5'	=> 'UTC + 11:30 hours',		'12'	=> 'UTC + 12 hours',		'12.75'	=> 'UTC + 12:45 hours',		'13'	=> 'UTC + 13 hours',		'14'	=> 'UTC + 14 hours',		'dst'	=> '[ <abbr title="Daylight Saving Time">DST</abbr> ]',	),	'tz_zones'	=> array(		'-12'	=> '[UTC - 12] Baker Island Time',		'-11'	=> '[UTC - 11] Niue Time, Samoa Standard Time',		'-10'	=> '[UTC - 10] Hawaii-Aleutian Standard Time, Cook Island Time',		'-9.5'	=> '[UTC - 9:30] Marquesas Islands Time',		'-9'	=> '[UTC - 9] Alaska Standard Time, Gambier Island Time',		'-8'	=> '[UTC - 8] Pacific Standard Time',		'-7'	=> '[UTC - 7] Mountain Standard Time',		'-6'	=> '[UTC - 6] Central Standard Time',		'-5'	=> '[UTC - 5] Eastern Standard Time',		'-4.5'	=> '[UTC - 4:30] Venezuelan Standard Time',		'-4'	=> '[UTC - 4] Atlantic Standard Time',		'-3.5'	=> '[UTC - 3:30] Newfoundland Standard Time',		'-3'	=> '[UTC - 3] Amazon Standard Time, Central Greenland Time',		'-2'	=> '[UTC - 2] Fernando de Noronha Time, South Georgia &amp; the South Sandwich Islands Time',		'-1'	=> '[UTC - 1] Azores Standard Time, Cape Verde Time, Eastern Greenland Time',		'0'		=> '[UTC] Western European Time, Greenwich Mean Time',		'1'		=> '[UTC + 1] Central European Time, West African Time',		'2'		=> '[UTC + 2] Eastern European Time, Central African Time',		'3'		=> '[UTC + 3] Moscow Standard Time, Eastern African Time',		'3.5'	=> '[UTC + 3:30] Iran Standard Time',		'4'		=> '[UTC + 4] Gulf Standard Time, Samara Standard Time',		'4.5'	=> '[UTC + 4:30] Afghanistan Time',		'5'		=> '[UTC + 5] Pakistan Standard Time, Yekaterinburg Standard Time',		'5.5'	=> '[UTC + 5:30] Indian Standard Time, Sri Lanka Time',		'5.75'	=> '[UTC + 5:45] Nepal Time',		'6'		=> '[UTC + 6] Bangladesh Time, Bhutan Time, Novosibirsk Standard Time',		'6.5'	=> '[UTC + 6:30] Cocos Islands Time, Myanmar Time',		'7'		=> '[UTC + 7] Indochina Time, Krasnoyarsk Standard Time',		'8'		=> '[UTC + 8] Chinese Standard Time, Australian Western Standard Time, Irkutsk Standard Time',		'8.75'	=> '[UTC + 8:45] Southeastern Western Australia Standard Time',		'9'		=> '[UTC + 9] Japan Standard Time, Korea Standard Time, Chita Standard Time',		'9.5'	=> '[UTC + 9:30] Australian Central Standard Time',		'10'	=> '[UTC + 10] Australian Eastern Standard Time, Vladivostok Standard Time',		'10.5'	=> '[UTC + 10:30] Lord Howe Standard Time',		'11'	=> '[UTC + 11] Solomon Island Time, Magadan Standard Time',		'11.5'	=> '[UTC + 11:30] Norfolk Island Time',		'12'	=> '[UTC + 12] New Zealand Time, Fiji Time, Kamchatka Standard Time',		'12.75'	=> '[UTC + 12:45] Chatham Islands Time',		'13'	=> '[UTC + 13] Tonga Time, Phoenix Islands Time',		'14'	=> '[UTC + 14] Line Island Time',	),	// The value is only an example and will get replaced by the current time on view	'dateformats'	=> array(		'd M Y, H:i'			=> '01 Jan 2007, 13:37',		'd M Y H:i'				=> '01 Jan 2007 13:37',		'M jS, \'y, H:i'		=> 'Jan 1st, \'07, 13:37',		'D M d, Y g:i a'		=> 'Mon Jan 01, 2007 1:37 pm',		'F jS, Y, g:i a'		=> 'January 1st, 2007, 1:37 pm',		'|d M Y|, H:i'			=> 'Today, 13:37 / 01 Jan 2007, 13:37',		'|F jS, Y|, g:i a'		=> 'Today, 1:37 pm / January 1st, 2007, 1:37 pm'	),	// The default dateformat which will be used on new installs in this language	// Translators should change this if a the usual date format is different	'default_dateformat'	=> 'D M d, Y g:i a', // Mon Jan 01, 2007 1:37 pm));?>
<?php/**** @package install* @version $Id$* @copyright (c) 2006 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**/define('UPDATES_TO_VERSION', '3.0.10');// Enter any version to update from to test updates. The version within the db will not be updated.define('DEBUG_FROM_VERSION', false);// Which oldest version does this updater support?define('OLDEST_FROM_VERSION', '3.0.0');// Return if we "just include it" to find out for which version the database update is responsible forif (defined('IN_PHPBB') && defined('IN_INSTALL')){	$updates_to_version = UPDATES_TO_VERSION;	$debug_from_version = DEBUG_FROM_VERSION;	$oldest_from_version = OLDEST_FROM_VERSION;	return;}/***/define('IN_PHPBB', true);define('IN_INSTALL', true);$phpbb_root_path = (defined('PHPBB_ROOT_PATH')) ? PHPBB_ROOT_PATH : './../';$phpEx = substr(strrchr(__FILE__, '.'), 1);if (!function_exists('phpbb_require_updated')){	function phpbb_require_updated($path, $optional = false)	{		global $phpbb_root_path;		$new_path = $phpbb_root_path . 'install/update/new/' . $path;		$old_path = $phpbb_root_path . $path;		if (file_exists($new_path))		{			require($new_path);		}		else if (!$optional || file_exists($old_path))		{			require($old_path);		}	}}phpbb_require_updated('includes/startup.' . $phpEx);$updates_to_version = UPDATES_TO_VERSION;$debug_from_version = DEBUG_FROM_VERSION;$oldest_from_version = OLDEST_FROM_VERSION;error_reporting(E_ALL);@set_time_limit(0);// Include essential scriptsinclude($phpbb_root_path . 'config.' . $phpEx);if (!defined('PHPBB_INSTALLED') || empty($dbms) || empty($acm_type)){	die("Please read: <a href='../docs/INSTALL.html'>INSTALL.html</a> before attempting to update.");}// Load Extensionsif (!empty($load_extensions) && function_exists('dl')){	$load_extensions = explode(',', $load_extensions);	foreach ($load_extensions as $extension)	{		@dl(trim($extension));	}}// Include filesrequire($phpbb_root_path . 'includes/acm/acm_' . $acm_type . '.' . $phpEx);require($phpbb_root_path . 'includes/cache.' . $phpEx);require($phpbb_root_path . 'includes/template.' . $phpEx);require($phpbb_root_path . 'includes/session.' . $phpEx);require($phpbb_root_path . 'includes/auth.' . $phpEx);require($phpbb_root_path . 'includes/functions.' . $phpEx);phpbb_require_updated('includes/functions_content.' . $phpEx, true);require($phpbb_root_path . 'includes/functions_admin.' . $phpEx);require($phpbb_root_path . 'includes/constants.' . $phpEx);require($phpbb_root_path . 'includes/db/' . $dbms . '.' . $phpEx);require($phpbb_root_path . 'includes/utf/utf_tools.' . $phpEx);phpbb_require_updated('includes/db/db_tools.' . $phpEx);// new table constants are separately defined here in case the updater is run// before the files are updatedif (!defined('LOGIN_ATTEMPT_TABLE')){	define('LOGIN_ATTEMPT_TABLE', $table_prefix . 'login_attempts');}$user = new user();$cache = new cache();$db = new $sql_db();// Add own hook handler, if present. :oif (file_exists($phpbb_root_path . 'includes/hooks/index.' . $phpEx)){	require($phpbb_root_path . 'includes/hooks/index.' . $phpEx);	$phpbb_hook = new phpbb_hook(array('exit_handler', 'phpbb_user_session_handler', 'append_sid', array('template', 'display')));	foreach ($cache->obtain_hooks() as $hook)	{		@include($phpbb_root_path . 'includes/hooks/' . $hook . '.' . $phpEx);	}}else{	$phpbb_hook = false;}// Connect to DB$db->sql_connect($dbhost, $dbuser, $dbpasswd, $dbname, $dbport, false, false);// We do not need this any longer, unset for safety purposesunset($dbpasswd);$user->ip = (!empty($_SERVER['REMOTE_ADDR'])) ? htmlspecialchars($_SERVER['REMOTE_ADDR']) : '';$user->ip = (stripos($user->ip, '::ffff:') === 0) ? substr($user->ip, 7) : $user->ip;$sql = "SELECT config_value	FROM " . CONFIG_TABLE . "	WHERE config_name = 'default_lang'";$result = $db->sql_query($sql);$row = $db->sql_fetchrow($result);$db->sql_freeresult($result);$language = basename(request_var('language', ''));if (!$language){	$language = $row['config_value'];}if (!file_exists($phpbb_root_path . 'language/' . $language)){	die('No language found!');}// And finally, load the relevant language filesinclude($phpbb_root_path . 'language/' . $language . '/common.' . $phpEx);include($phpbb_root_path . 'language/' . $language . '/acp/common.' . $phpEx);include($phpbb_root_path . 'language/' . $language . '/install.' . $phpEx);// Set PHP error handler to ours//set_error_handler('msg_handler');// Define some variables for the database update$inline_update = (request_var('type', 0)) ? true : false;// To let set_config() calls succeed, we need to make the config array available globally$config = array();$sql = 'SELECT *	FROM ' . CONFIG_TABLE;$result = $db->sql_query($sql);while ($row = $db->sql_fetchrow($result)){	$config[$row['config_name']] = $row['config_value'];}$db->sql_freeresult($result);// phpbb_db_tools will be taken from new files (under install/update/new)// if possible, falling back to the board's copy.$db_tools = new phpbb_db_tools($db, true);$database_update_info = database_update_info();$error_ary = array();$errored = false;header('Content-type: text/html; charset=UTF-8');?><!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd"><html xmlns="http://www.w3.org/1999/xhtml" dir="<?php echo $lang['DIRECTION']; ?>" lang="<?php echo $lang['USER_LANG']; ?>" xml:lang="<?php echo $lang['USER_LANG']; ?>"><head><meta http-equiv="content-type" content="text/html; charset=UTF-8" /><meta http-equiv="content-language" content="<?php echo $lang['USER_LANG']; ?>" /><meta http-equiv="content-style-type" content="text/css" /><meta http-equiv="imagetoolbar" content="no" /><title><?php echo $lang['UPDATING_TO_LATEST_STABLE']; ?></title><link href="../adm/style/admin.css" rel="stylesheet" type="text/css" media="screen" /></head><body><div id="wrap">	<div id="page-header">&nbsp;</div>	<div id="page-body">		<div id="acp">		<div class="panel">			<span class="corners-top"><span></span></span>				<div id="content">					<div id="main" class="install-body">	<h1><?php echo $lang['UPDATING_TO_LATEST_STABLE']; ?></h1>	<br />	<p><?php echo $lang['DATABASE_TYPE']; ?> :: <strong><?php echo $db->sql_layer; ?></strong><br /><?phpif ($debug_from_version !== false){	$config['version'] = $debug_from_version;}echo $lang['PREVIOUS_VERSION'] . ' :: <strong>' . $config['version'] . '</strong><br />';echo $lang['UPDATED_VERSION'] . ' :: <strong>' . $updates_to_version . '</strong></p>';$current_version = str_replace('rc', 'RC', strtolower($config['version']));$latest_version = str_replace('rc', 'RC', strtolower($updates_to_version));$orig_version = $config['version'];// Fill DB versionif (empty($config['dbms_version'])){	set_config('dbms_version', $db->sql_server_info(true));}// Firebird update from Firebird 2.0 to 2.1+ required?if ($db->sql_layer == 'firebird'){	// We do not trust any PHP5 function enabled, we will simply test for a function new in 2.1	$db->sql_return_on_error(true);	$sql = 'SELECT 1 FROM RDB$DATABASE		WHERE BIN_AND(10, 1) = 0';	$result = $db->sql_query($sql);	if (!$result || $db->sql_error_triggered)	{		echo '<br /><br />';		echo '<h1>' . $lang['ERROR'] . '</h1><br />';		echo '<p>' . $lang['FIREBIRD_DBMS_UPDATE_REQUIRED'] . '</p>';		_print_footer();		exit_handler();		exit;	}	$db->sql_freeresult($result);	$db->sql_return_on_error(false);}// MySQL update from MySQL 3.x/4.x to > 4.1.x required?if ($db->sql_layer == 'mysql' || $db->sql_layer == 'mysql4' || $db->sql_layer == 'mysqli'){	// Verify by fetching column... if the column type matches the new type we update dbms_version...	$sql = "SHOW COLUMNS FROM " . CONFIG_TABLE;	$result = $db->sql_query($sql);	$column_type = '';	while ($row = $db->sql_fetchrow($result))	{		$field = strtolower($row['Field']);		if ($field == 'config_value')		{			$column_type = strtolower($row['Type']);			break;		}	}	$db->sql_freeresult($result);	// If column type is blob, but mysql version says we are on > 4.1.3, then the schema needs an update	if (strpos($column_type, 'blob') !== false && version_compare($db->sql_server_info(true), '4.1.3', '>='))	{		echo '<br /><br />';		echo '<h1>' . $lang['ERROR'] . '</h1><br />';		echo '<p>' . sprintf($lang['MYSQL_SCHEMA_UPDATE_REQUIRED'], $config['dbms_version'], $db->sql_server_info(true)) . '</p>';		_print_footer();		exit_handler();		exit;	}}// Now check if the user wants to update from a version we no longer support updates fromif (version_compare($current_version, $oldest_from_version, '<')){	echo '<br /><br /><h1>' . $lang['ERROR'] . '</h1><br />';	echo '<p>' . sprintf($lang['DB_UPDATE_NOT_SUPPORTED'], $oldest_from_version, $current_version) . '</p>';	_print_footer();	exit_handler();	exit;}// If the latest version and the current version are 'unequal', we will update the version_update_from, else we do not update anything.if ($inline_update){	if ($current_version !== $latest_version)	{		set_config('version_update_from', $orig_version);	}}else{	// If not called from the update script, we will actually remove the traces	$db->sql_query('DELETE FROM ' . CONFIG_TABLE . " WHERE config_name = 'version_update_from'");}// Schema updates?>	<br /><br />	<h1><?php echo $lang['UPDATE_DATABASE_SCHEMA']; ?></h1>	<br />	<p><?php echo $lang['PROGRESS']; ?> :: <strong><?phpflush();// We go through the schema changes from the lowest to the highest version// We try to also include versions 'in-between'...$no_updates = true;$versions = array_keys($database_update_info);for ($i = 0; $i < sizeof($versions); $i++){	$version = $versions[$i];	$schema_changes = $database_update_info[$version];	$next_version = (isset($versions[$i + 1])) ? $versions[$i + 1] : $updates_to_version;	// If the installed version to be updated to is < than the current version, and if the current version is >= as the version to be updated to next, we will skip the process	if (version_compare($version, $current_version, '<') && version_compare($current_version, $next_version, '>='))	{		continue;	}	if (!sizeof($schema_changes))	{		continue;	}	$no_updates = false;	// We run one index after the other... to be consistent with schema changes...	foreach ($schema_changes as $key => $changes)	{		$statements = $db_tools->perform_schema_changes(array($key => $changes));		foreach ($statements as $sql)		{			_sql($sql, $errored, $error_ary);		}	}}_write_result($no_updates, $errored, $error_ary);// Data updates$error_ary = array();$errored = $no_updates = false;?><br /><br /><h1><?php echo $lang['UPDATING_DATA']; ?></h1><br /><p><?php echo $lang['PROGRESS']; ?> :: <strong><?phpflush();$no_updates = true;$versions = array_keys($database_update_info);// some code magicfor ($i = 0; $i < sizeof($versions); $i++){	$version = $versions[$i];	$next_version = (isset($versions[$i + 1])) ? $versions[$i + 1] : $updates_to_version;	// If the installed version to be updated to is < than the current version, and if the current version is >= as the version to be updated to next, we will skip the process	if (version_compare($version, $current_version, '<') && version_compare($current_version, $next_version, '>='))	{		continue;	}	change_database_data($no_updates, $version);}_write_result($no_updates, $errored, $error_ary);$error_ary = array();$errored = $no_updates = false;?><br /><br /><h1><?php echo $lang['UPDATE_VERSION_OPTIMIZE']; ?></h1><br /><p><?php echo $lang['PROGRESS']; ?> :: <strong><?phpflush();if ($debug_from_version === false){	// update the version	$sql = "UPDATE " . CONFIG_TABLE . "		SET config_value = '$updates_to_version'		WHERE config_name = 'version'";	_sql($sql, $errored, $error_ary);}// Reset permissions$sql = 'UPDATE ' . USERS_TABLE . "	SET user_permissions = '',		user_perm_from = 0";_sql($sql, $errored, $error_ary);// Update the dbms version if everything is ok...set_config('dbms_version', $db->sql_server_info(true));/* Optimize/vacuum analyze the tables where appropriate// this should be done for each version in future along with// the version number updateswitch ($db->sql_layer){	case 'mysql':	case 'mysqli':	case 'mysql4':		$sql = 'OPTIMIZE TABLE ' . $table_prefix . 'auth_access, ' . $table_prefix . 'banlist, ' . $table_prefix . 'categories, ' . $table_prefix . 'config, ' . $table_prefix . 'disallow, ' . $table_prefix . 'forum_prune, ' . $table_prefix . 'forums, ' . $table_prefix . 'groups, ' . $table_prefix . 'posts, ' . $table_prefix . 'posts_text, ' . $table_prefix . 'privmsgs, ' . $table_prefix . 'privmsgs_text, ' . $table_prefix . 'ranks, ' . $table_prefix . 'search_results, ' . $table_prefix . 'search_wordlist, ' . $table_prefix . 'search_wordmatch, ' . $table_prefix . 'sessions_keys' . $table_prefix . 'smilies, ' . $table_prefix . 'themes, ' . $table_prefix . 'themes_name, ' . $table_prefix . 'topics, ' . $table_prefix . 'topics_watch, ' . $table_prefix . 'user_group, ' . $table_prefix . 'users, ' . $table_prefix . 'vote_desc, ' . $table_prefix . 'vote_results, ' . $table_prefix . 'vote_voters, ' . $table_prefix . 'words';		_sql($sql, $errored, $error_ary);	break;	case 'postgresql':		_sql("VACUUM ANALYZE", $errored, $error_ary);	break;}*/_write_result($no_updates, $errored, $error_ary);?><br /><h1><?php echo $lang['UPDATE_COMPLETED']; ?></h1><br /><?phpif (!$inline_update){?>	<p style="color:red"><?php echo $lang['UPDATE_FILES_NOTICE']; ?></p>	<p><?php echo $lang['COMPLETE_LOGIN_TO_BOARD']; ?></p><?php}else{?>	<p><?php echo ((isset($lang['INLINE_UPDATE_SUCCESSFUL'])) ? $lang['INLINE_UPDATE_SUCCESSFUL'] : 'The database update was successful. Now you need to continue the update process.'); ?></p>	<p><a href="<?php echo append_sid("{$phpbb_root_path}install/index.{$phpEx}", "mode=update&amp;sub=file_check&amp;language=$language"); ?>" class="button1"><?php echo (isset($lang['CONTINUE_UPDATE_NOW'])) ? $lang['CONTINUE_UPDATE_NOW'] : 'Continue the update process now'; ?></a></p><?php}// Add database update to logadd_log('admin', 'LOG_UPDATE_DATABASE', $orig_version, $updates_to_version);// Now we purge the session table as well as all cache files$cache->purge();_print_footer();garbage_collection();if (function_exists('exit_handler')){	exit_handler();}/*** Print out footer*/function _print_footer(){	echo <<<EOF					</div>				</div>			<span class="corners-bottom"><span></span></span>		</div>		</div>	</div>	<div id="page-footer">		Powered by <a href="http://www.phpbb.com/">phpBB</a>&reg; Forum Software &copy; phpBB Group	</div></div></body></html>EOF;}/*** Function for triggering an sql statement*/function _sql($sql, &$errored, &$error_ary, $echo_dot = true){	global $db;	if (defined('DEBUG_EXTRA'))	{		echo "<br />\n{$sql}\n<br />";	}	$db->sql_return_on_error(true);	if ($sql === 'begin')	{		$result = $db->sql_transaction('begin');	}	else if ($sql === 'commit')	{		$result = $db->sql_transaction('commit');	}	else	{		$result = $db->sql_query($sql);		if ($db->sql_error_triggered)		{			$errored = true;			$error_ary['sql'][] = $db->sql_error_sql;			$error_ary['error_code'][] = $db->sql_error_returned;		}	}	$db->sql_return_on_error(false);	if ($echo_dot)	{		echo ". \n";		flush();	}	return $result;}function _write_result($no_updates, $errored, $error_ary){	global $lang;	if ($no_updates)	{		echo ' ' . $lang['NO_UPDATES_REQUIRED'] . '</strong></p>';	}	else	{		echo ' <span class="success">' . $lang['DONE'] . '</span></strong><br />' . $lang['RESULT'] . ' :: ';		if ($errored)		{			echo ' <strong>' . $lang['SOME_QUERIES_FAILED'] . '</strong> <ul>';			for ($i = 0; $i < sizeof($error_ary['sql']); $i++)			{				echo '<li>' . $lang['ERROR'] . ' :: <strong>' . htmlspecialchars($error_ary['error_code'][$i]['message']) . '</strong><br />';				echo $lang['SQL'] . ' :: <strong>' . htmlspecialchars($error_ary['sql'][$i]) . '</strong><br /><br /></li>';			}			echo '</ul> <br /><br />' . $lang['SQL_FAILURE_EXPLAIN'] . '</p>';		}		else		{			echo '<strong>' . $lang['NO_ERRORS'] . '</strong></p>';		}	}}function _add_modules($modules_to_install){	global $phpbb_root_path, $phpEx, $db;	include_once($phpbb_root_path . 'includes/acp/acp_modules.' . $phpEx);	$_module = new acp_modules();	foreach ($modules_to_install as $module_mode => $module_data)	{		$_module->module_class = $module_data['class'];		// Determine parent id first		$sql = 'SELECT module_id			FROM ' . MODULES_TABLE . "			WHERE module_class = '" . $db->sql_escape($module_data['class']) . "'				AND module_langname = '" . $db->sql_escape($module_data['cat']) . "'				AND module_mode = ''				AND module_basename = ''";		$result = $db->sql_query($sql);		// There may be more than one categories with the same name		$categories = array();		while ($row = $db->sql_fetchrow($result))		{			$categories[] = (int) $row['module_id'];		}		$db->sql_freeresult($result);		if (!sizeof($categories))		{			continue;		}		// Add the module to all categories found		foreach ($categories as $parent_id)		{			// Check if the module already exists			$sql = 'SELECT *				FROM ' . MODULES_TABLE . "				WHERE module_basename = '" . $db->sql_escape($module_data['base']) . "'					AND module_class = '" . $db->sql_escape($module_data['class']) . "'					AND module_langname = '" . $db->sql_escape($module_data['title']) . "'					AND module_mode = '" . $db->sql_escape($module_mode) . "'					AND module_auth = '" . $db->sql_escape($module_data['auth']) . "'					AND parent_id = {$parent_id}";			$result = $db->sql_query($sql);			$row = $db->sql_fetchrow($result);			$db->sql_freeresult($result);			// If it exists, we simply continue with the next category			if ($row)			{				continue;			}			// Build the module sql row			$module_row = array(				'module_basename'	=> $module_data['base'],				'module_enabled'	=> (isset($module_data['enabled'])) ? (int) $module_data['enabled'] : 1,				'module_display'	=> (isset($module_data['display'])) ? (int) $module_data['display'] : 1,				'parent_id'			=> $parent_id,				'module_class'		=> $module_data['class'],				'module_langname'	=> $module_data['title'],				'module_mode'		=> $module_mode,				'module_auth'		=> $module_data['auth'],			);			$_module->update_module_data($module_row, true);			// Ok, do we need to re-order the module, move it up or down?			if (!isset($module_data['after']))			{				continue;			}			$after_mode = $module_data['after'][0];			$after_langname = $module_data['after'][1];			// First of all, get the module id for the module this one has to be placed after			$sql = 'SELECT left_id				FROM ' . MODULES_TABLE . "				WHERE module_class = '" . $db->sql_escape($module_data['class']) . "'					AND module_basename = '" . $db->sql_escape($module_data['base']) . "'					AND module_langname = '" . $db->sql_escape($after_langname) . "'					AND module_mode = '" . $db->sql_escape($after_mode) . "'					AND parent_id = '{$parent_id}'";			$result = $db->sql_query($sql);			$first_left_id = (int) $db->sql_fetchfield('left_id');			$db->sql_freeresult($result);			if (!$first_left_id)			{				continue;			}			// Ok, count the number of modules between $after_mode and the added module			$sql = 'SELECT COUNT(module_id) as num_modules				FROM ' . MODULES_TABLE . "				WHERE module_class = '" . $db->sql_escape($module_data['class']) . "'					AND parent_id = {$parent_id}					AND left_id BETWEEN {$first_left_id} AND {$module_row['left_id']}";			$result = $db->sql_query($sql);			$steps = (int) $db->sql_fetchfield('num_modules');			$db->sql_freeresult($result);			// We need to substract 2			$steps -= 2;			if ($steps <= 0)			{				continue;			}			// Ok, move module up $num_modules times. ;)			$_module->move_module_by($module_row, 'move_up', $steps);		}	}	$_module->remove_cache_file();}/***************************************************************************** ADD YOUR DATABASE SCHEMA CHANGES HERE										******************************************************************************/function database_update_info(){	return array(		// Changes from 3.0.0 to the next version		'3.0.0'			=> array(			// Add the following columns			'add_columns'		=> array(				FORUMS_TABLE			=> array(					'display_subforum_list'		=> array('BOOL', 1),				),				SESSIONS_TABLE			=> array(					'session_forum_id'		=> array('UINT', 0),				),			),			'drop_keys'		=> array(				GROUPS_TABLE			=> array('group_legend'),			),			'add_index'		=> array(				SESSIONS_TABLE			=> array(					'session_forum_id'		=> array('session_forum_id'),				),				GROUPS_TABLE			=> array(					'group_legend_name'		=> array('group_legend', 'group_name'),				),			),		),		// No changes from 3.0.1-RC1 to 3.0.1		'3.0.1-RC1'		=> array(),		// No changes from 3.0.1 to 3.0.2-RC1		'3.0.1'			=> array(),		// Changes from 3.0.2-RC1 to 3.0.2-RC2		'3.0.2-RC1'		=> array(			'change_columns'	=> array(				DRAFTS_TABLE			=> array(					'draft_subject'		=> array('STEXT_UNI', ''),				),				FORUMS_TABLE	=> array(					'forum_last_post_subject' => array('STEXT_UNI', ''),				),				POSTS_TABLE		=> array(					'post_subject'			=> array('STEXT_UNI', '', 'true_sort'),				),				PRIVMSGS_TABLE	=> array(					'message_subject'		=> array('STEXT_UNI', ''),				),				TOPICS_TABLE	=> array(					'topic_title'				=> array('STEXT_UNI', '', 'true_sort'),					'topic_last_post_subject'	=> array('STEXT_UNI', ''),				),			),			'drop_keys'		=> array(				SESSIONS_TABLE			=> array('session_forum_id'),			),			'add_index'		=> array(				SESSIONS_TABLE			=> array(					'session_fid'		=> array('session_forum_id'),				),			),		),		// No changes from 3.0.2-RC2 to 3.0.2		'3.0.2-RC2'		=> array(),		// Changes from 3.0.2 to 3.0.3-RC1		'3.0.2'			=> array(			// Add the following columns			'add_columns'		=> array(				STYLES_TEMPLATE_TABLE			=> array(					'template_inherits_id'		=> array('UINT:4', 0),					'template_inherit_path'		=> array('VCHAR', ''),				),				GROUPS_TABLE					=> array(					'group_max_recipients'		=> array('UINT', 0),				),			),		),		// No changes from 3.0.3-RC1 to 3.0.3		'3.0.3-RC1'		=> array(),		// Changes from 3.0.3 to 3.0.4-RC1		'3.0.3'			=> array(			'add_columns'		=> array(				PROFILE_FIELDS_TABLE			=> array(					'field_show_profile'		=> array('BOOL', 0),				),			),			'change_columns'	=> array(				STYLES_TABLE				=> array(					'style_id'				=> array('UINT', NULL, 'auto_increment'),					'template_id'			=> array('UINT', 0),					'theme_id'				=> array('UINT', 0),					'imageset_id'			=> array('UINT', 0),				),				STYLES_IMAGESET_TABLE		=> array(					'imageset_id'				=> array('UINT', NULL, 'auto_increment'),				),				STYLES_IMAGESET_DATA_TABLE	=> array(					'image_id'				=> array('UINT', NULL, 'auto_increment'),					'imageset_id'			=> array('UINT', 0),				),				STYLES_THEME_TABLE			=> array(					'theme_id'				=> array('UINT', NULL, 'auto_increment'),				),				STYLES_TEMPLATE_TABLE		=> array(					'template_id'			=> array('UINT', NULL, 'auto_increment'),				),				STYLES_TEMPLATE_DATA_TABLE	=> array(					'template_id'			=> array('UINT', 0),				),				FORUMS_TABLE				=> array(					'forum_style'			=> array('UINT', 0),				),				USERS_TABLE					=> array(					'user_style'			=> array('UINT', 0),				),			),		),		// Changes from 3.0.4-RC1 to 3.0.4		'3.0.4-RC1'		=> array(),		// Changes from 3.0.4 to 3.0.5-RC1		'3.0.4'			=> array(			'change_columns'	=> array(				FORUMS_TABLE				=> array(					'forum_style'			=> array('UINT', 0),				),			),		),		// No changes from 3.0.5-RC1 to 3.0.5		'3.0.5-RC1'		=> array(),		// Changes from 3.0.5 to 3.0.6-RC1		'3.0.5'		=> array(			'add_columns'		=> array(				CONFIRM_TABLE			=> array(					'attempts'		=> array('UINT', 0),				),				USERS_TABLE			=> array(					'user_new'			=> array('BOOL', 1),					'user_reminded'		=> array('TINT:4', 0),					'user_reminded_time'=> array('TIMESTAMP', 0),				),				GROUPS_TABLE			=> array(					'group_skip_auth'		=> array('BOOL', 0, 'after' => 'group_founder_manage'),				),				PRIVMSGS_TABLE		=> array(					'message_reported'	=> array('BOOL', 0),				),				REPORTS_TABLE		=> array(					'pm_id'				=> array('UINT', 0),				),				PROFILE_FIELDS_TABLE			=> array(					'field_show_on_vt'		=> array('BOOL', 0),				),				FORUMS_TABLE		=> array(					'forum_options'			=> array('UINT:20', 0),				),			),			'change_columns'		=> array(				USERS_TABLE				=> array(					'user_options'		=> array('UINT:11', 230271),				),			),			'add_index'		=> array(				REPORTS_TABLE		=> array(					'post_id'		=> array('post_id'),					'pm_id'			=> array('pm_id'),				),				POSTS_TABLE			=> array(					'post_username'		=> array('post_username:255'),				),			),		),		// No changes from 3.0.6-RC1 to 3.0.6-RC2		'3.0.6-RC1'		=> array(),		// No changes from 3.0.6-RC2 to 3.0.6-RC3		'3.0.6-RC2'		=> array(),		// No changes from 3.0.6-RC3 to 3.0.6-RC4		'3.0.6-RC3'		=> array(),		// No changes from 3.0.6-RC4 to 3.0.6		'3.0.6-RC4'		=> array(),		// Changes from 3.0.6 to 3.0.7-RC1		'3.0.6'		=> array(			'drop_keys'		=> array(				LOG_TABLE			=> array('log_time'),			),			'add_index'		=> array(				TOPICS_TRACK_TABLE	=> array(					'topic_id'		=> array('topic_id'),				),			),		),		// No changes from 3.0.7-RC1 to 3.0.7-RC2		'3.0.7-RC1'		=> array(),		// No changes from 3.0.7-RC2 to 3.0.7		'3.0.7-RC2'		=> array(),		// No changes from 3.0.7 to 3.0.7-PL1		'3.0.7'		=> array(),		// No changes from 3.0.7-PL1 to 3.0.8-RC1		'3.0.7-PL1'		=> array(),		// No changes from 3.0.8-RC1 to 3.0.8		'3.0.8-RC1'		=> array(),		// Changes from 3.0.8 to 3.0.9-RC1		'3.0.8'			=> array(			'add_tables'		=> array(				LOGIN_ATTEMPT_TABLE	=> array(					'COLUMNS'			=> array(						// this column was removed from the database updater						// after 3.0.9-RC3 was released. It might still exist						// in 3.0.9-RCX installations and has to be dropped in						// 3.0.11 after the db_tools class is capable of properly						// removing a primary key.						// 'attempt_id'			=> array('UINT', NULL, 'auto_increment'),						'attempt_ip'			=> array('VCHAR:40', ''),						'attempt_browser'		=> array('VCHAR:150', ''),						'attempt_forwarded_for'	=> array('VCHAR:255', ''),						'attempt_time'			=> array('TIMESTAMP', 0),						'user_id'				=> array('UINT', 0),						'username'				=> array('VCHAR_UNI:255', 0),						'username_clean'		=> array('VCHAR_CI', 0),					),					//'PRIMARY_KEY'		=> 'attempt_id',					'KEYS'				=> array(						'att_ip'			=> array('INDEX', array('attempt_ip', 'attempt_time')),						'att_for'	=> array('INDEX', array('attempt_forwarded_for', 'attempt_time')),						'att_time'			=> array('INDEX', array('attempt_time')),						'user_id'				=> array('INDEX', 'user_id'),					),				),			),			'change_columns'	=> array(				BBCODES_TABLE	=> array(					'bbcode_id'	=> array('USINT', 0),				),			),		),		// No changes from 3.0.9-RC1 to 3.0.9-RC2		'3.0.9-RC1'		=> array(),		// No changes from 3.0.9-RC2 to 3.0.9-RC3		'3.0.9-RC2'		=> array(),		// No changes from 3.0.9-RC3 to 3.0.9-RC4		'3.0.9-RC3'     => array(),		// No changes from 3.0.9-RC4 to 3.0.9		'3.0.9-RC4'     => array(),		// No changes from 3.0.9 to 3.0.10-RC1		'3.0.9'			=> array(),		// No changes from 3.0.10-RC1 to 3.0.10-RC2		'3.0.10-RC1'	=> array(),		// No changes from 3.0.10-RC2 to 3.0.10-RC3		'3.0.10-RC2'	=> array(),		// No changes from 3.0.10-RC3 to 3.0.10		'3.0.10-RC3'	=> array(),		/** @todo DROP LOGIN_ATTEMPT_TABLE.attempt_id in 3.0.11-RC1 */	);}/***************************************************************************** ADD YOUR DATABASE DATA CHANGES HERE										** REMEMBER: You NEED to enter a schema array above and a data array here,	** even if both or one of them are empty.									******************************************************************************/function change_database_data(&$no_updates, $version){	global $db, $errored, $error_ary, $config, $phpbb_root_path, $phpEx;	switch ($version)	{		case '3.0.0':			$sql = 'UPDATE ' . TOPICS_TABLE . "				SET topic_last_view_time = topic_last_post_time				WHERE topic_last_view_time = 0";			_sql($sql, $errored, $error_ary);			// Update smiley sizes			$smileys = array('icon_e_surprised.gif', 'icon_eek.gif', 'icon_cool.gif', 'icon_lol.gif', 'icon_mad.gif', 'icon_razz.gif', 'icon_redface.gif', 'icon_cry.gif', 'icon_evil.gif', 'icon_twisted.gif', 'icon_rolleyes.gif', 'icon_exclaim.gif', 'icon_question.gif', 'icon_idea.gif', 'icon_arrow.gif', 'icon_neutral.gif', 'icon_mrgreen.gif', 'icon_e_ugeek.gif');			foreach ($smileys as $smiley)			{				if (file_exists($phpbb_root_path . 'images/smilies/' . $smiley))				{					list($width, $height) = getimagesize($phpbb_root_path . 'images/smilies/' . $smiley);					$sql = 'UPDATE ' . SMILIES_TABLE . '						SET smiley_width = ' . $width . ', smiley_height = ' . $height . "						WHERE smiley_url = '" . $db->sql_escape($smiley) . "'";					_sql($sql, $errored, $error_ary);				}			}			$no_updates = false;		break;		// No changes from 3.0.1-RC1 to 3.0.1		case '3.0.1-RC1':		break;		// changes from 3.0.1 to 3.0.2-RC1		case '3.0.1':			set_config('referer_validation', '1');			set_config('check_attachment_content', '1');			set_config('mime_triggers', 'body|head|html|img|plaintext|a href|pre|script|table|title');			$no_updates = false;		break;		// No changes from 3.0.2-RC1 to 3.0.2-RC2		case '3.0.2-RC1':		break;		// No changes from 3.0.2-RC2 to 3.0.2		case '3.0.2-RC2':		break;		// Changes from 3.0.2 to 3.0.3-RC1		case '3.0.2':			set_config('enable_queue_trigger', '0');			set_config('queue_trigger_posts', '3');			set_config('pm_max_recipients', '0');			// Set maximum number of recipients for the registered users, bots, guests group			$sql = 'UPDATE ' . GROUPS_TABLE . ' SET group_max_recipients = 5				WHERE ' . $db->sql_in_set('group_name', array('GUESTS', 'REGISTERED', 'REGISTERED_COPPA', 'BOTS'));			_sql($sql, $errored, $error_ary);			// Not prefilling yet			set_config('dbms_version', '');			// Add new permission u_masspm_group and duplicate settings from u_masspm			include_once($phpbb_root_path . 'includes/acp/auth.' . $phpEx);			$auth_admin = new auth_admin();			// Only add the new permission if it does not already exist			if (empty($auth_admin->acl_options['id']['u_masspm_group']))			{				$auth_admin->acl_add_option(array('global' => array('u_masspm_group')));				// Now the tricky part, filling the permission				$old_id = $auth_admin->acl_options['id']['u_masspm'];				$new_id = $auth_admin->acl_options['id']['u_masspm_group'];				$tables = array(ACL_GROUPS_TABLE, ACL_ROLES_DATA_TABLE, ACL_USERS_TABLE);				foreach ($tables as $table)				{					$sql = 'SELECT *						FROM ' . $table . '						WHERE auth_option_id = ' . $old_id;					$result = _sql($sql, $errored, $error_ary);					$sql_ary = array();					while ($row = $db->sql_fetchrow($result))					{						$row['auth_option_id'] = $new_id;						$sql_ary[] = $row;					}					$db->sql_freeresult($result);					if (sizeof($sql_ary))					{						$db->sql_multi_insert($table, $sql_ary);					}				}				// Remove any old permission entries				$auth_admin->acl_clear_prefetch();			}			/**			* Do not resync post counts here. An admin may do this later from the ACP			$start = 0;			$step = ($config['num_posts']) ? (max((int) ($config['num_posts'] / 5), 20000)) : 20000;			$sql = 'UPDATE ' . USERS_TABLE . ' SET user_posts = 0';			_sql($sql, $errored, $error_ary);			do			{				$sql = 'SELECT COUNT(post_id) AS num_posts, poster_id					FROM ' . POSTS_TABLE . '					WHERE post_id BETWEEN ' . ($start + 1) . ' AND ' . ($start + $step) . '						AND post_postcount = 1 AND post_approved = 1					GROUP BY poster_id';				$result = _sql($sql, $errored, $error_ary);				if ($row = $db->sql_fetchrow($result))				{					do					{						$sql = 'UPDATE ' . USERS_TABLE . " SET user_posts = user_posts + {$row['num_posts']} WHERE user_id = {$row['poster_id']}";						_sql($sql, $errored, $error_ary);					}					while ($row = $db->sql_fetchrow($result));					$start += $step;				}				else				{					$start = 0;				}				$db->sql_freeresult($result);			}			while ($start);			*/			$sql = 'UPDATE ' . MODULES_TABLE . '				SET module_auth = \'acl_a_email && cfg_email_enable\'				WHERE module_class = \'acp\'					AND module_basename = \'email\'';			_sql($sql, $errored, $error_ary);			$no_updates = false;		break;		// Changes from 3.0.3-RC1 to 3.0.3		case '3.0.3-RC1':			if ($db->sql_layer == 'oracle')			{				// log_operation is CLOB - but we can change this later				$sql = 'UPDATE ' . LOG_TABLE . "					SET log_operation = 'LOG_DELETE_TOPIC'					WHERE log_operation LIKE 'LOG_TOPIC_DELETED'";				_sql($sql, $errored, $error_ary);			}			else			{				$sql = 'UPDATE ' . LOG_TABLE . "					SET log_operation = 'LOG_DELETE_TOPIC'					WHERE log_operation = 'LOG_TOPIC_DELETED'";				_sql($sql, $errored, $error_ary);			}			$no_updates = false;		break;		// Changes from 3.0.3 to 3.0.4-RC1		case '3.0.3':			// Update the Custom Profile Fields based on previous settings to the new format			$sql = 'SELECT field_id, field_required, field_show_on_reg, field_hide					FROM ' . PROFILE_FIELDS_TABLE;			$result = _sql($sql, $errored, $error_ary);			while ($row = $db->sql_fetchrow($result))			{				$sql_ary = array(					'field_required'	=> 0,					'field_show_on_reg'	=> 0,					'field_hide'		=> 0,					'field_show_profile'=> 0,				);				if ($row['field_required'])				{					$sql_ary['field_required'] = $sql_ary['field_show_on_reg'] = $sql_ary['field_show_profile'] = 1;				}				else if ($row['field_show_on_reg'])				{					$sql_ary['field_show_on_reg'] = $sql_ary['field_show_profile'] = 1;				}				else if ($row['field_hide'])				{					// Only administrators and moderators can see this CPF, if the view is enabled, they can see it, otherwise just admins in the acp_users module					$sql_ary['field_hide'] = 1;				}				else				{					// equivelant to "none", which is the "Display in user control panel" option					$sql_ary['field_show_profile'] = 1;				}				_sql('UPDATE ' . PROFILE_FIELDS_TABLE . ' SET ' . $db->sql_build_array('UPDATE', $sql_ary) . ' WHERE field_id = ' . $row['field_id'], $errored, $error_ary);			}			$no_updates = false;		break;		// Changes from 3.0.4-RC1 to 3.0.4		case '3.0.4-RC1':		break;		// Changes from 3.0.4 to 3.0.5-RC1		case '3.0.4':			// Captcha config variables			set_config('captcha_gd_wave', 0);			set_config('captcha_gd_3d_noise', 1);			set_config('captcha_gd_fonts', 1);			set_config('confirm_refresh', 1);			// Maximum number of keywords			set_config('max_num_search_keywords', 10);			// Remove static config var and put it back as dynamic variable			$sql = 'UPDATE ' . CONFIG_TABLE . "				SET is_dynamic = 1				WHERE config_name = 'search_indexing_state'";			_sql($sql, $errored, $error_ary);			// Hash old MD5 passwords			$sql = 'SELECT user_id, user_password					FROM ' . USERS_TABLE . '					WHERE user_pass_convert = 1';			$result = _sql($sql, $errored, $error_ary);			while ($row = $db->sql_fetchrow($result))			{				if (strlen($row['user_password']) == 32)				{					$sql_ary = array(						'user_password'	=> phpbb_hash($row['user_password']),					);					_sql('UPDATE ' . USERS_TABLE . ' SET ' . $db->sql_build_array('UPDATE', $sql_ary) . ' WHERE user_id = ' . $row['user_id'], $errored, $error_ary);				}			}			$db->sql_freeresult($result);			// Adjust bot entry			$sql = 'UPDATE ' . BOTS_TABLE . "				SET bot_agent = 'ichiro/'				WHERE bot_agent = 'ichiro/2'";			_sql($sql, $errored, $error_ary);			// Before we are able to add a unique key to auth_option, we need to remove duplicate entries			// We get duplicate entries first			$sql = 'SELECT auth_option				FROM ' . ACL_OPTIONS_TABLE . '				GROUP BY auth_option				HAVING COUNT(*) >= 2';			$result = $db->sql_query($sql);			$auth_options = array();			while ($row = $db->sql_fetchrow($result))			{				$auth_options[] = $row['auth_option'];			}			$db->sql_freeresult($result);			// Remove specific auth options			if (!empty($auth_options))			{				foreach ($auth_options as $option)				{					// Select auth_option_ids... the largest id will be preserved					$sql = 'SELECT auth_option_id						FROM ' . ACL_OPTIONS_TABLE . "						WHERE auth_option = '" . $db->sql_escape($option) . "'						ORDER BY auth_option_id DESC";					// sql_query_limit not possible here, due to bug in postgresql layer					$result = $db->sql_query($sql);					// Skip first row, this is our original auth option we want to preserve					$row = $db->sql_fetchrow($result);					while ($row = $db->sql_fetchrow($result))					{						// Ok, remove this auth option...						_sql('DELETE FROM ' . ACL_OPTIONS_TABLE . ' WHERE auth_option_id = ' . $row['auth_option_id'], $errored, $error_ary);						_sql('DELETE FROM ' . ACL_ROLES_DATA_TABLE . ' WHERE auth_option_id = ' . $row['auth_option_id'], $errored, $error_ary);						_sql('DELETE FROM ' . ACL_GROUPS_TABLE . ' WHERE auth_option_id = ' . $row['auth_option_id'], $errored, $error_ary);						_sql('DELETE FROM ' . ACL_USERS_TABLE . ' WHERE auth_option_id = ' . $row['auth_option_id'], $errored, $error_ary);					}					$db->sql_freeresult($result);				}			}			// Now make auth_option UNIQUE, by dropping the old index and adding a UNIQUE one.			$changes = array(				'drop_keys'			=> array(					ACL_OPTIONS_TABLE		=> array('auth_option'),				),			);			global $db_tools;			$statements = $db_tools->perform_schema_changes($changes);			foreach ($statements as $sql)			{				_sql($sql, $errored, $error_ary);			}			$changes = array(				'add_unique_index'	=> array(					ACL_OPTIONS_TABLE		=> array(						'auth_option'		=> array('auth_option'),					),				),			);			$statements = $db_tools->perform_schema_changes($changes);			foreach ($statements as $sql)			{				_sql($sql, $errored, $error_ary);			}			$no_updates = false;		break;		// No changes from 3.0.5-RC1 to 3.0.5		case '3.0.5-RC1':		break;		// Changes from 3.0.5 to 3.0.6-RC1		case '3.0.5':			// Let's see if the GD Captcha can be enabled... we simply look for what *is* enabled...			if (!empty($config['captcha_gd']) && !isset($config['captcha_plugin']))			{				set_config('captcha_plugin', 'phpbb_captcha_gd');			}			else if (!isset($config['captcha_plugin']))			{				set_config('captcha_plugin', 'phpbb_captcha_nogd');			}			// Entries for the Feed Feature			set_config('feed_enable', '0');			set_config('feed_limit', '10');			set_config('feed_overall_forums', '1');			set_config('feed_overall_forums_limit', '15');			set_config('feed_overall_topics', '0');			set_config('feed_overall_topics_limit', '15');			set_config('feed_forum', '1');			set_config('feed_topic', '1');			set_config('feed_item_statistics', '1');			// Entries for smiley pagination			set_config('smilies_per_page', '50');			// Entry for reporting PMs			set_config('allow_pm_report', '1');			// Install modules			$modules_to_install = array(				'feed'					=> array(					'base'		=> 'board',					'class'		=> 'acp',					'title'		=> 'ACP_FEED_SETTINGS',					'auth'		=> 'acl_a_board',					'cat'		=> 'ACP_BOARD_CONFIGURATION',					'after'		=> array('signature', 'ACP_SIGNATURE_SETTINGS')				),				'warnings'				=> array(					'base'		=> 'users',					'class'		=> 'acp',					'title'		=> 'ACP_USER_WARNINGS',					'auth'		=> 'acl_a_user',					'display'	=> 0,					'cat'		=> 'ACP_CAT_USERS',					'after'		=> array('feedback', 'ACP_USER_FEEDBACK')				),				'send_statistics'		=> array(					'base'		=> 'send_statistics',					'class'		=> 'acp',					'title'		=> 'ACP_SEND_STATISTICS',					'auth'		=> 'acl_a_server',					'cat'		=> 'ACP_SERVER_CONFIGURATION'				),				'setting_forum_copy'	=> array(					'base'		=> 'permissions',					'class'		=> 'acp',					'title'		=> 'ACP_FORUM_PERMISSIONS_COPY',					'auth'		=> 'acl_a_fauth && acl_a_authusers && acl_a_authgroups && acl_a_mauth',					'cat'		=> 'ACP_FORUM_BASED_PERMISSIONS',					'after'		=> array('setting_forum_local', 'ACP_FORUM_PERMISSIONS')				),				'pm_reports'			=> array(					'base'		=> 'pm_reports',					'class'		=> 'mcp',					'title'		=> 'MCP_PM_REPORTS_OPEN',					'auth'		=> 'aclf_m_report',					'cat'		=> 'MCP_REPORTS'				),				'pm_reports_closed'		=> array(					'base'		=> 'pm_reports',					'class'		=> 'mcp',					'title'		=> 'MCP_PM_REPORTS_CLOSED',					'auth'		=> 'aclf_m_report',					'cat'		=> 'MCP_REPORTS'				),				'pm_report_details'		=> array(					'base'		=> 'pm_reports',					'class'		=> 'mcp',					'title'		=> 'MCP_PM_REPORT_DETAILS',					'auth'		=> 'aclf_m_report',					'cat'		=> 'MCP_REPORTS'				),			);			_add_modules($modules_to_install);			// Add newly_registered group... but check if it already exists (we always supported running the updater on any schema)			$sql = 'SELECT group_id				FROM ' . GROUPS_TABLE . "				WHERE group_name = 'NEWLY_REGISTERED'";			$result = $db->sql_query($sql);			$group_id = (int) $db->sql_fetchfield('group_id');			$db->sql_freeresult($result);			if (!$group_id)			{				$sql = 'INSERT INTO ' .  GROUPS_TABLE . " (group_name, group_type, group_founder_manage, group_colour, group_legend, group_avatar, group_desc, group_desc_uid, group_max_recipients) VALUES ('NEWLY_REGISTERED', 3, 0, '', 0, '', '', '', 5)";				_sql($sql, $errored, $error_ary);				$group_id = $db->sql_nextid();			}			// Insert new user role... at the end of the chain			$sql = 'SELECT role_id				FROM ' . ACL_ROLES_TABLE . "				WHERE role_name = 'ROLE_USER_NEW_MEMBER'					AND role_type = 'u_'";			$result = $db->sql_query($sql);			$u_role = (int) $db->sql_fetchfield('role_id');			$db->sql_freeresult($result);			if (!$u_role)			{				$sql = 'SELECT MAX(role_order) as max_order_id					FROM ' . ACL_ROLES_TABLE . "					WHERE role_type = 'u_'";				$result = $db->sql_query($sql);				$next_order_id = (int) $db->sql_fetchfield('max_order_id');				$db->sql_freeresult($result);				$next_order_id++;				$sql = 'INSERT INTO ' . ACL_ROLES_TABLE . " (role_name, role_description, role_type, role_order) VALUES ('ROLE_USER_NEW_MEMBER', 'ROLE_DESCRIPTION_USER_NEW_MEMBER', 'u_', $next_order_id)";				_sql($sql, $errored, $error_ary);				$u_role = $db->sql_nextid();				if (!$errored)				{					// Now add the correct data to the roles...					// The standard role says that new users are not able to send a PM, Mass PM, are not able to PM groups					$sql = 'INSERT INTO ' . ACL_ROLES_DATA_TABLE . " (role_id, auth_option_id, auth_setting) SELECT $u_role, auth_option_id, 0 FROM " . ACL_OPTIONS_TABLE . " WHERE auth_option LIKE 'u_%' AND auth_option IN ('u_sendpm', 'u_masspm', 'u_masspm_group')";					_sql($sql, $errored, $error_ary);					// Add user role to group					$sql = 'INSERT INTO ' . ACL_GROUPS_TABLE . " (group_id, forum_id, auth_option_id, auth_role_id, auth_setting) VALUES ($group_id, 0, 0, $u_role, 0)";					_sql($sql, $errored, $error_ary);				}			}			// Insert new forum role			$sql = 'SELECT role_id				FROM ' . ACL_ROLES_TABLE . "				WHERE role_name = 'ROLE_FORUM_NEW_MEMBER'					AND role_type = 'f_'";			$result = $db->sql_query($sql);			$f_role = (int) $db->sql_fetchfield('role_id');			$db->sql_freeresult($result);			if (!$f_role)			{				$sql = 'SELECT MAX(role_order) as max_order_id					FROM ' . ACL_ROLES_TABLE . "					WHERE role_type = 'f_'";				$result = $db->sql_query($sql);				$next_order_id = (int) $db->sql_fetchfield('max_order_id');				$db->sql_freeresult($result);				$next_order_id++;				$sql = 'INSERT INTO ' . ACL_ROLES_TABLE . " (role_name, role_description, role_type, role_order) VALUES  ('ROLE_FORUM_NEW_MEMBER', 'ROLE_DESCRIPTION_FORUM_NEW_MEMBER', 'f_', $next_order_id)";				_sql($sql, $errored, $error_ary);				$f_role = $db->sql_nextid();				if (!$errored)				{					$sql = 'INSERT INTO ' . ACL_ROLES_DATA_TABLE . " (role_id, auth_option_id, auth_setting) SELECT $f_role, auth_option_id, 0 FROM " . ACL_OPTIONS_TABLE . " WHERE auth_option LIKE 'f_%' AND auth_option IN ('f_noapprove')";					_sql($sql, $errored, $error_ary);				}			}			// Set every members user_new column to 0 (old users) only if there is no one yet (this makes sure we do not execute this more than once)			$sql = 'SELECT 1				FROM ' . USERS_TABLE . '				WHERE user_new = 0';			$result = $db->sql_query_limit($sql, 1);			$row = $db->sql_fetchrow($result);			$db->sql_freeresult($result);			if (!$row)			{				$sql = 'UPDATE ' . USERS_TABLE . ' SET user_new = 0';				_sql($sql, $errored, $error_ary);			}			// Newly registered users limit			if (!isset($config['new_member_post_limit']))			{				set_config('new_member_post_limit', (!empty($config['enable_queue_trigger'])) ? $config['queue_trigger_posts'] : 0);			}			if (!isset($config['new_member_group_default']))			{				set_config('new_member_group_default', 0);			}			// To mimick the old "feature" we will assign the forum role to every forum, regardless of the setting (this makes sure there are no "this does not work!!!! YUO!!!" posts...			// Check if the role is already assigned...			$sql = 'SELECT forum_id				FROM ' . ACL_GROUPS_TABLE . '				WHERE group_id = ' . $group_id . '					AND auth_role_id = ' . $f_role;			$result = $db->sql_query($sql);			$is_options = (int) $db->sql_fetchfield('forum_id');			$db->sql_freeresult($result);			// Not assigned at all... :/			if (!$is_options)			{				// Get postable forums				$sql = 'SELECT forum_id					FROM ' . FORUMS_TABLE . '					WHERE forum_type != ' . FORUM_LINK;				$result = $db->sql_query($sql);				while ($row = $db->sql_fetchrow($result))				{					_sql('INSERT INTO ' . ACL_GROUPS_TABLE . ' (group_id, forum_id, auth_option_id, auth_role_id, auth_setting) VALUES (' . $group_id . ', ' . (int) $row['forum_id'] . ', 0, ' . $f_role . ', 0)', $errored, $error_ary);				}				$db->sql_freeresult($result);			}			// Clear permissions...			include_once($phpbb_root_path . 'includes/acp/auth.' . $phpEx);			$auth_admin = new auth_admin();			$auth_admin->acl_clear_prefetch();			if (!isset($config['allow_avatar']))			{				if ($config['allow_avatar_upload'] || $config['allow_avatar_local'] || $config['allow_avatar_remote'])				{					set_config('allow_avatar', '1');				}				else				{					set_config('allow_avatar', '0');				}			}			if (!isset($config['allow_avatar_remote_upload']))			{				if ($config['allow_avatar_remote'] && $config['allow_avatar_upload'])				{					set_config('allow_avatar_remote_upload', '1');				}				else				{					set_config('allow_avatar_remote_upload', '0');				}			}			// Minimum number of characters			if (!isset($config['min_post_chars']))			{				set_config('min_post_chars', '1');			}			if (!isset($config['allow_quick_reply']))			{				set_config('allow_quick_reply', '1');			}			// Set every members user_options column to enable			// bbcode, smilies and URLs for signatures by default			$sql = 'SELECT user_options				FROM ' . USERS_TABLE . '				WHERE user_type IN (' . USER_NORMAL . ', ' . USER_FOUNDER . ')';			$result = $db->sql_query_limit($sql, 1);			$user_option = (int) $db->sql_fetchfield('user_options');			$db->sql_freeresult($result);			// Check if we already updated the database by checking bit 15 which we used to store the sig_bbcode option			if (!($user_option & 1 << 15))			{				// 229376 is the added value to enable all three signature options				$sql = 'UPDATE ' . USERS_TABLE . ' SET user_options = user_options + 229376';				_sql($sql, $errored, $error_ary);			}			if (!isset($config['delete_time']))			{				set_config('delete_time', $config['edit_time']);			}			$no_updates = false;		break;		// No changes from 3.0.6-RC1 to 3.0.6-RC2		case '3.0.6-RC1':		break;		// Changes from 3.0.6-RC2 to 3.0.6-RC3		case '3.0.6-RC2':			// Update the Custom Profile Fields based on previous settings to the new format			$sql = 'UPDATE ' . PROFILE_FIELDS_TABLE . '				SET field_show_on_vt = 1				WHERE field_hide = 0					AND (field_required = 1 OR field_show_on_reg = 1 OR field_show_profile = 1)';			_sql($sql, $errored, $error_ary);			$no_updates = false;		break;		// No changes from 3.0.6-RC3 to 3.0.6-RC4		case '3.0.6-RC3':		break;		// No changes from 3.0.6-RC4 to 3.0.6		case '3.0.6-RC4':		break;		// Changes from 3.0.6 to 3.0.7-RC1		case '3.0.6':			// ATOM Feeds			set_config('feed_overall', '1');			set_config('feed_http_auth', '0');			set_config('feed_limit_post', (string) (isset($config['feed_limit']) ? (int) $config['feed_limit'] : 15));			set_config('feed_limit_topic', (string) (isset($config['feed_overall_topics_limit']) ? (int) $config['feed_overall_topics_limit'] : 10));			set_config('feed_topics_new', (!empty($config['feed_overall_topics']) ? '1' : '0'));			set_config('feed_topics_active', (!empty($config['feed_overall_topics']) ? '1' : '0'));			// Delete all text-templates from the template_data			$sql = 'DELETE FROM ' . STYLES_TEMPLATE_DATA_TABLE . '				WHERE template_filename ' . $db->sql_like_expression($db->any_char . '.txt');			_sql($sql, $errored, $error_ary);			$no_updates = false;		break;		// Changes from 3.0.7-RC1 to 3.0.7-RC2		case '3.0.7-RC1':			$sql = 'SELECT user_id, user_email, user_email_hash				FROM ' . USERS_TABLE . '				WHERE user_type <> ' . USER_IGNORE . "					AND user_email <> ''";			$result = $db->sql_query($sql);			$i = 0;			while ($row = $db->sql_fetchrow($result))			{				// Snapshot of the phpbb_email_hash() function				// We cannot call it directly because the auto updater updates the DB first. :/				$user_email_hash = sprintf('%u', crc32(strtolower($row['user_email']))) . strlen($row['user_email']);				if ($user_email_hash != $row['user_email_hash'])				{					$sql_ary = array(						'user_email_hash'	=> $user_email_hash,					);					$sql = 'UPDATE ' . USERS_TABLE . '						SET ' . $db->sql_build_array('UPDATE', $sql_ary) . '						WHERE user_id = ' . (int) $row['user_id'];					_sql($sql, $errored, $error_ary, ($i % 100 == 0));					++$i;				}			}			$db->sql_freeresult($result);			$no_updates = false;		break;		// No changes from 3.0.7-RC2 to 3.0.7		case '3.0.7-RC2':		break;		// No changes from 3.0.7 to 3.0.7-PL1		case '3.0.7':		break;		// Changes from 3.0.7-PL1 to 3.0.8-RC1		case '3.0.7-PL1':			// Update file extension group names to use language strings.			$sql = 'SELECT lang_dir				FROM ' . LANG_TABLE;			$result = $db->sql_query($sql);			$extension_groups_updated = array();			while ($lang_dir = $db->sql_fetchfield('lang_dir'))			{				$lang_dir = basename($lang_dir);				// The language strings we need are either in language/.../acp/attachments.php				// in the update package if we're updating to 3.0.8-RC1 or later,				// or they are in language/.../install.php when we're updating from 3.0.7-PL1 or earlier.				// On an already updated board, they can also already be in language/.../acp/attachments.php				// in the board root.				$lang_files = array(					"{$phpbb_root_path}install/update/new/language/$lang_dir/acp/attachments.$phpEx",					"{$phpbb_root_path}language/$lang_dir/install.$phpEx",					"{$phpbb_root_path}language/$lang_dir/acp/attachments.$phpEx",				);				foreach ($lang_files as $lang_file)				{					if (!file_exists($lang_file))					{						continue;					}					$lang = array();					include($lang_file);					foreach($lang as $lang_key => $lang_val)					{						if (isset($extension_groups_updated[$lang_key]) || strpos($lang_key, 'EXT_GROUP_') !== 0)						{							continue;						}						$sql_ary = array(							'group_name'	=> substr($lang_key, 10), // Strip off 'EXT_GROUP_'						);						$sql = 'UPDATE ' . EXTENSION_GROUPS_TABLE . '							SET ' . $db->sql_build_array('UPDATE', $sql_ary) . "							WHERE group_name = '" . $db->sql_escape($lang_val) . "'";						_sql($sql, $errored, $error_ary);						$extension_groups_updated[$lang_key] = true;					}				}			}			$db->sql_freeresult($result);			// Install modules			$modules_to_install = array(				'post'					=> array(					'base'		=> 'board',					'class'		=> 'acp',					'title'		=> 'ACP_POST_SETTINGS',					'auth'		=> 'acl_a_board',					'cat'		=> 'ACP_MESSAGES',					'after'		=> array('message', 'ACP_MESSAGE_SETTINGS')				),			);			_add_modules($modules_to_install);			// update			$sql = 'UPDATE ' . MODULES_TABLE . '				SET module_auth = \'cfg_allow_avatar && (cfg_allow_avatar_local || cfg_allow_avatar_remote || cfg_allow_avatar_upload || cfg_allow_avatar_remote_upload)\'				WHERE module_class = \'ucp\'					AND module_basename = \'profile\'					AND module_mode = \'avatar\'';			_sql($sql, $errored, $error_ary);			// add Bing Bot			$bot_name = 'Bing [Bot]';			$bot_name_clean = utf8_clean_string($bot_name);			$sql = 'SELECT user_id				FROM ' . USERS_TABLE . "				WHERE username_clean = '" . $db->sql_escape($bot_name_clean) . "'";			$result = $db->sql_query($sql);			$bing_already_added = (bool) $db->sql_fetchfield('user_id');			$db->sql_freeresult($result);			if (!$bing_already_added)			{				$bot_agent = 'bingbot/';				$bot_ip = '';				$sql = 'SELECT group_id, group_colour					FROM ' . GROUPS_TABLE . "					WHERE group_name = 'BOTS'";				$result = $db->sql_query($sql);				$group_row = $db->sql_fetchrow($result);				$db->sql_freeresult($result);				if (!$group_row)				{					// default fallback, should never get here					$group_row['group_id'] = 6;					$group_row['group_colour'] = '9E8DA7';				}				if (!function_exists('user_add'))				{					include($phpbb_root_path . 'includes/functions_user.' . $phpEx);				}				$user_row = array(					'user_type'				=> USER_IGNORE,					'group_id'				=> $group_row['group_id'],					'username'				=> $bot_name,					'user_regdate'			=> time(),					'user_password'			=> '',					'user_colour'			=> $group_row['group_colour'],					'user_email'			=> '',					'user_lang'				=> $config['default_lang'],					'user_style'			=> $config['default_style'],					'user_timezone'			=> 0,					'user_dateformat'		=> $config['default_dateformat'],					'user_allow_massemail'	=> 0,				);				$user_id = user_add($user_row);				$sql = 'INSERT INTO ' . BOTS_TABLE . ' ' . $db->sql_build_array('INSERT', array(					'bot_active'	=> 1,					'bot_name'		=> (string) $bot_name,					'user_id'		=> (int) $user_id,					'bot_agent'		=> (string) $bot_agent,					'bot_ip'		=> (string) $bot_ip,				));				_sql($sql, $errored, $error_ary);			}			// end Bing Bot addition			// Delete shadow topics pointing to not existing topics			$batch_size = 500;			// Set of affected forums we have to resync			$sync_forum_ids = array();			do			{				$sql_array = array(					'SELECT'	=> 't1.topic_id, t1.forum_id',					'FROM'		=> array(						TOPICS_TABLE	=> 't1',					),					'LEFT_JOIN'	=> array(						array(							'FROM'	=> array(TOPICS_TABLE	=> 't2'),							'ON'	=> 't1.topic_moved_id = t2.topic_id',						),					),					'WHERE'		=> 't1.topic_moved_id <> 0								AND t2.topic_id IS NULL',				);				$sql = $db->sql_build_query('SELECT', $sql_array);				$result = $db->sql_query_limit($sql, $batch_size);				$topic_ids = array();				while ($row = $db->sql_fetchrow($result))				{					$topic_ids[] = (int) $row['topic_id'];					$sync_forum_ids[(int) $row['forum_id']] = (int) $row['forum_id'];				}				$db->sql_freeresult($result);				if (!empty($topic_ids))				{					$sql = 'DELETE FROM ' . TOPICS_TABLE . '						WHERE ' . $db->sql_in_set('topic_id', $topic_ids);					$db->sql_query($sql);				}			}			while (sizeof($topic_ids) == $batch_size);			// Sync the forums we have deleted shadow topics from.			sync('forum', 'forum_id', $sync_forum_ids, true, true);			// Unread posts search load switch			set_config('load_unreads_search', '1');			// Reduce queue interval to 60 seconds, email package size to 20			if ($config['queue_interval'] == 600)			{				set_config('queue_interval', '60');			}			if ($config['email_package_size'] == 50)			{				set_config('email_package_size', '20');			}			$no_updates = false;		break;		// No changes from 3.0.8-RC1 to 3.0.8		case '3.0.8-RC1':		break;		// Changes from 3.0.8 to 3.0.9-RC1		case '3.0.8':			set_config('ip_login_limit_max', '50');			set_config('ip_login_limit_time', '21600');			set_config('ip_login_limit_use_forwarded', '0');			// Update file extension group names to use language strings, again.			$sql = 'SELECT group_id, group_name				FROM ' . EXTENSION_GROUPS_TABLE . '				WHERE group_name ' . $db->sql_like_expression('EXT_GROUP_' . $db->any_char);			$result = $db->sql_query($sql);			while ($row = $db->sql_fetchrow($result))			{				$sql_ary = array(					'group_name'	=> substr($row['group_name'], 10), // Strip off 'EXT_GROUP_'				);				$sql = 'UPDATE ' . EXTENSION_GROUPS_TABLE . '					SET ' . $db->sql_build_array('UPDATE', $sql_ary) . '					WHERE group_id = ' . $row['group_id'];				_sql($sql, $errored, $error_ary);			}			$db->sql_freeresult($result);			global $db_tools, $table_prefix;			// Recover from potentially broken Q&A CAPTCHA table on firebird			// Q&A CAPTCHA was uninstallable, so it's safe to remove these			// without data loss			if ($db_tools->sql_layer == 'firebird')			{				$tables = array(					$table_prefix . 'captcha_questions',					$table_prefix . 'captcha_answers',					$table_prefix . 'qa_confirm',				);				foreach ($tables as $table)				{					if ($db_tools->sql_table_exists($table))					{						$db_tools->sql_table_drop($table);					}				}			}			$no_updates = false;		break;		// No changes from 3.0.9-RC1 to 3.0.9-RC2		case '3.0.9-RC1':		break;		// No changes from 3.0.9-RC2 to 3.0.9-RC3		case '3.0.9-RC2':		break;		// No changes from 3.0.9-RC3 to 3.0.9-RC4		case '3.0.9-RC3':		break;		// No changes from 3.0.9-RC4 to 3.0.9		case '3.0.9-RC4':		break;		// Changes from 3.0.9 to 3.0.10-RC1		case '3.0.9':			if (!isset($config['email_max_chunk_size']))			{				set_config('email_max_chunk_size', '50');			}			$no_updates = false;		break;		// No changes from 3.0.10-RC1 to 3.0.10-RC2		case '3.0.10-RC1':		break;		// No changes from 3.0.10-RC2 to 3.0.10-RC3		case '3.0.10-RC2':		break;		// No changes from 3.0.10-RC3 to 3.0.10		case '3.0.10-RC3':		break;	}}?>
<?php/**** @package mcp* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @ignore*/if (!defined('IN_PHPBB')){	exit;}/*** View topic in MCP*/function mcp_topic_view($id, $mode, $action){	global $phpEx, $phpbb_root_path, $config;	global $template, $db, $user, $auth, $cache;	$url = append_sid("{$phpbb_root_path}mcp.$phpEx?" . extra_url());	$user->add_lang('viewtopic');	$topic_id = request_var('t', 0);	$topic_info = get_topic_data(array($topic_id), false, true);	if (!sizeof($topic_info))	{		trigger_error('TOPIC_NOT_EXIST');	}	$topic_info = $topic_info[$topic_id];	// Set up some vars	$icon_id		= request_var('icon', 0);	$subject		= utf8_normalize_nfc(request_var('subject', '', true));	$start			= request_var('start', 0);	$sort_days_old	= request_var('st_old', 0);	$forum_id		= request_var('f', 0);	$to_topic_id	= request_var('to_topic_id', 0);	$to_forum_id	= request_var('to_forum_id', 0);	$sort			= isset($_POST['sort']) ? true : false;	$submitted_id_list	= request_var('post_ids', array(0));	$checked_ids = $post_id_list = request_var('post_id_list', array(0));	// Split Topic?	if ($action == 'split_all' || $action == 'split_beyond')	{		if (!$sort)		{			split_topic($action, $topic_id, $to_forum_id, $subject);		}		$action = 'split';	}	// Merge Posts?	if ($action == 'merge_posts')	{		if (!$sort)		{			merge_posts($topic_id, $to_topic_id);		}		$action = 'merge';	}	if ($action == 'split' && !$subject)	{		$subject = $topic_info['topic_title'];	}	// Approve posts?	if ($action == 'approve' && $auth->acl_get('m_approve', $topic_info['forum_id']))	{		include($phpbb_root_path . 'includes/mcp/mcp_queue.' . $phpEx);		include_once($phpbb_root_path . 'includes/functions_posting.' . $phpEx);		include_once($phpbb_root_path . 'includes/functions_messenger.' . $phpEx);		if (!sizeof($post_id_list))		{			trigger_error('NO_POST_SELECTED');		}		if (!$sort)		{			approve_post($post_id_list, $id, $mode);		}	}	// Jumpbox, sort selects and that kind of things	make_jumpbox($url . "&amp;i=$id&amp;mode=forum_view", $topic_info['forum_id'], false, 'm_', true);	$where_sql = ($action == 'reports') ? 'WHERE post_reported = 1 AND ' : 'WHERE';	$sort_days = $total = 0;	$sort_key = $sort_dir = '';	$sort_by_sql = $sort_order_sql = array();	mcp_sorting('viewtopic', $sort_days, $sort_key, $sort_dir, $sort_by_sql, $sort_order_sql, $total, $topic_info['forum_id'], $topic_id, $where_sql);	$limit_time_sql = ($sort_days) ? 'AND p.post_time >= ' . (time() - ($sort_days * 86400)) : '';	if ($total == -1)	{		if ($auth->acl_get('m_approve', $topic_info['forum_id']))		{			$total = $topic_info['topic_replies_real'] + 1;		}		else		{			$total = $topic_info['topic_replies'] + 1;		}	}	$posts_per_page = max(0, request_var('posts_per_page', intval($config['posts_per_page'])));	if ($posts_per_page == 0)	{		$posts_per_page = $total;	}	if ((!empty($sort_days_old) && $sort_days_old != $sort_days) || $total <= $posts_per_page)	{		$start = 0;	}	// Make sure $start is set to the last page if it exceeds the amount	if ($start < 0 || $start >= $total)	{		$start = ($start < 0) ? 0 : floor(($total - 1) / $posts_per_page) * $posts_per_page;	}	$sql = 'SELECT u.username, u.username_clean, u.user_colour, p.*		FROM ' . POSTS_TABLE . ' p, ' . USERS_TABLE . ' u		WHERE ' . (($action == 'reports') ? 'p.post_reported = 1 AND ' : '') . '			p.topic_id = ' . $topic_id . ' ' .			((!$auth->acl_get('m_approve', $topic_info['forum_id'])) ? ' AND p.post_approved = 1 ' : '') . '			AND p.poster_id = u.user_id ' .			$limit_time_sql . '		ORDER BY ' . $sort_order_sql;	$result = $db->sql_query_limit($sql, $posts_per_page, $start);	$rowset = $post_id_list = array();	$bbcode_bitfield = '';	while ($row = $db->sql_fetchrow($result))	{		$rowset[] = $row;		$post_id_list[] = $row['post_id'];		$bbcode_bitfield = $bbcode_bitfield | base64_decode($row['bbcode_bitfield']);	}	$db->sql_freeresult($result);	if ($bbcode_bitfield !== '')	{		include_once($phpbb_root_path . 'includes/bbcode.' . $phpEx);		$bbcode = new bbcode(base64_encode($bbcode_bitfield));	}	$topic_tracking_info = array();	// Get topic tracking info	if ($config['load_db_lastread'])	{		$tmp_topic_data = array($topic_id => $topic_info);		$topic_tracking_info = get_topic_tracking($topic_info['forum_id'], $topic_id, $tmp_topic_data, array($topic_info['forum_id'] => $topic_info['forum_mark_time']));		unset($tmp_topic_data);	}	else	{		$topic_tracking_info = get_complete_topic_tracking($topic_info['forum_id'], $topic_id);	}	$has_unapproved_posts = false;	// Grab extensions	$extensions = $attachments = array();	if ($topic_info['topic_attachment'] && sizeof($post_id_list))	{		$extensions = $cache->obtain_attach_extensions($topic_info['forum_id']);		// Get attachments...		if ($auth->acl_get('u_download') && $auth->acl_get('f_download', $topic_info['forum_id']))		{			$sql = 'SELECT *				FROM ' . ATTACHMENTS_TABLE . '				WHERE ' . $db->sql_in_set('post_msg_id', $post_id_list) . '					AND in_message = 0				ORDER BY filetime DESC, post_msg_id ASC';			$result = $db->sql_query($sql);			while ($row = $db->sql_fetchrow($result))			{				$attachments[$row['post_msg_id']][] = $row;			}			$db->sql_freeresult($result);		}	}	foreach ($rowset as $i => $row)	{		$message = $row['post_text'];		$post_subject = ($row['post_subject'] != '') ? $row['post_subject'] : $topic_info['topic_title'];		if ($row['bbcode_bitfield'])		{			$bbcode->bbcode_second_pass($message, $row['bbcode_uid'], $row['bbcode_bitfield']);		}		$message = bbcode_nl2br($message);		$message = smiley_text($message);		if (!empty($attachments[$row['post_id']]))		{			$update_count = array();			parse_attachments($topic_info['forum_id'], $message, $attachments[$row['post_id']], $update_count);		}		if (!$row['post_approved'])		{			$has_unapproved_posts = true;		}		$post_unread = (isset($topic_tracking_info[$topic_id]) && $row['post_time'] > $topic_tracking_info[$topic_id]) ? true : false;		$template->assign_block_vars('postrow', array(			'POST_AUTHOR_FULL'		=> get_username_string('full', $row['poster_id'], $row['username'], $row['user_colour'], $row['post_username']),			'POST_AUTHOR_COLOUR'	=> get_username_string('colour', $row['poster_id'], $row['username'], $row['user_colour'], $row['post_username']),			'POST_AUTHOR'			=> get_username_string('username', $row['poster_id'], $row['username'], $row['user_colour'], $row['post_username']),			'U_POST_AUTHOR'			=> get_username_string('profile', $row['poster_id'], $row['username'], $row['user_colour'], $row['post_username']),			'POST_DATE'		=> $user->format_date($row['post_time']),			'POST_SUBJECT'	=> $post_subject,			'MESSAGE'		=> $message,			'POST_ID'		=> $row['post_id'],			'RETURN_TOPIC'	=> sprintf($user->lang['RETURN_TOPIC'], '<a href="' . append_sid("{$phpbb_root_path}viewtopic.$phpEx", 't=' . $topic_id) . '">', '</a>'),			'MINI_POST_IMG'			=> ($post_unread) ? $user->img('icon_post_target_unread', 'UNREAD_POST') : $user->img('icon_post_target', 'POST'),			'S_POST_REPORTED'	=> ($row['post_reported'] && $auth->acl_get('m_report', $topic_info['forum_id'])),			'S_POST_UNAPPROVED'	=> (!$row['post_approved'] && $auth->acl_get('m_approve', $topic_info['forum_id'])),			'S_CHECKED'			=> (($submitted_id_list && !in_array(intval($row['post_id']), $submitted_id_list)) || in_array(intval($row['post_id']), $checked_ids)) ? true : false,			'S_HAS_ATTACHMENTS'	=> (!empty($attachments[$row['post_id']])) ? true : false,			'U_POST_DETAILS'	=> "$url&amp;i=$id&amp;p={$row['post_id']}&amp;mode=post_details" . (($forum_id) ? "&amp;f=$forum_id" : ''),			'U_MCP_APPROVE'		=> ($auth->acl_get('m_approve', $topic_info['forum_id'])) ? append_sid("{$phpbb_root_path}mcp.$phpEx", 'i=queue&amp;mode=approve_details&amp;f=' . $topic_info['forum_id'] . '&amp;p=' . $row['post_id']) : '',			'U_MCP_REPORT'		=> ($auth->acl_get('m_report', $topic_info['forum_id'])) ? append_sid("{$phpbb_root_path}mcp.$phpEx", 'i=reports&amp;mode=report_details&amp;f=' . $topic_info['forum_id'] . '&amp;p=' . $row['post_id']) : '')		);		// Display not already displayed Attachments for this post, we already parsed them. ;)		if (!empty($attachments[$row['post_id']]))		{			foreach ($attachments[$row['post_id']] as $attachment)			{				$template->assign_block_vars('postrow.attachment', array(					'DISPLAY_ATTACHMENT'	=> $attachment)				);			}		}		unset($rowset[$i]);	}	// Display topic icons for split topic	$s_topic_icons = false;	if ($auth->acl_gets('m_split', 'm_merge', (int) $topic_info['forum_id']))	{		include_once($phpbb_root_path . 'includes/functions_posting.' . $phpEx);		$s_topic_icons = posting_gen_topic_icons('', $icon_id);		// Has the user selected a topic for merge?		if ($to_topic_id)		{			$to_topic_info = get_topic_data(array($to_topic_id), 'm_merge');			if (!sizeof($to_topic_info))			{				$to_topic_id = 0;			}			else			{				$to_topic_info = $to_topic_info[$to_topic_id];				if (!$to_topic_info['enable_icons'] || $auth->acl_get('!f_icons', $topic_info['forum_id']))				{					$s_topic_icons = false;				}			}		}	}	$s_hidden_fields = build_hidden_fields(array(		'st_old'	=> $sort_days,		'post_ids'	=> $post_id_list,	));	$template->assign_vars(array(		'TOPIC_TITLE'		=> $topic_info['topic_title'],		'U_VIEW_TOPIC'		=> append_sid("{$phpbb_root_path}viewtopic.$phpEx", 'f=' . $topic_info['forum_id'] . '&amp;t=' . $topic_info['topic_id']),		'TO_TOPIC_ID'		=> $to_topic_id,		'TO_TOPIC_INFO'		=> ($to_topic_id) ? sprintf($user->lang['YOU_SELECTED_TOPIC'], $to_topic_id, '<a href="' . append_sid("{$phpbb_root_path}viewtopic.$phpEx", 'f=' . $to_topic_info['forum_id'] . '&amp;t=' . $to_topic_id) . '">' . $to_topic_info['topic_title'] . '</a>') : '',		'SPLIT_SUBJECT'		=> $subject,		'POSTS_PER_PAGE'	=> $posts_per_page,		'ACTION'			=> $action,		'REPORTED_IMG'		=> $user->img('icon_topic_reported', 'POST_REPORTED'),		'UNAPPROVED_IMG'	=> $user->img('icon_topic_unapproved', 'POST_UNAPPROVED'),		'INFO_IMG'			=> $user->img('icon_post_info', 'VIEW_INFO'),		'S_MCP_ACTION'		=> "$url&amp;i=$id&amp;mode=$mode&amp;action=$action&amp;start=$start",		'S_FORUM_SELECT'	=> ($to_forum_id) ? make_forum_select($to_forum_id, false, false, true, true, true) : make_forum_select($topic_info['forum_id'], false, false, true, true, true),		'S_CAN_SPLIT'		=> ($auth->acl_get('m_split', $topic_info['forum_id'])) ? true : false,		'S_CAN_MERGE'		=> ($auth->acl_get('m_merge', $topic_info['forum_id'])) ? true : false,		'S_CAN_DELETE'		=> ($auth->acl_get('m_delete', $topic_info['forum_id'])) ? true : false,		'S_CAN_APPROVE'		=> ($has_unapproved_posts && $auth->acl_get('m_approve', $topic_info['forum_id'])) ? true : false,		'S_CAN_LOCK'		=> ($auth->acl_get('m_lock', $topic_info['forum_id'])) ? true : false,		'S_CAN_REPORT'		=> ($auth->acl_get('m_report', $topic_info['forum_id'])) ? true : false,		'S_REPORT_VIEW'		=> ($action == 'reports') ? true : false,		'S_MERGE_VIEW'		=> ($action == 'merge') ? true : false,		'S_SPLIT_VIEW'		=> ($action == 'split') ? true : false,		'S_HIDDEN_FIELDS'	=> $s_hidden_fields,		'S_SHOW_TOPIC_ICONS'	=> $s_topic_icons,		'S_TOPIC_ICON'			=> $icon_id,		'U_SELECT_TOPIC'	=> "$url&amp;i=$id&amp;mode=forum_view&amp;action=merge_select" . (($forum_id) ? "&amp;f=$forum_id" : ''),		'RETURN_TOPIC'		=> sprintf($user->lang['RETURN_TOPIC'], '<a href="' . append_sid("{$phpbb_root_path}viewtopic.$phpEx", "f={$topic_info['forum_id']}&amp;t={$topic_info['topic_id']}&amp;start=$start") . '">', '</a>'),		'RETURN_FORUM'		=> sprintf($user->lang['RETURN_FORUM'], '<a href="' . append_sid("{$phpbb_root_path}viewforum.$phpEx", "f={$topic_info['forum_id']}&amp;start=$start") . '">', '</a>'),		'PAGE_NUMBER'		=> on_page($total, $posts_per_page, $start),		'PAGINATION'		=> (!$posts_per_page) ? '' : generate_pagination(append_sid("{$phpbb_root_path}mcp.$phpEx", "i=$id&amp;t={$topic_info['topic_id']}&amp;mode=$mode&amp;action=$action&amp;to_topic_id=$to_topic_id&amp;posts_per_page=$posts_per_page&amp;st=$sort_days&amp;sk=$sort_key&amp;sd=$sort_dir"), $total, $posts_per_page, $start),		'TOTAL_POSTS'		=> ($total == 1) ? $user->lang['VIEW_TOPIC_POST'] : sprintf($user->lang['VIEW_TOPIC_POSTS'], $total),	));}/*** Split topic*/function split_topic($action, $topic_id, $to_forum_id, $subject){	global $db, $template, $user, $phpEx, $phpbb_root_path, $auth, $config;	$post_id_list	= request_var('post_id_list', array(0));	$forum_id		= request_var('forum_id', 0);	$start			= request_var('start', 0);	if (!sizeof($post_id_list))	{		$template->assign_var('MESSAGE', $user->lang['NO_POST_SELECTED']);		return;	}	if (!check_ids($post_id_list, POSTS_TABLE, 'post_id', array('m_split')))	{		return;	}	$post_id = $post_id_list[0];	$post_info = get_post_data(array($post_id));	if (!sizeof($post_info))	{		$template->assign_var('MESSAGE', $user->lang['NO_POST_SELECTED']);		return;	}	$post_info = $post_info[$post_id];	$subject = trim($subject);	// Make some tests	if (!$subject)	{		$template->assign_var('MESSAGE', $user->lang['EMPTY_SUBJECT']);		return;	}	if ($to_forum_id <= 0)	{		$template->assign_var('MESSAGE', $user->lang['NO_DESTINATION_FORUM']);		return;	}	$forum_info = get_forum_data(array($to_forum_id), 'f_post');	if (!sizeof($forum_info))	{		$template->assign_var('MESSAGE', $user->lang['USER_CANNOT_POST']);		return;	}	$forum_info = $forum_info[$to_forum_id];	if ($forum_info['forum_type'] != FORUM_POST)	{		$template->assign_var('MESSAGE', $user->lang['FORUM_NOT_POSTABLE']);		return;	}	$redirect = request_var('redirect', build_url(array('quickmod')));	$s_hidden_fields = build_hidden_fields(array(		'i'				=> 'main',		'post_id_list'	=> $post_id_list,		'f'				=> $forum_id,		'mode'			=> 'topic_view',		'start'			=> $start,		'action'		=> $action,		't'				=> $topic_id,		'redirect'		=> $redirect,		'subject'		=> $subject,		'to_forum_id'	=> $to_forum_id,		'icon'			=> request_var('icon', 0))	);	$success_msg = $return_link = '';	if (confirm_box(true))	{		if ($action == 'split_beyond')		{			$sort_days = $total = 0;			$sort_key = $sort_dir = '';			$sort_by_sql = $sort_order_sql = array();			mcp_sorting('viewtopic', $sort_days, $sort_key, $sort_dir, $sort_by_sql, $sort_order_sql, $total, $forum_id, $topic_id);			$limit_time_sql = ($sort_days) ? 'AND t.topic_last_post_time >= ' . (time() - ($sort_days * 86400)) : '';			if ($sort_order_sql[0] == 'u')			{				$sql = 'SELECT p.post_id, p.forum_id, p.post_approved					FROM ' . POSTS_TABLE . ' p, ' . USERS_TABLE . " u					WHERE p.topic_id = $topic_id						AND p.poster_id = u.user_id						$limit_time_sql					ORDER BY $sort_order_sql";			}			else			{				$sql = 'SELECT p.post_id, p.forum_id, p.post_approved					FROM ' . POSTS_TABLE . " p					WHERE p.topic_id = $topic_id						$limit_time_sql					ORDER BY $sort_order_sql";			}			$result = $db->sql_query_limit($sql, 0, $start);			$store = false;			$post_id_list = array();			while ($row = $db->sql_fetchrow($result))			{				// If split from selected post (split_beyond), we split the unapproved items too.				if (!$row['post_approved'] && !$auth->acl_get('m_approve', $row['forum_id']))				{//					continue;				}				// Start to store post_ids as soon as we see the first post that was selected				if ($row['post_id'] == $post_id)				{					$store = true;				}				if ($store)				{					$post_id_list[] = $row['post_id'];				}			}			$db->sql_freeresult($result);		}		if (!sizeof($post_id_list))		{			trigger_error('NO_POST_SELECTED');		}		$icon_id = request_var('icon', 0);		$sql_ary = array(			'forum_id'		=> $to_forum_id,			'topic_title'	=> $subject,			'icon_id'		=> $icon_id,			'topic_approved'=> 1		);		$sql = 'INSERT INTO ' . TOPICS_TABLE . ' ' . $db->sql_build_array('INSERT', $sql_ary);		$db->sql_query($sql);		$to_topic_id = $db->sql_nextid();		move_posts($post_id_list, $to_topic_id);		$topic_info = get_topic_data(array($topic_id));		$topic_info = $topic_info[$topic_id];		add_log('mod', $to_forum_id, $to_topic_id, 'LOG_SPLIT_DESTINATION', $subject);		add_log('mod', $forum_id, $topic_id, 'LOG_SPLIT_SOURCE', $topic_info['topic_title']);		// Change topic title of first post		$sql = 'UPDATE ' . POSTS_TABLE . "			SET post_subject = '" . $db->sql_escape($subject) . "'			WHERE post_id = {$post_id_list[0]}";		$db->sql_query($sql);		$success_msg = 'TOPIC_SPLIT_SUCCESS';		// Update forum statistics		set_config_count('num_topics', 1, true);		// Link back to both topics		$return_link = sprintf($user->lang['RETURN_TOPIC'], '<a href="' . append_sid("{$phpbb_root_path}viewtopic.$phpEx", 'f=' . $post_info['forum_id'] . '&amp;t=' . $post_info['topic_id']) . '">', '</a>') . '<br /><br />' . sprintf($user->lang['RETURN_NEW_TOPIC'], '<a href="' . append_sid("{$phpbb_root_path}viewtopic.$phpEx", 'f=' . $to_forum_id . '&amp;t=' . $to_topic_id) . '">', '</a>');	}	else	{		confirm_box(false, ($action == 'split_all') ? 'SPLIT_TOPIC_ALL' : 'SPLIT_TOPIC_BEYOND', $s_hidden_fields);	}	$redirect = request_var('redirect', "index.$phpEx");	$redirect = reapply_sid($redirect);	if (!$success_msg)	{		return;	}	else	{		meta_refresh(3, append_sid("{$phpbb_root_path}viewtopic.$phpEx", "f=$to_forum_id&amp;t=$to_topic_id"));		trigger_error($user->lang[$success_msg] . '<br /><br />' . $return_link);	}}/*** Merge selected posts into selected topic*/function merge_posts($topic_id, $to_topic_id){	global $db, $template, $user, $phpEx, $phpbb_root_path, $auth;	if (!$to_topic_id)	{		$template->assign_var('MESSAGE', $user->lang['NO_FINAL_TOPIC_SELECTED']);		return;	}	$topic_data = get_topic_data(array($to_topic_id), 'm_merge');	if (!sizeof($topic_data))	{		$template->assign_var('MESSAGE', $user->lang['NO_FINAL_TOPIC_SELECTED']);		return;	}	$topic_data = $topic_data[$to_topic_id];	$post_id_list	= request_var('post_id_list', array(0));	$start			= request_var('start', 0);	if (!sizeof($post_id_list))	{		$template->assign_var('MESSAGE', $user->lang['NO_POST_SELECTED']);		return;	}	if (!check_ids($post_id_list, POSTS_TABLE, 'post_id', array('m_merge')))	{		return;	}	$redirect = request_var('redirect', build_url(array('quickmod')));	$s_hidden_fields = build_hidden_fields(array(		'i'				=> 'main',		'post_id_list'	=> $post_id_list,		'to_topic_id'	=> $to_topic_id,		'mode'			=> 'topic_view',		'action'		=> 'merge_posts',		'start'			=> $start,		'redirect'		=> $redirect,		't'				=> $topic_id)	);	$success_msg = $return_link = '';	if (confirm_box(true))	{		$to_forum_id = $topic_data['forum_id'];		move_posts($post_id_list, $to_topic_id);		add_log('mod', $to_forum_id, $to_topic_id, 'LOG_MERGE', $topic_data['topic_title']);		// Message and return links		$success_msg = 'POSTS_MERGED_SUCCESS';		// Does the original topic still exist? If yes, link back to it		$sql = 'SELECT forum_id			FROM ' . TOPICS_TABLE . '			WHERE topic_id = ' . $topic_id;		$result = $db->sql_query_limit($sql, 1);		$row = $db->sql_fetchrow($result);		$db->sql_freeresult($result);		if ($row)		{			$return_link .= sprintf($user->lang['RETURN_TOPIC'], '<a href="' . append_sid("{$phpbb_root_path}viewtopic.$phpEx", 'f=' . $row['forum_id'] . '&amp;t=' . $topic_id) . '">', '</a>');		}		else		{			// If the topic no longer exist, we will update the topic watch table.			// To not let it error out on users watching both topics, we just return on an error...			$db->sql_return_on_error(true);			$db->sql_query('UPDATE ' . TOPICS_WATCH_TABLE . ' SET topic_id = ' . (int) $to_topic_id . ' WHERE topic_id = ' . (int) $topic_id);			$db->sql_return_on_error(false);			$db->sql_query('DELETE FROM ' . TOPICS_WATCH_TABLE . ' WHERE topic_id = ' . (int) $topic_id);		}		// Link to the new topic		$return_link .= (($return_link) ? '<br /><br />' : '') . sprintf($user->lang['RETURN_NEW_TOPIC'], '<a href="' . append_sid("{$phpbb_root_path}viewtopic.$phpEx", 'f=' . $to_forum_id . '&amp;t=' . $to_topic_id) . '">', '</a>');	}	else	{		confirm_box(false, 'MERGE_POSTS', $s_hidden_fields);	}	$redirect = request_var('redirect', "index.$phpEx");	$redirect = reapply_sid($redirect);	if (!$success_msg)	{		return;	}	else	{		meta_refresh(3, append_sid("{$phpbb_root_path}viewtopic.$phpEx", "f=$to_forum_id&amp;t=$to_topic_id"));		trigger_error($user->lang[$success_msg] . '<br /><br />' . $return_link);	}}?>
<?php/**** @package mcp* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @ignore*/if (!defined('IN_PHPBB')){	exit;}/*** mcp_warn* Handling warning the users* @package mcp*/class mcp_warn{	var $p_master;	var $u_action;	function mcp_warn(&$p_master)	{		$this->p_master = &$p_master;	}	function main($id, $mode)	{		global $auth, $db, $user, $template;		global $config, $phpbb_root_path, $phpEx;		$action = request_var('action', array('' => ''));		if (is_array($action))		{			list($action, ) = each($action);		}		$this->page_title = 'MCP_WARN';		add_form_key('mcp_warn');		switch ($mode)		{			case 'front':				$this->mcp_warn_front_view();				$this->tpl_name = 'mcp_warn_front';			break;			case 'list':				$this->mcp_warn_list_view($action);				$this->tpl_name = 'mcp_warn_list';			break;			case 'warn_post':				$this->mcp_warn_post_view($action);				$this->tpl_name = 'mcp_warn_post';			break;			case 'warn_user':				$this->mcp_warn_user_view($action);				$this->tpl_name = 'mcp_warn_user';			break;		}	}	/**	* Generates the summary on the main page of the warning module	*/	function mcp_warn_front_view()	{		global $phpEx, $phpbb_root_path, $config;		global $template, $db, $user, $auth;		$template->assign_vars(array(			'U_FIND_USERNAME'	=> append_sid("{$phpbb_root_path}memberlist.$phpEx", 'mode=searchuser&amp;form=mcp&amp;field=username&amp;select_single=true'),			'U_POST_ACTION'		=> append_sid("{$phpbb_root_path}mcp.$phpEx", 'i=warn&amp;mode=warn_user'),		));		// Obtain a list of the 5 naughtiest users....		// These are the 5 users with the highest warning count		$highest = array();		$count = 0;		view_warned_users($highest, $count, 5);		foreach ($highest as $row)		{			$template->assign_block_vars('highest', array(				'U_NOTES'		=> append_sid("{$phpbb_root_path}mcp.$phpEx", 'i=notes&amp;mode=user_notes&amp;u=' . $row['user_id']),				'USERNAME_FULL'		=> get_username_string('full', $row['user_id'], $row['username'], $row['user_colour']),				'USERNAME'			=> $row['username'],				'USERNAME_COLOUR'	=> ($row['user_colour']) ? '#' . $row['user_colour'] : '',				'U_USER'			=> append_sid("{$phpbb_root_path}memberlist.$phpEx", 'mode=viewprofile&amp;u=' . $row['user_id']),				'WARNING_TIME'	=> $user->format_date($row['user_last_warning']),				'WARNINGS'		=> $row['user_warnings'],			));		}		// And now the 5 most recent users to get in trouble		$sql = 'SELECT u.user_id, u.username, u.username_clean, u.user_colour, u.user_warnings, w.warning_time			FROM ' . USERS_TABLE . ' u, ' . WARNINGS_TABLE . ' w			WHERE u.user_id = w.user_id			ORDER BY w.warning_time DESC';		$result = $db->sql_query_limit($sql, 5);		while ($row = $db->sql_fetchrow($result))		{			$template->assign_block_vars('latest', array(				'U_NOTES'		=> append_sid("{$phpbb_root_path}mcp.$phpEx", 'i=notes&amp;mode=user_notes&amp;u=' . $row['user_id']),				'USERNAME_FULL'		=> get_username_string('full', $row['user_id'], $row['username'], $row['user_colour']),				'USERNAME'			=> $row['username'],				'USERNAME_COLOUR'	=> ($row['user_colour']) ? '#' . $row['user_colour'] : '',				'U_USER'			=> append_sid("{$phpbb_root_path}memberlist.$phpEx", 'mode=viewprofile&amp;u=' . $row['user_id']),				'WARNING_TIME'	=> $user->format_date($row['warning_time']),				'WARNINGS'		=> $row['user_warnings'],			));		}		$db->sql_freeresult($result);	}	/**	* Lists all users with warnings	*/	function mcp_warn_list_view($action)	{		global $phpEx, $phpbb_root_path, $config;		global $template, $db, $user, $auth;		$user->add_lang('memberlist');		$start	= request_var('start', 0);		$st		= request_var('st', 0);		$sk		= request_var('sk', 'b');		$sd		= request_var('sd', 'd');		$limit_days = array(0 => $user->lang['ALL_ENTRIES'], 1 => $user->lang['1_DAY'], 7 => $user->lang['7_DAYS'], 14 => $user->lang['2_WEEKS'], 30 => $user->lang['1_MONTH'], 90 => $user->lang['3_MONTHS'], 180 => $user->lang['6_MONTHS'], 365 => $user->lang['1_YEAR']);		$sort_by_text = array('a' => $user->lang['SORT_USERNAME'], 'b' => $user->lang['SORT_DATE'], 'c' => $user->lang['SORT_WARNINGS']);		$sort_by_sql = array('a' => 'username_clean', 'b' => 'user_last_warning', 'c' => 'user_warnings');		$s_limit_days = $s_sort_key = $s_sort_dir = $u_sort_param = '';		gen_sort_selects($limit_days, $sort_by_text, $st, $sk, $sd, $s_limit_days, $s_sort_key, $s_sort_dir, $u_sort_param);		// Define where and sort sql for use in displaying logs		$sql_where = ($st) ? (time() - ($st * 86400)) : 0;		$sql_sort = $sort_by_sql[$sk] . ' ' . (($sd == 'd') ? 'DESC' : 'ASC');		$users = array();		$user_count = 0;		view_warned_users($users, $user_count, $config['topics_per_page'], $start, $sql_where, $sql_sort);		foreach ($users as $row)		{			$template->assign_block_vars('user', array(				'U_NOTES'		=> append_sid("{$phpbb_root_path}mcp.$phpEx", 'i=notes&amp;mode=user_notes&amp;u=' . $row['user_id']),				'USERNAME_FULL'		=> get_username_string('full', $row['user_id'], $row['username'], $row['user_colour']),				'USERNAME'			=> $row['username'],				'USERNAME_COLOUR'	=> ($row['user_colour']) ? '#' . $row['user_colour'] : '',				'U_USER'			=> append_sid("{$phpbb_root_path}memberlist.$phpEx", 'mode=viewprofile&amp;u=' . $row['user_id']),				'WARNING_TIME'	=> $user->format_date($row['user_last_warning']),				'WARNINGS'		=> $row['user_warnings'],			));		}		$template->assign_vars(array(			'U_POST_ACTION'			=> $this->u_action,			'S_CLEAR_ALLOWED'		=> ($auth->acl_get('a_clearlogs')) ? true : false,			'S_SELECT_SORT_DIR'		=> $s_sort_dir,			'S_SELECT_SORT_KEY'		=> $s_sort_key,			'S_SELECT_SORT_DAYS'	=> $s_limit_days,			'PAGE_NUMBER'		=> on_page($user_count, $config['topics_per_page'], $start),			'PAGINATION'		=> generate_pagination(append_sid("{$phpbb_root_path}mcp.$phpEx", "i=warn&amp;mode=list&amp;st=$st&amp;sk=$sk&amp;sd=$sd"), $user_count, $config['topics_per_page'], $start),			'TOTAL_USERS'		=> ($user_count == 1) ? $user->lang['LIST_USER'] : sprintf($user->lang['LIST_USERS'], $user_count),		));	}	/**	* Handles warning the user when the warning is for a specific post	*/	function mcp_warn_post_view($action)	{		global $phpEx, $phpbb_root_path, $config;		global $template, $db, $user, $auth;		$post_id = request_var('p', 0);		$forum_id = request_var('f', 0);		$notify = (isset($_REQUEST['notify_user'])) ? true : false;		$warning = utf8_normalize_nfc(request_var('warning', '', true));		$sql = 'SELECT u.*, p.*			FROM ' . POSTS_TABLE . ' p, ' . USERS_TABLE . " u			WHERE p.post_id = $post_id				AND u.user_id = p.poster_id";		$result = $db->sql_query($sql);		$user_row = $db->sql_fetchrow($result);		$db->sql_freeresult($result);		if (!$user_row)		{			trigger_error('NO_POST');		}		// There is no point issuing a warning to ignored users (ie anonymous and bots)		if ($user_row['user_type'] == USER_IGNORE)		{			trigger_error('CANNOT_WARN_ANONYMOUS');		}		// Prevent someone from warning themselves		if ($user_row['user_id'] == $user->data['user_id'])		{			trigger_error('CANNOT_WARN_SELF');		}		// Check if there is already a warning for this post to prevent multiple		// warnings for the same offence		$sql = 'SELECT post_id			FROM ' . WARNINGS_TABLE . "			WHERE post_id = $post_id";		$result = $db->sql_query($sql);		$row = $db->sql_fetchrow($result);		$db->sql_freeresult($result);		if ($row)		{			trigger_error('ALREADY_WARNED');		}		$user_id = $user_row['user_id'];		if (strpos($this->u_action, "&amp;f=$forum_id&amp;p=$post_id") === false)		{			$this->p_master->adjust_url("&amp;f=$forum_id&amp;p=$post_id");			$this->u_action .= "&amp;f=$forum_id&amp;p=$post_id";		}		// Check if can send a notification		if ($config['allow_privmsg'])		{			$auth2 = new auth();			$auth2->acl($user_row);			$s_can_notify = ($auth2->acl_get('u_readpm')) ? true : false;			unset($auth2);		}		else		{			$s_can_notify = false;		}		// Prevent against clever people		if ($notify && !$s_can_notify)		{			$notify = false;		}		if ($warning && $action == 'add_warning')		{			if (check_form_key('mcp_warn'))			{				add_warning($user_row, $warning, $notify, $post_id);				$msg = $user->lang['USER_WARNING_ADDED'];			}			else			{				$msg = $user->lang['FORM_INVALID'];			}			$redirect = append_sid("{$phpbb_root_path}mcp.$phpEx", "i=notes&amp;mode=user_notes&amp;u=$user_id");			meta_refresh(2, $redirect);			trigger_error($msg . '<br /><br />' . sprintf($user->lang['RETURN_PAGE'], '<a href="' . $redirect . '">', '</a>'));		}		// OK, they didn't submit a warning so lets build the page for them to do so		// We want to make the message available here as a reminder		// Parse the message and subject		$message = censor_text($user_row['post_text']);		// Second parse bbcode here		if ($user_row['bbcode_bitfield'])		{			include_once($phpbb_root_path . 'includes/bbcode.' . $phpEx);			$bbcode = new bbcode($user_row['bbcode_bitfield']);			$bbcode->bbcode_second_pass($message, $user_row['bbcode_uid'], $user_row['bbcode_bitfield']);		}		$message = bbcode_nl2br($message);		$message = smiley_text($message);		// Generate the appropriate user information for the user we are looking at		if (!function_exists('get_user_avatar'))		{			include($phpbb_root_path . 'includes/functions_display.' . $phpEx);		}		$rank_title = $rank_img = '';		$avatar_img = get_user_avatar($user_row['user_avatar'], $user_row['user_avatar_type'], $user_row['user_avatar_width'], $user_row['user_avatar_height']);		$template->assign_vars(array(			'U_POST_ACTION'		=> $this->u_action,			'POST'				=> $message,			'USERNAME'			=> $user_row['username'],			'USER_COLOR'		=> (!empty($user_row['user_colour'])) ? $user_row['user_colour'] : '',			'RANK_TITLE'		=> $rank_title,			'JOINED'			=> $user->format_date($user_row['user_regdate']),			'POSTS'				=> ($user_row['user_posts']) ? $user_row['user_posts'] : 0,			'WARNINGS'			=> ($user_row['user_warnings']) ? $user_row['user_warnings'] : 0,			'AVATAR_IMG'		=> $avatar_img,			'RANK_IMG'			=> $rank_img,			'L_WARNING_POST_DEFAULT'	=> sprintf($user->lang['WARNING_POST_DEFAULT'], generate_board_url() . "/viewtopic.$phpEx?f=$forum_id&amp;p=$post_id#p$post_id"),			'S_CAN_NOTIFY'		=> $s_can_notify,		));	}	/**	* Handles warning the user	*/	function mcp_warn_user_view($action)	{		global $phpEx, $phpbb_root_path, $config, $module;		global $template, $db, $user, $auth;		$user_id = request_var('u', 0);		$username = request_var('username', '', true);		$notify = (isset($_REQUEST['notify_user'])) ? true : false;		$warning = utf8_normalize_nfc(request_var('warning', '', true));		$sql_where = ($user_id) ? "user_id = $user_id" : "username_clean = '" . $db->sql_escape(utf8_clean_string($username)) . "'";		$sql = 'SELECT *			FROM ' . USERS_TABLE . '			WHERE ' . $sql_where;		$result = $db->sql_query($sql);		$user_row = $db->sql_fetchrow($result);		$db->sql_freeresult($result);		if (!$user_row)		{			trigger_error('NO_USER');		}		// Prevent someone from warning themselves		if ($user_row['user_id'] == $user->data['user_id'])		{			trigger_error('CANNOT_WARN_SELF');		}		$user_id = $user_row['user_id'];		if (strpos($this->u_action, "&amp;u=$user_id") === false)		{			$this->p_master->adjust_url('&amp;u=' . $user_id);			$this->u_action .= "&amp;u=$user_id";		}		// Check if can send a notification		if ($config['allow_privmsg'])		{			$auth2 = new auth();			$auth2->acl($user_row);			$s_can_notify = ($auth2->acl_get('u_readpm')) ? true : false;			unset($auth2);		}		else		{			$s_can_notify = false;		}		// Prevent against clever people		if ($notify && !$s_can_notify)		{			$notify = false;		}		if ($warning && $action == 'add_warning')		{			if (check_form_key('mcp_warn'))			{				add_warning($user_row, $warning, $notify);				$msg = $user->lang['USER_WARNING_ADDED'];			}			else			{				$msg = $user->lang['FORM_INVALID'];			}			$redirect = append_sid("{$phpbb_root_path}mcp.$phpEx", "i=notes&amp;mode=user_notes&amp;u=$user_id");			meta_refresh(2, $redirect);			trigger_error($msg . '<br /><br />' . sprintf($user->lang['RETURN_PAGE'], '<a href="' . $redirect . '">', '</a>'));		}		// Generate the appropriate user information for the user we are looking at		if (!function_exists('get_user_avatar'))		{			include($phpbb_root_path . 'includes/functions_display.' . $phpEx);		}		$rank_title = $rank_img = '';		$avatar_img = get_user_avatar($user_row['user_avatar'], $user_row['user_avatar_type'], $user_row['user_avatar_width'], $user_row['user_avatar_height']);		// OK, they didn't submit a warning so lets build the page for them to do so		$template->assign_vars(array(			'U_POST_ACTION'		=> $this->u_action,			'RANK_TITLE'		=> $rank_title,			'JOINED'			=> $user->format_date($user_row['user_regdate']),			'POSTS'				=> ($user_row['user_posts']) ? $user_row['user_posts'] : 0,			'WARNINGS'			=> ($user_row['user_warnings']) ? $user_row['user_warnings'] : 0,			'USERNAME_FULL'		=> get_username_string('full', $user_row['user_id'], $user_row['username'], $user_row['user_colour']),			'USERNAME_COLOUR'	=> get_username_string('colour', $user_row['user_id'], $user_row['username'], $user_row['user_colour']),			'USERNAME'			=> get_username_string('username', $user_row['user_id'], $user_row['username'], $user_row['user_colour']),			'U_PROFILE'			=> get_username_string('profile', $user_row['user_id'], $user_row['username'], $user_row['user_colour']),			'AVATAR_IMG'		=> $avatar_img,			'RANK_IMG'			=> $rank_img,			'S_CAN_NOTIFY'		=> $s_can_notify,		));		return $user_id;	}}/*** Insert the warning into the database*/function add_warning($user_row, $warning, $send_pm = true, $post_id = 0){	global $phpEx, $phpbb_root_path, $config;	global $template, $db, $user, $auth;	if ($send_pm)	{		include_once($phpbb_root_path . 'includes/functions_privmsgs.' . $phpEx);		include_once($phpbb_root_path . 'includes/message_parser.' . $phpEx);		$user_row['user_lang'] = (file_exists($phpbb_root_path . 'language/' . $user_row['user_lang'] . "/mcp.$phpEx")) ? $user_row['user_lang'] : $config['default_lang'];		include($phpbb_root_path . 'language/' . basename($user_row['user_lang']) . "/mcp.$phpEx");		$message_parser = new parse_message();		$message_parser->message = sprintf($lang['WARNING_PM_BODY'], $warning);		$message_parser->parse(true, true, true, false, false, true, true);		$pm_data = array(			'from_user_id'			=> $user->data['user_id'],			'from_user_ip'			=> $user->ip,			'from_username'			=> $user->data['username'],			'enable_sig'			=> false,			'enable_bbcode'			=> true,			'enable_smilies'		=> true,			'enable_urls'			=> false,			'icon_id'				=> 0,			'bbcode_bitfield'		=> $message_parser->bbcode_bitfield,			'bbcode_uid'			=> $message_parser->bbcode_uid,			'message'				=> $message_parser->message,			'address_list'			=> array('u' => array($user_row['user_id'] => 'to')),		);		submit_pm('post', $lang['WARNING_PM_SUBJECT'], $pm_data, false);	}	add_log('admin', 'LOG_USER_WARNING', $user_row['username']);	$log_id = add_log('user', $user_row['user_id'], 'LOG_USER_WARNING_BODY', $warning);	$sql_ary = array(		'user_id'		=> $user_row['user_id'],		'post_id'		=> $post_id,		'log_id'		=> $log_id,		'warning_time'	=> time(),	);	$db->sql_query('INSERT INTO ' . WARNINGS_TABLE . ' ' . $db->sql_build_array('INSERT', $sql_ary));	$sql = 'UPDATE ' . USERS_TABLE . '		SET user_warnings = user_warnings + 1,			user_last_warning = ' . time() . '		WHERE user_id = ' . $user_row['user_id'];	$db->sql_query($sql);	// We add this to the mod log too for moderators to see that a specific user got warned.	$sql = 'SELECT forum_id, topic_id		FROM ' . POSTS_TABLE . '		WHERE post_id = ' . $post_id;	$result = $db->sql_query($sql);	$row = $db->sql_fetchrow($result);	$db->sql_freeresult($result);	add_log('mod', $row['forum_id'], $row['topic_id'], 'LOG_USER_WARNING', $user_row['username']);}?>
<?php/**** @package phpBB3* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @ignore*/define('IN_PHPBB', true);$phpbb_root_path = (defined('PHPBB_ROOT_PATH')) ? PHPBB_ROOT_PATH : './';$phpEx = substr(strrchr(__FILE__, '.'), 1);include($phpbb_root_path . 'common.' . $phpEx);include($phpbb_root_path . 'includes/functions_display.' . $phpEx);// Start session$user->session_begin();$auth->acl($user->data);// Start initial var setup$forum_id	= request_var('f', 0);$mark_read	= request_var('mark', '');$start		= request_var('start', 0);$default_sort_days	= (!empty($user->data['user_topic_show_days'])) ? $user->data['user_topic_show_days'] : 0;$default_sort_key	= (!empty($user->data['user_topic_sortby_type'])) ? $user->data['user_topic_sortby_type'] : 't';$default_sort_dir	= (!empty($user->data['user_topic_sortby_dir'])) ? $user->data['user_topic_sortby_dir'] : 'd';$sort_days	= request_var('st', $default_sort_days);$sort_key	= request_var('sk', $default_sort_key);$sort_dir	= request_var('sd', $default_sort_dir);// Check if the user has actually sent a forum ID with his/her request// If not give them a nice error page.if (!$forum_id){	trigger_error('NO_FORUM');}$sql_from = FORUMS_TABLE . ' f';$lastread_select = '';// Grab appropriate forum dataif ($config['load_db_lastread'] && $user->data['is_registered']){	$sql_from .= ' LEFT JOIN ' . FORUMS_TRACK_TABLE . ' ft ON (ft.user_id = ' . $user->data['user_id'] . '		AND ft.forum_id = f.forum_id)';	$lastread_select .= ', ft.mark_time';}if ($user->data['is_registered']){	$sql_from .= ' LEFT JOIN ' . FORUMS_WATCH_TABLE . ' fw ON (fw.forum_id = f.forum_id AND fw.user_id = ' . $user->data['user_id'] . ')';	$lastread_select .= ', fw.notify_status';}$sql = "SELECT f.* $lastread_select	FROM $sql_from	WHERE f.forum_id = $forum_id";$result = $db->sql_query($sql);$forum_data = $db->sql_fetchrow($result);$db->sql_freeresult($result);if (!$forum_data){	trigger_error('NO_FORUM');}// Configure style, language, etc.$user->setup('viewforum', $forum_data['forum_style']);// Redirect to login upon emailed notification linksif (isset($_GET['e']) && !$user->data['is_registered']){	login_box('', $user->lang['LOGIN_NOTIFY_FORUM']);}// Permissions checkif (!$auth->acl_gets('f_list', 'f_read', $forum_id) || ($forum_data['forum_type'] == FORUM_LINK && $forum_data['forum_link'] && !$auth->acl_get('f_read', $forum_id))){	if ($user->data['user_id'] != ANONYMOUS)	{		trigger_error('SORRY_AUTH_READ');	}	login_box('', $user->lang['LOGIN_VIEWFORUM']);}// Forum is passworded ... check whether access has been granted to this// user this session, if not show login boxif ($forum_data['forum_password']){	login_forum_box($forum_data);}// Is this forum a link? ... User got here either because the// number of clicks is being tracked or they guessed the idif ($forum_data['forum_type'] == FORUM_LINK && $forum_data['forum_link']){	// Does it have click tracking enabled?	if ($forum_data['forum_flags'] & FORUM_FLAG_LINK_TRACK)	{		$sql = 'UPDATE ' . FORUMS_TABLE . '			SET forum_posts = forum_posts + 1			WHERE forum_id = ' . $forum_id;		$db->sql_query($sql);	}	// We redirect to the url. The third parameter indicates that external redirects are allowed.	redirect($forum_data['forum_link'], false, true);	return;}// Build navigation linksgenerate_forum_nav($forum_data);// Forum Rulesif ($auth->acl_get('f_read', $forum_id)){	generate_forum_rules($forum_data);}// Do we have subforums?$active_forum_ary = $moderators = array();if ($forum_data['left_id'] != $forum_data['right_id'] - 1){	list($active_forum_ary, $moderators) = display_forums($forum_data, $config['load_moderators'], $config['load_moderators']);}else{	$template->assign_var('S_HAS_SUBFORUM', false);	if ($config['load_moderators'])	{		get_moderators($moderators, $forum_id);	}}// Dump out the page header and load viewforum templatepage_header($user->lang['VIEW_FORUM'] . ' - ' . $forum_data['forum_name'], true, $forum_id);$template->set_filenames(array(	'body' => 'viewforum_body.html'));make_jumpbox(append_sid("{$phpbb_root_path}viewforum.$phpEx"), $forum_id);$template->assign_vars(array(	'U_VIEW_FORUM'			=> append_sid("{$phpbb_root_path}viewforum.$phpEx", "f=$forum_id" . (($start == 0) ? '' : "&amp;start=$start")),));// Not postable forum or showing active topics?if (!($forum_data['forum_type'] == FORUM_POST || (($forum_data['forum_flags'] & FORUM_FLAG_ACTIVE_TOPICS) && $forum_data['forum_type'] == FORUM_CAT))){	page_footer();}// Ok, if someone has only list-access, we only display the forum list.// We also make this circumstance available to the template in case we want to display a notice. ;)if (!$auth->acl_get('f_read', $forum_id)){	$template->assign_vars(array(		'S_NO_READ_ACCESS'		=> true,	));	page_footer();}// Handle marking postsif ($mark_read == 'topics'){	$token = request_var('hash', '');	if (check_link_hash($token, 'global'))	{		// Add 0 to forums array to mark global announcements correctly		markread('topics', array($forum_id, 0));	}	$redirect_url = append_sid("{$phpbb_root_path}viewforum.$phpEx", 'f=' . $forum_id);	meta_refresh(3, $redirect_url);	trigger_error($user->lang['TOPICS_MARKED'] . '<br /><br />' . sprintf($user->lang['RETURN_FORUM'], '<a href="' . $redirect_url . '">', '</a>'));}// Is a forum specific topic count required?if ($forum_data['forum_topics_per_page']){	$config['topics_per_page'] = $forum_data['forum_topics_per_page'];}// Do the forum Prune thang - cron type job ...if ($forum_data['prune_next'] < time() && $forum_data['enable_prune']){	$template->assign_var('RUN_CRON_TASK', '<img src="' . append_sid($phpbb_root_path . 'cron.' . $phpEx, 'cron_type=prune_forum&amp;f=' . $forum_id) . '" alt="cron" width="1" height="1" />');}// Forum rules and subscription info$s_watching_forum = array(	'link'			=> '',	'title'			=> '',	'is_watching'	=> false,);if (($config['email_enable'] || $config['jab_enable']) && $config['allow_forum_notify'] && $forum_data['forum_type'] == FORUM_POST && ($auth->acl_get('f_subscribe', $forum_id) || $user->data['user_id'] == ANONYMOUS)){	$notify_status = (isset($forum_data['notify_status'])) ? $forum_data['notify_status'] : NULL;	watch_topic_forum('forum', $s_watching_forum, $user->data['user_id'], $forum_id, 0, $notify_status, $start, $forum_data['forum_name']);}$s_forum_rules = '';gen_forum_auth_level('forum', $forum_id, $forum_data['forum_status']);// Topic ordering options$limit_days = array(0 => $user->lang['ALL_TOPICS'], 1 => $user->lang['1_DAY'], 7 => $user->lang['7_DAYS'], 14 => $user->lang['2_WEEKS'], 30 => $user->lang['1_MONTH'], 90 => $user->lang['3_MONTHS'], 180 => $user->lang['6_MONTHS'], 365 => $user->lang['1_YEAR']);$sort_by_text = array('a' => $user->lang['AUTHOR'], 't' => $user->lang['POST_TIME'], 'r' => $user->lang['REPLIES'], 's' => $user->lang['SUBJECT'], 'v' => $user->lang['VIEWS']);$sort_by_sql = array('a' => 't.topic_first_poster_name', 't' => 't.topic_last_post_time', 'r' => 't.topic_replies', 's' => 't.topic_title', 'v' => 't.topic_views');$s_limit_days = $s_sort_key = $s_sort_dir = $u_sort_param = '';gen_sort_selects($limit_days, $sort_by_text, $sort_days, $sort_key, $sort_dir, $s_limit_days, $s_sort_key, $s_sort_dir, $u_sort_param, $default_sort_days, $default_sort_key, $default_sort_dir);// Limit topics to certain time frame, obtain correct topic count// global announcements must not be counted, normal announcements have to// be counted, as forum_topics(_real) includes themif ($sort_days){	$min_post_time = time() - ($sort_days * 86400);	$sql = 'SELECT COUNT(topic_id) AS num_topics		FROM ' . TOPICS_TABLE . "		WHERE forum_id = $forum_id			AND ((topic_type <> " . POST_GLOBAL . " AND topic_last_post_time >= $min_post_time)				OR topic_type = " . POST_ANNOUNCE . ")		" . (($auth->acl_get('m_approve', $forum_id)) ? '' : 'AND topic_approved = 1');	$result = $db->sql_query($sql);	$topics_count = (int) $db->sql_fetchfield('num_topics');	$db->sql_freeresult($result);	if (isset($_POST['sort']))	{		$start = 0;	}	$sql_limit_time = "AND t.topic_last_post_time >= $min_post_time";	// Make sure we have information about day selection ready	$template->assign_var('S_SORT_DAYS', true);}else{	$topics_count = ($auth->acl_get('m_approve', $forum_id)) ? $forum_data['forum_topics_real'] : $forum_data['forum_topics'];	$sql_limit_time = '';}// Make sure $start is set to the last page if it exceeds the amountif ($start < 0 || $start > $topics_count){	$start = ($start < 0) ? 0 : floor(($topics_count - 1) / $config['topics_per_page']) * $config['topics_per_page'];}// Basic pagewide vars$post_alt = ($forum_data['forum_status'] == ITEM_LOCKED) ? $user->lang['FORUM_LOCKED'] : $user->lang['POST_NEW_TOPIC'];// Display active topics?$s_display_active = ($forum_data['forum_type'] == FORUM_CAT && ($forum_data['forum_flags'] & FORUM_FLAG_ACTIVE_TOPICS)) ? true : false;$s_search_hidden_fields = array('fid' => array($forum_id));if ($_SID){	$s_search_hidden_fields['sid'] = $_SID;}if (!empty($_EXTRA_URL)){	foreach ($_EXTRA_URL as $url_param)	{		$url_param = explode('=', $url_param, 2);		$s_hidden_fields[$url_param[0]] = $url_param[1];	}}$template->assign_vars(array(	'MODERATORS'	=> (!empty($moderators[$forum_id])) ? implode(', ', $moderators[$forum_id]) : '',	'POST_IMG'					=> ($forum_data['forum_status'] == ITEM_LOCKED) ? $user->img('button_topic_locked', $post_alt) : $user->img('button_topic_new', $post_alt),	'NEWEST_POST_IMG'			=> $user->img('icon_topic_newest', 'VIEW_NEWEST_POST'),	'LAST_POST_IMG'				=> $user->img('icon_topic_latest', 'VIEW_LATEST_POST'),	'FOLDER_IMG'				=> $user->img('topic_read', 'NO_UNREAD_POSTS'),	'FOLDER_UNREAD_IMG'			=> $user->img('topic_unread', 'UNREAD_POSTS'),	'FOLDER_HOT_IMG'			=> $user->img('topic_read_hot', 'NO_UNREAD_POSTS_HOT'),	'FOLDER_HOT_UNREAD_IMG'		=> $user->img('topic_unread_hot', 'UNREAD_POSTS_HOT'),	'FOLDER_LOCKED_IMG'			=> $user->img('topic_read_locked', 'NO_UNREAD_POSTS_LOCKED'),	'FOLDER_LOCKED_UNREAD_IMG'	=> $user->img('topic_unread_locked', 'UNREAD_POSTS_LOCKED'),	'FOLDER_STICKY_IMG'			=> $user->img('sticky_read', 'POST_STICKY'),	'FOLDER_STICKY_UNREAD_IMG'	=> $user->img('sticky_unread', 'POST_STICKY'),	'FOLDER_ANNOUNCE_IMG'		=> $user->img('announce_read', 'POST_ANNOUNCEMENT'),	'FOLDER_ANNOUNCE_UNREAD_IMG'=> $user->img('announce_unread', 'POST_ANNOUNCEMENT'),	'FOLDER_MOVED_IMG'			=> $user->img('topic_moved', 'TOPIC_MOVED'),	'REPORTED_IMG'				=> $user->img('icon_topic_reported', 'TOPIC_REPORTED'),	'UNAPPROVED_IMG'			=> $user->img('icon_topic_unapproved', 'TOPIC_UNAPPROVED'),	'GOTO_PAGE_IMG'				=> $user->img('icon_post_target', 'GOTO_PAGE'),	'L_NO_TOPICS' 			=> ($forum_data['forum_status'] == ITEM_LOCKED) ? $user->lang['POST_FORUM_LOCKED'] : $user->lang['NO_TOPICS'],	'S_DISPLAY_POST_INFO'	=> ($forum_data['forum_type'] == FORUM_POST && ($auth->acl_get('f_post', $forum_id) || $user->data['user_id'] == ANONYMOUS)) ? true : false,	'S_IS_POSTABLE'			=> ($forum_data['forum_type'] == FORUM_POST) ? true : false,	'S_USER_CAN_POST'		=> ($auth->acl_get('f_post', $forum_id)) ? true : false,	'S_DISPLAY_ACTIVE'		=> $s_display_active,	'S_SELECT_SORT_DIR'		=> $s_sort_dir,	'S_SELECT_SORT_KEY'		=> $s_sort_key,	'S_SELECT_SORT_DAYS'	=> $s_limit_days,	'S_TOPIC_ICONS'			=> ($s_display_active && sizeof($active_forum_ary)) ? max($active_forum_ary['enable_icons']) : (($forum_data['enable_icons']) ? true : false),	'S_WATCH_FORUM_LINK'	=> $s_watching_forum['link'],	'S_WATCH_FORUM_TITLE'	=> $s_watching_forum['title'],	'S_WATCHING_FORUM'		=> $s_watching_forum['is_watching'],	'S_FORUM_ACTION'		=> append_sid("{$phpbb_root_path}viewforum.$phpEx", "f=$forum_id" . (($start == 0) ? '' : "&amp;start=$start")),	'S_DISPLAY_SEARCHBOX'	=> ($auth->acl_get('u_search') && $auth->acl_get('f_search', $forum_id) && $config['load_search']) ? true : false,	'S_SEARCHBOX_ACTION'	=> append_sid("{$phpbb_root_path}search.$phpEx"),	'S_SEARCH_LOCAL_HIDDEN_FIELDS'	=> build_hidden_fields($s_search_hidden_fields),	'S_SINGLE_MODERATOR'	=> (!empty($moderators[$forum_id]) && sizeof($moderators[$forum_id]) > 1) ? false : true,	'S_IS_LOCKED'			=> ($forum_data['forum_status'] == ITEM_LOCKED) ? true : false,	'S_VIEWFORUM'			=> true,	'U_MCP'				=> ($auth->acl_get('m_', $forum_id)) ? append_sid("{$phpbb_root_path}mcp.$phpEx", "f=$forum_id&amp;i=main&amp;mode=forum_view", true, $user->session_id) : '',	'U_POST_NEW_TOPIC'	=> ($auth->acl_get('f_post', $forum_id) || $user->data['user_id'] == ANONYMOUS) ? append_sid("{$phpbb_root_path}posting.$phpEx", 'mode=post&amp;f=' . $forum_id) : '',	'U_VIEW_FORUM'		=> append_sid("{$phpbb_root_path}viewforum.$phpEx", "f=$forum_id" . ((strlen($u_sort_param)) ? "&amp;$u_sort_param" : '') . (($start == 0) ? '' : "&amp;start=$start")),	'U_MARK_TOPICS'		=> ($user->data['is_registered'] || $config['load_anon_lastread']) ? append_sid("{$phpbb_root_path}viewforum.$phpEx", 'hash=' . generate_link_hash('global') . "&amp;f=$forum_id&amp;mark=topics") : '',));// Grab icons$icons = $cache->obtain_icons();// Grab all topic data$rowset = $announcement_list = $topic_list = $global_announce_list = array();$sql_array = array(	'SELECT'	=> 't.*',	'FROM'		=> array(		TOPICS_TABLE		=> 't'	),	'LEFT_JOIN'	=> array(),);$sql_approved = ($auth->acl_get('m_approve', $forum_id)) ? '' : 'AND t.topic_approved = 1';if ($user->data['is_registered']){	if ($config['load_db_track'])	{		$sql_array['LEFT_JOIN'][] = array('FROM' => array(TOPICS_POSTED_TABLE => 'tp'), 'ON' => 'tp.topic_id = t.topic_id AND tp.user_id = ' . $user->data['user_id']);		$sql_array['SELECT'] .= ', tp.topic_posted';	}	if ($config['load_db_lastread'])	{		$sql_array['LEFT_JOIN'][] = array('FROM' => array(TOPICS_TRACK_TABLE => 'tt'), 'ON' => 'tt.topic_id = t.topic_id AND tt.user_id = ' . $user->data['user_id']);		$sql_array['SELECT'] .= ', tt.mark_time';		if ($s_display_active && sizeof($active_forum_ary))		{			$sql_array['LEFT_JOIN'][] = array('FROM' => array(FORUMS_TRACK_TABLE => 'ft'), 'ON' => 'ft.forum_id = t.forum_id AND ft.user_id = ' . $user->data['user_id']);			$sql_array['SELECT'] .= ', ft.mark_time AS forum_mark_time';		}	}}if ($forum_data['forum_type'] == FORUM_POST){	// Obtain announcements ... removed sort ordering, sort by time in all cases	$sql = $db->sql_build_query('SELECT', array(		'SELECT'	=> $sql_array['SELECT'],		'FROM'		=> $sql_array['FROM'],		'LEFT_JOIN'	=> $sql_array['LEFT_JOIN'],		'WHERE'		=> 't.forum_id IN (' . $forum_id . ', 0)			AND t.topic_type IN (' . POST_ANNOUNCE . ', ' . POST_GLOBAL . ')',		'ORDER_BY'	=> 't.topic_time DESC',	));	$result = $db->sql_query($sql);	while ($row = $db->sql_fetchrow($result))	{		if (!$row['topic_approved'] && !$auth->acl_get('m_approve', $row['forum_id']))		{			// Do not display announcements that are waiting for approval.			continue;		}		$rowset[$row['topic_id']] = $row;		$announcement_list[] = $row['topic_id'];		if ($row['topic_type'] == POST_GLOBAL)		{			$global_announce_list[$row['topic_id']] = true;		}		else		{			$topics_count--;		}	}	$db->sql_freeresult($result);}// If the user is trying to reach late pages, start searching from the end$store_reverse = false;$sql_limit = $config['topics_per_page'];if ($start > $topics_count / 2){	$store_reverse = true;	if ($start + $config['topics_per_page'] > $topics_count)	{		$sql_limit = min($config['topics_per_page'], max(1, $topics_count - $start));	}	// Select the sort order	$sql_sort_order = $sort_by_sql[$sort_key] . ' ' . (($sort_dir == 'd') ? 'ASC' : 'DESC');	$sql_start = max(0, $topics_count - $sql_limit - $start);}else{	// Select the sort order	$sql_sort_order = $sort_by_sql[$sort_key] . ' ' . (($sort_dir == 'd') ? 'DESC' : 'ASC');	$sql_start = $start;}if ($forum_data['forum_type'] == FORUM_POST || !sizeof($active_forum_ary)){	$sql_where = 't.forum_id = ' . $forum_id;}else if (empty($active_forum_ary['exclude_forum_id'])){	$sql_where = $db->sql_in_set('t.forum_id', $active_forum_ary['forum_id']);}else{	$get_forum_ids = array_diff($active_forum_ary['forum_id'], $active_forum_ary['exclude_forum_id']);	$sql_where = (sizeof($get_forum_ids)) ? $db->sql_in_set('t.forum_id', $get_forum_ids) : 't.forum_id = ' . $forum_id;}// Grab just the sorted topic ids$sql = 'SELECT t.topic_id	FROM ' . TOPICS_TABLE . " t	WHERE $sql_where		AND t.topic_type IN (" . POST_NORMAL . ', ' . POST_STICKY . ")		$sql_approved		$sql_limit_time	ORDER BY t.topic_type " . ((!$store_reverse) ? 'DESC' : 'ASC') . ', ' . $sql_sort_order;$result = $db->sql_query_limit($sql, $sql_limit, $sql_start);while ($row = $db->sql_fetchrow($result)){	$topic_list[] = (int) $row['topic_id'];}$db->sql_freeresult($result);// For storing shadow topics$shadow_topic_list = array();if (sizeof($topic_list)){	// SQL array for obtaining topics/stickies	$sql_array = array(		'SELECT'		=> $sql_array['SELECT'],		'FROM'			=> $sql_array['FROM'],		'LEFT_JOIN'		=> $sql_array['LEFT_JOIN'],		'WHERE'			=> $db->sql_in_set('t.topic_id', $topic_list),	);	// If store_reverse, then first obtain topics, then stickies, else the other way around...	// Funnily enough you typically save one query if going from the last page to the middle (store_reverse) because	// the number of stickies are not known	$sql = $db->sql_build_query('SELECT', $sql_array);	$result = $db->sql_query($sql);	while ($row = $db->sql_fetchrow($result))	{		if ($row['topic_status'] == ITEM_MOVED)		{			$shadow_topic_list[$row['topic_moved_id']] = $row['topic_id'];		}		$rowset[$row['topic_id']] = $row;	}	$db->sql_freeresult($result);}// If we have some shadow topics, update the rowset to reflect their topic informationif (sizeof($shadow_topic_list)){	$sql = 'SELECT *		FROM ' . TOPICS_TABLE . '		WHERE ' . $db->sql_in_set('topic_id', array_keys($shadow_topic_list));	$result = $db->sql_query($sql);	while ($row = $db->sql_fetchrow($result))	{		$orig_topic_id = $shadow_topic_list[$row['topic_id']];		// If the shadow topic is already listed within the rowset (happens for active topics for example), then do not include it...		if (isset($rowset[$row['topic_id']]))		{			// We need to remove any trace regarding this topic. :)			unset($rowset[$orig_topic_id]);			unset($topic_list[array_search($orig_topic_id, $topic_list)]);			$topics_count--;			continue;		}		// Do not include those topics the user has no permission to access		if (!$auth->acl_get('f_read', $row['forum_id']))		{			// We need to remove any trace regarding this topic. :)			unset($rowset[$orig_topic_id]);			unset($topic_list[array_search($orig_topic_id, $topic_list)]);			$topics_count--;			continue;		}		// We want to retain some values		$row = array_merge($row, array(			'topic_moved_id'	=> $rowset[$orig_topic_id]['topic_moved_id'],			'topic_status'		=> $rowset[$orig_topic_id]['topic_status'],			'topic_type'		=> $rowset[$orig_topic_id]['topic_type'],			'topic_title'		=> $rowset[$orig_topic_id]['topic_title'],		));		// Shadow topics are never reported		$row['topic_reported'] = 0;		$rowset[$orig_topic_id] = $row;	}	$db->sql_freeresult($result);}unset($shadow_topic_list);// Ok, adjust topics count for active topics listif ($s_display_active){	$topics_count = 1;}// We need to readd the local announcements to the forums total topic count, otherwise the number is different from the one on the forum list$total_topic_count = $topics_count + sizeof($announcement_list) - sizeof($global_announce_list);$template->assign_vars(array(	'PAGINATION'	=> generate_pagination(append_sid("{$phpbb_root_path}viewforum.$phpEx", "f=$forum_id" . ((strlen($u_sort_param)) ? "&amp;$u_sort_param" : '')), $topics_count, $config['topics_per_page'], $start),	'PAGE_NUMBER'	=> on_page($topics_count, $config['topics_per_page'], $start),	'TOTAL_TOPICS'	=> ($s_display_active) ? false : (($total_topic_count == 1) ? $user->lang['VIEW_FORUM_TOPIC'] : sprintf($user->lang['VIEW_FORUM_TOPICS'], $total_topic_count))));$topic_list = ($store_reverse) ? array_merge($announcement_list, array_reverse($topic_list)) : array_merge($announcement_list, $topic_list);$topic_tracking_info = $tracking_topics = array();// Okay, lets dump out the page ...if (sizeof($topic_list)){	$mark_forum_read = true;	$mark_time_forum = 0;	// Active topics?	if ($s_display_active && sizeof($active_forum_ary))	{		// Generate topic forum list...		$topic_forum_list = array();		foreach ($rowset as $t_id => $row)		{			$topic_forum_list[$row['forum_id']]['forum_mark_time'] = ($config['load_db_lastread'] && $user->data['is_registered'] && isset($row['forum_mark_time'])) ? $row['forum_mark_time'] : 0;			$topic_forum_list[$row['forum_id']]['topics'][] = $t_id;		}		if ($config['load_db_lastread'] && $user->data['is_registered'])		{			foreach ($topic_forum_list as $f_id => $topic_row)			{				$topic_tracking_info += get_topic_tracking($f_id, $topic_row['topics'], $rowset, array($f_id => $topic_row['forum_mark_time']), false);			}		}		else if ($config['load_anon_lastread'] || $user->data['is_registered'])		{			foreach ($topic_forum_list as $f_id => $topic_row)			{				$topic_tracking_info += get_complete_topic_tracking($f_id, $topic_row['topics'], false);			}		}		unset($topic_forum_list);	}	else	{		if ($config['load_db_lastread'] && $user->data['is_registered'])		{			$topic_tracking_info = get_topic_tracking($forum_id, $topic_list, $rowset, array($forum_id => $forum_data['mark_time']), $global_announce_list);			$mark_time_forum = (!empty($forum_data['mark_time'])) ? $forum_data['mark_time'] : $user->data['user_lastmark'];		}		else if ($config['load_anon_lastread'] || $user->data['is_registered'])		{			$topic_tracking_info = get_complete_topic_tracking($forum_id, $topic_list, $global_announce_list);			if (!$user->data['is_registered'])			{				$user->data['user_lastmark'] = (isset($tracking_topics['l'])) ? (int) (base_convert($tracking_topics['l'], 36, 10) + $config['board_startdate']) : 0;			}			$mark_time_forum = (isset($tracking_topics['f'][$forum_id])) ? (int) (base_convert($tracking_topics['f'][$forum_id], 36, 10) + $config['board_startdate']) : $user->data['user_lastmark'];		}	}	$s_type_switch = 0;	foreach ($topic_list as $topic_id)	{		$row = &$rowset[$topic_id];		$topic_forum_id = ($row['forum_id']) ? (int) $row['forum_id'] : $forum_id;		// This will allow the style designer to output a different header		// or even separate the list of announcements from sticky and normal topics		$s_type_switch_test = ($row['topic_type'] == POST_ANNOUNCE || $row['topic_type'] == POST_GLOBAL) ? 1 : 0;		// Replies		$replies = ($auth->acl_get('m_approve', $topic_forum_id)) ? $row['topic_replies_real'] : $row['topic_replies'];		if ($row['topic_status'] == ITEM_MOVED)		{			$topic_id = $row['topic_moved_id'];			$unread_topic = false;		}		else		{			$unread_topic = (isset($topic_tracking_info[$topic_id]) && $row['topic_last_post_time'] > $topic_tracking_info[$topic_id]) ? true : false;		}		// Get folder img, topic status/type related information		$folder_img = $folder_alt = $topic_type = '';		topic_status($row, $replies, $unread_topic, $folder_img, $folder_alt, $topic_type);		// Generate all the URIs ...		$view_topic_url_params = 'f=' . $topic_forum_id . '&amp;t=' . $topic_id;		$view_topic_url = append_sid("{$phpbb_root_path}viewtopic.$phpEx", $view_topic_url_params);		$topic_unapproved = (!$row['topic_approved'] && $auth->acl_get('m_approve', $topic_forum_id)) ? true : false;		$posts_unapproved = ($row['topic_approved'] && $row['topic_replies'] < $row['topic_replies_real'] && $auth->acl_get('m_approve', $topic_forum_id)) ? true : false;		$u_mcp_queue = ($topic_unapproved || $posts_unapproved) ? append_sid("{$phpbb_root_path}mcp.$phpEx", 'i=queue&amp;mode=' . (($topic_unapproved) ? 'approve_details' : 'unapproved_posts') . "&amp;t=$topic_id", true, $user->session_id) : '';		// Send vars to template		$template->assign_block_vars('topicrow', array(			'FORUM_ID'					=> $topic_forum_id,			'TOPIC_ID'					=> $topic_id,			'TOPIC_AUTHOR'				=> get_username_string('username', $row['topic_poster'], $row['topic_first_poster_name'], $row['topic_first_poster_colour']),			'TOPIC_AUTHOR_COLOUR'		=> get_username_string('colour', $row['topic_poster'], $row['topic_first_poster_name'], $row['topic_first_poster_colour']),			'TOPIC_AUTHOR_FULL'			=> get_username_string('full', $row['topic_poster'], $row['topic_first_poster_name'], $row['topic_first_poster_colour']),			'FIRST_POST_TIME'			=> $user->format_date($row['topic_time']),			'LAST_POST_SUBJECT'			=> censor_text($row['topic_last_post_subject']),			'LAST_POST_TIME'			=> $user->format_date($row['topic_last_post_time']),			'LAST_VIEW_TIME'			=> $user->format_date($row['topic_last_view_time']),			'LAST_POST_AUTHOR'			=> get_username_string('username', $row['topic_last_poster_id'], $row['topic_last_poster_name'], $row['topic_last_poster_colour']),			'LAST_POST_AUTHOR_COLOUR'	=> get_username_string('colour', $row['topic_last_poster_id'], $row['topic_last_poster_name'], $row['topic_last_poster_colour']),			'LAST_POST_AUTHOR_FULL'		=> get_username_string('full', $row['topic_last_poster_id'], $row['topic_last_poster_name'], $row['topic_last_poster_colour']),			'PAGINATION'		=> topic_generate_pagination($replies, $view_topic_url),			'REPLIES'			=> $replies,			'VIEWS'				=> $row['topic_views'],			'TOPIC_TITLE'		=> censor_text($row['topic_title']),			'TOPIC_TYPE'		=> $topic_type,			'TOPIC_FOLDER_IMG'		=> $user->img($folder_img, $folder_alt),			'TOPIC_FOLDER_IMG_SRC'	=> $user->img($folder_img, $folder_alt, false, '', 'src'),			'TOPIC_FOLDER_IMG_ALT'	=> $user->lang[$folder_alt],			'TOPIC_FOLDER_IMG_WIDTH'=> $user->img($folder_img, '', false, '', 'width'),			'TOPIC_FOLDER_IMG_HEIGHT'	=> $user->img($folder_img, '', false, '', 'height'),			'TOPIC_ICON_IMG'		=> (!empty($icons[$row['icon_id']])) ? $icons[$row['icon_id']]['img'] : '',			'TOPIC_ICON_IMG_WIDTH'	=> (!empty($icons[$row['icon_id']])) ? $icons[$row['icon_id']]['width'] : '',			'TOPIC_ICON_IMG_HEIGHT'	=> (!empty($icons[$row['icon_id']])) ? $icons[$row['icon_id']]['height'] : '',			'ATTACH_ICON_IMG'		=> ($auth->acl_get('u_download') && $auth->acl_get('f_download', $topic_forum_id) && $row['topic_attachment']) ? $user->img('icon_topic_attach', $user->lang['TOTAL_ATTACHMENTS']) : '',			'UNAPPROVED_IMG'		=> ($topic_unapproved || $posts_unapproved) ? $user->img('icon_topic_unapproved', ($topic_unapproved) ? 'TOPIC_UNAPPROVED' : 'POSTS_UNAPPROVED') : '',			'S_TOPIC_TYPE'			=> $row['topic_type'],			'S_USER_POSTED'			=> (isset($row['topic_posted']) && $row['topic_posted']) ? true : false,			'S_UNREAD_TOPIC'		=> $unread_topic,			'S_TOPIC_REPORTED'		=> (!empty($row['topic_reported']) && $auth->acl_get('m_report', $topic_forum_id)) ? true : false,			'S_TOPIC_UNAPPROVED'	=> $topic_unapproved,			'S_POSTS_UNAPPROVED'	=> $posts_unapproved,			'S_HAS_POLL'			=> ($row['poll_start']) ? true : false,			'S_POST_ANNOUNCE'		=> ($row['topic_type'] == POST_ANNOUNCE) ? true : false,			'S_POST_GLOBAL'			=> ($row['topic_type'] == POST_GLOBAL) ? true : false,			'S_POST_STICKY'			=> ($row['topic_type'] == POST_STICKY) ? true : false,			'S_TOPIC_LOCKED'		=> ($row['topic_status'] == ITEM_LOCKED) ? true : false,			'S_TOPIC_MOVED'			=> ($row['topic_status'] == ITEM_MOVED) ? true : false,			'U_NEWEST_POST'			=> append_sid("{$phpbb_root_path}viewtopic.$phpEx", $view_topic_url_params . '&amp;view=unread') . '#unread',			'U_LAST_POST'			=> append_sid("{$phpbb_root_path}viewtopic.$phpEx", $view_topic_url_params . '&amp;p=' . $row['topic_last_post_id']) . '#p' . $row['topic_last_post_id'],			'U_LAST_POST_AUTHOR'	=> get_username_string('profile', $row['topic_last_poster_id'], $row['topic_last_poster_name'], $row['topic_last_poster_colour']),			'U_TOPIC_AUTHOR'		=> get_username_string('profile', $row['topic_poster'], $row['topic_first_poster_name'], $row['topic_first_poster_colour']),			'U_VIEW_TOPIC'			=> $view_topic_url,			'U_MCP_REPORT'			=> append_sid("{$phpbb_root_path}mcp.$phpEx", 'i=reports&amp;mode=reports&amp;f=' . $topic_forum_id . '&amp;t=' . $topic_id, true, $user->session_id),			'U_MCP_QUEUE'			=> $u_mcp_queue,			'S_TOPIC_TYPE_SWITCH'	=> ($s_type_switch == $s_type_switch_test) ? -1 : $s_type_switch_test)		);		$s_type_switch = ($row['topic_type'] == POST_ANNOUNCE || $row['topic_type'] == POST_GLOBAL) ? 1 : 0;		if ($unread_topic)		{			$mark_forum_read = false;		}		unset($rowset[$topic_id]);	}}// This is rather a fudge but it's the best I can think of without requiring information// on all topics (as we do in 2.0.x). It looks for unread or new topics, if it doesn't find// any it updates the forum last read cookie. This requires that the user visit the forum// after reading a topicif ($forum_data['forum_type'] == FORUM_POST && sizeof($topic_list) && $mark_forum_read){	update_forum_tracking_info($forum_id, $forum_data['forum_last_post_time'], false, $mark_time_forum);}page_footer();?>
<?php/**** @package dbal* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @ignore*/if (!defined('IN_PHPBB')){	exit;}include_once($phpbb_root_path . 'includes/db/dbal.' . $phpEx);/*** MySQLi Database Abstraction Layer* mysqli-extension has to be compiled with:* MySQL 4.1+ or MySQL 5.0+* @package dbal*/class dbal_mysqli extends dbal{	var $multi_insert = true;	/**	* Connect to server	*/	function sql_connect($sqlserver, $sqluser, $sqlpassword, $database, $port = false, $persistency = false , $new_link = false)	{		// Mysqli extension supports persistent connection since PHP 5.3.0		$this->persistency = (version_compare(PHP_VERSION, '5.3.0', '>=')) ? $persistency : false;		$this->user = $sqluser;		// If persistent connection, set dbhost to localhost when empty and prepend it with 'p:' prefix		$this->server = ($this->persistency) ? 'p:' . (($sqlserver) ? $sqlserver : 'localhost') : $sqlserver;		$this->dbname = $database;		$port = (!$port) ? NULL : $port;		// If port is set and it is not numeric, most likely mysqli socket is set.		// Try to map it to the $socket parameter.		$socket = NULL;		if ($port)		{			if (is_numeric($port))			{				$port = (int) $port;			}			else			{				$socket = $port;				$port = NULL;			}		}		$this->db_connect_id = @mysqli_connect($this->server, $this->user, $sqlpassword, $this->dbname, $port, $socket);		if ($this->db_connect_id && $this->dbname != '')		{			@mysqli_query($this->db_connect_id, "SET NAMES 'utf8'");			// enforce strict mode on databases that support it			if (version_compare($this->sql_server_info(true), '5.0.2', '>='))			{				$result = @mysqli_query($this->db_connect_id, 'SELECT @@session.sql_mode AS sql_mode');				$row = @mysqli_fetch_assoc($result);				@mysqli_free_result($result);				$modes = array_map('trim', explode(',', $row['sql_mode']));				// TRADITIONAL includes STRICT_ALL_TABLES and STRICT_TRANS_TABLES				if (!in_array('TRADITIONAL', $modes))				{					if (!in_array('STRICT_ALL_TABLES', $modes))					{						$modes[] = 'STRICT_ALL_TABLES';					}					if (!in_array('STRICT_TRANS_TABLES', $modes))					{						$modes[] = 'STRICT_TRANS_TABLES';					}				}				$mode = implode(',', $modes);				@mysqli_query($this->db_connect_id, "SET SESSION sql_mode='{$mode}'");			}			return $this->db_connect_id;		}		return $this->sql_error('');	}	/**	* Version information about used database	* @param bool $use_cache If true, it is safe to retrieve the value from the cache	* @return string sql server version	*/	function sql_server_info($raw = false, $use_cache = true)	{		global $cache;		if (!$use_cache || empty($cache) || ($this->sql_server_version = $cache->get('mysqli_version')) === false)		{			$result = @mysqli_query($this->db_connect_id, 'SELECT VERSION() AS version');			$row = @mysqli_fetch_assoc($result);			@mysqli_free_result($result);			$this->sql_server_version = $row['version'];			if (!empty($cache) && $use_cache)			{				$cache->put('mysqli_version', $this->sql_server_version);			}		}		return ($raw) ? $this->sql_server_version : 'MySQL(i) ' . $this->sql_server_version;	}	/**	* SQL Transaction	* @access private	*/	function _sql_transaction($status = 'begin')	{		switch ($status)		{			case 'begin':				return @mysqli_autocommit($this->db_connect_id, false);			break;			case 'commit':				$result = @mysqli_commit($this->db_connect_id);				@mysqli_autocommit($this->db_connect_id, true);				return $result;			break;			case 'rollback':				$result = @mysqli_rollback($this->db_connect_id);				@mysqli_autocommit($this->db_connect_id, true);				return $result;			break;		}		return true;	}	/**	* Base query method	*	* @param	string	$query		Contains the SQL query which shall be executed	* @param	int		$cache_ttl	Either 0 to avoid caching or the time in seconds which the result shall be kept in cache	* @return	mixed				When casted to bool the returned value returns true on success and false on failure	*	* @access	public	*/	function sql_query($query = '', $cache_ttl = 0)	{		if ($query != '')		{			global $cache;			// EXPLAIN only in extra debug mode			if (defined('DEBUG_EXTRA'))			{				$this->sql_report('start', $query);			}			$this->query_result = ($cache_ttl && method_exists($cache, 'sql_load')) ? $cache->sql_load($query) : false;			$this->sql_add_num_queries($this->query_result);			if ($this->query_result === false)			{				if (($this->query_result = @mysqli_query($this->db_connect_id, $query)) === false)				{					$this->sql_error($query);				}				if (defined('DEBUG_EXTRA'))				{					$this->sql_report('stop', $query);				}				if ($cache_ttl && method_exists($cache, 'sql_save'))				{					$cache->sql_save($query, $this->query_result, $cache_ttl);				}			}			else if (defined('DEBUG_EXTRA'))			{				$this->sql_report('fromcache', $query);			}		}		else		{			return false;		}		return $this->query_result;	}	/**	* Build LIMIT query	*/	function _sql_query_limit($query, $total, $offset = 0, $cache_ttl = 0)	{		$this->query_result = false;		// if $total is set to 0 we do not want to limit the number of rows		if ($total == 0)		{			// MySQL 4.1+ no longer supports -1 in limit queries			$total = '18446744073709551615';		}		$query .= "\n LIMIT " . ((!empty($offset)) ? $offset . ', ' . $total : $total);		return $this->sql_query($query, $cache_ttl);	}	/**	* Return number of affected rows	*/	function sql_affectedrows()	{		return ($this->db_connect_id) ? @mysqli_affected_rows($this->db_connect_id) : false;	}	/**	* Fetch current row	*/	function sql_fetchrow($query_id = false)	{		global $cache;		if ($query_id === false)		{			$query_id = $this->query_result;		}		if (!is_object($query_id) && isset($cache->sql_rowset[$query_id]))		{			return $cache->sql_fetchrow($query_id);		}		if ($query_id !== false)		{			$result = @mysqli_fetch_assoc($query_id);			return $result !== null ? $result : false;		}		return false;	}	/**	* Seek to given row number	* rownum is zero-based	*/	function sql_rowseek($rownum, &$query_id)	{		global $cache;		if ($query_id === false)		{			$query_id = $this->query_result;		}		if (!is_object($query_id) && isset($cache->sql_rowset[$query_id]))		{			return $cache->sql_rowseek($rownum, $query_id);		}		return ($query_id !== false) ? @mysqli_data_seek($query_id, $rownum) : false;	}	/**	* Get last inserted id after insert statement	*/	function sql_nextid()	{		return ($this->db_connect_id) ? @mysqli_insert_id($this->db_connect_id) : false;	}	/**	* Free sql result	*/	function sql_freeresult($query_id = false)	{		global $cache;		if ($query_id === false)		{			$query_id = $this->query_result;		}		if (!is_object($query_id) && isset($cache->sql_rowset[$query_id]))		{			return $cache->sql_freeresult($query_id);		}		return @mysqli_free_result($query_id);	}	/**	* Escape string used in sql query	*/	function sql_escape($msg)	{		return @mysqli_real_escape_string($this->db_connect_id, $msg);	}	/**	* Build LIKE expression	* @access private	*/	function _sql_like_expression($expression)	{		return $expression;	}	/**	* Build db-specific query data	* @access private	*/	function _sql_custom_build($stage, $data)	{		switch ($stage)		{			case 'FROM':				$data = '(' . $data . ')';			break;		}		return $data;	}	/**	* return sql error array	* @access private	*/	function _sql_error()	{		if (!$this->db_connect_id)		{			return array(				'message'	=> @mysqli_connect_error(),				'code'		=> @mysqli_connect_errno()			);		}		return array(			'message'	=> @mysqli_error($this->db_connect_id),			'code'		=> @mysqli_errno($this->db_connect_id)		);	}	/**	* Close sql connection	* @access private	*/	function _sql_close()	{		return @mysqli_close($this->db_connect_id);	}	/**	* Build db-specific report	* @access private	*/	function _sql_report($mode, $query = '')	{		static $test_prof;		// current detection method, might just switch to see the existance of INFORMATION_SCHEMA.PROFILING		if ($test_prof === null)		{			$test_prof = false;			if (strpos(mysqli_get_server_info($this->db_connect_id), 'community') !== false)			{				$ver = mysqli_get_server_version($this->db_connect_id);				if ($ver >= 50037 && $ver < 50100)				{					$test_prof = true;				}			}		}		switch ($mode)		{			case 'start':				$explain_query = $query;				if (preg_match('/UPDATE ([a-z0-9_]+).*?WHERE(.*)/s', $query, $m))				{					$explain_query = 'SELECT * FROM ' . $m[1] . ' WHERE ' . $m[2];				}				else if (preg_match('/DELETE FROM ([a-z0-9_]+).*?WHERE(.*)/s', $query, $m))				{					$explain_query = 'SELECT * FROM ' . $m[1] . ' WHERE ' . $m[2];				}				if (preg_match('/^SELECT/', $explain_query))				{					$html_table = false;					// begin profiling					if ($test_prof)					{						@mysqli_query($this->db_connect_id, 'SET profiling = 1;');					}					if ($result = @mysqli_query($this->db_connect_id, "EXPLAIN $explain_query"))					{						while ($row = @mysqli_fetch_assoc($result))						{							$html_table = $this->sql_report('add_select_row', $query, $html_table, $row);						}					}					@mysqli_free_result($result);					if ($html_table)					{						$this->html_hold .= '</table>';					}					if ($test_prof)					{						$html_table = false;						// get the last profile						if ($result = @mysqli_query($this->db_connect_id, 'SHOW PROFILE ALL;'))						{							$this->html_hold .= '<br />';							while ($row = @mysqli_fetch_assoc($result))							{								// make <unknown> HTML safe								if (!empty($row['Source_function']))								{									$row['Source_function'] = str_replace(array('<', '>'), array('&lt;', '&gt;'), $row['Source_function']);								}								// remove unsupported features								foreach ($row as $key => $val)								{									if ($val === null)									{										unset($row[$key]);									}								}								$html_table = $this->sql_report('add_select_row', $query, $html_table, $row);							}						}						@mysqli_free_result($result);						if ($html_table)						{							$this->html_hold .= '</table>';						}						@mysqli_query($this->db_connect_id, 'SET profiling = 0;');					}				}			break;			case 'fromcache':				$endtime = explode(' ', microtime());				$endtime = $endtime[0] + $endtime[1];				$result = @mysqli_query($this->db_connect_id, $query);				while ($void = @mysqli_fetch_assoc($result))				{					// Take the time spent on parsing rows into account				}				@mysqli_free_result($result);				$splittime = explode(' ', microtime());				$splittime = $splittime[0] + $splittime[1];				$this->sql_report('record_fromcache', $query, $endtime, $splittime);			break;		}	}}?>
<?php/**** @package phpBB3* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**/if (php_sapi_name() != 'cli'){	die("This program must be run from the command line.\n");}//// Security message://// This script is potentially dangerous.// Remove or comment the next line (die(".... ) to enable this script.// Do NOT FORGET to either remove this script or disable it after you have used it.//die("Please read the first lines of this script for instructions on how to enable it");set_time_limit(0);define('IN_PHPBB', true);$phpbb_root_path = '../';$phpEx = substr(strrchr(__FILE__, '.'), 1);echo "Checking for required files\n";download('http://unicode.org/Public/UNIDATA/CaseFolding.txt');echo "\n";/*** Load the CaseFolding table*/echo "Loading CaseFolding\n";$unidata = file_get_contents('CaseFolding.txt');function utf8_chr($cp){    if ($cp > 0xFFFF)    {        return chr(0xF0 | ($cp >> 18)) . chr(0x80 | (($cp >> 12) & 0x3F)) . chr(0x80 | (($cp >> 6) & 0x3F)) . chr(0x80 | ($cp & 0x3F));    }    else if ($cp > 0x7FF)    {        return chr(0xE0 | ($cp >> 12)) . chr(0x80 | (($cp >> 6) & 0x3F)) . chr(0x80 | ($cp & 0x3F));    }    else if ($cp > 0x7F)    {        return chr(0xC0 | ($cp >> 6)) . chr(0x80 | ($cp & 0x3F));    }    else    {        return chr($cp);    }}preg_match_all('/^([0-9A-F]+); ([CFS]); ([0-9A-F]+(?: [0-9A-F]+)*);/im', $unidata, $array, PREG_SET_ORDER);$uniarray = array();foreach ($array as $value){    $uniarray[$value[2]][utf8_chr(hexdec((string)$value[1]))] = implode(array_map('utf8_chr', array_map('hexdec', explode(' ', $value[3]))));}foreach ($uniarray as $idx => $contents){	echo "Writing to case_fold_$idx.$phpEx\n";	$fp = fopen($phpbb_root_path . 'includes/utf/data/case_fold_' . strtolower($idx) . '.' . $phpEx, 'wb');	fwrite($fp, '<?php return ' . my_var_export($contents) . ';');	fclose($fp);}/*** Return a parsable string representation of a variable** This is function is limited to array/strings/integers** @param	mixed	$var		Variable* @return	string				PHP code representing the variable*/function my_var_export($var){	if (is_array($var))	{		$lines = array();		foreach ($var as $k => $v)		{			$lines[] = my_var_export($k) . '=>' . my_var_export($v);		}		return 'array(' . implode(',', $lines) . ')';	}	else if (is_string($var))	{		return "'" . str_replace(array('\\', "'"), array('\\\\', "\\'"), $var) . "'";	}	else	{		return $var;	}}/*** Download a file to the develop/ dir** @param	string	$url		URL of the file to download* @return	void*/function download($url){	global $phpbb_root_path;	if (file_exists($phpbb_root_path . 'develop/' . basename($url)))	{		return;	}	echo 'Downloading from ', $url, ' ';	if (!$fpr = fopen($url, 'rb'))	{		die("Can't download from $url\nPlease download it yourself and put it in the develop/ dir, kthxbai");	}	if (!$fpw = fopen($phpbb_root_path . 'develop/' . basename($url), 'wb'))	{		die("Can't open develop/" . basename($url) . " for output... please check your permissions or something");	}	$i = 0;	$chunk = 32768;	$done = '';	while (!feof($fpr))	{		$i += fwrite($fpw, fread($fpr, $chunk));		echo str_repeat("\x08", strlen($done));		$done = ($i >> 10) . ' KiB';		echo $done;	}	fclose($fpr);	fclose($fpw);	echo "\n";}?>
<?php/**** @package phpBB3* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//***/if (!defined('IN_PHPBB')){	exit;}/*	Ability to simply add own rules by doing three things:		1) Add an appropriate constant		2) Add a new check array to the global_privmsgs_rules variable and the condition array (if one is required)		3) Add a new language variable to ucp.php		The user is then able to select the new rule. It will be checked against and handled as specified.		To add new actions (yes, checks can be added here too) to the rule management, the core code has to be modified.*/define('RULE_IS_LIKE', 1);		// Is Likedefine('RULE_IS_NOT_LIKE', 2);	// Is Not Likedefine('RULE_IS', 3);			// Isdefine('RULE_IS_NOT', 4);		// Is Notdefine('RULE_BEGINS_WITH', 5);	// Begins withdefine('RULE_ENDS_WITH', 6);	// Ends withdefine('RULE_IS_FRIEND', 7);	// Is Frienddefine('RULE_IS_FOE', 8);		// Is Foedefine('RULE_IS_USER', 9);		// Is Userdefine('RULE_IS_GROUP', 10);	// Is In Usergroupdefine('RULE_ANSWERED', 11);	// Answereddefine('RULE_FORWARDED', 12);	// Forwardeddefine('RULE_TO_GROUP', 14);	// Usergroupdefine('RULE_TO_ME', 15);		// Medefine('ACTION_PLACE_INTO_FOLDER', 1);define('ACTION_MARK_AS_READ', 2);define('ACTION_MARK_AS_IMPORTANT', 3);define('ACTION_DELETE_MESSAGE', 4);define('CHECK_SUBJECT', 1);define('CHECK_SENDER', 2);define('CHECK_MESSAGE', 3);define('CHECK_STATUS', 4);define('CHECK_TO', 5);/*** Global private message rules* These rules define what to do if a rule is hit*/$global_privmsgs_rules = array(	CHECK_SUBJECT	=> array(		RULE_IS_LIKE		=> array('check0' => 'message_subject', 'function' => 'preg_match("/" . preg_quote({STRING}, "/") . "/i", {CHECK0})'),		RULE_IS_NOT_LIKE	=> array('check0' => 'message_subject', 'function' => '!(preg_match("/" . preg_quote({STRING}, "/") . "/i", {CHECK0}))'),		RULE_IS				=> array('check0' => 'message_subject', 'function' => '{CHECK0} == {STRING}'),		RULE_IS_NOT			=> array('check0' => 'message_subject', 'function' => '{CHECK0} != {STRING}'),		RULE_BEGINS_WITH	=> array('check0' => 'message_subject', 'function' => 'preg_match("/^" . preg_quote({STRING}, "/") . "/i", {CHECK0})'),		RULE_ENDS_WITH		=> array('check0' => 'message_subject', 'function' => 'preg_match("/" . preg_quote({STRING}, "/") . "$/i", {CHECK0})'),	),	CHECK_SENDER	=> array(		RULE_IS_LIKE		=> array('check0' => 'username', 'function' => 'preg_match("/" . preg_quote({STRING}, "/") . "/i", {CHECK0})'),		RULE_IS_NOT_LIKE	=> array('check0' => 'username', 'function' => '!(preg_match("/" . preg_quote({STRING}, "/") . "/i", {CHECK0}))'),		RULE_IS				=> array('check0' => 'username', 'function' => '{CHECK0} == {STRING}'),		RULE_IS_NOT			=> array('check0' => 'username', 'function' => '{CHECK0} != {STRING}'),		RULE_BEGINS_WITH	=> array('check0' => 'username', 'function' => 'preg_match("/^" . preg_quote({STRING}, "/") . "/i", {CHECK0})'),		RULE_ENDS_WITH		=> array('check0' => 'username', 'function' => 'preg_match("/" . preg_quote({STRING}, "/") . "$/i", {CHECK0})'),		RULE_IS_FRIEND		=> array('check0' => 'friend', 'function' => '{CHECK0} == 1'),		RULE_IS_FOE			=> array('check0' => 'foe', 'function' => '{CHECK0} == 1'),		RULE_IS_USER		=> array('check0' => 'author_id', 'function' => '{CHECK0} == {USER_ID}'),		RULE_IS_GROUP		=> array('check0' => 'author_in_group', 'function' => 'in_array({GROUP_ID}, {CHECK0})'),	),	CHECK_MESSAGE	=> array(		RULE_IS_LIKE		=> array('check0' => 'message_text', 'function' => 'preg_match("/" . preg_quote({STRING}, "/") . "/i", {CHECK0})'),		RULE_IS_NOT_LIKE	=> array('check0' => 'message_text', 'function' => '!(preg_match("/" . preg_quote({STRING}, "/") . "/i", {CHECK0}))'),		RULE_IS				=> array('check0' => 'message_text', 'function' => '{CHECK0} == {STRING}'),		RULE_IS_NOT			=> array('check0' => 'message_text', 'function' => '{CHECK0} != {STRING}'),	),	CHECK_STATUS	=> array(		RULE_ANSWERED		=> array('check0' => 'pm_replied', 'function' => '{CHECK0} == 1'),		RULE_FORWARDED		=> array('check0' => 'pm_forwarded', 'function' => '{CHECK0} == 1'),	),	CHECK_TO		=> array(		RULE_TO_GROUP		=> array('check0' => 'to', 'check1' => 'bcc', 'check2' => 'user_in_group', 'function' => 'in_array("g_" . {CHECK2}, {CHECK0}) || in_array("g_" . {CHECK2}, {CHECK1})'),		RULE_TO_ME			=> array('check0' => 'to', 'check1' => 'bcc', 'function' => 'in_array("u_" . $user_id, {CHECK0}) || in_array("u_" . $user_id, {CHECK1})'),	));/*** This is for defining which condition fields to show for which Rule*/$global_rule_conditions = array(	RULE_IS_LIKE		=> 'text',	RULE_IS_NOT_LIKE	=> 'text',	RULE_IS				=> 'text',	RULE_IS_NOT			=> 'text',	RULE_BEGINS_WITH	=> 'text',	RULE_ENDS_WITH		=> 'text',	RULE_IS_USER		=> 'user',	RULE_IS_GROUP		=> 'group');/*** Get all folder*/function get_folder($user_id, $folder_id = false){	global $db, $user, $template;	global $phpbb_root_path, $phpEx;	$folder = array();	// Get folder information	$sql = 'SELECT folder_id, COUNT(msg_id) as num_messages, SUM(pm_unread) as num_unread		FROM ' . PRIVMSGS_TO_TABLE . "		WHERE user_id = $user_id			AND folder_id <> " . PRIVMSGS_NO_BOX . '		GROUP BY folder_id';	$result = $db->sql_query($sql);	$num_messages = $num_unread = array();	while ($row = $db->sql_fetchrow($result))	{		$num_messages[(int) $row['folder_id']] = $row['num_messages'];		$num_unread[(int) $row['folder_id']] = $row['num_unread'];	}	$db->sql_freeresult($result);	// Make sure the default boxes are defined	$available_folder = array(PRIVMSGS_INBOX, PRIVMSGS_OUTBOX, PRIVMSGS_SENTBOX);	foreach ($available_folder as $default_folder)	{		if (!isset($num_messages[$default_folder]))		{			$num_messages[$default_folder] = 0;		}		if (!isset($num_unread[$default_folder]))		{			$num_unread[$default_folder] = 0;		}	}	// Adjust unread status for outbox	$num_unread[PRIVMSGS_OUTBOX] = $num_messages[PRIVMSGS_OUTBOX];	$folder[PRIVMSGS_INBOX] = array(		'folder_name'		=> $user->lang['PM_INBOX'],		'num_messages'		=> $num_messages[PRIVMSGS_INBOX],		'unread_messages'	=> $num_unread[PRIVMSGS_INBOX]	);	// Custom Folder	$sql = 'SELECT folder_id, folder_name, pm_count		FROM ' . PRIVMSGS_FOLDER_TABLE . "			WHERE user_id = $user_id";	$result = $db->sql_query($sql);	while ($row = $db->sql_fetchrow($result))	{		$folder[$row['folder_id']] = array(			'folder_name'		=> $row['folder_name'],			'num_messages'		=> $row['pm_count'],			'unread_messages'	=> ((isset($num_unread[$row['folder_id']])) ? $num_unread[$row['folder_id']] : 0)		);	}	$db->sql_freeresult($result);	$folder[PRIVMSGS_OUTBOX] = array(		'folder_name'		=> $user->lang['PM_OUTBOX'],		'num_messages'		=> $num_messages[PRIVMSGS_OUTBOX],		'unread_messages'	=> $num_unread[PRIVMSGS_OUTBOX]	);	$folder[PRIVMSGS_SENTBOX] = array(		'folder_name'		=> $user->lang['PM_SENTBOX'],		'num_messages'		=> $num_messages[PRIVMSGS_SENTBOX],		'unread_messages'	=> $num_unread[PRIVMSGS_SENTBOX]	);	// Define Folder Array for template designers (and for making custom folders usable by the template too)	foreach ($folder as $f_id => $folder_ary)	{		$folder_id_name = ($f_id == PRIVMSGS_INBOX) ? 'inbox' : (($f_id == PRIVMSGS_OUTBOX) ? 'outbox' : 'sentbox');		$template->assign_block_vars('folder', array(			'FOLDER_ID'			=> $f_id,			'FOLDER_NAME'		=> $folder_ary['folder_name'],			'NUM_MESSAGES'		=> $folder_ary['num_messages'],			'UNREAD_MESSAGES'	=> $folder_ary['unread_messages'],			'U_FOLDER'			=> ($f_id > 0) ? append_sid("{$phpbb_root_path}ucp.$phpEx", 'i=pm&amp;folder=' . $f_id) : append_sid("{$phpbb_root_path}ucp.$phpEx", 'i=pm&amp;folder=' . $folder_id_name),			'S_CUR_FOLDER'		=> ($f_id === $folder_id) ? true : false,			'S_UNREAD_MESSAGES'	=> ($folder_ary['unread_messages']) ? true : false,			'S_CUSTOM_FOLDER'	=> ($f_id > 0) ? true : false)		);	}	if ($folder_id !== false && !isset($folder[$folder_id]))	{		trigger_error('UNKNOWN_FOLDER');	}	return $folder;}/*** Delete Messages From Sentbox* we are doing this here because this saves us a bunch of checks and queries*/function clean_sentbox($num_sentbox_messages){	global $db, $user, $config;	// Check Message Limit	if ($user->data['message_limit'] && $num_sentbox_messages > $user->data['message_limit'])	{		// Delete old messages		$sql = 'SELECT t.msg_id			FROM ' . PRIVMSGS_TO_TABLE . ' t, ' . PRIVMSGS_TABLE . ' p			WHERE t.msg_id = p.msg_id				AND t.user_id = ' . $user->data['user_id'] . '				AND t.folder_id = ' . PRIVMSGS_SENTBOX . '			ORDER BY p.message_time ASC';		$result = $db->sql_query_limit($sql, ($num_sentbox_messages - $user->data['message_limit']));		$delete_ids = array();		while ($row = $db->sql_fetchrow($result))		{			$delete_ids[] = $row['msg_id'];		}		$db->sql_freeresult($result);		delete_pm($user->data['user_id'], $delete_ids, PRIVMSGS_SENTBOX);	}}/*** Check Rule against Message Information*/function check_rule(&$rules, &$rule_row, &$message_row, $user_id){	global $user, $config;	if (!isset($rules[$rule_row['rule_check']][$rule_row['rule_connection']]))	{		return false;	}	$check_ary = $rules[$rule_row['rule_check']][$rule_row['rule_connection']];	// Replace Check Literals	$evaluate = $check_ary['function'];	$evaluate = preg_replace('/{(CHECK[0-9])}/', '$message_row[$check_ary[strtolower("\1")]]', $evaluate);	// Replace Rule Literals	$evaluate = preg_replace('/{(STRING|USER_ID|GROUP_ID)}/', '$rule_row["rule_" . strtolower("\1")]', $evaluate);	// Evil Statement	$result = false;	eval('$result = (' . $evaluate . ') ? true : false;');	if (!$result)	{		return false;	}	switch ($rule_row['rule_action'])	{		case ACTION_PLACE_INTO_FOLDER:			return array('action' => $rule_row['rule_action'], 'folder_id' => $rule_row['rule_folder_id']);		break;		case ACTION_MARK_AS_READ:		case ACTION_MARK_AS_IMPORTANT:			return array('action' => $rule_row['rule_action'], 'pm_unread' => $message_row['pm_unread'], 'pm_marked' => $message_row['pm_marked']);		break;		case ACTION_DELETE_MESSAGE:			global $db, $auth;			// Check for admins/mods - users are not allowed to remove those messages...			// We do the check here to make sure the data we use is consistent			$sql = 'SELECT user_id, user_type, user_permissions				FROM ' . USERS_TABLE . '				WHERE user_id = ' . (int) $message_row['author_id'];			$result = $db->sql_query($sql);			$userdata = $db->sql_fetchrow($result);			$db->sql_freeresult($result);			$auth2 = new auth();			$auth2->acl($userdata);			if (!$auth2->acl_get('a_') && !$auth2->acl_get('m_') && !$auth2->acl_getf_global('m_'))			{				return array('action' => $rule_row['rule_action'], 'pm_unread' => $message_row['pm_unread'], 'pm_marked' => $message_row['pm_marked']);			}			return false;		break;		default:			return false;	}	return false;}/*** Update user PM count*/function update_pm_counts(){	global $user, $db;	// Update unread count	$sql = 'SELECT COUNT(msg_id) as num_messages		FROM ' . PRIVMSGS_TO_TABLE . '		WHERE pm_unread = 1			AND folder_id <> ' . PRIVMSGS_OUTBOX . '			AND user_id = ' . $user->data['user_id'];	$result = $db->sql_query($sql);	$user->data['user_unread_privmsg'] = (int) $db->sql_fetchfield('num_messages');	$db->sql_freeresult($result);	// Update new pm count	$sql = 'SELECT COUNT(msg_id) as num_messages		FROM ' . PRIVMSGS_TO_TABLE . '		WHERE pm_new = 1			AND folder_id IN (' . PRIVMSGS_NO_BOX . ', ' . PRIVMSGS_HOLD_BOX . ')			AND user_id = ' . $user->data['user_id'];	$result = $db->sql_query($sql);	$user->data['user_new_privmsg'] = (int) $db->sql_fetchfield('num_messages');	$db->sql_freeresult($result);	$db->sql_query('UPDATE ' . USERS_TABLE . ' SET ' . $db->sql_build_array('UPDATE', array(		'user_unread_privmsg'	=> (int) $user->data['user_unread_privmsg'],		'user_new_privmsg'		=> (int) $user->data['user_new_privmsg'],	)) . ' WHERE user_id = ' . $user->data['user_id']);	// Ok, here we need to repair something, other boxes than privmsgs_no_box and privmsgs_hold_box should not carry the pm_new flag.	if (!$user->data['user_new_privmsg'])	{		$sql = 'UPDATE ' . PRIVMSGS_TO_TABLE . '			SET pm_new = 0			WHERE pm_new = 1				AND folder_id NOT IN (' . PRIVMSGS_NO_BOX . ', ' . PRIVMSGS_HOLD_BOX . ')				AND user_id = ' . $user->data['user_id'];		$db->sql_query($sql);	}}/*** Place new messages into appropriate folder*/function place_pm_into_folder(&$global_privmsgs_rules, $release = false){	global $db, $user, $config;	if (!$user->data['user_new_privmsg'])	{		return array('not_moved' => 0, 'removed' => 0);	}	$user_message_rules = (int) $user->data['user_message_rules'];	$user_id = (int) $user->data['user_id'];	$action_ary = $move_into_folder = array();	$num_removed = 0;	// Newly processing on-hold messages	if ($release)	{		$sql = 'UPDATE ' . PRIVMSGS_TO_TABLE . '			SET folder_id = ' . PRIVMSGS_NO_BOX . '			WHERE folder_id = ' . PRIVMSGS_HOLD_BOX . "				AND user_id = $user_id";		$db->sql_query($sql);	}	// Get those messages not yet placed into any box	$retrieve_sql = 'SELECT t.*, p.*, u.username, u.user_id, u.group_id		FROM ' . PRIVMSGS_TO_TABLE . ' t, ' . PRIVMSGS_TABLE . ' p, ' . USERS_TABLE . " u		WHERE t.user_id = $user_id			AND p.author_id = u.user_id			AND t.folder_id = " . PRIVMSGS_NO_BOX . '			AND t.msg_id = p.msg_id';	// Just place into the appropriate arrays if no rules need to be checked	if (!$user_message_rules)	{		$result = $db->sql_query($retrieve_sql);		while ($row = $db->sql_fetchrow($result))		{			$action_ary[$row['msg_id']][] = array('action' => false);		}		$db->sql_freeresult($result);	}	else	{		$user_rules = $zebra = $check_rows = array();		$user_ids = $memberships = array();		// First of all, grab all rules and retrieve friends/foes		$sql = 'SELECT *			FROM ' . PRIVMSGS_RULES_TABLE . "			WHERE user_id = $user_id";		$result = $db->sql_query($sql);		$user_rules = $db->sql_fetchrowset($result);		$db->sql_freeresult($result);		if (sizeof($user_rules))		{			$sql = 'SELECT zebra_id, friend, foe				FROM ' . ZEBRA_TABLE . "				WHERE user_id = $user_id";			$result = $db->sql_query($sql);			while ($row = $db->sql_fetchrow($result))			{				$zebra[$row['zebra_id']] = $row;			}			$db->sql_freeresult($result);		}		// Now build a bare-bone check_row array		$result = $db->sql_query($retrieve_sql);		while ($row = $db->sql_fetchrow($result))		{			$check_rows[] = array_merge($row, array(				'to'				=> explode(':', $row['to_address']),				'bcc'				=> explode(':', $row['bcc_address']),				'friend'			=> (isset($zebra[$row['author_id']])) ? $zebra[$row['author_id']]['friend'] : 0,				'foe'				=> (isset($zebra[$row['author_id']])) ? $zebra[$row['author_id']]['foe'] : 0,				'user_in_group'		=> array($user->data['group_id']),				'author_in_group'	=> array())			);			$user_ids[] = $row['user_id'];		}		$db->sql_freeresult($result);		// Retrieve user memberships		if (sizeof($user_ids))		{			$sql = 'SELECT *				FROM ' . USER_GROUP_TABLE . '				WHERE ' . $db->sql_in_set('user_id', $user_ids) . '					AND user_pending = 0';			$result = $db->sql_query($sql);			while ($row = $db->sql_fetchrow($result))			{				$memberships[$row['user_id']][] = $row['group_id'];			}			$db->sql_freeresult($result);		}		// Now place into the appropriate folder		foreach ($check_rows as $row)		{			// Add membership if set			if (isset($memberships[$row['author_id']]))			{				$row['author_in_group'] = $memberships[$row['user_id']];			}			// Check Rule - this should be very quick since we have all information we need			$is_match = false;			foreach ($user_rules as $rule_row)			{				if (($action = check_rule($global_privmsgs_rules, $rule_row, $row, $user_id)) !== false)				{					$is_match = true;					$action_ary[$row['msg_id']][] = $action;				}			}			if (!$is_match)			{				$action_ary[$row['msg_id']][] = array('action' => false);			}		}		unset($user_rules, $zebra, $check_rows, $user_ids, $memberships);	}	// We place actions into arrays, to save queries.	$sql = $unread_ids = $delete_ids = $important_ids = array();	foreach ($action_ary as $msg_id => $msg_ary)	{		// It is allowed to execute actions more than once, except placing messages into folder		$folder_action = $message_removed = false;		foreach ($msg_ary as $pos => $rule_ary)		{			if ($folder_action && $rule_ary['action'] == ACTION_PLACE_INTO_FOLDER)			{				continue;			}			switch ($rule_ary['action'])			{				case ACTION_PLACE_INTO_FOLDER:					// Folder actions have precedence, so we will remove any other ones					$folder_action = true;					$move_into_folder[(int) $rule_ary['folder_id']][] = $msg_id;				break;				case ACTION_MARK_AS_READ:					if ($rule_ary['pm_unread'])					{						$unread_ids[] = $msg_id;					}				break;				case ACTION_DELETE_MESSAGE:					$delete_ids[] = $msg_id;					$message_removed = true;				break;				case ACTION_MARK_AS_IMPORTANT:					if (!$rule_ary['pm_marked'])					{						$important_ids[] = $msg_id;					}				break;			}		}		// We place this here because it could happen that the messages are doubled if a rule marks a message and then moves it into a specific		// folder. Here we simply move the message into the INBOX if it gets not removed and also not put into a custom folder.		if (!$folder_action && !$message_removed)		{			$move_into_folder[PRIVMSGS_INBOX][] = $msg_id;		}	}	// Do not change the order of processing	// The number of queries needed to be executed here highly depends on the defined rules and are	// only gone through if new messages arrive.	// Delete messages	if (sizeof($delete_ids))	{		$num_removed += sizeof($delete_ids);		delete_pm($user_id, $delete_ids, PRIVMSGS_NO_BOX);	}	// Set messages to Unread	if (sizeof($unread_ids))	{		$sql = 'UPDATE ' . PRIVMSGS_TO_TABLE . '			SET pm_unread = 0			WHERE ' . $db->sql_in_set('msg_id', $unread_ids) . "				AND user_id = $user_id				AND folder_id = " . PRIVMSGS_NO_BOX;		$db->sql_query($sql);	}	// mark messages as important	if (sizeof($important_ids))	{		$sql = 'UPDATE ' . PRIVMSGS_TO_TABLE . '			SET pm_marked = 1 - pm_marked			WHERE folder_id = ' . PRIVMSGS_NO_BOX . "				AND user_id = $user_id				AND " . $db->sql_in_set('msg_id', $important_ids);		$db->sql_query($sql);	}	// Move into folder	$folder = array();	if (sizeof($move_into_folder))	{		// Determine Full Folder Action - we need the move to folder id later eventually		$full_folder_action = ($user->data['user_full_folder'] == FULL_FOLDER_NONE) ? ($config['full_folder_action'] - (FULL_FOLDER_NONE*(-1))) : $user->data['user_full_folder'];		$sql_folder = array_keys($move_into_folder);		if ($full_folder_action >= 0)		{			$sql_folder[] = $full_folder_action;		}		$sql = 'SELECT folder_id, pm_count			FROM ' . PRIVMSGS_FOLDER_TABLE . '			WHERE ' . $db->sql_in_set('folder_id', $sql_folder) . "				AND user_id = $user_id";		$result = $db->sql_query($sql);		while ($row = $db->sql_fetchrow($result))		{			$folder[(int) $row['folder_id']] = (int) $row['pm_count'];		}		$db->sql_freeresult($result);		unset($sql_folder);		if (isset($move_into_folder[PRIVMSGS_INBOX]))		{			$sql = 'SELECT COUNT(msg_id) as num_messages				FROM ' . PRIVMSGS_TO_TABLE . "				WHERE user_id = $user_id					AND folder_id = " . PRIVMSGS_INBOX;			$result = $db->sql_query($sql);			$folder[PRIVMSGS_INBOX] = (int) $db->sql_fetchfield('num_messages');			$db->sql_freeresult($result);		}	}	// Here we have ideally only one folder to move into	foreach ($move_into_folder as $folder_id => $msg_ary)	{		$dest_folder = $folder_id;		$full_folder_action = FULL_FOLDER_NONE;		// Check Message Limit - we calculate with the complete array, most of the time it is one message		// But we are making sure that the other way around works too (more messages in queue than allowed to be stored)		if ($user->data['message_limit'] && $folder[$folder_id] && ($folder[$folder_id] + sizeof($msg_ary)) > $user->data['message_limit'])		{			$full_folder_action = ($user->data['user_full_folder'] == FULL_FOLDER_NONE) ? ($config['full_folder_action'] - (FULL_FOLDER_NONE*(-1))) : $user->data['user_full_folder'];			// If destination folder itself is full...			if ($full_folder_action >= 0 && ($folder[$full_folder_action] + sizeof($msg_ary)) > $user->data['message_limit'])			{				$full_folder_action = $config['full_folder_action'] - (FULL_FOLDER_NONE*(-1));			}			// If Full Folder Action is to move to another folder, we simply adjust the destination folder			if ($full_folder_action >= 0)			{				$dest_folder = $full_folder_action;			}			else if ($full_folder_action == FULL_FOLDER_DELETE)			{				// Delete some messages. NOTE: Ordered by msg_id here instead of message_time!				$sql = 'SELECT msg_id					FROM ' . PRIVMSGS_TO_TABLE . "					WHERE user_id = $user_id						AND folder_id = $dest_folder					ORDER BY msg_id ASC";				$result = $db->sql_query_limit($sql, (($folder[$dest_folder] + sizeof($msg_ary)) - $user->data['message_limit']));				$delete_ids = array();				while ($row = $db->sql_fetchrow($result))				{					$delete_ids[] = $row['msg_id'];				}				$db->sql_freeresult($result);				$num_removed += sizeof($delete_ids);				delete_pm($user_id, $delete_ids, $dest_folder);			}		}		//		if ($full_folder_action == FULL_FOLDER_HOLD)		{			$sql = 'UPDATE ' . PRIVMSGS_TO_TABLE . '				SET folder_id = ' . PRIVMSGS_HOLD_BOX . '				WHERE folder_id = ' . PRIVMSGS_NO_BOX . "					AND user_id = $user_id					AND " . $db->sql_in_set('msg_id', $msg_ary);			$db->sql_query($sql);		}		else		{			$sql = 'UPDATE ' . PRIVMSGS_TO_TABLE . "				SET folder_id = $dest_folder, pm_new = 0				WHERE folder_id = " . PRIVMSGS_NO_BOX . "					AND user_id = $user_id					AND pm_new = 1					AND " . $db->sql_in_set('msg_id', $msg_ary);			$db->sql_query($sql);			if ($dest_folder != PRIVMSGS_INBOX)			{				$sql = 'UPDATE ' . PRIVMSGS_FOLDER_TABLE . '					SET pm_count = pm_count + ' . (int) $db->sql_affectedrows() . "					WHERE folder_id = $dest_folder						AND user_id = $user_id";				$db->sql_query($sql);			}		}	}	if (sizeof($action_ary))	{		// Move from OUTBOX to SENTBOX		// We are not checking any full folder status here... SENTBOX is a special treatment (old messages get deleted)		$sql = 'UPDATE ' . PRIVMSGS_TO_TABLE . '			SET folder_id = ' . PRIVMSGS_SENTBOX . '			WHERE folder_id = ' . PRIVMSGS_OUTBOX . '				AND ' . $db->sql_in_set('msg_id', array_keys($action_ary));		$db->sql_query($sql);	}	// Update new/unread count	update_pm_counts();	// Now check how many messages got not moved...	$sql = 'SELECT COUNT(msg_id) as num_messages		FROM ' . PRIVMSGS_TO_TABLE . "		WHERE user_id = $user_id			AND folder_id = " . PRIVMSGS_HOLD_BOX;	$result = $db->sql_query($sql);	$num_not_moved = (int) $db->sql_fetchfield('num_messages');	$db->sql_freeresult($result);	return array('not_moved' => $num_not_moved, 'removed' => $num_removed);}/*** Move PM from one to another folder*/function move_pm($user_id, $message_limit, $move_msg_ids, $dest_folder, $cur_folder_id){	global $db, $user;	global $phpbb_root_path, $phpEx;	$num_moved = 0;	if (!is_array($move_msg_ids))	{		$move_msg_ids = array($move_msg_ids);	}	if (sizeof($move_msg_ids) && !in_array($dest_folder, array(PRIVMSGS_NO_BOX, PRIVMSGS_OUTBOX, PRIVMSGS_SENTBOX)) &&		!in_array($cur_folder_id, array(PRIVMSGS_NO_BOX, PRIVMSGS_OUTBOX)) && $cur_folder_id != $dest_folder)	{		// We have to check the destination folder ;)		if ($dest_folder != PRIVMSGS_INBOX)		{			$sql = 'SELECT folder_id, folder_name, pm_count				FROM ' . PRIVMSGS_FOLDER_TABLE . "				WHERE folder_id = $dest_folder					AND user_id = $user_id";			$result = $db->sql_query($sql);			$row = $db->sql_fetchrow($result);			$db->sql_freeresult($result);			if (!$row)			{				trigger_error('NOT_AUTHORISED');			}			if ($message_limit && $row['pm_count'] + sizeof($move_msg_ids) > $message_limit)			{				$message = sprintf($user->lang['NOT_ENOUGH_SPACE_FOLDER'], $row['folder_name']) . '<br /><br />';				$message .= sprintf($user->lang['CLICK_RETURN_FOLDER'], '<a href="' . append_sid("{$phpbb_root_path}ucp.$phpEx", 'i=pm&amp;folder=' . $row['folder_id']) . '">', '</a>', $row['folder_name']);				trigger_error($message);			}		}		else		{			$sql = 'SELECT COUNT(msg_id) as num_messages				FROM ' . PRIVMSGS_TO_TABLE . '				WHERE folder_id = ' . PRIVMSGS_INBOX . "					AND user_id = $user_id";			$result = $db->sql_query($sql);			$num_messages = (int) $db->sql_fetchfield('num_messages');			$db->sql_freeresult($result);			if ($message_limit && $num_messages + sizeof($move_msg_ids) > $message_limit)			{				$message = sprintf($user->lang['NOT_ENOUGH_SPACE_FOLDER'], $user->lang['PM_INBOX']) . '<br /><br />';				$message .= sprintf($user->lang['CLICK_RETURN_FOLDER'], '<a href="' . append_sid("{$phpbb_root_path}ucp.$phpEx", 'i=pm&amp;folder=inbox') . '">', '</a>', $user->lang['PM_INBOX']);				trigger_error($message);			}		}		$sql = 'UPDATE ' . PRIVMSGS_TO_TABLE . "			SET folder_id = $dest_folder			WHERE folder_id = $cur_folder_id				AND user_id = $user_id				AND " . $db->sql_in_set('msg_id', $move_msg_ids);		$db->sql_query($sql);		$num_moved = $db->sql_affectedrows();		// Update pm counts		if ($num_moved)		{			if (!in_array($cur_folder_id, array(PRIVMSGS_INBOX, PRIVMSGS_OUTBOX, PRIVMSGS_SENTBOX)))			{				$sql = 'UPDATE ' . PRIVMSGS_FOLDER_TABLE . "					SET pm_count = pm_count - $num_moved					WHERE folder_id = $cur_folder_id						AND user_id = $user_id";				$db->sql_query($sql);			}			if ($dest_folder != PRIVMSGS_INBOX)			{				$sql = 'UPDATE ' . PRIVMSGS_FOLDER_TABLE . "					SET pm_count = pm_count + $num_moved					WHERE folder_id = $dest_folder						AND user_id = $user_id";				$db->sql_query($sql);			}		}	}	else if (in_array($cur_folder_id, array(PRIVMSGS_NO_BOX, PRIVMSGS_OUTBOX)))	{		trigger_error('CANNOT_MOVE_SPECIAL');	}	return $num_moved;}/*** Update unread message status*/function update_unread_status($unread, $msg_id, $user_id, $folder_id){	if (!$unread)	{		return;	}	global $db, $user;	$sql = 'UPDATE ' . PRIVMSGS_TO_TABLE . "		SET pm_unread = 0		WHERE msg_id = $msg_id			AND user_id = $user_id			AND folder_id = $folder_id";	$db->sql_query($sql);	$sql = 'UPDATE ' . USERS_TABLE . "		SET user_unread_privmsg = user_unread_privmsg - 1		WHERE user_id = $user_id";	$db->sql_query($sql);	if ($user->data['user_id'] == $user_id)	{		$user->data['user_unread_privmsg']--;		// Try to cope with previous wrong conversions...		if ($user->data['user_unread_privmsg'] < 0)		{			$sql = 'UPDATE ' . USERS_TABLE . "				SET user_unread_privmsg = 0				WHERE user_id = $user_id";			$db->sql_query($sql);			$user->data['user_unread_privmsg'] = 0;		}	}}/*** Handle all actions possible with marked messages*/function handle_mark_actions($user_id, $mark_action){	global $db, $user, $phpbb_root_path, $phpEx;	$msg_ids		= request_var('marked_msg_id', array(0));	$cur_folder_id	= request_var('cur_folder_id', PRIVMSGS_NO_BOX);	$confirm		= (isset($_POST['confirm'])) ? true : false;	if (!sizeof($msg_ids))	{		return false;	}	switch ($mark_action)	{		case 'mark_important':			$sql = 'UPDATE ' . PRIVMSGS_TO_TABLE . "				SET pm_marked = 1 - pm_marked				WHERE folder_id = $cur_folder_id					AND user_id = $user_id					AND " . $db->sql_in_set('msg_id', $msg_ids);			$db->sql_query($sql);		break;		case 'delete_marked':			global $auth;			if (!$auth->acl_get('u_pm_delete'))			{				trigger_error('NO_AUTH_DELETE_MESSAGE');			}			if (confirm_box(true))			{				delete_pm($user_id, $msg_ids, $cur_folder_id);				$success_msg = (sizeof($msg_ids) == 1) ? 'MESSAGE_DELETED' : 'MESSAGES_DELETED';				$redirect = append_sid("{$phpbb_root_path}ucp.$phpEx", 'i=pm&amp;folder=' . $cur_folder_id);				meta_refresh(3, $redirect);				trigger_error($user->lang[$success_msg] . '<br /><br />' . sprintf($user->lang['RETURN_FOLDER'], '<a href="' . $redirect . '">', '</a>'));			}			else			{				$s_hidden_fields = array(					'cur_folder_id'	=> $cur_folder_id,					'mark_option'	=> 'delete_marked',					'submit_mark'	=> true,					'marked_msg_id'	=> $msg_ids				);				confirm_box(false, 'DELETE_MARKED_PM', build_hidden_fields($s_hidden_fields));			}		break;		default:			return false;	}	return true;}/*** Delete PM(s)*/function delete_pm($user_id, $msg_ids, $folder_id){	global $db, $user, $phpbb_root_path, $phpEx;	$user_id	= (int) $user_id;	$folder_id	= (int) $folder_id;	if (!$user_id)	{		return false;	}	if (!is_array($msg_ids))	{		if (!$msg_ids)		{			return false;		}		$msg_ids = array($msg_ids);	}	if (!sizeof($msg_ids))	{		return false;	}	// Get PM Information for later deleting	$sql = 'SELECT msg_id, pm_unread, pm_new		FROM ' . PRIVMSGS_TO_TABLE . '		WHERE ' . $db->sql_in_set('msg_id', array_map('intval', $msg_ids)) . "			AND folder_id = $folder_id			AND user_id = $user_id";	$result = $db->sql_query($sql);	$delete_rows = array();	$num_unread = $num_new = $num_deleted = 0;	while ($row = $db->sql_fetchrow($result))	{		$num_unread += (int) $row['pm_unread'];		$num_new += (int) $row['pm_new'];		$delete_rows[$row['msg_id']] = 1;	}	$db->sql_freeresult($result);	unset($msg_ids);	if (!sizeof($delete_rows))	{		return false;	}	$db->sql_transaction('begin');	// if no one has read the message yet (meaning it is in users outbox)	// then mark the message as deleted...	if ($folder_id == PRIVMSGS_OUTBOX)	{		// Remove PM from Outbox		$sql = 'DELETE FROM ' . PRIVMSGS_TO_TABLE . "			WHERE user_id = $user_id AND folder_id = " . PRIVMSGS_OUTBOX . '				AND ' . $db->sql_in_set('msg_id', array_keys($delete_rows));		$db->sql_query($sql);		// Update PM Information for safety		$sql = 'UPDATE ' . PRIVMSGS_TABLE . " SET message_text = ''			WHERE " . $db->sql_in_set('msg_id', array_keys($delete_rows));		$db->sql_query($sql);		// Set delete flag for those intended to receive the PM		// We do not remove the message actually, to retain some basic information (sent time for example)		$sql = 'UPDATE ' . PRIVMSGS_TO_TABLE . '			SET pm_deleted = 1			WHERE ' . $db->sql_in_set('msg_id', array_keys($delete_rows));		$db->sql_query($sql);		$num_deleted = $db->sql_affectedrows();	}	else	{		// Delete private message data		$sql = 'DELETE FROM ' . PRIVMSGS_TO_TABLE . "			WHERE user_id = $user_id				AND folder_id = $folder_id				AND " . $db->sql_in_set('msg_id', array_keys($delete_rows));		$db->sql_query($sql);		$num_deleted = $db->sql_affectedrows();	}	// if folder id is user defined folder then decrease pm_count	if (!in_array($folder_id, array(PRIVMSGS_INBOX, PRIVMSGS_OUTBOX, PRIVMSGS_SENTBOX, PRIVMSGS_NO_BOX)))	{		$sql = 'UPDATE ' . PRIVMSGS_FOLDER_TABLE . "			SET pm_count = pm_count - $num_deleted			WHERE folder_id = $folder_id";		$db->sql_query($sql);	}	// Update unread and new status field	if ($num_unread || $num_new)	{		$set_sql = ($num_unread) ? 'user_unread_privmsg = user_unread_privmsg - ' . $num_unread : '';		if ($num_new)		{			$set_sql .= ($set_sql != '') ? ', ' : '';			$set_sql .= 'user_new_privmsg = user_new_privmsg - ' . $num_new;		}		$db->sql_query('UPDATE ' . USERS_TABLE . " SET $set_sql WHERE user_id = $user_id");		$user->data['user_new_privmsg'] -= $num_new;		$user->data['user_unread_privmsg'] -= $num_unread;	}	// Now we have to check which messages we can delete completely	$sql = 'SELECT msg_id		FROM ' . PRIVMSGS_TO_TABLE . '		WHERE ' . $db->sql_in_set('msg_id', array_keys($delete_rows));	$result = $db->sql_query($sql);	while ($row = $db->sql_fetchrow($result))	{		unset($delete_rows[$row['msg_id']]);	}	$db->sql_freeresult($result);	$delete_ids = array_keys($delete_rows);	if (sizeof($delete_ids))	{		// Check if there are any attachments we need to remove		if (!function_exists('delete_attachments'))		{			include($phpbb_root_path . 'includes/functions_admin.' . $phpEx);		}		delete_attachments('message', $delete_ids, false);		$sql = 'DELETE FROM ' . PRIVMSGS_TABLE . '			WHERE ' . $db->sql_in_set('msg_id', $delete_ids);		$db->sql_query($sql);	}	$db->sql_transaction('commit');	return true;}/*** Rebuild message header*/function rebuild_header($check_ary){	global $db;	$address = array();	foreach ($check_ary as $check_type => $address_field)	{		// Split Addresses into users and groups		preg_match_all('/:?(u|g)_([0-9]+):?/', $address_field, $match);		$u = $g = array();		foreach ($match[1] as $id => $type)		{			${$type}[] = (int) $match[2][$id];		}		$_types = array('u', 'g');		foreach ($_types as $type)		{			if (sizeof($$type))			{				foreach ($$type as $id)				{					$address[$type][$id] = $check_type;				}			}		}	}	return $address;}/*** Print out/assign recipient information*/function write_pm_addresses($check_ary, $author_id, $plaintext = false){	global $db, $user, $template, $phpbb_root_path, $phpEx;	$addresses = array();	foreach ($check_ary as $check_type => $address_field)	{		if (!is_array($address_field))		{			// Split Addresses into users and groups			preg_match_all('/:?(u|g)_([0-9]+):?/', $address_field, $match);			$u = $g = array();			foreach ($match[1] as $id => $type)			{				${$type}[] = (int) $match[2][$id];			}		}		else		{			$u = $address_field['u'];			$g = $address_field['g'];		}		$address = array();		if (sizeof($u))		{			$sql = 'SELECT user_id, username, user_colour				FROM ' . USERS_TABLE . '				WHERE ' . $db->sql_in_set('user_id', $u);			$result = $db->sql_query($sql);			while ($row = $db->sql_fetchrow($result))			{				if ($check_type == 'to' || $author_id == $user->data['user_id'] || $row['user_id'] == $user->data['user_id'])				{					if ($plaintext)					{						$address[] = $row['username'];					}					else					{						$address['user'][$row['user_id']] = array('name' => $row['username'], 'colour' => $row['user_colour']);					}				}			}			$db->sql_freeresult($result);		}		if (sizeof($g))		{			if ($plaintext)			{				$sql = 'SELECT group_name, group_type					FROM ' . GROUPS_TABLE . '						WHERE ' . $db->sql_in_set('group_id', $g);				$result = $db->sql_query($sql);				while ($row = $db->sql_fetchrow($result))				{					if ($check_type == 'to' || $author_id == $user->data['user_id'] || $row['user_id'] == $user->data['user_id'])					{						$address[] = ($row['group_type'] == GROUP_SPECIAL) ? $user->lang['G_' . $row['group_name']] : $row['group_name'];					}				}				$db->sql_freeresult($result);			}			else			{				$sql = 'SELECT g.group_id, g.group_name, g.group_colour, g.group_type, ug.user_id					FROM ' . GROUPS_TABLE . ' g, ' . USER_GROUP_TABLE . ' ug						WHERE ' . $db->sql_in_set('g.group_id', $g) . '						AND g.group_id = ug.group_id						AND ug.user_pending = 0';				$result = $db->sql_query($sql);				while ($row = $db->sql_fetchrow($result))				{					if (!isset($address['group'][$row['group_id']]))					{						if ($check_type == 'to' || $author_id == $user->data['user_id'] || $row['user_id'] == $user->data['user_id'])						{							$row['group_name'] = ($row['group_type'] == GROUP_SPECIAL) ? $user->lang['G_' . $row['group_name']] : $row['group_name'];							$address['group'][$row['group_id']] = array('name' => $row['group_name'], 'colour' => $row['group_colour']);						}					}					if (isset($address['user'][$row['user_id']]))					{						$address['user'][$row['user_id']]['in_group'] = $row['group_id'];					}				}				$db->sql_freeresult($result);			}		}		if (sizeof($address) && !$plaintext)		{			$template->assign_var('S_' . strtoupper($check_type) . '_RECIPIENT', true);			foreach ($address as $type => $adr_ary)			{				foreach ($adr_ary as $id => $row)				{					$tpl_ary = array(						'IS_GROUP'	=> ($type == 'group') ? true : false,						'IS_USER'	=> ($type == 'user') ? true : false,						'UG_ID'		=> $id,						'NAME'		=> $row['name'],						'COLOUR'	=> ($row['colour']) ? '#' . $row['colour'] : '',						'TYPE'		=> $type,					);					if ($type == 'user')					{						$tpl_ary = array_merge($tpl_ary, array(							'U_VIEW'		=> get_username_string('profile', $id, $row['name'], $row['colour']),							'NAME_FULL'		=> get_username_string('full', $id, $row['name'], $row['colour']),						));					}					else					{						$tpl_ary = array_merge($tpl_ary, array(							'U_VIEW'		=> append_sid("{$phpbb_root_path}memberlist.$phpEx", 'mode=group&amp;g=' . $id),						));					}					$template->assign_block_vars($check_type . '_recipient', $tpl_ary);				}			}		}		$addresses[$check_type] = $address;	}	return $addresses;}/*** Get folder status*/function get_folder_status($folder_id, $folder){	global $db, $user, $config;	if (isset($folder[$folder_id]))	{		$folder = $folder[$folder_id];	}	else	{		return false;	}	$return = array(		'folder_name'	=> $folder['folder_name'],		'cur'			=> $folder['num_messages'],		'remaining'		=> ($user->data['message_limit']) ? $user->data['message_limit'] - $folder['num_messages'] : 0,		'max'			=> $user->data['message_limit'],		'percent'		=> ($user->data['message_limit']) ? (($user->data['message_limit'] > 0) ? round(($folder['num_messages'] / $user->data['message_limit']) * 100) : 100) : 0,	);	$return['message']	= sprintf($user->lang['FOLDER_STATUS_MSG'], $return['percent'], $return['cur'], $return['max']);	return $return;}//// COMPOSE MESSAGES///*** Submit PM*/function submit_pm($mode, $subject, &$data, $put_in_outbox = true){	global $db, $auth, $config, $phpEx, $template, $user, $phpbb_root_path;	// We do not handle erasing pms here	if ($mode == 'delete')	{		return false;	}	$current_time = time();	// Collect some basic information about which tables and which rows to update/insert	$sql_data = array();	$root_level = 0;	// Recipient Information	$recipients = $to = $bcc = array();	if ($mode != 'edit')	{		// Build Recipient List		// u|g => array($user_id => 'to'|'bcc')		$_types = array('u', 'g');		foreach ($_types as $ug_type)		{			if (isset($data['address_list'][$ug_type]) && sizeof($data['address_list'][$ug_type]))			{				foreach ($data['address_list'][$ug_type] as $id => $field)				{					$id = (int) $id;					// Do not rely on the address list being "valid"					if (!$id || ($ug_type == 'u' && $id == ANONYMOUS))					{						continue;					}					$field = ($field == 'to') ? 'to' : 'bcc';					if ($ug_type == 'u')					{						$recipients[$id] = $field;					}					${$field}[] = $ug_type . '_' . $id;				}			}		}		if (isset($data['address_list']['g']) && sizeof($data['address_list']['g']))		{			// We need to check the PM status of group members (do they want to receive PM's?)			// Only check if not a moderator or admin, since they are allowed to override this user setting			$sql_allow_pm = (!$auth->acl_gets('a_', 'm_') && !$auth->acl_getf_global('m_')) ? ' AND u.user_allow_pm = 1' : '';			$sql = 'SELECT u.user_type, ug.group_id, ug.user_id				FROM ' . USERS_TABLE . ' u, ' . USER_GROUP_TABLE . ' ug				WHERE ' . $db->sql_in_set('ug.group_id', array_keys($data['address_list']['g'])) . '					AND ug.user_pending = 0					AND u.user_id = ug.user_id					AND u.user_type IN (' . USER_NORMAL . ', ' . USER_FOUNDER . ')' .					$sql_allow_pm;			$result = $db->sql_query($sql);			while ($row = $db->sql_fetchrow($result))			{				// Additionally, do not include the sender if he is in the group he wants to send to. ;)				if ($row['user_id'] === $user->data['user_id'])				{					continue;				}				$field = ($data['address_list']['g'][$row['group_id']] == 'to') ? 'to' : 'bcc';				$recipients[$row['user_id']] = $field;			}			$db->sql_freeresult($result);		}		if (!sizeof($recipients))		{			trigger_error('NO_RECIPIENT');		}	}	// First of all make sure the subject are having the correct length.	$subject = truncate_string($subject);	$db->sql_transaction('begin');	$sql = '';	switch ($mode)	{		case 'reply':		case 'quote':			$root_level = ($data['reply_from_root_level']) ? $data['reply_from_root_level'] : $data['reply_from_msg_id'];			// Set message_replied switch for this user			$sql = 'UPDATE ' . PRIVMSGS_TO_TABLE . '				SET pm_replied = 1				WHERE user_id = ' . $data['from_user_id'] . '					AND msg_id = ' . $data['reply_from_msg_id'];		// no break		case 'forward':		case 'post':		case 'quotepost':			$sql_data = array(				'root_level'		=> $root_level,				'author_id'			=> $data['from_user_id'],				'icon_id'			=> $data['icon_id'],				'author_ip'			=> $data['from_user_ip'],				'message_time'		=> $current_time,				'enable_bbcode'		=> $data['enable_bbcode'],				'enable_smilies'	=> $data['enable_smilies'],				'enable_magic_url'	=> $data['enable_urls'],				'enable_sig'		=> $data['enable_sig'],				'message_subject'	=> $subject,				'message_text'		=> $data['message'],				'message_attachment'=> (!empty($data['attachment_data'])) ? 1 : 0,				'bbcode_bitfield'	=> $data['bbcode_bitfield'],				'bbcode_uid'		=> $data['bbcode_uid'],				'to_address'		=> implode(':', $to),				'bcc_address'		=> implode(':', $bcc),				'message_reported'	=> 0,			);		break;		case 'edit':			$sql_data = array(				'icon_id'			=> $data['icon_id'],				'message_edit_time'	=> $current_time,				'enable_bbcode'		=> $data['enable_bbcode'],				'enable_smilies'	=> $data['enable_smilies'],				'enable_magic_url'	=> $data['enable_urls'],				'enable_sig'		=> $data['enable_sig'],				'message_subject'	=> $subject,				'message_text'		=> $data['message'],				'message_attachment'=> (!empty($data['attachment_data'])) ? 1 : 0,				'bbcode_bitfield'	=> $data['bbcode_bitfield'],				'bbcode_uid'		=> $data['bbcode_uid']			);		break;	}	if (sizeof($sql_data))	{		$query = '';		if ($mode == 'post' || $mode == 'reply' || $mode == 'quote' || $mode == 'quotepost' || $mode == 'forward')		{			$db->sql_query('INSERT INTO ' . PRIVMSGS_TABLE . ' ' . $db->sql_build_array('INSERT', $sql_data));			$data['msg_id'] = $db->sql_nextid();		}		else if ($mode == 'edit')		{			$sql = 'UPDATE ' . PRIVMSGS_TABLE . '				SET message_edit_count = message_edit_count + 1, ' . $db->sql_build_array('UPDATE', $sql_data) . '				WHERE msg_id = ' . $data['msg_id'];			$db->sql_query($sql);		}	}	if ($mode != 'edit')	{		if ($sql)		{			$db->sql_query($sql);		}		unset($sql);		$sql_ary = array();		foreach ($recipients as $user_id => $type)		{			$sql_ary[] = array(				'msg_id'		=> (int) $data['msg_id'],				'user_id'		=> (int) $user_id,				'author_id'		=> (int) $data['from_user_id'],				'folder_id'		=> PRIVMSGS_NO_BOX,				'pm_new'		=> 1,				'pm_unread'		=> 1,				'pm_forwarded'	=> ($mode == 'forward') ? 1 : 0			);		}		$db->sql_multi_insert(PRIVMSGS_TO_TABLE, $sql_ary);		$sql = 'UPDATE ' . USERS_TABLE . '			SET user_new_privmsg = user_new_privmsg + 1, user_unread_privmsg = user_unread_privmsg + 1, user_last_privmsg = ' . time() . '			WHERE ' . $db->sql_in_set('user_id', array_keys($recipients));		$db->sql_query($sql);		// Put PM into outbox		if ($put_in_outbox)		{			$db->sql_query('INSERT INTO ' . PRIVMSGS_TO_TABLE . ' ' . $db->sql_build_array('INSERT', array(				'msg_id'		=> (int) $data['msg_id'],				'user_id'		=> (int) $data['from_user_id'],				'author_id'		=> (int) $data['from_user_id'],				'folder_id'		=> PRIVMSGS_OUTBOX,				'pm_new'		=> 0,				'pm_unread'		=> 0,				'pm_forwarded'	=> ($mode == 'forward') ? 1 : 0))			);		}	}	// Set user last post time	if ($mode == 'reply' || $mode == 'quote' || $mode == 'quotepost' || $mode == 'forward' || $mode == 'post')	{		$sql = 'UPDATE ' . USERS_TABLE . "			SET user_lastpost_time = $current_time			WHERE user_id = " . $data['from_user_id'];		$db->sql_query($sql);	}	// Submit Attachments	if (!empty($data['attachment_data']) && $data['msg_id'] && in_array($mode, array('post', 'reply', 'quote', 'quotepost', 'edit', 'forward')))	{		$space_taken = $files_added = 0;		$orphan_rows = array();		foreach ($data['attachment_data'] as $pos => $attach_row)		{			$orphan_rows[(int) $attach_row['attach_id']] = array();		}		if (sizeof($orphan_rows))		{			$sql = 'SELECT attach_id, filesize, physical_filename				FROM ' . ATTACHMENTS_TABLE . '				WHERE ' . $db->sql_in_set('attach_id', array_keys($orphan_rows)) . '					AND in_message = 1					AND is_orphan = 1					AND poster_id = ' . $user->data['user_id'];			$result = $db->sql_query($sql);			$orphan_rows = array();			while ($row = $db->sql_fetchrow($result))			{				$orphan_rows[$row['attach_id']] = $row;			}			$db->sql_freeresult($result);		}		foreach ($data['attachment_data'] as $pos => $attach_row)		{			if ($attach_row['is_orphan'] && !isset($orphan_rows[$attach_row['attach_id']]))			{				continue;			}			if (!$attach_row['is_orphan'])			{				// update entry in db if attachment already stored in db and filespace				$sql = 'UPDATE ' . ATTACHMENTS_TABLE . "					SET attach_comment = '" . $db->sql_escape($attach_row['attach_comment']) . "'					WHERE attach_id = " . (int) $attach_row['attach_id'] . '						AND is_orphan = 0';				$db->sql_query($sql);			}			else			{				// insert attachment into db				if (!@file_exists($phpbb_root_path . $config['upload_path'] . '/' . utf8_basename($orphan_rows[$attach_row['attach_id']]['physical_filename'])))				{					continue;				}				$space_taken += $orphan_rows[$attach_row['attach_id']]['filesize'];				$files_added++;				$attach_sql = array(					'post_msg_id'		=> $data['msg_id'],					'topic_id'			=> 0,					'is_orphan'			=> 0,					'poster_id'			=> $data['from_user_id'],					'attach_comment'	=> $attach_row['attach_comment'],				);				$sql = 'UPDATE ' . ATTACHMENTS_TABLE . ' SET ' . $db->sql_build_array('UPDATE', $attach_sql) . '					WHERE attach_id = ' . $attach_row['attach_id'] . '						AND is_orphan = 1						AND poster_id = ' . $user->data['user_id'];				$db->sql_query($sql);			}		}		if ($space_taken && $files_added)		{			set_config_count('upload_dir_size', $space_taken, true);			set_config_count('num_files', $files_added, true);		}	}	// Delete draft if post was loaded...	$draft_id = request_var('draft_loaded', 0);	if ($draft_id)	{		$sql = 'DELETE FROM ' . DRAFTS_TABLE . "			WHERE draft_id = $draft_id				AND user_id = " . $data['from_user_id'];		$db->sql_query($sql);	}	$db->sql_transaction('commit');	// Send Notifications	if ($mode != 'edit')	{		pm_notification($mode, $data['from_username'], $recipients, $subject, $data['message'], $data['msg_id']);	}	return $data['msg_id'];}/*** PM Notification*/function pm_notification($mode, $author, $recipients, $subject, $message, $msg_id){	global $db, $user, $config, $phpbb_root_path, $phpEx, $auth;	$subject = censor_text($subject);	unset($recipients[ANONYMOUS], $recipients[$user->data['user_id']]);	if (!sizeof($recipients))	{		return;	}	// Get banned User ID's	$sql = 'SELECT ban_userid		FROM ' . BANLIST_TABLE . '		WHERE ' . $db->sql_in_set('ban_userid', array_map('intval', array_keys($recipients))) . '			AND ban_exclude = 0';	$result = $db->sql_query($sql);	while ($row = $db->sql_fetchrow($result))	{		unset($recipients[$row['ban_userid']]);	}	$db->sql_freeresult($result);	if (!sizeof($recipients))	{		return;	}	$sql = 'SELECT user_id, username, user_email, user_lang, user_notify_pm, user_notify_type, user_jabber		FROM ' . USERS_TABLE . '		WHERE ' . $db->sql_in_set('user_id', array_map('intval', array_keys($recipients)));	$result = $db->sql_query($sql);	$msg_list_ary = array();	while ($row = $db->sql_fetchrow($result))	{		if ($row['user_notify_pm'] == 1 && trim($row['user_email']))		{			$msg_list_ary[] = array(				'method'	=> $row['user_notify_type'],				'email'		=> $row['user_email'],				'jabber'	=> $row['user_jabber'],				'name'		=> $row['username'],				'lang'		=> $row['user_lang']			);		}	}	$db->sql_freeresult($result);	if (!sizeof($msg_list_ary))	{		return;	}	include_once($phpbb_root_path . 'includes/functions_messenger.' . $phpEx);	$messenger = new messenger();	foreach ($msg_list_ary as $pos => $addr)	{		$messenger->template('privmsg_notify', $addr['lang']);		$messenger->to($addr['email'], $addr['name']);		$messenger->im($addr['jabber'], $addr['name']);		$messenger->assign_vars(array(			'SUBJECT'		=> htmlspecialchars_decode($subject),			'AUTHOR_NAME'	=> htmlspecialchars_decode($author),			'USERNAME'		=> htmlspecialchars_decode($addr['name']),			'U_INBOX'			=> generate_board_url() . "/ucp.$phpEx?i=pm&folder=inbox",			'U_VIEW_MESSAGE'	=> generate_board_url() . "/ucp.$phpEx?i=pm&mode=view&p=$msg_id",		));		$messenger->send($addr['method']);	}	unset($msg_list_ary);	$messenger->save_queue();	unset($messenger);}/*** Display Message History*/function message_history($msg_id, $user_id, $message_row, $folder, $in_post_mode = false){	global $db, $user, $config, $template, $phpbb_root_path, $phpEx, $auth, $bbcode;	// Select all receipts and the author from the pm we currently view, to only display their pm-history	$sql = 'SELECT author_id, user_id		FROM ' . PRIVMSGS_TO_TABLE . "		WHERE msg_id = $msg_id			AND folder_id <> " . PRIVMSGS_HOLD_BOX;	$result = $db->sql_query($sql);	$recipients = array();	while ($row = $db->sql_fetchrow($result))	{		$recipients[] = (int) $row['user_id'];		$recipients[] = (int) $row['author_id'];	}	$db->sql_freeresult($result);	$recipients = array_unique($recipients);	// Get History Messages (could be newer)	$sql = 'SELECT t.*, p.*, u.*		FROM ' . PRIVMSGS_TABLE . ' p, ' . PRIVMSGS_TO_TABLE . ' t, ' . USERS_TABLE . ' u		WHERE t.msg_id = p.msg_id			AND p.author_id = u.user_id			AND t.folder_id NOT IN (' . PRIVMSGS_NO_BOX . ', ' . PRIVMSGS_HOLD_BOX . ')			AND ' . $db->sql_in_set('t.author_id', $recipients, false, true) . "			AND t.user_id = $user_id";	// We no longer need those.	unset($recipients);	if (!$message_row['root_level'])	{		$sql .= " AND (p.root_level = $msg_id OR (p.root_level = 0 AND p.msg_id = $msg_id))";	}	else	{		$sql .= " AND (p.root_level = " . $message_row['root_level'] . ' OR p.msg_id = ' . $message_row['root_level'] . ')';	}	$sql .= ' ORDER BY p.message_time DESC';	$result = $db->sql_query($sql);	$row = $db->sql_fetchrow($result);	if (!$row)	{		$db->sql_freeresult($result);		return false;	}	$title = $row['message_subject'];	$rowset = array();	$bbcode_bitfield = '';	$folder_url = append_sid("{$phpbb_root_path}ucp.$phpEx", 'i=pm') . '&amp;folder=';	do	{		$folder_id = (int) $row['folder_id'];		$row['folder'][] = (isset($folder[$folder_id])) ? '<a href="' . $folder_url . $folder_id . '">' . $folder[$folder_id]['folder_name'] . '</a>' : $user->lang['UNKNOWN_FOLDER'];		if (isset($rowset[$row['msg_id']]))		{			$rowset[$row['msg_id']]['folder'][] = (isset($folder[$folder_id])) ? '<a href="' . $folder_url . $folder_id . '">' . $folder[$folder_id]['folder_name'] . '</a>' : $user->lang['UNKNOWN_FOLDER'];		}		else		{			$rowset[$row['msg_id']] = $row;			$bbcode_bitfield = $bbcode_bitfield | base64_decode($row['bbcode_bitfield']);		}	}	while ($row = $db->sql_fetchrow($result));	$db->sql_freeresult($result);	if (sizeof($rowset) == 1 && !$in_post_mode)	{		return false;	}	// Instantiate BBCode class	if ((empty($bbcode) || $bbcode === false) && $bbcode_bitfield !== '')	{		if (!class_exists('bbcode'))		{			include($phpbb_root_path . 'includes/bbcode.' . $phpEx);		}		$bbcode = new bbcode(base64_encode($bbcode_bitfield));	}	$title = censor_text($title);	$url = append_sid("{$phpbb_root_path}ucp.$phpEx", 'i=pm');	$next_history_pm = $previous_history_pm = $prev_id = 0;	// Re-order rowset to be able to get the next/prev message rows...	$rowset = array_values($rowset);	for ($i = 0, $size = sizeof($rowset); $i < $size; $i++)	{		$row = &$rowset[$i];		$id = (int) $row['msg_id'];		$author_id	= $row['author_id'];		$folder_id	= (int) $row['folder_id'];		$subject	= $row['message_subject'];		$message	= $row['message_text'];		$message = censor_text($message);		$decoded_message = false;		if ($in_post_mode && $auth->acl_get('u_sendpm') && $author_id != ANONYMOUS)		{			$decoded_message = $message;			decode_message($decoded_message, $row['bbcode_uid']);			$decoded_message = bbcode_nl2br($decoded_message);		}		if ($row['bbcode_bitfield'])		{			$bbcode->bbcode_second_pass($message, $row['bbcode_uid'], $row['bbcode_bitfield']);		}		$message = bbcode_nl2br($message);		$message = smiley_text($message, !$row['enable_smilies']);		$subject = censor_text($subject);		if ($id == $msg_id)		{			$next_history_pm = (isset($rowset[$i + 1])) ? (int) $rowset[$i + 1]['msg_id'] : 0;			$previous_history_pm = $prev_id;		}		$template->assign_block_vars('history_row', array(			'MESSAGE_AUTHOR_QUOTE'		=> (($decoded_message) ? addslashes(get_username_string('username', $author_id, $row['username'], $row['user_colour'], $row['username'])) : ''),			'MESSAGE_AUTHOR_FULL'		=> get_username_string('full', $author_id, $row['username'], $row['user_colour'], $row['username']),			'MESSAGE_AUTHOR_COLOUR'		=> get_username_string('colour', $author_id, $row['username'], $row['user_colour'], $row['username']),			'MESSAGE_AUTHOR'			=> get_username_string('username', $author_id, $row['username'], $row['user_colour'], $row['username']),			'U_MESSAGE_AUTHOR'			=> get_username_string('profile', $author_id, $row['username'], $row['user_colour'], $row['username']),			'SUBJECT'			=> $subject,			'SENT_DATE'			=> $user->format_date($row['message_time']),			'MESSAGE'			=> $message,			'FOLDER'			=> implode(', ', $row['folder']),			'DECODED_MESSAGE'	=> $decoded_message,			'S_CURRENT_MSG'		=> ($row['msg_id'] == $msg_id),			'S_AUTHOR_DELETED'	=> ($author_id == ANONYMOUS) ? true : false,			'S_IN_POST_MODE'	=> $in_post_mode,			'MSG_ID'			=> $row['msg_id'],			'U_VIEW_MESSAGE'	=> "$url&amp;f=$folder_id&amp;p=" . $row['msg_id'],			'U_QUOTE'			=> (!$in_post_mode && $auth->acl_get('u_sendpm') && $author_id != ANONYMOUS) ? "$url&amp;mode=compose&amp;action=quote&amp;f=" . $folder_id . "&amp;p=" . $row['msg_id'] : '',			'U_POST_REPLY_PM'	=> ($author_id != $user->data['user_id'] && $author_id != ANONYMOUS && $auth->acl_get('u_sendpm')) ? "$url&amp;mode=compose&amp;action=reply&amp;f=$folder_id&amp;p=" . $row['msg_id'] : '')		);		unset($rowset[$i]);		$prev_id = $id;	}	$template->assign_vars(array(		'QUOTE_IMG'			=> $user->img('icon_post_quote', $user->lang['REPLY_WITH_QUOTE']),		'HISTORY_TITLE'		=> $title,		'U_VIEW_NEXT_HISTORY'		=> ($next_history_pm) ? "$url&amp;p=" . $next_history_pm : '',		'U_VIEW_PREVIOUS_HISTORY'	=> ($previous_history_pm) ? "$url&amp;p=" . $previous_history_pm : '',	));	return true;}/*** Set correct users max messages in PM folder.* If several group memberships define different amount of messages, the highest will be chosen.*/function set_user_message_limit(){	global $user, $db, $config;	// Get maximum about from user memberships - if it is 0, there is no limit set and we use the maximum value within the config.	$sql = 'SELECT MAX(g.group_message_limit) as max_message_limit		FROM ' . GROUPS_TABLE . ' g, ' . USER_GROUP_TABLE . ' ug		WHERE ug.user_id = ' . $user->data['user_id'] . '			AND ug.user_pending = 0			AND ug.group_id = g.group_id';	$result = $db->sql_query($sql);	$message_limit = (int) $db->sql_fetchfield('max_message_limit');	$db->sql_freeresult($result);	$user->data['message_limit'] = (!$message_limit) ? $config['pm_max_msgs'] : $message_limit;}/*** Generates an array of coloured recipient names from a list of PMs - (groups & users)** @param	array	$pm_by_id	An array of rows from PRIVMSGS_TABLE, keys are the msg_ids.** @return	array				2D Array: array(msg_id => array('username or group string', ...), ...)*								Usernames are generated with {@link get_username_string get_username_string}*								Groups are coloured and have a link to the membership page*/function get_recipient_strings($pm_by_id){	global $db, $phpbb_root_path, $phpEx, $user;	$address_list = $recipient_list = $address = array();	$_types = array('u', 'g');	foreach ($pm_by_id as $message_id => $row)	{		$address[$message_id] = rebuild_header(array('to' => $row['to_address'], 'bcc' => $row['bcc_address']));		foreach ($_types as $ug_type)		{			if (isset($address[$message_id][$ug_type]) && sizeof($address[$message_id][$ug_type]))			{				foreach ($address[$message_id][$ug_type] as $ug_id => $in_to)				{					$recipient_list[$ug_type][$ug_id] = array('name' => $user->lang['NA'], 'colour' => '');				}			}		}	}	foreach ($_types as $ug_type)	{		if (!empty($recipient_list[$ug_type]))		{			if ($ug_type == 'u')			{				$sql = 'SELECT user_id as id, username as name, user_colour as colour					FROM ' . USERS_TABLE . '					WHERE ';			}			else			{				$sql = 'SELECT group_id as id, group_name as name, group_colour as colour, group_type					FROM ' . GROUPS_TABLE . '					WHERE ';			}			$sql .= $db->sql_in_set(($ug_type == 'u') ? 'user_id' : 'group_id', array_map('intval', array_keys($recipient_list[$ug_type])));			$result = $db->sql_query($sql);			while ($row = $db->sql_fetchrow($result))			{				if ($ug_type == 'g')				{					$row['name'] = ($row['group_type'] == GROUP_SPECIAL) ? $user->lang['G_' . $row['name']] : $row['name'];				}				$recipient_list[$ug_type][$row['id']] = array('name' => $row['name'], 'colour' => $row['colour']);			}			$db->sql_freeresult($result);		}	}	foreach ($address as $message_id => $adr_ary)	{		foreach ($adr_ary as $type => $id_ary)		{			foreach ($id_ary as $ug_id => $_id)			{				if ($type == 'u')				{					$address_list[$message_id][] = get_username_string('full', $ug_id, $recipient_list[$type][$ug_id]['name'], $recipient_list[$type][$ug_id]['colour']);				}				else				{					$user_colour = ($recipient_list[$type][$ug_id]['colour']) ? ' style="font-weight: bold; color:#' . $recipient_list[$type][$ug_id]['colour'] . '"' : '';					$link = '<a href="' . append_sid("{$phpbb_root_path}memberlist.$phpEx", 'mode=group&amp;g=' . $ug_id) . '"' . $user_colour . '>';					$address_list[$message_id][] = $link . $recipient_list[$type][$ug_id]['name'] . (($link) ? '</a>' : '');				}			}		}	}	return $address_list;}?>
<?php/***************************************************************************   *                           merge_clean_posts.php   *                            -------------------                          *   begin                : Tuesday, February 25, 2003  *   copyright            : (C) 2003 The phpBB Group         *   email                : support@phpbb.com                            *                                                           *   $Id$ *  ***************************************************************************/ /***************************************************************************   *                                                      *   This program is free software; you can redistribute it and/or modify     *   it under the terms of the GNU General Public License as published by    *   the Free Software Foundation; either version 2 of the License, or   *   (at your option) any later version.                       *  ***************************************************************************/ //// Security message://// This script is potentially dangerous.// Remove or comment the next line (die(".... ) to enable this script.// Do NOT FORGET to either remove this script or disable it after you have used it.//die("Please read the first lines of this script for instructions on how to enable it");@set_time_limit(2400);$db = $dbhost = $dbuser = $dbpasswd = $dbport = $dbname = '';define('IN_PHPBB', 1);define('ANONYMOUS', 1);$phpbb_root_path='./../';include($phpbb_root_path . 'extension.inc');include($phpbb_root_path . 'config.'.$phpEx);include($phpbb_root_path . 'includes/functions.'.$phpEx);require($phpbb_root_path . 'includes/acm/cache_' . $acm_type . '.'.$phpEx);include($phpbb_root_path . 'db/' . $dbms . '.'.$phpEx);$cache = new acm();$db = new sql_db($dbhost, $dbuser, $dbpasswd, $dbname, $dbport, false);// Just Do it (tm) $sql = "RENAME TABLE {$table_prefix}posts TO {$table_prefix}posts_temp";$db->sql_query($sql);$sql = "CREATE TABLE {$table_prefix}posts 	SELECT p.*, pt.post_subject, pt.post_text, pt.post_checksum, pt.bbcode_bitfield, pt.bbcode_uid 		FROM {$table_prefix}posts_temp p, {$table_prefix}posts_text pt 		WHERE pt.post_id = p.post_id";$db->sql_query($sql);switch ($db->sql_layer){	case 'mysql':	case 'mysql4':		$sql = 'ALTER TABLE ' . $table_prefix . 'posts 			ADD PRIMARY KEY (post_id), 			ADD INDEX topic_id (topic_id), 			ADD INDEX poster_ip (poster_ip), 			ADD INDEX post_approved (post_approved), 			MODIFY COLUMN post_id mediumint(8) UNSIGNED NOT NULL auto_increment, 			ADD COLUMN post_encoding varchar(11) DEFAULT \'iso-8859-15\' NOT NULL'; 		break;	case 'mssql':	case 'mssql-odbc':	case 'msaccess':		break;	case 'postgresql':		break;}$db->sql_query($sql);$sql = "UPDATE {$table_prefix}topics SET topic_poster = 1 WHERE topic_poster = 0 OR topic_poster IS NULL";$db->sql_query($sql);$sql = "UPDATE {$table_prefix}topics SET topic_last_poster_id = 1 WHERE topic_last_poster_id = 0 OR topic_last_poster_id IS NULL";$db->sql_query($sql);$sql = "UPDATE {$table_prefix}posts SET poster_id = 1 WHERE poster_id = 0 OR poster_id IS NULL";$db->sql_query($sql);$sql = "UPDATE {$table_prefix}users SET user_id = 1 WHERE user_id = 0";$db->sql_query($sql);$sql = "SELECT t.topic_id 	FROM {$table_prefix}topics t 	LEFT JOIN {$table_prefix}posts p ON p.topic_id = t.topic_id 	WHERE p.topic_id IS NULL";$result = $db->sql_query($sql);if ($row = $db->sql_fetchrow($result)){	$del_sql = '';	do	{		$del_sql .= (($del_sql != '') ? ', ' : '') . $row['topic_id'];	}	while ($row = $db->sql_fetchrow($result));	$sql = "DELETE FROM {$table_prefix}topics 		WHERE topic_id IN ($del_sql)";	$db->sql_query($sql);}$db->sql_freeresult($result);$del_sql = '';$sql = "SELECT topic_id, MIN(post_id) AS first_post_id, MAX(post_id) AS last_post_id, COUNT(post_id) AS total_posts 	FROM {$table_prefix}posts 	GROUP BY topic_id";$result = $db->sql_query($sql);while ($row = $db->sql_fetchrow($result)){	$del_sql .= (($del_sql != '') ? ', ' : '') . $row['topic_id'];	$sql = "UPDATE {$table_prefix}topics 		SET topic_first_post_id = " . $row['first_post_id'] . ", topic_last_post_id = " . $row['last_post_id'] . ", topic_replies = " . ($row['total_posts'] - 1) . "		WHERE topic_id = " . $row['topic_id'];	$db->sql_query($sql);}$db->sql_freeresult($result);$sql = "DELETE FROM {$table_prefix}topics WHERE topic_id NOT IN ($del_sql)";$db->sql_query($sql);$topic_count = $post_count = array();$sql = "SELECT forum_id, COUNT(topic_id) AS topics 	FROM {$table_prefix}topics 	GROUP BY forum_id";$result = $db->sql_query($sql);while ($row = $db->sql_fetchrow($result)){	$topic_count[$row['forum_id']] = $row['topics'];}$db->sql_freeresult($result);$sql = "SELECT forum_id, COUNT(post_id) AS posts  	FROM {$table_prefix}posts 	GROUP BY forum_id";$result = $db->sql_query($sql);while ($row = $db->sql_fetchrow($result)){	$post_count[$row['forum_id']] = $row['posts'];}$db->sql_freeresult($result);switch ($db->sql_layer){	case 'oracle':		$sql = "SELECT f.*, p.post_time, p.post_username, u.username, u.user_id			FROM " . $table_prefix . "forums f, " . $table_prefix . "posts p, " . $table_prefix . "users u			WHERE p.post_id = f.forum_last_post_id(+)				AND u.user_id = p.poster_id(+)";		break;	default:		$sql = "SELECT f.forum_id, p.post_time, p.post_username, u.username, u.user_id			FROM ((" . $table_prefix . "forums f			LEFT JOIN " . $table_prefix . "posts p ON p.post_id = f.forum_last_post_id)			LEFT JOIN " . $table_prefix . "users u ON u.user_id = p.poster_id)";		break;}$result = $db->sql_query($sql);$sql_ary = array();while ($row = $db->sql_fetchrow($result)){	$forum_id = $row['forum_id'];	$sql_ary[] = "UPDATE " . $table_prefix . "forums		SET forum_last_poster_id = " . ((!empty($row['user_id']) && $row['user_id'] != ANONYMOUS) ? $row['user_id'] : ANONYMOUS) . ", forum_last_poster_name = '" . ((!empty($row['user_id']) && $row['user_id'] !=  ANONYMOUS) ? addslashes($row['username']) : addslashes($row['post_username'])) . "', forum_last_post_time = " . $row['post_time'] . ", forum_posts = " . (($post_count[$forum_id]) ? $post_count[$forum_id] : 0) . ", forum_topics = " . (($topic_count[$forum_id]) ? $topic_count[$forum_id] : 0) . " 		WHERE forum_id = $forum_id";	$sql = "SELECT t.topic_id, u.username, u.user_id, u2.username as user2, u2.user_id as id2, p.post_username, p2.post_username AS post_username2, p2.post_time		FROM " . $table_prefix . "topics t, " . $table_prefix . "users u, " . $table_prefix . "posts p, " . $table_prefix . "posts p2, " . $table_prefix . "users u2		WHERE t.forum_id = $forum_id 			AND u.user_id = t.topic_poster 			AND p.post_id = t.topic_first_post_id			AND p2.post_id = t.topic_last_post_id			AND u2.user_id = p2.poster_id";	$result2 = $db->sql_query($sql);	while ($row2 = $db->sql_fetchrow($result2))	{		$sql_ary[] = "UPDATE " . $table_prefix . "topics			SET topic_poster = " . $row2['user_id'] . ", topic_first_poster_name = '" . ((!empty($row2['user_id']) && $row2['user_id'] != ANONYMOUS) ? addslashes($row2['username']) : addslashes($row2['post_username'])) . "', topic_last_poster_id = " . ((!empty($row2['id2']) && $row2['id2'] != ANONYMOUS) ? $row2['id2'] : ANONYMOUS) . ", topic_last_post_time = " . $row2['post_time'] . ", topic_last_poster_name = '" . ((!empty($row2['id2']) && $row2['id2'] !=  ANONYMOUS) ? addslashes($row2['user2']) : addslashes($row2['post_username2'])) . "'			WHERE topic_id = " . $row2['topic_id'];	}	$db->sql_freeresult($result2);	unset($row2);}$db->sql_freeresult($result);foreach ($sql_ary as $sql){	$sql . "<br />";	$db->sql_query($sql);}echo "<p><b>Done</b></p>\n"; ?>
<?php/**** mcp [English]** @package language* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** DO NOT CHANGE*/if (!defined('IN_PHPBB')){	exit;}if (empty($lang) || !is_array($lang)){	$lang = array();}// DEVELOPERS PLEASE NOTE//// All language files should use UTF-8 as their encoding and the files must not contain a BOM.//// Placeholders can now contain order information, e.g. instead of// 'Page %s of %s' you can (and should) write 'Page %1$s of %2$s', this allows// translators to re-order the output of data while ensuring it remains correct//// You do not need this where single placeholders are used, e.g. 'Message %d' is fine// equally where a string contains only two placeholders which are used to wrap text// in a url you again do not need to specify an order e.g., 'Click %sHERE%s' is fine$lang = array_merge($lang, array(	'ACTION'				=> 'Action',	'ACTION_NOTE'			=> 'Action/Note',	'ADD_FEEDBACK'			=> 'Add feedback',	'ADD_FEEDBACK_EXPLAIN'	=> 'If you would like to add a report on this please fill out the following form. Only use plain text; HTML, BBCode, etc. are not permitted.',	'ADD_WARNING'			=> 'Add warning',	'ADD_WARNING_EXPLAIN'	=> 'To send a warning to this user please fill out the following form. Only use plain text; HTML, BBCode, etc. are not permitted.',	'ALL_ENTRIES'			=> 'All entries',	'ALL_NOTES_DELETED'		=> 'Successfully removed all user notes.',	'ALL_REPORTS'			=> 'All reports',	'ALREADY_REPORTED'		=> 'This post has already been reported.',	'ALREADY_REPORTED_PM'	=> 'This private message has already been reported.',	'ALREADY_WARNED'		=> 'A warning has already been issued for this post.',	'APPROVE'				=> 'Approve',	'APPROVE_POST'			=> 'Approve post',	'APPROVE_POST_CONFIRM'	=> 'Are you sure you want to approve this post?',	'APPROVE_POSTS'			=> 'Approve posts',	'APPROVE_POSTS_CONFIRM'	=> 'Are you sure you want to approve the selected posts?',	'CANNOT_MOVE_SAME_FORUM'=> 'You cannot move a topic to the forum its already in.',	'CANNOT_WARN_ANONYMOUS'	=> 'You cannot warn unregistered guest users.',	'CANNOT_WARN_SELF'		=> 'You cannot warn yourself.',	'CAN_LEAVE_BLANK'		=> 'This can be left blank.',	'CHANGE_POSTER'			=> 'Change poster',	'CLOSE_PM_REPORT'		=> 'Close PM report',	'CLOSE_PM_REPORT_CONFIRM'	=> 'Are you sure you want to close the selected PM report?',	'CLOSE_PM_REPORTS'		=> 'Close PM reports',	'CLOSE_PM_REPORTS_CONFIRM'	=> 'Are you sure you want to close the selected PM reports?',	'CLOSE_REPORT'			=> 'Close report',	'CLOSE_REPORT_CONFIRM'	=> 'Are you sure you want to close the selected report?',	'CLOSE_REPORTS'			=> 'Close reports',	'CLOSE_REPORTS_CONFIRM'	=> 'Are you sure you want to close the selected reports?',	'DELETE_PM_REPORT'			=> 'Delete PM report',	'DELETE_PM_REPORT_CONFIRM'	=> 'Are you sure you want to delete the selected PM report?',	'DELETE_PM_REPORTS'			=> 'Delete PM reports',	'DELETE_PM_REPORTS_CONFIRM'	=> 'Are you sure you want to delete the selected PM reports?',	'DELETE_POSTS'				=> 'Delete posts',	'DELETE_POSTS_CONFIRM'		=> 'Are you sure you want to delete these posts?',	'DELETE_POST_CONFIRM'		=> 'Are you sure you want to delete this post?',	'DELETE_REPORT'				=> 'Delete report',	'DELETE_REPORT_CONFIRM'		=> 'Are you sure you want to delete the selected report?',	'DELETE_REPORTS'			=> 'Delete reports',	'DELETE_REPORTS_CONFIRM'	=> 'Are you sure you want to delete the selected reports?',	'DELETE_SHADOW_TOPIC'		=> 'Delete shadow topic',	'DELETE_TOPICS'				=> 'Delete selected topics',	'DELETE_TOPICS_CONFIRM'		=> 'Are you sure you want to delete these topics?',	'DELETE_TOPIC_CONFIRM'		=> 'Are you sure you want to delete this topic?',	'DISAPPROVE'				=> 'Disapprove',	'DISAPPROVE_REASON'			=> 'Reason for disapproval',	'DISAPPROVE_POST'			=> 'Disapprove post',	'DISAPPROVE_POST_CONFIRM'	=> 'Are you sure you want to disapprove this post?',	'DISAPPROVE_POSTS'			=> 'Disapprove posts',	'DISAPPROVE_POSTS_CONFIRM'	=> 'Are you sure you want to disapprove the selected posts?',	'DISPLAY_LOG'				=> 'Display entries from previous',	'DISPLAY_OPTIONS'			=> 'Display options',	'EMPTY_REPORT'					=> 'You must enter a description when selecting this reason.',	'EMPTY_TOPICS_REMOVED_WARNING'	=> 'Please note that one or several topics have been removed from the database because they were or become empty.',	'FEEDBACK'				=> 'Feedback',	'FORK'					=> 'Copy',	'FORK_TOPIC'			=> 'Copy topic',	'FORK_TOPIC_CONFIRM'	=> 'Are you sure you want to copy this topic?',	'FORK_TOPICS'			=> 'Copy selected topics',	'FORK_TOPICS_CONFIRM'	=> 'Are you sure you want to copy the selected topics?',	'FORUM_DESC'			=> 'Description',	'FORUM_NAME'			=> 'Forum name',	'FORUM_NOT_EXIST'		=> 'The forum you selected does not exist.',	'FORUM_NOT_POSTABLE'	=> 'The forum you selected cannot be posted to.',	'FORUM_STATUS'			=> 'Forum status',	'FORUM_STYLE'			=> 'Forum style',	'GLOBAL_ANNOUNCEMENT'	=> 'Global announcement',	'IP_INFO'				=> 'IP address information',	'IPS_POSTED_FROM'		=> 'IP addresses this user has posted from',	'LATEST_LOGS'				=> 'Latest 5 logged actions',	'LATEST_REPORTED'			=> 'Latest 5 reports',	'LATEST_REPORTED_PMS'		=> 'Latest 5 PM reports',	'LATEST_UNAPPROVED'			=> 'Latest 5 posts awaiting approval',	'LATEST_WARNING_TIME'		=> 'Latest warning issued',	'LATEST_WARNINGS'			=> 'Latest 5 warnings',	'LEAVE_SHADOW'				=> 'Leave shadow topic in place',	'LIST_REPORT'				=> '1 report',	'LIST_REPORTS'				=> '%d reports',	'LOCK'						=> 'Lock',	'LOCK_POST_POST'			=> 'Lock post',	'LOCK_POST_POST_CONFIRM'	=> 'Are you sure you want to prevent editing this post?',	'LOCK_POST_POSTS'			=> 'Lock selected posts',	'LOCK_POST_POSTS_CONFIRM'	=> 'Are you sure you want to prevent editing the selected posts?',	'LOCK_TOPIC_CONFIRM'		=> 'Are you sure you want to lock this topic?',	'LOCK_TOPICS'				=> 'Lock selected topics',	'LOCK_TOPICS_CONFIRM'		=> 'Are you sure you want to lock all selected topics?',	'LOGS_CURRENT_TOPIC'		=> 'Currently viewing logs of:',	'LOGIN_EXPLAIN_MCP'			=> 'To moderate this forum you must login.',	'LOGVIEW_VIEWTOPIC'			=> 'View topic',	'LOGVIEW_VIEWLOGS'			=> 'View topic log',	'LOGVIEW_VIEWFORUM'			=> 'View forum',	'LOOKUP_ALL'				=> 'Look up all IPs',	'LOOKUP_IP'					=> 'Look up IP',	'MARKED_NOTES_DELETED'		=> 'Successfully removed all marked user notes.',	'MCP_ADD'						=> 'Add a warning',	'MCP_BAN'					=> 'Banning',	'MCP_BAN_EMAILS'			=> 'Ban e-mails',	'MCP_BAN_IPS'				=> 'Ban IPs',	'MCP_BAN_USERNAMES'			=> 'Ban Usernames',	'MCP_LOGS'						=> 'Moderator logs',	'MCP_LOGS_FRONT'				=> 'Front page',	'MCP_LOGS_FORUM_VIEW'			=> 'Forum logs',	'MCP_LOGS_TOPIC_VIEW'			=> 'Topic logs',	'MCP_MAIN'						=> 'Main',	'MCP_MAIN_FORUM_VIEW'			=> 'View forum',	'MCP_MAIN_FRONT'				=> 'Front page',	'MCP_MAIN_POST_DETAILS'			=> 'Post details',	'MCP_MAIN_TOPIC_VIEW'			=> 'View topic',	'MCP_MAKE_ANNOUNCEMENT'			=> 'Modify to Announcement',	'MCP_MAKE_ANNOUNCEMENT_CONFIRM'	=> 'Are you sure you want to change this topic to an Announcement?',	'MCP_MAKE_ANNOUNCEMENTS'		=> 'Modify to Announcements',	'MCP_MAKE_ANNOUNCEMENTS_CONFIRM'=> 'Are you sure you want to change the selected topics to Announcements?',	'MCP_MAKE_GLOBAL'				=> 'Modify to Global announcement',	'MCP_MAKE_GLOBAL_CONFIRM'		=> 'Are you sure you want to change this topic to a Global announcement?',	'MCP_MAKE_GLOBALS'				=> 'Modify to Global announcements',	'MCP_MAKE_GLOBALS_CONFIRM'		=> 'Are you sure you want to change the selected topics to Global announcements?',	'MCP_MAKE_STICKY'				=> 'Modify to Sticky',	'MCP_MAKE_STICKY_CONFIRM'		=> 'Are you sure you want to change this topic to a Sticky?',	'MCP_MAKE_STICKIES'				=> 'Modify to Stickies',	'MCP_MAKE_STICKIES_CONFIRM'		=> 'Are you sure you want to change the selected topics to Stickies?',	'MCP_MAKE_NORMAL'				=> 'Modify to Standard Topic',	'MCP_MAKE_NORMAL_CONFIRM'		=> 'Are you sure you want to change this topic to a Standard Topic?',	'MCP_MAKE_NORMALS'				=> 'Modify to Standard Topics',	'MCP_MAKE_NORMALS_CONFIRM'		=> 'Are you sure you want to change the selected topics to Standard Topics?',	'MCP_NOTES'						=> 'User notes',	'MCP_NOTES_FRONT'				=> 'Front page',	'MCP_NOTES_USER'				=> 'User details',	'MCP_POST_REPORTS'				=> 'Reports issued on this post',	'MCP_PM_REPORTS'				=> 'Reported PMs',	'MCP_PM_REPORT_DETAILS'			=> 'PM Report details',	'MCP_PM_REPORTS_CLOSED'			=> 'Closed PM reports',	'MCP_PM_REPORTS_CLOSED_EXPLAIN'	=> 'This is a list of all reports about private messages which have previously been resolved.',	'MCP_PM_REPORTS_OPEN'			=> 'Open PM reports',	'MCP_PM_REPORTS_OPEN_EXPLAIN'	=> 'This is a list of all reported private messages which are still to be handled.',	'MCP_REPORTS'					=> 'Reported messages',	'MCP_REPORT_DETAILS'			=> 'Report details',	'MCP_REPORTS_CLOSED'			=> 'Closed reports',	'MCP_REPORTS_CLOSED_EXPLAIN'	=> 'This is a list of all reports about posts which have previously been resolved.',	'MCP_REPORTS_OPEN'				=> 'Open reports',	'MCP_REPORTS_OPEN_EXPLAIN'		=> 'This is a list of all reported posts which are still to be handled.',	'MCP_QUEUE'								=> 'Moderation queue',	'MCP_QUEUE_APPROVE_DETAILS'				=> 'Approve details',	'MCP_QUEUE_UNAPPROVED_POSTS'			=> 'Posts awaiting approval',	'MCP_QUEUE_UNAPPROVED_POSTS_EXPLAIN'	=> 'This is a list of all posts which require approving before they will be visible to users.',	'MCP_QUEUE_UNAPPROVED_TOPICS'			=> 'Topics awaiting approval',	'MCP_QUEUE_UNAPPROVED_TOPICS_EXPLAIN'	=> 'This is a list of all topics which require approving before they will be visible to users.',	'MCP_VIEW_USER'			=> 'View warnings for a specific user',	'MCP_WARN'				=> 'Warnings',	'MCP_WARN_FRONT'		=> 'Front page',	'MCP_WARN_LIST'			=> 'List warnings',	'MCP_WARN_POST'			=> 'Warn for specific post',	'MCP_WARN_USER'			=> 'Warn user',	'MERGE_POSTS_CONFIRM'	=> 'Are you sure you want to move the selected posts?',	'MERGE_TOPIC_EXPLAIN'	=> 'Using the form below you can move selected posts into another topic. The posts will be split from this topic and merged into the other topic. These posts will not be reordered and will appear as if the users posted them to the new topic.<br />Please enter the destination topic id or click on Select topic to search for one.',	'MERGE_TOPIC_ID'		=> 'Destination topic identification number',	'MERGE_TOPICS'			=> 'Merge topics',	'MERGE_TOPICS_CONFIRM'	=> 'Are you sure you want to merge the selected topics?',	'MODERATE_FORUM'		=> 'Moderate forum',	'MODERATE_TOPIC'		=> 'Moderate topic',	'MODERATE_POST'			=> 'Moderate post',	'MOD_OPTIONS'			=> 'Moderator options',	'MORE_INFO'				=> 'Further information',	'MOST_WARNINGS'			=> 'Users with most warnings',	'MOVE_TOPIC_CONFIRM'	=> 'Are you sure you want to move the topic into a new forum?',	'MOVE_TOPICS'			=> 'Move selected topics',	'MOVE_TOPICS_CONFIRM'	=> 'Are you sure you want to move the selected topics into a new forum?',	'NOTIFY_POSTER_APPROVAL'		=> 'Notify poster about approval?',	'NOTIFY_POSTER_DISAPPROVAL'		=> 'Notify poster about disapproval?',	'NOTIFY_USER_WARN'				=> 'Notify user about warning?',	'NOT_MODERATOR'					=> 'You are not a moderator of this forum.',	'NO_DESTINATION_FORUM'			=> 'Please select a forum for destination.',	'NO_DESTINATION_FORUM_FOUND'	=> 'There is no destination forum available.',	'NO_ENTRIES'					=> 'No log entries for this period.',	'NO_FEEDBACK'					=> 'No feedback exists for this user.',	'NO_FINAL_TOPIC_SELECTED'		=> 'You have to select a destination topic for merging posts.',	'NO_MATCHES_FOUND'				=> 'No matches found.',	'NO_POST'						=> 'You have to select a post in order to warn the user for a post.',	'NO_POST_REPORT'				=> 'This post was not reported.',	'NO_POST_SELECTED'				=> 'You must select at least one post to perform this action.',	'NO_REASON_DISAPPROVAL'			=> 'Please give an appropriate reason for disapproval.',	'NO_REPORT'						=> 'No report found',	'NO_REPORTS'					=> 'No reports found',	'NO_REPORT_SELECTED'			=> 'You must select at least one report to perform this action.',	'NO_TOPIC_ICON'					=> 'None',	'NO_TOPIC_SELECTED'				=> 'You must select at least one topic to perform this action.',	'NO_TOPICS_QUEUE'				=> 'There are no topics waiting for approval.',	'ONLY_TOPIC'			=> 'Only topic %s',	'OTHER_USERS'			=> 'Other users posting from this IP',	'PM_REPORT_CLOSED_SUCCESS'	=> 'The selected PM report has been closed successfully.',	'PM_REPORT_DELETED_SUCCESS'	=> 'The selected PM report has been deleted successfully.',	'PM_REPORTED_SUCCESS'		=> 'This private message has been successfully reported.',	'PM_REPORT_TOTAL'			=> 'In total there is <strong>1</strong> PM report to review.',	'PM_REPORTS_CLOSED_SUCCESS'	=> 'The selected PM reports have been closed successfully.',	'PM_REPORTS_DELETED_SUCCESS'=> 'The selected PM reports have been deleted successfully.',	'PM_REPORTS_TOTAL'			=> 'In total there are <strong>%d</strong> PM reports to review.',	'PM_REPORTS_ZERO_TOTAL'		=> 'There are no PM reports to review.',	'PM_REPORT_DETAILS'			=> 'Private message report details',	'POSTER'					=> 'Poster',	'POSTS_APPROVED_SUCCESS'	=> 'The selected posts have been approved.',	'POSTS_DELETED_SUCCESS'		=> 'The selected posts have been successfully removed from the database.',	'POSTS_DISAPPROVED_SUCCESS'	=> 'The selected posts have been disapproved.',	'POSTS_LOCKED_SUCCESS'		=> 'The selected posts have been locked successfully.',	'POSTS_MERGED_SUCCESS'		=> 'The selected posts have been merged.',	'POSTS_UNLOCKED_SUCCESS'	=> 'The selected posts have been unlocked successfully.',	'POSTS_PER_PAGE'			=> 'Posts per page',	'POSTS_PER_PAGE_EXPLAIN'	=> '(Set to 0 to view all posts.)',	'POST_APPROVED_SUCCESS'		=> 'The selected post has been approved.',	'POST_DELETED_SUCCESS'		=> 'The selected post has been successfully removed from the database.',	'POST_DISAPPROVED_SUCCESS'	=> 'The selected post has been disapproved.',	'POST_LOCKED_SUCCESS'		=> 'Post locked successfully.',	'POST_NOT_EXIST'			=> 'The post you requested does not exist.',	'POST_REPORTED_SUCCESS'		=> 'This post has been successfully reported.',	'POST_UNLOCKED_SUCCESS'		=> 'Post unlocked successfully.',	'READ_USERNOTES'			=> 'User notes',	'READ_WARNINGS'				=> 'User warnings',	'REPORTER'					=> 'Reporter',	'REPORTED'					=> 'Reported',	'REPORTED_BY'				=> 'Reported by',	'REPORTED_ON_DATE'			=> 'on',	'REPORTS_CLOSED_SUCCESS'	=> 'The selected reports have been closed successfully.',	'REPORTS_DELETED_SUCCESS'	=> 'The selected reports have been deleted successfully.',	'REPORTS_TOTAL'				=> 'In total there are <strong>%d</strong> reports to review.',	'REPORTS_ZERO_TOTAL'		=> 'There are no reports to review.',	'REPORT_CLOSED'				=> 'This report has already been closed.',	'REPORT_CLOSED_SUCCESS'		=> 'The selected report has been closed successfully.',	'REPORT_DELETED_SUCCESS'	=> 'The selected report has been deleted successfully.',	'REPORT_DETAILS'			=> 'Report details',	'REPORT_MESSAGE'			=> 'Report this message',	'REPORT_MESSAGE_EXPLAIN'	=> 'Use this form to report the selected private message. Reporting should generally be used only if the message breaks forum rules. <strong>Reporting a private message will make its contents visible to all moderators.</strong>',	'REPORT_NOTIFY'				=> 'Notify me',	'REPORT_NOTIFY_EXPLAIN'		=> 'Informs you when your report is dealt with.',	'REPORT_POST_EXPLAIN'		=> 'Use this form to report the selected post to the forum moderators and board administrators. Reporting should generally be used only if the post breaks forum rules.',	'REPORT_REASON'				=> 'Report reason',	'REPORT_TIME'				=> 'Report time',	'REPORT_TOTAL'				=> 'In total there is <strong>1</strong> report to review.',	'RESYNC'					=> 'Resync',	'RETURN_MESSAGE'			=> '%sReturn to the message%s',	'RETURN_NEW_FORUM'			=> '%sGo to the new forum%s',	'RETURN_NEW_TOPIC'			=> '%sGo to the new topic%s',	'RETURN_PM'					=> '%sReturn to the private message%s',	'RETURN_POST'				=> '%sReturn to the post%s',	'RETURN_QUEUE'				=> '%sReturn to the queue%s',	'RETURN_REPORTS'			=> '%sReturn to the reports%s',	'RETURN_TOPIC_SIMPLE'		=> '%sReturn to the topic%s',	'SEARCH_POSTS_BY_USER'				=> 'Search posts by',	'SELECT_ACTION'						=> 'Select desired action',	'SELECT_FORUM_GLOBAL_ANNOUNCEMENT'	=> 'Please select the forum you wish this global announcement to be displayed.',	'SELECT_FORUM_GLOBAL_ANNOUNCEMENTS'	=> 'One or more of the selected topics are global announcements. Please select the forum you wish these to be displayed.',	'SELECT_MERGE'						=> 'Select for merge',	'SELECT_TOPICS_FROM'				=> 'Select topics from',	'SELECT_TOPIC'						=> 'Select topic',	'SELECT_USER'						=> 'Select user',	'SORT_ACTION'						=> 'Log action',	'SORT_DATE'							=> 'Date',	'SORT_IP'							=> 'IP address',	'SORT_WARNINGS'						=> 'Warnings',	'SPLIT_AFTER'						=> 'Split topic from selected post onwards',	'SPLIT_FORUM'						=> 'Forum for new topic',	'SPLIT_POSTS'						=> 'Split selected posts',	'SPLIT_SUBJECT'						=> 'New topic title',	'SPLIT_TOPIC_ALL'					=> 'Split topic from selected posts',	'SPLIT_TOPIC_ALL_CONFIRM'			=> 'Are you sure you want to split this topic?',	'SPLIT_TOPIC_BEYOND'				=> 'Split topic at selected post',	'SPLIT_TOPIC_BEYOND_CONFIRM'		=> 'Are you sure you want to split this topic at the selected post?',	'SPLIT_TOPIC_EXPLAIN'				=> 'Using the form below you can split a topic in two, either by selecting the posts individually or by splitting at a selected post.',	'THIS_PM_IP'				=> 'IP for this private message',	'THIS_POST_IP'				=> 'IP for this post',	'TOPICS_APPROVED_SUCCESS'	=> 'The selected topics have been approved.',	'TOPICS_DELETED_SUCCESS'	=> 'The selected topics have been successfully removed from the database.',	'TOPICS_DISAPPROVED_SUCCESS'=> 'The selected topics have been disapproved.',	'TOPICS_FORKED_SUCCESS'		=> 'The selected topics have been copied successfully.',	'TOPICS_LOCKED_SUCCESS'		=> 'The selected topics have been locked.',	'TOPICS_MOVED_SUCCESS'		=> 'The selected topics have been moved successfully.',	'TOPICS_RESYNC_SUCCESS'		=> 'The selected topics have been resynchronised.',	'TOPICS_TYPE_CHANGED'		=> 'Topic types changed successfully.',	'TOPICS_UNLOCKED_SUCCESS'	=> 'The selected topics have been unlocked.',	'TOPIC_APPROVED_SUCCESS'	=> 'The selected topic has been approved.',	'TOPIC_DELETED_SUCCESS'		=> 'The selected topic has been successfully removed from the database.',	'TOPIC_DISAPPROVED_SUCCESS'	=> 'The selected topic has been disapproved.',	'TOPIC_FORKED_SUCCESS'		=> 'The selected topic has been copied successfully.',	'TOPIC_LOCKED_SUCCESS'		=> 'The selected topic has been locked.',	'TOPIC_MOVED_SUCCESS'		=> 'The selected topic has been moved successfully.',	'TOPIC_NOT_EXIST'			=> 'The topic you selected does not exist.',	'TOPIC_RESYNC_SUCCESS'		=> 'The selected topic has been resynchronised.',	'TOPIC_SPLIT_SUCCESS'		=> 'The selected topic has been split successfully.',	'TOPIC_TIME'				=> 'Topic time',	'TOPIC_TYPE_CHANGED'		=> 'Topic type changed successfully.',	'TOPIC_UNLOCKED_SUCCESS'	=> 'The selected topic has been unlocked.',	'TOTAL_WARNINGS'			=> 'Total Warnings',	'UNAPPROVED_POSTS_TOTAL'		=> 'In total there are <strong>%d</strong> posts waiting for approval.',	'UNAPPROVED_POSTS_ZERO_TOTAL'	=> 'There are no posts waiting for approval.',	'UNAPPROVED_POST_TOTAL'			=> 'In total there is <strong>1</strong> post waiting for approval.',	'UNLOCK'						=> 'Unlock',	'UNLOCK_POST'					=> 'Unlock post',	'UNLOCK_POST_EXPLAIN'			=> 'Allow editing',	'UNLOCK_POST_POST'				=> 'Unlock post',	'UNLOCK_POST_POST_CONFIRM'		=> 'Are you sure you want to allow editing this post?',	'UNLOCK_POST_POSTS'				=> 'Unlock selected posts',	'UNLOCK_POST_POSTS_CONFIRM'		=> 'Are you sure you want to allow editing the selected posts?',	'UNLOCK_TOPIC'					=> 'Unlock topic',	'UNLOCK_TOPIC_CONFIRM'			=> 'Are you sure you want to unlock this topic?',	'UNLOCK_TOPICS'					=> 'Unlock selected topics',	'UNLOCK_TOPICS_CONFIRM'			=> 'Are you sure you want to unlock all selected topics?',	'USER_CANNOT_POST'				=> 'You cannot post in this forum.',	'USER_CANNOT_REPORT'			=> 'You cannot report posts in this forum.',	'USER_FEEDBACK_ADDED'			=> 'User feedback added successfully.',	'USER_WARNING_ADDED'			=> 'User warned successfully.',	'VIEW_DETAILS'			=> 'View details',	'VIEW_PM'				=> 'View private message',	'VIEW_POST'				=> 'View post',	'WARNED_USERS'			=> 'Warned users',	'WARNED_USERS_EXPLAIN'	=> 'This is a list of users with unexpired warnings issued to them.',	'WARNING_PM_BODY'		=> 'The following is a warning which has been issued to you by an administrator or moderator of this site.[quote]%s[/quote]',	'WARNING_PM_SUBJECT'	=> 'Board warning issued',	'WARNING_POST_DEFAULT'	=> 'This is a warning regarding the following post made by you: %s .',	'WARNINGS_ZERO_TOTAL'	=> 'No warnings exist.',	'YOU_SELECTED_TOPIC'	=> 'You selected topic number %d: %s.',	'report_reasons'		=> array(		'TITLE'	=> array(			'WAREZ'		=> 'Warez',			'SPAM'		=> 'Spam',			'OFF_TOPIC'	=> 'Off-topic',			'OTHER'		=> 'Other',		),		'DESCRIPTION' => array(			'WAREZ'		=> 'The message contains links to illegal or pirated software.',			'SPAM'		=> 'The reported message has the only purpose to advertise for a website or another product.',			'OFF_TOPIC'	=> 'The reported message is off topic.',			'OTHER'		=> 'The reported message does not fit into any other category, please use the further information field.',		)	),));?>
<?php/**** @package phpBB3* @version $Id$* @copyright (c) 2006 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License** This file creates new schema files for every database.* The filenames will be prefixed with an underscore to not overwrite the current schema files.** If you overwrite the original schema files please make sure you save the file with UNIX linefeeds.*/$schema_path = dirname(__FILE__) . '/../install/schemas/';if (!is_writable($schema_path)){	die('Schema path not writable');}$schema_data = get_schema_struct();$dbms_type_map = array(	'mysql_41'	=> array(		'INT:'		=> 'int(%d)',		'BINT'		=> 'bigint(20)',		'UINT'		=> 'mediumint(8) UNSIGNED',		'UINT:'		=> 'int(%d) UNSIGNED',		'TINT:'		=> 'tinyint(%d)',		'USINT'		=> 'smallint(4) UNSIGNED',		'BOOL'		=> 'tinyint(1) UNSIGNED',		'VCHAR'		=> 'varchar(255)',		'VCHAR:'	=> 'varchar(%d)',		'CHAR:'		=> 'char(%d)',		'XSTEXT'	=> 'text',		'XSTEXT_UNI'=> 'varchar(100)',		'STEXT'		=> 'text',		'STEXT_UNI'	=> 'varchar(255)',		'TEXT'		=> 'text',		'TEXT_UNI'	=> 'text',		'MTEXT'		=> 'mediumtext',		'MTEXT_UNI'	=> 'mediumtext',		'TIMESTAMP'	=> 'int(11) UNSIGNED',		'DECIMAL'	=> 'decimal(5,2)',		'DECIMAL:'	=> 'decimal(%d,2)',		'PDECIMAL'	=> 'decimal(6,3)',		'PDECIMAL:'	=> 'decimal(%d,3)',		'VCHAR_UNI'	=> 'varchar(255)',		'VCHAR_UNI:'=> 'varchar(%d)',		'VCHAR_CI'	=> 'varchar(255)',		'VARBINARY'	=> 'varbinary(255)',	),	'mysql_40'	=> array(		'INT:'		=> 'int(%d)',		'BINT'		=> 'bigint(20)',		'UINT'		=> 'mediumint(8) UNSIGNED',		'UINT:'		=> 'int(%d) UNSIGNED',		'TINT:'		=> 'tinyint(%d)',		'USINT'		=> 'smallint(4) UNSIGNED',		'BOOL'		=> 'tinyint(1) UNSIGNED',		'VCHAR'		=> 'varbinary(255)',		'VCHAR:'	=> 'varbinary(%d)',		'CHAR:'		=> 'binary(%d)',		'XSTEXT'	=> 'blob',		'XSTEXT_UNI'=> 'blob',		'STEXT'		=> 'blob',		'STEXT_UNI'	=> 'blob',		'TEXT'		=> 'blob',		'TEXT_UNI'	=> 'blob',		'MTEXT'		=> 'mediumblob',		'MTEXT_UNI'	=> 'mediumblob',		'TIMESTAMP'	=> 'int(11) UNSIGNED',		'DECIMAL'	=> 'decimal(5,2)',		'DECIMAL:'	=> 'decimal(%d,2)',		'PDECIMAL'	=> 'decimal(6,3)',		'PDECIMAL:'	=> 'decimal(%d,3)',		'VCHAR_UNI'	=> 'blob',		'VCHAR_UNI:'=> array('varbinary(%d)', 'limit' => array('mult', 3, 255, 'blob')),		'VCHAR_CI'	=> 'blob',		'VARBINARY'	=> 'varbinary(255)',	),	'firebird'	=> array(		'INT:'		=> 'INTEGER',		'BINT'		=> 'DOUBLE PRECISION',		'UINT'		=> 'INTEGER',		'UINT:'		=> 'INTEGER',		'TINT:'		=> 'INTEGER',		'USINT'		=> 'INTEGER',		'BOOL'		=> 'INTEGER',		'VCHAR'		=> 'VARCHAR(255) CHARACTER SET NONE',		'VCHAR:'	=> 'VARCHAR(%d) CHARACTER SET NONE',		'CHAR:'		=> 'CHAR(%d) CHARACTER SET NONE',		'XSTEXT'	=> 'BLOB SUB_TYPE TEXT CHARACTER SET NONE',		'STEXT'		=> 'BLOB SUB_TYPE TEXT CHARACTER SET NONE',		'TEXT'		=> 'BLOB SUB_TYPE TEXT CHARACTER SET NONE',		'MTEXT'		=> 'BLOB SUB_TYPE TEXT CHARACTER SET NONE',		'XSTEXT_UNI'=> 'VARCHAR(100) CHARACTER SET UTF8',		'STEXT_UNI'	=> 'VARCHAR(255) CHARACTER SET UTF8',		'TEXT_UNI'	=> 'BLOB SUB_TYPE TEXT CHARACTER SET UTF8',		'MTEXT_UNI'	=> 'BLOB SUB_TYPE TEXT CHARACTER SET UTF8',		'TIMESTAMP'	=> 'INTEGER',		'DECIMAL'	=> 'DOUBLE PRECISION',		'DECIMAL:'	=> 'DOUBLE PRECISION',		'PDECIMAL'	=> 'DOUBLE PRECISION',		'PDECIMAL:'	=> 'DOUBLE PRECISION',		'VCHAR_UNI'	=> 'VARCHAR(255) CHARACTER SET UTF8',		'VCHAR_UNI:'=> 'VARCHAR(%d) CHARACTER SET UTF8',		'VCHAR_CI'	=> 'VARCHAR(255) CHARACTER SET UTF8',		'VARBINARY'	=> 'CHAR(255) CHARACTER SET NONE',	),	'mssql'		=> array(		'INT:'		=> '[int]',		'BINT'		=> '[float]',		'UINT'		=> '[int]',		'UINT:'		=> '[int]',		'TINT:'		=> '[int]',		'USINT'		=> '[int]',		'BOOL'		=> '[int]',		'VCHAR'		=> '[varchar] (255)',		'VCHAR:'	=> '[varchar] (%d)',		'CHAR:'		=> '[char] (%d)',		'XSTEXT'	=> '[varchar] (1000)',		'STEXT'		=> '[varchar] (3000)',		'TEXT'		=> '[varchar] (8000)',		'MTEXT'		=> '[text]',		'XSTEXT_UNI'=> '[varchar] (100)',		'STEXT_UNI'	=> '[varchar] (255)',		'TEXT_UNI'	=> '[varchar] (4000)',		'MTEXT_UNI'	=> '[text]',		'TIMESTAMP'	=> '[int]',		'DECIMAL'	=> '[float]',		'DECIMAL:'	=> '[float]',		'PDECIMAL'	=> '[float]',		'PDECIMAL:'	=> '[float]',		'VCHAR_UNI'	=> '[varchar] (255)',		'VCHAR_UNI:'=> '[varchar] (%d)',		'VCHAR_CI'	=> '[varchar] (255)',		'VARBINARY'	=> '[varchar] (255)',	),	'oracle'	=> array(		'INT:'		=> 'number(%d)',		'BINT'		=> 'number(20)',		'UINT'		=> 'number(8)',		'UINT:'		=> 'number(%d)',		'TINT:'		=> 'number(%d)',		'USINT'		=> 'number(4)',		'BOOL'		=> 'number(1)',		'VCHAR'		=> 'varchar2(255)',		'VCHAR:'	=> 'varchar2(%d)',		'CHAR:'		=> 'char(%d)',		'XSTEXT'	=> 'varchar2(1000)',		'STEXT'		=> 'varchar2(3000)',		'TEXT'		=> 'clob',		'MTEXT'		=> 'clob',		'XSTEXT_UNI'=> 'varchar2(300)',		'STEXT_UNI'	=> 'varchar2(765)',		'TEXT_UNI'	=> 'clob',		'MTEXT_UNI'	=> 'clob',		'TIMESTAMP'	=> 'number(11)',		'DECIMAL'	=> 'number(5, 2)',		'DECIMAL:'	=> 'number(%d, 2)',		'PDECIMAL'	=> 'number(6, 3)',		'PDECIMAL:'	=> 'number(%d, 3)',		'VCHAR_UNI'	=> 'varchar2(765)',		'VCHAR_UNI:'=> array('varchar2(%d)', 'limit' => array('mult', 3, 765, 'clob')),		'VCHAR_CI'	=> 'varchar2(255)',		'VARBINARY'	=> 'raw(255)',	),	'sqlite'	=> array(		'INT:'		=> 'int(%d)',		'BINT'		=> 'bigint(20)',		'UINT'		=> 'INTEGER UNSIGNED', //'mediumint(8) UNSIGNED',		'UINT:'		=> 'INTEGER UNSIGNED', // 'int(%d) UNSIGNED',		'TINT:'		=> 'tinyint(%d)',		'USINT'		=> 'INTEGER UNSIGNED', //'mediumint(4) UNSIGNED',		'BOOL'		=> 'INTEGER UNSIGNED', //'tinyint(1) UNSIGNED',		'VCHAR'		=> 'varchar(255)',		'VCHAR:'	=> 'varchar(%d)',		'CHAR:'		=> 'char(%d)',		'XSTEXT'	=> 'text(65535)',		'STEXT'		=> 'text(65535)',		'TEXT'		=> 'text(65535)',		'MTEXT'		=> 'mediumtext(16777215)',		'XSTEXT_UNI'=> 'text(65535)',		'STEXT_UNI'	=> 'text(65535)',		'TEXT_UNI'	=> 'text(65535)',		'MTEXT_UNI'	=> 'mediumtext(16777215)',		'TIMESTAMP'	=> 'INTEGER UNSIGNED', //'int(11) UNSIGNED',		'DECIMAL'	=> 'decimal(5,2)',		'DECIMAL:'	=> 'decimal(%d,2)',		'PDECIMAL'	=> 'decimal(6,3)',		'PDECIMAL:'	=> 'decimal(%d,3)',		'VCHAR_UNI'	=> 'varchar(255)',		'VCHAR_UNI:'=> 'varchar(%d)',		'VCHAR_CI'	=> 'varchar(255)',		'VARBINARY'	=> 'blob',	),	'postgres'	=> array(		'INT:'		=> 'INT4',		'BINT'		=> 'INT8',		'UINT'		=> 'INT4', // unsigned		'UINT:'		=> 'INT4', // unsigned		'USINT'		=> 'INT2', // unsigned		'BOOL'		=> 'INT2', // unsigned		'TINT:'		=> 'INT2',		'VCHAR'		=> 'varchar(255)',		'VCHAR:'	=> 'varchar(%d)',		'CHAR:'		=> 'char(%d)',		'XSTEXT'	=> 'varchar(1000)',		'STEXT'		=> 'varchar(3000)',		'TEXT'		=> 'varchar(8000)',		'MTEXT'		=> 'TEXT',		'XSTEXT_UNI'=> 'varchar(100)',		'STEXT_UNI'	=> 'varchar(255)',		'TEXT_UNI'	=> 'varchar(4000)',		'MTEXT_UNI'	=> 'TEXT',		'TIMESTAMP'	=> 'INT4', // unsigned		'DECIMAL'	=> 'decimal(5,2)',		'DECIMAL:'	=> 'decimal(%d,2)',		'PDECIMAL'	=> 'decimal(6,3)',		'PDECIMAL:'	=> 'decimal(%d,3)',		'VCHAR_UNI'	=> 'varchar(255)',		'VCHAR_UNI:'=> 'varchar(%d)',		'VCHAR_CI'	=> 'varchar_ci',		'VARBINARY'	=> 'bytea',	),);// A list of types being unsigned for better reference in some db's$unsigned_types = array('UINT', 'UINT:', 'USINT', 'BOOL', 'TIMESTAMP');$supported_dbms = array('firebird', 'mssql', 'mysql_40', 'mysql_41', 'oracle', 'postgres', 'sqlite');foreach ($supported_dbms as $dbms){	$fp = fopen($schema_path . $dbms . '_schema.sql', 'wt');	$line = '';	// Write Header	switch ($dbms)	{		case 'mysql_40':		case 'mysql_41':		case 'firebird':		case 'sqlite':			fwrite($fp, "# DO NOT EDIT THIS FILE, IT IS GENERATED\n");			fwrite($fp, "#\n");			fwrite($fp, "# To change the contents of this file, edit\n");			fwrite($fp, "# phpBB/develop/create_schema_files.php and\n");			fwrite($fp, "# run it.\n");		break;		case 'mssql':		case 'oracle':		case 'postgres':			fwrite($fp, "/*\n");			fwrite($fp, " * DO NOT EDIT THIS FILE, IT IS GENERATED\n");			fwrite($fp, " *\n");			fwrite($fp, " * To change the contents of this file, edit\n");			fwrite($fp, " * phpBB/develop/create_schema_files.php and\n");			fwrite($fp, " * run it.\n");			fwrite($fp, " */\n\n");		break;	}	switch ($dbms)	{		case 'firebird':			$line .= custom_data('firebird') . "\n";		break;		case 'sqlite':			$line .= "BEGIN TRANSACTION;\n\n";		break;		case 'oracle':			$line .= custom_data('oracle') . "\n";		break;		case 'postgres':			$line .= "BEGIN;\n\n";			$line .= custom_data('postgres') . "\n";		break;	}	fwrite($fp, $line);	foreach ($schema_data as $table_name => $table_data)	{		// Write comment about table		switch ($dbms)		{			case 'mysql_40':			case 'mysql_41':			case 'firebird':			case 'sqlite':				fwrite($fp, "# Table: '{$table_name}'\n");			break;			case 'mssql':			case 'oracle':			case 'postgres':				fwrite($fp, "/*\n\tTable: '{$table_name}'\n*/\n");			break;		}		// Create Table statement		$generator = $textimage = false;		$line = '';		switch ($dbms)		{			case 'mysql_40':			case 'mysql_41':			case 'firebird':			case 'oracle':			case 'sqlite':			case 'postgres':				$line = "CREATE TABLE {$table_name} (\n";			break;			case 'mssql':				$line = "CREATE TABLE [{$table_name}] (\n";			break;		}		// Table specific so we don't get overlap		$modded_array = array();		// Write columns one by one...		foreach ($table_data['COLUMNS'] as $column_name => $column_data)		{			if (strlen($column_name) > 30)			{				trigger_error("Column name '$column_name' on table '$table_name' is too long. The maximum is 30 characters.", E_USER_ERROR);			}			if (isset($column_data[2]) && $column_data[2] == 'auto_increment' && strlen($column_name) > 26) // "${column_name}_gen"			{				trigger_error("Index name '${column_name}_gen' on table '$table_name' is too long. The maximum is 30 characters.", E_USER_ERROR);			}			// Get type			if (strpos($column_data[0], ':') !== false)			{				list($orig_column_type, $column_length) = explode(':', $column_data[0]);				if (!is_array($dbms_type_map[$dbms][$orig_column_type . ':']))				{					$column_type = sprintf($dbms_type_map[$dbms][$orig_column_type . ':'], $column_length);				}				else				{					if (isset($dbms_type_map[$dbms][$orig_column_type . ':']['rule']))					{						switch ($dbms_type_map[$dbms][$orig_column_type . ':']['rule'][0])						{							case 'div':								$column_length /= $dbms_type_map[$dbms][$orig_column_type . ':']['rule'][1];								$column_length = ceil($column_length);								$column_type = sprintf($dbms_type_map[$dbms][$orig_column_type . ':'][0], $column_length);							break;						}					}					if (isset($dbms_type_map[$dbms][$orig_column_type . ':']['limit']))					{						switch ($dbms_type_map[$dbms][$orig_column_type . ':']['limit'][0])						{							case 'mult':								$column_length *= $dbms_type_map[$dbms][$orig_column_type . ':']['limit'][1];								if ($column_length > $dbms_type_map[$dbms][$orig_column_type . ':']['limit'][2])								{									$column_type = $dbms_type_map[$dbms][$orig_column_type . ':']['limit'][3];									$modded_array[$column_name] = $column_type;								}								else								{									$column_type = sprintf($dbms_type_map[$dbms][$orig_column_type . ':'][0], $column_length);								}							break;						}					}				}				$orig_column_type .= ':';			}			else			{				$orig_column_type = $column_data[0];				$column_type = $dbms_type_map[$dbms][$column_data[0]];				if ($column_type == 'text' || $column_type == 'blob')				{					$modded_array[$column_name] = $column_type;				}			}			// Adjust default value if db-dependant specified			if (is_array($column_data[1]))			{				$column_data[1] = (isset($column_data[1][$dbms])) ? $column_data[1][$dbms] : $column_data[1]['default'];			}			switch ($dbms)			{				case 'mysql_40':				case 'mysql_41':					$line .= "\t{$column_name} {$column_type} ";					// For hexadecimal values do not use single quotes					if (!is_null($column_data[1]) && substr($column_type, -4) !== 'text' && substr($column_type, -4) !== 'blob')					{						$line .= (strpos($column_data[1], '0x') === 0) ? "DEFAULT {$column_data[1]} " : "DEFAULT '{$column_data[1]}' ";					}					$line .= 'NOT NULL';					if (isset($column_data[2]))					{						if ($column_data[2] == 'auto_increment')						{							$line .= ' auto_increment';						}						else if ($dbms === 'mysql_41' && $column_data[2] == 'true_sort')						{							$line .= ' COLLATE utf8_unicode_ci';						}					}					$line .= ",\n";				break;				case 'sqlite':					if (isset($column_data[2]) && $column_data[2] == 'auto_increment')					{						$line .= "\t{$column_name} INTEGER PRIMARY KEY ";						$generator = $column_name;					}					else					{						$line .= "\t{$column_name} {$column_type} ";					}					$line .= 'NOT NULL ';					$line .= (!is_null($column_data[1])) ? "DEFAULT '{$column_data[1]}'" : '';					$line .= ",\n";				break;				case 'firebird':					$line .= "\t{$column_name} {$column_type} ";					if (!is_null($column_data[1]))					{						$line .= 'DEFAULT ' . ((is_numeric($column_data[1])) ? $column_data[1] : "'{$column_data[1]}'") . ' ';					}					$line .= 'NOT NULL';					// This is a UNICODE column and thus should be given it's fair share					if (preg_match('/^X?STEXT_UNI|VCHAR_(CI|UNI:?)/', $column_data[0]))					{						$line .= ' COLLATE UNICODE';					}					$line .= ",\n";					if (isset($column_data[2]) && $column_data[2] == 'auto_increment')					{						$generator = $column_name;					}				break;				case 'mssql':					if ($column_type == '[text]')					{						$textimage = true;					}					$line .= "\t[{$column_name}] {$column_type} ";					if (!is_null($column_data[1]))					{						// For hexadecimal values do not use single quotes						if (strpos($column_data[1], '0x') === 0)						{							$line .= 'DEFAULT (' . $column_data[1] . ') ';						}						else						{							$line .= 'DEFAULT (' . ((is_numeric($column_data[1])) ? $column_data[1] : "'{$column_data[1]}'") . ') ';						}					}					if (isset($column_data[2]) && $column_data[2] == 'auto_increment')					{						$line .= 'IDENTITY (1, 1) ';					}					$line .= 'NOT NULL';					$line .= " ,\n";				break;				case 'oracle':					$line .= "\t{$column_name} {$column_type} ";					$line .= (!is_null($column_data[1])) ? "DEFAULT '{$column_data[1]}' " : '';					// In Oracle empty strings ('') are treated as NULL.					// Therefore in oracle we allow NULL's for all DEFAULT '' entries					$line .= ($column_data[1] === '') ? ",\n" : "NOT NULL,\n";					if (isset($column_data[2]) && $column_data[2] == 'auto_increment')					{						$generator = $column_name;					}				break;				case 'postgres':					$line .= "\t{$column_name} {$column_type} ";					if (isset($column_data[2]) && $column_data[2] == 'auto_increment')					{						$line .= "DEFAULT nextval('{$table_name}_seq'),\n";						// Make sure the sequence will be created before creating the table						$line = "CREATE SEQUENCE {$table_name}_seq;\n\n" . $line;					}					else					{						$line .= (!is_null($column_data[1])) ? "DEFAULT '{$column_data[1]}' " : '';						$line .= "NOT NULL";						// Unsigned? Then add a CHECK contraint						if (in_array($orig_column_type, $unsigned_types))						{							$line .= " CHECK ({$column_name} >= 0)";						}						$line .= ",\n";					}				break;			}		}		switch ($dbms)		{			case 'firebird':				// Remove last line delimiter...				$line = substr($line, 0, -2);				$line .= "\n);;\n\n";			break;			case 'mssql':				$line = substr($line, 0, -2);				$line .= "\n) ON [PRIMARY]" . (($textimage) ? ' TEXTIMAGE_ON [PRIMARY]' : '') . "\n";				$line .= "GO\n\n";			break;		}		// Write primary key		if (isset($table_data['PRIMARY_KEY']))		{			if (!is_array($table_data['PRIMARY_KEY']))			{				$table_data['PRIMARY_KEY'] = array($table_data['PRIMARY_KEY']);			}			switch ($dbms)			{				case 'mysql_40':				case 'mysql_41':				case 'postgres':					$line .= "\tPRIMARY KEY (" . implode(', ', $table_data['PRIMARY_KEY']) . "),\n";				break;				case 'firebird':					$line .= "ALTER TABLE {$table_name} ADD PRIMARY KEY (" . implode(', ', $table_data['PRIMARY_KEY']) . ");;\n\n";				break;				case 'sqlite':					if ($generator === false || !in_array($generator, $table_data['PRIMARY_KEY']))					{						$line .= "\tPRIMARY KEY (" . implode(', ', $table_data['PRIMARY_KEY']) . "),\n";					}				break;				case 'mssql':					$line .= "ALTER TABLE [{$table_name}] WITH NOCHECK ADD \n";					$line .= "\tCONSTRAINT [PK_{$table_name}] PRIMARY KEY  CLUSTERED \n";					$line .= "\t(\n";					$line .= "\t\t[" . implode("],\n\t\t[", $table_data['PRIMARY_KEY']) . "]\n";					$line .= "\t)  ON [PRIMARY] \n";					$line .= "GO\n\n";				break;				case 'oracle':					$line .= "\tCONSTRAINT pk_{$table_name} PRIMARY KEY (" . implode(', ', $table_data['PRIMARY_KEY']) . "),\n";				break;			}		}		switch ($dbms)		{			case 'oracle':				// UNIQUE contrains to be added?				if (isset($table_data['KEYS']))				{					foreach ($table_data['KEYS'] as $key_name => $key_data)					{						if (!is_array($key_data[1]))						{							$key_data[1] = array($key_data[1]);						}						if ($key_data[0] == 'UNIQUE')						{							$line .= "\tCONSTRAINT u_phpbb_{$key_name} UNIQUE (" . implode(', ', $key_data[1]) . "),\n";						}					}				}				// Remove last line delimiter...				$line = substr($line, 0, -2);				$line .= "\n)\n/\n\n";			break;			case 'postgres':				// Remove last line delimiter...				$line = substr($line, 0, -2);				$line .= "\n);\n\n";			break;			case 'sqlite':				// Remove last line delimiter...				$line = substr($line, 0, -2);				$line .= "\n);\n\n";			break;		}		// Write Keys		if (isset($table_data['KEYS']))		{			foreach ($table_data['KEYS'] as $key_name => $key_data)			{				if (!is_array($key_data[1]))				{					$key_data[1] = array($key_data[1]);				}				if (strlen($table_name . $key_name) > 30)				{					trigger_error("Index name '${table_name}_$key_name' on table '$table_name' is too long. The maximum is 30 characters.", E_USER_ERROR);				}				switch ($dbms)				{					case 'mysql_40':					case 'mysql_41':						$line .= ($key_data[0] == 'INDEX') ? "\tKEY" : '';						$line .= ($key_data[0] == 'UNIQUE') ? "\tUNIQUE" : '';						foreach ($key_data[1] as $key => $col_name)						{							if (isset($modded_array[$col_name]))							{								switch ($modded_array[$col_name])								{									case 'text':									case 'blob':										$key_data[1][$key] = $col_name . '(255)';									break;								}							}						}						$line .= ' ' . $key_name . ' (' . implode(', ', $key_data[1]) . "),\n";					break;					case 'firebird':						$line .= ($key_data[0] == 'INDEX') ? 'CREATE INDEX' : '';						$line .= ($key_data[0] == 'UNIQUE') ? 'CREATE UNIQUE INDEX' : '';						$line .= ' ' . $table_name . '_' . $key_name . ' ON ' . $table_name . '(' . implode(', ', $key_data[1]) . ");;\n";					break;					case 'mssql':						$line .= ($key_data[0] == 'INDEX') ? 'CREATE  INDEX' : '';						$line .= ($key_data[0] == 'UNIQUE') ? 'CREATE  UNIQUE  INDEX' : '';						$line .= " [{$key_name}] ON [{$table_name}]([" . implode('], [', $key_data[1]) . "]) ON [PRIMARY]\n";						$line .= "GO\n\n";					break;					case 'oracle':						if ($key_data[0] == 'UNIQUE')						{							continue;						}						$line .= ($key_data[0] == 'INDEX') ? 'CREATE INDEX' : '';						$line .= " {$table_name}_{$key_name} ON {$table_name} (" . implode(', ', $key_data[1]) . ")\n";						$line .= "/\n";					break;					case 'sqlite':						$line .= ($key_data[0] == 'INDEX') ? 'CREATE INDEX' : '';						$line .= ($key_data[0] == 'UNIQUE') ? 'CREATE UNIQUE INDEX' : '';						$line .= " {$table_name}_{$key_name} ON {$table_name} (" . implode(', ', $key_data[1]) . ");\n";					break;					case 'postgres':						$line .= ($key_data[0] == 'INDEX') ? 'CREATE INDEX' : '';						$line .= ($key_data[0] == 'UNIQUE') ? 'CREATE UNIQUE INDEX' : '';						$line .= " {$table_name}_{$key_name} ON {$table_name} (" . implode(', ', $key_data[1]) . ");\n";					break;				}			}		}		switch ($dbms)		{			case 'mysql_40':				// Remove last line delimiter...				$line = substr($line, 0, -2);				$line .= "\n);\n\n";			break;			case 'mysql_41':				// Remove last line delimiter...				$line = substr($line, 0, -2);				$line .= "\n) CHARACTER SET `utf8` COLLATE `utf8_bin`;\n\n";			break;			// Create Generator			case 'firebird':				if ($generator !== false)				{					$line .= "\nCREATE GENERATOR {$table_name}_gen;;\n";					$line .= 'SET GENERATOR ' . $table_name . "_gen TO 0;;\n\n";					$line .= 'CREATE TRIGGER t_' . $table_name . ' FOR ' . $table_name . "\n";					$line .= "BEFORE INSERT\nAS\nBEGIN\n";					$line .= "\tNEW.{$generator} = GEN_ID({$table_name}_gen, 1);\nEND;;\n\n";				}			break;			case 'oracle':				if ($generator !== false)				{					$line .= "\nCREATE SEQUENCE {$table_name}_seq\n/\n\n";					$line .= "CREATE OR REPLACE TRIGGER t_{$table_name}\n";					$line .= "BEFORE INSERT ON {$table_name}\n";					$line .= "FOR EACH ROW WHEN (\n";					$line .= "\tnew.{$generator} IS NULL OR new.{$generator} = 0\n";					$line .= ")\nBEGIN\n";					$line .= "\tSELECT {$table_name}_seq.nextval\n";					$line .= "\tINTO :new.{$generator}\n";					$line .= "\tFROM dual;\nEND;\n/\n\n";				}			break;		}		fwrite($fp, $line . "\n");	}	$line = '';	// Write custom function at the end for some db's	switch ($dbms)	{		case 'mssql':			// No need to do this, no transaction support for schema changes			//$line = "\nCOMMIT\nGO\n\n";		break;		case 'sqlite':			$line = "\nCOMMIT;";		break;		case 'postgres':			$line = "\nCOMMIT;";		break;	}	fwrite($fp, $line);	fclose($fp);}/*** Define the basic structure* The format:*		array('{TABLE_NAME}' => {TABLE_DATA})*		{TABLE_DATA}:*			COLUMNS = array({column_name} = array({column_type}, {default}, {auto_increment}))*			PRIMARY_KEY = {column_name(s)}*			KEYS = array({key_name} = array({key_type}, {column_name(s)})),**	Column Types:*	INT:x		=> SIGNED int(x)*	BINT		=> BIGINT*	UINT		=> mediumint(8) UNSIGNED*	UINT:x		=> int(x) UNSIGNED*	TINT:x		=> tinyint(x)*	USINT		=> smallint(4) UNSIGNED (for _order columns)*	BOOL		=> tinyint(1) UNSIGNED*	VCHAR		=> varchar(255)*	CHAR:x		=> char(x)*	XSTEXT_UNI	=> text for storing 100 characters (topic_title for example)*	STEXT_UNI	=> text for storing 255 characters (normal input field with a max of 255 single-byte chars) - same as VCHAR_UNI*	TEXT_UNI	=> text for storing 3000 characters (short text, descriptions, comments, etc.)*	MTEXT_UNI	=> mediumtext (post text, large text)*	VCHAR:x		=> varchar(x)*	TIMESTAMP	=> int(11) UNSIGNED*	DECIMAL		=> decimal number (5,2)*	DECIMAL:	=> decimal number (x,2)*	PDECIMAL	=> precision decimal number (6,3)*	PDECIMAL:	=> precision decimal number (x,3)*	VCHAR_UNI	=> varchar(255) BINARY*	VCHAR_CI	=> varchar_ci for postgresql, others VCHAR*/function get_schema_struct(){	$schema_data = array();	$schema_data['phpbb_attachments'] = array(		'COLUMNS'		=> array(			'attach_id'			=> array('UINT', NULL, 'auto_increment'),			'post_msg_id'		=> array('UINT', 0),			'topic_id'			=> array('UINT', 0),			'in_message'		=> array('BOOL', 0),			'poster_id'			=> array('UINT', 0),			'is_orphan'			=> array('BOOL', 1),			'physical_filename'	=> array('VCHAR', ''),			'real_filename'		=> array('VCHAR', ''),			'download_count'	=> array('UINT', 0),			'attach_comment'	=> array('TEXT_UNI', ''),			'extension'			=> array('VCHAR:100', ''),			'mimetype'			=> array('VCHAR:100', ''),			'filesize'			=> array('UINT:20', 0),			'filetime'			=> array('TIMESTAMP', 0),			'thumbnail'			=> array('BOOL', 0),		),		'PRIMARY_KEY'	=> 'attach_id',		'KEYS'			=> array(			'filetime'			=> array('INDEX', 'filetime'),			'post_msg_id'		=> array('INDEX', 'post_msg_id'),			'topic_id'			=> array('INDEX', 'topic_id'),			'poster_id'			=> array('INDEX', 'poster_id'),			'is_orphan'			=> array('INDEX', 'is_orphan'),		),	);	$schema_data['phpbb_acl_groups'] = array(		'COLUMNS'		=> array(			'group_id'			=> array('UINT', 0),			'forum_id'			=> array('UINT', 0),			'auth_option_id'	=> array('UINT', 0),			'auth_role_id'		=> array('UINT', 0),			'auth_setting'		=> array('TINT:2', 0),		),		'KEYS'			=> array(			'group_id'		=> array('INDEX', 'group_id'),			'auth_opt_id'	=> array('INDEX', 'auth_option_id'),			'auth_role_id'	=> array('INDEX', 'auth_role_id'),		),	);	$schema_data['phpbb_acl_options'] = array(		'COLUMNS'		=> array(			'auth_option_id'	=> array('UINT', NULL, 'auto_increment'),			'auth_option'		=> array('VCHAR:50', ''),			'is_global'			=> array('BOOL', 0),			'is_local'			=> array('BOOL', 0),			'founder_only'		=> array('BOOL', 0),		),		'PRIMARY_KEY'	=> 'auth_option_id',		'KEYS'			=> array(			'auth_option'		=> array('UNIQUE', 'auth_option'),		),	);	$schema_data['phpbb_acl_roles'] = array(		'COLUMNS'		=> array(			'role_id'			=> array('UINT', NULL, 'auto_increment'),			'role_name'			=> array('VCHAR_UNI', ''),			'role_description'	=> array('TEXT_UNI', ''),			'role_type'			=> array('VCHAR:10', ''),			'role_order'		=> array('USINT', 0),		),		'PRIMARY_KEY'	=> 'role_id',		'KEYS'			=> array(			'role_type'			=> array('INDEX', 'role_type'),			'role_order'		=> array('INDEX', 'role_order'),		),	);	$schema_data['phpbb_acl_roles_data'] = array(		'COLUMNS'		=> array(			'role_id'			=> array('UINT', 0),			'auth_option_id'	=> array('UINT', 0),			'auth_setting'		=> array('TINT:2', 0),		),		'PRIMARY_KEY'	=> array('role_id', 'auth_option_id'),		'KEYS'			=> array(			'ath_op_id'			=> array('INDEX', 'auth_option_id'),		),	);	$schema_data['phpbb_acl_users'] = array(		'COLUMNS'		=> array(			'user_id'			=> array('UINT', 0),			'forum_id'			=> array('UINT', 0),			'auth_option_id'	=> array('UINT', 0),			'auth_role_id'		=> array('UINT', 0),			'auth_setting'		=> array('TINT:2', 0),		),		'KEYS'			=> array(			'user_id'			=> array('INDEX', 'user_id'),			'auth_option_id'	=> array('INDEX', 'auth_option_id'),			'auth_role_id'		=> array('INDEX', 'auth_role_id'),		),	);	$schema_data['phpbb_banlist'] = array(		'COLUMNS'		=> array(			'ban_id'			=> array('UINT', NULL, 'auto_increment'),			'ban_userid'		=> array('UINT', 0),			'ban_ip'			=> array('VCHAR:40', ''),			'ban_email'			=> array('VCHAR_UNI:100', ''),			'ban_start'			=> array('TIMESTAMP', 0),			'ban_end'			=> array('TIMESTAMP', 0),			'ban_exclude'		=> array('BOOL', 0),			'ban_reason'		=> array('VCHAR_UNI', ''),			'ban_give_reason'	=> array('VCHAR_UNI', ''),		),		'PRIMARY_KEY'			=> 'ban_id',		'KEYS'			=> array(			'ban_end'			=> array('INDEX', 'ban_end'),			'ban_user'			=> array('INDEX', array('ban_userid', 'ban_exclude')),			'ban_email'			=> array('INDEX', array('ban_email', 'ban_exclude')),			'ban_ip'			=> array('INDEX', array('ban_ip', 'ban_exclude')),		),	);	$schema_data['phpbb_bbcodes'] = array(		'COLUMNS'		=> array(			'bbcode_id'				=> array('USINT', 0),			'bbcode_tag'			=> array('VCHAR:16', ''),			'bbcode_helpline'		=> array('VCHAR_UNI', ''),			'display_on_posting'	=> array('BOOL', 0),			'bbcode_match'			=> array('TEXT_UNI', ''),			'bbcode_tpl'			=> array('MTEXT_UNI', ''),			'first_pass_match'		=> array('MTEXT_UNI', ''),			'first_pass_replace'	=> array('MTEXT_UNI', ''),			'second_pass_match'		=> array('MTEXT_UNI', ''),			'second_pass_replace'	=> array('MTEXT_UNI', ''),		),		'PRIMARY_KEY'	=> 'bbcode_id',		'KEYS'			=> array(			'display_on_post'		=> array('INDEX', 'display_on_posting'),		),	);	$schema_data['phpbb_bookmarks'] = array(		'COLUMNS'		=> array(			'topic_id'			=> array('UINT', 0),			'user_id'			=> array('UINT', 0),		),		'PRIMARY_KEY'			=> array('topic_id', 'user_id'),	);	$schema_data['phpbb_bots'] = array(		'COLUMNS'		=> array(			'bot_id'			=> array('UINT', NULL, 'auto_increment'),			'bot_active'		=> array('BOOL', 1),			'bot_name'			=> array('STEXT_UNI', ''),			'user_id'			=> array('UINT', 0),			'bot_agent'			=> array('VCHAR', ''),			'bot_ip'			=> array('VCHAR', ''),		),		'PRIMARY_KEY'	=> 'bot_id',		'KEYS'			=> array(			'bot_active'		=> array('INDEX', 'bot_active'),		),	);	$schema_data['phpbb_config'] = array(		'COLUMNS'		=> array(			'config_name'		=> array('VCHAR', ''),			'config_value'		=> array('VCHAR_UNI', ''),			'is_dynamic'		=> array('BOOL', 0),		),		'PRIMARY_KEY'	=> 'config_name',		'KEYS'			=> array(			'is_dynamic'		=> array('INDEX', 'is_dynamic'),		),	);	$schema_data['phpbb_confirm'] = array(		'COLUMNS'		=> array(			'confirm_id'		=> array('CHAR:32', ''),			'session_id'		=> array('CHAR:32', ''),			'confirm_type'		=> array('TINT:3', 0),			'code'				=> array('VCHAR:8', ''),			'seed'				=> array('UINT:10', 0),			'attempts'			=> array('UINT', 0),		),		'PRIMARY_KEY'	=> array('session_id', 'confirm_id'),		'KEYS'			=> array(			'confirm_type'		=> array('INDEX', 'confirm_type'),		),	);	$schema_data['phpbb_disallow'] = array(		'COLUMNS'		=> array(			'disallow_id'		=> array('UINT', NULL, 'auto_increment'),			'disallow_username'	=> array('VCHAR_UNI:255', ''),		),		'PRIMARY_KEY'	=> 'disallow_id',	);	$schema_data['phpbb_drafts'] = array(		'COLUMNS'		=> array(			'draft_id'			=> array('UINT', NULL, 'auto_increment'),			'user_id'			=> array('UINT', 0),			'topic_id'			=> array('UINT', 0),			'forum_id'			=> array('UINT', 0),			'save_time'			=> array('TIMESTAMP', 0),			'draft_subject'		=> array('STEXT_UNI', ''),			'draft_message'		=> array('MTEXT_UNI', ''),		),		'PRIMARY_KEY'	=> 'draft_id',		'KEYS'			=> array(			'save_time'			=> array('INDEX', 'save_time'),		),	);	$schema_data['phpbb_extensions'] = array(		'COLUMNS'		=> array(			'extension_id'		=> array('UINT', NULL, 'auto_increment'),			'group_id'			=> array('UINT', 0),			'extension'			=> array('VCHAR:100', ''),		),		'PRIMARY_KEY'	=> 'extension_id',	);	$schema_data['phpbb_extension_groups'] = array(		'COLUMNS'		=> array(			'group_id'			=> array('UINT', NULL, 'auto_increment'),			'group_name'		=> array('VCHAR_UNI', ''),			'cat_id'			=> array('TINT:2', 0),			'allow_group'		=> array('BOOL', 0),			'download_mode'		=> array('BOOL', 1),			'upload_icon'		=> array('VCHAR', ''),			'max_filesize'		=> array('UINT:20', 0),			'allowed_forums'	=> array('TEXT', ''),			'allow_in_pm'		=> array('BOOL', 0),		),		'PRIMARY_KEY'	=> 'group_id',	);	$schema_data['phpbb_forums'] = array(		'COLUMNS'		=> array(			'forum_id'				=> array('UINT', NULL, 'auto_increment'),			'parent_id'				=> array('UINT', 0),			'left_id'				=> array('UINT', 0),			'right_id'				=> array('UINT', 0),			'forum_parents'			=> array('MTEXT', ''),			'forum_name'			=> array('STEXT_UNI', ''),			'forum_desc'			=> array('TEXT_UNI', ''),			'forum_desc_bitfield'	=> array('VCHAR:255', ''),			'forum_desc_options'	=> array('UINT:11', 7),			'forum_desc_uid'		=> array('VCHAR:8', ''),			'forum_link'			=> array('VCHAR_UNI', ''),			'forum_password'		=> array('VCHAR_UNI:40', ''),			'forum_style'			=> array('UINT', 0),			'forum_image'			=> array('VCHAR', ''),			'forum_rules'			=> array('TEXT_UNI', ''),			'forum_rules_link'		=> array('VCHAR_UNI', ''),			'forum_rules_bitfield'	=> array('VCHAR:255', ''),			'forum_rules_options'	=> array('UINT:11', 7),			'forum_rules_uid'		=> array('VCHAR:8', ''),			'forum_topics_per_page'	=> array('TINT:4', 0),			'forum_type'			=> array('TINT:4', 0),			'forum_status'			=> array('TINT:4', 0),			'forum_posts'			=> array('UINT', 0),			'forum_topics'			=> array('UINT', 0),			'forum_topics_real'		=> array('UINT', 0),			'forum_last_post_id'	=> array('UINT', 0),			'forum_last_poster_id'	=> array('UINT', 0),			'forum_last_post_subject' => array('STEXT_UNI', ''),			'forum_last_post_time'	=> array('TIMESTAMP', 0),			'forum_last_poster_name'=> array('VCHAR_UNI', ''),			'forum_last_poster_colour'=> array('VCHAR:6', ''),			'forum_flags'			=> array('TINT:4', 32),			'forum_options'			=> array('UINT:20', 0),			'display_subforum_list'	=> array('BOOL', 1),			'display_on_index'		=> array('BOOL', 1),			'enable_indexing'		=> array('BOOL', 1),			'enable_icons'			=> array('BOOL', 1),			'enable_prune'			=> array('BOOL', 0),			'prune_next'			=> array('TIMESTAMP', 0),			'prune_days'			=> array('UINT', 0),			'prune_viewed'			=> array('UINT', 0),			'prune_freq'			=> array('UINT', 0),		),		'PRIMARY_KEY'	=> 'forum_id',		'KEYS'			=> array(			'left_right_id'			=> array('INDEX', array('left_id', 'right_id')),			'forum_lastpost_id'		=> array('INDEX', 'forum_last_post_id'),		),	);	$schema_data['phpbb_forums_access'] = array(		'COLUMNS'		=> array(			'forum_id'				=> array('UINT', 0),			'user_id'				=> array('UINT', 0),			'session_id'			=> array('CHAR:32', ''),		),		'PRIMARY_KEY'	=> array('forum_id', 'user_id', 'session_id'),	);	$schema_data['phpbb_forums_track'] = array(		'COLUMNS'		=> array(			'user_id'				=> array('UINT', 0),			'forum_id'				=> array('UINT', 0),			'mark_time'				=> array('TIMESTAMP', 0),		),		'PRIMARY_KEY'	=> array('user_id', 'forum_id'),	);	$schema_data['phpbb_forums_watch'] = array(		'COLUMNS'		=> array(			'forum_id'				=> array('UINT', 0),			'user_id'				=> array('UINT', 0),			'notify_status'			=> array('BOOL', 0),		),		'KEYS'			=> array(			'forum_id'				=> array('INDEX', 'forum_id'),			'user_id'				=> array('INDEX', 'user_id'),			'notify_stat'			=> array('INDEX', 'notify_status'),		),	);	$schema_data['phpbb_groups'] = array(		'COLUMNS'		=> array(			'group_id'				=> array('UINT', NULL, 'auto_increment'),			'group_type'			=> array('TINT:4', 1),			'group_founder_manage'	=> array('BOOL', 0),			'group_skip_auth'		=> array('BOOL', 0),			'group_name'			=> array('VCHAR_CI', ''),			'group_desc'			=> array('TEXT_UNI', ''),			'group_desc_bitfield'	=> array('VCHAR:255', ''),			'group_desc_options'	=> array('UINT:11', 7),			'group_desc_uid'		=> array('VCHAR:8', ''),			'group_display'			=> array('BOOL', 0),			'group_avatar'			=> array('VCHAR', ''),			'group_avatar_type'		=> array('TINT:2', 0),			'group_avatar_width'	=> array('USINT', 0),			'group_avatar_height'	=> array('USINT', 0),			'group_rank'			=> array('UINT', 0),			'group_colour'			=> array('VCHAR:6', ''),			'group_sig_chars'		=> array('UINT', 0),			'group_receive_pm'		=> array('BOOL', 0),			'group_message_limit'	=> array('UINT', 0),			'group_max_recipients'	=> array('UINT', 0),			'group_legend'			=> array('BOOL', 1),		),		'PRIMARY_KEY'	=> 'group_id',		'KEYS'			=> array(			'group_legend_name'		=> array('INDEX', array('group_legend', 'group_name')),		),	);	$schema_data['phpbb_icons'] = array(		'COLUMNS'		=> array(			'icons_id'				=> array('UINT', NULL, 'auto_increment'),			'icons_url'				=> array('VCHAR', ''),			'icons_width'			=> array('TINT:4', 0),			'icons_height'			=> array('TINT:4', 0),			'icons_order'			=> array('UINT', 0),			'display_on_posting'	=> array('BOOL', 1),		),		'PRIMARY_KEY'	=> 'icons_id',		'KEYS'			=> array(			'display_on_posting'	=> array('INDEX', 'display_on_posting'),		),	);	$schema_data['phpbb_lang'] = array(		'COLUMNS'		=> array(			'lang_id'				=> array('TINT:4', NULL, 'auto_increment'),			'lang_iso'				=> array('VCHAR:30', ''),			'lang_dir'				=> array('VCHAR:30', ''),			'lang_english_name'		=> array('VCHAR_UNI:100', ''),			'lang_local_name'		=> array('VCHAR_UNI:255', ''),			'lang_author'			=> array('VCHAR_UNI:255', ''),		),		'PRIMARY_KEY'	=> 'lang_id',		'KEYS'			=> array(			'lang_iso'				=> array('INDEX', 'lang_iso'),		),	);	$schema_data['phpbb_log'] = array(		'COLUMNS'		=> array(			'log_id'				=> array('UINT', NULL, 'auto_increment'),			'log_type'				=> array('TINT:4', 0),			'user_id'				=> array('UINT', 0),			'forum_id'				=> array('UINT', 0),			'topic_id'				=> array('UINT', 0),			'reportee_id'			=> array('UINT', 0),			'log_ip'				=> array('VCHAR:40', ''),			'log_time'				=> array('TIMESTAMP', 0),			'log_operation'			=> array('TEXT_UNI', ''),			'log_data'				=> array('MTEXT_UNI', ''),		),		'PRIMARY_KEY'	=> 'log_id',		'KEYS'			=> array(			'log_type'				=> array('INDEX', 'log_type'),			'forum_id'				=> array('INDEX', 'forum_id'),			'topic_id'				=> array('INDEX', 'topic_id'),			'reportee_id'			=> array('INDEX', 'reportee_id'),			'user_id'				=> array('INDEX', 'user_id'),		),	);	$schema_data['phpbb_login_attempts'] = array(		'COLUMNS'		=> array(			'attempt_ip'			=> array('VCHAR:40', ''),			'attempt_browser'		=> array('VCHAR:150', ''),			'attempt_forwarded_for'	=> array('VCHAR:255', ''),			'attempt_time'			=> array('TIMESTAMP', 0),			'user_id'				=> array('UINT', 0),			'username'				=> array('VCHAR_UNI:255', 0),			'username_clean'		=> array('VCHAR_CI', 0),		),		'KEYS'			=> array(			'att_ip'				=> array('INDEX', array('attempt_ip', 'attempt_time')),			'att_for'		=> array('INDEX', array('attempt_forwarded_for', 'attempt_time')),			'att_time'				=> array('INDEX', array('attempt_time')),			'user_id'					=> array('INDEX', 'user_id'),		),	);	$schema_data['phpbb_moderator_cache'] = array(		'COLUMNS'		=> array(			'forum_id'				=> array('UINT', 0),			'user_id'				=> array('UINT', 0),			'username'				=> array('VCHAR_UNI:255', ''),			'group_id'				=> array('UINT', 0),			'group_name'			=> array('VCHAR_UNI', ''),			'display_on_index'		=> array('BOOL', 1),		),		'KEYS'			=> array(			'disp_idx'				=> array('INDEX', 'display_on_index'),			'forum_id'				=> array('INDEX', 'forum_id'),		),	);	$schema_data['phpbb_modules'] = array(		'COLUMNS'		=> array(			'module_id'				=> array('UINT', NULL, 'auto_increment'),			'module_enabled'		=> array('BOOL', 1),			'module_display'		=> array('BOOL', 1),			'module_basename'		=> array('VCHAR', ''),			'module_class'			=> array('VCHAR:10', ''),			'parent_id'				=> array('UINT', 0),			'left_id'				=> array('UINT', 0),			'right_id'				=> array('UINT', 0),			'module_langname'		=> array('VCHAR', ''),			'module_mode'			=> array('VCHAR', ''),			'module_auth'			=> array('VCHAR', ''),		),		'PRIMARY_KEY'	=> 'module_id',		'KEYS'			=> array(			'left_right_id'			=> array('INDEX', array('left_id', 'right_id')),			'module_enabled'		=> array('INDEX', 'module_enabled'),			'class_left_id'			=> array('INDEX', array('module_class', 'left_id')),		),	);	$schema_data['phpbb_poll_options'] = array(		'COLUMNS'		=> array(			'poll_option_id'		=> array('TINT:4', 0),			'topic_id'				=> array('UINT', 0),			'poll_option_text'		=> array('TEXT_UNI', ''),			'poll_option_total'		=> array('UINT', 0),		),		'KEYS'			=> array(			'poll_opt_id'			=> array('INDEX', 'poll_option_id'),			'topic_id'				=> array('INDEX', 'topic_id'),		),	);	$schema_data['phpbb_poll_votes'] = array(		'COLUMNS'		=> array(			'topic_id'				=> array('UINT', 0),			'poll_option_id'		=> array('TINT:4', 0),			'vote_user_id'			=> array('UINT', 0),			'vote_user_ip'			=> array('VCHAR:40', ''),		),		'KEYS'			=> array(			'topic_id'				=> array('INDEX', 'topic_id'),			'vote_user_id'			=> array('INDEX', 'vote_user_id'),			'vote_user_ip'			=> array('INDEX', 'vote_user_ip'),		),	);	$schema_data['phpbb_posts'] = array(		'COLUMNS'		=> array(			'post_id'				=> array('UINT', NULL, 'auto_increment'),			'topic_id'				=> array('UINT', 0),			'forum_id'				=> array('UINT', 0),			'poster_id'				=> array('UINT', 0),			'icon_id'				=> array('UINT', 0),			'poster_ip'				=> array('VCHAR:40', ''),			'post_time'				=> array('TIMESTAMP', 0),			'post_approved'			=> array('BOOL', 1),			'post_reported'			=> array('BOOL', 0),			'enable_bbcode'			=> array('BOOL', 1),			'enable_smilies'		=> array('BOOL', 1),			'enable_magic_url'		=> array('BOOL', 1),			'enable_sig'			=> array('BOOL', 1),			'post_username'			=> array('VCHAR_UNI:255', ''),			'post_subject'			=> array('STEXT_UNI', '', 'true_sort'),			'post_text'				=> array('MTEXT_UNI', ''),			'post_checksum'			=> array('VCHAR:32', ''),			'post_attachment'		=> array('BOOL', 0),			'bbcode_bitfield'		=> array('VCHAR:255', ''),			'bbcode_uid'			=> array('VCHAR:8', ''),			'post_postcount'		=> array('BOOL', 1),			'post_edit_time'		=> array('TIMESTAMP', 0),			'post_edit_reason'		=> array('STEXT_UNI', ''),			'post_edit_user'		=> array('UINT', 0),			'post_edit_count'		=> array('USINT', 0),			'post_edit_locked'		=> array('BOOL', 0),		),		'PRIMARY_KEY'	=> 'post_id',		'KEYS'			=> array(			'forum_id'				=> array('INDEX', 'forum_id'),			'topic_id'				=> array('INDEX', 'topic_id'),			'poster_ip'				=> array('INDEX', 'poster_ip'),			'poster_id'				=> array('INDEX', 'poster_id'),			'post_approved'			=> array('INDEX', 'post_approved'),			'post_username'			=> array('INDEX', 'post_username'),			'tid_post_time'			=> array('INDEX', array('topic_id', 'post_time')),		),	);	$schema_data['phpbb_privmsgs'] = array(		'COLUMNS'		=> array(			'msg_id'				=> array('UINT', NULL, 'auto_increment'),			'root_level'			=> array('UINT', 0),			'author_id'				=> array('UINT', 0),			'icon_id'				=> array('UINT', 0),			'author_ip'				=> array('VCHAR:40', ''),			'message_time'			=> array('TIMESTAMP', 0),			'enable_bbcode'			=> array('BOOL', 1),			'enable_smilies'		=> array('BOOL', 1),			'enable_magic_url'		=> array('BOOL', 1),			'enable_sig'			=> array('BOOL', 1),			'message_subject'		=> array('STEXT_UNI', ''),			'message_text'			=> array('MTEXT_UNI', ''),			'message_edit_reason'	=> array('STEXT_UNI', ''),			'message_edit_user'		=> array('UINT', 0),			'message_attachment'	=> array('BOOL', 0),			'bbcode_bitfield'		=> array('VCHAR:255', ''),			'bbcode_uid'			=> array('VCHAR:8', ''),			'message_edit_time'		=> array('TIMESTAMP', 0),			'message_edit_count'	=> array('USINT', 0),			'to_address'			=> array('TEXT_UNI', ''),			'bcc_address'			=> array('TEXT_UNI', ''),			'message_reported'		=> array('BOOL', 0),		),		'PRIMARY_KEY'	=> 'msg_id',		'KEYS'			=> array(			'author_ip'				=> array('INDEX', 'author_ip'),			'message_time'			=> array('INDEX', 'message_time'),			'author_id'				=> array('INDEX', 'author_id'),			'root_level'			=> array('INDEX', 'root_level'),		),	);	$schema_data['phpbb_privmsgs_folder'] = array(		'COLUMNS'		=> array(			'folder_id'				=> array('UINT', NULL, 'auto_increment'),			'user_id'				=> array('UINT', 0),			'folder_name'			=> array('VCHAR_UNI', ''),			'pm_count'				=> array('UINT', 0),		),		'PRIMARY_KEY'	=> 'folder_id',		'KEYS'			=> array(			'user_id'				=> array('INDEX', 'user_id'),		),	);	$schema_data['phpbb_privmsgs_rules'] = array(		'COLUMNS'		=> array(			'rule_id'				=> array('UINT', NULL, 'auto_increment'),			'user_id'				=> array('UINT', 0),			'rule_check'			=> array('UINT', 0),			'rule_connection'		=> array('UINT', 0),			'rule_string'			=> array('VCHAR_UNI', ''),			'rule_user_id'			=> array('UINT', 0),			'rule_group_id'			=> array('UINT', 0),			'rule_action'			=> array('UINT', 0),			'rule_folder_id'		=> array('INT:11', 0),		),		'PRIMARY_KEY'	=> 'rule_id',		'KEYS'			=> array(			'user_id'				=> array('INDEX', 'user_id'),		),	);	$schema_data['phpbb_privmsgs_to'] = array(		'COLUMNS'		=> array(			'msg_id'				=> array('UINT', 0),			'user_id'				=> array('UINT', 0),			'author_id'				=> array('UINT', 0),			'pm_deleted'			=> array('BOOL', 0),			'pm_new'				=> array('BOOL', 1),			'pm_unread'				=> array('BOOL', 1),			'pm_replied'			=> array('BOOL', 0),			'pm_marked'				=> array('BOOL', 0),			'pm_forwarded'			=> array('BOOL', 0),			'folder_id'				=> array('INT:11', 0),		),		'KEYS'			=> array(			'msg_id'				=> array('INDEX', 'msg_id'),			'author_id'				=> array('INDEX', 'author_id'),			'usr_flder_id'			=> array('INDEX', array('user_id', 'folder_id')),		),	);	$schema_data['phpbb_profile_fields'] = array(		'COLUMNS'		=> array(			'field_id'				=> array('UINT', NULL, 'auto_increment'),			'field_name'			=> array('VCHAR_UNI', ''),			'field_type'			=> array('TINT:4', 0),			'field_ident'			=> array('VCHAR:20', ''),			'field_length'			=> array('VCHAR:20', ''),			'field_minlen'			=> array('VCHAR', ''),			'field_maxlen'			=> array('VCHAR', ''),			'field_novalue'			=> array('VCHAR_UNI', ''),			'field_default_value'	=> array('VCHAR_UNI', ''),			'field_validation'		=> array('VCHAR_UNI:20', ''),			'field_required'		=> array('BOOL', 0),			'field_show_on_reg'		=> array('BOOL', 0),			'field_show_on_vt'		=> array('BOOL', 0),			'field_show_profile'	=> array('BOOL', 0),			'field_hide'			=> array('BOOL', 0),			'field_no_view'			=> array('BOOL', 0),			'field_active'			=> array('BOOL', 0),			'field_order'			=> array('UINT', 0),		),		'PRIMARY_KEY'	=> 'field_id',		'KEYS'			=> array(			'fld_type'			=> array('INDEX', 'field_type'),			'fld_ordr'			=> array('INDEX', 'field_order'),		),	);	$schema_data['phpbb_profile_fields_data'] = array(		'COLUMNS'		=> array(			'user_id'				=> array('UINT', 0),		),		'PRIMARY_KEY'	=> 'user_id',	);	$schema_data['phpbb_profile_fields_lang'] = array(		'COLUMNS'		=> array(			'field_id'				=> array('UINT', 0),			'lang_id'				=> array('UINT', 0),			'option_id'				=> array('UINT', 0),			'field_type'			=> array('TINT:4', 0),			'lang_value'			=> array('VCHAR_UNI', ''),		),		'PRIMARY_KEY'	=> array('field_id', 'lang_id', 'option_id'),	);	$schema_data['phpbb_profile_lang'] = array(		'COLUMNS'		=> array(			'field_id'				=> array('UINT', 0),			'lang_id'				=> array('UINT', 0),			'lang_name'				=> array('VCHAR_UNI', ''),			'lang_explain'			=> array('TEXT_UNI', ''),			'lang_default_value'	=> array('VCHAR_UNI', ''),		),		'PRIMARY_KEY'	=> array('field_id', 'lang_id'),	);	$schema_data['phpbb_ranks'] = array(		'COLUMNS'		=> array(			'rank_id'				=> array('UINT', NULL, 'auto_increment'),			'rank_title'			=> array('VCHAR_UNI', ''),			'rank_min'				=> array('UINT', 0),			'rank_special'			=> array('BOOL', 0),			'rank_image'			=> array('VCHAR', ''),		),		'PRIMARY_KEY'	=> 'rank_id',	);	$schema_data['phpbb_reports'] = array(		'COLUMNS'		=> array(			'report_id'				=> array('UINT', NULL, 'auto_increment'),			'reason_id'				=> array('USINT', 0),			'post_id'				=> array('UINT', 0),			'pm_id'					=> array('UINT', 0),			'user_id'				=> array('UINT', 0),			'user_notify'			=> array('BOOL', 0),			'report_closed'			=> array('BOOL', 0),			'report_time'			=> array('TIMESTAMP', 0),			'report_text'			=> array('MTEXT_UNI', ''),		),		'PRIMARY_KEY'	=> 'report_id',		'KEYS'			=> array(			'post_id'			=> array('INDEX', 'post_id'),			'pm_id'				=> array('INDEX', 'pm_id'),		),	);	$schema_data['phpbb_reports_reasons'] = array(		'COLUMNS'		=> array(			'reason_id'				=> array('USINT', NULL, 'auto_increment'),			'reason_title'			=> array('VCHAR_UNI', ''),			'reason_description'	=> array('MTEXT_UNI', ''),			'reason_order'			=> array('USINT', 0),		),		'PRIMARY_KEY'	=> 'reason_id',	);	$schema_data['phpbb_search_results'] = array(		'COLUMNS'		=> array(			'search_key'			=> array('VCHAR:32', ''),			'search_time'			=> array('TIMESTAMP', 0),			'search_keywords'		=> array('MTEXT_UNI', ''),			'search_authors'		=> array('MTEXT', ''),		),		'PRIMARY_KEY'	=> 'search_key',	);	$schema_data['phpbb_search_wordlist'] = array(		'COLUMNS'		=> array(			'word_id'			=> array('UINT', NULL, 'auto_increment'),			'word_text'			=> array('VCHAR_UNI', ''),			'word_common'		=> array('BOOL', 0),			'word_count'		=> array('UINT', 0),		),		'PRIMARY_KEY'	=> 'word_id',		'KEYS'			=> array(			'wrd_txt'			=> array('UNIQUE', 'word_text'),			'wrd_cnt'			=> array('INDEX', 'word_count'),		),	);	$schema_data['phpbb_search_wordmatch'] = array(		'COLUMNS'		=> array(			'post_id'			=> array('UINT', 0),			'word_id'			=> array('UINT', 0),			'title_match'		=> array('BOOL', 0),		),		'KEYS'			=> array(			'unq_mtch'			=> array('UNIQUE', array('word_id', 'post_id', 'title_match')),			'word_id'			=> array('INDEX', 'word_id'),			'post_id'			=> array('INDEX', 'post_id'),		),	);	$schema_data['phpbb_sessions'] = array(		'COLUMNS'		=> array(			'session_id'			=> array('CHAR:32', ''),			'session_user_id'		=> array('UINT', 0),			'session_forum_id'		=> array('UINT', 0),			'session_last_visit'	=> array('TIMESTAMP', 0),			'session_start'			=> array('TIMESTAMP', 0),			'session_time'			=> array('TIMESTAMP', 0),			'session_ip'			=> array('VCHAR:40', ''),			'session_browser'		=> array('VCHAR:150', ''),			'session_forwarded_for'	=> array('VCHAR:255', ''),			'session_page'			=> array('VCHAR_UNI', ''),			'session_viewonline'	=> array('BOOL', 1),			'session_autologin'		=> array('BOOL', 0),			'session_admin'			=> array('BOOL', 0),		),		'PRIMARY_KEY'	=> 'session_id',		'KEYS'			=> array(			'session_time'		=> array('INDEX', 'session_time'),			'session_user_id'	=> array('INDEX', 'session_user_id'),			'session_fid'		=> array('INDEX', 'session_forum_id'),		),	);	$schema_data['phpbb_sessions_keys'] = array(		'COLUMNS'		=> array(			'key_id'			=> array('CHAR:32', ''),			'user_id'			=> array('UINT', 0),			'last_ip'			=> array('VCHAR:40', ''),			'last_login'		=> array('TIMESTAMP', 0),		),		'PRIMARY_KEY'	=> array('key_id', 'user_id'),		'KEYS'			=> array(			'last_login'		=> array('INDEX', 'last_login'),		),	);	$schema_data['phpbb_sitelist'] = array(		'COLUMNS'		=> array(			'site_id'		=> array('UINT', NULL, 'auto_increment'),			'site_ip'		=> array('VCHAR:40', ''),			'site_hostname'	=> array('VCHAR', ''),			'ip_exclude'	=> array('BOOL', 0),		),		'PRIMARY_KEY'		=> 'site_id',	);	$schema_data['phpbb_smilies'] = array(		'COLUMNS'		=> array(			'smiley_id'			=> array('UINT', NULL, 'auto_increment'),			// We may want to set 'code' to VCHAR:50 or check if unicode support is possible... at the moment only ASCII characters are allowed.			'code'				=> array('VCHAR_UNI:50', ''),			'emotion'			=> array('VCHAR_UNI:50', ''),			'smiley_url'		=> array('VCHAR:50', ''),			'smiley_width'		=> array('USINT', 0),			'smiley_height'		=> array('USINT', 0),			'smiley_order'		=> array('UINT', 0),			'display_on_posting'=> array('BOOL', 1),		),		'PRIMARY_KEY'	=> 'smiley_id',		'KEYS'			=> array(			'display_on_post'		=> array('INDEX', 'display_on_posting'),		),	);	$schema_data['phpbb_styles'] = array(		'COLUMNS'		=> array(			'style_id'				=> array('UINT', NULL, 'auto_increment'),			'style_name'			=> array('VCHAR_UNI:255', ''),			'style_copyright'		=> array('VCHAR_UNI', ''),			'style_active'			=> array('BOOL', 1),			'template_id'			=> array('UINT', 0),			'theme_id'				=> array('UINT', 0),			'imageset_id'			=> array('UINT', 0),		),		'PRIMARY_KEY'	=> 'style_id',		'KEYS'			=> array(			'style_name'		=> array('UNIQUE', 'style_name'),			'template_id'		=> array('INDEX', 'template_id'),			'theme_id'			=> array('INDEX', 'theme_id'),			'imageset_id'		=> array('INDEX', 'imageset_id'),		),	);	$schema_data['phpbb_styles_template'] = array(		'COLUMNS'		=> array(			'template_id'			=> array('UINT', NULL, 'auto_increment'),			'template_name'			=> array('VCHAR_UNI:255', ''),			'template_copyright'	=> array('VCHAR_UNI', ''),			'template_path'			=> array('VCHAR:100', ''),			'bbcode_bitfield'		=> array('VCHAR:255', 'kNg='),			'template_storedb'		=> array('BOOL', 0),			'template_inherits_id'		=> array('UINT:4', 0),			'template_inherit_path'		=> array('VCHAR', ''),		),		'PRIMARY_KEY'	=> 'template_id',		'KEYS'			=> array(			'tmplte_nm'				=> array('UNIQUE', 'template_name'),		),	);	$schema_data['phpbb_styles_template_data'] = array(		'COLUMNS'		=> array(			'template_id'			=> array('UINT', 0),			'template_filename'		=> array('VCHAR:100', ''),			'template_included'		=> array('TEXT', ''),			'template_mtime'		=> array('TIMESTAMP', 0),			'template_data'			=> array('MTEXT_UNI', ''),		),		'KEYS'			=> array(			'tid'					=> array('INDEX', 'template_id'),			'tfn'					=> array('INDEX', 'template_filename'),		),	);	$schema_data['phpbb_styles_theme'] = array(		'COLUMNS'		=> array(			'theme_id'				=> array('UINT', NULL, 'auto_increment'),			'theme_name'			=> array('VCHAR_UNI:255', ''),			'theme_copyright'		=> array('VCHAR_UNI', ''),			'theme_path'			=> array('VCHAR:100', ''),			'theme_storedb'			=> array('BOOL', 0),			'theme_mtime'			=> array('TIMESTAMP', 0),			'theme_data'			=> array('MTEXT_UNI', ''),		),		'PRIMARY_KEY'	=> 'theme_id',		'KEYS'			=> array(			'theme_name'		=> array('UNIQUE', 'theme_name'),		),	);	$schema_data['phpbb_styles_imageset'] = array(		'COLUMNS'		=> array(			'imageset_id'				=> array('UINT', NULL, 'auto_increment'),			'imageset_name'				=> array('VCHAR_UNI:255', ''),			'imageset_copyright'		=> array('VCHAR_UNI', ''),			'imageset_path'				=> array('VCHAR:100', ''),		),		'PRIMARY_KEY'		=> 'imageset_id',		'KEYS'				=> array(			'imgset_nm'			=> array('UNIQUE', 'imageset_name'),		),	);	$schema_data['phpbb_styles_imageset_data'] = array(		'COLUMNS'		=> array(			'image_id'				=> array('UINT', NULL, 'auto_increment'),			'image_name'			=> array('VCHAR:200', ''),			'image_filename'		=> array('VCHAR:200', ''),			'image_lang'			=> array('VCHAR:30', ''),			'image_height'			=> array('USINT', 0),			'image_width'			=> array('USINT', 0),			'imageset_id'			=> array('UINT', 0),		),		'PRIMARY_KEY'		=> 'image_id',		'KEYS'				=> array(			'i_d'			=> array('INDEX', 'imageset_id'),		),	);	$schema_data['phpbb_topics'] = array(		'COLUMNS'		=> array(			'topic_id'					=> array('UINT', NULL, 'auto_increment'),			'forum_id'					=> array('UINT', 0),			'icon_id'					=> array('UINT', 0),			'topic_attachment'			=> array('BOOL', 0),			'topic_approved'			=> array('BOOL', 1),			'topic_reported'			=> array('BOOL', 0),			'topic_title'				=> array('STEXT_UNI', '', 'true_sort'),			'topic_poster'				=> array('UINT', 0),			'topic_time'				=> array('TIMESTAMP', 0),			'topic_time_limit'			=> array('TIMESTAMP', 0),			'topic_views'				=> array('UINT', 0),			'topic_replies'				=> array('UINT', 0),			'topic_replies_real'		=> array('UINT', 0),			'topic_status'				=> array('TINT:3', 0),			'topic_type'				=> array('TINT:3', 0),			'topic_first_post_id'		=> array('UINT', 0),			'topic_first_poster_name'	=> array('VCHAR_UNI', ''),			'topic_first_poster_colour'	=> array('VCHAR:6', ''),			'topic_last_post_id'		=> array('UINT', 0),			'topic_last_poster_id'		=> array('UINT', 0),			'topic_last_poster_name'	=> array('VCHAR_UNI', ''),			'topic_last_poster_colour'	=> array('VCHAR:6', ''),			'topic_last_post_subject'	=> array('STEXT_UNI', ''),			'topic_last_post_time'		=> array('TIMESTAMP', 0),			'topic_last_view_time'		=> array('TIMESTAMP', 0),			'topic_moved_id'			=> array('UINT', 0),			'topic_bumped'				=> array('BOOL', 0),			'topic_bumper'				=> array('UINT', 0),			'poll_title'				=> array('STEXT_UNI', ''),			'poll_start'				=> array('TIMESTAMP', 0),			'poll_length'				=> array('TIMESTAMP', 0),			'poll_max_options'			=> array('TINT:4', 1),			'poll_last_vote'			=> array('TIMESTAMP', 0),			'poll_vote_change'			=> array('BOOL', 0),		),		'PRIMARY_KEY'	=> 'topic_id',		'KEYS'			=> array(			'forum_id'			=> array('INDEX', 'forum_id'),			'forum_id_type'		=> array('INDEX', array('forum_id', 'topic_type')),			'last_post_time'	=> array('INDEX', 'topic_last_post_time'),			'topic_approved'	=> array('INDEX', 'topic_approved'),			'forum_appr_last'	=> array('INDEX', array('forum_id', 'topic_approved', 'topic_last_post_id')),			'fid_time_moved'	=> array('INDEX', array('forum_id', 'topic_last_post_time', 'topic_moved_id')),		),	);	$schema_data['phpbb_topics_track'] = array(		'COLUMNS'		=> array(			'user_id'			=> array('UINT', 0),			'topic_id'			=> array('UINT', 0),			'forum_id'			=> array('UINT', 0),			'mark_time'			=> array('TIMESTAMP', 0),		),		'PRIMARY_KEY'	=> array('user_id', 'topic_id'),		'KEYS'			=> array(			'topic_id'			=> array('INDEX', 'topic_id'),			'forum_id'			=> array('INDEX', 'forum_id'),		),	);	$schema_data['phpbb_topics_posted'] = array(		'COLUMNS'		=> array(			'user_id'			=> array('UINT', 0),			'topic_id'			=> array('UINT', 0),			'topic_posted'		=> array('BOOL', 0),		),		'PRIMARY_KEY'	=> array('user_id', 'topic_id'),	);	$schema_data['phpbb_topics_watch'] = array(		'COLUMNS'		=> array(			'topic_id'			=> array('UINT', 0),			'user_id'			=> array('UINT', 0),			'notify_status'		=> array('BOOL', 0),		),		'KEYS'			=> array(			'topic_id'			=> array('INDEX', 'topic_id'),			'user_id'			=> array('INDEX', 'user_id'),			'notify_stat'		=> array('INDEX', 'notify_status'),		),	);	$schema_data['phpbb_user_group'] = array(		'COLUMNS'		=> array(			'group_id'			=> array('UINT', 0),			'user_id'			=> array('UINT', 0),			'group_leader'		=> array('BOOL', 0),			'user_pending'		=> array('BOOL', 1),		),		'KEYS'			=> array(			'group_id'			=> array('INDEX', 'group_id'),			'user_id'			=> array('INDEX', 'user_id'),			'group_leader'		=> array('INDEX', 'group_leader'),		),	);	$schema_data['phpbb_users'] = array(		'COLUMNS'		=> array(			'user_id'					=> array('UINT', NULL, 'auto_increment'),			'user_type'					=> array('TINT:2', 0),			'group_id'					=> array('UINT', 3),			'user_permissions'			=> array('MTEXT', ''),			'user_perm_from'			=> array('UINT', 0),			'user_ip'					=> array('VCHAR:40', ''),			'user_regdate'				=> array('TIMESTAMP', 0),			'username'					=> array('VCHAR_CI', ''),			'username_clean'			=> array('VCHAR_CI', ''),			'user_password'				=> array('VCHAR_UNI:40', ''),			'user_passchg'				=> array('TIMESTAMP', 0),			'user_pass_convert'			=> array('BOOL', 0),			'user_email'				=> array('VCHAR_UNI:100', ''),			'user_email_hash'			=> array('BINT', 0),			'user_birthday'				=> array('VCHAR:10', ''),			'user_lastvisit'			=> array('TIMESTAMP', 0),			'user_lastmark'				=> array('TIMESTAMP', 0),			'user_lastpost_time'		=> array('TIMESTAMP', 0),			'user_lastpage'				=> array('VCHAR_UNI:200', ''),			'user_last_confirm_key'		=> array('VCHAR:10', ''),			'user_last_search'			=> array('TIMESTAMP', 0),			'user_warnings'				=> array('TINT:4', 0),			'user_last_warning'			=> array('TIMESTAMP', 0),			'user_login_attempts'		=> array('TINT:4', 0),			'user_inactive_reason'		=> array('TINT:2', 0),			'user_inactive_time'		=> array('TIMESTAMP', 0),			'user_posts'				=> array('UINT', 0),			'user_lang'					=> array('VCHAR:30', ''),			'user_timezone'				=> array('DECIMAL', 0),			'user_dst'					=> array('BOOL', 0),			'user_dateformat'			=> array('VCHAR_UNI:30', 'd M Y H:i'),			'user_style'				=> array('UINT', 0),			'user_rank'					=> array('UINT', 0),			'user_colour'				=> array('VCHAR:6', ''),			'user_new_privmsg'			=> array('INT:4', 0),			'user_unread_privmsg'		=> array('INT:4', 0),			'user_last_privmsg'			=> array('TIMESTAMP', 0),			'user_message_rules'		=> array('BOOL', 0),			'user_full_folder'			=> array('INT:11', -3),			'user_emailtime'			=> array('TIMESTAMP', 0),			'user_topic_show_days'		=> array('USINT', 0),			'user_topic_sortby_type'	=> array('VCHAR:1', 't'),			'user_topic_sortby_dir'		=> array('VCHAR:1', 'd'),			'user_post_show_days'		=> array('USINT', 0),			'user_post_sortby_type'		=> array('VCHAR:1', 't'),			'user_post_sortby_dir'		=> array('VCHAR:1', 'a'),			'user_notify'				=> array('BOOL', 0),			'user_notify_pm'			=> array('BOOL', 1),			'user_notify_type'			=> array('TINT:4', 0),			'user_allow_pm'				=> array('BOOL', 1),			'user_allow_viewonline'		=> array('BOOL', 1),			'user_allow_viewemail'		=> array('BOOL', 1),			'user_allow_massemail'		=> array('BOOL', 1),			'user_options'				=> array('UINT:11', 230271),			'user_avatar'				=> array('VCHAR', ''),			'user_avatar_type'			=> array('TINT:2', 0),			'user_avatar_width'			=> array('USINT', 0),			'user_avatar_height'		=> array('USINT', 0),			'user_sig'					=> array('MTEXT_UNI', ''),			'user_sig_bbcode_uid'		=> array('VCHAR:8', ''),			'user_sig_bbcode_bitfield'	=> array('VCHAR:255', ''),			'user_from'					=> array('VCHAR_UNI:100', ''),			'user_icq'					=> array('VCHAR:15', ''),			'user_aim'					=> array('VCHAR_UNI', ''),			'user_yim'					=> array('VCHAR_UNI', ''),			'user_msnm'					=> array('VCHAR_UNI', ''),			'user_jabber'				=> array('VCHAR_UNI', ''),			'user_website'				=> array('VCHAR_UNI:200', ''),			'user_occ'					=> array('TEXT_UNI', ''),			'user_interests'			=> array('TEXT_UNI', ''),			'user_actkey'				=> array('VCHAR:32', ''),			'user_newpasswd'			=> array('VCHAR_UNI:40', ''),			'user_form_salt'			=> array('VCHAR_UNI:32', ''),			'user_new'					=> array('BOOL', 1),			'user_reminded'				=> array('TINT:4', 0),			'user_reminded_time'		=> array('TIMESTAMP', 0),		),		'PRIMARY_KEY'	=> 'user_id',		'KEYS'			=> array(			'user_birthday'				=> array('INDEX', 'user_birthday'),			'user_email_hash'			=> array('INDEX', 'user_email_hash'),			'user_type'					=> array('INDEX', 'user_type'),			'username_clean'			=> array('UNIQUE', 'username_clean'),		),	);	$schema_data['phpbb_warnings'] = array(		'COLUMNS'		=> array(			'warning_id'			=> array('UINT', NULL, 'auto_increment'),			'user_id'				=> array('UINT', 0),			'post_id'				=> array('UINT', 0),			'log_id'				=> array('UINT', 0),			'warning_time'			=> array('TIMESTAMP', 0),		),		'PRIMARY_KEY'	=> 'warning_id',	);	$schema_data['phpbb_words'] = array(		'COLUMNS'		=> array(			'word_id'				=> array('UINT', NULL, 'auto_increment'),			'word'					=> array('VCHAR_UNI', ''),			'replacement'			=> array('VCHAR_UNI', ''),		),		'PRIMARY_KEY'	=> 'word_id',	);	$schema_data['phpbb_zebra'] = array(		'COLUMNS'		=> array(			'user_id'				=> array('UINT', 0),			'zebra_id'				=> array('UINT', 0),			'friend'				=> array('BOOL', 0),			'foe'					=> array('BOOL', 0),		),		'PRIMARY_KEY'	=> array('user_id', 'zebra_id'),	);	return $schema_data;}/*** Data put into the header for various dbms*/function custom_data($dbms){	switch ($dbms)	{		case 'oracle':			return <<<EOF/*  This first section is optional, however its probably the best method  of running phpBB on Oracle. If you already have a tablespace and user created  for phpBB you can leave this section commented out!  The first set of statements create a phpBB tablespace and a phpBB user,  make sure you change the password of the phpBB user before you run this script!!*//*CREATE TABLESPACE "PHPBB"	LOGGING	DATAFILE 'E:\ORACLE\ORADATA\LOCAL\PHPBB.ora'	SIZE 10M	AUTOEXTEND ON NEXT 10M	MAXSIZE 100M;CREATE USER "PHPBB"	PROFILE "DEFAULT"	IDENTIFIED BY "phpbb_password"	DEFAULT TABLESPACE "PHPBB"	QUOTA UNLIMITED ON "PHPBB"	ACCOUNT UNLOCK;GRANT ANALYZE ANY TO "PHPBB";GRANT CREATE SEQUENCE TO "PHPBB";GRANT CREATE SESSION TO "PHPBB";GRANT CREATE TABLE TO "PHPBB";GRANT CREATE TRIGGER TO "PHPBB";GRANT CREATE VIEW TO "PHPBB";GRANT "CONNECT" TO "PHPBB";COMMIT;DISCONNECT;CONNECT phpbb/phpbb_password;*/EOF;		break;		case 'postgres':			return <<<EOF/*	Domain definition*/CREATE DOMAIN varchar_ci AS varchar(255) NOT NULL DEFAULT ''::character varying;/*	Operation Functions*/CREATE FUNCTION _varchar_ci_equal(varchar_ci, varchar_ci) RETURNS boolean AS 'SELECT LOWER($1) = LOWER($2)' LANGUAGE SQL STRICT;CREATE FUNCTION _varchar_ci_not_equal(varchar_ci, varchar_ci) RETURNS boolean AS 'SELECT LOWER($1) != LOWER($2)' LANGUAGE SQL STRICT;CREATE FUNCTION _varchar_ci_less_than(varchar_ci, varchar_ci) RETURNS boolean AS 'SELECT LOWER($1) < LOWER($2)' LANGUAGE SQL STRICT;CREATE FUNCTION _varchar_ci_less_equal(varchar_ci, varchar_ci) RETURNS boolean AS 'SELECT LOWER($1) <= LOWER($2)' LANGUAGE SQL STRICT;CREATE FUNCTION _varchar_ci_greater_than(varchar_ci, varchar_ci) RETURNS boolean AS 'SELECT LOWER($1) > LOWER($2)' LANGUAGE SQL STRICT;CREATE FUNCTION _varchar_ci_greater_equals(varchar_ci, varchar_ci) RETURNS boolean AS 'SELECT LOWER($1) >= LOWER($2)' LANGUAGE SQL STRICT;/*	Operators*/CREATE OPERATOR <(  PROCEDURE = _varchar_ci_less_than,  LEFTARG = varchar_ci,  RIGHTARG = varchar_ci,  COMMUTATOR = >,  NEGATOR = >=,  RESTRICT = scalarltsel,  JOIN = scalarltjoinsel);CREATE OPERATOR <=(  PROCEDURE = _varchar_ci_less_equal,  LEFTARG = varchar_ci,  RIGHTARG = varchar_ci,  COMMUTATOR = >=,  NEGATOR = >,  RESTRICT = scalarltsel,  JOIN = scalarltjoinsel);CREATE OPERATOR >(  PROCEDURE = _varchar_ci_greater_than,  LEFTARG = varchar_ci,  RIGHTARG = varchar_ci,  COMMUTATOR = <,  NEGATOR = <=,  RESTRICT = scalargtsel,  JOIN = scalargtjoinsel);CREATE OPERATOR >=(  PROCEDURE = _varchar_ci_greater_equals,  LEFTARG = varchar_ci,  RIGHTARG = varchar_ci,  COMMUTATOR = <=,  NEGATOR = <,  RESTRICT = scalargtsel,  JOIN = scalargtjoinsel);CREATE OPERATOR <>(  PROCEDURE = _varchar_ci_not_equal,  LEFTARG = varchar_ci,  RIGHTARG = varchar_ci,  COMMUTATOR = <>,  NEGATOR = =,  RESTRICT = neqsel,  JOIN = neqjoinsel);CREATE OPERATOR =(  PROCEDURE = _varchar_ci_equal,  LEFTARG = varchar_ci,  RIGHTARG = varchar_ci,  COMMUTATOR = =,  NEGATOR = <>,  RESTRICT = eqsel,  JOIN = eqjoinsel,  HASHES,  MERGES,  SORT1= <);EOF;		break;	}	return '';}echo 'done';
<?php/**** @package phpBB3* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**/if (php_sapi_name() != 'cli'){	die("This program must be run from the command line.\n");}//// Security message://// This script is potentially dangerous.// Remove or comment the next line (die(".... ) to enable this script.// Do NOT FORGET to either remove this script or disable it after you have used it.//die("Please read the first lines of this script for instructions on how to enable it");set_time_limit(0);define('IN_PHPBB', true);$phpbb_root_path = '../';$phpEx = substr(strrchr(__FILE__, '.'), 1);echo "Checking for required files\n";download('http://unicode.org/reports/tr39/data/confusables.txt');download('http://unicode.org/Public/UNIDATA/CaseFolding.txt');echo "\n";/*** Load the confusables table*/echo "Loading confusables\n";$unidata = file_get_contents('confusables.txt');/*** Load the CaseFolding table*/echo "Loading CaseFolding\n";$casefolds = file_get_contents('CaseFolding.txt');function utf8_chr($cp){    if ($cp > 0xFFFF)    {        return chr(0xF0 | ($cp >> 18)) . chr(0x80 | (($cp >> 12) & 0x3F)) . chr(0x80 | (($cp >> 6) & 0x3F)) . chr(0x80 | ($cp & 0x3F));    }    else if ($cp > 0x7FF)    {        return chr(0xE0 | ($cp >> 12)) . chr(0x80 | (($cp >> 6) & 0x3F)) . chr(0x80 | ($cp & 0x3F));    }    else if ($cp > 0x7F)    {        return chr(0xC0 | ($cp >> 6)) . chr(0x80 | ($cp & 0x3F));    }    else    {        return chr($cp);    }}preg_match_all('/^([0-9A-F]+) ;\s((?:[0-9A-F]+ )*);.*?$/im', $unidata, $array, PREG_SET_ORDER);preg_match_all('/^([0-9A-F]+); ([CFS]); ([0-9A-F]+(?: [0-9A-F]+)*);/im', $casefolds, $casefold_array);// some that we defined ourselves$uniarray = array(		"\xC2\xA1"			=>	"\x69",	// EXCLAMATION MARK, INVERTED => LATIN SMALL LETTER I		"\xC7\x83"			=>	"\x21",	// LATIN LETTER RETROFLEX CLICK => EXCLAMATION MARK		"\xCE\xB1"			=>	"\x61",	// GREEK SMALL LETTER ALPHA => LATIN SMALL LETTER A		"\xE1\x9A\x80"		=>	"\x20",	// OGHAM SPACE MARK		"\xC2\xAD"			=>	'',		// HYPHEN, SOFT => empty string		"\xDB\x9D"			=>	'',		// ARABIC END OF AYAH		"\xDC\x8F"			=>	'',		// SYRIAC ABBREVIATION MARK		"\xE1\xA0\x86"		=>	'',		// MONGOLIAN TODO SOFT HYPHEN		"\xE1\xA0\x8E"		=>	'',		// MONGOLIAN VOWEL SEPARATOR		"\xE2\x80\x8B"		=>	'',		// ZERO WIDTH SPACE		"\xE2\x80\x8C"		=>	'',		// ZERO WIDTH NON-JOINER		"\xE2\x80\x8D"		=>	'',		// ZERO WIDTH JOINER		"\xE2\x80\xA8"		=>	'',		// LINE SEPARATOR		"\xE2\x80\xA9"		=>	'',		// PARAGRAPH SEPARATOR		"\xE2\x81\xA0"		=>	'',		// WORD JOINER		"\xE2\x81\xA1"		=>	'',		// FUNCTION APPLICATION		"\xE2\x81\xA2"		=>	'',		// INVISIBLE TIMES		"\xE2\x81\xA3"		=>	'',		// INVISIBLE SEPARATOR		"\xE2\x81\xAA"		=>	'',		// [CONTROL CHARACTERS]		"\xE2\x81\xAB"		=>	'',		// [CONTROL CHARACTERS]		"\xE2\x81\xAC"		=>	'',		// [CONTROL CHARACTERS]		"\xE2\x81\xAD"		=>	'',		// [CONTROL CHARACTERS]		"\xE2\x81\xAE"		=>	'',		// [CONTROL CHARACTERS]		"\xE2\x81\xAF"		=>	'',		// [CONTROL CHARACTERS]		"\xEF\xBB\xBF"		=>	'',		// ZERO WIDTH NO-BREAK SPACE		"\xEF\xBF\xB9"		=>	'',		// [CONTROL CHARACTERS]		"\xEF\xBF\xBA"		=>	'',		// [CONTROL CHARACTERS]		"\xEF\xBF\xBB"		=>	'',		// [CONTROL CHARACTERS]		"\xEF\xBF\xBC"		=>	'',		// [CONTROL CHARACTERS]		"\xF0\x9D\x85\xB3"	=>	'',		// [MUSICAL CONTROL CHARACTERS]		"\xF0\x9D\x85\xB4"	=>	'',		// [MUSICAL CONTROL CHARACTERS]		"\xF0\x9D\x85\xB5"	=>	'',		// [MUSICAL CONTROL CHARACTERS]		"\xF0\x9D\x85\xB6"	=>	'',		// [MUSICAL CONTROL CHARACTERS]		"\xF0\x9D\x85\xB7"	=>	'',		// [MUSICAL CONTROL CHARACTERS]		"\xF0\x9D\x85\xB8"	=>	'',		// [MUSICAL CONTROL CHARACTERS]		"\xF0\x9D\x85\xB9"	=>	'',		// [MUSICAL CONTROL CHARACTERS]		"\xF0\x9D\x85\xBA"	=>	'',		// [MUSICAL CONTROL CHARACTERS]);$copy = $uniarray;/*** @todo we need to check that the $uniarray does not reverse any of the mappings defined in the unicode definition*/foreach ($array as $value){	$temp_hold = implode(array_map('utf8_chr', array_map('hexdec', explode(' ', trim($value[2])))));	if (isset($copy[utf8_chr(hexdec((string)$value[1]))]))	{		$num = '';		$string = utf8_chr(hexdec((string)$value[1]));		for ($i = 0; $i < strlen($string); $i++)		{			$num .= '\x' . str_pad(base_convert(ord($string[$i]), 10, 16), 2, '0', STR_PAD_LEFT);		}		echo $num . "\n";		if ($uniarray[$string] != $temp_hold)		{			echo "  --> $string\n";			echo "  --> " . $temp_hold . "\n";		}	}	// do some tests for things that transform into something with the number one	if (strpos($temp_hold, utf8_chr(0x0031)) !== false)	{		// any kind of letter L?		if (strpos($value[0], 'LETTER L') !== false || strpos($value[0], 'IOTA') !== false || strpos($value[0], 'SMALL L ') !== false || preg_match('/SMALL LIGATURE [^L]*L /', $value[0]))		{			// replace all of the mappings that transform some sort of letter l to number one instead to some sort of letter l to latin small letter l			$temp_hold = str_replace(utf8_chr(0x0031), utf8_chr(0x006C), $temp_hold);		}	}	// uppercased chars that were folded do not exist in this universe,	// no amount of normalization could ever "trick" this into not working	if (in_array($value[1], $casefold_array[1]))	{		continue;	}	$uniarray[utf8_chr(hexdec((string)$value[1]))] = $temp_hold;}echo "Writing to confusables.$phpEx\n";$fp = fopen($phpbb_root_path . 'includes/utf/data/confusables.' . $phpEx, 'wb');fwrite($fp, '<?php return ' . my_var_export($uniarray) . ';');fclose($fp);/*** Return a parsable string representation of a variable** This is function is limited to array/strings/integers** @param	mixed	$var		Variable* @return	string				PHP code representing the variable*/function my_var_export($var){	if (is_array($var))	{		$lines = array();		foreach ($var as $k => $v)		{			$lines[] = my_var_export($k) . '=>' . my_var_export($v);		}		return 'array(' . implode(',', $lines) . ')';	}	else if (is_string($var))	{		return "'" . str_replace(array('\\', "'"), array('\\\\', "\\'"), $var) . "'";	}	else	{		return $var;	}}/*** Download a file to the develop/ dir** @param	string	$url		URL of the file to download* @return	void*/function download($url){	global $phpbb_root_path;	if (file_exists($phpbb_root_path . 'develop/' . basename($url)))	{		return;	}	echo 'Downloading from ', $url, ' ';	if (!$fpr = fopen($url, 'rb'))	{		die("Can't download from $url\nPlease download it yourself and put it in the develop/ dir, kthxbai");	}	if (!$fpw = fopen($phpbb_root_path . 'develop/' . basename($url), 'wb'))	{		die("Can't open develop/" . basename($url) . " for output... please check your permissions or something");	}	$i = 0;	$chunk = 32768;	$done = '';	while (!feof($fpr))	{		$i += fwrite($fpw, fread($fpr, $chunk));		echo str_repeat("\x08", strlen($done));		$done = ($i >> 10) . ' KiB';		echo $done;	}	fclose($fpr);	fclose($fpw);	echo "\n";}?>
<?php/**** @package dbal* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @ignore*/if (!defined('IN_PHPBB')){	exit;}include_once($phpbb_root_path . 'includes/db/dbal.' . $phpEx);/*** Unified ODBC functions* Unified ODBC functions support any database having ODBC driver, for example Adabas D, IBM DB2, iODBC, Solid, Sybase SQL Anywhere...* Here we only support MSSQL Server 2000+ because of the provided schema** @note number of bytes returned for returning data depends on odbc.defaultlrl php.ini setting.* If it is limited to 4K for example only 4K of data is returned max, resulting in incomplete theme data for example.* @note odbc.defaultbinmode may affect UTF8 characters** @package dbal*/class dbal_mssql_odbc extends dbal{	var $last_query_text = '';	/**	* Connect to server	*/	function sql_connect($sqlserver, $sqluser, $sqlpassword, $database, $port = false, $persistency = false, $new_link = false)	{		$this->persistency = $persistency;		$this->user = $sqluser;		$this->dbname = $database;		$port_delimiter = (defined('PHP_OS') && substr(PHP_OS, 0, 3) === 'WIN') ? ',' : ':';		$this->server = $sqlserver . (($port) ? $port_delimiter . $port : '');		$max_size = @ini_get('odbc.defaultlrl');		if (!empty($max_size))		{			$unit = strtolower(substr($max_size, -1, 1));			$max_size = (int) $max_size;			if ($unit == 'k')			{				$max_size = floor($max_size / 1024);			}			else if ($unit == 'g')			{				$max_size *= 1024;			}			else if (is_numeric($unit))			{				$max_size = floor((int) ($max_size . $unit) / 1048576);			}			$max_size = max(8, $max_size) . 'M';			@ini_set('odbc.defaultlrl', $max_size);		}		$this->db_connect_id = ($this->persistency) ? @odbc_pconnect($this->server, $this->user, $sqlpassword) : @odbc_connect($this->server, $this->user, $sqlpassword);		return ($this->db_connect_id) ? $this->db_connect_id : $this->sql_error('');	}	/**	* Version information about used database	* @param bool $raw if true, only return the fetched sql_server_version	* @param bool $use_cache If true, it is safe to retrieve the value from the cache	* @return string sql server version	*/	function sql_server_info($raw = false, $use_cache = true)	{		global $cache;		if (!$use_cache || empty($cache) || ($this->sql_server_version = $cache->get('mssqlodbc_version')) === false)		{			$result_id = @odbc_exec($this->db_connect_id, "SELECT SERVERPROPERTY('productversion'), SERVERPROPERTY('productlevel'), SERVERPROPERTY('edition')");			$row = false;			if ($result_id)			{				$row = @odbc_fetch_array($result_id);				@odbc_free_result($result_id);			}			$this->sql_server_version = ($row) ? trim(implode(' ', $row)) : 0;			if (!empty($cache) && $use_cache)			{				$cache->put('mssqlodbc_version', $this->sql_server_version);			}		}		if ($raw)		{			return $this->sql_server_version;		}		return ($this->sql_server_version) ? 'MSSQL (ODBC)<br />' . $this->sql_server_version : 'MSSQL (ODBC)';	}	/**	* SQL Transaction	* @access private	*/	function _sql_transaction($status = 'begin')	{		switch ($status)		{			case 'begin':				return @odbc_exec($this->db_connect_id, 'BEGIN TRANSACTION');			break;			case 'commit':				return @odbc_exec($this->db_connect_id, 'COMMIT TRANSACTION');			break;			case 'rollback':				return @odbc_exec($this->db_connect_id, 'ROLLBACK TRANSACTION');			break;		}		return true;	}	/**	* Base query method	*	* @param	string	$query		Contains the SQL query which shall be executed	* @param	int		$cache_ttl	Either 0 to avoid caching or the time in seconds which the result shall be kept in cache	* @return	mixed				When casted to bool the returned value returns true on success and false on failure	*	* @access	public	*/	function sql_query($query = '', $cache_ttl = 0)	{		if ($query != '')		{			global $cache;			// EXPLAIN only in extra debug mode			if (defined('DEBUG_EXTRA'))			{				$this->sql_report('start', $query);			}			$this->last_query_text = $query;			$this->query_result = ($cache_ttl && method_exists($cache, 'sql_load')) ? $cache->sql_load($query) : false;			$this->sql_add_num_queries($this->query_result);			if ($this->query_result === false)			{				if (($this->query_result = @odbc_exec($this->db_connect_id, $query)) === false)				{					$this->sql_error($query);				}				if (defined('DEBUG_EXTRA'))				{					$this->sql_report('stop', $query);				}				if ($cache_ttl && method_exists($cache, 'sql_save'))				{					$this->open_queries[(int) $this->query_result] = $this->query_result;					$cache->sql_save($query, $this->query_result, $cache_ttl);				}				else if (strpos($query, 'SELECT') === 0 && $this->query_result)				{					$this->open_queries[(int) $this->query_result] = $this->query_result;				}			}			else if (defined('DEBUG_EXTRA'))			{				$this->sql_report('fromcache', $query);			}		}		else		{			return false;		}		return $this->query_result;	}	/**	* Build LIMIT query	*/	function _sql_query_limit($query, $total, $offset = 0, $cache_ttl = 0)	{		$this->query_result = false;		// Since TOP is only returning a set number of rows we won't need it if total is set to 0 (return all rows)		if ($total)		{			// We need to grab the total number of rows + the offset number of rows to get the correct result			if (strpos($query, 'SELECT DISTINCT') === 0)			{				$query = 'SELECT DISTINCT TOP ' . ($total + $offset) . ' ' . substr($query, 15);			}			else			{				$query = 'SELECT TOP ' . ($total + $offset) . ' ' . substr($query, 6);			}		}		$result = $this->sql_query($query, $cache_ttl);		// Seek by $offset rows		if ($offset)		{			$this->sql_rowseek($offset, $result);		}		return $result;	}	/**	* Return number of affected rows	*/	function sql_affectedrows()	{		return ($this->db_connect_id) ? @odbc_num_rows($this->query_result) : false;	}	/**	* Fetch current row	* @note number of bytes returned depends on odbc.defaultlrl php.ini setting. If it is limited to 4K for example only 4K of data is returned max.	*/	function sql_fetchrow($query_id = false, $debug = false)	{		global $cache;		if ($query_id === false)		{			$query_id = $this->query_result;		}		if (isset($cache->sql_rowset[$query_id]))		{			return $cache->sql_fetchrow($query_id);		}		return ($query_id !== false) ? @odbc_fetch_array($query_id) : false;	}	/**	* Seek to given row number	* rownum is zero-based	*/	function sql_rowseek($rownum, &$query_id)	{		global $cache;		if ($query_id === false)		{			$query_id = $this->query_result;		}		if (isset($cache->sql_rowset[$query_id]))		{			return $cache->sql_rowseek($rownum, $query_id);		}		if ($query_id === false)		{			return false;		}		$this->sql_freeresult($query_id);		$query_id = $this->sql_query($this->last_query_text);		if ($query_id === false)		{			return false;		}		// We do not fetch the row for rownum == 0 because then the next resultset would be the second row		for ($i = 0; $i < $rownum; $i++)		{			if (!$this->sql_fetchrow($query_id))			{				return false;			}		}		return true;	}	/**	* Get last inserted id after insert statement	*/	function sql_nextid()	{		$result_id = @odbc_exec($this->db_connect_id, 'SELECT @@IDENTITY');		if ($result_id)		{			if (@odbc_fetch_array($result_id))			{				$id = @odbc_result($result_id, 1);				@odbc_free_result($result_id);				return $id;			}			@odbc_free_result($result_id);		}		return false;	}	/**	* Free sql result	*/	function sql_freeresult($query_id = false)	{		global $cache;		if ($query_id === false)		{			$query_id = $this->query_result;		}		if (isset($cache->sql_rowset[$query_id]))		{			return $cache->sql_freeresult($query_id);		}		if (isset($this->open_queries[(int) $query_id]))		{			unset($this->open_queries[(int) $query_id]);			return @odbc_free_result($query_id);		}		return false;	}	/**	* Escape string used in sql query	*/	function sql_escape($msg)	{		return str_replace(array("'", "\0"), array("''", ''), $msg);	}	/**	* Build LIKE expression	* @access private	*/	function _sql_like_expression($expression)	{		return $expression . " ESCAPE '\\'";	}	/**	* Build db-specific query data	* @access private	*/	function _sql_custom_build($stage, $data)	{		return $data;	}	/**	* return sql error array	* @access private	*/	function _sql_error()	{		return array(			'message'	=> @odbc_errormsg(),			'code'		=> @odbc_error()		);	}	/**	* Close sql connection	* @access private	*/	function _sql_close()	{		return @odbc_close($this->db_connect_id);	}	/**	* Build db-specific report	* @access private	*/	function _sql_report($mode, $query = '')	{		switch ($mode)		{			case 'start':			break;			case 'fromcache':				$endtime = explode(' ', microtime());				$endtime = $endtime[0] + $endtime[1];				$result = @odbc_exec($this->db_connect_id, $query);				while ($void = @odbc_fetch_array($result))				{					// Take the time spent on parsing rows into account				}				@odbc_free_result($result);				$splittime = explode(' ', microtime());				$splittime = $splittime[0] + $splittime[1];				$this->sql_report('record_fromcache', $query, $endtime, $splittime);			break;		}	}}?>
<?php/***************************************************************************   *                           merge_clean_posts.php   *                            -------------------                          *   begin                : Tuesday, February 25, 2003  *   copyright            : (C) 2003 The phpBB Group         *   email                : support@phpbb.com                            *                                                           *   $Id$ *  ***************************************************************************/ /***************************************************************************   *                                                      *   This program is free software; you can redistribute it and/or modify     *   it under the terms of the GNU General Public License as published by    *   the Free Software Foundation; either version 2 of the License, or   *   (at your option) any later version.                       *  ***************************************************************************/ //// Security message://// This script is potentially dangerous.// Remove or comment the next line (die(".... ) to enable this script.// Do NOT FORGET to either remove this script or disable it after you have used it.//die("Please read the first lines of this script for instructions on how to enable it");@set_time_limit(2400);// This script adds missing permissions$db = $dbhost = $dbuser = $dbpasswd = $dbport = $dbname = '';define('IN_PHPBB', 1);define('ANONYMOUS', 1);$phpEx = substr(strrchr(__FILE__, '.'), 1);$phpbb_root_path='./../';include($phpbb_root_path . 'config.'.$phpEx);require($phpbb_root_path . 'includes/acm/acm_' . $acm_type . '.'.$phpEx);require($phpbb_root_path . 'includes/db/' . $dbms . '.'.$phpEx);include($phpbb_root_path . 'includes/functions.'.$phpEx);$cache		= new acm();$db			= new $sql_db();// Connect to DB$db->sql_connect($dbhost, $dbuser, $dbpasswd, $dbname, $dbport, false);$sql = "SELECT post_id, post_text FROM {$table_prefix}posts WHERE post_text LIKE '%{SMILE_PATH}%'";$result = $db->sql_query($sql);while ($row = $db->sql_fetchrow($result)){	$db->sql_query("UPDATE {$table_prefix}posts SET post_text = '" . $db->sql_escape(str_replace('{SMILE_PATH}', '{SMILIES_PATH}', $row['post_text'])) . "' WHERE post_id = " . $row['post_id']);}$db->sql_freeresult($result);echo "<p><b>Done</b></p>\n"; ?>
<?php/**** @package phpBB3* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @ignore*/if (!defined('IN_PHPBB')){	exit;}/*** Fill smiley templates (or just the variables) with smilies, either in a window or inline*/function generate_smilies($mode, $forum_id){	global $auth, $db, $user, $config, $template;	global $phpEx, $phpbb_root_path;	$start = request_var('start', 0);	if ($mode == 'window')	{		if ($forum_id)		{			$sql = 'SELECT forum_style				FROM ' . FORUMS_TABLE . "				WHERE forum_id = $forum_id";			$result = $db->sql_query_limit($sql, 1);			$row = $db->sql_fetchrow($result);			$db->sql_freeresult($result);			$user->setup('posting', (int) $row['forum_style']);		}		else		{			$user->setup('posting');		}		page_header($user->lang['SMILIES']);		$sql = 'SELECT COUNT(smiley_id) AS item_count			FROM ' . SMILIES_TABLE . '			GROUP BY smiley_url';		$result = $db->sql_query($sql, 3600);		$smiley_count = 0;		while ($row = $db->sql_fetchrow($result))		{			++$smiley_count;		}		$db->sql_freeresult($result);		$template->set_filenames(array(			'body' => 'posting_smilies.html')		);		$template->assign_var('PAGINATION',			generate_pagination(append_sid("{$phpbb_root_path}posting.$phpEx", 'mode=smilies&amp;f=' . $forum_id),				$smiley_count, $config['smilies_per_page'], $start, true)		);	}	$display_link = false;	if ($mode == 'inline')	{		$sql = 'SELECT smiley_id			FROM ' . SMILIES_TABLE . '			WHERE display_on_posting = 0';		$result = $db->sql_query_limit($sql, 1, 0, 3600);		if ($row = $db->sql_fetchrow($result))		{			$display_link = true;		}		$db->sql_freeresult($result);	}	if ($mode == 'window')	{		$sql = 'SELECT smiley_url, MIN(emotion) as emotion, MIN(code) AS code, smiley_width, smiley_height, MIN(smiley_order) AS min_smiley_order			FROM ' . SMILIES_TABLE . '			GROUP BY smiley_url, smiley_width, smiley_height			ORDER BY min_smiley_order';		$result = $db->sql_query_limit($sql, $config['smilies_per_page'], $start, 3600);	}	else	{		$sql = 'SELECT *			FROM ' . SMILIES_TABLE . '			WHERE display_on_posting = 1			ORDER BY smiley_order';		$result = $db->sql_query($sql, 3600);	}	$smilies = array();	while ($row = $db->sql_fetchrow($result))	{		if (empty($smilies[$row['smiley_url']]))		{			$smilies[$row['smiley_url']] = $row;		}	}	$db->sql_freeresult($result);	if (sizeof($smilies))	{		$root_path = (defined('PHPBB_USE_BOARD_URL_PATH') && PHPBB_USE_BOARD_URL_PATH) ? generate_board_url() . '/' : $phpbb_root_path;		foreach ($smilies as $row)		{			$template->assign_block_vars('smiley', array(				'SMILEY_CODE'	=> $row['code'],				'A_SMILEY_CODE'	=> addslashes($row['code']),				'SMILEY_IMG'	=> $root_path . $config['smilies_path'] . '/' . $row['smiley_url'],				'SMILEY_WIDTH'	=> $row['smiley_width'],				'SMILEY_HEIGHT'	=> $row['smiley_height'],				'SMILEY_DESC'	=> $row['emotion'])			);		}	}	if ($mode == 'inline' && $display_link)	{		$template->assign_vars(array(			'S_SHOW_SMILEY_LINK' 	=> true,			'U_MORE_SMILIES' 		=> append_sid("{$phpbb_root_path}posting.$phpEx", 'mode=smilies&amp;f=' . $forum_id))		);	}	if ($mode == 'window')	{		page_footer();	}}/*** Update last post information* Should be used instead of sync() if only the last post information are out of sync... faster** @param	string	$type				Can be forum|topic* @param	mixed	$ids				topic/forum ids* @param	bool	$return_update_sql	true: SQL query shall be returned, false: execute SQL*/function update_post_information($type, $ids, $return_update_sql = false){	global $db;	if (empty($ids))	{		return;	}	if (!is_array($ids))	{		$ids = array($ids);	}	$update_sql = $empty_forums = $not_empty_forums = array();	if ($type != 'topic')	{		$topic_join = ', ' . TOPICS_TABLE . ' t';		$topic_condition = 'AND t.topic_id = p.topic_id AND t.topic_approved = 1';	}	else	{		$topic_join = '';		$topic_condition = '';	}	if (sizeof($ids) == 1)	{		$sql = 'SELECT MAX(p.post_id) as last_post_id			FROM ' . POSTS_TABLE . " p $topic_join			WHERE " . $db->sql_in_set('p.' . $type . '_id', $ids) . "				$topic_condition				AND p.post_approved = 1";	}	else	{		$sql = 'SELECT p.' . $type . '_id, MAX(p.post_id) as last_post_id			FROM ' . POSTS_TABLE . " p $topic_join			WHERE " . $db->sql_in_set('p.' . $type . '_id', $ids) . "				$topic_condition				AND p.post_approved = 1			GROUP BY p.{$type}_id";	}	$result = $db->sql_query($sql);	$last_post_ids = array();	while ($row = $db->sql_fetchrow($result))	{		if (sizeof($ids) == 1)		{			$row[$type . '_id'] = $ids[0];		}		if ($type == 'forum')		{			$not_empty_forums[] = $row['forum_id'];			if (empty($row['last_post_id']))			{				$empty_forums[] = $row['forum_id'];			}		}		$last_post_ids[] = $row['last_post_id'];	}	$db->sql_freeresult($result);	if ($type == 'forum')	{		$empty_forums = array_merge($empty_forums, array_diff($ids, $not_empty_forums));		foreach ($empty_forums as $void => $forum_id)		{			$update_sql[$forum_id][] = 'forum_last_post_id = 0';			$update_sql[$forum_id][] = "forum_last_post_subject = ''";			$update_sql[$forum_id][] = 'forum_last_post_time = 0';			$update_sql[$forum_id][] = 'forum_last_poster_id = 0';			$update_sql[$forum_id][] = "forum_last_poster_name = ''";			$update_sql[$forum_id][] = "forum_last_poster_colour = ''";		}	}	if (sizeof($last_post_ids))	{		$sql = 'SELECT p.' . $type . '_id, p.post_id, p.post_subject, p.post_time, p.poster_id, p.post_username, u.user_id, u.username, u.user_colour			FROM ' . POSTS_TABLE . ' p, ' . USERS_TABLE . ' u			WHERE p.poster_id = u.user_id				AND ' . $db->sql_in_set('p.post_id', $last_post_ids);		$result = $db->sql_query($sql);		while ($row = $db->sql_fetchrow($result))		{			$update_sql[$row["{$type}_id"]][] = $type . '_last_post_id = ' . (int) $row['post_id'];			$update_sql[$row["{$type}_id"]][] = "{$type}_last_post_subject = '" . $db->sql_escape($row['post_subject']) . "'";			$update_sql[$row["{$type}_id"]][] = $type . '_last_post_time = ' . (int) $row['post_time'];			$update_sql[$row["{$type}_id"]][] = $type . '_last_poster_id = ' . (int) $row['poster_id'];			$update_sql[$row["{$type}_id"]][] = "{$type}_last_poster_colour = '" . $db->sql_escape($row['user_colour']) . "'";			$update_sql[$row["{$type}_id"]][] = "{$type}_last_poster_name = '" . (($row['poster_id'] == ANONYMOUS) ? $db->sql_escape($row['post_username']) : $db->sql_escape($row['username'])) . "'";		}		$db->sql_freeresult($result);	}	unset($empty_forums, $ids, $last_post_ids);	if ($return_update_sql || !sizeof($update_sql))	{		return $update_sql;	}	$table = ($type == 'forum') ? FORUMS_TABLE : TOPICS_TABLE;	foreach ($update_sql as $update_id => $update_sql_ary)	{		$sql = "UPDATE $table			SET " . implode(', ', $update_sql_ary) . "			WHERE {$type}_id = $update_id";		$db->sql_query($sql);	}	return;}/*** Generate Topic Icons for display*/function posting_gen_topic_icons($mode, $icon_id){	global $phpbb_root_path, $config, $template, $cache;	// Grab icons	$icons = $cache->obtain_icons();	if (!$icon_id)	{		$template->assign_var('S_NO_ICON_CHECKED', ' checked="checked"');	}	if (sizeof($icons))	{		foreach ($icons as $id => $data)		{			if ($data['display'])			{				$template->assign_block_vars('topic_icon', array(					'ICON_ID'		=> $id,					'ICON_IMG'		=> $phpbb_root_path . $config['icons_path'] . '/' . $data['img'],					'ICON_WIDTH'	=> $data['width'],					'ICON_HEIGHT'	=> $data['height'],					'S_CHECKED'			=> ($id == $icon_id) ? true : false,					'S_ICON_CHECKED'	=> ($id == $icon_id) ? ' checked="checked"' : '')				);			}		}		return true;	}	return false;}/*** Build topic types able to be selected*/function posting_gen_topic_types($forum_id, $cur_topic_type = POST_NORMAL){	global $auth, $user, $template, $topic_type;	$toggle = false;	$topic_types = array(		'sticky'	=> array('const' => POST_STICKY, 'lang' => 'POST_STICKY'),		'announce'	=> array('const' => POST_ANNOUNCE, 'lang' => 'POST_ANNOUNCEMENT'),		'global'	=> array('const' => POST_GLOBAL, 'lang' => 'POST_GLOBAL')	);	$topic_type_array = array();	foreach ($topic_types as $auth_key => $topic_value)	{		// We do not have a special post global announcement permission		$auth_key = ($auth_key == 'global') ? 'announce' : $auth_key;		if ($auth->acl_get('f_' . $auth_key, $forum_id))		{			$toggle = true;			$topic_type_array[] = array(				'VALUE'			=> $topic_value['const'],				'S_CHECKED'		=> ($cur_topic_type == $topic_value['const'] || ($forum_id == 0 && $topic_value['const'] == POST_GLOBAL)) ? ' checked="checked"' : '',				'L_TOPIC_TYPE'	=> $user->lang[$topic_value['lang']]			);		}	}	if ($toggle)	{		$topic_type_array = array_merge(array(0 => array(			'VALUE'			=> POST_NORMAL,			'S_CHECKED'		=> ($cur_topic_type == POST_NORMAL) ? ' checked="checked"' : '',			'L_TOPIC_TYPE'	=> $user->lang['POST_NORMAL'])),			$topic_type_array		);		foreach ($topic_type_array as $array)		{			$template->assign_block_vars('topic_type', $array);		}		$template->assign_vars(array(			'S_TOPIC_TYPE_STICKY'	=> ($auth->acl_get('f_sticky', $forum_id)),			'S_TOPIC_TYPE_ANNOUNCE'	=> ($auth->acl_get('f_announce', $forum_id)))		);	}	return $toggle;}//// Attachment related functions///*** Upload Attachment - filedata is generated here* Uses upload class*/function upload_attachment($form_name, $forum_id, $local = false, $local_storage = '', $is_message = false, $local_filedata = false){	global $auth, $user, $config, $db, $cache;	global $phpbb_root_path, $phpEx;	$filedata = array(		'error'	=> array()	);	include_once($phpbb_root_path . 'includes/functions_upload.' . $phpEx);	$upload = new fileupload();	if ($config['check_attachment_content'] && isset($config['mime_triggers']))	{		$upload->set_disallowed_content(explode('|', $config['mime_triggers']));	}	if (!$local)	{		$filedata['post_attach'] = ($upload->is_valid($form_name)) ? true : false;	}	else	{		$filedata['post_attach'] = true;	}	if (!$filedata['post_attach'])	{		$filedata['error'][] = $user->lang['NO_UPLOAD_FORM_FOUND'];		return $filedata;	}	$extensions = $cache->obtain_attach_extensions((($is_message) ? false : (int) $forum_id));	$upload->set_allowed_extensions(array_keys($extensions['_allowed_']));	$file = ($local) ? $upload->local_upload($local_storage, $local_filedata) : $upload->form_upload($form_name);	if ($file->init_error)	{		$filedata['post_attach'] = false;		return $filedata;	}	$cat_id = (isset($extensions[$file->get('extension')]['display_cat'])) ? $extensions[$file->get('extension')]['display_cat'] : ATTACHMENT_CATEGORY_NONE;	// Make sure the image category only holds valid images...	if ($cat_id == ATTACHMENT_CATEGORY_IMAGE && !$file->is_image())	{		$file->remove();		// If this error occurs a user tried to exploit an IE Bug by renaming extensions		// Since the image category is displaying content inline we need to catch this.		trigger_error($user->lang['ATTACHED_IMAGE_NOT_IMAGE']);	}	// Do we have to create a thumbnail?	$filedata['thumbnail'] = ($cat_id == ATTACHMENT_CATEGORY_IMAGE && $config['img_create_thumbnail']) ? 1 : 0;	// Check Image Size, if it is an image	if (!$auth->acl_get('a_') && !$auth->acl_get('m_', $forum_id) && $cat_id == ATTACHMENT_CATEGORY_IMAGE)	{		$file->upload->set_allowed_dimensions(0, 0, $config['img_max_width'], $config['img_max_height']);	}	// Admins and mods are allowed to exceed the allowed filesize	if (!$auth->acl_get('a_') && !$auth->acl_get('m_', $forum_id))	{		if (!empty($extensions[$file->get('extension')]['max_filesize']))		{			$allowed_filesize = $extensions[$file->get('extension')]['max_filesize'];		}		else		{			$allowed_filesize = ($is_message) ? $config['max_filesize_pm'] : $config['max_filesize'];		}		$file->upload->set_max_filesize($allowed_filesize);	}	$file->clean_filename('unique', $user->data['user_id'] . '_');	// Are we uploading an image *and* this image being within the image category? Only then perform additional image checks.	$no_image = ($cat_id == ATTACHMENT_CATEGORY_IMAGE) ? false : true;	$file->move_file($config['upload_path'], false, $no_image);	if (sizeof($file->error))	{		$file->remove();		$filedata['error'] = array_merge($filedata['error'], $file->error);		$filedata['post_attach'] = false;		return $filedata;	}	$filedata['filesize'] = $file->get('filesize');	$filedata['mimetype'] = $file->get('mimetype');	$filedata['extension'] = $file->get('extension');	$filedata['physical_filename'] = $file->get('realname');	$filedata['real_filename'] = $file->get('uploadname');	$filedata['filetime'] = time();	// Check our complete quota	if ($config['attachment_quota'])	{		if ($config['upload_dir_size'] + $file->get('filesize') > $config['attachment_quota'])		{			$filedata['error'][] = $user->lang['ATTACH_QUOTA_REACHED'];			$filedata['post_attach'] = false;			$file->remove();			return $filedata;		}	}	// Check free disk space	if ($free_space = @disk_free_space($phpbb_root_path . $config['upload_path']))	{		if ($free_space <= $file->get('filesize'))		{			$filedata['error'][] = $user->lang['ATTACH_QUOTA_REACHED'];			$filedata['post_attach'] = false;			$file->remove();			return $filedata;		}	}	// Create Thumbnail	if ($filedata['thumbnail'])	{		$source = $file->get('destination_file');		$destination = $file->get('destination_path') . '/thumb_' . $file->get('realname');		if (!create_thumbnail($source, $destination, $file->get('mimetype')))		{			$filedata['thumbnail'] = 0;		}	}	return $filedata;}/*** Calculate the needed size for Thumbnail*/function get_img_size_format($width, $height){	global $config;	// Maximum Width the Image can take	$max_width = ($config['img_max_thumb_width']) ? $config['img_max_thumb_width'] : 400;	if ($width > $height)	{		return array(			round($width * ($max_width / $width)),			round($height * ($max_width / $width))		);	}	else	{		return array(			round($width * ($max_width / $height)),			round($height * ($max_width / $height))		);	}}/*** Return supported image types*/function get_supported_image_types($type = false){	if (@extension_loaded('gd'))	{		$format = imagetypes();		$new_type = 0;		if ($type !== false)		{			// Type is one of the IMAGETYPE constants - it is fetched from getimagesize()			// We do not use the constants here, because some were not available in PHP 4.3.x			switch ($type)			{				// GIF				case 1:					$new_type = ($format & IMG_GIF) ? IMG_GIF : false;				break;				// JPG, JPC, JP2				case 2:				case 9:				case 10:				case 11:				case 12:					$new_type = ($format & IMG_JPG) ? IMG_JPG : false;				break;				// PNG				case 3:					$new_type = ($format & IMG_PNG) ? IMG_PNG : false;				break;				// WBMP				case 15:					$new_type = ($format & IMG_WBMP) ? IMG_WBMP : false;				break;			}		}		else		{			$new_type = array();			$go_through_types = array(IMG_GIF, IMG_JPG, IMG_PNG, IMG_WBMP);			foreach ($go_through_types as $check_type)			{				if ($format & $check_type)				{					$new_type[] = $check_type;				}			}		}		return array(			'gd'		=> ($new_type) ? true : false,			'format'	=> $new_type,			'version'	=> (function_exists('imagecreatetruecolor')) ? 2 : 1		);	}	return array('gd' => false);}/*** Create Thumbnail*/function create_thumbnail($source, $destination, $mimetype){	global $config;	$min_filesize = (int) $config['img_min_thumb_filesize'];	$img_filesize = (file_exists($source)) ? @filesize($source) : false;	if (!$img_filesize || $img_filesize <= $min_filesize)	{		return false;	}	$dimension = @getimagesize($source);	if ($dimension === false)	{		return false;	}	list($width, $height, $type, ) = $dimension;	if (empty($width) || empty($height))	{		return false;	}	list($new_width, $new_height) = get_img_size_format($width, $height);	// Do not create a thumbnail if the resulting width/height is bigger than the original one	if ($new_width >= $width && $new_height >= $height)	{		return false;	}	$used_imagick = false;	// Only use imagemagick if defined and the passthru function not disabled	if ($config['img_imagick'] && function_exists('passthru'))	{		if (substr($config['img_imagick'], -1) !== '/')		{			$config['img_imagick'] .= '/';		}		@passthru(escapeshellcmd($config['img_imagick']) . 'convert' . ((defined('PHP_OS') && preg_match('#^win#i', PHP_OS)) ? '.exe' : '') . ' -quality 85 -geometry ' . $new_width . 'x' . $new_height . ' "' . str_replace('\\', '/', $source) . '" "' . str_replace('\\', '/', $destination) . '"');		if (file_exists($destination))		{			$used_imagick = true;		}	}	if (!$used_imagick)	{		$type = get_supported_image_types($type);		if ($type['gd'])		{			// If the type is not supported, we are not able to create a thumbnail			if ($type['format'] === false)			{				return false;			}			switch ($type['format'])			{				case IMG_GIF:					$image = @imagecreatefromgif($source);				break;				case IMG_JPG:					@ini_set('gd.jpeg_ignore_warning', 1);					$image = @imagecreatefromjpeg($source);				break;				case IMG_PNG:					$image = @imagecreatefrompng($source);				break;				case IMG_WBMP:					$image = @imagecreatefromwbmp($source);				break;			}			if (empty($image))			{				return false;			}			if ($type['version'] == 1)			{				$new_image = imagecreate($new_width, $new_height);				if ($new_image === false)				{					return false;				}				imagecopyresized($new_image, $image, 0, 0, 0, 0, $new_width, $new_height, $width, $height);			}			else			{				$new_image = imagecreatetruecolor($new_width, $new_height);				if ($new_image === false)				{					return false;				}				// Preserve alpha transparency (png for example)				@imagealphablending($new_image, false);				@imagesavealpha($new_image, true);				imagecopyresampled($new_image, $image, 0, 0, 0, 0, $new_width, $new_height, $width, $height);			}			// If we are in safe mode create the destination file prior to using the gd functions to circumvent a PHP bug			if (@ini_get('safe_mode') || @strtolower(ini_get('safe_mode')) == 'on')			{				@touch($destination);			}			switch ($type['format'])			{				case IMG_GIF:					imagegif($new_image, $destination);				break;				case IMG_JPG:					imagejpeg($new_image, $destination, 90);				break;				case IMG_PNG:					imagepng($new_image, $destination);				break;				case IMG_WBMP:					imagewbmp($new_image, $destination);				break;			}			imagedestroy($new_image);		}		else		{			return false;		}	}	if (!file_exists($destination))	{		return false;	}	phpbb_chmod($destination, CHMOD_READ | CHMOD_WRITE);	return true;}/*** Assign Inline attachments (build option fields)*/function posting_gen_inline_attachments(&$attachment_data){	global $template;	if (sizeof($attachment_data))	{		$s_inline_attachment_options = '';		foreach ($attachment_data as $i => $attachment)		{			$s_inline_attachment_options .= '<option value="' . $i . '">' . utf8_basename($attachment['real_filename']) . '</option>';		}		$template->assign_var('S_INLINE_ATTACHMENT_OPTIONS', $s_inline_attachment_options);		return true;	}	return false;}/*** Generate inline attachment entry*/function posting_gen_attachment_entry($attachment_data, &$filename_data, $show_attach_box = true){	global $template, $config, $phpbb_root_path, $phpEx, $user, $auth;	// Some default template variables	$template->assign_vars(array(		'S_SHOW_ATTACH_BOX'	=> $show_attach_box,		'S_HAS_ATTACHMENTS'	=> sizeof($attachment_data),		'FILESIZE'			=> $config['max_filesize'],		'FILE_COMMENT'		=> (isset($filename_data['filecomment'])) ? $filename_data['filecomment'] : '',	));	if (sizeof($attachment_data))	{		// We display the posted attachments within the desired order.		($config['display_order']) ? krsort($attachment_data) : ksort($attachment_data);		foreach ($attachment_data as $count => $attach_row)		{			$hidden = '';			$attach_row['real_filename'] = utf8_basename($attach_row['real_filename']);			foreach ($attach_row as $key => $value)			{				$hidden .= '<input type="hidden" name="attachment_data[' . $count . '][' . $key . ']" value="' . $value . '" />';			}			$download_link = append_sid("{$phpbb_root_path}download/file.$phpEx", 'mode=view&amp;id=' . (int) $attach_row['attach_id'], true, ($attach_row['is_orphan']) ? $user->session_id : false);			$template->assign_block_vars('attach_row', array(				'FILENAME'			=> utf8_basename($attach_row['real_filename']),				'A_FILENAME'		=> addslashes(utf8_basename($attach_row['real_filename'])),				'FILE_COMMENT'		=> $attach_row['attach_comment'],				'ATTACH_ID'			=> $attach_row['attach_id'],				'S_IS_ORPHAN'		=> $attach_row['is_orphan'],				'ASSOC_INDEX'		=> $count,				'U_VIEW_ATTACHMENT'	=> $download_link,				'S_HIDDEN'			=> $hidden)			);		}	}	return sizeof($attachment_data);}//// General Post functions///*** Load Drafts*/function load_drafts($topic_id = 0, $forum_id = 0, $id = 0, $pm_action = '', $msg_id = 0){	global $user, $db, $template, $auth;	global $phpbb_root_path, $phpEx;	$topic_ids = $forum_ids = $draft_rows = array();	// Load those drafts not connected to forums/topics	// If forum_id == 0 AND topic_id == 0 then this is a PM draft	if (!$topic_id && !$forum_id)	{		$sql_and = ' AND d.forum_id = 0 AND d.topic_id = 0';	}	else	{		$sql_and = '';		$sql_and .= ($forum_id) ? ' AND d.forum_id = ' . (int) $forum_id : '';		$sql_and .= ($topic_id) ? ' AND d.topic_id = ' . (int) $topic_id : '';	}	$sql = 'SELECT d.*, f.forum_id, f.forum_name		FROM ' . DRAFTS_TABLE . ' d		LEFT JOIN ' . FORUMS_TABLE . ' f ON (f.forum_id = d.forum_id)			WHERE d.user_id = ' . $user->data['user_id'] . "			$sql_and		ORDER BY d.save_time DESC";	$result = $db->sql_query($sql);	while ($row = $db->sql_fetchrow($result))	{		if ($row['topic_id'])		{			$topic_ids[] = (int) $row['topic_id'];		}		$draft_rows[] = $row;	}	$db->sql_freeresult($result);	if (!sizeof($draft_rows))	{		return;	}	$topic_rows = array();	if (sizeof($topic_ids))	{		$sql = 'SELECT topic_id, forum_id, topic_title			FROM ' . TOPICS_TABLE . '			WHERE ' . $db->sql_in_set('topic_id', array_unique($topic_ids));		$result = $db->sql_query($sql);		while ($row = $db->sql_fetchrow($result))		{			$topic_rows[$row['topic_id']] = $row;		}		$db->sql_freeresult($result);	}	unset($topic_ids);	$template->assign_var('S_SHOW_DRAFTS', true);	foreach ($draft_rows as $draft)	{		$link_topic = $link_forum = $link_pm = false;		$insert_url = $view_url = $title = '';		if (isset($topic_rows[$draft['topic_id']])			&& (				($topic_rows[$draft['topic_id']]['forum_id'] && $auth->acl_get('f_read', $topic_rows[$draft['topic_id']]['forum_id']))				||				(!$topic_rows[$draft['topic_id']]['forum_id'] && $auth->acl_getf_global('f_read'))			))		{			$topic_forum_id = ($topic_rows[$draft['topic_id']]['forum_id']) ? $topic_rows[$draft['topic_id']]['forum_id'] : $forum_id;			$link_topic = true;			$view_url = append_sid("{$phpbb_root_path}viewtopic.$phpEx", 'f=' . $topic_forum_id . '&amp;t=' . $draft['topic_id']);			$title = $topic_rows[$draft['topic_id']]['topic_title'];			$insert_url = append_sid("{$phpbb_root_path}posting.$phpEx", 'f=' . $topic_forum_id . '&amp;t=' . $draft['topic_id'] . '&amp;mode=reply&amp;d=' . $draft['draft_id']);		}		else if ($draft['forum_id'] && $auth->acl_get('f_read', $draft['forum_id']))		{			$link_forum = true;			$view_url = append_sid("{$phpbb_root_path}viewforum.$phpEx", 'f=' . $draft['forum_id']);			$title = $draft['forum_name'];			$insert_url = append_sid("{$phpbb_root_path}posting.$phpEx", 'f=' . $draft['forum_id'] . '&amp;mode=post&amp;d=' . $draft['draft_id']);		}		else		{			// Either display as PM draft if forum_id and topic_id are empty or if access to the forums has been denied afterwards...			$link_pm = true;			$insert_url = append_sid("{$phpbb_root_path}ucp.$phpEx", "i=$id&amp;mode=compose&amp;d={$draft['draft_id']}" . (($pm_action) ? "&amp;action=$pm_action" : '') . (($msg_id) ? "&amp;p=$msg_id" : ''));		}		$template->assign_block_vars('draftrow', array(			'DRAFT_ID'		=> $draft['draft_id'],			'DATE'			=> $user->format_date($draft['save_time']),			'DRAFT_SUBJECT'	=> $draft['draft_subject'],			'TITLE'			=> $title,			'U_VIEW'		=> $view_url,			'U_INSERT'		=> $insert_url,			'S_LINK_PM'		=> $link_pm,			'S_LINK_TOPIC'	=> $link_topic,			'S_LINK_FORUM'	=> $link_forum)		);	}}/*** Topic Review*/function topic_review($topic_id, $forum_id, $mode = 'topic_review', $cur_post_id = 0, $show_quote_button = true){	global $user, $auth, $db, $template, $bbcode, $cache;	global $config, $phpbb_root_path, $phpEx;	// Go ahead and pull all data for this topic	$sql = 'SELECT p.post_id		FROM ' . POSTS_TABLE . ' p' . "		WHERE p.topic_id = $topic_id			" . ((!$auth->acl_get('m_approve', $forum_id)) ? 'AND p.post_approved = 1' : '') . '			' . (($mode == 'post_review') ? " AND p.post_id > $cur_post_id" : '') . '			' . (($mode == 'post_review_edit') ? " AND p.post_id = $cur_post_id" : '') . '		ORDER BY p.post_time ';	$sql .= ($mode == 'post_review') ? 'ASC' : 'DESC';	$result = $db->sql_query_limit($sql, $config['posts_per_page']);	$post_list = array();	while ($row = $db->sql_fetchrow($result))	{		$post_list[] = $row['post_id'];	}	$db->sql_freeresult($result);	if (!sizeof($post_list))	{		return false;	}	// Handle 'post_review_edit' like 'post_review' from now on	if ($mode == 'post_review_edit')	{		$mode = 'post_review';	}	$sql = $db->sql_build_query('SELECT', array(		'SELECT'	=> 'u.username, u.user_id, u.user_colour, p.*, z.friend, z.foe',		'FROM'		=> array(			USERS_TABLE		=> 'u',			POSTS_TABLE		=> 'p',		),		'LEFT_JOIN'	=> array(			array(				'FROM'	=> array(ZEBRA_TABLE => 'z'),				'ON'	=> 'z.user_id = ' . $user->data['user_id'] . ' AND z.zebra_id = p.poster_id'			)		),		'WHERE'		=> $db->sql_in_set('p.post_id', $post_list) . '			AND u.user_id = p.poster_id'	));	$result = $db->sql_query($sql);	$bbcode_bitfield = '';	$rowset = array();	$has_attachments = false;	while ($row = $db->sql_fetchrow($result))	{		$rowset[$row['post_id']] = $row;		$bbcode_bitfield = $bbcode_bitfield | base64_decode($row['bbcode_bitfield']);		if ($row['post_attachment'])		{			$has_attachments = true;		}	}	$db->sql_freeresult($result);	// Instantiate BBCode class	if (!isset($bbcode) && $bbcode_bitfield !== '')	{		include_once($phpbb_root_path . 'includes/bbcode.' . $phpEx);		$bbcode = new bbcode(base64_encode($bbcode_bitfield));	}	// Grab extensions	$extensions = $attachments = array();	if ($has_attachments && $auth->acl_get('u_download') && $auth->acl_get('f_download', $forum_id))	{		$extensions = $cache->obtain_attach_extensions($forum_id);		// Get attachments...		$sql = 'SELECT *			FROM ' . ATTACHMENTS_TABLE . '			WHERE ' . $db->sql_in_set('post_msg_id', $post_list) . '				AND in_message = 0			ORDER BY filetime DESC, post_msg_id ASC';		$result = $db->sql_query($sql);		while ($row = $db->sql_fetchrow($result))		{			$attachments[$row['post_msg_id']][] = $row;		}		$db->sql_freeresult($result);	}	for ($i = 0, $end = sizeof($post_list); $i < $end; ++$i)	{		// A non-existing rowset only happens if there was no user present for the entered poster_id		// This could be a broken posts table.		if (!isset($rowset[$post_list[$i]]))		{			continue;		}		$row =& $rowset[$post_list[$i]];		$poster_id		= $row['user_id'];		$post_subject	= $row['post_subject'];		$message		= censor_text($row['post_text']);		$decoded_message = false;		if ($show_quote_button && $auth->acl_get('f_reply', $forum_id))		{			$decoded_message = $message;			decode_message($decoded_message, $row['bbcode_uid']);			$decoded_message = bbcode_nl2br($decoded_message);		}		if ($row['bbcode_bitfield'])		{			$bbcode->bbcode_second_pass($message, $row['bbcode_uid'], $row['bbcode_bitfield']);		}		$message = bbcode_nl2br($message);		$message = smiley_text($message, !$row['enable_smilies']);		if (!empty($attachments[$row['post_id']]))		{			$update_count = array();			parse_attachments($forum_id, $message, $attachments[$row['post_id']], $update_count);		}		$post_subject = censor_text($post_subject);		$post_anchor = ($mode == 'post_review') ? 'ppr' . $row['post_id'] : 'pr' . $row['post_id'];		$u_show_post = append_sid($phpbb_root_path . 'viewtopic.' . $phpEx, "f=$forum_id&amp;t=$topic_id&amp;p={$row['post_id']}&amp;view=show#p{$row['post_id']}");		$template->assign_block_vars($mode . '_row', array(			'POST_AUTHOR_FULL'		=> get_username_string('full', $poster_id, $row['username'], $row['user_colour'], $row['post_username']),			'POST_AUTHOR_COLOUR'	=> get_username_string('colour', $poster_id, $row['username'], $row['user_colour'], $row['post_username']),			'POST_AUTHOR'			=> get_username_string('username', $poster_id, $row['username'], $row['user_colour'], $row['post_username']),			'U_POST_AUTHOR'			=> get_username_string('profile', $poster_id, $row['username'], $row['user_colour'], $row['post_username']),			'S_HAS_ATTACHMENTS'	=> (!empty($attachments[$row['post_id']])) ? true : false,			'S_FRIEND'			=> ($row['friend']) ? true : false,			'S_IGNORE_POST'		=> ($row['foe']) ? true : false,			'L_IGNORE_POST'		=> ($row['foe']) ? sprintf($user->lang['POST_BY_FOE'], get_username_string('full', $poster_id, $row['username'], $row['user_colour'], $row['post_username']), "<a href=\"{$u_show_post}\" onclick=\"dE('{$post_anchor}', 1); return false;\">", '</a>') : '',			'POST_SUBJECT'		=> $post_subject,			'MINI_POST_IMG'		=> $user->img('icon_post_target', $user->lang['POST']),			'POST_DATE'			=> $user->format_date($row['post_time']),			'MESSAGE'			=> $message,			'DECODED_MESSAGE'	=> $decoded_message,			'POST_ID'			=> $row['post_id'],			'U_MINI_POST'		=> append_sid("{$phpbb_root_path}viewtopic.$phpEx", 'p=' . $row['post_id']) . '#p' . $row['post_id'],			'U_MCP_DETAILS'		=> ($auth->acl_get('m_info', $forum_id)) ? append_sid("{$phpbb_root_path}mcp.$phpEx", 'i=main&amp;mode=post_details&amp;f=' . $forum_id . '&amp;p=' . $row['post_id'], true, $user->session_id) : '',			'POSTER_QUOTE'		=> ($show_quote_button && $auth->acl_get('f_reply', $forum_id)) ? addslashes(get_username_string('username', $poster_id, $row['username'], $row['user_colour'], $row['post_username'])) : '')		);		// Display not already displayed Attachments for this post, we already parsed them. ;)		if (!empty($attachments[$row['post_id']]))		{			foreach ($attachments[$row['post_id']] as $attachment)			{				$template->assign_block_vars($mode . '_row.attachment', array(					'DISPLAY_ATTACHMENT'	=> $attachment)				);			}		}		unset($rowset[$post_list[$i]]);	}	if ($mode == 'topic_review')	{		$template->assign_var('QUOTE_IMG', $user->img('icon_post_quote', $user->lang['REPLY_WITH_QUOTE']));	}	return true;}/*** User Notification*/function user_notification($mode, $subject, $topic_title, $forum_name, $forum_id, $topic_id, $post_id){	global $db, $user, $config, $phpbb_root_path, $phpEx, $auth;	$topic_notification = ($mode == 'reply' || $mode == 'quote') ? true : false;	$forum_notification = ($mode == 'post') ? true : false;	if (!$topic_notification && !$forum_notification)	{		trigger_error('NO_MODE');	}	if (($topic_notification && !$config['allow_topic_notify']) || ($forum_notification && !$config['allow_forum_notify']))	{		return;	}	$topic_title = ($topic_notification) ? $topic_title : $subject;	$topic_title = censor_text($topic_title);	// Get banned User ID's	$sql = 'SELECT ban_userid		FROM ' . BANLIST_TABLE . '		WHERE ban_userid <> 0			AND ban_exclude <> 1';	$result = $db->sql_query($sql);	$sql_ignore_users = ANONYMOUS . ', ' . $user->data['user_id'];	while ($row = $db->sql_fetchrow($result))	{		$sql_ignore_users .= ', ' . (int) $row['ban_userid'];	}	$db->sql_freeresult($result);	$notify_rows = array();	// -- get forum_userids	|| topic_userids	$sql = 'SELECT u.user_id, u.username, u.user_email, u.user_lang, u.user_notify_type, u.user_jabber		FROM ' . (($topic_notification) ? TOPICS_WATCH_TABLE : FORUMS_WATCH_TABLE) . ' w, ' . USERS_TABLE . ' u		WHERE w.' . (($topic_notification) ? 'topic_id' : 'forum_id') . ' = ' . (($topic_notification) ? $topic_id : $forum_id) . "			AND w.user_id NOT IN ($sql_ignore_users)			AND w.notify_status = " . NOTIFY_YES . '			AND u.user_type IN (' . USER_NORMAL . ', ' . USER_FOUNDER . ')			AND u.user_id = w.user_id';	$result = $db->sql_query($sql);	while ($row = $db->sql_fetchrow($result))	{		$notify_rows[$row['user_id']] = array(			'user_id'		=> $row['user_id'],			'username'		=> $row['username'],			'user_email'	=> $row['user_email'],			'user_jabber'	=> $row['user_jabber'],			'user_lang'		=> $row['user_lang'],			'notify_type'	=> ($topic_notification) ? 'topic' : 'forum',			'template'		=> ($topic_notification) ? 'topic_notify' : 'newtopic_notify',			'method'		=> $row['user_notify_type'],			'allowed'		=> false		);	}	$db->sql_freeresult($result);	// forum notification is sent to those not already receiving topic notifications	if ($topic_notification)	{		if (sizeof($notify_rows))		{			$sql_ignore_users .= ', ' . implode(', ', array_keys($notify_rows));		}		$sql = 'SELECT u.user_id, u.username, u.user_email, u.user_lang, u.user_notify_type, u.user_jabber			FROM ' . FORUMS_WATCH_TABLE . ' fw, ' . USERS_TABLE . " u			WHERE fw.forum_id = $forum_id				AND fw.user_id NOT IN ($sql_ignore_users)				AND fw.notify_status = " . NOTIFY_YES . '				AND u.user_type IN (' . USER_NORMAL . ', ' . USER_FOUNDER . ')				AND u.user_id = fw.user_id';		$result = $db->sql_query($sql);		while ($row = $db->sql_fetchrow($result))		{			$notify_rows[$row['user_id']] = array(				'user_id'		=> $row['user_id'],				'username'		=> $row['username'],				'user_email'	=> $row['user_email'],				'user_jabber'	=> $row['user_jabber'],				'user_lang'		=> $row['user_lang'],				'notify_type'	=> 'forum',				'template'		=> 'forum_notify',				'method'		=> $row['user_notify_type'],				'allowed'		=> false			);		}		$db->sql_freeresult($result);	}	if (!sizeof($notify_rows))	{		return;	}	// Make sure users are allowed to read the forum	foreach ($auth->acl_get_list(array_keys($notify_rows), 'f_read', $forum_id) as $forum_id => $forum_ary)	{		foreach ($forum_ary as $auth_option => $user_ary)		{			foreach ($user_ary as $user_id)			{				$notify_rows[$user_id]['allowed'] = true;			}		}	}	// Now, we have to do a little step before really sending, we need to distinguish our users a little bit. ;)	$msg_users = $delete_ids = $update_notification = array();	foreach ($notify_rows as $user_id => $row)	{		if (!$row['allowed'] || !trim($row['user_email']))		{			$delete_ids[$row['notify_type']][] = $row['user_id'];		}		else		{			$msg_users[] = $row;			$update_notification[$row['notify_type']][] = $row['user_id'];		}	}	unset($notify_rows);	// Now, we are able to really send out notifications	if (sizeof($msg_users))	{		include_once($phpbb_root_path . 'includes/functions_messenger.' . $phpEx);		$messenger = new messenger();		$msg_list_ary = array();		foreach ($msg_users as $row)		{			$pos = (!isset($msg_list_ary[$row['template']])) ? 0 : sizeof($msg_list_ary[$row['template']]);			$msg_list_ary[$row['template']][$pos]['method']	= $row['method'];			$msg_list_ary[$row['template']][$pos]['email']	= $row['user_email'];			$msg_list_ary[$row['template']][$pos]['jabber']	= $row['user_jabber'];			$msg_list_ary[$row['template']][$pos]['name']	= $row['username'];			$msg_list_ary[$row['template']][$pos]['lang']	= $row['user_lang'];			$msg_list_ary[$row['template']][$pos]['user_id']= $row['user_id'];		}		unset($msg_users);		foreach ($msg_list_ary as $email_template => $email_list)		{			foreach ($email_list as $addr)			{				$messenger->template($email_template, $addr['lang']);				$messenger->to($addr['email'], $addr['name']);				$messenger->im($addr['jabber'], $addr['name']);				$messenger->assign_vars(array(					'USERNAME'		=> htmlspecialchars_decode($addr['name']),					'TOPIC_TITLE'	=> htmlspecialchars_decode($topic_title),					'FORUM_NAME'	=> htmlspecialchars_decode($forum_name),					'U_FORUM'				=> generate_board_url() . "/viewforum.$phpEx?f=$forum_id",					'U_TOPIC'				=> generate_board_url() . "/viewtopic.$phpEx?f=$forum_id&t=$topic_id",					'U_NEWEST_POST'			=> generate_board_url() . "/viewtopic.$phpEx?f=$forum_id&t=$topic_id&p=$post_id&e=$post_id",					'U_STOP_WATCHING_TOPIC'	=> generate_board_url() . "/viewtopic.$phpEx?uid={$addr['user_id']}&f=$forum_id&t=$topic_id&unwatch=topic",					'U_STOP_WATCHING_FORUM'	=> generate_board_url() . "/viewforum.$phpEx?uid={$addr['user_id']}&f=$forum_id&unwatch=forum",				));				$messenger->send($addr['method']);			}		}		unset($msg_list_ary);		$messenger->save_queue();	}	// Handle the DB updates	$db->sql_transaction('begin');	if (!empty($update_notification['topic']))	{		$sql = 'UPDATE ' . TOPICS_WATCH_TABLE . '			SET notify_status = ' . NOTIFY_NO . "			WHERE topic_id = $topic_id				AND " . $db->sql_in_set('user_id', $update_notification['topic']);		$db->sql_query($sql);	}	if (!empty($update_notification['forum']))	{		$sql = 'UPDATE ' . FORUMS_WATCH_TABLE . '			SET notify_status = ' . NOTIFY_NO . "			WHERE forum_id = $forum_id				AND " . $db->sql_in_set('user_id', $update_notification['forum']);		$db->sql_query($sql);	}	// Now delete the user_ids not authorised to receive notifications on this topic/forum	if (!empty($delete_ids['topic']))	{		$sql = 'DELETE FROM ' . TOPICS_WATCH_TABLE . "			WHERE topic_id = $topic_id				AND " . $db->sql_in_set('user_id', $delete_ids['topic']);		$db->sql_query($sql);	}	if (!empty($delete_ids['forum']))	{		$sql = 'DELETE FROM ' . FORUMS_WATCH_TABLE . "			WHERE forum_id = $forum_id				AND " . $db->sql_in_set('user_id', $delete_ids['forum']);		$db->sql_query($sql);	}	$db->sql_transaction('commit');}//// Post handling functions///*** Delete Post*/function delete_post($forum_id, $topic_id, $post_id, &$data){	global $db, $user, $auth;	global $config, $phpEx, $phpbb_root_path;	// Specify our post mode	$post_mode = 'delete';	if (($data['topic_first_post_id'] === $data['topic_last_post_id']) && $data['topic_replies_real'] == 0)	{		$post_mode = 'delete_topic';	}	else if ($data['topic_first_post_id'] == $post_id)	{		$post_mode = 'delete_first_post';	}	else if ($data['topic_last_post_id'] == $post_id)	{		$post_mode = 'delete_last_post';	}	$sql_data = array();	$next_post_id = false;	include_once($phpbb_root_path . 'includes/functions_admin.' . $phpEx);	$db->sql_transaction('begin');	// we must make sure to update forums that contain the shadow'd topic	if ($post_mode == 'delete_topic')	{		$shadow_forum_ids = array();		$sql = 'SELECT forum_id			FROM ' . TOPICS_TABLE . '			WHERE ' . $db->sql_in_set('topic_moved_id', $topic_id);		$result = $db->sql_query($sql);		while ($row = $db->sql_fetchrow($result))		{			if (!isset($shadow_forum_ids[(int) $row['forum_id']]))			{				$shadow_forum_ids[(int) $row['forum_id']] = 1;			}			else			{				$shadow_forum_ids[(int) $row['forum_id']]++;			}		}		$db->sql_freeresult($result);	}	if (!delete_posts('post_id', array($post_id), false, false))	{		// Try to delete topic, we may had an previous error causing inconsistency		if ($post_mode == 'delete_topic')		{			delete_topics('topic_id', array($topic_id), false);		}		trigger_error('ALREADY_DELETED');	}	$db->sql_transaction('commit');	// Collect the necessary information for updating the tables	$sql_data[FORUMS_TABLE] = '';	switch ($post_mode)	{		case 'delete_topic':			foreach ($shadow_forum_ids as $updated_forum => $topic_count)			{				// counting is fun! we only have to do sizeof($forum_ids) number of queries,				// even if the topic is moved back to where its shadow lives (we count how many times it is in a forum)				$db->sql_query('UPDATE ' . FORUMS_TABLE . ' SET forum_topics_real = forum_topics_real - ' . $topic_count . ', forum_topics = forum_topics - ' . $topic_count . ' WHERE forum_id = ' . $updated_forum);				update_post_information('forum', $updated_forum);			}			delete_topics('topic_id', array($topic_id), false);			if ($data['topic_type'] != POST_GLOBAL)			{				$sql_data[FORUMS_TABLE] .= 'forum_topics_real = forum_topics_real - 1';				$sql_data[FORUMS_TABLE] .= ($data['topic_approved']) ? ', forum_posts = forum_posts - 1, forum_topics = forum_topics - 1' : '';			}			$update_sql = update_post_information('forum', $forum_id, true);			if (sizeof($update_sql))			{				$sql_data[FORUMS_TABLE] .= ($sql_data[FORUMS_TABLE]) ? ', ' : '';				$sql_data[FORUMS_TABLE] .= implode(', ', $update_sql[$forum_id]);			}		break;		case 'delete_first_post':			$sql = 'SELECT p.post_id, p.poster_id, p.post_time, p.post_username, u.username, u.user_colour				FROM ' . POSTS_TABLE . ' p, ' . USERS_TABLE . " u				WHERE p.topic_id = $topic_id					AND p.poster_id = u.user_id				ORDER BY p.post_time ASC";			$result = $db->sql_query_limit($sql, 1);			$row = $db->sql_fetchrow($result);			$db->sql_freeresult($result);			if ($data['topic_type'] != POST_GLOBAL)			{				$sql_data[FORUMS_TABLE] = ($data['post_approved']) ? 'forum_posts = forum_posts - 1' : '';			}			$sql_data[TOPICS_TABLE] = 'topic_poster = ' . intval($row['poster_id']) . ', topic_first_post_id = ' . intval($row['post_id']) . ", topic_first_poster_colour = '" . $db->sql_escape($row['user_colour']) . "', topic_first_poster_name = '" . (($row['poster_id'] == ANONYMOUS) ? $db->sql_escape($row['post_username']) : $db->sql_escape($row['username'])) . "', topic_time = " . (int) $row['post_time'];			// Decrementing topic_replies here is fine because this case only happens if there is more than one post within the topic - basically removing one "reply"			$sql_data[TOPICS_TABLE] .= ', topic_replies_real = topic_replies_real - 1' . (($data['post_approved']) ? ', topic_replies = topic_replies - 1' : '');			$next_post_id = (int) $row['post_id'];		break;		case 'delete_last_post':			if ($data['topic_type'] != POST_GLOBAL)			{				$sql_data[FORUMS_TABLE] = ($data['post_approved']) ? 'forum_posts = forum_posts - 1' : '';			}			$update_sql = update_post_information('forum', $forum_id, true);			if (sizeof($update_sql))			{				$sql_data[FORUMS_TABLE] .= ($sql_data[FORUMS_TABLE]) ? ', ' : '';				$sql_data[FORUMS_TABLE] .= implode(', ', $update_sql[$forum_id]);			}			$sql_data[TOPICS_TABLE] = 'topic_bumped = 0, topic_bumper = 0, topic_replies_real = topic_replies_real - 1' . (($data['post_approved']) ? ', topic_replies = topic_replies - 1' : '');			$update_sql = update_post_information('topic', $topic_id, true);			if (sizeof($update_sql))			{				$sql_data[TOPICS_TABLE] .= ', ' . implode(', ', $update_sql[$topic_id]);				$next_post_id = (int) str_replace('topic_last_post_id = ', '', $update_sql[$topic_id][0]);			}			else			{				$sql = 'SELECT MAX(post_id) as last_post_id					FROM ' . POSTS_TABLE . "					WHERE topic_id = $topic_id " .						((!$auth->acl_get('m_approve', $forum_id)) ? 'AND post_approved = 1' : '');				$result = $db->sql_query($sql);				$row = $db->sql_fetchrow($result);				$db->sql_freeresult($result);				$next_post_id = (int) $row['last_post_id'];			}		break;		case 'delete':			$sql = 'SELECT post_id				FROM ' . POSTS_TABLE . "				WHERE topic_id = $topic_id " .					((!$auth->acl_get('m_approve', $forum_id)) ? 'AND post_approved = 1' : '') . '					AND post_time > ' . $data['post_time'] . '				ORDER BY post_time ASC';			$result = $db->sql_query_limit($sql, 1);			$row = $db->sql_fetchrow($result);			$db->sql_freeresult($result);			if ($data['topic_type'] != POST_GLOBAL)			{				$sql_data[FORUMS_TABLE] = ($data['post_approved']) ? 'forum_posts = forum_posts - 1' : '';			}			$sql_data[TOPICS_TABLE] = 'topic_replies_real = topic_replies_real - 1' . (($data['post_approved']) ? ', topic_replies = topic_replies - 1' : '');			$next_post_id = (int) $row['post_id'];		break;	}	if (($post_mode == 'delete') || ($post_mode == 'delete_last_post') || ($post_mode == 'delete_first_post'))	{		$sql = 'SELECT 1 AS has_attachments			FROM ' . ATTACHMENTS_TABLE . '			WHERE topic_id = ' . $topic_id;		$result = $db->sql_query_limit($sql, 1);		$has_attachments = (int) $db->sql_fetchfield('has_attachments');		$db->sql_freeresult($result);		if (!$has_attachments)		{			$sql_data[TOPICS_TABLE] .= ', topic_attachment = 0';		}	}//	$sql_data[USERS_TABLE] = ($data['post_postcount']) ? 'user_posts = user_posts - 1' : '';	$db->sql_transaction('begin');	$where_sql = array(		FORUMS_TABLE	=> "forum_id = $forum_id",		TOPICS_TABLE	=> "topic_id = $topic_id",		USERS_TABLE		=> 'user_id = ' . $data['poster_id']	);	foreach ($sql_data as $table => $update_sql)	{		if ($update_sql)		{			$db->sql_query("UPDATE $table SET $update_sql WHERE " . $where_sql[$table]);		}	}	// Adjust posted info for this user by looking for a post by him/her within this topic...	if ($post_mode != 'delete_topic' && $config['load_db_track'] && $data['poster_id'] != ANONYMOUS)	{		$sql = 'SELECT poster_id			FROM ' . POSTS_TABLE . '			WHERE topic_id = ' . $topic_id . '				AND poster_id = ' . $data['poster_id'];		$result = $db->sql_query_limit($sql, 1);		$poster_id = (int) $db->sql_fetchfield('poster_id');		$db->sql_freeresult($result);		// The user is not having any more posts within this topic		if (!$poster_id)		{			$sql = 'DELETE FROM ' . TOPICS_POSTED_TABLE . '				WHERE topic_id = ' . $topic_id . '					AND user_id = ' . $data['poster_id'];			$db->sql_query($sql);		}	}	$db->sql_transaction('commit');	if ($data['post_reported'] && ($post_mode != 'delete_topic'))	{		sync('topic_reported', 'topic_id', array($topic_id));	}	return $next_post_id;}/*** Submit Post* @todo Split up and create lightweight, simple API for this.*/function submit_post($mode, $subject, $username, $topic_type, &$poll, &$data, $update_message = true, $update_search_index = true){	global $db, $auth, $user, $config, $phpEx, $template, $phpbb_root_path;	// We do not handle erasing posts here	if ($mode == 'delete')	{		return false;	}	$current_time = time();	if ($mode == 'post')	{		$post_mode = 'post';		$update_message = true;	}	else if ($mode != 'edit')	{		$post_mode = 'reply';		$update_message = true;	}	else if ($mode == 'edit')	{		$post_mode = ($data['topic_replies_real'] == 0) ? 'edit_topic' : (($data['topic_first_post_id'] == $data['post_id']) ? 'edit_first_post' : (($data['topic_last_post_id'] == $data['post_id']) ? 'edit_last_post' : 'edit'));	}	// First of all make sure the subject and topic title are having the correct length.	// To achieve this without cutting off between special chars we convert to an array and then count the elements.	$subject = truncate_string($subject);	$data['topic_title'] = truncate_string($data['topic_title']);	// Collect some basic information about which tables and which rows to update/insert	$sql_data = $topic_row = array();	$poster_id = ($mode == 'edit') ? $data['poster_id'] : (int) $user->data['user_id'];	// Retrieve some additional information if not present	if ($mode == 'edit' && (!isset($data['post_approved']) || !isset($data['topic_approved']) || $data['post_approved'] === false || $data['topic_approved'] === false))	{		$sql = 'SELECT p.post_approved, t.topic_type, t.topic_replies, t.topic_replies_real, t.topic_approved			FROM ' . TOPICS_TABLE . ' t, ' . POSTS_TABLE . ' p			WHERE t.topic_id = p.topic_id				AND p.post_id = ' . $data['post_id'];		$result = $db->sql_query($sql);		$topic_row = $db->sql_fetchrow($result);		$db->sql_freeresult($result);		$data['topic_approved'] = $topic_row['topic_approved'];		$data['post_approved'] = $topic_row['post_approved'];	}	// This variable indicates if the user is able to post or put into the queue - it is used later for all code decisions regarding approval	// The variable name should be $post_approved, because it indicates if the post is approved or not	$post_approval = 1;	// Check the permissions for post approval. Moderators are not affected.	if (!$auth->acl_get('f_noapprove', $data['forum_id']) && !$auth->acl_get('m_approve', $data['forum_id']))	{		// Post not approved, but in queue		$post_approval = 0;	}	// Mods are able to force approved/unapproved posts. True means the post is approved, false the post is unapproved	if (isset($data['force_approved_state']))	{		$post_approval = ($data['force_approved_state']) ? 1 : 0;	}	// Start the transaction here	$db->sql_transaction('begin');	// Collect Information	switch ($post_mode)	{		case 'post':		case 'reply':			$sql_data[POSTS_TABLE]['sql'] = array(				'forum_id'			=> ($topic_type == POST_GLOBAL) ? 0 : $data['forum_id'],				'poster_id'			=> (int) $user->data['user_id'],				'icon_id'			=> $data['icon_id'],				'poster_ip'			=> $user->ip,				'post_time'			=> $current_time,				'post_approved'		=> $post_approval,				'enable_bbcode'		=> $data['enable_bbcode'],				'enable_smilies'	=> $data['enable_smilies'],				'enable_magic_url'	=> $data['enable_urls'],				'enable_sig'		=> $data['enable_sig'],				'post_username'		=> (!$user->data['is_registered']) ? $username : '',				'post_subject'		=> $subject,				'post_text'			=> $data['message'],				'post_checksum'		=> $data['message_md5'],				'post_attachment'	=> (!empty($data['attachment_data'])) ? 1 : 0,				'bbcode_bitfield'	=> $data['bbcode_bitfield'],				'bbcode_uid'		=> $data['bbcode_uid'],				'post_postcount'	=> ($auth->acl_get('f_postcount', $data['forum_id'])) ? 1 : 0,				'post_edit_locked'	=> $data['post_edit_locked']			);		break;		case 'edit_first_post':		case 'edit':		case 'edit_last_post':		case 'edit_topic':			// If edit reason is given always display edit info			// If editing last post then display no edit info			// If m_edit permission then display no edit info			// If normal edit display edit info			// Display edit info if edit reason given or user is editing his post, which is not the last within the topic.			if ($data['post_edit_reason'] || (!$auth->acl_get('m_edit', $data['forum_id']) && ($post_mode == 'edit' || $post_mode == 'edit_first_post')))			{				$data['post_edit_reason']		= truncate_string($data['post_edit_reason'], 255, 255, false);				$sql_data[POSTS_TABLE]['sql']	= array(					'post_edit_time'	=> $current_time,					'post_edit_reason'	=> $data['post_edit_reason'],					'post_edit_user'	=> (int) $data['post_edit_user'],				);				$sql_data[POSTS_TABLE]['stat'][] = 'post_edit_count = post_edit_count + 1';			}			else if (!$data['post_edit_reason'] && $mode == 'edit' && $auth->acl_get('m_edit', $data['forum_id']))			{				$sql_data[POSTS_TABLE]['sql'] = array(					'post_edit_reason'	=> '',				);			}			// If the person editing this post is different to the one having posted then we will add a log entry stating the edit			// Could be simplified by only adding to the log if the edit is not tracked - but this may confuse admins/mods			if ($user->data['user_id'] != $poster_id)			{				$log_subject = ($subject) ? $subject : $data['topic_title'];				add_log('mod', $data['forum_id'], $data['topic_id'], 'LOG_POST_EDITED', $log_subject, (!empty($username)) ? $username : $user->lang['GUEST']);			}			if (!isset($sql_data[POSTS_TABLE]['sql']))			{				$sql_data[POSTS_TABLE]['sql'] = array();			}			$sql_data[POSTS_TABLE]['sql'] = array_merge($sql_data[POSTS_TABLE]['sql'], array(				'forum_id'			=> ($topic_type == POST_GLOBAL) ? 0 : $data['forum_id'],				'poster_id'			=> $data['poster_id'],				'icon_id'			=> $data['icon_id'],				'post_approved'		=> (!$post_approval) ? 0 : $data['post_approved'],				'enable_bbcode'		=> $data['enable_bbcode'],				'enable_smilies'	=> $data['enable_smilies'],				'enable_magic_url'	=> $data['enable_urls'],				'enable_sig'		=> $data['enable_sig'],				'post_username'		=> ($username && $data['poster_id'] == ANONYMOUS) ? $username : '',				'post_subject'		=> $subject,				'post_checksum'		=> $data['message_md5'],				'post_attachment'	=> (!empty($data['attachment_data'])) ? 1 : 0,				'bbcode_bitfield'	=> $data['bbcode_bitfield'],				'bbcode_uid'		=> $data['bbcode_uid'],				'post_edit_locked'	=> $data['post_edit_locked'])			);			if ($update_message)			{				$sql_data[POSTS_TABLE]['sql']['post_text'] = $data['message'];			}		break;	}	$post_approved = $sql_data[POSTS_TABLE]['sql']['post_approved'];	$topic_row = array();	// And the topic ladies and gentlemen	switch ($post_mode)	{		case 'post':			$sql_data[TOPICS_TABLE]['sql'] = array(				'topic_poster'				=> (int) $user->data['user_id'],				'topic_time'				=> $current_time,				'topic_last_view_time'		=> $current_time,				'forum_id'					=> ($topic_type == POST_GLOBAL) ? 0 : $data['forum_id'],				'icon_id'					=> $data['icon_id'],				'topic_approved'			=> $post_approval,				'topic_title'				=> $subject,				'topic_first_poster_name'	=> (!$user->data['is_registered'] && $username) ? $username : (($user->data['user_id'] != ANONYMOUS) ? $user->data['username'] : ''),				'topic_first_poster_colour'	=> $user->data['user_colour'],				'topic_type'				=> $topic_type,				'topic_time_limit'			=> ($topic_type == POST_STICKY || $topic_type == POST_ANNOUNCE) ? ($data['topic_time_limit'] * 86400) : 0,				'topic_attachment'			=> (!empty($data['attachment_data'])) ? 1 : 0,			);			if (isset($poll['poll_options']) && !empty($poll['poll_options']))			{				$poll_start = ($poll['poll_start']) ? $poll['poll_start'] : $current_time;				$poll_length = $poll['poll_length'] * 86400;				if ($poll_length < 0)				{					$poll_start = $poll_start + $poll_length;					if ($poll_start < 0)					{						$poll_start = 0;					}					$poll_length = 1;				}				$sql_data[TOPICS_TABLE]['sql'] = array_merge($sql_data[TOPICS_TABLE]['sql'], array(					'poll_title'		=> $poll['poll_title'],					'poll_start'		=> $poll_start,					'poll_max_options'	=> $poll['poll_max_options'],					'poll_length'		=> $poll_length,					'poll_vote_change'	=> $poll['poll_vote_change'])				);			}			$sql_data[USERS_TABLE]['stat'][] = "user_lastpost_time = $current_time" . (($auth->acl_get('f_postcount', $data['forum_id']) && $post_approval) ? ', user_posts = user_posts + 1' : '');			if ($topic_type != POST_GLOBAL)			{				if ($post_approval)				{					$sql_data[FORUMS_TABLE]['stat'][] = 'forum_posts = forum_posts + 1';				}				$sql_data[FORUMS_TABLE]['stat'][] = 'forum_topics_real = forum_topics_real + 1' . (($post_approval) ? ', forum_topics = forum_topics + 1' : '');			}		break;		case 'reply':			$sql_data[TOPICS_TABLE]['stat'][] = 'topic_last_view_time = ' . $current_time . ',				topic_replies_real = topic_replies_real + 1,				topic_bumped = 0,				topic_bumper = 0' .				(($post_approval) ? ', topic_replies = topic_replies + 1' : '') .				((!empty($data['attachment_data']) || (isset($data['topic_attachment']) && $data['topic_attachment'])) ? ', topic_attachment = 1' : '');			$sql_data[USERS_TABLE]['stat'][] = "user_lastpost_time = $current_time" . (($auth->acl_get('f_postcount', $data['forum_id']) && $post_approval) ? ', user_posts = user_posts + 1' : '');			if ($post_approval && $topic_type != POST_GLOBAL)			{				$sql_data[FORUMS_TABLE]['stat'][] = 'forum_posts = forum_posts + 1';			}		break;		case 'edit_topic':		case 'edit_first_post':			if (isset($poll['poll_options']))			{				$poll_start = ($poll['poll_start'] || empty($poll['poll_options'])) ? $poll['poll_start'] : $current_time;				$poll_length = $poll['poll_length'] * 86400;				if ($poll_length < 0)				{					$poll_start = $poll_start + $poll_length;					if ($poll_start < 0)					{						$poll_start = 0;					}					$poll_length = 1;				}			}			$sql_data[TOPICS_TABLE]['sql'] = array(				'forum_id'					=> ($topic_type == POST_GLOBAL) ? 0 : $data['forum_id'],				'icon_id'					=> $data['icon_id'],				'topic_approved'			=> (!$post_approval) ? 0 : $data['topic_approved'],				'topic_title'				=> $subject,				'topic_first_poster_name'	=> $username,				'topic_type'				=> $topic_type,				'topic_time_limit'			=> ($topic_type == POST_STICKY || $topic_type == POST_ANNOUNCE) ? ($data['topic_time_limit'] * 86400) : 0,				'poll_title'				=> (isset($poll['poll_options'])) ? $poll['poll_title'] : '',				'poll_start'				=> (isset($poll['poll_options'])) ? $poll_start : 0,				'poll_max_options'			=> (isset($poll['poll_options'])) ? $poll['poll_max_options'] : 1,				'poll_length'				=> (isset($poll['poll_options'])) ? $poll_length : 0,				'poll_vote_change'			=> (isset($poll['poll_vote_change'])) ? $poll['poll_vote_change'] : 0,				'topic_last_view_time'		=> $current_time,				'topic_attachment'			=> (!empty($data['attachment_data'])) ? 1 : (isset($data['topic_attachment']) ? $data['topic_attachment'] : 0),			);			// Correctly set back the topic replies and forum posts... only if the topic was approved before and now gets disapproved			if (!$post_approval && $data['topic_approved'])			{				// Do we need to grab some topic informations?				if (!sizeof($topic_row))				{					$sql = 'SELECT topic_type, topic_replies, topic_replies_real, topic_approved						FROM ' . TOPICS_TABLE . '						WHERE topic_id = ' . $data['topic_id'];					$result = $db->sql_query($sql);					$topic_row = $db->sql_fetchrow($result);					$db->sql_freeresult($result);				}				// If this is the only post remaining we do not need to decrement topic_replies.				// Also do not decrement if first post - then the topic_replies will not be adjusted if approving the topic again.				// If this is an edited topic or the first post the topic gets completely disapproved later on...				$sql_data[FORUMS_TABLE]['stat'][] = 'forum_topics = forum_topics - 1';				$sql_data[FORUMS_TABLE]['stat'][] = 'forum_posts = forum_posts - ' . ($topic_row['topic_replies'] + 1);				set_config_count('num_topics', -1, true);				set_config_count('num_posts', ($topic_row['topic_replies'] + 1) * (-1), true);				// Only decrement this post, since this is the one non-approved now				if ($auth->acl_get('f_postcount', $data['forum_id']))				{					$sql_data[USERS_TABLE]['stat'][] = 'user_posts = user_posts - 1';				}			}		break;		case 'edit':		case 'edit_last_post':			// Correctly set back the topic replies and forum posts... but only if the post was approved before.			if (!$post_approval && $data['post_approved'])			{				$sql_data[TOPICS_TABLE]['stat'][] = 'topic_replies = topic_replies - 1, topic_last_view_time = ' . $current_time;				$sql_data[FORUMS_TABLE]['stat'][] = 'forum_posts = forum_posts - 1';				set_config_count('num_posts', -1, true);				if ($auth->acl_get('f_postcount', $data['forum_id']))				{					$sql_data[USERS_TABLE]['stat'][] = 'user_posts = user_posts - 1';				}			}		break;	}	// Submit new topic	if ($post_mode == 'post')	{		$sql = 'INSERT INTO ' . TOPICS_TABLE . ' ' .			$db->sql_build_array('INSERT', $sql_data[TOPICS_TABLE]['sql']);		$db->sql_query($sql);		$data['topic_id'] = $db->sql_nextid();		$sql_data[POSTS_TABLE]['sql'] = array_merge($sql_data[POSTS_TABLE]['sql'], array(			'topic_id' => $data['topic_id'])		);		unset($sql_data[TOPICS_TABLE]['sql']);	}	// Submit new post	if ($post_mode == 'post' || $post_mode == 'reply')	{		if ($post_mode == 'reply')		{			$sql_data[POSTS_TABLE]['sql'] = array_merge($sql_data[POSTS_TABLE]['sql'], array(				'topic_id' => $data['topic_id'])			);		}		$sql = 'INSERT INTO ' . POSTS_TABLE . ' ' . $db->sql_build_array('INSERT', $sql_data[POSTS_TABLE]['sql']);		$db->sql_query($sql);		$data['post_id'] = $db->sql_nextid();		if ($post_mode == 'post')		{			$sql_data[TOPICS_TABLE]['sql'] = array(				'topic_first_post_id'		=> $data['post_id'],				'topic_last_post_id'		=> $data['post_id'],				'topic_last_post_time'		=> $current_time,				'topic_last_poster_id'		=> (int) $user->data['user_id'],				'topic_last_poster_name'	=> (!$user->data['is_registered'] && $username) ? $username : (($user->data['user_id'] != ANONYMOUS) ? $user->data['username'] : ''),				'topic_last_poster_colour'	=> $user->data['user_colour'],				'topic_last_post_subject'	=> (string) $subject,			);		}		unset($sql_data[POSTS_TABLE]['sql']);	}	$make_global = false;	// Are we globalising or unglobalising?	if ($post_mode == 'edit_first_post' || $post_mode == 'edit_topic')	{		if (!sizeof($topic_row))		{			$sql = 'SELECT topic_type, topic_replies, topic_replies_real, topic_approved, topic_last_post_id				FROM ' . TOPICS_TABLE . '				WHERE topic_id = ' . $data['topic_id'];			$result = $db->sql_query($sql);			$topic_row = $db->sql_fetchrow($result);			$db->sql_freeresult($result);		}		// globalise/unglobalise?		if (($topic_row['topic_type'] != POST_GLOBAL && $topic_type == POST_GLOBAL) || ($topic_row['topic_type'] == POST_GLOBAL && $topic_type != POST_GLOBAL))		{			if (!empty($sql_data[FORUMS_TABLE]['stat']) && implode('', $sql_data[FORUMS_TABLE]['stat']))			{				$db->sql_query('UPDATE ' . FORUMS_TABLE . ' SET ' . implode(', ', $sql_data[FORUMS_TABLE]['stat']) . ' WHERE forum_id = ' . $data['forum_id']);			}			$make_global = true;			$sql_data[FORUMS_TABLE]['stat'] = array();		}		// globalise		if ($topic_row['topic_type'] != POST_GLOBAL && $topic_type == POST_GLOBAL)		{			// Decrement topic/post count			$sql_data[FORUMS_TABLE]['stat'][] = 'forum_posts = forum_posts - ' . ($topic_row['topic_replies_real'] + 1);			$sql_data[FORUMS_TABLE]['stat'][] = 'forum_topics_real = forum_topics_real - 1' . (($topic_row['topic_approved']) ? ', forum_topics = forum_topics - 1' : '');			// Update forum_ids for all posts			$sql = 'UPDATE ' . POSTS_TABLE . '				SET forum_id = 0				WHERE topic_id = ' . $data['topic_id'];			$db->sql_query($sql);		}		// unglobalise		else if ($topic_row['topic_type'] == POST_GLOBAL && $topic_type != POST_GLOBAL)		{			// Increment topic/post count			$sql_data[FORUMS_TABLE]['stat'][] = 'forum_posts = forum_posts + ' . ($topic_row['topic_replies_real'] + 1);			$sql_data[FORUMS_TABLE]['stat'][] = 'forum_topics_real = forum_topics_real + 1' . (($topic_row['topic_approved']) ? ', forum_topics = forum_topics + 1' : '');			// Update forum_ids for all posts			$sql = 'UPDATE ' . POSTS_TABLE . '				SET forum_id = ' . $data['forum_id'] . '				WHERE topic_id = ' . $data['topic_id'];			$db->sql_query($sql);		}	}	// Update the topics table	if (isset($sql_data[TOPICS_TABLE]['sql']))	{		$sql = 'UPDATE ' . TOPICS_TABLE . '			SET ' . $db->sql_build_array('UPDATE', $sql_data[TOPICS_TABLE]['sql']) . '			WHERE topic_id = ' . $data['topic_id'];		$db->sql_query($sql);	}	// Update the posts table	if (isset($sql_data[POSTS_TABLE]['sql']))	{		$sql = 'UPDATE ' . POSTS_TABLE . '			SET ' . $db->sql_build_array('UPDATE', $sql_data[POSTS_TABLE]['sql']) . '			WHERE post_id = ' . $data['post_id'];		$db->sql_query($sql);	}	// Update Poll Tables	if (isset($poll['poll_options']))	{		$cur_poll_options = array();		if ($mode == 'edit')		{			$sql = 'SELECT *				FROM ' . POLL_OPTIONS_TABLE . '				WHERE topic_id = ' . $data['topic_id'] . '				ORDER BY poll_option_id';			$result = $db->sql_query($sql);			$cur_poll_options = array();			while ($row = $db->sql_fetchrow($result))			{				$cur_poll_options[] = $row;			}			$db->sql_freeresult($result);		}		$sql_insert_ary = array();		for ($i = 0, $size = sizeof($poll['poll_options']); $i < $size; $i++)		{			if (strlen(trim($poll['poll_options'][$i])))			{				if (empty($cur_poll_options[$i]))				{					// If we add options we need to put them to the end to be able to preserve votes...					$sql_insert_ary[] = array(						'poll_option_id'	=> (int) sizeof($cur_poll_options) + 1 + sizeof($sql_insert_ary),						'topic_id'			=> (int) $data['topic_id'],						'poll_option_text'	=> (string) $poll['poll_options'][$i]					);				}				else if ($poll['poll_options'][$i] != $cur_poll_options[$i])				{					$sql = 'UPDATE ' . POLL_OPTIONS_TABLE . "						SET poll_option_text = '" . $db->sql_escape($poll['poll_options'][$i]) . "'						WHERE poll_option_id = " . $cur_poll_options[$i]['poll_option_id'] . '							AND topic_id = ' . $data['topic_id'];					$db->sql_query($sql);				}			}		}		$db->sql_multi_insert(POLL_OPTIONS_TABLE, $sql_insert_ary);		if (sizeof($poll['poll_options']) < sizeof($cur_poll_options))		{			$sql = 'DELETE FROM ' . POLL_OPTIONS_TABLE . '				WHERE poll_option_id > ' . sizeof($poll['poll_options']) . '					AND topic_id = ' . $data['topic_id'];			$db->sql_query($sql);		}		// If edited, we would need to reset votes (since options can be re-ordered above, you can't be sure if the change is for changing the text or adding an option		if ($mode == 'edit' && sizeof($poll['poll_options']) != sizeof($cur_poll_options))		{			$db->sql_query('DELETE FROM ' . POLL_VOTES_TABLE . ' WHERE topic_id = ' . $data['topic_id']);			$db->sql_query('UPDATE ' . POLL_OPTIONS_TABLE . ' SET poll_option_total = 0 WHERE topic_id = ' . $data['topic_id']);		}	}	// Submit Attachments	if (!empty($data['attachment_data']) && $data['post_id'] && in_array($mode, array('post', 'reply', 'quote', 'edit')))	{		$space_taken = $files_added = 0;		$orphan_rows = array();		foreach ($data['attachment_data'] as $pos => $attach_row)		{			$orphan_rows[(int) $attach_row['attach_id']] = array();		}		if (sizeof($orphan_rows))		{			$sql = 'SELECT attach_id, filesize, physical_filename				FROM ' . ATTACHMENTS_TABLE . '				WHERE ' . $db->sql_in_set('attach_id', array_keys($orphan_rows)) . '					AND is_orphan = 1					AND poster_id = ' . $user->data['user_id'];			$result = $db->sql_query($sql);			$orphan_rows = array();			while ($row = $db->sql_fetchrow($result))			{				$orphan_rows[$row['attach_id']] = $row;			}			$db->sql_freeresult($result);		}		foreach ($data['attachment_data'] as $pos => $attach_row)		{			if ($attach_row['is_orphan'] && !isset($orphan_rows[$attach_row['attach_id']]))			{				continue;			}			if (!$attach_row['is_orphan'])			{				// update entry in db if attachment already stored in db and filespace				$sql = 'UPDATE ' . ATTACHMENTS_TABLE . "					SET attach_comment = '" . $db->sql_escape($attach_row['attach_comment']) . "'					WHERE attach_id = " . (int) $attach_row['attach_id'] . '						AND is_orphan = 0';				$db->sql_query($sql);			}			else			{				// insert attachment into db				if (!@file_exists($phpbb_root_path . $config['upload_path'] . '/' . utf8_basename($orphan_rows[$attach_row['attach_id']]['physical_filename'])))				{					continue;				}				$space_taken += $orphan_rows[$attach_row['attach_id']]['filesize'];				$files_added++;				$attach_sql = array(					'post_msg_id'		=> $data['post_id'],					'topic_id'			=> $data['topic_id'],					'is_orphan'			=> 0,					'poster_id'			=> $poster_id,					'attach_comment'	=> $attach_row['attach_comment'],				);				$sql = 'UPDATE ' . ATTACHMENTS_TABLE . ' SET ' . $db->sql_build_array('UPDATE', $attach_sql) . '					WHERE attach_id = ' . $attach_row['attach_id'] . '						AND is_orphan = 1						AND poster_id = ' . $user->data['user_id'];				$db->sql_query($sql);			}		}		if ($space_taken && $files_added)		{			set_config_count('upload_dir_size', $space_taken, true);			set_config_count('num_files', $files_added, true);		}	}	// we need to update the last forum information	// only applicable if the topic is not global and it is approved	// we also check to make sure we are not dealing with globaling the latest topic (pretty rare but still needs to be checked)	if ($topic_type != POST_GLOBAL && !$make_global && ($post_approved || !$data['post_approved']))	{		// the last post makes us update the forum table. This can happen if...		// We make a new topic		// We reply to a topic		// We edit the last post in a topic and this post is the latest in the forum (maybe)		// We edit the only post in the topic		// We edit the first post in the topic and all the other posts are not approved		if (($post_mode == 'post' || $post_mode == 'reply') && $post_approved)		{			$sql_data[FORUMS_TABLE]['stat'][] = 'forum_last_post_id = ' . $data['post_id'];			$sql_data[FORUMS_TABLE]['stat'][] = "forum_last_post_subject = '" . $db->sql_escape($subject) . "'";			$sql_data[FORUMS_TABLE]['stat'][] = 'forum_last_post_time = ' . $current_time;			$sql_data[FORUMS_TABLE]['stat'][] = 'forum_last_poster_id = ' . (int) $user->data['user_id'];			$sql_data[FORUMS_TABLE]['stat'][] = "forum_last_poster_name = '" . $db->sql_escape((!$user->data['is_registered'] && $username) ? $username : (($user->data['user_id'] != ANONYMOUS) ? $user->data['username'] : '')) . "'";			$sql_data[FORUMS_TABLE]['stat'][] = "forum_last_poster_colour = '" . $db->sql_escape($user->data['user_colour']) . "'";		}		else if ($post_mode == 'edit_last_post' || $post_mode == 'edit_topic' || ($post_mode == 'edit_first_post' && !$data['topic_replies']))		{			// this does not _necessarily_ mean that we must update the info again,			// it just means that we might have to			$sql = 'SELECT forum_last_post_id, forum_last_post_subject				FROM ' . FORUMS_TABLE . '				WHERE forum_id = ' . (int) $data['forum_id'];			$result = $db->sql_query($sql);			$row = $db->sql_fetchrow($result);			$db->sql_freeresult($result);			// this post is the latest post in the forum, better update			if ($row['forum_last_post_id'] == $data['post_id'])			{				// If post approved and subject changed, or poster is anonymous, we need to update the forum_last* rows				if ($post_approved && ($row['forum_last_post_subject'] !== $subject || $data['poster_id'] == ANONYMOUS))				{					// the post's subject changed					if ($row['forum_last_post_subject'] !== $subject)					{						$sql_data[FORUMS_TABLE]['stat'][] = 'forum_last_post_subject = \'' . $db->sql_escape($subject) . '\'';					}					// Update the user name if poster is anonymous... just in case an admin changed it					if ($data['poster_id'] == ANONYMOUS)					{						$sql_data[FORUMS_TABLE]['stat'][] = "forum_last_poster_name = '" . $db->sql_escape($username) . "'";					}				}				else if ($data['post_approved'] !== $post_approved)				{					// we need a fresh change of socks, everything has become invalidated					$sql = 'SELECT MAX(topic_last_post_id) as last_post_id						FROM ' . TOPICS_TABLE . '						WHERE forum_id = ' . (int) $data['forum_id'] . '							AND topic_approved = 1';					$result = $db->sql_query($sql);					$row = $db->sql_fetchrow($result);					$db->sql_freeresult($result);					// any posts left in this forum?					if (!empty($row['last_post_id']))					{						$sql = 'SELECT p.post_id, p.post_subject, p.post_time, p.poster_id, p.post_username, u.user_id, u.username, u.user_colour							FROM ' . POSTS_TABLE . ' p, ' . USERS_TABLE . ' u							WHERE p.poster_id = u.user_id								AND p.post_id = ' . (int) $row['last_post_id'];						$result = $db->sql_query($sql);						$row = $db->sql_fetchrow($result);						$db->sql_freeresult($result);						// salvation, a post is found! jam it into the forums table						$sql_data[FORUMS_TABLE]['stat'][] = 'forum_last_post_id = ' . (int) $row['post_id'];						$sql_data[FORUMS_TABLE]['stat'][] = "forum_last_post_subject = '" . $db->sql_escape($row['post_subject']) . "'";						$sql_data[FORUMS_TABLE]['stat'][] = 'forum_last_post_time = ' . (int) $row['post_time'];						$sql_data[FORUMS_TABLE]['stat'][] = 'forum_last_poster_id = ' . (int) $row['poster_id'];						$sql_data[FORUMS_TABLE]['stat'][] = "forum_last_poster_name = '" . $db->sql_escape(($row['poster_id'] == ANONYMOUS) ? $row['post_username'] : $row['username']) . "'";						$sql_data[FORUMS_TABLE]['stat'][] = "forum_last_poster_colour = '" . $db->sql_escape($row['user_colour']) . "'";					}					else					{						// just our luck, the last topic in the forum has just been turned unapproved...						$sql_data[FORUMS_TABLE]['stat'][] = 'forum_last_post_id = 0';						$sql_data[FORUMS_TABLE]['stat'][] = "forum_last_post_subject = ''";						$sql_data[FORUMS_TABLE]['stat'][] = 'forum_last_post_time = 0';						$sql_data[FORUMS_TABLE]['stat'][] = 'forum_last_poster_id = 0';						$sql_data[FORUMS_TABLE]['stat'][] = "forum_last_poster_name = ''";						$sql_data[FORUMS_TABLE]['stat'][] = "forum_last_poster_colour = ''";					}				}			}		}	}	else if ($make_global)	{		// somebody decided to be a party pooper, we must recalculate the whole shebang (maybe)		$sql = 'SELECT forum_last_post_id			FROM ' . FORUMS_TABLE . '			WHERE forum_id = ' . (int) $data['forum_id'];		$result = $db->sql_query($sql);		$forum_row = $db->sql_fetchrow($result);		$db->sql_freeresult($result);		// we made a topic global, go get new data		if ($topic_row['topic_type'] != POST_GLOBAL && $topic_type == POST_GLOBAL && $forum_row['forum_last_post_id'] == $topic_row['topic_last_post_id'])		{			// we need a fresh change of socks, everything has become invalidated			$sql = 'SELECT MAX(topic_last_post_id) as last_post_id				FROM ' . TOPICS_TABLE . '				WHERE forum_id = ' . (int) $data['forum_id'] . '					AND topic_approved = 1';			$result = $db->sql_query($sql);			$row = $db->sql_fetchrow($result);			$db->sql_freeresult($result);			// any posts left in this forum?			if (!empty($row['last_post_id']))			{				$sql = 'SELECT p.post_id, p.post_subject, p.post_time, p.poster_id, p.post_username, u.user_id, u.username, u.user_colour					FROM ' . POSTS_TABLE . ' p, ' . USERS_TABLE . ' u					WHERE p.poster_id = u.user_id						AND p.post_id = ' . (int) $row['last_post_id'];				$result = $db->sql_query($sql);				$row = $db->sql_fetchrow($result);				$db->sql_freeresult($result);				// salvation, a post is found! jam it into the forums table				$sql_data[FORUMS_TABLE]['stat'][] = 'forum_last_post_id = ' . (int) $row['post_id'];				$sql_data[FORUMS_TABLE]['stat'][] = "forum_last_post_subject = '" . $db->sql_escape($row['post_subject']) . "'";				$sql_data[FORUMS_TABLE]['stat'][] = 'forum_last_post_time = ' . (int) $row['post_time'];				$sql_data[FORUMS_TABLE]['stat'][] = 'forum_last_poster_id = ' . (int) $row['poster_id'];				$sql_data[FORUMS_TABLE]['stat'][] = "forum_last_poster_name = '" . $db->sql_escape(($row['poster_id'] == ANONYMOUS) ? $row['post_username'] : $row['username']) . "'";				$sql_data[FORUMS_TABLE]['stat'][] = "forum_last_poster_colour = '" . $db->sql_escape($row['user_colour']) . "'";			}			else			{				// just our luck, the last topic in the forum has just been globalized...				$sql_data[FORUMS_TABLE]['stat'][] = 'forum_last_post_id = 0';				$sql_data[FORUMS_TABLE]['stat'][] = "forum_last_post_subject = ''";				$sql_data[FORUMS_TABLE]['stat'][] = 'forum_last_post_time = 0';				$sql_data[FORUMS_TABLE]['stat'][] = 'forum_last_poster_id = 0';				$sql_data[FORUMS_TABLE]['stat'][] = "forum_last_poster_name = ''";				$sql_data[FORUMS_TABLE]['stat'][] = "forum_last_poster_colour = ''";			}		}		else if ($topic_row['topic_type'] == POST_GLOBAL && $topic_type != POST_GLOBAL && $forum_row['forum_last_post_id'] < $topic_row['topic_last_post_id'])		{			// this post has a higher id, it is newer			$sql = 'SELECT p.post_id, p.post_subject, p.post_time, p.poster_id, p.post_username, u.user_id, u.username, u.user_colour				FROM ' . POSTS_TABLE . ' p, ' . USERS_TABLE . ' u				WHERE p.poster_id = u.user_id					AND p.post_id = ' . (int) $topic_row['topic_last_post_id'];			$result = $db->sql_query($sql);			$row = $db->sql_fetchrow($result);			$db->sql_freeresult($result);			// salvation, a post is found! jam it into the forums table			$sql_data[FORUMS_TABLE]['stat'][] = 'forum_last_post_id = ' . (int) $row['post_id'];			$sql_data[FORUMS_TABLE]['stat'][] = "forum_last_post_subject = '" . $db->sql_escape($row['post_subject']) . "'";			$sql_data[FORUMS_TABLE]['stat'][] = 'forum_last_post_time = ' . (int) $row['post_time'];			$sql_data[FORUMS_TABLE]['stat'][] = 'forum_last_poster_id = ' . (int) $row['poster_id'];			$sql_data[FORUMS_TABLE]['stat'][] = "forum_last_poster_name = '" . $db->sql_escape(($row['poster_id'] == ANONYMOUS) ? $row['post_username'] : $row['username']) . "'";			$sql_data[FORUMS_TABLE]['stat'][] = "forum_last_poster_colour = '" . $db->sql_escape($row['user_colour']) . "'";		}	}	// topic sync time!	// simply, we update if it is a reply or the last post is edited	if ($post_approved)	{		// reply requires the whole thing		if ($post_mode == 'reply')		{			$sql_data[TOPICS_TABLE]['stat'][] = 'topic_last_post_id = ' . (int) $data['post_id'];			$sql_data[TOPICS_TABLE]['stat'][] = 'topic_last_poster_id = ' . (int) $user->data['user_id'];			$sql_data[TOPICS_TABLE]['stat'][] = "topic_last_poster_name = '" . $db->sql_escape((!$user->data['is_registered'] && $username) ? $username : (($user->data['user_id'] != ANONYMOUS) ? $user->data['username'] : '')) . "'";			$sql_data[TOPICS_TABLE]['stat'][] = "topic_last_poster_colour = '" . (($user->data['user_id'] != ANONYMOUS) ? $db->sql_escape($user->data['user_colour']) : '') . "'";			$sql_data[TOPICS_TABLE]['stat'][] = "topic_last_post_subject = '" . $db->sql_escape($subject) . "'";			$sql_data[TOPICS_TABLE]['stat'][] = 'topic_last_post_time = ' . (int) $current_time;		}		else if ($post_mode == 'edit_last_post' || $post_mode == 'edit_topic' || ($post_mode == 'edit_first_post' && !$data['topic_replies']))		{			// only the subject can be changed from edit			$sql_data[TOPICS_TABLE]['stat'][] = "topic_last_post_subject = '" . $db->sql_escape($subject) . "'";			// Maybe not only the subject, but also changing anonymous usernames. ;)			if ($data['poster_id'] == ANONYMOUS)			{				$sql_data[TOPICS_TABLE]['stat'][] = "topic_last_poster_name = '" . $db->sql_escape($username) . "'";			}		}	}	else if (!$data['post_approved'] && ($post_mode == 'edit_last_post' || $post_mode == 'edit_topic' || ($post_mode == 'edit_first_post' && !$data['topic_replies'])))	{		// like having the rug pulled from under us		$sql = 'SELECT MAX(post_id) as last_post_id			FROM ' . POSTS_TABLE . '			WHERE topic_id = ' . (int) $data['topic_id'] . '				AND post_approved = 1';		$result = $db->sql_query($sql);		$row = $db->sql_fetchrow($result);		$db->sql_freeresult($result);		// any posts left in this forum?		if (!empty($row['last_post_id']))		{			$sql = 'SELECT p.post_id, p.post_subject, p.post_time, p.poster_id, p.post_username, u.user_id, u.username, u.user_colour				FROM ' . POSTS_TABLE . ' p, ' . USERS_TABLE . ' u				WHERE p.poster_id = u.user_id					AND p.post_id = ' . (int) $row['last_post_id'];			$result = $db->sql_query($sql);			$row = $db->sql_fetchrow($result);			$db->sql_freeresult($result);			// salvation, a post is found! jam it into the topics table			$sql_data[TOPICS_TABLE]['stat'][] = 'topic_last_post_id = ' . (int) $row['post_id'];			$sql_data[TOPICS_TABLE]['stat'][] = "topic_last_post_subject = '" . $db->sql_escape($row['post_subject']) . "'";			$sql_data[TOPICS_TABLE]['stat'][] = 'topic_last_post_time = ' . (int) $row['post_time'];			$sql_data[TOPICS_TABLE]['stat'][] = 'topic_last_poster_id = ' . (int) $row['poster_id'];			$sql_data[TOPICS_TABLE]['stat'][] = "topic_last_poster_name = '" . $db->sql_escape(($row['poster_id'] == ANONYMOUS) ? $row['post_username'] : $row['username']) . "'";			$sql_data[TOPICS_TABLE]['stat'][] = "topic_last_poster_colour = '" . $db->sql_escape($row['user_colour']) . "'";		}	}	// Update total post count, do not consider moderated posts/topics	if ($post_approval)	{		if ($post_mode == 'post')		{			set_config_count('num_topics', 1, true);			set_config_count('num_posts', 1, true);		}		if ($post_mode == 'reply')		{			set_config_count('num_posts', 1, true);		}	}	// Update forum stats	$where_sql = array(POSTS_TABLE => 'post_id = ' . $data['post_id'], TOPICS_TABLE => 'topic_id = ' . $data['topic_id'], FORUMS_TABLE => 'forum_id = ' . $data['forum_id'], USERS_TABLE => 'user_id = ' . $poster_id);	foreach ($sql_data as $table => $update_ary)	{		if (isset($update_ary['stat']) && implode('', $update_ary['stat']))		{			$sql = "UPDATE $table SET " . implode(', ', $update_ary['stat']) . ' WHERE ' . $where_sql[$table];			$db->sql_query($sql);		}	}	// Delete topic shadows (if any exist). We do not need a shadow topic for an global announcement	if ($make_global)	{		$sql = 'DELETE FROM ' . TOPICS_TABLE . '			WHERE topic_moved_id = ' . $data['topic_id'];		$db->sql_query($sql);	}	// Committing the transaction before updating search index	$db->sql_transaction('commit');	// Delete draft if post was loaded...	$draft_id = request_var('draft_loaded', 0);	if ($draft_id)	{		$sql = 'DELETE FROM ' . DRAFTS_TABLE . "			WHERE draft_id = $draft_id				AND user_id = {$user->data['user_id']}";		$db->sql_query($sql);	}	// Index message contents	if ($update_search_index && $data['enable_indexing'])	{		// Select the search method and do some additional checks to ensure it can actually be utilised		$search_type = basename($config['search_type']);		if (!file_exists($phpbb_root_path . 'includes/search/' . $search_type . '.' . $phpEx))		{			trigger_error('NO_SUCH_SEARCH_MODULE');		}		if (!class_exists($search_type))		{			include("{$phpbb_root_path}includes/search/$search_type.$phpEx");		}		$error = false;		$search = new $search_type($error);		if ($error)		{			trigger_error($error);		}		$search->index($mode, $data['post_id'], $data['message'], $subject, $poster_id, ($topic_type == POST_GLOBAL) ? 0 : $data['forum_id']);	}	// Topic Notification, do not change if moderator is changing other users posts...	if ($user->data['user_id'] == $poster_id)	{		if (!$data['notify_set'] && $data['notify'])		{			$sql = 'INSERT INTO ' . TOPICS_WATCH_TABLE . ' (user_id, topic_id)				VALUES (' . $user->data['user_id'] . ', ' . $data['topic_id'] . ')';			$db->sql_query($sql);		}		else if (($config['email_enable'] || $config['jab_enable']) && $data['notify_set'] && !$data['notify'])		{			$sql = 'DELETE FROM ' . TOPICS_WATCH_TABLE . '				WHERE user_id = ' . $user->data['user_id'] . '					AND topic_id = ' . $data['topic_id'];			$db->sql_query($sql);		}	}	if ($mode == 'post' || $mode == 'reply' || $mode == 'quote')	{		// Mark this topic as posted to		markread('post', $data['forum_id'], $data['topic_id']);	}	// Mark this topic as read	// We do not use post_time here, this is intended (post_time can have a date in the past if editing a message)	markread('topic', (($topic_type == POST_GLOBAL) ? 0 : $data['forum_id']), $data['topic_id'], time());	//	if ($config['load_db_lastread'] && $user->data['is_registered'])	{		$sql = 'SELECT mark_time			FROM ' . FORUMS_TRACK_TABLE . '			WHERE user_id = ' . $user->data['user_id'] . '				AND forum_id = ' . (($topic_type == POST_GLOBAL) ? 0 : $data['forum_id']);		$result = $db->sql_query($sql);		$f_mark_time = (int) $db->sql_fetchfield('mark_time');		$db->sql_freeresult($result);	}	else if ($config['load_anon_lastread'] || $user->data['is_registered'])	{		$f_mark_time = false;	}	if (($config['load_db_lastread'] && $user->data['is_registered']) || $config['load_anon_lastread'] || $user->data['is_registered'])	{		// Update forum info		if ($topic_type == POST_GLOBAL)		{			$sql = 'SELECT MAX(topic_last_post_time) as forum_last_post_time				FROM ' . TOPICS_TABLE . '				WHERE forum_id = 0';		}		else		{			$sql = 'SELECT forum_last_post_time				FROM ' . FORUMS_TABLE . '				WHERE forum_id = ' . $data['forum_id'];		}		$result = $db->sql_query($sql);		$forum_last_post_time = (int) $db->sql_fetchfield('forum_last_post_time');		$db->sql_freeresult($result);		update_forum_tracking_info((($topic_type == POST_GLOBAL) ? 0 : $data['forum_id']), $forum_last_post_time, $f_mark_time, false);	}	// Send Notifications	if (($mode == 'reply' || $mode == 'quote' || $mode == 'post') && $post_approval)	{		user_notification($mode, $subject, $data['topic_title'], $data['forum_name'], $data['forum_id'], $data['topic_id'], $data['post_id']);	}	$params = $add_anchor = '';	if ($post_approval)	{		$params .= '&amp;t=' . $data['topic_id'];		if ($mode != 'post')		{			$params .= '&amp;p=' . $data['post_id'];			$add_anchor = '#p' . $data['post_id'];		}	}	else if ($mode != 'post' && $post_mode != 'edit_first_post' && $post_mode != 'edit_topic')	{		$params .= '&amp;t=' . $data['topic_id'];	}	$url = (!$params) ? "{$phpbb_root_path}viewforum.$phpEx" : "{$phpbb_root_path}viewtopic.$phpEx";	$url = append_sid($url, 'f=' . $data['forum_id'] . $params) . $add_anchor;	return $url;}/*** Handle topic bumping* @param int $forum_id The ID of the forum the topic is being bumped belongs to* @param int $topic_id The ID of the topic is being bumping* @param array $post_data Passes some topic parameters:*				- 'topic_title'*				- 'topic_last_post_id'*				- 'topic_last_poster_id'*				- 'topic_last_post_subject'*				- 'topic_last_poster_name'*				- 'topic_last_poster_colour'* @param int $bump_time The time at which topic was bumped, usually it is a current time as obtained via time(). * @return string An URL to the bumped topic, example: ./viewtopic.php?forum_id=1&amptopic_id=2&ampp=3#p3*/function phpbb_bump_topic($forum_id, $topic_id, $post_data, $bump_time = false){	global $config, $db, $user, $phpEx, $phpbb_root_path;	if ($bump_time === false)	{		$bump_time = time();	}	// Begin bumping	$db->sql_transaction('begin');	// Update the topic's last post post_time	$sql = 'UPDATE ' . POSTS_TABLE . "		SET post_time = $bump_time		WHERE post_id = {$post_data['topic_last_post_id']}			AND topic_id = $topic_id";	$db->sql_query($sql);	// Sync the topic's last post time, the rest of the topic's last post data isn't changed	$sql = 'UPDATE ' . TOPICS_TABLE . "		SET topic_last_post_time = $bump_time,			topic_bumped = 1,			topic_bumper = " . $user->data['user_id'] . "		WHERE topic_id = $topic_id";	$db->sql_query($sql);	// Update the forum's last post info	$sql = 'UPDATE ' . FORUMS_TABLE . "		SET forum_last_post_id = " . $post_data['topic_last_post_id'] . ",			forum_last_poster_id = " . $post_data['topic_last_poster_id'] . ",			forum_last_post_subject = '" . $db->sql_escape($post_data['topic_last_post_subject']) . "',			forum_last_post_time = $bump_time,			forum_last_poster_name = '" . $db->sql_escape($post_data['topic_last_poster_name']) . "',			forum_last_poster_colour = '" . $db->sql_escape($post_data['topic_last_poster_colour']) . "'		WHERE forum_id = $forum_id";	$db->sql_query($sql);	// Update bumper's time of the last posting to prevent flood	$sql = 'UPDATE ' . USERS_TABLE . "		SET user_lastpost_time = $bump_time		WHERE user_id = " . $user->data['user_id'];	$db->sql_query($sql);	$db->sql_transaction('commit');	// Mark this topic as posted to	markread('post', $forum_id, $topic_id, $bump_time);	// Mark this topic as read	markread('topic', $forum_id, $topic_id, $bump_time);	// Update forum tracking info	if ($config['load_db_lastread'] && $user->data['is_registered'])	{		$sql = 'SELECT mark_time			FROM ' . FORUMS_TRACK_TABLE . '			WHERE user_id = ' . $user->data['user_id'] . '				AND forum_id = ' . $forum_id;		$result = $db->sql_query($sql);		$f_mark_time = (int) $db->sql_fetchfield('mark_time');		$db->sql_freeresult($result);	}	else if ($config['load_anon_lastread'] || $user->data['is_registered'])	{		$f_mark_time = false;	}	if (($config['load_db_lastread'] && $user->data['is_registered']) || $config['load_anon_lastread'] || $user->data['is_registered'])	{		// Update forum info		$sql = 'SELECT forum_last_post_time			FROM ' . FORUMS_TABLE . '			WHERE forum_id = ' . $forum_id;		$result = $db->sql_query($sql);		$forum_last_post_time = (int) $db->sql_fetchfield('forum_last_post_time');		$db->sql_freeresult($result);		update_forum_tracking_info($forum_id, $forum_last_post_time, $f_mark_time, false);	}	add_log('mod', $forum_id, $topic_id, 'LOG_BUMP_TOPIC', $post_data['topic_title']);	$url = append_sid("{$phpbb_root_path}viewtopic.$phpEx", "f=$forum_id&amp;t=$topic_id&amp;p={$post_data['topic_last_post_id']}") . "#p{$post_data['topic_last_post_id']}";	return $url;}?>
<?php/**** @package ucp* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @ignore*/if (!defined('IN_PHPBB')){	exit;}/*** Execute message options*/function message_options($id, $mode, $global_privmsgs_rules, $global_rule_conditions){	global $phpbb_root_path, $phpEx, $user, $template, $auth, $config, $db;	$redirect_url = append_sid("{$phpbb_root_path}ucp.$phpEx", "i=pm&amp;mode=options");	add_form_key('ucp_pm_options');	// Change "full folder" setting - what to do if folder is full	if (isset($_POST['fullfolder']))	{		check_form_key('ucp_pm_options', $config['form_token_lifetime'], $redirect_url);		$full_action = request_var('full_action', 0);		$set_folder_id = 0;		switch ($full_action)		{			case 1:				$set_folder_id = FULL_FOLDER_DELETE;			break;			case 2:				$set_folder_id = request_var('full_move_to', PRIVMSGS_INBOX);			break;			case 3:				$set_folder_id = FULL_FOLDER_HOLD;			break;			default:				$full_action = 0;			break;		}		if ($full_action)		{			$sql = 'UPDATE ' . USERS_TABLE . '				SET user_full_folder = ' . $set_folder_id . '				WHERE user_id = ' . $user->data['user_id'];			$db->sql_query($sql);			$user->data['user_full_folder'] = $set_folder_id;			$message = $user->lang['FULL_FOLDER_OPTION_CHANGED'] . '<br /><br />' . sprintf($user->lang['RETURN_UCP'], '<a href="' . $redirect_url . '">', '</a>');			meta_refresh(3, $redirect_url);			trigger_error($message);		}	}		// Add Folder	if (isset($_POST['addfolder']))	{		if (check_form_key('ucp_pm_options'))		{			$folder_name = utf8_normalize_nfc(request_var('foldername', '', true));			$msg = '';			if ($folder_name)			{				$sql = 'SELECT folder_name					FROM ' . PRIVMSGS_FOLDER_TABLE . "					WHERE folder_name = '" . $db->sql_escape($folder_name) . "'						AND user_id = " . $user->data['user_id'];				$result = $db->sql_query_limit($sql, 1);				$row = $db->sql_fetchrow($result);				$db->sql_freeresult($result);				if ($row)				{					trigger_error(sprintf($user->lang['FOLDER_NAME_EXIST'], $folder_name));				}				$sql = 'SELECT COUNT(folder_id) as num_folder					FROM ' . PRIVMSGS_FOLDER_TABLE . '						WHERE user_id = ' . $user->data['user_id'];				$result = $db->sql_query($sql);				$num_folder = (int) $db->sql_fetchfield('num_folder');				$db->sql_freeresult($result);				if ($num_folder >= $config['pm_max_boxes'])				{					trigger_error('MAX_FOLDER_REACHED');				}				$sql = 'INSERT INTO ' . PRIVMSGS_FOLDER_TABLE . ' ' . $db->sql_build_array('INSERT', array(					'user_id'		=> (int) $user->data['user_id'],					'folder_name'	=> $folder_name)				);				$db->sql_query($sql);				$msg = $user->lang['FOLDER_ADDED'];			}			else			{				$msg = $user->lang['FOLDER_NAME_EMPTY'];			}		}		else		{			$msg = $user->lang['FORM_INVALID'];		}		$message = $msg . '<br /><br />' . sprintf($user->lang['RETURN_UCP'], '<a href="' . $redirect_url . '">', '</a>');		meta_refresh(3, $redirect_url);		trigger_error($message);	}	// Rename folder	if (isset($_POST['rename_folder']))	{		if (check_form_key('ucp_pm_options'))		{			$new_folder_name = utf8_normalize_nfc(request_var('new_folder_name', '', true));			$rename_folder_id= request_var('rename_folder_id', 0);			if (!$new_folder_name)			{				trigger_error('NO_NEW_FOLDER_NAME');			}			// Select custom folder			$sql = 'SELECT folder_name, pm_count				FROM ' . PRIVMSGS_FOLDER_TABLE . "				WHERE user_id = {$user->data['user_id']}					AND folder_id = $rename_folder_id";			$result = $db->sql_query_limit($sql, 1);			$folder_row = $db->sql_fetchrow($result);			$db->sql_freeresult($result);			if (!$folder_row)			{				trigger_error('CANNOT_RENAME_FOLDER');			}			$sql = 'UPDATE ' . PRIVMSGS_FOLDER_TABLE . "				SET folder_name = '" . $db->sql_escape($new_folder_name) . "'				WHERE folder_id = $rename_folder_id					AND user_id = {$user->data['user_id']}";			$db->sql_query($sql);			$msg = $user->lang['FOLDER_RENAMED'];		}		else		{			$msg = $user->lang['FORM_INVALID'];		}		$message = $msg . '<br /><br />' . sprintf($user->lang['RETURN_UCP'], '<a href="' . $redirect_url . '">', '</a>');		meta_refresh(3, $redirect_url);		trigger_error($message);	}	// Remove Folder	if (isset($_POST['remove_folder']))	{		$remove_folder_id = request_var('remove_folder_id', 0);		// Default to "move all messages to inbox"		$remove_action = request_var('remove_action', 1);		$move_to = request_var('move_to', PRIVMSGS_INBOX);		// Move to same folder?		if ($remove_action == 1 && $remove_folder_id == $move_to)		{			trigger_error('CANNOT_MOVE_TO_SAME_FOLDER');		}		// Select custom folder		$sql = 'SELECT folder_name, pm_count			FROM ' . PRIVMSGS_FOLDER_TABLE . "			WHERE user_id = {$user->data['user_id']}				AND folder_id = $remove_folder_id";		$result = $db->sql_query_limit($sql, 1);		$folder_row = $db->sql_fetchrow($result);		$db->sql_freeresult($result);		if (!$folder_row)		{			trigger_error('CANNOT_REMOVE_FOLDER');		}		$s_hidden_fields = array(			'remove_folder_id'	=> $remove_folder_id,			'remove_action'		=> $remove_action,			'move_to'			=> $move_to,			'remove_folder'		=> 1		);		// Do we need to confirm?		if (confirm_box(true))		{			// Gather message ids			$sql = 'SELECT msg_id				FROM ' . PRIVMSGS_TO_TABLE . '				WHERE user_id = ' . $user->data['user_id'] . "					AND folder_id = $remove_folder_id";			$result = $db->sql_query($sql);			$msg_ids = array();			while ($row = $db->sql_fetchrow($result))			{				$msg_ids[] = (int) $row['msg_id'];			}			$db->sql_freeresult($result);			// First of all, copy all messages to another folder... or delete all messages			switch ($remove_action)			{				// Move Messages				case 1:					$num_moved = move_pm($user->data['user_id'], $user->data['message_limit'], $msg_ids, $move_to, $remove_folder_id);										// Something went wrong, only partially moved?					if ($num_moved != $folder_row['pm_count'])					{						trigger_error(sprintf($user->lang['MOVE_PM_ERROR'], $num_moved, $folder_row['pm_count']));					}				break;				// Remove Messages				case 2:					delete_pm($user->data['user_id'], $msg_ids, $remove_folder_id);				break;			}			// Remove folder			$sql = 'DELETE FROM ' . PRIVMSGS_FOLDER_TABLE . "				WHERE user_id = {$user->data['user_id']}					AND folder_id = $remove_folder_id";			$db->sql_query($sql);			// Check full folder option. If the removed folder has been specified as destination switch back to inbox			if ($user->data['user_full_folder'] == $remove_folder_id)			{				$sql = 'UPDATE ' . USERS_TABLE . '					SET user_full_folder = ' . PRIVMSGS_INBOX . '					WHERE user_id = ' . $user->data['user_id'];				$db->sql_query($sql);				$user->data['user_full_folder'] = PRIVMSGS_INBOX;			}			// Now make sure the folder is not used for rules			// We assign another folder id (the one the messages got moved to) or assign the INBOX (to not have to remove any rule)			$sql = 'UPDATE ' . PRIVMSGS_RULES_TABLE . ' SET rule_folder_id = ';			$sql .= ($remove_action == 1) ? $move_to : PRIVMSGS_INBOX;			$sql .= ' WHERE rule_folder_id = ' . $remove_folder_id;			$db->sql_query($sql);			$meta_info = append_sid("{$phpbb_root_path}ucp.$phpEx", "i=pm&amp;mode=$mode");			$message = $user->lang['FOLDER_REMOVED'];			meta_refresh(3, $meta_info);			$message .= '<br /><br />' . sprintf($user->lang['RETURN_UCP'], '<a href="' . $meta_info . '">', '</a>');			trigger_error($message);		}		else		{			confirm_box(false, 'REMOVE_FOLDER', build_hidden_fields($s_hidden_fields));		}	}	// Add Rule	if (isset($_POST['add_rule']))	{		if (check_form_key('ucp_pm_options'))		{			$check_option	= request_var('check_option', 0);			$rule_option	= request_var('rule_option', 0);			$cond_option	= request_var('cond_option', '');			$action_option	= explode('|', request_var('action_option', ''));			$rule_string	= ($cond_option != 'none') ? utf8_normalize_nfc(request_var('rule_string', '', true)) : '';			$rule_user_id	= ($cond_option != 'none') ? request_var('rule_user_id', 0) : 0;			$rule_group_id	= ($cond_option != 'none') ? request_var('rule_group_id', 0) : 0;			$action = (int) $action_option[0];			$folder_id = (int) $action_option[1];			if (!$action || !$check_option || !$rule_option || !$cond_option || ($cond_option != 'none' && !$rule_string))			{				trigger_error('RULE_NOT_DEFINED');			}			if (($cond_option == 'user' && !$rule_user_id) || ($cond_option == 'group' && !$rule_group_id))			{				trigger_error('RULE_NOT_DEFINED');			}			$rule_ary = array(				'user_id'			=> $user->data['user_id'],				'rule_check'		=> $check_option,				'rule_connection'	=> $rule_option,				'rule_string'		=> $rule_string,				'rule_user_id'		=> $rule_user_id,				'rule_group_id'		=> $rule_group_id,				'rule_action'		=> $action,				'rule_folder_id'	=> $folder_id			);			$sql = 'SELECT rule_id				FROM ' . PRIVMSGS_RULES_TABLE . '				WHERE ' . $db->sql_build_array('SELECT', $rule_ary);			$result = $db->sql_query($sql);			$row = $db->sql_fetchrow($result);			$db->sql_freeresult($result);			if ($row)			{				trigger_error('RULE_ALREADY_DEFINED');			}			$sql = 'INSERT INTO ' . PRIVMSGS_RULES_TABLE . ' ' . $db->sql_build_array('INSERT', $rule_ary);			$db->sql_query($sql);			// Update users message rules			$sql = 'UPDATE ' . USERS_TABLE . '				SET user_message_rules = 1				WHERE user_id = ' . $user->data['user_id'];			$db->sql_query($sql);			$msg = $user->lang['RULE_ADDED'];		}		else		{			$msg = $user->lang['FORM_INVALID'];		}		$message = $msg . '<br /><br />' . sprintf($user->lang['RETURN_UCP'], '<a href="' . $redirect_url . '">', '</a>');		meta_refresh(3, $redirect_url);		trigger_error($message);	}	// Remove Rule	if (isset($_POST['delete_rule']) && !isset($_POST['cancel']))	{		$delete_id = array_keys(request_var('delete_rule', array(0 => 0)));		$delete_id = (!empty($delete_id[0])) ? $delete_id[0] : 0;		if (!$delete_id)		{			redirect(append_sid("{$phpbb_root_path}ucp.$phpEx", 'i=pm&amp;mode=' . $mode));		}		// Do we need to confirm?		if (confirm_box(true))		{			$sql = 'DELETE FROM ' . PRIVMSGS_RULES_TABLE . '				WHERE user_id = ' . $user->data['user_id'] . "					AND rule_id = $delete_id";			$db->sql_query($sql);			$meta_info = append_sid("{$phpbb_root_path}ucp.$phpEx", 'i=pm&amp;mode=' . $mode);			$message = $user->lang['RULE_DELETED'];			// Reset user_message_rules if no more assigned			$sql = 'SELECT rule_id				FROM ' . PRIVMSGS_RULES_TABLE . '				WHERE user_id = ' . $user->data['user_id'];			$result = $db->sql_query_limit($sql, 1);			$row = $db->sql_fetchrow($result);			$db->sql_freeresult($result);			// Update users message rules			if (!$row)			{				$sql = 'UPDATE ' . USERS_TABLE . '					SET user_message_rules = 0					WHERE user_id = ' . $user->data['user_id'];				$db->sql_query($sql);			}			meta_refresh(3, $meta_info);			$message .= '<br /><br />' . sprintf($user->lang['RETURN_UCP'], '<a href="' . $meta_info . '">', '</a>');			trigger_error($message);		}		else		{			confirm_box(false, 'DELETE_RULE', build_hidden_fields(array('delete_rule' => array($delete_id => 1))));		}	}	$folder = array();	$sql = 'SELECT COUNT(msg_id) as num_messages		FROM ' . PRIVMSGS_TO_TABLE . '		WHERE user_id = ' . $user->data['user_id'] . '			AND folder_id = ' . PRIVMSGS_INBOX;	$result = $db->sql_query($sql);	$num_messages = (int) $db->sql_fetchfield('num_messages');	$db->sql_freeresult($result);		$folder[PRIVMSGS_INBOX] = array(		'folder_name'		=> $user->lang['PM_INBOX'],		'message_status'	=> sprintf($user->lang['FOLDER_MESSAGE_STATUS'], $num_messages, $user->data['message_limit'])	);	$sql = 'SELECT folder_id, folder_name, pm_count		FROM ' . PRIVMSGS_FOLDER_TABLE . '			WHERE user_id = ' . $user->data['user_id'];	$result = $db->sql_query($sql);	$num_user_folder = 0;	while ($row = $db->sql_fetchrow($result))	{		$num_user_folder++;		$folder[$row['folder_id']] = array(			'folder_name'		=> $row['folder_name'],			'message_status'	=> sprintf($user->lang['FOLDER_MESSAGE_STATUS'], $row['pm_count'], $user->data['message_limit'])		);	}	$db->sql_freeresult($result);	$s_full_folder_options = $s_to_folder_options = $s_folder_options = '';	if ($user->data['user_full_folder'] == FULL_FOLDER_NONE)	{		// -3 here to let the correct folder id be selected		$to_folder_id = $config['full_folder_action'] - 3;	}	else	{		$to_folder_id = $user->data['user_full_folder'];	}	foreach ($folder as $folder_id => $folder_ary)	{		$s_full_folder_options .= '<option value="' . $folder_id . '"' . (($user->data['user_full_folder'] == $folder_id) ? ' selected="selected"' : '') . '>' . $folder_ary['folder_name'] . ' (' . $folder_ary['message_status'] . ')</option>';		$s_to_folder_options .= '<option value="' . $folder_id . '"' . (($to_folder_id == $folder_id) ? ' selected="selected"' : '') . '>' . $folder_ary['folder_name'] . ' (' . $folder_ary['message_status'] . ')</option>';		if ($folder_id != PRIVMSGS_INBOX)		{			$s_folder_options .= '<option value="' . $folder_id . '">' . $folder_ary['folder_name'] . ' (' . $folder_ary['message_status'] . ')</option>';		}	}	$s_delete_checked = ($user->data['user_full_folder'] == FULL_FOLDER_DELETE) ? ' checked="checked"' : '';	$s_hold_checked = ($user->data['user_full_folder'] == FULL_FOLDER_HOLD) ? ' checked="checked"' : '';	$s_move_checked = ($user->data['user_full_folder'] >= 0) ? ' checked="checked"' : '';	if ($user->data['user_full_folder'] == FULL_FOLDER_NONE)	{		switch ($config['full_folder_action'])		{			case 1:				$s_delete_checked = ' checked="checked"';			break;			case 2:				$s_hold_checked = ' checked="checked"';			break;		}	}	$template->assign_vars(array(		'S_FULL_FOLDER_OPTIONS'	=> $s_full_folder_options,		'S_TO_FOLDER_OPTIONS'	=> $s_to_folder_options,		'S_FOLDER_OPTIONS'		=> $s_folder_options,		'S_DELETE_CHECKED'		=> $s_delete_checked,		'S_HOLD_CHECKED'		=> $s_hold_checked,		'S_MOVE_CHECKED'		=> $s_move_checked,		'S_MAX_FOLDER_REACHED'	=> ($num_user_folder >= $config['pm_max_boxes']) ? true : false,		'S_MAX_FOLDER_ZERO'		=> ($config['pm_max_boxes'] == 0) ? true : false,		'DEFAULT_ACTION'		=> ($config['full_folder_action'] == 1) ? $user->lang['DELETE_OLDEST_MESSAGES'] : $user->lang['HOLD_NEW_MESSAGES'],		'U_FIND_USERNAME'		=> append_sid("{$phpbb_root_path}memberlist.$phpEx", 'mode=searchuser&amp;form=ucp&amp;field=rule_string&amp;select_single=true'),	));	$rule_lang = $action_lang = $check_lang = array();	// Build all three language arrays	preg_replace('#^((RULE|ACTION|CHECK)_([A-Z0-9_]+))$#e', "\${strtolower('\\2') . '_lang'}[constant('\\1')] = \$user->lang['PM_\\2']['\\3']", array_keys(get_defined_constants()));	/*		Rule Ordering:			-> CHECK_* -> RULE_* [IN $global_privmsgs_rules:CHECK_*] -> [IF $rule_conditions[RULE_*] [|text|bool|user|group|own_group]] -> ACTION_*	*/	$check_option	= request_var('check_option', 0);	$rule_option	= request_var('rule_option', 0);	$cond_option	= request_var('cond_option', '');	$action_option	= request_var('action_option', '');	$back = (isset($_REQUEST['back'])) ? request_var('back', array('' => 0)) : array();	if (sizeof($back))	{		if ($action_option)		{			$action_option = '';		}		else if ($cond_option)		{			$cond_option = '';		}		else if ($rule_option)		{			$rule_option = 0;		}		else if ($check_option)		{			$check_option = 0;		}	}	if (isset($back['action']) && $cond_option == 'none')	{		$back['cond'] = true;	}	// Check	if (!isset($global_privmsgs_rules[$check_option]))	{		$check_option = 0;	}	define_check_option(($check_option && !isset($back['rule'])) ? true : false, $check_option, $check_lang);	if ($check_option && !isset($back['rule']))	{		define_rule_option(($rule_option && !isset($back['cond'])) ? true : false, $rule_option, $rule_lang, $global_privmsgs_rules[$check_option]);	}	if ($rule_option && !isset($back['cond']))	{		if (!isset($global_rule_conditions[$rule_option]))		{			$cond_option = 'none';			$template->assign_var('NONE_CONDITION', true);		}		else		{			define_cond_option(($cond_option && !isset($back['action'])) ? true : false, $cond_option, $rule_option, $global_rule_conditions);		}	}	if ($cond_option && !isset($back['action']))	{		define_action_option(false, $action_option, $action_lang, $folder);	}	show_defined_rules($user->data['user_id'], $check_lang, $rule_lang, $action_lang, $folder);}/*** Defining check option for message rules*/function define_check_option($hardcoded, $check_option, $check_lang){	global $template;	$s_check_options = '';	if (!$hardcoded)	{		foreach ($check_lang as $value => $lang)		{			$s_check_options .= '<option value="' . $value . '"' . (($value == $check_option) ? ' selected="selected"' : '') . '>' . $lang . '</option>';		}	}	$template->assign_vars(array(		'S_CHECK_DEFINED'	=> true,		'S_CHECK_SELECT'	=> ($hardcoded) ? false : true,		'CHECK_CURRENT'		=> isset($check_lang[$check_option]) ? $check_lang[$check_option] : '',		'S_CHECK_OPTIONS'	=> $s_check_options,		'CHECK_OPTION'		=> $check_option)	);}/*** Defining action option for message rules*/function define_action_option($hardcoded, $action_option, $action_lang, $folder){	global $db, $template, $user;	$l_action = $s_action_options = '';	if ($hardcoded)	{		$option = explode('|', $action_option);		$action = (int) $option[0];		$folder_id = (int) $option[1];		$l_action = $action_lang[$action];		if ($action == ACTION_PLACE_INTO_FOLDER)		{			$l_action .= ' -> ' . $folder[$folder_id]['folder_name'];		}	}	else	{		foreach ($action_lang as $action => $lang)		{			if ($action == ACTION_PLACE_INTO_FOLDER)			{				foreach ($folder as $folder_id => $folder_ary)				{					$s_action_options .= '<option value="' . $action . '|' . $folder_id . '"' . (($action_option == $action . '|' . $folder_id) ? ' selected="selected"' : '') . '>' . $lang . ' -> ' . $folder_ary['folder_name'] . '</option>';				}			}			else			{				$s_action_options .= '<option value="' . $action . '|0"' . (($action_option == $action . '|0') ? ' selected="selected"' : '') . '>' . $lang . '</option>';			}		}	}	$template->assign_vars(array(		'S_ACTION_DEFINED'	=> true,		'S_ACTION_SELECT'	=> ($hardcoded) ? false : true,		'ACTION_CURRENT'	=> $l_action,		'S_ACTION_OPTIONS'	=> $s_action_options,		'ACTION_OPTION'		=> $action_option)	);}/*** Defining rule option for message rules*/function define_rule_option($hardcoded, $rule_option, $rule_lang, $check_ary){	global $template;	global $module;	$exclude = array();	if (!$module->loaded('zebra', 'friends'))	{		$exclude[RULE_IS_FRIEND] = true;	}	if (!$module->loaded('zebra', 'foes'))	{		$exclude[RULE_IS_FOE] = true;	}	$s_rule_options = '';	if (!$hardcoded)	{		foreach ($check_ary as $value => $_check)		{			if (isset($exclude[$value]))			{				continue;			}			$s_rule_options .= '<option value="' . $value . '"' . (($value == $rule_option) ? ' selected="selected"' : '') . '>' . $rule_lang[$value] . '</option>';		}	}	$template->assign_vars(array(		'S_RULE_DEFINED'	=> true,		'S_RULE_SELECT'		=> !$hardcoded,		'RULE_CURRENT'		=> isset($rule_lang[$rule_option]) ? $rule_lang[$rule_option] : '',		'S_RULE_OPTIONS'	=> $s_rule_options,		'RULE_OPTION'		=> $rule_option)	);}/*** Defining condition option for message rules*/function define_cond_option($hardcoded, $cond_option, $rule_option, $global_rule_conditions){	global $db, $template, $auth, $user;		$template->assign_vars(array(		'S_COND_DEFINED'	=> true,		'S_COND_SELECT'		=> (!$hardcoded && isset($global_rule_conditions[$rule_option])) ? true : false)	);	// Define COND_OPTION	if (!isset($global_rule_conditions[$rule_option]))	{		$template->assign_vars(array(			'COND_OPTION'	=> 'none',			'COND_CURRENT'	=> false)		);		return;	}	// Define Condition	$condition = $global_rule_conditions[$rule_option];	$current_value = '';	switch ($condition)	{		case 'text':			$rule_string = utf8_normalize_nfc(request_var('rule_string', '', true));						$template->assign_vars(array(				'S_TEXT_CONDITION'	=> true,				'CURRENT_STRING'	=> $rule_string,				'CURRENT_USER_ID'	=> 0,				'CURRENT_GROUP_ID'	=> 0)			);			$current_value = $rule_string;		break;		case 'user':			$rule_user_id = request_var('rule_user_id', 0);			$rule_string = utf8_normalize_nfc(request_var('rule_string', '', true));						if ($rule_string && !$rule_user_id)			{				$sql = 'SELECT user_id					FROM ' . USERS_TABLE . "					WHERE username_clean = '" . $db->sql_escape(utf8_clean_string($rule_string)) . "'";				$result = $db->sql_query($sql);				$rule_user_id = (int) $db->sql_fetchfield('user_id');				$db->sql_freeresult($result);				if (!$rule_user_id)				{					$rule_string = '';				}			}			else if (!$rule_string && $rule_user_id)			{				$sql = 'SELECT username					FROM ' . USERS_TABLE . "					WHERE user_id = $rule_user_id";				$result = $db->sql_query($sql);				$rule_string = $db->sql_fetchfield('username');				$db->sql_freeresult($result);				if (!$rule_string)				{					$rule_user_id = 0;				}			}			$template->assign_vars(array(				'S_USER_CONDITION'	=> true,				'CURRENT_STRING'	=> $rule_string,				'CURRENT_USER_ID'	=> $rule_user_id,				'CURRENT_GROUP_ID'	=> 0)			);			$current_value = $rule_string;		break;		case 'group':			$rule_group_id = request_var('rule_group_id', 0);			$rule_string = utf8_normalize_nfc(request_var('rule_string', '', true));			$sql = 'SELECT g.group_id, g.group_name, g.group_type					FROM ' . GROUPS_TABLE . ' g ';			if (!$auth->acl_gets('a_group', 'a_groupadd', 'a_groupdel'))			{				$sql .= 'LEFT JOIN ' . USER_GROUP_TABLE . ' ug					ON (						g.group_id = ug.group_id						AND ug.user_id = ' . $user->data['user_id'] . '						AND ug.user_pending = 0					)					WHERE (ug.user_id = ' . $user->data['user_id'] . ' OR g.group_type <> ' . GROUP_HIDDEN . ')					AND';			}			else			{				$sql .= 'WHERE';			}						$sql .= " (g.group_name NOT IN ('GUESTS', 'BOTS') OR g.group_type <> " . GROUP_SPECIAL . ')					ORDER BY g.group_type DESC, g.group_name ASC';						$result = $db->sql_query($sql);			$s_group_options = '';			while ($row = $db->sql_fetchrow($result))			{				if ($rule_group_id && ($row['group_id'] == $rule_group_id))				{					$rule_string = (($row['group_type'] == GROUP_SPECIAL) ? $user->lang['G_' . $row['group_name']] : $row['group_name']);				}				$s_class	= ($row['group_type'] == GROUP_SPECIAL) ? ' class="sep"' : '';				$s_selected	= ($row['group_id'] == $rule_group_id) ? ' selected="selected"' : '';								$s_group_options .= '<option value="' . $row['group_id'] . '"' . $s_class . $s_selected . '>' . (($row['group_type'] == GROUP_SPECIAL) ? $user->lang['G_' . $row['group_name']] : $row['group_name']) . '</option>';			}			$db->sql_freeresult($result);			$template->assign_vars(array(				'S_GROUP_CONDITION'	=> true,				'S_GROUP_OPTIONS'	=> $s_group_options,				'CURRENT_STRING'	=> $rule_string,				'CURRENT_USER_ID'	=> 0,				'CURRENT_GROUP_ID'	=> $rule_group_id)			);			$current_value = $rule_string;		break;		default:			return;	}	$template->assign_vars(array(		'COND_OPTION'	=> $condition,		'COND_CURRENT'	=> $current_value)	);}/*** Display defined message rules*/function show_defined_rules($user_id, $check_lang, $rule_lang, $action_lang, $folder){	global $db, $template;	$sql = 'SELECT *		FROM ' . PRIVMSGS_RULES_TABLE . '		WHERE user_id = ' . $user_id . '		ORDER BY rule_id ASC';	$result = $db->sql_query($sql);		$count = 0;	while ($row = $db->sql_fetchrow($result))	{		$template->assign_block_vars('rule', array(			'COUNT'		=> ++$count,			'RULE_ID'	=> $row['rule_id'],			'CHECK'		=> $check_lang[$row['rule_check']],			'RULE'		=> $rule_lang[$row['rule_connection']],			'STRING'	=> $row['rule_string'],			'ACTION'	=> $action_lang[$row['rule_action']],			'FOLDER'	=> ($row['rule_action'] == ACTION_PLACE_INTO_FOLDER) ? $folder[$row['rule_folder_id']]['folder_name'] : '')		);	}	$db->sql_freeresult($result);}?>
<?php/**** @package acp* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//***/define('IN_PHPBB', true);define('ADMIN_START', true);define('NEED_SID', true);// Include files$phpbb_root_path = (defined('PHPBB_ROOT_PATH')) ? PHPBB_ROOT_PATH : './../';$phpEx = substr(strrchr(__FILE__, '.'), 1);require($phpbb_root_path . 'common.' . $phpEx);require($phpbb_root_path . 'includes/functions_admin.' . $phpEx);require($phpbb_root_path . 'includes/functions_module.' . $phpEx);// Start session management$user->session_begin();$auth->acl($user->data);$user->setup('acp/common');// End session management// Have they authenticated (again) as an admin for this session?if (!isset($user->data['session_admin']) || !$user->data['session_admin']){	login_box('', $user->lang['LOGIN_ADMIN_CONFIRM'], $user->lang['LOGIN_ADMIN_SUCCESS'], true, false);}// Is user any type of admin? No, then stop here, each script needs to// check specific permissions but this is a catchallif (!$auth->acl_get('a_')){	trigger_error('NO_ADMIN');}// We define the admin variables now, because the user is now able to use the admin related features...define('IN_ADMIN', true);$phpbb_admin_path = (defined('PHPBB_ADMIN_PATH')) ? PHPBB_ADMIN_PATH : './';// Some oft used variables$safe_mode		= (@ini_get('safe_mode') == '1' || strtolower(@ini_get('safe_mode')) === 'on') ? true : false;$file_uploads	= (@ini_get('file_uploads') == '1' || strtolower(@ini_get('file_uploads')) === 'on') ? true : false;$module_id		= request_var('i', '');$mode			= request_var('mode', '');// Set custom template for admin area$template->set_custom_template($phpbb_admin_path . 'style', 'admin');$template->assign_var('T_TEMPLATE_PATH', $phpbb_admin_path . 'style');// the acp template is never stored in the database$user->theme['template_storedb'] = false;// Instantiate new module$module = new p_master();// Instantiate module system and generate list of available modules$module->list_modules('acp');// Select the active module$module->set_active($module_id, $mode);// Assign data to the template engine for the list of modules// We do this before loading the active module for correct menu display in trigger_error$module->assign_tpl_vars(append_sid("{$phpbb_admin_path}index.$phpEx"));// Load and execute the relevant module$module->load_active();// Generate the pageadm_page_header($module->get_page_title());$template->set_filenames(array(	'body' => $module->get_tpl_name(),));adm_page_footer();/*** Header for acp pages*/function adm_page_header($page_title){	global $config, $db, $user, $template;	global $phpbb_root_path, $phpbb_admin_path, $phpEx, $SID, $_SID;	if (defined('HEADER_INC'))	{		return;	}	define('HEADER_INC', true);	// gzip_compression	if ($config['gzip_compress'])	{		if (@extension_loaded('zlib') && !headers_sent())		{			ob_start('ob_gzhandler');		}	}	$template->assign_vars(array(		'PAGE_TITLE'			=> $page_title,		'USERNAME'				=> $user->data['username'],		'SID'					=> $SID,		'_SID'					=> $_SID,		'SESSION_ID'			=> $user->session_id,		'ROOT_PATH'				=> $phpbb_admin_path,		'U_LOGOUT'				=> append_sid("{$phpbb_root_path}ucp.$phpEx", 'mode=logout'),		'U_ADM_LOGOUT'			=> append_sid("{$phpbb_admin_path}index.$phpEx", 'action=admlogout'),		'U_ADM_INDEX'			=> append_sid("{$phpbb_admin_path}index.$phpEx"),		'U_INDEX'				=> append_sid("{$phpbb_root_path}index.$phpEx"),		'T_IMAGES_PATH'			=> "{$phpbb_root_path}images/",		'T_SMILIES_PATH'		=> "{$phpbb_root_path}{$config['smilies_path']}/",		'T_AVATAR_PATH'			=> "{$phpbb_root_path}{$config['avatar_path']}/",		'T_AVATAR_GALLERY_PATH'	=> "{$phpbb_root_path}{$config['avatar_gallery_path']}/",		'T_ICONS_PATH'			=> "{$phpbb_root_path}{$config['icons_path']}/",		'T_RANKS_PATH'			=> "{$phpbb_root_path}{$config['ranks_path']}/",		'T_UPLOAD_PATH'			=> "{$phpbb_root_path}{$config['upload_path']}/",		'ICON_MOVE_UP'				=> '<img src="' . $phpbb_admin_path . 'images/icon_up.gif" alt="' . $user->lang['MOVE_UP'] . '" title="' . $user->lang['MOVE_UP'] . '" />',		'ICON_MOVE_UP_DISABLED'		=> '<img src="' . $phpbb_admin_path . 'images/icon_up_disabled.gif" alt="' . $user->lang['MOVE_UP'] . '" title="' . $user->lang['MOVE_UP'] . '" />',		'ICON_MOVE_DOWN'			=> '<img src="' . $phpbb_admin_path . 'images/icon_down.gif" alt="' . $user->lang['MOVE_DOWN'] . '" title="' . $user->lang['MOVE_DOWN'] . '" />',		'ICON_MOVE_DOWN_DISABLED'	=> '<img src="' . $phpbb_admin_path . 'images/icon_down_disabled.gif" alt="' . $user->lang['MOVE_DOWN'] . '" title="' . $user->lang['MOVE_DOWN'] . '" />',		'ICON_EDIT'					=> '<img src="' . $phpbb_admin_path . 'images/icon_edit.gif" alt="' . $user->lang['EDIT'] . '" title="' . $user->lang['EDIT'] . '" />',		'ICON_EDIT_DISABLED'		=> '<img src="' . $phpbb_admin_path . 'images/icon_edit_disabled.gif" alt="' . $user->lang['EDIT'] . '" title="' . $user->lang['EDIT'] . '" />',		'ICON_DELETE'				=> '<img src="' . $phpbb_admin_path . 'images/icon_delete.gif" alt="' . $user->lang['DELETE'] . '" title="' . $user->lang['DELETE'] . '" />',		'ICON_DELETE_DISABLED'		=> '<img src="' . $phpbb_admin_path . 'images/icon_delete_disabled.gif" alt="' . $user->lang['DELETE'] . '" title="' . $user->lang['DELETE'] . '" />',		'ICON_SYNC'					=> '<img src="' . $phpbb_admin_path . 'images/icon_sync.gif" alt="' . $user->lang['RESYNC'] . '" title="' . $user->lang['RESYNC'] . '" />',		'ICON_SYNC_DISABLED'		=> '<img src="' . $phpbb_admin_path . 'images/icon_sync_disabled.gif" alt="' . $user->lang['RESYNC'] . '" title="' . $user->lang['RESYNC'] . '" />',		'S_USER_LANG'			=> $user->lang['USER_LANG'],		'S_CONTENT_DIRECTION'	=> $user->lang['DIRECTION'],		'S_CONTENT_ENCODING'	=> 'UTF-8',		'S_CONTENT_FLOW_BEGIN'	=> ($user->lang['DIRECTION'] == 'ltr') ? 'left' : 'right',		'S_CONTENT_FLOW_END'	=> ($user->lang['DIRECTION'] == 'ltr') ? 'right' : 'left',	));	// application/xhtml+xml not used because of IE	header('Content-type: text/html; charset=UTF-8');	header('Cache-Control: private, no-cache="set-cookie"');	header('Expires: 0');	header('Pragma: no-cache');	return;}/*** Page footer for acp pages*/function adm_page_footer($copyright_html = true){	global $db, $config, $template, $user, $auth, $cache;	global $starttime, $phpbb_root_path, $phpbb_admin_path, $phpEx;	// Output page creation time	if (defined('DEBUG'))	{		$mtime = explode(' ', microtime());		$totaltime = $mtime[0] + $mtime[1] - $starttime;		if (!empty($_REQUEST['explain']) && $auth->acl_get('a_') && defined('DEBUG_EXTRA') && method_exists($db, 'sql_report'))		{			$db->sql_report('display');		}		$debug_output = sprintf('Time : %.3fs | ' . $db->sql_num_queries() . ' Queries | GZIP : ' . (($config['gzip_compress']) ? 'On' : 'Off') . (($user->load) ? ' | Load : ' . $user->load : ''), $totaltime);		if ($auth->acl_get('a_') && defined('DEBUG_EXTRA'))		{			if (function_exists('memory_get_usage'))			{				if ($memory_usage = memory_get_usage())				{					global $base_memory_usage;					$memory_usage -= $base_memory_usage;					$memory_usage = get_formatted_filesize($memory_usage);					$debug_output .= ' | Memory Usage: ' . $memory_usage;				}			}			$debug_output .= ' | <a href="' . build_url() . '&amp;explain=1">Explain</a>';		}	}	$template->assign_vars(array(		'DEBUG_OUTPUT'		=> (defined('DEBUG')) ? $debug_output : '',		'TRANSLATION_INFO'	=> (!empty($user->lang['TRANSLATION_INFO'])) ? $user->lang['TRANSLATION_INFO'] : '',		'S_COPYRIGHT_HTML'	=> $copyright_html,		'VERSION'			=> $config['version'])	);	$template->display('body');	garbage_collection();	exit_handler();}/*** Generate back link for acp pages*/function adm_back_link($u_action){	global $user;	return '<br /><br /><a href="' . $u_action . '">&laquo; ' . $user->lang['BACK_TO_PREV'] . '</a>';}/*** Build select field options in acp pages*/function build_select($option_ary, $option_default = false){	global $user;	$html = '';	foreach ($option_ary as $value => $title)	{		$selected = ($option_default !== false && $value == $option_default) ? ' selected="selected"' : '';		$html .= '<option value="' . $value . '"' . $selected . '>' . $user->lang[$title] . '</option>';	}	return $html;}/*** Build radio fields in acp pages*/function h_radio($name, $input_ary, $input_default = false, $id = false, $key = false, $separator = ''){	global $user;	$html = '';	$id_assigned = false;	foreach ($input_ary as $value => $title)	{		$selected = ($input_default !== false && $value == $input_default) ? ' checked="checked"' : '';		$html .= '<label><input type="radio" name="' . $name . '"' . (($id && !$id_assigned) ? ' id="' . $id . '"' : '') . ' value="' . $value . '"' . $selected . (($key) ? ' accesskey="' . $key . '"' : '') . ' class="radio" /> ' . $user->lang[$title] . '</label>' . $separator;		$id_assigned = true;	}	return $html;}/*** Build configuration template for acp configuration pages*/function build_cfg_template($tpl_type, $key, &$new, $config_key, $vars){	global $user, $module;	$tpl = '';	$name = 'config[' . $config_key . ']';	// Make sure there is no notice printed out for non-existent config options (we simply set them)	if (!isset($new[$config_key]))	{		$new[$config_key] = '';	}	switch ($tpl_type[0])	{		case 'text':		case 'password':			$size = (int) $tpl_type[1];			$maxlength = (int) $tpl_type[2];			$tpl = '<input id="' . $key . '" type="' . $tpl_type[0] . '"' . (($size) ? ' size="' . $size . '"' : '') . ' maxlength="' . (($maxlength) ? $maxlength : 255) . '" name="' . $name . '" value="' . $new[$config_key] . '"' . (($tpl_type[0] === 'password') ?  ' autocomplete="off"' : '') . ' />';		break;		case 'dimension':			$size = (int) $tpl_type[1];			$maxlength = (int) $tpl_type[2];			$tpl = '<input id="' . $key . '" type="text"' . (($size) ? ' size="' . $size . '"' : '') . ' maxlength="' . (($maxlength) ? $maxlength : 255) . '" name="config[' . $config_key . '_width]" value="' . $new[$config_key . '_width'] . '" /> x <input type="text"' . (($size) ? ' size="' . $size . '"' : '') . ' maxlength="' . (($maxlength) ? $maxlength : 255) . '" name="config[' . $config_key . '_height]" value="' . $new[$config_key . '_height'] . '" />';		break;		case 'textarea':			$rows = (int) $tpl_type[1];			$cols = (int) $tpl_type[2];			$tpl = '<textarea id="' . $key . '" name="' . $name . '" rows="' . $rows . '" cols="' . $cols . '">' . $new[$config_key] . '</textarea>';		break;		case 'radio':			$key_yes	= ($new[$config_key]) ? ' checked="checked"' : '';			$key_no		= (!$new[$config_key]) ? ' checked="checked"' : '';			$tpl_type_cond = explode('_', $tpl_type[1]);			$type_no = ($tpl_type_cond[0] == 'disabled' || $tpl_type_cond[0] == 'enabled') ? false : true;			$tpl_no = '<label><input type="radio" name="' . $name . '" value="0"' . $key_no . ' class="radio" /> ' . (($type_no) ? $user->lang['NO'] : $user->lang['DISABLED']) . '</label>';			$tpl_yes = '<label><input type="radio" id="' . $key . '" name="' . $name . '" value="1"' . $key_yes . ' class="radio" /> ' . (($type_no) ? $user->lang['YES'] : $user->lang['ENABLED']) . '</label>';			$tpl = ($tpl_type_cond[0] == 'yes' || $tpl_type_cond[0] == 'enabled') ? $tpl_yes . $tpl_no : $tpl_no . $tpl_yes;		break;		case 'select':		case 'custom':			$return = '';			if (isset($vars['method']))			{				$call = array($module->module, $vars['method']);			}			else if (isset($vars['function']))			{				$call = $vars['function'];			}			else			{				break;			}			if (isset($vars['params']))			{				$args = array();				foreach ($vars['params'] as $value)				{					switch ($value)					{						case '{CONFIG_VALUE}':							$value = $new[$config_key];						break;						case '{KEY}':							$value = $key;						break;					}					$args[] = $value;				}			}			else			{				$args = array($new[$config_key], $key);			}			$return = call_user_func_array($call, $args);			if ($tpl_type[0] == 'select')			{				$tpl = '<select id="' . $key . '" name="' . $name . '">' . $return . '</select>';			}			else			{				$tpl = $return;			}		break;		default:		break;	}	if (isset($vars['append']))	{		$tpl .= $vars['append'];	}	return $tpl;}/*** Going through a config array and validate values, writing errors to $error. The validation method  accepts parameters separated by ':' for string and int.* The first parameter defines the type to be used, the second the lower bound and the third the upper bound. Only the type is required.*/function validate_config_vars($config_vars, &$cfg_array, &$error){	global $phpbb_root_path, $user;	$type	= 0;	$min	= 1;	$max	= 2;	foreach ($config_vars as $config_name => $config_definition)	{		if (!isset($cfg_array[$config_name]) || strpos($config_name, 'legend') !== false)		{			continue;		}		if (!isset($config_definition['validate']))		{			continue;		}		$validator = explode(':', $config_definition['validate']);		// Validate a bit. ;) (0 = type, 1 = min, 2= max)		switch ($validator[$type])		{			case 'string':				$length = utf8_strlen($cfg_array[$config_name]);				// the column is a VARCHAR				$validator[$max] = (isset($validator[$max])) ? min(255, $validator[$max]) : 255;				if (isset($validator[$min]) && $length < $validator[$min])				{					$error[] = sprintf($user->lang['SETTING_TOO_SHORT'], $user->lang[$config_definition['lang']], $validator[$min]);				}				else if (isset($validator[$max]) && $length > $validator[2])				{					$error[] = sprintf($user->lang['SETTING_TOO_LONG'], $user->lang[$config_definition['lang']], $validator[$max]);				}			break;			case 'bool':				$cfg_array[$config_name] = ($cfg_array[$config_name]) ? 1 : 0;			break;			case 'int':				$cfg_array[$config_name] = (int) $cfg_array[$config_name];				if (isset($validator[$min]) && $cfg_array[$config_name] < $validator[$min])				{					$error[] = sprintf($user->lang['SETTING_TOO_LOW'], $user->lang[$config_definition['lang']], $validator[$min]);				}				else if (isset($validator[$max]) && $cfg_array[$config_name] > $validator[$max])				{					$error[] = sprintf($user->lang['SETTING_TOO_BIG'], $user->lang[$config_definition['lang']], $validator[$max]);				}				if (strpos($config_name, '_max') !== false)				{					// Min/max pairs of settings should ensure that min <= max					// Replace _max with _min to find the name of the minimum					// corresponding configuration variable					$min_name = str_replace('_max', '_min', $config_name);					if (isset($cfg_array[$min_name]) && is_numeric($cfg_array[$min_name]) && $cfg_array[$config_name] < $cfg_array[$min_name])					{						// A minimum value exists and the maximum value is less than it						$error[] = sprintf($user->lang['SETTING_TOO_LOW'], $user->lang[$config_definition['lang']], (int) $cfg_array[$min_name]);					}				}			break;			// Absolute path			case 'script_path':				if (!$cfg_array[$config_name])				{					break;				}				$destination = str_replace('\\', '/', $cfg_array[$config_name]);				if ($destination !== '/')				{					// Adjust destination path (no trailing slash)					if (substr($destination, -1, 1) == '/')					{						$destination = substr($destination, 0, -1);					}					$destination = str_replace(array('../', './'), '', $destination);					if ($destination[0] != '/')					{						$destination = '/' . $destination;					}				}				$cfg_array[$config_name] = trim($destination);			break;			// Absolute path			case 'lang':				if (!$cfg_array[$config_name])				{					break;				}				$cfg_array[$config_name] = basename($cfg_array[$config_name]);				if (!file_exists($phpbb_root_path . 'language/' . $cfg_array[$config_name] . '/'))				{					$error[] = $user->lang['WRONG_DATA_LANG'];				}			break;			// Relative path (appended $phpbb_root_path)			case 'rpath':			case 'rwpath':				if (!$cfg_array[$config_name])				{					break;				}				$destination = $cfg_array[$config_name];				// Adjust destination path (no trailing slash)				if (substr($destination, -1, 1) == '/' || substr($destination, -1, 1) == '\\')				{					$destination = substr($destination, 0, -1);				}				$destination = str_replace(array('../', '..\\', './', '.\\'), '', $destination);				if ($destination && ($destination[0] == '/' || $destination[0] == "\\"))				{					$destination = '';				}				$cfg_array[$config_name] = trim($destination);			// Path being relative (still prefixed by phpbb_root_path), but with the ability to escape the root dir...			case 'path':			case 'wpath':				if (!$cfg_array[$config_name])				{					break;				}				$cfg_array[$config_name] = trim($cfg_array[$config_name]);				// Make sure no NUL byte is present...				if (strpos($cfg_array[$config_name], "\0") !== false || strpos($cfg_array[$config_name], '%00') !== false)				{					$cfg_array[$config_name] = '';					break;				}				if (!file_exists($phpbb_root_path . $cfg_array[$config_name]))				{					$error[] = sprintf($user->lang['DIRECTORY_DOES_NOT_EXIST'], $cfg_array[$config_name]);				}				if (file_exists($phpbb_root_path . $cfg_array[$config_name]) && !is_dir($phpbb_root_path . $cfg_array[$config_name]))				{					$error[] = sprintf($user->lang['DIRECTORY_NOT_DIR'], $cfg_array[$config_name]);				}				// Check if the path is writable				if ($config_definition['validate'] == 'wpath' || $config_definition['validate'] == 'rwpath')				{					if (file_exists($phpbb_root_path . $cfg_array[$config_name]) && !phpbb_is_writable($phpbb_root_path . $cfg_array[$config_name]))					{						$error[] = sprintf($user->lang['DIRECTORY_NOT_WRITABLE'], $cfg_array[$config_name]);					}				}			break;		}	}	return;}/*** Checks whatever or not a variable is OK for use in the Database* param mixed $value_ary An array of the form array(array('lang' => ..., 'value' => ..., 'column_type' =>))'* param mixed $error The error array*/function validate_range($value_ary, &$error){	global $user;	$column_types = array(		'BOOL'	=> array('php_type' => 'int', 		'min' => 0, 				'max' => 1),		'USINT'	=> array('php_type' => 'int',		'min' => 0, 				'max' => 65535),		'UINT'	=> array('php_type' => 'int', 		'min' => 0, 				'max' => (int) 0x7fffffff),		// Do not use (int) 0x80000000 - it evaluates to different		// values on 32-bit and 64-bit systems.		// Apparently -2147483648 is a float on 32-bit systems,		// despite fitting in an int, thus explicit cast is needed.		'INT'	=> array('php_type' => 'int', 		'min' => (int) -2147483648,	'max' => (int) 0x7fffffff),		'TINT'	=> array('php_type' => 'int',		'min' => -128,				'max' => 127),		'VCHAR'	=> array('php_type' => 'string', 	'min' => 0, 				'max' => 255),	);	foreach ($value_ary as $value)	{		$column = explode(':', $value['column_type']);		$max = $min = 0;		$type = 0;		if (!isset($column_types[$column[0]]))		{			continue;		}		else		{			$type = $column_types[$column[0]];		}		switch ($type['php_type'])		{			case 'string' :				$max = (isset($column[1])) ? min($column[1],$type['max']) : $type['max'];				if (utf8_strlen($value['value']) > $max)				{					$error[] = sprintf($user->lang['SETTING_TOO_LONG'], $user->lang[$value['lang']], $max);				}			break;			case 'int':				$min = (isset($column[1])) ? max($column[1],$type['min']) : $type['min'];				$max = (isset($column[2])) ? min($column[2],$type['max']) : $type['max'];				if ($value['value'] < $min)				{					$error[] = sprintf($user->lang['SETTING_TOO_LOW'], $user->lang[$value['lang']], $min);				}				else if ($value['value'] > $max)				{					$error[] = sprintf($user->lang['SETTING_TOO_BIG'], $user->lang[$value['lang']], $max);				}			break;		}	}}?>
<?php/**** @package phpBB3* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @ignore*/if (!defined('IN_PHPBB')){	exit;}/*** Custom Profile Fields* @package phpBB3*/class custom_profile{	var $profile_types = array(FIELD_INT => 'int', FIELD_STRING => 'string', FIELD_TEXT => 'text', FIELD_BOOL => 'bool', FIELD_DROPDOWN => 'dropdown', FIELD_DATE => 'date');	var $profile_cache = array();	var $options_lang = array();	/**	* Assign editable fields to template, mode can be profile (for profile change) or register (for registration)	* Called by ucp_profile and ucp_register	* @access public	*/	function generate_profile_fields($mode, $lang_id)	{		global $db, $template, $auth;		$sql_where = '';		switch ($mode)		{			case 'register':				// If the field is required we show it on the registration page				$sql_where .= ' AND f.field_show_on_reg = 1';			break;			case 'profile':				// Show hidden fields to moderators/admins				if (!$auth->acl_gets('a_', 'm_') && !$auth->acl_getf_global('m_'))				{					$sql_where .= ' AND f.field_show_profile = 1';				}			break;			default:				trigger_error('Wrong profile mode specified', E_USER_ERROR);			break;		}		$sql = 'SELECT l.*, f.*			FROM ' . PROFILE_LANG_TABLE . ' l, ' . PROFILE_FIELDS_TABLE . " f			WHERE f.field_active = 1				$sql_where				AND l.lang_id = $lang_id				AND l.field_id = f.field_id			ORDER BY f.field_order";		$result = $db->sql_query($sql);		while ($row = $db->sql_fetchrow($result))		{			// Return templated field			$tpl_snippet = $this->process_field_row('change', $row);			// Some types are multivalue, we can't give them a field_id as we would not know which to pick			$type = (int) $row['field_type'];			$template->assign_block_vars('profile_fields', array(				'LANG_NAME'		=> $row['lang_name'],				'LANG_EXPLAIN'	=> $row['lang_explain'],				'FIELD'			=> $tpl_snippet,				'FIELD_ID'		=> ($type == FIELD_DATE || ($type == FIELD_BOOL && $row['field_length'] == '1')) ? '' : 'pf_' . $row['field_ident'],				'S_REQUIRED'	=> ($row['field_required']) ? true : false)			);		}		$db->sql_freeresult($result);	}	/**	* Validate entered profile field data	* @access public	*/	function validate_profile_field($field_type, &$field_value, $field_data)	{		switch ($field_type)		{			case FIELD_DATE:				$field_validate = explode('-', $field_value);				$day = (isset($field_validate[0])) ? (int) $field_validate[0] : 0;				$month = (isset($field_validate[1])) ? (int) $field_validate[1] : 0;				$year = (isset($field_validate[2])) ? (int) $field_validate[2] : 0;				if ((!$day || !$month || !$year) && !$field_data['field_required'])				{					return false;				}				if ((!$day || !$month || !$year) && $field_data['field_required'])				{					return 'FIELD_REQUIRED';				}				if ($day < 0 || $day > 31 || $month < 0 || $month > 12 || ($year < 1901 && $year > 0) || $year > gmdate('Y', time()) + 50)				{					return 'FIELD_INVALID_DATE';				}				if (checkdate($month, $day, $year) === false)				{					return 'FIELD_INVALID_DATE';				}			break;			case FIELD_BOOL:				$field_value = (bool) $field_value;							if (!$field_value && $field_data['field_required'])				{					return 'FIELD_REQUIRED';				}			break;			case FIELD_INT:				if (trim($field_value) === '' && !$field_data['field_required'])				{					return false;				}								$field_value = (int) $field_value;				if ($field_value < $field_data['field_minlen'])				{					return 'FIELD_TOO_SMALL';				}				else if ($field_value > $field_data['field_maxlen'])				{					return 'FIELD_TOO_LARGE';				}			break;			case FIELD_DROPDOWN:				$field_value = (int) $field_value;				// retrieve option lang data if necessary				if (!isset($this->options_lang[$field_data['field_id']]) || !isset($this->options_lang[$field_data['field_id']][$field_data['lang_id']]) || !sizeof($this->options_lang[$file_data['field_id']][$field_data['lang_id']]))				{					$this->get_option_lang($field_data['field_id'], $field_data['lang_id'], FIELD_DROPDOWN, false);				}				if (!isset($this->options_lang[$field_data['field_id']][$field_data['lang_id']][$field_value]))				{					return 'FIELD_INVALID_VALUE';				}				if ($field_value == $field_data['field_novalue'] && $field_data['field_required'])				{					return 'FIELD_REQUIRED';				}			break;			case FIELD_STRING:			case FIELD_TEXT:				if (trim($field_value) === '' && !$field_data['field_required'])				{					return false;				}				else if (trim($field_value) === '' && $field_data['field_required'])				{					return 'FIELD_REQUIRED';				}				if ($field_data['field_minlen'] && utf8_strlen($field_value) < $field_data['field_minlen'])				{					return 'FIELD_TOO_SHORT';				}				else if ($field_data['field_maxlen'] && utf8_strlen($field_value) > $field_data['field_maxlen'])				{					return 'FIELD_TOO_LONG';				}				if (!empty($field_data['field_validation']) && $field_data['field_validation'] != '.*')				{					$field_validate = ($field_type == FIELD_STRING) ? $field_value : bbcode_nl2br($field_value);					if (!preg_match('#^' . str_replace('\\\\', '\\', $field_data['field_validation']) . '$#i', $field_validate))					{						return 'FIELD_INVALID_CHARS';					}				}			break;		}		return false;	}	/**	* Build profile cache, used for display	* @access private	*/	function build_cache()	{		global $db, $user, $auth;		$this->profile_cache = array();		// Display hidden/no_view fields for admin/moderator		$sql = 'SELECT l.*, f.*			FROM ' . PROFILE_LANG_TABLE . ' l, ' . PROFILE_FIELDS_TABLE . ' f			WHERE l.lang_id = ' . $user->get_iso_lang_id() . '				AND f.field_active = 1 ' .				((!$auth->acl_gets('a_', 'm_') && !$auth->acl_getf_global('m_')) ? '	AND f.field_hide = 0 ' : '') . '				AND f.field_no_view = 0				AND l.field_id = f.field_id			ORDER BY f.field_order';		$result = $db->sql_query($sql);		while ($row = $db->sql_fetchrow($result))		{			$this->profile_cache[$row['field_ident']] = $row;		}		$db->sql_freeresult($result);	}	/**	* Get language entries for options and store them here for later use	*/	function get_option_lang($field_id, $lang_id, $field_type, $preview)	{		global $db;		if ($preview)		{			$lang_options = (!is_array($this->vars['lang_options'])) ? explode("\n", $this->vars['lang_options']) : $this->vars['lang_options'];			foreach ($lang_options as $num => $var)			{				$this->options_lang[$field_id][$lang_id][($num + 1)] = $var;			}		}		else		{			$sql = 'SELECT option_id, lang_value				FROM ' . PROFILE_FIELDS_LANG_TABLE . "					WHERE field_id = $field_id					AND lang_id = $lang_id					AND field_type = $field_type				ORDER BY option_id";			$result = $db->sql_query($sql);			while ($row = $db->sql_fetchrow($result))			{				$this->options_lang[$field_id][$lang_id][($row['option_id'] + 1)] = $row['lang_value'];			}			$db->sql_freeresult($result);		}	}	/**	* Submit profile field for validation	* @access public	*/	function submit_cp_field($mode, $lang_id, &$cp_data, &$cp_error)	{		global $auth, $db, $user;		$sql_where = '';		switch ($mode)		{			case 'register':				// If the field is required we show it on the registration page				$sql_where .= ' AND f.field_show_on_reg = 1';			break;			case 'profile':				// Show hidden fields to moderators/admins				if (!$auth->acl_gets('a_', 'm_') && !$auth->acl_getf_global('m_'))				{					$sql_where .= ' AND f.field_show_profile = 1';				}			break;			default:				trigger_error('Wrong profile mode specified', E_USER_ERROR);			break;		}		$sql = 'SELECT l.*, f.*			FROM ' . PROFILE_LANG_TABLE . ' l, ' . PROFILE_FIELDS_TABLE . " f			WHERE l.lang_id = $lang_id				AND f.field_active = 1				$sql_where				AND l.field_id = f.field_id			ORDER BY f.field_order";		$result = $db->sql_query($sql);		while ($row = $db->sql_fetchrow($result))		{			$cp_data['pf_' . $row['field_ident']] = $this->get_profile_field($row);			$check_value = $cp_data['pf_' . $row['field_ident']];			if (($cp_result = $this->validate_profile_field($row['field_type'], $check_value, $row)) !== false)			{				// If not and only showing common error messages, use this one				$error = '';				switch ($cp_result)				{					case 'FIELD_INVALID_DATE':					case 'FIELD_INVALID_VALUE':					case 'FIELD_REQUIRED':						$error = sprintf($user->lang[$cp_result], $row['lang_name']);					break;					case 'FIELD_TOO_SHORT':					case 'FIELD_TOO_SMALL':						$error = sprintf($user->lang[$cp_result], $row['lang_name'], $row['field_minlen']);					break;					case 'FIELD_TOO_LONG':					case 'FIELD_TOO_LARGE':						$error = sprintf($user->lang[$cp_result], $row['lang_name'], $row['field_maxlen']);					break;					case 'FIELD_INVALID_CHARS':						switch ($row['field_validation'])						{							case '[0-9]+':								$error = sprintf($user->lang[$cp_result . '_NUMBERS_ONLY'], $row['lang_name']);							break;							case '[\w]+':								$error = sprintf($user->lang[$cp_result . '_ALPHA_ONLY'], $row['lang_name']);							break;							case '[\w_\+\. \-\[\]]+':								$error = sprintf($user->lang[$cp_result . '_SPACERS_ONLY'], $row['lang_name']);							break;						}					break;				}				if ($error != '')				{					$cp_error[] = $error;				}			}		}		$db->sql_freeresult($result);	}	/**	* Update profile field data directly	*/	function update_profile_field_data($user_id, &$cp_data)	{		global $db;		if (!sizeof($cp_data))		{			return;		}		switch ($db->sql_layer)		{			case 'oracle':			case 'firebird':			case 'postgres':				$right_delim = $left_delim = '"';			break;			case 'sqlite':			case 'mssql':			case 'mssql_odbc':			case 'mssqlnative':				$right_delim = ']';				$left_delim = '[';			break;			case 'mysql':			case 'mysql4':			case 'mysqli':				$right_delim = $left_delim = '`';			break;		}		// use new array for the UPDATE; changes in the key do not affect the original array		$cp_data_sql = array();		foreach ($cp_data as $key => $value)		{			// Firebird is case sensitive with delimiter			$cp_data_sql[$left_delim . (($db->sql_layer == 'firebird' || $db->sql_layer == 'oracle') ? strtoupper($key) : $key) . $right_delim] = $value;		}		$sql = 'UPDATE ' . PROFILE_FIELDS_DATA_TABLE . '			SET ' . $db->sql_build_array('UPDATE', $cp_data_sql) . "			WHERE user_id = $user_id";		$db->sql_query($sql);		if (!$db->sql_affectedrows())		{			$cp_data_sql['user_id'] = (int) $user_id;			$db->sql_return_on_error(true);			$sql = 'INSERT INTO ' . PROFILE_FIELDS_DATA_TABLE . ' ' . $db->sql_build_array('INSERT', $cp_data_sql);			$db->sql_query($sql);			$db->sql_return_on_error(false);		}	}	/**	* Assign fields to template, used for viewprofile, viewtopic and memberlist (if load setting is enabled)	* This is directly connected to the user -> mode == grab is to grab the user specific fields, mode == show is for assigning the row to the template	* @access public	*/	function generate_profile_fields_template($mode, $user_id = 0, $profile_row = false)	{		global $db;		if ($mode == 'grab')		{			if (!is_array($user_id))			{				$user_id = array($user_id);			}			if (!sizeof($this->profile_cache))			{				$this->build_cache();			}			if (!sizeof($user_id))			{				return array();			}			$sql = 'SELECT *				FROM ' . PROFILE_FIELDS_DATA_TABLE . '				WHERE ' . $db->sql_in_set('user_id', array_map('intval', $user_id));			$result = $db->sql_query($sql);			$field_data = array();			while ($row = $db->sql_fetchrow($result))			{				$field_data[$row['user_id']] = $row;			}			$db->sql_freeresult($result);			$user_fields = array();			// Go through the fields in correct order			foreach (array_keys($this->profile_cache) as $used_ident)			{				foreach ($field_data as $user_id => $row)				{					$user_fields[$user_id][$used_ident]['value'] = $row['pf_' . $used_ident];					$user_fields[$user_id][$used_ident]['data'] = $this->profile_cache[$used_ident];				}			}			return $user_fields;		}		else if ($mode == 'show')		{			// $profile_row == $user_fields[$row['user_id']];			$tpl_fields = array();			$tpl_fields['row'] = $tpl_fields['blockrow'] = array();			foreach ($profile_row as $ident => $ident_ary)			{				$value = $this->get_profile_value($ident_ary);				if ($value === NULL)				{					continue;				}				$tpl_fields['row'] += array(					'PROFILE_' . strtoupper($ident) . '_VALUE'	=> $value,					'PROFILE_' . strtoupper($ident) . '_TYPE'	=> $ident_ary['data']['field_type'],					'PROFILE_' . strtoupper($ident) . '_NAME'	=> $ident_ary['data']['lang_name'],					'PROFILE_' . strtoupper($ident) . '_EXPLAIN'=> $ident_ary['data']['lang_explain'],					'S_PROFILE_' . strtoupper($ident)			=> true				);				$tpl_fields['blockrow'][] = array(					'PROFILE_FIELD_VALUE'	=> $value,					'PROFILE_FIELD_TYPE'	=> $ident_ary['data']['field_type'],					'PROFILE_FIELD_NAME'	=> $ident_ary['data']['lang_name'],					'PROFILE_FIELD_EXPLAIN'	=> $ident_ary['data']['lang_explain'],					'S_PROFILE_' . strtoupper($ident)		=> true				);			}			return $tpl_fields;		}		else		{			trigger_error('Wrong mode for custom profile', E_USER_ERROR);		}	}	/**	* Get Profile Value for display	*/	function get_profile_value($ident_ary)	{		$value = $ident_ary['value'];		$field_type = $ident_ary['data']['field_type'];		switch ($this->profile_types[$field_type])		{			case 'int':				if ($value === '')				{					return NULL;				}				return (int) $value;			break;			case 'string':			case 'text':				if (!$value)				{					return NULL;				}				$value = make_clickable($value);				$value = censor_text($value);				$value = bbcode_nl2br($value);				return $value;			break;			// case 'datetime':			case 'date':				$date = explode('-', $value);				$day = (isset($date[0])) ? (int) $date[0] : 0;				$month = (isset($date[1])) ? (int) $date[1] : 0;				$year = (isset($date[2])) ? (int) $date[2] : 0;				if (!$day && !$month && !$year)				{					return NULL;				}				else if ($day && $month && $year)				{					global $user;					// Date should display as the same date for every user regardless of timezone, so remove offset					// to compensate for the offset added by user::format_date()					return $user->format_date(gmmktime(0, 0, 0, $month, $day, $year) - ($user->timezone + $user->dst), $user->lang['DATE_FORMAT'], true);				}				return $value;			break;			case 'dropdown':				$field_id = $ident_ary['data']['field_id'];				$lang_id = $ident_ary['data']['lang_id'];				if (!isset($this->options_lang[$field_id][$lang_id]))				{					$this->get_option_lang($field_id, $lang_id, FIELD_DROPDOWN, false);				}				if ($value == $ident_ary['data']['field_novalue'])				{					return NULL;				}				$value = (int) $value;				// User not having a value assigned				if (!isset($this->options_lang[$field_id][$lang_id][$value]))				{					return NULL;				}				return $this->options_lang[$field_id][$lang_id][$value];			break;			case 'bool':				$field_id = $ident_ary['data']['field_id'];				$lang_id = $ident_ary['data']['lang_id'];				if (!isset($this->options_lang[$field_id][$lang_id]))				{					$this->get_option_lang($field_id, $lang_id, FIELD_BOOL, false);				}				if ($ident_ary['data']['field_length'] == 1)				{					return (isset($this->options_lang[$field_id][$lang_id][(int) $value])) ? $this->options_lang[$field_id][$lang_id][(int) $value] : NULL;				}				else if (!$value)				{					return NULL;				}				else				{					return $this->options_lang[$field_id][$lang_id][(int) ($value) + 1];				}			break;			default:				trigger_error('Unknown profile type', E_USER_ERROR);			break;		}	}	/**	* Get field value for registration/profile	* @access private	*/	function get_var($field_validation, &$profile_row, $default_value, $preview)	{		global $user;		$profile_row['field_ident'] = (isset($profile_row['var_name'])) ? $profile_row['var_name'] : 'pf_' . $profile_row['field_ident'];		$user_ident = $profile_row['field_ident'];		// checkbox - only testing for isset		if ($profile_row['field_type'] == FIELD_BOOL && $profile_row['field_length'] == 2)		{			$value = (isset($_REQUEST[$profile_row['field_ident']])) ? true : ((!isset($user->profile_fields[$user_ident]) || $preview) ? $default_value : $user->profile_fields[$user_ident]);		}		else if ($profile_row['field_type'] == FIELD_INT)		{			if (isset($_REQUEST[$profile_row['field_ident']]))			{				$value = ($_REQUEST[$profile_row['field_ident']] === '') ? NULL : request_var($profile_row['field_ident'], $default_value);			}			else			{				if (!$preview && array_key_exists($user_ident, $user->profile_fields) && is_null($user->profile_fields[$user_ident]))				{					$value = NULL;				}				else if (!isset($user->profile_fields[$user_ident]) || $preview)				{					$value = $default_value;				}				else				{					$value = $user->profile_fields[$user_ident];				}			}			return (is_null($value) || $value === '') ? '' : (int) $value;		}		else		{			$value = (isset($_REQUEST[$profile_row['field_ident']])) ? request_var($profile_row['field_ident'], $default_value, true) : ((!isset($user->profile_fields[$user_ident]) || $preview) ? $default_value : $user->profile_fields[$user_ident]);			if (gettype($value) == 'string')			{				$value = utf8_normalize_nfc($value);			}		}		switch ($field_validation)		{			case 'int':				return (int) $value;			break;		}		return $value;	}	/**	* Process int-type	* @access private	*/	function generate_int($profile_row, $preview = false)	{		global $template;		$profile_row['field_value'] = $this->get_var('int', $profile_row, $profile_row['field_default_value'], $preview);		$template->assign_block_vars($this->profile_types[$profile_row['field_type']], array_change_key_case($profile_row, CASE_UPPER));	}	/**	* Process date-type	* @access private	*/	function generate_date($profile_row, $preview = false)	{		global $user, $template;		$profile_row['field_ident'] = (isset($profile_row['var_name'])) ? $profile_row['var_name'] : 'pf_' . $profile_row['field_ident'];		$user_ident = $profile_row['field_ident'];		$now = getdate();		if (!isset($_REQUEST[$profile_row['field_ident'] . '_day']))		{			if ($profile_row['field_default_value'] == 'now')			{				$profile_row['field_default_value'] = sprintf('%2d-%2d-%4d', $now['mday'], $now['mon'], $now['year']);			}			list($day, $month, $year) = explode('-', ((!isset($user->profile_fields[$user_ident]) || $preview) ? $profile_row['field_default_value'] : $user->profile_fields[$user_ident]));		}		else		{			if ($preview && $profile_row['field_default_value'] == 'now')			{				$profile_row['field_default_value'] = sprintf('%2d-%2d-%4d', $now['mday'], $now['mon'], $now['year']);				list($day, $month, $year) = explode('-', ((!isset($user->profile_fields[$user_ident]) || $preview) ? $profile_row['field_default_value'] : $user->profile_fields[$user_ident]));			}			else			{				$day = request_var($profile_row['field_ident'] . '_day', 0);				$month = request_var($profile_row['field_ident'] . '_month', 0);				$year = request_var($profile_row['field_ident'] . '_year', 0);			}		}		$profile_row['s_day_options'] = '<option value="0"' . ((!$day) ? ' selected="selected"' : '') . '>--</option>';		for ($i = 1; $i < 32; $i++)		{			$profile_row['s_day_options'] .= '<option value="' . $i . '"' . (($i == $day) ? ' selected="selected"' : '') . ">$i</option>";		}		$profile_row['s_month_options'] = '<option value="0"' . ((!$month) ? ' selected="selected"' : '') . '>--</option>';		for ($i = 1; $i < 13; $i++)		{			$profile_row['s_month_options'] .= '<option value="' . $i . '"' . (($i == $month) ? ' selected="selected"' : '') . ">$i</option>";		}		$profile_row['s_year_options'] = '<option value="0"' . ((!$year) ? ' selected="selected"' : '') . '>--</option>';		for ($i = $now['year'] - 100; $i <= $now['year'] + 100; $i++)		{			$profile_row['s_year_options'] .= '<option value="' . $i . '"' . (($i == $year) ? ' selected="selected"' : '') . ">$i</option>";		}		unset($now);		$profile_row['field_value'] = 0;		$template->assign_block_vars($this->profile_types[$profile_row['field_type']], array_change_key_case($profile_row, CASE_UPPER));	}	/**	* Process bool-type	* @access private	*/	function generate_bool($profile_row, $preview = false)	{		global $template;		$value = $this->get_var('int', $profile_row, $profile_row['field_default_value'], $preview);		$profile_row['field_value'] = $value;		$template->assign_block_vars($this->profile_types[$profile_row['field_type']], array_change_key_case($profile_row, CASE_UPPER));		if ($profile_row['field_length'] == 1)		{			if (!isset($this->options_lang[$profile_row['field_id']][$profile_row['lang_id']]) || !sizeof($this->options_lang[$profile_row['field_id']][$profile_row['lang_id']]))			{				$this->get_option_lang($profile_row['field_id'], $profile_row['lang_id'], FIELD_BOOL, $preview);			}			foreach ($this->options_lang[$profile_row['field_id']][$profile_row['lang_id']] as $option_id => $option_value)			{				$template->assign_block_vars('bool.options', array(					'OPTION_ID'	=> $option_id,					'CHECKED'	=> ($value == $option_id) ? ' checked="checked"' : '',					'VALUE'		=> $option_value)				);			}		}	}	/**	* Process string-type	* @access private	*/	function generate_string($profile_row, $preview = false)	{		global $template;		$profile_row['field_value'] = $this->get_var('string', $profile_row, $profile_row['lang_default_value'], $preview);		$template->assign_block_vars($this->profile_types[$profile_row['field_type']], array_change_key_case($profile_row, CASE_UPPER));	}	/**	* Process text-type	* @access private	*/	function generate_text($profile_row, $preview = false)	{		global $template;		global $user, $phpEx, $phpbb_root_path;		$field_length = explode('|', $profile_row['field_length']);		$profile_row['field_rows'] = $field_length[0];		$profile_row['field_cols'] = $field_length[1];		$profile_row['field_value'] = $this->get_var('string', $profile_row, $profile_row['lang_default_value'], $preview);		$template->assign_block_vars($this->profile_types[$profile_row['field_type']], array_change_key_case($profile_row, CASE_UPPER));	}	/**	* Process dropdown-type	* @access private	*/	function generate_dropdown($profile_row, $preview = false)	{		global $user, $template;		$value = $this->get_var('int', $profile_row, $profile_row['field_default_value'], $preview);		if (!isset($this->options_lang[$profile_row['field_id']]) || !isset($this->options_lang[$profile_row['field_id']][$profile_row['lang_id']]) || !sizeof($this->options_lang[$profile_row['field_id']][$profile_row['lang_id']]))		{			$this->get_option_lang($profile_row['field_id'], $profile_row['lang_id'], FIELD_DROPDOWN, $preview);		}		$profile_row['field_value'] = $value;		$template->assign_block_vars($this->profile_types[$profile_row['field_type']], array_change_key_case($profile_row, CASE_UPPER));		foreach ($this->options_lang[$profile_row['field_id']][$profile_row['lang_id']] as $option_id => $option_value)		{			$template->assign_block_vars('dropdown.options', array(				'OPTION_ID'	=> $option_id,				'SELECTED'	=> ($value == $option_id) ? ' selected="selected"' : '',				'VALUE'		=> $option_value)			);		}	}	/**	* Return Templated value/field. Possible values for $mode are:	* change == user is able to set/enter profile values; preview == just show the value	* @access private	*/	function process_field_row($mode, $profile_row)	{		global $template;		$preview = ($mode == 'preview') ? true : false;		// set template filename		$template->set_filenames(array(			'cp_body'		=> 'custom_profile_fields.html')		);		// empty previously filled blockvars		foreach ($this->profile_types as $field_case => $field_type)		{			$template->destroy_block_vars($field_type);		}		// Assign template variables		$type_func = 'generate_' . $this->profile_types[$profile_row['field_type']];		$this->$type_func($profile_row, $preview);		// Return templated data		return $template->assign_display('cp_body');	}	/**	* Build Array for user insertion into custom profile fields table	*/	function build_insert_sql_array($cp_data)	{		global $db, $user, $auth;		$sql_not_in = array();		foreach ($cp_data as $key => $null)		{			$sql_not_in[] = (strncmp($key, 'pf_', 3) === 0) ? substr($key, 3) : $key;		}		$sql = 'SELECT f.field_type, f.field_ident, f.field_default_value, l.lang_default_value			FROM ' . PROFILE_LANG_TABLE . ' l, ' . PROFILE_FIELDS_TABLE . ' f			WHERE l.lang_id = ' . $user->get_iso_lang_id() . '				' . ((sizeof($sql_not_in)) ? ' AND ' . $db->sql_in_set('f.field_ident', $sql_not_in, true) : '') . '				AND l.field_id = f.field_id';		$result = $db->sql_query($sql);		while ($row = $db->sql_fetchrow($result))		{			if ($row['field_default_value'] == 'now' && $row['field_type'] == FIELD_DATE)			{				$now = getdate();				$row['field_default_value'] = sprintf('%2d-%2d-%4d', $now['mday'], $now['mon'], $now['year']);			}			else if ($row['field_default_value'] === '' && $row['field_type'] == FIELD_INT)			{				// We cannot insert an empty string into an integer column.				$row['field_default_value'] = NULL;			}			$cp_data['pf_' . $row['field_ident']] = (in_array($row['field_type'], array(FIELD_TEXT, FIELD_STRING))) ? $row['lang_default_value'] : $row['field_default_value'];		}		$db->sql_freeresult($result);		return $cp_data;	}	/**	* Get profile field value on submit	* @access private	*/	function get_profile_field($profile_row)	{		global $phpbb_root_path, $phpEx;		global $config;		$var_name = 'pf_' . $profile_row['field_ident'];		switch ($profile_row['field_type'])		{			case FIELD_DATE:				if (!isset($_REQUEST[$var_name . '_day']))				{					if ($profile_row['field_default_value'] == 'now')					{						$now = getdate();						$profile_row['field_default_value'] = sprintf('%2d-%2d-%4d', $now['mday'], $now['mon'], $now['year']);					}					list($day, $month, $year) = explode('-', $profile_row['field_default_value']);				}				else				{					$day = request_var($var_name . '_day', 0);					$month = request_var($var_name . '_month', 0);					$year = request_var($var_name . '_year', 0);				}				$var = sprintf('%2d-%2d-%4d', $day, $month, $year);			break;			case FIELD_BOOL:				// Checkbox				if ($profile_row['field_length'] == 2)				{					$var = (isset($_REQUEST[$var_name])) ? 1 : 0;				}				else				{					$var = request_var($var_name, (int) $profile_row['field_default_value']);				}			break;			case FIELD_STRING:			case FIELD_TEXT:				$var = utf8_normalize_nfc(request_var($var_name, (string) $profile_row['field_default_value'], true));			break;			case FIELD_INT:				if (isset($_REQUEST[$var_name]) && $_REQUEST[$var_name] === '')				{					$var = NULL;				}				else				{					$var = request_var($var_name, (int) $profile_row['field_default_value']);				}			break;			case FIELD_DROPDOWN:				$var = request_var($var_name, (int) $profile_row['field_default_value']);			break;			default:				$var = request_var($var_name, $profile_row['field_default_value']);			break;		}		return $var;	}}/*** Custom Profile Fields ACP* @package phpBB3*/class custom_profile_admin extends custom_profile{	var $vars = array();	/**	* Return possible validation options	*/	function validate_options()	{		global $user;		$validate_ary = array('CHARS_ANY' => '.*', 'NUMBERS_ONLY' => '[0-9]+', 'ALPHA_ONLY' => '[\w]+', 'ALPHA_SPACERS' => '[\w_\+\. \-\[\]]+');		$validate_options = '';		foreach ($validate_ary as $lang => $value)		{			$selected = ($this->vars['field_validation'] == $value) ? ' selected="selected"' : '';			$validate_options .= '<option value="' . $value . '"' . $selected . '>' . $user->lang[$lang] . '</option>';		}		return $validate_options;	}	/**	* Get string options for second step in ACP	*/	function get_string_options()	{		global $user;		$options = array(			0 => array('TITLE' => $user->lang['FIELD_LENGTH'],		'FIELD' => '<input type="text" name="field_length" size="5" value="' . $this->vars['field_length'] . '" />'),			1 => array('TITLE' => $user->lang['MIN_FIELD_CHARS'],	'FIELD' => '<input type="text" name="field_minlen" size="5" value="' . $this->vars['field_minlen'] . '" />'),			2 => array('TITLE' => $user->lang['MAX_FIELD_CHARS'],	'FIELD' => '<input type="text" name="field_maxlen" size="5" value="' . $this->vars['field_maxlen'] . '" />'),			3 => array('TITLE' => $user->lang['FIELD_VALIDATION'],	'FIELD' => '<select name="field_validation">' . $this->validate_options() . '</select>')		);		return $options;	}	/**	* Get text options for second step in ACP	*/	function get_text_options()	{		global $user;		$options = array(			0 => array('TITLE' => $user->lang['FIELD_LENGTH'],		'FIELD' => '<input name="rows" size="5" value="' . $this->vars['rows'] . '" /> ' . $user->lang['ROWS'] . '</dd><dd><input name="columns" size="5" value="' . $this->vars['columns'] . '" /> ' . $user->lang['COLUMNS'] . ' <input type="hidden" name="field_length" value="' . $this->vars['field_length'] . '" />'),			1 => array('TITLE' => $user->lang['MIN_FIELD_CHARS'],	'FIELD' => '<input type="text" name="field_minlen" size="10" value="' . $this->vars['field_minlen'] . '" />'),			2 => array('TITLE' => $user->lang['MAX_FIELD_CHARS'],	'FIELD' => '<input type="text" name="field_maxlen" size="10" value="' . $this->vars['field_maxlen'] . '" />'),			3 => array('TITLE' => $user->lang['FIELD_VALIDATION'],	'FIELD' => '<select name="field_validation">' . $this->validate_options() . '</select>')		);		return $options;	}	/**	* Get int options for second step in ACP	*/	function get_int_options()	{		global $user;		$options = array(			0 => array('TITLE' => $user->lang['FIELD_LENGTH'],		'FIELD' => '<input type="text" name="field_length" size="5" value="' . $this->vars['field_length'] . '" />'),			1 => array('TITLE' => $user->lang['MIN_FIELD_NUMBER'],	'FIELD' => '<input type="text" name="field_minlen" size="5" value="' . $this->vars['field_minlen'] . '" />'),			2 => array('TITLE' => $user->lang['MAX_FIELD_NUMBER'],	'FIELD' => '<input type="text" name="field_maxlen" size="5" value="' . $this->vars['field_maxlen'] . '" />'),			3 => array('TITLE' => $user->lang['DEFAULT_VALUE'],		'FIELD' => '<input type="post" name="field_default_value" value="' . $this->vars['field_default_value'] . '" />')		);		return $options;	}	/**	* Get bool options for second step in ACP	*/	function get_bool_options()	{		global $user, $config, $lang_defs;		$default_lang_id = $lang_defs['iso'][$config['default_lang']];		$profile_row = array(			'var_name'				=> 'field_default_value',			'field_id'				=> 1,			'lang_name'				=> $this->vars['lang_name'],			'lang_explain'			=> $this->vars['lang_explain'],			'lang_id'				=> $default_lang_id,			'field_default_value'	=> $this->vars['field_default_value'],			'field_ident'			=> 'field_default_value',			'field_type'			=> FIELD_BOOL,			'field_length'			=> $this->vars['field_length'],			'lang_options'			=> $this->vars['lang_options']		);		$options = array(			0 => array('TITLE' => $user->lang['FIELD_TYPE'], 'EXPLAIN' => $user->lang['BOOL_TYPE_EXPLAIN'], 'FIELD' => '<label><input type="radio" class="radio" name="field_length" value="1"' . (($this->vars['field_length'] == 1) ? ' checked="checked"' : '') . ' onchange="document.getElementById(\'add_profile_field\').submit();" /> ' . $user->lang['RADIO_BUTTONS'] . '</label><label><input type="radio" class="radio" name="field_length" value="2"' . (($this->vars['field_length'] == 2) ? ' checked="checked"' : '') . ' onchange="document.getElementById(\'add_profile_field\').submit();" /> ' . $user->lang['CHECKBOX'] . '</label>'),			1 => array('TITLE' => $user->lang['DEFAULT_VALUE'], 'FIELD' => $this->process_field_row('preview', $profile_row))		);		return $options;	}	/**	* Get dropdown options for second step in ACP	*/	function get_dropdown_options()	{		global $user, $config, $lang_defs;		$default_lang_id = $lang_defs['iso'][$config['default_lang']];		$profile_row[0] = array(			'var_name'				=> 'field_default_value',			'field_id'				=> 1,			'lang_name'				=> $this->vars['lang_name'],			'lang_explain'			=> $this->vars['lang_explain'],			'lang_id'				=> $default_lang_id,			'field_default_value'	=> $this->vars['field_default_value'],			'field_ident'			=> 'field_default_value',			'field_type'			=> FIELD_DROPDOWN,			'lang_options'			=> $this->vars['lang_options']		);		$profile_row[1] = $profile_row[0];		$profile_row[1]['var_name'] = 'field_novalue';		$profile_row[1]['field_ident'] = 'field_novalue';		$profile_row[1]['field_default_value']	= $this->vars['field_novalue'];		$options = array(			0 => array('TITLE' => $user->lang['DEFAULT_VALUE'], 'FIELD' => $this->process_field_row('preview', $profile_row[0])),			1 => array('TITLE' => $user->lang['NO_VALUE_OPTION'], 'EXPLAIN' => $user->lang['NO_VALUE_OPTION_EXPLAIN'], 'FIELD' => $this->process_field_row('preview', $profile_row[1]))		);		return $options;	}	/**	* Get date options for second step in ACP	*/	function get_date_options()	{		global $user, $config, $lang_defs;		$default_lang_id = $lang_defs['iso'][$config['default_lang']];		$profile_row = array(			'var_name'				=> 'field_default_value',			'lang_name'				=> $this->vars['lang_name'],			'lang_explain'			=> $this->vars['lang_explain'],			'lang_id'				=> $default_lang_id,			'field_default_value'	=> $this->vars['field_default_value'],			'field_ident'			=> 'field_default_value',			'field_type'			=> FIELD_DATE,			'field_length'			=> $this->vars['field_length']		);		$always_now = request_var('always_now', -1);		if ($always_now == -1)		{			$s_checked = ($this->vars['field_default_value'] == 'now') ? true : false;		}		else		{			$s_checked = ($always_now) ? true : false;		}		$options = array(			0 => array('TITLE' => $user->lang['DEFAULT_VALUE'],	'FIELD' => $this->process_field_row('preview', $profile_row)),			1 => array('TITLE' => $user->lang['ALWAYS_TODAY'],	'FIELD' => '<label><input type="radio" class="radio" name="always_now" value="1"' . (($s_checked) ? ' checked="checked"' : '') . ' onchange="document.getElementById(\'add_profile_field\').submit();" /> ' . $user->lang['YES'] . '</label><label><input type="radio" class="radio" name="always_now" value="0"' . ((!$s_checked) ? ' checked="checked"' : '') . ' onchange="document.getElementById(\'add_profile_field\').submit();" /> ' . $user->lang['NO'] . '</label>'),		);		return $options;	}}?>
<?php/**** @package acp* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @ignore*/if (!defined('IN_PHPBB')){	exit;}/*** @package acp*/class acp_users{	var $u_action;	var $p_master;	function acp_users(&$p_master)	{		$this->p_master = &$p_master;	}	function main($id, $mode)	{		global $config, $db, $user, $auth, $template, $cache;		global $phpbb_root_path, $phpbb_admin_path, $phpEx, $table_prefix, $file_uploads;		$user->add_lang(array('posting', 'ucp', 'acp/users'));		$this->tpl_name = 'acp_users';		$this->page_title = 'ACP_USER_' . strtoupper($mode);		$error		= array();		$username	= utf8_normalize_nfc(request_var('username', '', true));		$user_id	= request_var('u', 0);		$action		= request_var('action', '');		$submit		= (isset($_POST['update']) && !isset($_POST['cancel'])) ? true : false;		$form_name = 'acp_users';		add_form_key($form_name);		// Whois (special case)		if ($action == 'whois')		{			include($phpbb_root_path . 'includes/functions_user.' . $phpEx);			$this->page_title = 'WHOIS';			$this->tpl_name = 'simple_body';			$user_ip = request_var('user_ip', '');			$domain = gethostbyaddr($user_ip);			$ipwhois = user_ipwhois($user_ip);			$template->assign_vars(array(				'MESSAGE_TITLE'		=> sprintf($user->lang['IP_WHOIS_FOR'], $domain),				'MESSAGE_TEXT'		=> nl2br($ipwhois))			);			return;		}		// Show user selection mask		if (!$username && !$user_id)		{			$this->page_title = 'SELECT_USER';			$template->assign_vars(array(				'U_ACTION'			=> $this->u_action,				'ANONYMOUS_USER_ID'	=> ANONYMOUS,				'S_SELECT_USER'		=> true,				'U_FIND_USERNAME'	=> append_sid("{$phpbb_root_path}memberlist.$phpEx", 'mode=searchuser&amp;form=select_user&amp;field=username&amp;select_single=true'),			));			return;		}		if (!$user_id)		{			$sql = 'SELECT user_id				FROM ' . USERS_TABLE . "				WHERE username_clean = '" . $db->sql_escape(utf8_clean_string($username)) . "'";			$result = $db->sql_query($sql);			$user_id = (int) $db->sql_fetchfield('user_id');			$db->sql_freeresult($result);			if (!$user_id)			{				trigger_error($user->lang['NO_USER'] . adm_back_link($this->u_action), E_USER_WARNING);			}		}		// Generate content for all modes		$sql = 'SELECT u.*, s.*			FROM ' . USERS_TABLE . ' u				LEFT JOIN ' . SESSIONS_TABLE . ' s ON (s.session_user_id = u.user_id)			WHERE u.user_id = ' . $user_id . '			ORDER BY s.session_time DESC';		$result = $db->sql_query_limit($sql, 1);		$user_row = $db->sql_fetchrow($result);		$db->sql_freeresult($result);		if (!$user_row)		{			trigger_error($user->lang['NO_USER'] . adm_back_link($this->u_action), E_USER_WARNING);		}		// Generate overall "header" for user admin		$s_form_options = '';		// Build modes dropdown list		$sql = 'SELECT module_mode, module_auth			FROM ' . MODULES_TABLE . "			WHERE module_basename = 'users'				AND module_enabled = 1				AND module_class = 'acp'			ORDER BY left_id, module_mode";		$result = $db->sql_query($sql);		$dropdown_modes = array();		while ($row = $db->sql_fetchrow($result))		{			if (!$this->p_master->module_auth($row['module_auth']))			{				continue;			}			$dropdown_modes[$row['module_mode']] = true;		}		$db->sql_freeresult($result);		foreach ($dropdown_modes as $module_mode => $null)		{			$selected = ($mode == $module_mode) ? ' selected="selected"' : '';			$s_form_options .= '<option value="' . $module_mode . '"' . $selected . '>' . $user->lang['ACP_USER_' . strtoupper($module_mode)] . '</option>';		}		$template->assign_vars(array(			'U_BACK'			=> $this->u_action,			'U_MODE_SELECT'		=> append_sid("{$phpbb_admin_path}index.$phpEx", "i=$id&amp;u=$user_id"),			'U_ACTION'			=> $this->u_action . '&amp;u=' . $user_id,			'S_FORM_OPTIONS'	=> $s_form_options,			'MANAGED_USERNAME'	=> $user_row['username'])		);		// Prevent normal users/admins change/view founders if they are not a founder by themselves		if ($user->data['user_type'] != USER_FOUNDER && $user_row['user_type'] == USER_FOUNDER)		{			trigger_error($user->lang['NOT_MANAGE_FOUNDER'] . adm_back_link($this->u_action), E_USER_WARNING);		}		switch ($mode)		{			case 'overview':				include($phpbb_root_path . 'includes/functions_user.' . $phpEx);				$user->add_lang('acp/ban');				$delete			= request_var('delete', 0);				$delete_type	= request_var('delete_type', '');				$ip				= request_var('ip', 'ip');				if ($submit)				{					// You can't delete the founder					if ($delete && $user_row['user_type'] != USER_FOUNDER)					{						if (!$auth->acl_get('a_userdel'))						{							trigger_error($user->lang['NO_AUTH_OPERATION'] . adm_back_link($this->u_action . '&amp;u=' . $user_id), E_USER_WARNING);						}						// Check if the user wants to remove himself or the guest user account						if ($user_id == ANONYMOUS)						{							trigger_error($user->lang['CANNOT_REMOVE_ANONYMOUS'] . adm_back_link($this->u_action . '&amp;u=' . $user_id), E_USER_WARNING);						}						if ($user_id == $user->data['user_id'])						{							trigger_error($user->lang['CANNOT_REMOVE_YOURSELF'] . adm_back_link($this->u_action . '&amp;u=' . $user_id), E_USER_WARNING);						}						if ($delete_type)						{							if (confirm_box(true))							{								user_delete($delete_type, $user_id, $user_row['username']);								add_log('admin', 'LOG_USER_DELETED', $user_row['username']);								trigger_error($user->lang['USER_DELETED'] . adm_back_link($this->u_action));							}							else							{								confirm_box(false, $user->lang['CONFIRM_OPERATION'], build_hidden_fields(array(									'u'				=> $user_id,									'i'				=> $id,									'mode'			=> $mode,									'action'		=> $action,									'update'		=> true,									'delete'		=> 1,									'delete_type'	=> $delete_type))								);							}						}						else						{							trigger_error($user->lang['NO_MODE'] . adm_back_link($this->u_action . '&amp;u=' . $user_id), E_USER_WARNING);						}					}					// Handle quicktool actions					switch ($action)					{						case 'banuser':						case 'banemail':						case 'banip':							if ($user_id == $user->data['user_id'])							{								trigger_error($user->lang['CANNOT_BAN_YOURSELF'] . adm_back_link($this->u_action . '&amp;u=' . $user_id), E_USER_WARNING);							}							if ($user_id == ANONYMOUS)							{								trigger_error($user->lang['CANNOT_BAN_ANONYMOUS'] . adm_back_link($this->u_action . '&amp;u=' . $user_id), E_USER_WARNING);							}							if ($user_row['user_type'] == USER_FOUNDER)							{								trigger_error($user->lang['CANNOT_BAN_FOUNDER'] . adm_back_link($this->u_action . '&amp;u=' . $user_id), E_USER_WARNING);							}							if (!check_form_key($form_name))							{								trigger_error($user->lang['FORM_INVALID'] . adm_back_link($this->u_action . '&amp;u=' . $user_id), E_USER_WARNING);							}							$ban = array();							switch ($action)							{								case 'banuser':									$ban[] = $user_row['username'];									$reason = 'USER_ADMIN_BAN_NAME_REASON';									$log = 'LOG_USER_BAN_USER';								break;								case 'banemail':									$ban[] = $user_row['user_email'];									$reason = 'USER_ADMIN_BAN_EMAIL_REASON';									$log = 'LOG_USER_BAN_EMAIL';								break;								case 'banip':									$ban[] = $user_row['user_ip'];									$sql = 'SELECT DISTINCT poster_ip										FROM ' . POSTS_TABLE . "										WHERE poster_id = $user_id";									$result = $db->sql_query($sql);									while ($row = $db->sql_fetchrow($result))									{										$ban[] = $row['poster_ip'];									}									$db->sql_freeresult($result);									$reason = 'USER_ADMIN_BAN_IP_REASON';									$log = 'LOG_USER_BAN_IP';								break;							}							$ban_reason = utf8_normalize_nfc(request_var('ban_reason', $user->lang[$reason], true));							$ban_give_reason = utf8_normalize_nfc(request_var('ban_give_reason', '', true));							// Log not used at the moment, we simply utilize the ban function.							$result = user_ban(substr($action, 3), $ban, 0, 0, 0, $ban_reason, $ban_give_reason);							trigger_error((($result === false) ? $user->lang['BAN_ALREADY_ENTERED'] : $user->lang['BAN_SUCCESSFUL']) . adm_back_link($this->u_action . '&amp;u=' . $user_id));						break;						case 'reactivate':							if ($user_id == $user->data['user_id'])							{								trigger_error($user->lang['CANNOT_FORCE_REACT_YOURSELF'] . adm_back_link($this->u_action . '&amp;u=' . $user_id), E_USER_WARNING);							}							if (!check_form_key($form_name))							{								trigger_error($user->lang['FORM_INVALID'] . adm_back_link($this->u_action . '&amp;u=' . $user_id), E_USER_WARNING);							}							if ($user_row['user_type'] == USER_FOUNDER)							{								trigger_error($user->lang['CANNOT_FORCE_REACT_FOUNDER'] . adm_back_link($this->u_action . '&amp;u=' . $user_id), E_USER_WARNING);							}							if ($user_row['user_type'] == USER_IGNORE)							{								trigger_error($user->lang['CANNOT_FORCE_REACT_BOT'] . adm_back_link($this->u_action . '&amp;u=' . $user_id), E_USER_WARNING);							}							if ($config['email_enable'])							{								include_once($phpbb_root_path . 'includes/functions_messenger.' . $phpEx);								$server_url = generate_board_url();								$user_actkey = gen_rand_string(mt_rand(6, 10));								$email_template = ($user_row['user_type'] == USER_NORMAL) ? 'user_reactivate_account' : 'user_resend_inactive';								if ($user_row['user_type'] == USER_NORMAL)								{									user_active_flip('deactivate', $user_id, INACTIVE_REMIND);									$sql = 'UPDATE ' . USERS_TABLE . "										SET user_actkey = '" . $db->sql_escape($user_actkey) . "'										WHERE user_id = $user_id";									$db->sql_query($sql);								}								else								{									// Grabbing the last confirm key - we only send a reminder									$sql = 'SELECT user_actkey										FROM ' . USERS_TABLE . '										WHERE user_id = ' . $user_id;									$result = $db->sql_query($sql);									$user_actkey = (string) $db->sql_fetchfield('user_actkey');									$db->sql_freeresult($result);								}								$messenger = new messenger(false);								$messenger->template($email_template, $user_row['user_lang']);								$messenger->to($user_row['user_email'], $user_row['username']);								$messenger->anti_abuse_headers($config, $user);								$messenger->assign_vars(array(									'WELCOME_MSG'	=> htmlspecialchars_decode(sprintf($user->lang['WELCOME_SUBJECT'], $config['sitename'])),									'USERNAME'		=> htmlspecialchars_decode($user_row['username']),									'U_ACTIVATE'	=> "$server_url/ucp.$phpEx?mode=activate&u={$user_row['user_id']}&k=$user_actkey")								);								$messenger->send(NOTIFY_EMAIL);								add_log('admin', 'LOG_USER_REACTIVATE', $user_row['username']);								add_log('user', $user_id, 'LOG_USER_REACTIVATE_USER');								trigger_error($user->lang['FORCE_REACTIVATION_SUCCESS'] . adm_back_link($this->u_action . '&amp;u=' . $user_id));							}						break;						case 'active':							if ($user_id == $user->data['user_id'])							{								// It is only deactivation since the user is already activated (else he would not have reached this page)								trigger_error($user->lang['CANNOT_DEACTIVATE_YOURSELF'] . adm_back_link($this->u_action . '&amp;u=' . $user_id), E_USER_WARNING);							}							if (!check_form_key($form_name))							{								trigger_error($user->lang['FORM_INVALID'] . adm_back_link($this->u_action . '&amp;u=' . $user_id), E_USER_WARNING);							}							if ($user_row['user_type'] == USER_FOUNDER)							{								trigger_error($user->lang['CANNOT_DEACTIVATE_FOUNDER'] . adm_back_link($this->u_action . '&amp;u=' . $user_id), E_USER_WARNING);							}							if ($user_row['user_type'] == USER_IGNORE)							{								trigger_error($user->lang['CANNOT_DEACTIVATE_BOT'] . adm_back_link($this->u_action . '&amp;u=' . $user_id), E_USER_WARNING);							}							user_active_flip('flip', $user_id);							if ($user_row['user_type'] == USER_INACTIVE)							{								if ($config['require_activation'] == USER_ACTIVATION_ADMIN)								{									include_once($phpbb_root_path . 'includes/functions_messenger.' . $phpEx);									$messenger = new messenger(false);									$messenger->template('admin_welcome_activated', $user_row['user_lang']);									$messenger->to($user_row['user_email'], $user_row['username']);									$messenger->anti_abuse_headers($config, $user);									$messenger->assign_vars(array(										'USERNAME'	=> htmlspecialchars_decode($user_row['username']))									);									$messenger->send(NOTIFY_EMAIL);								}							}							$message = ($user_row['user_type'] == USER_INACTIVE) ? 'USER_ADMIN_ACTIVATED' : 'USER_ADMIN_DEACTIVED';							$log = ($user_row['user_type'] == USER_INACTIVE) ? 'LOG_USER_ACTIVE' : 'LOG_USER_INACTIVE';							add_log('admin', $log, $user_row['username']);							add_log('user', $user_id, $log . '_USER');							trigger_error($user->lang[$message] . adm_back_link($this->u_action . '&amp;u=' . $user_id));						break;						case 'delsig':							if (!check_form_key($form_name))							{								trigger_error($user->lang['FORM_INVALID'] . adm_back_link($this->u_action . '&amp;u=' . $user_id), E_USER_WARNING);							}							$sql_ary = array(								'user_sig'					=> '',								'user_sig_bbcode_uid'		=> '',								'user_sig_bbcode_bitfield'	=> ''							);							$sql = 'UPDATE ' . USERS_TABLE . ' SET ' . $db->sql_build_array('UPDATE', $sql_ary) . "								WHERE user_id = $user_id";							$db->sql_query($sql);							add_log('admin', 'LOG_USER_DEL_SIG', $user_row['username']);							add_log('user', $user_id, 'LOG_USER_DEL_SIG_USER');							trigger_error($user->lang['USER_ADMIN_SIG_REMOVED'] . adm_back_link($this->u_action . '&amp;u=' . $user_id));						break;						case 'delavatar':							if (!check_form_key($form_name))							{								trigger_error($user->lang['FORM_INVALID'] . adm_back_link($this->u_action . '&amp;u=' . $user_id), E_USER_WARNING);							}							$sql_ary = array(								'user_avatar'			=> '',								'user_avatar_type'		=> 0,								'user_avatar_width'		=> 0,								'user_avatar_height'	=> 0,							);							$sql = 'UPDATE ' . USERS_TABLE . '								SET ' . $db->sql_build_array('UPDATE', $sql_ary) . "								WHERE user_id = $user_id";							$db->sql_query($sql);							// Delete old avatar if present							if ($user_row['user_avatar'] && $user_row['user_avatar_type'] != AVATAR_GALLERY)							{								avatar_delete('user', $user_row);							}							add_log('admin', 'LOG_USER_DEL_AVATAR', $user_row['username']);							add_log('user', $user_id, 'LOG_USER_DEL_AVATAR_USER');							trigger_error($user->lang['USER_ADMIN_AVATAR_REMOVED'] . adm_back_link($this->u_action . '&amp;u=' . $user_id));						break;						case 'delposts':							if (confirm_box(true))							{								// Delete posts, attachments, etc.								delete_posts('poster_id', $user_id);								add_log('admin', 'LOG_USER_DEL_POSTS', $user_row['username']);								trigger_error($user->lang['USER_POSTS_DELETED'] . adm_back_link($this->u_action . '&amp;u=' . $user_id));							}							else							{								confirm_box(false, $user->lang['CONFIRM_OPERATION'], build_hidden_fields(array(									'u'				=> $user_id,									'i'				=> $id,									'mode'			=> $mode,									'action'		=> $action,									'update'		=> true))								);							}						break;						case 'delattach':							if (confirm_box(true))							{								delete_attachments('user', $user_id);								add_log('admin', 'LOG_USER_DEL_ATTACH', $user_row['username']);								trigger_error($user->lang['USER_ATTACHMENTS_REMOVED'] . adm_back_link($this->u_action . '&amp;u=' . $user_id));							}							else							{								confirm_box(false, $user->lang['CONFIRM_OPERATION'], build_hidden_fields(array(									'u'				=> $user_id,									'i'				=> $id,									'mode'			=> $mode,									'action'		=> $action,									'update'		=> true))								);							}						break;						case 'deloutbox':							if (confirm_box(true))							{								$msg_ids = array();								$lang = 'EMPTY';								$sql = 'SELECT msg_id									FROM ' . PRIVMSGS_TO_TABLE . "									WHERE author_id = $user_id										AND folder_id = " . PRIVMSGS_OUTBOX;								$result = $db->sql_query($sql);								if ($row = $db->sql_fetchrow($result))								{									if (!function_exists('delete_pm'))									{										include($phpbb_root_path . 'includes/functions_privmsgs.' . $phpEx);									}									do									{										$msg_ids[] = (int) $row['msg_id'];									}									while ($row = $db->sql_fetchrow($result));									$db->sql_freeresult($result);									delete_pm($user_id, $msg_ids, PRIVMSGS_OUTBOX);									add_log('admin', 'LOG_USER_DEL_OUTBOX', $user_row['username']);									$lang = 'EMPTIED';								}								$db->sql_freeresult($result);								trigger_error($user->lang['USER_OUTBOX_' . $lang] . adm_back_link($this->u_action . '&amp;u=' . $user_id));							}							else							{								confirm_box(false, $user->lang['CONFIRM_OPERATION'], build_hidden_fields(array(									'u'				=> $user_id,									'i'				=> $id,									'mode'			=> $mode,									'action'		=> $action,									'update'		=> true))								);							}						break;						case 'moveposts':							if (!check_form_key($form_name))							{								trigger_error($user->lang['FORM_INVALID'] . adm_back_link($this->u_action . '&amp;u=' . $user_id), E_USER_WARNING);							}							$user->add_lang('acp/forums');							$new_forum_id = request_var('new_f', 0);							if (!$new_forum_id)							{								$this->page_title = 'USER_ADMIN_MOVE_POSTS';								$template->assign_vars(array(									'S_SELECT_FORUM'		=> true,									'U_ACTION'				=> $this->u_action . "&amp;action=$action&amp;u=$user_id",									'U_BACK'				=> $this->u_action . "&amp;u=$user_id",									'S_FORUM_OPTIONS'		=> make_forum_select(false, false, false, true))								);								return;							}							// Is the new forum postable to?							$sql = 'SELECT forum_name, forum_type								FROM ' . FORUMS_TABLE . "								WHERE forum_id = $new_forum_id";							$result = $db->sql_query($sql);							$forum_info = $db->sql_fetchrow($result);							$db->sql_freeresult($result);							if (!$forum_info)							{								trigger_error($user->lang['NO_FORUM'] . adm_back_link($this->u_action . '&amp;u=' . $user_id), E_USER_WARNING);							}							if ($forum_info['forum_type'] != FORUM_POST)							{								trigger_error($user->lang['MOVE_POSTS_NO_POSTABLE_FORUM'] . adm_back_link($this->u_action . '&amp;u=' . $user_id), E_USER_WARNING);							}							// Two stage?							// Move topics comprising only posts from this user							$topic_id_ary = $move_topic_ary = $move_post_ary = $new_topic_id_ary = array();							$forum_id_ary = array($new_forum_id);							$sql = 'SELECT topic_id, COUNT(post_id) AS total_posts								FROM ' . POSTS_TABLE . "								WHERE poster_id = $user_id									AND forum_id <> $new_forum_id								GROUP BY topic_id";							$result = $db->sql_query($sql);							while ($row = $db->sql_fetchrow($result))							{								$topic_id_ary[$row['topic_id']] = $row['total_posts'];							}							$db->sql_freeresult($result);							if (sizeof($topic_id_ary))							{								$sql = 'SELECT topic_id, forum_id, topic_title, topic_replies, topic_replies_real, topic_attachment									FROM ' . TOPICS_TABLE . '									WHERE ' . $db->sql_in_set('topic_id', array_keys($topic_id_ary));								$result = $db->sql_query($sql);								while ($row = $db->sql_fetchrow($result))								{									if (max($row['topic_replies'], $row['topic_replies_real']) + 1 == $topic_id_ary[$row['topic_id']])									{										$move_topic_ary[] = $row['topic_id'];									}									else									{										$move_post_ary[$row['topic_id']]['title'] = $row['topic_title'];										$move_post_ary[$row['topic_id']]['attach'] = ($row['topic_attachment']) ? 1 : 0;									}									$forum_id_ary[] = $row['forum_id'];								}								$db->sql_freeresult($result);							}							// Entire topic comprises posts by this user, move these topics							if (sizeof($move_topic_ary))							{								move_topics($move_topic_ary, $new_forum_id, false);							}							if (sizeof($move_post_ary))							{								// Create new topic								// Update post_ids, report_ids, attachment_ids								foreach ($move_post_ary as $topic_id => $post_ary)								{									// Create new topic									$sql = 'INSERT INTO ' . TOPICS_TABLE . ' ' . $db->sql_build_array('INSERT', array(										'topic_poster'				=> $user_id,										'topic_time'				=> time(),										'forum_id' 					=> $new_forum_id,										'icon_id'					=> 0,										'topic_approved'			=> 1,										'topic_title' 				=> $post_ary['title'],										'topic_first_poster_name'	=> $user_row['username'],										'topic_type'				=> POST_NORMAL,										'topic_time_limit'			=> 0,										'topic_attachment'			=> $post_ary['attach'])									);									$db->sql_query($sql);									$new_topic_id = $db->sql_nextid();									// Move posts									$sql = 'UPDATE ' . POSTS_TABLE . "										SET forum_id = $new_forum_id, topic_id = $new_topic_id										WHERE topic_id = $topic_id											AND poster_id = $user_id";									$db->sql_query($sql);									if ($post_ary['attach'])									{										$sql = 'UPDATE ' . ATTACHMENTS_TABLE . "											SET topic_id = $new_topic_id											WHERE topic_id = $topic_id												AND poster_id = $user_id";										$db->sql_query($sql);									}									$new_topic_id_ary[] = $new_topic_id;								}							}							$forum_id_ary = array_unique($forum_id_ary);							$topic_id_ary = array_unique(array_merge(array_keys($topic_id_ary), $new_topic_id_ary));							if (sizeof($topic_id_ary))							{								sync('topic_reported', 'topic_id', $topic_id_ary);								sync('topic', 'topic_id', $topic_id_ary);							}							if (sizeof($forum_id_ary))							{								sync('forum', 'forum_id', $forum_id_ary, false, true);							}							add_log('admin', 'LOG_USER_MOVE_POSTS', $user_row['username'], $forum_info['forum_name']);							add_log('user', $user_id, 'LOG_USER_MOVE_POSTS_USER', $forum_info['forum_name']);							trigger_error($user->lang['USER_POSTS_MOVED'] . adm_back_link($this->u_action . '&amp;u=' . $user_id));						break;						case 'leave_nr':							if (confirm_box(true))							{								remove_newly_registered($user_id, $user_row);								add_log('admin', 'LOG_USER_REMOVED_NR', $user_row['username']);								trigger_error($user->lang['USER_LIFTED_NR'] . adm_back_link($this->u_action . '&amp;u=' . $user_id));							}							else							{								confirm_box(false, $user->lang['CONFIRM_OPERATION'], build_hidden_fields(array(									'u'				=> $user_id,									'i'				=> $id,									'mode'			=> $mode,									'action'		=> $action,									'update'		=> true))								);							}						break;					}					// Handle registration info updates					$data = array(						'username'			=> utf8_normalize_nfc(request_var('user', $user_row['username'], true)),						'user_founder'		=> request_var('user_founder', ($user_row['user_type'] == USER_FOUNDER) ? 1 : 0),						'email'				=> strtolower(request_var('user_email', $user_row['user_email'])),						'email_confirm'		=> strtolower(request_var('email_confirm', '')),						'new_password'		=> request_var('new_password', '', true),						'password_confirm'	=> request_var('password_confirm', '', true),					);					// Validation data - we do not check the password complexity setting here					$check_ary = array(						'new_password'		=> array(							array('string', true, $config['min_pass_chars'], $config['max_pass_chars']),							array('password')),						'password_confirm'	=> array('string', true, $config['min_pass_chars'], $config['max_pass_chars']),					);					// Check username if altered					if ($data['username'] != $user_row['username'])					{						$check_ary += array(							'username'			=> array(								array('string', false, $config['min_name_chars'], $config['max_name_chars']),								array('username', $user_row['username'])							),						);					}					// Check email if altered					if ($data['email'] != $user_row['user_email'])					{						$check_ary += array(							'email'				=> array(								array('string', false, 6, 60),								array('email', $user_row['user_email'])							),							'email_confirm'		=> array('string', true, 6, 60)						);					}					$error = validate_data($data, $check_ary);					if ($data['new_password'] && $data['password_confirm'] != $data['new_password'])					{						$error[] = 'NEW_PASSWORD_ERROR';					}					if ($data['email'] != $user_row['user_email'] && $data['email_confirm'] != $data['email'])					{						$error[] = 'NEW_EMAIL_ERROR';					}					if (!check_form_key($form_name))					{						$error[] = 'FORM_INVALID';					}					// Which updates do we need to do?					$update_username = ($user_row['username'] != $data['username']) ? $data['username'] : false;					$update_password = ($data['new_password'] && !phpbb_check_hash($data['new_password'], $user_row['user_password'])) ? true : false;					$update_email = ($data['email'] != $user_row['user_email']) ? $data['email'] : false;					if (!sizeof($error))					{						$sql_ary = array();						if ($user_row['user_type'] != USER_FOUNDER || $user->data['user_type'] == USER_FOUNDER)						{							// Only allow founders updating the founder status...							if ($user->data['user_type'] == USER_FOUNDER)							{								// Setting a normal member to be a founder								if ($data['user_founder'] && $user_row['user_type'] != USER_FOUNDER)								{									// Make sure the user is not setting an Inactive or ignored user to be a founder									if ($user_row['user_type'] == USER_IGNORE)									{										trigger_error($user->lang['CANNOT_SET_FOUNDER_IGNORED'] . adm_back_link($this->u_action . '&amp;u=' . $user_id), E_USER_WARNING);									}									if ($user_row['user_type'] == USER_INACTIVE)									{										trigger_error($user->lang['CANNOT_SET_FOUNDER_INACTIVE'] . adm_back_link($this->u_action . '&amp;u=' . $user_id), E_USER_WARNING);									}									$sql_ary['user_type'] = USER_FOUNDER;								}								else if (!$data['user_founder'] && $user_row['user_type'] == USER_FOUNDER)								{									// Check if at least one founder is present									$sql = 'SELECT user_id										FROM ' . USERS_TABLE . '										WHERE user_type = ' . USER_FOUNDER . '											AND user_id <> ' . $user_id;									$result = $db->sql_query_limit($sql, 1);									$row = $db->sql_fetchrow($result);									$db->sql_freeresult($result);									if ($row)									{										$sql_ary['user_type'] = USER_NORMAL;									}									else									{										trigger_error($user->lang['AT_LEAST_ONE_FOUNDER'] . adm_back_link($this->u_action . '&amp;u=' . $user_id), E_USER_WARNING);									}								}							}						}						if ($update_username !== false)						{							$sql_ary['username'] = $update_username;							$sql_ary['username_clean'] = utf8_clean_string($update_username);							add_log('user', $user_id, 'LOG_USER_UPDATE_NAME', $user_row['username'], $update_username);						}						if ($update_email !== false)						{							$sql_ary += array(								'user_email'		=> $update_email,								'user_email_hash'	=> phpbb_email_hash($update_email),							);							add_log('user', $user_id, 'LOG_USER_UPDATE_EMAIL', $user_row['username'], $user_row['user_email'], $update_email);						}						if ($update_password)						{							$sql_ary += array(								'user_password'		=> phpbb_hash($data['new_password']),								'user_passchg'		=> time(),								'user_pass_convert'	=> 0,							);							$user->reset_login_keys($user_id);							add_log('user', $user_id, 'LOG_USER_NEW_PASSWORD', $user_row['username']);						}						if (sizeof($sql_ary))						{							$sql = 'UPDATE ' . USERS_TABLE . '								SET ' . $db->sql_build_array('UPDATE', $sql_ary) . '								WHERE user_id = ' . $user_id;							$db->sql_query($sql);						}						if ($update_username)						{							user_update_name($user_row['username'], $update_username);						}						// Let the users permissions being updated						$auth->acl_clear_prefetch($user_id);						add_log('admin', 'LOG_USER_USER_UPDATE', $data['username']);						trigger_error($user->lang['USER_OVERVIEW_UPDATED'] . adm_back_link($this->u_action . '&amp;u=' . $user_id));					}					// Replace "error" strings with their real, localised form					$error = preg_replace('#^([A-Z_]+)$#e', "(!empty(\$user->lang['\\1'])) ? \$user->lang['\\1'] : '\\1'", $error);				}				if ($user_id == $user->data['user_id'])				{					$quick_tool_ary = array('delsig' => 'DEL_SIG', 'delavatar' => 'DEL_AVATAR', 'moveposts' => 'MOVE_POSTS', 'delposts' => 'DEL_POSTS', 'delattach' => 'DEL_ATTACH', 'deloutbox' => 'DEL_OUTBOX');					if ($user_row['user_new'])					{						$quick_tool_ary['leave_nr'] = 'LEAVE_NR';					}				}				else				{					$quick_tool_ary = array();					if ($user_row['user_type'] != USER_FOUNDER)					{						$quick_tool_ary += array('banuser' => 'BAN_USER', 'banemail' => 'BAN_EMAIL', 'banip' => 'BAN_IP');					}					if ($user_row['user_type'] != USER_FOUNDER && $user_row['user_type'] != USER_IGNORE)					{						$quick_tool_ary += array('active' => (($user_row['user_type'] == USER_INACTIVE) ? 'ACTIVATE' : 'DEACTIVATE'));					}					$quick_tool_ary += array('delsig' => 'DEL_SIG', 'delavatar' => 'DEL_AVATAR', 'moveposts' => 'MOVE_POSTS', 'delposts' => 'DEL_POSTS', 'delattach' => 'DEL_ATTACH', 'deloutbox' => 'DEL_OUTBOX');					if ($config['email_enable'] && ($user_row['user_type'] == USER_NORMAL || $user_row['user_type'] == USER_INACTIVE))					{						$quick_tool_ary['reactivate'] = 'FORCE';					}					if ($user_row['user_new'])					{						$quick_tool_ary['leave_nr'] = 'LEAVE_NR';					}				}				$s_action_options = '<option class="sep" value="">' . $user->lang['SELECT_OPTION'] . '</option>';				foreach ($quick_tool_ary as $value => $lang)				{					$s_action_options .= '<option value="' . $value . '">' . $user->lang['USER_ADMIN_' . $lang] . '</option>';				}				if ($config['load_onlinetrack'])				{					$sql = 'SELECT MAX(session_time) AS session_time, MIN(session_viewonline) AS session_viewonline						FROM ' . SESSIONS_TABLE . "						WHERE session_user_id = $user_id";					$result = $db->sql_query($sql);					$row = $db->sql_fetchrow($result);					$db->sql_freeresult($result);					$user_row['session_time'] = (isset($row['session_time'])) ? $row['session_time'] : 0;					$user_row['session_viewonline'] = (isset($row['session_viewonline'])) ? $row['session_viewonline'] : 0;					unset($row);				}				$last_visit = (!empty($user_row['session_time'])) ? $user_row['session_time'] : $user_row['user_lastvisit'];				$inactive_reason = '';				if ($user_row['user_type'] == USER_INACTIVE)				{					$inactive_reason = $user->lang['INACTIVE_REASON_UNKNOWN'];					switch ($user_row['user_inactive_reason'])					{						case INACTIVE_REGISTER:							$inactive_reason = $user->lang['INACTIVE_REASON_REGISTER'];						break;						case INACTIVE_PROFILE:							$inactive_reason = $user->lang['INACTIVE_REASON_PROFILE'];						break;						case INACTIVE_MANUAL:							$inactive_reason = $user->lang['INACTIVE_REASON_MANUAL'];						break;						case INACTIVE_REMIND:							$inactive_reason = $user->lang['INACTIVE_REASON_REMIND'];						break;					}				}				// Posts in Queue				$sql = 'SELECT COUNT(post_id) as posts_in_queue					FROM ' . POSTS_TABLE . '					WHERE poster_id = ' . $user_id . '						AND post_approved = 0';				$result = $db->sql_query($sql);				$user_row['posts_in_queue'] = (int) $db->sql_fetchfield('posts_in_queue');				$db->sql_freeresult($result);				$template->assign_vars(array(					'L_NAME_CHARS_EXPLAIN'		=> sprintf($user->lang[$config['allow_name_chars'] . '_EXPLAIN'], $config['min_name_chars'], $config['max_name_chars']),					'L_CHANGE_PASSWORD_EXPLAIN'	=> sprintf($user->lang[$config['pass_complex'] . '_EXPLAIN'], $config['min_pass_chars'], $config['max_pass_chars']),					'L_POSTS_IN_QUEUE'			=> $user->lang('NUM_POSTS_IN_QUEUE', $user_row['posts_in_queue']),					'S_FOUNDER'					=> ($user->data['user_type'] == USER_FOUNDER) ? true : false,					'S_OVERVIEW'		=> true,					'S_USER_IP'			=> ($user_row['user_ip']) ? true : false,					'S_USER_FOUNDER'	=> ($user_row['user_type'] == USER_FOUNDER) ? true : false,					'S_ACTION_OPTIONS'	=> $s_action_options,					'S_OWN_ACCOUNT'		=> ($user_id == $user->data['user_id']) ? true : false,					'S_USER_INACTIVE'	=> ($user_row['user_type'] == USER_INACTIVE) ? true : false,					'U_SHOW_IP'		=> $this->u_action . "&amp;u=$user_id&amp;ip=" . (($ip == 'ip') ? 'hostname' : 'ip'),					'U_WHOIS'		=> $this->u_action . "&amp;action=whois&amp;user_ip={$user_row['user_ip']}",					'U_MCP_QUEUE'	=> ($auth->acl_getf_global('m_approve')) ? append_sid("{$phpbb_root_path}mcp.$phpEx", 'i=queue', true, $user->session_id) : '',					'U_SWITCH_PERMISSIONS'	=> ($auth->acl_get('a_switchperm') && $user->data['user_id'] != $user_row['user_id']) ? append_sid("{$phpbb_root_path}ucp.$phpEx", "mode=switch_perm&amp;u={$user_row['user_id']}&amp;hash=" . generate_link_hash('switchperm')) : '',					'POSTS_IN_QUEUE'	=> $user_row['posts_in_queue'],					'USER'				=> $user_row['username'],					'USER_REGISTERED'	=> $user->format_date($user_row['user_regdate']),					'REGISTERED_IP'		=> ($ip == 'hostname') ? gethostbyaddr($user_row['user_ip']) : $user_row['user_ip'],					'USER_LASTACTIVE'	=> ($last_visit) ? $user->format_date($last_visit) : ' - ',					'USER_EMAIL'		=> $user_row['user_email'],					'USER_WARNINGS'		=> $user_row['user_warnings'],					'USER_POSTS'		=> $user_row['user_posts'],					'USER_INACTIVE_REASON'	=> $inactive_reason,				));			break;			case 'feedback':				$user->add_lang('mcp');				// Set up general vars				$start		= request_var('start', 0);				$deletemark = (isset($_POST['delmarked'])) ? true : false;				$deleteall	= (isset($_POST['delall'])) ? true : false;				$marked		= request_var('mark', array(0));				$message	= utf8_normalize_nfc(request_var('message', '', true));				// Sort keys				$sort_days	= request_var('st', 0);				$sort_key	= request_var('sk', 't');				$sort_dir	= request_var('sd', 'd');				// Delete entries if requested and able				if (($deletemark || $deleteall) && $auth->acl_get('a_clearlogs'))				{					if (!check_form_key($form_name))					{						trigger_error($user->lang['FORM_INVALID'] . adm_back_link($this->u_action . '&amp;u=' . $user_id), E_USER_WARNING);					}					$where_sql = '';					if ($deletemark && $marked)					{						$sql_in = array();						foreach ($marked as $mark)						{							$sql_in[] = $mark;						}						$where_sql = ' AND ' . $db->sql_in_set('log_id', $sql_in);						unset($sql_in);					}					if ($where_sql || $deleteall)					{						$sql = 'DELETE FROM ' . LOG_TABLE . '							WHERE log_type = ' . LOG_USERS . "							AND reportee_id = $user_id							$where_sql";						$db->sql_query($sql);						add_log('admin', 'LOG_CLEAR_USER', $user_row['username']);					}				}				if ($submit && $message)				{					if (!check_form_key($form_name))					{						trigger_error($user->lang['FORM_INVALID'] . adm_back_link($this->u_action . '&amp;u=' . $user_id), E_USER_WARNING);					}					add_log('admin', 'LOG_USER_FEEDBACK', $user_row['username']);					add_log('mod', 0, 0, 'LOG_USER_FEEDBACK', $user_row['username']);					add_log('user', $user_id, 'LOG_USER_GENERAL', $message);					trigger_error($user->lang['USER_FEEDBACK_ADDED'] . adm_back_link($this->u_action . '&amp;u=' . $user_id));				}				// Sorting				$limit_days = array(0 => $user->lang['ALL_ENTRIES'], 1 => $user->lang['1_DAY'], 7 => $user->lang['7_DAYS'], 14 => $user->lang['2_WEEKS'], 30 => $user->lang['1_MONTH'], 90 => $user->lang['3_MONTHS'], 180 => $user->lang['6_MONTHS'], 365 => $user->lang['1_YEAR']);				$sort_by_text = array('u' => $user->lang['SORT_USERNAME'], 't' => $user->lang['SORT_DATE'], 'i' => $user->lang['SORT_IP'], 'o' => $user->lang['SORT_ACTION']);				$sort_by_sql = array('u' => 'u.username_clean', 't' => 'l.log_time', 'i' => 'l.log_ip', 'o' => 'l.log_operation');				$s_limit_days = $s_sort_key = $s_sort_dir = $u_sort_param = '';				gen_sort_selects($limit_days, $sort_by_text, $sort_days, $sort_key, $sort_dir, $s_limit_days, $s_sort_key, $s_sort_dir, $u_sort_param);				// Define where and sort sql for use in displaying logs				$sql_where = ($sort_days) ? (time() - ($sort_days * 86400)) : 0;				$sql_sort = $sort_by_sql[$sort_key] . ' ' . (($sort_dir == 'd') ? 'DESC' : 'ASC');				// Grab log data				$log_data = array();				$log_count = 0;				$start = view_log('user', $log_data, $log_count, $config['topics_per_page'], $start, 0, 0, $user_id, $sql_where, $sql_sort);				$template->assign_vars(array(					'S_FEEDBACK'	=> true,					'S_ON_PAGE'		=> on_page($log_count, $config['topics_per_page'], $start),					'PAGINATION'	=> generate_pagination($this->u_action . "&amp;u=$user_id&amp;$u_sort_param", $log_count, $config['topics_per_page'], $start, true),					'S_LIMIT_DAYS'	=> $s_limit_days,					'S_SORT_KEY'	=> $s_sort_key,					'S_SORT_DIR'	=> $s_sort_dir,					'S_CLEARLOGS'	=> $auth->acl_get('a_clearlogs'))				);				foreach ($log_data as $row)				{					$template->assign_block_vars('log', array(						'USERNAME'		=> $row['username_full'],						'IP'			=> $row['ip'],						'DATE'			=> $user->format_date($row['time']),						'ACTION'		=> nl2br($row['action']),						'ID'			=> $row['id'])					);				}			break;			case 'warnings':				$user->add_lang('mcp');				// Set up general vars				$start		= request_var('start', 0);				$deletemark	= (isset($_POST['delmarked'])) ? true : false;				$deleteall	= (isset($_POST['delall'])) ? true : false;				$confirm	= (isset($_POST['confirm'])) ? true : false;				$marked		= request_var('mark', array(0));				$message	= utf8_normalize_nfc(request_var('message', '', true));				// Sort keys				$sort_days	= request_var('st', 0);				$sort_key	= request_var('sk', 't');				$sort_dir	= request_var('sd', 'd');				// Delete entries if requested and able				if ($deletemark || $deleteall || $confirm)				{					if (confirm_box(true))					{						$where_sql = '';						$deletemark = request_var('delmarked', 0);						$deleteall = request_var('delall', 0);						if ($deletemark && $marked)						{							$where_sql = ' AND ' . $db->sql_in_set('warning_id', array_values($marked));						}						if ($where_sql || $deleteall)						{							$sql = 'DELETE FROM ' . WARNINGS_TABLE . "								WHERE user_id = $user_id									$where_sql";							$db->sql_query($sql);							if ($deleteall)							{								$log_warnings = $deleted_warnings = 0;							}							else							{								$num_warnings = (int) $db->sql_affectedrows();								$deleted_warnings = ' user_warnings - ' . $num_warnings;								$log_warnings = ($num_warnings > 2) ? 2 : $num_warnings;							}							$sql = 'UPDATE ' . USERS_TABLE . "								SET user_warnings = $deleted_warnings								WHERE user_id = $user_id";							$db->sql_query($sql);							switch ($log_warnings)							{								case 2:									add_log('admin', 'LOG_WARNINGS_DELETED', $user_row['username'], $num_warnings);								break;								case 1:									add_log('admin', 'LOG_WARNING_DELETED', $user_row['username']);								break;								default:									add_log('admin', 'LOG_WARNINGS_DELETED_ALL', $user_row['username']);								break;							}						}					}					else					{						$s_hidden_fields = array(							'i'				=> $id,							'mode'			=> $mode,							'u'				=> $user_id,							'mark'			=> $marked,						);						if (isset($_POST['delmarked']))						{							$s_hidden_fields['delmarked'] = 1;						}						if (isset($_POST['delall']))						{							$s_hidden_fields['delall'] = 1;						}						if (isset($_POST['delall']) || (isset($_POST['delmarked']) && sizeof($marked)))						{							confirm_box(false, $user->lang['CONFIRM_OPERATION'], build_hidden_fields($s_hidden_fields));						}					}				}				$sql = 'SELECT w.warning_id, w.warning_time, w.post_id, l.log_operation, l.log_data, l.user_id AS mod_user_id, m.username AS mod_username, m.user_colour AS mod_user_colour					FROM ' . WARNINGS_TABLE . ' w					LEFT JOIN ' . LOG_TABLE . ' l						ON (w.log_id = l.log_id)					LEFT JOIN ' . USERS_TABLE . ' m						ON (l.user_id = m.user_id)					WHERE w.user_id = ' . $user_id . '					ORDER BY w.warning_time DESC';				$result = $db->sql_query($sql);				while ($row = $db->sql_fetchrow($result))				{					if (!$row['log_operation'])					{						// We do not have a log-entry anymore, so there is no data available						$row['action'] = $user->lang['USER_WARNING_LOG_DELETED'];					}					else					{						$row['action'] = (isset($user->lang[$row['log_operation']])) ? $user->lang[$row['log_operation']] : '{' . ucfirst(str_replace('_', ' ', $row['log_operation'])) . '}';						if (!empty($row['log_data']))						{							$log_data_ary = @unserialize($row['log_data']);							$log_data_ary = ($log_data_ary === false) ? array() : $log_data_ary;							if (isset($user->lang[$row['log_operation']]))							{								// Check if there are more occurrences of % than arguments, if there are we fill out the arguments array								// It doesn't matter if we add more arguments than placeholders								if ((substr_count($row['action'], '%') - sizeof($log_data_ary)) > 0)								{									$log_data_ary = array_merge($log_data_ary, array_fill(0, substr_count($row['action'], '%') - sizeof($log_data_ary), ''));								}								$row['action'] = vsprintf($row['action'], $log_data_ary);								$row['action'] = bbcode_nl2br(censor_text($row['action']));							}							else if (!empty($log_data_ary))							{								$row['action'] .= '<br />' . implode('', $log_data_ary);							}						}					}					$template->assign_block_vars('warn', array(						'ID'		=> $row['warning_id'],						'USERNAME'	=> ($row['log_operation']) ? get_username_string('full', $row['mod_user_id'], $row['mod_username'], $row['mod_user_colour']) : '-',						'ACTION'	=> make_clickable($row['action']),						'DATE'		=> $user->format_date($row['warning_time']),					));				}				$db->sql_freeresult($result);				$template->assign_vars(array(					'S_WARNINGS'	=> true,				));			break;			case 'profile':				include($phpbb_root_path . 'includes/functions_user.' . $phpEx);				include($phpbb_root_path . 'includes/functions_profile_fields.' . $phpEx);				$cp = new custom_profile();				$cp_data = $cp_error = array();				$sql = 'SELECT lang_id					FROM ' . LANG_TABLE . "					WHERE lang_iso = '" . $db->sql_escape($user->data['user_lang']) . "'";				$result = $db->sql_query($sql);				$row = $db->sql_fetchrow($result);				$db->sql_freeresult($result);				$user_row['iso_lang_id'] = $row['lang_id'];				$data = array(					'icq'			=> request_var('icq', $user_row['user_icq']),					'aim'			=> request_var('aim', $user_row['user_aim']),					'msn'			=> request_var('msn', $user_row['user_msnm']),					'yim'			=> request_var('yim', $user_row['user_yim']),					'jabber'		=> utf8_normalize_nfc(request_var('jabber', $user_row['user_jabber'], true)),					'website'		=> request_var('website', $user_row['user_website']),					'location'		=> utf8_normalize_nfc(request_var('location', $user_row['user_from'], true)),					'occupation'	=> utf8_normalize_nfc(request_var('occupation', $user_row['user_occ'], true)),					'interests'		=> utf8_normalize_nfc(request_var('interests', $user_row['user_interests'], true)),					'bday_day'		=> 0,					'bday_month'	=> 0,					'bday_year'		=> 0,				);				if ($user_row['user_birthday'])				{					list($data['bday_day'], $data['bday_month'], $data['bday_year']) = explode('-', $user_row['user_birthday']);				}				$data['bday_day']		= request_var('bday_day', $data['bday_day']);				$data['bday_month']		= request_var('bday_month', $data['bday_month']);				$data['bday_year']		= request_var('bday_year', $data['bday_year']);				$data['user_birthday']	= sprintf('%2d-%2d-%4d', $data['bday_day'], $data['bday_month'], $data['bday_year']);				if ($submit)				{					$error = validate_data($data, array(						'icq'			=> array(							array('string', true, 3, 15),							array('match', true, '#^[0-9]+$#i')),						'aim'			=> array('string', true, 3, 255),						'msn'			=> array('string', true, 5, 255),						'jabber'		=> array(							array('string', true, 5, 255),							array('jabber')),						'yim'			=> array('string', true, 5, 255),						'website'		=> array(							array('string', true, 12, 255),							array('match', true, '#^http[s]?://(.*?\.)*?[a-z0-9\-]+\.[a-z]{2,4}#i')),						'location'		=> array('string', true, 2, 100),						'occupation'	=> array('string', true, 2, 500),						'interests'		=> array('string', true, 2, 500),						'bday_day'		=> array('num', true, 1, 31),						'bday_month'	=> array('num', true, 1, 12),						'bday_year'		=> array('num', true, 1901, gmdate('Y', time())),						'user_birthday'	=> array('date', true),					));					// validate custom profile fields					$cp->submit_cp_field('profile', $user_row['iso_lang_id'], $cp_data, $cp_error);					if (sizeof($cp_error))					{						$error = array_merge($error, $cp_error);					}					if (!check_form_key($form_name))					{						$error[] = 'FORM_INVALID';					}					if (!sizeof($error))					{						$sql_ary = array(							'user_icq'		=> $data['icq'],							'user_aim'		=> $data['aim'],							'user_msnm'		=> $data['msn'],							'user_yim'		=> $data['yim'],							'user_jabber'	=> $data['jabber'],							'user_website'	=> $data['website'],							'user_from'		=> $data['location'],							'user_occ'		=> $data['occupation'],							'user_interests'=> $data['interests'],							'user_birthday'	=> $data['user_birthday'],						);						$sql = 'UPDATE ' . USERS_TABLE . '							SET ' . $db->sql_build_array('UPDATE', $sql_ary) . "							WHERE user_id = $user_id";						$db->sql_query($sql);						// Update Custom Fields						$cp->update_profile_field_data($user_id, $cp_data);						trigger_error($user->lang['USER_PROFILE_UPDATED'] . adm_back_link($this->u_action . '&amp;u=' . $user_id));					}					// Replace "error" strings with their real, localised form					$error = preg_replace('#^([A-Z_]+)$#e', "(!empty(\$user->lang['\\1'])) ? \$user->lang['\\1'] : '\\1'", $error);				}				$s_birthday_day_options = '<option value="0"' . ((!$data['bday_day']) ? ' selected="selected"' : '') . '>--</option>';				for ($i = 1; $i < 32; $i++)				{					$selected = ($i == $data['bday_day']) ? ' selected="selected"' : '';					$s_birthday_day_options .= "<option value=\"$i\"$selected>$i</option>";				}				$s_birthday_month_options = '<option value="0"' . ((!$data['bday_month']) ? ' selected="selected"' : '') . '>--</option>';				for ($i = 1; $i < 13; $i++)				{					$selected = ($i == $data['bday_month']) ? ' selected="selected"' : '';					$s_birthday_month_options .= "<option value=\"$i\"$selected>$i</option>";				}				$s_birthday_year_options = '';				$now = getdate();				$s_birthday_year_options = '<option value="0"' . ((!$data['bday_year']) ? ' selected="selected"' : '') . '>--</option>';				for ($i = $now['year'] - 100; $i <= $now['year']; $i++)				{					$selected = ($i == $data['bday_year']) ? ' selected="selected"' : '';					$s_birthday_year_options .= "<option value=\"$i\"$selected>$i</option>";				}				unset($now);				$template->assign_vars(array(					'ICQ'			=> $data['icq'],					'YIM'			=> $data['yim'],					'AIM'			=> $data['aim'],					'MSN'			=> $data['msn'],					'JABBER'		=> $data['jabber'],					'WEBSITE'		=> $data['website'],					'LOCATION'		=> $data['location'],					'OCCUPATION'	=> $data['occupation'],					'INTERESTS'		=> $data['interests'],					'S_BIRTHDAY_DAY_OPTIONS'	=> $s_birthday_day_options,					'S_BIRTHDAY_MONTH_OPTIONS'	=> $s_birthday_month_options,					'S_BIRTHDAY_YEAR_OPTIONS'	=> $s_birthday_year_options,					'S_PROFILE'		=> true)				);				// Get additional profile fields and assign them to the template block var 'profile_fields'				$user->get_profile_fields($user_id);				$cp->generate_profile_fields('profile', $user_row['iso_lang_id']);			break;			case 'prefs':				include($phpbb_root_path . 'includes/functions_user.' . $phpEx);				$data = array(					'dateformat'		=> utf8_normalize_nfc(request_var('dateformat', $user_row['user_dateformat'], true)),					'lang'				=> basename(request_var('lang', $user_row['user_lang'])),					'tz'				=> request_var('tz', (float) $user_row['user_timezone']),					'style'				=> request_var('style', $user_row['user_style']),					'dst'				=> request_var('dst', $user_row['user_dst']),					'viewemail'			=> request_var('viewemail', $user_row['user_allow_viewemail']),					'massemail'			=> request_var('massemail', $user_row['user_allow_massemail']),					'hideonline'		=> request_var('hideonline', !$user_row['user_allow_viewonline']),					'notifymethod'		=> request_var('notifymethod', $user_row['user_notify_type']),					'notifypm'			=> request_var('notifypm', $user_row['user_notify_pm']),					'popuppm'			=> request_var('popuppm', $this->optionget($user_row, 'popuppm')),					'allowpm'			=> request_var('allowpm', $user_row['user_allow_pm']),					'topic_sk'			=> request_var('topic_sk', ($user_row['user_topic_sortby_type']) ? $user_row['user_topic_sortby_type'] : 't'),					'topic_sd'			=> request_var('topic_sd', ($user_row['user_topic_sortby_dir']) ? $user_row['user_topic_sortby_dir'] : 'd'),					'topic_st'			=> request_var('topic_st', ($user_row['user_topic_show_days']) ? $user_row['user_topic_show_days'] : 0),					'post_sk'			=> request_var('post_sk', ($user_row['user_post_sortby_type']) ? $user_row['user_post_sortby_type'] : 't'),					'post_sd'			=> request_var('post_sd', ($user_row['user_post_sortby_dir']) ? $user_row['user_post_sortby_dir'] : 'a'),					'post_st'			=> request_var('post_st', ($user_row['user_post_show_days']) ? $user_row['user_post_show_days'] : 0),					'view_images'		=> request_var('view_images', $this->optionget($user_row, 'viewimg')),					'view_flash'		=> request_var('view_flash', $this->optionget($user_row, 'viewflash')),					'view_smilies'		=> request_var('view_smilies', $this->optionget($user_row, 'viewsmilies')),					'view_sigs'			=> request_var('view_sigs', $this->optionget($user_row, 'viewsigs')),					'view_avatars'		=> request_var('view_avatars', $this->optionget($user_row, 'viewavatars')),					'view_wordcensor'	=> request_var('view_wordcensor', $this->optionget($user_row, 'viewcensors')),					'bbcode'	=> request_var('bbcode', $this->optionget($user_row, 'bbcode')),					'smilies'	=> request_var('smilies', $this->optionget($user_row, 'smilies')),					'sig'		=> request_var('sig', $this->optionget($user_row, 'attachsig')),					'notify'	=> request_var('notify', $user_row['user_notify']),				);				if ($submit)				{					$error = validate_data($data, array(						'dateformat'	=> array('string', false, 1, 30),						'lang'			=> array('match', false, '#^[a-z_\-]{2,}$#i'),						'tz'			=> array('num', false, -14, 14),						'topic_sk'		=> array('string', false, 1, 1),						'topic_sd'		=> array('string', false, 1, 1),						'post_sk'		=> array('string', false, 1, 1),						'post_sd'		=> array('string', false, 1, 1),					));					if (!check_form_key($form_name))					{						$error[] = 'FORM_INVALID';					}					if (!sizeof($error))					{						$this->optionset($user_row, 'popuppm', $data['popuppm']);						$this->optionset($user_row, 'viewimg', $data['view_images']);						$this->optionset($user_row, 'viewflash', $data['view_flash']);						$this->optionset($user_row, 'viewsmilies', $data['view_smilies']);						$this->optionset($user_row, 'viewsigs', $data['view_sigs']);						$this->optionset($user_row, 'viewavatars', $data['view_avatars']);						$this->optionset($user_row, 'viewcensors', $data['view_wordcensor']);						$this->optionset($user_row, 'bbcode', $data['bbcode']);						$this->optionset($user_row, 'smilies', $data['smilies']);						$this->optionset($user_row, 'attachsig', $data['sig']);						$sql_ary = array(							'user_options'			=> $user_row['user_options'],							'user_allow_pm'			=> $data['allowpm'],							'user_allow_viewemail'	=> $data['viewemail'],							'user_allow_massemail'	=> $data['massemail'],							'user_allow_viewonline'	=> !$data['hideonline'],							'user_notify_type'		=> $data['notifymethod'],							'user_notify_pm'		=> $data['notifypm'],							'user_dst'				=> $data['dst'],							'user_dateformat'		=> $data['dateformat'],							'user_lang'				=> $data['lang'],							'user_timezone'			=> $data['tz'],							'user_style'			=> $data['style'],							'user_topic_sortby_type'	=> $data['topic_sk'],							'user_post_sortby_type'		=> $data['post_sk'],							'user_topic_sortby_dir'		=> $data['topic_sd'],							'user_post_sortby_dir'		=> $data['post_sd'],							'user_topic_show_days'	=> $data['topic_st'],							'user_post_show_days'	=> $data['post_st'],							'user_notify'	=> $data['notify'],						);						$sql = 'UPDATE ' . USERS_TABLE . '							SET ' . $db->sql_build_array('UPDATE', $sql_ary) . "							WHERE user_id = $user_id";						$db->sql_query($sql);						// Check if user has an active session						if ($user_row['session_id'])						{							// We'll update the session if user_allow_viewonline has changed and the user is a bot							// Or if it's a regular user and the admin set it to hide the session							if ($user_row['user_allow_viewonline'] != $sql_ary['user_allow_viewonline'] && $user_row['user_type'] == USER_IGNORE								|| $user_row['user_allow_viewonline'] && !$sql_ary['user_allow_viewonline'])							{								// We also need to check if the user has the permission to cloak.								$user_auth = new auth();								$user_auth->acl($user_row);								$session_sql_ary = array(									'session_viewonline'	=> ($user_auth->acl_get('u_hideonline')) ? $sql_ary['user_allow_viewonline'] : true,								);								$sql = 'UPDATE ' . SESSIONS_TABLE . '									SET ' . $db->sql_build_array('UPDATE', $session_sql_ary) . "									WHERE session_user_id = $user_id";								$db->sql_query($sql);								unset($user_auth);							}						}						trigger_error($user->lang['USER_PREFS_UPDATED'] . adm_back_link($this->u_action . '&amp;u=' . $user_id));					}					// Replace "error" strings with their real, localised form					$error = preg_replace('#^([A-Z_]+)$#e', "(!empty(\$user->lang['\\1'])) ? \$user->lang['\\1'] : '\\1'", $error);				}				$dateformat_options = '';				foreach ($user->lang['dateformats'] as $format => $null)				{					$dateformat_options .= '<option value="' . $format . '"' . (($format == $data['dateformat']) ? ' selected="selected"' : '') . '>';					$dateformat_options .= $user->format_date(time(), $format, false) . ((strpos($format, '|') !== false) ? $user->lang['VARIANT_DATE_SEPARATOR'] . $user->format_date(time(), $format, true) : '');					$dateformat_options .= '</option>';				}				$s_custom = false;				$dateformat_options .= '<option value="custom"';				if (!isset($user->lang['dateformats'][$data['dateformat']]))				{					$dateformat_options .= ' selected="selected"';					$s_custom = true;				}				$dateformat_options .= '>' . $user->lang['CUSTOM_DATEFORMAT'] . '</option>';				$sort_dir_text = array('a' => $user->lang['ASCENDING'], 'd' => $user->lang['DESCENDING']);				// Topic ordering options				$limit_topic_days = array(0 => $user->lang['ALL_TOPICS'], 1 => $user->lang['1_DAY'], 7 => $user->lang['7_DAYS'], 14 => $user->lang['2_WEEKS'], 30 => $user->lang['1_MONTH'], 90 => $user->lang['3_MONTHS'], 180 => $user->lang['6_MONTHS'], 365 => $user->lang['1_YEAR']);				$sort_by_topic_text = array('a' => $user->lang['AUTHOR'], 't' => $user->lang['POST_TIME'], 'r' => $user->lang['REPLIES'], 's' => $user->lang['SUBJECT'], 'v' => $user->lang['VIEWS']);				// Post ordering options				$limit_post_days = array(0 => $user->lang['ALL_POSTS'], 1 => $user->lang['1_DAY'], 7 => $user->lang['7_DAYS'], 14 => $user->lang['2_WEEKS'], 30 => $user->lang['1_MONTH'], 90 => $user->lang['3_MONTHS'], 180 => $user->lang['6_MONTHS'], 365 => $user->lang['1_YEAR']);				$sort_by_post_text = array('a' => $user->lang['AUTHOR'], 't' => $user->lang['POST_TIME'], 's' => $user->lang['SUBJECT']);				$_options = array('topic', 'post');				foreach ($_options as $sort_option)				{					${'s_limit_' . $sort_option . '_days'} = '<select name="' . $sort_option . '_st">';					foreach (${'limit_' . $sort_option . '_days'} as $day => $text)					{						$selected = ($data[$sort_option . '_st'] == $day) ? ' selected="selected"' : '';						${'s_limit_' . $sort_option . '_days'} .= '<option value="' . $day . '"' . $selected . '>' . $text . '</option>';					}					${'s_limit_' . $sort_option . '_days'} .= '</select>';					${'s_sort_' . $sort_option . '_key'} = '<select name="' . $sort_option . '_sk">';					foreach (${'sort_by_' . $sort_option . '_text'} as $key => $text)					{						$selected = ($data[$sort_option . '_sk'] == $key) ? ' selected="selected"' : '';						${'s_sort_' . $sort_option . '_key'} .= '<option value="' . $key . '"' . $selected . '>' . $text . '</option>';					}					${'s_sort_' . $sort_option . '_key'} .= '</select>';					${'s_sort_' . $sort_option . '_dir'} = '<select name="' . $sort_option . '_sd">';					foreach ($sort_dir_text as $key => $value)					{						$selected = ($data[$sort_option . '_sd'] == $key) ? ' selected="selected"' : '';						${'s_sort_' . $sort_option . '_dir'} .= '<option value="' . $key . '"' . $selected . '>' . $value . '</option>';					}					${'s_sort_' . $sort_option . '_dir'} .= '</select>';				}				$template->assign_vars(array(					'S_PREFS'			=> true,					'S_JABBER_DISABLED'	=> ($config['jab_enable'] && $user_row['user_jabber'] && @extension_loaded('xml')) ? false : true,					'VIEW_EMAIL'		=> $data['viewemail'],					'MASS_EMAIL'		=> $data['massemail'],					'ALLOW_PM'			=> $data['allowpm'],					'HIDE_ONLINE'		=> $data['hideonline'],					'NOTIFY_EMAIL'		=> ($data['notifymethod'] == NOTIFY_EMAIL) ? true : false,					'NOTIFY_IM'			=> ($data['notifymethod'] == NOTIFY_IM) ? true : false,					'NOTIFY_BOTH'		=> ($data['notifymethod'] == NOTIFY_BOTH) ? true : false,					'NOTIFY_PM'			=> $data['notifypm'],					'POPUP_PM'			=> $data['popuppm'],					'DST'				=> $data['dst'],					'BBCODE'			=> $data['bbcode'],					'SMILIES'			=> $data['smilies'],					'ATTACH_SIG'		=> $data['sig'],					'NOTIFY'			=> $data['notify'],					'VIEW_IMAGES'		=> $data['view_images'],					'VIEW_FLASH'		=> $data['view_flash'],					'VIEW_SMILIES'		=> $data['view_smilies'],					'VIEW_SIGS'			=> $data['view_sigs'],					'VIEW_AVATARS'		=> $data['view_avatars'],					'VIEW_WORDCENSOR'	=> $data['view_wordcensor'],					'S_TOPIC_SORT_DAYS'		=> $s_limit_topic_days,					'S_TOPIC_SORT_KEY'		=> $s_sort_topic_key,					'S_TOPIC_SORT_DIR'		=> $s_sort_topic_dir,					'S_POST_SORT_DAYS'		=> $s_limit_post_days,					'S_POST_SORT_KEY'		=> $s_sort_post_key,					'S_POST_SORT_DIR'		=> $s_sort_post_dir,					'DATE_FORMAT'			=> $data['dateformat'],					'S_DATEFORMAT_OPTIONS'	=> $dateformat_options,					'S_CUSTOM_DATEFORMAT'	=> $s_custom,					'DEFAULT_DATEFORMAT'	=> $config['default_dateformat'],					'A_DEFAULT_DATEFORMAT'	=> addslashes($config['default_dateformat']),					'S_LANG_OPTIONS'	=> language_select($data['lang']),					'S_STYLE_OPTIONS'	=> style_select($data['style']),					'S_TZ_OPTIONS'		=> tz_select($data['tz'], true),					)				);			break;			case 'avatar':				include($phpbb_root_path . 'includes/functions_display.' . $phpEx);				include($phpbb_root_path . 'includes/functions_user.' . $phpEx);				$can_upload = (file_exists($phpbb_root_path . $config['avatar_path']) && phpbb_is_writable($phpbb_root_path . $config['avatar_path']) && $file_uploads) ? true : false;				if ($submit)				{					if (!check_form_key($form_name))					{							trigger_error($user->lang['FORM_INVALID'] . adm_back_link($this->u_action . '&amp;u=' . $user_id), E_USER_WARNING);					}					if (avatar_process_user($error, $user_row, $can_upload))					{						trigger_error($user->lang['USER_AVATAR_UPDATED'] . adm_back_link($this->u_action . '&amp;u=' . $user_row['user_id']));					}					// Replace "error" strings with their real, localised form					$error = preg_replace('#^([A-Z_]+)$#e', "(!empty(\$user->lang['\\1'])) ? \$user->lang['\\1'] : '\\1'", $error);				}				if (!$config['allow_avatar'] && $user_row['user_avatar_type'])				{					$error[] = $user->lang['USER_AVATAR_NOT_ALLOWED'];				}				else if ((($user_row['user_avatar_type'] == AVATAR_UPLOAD) && !$config['allow_avatar_upload']) ||				 (($user_row['user_avatar_type'] == AVATAR_REMOTE) && !$config['allow_avatar_remote']) ||				 (($user_row['user_avatar_type'] == AVATAR_GALLERY) && !$config['allow_avatar_local']))				{					$error[] = $user->lang['USER_AVATAR_TYPE_NOT_ALLOWED'];				}				// Generate users avatar				$avatar_img = ($user_row['user_avatar']) ? get_user_avatar($user_row['user_avatar'], $user_row['user_avatar_type'], $user_row['user_avatar_width'], $user_row['user_avatar_height'], 'USER_AVATAR', true) : '<img src="' . $phpbb_admin_path . 'images/no_avatar.gif" alt="" />';				$display_gallery = (isset($_POST['display_gallery'])) ? true : false;				$avatar_select = basename(request_var('avatar_select', ''));				$category = basename(request_var('category', ''));				if ($config['allow_avatar_local'] && $display_gallery)				{					avatar_gallery($category, $avatar_select, 4);				}				$template->assign_vars(array(					'S_AVATAR'			=> true,					'S_CAN_UPLOAD'		=> $can_upload,					'S_UPLOAD_FILE'		=> ($config['allow_avatar'] && $can_upload && $config['allow_avatar_upload']) ? true : false,					'S_REMOTE_UPLOAD'	=> ($config['allow_avatar'] && $can_upload && $config['allow_avatar_remote_upload']) ? true : false,					'S_ALLOW_REMOTE'	=> ($config['allow_avatar'] && $config['allow_avatar_remote']) ? true : false,					'S_DISPLAY_GALLERY'	=> ($config['allow_avatar'] && $config['allow_avatar_local'] && !$display_gallery) ? true : false,					'S_IN_GALLERY'		=> ($config['allow_avatar'] && $config['allow_avatar_local'] && $display_gallery) ? true : false,					'AVATAR_IMAGE'			=> $avatar_img,					'AVATAR_MAX_FILESIZE'	=> $config['avatar_filesize'],					'USER_AVATAR_WIDTH'		=> $user_row['user_avatar_width'],					'USER_AVATAR_HEIGHT'	=> $user_row['user_avatar_height'],					'L_AVATAR_EXPLAIN'	=> sprintf($user->lang['AVATAR_EXPLAIN'], $config['avatar_max_width'], $config['avatar_max_height'], round($config['avatar_filesize'] / 1024)))				);			break;			case 'rank':				if ($submit)				{					if (!check_form_key($form_name))					{						trigger_error($user->lang['FORM_INVALID'] . adm_back_link($this->u_action . '&amp;u=' . $user_id), E_USER_WARNING);					}					$rank_id = request_var('user_rank', 0);					$sql = 'UPDATE ' . USERS_TABLE . "						SET user_rank = $rank_id						WHERE user_id = $user_id";					$db->sql_query($sql);					trigger_error($user->lang['USER_RANK_UPDATED'] . adm_back_link($this->u_action . '&amp;u=' . $user_id));				}				$sql = 'SELECT *					FROM ' . RANKS_TABLE . '					WHERE rank_special = 1					ORDER BY rank_title';				$result = $db->sql_query($sql);				$s_rank_options = '<option value="0"' . ((!$user_row['user_rank']) ? ' selected="selected"' : '') . '>' . $user->lang['NO_SPECIAL_RANK'] . '</option>';				while ($row = $db->sql_fetchrow($result))				{					$selected = ($user_row['user_rank'] && $row['rank_id'] == $user_row['user_rank']) ? ' selected="selected"' : '';					$s_rank_options .= '<option value="' . $row['rank_id'] . '"' . $selected . '>' . $row['rank_title'] . '</option>';				}				$db->sql_freeresult($result);				$template->assign_vars(array(					'S_RANK'			=> true,					'S_RANK_OPTIONS'	=> $s_rank_options)				);			break;			case 'sig':				include_once($phpbb_root_path . 'includes/functions_posting.' . $phpEx);				include_once($phpbb_root_path . 'includes/functions_display.' . $phpEx);				$enable_bbcode	= ($config['allow_sig_bbcode']) ? (bool) $this->optionget($user_row, 'sig_bbcode') : false;				$enable_smilies	= ($config['allow_sig_smilies']) ? (bool) $this->optionget($user_row, 'sig_smilies') : false;				$enable_urls	= ($config['allow_sig_links']) ? (bool) $this->optionget($user_row, 'sig_links') : false;				$signature		= utf8_normalize_nfc(request_var('signature', (string) $user_row['user_sig'], true));				$preview		= (isset($_POST['preview'])) ? true : false;				if ($submit || $preview)				{					include_once($phpbb_root_path . 'includes/message_parser.' . $phpEx);					$enable_bbcode	= ($config['allow_sig_bbcode']) ? ((request_var('disable_bbcode', false)) ? false : true) : false;					$enable_smilies	= ($config['allow_sig_smilies']) ? ((request_var('disable_smilies', false)) ? false : true) : false;					$enable_urls	= ($config['allow_sig_links']) ? ((request_var('disable_magic_url', false)) ? false : true) : false;					$message_parser = new parse_message($signature);					// Allowing Quote BBCode					$message_parser->parse($enable_bbcode, $enable_urls, $enable_smilies, $config['allow_sig_img'], $config['allow_sig_flash'], true, $config['allow_sig_links'], true, 'sig');					if (sizeof($message_parser->warn_msg))					{						$error[] = implode('<br />', $message_parser->warn_msg);					}					if (!check_form_key($form_name))					{						$error = 'FORM_INVALID';					}					if (!sizeof($error) && $submit)					{						$this->optionset($user_row, 'sig_bbcode', $enable_bbcode);						$this->optionset($user_row, 'sig_smilies', $enable_smilies);						$this->optionset($user_row, 'sig_links', $enable_urls);						$sql_ary = array(							'user_sig'					=> (string) $message_parser->message,							'user_options'				=> $user_row['user_options'],							'user_sig_bbcode_uid'		=> (string) $message_parser->bbcode_uid,							'user_sig_bbcode_bitfield'	=> (string) $message_parser->bbcode_bitfield						);						$sql = 'UPDATE ' . USERS_TABLE . '							SET ' . $db->sql_build_array('UPDATE', $sql_ary) . '							WHERE user_id = ' . $user_id;						$db->sql_query($sql);						trigger_error($user->lang['USER_SIG_UPDATED'] . adm_back_link($this->u_action . '&amp;u=' . $user_id));					}					// Replace "error" strings with their real, localised form					$error = preg_replace('#^([A-Z_]+)$#e', "(!empty(\$user->lang['\\1'])) ? \$user->lang['\\1'] : '\\1'", $error);				}				$signature_preview = '';				if ($preview)				{					// Now parse it for displaying					$signature_preview = $message_parser->format_display($enable_bbcode, $enable_urls, $enable_smilies, false);					unset($message_parser);				}				decode_message($signature, $user_row['user_sig_bbcode_uid']);				$template->assign_vars(array(					'S_SIGNATURE'		=> true,					'SIGNATURE'			=> $signature,					'SIGNATURE_PREVIEW'	=> $signature_preview,					'S_BBCODE_CHECKED'		=> (!$enable_bbcode) ? ' checked="checked"' : '',					'S_SMILIES_CHECKED'		=> (!$enable_smilies) ? ' checked="checked"' : '',					'S_MAGIC_URL_CHECKED'	=> (!$enable_urls) ? ' checked="checked"' : '',					'BBCODE_STATUS'			=> ($config['allow_sig_bbcode']) ? sprintf($user->lang['BBCODE_IS_ON'], '<a href="' . append_sid("{$phpbb_root_path}faq.$phpEx", 'mode=bbcode') . '">', '</a>') : sprintf($user->lang['BBCODE_IS_OFF'], '<a href="' . append_sid("{$phpbb_root_path}faq.$phpEx", 'mode=bbcode') . '">', '</a>'),					'SMILIES_STATUS'		=> ($config['allow_sig_smilies']) ? $user->lang['SMILIES_ARE_ON'] : $user->lang['SMILIES_ARE_OFF'],					'IMG_STATUS'			=> ($config['allow_sig_img']) ? $user->lang['IMAGES_ARE_ON'] : $user->lang['IMAGES_ARE_OFF'],					'FLASH_STATUS'			=> ($config['allow_sig_flash']) ? $user->lang['FLASH_IS_ON'] : $user->lang['FLASH_IS_OFF'],					'URL_STATUS'			=> ($config['allow_sig_links']) ? $user->lang['URL_IS_ON'] : $user->lang['URL_IS_OFF'],					'L_SIGNATURE_EXPLAIN'	=> sprintf($user->lang['SIGNATURE_EXPLAIN'], $config['max_sig_chars']),					'S_BBCODE_ALLOWED'		=> $config['allow_sig_bbcode'],					'S_SMILIES_ALLOWED'		=> $config['allow_sig_smilies'],					'S_BBCODE_IMG'			=> ($config['allow_sig_img']) ? true : false,					'S_BBCODE_FLASH'		=> ($config['allow_sig_flash']) ? true : false,					'S_LINKS_ALLOWED'		=> ($config['allow_sig_links']) ? true : false)				);				// Assigning custom bbcodes				display_custom_bbcodes();			break;			case 'attach':				$start		= request_var('start', 0);				$deletemark = (isset($_POST['delmarked'])) ? true : false;				$marked		= request_var('mark', array(0));				// Sort keys				$sort_key	= request_var('sk', 'a');				$sort_dir	= request_var('sd', 'd');				if ($deletemark && sizeof($marked))				{					$sql = 'SELECT attach_id						FROM ' . ATTACHMENTS_TABLE . '						WHERE poster_id = ' . $user_id . '							AND is_orphan = 0							AND ' . $db->sql_in_set('attach_id', $marked);					$result = $db->sql_query($sql);					$marked = array();					while ($row = $db->sql_fetchrow($result))					{						$marked[] = $row['attach_id'];					}					$db->sql_freeresult($result);				}				if ($deletemark && sizeof($marked))				{					if (confirm_box(true))					{						$sql = 'SELECT real_filename							FROM ' . ATTACHMENTS_TABLE . '							WHERE ' . $db->sql_in_set('attach_id', $marked);						$result = $db->sql_query($sql);						$log_attachments = array();						while ($row = $db->sql_fetchrow($result))						{							$log_attachments[] = $row['real_filename'];						}						$db->sql_freeresult($result);						delete_attachments('attach', $marked);						$message = (sizeof($log_attachments) == 1) ? $user->lang['ATTACHMENT_DELETED'] : $user->lang['ATTACHMENTS_DELETED'];						add_log('admin', 'LOG_ATTACHMENTS_DELETED', implode(', ', $log_attachments));						trigger_error($message . adm_back_link($this->u_action . '&amp;u=' . $user_id));					}					else					{						confirm_box(false, $user->lang['CONFIRM_OPERATION'], build_hidden_fields(array(							'u'				=> $user_id,							'i'				=> $id,							'mode'			=> $mode,							'action'		=> $action,							'delmarked'		=> true,							'mark'			=> $marked))						);					}				}				$sk_text = array('a' => $user->lang['SORT_FILENAME'], 'c' => $user->lang['SORT_EXTENSION'], 'd' => $user->lang['SORT_SIZE'], 'e' => $user->lang['SORT_DOWNLOADS'], 'f' => $user->lang['SORT_POST_TIME'], 'g' => $user->lang['SORT_TOPIC_TITLE']);				$sk_sql = array('a' => 'a.real_filename', 'c' => 'a.extension', 'd' => 'a.filesize', 'e' => 'a.download_count', 'f' => 'a.filetime', 'g' => 't.topic_title');				$sd_text = array('a' => $user->lang['ASCENDING'], 'd' => $user->lang['DESCENDING']);				$s_sort_key = '';				foreach ($sk_text as $key => $value)				{					$selected = ($sort_key == $key) ? ' selected="selected"' : '';					$s_sort_key .= '<option value="' . $key . '"' . $selected . '>' . $value . '</option>';				}				$s_sort_dir = '';				foreach ($sd_text as $key => $value)				{					$selected = ($sort_dir == $key) ? ' selected="selected"' : '';					$s_sort_dir .= '<option value="' . $key . '"' . $selected . '>' . $value . '</option>';				}				if (!isset($sk_sql[$sort_key]))				{					$sort_key = 'a';				}				$order_by = $sk_sql[$sort_key] . ' ' . (($sort_dir == 'a') ? 'ASC' : 'DESC');				$sql = 'SELECT COUNT(attach_id) as num_attachments					FROM ' . ATTACHMENTS_TABLE . "					WHERE poster_id = $user_id						AND is_orphan = 0";				$result = $db->sql_query_limit($sql, 1);				$num_attachments = (int) $db->sql_fetchfield('num_attachments');				$db->sql_freeresult($result);				$sql = 'SELECT a.*, t.topic_title, p.message_subject as message_title					FROM ' . ATTACHMENTS_TABLE . ' a						LEFT JOIN ' . TOPICS_TABLE . ' t ON (a.topic_id = t.topic_id							AND a.in_message = 0)						LEFT JOIN ' . PRIVMSGS_TABLE . ' p ON (a.post_msg_id = p.msg_id							AND a.in_message = 1)					WHERE a.poster_id = ' . $user_id . "						AND a.is_orphan = 0					ORDER BY $order_by";				$result = $db->sql_query_limit($sql, $config['posts_per_page'], $start);				while ($row = $db->sql_fetchrow($result))				{					if ($row['in_message'])					{						$view_topic = append_sid("{$phpbb_root_path}ucp.$phpEx", "i=pm&amp;p={$row['post_msg_id']}");					}					else					{						$view_topic = append_sid("{$phpbb_root_path}viewtopic.$phpEx", "t={$row['topic_id']}&amp;p={$row['post_msg_id']}") . '#p' . $row['post_msg_id'];					}					$template->assign_block_vars('attach', array(						'REAL_FILENAME'		=> $row['real_filename'],						'COMMENT'			=> nl2br($row['attach_comment']),						'EXTENSION'			=> $row['extension'],						'SIZE'				=> get_formatted_filesize($row['filesize']),						'DOWNLOAD_COUNT'	=> $row['download_count'],						'POST_TIME'			=> $user->format_date($row['filetime']),						'TOPIC_TITLE'		=> ($row['in_message']) ? $row['message_title'] : $row['topic_title'],						'ATTACH_ID'			=> $row['attach_id'],						'POST_ID'			=> $row['post_msg_id'],						'TOPIC_ID'			=> $row['topic_id'],						'S_IN_MESSAGE'		=> $row['in_message'],						'U_DOWNLOAD'		=> append_sid("{$phpbb_root_path}download/file.$phpEx", 'mode=view&amp;id=' . $row['attach_id']),						'U_VIEW_TOPIC'		=> $view_topic)					);				}				$db->sql_freeresult($result);				$template->assign_vars(array(					'S_ATTACHMENTS'		=> true,					'S_ON_PAGE'			=> on_page($num_attachments, $config['topics_per_page'], $start),					'S_SORT_KEY'		=> $s_sort_key,					'S_SORT_DIR'		=> $s_sort_dir,					'PAGINATION'		=> generate_pagination($this->u_action . "&amp;u=$user_id&amp;sk=$sort_key&amp;sd=$sort_dir", $num_attachments, $config['topics_per_page'], $start, true))				);			break;			case 'groups':				include($phpbb_root_path . 'includes/functions_user.' . $phpEx);				$user->add_lang(array('groups', 'acp/groups'));				$group_id = request_var('g', 0);				if ($group_id)				{					// Check the founder only entry for this group to make sure everything is well					$sql = 'SELECT group_founder_manage						FROM ' . GROUPS_TABLE . '						WHERE group_id = ' . $group_id;					$result = $db->sql_query($sql);					$founder_manage = (int) $db->sql_fetchfield('group_founder_manage');					$db->sql_freeresult($result);					if ($user->data['user_type'] != USER_FOUNDER && $founder_manage)					{						trigger_error($user->lang['NOT_ALLOWED_MANAGE_GROUP'] . adm_back_link($this->u_action . '&amp;u=' . $user_id), E_USER_WARNING);					}				}				else				{					$founder_manage = 0;				}				switch ($action)				{					case 'demote':					case 'promote':					case 'default':						if (!$group_id)						{							trigger_error($user->lang['NO_GROUP'] . adm_back_link($this->u_action . '&amp;u=' . $user_id), E_USER_WARNING);						}						group_user_attributes($action, $group_id, $user_id);						if ($action == 'default')						{							$user_row['group_id'] = $group_id;						}					break;					case 'delete':						if (confirm_box(true))						{							if (!$group_id)							{								trigger_error($user->lang['NO_GROUP'] . adm_back_link($this->u_action . '&amp;u=' . $user_id), E_USER_WARNING);							}							if ($error = group_user_del($group_id, $user_id))							{								trigger_error($user->lang[$error] . adm_back_link($this->u_action . '&amp;u=' . $user_id), E_USER_WARNING);							}							$error = array();							// The delete action was successful - therefore update the user row...							$sql = 'SELECT u.*, s.*								FROM ' . USERS_TABLE . ' u									LEFT JOIN ' . SESSIONS_TABLE . ' s ON (s.session_user_id = u.user_id)								WHERE u.user_id = ' . $user_id . '								ORDER BY s.session_time DESC';							$result = $db->sql_query_limit($sql, 1);							$user_row = $db->sql_fetchrow($result);							$db->sql_freeresult($result);						}						else						{							confirm_box(false, $user->lang['CONFIRM_OPERATION'], build_hidden_fields(array(								'u'				=> $user_id,								'i'				=> $id,								'mode'			=> $mode,								'action'		=> $action,								'g'				=> $group_id))							);						}					break;					case 'approve':						if (confirm_box(true))						{							if (!$group_id)							{								trigger_error($user->lang['NO_GROUP'] . adm_back_link($this->u_action . '&amp;u=' . $user_id), E_USER_WARNING);							}							group_user_attributes($action, $group_id, $user_id);						}						else						{							confirm_box(false, $user->lang['CONFIRM_OPERATION'], build_hidden_fields(array(								'u'				=> $user_id,								'i'				=> $id,								'mode'			=> $mode,								'action'		=> $action,								'g'				=> $group_id))							);						}					break;				}				// Add user to group?				if ($submit)				{					if (!check_form_key($form_name))					{						trigger_error($user->lang['FORM_INVALID'] . adm_back_link($this->u_action . '&amp;u=' . $user_id), E_USER_WARNING);					}					if (!$group_id)					{						trigger_error($user->lang['NO_GROUP'] . adm_back_link($this->u_action . '&amp;u=' . $user_id), E_USER_WARNING);					}					// Add user/s to group					if ($error = group_user_add($group_id, $user_id))					{						trigger_error($user->lang[$error] . adm_back_link($this->u_action . '&amp;u=' . $user_id), E_USER_WARNING);					}					$error = array();				}				$sql = 'SELECT ug.*, g.*					FROM ' . GROUPS_TABLE . ' g, ' . USER_GROUP_TABLE . " ug					WHERE ug.user_id = $user_id						AND g.group_id = ug.group_id					ORDER BY g.group_type DESC, ug.user_pending ASC, g.group_name";				$result = $db->sql_query($sql);				$i = 0;				$group_data = $id_ary = array();				while ($row = $db->sql_fetchrow($result))				{					$type = ($row['group_type'] == GROUP_SPECIAL) ? 'special' : (($row['user_pending']) ? 'pending' : 'normal');					$group_data[$type][$i]['group_id']		= $row['group_id'];					$group_data[$type][$i]['group_name']	= $row['group_name'];					$group_data[$type][$i]['group_leader']	= ($row['group_leader']) ? 1 : 0;					$id_ary[] = $row['group_id'];					$i++;				}				$db->sql_freeresult($result);				// Select box for other groups				$sql = 'SELECT group_id, group_name, group_type, group_founder_manage					FROM ' . GROUPS_TABLE . '					' . ((sizeof($id_ary)) ? 'WHERE ' . $db->sql_in_set('group_id', $id_ary, true) : '') . '					ORDER BY group_type DESC, group_name ASC';				$result = $db->sql_query($sql);				$s_group_options = '';				while ($row = $db->sql_fetchrow($result))				{					if (!$config['coppa_enable'] && $row['group_name'] == 'REGISTERED_COPPA')					{						continue;					}					// Do not display those groups not allowed to be managed					if ($user->data['user_type'] != USER_FOUNDER && $row['group_founder_manage'])					{						continue;					}					$s_group_options .= '<option' . (($row['group_type'] == GROUP_SPECIAL) ? ' class="sep"' : '') . ' value="' . $row['group_id'] . '">' . (($row['group_type'] == GROUP_SPECIAL) ? $user->lang['G_' . $row['group_name']] : $row['group_name']) . '</option>';				}				$db->sql_freeresult($result);				$current_type = '';				foreach ($group_data as $group_type => $data_ary)				{					if ($current_type != $group_type)					{						$template->assign_block_vars('group', array(							'S_NEW_GROUP_TYPE'		=> true,							'GROUP_TYPE'			=> $user->lang['USER_GROUP_' . strtoupper($group_type)])						);					}					foreach ($data_ary as $data)					{						$template->assign_block_vars('group', array(							'U_EDIT_GROUP'		=> append_sid("{$phpbb_admin_path}index.$phpEx", "i=groups&amp;mode=manage&amp;action=edit&amp;u=$user_id&amp;g={$data['group_id']}&amp;back_link=acp_users_groups"),							'U_DEFAULT'			=> $this->u_action . "&amp;action=default&amp;u=$user_id&amp;g=" . $data['group_id'],							'U_DEMOTE_PROMOTE'	=> $this->u_action . '&amp;action=' . (($data['group_leader']) ? 'demote' : 'promote') . "&amp;u=$user_id&amp;g=" . $data['group_id'],							'U_DELETE'			=> $this->u_action . "&amp;action=delete&amp;u=$user_id&amp;g=" . $data['group_id'],							'U_APPROVE'			=> ($group_type == 'pending') ? $this->u_action . "&amp;action=approve&amp;u=$user_id&amp;g=" . $data['group_id'] : '',							'GROUP_NAME'		=> ($group_type == 'special') ? $user->lang['G_' . $data['group_name']] : $data['group_name'],							'L_DEMOTE_PROMOTE'	=> ($data['group_leader']) ? $user->lang['GROUP_DEMOTE'] : $user->lang['GROUP_PROMOTE'],							'S_IS_MEMBER'		=> ($group_type != 'pending') ? true : false,							'S_NO_DEFAULT'		=> ($user_row['group_id'] != $data['group_id']) ? true : false,							'S_SPECIAL_GROUP'	=> ($group_type == 'special') ? true : false,							)						);					}				}				$template->assign_vars(array(					'S_GROUPS'			=> true,					'S_GROUP_OPTIONS'	=> $s_group_options)				);			break;			case 'perm':				include_once($phpbb_root_path . 'includes/acp/auth.' . $phpEx);				$auth_admin = new auth_admin();				$user->add_lang('acp/permissions');				add_permission_language();				$forum_id = request_var('f', 0);				// Global Permissions				if (!$forum_id)				{					// Select auth options					$sql = 'SELECT auth_option, is_local, is_global						FROM ' . ACL_OPTIONS_TABLE . '						WHERE auth_option ' . $db->sql_like_expression($db->any_char . '_') . '							AND is_global = 1						ORDER BY auth_option';					$result = $db->sql_query($sql);					$hold_ary = array();					while ($row = $db->sql_fetchrow($result))					{						$hold_ary = $auth_admin->get_mask('view', $user_id, false, false, $row['auth_option'], 'global', ACL_NEVER);						$auth_admin->display_mask('view', $row['auth_option'], $hold_ary, 'user', false, false);					}					$db->sql_freeresult($result);					unset($hold_ary);				}				else				{					$sql = 'SELECT auth_option, is_local, is_global						FROM ' . ACL_OPTIONS_TABLE . "						WHERE auth_option " . $db->sql_like_expression($db->any_char . '_') . "							AND is_local = 1						ORDER BY is_global DESC, auth_option";					$result = $db->sql_query($sql);					while ($row = $db->sql_fetchrow($result))					{						$hold_ary = $auth_admin->get_mask('view', $user_id, false, $forum_id, $row['auth_option'], 'local', ACL_NEVER);						$auth_admin->display_mask('view', $row['auth_option'], $hold_ary, 'user', true, false);					}					$db->sql_freeresult($result);				}				$s_forum_options = '<option value="0"' . ((!$forum_id) ? ' selected="selected"' : '') . '>' . $user->lang['VIEW_GLOBAL_PERMS'] . '</option>';				$s_forum_options .= make_forum_select($forum_id, false, true, false, false, false);				$template->assign_vars(array(					'S_PERMISSIONS'				=> true,					'S_GLOBAL'					=> (!$forum_id) ? true : false,					'S_FORUM_OPTIONS'			=> $s_forum_options,					'U_ACTION'					=> $this->u_action . '&amp;u=' . $user_id,					'U_USER_PERMISSIONS'		=> append_sid("{$phpbb_admin_path}index.$phpEx" ,'i=permissions&amp;mode=setting_user_global&amp;user_id[]=' . $user_id),					'U_USER_FORUM_PERMISSIONS'	=> append_sid("{$phpbb_admin_path}index.$phpEx", 'i=permissions&amp;mode=setting_user_local&amp;user_id[]=' . $user_id))				);			break;		}		// Assign general variables		$template->assign_vars(array(			'S_ERROR'			=> (sizeof($error)) ? true : false,			'ERROR_MSG'			=> (sizeof($error)) ? implode('<br />', $error) : '')		);	}	/**	* Optionset replacement for this module based on $user->optionset	*/	function optionset(&$user_row, $key, $value, $data = false)	{		global $user;		$var = ($data) ? $data : $user_row['user_options'];		if ($value && !($var & 1 << $user->keyoptions[$key]))		{			$var += 1 << $user->keyoptions[$key];		}		else if (!$value && ($var & 1 << $user->keyoptions[$key]))		{			$var -= 1 << $user->keyoptions[$key];		}		else		{			return ($data) ? $var : false;		}		if (!$data)		{			$user_row['user_options'] = $var;			return true;		}		else		{			return $var;		}	}	/**	* Optionget replacement for this module based on $user->optionget	*/	function optionget(&$user_row, $key, $data = false)	{		global $user;		$var = ($data) ? $data : $user_row['user_options'];		return ($var & 1 << $user->keyoptions[$key]) ? true : false;	}}?>
<?php/**** @package phpBB3* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @ignore*/if (!defined('IN_PHPBB')){	exit;}// Common global functions/*** set_var** Set variable, used by {@link request_var the request_var function}** @access private*/function set_var(&$result, $var, $type, $multibyte = false){	settype($var, $type);	$result = $var;	if ($type == 'string')	{		$result = trim(htmlspecialchars(str_replace(array("\r\n", "\r", "\0"), array("\n", "\n", ''), $result), ENT_COMPAT, 'UTF-8'));		if (!empty($result))		{			// Make sure multibyte characters are wellformed			if ($multibyte)			{				if (!preg_match('/^./u', $result))				{					$result = '';				}			}			else			{				// no multibyte, allow only ASCII (0-127)				$result = preg_replace('/[\x80-\xFF]/', '?', $result);			}		}		$result = (STRIP) ? stripslashes($result) : $result;	}}/*** request_var** Used to get passed variable*/function request_var($var_name, $default, $multibyte = false, $cookie = false){	if (!$cookie && isset($_COOKIE[$var_name]))	{		if (!isset($_GET[$var_name]) && !isset($_POST[$var_name]))		{			return (is_array($default)) ? array() : $default;		}		$_REQUEST[$var_name] = isset($_POST[$var_name]) ? $_POST[$var_name] : $_GET[$var_name];	}	$super_global = ($cookie) ? '_COOKIE' : '_REQUEST';	if (!isset($GLOBALS[$super_global][$var_name]) || is_array($GLOBALS[$super_global][$var_name]) != is_array($default))	{		return (is_array($default)) ? array() : $default;	}	$var = $GLOBALS[$super_global][$var_name];	if (!is_array($default))	{		$type = gettype($default);	}	else	{		list($key_type, $type) = each($default);		$type = gettype($type);		$key_type = gettype($key_type);		if ($type == 'array')		{			reset($default);			$default = current($default);			list($sub_key_type, $sub_type) = each($default);			$sub_type = gettype($sub_type);			$sub_type = ($sub_type == 'array') ? 'NULL' : $sub_type;			$sub_key_type = gettype($sub_key_type);		}	}	if (is_array($var))	{		$_var = $var;		$var = array();		foreach ($_var as $k => $v)		{			set_var($k, $k, $key_type);			if ($type == 'array' && is_array($v))			{				foreach ($v as $_k => $_v)				{					if (is_array($_v))					{						$_v = null;					}					set_var($_k, $_k, $sub_key_type, $multibyte);					set_var($var[$k][$_k], $_v, $sub_type, $multibyte);				}			}			else			{				if ($type == 'array' || is_array($v))				{					$v = null;				}				set_var($var[$k], $v, $type, $multibyte);			}		}	}	else	{		set_var($var, $var, $type, $multibyte);	}	return $var;}/*** Set config value. Creates missing config entry.*/function set_config($config_name, $config_value, $is_dynamic = false){	global $db, $cache, $config;	$sql = 'UPDATE ' . CONFIG_TABLE . "		SET config_value = '" . $db->sql_escape($config_value) . "'		WHERE config_name = '" . $db->sql_escape($config_name) . "'";	$db->sql_query($sql);	if (!$db->sql_affectedrows() && !isset($config[$config_name]))	{		$sql = 'INSERT INTO ' . CONFIG_TABLE . ' ' . $db->sql_build_array('INSERT', array(			'config_name'	=> $config_name,			'config_value'	=> $config_value,			'is_dynamic'	=> ($is_dynamic) ? 1 : 0));		$db->sql_query($sql);	}	$config[$config_name] = $config_value;	if (!$is_dynamic)	{		$cache->destroy('config');	}}/*** Set dynamic config value with arithmetic operation.*/function set_config_count($config_name, $increment, $is_dynamic = false){	global $db, $cache;	switch ($db->sql_layer)	{		case 'firebird':			// Precision must be from 1 to 18			$sql_update = 'CAST(CAST(config_value as DECIMAL(18, 0)) + ' . (int) $increment . ' as VARCHAR(255))';		break;		case 'postgres':			// Need to cast to text first for PostgreSQL 7.x			$sql_update = 'CAST(CAST(config_value::text as DECIMAL(255, 0)) + ' . (int) $increment . ' as VARCHAR(255))';		break;		// MySQL, SQlite, mssql, mssql_odbc, oracle		default:			$sql_update = 'config_value + ' . (int) $increment;		break;	}	$db->sql_query('UPDATE ' . CONFIG_TABLE . ' SET config_value = ' . $sql_update . " WHERE config_name = '" . $db->sql_escape($config_name) . "'");	if (!$is_dynamic)	{		$cache->destroy('config');	}}/*** Generates an alphanumeric random string of given length** @return string*/function gen_rand_string($num_chars = 8){	// [a, z] + [0, 9] = 36	return substr(strtoupper(base_convert(unique_id(), 16, 36)), 0, $num_chars);}/*** Generates a user-friendly alphanumeric random string of given length* We remove 0 and O so users cannot confuse those in passwords etc.** @return string*/function gen_rand_string_friendly($num_chars = 8){	$rand_str = unique_id();	// Remove Z and Y from the base_convert(), replace 0 with Z and O with Y	// [a, z] + [0, 9] - {z, y} = [a, z] + [0, 9] - {0, o} = 34	$rand_str = str_replace(array('0', 'O'), array('Z', 'Y'), strtoupper(base_convert($rand_str, 16, 34)));	return substr($rand_str, 0, $num_chars);}/*** Return unique id* @param string $extra additional entropy*/function unique_id($extra = 'c'){	static $dss_seeded = false;	global $config;	$val = $config['rand_seed'] . microtime();	$val = md5($val);	$config['rand_seed'] = md5($config['rand_seed'] . $val . $extra);	if ($dss_seeded !== true && ($config['rand_seed_last_update'] < time() - rand(1,10)))	{		set_config('rand_seed_last_update', time(), true);		set_config('rand_seed', $config['rand_seed'], true);		$dss_seeded = true;	}	return substr($val, 4, 16);}/*** Wrapper for mt_rand() which allows swapping $min and $max parameters.** PHP does not allow us to swap the order of the arguments for mt_rand() anymore.* (since PHP 5.3.4, see http://bugs.php.net/46587)** @param int $min		Lowest value to be returned* @param int $max		Highest value to be returned** @return int			Random integer between $min and $max (or $max and $min)*/function phpbb_mt_rand($min, $max){	return ($min > $max) ? mt_rand($max, $min) : mt_rand($min, $max);}/*** Wrapper for getdate() which returns the equivalent array for UTC timestamps.** @param int $time		Unix timestamp (optional)** @return array			Returns an associative array of information related to the timestamp.*						See http://www.php.net/manual/en/function.getdate.php*/function phpbb_gmgetdate($time = false){	if ($time === false)	{		$time = time();	}	// getdate() interprets timestamps in local time.	// What follows uses the fact that getdate() and	// date('Z') balance each other out.	return getdate($time - date('Z'));}/*** Return formatted string for filesizes** @param int	$value			filesize in bytes* @param bool	$string_only	true if language string should be returned* @param array	$allowed_units	only allow these units (data array indexes)** @return mixed					data array if $string_only is false* @author bantu*/function get_formatted_filesize($value, $string_only = true, $allowed_units = false){	global $user;	$available_units = array(		'gb' => array(			'min' 		=> 1073741824, // pow(2, 30)			'index'		=> 3,			'si_unit'	=> 'GB',			'iec_unit'	=> 'GIB',		),		'mb' => array(			'min'		=> 1048576, // pow(2, 20)			'index'		=> 2,			'si_unit'	=> 'MB',			'iec_unit'	=> 'MIB',		),		'kb' => array(			'min'		=> 1024, // pow(2, 10)			'index'		=> 1,			'si_unit'	=> 'KB',			'iec_unit'	=> 'KIB',		),		'b' => array(			'min'		=> 0,			'index'		=> 0,			'si_unit'	=> 'BYTES', // Language index			'iec_unit'	=> 'BYTES',  // Language index		),	);	foreach ($available_units as $si_identifier => $unit_info)	{		if (!empty($allowed_units) && $si_identifier != 'b' && !in_array($si_identifier, $allowed_units))		{			continue;		}		if ($value >= $unit_info['min'])		{			$unit_info['si_identifier'] = $si_identifier;			break;		}	}	unset($available_units);	for ($i = 0; $i < $unit_info['index']; $i++)	{		$value /= 1024;	}	$value = round($value, 2);	// Lookup units in language dictionary	$unit_info['si_unit'] = (isset($user->lang[$unit_info['si_unit']])) ? $user->lang[$unit_info['si_unit']] : $unit_info['si_unit'];	$unit_info['iec_unit'] = (isset($user->lang[$unit_info['iec_unit']])) ? $user->lang[$unit_info['iec_unit']] : $unit_info['iec_unit'];	// Default to IEC	$unit_info['unit'] = $unit_info['iec_unit'];	if (!$string_only)	{		$unit_info['value'] = $value;		return $unit_info;	}	return $value  . ' ' . $unit_info['unit'];}/*** Determine whether we are approaching the maximum execution time. Should be called once* at the beginning of the script in which it's used.* @return	bool	Either true if the maximum execution time is nearly reached, or false*					if some time is still left.*/function still_on_time($extra_time = 15){	static $max_execution_time, $start_time;	$time = explode(' ', microtime());	$current_time = $time[0] + $time[1];	if (empty($max_execution_time))	{		$max_execution_time = (function_exists('ini_get')) ? (int) @ini_get('max_execution_time') : (int) @get_cfg_var('max_execution_time');		// If zero, then set to something higher to not let the user catch the ten seconds barrier.		if ($max_execution_time === 0)		{			$max_execution_time = 50 + $extra_time;		}		$max_execution_time = min(max(10, ($max_execution_time - $extra_time)), 50);		// For debugging purposes		// $max_execution_time = 10;		global $starttime;		$start_time = (empty($starttime)) ? $current_time : $starttime;	}	return (ceil($current_time - $start_time) < $max_execution_time) ? true : false;}/**** @version Version 0.1 / slightly modified for phpBB 3.0.x (using $H$ as hash type identifier)** Portable PHP password hashing framework.** Written by Solar Designer <solar at openwall.com> in 2004-2006 and placed in* the public domain.** There's absolutely no warranty.** The homepage URL for this framework is:**	http://www.openwall.com/phpass/** Please be sure to update the Version line if you edit this file in any way.* It is suggested that you leave the main version number intact, but indicate* your project name (after the slash) and add your own revision information.** Please do not change the "private" password hashing method implemented in* here, thereby making your hashes incompatible.  However, if you must, please* change the hash type identifier (the "$P$") to something different.** Obviously, since this code is in the public domain, the above are not* requirements (there can be none), but merely suggestions.*** Hash the password*/function phpbb_hash($password){	$itoa64 = './0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz';	$random_state = unique_id();	$random = '';	$count = 6;	if (($fh = @fopen('/dev/urandom', 'rb')))	{		$random = fread($fh, $count);		fclose($fh);	}	if (strlen($random) < $count)	{		$random = '';		for ($i = 0; $i < $count; $i += 16)		{			$random_state = md5(unique_id() . $random_state);			$random .= pack('H*', md5($random_state));		}		$random = substr($random, 0, $count);	}	$hash = _hash_crypt_private($password, _hash_gensalt_private($random, $itoa64), $itoa64);	if (strlen($hash) == 34)	{		return $hash;	}	return md5($password);}/*** Check for correct password** @param string $password The password in plain text* @param string $hash The stored password hash** @return bool Returns true if the password is correct, false if not.*/function phpbb_check_hash($password, $hash){	$itoa64 = './0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz';	if (strlen($hash) == 34)	{		return (_hash_crypt_private($password, $hash, $itoa64) === $hash) ? true : false;	}	return (md5($password) === $hash) ? true : false;}/*** Generate salt for hash generation*/function _hash_gensalt_private($input, &$itoa64, $iteration_count_log2 = 6){	if ($iteration_count_log2 < 4 || $iteration_count_log2 > 31)	{		$iteration_count_log2 = 8;	}	$output = '$H$';	$output .= $itoa64[min($iteration_count_log2 + ((PHP_VERSION >= 5) ? 5 : 3), 30)];	$output .= _hash_encode64($input, 6, $itoa64);	return $output;}/*** Encode hash*/function _hash_encode64($input, $count, &$itoa64){	$output = '';	$i = 0;	do	{		$value = ord($input[$i++]);		$output .= $itoa64[$value & 0x3f];		if ($i < $count)		{			$value |= ord($input[$i]) << 8;		}		$output .= $itoa64[($value >> 6) & 0x3f];		if ($i++ >= $count)		{			break;		}		if ($i < $count)		{			$value |= ord($input[$i]) << 16;		}		$output .= $itoa64[($value >> 12) & 0x3f];		if ($i++ >= $count)		{			break;		}		$output .= $itoa64[($value >> 18) & 0x3f];	}	while ($i < $count);	return $output;}/*** The crypt function/replacement*/function _hash_crypt_private($password, $setting, &$itoa64){	$output = '*';	// Check for correct hash	if (substr($setting, 0, 3) != '$H$' && substr($setting, 0, 3) != '$P$')	{		return $output;	}	$count_log2 = strpos($itoa64, $setting[3]);	if ($count_log2 < 7 || $count_log2 > 30)	{		return $output;	}	$count = 1 << $count_log2;	$salt = substr($setting, 4, 8);	if (strlen($salt) != 8)	{		return $output;	}	/**	* We're kind of forced to use MD5 here since it's the only	* cryptographic primitive available in all versions of PHP	* currently in use.  To implement our own low-level crypto	* in PHP would result in much worse performance and	* consequently in lower iteration counts and hashes that are	* quicker to crack (by non-PHP code).	*/	if (PHP_VERSION >= 5)	{		$hash = md5($salt . $password, true);		do		{			$hash = md5($hash . $password, true);		}		while (--$count);	}	else	{		$hash = pack('H*', md5($salt . $password));		do		{			$hash = pack('H*', md5($hash . $password));		}		while (--$count);	}	$output = substr($setting, 0, 12);	$output .= _hash_encode64($hash, 16, $itoa64);	return $output;}/*** Hashes an email address to a big integer** @param string $email		Email address** @return string			Unsigned Big Integer*/function phpbb_email_hash($email){	return sprintf('%u', crc32(strtolower($email))) . strlen($email);}/*** Wrapper for version_compare() that allows using uppercase A and B* for alpha and beta releases.** See http://www.php.net/manual/en/function.version-compare.php** @param string $version1		First version number* @param string $version2		Second version number* @param string $operator		Comparison operator (optional)** @return mixed					Boolean (true, false) if comparison operator is specified.*								Integer (-1, 0, 1) otherwise.*/function phpbb_version_compare($version1, $version2, $operator = null){	$version1 = strtolower($version1);	$version2 = strtolower($version2);	if (is_null($operator))	{		return version_compare($version1, $version2);	}	else	{		return version_compare($version1, $version2, $operator);	}}/*** Global function for chmodding directories and files for internal use** This function determines owner and group whom the file belongs to and user and group of PHP and then set safest possible file permissions.* The function determines owner and group from common.php file and sets the same to the provided file.* The function uses bit fields to build the permissions.* The function sets the appropiate execute bit on directories.** Supported constants representing bit fields are:** CHMOD_ALL - all permissions (7)* CHMOD_READ - read permission (4)* CHMOD_WRITE - write permission (2)* CHMOD_EXECUTE - execute permission (1)** NOTE: The function uses POSIX extension and fileowner()/filegroup() functions. If any of them is disabled, this function tries to build proper permissions, by calling is_readable() and is_writable() functions.** @param string	$filename	The file/directory to be chmodded* @param int	$perms		Permissions to set** @return bool	true on success, otherwise false* @author faw, phpBB Group*/function phpbb_chmod($filename, $perms = CHMOD_READ){	static $_chmod_info;	// Return if the file no longer exists.	if (!file_exists($filename))	{		return false;	}	// Determine some common vars	if (empty($_chmod_info))	{		if (!function_exists('fileowner') || !function_exists('filegroup'))		{			// No need to further determine owner/group - it is unknown			$_chmod_info['process'] = false;		}		else		{			global $phpbb_root_path, $phpEx;			// Determine owner/group of common.php file and the filename we want to change here			$common_php_owner = @fileowner($phpbb_root_path . 'common.' . $phpEx);			$common_php_group = @filegroup($phpbb_root_path . 'common.' . $phpEx);			// And the owner and the groups PHP is running under.			$php_uid = (function_exists('posix_getuid')) ? @posix_getuid() : false;			$php_gids = (function_exists('posix_getgroups')) ? @posix_getgroups() : false;			// If we are unable to get owner/group, then do not try to set them by guessing			if (!$php_uid || empty($php_gids) || !$common_php_owner || !$common_php_group)			{				$_chmod_info['process'] = false;			}			else			{				$_chmod_info = array(					'process'		=> true,					'common_owner'	=> $common_php_owner,					'common_group'	=> $common_php_group,					'php_uid'		=> $php_uid,					'php_gids'		=> $php_gids,				);			}		}	}	if ($_chmod_info['process'])	{		$file_uid = @fileowner($filename);		$file_gid = @filegroup($filename);		// Change owner		if (@chown($filename, $_chmod_info['common_owner']))		{			clearstatcache();			$file_uid = @fileowner($filename);		}		// Change group		if (@chgrp($filename, $_chmod_info['common_group']))		{			clearstatcache();			$file_gid = @filegroup($filename);		}		// If the file_uid/gid now match the one from common.php we can process further, else we are not able to change something		if ($file_uid != $_chmod_info['common_owner'] || $file_gid != $_chmod_info['common_group'])		{			$_chmod_info['process'] = false;		}	}	// Still able to process?	if ($_chmod_info['process'])	{		if ($file_uid == $_chmod_info['php_uid'])		{			$php = 'owner';		}		else if (in_array($file_gid, $_chmod_info['php_gids']))		{			$php = 'group';		}		else		{			// Since we are setting the everyone bit anyway, no need to do expensive operations			$_chmod_info['process'] = false;		}	}	// We are not able to determine or change something	if (!$_chmod_info['process'])	{		$php = 'other';	}	// Owner always has read/write permission	$owner = CHMOD_READ | CHMOD_WRITE;	if (is_dir($filename))	{		$owner |= CHMOD_EXECUTE;		// Only add execute bit to the permission if the dir needs to be readable		if ($perms & CHMOD_READ)		{			$perms |= CHMOD_EXECUTE;		}	}	switch ($php)	{		case 'owner':			$result = @chmod($filename, ($owner << 6) + (0 << 3) + (0 << 0));			clearstatcache();			if (is_readable($filename) && phpbb_is_writable($filename))			{				break;			}		case 'group':			$result = @chmod($filename, ($owner << 6) + ($perms << 3) + (0 << 0));			clearstatcache();			if ((!($perms & CHMOD_READ) || is_readable($filename)) && (!($perms & CHMOD_WRITE) || phpbb_is_writable($filename)))			{				break;			}		case 'other':			$result = @chmod($filename, ($owner << 6) + ($perms << 3) + ($perms << 0));			clearstatcache();			if ((!($perms & CHMOD_READ) || is_readable($filename)) && (!($perms & CHMOD_WRITE) || phpbb_is_writable($filename)))			{				break;			}		default:			return false;		break;	}	return $result;}/*** Test if a file/directory is writable** This function calls the native is_writable() when not running under* Windows and it is not disabled.** @param string $file Path to perform write test on* @return bool True when the path is writable, otherwise false.*/function phpbb_is_writable($file){	if (strtolower(substr(PHP_OS, 0, 3)) === 'win' || !function_exists('is_writable'))	{		if (file_exists($file))		{			// Canonicalise path to absolute path			$file = phpbb_realpath($file);			if (is_dir($file))			{				// Test directory by creating a file inside the directory				$result = @tempnam($file, 'i_w');				if (is_string($result) && file_exists($result))				{					unlink($result);					// Ensure the file is actually in the directory (returned realpathed)					return (strpos($result, $file) === 0) ? true : false;				}			}			else			{				$handle = @fopen($file, 'r+');				if (is_resource($handle))				{					fclose($handle);					return true;				}			}		}		else		{			// file does not exist test if we can write to the directory			$dir = dirname($file);			if (file_exists($dir) && is_dir($dir) && phpbb_is_writable($dir))			{				return true;			}		}		return false;	}	else	{		return is_writable($file);	}}// Compatibility functionsif (!function_exists('array_combine')){	/**	* A wrapper for the PHP5 function array_combine()	* @param array $keys contains keys for the resulting array	* @param array $values contains values for the resulting array	*	* @return Returns an array by using the values from the keys array as keys and the	* 	values from the values array as the corresponding values. Returns false if the	* 	number of elements for each array isn't equal or if the arrays are empty.	*/	function array_combine($keys, $values)	{		$keys = array_values($keys);		$values = array_values($values);		$n = sizeof($keys);		$m = sizeof($values);		if (!$n || !$m || ($n != $m))		{			return false;		}		$combined = array();		for ($i = 0; $i < $n; $i++)		{			$combined[$keys[$i]] = $values[$i];		}		return $combined;	}}if (!function_exists('str_split')){	/**	* A wrapper for the PHP5 function str_split()	* @param array $string contains the string to be converted	* @param array $split_length contains the length of each chunk	*	* @return  Converts a string to an array. If the optional split_length parameter is specified,	*  	the returned array will be broken down into chunks with each being split_length in length,	*  	otherwise each chunk will be one character in length. FALSE is returned if split_length is	*  	less than 1. If the split_length length exceeds the length of string, the entire string is	*  	returned as the first (and only) array element.	*/	function str_split($string, $split_length = 1)	{		if ($split_length < 1)		{			return false;		}		else if ($split_length >= strlen($string))		{			return array($string);		}		else		{			preg_match_all('#.{1,' . $split_length . '}#s', $string, $matches);			return $matches[0];		}	}}if (!function_exists('stripos')){	/**	* A wrapper for the PHP5 function stripos	* Find position of first occurrence of a case-insensitive string	*	* @param string $haystack is the string to search in	* @param string $needle is the string to search for	*	* @return mixed Returns the numeric position of the first occurrence of needle in the haystack string. Unlike strpos(), stripos() is case-insensitive.	* Note that the needle may be a string of one or more characters.	* If needle is not found, stripos() will return boolean FALSE.	*/	function stripos($haystack, $needle)	{		if (preg_match('#' . preg_quote($needle, '#') . '#i', $haystack, $m))		{			return strpos($haystack, $m[0]);		}		return false;	}}/*** Checks if a path ($path) is absolute or relative** @param string $path Path to check absoluteness of* @return boolean*/function is_absolute($path){	return ($path[0] == '/' || (DIRECTORY_SEPARATOR == '\\' && preg_match('#^[a-z]:[/\\\]#i', $path))) ? true : false;}/*** @author Chris Smith <chris@project-minerva.org>* @copyright 2006 Project Minerva Team* @param string $path The path which we should attempt to resolve.* @return mixed*/function phpbb_own_realpath($path){	// Now to perform funky shizzle	// Switch to use UNIX slashes	$path = str_replace(DIRECTORY_SEPARATOR, '/', $path);	$path_prefix = '';	// Determine what sort of path we have	if (is_absolute($path))	{		$absolute = true;		if ($path[0] == '/')		{			// Absolute path, *NIX style			$path_prefix = '';		}		else		{			// Absolute path, Windows style			// Remove the drive letter and colon			$path_prefix = $path[0] . ':';			$path = substr($path, 2);		}	}	else	{		// Relative Path		// Prepend the current working directory		if (function_exists('getcwd'))		{			// This is the best method, hopefully it is enabled!			$path = str_replace(DIRECTORY_SEPARATOR, '/', getcwd()) . '/' . $path;			$absolute = true;			if (preg_match('#^[a-z]:#i', $path))			{				$path_prefix = $path[0] . ':';				$path = substr($path, 2);			}			else			{				$path_prefix = '';			}		}		else if (isset($_SERVER['SCRIPT_FILENAME']) && !empty($_SERVER['SCRIPT_FILENAME']))		{			// Warning: If chdir() has been used this will lie!			// Warning: This has some problems sometime (CLI can create them easily)			$path = str_replace(DIRECTORY_SEPARATOR, '/', dirname($_SERVER['SCRIPT_FILENAME'])) . '/' . $path;			$absolute = true;			$path_prefix = '';		}		else		{			// We have no way of getting the absolute path, just run on using relative ones.			$absolute = false;			$path_prefix = '.';		}	}	// Remove any repeated slashes	$path = preg_replace('#/{2,}#', '/', $path);	// Remove the slashes from the start and end of the path	$path = trim($path, '/');	// Break the string into little bits for us to nibble on	$bits = explode('/', $path);	// Remove any . in the path, renumber array for the loop below	$bits = array_values(array_diff($bits, array('.')));	// Lets get looping, run over and resolve any .. (up directory)	for ($i = 0, $max = sizeof($bits); $i < $max; $i++)	{		// @todo Optimise		if ($bits[$i] == '..' )		{			if (isset($bits[$i - 1]))			{				if ($bits[$i - 1] != '..')				{					// We found a .. and we are able to traverse upwards, lets do it!					unset($bits[$i]);					unset($bits[$i - 1]);					$i -= 2;					$max -= 2;					$bits = array_values($bits);				}			}			else if ($absolute) // ie. !isset($bits[$i - 1]) && $absolute			{				// We have an absolute path trying to descend above the root of the filesystem				// ... Error!				return false;			}		}	}	// Prepend the path prefix	array_unshift($bits, $path_prefix);	$resolved = '';	$max = sizeof($bits) - 1;	// Check if we are able to resolve symlinks, Windows cannot.	$symlink_resolve = (function_exists('readlink')) ? true : false;	foreach ($bits as $i => $bit)	{		if (@is_dir("$resolved/$bit") || ($i == $max && @is_file("$resolved/$bit")))		{			// Path Exists			if ($symlink_resolve && is_link("$resolved/$bit") && ($link = readlink("$resolved/$bit")))			{				// Resolved a symlink.				$resolved = $link . (($i == $max) ? '' : '/');				continue;			}		}		else		{			// Something doesn't exist here!			// This is correct realpath() behaviour but sadly open_basedir and safe_mode make this problematic			// return false;		}		$resolved .= $bit . (($i == $max) ? '' : '/');	}	// @todo If the file exists fine and open_basedir only has one path we should be able to prepend it	// because we must be inside that basedir, the question is where...	// @internal The slash in is_dir() gets around an open_basedir restriction	if (!@file_exists($resolved) || (!@is_dir($resolved . '/') && !is_file($resolved)))	{		return false;	}	// Put the slashes back to the native operating systems slashes	$resolved = str_replace('/', DIRECTORY_SEPARATOR, $resolved);	// Check for DIRECTORY_SEPARATOR at the end (and remove it!)	if (substr($resolved, -1) == DIRECTORY_SEPARATOR)	{		return substr($resolved, 0, -1);	}	return $resolved; // We got here, in the end!}if (!function_exists('realpath')){	/**	* A wrapper for realpath	* @ignore	*/	function phpbb_realpath($path)	{		return phpbb_own_realpath($path);	}}else{	/**	* A wrapper for realpath	*/	function phpbb_realpath($path)	{		$realpath = realpath($path);		// Strangely there are provider not disabling realpath but returning strange values. :o		// We at least try to cope with them.		if ($realpath === $path || $realpath === false)		{			return phpbb_own_realpath($path);		}		// Check for DIRECTORY_SEPARATOR at the end (and remove it!)		if (substr($realpath, -1) == DIRECTORY_SEPARATOR)		{			$realpath = substr($realpath, 0, -1);		}		return $realpath;	}}if (!function_exists('htmlspecialchars_decode')){	/**	* A wrapper for htmlspecialchars_decode	* @ignore	*/	function htmlspecialchars_decode($string, $quote_style = ENT_COMPAT)	{		return strtr($string, array_flip(get_html_translation_table(HTML_SPECIALCHARS, $quote_style)));	}}// functions used for building option fields/*** Pick a language, any language ...*/function language_select($default = ''){	global $db;	$sql = 'SELECT lang_iso, lang_local_name		FROM ' . LANG_TABLE . '		ORDER BY lang_english_name';	$result = $db->sql_query($sql);	$lang_options = '';	while ($row = $db->sql_fetchrow($result))	{		$selected = ($row['lang_iso'] == $default) ? ' selected="selected"' : '';		$lang_options .= '<option value="' . $row['lang_iso'] . '"' . $selected . '>' . $row['lang_local_name'] . '</option>';	}	$db->sql_freeresult($result);	return $lang_options;}/*** Pick a template/theme combo,*/function style_select($default = '', $all = false){	global $db;	$sql_where = (!$all) ? 'WHERE style_active = 1 ' : '';	$sql = 'SELECT style_id, style_name		FROM ' . STYLES_TABLE . "		$sql_where		ORDER BY style_name";	$result = $db->sql_query($sql);	$style_options = '';	while ($row = $db->sql_fetchrow($result))	{		$selected = ($row['style_id'] == $default) ? ' selected="selected"' : '';		$style_options .= '<option value="' . $row['style_id'] . '"' . $selected . '>' . $row['style_name'] . '</option>';	}	$db->sql_freeresult($result);	return $style_options;}/*** Pick a timezone*/function tz_select($default = '', $truncate = false){	global $user;	$tz_select = '';	foreach ($user->lang['tz_zones'] as $offset => $zone)	{		if ($truncate)		{			$zone_trunc = truncate_string($zone, 50, 255, false, '...');		}		else		{			$zone_trunc = $zone;		}		if (is_numeric($offset))		{			$selected = ($offset == $default) ? ' selected="selected"' : '';			$tz_select .= '<option title="' . $zone . '" value="' . $offset . '"' . $selected . '>' . $zone_trunc . '</option>';		}	}	return $tz_select;}// Functions handling topic/post tracking/marking/*** Marks a topic/forum as read* Marks a topic as posted to** @param int $user_id can only be used with $mode == 'post'*/function markread($mode, $forum_id = false, $topic_id = false, $post_time = 0, $user_id = 0){	global $db, $user, $config;	if ($mode == 'all')	{		if ($forum_id === false || !sizeof($forum_id))		{			if ($config['load_db_lastread'] && $user->data['is_registered'])			{				// Mark all forums read (index page)				$db->sql_query('DELETE FROM ' . TOPICS_TRACK_TABLE . " WHERE user_id = {$user->data['user_id']}");				$db->sql_query('DELETE FROM ' . FORUMS_TRACK_TABLE . " WHERE user_id = {$user->data['user_id']}");				$db->sql_query('UPDATE ' . USERS_TABLE . ' SET user_lastmark = ' . time() . " WHERE user_id = {$user->data['user_id']}");			}			else if ($config['load_anon_lastread'] || $user->data['is_registered'])			{				$tracking_topics = (isset($_COOKIE[$config['cookie_name'] . '_track'])) ? ((STRIP) ? stripslashes($_COOKIE[$config['cookie_name'] . '_track']) : $_COOKIE[$config['cookie_name'] . '_track']) : '';				$tracking_topics = ($tracking_topics) ? tracking_unserialize($tracking_topics) : array();				unset($tracking_topics['tf']);				unset($tracking_topics['t']);				unset($tracking_topics['f']);				$tracking_topics['l'] = base_convert(time() - $config['board_startdate'], 10, 36);				$user->set_cookie('track', tracking_serialize($tracking_topics), time() + 31536000);				$_COOKIE[$config['cookie_name'] . '_track'] = (STRIP) ? addslashes(tracking_serialize($tracking_topics)) : tracking_serialize($tracking_topics);				unset($tracking_topics);				if ($user->data['is_registered'])				{					$db->sql_query('UPDATE ' . USERS_TABLE . ' SET user_lastmark = ' . time() . " WHERE user_id = {$user->data['user_id']}");				}			}		}		return;	}	else if ($mode == 'topics')	{		// Mark all topics in forums read		if (!is_array($forum_id))		{			$forum_id = array($forum_id);		}		// Add 0 to forums array to mark global announcements correctly		// $forum_id[] = 0;		if ($config['load_db_lastread'] && $user->data['is_registered'])		{			$sql = 'DELETE FROM ' . TOPICS_TRACK_TABLE . "				WHERE user_id = {$user->data['user_id']}					AND " . $db->sql_in_set('forum_id', $forum_id);			$db->sql_query($sql);			$sql = 'SELECT forum_id				FROM ' . FORUMS_TRACK_TABLE . "				WHERE user_id = {$user->data['user_id']}					AND " . $db->sql_in_set('forum_id', $forum_id);			$result = $db->sql_query($sql);			$sql_update = array();			while ($row = $db->sql_fetchrow($result))			{				$sql_update[] = (int) $row['forum_id'];			}			$db->sql_freeresult($result);			if (sizeof($sql_update))			{				$sql = 'UPDATE ' . FORUMS_TRACK_TABLE . '					SET mark_time = ' . time() . "					WHERE user_id = {$user->data['user_id']}						AND " . $db->sql_in_set('forum_id', $sql_update);				$db->sql_query($sql);			}			if ($sql_insert = array_diff($forum_id, $sql_update))			{				$sql_ary = array();				foreach ($sql_insert as $f_id)				{					$sql_ary[] = array(						'user_id'	=> (int) $user->data['user_id'],						'forum_id'	=> (int) $f_id,						'mark_time'	=> time()					);				}				$db->sql_multi_insert(FORUMS_TRACK_TABLE, $sql_ary);			}		}		else if ($config['load_anon_lastread'] || $user->data['is_registered'])		{			$tracking = (isset($_COOKIE[$config['cookie_name'] . '_track'])) ? ((STRIP) ? stripslashes($_COOKIE[$config['cookie_name'] . '_track']) : $_COOKIE[$config['cookie_name'] . '_track']) : '';			$tracking = ($tracking) ? tracking_unserialize($tracking) : array();			foreach ($forum_id as $f_id)			{				$topic_ids36 = (isset($tracking['tf'][$f_id])) ? $tracking['tf'][$f_id] : array();				if (isset($tracking['tf'][$f_id]))				{					unset($tracking['tf'][$f_id]);				}				foreach ($topic_ids36 as $topic_id36)				{					unset($tracking['t'][$topic_id36]);				}				if (isset($tracking['f'][$f_id]))				{					unset($tracking['f'][$f_id]);				}				$tracking['f'][$f_id] = base_convert(time() - $config['board_startdate'], 10, 36);			}			if (isset($tracking['tf']) && empty($tracking['tf']))			{				unset($tracking['tf']);			}			$user->set_cookie('track', tracking_serialize($tracking), time() + 31536000);			$_COOKIE[$config['cookie_name'] . '_track'] = (STRIP) ? addslashes(tracking_serialize($tracking)) : tracking_serialize($tracking);			unset($tracking);		}		return;	}	else if ($mode == 'topic')	{		if ($topic_id === false || $forum_id === false)		{			return;		}		if ($config['load_db_lastread'] && $user->data['is_registered'])		{			$sql = 'UPDATE ' . TOPICS_TRACK_TABLE . '				SET mark_time = ' . (($post_time) ? $post_time : time()) . "				WHERE user_id = {$user->data['user_id']}					AND topic_id = $topic_id";			$db->sql_query($sql);			// insert row			if (!$db->sql_affectedrows())			{				$db->sql_return_on_error(true);				$sql_ary = array(					'user_id'		=> (int) $user->data['user_id'],					'topic_id'		=> (int) $topic_id,					'forum_id'		=> (int) $forum_id,					'mark_time'		=> ($post_time) ? (int) $post_time : time(),				);				$db->sql_query('INSERT INTO ' . TOPICS_TRACK_TABLE . ' ' . $db->sql_build_array('INSERT', $sql_ary));				$db->sql_return_on_error(false);			}		}		else if ($config['load_anon_lastread'] || $user->data['is_registered'])		{			$tracking = (isset($_COOKIE[$config['cookie_name'] . '_track'])) ? ((STRIP) ? stripslashes($_COOKIE[$config['cookie_name'] . '_track']) : $_COOKIE[$config['cookie_name'] . '_track']) : '';			$tracking = ($tracking) ? tracking_unserialize($tracking) : array();			$topic_id36 = base_convert($topic_id, 10, 36);			if (!isset($tracking['t'][$topic_id36]))			{				$tracking['tf'][$forum_id][$topic_id36] = true;			}			$post_time = ($post_time) ? $post_time : time();			$tracking['t'][$topic_id36] = base_convert($post_time - $config['board_startdate'], 10, 36);			// If the cookie grows larger than 10000 characters we will remove the smallest value			// This can result in old topics being unread - but most of the time it should be accurate...			if (isset($_COOKIE[$config['cookie_name'] . '_track']) && strlen($_COOKIE[$config['cookie_name'] . '_track']) > 10000)			{				//echo 'Cookie grown too large' . print_r($tracking, true);				// We get the ten most minimum stored time offsets and its associated topic ids				$time_keys = array();				for ($i = 0; $i < 10 && sizeof($tracking['t']); $i++)				{					$min_value = min($tracking['t']);					$m_tkey = array_search($min_value, $tracking['t']);					unset($tracking['t'][$m_tkey]);					$time_keys[$m_tkey] = $min_value;				}				// Now remove the topic ids from the array...				foreach ($tracking['tf'] as $f_id => $topic_id_ary)				{					foreach ($time_keys as $m_tkey => $min_value)					{						if (isset($topic_id_ary[$m_tkey]))						{							$tracking['f'][$f_id] = $min_value;							unset($tracking['tf'][$f_id][$m_tkey]);						}					}				}				if ($user->data['is_registered'])				{					$user->data['user_lastmark'] = intval(base_convert(max($time_keys) + $config['board_startdate'], 36, 10));					$db->sql_query('UPDATE ' . USERS_TABLE . ' SET user_lastmark = ' . $user->data['user_lastmark'] . " WHERE user_id = {$user->data['user_id']}");				}				else				{					$tracking['l'] = max($time_keys);				}			}			$user->set_cookie('track', tracking_serialize($tracking), time() + 31536000);			$_COOKIE[$config['cookie_name'] . '_track'] = (STRIP) ? addslashes(tracking_serialize($tracking)) : tracking_serialize($tracking);		}		return;	}	else if ($mode == 'post')	{		if ($topic_id === false)		{			return;		}		$use_user_id = (!$user_id) ? $user->data['user_id'] : $user_id;		if ($config['load_db_track'] && $use_user_id != ANONYMOUS)		{			$db->sql_return_on_error(true);			$sql_ary = array(				'user_id'		=> (int) $use_user_id,				'topic_id'		=> (int) $topic_id,				'topic_posted'	=> 1			);			$db->sql_query('INSERT INTO ' . TOPICS_POSTED_TABLE . ' ' . $db->sql_build_array('INSERT', $sql_ary));			$db->sql_return_on_error(false);		}		return;	}}/*** Get topic tracking info by using already fetched info*/function get_topic_tracking($forum_id, $topic_ids, &$rowset, $forum_mark_time, $global_announce_list = false){	global $config, $user;	$last_read = array();	if (!is_array($topic_ids))	{		$topic_ids = array($topic_ids);	}	foreach ($topic_ids as $topic_id)	{		if (!empty($rowset[$topic_id]['mark_time']))		{			$last_read[$topic_id] = $rowset[$topic_id]['mark_time'];		}	}	$topic_ids = array_diff($topic_ids, array_keys($last_read));	if (sizeof($topic_ids))	{		$mark_time = array();		// Get global announcement info		if ($global_announce_list && sizeof($global_announce_list))		{			if (!isset($forum_mark_time[0]))			{				global $db;				$sql = 'SELECT mark_time					FROM ' . FORUMS_TRACK_TABLE . "					WHERE user_id = {$user->data['user_id']}						AND forum_id = 0";				$result = $db->sql_query($sql);				$row = $db->sql_fetchrow($result);				$db->sql_freeresult($result);				if ($row)				{					$mark_time[0] = $row['mark_time'];				}			}			else			{				if ($forum_mark_time[0] !== false)				{					$mark_time[0] = $forum_mark_time[0];				}			}		}		if (!empty($forum_mark_time[$forum_id]) && $forum_mark_time[$forum_id] !== false)		{			$mark_time[$forum_id] = $forum_mark_time[$forum_id];		}		$user_lastmark = (isset($mark_time[$forum_id])) ? $mark_time[$forum_id] : $user->data['user_lastmark'];		foreach ($topic_ids as $topic_id)		{			if ($global_announce_list && isset($global_announce_list[$topic_id]))			{				$last_read[$topic_id] = (isset($mark_time[0])) ? $mark_time[0] : $user_lastmark;			}			else			{				$last_read[$topic_id] = $user_lastmark;			}		}	}	return $last_read;}/*** Get topic tracking info from db (for cookie based tracking only this function is used)*/function get_complete_topic_tracking($forum_id, $topic_ids, $global_announce_list = false){	global $config, $user;	$last_read = array();	if (!is_array($topic_ids))	{		$topic_ids = array($topic_ids);	}	if ($config['load_db_lastread'] && $user->data['is_registered'])	{		global $db;		$sql = 'SELECT topic_id, mark_time			FROM ' . TOPICS_TRACK_TABLE . "			WHERE user_id = {$user->data['user_id']}				AND " . $db->sql_in_set('topic_id', $topic_ids);		$result = $db->sql_query($sql);		while ($row = $db->sql_fetchrow($result))		{			$last_read[$row['topic_id']] = $row['mark_time'];		}		$db->sql_freeresult($result);		$topic_ids = array_diff($topic_ids, array_keys($last_read));		if (sizeof($topic_ids))		{			$sql = 'SELECT forum_id, mark_time				FROM ' . FORUMS_TRACK_TABLE . "				WHERE user_id = {$user->data['user_id']}					AND forum_id " .					(($global_announce_list && sizeof($global_announce_list)) ? "IN (0, $forum_id)" : "= $forum_id");			$result = $db->sql_query($sql);			$mark_time = array();			while ($row = $db->sql_fetchrow($result))			{				$mark_time[$row['forum_id']] = $row['mark_time'];			}			$db->sql_freeresult($result);			$user_lastmark = (isset($mark_time[$forum_id])) ? $mark_time[$forum_id] : $user->data['user_lastmark'];			foreach ($topic_ids as $topic_id)			{				if ($global_announce_list && isset($global_announce_list[$topic_id]))				{					$last_read[$topic_id] = (isset($mark_time[0])) ? $mark_time[0] : $user_lastmark;				}				else				{					$last_read[$topic_id] = $user_lastmark;				}			}		}	}	else if ($config['load_anon_lastread'] || $user->data['is_registered'])	{		global $tracking_topics;		if (!isset($tracking_topics) || !sizeof($tracking_topics))		{			$tracking_topics = (isset($_COOKIE[$config['cookie_name'] . '_track'])) ? ((STRIP) ? stripslashes($_COOKIE[$config['cookie_name'] . '_track']) : $_COOKIE[$config['cookie_name'] . '_track']) : '';			$tracking_topics = ($tracking_topics) ? tracking_unserialize($tracking_topics) : array();		}		if (!$user->data['is_registered'])		{			$user_lastmark = (isset($tracking_topics['l'])) ? base_convert($tracking_topics['l'], 36, 10) + $config['board_startdate'] : 0;		}		else		{			$user_lastmark = $user->data['user_lastmark'];		}		foreach ($topic_ids as $topic_id)		{			$topic_id36 = base_convert($topic_id, 10, 36);			if (isset($tracking_topics['t'][$topic_id36]))			{				$last_read[$topic_id] = base_convert($tracking_topics['t'][$topic_id36], 36, 10) + $config['board_startdate'];			}		}		$topic_ids = array_diff($topic_ids, array_keys($last_read));		if (sizeof($topic_ids))		{			$mark_time = array();			if ($global_announce_list && sizeof($global_announce_list))			{				if (isset($tracking_topics['f'][0]))				{					$mark_time[0] = base_convert($tracking_topics['f'][0], 36, 10) + $config['board_startdate'];				}			}			if (isset($tracking_topics['f'][$forum_id]))			{				$mark_time[$forum_id] = base_convert($tracking_topics['f'][$forum_id], 36, 10) + $config['board_startdate'];			}			$user_lastmark = (isset($mark_time[$forum_id])) ? $mark_time[$forum_id] : $user_lastmark;			foreach ($topic_ids as $topic_id)			{				if ($global_announce_list && isset($global_announce_list[$topic_id]))				{					$last_read[$topic_id] = (isset($mark_time[0])) ? $mark_time[0] : $user_lastmark;				}				else				{					$last_read[$topic_id] = $user_lastmark;				}			}		}	}	return $last_read;}/*** Get list of unread topics** @param int $user_id			User ID (or false for current user)* @param string $sql_extra		Extra WHERE SQL statement* @param string $sql_sort		ORDER BY SQL sorting statement* @param string $sql_limit		Limits the size of unread topics list, 0 for unlimited query* @param string $sql_limit_offset  Sets the offset of the first row to search, 0 to search from the start** @return array[int][int]		Topic ids as keys, mark_time of topic as value*/function get_unread_topics($user_id = false, $sql_extra = '', $sql_sort = '', $sql_limit = 1001, $sql_limit_offset = 0){	global $config, $db, $user;	$user_id = ($user_id === false) ? (int) $user->data['user_id'] : (int) $user_id;	// Data array we're going to return	$unread_topics = array();	if (empty($sql_sort))	{		$sql_sort = 'ORDER BY t.topic_last_post_time DESC';	}	if ($config['load_db_lastread'] && $user->data['is_registered'])	{		// Get list of the unread topics		$last_mark = (int) $user->data['user_lastmark'];		$sql_array = array(			'SELECT'		=> 't.topic_id, t.topic_last_post_time, tt.mark_time as topic_mark_time, ft.mark_time as forum_mark_time',			'FROM'			=> array(TOPICS_TABLE => 't'),			'LEFT_JOIN'		=> array(				array(					'FROM'	=> array(TOPICS_TRACK_TABLE => 'tt'),					'ON'	=> "tt.user_id = $user_id AND t.topic_id = tt.topic_id",				),				array(					'FROM'	=> array(FORUMS_TRACK_TABLE => 'ft'),					'ON'	=> "ft.user_id = $user_id AND t.forum_id = ft.forum_id",				),			),			'WHERE'			=> "				 t.topic_last_post_time > $last_mark AND				(				(tt.mark_time IS NOT NULL AND t.topic_last_post_time > tt.mark_time) OR				(tt.mark_time IS NULL AND ft.mark_time IS NOT NULL AND t.topic_last_post_time > ft.mark_time) OR				(tt.mark_time IS NULL AND ft.mark_time IS NULL)				)				$sql_extra				$sql_sort",		);		$sql = $db->sql_build_query('SELECT', $sql_array);		$result = $db->sql_query_limit($sql, $sql_limit, $sql_limit_offset);		while ($row = $db->sql_fetchrow($result))		{			$topic_id = (int) $row['topic_id'];			$unread_topics[$topic_id] = ($row['topic_mark_time']) ? (int) $row['topic_mark_time'] : (($row['forum_mark_time']) ? (int) $row['forum_mark_time'] : $last_mark);		}		$db->sql_freeresult($result);	}	else if ($config['load_anon_lastread'] || $user->data['is_registered'])	{		global $tracking_topics;		if (empty($tracking_topics))		{			$tracking_topics = request_var($config['cookie_name'] . '_track', '', false, true);			$tracking_topics = ($tracking_topics) ? tracking_unserialize($tracking_topics) : array();		}		if (!$user->data['is_registered'])		{			$user_lastmark = (isset($tracking_topics['l'])) ? base_convert($tracking_topics['l'], 36, 10) + $config['board_startdate'] : 0;		}		else		{			$user_lastmark = (int) $user->data['user_lastmark'];		}		$sql = 'SELECT t.topic_id, t.forum_id, t.topic_last_post_time			FROM ' . TOPICS_TABLE . ' t			WHERE t.topic_last_post_time > ' . $user_lastmark . "			$sql_extra			$sql_sort";		$result = $db->sql_query_limit($sql, $sql_limit, $sql_limit_offset);		while ($row = $db->sql_fetchrow($result))		{			$forum_id = (int) $row['forum_id'];			$topic_id = (int) $row['topic_id'];			$topic_id36 = base_convert($topic_id, 10, 36);			if (isset($tracking_topics['t'][$topic_id36]))			{				$last_read = base_convert($tracking_topics['t'][$topic_id36], 36, 10) + $config['board_startdate'];				if ($row['topic_last_post_time'] > $last_read)				{					$unread_topics[$topic_id] = $last_read;				}			}			else if (isset($tracking_topics['f'][$forum_id]))			{				$mark_time = base_convert($tracking_topics['f'][$forum_id], 36, 10) + $config['board_startdate'];				if ($row['topic_last_post_time'] > $mark_time)				{					$unread_topics[$topic_id] = $mark_time;				}			}			else			{				$unread_topics[$topic_id] = $user_lastmark;			}		}		$db->sql_freeresult($result);	}	return $unread_topics;}/*** Check for read forums and update topic tracking info accordingly** @param int $forum_id the forum id to check* @param int $forum_last_post_time the forums last post time* @param int $f_mark_time the forums last mark time if user is registered and load_db_lastread enabled* @param int $mark_time_forum false if the mark time needs to be obtained, else the last users forum mark time** @return true if complete forum got marked read, else false.*/function update_forum_tracking_info($forum_id, $forum_last_post_time, $f_mark_time = false, $mark_time_forum = false){	global $db, $tracking_topics, $user, $config, $auth;	// Determine the users last forum mark time if not given.	if ($mark_time_forum === false)	{		if ($config['load_db_lastread'] && $user->data['is_registered'])		{			$mark_time_forum = (!empty($f_mark_time)) ? $f_mark_time : $user->data['user_lastmark'];		}		else if ($config['load_anon_lastread'] || $user->data['is_registered'])		{			$tracking_topics = (isset($_COOKIE[$config['cookie_name'] . '_track'])) ? ((STRIP) ? stripslashes($_COOKIE[$config['cookie_name'] . '_track']) : $_COOKIE[$config['cookie_name'] . '_track']) : '';			$tracking_topics = ($tracking_topics) ? tracking_unserialize($tracking_topics) : array();			if (!$user->data['is_registered'])			{				$user->data['user_lastmark'] = (isset($tracking_topics['l'])) ? (int) (base_convert($tracking_topics['l'], 36, 10) + $config['board_startdate']) : 0;			}			$mark_time_forum = (isset($tracking_topics['f'][$forum_id])) ? (int) (base_convert($tracking_topics['f'][$forum_id], 36, 10) + $config['board_startdate']) : $user->data['user_lastmark'];		}	}	// Handle update of unapproved topics info.	// Only update for moderators having m_approve permission for the forum.	$sql_update_unapproved = ($auth->acl_get('m_approve', $forum_id)) ? '': 'AND t.topic_approved = 1';	// Check the forum for any left unread topics.	// If there are none, we mark the forum as read.	if ($config['load_db_lastread'] && $user->data['is_registered'])	{		if ($mark_time_forum >= $forum_last_post_time)		{			// We do not need to mark read, this happened before. Therefore setting this to true			$row = true;		}		else		{			$sql = 'SELECT t.forum_id FROM ' . TOPICS_TABLE . ' t				LEFT JOIN ' . TOPICS_TRACK_TABLE . ' tt ON (tt.topic_id = t.topic_id AND tt.user_id = ' . $user->data['user_id'] . ')				WHERE t.forum_id = ' . $forum_id . '					AND t.topic_last_post_time > ' . $mark_time_forum . '					AND t.topic_moved_id = 0 ' .					$sql_update_unapproved . '					AND (tt.topic_id IS NULL OR tt.mark_time < t.topic_last_post_time)				GROUP BY t.forum_id';			$result = $db->sql_query_limit($sql, 1);			$row = $db->sql_fetchrow($result);			$db->sql_freeresult($result);		}	}	else if ($config['load_anon_lastread'] || $user->data['is_registered'])	{		// Get information from cookie		$row = false;		if (!isset($tracking_topics['tf'][$forum_id]))		{			// We do not need to mark read, this happened before. Therefore setting this to true			$row = true;		}		else		{			$sql = 'SELECT t.topic_id				FROM ' . TOPICS_TABLE . ' t				WHERE t.forum_id = ' . $forum_id . '					AND t.topic_last_post_time > ' . $mark_time_forum . '					AND t.topic_moved_id = 0 ' .					$sql_update_unapproved;			$result = $db->sql_query($sql);			$check_forum = $tracking_topics['tf'][$forum_id];			$unread = false;			while ($row = $db->sql_fetchrow($result))			{				if (!isset($check_forum[base_convert($row['topic_id'], 10, 36)]))				{					$unread = true;					break;				}			}			$db->sql_freeresult($result);			$row = $unread;		}	}	else	{		$row = true;	}	if (!$row)	{		markread('topics', $forum_id);		return true;	}	return false;}/*** Transform an array into a serialized format*/function tracking_serialize($input){	$out = '';	foreach ($input as $key => $value)	{		if (is_array($value))		{			$out .= $key . ':(' . tracking_serialize($value) . ');';		}		else		{			$out .= $key . ':' . $value . ';';		}	}	return $out;}/*** Transform a serialized array into an actual array*/function tracking_unserialize($string, $max_depth = 3){	$n = strlen($string);	if ($n > 10010)	{		die('Invalid data supplied');	}	$data = $stack = array();	$key = '';	$mode = 0;	$level = &$data;	for ($i = 0; $i < $n; ++$i)	{		switch ($mode)		{			case 0:				switch ($string[$i])				{					case ':':						$level[$key] = 0;						$mode = 1;					break;					case ')':						unset($level);						$level = array_pop($stack);						$mode = 3;					break;					default:						$key .= $string[$i];				}			break;			case 1:				switch ($string[$i])				{					case '(':						if (sizeof($stack) >= $max_depth)						{							die('Invalid data supplied');						}						$stack[] = &$level;						$level[$key] = array();						$level = &$level[$key];						$key = '';						$mode = 0;					break;					default:						$level[$key] = $string[$i];						$mode = 2;					break;				}			break;			case 2:				switch ($string[$i])				{					case ')':						unset($level);						$level = array_pop($stack);						$mode = 3;					break;					case ';':						$key = '';						$mode = 0;					break;					default:						$level[$key] .= $string[$i];					break;				}			break;			case 3:				switch ($string[$i])				{					case ')':						unset($level);						$level = array_pop($stack);					break;					case ';':						$key = '';						$mode = 0;					break;					default:						die('Invalid data supplied');					break;				}			break;		}	}	if (sizeof($stack) != 0 || ($mode != 0 && $mode != 3))	{		die('Invalid data supplied');	}	return $level;}// Pagination functions/*** Pagination routine, generates page number sequence* tpl_prefix is for using different pagination blocks at one page*/function generate_pagination($base_url, $num_items, $per_page, $start_item, $add_prevnext_text = false, $tpl_prefix = ''){	global $template, $user;	// Make sure $per_page is a valid value	$per_page = ($per_page <= 0) ? 1 : $per_page;	$seperator = '<span class="page-sep">' . $user->lang['COMMA_SEPARATOR'] . '</span>';	$total_pages = ceil($num_items / $per_page);	if ($total_pages == 1 || !$num_items)	{		return false;	}	$on_page = floor($start_item / $per_page) + 1;	$url_delim = (strpos($base_url, '?') === false) ? '?' : ((strpos($base_url, '?') === strlen($base_url) - 1) ? '' : '&amp;');	$page_string = ($on_page == 1) ? '<strong>1</strong>' : '<a href="' . $base_url . '">1</a>';	if ($total_pages > 5)	{		$start_cnt = min(max(1, $on_page - 4), $total_pages - 5);		$end_cnt = max(min($total_pages, $on_page + 4), 6);		$page_string .= ($start_cnt > 1) ? '<span class="page-dots"> ... </span>' : $seperator;		for ($i = $start_cnt + 1; $i < $end_cnt; $i++)		{			$page_string .= ($i == $on_page) ? '<strong>' . $i . '</strong>' : '<a href="' . $base_url . "{$url_delim}start=" . (($i - 1) * $per_page) . '">' . $i . '</a>';			if ($i < $end_cnt - 1)			{				$page_string .= $seperator;			}		}		$page_string .= ($end_cnt < $total_pages) ? '<span class="page-dots"> ... </span>' : $seperator;	}	else	{		$page_string .= $seperator;		for ($i = 2; $i < $total_pages; $i++)		{			$page_string .= ($i == $on_page) ? '<strong>' . $i . '</strong>' : '<a href="' . $base_url . "{$url_delim}start=" . (($i - 1) * $per_page) . '">' . $i . '</a>';			if ($i < $total_pages)			{				$page_string .= $seperator;			}		}	}	$page_string .= ($on_page == $total_pages) ? '<strong>' . $total_pages . '</strong>' : '<a href="' . $base_url . "{$url_delim}start=" . (($total_pages - 1) * $per_page) . '">' . $total_pages . '</a>';	if ($add_prevnext_text)	{		if ($on_page != 1)		{			$page_string = '<a href="' . $base_url . "{$url_delim}start=" . (($on_page - 2) * $per_page) . '">' . $user->lang['PREVIOUS'] . '</a>&nbsp;&nbsp;' . $page_string;		}		if ($on_page != $total_pages)		{			$page_string .= '&nbsp;&nbsp;<a href="' . $base_url . "{$url_delim}start=" . ($on_page * $per_page) . '">' . $user->lang['NEXT'] . '</a>';		}	}	$template->assign_vars(array(		$tpl_prefix . 'BASE_URL'		=> $base_url,		'A_' . $tpl_prefix . 'BASE_URL'	=> addslashes($base_url),		$tpl_prefix . 'PER_PAGE'		=> $per_page,		$tpl_prefix . 'PREVIOUS_PAGE'	=> ($on_page == 1) ? '' : $base_url . "{$url_delim}start=" . (($on_page - 2) * $per_page),		$tpl_prefix . 'NEXT_PAGE'		=> ($on_page == $total_pages) ? '' : $base_url . "{$url_delim}start=" . ($on_page * $per_page),		$tpl_prefix . 'TOTAL_PAGES'		=> $total_pages,	));	return $page_string;}/*** Return current page (pagination)*/function on_page($num_items, $per_page, $start){	global $template, $user;	// Make sure $per_page is a valid value	$per_page = ($per_page <= 0) ? 1 : $per_page;	$on_page = floor($start / $per_page) + 1;	$template->assign_vars(array(		'ON_PAGE'		=> $on_page)	);	return sprintf($user->lang['PAGE_OF'], $on_page, max(ceil($num_items / $per_page), 1));}// Server functions (building urls, redirecting...)/*** Append session id to url.* This function supports hooks.** @param string $url The url the session id needs to be appended to (can have params)* @param mixed $params String or array of additional url parameters* @param bool $is_amp Is url using &amp; (true) or & (false)* @param string $session_id Possibility to use a custom session id instead of the global one** Examples:* <code>* append_sid("{$phpbb_root_path}viewtopic.$phpEx?t=1&amp;f=2");* append_sid("{$phpbb_root_path}viewtopic.$phpEx", 't=1&amp;f=2');* append_sid("{$phpbb_root_path}viewtopic.$phpEx", 't=1&f=2', false);* append_sid("{$phpbb_root_path}viewtopic.$phpEx", array('t' => 1, 'f' => 2));* </code>**/function append_sid($url, $params = false, $is_amp = true, $session_id = false){	global $_SID, $_EXTRA_URL, $phpbb_hook;	if ($params === '' || (is_array($params) && empty($params)))	{		// Do not append the ? if the param-list is empty anyway.		$params = false;	}	// Developers using the hook function need to globalise the $_SID and $_EXTRA_URL on their own and also handle it appropriately.	// They could mimic most of what is within this function	if (!empty($phpbb_hook) && $phpbb_hook->call_hook(__FUNCTION__, $url, $params, $is_amp, $session_id))	{		if ($phpbb_hook->hook_return(__FUNCTION__))		{			return $phpbb_hook->hook_return_result(__FUNCTION__);		}	}	$params_is_array = is_array($params);	// Get anchor	$anchor = '';	if (strpos($url, '#') !== false)	{		list($url, $anchor) = explode('#', $url, 2);		$anchor = '#' . $anchor;	}	else if (!$params_is_array && strpos($params, '#') !== false)	{		list($params, $anchor) = explode('#', $params, 2);		$anchor = '#' . $anchor;	}	// Handle really simple cases quickly	if ($_SID == '' && $session_id === false && empty($_EXTRA_URL) && !$params_is_array && !$anchor)	{		if ($params === false)		{			return $url;		}		$url_delim = (strpos($url, '?') === false) ? '?' : (($is_amp) ? '&amp;' : '&');		return $url . ($params !== false ? $url_delim. $params : '');	}	// Assign sid if session id is not specified	if ($session_id === false)	{		$session_id = $_SID;	}	$amp_delim = ($is_amp) ? '&amp;' : '&';	$url_delim = (strpos($url, '?') === false) ? '?' : $amp_delim;	// Appending custom url parameter?	$append_url = (!empty($_EXTRA_URL)) ? implode($amp_delim, $_EXTRA_URL) : '';	// Use the short variant if possible ;)	if ($params === false)	{		// Append session id		if (!$session_id)		{			return $url . (($append_url) ? $url_delim . $append_url : '') . $anchor;		}		else		{			return $url . (($append_url) ? $url_delim . $append_url . $amp_delim : $url_delim) . 'sid=' . $session_id . $anchor;		}	}	// Build string if parameters are specified as array	if (is_array($params))	{		$output = array();		foreach ($params as $key => $item)		{			if ($item === NULL)			{				continue;			}			if ($key == '#')			{				$anchor = '#' . $item;				continue;			}			$output[] = $key . '=' . $item;		}		$params = implode($amp_delim, $output);	}	// Append session id and parameters (even if they are empty)	// If parameters are empty, the developer can still append his/her parameters without caring about the delimiter	return $url . (($append_url) ? $url_delim . $append_url . $amp_delim : $url_delim) . $params . ((!$session_id) ? '' : $amp_delim . 'sid=' . $session_id) . $anchor;}/*** Generate board url (example: http://www.example.com/phpBB)** @param bool $without_script_path if set to true the script path gets not appended (example: http://www.example.com)** @return string the generated board url*/function generate_board_url($without_script_path = false){	global $config, $user;	$server_name = $user->host;	$server_port = (!empty($_SERVER['SERVER_PORT'])) ? (int) $_SERVER['SERVER_PORT'] : (int) getenv('SERVER_PORT');	// Forcing server vars is the only way to specify/override the protocol	if ($config['force_server_vars'] || !$server_name)	{		$server_protocol = ($config['server_protocol']) ? $config['server_protocol'] : (($config['cookie_secure']) ? 'https://' : 'http://');		$server_name = $config['server_name'];		$server_port = (int) $config['server_port'];		$script_path = $config['script_path'];		$url = $server_protocol . $server_name;		$cookie_secure = $config['cookie_secure'];	}	else	{		// Do not rely on cookie_secure, users seem to think that it means a secured cookie instead of an encrypted connection		$cookie_secure = (isset($_SERVER['HTTPS']) && $_SERVER['HTTPS'] == 'on') ? 1 : 0;		$url = (($cookie_secure) ? 'https://' : 'http://') . $server_name;		$script_path = $user->page['root_script_path'];	}	if ($server_port && (($cookie_secure && $server_port <> 443) || (!$cookie_secure && $server_port <> 80)))	{		// HTTP HOST can carry a port number (we fetch $user->host, but for old versions this may be true)		if (strpos($server_name, ':') === false)		{			$url .= ':' . $server_port;		}	}	if (!$without_script_path)	{		$url .= $script_path;	}	// Strip / from the end	if (substr($url, -1, 1) == '/')	{		$url = substr($url, 0, -1);	}	return $url;}/*** Redirects the user to another page then exits the script nicely* This function is intended for urls within the board. It's not meant to redirect to cross-domains.** @param string $url The url to redirect to* @param bool $return If true, do not redirect but return the sanitized URL. Default is no return.* @param bool $disable_cd_check If true, redirect() will redirect to an external domain. If false, the redirect point to the boards url if it does not match the current domain. Default is false.*/function redirect($url, $return = false, $disable_cd_check = false){	global $db, $cache, $config, $user, $phpbb_root_path;	$failover_flag = false;	if (empty($user->lang))	{		$user->add_lang('common');	}	if (!$return)	{		garbage_collection();	}	// Make sure no &amp;'s are in, this will break the redirect	$url = str_replace('&amp;', '&', $url);	// Determine which type of redirect we need to handle...	$url_parts = @parse_url($url);	if ($url_parts === false)	{		// Malformed url, redirect to current page...		$url = generate_board_url() . '/' . $user->page['page'];	}	else if (!empty($url_parts['scheme']) && !empty($url_parts['host']))	{		// Attention: only able to redirect within the same domain if $disable_cd_check is false (yourdomain.com -> www.yourdomain.com will not work)		if (!$disable_cd_check && $url_parts['host'] !== $user->host)		{			$url = generate_board_url();		}	}	else if ($url[0] == '/')	{		// Absolute uri, prepend direct url...		$url = generate_board_url(true) . $url;	}	else	{		// Relative uri		$pathinfo = pathinfo($url);		if (!$disable_cd_check && !file_exists($pathinfo['dirname'] . '/'))		{			$url = str_replace('../', '', $url);			$pathinfo = pathinfo($url);			if (!file_exists($pathinfo['dirname'] . '/'))			{				// fallback to "last known user page"				// at least this way we know the user does not leave the phpBB root				$url = generate_board_url() . '/' . $user->page['page'];				$failover_flag = true;			}		}		if (!$failover_flag)		{			// Is the uri pointing to the current directory?			if ($pathinfo['dirname'] == '.')			{				$url = str_replace('./', '', $url);				// Strip / from the beginning				if ($url && substr($url, 0, 1) == '/')				{					$url = substr($url, 1);				}				if ($user->page['page_dir'])				{					$url = generate_board_url() . '/' . $user->page['page_dir'] . '/' . $url;				}				else				{					$url = generate_board_url() . '/' . $url;				}			}			else			{				// Used ./ before, but $phpbb_root_path is working better with urls within another root path				$root_dirs = explode('/', str_replace('\\', '/', phpbb_realpath($phpbb_root_path)));				$page_dirs = explode('/', str_replace('\\', '/', phpbb_realpath($pathinfo['dirname'])));				$intersection = array_intersect_assoc($root_dirs, $page_dirs);				$root_dirs = array_diff_assoc($root_dirs, $intersection);				$page_dirs = array_diff_assoc($page_dirs, $intersection);				$dir = str_repeat('../', sizeof($root_dirs)) . implode('/', $page_dirs);				// Strip / from the end				if ($dir && substr($dir, -1, 1) == '/')				{					$dir = substr($dir, 0, -1);				}				// Strip / from the beginning				if ($dir && substr($dir, 0, 1) == '/')				{					$dir = substr($dir, 1);				}				$url = str_replace($pathinfo['dirname'] . '/', '', $url);				// Strip / from the beginning				if (substr($url, 0, 1) == '/')				{					$url = substr($url, 1);				}				$url = (!empty($dir) ? $dir . '/' : '') . $url;				$url = generate_board_url() . '/' . $url;			}		}	}	// Make sure no linebreaks are there... to prevent http response splitting for PHP < 4.4.2	if (strpos(urldecode($url), "\n") !== false || strpos(urldecode($url), "\r") !== false || strpos($url, ';') !== false)	{		trigger_error('Tried to redirect to potentially insecure url.', E_USER_ERROR);	}	// Now, also check the protocol and for a valid url the last time...	$allowed_protocols = array('http', 'https', 'ftp', 'ftps');	$url_parts = parse_url($url);	if ($url_parts === false || empty($url_parts['scheme']) || !in_array($url_parts['scheme'], $allowed_protocols))	{		trigger_error('Tried to redirect to potentially insecure url.', E_USER_ERROR);	}	if ($return)	{		return $url;	}	// Redirect via an HTML form for PITA webservers	if (@preg_match('#Microsoft|WebSTAR|Xitami#', getenv('SERVER_SOFTWARE')))	{		header('Refresh: 0; URL=' . $url);		echo '<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">';		echo '<html xmlns="http://www.w3.org/1999/xhtml" dir="' . $user->lang['DIRECTION'] . '" lang="' . $user->lang['USER_LANG'] . '" xml:lang="' . $user->lang['USER_LANG'] . '">';		echo '<head>';		echo '<meta http-equiv="content-type" content="text/html; charset=utf-8" />';		echo '<meta http-equiv="refresh" content="0; url=' . str_replace('&', '&amp;', $url) . '" />';		echo '<title>' . $user->lang['REDIRECT'] . '</title>';		echo '</head>';		echo '<body>';		echo '<div style="text-align: center;">' . sprintf($user->lang['URL_REDIRECT'], '<a href="' . str_replace('&', '&amp;', $url) . '">', '</a>') . '</div>';		echo '</body>';		echo '</html>';		exit;	}	// Behave as per HTTP/1.1 spec for others	header('Location: ' . $url);	exit;}/*** Re-Apply session id after page reloads*/function reapply_sid($url){	global $phpEx, $phpbb_root_path;	if ($url === "index.$phpEx")	{		return append_sid("index.$phpEx");	}	else if ($url === "{$phpbb_root_path}index.$phpEx")	{		return append_sid("{$phpbb_root_path}index.$phpEx");	}	// Remove previously added sid	if (strpos($url, 'sid=') !== false)	{		// All kind of links		$url = preg_replace('/(\?)?(&amp;|&)?sid=[a-z0-9]+/', '', $url);		// if the sid was the first param, make the old second as first ones		$url = preg_replace("/$phpEx(&amp;|&)+?/", "$phpEx?", $url);	}	return append_sid($url);}/*** Returns url from the session/current page with an re-appended SID with optionally stripping vars from the url*/function build_url($strip_vars = false){	global $user, $phpbb_root_path;	// Append SID	$redirect = append_sid($user->page['page'], false, false);	// Add delimiter if not there...	if (strpos($redirect, '?') === false)	{		$redirect .= '?';	}	// Strip vars...	if ($strip_vars !== false && strpos($redirect, '?') !== false)	{		if (!is_array($strip_vars))		{			$strip_vars = array($strip_vars);		}		$query = $_query = array();		$args = substr($redirect, strpos($redirect, '?') + 1);		$args = ($args) ? explode('&', $args) : array();		$redirect = substr($redirect, 0, strpos($redirect, '?'));		foreach ($args as $argument)		{			$arguments = explode('=', $argument);			$key = $arguments[0];			unset($arguments[0]);			if ($key === '')			{				continue;			}			$query[$key] = implode('=', $arguments);		}		// Strip the vars off		foreach ($strip_vars as $strip)		{			if (isset($query[$strip]))			{				unset($query[$strip]);			}		}		// Glue the remaining parts together... already urlencoded		foreach ($query as $key => $value)		{			$_query[] = $key . '=' . $value;		}		$query = implode('&', $_query);		$redirect .= ($query) ? '?' . $query : '';	}	// We need to be cautious here.	// On some situations, the redirect path is an absolute URL, sometimes a relative path	// For a relative path, let's prefix it with $phpbb_root_path to point to the correct location,	// else we use the URL directly.	$url_parts = @parse_url($redirect);	// URL	if ($url_parts !== false && !empty($url_parts['scheme']) && !empty($url_parts['host']))	{		return str_replace('&', '&amp;', $redirect);	}	return $phpbb_root_path . str_replace('&', '&amp;', $redirect);}/*** Meta refresh assignment* Adds META template variable with meta http tag.** @param int $time Time in seconds for meta refresh tag* @param string $url URL to redirect to. The url will go through redirect() first before the template variable is assigned* @param bool $disable_cd_check If true, meta_refresh() will redirect to an external domain. If false, the redirect point to the boards url if it does not match the current domain. Default is false.*/function meta_refresh($time, $url, $disable_cd_check = false){	global $template;	$url = redirect($url, true, $disable_cd_check);	$url = str_replace('&', '&amp;', $url);	// For XHTML compatibility we change back & to &amp;	$template->assign_vars(array(		'META' => '<meta http-equiv="refresh" content="' . $time . ';url=' . $url . '" />')	);	return $url;}/*** Outputs correct status line header.** Depending on php sapi one of the two following forms is used:** Status: 404 Not Found** HTTP/1.x 404 Not Found** HTTP version is taken from HTTP_VERSION environment variable,* and defaults to 1.0.** Sample usage:** send_status_line(404, 'Not Found');** @param int $code HTTP status code* @param string $message Message for the status code* @return void*/function send_status_line($code, $message){	if (substr(strtolower(@php_sapi_name()), 0, 3) === 'cgi')	{		// in theory, we shouldn't need that due to php doing it. Reality offers a differing opinion, though		header("Status: $code $message", true, $code);	}	else	{		if (!empty($_SERVER['SERVER_PROTOCOL']))		{			$version = $_SERVER['SERVER_PROTOCOL'];		}		else		{			$version = 'HTTP/1.0';		}		header("$version $code $message", true, $code);	}}//Form validation/*** Add a secret hash   for use in links/GET requests* @param string  $link_name The name of the link; has to match the name used in check_link_hash, otherwise no restrictions apply* @return string the hash*/function generate_link_hash($link_name){	global $user;	if (!isset($user->data["hash_$link_name"]))	{		$user->data["hash_$link_name"] = substr(sha1($user->data['user_form_salt'] . $link_name), 0, 8);	}	return $user->data["hash_$link_name"];}/*** checks a link hash - for GET requests* @param string $token the submitted token* @param string $link_name The name of the link* @return boolean true if all is fine*/function check_link_hash($token, $link_name){	return $token === generate_link_hash($link_name);}/*** Add a secret token to the form (requires the S_FORM_TOKEN template variable)* @param string  $form_name The name of the form; has to match the name used in check_form_key, otherwise no restrictions apply*/function add_form_key($form_name){	global $config, $template, $user;	$now = time();	$token_sid = ($user->data['user_id'] == ANONYMOUS && !empty($config['form_token_sid_guests'])) ? $user->session_id : '';	$token = sha1($now . $user->data['user_form_salt'] . $form_name . $token_sid);	$s_fields = build_hidden_fields(array(		'creation_time' => $now,		'form_token'	=> $token,	));	$template->assign_vars(array(		'S_FORM_TOKEN'	=> $s_fields,	));}/*** Check the form key. Required for all altering actions not secured by confirm_box* @param string  $form_name The name of the form; has to match the name used in add_form_key, otherwise no restrictions apply* @param int $timespan The maximum acceptable age for a submitted form in seconds. Defaults to the config setting.* @param string $return_page The address for the return link* @param bool $trigger If true, the function will triger an error when encountering an invalid form*/function check_form_key($form_name, $timespan = false, $return_page = '', $trigger = false){	global $config, $user;	if ($timespan === false)	{		// we enforce a minimum value of half a minute here.		$timespan = ($config['form_token_lifetime'] == -1) ? -1 : max(30, $config['form_token_lifetime']);	}	if (isset($_POST['creation_time']) && isset($_POST['form_token']))	{		$creation_time	= abs(request_var('creation_time', 0));		$token = request_var('form_token', '');		$diff = time() - $creation_time;		// If creation_time and the time() now is zero we can assume it was not a human doing this (the check for if ($diff)...		if ($diff && ($diff <= $timespan || $timespan === -1))		{			$token_sid = ($user->data['user_id'] == ANONYMOUS && !empty($config['form_token_sid_guests'])) ? $user->session_id : '';			$key = sha1($creation_time . $user->data['user_form_salt'] . $form_name . $token_sid);			if ($key === $token)			{				return true;			}		}	}	if ($trigger)	{		trigger_error($user->lang['FORM_INVALID'] . $return_page);	}	return false;}// Message/Login boxes/*** Build Confirm box* @param boolean $check True for checking if confirmed (without any additional parameters) and false for displaying the confirm box* @param string $title Title/Message used for confirm box.*		message text is _CONFIRM appended to title.*		If title cannot be found in user->lang a default one is displayed*		If title_CONFIRM cannot be found in user->lang the text given is used.* @param string $hidden Hidden variables* @param string $html_body Template used for confirm box* @param string $u_action Custom form action*/function confirm_box($check, $title = '', $hidden = '', $html_body = 'confirm_body.html', $u_action = ''){	global $user, $template, $db;	global $phpEx, $phpbb_root_path;	if (isset($_POST['cancel']))	{		return false;	}	$confirm = false;	if (isset($_POST['confirm']))	{		// language frontier		if ($_POST['confirm'] === $user->lang['YES'])		{			$confirm = true;		}	}	if ($check && $confirm)	{		$user_id = request_var('confirm_uid', 0);		$session_id = request_var('sess', '');		$confirm_key = request_var('confirm_key', '');		if ($user_id != $user->data['user_id'] || $session_id != $user->session_id || !$confirm_key || !$user->data['user_last_confirm_key'] || $confirm_key != $user->data['user_last_confirm_key'])		{			return false;		}		// Reset user_last_confirm_key		$sql = 'UPDATE ' . USERS_TABLE . " SET user_last_confirm_key = ''			WHERE user_id = " . $user->data['user_id'];		$db->sql_query($sql);		return true;	}	else if ($check)	{		return false;	}	$s_hidden_fields = build_hidden_fields(array(		'confirm_uid'	=> $user->data['user_id'],		'sess'			=> $user->session_id,		'sid'			=> $user->session_id,	));	// generate activation key	$confirm_key = gen_rand_string(10);	if (defined('IN_ADMIN') && isset($user->data['session_admin']) && $user->data['session_admin'])	{		adm_page_header((!isset($user->lang[$title])) ? $user->lang['CONFIRM'] : $user->lang[$title]);	}	else	{		page_header(((!isset($user->lang[$title])) ? $user->lang['CONFIRM'] : $user->lang[$title]), false);	}	$template->set_filenames(array(		'body' => $html_body)	);	// If activation key already exist, we better do not re-use the key (something very strange is going on...)	if (request_var('confirm_key', ''))	{		// This should not occur, therefore we cancel the operation to safe the user		return false;	}	// re-add sid / transform & to &amp; for user->page (user->page is always using &)	$use_page = ($u_action) ? $phpbb_root_path . $u_action : $phpbb_root_path . str_replace('&', '&amp;', $user->page['page']);	$u_action = reapply_sid($use_page);	$u_action .= ((strpos($u_action, '?') === false) ? '?' : '&amp;') . 'confirm_key=' . $confirm_key;	$template->assign_vars(array(		'MESSAGE_TITLE'		=> (!isset($user->lang[$title])) ? $user->lang['CONFIRM'] : $user->lang[$title],		'MESSAGE_TEXT'		=> (!isset($user->lang[$title . '_CONFIRM'])) ? $title : $user->lang[$title . '_CONFIRM'],		'YES_VALUE'			=> $user->lang['YES'],		'S_CONFIRM_ACTION'	=> $u_action,		'S_HIDDEN_FIELDS'	=> $hidden . $s_hidden_fields)	);	$sql = 'UPDATE ' . USERS_TABLE . " SET user_last_confirm_key = '" . $db->sql_escape($confirm_key) . "'		WHERE user_id = " . $user->data['user_id'];	$db->sql_query($sql);	if (defined('IN_ADMIN') && isset($user->data['session_admin']) && $user->data['session_admin'])	{		adm_page_footer();	}	else	{		page_footer();	}}/*** Generate login box or verify password*/function login_box($redirect = '', $l_explain = '', $l_success = '', $admin = false, $s_display = true){	global $db, $user, $template, $auth, $phpEx, $phpbb_root_path, $config;	if (!class_exists('phpbb_captcha_factory'))	{		include($phpbb_root_path . 'includes/captcha/captcha_factory.' . $phpEx);	}	$err = '';	// Make sure user->setup() has been called	if (empty($user->lang))	{		$user->setup();	}	// Print out error if user tries to authenticate as an administrator without having the privileges...	if ($admin && !$auth->acl_get('a_'))	{		// Not authd		// anonymous/inactive users are never able to go to the ACP even if they have the relevant permissions		if ($user->data['is_registered'])		{			add_log('admin', 'LOG_ADMIN_AUTH_FAIL');		}		trigger_error('NO_AUTH_ADMIN');	}	if (isset($_POST['login']))	{		// Get credential		if ($admin)		{			$credential = request_var('credential', '');			if (strspn($credential, 'abcdef0123456789') !== strlen($credential) || strlen($credential) != 32)			{				if ($user->data['is_registered'])				{					add_log('admin', 'LOG_ADMIN_AUTH_FAIL');				}				trigger_error('NO_AUTH_ADMIN');			}			$password	= request_var('password_' . $credential, '', true);		}		else		{			$password	= request_var('password', '', true);		}		$username	= request_var('username', '', true);		$autologin	= (!empty($_POST['autologin'])) ? true : false;		$viewonline = (!empty($_POST['viewonline'])) ? 0 : 1;		$admin 		= ($admin) ? 1 : 0;		$viewonline = ($admin) ? $user->data['session_viewonline'] : $viewonline;		// Check if the supplied username is equal to the one stored within the database if re-authenticating		if ($admin && utf8_clean_string($username) != utf8_clean_string($user->data['username']))		{			// We log the attempt to use a different username...			add_log('admin', 'LOG_ADMIN_AUTH_FAIL');			trigger_error('NO_AUTH_ADMIN_USER_DIFFER');		}		// If authentication is successful we redirect user to previous page		$result = $auth->login($username, $password, $autologin, $viewonline, $admin);		// If admin authentication and login, we will log if it was a success or not...		// We also break the operation on the first non-success login - it could be argued that the user already knows		if ($admin)		{			if ($result['status'] == LOGIN_SUCCESS)			{				add_log('admin', 'LOG_ADMIN_AUTH_SUCCESS');			}			else			{				// Only log the failed attempt if a real user tried to.				// anonymous/inactive users are never able to go to the ACP even if they have the relevant permissions				if ($user->data['is_registered'])				{					add_log('admin', 'LOG_ADMIN_AUTH_FAIL');				}			}		}		// The result parameter is always an array, holding the relevant information...		if ($result['status'] == LOGIN_SUCCESS)		{			$redirect = request_var('redirect', "{$phpbb_root_path}index.$phpEx");			$message = ($l_success) ? $l_success : $user->lang['LOGIN_REDIRECT'];			$l_redirect = ($admin) ? $user->lang['PROCEED_TO_ACP'] : (($redirect === "{$phpbb_root_path}index.$phpEx" || $redirect === "index.$phpEx") ? $user->lang['RETURN_INDEX'] : $user->lang['RETURN_PAGE']);			// append/replace SID (may change during the session for AOL users)			$redirect = reapply_sid($redirect);			// Special case... the user is effectively banned, but we allow founders to login			if (defined('IN_CHECK_BAN') && $result['user_row']['user_type'] != USER_FOUNDER)			{				return;			}			$redirect = meta_refresh(3, $redirect);			trigger_error($message . '<br /><br />' . sprintf($l_redirect, '<a href="' . $redirect . '">', '</a>'));		}		// Something failed, determine what...		if ($result['status'] == LOGIN_BREAK)		{			trigger_error($result['error_msg']);		}		// Special cases... determine		switch ($result['status'])		{			case LOGIN_ERROR_ATTEMPTS:				$captcha = phpbb_captcha_factory::get_instance($config['captcha_plugin']);				$captcha->init(CONFIRM_LOGIN);				// $captcha->reset();				$template->assign_vars(array(					'CAPTCHA_TEMPLATE'			=> $captcha->get_template(),				));				$err = $user->lang[$result['error_msg']];			break;			case LOGIN_ERROR_PASSWORD_CONVERT:				$err = sprintf(					$user->lang[$result['error_msg']],					($config['email_enable']) ? '<a href="' . append_sid("{$phpbb_root_path}ucp.$phpEx", 'mode=sendpassword') . '">' : '',					($config['email_enable']) ? '</a>' : '',					($config['board_contact']) ? '<a href="mailto:' . htmlspecialchars($config['board_contact']) . '">' : '',					($config['board_contact']) ? '</a>' : ''				);			break;			// Username, password, etc...			default:				$err = $user->lang[$result['error_msg']];				// Assign admin contact to some error messages				if ($result['error_msg'] == 'LOGIN_ERROR_USERNAME' || $result['error_msg'] == 'LOGIN_ERROR_PASSWORD')				{					$err = (!$config['board_contact']) ? sprintf($user->lang[$result['error_msg']], '', '') : sprintf($user->lang[$result['error_msg']], '<a href="mailto:' . htmlspecialchars($config['board_contact']) . '">', '</a>');				}			break;		}	}	// Assign credential for username/password pair	$credential = ($admin) ? md5(unique_id()) : false;	$s_hidden_fields = array(		'sid'		=> $user->session_id,	);	if ($redirect)	{		$s_hidden_fields['redirect'] = $redirect;	}	if ($admin)	{		$s_hidden_fields['credential'] = $credential;	}	$s_hidden_fields = build_hidden_fields($s_hidden_fields);	$template->assign_vars(array(		'LOGIN_ERROR'		=> $err,		'LOGIN_EXPLAIN'		=> $l_explain,		'U_SEND_PASSWORD' 		=> ($config['email_enable']) ? append_sid("{$phpbb_root_path}ucp.$phpEx", 'mode=sendpassword') : '',		'U_RESEND_ACTIVATION'	=> ($config['require_activation'] == USER_ACTIVATION_SELF && $config['email_enable']) ? append_sid("{$phpbb_root_path}ucp.$phpEx", 'mode=resend_act') : '',		'U_TERMS_USE'			=> append_sid("{$phpbb_root_path}ucp.$phpEx", 'mode=terms'),		'U_PRIVACY'				=> append_sid("{$phpbb_root_path}ucp.$phpEx", 'mode=privacy'),		'S_DISPLAY_FULL_LOGIN'	=> ($s_display) ? true : false,		'S_HIDDEN_FIELDS' 		=> $s_hidden_fields,		'S_ADMIN_AUTH'			=> $admin,		'USERNAME'				=> ($admin) ? $user->data['username'] : '',		'USERNAME_CREDENTIAL'	=> 'username',		'PASSWORD_CREDENTIAL'	=> ($admin) ? 'password_' . $credential : 'password',	));	page_header($user->lang['LOGIN'], false);	$template->set_filenames(array(		'body' => 'login_body.html')	);	make_jumpbox(append_sid("{$phpbb_root_path}viewforum.$phpEx"));	page_footer();}/*** Generate forum login box*/function login_forum_box($forum_data){	global $db, $config, $user, $template, $phpEx;	$password = request_var('password', '', true);	$sql = 'SELECT forum_id		FROM ' . FORUMS_ACCESS_TABLE . '		WHERE forum_id = ' . $forum_data['forum_id'] . '			AND user_id = ' . $user->data['user_id'] . "			AND session_id = '" . $db->sql_escape($user->session_id) . "'";	$result = $db->sql_query($sql);	$row = $db->sql_fetchrow($result);	$db->sql_freeresult($result);	if ($row)	{		return true;	}	if ($password)	{		// Remove expired authorised sessions		$sql = 'SELECT f.session_id			FROM ' . FORUMS_ACCESS_TABLE . ' f			LEFT JOIN ' . SESSIONS_TABLE . ' s ON (f.session_id = s.session_id)			WHERE s.session_id IS NULL';		$result = $db->sql_query($sql);		if ($row = $db->sql_fetchrow($result))		{			$sql_in = array();			do			{				$sql_in[] = (string) $row['session_id'];			}			while ($row = $db->sql_fetchrow($result));			// Remove expired sessions			$sql = 'DELETE FROM ' . FORUMS_ACCESS_TABLE . '				WHERE ' . $db->sql_in_set('session_id', $sql_in);			$db->sql_query($sql);		}		$db->sql_freeresult($result);		if (phpbb_check_hash($password, $forum_data['forum_password']))		{			$sql_ary = array(				'forum_id'		=> (int) $forum_data['forum_id'],				'user_id'		=> (int) $user->data['user_id'],				'session_id'	=> (string) $user->session_id,			);			$db->sql_query('INSERT INTO ' . FORUMS_ACCESS_TABLE . ' ' . $db->sql_build_array('INSERT', $sql_ary));			return true;		}		$template->assign_var('LOGIN_ERROR', $user->lang['WRONG_PASSWORD']);	}	page_header($user->lang['LOGIN'], false);	$template->assign_vars(array(		'S_LOGIN_ACTION'		=> build_url(array('f')),		'S_HIDDEN_FIELDS'		=> build_hidden_fields(array('f' => $forum_data['forum_id'])))	);	$template->set_filenames(array(		'body' => 'login_forum.html')	);	page_footer();}// Little helpers/*** Little helper for the build_hidden_fields function*/function _build_hidden_fields($key, $value, $specialchar, $stripslashes){	$hidden_fields = '';	if (!is_array($value))	{		$value = ($stripslashes) ? stripslashes($value) : $value;		$value = ($specialchar) ? htmlspecialchars($value, ENT_COMPAT, 'UTF-8') : $value;		$hidden_fields .= '<input type="hidden" name="' . $key . '" value="' . $value . '" />' . "\n";	}	else	{		foreach ($value as $_key => $_value)		{			$_key = ($stripslashes) ? stripslashes($_key) : $_key;			$_key = ($specialchar) ? htmlspecialchars($_key, ENT_COMPAT, 'UTF-8') : $_key;			$hidden_fields .= _build_hidden_fields($key . '[' . $_key . ']', $_value, $specialchar, $stripslashes);		}	}	return $hidden_fields;}/*** Build simple hidden fields from array** @param array $field_ary an array of values to build the hidden field from* @param bool $specialchar if true, keys and values get specialchared* @param bool $stripslashes if true, keys and values get stripslashed** @return string the hidden fields*/function build_hidden_fields($field_ary, $specialchar = false, $stripslashes = false){	$s_hidden_fields = '';	foreach ($field_ary as $name => $vars)	{		$name = ($stripslashes) ? stripslashes($name) : $name;		$name = ($specialchar) ? htmlspecialchars($name, ENT_COMPAT, 'UTF-8') : $name;		$s_hidden_fields .= _build_hidden_fields($name, $vars, $specialchar, $stripslashes);	}	return $s_hidden_fields;}/*** Parse cfg file*/function parse_cfg_file($filename, $lines = false){	$parsed_items = array();	if ($lines === false)	{		$lines = file($filename);	}	foreach ($lines as $line)	{		$line = trim($line);		if (!$line || $line[0] == '#' || ($delim_pos = strpos($line, '=')) === false)		{			continue;		}		// Determine first occurrence, since in values the equal sign is allowed		$key = strtolower(trim(substr($line, 0, $delim_pos)));		$value = trim(substr($line, $delim_pos + 1));		if (in_array($value, array('off', 'false', '0')))		{			$value = false;		}		else if (in_array($value, array('on', 'true', '1')))		{			$value = true;		}		else if (!trim($value))		{			$value = '';		}		else if (($value[0] == "'" && $value[sizeof($value) - 1] == "'") || ($value[0] == '"' && $value[sizeof($value) - 1] == '"'))		{			$value = substr($value, 1, sizeof($value)-2);		}		$parsed_items[$key] = $value;	}	return $parsed_items;}/*** Add log event*/function add_log(){	global $db, $user;	// In phpBB 3.1.x i want to have logging in a class to be able to control it	// For now, we need a quite hakish approach to circumvent logging for some actions	// @todo implement cleanly	if (!empty($GLOBALS['skip_add_log']))	{		return false;	}	$args = func_get_args();	$mode			= array_shift($args);	$reportee_id	= ($mode == 'user') ? intval(array_shift($args)) : '';	$forum_id		= ($mode == 'mod') ? intval(array_shift($args)) : '';	$topic_id		= ($mode == 'mod') ? intval(array_shift($args)) : '';	$action			= array_shift($args);	$data			= (!sizeof($args)) ? '' : serialize($args);	$sql_ary = array(		'user_id'		=> (empty($user->data)) ? ANONYMOUS : $user->data['user_id'],		'log_ip'		=> $user->ip,		'log_time'		=> time(),		'log_operation'	=> $action,		'log_data'		=> $data,	);	switch ($mode)	{		case 'admin':			$sql_ary['log_type'] = LOG_ADMIN;		break;		case 'mod':			$sql_ary += array(				'log_type'	=> LOG_MOD,				'forum_id'	=> $forum_id,				'topic_id'	=> $topic_id			);		break;		case 'user':			$sql_ary += array(				'log_type'		=> LOG_USERS,				'reportee_id'	=> $reportee_id			);		break;		case 'critical':			$sql_ary['log_type'] = LOG_CRITICAL;		break;		default:			return false;	}	$db->sql_query('INSERT INTO ' . LOG_TABLE . ' ' . $db->sql_build_array('INSERT', $sql_ary));	return $db->sql_nextid();}/*** Return a nicely formatted backtrace.** Turns the array returned by debug_backtrace() into HTML markup.* Also filters out absolute paths to phpBB root.** @return string	HTML markup*/function get_backtrace(){	$output = '<div style="font-family: monospace;">';	$backtrace = debug_backtrace();	// We skip the first one, because it only shows this file/function	unset($backtrace[0]);	foreach ($backtrace as $trace)	{		// Strip the current directory from path		$trace['file'] = (empty($trace['file'])) ? '(not given by php)' : htmlspecialchars(phpbb_filter_root_path($trace['file']));		$trace['line'] = (empty($trace['line'])) ? '(not given by php)' : $trace['line'];		// Only show function arguments for include etc.		// Other parameters may contain sensible information		$argument = '';		if (!empty($trace['args'][0]) && in_array($trace['function'], array('include', 'require', 'include_once', 'require_once')))		{			$argument = htmlspecialchars(phpbb_filter_root_path($trace['args'][0]));		}		$trace['class'] = (!isset($trace['class'])) ? '' : $trace['class'];		$trace['type'] = (!isset($trace['type'])) ? '' : $trace['type'];		$output .= '<br />';		$output .= '<b>FILE:</b> ' . $trace['file'] . '<br />';		$output .= '<b>LINE:</b> ' . ((!empty($trace['line'])) ? $trace['line'] : '') . '<br />';		$output .= '<b>CALL:</b> ' . htmlspecialchars($trace['class'] . $trace['type'] . $trace['function']);		$output .= '(' . (($argument !== '') ? "'$argument'" : '') . ')<br />';	}	$output .= '</div>';	return $output;}/*** This function returns a regular expression pattern for commonly used expressions* Use with / as delimiter for email mode and # for url modes* mode can be: email|bbcode_htm|url|url_inline|www_url|www_url_inline|relative_url|relative_url_inline|ipv4|ipv6*/function get_preg_expression($mode){	switch ($mode)	{		case 'email':			// Regex written by James Watts and Francisco Jose Martin Moreno			// http://fightingforalostcause.net/misc/2006/compare-email-regex.php			return '([\w\!\#$\%\&\'\*\+\-\/\=\?\^\`{\|\}\~]+\.)*(?:[\w\!\#$\%\'\*\+\-\/\=\?\^\`{\|\}\~]|&amp;)+@((((([a-z0-9]{1}[a-z0-9\-]{0,62}[a-z0-9]{1})|[a-z])\.)+[a-z]{2,6})|(\d{1,3}\.){3}\d{1,3}(\:\d{1,5})?)';		break;		case 'bbcode_htm':			return array(				'#<!\-\- e \-\-><a href="mailto:(.*?)">.*?</a><!\-\- e \-\->#',				'#<!\-\- l \-\-><a (?:class="[\w-]+" )?href="(.*?)(?:(&amp;|\?)sid=[0-9a-f]{32})?">.*?</a><!\-\- l \-\->#',				'#<!\-\- ([mw]) \-\-><a (?:class="[\w-]+" )?href="(.*?)">.*?</a><!\-\- \1 \-\->#',				'#<!\-\- s(.*?) \-\-><img src="\{SMILIES_PATH\}\/.*? \/><!\-\- s\1 \-\->#',				'#<!\-\- .*? \-\->#s',				'#<.*?>#s',			);		break;		// Whoa these look impressive!		// The code to generate the following two regular expressions which match valid IPv4/IPv6 addresses		// can be found in the develop directory		case 'ipv4':			return '#^(?:(?:\d{1,2}|1\d\d|2[0-4]\d|25[0-5])\.){3}(?:\d{1,2}|1\d\d|2[0-4]\d|25[0-5])$#';		break;		case 'ipv6':			return '#^(?:(?:(?:[\dA-F]{1,4}:){6}(?:[\dA-F]{1,4}:[\dA-F]{1,4}|(?:(?:\d{1,2}|1\d\d|2[0-4]\d|25[0-5])\.){3}(?:\d{1,2}|1\d\d|2[0-4]\d|25[0-5])))|(?:::(?:[\dA-F]{1,4}:){0,5}(?:[\dA-F]{1,4}(?::[\dA-F]{1,4})?|(?:(?:\d{1,2}|1\d\d|2[0-4]\d|25[0-5])\.){3}(?:\d{1,2}|1\d\d|2[0-4]\d|25[0-5])))|(?:(?:[\dA-F]{1,4}:):(?:[\dA-F]{1,4}:){4}(?:[\dA-F]{1,4}:[\dA-F]{1,4}|(?:(?:\d{1,2}|1\d\d|2[0-4]\d|25[0-5])\.){3}(?:\d{1,2}|1\d\d|2[0-4]\d|25[0-5])))|(?:(?:[\dA-F]{1,4}:){1,2}:(?:[\dA-F]{1,4}:){3}(?:[\dA-F]{1,4}:[\dA-F]{1,4}|(?:(?:\d{1,2}|1\d\d|2[0-4]\d|25[0-5])\.){3}(?:\d{1,2}|1\d\d|2[0-4]\d|25[0-5])))|(?:(?:[\dA-F]{1,4}:){1,3}:(?:[\dA-F]{1,4}:){2}(?:[\dA-F]{1,4}:[\dA-F]{1,4}|(?:(?:\d{1,2}|1\d\d|2[0-4]\d|25[0-5])\.){3}(?:\d{1,2}|1\d\d|2[0-4]\d|25[0-5])))|(?:(?:[\dA-F]{1,4}:){1,4}:(?:[\dA-F]{1,4}:)(?:[\dA-F]{1,4}:[\dA-F]{1,4}|(?:(?:\d{1,2}|1\d\d|2[0-4]\d|25[0-5])\.){3}(?:\d{1,2}|1\d\d|2[0-4]\d|25[0-5])))|(?:(?:[\dA-F]{1,4}:){1,5}:(?:[\dA-F]{1,4}:[\dA-F]{1,4}|(?:(?:\d{1,2}|1\d\d|2[0-4]\d|25[0-5])\.){3}(?:\d{1,2}|1\d\d|2[0-4]\d|25[0-5])))|(?:(?:[\dA-F]{1,4}:){1,6}:[\dA-F]{1,4})|(?:(?:[\dA-F]{1,4}:){1,7}:)|(?:::))$#i';		break;		case 'url':		case 'url_inline':			$inline = ($mode == 'url') ? ')' : '';			$scheme = ($mode == 'url') ? '[a-z\d+\-.]' : '[a-z\d+]'; // avoid automatic parsing of "word" in "last word.http://..."			// generated with regex generation file in the develop folder			return "[a-z]$scheme*:/{2}(?:(?:[a-z0-9\-._~!$&'($inline*+,;=:@|]+|%[\dA-F]{2})+|[0-9.]+|\[[a-z0-9.]+:[a-z0-9.]+:[a-z0-9.:]+\])(?::\d*)?(?:/(?:[a-z0-9\-._~!$&'($inline*+,;=:@|]+|%[\dA-F]{2})*)*(?:\?(?:[a-z0-9\-._~!$&'($inline*+,;=:@/?|]+|%[\dA-F]{2})*)?(?:\#(?:[a-z0-9\-._~!$&'($inline*+,;=:@/?|]+|%[\dA-F]{2})*)?";		break;		case 'www_url':		case 'www_url_inline':			$inline = ($mode == 'www_url') ? ')' : '';			return "www\.(?:[a-z0-9\-._~!$&'($inline*+,;=:@|]+|%[\dA-F]{2})+(?::\d*)?(?:/(?:[a-z0-9\-._~!$&'($inline*+,;=:@|]+|%[\dA-F]{2})*)*(?:\?(?:[a-z0-9\-._~!$&'($inline*+,;=:@/?|]+|%[\dA-F]{2})*)?(?:\#(?:[a-z0-9\-._~!$&'($inline*+,;=:@/?|]+|%[\dA-F]{2})*)?";		break;		case 'relative_url':		case 'relative_url_inline':			$inline = ($mode == 'relative_url') ? ')' : '';			return "(?:[a-z0-9\-._~!$&'($inline*+,;=:@|]+|%[\dA-F]{2})*(?:/(?:[a-z0-9\-._~!$&'($inline*+,;=:@|]+|%[\dA-F]{2})*)*(?:\?(?:[a-z0-9\-._~!$&'($inline*+,;=:@/?|]+|%[\dA-F]{2})*)?(?:\#(?:[a-z0-9\-._~!$&'($inline*+,;=:@/?|]+|%[\dA-F]{2})*)?";		break;		case 'table_prefix':			return '#^[a-zA-Z][a-zA-Z0-9_]*$#';		break;	}	return '';}/*** Generate regexp for naughty words censoring* Depends on whether installed PHP version supports unicode properties** @param string	$word			word template to be replaced* @param bool	$use_unicode	whether or not to take advantage of PCRE supporting unicode** @return string $preg_expr		regex to use with word censor*/function get_censor_preg_expression($word, $use_unicode = true){	static $unicode_support = null;	// Check whether PHP version supports unicode properties	if (is_null($unicode_support))	{		$unicode_support = ((version_compare(PHP_VERSION, '5.1.0', '>=') || (version_compare(PHP_VERSION, '5.0.0-dev', '<=') && version_compare(PHP_VERSION, '4.4.0', '>='))) && @preg_match('/\p{L}/u', 'a') !== false) ? true : false;	}	// Unescape the asterisk to simplify further conversions	$word = str_replace('\*', '*', preg_quote($word, '#'));	if ($use_unicode && $unicode_support)	{		// Replace asterisk(s) inside the pattern, at the start and at the end of it with regexes		$word = preg_replace(array('#(?<=[\p{Nd}\p{L}_])\*+(?=[\p{Nd}\p{L}_])#iu', '#^\*+#', '#\*+$#'), array('([\x20]*?|[\p{Nd}\p{L}_-]*?)', '[\p{Nd}\p{L}_-]*?', '[\p{Nd}\p{L}_-]*?'), $word);		// Generate the final substitution		$preg_expr = '#(?<![\p{Nd}\p{L}_-])(' . $word . ')(?![\p{Nd}\p{L}_-])#iu';	}	else	{		// Replace the asterisk inside the pattern, at the start and at the end of it with regexes		$word = preg_replace(array('#(?<=\S)\*+(?=\S)#iu', '#^\*+#', '#\*+$#'), array('(\x20*?\S*?)', '\S*?', '\S*?'), $word);		// Generate the final substitution		$preg_expr = '#(?<!\S)(' . $word . ')(?!\S)#iu';	}	return $preg_expr;}/*** Returns the first block of the specified IPv6 address and as many additional* ones as specified in the length paramater.* If length is zero, then an empty string is returned.* If length is greater than 3 the complete IP will be returned*/function short_ipv6($ip, $length){	if ($length < 1)	{		return '';	}	// extend IPv6 addresses	$blocks = substr_count($ip, ':') + 1;	if ($blocks < 9)	{		$ip = str_replace('::', ':' . str_repeat('0000:', 9 - $blocks), $ip);	}	if ($ip[0] == ':')	{		$ip = '0000' . $ip;	}	if ($length < 4)	{		$ip = implode(':', array_slice(explode(':', $ip), 0, 1 + $length));	}	return $ip;}/*** Wrapper for php's checkdnsrr function.** @param string $host	Fully-Qualified Domain Name* @param string $type	Resource record type to lookup*						Supported types are: MX (default), A, AAAA, NS, TXT, CNAME*						Other types may work or may not work** @return mixed		true if entry found,*					false if entry not found,*					null if this function is not supported by this environment** Since null can also be returned, you probably want to compare the result* with === true or === false,** @author bantu*/function phpbb_checkdnsrr($host, $type = 'MX'){	// The dot indicates to search the DNS root (helps those having DNS prefixes on the same domain)	if (substr($host, -1) == '.')	{		$host_fqdn = $host;		$host = substr($host, 0, -1);	}	else	{		$host_fqdn = $host . '.';	}	// $host		has format	some.host.example.com	// $host_fqdn	has format	some.host.example.com.	// If we're looking for an A record we can use gethostbyname()	if ($type == 'A' && function_exists('gethostbyname'))	{		return (@gethostbyname($host_fqdn) == $host_fqdn) ? false : true;	}	// checkdnsrr() is available on Windows since PHP 5.3,	// but until 5.3.3 it only works for MX records	// See: http://bugs.php.net/bug.php?id=51844	// Call checkdnsrr() if	// we're looking for an MX record or	// we're not on Windows or	// we're running a PHP version where #51844 has been fixed	// checkdnsrr() supports AAAA since 5.0.0	// checkdnsrr() supports TXT since 5.2.4	if (		($type == 'MX' || DIRECTORY_SEPARATOR != '\\' || version_compare(PHP_VERSION, '5.3.3', '>=')) &&		($type != 'AAAA' || version_compare(PHP_VERSION, '5.0.0', '>=')) &&		($type != 'TXT' || version_compare(PHP_VERSION, '5.2.4', '>=')) &&		function_exists('checkdnsrr')	)	{		return checkdnsrr($host_fqdn, $type);	}	// dns_get_record() is available since PHP 5; since PHP 5.3 also on Windows,	// but on Windows it does not work reliable for AAAA records before PHP 5.3.1	// Call dns_get_record() if	// we're not looking for an AAAA record or	// we're not on Windows or	// we're running a PHP version where AAAA lookups work reliable	if (		($type != 'AAAA' || DIRECTORY_SEPARATOR != '\\' || version_compare(PHP_VERSION, '5.3.1', '>=')) &&		function_exists('dns_get_record')	)	{		// dns_get_record() expects an integer as second parameter		// We have to convert the string $type to the corresponding integer constant.		$type_constant = 'DNS_' . $type;		$type_param = (defined($type_constant)) ? constant($type_constant) : DNS_ANY;		// dns_get_record() might throw E_WARNING and return false for records that do not exist		$resultset = @dns_get_record($host_fqdn, $type_param);		if (empty($resultset) || !is_array($resultset))		{			return false;		}		else if ($type_param == DNS_ANY)		{			// $resultset is a non-empty array			return true;		}		foreach ($resultset as $result)		{			if (				isset($result['host']) && $result['host'] == $host &&				isset($result['type']) && $result['type'] == $type			)			{				return true;			}		}		return false;	}	// If we're on Windows we can still try to call nslookup via exec() as a last resort	if (DIRECTORY_SEPARATOR == '\\' && function_exists('exec'))	{		@exec('nslookup -type=' . escapeshellarg($type) . ' ' . escapeshellarg($host_fqdn), $output);		// If output is empty, the nslookup failed		if (empty($output))		{			return NULL;		}		foreach ($output as $line)		{			$line = trim($line);			if (empty($line))			{				continue;			}			// Squash tabs and multiple whitespaces to a single whitespace.			$line = preg_replace('/\s+/', ' ', $line);			switch ($type)			{				case 'MX':					if (stripos($line, "$host MX") === 0)					{						return true;					}				break;				case 'NS':					if (stripos($line, "$host nameserver") === 0)					{						return true;					}				break;				case 'TXT':					if (stripos($line, "$host text") === 0)					{						return true;					}				break;				case 'CNAME':					if (stripos($line, "$host canonical name") === 0)					{						return true;					}				break;				default:				case 'AAAA':					// AAAA records returned by nslookup on Windows XP/2003 have this format.					// Later Windows versions use the A record format below for AAAA records.					if (stripos($line, "$host AAAA IPv6 address") === 0)					{						return true;					}				// No break				case 'A':					if (!empty($host_matches))					{						// Second line						if (stripos($line, "Address: ") === 0)						{							return true;						}						else						{							$host_matches = false;						}					}					else if (stripos($line, "Name: $host") === 0)					{						// First line						$host_matches = true;					}				break;			}		}		return false;	}	return NULL;}// Handler, header and footer/*** Error and message handler, call with trigger_error if reqd*/function msg_handler($errno, $msg_text, $errfile, $errline){	global $cache, $db, $auth, $template, $config, $user;	global $phpEx, $phpbb_root_path, $msg_title, $msg_long_text;	// Do not display notices if we suppress them via @	if (error_reporting() == 0 && $errno != E_USER_ERROR && $errno != E_USER_WARNING && $errno != E_USER_NOTICE)	{		return;	}	// Message handler is stripping text. In case we need it, we are possible to define long text...	if (isset($msg_long_text) && $msg_long_text && !$msg_text)	{		$msg_text = $msg_long_text;	}	if (!defined('E_DEPRECATED'))	{		define('E_DEPRECATED', 8192);	}	switch ($errno)	{		case E_NOTICE:		case E_WARNING:			// Check the error reporting level and return if the error level does not match			// If DEBUG is defined the default level is E_ALL			if (($errno & ((defined('DEBUG')) ? E_ALL : error_reporting())) == 0)			{				return;			}			if (strpos($errfile, 'cache') === false && strpos($errfile, 'template.') === false)			{				$errfile = phpbb_filter_root_path($errfile);				$msg_text = phpbb_filter_root_path($msg_text);				$error_name = ($errno === E_WARNING) ? 'PHP Warning' : 'PHP Notice';				echo '<b>[phpBB Debug] ' . $error_name . '</b>: in file <b>' . $errfile . '</b> on line <b>' . $errline . '</b>: <b>' . $msg_text . '</b><br />' . "\n";				// we are writing an image - the user won't see the debug, so let's place it in the log				if (defined('IMAGE_OUTPUT') || defined('IN_CRON'))				{					add_log('critical', 'LOG_IMAGE_GENERATION_ERROR', $errfile, $errline, $msg_text);				}				// echo '<br /><br />BACKTRACE<br />' . get_backtrace() . '<br />' . "\n";			}			return;		break;		case E_USER_ERROR:			if (!empty($user) && !empty($user->lang))			{				$msg_text = (!empty($user->lang[$msg_text])) ? $user->lang[$msg_text] : $msg_text;				$msg_title = (!isset($msg_title)) ? $user->lang['GENERAL_ERROR'] : ((!empty($user->lang[$msg_title])) ? $user->lang[$msg_title] : $msg_title);				$l_return_index = sprintf($user->lang['RETURN_INDEX'], '<a href="' . $phpbb_root_path . '">', '</a>');				$l_notify = '';				if (!empty($config['board_contact']))				{					$l_notify = '<p>' . sprintf($user->lang['NOTIFY_ADMIN_EMAIL'], $config['board_contact']) . '</p>';				}			}			else			{				$msg_title = 'General Error';				$l_return_index = '<a href="' . $phpbb_root_path . '">Return to index page</a>';				$l_notify = '';				if (!empty($config['board_contact']))				{					$l_notify = '<p>Please notify the board administrator or webmaster: <a href="mailto:' . $config['board_contact'] . '">' . $config['board_contact'] . '</a></p>';				}			}			if ((defined('DEBUG') || defined('IN_CRON') || defined('IMAGE_OUTPUT')) && isset($db))			{				// let's avoid loops				$db->sql_return_on_error(true);				add_log('critical', 'LOG_GENERAL_ERROR', $msg_title, $msg_text);				$db->sql_return_on_error(false);			}			// Do not send 200 OK, but service unavailable on errors			send_status_line(503, 'Service Unavailable');			garbage_collection();			// Try to not call the adm page data...			echo '<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">';			echo '<html xmlns="http://www.w3.org/1999/xhtml" dir="ltr">';			echo '<head>';			echo '<meta http-equiv="content-type" content="text/html; charset=utf-8" />';			echo '<title>' . $msg_title . '</title>';			echo '<style type="text/css">' . "\n" . '/* <![CDATA[ */' . "\n";			echo '* { margin: 0; padding: 0; } html { font-size: 100%; height: 100%; margin-bottom: 1px; background-color: #E4EDF0; } body { font-family: "Lucida Grande", Verdana, Helvetica, Arial, sans-serif; color: #536482; background: #E4EDF0; font-size: 62.5%; margin: 0; } ';			echo 'a:link, a:active, a:visited { color: #006699; text-decoration: none; } a:hover { color: #DD6900; text-decoration: underline; } ';			echo '#wrap { padding: 0 20px 15px 20px; min-width: 615px; } #page-header { text-align: right; height: 40px; } #page-footer { clear: both; font-size: 1em; text-align: center; } ';			echo '.panel { margin: 4px 0; background-color: #FFFFFF; border: solid 1px  #A9B8C2; } ';			echo '#errorpage #page-header a { font-weight: bold; line-height: 6em; } #errorpage #content { padding: 10px; } #errorpage #content h1 { line-height: 1.2em; margin-bottom: 0; color: #DF075C; } ';			echo '#errorpage #content div { margin-top: 20px; margin-bottom: 5px; border-bottom: 1px solid #CCCCCC; padding-bottom: 5px; color: #333333; font: bold 1.2em "Lucida Grande", Arial, Helvetica, sans-serif; text-decoration: none; line-height: 120%; text-align: left; } ';			echo "\n" . '/* ]]> */' . "\n";			echo '</style>';			echo '</head>';			echo '<body id="errorpage">';			echo '<div id="wrap">';			echo '	<div id="page-header">';			echo '		' . $l_return_index;			echo '	</div>';			echo '	<div id="acp">';			echo '	<div class="panel">';			echo '		<div id="content">';			echo '			<h1>' . $msg_title . '</h1>';			echo '			<div>' . $msg_text . '</div>';			echo $l_notify;			echo '		</div>';			echo '	</div>';			echo '	</div>';			echo '	<div id="page-footer">';			echo '		Powered by <a href="http://www.phpbb.com/">phpBB</a>&reg; Forum Software &copy; phpBB Group';			echo '	</div>';			echo '</div>';			echo '</body>';			echo '</html>';			exit_handler();			// On a fatal error (and E_USER_ERROR *is* fatal) we never want other scripts to continue and force an exit here.			exit;		break;		case E_USER_WARNING:		case E_USER_NOTICE:			define('IN_ERROR_HANDLER', true);			if (empty($user->data))			{				$user->session_begin();			}			// We re-init the auth array to get correct results on login/logout			$auth->acl($user->data);			if (empty($user->lang))			{				$user->setup();			}			if ($msg_text == 'ERROR_NO_ATTACHMENT' || $msg_text == 'NO_FORUM' || $msg_text == 'NO_TOPIC' || $msg_text == 'NO_USER')			{				send_status_line(404, 'Not Found');			}			$msg_text = (!empty($user->lang[$msg_text])) ? $user->lang[$msg_text] : $msg_text;			$msg_title = (!isset($msg_title)) ? $user->lang['INFORMATION'] : ((!empty($user->lang[$msg_title])) ? $user->lang[$msg_title] : $msg_title);			if (!defined('HEADER_INC'))			{				if (defined('IN_ADMIN') && isset($user->data['session_admin']) && $user->data['session_admin'])				{					adm_page_header($msg_title);				}				else				{					page_header($msg_title, false);				}			}			$template->set_filenames(array(				'body' => 'message_body.html')			);			$template->assign_vars(array(				'MESSAGE_TITLE'		=> $msg_title,				'MESSAGE_TEXT'		=> $msg_text,				'S_USER_WARNING'	=> ($errno == E_USER_WARNING) ? true : false,				'S_USER_NOTICE'		=> ($errno == E_USER_NOTICE) ? true : false)			);			// We do not want the cron script to be called on error messages			define('IN_CRON', true);			if (defined('IN_ADMIN') && isset($user->data['session_admin']) && $user->data['session_admin'])			{				adm_page_footer();			}			else			{				page_footer();			}			exit_handler();		break;		// PHP4 compatibility		case E_DEPRECATED:			return true;		break;	}	// If we notice an error not handled here we pass this back to PHP by returning false	// This may not work for all php versions	return false;}/*** Removes absolute path to phpBB root directory from error messages* and converts backslashes to forward slashes.** @param string $errfile	Absolute file path*							(e.g. /var/www/phpbb3/phpBB/includes/functions.php)*							Please note that if $errfile is outside of the phpBB root,*							the root path will not be found and can not be filtered.* @return string			Relative file path*							(e.g. /includes/functions.php)*/function phpbb_filter_root_path($errfile){	static $root_path;	if (empty($root_path))	{		$root_path = phpbb_realpath(dirname(__FILE__) . '/../');	}	return str_replace(array($root_path, '\\'), array('[ROOT]', '/'), $errfile);}/*** Queries the session table to get information about online guests* @param int $item_id Limits the search to the item with this id* @param string $item The name of the item which is stored in the session table as session_{$item}_id* @return int The number of active distinct guest sessions*/function obtain_guest_count($item_id = 0, $item = 'forum'){	global $db, $config;	if ($item_id)	{		$reading_sql = ' AND s.session_' . $item . '_id = ' . (int) $item_id;	}	else	{		$reading_sql = '';	}	$time = (time() - (intval($config['load_online_time']) * 60));	// Get number of online guests	if ($db->sql_layer === 'sqlite')	{		$sql = 'SELECT COUNT(session_ip) as num_guests			FROM (				SELECT DISTINCT s.session_ip				FROM ' . SESSIONS_TABLE . ' s				WHERE s.session_user_id = ' . ANONYMOUS . '					AND s.session_time >= ' . ($time - ((int) ($time % 60))) .				$reading_sql .			')';	}	else	{		$sql = 'SELECT COUNT(DISTINCT s.session_ip) as num_guests			FROM ' . SESSIONS_TABLE . ' s			WHERE s.session_user_id = ' . ANONYMOUS . '				AND s.session_time >= ' . ($time - ((int) ($time % 60))) .			$reading_sql;	}	$result = $db->sql_query($sql);	$guests_online = (int) $db->sql_fetchfield('num_guests');	$db->sql_freeresult($result);	return $guests_online;}/*** Queries the session table to get information about online users* @param int $item_id Limits the search to the item with this id* @param string $item The name of the item which is stored in the session table as session_{$item}_id* @return array An array containing the ids of online, hidden and visible users, as well as statistical info*/function obtain_users_online($item_id = 0, $item = 'forum'){	global $db, $config, $user;	$reading_sql = '';	if ($item_id !== 0)	{		$reading_sql = ' AND s.session_' . $item . '_id = ' . (int) $item_id;	}	$online_users = array(		'online_users'			=> array(),		'hidden_users'			=> array(),		'total_online'			=> 0,		'visible_online'		=> 0,		'hidden_online'			=> 0,		'guests_online'			=> 0,	);	if ($config['load_online_guests'])	{		$online_users['guests_online'] = obtain_guest_count($item_id, $item);	}	// a little discrete magic to cache this for 30 seconds	$time = (time() - (intval($config['load_online_time']) * 60));	$sql = 'SELECT s.session_user_id, s.session_ip, s.session_viewonline		FROM ' . SESSIONS_TABLE . ' s		WHERE s.session_time >= ' . ($time - ((int) ($time % 30))) .			$reading_sql .		' AND s.session_user_id <> ' . ANONYMOUS;	$result = $db->sql_query($sql);	while ($row = $db->sql_fetchrow($result))	{		// Skip multiple sessions for one user		if (!isset($online_users['online_users'][$row['session_user_id']]))		{			$online_users['online_users'][$row['session_user_id']] = (int) $row['session_user_id'];			if ($row['session_viewonline'])			{				$online_users['visible_online']++;			}			else			{				$online_users['hidden_users'][$row['session_user_id']] = (int) $row['session_user_id'];				$online_users['hidden_online']++;			}		}	}	$online_users['total_online'] = $online_users['guests_online'] + $online_users['visible_online'] + $online_users['hidden_online'];	$db->sql_freeresult($result);	return $online_users;}/*** Uses the result of obtain_users_online to generate a localized, readable representation.* @param mixed $online_users result of obtain_users_online - array with user_id lists for total, hidden and visible users, and statistics* @param int $item_id Indicate that the data is limited to one item and not global* @param string $item The name of the item which is stored in the session table as session_{$item}_id* @return array An array containing the string for output to the template*/function obtain_users_online_string($online_users, $item_id = 0, $item = 'forum'){	global $config, $db, $user, $auth;	$user_online_link = $online_userlist = '';	// Need caps version of $item for language-strings	$item_caps = strtoupper($item);	if (sizeof($online_users['online_users']))	{		$sql = 'SELECT username, username_clean, user_id, user_type, user_allow_viewonline, user_colour				FROM ' . USERS_TABLE . '				WHERE ' . $db->sql_in_set('user_id', $online_users['online_users']) . '				ORDER BY username_clean ASC';		$result = $db->sql_query($sql);		while ($row = $db->sql_fetchrow($result))		{			// User is logged in and therefore not a guest			if ($row['user_id'] != ANONYMOUS)			{				if (isset($online_users['hidden_users'][$row['user_id']]))				{					$row['username'] = '<em>' . $row['username'] . '</em>';				}				if (!isset($online_users['hidden_users'][$row['user_id']]) || $auth->acl_get('u_viewonline'))				{					$user_online_link = get_username_string(($row['user_type'] <> USER_IGNORE) ? 'full' : 'no_profile', $row['user_id'], $row['username'], $row['user_colour']);					$online_userlist .= ($online_userlist != '') ? ', ' . $user_online_link : $user_online_link;				}			}		}		$db->sql_freeresult($result);	}	if (!$online_userlist)	{		$online_userlist = $user->lang['NO_ONLINE_USERS'];	}	if ($item_id === 0)	{		$online_userlist = $user->lang['REGISTERED_USERS'] . ' ' . $online_userlist;	}	else if ($config['load_online_guests'])	{		$l_online = ($online_users['guests_online'] === 1) ? $user->lang['BROWSING_' . $item_caps . '_GUEST'] : $user->lang['BROWSING_' . $item_caps . '_GUESTS'];		$online_userlist = sprintf($l_online, $online_userlist, $online_users['guests_online']);	}	else	{		$online_userlist = sprintf($user->lang['BROWSING_' . $item_caps], $online_userlist);	}	// Build online listing	$vars_online = array(		'ONLINE'	=> array('total_online', 'l_t_user_s', 0),		'REG'		=> array('visible_online', 'l_r_user_s', !$config['load_online_guests']),		'HIDDEN'	=> array('hidden_online', 'l_h_user_s', $config['load_online_guests']),		'GUEST'		=> array('guests_online', 'l_g_user_s', 0)	);	foreach ($vars_online as $l_prefix => $var_ary)	{		if ($var_ary[2])		{			$l_suffix = '_AND';		}		else		{			$l_suffix = '';		}		switch ($online_users[$var_ary[0]])		{			case 0:				${$var_ary[1]} = $user->lang[$l_prefix . '_USERS_ZERO_TOTAL' . $l_suffix];			break;			case 1:				${$var_ary[1]} = $user->lang[$l_prefix . '_USER_TOTAL' . $l_suffix];			break;			default:				${$var_ary[1]} = $user->lang[$l_prefix . '_USERS_TOTAL' . $l_suffix];			break;		}	}	unset($vars_online);	$l_online_users = sprintf($l_t_user_s, $online_users['total_online']);	$l_online_users .= sprintf($l_r_user_s, $online_users['visible_online']);	$l_online_users .= sprintf($l_h_user_s, $online_users['hidden_online']);	if ($config['load_online_guests'])	{		$l_online_users .= sprintf($l_g_user_s, $online_users['guests_online']);	}	return array(		'online_userlist'	=> $online_userlist,		'l_online_users'	=> $l_online_users,	);}/*** Get option bitfield from custom data** @param int	$bit		The bit/value to get* @param int	$data		Current bitfield to check* @return bool	Returns true if value of constant is set in bitfield, else false*/function phpbb_optionget($bit, $data){	return ($data & 1 << (int) $bit) ? true : false;}/*** Set option bitfield** @param int	$bit		The bit/value to set/unset* @param bool	$set		True if option should be set, false if option should be unset.* @param int	$data		Current bitfield to change** @return int	The new bitfield*/function phpbb_optionset($bit, $set, $data){	if ($set && !($data & 1 << $bit))	{		$data += 1 << $bit;	}	else if (!$set && ($data & 1 << $bit))	{		$data -= 1 << $bit;	}	return $data;}/*** Login using http authenticate.** @param array	$param		Parameter array, see $param_defaults array.** @return void*/function phpbb_http_login($param){	global $auth, $user;	global $config;	$param_defaults = array(		'auth_message'	=> '',		'autologin'		=> false,		'viewonline'	=> true,		'admin'			=> false,	);	// Overwrite default values with passed values	$param = array_merge($param_defaults, $param);	// User is already logged in	// We will not overwrite his session	if (!empty($user->data['is_registered']))	{		return;	}	// $_SERVER keys to check	$username_keys = array(		'PHP_AUTH_USER',		'Authorization',		'REMOTE_USER', 'REDIRECT_REMOTE_USER',		'HTTP_AUTHORIZATION', 'REDIRECT_HTTP_AUTHORIZATION',		'REMOTE_AUTHORIZATION', 'REDIRECT_REMOTE_AUTHORIZATION',		'AUTH_USER',	);	$password_keys = array(		'PHP_AUTH_PW',		'REMOTE_PASSWORD',		'AUTH_PASSWORD',	);	$username = null;	foreach ($username_keys as $k)	{		if (isset($_SERVER[$k]))		{			$username = $_SERVER[$k];			break;		}	}	$password = null;	foreach ($password_keys as $k)	{		if (isset($_SERVER[$k]))		{			$password = $_SERVER[$k];			break;		}	}	// Decode encoded information (IIS, CGI, FastCGI etc.)	if (!is_null($username) && is_null($password) && strpos($username, 'Basic ') === 0)	{		list($username, $password) = explode(':', base64_decode(substr($username, 6)), 2);	}	if (!is_null($username) && !is_null($password))	{		set_var($username, $username, 'string', true);		set_var($password, $password, 'string', true);		$auth_result = $auth->login($username, $password, $param['autologin'], $param['viewonline'], $param['admin']);		if ($auth_result['status'] == LOGIN_SUCCESS)		{			return;		}		else if ($auth_result['status'] == LOGIN_ERROR_ATTEMPTS)		{			send_status_line(401, 'Unauthorized');			trigger_error('NOT_AUTHORISED');		}	}	// Prepend sitename to auth_message	$param['auth_message'] = ($param['auth_message'] === '') ? $config['sitename'] : $config['sitename'] . ' - ' . $param['auth_message'];	// We should probably filter out non-ASCII characters - RFC2616	$param['auth_message'] = preg_replace('/[\x80-\xFF]/', '?', $param['auth_message']);	header('WWW-Authenticate: Basic realm="' . $param['auth_message'] . '"');	send_status_line(401, 'Unauthorized');	trigger_error('NOT_AUTHORISED');}/*** Generate page header*/function page_header($page_title = '', $display_online_list = true, $item_id = 0, $item = 'forum'){	global $db, $config, $template, $SID, $_SID, $_EXTRA_URL, $user, $auth, $phpEx, $phpbb_root_path;	if (defined('HEADER_INC'))	{		return;	}	define('HEADER_INC', true);	// gzip_compression	if ($config['gzip_compress'])	{		// to avoid partially compressed output resulting in blank pages in		// the browser or error messages, compression is disabled in a few cases:		//		// 1) if headers have already been sent, this indicates plaintext output		//    has been started so further content must not be compressed		// 2) the length of the current output buffer is non-zero. This means		//    there is already some uncompressed content in this output buffer		//    so further output must not be compressed		// 3) if more than one level of output buffering is used because we		//    cannot test all output buffer level content lengths. One level		//    could be caused by php.ini output_buffering. Anything		//    beyond that is manual, so the code wrapping phpBB in output buffering		//    can easily compress the output itself.		//		if (@extension_loaded('zlib') && !headers_sent() && ob_get_level() <= 1 && ob_get_length() == 0)		{			ob_start('ob_gzhandler');		}	}	// Generate logged in/logged out status	if ($user->data['user_id'] != ANONYMOUS)	{		$u_login_logout = append_sid("{$phpbb_root_path}ucp.$phpEx", 'mode=logout', true, $user->session_id);		$l_login_logout = sprintf($user->lang['LOGOUT_USER'], $user->data['username']);	}	else	{		$u_login_logout = append_sid("{$phpbb_root_path}ucp.$phpEx", 'mode=login');		$l_login_logout = $user->lang['LOGIN'];	}	// Last visit date/time	$s_last_visit = ($user->data['user_id'] != ANONYMOUS) ? $user->format_date($user->data['session_last_visit']) : '';	// Get users online list ... if required	$l_online_users = $online_userlist = $l_online_record = $l_online_time = '';	if ($config['load_online'] && $config['load_online_time'] && $display_online_list)	{		/**		* Load online data:		* For obtaining another session column use $item and $item_id in the function-parameter, whereby the column is session_{$item}_id.		*/		$item_id = max($item_id, 0);		$online_users = obtain_users_online($item_id, $item);		$user_online_strings = obtain_users_online_string($online_users, $item_id, $item);		$l_online_users = $user_online_strings['l_online_users'];		$online_userlist = $user_online_strings['online_userlist'];		$total_online_users = $online_users['total_online'];		if ($total_online_users > $config['record_online_users'])		{			set_config('record_online_users', $total_online_users, true);			set_config('record_online_date', time(), true);		}		$l_online_record = sprintf($user->lang['RECORD_ONLINE_USERS'], $config['record_online_users'], $user->format_date($config['record_online_date'], false, true));		$l_online_time = ($config['load_online_time'] == 1) ? 'VIEW_ONLINE_TIME' : 'VIEW_ONLINE_TIMES';		$l_online_time = sprintf($user->lang[$l_online_time], $config['load_online_time']);	}	$l_privmsgs_text = $l_privmsgs_text_unread = '';	$s_privmsg_new = false;	// Obtain number of new private messages if user is logged in	if (!empty($user->data['is_registered']))	{		if ($user->data['user_new_privmsg'])		{			$l_message_new = ($user->data['user_new_privmsg'] == 1) ? $user->lang['NEW_PM'] : $user->lang['NEW_PMS'];			$l_privmsgs_text = sprintf($l_message_new, $user->data['user_new_privmsg']);			if (!$user->data['user_last_privmsg'] || $user->data['user_last_privmsg'] > $user->data['session_last_visit'])			{				$sql = 'UPDATE ' . USERS_TABLE . '					SET user_last_privmsg = ' . $user->data['session_last_visit'] . '					WHERE user_id = ' . $user->data['user_id'];				$db->sql_query($sql);				$s_privmsg_new = true;			}			else			{				$s_privmsg_new = false;			}		}		else		{			$l_privmsgs_text = $user->lang['NO_NEW_PM'];			$s_privmsg_new = false;		}		$l_privmsgs_text_unread = '';		if ($user->data['user_unread_privmsg'] && $user->data['user_unread_privmsg'] != $user->data['user_new_privmsg'])		{			$l_message_unread = ($user->data['user_unread_privmsg'] == 1) ? $user->lang['UNREAD_PM'] : $user->lang['UNREAD_PMS'];			$l_privmsgs_text_unread = sprintf($l_message_unread, $user->data['user_unread_privmsg']);		}	}	$forum_id = request_var('f', 0);	$topic_id = request_var('t', 0);	$s_feed_news = false;	// Get option for news	if ($config['feed_enable'])	{		$sql = 'SELECT forum_id			FROM ' . FORUMS_TABLE . '			WHERE ' . $db->sql_bit_and('forum_options', FORUM_OPTION_FEED_NEWS, '<> 0');		$result = $db->sql_query_limit($sql, 1, 0, 600);		$s_feed_news = (int) $db->sql_fetchfield('forum_id');		$db->sql_freeresult($result);	}	// Determine board url - we may need it later	$board_url = generate_board_url() . '/';	$web_path = (defined('PHPBB_USE_BOARD_URL_PATH') && PHPBB_USE_BOARD_URL_PATH) ? $board_url : $phpbb_root_path;	// Which timezone?	$tz = ($user->data['user_id'] != ANONYMOUS) ? strval(doubleval($user->data['user_timezone'])) : strval(doubleval($config['board_timezone']));	// Send a proper content-language to the output	$user_lang = $user->lang['USER_LANG'];	if (strpos($user_lang, '-x-') !== false)	{		$user_lang = substr($user_lang, 0, strpos($user_lang, '-x-'));	}	$s_search_hidden_fields = array();	if ($_SID)	{		$s_search_hidden_fields['sid'] = $_SID;	}	if (!empty($_EXTRA_URL))	{		foreach ($_EXTRA_URL as $url_param)		{			$url_param = explode('=', $url_param, 2);			$s_hidden_fields[$url_param[0]] = $url_param[1];		}	}	// The following assigns all _common_ variables that may be used at any point in a template.	$template->assign_vars(array(		'SITENAME'						=> $config['sitename'],		'SITE_DESCRIPTION'				=> $config['site_desc'],		'PAGE_TITLE'					=> $page_title,		'SCRIPT_NAME'					=> str_replace('.' . $phpEx, '', $user->page['page_name']),		'LAST_VISIT_DATE'				=> sprintf($user->lang['YOU_LAST_VISIT'], $s_last_visit),		'LAST_VISIT_YOU'				=> $s_last_visit,		'CURRENT_TIME'					=> sprintf($user->lang['CURRENT_TIME'], $user->format_date(time(), false, true)),		'TOTAL_USERS_ONLINE'			=> $l_online_users,		'LOGGED_IN_USER_LIST'			=> $online_userlist,		'RECORD_USERS'					=> $l_online_record,		'PRIVATE_MESSAGE_INFO'			=> $l_privmsgs_text,		'PRIVATE_MESSAGE_INFO_UNREAD'	=> $l_privmsgs_text_unread,		'S_USER_NEW_PRIVMSG'			=> $user->data['user_new_privmsg'],		'S_USER_UNREAD_PRIVMSG'			=> $user->data['user_unread_privmsg'],		'S_USER_NEW'					=> $user->data['user_new'],		'SID'				=> $SID,		'_SID'				=> $_SID,		'SESSION_ID'		=> $user->session_id,		'ROOT_PATH'			=> $phpbb_root_path,		'BOARD_URL'			=> $board_url,		'L_LOGIN_LOGOUT'	=> $l_login_logout,		'L_INDEX'			=> $user->lang['FORUM_INDEX'],		'L_ONLINE_EXPLAIN'	=> $l_online_time,		'U_PRIVATEMSGS'			=> append_sid("{$phpbb_root_path}ucp.$phpEx", 'i=pm&amp;folder=inbox'),		'U_RETURN_INBOX'		=> append_sid("{$phpbb_root_path}ucp.$phpEx", 'i=pm&amp;folder=inbox'),		'U_POPUP_PM'			=> append_sid("{$phpbb_root_path}ucp.$phpEx", 'i=pm&amp;mode=popup'),		'UA_POPUP_PM'			=> addslashes(append_sid("{$phpbb_root_path}ucp.$phpEx", 'i=pm&amp;mode=popup')),		'U_MEMBERLIST'			=> append_sid("{$phpbb_root_path}memberlist.$phpEx"),		'U_VIEWONLINE'			=> ($auth->acl_gets('u_viewprofile', 'a_user', 'a_useradd', 'a_userdel')) ? append_sid("{$phpbb_root_path}viewonline.$phpEx") : '',		'U_LOGIN_LOGOUT'		=> $u_login_logout,		'U_INDEX'				=> append_sid("{$phpbb_root_path}index.$phpEx"),		'U_SEARCH'				=> append_sid("{$phpbb_root_path}search.$phpEx"),		'U_REGISTER'			=> append_sid("{$phpbb_root_path}ucp.$phpEx", 'mode=register'),		'U_PROFILE'				=> append_sid("{$phpbb_root_path}ucp.$phpEx"),		'U_MODCP'				=> append_sid("{$phpbb_root_path}mcp.$phpEx", false, true, $user->session_id),		'U_FAQ'					=> append_sid("{$phpbb_root_path}faq.$phpEx"),		'U_SEARCH_SELF'			=> append_sid("{$phpbb_root_path}search.$phpEx", 'search_id=egosearch'),		'U_SEARCH_NEW'			=> append_sid("{$phpbb_root_path}search.$phpEx", 'search_id=newposts'),		'U_SEARCH_UNANSWERED'	=> append_sid("{$phpbb_root_path}search.$phpEx", 'search_id=unanswered'),		'U_SEARCH_UNREAD'		=> append_sid("{$phpbb_root_path}search.$phpEx", 'search_id=unreadposts'),		'U_SEARCH_ACTIVE_TOPICS'=> append_sid("{$phpbb_root_path}search.$phpEx", 'search_id=active_topics'),		'U_DELETE_COOKIES'		=> append_sid("{$phpbb_root_path}ucp.$phpEx", 'mode=delete_cookies'),		'U_TEAM'				=> ($user->data['user_id'] != ANONYMOUS && !$auth->acl_get('u_viewprofile')) ? '' : append_sid("{$phpbb_root_path}memberlist.$phpEx", 'mode=leaders'),		'U_TERMS_USE'			=> append_sid("{$phpbb_root_path}ucp.$phpEx", 'mode=terms'),		'U_PRIVACY'				=> append_sid("{$phpbb_root_path}ucp.$phpEx", 'mode=privacy'),		'U_RESTORE_PERMISSIONS'	=> ($user->data['user_perm_from'] && $auth->acl_get('a_switchperm')) ? append_sid("{$phpbb_root_path}ucp.$phpEx", 'mode=restore_perm') : '',		'U_FEED'				=> generate_board_url() . "/feed.$phpEx",		'S_USER_LOGGED_IN'		=> ($user->data['user_id'] != ANONYMOUS) ? true : false,		'S_AUTOLOGIN_ENABLED'	=> ($config['allow_autologin']) ? true : false,		'S_BOARD_DISABLED'		=> ($config['board_disable']) ? true : false,		'S_REGISTERED_USER'		=> (!empty($user->data['is_registered'])) ? true : false,		'S_IS_BOT'				=> (!empty($user->data['is_bot'])) ? true : false,		'S_USER_PM_POPUP'		=> $user->optionget('popuppm'),		'S_USER_LANG'			=> $user_lang,		'S_USER_BROWSER'		=> (isset($user->data['session_browser'])) ? $user->data['session_browser'] : $user->lang['UNKNOWN_BROWSER'],		'S_USERNAME'			=> $user->data['username'],		'S_CONTENT_DIRECTION'	=> $user->lang['DIRECTION'],		'S_CONTENT_FLOW_BEGIN'	=> ($user->lang['DIRECTION'] == 'ltr') ? 'left' : 'right',		'S_CONTENT_FLOW_END'	=> ($user->lang['DIRECTION'] == 'ltr') ? 'right' : 'left',		'S_CONTENT_ENCODING'	=> 'UTF-8',		'S_TIMEZONE'			=> ($user->data['user_dst'] || ($user->data['user_id'] == ANONYMOUS && $config['board_dst'])) ? sprintf($user->lang['ALL_TIMES'], $user->lang['tz'][$tz], $user->lang['tz']['dst']) : sprintf($user->lang['ALL_TIMES'], $user->lang['tz'][$tz], ''),		'S_DISPLAY_ONLINE_LIST'	=> ($l_online_time) ? 1 : 0,		'S_DISPLAY_SEARCH'		=> (!$config['load_search']) ? 0 : (isset($auth) ? ($auth->acl_get('u_search') && $auth->acl_getf_global('f_search')) : 1),		'S_DISPLAY_PM'			=> ($config['allow_privmsg'] && !empty($user->data['is_registered']) && ($auth->acl_get('u_readpm') || $auth->acl_get('u_sendpm'))) ? true : false,		'S_DISPLAY_MEMBERLIST'	=> (isset($auth)) ? $auth->acl_get('u_viewprofile') : 0,		'S_NEW_PM'				=> ($s_privmsg_new) ? 1 : 0,		'S_REGISTER_ENABLED'	=> ($config['require_activation'] != USER_ACTIVATION_DISABLE) ? true : false,		'S_FORUM_ID'			=> $forum_id,		'S_TOPIC_ID'			=> $topic_id,		'S_LOGIN_ACTION'		=> ((!defined('ADMIN_START')) ? append_sid("{$phpbb_root_path}ucp.$phpEx", 'mode=login') : append_sid("index.$phpEx", false, true, $user->session_id)),		'S_LOGIN_REDIRECT'		=> build_hidden_fields(array('redirect' => build_url())),		'S_ENABLE_FEEDS'			=> ($config['feed_enable']) ? true : false,		'S_ENABLE_FEEDS_OVERALL'	=> ($config['feed_overall']) ? true : false,		'S_ENABLE_FEEDS_FORUMS'		=> ($config['feed_overall_forums']) ? true : false,		'S_ENABLE_FEEDS_TOPICS'		=> ($config['feed_topics_new']) ? true : false,		'S_ENABLE_FEEDS_TOPICS_ACTIVE'	=> ($config['feed_topics_active']) ? true : false,		'S_ENABLE_FEEDS_NEWS'		=> ($s_feed_news) ? true : false,		'S_LOAD_UNREADS'			=> ($config['load_unreads_search'] && ($config['load_anon_lastread'] || $user->data['is_registered'])) ? true : false,		'S_SEARCH_HIDDEN_FIELDS'	=> build_hidden_fields($s_search_hidden_fields),		'T_THEME_PATH'			=> "{$web_path}styles/" . $user->theme['theme_path'] . '/theme',		'T_TEMPLATE_PATH'		=> "{$web_path}styles/" . $user->theme['template_path'] . '/template',		'T_SUPER_TEMPLATE_PATH'	=> (isset($user->theme['template_inherit_path']) && $user->theme['template_inherit_path']) ? "{$web_path}styles/" . $user->theme['template_inherit_path'] . '/template' : "{$web_path}styles/" . $user->theme['template_path'] . '/template',		'T_IMAGESET_PATH'		=> "{$web_path}styles/" . $user->theme['imageset_path'] . '/imageset',		'T_IMAGESET_LANG_PATH'	=> "{$web_path}styles/" . $user->theme['imageset_path'] . '/imageset/' . $user->lang_name,		'T_IMAGES_PATH'			=> "{$web_path}images/",		'T_SMILIES_PATH'		=> "{$web_path}{$config['smilies_path']}/",		'T_AVATAR_PATH'			=> "{$web_path}{$config['avatar_path']}/",		'T_AVATAR_GALLERY_PATH'	=> "{$web_path}{$config['avatar_gallery_path']}/",		'T_ICONS_PATH'			=> "{$web_path}{$config['icons_path']}/",		'T_RANKS_PATH'			=> "{$web_path}{$config['ranks_path']}/",		'T_UPLOAD_PATH'			=> "{$web_path}{$config['upload_path']}/",		'T_STYLESHEET_LINK'		=> (!$user->theme['theme_storedb']) ? "{$web_path}styles/" . $user->theme['theme_path'] . '/theme/stylesheet.css' : append_sid("{$phpbb_root_path}style.$phpEx", 'id=' . $user->theme['style_id'] . '&amp;lang=' . $user->lang_name),		'T_STYLESHEET_NAME'		=> $user->theme['theme_name'],		'T_THEME_NAME'			=> $user->theme['theme_path'],		'T_TEMPLATE_NAME'		=> $user->theme['template_path'],		'T_SUPER_TEMPLATE_NAME'	=> (isset($user->theme['template_inherit_path']) && $user->theme['template_inherit_path']) ? $user->theme['template_inherit_path'] : $user->theme['template_path'],		'T_IMAGESET_NAME'		=> $user->theme['imageset_path'],		'T_IMAGESET_LANG_NAME'	=> $user->data['user_lang'],		'T_IMAGES'				=> 'images',		'T_SMILIES'				=> $config['smilies_path'],		'T_AVATAR'				=> $config['avatar_path'],		'T_AVATAR_GALLERY'		=> $config['avatar_gallery_path'],		'T_ICONS'				=> $config['icons_path'],		'T_RANKS'				=> $config['ranks_path'],		'T_UPLOAD'				=> $config['upload_path'],		'SITE_LOGO_IMG'			=> $user->img('site_logo'),		'A_COOKIE_SETTINGS'		=> addslashes('; path=' . $config['cookie_path'] . ((!$config['cookie_domain'] || $config['cookie_domain'] == 'localhost' || $config['cookie_domain'] == '127.0.0.1') ? '' : '; domain=' . $config['cookie_domain']) . ((!$config['cookie_secure']) ? '' : '; secure')),	));	// application/xhtml+xml not used because of IE	header('Content-type: text/html; charset=UTF-8');	header('Cache-Control: private, no-cache="set-cookie"');	header('Expires: 0');	header('Pragma: no-cache');	if (!empty($user->data['is_bot']))	{		// Let reverse proxies know we detected a bot.		header('X-PHPBB-IS-BOT: yes');	}	return;}/*** Generate page footer*/function page_footer($run_cron = true){	global $db, $config, $template, $user, $auth, $cache, $starttime, $phpbb_root_path, $phpEx;	// Output page creation time	if (defined('DEBUG'))	{		$mtime = explode(' ', microtime());		$totaltime = $mtime[0] + $mtime[1] - $starttime;		if (!empty($_REQUEST['explain']) && $auth->acl_get('a_') && defined('DEBUG_EXTRA') && method_exists($db, 'sql_report'))		{			$db->sql_report('display');		}		$debug_output = sprintf('Time : %.3fs | ' . $db->sql_num_queries() . ' Queries | GZIP : ' . (($config['gzip_compress'] && @extension_loaded('zlib')) ? 'On' : 'Off') . (($user->load) ? ' | Load : ' . $user->load : ''), $totaltime);		if ($auth->acl_get('a_') && defined('DEBUG_EXTRA'))		{			if (function_exists('memory_get_usage'))			{				if ($memory_usage = memory_get_usage())				{					global $base_memory_usage;					$memory_usage -= $base_memory_usage;					$memory_usage = get_formatted_filesize($memory_usage);					$debug_output .= ' | Memory Usage: ' . $memory_usage;				}			}			$debug_output .= ' | <a href="' . build_url() . '&amp;explain=1">Explain</a>';		}	}	$template->assign_vars(array(		'DEBUG_OUTPUT'			=> (defined('DEBUG')) ? $debug_output : '',		'TRANSLATION_INFO'		=> (!empty($user->lang['TRANSLATION_INFO'])) ? $user->lang['TRANSLATION_INFO'] : '',		'U_ACP' => ($auth->acl_get('a_') && !empty($user->data['is_registered'])) ? append_sid("{$phpbb_root_path}adm/index.$phpEx", false, true, $user->session_id) : '')	);	// Call cron-type script	$call_cron = false;	if (!defined('IN_CRON') && $run_cron && !$config['board_disable'] && !$user->data['is_bot'])	{		$call_cron = true;		$time_now = (!empty($user->time_now) && is_int($user->time_now)) ? $user->time_now : time();		// Any old lock present?		if (!empty($config['cron_lock']))		{			$cron_time = explode(' ', $config['cron_lock']);			// If 1 hour lock is present we do not call cron.php			if ($cron_time[0] + 3600 >= $time_now)			{				$call_cron = false;			}		}	}	// Call cron job?	if ($call_cron)	{		$cron_type = '';		if ($time_now - $config['queue_interval'] > $config['last_queue_run'] && !defined('IN_ADMIN') && file_exists($phpbb_root_path . 'cache/queue.' . $phpEx))		{			// Process email queue			$cron_type = 'queue';		}		else if (method_exists($cache, 'tidy') && $time_now - $config['cache_gc'] > $config['cache_last_gc'])		{			// Tidy the cache			$cron_type = 'tidy_cache';		}		else if ($config['warnings_expire_days'] && ($time_now - $config['warnings_gc'] > $config['warnings_last_gc']))		{			$cron_type = 'tidy_warnings';		}		else if ($time_now - $config['database_gc'] > $config['database_last_gc'])		{			// Tidy the database			$cron_type = 'tidy_database';		}		else if ($time_now - $config['search_gc'] > $config['search_last_gc'])		{			// Tidy the search			$cron_type = 'tidy_search';		}		else if ($time_now - $config['session_gc'] > $config['session_last_gc'])		{			$cron_type = 'tidy_sessions';		}		if ($cron_type)		{			$template->assign_var('RUN_CRON_TASK', '<img src="' . append_sid($phpbb_root_path . 'cron.' . $phpEx, 'cron_type=' . $cron_type) . '" width="1" height="1" alt="cron" />');		}	}	$template->display('body');	garbage_collection();	exit_handler();}/*** Closing the cache object and the database* Cool function name, eh? We might want to add operations to it later*/function garbage_collection(){	global $cache, $db;	// Unload cache, must be done before the DB connection if closed	if (!empty($cache))	{		$cache->unload();	}	// Close our DB connection.	if (!empty($db))	{		$db->sql_close();	}}/*** Handler for exit calls in phpBB.* This function supports hooks.** Note: This function is called after the template has been outputted.*/function exit_handler(){	global $phpbb_hook, $config;	if (!empty($phpbb_hook) && $phpbb_hook->call_hook(__FUNCTION__))	{		if ($phpbb_hook->hook_return(__FUNCTION__))		{			return $phpbb_hook->hook_return_result(__FUNCTION__);		}	}	// As a pre-caution... some setups display a blank page if the flush() is not there.	(ob_get_level() > 0) ? @ob_flush() : @flush();	exit;}/*** Handler for init calls in phpBB. This function is called in user::setup();* This function supports hooks.*/function phpbb_user_session_handler(){	global $phpbb_hook;	if (!empty($phpbb_hook) && $phpbb_hook->call_hook(__FUNCTION__))	{		if ($phpbb_hook->hook_return(__FUNCTION__))		{			return $phpbb_hook->hook_return_result(__FUNCTION__);		}	}	return;}?>
<?php/**** @package install* @version $Id$* @copyright (c) 2006 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @ignore*/if (!defined('IN_PHPBB')){	exit;}/*** Determine if we are able to load a specified PHP module and do so if possible*/function can_load_dll($dll){	// SQLite2 is a tricky thing, from 5.0.0 it requires PDO; if PDO is not loaded we must state that SQLite is unavailable	// as the installer doesn't understand that the extension has a prerequisite.	//	// On top of this sometimes the SQLite extension is compiled for a different version of PDO	// by some Linux distributions which causes phpBB to bomb out with a blank page.	//	// Net result we'll disable automatic inclusion of SQLite support	//	// See: r9618 and #56105	if ($dll == 'sqlite')	{		return false;	}	return ((@ini_get('enable_dl') || strtolower(@ini_get('enable_dl')) == 'on') && (!@ini_get('safe_mode') || strtolower(@ini_get('safe_mode')) == 'off') && function_exists('dl') && @dl($dll . '.' . PHP_SHLIB_SUFFIX)) ? true : false;}/*** Returns an array of available DBMS with some data, if a DBMS is specified it will only* return data for that DBMS and will load its extension if necessary.*/function get_available_dbms($dbms = false, $return_unavailable = false, $only_20x_options = false){	global $lang;	$available_dbms = array(		'firebird'	=> array(			'LABEL'			=> 'FireBird',			'SCHEMA'		=> 'firebird',			'MODULE'		=> 'interbase',			'DELIM'			=> ';;',			'COMMENTS'		=> 'remove_remarks',			'DRIVER'		=> 'firebird',			'AVAILABLE'		=> true,			'2.0.x'			=> false,		),		'mysqli'	=> array(			'LABEL'			=> 'MySQL with MySQLi Extension',			'SCHEMA'		=> 'mysql_41',			'MODULE'		=> 'mysqli',			'DELIM'			=> ';',			'COMMENTS'		=> 'remove_remarks',			'DRIVER'		=> 'mysqli',			'AVAILABLE'		=> true,			'2.0.x'			=> true,		),		'mysql'		=> array(			'LABEL'			=> 'MySQL',			'SCHEMA'		=> 'mysql',			'MODULE'		=> 'mysql',			'DELIM'			=> ';',			'COMMENTS'		=> 'remove_remarks',			'DRIVER'		=> 'mysql',			'AVAILABLE'		=> true,			'2.0.x'			=> true,		),		'mssql'		=> array(			'LABEL'			=> 'MS SQL Server 2000+',			'SCHEMA'		=> 'mssql',			'MODULE'		=> 'mssql',			'DELIM'			=> 'GO',			'COMMENTS'		=> 'remove_comments',			'DRIVER'		=> 'mssql',			'AVAILABLE'		=> true,			'2.0.x'			=> true,		),		'mssql_odbc'=>	array(			'LABEL'			=> 'MS SQL Server [ ODBC ]',			'SCHEMA'		=> 'mssql',			'MODULE'		=> 'odbc',			'DELIM'			=> 'GO',			'COMMENTS'		=> 'remove_comments',			'DRIVER'		=> 'mssql_odbc',			'AVAILABLE'		=> true,			'2.0.x'			=> true,		),		'mssqlnative'		=> array(			'LABEL'			=> 'MS SQL Server 2005+ [ Native ]',			'SCHEMA'		=> 'mssql',			'MODULE'		=> 'sqlsrv',			'DELIM'			=> 'GO',			'COMMENTS'		=> 'remove_comments',			'DRIVER'		=> 'mssqlnative',			'AVAILABLE'		=> true,			'2.0.x'			=> false,		),					'oracle'	=>	array(			'LABEL'			=> 'Oracle',			'SCHEMA'		=> 'oracle',			'MODULE'		=> 'oci8',			'DELIM'			=> '/',			'COMMENTS'		=> 'remove_comments',			'DRIVER'		=> 'oracle',			'AVAILABLE'		=> true,			'2.0.x'			=> false,		),		'postgres' => array(			'LABEL'			=> 'PostgreSQL 7.x/8.x',			'SCHEMA'		=> 'postgres',			'MODULE'		=> 'pgsql',			'DELIM'			=> ';',			'COMMENTS'		=> 'remove_comments',			'DRIVER'		=> 'postgres',			'AVAILABLE'		=> true,			'2.0.x'			=> true,		),		'sqlite'		=> array(			'LABEL'			=> 'SQLite',			'SCHEMA'		=> 'sqlite',			'MODULE'		=> 'sqlite',			'DELIM'			=> ';',			'COMMENTS'		=> 'remove_remarks',			'DRIVER'		=> 'sqlite',			'AVAILABLE'		=> true,			'2.0.x'			=> false,		),	);	if ($dbms)	{		if (isset($available_dbms[$dbms]))		{			$available_dbms = array($dbms => $available_dbms[$dbms]);		}		else		{			return array();		}	}	// now perform some checks whether they are really available	foreach ($available_dbms as $db_name => $db_ary)	{		if ($only_20x_options && !$db_ary['2.0.x'])		{			if ($return_unavailable)			{				$available_dbms[$db_name]['AVAILABLE'] = false;			}			else			{				unset($available_dbms[$db_name]);			}			continue;		}		$dll = $db_ary['MODULE'];		if (!@extension_loaded($dll))		{			if (!can_load_dll($dll))			{				if ($return_unavailable)				{					$available_dbms[$db_name]['AVAILABLE'] = false;				}				else				{					unset($available_dbms[$db_name]);				}				continue;			}		}		$any_db_support = true;	}	if ($return_unavailable)	{		$available_dbms['ANY_DB_SUPPORT'] = $any_db_support;	}	return $available_dbms;}/*** Generate the drop down of available database options*/function dbms_select($default = '', $only_20x_options = false){	global $lang;	$available_dbms = get_available_dbms(false, false, $only_20x_options);	$dbms_options = '';	foreach ($available_dbms as $dbms_name => $details)	{		$selected = ($dbms_name == $default) ? ' selected="selected"' : '';		$dbms_options .= '<option value="' . $dbms_name . '"' . $selected .'>' . $lang['DLL_' . strtoupper($dbms_name)] . '</option>';	}	return $dbms_options;}/*** Get tables of a database** @deprecated*/function get_tables(&$db){	if (!class_exists('phpbb_db_tools'))	{		global $phpbb_root_path, $phpEx;		require($phpbb_root_path . 'includes/db/db_tools.' . $phpEx);	}	$db_tools = new phpbb_db_tools($db);	return $db_tools->sql_list_tables();}/*** Used to test whether we are able to connect to the database the user has specified* and identify any problems (eg there are already tables with the names we want to use* @param	array	$dbms should be of the format of an element of the array returned by {@link get_available_dbms get_available_dbms()}*					necessary extensions should be loaded already*/function connect_check_db($error_connect, &$error, $dbms_details, $table_prefix, $dbhost, $dbuser, $dbpasswd, $dbname, $dbport, $prefix_may_exist = false, $load_dbal = true, $unicode_check = true){	global $phpbb_root_path, $phpEx, $config, $lang;	$dbms = $dbms_details['DRIVER'];	if ($load_dbal)	{		// Include the DB layer		include($phpbb_root_path . 'includes/db/' . $dbms . '.' . $phpEx);	}	// Instantiate it and set return on error true	$sql_db = 'dbal_' . $dbms;	$db = new $sql_db();	$db->sql_return_on_error(true);	// Check that we actually have a database name before going any further.....	if ($dbms_details['DRIVER'] != 'sqlite' && $dbms_details['DRIVER'] != 'oracle' && $dbname === '')	{		$error[] = $lang['INST_ERR_DB_NO_NAME'];		return false;	}	// Make sure we don't have a daft user who thinks having the SQLite database in the forum directory is a good idea	if ($dbms_details['DRIVER'] == 'sqlite' && stripos(phpbb_realpath($dbhost), phpbb_realpath('../')) === 0)	{		$error[] = $lang['INST_ERR_DB_FORUM_PATH'];		return false;	}	// Check the prefix length to ensure that index names are not too long and does not contain invalid characters	switch ($dbms_details['DRIVER'])	{		case 'mysql':		case 'mysqli':			if (strspn($table_prefix, '-./\\') !== 0)			{				$error[] = $lang['INST_ERR_PREFIX_INVALID'];				return false;			}		// no break;		case 'postgres':			$prefix_length = 36;		break;		case 'mssql':		case 'mssql_odbc':		case 'mssqlnative':			$prefix_length = 90;		break;		case 'sqlite':			$prefix_length = 200;		break;		case 'firebird':		case 'oracle':			$prefix_length = 6;		break;	}	if (strlen($table_prefix) > $prefix_length)	{		$error[] = sprintf($lang['INST_ERR_PREFIX_TOO_LONG'], $prefix_length);		return false;	}	// Try and connect ...	if (is_array($db->sql_connect($dbhost, $dbuser, $dbpasswd, $dbname, $dbport, false, true)))	{		$db_error = $db->sql_error();		$error[] = $lang['INST_ERR_DB_CONNECT'] . '<br />' . (($db_error['message']) ? $db_error['message'] : $lang['INST_ERR_DB_NO_ERROR']);	}	else	{		// Likely matches for an existing phpBB installation		if (!$prefix_may_exist)		{			$temp_prefix = strtolower($table_prefix);			$table_ary = array($temp_prefix . 'attachments', $temp_prefix . 'config', $temp_prefix . 'sessions', $temp_prefix . 'topics', $temp_prefix . 'users');			$tables = get_tables($db);			$tables = array_map('strtolower', $tables);			$table_intersect = array_intersect($tables, $table_ary);			if (sizeof($table_intersect))			{				$error[] = $lang['INST_ERR_PREFIX'];			}		}		// Make sure that the user has selected a sensible DBAL for the DBMS actually installed		switch ($dbms_details['DRIVER'])		{			case 'mysqli':				if (version_compare(mysqli_get_server_info($db->db_connect_id), '4.1.3', '<'))				{					$error[] = $lang['INST_ERR_DB_NO_MYSQLI'];				}			break;			case 'sqlite':				if (version_compare(sqlite_libversion(), '2.8.2', '<'))				{					$error[] = $lang['INST_ERR_DB_NO_SQLITE'];				}			break;			case 'firebird':				// check the version of FB, use some hackery if we can't get access to the server info				if ($db->service_handle !== false && function_exists('ibase_server_info'))				{					$val = @ibase_server_info($db->service_handle, IBASE_SVC_SERVER_VERSION);					preg_match('#V([\d.]+)#', $val, $match);					if ($match[1] < 2)					{						$error[] = $lang['INST_ERR_DB_NO_FIREBIRD'];					}					$db_info = @ibase_db_info($db->service_handle, $dbname, IBASE_STS_HDR_PAGES);					preg_match('/^\\s*Page size\\s*(\\d+)/m', $db_info, $regs);					$page_size = intval($regs[1]);					if ($page_size < 8192)					{						$error[] = $lang['INST_ERR_DB_NO_FIREBIRD_PS'];					}				}				else				{					$sql = "SELECT *						FROM RDB$FUNCTIONS						WHERE RDB$SYSTEM_FLAG IS NULL							AND RDB$FUNCTION_NAME = 'CHAR_LENGTH'";					$result = $db->sql_query($sql);					$row = $db->sql_fetchrow($result);					$db->sql_freeresult($result);					// if its a UDF, its too old					if ($row)					{						$error[] = $lang['INST_ERR_DB_NO_FIREBIRD'];					}					else					{						$sql = 'SELECT 1 FROM RDB$DATABASE							WHERE BIN_AND(10, 1) = 0';						$result = $db->sql_query($sql);						if (!$result) // This can only fail if BIN_AND is not defined						{							$error[] = $lang['INST_ERR_DB_NO_FIREBIRD'];						}						$db->sql_freeresult($result);					}					// Setup the stuff for our random table					$char_array = array_merge(range('A', 'Z'), range('0', '9'));					$char_len = mt_rand(7, 9);					$char_array_len = sizeof($char_array) - 1;					$final = '';					for ($i = 0; $i < $char_len; $i++)					{						$final .= $char_array[mt_rand(0, $char_array_len)];					}					// Create some random table					$sql = 'CREATE TABLE ' . $final . " (						FIELD1 VARCHAR(255) CHARACTER SET UTF8 DEFAULT '' NOT NULL COLLATE UNICODE,						FIELD2 INTEGER DEFAULT 0 NOT NULL);";					$db->sql_query($sql);					// Create an index that should fail if the page size is less than 8192					$sql = 'CREATE INDEX ' . $final . ' ON ' . $final . '(FIELD1, FIELD2);';					$db->sql_query($sql);					if (ibase_errmsg() !== false)					{						$error[] = $lang['INST_ERR_DB_NO_FIREBIRD_PS'];					}					else					{						// Kill the old table						$db->sql_query('DROP TABLE ' . $final . ';');					}					unset($final);				}			break;			case 'oracle':				if ($unicode_check)				{					$sql = "SELECT *						FROM NLS_DATABASE_PARAMETERS						WHERE PARAMETER = 'NLS_RDBMS_VERSION'							OR PARAMETER = 'NLS_CHARACTERSET'";					$result = $db->sql_query($sql);					while ($row = $db->sql_fetchrow($result))					{						$stats[$row['parameter']] = $row['value'];					}					$db->sql_freeresult($result);					if (version_compare($stats['NLS_RDBMS_VERSION'], '9.2', '<') && $stats['NLS_CHARACTERSET'] !== 'UTF8')					{						$error[] = $lang['INST_ERR_DB_NO_ORACLE'];					}				}			break;			case 'postgres':				if ($unicode_check)				{					$sql = "SHOW server_encoding;";					$result = $db->sql_query($sql);					$row = $db->sql_fetchrow($result);					$db->sql_freeresult($result);					if ($row['server_encoding'] !== 'UNICODE' && $row['server_encoding'] !== 'UTF8')					{						$error[] = $lang['INST_ERR_DB_NO_POSTGRES'];					}				}			break;		}	}	if ($error_connect && (!isset($error) || !sizeof($error)))	{		return true;	}	return false;}/*** remove_remarks will strip the sql comment lines out of an uploaded sql file*/function remove_remarks(&$sql){	$sql = preg_replace('/\n{2,}/', "\n", preg_replace('/^#.*$/m', "\n", $sql));}/*** split_sql_file will split an uploaded sql file into single sql statements.* Note: expects trim() to have already been run on $sql.*/function split_sql_file($sql, $delimiter){	$sql = str_replace("\r" , '', $sql);	$data = preg_split('/' . preg_quote($delimiter, '/') . '$/m', $sql);	$data = array_map('trim', $data);	// The empty case	$end_data = end($data);	if (empty($end_data))	{		unset($data[key($data)]);	}	return $data;}/*** For replacing {L_*} strings with preg_replace_callback*/function adjust_language_keys_callback($matches){	if (!empty($matches[1]))	{		global $lang, $db;		return (!empty($lang[$matches[1]])) ? $db->sql_escape($lang[$matches[1]]) : $db->sql_escape($matches[1]);	}}?>
<?php/**** @package dbal* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @ignore*/if (!defined('IN_PHPBB')){	exit;}include_once($phpbb_root_path . 'includes/db/dbal.' . $phpEx);/*** MSSQL Database Abstraction Layer* Minimum Requirement is MSSQL 2000+* @package dbal*/class dbal_mssql extends dbal{	/**	* Connect to server	*/	function sql_connect($sqlserver, $sqluser, $sqlpassword, $database, $port = false, $persistency = false, $new_link = false)	{		$this->persistency = $persistency;		$this->user = $sqluser;		$this->dbname = $database;		$port_delimiter = (defined('PHP_OS') && substr(PHP_OS, 0, 3) === 'WIN') ? ',' : ':';		$this->server = $sqlserver . (($port) ? $port_delimiter . $port : '');		@ini_set('mssql.charset', 'UTF-8');		@ini_set('mssql.textlimit', 2147483647);		@ini_set('mssql.textsize', 2147483647);		if (version_compare(PHP_VERSION, '5.1.0', '>=') || (version_compare(PHP_VERSION, '5.0.0-dev', '<=') && version_compare(PHP_VERSION, '4.4.1', '>=')))		{			$this->db_connect_id = ($this->persistency) ? @mssql_pconnect($this->server, $this->user, $sqlpassword, $new_link) : @mssql_connect($this->server, $this->user, $sqlpassword, $new_link);		}		else		{			$this->db_connect_id = ($this->persistency) ? @mssql_pconnect($this->server, $this->user, $sqlpassword) : @mssql_connect($this->server, $this->user, $sqlpassword);		}		if ($this->db_connect_id && $this->dbname != '')		{			if (!@mssql_select_db($this->dbname, $this->db_connect_id))			{				@mssql_close($this->db_connect_id);				return false;			}		}		return ($this->db_connect_id) ? $this->db_connect_id : $this->sql_error('');	}	/**	* Version information about used database	* @param bool $raw if true, only return the fetched sql_server_version	* @param bool $use_cache If true, it is safe to retrieve the value from the cache	* @return string sql server version	*/	function sql_server_info($raw = false, $use_cache = true)	{		global $cache;		if (!$use_cache || empty($cache) || ($this->sql_server_version = $cache->get('mssql_version')) === false)		{			$result_id = @mssql_query("SELECT SERVERPROPERTY('productversion'), SERVERPROPERTY('productlevel'), SERVERPROPERTY('edition')", $this->db_connect_id);			$row = false;			if ($result_id)			{				$row = @mssql_fetch_assoc($result_id);				@mssql_free_result($result_id);			}			$this->sql_server_version = ($row) ? trim(implode(' ', $row)) : 0;			if (!empty($cache) && $use_cache)			{				$cache->put('mssql_version', $this->sql_server_version);			}		}		if ($raw)		{			return $this->sql_server_version;		}		return ($this->sql_server_version) ? 'MSSQL<br />' . $this->sql_server_version : 'MSSQL';	}	/**	* SQL Transaction	* @access private	*/	function _sql_transaction($status = 'begin')	{		switch ($status)		{			case 'begin':				return @mssql_query('BEGIN TRANSACTION', $this->db_connect_id);			break;			case 'commit':				return @mssql_query('COMMIT TRANSACTION', $this->db_connect_id);			break;			case 'rollback':				return @mssql_query('ROLLBACK TRANSACTION', $this->db_connect_id);			break;		}		return true;	}	/**	* Base query method	*	* @param	string	$query		Contains the SQL query which shall be executed	* @param	int		$cache_ttl	Either 0 to avoid caching or the time in seconds which the result shall be kept in cache	* @return	mixed				When casted to bool the returned value returns true on success and false on failure	*	* @access	public	*/	function sql_query($query = '', $cache_ttl = 0)	{		if ($query != '')		{			global $cache;			// EXPLAIN only in extra debug mode			if (defined('DEBUG_EXTRA'))			{				$this->sql_report('start', $query);			}			$this->query_result = ($cache_ttl && method_exists($cache, 'sql_load')) ? $cache->sql_load($query) : false;			$this->sql_add_num_queries($this->query_result);			if ($this->query_result === false)			{				if (($this->query_result = @mssql_query($query, $this->db_connect_id)) === false)				{					$this->sql_error($query);				}				if (defined('DEBUG_EXTRA'))				{					$this->sql_report('stop', $query);				}				if ($cache_ttl && method_exists($cache, 'sql_save'))				{					$this->open_queries[(int) $this->query_result] = $this->query_result;					$cache->sql_save($query, $this->query_result, $cache_ttl);				}				else if (strpos($query, 'SELECT') === 0 && $this->query_result)				{					$this->open_queries[(int) $this->query_result] = $this->query_result;				}			}			else if (defined('DEBUG_EXTRA'))			{				$this->sql_report('fromcache', $query);			}		}		else		{			return false;		}		return $this->query_result;	}	/**	* Build LIMIT query	*/	function _sql_query_limit($query, $total, $offset = 0, $cache_ttl = 0)	{		$this->query_result = false;		// Since TOP is only returning a set number of rows we won't need it if total is set to 0 (return all rows)		if ($total)		{			// We need to grab the total number of rows + the offset number of rows to get the correct result			if (strpos($query, 'SELECT DISTINCT') === 0)			{				$query = 'SELECT DISTINCT TOP ' . ($total + $offset) . ' ' . substr($query, 15);			}			else			{				$query = 'SELECT TOP ' . ($total + $offset) . ' ' . substr($query, 6);			}		}		$result = $this->sql_query($query, $cache_ttl);		// Seek by $offset rows		if ($offset)		{			$this->sql_rowseek($offset, $result);		}		return $result;	}	/**	* Return number of affected rows	*/	function sql_affectedrows()	{		return ($this->db_connect_id) ? @mssql_rows_affected($this->db_connect_id) : false;	}	/**	* Fetch current row	*/	function sql_fetchrow($query_id = false)	{		global $cache;		if ($query_id === false)		{			$query_id = $this->query_result;		}		if (isset($cache->sql_rowset[$query_id]))		{			return $cache->sql_fetchrow($query_id);		}		if ($query_id === false)		{			return false;		}		$row = @mssql_fetch_assoc($query_id);		// I hope i am able to remove this later... hopefully only a PHP or MSSQL bug		if ($row)		{			foreach ($row as $key => $value)			{				$row[$key] = ($value === ' ' || $value === NULL) ? '' : $value;			}		}		return $row;	}	/**	* Seek to given row number	* rownum is zero-based	*/	function sql_rowseek($rownum, &$query_id)	{		global $cache;		if ($query_id === false)		{			$query_id = $this->query_result;		}		if (isset($cache->sql_rowset[$query_id]))		{			return $cache->sql_rowseek($rownum, $query_id);		}		return ($query_id !== false) ? @mssql_data_seek($query_id, $rownum) : false;	}	/**	* Get last inserted id after insert statement	*/	function sql_nextid()	{		$result_id = @mssql_query('SELECT SCOPE_IDENTITY()', $this->db_connect_id);		if ($result_id)		{			if ($row = @mssql_fetch_assoc($result_id))			{				@mssql_free_result($result_id);				return $row['computed'];			}			@mssql_free_result($result_id);		}		return false;	}	/**	* Free sql result	*/	function sql_freeresult($query_id = false)	{		global $cache;		if ($query_id === false)		{			$query_id = $this->query_result;		}		if (isset($cache->sql_rowset[$query_id]))		{			return $cache->sql_freeresult($query_id);		}		if (isset($this->open_queries[$query_id]))		{			unset($this->open_queries[$query_id]);			return @mssql_free_result($query_id);		}		return false;	}	/**	* Escape string used in sql query	*/	function sql_escape($msg)	{		return str_replace(array("'", "\0"), array("''", ''), $msg);	}	/**	* Build LIKE expression	* @access private	*/	function _sql_like_expression($expression)	{		return $expression . " ESCAPE '\\'";	}	/**	* return sql error array	* @access private	*/	function _sql_error()	{		$error = array(			'message'	=> @mssql_get_last_message(),			'code'		=> ''		);		// Get error code number		$result_id = @mssql_query('SELECT @@ERROR as code', $this->db_connect_id);		if ($result_id)		{			$row = @mssql_fetch_assoc($result_id);			$error['code'] = $row['code'];			@mssql_free_result($result_id);		}		// Get full error message if possible		$sql = 'SELECT CAST(description as varchar(255)) as message			FROM master.dbo.sysmessages			WHERE error = ' . $error['code'];		$result_id = @mssql_query($sql);				if ($result_id)		{			$row = @mssql_fetch_assoc($result_id);			if (!empty($row['message']))			{				$error['message'] .= '<br />' . $row['message'];			}			@mssql_free_result($result_id);		}		return $error;	}	/**	* Build db-specific query data	* @access private	*/	function _sql_custom_build($stage, $data)	{		return $data;	}	/**	* Close sql connection	* @access private	*/	function _sql_close()	{		return @mssql_close($this->db_connect_id);	}	/**	* Build db-specific report	* @access private	*/	function _sql_report($mode, $query = '')	{		switch ($mode)		{			case 'start':				$html_table = false;				@mssql_query('SET SHOWPLAN_TEXT ON;', $this->db_connect_id);				if ($result = @mssql_query($query, $this->db_connect_id))				{					@mssql_next_result($result);					while ($row = @mssql_fetch_row($result))					{						$html_table = $this->sql_report('add_select_row', $query, $html_table, $row);					}				}				@mssql_query('SET SHOWPLAN_TEXT OFF;', $this->db_connect_id);				@mssql_free_result($result);				if ($html_table)				{					$this->html_hold .= '</table>';				}			break;			case 'fromcache':				$endtime = explode(' ', microtime());				$endtime = $endtime[0] + $endtime[1];				$result = @mssql_query($query, $this->db_connect_id);				while ($void = @mssql_fetch_assoc($result))				{					// Take the time spent on parsing rows into account				}				@mssql_free_result($result);				$splittime = explode(' ', microtime());				$splittime = $splittime[0] + $splittime[1];				$this->sql_report('record_fromcache', $query, $endtime, $splittime);			break;		}	}}?>
<?php/**** @package dbal* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @ignore*/if (!defined('IN_PHPBB')){	exit;}include_once($phpbb_root_path . 'includes/db/dbal.' . $phpEx);/*** MySQL4 Database Abstraction Layer* Compatible with:* MySQL 3.23+* MySQL 4.0+* MySQL 4.1+* MySQL 5.0+* @package dbal*/class dbal_mysql extends dbal{	var $multi_insert = true;	/**	* Connect to server	* @access public	*/	function sql_connect($sqlserver, $sqluser, $sqlpassword, $database, $port = false, $persistency = false, $new_link = false)	{		$this->persistency = $persistency;		$this->user = $sqluser;		$this->server = $sqlserver . (($port) ? ':' . $port : '');		$this->dbname = $database;		$this->sql_layer = 'mysql4';		$this->db_connect_id = ($this->persistency) ? @mysql_pconnect($this->server, $this->user, $sqlpassword) : @mysql_connect($this->server, $this->user, $sqlpassword, $new_link);		if ($this->db_connect_id && $this->dbname != '')		{			if (@mysql_select_db($this->dbname, $this->db_connect_id))			{				// Determine what version we are using and if it natively supports UNICODE				if (version_compare($this->sql_server_info(true), '4.1.0', '>='))				{					@mysql_query("SET NAMES 'utf8'", $this->db_connect_id);					// enforce strict mode on databases that support it					if (version_compare($this->sql_server_info(true), '5.0.2', '>='))					{						$result = @mysql_query('SELECT @@session.sql_mode AS sql_mode', $this->db_connect_id);						$row = @mysql_fetch_assoc($result);						@mysql_free_result($result);						$modes = array_map('trim', explode(',', $row['sql_mode']));						// TRADITIONAL includes STRICT_ALL_TABLES and STRICT_TRANS_TABLES						if (!in_array('TRADITIONAL', $modes))						{							if (!in_array('STRICT_ALL_TABLES', $modes))							{								$modes[] = 'STRICT_ALL_TABLES';							}							if (!in_array('STRICT_TRANS_TABLES', $modes))							{								$modes[] = 'STRICT_TRANS_TABLES';							}						}						$mode = implode(',', $modes);						@mysql_query("SET SESSION sql_mode='{$mode}'", $this->db_connect_id);					}				}				else if (version_compare($this->sql_server_info(true), '4.0.0', '<'))				{					$this->sql_layer = 'mysql';				}				return $this->db_connect_id;			}		}		return $this->sql_error('');	}	/**	* Version information about used database	* @param bool $raw if true, only return the fetched sql_server_version	* @param bool $use_cache If true, it is safe to retrieve the value from the cache	* @return string sql server version	*/	function sql_server_info($raw = false, $use_cache = true)	{		global $cache;		if (!$use_cache || empty($cache) || ($this->sql_server_version = $cache->get('mysql_version')) === false)		{			$result = @mysql_query('SELECT VERSION() AS version', $this->db_connect_id);			$row = @mysql_fetch_assoc($result);			@mysql_free_result($result);			$this->sql_server_version = $row['version'];			if (!empty($cache) && $use_cache)			{				$cache->put('mysql_version', $this->sql_server_version);			}		}		return ($raw) ? $this->sql_server_version : 'MySQL ' . $this->sql_server_version;	}	/**	* SQL Transaction	* @access private	*/	function _sql_transaction($status = 'begin')	{		switch ($status)		{			case 'begin':				return @mysql_query('BEGIN', $this->db_connect_id);			break;			case 'commit':				return @mysql_query('COMMIT', $this->db_connect_id);			break;			case 'rollback':				return @mysql_query('ROLLBACK', $this->db_connect_id);			break;		}		return true;	}	/**	* Base query method	*	* @param	string	$query		Contains the SQL query which shall be executed	* @param	int		$cache_ttl	Either 0 to avoid caching or the time in seconds which the result shall be kept in cache	* @return	mixed				When casted to bool the returned value returns true on success and false on failure	*	* @access	public	*/	function sql_query($query = '', $cache_ttl = 0)	{		if ($query != '')		{			global $cache;			// EXPLAIN only in extra debug mode			if (defined('DEBUG_EXTRA'))			{				$this->sql_report('start', $query);			}			$this->query_result = ($cache_ttl && method_exists($cache, 'sql_load')) ? $cache->sql_load($query) : false;			$this->sql_add_num_queries($this->query_result);			if ($this->query_result === false)			{				if (($this->query_result = @mysql_query($query, $this->db_connect_id)) === false)				{					$this->sql_error($query);				}				if (defined('DEBUG_EXTRA'))				{					$this->sql_report('stop', $query);				}				if ($cache_ttl && method_exists($cache, 'sql_save'))				{					$this->open_queries[(int) $this->query_result] = $this->query_result;					$cache->sql_save($query, $this->query_result, $cache_ttl);				}				else if (strpos($query, 'SELECT') === 0 && $this->query_result)				{					$this->open_queries[(int) $this->query_result] = $this->query_result;				}			}			else if (defined('DEBUG_EXTRA'))			{				$this->sql_report('fromcache', $query);			}		}		else		{			return false;		}		return $this->query_result;	}	/**	* Build LIMIT query	*/	function _sql_query_limit($query, $total, $offset = 0, $cache_ttl = 0)	{		$this->query_result = false;		// if $total is set to 0 we do not want to limit the number of rows		if ($total == 0)		{			// Having a value of -1 was always a bug			$total = '18446744073709551615';		}		$query .= "\n LIMIT " . ((!empty($offset)) ? $offset . ', ' . $total : $total);		return $this->sql_query($query, $cache_ttl);	}	/**	* Return number of affected rows	*/	function sql_affectedrows()	{		return ($this->db_connect_id) ? @mysql_affected_rows($this->db_connect_id) : false;	}	/**	* Fetch current row	*/	function sql_fetchrow($query_id = false)	{		global $cache;		if ($query_id === false)		{			$query_id = $this->query_result;		}		if (isset($cache->sql_rowset[$query_id]))		{			return $cache->sql_fetchrow($query_id);		}		return ($query_id !== false) ? @mysql_fetch_assoc($query_id) : false;	}	/**	* Seek to given row number	* rownum is zero-based	*/	function sql_rowseek($rownum, &$query_id)	{		global $cache;		if ($query_id === false)		{			$query_id = $this->query_result;		}		if (isset($cache->sql_rowset[$query_id]))		{			return $cache->sql_rowseek($rownum, $query_id);		}		return ($query_id !== false) ? @mysql_data_seek($query_id, $rownum) : false;	}	/**	* Get last inserted id after insert statement	*/	function sql_nextid()	{		return ($this->db_connect_id) ? @mysql_insert_id($this->db_connect_id) : false;	}	/**	* Free sql result	*/	function sql_freeresult($query_id = false)	{		global $cache;		if ($query_id === false)		{			$query_id = $this->query_result;		}		if (isset($cache->sql_rowset[$query_id]))		{			return $cache->sql_freeresult($query_id);		}		if (isset($this->open_queries[(int) $query_id]))		{			unset($this->open_queries[(int) $query_id]);			return @mysql_free_result($query_id);		}		return false;	}	/**	* Escape string used in sql query	*/	function sql_escape($msg)	{		if (!$this->db_connect_id)		{			return @mysql_real_escape_string($msg);		}		return @mysql_real_escape_string($msg, $this->db_connect_id);	}	/**	* Build LIKE expression	* @access private	*/	function _sql_like_expression($expression)	{		return $expression;	}	/**	* Build db-specific query data	* @access private	*/	function _sql_custom_build($stage, $data)	{		switch ($stage)		{			case 'FROM':				$data = '(' . $data . ')';			break;		}		return $data;	}	/**	* return sql error array	* @access private	*/	function _sql_error()	{		if (!$this->db_connect_id)		{			return array(				'message'	=> @mysql_error(),				'code'		=> @mysql_errno()			);		}		return array(			'message'	=> @mysql_error($this->db_connect_id),			'code'		=> @mysql_errno($this->db_connect_id)		);	}	/**	* Close sql connection	* @access private	*/	function _sql_close()	{		return @mysql_close($this->db_connect_id);	}	/**	* Build db-specific report	* @access private	*/	function _sql_report($mode, $query = '')	{		static $test_prof;		// current detection method, might just switch to see the existance of INFORMATION_SCHEMA.PROFILING		if ($test_prof === null)		{			$test_prof = false;			if (version_compare($this->sql_server_info(true), '5.0.37', '>=') && version_compare($this->sql_server_info(true), '5.1', '<'))			{				$test_prof = true;			}		}		switch ($mode)		{			case 'start':				$explain_query = $query;				if (preg_match('/UPDATE ([a-z0-9_]+).*?WHERE(.*)/s', $query, $m))				{					$explain_query = 'SELECT * FROM ' . $m[1] . ' WHERE ' . $m[2];				}				else if (preg_match('/DELETE FROM ([a-z0-9_]+).*?WHERE(.*)/s', $query, $m))				{					$explain_query = 'SELECT * FROM ' . $m[1] . ' WHERE ' . $m[2];				}				if (preg_match('/^SELECT/', $explain_query))				{					$html_table = false;					// begin profiling					if ($test_prof)					{						@mysql_query('SET profiling = 1;', $this->db_connect_id);					}					if ($result = @mysql_query("EXPLAIN $explain_query", $this->db_connect_id))					{						while ($row = @mysql_fetch_assoc($result))						{							$html_table = $this->sql_report('add_select_row', $query, $html_table, $row);						}					}					@mysql_free_result($result);					if ($html_table)					{						$this->html_hold .= '</table>';					}					if ($test_prof)					{						$html_table = false;						// get the last profile						if ($result = @mysql_query('SHOW PROFILE ALL;', $this->db_connect_id))						{							$this->html_hold .= '<br />';							while ($row = @mysql_fetch_assoc($result))							{								// make <unknown> HTML safe								if (!empty($row['Source_function']))								{									$row['Source_function'] = str_replace(array('<', '>'), array('&lt;', '&gt;'), $row['Source_function']);								}								// remove unsupported features								foreach ($row as $key => $val)								{									if ($val === null)									{										unset($row[$key]);									}								}								$html_table = $this->sql_report('add_select_row', $query, $html_table, $row);							}						}						@mysql_free_result($result);						if ($html_table)						{							$this->html_hold .= '</table>';						}						@mysql_query('SET profiling = 0;', $this->db_connect_id);					}				}			break;			case 'fromcache':				$endtime = explode(' ', microtime());				$endtime = $endtime[0] + $endtime[1];				$result = @mysql_query($query, $this->db_connect_id);				while ($void = @mysql_fetch_assoc($result))				{					// Take the time spent on parsing rows into account				}				@mysql_free_result($result);				$splittime = explode(' ', microtime());				$splittime = $splittime[0] + $splittime[1];				$this->sql_report('record_fromcache', $query, $endtime, $splittime);			break;		}	}}?>
<?php/**** @package acp* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @ignore*/if (!defined('IN_PHPBB')){	exit;}/*** @package acp*/class acp_profile{	var $u_action;	var $edit_lang_id;	var $lang_defs;	function main($id, $mode)	{		global $config, $db, $user, $auth, $template, $cache;		global $phpbb_root_path, $phpbb_admin_path, $phpEx, $table_prefix;		include($phpbb_root_path . 'includes/functions_posting.' . $phpEx);		include($phpbb_root_path . 'includes/functions_user.' . $phpEx);		include($phpbb_root_path . 'includes/functions_profile_fields.' . $phpEx);		$user->add_lang(array('ucp', 'acp/profile'));		$this->tpl_name = 'acp_profile';		$this->page_title = 'ACP_CUSTOM_PROFILE_FIELDS';		$action = (isset($_POST['create'])) ? 'create' : request_var('action', '');		$error = array();		$s_hidden_fields = '';		// Define some default values for each field type		$default_values = array(			FIELD_STRING	=> array('field_length' => 10, 'field_minlen' => 0, 'field_maxlen' => 20, 'field_validation' => '.*', 'field_novalue' => '', 'field_default_value' => ''),			FIELD_TEXT		=> array('field_length' => '5|80', 'field_minlen' => 0, 'field_maxlen' => 1000, 'field_validation' => '.*', 'field_novalue' => '', 'field_default_value' => ''),			FIELD_INT		=> array('field_length' => 5, 'field_minlen' => 0, 'field_maxlen' => 100, 'field_validation' => '', 'field_novalue' => 0, 'field_default_value' => 0),			FIELD_DATE		=> array('field_length' => 10, 'field_minlen' => 10, 'field_maxlen' => 10, 'field_validation' => '', 'field_novalue' => ' 0- 0-   0', 'field_default_value' => ' 0- 0-   0'),			FIELD_BOOL		=> array('field_length' => 1, 'field_minlen' => 0, 'field_maxlen' => 0, 'field_validation' => '', 'field_novalue' => 0, 'field_default_value' => 0),			FIELD_DROPDOWN	=> array('field_length' => 0, 'field_minlen' => 0, 'field_maxlen' => 5, 'field_validation' => '', 'field_novalue' => 0, 'field_default_value' => 0),		);		$cp = new custom_profile_admin();		// Build Language array		// Based on this, we decide which elements need to be edited later and which language items are missing		$this->lang_defs = array();		$sql = 'SELECT lang_id, lang_iso			FROM ' . LANG_TABLE . '			ORDER BY lang_english_name';		$result = $db->sql_query($sql);		while ($row = $db->sql_fetchrow($result))		{			// Make some arrays with all available languages			$this->lang_defs['id'][$row['lang_id']] = $row['lang_iso'];			$this->lang_defs['iso'][$row['lang_iso']] = $row['lang_id'];		}		$db->sql_freeresult($result);		$sql = 'SELECT field_id, lang_id			FROM ' . PROFILE_LANG_TABLE . '			ORDER BY lang_id';		$result = $db->sql_query($sql);		while ($row = $db->sql_fetchrow($result))		{			// Which languages are available for each item			$this->lang_defs['entry'][$row['field_id']][] = $row['lang_id'];		}		$db->sql_freeresult($result);		// Have some fields been defined?		if (isset($this->lang_defs['entry']))		{			foreach ($this->lang_defs['entry'] as $field_id => $field_ary)			{				// Fill an array with the languages that are missing for each field				$this->lang_defs['diff'][$field_id] = array_diff(array_values($this->lang_defs['iso']), $field_ary);			}		}		switch ($action)		{			case 'delete':				$field_id = request_var('field_id', 0);				if (!$field_id)				{					trigger_error($user->lang['NO_FIELD_ID'] . adm_back_link($this->u_action), E_USER_WARNING);				}				if (confirm_box(true))				{					$sql = 'SELECT field_ident						FROM ' . PROFILE_FIELDS_TABLE . "						WHERE field_id = $field_id";					$result = $db->sql_query($sql);					$field_ident = (string) $db->sql_fetchfield('field_ident');					$db->sql_freeresult($result);					$db->sql_transaction('begin');					$db->sql_query('DELETE FROM ' . PROFILE_FIELDS_TABLE . " WHERE field_id = $field_id");					$db->sql_query('DELETE FROM ' . PROFILE_FIELDS_LANG_TABLE . " WHERE field_id = $field_id");					$db->sql_query('DELETE FROM ' . PROFILE_LANG_TABLE . " WHERE field_id = $field_id");					switch ($db->sql_layer)					{						case 'sqlite':							$sql = "SELECT sql								FROM sqlite_master								WHERE type = 'table'									AND name = '" . PROFILE_FIELDS_DATA_TABLE . "'								ORDER BY type DESC, name;";							$result = $db->sql_query($sql);							$row = $db->sql_fetchrow($result);							$db->sql_freeresult($result);							// Create a temp table and populate it, destroy the existing one							$db->sql_query(preg_replace('#CREATE\s+TABLE\s+"?' . PROFILE_FIELDS_DATA_TABLE . '"?#i', 'CREATE TEMPORARY TABLE ' . PROFILE_FIELDS_DATA_TABLE . '_temp', $row['sql']));							$db->sql_query('INSERT INTO ' . PROFILE_FIELDS_DATA_TABLE . '_temp SELECT * FROM ' . PROFILE_FIELDS_DATA_TABLE);							$db->sql_query('DROP TABLE ' . PROFILE_FIELDS_DATA_TABLE);							preg_match('#\((.*)\)#s', $row['sql'], $matches);							$new_table_cols = trim($matches[1]);							$old_table_cols = preg_split('/,(?=[\\sa-z])/im', $new_table_cols);							$column_list = array();							foreach ($old_table_cols as $declaration)							{								$entities = preg_split('#\s+#', trim($declaration));								if ($entities[0] == 'PRIMARY')								{									continue;								}								if ($entities[0] !== 'pf_' . $field_ident)								{									$column_list[] = $entities[0];								}							}							$columns = implode(',', $column_list);							$new_table_cols = preg_replace('/' . 'pf_' . $field_ident . '[^,]+,/', '', $new_table_cols);							// create a new table and fill it up. destroy the temp one							$db->sql_query('CREATE TABLE ' . PROFILE_FIELDS_DATA_TABLE . ' (' . $new_table_cols . ');');							$db->sql_query('INSERT INTO ' . PROFILE_FIELDS_DATA_TABLE . ' (' . $columns . ') SELECT ' . $columns . ' FROM ' . PROFILE_FIELDS_DATA_TABLE . '_temp;');							$db->sql_query('DROP TABLE ' . PROFILE_FIELDS_DATA_TABLE . '_temp');						break;						default:							$db->sql_query('ALTER TABLE ' . PROFILE_FIELDS_DATA_TABLE . " DROP COLUMN pf_$field_ident");					}					$order = 0;					$sql = 'SELECT *						FROM ' . PROFILE_FIELDS_TABLE . '						ORDER BY field_order';					$result = $db->sql_query($sql);					while ($row = $db->sql_fetchrow($result))					{						$order++;						if ($row['field_order'] != $order)						{							$sql = 'UPDATE ' . PROFILE_FIELDS_TABLE . "								SET field_order = $order								WHERE field_id = {$row['field_id']}";							$db->sql_query($sql);						}					}					$db->sql_freeresult($result);					$db->sql_transaction('commit');					add_log('admin', 'LOG_PROFILE_FIELD_REMOVED', $field_ident);					trigger_error($user->lang['REMOVED_PROFILE_FIELD'] . adm_back_link($this->u_action));				}				else				{					confirm_box(false, 'DELETE_PROFILE_FIELD', build_hidden_fields(array(						'i'			=> $id,						'mode'		=> $mode,						'action'	=> $action,						'field_id'	=> $field_id,					)));				}			break;			case 'activate':				$field_id = request_var('field_id', 0);				if (!$field_id)				{					trigger_error($user->lang['NO_FIELD_ID'] . adm_back_link($this->u_action), E_USER_WARNING);				}				$sql = 'SELECT lang_id					FROM ' . LANG_TABLE . "					WHERE lang_iso = '" . $db->sql_escape($config['default_lang']) . "'";				$result = $db->sql_query($sql);				$default_lang_id = (int) $db->sql_fetchfield('lang_id');				$db->sql_freeresult($result);				if (!in_array($default_lang_id, $this->lang_defs['entry'][$field_id]))				{					trigger_error($user->lang['DEFAULT_LANGUAGE_NOT_FILLED'] . adm_back_link($this->u_action), E_USER_WARNING);				}				$sql = 'UPDATE ' . PROFILE_FIELDS_TABLE . "					SET field_active = 1					WHERE field_id = $field_id";				$db->sql_query($sql);				$sql = 'SELECT field_ident					FROM ' . PROFILE_FIELDS_TABLE . "					WHERE field_id = $field_id";				$result = $db->sql_query($sql);				$field_ident = (string) $db->sql_fetchfield('field_ident');				$db->sql_freeresult($result);				add_log('admin', 'LOG_PROFILE_FIELD_ACTIVATE', $field_ident);				trigger_error($user->lang['PROFILE_FIELD_ACTIVATED'] . adm_back_link($this->u_action));			break;			case 'deactivate':				$field_id = request_var('field_id', 0);				if (!$field_id)				{					trigger_error($user->lang['NO_FIELD_ID'] . adm_back_link($this->u_action), E_USER_WARNING);				}				$sql = 'UPDATE ' . PROFILE_FIELDS_TABLE . "					SET field_active = 0					WHERE field_id = $field_id";				$db->sql_query($sql);				$sql = 'SELECT field_ident					FROM ' . PROFILE_FIELDS_TABLE . "					WHERE field_id = $field_id";				$result = $db->sql_query($sql);				$field_ident = (string) $db->sql_fetchfield('field_ident');				$db->sql_freeresult($result);				add_log('admin', 'LOG_PROFILE_FIELD_DEACTIVATE', $field_ident);				trigger_error($user->lang['PROFILE_FIELD_DEACTIVATED'] . adm_back_link($this->u_action));			break;			case 'move_up':			case 'move_down':				$field_order = request_var('order', 0);				$order_total = $field_order * 2 + (($action == 'move_up') ? -1 : 1);				$sql = 'UPDATE ' . PROFILE_FIELDS_TABLE . "					SET field_order = $order_total - field_order					WHERE field_order IN ($field_order, " . (($action == 'move_up') ? $field_order - 1 : $field_order + 1) . ')';				$db->sql_query($sql);			break;			case 'create':			case 'edit':				$field_id = request_var('field_id', 0);				$step = request_var('step', 1);				$submit = (isset($_REQUEST['next']) || isset($_REQUEST['prev'])) ? true : false;				$save = (isset($_REQUEST['save'])) ? true : false;				// The language id of default language				$this->edit_lang_id = $this->lang_defs['iso'][$config['default_lang']];				// We are editing... we need to grab basic things				if ($action == 'edit')				{					if (!$field_id)					{						trigger_error($user->lang['NO_FIELD_ID'] . adm_back_link($this->u_action), E_USER_WARNING);					}					$sql = 'SELECT l.*, f.*						FROM ' . PROFILE_LANG_TABLE . ' l, ' . PROFILE_FIELDS_TABLE . ' f						WHERE l.lang_id = ' . $this->edit_lang_id . "							AND f.field_id = $field_id							AND l.field_id = f.field_id";					$result = $db->sql_query($sql);					$field_row = $db->sql_fetchrow($result);					$db->sql_freeresult($result);					if (!$field_row)					{						// Some admin changed the default language?						$sql = 'SELECT l.*, f.*							FROM ' . PROFILE_LANG_TABLE . ' l, ' . PROFILE_FIELDS_TABLE . ' f							WHERE l.lang_id <> ' . $this->edit_lang_id . "							AND f.field_id = $field_id							AND l.field_id = f.field_id";						$result = $db->sql_query($sql);						$field_row = $db->sql_fetchrow($result);						$db->sql_freeresult($result);						if (!$field_row)						{							trigger_error($user->lang['FIELD_NOT_FOUND'] . adm_back_link($this->u_action), E_USER_WARNING);						}						$this->edit_lang_id = $field_row['lang_id'];					}					$field_type = $field_row['field_type'];					// Get language entries					$sql = 'SELECT *						FROM ' . PROFILE_FIELDS_LANG_TABLE . '						WHERE lang_id = ' . $this->edit_lang_id . "							AND field_id = $field_id						ORDER BY option_id ASC";					$result = $db->sql_query($sql);					$lang_options = array();					while ($row = $db->sql_fetchrow($result))					{						$lang_options[$row['option_id']] = $row['lang_value'];					}					$db->sql_freeresult($result);					$s_hidden_fields = '<input type="hidden" name="field_id" value="' . $field_id . '" />';				}				else				{					// We are adding a new field, define basic params					$lang_options = $field_row = array();					$field_type = request_var('field_type', 0);					if (!$field_type)					{						trigger_error($user->lang['NO_FIELD_TYPE'] . adm_back_link($this->u_action), E_USER_WARNING);					}					$field_row = array_merge($default_values[$field_type], array(						'field_ident'		=> str_replace(' ', '_', utf8_clean_string(request_var('field_ident', '', true))),						'field_required'	=> 0,						'field_hide'		=> 0,						'field_show_profile'=> 0,						'field_no_view'		=> 0,						'field_show_on_reg'	=> 0,						'field_show_on_vt'	=> 0,						'lang_name'			=> utf8_normalize_nfc(request_var('field_ident', '', true)),						'lang_explain'		=> '',						'lang_default_value'=> '')					);					$s_hidden_fields = '<input type="hidden" name="field_type" value="' . $field_type . '" />';				}				// $exclude contains the data we gather in each step				$exclude = array(					1	=> array('field_ident', 'lang_name', 'lang_explain', 'field_option_none', 'field_show_on_reg', 'field_show_on_vt', 'field_required', 'field_hide', 'field_show_profile', 'field_no_view'),					2	=> array('field_length', 'field_maxlen', 'field_minlen', 'field_validation', 'field_novalue', 'field_default_value'),					3	=> array('l_lang_name', 'l_lang_explain', 'l_lang_default_value', 'l_lang_options')				);				// Text-based fields require the lang_default_value to be excluded				if ($field_type == FIELD_STRING || $field_type == FIELD_TEXT)				{					$exclude[1][] = 'lang_default_value';				}				// option-specific fields require lang_options to be excluded				if ($field_type == FIELD_BOOL || $field_type == FIELD_DROPDOWN)				{					$exclude[1][] = 'lang_options';				}				$cp->vars['field_ident']		= ($action == 'create' && $step == 1) ? utf8_clean_string(request_var('field_ident', $field_row['field_ident'], true)) : request_var('field_ident', $field_row['field_ident']);				$cp->vars['lang_name']			= utf8_normalize_nfc(request_var('lang_name', $field_row['lang_name'], true));				$cp->vars['lang_explain']		= utf8_normalize_nfc(request_var('lang_explain', $field_row['lang_explain'], true));				$cp->vars['lang_default_value']	= utf8_normalize_nfc(request_var('lang_default_value', $field_row['lang_default_value'], true));				// Visibility Options...				$visibility_ary = array(					'field_required',					'field_show_on_reg',					'field_show_on_vt',					'field_show_profile',					'field_hide',				);				foreach ($visibility_ary as $val)				{					$cp->vars[$val] = ($submit || $save) ? request_var($val, 0) : $field_row[$val];				}				$cp->vars['field_no_view'] = request_var('field_no_view', (int) $field_row['field_no_view']);				// A boolean field expects an array as the lang options				if ($field_type == FIELD_BOOL)				{					$options = utf8_normalize_nfc(request_var('lang_options', array(''), true));				}				else				{					$options = utf8_normalize_nfc(request_var('lang_options', '', true));				}				// If the user has submitted a form with options (i.e. dropdown field)				if ($options)				{					$exploded_options = (is_array($options)) ? $options : explode("\n", $options);					if (sizeof($exploded_options) == sizeof($lang_options) || $action == 'create')					{						// The number of options in the field is equal to the number of options already in the database						// Or we are creating a new dropdown list.						$cp->vars['lang_options'] = $exploded_options;					}					else if ($action == 'edit')					{						// Changing the number of options? (We remove and re-create the option fields)						$cp->vars['lang_options'] = $exploded_options;					}				}				else				{					$cp->vars['lang_options'] = $lang_options;				}				// step 2				foreach ($exclude[2] as $key)				{					$var = utf8_normalize_nfc(request_var($key, $field_row[$key], true));					// Manipulate the intended variables a little bit if needed					if ($field_type == FIELD_DROPDOWN && $key == 'field_maxlen')					{						// Get the number of options if this key is 'field_maxlen'						$var = sizeof(explode("\n", utf8_normalize_nfc(request_var('lang_options', '', true))));					}					else if ($field_type == FIELD_TEXT && $key == 'field_length')					{						if (isset($_REQUEST['rows']))						{							$cp->vars['rows'] = request_var('rows', 0);							$cp->vars['columns'] = request_var('columns', 0);							$var = $cp->vars['rows'] . '|' . $cp->vars['columns'];						}						else						{							$row_col = explode('|', $var);							$cp->vars['rows'] = $row_col[0];							$cp->vars['columns'] = $row_col[1];						}					}					else if ($field_type == FIELD_DATE && $key == 'field_default_value')					{						$always_now = request_var('always_now', -1);						if ($always_now == 1 || ($always_now === -1 && $var == 'now'))						{							$now = getdate();							$cp->vars['field_default_value_day'] = $now['mday'];							$cp->vars['field_default_value_month'] = $now['mon'];							$cp->vars['field_default_value_year'] = $now['year'];							$var = $_POST['field_default_value'] = 'now';						}						else						{							if (isset($_REQUEST['field_default_value_day']))							{								$cp->vars['field_default_value_day'] = request_var('field_default_value_day', 0);								$cp->vars['field_default_value_month'] = request_var('field_default_value_month', 0);								$cp->vars['field_default_value_year'] = request_var('field_default_value_year', 0);								$var = $_POST['field_default_value'] = sprintf('%2d-%2d-%4d', $cp->vars['field_default_value_day'], $cp->vars['field_default_value_month'], $cp->vars['field_default_value_year']);							}							else							{								list($cp->vars['field_default_value_day'], $cp->vars['field_default_value_month'], $cp->vars['field_default_value_year']) = explode('-', $var);							}						}					}					/* else if ($field_type == FIELD_BOOL && $key == 'field_default_value')					{						// Get the number of options if this key is 'field_maxlen'						$var = request_var('field_default_value', 0);					}*/					else if ($field_type == FIELD_INT && $key == 'field_default_value')					{						// Permit an empty string						if ($action == 'create' && request_var('field_default_value', '') === '')						{							$var = '';						}					}					$cp->vars[$key] = $var;				}				// step 3 - all arrays				if ($action == 'edit')				{					// Get language entries					$sql = 'SELECT *						FROM ' . PROFILE_FIELDS_LANG_TABLE . '						WHERE lang_id <> ' . $this->edit_lang_id . "							AND field_id = $field_id						ORDER BY option_id ASC";					$result = $db->sql_query($sql);					$l_lang_options = array();					while ($row = $db->sql_fetchrow($result))					{						$l_lang_options[$row['lang_id']][$row['option_id']] = $row['lang_value'];					}					$db->sql_freeresult($result);					$sql = 'SELECT lang_id, lang_name, lang_explain, lang_default_value						FROM ' . PROFILE_LANG_TABLE . '						WHERE lang_id <> ' . $this->edit_lang_id . "							AND field_id = $field_id						ORDER BY lang_id ASC";					$result = $db->sql_query($sql);					$l_lang_name = $l_lang_explain = $l_lang_default_value = array();					while ($row = $db->sql_fetchrow($result))					{						$l_lang_name[$row['lang_id']] = $row['lang_name'];						$l_lang_explain[$row['lang_id']] = $row['lang_explain'];						$l_lang_default_value[$row['lang_id']] = $row['lang_default_value'];					}					$db->sql_freeresult($result);				}				foreach ($exclude[3] as $key)				{					$cp->vars[$key] = utf8_normalize_nfc(request_var($key, array(0 => ''), true));					if (!$cp->vars[$key] && $action == 'edit')					{						$cp->vars[$key] = $$key;					}					else if ($key == 'l_lang_options' && $field_type == FIELD_BOOL)					{						$cp->vars[$key] = utf8_normalize_nfc(request_var($key, array(0 => array('')), true));					}					else if ($key == 'l_lang_options' && is_array($cp->vars[$key]))					{						foreach ($cp->vars[$key] as $lang_id => $options)						{							$cp->vars[$key][$lang_id] = explode("\n", $options);						}					}				}				// Check for general issues in every step				if ($submit) //  && $step == 1				{					// Check values for step 1					if ($cp->vars['field_ident'] == '')					{						$error[] = $user->lang['EMPTY_FIELD_IDENT'];					}					if (!preg_match('/^[a-z_]+$/', $cp->vars['field_ident']))					{						$error[] = $user->lang['INVALID_CHARS_FIELD_IDENT'];					}					if (strlen($cp->vars['field_ident']) > 17)					{						$error[] = $user->lang['INVALID_FIELD_IDENT_LEN'];					}					if ($cp->vars['lang_name'] == '')					{						$error[] = $user->lang['EMPTY_USER_FIELD_NAME'];					}					if ($field_type == FIELD_DROPDOWN && !sizeof($cp->vars['lang_options']))					{						$error[] = $user->lang['NO_FIELD_ENTRIES'];					}					if ($field_type == FIELD_BOOL && (empty($cp->vars['lang_options'][0]) || empty($cp->vars['lang_options'][1])))					{						$error[] = $user->lang['NO_FIELD_ENTRIES'];					}					// Check for already existing field ident					if ($action != 'edit')					{						$sql = 'SELECT field_ident							FROM ' . PROFILE_FIELDS_TABLE . "							WHERE field_ident = '" . $db->sql_escape($cp->vars['field_ident']) . "'";						$result = $db->sql_query($sql);						$row = $db->sql_fetchrow($result);						$db->sql_freeresult($result);						if ($row)						{							$error[] = $user->lang['FIELD_IDENT_ALREADY_EXIST'];						}					}				}				$step = (isset($_REQUEST['next'])) ? $step + 1 : ((isset($_REQUEST['prev'])) ? $step - 1 : $step);				if (sizeof($error))				{					$step--;					$submit = false;				}				// Build up the specific hidden fields				foreach ($exclude as $num => $key_ary)				{					if ($num == $step)					{						continue;					}					$_new_key_ary = array();					foreach ($key_ary as $key)					{						if ($field_type == FIELD_TEXT && $key == 'field_length' && isset($_REQUEST['rows']))						{							$cp->vars['rows'] = request_var('rows', 0);							$cp->vars['columns'] = request_var('columns', 0);							$_new_key_ary[$key] = $cp->vars['rows'] . '|' . $cp->vars['columns'];						}						else if ($field_type == FIELD_DATE && $key == 'field_default_value')						{							$always_now = request_var('always_now', 0);							if ($always_now)							{								$_new_key_ary[$key] = 'now';							}							else if (isset($_REQUEST['field_default_value_day']))							{								$cp->vars['field_default_value_day'] = request_var('field_default_value_day', 0);								$cp->vars['field_default_value_month'] = request_var('field_default_value_month', 0);								$cp->vars['field_default_value_year'] = request_var('field_default_value_year', 0);								$_new_key_ary[$key]  = sprintf('%2d-%2d-%4d', $cp->vars['field_default_value_day'], $cp->vars['field_default_value_month'], $cp->vars['field_default_value_year']);							}						}						else if ($field_type == FIELD_BOOL && $key == 'l_lang_options' && isset($_REQUEST['l_lang_options']))						{							$_new_key_ary[$key] = utf8_normalize_nfc(request_var($key, array(array('')), true));						}						else						{							if (!isset($_REQUEST[$key]))							{								$var = false;							}							else if ($key == 'field_ident' && isset($cp->vars[$key]))							{								$_new_key_ary[$key]= $cp->vars[$key];							}							else							{								$_new_key_ary[$key] = (is_array($_REQUEST[$key])) ? utf8_normalize_nfc(request_var($key, array(''), true)) : utf8_normalize_nfc(request_var($key, '', true));							}						}					}					$s_hidden_fields .= build_hidden_fields($_new_key_ary);				}				if (!sizeof($error))				{					if ($step == 3 && (sizeof($this->lang_defs['iso']) == 1 || $save))					{						$this->save_profile_field($cp, $field_type, $action);					}					else if ($action == 'edit' && $save)					{						$this->save_profile_field($cp, $field_type, $action);					}				}				$template->assign_vars(array(					'S_EDIT'			=> true,					'S_EDIT_MODE'		=> ($action == 'edit') ? true : false,					'ERROR_MSG'			=> (sizeof($error)) ? implode('<br />', $error) : '',					'L_TITLE'			=> $user->lang['STEP_' . $step . '_TITLE_' . strtoupper($action)],					'L_EXPLAIN'			=> $user->lang['STEP_' . $step . '_EXPLAIN_' . strtoupper($action)],					'U_ACTION'			=> $this->u_action . "&amp;action=$action&amp;step=$step",					'U_BACK'			=> $this->u_action)				);				// Now go through the steps				switch ($step)				{					// Create basic options - only small differences between field types					case 1:						// Build common create options						$template->assign_vars(array(							'S_STEP_ONE'		=> true,							'S_FIELD_REQUIRED'	=> ($cp->vars['field_required']) ? true : false,							'S_SHOW_ON_REG'		=> ($cp->vars['field_show_on_reg']) ? true : false,							'S_SHOW_ON_VT'		=> ($cp->vars['field_show_on_vt']) ? true : false,							'S_FIELD_HIDE'		=> ($cp->vars['field_hide']) ? true : false,							'S_SHOW_PROFILE'	=> ($cp->vars['field_show_profile']) ? true : false,							'S_FIELD_NO_VIEW'	=> ($cp->vars['field_no_view']) ? true : false,							'L_LANG_SPECIFIC'	=> sprintf($user->lang['LANG_SPECIFIC_OPTIONS'], $config['default_lang']),							'FIELD_TYPE'		=> $user->lang['FIELD_' . strtoupper($cp->profile_types[$field_type])],							'FIELD_IDENT'		=> $cp->vars['field_ident'],							'LANG_NAME'			=> $cp->vars['lang_name'],							'LANG_EXPLAIN'		=> $cp->vars['lang_explain'])						);						// String and Text needs to set default values here...						if ($field_type == FIELD_STRING || $field_type == FIELD_TEXT)						{							$template->assign_vars(array(								'S_TEXT'		=> ($field_type == FIELD_TEXT) ? true : false,								'S_STRING'		=> ($field_type == FIELD_STRING) ? true : false,								'L_DEFAULT_VALUE_EXPLAIN'	=> $user->lang[strtoupper($cp->profile_types[$field_type]) . '_DEFAULT_VALUE_EXPLAIN'],								'LANG_DEFAULT_VALUE'		=> $cp->vars['lang_default_value'])							);						}						if ($field_type == FIELD_BOOL || $field_type == FIELD_DROPDOWN)						{							// Initialize these array elements if we are creating a new field							if (!sizeof($cp->vars['lang_options']))							{								if ($field_type == FIELD_BOOL)								{									// No options have been defined for a boolean field.									$cp->vars['lang_options'][0] = '';									$cp->vars['lang_options'][1] = '';								}								else								{									// No options have been defined for the dropdown menu									$cp->vars['lang_options'] = array();								}							}							$template->assign_vars(array(								'S_BOOL'		=> ($field_type == FIELD_BOOL) ? true : false,								'S_DROPDOWN'	=> ($field_type == FIELD_DROPDOWN) ? true : false,								'L_LANG_OPTIONS_EXPLAIN'	=> $user->lang[strtoupper($cp->profile_types[$field_type]) . '_ENTRIES_EXPLAIN'],								'LANG_OPTIONS'				=> ($field_type == FIELD_DROPDOWN) ? implode("\n", $cp->vars['lang_options']) : '',								'FIRST_LANG_OPTION'			=> ($field_type == FIELD_BOOL) ? $cp->vars['lang_options'][0] : '',								'SECOND_LANG_OPTION'		=> ($field_type == FIELD_BOOL) ? $cp->vars['lang_options'][1] : '')							);						}					break;					case 2:						$template->assign_vars(array(							'S_STEP_TWO'		=> true,							'L_NEXT_STEP'			=> (sizeof($this->lang_defs['iso']) == 1) ? $user->lang['SAVE'] : $user->lang['PROFILE_LANG_OPTIONS'])						);						// Build options based on profile type						$function = 'get_' . $cp->profile_types[$field_type] . '_options';						$options = $cp->$function();						foreach ($options as $num => $option_ary)						{							$template->assign_block_vars('option', $option_ary);						}					break;					// Define remaining language variables					case 3:						$template->assign_var('S_STEP_THREE', true);						$options = $this->build_language_options($cp, $field_type, $action);						foreach ($options as $lang_id => $lang_ary)						{							$template->assign_block_vars('options', array(								'LANGUAGE'		=> sprintf($user->lang[(($lang_id == $this->edit_lang_id) ? 'DEFAULT_' : '') . 'ISO_LANGUAGE'], $lang_ary['lang_iso']))							);							foreach ($lang_ary['fields'] as $field_ident => $field_ary)							{								$template->assign_block_vars('options.field', array(									'L_TITLE'		=> $field_ary['TITLE'],									'L_EXPLAIN'		=> (isset($field_ary['EXPLAIN'])) ? $field_ary['EXPLAIN'] : '',									'FIELD'			=> $field_ary['FIELD'])								);							}						}					break;				}				$template->assign_vars(array(					'S_HIDDEN_FIELDS'	=> $s_hidden_fields)				);				return;			break;		}		$sql = 'SELECT *			FROM ' . PROFILE_FIELDS_TABLE . '			ORDER BY field_order';		$result = $db->sql_query($sql);		$s_one_need_edit = false;		while ($row = $db->sql_fetchrow($result))		{			$active_lang = (!$row['field_active']) ? 'ACTIVATE' : 'DEACTIVATE';			$active_value = (!$row['field_active']) ? 'activate' : 'deactivate';			$id = $row['field_id'];			$s_need_edit = (sizeof($this->lang_defs['diff'][$row['field_id']])) ? true : false;			if ($s_need_edit)			{				$s_one_need_edit = true;			}			$template->assign_block_vars('fields', array(				'FIELD_IDENT'		=> $row['field_ident'],				'FIELD_TYPE'		=> $user->lang['FIELD_' . strtoupper($cp->profile_types[$row['field_type']])],				'L_ACTIVATE_DEACTIVATE'		=> $user->lang[$active_lang],				'U_ACTIVATE_DEACTIVATE'		=> $this->u_action . "&amp;action=$active_value&amp;field_id=$id",				'U_EDIT'					=> $this->u_action . "&amp;action=edit&amp;field_id=$id",				'U_TRANSLATE'				=> $this->u_action . "&amp;action=edit&amp;field_id=$id&amp;step=3",				'U_DELETE'					=> $this->u_action . "&amp;action=delete&amp;field_id=$id",				'U_MOVE_UP'					=> $this->u_action . "&amp;action=move_up&amp;order={$row['field_order']}",				'U_MOVE_DOWN'				=> $this->u_action . "&amp;action=move_down&amp;order={$row['field_order']}",				'S_NEED_EDIT'				=> $s_need_edit)			);		}		$db->sql_freeresult($result);		// At least one option field needs editing?		if ($s_one_need_edit)		{			$template->assign_var('S_NEED_EDIT', true);		}		$s_select_type = '';		foreach ($cp->profile_types as $key => $value)		{			$s_select_type .= '<option value="' . $key . '">' . $user->lang['FIELD_' . strtoupper($value)] . '</option>';		}		$template->assign_vars(array(			'U_ACTION'			=> $this->u_action,			'S_TYPE_OPTIONS'	=> $s_select_type)		);	}	/**	* Build all Language specific options	*/	function build_language_options(&$cp, $field_type, $action = 'create')	{		global $user, $config, $db;		$default_lang_id = (!empty($this->edit_lang_id)) ? $this->edit_lang_id : $this->lang_defs['iso'][$config['default_lang']];		$sql = 'SELECT lang_id, lang_iso			FROM ' . LANG_TABLE . '			WHERE lang_id <> ' . (int) $default_lang_id . '			ORDER BY lang_english_name';		$result = $db->sql_query($sql);		$languages = array();		while ($row = $db->sql_fetchrow($result))		{			$languages[$row['lang_id']] = $row['lang_iso'];		}		$db->sql_freeresult($result);		$options = array();		$options['lang_name'] = 'string';		if ($cp->vars['lang_explain'])		{			$options['lang_explain'] = 'text';		}		switch ($field_type)		{			case FIELD_BOOL:				$options['lang_options'] = 'two_options';			break;			case FIELD_DROPDOWN:				$options['lang_options'] = 'optionfield';			break;			case FIELD_TEXT:			case FIELD_STRING:				if (strlen($cp->vars['lang_default_value']))				{					$options['lang_default_value'] = ($field_type == FIELD_STRING) ? 'string' : 'text';				}			break;		}		$lang_options = array();		foreach ($options as $field => $field_type)		{			$lang_options[1]['lang_iso'] = $this->lang_defs['id'][$default_lang_id];			$lang_options[1]['fields'][$field] = array(				'TITLE'		=> $user->lang['CP_' . strtoupper($field)],				'FIELD'		=> '<dd>' . ((is_array($cp->vars[$field])) ? implode('<br />', $cp->vars[$field]) : bbcode_nl2br($cp->vars[$field])) . '</dd>'			);			if (isset($user->lang['CP_' . strtoupper($field) . '_EXPLAIN']))			{				$lang_options[1]['fields'][$field]['EXPLAIN'] = $user->lang['CP_' . strtoupper($field) . '_EXPLAIN'];			}		}		foreach ($languages as $lang_id => $lang_iso)		{			$lang_options[$lang_id]['lang_iso'] = $lang_iso;			foreach ($options as $field => $field_type)			{				$value = ($action == 'create') ? utf8_normalize_nfc(request_var('l_' . $field, array(0 => ''), true)) : $cp->vars['l_' . $field];				if ($field == 'lang_options')				{					$var = (!isset($cp->vars['l_lang_options'][$lang_id]) || !is_array($cp->vars['l_lang_options'][$lang_id])) ? $cp->vars['lang_options'] : $cp->vars['l_lang_options'][$lang_id];					switch ($field_type)					{						case 'two_options':							$lang_options[$lang_id]['fields'][$field] = array(								'TITLE'		=> $user->lang['CP_' . strtoupper($field)],								'FIELD'		=> '											<dd><input class="medium" name="l_' . $field . '[' . $lang_id . '][]" value="' . ((isset($value[$lang_id][0])) ? $value[$lang_id][0] : $var[0]) . '" /> ' . $user->lang['FIRST_OPTION'] . '</dd>											<dd><input class="medium" name="l_' . $field . '[' . $lang_id . '][]" value="' . ((isset($value[$lang_id][1])) ? $value[$lang_id][1] : $var[1]) . '" /> ' . $user->lang['SECOND_OPTION'] . '</dd>'							);						break;						case 'optionfield':							$value = ((isset($value[$lang_id])) ? ((is_array($value[$lang_id])) ?  implode("\n", $value[$lang_id]) : $value[$lang_id]) : implode("\n", $var));							$lang_options[$lang_id]['fields'][$field] = array(								'TITLE'		=> $user->lang['CP_' . strtoupper($field)],								'FIELD'		=> '<dd><textarea name="l_' . $field . '[' . $lang_id . ']" rows="7" cols="80">' . $value . '</textarea></dd>'							);						break;					}					if (isset($user->lang['CP_' . strtoupper($field) . '_EXPLAIN']))					{						$lang_options[$lang_id]['fields'][$field]['EXPLAIN'] = $user->lang['CP_' . strtoupper($field) . '_EXPLAIN'];					}				}				else				{					$var = ($action == 'create' || !is_array($cp->vars[$field])) ? $cp->vars[$field] : $cp->vars[$field][$lang_id];					$lang_options[$lang_id]['fields'][$field] = array(						'TITLE'		=> $user->lang['CP_' . strtoupper($field)],						'FIELD'		=> ($field_type == 'string') ? '<dd><input class="medium" type="text" name="l_' . $field . '[' . $lang_id . ']" value="' . ((isset($value[$lang_id])) ? $value[$lang_id] : $var) . '" /></dd>' : '<dd><textarea name="l_' . $field . '[' . $lang_id . ']" rows="3" cols="80">' . ((isset($value[$lang_id])) ? $value[$lang_id] : $var) . '</textarea></dd>'					);					if (isset($user->lang['CP_' . strtoupper($field) . '_EXPLAIN']))					{						$lang_options[$lang_id]['fields'][$field]['EXPLAIN'] = $user->lang['CP_' . strtoupper($field) . '_EXPLAIN'];					}				}			}		}		return $lang_options;	}	/**	* Save Profile Field	*/	function save_profile_field(&$cp, $field_type, $action = 'create')	{		global $db, $config, $user;		$field_id = request_var('field_id', 0);		// Collect all information, if something is going wrong, abort the operation		$profile_sql = $profile_lang = $empty_lang = $profile_lang_fields = array();		$default_lang_id = (!empty($this->edit_lang_id)) ? $this->edit_lang_id : $this->lang_defs['iso'][$config['default_lang']];		if ($action == 'create')		{			$sql = 'SELECT MAX(field_order) as max_field_order				FROM ' . PROFILE_FIELDS_TABLE;			$result = $db->sql_query($sql);			$new_field_order = (int) $db->sql_fetchfield('max_field_order');			$db->sql_freeresult($result);			$field_ident = $cp->vars['field_ident'];		}		// Save the field		$profile_fields = array(			'field_length'			=> $cp->vars['field_length'],			'field_minlen'			=> $cp->vars['field_minlen'],			'field_maxlen'			=> $cp->vars['field_maxlen'],			'field_novalue'			=> $cp->vars['field_novalue'],			'field_default_value'	=> $cp->vars['field_default_value'],			'field_validation'		=> $cp->vars['field_validation'],			'field_required'		=> $cp->vars['field_required'],			'field_show_on_reg'		=> $cp->vars['field_show_on_reg'],			'field_show_on_vt'		=> $cp->vars['field_show_on_vt'],			'field_hide'			=> $cp->vars['field_hide'],			'field_show_profile'	=> $cp->vars['field_show_profile'],			'field_no_view'			=> $cp->vars['field_no_view']		);		if ($action == 'create')		{			$profile_fields += array(				'field_type'		=> $field_type,				'field_ident'		=> $field_ident,				'field_name'		=> $field_ident,				'field_order'		=> $new_field_order + 1,				'field_active'		=> 1			);			$sql = 'INSERT INTO ' . PROFILE_FIELDS_TABLE . ' ' . $db->sql_build_array('INSERT', $profile_fields);			$db->sql_query($sql);			$field_id = $db->sql_nextid();		}		else		{			$sql = 'UPDATE ' . PROFILE_FIELDS_TABLE . '				SET ' . $db->sql_build_array('UPDATE', $profile_fields) . "				WHERE field_id = $field_id";			$db->sql_query($sql);		}		if ($action == 'create')		{			$field_ident = 'pf_' . $field_ident;			$profile_sql[] = $this->add_field_ident($field_ident, $field_type);		}		$sql_ary = array(			'lang_name'				=> $cp->vars['lang_name'],			'lang_explain'			=> $cp->vars['lang_explain'],			'lang_default_value'	=> $cp->vars['lang_default_value']		);		if ($action == 'create')		{			$sql_ary['field_id'] = $field_id;			$sql_ary['lang_id'] = $default_lang_id;			$profile_sql[] = 'INSERT INTO ' . PROFILE_LANG_TABLE . ' ' . $db->sql_build_array('INSERT', $sql_ary);		}		else		{			$this->update_insert(PROFILE_LANG_TABLE, $sql_ary, array('field_id' => $field_id, 'lang_id' => $default_lang_id));		}		if (is_array($cp->vars['l_lang_name']) && sizeof($cp->vars['l_lang_name']))		{			foreach ($cp->vars['l_lang_name'] as $lang_id => $data)			{				if (($cp->vars['lang_name'] != '' && $cp->vars['l_lang_name'][$lang_id] == '')					|| ($cp->vars['lang_explain'] != '' && $cp->vars['l_lang_explain'][$lang_id] == '')					|| ($cp->vars['lang_default_value'] != '' && $cp->vars['l_lang_default_value'][$lang_id] == ''))				{					$empty_lang[$lang_id] = true;					break;				}				if (!isset($empty_lang[$lang_id]))				{					$profile_lang[] = array(						'field_id'		=> $field_id,						'lang_id'		=> $lang_id,						'lang_name'		=> $cp->vars['l_lang_name'][$lang_id],						'lang_explain'	=> (isset($cp->vars['l_lang_explain'][$lang_id])) ? $cp->vars['l_lang_explain'][$lang_id] : '',						'lang_default_value'	=> (isset($cp->vars['l_lang_default_value'][$lang_id])) ? $cp->vars['l_lang_default_value'][$lang_id] : ''					);				}			}			foreach ($empty_lang as $lang_id => $NULL)			{				$sql = 'DELETE FROM ' . PROFILE_LANG_TABLE . "					WHERE field_id = $field_id					AND lang_id = " . (int) $lang_id;				$db->sql_query($sql);			}		}		// These are always arrays because the key is the language id...		$cp->vars['l_lang_name']			= utf8_normalize_nfc(request_var('l_lang_name', array(0 => ''), true));		$cp->vars['l_lang_explain']			= utf8_normalize_nfc(request_var('l_lang_explain', array(0 => ''), true));		$cp->vars['l_lang_default_value']	= utf8_normalize_nfc(request_var('l_lang_default_value', array(0 => ''), true));		if ($field_type != FIELD_BOOL)		{			$cp->vars['l_lang_options']			= utf8_normalize_nfc(request_var('l_lang_options', array(0 => ''), true));		}		else		{			/**			* @todo check if this line is correct...			$cp->vars['l_lang_default_value']	= request_var('l_lang_default_value', array(0 => array('')), true);			*/			$cp->vars['l_lang_options']	= utf8_normalize_nfc(request_var('l_lang_options', array(0 => array('')), true));		}		if ($cp->vars['lang_options'])		{			if (!is_array($cp->vars['lang_options']))			{				$cp->vars['lang_options'] = explode("\n", $cp->vars['lang_options']);			}			if ($action != 'create')			{				$sql = 'DELETE FROM ' . PROFILE_FIELDS_LANG_TABLE . "					WHERE field_id = $field_id						AND lang_id = " . (int) $default_lang_id;				$db->sql_query($sql);			}			foreach ($cp->vars['lang_options'] as $option_id => $value)			{				$sql_ary = array(					'field_type'	=> (int) $field_type,					'lang_value'	=> $value				);				if ($action == 'create')				{					$sql_ary['field_id'] = $field_id;					$sql_ary['lang_id'] = $default_lang_id;					$sql_ary['option_id'] = (int) $option_id;					$profile_sql[] = 'INSERT INTO ' . PROFILE_FIELDS_LANG_TABLE . ' ' . $db->sql_build_array('INSERT', $sql_ary);				}				else				{					$this->update_insert(PROFILE_FIELDS_LANG_TABLE, $sql_ary, array(						'field_id'	=> $field_id,						'lang_id'	=> (int) $default_lang_id,						'option_id'	=> (int) $option_id)					);				}			}		}		if (is_array($cp->vars['l_lang_options']) && sizeof($cp->vars['l_lang_options']))		{			$empty_lang = array();			foreach ($cp->vars['l_lang_options'] as $lang_id => $lang_ary)			{				if (!is_array($lang_ary))				{					$lang_ary = explode("\n", $lang_ary);				}				if (sizeof($lang_ary) != sizeof($cp->vars['lang_options']))				{					$empty_lang[$lang_id] = true;				}				if (!isset($empty_lang[$lang_id]))				{					if ($action != 'create')					{						$sql = 'DELETE FROM ' . PROFILE_FIELDS_LANG_TABLE . "							WHERE field_id = $field_id							AND lang_id = " . (int) $lang_id;						$db->sql_query($sql);					}					foreach ($lang_ary as $option_id => $value)					{						$profile_lang_fields[] = array(							'field_id'		=> (int) $field_id,							'lang_id'		=> (int) $lang_id,							'option_id'		=> (int) $option_id,							'field_type'	=> (int) $field_type,							'lang_value'	=> $value						);					}				}			}			foreach ($empty_lang as $lang_id => $NULL)			{				$sql = 'DELETE FROM ' . PROFILE_FIELDS_LANG_TABLE . "					WHERE field_id = $field_id					AND lang_id = " . (int) $lang_id;				$db->sql_query($sql);			}		}		foreach ($profile_lang as $sql)		{			if ($action == 'create')			{				$profile_sql[] = 'INSERT INTO ' . PROFILE_LANG_TABLE . ' ' . $db->sql_build_array('INSERT', $sql);			}			else			{				$lang_id = $sql['lang_id'];				unset($sql['lang_id'], $sql['field_id']);				$this->update_insert(PROFILE_LANG_TABLE, $sql, array('lang_id' => (int) $lang_id, 'field_id' => $field_id));			}		}		if (sizeof($profile_lang_fields))		{			foreach ($profile_lang_fields as $sql)			{				if ($action == 'create')				{					$profile_sql[] = 'INSERT INTO ' . PROFILE_FIELDS_LANG_TABLE . ' ' . $db->sql_build_array('INSERT', $sql);				}				else				{					$lang_id = $sql['lang_id'];					$option_id = $sql['option_id'];					unset($sql['lang_id'], $sql['field_id'], $sql['option_id']);					$this->update_insert(PROFILE_FIELDS_LANG_TABLE, $sql, array(						'lang_id'	=> $lang_id,						'field_id'	=> $field_id,						'option_id'	=> $option_id)					);				}			}		}		$db->sql_transaction('begin');		if ($action == 'create')		{			foreach ($profile_sql as $sql)			{				$db->sql_query($sql);			}		}		$db->sql_transaction('commit');		if ($action == 'edit')		{			add_log('admin', 'LOG_PROFILE_FIELD_EDIT', $cp->vars['field_ident'] . ':' . $cp->vars['lang_name']);			trigger_error($user->lang['CHANGED_PROFILE_FIELD'] . adm_back_link($this->u_action));		}		else		{			add_log('admin', 'LOG_PROFILE_FIELD_CREATE', substr($field_ident, 3) . ':' . $cp->vars['lang_name']);			trigger_error($user->lang['ADDED_PROFILE_FIELD'] . adm_back_link($this->u_action));		}	}	/**	* Update, then insert if not successfull	*/	function update_insert($table, $sql_ary, $where_fields)	{		global $db;		$where_sql = array();		$check_key = '';		foreach ($where_fields as $key => $value)		{			$check_key = (!$check_key) ? $key : $check_key;			$where_sql[] = $key . ' = ' . ((is_string($value)) ? "'" . $db->sql_escape($value) . "'" : (int) $value);		}		if (!sizeof($where_sql))		{			return;		}		$sql = "SELECT $check_key			FROM $table			WHERE " . implode(' AND ', $where_sql);		$result = $db->sql_query($sql);		$row = $db->sql_fetchrow($result);		$db->sql_freeresult($result);		if (!$row)		{			$sql_ary = array_merge($where_fields, $sql_ary);			if (sizeof($sql_ary))			{				$db->sql_query("INSERT INTO $table " . $db->sql_build_array('INSERT', $sql_ary));			}		}		else		{			if (sizeof($sql_ary))			{				$sql = "UPDATE $table SET " . $db->sql_build_array('UPDATE', $sql_ary) . '					WHERE ' . implode(' AND ', $where_sql);				$db->sql_query($sql);			}		}	}	/**	* Return sql statement for adding a new field ident (profile field) to the profile fields data table	*/	function add_field_ident($field_ident, $field_type)	{		global $db;		switch ($db->sql_layer)		{			case 'mysql':			case 'mysql4':			case 'mysqli':				// We are defining the biggest common value, because of the possibility to edit the min/max values of each field.				$sql = 'ALTER TABLE ' . PROFILE_FIELDS_DATA_TABLE . " ADD `$field_ident` ";				switch ($field_type)				{					case FIELD_STRING:						$sql .= ' VARCHAR(255) ';					break;					case FIELD_DATE:						$sql .= 'VARCHAR(10) ';					break;					case FIELD_TEXT:						$sql .= "TEXT";		//						ADD {$field_ident}_bbcode_uid VARCHAR(5) NOT NULL,		//						ADD {$field_ident}_bbcode_bitfield INT(11) UNSIGNED";					break;					case FIELD_BOOL:						$sql .= 'TINYINT(2) ';					break;					case FIELD_DROPDOWN:						$sql .= 'MEDIUMINT(8) ';					break;					case FIELD_INT:						$sql .= 'BIGINT(20) ';					break;				}			break;			case 'sqlite':				switch ($field_type)				{					case FIELD_STRING:						$type = ' VARCHAR(255) ';					break;					case FIELD_DATE:						$type = 'VARCHAR(10) ';					break;					case FIELD_TEXT:						$type = "TEXT(65535)";		//						ADD {$field_ident}_bbcode_uid VARCHAR(5) NOT NULL,		//						ADD {$field_ident}_bbcode_bitfield INT(11) UNSIGNED";					break;					case FIELD_BOOL:						$type = 'TINYINT(2) ';					break;					case FIELD_DROPDOWN:						$type = 'MEDIUMINT(8) ';					break;					case FIELD_INT:						$type = 'BIGINT(20) ';					break;				}				// We are defining the biggest common value, because of the possibility to edit the min/max values of each field.				if (version_compare(sqlite_libversion(), '3.0') == -1)				{					$sql = "SELECT sql						FROM sqlite_master						WHERE type = 'table'							AND name = '" . PROFILE_FIELDS_DATA_TABLE . "'						ORDER BY type DESC, name;";					$result = $db->sql_query($sql);					$row = $db->sql_fetchrow($result);					$db->sql_freeresult($result);					// Create a temp table and populate it, destroy the existing one					$db->sql_query(preg_replace('#CREATE\s+TABLE\s+"?' . PROFILE_FIELDS_DATA_TABLE . '"?#i', 'CREATE TEMPORARY TABLE ' . PROFILE_FIELDS_DATA_TABLE . '_temp', $row['sql']));					$db->sql_query('INSERT INTO ' . PROFILE_FIELDS_DATA_TABLE . '_temp SELECT * FROM ' . PROFILE_FIELDS_DATA_TABLE);					$db->sql_query('DROP TABLE ' . PROFILE_FIELDS_DATA_TABLE);					preg_match('#\((.*)\)#s', $row['sql'], $matches);					$new_table_cols = trim($matches[1]);					$old_table_cols = explode(',', $new_table_cols);					$column_list = array();					foreach ($old_table_cols as $declaration)					{						$entities = preg_split('#\s+#', trim($declaration));						if ($entities[0] == 'PRIMARY')						{							continue;						}						$column_list[] = $entities[0];					}					$columns = implode(',', $column_list);					$new_table_cols = $field_ident . ' ' . $type . ',' . $new_table_cols;					// create a new table and fill it up. destroy the temp one					$db->sql_query('CREATE TABLE ' . PROFILE_FIELDS_DATA_TABLE . ' (' . $new_table_cols . ');');					$db->sql_query('INSERT INTO ' . PROFILE_FIELDS_DATA_TABLE . ' (' . $columns . ') SELECT ' . $columns . ' FROM ' . PROFILE_FIELDS_DATA_TABLE . '_temp;');					$db->sql_query('DROP TABLE ' . PROFILE_FIELDS_DATA_TABLE . '_temp');				}				else				{					$sql = 'ALTER TABLE ' . PROFILE_FIELDS_DATA_TABLE . " ADD $field_ident [$type]";				}			break;			case 'mssql':			case 'mssql_odbc':			case 'mssqlnative':				// We are defining the biggest common value, because of the possibility to edit the min/max values of each field.				$sql = 'ALTER TABLE [' . PROFILE_FIELDS_DATA_TABLE . "] ADD [$field_ident] ";				switch ($field_type)				{					case FIELD_STRING:						$sql .= ' [VARCHAR] (255) ';					break;					case FIELD_DATE:						$sql .= '[VARCHAR] (10) ';					break;					case FIELD_TEXT:						$sql .= "[TEXT]";		//						ADD {$field_ident}_bbcode_uid [VARCHAR] (5) NOT NULL,		//						ADD {$field_ident}_bbcode_bitfield [INT] UNSIGNED";					break;					case FIELD_BOOL:					case FIELD_DROPDOWN:						$sql .= '[INT] ';					break;					case FIELD_INT:						$sql .= '[FLOAT] ';					break;				}			break;			case 'postgres':				// We are defining the biggest common value, because of the possibility to edit the min/max values of each field.				$sql = 'ALTER TABLE ' . PROFILE_FIELDS_DATA_TABLE . " ADD COLUMN \"$field_ident\" ";				switch ($field_type)				{					case FIELD_STRING:						$sql .= ' VARCHAR(255) ';					break;					case FIELD_DATE:						$sql .= 'VARCHAR(10) ';					break;					case FIELD_TEXT:						$sql .= "TEXT";		//						ADD {$field_ident}_bbcode_uid VARCHAR(5) NOT NULL,		//						ADD {$field_ident}_bbcode_bitfield INT4 UNSIGNED";					break;					case FIELD_BOOL:						$sql .= 'INT2 ';					break;					case FIELD_DROPDOWN:						$sql .= 'INT4 ';					break;					case FIELD_INT:						$sql .= 'INT8 ';					break;				}			break;			case 'firebird':				// We are defining the biggest common value, because of the possibility to edit the min/max values of each field.				$sql = 'ALTER TABLE ' . PROFILE_FIELDS_DATA_TABLE . ' ADD "' . strtoupper($field_ident) . '" ';				switch ($field_type)				{					case FIELD_STRING:						$sql .= ' VARCHAR(255) ';					break;					case FIELD_DATE:						$sql .= 'VARCHAR(10) ';					break;					case FIELD_TEXT:						$sql .= "BLOB SUB_TYPE TEXT";		//						ADD {$field_ident}_bbcode_uid VARCHAR(5) NOT NULL,		//						ADD {$field_ident}_bbcode_bitfield INTEGER UNSIGNED";					break;					case FIELD_BOOL:					case FIELD_DROPDOWN:						$sql .= 'INTEGER ';					break;					case FIELD_INT:						$sql .= 'DOUBLE PRECISION ';					break;				}			break;			case 'oracle':				// We are defining the biggest common value, because of the possibility to edit the min/max values of each field.				$sql = 'ALTER TABLE ' . PROFILE_FIELDS_DATA_TABLE . " ADD $field_ident ";				switch ($field_type)				{					case FIELD_STRING:						$sql .= ' VARCHAR2(255) ';					break;					case FIELD_DATE:						$sql .= 'VARCHAR2(10) ';					break;					case FIELD_TEXT:						$sql .= "CLOB";		//						ADD {$field_ident}_bbcode_uid VARCHAR2(5) NOT NULL,		//						ADD {$field_ident}_bbcode_bitfield NUMBER(11) UNSIGNED";					break;					case FIELD_BOOL:						$sql .= 'NUMBER(2) ';					break;					case FIELD_DROPDOWN:						$sql .= 'NUMBER(8) ';					break;					case FIELD_INT:						$sql .= 'NUMBER(20) ';					break;				}			break;		}		return $sql;	}}?>
